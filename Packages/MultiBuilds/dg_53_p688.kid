KIDS Distribution saved on Feb 19, 2009@12:21:01
ENROLLMENT VISTA CHANGES RELEASE 2 (02/19/2009)
**KIDS**:DG*5.3*688^IVM*2.0*115^EAS*1.0*70^

**INSTALL NAME**
DG*5.3*688
"BLD",7090,0)
DG*5.3*688^REGISTRATION^0^3090219^y
"BLD",7090,1,0)
^^4^4^3051213^^^
"BLD",7090,1,1,0)
Patch for ENROLLMENT VISTA CHANGES TO SUPPORT ESR (RELEASE 2).
"BLD",7090,1,2,0)
 
"BLD",7090,1,3,0)
See the Patch description for DG*5.3*688 as documented in the Forum Patch 
"BLD",7090,1,4,0)
Module.
"BLD",7090,4,0)
^9.64PA^408.12^8
"BLD",7090,4,2,0)
2
"BLD",7090,4,2,2,0)
^9.641^2^1
"BLD",7090,4,2,2,2,0)
PATIENT  (File-top level)
"BLD",7090,4,2,2,2,1,0)
^9.6411^.32107^27
"BLD",7090,4,2,2,2,1,.09,0)
SOCIAL SECURITY NUMBER
"BLD",7090,4,2,2,2,1,.0907,0)
SSN VERIFICATION STATUS
"BLD",7090,4,2,2,2,1,.115,0)
STATE
"BLD",7090,4,2,2,2,1,.1171,0)
PROVINCE
"BLD",7090,4,2,2,2,1,.1172,0)
POSTAL CODE
"BLD",7090,4,2,2,2,1,.1173,0)
COUNTRY
"BLD",7090,4,2,2,2,1,.119,0)
ADDRESS CHANGE SOURCE
"BLD",7090,4,2,2,2,1,.121,0)
BAD ADDRESS INDICATOR
"BLD",7090,4,2,2,2,1,.12113,0)
TEMPORARY ADDRESS CHANGE DT/TM
"BLD",7090,4,2,2,2,1,.1215,0)
TEMPORARY STATE
"BLD",7090,4,2,2,2,1,.1221,0)
TEMPORARY ADDRESS PROVINCE
"BLD",7090,4,2,2,2,1,.1222,0)
TEMPORARY ADDRESS POSTAL CODE
"BLD",7090,4,2,2,2,1,.1223,0)
TEMPORARY ADDRESS COUNTRY
"BLD",7090,4,2,2,2,1,.133,0)
EMAIL ADDRESS
"BLD",7090,4,2,2,2,1,.14114,0)
CONFIDENTIAL ADDR PROVINCE
"BLD",7090,4,2,2,2,1,.14115,0)
CONFIDENTIAL ADDR POSTAL CODE
"BLD",7090,4,2,2,2,1,.14116,0)
CONFIDENTIAL ADDR COUNTRY
"BLD",7090,4,2,2,2,1,.3013,0)
P&T EFFECTIVE DATE
"BLD",7090,4,2,2,2,1,.304,0)
P&T
"BLD",7090,4,2,2,2,1,.32102,0)
AGENT ORANGE EXPOS. INDICATED?
"BLD",7090,4,2,2,2,1,.32107,0)
AGENT ORANGE REGISTRATION DATE
"BLD",7090,4,2,2,2,1,.3213,0)
AGENT ORANGE EXPOSURE LOCATION
"BLD",7090,4,2,2,2,1,.322013,0)
SOUTH WEST ASIA CONDITIONS?
"BLD",7090,4,2,2,2,1,.322014,0)
SW ASIA COND REGISTRATION DATE
"BLD",7090,4,2,2,2,1,.322015,0)
SW ASIA COND EXAM DATE
"BLD",7090,4,2,2,2,1,.525,0)
POW STATUS INDICATED?
"BLD",7090,4,2,2,2,1,.529,0)
POW STATUS VERIFIED
"BLD",7090,4,2,222)
y^y^p^^^^n^^n
"BLD",7090,4,2,224)

"BLD",7090,4,27.11,0)
27.11
"BLD",7090,4,27.11,2,0)
^9.641^27.11^1
"BLD",7090,4,27.11,2,27.11,0)
PATIENT ENROLLMENT  (File-top level)
"BLD",7090,4,27.11,2,27.11,1,0)
^9.6411^50.22^2
"BLD",7090,4,27.11,2,27.11,1,50.13,0)
SOUTH WEST ASIA CONDITIONS
"BLD",7090,4,27.11,2,27.11,1,50.22,0)
AGENT ORANGE EXPOSURE LOCATION
"BLD",7090,4,27.11,222)
y^y^p^^^^n^^n
"BLD",7090,4,27.11,224)

"BLD",7090,4,35,0)
35
"BLD",7090,4,35,2,0)
^9.641^35^1
"BLD",7090,4,35,2,35,0)
OTHER FEDERAL AGENCY  (File-top level)
"BLD",7090,4,35,2,35,1,0)
^9.6411^1^1
"BLD",7090,4,35,2,35,1,1,0)
ABBREVIATION
"BLD",7090,4,35,222)
y^n^p^^^^n^^n
"BLD",7090,4,35,224)

"BLD",7090,4,301.7,2,301.7,1,15,0)
PRIOR PROVINCE
"BLD",7090,4,301.7,2,301.7,1,16,0)
PRIOR POSTAL CODE
"BLD",7090,4,301.7,2,301.7,1,17,0)
PRIOR COUNTRY
"BLD",7090,4,408.12,0)
408.12
"BLD",7090,4,408.12,2,0)
^9.641^408.12^1
"BLD",7090,4,408.12,2,408.12,0)
PATIENT RELATION  (File-top level)
"BLD",7090,4,408.12,2,408.12,1,0)
^9.6411^.02^1
"BLD",7090,4,408.12,2,408.12,1,.02,0)
RELATIONSHIP
"BLD",7090,4,408.12,222)
y^n^p^^^^n^^n
"BLD",7090,4,408.12,224)

"BLD",7090,4,408.13,0)
408.13
"BLD",7090,4,408.13,2,0)
^9.641^408.13^1
"BLD",7090,4,408.13,2,408.13,0)
INCOME PERSON  (File-top level)
"BLD",7090,4,408.13,2,408.13,1,0)
^9.6411^.11^2
"BLD",7090,4,408.13,2,408.13,1,.09,0)
SOCIAL SECURITY NUMBER
"BLD",7090,4,408.13,2,408.13,1,.11,0)
SSN VERIFICATION STATUS
"BLD",7090,4,408.13,222)
y^n^p^^^^n^^n
"BLD",7090,4,408.13,224)

"BLD",7090,4,408.21,0)
408.21
"BLD",7090,4,408.21,2,0)
^9.641^408.21^1
"BLD",7090,4,408.21,2,408.21,0)
INDIVIDUAL ANNUAL INCOME  (File-top level)
"BLD",7090,4,408.21,2,408.21,1,0)
^9.6411^2.02^18
"BLD",7090,4,408.21,2,408.21,1,.08,0)
SOCIAL SECURITY (NOT SSI)
"BLD",7090,4,408.21,2,408.21,1,.09,0)
U.S. CIVIL SERVICE
"BLD",7090,4,408.21,2,408.21,1,.1,0)
U.S. RAILROAD RETIREMENT
"BLD",7090,4,408.21,2,408.21,1,.11,0)
MILITARY RETIREMENT
"BLD",7090,4,408.21,2,408.21,1,.12,0)
UNEMPLOYMENT COMPENSATION
"BLD",7090,4,408.21,2,408.21,1,.13,0)
OTHER RETIREMENT
"BLD",7090,4,408.21,2,408.21,1,.14,0)
TOTAL INCOME FROM EMPLOYMENT
"BLD",7090,4,408.21,2,408.21,1,.15,0)
INTEREST, DIVIDEND, OR ANNUITY
"BLD",7090,4,408.21,2,408.21,1,.16,0)
WORKERS COMP. OR BLACK LUNG
"BLD",7090,4,408.21,2,408.21,1,.17,0)
ALL OTHER INCOME
"BLD",7090,4,408.21,2,408.21,1,1.01,0)
ADJUSTED MEDICAL EXPENSES
"BLD",7090,4,408.21,2,408.21,1,1.02,0)
FUNERAL AND BURIAL EXPENSES
"BLD",7090,4,408.21,2,408.21,1,1.12,0)
GROSS MEDICAL EXPENSES
"BLD",7090,4,408.21,2,408.21,1,2.01,0)
CASH, AMOUNTS IN BANK ACCOUNTS
"BLD",7090,4,408.21,2,408.21,1,2.02,0)
STOCKS AND BONDS
"BLD",7090,4,408.21,2,408.21,1,2.03,0)
REAL PROPERTY
"BLD",7090,4,408.21,2,408.21,1,2.04,0)
OTHER PROPERTY OR ASSETS
"BLD",7090,4,408.21,2,408.21,1,2.05,0)
DEBTS
"BLD",7090,4,408.21,222)
y^y^p^^^^n^^n
"BLD",7090,4,408.21,224)

"BLD",7090,4,408.22,0)
408.22
"BLD",7090,4,408.22,2,0)
^9.641^408.22^1
"BLD",7090,4,408.22,2,408.22,0)
INCOME RELATION  (File-top level)
"BLD",7090,4,408.22,2,408.22,1,0)
^9.6411^.12^2
"BLD",7090,4,408.22,2,408.22,1,.11,0)
CHILD HAD INCOME
"BLD",7090,4,408.22,2,408.22,1,.12,0)
INCOME AVAILABLE TO YOU
"BLD",7090,4,408.22,222)
y^y^p^^^^n^^n
"BLD",7090,4,408.22,224)

"BLD",7090,4,408.31,0)
408.31
"BLD",7090,4,408.31,2,0)
^9.641^408.31^1
"BLD",7090,4,408.31,2,408.31,0)
ANNUAL MEANS TEST  (File-top level)
"BLD",7090,4,408.31,2,408.31,1,0)
^9.6411^2.11^3
"BLD",7090,4,408.31,2,408.31,1,.04,0)
INCOME
"BLD",7090,4,408.31,2,408.31,1,.05,0)
NET WORTH
"BLD",7090,4,408.31,2,408.31,1,2.11,0)
MEANS TEST VERSION
"BLD",7090,4,408.31,222)
y^y^p^^^^n^^n
"BLD",7090,4,408.31,224)

"BLD",7090,4,"APDD",2,2)

"BLD",7090,4,"APDD",2,2,.09)

"BLD",7090,4,"APDD",2,2,.0907)

"BLD",7090,4,"APDD",2,2,.115)

"BLD",7090,4,"APDD",2,2,.1171)

"BLD",7090,4,"APDD",2,2,.1172)

"BLD",7090,4,"APDD",2,2,.1173)

"BLD",7090,4,"APDD",2,2,.119)

"BLD",7090,4,"APDD",2,2,.121)

"BLD",7090,4,"APDD",2,2,.12113)

"BLD",7090,4,"APDD",2,2,.1215)

"BLD",7090,4,"APDD",2,2,.1221)

"BLD",7090,4,"APDD",2,2,.1222)

"BLD",7090,4,"APDD",2,2,.1223)

"BLD",7090,4,"APDD",2,2,.133)

"BLD",7090,4,"APDD",2,2,.14114)

"BLD",7090,4,"APDD",2,2,.14115)

"BLD",7090,4,"APDD",2,2,.14116)

"BLD",7090,4,"APDD",2,2,.3013)

"BLD",7090,4,"APDD",2,2,.304)

"BLD",7090,4,"APDD",2,2,.32102)

"BLD",7090,4,"APDD",2,2,.32107)

"BLD",7090,4,"APDD",2,2,.3213)

"BLD",7090,4,"APDD",2,2,.322013)

"BLD",7090,4,"APDD",2,2,.322014)

"BLD",7090,4,"APDD",2,2,.322015)

"BLD",7090,4,"APDD",2,2,.525)

"BLD",7090,4,"APDD",2,2,.529)

"BLD",7090,4,"APDD",27.11,27.11)

"BLD",7090,4,"APDD",27.11,27.11,50.13)

"BLD",7090,4,"APDD",27.11,27.11,50.22)

"BLD",7090,4,"APDD",35,35)

"BLD",7090,4,"APDD",35,35,1)

"BLD",7090,4,"APDD",301.7,301.7,15)

"BLD",7090,4,"APDD",301.7,301.7,16)

"BLD",7090,4,"APDD",301.7,301.7,17)

"BLD",7090,4,"APDD",408.12,408.12)

"BLD",7090,4,"APDD",408.12,408.12,.02)

"BLD",7090,4,"APDD",408.13,408.13)

"BLD",7090,4,"APDD",408.13,408.13,.09)

"BLD",7090,4,"APDD",408.13,408.13,.11)

"BLD",7090,4,"APDD",408.21,408.21)

"BLD",7090,4,"APDD",408.21,408.21,.08)

"BLD",7090,4,"APDD",408.21,408.21,.09)

"BLD",7090,4,"APDD",408.21,408.21,.1)

"BLD",7090,4,"APDD",408.21,408.21,.11)

"BLD",7090,4,"APDD",408.21,408.21,.12)

"BLD",7090,4,"APDD",408.21,408.21,.13)

"BLD",7090,4,"APDD",408.21,408.21,.14)

"BLD",7090,4,"APDD",408.21,408.21,.15)

"BLD",7090,4,"APDD",408.21,408.21,.16)

"BLD",7090,4,"APDD",408.21,408.21,.17)

"BLD",7090,4,"APDD",408.21,408.21,1.01)

"BLD",7090,4,"APDD",408.21,408.21,1.02)

"BLD",7090,4,"APDD",408.21,408.21,1.12)

"BLD",7090,4,"APDD",408.21,408.21,2.01)

"BLD",7090,4,"APDD",408.21,408.21,2.02)

"BLD",7090,4,"APDD",408.21,408.21,2.03)

"BLD",7090,4,"APDD",408.21,408.21,2.04)

"BLD",7090,4,"APDD",408.21,408.21,2.05)

"BLD",7090,4,"APDD",408.22,408.22)

"BLD",7090,4,"APDD",408.22,408.22,.11)

"BLD",7090,4,"APDD",408.22,408.22,.12)

"BLD",7090,4,"APDD",408.31,408.31)

"BLD",7090,4,"APDD",408.31,408.31,.04)

"BLD",7090,4,"APDD",408.31,408.31,.05)

"BLD",7090,4,"APDD",408.31,408.31,2.11)

"BLD",7090,4,"B",2,2)

"BLD",7090,4,"B",27.11,27.11)

"BLD",7090,4,"B",35,35)

"BLD",7090,4,"B",408.12,408.12)

"BLD",7090,4,"B",408.13,408.13)

"BLD",7090,4,"B",408.21,408.21)

"BLD",7090,4,"B",408.22,408.22)

"BLD",7090,4,"B",408.31,408.31)

"BLD",7090,6.3)
29
"BLD",7090,"ABPKG")
n
"BLD",7090,"INI")
EP^DG53688P
"BLD",7090,"INID")
^n^n
"BLD",7090,"INIT")
HECMSG^DG53688P
"BLD",7090,"KRN",0)
^9.67PA^8989.52^19
"BLD",7090,"KRN",.4,0)
.4
"BLD",7090,"KRN",.401,0)
.401
"BLD",7090,"KRN",.402,0)
.402
"BLD",7090,"KRN",.402,"NM",0)
^9.68A^7^7
"BLD",7090,"KRN",.402,"NM",1,0)
DGMT V1 ENTER/EDIT DEPENDENTS    FILE #408.22^408.22^0
"BLD",7090,"KRN",.402,"NM",2,0)
DGMT V1 ENTER/EDIT ANNUAL INC    FILE #408.21^408.21^0
"BLD",7090,"KRN",.402,"NM",3,0)
DGMT V1 ENTER/EDIT EXPENSES    FILE #408.21^408.21^0
"BLD",7090,"KRN",.402,"NM",4,0)
DGMT V1 ENTER/EDIT NET WORTH    FILE #408.21^408.21^0
"BLD",7090,"KRN",.402,"NM",5,0)
DGRP V1 ENTER/EDIT ANNUAL INC    FILE #408.21^408.21^0
"BLD",7090,"KRN",.402,"NM",6,0)
DG LOAD EDIT SCREEN 7    FILE #2^2^0
"BLD",7090,"KRN",.402,"NM",7,0)
DGRP ENTER/EDIT ANNUAL INCOME    FILE #408.21^408.21^0
"BLD",7090,"KRN",.402,"NM","B","DG LOAD EDIT SCREEN 7    FILE #2",6)

"BLD",7090,"KRN",.402,"NM","B","DGMT V1 ENTER/EDIT ANNUAL INC    FILE #408.21",2)

"BLD",7090,"KRN",.402,"NM","B","DGMT V1 ENTER/EDIT DEPENDENTS    FILE #408.22",1)

"BLD",7090,"KRN",.402,"NM","B","DGMT V1 ENTER/EDIT EXPENSES    FILE #408.21",3)

"BLD",7090,"KRN",.402,"NM","B","DGMT V1 ENTER/EDIT NET WORTH    FILE #408.21",4)

"BLD",7090,"KRN",.402,"NM","B","DGRP ENTER/EDIT ANNUAL INCOME    FILE #408.21",7)

"BLD",7090,"KRN",.402,"NM","B","DGRP V1 ENTER/EDIT ANNUAL INC    FILE #408.21",5)

"BLD",7090,"KRN",.403,0)
.403
"BLD",7090,"KRN",.5,0)
.5
"BLD",7090,"KRN",.84,0)
.84
"BLD",7090,"KRN",3.6,0)
3.6
"BLD",7090,"KRN",3.8,0)
3.8
"BLD",7090,"KRN",9.2,0)
9.2
"BLD",7090,"KRN",9.8,0)
9.8
"BLD",7090,"KRN",9.8,"NM",0)
^9.68A^115^100
"BLD",7090,"KRN",9.8,"NM",1,0)
DGMTSCU^^0^B13382727
"BLD",7090,"KRN",9.8,"NM",2,0)
DGMTA^^0^B40373601
"BLD",7090,"KRN",9.8,"NM",3,0)
DG53558^^0^B51112654
"BLD",7090,"KRN",9.8,"NM",4,0)
DG53558M^^0^B64818419
"BLD",7090,"KRN",9.8,"NM",8,0)
DGMTR^^0^B58184426
"BLD",7090,"KRN",9.8,"NM",9,0)
DGMTDD4^^0^B70665086
"BLD",7090,"KRN",9.8,"NM",10,0)
DGMTSC11^^0^B1785752
"BLD",7090,"KRN",9.8,"NM",11,0)
DGMTSC2^^0^B12084906
"BLD",7090,"KRN",9.8,"NM",14,0)
DGMTSCU3^^0^B8099876
"BLD",7090,"KRN",9.8,"NM",15,0)
DGMTU2^^0^B46628572
"BLD",7090,"KRN",9.8,"NM",16,0)
DGMTUTL^^0^B32802544
"BLD",7090,"KRN",9.8,"NM",17,0)
DGRP9^^0^B59126798
"BLD",7090,"KRN",9.8,"NM",18,0)
DGRPP^^0^B18355225
"BLD",7090,"KRN",9.8,"NM",19,0)
DGRPV^^0^B17609021
"BLD",7090,"KRN",9.8,"NM",20,0)
DGMTSC3V^^0^B5377303
"BLD",7090,"KRN",9.8,"NM",21,0)
DGMTSC4V^^0^B18024527
"BLD",7090,"KRN",9.8,"NM",22,0)
DGMTR1^^0^B31559684
"BLD",7090,"KRN",9.8,"NM",23,0)
DG53558N^^0^B9470625
"BLD",7090,"KRN",9.8,"NM",24,0)
DGMTSC2V^^0^B6811393
"BLD",7090,"KRN",9.8,"NM",25,0)
DGMTU22^^0^B2167797
"BLD",7090,"KRN",9.8,"NM",26,0)
DGMTUTL3^^0^B13743942
"BLD",7090,"KRN",9.8,"NM",27,0)
DGMTDD5^^0^B43767578
"BLD",7090,"KRN",9.8,"NM",29,0)
DGMTSCR^^0^B14443251
"BLD",7090,"KRN",9.8,"NM",30,0)
DGMTDD3^^0^B17870431
"BLD",7090,"KRN",9.8,"NM",31,0)
DGMTHLP^^0^B15434271
"BLD",7090,"KRN",9.8,"NM",35,0)
DGMTU11^^0^B23774730
"BLD",7090,"KRN",9.8,"NM",36,0)
VAFHLZDP^^0^B6500029
"BLD",7090,"KRN",9.8,"NM",37,0)
VAFHLZPD^^0^B57162988
"BLD",7090,"KRN",9.8,"NM",38,0)
VAFHLZTA^^0^B11281178
"BLD",7090,"KRN",9.8,"NM",39,0)
DGENUPL2^^0^B70882830
"BLD",7090,"KRN",9.8,"NM",40,0)
DGENUPLA^^0^B62008132
"BLD",7090,"KRN",9.8,"NM",41,0)
DGRPLE^^0^B21407706
"BLD",7090,"KRN",9.8,"NM",42,0)
DG53688P^^0^B80418911
"BLD",7090,"KRN",9.8,"NM",43,0)
DGRPE^^0^B60707997
"BLD",7090,"KRN",9.8,"NM",44,0)
DGRPEIS^^0^B44253668
"BLD",7090,"KRN",9.8,"NM",45,0)
DGRPEIS1^^0^B27428084
"BLD",7090,"KRN",9.8,"NM",46,0)
DGRPEIS2^^0^B19531893
"BLD",7090,"KRN",9.8,"NM",47,0)
DGREGAED^^0^B40294783
"BLD",7090,"KRN",9.8,"NM",48,0)
DGRP1^^0^B34627316
"BLD",7090,"KRN",9.8,"NM",49,0)
DGRPU^^0^B81808598
"BLD",7090,"KRN",9.8,"NM",50,0)
DGRPD^^0^B62562309
"BLD",7090,"KRN",9.8,"NM",51,0)
DGCNTRY^^0^B3718332
"BLD",7090,"KRN",9.8,"NM",52,0)
DGADDUTL^^0^B56565800
"BLD",7090,"KRN",9.8,"NM",53,0)
DGREGTED^^0^B23110608
"BLD",7090,"KRN",9.8,"NM",54,0)
DGCLEAR^^0^B6866608
"BLD",7090,"KRN",9.8,"NM",57,0)
DGLOCK^^0^B32786252
"BLD",7090,"KRN",9.8,"NM",58,0)
DGLOCK3^^0^B6374544
"BLD",7090,"KRN",9.8,"NM",59,0)
DGRPC^^0^B26505581
"BLD",7090,"KRN",9.8,"NM",60,0)
DGRPC2^^0^B64408428
"BLD",7090,"KRN",9.8,"NM",61,0)
DGRPC3^^0^B23485665
"BLD",7090,"KRN",9.8,"NM",62,0)
DGRPCADD^^0^B13015027
"BLD",7090,"KRN",9.8,"NM",64,0)
VADPT^^0^B16796333
"BLD",7090,"KRN",9.8,"NM",65,0)
VADPT0^^0^B13477759
"BLD",7090,"KRN",9.8,"NM",66,0)
VADPT1^^0^B42511929
"BLD",7090,"KRN",9.8,"NM",67,0)
VADPT4^^0^B35665898
"BLD",7090,"KRN",9.8,"NM",68,0)
DGRPEIS3^^0^B88249878
"BLD",7090,"KRN",9.8,"NM",69,0)
DGENELA^^0^B26888074
"BLD",7090,"KRN",9.8,"NM",70,0)
DGENELA1^^0^B77796991
"BLD",7090,"KRN",9.8,"NM",71,0)
DGENPTA^^0^B39002320
"BLD",7090,"KRN",9.8,"NM",72,0)
DGENPTA1^^0^B20787602
"BLD",7090,"KRN",9.8,"NM",73,0)
DGENUPL1^^0^B36244583
"BLD",7090,"KRN",9.8,"NM",74,0)
DGRP7^^0^B17215942
"BLD",7090,"KRN",9.8,"NM",75,0)
DGENUPL3^^0^B56076045
"BLD",7090,"KRN",9.8,"NM",76,0)
DGENUPL4^^0^B64586357
"BLD",7090,"KRN",9.8,"NM",77,0)
DGMTDD2^^0^B29539151
"BLD",7090,"KRN",9.8,"NM",79,0)
DGENU^^0^B39450626
"BLD",7090,"KRN",9.8,"NM",80,0)
DGENL1^^0^B67982069
"BLD",7090,"KRN",9.8,"NM",81,0)
DGENELA4^^0^B45731799
"BLD",7090,"KRN",9.8,"NM",82,0)
DGENA^^0^B20066908
"BLD",7090,"KRN",9.8,"NM",83,0)
DGENA1A^^0^B14794142
"BLD",7090,"KRN",9.8,"NM",84,0)
DGREGARP^^0^B87862676
"BLD",7090,"KRN",9.8,"NM",85,0)
DGRPC1^^0^B13110554
"BLD",7090,"KRN",9.8,"NM",86,0)
DGRPMS^^0^B49653378
"BLD",7090,"KRN",9.8,"NM",87,0)
DGADDUT2^^0^B2578124
"BLD",7090,"KRN",9.8,"NM",88,0)
DGREGTE2^^0^B21750712
"BLD",7090,"KRN",9.8,"NM",89,0)
DGRPECE^^0^B66239213
"BLD",7090,"KRN",9.8,"NM",90,0)
DGDEP^^0^B8540114
"BLD",7090,"KRN",9.8,"NM",91,0)
DGDEP0^^0^B13570758
"BLD",7090,"KRN",9.8,"NM",92,0)
DGDEP1^^0^B33356998
"BLD",7090,"KRN",9.8,"NM",93,0)
DGDEP2^^0^B20918784
"BLD",7090,"KRN",9.8,"NM",94,0)
DGDEP3^^0^B29628067
"BLD",7090,"KRN",9.8,"NM",95,0)
DGDEP4^^0^B15620254
"BLD",7090,"KRN",9.8,"NM",96,0)
DGENUPL^^0^B44426570
"BLD",7090,"KRN",9.8,"NM",99,0)
DGRPD1^^0^B8127087
"BLD",7090,"KRN",9.8,"NM",100,0)
DGMTU21^^0^B9783744
"BLD",7090,"KRN",9.8,"NM",101,0)
DGDDDTTM^^0^B4416608
"BLD",7090,"KRN",9.8,"NM",102,0)
DGRPCE1^^0^B59700884
"BLD",7090,"KRN",9.8,"NM",103,0)
DGRP6EF^^0^B17483122
"BLD",7090,"KRN",9.8,"NM",104,0)
DGENUPL8^^0^B13177328
"BLD",7090,"KRN",9.8,"NM",105,0)
DGENUPL7^^0^B32315527
"BLD",7090,"KRN",9.8,"NM",106,0)
DGRPE1^^0^B9042647
"BLD",7090,"KRN",9.8,"NM",107,0)
DGENA5^^0^B31534116
"BLD",7090,"KRN",9.8,"NM",108,0)
DGENELA2^^0^B2750986
"BLD",7090,"KRN",9.8,"NM",109,0)
VAFHLZBT^^0^B11379827
"BLD",7090,"KRN",9.8,"NM",110,0)
DGMTDD1^^0^B11336332
"BLD",7090,"KRN",9.8,"NM",111,0)
DG53688A^^0^B7357677
"BLD",7090,"KRN",9.8,"NM",112,0)
DGENEGT1^^0^B61377172
"BLD",7090,"KRN",9.8,"NM",113,0)
DGMTSC31^^0^B8816776
"BLD",7090,"KRN",9.8,"NM",114,0)
DGENUPL9^^0^B7773065
"BLD",7090,"KRN",9.8,"NM",115,0)
DG53688B^^0^B1690075
"BLD",7090,"KRN",9.8,"NM","B","DG53558",3)

"BLD",7090,"KRN",9.8,"NM","B","DG53558M",4)

"BLD",7090,"KRN",9.8,"NM","B","DG53558N",23)

"BLD",7090,"KRN",9.8,"NM","B","DG53688A",111)

"BLD",7090,"KRN",9.8,"NM","B","DG53688B",115)

"BLD",7090,"KRN",9.8,"NM","B","DG53688P",42)

"BLD",7090,"KRN",9.8,"NM","B","DGADDUT2",87)

"BLD",7090,"KRN",9.8,"NM","B","DGADDUTL",52)

"BLD",7090,"KRN",9.8,"NM","B","DGCLEAR",54)

"BLD",7090,"KRN",9.8,"NM","B","DGCNTRY",51)

"BLD",7090,"KRN",9.8,"NM","B","DGDDDTTM",101)

"BLD",7090,"KRN",9.8,"NM","B","DGDEP",90)

"BLD",7090,"KRN",9.8,"NM","B","DGDEP0",91)

"BLD",7090,"KRN",9.8,"NM","B","DGDEP1",92)

"BLD",7090,"KRN",9.8,"NM","B","DGDEP2",93)

"BLD",7090,"KRN",9.8,"NM","B","DGDEP3",94)

"BLD",7090,"KRN",9.8,"NM","B","DGDEP4",95)

"BLD",7090,"KRN",9.8,"NM","B","DGENA",82)

"BLD",7090,"KRN",9.8,"NM","B","DGENA1A",83)

"BLD",7090,"KRN",9.8,"NM","B","DGENA5",107)

"BLD",7090,"KRN",9.8,"NM","B","DGENEGT1",112)

"BLD",7090,"KRN",9.8,"NM","B","DGENELA",69)

"BLD",7090,"KRN",9.8,"NM","B","DGENELA1",70)

"BLD",7090,"KRN",9.8,"NM","B","DGENELA2",108)

"BLD",7090,"KRN",9.8,"NM","B","DGENELA4",81)

"BLD",7090,"KRN",9.8,"NM","B","DGENL1",80)

"BLD",7090,"KRN",9.8,"NM","B","DGENPTA",71)

"BLD",7090,"KRN",9.8,"NM","B","DGENPTA1",72)

"BLD",7090,"KRN",9.8,"NM","B","DGENU",79)

"BLD",7090,"KRN",9.8,"NM","B","DGENUPL",96)

"BLD",7090,"KRN",9.8,"NM","B","DGENUPL1",73)

"BLD",7090,"KRN",9.8,"NM","B","DGENUPL2",39)

"BLD",7090,"KRN",9.8,"NM","B","DGENUPL3",75)

"BLD",7090,"KRN",9.8,"NM","B","DGENUPL4",76)

"BLD",7090,"KRN",9.8,"NM","B","DGENUPL7",105)

"BLD",7090,"KRN",9.8,"NM","B","DGENUPL8",104)

"BLD",7090,"KRN",9.8,"NM","B","DGENUPL9",114)

"BLD",7090,"KRN",9.8,"NM","B","DGENUPLA",40)

"BLD",7090,"KRN",9.8,"NM","B","DGLOCK",57)

"BLD",7090,"KRN",9.8,"NM","B","DGLOCK3",58)

"BLD",7090,"KRN",9.8,"NM","B","DGMTA",2)

"BLD",7090,"KRN",9.8,"NM","B","DGMTDD1",110)

"BLD",7090,"KRN",9.8,"NM","B","DGMTDD2",77)

"BLD",7090,"KRN",9.8,"NM","B","DGMTDD3",30)

"BLD",7090,"KRN",9.8,"NM","B","DGMTDD4",9)

"BLD",7090,"KRN",9.8,"NM","B","DGMTDD5",27)

"BLD",7090,"KRN",9.8,"NM","B","DGMTHLP",31)

"BLD",7090,"KRN",9.8,"NM","B","DGMTR",8)

"BLD",7090,"KRN",9.8,"NM","B","DGMTR1",22)

"BLD",7090,"KRN",9.8,"NM","B","DGMTSC11",10)

"BLD",7090,"KRN",9.8,"NM","B","DGMTSC2",11)

"BLD",7090,"KRN",9.8,"NM","B","DGMTSC2V",24)

"BLD",7090,"KRN",9.8,"NM","B","DGMTSC31",113)

"BLD",7090,"KRN",9.8,"NM","B","DGMTSC3V",20)

"BLD",7090,"KRN",9.8,"NM","B","DGMTSC4V",21)

"BLD",7090,"KRN",9.8,"NM","B","DGMTSCR",29)

"BLD",7090,"KRN",9.8,"NM","B","DGMTSCU",1)

"BLD",7090,"KRN",9.8,"NM","B","DGMTSCU3",14)

"BLD",7090,"KRN",9.8,"NM","B","DGMTU11",35)

"BLD",7090,"KRN",9.8,"NM","B","DGMTU2",15)

"BLD",7090,"KRN",9.8,"NM","B","DGMTU21",100)

"BLD",7090,"KRN",9.8,"NM","B","DGMTU22",25)

"BLD",7090,"KRN",9.8,"NM","B","DGMTUTL",16)

"BLD",7090,"KRN",9.8,"NM","B","DGMTUTL3",26)

"BLD",7090,"KRN",9.8,"NM","B","DGREGAED",47)

"BLD",7090,"KRN",9.8,"NM","B","DGREGARP",84)

"BLD",7090,"KRN",9.8,"NM","B","DGREGTE2",88)

"BLD",7090,"KRN",9.8,"NM","B","DGREGTED",53)

"BLD",7090,"KRN",9.8,"NM","B","DGRP1",48)

"BLD",7090,"KRN",9.8,"NM","B","DGRP6EF",103)

"BLD",7090,"KRN",9.8,"NM","B","DGRP7",74)

"BLD",7090,"KRN",9.8,"NM","B","DGRP9",17)

"BLD",7090,"KRN",9.8,"NM","B","DGRPC",59)

"BLD",7090,"KRN",9.8,"NM","B","DGRPC1",85)

"BLD",7090,"KRN",9.8,"NM","B","DGRPC2",60)

"BLD",7090,"KRN",9.8,"NM","B","DGRPC3",61)

"BLD",7090,"KRN",9.8,"NM","B","DGRPCADD",62)

"BLD",7090,"KRN",9.8,"NM","B","DGRPCE1",102)

"BLD",7090,"KRN",9.8,"NM","B","DGRPD",50)

"BLD",7090,"KRN",9.8,"NM","B","DGRPD1",99)

"BLD",7090,"KRN",9.8,"NM","B","DGRPE",43)

"BLD",7090,"KRN",9.8,"NM","B","DGRPE1",106)

"BLD",7090,"KRN",9.8,"NM","B","DGRPECE",89)

"BLD",7090,"KRN",9.8,"NM","B","DGRPEIS",44)

"BLD",7090,"KRN",9.8,"NM","B","DGRPEIS1",45)

"BLD",7090,"KRN",9.8,"NM","B","DGRPEIS2",46)

"BLD",7090,"KRN",9.8,"NM","B","DGRPEIS3",68)

"BLD",7090,"KRN",9.8,"NM","B","DGRPLE",41)

"BLD",7090,"KRN",9.8,"NM","B","DGRPMS",86)

"BLD",7090,"KRN",9.8,"NM","B","DGRPP",18)

"BLD",7090,"KRN",9.8,"NM","B","DGRPU",49)

"BLD",7090,"KRN",9.8,"NM","B","DGRPV",19)

"BLD",7090,"KRN",9.8,"NM","B","VADPT",64)

"BLD",7090,"KRN",9.8,"NM","B","VADPT0",65)

"BLD",7090,"KRN",9.8,"NM","B","VADPT1",66)

"BLD",7090,"KRN",9.8,"NM","B","VADPT4",67)

"BLD",7090,"KRN",9.8,"NM","B","VAFHLZBT",109)

"BLD",7090,"KRN",9.8,"NM","B","VAFHLZDP",36)

"BLD",7090,"KRN",9.8,"NM","B","VAFHLZPD",37)

"BLD",7090,"KRN",9.8,"NM","B","VAFHLZTA",38)

"BLD",7090,"KRN",19,0)
19
"BLD",7090,"KRN",19,"NM",0)
^9.68A^^
"BLD",7090,"KRN",19.1,0)
19.1
"BLD",7090,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",7090,"KRN",101,0)
101
"BLD",7090,"KRN",101,"NM",0)
^9.68A^1^1
"BLD",7090,"KRN",101,"NM",1,0)
DGMT MEANS TEST DEPENDENT COPY^^1^
"BLD",7090,"KRN",101,"NM","B","DGMT MEANS TEST DEPENDENT COPY",1)

"BLD",7090,"KRN",409.61,0)
409.61
"BLD",7090,"KRN",771,0)
771
"BLD",7090,"KRN",870,0)
870
"BLD",7090,"KRN",8989.51,0)
8989.51
"BLD",7090,"KRN",8989.52,0)
8989.52
"BLD",7090,"KRN",8994,0)
8994
"BLD",7090,"KRN","B",.4,.4)

"BLD",7090,"KRN","B",.401,.401)

"BLD",7090,"KRN","B",.402,.402)

"BLD",7090,"KRN","B",.403,.403)

"BLD",7090,"KRN","B",.5,.5)

"BLD",7090,"KRN","B",.84,.84)

"BLD",7090,"KRN","B",3.6,3.6)

"BLD",7090,"KRN","B",3.8,3.8)

"BLD",7090,"KRN","B",9.2,9.2)

"BLD",7090,"KRN","B",9.8,9.8)

"BLD",7090,"KRN","B",19,19)

"BLD",7090,"KRN","B",19.1,19.1)

"BLD",7090,"KRN","B",101,101)

"BLD",7090,"KRN","B",409.61,409.61)

"BLD",7090,"KRN","B",771,771)

"BLD",7090,"KRN","B",870,870)

"BLD",7090,"KRN","B",8989.51,8989.51)

"BLD",7090,"KRN","B",8989.52,8989.52)

"BLD",7090,"KRN","B",8994,8994)

"BLD",7090,"QUES",0)
^9.62^^
"BLD",7090,"REQB",0)
^9.611^45^35
"BLD",7090,"REQB",2,0)
DG*5.3*653^2
"BLD",7090,"REQB",3,0)
DG*5.3*672^2
"BLD",7090,"REQB",6,0)
XU*8.0*378^2
"BLD",7090,"REQB",7,0)
HL*1.6*120^2
"BLD",7090,"REQB",8,0)
DG*5.3*631^2
"BLD",7090,"REQB",9,0)
DG*5.3*703^2
"BLD",7090,"REQB",12,0)
DG*5.3*673^2
"BLD",7090,"REQB",14,0)
DG*5.3*689^2
"BLD",7090,"REQB",18,0)
DG*5.3*708^2
"BLD",7090,"REQB",19,0)
DG*5.3*716^2
"BLD",7090,"REQB",20,0)
DG*5.3*735^2
"BLD",7090,"REQB",21,0)
DG*5.3*657^2
"BLD",7090,"REQB",22,0)
DG*5.3*730^2
"BLD",7090,"REQB",23,0)
DG*5.3*737^2
"BLD",7090,"REQB",24,0)
DG*5.3*742^2
"BLD",7090,"REQB",25,0)
DG*5.3*579^2
"BLD",7090,"REQB",26,0)
DG*5.3*624^2
"BLD",7090,"REQB",27,0)
DG*5.3*232^2
"BLD",7090,"REQB",28,0)
DG*5.3*717^2
"BLD",7090,"REQB",29,0)
DG*5.3*147^2
"BLD",7090,"REQB",30,0)
DG*5.3*514^2
"BLD",7090,"REQB",31,0)
DG*5.3*527^2
"BLD",7090,"REQB",32,0)
DG*5.3*564^2
"BLD",7090,"REQB",33,0)
DG*5.3*518^2
"BLD",7090,"REQB",34,0)
DG*5.3*456^2
"BLD",7090,"REQB",35,0)
DG*5.3*311^2
"BLD",7090,"REQB",36,0)
DG*5.3*182^2
"BLD",7090,"REQB",37,0)
DG*5.3*454^2
"BLD",7090,"REQB",38,0)
DG*5.3*560^2
"BLD",7090,"REQB",39,0)
DG*5.3*487^2
"BLD",7090,"REQB",40,0)
DG*5.3*498^2
"BLD",7090,"REQB",41,0)
DG*5.3*614^2
"BLD",7090,"REQB",42,0)
DG*5.3*122^2
"BLD",7090,"REQB",43,0)
DG*5.3*628^2
"BLD",7090,"REQB",45,0)
DG*5.3*789^2
"BLD",7090,"REQB","B","DG*5.3*122",42)

"BLD",7090,"REQB","B","DG*5.3*147",29)

"BLD",7090,"REQB","B","DG*5.3*182",36)

"BLD",7090,"REQB","B","DG*5.3*232",27)

"BLD",7090,"REQB","B","DG*5.3*311",35)

"BLD",7090,"REQB","B","DG*5.3*454",37)

"BLD",7090,"REQB","B","DG*5.3*456",34)

"BLD",7090,"REQB","B","DG*5.3*487",39)

"BLD",7090,"REQB","B","DG*5.3*498",40)

"BLD",7090,"REQB","B","DG*5.3*514",30)

"BLD",7090,"REQB","B","DG*5.3*518",33)

"BLD",7090,"REQB","B","DG*5.3*527",31)

"BLD",7090,"REQB","B","DG*5.3*560",38)

"BLD",7090,"REQB","B","DG*5.3*564",32)

"BLD",7090,"REQB","B","DG*5.3*579",25)

"BLD",7090,"REQB","B","DG*5.3*614",41)

"BLD",7090,"REQB","B","DG*5.3*624",26)

"BLD",7090,"REQB","B","DG*5.3*628",43)

"BLD",7090,"REQB","B","DG*5.3*631",8)

"BLD",7090,"REQB","B","DG*5.3*653",2)

"BLD",7090,"REQB","B","DG*5.3*657",21)

"BLD",7090,"REQB","B","DG*5.3*672",3)

"BLD",7090,"REQB","B","DG*5.3*673",12)

"BLD",7090,"REQB","B","DG*5.3*689",14)

"BLD",7090,"REQB","B","DG*5.3*703",9)

"BLD",7090,"REQB","B","DG*5.3*708",18)

"BLD",7090,"REQB","B","DG*5.3*716",19)

"BLD",7090,"REQB","B","DG*5.3*717",28)

"BLD",7090,"REQB","B","DG*5.3*730",22)

"BLD",7090,"REQB","B","DG*5.3*735",20)

"BLD",7090,"REQB","B","DG*5.3*737",23)

"BLD",7090,"REQB","B","DG*5.3*742",24)

"BLD",7090,"REQB","B","DG*5.3*789",45)

"BLD",7090,"REQB","B","HL*1.6*120",7)

"BLD",7090,"REQB","B","XU*8.0*378",6)

"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^y^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
5.3^DG
"FIA",2,2)
1
"FIA",2,2,.09)

"FIA",2,2,.0907)

"FIA",2,2,.115)

"FIA",2,2,.1171)

"FIA",2,2,.1172)

"FIA",2,2,.1173)

"FIA",2,2,.119)

"FIA",2,2,.121)

"FIA",2,2,.12113)

"FIA",2,2,.1215)

"FIA",2,2,.1221)

"FIA",2,2,.1222)

"FIA",2,2,.1223)

"FIA",2,2,.133)

"FIA",2,2,.14114)

"FIA",2,2,.14115)

"FIA",2,2,.14116)

"FIA",2,2,.3013)

"FIA",2,2,.304)

"FIA",2,2,.32102)

"FIA",2,2,.32107)

"FIA",2,2,.3213)

"FIA",2,2,.322013)

"FIA",2,2,.322014)

"FIA",2,2,.322015)

"FIA",2,2,.525)

"FIA",2,2,.529)

"FIA",27.11)
PATIENT ENROLLMENT
"FIA",27.11,0)
^DGEN(27.11,
"FIA",27.11,0,0)
27.11OID
"FIA",27.11,0,1)
y^y^p^^^^n^^n
"FIA",27.11,0,10)

"FIA",27.11,0,11)

"FIA",27.11,0,"RLRO")

"FIA",27.11,0,"VR")
5.3^DG
"FIA",27.11,27.11)
1
"FIA",27.11,27.11,50.13)

"FIA",27.11,27.11,50.22)

"FIA",35)
OTHER FEDERAL AGENCY
"FIA",35,0)
^DIC(35,
"FIA",35,0,0)
35
"FIA",35,0,1)
y^n^p^^^^n^^n
"FIA",35,0,10)

"FIA",35,0,11)

"FIA",35,0,"RLRO")

"FIA",35,0,"VR")
5.3^DG
"FIA",35,35)
1
"FIA",35,35,1)

"FIA",301.7)
IVM ADDRESS CHANGE LOG
"FIA",301.7,0)
^IVM(301.7,
"FIA",301.7,0,0)
301.7D
"FIA",301.7,0,1)
^^f
"FIA",301.7,0,10)

"FIA",301.7,0,11)

"FIA",301.7,0,"RLRO")

"FIA",301.7,0,"VR")
5.3^DG
"FIA",301.7,301.7)
0
"FIA",408.12)
PATIENT RELATION
"FIA",408.12,0)
^DGPR(408.12,
"FIA",408.12,0,0)
408.12PI
"FIA",408.12,0,1)
y^n^p^^^^n^^n
"FIA",408.12,0,10)

"FIA",408.12,0,11)

"FIA",408.12,0,"RLRO")

"FIA",408.12,0,"VR")
5.3^DG
"FIA",408.12,408.12)
1
"FIA",408.12,408.12,.02)

"FIA",408.13)
INCOME PERSON
"FIA",408.13,0)
^DGPR(408.13,
"FIA",408.13,0,0)
408.13
"FIA",408.13,0,1)
y^n^p^^^^n^^n
"FIA",408.13,0,10)

"FIA",408.13,0,11)

"FIA",408.13,0,"RLRO")

"FIA",408.13,0,"VR")
5.3^DG
"FIA",408.13,408.13)
1
"FIA",408.13,408.13,.09)

"FIA",408.13,408.13,.11)

"FIA",408.21)
INDIVIDUAL ANNUAL INCOME
"FIA",408.21,0)
^DGMT(408.21,
"FIA",408.21,0,0)
408.21ID
"FIA",408.21,0,1)
y^y^p^^^^n^^n
"FIA",408.21,0,10)

"FIA",408.21,0,11)

"FIA",408.21,0,"RLRO")

"FIA",408.21,0,"VR")
5.3^DG
"FIA",408.21,408.21)
1
"FIA",408.21,408.21,.08)

"FIA",408.21,408.21,.09)

"FIA",408.21,408.21,.1)

"FIA",408.21,408.21,.11)

"FIA",408.21,408.21,.12)

"FIA",408.21,408.21,.13)

"FIA",408.21,408.21,.14)

"FIA",408.21,408.21,.15)

"FIA",408.21,408.21,.16)

"FIA",408.21,408.21,.17)

"FIA",408.21,408.21,1.01)

"FIA",408.21,408.21,1.02)

"FIA",408.21,408.21,1.12)

"FIA",408.21,408.21,2.01)

"FIA",408.21,408.21,2.02)

"FIA",408.21,408.21,2.03)

"FIA",408.21,408.21,2.04)

"FIA",408.21,408.21,2.05)

"FIA",408.22)
INCOME RELATION
"FIA",408.22,0)
^DGMT(408.22,
"FIA",408.22,0,0)
408.22IP
"FIA",408.22,0,1)
y^y^p^^^^n^^n
"FIA",408.22,0,10)

"FIA",408.22,0,11)

"FIA",408.22,0,"RLRO")

"FIA",408.22,0,"VR")
5.3^DG
"FIA",408.22,408.22)
1
"FIA",408.22,408.22,.11)

"FIA",408.22,408.22,.12)

"FIA",408.31)
ANNUAL MEANS TEST
"FIA",408.31,0)
^DGMT(408.31,
"FIA",408.31,0,0)
408.31ID
"FIA",408.31,0,1)
y^y^p^^^^n^^n
"FIA",408.31,0,10)

"FIA",408.31,0,11)

"FIA",408.31,0,"RLRO")

"FIA",408.31,0,"VR")
5.3^DG
"FIA",408.31,408.31)
1
"FIA",408.31,408.31,.04)

"FIA",408.31,408.31,.05)

"FIA",408.31,408.31,2.11)

"INI")
EP^DG53688P
"INIT")
HECMSG^DG53688P
"IX",2,2,"ADGFMD09",0)
2^ADGFMD09^This x-ref calls the DG FIELD MONITOR event point.^MU^^F^I^I^2^^^^^A
"IX",2,2,"ADGFMD09",.1,0)
^^5^5^3021118
"IX",2,2,"ADGFMD09",.1,1,0)
This cross reference activates the DG FIELD MONITOR event point.
"IX",2,2,"ADGFMD09",.1,2,0)
Applications that wish to monitor edit activity related to this field may
"IX",2,2,"ADGFMD09",.1,3,0)
subscribe to that event point and take action as indicated by the changes
"IX",2,2,"ADGFMD09",.1,4,0)
that occur.  Refer to the DG FIELD MONITOR protocol for a description of
"IX",2,2,"ADGFMD09",.1,5,0)
the information available at the time of the event.
"IX",2,2,"ADGFMD09",1)
D FC^DGFCPROT(.DA,2,.09,"SET",$H,$G(DUZ),.X,.X1,.X2,$G(XQY0)) Q
"IX",2,2,"ADGFMD09",2)
D FC^DGFCPROT(.DA,2,.09,"KILL",$H,$G(DUZ),.X,.X1,.X2,$G(XQY0)) Q
"IX",2,2,"ADGFMD09",11.1,0)
^.114IA^1^1
"IX",2,2,"ADGFMD09",11.1,1,0)
1^F^2^.09^^^F
"IX",2,2,"ADGFMD115",0)
2^ADGFMD115^This x-ref calls the DG FIELD MONITOR event point.^MU^^F^I^I^2^^^^^A
"IX",2,2,"ADGFMD115",.1,0)
^^5^5^3030702
"IX",2,2,"ADGFMD115",.1,1,0)
This cross reference activates the DG FIELD MONITOR event point.
"IX",2,2,"ADGFMD115",.1,2,0)
Applications that wish to monitor edit activity related to this field may
"IX",2,2,"ADGFMD115",.1,3,0)
subscribe to that event point and take action as indicated by the changes
"IX",2,2,"ADGFMD115",.1,4,0)
that occur.  Refer to the DG FIELD MONITOR protocol for a description of
"IX",2,2,"ADGFMD115",.1,5,0)
the information available at the time of the event.
"IX",2,2,"ADGFMD115",1)
D FC^DGFCPROT(.DA,2,.115,"SET",$H,$G(DUZ),.X,.X1,.X2,$G(XQY0)) Q
"IX",2,2,"ADGFMD115",2)
D FC^DGFCPROT(.DA,2,.115,"KILL",$H,$G(DUZ),.X,.X1,.X2,$G(XQY0)) Q
"IX",2,2,"ADGFMD115",11.1,0)
^.114IA^1^1
"IX",2,2,"ADGFMD115",11.1,1,0)
1^F^2^.115^^^F
"IX",2,2,"ADTTM1",0)
2^ADTTM1^TEMPORARY ADDRESS Cross-Reference^MU^^R^^I^2^^^^^A
"IX",2,2,"ADTTM1",.1,0)
^^2^2^3050810
"IX",2,2,"ADTTM1",.1,1,0)
This cross-reference will update the TEMPORARY ADDRESS CHANGE DT/TM field
"IX",2,2,"ADTTM1",.1,2,0)
when the Temporary Address data changes for a patient.
"IX",2,2,"ADTTM1",1)
D TEMP^DGDDDTTM
"IX",2,2,"ADTTM1",2)
D TEMP^DGDDDTTM
"IX",2,2,"ADTTM1",11.1,0)
^.114IA^13^13
"IX",2,2,"ADTTM1",11.1,1,0)
1^F^2^.1211^^^F
"IX",2,2,"ADTTM1",11.1,2,0)
2^F^2^.1212^^^F
"IX",2,2,"ADTTM1",11.1,3,0)
3^F^2^.1213^^^F
"IX",2,2,"ADTTM1",11.1,4,0)
4^F^2^.1214^^^F
"IX",2,2,"ADTTM1",11.1,5,0)
5^F^2^.1215^^^F
"IX",2,2,"ADTTM1",11.1,6,0)
6^F^2^.1216^^^F
"IX",2,2,"ADTTM1",11.1,7,0)
7^F^2^.1217^^^F
"IX",2,2,"ADTTM1",11.1,8,0)
8^F^2^.1218^^^F
"IX",2,2,"ADTTM1",11.1,9,0)
9^F^2^.12105^^^F
"IX",2,2,"ADTTM1",11.1,10,0)
10^F^2^.12112^^^F
"IX",2,2,"ADTTM1",11.1,11,0)
11^F^2^.1221^^^F
"IX",2,2,"ADTTM1",11.1,11,3)

"IX",2,2,"ADTTM1",11.1,12,0)
12^F^2^.1222^^^F
"IX",2,2,"ADTTM1",11.1,12,3)

"IX",2,2,"ADTTM1",11.1,13,0)
13^F^2^.1223^^^F
"IX",2,2,"ADTTM1",11.1,13,3)

"IX",2,2,"ADTTM2",0)
2^ADTTM2^CONFIDENTIAL ADDRESS Cross-Reference^MU^^F^^I^2^^^^^A
"IX",2,2,"ADTTM2",.1,0)
^^2^2^3060213^
"IX",2,2,"ADTTM2",.1,1,0)
This cross-reference will update the CONFIDENTIAL ADDR CHANGE DT/TM field
"IX",2,2,"ADTTM2",.1,2,0)
when the confidential address data changes for a patient.
"IX",2,2,"ADTTM2",1)
D CONF^DGDDDTTM
"IX",2,2,"ADTTM2",2)
D CONF^DGDDDTTM
"IX",2,2,"ADTTM2",11.1,0)
^.114IA^13^13
"IX",2,2,"ADTTM2",11.1,1,0)
1^F^2^.1411^^^F
"IX",2,2,"ADTTM2",11.1,2,0)
2^F^2^.1412^^^F
"IX",2,2,"ADTTM2",11.1,3,0)
3^F^2^.1413^^^F
"IX",2,2,"ADTTM2",11.1,4,0)
4^F^2^.1414^^^F
"IX",2,2,"ADTTM2",11.1,5,0)
5^F^2^.1415^^^F
"IX",2,2,"ADTTM2",11.1,6,0)
6^F^2^.1416^^^F
"IX",2,2,"ADTTM2",11.1,7,0)
7^F^2^.1417^^^F
"IX",2,2,"ADTTM2",11.1,8,0)
8^F^2^.1418^^^F
"IX",2,2,"ADTTM2",11.1,9,0)
9^F^2^.14105^^^F
"IX",2,2,"ADTTM2",11.1,10,0)
10^F^2^.14114^^^F
"IX",2,2,"ADTTM2",11.1,11,0)
11^F^2^.14115^^^F
"IX",2,2,"ADTTM2",11.1,12,0)
12^F^2^.14116^^^F
"IX",2,2,"ADTTM2",11.1,13,0)
13^F^2^.14111^^^F
"IX",2,2,"AVAFC525",0)
2^AVAFC525^This x-ref calls the DG FIELD MONITOR event point.^MU^^F^I^I^2^^^^^A
"IX",2,2,"AVAFC525",.1,0)
^^5^5^3060127
"IX",2,2,"AVAFC525",.1,1,0)
This cross reference activates the DG FIELD MONITOR event point.
"IX",2,2,"AVAFC525",.1,2,0)
Applications that wish to monitor edit activity related to this field may
"IX",2,2,"AVAFC525",.1,3,0)
subscribe to that event point and take action as indicated by the changes
"IX",2,2,"AVAFC525",.1,4,0)
that occur.  Refer to the DG FIELD MONITOR protocol for a description of
"IX",2,2,"AVAFC525",.1,5,0)
the information available at the time of the event.
"IX",2,2,"AVAFC525",1)
D FC^DGFCPROT(.DA,2,.525,"SET",$H,$G(DUZ),.X,.X1,.X2,$G(XQY0)) Q
"IX",2,2,"AVAFC525",2)
D FC^DGFCPROT(.DA,2,.525,"KILL",$H,$G(DUZ),.X,.X1,.X2,$G(XQY0)) Q
"IX",2,2,"AVAFC525",11.1,0)
^.114IA^1^1
"IX",2,2,"AVAFC525",11.1,1,0)
1^F^2^.525^^^F
"IX",2,2,"AX1171",0)
2^AX1171^This cross-reference is used to notify HEC of changes^MU^^F^R^I^2^^^^^A
"IX",2,2,"AX1171",.1,0)
^^4^4^3060213^
"IX",2,2,"AX1171",.1,1,0)
This cross-reference is used to notify HEC of changes that may affect
"IX",2,2,"AX1171",.1,2,0)
enrollment.  This cross reference is needed on this field because the 
"IX",2,2,"AX1171",.1,3,0)
update to the ADDRESS CHANGE DT/TM field does NOT trigger a message to 
"IX",2,2,"AX1171",.1,4,0)
the HEC.
"IX",2,2,"AX1171",1)
D EVENT^IVMPLOG(DA)
"IX",2,2,"AX1171",2)
D EVENT^IVMPLOG(DA)
"IX",2,2,"AX1171",11.1,0)
^.114IA^1^1
"IX",2,2,"AX1171",11.1,1,0)
1^F^2^.1171^^^F
"IX",2,2,"AX1172",0)
2^AX1172^This cross-reference is used to notify HEC of changes.^MU^^F^R^I^2^^^^^A
"IX",2,2,"AX1172",.1,0)
^^3^3^3060210^
"IX",2,2,"AX1172",.1,1,0)
 This cross-reference is used to notify HEC of changes that may affect
"IX",2,2,"AX1172",.1,2,0)
enrollment.  This cross reference is necessary because the update of 
"IX",2,2,"AX1172",.1,3,0)
ADDRESS CHANGE DT/TM field does NOT trigger a message to the HEC.
"IX",2,2,"AX1172",1)
D EVENT^IVMPLOG(DA)
"IX",2,2,"AX1172",2)
D EVENT^IVMPLOG(DA)
"IX",2,2,"AX1172",11.1,0)
^.114IA^1^1
"IX",2,2,"AX1172",11.1,1,0)
1^F^2^.1172^^^F
"IX",2,2,"AX1173",0)
2^AX1173^This cross-reference is used to notify HEC of changes.^MU^^F^R^I^2^^^^^A
"IX",2,2,"AX1173",.1,0)
^^4^4^3060213^
"IX",2,2,"AX1173",.1,1,0)
This cross-reference is used to notify HEC of changes that may affect
"IX",2,2,"AX1173",.1,2,0)
enrollment.  This cross reference is needed on this field because the
"IX",2,2,"AX1173",.1,3,0)
update to the ADDRESS CHANGE DT/TM field does NOT trigger a message to
"IX",2,2,"AX1173",.1,4,0)
the HEC.
"IX",2,2,"AX1173",1)
D EVENT^IVMPLOG(DA)
"IX",2,2,"AX1173",2)
D EVENT^IVMPLOG(DA)
"IX",2,2,"AX1173",11.1,0)
^.114IA^1^1
"IX",2,2,"AX1173",11.1,1,0)
1^F^2^.1173^^^F
"IX",2,2,"AX1173",11.1,1,3)

"IX",2,2,"AXCCNTRY",0)
2^AXCCNTRY^Clears country specific fields when triggered^MU^^F^R^I^2^^^^^A
"IX",2,2,"AXCCNTRY",.1,0)
^^8^8^3060210^
"IX",2,2,"AXCCNTRY",.1,1,0)
This cross reference is fired whenever the field CONFIDENTIAL ADDR  
"IX",2,2,"AXCCNTRY",.1,2,0)
COUNTRY is changed.  It will clear data in fields associated with
"IX",2,2,"AXCCNTRY",.1,3,0)
whether  the COUNTRY value is domestic or foreign.  In the case of a
"IX",2,2,"AXCCNTRY",.1,4,0)
foreign  address, this cross reference will clear the CONFIDENTIAL ADDR
"IX",2,2,"AXCCNTRY",.1,5,0)
STATE, CONFIDENTIAL ADDR COUNTY and CONFIDENTIAL ADDR ZIP+4 fields.  For a
"IX",2,2,"AXCCNTRY",.1,6,0)
domestic CONFIDENTIAL address, this cross reference will clear the
"IX",2,2,"AXCCNTRY",.1,7,0)
CONFIDENTIAL  PROVINCE and CONFIDENTIAL POSTAL CODE fields.  See routine
"IX",2,2,"AXCCNTRY",.1,8,0)
^DGCNTRY for  modifying which fields are cleared by this cross reference.
"IX",2,2,"AXCCNTRY",1)
I ($T(EN^DGCNTRY)'="") D EN^DGCNTRY(2,"CONF",.14116)
"IX",2,2,"AXCCNTRY",2)
Q
"IX",2,2,"AXCCNTRY",11.1,0)
^.114IA^1^1
"IX",2,2,"AXCCNTRY",11.1,1,0)
1^F^2^.14116^^^F
"IX",2,2,"AXCNTRY",0)
2^AXCNTRY^Trigger cross reference to clear related fields^MU^^F^R^I^2^^^^^A
"IX",2,2,"AXCNTRY",1)
I ($T(EN^DGCNTRY)'="") D EN^DGCNTRY(2,"PERM",.1173)
"IX",2,2,"AXCNTRY",2)
Q
"IX",2,2,"AXCNTRY",11.1,0)
^.114IA^1^1
"IX",2,2,"AXCNTRY",11.1,1,0)
1^F^2^.1173^^^F
"IX",2,2,"AXENR13",0)
2^AXENR13^TRIGGER A MESSAGE FOR ANY CHANGE TO THESE FIELDS^MU^^R^R^I^2^^^^^A
"IX",2,2,"AXENR13",.1,0)
^^2^2^3060213^
"IX",2,2,"AXENR13",.1,1,0)
This cross-reference will trigger a message to the HEC anytime one of the 
"IX",2,2,"AXENR13",.1,2,0)
related fields is changed.
"IX",2,2,"AXENR13",1)
D EVENT^IVMPLOG(DFN)
"IX",2,2,"AXENR13",2)
D EVENT^IVMPLOG(DFN)
"IX",2,2,"AXENR13",11.1,0)
^.114IA^3^3
"IX",2,2,"AXENR13",11.1,1,0)
1^F^2^.133^^^F
"IX",2,2,"AXENR13",11.1,2,0)
2^F^2^.134^^^F
"IX",2,2,"AXENR13",11.1,3,0)
3^F^2^.135^^^F
"IX",2,2,"AXTCNTRY",0)
2^AXTCNTRY^Clear temporary addr fields when country changes^MU^^F^R^I^2^^^^^A
"IX",2,2,"AXTCNTRY",.1,0)
^^8^8^3060117^
"IX",2,2,"AXTCNTRY",.1,1,0)
 This cross reference is fired whenever the field TEMPORARY ADDRESS
"IX",2,2,"AXTCNTRY",.1,2,0)
COUNTRY is changed.  It will clear data in fields associated with whether 
"IX",2,2,"AXTCNTRY",.1,3,0)
the COUNTRY value is domestic or foreign.  In the case of a foreign 
"IX",2,2,"AXTCNTRY",.1,4,0)
address, this cross reference will clear the TEMPORARY ADDRESS STATE, 
"IX",2,2,"AXTCNTRY",.1,5,0)
TEMPORARY ADDRESS COUNTY and TEMPORARY ADDRESS ZIP+4 fields.  For a 
"IX",2,2,"AXTCNTRY",.1,6,0)
domestic temporary address, this cross reference will clear the TEMPORARY 
"IX",2,2,"AXTCNTRY",.1,7,0)
PROVINCE and TEMPORARY POSTAL CODE fields.  See routine ^DGCNTRY for 
"IX",2,2,"AXTCNTRY",.1,8,0)
modifying which fields are cleared by this cross reference.
"IX",2,2,"AXTCNTRY",1)
I ($T(EN^DGCNTRY)'="") D EN^DGCNTRY(2,"TEMP",.1223)
"IX",2,2,"AXTCNTRY",2)
Q
"IX",2,2,"AXTCNTRY",11.1,0)
^.114IA^1^1
"IX",2,2,"AXTCNTRY",11.1,1,0)
1^F^2^.1223^^^F
"KRN",.402,420,-1)
0^6
"KRN",.402,420,0)
DG LOAD EDIT SCREEN 7^3060221.0909^^2^^^3090127
"KRN",.402,420,"%D",0)
^^1^1^2960425^^^^
"KRN",.402,420,"%D",1,0)
This template is used to enter/edit data on registration screen 7.
"KRN",.402,420,"DIAB",1,1,2.05,0)
ALL
"KRN",.402,420,"DR",1,2)
S:DGDR'["701" Y="@702";391;D SC7^DGRPV;1901;.301;S:X'="Y" Y=.293;.302;.3012;.305;I $P($G(^DPT(DFN,.361)),U)="V" I $P($G(^DPT(DFN,.361)),U,3)="H" S Y="@293";.304;S:X'="Y" Y=.293;.3013;S Y=.293;@293;
"KRN",.402,420,"DR",1,2,1)
W !,"No editing P&T Data, Eligibility record verified by HEC";.293;S:'X Y=.313;.292;.291;.313;.314;@702;S:DGDR'["702" Y="@703";.36205;.36215;.36235;.3025;S:(X'="Y")&($P($G(^DPT(DA,.362)),U,12,14)'["Y") Y=.36265;.36295;.36265;
"KRN",.402,420,"DR",1,2,2)
S:X'="Y" Y="@703";.3626;@703;S:DGDR'["703" Y="@704";.361;D AAC1^DGLOCK2 S:DGAAC(1)']"" Y=361;.309;361;.323;D ^DGYZODS S:'DGODS Y="@704";11500.02;11500.03;@704;S:DGDR'["704" Y="@99";.3731;@99;
"KRN",.402,420,"DR",2,2.0361)
.01;
"KRN",.402,420,"DR",2,2.05)
.01:.02
"KRN",.402,420,"ROU")
^DGRPX7
"KRN",.402,420,"ROUOLD")
DGRPX7
"KRN",.402,475,-1)
0^7
"KRN",.402,475,0)
DGRP ENTER/EDIT ANNUAL INCOME^3060626.1346^^408.21^^^3060630
"KRN",.402,475,"DR",1,408.21)
K DGFIN;I '$D(DGDR) W !,*7,"Variable DGDR must be defined!" S Y="@999";S:DGDR'[901 Y="@902";@901;.08;@902;S:DGDR'[902 Y="@903";.09;@903;S:DGDR'[903 Y="@904";.1;@904;S:DGDR'[904 Y="@905";.11;@905;S:DGDR'[905 Y="@906";.12;@906;
"KRN",.402,475,"DR",1,408.21,1)
S:DGDR'[906 Y="@907";.13;@907;S:DGDR'[907 Y="@908";.14;@908;S:DGDR'[908 Y="@909";.15;@909;S:DGDR'[909 Y="@910";.16;@910;S:DGDR'[910 Y="@998";.17;@998;S DGFIN="";@999;
"KRN",.402,1733,-1)
0^5
"KRN",.402,1733,0)
DGRP V1 ENTER/EDIT ANNUAL INC^3051228.1323^^408.21^^^3090127
"KRN",.402,1733,"%D",0)
^.4021^4^4^3000425^^
"KRN",.402,1733,"%D",1,0)
This template is used to edit information on registration screen 9 (the
"KRN",.402,1733,"%D",2,0)
income screening screen).  It must be called from the load/edit screen
"KRN",.402,1733,"%D",3,0)
(by using one of the registration options).  DGDR is used to traverse the
"KRN",.402,1733,"%D",4,0)
template allowing entry of only those items selected for edit.
"KRN",.402,1733,"DIAB",1,0,408.21,1)
.08;"OTHER INCOME AMOUNTS"
"KRN",.402,1733,"DIAB",5,0,408.21,0)
.14;"TOTAL EMPLOYMENT INCOME"
"KRN",.402,1733,"DIAB",8,0,408.21,0)
.17;"NET INCOME FROM FARM, RANCH"
"KRN",.402,1733,"DR",1,408.21)
K DGFIN;I '$D(DGDR) W !,*7,"Variable DGDR must be defined!" S Y="@999";S:DGDR'[901 Y="@902";@901;.14TOTAL EMPLOYMENT INCOME~;@902;S:DGDR'[902 Y="@903";.17NET INCOME FROM FARM, RANCH~;@903;S:DGDR'[903 Y="@998";
"KRN",.402,1733,"DR",1,408.21,1)
.08OTHER INCOME AMOUNTS~;@998;S DGFIN="";@999;
"KRN",.402,1733,"ROU")
^DGRPXI
"KRN",.402,1733,"ROUOLD")
DGRPXI
"KRN",.402,1734,-1)
0^3
"KRN",.402,1734,0)
DGMT V1 ENTER/EDIT EXPENSES^3051230.0753^^408.21^^^3081128
"KRN",.402,1734,"DIAB",4,0,408.21,0)
GROSS MEDICAL EXPENSES;"TOTAL NON-REIMBURSED MEDICAL EXPENSES"
"KRN",.402,1734,"DR",1,408.21)
K DGFIN;I '$D(DGDR)!'$D(DGVIR0) W !,*7,"Variables DGDR and DGVIR0 must be defined!" S Y="@999";S:DGDR'["101" Y="@998";1.12TOTAL NON-REIMBURSED MEDICAL EXPENSES~;W !,$$GRSADJ^DGMTSCU4(DA,DFN,DGMTDT,DGVIRI);1.02;1.03;@998;S DGFIN="";
"KRN",.402,1734,"DR",1,408.21,1)
@999;
"KRN",.402,1735,-1)
0^2
"KRN",.402,1735,0)
DGMT V1 ENTER/EDIT ANNUAL INC^3051219.1725^^408.21^^^3081206
"KRN",.402,1735,"DIAB",2,0,408.21,1)
.08;"OTHER INCOME AMOUNTS"
"KRN",.402,1735,"DIAB",5,0,408.21,0)
.14;"TOTAL EMPLOYMENT INCOME"
"KRN",.402,1735,"DIAB",8,0,408.21,0)
.17;"NET INCOME FROM FARM, RANCH"
"KRN",.402,1735,"DR",1,408.21)
K DGFIN;I '$D(DGDR)!'$D(DGPRTY) W !,*7,"Variables DGDR and DGPRTY must be defined!" S Y="@999";S:DGDR'["101" Y="@102";@101;.14TOTAL EMPLOYMENT INCOME~;@102;S:DGDR'["102" Y="@103";.17NET INCOME FROM FARM, RANCH~;@103;
"KRN",.402,1735,"DR",1,408.21,1)
S:DGDR'["103" Y="@998";.08OTHER INCOME AMOUNTS~;@998;S DGFIN="";@999;
"KRN",.402,1736,-1)
0^4
"KRN",.402,1736,0)
DGMT V1 ENTER/EDIT NET WORTH^3051219.1755^^408.21^^^3081108
"KRN",.402,1736,"DIAB",8,0,408.21,0)
REAL PROPERTY;"LAND AND BLDGS"
"KRN",.402,1736,"DR",1,408.21)
K DGFIN;I '$D(DGDR)!'$D(DGPRTY) W !,*7,"Variables DGDR and DGPRTY must be defined!" S Y="@999";S:DGDR'["101" Y="@102";@101;2.01;@102;S:DGDR'["102" Y="@103";2.03LAND AND BLDGS~;@103;S:DGDR'["103" Y="@998";2.04;@998;S DGFIN="";@999;
"KRN",.402,1737,-1)
0^1
"KRN",.402,1737,0)
DGMT V1 ENTER/EDIT DEPENDENTS^3051219.1339^^408.22^^^3081108
"KRN",.402,1737,"DIAB",2,0,408.22,2)
CONTRIBUTED TO SUPPORT;T
"KRN",.402,1737,"DIAB",4,0,408.22,2)
AMOUNT CONTRIBUTED TO CHILD;T
"KRN",.402,1737,"DIAB",5,0,408.22,1)
INCAPABLE OF SELF-SUPPORT;T
"KRN",.402,1737,"DIAB",6,0,408.22,2)
CHILD HAD INCOME;"DID CHILD HAVE ANY INCOME/NET WORTH"
"KRN",.402,1737,"DIAB",7,0,408.22,1)
CHILD 18-23 IN SCHOOL//YES;T
"KRN",.402,1737,"DIAB",8,0,408.22,2)
INCOME AVAILABLE TO YOU;" WAS THE CHILD'S INCOME/NET WORTH AVAILABLE TO YOU"
"KRN",.402,1737,"DIAB",10,0,408.22,1)
CHILD 18-23 IN SCHOOL//NO;T
"KRN",.402,1737,"DIAB",12,0,408.22,1)
LIVED WITH PATIENT;"DID THE CHILD LIVE WITH YOU"
"KRN",.402,1737,"DR",1,408.22)
K DGFIN;N IAIPTR,PRPTR,PFILE,PIEN,PREC;N PDOB,AGE,PREF;S IAIPTR=$P(^DGMT(408.22,DA,0),"^",2);S PRPTR=$P(^DGMT(408.21,IAIPTR,0),"^",2);S PREF=$P(^DGPR(408.12,PRPTR,0),"^",3);S PFILE="^"_$P(PREF,$CHAR(59),2);
"KRN",.402,1737,"DR",1,408.22,1)
S PIEN=$P(PREF,$CHAR(59),1);S PREC=PFILE_PIEN_",0)";S DOB=$P(@PREC,"^",3);S AGE=($$FMDIFF^XLFDT(DT,DOB)/365.25);.09T~;I (AGE<18)!(AGE>23.99999) S Y="@1";.18T~//YES;S Y="@2";@1;.18T~//NO;@2;.06DID THE CHILD LIVE WITH YOU~;
"KRN",.402,1737,"DR",1,408.22,2)
S:X Y="@10";.1T~;S:'X Y="@10";.19T~;@10;.11DID CHILD HAVE ANY INCOME/NET WORTH~;S:'X Y="@998";.12 WAS THE CHILD'S INCOME/NET WORTH AVAILABLE TO YOU~;@998;S DGFIN="";
"KRN",101,4134,-1)
1^1
"KRN",101,4134,0)
DGMT MEANS TEST DEPENDENT COPY
"MBREQ")
0
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",47,-1)
1^1
"PKG",47,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",47,20,0)
^9.402P^^
"PKG",47,22,0)
^9.49I^1^1
"PKG",47,22,1,0)
5.3^2930813^2960613
"PKG",47,22,1,"PAH",1,0)
688^3090219^83
"PKG",47,22,1,"PAH",1,1,0)
^^4^4^3090219
"PKG",47,22,1,"PAH",1,1,1,0)
Patch for ENROLLMENT VISTA CHANGES TO SUPPORT ESR (RELEASE 2).
"PKG",47,22,1,"PAH",1,1,2,0)
 
"PKG",47,22,1,"PAH",1,1,3,0)
See the Patch description for DG*5.3*688 as documented in the Forum Patch 
"PKG",47,22,1,"PAH",1,1,4,0)
Module.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
100
"RTN","DG53558")
0^3^B51112654
"RTN","DG53558",1,0)
DG53558 ;ALB/GN - DG*5.3*558 CLEANUP FOR DUPE MEANS TEST FILE ; 8/15/08 12:27pm
"RTN","DG53558",2,0)
 ;;5.3;Registration;**558,579,688**;Aug 13, 1993;Build 29
"RTN","DG53558",3,0)
 ;
"RTN","DG53558",4,0)
 ; Read through the Mean Test file (#408.31) via the "C" xref.
"RTN","DG53558",5,0)
 ; Search for duplicate & Bad tests and delete them.  Duplicates are
"RTN","DG53558",6,0)
 ; defined as more than one test for the same patient for the same day
"RTN","DG53558",7,0)
 ; and the same status.  All dupes but the primary test will be
"RTN","DG53558",8,0)
 ; deleted and when no primary test on a given day then the last
"RTN","DG53558",9,0)
 ; transmission for that day will be kept
"RTN","DG53558",10,0)
 ;
"RTN","DG53558",11,0)
 ; Bad tests are defined as those that have a NULL status code in
"RTN","DG53558",12,0)
 ; the 0 node of file 408.31.
"RTN","DG53558",13,0)
 ;
"RTN","DG53558",14,0)
 ; DG*5.3*579 - changes were made to fix a problem when future dated
"RTN","DG53558",15,0)
 ; tests come in and flip a test from Primary to Non-Primary.  This
"RTN","DG53558",16,0)
 ; should not be done for IVM converted cases.  This patch will
"RTN","DG53558",17,0)
 ; find those IVM tests and flip them back to Priamry and flip the
"RTN","DG53558",18,0)
 ; future test that caused this back to Non-Primary.
"RTN","DG53558",19,0)
 Q
"RTN","DG53558",20,0)
TEST ; Entry point for testing this routine
"RTN","DG53558",21,0)
 S TESTING=1
"RTN","DG53558",22,0)
EN ;  Entry point for purging Duplicate Means Tests
"RTN","DG53558",23,0)
 ;
"RTN","DG53558",24,0)
 N QUIT,ZTDESC,ZTIO,ZTRTN,ZTSK,ZTQUEUED,ZTSAVE,CHKPNT
"RTN","DG53558",25,0)
 S CHKPNT=5
"RTN","DG53558",26,0)
 W !,"Do you want to process a group of "_CHKPNT_" duplicates and stop? "
"RTN","DG53558",27,0)
 K DIR
"RTN","DG53558",28,0)
 S DIR("?",1)="  Enter Y to process at least "_CHKPNT_" dupes and stop the utility.  This will "
"RTN","DG53558",29,0)
 S DIR("?",2)="  allow you to verify the cleanup in small steps.  Enter N to process the "
"RTN","DG53558",30,0)
 S DIR("?")="  remainder of the file to completion."
"RTN","DG53558",31,0)
 S DIR(0)="Y" D ^DIR
"RTN","DG53558",32,0)
 I $D(DTOUT)!$D(DUOUT) W !,"Cancelled...",! Q
"RTN","DG53558",33,0)
 ;
"RTN","DG53558",34,0)
 S:'Y CHKPNT=0                               ;do not use check points
"RTN","DG53558",35,0)
 ;
"RTN","DG53558",36,0)
 ; setup TM variables and Load 
"RTN","DG53558",37,0)
 S ZTRTN=$S($G(TESTING):"QUET^DG53558",1:"QUE^DG53558")
"RTN","DG53558",38,0)
 S ZTDESC="Cleanup Duplicates in the Means Test file"
"RTN","DG53558",39,0)
 S ZTIO=""
"RTN","DG53558",40,0)
 S ZTSAVE("CHKPNT")=""
"RTN","DG53558",41,0)
 ;
"RTN","DG53558",42,0)
 W !!,ZTDESC,!
"RTN","DG53558",43,0)
 ;check if already running or completed.
"RTN","DG53558",44,0)
 S QUIT=$$CHKSTAT(0)
"RTN","DG53558",45,0)
 Q:QUIT
"RTN","DG53558",46,0)
 D ^%ZTLOAD
"RTN","DG53558",47,0)
 L -^XTMP($$NAMSPC)
"RTN","DG53558",48,0)
 I $D(ZTSK) D
"RTN","DG53558",49,0)
 . W !,"This request queued as Task # ",ZTSK,!
"RTN","DG53558",50,0)
 Q
"RTN","DG53558",51,0)
 ;
"RTN","DG53558",52,0)
POST ;
"RTN","DG53558",53,0)
 N ZTDTH,ZTDESC,ZTIO,ZTRTN,ZTSK,ZTQUEUED,ZTSAVE,CHKPNT
"RTN","DG53558",54,0)
 D MES^XPDUTL("")
"RTN","DG53558",55,0)
 D MES^XPDUTL("=====================================================")
"RTN","DG53558",56,0)
 D MES^XPDUTL("Queuing Dupe Income Test Purge Utility.....")
"RTN","DG53558",57,0)
 I $$CHKSTAT(1) D  Q
"RTN","DG53558",58,0)
 . D BMES^XPDUTL("ABORTING  Post Install Utility Queuing")
"RTN","DG53558",59,0)
 . D MES^XPDUTL("=====================================================")
"RTN","DG53558",60,0)
 S ZTRTN="QUE^DG53558"
"RTN","DG53558",61,0)
 S ZTDESC="Cleanup Duplicates in the Means Test file"
"RTN","DG53558",62,0)
 S ZTIO="",ZTDTH=$H
"RTN","DG53558",63,0)
 S CHKPNT=0,ZTSAVE("CHKPNT")=""
"RTN","DG53558",64,0)
 D ^%ZTLOAD
"RTN","DG53558",65,0)
 L -^XTMP($$NAMSPC)
"RTN","DG53558",66,0)
 D MES^XPDUTL("This request queued as Task # "_ZTSK)
"RTN","DG53558",67,0)
 D MES^XPDUTL("=====================================================")
"RTN","DG53558",68,0)
 D MES^XPDUTL("")
"RTN","DG53558",69,0)
 Q
"RTN","DG53558",70,0)
 ;
"RTN","DG53558",71,0)
QUET ; Entry point for taskman (testing mode)
"RTN","DG53558",72,0)
 S TESTING=1
"RTN","DG53558",73,0)
QUE ; Entry point for taskman (live mode)
"RTN","DG53558",74,0)
 N NAMSPC S NAMSPC=$$NAMSPC^DG53558
"RTN","DG53558",75,0)
 L +^XTMP(NAMSPC):10 I '$T D  Q   ;quit if can't get a lock
"RTN","DG53558",76,0)
 . S $P(^XTMP(NAMSPC,0,0),U,5)="NO LOCK GAINED"
"RTN","DG53558",77,0)
 N QQ,ZTSTOP,XREC,MTIEN,DIK,DA,IVMTOT,IVMPUR,BEGTIME,PURGDT,IVMBAD
"RTN","DG53558",78,0)
 N DFN,TMP,ICDT,MTST,IVMDUPE,COUNT,PRI,TYPE,TYPNAM,DELETED,IVMIEN,PRIM
"RTN","DG53558",79,0)
 N SRCE,TMPIVM,XX,IVMCV,MAX,IVMIEND,IVMPFL,LINK,LTYP,LTNAM,MTVER
"RTN","DG53558",80,0)
 S TESTING=+$G(TESTING)
"RTN","DG53558",81,0)
 ;
"RTN","DG53558",82,0)
 ;get last run info if exists
"RTN","DG53558",83,0)
 S XREC=$G(^XTMP(NAMSPC,0,0))
"RTN","DG53558",84,0)
 S DFN=$P(XREC,U,1)         ;last REC processed
"RTN","DG53558",85,0)
 S IVMTOT=+$P(XREC,U,2)          ;total records processed
"RTN","DG53558",86,0)
 S IVMPUR=+$P(XREC,U,3)          ;total dupe records purged
"RTN","DG53558",87,0)
 S IVMBAD=+$P(XREC,U,7)          ;total bad records purged
"RTN","DG53558",88,0)
 S IVMPFL=+$P(XREC,U,8)          ;total PRIM records fliped
"RTN","DG53558",89,0)
 S IVMDUPE=IVMPUR
"RTN","DG53558",90,0)
 ;
"RTN","DG53558",91,0)
 ;setup XTMP according to stds. & for 60 day expiration
"RTN","DG53558",92,0)
 D SETUPX^DG53558M(60)
"RTN","DG53558",93,0)
 ;
"RTN","DG53558",94,0)
 ;init status field and start date & time if null
"RTN","DG53558",95,0)
 S $P(^XTMP(NAMSPC,0,0),U,5,6)="RUNNING^"
"RTN","DG53558",96,0)
 S:$P(^XTMP(NAMSPC,0,0),U,4)="" $P(^XTMP(NAMSPC,0,0),U,4)=$$NOW^XLFDT
"RTN","DG53558",97,0)
 ;
"RTN","DG53558",98,0)
 ;drive through "C" XREF level of  MT  file
"RTN","DG53558",99,0)
 S ZTSTOP=0,DELETED=0
"RTN","DG53558",100,0)
 F QQ=1:1 S DFN=$O(^DGMT(408.31,"C",DFN)) Q:'DFN  D  Q:ZTSTOP
"RTN","DG53558",101,0)
 . I $G(CHKPNT)>1,IVMPUR>IVMDUPE,IVMPUR-CHKPNT>IVMDUPE S ZTSTOP=1 Q
"RTN","DG53558",102,0)
 . K TMP,TMPIVM
"RTN","DG53558",103,0)
 . S IVMTOT=IVMTOT+1
"RTN","DG53558",104,0)
 . ;
"RTN","DG53558",105,0)
 . ;build local TMP and prioritize dupes
"RTN","DG53558",106,0)
 . S MTIEN=0
"RTN","DG53558",107,0)
 . F  S MTIEN=$O(^DGMT(408.31,"C",DFN,MTIEN)) Q:'MTIEN  D
"RTN","DG53558",108,0)
 . . I '$D(^DGMT(408.31,MTIEN,0)) K ^DGMT(408.31,"C",DFN,MTIEN) Q
"RTN","DG53558",109,0)
 . . S ICDT=$P(^DGMT(408.31,MTIEN,0),"^",1)
"RTN","DG53558",110,0)
 . . S MTST=$P(^DGMT(408.31,MTIEN,0),"^",3)
"RTN","DG53558",111,0)
 . . S PRI=+$G(^DGMT(408.31,MTIEN,"PRIM"))
"RTN","DG53558",112,0)
 . . S SRCE=+$P(^DGMT(408.31,MTIEN,0),"^",23)
"RTN","DG53558",113,0)
 . . S MTVER=+$P($G(^DGMT(408.31,MTIEN,2)),"^",11)
"RTN","DG53558",114,0)
 . . S MAX=0
"RTN","DG53558",115,0)
 . . S:$D(^DGMT(408.31,MTIEN,"C")) MAX=$O(^DGMT(408.31,MTIEN,"C",""),-1)
"RTN","DG53558",116,0)
 . . S IVMCV=0               ;init IVM converted flag to no DG*5.3*579
"RTN","DG53558",117,0)
 . . F XX=1:1:MAX D  Q:IVMCV
"RTN","DG53558",118,0)
 . . . S:^DGMT(408.31,MTIEN,"C",XX,0)["Z06 MT via Edb" IVMCV=1
"RTN","DG53558",119,0)
 . . I SRCE=2,IVMCV D                     ;IVM converted test from EDB
"RTN","DG53558",120,0)
 . . . S TMPIVM(DFN,ICDT,MTST)=MTIEN,TMPIVM(DFN,ICDT)=MTIEN
"RTN","DG53558",121,0)
 . . . S PRI=1                            ;set as PRIMARY
"RTN","DG53558",122,0)
 . . ;
"RTN","DG53558",123,0)
 . . ;test for null MT status & flag as BAD and delete
"RTN","DG53558",124,0)
 . . I MTST="" D  Q
"RTN","DG53558",125,0)
 . . . S TYPE=$P($G(^DGMT(408.31,MTIEN,0)),"^",19),TYPNAM=""
"RTN","DG53558",126,0)
 . . . S:TYPE]"" TYPNAM=$G(^DG(408.33,TYPE,0))
"RTN","DG53558",127,0)
 . . . D DELBAD(MTIEN,DFN,.IVMBAD,.DELETED)
"RTN","DG53558",128,0)
 . . . Q:'DELETED
"RTN","DG53558",129,0)
 . . . S ^XTMP(NAMSPC,DFN,ICDT,MTVER,999999,MTIEN,"BAD")=TYPE
"RTN","DG53558",130,0)
 . . . S ^XTMP(NAMSPC_".DET",DFN,ICDT,MTVER,MTIEN,"BAD")=TYPNAM
"RTN","DG53558",131,0)
 . . . S $P(^XTMP(NAMSPC,0,0),U,7)=IVMBAD
"RTN","DG53558",132,0)
 . . ;
"RTN","DG53558",133,0)
 . . S COUNT=+$G(TMP(DFN,ICDT,MTST))+1
"RTN","DG53558",134,0)
 . . S TMP(DFN,ICDT,MTVER,MTST)=COUNT
"RTN","DG53558",135,0)
 . . S TMP(DFN,ICDT,MTVER,MTST,MTIEN)=PRI
"RTN","DG53558",136,0)
 . . S:PRI TMP(DFN,ICDT,MTVER,MTST,"P")=MTIEN
"RTN","DG53558",137,0)
 . ;
"RTN","DG53558",138,0)
 . D CLNDUPS^DG53558N(DFN)
"RTN","DG53558",139,0)
 . ;update last processed info
"RTN","DG53558",140,0)
 . S $P(^XTMP(NAMSPC,0,0),U,1,3)=DFN_U_IVMTOT_U_IVMPUR
"RTN","DG53558",141,0)
 . S $P(^XTMP(NAMSPC,0,0),U,7,8)=IVMBAD_U_IVMPFL
"RTN","DG53558",142,0)
 . ;
"RTN","DG53558",143,0)
 . ;check for stop request after every 100 processed DFN recs
"RTN","DG53558",144,0)
 . I QQ#100=0 D
"RTN","DG53558",145,0)
 . . S:$$S^%ZTLOAD ZTSTOP=1
"RTN","DG53558",146,0)
 . . I $D(^XTMP(NAMSPC,0,"STOP")) S ZTSTOP=1 K ^XTMP(NAMSPC,0,"STOP")
"RTN","DG53558",147,0)
 ;
"RTN","DG53558",148,0)
 ;set status and mail stats
"RTN","DG53558",149,0)
 I ZTSTOP S $P(^XTMP(NAMSPC,0,0),U,5,6)="STOPPED"_U_$$NOW^XLFDT
"RTN","DG53558",150,0)
 E  S $P(^XTMP(NAMSPC,0,0),U,5,6)="COMPLETED"_U_$$NOW^XLFDT
"RTN","DG53558",151,0)
 D MAIL^DG53558M
"RTN","DG53558",152,0)
 K TESTING
"RTN","DG53558",153,0)
 L -^XTMP($$NAMSPC)
"RTN","DG53558",154,0)
 Q
"RTN","DG53558",155,0)
 ;
"RTN","DG53558",156,0)
 ;DG*5.3*579 released SETPRIM and 688 moved it to DG53558M
"RTN","DG53558",157,0)
 ;
"RTN","DG53558",158,0)
DELBAD(IEN,DFN,PUR,DELETED) ; Kill Bad test
"RTN","DG53558",159,0)
 S DELETED=0
"RTN","DG53558",160,0)
 Q:'$G(IEN)
"RTN","DG53558",161,0)
 S TESTING=+$G(TESTING,1),DFN=$G(DFN)
"RTN","DG53558",162,0)
 I 'TESTING S DELETED=$$DEL^DG53558M(IEN,.LINK,DFN)
"RTN","DG53558",163,0)
 S:TESTING DELETED=1
"RTN","DG53558",164,0)
 Q:'DELETED
"RTN","DG53558",165,0)
 S IVMBAD=IVMBAD+1
"RTN","DG53558",166,0)
 I '$D(ZTQUEUED) W !,"Deleting BAD IEN in 408.31 > ",IEN," for DFN > ",DFN
"RTN","DG53558",167,0)
 Q
"RTN","DG53558",168,0)
 ;
"RTN","DG53558",169,0)
CHKSTAT(POST) ;check if job is running, stopped, or completed
"RTN","DG53558",170,0)
 N Y,DUOUT,DTOUT,QUIT,STAT,STIME,NAMSPC
"RTN","DG53558",171,0)
 S QUIT=0
"RTN","DG53558",172,0)
 S NAMSPC=$$NAMSPC
"RTN","DG53558",173,0)
 L +^XTMP(NAMSPC):1
"RTN","DG53558",174,0)
 I '$T D BMES^XPDUTL("*** ALREADY RUNNING ***") Q 1
"RTN","DG53558",175,0)
 ;
"RTN","DG53558",176,0)
 ; get job status
"RTN","DG53558",177,0)
 S STAT=$P($G(^XTMP(NAMSPC,0,0)),U,5)
"RTN","DG53558",178,0)
 S STIME=$P($G(^XTMP(NAMSPC,0,0)),U,6)
"RTN","DG53558",179,0)
 ;
"RTN","DG53558",180,0)
 I POST D KILIT Q 0                                     ;DG*5.3*579
"RTN","DG53558",181,0)
 ;
"RTN","DG53558",182,0)
 ;if job Completed and run from menu opt, ask to Re-Run
"RTN","DG53558",183,0)
 I STAT="COMPLETED" D
"RTN","DG53558",184,0)
 . W " was Completed on "_$$FMTE^XLFDT(STIME)
"RTN","DG53558",185,0)
 . W !,"  Do you want to Re-Run again?"
"RTN","DG53558",186,0)
 . K DIR
"RTN","DG53558",187,0)
 . S DIR("?",1)="  Entering Y, will delete the XTMP global where the previous cleanup"
"RTN","DG53558",188,0)
 . S DIR("?")="  information was stored and begin a new job, or N to cancel request"
"RTN","DG53558",189,0)
 . S DIR(0)="Y" D ^DIR
"RTN","DG53558",190,0)
 . I 'Y S QUIT=1 Q
"RTN","DG53558",191,0)
 . W !," ARE YOU SURE?"
"RTN","DG53558",192,0)
 . K DIR
"RTN","DG53558",193,0)
 . S DIR("?")="Enter Y to begin a new Job or N to cancel request"
"RTN","DG53558",194,0)
 . S DIR(0)="Y" D ^DIR
"RTN","DG53558",195,0)
 . I 'Y S QUIT=1 Q
"RTN","DG53558",196,0)
 . ;fall thru to re-run mode, kill ^XTMPs
"RTN","DG53558",197,0)
 . D KILIT
"RTN","DG53558",198,0)
 Q QUIT
"RTN","DG53558",199,0)
 ;
"RTN","DG53558",200,0)
KILIT ; kill Xtmp work files for a re-run
"RTN","DG53558",201,0)
 S:'$D(NAMSPC) NAMSPC=$$NAMSPC^DG53558
"RTN","DG53558",202,0)
 K ^XTMP(NAMSPC),^XTMP(NAMSPC_".DET")
"RTN","DG53558",203,0)
 Q
"RTN","DG53558",204,0)
 ;
"RTN","DG53558",205,0)
STOP ; alternate stop method
"RTN","DG53558",206,0)
 S ^XTMP($$NAMSPC,0,"STOP")=""
"RTN","DG53558",207,0)
 Q
"RTN","DG53558",208,0)
 ;
"RTN","DG53558",209,0)
NAMSPC() ; Return a consistent name space variable
"RTN","DG53558",210,0)
 Q "DG53558"
"RTN","DG53558M")
0^4^B64818419
"RTN","DG53558M",1,0)
DG53558M ;ALB/GN - DG*5.3*558 CLEANUP UTILITES ; 7/16/04 11:14am
"RTN","DG53558M",2,0)
 ;;5.3;Registration;**558,579,688**;Aug 13, 1993;Build 29
"RTN","DG53558M",3,0)
 ;
"RTN","DG53558M",4,0)
 ;DG*53.*579 - add line for records modified vs. deleted ones
"RTN","DG53558M",5,0)
 ; Misc cleanup utilities
"RTN","DG53558M",6,0)
 ;
"RTN","DG53558M",7,0)
DELMT(IEN,DFN,PUR,DELETED,LINK) ; Kill duplicate MT
"RTN","DG53558M",8,0)
 S DELETED=0
"RTN","DG53558M",9,0)
 Q:'$G(IEN)
"RTN","DG53558M",10,0)
 S TESTING=+$G(TESTING,1),DFN=$G(DFN)
"RTN","DG53558M",11,0)
 S DELETED=$$DEL^DG53558M(IEN,.LINK,DFN)
"RTN","DG53558M",12,0)
 Q:'DELETED
"RTN","DG53558M",13,0)
 S PUR=PUR+1
"RTN","DG53558M",14,0)
 I '$D(ZTQUEUED) W !,"Deleting Dupe IEN in 408.31 > ",IEN," for DFN > ",DFN
"RTN","DG53558M",15,0)
 Q
"RTN","DG53558M",16,0)
 ;
"RTN","DG53558M",17,0)
DEL(IVMMTIEN,IVMLINK,DFN) ; delete 408.31 ien only, no income related files killed here
"RTN","DG53558M",18,0)
 ; input: ien to be deleted
"RTN","DG53558M",19,0)
 ; output: 1 = was deleted
"RTN","DG53558M",20,0)
 ;         0 = was not deleted
"RTN","DG53558M",21,0)
 N DA,DIK,IVMTYP
"RTN","DG53558M",22,0)
 S DFN=$G(DFN)
"RTN","DG53558M",23,0)
 S IVMTYP=$P($G(^DGMT(408.31,IVMMTIEN,0)),"^",19)           ;test type
"RTN","DG53558M",24,0)
 S IVMLINK=$P($G(^DGMT(408.31,IVMMTIEN,2)),"^",6)
"RTN","DG53558M",25,0)
 ;don't delete copay test linked to valid means test directly
"RTN","DG53558M",26,0)
 I IVMTYP=2,IVMLINK,$D(^DGMT(408.31,IVMLINK,0)) Q 0
"RTN","DG53558M",27,0)
 ;
"RTN","DG53558M",28,0)
 S DA=IVMMTIEN,DIK="^DGMT(408.31," D:'$G(TESTING) ^DIK    ;del MT here
"RTN","DG53558M",29,0)
 D:DFN D4081275(DFN)
"RTN","DG53558M",30,0)
 ;
"RTN","DG53558M",31,0)
 ;delete linked RXCT here after above delete of the MT
"RTN","DG53558M",32,0)
 I IVMTYP=1,IVMLINK D
"RTN","DG53558M",33,0)
 . S DA=IVMLINK,DIK="^DGMT(408.31," D:'$G(TESTING) ^DIK
"RTN","DG53558M",34,0)
 . D:DFN D4081275(DFN)
"RTN","DG53558M",35,0)
 ;
"RTN","DG53558M",36,0)
 Q 1
"RTN","DG53558M",37,0)
 ;
"RTN","DG53558M",38,0)
D4081275(DFN) ; Deletes SPOUSE Effective date multiple entries that may exist
"RTN","DG53558M",39,0)
 ;      and point to the MT just deleted.
"RTN","DG53558M",40,0)
 ;
"RTN","DG53558M",41,0)
 Q:'$D(^DPT(DFN,0))
"RTN","DG53558M",42,0)
 N R12,EIEN,ENODE,QUIT,DA,DIK
"RTN","DG53558M",43,0)
 S R12=0
"RTN","DG53558M",44,0)
 F  S R12=$O(^DGPR(408.12,"B",DFN,R12)) Q:'R12  D
"RTN","DG53558M",45,0)
 . Q:$P($G(^DGPR(408.12,R12,0)),"^",2)'=2         ;only process spouse
"RTN","DG53558M",46,0)
 . ; drive through the Effective Date Multiple in ien reverse order
"RTN","DG53558M",47,0)
 . S EIEN="A",QUIT=0
"RTN","DG53558M",48,0)
 . F  S EIEN=$O(^DGPR(408.12,R12,"E",EIEN),-1) Q:'EIEN  D  Q:QUIT
"RTN","DG53558M",49,0)
 . . S ENODE=$G(^DGPR(408.12,R12,"E",EIEN,0))
"RTN","DG53558M",50,0)
 . . Q:+$P(ENODE,"^",2)                           ;active flag
"RTN","DG53558M",51,0)
 . . Q:'+$P(ENODE,"^",4)                          ;no MT ien
"RTN","DG53558M",52,0)
 . . Q:$D(^DGMT(408.31,$P(ENODE,"^",4),0))        ;points to valid MT
"RTN","DG53558M",53,0)
 . . ; if inactive and does not point to a valid MT, delete this
"RTN","DG53558M",54,0)
 . . ; effective date multiple rec from 408.1275
"RTN","DG53558M",55,0)
 . . S DA=EIEN,DA(1)=R12,DIK="^DGPR(408.12,"_DA(1)_",""E"","
"RTN","DG53558M",56,0)
 . . D:'$G(TESTING) ^DIK
"RTN","DG53558M",57,0)
 . . I '$D(ZTQUEUED) W !,"Deleting BAD 408.1275 > ",R12,",",EIEN
"RTN","DG53558M",58,0)
 . . S QUIT=1
"RTN","DG53558M",59,0)
 Q
"RTN","DG53558M",60,0)
 ;
"RTN","DG53558M",61,0)
MAIL ; mail stats
"RTN","DG53558M",62,0)
 N BTIME,HTEXT,TEXT,NAMSPC,LIN,TYPNAM,MSGNO,IVMBAD,IVMPUR,IVMTOT,IVMPFL
"RTN","DG53558M",63,0)
 S MSGNO=0
"RTN","DG53558M",64,0)
 S NAMSPC=$$NAMSPC^DG53558
"RTN","DG53558M",65,0)
 S IVMTOT=$P($G(^XTMP(NAMSPC,0,0)),U,2)
"RTN","DG53558M",66,0)
 S IVMPUR=$P($G(^XTMP(NAMSPC,0,0)),U,3)
"RTN","DG53558M",67,0)
 S BTIME=$P($G(^XTMP(NAMSPC,0,0)),U,4)
"RTN","DG53558M",68,0)
 S STAT=$P($G(^XTMP(NAMSPC,0,0)),U,5)
"RTN","DG53558M",69,0)
 S STIME=$P($G(^XTMP(NAMSPC,0,0)),U,6)
"RTN","DG53558M",70,0)
 S IVMBAD=$P($G(^XTMP(NAMSPC,0,0)),U,7)
"RTN","DG53558M",71,0)
 S IVMPFL=$P($G(^XTMP(NAMSPC,0,0)),U,8)
"RTN","DG53558M",72,0)
 ;
"RTN","DG53558M",73,0)
 D HDNG(.HTEXT,.MSGNO,.LIN)
"RTN","DG53558M",74,0)
 D SUMRY(.LIN)
"RTN","DG53558M",75,0)
 D MAILIT(HTEXT)
"RTN","DG53558M",76,0)
 ;
"RTN","DG53558M",77,0)
 D SNDDET
"RTN","DG53558M",78,0)
 Q
"RTN","DG53558M",79,0)
 ;
"RTN","DG53558M",80,0)
HDNG(HTEXT,MSGNO,LIN) ;build heading lines for mail message
"RTN","DG53558M",81,0)
 K ^TMP(NAMSPC,$J,"MSG")
"RTN","DG53558M",82,0)
 S LIN=0
"RTN","DG53558M",83,0)
 S HTEXT="Cleanup Dupes in the Means Test file "_STAT_" on "
"RTN","DG53558M",84,0)
 S HTEXT=HTEXT_$$FMTE^XLFDT(STIME)
"RTN","DG53558M",85,0)
 D BLDLINE(HTEXT,.LIN)
"RTN","DG53558M",86,0)
 D BLDLINE("",.LIN)
"RTN","DG53558M",87,0)
 I TESTING S TEXT="** TESTING **" D BLDLINE(TEXT,.LIN)
"RTN","DG53558M",88,0)
 I MSGNO S TEXT="Message number: "_MSGNO D BLDLINE(TEXT,.LIN)
"RTN","DG53558M",89,0)
 D BLDLINE("",.LIN)
"RTN","DG53558M",90,0)
 I MSGNO D
"RTN","DG53558M",91,0)
 . S TEXT="* = modified due to IVM Converted Test scenario"
"RTN","DG53558M",92,0)
 . D BLDLINE(TEXT,.LIN)                                    ;DG*5.3*579
"RTN","DG53558M",93,0)
 S MSGNO=MSGNO+1
"RTN","DG53558M",94,0)
 Q
"RTN","DG53558M",95,0)
 ;
"RTN","DG53558M",96,0)
SUMRY(LIN) ;build summary lines for mail message
"RTN","DG53558M",97,0)
 S TEXT="     Records Processed: "_$J($FN(IVMTOT,","),11)
"RTN","DG53558M",98,0)
 D BLDLINE(TEXT,.LIN)
"RTN","DG53558M",99,0)
 S TEXT="Duplicate Tests Purged: "_$J($FN(IVMPUR,","),11)
"RTN","DG53558M",100,0)
 D BLDLINE(TEXT,.LIN)
"RTN","DG53558M",101,0)
 S TEXT="     Null Tests Purged: "_$J($FN(IVMBAD,","),11)
"RTN","DG53558M",102,0)
 D BLDLINE(TEXT,.LIN)
"RTN","DG53558M",103,0)
 S TEXT="Primary status changed: "_$J($FN(IVMPFL,","),11)
"RTN","DG53558M",104,0)
 D BLDLINE(TEXT,.LIN)
"RTN","DG53558M",105,0)
 D BLDLINE("",.LIN)
"RTN","DG53558M",106,0)
 D BLDLINE("",.LIN)
"RTN","DG53558M",107,0)
 D BLDLINE("",.LIN)
"RTN","DG53558M",108,0)
 ;
"RTN","DG53558M",109,0)
 I (IVMPUR+IVMBAD+IVMPFL) D
"RTN","DG53558M",110,0)
 . D BLDLINE("Detail changes to follow in subsequent mail messages.",.LIN)
"RTN","DG53558M",111,0)
 Q
"RTN","DG53558M",112,0)
 ;
"RTN","DG53558M",113,0)
SNDDET ;build and send detail messages limit under 2000 lines each
"RTN","DG53558M",114,0)
 N BAD,DATE,GL,MAXLIN,MORE,NAME,SSN,MTVER
"RTN","DG53558M",115,0)
 S MAXLIN=1995,MORE=0
"RTN","DG53558M",116,0)
 D HDNG(.HTEXT,.MSGNO,.LIN)
"RTN","DG53558M",117,0)
 ;
"RTN","DG53558M",118,0)
 S GL=$NA(^XTMP(NAMSPC_".DET",1)),TYPNAM=""
"RTN","DG53558M",119,0)
 F  S GL=$Q(@GL) Q:GL=""  Q:$QS(GL,1)'=(NAMSPC_".DET")  D
"RTN","DG53558M",120,0)
 . S MORE=1                             ;at least 1 more line to send
"RTN","DG53558M",121,0)
 . S DFN=$QS(GL,2)
"RTN","DG53558M",122,0)
 . S ICDT=$QS(GL,3)
"RTN","DG53558M",123,0)
 . S MTVER=$QS(GL,4)
"RTN","DG53558M",124,0)
 . S MTIEN=$QS(GL,5)
"RTN","DG53558M",125,0)
 . S BAD=$QS(GL,6)
"RTN","DG53558M",126,0)
 . S SSN=$P($G(^DPT(DFN,0)),"^",9),NAME=$P($G(^DPT(DFN,0)),"^")
"RTN","DG53558M",127,0)
 . S DATE=$$FMTE^XLFDT(ICDT)
"RTN","DG53558M",128,0)
 . S TYPNAM=$G(@GL)
"RTN","DG53558M",129,0)
 . S TEXT=$S(TYPNAM["PRIMARY":"* Prim> ",1:"  Dupe> ")
"RTN","DG53558M",130,0)
 . S:BAD="BAD" TEXT="  Null> "
"RTN","DG53558M",131,0)
 . S TEXT=TEXT_"ssn: "_SSN_" "_$J(TYPNAM,22)_"  date: "_DATE_"  ien: "_MTIEN_" ver: "_+MTVER
"RTN","DG53558M",132,0)
 . D BLDLINE(TEXT,.LIN)
"RTN","DG53558M",133,0)
 . ;max lines reached, print a msg
"RTN","DG53558M",134,0)
 . I LIN>MAXLIN D MAILIT(HTEXT),HDNG(.HTEXT,.MSGNO,.LIN) S MORE=0
"RTN","DG53558M",135,0)
 ;
"RTN","DG53558M",136,0)
 ;print final message if any to print
"RTN","DG53558M",137,0)
 D MAILIT(HTEXT):MORE
"RTN","DG53558M",138,0)
 Q
"RTN","DG53558M",139,0)
 ;
"RTN","DG53558M",140,0)
BLDLINE(TEXT,LIN) ;build a single line into TMP message global
"RTN","DG53558M",141,0)
 S LIN=LIN+1
"RTN","DG53558M",142,0)
 S ^TMP(NAMSPC,$J,"MSG",LIN)=TEXT
"RTN","DG53558M",143,0)
 Q
"RTN","DG53558M",144,0)
MAILIT(HTEXT) ; send the mail message
"RTN","DG53558M",145,0)
 N XMY,XMDUZ,XMSUB,XMTEXT
"RTN","DG53558M",146,0)
 S XMY(DUZ)="",XMDUZ=.5
"RTN","DG53558M",147,0)
 S XMSUB=HTEXT_" Results"
"RTN","DG53558M",148,0)
 S XMTEXT="^TMP(NAMSPC,$J,""MSG"","
"RTN","DG53558M",149,0)
 D ^XMD
"RTN","DG53558M",150,0)
 Q
"RTN","DG53558M",151,0)
 ;
"RTN","DG53558M",152,0)
MONITOR ; Monitor job while running
"RTN","DG53558M",153,0)
 N IOINORM,IOINHI,IOUON,IOUOFF,IOBON,IOBOFF,IORVON,IORVOFF,IOHOME
"RTN","DG53558M",154,0)
 N IOELEOL,NAMSPC,REC,IVMTOT,IVMPUR,STIME,IVMEND,RUN,IVMTOTAL,IVMLST
"RTN","DG53558M",155,0)
 N STAT,IVMLINE,IVMBLNK,NOWTIM,%H,DTOUT,I,IVMLEN,IVMQUIT,TITLE,TLEN,X
"RTN","DG53558M",156,0)
 N NOWTIME,PCT,TMP
"RTN","DG53558M",157,0)
 S:'$D(U) U="^"
"RTN","DG53558M",158,0)
 S NAMSPC=$$NAMSPC^DG53558
"RTN","DG53558M",159,0)
 S TMP=0 F IVMTOTAL=0:1 S TMP=$O(^DGMT(408.31,"C",TMP)) Q:'TMP
"RTN","DG53558M",160,0)
 S IVMQUIT=0
"RTN","DG53558M",161,0)
 D SCRNSET
"RTN","DG53558M",162,0)
 ;
"RTN","DG53558M",163,0)
 F  D  Q:IVMQUIT
"RTN","DG53558M",164,0)
 . ;check lock status
"RTN","DG53558M",165,0)
 . L +^XTMP(NAMSPC):0
"RTN","DG53558M",166,0)
 . I '$T S RUN=1
"RTN","DG53558M",167,0)
 . E  S RUN=0
"RTN","DG53558M",168,0)
 . L -^XTMP(NAMSPC)
"RTN","DG53558M",169,0)
 . S REC=$G(^XTMP(NAMSPC,0,0))
"RTN","DG53558M",170,0)
 . S STAT=$P(REC,U,5) S:STAT="" STAT="NOT RUNNING"
"RTN","DG53558M",171,0)
 . S IVMLST=$P(REC,U,1),IVMTOT=$P(REC,U,2),IVMPUR=$P(REC,U,3)
"RTN","DG53558M",172,0)
 . S STIME=$P(REC,U,6),IVMBAD=$P(REC,U,7)
"RTN","DG53558M",173,0)
 . S:IVMTOTAL>0 PCT=IVMTOT/IVMTOTAL
"RTN","DG53558M",174,0)
 . S PCT=PCT*100
"RTN","DG53558M",175,0)
 . S NOWTIME=$$NOW^XLFDT
"RTN","DG53558M",176,0)
 . I (RUN&(STAT'="RUNNING"))!('RUN&(STAT="RUNNING")) D
"RTN","DG53558M",177,0)
 . . S STAT="ERRORED"
"RTN","DG53558M",178,0)
 . D CLRSCR
"RTN","DG53558M",179,0)
 . S $P(IVMBLNK," ",81)=""
"RTN","DG53558M",180,0)
 . S IVMLINE=IVMBLNK
"RTN","DG53558M",181,0)
 . S TITLE="Cleanup Duplicates in the Means Test file"
"RTN","DG53558M",182,0)
 . S TLEN=(80-$L(TITLE)\2)
"RTN","DG53558M",183,0)
 . W $$FMTE^XLFDT($$NOW^XLFDT,"2P")
"RTN","DG53558M",184,0)
 . W ?65,"Completed ",$FN(PCT,"",0),"%",!!
"RTN","DG53558M",185,0)
 . W ?TLEN,IOINHI,IOUON,TITLE,IOUOFF,IOINORM,!
"RTN","DG53558M",186,0)
 . S IVMLINE=IVMBLNK
"RTN","DG53558M",187,0)
 . S IVMLINE=$$FMTLINE(IVMLINE,4,"Status")
"RTN","DG53558M",188,0)
 . S IVMLINE=$$FMTLINE(IVMLINE,12,"Total recs")
"RTN","DG53558M",189,0)
 . S IVMLINE=$$FMTLINE(IVMLINE,24,"Dupes Purged")
"RTN","DG53558M",190,0)
 . S IVMLINE=$$FMTLINE(IVMLINE,38,"Nulls Purged")
"RTN","DG53558M",191,0)
 . S IVMLINE=$$FMTLINE(IVMLINE,52,"Last DFN")
"RTN","DG53558M",192,0)
 . S IVMLINE=$$FMTLINE(IVMLINE,66,"Completed Time")
"RTN","DG53558M",193,0)
 . W !!,IORVON,IVMLINE,IORVOFF
"RTN","DG53558M",194,0)
 . S IVMLINE=IVMBLNK
"RTN","DG53558M",195,0)
 . S IVMLINE=$$FMTLINE(IVMLINE,2,STAT)
"RTN","DG53558M",196,0)
 . S IVMLINE=$$FMTLINE(IVMLINE,15,IVMTOT)
"RTN","DG53558M",197,0)
 . S IVMLINE=$$FMTLINE(IVMLINE,28,IVMPUR)
"RTN","DG53558M",198,0)
 . S IVMLINE=$$FMTLINE(IVMLINE,40,IVMBAD)
"RTN","DG53558M",199,0)
 . S IVMLINE=$$FMTLINE(IVMLINE,52,IVMLST)
"RTN","DG53558M",200,0)
 . S IVMLINE=$$FMTLINE(IVMLINE,64,$$FMTE^XLFDT(STIME,2))
"RTN","DG53558M",201,0)
 . W !,IVMLINE
"RTN","DG53558M",202,0)
 . S IVMLINE=IVMBLNK
"RTN","DG53558M",203,0)
 . W !,IVMLINE,!!!!!!
"RTN","DG53558M",204,0)
 . K DIR
"RTN","DG53558M",205,0)
 . S DIR("T")=5
"RTN","DG53558M",206,0)
 . W ?13,"screen refreshes automatically every "_DIR("T")_" seconds",!
"RTN","DG53558M",207,0)
 . W !!,"Press "_IORVON_"<Enter>"_IORVOFF_" to Stop Monitor...",!
"RTN","DG53558M",208,0)
 . S DIR(0)="EA"
"RTN","DG53558M",209,0)
 . D ^DIR
"RTN","DG53558M",210,0)
 . I '$D(DTOUT) S IVMQUIT=1
"RTN","DG53558M",211,0)
 . I STAT'="RUNNING" S IVMQUIT=1
"RTN","DG53558M",212,0)
 W @IOF
"RTN","DG53558M",213,0)
 Q
"RTN","DG53558M",214,0)
 ;
"RTN","DG53558M",215,0)
FMTLINE(IVMLINE,IVMTB,IVMTX) ; format a line
"RTN","DG53558M",216,0)
 S IVMLEN=$L(IVMTX)
"RTN","DG53558M",217,0)
 S IVMEND=IVMTB+IVMLEN-1
"RTN","DG53558M",218,0)
 S $E(IVMLINE,IVMTB,IVMEND)=IVMTX
"RTN","DG53558M",219,0)
 Q IVMLINE
"RTN","DG53558M",220,0)
 ;
"RTN","DG53558M",221,0)
SCRNSET ; setup screen variables
"RTN","DG53558M",222,0)
 S:'$D(IOST(0)) IOST(0)="C-VT320"
"RTN","DG53558M",223,0)
 S X="IOINORM;IOINHI;IOUON;IOUOFF;IOBON;IOBOFF;IORVON;IORVOFF;IOHOME"
"RTN","DG53558M",224,0)
 S X=X_";IOELEOL" D ENDR^%ZISS
"RTN","DG53558M",225,0)
 Q
"RTN","DG53558M",226,0)
 ;
"RTN","DG53558M",227,0)
CLRSCR ; clear screen and return to normal
"RTN","DG53558M",228,0)
 W IOHOME,IORVOFF,IOBOFF,IOUOFF,IOINORM,@IOF
"RTN","DG53558M",229,0)
 S $X=0,$Y=0
"RTN","DG53558M",230,0)
 Q
"RTN","DG53558M",231,0)
 ;
"RTN","DG53558M",232,0)
SETUPX(EXPDAY) ;Setup XTMP's according to standards and set expiration days
"RTN","DG53558M",233,0)
 N BEGTIME,PURGDT,NAMSPC
"RTN","DG53558M",234,0)
 S NAMSPC=$$NAMSPC^DG53558
"RTN","DG53558M",235,0)
 S BEGTIME=$$NOW^XLFDT()
"RTN","DG53558M",236,0)
 S PURGDT=$$FMADD^XLFDT(BEGTIME,EXPDAY)
"RTN","DG53558M",237,0)
 S ^XTMP(NAMSPC,0)=PURGDT_U_BEGTIME
"RTN","DG53558M",238,0)
 S $P(^XTMP(NAMSPC,0),U,3)="Cleanup Duplicate Means Test File"
"RTN","DG53558M",239,0)
 S ^XTMP(NAMSPC_".DET",0)=PURGDT_U_BEGTIME
"RTN","DG53558M",240,0)
 S $P(^XTMP(NAMSPC_".DET",0),U,3)="Cleanup Duplicate Means Test File detail"
"RTN","DG53558M",241,0)
 Q
"RTN","DG53558N")
0^23^B9470625
"RTN","DG53558N",1,0)
DG53558N ;ALB/GN/GTS - DG*5.3*558 CLEANUP FOR DUPE MEANS TEST FILE (cont) ; 12/14/05 15:47pm
"RTN","DG53558N",2,0)
 ;;5.3;Registration;**688**;Aug 13, 1993;Build 29
"RTN","DG53558N",3,0)
CLNDUPS(DFN) ;
"RTN","DG53558N",4,0)
 ;This code was removed from DG53558 and added here to allow expansion of code in DG53558.
"RTN","DG53558N",5,0)
 ;Entry point to drive through TMP array and delete all Duplicates except last one per day per status
"RTN","DG53558N",6,0)
 ; INPUT - DFN : Patient file IEN
"RTN","DG53558N",7,0)
 ;       - Several local variables
"RTN","DG53558N",8,0)
 ;
"RTN","DG53558N",9,0)
 ; OUTPUT -  Several local and global variables (including TMP, and ^XTMP) (Defined and
"RTN","DG53558N",10,0)
 ;           KILLed by DG53558).
"RTN","DG53558N",11,0)
 ;
"RTN","DG53558N",12,0)
 S ICDT=""
"RTN","DG53558N",13,0)
 F  S ICDT=$O(TMP(DFN,ICDT)) Q:ICDT=""  D
"RTN","DG53558N",14,0)
 . ;
"RTN","DG53558N",15,0)
 . ;if this is the IVM test that is set to not prim, then flip it
"RTN","DG53558N",16,0)
 . S IVMIEND=$G(TMPIVM(DFN,ICDT))  ;DG*5.3*579
"RTN","DG53558N",17,0)
 . I IVMIEND D
"RTN","DG53558N",18,0)
 . . D SETPRIM(IVMIEND,1,.IVMPFL)
"RTN","DG53558N",19,0)
 . . S LINK=$P($G(^DGMT(408.31,IVMIEND,2)),"^",6)
"RTN","DG53558N",20,0)
 . . D:LINK SETPRIM(LINK,1,.IVMPFL)  ;set any linked test to PRIM
"RTN","DG53558N",21,0)
 . ;
"RTN","DG53558N",22,0)
 . S MTVER=""
"RTN","DG53558N",23,0)
 . F  S MTVER=$O(TMP(DFN,ICDT,MTVER)) Q:MTVER=""  D
"RTN","DG53558N",24,0)
 . . ;
"RTN","DG53558N",25,0)
 . . S MTST=""
"RTN","DG53558N",26,0)
 . . F  S MTST=$O(TMP(DFN,ICDT,MTVER,MTST)) Q:MTST=""  D
"RTN","DG53558N",27,0)
 . . .;keep at least one test per day per status, even if not PRIM
"RTN","DG53558N",28,0)
 . . . D:'$D(TMP(DFN,ICDT,MTVER,MTST,"P")) SETPRI(.TMP)
"RTN","DG53558N",29,0)
 . . . ;    drive thru ien's and del dupes
"RTN","DG53558N",30,0)
 . . . S MTIEN=0
"RTN","DG53558N",31,0)
 . . . F  S MTIEN=$O(TMP(DFN,ICDT,MTVER,MTST,MTIEN)) Q:'MTIEN  D
"RTN","DG53558N",32,0)
 . . . . S PRIM=$G(^DGMT(408.31,MTIEN,"PRIM"))
"RTN","DG53558N",33,0)
 . . . . S LINK=$P($G(^DGMT(408.31,MTIEN,2)),"^",6)
"RTN","DG53558N",34,0)
 . . . . ;
"RTN","DG53558N",35,0)
 . . . .;if this ien is primary & it is not the IVM test or Linked to
"RTN","DG53558N",36,0)
 . . . .;the IVM test, then it should be flipped back to Not Primary
"RTN","DG53558N",37,0)
 . . . . I IVMIEND,PRIM,MTIEN'=IVMIEND,LINK'=IVMIEND D     ;DG*5.3*579
"RTN","DG53558N",38,0)
 . . . . . D SETPRIM(MTIEN,0,.IVMPFL)
"RTN","DG53558N",39,0)
 . . . . . S TMP(DFN,ICDT,MTST,MTIEN)=0
"RTN","DG53558N",40,0)
 . . . .;
"RTN","DG53558N",41,0)
 . . . . I TMP(DFN,ICDT,MTVER,MTST,"P")'=MTIEN D
"RTN","DG53558N",42,0)
 . . . . . S TYPE=$P($G(^DGMT(408.31,MTIEN,0)),"^",19),TYPNAM=""
"RTN","DG53558N",43,0)
 . . . . . S:TYPE]"" TYPNAM=$G(^DG(408.33,TYPE,0))
"RTN","DG53558N",44,0)
 . . . . . D DELMT^DG53558M(MTIEN,DFN,.IVMPUR,.DELETED,.LINK)
"RTN","DG53558N",45,0)
 . . . . . Q:'DELETED
"RTN","DG53558N",46,0)
 . . . . . S ^XTMP(NAMSPC_".DET",DFN,ICDT,MTVER,MTIEN)=TYPNAM
"RTN","DG53558N",47,0)
 . . . . . I LINK,'$D(^DGMT(408.31,LINK,0)) S LINK=0
"RTN","DG53558N",48,0)
 . . . . . Q:'LINK
"RTN","DG53558N",49,0)
 . . . . . S LTYP=$P($G(^DGMT(408.31,LINK,0)),"^",19),LTNAM=""
"RTN","DG53558N",50,0)
 . . . . . S:LTYP LTNAM=$G(^DG(408.33,LTYP,0))
"RTN","DG53558N",51,0)
 . . . . . S ^XTMP(NAMSPC_".DET",DFN,ICDT,MTVER,LINK)=LTNAM
"RTN","DG53558N",52,0)
 . . . . M ^XTMP(NAMSPC,DFN,ICDT,MTVER,MTST)=TMP(DFN,ICDT,MTST)
"RTN","DG53558N",53,0)
 Q
"RTN","DG53558N",54,0)
 ;
"RTN","DG53558N",55,0)
 ;DG*5.3*579 released SETPRIM and 688 moved it to this routine.
"RTN","DG53558N",56,0)
SETPRIM(DA,PR,IVMP) ; set an Income Test (in #408.31) to either Prim or Not
"RTN","DG53558N",57,0)
 Q:'$D(DA)!'$D(PR)
"RTN","DG53558N",58,0)
 N DR,DIE,DGDATA,DGPRI
"RTN","DG53558N",59,0)
 S DGPRI=$G(^DGMT(408.31,DA,"PRIM"))
"RTN","DG53558N",60,0)
 Q:DGPRI=PR                               ;quit if already at that sts
"RTN","DG53558N",61,0)
 S IVMP=$G(IVMP)+1
"RTN","DG53558N",62,0)
 S DGDATA="FLIPPED TO "_$S(PR=0:"NOT PRIMARY",1:"PRIMARY")
"RTN","DG53558N",63,0)
 S:$D(NAMSPC) ^XTMP(NAMSPC_".DET",DFN,ICDT,DA)=DGDATA
"RTN","DG53558N",64,0)
 S DR="2////"_PR,DIE="^DGMT(408.31,"
"RTN","DG53558N",65,0)
 D:'$G(TESTING) ^DIE
"RTN","DG53558N",66,0)
 Q
"RTN","DG53558N",67,0)
 ;
"RTN","DG53558N",68,0)
SETPRI(TMP) ;indicate like a primary (in TMP) to avoid it from being deleted
"RTN","DG53558N",69,0)
 N IEN
"RTN","DG53558N",70,0)
 S IEN=$O(TMP(DFN,ICDT,MTVER,MTST,""),-1)
"RTN","DG53558N",71,0)
 S TMP(DFN,ICDT,MTVER,MTST,IEN)=1
"RTN","DG53558N",72,0)
 S TMP(DFN,ICDT,MTVER,MTST,"P")=IEN
"RTN","DG53558N",73,0)
 Q
"RTN","DG53688A")
0^111^B7357677
"RTN","DG53688A",1,0)
DG53688A ;ALB/SCK - Patch DG*5.3*688 Pre-Install Utility Routine ; 5 MAR 2007
"RTN","DG53688A",2,0)
 ;;5.3;Registration;**688**;AUG 13, 1993;Build 29
"RTN","DG53688A",3,0)
 ;
"RTN","DG53688A",4,0)
START ; Entry point for EVENT^IVMPLOG trigger clean-up
"RTN","DG53688A",5,0)
 N DGXRF,DGFLD,X,Y,LINE,CNT,DGFILE,DGXNUM,RSLT,MSG
"RTN","DG53688A",6,0)
 ;
"RTN","DG53688A",7,0)
 ; Set start-notice into KIDS build file
"RTN","DG53688A",8,0)
 D BMES^XPDUTL(">> Starting Index cleanup...")
"RTN","DG53688A",9,0)
 ; Get the file number for the cross-reference clean-up from the file parameters below
"RTN","DG53688A",10,0)
 S LINE=$P($T(FILE+1),";;",2)
"RTN","DG53688A",11,0)
 ; If unable to determine file to clean-up, post warning and quit
"RTN","DG53688A",12,0)
 I LINE']"" D BMES^XPDUTL(">> Index cleanup canceled, unable to determine file information") Q 
"RTN","DG53688A",13,0)
 S DGFILE=$P(LINE,";",2)
"RTN","DG53688A",14,0)
 I DGFILE'>0 D BMES^XPDUTL(">> Index cleanup canceled, No File number specified") Q
"RTN","DG53688A",15,0)
 ;
"RTN","DG53688A",16,0)
 ; Cycle through the cross-references listed in the TEXT section below to remove/cleanup each x-ref.
"RTN","DG53688A",17,0)
 ; For each cross-reference, call $$FIND to get the x-ref number from the DD file
"RTN","DG53688A",18,0)
 ; if a x-ref number is determined, call the REMOVE procedure to delete the cross-reference
"RTN","DG53688A",19,0)
 ; 
"RTN","DG53688A",20,0)
 F CNT=1:1 S LINE=$P($T(TEXT+CNT),";;",2) Q:LINE="DONE"  D
"RTN","DG53688A",21,0)
 . K DGRXF,DGFLD
"RTN","DG53688A",22,0)
 . S DGXRF=$P(LINE,";"),DGFLD=$P(LINE,";",2)
"RTN","DG53688A",23,0)
 . S DGXNUM=$$FIND(DGXRF,DGFLD)
"RTN","DG53688A",24,0)
 . I DGXNUM>0 D REMOVE(DGXRF,DGFLD,DGXNUM)
"RTN","DG53688A",25,0)
 ;
"RTN","DG53688A",26,0)
 ;Set the completion notice into the KIDS build file
"RTN","DG53688A",27,0)
 D BMES^XPDUTL(">> Index cleanup completed")
"RTN","DG53688A",28,0)
 Q
"RTN","DG53688A",29,0)
 ;
"RTN","DG53688A",30,0)
FIND(DGXRF,DGFLD) ; This procedure will determine the selected x-ref's number from the DD file
"RTN","DG53688A",31,0)
 ; and return the number to the calling procedure
"RTN","DG53688A",32,0)
 ; Input
"RTN","DG53688A",33,0)
 ;         DGXRF - Name of the cross-reference
"RTN","DG53688A",34,0)
 ;         DGFLD - DD Field the cross-reference is stored on
"RTN","DG53688A",35,0)
 ; Output
"RTN","DG53688A",36,0)
 ;         DGNUM - The number of the cross-reference
"RTN","DG53688A",37,0)
 ; 
"RTN","DG53688A",38,0)
 N XX,DGDONE,DGNUM
"RTN","DG53688A",39,0)
 ;
"RTN","DG53688A",40,0)
 S XX=0
"RTN","DG53688A",41,0)
 F  S XX=$O(^DD(DGFILE,DGFLD,1,XX)) Q:'XX  D  Q:$G(DGDONE)
"RTN","DG53688A",42,0)
 . I $P(^DD(DGFILE,DGFLD,1,XX,0),U,2)=DGXRF S DGNUM=XX,DGDONE=1
"RTN","DG53688A",43,0)
 ;
"RTN","DG53688A",44,0)
 Q $G(DGNUM)
"RTN","DG53688A",45,0)
 ;
"RTN","DG53688A",46,0)
REMOVE(DGXRF,DGFLD,DGXNUM) ; The procedure will delete the cross-reference from the Data Dictionary
"RTN","DG53688A",47,0)
 ; Input
"RTN","DG53688A",48,0)
 ;    DGXRF   - Name of the cross-reference
"RTN","DG53688A",49,0)
 ;    DGFLD   - DD Field number the cross-reference is stored on
"RTN","DG53688A",50,0)
 ;    DGXNUM  - The cross-reference number
"RTN","DG53688A",51,0)
 ; 
"RTN","DG53688A",52,0)
 N DGOUT,DGERR,DGTEXT,DGX,DGCNT,DGNAME,MSG
"RTN","DG53688A",53,0)
 ;
"RTN","DG53688A",54,0)
 S DGNAME=$P($G(^DD(DGFILE,DGFLD,0)),U,1)
"RTN","DG53688A",55,0)
 S MSG=">> Removing the "_DGXRF_" cross-reference, #"_DGXNUM_", from the "_DGNAME_" field, #"_DGFLD
"RTN","DG53688A",56,0)
 D BMES^XPDUTL(MSG)
"RTN","DG53688A",57,0)
 ;
"RTN","DG53688A",58,0)
 D DELIX^DDMOD(DGFILE,DGFLD,DGXNUM,"","DGOUT","DGERR")
"RTN","DG53688A",59,0)
 ;
"RTN","DG53688A",60,0)
 ; If the output array is populated, pull the template information from the array and add it to the 
"RTN","DG53688A",61,0)
 ; message array to posted into the KIDS results
"RTN","DG53688A",62,0)
 I $D(DGOUT) D
"RTN","DG53688A",63,0)
 . S DGX=0,DGCNT=100
"RTN","DG53688A",64,0)
 . F  S DGX=$O(DGOUT("DIEZ",DGX)) Q:'DGX  D
"RTN","DG53688A",65,0)
 . . S DGTEXT(DGCNT)="    Input Template "_$P($G(^DGOUT("DIEZ",DGX)),U,1)_" was recompiled in "_$P($G(^DGOUT("DIEZ",DGX)),U,3)
"RTN","DG53688A",66,0)
 . . S DGCNT=DGCNT+1
"RTN","DG53688A",67,0)
 ;
"RTN","DG53688A",68,0)
 ; If an error occurred, post the error array into the KIDS results for display
"RTN","DG53688A",69,0)
 ; otherwise post a success message
"RTN","DG53688A",70,0)
 I $D(DGERR) D
"RTN","DG53688A",71,0)
 . M DGTEXT=DGERR
"RTN","DG53688A",72,0)
 E  D
"RTN","DG53688A",73,0)
 . S DGTEXT(1)="   Cross-Reference "_DGXRF_" Successfully removed."
"RTN","DG53688A",74,0)
 D MES^XPDUTL(.DGTEXT)
"RTN","DG53688A",75,0)
 Q
"RTN","DG53688A",76,0)
 ;
"RTN","DG53688A",77,0)
FILE ; Data Dictionary containing the cross-references to be cleaned-up
"RTN","DG53688A",78,0)
 ;;PATIENT;2
"RTN","DG53688A",79,0)
 ;
"RTN","DG53688A",80,0)
TEXT ; Cross-reference ID;Field Number
"RTN","DG53688A",81,0)
 ;;AENR99101;991.01
"RTN","DG53688A",82,0)
 ;;AENR99103;991.03
"RTN","DG53688A",83,0)
 ;;AENR01;.01
"RTN","DG53688A",84,0)
 ;;AENR03;.03
"RTN","DG53688A",85,0)
 ;;AENR02;.02
"RTN","DG53688A",86,0)
 ;;AENR09;.09
"RTN","DG53688A",87,0)
 ;;DONE
"RTN","DG53688B")
0^115^B1690075
"RTN","DG53688B",1,0)
DG53688B ;ALB/TDM - Patch DG*5.3*688 Pre-Install Utility Routine ; 8/18/08 10:46am
"RTN","DG53688B",2,0)
 ;;5.3;Registration;**688**;AUG 13, 1993;Build 29
"RTN","DG53688B",3,0)
 ;
"RTN","DG53688B",4,0)
 Q
"RTN","DG53688B",5,0)
START ;Entry point for field definition cleanup
"RTN","DG53688B",6,0)
 N X,DGFIL,DGFLD,MSG
"RTN","DG53688B",7,0)
 ;
"RTN","DG53688B",8,0)
 D BMES^XPDUTL(">> Starting field definition cleanup...")
"RTN","DG53688B",9,0)
 S DGFIL=2 D HEADER F DGFLD=.119,.32102,.322013 D DELETE(DGFIL,DGFLD)
"RTN","DG53688B",10,0)
 S DGFIL=408.22 D HEADER S DGFLD=.11 D DELETE(DGFIL,DGFLD)
"RTN","DG53688B",11,0)
 D BMES^XPDUTL(">> Field definition cleanup completed")
"RTN","DG53688B",12,0)
 Q
"RTN","DG53688B",13,0)
 ;
"RTN","DG53688B",14,0)
HEADER ;Display file name & #
"RTN","DG53688B",15,0)
 S MSG=">> "_$P($G(^DIC(DGFIL,0)),U,1)_" File (#"_DGFIL_")"
"RTN","DG53688B",16,0)
 D BMES^XPDUTL(MSG)
"RTN","DG53688B",17,0)
 Q
"RTN","DG53688B",18,0)
 ;
"RTN","DG53688B",19,0)
DELETE(DGFIL,DGFLD) ;The procedure will delete the field definition from the Data Dictionary
"RTN","DG53688B",20,0)
 ;    DGFIL  - DD File Number (Required)
"RTN","DG53688B",21,0)
 ;    DGFLD  - DD Field Number (Required)
"RTN","DG53688B",22,0)
 ;
"RTN","DG53688B",23,0)
 Q:($G(DGFIL)=""!$G(DGFLD)="")
"RTN","DG53688B",24,0)
 N DIK,DA,DGFLDNM
"RTN","DG53688B",25,0)
 ;
"RTN","DG53688B",26,0)
 S DIK="^DD("_DGFIL_","
"RTN","DG53688B",27,0)
 S DA=DGFLD,DA(1)=DGFIL
"RTN","DG53688B",28,0)
 S DGFLDNM=$P($G(^DD(DGFIL,DGFLD,0)),U,1)
"RTN","DG53688B",29,0)
 S MSG="   Updating the '"_DGFLDNM_"' field (#"_DGFLD_") definition"
"RTN","DG53688B",30,0)
 D MES^XPDUTL(MSG)
"RTN","DG53688B",31,0)
 D ^DIK
"RTN","DG53688B",32,0)
 Q
"RTN","DG53688P")
0^42^B80418911
"RTN","DG53688P",1,0)
DG53688P ;ALB/CKN,BAJ,ERC - Patch DG*5.3*688 Install Utility Routine ; 8/15/08 12:03pm
"RTN","DG53688P",2,0)
 ;;5.3;Registration;**688**;AUG 13, 1993;Build 29
"RTN","DG53688P",3,0)
 Q
"RTN","DG53688P",4,0)
EP ;Entry point - Driver
"RTN","DG53688P",5,0)
 N ELEMNT,I,J,ABORT,EXIST,DMSG,ACTION
"RTN","DG53688P",6,0)
 ;
"RTN","DG53688P",7,0)
 ; Run trigger clean-up on Patient file per EVC_CR5834
"RTN","DG53688P",8,0)
 D START^DG53688A
"RTN","DG53688P",9,0)
 D START^DG53688B    ;Run field defintion clean-up per EVC_CR7473
"RTN","DG53688P",10,0)
 ;
"RTN","DG53688P",11,0)
 S GLOBAL="^IVM",ABORT=0,DMSG="",ACTION="create"
"RTN","DG53688P",12,0)
 F I=1:1 S ELEMNT=$P($T(TEXT+I),";;",2) Q:ELEMNT="QUIT"!(ABORT)  D
"RTN","DG53688P",13,0)
 . S FILE=$P(ELEMNT,";",1),EXIST=0
"RTN","DG53688P",14,0)
 . K DGDATA S (DATA,SUB)="" F J=2:1:$L(ELEMNT,";") S DATA=$P(ELEMNT,";",J) D  Q:EXIST
"RTN","DG53688P",15,0)
 . . S SUB=$P(DATA,"~",1),VALUE=$P(DATA,"~",2)
"RTN","DG53688P",16,0)
 . . S DGDATA(SUB)=VALUE
"RTN","DG53688P",17,0)
 . . I SUB=.01,$$ISTHERE(FILE,.DGDATA,GLOBAL) S EXIST=1
"RTN","DG53688P",18,0)
 . I 'EXIST D
"RTN","DG53688P",19,0)
 . . I '$$ADD^DGENDBS(FILE,,.DGDATA) S ABORT=1
"RTN","DG53688P",20,0)
 ; setup message variable
"RTN","DG53688P",21,0)
 S DMSG=$G(DGDATA(.01))
"RTN","DG53688P",22,0)
 ; if Ok so far, install #506 modification & #88 addition
"RTN","DG53688P",23,0)
 ; 
"RTN","DG53688P",24,0)
 I 'ABORT S ACTION="modify",DMSG="INCONSISTENT DATA ELEMENT #506",ABORT=$$506()
"RTN","DG53688P",25,0)
 I 'ABORT S DMSG="INCONSISTENT DATA ELEMENT #88",ABORT=$$88()
"RTN","DG53688P",26,0)
 ;
"RTN","DG53688P",27,0)
 ;add NOT APPLICABLE Enrollment Status to file 27.15
"RTN","DG53688P",28,0)
 I 'ABORT D
"RTN","DG53688P",29,0)
 . N DGABORT
"RTN","DG53688P",30,0)
 . S ACTION="add",DMSG="ENROLLMENT STATUS #23",ABORT=$$ENRSTAT()
"RTN","DG53688P",31,0)
 ;
"RTN","DG53688P",32,0)
 I ABORT D
"RTN","DG53688P",33,0)
 . S XPDABORT=2
"RTN","DG53688P",34,0)
 . D BMES^XPDUTL("Install process could not "_ACTION_" an entry in file for "_DMSG)
"RTN","DG53688P",35,0)
 . D BMES^XPDUTL("                        <<<< INSTALLATION ABORTED >>>>")
"RTN","DG53688P",36,0)
 Q
"RTN","DG53688P",37,0)
 ;
"RTN","DG53688P",38,0)
ISTHERE(FILE,DGDATA,GLOBAL) ;
"RTN","DG53688P",39,0)
 N FOUND,GLOB
"RTN","DG53688P",40,0)
 S FOUND=0
"RTN","DG53688P",41,0)
 S GLOB=GLOBAL_"(FILE,""B"",DGDATA(.01))"
"RTN","DG53688P",42,0)
 I $D(@GLOB) D
"RTN","DG53688P",43,0)
 . D BMES^XPDUTL("   Internal Entry Value for .01 -- "_DGDATA(.01)_" -- already exists in file "_FILE)
"RTN","DG53688P",44,0)
 . S FOUND=1
"RTN","DG53688P",45,0)
 Q FOUND
"RTN","DG53688P",46,0)
 ;
"RTN","DG53688P",47,0)
HECMSG ; Send message to HEC Legacy that install is complete.
"RTN","DG53688P",48,0)
 ;
"RTN","DG53688P",49,0)
 ;also index the Other Federal Agency file (#35) with the new "C" cross reference
"RTN","DG53688P",50,0)
 D CREF
"RTN","DG53688P",51,0)
 ;
"RTN","DG53688P",52,0)
 N SITE,STATN,PRODFLG,XMDUZ,XMSUB,XMY,XMTEXT,MSG,DIFROM
"RTN","DG53688P",53,0)
 S SITE=$$SITE^VASITE,STATN=$P($G(SITE),U,3)
"RTN","DG53688P",54,0)
 S PRODFLG=$$GET1^DIQ(869.3,"1,",.03,"I")="P"
"RTN","DG53688P",55,0)
 S XMDUZ="EVC I2 Install"
"RTN","DG53688P",56,0)
 S XMSUB=XMDUZ_" - "_STATN_" (DG*5.3*688)"
"RTN","DG53688P",57,0)
 S:PRODFLG XMY("S.IVMB*2*860 MESSAGE@IVM.MED.VA.GOV")=""
"RTN","DG53688P",58,0)
 S:'PRODFLG XMY(DUZ)=""
"RTN","DG53688P",59,0)
 S XMTEXT="MSG("
"RTN","DG53688P",60,0)
 S $P(MSG(1),U)="IVMB*2*860"
"RTN","DG53688P",61,0)
 S $P(MSG(1),U,2)=STATN
"RTN","DG53688P",62,0)
 S $P(MSG(1),U,3)="DG*5.3*688 "_$$FMTE^XLFDT($$NOW^XLFDT(),"5D")
"RTN","DG53688P",63,0)
 S $P(MSG(1),U,4)=PRODFLG
"RTN","DG53688P",64,0)
 S $P(MSG(1),U,5)=1
"RTN","DG53688P",65,0)
 D ^XMD
"RTN","DG53688P",66,0)
 D BMES^XPDUTL("    *** Install Message Sent to HEC Legacy ***")
"RTN","DG53688P",67,0)
 Q
"RTN","DG53688P",68,0)
 ;
"RTN","DG53688P",69,0)
506() ; Update entry #506 in the INCONSISTENT DATA ELEMENTS file (#38.6)
"RTN","DG53688P",70,0)
 ;-----------------------------------------------------------------
"RTN","DG53688P",71,0)
 ;-----------------------------------------------------------------
"RTN","DG53688P",72,0)
 N DATA,DGENDA,DGERR,FILE,DGTITL,ABORT,DGWP
"RTN","DG53688P",73,0)
 S FILE=38.6,DGENDA=506,DGTITL="Entry #506 SW ASIA CONDITIONS",ABORT=0
"RTN","DG53688P",74,0)
 D BMES^XPDUTL("  >> Modifying entry #506 in the INCONSISTENT DATA ELEMENTS file (#38.6)")
"RTN","DG53688P",75,0)
 S DATA(.01)="VALUE FOR SW ASIA COND INVALID"
"RTN","DG53688P",76,0)
 S DATA(2)="THE VALUE FOR SW ASIA CONDITIONS MUST BE EITHER YES, NO, OR UNKNOWN"
"RTN","DG53688P",77,0)
 S DATA(50)="DGWP"
"RTN","DG53688P",78,0)
 S DGWP(1,0)="If completed, the value for Southwest Asia Conditions must be"
"RTN","DG53688P",79,0)
 S DGWP(2,0)="Yes, No or Unknown."
"RTN","DG53688P",80,0)
 I '$$UPD^DGENDBS(FILE,.DGENDA,.DATA,.DGERR) D
"RTN","DG53688P",81,0)
 . D BMES^XPDUTL("   >>> ERROR! "_DGTITL_" not changed in file #38.6")
"RTN","DG53688P",82,0)
 . D MES^XPDUTL("       "_$G(DGERR))
"RTN","DG53688P",83,0)
 . S ABORT=1
"RTN","DG53688P",84,0)
 D:'ABORT BMES^XPDUTL("      "_DGTITL_" successfully modified.")
"RTN","DG53688P",85,0)
 Q ABORT
"RTN","DG53688P",86,0)
 ;
"RTN","DG53688P",87,0)
88() ; Add entry #88 TEMP. ADDRESS DATA INCOMPLETE
"RTN","DG53688P",88,0)
 N DATA,DGERR,DGTITL,ABORT,I,DGWP,ROOT,QUIT,DGFDA,DGIEN
"RTN","DG53688P",89,0)
 S DGIEN(1)=88,(ABORT,QUIT)=0
"RTN","DG53688P",90,0)
 S DGTITL="Entry #88 'TEMPORARY ADDRESS' DATA IS INCOMPLETE"
"RTN","DG53688P",91,0)
 D BMES^XPDUTL("  >> Modifying entry #88 in the INCONSISTENT DATA ELEMENTS file (#38.6)")
"RTN","DG53688P",92,0)
 S ROOT="DGFDA(38.6,""?+1,"")"
"RTN","DG53688P",93,0)
 S @ROOT@(.01)="TEMP. ADDRESS DATA INCOMPLETE"
"RTN","DG53688P",94,0)
 I $D(^DGIN(38.6,88,0)) D  Q ABORT
"RTN","DG53688P",95,0)
 . I $P(^DGIN(38.6,88,0),U,1)'=@ROOT@(.01) D  Q
"RTN","DG53688P",96,0)
 . . D MES^XPDUTL("     >>> ERROR: Entry # 88 needs to be reviewed by NVS! <<<")
"RTN","DG53688P",97,0)
 . . D MES^XPDUTL("           Existing entry: "_$P($G(^DGIN(38.6,88,0)),"^"))
"RTN","DG53688P",98,0)
 . . D MES^XPDUTL("           Incoming entry: "_$G(@ROOT@(.01)))
"RTN","DG53688P",99,0)
 . . D BMES^XPDUTL("                        <<<< INSTALLATION ABORTED >>>>")
"RTN","DG53688P",100,0)
 . . S ABORT=1
"RTN","DG53688P",101,0)
 . D BMES^XPDUTL("  >> Entry #88 already exists in the INCONSISTENT DATA ELEMENTS file (#38.6)")
"RTN","DG53688P",102,0)
 S @ROOT@(2)="'TEMPORARY ADDRESS' DATA IS INCOMPLETE"
"RTN","DG53688P",103,0)
 F I=3:1:6 S @ROOT@(I)=0
"RTN","DG53688P",104,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53688P",105,0)
 S DGWP(1,0)="Inconsistency results if a record with an active temporary"
"RTN","DG53688P",106,0)
 S DGWP(2,0)="address does not contain the first line of the street address, city, state,"
"RTN","DG53688P",107,0)
 S DGWP(3,0)="and zip code for a domestic temporary address, or, for a foreign temporary"
"RTN","DG53688P",108,0)
 S DGWP(4,0)="address, the first line of the street address and the city."
"RTN","DG53688P",109,0)
 D UPDATE^DIE("","DGFDA","DGIEN","DGERR")
"RTN","DG53688P",110,0)
 I $D(DGERR) D
"RTN","DG53688P",111,0)
 . D BMES^XPDUTL("   >>> ERROR! "_DGTITL_" not added to file #38.6")
"RTN","DG53688P",112,0)
 . D MES^XPDUTL("     "_DGERR("DIERR",1)_": "_DGERR("DIERR",1,"TEXT",1))
"RTN","DG53688P",113,0)
 . D BMES^XPDUTL("                        <<<< INSTALLATION ABORTED >>>>")
"RTN","DG53688P",114,0)
 . S ABORT=1
"RTN","DG53688P",115,0)
 D:'ABORT BMES^XPDUTL("      "_DGTITL_" successfully added.")
"RTN","DG53688P",116,0)
 Q ABORT
"RTN","DG53688P",117,0)
 ;
"RTN","DG53688P",118,0)
ENRSTAT() ;Add NOT APPLICABLE to the Enrollment Status file (#27.15)
"RTN","DG53688P",119,0)
 N DGCAT,DGMSG,DGSTAT
"RTN","DG53688P",120,0)
 S DGSTAT="NOT APPLICABLE"
"RTN","DG53688P",121,0)
 S DGCAT="N"
"RTN","DG53688P",122,0)
 S DGABORT=1
"RTN","DG53688P",123,0)
 ;check to see if there is an entry already
"RTN","DG53688P",124,0)
 I $D(^DGEN(27.15,23)) D  Q DGABORT
"RTN","DG53688P",125,0)
 . I $P(^DGEN(27.15,23,0),U)="NOT APPLICABLE" D  Q
"RTN","DG53688P",126,0)
 . . D CHKSTAT
"RTN","DG53688P",127,0)
 . . I DGABORT=0 S DGMSG=("  >> NOT APPLICABLE already exists in Enrollment Status file (#27.15)") D MSG(1)  Q
"RTN","DG53688P",128,0)
 . . I DGABORT=1 D SETSTAT
"RTN","DG53688P",129,0)
 . . I DGABORT=0 S DGMSG=("  >> NOT APPLICABLE updated in Enrollment Status file (#27.15)") D MSG(1)
"RTN","DG53688P",130,0)
 . I $P(^DGEN(27.15,23,0),U)'="NOT APPLICABLE" D  Q
"RTN","DG53688P",131,0)
 . . S DGMSG="  >> File 27.15 has an existing, invalid Entry #23" D MSG(1)
"RTN","DG53688P",132,0)
 . . S DGABORT=1
"RTN","DG53688P",133,0)
NEWSTAT ;set .01 and .02 fields
"RTN","DG53688P",134,0)
 ;  .01 - NOT APPLICABLE
"RTN","DG53688P",135,0)
 ;  .02 - N:NOT ENROLLED
"RTN","DG53688P",136,0)
 ;
"RTN","DG53688P",137,0)
 N DGFDA,DGIEN
"RTN","DG53688P",138,0)
 S DGFDA(1,27.15,"+1,",.01)=DGSTAT
"RTN","DG53688P",139,0)
 S DGFDA(1,27.15,"+1,",.02)=DGCAT
"RTN","DG53688P",140,0)
 S DGIEN=23
"RTN","DG53688P",141,0)
 K DGERR
"RTN","DG53688P",142,0)
 D UPDATE^DIE("","DGFDA(1)","DGIEN","DGERR")
"RTN","DG53688P",143,0)
 I $D(DGERR) D ERR Q DGABORT
"RTN","DG53688P",144,0)
 S DGMSG=("  >> NOT APPLICABLE added to Enrollment Status file (#27.15)") D MSG(1)
"RTN","DG53688P",145,0)
 S DGABORT=0
"RTN","DG53688P",146,0)
 Q DGABORT
"RTN","DG53688P",147,0)
CHKSTAT ;check to see if existing NOT APPLICABLE entry has "N" for .02 field
"RTN","DG53688P",148,0)
 I $P(^DGEN(27.15,23,0),U,2)="N" S DGABORT=0
"RTN","DG53688P",149,0)
 Q
"RTN","DG53688P",150,0)
SETSTAT ;set .02 field (Enr Category) to "N" (Not Enrolled) on existing N/A entry
"RTN","DG53688P",151,0)
 N DGFDA
"RTN","DG53688P",152,0)
 S DGFDA(27.15,23_",",.02)=DGCAT
"RTN","DG53688P",153,0)
 K DGERR
"RTN","DG53688P",154,0)
 D FILE^DIE("","DGFDA","DGERR")
"RTN","DG53688P",155,0)
 I $D(DGERR) D ERR S DGABORT=1 Q  ;S DGMSG="Unable to update ""NOT APPLICABLE"" Enrollment Status in file 27.15." D MSG(0) S DGOK=2 Q
"RTN","DG53688P",156,0)
 I '$D(DGERR) S DGABORT=0 ;DGMSG="    NOT APPLICABLE entry in file 27.15 successfully updated." D MSG(1) S DGOK=1
"RTN","DG53688P",157,0)
 Q
"RTN","DG53688P",158,0)
ERR ;set error message into DGMSG for installation message
"RTN","DG53688P",159,0)
 N DGC,DGCC
"RTN","DG53688P",160,0)
 S (DGC,DGCC)=0
"RTN","DG53688P",161,0)
 F  S DGC=$O(DGERR("DIERR",DGC)) Q:'DGC  D
"RTN","DG53688P",162,0)
 . F  S DGCC=$O(DGERR("DIERR",DGC,"TEXT",DGCC)) Q:'DGCC  D
"RTN","DG53688P",163,0)
 . . S DGMSG=DGERR("DIERR",DGC,"TEXT",DGCC) I DGC=1,(DGCC=1) D MSG(1) Q
"RTN","DG53688P",164,0)
 . . D MSG(0)
"RTN","DG53688P",165,0)
 K DGERR
"RTN","DG53688P",166,0)
 Q
"RTN","DG53688P",167,0)
MSG(DGB) ;generate installation message
"RTN","DG53688P",168,0)
 ;if DGB=1, need a blank line before message
"RTN","DG53688P",169,0)
 I DGB=1 D BMES^XPDUTL(DGMSG) Q
"RTN","DG53688P",170,0)
 D MES^XPDUTL(DGMSG)
"RTN","DG53688P",171,0)
 Q
"RTN","DG53688P",172,0)
 ;
"RTN","DG53688P",173,0)
CREF ;index fuile #35 with new "C" cross reference
"RTN","DG53688P",174,0)
 N DIK
"RTN","DG53688P",175,0)
 S DIK="^DIC(35,",DIK(1)="1^C"
"RTN","DG53688P",176,0)
 D ENALL^DIK
"RTN","DG53688P",177,0)
 ;
"RTN","DG53688P",178,0)
TEXT ;FILE#;FIELD#~VALUE;FIELD#~VALUE;FIELD#~VALUE.....
"RTN","DG53688P",179,0)
 ;;301.92;.01~PROVINCE;.02~PID114F;.03~1;.04~2;.05~.1171;.08~1;10~S DR=.1171 D LOOK^IVMPREC9;20~S DR=.1171 D LOOK^IVMPREC9
"RTN","DG53688P",180,0)
 ;;301.92;.01~POSTAL CODE;.02~PID115F;.03~1;.04~2;.05~.1172;.08~1;10~S DR=.1172 D LOOK^IVMPREC9;20~S DR=.1172 D LOOK^IVMPREC9
"RTN","DG53688P",181,0)
 ;;301.92;.01~COUNTRY;.02~PID116;.03~1;.04~2;.05~.1173;.08~1;10~S DR=.1173 D LOOK^IVMPREC9;20~S DR=.1173 D LOOK^IVMPREC9
"RTN","DG53688P",182,0)
 ;;301.92;.01~BAD ADDRESS INDICATOR;.02~PID117;.03~1;.04~2;.05~.121;.08~1;10~S DR=.121 D LOOK^IVMPREC9;20~S DR=.121 D LOOK^IVMPREC9
"RTN","DG53688P",183,0)
 ;;301.92;.01~STREET ADDRESS [LINE 3];.02~PID118;.03~1;.04~2;.05~.113;.08~1;10~S Y=$P(VAPA(3),"^");20~S Y=VAPA(3)
"RTN","DG53688P",184,0)
 ;;301.92;.01~PAGER NUMBER;.02~PID13B;.03~1;.04~2;.05~.135;.08~1;10~S DR=.135 D LOOK^IVMPREC9;20~S DR=.135 D LOOK^IVMPREC9
"RTN","DG53688P",185,0)
 ;;301.92;.01~CELLULAR NUMBER;.02~PID13C;.03~1;.04~2;.05~.134;.08~1;10~S DR=.134 D LOOK^IVMPREC9;20~S DR=.134 D LOOK^IVMPREC9
"RTN","DG53688P",186,0)
 ;;301.92;.01~EMAIL ADDRESS;.02~PID13E;.03~1;.04~2;.05~.133;.08~1;10~S DR=.133 D LOOK^IVMPREC9;20~S DR=.133 D LOOK^IVMPREC9
"RTN","DG53688P",187,0)
 ;;301.92;.01~PAGER CHANGE DT/TM;.02~RF171B;.03~1;.04~2;.05~.1312;.08~1;10~S DR=.1312 D LOOK^IVMPREC9;20~S DR=.1312 D LOOK^IVMPREC9
"RTN","DG53688P",188,0)
 ;;301.92;.01~PAGER CHANGE SOURCE;.02~RF162B;.03~1;.04~2;.05~.1313;.08~1;10~S DR=.1313 D LOOK^IVMPREC9;20~S DR=.1313 D LOOK^IVMPREC9
"RTN","DG53688P",189,0)
 ;;301.92;.01~PAGER CHANGE SITE;.02~RF161B;.03~1;.04~2;.05~.1314;.08~1;10~S DR=.1314 D LOOK^IVMPREC9;20~S DR=.1314 D LOOK^IVMPREC9
"RTN","DG53688P",190,0)
 ;;301.92;.01~CELL PHONE CHANGE DT/TM;.02~RF171C;.03~1;.04~2;.05~.139;.08~1;10~S DR=.139 D LOOK^IVMPREC9;20~S DR=.139 D LOOK^IVMPREC9
"RTN","DG53688P",191,0)
 ;;301.92;.01~CELL PHONE CHANGE SOURCE;.02~RF162C;.03~1;.04~2;.05~.1311;.08~1;10~S DR=.1311 D LOOK^IVMPREC9;20~S DR=.1311 D LOOK^IVMPREC9
"RTN","DG53688P",192,0)
 ;;301.92;.01~CELL PHONE CHANGE SITE;.02~RF161C;.03~1;.04~2;.05~.13111;.08~1;10~S DR=.13111 D LOOK^IVMPREC9;20~S DR=.13111 D LOOK^IVMPREC9
"RTN","DG53688P",193,0)
 ;;301.92;.01~EMAIL CHANGE DT/TM;.02~RF171E;.03~1;.04~2;.05~.136;.08~1;10~S DR=.136 D LOOK^IVMPREC9;20~S DR=.136 D LOOK^IVMPREC9
"RTN","DG53688P",194,0)
 ;;301.92;.01~EMAIL CHANGE SOURCE;.02~RF162E;.03~1;.04~2;.05~.137;.08~1;10~S DR=.137 D LOOK^IVMPREC9;20~S DR=.137 D LOOK^IVMPREC9
"RTN","DG53688P",195,0)
 ;;301.92;.01~EMAIL CHANGE SITE;.02~RF161E;.03~1;.04~2;.05~.138;.08~1;10~S DR=.138 D LOOK^IVMPREC9;20~S DR=.138 D LOOK^IVMPREC9
"RTN","DG53688P",196,0)
 ;;QUIT
"RTN","DGADDUT2")
0^87^B2578124
"RTN","DGADDUT2",1,0)
DGADDUT2 ;ALB/ERC,CKN - CONTINUATION OF ADDRESS UTILITIES ; 8/1/08 1:48pm
"RTN","DGADDUT2",2,0)
 ;;5.3;Registration;**688**; AUG 13, 1993;Build 29
"RTN","DGADDUT2",3,0)
 ;a continuation of utilities from DGADDUTL
"RTN","DGADDUT2",4,0)
 ;
"RTN","DGADDUT2",5,0)
UPDDTTM(DFN,TYPE) ; Update the PATIENT file #2 with the current date and time
"RTN","DGADDUT2",6,0)
 ;
"RTN","DGADDUT2",7,0)
 N %H,%,X,%Y,%D,%M,%I,ADDDTTM,DIE,DA,DR
"RTN","DGADDUT2",8,0)
 D NOW^%DTC
"RTN","DGADDUT2",9,0)
 S ADDDTTM=%,DIE="^DPT(",DA=DFN
"RTN","DGADDUT2",10,0)
 ;
"RTN","DGADDUT2",11,0)
 ; If it's the Temporary Address, the field is .12113
"RTN","DGADDUT2",12,0)
 ; If not, it should be the Permanent Address and the default field is .118
"RTN","DGADDUT2",13,0)
 S DR=$S(TYPE="TEMP":".12113///^S X=ADDDTTM",1:".118///^S X=ADDDTTM")
"RTN","DGADDUT2",14,0)
 D ^DIE
"RTN","DGADDUT2",15,0)
 Q
"RTN","DGADDUT2",16,0)
UPDADDLG(DFN,DGPRIOR,DGINPUT) ; Update the IVM ADDRESS CHANGE LOG file #301.7
"RTN","DGADDUT2",17,0)
 ;
"RTN","DGADDUT2",18,0)
 N DGDATA
"RTN","DGADDUT2",19,0)
 ; Zero node:
"RTN","DGADDUT2",20,0)
 S DGDATA(.01)=DGINPUT(.118)
"RTN","DGADDUT2",21,0)
 S DGDATA(1)=DFN
"RTN","DGADDUT2",22,0)
 S DGDATA(2)=DGINPUT(.122)
"RTN","DGADDUT2",23,0)
 S DGDATA(3)=DGINPUT(.119)
"RTN","DGADDUT2",24,0)
 S DGDATA(3.5)=DGINPUT(.12)
"RTN","DGADDUT2",25,0)
 ;
"RTN","DGADDUT2",26,0)
 ; One node:
"RTN","DGADDUT2",27,0)
 S DGDATA(4)=DGPRIOR(.118)
"RTN","DGADDUT2",28,0)
 S DGDATA(5)=DGPRIOR(.122)
"RTN","DGADDUT2",29,0)
 S DGDATA(6)=DGPRIOR(.12)
"RTN","DGADDUT2",30,0)
 S DGDATA(7)=DGPRIOR(.119)
"RTN","DGADDUT2",31,0)
 S DGDATA(8)=DGPRIOR(.131)
"RTN","DGADDUT2",32,0)
 S DGDATA(9)=DGPRIOR(.111)
"RTN","DGADDUT2",33,0)
 S DGDATA(10)=DGPRIOR(.112)
"RTN","DGADDUT2",34,0)
 S DGDATA(11)=DGPRIOR(.114)
"RTN","DGADDUT2",35,0)
 S DGDATA(12)=DGPRIOR(.117)
"RTN","DGADDUT2",36,0)
 S DGDATA(13)=DGPRIOR(.115)
"RTN","DGADDUT2",37,0)
 S DGDATA(14)=DGPRIOR(.1112)
"RTN","DGADDUT2",38,0)
 S DGDATA(15)=DGPRIOR(.1171)
"RTN","DGADDUT2",39,0)
 S DGDATA(16)=DGPRIOR(.1172)
"RTN","DGADDUT2",40,0)
 S DGDATA(17)=DGPRIOR(.1173)
"RTN","DGADDUT2",41,0)
 S DGDATA(18)=DGPRIOR(.121)
"RTN","DGADDUT2",42,0)
 S DGDATA(19)=DGPRIOR(.113)
"RTN","DGADDUT2",43,0)
 ;
"RTN","DGADDUT2",44,0)
 I $$ADD^DGENDBS(301.7,,.DGDATA) ;
"RTN","DGADDUT2",45,0)
 Q
"RTN","DGADDUT2",46,0)
CNTRY(DGARR) ;
"RTN","DGADDUT2",47,0)
 ;where DGARR is an array of values which includes a node for "CNTRY"
"RTN","DGADDUT2",48,0)
 ;DGARR("CNTRY") is returned in upper case display mode
"RTN","DGADDUT2",49,0)
 ;called from DGREGARP
"RTN","DGADDUT2",50,0)
 N DGC
"RTN","DGADDUT2",51,0)
 S DGC=$G(DGARR("CNTRY"))
"RTN","DGADDUT2",52,0)
 I '$D(^HL(779.004,"B",DGC)) Q ""
"RTN","DGADDUT2",53,0)
 S DGC=$$COUNTRY^DGADDUTL(DGC)
"RTN","DGADDUT2",54,0)
 S DGARR("CNTRY")=DGC
"RTN","DGADDUT2",55,0)
 Q
"RTN","DGADDUTL")
0^52^B56565800
"RTN","DGADDUTL",1,0)
DGADDUTL ;ALB/PHH,EG,BAJ,ERC,CKN-PATIENT ADDRESS ; 8/1/08 12:50pm
"RTN","DGADDUTL",2,0)
 ;;5.3;Registration;**658,695,730,688**;Aug 13, 1993;Build 29
"RTN","DGADDUTL",3,0)
 Q
"RTN","DGADDUTL",4,0)
ADDR ; validate/edit Patient address (entry for DG ADDRESS UPDATE option)
"RTN","DGADDUTL",5,0)
 N %,QUIT,DIC,Y,DFN,USERSEL
"RTN","DGADDUTL",6,0)
ADDRLOOP ;
"RTN","DGADDUTL",7,0)
 W !!
"RTN","DGADDUTL",8,0)
 K DIC,Y,DFN,USERSEL
"RTN","DGADDUTL",9,0)
 S DIC="^DPT(",DIC(0)="AEMZQ",DIC("A")="Veteran Name/SSN: " D ^DIC
"RTN","DGADDUTL",10,0)
 I $D(DTOUT)!($D(DUOUT)) Q
"RTN","DGADDUTL",11,0)
 Q:Y'>0
"RTN","DGADDUTL",12,0)
 ;
"RTN","DGADDUTL",13,0)
 S DFN=+Y,QUIT=0
"RTN","DGADDUTL",14,0)
 L +^DPT(DFN):3 E  W !!,"Patient is being edited. Try again later."  G ADDR
"RTN","DGADDUTL",15,0)
 F  D  Q:QUIT
"RTN","DGADDUTL",16,0)
 .W !!,"Do you want to update the (P)ermanent Address, (T)emporary Address, or (B)oth? "
"RTN","DGADDUTL",17,0)
 .R USERSEL:300
"RTN","DGADDUTL",18,0)
 .I '$T S USERSEL="^"
"RTN","DGADDUTL",19,0)
 .I USERSEL["^"!(USERSEL="") S QUIT=1 Q
"RTN","DGADDUTL",20,0)
 .S USERSEL=$TR(USERSEL,"ptb","PTB")
"RTN","DGADDUTL",21,0)
 .I USERSEL'="P",USERSEL'="T",USERSEL'="B" D  Q
"RTN","DGADDUTL",22,0)
 ..W !,"Invalid selection!"
"RTN","DGADDUTL",23,0)
 .I USERSEL="P"!(USERSEL="B") W ! D UPDATE(DFN,"PERM")
"RTN","DGADDUTL",24,0)
 .I USERSEL="T"!(USERSEL="B") D UPDATE(DFN,"TEMP")
"RTN","DGADDUTL",25,0)
 .S QUIT=1
"RTN","DGADDUTL",26,0)
 L -^DPT(DFN)
"RTN","DGADDUTL",27,0)
 G ADDRLOOP
"RTN","DGADDUTL",28,0)
ADD(DFN) ; validate/edit Patient address (entry point for routine DGREG)
"RTN","DGADDUTL",29,0)
 ;         Input  -- DFN
"RTN","DGADDUTL",30,0)
 ;
"RTN","DGADDUTL",31,0)
 N RETVAL,ADDYN
"RTN","DGADDUTL",32,0)
 S (RETVAL,ADDYN)=0
"RTN","DGADDUTL",33,0)
 F  D  Q:ADDYN
"RTN","DGADDUTL",34,0)
 .S ADDYN=$$ADDYN("Do you want to validate/edit the Patient's Address")
"RTN","DGADDUTL",35,0)
 .S RETVAL=ADDYN
"RTN","DGADDUTL",36,0)
 .I ADDYN'=1,ADDYN'=2 S (ADDYN,RETVAL)=0
"RTN","DGADDUTL",37,0)
 .I 'ADDYN W !?5,"Enter 'YES' to validate/edit Patient's Address or 'NO' to continue."
"RTN","DGADDUTL",38,0)
 I ADDYN=1,$G(DFN)'="",$D(^DPT(DFN,0)) D
"RTN","DGADDUTL",39,0)
 .D UPDATE(DFN,"PERM")
"RTN","DGADDUTL",40,0)
 .S RETVAL=1
"RTN","DGADDUTL",41,0)
 Q RETVAL
"RTN","DGADDUTL",42,0)
ADDYN(PROMPT) ; Yes/No Prompt to Edit/Validate Address
"RTN","DGADDUTL",43,0)
 ;         Input  -- None
"RTN","DGADDUTL",44,0)
 ;         Output --  1 = YES
"RTN","DGADDUTL",45,0)
 ;                    2 = NO
"RTN","DGADDUTL",46,0)
 ;                   -1 = Aborted
"RTN","DGADDUTL",47,0)
 ;
"RTN","DGADDUTL",48,0)
 N %
"RTN","DGADDUTL",49,0)
 W !,PROMPT
"RTN","DGADDUTL",50,0)
 D YN^DICN
"RTN","DGADDUTL",51,0)
 Q %
"RTN","DGADDUTL",52,0)
UPDATE(DFN,TYPE) ; Update the Address
"RTN","DGADDUTL",53,0)
 ;         Input  -- TYPE = "PERM" for Permanent Address
"RTN","DGADDUTL",54,0)
 ;                        = "TEMP" for Temporary Address
"RTN","DGADDUTL",55,0)
 ;         Output -- None
"RTN","DGADDUTL",56,0)
 ;         
"RTN","DGADDUTL",57,0)
 I TYPE'="PERM",TYPE'="TEMP" Q
"RTN","DGADDUTL",58,0)
 I TYPE="PERM" D
"RTN","DGADDUTL",59,0)
 .W !
"RTN","DGADDUTL",60,0)
 .N FLG S (FLG(1),FLG(2))=1
"RTN","DGADDUTL",61,0)
 .D ADDRED(DFN,.FLG)
"RTN","DGADDUTL",62,0)
 ;
"RTN","DGADDUTL",63,0)
 I TYPE="TEMP" D
"RTN","DGADDUTL",64,0)
 .D EDITTADR(DFN)
"RTN","DGADDUTL",65,0)
 Q
"RTN","DGADDUTL",66,0)
UPDDTTM(DFN,TYPE) ; Update the PATIENT file #2 with the current date and time
"RTN","DGADDUTL",67,0)
 ;
"RTN","DGADDUTL",68,0)
 D UPDDTTM^DGADDUT2(DFN,TYPE)
"RTN","DGADDUTL",69,0)
 Q
"RTN","DGADDUTL",70,0)
ADDRED(DFN,FLG) ; Address Edit (Code copied from DGREGAED and modified)
"RTN","DGADDUTL",71,0)
 ;Input:
"RTN","DGADDUTL",72,0)
 ;  DFN (required) - Internal Entry # of Patient File (#2)
"RTN","DGADDUTL",73,0)
 ;  FLG (optional) - Flags of 1 or 0; if null, 0 is assumed. Details:
"RTN","DGADDUTL",74,0)
 ;    FLG(1) - if 1, let user edit phone numbers (field #.131 and #.132)
"RTN","DGADDUTL",75,0)
 ;    FLG(2) - if 1, display before & after address for user confirmation
"RTN","DGADDUTL",76,0)
 N SRC,%,DGINPUT,I,X,Y
"RTN","DGADDUTL",77,0)
 S SRC="ADDUTL"
"RTN","DGADDUTL",78,0)
 D EN^DGREGAED(DFN,.FLG,SRC)
"RTN","DGADDUTL",79,0)
 ;
"RTN","DGADDUTL",80,0)
 ; Update the Date/Time Stamp
"RTN","DGADDUTL",81,0)
 D UPDDTTM(DFN,TYPE)
"RTN","DGADDUTL",82,0)
 Q
"RTN","DGADDUTL",83,0)
GETPRIOR(DFN,DGPRIOR) ; Get prior address fields.
"RTN","DGADDUTL",84,0)
 N DGCURR,DGN,DGARRY,DGCIEN,DGST,DGCNTY
"RTN","DGADDUTL",85,0)
 D GETS^DIQ(2,DFN_",",".111;.112;.113;.114;.115;.117;.1112;.131;.132;.121;.118;.119;.12;.122;.1171:.1173","I","DGCURR")
"RTN","DGADDUTL",86,0)
 F DGN=.111,.112,.113,.114,.115,.117,.1112,.131,.132,.121,.118,.119,.12,.122,.1171,.1172,.1173 D
"RTN","DGADDUTL",87,0)
 . S DGARRY("OLD",DGN)=$G(DGCURR(2,DFN_",",DGN,"I"))
"RTN","DGADDUTL",88,0)
 M DGPRIOR=DGARRY("OLD")
"RTN","DGADDUTL",89,0)
 Q
"RTN","DGADDUTL",90,0)
GETUPDTS(DFN,DGINPUT) ; Get current address fields.
"RTN","DGADDUTL",91,0)
 N DGCURR,DGN,DGARRY
"RTN","DGADDUTL",92,0)
 D GETS^DIQ(2,DFN_",",".118;.119;.12;.122","I","DGCURR")
"RTN","DGADDUTL",93,0)
 F DGN=.118,.119,.12,.122 D
"RTN","DGADDUTL",94,0)
 . S DGARRY("NEW",DGN)=$G(DGCURR(2,DFN_",",DGN,"I"))
"RTN","DGADDUTL",95,0)
 M DGINPUT=DGARRY("NEW")
"RTN","DGADDUTL",96,0)
 Q
"RTN","DGADDUTL",97,0)
FILEYN(DGOLD,DGNEW) ; Determine whether or not to file to #301.7
"RTN","DGADDUTL",98,0)
 N RETVAL
"RTN","DGADDUTL",99,0)
 S RETVAL=0
"RTN","DGADDUTL",100,0)
 D
"RTN","DGADDUTL",101,0)
 .I DGOLD(.111)'=$G(DGNEW(.111)) S RETVAL=1 Q
"RTN","DGADDUTL",102,0)
 .I DGOLD(.112)'=$G(DGNEW(.112)) S RETVAL=1 Q
"RTN","DGADDUTL",103,0)
 .I DGOLD(.113)'=$G(DGNEW(.113)) S RETVAL=1 Q
"RTN","DGADDUTL",104,0)
 .I DGOLD(.114)'=$G(DGNEW(.114)) S RETVAL=1 Q
"RTN","DGADDUTL",105,0)
 .I DGOLD(.115)'=$P($G(DGNEW(.115)),"^",2) S RETVAL=1 Q
"RTN","DGADDUTL",106,0)
 .I DGOLD(.1112)'=$G(DGNEW(.1112)) S RETVAL=1 Q
"RTN","DGADDUTL",107,0)
 .I DGOLD(.117)'=$P($G(DGNEW(.117)),"^",2) S RETVAL=1 Q
"RTN","DGADDUTL",108,0)
 .I DGOLD(.131)'=$G(DGNEW(.131)) S RETVAL=1 Q
"RTN","DGADDUTL",109,0)
 .I DGOLD(.1171)'=$G(DGNEW(.1171)) S RETVAL=1 Q
"RTN","DGADDUTL",110,0)
 .I DGOLD(.1172)'=$G(DGNEW(.1172)) S RETVAL=1 Q
"RTN","DGADDUTL",111,0)
 .I DGOLD(.1173)'=$P($G(DGNEW(.1173)),"^",2) S RETVAL=1 Q
"RTN","DGADDUTL",112,0)
 .I DGOLD(.121)'=$G(DGNEW(.121)) S RETVAL=1 Q
"RTN","DGADDUTL",113,0)
 Q RETVAL
"RTN","DGADDUTL",114,0)
FOREIGN(DFN,CIEN,FILE,FIELD,COUNTRY) ;
"RTN","DGADDUTL",115,0)
 ; ** NOTE we have to default the value for "US" into the prompt if it is blank
"RTN","DGADDUTL",116,0)
 N FORGN,DA,DIR,DTOUT,DUOUT,DIROUT,DONE,INDX
"RTN","DGADDUTL",117,0)
 S:'$G(FILE) FILE=2  I '$G(FIELD) S FIELD=.1173
"RTN","DGADDUTL",118,0)
 S DIR(0)=FILE_","_FIELD,DA=DFN,DONE=0
"RTN","DGADDUTL",119,0)
 S DIR("B")=$E($$CNTRYI^DGADDUTL(CIEN),1,19) I DIR("B")=-1 S DIR("B")="UNKNOWN COUNTRY"
"RTN","DGADDUTL",120,0)
 F  D  Q:DONE
"RTN","DGADDUTL",121,0)
 . D ^DIR
"RTN","DGADDUTL",122,0)
 . I $D(DTOUT) S DONE=1 Q
"RTN","DGADDUTL",123,0)
 . I $D(DUOUT)!$D(DIROUT) W !,"EXIT NOT ALLOWED" Q
"RTN","DGADDUTL",124,0)
 . I $D(DIRUT) W !,"This is a required response." Q
"RTN","DGADDUTL",125,0)
 . S COUNTRY=$P($G(Y),"^",2),FORGN=$$FORIEN($P($G(Y),"^")),DONE=1
"RTN","DGADDUTL",126,0)
 Q FORGN
"RTN","DGADDUTL",127,0)
UPDADDLG(DFN,DGPRIOR,DGINPUT) ; Update the IVM ADDRESS CHANGE LOG file #301.7
"RTN","DGADDUTL",128,0)
 ;
"RTN","DGADDUTL",129,0)
 D UPDADDLG^DGADDUT2(DFN,.DGPRIOR,.DGINPUT)
"RTN","DGADDUTL",130,0)
 Q
"RTN","DGADDUTL",131,0)
EDITTADR(DFN) ; Edit Temporary Address
"RTN","DGADDUTL",132,0)
 N DGPRIOR,DGCH,DGRPAN,DGDR,DGRPS
"RTN","DGADDUTL",133,0)
 I $G(DFN)="" Q
"RTN","DGADDUTL",134,0)
 ;I ($G(DFN)'?.N) Q
"RTN","DGADDUTL",135,0)
 ;
"RTN","DGADDUTL",136,0)
 ; Get the current Temporary Address and display it
"RTN","DGADDUTL",137,0)
 D GETTADR(DFN,.DGPRIOR)
"RTN","DGADDUTL",138,0)
 D DISPTADR(DFN,.DGPRIOR)
"RTN","DGADDUTL",139,0)
 W !!
"RTN","DGADDUTL",140,0)
 ;
"RTN","DGADDUTL",141,0)
 S DGCH=5,DGRPAN="1,2,3,4,5,",DGDR="",DGRPS=1
"RTN","DGADDUTL",142,0)
 D CHOICE^DGRPP
"RTN","DGADDUTL",143,0)
 D ^DGRPE
"RTN","DGADDUTL",144,0)
 ; Update the Date/Time Stamp
"RTN","DGADDUTL",145,0)
 D UPDDTTM(DFN,TYPE)
"RTN","DGADDUTL",146,0)
 Q
"RTN","DGADDUTL",147,0)
GETTADR(DFN,DGPRIOR) ; Get prior temporary address fields.
"RTN","DGADDUTL",148,0)
 N DGCURR,DGN,DGARRY,DGCIEN,DGST,DGCNTY
"RTN","DGADDUTL",149,0)
 D GETS^DIQ(2,DFN_",",".1211;.1212;.1213;.1214;.1215;.1216;.1217;.1218;.12105;.1219;.12111;.12112;.12113;.12114;.1221:.1223","I","DGCURR")
"RTN","DGADDUTL",150,0)
 F DGN=.1211,.1212,.1213,.1214,.1215,.1216,.1217,.1218,.12105,.1219,.12111,.12112,.12113,.12114,.1221,.1222,.1223 D
"RTN","DGADDUTL",151,0)
 .S DGARRY("OLD",DGN)=$G(DGCURR(2,DFN_",",DGN,"I"))
"RTN","DGADDUTL",152,0)
 M DGPRIOR=DGARRY("OLD")
"RTN","DGADDUTL",153,0)
 Q
"RTN","DGADDUTL",154,0)
DISPTADR(DFN,DGARRY) ; Display Temporary Address
"RTN","DGADDUTL",155,0)
 N DGADRACT,DGADR1,DGADR2,DGADR3,DGCITY,DGSTATE,DGZIP
"RTN","DGADDUTL",156,0)
 N DGCOUNTY,DGPHONE,DGFROMDT,DGTODT,DGPROV,DGPCODE,DGCNTRY,DGFORN
"RTN","DGADDUTL",157,0)
 ;
"RTN","DGADDUTL",158,0)
 S DGADRACT=$G(DGARRY(.12105))
"RTN","DGADDUTL",159,0)
 S DGADR1=$G(DGARRY(.1211))
"RTN","DGADDUTL",160,0)
 S DGADR2=$G(DGARRY(.1212))
"RTN","DGADDUTL",161,0)
 S DGADR3=$G(DGARRY(.1213))
"RTN","DGADDUTL",162,0)
 S DGCITY=$G(DGARRY(.1214))
"RTN","DGADDUTL",163,0)
 S DGSTATE=$G(DGARRY(.1215))
"RTN","DGADDUTL",164,0)
 S DGZIP=$G(DGARRY(.1216))
"RTN","DGADDUTL",165,0)
 S DGCOUNTY=$G(DGARRY(.12111))
"RTN","DGADDUTL",166,0)
 I DGCOUNTY'="",DGSTATE'="",$D(^DIC(5,DGSTATE,1,DGCOUNTY,0)) D
"RTN","DGADDUTL",167,0)
 .S DGCOUNTY=$P(^DIC(5,DGSTATE,1,DGCOUNTY,0),"^")_" ("_$P(^DIC(5,DGSTATE,1,DGCOUNTY,0),"^",4)_")"
"RTN","DGADDUTL",168,0)
 I DGADRACT'="Y" S DGCOUNTY="NOT APPLICABLE"
"RTN","DGADDUTL",169,0)
 I DGSTATE'="",$D(^DIC(5,DGSTATE,0)) S DGSTATE=$P(^DIC(5,DGSTATE,0),"^",2)
"RTN","DGADDUTL",170,0)
 S DGPROV=$G(DGARRY(.1221))
"RTN","DGADDUTL",171,0)
 S DGPCODE=$G(DGARRY(.1222))
"RTN","DGADDUTL",172,0)
 S DGCNTRY=$G(DGARRY(.1223))
"RTN","DGADDUTL",173,0)
 S DGFORN=$$FORIEN(DGCNTRY)
"RTN","DGADDUTL",174,0)
 I DGCNTRY]"" S DGCNTRY=$$CNTRYI(DGCNTRY)
"RTN","DGADDUTL",175,0)
 S DGPHONE=$G(DGARRY(.1219))
"RTN","DGADDUTL",176,0)
 S DGFROMDT=$$FMTE^XLFDT($G(DGARRY(.1217)))
"RTN","DGADDUTL",177,0)
 S DGTODT=$$FMTE^XLFDT($G(DGARRY(.1218)))
"RTN","DGADDUTL",178,0)
 ;
"RTN","DGADDUTL",179,0)
 W !!,"Temporary Address: "
"RTN","DGADDUTL",180,0)
 I DGADRACT="Y" D
"RTN","DGADDUTL",181,0)
 .W:DGADR1'="" !?9,DGADR1
"RTN","DGADDUTL",182,0)
 .W:DGADR2'="" !?9,DGADR2
"RTN","DGADDUTL",183,0)
 .W:DGADR3'="" !?9,DGADR3
"RTN","DGADDUTL",184,0)
 .I DGFORN=0 D
"RTN","DGADDUTL",185,0)
 ..W !?9,$S(DGCITY'="":DGCITY,1:"")_$S(DGCITY'="":",",1:" ")_$S(DGSTATE'="":DGSTATE,1:"")_" "_$S(DGZIP'="":DGZIP,1:"")
"RTN","DGADDUTL",186,0)
 .I DGFORN W !?9,$S(DGPCODE'="":DGPCODE,1:"")_" "_$S(DGCITY'="":DGCITY,1:"")_$S(DGCITY'="":",",1:" ")_$S(DGPROV'="":DGPROV,1:"")
"RTN","DGADDUTL",187,0)
 .W !?9,$S(DGCITY'="":DGCITY,1:"")_","_$S(DGSTATE'="":DGSTATE,1:"")_" "_$S(DGZIP'="":DGZIP,1:"")
"RTN","DGADDUTL",188,0)
 .W !," County: "_DGCOUNTY
"RTN","DGADDUTL",189,0)
 .W !,"  Phone: "_DGPHONE
"RTN","DGADDUTL",190,0)
 .W !,"From/To: "_$P(DGFROMDT,",")_","_$P(DGFROMDT,", ",2)_"-"_$P(DGTODT,",")_","_$P(DGTODT,", ",2)
"RTN","DGADDUTL",191,0)
 ;
"RTN","DGADDUTL",192,0)
 I $G(DGARRY(.12105))="N" D
"RTN","DGADDUTL",193,0)
 .W:$G(DGARRY(.1211))="" !?9,"NO TEMPORARY ADDRESS"
"RTN","DGADDUTL",194,0)
 .W:$G(DGARRY(.1212))="" !?9,""
"RTN","DGADDUTL",195,0)
 .W !," County: NOT APPLICABLE"
"RTN","DGADDUTL",196,0)
 .W !,"  Phone: NOT APPLICABLE"
"RTN","DGADDUTL",197,0)
 .W !,"From/To: NOT APPLICABLE"
"RTN","DGADDUTL",198,0)
 Q
"RTN","DGADDUTL",199,0)
COUNTRY(DGC) ;
"RTN","DGADDUTL",200,0)
 ;where DGC is the external value of the country
"RTN","DGADDUTL",201,0)
 ;return value is in upper case display mode
"RTN","DGADDUTL",202,0)
 ;if DGC is invalid, return -1
"RTN","DGADDUTL",203,0)
 N DGCC,DGIEN
"RTN","DGADDUTL",204,0)
 ; if input is NULL change to US
"RTN","DGADDUTL",205,0)
 I $G(DGC)="" S DGC="USA"
"RTN","DGADDUTL",206,0)
 ; Get IEN from B index, error if not found
"RTN","DGADDUTL",207,0)
 S DGIEN=$O(^HL(779.004,"B",DGC,"")) Q:DGIEN']"" -1
"RTN","DGADDUTL",208,0)
 ; xlate IEN to POSTAL NAME
"RTN","DGADDUTL",209,0)
 S DGCC=$P(^HL(779.004,DGIEN,"SDS"),U,3)
"RTN","DGADDUTL",210,0)
 ; if POSTAL NAME = "<NULL>" return DESCRIPTION
"RTN","DGADDUTL",211,0)
 I DGCC="<NULL>" D
"RTN","DGADDUTL",212,0)
 . S DGCC=$$UPPER^DGUTL($P(^HL(779.004,DGIEN,0),U,2))
"RTN","DGADDUTL",213,0)
 Q DGCC
"RTN","DGADDUTL",214,0)
FOR(DGC) ;returns a 1 if address is foreign, a 0 if domestic, -1 if DGC is not valid
"RTN","DGADDUTL",215,0)
 ; DGC is the external value of the country (.01 field of file 779.004)
"RTN","DGADDUTL",216,0)
 N DGFOR
"RTN","DGADDUTL",217,0)
 S DGFOR=0
"RTN","DGADDUTL",218,0)
 I $G(DGC)="" Q DGFOR
"RTN","DGADDUTL",219,0)
 I '$D(^HL(779.004,"B",DGC)) Q -1
"RTN","DGADDUTL",220,0)
 I DGC'="USA" S DGFOR=1
"RTN","DGADDUTL",221,0)
 Q DGFOR
"RTN","DGADDUTL",222,0)
CNTRYI(DGIEN) ;where DGC is the internal value of the country
"RTN","DGADDUTL",223,0)
 ;return DGC as the display value for the country
"RTN","DGADDUTL",224,0)
 ;if the input value is not a valid IEN, return -1
"RTN","DGADDUTL",225,0)
 ;if the input value is null, return null
"RTN","DGADDUTL",226,0)
 N DGCC
"RTN","DGADDUTL",227,0)
 I $G(DGIEN)="" Q ""
"RTN","DGADDUTL",228,0)
 I '$D(^HL(779.004,DGIEN,0)) Q -1
"RTN","DGADDUTL",229,0)
 ; xlate IEN to POSTAL NAME
"RTN","DGADDUTL",230,0)
 S DGCC=$P(^HL(779.004,DGIEN,"SDS"),U,3)
"RTN","DGADDUTL",231,0)
 ; if POSTAL NAME = "<NULL>" return DESCRIPTION
"RTN","DGADDUTL",232,0)
 I DGCC="<NULL>" D
"RTN","DGADDUTL",233,0)
 . S DGCC=$$UPPER^DGUTL($P(^HL(779.004,DGIEN,0),U,2))
"RTN","DGADDUTL",234,0)
 Q DGCC
"RTN","DGADDUTL",235,0)
FORIEN(DGC) ;returns a 1 if address is foreign, a 0 if domestic, -1 if DGC is invalid
"RTN","DGADDUTL",236,0)
 ;DGC is the IEN of the country file (#779.004)
"RTN","DGADDUTL",237,0)
 N DGFOR
"RTN","DGADDUTL",238,0)
 S DGFOR=0
"RTN","DGADDUTL",239,0)
 I $G(DGC)="" Q DGFOR
"RTN","DGADDUTL",240,0)
 I DGC'?1.3N Q -1
"RTN","DGADDUTL",241,0)
 I '$D(^HL(779.004,DGC,0)) Q -1
"RTN","DGADDUTL",242,0)
 I DGC]"",(DGC'=$O(^HL(779.004,"B","USA",""))) S DGFOR=1
"RTN","DGADDUTL",243,0)
 Q DGFOR
"RTN","DGCLEAR")
0^54^B6866608
"RTN","DGCLEAR",1,0)
DGCLEAR ;ALB/BAJ - REGISTRATION CROSS REFERENCE CLEANUP ;01/09/2006
"RTN","DGCLEAR",2,0)
 ;;5.3;Registration;**653,688**;Aug 13, 1993;Build 29
"RTN","DGCLEAR",3,0)
 ;
"RTN","DGCLEAR",4,0)
 ; Called from ASK^DGLOCK or ADK^DGLOCK3, The purpose of this routine is to clear All temporary or confidential address fields
"RTN","DGCLEAR",5,0)
 ; Also called from Z07 process to clear Permanent address before update 
"RTN","DGCLEAR",6,0)
 ;               
"RTN","DGCLEAR",7,0)
 ; 
"RTN","DGCLEAR",8,0)
EN(DGENDA,TYPE) ; entry point
"RTN","DGCLEAR",9,0)
 ;
"RTN","DGCLEAR",10,0)
 ; Code to TRIGGER deletion of field data.
"RTN","DGCLEAR",11,0)
 N DATA,CALLTYP
"RTN","DGCLEAR",12,0)
 S CALLTYP=$S(TYPE="TEMP":"T",TYPE="PERM":"P",1:"C")
"RTN","DGCLEAR",13,0)
 D SETARR(CALLTYP,.DATA)
"RTN","DGCLEAR",14,0)
 Q $$UPD^DGENDBS(2,.DGENDA,.DATA)
"RTN","DGCLEAR",15,0)
 ;
"RTN","DGCLEAR",16,0)
SETARR(CALLTYP,DATA) ;set up data array
"RTN","DGCLEAR",17,0)
 N CNT,CURFILE,CTRYFLD,FDFLG,ADDTYPE,T,FTYPE,CURFTYPE
"RTN","DGCLEAR",18,0)
 ; assemble array of fields to clear
"RTN","DGCLEAR",19,0)
 F CNT=1:1 S T=$P($T(DTABLE+CNT),";;",3) Q:T="QUIT"  D
"RTN","DGCLEAR",20,0)
 . Q:$P(T,";",1)'=CALLTYP  S DATA($P(T,";",3))=$P(T,";",4)
"RTN","DGCLEAR",21,0)
 Q
"RTN","DGCLEAR",22,0)
DTABLE ;TABLE of Foreign and Domestic fields: structure -->>;;Description;;(T)EMPORARY/(C)ONFIDENTIAL/(P)ERMANENT;FILE;FIELD;DATA
"RTN","DGCLEAR",23,0)
 ;;TEMPORARY STREET [LINE 1];;T;2;.1211;@
"RTN","DGCLEAR",24,0)
 ;;TEMPORARY ZIP+4;;T;2;.12112;@
"RTN","DGCLEAR",25,0)
 ;;TEMPORARY STREET [LINE 2];;T;2;.1212;@
"RTN","DGCLEAR",26,0)
 ;;TEMPORARY STREET [LINE 3];;T;2;.1213;@
"RTN","DGCLEAR",27,0)
 ;;TEMPORARY CITY;;T;2;.1214;@
"RTN","DGCLEAR",28,0)
 ;;TEMPORARY STATE;;T;2;.1215;@
"RTN","DGCLEAR",29,0)
 ;;TEMPORARY COUNTY;;T;2;.12111;@
"RTN","DGCLEAR",30,0)
 ;;TEMPORARY ZIP CODE;;T;2;.1216;@
"RTN","DGCLEAR",31,0)
 ;;TEMPORARY ADDRESS START DATE;;T;2;.1217;@
"RTN","DGCLEAR",32,0)
 ;;TEMPORARY ADDRESS END DATE;;T;2;.1218;@
"RTN","DGCLEAR",33,0)
 ;;TEMPORARY PHONE NUMBER;;T;2;.1219;@
"RTN","DGCLEAR",34,0)
 ;;TEMPORARY ADDRESS PROVINCE;;T;2;.1221;@
"RTN","DGCLEAR",35,0)
 ;;TEMPORARY ADDRESS POSTAL CODE;;T;2;.1222;@
"RTN","DGCLEAR",36,0)
 ;;TEMPORARY ADDRESS COUNTRY;;T;2;.1223;@
"RTN","DGCLEAR",37,0)
 ;;TEMPORARY ADDRESS ACTIVE;;T;2;.12105;N
"RTN","DGCLEAR",38,0)
 ;;CONFIDENTIAL STREET [LINE 1];;C;2;.1411;@
"RTN","DGCLEAR",39,0)
 ;;CONFIDENTIAL STREET [LINE 2];;C;2;.1412;@
"RTN","DGCLEAR",40,0)
 ;;CONFIDENTIAL STREET [LINE 3];;C;2;.1413;@
"RTN","DGCLEAR",41,0)
 ;;CONFIDENTIAL CITY;;C;2;.1414;@
"RTN","DGCLEAR",42,0)
 ;;CONFIDENTIAL STATE;;C;2;.1415;@
"RTN","DGCLEAR",43,0)
 ;;CONFIDENTIAL COUNTY;;C;2;.14111;@
"RTN","DGCLEAR",44,0)
 ;;CONFIDENTIAL ZIP CODE;;C;2;.1416;@
"RTN","DGCLEAR",45,0)
 ;;CONFIDENTIAL ADDRESS START DATE;;C;2;.1417;@
"RTN","DGCLEAR",46,0)
 ;;CONFIDENTIAL ADDRESS END DATE;;C;2;.1418;@
"RTN","DGCLEAR",47,0)
 ;;CONFIDENTIAL ADDRESS PROVINCE;;C;2;.14114;@
"RTN","DGCLEAR",48,0)
 ;;CONFIDENTIAL ADDRESS POSTAL CODE;;C;2;.14115;@
"RTN","DGCLEAR",49,0)
 ;;CONFIDENTIAL ADDRESS COUNTRY;;C;2;.14116;@
"RTN","DGCLEAR",50,0)
 ;;CONFIDENTIAL ADDRESS ACTIVE;;C;2;.14105;N
"RTN","DGCLEAR",51,0)
 ;;PERMANENT STREET [LINE 1];;P;2;.111;@
"RTN","DGCLEAR",52,0)
 ;;PERMANENT STREET [LINE 2];;P;2;.112;@
"RTN","DGCLEAR",53,0)
 ;;PERMANENT CITY;;P;2;.114;@
"RTN","DGCLEAR",54,0)
 ;;PERMANENT STATE;;P;2;.115;@
"RTN","DGCLEAR",55,0)
 ;;PERMANENT COUNTY;;P;2;.117;@
"RTN","DGCLEAR",56,0)
 ;;PERMANENT ZIP CODE;;P;2;.1112;@
"RTN","DGCLEAR",57,0)
 ;;PERMANENT ADDRESS PROVINCE;;P;2;.1171;@
"RTN","DGCLEAR",58,0)
 ;;PERMANENT ADDRESS POSTAL CODE;;P;2;.1172;@
"RTN","DGCLEAR",59,0)
 ;;PERMANENT ADDRESS COUNTRY;;P;2;.1173;@
"RTN","DGCLEAR",60,0)
 ;;PERMANENT BAD ADDRESS INDICATOR;;P;2;.121;@
"RTN","DGCLEAR",61,0)
 ;;QUIT;;QUIT
"RTN","DGCNTRY")
0^51^B3718332
"RTN","DGCNTRY",1,0)
DGCNTRY ;BAJ - REGISTRATION SCREEN 7/CROSS REFERENCE CLEANUP ;01/09/2006
"RTN","DGCNTRY",2,0)
 ;;5.3;Registration;**688**;Aug 13, 1993;Build 29
"RTN","DGCNTRY",3,0)
 ;
"RTN","DGCNTRY",4,0)
 ; This routine is called by a New style MUMPS index named AXCNTRY
"RTN","DGCNTRY",5,0)
 ; The purpose of this routine is to clear certain fields when the Country field is changed
"RTN","DGCNTRY",6,0)
 ; Values:       X1(#) contains the OLD values
"RTN","DGCNTRY",7,0)
 ;                       X2(#) contains the NEW values
"RTN","DGCNTRY",8,0)
 ;               
"RTN","DGCNTRY",9,0)
 ; 
"RTN","DGCNTRY",10,0)
EN(FILE,ATYPE,FIELD) ; entry point
"RTN","DGCNTRY",11,0)
 ;
"RTN","DGCNTRY",12,0)
 ; Code to TRIGGER deletion of field data.
"RTN","DGCNTRY",13,0)
 N DGENDA,DATA,FORGN,ERROR
"RTN","DGCNTRY",14,0)
 Q:X=""
"RTN","DGCNTRY",15,0)
 S DGENDA=DA,ERROR=""
"RTN","DGCNTRY",16,0)
 S FORGN=$$FORGN(.X2) D SETARR(.DATA,FORGN,FILE,ATYPE,FIELD)
"RTN","DGCNTRY",17,0)
 Q $$UPD^DGENDBS(FILE,.DGENDA,.DATA,.ERROR)
"RTN","DGCNTRY",18,0)
 ;
"RTN","DGCNTRY",19,0)
SETARR(DATA,FORGN,FILE,ATYPE,FIELD) ;set up data array
"RTN","DGCNTRY",20,0)
 N CNT,CURFILE,CTRYFLD,FDFLG,ADDTYPE,T,FTYPE,CURFTYPE
"RTN","DGCNTRY",21,0)
 ; If foreign kill domestic fields and vice versa
"RTN","DGCNTRY",22,0)
 S FTYPE=$S(FORGN:"D",1:"F")
"RTN","DGCNTRY",23,0)
 F CNT=1:1 S T=$P($T(DTABLE+CNT),";;",3) Q:T="QUIT"  D
"RTN","DGCNTRY",24,0)
 . S CURFTYPE=$P(T,";",1),ADDTYPE=$P(T,";",2),CURFILE=$P(T,";",3),CTRYFLD=$P(T,";",4),CURFLD=$P(T,";",5)
"RTN","DGCNTRY",25,0)
 . I CURFTYPE=FTYPE,CURFILE=FILE,ADDTYPE=ATYPE,CTRYFLD=FIELD S DATA(CURFLD)="@"
"RTN","DGCNTRY",26,0)
 Q
"RTN","DGCNTRY",27,0)
FORGN(X2)  ; logic to determine if COUNTRY is US or Foreign
"RTN","DGCNTRY",28,0)
 Q $$FORIEN^DGADDUTL(X2(1))
"RTN","DGCNTRY",29,0)
 ;
"RTN","DGCNTRY",30,0)
DTABLE ;TABLE of Foreign and Domestic fields: structure -->>;;DESCRIPTION;;(F)OREIGN/(D)OMESTIC;FILE;COUNTRY FIELD;FIELD
"RTN","DGCNTRY",31,0)
 ;;PROVINCE;;F;PERM;2;.1173;.1171
"RTN","DGCNTRY",32,0)
 ;;POSTAL CODE;;F;PERM;2;.1173;.1172
"RTN","DGCNTRY",33,0)
 ;;STATE;;D;PERM;2;.1173;.115
"RTN","DGCNTRY",34,0)
 ;;COUNTY;;D;PERM;2;.1173;.1117
"RTN","DGCNTRY",35,0)
 ;;ZIP+4;;D;PERM;2;.1173;.1112
"RTN","DGCNTRY",36,0)
 ;;PROVINCE;;F;TEMP;2;.1223;.1221
"RTN","DGCNTRY",37,0)
 ;;POSTAL CODE;;F;TEMP;2;.1223;.1222
"RTN","DGCNTRY",38,0)
 ;;STATE;;D;TEMP;2;.1223;.1215
"RTN","DGCNTRY",39,0)
 ;;COUNTY;;D;TEMP;2;.1223;.12111
"RTN","DGCNTRY",40,0)
 ;;ZIP+4;;D;TEMP;2;.1223;.12112
"RTN","DGCNTRY",41,0)
 ;;PROVINCE;;F;CONF;2;.14116;.14114
"RTN","DGCNTRY",42,0)
 ;;POSTAL CODE;;F;CONF;2;.14116;.14115
"RTN","DGCNTRY",43,0)
 ;;STATE;;D;CONF;2;.14116;.1415
"RTN","DGCNTRY",44,0)
 ;;COUNTY;;D;CONF;2;.14116;.14111
"RTN","DGCNTRY",45,0)
 ;;ZIP+4;;D;CONF;2;.14116;.1416
"RTN","DGCNTRY",46,0)
 ;;QUIT;;QUIT
"RTN","DGDDDTTM")
0^101^B4416608
"RTN","DGDDDTTM",1,0)
DGDDDTTM ;ALB/MRL,BAJ - TRIGGER DT/TM CROSS REFERENCES [PATIENT] ; 05/18/2006
"RTN","DGDDDTTM",2,0)
 ;;5.3;Registration;**665,653,688**;Aug 13, 1993;Build 29
"RTN","DGDDDTTM",3,0)
 ;
"RTN","DGDDDTTM",4,0)
 ; This routine contains the code for new style cross-reference record
"RTN","DGDDDTTM",5,0)
 ; triggers for the PATIENT File #2.
"RTN","DGDDDTTM",6,0)
 ;
"RTN","DGDDDTTM",7,0)
TEMP ; PATIENT File #2 Record Index: ADTTM1
"RTN","DGDDDTTM",8,0)
 ; 
"RTN","DGDDDTTM",9,0)
 ; This code updates the TEMPORARY ADDRESS CHANGE DT/TM field when any 
"RTN","DGDDDTTM",10,0)
 ; of the following Temporary Address related data changes for a patient:
"RTN","DGDDDTTM",11,0)
 ;    
"RTN","DGDDDTTM",12,0)
 ;    TEMPORARY STREET [LINE 1]    (#.1211)
"RTN","DGDDDTTM",13,0)
 ;    TEMPORARY STREET [LINE 2]    (#.1212)
"RTN","DGDDDTTM",14,0)
 ;    TEMPORARY STREET [LINE 3]    (#.1213)
"RTN","DGDDDTTM",15,0)
 ;    TEMPORARY CITY               (#.1214)
"RTN","DGDDDTTM",16,0)
 ;    TEMPORARY STATE              (#.1215)
"RTN","DGDDDTTM",17,0)
 ;    TEMPORARY ZIP CODE           (#.1216)
"RTN","DGDDDTTM",18,0)
 ;    TEMPORARY ADDRESS START DATE (#.1217)
"RTN","DGDDDTTM",19,0)
 ;    TEMPORARY ADDRESS END DATE   (#.1218)
"RTN","DGDDDTTM",20,0)
 ;    TEMPORARY ADDRESS ACTIVE?    (#.12105)
"RTN","DGDDDTTM",21,0)
 ;    TEMPORARY ZIP+4              (#.12112)
"RTN","DGDDDTTM",22,0)
 ;    TEMPORARY ADDRESS COUNTY     (#.12111)
"RTN","DGDDDTTM",23,0)
 ;    TEMPORARY ADDRESS PROVINCE   (#.1221)
"RTN","DGDDDTTM",24,0)
 ;    TEMPORARY ADDRESS POSTAL CODE (#.1222)
"RTN","DGDDDTTM",25,0)
 ;    TEMPORARY ADDRESS COUNTRY     (#.1223)
"RTN","DGDDDTTM",26,0)
 ;
"RTN","DGDDDTTM",27,0)
 N DGIEN,DATA S DATA(.12113)=$$NOW^XLFDT(),DGIEN=DA
"RTN","DGDDDTTM",28,0)
 I $$UPD^DGENDBS(2,.DGIEN,.DATA)
"RTN","DGDDDTTM",29,0)
 Q
"RTN","DGDDDTTM",30,0)
 ;
"RTN","DGDDDTTM",31,0)
CONF ; PATIENT File #2 Record Index: ADTTM2
"RTN","DGDDDTTM",32,0)
 ;
"RTN","DGDDDTTM",33,0)
 ; This code updates the CONFIDENTIAL ADDR CHANGE DT/TM field when any
"RTN","DGDDDTTM",34,0)
 ; of the following Confidential Address related data changes for a
"RTN","DGDDDTTM",35,0)
 ; patient:
"RTN","DGDDDTTM",36,0)
 ;
"RTN","DGDDDTTM",37,0)
 ;    CONFIDENTIAL STREET [LINE 1]  (#.1411)
"RTN","DGDDDTTM",38,0)
 ;    CONFIDENTIAL STREET [LINE 2]  (#.1412)
"RTN","DGDDDTTM",39,0)
 ;    CONFIDENTIAL STREET [LINE 3]  (#.1413)
"RTN","DGDDDTTM",40,0)
 ;    CONFIDENTIAL ADDRESS CITY     (#.1414)
"RTN","DGDDDTTM",41,0)
 ;    CONFIDENTIAL ADDRESS STATE    (#.1415)
"RTN","DGDDDTTM",42,0)
 ;    CONFIDENTIAL ADDRESS ZIP CODE (#.1416)
"RTN","DGDDDTTM",43,0)
 ;    CONFIDENTIAL START DATE       (#.1417)
"RTN","DGDDDTTM",44,0)
 ;    CONFIDENTIAL END DATE         (#.1418)
"RTN","DGDDDTTM",45,0)
 ;    CONFIDENTIAL ADDRESS ACTIVE?  (#.14105)
"RTN","DGDDDTTM",46,0)
 ;    CONFIDENTIAL ADDRESS COUNTY   (#.14111)
"RTN","DGDDDTTM",47,0)
 ;    CONFIDENTIAL ADDR PROVINCE    (#.14114)
"RTN","DGDDDTTM",48,0)
 ;    CONFIDENTIAL ADDR POSTAL CODE (#.14115)
"RTN","DGDDDTTM",49,0)
 ;    CONFIDENTIAL ADDR COUNTRY     (#.14116)
"RTN","DGDDDTTM",50,0)
 ;
"RTN","DGDDDTTM",51,0)
 N DGIEN,DATA S DATA(.14112)=$$NOW^XLFDT(),DGIEN=DA
"RTN","DGDDDTTM",52,0)
 I $$UPD^DGENDBS(2,.DGIEN,.DATA)
"RTN","DGDDDTTM",53,0)
 Q
"RTN","DGDDDTTM",54,0)
 ;
"RTN","DGDDDTTM",55,0)
PNOK ; PATIENT File #2 Record Index: ADTTM3
"RTN","DGDDDTTM",56,0)
 ;
"RTN","DGDDDTTM",57,0)
 ; This code updates the PRIMARY NOK CHANGE DATE/TIME field when any
"RTN","DGDDDTTM",58,0)
 ; of the following Primary Next of Kin related data changes for a
"RTN","DGDDDTTM",59,0)
 ; patient:
"RTN","DGDDDTTM",60,0)
 ;
"RTN","DGDDDTTM",61,0)
 ;    K-NAME OF PRIMARY NOK        (#.211)
"RTN","DGDDDTTM",62,0)
 ;    K-RELATIONSHIP TO PATIENT    (#.212)
"RTN","DGDDDTTM",63,0)
 ;    K-STREET ADDRESS [LINE 1]    (#.213)
"RTN","DGDDDTTM",64,0)
 ;    K-STREET ADDRESS [LINE 2]    (#.214)
"RTN","DGDDDTTM",65,0)
 ;    K-STREET ADDRESS [LINE 3]    (#.215)
"RTN","DGDDDTTM",66,0)
 ;    K-CITY                       (#.216)
"RTN","DGDDDTTM",67,0)
 ;    K-STATE                      (#.217)
"RTN","DGDDDTTM",68,0)
 ;    K-ZIP CODE                   (#.218)
"RTN","DGDDDTTM",69,0)
 ;    K-ADDRESS SAME AS PATIENT'S? (#.2125)
"RTN","DGDDDTTM",70,0)
 ;    K-ZIP+4                      (#.2207)
"RTN","DGDDDTTM",71,0)
 ;
"RTN","DGDDDTTM",72,0)
 N DGIEN,DATA S DATA(.21012)=$$NOW^XLFDT(),DGIEN=DA
"RTN","DGDDDTTM",73,0)
 I $$UPD^DGENDBS(2,.DGIEN,.DATA)
"RTN","DGDDDTTM",74,0)
 Q
"RTN","DGDDDTTM",75,0)
 ;
"RTN","DGDDDTTM",76,0)
SNOK ; PATIENT File #2 Record Index: ADTTM4
"RTN","DGDDDTTM",77,0)
 ;
"RTN","DGDDDTTM",78,0)
 ; This code updates the SECONDARY NOK CHANGE DATE/TIME field when any
"RTN","DGDDDTTM",79,0)
 ; of the following Secondary Next of Kin related data changes for a
"RTN","DGDDDTTM",80,0)
 ; patient:
"RTN","DGDDDTTM",81,0)
 ;
"RTN","DGDDDTTM",82,0)
 ;    K2-NAME OF SECONDARY NOK      (#.2191)
"RTN","DGDDDTTM",83,0)
 ;    K2-RELATIONSHIP TO PATIENT    (#.2192)
"RTN","DGDDDTTM",84,0)
 ;    K2-STREET ADDRESS [LINE 1]    (#.2193)
"RTN","DGDDDTTM",85,0)
 ;    K2-STREET ADDRESS [LINE 2]    (#.2194)
"RTN","DGDDDTTM",86,0)
 ;    K2-STREET ADDRESS [LINE 3]    (#.2195)
"RTN","DGDDDTTM",87,0)
 ;    K2-CITY                       (#.2196)
"RTN","DGDDDTTM",88,0)
 ;    K2-STATE                      (#.2197)
"RTN","DGDDDTTM",89,0)
 ;    K2-ZIP CODE                   (#.2198)
"RTN","DGDDDTTM",90,0)
 ;    K2-ADDRESS SAME AS PATIENT'S? (#.21925)
"RTN","DGDDDTTM",91,0)
 ;    K2-ZIP+4                      (#.2203)
"RTN","DGDDDTTM",92,0)
 ;
"RTN","DGDDDTTM",93,0)
 N DGIEN,DATA S DATA(.211012)=$$NOW^XLFDT(),DGIEN=DA
"RTN","DGDDDTTM",94,0)
 I $$UPD^DGENDBS(2,.DGIEN,.DATA)
"RTN","DGDDDTTM",95,0)
 Q
"RTN","DGDDDTTM",96,0)
 ;
"RTN","DGDDDTTM",97,0)
ECON ; PATIENT File #2 Record Index: ADTTM5
"RTN","DGDDDTTM",98,0)
 ;
"RTN","DGDDDTTM",99,0)
 ; This code updates the E-CONTACT CHANGE DATE/TIME field when any
"RTN","DGDDDTTM",100,0)
 ; of the following Emergency Contact related data changes for a
"RTN","DGDDDTTM",101,0)
 ; patient:
"RTN","DGDDDTTM",102,0)
 ;
"RTN","DGDDDTTM",103,0)
 ;    E-NAME (#.331)
"RTN","DGDDDTTM",104,0)
 ;    E-RELATIONSHIP TO PATIENT    (#.332)
"RTN","DGDDDTTM",105,0)
 ;    E-STREET ADDRESS [LINE 1]    (#.333)
"RTN","DGDDDTTM",106,0)
 ;    E-STREET ADDRESS [LINE 2]    (#.334)
"RTN","DGDDDTTM",107,0)
 ;    E-STREET ADDRESS [LINE 3]    (#.335)
"RTN","DGDDDTTM",108,0)
 ;    E-CITY                       (#.336)
"RTN","DGDDDTTM",109,0)
 ;    E-STATE                      (#.337)
"RTN","DGDDDTTM",110,0)
 ;    E-ZIP CODE                   (#.338)
"RTN","DGDDDTTM",111,0)
 ;    E-EMER. CONTACT SAME AS NOK? (#.3305)
"RTN","DGDDDTTM",112,0)
 ;    E-ZIP+4                      (#.2201)
"RTN","DGDDDTTM",113,0)
 ;
"RTN","DGDDDTTM",114,0)
 N DGIEN,DATA S DATA(.33012)=$$NOW^XLFDT(),DGIEN=DA
"RTN","DGDDDTTM",115,0)
 I $$UPD^DGENDBS(2,.DGIEN,.DATA)
"RTN","DGDDDTTM",116,0)
 Q
"RTN","DGDDDTTM",117,0)
 ;
"RTN","DGDDDTTM",118,0)
ECON2 ; PATIENT File #2 Record Index: ADTTM6
"RTN","DGDDDTTM",119,0)
 ;
"RTN","DGDDDTTM",120,0)
 ; This code updates the E2-CONTACT CHANGE DATE/TIME field when any
"RTN","DGDDDTTM",121,0)
 ; of the following Secondary Emergency Contact related data changes
"RTN","DGDDDTTM",122,0)
 ; for a patient:
"RTN","DGDDDTTM",123,0)
 ;
"RTN","DGDDDTTM",124,0)
 ;    E2-NAME OF SECONDARY CONTACT (#.3311)
"RTN","DGDDDTTM",125,0)
 ;    E2-RELATIONSHIP TO PATIENT   (#.3312)
"RTN","DGDDDTTM",126,0)
 ;    E2-STREET ADDRESS [LINE 1]   (#.3313)
"RTN","DGDDDTTM",127,0)
 ;    E2-STREET ADDRESS [LINE 2]   (#.3314)
"RTN","DGDDDTTM",128,0)
 ;    E2-STREET ADDRESS [LINE 3]   (#.3315)
"RTN","DGDDDTTM",129,0)
 ;    E2-CITY                      (#.3316)
"RTN","DGDDDTTM",130,0)
 ;    E2-STATE                     (#.3317)
"RTN","DGDDDTTM",131,0)
 ;    E2-ZIP CODE                  (#.3318)
"RTN","DGDDDTTM",132,0)
 ;    E2-ZIP+4                     (#.2204)
"RTN","DGDDDTTM",133,0)
 ;
"RTN","DGDDDTTM",134,0)
 N DGIEN,DATA S DATA(.33112)=$$NOW^XLFDT(),DGIEN=DA
"RTN","DGDDDTTM",135,0)
 I $$UPD^DGENDBS(2,.DGIEN,.DATA)
"RTN","DGDDDTTM",136,0)
 Q
"RTN","DGDDDTTM",137,0)
 ;
"RTN","DGDDDTTM",138,0)
DESIG ; PATIENT File #2 Record Index: ADTTM7
"RTN","DGDDDTTM",139,0)
 ;
"RTN","DGDDDTTM",140,0)
 ; This code updates the DESIGNEE CHANGE DATE/TIME field when any
"RTN","DGDDDTTM",141,0)
 ; of the following Designee related data changes for a patient:
"RTN","DGDDDTTM",142,0)
 ;
"RTN","DGDDDTTM",143,0)
 ;    D-NAME OF DESIGNEE        (#.341)
"RTN","DGDDDTTM",144,0)
 ;    D-RELATIONSHIP TO PATIENT (#.342)
"RTN","DGDDDTTM",145,0)
 ;    D-STREET ADDRESS [LINE 1] (#.343)
"RTN","DGDDDTTM",146,0)
 ;    D-STREET ADDRESS [LINE 2] (#.344)
"RTN","DGDDDTTM",147,0)
 ;    D-STREET ADDRESS [LINE 3] (#.345)
"RTN","DGDDDTTM",148,0)
 ;    D-CITY                    (#.346)
"RTN","DGDDDTTM",149,0)
 ;    D-STATE                   (#.347)
"RTN","DGDDDTTM",150,0)
 ;    D-ZIP CODE                (#.348)
"RTN","DGDDDTTM",151,0)
 ;    D-DESIGNEE SAME AS NOK?   (#.3405)
"RTN","DGDDDTTM",152,0)
 ;    D-ZIP+4                   (#.2202)
"RTN","DGDDDTTM",153,0)
 ;
"RTN","DGDDDTTM",154,0)
 N DGIEN,DATA S DATA(.3412)=$$NOW^XLFDT(),DGIEN=DA
"RTN","DGDDDTTM",155,0)
 I $$UPD^DGENDBS(2,.DGIEN,.DATA)
"RTN","DGDDDTTM",156,0)
 Q
"RTN","DGDEP")
0^90^B8540114
"RTN","DGDEP",1,0)
DGDEP ;ALB/CAW,BAJ - Dependent Driver ; 8/1/08 12:55pm
"RTN","DGDEP",2,0)
 ;;5.3;Registration;**45,688**;Aug 13, 1993;Build 29
"RTN","DGDEP",3,0)
 ;
"RTN","DGDEP",4,0)
EN ;
"RTN","DGDEP",5,0)
 S VALMBCK=""
"RTN","DGDEP",6,0)
 D WAIT^DICD,EN^VALM("DGMT DEPENDENTS")
"RTN","DGDEP",7,0)
 S VALMBCK="R"
"RTN","DGDEP",8,0)
ENQ K DEP,DGCNT,DGDEP,DGIR0,DGINI,DGLN,DGPRI,DGREL,^TMP("DGDEP",$J)
"RTN","DGDEP",9,0)
 Q
"RTN","DGDEP",10,0)
 ;
"RTN","DGDEP",11,0)
PAT ; Patient Lookup
"RTN","DGDEP",12,0)
 N DIC,Y
"RTN","DGDEP",13,0)
 S DIC="^DPT(",DIC(0)="AEMQZ" D ^DIC I Y'>0 G PATQ
"RTN","DGDEP",14,0)
 I ($G(DTOUT)!$G(DUOUT)) G PATQ
"RTN","DGDEP",15,0)
 S DFN=+Y
"RTN","DGDEP",16,0)
PATQ Q
"RTN","DGDEP",17,0)
 ;
"RTN","DGDEP",18,0)
HDR ; Header
"RTN","DGDEP",19,0)
 N VA,VAERR,SSNV
"RTN","DGDEP",20,0)
 D PID^VADPT
"RTN","DGDEP",21,0)
 ; Capture and display SSN Verification Status with SSN  BAJ DG*5.3*688 11/22/2005
"RTN","DGDEP",22,0)
 D GETSTAT^DGRP1(.SSNV)
"RTN","DGDEP",23,0)
 I $G(DGSCR8) D  G HDRQ
"RTN","DGDEP",24,0)
 .S X="",VALMHDR(1)="                      FAMILY DEMOGRAPHIC DATA, SCREEN <8>"
"RTN","DGDEP",25,0)
 .S VALMHDR(1)=$$SETSTR^VALM1(X,VALMHDR(1),80-$L(X),$L(X))
"RTN","DGDEP",26,0)
 .S VALMHDR(2)=$E($P("Patient: "_$G(^DPT(DFN,0)),"^",1),1,30)_" ("_VA("PID")_")"_" "_SSNV
"RTN","DGDEP",27,0)
 .S X=$S($D(^DPT(DFN,.1)):"Ward: "_^(.1),1:"Outpatient")
"RTN","DGDEP",28,0)
 .S VALMHDR(2)=$$SETSTR^VALM1(X,VALMHDR(2),80-$L(X),$L(X))
"RTN","DGDEP",29,0)
 S X="",VALMHDR(1)="                     MARITAL STATUS/DEPENDENTS, SCREEN <1>"
"RTN","DGDEP",30,0)
 S VALMHDR(2)=$E($P("Patient: "_$G(^DPT(DFN,0)),"^",1),1,30)_" ("_VA("PID")_")"_" "_SSNV
"RTN","DGDEP",31,0)
 S X=$S($D(^DPT(DFN,.1)):"Ward: "_^(.1),1:"Outpatient")
"RTN","DGDEP",32,0)
 S VALMHDR(2)=$$SETSTR^VALM1(X,VALMHDR(2),80-$L(X),$L(X))
"RTN","DGDEP",33,0)
HDRQ Q
"RTN","DGDEP",34,0)
 ;
"RTN","DGDEP",35,0)
INIT ; Find all dependents
"RTN","DGDEP",36,0)
 K DGDEP("DGDEP",$J),^TMP("DGDEP",$J)
"RTN","DGDEP",37,0)
 N CNT,DGDATE,DGDDEP0,DGINCP,DGINI,DGIRI,DGWHERE
"RTN","DGDEP",38,0)
 D NEW^DGRPEIS1 ; Sets up veteran in person file
"RTN","DGDEP",39,0)
 ; Get all active dependents
"RTN","DGDEP",40,0)
 D ALL^DGMTU21(DFN,"VSD",$S($G(DGMTDT):DGMTDT,1:DT),"IPR",$G(DGMTI))
"RTN","DGDEP",41,0)
 ;
"RTN","DGDEP",42,0)
 ; Get all dependents active and inactive
"RTN","DGDEP",43,0)
 S (CNT,DGDEP)=0,DGLN=1
"RTN","DGDEP",44,0)
 F  S DGDEP=$O(^DGPR(408.12,"B",DFN,DGDEP)) Q:'DGDEP  D
"RTN","DGDEP",45,0)
 .N DGDEP0 S CNT=CNT+1
"RTN","DGDEP",46,0)
 .S DGDEP0=^DGPR(408.12,DGDEP,0)
"RTN","DGDEP",47,0)
 .D GETIENS^DGMTU2(DFN,+DGDEP,$S($G(DGMTDT):DGMTDT,1:DT)) ;Get Annual Income IEN and Income Person IEN
"RTN","DGDEP",48,0)
 .S DGWHERE=$P(DGDEP0,U,3)
"RTN","DGDEP",49,0)
 .S DGINCP=$G(@("^"_$P(DGWHERE,";",2)_+DGWHERE_",0)"))
"RTN","DGDEP",50,0)
 .S DGDEP("DGDEP",$J,$P(DGDEP0,U,2),CNT)=DGINCP
"RTN","DGDEP",51,0)
 .S $P(DGDEP("DGDEP",$J,$P(DGDEP0,U,2),CNT),U,20)=DGDEP
"RTN","DGDEP",52,0)
 .S $P(DGDEP("DGDEP",$J,$P(DGDEP0,U,2),CNT),U,21)=$S($G(DGINI):DGINI,1:$G(DGINC))
"RTN","DGDEP",53,0)
 .S $P(DGDEP("DGDEP",$J,$P(DGDEP0,U,2),CNT),U,22)=$S($G(DGIRI):DGIRI,1:$G(DGINR))
"RTN","DGDEP",54,0)
 .N DGEDATE S DGEDATE=0
"RTN","DGDEP",55,0)
 .F  S DGEDATE=$O(^DGPR(408.12,DGDEP,"E",DGEDATE)) Q:'DGEDATE  D
"RTN","DGDEP",56,0)
 ..S DGDATE=^DGPR(408.12,DGDEP,"E",DGEDATE,0)
"RTN","DGDEP",57,0)
 ..S DGDEP("DGDEP",$J,$P(DGDEP0,U,2),CNT,-$P(DGDATE,U))=DGDATE
"RTN","DGDEP",58,0)
 D RETDEP^DGDEP0
"RTN","DGDEP",59,0)
 S VALMCNT=DGLN-1
"RTN","DGDEP",60,0)
 Q
"RTN","DGDEP",61,0)
 ;
"RTN","DGDEP",62,0)
SET(X) ; Set in array
"RTN","DGDEP",63,0)
 ;
"RTN","DGDEP",64,0)
 S ^TMP("DGDEP",$J,DGLN,0)=X,^TMP("DGDEP",$J,"IDX",CNT,CNT)=""
"RTN","DGDEP",65,0)
 S DGLN=DGLN+1
"RTN","DGDEP",66,0)
 Q
"RTN","DGDEP0")
0^91^B13570758
"RTN","DGDEP0",1,0)
DGDEP0 ;ALB/CAW,JAN,BAJ,ERC - Dependent Driver (con't) ; 8/1/08 1:08pm
"RTN","DGDEP0",2,0)
 ;;5.3;Registration;**45,60,395,624,653,688**;Aug 13, 1993;Build 29
"RTN","DGDEP0",3,0)
 ;
"RTN","DGDEP0",4,0)
RETDEP ;Return printable data of dependents
"RTN","DGDEP0",5,0)
 Q:'$D(DGDEP("DGDEP",$J))
"RTN","DGDEP0",6,0)
 N ACT,ACTIVE,CNT,CNTR,DEP,DGII,DGX,EDATE,INCOME,INCPER,MORE,NAME,RELATE
"RTN","DGDEP0",7,0)
 F DGII=0:0 S DGII=$O(DGDEP(DGII)) Q:'DGII  K DGDEP(DGII) ; clear dependent array
"RTN","DGDEP0",8,0)
 S RELATE=0,CNT=1
"RTN","DGDEP0",9,0)
 ;
"RTN","DGDEP0",10,0)
 F  S RELATE=$O(DGDEP("DGDEP",$J,RELATE)) Q:'RELATE  D
"RTN","DGDEP0",11,0)
 .;
"RTN","DGDEP0",12,0)
 .S MORE=0
"RTN","DGDEP0",13,0)
 .F  S MORE=$O(DGDEP("DGDEP",$J,RELATE,MORE)) Q:'MORE  S DEP=DGDEP("DGDEP",$J,RELATE,MORE) D  S CNT=CNT+1,DGCNT=CNT-1
"RTN","DGDEP0",14,0)
 ..;
"RTN","DGDEP0",15,0)
 ..S $P(DGDEP(CNT),U,2)=$P($G(^DG(408.11,RELATE,0)),U)
"RTN","DGDEP0",16,0)
 ..S NAME=$P(DEP,U),$P(DGDEP(CNT),U)=$P(DEP,U)
"RTN","DGDEP0",17,0)
 ..S $P(DGDEP(CNT),U,3)=$S($P(DEP,U,2)="M":"Male",$P(DEP,U,2)="F":"Female",1:"Unknown"),$P(DGDEP(CNT),U,20)=$P(DEP,U,20)
"RTN","DGDEP0",18,0)
 ..S $P(DGDEP(CNT),U,21)=$P(DEP,U,21),$P(DGDEP(CNT),U,22)=$P(DEP,U,22)
"RTN","DGDEP0",19,0)
 ..N Y S Y=$P(DEP,U,3) D DD^%DT S $P(DGDEP(CNT),U,4)=Y
"RTN","DGDEP0",20,0)
 ..;
"RTN","DGDEP0",21,0)
 ..;SSN and SSN Verification status modifications DG*5.3*688 BAJ 11/22/2005
"RTN","DGDEP0",22,0)
 ..;format SSN for display
"RTN","DGDEP0",23,0)
 ..I $P(DEP,U,9) D
"RTN","DGDEP0",24,0)
 ... N T S $P(DGDEP(CNT),U,5)=$E($P(DEP,U,9),1,3)_"-"_$E($P(DEP,U,9),4,5)_"-"_$E($P(DEP,U,9),6,10)
"RTN","DGDEP0",25,0)
 ... S T=$P(DEP,U,11)
"RTN","DGDEP0",26,0)
 ... S $P(DGDEP(CNT),U,9)=$S(T=4:"VERIFIED",T=2:"INVALID",1:"")
"RTN","DGDEP0",27,0)
 ...;set 10th piece to value of Pseudo SSN Reason, if there is one
"RTN","DGDEP0",28,0)
 ...;for DG*5.3*653 - ERC
"RTN","DGDEP0",29,0)
 ...S $P(DGDEP(CNT),U,10)=$S($P(DEP,U,10)="R":"Refused to Provide",$P(DEP,U,10)="S":"SSN Unknown/Follow-up Required",$P(DEP,U,10)="N":"NO SSN ASSIGNED",1:"")
"RTN","DGDEP0",30,0)
 ..;
"RTN","DGDEP0",31,0)
 ..S INCOME=$P(DGDEP("DGDEP",$J,RELATE,MORE),U,21)
"RTN","DGDEP0",32,0)
 ..S INCPER=$P(DGDEP("DGDEP",$J,RELATE,MORE),U,22)
"RTN","DGDEP0",33,0)
 ..I RELATE>1 S DGDEP(CNT,"MNADD")=$$SPDEPADD(INCPER)
"RTN","DGDEP0",34,0)
 ..I RELATE=1 D SELF("",NAME,RELATE,"",DGDEP(1),$G(DGMTI),CNT)
"RTN","DGDEP0",35,0)
 ..S ACT=$O(DGDEP("DGDEP",$J,RELATE,MORE,"")) Q:'ACT  S ACT=DGDEP("DGDEP",$J,RELATE,MORE,+ACT)
"RTN","DGDEP0",36,0)
 ..I RELATE=1 D SELF(INCPER,NAME,RELATE,ACT,DGDEP(1),$G(DGMTI),CNT)
"RTN","DGDEP0",37,0)
 ..I RELATE=2 D DEP(INCPER,NAME,RELATE,ACT,DGDEP(CNT),$G(DGMTI),$G(DGMTACT),CNT)
"RTN","DGDEP0",38,0)
 ..I RELATE>2 D DEP(INCPER,NAME,RELATE,ACT,DGDEP(CNT),$G(DGMTI),$G(DGMTACT),CNT)
"RTN","DGDEP0",39,0)
 ..S EDATE="",CNTR=0
"RTN","DGDEP0",40,0)
 ..F  S EDATE=$O(DGDEP("DGDEP",$J,RELATE,MORE,EDATE)) Q:EDATE']""  S ACTIVE=DGDEP("DGDEP",$J,RELATE,MORE,EDATE) D
"RTN","DGDEP0",41,0)
 ...;
"RTN","DGDEP0",42,0)
 ...N Y S Y=+ACTIVE D DD^%DT S DGDEP(CNT,EDATE)=Y
"RTN","DGDEP0",43,0)
 ...S $P(DGDEP(CNT,EDATE),U,2)=$S($P(ACTIVE,U,2)=1:"Active",1:"Inactive")
"RTN","DGDEP0",44,0)
 ...S $P(DGDEP(CNT,EDATE),U,3)=$P(ACTIVE,U,3)
"RTN","DGDEP0",45,0)
 K DGDEP("DGDEP",$J)
"RTN","DGDEP0",46,0)
 Q
"RTN","DGDEP0",47,0)
 ;
"RTN","DGDEP0",48,0)
SELF(INCPER,NAME,RELATE,ACT,DGDEP,DGMTI,CNT) ;
"RTN","DGDEP0",49,0)
 I $G(DGMTI),$G(DGMTACT)="VEW" G SELFQ
"RTN","DGDEP0",50,0)
 I $G(DGMTI) D ADD^DGDEP2(DFN,DGDEP,DGMTI)
"RTN","DGDEP0",51,0)
SELFQ I INCPER>0 D SELF^DGDEP3(INCPER,NAME,RELATE,ACT,$G(DGMTI),CNT)
"RTN","DGDEP0",52,0)
 Q
"RTN","DGDEP0",53,0)
 ;
"RTN","DGDEP0",54,0)
DEP(INCPER,NAME,RELATE,ACT,DGDEP,DGMTI,DGMTACT,CNT) ;
"RTN","DGDEP0",55,0)
 ;
"RTN","DGDEP0",56,0)
 I $G(DGMTI),$G(DGMTACT)="VEW" G DEP1
"RTN","DGDEP0",57,0)
 I $G(DGMTI),$P(ACT,U,2),$G(DGMTACT)="ADD",'$G(DGREMOVE) D ADD^DGDEP2(DFN,DGDEP,DGMTI)
"RTN","DGDEP0",58,0)
DEP1 I RELATE=2 D SELF^DGDEP3(INCPER,NAME,RELATE,ACT,$G(DGMTI),CNT) G DEPQ
"RTN","DGDEP0",59,0)
 I INCPER>0 D CHILD^DGDEP3(INCPER,NAME,RELATE,ACT,$G(DGMTI),$G(DGMTACT),CNT)
"RTN","DGDEP0",60,0)
DEPQ Q
"RTN","DGDEP0",61,0)
 ;
"RTN","DGDEP0",62,0)
SPDEPADD(INCPER) ;Return Spouse/Dependent Maiden Name and Address info
"RTN","DGDEP0",63,0)
 N ADDCKVAL,INDAIIEN,PRIEN,IPIEN,SPDEPINF
"RTN","DGDEP0",64,0)
 S INDAIIEN=$P($G(^DGMT(408.22,INCPER,0)),"^",2)
"RTN","DGDEP0",65,0)
 S PRIEN=$P($G(^DGMT(408.21,INDAIIEN,0)),"^",2)
"RTN","DGDEP0",66,0)
 S IPIEN=$P($G(^DGPR(408.12,PRIEN,0)),"^",3)
"RTN","DGDEP0",67,0)
 I IPIEN["DGPR(408.13" DO
"RTN","DGDEP0",68,0)
 . S IPIEN=$P(IPIEN,";",1)
"RTN","DGDEP0",69,0)
 . S SPDEPINF=$P($G(^DGPR(408.13,IPIEN,1)),"^",1,8)
"RTN","DGDEP0",70,0)
 Q SPDEPINF
"RTN","DGDEP1")
0^92^B33356998
"RTN","DGDEP1",1,0)
DGDEP1 ;ALB/CAW,BAJ,ERC - List One Dependent/Edit Effective Dates ; 8/1/08 1:10pm
"RTN","DGDEP1",2,0)
 ;;5.3;Registration;**45,60,624,653,688**;Aug 13, 1993;Build 29
"RTN","DGDEP1",3,0)
 ;
"RTN","DGDEP1",4,0)
LSTDEP(DGDEP) ;List Dependents
"RTN","DGDEP1",5,0)
 N DEP,CNT S CNT=0
"RTN","DGDEP1",6,0)
 F  S CNT=$O(DGDEP(CNT)) Q:'CNT  D ONE(CNT)
"RTN","DGDEP1",7,0)
 Q
"RTN","DGDEP1",8,0)
 ;
"RTN","DGDEP1",9,0)
ONE(CNT) ; List one dependent
"RTN","DGDEP1",10,0)
 ; Modified for SSN VERFICIATION STATUS DG*5.3*688  BAJ 11/22/2005
"RTN","DGDEP1",11,0)
 ;
"RTN","DGDEP1",12,0)
 N DGLN S DGLN=1
"RTN","DGDEP1",13,0)
 ;
"RTN","DGDEP1",14,0)
 S X="",X=$$SETSTR^VALM1("DOB: ",X,5,5)
"RTN","DGDEP1",15,0)
 S X=$$SETSTR^VALM1($P(DGDEP(CNT),U,4),X,10,14)
"RTN","DGDEP1",16,0)
 S X=$$SETSTR^VALM1("Sex: ",X,30,5)
"RTN","DGDEP1",17,0)
 S X=$$SETSTR^VALM1($P(DGDEP(CNT),U,3),X,35,8)
"RTN","DGDEP1",18,0)
 S X=$$SETSTR^VALM1("SSN: ",X,52,5)
"RTN","DGDEP1",19,0)
 S X=$$SETSTR^VALM1($P(DGDEP(CNT),U,5),X,57,14)
"RTN","DGDEP1",20,0)
 ; Retrieve SSN VERIFICATION STATUS FROM ARRAY
"RTN","DGDEP1",21,0)
 S X=$$SETSTR^VALM1($P(DGDEP(CNT),U,9),X,71,8)
"RTN","DGDEP1",22,0)
 D SET(X)
"RTN","DGDEP1",23,0)
 ;
"RTN","DGDEP1",24,0)
 ;* Output Spouse' Maiden Name, if defined (DG*5.3*624)
"RTN","DGDEP1",25,0)
 S X=""
"RTN","DGDEP1",26,0)
 I $P($G(DGDEP(CNT)),U,2)="SPOUSE" DO
"RTN","DGDEP1",27,0)
 . N DGMNTEXT
"RTN","DGDEP1",28,0)
 . S X=$$SETSTR^VALM1("Maiden: ",X,2,8)
"RTN","DGDEP1",29,0)
 . S DGMNTEXT=$P($G(DGDEP(CNT,"MNADD")),U,1)
"RTN","DGDEP1",30,0)
 . S:DGMNTEXT]"" X=$$SETSTR^VALM1(DGMNTEXT,X,10,30)
"RTN","DGDEP1",31,0)
 . S:DGMNTEXT']"" X=$$SETSTR^VALM1("UNANSWERED",X,10,10)
"RTN","DGDEP1",32,0)
 ;display PSSN Reason if SSN is a pseudo - DG*5.3*653
"RTN","DGDEP1",33,0)
 I $P($G(DGDEP(CNT)),U,2)'="SELF",($P(DGDEP(CNT),U,5)["P") D
"RTN","DGDEP1",34,0)
 . S X=$$SETSTR^VALM1("PSSN Reason: ",X,44,15)
"RTN","DGDEP1",35,0)
 . I $P(DGDEP(CNT),U,10)["Unk" S $P(DGDEP(CNT),U,10)="SSN Unkn/Follow-up Req"
"RTN","DGDEP1",36,0)
 . S X=$$SETSTR^VALM1($P(DGDEP(CNT),U,10),X,57,22)
"RTN","DGDEP1",37,0)
 D SET(X)
"RTN","DGDEP1",38,0)
 S DEP=""
"RTN","DGDEP1",39,0)
 F  S DEP=$O(DGDEP(CNT,DEP)) Q:DEP']""  D
"RTN","DGDEP1",40,0)
 .I DEP'="MNADD" DO
"RTN","DGDEP1",41,0)
 ..S X="",X=$$SETSTR^VALM1("Status: ",X,2,8)
"RTN","DGDEP1",42,0)
 ..S X=$$SETSTR^VALM1($P(DGDEP(CNT,DEP),U,2),X,10,24)
"RTN","DGDEP1",43,0)
 ..S X=$$SETSTR^VALM1("Effective Date: ",X,41,15)
"RTN","DGDEP1",44,0)
 ..S X=$$SETSTR^VALM1($P(DGDEP(CNT,DEP),U),X,57,20)
"RTN","DGDEP1",45,0)
 ..D SET(X)
"RTN","DGDEP1",46,0)
 ..I $P(DGDEP(CNT,DEP),U,3) D
"RTN","DGDEP1",47,0)
 ...S X="",X=$$SETSTR^VALM1("Filed by IVM: ",X,43,14)
"RTN","DGDEP1",48,0)
 ...S X=$$SETSTR^VALM1("Yes",X,57,20)
"RTN","DGDEP1",49,0)
 ...D SET(X)
"RTN","DGDEP1",50,0)
 ..D SET("")
"RTN","DGDEP1",51,0)
 S VALMCNT=DGLN-1
"RTN","DGDEP1",52,0)
 ;
"RTN","DGDEP1",53,0)
 S X=""
"RTN","DGDEP1",54,0)
 S X=$$SETSTR^VALM1("Address: ",X,1,9)
"RTN","DGDEP1",55,0)
 S:($P($G(DGDEP(CNT,"MNADD")),U,2,7)="^^^^^") X=$$SETSTR^VALM1("UNANSWERED",X,10,10)
"RTN","DGDEP1",56,0)
 S:($P($G(DGDEP(CNT,"MNADD")),U,2,7)'="^^^^^") X=$$SETSTR^VALM1($P($G(DGDEP(CNT,"MNADD")),U,2),X,10,35)
"RTN","DGDEP1",57,0)
 S X=$$SETSTR^VALM1("Phone: ",X,50,7)
"RTN","DGDEP1",58,0)
 S:($P($G(DGDEP(CNT,"MNADD")),U,8)="") X=$$SETSTR^VALM1("UNANSWERED",X,57,10)
"RTN","DGDEP1",59,0)
 S:($P($G(DGDEP(CNT,"MNADD")),U,8)'="") X=$$SETSTR^VALM1($P($G(DGDEP(CNT,"MNADD")),U,8),X,57,13)
"RTN","DGDEP1",60,0)
 D SET(X)
"RTN","DGDEP1",61,0)
 ;
"RTN","DGDEP1",62,0)
 ;* Output dependent address (DG*5.3*624)
"RTN","DGDEP1",63,0)
 I ($P($G(DGDEP(CNT,"MNADD")),U,2,7)'="^^^^^") DO
"RTN","DGDEP1",64,0)
 .S X=""
"RTN","DGDEP1",65,0)
 .S:($P($G(DGDEP(CNT,"MNADD")),U,3)'="") X=$$SETSTR^VALM1($P($G(DGDEP(CNT,"MNADD")),U,3),X,10,30)
"RTN","DGDEP1",66,0)
 .S:($P($G(DGDEP(CNT,"MNADD")),U,3)="") X=$$SETSTR^VALM1(" ",X,10,1)
"RTN","DGDEP1",67,0)
 .D SET(X)
"RTN","DGDEP1",68,0)
 .S X=""
"RTN","DGDEP1",69,0)
 .S:($P($G(DGDEP(CNT,"MNADD")),U,4)'="") X=$$SETSTR^VALM1($P($G(DGDEP(CNT,"MNADD")),U,4),X,10,30)
"RTN","DGDEP1",70,0)
 .S:($P($G(DGDEP(CNT,"MNADD")),U,4)="") X=$$SETSTR^VALM1(" ",X,10,1)
"RTN","DGDEP1",71,0)
 .D SET(X)
"RTN","DGDEP1",72,0)
 .S X=""
"RTN","DGDEP1",73,0)
 .I ($P($G(DGDEP(CNT,"MNADD")),U,5)'="") DO
"RTN","DGDEP1",74,0)
 ..S X=$$SETSTR^VALM1($P($G(DGDEP(CNT,"MNADD")),U,5),X,10,30)
"RTN","DGDEP1",75,0)
 ..S X=$$SETSTR^VALM1(",",X,($L($P($G(DGDEP(CNT,"MNADD")),U,5))+10),1)
"RTN","DGDEP1",76,0)
 .S:($P($G(DGDEP(CNT,"MNADD")),U,5)="") X=$$SETSTR^VALM1(" ",X,10,1)
"RTN","DGDEP1",77,0)
 .N STATVAL,ZIPPOS
"RTN","DGDEP1",78,0)
 .S STATVAL=""
"RTN","DGDEP1",79,0)
 .I ($P($G(DGDEP(CNT,"MNADD")),U,6)'="") DO
"RTN","DGDEP1",80,0)
 ..S STATVAL=$P(^DIC(5,$P($G(DGDEP(CNT,"MNADD")),U,6),0),"^",1)
"RTN","DGDEP1",81,0)
 ..S X=$$SETSTR^VALM1(STATVAL,X,($L($P($G(DGDEP(CNT,"MNADD")),U,5))+12),30)
"RTN","DGDEP1",82,0)
 .S:($P($G(DGDEP(CNT,"MNADD")),U,6)="") X=$$SETSTR^VALM1(" ",X,41,1)
"RTN","DGDEP1",83,0)
 .;;D SET(X)
"RTN","DGDEP1",84,0)
 .;;S X=""
"RTN","DGDEP1",85,0)
 .I ($P($G(DGDEP(CNT,"MNADD")),U,7)'="") DO
"RTN","DGDEP1",86,0)
 ..S ZIPPOS=($L($P($G(DGDEP(CNT,"MNADD")),U,5))+($L(STATVAL))+14)
"RTN","DGDEP1",87,0)
 ..S X=$$SETSTR^VALM1($P($G(DGDEP(CNT,"MNADD")),U,7),X,ZIPPOS,10)
"RTN","DGDEP1",88,0)
 .S:($P($G(DGDEP(CNT,"MNADD")),U,7)="") X=$$SETSTR^VALM1(" ",X,20,1)
"RTN","DGDEP1",89,0)
 .D SET(X)
"RTN","DGDEP1",90,0)
 ;
"RTN","DGDEP1",91,0)
 S VALMCNT=DGLN-1
"RTN","DGDEP1",92,0)
 Q
"RTN","DGDEP1",93,0)
 ;
"RTN","DGDEP1",94,0)
SET(X) ;Set up array
"RTN","DGDEP1",95,0)
 S ^TMP("DGMTEP",$J,DGLN,0)=X
"RTN","DGDEP1",96,0)
 S DGLN=DGLN+1
"RTN","DGDEP1",97,0)
 Q
"RTN","DGDEP1",98,0)
 ;
"RTN","DGDEP1",99,0)
EXIT ;
"RTN","DGDEP1",100,0)
 K ^TMP("DGMTEP",$J)
"RTN","DGDEP1",101,0)
 Q
"RTN","DGDEP1",102,0)
 ;
"RTN","DGDEP1",103,0)
EN ; Effective Dates
"RTN","DGDEP1",104,0)
 S VALMBCK=""
"RTN","DGDEP1",105,0)
 I $D(DGMTI),$G(DGMTACT)="VEW" W !,"Cannot edit when viewing a means test." H 2 G ENQ
"RTN","DGDEP1",106,0)
 I '$D(DGMTI),$G(DGRPV)=1 W !,"Not while viewing" H 2 G ENQ
"RTN","DGDEP1",107,0)
 D EDIT
"RTN","DGDEP1",108,0)
 I DGW=1 D  I $G(DGERR) W !,"Cannot inactivate veteran" K DGERR G EN
"RTN","DGDEP1",109,0)
 .S DATE=$O(DGDEP(1,""))
"RTN","DGDEP1",110,0)
 .S ACTIVE=$P(DGDEP(1,DATE),U,2)
"RTN","DGDEP1",111,0)
 .I ACTIVE="Inactive" S DGERR=1
"RTN","DGDEP1",112,0)
ENQ S VALMBCK="R"
"RTN","DGDEP1",113,0)
 Q
"RTN","DGDEP1",114,0)
 ;
"RTN","DGDEP1",115,0)
EDIT ; Edit Effective Dates
"RTN","DGDEP1",116,0)
 ;  values for DGFLG:
"RTN","DGDEP1",117,0)
 ;     DGFLG = 1   IVM effective date
"RTN","DGDEP1",118,0)
 ;
"RTN","DGDEP1",119,0)
 N DA,DR,DIE,DIC,DATE,DGEDIT,DGEE,Y
"RTN","DGDEP1",120,0)
 S DGFLG=0,DGEDIT=1
"RTN","DGDEP1",121,0)
 S DGPR=$S($G(DGW):$P(DGDEP(DGW),U,20),1:$P(DGDEP,U,20))
"RTN","DGDEP1",122,0)
 S DIE="^DGPR(408.12,",DA=DGPR,DR="75"
"RTN","DGDEP1",123,0)
 S DR(2,408.1275)="I $P($G(^DGPR(408.12,DGPR,""E"",DA,0)),U,3) S Y=0,DGFLG=1;S:$P($G(^DGPR(408.12,DGPR,""E"",DA,0)),U,2)']"""" DIE(""NO^"")="""";.01;.02"
"RTN","DGDEP1",124,0)
 D ^DIE
"RTN","DGDEP1",125,0)
 I DGFLG W !!,"Cannot edit date added by IVM." H 2 G EDITQ
"RTN","DGDEP1",126,0)
 S DATE=0,DATE=$O(^DGPR(408.12,$P(DGDEP(DGW),U,20),"E",DATE))
"RTN","DGDEP1",127,0)
 I 'DATE W !!,"There has to be an effective date for this person." H 2 G EDIT
"RTN","DGDEP1",128,0)
EDITQ K DGDEP,DGFLG D INIT^DGDEP
"RTN","DGDEP1",129,0)
 K ^TMP("DGMTEP",$J) D ONE(DGW)
"RTN","DGDEP1",130,0)
 Q
"RTN","DGDEP1",131,0)
 ;
"RTN","DGDEP1",132,0)
DOB(DA,X) ;CHECK EFFECTIVE DATE AGAINST DOB
"RTN","DGDEP1",133,0)
 N DGFILE,X1,NODE
"RTN","DGDEP1",134,0)
 S DGFILE=$P($G(^DGPR(408.12,DA,0)),U,3),X1=$P(DGFILE,";"),DGFILE=$S(DGFILE["DGPR":"^DGPR(408.13,",1:"^DPT(")
"RTN","DGDEP1",135,0)
 I X<$P($G(@(DGFILE_X1_",0)")),U,3) D  Q X
"RTN","DGDEP1",136,0)
 . W !,"  <<EFFECTIVE DATE may not precede Date Of Birth>>",*7
"RTN","DGDEP1",137,0)
 . S X=0
"RTN","DGDEP1",138,0)
 ;
"RTN","DGDEP1",139,0)
 S NODE=$G(^DGPR(408.12,DA,0))
"RTN","DGDEP1",140,0)
 I ($P(NODE,U,2)>1),(X<$P($G(^DPT(+$P(NODE,U),0)),U,3)) D  Q 0
"RTN","DGDEP1",141,0)
 . W !,"  <<EFFECTIVE DATE may not precede Veteran Date Of Birth>>",$C(7)
"RTN","DGDEP1",142,0)
 ;
"RTN","DGDEP1",143,0)
 I $P(NODE,U,2)=2 D  I X=0 Q X
"RTN","DGDEP1",144,0)
 . S X1=+$P($G(^DPT(+$P(NODE,U),.35)),U)  ;Vet Date Of Death
"RTN","DGDEP1",145,0)
 . I (X1>0),(X>X1) D  Q
"RTN","DGDEP1",146,0)
 . . W !,"  <<EFFECTIVE DATE may not be greater than Veteran Date Of Death>>",$C(7)
"RTN","DGDEP1",147,0)
 . . S X=0
"RTN","DGDEP1",148,0)
 . I '$$ACTIVE^DGMTU11(DA,X) D  Q   ;Only check inactive spouse
"RTN","DGDEP1",149,0)
 . . W !,"  <<EFFECTIVE DATE must be a date prior to Spouse Inactivation Date>>",$C(7)
"RTN","DGDEP1",150,0)
 . . S X=0
"RTN","DGDEP1",151,0)
 ;
"RTN","DGDEP1",152,0)
 Q X
"RTN","DGDEP2")
0^93^B20918784
"RTN","DGDEP2",1,0)
DGDEP2 ;ALB/CAW,JAN - Dependent Utilities ; 4/4/06 9:30am
"RTN","DGDEP2",2,0)
 ;;5.3;Registration;**45,60,395,624,688**;Aug 13, 1993;Build 29
"RTN","DGDEP2",3,0)
 ;624: DGMTDPCH=flag to force recalc of adj med exp when deps change
"RTN","DGDEP2",4,0)
 ;
"RTN","DGDEP2",5,0)
EN1 ; Add dependent to means test
"RTN","DGDEP2",6,0)
 ;
"RTN","DGDEP2",7,0)
 N DGSAVE,DGMTD,DGSAVE1
"RTN","DGDEP2",8,0)
 I '$G(DGMTI) W !,"Not a means test - use means test options." H 2 G EN1Q
"RTN","DGDEP2",9,0)
 I $G(DGMTACT)="VEW" W !,"Cannot edit when viewing a means test." H 2 G EN1Q
"RTN","DGDEP2",10,0)
 S VALMBCK="",DGSAVE=VALMLST,DGSAVE1=VALMBG
"RTN","DGDEP2",11,0)
 S VALMBG=1,VALMLST=DGCNT D SEL^VALM2 S VALMBG=DGSAVE1,VALMLST=DGSAVE G EN1Q:'$O(VALMY(0))
"RTN","DGDEP2",12,0)
 N CTR S CTR=0 F  S CTR=$O(VALMY(CTR)) Q:'CTR  D
"RTN","DGDEP2",13,0)
 . D ADD(DFN,DGDEP(CTR),$G(DGMTI))
"RTN","DGDEP2",14,0)
 S DGMTD=$S($G(DGMTI):$P(^DGMT(408.31,DGMTI,0),U),1:DT)
"RTN","DGDEP2",15,0)
 D ALL^DGMTU21(DFN,"VSC",DGMTD,"IPR",DGMTI)
"RTN","DGDEP2",16,0)
 K DGDEP D INIT^DGDEP
"RTN","DGDEP2",17,0)
 S DGMTDPCH=1
"RTN","DGDEP2",18,0)
EN1Q S VALMBCK="R" Q
"RTN","DGDEP2",19,0)
 ;
"RTN","DGDEP2",20,0)
ADD(DFN,DGDEP,DGMTI) ;Add
"RTN","DGDEP2",21,0)
 N DA,DR,DIE,DGMTD,DGIRI
"RTN","DGDEP2",22,0)
 I '$G(DGMTI) W !,"Not a means test - use means test options." H 2 G ADDQ
"RTN","DGDEP2",23,0)
 I $G(DGMTACT)="VEW" W !,"Cannot edit when viewing a means test." G ADDQ
"RTN","DGDEP2",24,0)
 S DGMTR=$O(^DG(408.11,"B",$P(DGDEP,U,2),"")) I '$P(^DG(408.11,DGMTR,0),U,4) D  G ADDQ
"RTN","DGDEP2",25,0)
 . W !,"Cannot add a "_$P(DGDEP,U,2)_" as a dependent to the means test." H 2
"RTN","DGDEP2",26,0)
 S DGMTD=$S($G(DGMTI):$P($G(^DGMT(408.31,DGMTI,0)),U),1:DT)
"RTN","DGDEP2",27,0)
 D GETIENS^DGMTU2(DFN,$P(DGDEP,U,20),DGMTD)
"RTN","DGDEP2",28,0)
 S DA=DGIRI
"RTN","DGDEP2",29,0)
 S DIE="^DGMT(408.22,",DR="31////"_DGMTI
"RTN","DGDEP2",30,0)
 D ^DIE
"RTN","DGDEP2",31,0)
 S DGMTDPCH=1
"RTN","DGDEP2",32,0)
ADDQ Q
"RTN","DGDEP2",33,0)
 ;
"RTN","DGDEP2",34,0)
EN2 ; Remove dependent from means test
"RTN","DGDEP2",35,0)
 ;
"RTN","DGDEP2",36,0)
 N DGSAVE1,DGSAVE2,DGMTD
"RTN","DGDEP2",37,0)
 I '$G(DGMTI) W !,"Not a means test - use means test options." H 2 G EN2Q
"RTN","DGDEP2",38,0)
 I $G(DGMTACT)="VEW" W !,"Cannot edit when viewing a means test." H 2 G EN2Q
"RTN","DGDEP2",39,0)
 S VALMBCK="",DGSAVE1=VALMBG,DGSAVE2=VALMLST,VALMBG=2
"RTN","DGDEP2",40,0)
 S VALMLST=DGCNT D SEL^VALM2 S VALMBG=DGSAVE1,VALMLST=DGSAVE2 G EN1Q:'$O(VALMY(0))
"RTN","DGDEP2",41,0)
 N CTR S CTR=0 F  S CTR=$O(VALMY(CTR)) Q:'CTR  D
"RTN","DGDEP2",42,0)
 . D REMOVE(DFN,DGDEP(CTR),$G(DGMTI))
"RTN","DGDEP2",43,0)
 S DGMTD=$S($G(DGMTI):$P(^DGMT(408.31,DGMTI,0),U),1:DT)
"RTN","DGDEP2",44,0)
 D ALL^DGMTU21(DFN,"VSC",DGMTD,"IPR",DGMTI)
"RTN","DGDEP2",45,0)
 S DGMTDPCH=1
"RTN","DGDEP2",46,0)
EN2Q S VALMBCK="R" Q
"RTN","DGDEP2",47,0)
 ;
"RTN","DGDEP2",48,0)
REMOVE(DFN,DGDEP,DGMTI) ;Remove
"RTN","DGDEP2",49,0)
 N DA,DR,DIE,DGMTD
"RTN","DGDEP2",50,0)
 I '$G(DGMTI) W !,"Not a means test - use means test options." H 2 G REMOVEQ
"RTN","DGDEP2",51,0)
 I $G(DGMTACT)="VEW" W !,"Cannot edit when viewing a means test." H 2 G EN2Q
"RTN","DGDEP2",52,0)
 S DGMTD=$S($G(DGMTI):$P($G(^DGMT(408.31,DGMTI,0)),U),1:DT)
"RTN","DGDEP2",53,0)
 D GETIENS^DGMTU2(DFN,$P(DGDEP,U,20),DGMTD)
"RTN","DGDEP2",54,0)
 S DA=DGIRI
"RTN","DGDEP2",55,0)
 S DIE="^DGMT(408.22,",DR="31////@"
"RTN","DGDEP2",56,0)
 D ^DIE S DGREMOVE=1
"RTN","DGDEP2",57,0)
 K DGDEP D INIT^DGDEP
"RTN","DGDEP2",58,0)
 S DGMTDPCH=1
"RTN","DGDEP2",59,0)
REMOVEQ K DGREMOVE Q
"RTN","DGDEP2",60,0)
 ;
"RTN","DGDEP2",61,0)
EN3 ; Edit dependent demo
"RTN","DGDEP2",62,0)
 ;
"RTN","DGDEP2",63,0)
 S VALMBCK=""
"RTN","DGDEP2",64,0)
 N DGSAVE1,DGSAVE2,DGMTD,DGBEG,I
"RTN","DGDEP2",65,0)
 I $G(DGMTACT)="VEW" W !,"Cannot edit when viewing a means test." H 2 G EN3Q
"RTN","DGDEP2",66,0)
 I '$D(DGMTI),$G(DGRPV)=1 W !,"Not while viewing" H 2 G EN3Q
"RTN","DGDEP2",67,0)
 S VALMBCK="",DGSAVE1=VALMBG,DGSAVE2=VALMLST,VALMBG=1
"RTN","DGDEP2",68,0)
 S VALMLST=DGCNT D SEL^VALM2 S VALMBG=DGSAVE1,VALMLST=DGSAVE2 G EN1Q:'$O(VALMY(0))
"RTN","DGDEP2",69,0)
 N CTR S CTR=0 F  S CTR=$O(VALMY(CTR)) Q:'CTR  D
"RTN","DGDEP2",70,0)
 . D EDITD(DFN,DGDEP(CTR),CTR,$G(DGMTI))
"RTN","DGDEP2",71,0)
 S VALMBCK="R"
"RTN","DGDEP2",72,0)
 K DGDEP D INIT^DGDEP
"RTN","DGDEP2",73,0)
EN3Q Q
"RTN","DGDEP2",74,0)
 ;
"RTN","DGDEP2",75,0)
EDITD(DFN,DGDEP,DGW,DGMTI) ; Edit
"RTN","DGDEP2",76,0)
 N DA,DR,DIE,DGMTDT,SPOUSE,DGREL,DGDR,CNT,RELATION,MTVER
"RTN","DGDEP2",77,0)
 I $G(DGMTACT)="VEW" W !,"Cannot edit when viewing a means test." H 2 G EDITDQ
"RTN","DGDEP2",78,0)
 W !!,$P(DGDEP,U)
"RTN","DGDEP2",79,0)
 I '$G(DGMTI),$P(DGDEP,U,2)="SELF" D  G EDITDQ
"RTN","DGDEP2",80,0)
 . S DGREL("V")=$P(DGDEP,U,20) D SPOUSE^DGRPEIS2
"RTN","DGDEP2",81,0)
 I '$G(DGMTI) W !,"Can only input information for veteran." H 2 G EN3Q
"RTN","DGDEP2",82,0)
 S DGMTDT=$P(^DGMT(408.31,DGMTI,0),U)
"RTN","DGDEP2",83,0)
 S MTVER=$P($G(^DGMT(408.31,DGMTI,2)),U,11)
"RTN","DGDEP2",84,0)
 I $P(DGDEP,U,2)="SPOUSE" W !,"Married information is entered under the veteran." H 2 G EDITDQ
"RTN","DGDEP2",85,0)
 I $P(DGDEP,U,2)="SELF" D  G EDITDQ
"RTN","DGDEP2",86,0)
 . S DGDR=101
"RTN","DGDEP2",87,0)
 . D GETREL^DGMTU11(DFN,"S",$$LYR^DGMTSCU1($S($G(DGMTDT):DGMTDT,1:DT)))
"RTN","DGDEP2",88,0)
 . D GETIENS^DGMTU2(DFN,DGPRI,DGMTDT) S DGVIRI=DGIRI
"RTN","DGDEP2",89,0)
 . I DGVIRI<0 W !,"No information in Income Relation file." H 2 G EDITDQ
"RTN","DGDEP2",90,0)
 . S DA=DGVIRI,DIE="^DGMT(408.22,",DR="[DGMT ENTER/EDIT MARITAL STATUS]" D ^DIE K DA,DIE,DR
"RTN","DGDEP2",91,0)
 . I $G(DGMTI),$G(DGREL("S")) D
"RTN","DGDEP2",92,0)
 . . S SPOUSE=+DGREL("S")
"RTN","DGDEP2",93,0)
 . . D INIT^DGDEP
"RTN","DGDEP2",94,0)
 . . S CNT=0 F  S CNT=$O(DGDEP(CNT)) Q:'CNT  I $P(DGDEP(CNT),U,20)=SPOUSE D ADD(DFN,DGDEP(CNT),DGMTI)
"RTN","DGDEP2",95,0)
 S RELATION=$O(^DG(408.11,"B",$P(DGDEP,U,2),""))
"RTN","DGDEP2",96,0)
 I '$P(^DG(408.11,+RELATION,0),U,4) W !,"Not applicable for means test" H 2 G EDITDQ
"RTN","DGDEP2",97,0)
 S DGPRI=$P(DGDEP,U,20)
"RTN","DGDEP2",98,0)
 D EDTV1^DGMTSC11(MTVER)
"RTN","DGDEP2",99,0)
 I $G(DGFL)'<0 D ADD(DFN,DGDEP,DGMTI)
"RTN","DGDEP2",100,0)
EDITDQ ;
"RTN","DGDEP2",101,0)
 Q
"RTN","DGDEP3")
0^94^B29628067
"RTN","DGDEP3",1,0)
DGDEP3 ;ALB/CAW,BAJ,ERC - Dependents display ; 11/22/2005
"RTN","DGDEP3",2,0)
 ;;5.3;Registration;**45,624,653,688**;Aug 13, 1993;Build 29
"RTN","DGDEP3",3,0)
 ;
"RTN","DGDEP3",4,0)
SELF(INCPER,NAME,RELATE,ACT,DGMTI,CNT) ; Display information concerning veteran
"RTN","DGDEP3",5,0)
 ;
"RTN","DGDEP3",6,0)
 S DGX="",DGX=$$SETSTR^VALM1(CNT,DGX,3,3)
"RTN","DGDEP3",7,0)
 I $G(DGMTI),INCPER,($P($G(^DGMT(408.22,+INCPER,"MT")),U)=DGMTI) S DGX=$$SETSTR^VALM1("*",DGX,5,1)
"RTN","DGDEP3",8,0)
 S DGX=$$SETSTR^VALM1(NAME,DGX,9,22)
"RTN","DGDEP3",9,0)
 S DGX=$$SETSTR^VALM1($P($G(^DG(408.11,RELATE,0)),U),DGX,32,30)
"RTN","DGDEP3",10,0)
 S DGX=$$SETSTR^VALM1($S($P(ACT,U,2)=1:"*",1:""),DGX,65,1)
"RTN","DGDEP3",11,0)
 S:RELATE=2 DGX=$$SETSTR^VALM1($S(+$$ADDCHK(INCPER)=1:"*",1:""),DGX,73,1)
"RTN","DGDEP3",12,0)
 D SET^DGDEP(DGX)
"RTN","DGDEP3",13,0)
 ;
"RTN","DGDEP3",14,0)
 ; Display spouse SSN and SSN Verification status DG*5.3*688 BAJ 11/22/2005
"RTN","DGDEP3",15,0)
 I RELATE=2 D
"RTN","DGDEP3",16,0)
 . S DGX="",DGX=$$SETSTR^VALM1($P(DGDEP,"^",5),DGX,9,14)
"RTN","DGDEP3",17,0)
 . S DGX=$$SETSTR^VALM1($P(DGDEP,"^",9),DGX,23,10)
"RTN","DGDEP3",18,0)
 . ;if a Pseudo SSN need Pseudo SSN Reason - DG*5.3*653, ERC
"RTN","DGDEP3",19,0)
 . I $P(DGDEP,U,5)["P" D
"RTN","DGDEP3",20,0)
 . . S DGX=$$SETSTR^VALM1("PSSN Reason: ",DGX,32,15)
"RTN","DGDEP3",21,0)
 . . S DGX=$$SETSTR^VALM1($P(DGDEP,U,10),DGX,45,30)
"RTN","DGDEP3",22,0)
 . . ;D SET^DGDEP(DGX)
"RTN","DGDEP3",23,0)
 . D SET^DGDEP(DGX)
"RTN","DGDEP3",24,0)
 ;
"RTN","DGDEP3",25,0)
 Q:RELATE=2
"RTN","DGDEP3",26,0)
 S INCPER=^DGMT(408.22,INCPER,0)
"RTN","DGDEP3",27,0)
 S DGX="",DGX=$$SETSTR^VALM1("Married Last Year: ",DGX,18,19)
"RTN","DGDEP3",28,0)
 S DGX=$$SETSTR^VALM1($S($P(INCPER,U,5):"Yes",$P(INCPER,U,5)="":"Unanswered",1:"No"),DGX,38,10)
"RTN","DGDEP3",29,0)
 D SET^DGDEP(DGX)
"RTN","DGDEP3",30,0)
 ;
"RTN","DGDEP3",31,0)
 Q:'$G(DGMTI)
"RTN","DGDEP3",32,0)
 I $P(INCPER,U,5)=1 D
"RTN","DGDEP3",33,0)
 . S DGX="",DGX=$$SETSTR^VALM1("Lived with Spouse: ",DGX,18,19)
"RTN","DGDEP3",34,0)
 . S DGX=$$SETSTR^VALM1($S($P(INCPER,U,6):"Yes",$P(INCPER,U,6)="":"Unanswered",1:"No"),DGX,38,10)
"RTN","DGDEP3",35,0)
 . D SET^DGDEP(DGX)
"RTN","DGDEP3",36,0)
 ;
"RTN","DGDEP3",37,0)
 I $P(INCPER,U,6)=0 D
"RTN","DGDEP3",38,0)
 . S DGX="",DGX=$$SETSTR^VALM1("Amount Contributed: ",DGX,17,19)
"RTN","DGDEP3",39,0)
 . S DGX=$$SETSTR^VALM1($S($P(INCPER,U,7)]"":$P(INCPER,U,7),1:"Unanswered"),DGX,38,10)
"RTN","DGDEP3",40,0)
 . D SET^DGDEP(DGX)
"RTN","DGDEP3",41,0)
 Q
"RTN","DGDEP3",42,0)
 ;
"RTN","DGDEP3",43,0)
CHILD(INCPER,NAME,RELATE,ACT,DGMTI,DGMTACT,CNT) ; Display information concerning dependents
"RTN","DGDEP3",44,0)
 ;
"RTN","DGDEP3",45,0)
 ;** DG*5.3*688 - GTS Get MT Version
"RTN","DGDEP3",46,0)
 N MTVER
"RTN","DGDEP3",47,0)
 S:(+$G(DGMTI)>0) MTVER=$P($G(^DGMT(408.31,DGMTI,2)),"^",11)
"RTN","DGDEP3",48,0)
 I (+$G(DGMTI)'>0) DO
"RTN","DGDEP3",49,0)
 . N DGINC,DGREL,DGINR,DGDEP
"RTN","DGDEP3",50,0)
 . D ALL^DGMTU21(DFN,"VSD",DT,"I")
"RTN","DGDEP3",51,0)
 . S MTVER=$$VER^DGMTUTL3(.DGINC)
"RTN","DGDEP3",52,0)
 S DGX="",DGX=$$SETSTR^VALM1(CNT,DGX,3,3)
"RTN","DGDEP3",53,0)
 I $G(DGMTI),INCPER,($P($G(^DGMT(408.22,+INCPER,"MT")),U)=DGMTI) S DGX=$$SETSTR^VALM1("*",DGX,5,1)
"RTN","DGDEP3",54,0)
 S DGX=$$SETSTR^VALM1(NAME,DGX,9,22)
"RTN","DGDEP3",55,0)
 S DGX=$$SETSTR^VALM1($P($G(^DG(408.11,RELATE,0)),U),DGX,32,30)
"RTN","DGDEP3",56,0)
 S DGX=$$SETSTR^VALM1($S($P(ACT,U,2)=1:"*",1:""),DGX,65,1)
"RTN","DGDEP3",57,0)
 S DGX=$$SETSTR^VALM1($S(+$$ADDCHK(INCPER)=1:"*",1:""),DGX,73,1)
"RTN","DGDEP3",58,0)
 D SET^DGDEP(DGX)
"RTN","DGDEP3",59,0)
 ;
"RTN","DGDEP3",60,0)
 ;display dependent SSN and SSN Verification status DG*5.3*688 BAJ 11/22/2005
"RTN","DGDEP3",61,0)
 S DGX="",DGX=$$SETSTR^VALM1($P(DGDEP,"^",5),DGX,9,14)
"RTN","DGDEP3",62,0)
 S DGX=$$SETSTR^VALM1($P(DGDEP,"^",9),DGX,23,10)
"RTN","DGDEP3",63,0)
 I $P(DGDEP,U,5)["P" D
"RTN","DGDEP3",64,0)
 . S DGX=$$SETSTR^VALM1("PSSN Reason: ",DGX,32,15)
"RTN","DGDEP3",65,0)
 . S DGX=$$SETSTR^VALM1($P(DGDEP,U,10),DGX,45,30)
"RTN","DGDEP3",66,0)
 D SET^DGDEP(DGX)
"RTN","DGDEP3",67,0)
 ;
"RTN","DGDEP3",68,0)
 Q:'$G(DGMTI)!('$P($G(^DG(408.11,RELATE,0)),U,4))
"RTN","DGDEP3",69,0)
 S INCPER=^DGMT(408.22,INCPER,0)
"RTN","DGDEP3",70,0)
 S DGX="",DGX=$$SETSTR^VALM1("Incapable of Self-support: ",DGX,10,27)
"RTN","DGDEP3",71,0)
 S DGX=$$SETSTR^VALM1($S($P(INCPER,U,9):"Yes",$P(INCPER,U,9)="":"Unanswered",1:"No"),DGX,38,10)
"RTN","DGDEP3",72,0)
 D SET^DGDEP(DGX)
"RTN","DGDEP3",73,0)
 ;
"RTN","DGDEP3",74,0)
 ;* DG*5.3*624
"RTN","DGDEP3",75,0)
 S DGX="",DGX=$$SETSTR^VALM1("Child 18 to 23. Attended School: ",DGX,4,33)
"RTN","DGDEP3",76,0)
 S DGX=$$SETSTR^VALM1($S($P(INCPER,U,18):"Yes",$P(INCPER,U,18)="":"Unanswered",1:"No"),DGX,38,10)
"RTN","DGDEP3",77,0)
 D SET^DGDEP(DGX)
"RTN","DGDEP3",78,0)
 ;
"RTN","DGDEP3",79,0)
 S DGX="",DGX=$$SETSTR^VALM1("Child lived with you: ",DGX,15,22)
"RTN","DGDEP3",80,0)
 S DGX=$$SETSTR^VALM1($S($P(INCPER,U,6):"Yes",$P(INCPER,U,6)="":"Unanswered",1:"No"),DGX,38,10)
"RTN","DGDEP3",81,0)
 D SET^DGDEP(DGX)
"RTN","DGDEP3",82,0)
 ;
"RTN","DGDEP3",83,0)
 S DGX="",DGX=$$SETSTR^VALM1("Child Support: ",DGX,22,15)
"RTN","DGDEP3",84,0)
 S DGX=$$SETSTR^VALM1($S($P(INCPER,U,6)=1:"N/A",$P(INCPER,U,10)=1:"Yes",$P(INCPER,U,10)="":"Unanswered",1:"No"),DGX,38,10)
"RTN","DGDEP3",85,0)
 D SET^DGDEP(DGX)
"RTN","DGDEP3",86,0)
 ;
"RTN","DGDEP3",87,0)
 ;* DG*5.3*624
"RTN","DGDEP3",88,0)
 S DGX="",DGX=$$SETSTR^VALM1("Amount contributed: ",DGX,17,20)
"RTN","DGDEP3",89,0)
 S DGX=$$SETSTR^VALM1($S($P(INCPER,U,10)'=1:"N/A",($P(INCPER,U,19)'="0")&($P(INCPER,U,19)'=""):$P(INCPER,U,19),$P(INCPER,U,19)="":"Unanswered",1:"0"),DGX,38,10)
"RTN","DGDEP3",90,0)
 D SET^DGDEP(DGX)
"RTN","DGDEP3",91,0)
 ;
"RTN","DGDEP3",92,0)
 ;** DG*5.3*688 - GTS Chk MT Version and output correct data
"RTN","DGDEP3",93,0)
 S DGX=""
"RTN","DGDEP3",94,0)
 S:(+MTVER<1) DGX=$$SETSTR^VALM1("Child Has Income: ",DGX,19,18)
"RTN","DGDEP3",95,0)
 S:(+MTVER=1) DGX=$$SETSTR^VALM1("Child Has Income/Net Worth: ",DGX,9,28)
"RTN","DGDEP3",96,0)
 S DGX=$$SETSTR^VALM1($S($P(INCPER,U,11)=1:"Yes",$P(INCPER,U,11)="":"Unanswered",1:"No"),DGX,38,10)
"RTN","DGDEP3",97,0)
 D SET^DGDEP(DGX)
"RTN","DGDEP3",98,0)
 ;
"RTN","DGDEP3",99,0)
 ;** DG*5.3*688 - GTS Chk MT Version and output correct data
"RTN","DGDEP3",100,0)
 S DGX=""
"RTN","DGDEP3",101,0)
 S:(+MTVER<1) DGX=$$SETSTR^VALM1("Income Available: ",DGX,19,18)
"RTN","DGDEP3",102,0)
 S:(+MTVER=1) DGX=$$SETSTR^VALM1("Income/Net Worth Available: ",DGX,9,28)
"RTN","DGDEP3",103,0)
 S DGX=$$SETSTR^VALM1($S($P(INCPER,U,11)=0:"N/A",$P(INCPER,U,12)=1:"Yes",$P(INCPER,U,12)="":"Unanswered",1:"No"),DGX,38,10)
"RTN","DGDEP3",104,0)
 D SET^DGDEP(DGX)
"RTN","DGDEP3",105,0)
CHILDQ Q
"RTN","DGDEP3",106,0)
 ;
"RTN","DGDEP3",107,0)
ADDCHK(INCPER) ; Indicates existence of any dependent address
"RTN","DGDEP3",108,0)
 ; Input:
"RTN","DGDEP3",109,0)
 ;      INCPER - Pointer to dep. entry in Income Relation file (408.22)
"RTN","DGDEP3",110,0)
 ;
"RTN","DGDEP3",111,0)
 ; Output: 
"RTN","DGDEP3",112,0)
 ;   both address and phone^address^phone
"RTN","DGDEP3",113,0)
 ;      KEY:
"RTN","DGDEP3",114,0)
 ;        0 - No data exists for the dependent in 408.13
"RTN","DGDEP3",115,0)
 ;        1 - Data exists for the dependent in 408.13
"RTN","DGDEP3",116,0)
 ;
"RTN","DGDEP3",117,0)
 ;    1^1^1 - Address and Phone data exist for dependent
"RTN","DGDEP3",118,0)
 ;    0^1^0 - Address only exists for dependent
"RTN","DGDEP3",119,0)
 ;    0^0^1 - Phone only exists for dependent
"RTN","DGDEP3",120,0)
 ;    0^0^0 - Neither Phone nor Address data exists for dependent
"RTN","DGDEP3",121,0)
 ;
"RTN","DGDEP3",122,0)
 N ADDCKVAL,INDAIIEN,PRIEN,IPIEN
"RTN","DGDEP3",123,0)
 S ADDCKVAL="0^0^0"
"RTN","DGDEP3",124,0)
 S INDAIIEN=$P($G(^DGMT(408.22,INCPER,0)),"^",2)
"RTN","DGDEP3",125,0)
 S PRIEN=$P($G(^DGMT(408.21,INDAIIEN,0)),"^",2)
"RTN","DGDEP3",126,0)
 S IPIEN=$P($G(^DGPR(408.12,PRIEN,0)),"^",3)
"RTN","DGDEP3",127,0)
 I IPIEN["DGPR(408.13" DO
"RTN","DGDEP3",128,0)
 . S IPIEN=$P(IPIEN,";",1)
"RTN","DGDEP3",129,0)
 . I $P($G(^DGPR(408.13,IPIEN,1)),"^",2)]"" S $P(ADDCKVAL,U,1,2)="1^1"
"RTN","DGDEP3",130,0)
 . I $P($G(^DGPR(408.13,IPIEN,1)),"^",3)]"" S $P(ADDCKVAL,U,1,2)="1^1"
"RTN","DGDEP3",131,0)
 . I $P($G(^DGPR(408.13,IPIEN,1)),"^",4)]"" S $P(ADDCKVAL,U,1,2)="1^1"
"RTN","DGDEP3",132,0)
 . I $P($G(^DGPR(408.13,IPIEN,1)),"^",5)]"" S $P(ADDCKVAL,U,1,2)="1^1"
"RTN","DGDEP3",133,0)
 . I $P($G(^DGPR(408.13,IPIEN,1)),"^",6)]"" S $P(ADDCKVAL,U,1,2)="1^1"
"RTN","DGDEP3",134,0)
 . I $P($G(^DGPR(408.13,IPIEN,1)),"^",7)]"" S $P(ADDCKVAL,U,1,2)="1^1"
"RTN","DGDEP3",135,0)
 . I $P($G(^DGPR(408.13,IPIEN,1)),"^",8)]"" S $P(ADDCKVAL,U,3)="1"
"RTN","DGDEP3",136,0)
 Q ADDCKVAL
"RTN","DGDEP4")
0^95^B15620254
"RTN","DGDEP4",1,0)
DGDEP4 ;ALB/CAW - Dependents Utilities (con't) ;12/1/94
"RTN","DGDEP4",2,0)
 ;;5.3;Registration;**45,688**;Aug 13, 1993;Build 29
"RTN","DGDEP4",3,0)
 ;
"RTN","DGDEP4",4,0)
EN ; Spouse Demographics
"RTN","DGDEP4",5,0)
 N BEG,CNT,END,FLAG,QUIT,DGERR S CNT=0
"RTN","DGDEP4",6,0)
 I $G(DGMTI),$G(DGMTACT)="VEW" W !,"Cannot edit when viewing a means test." H 2 G ENQ
"RTN","DGDEP4",7,0)
 I '$D(DGMTI),$G(DGRPV)=1 W !,"Not while viewing" H 2 G ENQ
"RTN","DGDEP4",8,0)
 F  S CNT=$O(DGDEP(CNT)) Q:'CNT  D
"RTN","DGDEP4",9,0)
 .I $P(DGDEP(CNT),U,2)="SPOUSE" S FLAG=$G(FLAG)+1
"RTN","DGDEP4",10,0)
 I '$G(FLAG) W !,"There is no spouse to choose from." H 2 G ENQ
"RTN","DGDEP4",11,0)
 I $G(FLAG)>1 D  G:'$G(DGERR) EN1
"RTN","DGDEP4",12,0)
 .S BEG=2,END=FLAG+1 D SEL^DGDEPU Q:$G(DGERR)
"RTN","DGDEP4",13,0)
 .S DGREL("S")=$P(DGDEP(DGW),U,20)_U_$P(^DGPR(408.12,+$P(DGDEP(DGW),U,20),0),U,3)
"RTN","DGDEP4",14,0)
 I $G(DGERR) G ENQ
"RTN","DGDEP4",15,0)
 I '$G(DGREL("S")) S DGREL("S")=$P(DGDEP(2),U,20)_U_$P(^DGPR(408.12,+$P(DGDEP(2),U,20),0),U,3)
"RTN","DGDEP4",16,0)
EN1 S DGPRI=$P(DGDEP(1),U,20),DGIRI=$P(DGDEP(1),U,22) D SPOUSE1^DGMTSC1
"RTN","DGDEP4",17,0)
ENQ D INIT^DGDEP
"RTN","DGDEP4",18,0)
 Q
"RTN","DGDEP4",19,0)
 ;
"RTN","DGDEP4",20,0)
ADDEP ; Add a new dependent
"RTN","DGDEP4",21,0)
 ;
"RTN","DGDEP4",22,0)
 N DGANS
"RTN","DGDEP4",23,0)
 S VALMBCK=""
"RTN","DGDEP4",24,0)
 I $G(DGMTI),$G(DGMTACT)="VEW" W !,"Cannot edit when viewing a means test." H 2 G ADDEPQ
"RTN","DGDEP4",25,0)
 I '$D(DGMTI),$G(DGRPV)=1 W !,"Not while viewing" H 2 G ADDEPQ
"RTN","DGDEP4",26,0)
 S DIR(0)="S^S:Spouse;D:Dependent",DIR("A")="Do you want to add (S)pouse or (D)ependent"
"RTN","DGDEP4",27,0)
 D ^DIR S DGANS=Y K DIR,Y I DGANS="D",$G(DGMTI) S DGANS="C"
"RTN","DGDEP4",28,0)
 I $D(DIRUT) G ADDEPQ
"RTN","DGDEP4",29,0)
 D GETREL^DGMTU11(DFN,"S",$S($G(DGMTD):DGMTD,1:DT))
"RTN","DGDEP4",30,0)
 I DGANS="S",$G(DGREL("S")) W !,"An active spouse is currently on file.  Use the 'ES - Edit Spouse'",!,"action to edit." H 3 G ADDEPQ
"RTN","DGDEP4",31,0)
 I DGANS="S",$G(DGMTI) S CNT=0 F  S CNT=$O(DGDEP(CNT)) Q:'CNT  I $P(DGDEP(CNT),U,2)="SPOUSE" D REMOVE^DGDEP2(DFN,DGDEP(CNT),DGMTI)
"RTN","DGDEP4",32,0)
 D GETREL^DGMTU11(DFN,"C",$S($G(DGMTD):DGMTD,1:DT))
"RTN","DGDEP4",33,0)
 I ((DGANS="C")!(DGANS="D")),(+$$CNTDEPS^DGMTU11(DFN)>18) DO
"RTN","DGDEP4",34,0)
 . W !,"The addition of another dependent child can not be completed."
"RTN","DGDEP4",35,0)
 . W !,"Nineteen (19) dependent children are already associated to the veteran."
"RTN","DGDEP4",36,0)
 I ((DGANS="C")!(DGANS="D")),(+$$CNTDEPS^DGMTU11(DFN)>18) H 3 G:(DGANS="C") ADDEPQ
"RTN","DGDEP4",37,0)
 D CLEAR^VALM1
"RTN","DGDEP4",38,0)
 D ADD^DGRPEIS(DFN,DGANS,$S($G(DGMTI):$P(^DGMT(408.31,DGMTI,0),U),1:DT),DGDEP)
"RTN","DGDEP4",39,0)
 S PERSON=DGPRI
"RTN","DGDEP4",40,0)
 I DGFL=-1!(DGFL=-2) G ADDEPQ
"RTN","DGDEP4",41,0)
 D INIT^DGDEP
"RTN","DGDEP4",42,0)
 I $G(DGMTI) D
"RTN","DGDEP4",43,0)
 .N CNT
"RTN","DGDEP4",44,0)
 .S CNT=0
"RTN","DGDEP4",45,0)
 .F  S CNT=$O(DGDEP(CNT)) Q:'CNT  I $P(DGDEP(CNT),U,20)=PERSON D
"RTN","DGDEP4",46,0)
 ..D ADD^DGDEP2(DFN,DGDEP(CNT),DGMTI)
"RTN","DGDEP4",47,0)
 ..D EDITD^DGDEP2(DFN,DGDEP(CNT),CNT,DGMTI)
"RTN","DGDEP4",48,0)
ADDEPQ S VALMBCK="R"
"RTN","DGDEP4",49,0)
 D INIT^DGDEP
"RTN","DGDEP4",50,0)
 K DGFL Q
"RTN","DGDEP4",51,0)
 ;
"RTN","DGDEP4",52,0)
EDITDEP ; Edit dependent demo
"RTN","DGDEP4",53,0)
 ;
"RTN","DGDEP4",54,0)
 S VALMBCK=""
"RTN","DGDEP4",55,0)
 N DGSAVE1,DGSAVE2,DGMTD,DGBEG,I
"RTN","DGDEP4",56,0)
 I $G(DGMTI),$G(DGMTACT)="VEW" W !,"Cannot edit when viewing a means test." H 2 G EDITDEPQ
"RTN","DGDEP4",57,0)
 I '$D(DGMTI),$G(DGRPV)=1 W !,"Not while viewing" H 2 G EDITDEPQ
"RTN","DGDEP4",58,0)
 S I=0 F  S I=$O(DGDEP(I)) Q:'I!($G(DGBEG))  I $P(DGDEP(I),U,2)'="SELF",$P(DGDEP(I),U,2)'="SPOUSE" S DGBEG=I
"RTN","DGDEP4",59,0)
 S VALMBCK="",DGSAVE1=VALMBG,DGSAVE2=VALMLST,VALMBG=$S($G(DGBEG):DGBEG,1:0)
"RTN","DGDEP4",60,0)
 S VALMLST=DGCNT D SEL^VALM2 S VALMBG=DGSAVE1,VALMLST=DGSAVE2 G EDITDEPQ:'$O(VALMY(0))
"RTN","DGDEP4",61,0)
 N CTR S CTR=0 F  S CTR=$O(VALMY(CTR)) Q:'CTR  D
"RTN","DGDEP4",62,0)
 .D EDITC(DFN,DGDEP(CTR),CTR,$G(DGMTI))
"RTN","DGDEP4",63,0)
EDITDEPQ S VALMBCK="R"
"RTN","DGDEP4",64,0)
 K DGDEP D INIT^DGDEP
"RTN","DGDEP4",65,0)
 Q
"RTN","DGDEP4",66,0)
 ;
"RTN","DGDEP4",67,0)
EDITC(DFN,DGDEP,DGW,DGMTI) ; Edit
"RTN","DGDEP4",68,0)
 N DA,DR,DIE,DGMTDT,DEP,DGSAVE
"RTN","DGDEP4",69,0)
 S DGMTDT=$S($G(DGMTI):$P(^DGMT(408.31,+DGMTI,0),U),1:DT)
"RTN","DGDEP4",70,0)
 I $G(DGMTI),$G(DGMTACT)="VEW" W !,"Cannot edit when viewing a means test." H 2 G EDITCQ
"RTN","DGDEP4",71,0)
 S DEP=$S($G(DGMTI):"C",1:"D"),DGSAVE=DGDEP
"RTN","DGDEP4",72,0)
 D GETREL^DGMTU11(DFN,DEP,$$LYR^DGMTSCU1($S($G(DGMTDT):DGMTDT,1:DT)),$G(DGMTI))
"RTN","DGDEP4",73,0)
 S DGDEP=DGSAVE
"RTN","DGDEP4",74,0)
 N CNTR
"RTN","DGDEP4",75,0)
 S CNTR=0
"RTN","DGDEP4",76,0)
 F  S CNTR=$O(DGREL(DEP,CNTR)) Q:'CNTR  I $P(DGDEP,U,20)=+DGREL(DEP,CNTR) D
"RTN","DGDEP4",77,0)
 .D EDIT^DGRPEIS(DGREL(DEP,CNTR),DEP)
"RTN","DGDEP4",78,0)
EDITCQ ;
"RTN","DGDEP4",79,0)
 K ^TMP("DGMTEP",$J)
"RTN","DGDEP4",80,0)
 Q
"RTN","DGENA")
0^82^B20066908
"RTN","DGENA",1,0)
DGENA ;ALB/CJM,ISA/KWP,Zoltan,LBD,CKN,EG,ERC - Enrollment API - Retrieve Data ; 8/15/08 11:08am
"RTN","DGENA",2,0)
 ;;5.3;Registration;**121,122,147,232,314,564,672,659,653,688**;Aug 13, 1993;Build 29
"RTN","DGENA",3,0)
 ;
"RTN","DGENA",4,0)
FINDCUR(DFN) ;
"RTN","DGENA",5,0)
 ;Description: Used to find a patients current enrollment.
"RTN","DGENA",6,0)
 ;Input :
"RTN","DGENA",7,0)
 ;  DFN - Patient IEN
"RTN","DGENA",8,0)
 ;Output:
"RTN","DGENA",9,0)
 ;  Function Value - returns the internal entry number of the patient's
"RTN","DGENA",10,0)
 ;     current enrollment if there is one, NULL otherwise. Checks that
"RTN","DGENA",11,0)
 ;     current enrollment actually belongs to the patient.
"RTN","DGENA",12,0)
 ;
"RTN","DGENA",13,0)
 Q:'$G(DFN) ""
"RTN","DGENA",14,0)
 ;
"RTN","DGENA",15,0)
 N CUR
"RTN","DGENA",16,0)
 S CUR=$P($G(^DPT(DFN,"ENR")),"^")
"RTN","DGENA",17,0)
 I CUR,$P($G(^DGEN(27.11,CUR,0)),"^",2)'=DFN S CUR=""
"RTN","DGENA",18,0)
 Q CUR
"RTN","DGENA",19,0)
 ;
"RTN","DGENA",20,0)
FINDPRI(DGENRIEN) ;
"RTN","DGENA",21,0)
 ;Description: Used to obtain a patient's  enrollment record that was
"RTN","DGENA",22,0)
 ;     prior to the enrollment identified by DGENRIEN.
"RTN","DGENA",23,0)
 ;Input :
"RTN","DGENA",24,0)
 ;  DGENRIEN - this is the internal entry number of a PATIENT ENROLLMENT
"RTN","DGENA",25,0)
 ;     record
"RTN","DGENA",26,0)
 ;Output:
"RTN","DGENA",27,0)
 ;  Function Value - returns the internal entry number of the prior
"RTN","DGENA",28,0)
 ;     enrollment for the patient if there is one, NULL otherwise.
"RTN","DGENA",29,0)
 ;
"RTN","DGENA",30,0)
 Q:'$G(DGENRIEN) ""
"RTN","DGENA",31,0)
 Q $P($G(^DGEN(27.11,DGENRIEN,0)),"^",9)
"RTN","DGENA",32,0)
 ;
"RTN","DGENA",33,0)
ENROLLED(DFN) ;
"RTN","DGENA",34,0)
 ;Description: Returns whether the patient is currently enrolled.
"RTN","DGENA",35,0)
 ;Input:
"RTN","DGENA",36,0)
 ;  DFN - Patient IEN
"RTN","DGENA",37,0)
 ;Output:
"RTN","DGENA",38,0)
 ;  Function Value - returns 1 if the patient is currently enrolled with
"RTN","DGENA",39,0)
 ;     a status of VERIFIED, 0 otherwise
"RTN","DGENA",40,0)
 ;
"RTN","DGENA",41,0)
 N STATUS
"RTN","DGENA",42,0)
 S STATUS=$$STATUS($G(DFN))
"RTN","DGENA",43,0)
 I (STATUS=2) Q 1
"RTN","DGENA",44,0)
 Q 0
"RTN","DGENA",45,0)
 ;
"RTN","DGENA",46,0)
STATUS(DFN) ;
"RTN","DGENA",47,0)
 ;Description: Returns ENROLLMENT STATUS from the patient's current
"RTN","DGENA",48,0)
 ;     enrollment.
"RTN","DGENA",49,0)
 ;Input:
"RTN","DGENA",50,0)
 ;  DFN -  Patient IEN
"RTN","DGENA",51,0)
 ;Output:
"RTN","DGENA",52,0)
 ;  Function Value - If the patient has a current ENROLLMENT STATUS this
"RTN","DGENA",53,0)
 ;     function will return its value, otherwise it returns NULL.
"RTN","DGENA",54,0)
 N DGENRIEN
"RTN","DGENA",55,0)
 S DGENRIEN=$$FINDCUR($G(DFN))
"RTN","DGENA",56,0)
 Q:'DGENRIEN ""
"RTN","DGENA",57,0)
 Q $P($G(^DGEN(27.11,DGENRIEN,0)),"^",4)
"RTN","DGENA",58,0)
 ;
"RTN","DGENA",59,0)
PRIORITY(DFN) ;
"RTN","DGENA",60,0)
 ;Description: Returns ENROLLMENT PRIORITY from the patient's current
"RTN","DGENA",61,0)
 ;     enrollment.
"RTN","DGENA",62,0)
 ;Input:
"RTN","DGENA",63,0)
 ;  DFN -  Patient IEN
"RTN","DGENA",64,0)
 ;Output:
"RTN","DGENA",65,0)
 ;  Function Value - If the patient has a current ENROLLMENT PRIORITY
"RTN","DGENA",66,0)
 ;     this function will return its value, otherwise it returns NULL.
"RTN","DGENA",67,0)
 N DGENRIEN
"RTN","DGENA",68,0)
 S DGENRIEN=$$FINDCUR($G(DFN))
"RTN","DGENA",69,0)
 Q:'DGENRIEN ""
"RTN","DGENA",70,0)
 Q $P($G(^DGEN(27.11,DGENRIEN,0)),"^",7)
"RTN","DGENA",71,0)
 ;
"RTN","DGENA",72,0)
SOURCE(DFN) ;
"RTN","DGENA",73,0)
 ;Description: Returns SOURCE OF ENROLLMENT from the patient's current
"RTN","DGENA",74,0)
 ;     enrollment.
"RTN","DGENA",75,0)
 ;Input:
"RTN","DGENA",76,0)
 ;  DFN -  Patient IEN
"RTN","DGENA",77,0)
 ;Output:
"RTN","DGENA",78,0)
 ;  Function Value - If the patient has a current ENROLLMENT 
"RTN","DGENA",79,0)
 ;     this function will return the SOURCE OF ENROLLMENT, otherwise
"RTN","DGENA",80,0)
 ;     it returns NULL.
"RTN","DGENA",81,0)
 ;
"RTN","DGENA",82,0)
 N DGENRIEN
"RTN","DGENA",83,0)
 S DGENRIEN=$$FINDCUR($G(DFN))
"RTN","DGENA",84,0)
 Q:'DGENRIEN ""
"RTN","DGENA",85,0)
 Q $P($G(^DGEN(27.11,DGENRIEN,0)),"^",3)
"RTN","DGENA",86,0)
 ;
"RTN","DGENA",87,0)
GET(DGENRIEN,DGENR) ;
"RTN","DGENA",88,0)
 ;Description: Used to obtain a record from the Patient Enrollment file
"RTN","DGENA",89,0)
 ;     into the local DGENR array.
"RTN","DGENA",90,0)
 ;Input :
"RTN","DGENA",91,0)
 ;  DGENRIEN - this is the internal entry number of a PATIENT ENROLLMENT record
"RTN","DGENA",92,0)
 ;Output:
"RTN","DGENA",93,0)
 ;  Function  Value - returns 1 on success, 0 on failure.
"RTN","DGENA",94,0)
 ;  DGENR - this is the name of  a local array, it should be passed by
"RTN","DGENA",95,0)
 ;     reference. If the function is successful this array will
"RTN","DGENA",96,0)
 ;     contain the enrollment.
"RTN","DGENA",97,0)
 ;
"RTN","DGENA",98,0)
 ;      subscript      field name
"RTN","DGENA",99,0)
 ;     "APP"           Enrollment Applicaiton Date
"RTN","DGENA",100,0)
 ;     "DATE"          Enrollment Date
"RTN","DGENA",101,0)
 ;     "END"          Enrollment End Date
"RTN","DGENA",102,0)
 ;     "DFN"           Patient IEN
"RTN","DGENA",103,0)
 ;     "SOURCE"        Enrollment Source
"RTN","DGENA",104,0)
 ;     "STATUS"        Enrollment Status
"RTN","DGENA",105,0)
 ;     "REASON"        Reason Canceled/Declined
"RTN","DGENA",106,0)
 ;     "REMARKS"       Canceled/Declined Remarks
"RTN","DGENA",107,0)
 ;     "FACREC"        Facility Received
"RTN","DGENA",108,0)
 ;     "PRIORITY"      Enrollment Priority
"RTN","DGENA",109,0)
 ;     "SUBGRP"        Enrollment Sub-Group
"RTN","DGENA",110,0)
 ;     "EFFDATE"       Effective Date
"RTN","DGENA",111,0)
 ;     "PRIORREC"      Prior Enrollment Record
"RTN","DGENA",112,0)
 ;     "ELIG","CODE"            Primary Eligibility Code
"RTN","DGENA",113,0)
 ;     "ELIG","CODE",<code ien> Eligibility Codes
"RTN","DGENA",114,0)
 ;     "ELIG","SC"              Service Connected
"RTN","DGENA",115,0)
 ;     "ELIG","SCPER"           Service Connected Percentage
"RTN","DGENA",116,0)
 ;     "ELIG","POW"             POW Status Indicated
"RTN","DGENA",117,0)
 ;     "ELIG","A&A"             Receiving A&A Benefits
"RTN","DGENA",118,0)
 ;     "ELIG","HB"              Receiving Housebound Benefits
"RTN","DGENA",119,0)
 ;     "ELIG","VAPEN"           Receiving a VA Pension
"RTN","DGENA",120,0)
 ;     "ELIG","VACKAMT"         Total Annual VA Check Amount
"RTN","DGENA",121,0)
 ;     "ELIG","DISRET"          Military Disability Retirement
"RTN","DGENA",122,0)
 ;     "ELIG","DISLOD"          Discharged Due to Disability
"RTN","DGENA",123,0)
 ;     "ELIG","MEDICAID"        Medicaid
"RTN","DGENA",124,0)
 ;     "ELIG","AO"              Exposed to Agent Orange
"RTN","DGENA",125,0)
 ;     "ELIG","AOEXPLOC"        Agent Orange Exposure Location
"RTN","DGENA",126,0)
 ;     "ELIG","IR"              Radiation Exposure Indicated
"RTN","DGENA",127,0)
 ;     "ELIG","RADEXPM"         Radiation Exposure Method
"RTN","DGENA",128,0)
 ;     "ELIG","EC"              SW Asia Cond - was Env Con, DG*5.3*688
"RTN","DGENA",129,0)
 ;     "ELIG","MTSTA"           Means Test Status
"RTN","DGENA",130,0)
 ;     "ELIG","VCD"             Veteran Catastrophically Disabled?
"RTN","DGENA",131,0)
 ;     "ELIG","PH"              Purple Heart Indicated?
"RTN","DGENA",132,0)
 ;     "ELIG","UNEMPLOY"        Unemployable
"RTN","DGENA",133,0)
 ;     "ELIG","CVELEDT"         Combat Veteran End Date
"RTN","DGENA",134,0)
 ;     "ELIG","SHAD"            SHAD Indicated
"RTN","DGENA",135,0)
 ;     "DATETIME"      Date/Time Entered
"RTN","DGENA",136,0)
 ;     "USER"          Entered By
"RTN","DGENA",137,0)
 ;    
"RTN","DGENA",138,0)
 N SUB,NODE
"RTN","DGENA",139,0)
 I '$G(DGENRIEN) Q 0
"RTN","DGENA",140,0)
 I '$D(^DGEN(27.11,DGENRIEN,0)) Q 0
"RTN","DGENA",141,0)
 K DGENR
"RTN","DGENA",142,0)
 S DGENR=""
"RTN","DGENA",143,0)
 S NODE=$G(^DGEN(27.11,DGENRIEN,0))
"RTN","DGENA",144,0)
 S DGENR("APP")=$P(NODE,"^")
"RTN","DGENA",145,0)
 S DGENR("DATE")=$P(NODE,"^",10)
"RTN","DGENA",146,0)
 S DGENR("END")=$P(NODE,"^",11)
"RTN","DGENA",147,0)
 S DGENR("DFN")=$P(NODE,"^",2)
"RTN","DGENA",148,0)
 S DGENR("SOURCE")=$P(NODE,"^",3)
"RTN","DGENA",149,0)
 S DGENR("STATUS")=$P(NODE,"^",4)
"RTN","DGENA",150,0)
 S DGENR("REASON")=$P(NODE,"^",5)
"RTN","DGENA",151,0)
 S DGENR("FACREC")=$P(NODE,"^",6)
"RTN","DGENA",152,0)
 S DGENR("PRIORITY")=$P(NODE,"^",7)
"RTN","DGENA",153,0)
 S DGENR("EFFDATE")=$P(NODE,"^",8)
"RTN","DGENA",154,0)
 S DGENR("PRIORREC")=$P(NODE,"^",9)
"RTN","DGENA",155,0)
 ;Phase II Get enrollment sub-grp (SRS 6.4)
"RTN","DGENA",156,0)
 S DGENR("SUBGRP")=$P(NODE,"^",12)
"RTN","DGENA",157,0)
 S NODE=$G(^DGEN(27.11,DGENRIEN,"R"))
"RTN","DGENA",158,0)
 S DGENR("REMARKS")=$P(NODE,"^")
"RTN","DGENA",159,0)
 S NODE=$G(^DGEN(27.11,DGENRIEN,"E"))
"RTN","DGENA",160,0)
 S DGENR("ELIG","CODE")=$P(NODE,"^")
"RTN","DGENA",161,0)
 S DGENR("ELIG","SC")=$P(NODE,"^",2)
"RTN","DGENA",162,0)
 S DGENR("ELIG","SCPER")=$P(NODE,"^",3)
"RTN","DGENA",163,0)
 S DGENR("ELIG","POW")=$P(NODE,"^",4)
"RTN","DGENA",164,0)
 S DGENR("ELIG","A&A")=$P(NODE,"^",5)
"RTN","DGENA",165,0)
 S DGENR("ELIG","HB")=$P(NODE,"^",6)
"RTN","DGENA",166,0)
 S DGENR("ELIG","VAPEN")=$P(NODE,"^",7)
"RTN","DGENA",167,0)
 S DGENR("ELIG","VACKAMT")=$P(NODE,"^",8)
"RTN","DGENA",168,0)
 S DGENR("ELIG","DISRET")=$P(NODE,"^",9)
"RTN","DGENA",169,0)
 S DGENR("ELIG","DISLOD")=$P(NODE,"^",20)  ;added with DG*5.3*672
"RTN","DGENA",170,0)
 S DGENR("ELIG","MEDICAID")=$P(NODE,"^",10)
"RTN","DGENA",171,0)
 S DGENR("ELIG","AO")=$P(NODE,"^",11)
"RTN","DGENA",172,0)
 S DGENR("ELIG","AOEXPLOC")=$P(NODE,"^",22)  ;added with DG*5.3*688
"RTN","DGENA",173,0)
 S DGENR("ELIG","IR")=$P(NODE,"^",12)
"RTN","DGENA",174,0)
 S DGENR("ELIG","EC")=$P(NODE,"^",13)
"RTN","DGENA",175,0)
 S DGENR("ELIG","MTSTA")=$P(NODE,"^",14)
"RTN","DGENA",176,0)
 S DGENR("ELIG","VCD")=$P(NODE,"^",15)
"RTN","DGENA",177,0)
 S DGENR("ELIG","PH")=$P(NODE,"^",16)
"RTN","DGENA",178,0)
 S DGENR("ELIG","UNEMPLOY")=$P(NODE,"^",17)
"RTN","DGENA",179,0)
 S DGENR("ELIG","CVELEDT")=$P(NODE,"^",18)
"RTN","DGENA",180,0)
 S DGENR("ELIG","SHAD")=$P(NODE,"^",19)
"RTN","DGENA",181,0)
 S DGENR("ELIG","RADEXPM")=$P(NODE,"^",21)
"RTN","DGENA",182,0)
 ;S DGENCDZZ=1 ; for CD Testing (disabled).
"RTN","DGENA",183,0)
 S NODE=$G(^DGEN(27.11,DGENRIEN,"U"))
"RTN","DGENA",184,0)
 S DGENR("DATETIME")=$P(NODE,"^")
"RTN","DGENA",185,0)
 S DGENR("USER")=$P(NODE,"^",2)
"RTN","DGENA",186,0)
 Q 1
"RTN","DGENA",187,0)
 ;
"RTN","DGENA1A")
0^83^B14794142
"RTN","DGENA1A",1,0)
DGENA1A ;ALB/CJM,ISA/KWP,Zoltan,LBD,EG,CKN,ERC - Enrollment API - File Data Continued ; 8/1/08 1:10pm
"RTN","DGENA1A",2,0)
 ;;5.3;Registration;**121,147,232,314,564,672,659,653,688**;Aug 13,1993;Build 29
"RTN","DGENA1A",3,0)
 ;
"RTN","DGENA1A",4,0)
KILLALL(DGENRIEN) ;
"RTN","DGENA1A",5,0)
 ;kills all x-refs on the record in the Patient Enrollment file
"RTN","DGENA1A",6,0)
 ;pointed to by DGENRIEN
"RTN","DGENA1A",7,0)
 ;
"RTN","DGENA1A",8,0)
 N DGENR,SUB,VALUE
"RTN","DGENA1A",9,0)
 Q:'$G(DGENRIEN)
"RTN","DGENA1A",10,0)
 Q:'$$GET^DGENA(DGENRIEN,.DGENR)
"RTN","DGENA1A",11,0)
 S SUB=""
"RTN","DGENA1A",12,0)
 F  S SUB=$O(DGENR(SUB)) Q:SUB=""  D
"RTN","DGENA1A",13,0)
 .Q:(SUB="ELIG")
"RTN","DGENA1A",14,0)
 .Q:DGENR(SUB)=""
"RTN","DGENA1A",15,0)
 .D KILL(27.11,DGENRIEN,$$FIELD^DGENU(SUB),DGENR(SUB))
"RTN","DGENA1A",16,0)
 S SUB=""
"RTN","DGENA1A",17,0)
 F  S SUB=$O(DGENR("ELIG",SUB)) Q:SUB=""  D
"RTN","DGENA1A",18,0)
 .Q:DGENR("ELIG",SUB)=""
"RTN","DGENA1A",19,0)
 .D KILL(27.11,DGENRIEN,$$FIELD^DGENU(SUB),DGENR("ELIG",SUB))
"RTN","DGENA1A",20,0)
 Q
"RTN","DGENA1A",21,0)
 ;
"RTN","DGENA1A",22,0)
SETALL(DGENRIEN,DGENR) ;
"RTN","DGENA1A",23,0)
 ;Sets all x-refs on the record in the Patient Enrollment file.
"RTN","DGENA1A",24,0)
 ;Inputs:
"RTN","DGENA1A",25,0)
 ;  DGENRIEN - ptr to PATIENT ENROLLMENT file
"RTN","DGENA1A",26,0)
 ;  DGENR - array containing the record, pass by reference
"RTN","DGENA1A",27,0)
 ;
"RTN","DGENA1A",28,0)
 N SUB,VALUE
"RTN","DGENA1A",29,0)
 Q:'$G(DGENRIEN)
"RTN","DGENA1A",30,0)
 Q:'$D(DGENR)
"RTN","DGENA1A",31,0)
 ;
"RTN","DGENA1A",32,0)
 S SUB=""
"RTN","DGENA1A",33,0)
 F  S SUB=$O(DGENR(SUB)) Q:SUB=""  D
"RTN","DGENA1A",34,0)
 .Q:(SUB="ELIG")
"RTN","DGENA1A",35,0)
 .Q:DGENR(SUB)=""
"RTN","DGENA1A",36,0)
 .D SET(27.11,DGENRIEN,$$FIELD^DGENU(SUB),DGENR(SUB))
"RTN","DGENA1A",37,0)
 S SUB=""
"RTN","DGENA1A",38,0)
 F  S SUB=$O(DGENR("ELIG",SUB)) Q:SUB=""  D
"RTN","DGENA1A",39,0)
 .Q:DGENR("ELIG",SUB)=""
"RTN","DGENA1A",40,0)
 .D SET(27.11,DGENRIEN,$$FIELD^DGENU(SUB),DGENR("ELIG",SUB))
"RTN","DGENA1A",41,0)
 Q
"RTN","DGENA1A",42,0)
 ;
"RTN","DGENA1A",43,0)
KILL(FILE,IEN,FIELD,VALUE) ;
"RTN","DGENA1A",44,0)
 ;executes all the kill logic for x-refs on the field=FIELD for the
"RTN","DGENA1A",45,0)
 ;record=DGENRIEN for the file=FILE for the field value=VALUE
"RTN","DGENA1A",46,0)
 ;
"RTN","DGENA1A",47,0)
 N D0,DA,DIV,DGIX,X
"RTN","DGENA1A",48,0)
 S DA=IEN,X=VALUE,DGIX=0
"RTN","DGENA1A",49,0)
 F  S DGIX=$O(^DD(FILE,FIELD,1,DGIX)) Q:'DGIX  X ^(DGIX,2) S X=VALUE
"RTN","DGENA1A",50,0)
 Q
"RTN","DGENA1A",51,0)
 ;
"RTN","DGENA1A",52,0)
SET(FILE,IEN,FIELD,VALUE) ;
"RTN","DGENA1A",53,0)
 ;executes all the set logic for x-refs on the field=FIELD for the
"RTN","DGENA1A",54,0)
 ;record=DGENRIEN for the file=FILE for the field value=VALUE
"RTN","DGENA1A",55,0)
 ;
"RTN","DGENA1A",56,0)
 N D0,DA,DIV,DGIX,X
"RTN","DGENA1A",57,0)
 S DA=IEN,X=VALUE,DGIX=0
"RTN","DGENA1A",58,0)
 F  S DGIX=$O(^DD(FILE,FIELD,1,DGIX)) Q:'DGIX  X ^(DGIX,1)
"RTN","DGENA1A",59,0)
 Q
"RTN","DGENA1A",60,0)
 ;
"RTN","DGENA1A",61,0)
EDIT(DA,DGENR) ;
"RTN","DGENA1A",62,0)
 ;Description: Overlays a currently existing record, ien=DA, with values
"RTN","DGENA1A",63,0)
 ;     from DGENR array
"RTN","DGENA1A",64,0)
 ;Input -
"RTN","DGENA1A",65,0)
 ;  DA - ien of record in Patient Enrollment file
"RTN","DGENA1A",66,0)
 ;  DGENR - array containing an enrollment, pass by reference
"RTN","DGENA1A",67,0)
 ;Output - 1 on success, 0 on failure
"RTN","DGENA1A",68,0)
 ;
"RTN","DGENA1A",69,0)
 ; *** NOTE: This is called from within FM.  There is a problem in ***
"RTN","DGENA1A",70,0)
 ; *** that ^DIE can not be used.  Instead, the fields             ***
"RTN","DGENA1A",71,0)
 ; *** are hard-set and cross-referenced.                          ***
"RTN","DGENA1A",72,0)
 ;
"RTN","DGENA1A",73,0)
 N NODE
"RTN","DGENA1A",74,0)
 Q:'$G(DA) 0
"RTN","DGENA1A",75,0)
 S NODE=$G(^DGEN(27.11,$G(DA),0))
"RTN","DGENA1A",76,0)
 Q:NODE="" 0
"RTN","DGENA1A",77,0)
 ;
"RTN","DGENA1A",78,0)
 ;kill off all the cross-references (FM doesn't have an API to do this)
"RTN","DGENA1A",79,0)
 D KILLALL(DA)
"RTN","DGENA1A",80,0)
 ;
"RTN","DGENA1A",81,0)
 ;now hand-set all the fields
"RTN","DGENA1A",82,0)
 ;Phase II Add subgroup to the 12 piece (SRS 6.4)
"RTN","DGENA1A",83,0)
 S NODE=DGENR("APP")_U_DGENR("DFN")_U_DGENR("SOURCE")_U_DGENR("STATUS")_U_DGENR("REASON")_U_DGENR("FACREC")_U_DGENR("PRIORITY")_U_DGENR("EFFDATE")_U_DGENR("PRIORREC")_U_DGENR("DATE")_U_DGENR("END")_U_DGENR("SUBGRP")
"RTN","DGENA1A",84,0)
 S ^DGEN(27.11,DA,0)=NODE
"RTN","DGENA1A",85,0)
 S ^DGEN(27.11,DA,"R")=DGENR("REMARKS")
"RTN","DGENA1A",86,0)
 S NODE=DGENR("ELIG","CODE")
"RTN","DGENA1A",87,0)
 S NODE=NODE_U_DGENR("ELIG","SC")
"RTN","DGENA1A",88,0)
 S NODE=NODE_U_DGENR("ELIG","SCPER")
"RTN","DGENA1A",89,0)
 S NODE=NODE_U_DGENR("ELIG","POW")
"RTN","DGENA1A",90,0)
 S NODE=NODE_U_DGENR("ELIG","A&A")
"RTN","DGENA1A",91,0)
 S NODE=NODE_U_DGENR("ELIG","HB")
"RTN","DGENA1A",92,0)
 S NODE=NODE_U_DGENR("ELIG","VAPEN")
"RTN","DGENA1A",93,0)
 S NODE=NODE_U_DGENR("ELIG","VACKAMT")
"RTN","DGENA1A",94,0)
 S NODE=NODE_U_DGENR("ELIG","DISRET")
"RTN","DGENA1A",95,0)
 S NODE=NODE_U_DGENR("ELIG","MEDICAID")
"RTN","DGENA1A",96,0)
 S NODE=NODE_U_DGENR("ELIG","AO")
"RTN","DGENA1A",97,0)
 S NODE=NODE_U_DGENR("ELIG","IR")
"RTN","DGENA1A",98,0)
 S NODE=NODE_U_DGENR("ELIG","EC")  ;changed to SW Asia Cond - DG*5.3*688
"RTN","DGENA1A",99,0)
 S NODE=NODE_U_DGENR("ELIG","MTSTA")
"RTN","DGENA1A",100,0)
 S NODE=NODE_U_DGENR("ELIG","VCD")
"RTN","DGENA1A",101,0)
 S NODE=NODE_U_DGENR("ELIG","PH")
"RTN","DGENA1A",102,0)
 S NODE=NODE_U_DGENR("ELIG","UNEMPLOY")
"RTN","DGENA1A",103,0)
 S NODE=NODE_U_DGENR("ELIG","CVELEDT")
"RTN","DGENA1A",104,0)
 S NODE=NODE_U_DGENR("ELIG","SHAD") ;field added with DG*5.3*653
"RTN","DGENA1A",105,0)
 S NODE=NODE_U_DGENR("ELIG","DISLOD") ;field added with DG*5.3*672
"RTN","DGENA1A",106,0)
 S NODE=NODE_U_DGENR("ELIG","RADEXPM")
"RTN","DGENA1A",107,0)
 S NODE=NODE_U_DGENR("ELIG","AOEXPLOC") ;field added with DG*5.3*688
"RTN","DGENA1A",108,0)
 S ^DGEN(27.11,DA,"E")=NODE
"RTN","DGENA1A",109,0)
 S ^DGEN(27.11,DA,"U")=DGENR("DATETIME")_U_DGENR("USER")
"RTN","DGENA1A",110,0)
 ;
"RTN","DGENA1A",111,0)
 ;set the x-refs
"RTN","DGENA1A",112,0)
 D SETALL(DA,.DGENR)
"RTN","DGENA1A",113,0)
 Q 1
"RTN","DGENA5")
0^107^B31534116
"RTN","DGENA5",1,0)
DGENA5 ;ISA/Zoltan,ALB/CKN - Enrollment API - CD Processing ; 8/15/08 11:10am
"RTN","DGENA5",2,0)
 ;;5.3;Registration;**232,688**;Aug 13, 1993;Build 29
"RTN","DGENA5",3,0)
 ;Phase II API's Related to Catastrophic Disability.
"RTN","DGENA5",4,0)
 ;
"RTN","DGENA5",5,0)
 ; The following variable names are used consistently in this routine:
"RTN","DGENA5",6,0)
 ; DFN    = IEN in PATIENT file (#2).
"RTN","DGENA5",7,0)
 ; REASON = IEN in CATASTROPHIC DISABILITY REASONS file (#2).
"RTN","DGENA5",8,0)
 ; COND   = Sub-ien PATIENT(#2) CD STATUS CONDITIONS field (#.398).
"RTN","DGENA5",9,0)
 ; SCORE  = Score achieved by veteran on a test (#2, #.398, #1).
"RTN","DGENA5",10,0)
 ; PERM   = Permanent Indicator (#2, #.398, #2).
"RTN","DGENA5",11,0)
 ; D2     = Secondary delimiter (optional.)
"RTN","DGENA5",12,0)
 ; 
"RTN","DGENA5",13,0)
 ; Processing related to a patient (#2).
"RTN","DGENA5",14,0)
VCD(DFN) ; Veteran Catastrophically Disabled? (#.39)
"RTN","DGENA5",15,0)
 Q $P($G(^DPT(DFN,.39)),"^",6)
"RTN","DGENA5",16,0)
CONDHELP(DFN,COND) ; Display help text for a condition.
"RTN","DGENA5",17,0)
 ; Applies to the PATIENT file (#2) CD STATUS CONDITIONS field (#.398)
"RTN","DGENA5",18,0)
 ; Note - Help text stored in 27.17 CD REASONS.
"RTN","DGENA5",19,0)
 N REASON
"RTN","DGENA5",20,0)
 S REASON=$$REASON(DFN,COND)
"RTN","DGENA5",21,0)
 D HELP(REASON)
"RTN","DGENA5",22,0)
 Q
"RTN","DGENA5",23,0)
CONDINP(DFN,COND,SCORE) ; Validate a score entered by the user for a PATIENT.
"RTN","DGENA5",24,0)
 N REASON
"RTN","DGENA5",25,0)
 S REASON=$$REASON(DFN,COND)
"RTN","DGENA5",26,0)
 Q $$VALID(REASON,SCORE)
"RTN","DGENA5",27,0)
CONDMET(DFN,COND) ; Determine whether a condition meets the criteria.
"RTN","DGENA5",28,0)
 N SCORE,PERM
"RTN","DGENA5",29,0)
 S REASON=$$REASON(DFN,COND)
"RTN","DGENA5",30,0)
 S SCORE=$$PATSCORE(DFN,COND)
"RTN","DGENA5",31,0)
 S PERM=$$PATPERM(DFN,COND)
"RTN","DGENA5",32,0)
 Q $$RANGEMET(REASON,SCORE,PERM)
"RTN","DGENA5",33,0)
 ; Patient Field Lookup.
"RTN","DGENA5",34,0)
REASON(DFN,COND) ; Get the CD REASON for this patient, for this condition.
"RTN","DGENA5",35,0)
 N REASON
"RTN","DGENA5",36,0)
 I DFN=""!(COND="") D
"RTN","DGENA5",37,0)
 . S REASON=$G(DGCDREAS)
"RTN","DGENA5",38,0)
 . I REASON="",$G(ITEM)'="" S REASON=$G(DGCDIS("COND",ITEM))
"RTN","DGENA5",39,0)
 E  S REASON=$P($G(^DPT(DFN,.398,COND,0)),"^",1)
"RTN","DGENA5",40,0)
 Q REASON
"RTN","DGENA5",41,0)
PATSCORE(DFN,COND) ; Get the TEST SCORE for this patient, for this condition.
"RTN","DGENA5",42,0)
 N REASON
"RTN","DGENA5",43,0)
 I DFN=""!(COND="") Q ""
"RTN","DGENA5",44,0)
 S REASON=$P($G(^DPT(DFN,.398,COND,0)),"^",2)
"RTN","DGENA5",45,0)
 Q REASON
"RTN","DGENA5",46,0)
PATPERM(DFN,COND) ; Get the PERMANENT INDICATOR for this patient+condition.
"RTN","DGENA5",47,0)
 N REASON
"RTN","DGENA5",48,0)
 I DFN=""!(COND="") Q ""
"RTN","DGENA5",49,0)
 S REASON=$P($G(^DPT(DFN,.398,COND,0)),"^",3)
"RTN","DGENA5",50,0)
 Q REASON
"RTN","DGENA5",51,0)
 ; Processing related to catastrophic disability reasons (#27.17)
"RTN","DGENA5",52,0)
HELP(REASON) ; Display help text from 27.17 CD REASONS.
"RTN","DGENA5",53,0)
 N LINE
"RTN","DGENA5",54,0)
 Q:$$TYPE(REASON)'="C"
"RTN","DGENA5",55,0)
 S LINE=0
"RTN","DGENA5",56,0)
 W !,"HELP TEXT FOR ",$$NAME(REASON),!
"RTN","DGENA5",57,0)
 F  S LINE=$O(^DGEN(27.17,REASON,3,LINE)) Q:'LINE  D
"RTN","DGENA5",58,0)
 . W ?3,^DGEN(27.17,REASON,3,LINE,0),!
"RTN","DGENA5",59,0)
 Q
"RTN","DGENA5",60,0)
VALID(REASON,SCORE) ; Validate a proposed score for a test.
"RTN","DGENA5",61,0)
 N TEST,X
"RTN","DGENA5",62,0)
 S TEST=$$VALSCORE(REASON)
"RTN","DGENA5",63,0)
 S X=SCORE
"RTN","DGENA5",64,0)
 I @TEST Q 1
"RTN","DGENA5",65,0)
 Q 0
"RTN","DGENA5",66,0)
RANGEMET(REASON,SCORE,PERM) ; Determine whether this reason is satisfied.
"RTN","DGENA5",67,0)
 N TEST
"RTN","DGENA5",68,0)
 S TEST=$$RANGE(REASON)
"RTN","DGENA5",69,0)
 I @TEST Q 1
"RTN","DGENA5",70,0)
 Q 0
"RTN","DGENA5",71,0)
 ; APIs to access CD REASONS file.
"RTN","DGENA5",72,0)
NAME(REASON) ; Return NAME (.01) for this CD REASON.
"RTN","DGENA5",73,0)
 Q:'REASON ""
"RTN","DGENA5",74,0)
 Q $P($G(^DGEN(27.17,REASON,0)),"^",1)
"RTN","DGENA5",75,0)
TYPE(REASON) ; Return TYPE (#1) for this CD REASON.
"RTN","DGENA5",76,0)
 Q:'REASON ""
"RTN","DGENA5",77,0)
 Q $P($G(^DGEN(27.17,REASON,0)),"^",2)
"RTN","DGENA5",78,0)
VALSCORE(REASON) ; Return VALIDATION (#7) for this CD REASON.
"RTN","DGENA5",79,0)
 ; This determines whether a score is valid at all.
"RTN","DGENA5",80,0)
 Q $G(^DGEN(27.17,REASON,4))
"RTN","DGENA5",81,0)
RANGE(REASON) ; Return TEST SCORE RANGE (#5) for this CD REASON.
"RTN","DGENA5",82,0)
 ; This determines whether the score qualifies for CD.
"RTN","DGENA5",83,0)
 Q $G(^DGEN(27.17,REASON,2))
"RTN","DGENA5",84,0)
FILENAME(REASON) ; Return the file name to which this CD Reason points.
"RTN","DGENA5",85,0)
 N CODEPTR,DIC,DO
"RTN","DGENA5",86,0)
 S U=$G(U,"^")
"RTN","DGENA5",87,0)
 S CODEPTR=$$CODEPTR(REASON)
"RTN","DGENA5",88,0)
 I CODEPTR="" Q ""
"RTN","DGENA5",89,0)
 S DIC="^"_$P(CODEPTR,";",2)
"RTN","DGENA5",90,0)
 S DIC(0)=""
"RTN","DGENA5",91,0)
 D DO^DIC1
"RTN","DGENA5",92,0)
 Q $P(DO,"^",1)
"RTN","DGENA5",93,0)
CODE(REASON) ; Return the HL7 Transmission Code for this CD Reason.
"RTN","DGENA5",94,0)
 Q:'REASON ""
"RTN","DGENA5",95,0)
 Q $P($G(^DGEN(27.17,REASON,0)),"^",4)
"RTN","DGENA5",96,0)
CODENAME(REASON) ; Return name of code associated with this CD Reason.
"RTN","DGENA5",97,0)
 N CODEPTR,CODEIEN,CODEGLO,CODEPC,CODENAME,CODE
"RTN","DGENA5",98,0)
 S CODEPTR=$$CODEPTR(REASON)
"RTN","DGENA5",99,0)
 I CODEPTR="" Q ""
"RTN","DGENA5",100,0)
 S CODEIEN=$P(CODEPTR,";",1)
"RTN","DGENA5",101,0)
 S CODEGLO=$P(CODEPTR,";",2)
"RTN","DGENA5",102,0)
 S CODEPC=$S(CODEGLO="ICD9(":3,CODEGLO="ICD0(":4,CODEGLO="ICPT(":2)
"RTN","DGENA5",103,0)
 S CODEGLO="^"_CODEGLO_CODEIEN_",0)"
"RTN","DGENA5",104,0)
 S CODE=$P(@CODEGLO,"^",1)
"RTN","DGENA5",105,0)
 S CODENAME=$P(@CODEGLO,"^",CODEPC)
"RTN","DGENA5",106,0)
 Q CODENAME
"RTN","DGENA5",107,0)
CODEPTR(REASON) ; Internal label--get pointer to CODE.
"RTN","DGENA5",108,0)
 Q $P($G(^DGEN(27.17,REASON,0)),"^",3)
"RTN","DGENA5",109,0)
LSCREEN(LIMBCODE) ; Used to validate LIMB in screen.
"RTN","DGENA5",110,0)
 N REASON
"RTN","DGENA5",111,0)
 S REASON=""
"RTN","DGENA5",112,0)
 I $G(D0)=""!($G(D1)="") D
"RTN","DGENA5",113,0)
 . S REASON=$G(DGCDREAS)
"RTN","DGENA5",114,0)
 . I REASON="",$G(ITEM)'="" S REASON=$G(DGCDIS("PROC",ITEM))
"RTN","DGENA5",115,0)
 E  S REASON=$P($G(^DPT(D0,.397,D1,0)),"^",1)
"RTN","DGENA5",116,0)
 I REASON="" Q ".RUE.LUE.RLE.LLE."[("."_LIMBCODE_".")
"RTN","DGENA5",117,0)
 Q $$LIMBOK(REASON,LIMBCODE)
"RTN","DGENA5",118,0)
LIMBOK(REASON,LIMBCODE) ; Return 1/0 Affected Extremity OK for this REASON.
"RTN","DGENA5",119,0)
 N LIMBIEN,VALID
"RTN","DGENA5",120,0)
 S VALID=0
"RTN","DGENA5",121,0)
 S LIMBIEN=0
"RTN","DGENA5",122,0)
 F  S LIMBIEN=$$NEXTLIMB(REASON,LIMBIEN) Q:'LIMBIEN  D  Q:VALID
"RTN","DGENA5",123,0)
 . I $$LIMBCODE(REASON,LIMBIEN)=LIMBCODE S VALID=1
"RTN","DGENA5",124,0)
 Q VALID
"RTN","DGENA5",125,0)
NEXTLIMB(REASON,LIMBIEN) ; Get next possible limb for this REASON.
"RTN","DGENA5",126,0)
 I 'LIMBIEN S LIMBIEN=0
"RTN","DGENA5",127,0)
 S LIMBIEN=$O(^DGEN(27.17,REASON,1,LIMBIEN))
"RTN","DGENA5",128,0)
 I 'LIMBIEN S LIMBIEN=""
"RTN","DGENA5",129,0)
 Q LIMBIEN
"RTN","DGENA5",130,0)
LIMBCODE(REASON,LIMBIEN) ; Return limb code for an affected limb.
"RTN","DGENA5",131,0)
 Q $P($G(^DGEN(27.17,REASON,1,LIMBIEN,0)),"^",1)
"RTN","DGENA5",132,0)
 ; HL7-related changes.
"RTN","DGENA5",133,0)
HL7TORSN(HL7VAL,D2) ; Return REASON IEN for a HL7 Transmission Value.
"RTN","DGENA5",134,0)
 ; This function returns the IEN or 0 if there is none.
"RTN","DGENA5",135,0)
 S D2=$S(11[$D(D2):D2,11[$D(HLECH):$E(HLECH),1:"~")
"RTN","DGENA5",136,0)
 I $P("KATZ^FOLS^RUG3^FIM^GAF","^",$P(HL7VAL,D2,1))=$P(HL7VAL,D2,2) D
"RTN","DGENA5",137,0)
 . S HL7VAL=$P("KATZ^FOLS^RUG3^FIM^GAF","^",+HL7VAL)
"RTN","DGENA5",138,0)
 E  S HL7VAL=$P(HL7VAL,D2)
"RTN","DGENA5",139,0)
 Q:HL7VAL="" 0
"RTN","DGENA5",140,0)
 Q +$O(^DGEN(27.17,"C",HL7VAL,""))
"RTN","DGENA5",141,0)
RSNTOHL7(REASON,D2) ; Return HL7 Segment Value for this Reason.
"RTN","DGENA5",142,0)
 Q:REASON="" 0
"RTN","DGENA5",143,0)
 S D2=$S(11[$D(D2):D2,11[$D(HLECH):$E(HLECH),1:"~")
"RTN","DGENA5",144,0)
 N NAME,NUMBER,TABLE,FILE,CODE,HL7VAL
"RTN","DGENA5",145,0)
 I $$TYPE(REASON)="C" D
"RTN","DGENA5",146,0)
 . S CODE=$$CODE(REASON)
"RTN","DGENA5",147,0)
 . Q:CODE=""
"RTN","DGENA5",148,0)
 . S NUMBER=$L($P("KATZ^FOLS^RUG3^FIM^GAF^",CODE),"^")
"RTN","DGENA5",149,0)
 . Q:NUMBER>5
"RTN","DGENA5",150,0)
 . S TABLE="VA0043"
"RTN","DGENA5",151,0)
 . S HL7VAL=NUMBER_D2_CODE_D2_TABLE
"RTN","DGENA5",152,0)
 E  D
"RTN","DGENA5",153,0)
 . S NAME=$$NAME(REASON)
"RTN","DGENA5",154,0)
 . Q:NAME=""
"RTN","DGENA5",155,0)
 . S CODE=$$CODE(REASON)
"RTN","DGENA5",156,0)
 . Q:CODE=""
"RTN","DGENA5",157,0)
 . S FILE=$$FILENAME(REASON)
"RTN","DGENA5",158,0)
 . Q:FILE=""
"RTN","DGENA5",159,0)
 . S HL7VAL=CODE_D2_NAME_D2_FILE
"RTN","DGENA5",160,0)
 ; NOTE:  an undefined variable error on the following line may
"RTN","DGENA5",161,0)
 ;        result, if someone has tampered with the CATASTROPHIC
"RTN","DGENA5",162,0)
 ;        DISABILITY REASONS file (#27.17).  
"RTN","DGENA5",163,0)
 Q HL7VAL
"RTN","DGENA5",164,0)
HLTOLIMB(HLVAL,D2) ; Convert HL7 transmission value to Limb code.
"RTN","DGENA5",165,0)
 ; HLVAL = HL7 text of "Affected Extremity" code.
"RTN","DGENA5",166,0)
 ; D2    = Secondary delimiter (for future expansion.)
"RTN","DGENA5",167,0)
 ; NOTE:  D2 Parameter is ignored at present, but may be
"RTN","DGENA5",168,0)
 ;        required in future if the sequence structure changes.
"RTN","DGENA5",169,0)
 Q $P("RUE-RLE-LUE-LLE","-",+HLVAL)
"RTN","DGENA5",170,0)
LIMBTOHL(LIMB,D2) ; Convert Limb code to HL7 transmission value.
"RTN","DGENA5",171,0)
 ; LIMB = Affected Extremity code: RUE = Right Upper Extremity;
"RTN","DGENA5",172,0)
 ;        LLE = Left Lower Extremity; also RLE and LUE.
"RTN","DGENA5",173,0)
 ; D2   = Secondary Delimiter to use in this HL7 sequence.
"RTN","DGENA5",174,0)
 S D2=$S(11[$D(D2):D2,11[$D(HLECH):$E(HLECH),1:"~")
"RTN","DGENA5",175,0)
 N NUMBER,HLVAL
"RTN","DGENA5",176,0)
 I "-RUE-RLE-LUE-LLE-"'[("-"_LIMB_"-")!(LIMB["-") Q ""
"RTN","DGENA5",177,0)
 S NUMBER=$L($P("-RUE-RLE-LUE-LLE-","-"_LIMB_"-"),"-")
"RTN","DGENA5",178,0)
 S HLVAL=NUMBER_D2_LIMB_D2_"VA0042"
"RTN","DGENA5",179,0)
 Q HLVAL
"RTN","DGENA5",180,0)
PERMTOHL(NUMBER,D2) ; Convert Permanent Status Indicator to HL7 sequence.
"RTN","DGENA5",181,0)
 ; NUMBER = 1 for Permanent, 2 for Not Permanent, 3 for Unknown.
"RTN","DGENA5",182,0)
 ; D2     = Secondary Delimiter to use in this HL7 sequence.
"RTN","DGENA5",183,0)
 S D2=$S(11[$D(D2):D2,11[$D(HLECH):$E(HLECH),1:"~")
"RTN","DGENA5",184,0)
 N PERM,HLVAL
"RTN","DGENA5",185,0)
 S PERM=$P("PERMANENT-NOT PERMANENT-UNKNOWN","-",NUMBER)
"RTN","DGENA5",186,0)
 I PERM="" Q ""
"RTN","DGENA5",187,0)
 S HLVAL=NUMBER_D2_PERM_D2_"VA0045"
"RTN","DGENA5",188,0)
 Q HLVAL
"RTN","DGENA5",189,0)
METH2HL7(METHOD,D2) ; Comvert Method of Determination to HL7 Transmission Value.
"RTN","DGENA5",190,0)
 S D2=$S(11[$D(D2):D2,11[$D(HLECH):$E(HLECH),1:"~")
"RTN","DGENA5",191,0)
 N METHS
"RTN","DGENA5",192,0)
 S METHS="AUTOMATED RECORD REVIEW^MEDICAL RECORD REVIEW^PHYSICAL EXAMINATION"
"RTN","DGENA5",193,0)
 I ".1.2.3."'[("."_METHOD_".") Q ""
"RTN","DGENA5",194,0)
 Q METHOD_D2_$P(METHS,"^",METHOD)_D2_"VA0041"
"RTN","DGENEGT1")
0^112^B61377172
"RTN","DGENEGT1",1,0)
DGENEGT1 ;ALB/KCL,ISA/KWP,LBD,RGL,BRM - Enrollment Group Threshold API's ; 2/19/09 12:17pm
"RTN","DGENEGT1",2,0)
 ;;5.3;Registration;**232,417,454,491,513,451,564,672,717,688**;Aug 13, 1993;Build 29
"RTN","DGENEGT1",3,0)
 ;
"RTN","DGENEGT1",4,0)
 ;
"RTN","DGENEGT1",5,0)
NOTIFY(DGEGT,OLDEGT) ;
"RTN","DGENEGT1",6,0)
 ; Description: This is used to send a message to local mail group.
"RTN","DGENEGT1",7,0)
 ; The notification is used to communicate changes in the Enrollment
"RTN","DGENEGT1",8,0)
 ; Group Threshold (EGT) setting to users at the local site.
"RTN","DGENEGT1",9,0)
 ;
"RTN","DGENEGT1",10,0)
 ;  Input:
"RTN","DGENEGT1",11,0)
 ;    DGEGT - the new Enrollment Group Threshold array, passed by reference
"RTN","DGENEGT1",12,0)
 ;   OLDEGT - the previous Enrollment Group Threshold array, passed by reference
"RTN","DGENEGT1",13,0)
 ;
"RTN","DGENEGT1",14,0)
 ; Output: None
"RTN","DGENEGT1",15,0)
 ;
"RTN","DGENEGT1",16,0)
 N TEXT,XMDUN,XMDUZ,XMTEXT,XMROU,XMSTRIP,XMSUB,XMY,XMZ,OLDPRI
"RTN","DGENEGT1",17,0)
 ;
"RTN","DGENEGT1",18,0)
 ; init subject and sender
"RTN","DGENEGT1",19,0)
 S XMSUB="Enrollment Group Threshold (EGT) Changed"
"RTN","DGENEGT1",20,0)
 S (XMDUN,XMDUZ)="Registration Enrollment Module"
"RTN","DGENEGT1",21,0)
 ;
"RTN","DGENEGT1",22,0)
 ; recipient
"RTN","DGENEGT1",23,0)
 S XMY("G.DGEN EGT UPDATES")=""
"RTN","DGENEGT1",24,0)
 ;
"RTN","DGENEGT1",25,0)
 ; get old EGT priority
"RTN","DGENEGT1",26,0)
 S OLDPRI=$G(OLDEGT("PRIORITY"))
"RTN","DGENEGT1",27,0)
 ;
"RTN","DGENEGT1",28,0)
 S XMTEXT="TEXT("
"RTN","DGENEGT1",29,0)
 S TEXT(1)="The Secretary of the VA has officially changed the enrollment priority"
"RTN","DGENEGT1",30,0)
 S TEXT(2)="grouping of veterans who shall receive care.  This change may place"
"RTN","DGENEGT1",31,0)
 S TEXT(3)="veterans under your facilities care into a 'Not Enrolled' category."
"RTN","DGENEGT1",32,0)
 S TEXT(4)=""
"RTN","DGENEGT1",33,0)
 S TEXT(5)=""
"RTN","DGENEGT1",34,0)
 S TEXT(6)="           Prior EGT Priority:  "_$S($G(OLDPRI):$$EXTERNAL^DILFD(27.16,.02,"F",OLDPRI),1:"N/A")_$S($G(OLDEGT("SUBGRP")):$$EXTERNAL^DILFD(27.16,.03,"F",OLDEGT("SUBGRP")),1:"")
"RTN","DGENEGT1",35,0)
 S TEXT(7)=""
"RTN","DGENEGT1",36,0)
 S TEXT(8)=""
"RTN","DGENEGT1",37,0)
 S TEXT(9)="  New Enrollment Group Threshold (EGT) Settings:"
"RTN","DGENEGT1",38,0)
 S TEXT(10)=""
"RTN","DGENEGT1",39,0)
 S TEXT(11)="                 EGT Priority:  "_$$EXTERNAL^DILFD(27.16,.02,"F",DGEGT("PRIORITY"))_$S($G(DGEGT("SUBGRP")):$$EXTERNAL^DILFD(27.16,.03,"F",DGEGT("SUBGRP")),1:"")
"RTN","DGENEGT1",40,0)
 S TEXT(12)="                     EGT Type:  "_$$EXTERNAL^DILFD(27.16,.04,"F",DGEGT("TYPE"))
"RTN","DGENEGT1",41,0)
 S TEXT(13)="           EGT Effective Date:  "_$$EXTERNAL^DILFD(27.16,.01,"F",DGEGT("EFFDATE"))
"RTN","DGENEGT1",42,0)
 ;
"RTN","DGENEGT1",43,0)
 ; mailman deliverey
"RTN","DGENEGT1",44,0)
 D ^XMD
"RTN","DGENEGT1",45,0)
 ;
"RTN","DGENEGT1",46,0)
 Q
"RTN","DGENEGT1",47,0)
 ;
"RTN","DGENEGT1",48,0)
 ;
"RTN","DGENEGT1",49,0)
DISPLAY() ;
"RTN","DGENEGT1",50,0)
 ; Description: Display Enrollment Group Threshold (EGT) settings.
"RTN","DGENEGT1",51,0)
 ;
"RTN","DGENEGT1",52,0)
 N DGEGT
"RTN","DGENEGT1",53,0)
 ;
"RTN","DGENEGT1",54,0)
 W !
"RTN","DGENEGT1",55,0)
 I '$$GET^DGENEGT($$FINDCUR^DGENEGT(),.DGEGT) W !,"Enrollment Group Threshold (EGT) settings not found."
"RTN","DGENEGT1",56,0)
 E  D
"RTN","DGENEGT1",57,0)
 .W !,?3,"Enrollment Group Threshold (EGT) Settings"
"RTN","DGENEGT1",58,0)
 .W !,?3,"========================================="
"RTN","DGENEGT1",59,0)
 .W !
"RTN","DGENEGT1",60,0)
 .W !?5,"Date Entered",?25,": ",$S('$G(DGEGT("ENTERED")):"-none-",1:$$EXTERNAL^DILFD(27.16,.01,"F",DGEGT("ENTERED")))
"RTN","DGENEGT1",61,0)
 .W !?5,"EGT Priority",?25,": ",$S('$G(DGEGT("PRIORITY")):"-none-",1:$$EXTERNAL^DILFD(27.16,.02,"F",DGEGT("PRIORITY")))_$S($G(DGEGT("SUBGRP"))="":"",1:$$EXTERNAL^DILFD(27.16,.03,"F",DGEGT("SUBGRP")))
"RTN","DGENEGT1",62,0)
 .W !?5,"EGT Type",?25,": ",$S($G(DGEGT("TYPE"))="":"-none-",1:$$EXTERNAL^DILFD(27.16,.04,"F",DGEGT("TYPE")))
"RTN","DGENEGT1",63,0)
 .W !?5,"EGT Effective Date",?25,": ",$S('$G(DGEGT("EFFDATE")):"-none-",1:$$EXTERNAL^DILFD(27.16,.05,"F",DGEGT("EFFDATE")))
"RTN","DGENEGT1",64,0)
 ;
"RTN","DGENEGT1",65,0)
 Q
"RTN","DGENEGT1",66,0)
 ;
"RTN","DGENEGT1",67,0)
ABOVE(DPTDFN,ENRPRI,ENRGRP,EGTPRI,EGTGRP,EGTFLG) ;
"RTN","DGENEGT1",68,0)
 ; Description: This function will determine if the enrollment is above
"RTN","DGENEGT1",69,0)
 ; the threshold.
"RTN","DGENEGT1",70,0)
 ;
"RTN","DGENEGT1",71,0)
 ;Input:
"RTN","DGENEGT1",72,0)
 ; DPTDFN - Patient File IEN
"RTN","DGENEGT1",73,0)
 ; ENRPRI - Enrollment Priority
"RTN","DGENEGT1",74,0)
 ; ENRGRP - Enrollment Sub-Group
"RTN","DGENEGT1",75,0)
 ; EGTPRI - EGT Priority (optional) - not used
"RTN","DGENEGT1",76,0)
 ; EGTGRP - EGT Sub-Group (optional) - not used
"RTN","DGENEGT1",77,0)
 ; EGTFLG - Flag to bypass additional EGT type 2 check (optional)
"RTN","DGENEGT1",78,0)
 ;          It is used by $$ABOVE2 to prevent re-entering the
"RTN","DGENEGT1",79,0)
 ;          sub-priority API ($$SUBPRI^DGENELA4)
"RTN","DGENEGT1",80,0)
 ; Output:
"RTN","DGENEGT1",81,0)
 ; Returns 1 if above 0 below. 
"RTN","DGENEGT1",82,0)
 ;
"RTN","DGENEGT1",83,0)
 I $G(ENRGRP)="" S ENRGRP=""
"RTN","DGENEGT1",84,0)
 I $G(ENRPRI)="" S ENRPRI=""
"RTN","DGENEGT1",85,0)
 N ABOVE,EGT,TODAY,X
"RTN","DGENEGT1",86,0)
 I '$$GET^DGENEGT($$FINDCUR^DGENEGT(),.EGT) Q 1
"RTN","DGENEGT1",87,0)
 D NOW^%DTC S TODAY=X
"RTN","DGENEGT1",88,0)
 I TODAY<EGT("EFFDATE") Q 1
"RTN","DGENEGT1",89,0)
 ;
"RTN","DGENEGT1",90,0)
 ;EGT type 2 - Stop New Enrollments
"RTN","DGENEGT1",91,0)
 ; or EGT type 4 - Enrollment Decision (ESP DG*5.3*491)
"RTN","DGENEGT1",92,0)
 I EGT("TYPE")=2!(EGT("TYPE")=4) D  Q ABOVE
"RTN","DGENEGT1",93,0)
 .S ABOVE=0
"RTN","DGENEGT1",94,0)
 .I ENRPRI<7 D  Q
"RTN","DGENEGT1",95,0)
 ..I ENRPRI'>EGT("PRIORITY") S ABOVE=1 Q
"RTN","DGENEGT1",96,0)
 .;do check for priorities 7 and 8
"RTN","DGENEGT1",97,0)
 .I ENRPRI<EGT("PRIORITY") S ABOVE=1 Q
"RTN","DGENEGT1",98,0)
 .I ENRGRP'>EGT("SUBGRP") S ABOVE=1 Q
"RTN","DGENEGT1",99,0)
 .I $$OVRRIDE(.DPTDFN,.EGT) S ABOVE=1
"RTN","DGENEGT1",100,0)
 ;
"RTN","DGENEGT1",101,0)
 ;EGT types 1 & 3
"RTN","DGENEGT1",102,0)
 ;do check for priorities 7 and 8
"RTN","DGENEGT1",103,0)
 I ENRPRI>6&(ENRPRI=EGT("PRIORITY")) S ABOVE=0 D  Q ABOVE
"RTN","DGENEGT1",104,0)
 .I ENRGRP'>(EGT("SUBGRP")) S ABOVE=1
"RTN","DGENEGT1",105,0)
 I ENRPRI'>(EGT("PRIORITY")) Q 1
"RTN","DGENEGT1",106,0)
 Q 0
"RTN","DGENEGT1",107,0)
 ;
"RTN","DGENEGT1",108,0)
ABOVE2(DPTDFN,ENRDT,PRIORITY,SUBGRP) ;
"RTN","DGENEGT1",109,0)
 ;
"RTN","DGENEGT1",110,0)
 ; Input: DPTDFN    - Patient File IEN
"RTN","DGENEGT1",111,0)
 ;        ENRDT     - enrollment effective date
"RTN","DGENEGT1",112,0)
 ;        PRIORITY  - enrollment priority
"RTN","DGENEGT1",113,0)
 ;        SUBGRP    - enrollment sub-priority (internal numeric value)
"RTN","DGENEGT1",114,0)
 ;
"RTN","DGENEGT1",115,0)
 ; Output: 1 or 0 for above or below EGT threshold
"RTN","DGENEGT1",116,0)
 ;
"RTN","DGENEGT1",117,0)
 N ABOVE,TODAY,X,EGT
"RTN","DGENEGT1",118,0)
 S ABOVE=1
"RTN","DGENEGT1",119,0)
 S:'$G(SUBGRP) SUBGRP=""
"RTN","DGENEGT1",120,0)
 S:'$G(PRIORITY) PRIORITY=""
"RTN","DGENEGT1",121,0)
 S:'$G(ENRDT) ENRDT=""
"RTN","DGENEGT1",122,0)
 D NOW^%DTC S TODAY=X
"RTN","DGENEGT1",123,0)
 Q:'$$GET^DGENEGT($$FINDCUR^DGENEGT(ENRDT),.EGT) 1
"RTN","DGENEGT1",124,0)
 Q:'$G(EGT("EFFDATE")) 1
"RTN","DGENEGT1",125,0)
 Q:TODAY<EGT("EFFDATE") 1
"RTN","DGENEGT1",126,0)
 Q:EGT("TYPE")#2 $$ABOVE(DPTDFN,PRIORITY,SUBGRP,"","",1)  ;If EGT type 1 or 3
"RTN","DGENEGT1",127,0)
 I '$$ABOVE(DPTDFN,PRIORITY,SUBGRP,"","",1) Q 0
"RTN","DGENEGT1",128,0)
 Q ABOVE
"RTN","DGENEGT1",129,0)
 ;
"RTN","DGENEGT1",130,0)
OVRRIDE(DPTDFN,EGT) ;check for previous EGT override by HEC and new rules
"RTN","DGENEGT1",131,0)
 N CVDT,ENRCAT,ENRDT,EGTENR,ENRIEN,DGPAT,STOP,CUR,CE
"RTN","DGENEGT1",132,0)
 S (STOP,CUR)=0
"RTN","DGENEGT1",133,0)
 I '$$GET^DGENELA(DPTDFN,.DGPAT) Q 0  ;Get current Patient file data
"RTN","DGENEGT1",134,0)
 ; Find most recent enrollment record
"RTN","DGENEGT1",135,0)
 S ENRIEN=$$FINDCUR^DGENA(.DPTDFN)
"RTN","DGENEGT1",136,0)
 F  Q:STOP!CUR  D
"RTN","DGENEGT1",137,0)
 .I 'ENRIEN S STOP=1 Q  ;cannot check if no current enrollment
"RTN","DGENEGT1",138,0)
 .I '$$GET^DGENA(ENRIEN,.EGTENR) S STOP=1 Q  ;need enr info to proceed
"RTN","DGENEGT1",139,0)
 .S ENRIEN=$$FINDPRI^DGENA(ENRIEN)
"RTN","DGENEGT1",140,0)
 .; If status is Pending, Deceased, Not Eligible, or Not Applicable
"RTN","DGENEGT1",141,0)
 .; ignore record and get previous
"RTN","DGENEGT1",142,0)
 .I "^6^15^16^17^18^19^20^21^23^"[(U_EGTENR("STATUS")_U) Q
"RTN","DGENEGT1",143,0)
 .S CUR=1
"RTN","DGENEGT1",144,0)
 I STOP Q 0
"RTN","DGENEGT1",145,0)
 S ENRDT=$$EDATE($G(EGTENR("APP")),$G(EGTENR("EFFDATE"))) S:'ENRDT ENRDT=DT
"RTN","DGENEGT1",146,0)
 S ENRCAT=$P($G(^DGEN(27.15,+EGTENR("STATUS"),0)),"^",2)
"RTN","DGENEGT1",147,0)
 ; If enrollment status was overridden at HEC, then cont. enroll.
"RTN","DGENEGT1",148,0)
 I EGTENR("SOURCE")=2,ENRDT'<EGT("EFFDATE"),ENRCAT="E" Q 1
"RTN","DGENEGT1",149,0)
 ; If status is Rejected or Cancelled/Declined, quit (no cont. enroll.)
"RTN","DGENEGT1",150,0)
 I "^4^7^11^12^13^22^"[(U_EGTENR("STATUS")_U) Q 0
"RTN","DGENEGT1",151,0)
 ; If Application Date or Effective Date of Change are prior to the
"RTN","DGENEGT1",152,0)
 ; EGT Effective Date then cont. enroll.
"RTN","DGENEGT1",153,0)
 I ENRDT<EGT("EFFDATE") Q 1
"RTN","DGENEGT1",154,0)
 ; If Enrollment Record is Verified, and meets one of the special CE
"RTN","DGENEGT1",155,0)
 ; rules, then cont. enroll.
"RTN","DGENEGT1",156,0)
 I ENRCAT="E" S CE=$$RULES(DPTDFN,.EGTENR,.EGT,.DGPAT) I CE Q CE>0
"RTN","DGENEGT1",157,0)
 ; Check previous enrollment records for Application Date/Effective
"RTN","DGENEGT1",158,0)
 ; Date and special CE rules
"RTN","DGENEGT1",159,0)
 S (STOP,CE)=0
"RTN","DGENEGT1",160,0)
 F  Q:STOP  D
"RTN","DGENEGT1",161,0)
 .I 'ENRIEN S STOP=1 Q  ;cannot check if no current enrollment
"RTN","DGENEGT1",162,0)
 .I '$$GET^DGENA(ENRIEN,.EGTENR) S STOP=1 Q  ;need enr info to proceed
"RTN","DGENEGT1",163,0)
 .S ENRIEN=$$FINDPRI^DGENA(ENRIEN)
"RTN","DGENEGT1",164,0)
 .; If status is Pending, Deceased, Not Eligible; Ineligible Date,
"RTN","DGENEGT1",165,0)
 .; or Not Applicable ignore record and get previous
"RTN","DGENEGT1",166,0)
 .I "^6^15^16^17^18^19^20^21^23^"[(U_EGTENR("STATUS")_U) Q
"RTN","DGENEGT1",167,0)
 .S ENRDT=$$EDATE($G(EGTENR("APP")),$G(EGTENR("EFFDATE"))) S:'ENRDT ENRDT=DT
"RTN","DGENEGT1",168,0)
 .S ENRCAT=$P($G(^DGEN(27.15,+EGTENR("STATUS"),0)),"^",2)
"RTN","DGENEGT1",169,0)
 .; If Application Date or Effective Date of Change are prior to the
"RTN","DGENEGT1",170,0)
 .; EGT Effective Date then cont. enroll.
"RTN","DGENEGT1",171,0)
 .I ENRDT<EGT("EFFDATE") S (STOP,CE)=1 Q
"RTN","DGENEGT1",172,0)
 .; If Enrollment Record is Verified, and meets one of the special CE
"RTN","DGENEGT1",173,0)
 .; rules, then cont. enroll.
"RTN","DGENEGT1",174,0)
 .I ENRCAT="E" S CE=$$RULES(DPTDFN,.EGTENR,.EGT,.DGPAT) I CE S STOP=1,CE=CE>0 Q
"RTN","DGENEGT1",175,0)
 Q CE
"RTN","DGENEGT1",176,0)
 ;
"RTN","DGENEGT1",177,0)
RULES(DPTDFN,EGTENR,EGT,DGPAT) ;check for new cont enrollment rules (DG*5.3*672)
"RTN","DGENEGT1",178,0)
 N RTN
"RTN","DGENEGT1",179,0)
 ; If veteran ever had a verified enrollment with SC 10%+ and is now
"RTN","DGENEGT1",180,0)
 ; SC 0% non-compensable then cont. enroll
"RTN","DGENEGT1",181,0)
 I EGTENR("ELIG","VACKAMT")&(EGTENR("ELIG","SCPER")>9)&(DGPAT("SCPER")=0)&(DGPAT("VACKAMT")'>0) Q 1
"RTN","DGENEGT1",182,0)
 ; If veteran ever had a verified enrollment with one of these
"RTN","DGENEGT1",183,0)
 ; eligibilities then cont. enroll:  AA, HB, VA Pension
"RTN","DGENEGT1",184,0)
 I EGTENR("ELIG","VACKAMT")&((EGTENR("ELIG","A&A")="Y")!(EGTENR("ELIG","HB")="Y")!(EGTENR("ELIG","VAPEN")="Y")) Q 1
"RTN","DGENEGT1",185,0)
 ; If AO Exposure Location = Korean DMZ prior to ESR implementation,
"RTN","DGENEGT1",186,0)
 ; then cont. enroll.
"RTN","DGENEGT1",187,0)
 ; **** NOTE: For patch DG*5.3*672 the ESR implementation date will
"RTN","DGENEGT1",188,0)
 ; be set to 12/29/2040.  This will be changed to the actual ESR
"RTN","DGENEGT1",189,0)
 ; implementation date in a later patch.
"RTN","DGENEGT1",190,0)
 ; DG*5.3*688 - Date changed to 10/1/2007
"RTN","DGENEGT1",191,0)
 I DGPAT("AO")="Y" D  I $G(RTN) Q RTN
"RTN","DGENEGT1",192,0)
 .I $S($D(EGTENR("ELIG","AOEXPLOC")):EGTENR("ELIG","AOEXPLOC"),1:DGPAT("AOEXPLOC"))="K",EGTENR("EFFDATE"),EGTENR("EFFDATE")<3090321 S RTN=1
"RTN","DGENEGT1",193,0)
 ; If combat vet end date is before application date, cont. enroll
"RTN","DGENEGT1",194,0)
 I $G(EGTENR("ELIG","CVELEDT"))'<ENRDT Q 1
"RTN","DGENEGT1",195,0)
 ; If veteran is enrolled due to MT status or Medicaid, cont. enroll
"RTN","DGENEGT1",196,0)
 ; UNLESS first verified enrollment record is due to MT status or
"RTN","DGENEGT1",197,0)
 ; Medicaid and the primary MT of that income year was changed to a
"RTN","DGENEGT1",198,0)
 ; status that would not enroll (e.g. due to IVM converted test,
"RTN","DGENEGT1",199,0)
 ; Hardship removal, or Medicaid removal).
"RTN","DGENEGT1",200,0)
 I ((EGTENR("PRIORITY")=7)&("^2^16^"[(U_EGTENR("ELIG","MTSTA")_U)))!((EGTENR("PRIORITY")=5)&((EGTENR("ELIG","MTSTA")=4)!(EGTENR("ELIG","MEDICAID")=1))) S RTN=1 D  Q RTN
"RTN","DGENEGT1",201,0)
 .N ENIEN,ENR,MTDT,MTIEN
"RTN","DGENEGT1",202,0)
 .S ENIEN=0 F  S ENIEN=$O(^DGEN(27.11,"C",+DPTDFN,ENIEN)) Q:'ENIEN  I $P($G(^DGEN(27.11,+ENIEN,0)),U,4)=2 D  Q
"RTN","DGENEGT1",203,0)
 ..I '$$GET^DGENA(ENIEN,.ENR) Q
"RTN","DGENEGT1",204,0)
 ..I ((ENR("PRIORITY")=7)&("^2^16^"[(U_ENR("ELIG","MTSTA")_U)))!((ENR("PRIORITY")=5)&(ENR("ELIG","VAPEN")'="Y")&((ENR("ELIG","MTSTA")=4)!(ENR("ELIG","MEDICAID")=1))) D
"RTN","DGENEGT1",205,0)
 ...S MTDT=$E(ENR("APP"),1,3)_"1231",MTIEN=$$LST^DGMTU(MTDT) Q:'MTIEN
"RTN","DGENEGT1",206,0)
 ...I $P($G(^DGMT(408.31,MTIEN,0)),U,3)=6 S RTN=-1
"RTN","DGENEGT1",207,0)
 Q 0
"RTN","DGENEGT1",208,0)
 ;
"RTN","DGENEGT1",209,0)
EDATE(APP,EFF) ; Compare the Application Date and Effective Date and
"RTN","DGENEGT1",210,0)
 ; return the earlier date
"RTN","DGENEGT1",211,0)
 N EDT
"RTN","DGENEGT1",212,0)
 S APP=$G(APP),EFF=$G(EFF)
"RTN","DGENEGT1",213,0)
 S EDT=APP I 'EDT S EDT=EFF Q EDT
"RTN","DGENEGT1",214,0)
 I EFF S:EFF<EDT EDT=EFF
"RTN","DGENEGT1",215,0)
 Q EDT
"RTN","DGENELA")
0^69^B26888074
"RTN","DGENELA",1,0)
DGENELA ;ALB/CJM,KCL,Zoltan/PJR,RGL,LBD,EG,TMK,CKN,ERC - Patient Eligibility API ; 9/19/06 9:27am
"RTN","DGENELA",2,0)
 ;;5.3;Registration;**121,147,232,314,451,564,631,672,659,583,653,688**;Aug 13,1993;Build 29
"RTN","DGENELA",3,0)
 ;
"RTN","DGENELA",4,0)
GET(DFN,DGELG) ;
"RTN","DGENELA",5,0)
 ;Description: Used to obtain the patient eligibility data.
"RTN","DGENELA",6,0)
 ;  The data is placed in the local DGELG array.
"RTN","DGENELA",7,0)
 ;Input:
"RTN","DGENELA",8,0)
 ;  DFN - internal entry number of a record in the PATIENT file
"RTN","DGENELA",9,0)
 ;Output:
"RTN","DGENELA",10,0)
 ;  Function Value - returns 1 on success, 0 on failure
"RTN","DGENELA",11,0)
 ;  DGELG - this is  a local array that will be used to return patient eligibility data. The array subscripts and the fields mapped to are defined below. (pass by reference)
"RTN","DGENELA",12,0)
 ;
"RTN","DGENELA",13,0)
 ;subscript             field name
"RTN","DGENELA",14,0)
 ;"DFN"                ien Patient record
"RTN","DGENELA",15,0)
 ;"ELIG","CODE"        Primary Eligibility Code
"RTN","DGENELA",16,0)
 ;"ELIG","CODE",<ien>  Patient Eligibilities
"RTN","DGENELA",17,0)
 ;"SC"                 Service Connected
"RTN","DGENELA",18,0)
 ;"SCPER"              Service Connected Percentage
"RTN","DGENELA",19,0)
 ;"EFFDT"              SC Combined Effective Date
"RTN","DGENELA",20,0)
 ;"POW"                POW Status Indicated
"RTN","DGENELA",21,0)
 ;"A&A"                Receiving A&A Benefits
"RTN","DGENELA",22,0)
 ;"HB"                 Receiving Housebound Benefits
"RTN","DGENELA",23,0)
 ;"VAPEN"              Receiving a VA Pension
"RTN","DGENELA",24,0)
 ;"VACKAMT"            Total Annual VA Check Amount
"RTN","DGENELA",25,0)
 ;"DISRET"             Military Disability Retirement
"RTN","DGENELA",26,0)
 ;"DISLOD"             Discharge Due to Disability (added with DG 672)
"RTN","DGENELA",27,0)
 ;"MEDICAID"           Medicaid
"RTN","DGENELA",28,0)
 ;"MEDASKDT"           Date Medicaid Last Asked
"RTN","DGENELA",29,0)
 ;"AO"                 Exposed to Agent Orange
"RTN","DGENELA",30,0)
 ;"IR"                 Radiation Exposure Indicated
"RTN","DGENELA",31,0)
 ;"RADEXPM"            Radiation Exposure Method
"RTN","DGENELA",32,0)
 ;"EC"                 SW Asia Cond - change from Env Con, DG*5.3*688
"RTN","DGENELA",33,0)
 ;"MTSTA"              Means Test Status
"RTN","DGENELA",34,0)
 ;P&T                  P&T
"RTN","DGENELA",35,0)
 ;P&TDT                P&T EFFECTIVE DATE (added with DG 688)
"RTN","DGENELA",36,0)
 ;POS                  PERIOD OF SERVICE
"RTN","DGENELA",37,0)
 ;UNEMPLOY             UNEMPLOYABLE
"RTN","DGENELA",38,0)
 ;SCAWDATE             SC AWARD DATE
"RTN","DGENELA",39,0)
 ;RATEINC              RATED INCOMPETENT
"RTN","DGENELA",40,0)
 ;CLAIMNUM             CLAIM NUMBER
"RTN","DGENELA",41,0)
 ;CLAIMLOC             CLAIM FOLDER LOCATION
"RTN","DGENELA",42,0)
 ;VADISAB              RECEIVING VA DISABILITY?
"RTN","DGENELA",43,0)
 ;ELIGSTA              ELIGIBILITY STATUS
"RTN","DGENELA",44,0)
 ;ELIGSTADATE          ELIGIBILITY STATUS DATE
"RTN","DGENELA",45,0)
 ;ELIGVERIF            ELIGIBILITY VERIF. METHOD
"RTN","DGENELA",46,0)
 ;ELIGVSITE            ELIGIBILITY VERIFICATION SITE
"RTN","DGENELA",47,0)
 ;ELIGENTBY            ELIGIBILITY STATUS ENTERED BY
"RTN","DGENELA",48,0)
 ;RATEDIS
"RTN","DGENELA",49,0)
 ;  <COUNT>,"RD"      RATED DISABILITY
"RTN","DGENELA",50,0)
 ;  <COUNT>,"PER"      DISABILITY %
"RTN","DGENELA",51,0)
 ;  <COUNT>,"RDSC"     SERVICE CONNECTED
"RTN","DGENELA",52,0)
 ;  <COUNT>,"RDEXT"    EXTREMITY
"RTN","DGENELA",53,0)
 ;  <COUNT>,"RDORIG"   ORIGINAL RD EFFECTIVE DATE
"RTN","DGENELA",54,0)
 ;  <COUNT>."RDCURR"   CURRENT RD EFFECTIVE DATE
"RTN","DGENELA",55,0)
 ;"VCD"               Veteran Catastrophically Disabled? (#.39)
"RTN","DGENELA",56,0)
 ;"PH"                PURPLE HEART INDICATED
"RTN","DGENELA",57,0)
 ;"AOEXPLOC"          AGENT ORANGE EXPOSURE LOCATION
"RTN","DGENELA",58,0)
 ;"CVELEDT"           COMBAT VETERAN END DATE
"RTN","DGENELA",59,0)
 ;"SHAD"              SHAD EXPOSURE
"RTN","DGENELA",60,0)
 ;
"RTN","DGENELA",61,0)
 K DGELG
"RTN","DGENELA",62,0)
 S DGELG=""
"RTN","DGENELA",63,0)
 Q:'$D(^DPT(DFN)) 0
"RTN","DGENELA",64,0)
 N NODE,SUBREC,COUNT,CODE,IEN
"RTN","DGENELA",65,0)
 ;
"RTN","DGENELA",66,0)
 S DGELG("DFN")=DFN
"RTN","DGENELA",67,0)
 S DGELG("VCD")=$$VCD^DGENA5(DFN)
"RTN","DGENELA",68,0)
 ;
"RTN","DGENELA",69,0)
 ;
"RTN","DGENELA",70,0)
 S NODE=$G(^DPT(DFN,.29))
"RTN","DGENELA",71,0)
 S DGELG("RATEINC")=$P(NODE,"^",12)
"RTN","DGENELA",72,0)
 ;
"RTN","DGENELA",73,0)
 S NODE=$G(^DPT(DFN,.3))
"RTN","DGENELA",74,0)
 S DGELG("SC")=$P(NODE,"^")
"RTN","DGENELA",75,0)
 S DGELG("SCPER")=$P(NODE,"^",2)
"RTN","DGENELA",76,0)
 S DGELG("P&T")=$P(NODE,"^",4)
"RTN","DGENELA",77,0)
 S DGELG("P&TDT")=$P(NODE,"^",13)
"RTN","DGENELA",78,0)
 S DGELG("UNEMPLOY")=$P(NODE,"^",5)
"RTN","DGENELA",79,0)
 S DGELG("SCAWDATE")=$P(NODE,"^",12)
"RTN","DGENELA",80,0)
 S DGELG("VADISAB")=$P(NODE,"^",11)
"RTN","DGENELA",81,0)
 S DGELG("EFFDT")=$P(NODE,"^",14)
"RTN","DGENELA",82,0)
 ;
"RTN","DGENELA",83,0)
 S NODE=$G(^DPT(DFN,.31))
"RTN","DGENELA",84,0)
 S DGELG("CLAIMNUM")=$P(NODE,"^",3)
"RTN","DGENELA",85,0)
 S DGELG("CLAIMLOC")=$P(NODE,"^",4)
"RTN","DGENELA",86,0)
 ;
"RTN","DGENELA",87,0)
 S NODE=$G(^DPT(DFN,.32))
"RTN","DGENELA",88,0)
 S DGELG("POS")=$P(NODE,"^",3)
"RTN","DGENELA",89,0)
 ;
"RTN","DGENELA",90,0)
 S NODE=$G(^DPT(DFN,.36))
"RTN","DGENELA",91,0)
 S DGELG("ELIG","CODE")=$P(NODE,"^") ;primary eligibility
"RTN","DGENELA",92,0)
 S DGELG("DISRET")=$P(NODE,"^",12)
"RTN","DGENELA",93,0)
 S DGELG("DISLOD")=$P(NODE,"^",13)
"RTN","DGENELA",94,0)
 ;
"RTN","DGENELA",95,0)
 S NODE=$G(^DPT(DFN,.38))
"RTN","DGENELA",96,0)
 S DGELG("MEDICAID")=$P(NODE,"^")
"RTN","DGENELA",97,0)
 S DGELG("MEDASKDT")=$P(NODE,"^",2) ;Date Medicaid Last Asked
"RTN","DGENELA",98,0)
 ;
"RTN","DGENELA",99,0)
 S NODE=$G(^DPT(DFN,.361))
"RTN","DGENELA",100,0)
 S DGELG("ELIGSTA")=$P(NODE,"^")
"RTN","DGENELA",101,0)
 S DGELG("ELIGSTADATE")=$P(NODE,"^",2)
"RTN","DGENELA",102,0)
 S DGELG("ELIGVERIF")=$P(NODE,"^",5)
"RTN","DGENELA",103,0)
 S DGELG("ELIGENTBY")=$P(NODE,"^",6)
"RTN","DGENELA",104,0)
 ;
"RTN","DGENELA",105,0)
 S NODE=$G(^DPT(DFN,.362))
"RTN","DGENELA",106,0)
 S DGELG("VACKAMT")=$P(NODE,"^",20)
"RTN","DGENELA",107,0)
 S DGELG("VAPEN")=$P(NODE,"^",14)
"RTN","DGENELA",108,0)
 S DGELG("A&A")=$P(NODE,"^",12)
"RTN","DGENELA",109,0)
 S DGELG("HB")=$P(NODE,"^",13)
"RTN","DGENELA",110,0)
 ;
"RTN","DGENELA",111,0)
 ;
"RTN","DGENELA",112,0)
 S NODE=$G(^DPT(DFN,.321))
"RTN","DGENELA",113,0)
 S DGELG("AO")=$P(NODE,"^",2)
"RTN","DGENELA",114,0)
 S DGELG("IR")=$P(NODE,"^",3)
"RTN","DGENELA",115,0)
 S DGELG("RADEXPM")=$P(NODE,"^",12)
"RTN","DGENELA",116,0)
 S DGELG("AOEXPLOC")=$P(NODE,"^",13)
"RTN","DGENELA",117,0)
 S DGELG("SHAD")=$P(NODE,"^",15)  ;added with DG*5.3*653
"RTN","DGENELA",118,0)
 ;
"RTN","DGENELA",119,0)
 S NODE=$G(^DPT(DFN,.322))
"RTN","DGENELA",120,0)
 S DGELG("EC")=$P(NODE,"^",13)
"RTN","DGENELA",121,0)
 ;
"RTN","DGENELA",122,0)
 S NODE=$G(^DPT(DFN,.52))
"RTN","DGENELA",123,0)
 S DGELG("POW")=$P(NODE,"^",5)
"RTN","DGENELA",124,0)
 S DGELG("CVELEDT")=$P(NODE,"^",15)
"RTN","DGENELA",125,0)
 ;
"RTN","DGENELA",126,0)
 ; Purple Heart Indicator
"RTN","DGENELA",127,0)
 S NODE=$G(^DPT(DFN,.53))
"RTN","DGENELA",128,0)
 S DGELG("PH")=$P(NODE,"^")
"RTN","DGENELA",129,0)
 ;
"RTN","DGENELA",130,0)
 ;means test category
"RTN","DGENELA",131,0)
 S DGELG("MTSTA")=""
"RTN","DGENELA",132,0)
 S IEN=$P($$LST^DGMTU(DFN),"^")
"RTN","DGENELA",133,0)
 I IEN S DGELG("MTSTA")=$P($G(^DGMT(408.31,IEN,0)),"^",3)
"RTN","DGENELA",134,0)
 ;
"RTN","DGENELA",135,0)
 ;get the other eligibilities multiple
"RTN","DGENELA",136,0)
 S SUBREC=0
"RTN","DGENELA",137,0)
 F  S SUBREC=$O(^DPT(DFN,"E",SUBREC)) Q:'SUBREC  D
"RTN","DGENELA",138,0)
 .S CODE=+$G(^DPT(DFN,"E",SUBREC,0))
"RTN","DGENELA",139,0)
 .;
"RTN","DGENELA",140,0)
 .;need to check the "B" x-ref, because when a code is deleted from the multiple, the kill logic is executed BEFORE the data is actually removed - but the "B" x-ref has been deleted at this point
"RTN","DGENELA",141,0)
 .I CODE,$D(^DPT(DFN,"E","B",CODE)) S DGELG("ELIG","CODE",CODE)=SUBREC
"RTN","DGENELA",142,0)
 ;
"RTN","DGENELA",143,0)
 ;rated disability multiple
"RTN","DGENELA",144,0)
 S SUBREC=0,COUNT=0
"RTN","DGENELA",145,0)
 F  S SUBREC=$O(^DPT(DFN,.372,SUBREC)) Q:'SUBREC  D
"RTN","DGENELA",146,0)
 .S NODE=$G(^DPT(DFN,.372,SUBREC,0))
"RTN","DGENELA",147,0)
 .Q:'$P(NODE,"^")
"RTN","DGENELA",148,0)
 .S COUNT=COUNT+1
"RTN","DGENELA",149,0)
 .S DGELG("RATEDIS",COUNT,"RD")=$P(NODE,"^")
"RTN","DGENELA",150,0)
 .S DGELG("RATEDIS",COUNT,"PER")=$P(NODE,"^",2)
"RTN","DGENELA",151,0)
 .S DGELG("RATEDIS",COUNT,"RDSC")=$P(NODE,"^",3)
"RTN","DGENELA",152,0)
 .S DGELG("RATEDIS",COUNT,"RDEXT")=$P(NODE,"^",4)
"RTN","DGENELA",153,0)
 .S DGELG("RATEDIS",COUNT,"RDORIG")=$P(NODE,"^",5)
"RTN","DGENELA",154,0)
 .S DGELG("RATEDIS",COUNT,"RDCURR")=$P(NODE,"^",6)
"RTN","DGENELA",155,0)
 ;
"RTN","DGENELA",156,0)
 Q 1
"RTN","DGENELA",157,0)
 ;
"RTN","DGENELA",158,0)
NATNAME(CODE) ;
"RTN","DGENELA",159,0)
 ;Description: Given an entry in file #8, Eligibility Code file,
"RTN","DGENELA",160,0)
 ;  finds the corresponding entry in file 8.1, MAS Eligbility Code file,
"RTN","DGENELA",161,0)
 ;  and returns the name
"RTN","DGENELA",162,0)
 ;Input:
"RTN","DGENELA",163,0)
 ;  CODE - pointer to file #8
"RTN","DGENELA",164,0)
 ;Output:
"RTN","DGENELA",165,0)
 ;  Function Value - name of corresponding code in file #8.1
"RTN","DGENELA",166,0)
 ;
"RTN","DGENELA",167,0)
 Q:'$G(CODE) ""
"RTN","DGENELA",168,0)
 Q $$CODENAME($P($G(^DIC(8,CODE,0)),"^",9))
"RTN","DGENELA",169,0)
 ;
"RTN","DGENELA",170,0)
NATCODE(CODE) ;
"RTN","DGENELA",171,0)
 ;Description: Given an entry in file #8, Eligibility Code file,
"RTN","DGENELA",172,0)
 ;  finds the corresponding entry in file 8.1, MAS Eligbility Code file
"RTN","DGENELA",173,0)
 ;Input:
"RTN","DGENELA",174,0)
 ;  CODE - pointer to file #8
"RTN","DGENELA",175,0)
 ;Output:
"RTN","DGENELA",176,0)
 ;  Function Value - pointer to file #8.1
"RTN","DGENELA",177,0)
 ;
"RTN","DGENELA",178,0)
 Q:'$G(CODE) ""
"RTN","DGENELA",179,0)
 Q $P($G(^DIC(8,CODE,0)),"^",9)
"RTN","DGENELA",180,0)
 ;
"RTN","DGENELA",181,0)
CODENAME(CODE) ;
"RTN","DGENELA",182,0)
 ;Description: Given a pointer to file #8.1, MAS Eligibility Code file,
"RTN","DGENELA",183,0)
 ;  it returns the name of the code 
"RTN","DGENELA",184,0)
 ;Input:
"RTN","DGENELA",185,0)
 ;  CODE - pointer to file #8.1
"RTN","DGENELA",186,0)
 ;Output:
"RTN","DGENELA",187,0)
 ;  Function Value - name of the code pointed to
"RTN","DGENELA",188,0)
 ;
"RTN","DGENELA",189,0)
 Q:'$G(CODE) ""
"RTN","DGENELA",190,0)
 Q $P($G(^DIC(8.1,CODE,0)),"^")
"RTN","DGENELA",191,0)
 ;
"RTN","DGENELA",192,0)
ELIGSTAT(DFN,DGELG) ;
"RTN","DGENELA",193,0)
 ;Description: Used to get the ELIGIBILITY STATUS and the 
"RTN","DGENELA",194,0)
 ;ELIGIBILITY STATUS DATE of the patient.
"RTN","DGENELA",195,0)
 ;
"RTN","DGENELA",196,0)
 ;Input:
"RTN","DGENELA",197,0)
 ;  DFN - ien of patient record
"RTN","DGENELA",198,0)
 ;
"RTN","DGENELA",199,0)
 ;Ouput:
"RTN","DGENELA",200,0)
 ;  Function Value - 1 on success, 0 on failure
"RTN","DGENELA",201,0)
 ;  DGELG array (pass by reference)
"RTN","DGENELA",202,0)
 ;    "ELIGSTA" - ELIGIBILITY STATUS
"RTN","DGENELA",203,0)
 ;    "ELIGSTADATE" - ELIGIBILITY STATUS DATE
"RTN","DGENELA",204,0)
 ;
"RTN","DGENELA",205,0)
 N NODE,SUCCESS
"RTN","DGENELA",206,0)
 D
"RTN","DGENELA",207,0)
 .S SUCCESS=1
"RTN","DGENELA",208,0)
 .I '$G(DFN) S SUCCESS=0 Q
"RTN","DGENELA",209,0)
 .S NODE=$G(^DPT(DFN,.361))
"RTN","DGENELA",210,0)
 .S DGELG("ELIGSTA")=$P(NODE,"^")
"RTN","DGENELA",211,0)
 .S DGELG("ELIGSTADATE")=$P(NODE,"^",2)
"RTN","DGENELA",212,0)
 Q SUCCESS
"RTN","DGENELA1")
0^70^B77796991
"RTN","DGENELA1",1,0)
DGENELA1 ;ALB/CJM,RTK,TDM,PJR,RGL,LBD,EG,TMK,CKN,ERC - Patient Eligibility API ; 8/15/08 11:14am
"RTN","DGENELA1",2,0)
 ;;5.3;Registration;**147,327,314,367,497,451,564,631,672,659,583,746,653,688**;Aug 13,1993;Build 29
"RTN","DGENELA1",3,0)
 ;
"RTN","DGENELA1",4,0)
CHECK(DGELG,DGPAT,DGCDIS,ERRMSG) ;
"RTN","DGENELA1",5,0)
 ;Does validation checks on the eligibility contained in the DGELG array.
"RTN","DGENELA1",6,0)
 ;
"RTN","DGENELA1",7,0)
 ;Input:
"RTN","DGENELA1",8,0)
 ;  DGELG - array containing eligibility data (pass by reference)
"RTN","DGENELA1",9,0)
 ;  DGPAT - array containing patient data (pass by reference)
"RTN","DGENELA1",10,0)
 ;  DGCDIS - array containing catastrophic disability determination (pass by reference)
"RTN","DGENELA1",11,0)
 ;
"RTN","DGENELA1",12,0)
 ;Output:
"RTN","DGENELA1",13,0)
 ;  Function Value - returns 1 if all validation checks passed, 0 otherwise
"RTN","DGENELA1",14,0)
 ;  ERRMSG - returns a message if validations fail (pass by reference)
"RTN","DGENELA1",15,0)
 ;
"RTN","DGENELA1",16,0)
 N SUCCESS,NATCODE,BAD,SUB,CODE,DGONV,DGTEXT,INELDATE
"RTN","DGENELA1",17,0)
 S SUCCESS=0
"RTN","DGENELA1",18,0)
 S ERRMSG=""
"RTN","DGENELA1",19,0)
 ;
"RTN","DGENELA1",20,0)
 D  ;drops out of block on failure
"RTN","DGENELA1",21,0)
 .;
"RTN","DGENELA1",22,0)
 .;get optional arrays if not there
"RTN","DGENELA1",23,0)
 .I '$D(DGPAT),'$$GET^DGENPTA(DGELG("DFN"),.DGPAT) S ERRMSG="PATIENT NOT FOUND" Q
"RTN","DGENELA1",24,0)
 .I '$D(DGCDIS),'$$GET^DGENCDA(DGELG("DFN"),.DGCDIS) S ERRMSG="PATIENT NOT FOUND" Q
"RTN","DGENELA1",25,0)
 .;
"RTN","DGENELA1",26,0)
 .;do field level checks
"RTN","DGENELA1",27,0)
 .S SUB="" F  S SUB=$O(DGELG(SUB)) Q:(SUB="")  I SUB'="ELIG",SUB'="RATEDIS",'$$CHKFIELD(SUB,DGELG(SUB)) S ERRMSG="BAD VALUE, FIELD = "_$$GET1^DID(2,$$FIELD(SUB),"","LABEL") Q
"RTN","DGENELA1",28,0)
 .;
"RTN","DGENELA1",29,0)
 .Q:(SUB'="")  ;didn't finish the loop
"RTN","DGENELA1",30,0)
 .;
"RTN","DGENELA1",31,0)
 .;also check SC % field of Rated Disabilities
"RTN","DGENELA1",32,0)
 .S SUB="" F  S SUB=$O(DGELG("RATEDIS",SUB)) Q:(SUB="")  I '$$CHKFIELD("PER",DGELG("RATEDIS",SUB,"PER")) S ERRMSG="BAD VALUE, FIELD = DISABILITY % OF THE RATED DISABILITIES MULTIPLE" Q
"RTN","DGENELA1",33,0)
 .Q:(SUB'="")  ;didn't finish the loop
"RTN","DGENELA1",34,0)
 .;
"RTN","DGENELA1",35,0)
 .I DGELG("SC")="Y",DGELG("SCPER")="" S ERRMSG="SC% UNSPECIFIED FOR SC VET" Q
"RTN","DGENELA1",36,0)
 .;
"RTN","DGENELA1",37,0)
 .;!! put this check back when POS is added to the Z11 message
"RTN","DGENELA1",38,0)
 .;I DGPAT("VETERAN")="Y",'DGELG("POS") S ERRMSG="POS UNSPECIFIED" Q 
"RTN","DGENELA1",39,0)
 .;
"RTN","DGENELA1",40,0)
 .I 'DGELG("ELIG","CODE") S ERRMSG="PRIMARY ELIGIBILITY IS UNSPECIFIED" Q
"RTN","DGENELA1",41,0)
 .;
"RTN","DGENELA1",42,0)
 .I (DGELG("VACKAMT")>0),(DGELG("A&A")_DGELG("HB")_DGELG("VAPEN")_DGELG("VADISAB")'["Y") S ERRMSG="VA CHECK AMOUNT > 0 BUT INCOME INDICATORS ALL SHOW 'NO'" Q
"RTN","DGENELA1",43,0)
 .;
"RTN","DGENELA1",44,0)
 .;
"RTN","DGENELA1",45,0)
 .;
"RTN","DGENELA1",46,0)
 .I (DGELG("SC")="N"),(DGELG("VADISAB")="Y") S ERRMSG="NSC VETERANS CAN NOT BE RECEIVING VA DISABILITY BENEFITS" Q
"RTN","DGENELA1",47,0)
 .;
"RTN","DGENELA1",48,0)
 .S BAD=1 D  Q:BAD  ;check primary eligibility
"RTN","DGENELA1",49,0)
 ..S NATCODE=$$NATCODE^DGENELA(DGELG("ELIG","CODE"))
"RTN","DGENELA1",50,0)
 ..Q:'NATCODE
"RTN","DGENELA1",51,0)
 ..;
"RTN","DGENELA1",52,0)
 ..I NATCODE=21 S ERRMSG="CATASTROPHICALLY DISABLED NOT ALLOWED AS PRIMARY ELIGIBILITY" Q
"RTN","DGENELA1",53,0)
 ..;
"RTN","DGENELA1",54,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(DGELG("SCPER")<50),(NATCODE'=3) S ERRMSG="PRIMARY ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTED PERCENTAGE" Q
"RTN","DGENELA1",55,0)
 ..;
"RTN","DGENELA1",56,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(DGELG("SCPER")>49),(NATCODE'=1) S ERRMSG="PRIMARY ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTED PERCENTAGE" Q
"RTN","DGENELA1",57,0)
 ..;
"RTN","DGENELA1",58,0)
 ..S DGONV=$O(^DIC(21,"B","OTHER NON-VETERANS","")),INELDATE=$P($G(^DPT(DFN,.15)),"^",2)
"RTN","DGENELA1",59,0)
 ..I INELDATE'="",DGPAT("INELDATE")'>0,DGELG("POS"),DGELG("POS")=DGONV,'$D(^DIC(21,DGELG("POS"),"E",DGELG("ELIG","CODE"))) D
"RTN","DGENELA1",60,0)
 ...S DGTEXT="Patient was previously determined to be ineligible for VA health care.  Upon review, the individual is determined to be eligible for "
"RTN","DGENELA1",61,0)
 ...S DGTEXT=DGTEXT_"VA care.  Please update period of service and other eligibility data as needed.."
"RTN","DGENELA1",62,0)
 ...D ADDMSG^DGENUPL3(.MSGS,DGTEXT,0)
"RTN","DGENELA1",63,0)
 ..;
"RTN","DGENELA1",64,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(NATCODE=1)!(NATCODE=3) S BAD=0 Q  ;primary eligibility OK
"RTN","DGENELA1",65,0)
 ..;
"RTN","DGENELA1",66,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("POW")="Y"),NATCODE'=18 S ERRMSG="PRIMARY ELIGIBILITY SHOULD BE PRISONER OF WAR" Q
"RTN","DGENELA1",67,0)
 ..;
"RTN","DGENELA1",68,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("POW")="Y"),NATCODE=18 S BAD=0 Q
"RTN","DGENELA1",69,0)
 ..;
"RTN","DGENELA1",70,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("PH")="Y"),NATCODE'=22 S ERRMSG="PRIMARY ELIGIBILITY SHOULD BE PURPLE HEART RECIPIENT" Q
"RTN","DGENELA1",71,0)
 ..;
"RTN","DGENELA1",72,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("PH")="Y"),NATCODE=22 S BAD=0 Q
"RTN","DGENELA1",73,0)
 ..;
"RTN","DGENELA1",74,0)
 ..; disabled DG*5.3*367, for Inel
"RTN","DGENELA1",75,0)
 ..;I (DGPAT("VETERAN")'=$P($G(^DIC(8.1,NATCODE,0)),"^",5)) S ERRMSG="PRIMARY ELIGIBILTY NOT CONSISTENT WITH VETERAN STATUS" Q
"RTN","DGENELA1",76,0)
 ..;
"RTN","DGENELA1",77,0)
 ..I DGELG("A&A")'="Y",NATCODE=2 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH A&A INDICATOR" Q
"RTN","DGENELA1",78,0)
 ..;
"RTN","DGENELA1",79,0)
 ..I DGELG("HB")'="Y",NATCODE=15 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH HOUSEBOUND INDICATOR" Q
"RTN","DGENELA1",80,0)
 ..;
"RTN","DGENELA1",81,0)
 ..I DGELG("VAPEN")'="Y",NATCODE=4 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH VA PENSION INDICATOR" Q
"RTN","DGENELA1",82,0)
 ..;
"RTN","DGENELA1",83,0)
 ..I DGELG("SC")="Y",((NATCODE=4)!(NATCODE=5)) S ERRMSG="NSC ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTION INDICATOR" Q
"RTN","DGENELA1",84,0)
 ..;
"RTN","DGENELA1",85,0)
 ..I (DGPAT("DOB")>2061231),(NATCODE=16) S ERRMSG="DOB IS INCONSISTENT WITH ELIGIBILITY OF MEXICAN BORDER WAR" Q
"RTN","DGENELA1",86,0)
 ..;
"RTN","DGENELA1",87,0)
 ..I (DGPAT("DOB")>2071231),(NATCODE=17) S ERRMSG="DOB IS INCONSISTENT WITH ELIGIBILITY OF WORLD WAR I" Q
"RTN","DGENELA1",88,0)
 ..;
"RTN","DGENELA1",89,0)
 ..;primary eligibility is good
"RTN","DGENELA1",90,0)
 ..S BAD=0
"RTN","DGENELA1",91,0)
 .;
"RTN","DGENELA1",92,0)
 .S SUCCESS=1
"RTN","DGENELA1",93,0)
 .;check eligibilities multiple
"RTN","DGENELA1",94,0)
 .S CODE=0 F  S CODE=$O(DGELG("ELIG","CODE",CODE)) Q:'CODE  D  Q:('SUCCESS)
"RTN","DGENELA1",95,0)
 ..S NATCODE=$$NATCODE^DGENELA(CODE)
"RTN","DGENELA1",96,0)
 ..Q:'NATCODE
"RTN","DGENELA1",97,0)
 ..I NATCODE=21,'DGCDIS("DATE") S SUCCESS=0,ERRMSG="CATASTROPHICALLY DISABLED ELIGIBILITY REQUIRES CATASTROPHICALLY DISABLED DETERMINATION DATE" Q
"RTN","DGENELA1",98,0)
 .;
"RTN","DGENELA1",99,0)
 Q SUCCESS
"RTN","DGENELA1",100,0)
 ;
"RTN","DGENELA1",101,0)
STORE(DGELG,DGPAT,DGCDIS,ERROR,SKIPCHK) ;
"RTN","DGENELA1",102,0)
 ;Stores an eligibility record for a patient. The patient record must
"RTN","DGENELA1",103,0)
 ;already exist. A lock on the Patient record is required, and is
"RTN","DGENELA1",104,0)
 ;released upon completion.
"RTN","DGENELA1",105,0)
 ;
"RTN","DGENELA1",106,0)
 ;Input:
"RTN","DGENELA1",107,0)
 ;  DGELG - eligibility array (pass by reference)
"RTN","DGENELA1",108,0)
 ;  DGPAT - patient array (optional, pass by reference)
"RTN","DGENELA1",109,0)
 ;  DGCDIS - array containing the catastrophic disability determination (optional, pass by reference)
"RTN","DGENELA1",110,0)
 ;  SKIPCHK - flag, set to 1 means that the consistency checks
"RTN","DGENELA1",111,0)
 ;            were already done & should be skipped
"RTN","DGENELA1",112,0)
 ;
"RTN","DGENELA1",113,0)
 ;Output:
"RTN","DGENELA1",114,0)
 ;  Function Value - returns 1 if successful, otherwise 0
"RTN","DGENELA1",115,0)
 ;  ERROR - in event of failure returns an error message (pass by reference, optional)
"RTN","DGENELA1",116,0)
 ;
"RTN","DGENELA1",117,0)
 N SUCCESS,DATA,FIELD,DA,DFN,COUNT
"RTN","DGENELA1",118,0)
 S DFN=$G(DGELG("DFN"))
"RTN","DGENELA1",119,0)
 S SUCCESS=0
"RTN","DGENELA1",120,0)
 S ERROR=""
"RTN","DGENELA1",121,0)
 ;
"RTN","DGENELA1",122,0)
 D  ;drops out of block on failure
"RTN","DGENELA1",123,0)
 .I '$$LOCK^DGENPTA1(DFN) S ERROR="UNABLE TO LOCK PATIENT RECORD" Q
"RTN","DGENELA1",124,0)
 .I $G(SKIPCHK)'=1,'$$CHECK(.DGELG,.DGPAT,.DGCDIS,.ERROR) Q
"RTN","DGENELA1",125,0)
 .S SUB="" F  S SUB=$O(DGELG(SUB)) Q:SUB=""  D
"RTN","DGENELA1",126,0)
 ..I SUB'="ELIG",SUB'="RATEDIS",SUB'="DFN" S FIELD=$$FIELD(SUB) I FIELD S DATA(FIELD)=DGELG(SUB)
"RTN","DGENELA1",127,0)
 .;
"RTN","DGENELA1",128,0)
 .;don't add the Primary Eligibility unless different, so as to not
"RTN","DGENELA1",129,0)
 .;fire off x-refs unless necessary
"RTN","DGENELA1",130,0)
 .I $P($G(^DPT(DFN,.36)),"^")'=DGELG("ELIG","CODE") S DATA(.361)=DGELG("ELIG","CODE")
"RTN","DGENELA1",131,0)
 .;
"RTN","DGENELA1",132,0)
 .; Only update User Enrollee fields if the incoming UE status is
"RTN","DGENELA1",133,0)
 .; greater than the USER ENROLLEE VALID THROUGH on file.
"RTN","DGENELA1",134,0)
 .I $G(DATA(.3617))<$P($G(^DPT(DFN,.361)),"^",7) K DATA(.3617),DATA(.3618)
"RTN","DGENELA1",135,0)
 .;
"RTN","DGENELA1",136,0)
 .;update Patient file record with data from Z11
"RTN","DGENELA1",137,0)
 .D UPDZ11^DGENELA2
"RTN","DGENELA1",138,0)
 .;
"RTN","DGENELA1",139,0)
 .;delete eligibilities that do not belong
"RTN","DGENELA1",140,0)
 .D DELELIG^DGENELA2(DFN,.DGELG)
"RTN","DGENELA1",141,0)
 .;
"RTN","DGENELA1",142,0)
 .;overlay Rated Disabilities
"RTN","DGENELA1",143,0)
 .Q:'$$OVERLAY()
"RTN","DGENELA1",144,0)
 .;
"RTN","DGENELA1",145,0)
 .;Add the new Patient Eligibilities
"RTN","DGENELA1",146,0)
 .;Don't add the an eligibility unless different - so as to not
"RTN","DGENELA1",147,0)
 .;fire off the x-refs unless necessary.
"RTN","DGENELA1",148,0)
 .;Also, try to assign ien = the code (see input tranform of the field).
"RTN","DGENELA1",149,0)
 .K DA,DATA
"RTN","DGENELA1",150,0)
 .S DA(1)=DFN
"RTN","DGENELA1",151,0)
 .S DATA(.01)=0
"RTN","DGENELA1",152,0)
 .F  S DATA(.01)=$O(DGELG("ELIG","CODE",DATA(.01))) Q:'DATA(.01)  I '$D(^DPT(DFN,"E","B",DATA(.01))) I '$$ADD^DGENDBS(2.0361,.DA,.DATA,,$S($D(^DPT(DFN,"E",DATA(.01))):0,1:DATA(.01))) S ERROR="FILEMAN FAILED TO ADD PATIENT ELIGIBILITY" Q
"RTN","DGENELA1",153,0)
 .;
"RTN","DGENELA1",154,0)
 .S SUCCESS=1
"RTN","DGENELA1",155,0)
 ;
"RTN","DGENELA1",156,0)
 D UNLOCK^DGENPTA1(DFN)
"RTN","DGENELA1",157,0)
 Q SUCCESS
"RTN","DGENELA1",158,0)
 ;
"RTN","DGENELA1",159,0)
FIELD(SUB) ;
"RTN","DGENELA1",160,0)
 ;given a subscript from the ELIGIBILITY array, returns the field number
"RTN","DGENELA1",161,0)
 ;
"RTN","DGENELA1",162,0)
 Q:SUB="CODE" .361
"RTN","DGENELA1",163,0)
 Q:SUB="SC" .301
"RTN","DGENELA1",164,0)
 Q:SUB="SCPER" .302
"RTN","DGENELA1",165,0)
 Q:SUB="EFFDT" .3014
"RTN","DGENELA1",166,0)
 Q:SUB="POW" .525
"RTN","DGENELA1",167,0)
 Q:SUB="PH" .531
"RTN","DGENELA1",168,0)
 Q:SUB="A&A" .36205
"RTN","DGENELA1",169,0)
 Q:SUB="HB" .36215
"RTN","DGENELA1",170,0)
 Q:SUB="VAPEN" .36235
"RTN","DGENELA1",171,0)
 Q:SUB="VACKAMT" .36295
"RTN","DGENELA1",172,0)
 Q:SUB="DISRET" .3602
"RTN","DGENELA1",173,0)
 Q:SUB="DISLOD" .3603
"RTN","DGENELA1",174,0)
 Q:SUB="MEDICAID" .381
"RTN","DGENELA1",175,0)
 Q:SUB="MEDASKDT" .382 ;EVC - DG*5.3*653
"RTN","DGENELA1",176,0)
 Q:SUB="AO" .32102
"RTN","DGENELA1",177,0)
 Q:SUB="IR" .32103
"RTN","DGENELA1",178,0)
 Q:SUB="EC" .322013  ;name change from Env Con, DG*5.3*688
"RTN","DGENELA1",179,0)
 Q:SUB="MTSTA" ""  ;don't map Means Test Category
"RTN","DGENELA1",180,0)
 Q:SUB="P&T" .304
"RTN","DGENELA1",181,0)
 Q:SUB="P&TDT" .3013  ;field added with DG*5.3*688
"RTN","DGENELA1",182,0)
 Q:SUB="POS" .323
"RTN","DGENELA1",183,0)
 Q:SUB="UNEMPLOY" .305
"RTN","DGENELA1",184,0)
 Q:SUB="SCAWDATE" .3012
"RTN","DGENELA1",185,0)
 Q:SUB="RATEINC" .293
"RTN","DGENELA1",186,0)
 Q:SUB="CLAIMNUM" .313
"RTN","DGENELA1",187,0)
 Q:SUB="CLAIMLOC" .314
"RTN","DGENELA1",188,0)
 Q:SUB="VADISAB" .3025
"RTN","DGENELA1",189,0)
 Q:SUB="ELIGSTA" .3611
"RTN","DGENELA1",190,0)
 Q:SUB="ELIGSTADATE" .3612
"RTN","DGENELA1",191,0)
 Q:SUB="ELIGVERIF" .3615
"RTN","DGENELA1",192,0)
 Q:SUB="ELIGENTBY" .3616
"RTN","DGENELA1",193,0)
 Q:SUB="RD" .01
"RTN","DGENELA1",194,0)
 Q:SUB="PER" 2
"RTN","DGENELA1",195,0)
 Q:SUB="RDSC" 3
"RTN","DGENELA1",196,0)
 Q:SUB="RDEXT" 4
"RTN","DGENELA1",197,0)
 Q:SUB="RDORIG" 5
"RTN","DGENELA1",198,0)
 Q:SUB="RDCURR" 6
"RTN","DGENELA1",199,0)
 Q:SUB="UEYEAR" .3617
"RTN","DGENELA1",200,0)
 Q:SUB="UESITE" .3618
"RTN","DGENELA1",201,0)
 Q:SUB="AOEXPLOC" .3213
"RTN","DGENELA1",202,0)
 Q:SUB="CVELEDT" .5295
"RTN","DGENELA1",203,0)
 Q:SUB="SHAD" .32115
"RTN","DGENELA1",204,0)
 ;
"RTN","DGENELA1",205,0)
 Q ""
"RTN","DGENELA1",206,0)
 ;
"RTN","DGENELA1",207,0)
CHKFIELD(SUB,VAL) ;
"RTN","DGENELA1",208,0)
 ;Description: Does field level validation of the value. Returns 1
"RTN","DGENELA1",209,0)
 ;if the value is good, 0 otherwise.
"RTN","DGENELA1",210,0)
 ;
"RTN","DGENELA1",211,0)
 Q:($G(VAL)="") 1  ;for now, all NULL values assumed okay
"RTN","DGENELA1",212,0)
 ;
"RTN","DGENELA1",213,0)
 N BAD S BAD=0
"RTN","DGENELA1",214,0)
 I (SUB="SCPER")!(SUB="PER"),(+VAL'=VAL)!(VAL>100)!(VAL<0)!(VAL?.E1"."1N.N) S BAD=1
"RTN","DGENELA1",215,0)
 I SUB="VACKAMT",+VAL'=VAL&(VAL'?.N1"."2N)!(VAL>99999)!(VAL<0) S BAD=1
"RTN","DGENELA1",216,0)
 I SUB="DISRET",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",217,0)
 I SUB="DISLOD",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",218,0)
 I SUB="MEDICAID",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",219,0)
 I SUB="RATEINC",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",220,0)
 I SUB="ELIGSTA",VAL'="P",VAL'="R",VAL'="V" S BAD=1
"RTN","DGENELA1",221,0)
 I SUB="POW",VAL'="Y",VAL'="N",VAL'="U" S BAD=1
"RTN","DGENELA1",222,0)
 Q 'BAD
"RTN","DGENELA1",223,0)
 ;
"RTN","DGENELA1",224,0)
 ;
"RTN","DGENELA1",225,0)
OVERLAY() ;
"RTN","DGENELA1",226,0)
 ;Description: Overlay the local Rated Disabilities with whatever HEC
"RTN","DGENELA1",227,0)
 ;sent.
"RTN","DGENELA1",228,0)
 ;
"RTN","DGENELA1",229,0)
 N SUCCESS S SUCCESS=1
"RTN","DGENELA1",230,0)
 ;
"RTN","DGENELA1",231,0)
 ;delete the rated disabilties multiple
"RTN","DGENELA1",232,0)
 D DELRDIS^DGENELA2(DFN)
"RTN","DGENELA1",233,0)
 ;
"RTN","DGENELA1",234,0)
 ;add the rated disabilities
"RTN","DGENELA1",235,0)
 K DATA,DA
"RTN","DGENELA1",236,0)
 S DA(1)=DFN
"RTN","DGENELA1",237,0)
 S COUNT=0
"RTN","DGENELA1",238,0)
 F  S COUNT=$O(DGELG("RATEDIS",COUNT)) Q:'COUNT  D
"RTN","DGENELA1",239,0)
 .S DATA(.01)=DGELG("RATEDIS",COUNT,"RD")
"RTN","DGENELA1",240,0)
 .I DATA(.01) D
"RTN","DGENELA1",241,0)
 ..S DATA(2)=DGELG("RATEDIS",COUNT,"PER")
"RTN","DGENELA1",242,0)
 ..S DATA(3)=DGELG("RATEDIS",COUNT,"RDSC")
"RTN","DGENELA1",243,0)
 ..S DATA(4)=DGELG("RATEDIS",COUNT,"RDEXT")
"RTN","DGENELA1",244,0)
 ..S DATA(5)=DGELG("RATEDIS",COUNT,"RDORIG")
"RTN","DGENELA1",245,0)
 ..S DATA(6)=DGELG("RATEDIS",COUNT,"RDCURR")
"RTN","DGENELA1",246,0)
 ..I '$$ADD^DGENDBS(2.04,.DA,.DATA) S ERROR="FILEMAN FAILED TO ADD RATED DISABILTIES",SUCCESS=0
"RTN","DGENELA1",247,0)
 Q SUCCESS
"RTN","DGENELA2")
0^108^B2750986
"RTN","DGENELA2",1,0)
DGENELA2 ;ALB/CJM,ERC - Patient Eligibility API ; 13 JUN 1997
"RTN","DGENELA2",2,0)
 ;;5.3;Registration;**147,688**;Aug 13,1993;Build 29
"RTN","DGENELA2",3,0)
 ;
"RTN","DGENELA2",4,0)
DELELIG(DFN,DGELG) ;
"RTN","DGENELA2",5,0)
 ;Description: Deletes eligibilities from the patient file Patient
"RTN","DGENELA2",6,0)
 ;Eligibilities multiple that are not contained in DGELG() array.
"RTN","DGENELA2",7,0)
 ;
"RTN","DGENELA2",8,0)
 ;Input:
"RTN","DGENELA2",9,0)
 ;  DFN - ien of Patient record
"RTN","DGENELA2",10,0)
 ;  DGELG() - eligibility array (pass by reference)
"RTN","DGENELA2",11,0)
 ;Output: none
"RTN","DGENELA2",12,0)
 ;
"RTN","DGENELA2",13,0)
 N DIK,DA,CODE
"RTN","DGENELA2",14,0)
 S DA(1)=DFN
"RTN","DGENELA2",15,0)
 S DIK="^DPT("_DFN_",""E"","
"RTN","DGENELA2",16,0)
 S DA=0 F  S DA=$O(^DPT(DFN,"E",DA)) Q:'DA  D
"RTN","DGENELA2",17,0)
 .S CODE=+$G(^DPT(DFN,"E",DA,0))
"RTN","DGENELA2",18,0)
 .;
"RTN","DGENELA2",19,0)
 .;don't delete if it belongs
"RTN","DGENELA2",20,0)
 .Q:$D(DGELG("ELIG","CODE",CODE))
"RTN","DGENELA2",21,0)
 .;
"RTN","DGENELA2",22,0)
 .;don't delete if it's the primary eligibility code
"RTN","DGENELA2",23,0)
 .Q:(CODE=DGELG("ELIG","CODE"))
"RTN","DGENELA2",24,0)
 .D ^DIK
"RTN","DGENELA2",25,0)
 Q
"RTN","DGENELA2",26,0)
 ;
"RTN","DGENELA2",27,0)
DELRDIS(DFN) ;
"RTN","DGENELA2",28,0)
 ;Description: deletes Rated Disability multiple from the patient file
"RTN","DGENELA2",29,0)
 ;
"RTN","DGENELA2",30,0)
 ;Input:
"RTN","DGENELA2",31,0)
 ;  DFN - ien of Patient record
"RTN","DGENELA2",32,0)
 ;Output: none
"RTN","DGENELA2",33,0)
 ;
"RTN","DGENELA2",34,0)
 N DIK,DA
"RTN","DGENELA2",35,0)
 S DA(1)=DFN
"RTN","DGENELA2",36,0)
 S DIK="^DPT("_DFN_",.372,"
"RTN","DGENELA2",37,0)
 S DA=0 F  S DA=$O(^DPT(DFN,.372,DA)) Q:'DA  D ^DIK
"RTN","DGENELA2",38,0)
 Q
"RTN","DGENELA2",39,0)
UPDZ11 ;update the VistA Patient file record with data
"RTN","DGENELA2",40,0)
 ;from the incoming Z11
"RTN","DGENELA2",41,0)
 ;
"RTN","DGENELA2",42,0)
 ;call moved from STORE^DGENELA1
"RTN","DGENELA2",43,0)
 I '$$UPD^DGENDBS(2,DFN,.DATA) S ERROR="FILEMAN FAILED TO UPDATE THE PATIENT RECORD" Q
"RTN","DGENELA2",44,0)
 ;
"RTN","DGENELA2",45,0)
 ;check P&T and P&T Effective Date - the date field has a 
"RTN","DGENELA2",46,0)
 ;lower field number if gets updated first.  And if the P&T was 'N' or
"RTN","DGENELA2",47,0)
 ;null and the date field is set, the date field will be deleted by 
"RTN","DGENELA2",48,0)
 ;the trigger cross reference on P&T
"RTN","DGENELA2",49,0)
 N DATA3013
"RTN","DGENELA2",50,0)
 I $G(DATA(.304))="Y",($G(DATA(.3013))]""),($P($G(^DPT(DFN,.3)),U,13)'=DATA(.3013)) D
"RTN","DGENELA2",51,0)
 . S DATA3013(.3013)=DATA(.3013)
"RTN","DGENELA2",52,0)
 . I '$$UPD^DGENDBS(2,DFN,.DATA3013) S ERROR="FILEMAN FAILED TO UPDATE P&T EFFECTIVE DATE" Q
"RTN","DGENELA2",53,0)
 Q
"RTN","DGENELA4")
0^81^B45731799
"RTN","DGENELA4",1,0)
DGENELA4 ;ALB/CJM,KCL,RTK,LBD,EG,CKN - Patient Eligibility API ; 6/9/08 2:46pm
"RTN","DGENELA4",2,0)
 ;;5.3;Registration;**232,275,306,327,314,367,417,437,456,491,451,564,672,659,653,688**;Aug 13,1993;Build 29
"RTN","DGENELA4",3,0)
 ;
"RTN","DGENELA4",4,0)
 ;
"RTN","DGENELA4",5,0)
PRIORITY(DFN,DGELG,DGELGSUB,ENRDATE,APPDATE) ;
"RTN","DGENELA4",6,0)
 ; Description: Used to compute the priority group and subgroup for a
"RTN","DGENELA4",7,0)
 ; patient, also returning the subset of the eligibility data on which 
"RTN","DGENELA4",8,0)
 ; the priority subgroup is based.
"RTN","DGENELA4",9,0)
 ;
"RTN","DGENELA4",10,0)
 ;Input:
"RTN","DGENELA4",11,0)
 ;      DFN - ien of patient
"RTN","DGENELA4",12,0)
 ;    DGELG - ELIGIBILITY object array (optional, pass by reference)
"RTN","DGENELA4",13,0)
 ;  ENRDATE - The Enrollment Date. This date is used in the priority
"RTN","DGENELA4",14,0)
 ;            determination only if the application date is not passed.
"RTN","DGENELA4",15,0)
 ;  APPDATE - The Enrollment Application Date.  This date is used
"RTN","DGENELA4",16,0)
 ;            to determine the priority. If the application date
"RTN","DGENELA4",17,0)
 ;            is not passed then the enrollment date (ENRDATE) is used.
"RTN","DGENELA4",18,0)
 ;
"RTN","DGENELA4",19,0)
 ;Output:
"RTN","DGENELA4",20,0)
 ;  Function Value - returns the priority and subgroup computed by the
"RTN","DGENELA4",21,0)
 ;    function as a 2 piece string 'PRIORITY^SUBGROUP'
"RTN","DGENELA4",22,0)
 ;  DGELGSUB - this local array will contain the eligibility data on
"RTN","DGENELA4",23,0)
 ;    which the priority determination was based, pass by reference
"RTN","DGENELA4",24,0)
 ;    if needed.
"RTN","DGENELA4",25,0)
 ;
"RTN","DGENELA4",26,0)
 N CODE,HICODE,PRI,HIPRI,PRIORITY,SUBGRP,HISUB,SUB,DGPAT
"RTN","DGENELA4",27,0)
 K DGELGSUB S DGELGSUB=""
"RTN","DGENELA4",28,0)
 S (HICODE,HIPRI,SUBGRP,HISUB)=""
"RTN","DGENELA4",29,0)
 D
"RTN","DGENELA4",30,0)
 .I '$D(DGELG),'$$GET^DGENELA(DFN,.DGELG) Q  ;can not proceed with eligibility
"RTN","DGENELA4",31,0)
 .; can't proceed without an Enrollment Date or Application Date
"RTN","DGENELA4",32,0)
 .I '$G(ENRDATE),'$G(APPDATE) Q
"RTN","DGENELA4",33,0)
 .I $$GET^DGENPTA(DFN,.DGPAT)
"RTN","DGENELA4",34,0)
 .; determine priority/subgroup based on primary eligibility
"RTN","DGENELA4",35,0)
 .S HICODE=$$NATCODE^DGENELA(DGELG("ELIG","CODE"))
"RTN","DGENELA4",36,0)
 .S PRIORITY=$$PRI(HICODE,.DGELG,$G(ENRDATE),$G(APPDATE))
"RTN","DGENELA4",37,0)
 .S HIPRI=$P(PRIORITY,"^"),HISUB=$P(PRIORITY,"^",2)
"RTN","DGENELA4",38,0)
 .S CODE=""
"RTN","DGENELA4",39,0)
 .;
"RTN","DGENELA4",40,0)
 .; determine if other eligibilities result in higher priority/subgroup
"RTN","DGENELA4",41,0)
 .F  S CODE=$O(DGELG("ELIG","CODE",CODE)) Q:('CODE!(HIPRI=1))  D
"RTN","DGENELA4",42,0)
 ..S PRIORITY=$$PRI($$NATCODE^DGENELA(CODE),.DGELG,$G(ENRDATE),$G(APPDATE))
"RTN","DGENELA4",43,0)
 ..S PRI=$P(PRIORITY,"^"),SUB=$P(PRIORITY,"^",2)
"RTN","DGENELA4",44,0)
 ..S:((PRI>0)&((PRI<HIPRI)!(HIPRI=""))) HIPRI=PRI,HICODE=$$NATCODE^DGENELA(CODE),HISUB=SUB
"RTN","DGENELA4",45,0)
 ..S:((PRI=HIPRI)&((SUB>0)&(SUB<HISUB))) HIPRI=PRI,HICODE=$$NATCODE^DGENELA(CODE),HISUB=SUB
"RTN","DGENELA4",46,0)
 .;
"RTN","DGENELA4",47,0)
 .;set the DGELGSUB() array with the eligibility information used in the
"RTN","DGENELA4",48,0)
 .;priority determination
"RTN","DGENELA4",49,0)
 .S DGELGSUB("CODE")=HICODE,DGELGSUB("SC")=DGELG("SC"),DGELGSUB("SCPER")=DGELG("SCPER"),DGELGSUB("POW")=DGELG("POW"),DGELGSUB("A&A")=DGELG("A&A"),DGELGSUB("HB")=DGELG("HB")
"RTN","DGENELA4",50,0)
 .S DGELGSUB("VAPEN")=DGELG("VAPEN"),DGELGSUB("VACKAMT")=DGELG("VACKAMT"),DGELGSUB("DISRET")=DGELG("DISRET"),DGELGSUB("DISLOD")=DGELG("DISLOD")
"RTN","DGENELA4",51,0)
 .S DGELGSUB("MEDICAID")=DGELG("MEDICAID"),DGELGSUB("AO")=DGELG("AO"),DGELGSUB("IR")=DGELG("IR"),DGELGSUB("EC")=DGELG("EC"),DGELGSUB("MTSTA")=DGELG("MTSTA")
"RTN","DGENELA4",52,0)
 .;Purple Heart Added to DGELGSUB
"RTN","DGENELA4",53,0)
 .S DGELGSUB("VCD")=DGELG("VCD"),DGELGSUB("PH")=DGELG("PH")
"RTN","DGENELA4",54,0)
 .;Added for HVE Phase III (DG*5.3*564)
"RTN","DGENELA4",55,0)
 .S DGELGSUB("UNEMPLOY")=DGELG("UNEMPLOY"),DGELGSUB("CVELEDT")=DGELG("CVELEDT"),DGELGSUB("SHAD")=DGELG("SHAD")
"RTN","DGENELA4",56,0)
 .;added dg*5.3*659
"RTN","DGENELA4",57,0)
 .S DGELGSUB("RADEXPM")=DGELG("RADEXPM")
"RTN","DGENELA4",58,0)
 .S DGELGSUB("AOEXPLOC")=DGELG("AOEXPLOC")
"RTN","DGENELA4",59,0)
 .I $G(DGPAT("INELDATE"))'="" S (HIPRI,HISUB)=""
"RTN","DGENELA4",60,0)
 ;
"RTN","DGENELA4",61,0)
 Q HIPRI_$S(HIPRI:"^"_HISUB,1:"")
"RTN","DGENELA4",62,0)
 ;
"RTN","DGENELA4",63,0)
 ;
"RTN","DGENELA4",64,0)
PRI(CODE,DGELG,ENRDATE,APPDATE) ;
"RTN","DGENELA4",65,0)
 ; Description: Returns the priority group and subgroup based on a
"RTN","DGENELA4",66,0)
 ; single eligibility code.
"RTN","DGENELA4",67,0)
 ;Input -
"RTN","DGENELA4",68,0)
 ;  CODE - pointer to file #8.1, MAS Eligibility Code
"RTN","DGENELA4",69,0)
 ;  DGELG - local array obtained by calling $$GET, pass by reference
"RTN","DGENELA4",70,0)
 ;  ENRDATE - The Enrollment Date. This date is used in the priority
"RTN","DGENELA4",71,0)
 ;            determination only if the application date is not passed.
"RTN","DGENELA4",72,0)
 ;  APPDATE - The Enrollment Application Date.  This date is used
"RTN","DGENELA4",73,0)
 ;            to determine the priority. If the application date
"RTN","DGENELA4",74,0)
 ;            is not passed then the enrollment date (ENRDATE) is used.
"RTN","DGENELA4",75,0)
 ;
"RTN","DGENELA4",76,0)
 ;Output -
"RTN","DGENELA4",77,0)
 ;  Function Value - returns the priority and subgroup computed by the
"RTN","DGENELA4",78,0)
 ;   function as a 2 piece string 'PRIORITY^SUBGROUP'
"RTN","DGENELA4",79,0)
 ;
"RTN","DGENELA4",80,0)
 N CODENAME,PRIORITY,MTSTA,SUBGRP,DGEGT,PRISUB,DGMTI,MTTHR,GMTTHR
"RTN","DGENELA4",81,0)
 S SUBGRP=""
"RTN","DGENELA4",82,0)
 ;
"RTN","DGENELA4",83,0)
 ; use the Application Date when determining the priority, otherwise use
"RTN","DGENELA4",84,0)
 ; the Enrollment Date (ESP DG*5,3*491)
"RTN","DGENELA4",85,0)
 S ENRDATE=$S($G(APPDATE):APPDATE,1:$G(ENRDATE))
"RTN","DGENELA4",86,0)
 ;
"RTN","DGENELA4",87,0)
 ;get the name of the national eligibility code
"RTN","DGENELA4",88,0)
 S CODENAME=$$CODENAME^DGENELA(CODE)
"RTN","DGENELA4",89,0)
 ;
"RTN","DGENELA4",90,0)
 ;get the means test code
"RTN","DGENELA4",91,0)
 S MTSTA=""
"RTN","DGENELA4",92,0)
 I DGELG("MTSTA") S MTSTA=$P($G(^DG(408.32,DGELG("MTSTA"),0)),"^",2)
"RTN","DGENELA4",93,0)
 ;
"RTN","DGENELA4",94,0)
 ;get MT and GMT thresholds
"RTN","DGENELA4",95,0)
 S DGMTI=$P($$LST^DGMTU(DFN),"^")
"RTN","DGENELA4",96,0)
 S MTTHR=$P($G(^DGMT(408.31,+DGMTI,0)),"^",12)
"RTN","DGENELA4",97,0)
 S GMTTHR=$P($G(^DGMT(408.31,+DGMTI,0)),"^",27)
"RTN","DGENELA4",98,0)
 ;
"RTN","DGENELA4",99,0)
 ;get the Enrollment Group Threshold (EGT) setting
"RTN","DGENELA4",100,0)
 S DGEGT=""
"RTN","DGENELA4",101,0)
 I $$GET^DGENEGT($$FINDCUR^DGENEGT(),.DGEGT)
"RTN","DGENELA4",102,0)
 ;
"RTN","DGENELA4",103,0)
 D  ;drops out when priority determined
"RTN","DGENELA4",104,0)
 .S PRIORITY=""
"RTN","DGENELA4",105,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")>49))!(CODENAME="SERVICE CONNECTED 50% to 100%") S PRIORITY=1 Q
"RTN","DGENELA4",106,0)
 .I (DGELG("SC")="Y")&(DGELG("SCPER")>0)&(DGELG("UNEMPLOY")="Y")&(DGELG("VACKAMT")>0)&(DGELG("VAPEN")'="Y")&(DGELG("A&A")'="Y")&(DGELG("HB")'="Y") S PRIORITY=1 Q
"RTN","DGENELA4",107,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")>29)&(CODENAME="SC LESS THAN 50%")) S PRIORITY=2 Q
"RTN","DGENELA4",108,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")>9)&(CODENAME="SC LESS THAN 50%"))!(DGELG("POW")="Y")!(CODENAME="PRISONER OF WAR")!(DGELG("DISRET")=1)!(DGELG("DISLOD")=1)!(CODENAME="PURPLE HEART RECIPIENT")!(DGELG("PH")="Y") S PRIORITY=3 Q
"RTN","DGENELA4",109,0)
 .I (DGELG("A&A")="Y")!(CODENAME="AID & ATTENDANCE")!(DGELG("HB")="Y")!(CODENAME="HOUSEBOUND")!(DGELG("VCD")="Y") S PRIORITY=4 Q
"RTN","DGENELA4",110,0)
 .I (MTSTA="A")!(DGELG("MEDICAID")=1)!(DGELG("VAPEN")="Y")!(CODENAME="NSC, VA PENSION") S PRIORITY=5 Q
"RTN","DGENELA4",111,0)
 .I (CODENAME="WORLD WAR I")!(CODENAME="MEXICAN BORDER WAR")!(DGELG("EC")="Y")!(DGELG("VACKAMT")>0)!((DGELG("CVELEDT"))&(DGELG("CVELEDT")'<DT))!(DGELG("SHAD")=1) S PRIORITY=6 Q
"RTN","DGENELA4",112,0)
 .I DGELG("IR")="Y" I (DGELG("RADEXPM")=2)!(DGELG("RADEXPM")=3)!(DGELG("RADEXPM")=4) S PRIORITY=6 Q
"RTN","DGENELA4",113,0)
 .I (DGELG("AO")="Y"),(DGELG("AOEXPLOC"))="V" S PRIORITY=6 Q
"RTN","DGENELA4",114,0)
 .I (MTSTA="G")!((MTSTA="P")&(GMTTHR>MTTHR)) S PRIORITY=7 D  Q
"RTN","DGENELA4",115,0)
 ..I ((DGELG("SC")="Y")&(DGELG("SCPER")=0)&(DGELG("VACKAMT")<1)&(CODENAME="SC LESS THAN 50%")) S SUBGRP=$$SUBPRI(DFN,.PRIORITY,1) Q
"RTN","DGENELA4",116,0)
 ..S SUBGRP=$$SUBPRI(DFN,.PRIORITY,3)
"RTN","DGENELA4",117,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")=0)&(DGELG("VACKAMT")<1)&(CODENAME="SC LESS THAN 50%")) S PRIORITY=8,SUBGRP=$$SUBPRI(DFN,.PRIORITY,1) Q
"RTN","DGENELA4",118,0)
 .I ((MTSTA="C")!(MTSTA="P")) S PRIORITY=8,SUBGRP=$$SUBPRI(DFN,PRIORITY,3) Q
"RTN","DGENELA4",119,0)
 ;
"RTN","DGENELA4",120,0)
 Q PRIORITY_$S(PRIORITY:"^"_SUBGRP,1:"")
"RTN","DGENELA4",121,0)
 ;
"RTN","DGENELA4",122,0)
SUBPRI(DFN,PRIORITY,SUBGRP) ;calculate sub-priority if under EGT
"RTN","DGENELA4",123,0)
 ;
"RTN","DGENELA4",124,0)
 N PRVPRI,DONE,PRVENST,ENRDT,DGENRIEN,EGT,DGENRC,TODAY,X
"RTN","DGENELA4",125,0)
 Q:'$G(DFN)
"RTN","DGENELA4",126,0)
 S U="^"
"RTN","DGENELA4",127,0)
 S:$G(PRIORITY)="" PRIORITY=""
"RTN","DGENELA4",128,0)
 S:$G(SUBGRP)="" SUBGRP=""
"RTN","DGENELA4",129,0)
 D NOW^%DTC S TODAY=X
"RTN","DGENELA4",130,0)
 Q:'$$GET^DGENEGT($$FINDCUR^DGENEGT(),.EGT) SUBGRP  ;EGT isn't set
"RTN","DGENELA4",131,0)
 Q:TODAY<EGT("EFFDATE") SUBGRP  ;EGT is not in effect
"RTN","DGENELA4",132,0)
 I "^1^3^"[(U_EGT("TYPE")_U) Q SUBGRP
"RTN","DGENELA4",133,0)
 I EGT("TYPE")=2,(PRIORITY+(SUBGRP*.01))<(EGT("PRIORITY")+(EGT("SUBGRP")*.01)) Q SUBGRP
"RTN","DGENELA4",134,0)
 I EGT("TYPE")=4 Q:(PRIORITY<EGT("PRIORITY")) SUBGRP  Q:(PRIORITY>EGT("PRIORITY")) $$SUBCNV(SUBGRP)
"RTN","DGENELA4",135,0)
 ;I $G(ENRDATE) Q:$$ABOVE2^DGENEGT1(ENRDATE,PRIORITY,SUBGRP) SUBGRP
"RTN","DGENELA4",136,0)
 S DGENRIEN=$$FINDCUR^DGENA(DFN)
"RTN","DGENELA4",137,0)
 I 'DGENRIEN,$G(ENRDATE),ENRDATE<EGT("EFFDATE") Q SUBGRP
"RTN","DGENELA4",138,0)
 S DONE=0
"RTN","DGENELA4",139,0)
 F  Q:DONE  D
"RTN","DGENELA4",140,0)
 .I 'DGENRIEN S DONE=2 Q
"RTN","DGENELA4",141,0)
 .I '$$GET^DGENA(DGENRIEN,.DGENRC) S DONE=2 Q
"RTN","DGENELA4",142,0)
 .S DGENRIEN=$$FINDPRI^DGENA(DGENRIEN)
"RTN","DGENELA4",143,0)
 .Q:DGENRC("STATUS")=6   ;deceased
"RTN","DGENELA4",144,0)
 .I $P($G(^DGEN(27.15,+DGENRC("STATUS"),0)),"^",2)="N" S DONE=2 Q
"RTN","DGENELA4",145,0)
 .S ENRDT=$G(DGENRC("APP")) S:'ENRDT ENRDT=$G(DGENRC("EFFDATE"))
"RTN","DGENELA4",146,0)
 .I ENRDT,ENRDT<EGT("EFFDATE") S DONE=1 Q
"RTN","DGENELA4",147,0)
 .; HEC is the authoritative source on continuous enrollment
"RTN","DGENELA4",148,0)
 .I $$OVRRIDE^DGENEGT1(DFN,.EGT) S DONE=1
"RTN","DGENELA4",149,0)
 ;
"RTN","DGENELA4",150,0)
 Q $S(DONE=2:$$SUBCNV(SUBGRP),1:SUBGRP)
"RTN","DGENELA4",151,0)
 ;
"RTN","DGENELA4",152,0)
SUBCNV(SUBGRP) ;return new subgrp
"RTN","DGENELA4",153,0)
 I SUBGRP=1 Q 5
"RTN","DGENELA4",154,0)
 I SUBGRP=3 Q 7
"RTN","DGENELA4",155,0)
 Q SUBGRP
"RTN","DGENL1")
0^80^B67982069
"RTN","DGENL1",1,0)
DGENL1 ;ALB/RMO,ISA/KWP,Zoltan,ALB/BRM,LBD,ERC,EG,CKN,BAJ - Patient Enrollment - Build List Area ; 8/1/08 1:12pm
"RTN","DGENL1",2,0)
 ;;5.3;Registration;**121,147,232,266,343,564,672,659,653,688**;Aug 13,1993;Build 29
"RTN","DGENL1",3,0)
 ;
"RTN","DGENL1",4,0)
EN(DGARY,DFN,DGENRIEN,DGCNT) ;Entry point to build list area
"RTN","DGENL1",5,0)
 ; for patient enrollment and patient enrollment history
"RTN","DGENL1",6,0)
 ; Input  -- DGARY    Global array subscript
"RTN","DGENL1",7,0)
 ;           DFN      Patient IEN
"RTN","DGENL1",8,0)
 ;           DGENRIEN Enrollment IEN
"RTN","DGENL1",9,0)
 ; Output -- DGCNT    Number of lines in the list
"RTN","DGENL1",10,0)
 N DGENCAT,DGENR,DGLINE
"RTN","DGENL1",11,0)
 I DGENRIEN,$$GET^DGENA(DGENRIEN,.DGENR) ;set-up enrollment array
"RTN","DGENL1",12,0)
 S DGENCAT=$$CATEGORY^DGENA4(,$G(DGENR("STATUS")))  ;enrollment category
"RTN","DGENL1",13,0)
 S DGENCAT=$$EXTERNAL^DILFD(27.15,.02,"",DGENCAT)
"RTN","DGENL1",14,0)
 S DGLINE=1,DGCNT=0
"RTN","DGENL1",15,0)
 D ENR(DGARY,DFN,.DGENR,.DGLINE,.DGCNT) ;enrollment
"RTN","DGENL1",16,0)
 D PF(DGARY,DFN,.DGENR,.DGLINE,.DGCNT) ;priority factors
"RTN","DGENL1",17,0)
 D HIS^DGENL2(DGARY,DFN,DGENRIEN,.DGLINE,.DGCNT) ;history
"RTN","DGENL1",18,0)
 Q
"RTN","DGENL1",19,0)
 ;
"RTN","DGENL1",20,0)
ENR(DGARY,DFN,DGENR,DGLINE,DGCNT) ;Enrollment 
"RTN","DGENL1",21,0)
 ; Input  -- DGARY    Global array subscript
"RTN","DGENL1",22,0)
 ;           DFN      Patient IEN
"RTN","DGENL1",23,0)
 ;           DGENR    Enrollment array
"RTN","DGENL1",24,0)
 ;           DGLINE   Line number
"RTN","DGENL1",25,0)
 ; Output -- DGCNT    Number of lines in the list
"RTN","DGENL1",26,0)
 N DGSTART
"RTN","DGENL1",27,0)
 ;
"RTN","DGENL1",28,0)
 S DGSTART=DGLINE ; starting line number
"RTN","DGENL1",29,0)
 D SET(DGARY,DGLINE,"Enrollment",31,IORVON,IORVOFF,,,,.DGCNT)
"RTN","DGENL1",30,0)
 ;
"RTN","DGENL1",31,0)
 ;Enrollment Date
"RTN","DGENL1",32,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",33,0)
 D SET(DGARY,DGLINE,"Enrollment Date: "_$S($G(DGENR("DATE")):$$EXT^DGENU("DATE",DGENR("DATE")),1:""),11,,,,,,.DGCNT)
"RTN","DGENL1",34,0)
 ;
"RTN","DGENL1",35,0)
 ;
"RTN","DGENL1",36,0)
 ;Enrollment End Date
"RTN","DGENL1",37,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",38,0)
 D SET(DGARY,DGLINE,"Enrollment End Date: "_$S($G(DGENR("END")):$$EXT^DGENU("END",DGENR("END")),1:""),7,,,,,,.DGCNT)
"RTN","DGENL1",39,0)
 ;
"RTN","DGENL1",40,0)
 ;Enrollment Application Date
"RTN","DGENL1",41,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",42,0)
 D SET(DGARY,DGLINE,"Application Date: "_$S($G(DGENR("APP")):$$EXT^DGENU("APP",DGENR("APP")),1:""),10,,,,,,.DGCNT)
"RTN","DGENL1",43,0)
 ;
"RTN","DGENL1",44,0)
 ;Source
"RTN","DGENL1",45,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",46,0)
 D SET(DGARY,DGLINE,"Source of Enrollment: "_$S($G(DGENR("SOURCE")):$$EXT^DGENU("SOURCE",DGENR("SOURCE")),1:""),6,,,,,,.DGCNT)
"RTN","DGENL1",47,0)
 ;
"RTN","DGENL1",48,0)
 ;Category
"RTN","DGENL1",49,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",50,0)
 D SET(DGARY,DGLINE,"Enrollment Category: "_DGENCAT,7,IORVON,IORVOFF,,,,.DGCNT)
"RTN","DGENL1",51,0)
 ;
"RTN","DGENL1",52,0)
 ;Status
"RTN","DGENL1",53,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",54,0)
 D SET(DGARY,DGLINE,"Enrollment Status: "_$S($G(DGENR("STATUS")):$$EXT^DGENU("STATUS",DGENR("STATUS")),1:""),9,,,,,,.DGCNT)
"RTN","DGENL1",55,0)
 ;
"RTN","DGENL1",56,0)
 ;Priority
"RTN","DGENL1",57,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",58,0)
 D SET(DGARY,DGLINE,"Enrollment Priority: "_$S($G(DGENR("PRIORITY")):DGENR("PRIORITY"),1:"")_$S($G(DGENR("SUBGRP")):$$EXT^DGENU("SUBGRP",DGENR("SUBGRP")),1:""),7,,,,,,.DGCNT)
"RTN","DGENL1",59,0)
 ;
"RTN","DGENL1",60,0)
 ;
"RTN","DGENL1",61,0)
 ;Effective date
"RTN","DGENL1",62,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",63,0)
 D SET(DGARY,DGLINE,"Effective Date: "_$S($G(DGENR("EFFDATE")):$$EXT^DGENU("EFFDATE",DGENR("EFFDATE")),1:""),12,,,,,,.DGCNT)
"RTN","DGENL1",64,0)
 ;
"RTN","DGENL1",65,0)
 ;Reason canceled/declined
"RTN","DGENL1",66,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",67,0)
 D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",68,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",69,0)
 D SET(DGARY,DGLINE,"Reason Canceled/Declined: "_$S($G(DGENR("REASON")):$$EXT^DGENU("REASON",DGENR("REASON")),1:""),2,,,,,,.DGCNT)
"RTN","DGENL1",70,0)
 ;
"RTN","DGENL1",71,0)
 ;Canceled/declined remarks
"RTN","DGENL1",72,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",73,0)
 D SET(DGARY,DGLINE,"Canceled/Declined Remarks: "_$S($G(DGENR("REASON"))'="":$$EXT^DGENU("REMARKS",DGENR("REMARKS")),1:""),1,,,,,,.DGCNT)
"RTN","DGENL1",74,0)
 ;
"RTN","DGENL1",75,0)
 ;Entered by
"RTN","DGENL1",76,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",77,0)
 D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",78,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",79,0)
 D SET(DGARY,DGLINE,"Entered By: "_$S($G(DGENR("USER")):$$EXT^DGENU("USER",DGENR("USER")),1:""),16,,,,,,.DGCNT)
"RTN","DGENL1",80,0)
 ;
"RTN","DGENL1",81,0)
 ;Date/time entered
"RTN","DGENL1",82,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",83,0)
 D SET(DGARY,DGLINE,"Date/Time Entered: "_$S($G(DGENR("DATETIME")):$$EXT^DGENU("DATETIME",DGENR("DATETIME")),1:""),9,,,,,,.DGCNT)
"RTN","DGENL1",84,0)
 ;
"RTN","DGENL1",85,0)
 ;Set line to start on next page
"RTN","DGENL1",86,0)
 F DGLINE=DGLINE+1:1:DGSTART+VALM("LINES") D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",87,0)
 Q
"RTN","DGENL1",88,0)
 ;
"RTN","DGENL1",89,0)
PF(DGARY,DFN,DGENR,DGLINE,DGCNT) ;Priority factors 
"RTN","DGENL1",90,0)
 ; Input  -- DGARY    Global array subscript
"RTN","DGENL1",91,0)
 ;           DFN      Patient IEN
"RTN","DGENL1",92,0)
 ;           DGENR    Enrollment array
"RTN","DGENL1",93,0)
 ;           DGLINE   Line number
"RTN","DGENL1",94,0)
 ; Output -- DGCNT    Number of lines in the list
"RTN","DGENL1",95,0)
 N DGSTART
"RTN","DGENL1",96,0)
 ;
"RTN","DGENL1",97,0)
 S DGSTART=DGLINE ; starting line number
"RTN","DGENL1",98,0)
 D SET(DGARY,DGLINE,"Priority Factors",31,IORVON,IORVOFF,,,,.DGCNT)
"RTN","DGENL1",99,0)
 ;
"RTN","DGENL1",100,0)
 ;POW
"RTN","DGENL1",101,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",102,0)
 D SET(DGARY,DGLINE,"POW: "_$S($G(DGENR("ELIG","POW"))'="":$$EXT^DGENU("POW",DGENR("ELIG","POW")),1:""),19,,,,,,.DGCNT)
"RTN","DGENL1",103,0)
 ;
"RTN","DGENL1",104,0)
 ;Purple Heart - added for patch 343;brm;10/23/00
"RTN","DGENL1",105,0)
 N PHDAT
"RTN","DGENL1",106,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",107,0)
 S PHDAT=$$PHEART(DFN,$G(DGENRIEN),$G(DGENR("DATETIME")))
"RTN","DGENL1",108,0)
 D SET(DGARY,DGLINE,"Purple Hrt: "_$P(PHDAT,U),12,,,,,,.DGCNT)
"RTN","DGENL1",109,0)
 D:$P(PHDAT,U)="YES" SET(DGARY,DGLINE,"Status: "_$P(PHDAT,U,2),32,,,,,,.DGCNT)
"RTN","DGENL1",110,0)
 D:$P(PHDAT,U)="NO" SET(DGARY,DGLINE,"Remarks: "_$P(PHDAT,U,3),31,,,,,,.DGCNT)
"RTN","DGENL1",111,0)
 ;
"RTN","DGENL1",112,0)
 ;Agent orange
"RTN","DGENL1",113,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",114,0)
 D SET(DGARY,DGLINE,"A/O Exp.: "_$S($G(DGENR("ELIG","AO"))'="":$$EXT^DGENU("AO",DGENR("ELIG","AO")),1:""),14,,,,,,.DGCNT)
"RTN","DGENL1",115,0)
 D SET(DGARY,DGLINE,"A/O Exp Loc: "_$S($G(DGENR("ELIG","AOEXPLOC"))'="":$$EXT^DGENU("AOEXPLOC",DGENR("ELIG","AOEXPLOC")),1:""),51,,,,,,.DGCNT)
"RTN","DGENL1",116,0)
 ;
"RTN","DGENL1",117,0)
 ;Ionizing radiation
"RTN","DGENL1",118,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",119,0)
 D SET(DGARY,DGLINE,"ION Rad.: "_$S($G(DGENR("ELIG","IR"))'="":$$EXT^DGENU("IR",DGENR("ELIG","IR")),1:""),14,,,,,,.DGCNT)
"RTN","DGENL1",120,0)
 ;
"RTN","DGENL1",121,0)
 ;Radiation Exposure Method
"RTN","DGENL1",122,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",123,0)
 D SET(DGARY,DGLINE,"Rad Exp Method: "_$S($G(DGENR("ELIG","RADEXPM"))'="":$$EXT^DGENU("RADEXPM",DGENR("ELIG","RADEXPM")),1:""),8,,,,,,.DGCNT)
"RTN","DGENL1",124,0)
 ;
"RTN","DGENL1",125,0)
 ;SW Asia Conditions - name change from Env con DG*5.3*688
"RTN","DGENL1",126,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",127,0)
 D SET(DGARY,DGLINE,"SW Asia Cond."_$S($G(DGENR("ELIG","EC"))'="":$$EXT^DGENU("EC",DGENR("ELIG","EC")),1:""),12,,,,,,.DGCNT)
"RTN","DGENL1",128,0)
 ;
"RTN","DGENL1",129,0)
 ;Military retirement - new fields added with DG*5.3*672
"RTN","DGENL1",130,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",131,0)
 S DGRET=$G(DGENR("ELIG","DISRET"))
"RTN","DGENL1",132,0)
 D SET(DGARY,DGLINE,"Mil Disab Retirement: "_$S($G(DGRET)=0:"NO",$G(DGRET)=1:"YES",$G(DGRET)=2:"YES",$G(DGRET)=3:"UNK",1:""),2,,,,,,.DGCNT)
"RTN","DGENL1",133,0)
 D SET(DGARY,DGLINE,"Dischrg Due to Disab: "_$S($G(DGENR("ELIG","DISLOD"))'="":$$EXT^DGENU("DISLOD",DGENR("ELIG","DISLOD")),1:""),42,,,,,,.DGCNT)
"RTN","DGENL1",134,0)
 ;
"RTN","DGENL1",135,0)
 ;Combat Vet End Date (added for DG*5.3*564 - HVE Phase III)
"RTN","DGENL1",136,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",137,0)
 D SET(DGARY,DGLINE,"Combat Vet End Date: "_$S($G(DGENR("ELIG","CVELEDT"))'="":$$EXT^DGENU("CVELEDT",DGENR("ELIG","CVELEDT")),1:""),3,,,,,,.DGCNT)
"RTN","DGENL1",138,0)
 ;
"RTN","DGENL1",139,0)
 ;Eligible for medicaid
"RTN","DGENL1",140,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",141,0)
 D SET(DGARY,DGLINE,"Eligible for MEDICAID: "_$S($G(DGENR("ELIG","MEDICAID"))'="":$$EXT^DGENU("MEDICAID",DGENR("ELIG","MEDICAID")),1:""),1,,,,,,.DGCNT)
"RTN","DGENL1",142,0)
 ;
"RTN","DGENL1",143,0)
 ;Service connected and percentage
"RTN","DGENL1",144,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",145,0)
 D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",146,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",147,0)
 D SET(DGARY,DGLINE,"Svc Connected: "_$S($G(DGENR("ELIG","SC"))'="":$$EXT^DGENU("SC",DGENR("ELIG","SC")),1:""),9,,,,,,.DGCNT)
"RTN","DGENL1",148,0)
 D SET(DGARY,DGLINE,"SC Percent: "_$S($G(DGENR("ELIG","SCPER"))'="":$$EXT^DGENU("SCPER",DGENR("ELIG","SCPER"))_"%",1:""),52,,,,,,.DGCNT)
"RTN","DGENL1",149,0)
 ;
"RTN","DGENL1",150,0)
 ;Aid & attendance and housebound
"RTN","DGENL1",151,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",152,0)
 D SET(DGARY,DGLINE,"Aid & Attendance: "_$S($G(DGENR("ELIG","A&A"))'="":$$EXT^DGENU("A&A",DGENR("ELIG","A&A")),1:""),6,,,,,,.DGCNT)
"RTN","DGENL1",153,0)
 D SET(DGARY,DGLINE,"Housebound: "_$S($G(DGENR("ELIG","HB"))'="":$$EXT^DGENU("HB",DGENR("ELIG","HB")),1:""),52,,,,,,.DGCNT)
"RTN","DGENL1",154,0)
 ;
"RTN","DGENL1",155,0)
 ;VA Pension
"RTN","DGENL1",156,0)
 ;Unemployable (added for DG*5.3*564 - HVE Phase III)
"RTN","DGENL1",157,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",158,0)
 D SET(DGARY,DGLINE,"VA Pension: "_$S($G(DGENR("ELIG","VAPEN"))'="":$$EXT^DGENU("VAPEN",DGENR("ELIG","VAPEN")),1:""),12,,,,,,.DGCNT)
"RTN","DGENL1",159,0)
 D SET(DGARY,DGLINE,"Unemployable: "_$S($G(DGENR("ELIG","UNEMPLOY"))'="":$$EXT^DGENU("UNEMPLOY",DGENR("ELIG","UNEMPLOY")),1:""),50,,,,,,.DGCNT)
"RTN","DGENL1",160,0)
 ;
"RTN","DGENL1",161,0)
 ;Total check amount
"RTN","DGENL1",162,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",163,0)
 D SET(DGARY,DGLINE,"Total Check Amount: "_$S($G(DGENR("ELIG","VACKAMT"))'="":$$EXT^DGENU("VACKAMT",DGENR("ELIG","VACKAMT")),1:""),4,,,,,,.DGCNT)
"RTN","DGENL1",164,0)
 ;
"RTN","DGENL1",165,0)
 ;PROJ 112/SHAD - DG*5.3*653
"RTN","DGENL1",166,0)
 I $G(DGENR("ELIG","SHAD"))=1 D
"RTN","DGENL1",167,0)
 .D SET(DGARY,DGLINE,"Proj 112/SHAD: "_$$EXT^DGENU("SHAD",DGENR("ELIG","SHAD")),49,,,,,,.DGCNT)
"RTN","DGENL1",168,0)
 ;
"RTN","DGENL1",169,0)
 ;Eligibility code
"RTN","DGENL1",170,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",171,0)
 D SET(DGARY,DGLINE,"Eligibility Code: "_$S($G(DGENR("ELIG","CODE"))'="":$$EXT^DGENU("CODE",DGENR("ELIG","CODE")),1:""),6,,,,,,.DGCNT)
"RTN","DGENL1",172,0)
 ;
"RTN","DGENL1",173,0)
 ;Means test
"RTN","DGENL1",174,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",175,0)
 D SET(DGARY,DGLINE,"Means Test Status: "_$S($G(DGENR("ELIG","MTSTA"))'="":$$EXT^DGENU("MTSTA",DGENR("ELIG","MTSTA")),1:""),5,,,,,,.DGCNT)
"RTN","DGENL1",176,0)
 ;
"RTN","DGENL1",177,0)
 ;Veteran Catastrophically Disabled
"RTN","DGENL1",178,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",179,0)
 D SET(DGARY,DGLINE,"Veteran CD Status: "_$S($G(DGENR("ELIG","VCD"))'="":$$EXT^DGENU("VCD",DGENR("ELIG","VCD")),1:""),5,,,,,,.DGCNT)
"RTN","DGENL1",180,0)
 ;
"RTN","DGENL1",181,0)
 ;Set line to start on next page
"RTN","DGENL1",182,0)
 F DGLINE=DGLINE+1:1:DGSTART+VALM("LINES") D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",183,0)
 Q
"RTN","DGENL1",184,0)
 ;
"RTN","DGENL1",185,0)
SET(DGARY,DGLINE,DGTEXT,DGCOL,DGON,DGOFF,DGSUB,DGNUM,DGDATA,DGCNT) ; moved to
"RTN","DGENL1",186,0)
 ;DGENL2 as DGENL1 was getting too big
"RTN","DGENL1",187,0)
 I $G(DGCOL)']"" S DGCOL=""
"RTN","DGENL1",188,0)
 I $G(DGON)']"" S DGON=""
"RTN","DGENL1",189,0)
 I $G(DGOFF)']"" S DGOFF=""
"RTN","DGENL1",190,0)
 I $G(DGSUB)']"" S DGSUB=""
"RTN","DGENL1",191,0)
 I $G(DGNUM)']"" S DGNUM=""
"RTN","DGENL1",192,0)
 I $G(DGDATA)']"" S DGDATA=""
"RTN","DGENL1",193,0)
 D SET^DGENL2(DGARY,DGLINE,DGTEXT,DGCOL,DGON,DGOFF,DGSUB,DGNUM,DGDATA,.DGCNT)
"RTN","DGENL1",194,0)
 Q
"RTN","DGENL1",195,0)
PHEART(DFN,DGENRIEN,PHENRDT) ;move to DGENL2
"RTN","DGENL1",196,0)
 N PHI,PHST,PHRR,PHDAT
"RTN","DGENL1",197,0)
 S PHDAT=$$PHEART^DGENL2(DFN,$G(DGENRIEN),$G(DGENR("DATETIME")))
"RTN","DGENL1",198,0)
 S PHI=$P(PHDAT,U),PHST=$P(PHDAT,U,2),PHRR=$P(PHDAT,U,3)
"RTN","DGENL1",199,0)
 I ($G(PHI)]""!($G(PHST)]"")!($G(PHRR)]"")) Q $G(PHI)_"^"_$G(PHST)_"^"_$G(PHRR)
"RTN","DGENL1",200,0)
 Q ""
"RTN","DGENPTA")
0^71^B39002320
"RTN","DGENPTA",1,0)
DGENPTA ;ALB/CJM,ERC,CKN - Patient API - Retrieve Data ; 8/15/08 11:17am
"RTN","DGENPTA",2,0)
 ;;5.3;Registration;**121,122,147,688**;Aug 13,1993;Build 29
"RTN","DGENPTA",3,0)
 ;
"RTN","DGENPTA",4,0)
VET(DFN) ;returns 1 if the patient is an eligible veteran
"RTN","DGENPTA",5,0)
 ;returns 0 if not a veteran or not eligible
"RTN","DGENPTA",6,0)
 ;
"RTN","DGENPTA",7,0)
 N VET S VET=0
"RTN","DGENPTA",8,0)
 I $G(DFN),$D(^DPT(DFN,0)) D
"RTN","DGENPTA",9,0)
 .S VET=1
"RTN","DGENPTA",10,0)
 .I $P($G(^DPT(DFN,"VET")),"^")="N" S VET=0
"RTN","DGENPTA",11,0)
 .I $P($G(^DPT(DFN,.15)),"^",2) S VET=0
"RTN","DGENPTA",12,0)
 Q VET
"RTN","DGENPTA",13,0)
 ;
"RTN","DGENPTA",14,0)
VET1(DFN) ;returns 1 if the patient is a veteran
"RTN","DGENPTA",15,0)
 ;returns 0 if not a veteran
"RTN","DGENPTA",16,0)
 ;
"RTN","DGENPTA",17,0)
 N VET S VET=0
"RTN","DGENPTA",18,0)
 I $G(DFN),$D(^DPT(DFN,0)) D
"RTN","DGENPTA",19,0)
 .I $P($G(^DPT(DFN,"VET")),"^")="Y" S VET=1
"RTN","DGENPTA",20,0)
 Q VET
"RTN","DGENPTA",21,0)
 ;
"RTN","DGENPTA",22,0)
ACTIVE(DFN,DGDT) ;
"RTN","DGENPTA",23,0)
 ;Description - Used to determine whether or not the patient has had a
"RTN","DGENPTA",24,0)
 ;  recent epiosode of inpatient or outpatient care.
"RTN","DGENPTA",25,0)
 ;Input:
"RTN","DGENPTA",26,0)
 ;  DFN - ien of record in Patient file
"RTN","DGENPTA",27,0)
 ;  DGDT - date used to specify how far back to go looking for episode
"RTN","DGENPTA",28,0)
 ;      of care
"RTN","DGENPTA",29,0)
 ;Output -
"RTN","DGENPTA",30,0)
 ;  returns 1 if recent episode of care, 0 otherwise
"RTN","DGENPTA",31,0)
 ;
"RTN","DGENPTA",32,0)
 ;!!!!!!! NOTE: This routine is not complete. !!!!!!!!!!!!!!!
"RTN","DGENPTA",33,0)
 ; Still need to define how user wants to define an 'active' patient.
"RTN","DGENPTA",34,0)
 ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
"RTN","DGENPTA",35,0)
 ;
"RTN","DGENPTA",36,0)
 Q 1
"RTN","DGENPTA",37,0)
 ;
"RTN","DGENPTA",38,0)
PREF(DFN,FACNAME) ;
"RTN","DGENPTA",39,0)
 ;Description: Used to determine the patient's preferred facility.
"RTN","DGENPTA",40,0)
 ;Input:
"RTN","DGENPTA",41,0)
 ;  DFN - an ien of a record in the PATIENT file
"RTN","DGENPTA",42,0)
 ;Output:     
"RTN","DGENPTA",43,0)
 ;  Function Value - Returns a pointer to the INSTITUTION file entry that
"RTN","DGENPTA",44,0)
 ;    is the patient's preferred facility, NULL if the preferred facility
"RTN","DGENPTA",45,0)
 ;    can not be determined.
"RTN","DGENPTA",46,0)
 ;  FACNAME - optional parm, pass by reference - returns institution name
"RTN","DGENPTA",47,0)
 ;
"RTN","DGENPTA",48,0)
 N FAC
"RTN","DGENPTA",49,0)
 S (FACNAME,FAC)=""
"RTN","DGENPTA",50,0)
 I $D(DFN),$D(^DPT(DFN,0)) S FAC=$P($G(^DPT(DFN,"ENR")),"^",2)
"RTN","DGENPTA",51,0)
 S:FAC FACNAME=$P($G(^DIC(4,FAC,0)),"^")
"RTN","DGENPTA",52,0)
 Q FAC
"RTN","DGENPTA",53,0)
 ;
"RTN","DGENPTA",54,0)
DEATH(DFN) ;
"RTN","DGENPTA",55,0)
 ;Description: Used to determine whether or not the patient is alive.
"RTN","DGENPTA",56,0)
 ;Input:
"RTN","DGENPTA",57,0)
 ;  DFN - an ien of a record in the PATIENT file
"RTN","DGENPTA",58,0)
 ;Output:     
"RTN","DGENPTA",59,0)
 ;  Function Value - Returns 0 if there is no record of the patient's
"RTN","DGENPTA",60,0)
 ;    death, otherwise returns the patients date of death
"RTN","DGENPTA",61,0)
 ;
"RTN","DGENPTA",62,0)
 N DATE S DATE=0
"RTN","DGENPTA",63,0)
 I $D(DFN),$D(^DPT(DFN,0)) S DATE=$P($G(^DPT(DFN,.35)),"^")
"RTN","DGENPTA",64,0)
 I DATE S DATE=(DATE\1) ;get rid of the time portion
"RTN","DGENPTA",65,0)
 Q +DATE
"RTN","DGENPTA",66,0)
 ;
"RTN","DGENPTA",67,0)
GET(DFN,DGPAT) ;
"RTN","DGENPTA",68,0)
 ;Description: Returns DGPAT() array with identifing infor for patient
"RTN","DGENPTA",69,0)
 ;  Input:
"RTN","DGENPTA",70,0)
 ;    DFN - ien, PATIENT file
"RTN","DGENPTA",71,0)
 ;  Output:
"RTN","DGENPTA",72,0)
 ;    Function Value - 1 on success, 0 on failure
"RTN","DGENPTA",73,0)
 ;    DGPAT() array (pass by reference)
"RTN","DGENPTA",74,0)
 ;      "DEATH" - date of death
"RTN","DGENPTA",75,0)
 ;      "DFN" - ien, PATIENT file
"RTN","DGENPTA",76,0)
 ;      "DOB" - date of birth
"RTN","DGENPTA",77,0)
 ;      "INELDATE" - INELIGIBLE DATE
"RTN","DGENPTA",78,0)
 ;      "INELREA" - INELIGIBLE REASON
"RTN","DGENPTA",79,0)
 ;      "INELDEC" - INELIGIBLE VARO DECISION
"RTN","DGENPTA",80,0)
 ;      "NAME" - patient name
"RTN","DGENPTA",81,0)
 ;      "PATYPE" - patient type
"RTN","DGENPTA",82,0)
 ;      "PID" - Primary Long ID
"RTN","DGENPTA",83,0)
 ;      "PREFAC" - prefered facility
"RTN","DGENPTA",84,0)
 ;      "SSN" - Social Security Number
"RTN","DGENPTA",85,0)
 ;      "SEX" - M=male, F=female
"RTN","DGENPTA",86,0)
 ;      "VETERAN" - VETERAN (Y/N)? - "Y"=YES,"N"=NO
"RTN","DGENPTA",87,0)
 ;      "AG/ALLY" - Agency/Allied Country
"RTN","DGENPTA",88,0)
 ;
"RTN","DGENPTA",89,0)
 N NODE
"RTN","DGENPTA",90,0)
 Q:'$G(DFN) 0
"RTN","DGENPTA",91,0)
 K DGPAT S DGPAT=""
"RTN","DGENPTA",92,0)
 S DGPAT("DFN")=DFN
"RTN","DGENPTA",93,0)
 S NODE=$G(^DPT(DFN,0))
"RTN","DGENPTA",94,0)
 Q:NODE="" 0
"RTN","DGENPTA",95,0)
 S DGPAT("NAME")=$P(NODE,"^")
"RTN","DGENPTA",96,0)
 S DGPAT("DOB")=$P(NODE,"^",3)
"RTN","DGENPTA",97,0)
 S DGPAT("SEX")=$P(NODE,"^",2)
"RTN","DGENPTA",98,0)
 S DGPAT("SSN")=$P(NODE,"^",9)
"RTN","DGENPTA",99,0)
 ;
"RTN","DGENPTA",100,0)
 S DGPAT("DEATH")=$P($G(^DPT(DFN,.35)),"^")
"RTN","DGENPTA",101,0)
 S DGPAT("PATYPE")=$P($G(^DPT(DFN,"TYPE")),"^")
"RTN","DGENPTA",102,0)
 S DGPAT("VETERAN")=$P($G(^DPT(DFN,"VET")),"^")
"RTN","DGENPTA",103,0)
 S DGPAT("PREFAC")=$P($G(^DPT(DFN,"ENR")),"^",2)
"RTN","DGENPTA",104,0)
 S DGPAT("INELDATE")=$P($G(^DPT(DFN,.15)),"^",2)
"RTN","DGENPTA",105,0)
 S DGPAT("INELREA")=$P($G(^DPT(DFN,.3)),"^",7)
"RTN","DGENPTA",106,0)
 S DGPAT("INELDEC")=$P($G(^DPT(DFN,"INE")),"^",6)
"RTN","DGENPTA",107,0)
 S DGPAT("PID")=$P($G(^DPT(DFN,.36)),"^",3)
"RTN","DGENPTA",108,0)
 S DGPAT("AG/ALLY")=$P($G(^DPT(DFN,.3)),"^",9)
"RTN","DGENPTA",109,0)
 Q 1
"RTN","DGENPTA",110,0)
 ;
"RTN","DGENPTA",111,0)
SSN(DFN) ;
"RTN","DGENPTA",112,0)
 ;Description: Function returns the patient's SSN, or "" on failure.
"RTN","DGENPTA",113,0)
 ;
"RTN","DGENPTA",114,0)
 Q:'DFN ""
"RTN","DGENPTA",115,0)
 Q $P($G(^DPT(DFN,0)),"^",9)
"RTN","DGENPTA",116,0)
 ;
"RTN","DGENPTA",117,0)
NAME(DFN) ;
"RTN","DGENPTA",118,0)
 ;Description: Function returns the patient's NAME, or "" on failure.
"RTN","DGENPTA",119,0)
 ;
"RTN","DGENPTA",120,0)
 Q:'DFN ""
"RTN","DGENPTA",121,0)
 Q $P($G(^DPT(DFN,0)),"^")
"RTN","DGENPTA",122,0)
 ;
"RTN","DGENPTA",123,0)
EXT(SUB,VAL) ;
"RTN","DGENPTA",124,0)
 ;Description: Given the subscript used in the PATIENT object array,
"RTN","DGENPTA",125,0)
 ;   DGPAT(), and a field value, returns the external representation of
"RTN","DGENPTA",126,0)
 ;   the value, as defined in the fields output transform of the PATIENT
"RTN","DGENPTA",127,0)
 ;   file.
"RTN","DGENPTA",128,0)
 ;Input: 
"RTN","DGENPTA",129,0)
 ;  SUB - array subscript
"RTN","DGENPTA",130,0)
 ;  VAL - field value
"RTN","DGENPTA",131,0)
 ;Output:
"RTN","DGENPTA",132,0)
 ;  Function Value - returns the external value of the field
"RTN","DGENPTA",133,0)
 ;
"RTN","DGENPTA",134,0)
 Q:(($G(SUB)="")!($G(VAL)="")) ""
"RTN","DGENPTA",135,0)
 ;
"RTN","DGENPTA",136,0)
 N FLD
"RTN","DGENPTA",137,0)
 S FLD=$$FIELD^DGENPTA1(SUB)
"RTN","DGENPTA",138,0)
 Q:(FLD="") ""
"RTN","DGENPTA",139,0)
 Q $$EXTERNAL^DILFD(2,FLD,"F",VAL)
"RTN","DGENPTA",140,0)
 ;
"RTN","DGENPTA",141,0)
 ;
"RTN","DGENPTA",142,0)
VALPAT(DFN) ; --
"RTN","DGENPTA",143,0)
 ; Description: This function returns a 1 if the patient DFN is valid, 0 if the patient DFN is not valid.
"RTN","DGENPTA",144,0)
 ;
"RTN","DGENPTA",145,0)
 ;  Input:
"RTN","DGENPTA",146,0)
 ;    DFN - as pointer to patient in Patient (#2) file
"RTN","DGENPTA",147,0)
 ;
"RTN","DGENPTA",148,0)
 ; Output:
"RTN","DGENPTA",149,0)
 ;   Function Value - Is patient (DFN) valid?
"RTN","DGENPTA",150,0)
 ;                    Return 1 if successful, otherwise 0
"RTN","DGENPTA",151,0)
 ;
"RTN","DGENPTA",152,0)
 ; init variables
"RTN","DGENPTA",153,0)
 N DGVALID S DGVALID=0
"RTN","DGENPTA",154,0)
 ;
"RTN","DGENPTA",155,0)
 ; is patient (DFN) valid?
"RTN","DGENPTA",156,0)
 I $G(DFN),$D(^DPT(DFN,0)) S DGVALID=1
"RTN","DGENPTA",157,0)
 ;
"RTN","DGENPTA",158,0)
 Q DGVALID
"RTN","DGENPTA",159,0)
 ;
"RTN","DGENPTA",160,0)
 ;
"RTN","DGENPTA",161,0)
CURINPAT(DFN) ; --
"RTN","DGENPTA",162,0)
 ; Description: This function will determine if the patient is a current inpatient.
"RTN","DGENPTA",163,0)
 ;
"RTN","DGENPTA",164,0)
 ;  Input:
"RTN","DGENPTA",165,0)
 ;    DFN - IEN of record in Patient (#2) file
"RTN","DGENPTA",166,0)
 ;
"RTN","DGENPTA",167,0)
 ; Output:
"RTN","DGENPTA",168,0)
 ;   Function Value - Is patient a current inpatient? 
"RTN","DGENPTA",169,0)
 ;                    Return 1 if successful, otherwise 0
"RTN","DGENPTA",170,0)
 ;
"RTN","DGENPTA",171,0)
 N DGCUR S DGCUR=0
"RTN","DGENPTA",172,0)
 ;
"RTN","DGENPTA",173,0)
 ; if valid patient, check if current inpatient
"RTN","DGENPTA",174,0)
 I $$VALPAT(DFN) D
"RTN","DGENPTA",175,0)
 .;
"RTN","DGENPTA",176,0)
 .; is patient a current inpatient?
"RTN","DGENPTA",177,0)
 .I $G(^DPT(DFN,.105)) S DGCUR=1
"RTN","DGENPTA",178,0)
 ;
"RTN","DGENPTA",179,0)
 Q DGCUR
"RTN","DGENPTA",180,0)
 ;
"RTN","DGENPTA",181,0)
 ;
"RTN","DGENPTA",182,0)
INPAT(DFN,DGBEG,DGEND) ; --
"RTN","DGENPTA",183,0)
 ; Description: This function will determine if a patient was an inpatient between a specified date range.
"RTN","DGENPTA",184,0)
 ;
"RTN","DGENPTA",185,0)
 ;  Input:
"RTN","DGENPTA",186,0)
 ;       DFN - IEN of record in Patient (#2) file
"RTN","DGENPTA",187,0)
 ;    DGBEG - as begin date/time for inpatient search
"RTN","DGENPTA",188,0)
 ;    DGEND - as end date/time for inpatient search
"RTN","DGENPTA",189,0)
 ;
"RTN","DGENPTA",190,0)
 ; Output:
"RTN","DGENPTA",191,0)
 ;   Function Value - Was patient an inpatient between date range?
"RTN","DGENPTA",192,0)
 ;                    Return 1 if successful, otherwise 0
"RTN","DGENPTA",193,0)
 ;
"RTN","DGENPTA",194,0)
 N DGINPAT,DGSDT,DGEDT,DGMOVE,DGTRANS
"RTN","DGENPTA",195,0)
 S DGINPAT=0
"RTN","DGENPTA",196,0)
 ;
"RTN","DGENPTA",197,0)
 ; if not valid patient (DFN) and not valid date range, exit
"RTN","DGENPTA",198,0)
 I '$$VALPAT(DFN),'($$RANGE(DGBEG,DGEND)) G INPATQ
"RTN","DGENPTA",199,0)
 ;
"RTN","DGENPTA",200,0)
 ; init date/time(s)
"RTN","DGENPTA",201,0)
 S DGSDT=DGBEG-.0001,DGEDT=DGEND+$S($P(DGEND,".",2)="":.2359,1:"")
"RTN","DGENPTA",202,0)
 ;
"RTN","DGENPTA",203,0)
 ; use "APRD" x-ref of Patient Movement (#405) file
"RTN","DGENPTA",204,0)
 F  S DGSDT=$O(^DGPM("APRD",+DFN,DGSDT)) Q:'DGSDT!(DGSDT>DGEDT)!(DGINPAT)  D
"RTN","DGENPTA",205,0)
 .S DGMOVE=0 F  S DGMOVE=$O(^DGPM("APRD",+DFN,DGSDT,DGMOVE)) Q:'DGMOVE!(DGINPAT)  D
"RTN","DGENPTA",206,0)
 ..; - transaction type of movement
"RTN","DGENPTA",207,0)
 ..S DGTRANS=$P($G(^DGPM(DGMOVE,0)),"^",2)  ; movement transaction type
"RTN","DGENPTA",208,0)
 ..; - if trans type not DISCHARGE, CHECK-IN LODGER, CHECK-OUT LODGER
"RTN","DGENPTA",209,0)
 ..I DGTRANS'=3,(DGTRANS'=4),(DGTRANS'=5) S DGINPAT=1
"RTN","DGENPTA",210,0)
 ;
"RTN","DGENPTA",211,0)
INPATQ Q DGINPAT
"RTN","DGENPTA",212,0)
 ;
"RTN","DGENPTA",213,0)
 ;
"RTN","DGENPTA",214,0)
OUTPAT(DFN,DGBEG,DGEND) ; --
"RTN","DGENPTA",215,0)
 ; Description: This function will determine if a patient has an outpatient encounter between a specified date range that has successfully been checked out.
"RTN","DGENPTA",216,0)
 ;
"RTN","DGENPTA",217,0)
 ;  Input:
"RTN","DGENPTA",218,0)
 ;       DFN - IEN of record in Patient (#2) file
"RTN","DGENPTA",219,0)
 ;    DGBEG - as begin date/time for outpatient search
"RTN","DGENPTA",220,0)
 ;    DGEND - as end date/time for outpatient search
"RTN","DGENPTA",221,0)
 ;
"RTN","DGENPTA",222,0)
 ; Output:
"RTN","DGENPTA",223,0)
 ;   Function Value - Does patient have outpatient encounter between date
"RTN","DGENPTA",224,0)
 ;                    range that that has successfully been checked out?
"RTN","DGENPTA",225,0)
 ;                    Return 1 if successful, otherwise 0
"RTN","DGENPTA",226,0)
 ;
"RTN","DGENPTA",227,0)
 N DGOUT,DGSDT,DGEDT,DGOE
"RTN","DGENPTA",228,0)
 S DGOUT=0
"RTN","DGENPTA",229,0)
 ;
"RTN","DGENPTA",230,0)
 ; if not valid patient (DFN) and not valid date range, exit
"RTN","DGENPTA",231,0)
 I '$$VALPAT(DFN),'($$RANGE(DGBEG,DGEND)) G OUTPATQ
"RTN","DGENPTA",232,0)
 ;
"RTN","DGENPTA",233,0)
 ; init date/time(s)
"RTN","DGENPTA",234,0)
 S DGSDT=DGBEG-.0001,DGEDT=DGEND+$S($P(DGEND,".",2)="":.2359,1:"")
"RTN","DGENPTA",235,0)
 ;
"RTN","DGENPTA",236,0)
 ; use "ADFN" x-ref of Outpatient Encounter (#409.68) file
"RTN","DGENPTA",237,0)
 F  S DGSDT=$O(^SCE("ADFN",+DFN,DGSDT)) Q:'DGSDT!(DGSDT>DGEDT)!(DGOUT)  D
"RTN","DGENPTA",238,0)
 .;
"RTN","DGENPTA",239,0)
 .S DGOE=0 F  S DGOE=$O(^SCE("ADFN",+DFN,DGSDT,DGOE)) Q:'DGOE!(DGOUT)  D
"RTN","DGENPTA",240,0)
 ..; - if encounter checked out, set flag
"RTN","DGENPTA",241,0)
 ..I $P($G(^SCE(+DGOE,0)),"^",7) S DGOUT=1
"RTN","DGENPTA",242,0)
 ;
"RTN","DGENPTA",243,0)
OUTPATQ Q DGOUT
"RTN","DGENPTA",244,0)
 ;
"RTN","DGENPTA",245,0)
 ;
"RTN","DGENPTA",246,0)
RANGE(DGBEG,DGEND) ; --
"RTN","DGENPTA",247,0)
 ; Description: This function returns a 1 if two dates are a valid date range, 0 if they are not valid.
"RTN","DGENPTA",248,0)
 ;
"RTN","DGENPTA",249,0)
 ;  Input:
"RTN","DGENPTA",250,0)
 ;    DGBEG - as begin date of date range
"RTN","DGENPTA",251,0)
 ;    DGEND - as end date of date range
"RTN","DGENPTA",252,0)
 ;
"RTN","DGENPTA",253,0)
 ; Output:
"RTN","DGENPTA",254,0)
 ;   Function Value - Is date range valid?
"RTN","DGENPTA",255,0)
 ;                    Return 1 if successful, otherwise 0
"RTN","DGENPTA",256,0)
 ;
"RTN","DGENPTA",257,0)
 N DGOK
"RTN","DGENPTA",258,0)
 ;
"RTN","DGENPTA",259,0)
 S DGOK=0
"RTN","DGENPTA",260,0)
 ;
"RTN","DGENPTA",261,0)
 ; if input parameters not defined, exit
"RTN","DGENPTA",262,0)
 I '$D(DGBEG),('$D(DGEND)) G RANGEQ
"RTN","DGENPTA",263,0)
 ;
"RTN","DGENPTA",264,0)
 ; remove time from dates
"RTN","DGENPTA",265,0)
 S DGBEG=(DGBEG/1),DGEND=(DGEND/1)
"RTN","DGENPTA",266,0)
 ;
"RTN","DGENPTA",267,0)
 ; if begin date greater than end date, exit
"RTN","DGENPTA",268,0)
 I DGBEG>DGEND G RANGEQ
"RTN","DGENPTA",269,0)
 ;
"RTN","DGENPTA",270,0)
 ; if begin date and end date future dates, exit
"RTN","DGENPTA",271,0)
 I DGBEG>DT,(DGEND>DT) G RANGEQ
"RTN","DGENPTA",272,0)
 ;
"RTN","DGENPTA",273,0)
 S DGOK=1
"RTN","DGENPTA",274,0)
 ;
"RTN","DGENPTA",275,0)
RANGEQ Q DGOK
"RTN","DGENPTA",276,0)
 ;
"RTN","DGENPTA",277,0)
LOOKUP(SSN,DOB,SEX,ERROR) ;
"RTN","DGENPTA",278,0)
 ;Description: This function will do a search for the patient based on
"RTN","DGENPTA",279,0)
 ;the identifying information provided. The function will be successful
"RTN","DGENPTA",280,0)
 ;only if a single patient is found matching the identifiers provided.
"RTN","DGENPTA",281,0)
 ;
"RTN","DGENPTA",282,0)
 ;Inputs:
"RTN","DGENPTA",283,0)
 ;  SSN - patient Social Security Number
"RTN","DGENPTA",284,0)
 ;  DOB - patient date of birth (FM format)
"RTN","DGENPTA",285,0)
 ;  SEX - patient sex
"RTN","DGENPTA",286,0)
 ;Outputs:
"RTN","DGENPTA",287,0)
 ;  Function Value - patient DFN if successful, 0 otherwise
"RTN","DGENPTA",288,0)
 ;  ERROR - if unsuccessful, an error message is returned (optional, pass by reference)
"RTN","DGENPTA",289,0)
 ;
"RTN","DGENPTA",290,0)
 N DFN,NODE
"RTN","DGENPTA",291,0)
 ;
"RTN","DGENPTA",292,0)
 I $G(SSN)="" S ERROR="INVALID SSN" Q 0
"RTN","DGENPTA",293,0)
 S DFN=$O(^DPT("SSN",SSN,0))
"RTN","DGENPTA",294,0)
 I 'DFN S ERROR="SSN NOT FOUND" Q 0
"RTN","DGENPTA",295,0)
 I $O(^DPT("SSN",SSN,DFN)) S ERROR="MULTIPLE PATIENTS MATCHING SSN" Q 0
"RTN","DGENPTA",296,0)
 S NODE=$G(^DPT(DFN,0))
"RTN","DGENPTA",297,0)
 I $P(NODE,"^",2)'=SEX S ERROR="SEX DOES NOT MATCH" Q 0
"RTN","DGENPTA",298,0)
 I $E($P(NODE,"^",3),1,3)'=$E(DOB,1,3) S ERROR="DOB DOES NOT MATCH" Q 0
"RTN","DGENPTA",299,0)
 I $E($P(NODE,"^",3),4,5),$E($P(NODE,"^",3),4,5)'=$E(DOB,4,5) S ERROR="DOB DOES NOT MATCH" Q 0
"RTN","DGENPTA",300,0)
 Q DFN
"RTN","DGENPTA1")
0^72^B20787602
"RTN","DGENPTA1",1,0)
DGENPTA1 ;ALB/CJM,EG,CKN,ERC - Patient API - File Data ; 8/15/08 11:18am
"RTN","DGENPTA1",2,0)
 ;;5.3;Registration;**121,147,314,677,659,653,688**;Aug 13,1993;Build 29
"RTN","DGENPTA1",3,0)
 ;
"RTN","DGENPTA1",4,0)
LOCK(DFN) ;
"RTN","DGENPTA1",5,0)
 ;Description: Given an internal entry number of a PATIENT  record, this
"RTN","DGENPTA1",6,0)
 ;   function will lock the record. It should be used when updating the
"RTN","DGENPTA1",7,0)
 ;   record.
"RTN","DGENPTA1",8,0)
 ;Input:
"RTN","DGENPTA1",9,0)
 ;  DFN - Patient IEN
"RTN","DGENPTA1",10,0)
 ;Output:
"RTN","DGENPTA1",11,0)
 ;  Function Value - Returns 1 if the lock was successful, 0 otherwise
"RTN","DGENPTA1",12,0)
 ;
"RTN","DGENPTA1",13,0)
 I $G(DFN) L +^DPT(DFN):2
"RTN","DGENPTA1",14,0)
 Q $T
"RTN","DGENPTA1",15,0)
UNLOCK(DFN) ;
"RTN","DGENPTA1",16,0)
 ;Description: Given an internal entry number of a record in the PATIENT
"RTN","DGENPTA1",17,0)
 ;   file, this function will unlock the record that was previously
"RTN","DGENPTA1",18,0)
 ;   locked by LOCK PATIENT RECORD.  
"RTN","DGENPTA1",19,0)
 ;Input:
"RTN","DGENPTA1",20,0)
 ;   DFN - Patient IEN
"RTN","DGENPTA1",21,0)
 ;Output: None
"RTN","DGENPTA1",22,0)
 ;
"RTN","DGENPTA1",23,0)
 I $G(DFN) L -^DPT(DFN)
"RTN","DGENPTA1",24,0)
 Q
"RTN","DGENPTA1",25,0)
 ;
"RTN","DGENPTA1",26,0)
STOREPRE(DFN,DGPREFAC) ;
"RTN","DGENPTA1",27,0)
 ;Description: Used to store the patient's preferred facility in the
"RTN","DGENPTA1",28,0)
 ;   patient record.
"RTN","DGENPTA1",29,0)
 ;Input:
"RTN","DGENPTA1",30,0)
 ;  DFN - Patient IEN
"RTN","DGENPTA1",31,0)
 ;  DGPREFAC - pointer to the a record in the INSTITUTION file. 
"RTN","DGENPTA1",32,0)
 ;Output:
"RTN","DGENPTA1",33,0)
 ;  Function Value - Returns 1 on success, 0 on failure.
"RTN","DGENPTA1",34,0)
 ;
"RTN","DGENPTA1",35,0)
 N SUCCESS,DATA
"RTN","DGENPTA1",36,0)
 S SUCCESS=1
"RTN","DGENPTA1",37,0)
 D  ;drops out if invalid condition found
"RTN","DGENPTA1",38,0)
 . I $G(DFN),$D(^DPT(DFN,0))
"RTN","DGENPTA1",39,0)
 . E  S SUCCESS=0 Q
"RTN","DGENPTA1",40,0)
 . I ($G(DGPREFAC)'=""),'$G(DGPREFAC) S SUCCESS=0 Q
"RTN","DGENPTA1",41,0)
 . I $G(DGPREFAC),'$D(^DIC(4,DGPREFAC,0)) S SUCCESS=0 Q
"RTN","DGENPTA1",42,0)
 . S DATA(27.02)=DGPREFAC
"RTN","DGENPTA1",43,0)
 . S SUCESS=$$UPD^DGENDBS(2,DFN,.DATA)
"RTN","DGENPTA1",44,0)
 Q SUCCESS
"RTN","DGENPTA1",45,0)
 ;
"RTN","DGENPTA1",46,0)
CHECK(DGPAT,ERROR) ;
"RTN","DGENPTA1",47,0)
 ;Description: Does validation checks on the patient contained in the
"RTN","DGENPTA1",48,0)
 ;DGPAT array.
"RTN","DGENPTA1",49,0)
 ;
"RTN","DGENPTA1",50,0)
 ;Input:
"RTN","DGENPTA1",51,0)
 ;  DGPAT - this local array contains patient data
"RTN","DGENPTA1",52,0)
 ;Output:
"RTN","DGENPTA1",53,0)
 ;  Function Value - returns 1 if all validation checks passed, 0 otherwise
"RTN","DGENPTA1",54,0)
 ;  ERROR - if validation checks fail, an error message is returned (pass by reference)
"RTN","DGENPTA1",55,0)
 ;
"RTN","DGENPTA1",56,0)
 ;
"RTN","DGENPTA1",57,0)
 N SUCCESS,FIELD
"RTN","DGENPTA1",58,0)
 S SUCCESS=1
"RTN","DGENPTA1",59,0)
 S ERROR=""
"RTN","DGENPTA1",60,0)
 ;
"RTN","DGENPTA1",61,0)
 ;check field values
"RTN","DGENPTA1",62,0)
 ;
"RTN","DGENPTA1",63,0)
 ;some of the field's input transforms require DA or DUZ to be defined, so do not do this
"RTN","DGENPTA1",64,0)
 ;F  S SUB=$O(DGPAT(SUB)) Q:SUB=""  D:(DGPAT(SUB)'="")  Q:'SUCCESS
"RTN","DGENPTA1",65,0)
 ;.S FIELD=$$FIELD(SUB)
"RTN","DGENPTA1",66,0)
 ;.I '$$TESTVAL^DGENDBS(2,FIELD,DGPAT(SUB)) D
"RTN","DGENPTA1",67,0)
 ;..S SUCCESS=0
"RTN","DGENPTA1",68,0)
 ;..S ERROR="BAD FIELD VALUE, PATIENT FILE FIELD = "_$$GET1^DID(2,FIELD,,"LABEL")
"RTN","DGENPTA1",69,0)
 ;
"RTN","DGENPTA1",70,0)
 ;instead, check field values without referencing DD
"RTN","DGENPTA1",71,0)
 I DGPAT("INELDEC")'="",($L(DGPAT("INELDEC"))>75)!($L(DGPAT("INELDEC"))<3) S SUCCESS=0,ERROR="BAD FIELD VALUE, PATIENT FIELD FIELD = INELIGIBLE VARO DECISION" G QCHECK
"RTN","DGENPTA1",72,0)
 ;
"RTN","DGENPTA1",73,0)
 I DGPAT("INELREA")'="",($L(DGPAT("INELREA"))>40) S SUCCESS=0,ERROR="BAD FIELD VALUE, PATIENT FIELD FIELD = INELIGIBLE REASON" G QCHECK
"RTN","DGENPTA1",74,0)
 ;
"RTN","DGENPTA1",75,0)
 I DGPAT("VETERAN")="" S SUCCESS=0,ERROR="BAD FIELD VALUE, PATIENT FIELD = VETERAN (Y/N)?" G QCHECK
"RTN","DGENPTA1",76,0)
 ;
"RTN","DGENPTA1",77,0)
 I DGPAT("DEATH"),(DGPAT("DEATH")>DT) S SUCCESS=0,ERROR="DATE OF DEATH CAN NOT BE A FUTURE DATE" G QCHECK
"RTN","DGENPTA1",78,0)
 ;
"RTN","DGENPTA1",79,0)
 I DGPAT("INELDATE"),(DGPAT("INELREA")="") S SUCCESS=0,ERROR="INELIGIBLE REASON UNSPECIFIED FOR INELIGIBLE PATIENT" G QCHECK
"RTN","DGENPTA1",80,0)
 ;
"RTN","DGENPTA1",81,0)
QCHECK ;
"RTN","DGENPTA1",82,0)
 Q SUCCESS
"RTN","DGENPTA1",83,0)
 ;
"RTN","DGENPTA1",84,0)
STORE(DGPAT,ERROR,NOCHECK) ;
"RTN","DGENPTA1",85,0)
 ;Description: Files data in the patient record.  It requires a lock
"RTN","DGENPTA1",86,0)
 ;on the Patient record, adn releases the lock when done.
"RTN","DGENPTA1",87,0)
 ;
"RTN","DGENPTA1",88,0)
 ;Input:
"RTN","DGENPTA1",89,0)
 ;  DGPAT- the patient array, passed by reference
"RTN","DGENPTA1",90,0)
 ;  NOCHECK - a flag, if set to 1 it means consistency checks were done aready, so skip
"RTN","DGENPTA1",91,0)
 ;
"RTN","DGENPTA1",92,0)
 ;Output:
"RTN","DGENPTA1",93,0)
 ;  Function Value - returns 1 if successful, otherwise 0
"RTN","DGENPTA1",94,0)
 ;  ERROR - on failure, an error message is returned (optional, pass by reference)
"RTN","DGENPTA1",95,0)
 ;
"RTN","DGENPTA1",96,0)
 S ERROR=""
"RTN","DGENPTA1",97,0)
 I '$D(DGPAT) S ERROR="PATIENT NOT FOUND" Q 0
"RTN","DGENPTA1",98,0)
 I '$$LOCK(DGPAT("DFN")) S ERROR="UNABLE TO LOCK THE PATIENT RECORD" Q 0
"RTN","DGENPTA1",99,0)
 I $G(NOCHECK)'=1 Q:'$$CHECK(.DGPAT,.ERROR) 0
"RTN","DGENPTA1",100,0)
 ;
"RTN","DGENPTA1",101,0)
 N DATA,SUB,FIELD,SUCCESS
"RTN","DGENPTA1",102,0)
 S SUB=""
"RTN","DGENPTA1",103,0)
 ;
"RTN","DGENPTA1",104,0)
 F  S SUB=$O(DGPAT(SUB)) Q:(SUB="")  I SUB'="DEATH" S FIELD=$$FIELD(SUB) I FIELD S DATA(FIELD)=$G(DGPAT(SUB))
"RTN","DGENPTA1",105,0)
 S SUCCESS=$$UPD^DGENDBS(2,DGPAT("DFN"),.DATA)
"RTN","DGENPTA1",106,0)
 I 'SUCCESS S ERROR="FILEMAN UNABLE TO UPDATE PATIENT RECORD"
"RTN","DGENPTA1",107,0)
 ; Call Purple Heart API to file PH data in file 2
"RTN","DGENPTA1",108,0)
 I SUCCESS,$D(DGPAT("PHI")) D EDITPH^DGRPLE($G(DGPAT("PHI")),$G(DGPAT("PHST")),$G(DGPAT("PHRR")),DGPAT("DFN"))
"RTN","DGENPTA1",109,0)
 ; Call POW API to file POW data in file 2 - DG*5.3*653
"RTN","DGENPTA1",110,0)
 ;I SUCCESS,$D(DGPAT("POWI")) D EDITPOW^DGRPLE($G(DGPAT("POWI")),$G(DGPAT("POWLOC")),$G(DGPAT("POWFDT")),$G(DGPAT("POWTDT")),DGPAT("DFN"))
"RTN","DGENPTA1",111,0)
 I SUCCESS D
"RTN","DGENPTA1",112,0)
 . I '$D(DGPAT("POWI")) D  Q
"RTN","DGENPTA1",113,0)
 . . N DATA,ERROR,DGENDA
"RTN","DGENPTA1",114,0)
 . . S DGENDA=DGPAT("DFN")
"RTN","DGENPTA1",115,0)
 . . S (DATA(.525),DATA(.526),DATA(.527),DATA(.528),DATA(.529))="@"
"RTN","DGENPTA1",116,0)
 . . I '$$UPD^DGENDBS(2,.DGENDA,.DATA,.ERROR) D
"RTN","DGENPTA1",117,0)
 . . . D ADDMSG^DGENUPL3(.MSGS,"Unable to update POW Data.",1)
"RTN","DGENPTA1",118,0)
 . . K DATA,ERROR,DGENDA
"RTN","DGENPTA1",119,0)
 . D EDITPOW^DGRPLE($G(DGPAT("POWI")),$G(DGPAT("POWLOC")),$G(DGPAT("POWFDT")),$G(DGPAT("POWTDT")),DGPAT("DFN"))
"RTN","DGENPTA1",120,0)
 D UNLOCK(DGPAT("DFN"))
"RTN","DGENPTA1",121,0)
 Q SUCCESS
"RTN","DGENPTA1",122,0)
 ;
"RTN","DGENPTA1",123,0)
FIELD(SUB) ;
"RTN","DGENPTA1",124,0)
 ;Description: Returns the field number of a subscript for the PATIENT object.
"RTN","DGENPTA1",125,0)
 ;
"RTN","DGENPTA1",126,0)
 N FNUM
"RTN","DGENPTA1",127,0)
 S FNUM=$S(SUB="DEATH":.351,SUB="PATYPE":391,SUB="VETERAN":1901,SUB="NAME":.01,SUB="DOB":.03,SUB="SEX":.02,SUB="SSN":.09,SUB="PREFAC":27.02,SUB="AG/ALLY":.309,1:"")
"RTN","DGENPTA1",128,0)
 S:'FNUM FNUM=$S(SUB="INELDATE":.152,SUB="INELREA":.307,SUB="INELDEC":.1656,SUB="PID":.363,SUB="EMGRES":.181,1:"")
"RTN","DGENPTA1",129,0)
 I FNUM="" S FNUM=$S(SUB="IR":.32103,SUB="RADEXPM":.3212,SUB="APPREQ":1010.159,SUB="APPREQDT":1010.1511,1:"")
"RTN","DGENPTA1",130,0)
 Q FNUM
"RTN","DGENU")
0^79^B39450626
"RTN","DGENU",1,0)
DGENU ;ALB/CJM,ISA/KWP,Zoltan,LBD,EG,CKN,ERC - Enrollment Utilities; 04/24/2006 9:20 AM
"RTN","DGENU",2,0)
 ;;5.3;Registration;**121,122,147,232,314,564,624,672,659,653,688**;Aug 13,1993;Build 29
"RTN","DGENU",3,0)
 ;
"RTN","DGENU",4,0)
DISPLAY(DFN) ;
"RTN","DGENU",5,0)
 ;Description: Display status message, current enrollment and
"RTN","DGENU",6,0)
 ;     preferred facility information
"RTN","DGENU",7,0)
 ;Input:
"RTN","DGENU",8,0)
 ;  DFN - Patient IEN
"RTN","DGENU",9,0)
 ;  Output:     none
"RTN","DGENU",10,0)
 ;
"RTN","DGENU",11,0)
 N STATUS
"RTN","DGENU",12,0)
 S STATUS=$$STATUS^DGENA(DFN)
"RTN","DGENU",13,0)
 I 'STATUS W !!,"Patient is NOT enrolled in the VA Patient Enrollment System..."
"RTN","DGENU",14,0)
 E  I STATUS=2 D
"RTN","DGENU",15,0)
 .W !!,"Patient is enrolled in the VA Patient Enrollment System..."
"RTN","DGENU",16,0)
 ; Purple Heart added status 21
"RTN","DGENU",17,0)
 E  I (STATUS=9)!(STATUS=1)!(STATUS=15)!(STATUS=16)!(STATUS=17)!(STATUS=18)!(STATUS=21) D
"RTN","DGENU",18,0)
 .W !!,"Application is pending for enrollment in the VA Patient Enrollment System..."
"RTN","DGENU",19,0)
 E  D
"RTN","DGENU",20,0)
 .W !!,"Patient is NOT enrolled in the VA Patient Enrollment System..."
"RTN","DGENU",21,0)
 D CUR(DFN)
"RTN","DGENU",22,0)
 Q
"RTN","DGENU",23,0)
 ;
"RTN","DGENU",24,0)
CUR(DFN) ;
"RTN","DGENU",25,0)
 ;Description - displays current enrollment, category, enrollment group threshold, and preferred facility
"RTN","DGENU",26,0)
 ;
"RTN","DGENU",27,0)
 N FACNAME,PREFAC,DGEGT,DGEGTIEN,DGENCAT,DGENR,IORVON,IORVOFF
"RTN","DGENU",28,0)
 I $$GET^DGENA($$FINDCUR^DGENA(DFN),.DGENR)
"RTN","DGENU",29,0)
 ;Get enrollment category
"RTN","DGENU",30,0)
 S DGENCAT=$$CATEGORY^DGENA4(DFN)
"RTN","DGENU",31,0)
 ;Display Category in reverse video
"RTN","DGENU",32,0)
 D REV
"RTN","DGENU",33,0)
 ;Get enrollment group threshold
"RTN","DGENU",34,0)
 S DGEGTIEN=$$FINDCUR^DGENEGT
"RTN","DGENU",35,0)
 S DGEGT=$$GET^DGENEGT(DGEGTIEN,.DGEGT)
"RTN","DGENU",36,0)
 ;Preferred facility
"RTN","DGENU",37,0)
 S PREFAC=$$PREF^DGENPTA(DFN,.FACNAME)
"RTN","DGENU",38,0)
 W !?3,"Enrollment Date",?35,": ",$S('$G(DGENR("DATE")):"-none-",1:$$EXT^DGENU("DATE",DGENR("DATE")))
"RTN","DGENU",39,0)
 W !?3,"Enrollment Application Date",?35,": ",$S('$G(DGENR("APP")):"-none-",1:$$EXT^DGENU("DATE",DGENR("APP")))
"RTN","DGENU",40,0)
 W !?3,IORVON,"Enrollment Category             : ",$S($G(DGENCAT)="":"-none-",1:$$EXTERNAL^DILFD(27.15,.02,"",DGENCAT)),IORVOFF
"RTN","DGENU",41,0)
 W !?3,"Enrollment Status",?35,": ",$S($G(DGENR("STATUS"))="":"-none-",1:$$EXT^DGENU("STATUS",DGENR("STATUS")))
"RTN","DGENU",42,0)
 W !?3,"Enrollment Priority",?35,": ",$S($G(DGENR("PRIORITY"))="":"-none-",1:DGENR("PRIORITY")),$S($G(DGENR("SUBGRP"))="":"",1:$$EXT("SUBGRP",DGENR("SUBGRP")))
"RTN","DGENU",43,0)
 W !?3,"Preferred Facility",?35,": ",$S($G(FACNAME)'="":FACNAME,1:"-none-")
"RTN","DGENU",44,0)
 W !?3,"Enrollment Group Threshold",?35,": ",$S($G(DGEGT("PRIORITY"))="":"-none-",1:$$EXTERNAL^DILFD(27.16,.02,"",$G(DGEGT("PRIORITY")))),$S($G(DGEGT("SUBGRP"))="":"",1:$$EXTERNAL^DILFD(27.16,.03,"",$G(DGEGT("SUBGRP"))))
"RTN","DGENU",45,0)
 W !
"RTN","DGENU",46,0)
 Q
"RTN","DGENU",47,0)
REV ;Get variables to display text in reverse video
"RTN","DGENU",48,0)
 N X
"RTN","DGENU",49,0)
 S X="IORVON;IORVOFF"
"RTN","DGENU",50,0)
 D ENDR^%ZISS
"RTN","DGENU",51,0)
 Q
"RTN","DGENU",52,0)
PATID(DFN) ;
"RTN","DGENU",53,0)
 ;Description - Called by FileMan as an identifier for the Patient file.
"RTN","DGENU",54,0)
 ;Displays current enrollment status, priority, and preferred facility.
"RTN","DGENU",55,0)
 ;
"RTN","DGENU",56,0)
 ;Input:
"RTN","DGENU",57,0)
 ;  DFN - ien to Patient file
"RTN","DGENU",58,0)
 ;
"RTN","DGENU",59,0)
 N PREFAC,DGENR,OUTPUT
"RTN","DGENU",60,0)
 I '$$GET^DGENA($$FINDCUR^DGENA(DFN),.DGENR) D
"RTN","DGENU",61,0)
 .S OUTPUT="NO ENROLLMENT APPLICATION ON FILE "
"RTN","DGENU",62,0)
 E  D
"RTN","DGENU",63,0)
 .S OUTPUT=$E("PRIORITY:"_DGENR("PRIORITY")_"   ",1,12)_$E("STATUS:"_$$EXT^DGENU("STATUS",DGENR("STATUS"))_"         ",1,26)
"RTN","DGENU",64,0)
 S PREFAC=$$PREF^DGENPTA(DFN)
"RTN","DGENU",65,0)
 S:PREFAC OUTPUT=OUTPUT_"PREFERRED FACILITY:"_$P($G(^DIC(4,PREFAC,99)),"^")
"RTN","DGENU",66,0)
 I $G(IOM) I ($X#$G(IOM))<6 D
"RTN","DGENU",67,0)
 .D EN^DDIOL(OUTPUT,,"?($X+(10-($X#IOM)))")
"RTN","DGENU",68,0)
 E  D
"RTN","DGENU",69,0)
 .D EN^DDIOL(OUTPUT,,"!?10")
"RTN","DGENU",70,0)
 Q
"RTN","DGENU",71,0)
 ;
"RTN","DGENU",72,0)
EXT(SUB,VAL) ;
"RTN","DGENU",73,0)
 ;Description: Given the subscript used in the PATIENT ENROLLMENT array,
"RTN","DGENU",74,0)
 ;     and a field value, returns the external representation of the
"RTN","DGENU",75,0)
 ;     value, as defined in the fields output transform of the PATIENT
"RTN","DGENU",76,0)
 ;     ENROLLMENT file.
"RTN","DGENU",77,0)
 ;Input: 
"RTN","DGENU",78,0)
 ;  SUB - subscript in the array defined by the PATIENT ENROLLMENT object
"RTN","DGENU",79,0)
 ;  VAL - value of the PATIENT ENROLLMENT object attribute named by SUB
"RTN","DGENU",80,0)
 ;Output:
"RTN","DGENU",81,0)
 ;  Function Value - returns the external value of the attribute as
"RTN","DGENU",82,0)
 ;     defined by the PATIENT ENROLLMENT file
"RTN","DGENU",83,0)
 ;
"RTN","DGENU",84,0)
 Q:(($G(SUB)="")!($G(VAL)="")) ""
"RTN","DGENU",85,0)
 ;
"RTN","DGENU",86,0)
 N FLD
"RTN","DGENU",87,0)
 S FLD=$$FIELD(SUB)
"RTN","DGENU",88,0)
 ;
"RTN","DGENU",89,0)
 Q:(FLD="") ""
"RTN","DGENU",90,0)
 Q $$EXTERNAL^DILFD(27.11,FLD,"F",VAL)
"RTN","DGENU",91,0)
 ;
"RTN","DGENU",92,0)
FIELD(SUB) ;
"RTN","DGENU",93,0)
 ;Description: given a subscript in the enrollment array, returns the
"RTN","DGENU",94,0)
 ;     corresponding field number
"RTN","DGENU",95,0)
 N FLD S FLD=""
"RTN","DGENU",96,0)
 D  ;drops out of block once SUB is determined
"RTN","DGENU",97,0)
 .I SUB="APP" S FLD=.01 Q
"RTN","DGENU",98,0)
 .I SUB="DATE" S FLD=.1 Q
"RTN","DGENU",99,0)
 .I SUB="END" S FLD=.11 Q
"RTN","DGENU",100,0)
 .I SUB="DFN" S FLD=.02 Q
"RTN","DGENU",101,0)
 .I SUB="SOURCE" S FLD=.03 Q
"RTN","DGENU",102,0)
 .I SUB="STATUS" S FLD=.04 Q
"RTN","DGENU",103,0)
 .I SUB="REASON" S FLD=.05 Q
"RTN","DGENU",104,0)
 .I SUB="REMARKS" S FLD=25 Q
"RTN","DGENU",105,0)
 .I SUB="FACREC" S FLD=.06 Q
"RTN","DGENU",106,0)
 .I SUB="PRIORITY" S FLD=.07 Q
"RTN","DGENU",107,0)
 .I SUB="EFFDATE" S FLD=.08 Q
"RTN","DGENU",108,0)
 .I SUB="PRIORREC" S FLD=.09 Q
"RTN","DGENU",109,0)
 .I SUB="SUBGRP" S FLD=.12 Q
"RTN","DGENU",110,0)
 .I SUB="CODE" S FLD=50.01 Q
"RTN","DGENU",111,0)
 .I SUB="SC" S FLD=50.02 Q
"RTN","DGENU",112,0)
 .I SUB="SCPER" S FLD=50.03 Q
"RTN","DGENU",113,0)
 .I SUB="POW" S FLD=50.04 Q
"RTN","DGENU",114,0)
 .I SUB="A&A" S FLD=50.05 Q
"RTN","DGENU",115,0)
 .I SUB="HB" S FLD=50.06 Q
"RTN","DGENU",116,0)
 .I SUB="VAPEN" S FLD=50.07 Q
"RTN","DGENU",117,0)
 .I SUB="VACKAMT" S FLD=50.08 Q
"RTN","DGENU",118,0)
 .I SUB="DISRET" S FLD=50.09 Q
"RTN","DGENU",119,0)
 .I SUB="DISLOD" S FLD=50.2 Q  ;field added with DG*5.3*672
"RTN","DGENU",120,0)
 .I SUB="MEDICAID" S FLD=50.1 Q
"RTN","DGENU",121,0)
 .I SUB="AO" S FLD=50.11 Q
"RTN","DGENU",122,0)
 .I SUB="AOEXPLOC" S FLD=50.22 Q  ;field added with DG*5.3*688
"RTN","DGENU",123,0)
 .I SUB="IR" S FLD=50.12 Q
"RTN","DGENU",124,0)
 .I SUB="EC" S FLD=50.13 Q    ;name now SW Asia Con, was Env Con DG*5.3*688
"RTN","DGENU",125,0)
 .I SUB="MTSTA" S FLD=50.14 Q
"RTN","DGENU",126,0)
 .I SUB="VCD" S FLD=50.15 Q
"RTN","DGENU",127,0)
 .I SUB="PH" S FLD=50.16 Q
"RTN","DGENU",128,0)
 .I SUB="UNEMPLOY" S FLD=50.17 Q
"RTN","DGENU",129,0)
 .I SUB="CVELEDT" S FLD=50.18 Q
"RTN","DGENU",130,0)
 .I SUB="SHAD" S FLD=50.19 Q  ;field added with DG*5.3*653
"RTN","DGENU",131,0)
 .I SUB="DATETIME" S FLD=75.01 Q
"RTN","DGENU",132,0)
 .I SUB="USER" S FLD=75.02 Q
"RTN","DGENU",133,0)
 .I SUB="RADEXPM" S FLD=76 Q
"RTN","DGENU",134,0)
 Q FLD
"RTN","DGENU",135,0)
 ;
"RTN","DGENU",136,0)
PROMPT(FILE,FIELD,DEFAULT,RESPONSE,REQUIRE,PRMPTNM) ;
"RTN","DGENU",137,0)
 ;Description: requests user to enter a single field value.
"RTN","DGENU",138,0)
 ;Input:
"RTN","DGENU",139,0)
 ;  FILE - the file #
"RTN","DGENU",140,0)
 ;  FIELD - the field #
"RTN","DGENU",141,0)
 ;  DEFAULT - default value, internal form
"RTN","DGENU",142,0)
 ;  REQUIRE - a flag, (+value)'=0 means to require a value to be
"RTN","DGENU",143,0)
 ;            entered and to return failure otherwise (optional)
"RTN","DGENU",144,0)
 ;  PRMPTNM - Optional
"RTN","DGENU",145,0)
 ;             0 - display field LABEL
"RTN","DGENU",146,0)
 ;             1 - Prompt field TITLE
"RTN","DGENU",147,0)
 ;Output:
"RTN","DGENU",148,0)
 ;  Function Value - 0 on failure, 1 on success
"RTN","DGENU",149,0)
 ;  RESPONSE - value entered by user, pass by reference
"RTN","DGENU",150,0)
 ;
"RTN","DGENU",151,0)
 Q:(('$G(FILE))!('$G(FIELD))) 0
"RTN","DGENU",152,0)
 S REQUIRE=$G(REQUIRE)
"RTN","DGENU",153,0)
 S PRMPTNM=$G(PRMPTNM)
"RTN","DGENU",154,0)
 N DIR,DA,QUIT,AGAIN
"RTN","DGENU",155,0)
 ;
"RTN","DGENU",156,0)
 S DIR(0)=FILE_","_FIELD_$S($G(REQUIRE):"",1:"O")_"AO"
"RTN","DGENU",157,0)
 I $G(DEFAULT)'="" DO
"RTN","DGENU",158,0)
 . S:+$G(PRMPTNM)=0 DIR("A")=$$GET1^DID(FILE,FIELD,"","LABEL")_": "_$$EXTERNAL^DILFD(FILE,FIELD,"F",DEFAULT)_"// "
"RTN","DGENU",159,0)
 . S:+$G(PRMPTNM)>0 DIR("A")=$$GET1^DID(FILE,FIELD,"","TITLE")_": "_$$EXTERNAL^DILFD(FILE,FIELD,"F",DEFAULT)_"// "
"RTN","DGENU",160,0)
 S QUIT=0
"RTN","DGENU",161,0)
 F  D  Q:QUIT
"RTN","DGENU",162,0)
 . D ^DIR
"RTN","DGENU",163,0)
 . I $D(DTOUT)!$D(DUOUT) S QUIT=1 Q
"RTN","DGENU",164,0)
 . I X="@" D  Q:AGAIN
"RTN","DGENU",165,0)
 . . S AGAIN=0
"RTN","DGENU",166,0)
 . . I 'REQUIRE,"Yy"'[$E($$YN^DGENCD1("  Are you sure")_"X") S AGAIN=1 Q
"RTN","DGENU",167,0)
 . . S RESPONSE="" ; This might trigger the "required" message below.
"RTN","DGENU",168,0)
 . E  I X="" S RESPONSE=$G(DEFAULT)
"RTN","DGENU",169,0)
 . E  S RESPONSE=$P(Y,"^")
"RTN","DGENU",170,0)
 . ;
"RTN","DGENU",171,0)
 . ; quit this loop if the user entered value OR value not required
"RTN","DGENU",172,0)
 . I RESPONSE'="" S QUIT=1 Q
"RTN","DGENU",173,0)
 . I 'REQUIRE S QUIT=1 Q
"RTN","DGENU",174,0)
 . W !,"This is a required response. Enter '^' to exit"
"RTN","DGENU",175,0)
 I $D(DTOUT)!$D(DUOUT) Q 0
"RTN","DGENU",176,0)
 Q 1
"RTN","DGENU",177,0)
 ;
"RTN","DGENU",178,0)
INST() ;
"RTN","DGENU",179,0)
 ; Description: Determine the institution affiliation associated with a user.
"RTN","DGENU",180,0)
 ;
"RTN","DGENU",181,0)
 ;  Input:
"RTN","DGENU",182,0)
 ;     DUZ(2) - Pointer to the INSTITUTION (#4) file (institution
"RTN","DGENU",183,0)
 ;              affiliated with user, prompted at Kernel sign-on)
"RTN","DGENU",184,0)
 ;
"RTN","DGENU",185,0)
 ; Output:
"RTN","DGENU",186,0)
 ;   Function Value - Returns pointer to the INSTITUTION (#4) file
"RTN","DGENU",187,0)
 ;    entry that is associated with the user, otherwise the pointer
"RTN","DGENU",188,0)
 ;    to the INSTITUTION (#4) file entry of the primary VA Medical
"RTN","DGENU",189,0)
 ;    Center division is returned.
"RTN","DGENU",190,0)
 ;
"RTN","DGENU",191,0)
 Q $S($G(DUZ(2)):DUZ(2),1:$P($$SITE^VASITE(),"^"))
"RTN","DGENU",192,0)
 ;
"RTN","DGENU",193,0)
GETINST(DGPREFAC,DGINST) ;Get Institution file data
"RTN","DGENU",194,0)
 ; Input  -- DGPREFAC Institution file IEN
"RTN","DGENU",195,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","DGENU",196,0)
 ;           DGINST - Institution file Array
"RTN","DGENU",197,0)
 N DGINST0,DGINST99,DGOKF
"RTN","DGENU",198,0)
 S DGINST0=$G(^DIC(4,DGPREFAC,0)) G GETQ:DGINST0=""
"RTN","DGENU",199,0)
 S DGINST("NAME")=$P(DGINST0,U)
"RTN","DGENU",200,0)
 S DGINST99=$G(^DIC(4,DGPREFAC,99))
"RTN","DGENU",201,0)
 S DGINST("STANUM")=$P(DGINST99,U)
"RTN","DGENU",202,0)
 S DGOKF=1
"RTN","DGENU",203,0)
GETQ Q +$G(DGOKF)
"RTN","DGENUPL")
0^96^B44426570
"RTN","DGENUPL",1,0)
DGENUPL ;ALB/CJM,ISA/KWP,TDM,CKN,BAJ - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 8/15/08 12:40pm
"RTN","DGENUPL",2,0)
 ;;5.3;REGISTRATION;**147,222,232,363,472,497,564,677,672,688**;Aug 13,1993;Build 29
"RTN","DGENUPL",3,0)
 ;Phase II Moved Z11 to DGENUPL7
"RTN","DGENUPL",4,0)
ORUZ11(MSGIEN,ERRCOUNT) ;
"RTN","DGENUPL",5,0)
 ;Description:  This procedure is used to process a batch of ORU~Z11
"RTN","DGENUPL",6,0)
 ;messages or a single ORU~Z11 message.The processing consists of
"RTN","DGENUPL",7,0)
 ;uploading the patient enrollment and eligibility data.
"RTN","DGENUPL",8,0)
 ;
"RTN","DGENUPL",9,0)
 ;Input:
"RTN","DGENUPL",10,0)
 ;  MSGIEN - the ien of the HL7 message in the HL7 MESSAGE TEXT file
"RTN","DGENUPL",11,0)
 ;Output:
"RTN","DGENUPL",12,0)
 ;  ERRCOUNT - count of messages that were not processed due to
"RTN","DGENUPL",13,0)
 ;    errors encountered  (pass by reference)
"RTN","DGENUPL",14,0)
 ;
"RTN","DGENUPL",15,0)
 N CURLINE,SSN,DOB,SEX,SEG,MSGID,DFN,ERRMSG,TMPARRY,ICN
"RTN","DGENUPL",16,0)
 ;
"RTN","DGENUPL",17,0)
 K ^TMP("IVM","HLS",$J)
"RTN","DGENUPL",18,0)
 ;
"RTN","DGENUPL",19,0)
 ;initialize HL7 variable
"RTN","DGENUPL",20,0)
 S HLSDT="IVMQ" ;location of error message
"RTN","DGENUPL",21,0)
 ;
"RTN","DGENUPL",22,0)
 S CURLINE=1
"RTN","DGENUPL",23,0)
 D ADVANCE(MSGIEN,.CURLINE)
"RTN","DGENUPL",24,0)
 Q:'CURLINE
"RTN","DGENUPL",25,0)
 F  Q:'CURLINE  D  D ADVANCE(MSGIEN,.CURLINE)
"RTN","DGENUPL",26,0)
 .D GETSEG(MSGIEN,CURLINE,.SEG)
"RTN","DGENUPL",27,0)
 .S MSGID=SEG(10)
"RTN","DGENUPL",28,0)
 .D NXTSEG(MSGIEN,CURLINE,.SEG)
"RTN","DGENUPL",29,0)
 .I SEG("TYPE")'="PID" D ADDERROR(MSGID,,"PID SEGMENT MISSING",.ERRCOUNT) Q
"RTN","DGENUPL",30,0)
 .;S DFN=$$LOOKUP^DGENPTA(SEG(19),$$FMDATE^HLFNC(SEG(7)),SEG(8),.ERRMSG)
"RTN","DGENUPL",31,0)
 .M TMPARY(3)=SEG(3) D PARSPID3^IVMUFNC(.TMPARY,.PID3ARY)
"RTN","DGENUPL",32,0)
 .S DFN=$G(PID3ARY("PI")),ICN=$G(PID3ARY("NI"))
"RTN","DGENUPL",33,0)
 .K TMPARY,PID3ARY
"RTN","DGENUPL",34,0)
 .I '$$MATCH^IVMUFNC(DFN,ICN,"","","I",.ERRMSG) D ADDERROR(MSGID,SEG(19),ERRMSG,.ERRCOUNT) Q
"RTN","DGENUPL",35,0)
 .;I 'DFN D ADDERROR(MSGID,SEG(19),ERRMSG,.ERRCOUNT) Q
"RTN","DGENUPL",36,0)
 .D Z11^DGENUPL7(MSGIEN,MSGID,.CURLINE,DFN,.ERRCOUNT)
"RTN","DGENUPL",37,0)
 S HLEVN=+$G(ERRCOUNT) ;# of events included in the reply
"RTN","DGENUPL",38,0)
 M ^TMP("HLS",$J)=^TMP("IVM","HLS",$J)                     ;DG*5.3*472
"RTN","DGENUPL",39,0)
 K ^TMP("IVM","HLS",$J)
"RTN","DGENUPL",40,0)
 Q
"RTN","DGENUPL",41,0)
 ;
"RTN","DGENUPL",42,0)
ORFZ11(MSGIEN,MSGID) ;
"RTN","DGENUPL",43,0)
 ;Description:  This procedure is used to process an ORF~Z11 message
"RTN","DGENUPL",44,0)
 ;It uploads the patient enrollment and eligibility data.
"RTN","DGENUPL",45,0)
 ;An acknowledgment is returned.
"RTN","DGENUPL",46,0)
 ;
"RTN","DGENUPL",47,0)
 ;Input:
"RTN","DGENUPL",48,0)
 ;  MSGIEN - the internal entry number of the HL7 message in the HL7 MESSAGE TEXT file (772)
"RTN","DGENUPL",49,0)
 ;  MSGID - the message control id from the MSH segment
"RTN","DGENUPL",50,0)
 ;
"RTN","DGENUPL",51,0)
 ;Output: none
"RTN","DGENUPL",52,0)
 ;
"RTN","DGENUPL",53,0)
 N CURLINE,DFN,QUERYIEN,QARRAY,QRYMSGID,ERRCOUNT,HECERROR,SEG,DGRESENT
"RTN","DGENUPL",54,0)
 N TMPARRY,PID3ARRY,ICN
"RTN","DGENUPL",55,0)
 ;CURLINE tracks current line in the message
"RTN","DGENUPL",56,0)
 ;QUERYIEN  the ien of query in the ENROLLMENT QUERY LOG
"RTN","DGENUPL",57,0)
 ;QRYMSGID  the Message Controll ID of the query
"RTN","DGENUPL",58,0)
 ;QARRAY  array containing the ENROLLMENT QUERY LOG record
"RTN","DGENUPL",59,0)
 ;HECERROR  error message returned by HEC in response to query
"RTN","DGENUPL",60,0)
 ;DGRESENT  flag=1 if query was resent
"RTN","DGENUPL",61,0)
 ;
"RTN","DGENUPL",62,0)
 S (QUERYIEN,ERRCOUNT)=0
"RTN","DGENUPL",63,0)
 ;
"RTN","DGENUPL",64,0)
 ;initialize HL7 variable
"RTN","DGENUPL",65,0)
 S HLSDT="IVMQ" ;subscript in ^TMP( global for ACK message
"RTN","DGENUPL",66,0)
 ;
"RTN","DGENUPL",67,0)
 K ^TMP("IVM","HLS",$J)
"RTN","DGENUPL",68,0)
 ;
"RTN","DGENUPL",69,0)
 S CURLINE=1
"RTN","DGENUPL",70,0)
 S HECERROR=""
"RTN","DGENUPL",71,0)
 ;
"RTN","DGENUPL",72,0)
 D  ;drops out on error
"RTN","DGENUPL",73,0)
 .D NXTSEG(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL",74,0)
 .I SEG("TYPE")'="MSA" D ADDERROR(MSGID,,"MISSING MSA SEGMENT",.ERRCOUNT) Q
"RTN","DGENUPL",75,0)
 .;trace the reply back to the query
"RTN","DGENUPL",76,0)
 .S QRYMSGID=SEG(2)
"RTN","DGENUPL",77,0)
 .S QUERYIEN=$$FINDMSG^DGENQRY(QRYMSGID)
"RTN","DGENUPL",78,0)
 .I 'QUERYIEN D ADDERROR(MSGID,,"NO RECORD OF QUERY",.ERRCOUNT) Q
"RTN","DGENUPL",79,0)
 .I QUERYIEN,'$$GET^DGENQRY(QUERYIEN,.QARRAY) D ADDERROR(MSGID,,"NO RECORD OF QUERY",.ERRCOUNT) Q
"RTN","DGENUPL",80,0)
 .S DFN=QARRAY("DFN")
"RTN","DGENUPL",81,0)
 .I (SEG(1)="AR")!(SEG(1)="AE") D  Q
"RTN","DGENUPL",82,0)
 ..;HEC was unable to reply to the query. If due to incorrect patient
"RTN","DGENUPL",83,0)
 ..;info, then resend the query, otherwise just log it as unsuccessful
"RTN","DGENUPL",84,0)
 ..N SSN,DOB,SEX,DGPAT,HECMSG
"RTN","DGENUPL",85,0)
 ..S HECMSG=SEG(3)
"RTN","DGENUPL",86,0)
 ..D NXTSEG(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL",87,0)
 ..Q:(SEG("TYPE")'="QRD")
"RTN","DGENUPL",88,0)
 ..S SSN=SEG(8)
"RTN","DGENUPL",89,0)
 ..D NXTSEG(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL",90,0)
 ..Q:(SEG("TYPE")'="QRF")
"RTN","DGENUPL",91,0)
 ..S DOB=$$FMDATE^HLFNC(SEG(4))
"RTN","DGENUPL",92,0)
 ..S SEX=SEG(5)
"RTN","DGENUPL",93,0)
 ..;if patient id info incorrect, resend the query
"RTN","DGENUPL",94,0)
 ..I $$GET^DGENPTA(DFN,.DGPAT),((DOB'=DGPAT("DOB"))!(SEX'=DGPAT("SEX"))) I $$RESEND^DGENQRY1(QUERYIEN) S DGRESENT=1 Q
"RTN","DGENUPL",95,0)
 ..S HECERROR="HEC UNABLE TO RESPOND TO QUERY- "_HECMSG Q
"RTN","DGENUPL",96,0)
 .;
"RTN","DGENUPL",97,0)
 .F SEG="QRD","QRF" D NXTSEG(MSGIEN,.CURLINE,.SEG) I SEG("TYPE")'=SEG D ADDERROR(MSGID,,SEG_" SEGMENT MISSING",.ERRCOUNT) Q
"RTN","DGENUPL",98,0)
 .S SEG="PID" D NXTSEG(MSGIEN,CURLINE,.SEG) I SEG("TYPE")'=SEG D ADDERROR(MSGID,,SEG_" SEGMENT MISSING",.ERRCOUNT) Q
"RTN","DGENUPL",99,0)
 .;S CURLINE=CURLINE-1 ;should point to line before PID
"RTN","DGENUPL",100,0)
 .;I $$SSN^DGENPTA(DFN)'=SEG(19) D ADDERROR(MSGID,,"SSN DOES NOT MATCH",.ERRCOUNT) Q
"RTN","DGENUPL",101,0)
 .M TMPARY(3)=SEG(3) D PARSPID3^IVMUFNC(.TMPARY,.PID3ARY)
"RTN","DGENUPL",102,0)
 .S DFN=$G(PID3ARY("PI")),ICN=$G(PID3ARY("NI"))
"RTN","DGENUPL",103,0)
 .K TMPARY,PID3ARY
"RTN","DGENUPL",104,0)
 .I '$$MATCH^IVMUFNC(DFN,ICN,"","","I",.ERRMSG) D ADDERROR(MSGID,,ERRMSG,.ERRCOUNT) Q
"RTN","DGENUPL",105,0)
 .D Z11^DGENUPL7(MSGIEN,MSGID,.CURLINE,DFN,.ERRCOUNT)
"RTN","DGENUPL",106,0)
 ;
"RTN","DGENUPL",107,0)
 ;update the query log
"RTN","DGENUPL",108,0)
 I $G(HECERROR)="",ERRCOUNT S HECERROR="UPLOAD FAILED DUE TO CONSISTENCY CHECKS"
"RTN","DGENUPL",109,0)
 I '$G(DGRESENT),$$RECEIVE^DGENQRY1(QUERYIEN,HECERROR,MSGID)
"RTN","DGENUPL",110,0)
 ;
"RTN","DGENUPL",111,0)
 S HLEVN=+$G(ERRCOUNT) ;# of events included in the reply
"RTN","DGENUPL",112,0)
 ;
"RTN","DGENUPL",113,0)
 ;if there was no error, create an 'AA' ack
"RTN","DGENUPL",114,0)
 ;I 'ERRCOUNT D ACCEPT^DGENUPL1(MSGID)                  ;DG*5.3*472
"RTN","DGENUPL",115,0)
 ;D MVERRORS^DGENUPL1                                   ;DG*5.3*472
"RTN","DGENUPL",116,0)
 ;transmit the ack
"RTN","DGENUPL",117,0)
 ;********************************************************
"RTN","DGENUPL",118,0)
 ;7.12.01;KSD; COMMENTED OUT. DON'T SEND ACK TO ORF
"RTN","DGENUPL",119,0)
 ;I $D(HLTRANS) S HLARYTYP="GB",HLFORMAT=1 D GENACK^HLMA1(HLEID,HLMTIENS,HLEIDS,HLARYTYP,HLFORMAT,.HLRESLTA,HLMTIEN)
"RTN","DGENUPL",120,0)
 ;
"RTN","DGENUPL",121,0)
 Q
"RTN","DGENUPL",122,0)
 ;
"RTN","DGENUPL",123,0)
ADDERROR(MSGID,SSN,ERRMSG,ERRCOUNT) ;
"RTN","DGENUPL",124,0)
 ;Description - writes an error message to a global. It will be
"RTN","DGENUPL",125,0)
 ;transmitted in the ack later.
"RTN","DGENUPL",126,0)
 ;
"RTN","DGENUPL",127,0)
 ;Inputs:
"RTN","DGENUPL",128,0)
 ;  MSGID -message control id of HL7 msg in the MSH segment
"RTN","DGENUPL",129,0)
 ;  SSN - patient social security number
"RTN","DGENUPL",130,0)
 ;  ERRMSG - the error message
"RTN","DGENUPL",131,0)
 ;  ERRCOUNT - count of errors written so far
"RTN","DGENUPL",132,0)
 ;
"RTN","DGENUPL",133,0)
 ;Outputs: none
"RTN","DGENUPL",134,0)
 ;
"RTN","DGENUPL",135,0)
 S ERRCOUNT=+$G(ERRCOUNT)
"RTN","DGENUPL",136,0)
 ;
"RTN","DGENUPL",137,0)
 I (ERRCOUNT*2)+1=1 D
"RTN","DGENUPL",138,0)
 . K HL,HLMID,HLMTIEN,HLDT,HLDT1
"RTN","DGENUPL",139,0)
 . D INIT^HLFNC2(HLEID,.HL)
"RTN","DGENUPL",140,0)
 . D CREATE^HLTF(.HLMID,.HLMTIEN,.HLDT,.HLDT1)
"RTN","DGENUPL",141,0)
 K HLRES
"RTN","DGENUPL",142,0)
 S MID=HLMID_"-"_((ERRCOUNT*2)+1)
"RTN","DGENUPL",143,0)
 D MSH^HLFNC2(.HL,MID,.HLRES)
"RTN","DGENUPL",144,0)
 S ^TMP("IVM","HLS",$J,(ERRCOUNT*2)+1)=HLRES
"RTN","DGENUPL",145,0)
 S ^TMP("IVM","HLS",$J,(ERRCOUNT*2)+2)="MSA"_HLFS_"AE"_HLFS_MSGID_HLFS_ERRMSG_" - SSN "_$S($L($G(SSN)):SSN,1:"NOT FOUND")
"RTN","DGENUPL",146,0)
 S ERRCOUNT=ERRCOUNT+1
"RTN","DGENUPL",147,0)
 ;Put in error message in HECERROR to be included in the NOTIFY message for a solicited query
"RTN","DGENUPL",148,0)
 I $D(HECERROR) S HECERROR=ERRMSG
"RTN","DGENUPL",149,0)
 Q
"RTN","DGENUPL",150,0)
 ;
"RTN","DGENUPL",151,0)
NXTSEG(MSGIEN,CURLINE,SEG) ;
"RTN","DGENUPL",152,0)
 ;Description: Returns the next segment
"RTN","DGENUPL",153,0)
 ;
"RTN","DGENUPL",154,0)
 ;Input:
"RTN","DGENUPL",155,0)
 ;  MSGIEN - ien in HL7 MESSAGE TEXT file
"RTN","DGENUPL",156,0)
 ;  CURLINE - subscript of the current segment
"RTN","DGENUPL",157,0)
 ;
"RTN","DGENUPL",158,0)
 ;Output:
"RTN","DGENUPL",159,0)
 ;  SEG - an array with the fields of the segment (pass by reference)
"RTN","DGENUPL",160,0)
 ;  CURLINE - upon exiting, will be the subscript of the next segment
"RTN","DGENUPL",161,0)
 ;
"RTN","DGENUPL",162,0)
 S CURLINE=CURLINE+1
"RTN","DGENUPL",163,0)
 D GETSEG(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL",164,0)
 Q
"RTN","DGENUPL",165,0)
 ;
"RTN","DGENUPL",166,0)
GETSEG(MSGIEN,CURLINE,SEG) ;
"RTN","DGENUPL",167,0)
 ;returns the current segment
"RTN","DGENUPL",168,0)
 ;
"RTN","DGENUPL",169,0)
 ;Input:
"RTN","DGENUPL",170,0)
 ;  MSGIEN - ien in HL7 MESSAGE TEXT file
"RTN","DGENUPL",171,0)
 ;  CURLINE - subscript of the current segment
"RTN","DGENUPL",172,0)
 ;
"RTN","DGENUPL",173,0)
 ;Output:
"RTN","DGENUPL",174,0)
 ;  SEG - an array with the fields of the segment (pass by reference)
"RTN","DGENUPL",175,0)
 ;
"RTN","DGENUPL",176,0)
 N SEGMENT,I,CNTR,NOPID,PIDSTR,IVMPID,SEGHLD,CNTR2
"RTN","DGENUPL",177,0)
 I $G(SEG)'="" S SEGHLD=SEG
"RTN","DGENUPL",178,0)
 K SEG
"RTN","DGENUPL",179,0)
 S SEG=$G(SEGHLD)
"RTN","DGENUPL",180,0)
 S CNTR=1,NOPID=0
"RTN","DGENUPL",181,0)
 S:$G(HLFS)="" HLFS=$G(HL("FS")) S:HLFS="" HLFS="^"
"RTN","DGENUPL",182,0)
 S SEGMENT=$G(^TMP($J,IVMRTN,CURLINE,0))
"RTN","DGENUPL",183,0)
 S SEG("TYPE")=$E(SEGMENT,1,3)
"RTN","DGENUPL",184,0)
 ;Strip double quotes from the following segments.  DG*5.3*688
"RTN","DGENUPL",185,0)
 I SEG("TYPE")="ZRD" D
"RTN","DGENUPL",186,0)
 .S SEGMENT=$$CLEARF^IVMPRECA(SEGMENT,HLFS)
"RTN","DGENUPL",187,0)
 I SEG("TYPE")="PID" D  Q
"RTN","DGENUPL",188,0)
 .S PIDSTR(CNTR)=$P(SEGMENT,HLFS,2,99)
"RTN","DGENUPL",189,0)
 .F I=1:1 D  Q:NOPID
"RTN","DGENUPL",190,0)
 ..S CURLINE=CURLINE+1,SEGMENT=$G(^TMP($J,IVMRTN,CURLINE,0))
"RTN","DGENUPL",191,0)
 ..I $E(SEGMENT,1,4)="ZPD^" S NOPID=1,CURLINE=CURLINE-1 Q
"RTN","DGENUPL",192,0)
 ..S CNTR=CNTR+1,PIDSTR(CNTR)=SEGMENT
"RTN","DGENUPL",193,0)
 .D BLDPID^IVMPREC6(.PIDSTR,.IVMPID)
"RTN","DGENUPL",194,0)
 .;convert "" to null for PID segment
"RTN","DGENUPL",195,0)
 .S CNTR="" F  S CNTR=$O(IVMPID(CNTR)) Q:CNTR=""  D
"RTN","DGENUPL",196,0)
 ..I $O(IVMPID(CNTR,"")) D  Q
"RTN","DGENUPL",197,0)
 ...S CNTR2="" F  S CNTR2=$O(IVMPID(CNTR,CNTR2)) Q:CNTR2=""  D
"RTN","DGENUPL",198,0)
 ....S IVMPID(CNTR,CNTR2)=$$CLEARF^IVMPRECA(IVMPID(CNTR,CNTR2),$E(HLECH))
"RTN","DGENUPL",199,0)
 ..I IVMPID(CNTR)="""""" S IVMPID(CNTR)=""
"RTN","DGENUPL",200,0)
 .M SEG=IVMPID
"RTN","DGENUPL",201,0)
 ;
"RTN","DGENUPL",202,0)
 ;the MSH & BHS segs contain as their first piece the field separator, which makes breaKing the seqment into fields a bit different
"RTN","DGENUPL",203,0)
 I (SEG("TYPE")="MSH")!(SEG("TYPE")="BHS") D
"RTN","DGENUPL",204,0)
 .S SEG(1)=$E(SEGMENT,4)
"RTN","DGENUPL",205,0)
 .F I=2:1:30 S SEG(I)=$P(SEGMENT,HLFS,I)
"RTN","DGENUPL",206,0)
 E  D
"RTN","DGENUPL",207,0)
 .F I=2:1:41 S SEG(I-1)=$P(SEGMENT,HLFS,I)
"RTN","DGENUPL",208,0)
 Q
"RTN","DGENUPL",209,0)
 ;
"RTN","DGENUPL",210,0)
ADVANCE(MSGIEN,CURLINE) ;
"RTN","DGENUPL",211,0)
 ;Description: Used to find the begining of the next message in the batch.
"RTN","DGENUPL",212,0)
 ;
"RTN","DGENUPL",213,0)
 ;Input:
"RTN","DGENUPL",214,0)
 ;  MSGIEN - ien of message in the HL7 MESSAGE TEXT file.
"RTN","DGENUPL",215,0)
 ;  CURLINE - current position in the message
"RTN","DGENUPL",216,0)
 ;Output:
"RTN","DGENUPL",217,0)
 ;  CURLINE - starting position of next message in the batch, or 0 if 
"RTN","DGENUPL",218,0)
 ;    the end of the message is reached
"RTN","DGENUPL",219,0)
 ;
"RTN","DGENUPL",220,0)
 Q:'CURLINE
"RTN","DGENUPL",221,0)
 F  S CURLINE=$O(^TMP($J,IVMRTN,CURLINE)) Q:'CURLINE  Q:$E($G(^TMP($J,IVMRTN,CURLINE,0)),1,3)="MSH"
"RTN","DGENUPL",222,0)
 S CURLINE=+CURLINE
"RTN","DGENUPL",223,0)
 Q
"RTN","DGENUPL1")
0^73^B36244583
"RTN","DGENUPL1",1,0)
DGENUPL1 ;ALB/CJM,ISA/KWP,CKN - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 8/15/08 11:22am
"RTN","DGENUPL1",2,0)
 ;;5.3;REGISTRATION;**147,222,232,314,397,379,407,363,673,653,688**;Aug 13,1993;Build 29
"RTN","DGENUPL1",3,0)
 ;
"RTN","DGENUPL1",4,0)
 ;
"RTN","DGENUPL1",5,0)
PARSE(MSGIEN,MSGID,CURLINE,ERRCOUNT,DGPAT,DGELG,DGENR,DGCDIS,DGOEIF,DGSEC,DGNTR,DGMST) ;
"RTN","DGENUPL1",6,0)
 ;Description:  This function parses the HL7 segments.  It creates arrays
"RTN","DGENUPL1",7,0)
 ;defined by the PATIENT, ENROLLMENT, ELIGIBILY, CATASTROPHIC DISABILITY,
"RTN","DGENUPL1",8,0)
 ;OEF/OIF CONFLICT objects.
"RTN","DGENUPL1",9,0)
 ;Field values are put in DHCP format and the validity at the
"RTN","DGENUPL1",10,0)
 ;field level is tested.  Fields to be deleted are set to "@".
"RTN","DGENUPL1",11,0)
 ;
"RTN","DGENUPL1",12,0)
 ;Input:
"RTN","DGENUPL1",13,0)
 ;  MSGIEN - the ien of the HL7 message in the HL7 MESSAGE TEXT file (772)
"RTN","DGENUPL1",14,0)
 ;  MSGID -message control id of HL7 msg in the MSH segment
"RTN","DGENUPL1",15,0)
 ;  CURLINE - the subscript of the PID segment of the current message (pass by reference)
"RTN","DGENUPL1",16,0)
 ;  ERRCOUNT - is a count of the number of messages in the batch that can not be processed (pass by ref)
"RTN","DGENUPL1",17,0)
 ;
"RTN","DGENUPL1",18,0)
 ;Output:
"RTN","DGENUPL1",19,0)
 ;  Function Value: Returns 1 on success, 0 on failure.
"RTN","DGENUPL1",20,0)
 ;  CURLINE - upon leaving the procedure this parameter should be set to the end of the current message.
"RTN","DGENUPL1",21,0)
 ;  ERRCOUNT - set to count of messages that were not processed due to errors encountered. (pass by ref)
"RTN","DGENUPL1",22,0)
 ;  DGPAT - array defined by the PATIENT object. (pass by ref)
"RTN","DGENUPL1",23,0)
 ;  DGENR - array defined by the PATIENT ENROLLMENT object. (pass by ref)
"RTN","DGENUPL1",24,0)
 ;  DGELG - array defined by the PATIENT ELIGIBILITY object. (pass by ref)
"RTN","DGENUPL1",25,0)
 ;  DGCDIS - array defined by the CATASTROPHIC DISABILITY object. (pass by ref)
"RTN","DGENUPL1",26,0)
 ;  DGSEC - array defined by the PATIENT SECURITY object. (pass by ref)
"RTN","DGENUPL1",27,0)
 ;  DGOEIF - array defined by the OEF/OIF CONFLICT object.  (pass by ref)
"RTN","DGENUPL1",28,0)
 ;  DGNTR - array defined for NTR data.
"RTN","DGENUPL1",29,0)
 ;  DGMST - array defined for MST data.
"RTN","DGENUPL1",30,0)
 N SEG,ERROR,COUNT,QFLG,NFLG
"RTN","DGENUPL1",31,0)
 ;
"RTN","DGENUPL1",32,0)
 K DGEN,DGPAT,DGELG,DGCDIS,DGNTR,DGMST
"RTN","DGENUPL1",33,0)
 ;
"RTN","DGENUPL1",34,0)
 S ERROR=0,NFLG=1
"RTN","DGENUPL1",35,0)
 F SEG="PID","ZPD","ZIE","ZIO","ZEL"  D  Q:ERROR
"RTN","DGENUPL1",36,0)
 .D:NFLG NXTSEG^DGENUPL(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL1",37,0)
 .I SEG="ZIO",SEG("TYPE")'="ZIO" S NFLG=0 Q
"RTN","DGENUPL1",38,0)
 .I SEG("TYPE")=SEG D  Q
"RTN","DGENUPL1",39,0)
 ..D:(SEG'="ZEL") @SEG^DGENUPL2
"RTN","DGENUPL1",40,0)
 ..D:(SEG="ZEL") ZEL^DGENUPL2(1)
"RTN","DGENUPL1",41,0)
 ..S NFLG=1
"RTN","DGENUPL1",42,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),SEG_" SEGMENT MISSING OR OUT OF ORDER",.ERRCOUNT)
"RTN","DGENUPL1",43,0)
 .S ERROR=1
"RTN","DGENUPL1",44,0)
 .;
"RTN","DGENUPL1",45,0)
 .;possible that in a bad message we are now past the end
"RTN","DGENUPL1",46,0)
 .S CURLINE=CURLINE-1
"RTN","DGENUPL1",47,0)
 ;
"RTN","DGENUPL1",48,0)
 I 'ERROR F COUNT=2:1 D NXTSEG^DGENUPL(MSGIEN,CURLINE,.SEG) Q:(SEG("TYPE")'="ZEL")  D  Q:ERROR
"RTN","DGENUPL1",49,0)
 .S CURLINE=CURLINE+1
"RTN","DGENUPL1",50,0)
 .D ZEL^DGENUPL2(COUNT)
"RTN","DGENUPL1",51,0)
 ;Phase II Add the capability to accept more than 1 ZCD
"RTN","DGENUPL1",52,0)
 I 'ERROR F SEG="ZEN","ZMT","ZCD" D  Q:ERROR
"RTN","DGENUPL1",53,0)
 .D NXTSEG^DGENUPL(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL1",54,0)
 .I SEG("TYPE")=SEG D
"RTN","DGENUPL1",55,0)
 ..D @SEG^DGENUPL2
"RTN","DGENUPL1",56,0)
 .E  D
"RTN","DGENUPL1",57,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),SEG_" SEGMENT MISSING OR OUTOF ORDER",.ERRCOUNT)
"RTN","DGENUPL1",58,0)
 ..S ERROR=1
"RTN","DGENUPL1",59,0)
 ..;
"RTN","DGENUPL1",60,0)
 ..;possible that in a bad message we are now past the end
"RTN","DGENUPL1",61,0)
 ..S CURLINE=CURLINE-1
"RTN","DGENUPL1",62,0)
 ;
"RTN","DGENUPL1",63,0)
 I 'ERROR F COUNT=2:1 D NXTSEG^DGENUPL(MSGIEN,CURLINE,.SEG) Q:(SEG("TYPE")'="ZCD")  D  Q:ERROR
"RTN","DGENUPL1",64,0)
 .S CURLINE=CURLINE+1
"RTN","DGENUPL1",65,0)
 .D ZCD^DGENUPL2
"RTN","DGENUPL1",66,0)
 ;
"RTN","DGENUPL1",67,0)
 ; Purple Heart/OEF-OIF  Addition of optional ZMH segment
"RTN","DGENUPL1",68,0)
 ;              Modified handling of ZSP and ZRD to accomodate ZMH
"RTN","DGENUPL1",69,0)
 ;
"RTN","DGENUPL1",70,0)
 I 'ERROR D  Q:ERROR $S(ERROR:0,1:1)
"RTN","DGENUPL1",71,0)
 .D NXTSEG^DGENUPL(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL1",72,0)
 .I SEG("TYPE")="ZSP" D ZSP^DGENUPL2 Q
"RTN","DGENUPL1",73,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),SEG_" SEGMENT MISSING OR OUT OF ORDER",.ERRCOUNT)
"RTN","DGENUPL1",74,0)
 .S ERROR=1
"RTN","DGENUPL1",75,0)
 .;possible that in a bad message we are now past the end
"RTN","DGENUPL1",76,0)
 .S CURLINE=CURLINE-1
"RTN","DGENUPL1",77,0)
 ;
"RTN","DGENUPL1",78,0)
 ;Modified following code to receive multiple ZMH segment for
"RTN","DGENUPL1",79,0)
 ;Military service information - DG*5.3*653
"RTN","DGENUPL1",80,0)
 I 'ERROR D  Q:ERROR $S(ERROR:0,1:1)
"RTN","DGENUPL1",81,0)
 .D NXTSEG^DGENUPL(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL1",82,0)
 .S QFLG=0 F  D  Q:QFLG
"RTN","DGENUPL1",83,0)
 . . I SEG("TYPE")'="ZMH" S QFLG=1 Q
"RTN","DGENUPL1",84,0)
 . . D ZMH^DGENUPL2,NXTSEG^DGENUPL(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL1",85,0)
 .I SEG("TYPE")="ZRD" D ZRD^DGENUPL2 Q 
"RTN","DGENUPL1",86,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),SEG_" SEGMENT MISSING OR OUT OF ORDER",.ERRCOUNT)
"RTN","DGENUPL1",87,0)
 .S ERROR=1
"RTN","DGENUPL1",88,0)
 .;possible that in a bad message we are now past the end
"RTN","DGENUPL1",89,0)
 .S CURLINE=CURLINE-1
"RTN","DGENUPL1",90,0)
 ;
"RTN","DGENUPL1",91,0)
 I 'ERROR F COUNT=2:1 D NXTSEG^DGENUPL(MSGIEN,CURLINE,.SEG) Q:(SEG("TYPE")'="ZRD")  D  Q:ERROR
"RTN","DGENUPL1",92,0)
 .S CURLINE=CURLINE+1
"RTN","DGENUPL1",93,0)
 .D ZRD^DGENUPL2
"RTN","DGENUPL1",94,0)
 ;
"RTN","DGENUPL1",95,0)
 I 'ERROR F  D  Q:(ERROR!(SEG("TYPE")'="OBX"))
"RTN","DGENUPL1",96,0)
 .;possible if OBX segment not present that we are now past the end
"RTN","DGENUPL1",97,0)
 .I SEG("TYPE")'="OBX" S CURLINE=CURLINE-1 Q
"RTN","DGENUPL1",98,0)
 .D OBX^DGENUPL2
"RTN","DGENUPL1",99,0)
 .S CURLINE=CURLINE+1
"RTN","DGENUPL1",100,0)
 .D NXTSEG^DGENUPL(MSGIEN,CURLINE,.SEG)
"RTN","DGENUPL1",101,0)
 ;
"RTN","DGENUPL1",102,0)
 Q $S(ERROR:0,1:1)
"RTN","DGENUPL1",103,0)
 ;
"RTN","DGENUPL1",104,0)
CONVERT(VAL,DATATYPE,ERROR) ;
"RTN","DGENUPL1",105,0)
 ;Description: Converts the value found in the HL7 segment to DHCP format
"RTN","DGENUPL1",106,0)
 ;
"RTN","DGENUPL1",107,0)
 ;Input:
"RTN","DGENUPL1",108,0)
 ;  VAL - value parsed from the HL7 segment
"RTN","DGENUPL1",109,0)
 ;  DATATYPE: indicates the type of conversion necessary
"RTN","DGENUPL1",110,0)
 ;      "DATE" - needs to be converted to FM format
"RTN","DGENUPL1",111,0)
 ;      "TS" - time stamp, needs to be converted to FM format
"RTN","DGENUPL1",112,0)
 ;      "Y/N" - 0->"N",1->"Y"
"RTN","DGENUPL1",113,0)
 ;      "1/0" - "Y"->1,"N"->0
"RTN","DGENUPL1",114,0)
 ;      "INSTITUTION" - needs to convert the station number with suffix to a point to the INSTITUTION file
"RTN","DGENUPL1",115,0)
 ;      "ELIGIBILITY" - VAL is a pointer to the national eligibility code file (#8.1), needs to be converted to a local eligibility code (file #8)
"RTN","DGENUPL1",116,0)
 ;
"RTN","DGENUPL1",117,0)
 ;      "MT" - VAL  is a Means Test Status code, it needs to be converted
"RTN","DGENUPL1",118,0)
 ;             to a pointer to the Means Test Status file
"RTN","DGENUPL1",119,0)
 ;       Phase II convert code to RSN IEN for DGCDIS object
"RTN","DGENUPL1",120,0)
 ;       "CDRSN" data type converts the codes diagnosis,procedure,condition to RSN IEN. (HL7TORSN^DGENA5)
"RTN","DGENUPL1",121,0)
 ;       "EXT" convert from code to abbreviation
"RTN","DGENUPL1",122,0)
 ;       "POS" convert from Period of Service code to a point to Period of Service file
"RTN","DGENUPL1",123,0)
 ;       "AGENCY" convert Agency/Allied Country code from file 35
"RTN","DGENUPL1",124,0)
 ;OUTPUT:
"RTN","DGENUPL1",125,0)
 ;  Function Value - the result of the conversion
"RTN","DGENUPL1",126,0)
 ;  ERROR - set to 1 if an error is detected, 0 otherwise (optional,pass by ref)
"RTN","DGENUPL1",127,0)
 ;
"RTN","DGENUPL1",128,0)
 S ERROR=0
"RTN","DGENUPL1",129,0)
 D
"RTN","DGENUPL1",130,0)
 .I VAL="" Q
"RTN","DGENUPL1",131,0)
 .I VAL="""""" S VAL="@" Q
"RTN","DGENUPL1",132,0)
 .I $G(DATATYPE)="EXT" D  Q
"RTN","DGENUPL1",133,0)
 ..S VAL=$$HLTOLIMB^DGENA5(VAL)
"RTN","DGENUPL1",134,0)
 .I $G(DATATYPE)="CDRSN" D  Q
"RTN","DGENUPL1",135,0)
 ..S VAL=$$HL7TORSN^DGENA5(VAL)
"RTN","DGENUPL1",136,0)
 .I ($G(DATATYPE)="MT") D  Q
"RTN","DGENUPL1",137,0)
 ..S VAL=$O(^DG(408.32,"AC",1,VAL,0))
"RTN","DGENUPL1",138,0)
 ..I 'VAL S ERROR=1
"RTN","DGENUPL1",139,0)
 .I ($G(DATATYPE)="DATE") D  Q
"RTN","DGENUPL1",140,0)
 ..I $L(VAL)'=8 S ERROR=1 Q
"RTN","DGENUPL1",141,0)
 ..S VAL=$$FMDATE^HLFNC(VAL)
"RTN","DGENUPL1",142,0)
 ..I ((VAL'=+VAL)!($L($P(VAL,"."))<7)) S ERROR=1
"RTN","DGENUPL1",143,0)
 .I ($G(DATATYPE)="TS") D  Q
"RTN","DGENUPL1",144,0)
 ..I $L(VAL)<8 S ERROR=1 Q
"RTN","DGENUPL1",145,0)
 ..S VAL=$$FMDATE^HLFNC(VAL)
"RTN","DGENUPL1",146,0)
 ..I ((VAL'=+VAL)!($L($P(VAL,"."))<7)) S ERROR=1
"RTN","DGENUPL1",147,0)
 .I ($G(DATATYPE)="Y/N") D  Q
"RTN","DGENUPL1",148,0)
 ..I VAL=0 S VAL="N" Q
"RTN","DGENUPL1",149,0)
 ..I VAL=1 S VAL="Y" Q
"RTN","DGENUPL1",150,0)
 ..S ERROR=1
"RTN","DGENUPL1",151,0)
 .I ($G(DATATYPE)="1/0") D  Q
"RTN","DGENUPL1",152,0)
 ..I VAL="N" S VAL=0 Q
"RTN","DGENUPL1",153,0)
 ..I VAL="Y" S VAL=1 Q
"RTN","DGENUPL1",154,0)
 ..S ERROR=1
"RTN","DGENUPL1",155,0)
 .I ($G(DATATYPE)="ELIGIBILITY") D  Q
"RTN","DGENUPL1",156,0)
 ..S VAL=$$MAP(VAL)
"RTN","DGENUPL1",157,0)
 ..I 'VAL S ERROR=1
"RTN","DGENUPL1",158,0)
 .I ($G(DATATYPE)="INSTITUTION") D  Q
"RTN","DGENUPL1",159,0)
 ..N OLDVAL
"RTN","DGENUPL1",160,0)
 ..S OLDVAL=VAL
"RTN","DGENUPL1",161,0)
 ..S VAL=$O(^DIC(4,"D",OLDVAL,0))
"RTN","DGENUPL1",162,0)
 ..I 'VAL S VAL=$O(^DIC(4,"D",(+OLDVAL),0))
"RTN","DGENUPL1",163,0)
 ..I 'VAL S ERROR=1
"RTN","DGENUPL1",164,0)
 .I ($G(DATATYPE)="POS") D  Q
"RTN","DGENUPL1",165,0)
 ..N OLDVAL
"RTN","DGENUPL1",166,0)
 ..S OLDVAL=VAL
"RTN","DGENUPL1",167,0)
 ..S VAL=$O(^DIC(21,"D",OLDVAL,0))
"RTN","DGENUPL1",168,0)
 ..I 'VAL S ERROR=1
"RTN","DGENUPL1",169,0)
 .I ($G(DATATYPE)="AGENCY") D  Q
"RTN","DGENUPL1",170,0)
 ..N OLDVAL
"RTN","DGENUPL1",171,0)
 ..S OLDVAL=VAL
"RTN","DGENUPL1",172,0)
 ..S VAL=$O(^DIC(35,"C",OLDVAL,0))
"RTN","DGENUPL1",173,0)
 ..I 'VAL S ERROR=1
"RTN","DGENUPL1",174,0)
 Q VAL
"RTN","DGENUPL1",175,0)
 ;
"RTN","DGENUPL1",176,0)
MAP(VALUE) ;
"RTN","DGENUPL1",177,0)
 ;Description: Tries to map an eligibility code from file #8.1 (the national MAS ELIGIBILITY CODE file) to file #8 (the local ELIGIBILITY CODE file)
"RTN","DGENUPL1",178,0)
 ;
"RTN","DGENUPL1",179,0)
 ;Input: VALUE - ien of an entry in file #8.1
"RTN","DGENUPL1",180,0)
 ;
"RTN","DGENUPL1",181,0)
 ;Output: Function value - NULL if mapping is not found, otherwise returns an ien of entry in file #8
"RTN","DGENUPL1",182,0)
 ;
"RTN","DGENUPL1",183,0)
 N ECODE,NODE,COUNT,NAME
"RTN","DGENUPL1",184,0)
 ;try to choose a code from file 8 to use that is appropriate
"RTN","DGENUPL1",185,0)
 S (COUNT,ECODE)=0
"RTN","DGENUPL1",186,0)
 ;
"RTN","DGENUPL1",187,0)
 F  S ECODE=$O(^DIC(8,"D",VALUE,ECODE)) Q:'ECODE  D
"RTN","DGENUPL1",188,0)
 .S NODE=$G(^DIC(8,ECODE,0))
"RTN","DGENUPL1",189,0)
 .;put code on list if active
"RTN","DGENUPL1",190,0)
 .I (NODE'=""),'$P(NODE,"^",7) S ECODE(ECODE)=$P(NODE,"^"),COUNT=COUNT+1
"RTN","DGENUPL1",191,0)
 ;
"RTN","DGENUPL1",192,0)
 ;only one match found, so use it
"RTN","DGENUPL1",193,0)
 Q:COUNT=1 $O(ECODE(0))
"RTN","DGENUPL1",194,0)
 ;
"RTN","DGENUPL1",195,0)
 ;no match found
"RTN","DGENUPL1",196,0)
 Q:'COUNT ""
"RTN","DGENUPL1",197,0)
 ;
"RTN","DGENUPL1",198,0)
 ;multiple matches found, try to match by name
"RTN","DGENUPL1",199,0)
 I COUNT>1 D
"RTN","DGENUPL1",200,0)
 .S ECODE=0
"RTN","DGENUPL1",201,0)
 .S NAME=$P($G(^DIC(8.1,VALUE,0)),"^")
"RTN","DGENUPL1",202,0)
 .F  S ECODE=$O(ECODE(ECODE)) Q:'ECODE  Q:ECODE(ECODE)=NAME
"RTN","DGENUPL1",203,0)
 Q ECODE
"RTN","DGENUPL1",204,0)
 ;
"RTN","DGENUPL1",205,0)
ACCEPT(MSGID) ;
"RTN","DGENUPL1",206,0)
 ;Description: Writes an ack (AA) to a global to be transmitted later.
"RTN","DGENUPL1",207,0)
 ;
"RTN","DGENUPL1",208,0)
 ;Inputs:
"RTN","DGENUPL1",209,0)
 ;  MSGID -message control id of HL7 msg in the MSH segment
"RTN","DGENUPL1",210,0)
 ;
"RTN","DGENUPL1",211,0)
 ;Outputs: none
"RTN","DGENUPL1",212,0)
 ;
"RTN","DGENUPL1",213,0)
 K HL,HLMID,HLMTIEN,HLDT,HLDT1
"RTN","DGENUPL1",214,0)
 D INIT^HLFNC2(HLEID,.HL)
"RTN","DGENUPL1",215,0)
 D CREATE^HLTF(.HLMID,.HLMTIEN,.HLDT,.HLDT1)
"RTN","DGENUPL1",216,0)
 S HLEVN=1
"RTN","DGENUPL1",217,0)
 S MID=HLMID_"-"_HLEVN
"RTN","DGENUPL1",218,0)
 D MSH^HLFNC2(.HL,MID,.HLRES)
"RTN","DGENUPL1",219,0)
 S ^TMP("HLS",$J,1)=HLRES
"RTN","DGENUPL1",220,0)
 ;
"RTN","DGENUPL1",221,0)
 ;it seems HLFS sometimes disappears upon reaching this point
"RTN","DGENUPL1",222,0)
 I $G(HLFS)="" S HLFS="^"
"RTN","DGENUPL1",223,0)
 ;
"RTN","DGENUPL1",224,0)
 S ^TMP("HLS",$J,2)="MSA"_HLFS_"AA"_HLFS_MSGID
"RTN","DGENUPL1",225,0)
 Q
"RTN","DGENUPL1",226,0)
 ;
"RTN","DGENUPL1",227,0)
MVERRORS ;
"RTN","DGENUPL1",228,0)
 ;Error messages were being deleted from ^TMP("HLS",$J by another package
"RTN","DGENUPL1",229,0)
 ;during the upload.  To fix this, errors are written to another
"RTN","DGENUPL1",230,0)
 ;subscript, then moved when the error list is complete.
"RTN","DGENUPL1",231,0)
 ;
"RTN","DGENUPL1",232,0)
 M ^TMP("HLS",$J)=^TMP("IVM","HLS",$J)
"RTN","DGENUPL1",233,0)
 K ^TMP("IVM","HLS",$J)
"RTN","DGENUPL1",234,0)
 Q
"RTN","DGENUPL2")
0^39^B70882830
"RTN","DGENUPL2",1,0)
DGENUPL2 ;ALB/CJM,RTK,TMK,ISA/KWP/RMM/CKN,EG,ERC - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 9/1/06 1:18pm
"RTN","DGENUPL2",2,0)
 ;;5.3;REGISTRATION;**147,222,232,310,314,367,397,677,631,675,672,673,716,653,688**;Aug 13,1993;Build 29
"RTN","DGENUPL2",3,0)
 ;
"RTN","DGENUPL2",4,0)
 ;**************************************************************
"RTN","DGENUPL2",5,0)
 ;The following procedures parse particular segment types.
"RTN","DGENUPL2",6,0)
 ;Input:SEG(),MSGID
"RTN","DGENUPL2",7,0)
 ;Output:DGPAT(),DGELG(),DGENR(),DGCDIS(),DGNTR(),DGOEIF(),ERROR
"RTN","DGENUPL2",8,0)
 ;**************************************************************
"RTN","DGENUPL2",9,0)
 ;
"RTN","DGENUPL2",10,0)
PID ;
"RTN","DGENUPL2",11,0)
 S DGPAT("SSN")=SEG(19)
"RTN","DGENUPL2",12,0)
 Q
"RTN","DGENUPL2",13,0)
 ;
"RTN","DGENUPL2",14,0)
ZPD ;
"RTN","DGENUPL2",15,0)
 D ZPD^DGENUPLA ;code removed due to size of DGENUPLA - DG*5.3*688
"RTN","DGENUPL2",16,0)
 Q
"RTN","DGENUPL2",17,0)
 ;
"RTN","DGENUPL2",18,0)
ZIE ;
"RTN","DGENUPL2",19,0)
 S DGPAT("INELDATE")=$$CONVERT^DGENUPL1(SEG(2),"DATE",.ERROR)
"RTN","DGENUPL2",20,0)
 I ERROR D  Q
"RTN","DGENUPL2",21,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZIE SEGMENT, SEQ 2",.ERRCOUNT)
"RTN","DGENUPL2",22,0)
 S DGPAT("INELREA")=$$CONVERT^DGENUPL1(SEG(3))
"RTN","DGENUPL2",23,0)
 S DGPAT("INELDEC")=$$CONVERT^DGENUPL1(SEG(4))
"RTN","DGENUPL2",24,0)
 Q
"RTN","DGENUPL2",25,0)
 ;
"RTN","DGENUPL2",26,0)
ZIO ;New segment - DG*5.3*653
"RTN","DGENUPL2",27,0)
 D ZIO^DGENUPLA  ;Code for ZIO has moved to DGENUPLA
"RTN","DGENUPL2",28,0)
 Q
"RTN","DGENUPL2",29,0)
 ;
"RTN","DGENUPL2",30,0)
ZEL(COUNT) ;
"RTN","DGENUPL2",31,0)
 D ZEL^DGENUPLA(COUNT)  ;code for ZEL segment has moved to DGENUPLA
"RTN","DGENUPL2",32,0)
 Q
"RTN","DGENUPL2",33,0)
 ;
"RTN","DGENUPL2",34,0)
ZEN ;
"RTN","DGENUPL2",35,0)
 N SUB
"RTN","DGENUPL2",36,0)
 S DGENR("DATE")=$$CONVERT^DGENUPL1(SEG(2),"DATE",.ERROR)
"RTN","DGENUPL2",37,0)
 I ERROR D  Q
"RTN","DGENUPL2",38,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEN SEGMENT, SEQ 2",.ERRCOUNT)
"RTN","DGENUPL2",39,0)
 S DGENR("SOURCE")=$$CONVERT^DGENUPL1(SEG(3))
"RTN","DGENUPL2",40,0)
 S DGENR("STATUS")=$$CONVERT^DGENUPL1(SEG(4))
"RTN","DGENUPL2",41,0)
 S ERROR=$$PEND(DFN,DGENR("STATUS"))
"RTN","DGENUPL2",42,0)
 I ERROR D  Q
"RTN","DGENUPL2",43,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"ENROLLMENT STATUS PENDING-ELIGIBILITY IS VERIFIED",.ERRCOUNT)
"RTN","DGENUPL2",44,0)
 S DGENR("REASON")=$$CONVERT^DGENUPL1(SEG(5))
"RTN","DGENUPL2",45,0)
 S DGENR("REMARKS")=$$CONVERT^DGENUPL1(SEG(6))
"RTN","DGENUPL2",46,0)
 S DGENR("FACREC")=$$CONVERT^DGENUPL1(SEG(7),"INSTITUTION",.ERROR)
"RTN","DGENUPL2",47,0)
 I ERROR D  Q
"RTN","DGENUPL2",48,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"FACILITY RECEIVED "_SEG(7)_" NOT FOUND IN THE INSTITUTION FILE",.ERRCOUNT)
"RTN","DGENUPL2",49,0)
 S DGPAT("PREFAC")=$$CONVERT^DGENUPL1(SEG(8),"INSTITUTION",.ERROR)
"RTN","DGENUPL2",50,0)
 I ERROR D  Q
"RTN","DGENUPL2",51,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"PREFERRED FACILITY "_SEG(8)_" NOT FOUND IN THE INSTITUTION FILE",.ERRCOUNT)
"RTN","DGENUPL2",52,0)
 ;
"RTN","DGENUPL2",53,0)
 S DGENR("PRIORITY")=$$CONVERT^DGENUPL1(SEG(9))
"RTN","DGENUPL2",54,0)
 S DGENR("EFFDATE")=$$CONVERT^DGENUPL1(SEG(10),"DATE",.ERROR)
"RTN","DGENUPL2",55,0)
 I ERROR D  Q
"RTN","DGENUPL2",56,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEN SEGMENT, SEQ 10",.ERRCOUNT)
"RTN","DGENUPL2",57,0)
 S DGENR("APP")=$$CONVERT^DGENUPL1(SEG(11),"DATE",.ERROR)
"RTN","DGENUPL2",58,0)
 I ERROR D  Q
"RTN","DGENUPL2",59,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEN SEGMENT, SEQ 11",.ERRCOUNT)
"RTN","DGENUPL2",60,0)
 ;
"RTN","DGENUPL2",61,0)
 ;!!!!!! take next line out when HEC begins transmitting application dt
"RTN","DGENUPL2",62,0)
 I DGENR("APP")=""!(DGENR("APP")="@") S DGENR("APP")=DGENR("DATE")
"RTN","DGENUPL2",63,0)
 I DGENR("APP")=""!(DGENR("APP")="@") S DGENR("APP")=DGENR("EFFDATE")
"RTN","DGENUPL2",64,0)
 ;
"RTN","DGENUPL2",65,0)
 S DGENR("END")=$$CONVERT^DGENUPL1(SEG(12),"DATE",.ERROR)
"RTN","DGENUPL2",66,0)
 I ERROR D  Q
"RTN","DGENUPL2",67,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEN SEGMENT, SEQ 12",.ERRCOUNT)
"RTN","DGENUPL2",68,0)
 ;Phase II Parse out Sub-Group (SRS 6[B.4)
"RTN","DGENUPL2",69,0)
 S DGENR("SUBGRP")=$$CONVERT^DGENUPL1(SEG(13))
"RTN","DGENUPL2",70,0)
 ;
"RTN","DGENUPL2",71,0)
 ;want to ignore double quotes sent for enrollment fields
"RTN","DGENUPL2",72,0)
 S SUB=""
"RTN","DGENUPL2",73,0)
 F  S SUB=$O(DGENR(SUB)) Q:SUB=""  I DGENR(SUB)="@"!(DGENR(SUB)="""""") S DGENR(SUB)=""
"RTN","DGENUPL2",74,0)
 ;
"RTN","DGENUPL2",75,0)
 Q
"RTN","DGENUPL2",76,0)
 ;
"RTN","DGENUPL2",77,0)
ZMT ;
"RTN","DGENUPL2",78,0)
 I SEG(1)>1 D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"ZMT SEGMENT, SEQ 1, SHOULD SPECIFY MEANS TEST",.ERRCOUNT) S ERROR=1 Q
"RTN","DGENUPL2",79,0)
 S DGELG("MTSTA")=$$CONVERT^DGENUPL1(SEG(3),"MT",.ERROR)
"RTN","DGENUPL2",80,0)
 I ERROR D  Q
"RTN","DGENUPL2",81,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZMT SEGMENT, SEQ 3",.ERRCOUNT)
"RTN","DGENUPL2",82,0)
 Q
"RTN","DGENUPL2",83,0)
 ;
"RTN","DGENUPL2",84,0)
ZCD ;
"RTN","DGENUPL2",85,0)
 ;Phase II for multiple ZCD's
"RTN","DGENUPL2",86,0)
 I SEG(1)>1 G SKIP
"RTN","DGENUPL2",87,0)
 S DGCDIS("BY")=$$CONVERT^DGENUPL1(SEG(3))
"RTN","DGENUPL2",88,0)
 S DGCDIS("DATE")=$$CONVERT^DGENUPL1(SEG(5),"DATE",.ERROR)
"RTN","DGENUPL2",89,0)
 I ERROR D  Q
"RTN","DGENUPL2",90,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZCD SEGMENT, SEQ 5",.ERRCOUNT)
"RTN","DGENUPL2",91,0)
 S DGCDIS("FACDET")=$$CONVERT^DGENUPL1(SEG(4),"INSTITUTION",.ERROR)
"RTN","DGENUPL2",92,0)
 I ERROR D  Q
"RTN","DGENUPL2",93,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"FACILITY "_SEG(4)_" MAKING CATASTROPHIC DISABILITY DETERMINATION NOT FOUND IN THE INSTITUTION FILE",.ERRCOUNT)
"RTN","DGENUPL2",94,0)
 S DGCDIS("REVDTE")=$$CONVERT^DGENUPL1(SEG(2),"DATE",.ERROR)
"RTN","DGENUPL2",95,0)
 I ERROR D  Q
"RTN","DGENUPL2",96,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZCD SEGMENT, SEQ 2",.ERRCOUNT)
"RTN","DGENUPL2",97,0)
 S DGCDIS("METDET")=$$CONVERT^DGENUPL1($P(SEG(6),$E(HLECH)))
"RTN","DGENUPL2",98,0)
 S DGCDIS("VCD")=$$CONVERT^DGENUPL1(SEG(12))
"RTN","DGENUPL2",99,0)
 ;SEQ 14 - DATE VETERAN REQUESTED CD EVALUATION
"RTN","DGENUPL2",100,0)
 S DGCDIS("VETREQDT")=$$CONVERT^DGENUPL1(SEG(14),"DATE",.ERROR)
"RTN","DGENUPL2",101,0)
 I ERROR D  Q
"RTN","DGENUPL2",102,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZCD SEGMENT, SEQ 14",.ERRCOUNT)
"RTN","DGENUPL2",103,0)
 ;SEQ 15 - DATE FACILITY INITIATED REVIEW
"RTN","DGENUPL2",104,0)
 S DGCDIS("DTFACIRV")=$$CONVERT^DGENUPL1(SEG(15),"DATE",.ERROR)
"RTN","DGENUPL2",105,0)
 I ERROR D  Q
"RTN","DGENUPL2",106,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZCD SEGMENT, SEQ 15",.ERRCOUNT)
"RTN","DGENUPL2",107,0)
 ;SEQ 16 - DATE VETERAN WAS NOTIFIED
"RTN","DGENUPL2",108,0)
 S DGCDIS("DTVETNOT")=$$CONVERT^DGENUPL1(SEG(16),"DATE",.ERROR)
"RTN","DGENUPL2",109,0)
 I ERROR D  Q
"RTN","DGENUPL2",110,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZCD SEGMENT, SEQ 16",.ERRCOUNT)
"RTN","DGENUPL2",111,0)
SKIP ;
"RTN","DGENUPL2",112,0)
 ;Phase II Parse out additional fields.  CONVERT type of RSN converts the code to IEN for diagnosis,procedure and condition (HL7TORSN^DGENA5).
"RTN","DGENUPL2",113,0)
 S DGCDIS("DIAG",SEG(1))=$$CONVERT^DGENUPL1(SEG(7),"CDRSN")
"RTN","DGENUPL2",114,0)
 S DGCDIS("PROC",SEG(1))=$$CONVERT^DGENUPL1(SEG(8),"CDRSN")
"RTN","DGENUPL2",115,0)
 S DGCDIS("EXT",SEG(1),1)=$$CONVERT^DGENUPL1($P(SEG(9),$E(HLECH)),"EXT")
"RTN","DGENUPL2",116,0)
 S DGCDIS("COND",SEG(1))=$$CONVERT^DGENUPL1(SEG(10),"CDRSN")
"RTN","DGENUPL2",117,0)
 S DGCDIS("SCORE",SEG(1))=$$CONVERT^DGENUPL1($P(SEG(11),$E(HLECH)))
"RTN","DGENUPL2",118,0)
 S DGCDIS("PERM",SEG(1))=$$CONVERT^DGENUPL1($P(SEG(13),$E(HLECH)))
"RTN","DGENUPL2",119,0)
 I DGCDIS("VCD")="Y",'DGCDIS("DIAG",SEG(1)),'DGCDIS("PROC",SEG(1)),'DGCDIS("COND",SEG(1)) D  Q
"RTN","DGENUPL2",120,0)
 .S ERROR=1 D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"NO VALID DIAGNOSIS,PROCEDURE, OR CONDITION IN THE ZCD SEGMENT",.ERRCOUNT)
"RTN","DGENUPL2",121,0)
 Q
"RTN","DGENUPL2",122,0)
 ;
"RTN","DGENUPL2",123,0)
ZSP ;
"RTN","DGENUPL2",124,0)
 S DGELG("SC")=$$CONVERT^DGENUPL1(SEG(2),"Y/N",.ERROR)
"RTN","DGENUPL2",125,0)
 I ERROR D  Q
"RTN","DGENUPL2",126,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 2",.ERRCOUNT)
"RTN","DGENUPL2",127,0)
 S DGELG("SCPER")=$$CONVERT^DGENUPL1(SEG(3))
"RTN","DGENUPL2",128,0)
 S DGELG("POS")=$$CONVERT^DGENUPL1(SEG(4),"POS",.ERROR)
"RTN","DGENUPL2",129,0)
 I ERROR D  Q
"RTN","DGENUPL2",130,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 4",.ERRCOUNT)
"RTN","DGENUPL2",131,0)
 S DGELG("EFFDT")=$$CONVERT^DGENUPL1(SEG(11),"DATE",.ERROR)
"RTN","DGENUPL2",132,0)
 I ERROR D  Q
"RTN","DGENUPL2",133,0)
 . D ADDERROR^DGENUPL(MSGID,$G(DGELG("EFFDT")),"BAD VALUE, ZSP SEGMENT, SEQ 11",.ERRCOUNT)
"RTN","DGENUPL2",134,0)
 ;if effective date is null, set update value to "@" (delete)
"RTN","DGENUPL2",135,0)
 I DGELG("EFFDT")="" S DGELG("EFFDT")="@"
"RTN","DGENUPL2",136,0)
 ;
"RTN","DGENUPL2",137,0)
 ;added 8/3/98 to reduce #rejects
"RTN","DGENUPL2",138,0)
 ;if HEC sends SC=NO, SC% not sent, and site has value for SC% then delete it
"RTN","DGENUPL2",139,0)
 I DGELG("SC")="N",DGELG("SCPER")="" S DGELG("SCPER")="@"
"RTN","DGENUPL2",140,0)
 ;
"RTN","DGENUPL2",141,0)
 S DGELG("P&T")=$$CONVERT^DGENUPL1(SEG(6),"Y/N",.ERROR)
"RTN","DGENUPL2",142,0)
 I ERROR D  Q
"RTN","DGENUPL2",143,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 6",.ERRCOUNT)
"RTN","DGENUPL2",144,0)
 S DGELG("UNEMPLOY")=$$CONVERT^DGENUPL1(SEG(7),"Y/N",.ERROR)
"RTN","DGENUPL2",145,0)
 I ERROR D  Q
"RTN","DGENUPL2",146,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 7",.ERRCOUNT)
"RTN","DGENUPL2",147,0)
 S DGELG("SCAWDATE")=$$CONVERT^DGENUPL1(SEG(8),"DATE",.ERROR)
"RTN","DGENUPL2",148,0)
 I ERROR D  Q
"RTN","DGENUPL2",149,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 8",.ERRCOUNT)
"RTN","DGENUPL2",150,0)
 S DGELG("P&TDT")=$$CONVERT^DGENUPL1(SEG(10),"DATE",.ERROR)
"RTN","DGENUPL2",151,0)
 I ERROR D
"RTN","DGENUPL2",152,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 10 - P&T EFFECTIVE DATE",.ERRCOUNT)
"RTN","DGENUPL2",153,0)
 Q
"RTN","DGENUPL2",154,0)
 ;
"RTN","DGENUPL2",155,0)
ZMH ;Purple Heart, OEFOIE, POW
"RTN","DGENUPL2",156,0)
 D ZMH^DGENUPL3 ;Moved to DGENUPL3 - DG*5.3*653 
"RTN","DGENUPL2",157,0)
 Q
"RTN","DGENUPL2",158,0)
 ;
"RTN","DGENUPL2",159,0)
ZRD ;
"RTN","DGENUPL2",160,0)
 N COUNT,DXCODE,NAME,COND
"RTN","DGENUPL2",161,0)
 S DXCODE=$P(SEG(2),$E(HLECH))
"RTN","DGENUPL2",162,0)
 I DXCODE="""""" S DXCODE=""
"RTN","DGENUPL2",163,0)
 S NAME=$P(SEG(2),$E(HLECH),2)
"RTN","DGENUPL2",164,0)
 Q:DXCODE=""  ;segment does not contain a disability condition
"RTN","DGENUPL2",165,0)
 ;
"RTN","DGENUPL2",166,0)
 S COUNT=1+(+$G(DGELG("RATEDIS")))
"RTN","DGENUPL2",167,0)
 S (COND,DGELG("RATEDIS",COUNT,"RD"))=$$DCLOOKUP(DXCODE,NAME)
"RTN","DGENUPL2",168,0)
 S DGELG("RATEDIS",COUNT,"PER")=$$CONVERT^DGENUPL1(SEG(3)),DGELG("RATEDIS")=COUNT
"RTN","DGENUPL2",169,0)
 S DGELG("RATEDIS",COUNT,"RDEXT")=$$CONVERT^DGENUPL1(SEG(12))
"RTN","DGENUPL2",170,0)
 S DGELG("RATEDIS",COUNT,"RDORIG")=$$CONVERT^DGENUPL1(SEG(13),"DATE",.ERROR)
"RTN","DGENUPL2",171,0)
 I ERROR D  Q
"RTN","DGENUPL2",172,0)
 . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZRD SEGMENT, S 13",.ERRCOUNT)
"RTN","DGENUPL2",173,0)
 S DGELG("RATEDIS",COUNT,"RDCURR")=$$CONVERT^DGENUPL1(SEG(14),"DATE",.ERROR)
"RTN","DGENUPL2",174,0)
 I ERROR D  Q
"RTN","DGENUPL2",175,0)
 . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZRD SEGMENT, S 14",.ERRCOUNT)
"RTN","DGENUPL2",176,0)
 I 'COND D  Q
"RTN","DGENUPL2",177,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZRD SEGMENT, SEQ 2 - DISABILTY CONDITION LOOKUP FAILED",.ERRCOUNT)
"RTN","DGENUPL2",178,0)
 .S ERROR=1
"RTN","DGENUPL2",179,0)
 Q
"RTN","DGENUPL2",180,0)
OBX ;
"RTN","DGENUPL2",181,0)
 D OBX^DGENUPLA  ;code for OBX segment moved to DGENUPLA
"RTN","DGENUPL2",182,0)
 Q
"RTN","DGENUPL2",183,0)
 ;
"RTN","DGENUPL2",184,0)
 ;*********** end of segment parsers ****
"RTN","DGENUPL2",185,0)
 ;
"RTN","DGENUPL2",186,0)
DCLOOKUP(DGCODE,DGNAME) ;
"RTN","DGENUPL2",187,0)
 ; Description: Returns the ien of a Disability Condition (file #31) based on the DGCODE and DGNAME
"RTN","DGENUPL2",188,0)
 ;
"RTN","DGENUPL2",189,0)
 ;Input:
"RTN","DGENUPL2",190,0)
 ;  DGCODE - DX Code of the Disability Condition
"RTN","DGENUPL2",191,0)
 ;  DGNAME - name of the Disability Condition
"RTN","DGENUPL2",192,0)
 ;Output:
"RTN","DGENUPL2",193,0)
 ;  Function Value: ien of the entry found, or 0 otherwise
"RTN","DGENUPL2",194,0)
 ;
"RTN","DGENUPL2",195,0)
 Q:(DGCODE="") 0
"RTN","DGENUPL2",196,0)
 N NODE,IEN,FOUND
"RTN","DGENUPL2",197,0)
 S (FOUND,IEN)=0
"RTN","DGENUPL2",198,0)
 F  S IEN=$O(^DIC(31,"C",DGCODE,IEN)) Q:'IEN  D  Q:FOUND
"RTN","DGENUPL2",199,0)
 .S NODE=$G(^DIC(31,IEN,0))
"RTN","DGENUPL2",200,0)
 .I DGNAME=$P(NODE,"^"),DGCODE=$P(NODE,"^",3) S FOUND=1
"RTN","DGENUPL2",201,0)
 I 'FOUND S IEN=$O(^DIC(31,"C",DGCODE,0))
"RTN","DGENUPL2",202,0)
 Q +IEN
"RTN","DGENUPL2",203,0)
 ;
"RTN","DGENUPL2",204,0)
REGCHECK(DFN) ;
"RTN","DGENUPL2",205,0)
 ; Description: passes patient through the registration consistency checker
"RTN","DGENUPL2",206,0)
 ;Input -
"RTN","DGENUPL2",207,0)
 ;  DFN - is a pointer to the Patient File
"RTN","DGENUPL2",208,0)
 ;
"RTN","DGENUPL2",209,0)
 N DGCD,DGCHK,DGDAY,DGEDCN,DGER,DGLST,DGNCK,DGRPCOLD,DGSC,DGTYPE,DGVT,VA,X
"RTN","DGENUPL2",210,0)
 ;
"RTN","DGENUPL2",211,0)
 S DGEDCN=0
"RTN","DGENUPL2",212,0)
 D ^DGRPC
"RTN","DGENUPL2",213,0)
 Q
"RTN","DGENUPL2",214,0)
PEND(DFN,DGSTAT) ;
"RTN","DGENUPL2",215,0)
 N DGARR,DGEC,DGERR,DGX
"RTN","DGENUPL2",216,0)
 I $P($G(^DPT(DFN,.361)),U)'="V" Q 0
"RTN","DGENUPL2",217,0)
 I $G(DGSTAT)="@" Q 0
"RTN","DGENUPL2",218,0)
 I $G(DGSTAT)']"" Q 0
"RTN","DGENUPL2",219,0)
 S DGSTAT="^"_DGSTAT_"^"
"RTN","DGENUPL2",220,0)
 Q:"^15^17^"'[DGSTAT 0
"RTN","DGENUPL2",221,0)
 D GETS^DIQ(2,DFN_",",".301;.302;.361;.36295","IE","DGARR","DGERR")
"RTN","DGENUPL2",222,0)
 I $D(DGERR) Q 0
"RTN","DGENUPL2",223,0)
 S DGEC=$G(DGARR(2,DFN_",",.361,"I"))
"RTN","DGENUPL2",224,0)
 I $G(DGEC)']"" Q 0
"RTN","DGENUPL2",225,0)
 S DGEC=$P($G(^DIC(8,DGEC,0)),U,9)
"RTN","DGENUPL2",226,0)
 I $G(DGEC)']"" Q 0
"RTN","DGENUPL2",227,0)
 I DGEC=5 Q 1
"RTN","DGENUPL2",228,0)
 I DGEC=3 D  Q DGX
"RTN","DGENUPL2",229,0)
 . S DGX=1
"RTN","DGENUPL2",230,0)
 . I $G(DGARR(2,DFN_",",.301,"I"))'="Y" S DGX=0 Q
"RTN","DGENUPL2",231,0)
 . I +$G(DGARR(2,DFN_",",.302,"I"))>0 S DGX=0 Q
"RTN","DGENUPL2",232,0)
 . I +$G(DGARR(2,DFN_",",.36295,"I"))>0 S DGX=0 Q
"RTN","DGENUPL2",233,0)
 Q 0
"RTN","DGENUPL3")
0^75^B56076045
"RTN","DGENUPL3",1,0)
DGENUPL3 ;ALB/CJM,ISA/KWP,AEG,BRM,ERC,CKN,BAJ - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 5/10/07 8:49am
"RTN","DGENUPL3",2,0)
 ;;5.3;REGISTRATION;**147,230,232,377,404,451,653,688**;Aug 13,1993;Build 29
"RTN","DGENUPL3",3,0)
 ;
"RTN","DGENUPL3",4,0)
 ;
"RTN","DGENUPL3",5,0)
ADDMSG(MSGS,MESSAGE,TOHEC) ;
"RTN","DGENUPL3",6,0)
 ;Description: Used to add a message to an array of messages to be sent.
"RTN","DGENUPL3",7,0)
 ;
"RTN","DGENUPL3",8,0)
 ;Input:
"RTN","DGENUPL3",9,0)
 ;  MSGS - the array to store the message (pass by reference)
"RTN","DGENUPL3",10,0)
 ;  MESSAGE - the message to store
"RTN","DGENUPL3",11,0)
 ;  TOHEC - a flag, if set to 1 it means that HEC should also receive notification
"RTN","DGENUPL3",12,0)
 ;
"RTN","DGENUPL3",13,0)
 ;Output: none
"RTN","DGENUPL3",14,0)
 ;
"RTN","DGENUPL3",15,0)
 I MESSAGE["DATE OF DEATH" Q
"RTN","DGENUPL3",16,0)
 S MSGS(0)=($G(MSGS(0))+1)
"RTN","DGENUPL3",17,0)
 S MSGS(MSGS(0))=MESSAGE
"RTN","DGENUPL3",18,0)
 I ($G(TOHEC)=1) S MSGS("HEC")=1
"RTN","DGENUPL3",19,0)
 Q
"RTN","DGENUPL3",20,0)
 ;
"RTN","DGENUPL3",21,0)
 ;
"RTN","DGENUPL3",22,0)
NOTIFY(DGPAT,MSGS) ;
"RTN","DGENUPL3",23,0)
 ;Description: This is used to send a message to the local mail group
"RTN","DGENUPL3",24,0)
 ;defined by the MAS Parameter ELIGIBILITY UPLOAD MAIL GROUP.The
"RTN","DGENUPL3",25,0)
 ;notification is to be used when specific problems or conditions
"RTN","DGENUPL3",26,0)
 ;regarding the upload of the enrollment or eligibility data.
"RTN","DGENUPL3",27,0)
 ;
"RTN","DGENUPL3",28,0)
 ;Input: 
"RTN","DGENUPL3",29,0)
 ;  OLDPAT -used if the DGPAT elements have not been built
"RTN","DGENUPL3",30,0)
 ;  DGPAT - patient array (pass by reference)
"RTN","DGENUPL3",31,0)
 ;  MSGS - the an array of messages that should be included in the
"RTN","DGENUPL3",32,0)
 ;         notification (pass by reference). If MSGS("HEC")=1
"RTN","DGENUPL3",33,0)
 ;         it means that HEC should also receive notification.
"RTN","DGENUPL3",34,0)
 ;
"RTN","DGENUPL3",35,0)
 ;Output:   none
"RTN","DGENUPL3",36,0)
 ;
"RTN","DGENUPL3",37,0)
 N TEXT,XMDUZ,XMTEXT,XMSUB,XMSTRIP,XMROU,XMY,XMZ,XMDF,COUNT
"RTN","DGENUPL3",38,0)
 N HEADER,NSC,POW,TMPSTR,MAILGRP,ELIG,CD
"RTN","DGENUPL3",39,0)
 ;
"RTN","DGENUPL3",40,0)
 ;if there are no alerts, then quit
"RTN","DGENUPL3",41,0)
 Q:'$G(MSGS(0))
"RTN","DGENUPL3",42,0)
 ;
"RTN","DGENUPL3",43,0)
 ;Get reason for alert.  If there is more than one reason decide which 
"RTN","DGENUPL3",44,0)
 ;reason to display.  'NON-SERVICE' alerts have a higher priority than
"RTN","DGENUPL3",45,0)
 ;other alerts and are therefore displayed before other alerts in the 
"RTN","DGENUPL3",46,0)
 ;subject line, followed by 'POW' alerts in priority.
"RTN","DGENUPL3",47,0)
 S (ELIG,NSC,POW,CD)=0
"RTN","DGENUPL3",48,0)
 S COUNT=0 F  S COUNT=$O(MSGS(COUNT)) Q:'COUNT!NSC  D
"RTN","DGENUPL3",49,0)
 .I MSGS(COUNT)["PREVIOUSLY ELIGIBLE" S ELIG=1 Q
"RTN","DGENUPL3",50,0)
 .I MSGS(COUNT)["NON-SERVICE" S NSC=1 Q
"RTN","DGENUPL3",51,0)
 .I MSGS(COUNT)["POW" S POW=1 Q
"RTN","DGENUPL3",52,0)
 .I MSGS(COUNT)["CD EVALUATION" S CD=1 Q
"RTN","DGENUPL3",53,0)
 .S HEADER=MSGS(COUNT)
"RTN","DGENUPL3",54,0)
 .Q
"RTN","DGENUPL3",55,0)
 D
"RTN","DGENUPL3",56,0)
 .I ELIG S HEADER="Ineligibility Alert: " Q
"RTN","DGENUPL3",57,0)
 .I NSC S HEADER="NSC Alert: " Q
"RTN","DGENUPL3",58,0)
 .I POW&'NSC S HEADER="POW Alert: " Q
"RTN","DGENUPL3",59,0)
 .I CD S HEADER="CD Alert: " Q
"RTN","DGENUPL3",60,0)
 .Q
"RTN","DGENUPL3",61,0)
 ;
"RTN","DGENUPL3",62,0)
 S XMDF=""
"RTN","DGENUPL3",63,0)
 S (XMDUN,XMDUZ)="Registration Enrollment Module"
"RTN","DGENUPL3",64,0)
 ;Phase II Re-Enrollment
"RTN","DGENUPL3",65,0)
 ;DGPAT("SSN") is built by the parser.  DGPAT("NAME"),DGPAT("SEX"),DGPAT("DOB")(are merged into DGPAT from OLDPAT.
"RTN","DGENUPL3",66,0)
 ;The checks below are to setup the DGPAT elements from OLDPAT if NOTIFY is called before the merge. 
"RTN","DGENUPL3",67,0)
 I '$D(DGPAT("NAME")) S DGPAT("NAME")=$G(OLDPAT("NAME"))
"RTN","DGENUPL3",68,0)
 I '$D(DGPAT("SEX")) S DGPAT("SEX")=$G(OLDPAT("SEX"))
"RTN","DGENUPL3",69,0)
 I '$D(DGPAT("DOB")) S DGPAT("DOB")=$G(OLDPAT("DOB"))
"RTN","DGENUPL3",70,0)
 S TMPSTR=" ("_$E(DGPAT("NAME"),1,1)
"RTN","DGENUPL3",71,0)
 S TMPSTR=TMPSTR_$E(DGPAT("SSN"),$L(DGPAT("SSN"))-3,1000)_")"
"RTN","DGENUPL3",72,0)
 S XMSUB=$E(HEADER,1,30)_$E(DGPAT("NAME"),1,25)_TMPSTR
"RTN","DGENUPL3",73,0)
 ;
"RTN","DGENUPL3",74,0)
 ; send msg to local mail group specified in IVM SITE PARAMETER file
"RTN","DGENUPL3",75,0)
 S MAILGRP=+$P($G(^IVM(301.9,1,0)),"^",9)
"RTN","DGENUPL3",76,0)
 S MAILGRP=$$EXTERNAL^DILFD(301.9,.09,"F",MAILGRP)
"RTN","DGENUPL3",77,0)
 I MAILGRP]"" S XMY("G."_MAILGRP)=""
"RTN","DGENUPL3",78,0)
 ;
"RTN","DGENUPL3",79,0)
 ; if flag is set, send msg to remote mail group specified in
"RTN","DGENUPL3",80,0)
 ; the IVM SITE PARAMETER file
"RTN","DGENUPL3",81,0)
 I $G(MSGS("HEC"))=1 D
"RTN","DGENUPL3",82,0)
 .S MAILGRP=$P($G(^IVM(301.9,1,0)),"^",10)
"RTN","DGENUPL3",83,0)
 .S MAILGRP=$$EXTERNAL^DILFD(301.9,.10,"F",MAILGRP)
"RTN","DGENUPL3",84,0)
 .I MAILGRP]"" S XMY("G."_MAILGRP)=""
"RTN","DGENUPL3",85,0)
 ;
"RTN","DGENUPL3",86,0)
 ;
"RTN","DGENUPL3",87,0)
 S XMTEXT="TEXT("
"RTN","DGENUPL3",88,0)
 S TEXT(1)="The enrollment/eligibility upload produced the following alerts:"
"RTN","DGENUPL3",89,0)
 S TEXT(2)="  "
"RTN","DGENUPL3",90,0)
 S TEXT(3)="Patient Name   :     "_DGPAT("NAME")
"RTN","DGENUPL3",91,0)
 S TEXT(4)="SSN            :     "_DGPAT("SSN")
"RTN","DGENUPL3",92,0)
 S TEXT(5)="DOB            :     "_$$EXTERNAL^DILFD(2,$$FIELD^DGENPTA1("DOB"),"F",DGPAT("DOB"))
"RTN","DGENUPL3",93,0)
 S TEXT(6)="SEX            :     "_$$EXTERNAL^DILFD(2,$$FIELD^DGENPTA1("SEX"),"F",DGPAT("SEX"))
"RTN","DGENUPL3",94,0)
 S TEXT(7)=" "
"RTN","DGENUPL3",95,0)
 ;
"RTN","DGENUPL3",96,0)
 S TEXT(8)=" ** Alerts **"
"RTN","DGENUPL3",97,0)
 S TEXT(9)=" "
"RTN","DGENUPL3",98,0)
 S COUNT=0 F  S COUNT=$O(MSGS(COUNT)) Q:'COUNT  S TEXT(10+COUNT)=COUNT_") "_MSGS(COUNT)
"RTN","DGENUPL3",99,0)
 ;
"RTN","DGENUPL3",100,0)
 D ^XMD
"RTN","DGENUPL3",101,0)
 Q
"RTN","DGENUPL3",102,0)
 ;
"RTN","DGENUPL3",103,0)
BEGUPLD(DFN) ;
"RTN","DGENUPL3",104,0)
 ;Description: Sets a lock used to determine if an eligibility/enrollment
"RTN","DGENUPL3",105,0)
 ;upload is in progress. 
"RTN","DGENUPL3",106,0)
 ;
"RTN","DGENUPL3",107,0)
 ;Input:
"RTN","DGENUPL3",108,0)
 ;   DFN - ien, Patient record
"RTN","DGENUPL3",109,0)
 ;
"RTN","DGENUPL3",110,0)
 ;Output:
"RTN","DGENUPL3",111,0)
 ;  Function value - returns 1 if the lock was obtained, 0 otherwise.
"RTN","DGENUPL3",112,0)
 ;
"RTN","DGENUPL3",113,0)
 Q:'$G(DFN) 1
"RTN","DGENUPL3",114,0)
 L +^DGEN("ELIGIBILITY UPLOAD",DFN):3
"RTN","DGENUPL3",115,0)
 Q $T
"RTN","DGENUPL3",116,0)
 ;
"RTN","DGENUPL3",117,0)
ENDUPLD(DFN) ;
"RTN","DGENUPL3",118,0)
 ;Description: Releases the lock obtained by calling $$BEGUPLD(DFN)
"RTN","DGENUPL3",119,0)
 ;
"RTN","DGENUPL3",120,0)
 Q:'$G(DFN)
"RTN","DGENUPL3",121,0)
 L -^DGEN("ELIGIBILITY UPLOAD",DFN)
"RTN","DGENUPL3",122,0)
 Q
"RTN","DGENUPL3",123,0)
 ;
"RTN","DGENUPL3",124,0)
CKUPLOAD(DFN) ;
"RTN","DGENUPL3",125,0)
 ;Description: Checks if an upload is in progress.  If so, it pauses
"RTN","DGENUPL3",126,0)
 ;until it is completed.
"RTN","DGENUPL3",127,0)
 ;The enrollment/eligibility upload can take a while to accomplish.
"RTN","DGENUPL3",128,0)
 ;If the lock is not obtained initially, it is assumed that the upload
"RTN","DGENUPL3",129,0)
 ;is in progress, and a message is displayed to the user.
"RTN","DGENUPL3",130,0)
 ;
"RTN","DGENUPL3",131,0)
 ;Input: DFN
"RTN","DGENUPL3",132,0)
 ;Output: none
"RTN","DGENUPL3",133,0)
 ;
"RTN","DGENUPL3",134,0)
 N I
"RTN","DGENUPL3",135,0)
 I '$$BEGUPLD(DFN) D
"RTN","DGENUPL3",136,0)
 .W !!,"Upload of patient enrollment/eligibility data is in progress ..."
"RTN","DGENUPL3",137,0)
 .D UNLOCK^DGENPTA1(DFN)
"RTN","DGENUPL3",138,0)
 .F I=1:1:50 Q:$$BEGUPLD(DFN)  W "."
"RTN","DGENUPL3",139,0)
 .W !,"Upload of patient enrollment/eligibility data is completed.",!
"RTN","DGENUPL3",140,0)
 D ENDUPLD(DFN)
"RTN","DGENUPL3",141,0)
 Q
"RTN","DGENUPL3",142,0)
SCVET ;moved from DGENUPL4 - DG*5.3*688
"RTN","DGENUPL3",143,0)
 I DGPAT3("VETERAN")'="N" D
"RTN","DGENUPL3",144,0)
 . I DGELG3("SC")="N" S DGPAT3("VETERAN")="Y",DGPAT3("PATYPE")=$O(^DG(391,"B","NSC VETERAN",0))
"RTN","DGENUPL3",145,0)
 . I DGELG3("SC")="Y" S DGPAT3("VETERAN")="Y",DGPAT3("PATYPE")=$O(^DG(391,"B","SC VETERAN",0))
"RTN","DGENUPL3",146,0)
 I DGPAT3("VETERAN")="N" S DGPAT3("PATYPE")=$$NONVET(DGELG("ELIG","CODE"))
"RTN","DGENUPL3",147,0)
 Q
"RTN","DGENUPL3",148,0)
 ;
"RTN","DGENUPL3",149,0)
NONVET(DGCODE) ;map Patient Type from Primary Elig (and POS)
"RTN","DGENUPL3",150,0)
 ;added with DG*5.3*688 - ERC
"RTN","DGENUPL3",151,0)
 ; input:         DGCODE is the Primary Eligibility code
"RTN","DGENUPL3",152,0)
 ; output:        DGTPYE is returned as the value for Patient Type
"RTN","DGENUPL3",153,0)
 N PTELG,DGTYPE
"RTN","DGENUPL3",154,0)
 S (PTELG,DGTYPE)=""
"RTN","DGENUPL3",155,0)
 Q:$G(DGCODE)']"" ""
"RTN","DGENUPL3",156,0)
 S PTELG=$$NATNAME^DGENELA(DGCODE)
"RTN","DGENUPL3",157,0)
 Q:$G(PTELG)']"" ""
"RTN","DGENUPL3",158,0)
 I "CHAMPVA^OTHER FEDERAL AGENCY^REIMBURSABLE INSURANCE^SHARING AGREEMENT"[PTELG S DGTYPE=$$POS(.DGTYPE) Q:DGTYPE DGTYPE
"RTN","DGENUPL3",159,0)
 S DGTYPE=$S(PTELG["ALLIED":"ALLIED VETERAN",PTELG["COLLATERAL":"COLLATERAL",PTELG["EMPLOYEE":"EMPLOYEE",PTELG["TRICARE":"TRICARE",1:"")
"RTN","DGENUPL3",160,0)
 I DGTYPE']"" S DGTYPE="NON-VETERAN (OTHER)" ;default Pat Type
"RTN","DGENUPL3",161,0)
 S DGTYPE=$O(^DG(391,"B",DGTYPE,""))
"RTN","DGENUPL3",162,0)
 Q DGTYPE
"RTN","DGENUPL3",163,0)
POS(DGTYPE) ;for these Elig Codes, check POS to determine Patient Type
"RTN","DGENUPL3",164,0)
 S DGPOS=DGELG("POS")
"RTN","DGENUPL3",165,0)
 I $G(DGPOS)']"" Q ""
"RTN","DGENUPL3",166,0)
 I '$D(^DIC(21,DGPOS,0)) Q ""
"RTN","DGENUPL3",167,0)
 S DGPOS=$P(^DIC(21,DGPOS,0),U)
"RTN","DGENUPL3",168,0)
 S DGTYPE=$S(DGPOS["ACTIVE":"ACTIVE DUTY",DGPOS["OPERAT":"ACTIVE DUTY",DGPOS["RETIR":"MILITARY RETIREE",1:"")
"RTN","DGENUPL3",169,0)
 I $G(DGTYPE)]"" S DGTYPE=$O(^DG(391,"B",DGTYPE,""))
"RTN","DGENUPL3",170,0)
 Q DGTYPE
"RTN","DGENUPL3",171,0)
 ;
"RTN","DGENUPL3",172,0)
 ;ZMH code moved here from DGENUPL2 - DG*5.3*653
"RTN","DGENUPL3",173,0)
ZMH ;Purple Heart, POW, OEF/OIF Conflict Loc
"RTN","DGENUPL3",174,0)
 ;ONLY PROCESS PH, OEF/OIF & POW FROM ZMH
"RTN","DGENUPL3",175,0)
 Q:$S(SEG(2)="PH":0,SEG(2)="OEIF":0,SEG(2)="POW":0,1:1)
"RTN","DGENUPL3",176,0)
 I SEG(2)="PH" D  Q  ;Process Purple Heart from ZMH
"RTN","DGENUPL3",177,0)
 . S DGPAT("PHI")=$P(SEG(3),$E(HLECH))
"RTN","DGENUPL3",178,0)
 . S DGELG("PH")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH)))
"RTN","DGENUPL3",179,0)
 . S DGPAT("PHST")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH),2))
"RTN","DGENUPL3",180,0)
 . S DGPAT("PHRR")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH),3))
"RTN","DGENUPL3",181,0)
 ;
"RTN","DGENUPL3",182,0)
 I SEG(2)="OEIF" D  Q
"RTN","DGENUPL3",183,0)
 . S DGOEIF("COUNT")=$G(DGOEIF("COUNT"))+1
"RTN","DGENUPL3",184,0)
 . S DGOEIF("LOC",DGOEIF("COUNT"))=$E($P(SEG(3),$E(HLECH)),1,3)
"RTN","DGENUPL3",185,0)
 . S DGOEIF("SITE",DGOEIF("COUNT"))=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH),2),"INSTITUTION")
"RTN","DGENUPL3",186,0)
 . S DGOEIF("FR",DGOEIF("COUNT"))=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH)),"DATE")
"RTN","DGENUPL3",187,0)
 . S DGOEIF("TO",DGOEIF("COUNT"))=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH),2),"DATE")
"RTN","DGENUPL3",188,0)
 . S DGOEIF("LOCK")=1
"RTN","DGENUPL3",189,0)
 ;
"RTN","DGENUPL3",190,0)
 I SEG(2)="POW" D  ;Process POW from ZMH
"RTN","DGENUPL3",191,0)
 . S DGPAT("POWI")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH))) ;POW STATUS INDICATED
"RTN","DGENUPL3",192,0)
 . S DGELG("POW")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH)))
"RTN","DGENUPL3",193,0)
 . S DGPAT("POWLOC")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH),2))
"RTN","DGENUPL3",194,0)
 . I DGPAT("POWLOC")'="@" S DGPAT("POWLOC")=$$POWLOC(DGPAT("POWLOC"),.ERROR) ;POW CONFINEMENT LOCATION
"RTN","DGENUPL3",195,0)
 . I ERROR D  Q
"RTN","DGENUPL3",196,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZMH SEGMENT, SEQ 3, POW CONFINEMENT LOCATION",.ERRCOUNT)
"RTN","DGENUPL3",197,0)
 . S DGPAT("POWFDT")=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH)),"DATE",.ERROR) ;POW FROM DATE
"RTN","DGENUPL3",198,0)
 . I ERROR D  Q
"RTN","DGENUPL3",199,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZMH SEGMENT, SEQ 4, POW FROM DATE",.ERRCOUNT)
"RTN","DGENUPL3",200,0)
 . S DGPAT("POWTDT")=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH),2),"DATE",.ERROR) ;POW TO DATE
"RTN","DGENUPL3",201,0)
 . I ERROR D  Q
"RTN","DGENUPL3",202,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZMH SEGMENT, SEQ 4, POW TO DATE",.ERRCOUNT)
"RTN","DGENUPL3",203,0)
 Q
"RTN","DGENUPL3",204,0)
POWLOC(LOC,ERROR) ;POW Confinement Location mapping with HL7 table VA023
"RTN","DGENUPL3",205,0)
 ;  Input: LOC - HL7 code for location
"RTN","DGENUPL3",206,0)
 ; Output: ERROR - Return error 1 on failure
"RTN","DGENUPL3",207,0)
 ;         IEN22 - IEN of file 22
"RTN","DGENUPL3",208,0)
 N TBL023
"RTN","DGENUPL3",209,0)
 S ERROR=0
"RTN","DGENUPL3",210,0)
 I LOC="" S ERROR=1 Q ""
"RTN","DGENUPL3",211,0)
 S TBL023(4)="WWI",TBL023(5)="WWII-EUROPE",TBL023(6)="WWII-PACIFIC"
"RTN","DGENUPL3",212,0)
 S TBL023(7)="KOREAN",TBL023(8)="VIETNAM",TBL023(9)="OTHER"
"RTN","DGENUPL3",213,0)
 S TBL023("A")="PERSIAN GULF",TBL023("B")="YUGOSLAVIA"
"RTN","DGENUPL3",214,0)
 S IEN22=$O(^DIC(22,"C",TBL023(LOC),""))
"RTN","DGENUPL3",215,0)
 I IEN22="" S ERROR=1
"RTN","DGENUPL3",216,0)
 Q IEN22
"RTN","DGENUPL3",217,0)
 ;
"RTN","DGENUPL4")
0^76^B64586357
"RTN","DGENUPL4",1,0)
DGENUPL4 ;ALB/CJM,RTK,ISA/KWP,ISD/GSN,PHH,RGL,PJR,BRM,TDM,TMK,EG,BAJ - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 01/05/07
"RTN","DGENUPL4",2,0)
 ;;5.3;REGISTRATION;**147,177,232,253,327,367,377,514,451,625,673,708,688**;Aug 13,1993;Build 29
"RTN","DGENUPL4",3,0)
 ;
"RTN","DGENUPL4",4,0)
UOBJECTS(DFN,DGPAT,DGELG,DGCDIS,DGOEIF,MSGID,ERRCOUNT,MSGS,OLDPAT,OLDELG,OLDCDIS,OLDOEIF) ;
"RTN","DGENUPL4",5,0)
 ;Used to update PATIENT, ELIGIBILITY, CATASTROPHIC
"RTN","DGENUPL4",6,0)
 ;DISABILITY, and OEF/OIF CONFLICT objects 'in memory'.
"RTN","DGENUPL4",7,0)
 ;
"RTN","DGENUPL4",8,0)
 ;Input:
"RTN","DGENUPL4",9,0)
 ;  DFN - ien of record in the PATIENT file
"RTN","DGENUPL4",10,0)
 ;  DGPAT - PATIENT object array (pass by reference)
"RTN","DGENUPL4",11,0)
 ;  DGELG - ELIGIBILITY object array (pass by ref)
"RTN","DGENUPL4",12,0)
 ;  DGCDIS - CATASTROPHIC DISABILITY object array (pass by ref)
"RTN","DGENUPL4",13,0)
 ;  DGOEIF - OEF/OIF conflict object array (pass by ref)
"RTN","DGENUPL4",14,0)
 ;  MSGID - message control id of the HL7 message being processed
"RTN","DGENUPL4",15,0)
 ;  ERRCOUNT - count of errors (pass by ref)
"RTN","DGENUPL4",16,0)
 ;  MSGS - array of messages for the site (pass by ref)
"RTN","DGENUPL4",17,0)
 ;
"RTN","DGENUPL4",18,0)
 ;Output:
"RTN","DGENUPL4",19,0)
 ;  Function Value: 1 if update was successful 'in memory',
"RTN","DGENUPL4",20,0)
 ;           consistency checks pass and the objects can be stored in
"RTN","DGENUPL4",21,0)
 ;           the local database, 0 otherwise.
"RTN","DGENUPL4",22,0)
 ;  DGPAT - PATIENT object array (pass by reference)
"RTN","DGENUPL4",23,0)
 ;  DGELG - ELIGIBILITY object array (pass by ref)
"RTN","DGENUPL4",24,0)
 ;  DGCDIS - CATASTROPHIC DISABILITY object array (pass by ref)
"RTN","DGENUPL4",25,0)
 ;  ERRCOUNT - count of errors (pass by ref)
"RTN","DGENUPL4",26,0)
 ;  MSGS - array of messages for the site (pass by ref)
"RTN","DGENUPL4",27,0)
 ;  OLDPAT - patient object array as it currently exists in database before the update (pass by ref)
"RTN","DGENUPL4",28,0)
 ;  OLDELG - eligibility object array as it currently exists in database before the update (pass by ref)
"RTN","DGENUPL4",29,0)
 ;  OLDCDIS - catastrophically disability object array as it currently exists in database before the update (pass by ref)
"RTN","DGENUPL4",30,0)
 ;  OLDOEIF - OEF/OIF conflict data as it currently exists in database before the update (pass by ref)
"RTN","DGENUPL4",31,0)
 ;
"RTN","DGENUPL4",32,0)
 N DGPAT3,DGELG3,DGCDIS3,SUCCESS
"RTN","DGENUPL4",33,0)
 S SUCCESS=1
"RTN","DGENUPL4",34,0)
 D
"RTN","DGENUPL4",35,0)
 .;first get local site's current data
"RTN","DGENUPL4",36,0)
 .I ('$$GET^DGENPTA(DFN,.OLDPAT))!('$$GET^DGENELA(DFN,.OLDELG))!('$$GET^DGENCDA(DFN,.OLDCDIS))!('$P($$GET^DGENOEIF(DFN,.OLDOEIF,0),U,2)) D  Q
"RTN","DGENUPL4",37,0)
 ..D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),"UNABLE TO ACCESS PATIENT RECORD",.ERRCOUNT)
"RTN","DGENUPL4",38,0)
 ..S SUCCESS=0
"RTN","DGENUPL4",39,0)
 .;
"RTN","DGENUPL4",40,0)
 .;Phase II CD Consistency Checks (SRS 6.5.1.4) check VISTA against HEC
"RTN","DGENUPL4",41,0)
 .S SUCCESS=$$CDCHECK^DGENUPL9()
"RTN","DGENUPL4",42,0)
 .Q:'SUCCESS
"RTN","DGENUPL4",43,0)
 .;
"RTN","DGENUPL4",44,0)
 .;now merge with the update
"RTN","DGENUPL4",45,0)
 .D MERGE
"RTN","DGENUPL4",46,0)
 .;
"RTN","DGENUPL4",47,0)
 .;add the assumed values
"RTN","DGENUPL4",48,0)
 .D ADD
"RTN","DGENUPL4",49,0)
 .;
"RTN","DGENUPL4",50,0)
 .;now do the consistency checks
"RTN","DGENUPL4",51,0)
 .S SUCCESS=$$CHECK()
"RTN","DGENUPL4",52,0)
 .Q:'SUCCESS
"RTN","DGENUPL4",53,0)
 .;
"RTN","DGENUPL4",54,0)
 .;replace input arrays with fully updated versions
"RTN","DGENUPL4",55,0)
 .K DGPAT M DGPAT=DGPAT3
"RTN","DGENUPL4",56,0)
 .K DGELG M DGELG=DGELG3
"RTN","DGENUPL4",57,0)
 .K DGCDIS M DGCDIS=DGCDIS3
"RTN","DGENUPL4",58,0)
 ;
"RTN","DGENUPL4",59,0)
 I SUCCESS D
"RTN","DGENUPL4",60,0)
 .;
"RTN","DGENUPL4",61,0)
 .;list of required notifications
"RTN","DGENUPL4",62,0)
 .;
"RTN","DGENUPL4",63,0)
 .;change in date of death
"RTN","DGENUPL4",64,0)
 .I DGPAT("DEATH"),$P(OLDPAT("DEATH"),".")'=$P(DGPAT("DEATH"),".") D
"RTN","DGENUPL4",65,0)
 ..D ADDMSG^DGENUPL3(.MSGS,"HEC SHOWS DATE OF DEATH = "_$$FMTE^XLFDT(DGPAT("DEATH"),"1"),1)
"RTN","DGENUPL4",66,0)
 ..D ADDMSG^DGENUPL3(.MSGS,$S('OLDPAT("DEATH"):"SITE DOES NOT HAVE DATE OF DEATH",1:"SITE HAS DATE OF DEATH = "_$$FMTE^XLFDT(OLDPAT("DEATH"),"1")),1)
"RTN","DGENUPL4",67,0)
 .;
"RTN","DGENUPL4",68,0)
 .I OLDPAT("DEATH"),'DGPAT("DEATH") D
"RTN","DGENUPL4",69,0)
 ..D ADDMSG^DGENUPL3(.MSGS,"HEC SHOWS NO DATE OF DEATH",1)
"RTN","DGENUPL4",70,0)
 ..D ADDMSG^DGENUPL3(.MSGS,"SITE HAS DATE OF DEATH = "_$$FMTE^XLFDT(OLDPAT("DEATH"),"1"),1)
"RTN","DGENUPL4",71,0)
 .;
"RTN","DGENUPL4",72,0)
 .;change in POW
"RTN","DGENUPL4",73,0)
 .I OLDELG("POW")="N",DGELG("POW")="Y" D ADDMSG^DGENUPL3(.MSGS,"POW STATUS CHANGED TO YES")
"RTN","DGENUPL4",74,0)
 .I OLDELG("POW")="Y",DGELG("POW")="N" D ADDMSG^DGENUPL3(.MSGS,"POW STATUS CHANGED TO NO")
"RTN","DGENUPL4",75,0)
 .;
"RTN","DGENUPL4",76,0)
 .;SC to NSC
"RTN","DGENUPL4",77,0)
 .I OLDELG("SC")="Y",DGELG("SC")="N" D ADDMSG^DGENUPL3(.MSGS,"VETERAN CHANGED TO NON-SERVICE CONNECTED",1)
"RTN","DGENUPL4",78,0)
 .;
"RTN","DGENUPL4",79,0)
 .; Change from Eligible to Ineligible
"RTN","DGENUPL4",80,0)
 .I 'OLDPAT("INELDATE"),DGPAT("INELDATE") D ADDMSG^DGENUPL3(.MSGS,"VETERAN PREVIOUSLY ELIGIBLE FOR VA HEALTH CARE, NOW INELIGIBLE.",1)
"RTN","DGENUPL4",81,0)
 .;
"RTN","DGENUPL4",82,0)
 .; Check for erroneous CD deletion
"RTN","DGENUPL4",83,0)
 .I OLDCDIS("VCD")="","@"[DGCDIS("VCD") Q  ;no notification is needed
"RTN","DGENUPL4",84,0)
 .;
"RTN","DGENUPL4",85,0)
 .; CD Determination Changed
"RTN","DGENUPL4",86,0)
 .I OLDCDIS("VCD")'=DGCDIS("VCD") D ADDMSG^DGENUPL3(.MSGS,"VETERANS CD EVALUATION HAS CHANGED.")
"RTN","DGENUPL4",87,0)
 D EP^DGENUPLB
"RTN","DGENUPL4",88,0)
 Q SUCCESS
"RTN","DGENUPL4",89,0)
 ;
"RTN","DGENUPL4",90,0)
ADD ;
"RTN","DGENUPL4",91,0)
 ;Description: adds computed and assumed values to the updated objects
"RTN","DGENUPL4",92,0)
 ;
"RTN","DGENUPL4",93,0)
 ;Input: DGELG3(),DGPAT3() created in the UOBJECTS procedure.
"RTN","DGENUPL4",94,0)
 ;
"RTN","DGENUPL4",95,0)
 N SUB,TYPE,DATA
"RTN","DGENUPL4",96,0)
 S DGELG3("ELIGENTBY")=.5
"RTN","DGENUPL4",97,0)
 S SUB=0 F  S SUB=$O(DGELG3("RATEDIS",SUB)) Q:'SUB  S DGELG3("RATEDIS",SUB,"RDSC")=1
"RTN","DGENUPL4",98,0)
 ;
"RTN","DGENUPL4",99,0)
 ; Default Patient Types
"RTN","DGENUPL4",100,0)
 D SCVET^DGENUPL3
"RTN","DGENUPL4",101,0)
 ;
"RTN","DGENUPL4",102,0)
 ; If Ineldate apply business rules
"RTN","DGENUPL4",103,0)
 I DGPAT3("INELDATE"),DGELG3("SC")'="Y" D
"RTN","DGENUPL4",104,0)
 .S DGPAT3("VETERAN")="N",DGPAT3("PATYPE")=$O(^DG(391,"B","NON-VETERAN (OTHER)",0))
"RTN","DGENUPL4",105,0)
 .S DGELG3("POS")=$O(^DIC(21,"B","OTHER NON-VETERANS",0))
"RTN","DGENUPL4",106,0)
 ;
"RTN","DGENUPL4",107,0)
 ;update/set ELIGIBILITY VERIF. SOURCE field (Ineligible Project):
"RTN","DGENUPL4",108,0)
 S DATA(.3613)=$S(DGELG3("ELIGVERIF")["VBA":"H",DGELG3("ELIGVERIF")["CEV":"H",DGELG3("ELIGVERIF")["VIVA":"H",1:"V")
"RTN","DGENUPL4",109,0)
 ;
"RTN","DGENUPL4",110,0)
 ; File data fields modified by Ineligible Business Rules
"RTN","DGENUPL4",111,0)
 I $$UPD^DGENDBS(2,DFN,.DATA,.ERROR)
"RTN","DGENUPL4",112,0)
 Q
"RTN","DGENUPL4",113,0)
 ;
"RTN","DGENUPL4",114,0)
MERGE ;
"RTN","DGENUPL4",115,0)
 ;Description: merges arrays with current patient data with the updates
"RTN","DGENUPL4",116,0)
 ; Merges DGPAT() + OLDPAT() -> DGPAT3()
"RTN","DGENUPL4",117,0)
 ;        DGELG() + OLDELG() -> DGELG3()
"RTN","DGENUPL4",118,0)
 ; overlays catastrophic disability array with data from HEC
"RTN","DGENUPL4",119,0)
 ;        DGCDIS() is info from HEC
"RTN","DGENUPL4",120,0)
 ;
"RTN","DGENUPL4",121,0)
 N SUB,SUB2,LOC,HEC,NATCODE
"RTN","DGENUPL4",122,0)
 M DGPAT3=OLDPAT,DGELG3=OLDELG
"RTN","DGENUPL4",123,0)
 ;Replace POW in VistA with HEC data
"RTN","DGENUPL4",124,0)
 I '$D(DGPAT3("POWI")) S DGELG3("POW")=""
"RTN","DGENUPL4",125,0)
 K DGCDIS3 M DGCDIS3=OLDCDIS K DGCDIS3("EXT"),DGCDIS3("PROC"),DGCDIS3("COND"),DGCDIS3("DIAG")
"RTN","DGENUPL4",126,0)
 ;
"RTN","DGENUPL4",127,0)
 ;discard MT status from local database - don't ever want to use it during upload
"RTN","DGENUPL4",128,0)
 S DGELG3("MTSTA")=DGELG("MTSTA")
"RTN","DGENUPL4",129,0)
 ;
"RTN","DGENUPL4",130,0)
 ;patient array
"RTN","DGENUPL4",131,0)
 S SUB=""
"RTN","DGENUPL4",132,0)
 F  S SUB=$O(DGPAT(SUB)) Q:(SUB="")  I (DGPAT(SUB)'="") S DGPAT3(SUB)=$S((DGPAT(SUB)="@"):"",1:DGPAT(SUB))
"RTN","DGENUPL4",133,0)
 ;
"RTN","DGENUPL4",134,0)
 ;Allow Ineligible info deletion (Ineligible Project):
"RTN","DGENUPL4",135,0)
 I $D(DGPAT("INELDEC")),DGPAT("INELDEC")="" S DGPAT("INELDEC")="@"
"RTN","DGENUPL4",136,0)
 I $D(DGPAT("INELREA")),DGPAT("INELREA")="" S DGPAT("INELREA")="@"
"RTN","DGENUPL4",137,0)
 I $D(DGPAT("INELDATE")),DGPAT("INELDATE")="" S DGPAT("INELDATE")="@"
"RTN","DGENUPL4",138,0)
 ;
"RTN","DGENUPL4",139,0)
 ;catastrophic disability array
"RTN","DGENUPL4",140,0)
 S SUB=""
"RTN","DGENUPL4",141,0)
 F  S SUB=$O(DGCDIS(SUB)) Q:(SUB="")  D
"RTN","DGENUPL4",142,0)
 .I $D(DGCDIS(SUB))=1 I ($G(DGCDIS(SUB))'="") S DGCDIS3(SUB)=DGCDIS(SUB)
"RTN","DGENUPL4",143,0)
 .I $D(DGCDIS(SUB))=10 D
"RTN","DGENUPL4",144,0)
 ..S SUB2=""
"RTN","DGENUPL4",145,0)
 ..F  S SUB2=$O(DGCDIS(SUB,SUB2)) Q:SUB2=""  D
"RTN","DGENUPL4",146,0)
 ...I ($G(DGCDIS(SUB,SUB2))'="") S DGCDIS3(SUB,SUB2)=DGCDIS(SUB,SUB2)
"RTN","DGENUPL4",147,0)
 ...I SUB="PROC" D
"RTN","DGENUPL4",148,0)
 ....N CDPROC,CDEXT,LIEN
"RTN","DGENUPL4",149,0)
 ....S CDPROC=$G(DGCDIS("PROC",SUB2))
"RTN","DGENUPL4",150,0)
 ....Q:CDPROC=""
"RTN","DGENUPL4",151,0)
 ....S CDEXT=$G(DGCDIS("EXT",SUB2,1))
"RTN","DGENUPL4",152,0)
 ....Q:CDEXT=""
"RTN","DGENUPL4",153,0)
 ....S LIEN=$O(^DGEN(27.17,CDPROC,1,"B",CDEXT,0))
"RTN","DGENUPL4",154,0)
 ....Q:LIEN=""
"RTN","DGENUPL4",155,0)
 ....S DGCDIS3("EXT",SUB2,LIEN)=CDEXT
"RTN","DGENUPL4",156,0)
 ;
"RTN","DGENUPL4",157,0)
 ;eligibility array
"RTN","DGENUPL4",158,0)
 F  S SUB=$O(DGELG(SUB)) Q:(SUB="")  I ($G(DGELG(SUB))'="") S DGELG3(SUB)=$S((DGELG(SUB)="@"):"",1:DGELG(SUB))
"RTN","DGENUPL4",159,0)
 ;
"RTN","DGENUPL4",160,0)
 ;rated disabilities from HEC should replace local sites
"RTN","DGENUPL4",161,0)
 D
"RTN","DGENUPL4",162,0)
 .K DGELG3("RATEDIS")
"RTN","DGENUPL4",163,0)
 .M DGELG3("RATEDIS")=DGELG("RATEDIS")
"RTN","DGENUPL4",164,0)
 ;
"RTN","DGENUPL4",165,0)
 ;primary eligibility
"RTN","DGENUPL4",166,0)
 I (DGELG("ELIG","CODE")'="") S DGELG3("ELIG","CODE")=$S((DGELG("ELIG","CODE")="@"):"",($$NATCODE^DGENELA(DGELG("ELIG","CODE"))=$$NATCODE^DGENELA(DGELG3("ELIG","CODE"))):DGELG3("ELIG","CODE"),1:DGELG("ELIG","CODE"))
"RTN","DGENUPL4",167,0)
 ;
"RTN","DGENUPL4",168,0)
 ;patient eligibilities multiple
"RTN","DGENUPL4",169,0)
 ;delete veteran type codes not mapped to national codes sent by HEC, but leave non-veteran types and the codes where there is a match
"RTN","DGENUPL4",170,0)
 ;first find all local codes already in the patient file and the ones sent from HEC, keep in arrays LOC and HEC
"RTN","DGENUPL4",171,0)
 S NATCODE=$$NATCODE^DGENELA(DGELG("ELIG","CODE")) I NATCODE S HEC(NATCODE)=""
"RTN","DGENUPL4",172,0)
 S SUB=0 F  S SUB=$O(DGELG("ELIG","CODE",SUB)) Q:'SUB  S NATCODE=$$NATCODE^DGENELA(SUB) I NATCODE S HEC(NATCODE)=""
"RTN","DGENUPL4",173,0)
 S SUB=0 F  S SUB=$O(DGELG3("ELIG","CODE",SUB)) Q:'SUB  S NATCODE=$$NATCODE^DGENELA(SUB) I NATCODE S LOC(NATCODE)=""
"RTN","DGENUPL4",174,0)
 ;Now discard the codes in the local patient database that don't map to a national code sent by HEC, as well as HUMANIARIAN EMERGENCY code if not sent by HEC: 
"RTN","DGENUPL4",175,0)
 S SUB=0
"RTN","DGENUPL4",176,0)
 F  S SUB=$O(DGELG3("ELIG","CODE",SUB)) Q:'SUB  D
"RTN","DGENUPL4",177,0)
 .I $P($G(^DIC(8,SUB,0)),"^",5)="Y"!($P($G(^DIC(8,SUB,0)),"^")["HUMANITARIAN EMERGENCY"),'$D(HEC($$NATCODE^DGENELA(SUB))) K DGELG3("ELIG","CODE",SUB)
"RTN","DGENUPL4",178,0)
 ;now add codes included in the update that the local database does not already contain
"RTN","DGENUPL4",179,0)
 S SUB=0
"RTN","DGENUPL4",180,0)
 F  S SUB=$O(DGELG("ELIG","CODE",SUB)) Q:'SUB  D
"RTN","DGENUPL4",181,0)
 .I '$D(LOC($$NATCODE^DGENELA(SUB))) S DGELG3("ELIG","CODE",SUB)=SUB
"RTN","DGENUPL4",182,0)
 ;Agent Orange Exp. Location, use local database when upload is NULL
"RTN","DGENUPL4",183,0)
 D AO^DGENUPL9
"RTN","DGENUPL4",184,0)
 Q
"RTN","DGENUPL4",185,0)
 ;
"RTN","DGENUPL4",186,0)
CHECK() ;
"RTN","DGENUPL4",187,0)
 ;
"RTN","DGENUPL4",188,0)
 N SUCCESS,ALIVE,ERRMSG,DGENR
"RTN","DGENUPL4",189,0)
 S SUCCESS=1
"RTN","DGENUPL4",190,0)
 S ERRMSG=""
"RTN","DGENUPL4",191,0)
 ;
"RTN","DGENUPL4",192,0)
 ;if upload includes date of death, check for indications that patient is alive
"RTN","DGENUPL4",193,0)
 I DGPAT3("DEATH"),'OLDPAT("DEATH") D  S:ALIVE SUCCESS=0
"RTN","DGENUPL4",194,0)
 .;
"RTN","DGENUPL4",195,0)
 .;determine if patient is at the moment being registered
"RTN","DGENUPL4",196,0)
 .S ALIVE=$$IFREG^DGREG(DFN)
"RTN","DGENUPL4",197,0)
 .;
"RTN","DGENUPL4",198,0)
 .;check if an inpatient
"RTN","DGENUPL4",199,0)
 .I 'ALIVE,$$INPAT^DGENPTA(DFN,DT,DT) S ALIVE=1
"RTN","DGENUPL4",200,0)
 .;
"RTN","DGENUPL4",201,0)
 .;Phase II locally enrolled with enrollment date after death date and status of unverified and rejected-initial application by vamc (SRS 6.5.1.2 e)
"RTN","DGENUPL4",202,0)
 .N CURIEN,CURENR
"RTN","DGENUPL4",203,0)
 .S CURIEN=$$FINDCUR^DGENA(DFN)
"RTN","DGENUPL4",204,0)
 .I CURIEN,$$GET^DGENA(CURIEN,.CURENR),CURENR("DATE")>DGPAT3("DEATH"),CURENR("STATUS")=1!(CURENR("STATUS")=14) S ALIVE=1
"RTN","DGENUPL4",205,0)
 .;there is an indication that he patient may not be dead
"RTN","DGENUPL4",206,0)
 .D:ALIVE ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),"LOCAL SITE VERIFY PATIENT DEATH",.ERRCOUNT),ADDMSG^DGENUPL3(.MSGS,"ELIBILITY UPLOAD CONTAINED DATE OF DEATH AND WAS REJECTED, PLEASE VERIFY PATIENT DEATH",1),NOTIFY^DGENUPL3(.DGPAT,.MSGS)
"RTN","DGENUPL4",207,0)
 ;
"RTN","DGENUPL4",208,0)
 ;only do consistency checks on this data if it is verified
"RTN","DGENUPL4",209,0)
 I SUCCESS,(DGELG3("ELIGSTA")="V") D
"RTN","DGENUPL4",210,0)
 .I $$CHECK^DGENPTA1(.DGPAT3,.ERRMSG),$$CHECK^DGENELA1(.DGELG3,.DGPAT3,.DGCDIS3,.ERRMSG),$$CHECK^DGENCDA1(.DGCDIS3,.ERRMSG)
"RTN","DGENUPL4",211,0)
 .E  D
"RTN","DGENUPL4",212,0)
 ..S SUCCESS=0
"RTN","DGENUPL4",213,0)
 ..D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),ERRMSG,.ERRCOUNT)
"RTN","DGENUPL4",214,0)
 Q SUCCESS
"RTN","DGENUPL7")
0^105^B32315527
"RTN","DGENUPL7",1,0)
DGENUPL7 ;ISA/KWP/CKN/TMK,TDM - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 6/18/08 12:41pm
"RTN","DGENUPL7",2,0)
 ;;5.3;REGISTRATION;**232,367,397,417,379,431,513,628,673,653,742,688**;Aug 13,1993;Build 29
"RTN","DGENUPL7",3,0)
 ;Phase II split from DGENUPL
"RTN","DGENUPL7",4,0)
Z11(MSGIEN,MSGID,CURLINE,DFN,ERRCOUNT) ;
"RTN","DGENUPL7",5,0)
 ;Description:  This is used to process a single ORU~Z11 or ORF~Z11 msg. 
"RTN","DGENUPL7",6,0)
 ;Input:
"RTN","DGENUPL7",7,0)
 ;  MSGIEN - the internal entry number of the HL7 message in the
"RTN","DGENUPL7",8,0)
 ;      HL7 MESSAGE TEXT file (772)
"RTN","DGENUPL7",9,0)
 ;  MSGID -message control id of HL7 msg in the MSH segment
"RTN","DGENUPL7",10,0)
 ;  CURLINE - the subscript of the MSH segment of the current message (pass by reference)
"RTN","DGENUPL7",11,0)
 ;  DFN - identifies the patient, is the ien of a record in the PATIENT file.
"RTN","DGENUPL7",12,0)
 ;  ERRCOUNT - is a count of the number of messages in the batch that can not be processed (pass by reference)
"RTN","DGENUPL7",13,0)
 ;
"RTN","DGENUPL7",14,0)
 ;Output:
"RTN","DGENUPL7",15,0)
 ;  CURLINE - upon leaving the procedure this parameter should be set to the end of the current message. (pass by reference)
"RTN","DGENUPL7",16,0)
 ;  ERRCOUNT - set to count of messages that were not processed due to errors encountered  (pass by reference)
"RTN","DGENUPL7",17,0)
 ;
"RTN","DGENUPL7",18,0)
 N DGELG,DGENR,DGPAT,DGCDIS,DGOEIF,ERROR,ERRMSG,MSGS,DGELGSUB,DGENUPLD,DGCON
"RTN","DGENUPL7",19,0)
 N DGNEWVAL,DIV,SUB,OLDELG,OLDPAT,OLDDCDIS,OLDEIF,DGSEC,OLDSEC,DGNTR,DGMST,DGPHINC
"RTN","DGENUPL7",20,0)
 ;
"RTN","DGENUPL7",21,0)
 ;some process is killing these HL7 variables, so need to protect them
"RTN","DGENUPL7",22,0)
 S SUB=HLFS
"RTN","DGENUPL7",23,0)
 S DIV=HLECH
"RTN","DGENUPL7",24,0)
 N HLDA,HLDAN,HLDAP,HLDT,HLDT1,HLECH,HLFS,HLNDAP,HLNDAP0,HLPID,HLQ,HLVER,HLERR,HLMTN,HLSDT
"RTN","DGENUPL7",25,0)
 S HLFS=SUB
"RTN","DGENUPL7",26,0)
 S HLECH=DIV
"RTN","DGENUPL7",27,0)
 S HLQ=""""""
"RTN","DGENUPL7",28,0)
 K DIV,SUB
"RTN","DGENUPL7",29,0)
 ;
"RTN","DGENUPL7",30,0)
 ;drops out of block on error
"RTN","DGENUPL7",31,0)
 D
"RTN","DGENUPL7",32,0)
 .Q:'$$PARSE^DGENUPL1(MSGIEN,MSGID,.CURLINE,.ERRCOUNT,.DGPAT,.DGELG,.DGENR,.DGCDIS,.DGOEIF,.DGSEC,.DGNTR,.DGMST)
"RTN","DGENUPL7",33,0)
 .D GETLOCKS^DGENUPL5(DFN)
"RTN","DGENUPL7",34,0)
 .;
"RTN","DGENUPL7",35,0)
 .;Used by cross-references to determine if an upload is in progress.
"RTN","DGENUPL7",36,0)
 .S DGENUPLD="ENROLLMENT/ELIGIBILITY UPLOAD IN PROGRESS"
"RTN","DGENUPL7",37,0)
 .;
"RTN","DGENUPL7",38,0)
 .;Update the PATIENT, ELIGIBILITY, CATASTROPHIC DISABILITY objects in memory
"RTN","DGENUPL7",39,0)
 .Q:'$$UOBJECTS^DGENUPL4(DFN,.DGPAT,.DGELG,.DGCDIS,.DGOEIF,MSGID,.ERRCOUNT,.MSGS,.OLDPAT,.OLDELG,.OLDCDIS,.OLDEIF)
"RTN","DGENUPL7",40,0)
 .S ERROR=0
"RTN","DGENUPL7",41,0)
 .;if the msg contains patient security, process it
"RTN","DGENUPL7",42,0)
 .I $D(DGSEC) D  Q:ERROR
"RTN","DGENUPL7",43,0)
 ..S DGSEC("DFN")=DFN
"RTN","DGENUPL7",44,0)
 ..S DGSEC("USER")=.5
"RTN","DGENUPL7",45,0)
 ..I DGSEC("LEVEL")'="" D
"RTN","DGENUPL7",46,0)
 ...I DGSEC("DATETIME")="" S DGSEC("DATETIME")=$$NOW^XLFDT ;DG*5.3*653 
"RTN","DGENUPL7",47,0)
 ..;
"RTN","DGENUPL7",48,0)
 ..; check consistency of patient security record
"RTN","DGENUPL7",49,0)
 ..I '$$CHECK^DGENSEC(.DGSEC,.ERRMSG) D  Q
"RTN","DGENUPL7",50,0)
 ...S ERROR=1
"RTN","DGENUPL7",51,0)
 ...D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),ERRMSG,.ERRCOUNT)
"RTN","DGENUPL7",52,0)
 ..;
"RTN","DGENUPL7",53,0)
 ..; upload patient security, consistency checks passed
"RTN","DGENUPL7",54,0)
 ..D SECUPLD^DGENUPL5(DFN,.DGSEC,.OLDSEC)
"RTN","DGENUPL7",55,0)
 .;
"RTN","DGENUPL7",56,0)
 .;if the msg has an enrollment process it
"RTN","DGENUPL7",57,0)
 .I DGENR("STATUS")!DGENR("APP") D  Q:ERROR
"RTN","DGENUPL7",58,0)
 ..;use $$PRIORITY to get the eligibility data used to compute priority
"RTN","DGENUPL7",59,0)
 ..I $$PRIORITY^DGENELA4(DFN,.DGELG,.DGELGSUB,DGENR("DATE"),DGENR("APP"))
"RTN","DGENUPL7",60,0)
 ..;
"RTN","DGENUPL7",61,0)
 ..;store the eligibility data in the enrollment record and other missing fields
"RTN","DGENUPL7",62,0)
 ..M DGENR("ELIG")=DGELGSUB
"RTN","DGENUPL7",63,0)
 ..S DGENR("DFN")=DFN
"RTN","DGENUPL7",64,0)
 ..S DGENR("PRIORREC")=""
"RTN","DGENUPL7",65,0)
 ..S DGENR("USER")=.5
"RTN","DGENUPL7",66,0)
 ..S DGENR("DATETIME")=$$NOW^XLFDT
"RTN","DGENUPL7",67,0)
 ..;
"RTN","DGENUPL7",68,0)
 ..;Allow null overwrites of Ineligible data (Ineligible Project):
"RTN","DGENUPL7",69,0)
 ..I $D(DGENR("DATE")),DGENR("DATE")="" S DGENR("DATE")="@"
"RTN","DGENUPL7",70,0)
 ..I $D(DGENR("FACREC")),DGENR("FACREC")="" S DGENR("FACREC")="@"
"RTN","DGENUPL7",71,0)
 ..;
"RTN","DGENUPL7",72,0)
 ..;check the consistency of the enrollment record
"RTN","DGENUPL7",73,0)
 ..I '$$CHECK^DGENA3(.DGENR,.DGPAT,.ERRMSG) D  Q
"RTN","DGENUPL7",74,0)
 ...S ERROR=1
"RTN","DGENUPL7",75,0)
 ...D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),ERRMSG,.ERRCOUNT)
"RTN","DGENUPL7",76,0)
 ..;
"RTN","DGENUPL7",77,0)
 ..; removed EGT consistency check with DG*5.3*628
"RTN","DGENUPL7",78,0)
 ..;Phase II EGT consistency checks (SRS 6.5.1.3)
"RTN","DGENUPL7",79,0)
 ..;Only do the EGT consistency checks for Rejected-Fiscal Year (11),Rejected-Mid Cycle (12),Rejected-Stop enrolling new apps (13),Rejected-Initil App by VAMC (14),Rejected below EGT threshold (22)
"RTN","DGENUPL7",80,0)
 ..;I "^11^12^13^14^22^"[("^"_DGENR("STATUS")_"^"),$$ABOVE^DGENEGT1(DGENR("DFN"),DGENR("PRIORITY"),DGENR("SUBGRP"),"","",1) D  Q
"RTN","DGENUPL7",81,0)
 ..;.S ERROR=1
"RTN","DGENUPL7",82,0)
 ..;.S ERRMSG="THE ENROLLMENT RECORD DID NOT PASS THE EGT CONSISTENCY CHECKS."
"RTN","DGENUPL7",83,0)
 ..;.D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),ERRMSG,.ERRCOUNT)
"RTN","DGENUPL7",84,0)
 ..;
"RTN","DGENUPL7",85,0)
 ..;Allow null overwrites for Ineligible vets (Ineligible Project):
"RTN","DGENUPL7",86,0)
 ..I $G(DGPAT("INELDATE"))'="" S (DGENR("PRIORITY"),DGENR("SUBGRP"))=""
"RTN","DGENUPL7",87,0)
 ..I DGENR("DATE")="@" S DGENR("DATE")=""
"RTN","DGENUPL7",88,0)
 ..I DGENR("FACREC")="@" S DGENR("FACREC")=""
"RTN","DGENUPL7",89,0)
 ..;
"RTN","DGENUPL7",90,0)
 ..D ENRUPLD^DGENUPL8(.DGENR,.DGPAT)
"RTN","DGENUPL7",91,0)
 .;
"RTN","DGENUPL7",92,0)
 .;Store the PATIENT, ELIGIBILITY, & CAT. DISB. objects
"RTN","DGENUPL7",93,0)
 .I $$STORE^DGENPTA1(.DGPAT,,1)
"RTN","DGENUPL7",94,0)
 .I $$STORE^DGENELA1(.DGELG,.DGPAT,.DGCDIS,,1)
"RTN","DGENUPL7",95,0)
 .I $G(DGCDIS("VCD"))'="",$$STORE^DGENCDA2(DFN,.DGCDIS) ;checks first if there is catastrophic disability information
"RTN","DGENUPL7",96,0)
 .;
"RTN","DGENUPL7",97,0)
 .;Call PIMS api to file NTR data.
"RTN","DGENUPL7",98,0)
 .I $D(DGNTR),$$ENRUPD^DGNTAPI1(DFN,.DGNTR)
"RTN","DGENUPL7",99,0)
 .;
"RTN","DGENUPL7",100,0)
 .;Call PIMS api to file MST data.
"RTN","DGENUPL7",101,0)
 .I DGMST("MSTSTAT")'="",DGMST("MSTDT")'="",DGMST("MSTST")'="" D
"RTN","DGENUPL7",102,0)
 ..I $$NEWSTAT^DGMSTAPI(DFN,DGMST("MSTSTAT"),DGMST("MSTDT"),".5",DGMST("MSTST"),0)
"RTN","DGENUPL7",103,0)
 .;
"RTN","DGENUPL7",104,0)
 .;Since HEC is authoritative source, If no OEF/OIF data in Z11, set count to 0 so existing data in VistA will be deleted.
"RTN","DGENUPL7",105,0)
 .I '$D(DGOEIF) S DGOEIF("COUNT")=0
"RTN","DGENUPL7",106,0)
 .;Call PIMS api to file OEF/OIF data.
"RTN","DGENUPL7",107,0)
 .I $D(DGOEIF) D OEIFUPD^DGCLAPI1(DFN,.DGOEIF)
"RTN","DGENUPL7",108,0)
 .;
"RTN","DGENUPL7",109,0)
 .;if the current enrollment is a local then log patient for transmission
"RTN","DGENUPL7",110,0)
 .I $$SOURCE^DGENA(DFN)=1!$G(DGPHINC) K DGENUPLD,DGPHINC D EVENT^IVMPLOG(DFN)
"RTN","DGENUPL7",111,0)
 .;
"RTN","DGENUPL7",112,0)
 .;create the audit trail
"RTN","DGENUPL7",113,0)
 .I $$AUDIT^DGENUPA1(,MSGID,.OLDPAT,.DGPAT,.OLDELG,.DGELG,.OLDCDIS,.DGCDIS,.DGSEC,.OLDSEC)
"RTN","DGENUPL7",114,0)
 .;send notifications
"RTN","DGENUPL7",115,0)
 .D NOTIFY^DGENUPL3(.DGPAT,.MSGS)
"RTN","DGENUPL7",116,0)
 .;
"RTN","DGENUPL7",117,0)
 .;invoke registration consistency checker
"RTN","DGENUPL7",118,0)
 .D REGCHECK^DGENUPL2(DFN)
"RTN","DGENUPL7",119,0)
 ;
"RTN","DGENUPL7",120,0)
 D UNLOCK^DGENUPL5(DFN)
"RTN","DGENUPL7",121,0)
 Q
"RTN","DGENUPL8")
0^104^B13177328
"RTN","DGENUPL8",1,0)
DGENUPL8 ;ISA/KWP,RTK,PHH,ERC - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 8/15/08 12:41pm
"RTN","DGENUPL8",2,0)
 ;;5.3;REGISTRATION;**232,266,327,314,365,417,514,688**;Aug 13,1993;Build 29
"RTN","DGENUPL8",3,0)
 ;Moved ENRUPLD from DGENUPL3
"RTN","DGENUPL8",4,0)
 ;
"RTN","DGENUPL8",5,0)
ENRUPLD(DGENR,DGPAT) ;
"RTN","DGENUPL8",6,0)
 ;Description: uploads an enrollment receieved from HEC. The consistency
"RTN","DGENUPL8",7,0)
 ;checks are assumed to have been done, the other patient and eligibility
"RTN","DGENUPL8",8,0)
 ;data filed already.
"RTN","DGENUPL8",9,0)
 ;
"RTN","DGENUPL8",10,0)
 ;Inputs:
"RTN","DGENUPL8",11,0)
 ;  DGENR - enrollment array (pass by reference)
"RTN","DGENUPL8",12,0)
 ;  DGPAT - patient array (pass by reference)
"RTN","DGENUPL8",13,0)
 ;
"RTN","DGENUPL8",14,0)
 ;Output: none
"RTN","DGENUPL8",15,0)
 ;
"RTN","DGENUPL8",16,0)
 ;Phase II if HEC sends enrollment statuses VERIFIED(2),UNVERIFIED(1),REJECTED-FISCAL YEAR(11),REJECTED-MID-CYCLE(12),REJECTED-STOP ENROLLING NEW APPLiCANTS(13),PENDING-NO ELIGIBILITY CODE IN VIVA(15)
"RTN","DGENUPL8",17,0)
 ; PENDING-ELIGIBILITY UNVERIFIED(17),PENDING MEANS TEST REQUIRED(16),PENDING-OTHER(18),NOT ELIGIBLE; REFUSED TO PAY COPAY(19)
"RTN","DGENUPL8",18,0)
 ; NOT ELIGIBLE; INELIGIBLE DATE(20),PENDING PURPLE HEART UNCONFIRMED(21),DECEASED(6),CANCELED/DECLINED(7),REJECTED-INITIAL APPLICATION BY VAMC(14),REJECTED BELOW EGT THRESHOLD(22) then store enrollment (SRS6.5.1.2 f)
"RTN","DGENUPL8",19,0)
 ;
"RTN","DGENUPL8",20,0)
 N CURIEN,CURENR
"RTN","DGENUPL8",21,0)
 ;
"RTN","DGENUPL8",22,0)
 ;source should not be VAMC, since it is not a local enrollment
"RTN","DGENUPL8",23,0)
 I DGENR("SOURCE")=1 S DGENR("SOURCE")=2
"RTN","DGENUPL8",24,0)
 ;
"RTN","DGENUPL8",25,0)
 ;is there a local enrollment?
"RTN","DGENUPL8",26,0)
 S CURIEN=$$FINDCUR^DGENA(DGENR("DFN"))
"RTN","DGENUPL8",27,0)
 ;
"RTN","DGENUPL8",28,0)
 ;if there is no current enrollment, store HEC enrollment and quit
"RTN","DGENUPL8",29,0)
 I 'CURIEN D  G EXIT
"RTN","DGENUPL8",30,0)
 .;Phase II (SRS 6.5.1.2 f)
"RTN","DGENUPL8",31,0)
 .I "^1^2^6^7^11^12^13^14^15^16^17^18^19^20^21^22^23^"[("^"_DGENR("STATUS")_"^") I $$STORECUR^DGENA1(.DGENR,1)
"RTN","DGENUPL8",32,0)
 I '$$GET^DGENA(CURIEN,.CURENR) D  G EXIT
"RTN","DGENUPL8",33,0)
 .;Phase II (SRS 6.5.1.2 f)
"RTN","DGENUPL8",34,0)
 .I "^1^2^6^7^11^12^13^14^15^16^17^18^19^20^21^22^23^"[("^"_DGENR("STATUS")_"^") I $$STORECUR^DGENA1(.DGENR,1)
"RTN","DGENUPL8",35,0)
 ;
"RTN","DGENUPL8",36,0)
 ;check for duplicate
"RTN","DGENUPL8",37,0)
 Q:$$DUP(.DGENR,.CURENR)
"RTN","DGENUPL8",38,0)
 ;
"RTN","DGENUPL8",39,0)
 ;if there is no local enrollment, HEC enrollment becomes current
"RTN","DGENUPL8",40,0)
 I CURENR("SOURCE")'=1 D  G EXIT
"RTN","DGENUPL8",41,0)
 .;Phase II (SRS 6.5.1.2 f)
"RTN","DGENUPL8",42,0)
 .I "^1^2^6^7^11^12^13^14^15^16^17^18^19^20^21^22^23^"[("^"_DGENR("STATUS")_"^") I $$STORECUR^DGENA1(.DGENR,1)
"RTN","DGENUPL8",43,0)
 ;********************************************************************
"RTN","DGENUPL8",44,0)
 ;check for exceptions to making HEC enrollment the patient's current enrollment,i.e.,cases in which local enrollment remains the current enrollment
"RTN","DGENUPL8",45,0)
 ;********************************************************************
"RTN","DGENUPL8",46,0)
 ;
"RTN","DGENUPL8",47,0)
 ;if local enrollment has status of Deceased, if the patient is dead and HEC's enrollment doesn't have status of Deceased reject upload
"RTN","DGENUPL8",48,0)
 I (CURENR("STATUS")=6),DGENR("STATUS")'=6,DGPAT("DEATH") D  G EXIT
"RTN","DGENUPL8",49,0)
 .D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),"LOCAL SITE REQUESTED TO VERIFY PATIENT DEATH",.ERRCOUNT)
"RTN","DGENUPL8",50,0)
 .D ADDMSG^DGENUPL3(.MSGS,"ELIBILITY UPLOAD DOESN'T CONTAINED DATE OF DEATH AND WAS REJECTED, PLEASE VERIFY PATIENT DEATH",1)
"RTN","DGENUPL8",51,0)
 .D NOTIFY^DGENUPL3(.DGPAT,.MSGS)
"RTN","DGENUPL8",52,0)
 .S ERROR=1
"RTN","DGENUPL8",53,0)
 ;
"RTN","DGENUPL8",54,0)
 ;Phase II if local enrollment has status UNVERIFIED(1),REJECTED-INITIAL APPLICATION BY VAMC(14),PENDING(9)
"RTN","DGENUPL8",55,0)
 ;and HEC sends status of REJECTED-FISCAL YEAR(11),REJECTED-MID-CYCLE(12),REJECTED-STOP ENROLLING APPLICATIONS(13),PENDING-NO ELIGIBILITY CODE in VIVA(15),REJECTED BELOW EGT THRESHOLD
"RTN","DGENUPL8",56,0)
 ;PENDING-ELIGIBILITY UNVERIFIED(17),PENDING-MEANS TEST REQUIRED(16),PENDING-OTHER(18)
"RTN","DGENUPL8",57,0)
 ;CANCELED/DECLINED(7) accept upload (SRS 6.5.1.2 h)
"RTN","DGENUPL8",58,0)
 I "^1^9^14^"[("^"_CURENR("STATUS")_"^"),"^7^11^12^13^15^16^17^18^19^20^21^22^23^"[("^"_DGENR("STATUS")_"^") D  G EXIT
"RTN","DGENUPL8",59,0)
 .I $$STORECUR^DGENA1(.DGENR,1)
"RTN","DGENUPL8",60,0)
 ;
"RTN","DGENUPL8",61,0)
 ;if local enrollment has status of Canceled/Declined, HEC enrollment has status of Verified or Unverified, HEC enrollment has an earlier or same effective date accept upload
"RTN","DGENUPL8",62,0)
 I (CURENR("STATUS")=7),"^1^2^"[("^"_DGENR("STATUS")_"^"),(CURENR("EFFDATE")'<DGENR("EFFDATE")) D  G EXIT
"RTN","DGENUPL8",63,0)
 .I $$STORECUR^DGENA1(.DGENR,1)
"RTN","DGENUPL8",64,0)
 ;
"RTN","DGENUPL8",65,0)
 ;If local enrollment has a status of Unverified(1) and the HEC enrollment
"RTN","DGENUPL8",66,0)
 ; status is Verified(2), Deceased(6), Cancelled/declined(7) or Pending; Means(16)
"RTN","DGENUPL8",67,0)
 ; Test Required accept upload
"RTN","DGENUPL8",68,0)
 I "^1^"[("^"_CURENR("STATUS")_"^"),"^2^6^7^16^19^20^21^"[("^"_DGENR("STATUS")_"^") D  G EXIT
"RTN","DGENUPL8",69,0)
 .I $$STORECUR^DGENA1(.DGENR,1)
"RTN","DGENUPL8",70,0)
 ;
"RTN","DGENUPL8",71,0)
 ;********************************************************
"RTN","DGENUPL8",72,0)
 ;end of exceptions
"RTN","DGENUPL8",73,0)
 ;********************************************************
"RTN","DGENUPL8",74,0)
 ;
"RTN","DGENUPL8",75,0)
 ;none of the exceptions apply, so make the HEC enrollment current
"RTN","DGENUPL8",76,0)
 ;Phase II (SRS 6.5.1.2 f)
"RTN","DGENUPL8",77,0)
 I "^1^2^6^7^11^12^13^14^15^16^17^18^19^20^21^22^"[("^"_DGENR("STATUS")_"^") I $$STORECUR^DGENA1(.DGENR,1)
"RTN","DGENUPL8",78,0)
EXIT Q
"RTN","DGENUPL8",79,0)
 ;
"RTN","DGENUPL8",80,0)
DUP(DGENR1,DGENR2) ;
"RTN","DGENUPL8",81,0)
 ;Descripition: returns 1 if the enrollments are dupliates (other than
"RTN","DGENUPL8",82,0)
 ;audit information), 0 otherwise
"RTN","DGENUPL8",83,0)
 ;
"RTN","DGENUPL8",84,0)
 ;Inputs:
"RTN","DGENUPL8",85,0)
 ;  DGENR1, DGENR2 are arrays containing enrollments (pass by reference)
"RTN","DGENUPL8",86,0)
 ;
"RTN","DGENUPL8",87,0)
 ;Outputs:
"RTN","DGENUPL8",88,0)
 ;  Function Value: 1 if identical, 0 otherwise
"RTN","DGENUPL8",89,0)
 ;
"RTN","DGENUPL8",90,0)
 N SUB,SAME
"RTN","DGENUPL8",91,0)
 S SAME=1
"RTN","DGENUPL8",92,0)
 S SUB=""
"RTN","DGENUPL8",93,0)
 F  S SUB=$O(DGENR1(SUB)) Q:SUB=""  D
"RTN","DGENUPL8",94,0)
 .Q:(SUB="ELIG")
"RTN","DGENUPL8",95,0)
 .Q:(SUB="DATETIME")
"RTN","DGENUPL8",96,0)
 .Q:(SUB="USER")
"RTN","DGENUPL8",97,0)
 .Q:(SUB="PRIORREC")
"RTN","DGENUPL8",98,0)
 .I DGENR1(SUB)'=DGENR2(SUB) S SAME=0
"RTN","DGENUPL8",99,0)
 I SAME D
"RTN","DGENUPL8",100,0)
 .S SUB=""
"RTN","DGENUPL8",101,0)
 .F  S SUB=$O(DGENR1("ELIG",SUB)) Q:SUB=""  I DGENR1("ELIG",SUB)'=DGENR2("ELIG",SUB) S SAME=0
"RTN","DGENUPL8",102,0)
 Q SAME
"RTN","DGENUPL8",103,0)
 ;
"RTN","DGENUPL8",104,0)
STOREHIS(DGENR,PRIORTO) ;
"RTN","DGENUPL8",105,0)
 ;Description: Stores the enrollment contained in the DGENR array
"RTN","DGENUPL8",106,0)
 ; before the enrollment pointed to by PRIORTO.
"RTN","DGENUPL8",107,0)
 ;
"RTN","DGENUPL8",108,0)
 ;Inputs:
"RTN","DGENUPL8",109,0)
 ;  DGENR - an array containing an enrollment to be stored
"RTN","DGENUPL8",110,0)
 ;  PRIORTO - ien of the enrollment where the new enrollment should be
"RTN","DGENUPL8",111,0)
 ;            stored.  DGENR will be stored as its prior enrollment.
"RTN","DGENUPL8",112,0)
 ;
"RTN","DGENUPL8",113,0)
 Q:'$G(PRIORTO)
"RTN","DGENUPL8",114,0)
 ;
"RTN","DGENUPL8",115,0)
 N DGENRIEN,OK
"RTN","DGENUPL8",116,0)
 S OK=1
"RTN","DGENUPL8",117,0)
 ;
"RTN","DGENUPL8",118,0)
 ;the new record should point to the record prior to PRIORTO
"RTN","DGENUPL8",119,0)
 S DGENR("PRIORREC")=$$FINDPRI^DGENA(PRIORTO)
"RTN","DGENUPL8",120,0)
 ;
"RTN","DGENUPL8",121,0)
 ;store the record
"RTN","DGENUPL8",122,0)
 S DGENRIEN=$$STORE^DGENA1(.DGENR,1)
"RTN","DGENUPL8",123,0)
 I 'DGENRIEN S OK=0
"RTN","DGENUPL8",124,0)
 ;
"RTN","DGENUPL8",125,0)
 ;now point the record=PRIORTO to the new record
"RTN","DGENUPL8",126,0)
 D:OK
"RTN","DGENUPL8",127,0)
 .N DATA
"RTN","DGENUPL8",128,0)
 .S DATA(.09)=DGENRIEN
"RTN","DGENUPL8",129,0)
 .I $$UPD^DGENDBS(27.11,PRIORTO,.DATA) ;then success
"RTN","DGENUPL8",130,0)
 Q
"RTN","DGENUPL9")
0^114^B7773065
"RTN","DGENUPL9",1,0)
DGENUPL9 ;ISA/KWP,JAN,BRM,PJR,LBD,TDM - CD CONSISTENCY CHECKS ; 8/18/08 9:23am
"RTN","DGENUPL9",2,0)
 ;;5.3;REGISTRATION;**232,378,451,564,628,688**;Aug 13,1993;Build 29
"RTN","DGENUPL9",3,0)
 ;
"RTN","DGENUPL9",4,0)
CDCHECK() ;
"RTN","DGENUPL9",5,0)
 ;Description: Does the consistency checks on the CATASTROPHIC DISABILITY objects.
"RTN","DGENUPL9",6,0)
 ;Input:
"RTN","DGENUPL9",7,0)
 ;  MSGS -Error messages
"RTN","DGENUPL9",8,0)
 ;  DGPAT -Patient array
"RTN","DGENUPL9",9,0)
 ;  MSGID -HL7 Message ID
"RTN","DGENUPL9",10,0)
 ;  OLDCDIS -CD array with data from file
"RTN","DGENUPL9",11,0)
 ;  DGCDIS -CD Array
"RTN","DGENUPL9",12,0)
 ;  ERRCOUNT -number of errors
"RTN","DGENUPL9",13,0)
 ;Output:
"RTN","DGENUPL9",14,0)
 ;  1 if consistency checks passed, 0 otherwise
"RTN","DGENUPL9",15,0)
 ;
"RTN","DGENUPL9",16,0)
 ; VistA Changes (DG*5.3*451) added CCs listed below in place of the
"RTN","DGENUPL9",17,0)
 ; previous Consistency Checks based on new business rules.
"RTN","DGENUPL9",18,0)
 ;
"RTN","DGENUPL9",19,0)
 N CDERR
"RTN","DGENUPL9",20,0)
 ; Reject CD update if required fields are missing
"RTN","DGENUPL9",21,0)
 I DGCDIS("VCD")="Y",'$$CHECK^DGENCDA1(.DGCDIS,.CDERR) D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),"CD Error: "_CDERR,.ERRCOUNT) Q 0
"RTN","DGENUPL9",22,0)
 ;
"RTN","DGENUPL9",23,0)
 ; If CD is Yes on VISTA and update is Yes and the current Date of
"RTN","DGENUPL9",24,0)
 ; Decision is more recent than the incoming one, reject update.
"RTN","DGENUPL9",25,0)
 I OLDCDIS("VCD")="Y",DGCDIS("VCD")="Y",DGCDIS("DATE")<OLDCDIS("DATE") D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),"CD Error: Date of Decision is more recent at site",.ERRCOUNT) Q 0
"RTN","DGENUPL9",26,0)
 ;
"RTN","DGENUPL9",27,0)
 ; CD evaluation of 'NO' shall not overwrite a CD evaluation of
"RTN","DGENUPL9",28,0)
 ; 'YES' unless it is from the originating site.
"RTN","DGENUPL9",29,0)
 I OLDCDIS("VCD")="Y",DGCDIS("VCD")="N",OLDCDIS("FACDET")'=DGCDIS("FACDET") Q 0  ;no error message when this occurs per bus. rules
"RTN","DGENUPL9",30,0)
 ;
"RTN","DGENUPL9",31,0)
 Q 1
"RTN","DGENUPL9",32,0)
AO ;Agent Orange Exp. Location - overflow code from MERGE^DGENUPL4
"RTN","DGENUPL9",33,0)
 I DGELG("AO")'="" D
"RTN","DGENUPL9",34,0)
 . I DGELG("AO")="Y",$G(DGELG("AOEXPLOC"))'="" Q   ;Added DG*5.3*688
"RTN","DGENUPL9",35,0)
 . I DGELG("AO")="Y",OLDELG("AOEXPLOC")="" D
"RTN","DGENUPL9",36,0)
 . . S DGELG3("AOEXPLOC")="V" D BULLETIN
"RTN","DGENUPL9",37,0)
 . I DGELG("AO")="N",OLDELG("AOEXPLOC")'="" D
"RTN","DGENUPL9",38,0)
 . . S DGELG3("AOEXPLOC")="@" D BULLETIN
"RTN","DGENUPL9",39,0)
 Q
"RTN","DGENUPL9",40,0)
BULLETIN ;Agent Orange Exposure Location Change
"RTN","DGENUPL9",41,0)
 ;  >> this function has been removed based on a customer request
"RTN","DGENUPL9",42,0)
 ;  >> the code is being left for reactivation if desired w/ ESR
"RTN","DGENUPL9",43,0)
 Q
"RTN","DGENUPL9",44,0)
 N DGBULL,DGLINE,DGMGRP,DGNAME,DIFROM,VA,VAERR,XMTEXT,XMSUB,XMDUZ
"RTN","DGENUPL9",45,0)
 S DGMGRP=$O(^XMB(3.8,"B","DGEN ELIGIBILITY ALERT",""))
"RTN","DGENUPL9",46,0)
 Q:'DGMGRP
"RTN","DGENUPL9",47,0)
 D XMY^DGMTUTL(DGMGRP,0,1)
"RTN","DGENUPL9",48,0)
 S DGNAME=$P($G(^DPT(DFN,0)),"^"),DGSSN=$P($G(^DPT(DFN,0)),"^",9)
"RTN","DGENUPL9",49,0)
 S XMTEXT="DGBULL("
"RTN","DGENUPL9",50,0)
 S XMSUB="AGENT ORANGE EXPOSURE LOCATION CHANGE"
"RTN","DGENUPL9",51,0)
 S DGLINE=0
"RTN","DGENUPL9",52,0)
 D LINE^DGEN("Patient: "_DGNAME,.DGLINE)
"RTN","DGENUPL9",53,0)
 D LINE^DGEN("SSN: "_DGSSN,.DGLINE)
"RTN","DGENUPL9",54,0)
 D LINE^DGEN("",.DGLINE)
"RTN","DGENUPL9",55,0)
 D LINE^DGEN("This veteran's Agent Orange Exposure Location has been changed.",.DGLINE)
"RTN","DGENUPL9",56,0)
 D LINE^DGEN("Contact the HEC by phone if you have questions or believe",.DGLINE)
"RTN","DGENUPL9",57,0)
 D LINE^DGEN("this information to be incorrect.",.DGLINE)
"RTN","DGENUPL9",58,0)
 D ^XMD
"RTN","DGENUPL9",59,0)
 Q
"RTN","DGENUPLA")
0^40^B62008132
"RTN","DGENUPLA",1,0)
DGENUPLA ;ALB/CKN,TDM,PJR,RGL,EG,TMK,CKN,TDM - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 6/8/07 10:35am
"RTN","DGENUPLA",2,0)
 ;;5.3;REGISTRATION;**397,379,497,451,564,672,659,583,653,688**;Aug 13,1993;Build 29
"RTN","DGENUPLA",3,0)
 ;
"RTN","DGENUPLA",4,0)
 ;***************************************************************
"RTN","DGENUPLA",5,0)
 ; This routine was created because DGENUPL2 had reached it's
"RTN","DGENUPLA",6,0)
 ; maximum size, therefore no new code could not be added.  All
"RTN","DGENUPLA",7,0)
 ; code that existed in the ZEL and OBX tags of DGENUPL2 has
"RTN","DGENUPLA",8,0)
 ; been moved to the ZEL,ZPD and OBX tags of DGENUPLA.  A line of code
"RTN","DGENUPLA",9,0)
 ; was placed in ZEL^DGENUPL2 to call ZEL^DGENUPLA.  A line of
"RTN","DGENUPLA",10,0)
 ; code was placed in OBX^DGENUPL2 to call OBX^DGENUPLA.
"RTN","DGENUPLA",11,0)
 ; Any routine that calls ZEL,ZPD or OBX^DGENUPL2 will not
"RTN","DGENUPLA",12,0)
 ; be affected by this change.
"RTN","DGENUPLA",13,0)
 ;***************************************************************
"RTN","DGENUPLA",14,0)
 ;
"RTN","DGENUPLA",15,0)
 ;***************************************************************
"RTN","DGENUPLA",16,0)
 ;The following procedures parse particular segment types.
"RTN","DGENUPLA",17,0)
 ;Input:SEG(),MSGID
"RTN","DGENUPLA",18,0)
 ;Output:DGPAT(),DGELG(),DGENR(),DGNTR(),DGMST(),ERROR
"RTN","DGENUPLA",19,0)
 ;***************************************************************
"RTN","DGENUPLA",20,0)
 ;
"RTN","DGENUPLA",21,0)
 ;
"RTN","DGENUPLA",22,0)
ZEL(COUNT) ;
"RTN","DGENUPLA",23,0)
 N CODE,SEQ
"RTN","DGENUPLA",24,0)
 S CODE=$$CONVERT^DGENUPL1(SEG(2),"ELIGIBILITY",.ERROR)
"RTN","DGENUPLA",25,0)
 I ERROR D  Q
"RTN","DGENUPLA",26,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"ELIGIBILITY CODE "_SEG(2)_" NOT FOUND IN ELIGIBILTIY CODE FILE",.ERRCOUNT)
"RTN","DGENUPLA",27,0)
 I COUNT=1 D
"RTN","DGENUPLA",28,0)
 .S DGELG("ELIG","CODE")=CODE
"RTN","DGENUPLA",29,0)
 .S DGELG("DISRET")=$$CONVERT^DGENUPL1(SEG(5),"1/0",.ERROR)
"RTN","DGENUPLA",30,0)
 .I ERROR D  Q
"RTN","DGENUPLA",31,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 5",.ERRCOUNT)
"RTN","DGENUPLA",32,0)
 .S DGELG("CLAIMNUM")=$$CONVERT^DGENUPL1(SEG(6))
"RTN","DGENUPLA",33,0)
 .S DGELG("CLAIMLOC")=$$SITECNV(SEG(7))
"RTN","DGENUPLA",34,0)
 .;
"RTN","DGENUPLA",35,0)
 .S DGPAT("VETERAN")=$$CONVERT^DGENUPL1(SEG(8),"Y/N",.ERROR)
"RTN","DGENUPLA",36,0)
 .I ERROR D  Q
"RTN","DGENUPLA",37,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 8",.ERRCOUNT)
"RTN","DGENUPLA",38,0)
 .S DGELG("ELIGSTA")=$$CONVERT^DGENUPL1(SEG(10))
"RTN","DGENUPLA",39,0)
 .S DGELG("ELIGSTADATE")=$$CONVERT^DGENUPL1(SEG(11),"DATE",.ERROR)
"RTN","DGENUPLA",40,0)
 .I ERROR D  Q
"RTN","DGENUPLA",41,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 11",.ERRCOUNT)
"RTN","DGENUPLA",42,0)
 .S DGELG("ELIGVERIF")=$$CONVERT^DGENUPL1(SEG(13))
"RTN","DGENUPLA",43,0)
 .S DGELG("A&A")=$$CONVERT^DGENUPL1(SEG(14),"Y/N",.ERROR)
"RTN","DGENUPLA",44,0)
 .I ERROR D  Q
"RTN","DGENUPLA",45,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 14",.ERRCOUNT)
"RTN","DGENUPLA",46,0)
 .S DGELG("HB")=$$CONVERT^DGENUPL1(SEG(15),"Y/N",.ERROR)
"RTN","DGENUPLA",47,0)
 .I ERROR D  Q
"RTN","DGENUPLA",48,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 15",.ERRCOUNT)
"RTN","DGENUPLA",49,0)
 .S DGELG("VAPEN")=$$CONVERT^DGENUPL1(SEG(16),"Y/N",.ERROR)
"RTN","DGENUPLA",50,0)
 .I ERROR D  Q
"RTN","DGENUPLA",51,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 16",.ERRCOUNT)
"RTN","DGENUPLA",52,0)
 .S DGELG("VADISAB")=$$CONVERT^DGENUPL1(SEG(17),"Y/N",.ERROR)
"RTN","DGENUPLA",53,0)
 .I ERROR D  Q
"RTN","DGENUPLA",54,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 17",.ERRCOUNT)
"RTN","DGENUPLA",55,0)
 .S DGELG("AO")=$$CONVERT^DGENUPL1(SEG(18),"Y/N",.ERROR)
"RTN","DGENUPLA",56,0)
 .N AOERR S AOERR=ERROR            ;  See SEG(29) below.
"RTN","DGENUPLA",57,0)
 .I ERROR D  Q
"RTN","DGENUPLA",58,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 18",.ERRCOUNT)
"RTN","DGENUPLA",59,0)
 .S (DGPAT("IR"),DGELG("IR"))=$$CONVERT^DGENUPL1(SEG(19),"Y/N",.ERROR)
"RTN","DGENUPLA",60,0)
 .I ERROR D  Q
"RTN","DGENUPLA",61,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 19",.ERRCOUNT)
"RTN","DGENUPLA",62,0)
 .S DGELG("EC")=$$CONVERT^DGENUPL1(SEG(20),"Y/N",.ERROR)
"RTN","DGENUPLA",63,0)
 .I ERROR D  Q
"RTN","DGENUPLA",64,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 20",.ERRCOUNT)
"RTN","DGENUPLA",65,0)
 .S (DGPAT("RADEXPM"),DGELG("RADEXPM"))=$$CONVERT^DGENUPL1($G(SEG(22)))
"RTN","DGENUPLA",66,0)
 .S ERROR=$S(DGELG("RADEXPM")="":0,",2,3,4,5,6,7,"[(","_DGELG("RADEXPM")_","):0,DGELG("RADEXPM")="@":0,1:1)
"RTN","DGENUPLA",67,0)
 .I ERROR D  Q
"RTN","DGENUPLA",68,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 22",.ERRCOUNT)
"RTN","DGENUPLA",69,0)
 .;
"RTN","DGENUPLA",70,0)
 .S DGELG("VACKAMT")=$$CONVERT^DGENUPL1(SEG(21))
"RTN","DGENUPLA",71,0)
 .;
"RTN","DGENUPLA",72,0)
 .;Parse MST data into DGMST array from sequences 23, 24, 25 of ZEL segment
"RTN","DGENUPLA",73,0)
 . F SEQ=23,24,25 S:SEG(SEQ)=HLQ SEG(SEQ)=""
"RTN","DGENUPLA",74,0)
 . S DGMST("MSTSTAT")=$$CONVERT^DGENUPL1(SEG(23))
"RTN","DGENUPLA",75,0)
 . S DGMST("MSTDT")=$$CONVERT^DGENUPL1(SEG(24),"TS",.ERROR)
"RTN","DGENUPLA",76,0)
 . I ERROR D  Q
"RTN","DGENUPLA",77,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 24",.ERRCOUNT)
"RTN","DGENUPLA",78,0)
 . S DGMST("MSTST")=$$CONVERT^DGENUPL1(SEG(25),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",79,0)
 . I ERROR D  Q
"RTN","DGENUPLA",80,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 25",.ERRCOUNT)
"RTN","DGENUPLA",81,0)
 .;
"RTN","DGENUPLA",82,0)
 . S DGELG("AOEXPLOC")=$$CONVERT^DGENUPL1(SEG(29))
"RTN","DGENUPLA",83,0)
 .; Logic enhanced during SQA of patch 451.  AOERR from SEG(18) above.
"RTN","DGENUPLA",84,0)
 . I 'AOERR,DGELG("AO")'="Y",DGELG("AOEXPLOC")="" S DGELG("AOEXPLOC")="@"
"RTN","DGENUPLA",85,0)
 . S DGELG("UEYEAR")=$$CONVERT^DGENUPL1(SEG(34),"DATE",.ERROR)
"RTN","DGENUPLA",86,0)
 . I ERROR D  Q
"RTN","DGENUPLA",87,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 34",.ERRCOUNT)
"RTN","DGENUPLA",88,0)
 . S DGELG("UESITE")=$$CONVERT^DGENUPL1(SEG(35),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",89,0)
 . I ERROR D  Q
"RTN","DGENUPLA",90,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 35",.ERRCOUNT)
"RTN","DGENUPLA",91,0)
 . S DGELG("CVELEDT")=$$CONVERT^DGENUPL1(SEG(38),"DATE",.ERROR)
"RTN","DGENUPLA",92,0)
 . I ERROR D  Q
"RTN","DGENUPLA",93,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 38",.ERRCOUNT)
"RTN","DGENUPLA",94,0)
 . I $G(DGELG("DISLOD"))="" S DGELG("DISLOD")=$$CONVERT^DGENUPL1(SEG(39),"1/0",.ERROR) ;Discharge due to Disability - DG*5.3*653
"RTN","DGENUPLA",95,0)
 . I ERROR D  Q
"RTN","DGENUPLA",96,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 39",.ERRCOUNT)
"RTN","DGENUPLA",97,0)
 . S DGELG("SHAD")=$$CONVERT^DGENUPL1(SEG(40),"1/0",.ERROR) ;Proj 112/SHAD - DG*5.3*653
"RTN","DGENUPLA",98,0)
 . I ERROR D  Q
"RTN","DGENUPLA",99,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 40 - SHAD Indicator",.ERRCOUNT)
"RTN","DGENUPLA",100,0)
 ;
"RTN","DGENUPLA",101,0)
 I COUNT>1 D
"RTN","DGENUPLA",102,0)
 .S DGELG("ELIG","CODE",CODE)=""
"RTN","DGENUPLA",103,0)
 Q
"RTN","DGENUPLA",104,0)
 ;
"RTN","DGENUPLA",105,0)
OBX ;
"RTN","DGENUPLA",106,0)
 N OBXPCE,OBXVAL,OBXTBL,I,CS,SS,RS
"RTN","DGENUPLA",107,0)
 I $G(HLECH)'="~|\&" N HLECH S HLECH="~|\&"
"RTN","DGENUPLA",108,0)
 I $G(HLFS)="" N HLFS S HLFS="^"
"RTN","DGENUPLA",109,0)
 S CS=$E(HLECH,1),SS=$E(HLECH,4),RS=$E(HLECH,2)
"RTN","DGENUPLA",110,0)
 I $G(SEG(3))=("38.1"_$E(HLECH)_"SECURITY LOG") D
"RTN","DGENUPLA",111,0)
 . N LEVEL
"RTN","DGENUPLA",112,0)
 . S LEVEL=$P(SEG(5),$E(HLECH))
"RTN","DGENUPLA",113,0)
 . S DGSEC("LEVEL")=$$CONVERT^DGENUPL1(LEVEL,"1/0",.ERROR)
"RTN","DGENUPLA",114,0)
 . I ERROR D  Q
"RTN","DGENUPLA",115,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, OBX SEGMENT, SEQ 5",.ERRCOUNT)
"RTN","DGENUPLA",116,0)
 . S DGSEC("DATETIME")=$$CONVERT^DGENUPL1(SEG(14),"TS",.ERROR)
"RTN","DGENUPLA",117,0)
 . I ERROR D  Q
"RTN","DGENUPLA",118,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, OBX SEGMENT, SEQ 14, Patient Sensitivity Date/Time",.ERRCOUNT) ;DG*5.3*653
"RTN","DGENUPLA",119,0)
 . S DGSEC("SOURCE")=$$CONVERT^DGENUPL1(SEG(16))
"RTN","DGENUPLA",120,0)
 ;
"RTN","DGENUPLA",121,0)
 I $G(SEG(3))=("VISTA"_CS_"28.11") D
"RTN","DGENUPLA",122,0)
 . S OBXTBL(1)="NTR^Y",OBXTBL(2)="AVI^Y",OBXTBL(3)="SUB^Y"
"RTN","DGENUPLA",123,0)
 . S OBXTBL(4)="HNC^Y",OBXTBL(5)="NTR^N",OBXTBL(6)="AVI^N"
"RTN","DGENUPLA",124,0)
 . S OBXTBL(7)="SUB^N",OBXTBL(8)="HNC^N",OBXTBL(9)="NTR^U"
"RTN","DGENUPLA",125,0)
 . F I=1:1:$L($G(SEG(5)),RS) D
"RTN","DGENUPLA",126,0)
 . . S OBXPCE=$P($G(SEG(5)),RS,I),OBXVAL=$P($G(OBXPCE),CS)
"RTN","DGENUPLA",127,0)
 . . S DGNTR($P($G(OBXTBL(OBXVAL)),"^"))=$P($G(OBXTBL(OBXVAL)),"^",2)
"RTN","DGENUPLA",128,0)
 . I $G(SEG(12))'="" S DGNTR("HDT")=$$CONVERT^DGENUPL1(SEG(12),"TS",.ERROR)
"RTN","DGENUPLA",129,0)
 . S DGNTR("VDT")=$$CONVERT^DGENUPL1(SEG(14),"TS",.ERROR)
"RTN","DGENUPLA",130,0)
 . S DGNTR("VSIT")=$$CONVERT^DGENUPL1(SEG(15),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",131,0)
 . S DGNTR("HSIT")=$P($P($G(SEG(16)),CS,14),SS,2)
"RTN","DGENUPLA",132,0)
 . I DGNTR("HSIT")'="" S DGNTR("HSIT")=$$CONVERT^DGENUPL1($G(DGNTR("HSIT")),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",133,0)
 . S DGNTR("VER")=$$CONVERT^DGENUPL1($P($G(SEG(17)),CS))
"RTN","DGENUPLA",134,0)
 Q
"RTN","DGENUPLA",135,0)
 ;
"RTN","DGENUPLA",136,0)
ZIO ;New segment - DG*5.3*653
"RTN","DGENUPLA",137,0)
 S DGPAT("APPREQ")=$$CONVERT^DGENUPL1(SEG(5),"1/0",.ERROR)
"RTN","DGENUPLA",138,0)
 I ERROR D  Q
"RTN","DGENUPLA",139,0)
 . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZIO SEGMENT, SEQ 5, APPOINTMENT REQUEST ON 1010EZ",.ERRCOUNT)
"RTN","DGENUPLA",140,0)
 S DGPAT("APPREQDT")=$$CONVERT^DGENUPL1(SEG(6),"DATE",.ERROR)
"RTN","DGENUPLA",141,0)
 I ERROR D  Q
"RTN","DGENUPLA",142,0)
 . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZIO SEGMENT, SEQ 6, APPOINTMENT REQUEST DATE",.ERRCOUNT)
"RTN","DGENUPLA",143,0)
 Q
"RTN","DGENUPLA",144,0)
 ;
"RTN","DGENUPLA",145,0)
ZPD ;
"RTN","DGENUPLA",146,0)
 S DGELG("RATEINC")=$$CONVERT^DGENUPL1(SEG(8))
"RTN","DGENUPLA",147,0)
 S DGPAT("DEATH")=$$CONVERT^DGENUPL1(SEG(9),"TS",.ERROR)
"RTN","DGENUPLA",148,0)
 I ERROR D  Q
"RTN","DGENUPLA",149,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZPD SEGMENT, SEQ 9",.ERRCOUNT)
"RTN","DGENUPLA",150,0)
 S DGELG("MEDICAID")=$$CONVERT^DGENUPL1(SEG(12))
"RTN","DGENUPLA",151,0)
 S DGELG("MEDASKDT")=$$CONVERT^DGENUPL1(SEG(13),"TS",.ERROR)
"RTN","DGENUPLA",152,0)
 I ERROR D  Q
"RTN","DGENUPLA",153,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZPD SEGMENT, SEQ 13",.ERRCOUNT)
"RTN","DGENUPLA",154,0)
 S DGELG("POW")=$$CONVERT^DGENUPL1(SEG(17))
"RTN","DGENUPLA",155,0)
 ;DG*5.3*688
"RTN","DGENUPLA",156,0)
 S DGPAT("AG/ALLY")=$$CONVERT^DGENUPL1(SEG(35),"AGENCY",.ERROR)
"RTN","DGENUPLA",157,0)
 I ERROR D
"RTN","DGENUPLA",158,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZPD SEGMENT, SEQ 35",.ERRCOUNT)
"RTN","DGENUPLA",159,0)
 S DGPAT("EMGRES")=$$CONVERT^DGENUPL1(SEG(40)) ;DG*5.3*677
"RTN","DGENUPLA",160,0)
 Q
"RTN","DGENUPLA",161,0)
 ;
"RTN","DGENUPLA",162,0)
SITECNV(STRING) ; Convert claim folder loc (site # or site # and name) to
"RTN","DGENUPLA",163,0)
 ; ptr to file 4
"RTN","DGENUPLA",164,0)
 N SITE
"RTN","DGENUPLA",165,0)
 S SITE=""
"RTN","DGENUPLA",166,0)
 I STRING'="" D
"RTN","DGENUPLA",167,0)
 . N SUB,START,END
"RTN","DGENUPLA",168,0)
 . ; Find site ien if only site # is returned
"RTN","DGENUPLA",169,0)
 . I $O(^DIC(4,"D",STRING,0)) S SITE=$O(^DIC(4,"D",STRING,0)) Q
"RTN","DGENUPLA",170,0)
 . ; Check if name is concatenated onto site # to find site ien
"RTN","DGENUPLA",171,0)
 . S SUB=""
"RTN","DGENUPLA",172,0)
 . F  S SUB=$O(^DIC(4,"D",SUB)) Q:SUB=""  I $E(SUB,1,3)=$E(STRING,1,3),$$CHK(SUB,STRING) S SITE=$O(^DIC(4,"D",SUB,0)) Q
"RTN","DGENUPLA",173,0)
 ; SITE is the pointer to file 4 or null for site not found
"RTN","DGENUPLA",174,0)
 Q SITE
"RTN","DGENUPLA",175,0)
 ;
"RTN","DGENUPLA",176,0)
CHK(SUB,STRING) ;
"RTN","DGENUPLA",177,0)
 N IEN,X,STN,RET
"RTN","DGENUPLA",178,0)
 I SUB=STRING Q 1
"RTN","DGENUPLA",179,0)
 S RET=0
"RTN","DGENUPLA",180,0)
 S IEN=+$O(^DIC(4,"D",SUB,""))
"RTN","DGENUPLA",181,0)
 I IEN D
"RTN","DGENUPLA",182,0)
 . S X=$P($G(^DIC(4,IEN,0)),U),STN=$P($G(^(99)),U)
"RTN","DGENUPLA",183,0)
 . ; assume institution file names will be the same on HEC and VistA
"RTN","DGENUPLA",184,0)
 . I STN=SUB,X'="",$E($P(STRING,SUB,2,999),1,40)=X S RET=1
"RTN","DGENUPLA",185,0)
 Q RET
"RTN","DGENUPLA",186,0)
 ;
"RTN","DGLOCK")
0^57^B32786252
"RTN","DGLOCK",1,0)
DGLOCK ;ALB/MRL,ERC,BAJ,LBD - PATIENT FILE DATA EDIT CHECKS ; 1/4/07 2:40pm
"RTN","DGLOCK",2,0)
 ;;5.3;Registration;**108,161,247,485,672,673,688**;Aug 13, 1993;Build 29
"RTN","DGLOCK",3,0)
FFP ; DGFFP Access key required
"RTN","DGLOCK",4,0)
 I '$D(^XUSEC("DGFFP ACCESS",DUZ)) D EN^DDIOL("Fugitive Felon Key required to edit this field.","","!!?4") K X
"RTN","DGLOCK",5,0)
 Q
"RTN","DGLOCK",6,0)
EK ;EKey Rqrd
"RTN","DGLOCK",7,0)
 I '$D(^XUSEC("DG ELIGIBILITY",DUZ)) W !?4,$C(7),"Eligibility Key required to edit this field." K X
"RTN","DGLOCK",8,0)
 Q
"RTN","DGLOCK",9,0)
EV ;EK rqrd if Elig Ver
"RTN","DGLOCK",10,0)
 I '$D(^XUSEC("DG ELIGIBILITY",DUZ)),$D(^DPT(DFN,.361)) I $P(^(.361),U,1)="V" D EN^DDIOL("Eligibility verified...Eligibility Key required to edit this field.","","!?4") K X
"RTN","DGLOCK",11,0)
 Q
"RTN","DGLOCK",12,0)
EV2 ;if elig is ver Discharged Due to Disability can't be edited - DG 672
"RTN","DGLOCK",13,0)
 ;if elig is ver P&T and P&T Eff Date can't be edited - DG*5.3*688
"RTN","DGLOCK",14,0)
 I $D(^DPT(DFN,.361)) I $P(^(.361),U,1)="V" D
"RTN","DGLOCK",15,0)
 . I $P(^DPT(DFN,.361),U,3)'="H" Q
"RTN","DGLOCK",16,0)
 . D EN^DDIOL("Eligibility verified at the HEC...NO EDITING!","","!?4") K X
"RTN","DGLOCK",17,0)
 Q
"RTN","DGLOCK",18,0)
SV ;EK Rqrd if Svc Rcrd Ver
"RTN","DGLOCK",19,0)
 I "NU"'[$E(X) D VET Q:'$D(X)
"RTN","DGLOCK",20,0)
SV1 I '$D(^XUSEC("DG ELIGIBILITY",DUZ)),$D(^DPT(DFN,.32)) I $P(^(.32),U,2)]"" D EN^DDIOL("Service Record verfied...Eligibility Key required to edit this field.","","!?4") K X
"RTN","DGLOCK",21,0)
 Q
"RTN","DGLOCK",22,0)
MV ;EK Rqrd if Money Ver
"RTN","DGLOCK",23,0)
 I "NU"'[$E(X) D VET Q:'$D(X)
"RTN","DGLOCK",24,0)
 I '$D(^XUSEC("DG ELIGIBILITY",DUZ)),$D(^DPT(DFN,.3)) I $P(^(.3),U,6)]"" W !?4,$C(7),"Monetary Benefits verified...Eligibility Key required to edit this field." K X
"RTN","DGLOCK",25,0)
 Q
"RTN","DGLOCK",26,0)
VET ;Veteran
"RTN","DGLOCK",27,0)
 S DGVV=$S($D(^DPT(DFN,"TYPE")):^("TYPE"),1:""),DGVV=$S($D(^DG(391,+DGVV,0)):$P(^(0),"^",2),1:"")
"RTN","DGLOCK",28,0)
 I $D(^DPT(DFN,"VET")),^("VET")'="Y",'DGVV D EN^DDIOL("Applicant is NOT a veteran!!","","!?4") K X
"RTN","DGLOCK",29,0)
 K DGVV Q
"RTN","DGLOCK",30,0)
VAGE ;Vet Age
"RTN","DGLOCK",31,0)
 S DGDATA=X,X1=DT,X2=$S($D(DFN):$P(^DPT(DFN,0),U,3),1:DPTIDS(.03)) S X=$E(X1,1,3)-$E(X2,1,3)-($E(X1,4,7)<$E(X2,4,7))
"RTN","DGLOCK",32,0)
 I X<17 W !?4,$C(7),"Applicant is TOO YOUNG to be a veteran...ONLY ",X," YEARS OLD!!",!?4,"See your supervisor if you require assistance." K X,X1,X2,DGDATA Q
"RTN","DGLOCK",33,0)
 S X=DGDATA K X1,X2,DGDATA Q
"RTN","DGLOCK",34,0)
AO ;Agent Orange
"RTN","DGLOCK",35,0)
 D SV I $D(X),$S('$D(^DPT(DFN,.321)):1,$P(^(.321),U,2)'="Y":1,1:0) W !?4,$C(7),"Exposure to Agent Orange not indicated...NO EDITING!" K X
"RTN","DGLOCK",36,0)
 Q
"RTN","DGLOCK",37,0)
EC ;SW Asia Contaminants - name change from Env. Contam. DG*5.3*688
"RTN","DGLOCK",38,0)
 D SV I $D(X),$S('$D(^DPT(DFN,.322)):1,$P(^(.322),U,13)'="Y":1,1:0) W !?4,$C(7),"Southwest Asia Conditions not indicated...NO EDITING!" K X
"RTN","DGLOCK",39,0)
 I $D(X) I X<2900802 K X W !?4,$C(7),"Date must be on or after 8/2/1990!"
"RTN","DGLOCK",40,0)
 Q
"RTN","DGLOCK",41,0)
COM ;Combat
"RTN","DGLOCK",42,0)
 D SV I $D(X),$S('$D(^DPT(DFN,.52)):1,$P(^(.52),U,11)'="Y":1,1:0) W !?4,$C(7),"Service in Combat Zone not indicated...NO EDITING!" K X
"RTN","DGLOCK",43,0)
 Q
"RTN","DGLOCK",44,0)
INE ;Ineligible
"RTN","DGLOCK",45,0)
 D EK I $D(X),$S('$D(^DPT(DFN,.15)):1,$P(^(.15),U,2)']"":1,1:0) W !?4,$C(7),"Requirement for 'Ineligible patient' data not indicated...NO EDITING!" K X
"RTN","DGLOCK",46,0)
 Q
"RTN","DGLOCK",47,0)
IR ;ION Rad
"RTN","DGLOCK",48,0)
 D SV I $D(X),$S('$D(^DPT(DFN,.321)):1,$P(^(.321),U,3)'="Y":1,1:0) W !?4,$C(7),"Exposure to Ionizing Radiation is not indicated...NO EDITING!" K X
"RTN","DGLOCK",49,0)
 Q
"RTN","DGLOCK",50,0)
POW ;Prisoner of War
"RTN","DGLOCK",51,0)
 D SV I $D(X),$S('$D(^DPT(DFN,.52)):1,$P(^(.52),U,5)'="Y":1,1:0) W !?5,$C(7),"Not identified as a former Prisoner of War...NO EDITING!" K X
"RTN","DGLOCK",52,0)
 Q
"RTN","DGLOCK",53,0)
SER1 ;NTL Svc
"RTN","DGLOCK",54,0)
 D SV I $D(X),$S('$D(^DPT(DFN,.32)):1,$P(^(.32),U,19)'="Y":1,X="N":0,1:0) W !?4,$C(7),"Other Periods of Service are not indicated...NO EDITING!" K X
"RTN","DGLOCK",55,0)
 Q
"RTN","DGLOCK",56,0)
SER2 ;NNTL
"RTN","DGLOCK",57,0)
 D SV I $D(X),$S('$D(^DPT(DFN,.32)):1,$P(^(.32),U,20)'="Y":1,X="N":0,1:0) W !?4,$C(7),"Third Period of Service is not indicated...NO EDITING!" K X
"RTN","DGLOCK",58,0)
 Q
"RTN","DGLOCK",59,0)
TAD ;Temp Add Edit
"RTN","DGLOCK",60,0)
 I $S('$D(^DPT(DFN,.121)):1,$P(^(.121),U,9)'="Y":1,1:0) W !?4,$C(7),"Requirement for Temporary Address data not indicated...NO EDITING!" K X
"RTN","DGLOCK",61,0)
 Q
"RTN","DGLOCK",62,0)
TADD ;Temp Address Delete?
"RTN","DGLOCK",63,0)
 Q:'$D(^DPT(DFN,.121))  I $P(^(.121),"^",9)="N"!($P(^(.121),"^",1,6)="^^^^^") Q
"RTN","DGLOCK",64,0)
ASK W !,"Do you want to delete all temporary address data" S %=2 D YN^DICN I %Y["?" W !,"Answer 'Y'es to remove temporary address information, 'N'o to leave data in file" G ASK
"RTN","DGLOCK",65,0)
 Q:%'=1  D EN^DGCLEAR(DFN,"TEMP") Q
"RTN","DGLOCK",66,0)
VN ;Viet Svc
"RTN","DGLOCK",67,0)
 D SV I $D(X),$S('$D(^DPT(DFN,.321)):1,$P(^(.321),U,1)'="Y":1,1:0) I "UN"'[$E(X) W !?4,$C(7),"Service in Republic of Vietnam not indicated...NO EDITING!" K X
"RTN","DGLOCK",68,0)
 Q
"RTN","DGLOCK",69,0)
 ;
"RTN","DGLOCK",70,0)
OEIF ;OIF/ OEF/ UNKNOWN OEF/OIF Svc
"RTN","DGLOCK",71,0)
 D SV
"RTN","DGLOCK",72,0)
 Q
"RTN","DGLOCK",73,0)
SVED ;Lebanon, Grenada, Panama, Persian Gulf & Yugoslavia svc edit
"RTN","DGLOCK",74,0)
 ;      (from and to dates)
"RTN","DGLOCK",75,0)
 ;DGX = piece position of corresponding service indicated? field
"RTN","DGLOCK",76,0)
 ;      for multiple serv indicated dgx=sv1^sv2^...
"RTN","DGLOCK",77,0)
 ;DGSV= service (sv1, sv2 from above)
"RTN","DGLOCK",78,0)
 ;DGOK= 1=YES,at least one of the required sv indicated is yes,0=NO
"RTN","DGLOCK",79,0)
 D SV I '$D(X) K DGX Q
"RTN","DGLOCK",80,0)
 N DGSV,DGOK,DGPC,PC
"RTN","DGLOCK",81,0)
 S DGOK=0
"RTN","DGLOCK",82,0)
 F PC=1:1 S DGSV=$P(DGX,U,PC) Q:DGSV']""  S:$P($G(^DPT(DFN,.322)),U,DGSV)="Y" DGOK=1
"RTN","DGLOCK",83,0)
 S PC=PC-1
"RTN","DGLOCK",84,0)
 I DGOK=0 D
"RTN","DGLOCK",85,0)
 .I "UN"'[$E(X) D
"RTN","DGLOCK",86,0)
 ..W !?4,$C(7),"Service in "
"RTN","DGLOCK",87,0)
 ..F DGPC=1:1:PC D
"RTN","DGLOCK",88,0)
 ...S DGSV=$P(DGX,U,DGPC) W $S(DGSV=1:"Lebanon",DGSV=4:"Grenada",DGSV=7:"Panama",DGSV=10:"Persian Gulf",DGSV=16:"Somalia",DGSV=19:"Yugoslavia",1:"")
"RTN","DGLOCK",89,0)
 ...W:(DGPC<PC) " or "
"RTN","DGLOCK",90,0)
 ..W " not indicated...NO EDITING!" K X
"RTN","DGLOCK",91,0)
 K DGX
"RTN","DGLOCK",92,0)
 Q
"RTN","DGLOCK",93,0)
PTDT  ;P&T Effective Date cannot be edited unless P&T is 'YES' - DG*5.3*688
"RTN","DGLOCK",94,0)
 ;P&T Effective Date cannot be earlier than the DOB
"RTN","DGLOCK",95,0)
 I $S('$D(^DPT(DFN,.3)):1,$P(^(.3),U,4)'="Y":1,1:0) D EN^DDIOL("P&T not indicated...no editing","","!?4") K X Q
"RTN","DGLOCK",96,0)
 I X<$P(^DPT(DFN,0),U,3) D EN^DDIOL("P&T Effective Date cannot be before Patient Date of Birth.","","!?4") K X
"RTN","DGLOCK",97,0)
 Q
"RTN","DGLOCK",98,0)
POWV  ;POW Status cannot be edited once it has been verified by the HEC
"RTN","DGLOCK",99,0)
 ;DG*5.3*688
"RTN","DGLOCK",100,0)
 I $P($G(^DPT(DFN,.52)),U,9)'="" D EN^DDIOL("POW Status verified at the HEC...NO EDITING!!","","!?4") K X
"RTN","DGLOCK",101,0)
 Q
"RTN","DGLOCK3")
0^58^B6374544
"RTN","DGLOCK3",1,0)
DGLOCK3 ;ALB/BOK,BAJ - PATIENT FILE MUMPS TRIGGER/DATA EDIT CHECKS ; 01/23/2006
"RTN","DGLOCK3",2,0)
 ;;5.3;Registration;**489,527,688**;Aug 13,1993;Build 29
"RTN","DGLOCK3",3,0)
 ; DG*5.3*688 BAJ 01/23/2006 Changed to support foreign confidential addresses
"RTN","DGLOCK3",4,0)
KILL S DGX=X I $D(^DPT(DFN,.32)) F DGKZ=0:0 S DGKZ=$O(DGBZ(DGKZ)) Q:'DGKZ  S X=$P(^DPT(DFN,.32),"^",DGKZ),$P(^(.32),"^",DGKZ)="" I X]"" S DGIZ=$S(DGKZ=20:.32945,1:(DGKZ/10000+.3281)) I $D(^DD(2,DGIZ,1)) D KILL1
"RTN","DGLOCK3",5,0)
 S X=DGX
"RTN","DGLOCK3",6,0)
 Q
"RTN","DGLOCK3",7,0)
KILL1 F DGJZ=0:0 S DGJZ=$O(^DD(2,DGIZ,1,DGJZ)) Q:'DGJZ  X ^(DGJZ,2)
"RTN","DGLOCK3",8,0)
 Q
"RTN","DGLOCK3",9,0)
S1 K DGBZ F DGKZ=9:1:13,20 S DGBZ(DGKZ)=""
"RTN","DGLOCK3",10,0)
 D KILL K DGBZ,DGIZ,DGJZ,DGKZ
"RTN","DGLOCK3",11,0)
 Q
"RTN","DGLOCK3",12,0)
S2 K DGBZ F DGKZ=14:1:18 S DGBZ(DGKZ)=""
"RTN","DGLOCK3",13,0)
 D KILL K DGBZ,DGIZ,DGJZ,DGKZ
"RTN","DGLOCK3",14,0)
 Q
"RTN","DGLOCK3",15,0)
CAD ;Confidential Address Edit
"RTN","DGLOCK3",16,0)
 I $S('$D(^DPT(DFN,.141)):1,$P(^(.141),U,9)'="Y":1,1:0) D
"RTN","DGLOCK3",17,0)
 .D EN^DDIOL("Requirement for Confidential Address data not indicated...NO EDITING!","","$C(7),!?4") K X
"RTN","DGLOCK3",18,0)
 Q
"RTN","DGLOCK3",19,0)
CADD ;Confidential Address Delete
"RTN","DGLOCK3",20,0)
 ;Called from input transform on Confidential Address fields
"RTN","DGLOCK3",21,0)
 Q:'$D(^DPT(DFN,.141))  I $P(^(.141),"^",9)="N"!($P(^(.141),"^",1,6)="^^^^^") D  Q
"RTN","DGLOCK3",22,0)
 .N DGFDA,DGERR
"RTN","DGLOCK3",23,0)
 .D CADM
"RTN","DGLOCK3",24,0)
 .I $D(DGFDA) D
"RTN","DGLOCK3",25,0)
 ..N DGX
"RTN","DGLOCK3",26,0)
 ..S DGX=X
"RTN","DGLOCK3",27,0)
 ..D FILE^DIE("","DGFDA","DGERR")
"RTN","DGLOCK3",28,0)
 ..S X=DGX
"RTN","DGLOCK3",29,0)
 ;
"RTN","DGLOCK3",30,0)
ASK W !,"Do you want to delete all confidential address data" S %=2 D YN^DICN I %Y["?" W !,"Answer 'Y'es to remove confidential address information, 'N'o to leave data in file" G ASK
"RTN","DGLOCK3",31,0)
ASK1 ;
"RTN","DGLOCK3",32,0)
 Q:%'=1
"RTN","DGLOCK3",33,0)
 D EN^DGCLEAR(DFN,"CONF")
"RTN","DGLOCK3",34,0)
 D CADM
"RTN","DGLOCK3",35,0)
 N DGX
"RTN","DGLOCK3",36,0)
 S DGX=X
"RTN","DGLOCK3",37,0)
 D FILE^DIE("","DGFDA","DGERR")
"RTN","DGLOCK3",38,0)
 S X=DGX
"RTN","DGLOCK3",39,0)
 Q
"RTN","DGLOCK3",40,0)
CADM ;Delete data from Confidential Address Categories
"RTN","DGLOCK3",41,0)
 I $D(^DPT(DFN,.14)) D
"RTN","DGLOCK3",42,0)
 .N DGIEN
"RTN","DGLOCK3",43,0)
 .S DGIEN=0
"RTN","DGLOCK3",44,0)
 .F  S DGIEN=$O(^DPT(DFN,.14,DGIEN)) Q:'DGIEN  D
"RTN","DGLOCK3",45,0)
 ..S DGFDA(2.141,DGIEN_","_DFN_",",.01)=""
"RTN","DGLOCK3",46,0)
 Q
"RTN","DGLOCK3",47,0)
CADD1 ;Confidential Address Delete
"RTN","DGLOCK3",48,0)
 ;Called from Confidential Address "DEL" nodes
"RTN","DGLOCK3",49,0)
 I $D(^DPT(DFN,.141)),$P(^(.141),U,9)="Y" D
"RTN","DGLOCK3",50,0)
 .D EN^DDIOL("Answer NO to the 'CONFIDENTIAL ADDRESS ACTIVE' prompt to delete.","","$C(7),!?4") K X
"RTN","DGLOCK3",51,0)
 Q
"RTN","DGMTA")
0^2^B40373601
"RTN","DGMTA",1,0)
DGMTA ;ALB/RMO/CAW/LD/SCG/AEG/PHH - Add a New Means Test ; 07/06/2004
"RTN","DGMTA",2,0)
 ;;5.3;Registration;**33,45,137,166,177,182,290,344,332,433,458,535,612,564,688**;Aug 13, 1993;Build 29
"RTN","DGMTA",3,0)
 ;
"RTN","DGMTA",4,0)
EN ;Entry point to add a new means test
"RTN","DGMTA",5,0)
 N DGMDOD S DGMDOD=""
"RTN","DGMTA",6,0)
 S DGADDF=1
"RTN","DGMTA",7,0)
 I $D(DGMTDFN)#2 D UNLOCK^DGMTUTL(DGMTDFN) K DGMTDFN
"RTN","DGMTA",8,0)
 S DIC="^DPT(",DIC(0)="AEMQ" W ! D ^DIC K DIC G Q:Y<0 S (DFN,DGMTDFN)=+Y
"RTN","DGMTA",9,0)
 I $P($G(^DPT(DFN,.35)),U)'="" S DGMDOD=$P(^DPT(DFN,.35),U)
"RTN","DGMTA",10,0)
 I $G(DGMDOD) W !,"Patient died on: ",$$FMTE^XLFDT(DGMDOD,"1D") Q
"RTN","DGMTA",11,0)
 ;
"RTN","DGMTA",12,0)
 ; check if income test in progress
"RTN","DGMTA",13,0)
 D CKUPLOAD^IVMCUPL(DFN)
"RTN","DGMTA",14,0)
 ;
"RTN","DGMTA",15,0)
 ; obtain lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",16,0)
 I $$LOCK^DGMTUTL(DFN)
"RTN","DGMTA",17,0)
 ;
"RTN","DGMTA",18,0)
 I DGMTYPT=1 N DGDOM1 D EN^DGMTR I 'DGREQF,'$G(DGDOM1) W !,*7,"A means test can only be added for patients who require one.",! K DGDOM1 G EN
"RTN","DGMTA",19,0)
 ;
"RTN","DGMTA",20,0)
 N FUTMT S FUTMT=$$FUT^DGMTU(DFN,"",DGMTYPT) I FUTMT D FTST G EN
"RTN","DGMTA",21,0)
 ;
"RTN","DGMTA",22,0)
 ;if a test was auto-completed, DGADDF gets set to 0
"RTN","DGMTA",23,0)
 I 'DGADDF W !!,*7,"A means test already exists and is in effect" G EN
"RTN","DGMTA",24,0)
 ;
"RTN","DGMTA",25,0)
 K:DGMTYPT=1 DGDOM1
"RTN","DGMTA",26,0)
 I DGMTYPT=2 D EN^DGMTCOR I 'DGMTCOR S I=$P($T(WHY+DGWRT),";",3,99) W !!,*7,"A copay exemption test can only be added for applicable veterans.",!,I G EN
"RTN","DGMTA",27,0)
 S DGLDT=$$LST^DGMTU(DFN,"",DGMTYPT),DGLD=$P(DGLDT,U,2),DGLDYR=$E(DGLD,1,3)_"1231"
"RTN","DGMTA",28,0)
 ;
"RTN","DGMTA",29,0)
DT S %DT("A")="DATE OF TEST: ",%DT="AEX",%DT(0)="-NOW",%DT("B")="NOW" W ! D ^%DT K %DT G Q:Y<0 S DGMTDT=Y
"RTN","DGMTA",30,0)
 I DGMTDT<$S(DGMTYPT=1:2860701,1:2921029) W !?3,*7,"The date of test cannot be before "_$S(DGMTYPT=1:"7/1/1986.",1:"10/29/1992.") G DT
"RTN","DGMTA",31,0)
 I DGLD,DGMTDT<DGLD W !?3,*7,"The date of test cannot be before the last date of test on " S Y=DGLD X ^DD("DD") W Y,"." G DT
"RTN","DGMTA",32,0)
 I DGLD S X1=DGMTDT,X2=DGLD D ^%DTC I X<365,DGMTDT'>DGLDYR D  G EN
"RTN","DGMTA",33,0)
 .W !?3,*7,"An annual date of test already exists on " S Y=DGLD X ^DD("DD") W Y,"."
"RTN","DGMTA",34,0)
 .S DGTTYP=$S(DGMTYPT=1:"Means ",1:"Copay Exemption ")
"RTN","DGMTA",35,0)
 .W !,$S($P($G(^DG(408.34,+$P($G(^DGMT(408.31,+DGLDT,0)),U,23),0)),U)="VAMC":"   Use the 'Edit an Existing "_DGTTYP_"Test' Option.",1:"   Use the 'View a Past Means Test' Option.")
"RTN","DGMTA",36,0)
 ;
"RTN","DGMTA",37,0)
 ;Means Test cannot be added for patient on a DOM ward on date of test
"RTN","DGMTA",38,0)
 I DGMTYPT=2 G PRINT
"RTN","DGMTA",39,0)
 N VAINDT,VADMVT,DGDOM,DGDOM1
"RTN","DGMTA",40,0)
 S VAINDT=DGMTDT
"RTN","DGMTA",41,0)
 D DOM1^DGMTR I $G(DGDOM1) D  K VAINDT,VADMVT,DGDOM,DGDOM1 G EN
"RTN","DGMTA",42,0)
 .W !,*7,"A Means Test cannot be added for patients on a DOM ward on date of test.",!
"RTN","DGMTA",43,0)
 K VAINDT,VADMVT,DGDOM,DGDOM1
"RTN","DGMTA",44,0)
 ;
"RTN","DGMTA",45,0)
 ;A warning message is displayed if last means test for patient is
"RTN","DGMTA",46,0)
 ;from a prior year and has a status of required.  The user is given
"RTN","DGMTA",47,0)
 ;the option to continue or stop adding a new means test.
"RTN","DGMTA",48,0)
 N %
"RTN","DGMTA",49,0)
 I DGLD,DGMTDT>DGLDYR,$P(DGLDT,"^",4)="R" D  Q:%=-1  I %=2 K % G EN
"RTN","DGMTA",50,0)
 .W !?3,*7,"WARNING - last means test on " S Y=DGLD X ^DD("DD") W Y," has a status of required."
"RTN","DGMTA",51,0)
DT2 .W !?3,"Do you still want to continue adding new test"
"RTN","DGMTA",52,0)
 .S %=2 D YN^DICN
"RTN","DGMTA",53,0)
 .I %=0 W !?3,"Answer 'Y'es to continue adding new test." G DT2
"RTN","DGMTA",54,0)
 .Q 
"RTN","DGMTA",55,0)
 K %
"RTN","DGMTA",56,0)
 ;
"RTN","DGMTA",57,0)
PRINT I "^P^A^C^G^"[(U_$P(DGLDT,U,4)_U) S %=1 W !,"Do you wish to print the prior means test" D YN^DICN G:%=-1 Q I %Y["?" W !!,"This will print the prior means test information.",! G PRINT
"RTN","DGMTA",58,0)
 I $G(%)=1 S DGX=DGMTDT,DGMTDT=DGLD,DGMTI=+DGLDT,DGOPT="" D DEV^DGMTP,CLOSE^DGUTQ S DGMTDT=DGX K DGX
"RTN","DGMTA",59,0)
 D ADD G EN:DGMTI<0
"RTN","DGMTA",60,0)
 S DGMTACT="ADD",DGMTROU="EN^DGMTA" G EN^DGMTSC
"RTN","DGMTA",61,0)
 ;
"RTN","DGMTA",62,0)
Q K DA,DFN,DGADDF,DGBL,DGFL,DGFLD,DGIRO,DGLD,DGLDT,DGLDYR,DGMTACT,DGMTCOR,DGMTDT,DGMTI,DGMTROU,DGREQF,DGTTYP,DGMTYPT,DGVI,DGVO,X,X1,X2,Y
"RTN","DGMTA",63,0)
 ;
"RTN","DGMTA",64,0)
 ; release lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",65,0)
 I $D(DGMTDFN)#2 D UNLOCK^DGMTUTL(DGMTDFN) K DGMTDFN
"RTN","DGMTA",66,0)
 Q
"RTN","DGMTA",67,0)
 ;
"RTN","DGMTA",68,0)
ADD ;Add means test
"RTN","DGMTA",69,0)
 ; Input  -- DFN     Patient IEN
"RTN","DGMTA",70,0)
 ;           DGMTDT  Date
"RTN","DGMTA",71,0)
 ;           DGMTYPT Type of Test 1=MT 2=COPAY 4=LTC
"RTN","DGMTA",72,0)
 ; Output -- DGMTI   Annual Means/Copay/LTC Test IEN
"RTN","DGMTA",73,0)
 N DA,DD,DIC,DIK,DINUM,DLAYGO,DO,DS,X,D0,DGSITE,CONVRT
"RTN","DGMTA",74,0)
 ;
"RTN","DGMTA",75,0)
 ; obtain lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",76,0)
 I $$LOCK^DGMTUTL(DFN) E  Q
"RTN","DGMTA",77,0)
 ;
"RTN","DGMTA",78,0)
 ; Check for Linked test and don't loose the link.
"RTN","DGMTA",79,0)
 S LINK="",CURIEN=+$$LST^DGMTU(DFN,DGMTDT,DGMTYPT)
"RTN","DGMTA",80,0)
 I CURIEN S LINK=$P($G(^DGMT(408.31,CURIEN,2)),U,6)
"RTN","DGMTA",81,0)
 ;
"RTN","DGMTA",82,0)
 S DGSITE=$$GETSITE^DGMTU4(.DUZ)
"RTN","DGMTA",83,0)
 S X=DGMTDT,(DIC,DIK)="^DGMT(408.31,",DIC(0)="L",DLAYGO=408.31
"RTN","DGMTA",84,0)
 ;
"RTN","DGMTA",85,0)
 ;Look for existing IAI records and convert (if necessary)
"RTN","DGMTA",86,0)
 D ALL^DGMTU21(DFN,"VSD",DT,"IPR") ;ALL only returns IAI from last IY
"RTN","DGMTA",87,0)
 I $D(DGINC) DO
"RTN","DGMTA",88,0)
 . D ISCNVRT^DGMTUTL(.DGINC)
"RTN","DGMTA",89,0)
 ;
"RTN","DGMTA",90,0)
 ; The DIC("DR") string is built in this specific order so that
"RTN","DGMTA",91,0)
 ; all triggers and "M" x-refs fire correctly.  Should not be
"RTN","DGMTA",92,0)
 ; modified without an in-depth review of DD of file #408.31.
"RTN","DGMTA",93,0)
 ;
"RTN","DGMTA",94,0)
 I DGMTYPT=2 D
"RTN","DGMTA",95,0)
 .S DIC("DR")="2////"_(DGMTYPT'=4)_";2.05////"_DGSITE_";2.06////"_LINK
"RTN","DGMTA",96,0)
 .S DIC("DR")=DIC("DR")_";.02////"_DFN_";.019////"_DGMTYPT_";.23////1"
"RTN","DGMTA",97,0)
 E  D
"RTN","DGMTA",98,0)
 .S DIC("DR")="2////"_(DGMTYPT'=4)_";2.05////"_DGSITE_";2.06////"_LINK
"RTN","DGMTA",99,0)
 .S DIC("DR")=DIC("DR")_";.019////"_DGMTYPT_";.02////"_DFN_";.23////1"
"RTN","DGMTA",100,0)
 K DD,DO
"RTN","DGMTA",101,0)
 D FILE^DICN S DGMTI=+Y
"RTN","DGMTA",102,0)
 ;
"RTN","DGMTA",103,0)
 ; Check for another test in the current year and convert IAI records if needed
"RTN","DGMTA",104,0)
 ; Send new test date (as test that have) into VRCHKUP
"RTN","DGMTA",105,0)
 I $D(TYPE),((+TYPE=1)!(TYPE=4)) S CONVRT=$$VRCHKUP^DGMTU2(DGMTYPT,TYPE,DGMTDT)
"RTN","DGMTA",106,0)
 I $D(TYPE),((+TYPE'=1)&(TYPE'=4)) S CONVRT=$$VRCHKUP^DGMTU2(DGMTYPT,,DGMTDT)
"RTN","DGMTA",107,0)
 I '$D(TYPE) S CONVRT=$$VRCHKUP^DGMTU2(DGMTYPT,,DGMTDT)
"RTN","DGMTA",108,0)
 N DGERR,DGMTRT
"RTN","DGMTA",109,0)
 S DGMTRT(408.31,DGMTI_",",2.11)=1
"RTN","DGMTA",110,0)
 S DGERR=""
"RTN","DGMTA",111,0)
 D FILE^DIE("","DGMTRT",DGERR)
"RTN","DGMTA",112,0)
 ; release lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",113,0)
 D UNLOCK^DGMTUTL(DFN)
"RTN","DGMTA",114,0)
 ;
"RTN","DGMTA",115,0)
ADDQ Q
"RTN","DGMTA",116,0)
 ;
"RTN","DGMTA",117,0)
FTST ; Build message for future tests that are added to the system, but
"RTN","DGMTA",118,0)
 ; were not performed by the VAMC trying to add a new MT.
"RTN","DGMTA",119,0)
 N SITE,DGMTYPT,DGTTYP,SRC,SCT
"RTN","DGMTA",120,0)
 S SCT=$P(^DGMT(408.31,+FUTMT,2),U,5),SITE=$$INST^DGENU()
"RTN","DGMTA",121,0)
 S DGMTYPT=$P(^DGMT(408.31,+FUTMT,0),U,19)
"RTN","DGMTA",122,0)
 S DGTTYP=$S(DGMTYPT=1:"Means ",1:"Copay Exemption ")
"RTN","DGMTA",123,0)
 W !?3,*7,"A future test already exists on "
"RTN","DGMTA",124,0)
 S Y=$P(FUTMT,U,2) X ^DD("DD") W Y,"."
"RTN","DGMTA",125,0)
 ; This site performed the MT
"RTN","DGMTA",126,0)
 I SITE=SCT D
"RTN","DGMTA",127,0)
 .W !?3,"Use the 'Edit an Existing "_DGTTYP_"Test' Option."
"RTN","DGMTA",128,0)
 ;
"RTN","DGMTA",129,0)
 ; The MT was added by another VAMC
"RTN","DGMTA",130,0)
 I SITE'=SCT D
"RTN","DGMTA",131,0)
 .S SRC=$P(FUTMT,U,5)
"RTN","DGMTA",132,0)
 .I SCT W !?3,"The "_DGTTYP_"Test was conducted at Site: ",SCT
"RTN","DGMTA",133,0)
 .W !?3,"Please contact "
"RTN","DGMTA",134,0)
 .W $S($D(^DIC(4,+SCT,0)):$P(^DIC(4,+SCT,0),U),SRC=2:"IVM",SRC=3:"the HEC",1:"the site")
"RTN","DGMTA",135,0)
 .W ",",!?3,"if it is necessary to edit the test."
"RTN","DGMTA",136,0)
 Q
"RTN","DGMTA",137,0)
WHY ;Why Copay Test cannot be added
"RTN","DGMTA",138,0)
 ;;Patient is not a veteran.
"RTN","DGMTA",139,0)
 ;;Patient does not have a Primary Eligibility Code.
"RTN","DGMTA",140,0)
 ;;Patient is Service Connected 50-100%.
"RTN","DGMTA",141,0)
 ;;Means Test options must be used instead of Copay options.
"RTN","DGMTA",142,0)
 ;;Patient is receiving Aid and Attendance, automatically exempted.
"RTN","DGMTA",143,0)
 ;;Patient is receiving Housebound Benefits, automatically exempted.
"RTN","DGMTA",144,0)
 ;;Patient is receiving a VA Pension, automatically exempted.
"RTN","DGMTA",145,0)
 ;;Patient is in a DOM ward, automatically exempted.
"RTN","DGMTA",146,0)
 ;;Patient is an inpatient, automatically exempted.
"RTN","DGMTA",147,0)
 ;;Patient was a POW, automatically exempted.
"RTN","DGMTA",148,0)
 ;;Patient is Unemployable, automatically exempted.
"RTN","DGMTDD1")
0^110^B11336332
"RTN","DGMTDD1",1,0)
DGMTDD1 ;ALB/MIR,JAN,AEG,ERC,BAJ - DD calls from income screening files ; 12/8/06 3:35pm
"RTN","DGMTDD1",2,0)
 ;;5.3;Registration;**180,313,345,401,653,688**;Aug 13, 1993;Build 29
"RTN","DGMTDD1",3,0)
 ;
"RTN","DGMTDD1",4,0)
 ; This routine contains miscellaneous input transform and other DD
"RTN","DGMTDD1",5,0)
 ; calls from income screening files.
"RTN","DGMTDD1",6,0)
 ;
"RTN","DGMTDD1",7,0)
 ;
"RTN","DGMTDD1",8,0)
SSN ; called from the input transform of the SSN field in file 408.13
"RTN","DGMTDD1",9,0)
 N %,L,DGN,DGPAT,PATNAME,PREVX,KANS
"RTN","DGMTDD1",10,0)
 ;with DG*5.3*653 Pseudo SSNs will be allowed for spouse/dependents
"RTN","DGMTDD1",11,0)
 I X'?9N&(X'?3N1"-"2N1"-"4N)&(X'?9N1"P")&(X'?3N1"-"2N1"-"4N1"P"),(X'?1"P")&(X'?1"p") W !,"Response must be either nine numbers, be in the format nnn-nn-nnnn",!,"or include a ""P"" for a Pseudo SSN." K X Q
"RTN","DGMTDD1",12,0)
 I X="P"!(X="p") D PSEU S X=L K L G SSNQ
"RTN","DGMTDD1",13,0)
 I X["P" D PSEU I X'=L K X,L W !!,$C(7),"Invalid Pseudo SSN, type ""P"" for valid one." Q
"RTN","DGMTDD1",14,0)
 I X["P" G SSNQ
"RTN","DGMTDD1",15,0)
 I X'?.AN F %=1:1:$L(X) I $E(X,%)?1P S X=$E(X,0,%-1)_$E(X,%+1,999),%=%-1
"RTN","DGMTDD1",16,0)
 I X'?9N K X Q
"RTN","DGMTDD1",17,0)
 I $D(X) S L=$E(X,1) I L=9 W !,*7,"The SSN must not begin with 9." K X Q
"RTN","DGMTDD1",18,0)
 I $D(X),$E(X,1,3)="000" W !,*7,"First three digits cannot be zeros." K X Q
"RTN","DGMTDD1",19,0)
 ;
"RTN","DGMTDD1",20,0)
 ; warning if the spouse's/dependent's SSN is found in the PATIENT file
"RTN","DGMTDD1",21,0)
 ; and spouse/dependent is not a veteran.  spouse/dependent is a veteran
"RTN","DGMTDD1",22,0)
 ; if name, sex, DOB match.
"RTN","DGMTDD1",23,0)
 ;
"RTN","DGMTDD1",24,0)
 ; input (OPTIONAL)
"RTN","DGMTDD1",25,0)
 ;    ANS(.01) = NAME,  ANS(.02) = SEX,  ANS(.03) = DOB
"RTN","DGMTDD1",26,0)
 ;
"RTN","DGMTDD1",27,0)
 ; if newly entered values (those not yet committed to dbase) not 
"RTN","DGMTDD1",28,0)
 ; supplied then pull current detail from the Person Income file
"RTN","DGMTDD1",29,0)
 ; (#408.13) for this dependent.
"RTN","DGMTDD1",30,0)
 I '$G(ANS(.01)),'$G(ANS(.02)),'$G(ANS(.03)) D
"RTN","DGMTDD1",31,0)
 . N REC,FLD
"RTN","DGMTDD1",32,0)
 . D GETS^DIQ(408.13,DA,".01;.02;.03","I","REC")
"RTN","DGMTDD1",33,0)
 . F FLD=".01",".02",".03" S ANS(FLD)=REC(408.13,DA_",",FLD,"I")
"RTN","DGMTDD1",34,0)
 . S KANS=1
"RTN","DGMTDD1",35,0)
 E  S KANS=0
"RTN","DGMTDD1",36,0)
 ;
"RTN","DGMTDD1",37,0)
 S DGN=$O(^DPT("SSN",X,0)) G:'DGN SSDEP S DGPAT=$G(^DPT(DGN,0))
"RTN","DGMTDD1",38,0)
 I $P(DGPAT,"^",3)=ANS(.03),($P(DGPAT,"^",2)=ANS(.02)),($P(DGPAT,"^")=ANS(.01)) G SSDEP
"RTN","DGMTDD1",39,0)
 S PATNAME=$P(DGPAT,"^") D WARN Q
"RTN","DGMTDD1",40,0)
 ;
"RTN","DGMTDD1",41,0)
SSDEP ; warning if spouse's/dependent's SSN is found in file 408.13 and
"RTN","DGMTDD1",42,0)
 ; name, sex, DOB don't match
"RTN","DGMTDD1",43,0)
 S DGN=$O(^DGPR(408.13,"SSN",X,0)) G:'DGN SSNQ S DGPAT=$G(^DGPR(408.13,DGN,0))
"RTN","DGMTDD1",44,0)
 I $P(DGPAT,"^",3)=ANS(.03),($P(DGPAT,"^",2)=ANS(.02)),($P(DGPAT,"^")=ANS(.01)) G SSNQ
"RTN","DGMTDD1",45,0)
 S PATNAME=$P($G(^DGPR(408.13,DGN,0)),"^") D WARN Q
"RTN","DGMTDD1",46,0)
 ;
"RTN","DGMTDD1",47,0)
SSNQ K:KANS ANS Q
"RTN","DGMTDD1",48,0)
 ;
"RTN","DGMTDD1",49,0)
 ;
"RTN","DGMTDD1",50,0)
PSEU ;create a Pseudo SSN using same algorithm as file 2 in PSEU^DGRPDD1
"RTN","DGMTDD1",51,0)
 S KANS=""
"RTN","DGMTDD1",52,0)
 I $G(ANS(.01))']""!($G(ANS(.03))'?7N) D
"RTN","DGMTDD1",53,0)
 . S DGNODE0=^DGPR(408.13,DA,0)
"RTN","DGMTDD1",54,0)
 . S ANS(.01)=$P(DGNODE0,U),ANS(.03)=$P(DGNODE0,U,3)
"RTN","DGMTDD1",55,0)
 I $D(ANS(.01)) S NAM=ANS(.01)
"RTN","DGMTDD1",56,0)
 I $D(ANS(.03)) S DOB=ANS(.03)
"RTN","DGMTDD1",57,0)
 I $G(DOB)="" S DOB=2000000
"RTN","DGMTDD1",58,0)
 S L1=$E($P(NAM," ",2)),L3=$E(NAM),NAM=$P(NAM,",",2),L2=$E(NAM)
"RTN","DGMTDD1",59,0)
 S Z=L1 D CON S L1=Z
"RTN","DGMTDD1",60,0)
 S Z=L2 D CON S L2=Z
"RTN","DGMTDD1",61,0)
 S Z=L3 D CON S L3=Z
"RTN","DGMTDD1",62,0)
 S L=L2_L1_L3_$E(DOB,4,7)_$E(DOB,2,3)_"P"
"RTN","DGMTDD1",63,0)
 Q
"RTN","DGMTDD1",64,0)
CON ;
"RTN","DGMTDD1",65,0)
 S Z=$A(Z)-65\3+1 S:Z<0 Z=0
"RTN","DGMTDD1",66,0)
 Q
"RTN","DGMTDD1",67,0)
 ;
"RTN","DGMTDD1",68,0)
WARN ; printed WARNING message to alert user that spouse/dependent SSN be
"RTN","DGMTDD1",69,0)
 ; that of a veteran in Patient/Income Person File.
"RTN","DGMTDD1",70,0)
 W !,*7,"Warning - ",X," belongs to patient ",PATNAME
"RTN","DGMTDD1",71,0)
 K DIR S PREVX=X,DIR(0)="YA",DIR("A")="Are you sure this is the correct SSN? ",DIR("B")="YES" D ^DIR
"RTN","DGMTDD1",72,0)
 I Y=1 S X=PREVX K PREVX,DIR("B") Q
"RTN","DGMTDD1",73,0)
 E  K DIR("B"),X Q
"RTN","DGMTDD1",74,0)
 ;
"RTN","DGMTDD1",75,0)
REL ; called from the input transform of the RELATIONSHIP field of file 408.12...sets DIC("S")
"RTN","DGMTDD1",76,0)
 N DGNODE,DGX,SEX
"RTN","DGMTDD1",77,0)
 S DGNODE=$G(^DGPR(408.12,DA,0)),DGX=$P(DGNODE,"^",2) Q:'DGNODE
"RTN","DGMTDD1",78,0)
 I DGX,(DGX<3) S DIC("S")="I Y="_DGX Q
"RTN","DGMTDD1",79,0)
 S DGX=$P(DGNODE,"^",3),SEX=$P($G(@("^"_$P(DGX,";",2)_+DGX_",0)")),"^",2)
"RTN","DGMTDD1",80,0)
 S DIC("S")="I Y>2,(""E"_SEX_"""[$P(^(0),""^"",3))"
"RTN","DGMTDD1",81,0)
 I $P(DGNODE,U,2)>6 I $$CNTDEPS^DGMTU11(+DGNODE)>18 S DIC("S")=DIC("S")_",(Y>6)"
"RTN","DGMTDD1",82,0)
 I $D(DGTYPE),DGTYPE="C" S DIC("S")=DIC("S")_",(Y<7)"
"RTN","DGMTDD1",83,0)
 Q
"RTN","DGMTDD2")
0^77^B29539151
"RTN","DGMTDD2",1,0)
DGMTDD2 ;ALB/RMO,LBD - Income Relation file (#408.22) Data Dictionary Calls ;13 MAR 1992 3:00 pm
"RTN","DGMTDD2",2,0)
 ;;5.3;Registration;**33,45,518,688**;Aug 13, 1993;Build 29
"RTN","DGMTDD2",3,0)
 ;
"RTN","DGMTDD2",4,0)
ID ;Identifier for Income Relation file
"RTN","DGMTDD2",5,0)
 N DGIN0,DGPRI,Y
"RTN","DGMTDD2",6,0)
 S DGIN0=$G(^DGMT(408.21,+$P($G(^(0)),U,2),0))
"RTN","DGMTDD2",7,0)
 S DGPRI=+$P(DGIN0,U,2),Y=+DGIN0 X ^DD("DD")
"RTN","DGMTDD2",8,0)
 W "  ",Y W:$P($G(^DGPR(408.12,DGPRI,0)),U,2)'=1 "    Relation: ",$$NAME^DGMTU1(DGPRI),"  (",$$REL^DGMTU1(DGPRI),")" W !
"RTN","DGMTDD2",9,0)
 Q
"RTN","DGMTDD2",10,0)
 ;
"RTN","DGMTDD2",11,0)
FUN ;"Trigger" Cross-reference on the Married field (#.05) and
"RTN","DGMTDD2",12,0)
 ;Dependent Children field (#.08) to delete funeral and burial
"RTN","DGMTDD2",13,0)
 ;expenses
"RTN","DGMTDD2",14,0)
 ;  If the test is a LTC Copay test do not delete the funeral and
"RTN","DGMTDD2",15,0)
 ;  burial expenses.  Added for LTC Phase III (DG*5.3*518)
"RTN","DGMTDD2",16,0)
 N DGFLD,DGIN0,DGINI,DGVAL,DGMT,DGMTIR ;DG5.3*688 added DGMTIR
"RTN","DGMTDD2",17,0)
 S DGINI=+$P($G(^DGMT(408.22,DA,0)),U,2),DGIN1=$G(^DGMT(408.21,DGINI,1))
"RTN","DGMTDD2",18,0)
 S DGMTIR=$P($G(^DGMT(408.22,DA,"MT")),U) ;DG5.3*688 defines DGMTIR
"RTN","DGMTDD2",19,0)
 S DGMT=+$G(^DGMT(408.21,DGINI,"MT"))
"RTN","DGMTDD2",20,0)
 I DGMT,$P($G(^DGMT(408.31,DGMT,0)),U,19)=3 Q
"RTN","DGMTDD2",21,0)
 I DGMT,$P($G(^DGMT(408.31,DGMT,2)),U,11)=1 Q  ;* GTS DG*688 - MT V1 does not require Spouse or Children for F&B
"RTN","DGMTDD2",22,0)
 I DGMTIR,$P($G(^DGMT(408.31,DGMTIR,2)),U,11)=1 Q  ;* DG*688 - Check for Version 1 using 408.22 MT Ptr
"RTN","DGMTDD2",23,0)
 S DGFLD=1.02,DGVAL=$P(DGIN1,U,2)
"RTN","DGMTDD2",24,0)
 I DGVAL]"" D KILL S $P(^DGMT(408.21,DGINI,1),U,2)=""
"RTN","DGMTDD2",25,0)
 Q
"RTN","DGMTDD2",26,0)
 ;
"RTN","DGMTDD2",27,0)
SP ;"Trigger" Cross-reference on the Amount Contributed to Spouse field
"RTN","DGMTDD2",28,0)
 ;(#.07) to delete net worth on file for a spouse
"RTN","DGMTDD2",29,0)
 N DFN,DGIN2,DGINI,DGLY,DGREL,DGVAL
"RTN","DGMTDD2",30,0)
 S DGIR0=$G(^DGMT(408.22,DA,0))
"RTN","DGMTDD2",31,0)
 S DFN=+DGIR0,DGLY=+$G(^DGMT(408.21,+$P(DGIR0,U,2),0)) D
"RTN","DGMTDD2",32,0)
 .N DA,X
"RTN","DGMTDD2",33,0)
 .D GETREL^DGMTU11(DFN,"S",DGLY,$S($G(DGMTI):DGMTI,1:""))
"RTN","DGMTDD2",34,0)
 S DGINI=+$$IAI^DGMTU3(+$G(DGREL("S")),DGLY)
"RTN","DGMTDD2",35,0)
 S DGIN2=$G(^DGMT(408.21,DGINI,2))
"RTN","DGMTDD2",36,0)
 F DGFLD=2.01:.01:2.05 S DGVAL=$P(DGIN2,U,(DGFLD-2)/.01) I DGVAL]"" D
"RTN","DGMTDD2",37,0)
 .D KILL
"RTN","DGMTDD2",38,0)
 .S $P(^DGMT(408.21,DGINI,2),U,(DGFLD-2)/.01)=""
"RTN","DGMTDD2",39,0)
 Q
"RTN","DGMTDD2",40,0)
 ;
"RTN","DGMTDD2",41,0)
INC ;"Trigger" Cross-reference on the Child Had Income field (#.11) and
"RTN","DGMTDD2",42,0)
 ;Income Available To You field (#.12) to delete educational expenses
"RTN","DGMTDD2",43,0)
 ;on file for a child
"RTN","DGMTDD2",44,0)
 N DGINI
"RTN","DGMTDD2",45,0)
 S DGINI=+$P($G(^DGMT(408.22,DA,0)),U,2)
"RTN","DGMTDD2",46,0)
 I $P($G(^DGMT(408.21,DGINI,0)),U,14)]"" D
"RTN","DGMTDD2",47,0)
 .N DGFLD,DGVAL
"RTN","DGMTDD2",48,0)
 .I $P($G(^DGMT(408.21,DGINI,1)),U,3)]"" S DGVAL=$P(^(1),U,3),DGFLD=1.03 D KILL S $P(^DGMT(408.21,DGINI,1),U,3)=""
"RTN","DGMTDD2",49,0)
 Q
"RTN","DGMTDD2",50,0)
KILL ;Kill Cross-Reference
"RTN","DGMTDD2",51,0)
 N DA,DGIX,X
"RTN","DGMTDD2",52,0)
 S DA=DGINI,X=DGVAL,DGIX=0
"RTN","DGMTDD2",53,0)
 F  S DGIX=$O(^DD(408.21,DGFLD,1,DGIX)) Q:'DGIX  X ^(DGIX,2) S X=DGVAL
"RTN","DGMTDD2",54,0)
 Q
"RTN","DGMTDD2",55,0)
 ;
"RTN","DGMTDD2",56,0)
MAR ;Input Transform check for the Married field (#.05)
"RTN","DGMTDD2",57,0)
 ;for an active spouse
"RTN","DGMTDD2",58,0)
 N DFN,DGIR0,DGLY,DGREL
"RTN","DGMTDD2",59,0)
 S DGIR0=$G(^DGMT(408.22,DA,0))
"RTN","DGMTDD2",60,0)
 S DFN=+DGIR0,DGLY=+$G(^DGMT(408.21,+$P(DGIR0,U,2),0)) D
"RTN","DGMTDD2",61,0)
 .N DA,X
"RTN","DGMTDD2",62,0)
 .D GETREL^DGMTU11(DFN,"S",DGLY,$S($G(DGMTI):DGMTI,1:""))
"RTN","DGMTDD2",63,0)
 I $D(DGREL("S")) W !?5,"An active spouse exists.  Married cannot be 'NO'.",!?5,"You have to use the 'Expand Dependent' action and inactive first." K X
"RTN","DGMTDD2",64,0)
 Q
"RTN","DGMTDD2",65,0)
 ;
"RTN","DGMTDD2",66,0)
DEP ;Input Transform check for the Dependent Children field (#.08)
"RTN","DGMTDD2",67,0)
 ;for active children
"RTN","DGMTDD2",68,0)
 N DFN,DGDEP,DGIR0,DGLY,DGREL
"RTN","DGMTDD2",69,0)
 S DGIR0=$G(^DGMT(408.22,DA,0))
"RTN","DGMTDD2",70,0)
 S DFN=+DGIR0,DGLY=+$G(^DGMT(408.21,+$P(DGIR0,U,2),0)) D
"RTN","DGMTDD2",71,0)
 .N DA,X
"RTN","DGMTDD2",72,0)
 .D GETREL^DGMTU11(DFN,"C",DGLY,$S($G(DGMTI):DGMTI,1:""))
"RTN","DGMTDD2",73,0)
 I $D(DGREL("C")) W !?5,"Active children exist.  Dependent Children cannot be 'NO'." K X
"RTN","DGMTDD2",74,0)
 Q
"RTN","DGMTDD2",75,0)
 ;
"RTN","DGMTDD2",76,0)
LIV ;Input Transform check for Lived With Patient field (#.06)
"RTN","DGMTDD2",77,0)
 N DGIR0,DGPRI
"RTN","DGMTDD2",78,0)
 S DGIR0=$G(^DGMT(408.22,DA,0)),DGPRI=+$P($G(^DGMT(408.21,+$P(DGIR0,U,2),0)),U,2)
"RTN","DGMTDD2",79,0)
 I $P($G(^DGPR(408.12,DGPRI,0)),U,2)=1,'$P(DGIR0,U,5) W !?5,"This field does not need to be filled in unless the patient is married." K X
"RTN","DGMTDD2",80,0)
 Q
"RTN","DGMTDD2",81,0)
 ;
"RTN","DGMTDD2",82,0)
AMT ;Input Transform check for Amount Contributed To Spouse field (#.07)
"RTN","DGMTDD2",83,0)
 N DGIR0,DGPRI
"RTN","DGMTDD2",84,0)
 S DGIR0=$G(^DGMT(408.22,DA,0)),DGPRI=+$P($G(^DGMT(408.21,+$P(DGIR0,U,2),0)),U,2)
"RTN","DGMTDD2",85,0)
 I $P($G(^DGPR(408.12,DGPRI,0)),U,2)=1,('$P(DGIR0,U,5)!($P(DGIR0,U,6)'=0)) W !?5,"This field does not need to be filled in unless the patient was married",!?5,"and did not live with his or her spouse." K X
"RTN","DGMTDD2",86,0)
 Q
"RTN","DGMTDD2",87,0)
 ;
"RTN","DGMTDD2",88,0)
CON ;Input Transform check for Contributed To Support field (#.1)
"RTN","DGMTDD2",89,0)
 N DGIR0,DGPRI
"RTN","DGMTDD2",90,0)
 S DGIR0=$G(^DGMT(408.22,DA,0)),DGPRI=+$P($G(^DGMT(408.21,+$P(DGIR0,U,2),0)),U,2)
"RTN","DGMTDD2",91,0)
 I "^3^4^5^6^"[(U_$P($G(^DGPR(408.12,DGPRI,0)),U,2)_U),$P(DGIR0,U,6)'=0 W !?5,"This field does not need to be filled in unless the child did not",!?5,"live with the patient." K X
"RTN","DGMTDD2",92,0)
 Q
"RTN","DGMTDD2",93,0)
 ;
"RTN","DGMTDD2",94,0)
AVL ;Input Transform check for Income Available To You field (#.12)
"RTN","DGMTDD2",95,0)
 I '$P($G(^DGMT(408.22,DA,0)),U,11) W !?5,"This field does not need to be filled in unless the child has income." K X
"RTN","DGMTDD2",96,0)
 Q
"RTN","DGMTDD2",97,0)
 ;
"RTN","DGMTDD2",98,0)
NAM ;Output Transform for Individual Annual Income field (#.02)
"RTN","DGMTDD2",99,0)
 N DGIN0,DGPRI
"RTN","DGMTDD2",100,0)
 S DGIN0=$G(^DGMT(408.21,Y,0)),DGPRI=+$P(DGIN0,U,2),Y=+DGIN0 X ^DD("DD")
"RTN","DGMTDD2",101,0)
 S Y=Y_"  "_$$NAME^DGMTU1(DGPRI)
"RTN","DGMTDD2",102,0)
 Q
"RTN","DGMTDD2",103,0)
 ;
"RTN","DGMTDD2",104,0)
LIVHLP ;Help for Lived With Patient field (#.06)
"RTN","DGMTDD2",105,0)
 N DGIR0,DGPRI
"RTN","DGMTDD2",106,0)
 S DGIR0=$G(^DGMT(408.22,DA,0)),DGPRI=+$P($G(^DGMT(408.21,+$P(DGIR0,U,2),0)),U,2)
"RTN","DGMTDD2",107,0)
 I $P($G(^DGPR(408.12,DGPRI,0)),U,2)=1 W !?5,"Enter in this field whether the veteran resided with his or her spouse",!?5,"last calendar year.  If they were living apart because one was",!?5,"hospitalized or in a nursing home, enter 'YES'."
"RTN","DGMTDD2",108,0)
 I "^3^4^5^6^"[(U_$P($G(^DGPR(408.12,DGPRI,0)),U,2)_U) W !?5,"Enter in this field whether the child resided with the veteran last",!?5,"calendar year."
"RTN","DGMTDD2",109,0)
 W !
"RTN","DGMTDD2",110,0)
 Q
"RTN","DGMTDD3")
0^30^B17870431
"RTN","DGMTDD3",1,0)
DGMTDD3 ;ALB/RMO - Individual Annual Income file (#408.21) Data Dictionary Calls ;17 MAR 1992 10:46 am
"RTN","DGMTDD3",2,0)
 ;;5.3;Registration;**688**;Aug 13, 1993;Build 29
"RTN","DGMTDD3",3,0)
 ;
"RTN","DGMTDD3",4,0)
 ;DG*688 changed NET tag to only screen entry of Child Net Worth data when the means test is version 0
"RTN","DGMTDD3",5,0)
 ;
"RTN","DGMTDD3",6,0)
ID ;Identifier for Individual Annual Income file
"RTN","DGMTDD3",7,0)
 N DGPRI
"RTN","DGMTDD3",8,0)
 S DGPRI=+$P($G(^(0)),U,2)
"RTN","DGMTDD3",9,0)
 W "  ",$P($G(^DPT(+$G(^DGPR(408.12,DGPRI,0)),0)),U) W:$P($G(^DGPR(408.12,DGPRI,0)),U,2)'=1 "    Relation: ",$$NAME^DGMTU1(DGPRI),"  (",$$REL^DGMTU1(DGPRI),")"
"RTN","DGMTDD3",10,0)
 Q
"RTN","DGMTDD3",11,0)
 ;
"RTN","DGMTDD3",12,0)
EMP ;"Trigger" Cross-reference on the Total Income From Employment
"RTN","DGMTDD3",13,0)
 ;field (#.14) to delete educational expenses on file for a child
"RTN","DGMTDD3",14,0)
 N DGFLD,DGIN0,DGLY,DGMTPAR,DGVAL
"RTN","DGMTDD3",15,0)
 S DGIN0=$G(^DGMT(408.21,DA,0)),DGLY=+DGIN0 D PAR^DGMTSCU
"RTN","DGMTDD3",16,0)
 I "^3^4^5^6^"[(U_$P($G(^DGPR(408.12,+$P(DGIN0,U,2),0)),U,2)_U),$P(DGIN0,U,14)-$P(DGMTPAR,U,17)'>0 D
"RTN","DGMTDD3",17,0)
 . I $P($G(^DGMT(408.21,DA,1)),U,3)]"" S DGVAL=$P(^(1),U,3),DGFLD=1.03 D KILL S $P(^DGMT(408.21,DA,1),U,3)=""
"RTN","DGMTDD3",18,0)
 Q
"RTN","DGMTDD3",19,0)
 ;
"RTN","DGMTDD3",20,0)
OTH ;"Trigger" Cross-reference on the Other Property or Assets
"RTN","DGMTDD3",21,0)
 ;field (#2.04) to delete debts on file
"RTN","DGMTDD3",22,0)
 N DGFLD,DGVAL
"RTN","DGMTDD3",23,0)
 I $P($G(^DGMT(408.21,DA,2)),U,5)]"" S DGVAL=$P(^(2),U,5),DGFLD=2.05 D KILL S $P(^DGMT(408.21,DA,2),U,5)=""
"RTN","DGMTDD3",24,0)
 Q
"RTN","DGMTDD3",25,0)
 ;
"RTN","DGMTDD3",26,0)
KILL ;Kill Cross-references
"RTN","DGMTDD3",27,0)
 N DGIX,X
"RTN","DGMTDD3",28,0)
 S X=DGVAL,DGIX=0
"RTN","DGMTDD3",29,0)
 F  S DGIX=$O(^DD(408.21,DGFLD,1,DGIX)) Q:'DGIX  X ^(DGIX,2) S X=DGVAL
"RTN","DGMTDD3",30,0)
 Q
"RTN","DGMTDD3",31,0)
 ;
"RTN","DGMTDD3",32,0)
FUN ;Input Transform check for Funeral and Burial Expenses field (#1.02)
"RTN","DGMTDD3",33,0)
 N DGIRI
"RTN","DGMTDD3",34,0)
 S DGIRI=+$O(^DGMT(408.22,"AIND",DA,0))
"RTN","DGMTDD3",35,0)
 I $D(^DGMT(408.22,DGIRI,0)),'$P(^(0),U,5),'$P(^(0),U,8) W !?5,"This field does not need to be filled in unless the patient was married",!?5,"or had dependent children last calendar year." K X
"RTN","DGMTDD3",36,0)
 Q
"RTN","DGMTDD3",37,0)
 ;
"RTN","DGMTDD3",38,0)
NET ;Input Transform check for Net Worth fields (#2.01-#2.05)
"RTN","DGMTDD3",39,0)
 N DGPRI
"RTN","DGMTDD3",40,0)
 S DGPRI=+$P($G(^DGMT(408.21,DA,0)),U,2)
"RTN","DGMTDD3",41,0)
 ;DG*5.3*688 -- DGMTVR is the Means Test version indicator
"RTN","DGMTDD3",42,0)
 I '$D(DGMTVR) D
"RTN","DGMTDD3",43,0)
 . N DGMT22I,DGMTVR1,DGMTVR2
"RTN","DGMTDD3",44,0)
 . S (DGMT22I,DGMTVR2)=0 F  Q:DGMTVR2  S DGMT22I=$O(^DGMT(408.22,"AIND",DA,DGMT22I)) Q:'DGMT22I  D
"RTN","DGMTDD3",45,0)
 . . S DGMTVR2=+$G(^DGMT(408.22,DGMT22I,"MT"))
"RTN","DGMTDD3",46,0)
 . I DGMTVR2 S DGMTVR=+$P($G(^DGMT(408.31,DGMTVR2,2)),U,11) Q
"RTN","DGMTDD3",47,0)
 . S DGMTVR1=+$G(^DGMT(408.21,DA,"MT"))
"RTN","DGMTDD3",48,0)
 . I DGMTVR1 S DGMTVR=+$P($G(^DGMT(408.31,DGMTVR1,2)),U,11) Q
"RTN","DGMTDD3",49,0)
 I +$G(DGMTVR)=0 DO
"RTN","DGMTDD3",50,0)
 . I "^3^4^5^6^"[(U_$P($G(^DGPR(408.12,DGPRI,0)),U,2)_U) W !?5,"This field does not need to be filled in for a child." K X
"RTN","DGMTDD3",51,0)
 Q
"RTN","DGMTDD3",52,0)
 ;
"RTN","DGMTDD3",53,0)
DEB ;Input Transform check for Net Worth Debts field (#2.05)
"RTN","DGMTDD3",54,0)
 D NET
"RTN","DGMTDD3",55,0)
 I $D(X),$P($G(^DGMT(408.21,DA,2)),U,4)<X W !?5,"'Debts' cannot exceed 'Other Property or Assets'." K X
"RTN","DGMTDD3",56,0)
 Q
"RTN","DGMTDD3",57,0)
 ;
"RTN","DGMTDD3",58,0)
NAM ;Output Transform for Patient Relation field (#.02)
"RTN","DGMTDD3",59,0)
 S Y=$$NAME^DGMTU1(Y)
"RTN","DGMTDD3",60,0)
 Q
"RTN","DGMTDD3",61,0)
 ;
"RTN","DGMTDD3",62,0)
EDHLP ;Executable Help for Educational Expenses field (#1.03)
"RTN","DGMTDD3",63,0)
 N DGPRI
"RTN","DGMTDD3",64,0)
 S DGPRI=+$P($G(^DGMT(408.21,DA,0)),U,2)
"RTN","DGMTDD3",65,0)
 I $P($G(^DGPR(408.12,DGPRI,0)),U,2)=1 D VET
"RTN","DGMTDD3",66,0)
 I "^3^4^5^6^"[(U_$P($G(^DGPR(408.12,DGPRI,0)),U,2)_U) D CHILD
"RTN","DGMTDD3",67,0)
 W !!?5,"Type a Dollar Amount between 0 and 99999, 2 Decimal Digits",!
"RTN","DGMTDD3",68,0)
 Q
"RTN","DGMTDD3",69,0)
 ;
"RTN","DGMTDD3",70,0)
VET ;Veteran's educational expenses
"RTN","DGMTDD3",71,0)
 W !?5,"Enter in this field amounts paid by the veteran during the previous",!?5,"calendar year for the veteran's educational expense.  Do not report"
"RTN","DGMTDD3",72,0)
 W !?5,"educational expenses of the veteran's children or spouse.  Educational",!?5,"expenses include tuition, fees, and books if the veteran is enrolled",!?5,"in a program of education."
"RTN","DGMTDD3",73,0)
 Q
"RTN","DGMTDD3",74,0)
 ;
"RTN","DGMTDD3",75,0)
CHILD ;Child's educational expenses
"RTN","DGMTDD3",76,0)
 W !?5,"Enter in this field the child's educational expenses if the child is",!?5,"enrolled in a program of education beyond the high school level."
"RTN","DGMTDD3",77,0)
 W !?5,"Educational expenses include amounts paid for tuition, fees and books."
"RTN","DGMTDD3",78,0)
 Q
"RTN","DGMTDD4")
0^9^B70665086
"RTN","DGMTDD4",1,0)
DGMTDD4 ;ALB/AMA - Individual Annual Income file (#408.21) Data Dictionary Calls, CON'T ; 10/3/07 1:44pm
"RTN","DGMTDD4",2,0)
 ;;5.3;Registration;**688**;Aug 13, 1993;Build 29
"RTN","DGMTDD4",3,0)
 ;
"RTN","DGMTDD4",4,0)
14 ;Executable Help for Total Employment Income (408.21/.14)
"RTN","DGMTDD4",5,0)
 Q:(X="?")
"RTN","DGMTDD4",6,0)
 I +$$MTVERS($G(DGMTI))=0 D  Q
"RTN","DGMTDD4",7,0)
 . ;Help text for pre-Feb 2005 Data Collection format
"RTN","DGMTDD4",8,0)
 . W !?8,"Enter in this field the annual amount of Total Income from Employment"
"RTN","DGMTDD4",9,0)
 . W !?8,"received during the previous calendar year.  This includes wages,"
"RTN","DGMTDD4",10,0)
 . W !?8,"salary, earnings and tips."
"RTN","DGMTDD4",11,0)
 . W !!?8,"A monthly amount can be entered with an '*' after it."
"RTN","DGMTDD4",12,0)
 . Q
"RTN","DGMTDD4",13,0)
 E  D
"RTN","DGMTDD4",14,0)
 . ;Help text for Feb 2005 Data Collection format
"RTN","DGMTDD4",15,0)
 . W !?8,"Enter in this field the gross income amount received from Employment"
"RTN","DGMTDD4",16,0)
 . W !?8,"during the previous calendar year.  This includes wages, bonuses,"
"RTN","DGMTDD4",17,0)
 . W !?8,"salary, earnings, and tips.  Exclude income from your farm, ranch,"
"RTN","DGMTDD4",18,0)
 . W !?8,"property, or business."
"RTN","DGMTDD4",19,0)
 . W !!?8,"A monthly amount can be entered with an '*' after it."
"RTN","DGMTDD4",20,0)
 Q
"RTN","DGMTDD4",21,0)
17 ;Executable Help for Net Income from Farm (408.21/.17)
"RTN","DGMTDD4",22,0)
 Q:(X="?")
"RTN","DGMTDD4",23,0)
 I +$$MTVERS($G(DGMTI))=0 D  Q
"RTN","DGMTDD4",24,0)
 . ;Help text for pre-Feb 2005 Data Collection format
"RTN","DGMTDD4",25,0)
 . W !?8,"Enter in this field the annual amount of All Other Income received"
"RTN","DGMTDD4",26,0)
 . W !?8,"during the previous calendar year."
"RTN","DGMTDD4",27,0)
 . W !!?8,"Business or Farm Income.  Net income from operation of a farm or other"
"RTN","DGMTDD4",28,0)
 . W !?8,"business is countable.  If a veteran reports this type of income, have"
"RTN","DGMTDD4",29,0)
 . W !?8,"the veteran complete VA Form 21-4165, Pension Claim Questionnaire for"
"RTN","DGMTDD4",30,0)
 . W !?8,"Farm Income, or VA Form 21-4185, Report of Income from Property or"
"RTN","DGMTDD4",31,0)
 . W !?8,"Business.  Subtract the veteran's business or farm expenses from gross"
"RTN","DGMTDD4",32,0)
 . W !?8,"income.  The result should be entered in this field.  If the veteran or"
"RTN","DGMTDD4",33,0)
 . W !?8,"veteran's spouse or child receives a salary from the business, it"
"RTN","DGMTDD4",34,0)
 . W !?8,"should be reported in the 'Total Employment Income' field.  Also, note"
"RTN","DGMTDD4",35,0)
 . W !?8,"that depreciation is not a deductible expense for VA purposes."
"RTN","DGMTDD4",36,0)
 . W !!?8,"A monthly amount can be entered with an '*' after it."
"RTN","DGMTDD4",37,0)
 . Q
"RTN","DGMTDD4",38,0)
 E  D
"RTN","DGMTDD4",39,0)
 . ;Help text for Feb 2005 Data Collection format
"RTN","DGMTDD4",40,0)
 . W !?8,"Enter in this field the net income amount from your farm, ranch,"
"RTN","DGMTDD4",41,0)
 . W !?8,"property, or business received during the previous calendar year."
"RTN","DGMTDD4",42,0)
 . W !!?8,"Business or Farm Income.  Net income from operation of a farm or other"
"RTN","DGMTDD4",43,0)
 . W !?8,"business is countable.  If a veteran reports this type of income, have"
"RTN","DGMTDD4",44,0)
 . W !?8,"the veteran complete VA Form 21-4165, Pension Claim Questionnaire for"
"RTN","DGMTDD4",45,0)
 . W !?8,"Farm Income, or VA Form 21-4185, Report of Income from Property or"
"RTN","DGMTDD4",46,0)
 . W !?8,"Business.  To identify the net income, subtract the veteran's business"
"RTN","DGMTDD4",47,0)
 . W !?8,"or farm expenses from the gross income derived from the business or"
"RTN","DGMTDD4",48,0)
 . W !?8,"farm.  The result should be entered in this field.  If the veteran or"
"RTN","DGMTDD4",49,0)
 . W !?8,"veteran's spouse or child receives a salary from the business, it"
"RTN","DGMTDD4",50,0)
 . W !?8,"should be reported in the 'Total Employment Income' field.  Also, note"
"RTN","DGMTDD4",51,0)
 . W !?8,"that depreciation is not a deductible expense for VA purposes."
"RTN","DGMTDD4",52,0)
 . W !!?8,"A monthly amount can be entered with an '*' after it."
"RTN","DGMTDD4",53,0)
 Q
"RTN","DGMTDD4",54,0)
8 ;Executable Help for Other Income Amounts (408.21/.08)
"RTN","DGMTDD4",55,0)
 Q:(X="?")
"RTN","DGMTDD4",56,0)
 I +$$MTVERS($G(DGMTI))=0 D  Q
"RTN","DGMTDD4",57,0)
 . ;Help text for pre-Feb 2005 Data Collection format
"RTN","DGMTDD4",58,0)
 . W !?8,"Enter in this field the annual amount of Social Security received"
"RTN","DGMTDD4",59,0)
 . W !?8,"during the previous calendar year.  Do not include SSI."
"RTN","DGMTDD4",60,0)
 . W !!?8,"A monthly amount can be entered with an '*' after it."
"RTN","DGMTDD4",61,0)
 . Q
"RTN","DGMTDD4",62,0)
 E  D
"RTN","DGMTDD4",63,0)
 . ;Help text for Feb 2005 Data Collection format
"RTN","DGMTDD4",64,0)
 . W !?8,"Enter in this field the annual amount of other income received during"
"RTN","DGMTDD4",65,0)
 . W !?8,"the previous calendar year.  This includes, but is not limited to,"
"RTN","DGMTDD4",66,0)
 . W !?8,"Social Security Retirement and/or Disability Income; compensation"
"RTN","DGMTDD4",67,0)
 . W !?8,"benefits such as VA disability, unemployment, retirement, and pension"
"RTN","DGMTDD4",68,0)
 . W !?8,"income; interest; and dividends.  Exclude welfare, Supplemental"
"RTN","DGMTDD4",69,0)
 . W !?8,"Security Income (SSI), or need-based payments from a governmental"
"RTN","DGMTDD4",70,0)
 . W !?8,"agency, profit from occasional sale of property, reinvested interest"
"RTN","DGMTDD4",71,0)
 . W !?8,"on IRAs.  See 38 CFR 3.272 for more information."
"RTN","DGMTDD4",72,0)
 . W !!?8,"A monthly amount can be entered with an '*' after it."
"RTN","DGMTDD4",73,0)
 Q
"RTN","DGMTDD4",74,0)
112 ;Executable Help for Total Non-Reimbursed Medical Expenses (408.21/1.12)
"RTN","DGMTDD4",75,0)
 Q:(X="?")
"RTN","DGMTDD4",76,0)
 I +$$MTVERS($G(DGMTI))=0 D  Q
"RTN","DGMTDD4",77,0)
 . ;Help text for pre-Feb 2005 Data Collection format
"RTN","DGMTDD4",78,0)
 . W !?8,"Enter the total amount of unreimbursed medical expenses paid by the"
"RTN","DGMTDD4",79,0)
 . W !?8,"veteran during the previous calendar year.  The expenses can be for the"
"RTN","DGMTDD4",80,0)
 . W !?8,"veteran or for persons that the veteran has a legal or moral obligation"
"RTN","DGMTDD4",81,0)
 . W !?8,"to support.  The expenses must actually have been paid by the veteran."
"RTN","DGMTDD4",82,0)
 . W !?8,"Reportable medical expenses include amounts paid for the following:"
"RTN","DGMTDD4",83,0)
 . W !?8,"fees of physicians, dentists, and other providers of health services;"
"RTN","DGMTDD4",84,0)
 . W !?8,"hospital and nursing home fees; medical insurance premiums (including"
"RTN","DGMTDD4",85,0)
 . W !?8,"the Medicare premium); drugs and medicines; eyeglasses; any other"
"RTN","DGMTDD4",86,0)
 . W !?8,"expenses that are reasonable related to medical care.  Do not list"
"RTN","DGMTDD4",87,0)
 . W !?8,"expenses which the veteran has paid if the veteran expects to receive"
"RTN","DGMTDD4",88,0)
 . W !?8,"reimbursement from insurance or some other source."
"RTN","DGMTDD4",89,0)
 . W !!?8,"By law, not all of the unreimbursed medical expenses paid by the veteran"
"RTN","DGMTDD4",90,0)
 . W !?8,"during the previous calendar year may be deducted from the total annual"
"RTN","DGMTDD4",91,0)
 . W !?8,"income.  The total amount of the unreimbursed medical expenses entered"
"RTN","DGMTDD4",92,0)
 . W !?8,"in this field will be automatically adjusted based upon the veteran's"
"RTN","DGMTDD4",93,0)
 . W !?8,"maximum annual pension amount and number of dependents."
"RTN","DGMTDD4",94,0)
 . Q
"RTN","DGMTDD4",95,0)
 E  D
"RTN","DGMTDD4",96,0)
 . ;Help text for Feb 2005 Data Collection format
"RTN","DGMTDD4",97,0)
 . W !?5,"Enter the total amount of non-reimbursed medical expenses paid by the"
"RTN","DGMTDD4",98,0)
 . W !?5,"veteran during the previous calendar year.  The expenses can be for the"
"RTN","DGMTDD4",99,0)
 . W !?5,"veteran or for persons that the veteran has a legal or moral obligation"
"RTN","DGMTDD4",100,0)
 . W !?5,"to support.  The expenses must actually have been paid by the veteran."
"RTN","DGMTDD4",101,0)
 . W !?5,"Reportable medical expenses include amounts paid for the following:"
"RTN","DGMTDD4",102,0)
 . W !?5,"fees of physicians, dentists, and other providers of health services;"
"RTN","DGMTDD4",103,0)
 . W !?5,"hospital and nursing home fees; medical insurance premiums (including"
"RTN","DGMTDD4",104,0)
 . W !?5,"the Medicare premium); drugs and medicines; eyeglasses; any other"
"RTN","DGMTDD4",105,0)
 . W !?5,"expenses that are reasonably related to medical care.  Do not list"
"RTN","DGMTDD4",106,0)
 . W !?5,"expenses which the veteran has paid if the veteran expects to receive"
"RTN","DGMTDD4",107,0)
 . W !?5,"reimbursement from insurance or some other source."
"RTN","DGMTDD4",108,0)
 . W !!?5,"By law, not all of the non-reimbursed medical expenses paid by the"
"RTN","DGMTDD4",109,0)
 . W !?5,"veteran during the previous calendar year may be deducted from the total"
"RTN","DGMTDD4",110,0)
 . W !?5,"annual income.  The total amount of the non-reimbursed medical expenses"
"RTN","DGMTDD4",111,0)
 . W !?5,"entered in this field will be automatically adjusted based upon the"
"RTN","DGMTDD4",112,0)
 . W !?5,"veteran's maximum annual pension amount and number of dependents."
"RTN","DGMTDD4",113,0)
 . W !!?5,"Intake clerks should remind the veteran to keep receipts for claimed"
"RTN","DGMTDD4",114,0)
 . W !?5,"medical expenses."
"RTN","DGMTDD4",115,0)
 Q
"RTN","DGMTDD4",116,0)
102 ;Executable Help for Funeral and Burial Expenses (408.21/1.02)
"RTN","DGMTDD4",117,0)
 Q:(X="?")
"RTN","DGMTDD4",118,0)
 I +$$MTVERS($G(DGMTI))=0 D  Q
"RTN","DGMTDD4",119,0)
 . ;Help text for pre-Feb 2005 Data Collection format
"RTN","DGMTDD4",120,0)
 . W !?8,"Enter in this field amounts paid by the veteran during the previous"
"RTN","DGMTDD4",121,0)
 . W !?8,"calendar year for funeral or burial expenses of the veteran's spouse or"
"RTN","DGMTDD4",122,0)
 . W !?8,"child.  Do not report amounts paid for funeral or burial expenses of"
"RTN","DGMTDD4",123,0)
 . W !?8,"other relatives such as parents, siblings, etc."
"RTN","DGMTDD4",124,0)
 . Q
"RTN","DGMTDD4",125,0)
 E  D
"RTN","DGMTDD4",126,0)
 . ;Help text for Feb 2005 Data Collection format
"RTN","DGMTDD4",127,0)
 . W !?8,"Enter in this field amounts paid by the veteran during the previous"
"RTN","DGMTDD4",128,0)
 . W !?8,"calendar year for funeral or burial expenses of the veteran's deceased"
"RTN","DGMTDD4",129,0)
 . W !?8,"spouse or child or for pre-paid funeral or burial expenses of the"
"RTN","DGMTDD4",130,0)
 . W !?8,"veteran, spouse, or any dependent child.  Do not report amounts paid"
"RTN","DGMTDD4",131,0)
 . W !?8,"for funeral or burial expenses of other relatives such as parents,"
"RTN","DGMTDD4",132,0)
 . W !?8,"siblings, etc."
"RTN","DGMTDD4",133,0)
 Q
"RTN","DGMTDD4",134,0)
MTVERS(DGMTI) ;Determine the Means Test Version Indicator
"RTN","DGMTDD4",135,0)
 I 'DGMTI Q 1
"RTN","DGMTDD4",136,0)
 N MTVERS
"RTN","DGMTDD4",137,0)
 S MTVERS=+$P($G(^DGMT(408.31,DGMTI,2)),"^",11)
"RTN","DGMTDD4",138,0)
 Q MTVERS
"RTN","DGMTDD5")
0^27^B43767578
"RTN","DGMTDD5",1,0)
DGMTDD5 ;ALB/AMA - Executable Help Calls, CON'T ; 8/1/08 1:13pm
"RTN","DGMTDD5",2,0)
 ;;5.3;Registration;**688**;Aug 13, 1993;Build 29
"RTN","DGMTDD5",3,0)
 ;
"RTN","DGMTDD5",4,0)
201 ;Executable Help for Cash, Amount in Bank Accounts (408.21/2.01)
"RTN","DGMTDD5",5,0)
 Q:(X="?")
"RTN","DGMTDD5",6,0)
 I +$$MTVERS^DGMTDD4($G(DGMTI))=0 D  Q
"RTN","DGMTDD5",7,0)
 . ;Help text for pre-Feb 2005 Data Collection format
"RTN","DGMTDD5",8,0)
 . W !?8,"Enter in this field cash and amounts in bank accounts.  This includes"
"RTN","DGMTDD5",9,0)
 . W !?8,"checking accounts, savings accounts, Individual Retirement Accounts,"
"RTN","DGMTDD5",10,0)
 . W !?8,"certificate of deposit, etc."
"RTN","DGMTDD5",11,0)
 . Q
"RTN","DGMTDD5",12,0)
 E  D
"RTN","DGMTDD5",13,0)
 . ;Help text for Feb 2005 Data Collection format
"RTN","DGMTDD5",14,0)
 . W !?8,"Enter in this field cash and amounts in bank accounts.  This includes"
"RTN","DGMTDD5",15,0)
 . W !?8,"checking accounts, savings accounts, Certificates of Deposit (CDs),"
"RTN","DGMTDD5",16,0)
 . W !?8,"Individual Retirement Accounts (IRAs), stocks and bonds, etc."
"RTN","DGMTDD5",17,0)
 Q
"RTN","DGMTDD5",18,0)
203 ;Executable Help for Land, Bldgs Less Mortgage (408.21/2.03)
"RTN","DGMTDD5",19,0)
 Q:(X="?")
"RTN","DGMTDD5",20,0)
 I +$$MTVERS^DGMTDD4($G(DGMTI))=0 D  Q
"RTN","DGMTDD5",21,0)
 . ;Help text for pre-Feb 2005 Data Collection format
"RTN","DGMTDD5",22,0)
 . W !?8,"Enter in this field the current value, less mortgages or other"
"RTN","DGMTDD5",23,0)
 . W !?8,"encumbrances, of any real property (land and buildings) owned."
"RTN","DGMTDD5",24,0)
 . W !?8,"Do not report the value of the veteran's primary residence."
"RTN","DGMTDD5",25,0)
 . W !?8,"If the veteran's primary residence is a multifamily dwelling, report"
"RTN","DGMTDD5",26,0)
 . W !?8,"the value of the building less the value of the unit occupied by"
"RTN","DGMTDD5",27,0)
 . W !?8,"the veteran.  If the veteran lives on a farm, report the value"
"RTN","DGMTDD5",28,0)
 . W !?8,"of the farm less the value of the house occupied by the veteran"
"RTN","DGMTDD5",29,0)
 . W !?8,"and a reasonable surrounding area.  NOTE:  Since the veteran's primary"
"RTN","DGMTDD5",30,0)
 . W !?8,"residence is not reported as an asset, the mortgage may NOT be reported"
"RTN","DGMTDD5",31,0)
 . W !?8,"as a debt.  In addition, the value of any other property owned by the"
"RTN","DGMTDD5",32,0)
 . W !?8,"veteran or spouse will be calculated in the same manner."
"RTN","DGMTDD5",33,0)
 . Q
"RTN","DGMTDD5",34,0)
 E  D
"RTN","DGMTDD5",35,0)
 . ;Help text for Feb 2005 Data Collection format
"RTN","DGMTDD5",36,0)
 . I $G(DGPRTY)="V" D  Q   ;Help text for the veteran
"RTN","DGMTDD5",37,0)
 . . W !?8,"Enter in this field the current value of land and buildings, less"
"RTN","DGMTDD5",38,0)
 . . W !?8,"mortgages and liens."
"RTN","DGMTDD5",39,0)
 . . W !!?8,"Do not report the value of the veteran's primary residence.  If the"
"RTN","DGMTDD5",40,0)
 . . W !?8,"veteran's primary residence is a multifamily dwelling, report the value"
"RTN","DGMTDD5",41,0)
 . . W !?8,"of the building less the value of the unit occupied by the veteran.  If"
"RTN","DGMTDD5",42,0)
 . . W !?8,"the veteran lives on a farm, report the value of the farm less the"
"RTN","DGMTDD5",43,0)
 . . W !?8,"value of the house occupied by the veteran and a reasonable surrounding"
"RTN","DGMTDD5",44,0)
 . . W !?8,"area.  The size of the 'reasonable lot area' that can be excluded from"
"RTN","DGMTDD5",45,0)
 . . W !?8,"net worth consideration is determined by the degree to which the"
"RTN","DGMTDD5",46,0)
 . . W !?8,"property is connected to the dwelling and the typical size of lots in"
"RTN","DGMTDD5",47,0)
 . . W !?8,"the immediate area.  Contiguous land which is closely connected to the"
"RTN","DGMTDD5",48,0)
 . . W !?8,"dwelling in terms of use and which does not greatly exceed the"
"RTN","DGMTDD5",49,0)
 . . W !?8,"customary size of lots in the immediate area is excluded from net worth"
"RTN","DGMTDD5",50,0)
 . . W !?8,"consideration."
"RTN","DGMTDD5",51,0)
 . . W !!?8,"NOTE:  Since the veteran's primary residence is not reported as an"
"RTN","DGMTDD5",52,0)
 . . W !?8,"asset, the mortgage may NOT be reported as a debt.  In addition, the"
"RTN","DGMTDD5",53,0)
 . . W !?8,"value of any other property owned by the veteran, spouse, or dependent"
"RTN","DGMTDD5",54,0)
 . . W !?8,"children will be calculated in the same manner."
"RTN","DGMTDD5",55,0)
 . E  D   ;Help text for the dependents (spouse or child)
"RTN","DGMTDD5",56,0)
 . . W !?8,"Enter in this field the current value of land and buildings, less"
"RTN","DGMTDD5",57,0)
 . . W !?8,"mortgages and liens."
"RTN","DGMTDD5",58,0)
 . . W !!?8,"Do not report the value of the person's primary residence.  If the"
"RTN","DGMTDD5",59,0)
 . . W !?8,"person's primary residence is a multifamily dwelling, report the value"
"RTN","DGMTDD5",60,0)
 . . W !?8,"of the building less the value of the unit occupied by the person.  If"
"RTN","DGMTDD5",61,0)
 . . W !?8,"the person lives on a farm, report the value of the farm less the"
"RTN","DGMTDD5",62,0)
 . . W !?8,"value of the house occupied by the person and a reasonable surrounding"
"RTN","DGMTDD5",63,0)
 . . W !?8,"area.  The size of the 'reasonable lot area' that can be excluded from"
"RTN","DGMTDD5",64,0)
 . . W !?8,"net worth consideration is determined by the degree to which the"
"RTN","DGMTDD5",65,0)
 . . W !?8,"property is connected to the dwelling and the typical size of lots in"
"RTN","DGMTDD5",66,0)
 . . W !?8,"the immediate area.  Contiguous land which is closely connected to the"
"RTN","DGMTDD5",67,0)
 . . W !?8,"dwelling in terms of use and which does not greatly exceed the"
"RTN","DGMTDD5",68,0)
 . . W !?8,"customary size of lots in the immediate area is excluded from net worth"
"RTN","DGMTDD5",69,0)
 . . W !?8,"consideration."
"RTN","DGMTDD5",70,0)
 . . W !!?8,"NOTE:  Since the person's primary residence is not reported as an"
"RTN","DGMTDD5",71,0)
 . . W !?8,"asset, the mortgage may NOT be reported as a debt.  In addition, the"
"RTN","DGMTDD5",72,0)
 . . W !?8,"value of any other property owned by the veteran, spouse, or dependent"
"RTN","DGMTDD5",73,0)
 . . W !?8,"children will be calculated in the same manner."
"RTN","DGMTDD5",74,0)
 Q
"RTN","DGMTDD5",75,0)
204 ;Executable Help for Other Property or Assets (408.21/2.04)
"RTN","DGMTDD5",76,0)
 Q:(X="?")
"RTN","DGMTDD5",77,0)
 I +$$MTVERS^DGMTDD4($G(DGMTI))=0 D  Q
"RTN","DGMTDD5",78,0)
 . ;Help text for pre-Feb 2005 Data Collection format
"RTN","DGMTDD5",79,0)
 . W !?8,"Enter in this field the current market value of other property owned."
"RTN","DGMTDD5",80,0)
 . W !?8,"However, do not report the value of household effects or vehicles"
"RTN","DGMTDD5",81,0)
 . W !?8,"regularly used for family transportation.  Other property may include"
"RTN","DGMTDD5",82,0)
 . W !?8,"an art or stamp collection."
"RTN","DGMTDD5",83,0)
 . Q
"RTN","DGMTDD5",84,0)
 E  D
"RTN","DGMTDD5",85,0)
 . ;Help text for Feb 2005 Data Collection format
"RTN","DGMTDD5",86,0)
 . W !?8,"Enter in this field the current market value of other property or"
"RTN","DGMTDD5",87,0)
 . W !?8,"assets that are owned, minus the amount that is owed on these items."
"RTN","DGMTDD5",88,0)
 . W !?8,"Include the value of farm, ranch, or business assets.  However, do not"
"RTN","DGMTDD5",89,0)
 . W !?8,"report the value of household effects or vehicles regularly used for"
"RTN","DGMTDD5",90,0)
 . W !?8,"family transportation.  Assets may include art, rare coins, or"
"RTN","DGMTDD5",91,0)
 . W !?8,"collectibles."
"RTN","DGMTDD5",92,0)
 Q
"RTN","DGMTDD5",93,0)
133 ;Executable Help for E-Mail Address (2/.133)
"RTN","DGMTDD5",94,0)
 W !?8,"Enter the applicant's email address [3-50 characters].  The entry must"
"RTN","DGMTDD5",95,0)
 W !?8,"contain at least 3 characters, then have an '@' in the format.  After"
"RTN","DGMTDD5",96,0)
 W !?8,"the '@', the entry must contain at least 1 character, then have a '.' in"
"RTN","DGMTDD5",97,0)
 W !?8,"the format.  After the '.', then the entry must contain at least 1"
"RTN","DGMTDD5",98,0)
 W !?8,"character.  For example:",!?16,"lastnamefirstname@yahoo.com"
"RTN","DGMTDD5",99,0)
 W !?16,"lastname@irs.gov",!?16,"name@college.org"
"RTN","DGMTDD5",100,0)
 Q
"RTN","DGMTHLP")
0^31^B15434271
"RTN","DGMTHLP",1,0)
DGMTHLP ;ALB/GTS - Means Test Help processing code; 12/15/2005 ; 8/1/08 1:49pm
"RTN","DGMTHLP",2,0)
 ;;5.3;Registration;**688**;AUG 13, 1993;Build 29
"RTN","DGMTHLP",3,0)
 ;
"RTN","DGMTHLP",4,0)
CHLDINNW ; * Displays help for CHILD HAD INCOME (.11) in INCOME RELATION (408.22)
"RTN","DGMTHLP",5,0)
 N MTVER,MTIEN S MTVER=0
"RTN","DGMTHLP",6,0)
 S MTIEN=+$P($G(^DGMT(408.22,DA,"MT")),"^",1)
"RTN","DGMTHLP",7,0)
 I MTIEN S MTVER=+$P($G(^DGMT(408.31,MTIEN,2)),"^",11)
"RTN","DGMTHLP",8,0)
 W !
"RTN","DGMTHLP",9,0)
 I X="?" DO
"RTN","DGMTHLP",10,0)
 . I MTVER=0 W !,"Enter in this field whether the child had income last calendar year."
"RTN","DGMTHLP",11,0)
 . I MTVER=1 DO
"RTN","DGMTHLP",12,0)
 . . W !,"Enter in this field whether the child had earned or unearned income"
"RTN","DGMTHLP",13,0)
 . . W !,"and/or net worth last calendar year."
"RTN","DGMTHLP",14,0)
 I X="??" DO
"RTN","DGMTHLP",15,0)
 . I MTVER=0 DO
"RTN","DGMTHLP",16,0)
 . . W !,"Enter in this field whether the child had income last calendar year."
"RTN","DGMTHLP",17,0)
 . . W !,"Income payable to another person as guardian or custodian of the"
"RTN","DGMTHLP",18,0)
 . . W !,"child is considered to be the child's income."
"RTN","DGMTHLP",19,0)
 . I MTVER=1 DO
"RTN","DGMTHLP",20,0)
 . . W !,"Enter in this field whether the child had earned or unearned income"
"RTN","DGMTHLP",21,0)
 . . W !,"and/or net worth last calendar year.  Income payable to another person"
"RTN","DGMTHLP",22,0)
 . . W !,"as guardian or custodian of the child is considered to be the child's income."
"RTN","DGMTHLP",23,0)
 Q
"RTN","DGMTHLP",24,0)
 ;
"RTN","DGMTHLP",25,0)
INNWAVAL ; * Displays help for INCOME AVAILABLE TO YOU (.12) in INCOME RELATION (408.22)
"RTN","DGMTHLP",26,0)
 N MTVER,MTIEN,DGRDVAR S MTVER=0
"RTN","DGMTHLP",27,0)
 S MTIEN=+$P($G(^DGMT(408.22,DA,"MT")),"^",1)
"RTN","DGMTHLP",28,0)
 I MTIEN S MTVER=+$P($G(^DGMT(408.31,MTIEN,2)),"^",11)
"RTN","DGMTHLP",29,0)
 W !
"RTN","DGMTHLP",30,0)
 I X="?" DO
"RTN","DGMTHLP",31,0)
 . I MTVER=0 DO
"RTN","DGMTHLP",32,0)
 . . W !,"Enter in this field whether the child's income was available to the"
"RTN","DGMTHLP",33,0)
 . . W !,"veteran last calendar year."
"RTN","DGMTHLP",34,0)
 . I MTVER=1 DO
"RTN","DGMTHLP",35,0)
 . . W !,"Enter in this field whether the child's income and/or net worth were"
"RTN","DGMTHLP",36,0)
 . . W !,"available to the veteran last calendar year."
"RTN","DGMTHLP",37,0)
 I X="??" DO
"RTN","DGMTHLP",38,0)
 . I MTVER=0 DO
"RTN","DGMTHLP",39,0)
 . . W !,"Enter in this field whether the child's income was available to"
"RTN","DGMTHLP",40,0)
 . . W !,"the veteran last calendar year.  The child's income is deemed to be"
"RTN","DGMTHLP",41,0)
 . . W !,"available if it can be used to pay expenses of the veteran's household."
"RTN","DGMTHLP",42,0)
 . . W !,"For example, a Social Security check payable to the veteran's estranged"
"RTN","DGMTHLP",43,0)
 . . W !,"spouse as custodian of the child is probably not available to the"
"RTN","DGMTHLP",44,0)
 . . W !,"veteran.  On the other hand, a Social Security check on behalf of the child"
"RTN","DGMTHLP",45,0)
 . . W !,"payable to someone living in the veteran's household is probably available."
"RTN","DGMTHLP",46,0)
 . I MTVER=1 DO
"RTN","DGMTHLP",47,0)
 . . W !,"Enter in this field whether the child's income and/or net worth were"
"RTN","DGMTHLP",48,0)
 . . W !,"available to the veteran last calendar year.  The child's income and/or"
"RTN","DGMTHLP",49,0)
 . . W !,"net worth are almost always determined to be available.  A child's income"
"RTN","DGMTHLP",50,0)
 . . W !,"and/or net worth may be excluded when the child is not in the veteran's"
"RTN","DGMTHLP",51,0)
 . . W !,"custody and the veteran does not have direct access to the child's income"
"RTN","DGMTHLP",52,0)
 . . W !,"or when the veteran has custody, but he/she can prove that the income is not"
"RTN","DGMTHLP",53,0)
 . . W !,"available to him/her (e.g. a trust that the veteran doesn't have access to)"
"RTN","DGMTHLP",54,0)
 . . W !,"OR social security that's going to a separated spouse."
"RTN","DGMTHLP",55,0)
 . I $G(DA) W !,"Enter RETURN to continue:" R DGRDVAR:DTIME W !
"RTN","DGMTHLP",56,0)
 Q
"RTN","DGMTR")
0^8^B58184426
"RTN","DGMTR",1,0)
DGMTR ;ALB/RMO,CAW,SCG,AEG,SCG,AEG,LBD - Check Means Test Requirements ; 10/15/08 4:08pm
"RTN","DGMTR",2,0)
 ;;5.3;Registration;**45,93,114,137,141,147,177,182,146,305,326,314,344,402,426,456,495,672,688**;Aug 13, 1993;Build 29
"RTN","DGMTR",3,0)
 ;A patient requires a means test under the following conditions:
"RTN","DGMTR",4,0)
 ;  - Primary Eligibility is NSC OR patient is SC 0% non-compensable
"RTN","DGMTR",5,0)
 ;  - who is NOT receiving disability retirement from the military
"RTN","DGMTR",6,0)
 ;  - who is NOT eligible for medicaid
"RTN","DGMTR",7,0)
 ;  - who is NOT on a DOM ward
"RTN","DGMTR",8,0)
 ;  - who has NOT been means tested in the past year
"RTN","DGMTR",9,0)
 ;  - who is NOT a Purple Heart recipient
"RTN","DGMTR",10,0)
 ; Input  -- DFN     Patient IEN
"RTN","DGMTR",11,0)
 ;           DGADDF  Means Test Add Flag  (Optional- default none)
"RTN","DGMTR",12,0)
 ;                   (1 if using the 'Add a New Means Test' option)
"RTN","DGMTR",13,0)
 ;           DGMSGF  Means Test Msg Flag  (Optional- default none)
"RTN","DGMTR",14,0)
 ;                   (1 to suppress messages)
"RTN","DGMTR",15,0)
 ; Output -- DGREQF  Means Test Require Flag
"RTN","DGMTR",16,0)
 ;                   (1 if required and 0 if not required)
"RTN","DGMTR",17,0)
 ;           DGDOM1  DOM Patient Flag (defined and set to 1 if
"RTN","DGMTR",18,0)
 ;                               patient currently on a DOM ward)
"RTN","DGMTR",19,0)
 ;           DGNOCOPF = 1 to suppress copay test prompt 0 otherwise
"RTN","DGMTR",20,0)
 ;                      used in CP^DG10.  Killed there as well.
"RTN","DGMTR",21,0)
 ;           If NOT using the 'Add a New Means Test' option,
"RTN","DGMTR",22,0)
 ;           a REQUIRED date of test will be added for the
"RTN","DGMTR",23,0)
 ;           patient if it is required.
"RTN","DGMTR",24,0)
 ;           If a means test is required and the current
"RTN","DGMTR",25,0)
 ;           status is NO LONGER REQUIRED, the last date of
"RTN","DGMTR",26,0)
 ;           test and current means test status will be
"RTN","DGMTR",27,0)
 ;           updated to REQUIRED.
"RTN","DGMTR",28,0)
 ;           If a means test is no longer required the
"RTN","DGMTR",29,0)
 ;           last date of test and the current means test
"RTN","DGMTR",30,0)
 ;           status will also be updated to NO LONGER REQUIRED.
"RTN","DGMTR",31,0)
EN N DGCS,DGDOM,DGMT0,DGMTI,DGMTYPT,OLD,DGRGAUTO,DGQSENT,DGMTLTD,DGMDOD,DGMTDT
"RTN","DGMTR",32,0)
 ;DG*5.3*146 change to exit if during patient merge process
"RTN","DGMTR",33,0)
 Q:$G(VAFCA08)=1
"RTN","DGMTR",34,0)
 ;DGMTCOR is needed if uploading copay test
"RTN","DGMTR",35,0)
 I $G(RXPRIME)'="DGMTU4" N DGMTCOR
"RTN","DGMTR",36,0)
 S (DGQSENT,DGREQF)=0,(OLD,DGMTYPT)=1
"RTN","DGMTR",37,0)
 I $D(^DPT(DFN,.36)) S X=^(.36) D
"RTN","DGMTR",38,0)
 . I $P($G(^DIC(8,+X,0)),"^",9)=5!($$SC(DFN)) S DGREQF=1
"RTN","DGMTR",39,0)
 . I $P(X,"^",12)=1 S DGREQF=0 ;new field, DG 672
"RTN","DGMTR",40,0)
 . I $P(X,"^",13)=1 S DGREQF=0 ;new field, DG 672 
"RTN","DGMTR",41,0)
 S (DGMTI,DGMT0)="",DGMTI=+$$LST^DGMTU(DFN)
"RTN","DGMTR",42,0)
 S:DGMTI DGMT0=$G(^DGMT(408.31,DGMTI,0))
"RTN","DGMTR",43,0)
 ;Added with DG*5.3*344
"RTN","DGMTR",44,0)
 S:DGMTI DGMTDT=$P(DGMT0,U)
"RTN","DGMTR",45,0)
 S DGMDOD=$P($G(^DPT(DFN,.35)),U)
"RTN","DGMTR",46,0)
 I 'DGMTI,$G(DGMDOD) D EN^DGMTCOR S DGREQF=0 Q
"RTN","DGMTR",47,0)
 I DGREQF S:$G(^DPT(DFN,.38)) DGREQF=0
"RTN","DGMTR",48,0)
 I DGREQF D DOM S:$G(DGDOM) DGREQF=0
"RTN","DGMTR",49,0)
 S DGCS=$P(DGMT0,"^",3)
"RTN","DGMTR",50,0)
 S DGMTLTD=+DGMT0,DGNOCOPF=0
"RTN","DGMTR",51,0)
 I +$G(DGMDOD) S DGNOCOPF=1
"RTN","DGMTR",52,0)
 I DGCS S OLD=$$OLD^DGMTU4(+DGMT0)
"RTN","DGMTR",53,0)
 ;Purple Heart Recipient ;brm 10/02/00 added 1 line below
"RTN","DGMTR",54,0)
 I $P($G(^DPT(DFN,.53)),U)="Y" S DGREQF=0
"RTN","DGMTR",55,0)
 D
"RTN","DGMTR",56,0)
 .I DGREQF,DGCS=3,'OLD D REQ Q
"RTN","DGMTR",57,0)
 .I DGREQF,'$G(DGADDF),((DGCS=6)!(DGCS=2)),$P(DGMT0,U,11)=1,DGMTLTD>2991005 S DGREQF=0,DGNOCOPF=1 Q
"RTN","DGMTR",58,0)
 .; next line added 2/19/02 - DG*5.3*426
"RTN","DGMTR",59,0)
 .I DGREQF,'$G(DGADDF),$G(DGCS)=6,+$P(DGMT0,U,14),+$P(DGMT0,U,11) S DGREQF=0,DGNOCOPF=1 Q
"RTN","DGMTR",60,0)
 .I DGREQF,'$G(DGADDF),(('DGCS)!(OLD)),'$G(DGMDOD) D ADD Q
"RTN","DGMTR",61,0)
 .I 'DGREQF,DGCS,DGCS'=3,'$G(DGDOM),'$G(DGMDOD),'+$G(IVMZ10F) D NOL Q
"RTN","DGMTR",62,0)
 ;be sure to check whether or not patient is subject to RX copay!
"RTN","DGMTR",63,0)
 D EN^DGMTCOR
"RTN","DGMTR",64,0)
 Q
"RTN","DGMTR",65,0)
 ;Check if patient is in a DOM
"RTN","DGMTR",66,0)
 ;  call to DOM checks if patient currently on a DOM ward
"RTN","DGMTR",67,0)
 ;                                     (called from EN)
"RTN","DGMTR",68,0)
 ;  call to DOM1 checks if patient on a DOM ward for a specific date
"RTN","DGMTR",69,0)
 ;    before call to DOM1 - N VAINDT,VADMVT,DGDOM,DGDOM1
"RTN","DGMTR",70,0)
 ;                          S VAINDT=specific date
"RTN","DGMTR",71,0)
 ;                          S DFN=Patient IEN
"RTN","DGMTR",72,0)
 ;                 output - DGDOM & DGDOM1 (defined and set to 1 if
"RTN","DGMTR",73,0)
 ;                          patient on a DOM ward for specific date)
"RTN","DGMTR",74,0)
DOM N VAINDT,VADMVT
"RTN","DGMTR",75,0)
DOM1 D ADM^VADPT2
"RTN","DGMTR",76,0)
 I VADMVT,$P($G(^DG(43,1,0)),"^",21),$D(^DIC(42,+$P($G(^DGPM(VADMVT,0)),"^",6),0)),$P(^(0),"^",3)="D" S (DGDOM,DGDOM1)=1
"RTN","DGMTR",77,0)
 Q
"RTN","DGMTR",78,0)
SC(DFN) ;Check if patient is SC 0% non-compensable
"RTN","DGMTR",79,0)
 ; Input  -- DFN     Patient IEN
"RTN","DGMTR",80,0)
 ; Output -- 1=Yes and 0=No
"RTN","DGMTR",81,0)
 ;     No if:
"RTN","DGMTR",82,0)
 ;        No total annual VA check amount
"RTN","DGMTR",83,0)
 ;        POW STATUS INDICATOR is yes
"RTN","DGMTR",84,0)
 ;        Secondary Eligibility is one of the following:
"RTN","DGMTR",85,0)
 ;           A&A, NSC, VA PENSION
"RTN","DGMTR",86,0)
 ;           HOUSEBOUND, MEXICAN BORDER WAR, WWI, POW
"RTN","DGMTR",87,0)
 N DG,DGE,DGF,Y
"RTN","DGMTR",88,0)
 S Y=0
"RTN","DGMTR",89,0)
 ;Primary eligibility is SC LESS THAN 50%
"RTN","DGMTR",90,0)
 I $D(^DPT(DFN,.36)),$P($G(^DIC(8,+^(.36),0)),"^",9)=3 S Y=1
"RTN","DGMTR",91,0)
 G:'Y SCQ
"RTN","DGMTR",92,0)
 ;Service connected percentage is 0
"RTN","DGMTR",93,0)
 I $P($G(^DPT(DFN,.3)),"^",2)'=0 S Y=0 G SCQ
"RTN","DGMTR",94,0)
 ;No Total annual VA check amount
"RTN","DGMTR",95,0)
 I $P($G(^DPT(DFN,.362)),"^",20) S Y=0 G SCQ
"RTN","DGMTR",96,0)
 ;POW STATUS INDICATOR
"RTN","DGMTR",97,0)
 I $P($G(^DPT(DFN,.52)),"^",5)="Y" S Y=0 G SCQ
"RTN","DGMTR",98,0)
 ;Purple Heart Indicator
"RTN","DGMTR",99,0)
 I $P($G(^DPT(DFN,.53)),"^")="Y" S Y=0 G SCQ
"RTN","DGMTR",100,0)
 ;Secondary Eligibility
"RTN","DGMTR",101,0)
 F DG=2,4,15:1:18 S DGE(DG)=""
"RTN","DGMTR",102,0)
 S DG=0 F  S DG=$O(^DPT(DFN,"E","B",DG)) Q:'DG  D SELIG I DGF,$D(DGE(+DGF)) S Y=0 Q
"RTN","DGMTR",103,0)
SCQ Q +$G(Y)
"RTN","DGMTR",104,0)
ADD ;Add a required means test
"RTN","DGMTR",105,0)
 N DGMTA,DGMTACT,DGMTDT,DGMTI,DGMTP,ERROR
"RTN","DGMTR",106,0)
 W:'$G(DGMSGF) !,"MEANS TEST REQUIRED"
"RTN","DGMTR",107,0)
 S DGMTACT="ADD" D PRIOR^DGMTEVT
"RTN","DGMTR",108,0)
 S DGMTDT=DT D ADD^DGMTA
"RTN","DGMTR",109,0)
 I DGMTI>0 S DGMTYPT=1 D
"RTN","DGMTR",110,0)
 .N DATA S DATA(.03)=$$GETSTAT^DGMTH("R",1) I $$UPD^DGENDBS(408.31,DGMTI,.DATA)
"RTN","DGMTR",111,0)
 .D GETINCOM^DGMTU4(DFN,DT)
"RTN","DGMTR",112,0)
 .D QUE
"RTN","DGMTR",113,0)
 I $G(IVMZ10)'="UPLOAD IN PROGRESS",'$$OPEN^IVMCQ2(DFN),'$$SENT^IVMCQ2(DFN) D QRYQUE2^IVMCQ2(DFN,$G(DUZ),0,$G(XQY)) S DGQSENT=1 I '$D(ZTQUEUED),'$G(DGMSGF) W !!,"Financial query queued to be sent to HEC..."
"RTN","DGMTR",114,0)
 Q
"RTN","DGMTR",115,0)
REQ ;Update means test status to REQUIRED
"RTN","DGMTR",116,0)
 N DGMTA,AUTOCOMP,DGMTE,ERROR
"RTN","DGMTR",117,0)
 ;may have set prior MT for means test upload
"RTN","DGMTR",118,0)
 I $G(MTPRIME)'="DGMTU4" N DGMTP,DGMTACT S DGMTACT="STA" D PRIOR^DGMTEVT
"RTN","DGMTR",119,0)
 S AUTOCOMP=$$AUTOCOMP(DGMTI)
"RTN","DGMTR",120,0)
 ;if a test were auto-completed, don't want another being added inadvertently
"RTN","DGMTR",121,0)
 I AUTOCOMP,$G(DGADDF) S DGADDF=0
"RTN","DGMTR",122,0)
 I AUTOCOMP S DGCS=$P($G(^DGMT(408.31,DGMTI,0)),"^",3)
"RTN","DGMTR",123,0)
 I $G(IVMZ10)'="UPLOAD IN PROGRESS",'AUTOCOMP,'$$OPEN^IVMCQ2(DFN),'$$SENT^IVMCQ2(DFN) D QRYQUE2^IVMCQ2(DFN,$G(DUZ),0,$G(XQY)) S DGQSENT=1 I '$D(ZTQUEUED),'$G(DGMSGF) W !!,"Financial query queued to be sent to HEC..."
"RTN","DGMTR",124,0)
 I ('AUTOCOMP),('$G(DGMSGF)) W !,"MEANS TEST REQUIRED"
"RTN","DGMTR",125,0)
 I (AUTOCOMP),('$G(DGMSGF)) W !,"CURRENT MEANS TEST STATUS IS ",$$GETNAME^DGMTH(DGCS)
"RTN","DGMTR",126,0)
 S DGMTYPT=1
"RTN","DGMTR",127,0)
 D QUE
"RTN","DGMTR",128,0)
 Q
"RTN","DGMTR",129,0)
AUTOCOMP(DGMTI) ;
"RTN","DGMTR",130,0)
 ;Will either automatically complete the test (RX copay or means test) 
"RTN","DGMTR",131,0)
 ;based on the Test Determined Status, or will change the status to
"RTN","DGMTR",132,0)
 ;Required for means tests or Incomplete for Rx copay tests
"RTN","DGMTR",133,0)
 ;Input:
"RTN","DGMTR",134,0)
 ;  DGMTI - the ien of the test
"RTN","DGMTR",135,0)
 ;Output:
"RTN","DGMTR",136,0)
 ;  Function value - 1 if the test was completed, 0 otherwise
"RTN","DGMTR",137,0)
 N NODE0,NODE2,DATA,RET,LINKIEN,DGINR,DGINI,ERROR,CODE,TYPE,DFN,TDATE
"RTN","DGMTR",138,0)
 S RET=0
"RTN","DGMTR",139,0)
 Q:'$G(DGMTI) RET
"RTN","DGMTR",140,0)
 S NODE0=$G(^DGMT(408.31,DGMTI,0))
"RTN","DGMTR",141,0)
 Q:(NODE0="") RET
"RTN","DGMTR",142,0)
 S TYPE=$P(NODE0,"^",19)
"RTN","DGMTR",143,0)
 S DFN=$P(NODE0,"^",2)
"RTN","DGMTR",144,0)
 S TDATE=+NODE0
"RTN","DGMTR",145,0)
 S NODE2=$G(^DGMT(408.31,DGMTI,2))
"RTN","DGMTR",146,0)
 ;get test-determined status code
"RTN","DGMTR",147,0)
 S CODE=$$GETCODE^DGMTH($P(NODE2,"^",3))
"RTN","DGMTR",148,0)
 ;if means test
"RTN","DGMTR",149,0)
 I TYPE=1 D
"RTN","DGMTR",150,0)
 .S DATA(.03)=$$GETSTAT^DGMTH("R",1),DATA(.17)=""
"RTN","DGMTR",151,0)
 .I (CODE'=""),"ACGP"[CODE D
"RTN","DGMTR",152,0)
 ..S RET=1
"RTN","DGMTR",153,0)
 ..S DATA(.03)=$P(NODE2,"^",3)
"RTN","DGMTR",154,0)
 ..;determine status if there is a hardship
"RTN","DGMTR",155,0)
 ..I $P(NODE0,"^",20) D
"RTN","DGMTR",156,0)
 ...S DATA(.03)=$$GETSTAT^DGMTH($S(CODE="P":"P",CODE="C"&($P(NODE0,U,27)>$P(NODE0,U,12)):"G",1:"A"),1)
"RTN","DGMTR",157,0)
 .I (CODE="")!(CODE'=""&"ACGP"'[CODE) D
"RTN","DGMTR",158,0)
 ..; Check for another test in the current year and convert IAI records, if needed
"RTN","DGMTR",159,0)
 ..S CONVRT=$$VRCHKUP^DGMTU2(1,,TDATE)
"RTN","DGMTR",160,0)
 ..S DATA(2.11)=1
"RTN","DGMTR",161,0)
 ;RX copay test
"RTN","DGMTR",162,0)
 I TYPE=2 D
"RTN","DGMTR",163,0)
 .S DATA(.03)=$$GETSTAT^DGMTH("I",2),DATA(.17)=""
"RTN","DGMTR",164,0)
 .I (CODE'=""),"EM"[CODE D
"RTN","DGMTR",165,0)
 ..S RET=1
"RTN","DGMTR",166,0)
 ..S DATA(.03)=$P(NODE2,"^",3)
"RTN","DGMTR",167,0)
 .I (CODE="")!(CODE'=""&"EM"'[CODE) D
"RTN","DGMTR",168,0)
 ..; Check for another test in the current year and convert IAI records, if needed
"RTN","DGMTR",169,0)
 ..S CONVRT=$$VRCHKUP^DGMTU2(2,,TDATE)
"RTN","DGMTR",170,0)
 ..S DATA(2.11)=1
"RTN","DGMTR",171,0)
 I '$$UPD^DGENDBS(408.31,DGMTI,.DATA,.ERROR) W:'$G(DGMSGF) ERROR
"RTN","DGMTR",172,0)
 ;restore the pointers from the Income Relation file (408.22) to this
"RTN","DGMTR",173,0)
 ;test, using the linked test
"RTN","DGMTR",174,0)
 S LINKIEN=$P(NODE2,"^",6)
"RTN","DGMTR",175,0)
 I LINKIEN D
"RTN","DGMTR",176,0)
 .S DGINI=0 F  S DGINI=$O(^DGMT(408.22,"AMT",LINKIEN,DFN,DGINI)) Q:'DGINI  S DGINR=$O(^DGMT(408.22,"AMT",LINKIEN,DFN,DGINI,"")) I $P($G(^DGMT(408.22,+DGINR,"MT")),"^")]"" D
"RTN","DGMTR",177,0)
 ..K DATA
"RTN","DGMTR",178,0)
 ..S DATA(31)=DGMTI
"RTN","DGMTR",179,0)
 ..I $$UPD^DGENDBS(408.22,+DGINR,.DATA)
"RTN","DGMTR",180,0)
 D GETINCOM^DGMTU4(DFN,TDATE)
"RTN","DGMTR",181,0)
 Q RET
"RTN","DGMTR",182,0)
NOL ;Update means test status to NO LONGER REQUIRED
"RTN","DGMTR",183,0)
 N DGMTA,DGINI,DGINR,DGMTDT,DATA
"RTN","DGMTR",184,0)
 W:'$G(DGMSGF) !,"MEANS TEST NO LONGER REQUIRED"
"RTN","DGMTR",185,0)
 ;may have set prior MT for means test upload
"RTN","DGMTR",186,0)
 I $G(MTPRIME)'="DGMTU4" N DGMTP,DGMTACT S DGMTACT="STA" D PRIOR^DGMTEVT
"RTN","DGMTR",187,0)
 ;save the Test Determined Status
"RTN","DGMTR",188,0)
 D SAVESTAT^DGMTU4(DGMTI)
"RTN","DGMTR",189,0)
 S DATA(.03)=3,DATA(.17)=DT I $$UPD^DGENDBS(408.31,DGMTI,.DATA)
"RTN","DGMTR",190,0)
 D QUE
"RTN","DGMTR",191,0)
 ;create a Rx copay test based on MT if needed
"RTN","DGMTR",192,0)
 D COPYRX^DGMTR1(DFN,DGMTI)
"RTN","DGMTR",193,0)
NOLQ Q
"RTN","DGMTR",194,0)
SET ;Set Cross-reference
"RTN","DGMTR",195,0)
 N D0,DA,DIV,DGIX,X
"RTN","DGMTR",196,0)
 S DA=DGIEN,X=DGVAL,DGIX=0
"RTN","DGMTR",197,0)
 F  S DGIX=$O(^DD(DGFL,DGFLD,1,DGIX)) Q:'DGIX  X ^(DGIX,1) S X=DGVAL
"RTN","DGMTR",198,0)
 Q
"RTN","DGMTR",199,0)
KILL ;Kill Cross-reference
"RTN","DGMTR",200,0)
 N D0,DA,DIV,DGIX,X
"RTN","DGMTR",201,0)
 S DA=DGIEN,X=DGVAL,DGIX=0
"RTN","DGMTR",202,0)
 F  S DGIX=$O(^DD(DGFL,DGFLD,1,DGIX)) Q:'DGIX  X ^(DGIX,2) S X=DGVAL
"RTN","DGMTR",203,0)
 Q
"RTN","DGMTR",204,0)
QUE ;Queue means test event driver
"RTN","DGMTR",205,0)
 D AFTER^DGMTEVT
"RTN","DGMTR",206,0)
 S ZTDESC="MEANS TEST EVENT DRIVER",ZTDTH=$H,ZTRTN="EN^DGMTEVT"
"RTN","DGMTR",207,0)
 F I="DFN","DGMTACT","DGMTI","DGMTP","DGMTA","DGMTYPT" S ZTSAVE(I)=""
"RTN","DGMTR",208,0)
 S ZTSAVE("DGMTINF")=1
"RTN","DGMTR",209,0)
 I $D(IVMZ10) S ZTSAVE("IVMZ10")=""
"RTN","DGMTR",210,0)
 I $D(DGENUPLD) S ZTSAVE("DGENUPLD")=""
"RTN","DGMTR",211,0)
 S ZTIO="" D ^%ZTLOAD
"RTN","DGMTR",212,0)
 K ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","DGMTR",213,0)
 Q
"RTN","DGMTR",214,0)
SELIG ;Check if secondary eligibility code missing from ELIGIBILITY CODE
"RTN","DGMTR",215,0)
 ;file (#8) or entry in file #8 not pointing to MAS ELIGIBILITY
"RTN","DGMTR",216,0)
 ;CODE file (#8.1)
"RTN","DGMTR",217,0)
 N DGTXT
"RTN","DGMTR",218,0)
 S DGF=$G(^DIC(8,+DG,0)) I DGF="" D  Q
"RTN","DGMTR",219,0)
 .S DGTXT(4)="Entry with an IEN OF "_DG_" missing from"
"RTN","DGMTR",220,0)
 .S DGTXT(5)="the ELIGIBILITY CODE file (#8)"
"RTN","DGMTR",221,0)
 .D MAIL^DGMTR1
"RTN","DGMTR",222,0)
 .Q
"RTN","DGMTR",223,0)
 S DGF=$P(DGF,"^",9) I DGF=""!('$D(^DIC(8.1,+DGF,0))) D
"RTN","DGMTR",224,0)
 .S DGTXT(4)="ELIGIBILITY CODE file (#8) entry with an IEN OF "_DG_" doesn't"
"RTN","DGMTR",225,0)
 .S DGTXT(5)="have a valid pointer to the MAS ELIGIBILITY CODE file (#8.1)"
"RTN","DGMTR",226,0)
 .D MAIL^DGMTR1
"RTN","DGMTR",227,0)
 .S DGF=""
"RTN","DGMTR",228,0)
 .Q
"RTN","DGMTR",229,0)
 Q
"RTN","DGMTR1")
0^22^B31559684
"RTN","DGMTR1",1,0)
DGMTR1 ;ALB/CJM,SCG,LBD - Check Means Test Requirements Cont'd;3/25/92  09:51
"RTN","DGMTR1",2,0)
 ;;5.3;Registration;**182,344,433,456,564,688**;Aug 13, 1993;Build 29
"RTN","DGMTR1",3,0)
 ;
"RTN","DGMTR1",4,0)
COPYRX(DFN,MTIEN) ;
"RTN","DGMTR1",5,0)
 ;Creates a Pharmacy Copay test based on the means test if the vet is
"RTN","DGMTR1",6,0)
 ;subject to the Rx copayment and the income screening was already
"RTN","DGMTR1",7,0)
 ;completed
"RTN","DGMTR1",8,0)
 ;1/16/2002 - Changes added for LTC Copay Phase II (DG*5.3*433)
"RTN","DGMTR1",9,0)
 ;Creates a Pharmacy Copay test based on a LTC copay exemption test
"RTN","DGMTR1",10,0)
 ;(type 4) if the veteran is exempt from means test
"RTN","DGMTR1",11,0)
 ;
"RTN","DGMTR1",12,0)
 N NODE0,RXSTATUS,Y,DGMT,DGMTYPT,DGNODE,DATA,SUB,COMMENTS,RXIEN,DGMTACT,DGMTI,DGMTP,DGMTA,NODE2,CODE,QUIT,TRIES,ERROR,TYPE
"RTN","DGMTR1",13,0)
 ;
"RTN","DGMTR1",14,0)
 S DGMTP="",DGMTACT="ADD"
"RTN","DGMTR1",15,0)
 D ON^DGMTCOU G:'Y COPYRXQ
"RTN","DGMTR1",16,0)
 I $$CHK(DFN) D
"RTN","DGMTR1",17,0)
 .S NODE0=$G(^DGMT(408.31,MTIEN,0))
"RTN","DGMTR1",18,0)
 .Q:NODE0=""
"RTN","DGMTR1",19,0)
 .S NODE2=$G(^DGMT(408.31,MTIEN,2))
"RTN","DGMTR1",20,0)
 .;
"RTN","DGMTR1",21,0)
 .;get type of test (1=means test; 4=LTC copay exemption test)
"RTN","DGMTR1",22,0)
 .S TYPE=$P(NODE0,"^",19)
"RTN","DGMTR1",23,0)
 .;
"RTN","DGMTR1",24,0)
 .;must have been completed
"RTN","DGMTR1",25,0)
 .S CODE=$$GETCODE^DGMTH($P(NODE0,"^",3))
"RTN","DGMTR1",26,0)
 .S QUIT=1
"RTN","DGMTR1",27,0)
 .I (CODE'=""),("ACGP01"[CODE) S QUIT=0
"RTN","DGMTR1",28,0)
 .S CODE=$$GETCODE^DGMTH($P(NODE2,"^",3))
"RTN","DGMTR1",29,0)
 .I (CODE'=""),("ACGP01"[CODE) S QUIT=0
"RTN","DGMTR1",30,0)
 .Q:QUIT
"RTN","DGMTR1",31,0)
 .;
"RTN","DGMTR1",32,0)
 .;must still be effective
"RTN","DGMTR1",33,0)
 .Q:($$FMDIFF^XLFDT(DT,$P(NODE0,"^"))>365)
"RTN","DGMTR1",34,0)
 .Q:$$OLD^DGMTU4($P(NODE0,"^"))
"RTN","DGMTR1",35,0)
 .Q:($P(NODE0,"^",14))  ;declined to provide income information
"RTN","DGMTR1",36,0)
 .Q:($P(NODE0,"^",26))  ;refused to sign the test
"RTN","DGMTR1",37,0)
 .F TRIES=1:1 D  Q:(TRIES>3)
"RTN","DGMTR1",38,0)
 ..S DGNODE=$$LST^DGMTU(DFN,$S((DT>$P(NODE0,"^",2)):DT,1:$P(NODE0,"^",2)),2),RXIEN=+DGNODE
"RTN","DGMTR1",39,0)
 ..;
"RTN","DGMTR1",40,0)
 ..;mark existing test as non-primary
"RTN","DGMTR1",41,0)
 ..I RXIEN,($E($P(DGNODE,"^",2),1,3)=$E($P(NODE0,"^"),1,3)) D
"RTN","DGMTR1",42,0)
 ...S DATA(2)=0 I $$UPD^DGENDBS(408.31,RXIEN,.DATA)
"RTN","DGMTR1",43,0)
 ..E  S TRIES=4
"RTN","DGMTR1",44,0)
 .;
"RTN","DGMTR1",45,0)
 .S RXIEN=$P(NODE2,"^",6)
"RTN","DGMTR1",46,0)
 .;if already copied, reuse the same record
"RTN","DGMTR1",47,0)
 .I RXIEN,$P($G(^DGMT(408.31,RXIEN,2)),"^",6)=MTIEN D
"RTN","DGMTR1",48,0)
 ..S DGMTI=RXIEN
"RTN","DGMTR1",49,0)
 ..; Check for another test in the current year and convert IAI records, if needed
"RTN","DGMTR1",50,0)
 ..S CONVRT=$$VRCHKUP^DGMTU2(2,TYPE,$P(^DGMT(408.31,MTIEN,0),"^"),$P(^DGMT(408.31,RXIEN,0),"^"))
"RTN","DGMTR1",51,0)
 .E  D  Q:'DGMTI
"RTN","DGMTR1",52,0)
 ..;This call works. Adding via the ADD^DGENDBS encountered an error
"RTN","DGMTR1",53,0)
 ..S DGMTDT=$P(NODE0,"^") S DGMTYPT=2 D ADD^DGMTA
"RTN","DGMTR1",54,0)
 .;
"RTN","DGMTR1",55,0)
 .S DATA(.019)=2
"RTN","DGMTR1",56,0)
 .S DATA(.03)=""
"RTN","DGMTR1",57,0)
 .F SUB=.01,.02,.04,.05,.06,.07,.14,.15,.18,.23,.24,.25 S DATA(SUB)=$P(NODE0,"^",(SUB/.01))
"RTN","DGMTR1",58,0)
 .S DATA(2)=1
"RTN","DGMTR1",59,0)
 .S DATA(2.02)=$P(NODE2,"^",2)
"RTN","DGMTR1",60,0)
 .S DATA(2.05)=$P(NODE2,"^",5)
"RTN","DGMTR1",61,0)
 .I TYPE=1 D
"RTN","DGMTR1",62,0)
 ..S DATA(2.06)=MTIEN
"RTN","DGMTR1",63,0)
 ..S COMMENTS("LINES",1,0)="This Rx Copay Test was automatically created based on a completed means test"
"RTN","DGMTR1",64,0)
 ..S COMMENTS("LINES",2,0)="which was changed to NO LONGER REQUIRED. All data including income"
"RTN","DGMTR1",65,0)
 ..S COMMENTS("LINES",3,0)="screening was copied from the test on "_$$FMTE^XLFDT($$NOW^XLFDT)_"."
"RTN","DGMTR1",66,0)
 .I TYPE=4 D
"RTN","DGMTR1",67,0)
 ..S COMMENTS("LINES",1,0)="This Rx Copay Test was automatically created based on a completed"
"RTN","DGMTR1",68,0)
 ..S COMMENTS("LINES",2,0)="LTC copay exemption test. All data including income screening"
"RTN","DGMTR1",69,0)
 ..S COMMENTS("LINES",3,0)="was copied from the test on "_$$FMTE^XLFDT($$NOW^XLFDT)_"."
"RTN","DGMTR1",70,0)
 .S DATA(50)="COMMENTS(""LINES"")"
"RTN","DGMTR1",71,0)
 .S (DATA(.03),DATA(2.03))=$$RXSTATUS(MTIEN)
"RTN","DGMTR1",72,0)
 .S DATA(2.11)=1
"RTN","DGMTR1",73,0)
 .I $$UPD^DGENDBS(408.31,DGMTI,.DATA,.ERROR)
"RTN","DGMTR1",74,0)
 .K DATA
"RTN","DGMTR1",75,0)
 .S:TYPE=1 DATA(2.06)=DGMTI
"RTN","DGMTR1",76,0)
 .S:TYPE=4 DATA(2.08)=DGMTI
"RTN","DGMTR1",77,0)
 .I $$UPD^DGENDBS(408.31,MTIEN,.DATA,.ERROR)
"RTN","DGMTR1",78,0)
 .D TRANSFER^DGMTU4(DFN,MTIEN,DGMTI)
"RTN","DGMTR1",79,0)
 .D QUE^DGMTR
"RTN","DGMTR1",80,0)
COPYRXQ ;
"RTN","DGMTR1",81,0)
 K ERROR
"RTN","DGMTR1",82,0)
 Q
"RTN","DGMTR1",83,0)
 ;
"RTN","DGMTR1",84,0)
RXSTATUS(MTIEN) ;
"RTN","DGMTR1",85,0)
 ;Determins RX Copay Status based on the means test
"RTN","DGMTR1",86,0)
 ;
"RTN","DGMTR1",87,0)
 Q:('$G(MTIEN)) ""
"RTN","DGMTR1",88,0)
 N NODE0,NODE,PIECE,IBSTATUS,MTSTATUS
"RTN","DGMTR1",89,0)
 S NODE0=$G(^DGMT(408.31,MTIEN,0))
"RTN","DGMTR1",90,0)
 Q:(NODE0="") ""
"RTN","DGMTR1",91,0)
 F PIECE=1,2,4,5,14,15,18 S $P(NODE,"^",PIECE)=$P(NODE0,"^",PIECE)
"RTN","DGMTR1",92,0)
 S $P(NODE,"^",19)=2
"RTN","DGMTR1",93,0)
 S IBSTATUS=+$$INCDT^IBARXEU1(NODE)
"RTN","DGMTR1",94,0)
 S MTSTATUS=$S(IBSTATUS=1:"E",IBSTATUS=2:"M",1:"")
"RTN","DGMTR1",95,0)
 Q:(MTSTATUS="") ""
"RTN","DGMTR1",96,0)
 Q $O(^DG(408.32,"AC",2,MTSTATUS,0))
"RTN","DGMTR1",97,0)
 ;
"RTN","DGMTR1",98,0)
CHK(DFN) ;
"RTN","DGMTR1",99,0)
 ;can the veteran take a RX copay test?
"RTN","DGMTR1",100,0)
 N DGMTI,DGMTCOR,DGNODE,DGELIG,DGI,DGE
"RTN","DGMTR1",101,0)
 S DGMTCOR=1
"RTN","DGMTR1",102,0)
 ;
"RTN","DGMTR1",103,0)
 I $P($G(^DPT(DFN,"VET")),U,1)'="Y" S DGMTCOR=0 G CHKQ ;NON-VET
"RTN","DGMTR1",104,0)
 S DGI=$P($G(^DPT(DFN,.36)),U) I 'DGI S DGMTCOR=0 G CHKQ ;NO PRIM ELIG
"RTN","DGMTR1",105,0)
 S DGELIG=U_$P($G(^DIC(8,+DGI,0)),U,9)_U
"RTN","DGMTR1",106,0)
 S DGI=0 F  S DGI=$O(^DPT(DFN,"E",DGI)) Q:'DGI  S DGE=$P($G(^DPT(DFN,"E",DGI,0)),U),DGELIG=DGELIG_$P($G(^DIC(8,+DGE,0)),U,9)_U
"RTN","DGMTR1",107,0)
 I (DGELIG["^1^") S DGMTCOR=0 G CHKQ  ;SC 50-100%
"RTN","DGMTR1",108,0)
 F DGI=.3,.362,.52 S DGNODE(DGI)=$G(^DPT(DFN,DGI))
"RTN","DGMTR1",109,0)
 I $P(DGNODE(.362),U,12)["Y"!(DGELIG["^2^") S DGMTCOR=0 G CHKQ ;A&A
"RTN","DGMTR1",110,0)
 I $P(DGNODE(.362),U,13)["Y"!(DGELIG["^15^") S DGMTCOR=0 G CHKQ ;HB
"RTN","DGMTR1",111,0)
 I $P(DGNODE(.362),U,14)["Y"!(DGELIG["^4^") S DGMTCOR=0 G CHKQ ;PENSION
"RTN","DGMTR1",112,0)
 I $P(DGNODE(.52),U,5)["Y"!(DGELIG["^18^") S DGMTCOR=0 G CHKQ ;POW
"RTN","DGMTR1",113,0)
 I $P(DGNODE(.3),U,5)["Y"&($P(DGNODE(.3),U,2)>0)&($P(DGNODE(.362),U,20)>0) S DGMTCOR=0 G CHKQ ;UNEMPLOYABLE
"RTN","DGMTR1",114,0)
CHKQ ;
"RTN","DGMTR1",115,0)
 Q DGMTCOR
"RTN","DGMTR1",116,0)
MAIL ; Send a mailman msg to user/ INCONSISTENCY EDIT GROUP with results
"RTN","DGMTR1",117,0)
 N %,DGB,I,VA,VADM,VAERR,Y,XMDUZ,XMSUB,XMTEXT,XMY,XMZ
"RTN","DGMTR1",118,0)
 D DEM^VADPT
"RTN","DGMTR1",119,0)
 S XMSUB="Patient "_VADM(1)_" has an invalid secondary eligibility"
"RTN","DGMTR1",120,0)
 S XMDUZ="PIMS PACKAGE",XMY(DUZ)="",XMY(.5)=""
"RTN","DGMTR1",121,0)
 S DGB=+$P($G(^DG(43,1,"NOT")),"^",6)
"RTN","DGMTR1",122,0)
 I $D(^XMB(3.8,DGB,0)) S XMY("G."_$P($G(^XMB(3.8,DGB,0)),"^"))=""
"RTN","DGMTR1",123,0)
 S XMTEXT="DGTXT("
"RTN","DGMTR1",124,0)
 D NOW^%DTC S Y=% D DD^%DT
"RTN","DGMTR1",125,0)
 S DGTXT(1)="On "_Y_"  "_VADM(1)_" ("_VA("BID")_")"
"RTN","DGMTR1",126,0)
 S DGTXT(2)="has an invalid secondary eligibility"
"RTN","DGMTR1",127,0)
 S DGTXT(3)="  "
"RTN","DGMTR1",128,0)
 ;que mailman message
"RTN","DGMTR1",129,0)
 N DIFROM,I,ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","DGMTR1",130,0)
 F I="DGTXT(","XMDUZ","XMSUB","XMTEXT","XMY(" S ZTSAVE(I)=""
"RTN","DGMTR1",131,0)
 S ZTDESC="MAILMAN MSG FOR INVALID ELIGIBILITY CODE FILE ENTRIES"
"RTN","DGMTR1",132,0)
 S ZTDTH=$$NOW^XLFDT(),ZTIO="",ZTRTN="^XMD"
"RTN","DGMTR1",133,0)
 D ^%ZTLOAD
"RTN","DGMTR1",134,0)
 Q
"RTN","DGMTSC11")
0^10^B1785752
"RTN","DGMTSC11",1,0)
DGMTSC11 ;ALB/RMO - Means Test Screen Marital Status/Dependent Cont. ; 25 JAN 92
"RTN","DGMTSC11",2,0)
 ;;5.3;Registration;**25,45,688**;Aug 13, 1993;Build 29
"RTN","DGMTSC11",3,0)
 ;
"RTN","DGMTSC11",4,0)
EDTV1(MTVER) ;Edit dependent child data (new entry point)
"RTN","DGMTSC11",5,0)
 ;
"RTN","DGMTSC11",6,0)
 ; MTVER : Means Test Version (Optional)
"RTN","DGMTSC11",7,0)
 ;           Null or 0 - Version 0
"RTN","DGMTSC11",8,0)
 ;                   1 - Version 1
"RTN","DGMTSC11",9,0)
 ;
"RTN","DGMTSC11",10,0)
 S V1ENT=1 ;* MTVER was NEWed
"RTN","DGMTSC11",11,0)
 S:('$D(MTVER)) MTVER=0  ;*No value for MTVER was received
"RTN","DGMTSC11",12,0)
EDT ; Old Entry point for existing integrations - Edit dependent child data
"RTN","DGMTSC11",13,0)
 S EDTSET=0  ;* If MTVER exists it was defined in the partition and should not be KILLed
"RTN","DGMTSC11",14,0)
 ;
"RTN","DGMTSC11",15,0)
 ;* If MTVER is defined ($G value is 0 or 1) do not reset MTVER or KILL MTVER
"RTN","DGMTSC11",16,0)
 ;* If MTVER is not defined ($G Value is 0 because undefined); old version, KILL MTVER
"RTN","DGMTSC11",17,0)
 I (+$G(MTVER)<1),'$D(MTVER) S MTVER=0 S EDTSET=1
"RTN","DGMTSC11",18,0)
 N DA,DGERR,DGFIN,DGINI,DGIRI,DIE,DR
"RTN","DGMTSC11",19,0)
 D GETIENS^DGMTU2(DFN,+DGPRI,DGMTDT) G EDTQ:DGERR
"RTN","DGMTSC11",20,0)
 S DA=DGIRI,DIE="^DGMT(408.22,"
"RTN","DGMTSC11",21,0)
 S:(+MTVER<1) DR="[DGMT ENTER/EDIT DEPENDENTS]"
"RTN","DGMTSC11",22,0)
 S:(+MTVER=1) DR="[DGMT V1 ENTER/EDIT DEPENDENTS]"
"RTN","DGMTSC11",23,0)
 D ^DIE
"RTN","DGMTSC11",24,0)
 S:'$D(DGFIN) DGFL=$S($D(DTOUT):-2,$D(DUOUT):-1,($D(Y))=10:-1,1:0)
"RTN","DGMTSC11",25,0)
 ;
"RTN","DGMTSC11",26,0)
 ;* If MTVER was not defined because entry point for old version, KILL MTVER
"RTN","DGMTSC11",27,0)
 ;* If MTVER defined by calling version 1 entry point, do not KILL (NEW values will be KILLed)
"RTN","DGMTSC11",28,0)
 I EDTSET,'$D(V1ENT) K MTVER
"RTN","DGMTSC11",29,0)
 K EDTSET,V1ENT
"RTN","DGMTSC11",30,0)
EDTQ Q
"RTN","DGMTSC2")
0^11^B12084906
"RTN","DGMTSC2",1,0)
DGMTSC2 ;ALB/RMO/CAW - Means Test Screen Income ; 8/1/08 1:15pm
"RTN","DGMTSC2",2,0)
 ;;5.3;Registration;**45,688**;Aug 13, 1993;Build 29
"RTN","DGMTSC2",3,0)
 ;
"RTN","DGMTSC2",4,0)
 ; Input  -- DFN      Patient IEN
"RTN","DGMTSC2",5,0)
 ;           DGMTDT   Date of Test
"RTN","DGMTSC2",6,0)
 ;           DGVINI   Veteran Individual Annual Income IEN
"RTN","DGMTSC2",7,0)
 ;           DGVIRI   Veteran Income Relation IEN
"RTN","DGMTSC2",8,0)
 ;           DGVPRI   Veteran Patient Relation IEN
"RTN","DGMTSC2",9,0)
 ;           DGMTI    Means Test IEN
"RTN","DGMTSC2",10,0)
 ; Output -- None
"RTN","DGMTSC2",11,0)
 ;
"RTN","DGMTSC2",12,0)
EN ;Entry point for previous calendar year income screen
"RTN","DGMTSC2",13,0)
 S DGMTSCI=2 D HD^DGMTSCU
"RTN","DGMTSC2",14,0)
 D DIS
"RTN","DGMTSC2",15,0)
 S DGRNG="1-10" G EN^DGMTSCR
"RTN","DGMTSC2",16,0)
 ;
"RTN","DGMTSC2",17,0)
EN1 ;Entry point for read processor return
"RTN","DGMTSC2",18,0)
 D ALL^DGMTU21(DFN,"CS",DGMTDT,"IPR",$S($G(DGMTI):DGMTI,1:""))
"RTN","DGMTSC2",19,0)
 I DGX!($G(DGSELTY)["V") S DGPRI=DGVPRI,DGPRTY="V" D EDT
"RTN","DGMTSC2",20,0)
 I '$G(DGMTOUT)&($G(DGSEL)["S")&(DGX!($G(DGSELTY)["S")) S DGPRI=+DGREL("S"),DGPRTY="S" D EDT
"RTN","DGMTSC2",21,0)
 I '$G(DGMTOUT)&($G(DGSEL)["C")&(DGX!($G(DGSELTY)["C")) S DGPRTY="C",DGCNT=0 F  S DGCNT=$O(DGREL("C",DGCNT)) Q:'DGCNT!($G(DGMTOUT))  D
"RTN","DGMTSC2",22,0)
 .D CHK^DGMTSCU2 I Y S DGPRI=+DGREL("C",DGCNT) D EDT
"RTN","DGMTSC2",23,0)
Q K DGCNT,DGDEP,DGDR,DGMTOUT,DGPRI,DGPRTY,DGREL,DGSEL,DGSELTY,DGX,DGY,DTOUT,DUOUT,Y
"RTN","DGMTSC2",24,0)
 G EN
"RTN","DGMTSC2",25,0)
 ;
"RTN","DGMTSC2",26,0)
DIS ;Display income
"RTN","DGMTSC2",27,0)
 N DGDC,DGDET,DGIN0,DGIN1,DGIN2,DGINT,DGINTF,DGNC,DGND,DGNWT,DGNWTF,DGSP,DGVIR0,DGCNT
"RTN","DGMTSC2",28,0)
 D DEP^DGMTSCU2,INC^DGMTSCU3 S DGCNT=1
"RTN","DGMTSC2",29,0)
 W !!?35,"Veteran" W:DGSP ?47,"Spouse" W:DGDC ?57,"Children" W ?73,"Total"
"RTN","DGMTSC2",30,0)
 W !?31,"-----------------------------------------------"
"RTN","DGMTSC2",31,0)
 D HIGH^DGMTSCU1(1,DGMTACT),FLD(.DGIN0,8,"Social Security (Not SSI)")
"RTN","DGMTSC2",32,0)
 D HIGH^DGMTSCU1(2,DGMTACT),FLD(.DGIN0,9,"U.S. Civil Service")
"RTN","DGMTSC2",33,0)
 D HIGH^DGMTSCU1(3,DGMTACT),FLD(.DGIN0,10,"U.S. Railroad Retirement")
"RTN","DGMTSC2",34,0)
 D HIGH^DGMTSCU1(4,DGMTACT),FLD(.DGIN0,11,"Military Retirement")
"RTN","DGMTSC2",35,0)
 D HIGH^DGMTSCU1(5,DGMTACT),FLD(.DGIN0,12,"Unemployment Compensation")
"RTN","DGMTSC2",36,0)
 D HIGH^DGMTSCU1(6,DGMTACT),FLD(.DGIN0,13,"Other Retirement")
"RTN","DGMTSC2",37,0)
 D HIGH^DGMTSCU1(7,DGMTACT),FLD(.DGIN0,14,"Total Employment Income")
"RTN","DGMTSC2",38,0)
 D HIGH^DGMTSCU1(8,DGMTACT),FLD(.DGIN0,15,"Interest,Dividend,Annuity")
"RTN","DGMTSC2",39,0)
 D HIGH^DGMTSCU1(9,DGMTACT),FLD(.DGIN0,16,"Workers Comp or Black Lung")
"RTN","DGMTSC2",40,0)
 D HIGH^DGMTSCU1(10,DGMTACT),FLD(.DGIN0,17,"All Other Income")
"RTN","DGMTSC2",41,0)
 W !?52,"Total -->",?67,$J($$AMT^DGMTSCU1(DGINT),12)
"RTN","DGMTSC2",42,0)
 Q
"RTN","DGMTSC2",43,0)
 ;
"RTN","DGMTSC2",44,0)
FLD(DGIN,DGPCE,DGTXT) ;Display income fields
"RTN","DGMTSC2",45,0)
 ;
"RTN","DGMTSC2",46,0)
 ;    Input -- DGIN as Individual Annual Income 0 node for vet,
"RTN","DGMTSC2",47,0)
 ;                  spouse, and dependents
"RTN","DGMTSC2",48,0)
 ;             DGPCE as piece position wanted
"RTN","DGMTSC2",49,0)
 ;             DGTXT as income description
"RTN","DGMTSC2",50,0)
 ;
"RTN","DGMTSC2",51,0)
 ;             Also keeps running total if DGGTOT is defined (grand
"RTN","DGMTSC2",52,0)
 ;                  total)
"RTN","DGMTSC2",53,0)
 ;
"RTN","DGMTSC2",54,0)
 N DGTOT,I
"RTN","DGMTSC2",55,0)
 I '$D(DGBL) S $P(DGBL," ",28)=""
"RTN","DGMTSC2",56,0)
 W:DGCNT<10 " "
"RTN","DGMTSC2",57,0)
 W " ",$E(DGTXT_DGBL,1,28)
"RTN","DGMTSC2",58,0)
 W:$D(DGFV2) $J($$AMT^DGMTSCU1($P(DGIN("V"),"^",DGPCE)),11)
"RTN","DGMTSC2",59,0)
 W:'$D(DGFV2) $J($$AMT^DGMTSCU1($P(DGIN("V"),"^",DGPCE)),9)
"RTN","DGMTSC2",60,0)
 W " ",$S($D(DGIN("S")):$J($$AMT^DGMTSCU1($P(DGIN("S"),"^",DGPCE)),10),1:$E(DGBL,1,10))
"RTN","DGMTSC2",61,0)
 W " ",$S($D(DGIN("C")):$J($$AMT^DGMTSCU1($P(DGIN("C"),"^",DGPCE)),11),1:$E(DGBL,1,11))
"RTN","DGMTSC2",62,0)
 S DGTOT="",I="" F  S I=$O(DGIN(I)) Q:I=""  I $P(DGIN(I),"^",DGPCE)]"" S DGTOT=DGTOT+$P(DGIN(I),"^",DGPCE)
"RTN","DGMTSC2",63,0)
 W "  ",$J($$AMT^DGMTSCU1(DGTOT),12)
"RTN","DGMTSC2",64,0)
 S DGCNT=DGCNT+1
"RTN","DGMTSC2",65,0)
 Q
"RTN","DGMTSC2",66,0)
 ;
"RTN","DGMTSC2",67,0)
EDT ;Edit income fields
"RTN","DGMTSC2",68,0)
 N DA,DGERR,DGFIN,DGINI,DGIN0,DGIRI,DIE,DR
"RTN","DGMTSC2",69,0)
 D GETIENS^DGMTU2(DFN,DGPRI,DGMTDT) G EDTQ:DGERR
"RTN","DGMTSC2",70,0)
 I $G(DGSEL)]"" W !!,"NAME: ",$$NAME^DGMTU1(DGPRI)
"RTN","DGMTSC2",71,0)
 S DGIN0=$G(^DGMT(408.21,DGINI,0))
"RTN","DGMTSC2",72,0)
 S DR="[DGMT ENTER/EDIT ANNUAL INCOME]"
"RTN","DGMTSC2",73,0)
 S DA=DGINI,DIE="^DGMT(408.21," D ^DIE S:'$D(DGFIN) DGMTOUT=1
"RTN","DGMTSC2",74,0)
 I DGIN0'=$G(^DGMT(408.21,DGINI,0)) S DR="103////^S X=DUZ;104///^S X=""NOW""" D ^DIE
"RTN","DGMTSC2",75,0)
EDTQ Q
"RTN","DGMTSC2V")
0^24^B6811393
"RTN","DGMTSC2V",1,0)
DGMTSC2V ;ALB/GTS - Means Test Screen Income (version 1) ;15 DEC 2005 15:45 pm
"RTN","DGMTSC2V",2,0)
 ;;5.3;Registration;**688**;Aug 13, 1993;Build 29
"RTN","DGMTSC2V",3,0)
 ;
"RTN","DGMTSC2V",4,0)
 ; Input  -- DFN      Patient IEN
"RTN","DGMTSC2V",5,0)
 ;           DGMTDT   Date of Test
"RTN","DGMTSC2V",6,0)
 ;           DGVINI   Veteran Individual Annual Income IEN
"RTN","DGMTSC2V",7,0)
 ;           DGVIRI   Veteran Income Relation IEN
"RTN","DGMTSC2V",8,0)
 ;           DGVPRI   Veteran Patient Relation IEN
"RTN","DGMTSC2V",9,0)
 ;           DGMTI    Means Test IEN
"RTN","DGMTSC2V",10,0)
 ; Output -- None
"RTN","DGMTSC2V",11,0)
 ;
"RTN","DGMTSC2V",12,0)
EN ;Entry point for previous calendar year income screen
"RTN","DGMTSC2V",13,0)
 S DGMTSCI=2 D HD^DGMTSCU
"RTN","DGMTSC2V",14,0)
 D DIS
"RTN","DGMTSC2V",15,0)
 S DGRNG="1-3" G EN^DGMTSCR
"RTN","DGMTSC2V",16,0)
 ;
"RTN","DGMTSC2V",17,0)
EN1 ;Entry point for read processor return
"RTN","DGMTSC2V",18,0)
 D ALL^DGMTU21(DFN,"CS",DGMTDT,"IPR",$S($G(DGMTI):DGMTI,1:""))
"RTN","DGMTSC2V",19,0)
 I DGX!($G(DGSELTY)["V") S DGPRI=DGVPRI,DGPRTY="V" D EDT
"RTN","DGMTSC2V",20,0)
 I '$G(DGMTOUT)&($G(DGSEL)["S")&(DGX!($G(DGSELTY)["S")) S DGPRI=+DGREL("S"),DGPRTY="S" D EDT
"RTN","DGMTSC2V",21,0)
 I '$G(DGMTOUT)&($G(DGSEL)["C")&(DGX!($G(DGSELTY)["C")) S DGPRTY="C",DGCNT=0 F  S DGCNT=$O(DGREL("C",DGCNT)) Q:'DGCNT!($G(DGMTOUT))  D
"RTN","DGMTSC2V",22,0)
 .D CHK^DGMTSCU2 I Y S DGPRI=+DGREL("C",DGCNT) D EDT
"RTN","DGMTSC2V",23,0)
Q K DGCNT,DGDEP,DGDR,DGMTOUT,DGPRI,DGPRTY,DGREL,DGSEL,DGSELTY,DGX,DGY,DTOUT,DUOUT,Y
"RTN","DGMTSC2V",24,0)
 G EN
"RTN","DGMTSC2V",25,0)
 ;
"RTN","DGMTSC2V",26,0)
DIS ;Display income
"RTN","DGMTSC2V",27,0)
 N DGDC,DGDET,DGIN0,DGIN1,DGIN2,DGINT,DGINTF,DGNC,DGND,DGNWT,DGNWTF,DGSP,DGVIR0,DGCNT,DGFV2
"RTN","DGMTSC2V",28,0)
 S DGFV2=1
"RTN","DGMTSC2V",29,0)
 D DEP^DGMTSCU2,INC^DGMTSCU3 S DGCNT=1
"RTN","DGMTSC2V",30,0)
 W !!?34,"Veteran" W:DGSP ?46,"Spouse" W:DGDC ?56,"Children" W ?73,"Total"
"RTN","DGMTSC2V",31,0)
 W !?31,"-----------------------------------------------"
"RTN","DGMTSC2V",32,0)
 D HIGH^DGMTSCU1(1,DGMTACT) W "  Total Employment Income",!
"RTN","DGMTSC2V",33,0)
 D FLD^DGMTSC2(.DGIN0,14,"   (Wages, Bonuses, Tips): ")
"RTN","DGMTSC2V",34,0)
 D HIGH^DGMTSCU1(2,DGMTACT) W "  Net Income from Farm,",!
"RTN","DGMTSC2V",35,0)
 D FLD^DGMTSC2(.DGIN0,17,"   Ranch, Property, Bus.: ")
"RTN","DGMTSC2V",36,0)
 D HIGH^DGMTSCU1(3,DGMTACT) W "  Other Income Amounts",!
"RTN","DGMTSC2V",37,0)
 W "     (Soc. Sec., Compensation,",!
"RTN","DGMTSC2V",38,0)
 D FLD^DGMTSC2(.DGIN0,8,"   Pension, Interest, Div.): ")
"RTN","DGMTSC2V",39,0)
 W !?51,"Total -->",?66,$J($$AMT^DGMTSCU1(DGINT),12)
"RTN","DGMTSC2V",40,0)
 Q
"RTN","DGMTSC2V",41,0)
 ;
"RTN","DGMTSC2V",42,0)
EDT ;Edit income fields
"RTN","DGMTSC2V",43,0)
 N DA,DGERR,DGFIN,DGINI,DGIN0,DGIRI,DIE,DR
"RTN","DGMTSC2V",44,0)
 D GETIENS^DGMTU2(DFN,DGPRI,DGMTDT) G EDTQ:DGERR
"RTN","DGMTSC2V",45,0)
 I $G(DGSEL)]"" W !!,"NAME: ",$$NAME^DGMTU1(DGPRI)
"RTN","DGMTSC2V",46,0)
 S DGIN0=$G(^DGMT(408.21,DGINI,0))
"RTN","DGMTSC2V",47,0)
 S DR="[DGMT V1 ENTER/EDIT ANNUAL INC]"
"RTN","DGMTSC2V",48,0)
 S DA=DGINI,DIE="^DGMT(408.21," D ^DIE S:'$D(DGFIN) DGMTOUT=1
"RTN","DGMTSC2V",49,0)
 I DGIN0'=$G(^DGMT(408.21,DGINI,0)) S DR="103////^S X=DUZ;104///^S X=""NOW""" D ^DIE
"RTN","DGMTSC2V",50,0)
EDTQ Q
"RTN","DGMTSC31")
0^113^B8816776
"RTN","DGMTSC31",1,0)
DGMTSC31 ;ALB/RMO,ERC - Means Test Screen Deductible Expenses Cont. ; 13 MAR 92
"RTN","DGMTSC31",2,0)
 ;;5.3;Registration;**45,688**;Aug 13, 1993;Build 29
"RTN","DGMTSC31",3,0)
 ;
"RTN","DGMTSC31",4,0)
 ; Input  -- DFN      Patient IEN
"RTN","DGMTSC31",5,0)
 ;           DGMTDT   Date of Test
"RTN","DGMTSC31",6,0)
 ;           DGMTPAR  Annual Means Test Parameter Array
"RTN","DGMTSC31",7,0)
 ; Output -- None
"RTN","DGMTSC31",8,0)
 ;
"RTN","DGMTSC31",9,0)
EN ;Entry point for dependent children
"RTN","DGMTSC31",10,0)
 S DGFL=0 K DGDCS D SET
"RTN","DGMTSC31",11,0)
 W !!,"Enter:  R to REDISPLAY information on dependent children"
"RTN","DGMTSC31",12,0)
 I DGDEP W !?8,"1-",DGDEP," to edit information for the child listed after that number"
"RTN","DGMTSC31",13,0)
 R !,"Enter CHOICE: ",X:DTIME I '$T!(X["^") S DGFL=$S(X["^":-1,1:-2) G Q
"RTN","DGMTSC31",14,0)
 G:X']"" Q I X["?" G EN
"RTN","DGMTSC31",15,0)
 ;DG*5.3*688 - removing code to set X to $E(X), as we can
"RTN","DGMTSC31",16,0)
 ;have >9 dependent children now
"RTN","DGMTSC31",17,0)
 D UP^DGHELP
"RTN","DGMTSC31",18,0)
 I X="R" D DIS G EN:'DGFL,Q
"RTN","DGMTSC31",19,0)
 I 'X!'$D(DGDCS(X)) G EN ; not numeric or bad answer
"RTN","DGMTSC31",20,0)
 S DGINI=+$G(DGINC("C",DGDCS(X)))
"RTN","DGMTSC31",21,0)
 I $G(^DGMT(408.21,DGINI,0)),($P(^(0),"^",14)-$P(DGMTPAR,"^",17))'>0 W !!?8,"Post-secondary education expenses are not applicable for this child." G EN
"RTN","DGMTSC31",22,0)
 D EDT:DGINI G EN:'DGFL
"RTN","DGMTSC31",23,0)
Q I DGFL<0 S DGMTOUT=1
"RTN","DGMTSC31",24,0)
 K DGDCS,DGDEP,DGFL,DGINC,DGINR,DGINI,DGREL,DTOUT,DUOUT,X
"RTN","DGMTSC31",25,0)
 Q
"RTN","DGMTSC31",26,0)
 ;
"RTN","DGMTSC31",27,0)
SET ;Set variables for selectable dependent children ;DGMTP also calls
"RTN","DGMTSC31",28,0)
 N DGCNT,Y
"RTN","DGMTSC31",29,0)
 D ALL^DGMTU21(DFN,"C",DGMTDT,"IPR",$S($G(DGMTI):DGMTI,1:""))
"RTN","DGMTSC31",30,0)
 I $P(DGMTPAR,"^",17)']"" G SETQ ;quit if no child's income exclusion
"RTN","DGMTSC31",31,0)
 S (DGCNT,DGDEP)=0 F  S DGCNT=$O(DGREL("C",DGCNT)) Q:'DGCNT  D
"RTN","DGMTSC31",32,0)
 .D CHK I Y S DGDEP=DGDEP+1,DGDCS(DGDEP)=DGCNT
"RTN","DGMTSC31",33,0)
SETQ Q
"RTN","DGMTSC31",34,0)
 ;
"RTN","DGMTSC31",35,0)
DIS ;Display dependent children with employment income
"RTN","DGMTSC31",36,0)
 N DGLP
"RTN","DGMTSC31",37,0)
 W !!?8,"Child's",?24,"Employment",?36,"Post-secondary"
"RTN","DGMTSC31",38,0)
 W !?8,"First Name",?24,"Income",?36,"Education Expenses"
"RTN","DGMTSC31",39,0)
 W !?8,"------------",?24,"----------",?36,"------------------"
"RTN","DGMTSC31",40,0)
 S DGLP=0 F  S DGLP=$O(DGDCS(DGLP)) Q:'DGLP  S DGCNT=DGDCS(DGLP) D CHILD
"RTN","DGMTSC31",41,0)
 Q
"RTN","DGMTSC31",42,0)
 ;
"RTN","DGMTSC31",43,0)
CHILD ;Display employment income and expenses for a dependent child
"RTN","DGMTSC31",44,0)
 N DGIN0,DGIN1
"RTN","DGMTSC31",45,0)
 S DGIN0=$G(^DGMT(408.21,+$G(DGINC("C",DGCNT)),0)),DGIN1=$G(^(1))
"RTN","DGMTSC31",46,0)
 W !?4,DGLP,".",?8,$E($P($$NAME^DGMTU1(+DGREL("C",DGCNT)),",",2),1,12)
"RTN","DGMTSC31",47,0)
 W ?24,$J($$AMT^DGMTSCU1($P(DGIN0,"^",14)),10)
"RTN","DGMTSC31",48,0)
 W ?44,$J($S(($P(DGIN0,"^",14)-$P(DGMTPAR,"^",17))>0:$$AMT^DGMTSCU1($P(DGIN1,"^",3)),1:"N/A"),10)
"RTN","DGMTSC31",49,0)
 Q
"RTN","DGMTSC31",50,0)
 ;
"RTN","DGMTSC31",51,0)
CHK ;Check if child has income available to the veteran and his/her own
"RTN","DGMTSC31",52,0)
 ;employment income
"RTN","DGMTSC31",53,0)
 S Y=0
"RTN","DGMTSC31",54,0)
 I $D(^DGMT(408.22,+$G(DGINR("C",DGCNT)),0)),$P(^(0),"^",11),$P(^(0),"^",12),$P($G(^DGMT(408.21,+$G(DGINC("C",DGCNT)),0)),"^",14) S Y=1
"RTN","DGMTSC31",55,0)
 Q
"RTN","DGMTSC31",56,0)
 ;
"RTN","DGMTSC31",57,0)
EDT ;Edit dependent child expenses
"RTN","DGMTSC31",58,0)
 N DA,DGFIN,DGIN1,DIE,DR
"RTN","DGMTSC31",59,0)
 S DGIN1=$G(^DGMT(408.21,DGINI,1))
"RTN","DGMTSC31",60,0)
 S DA=DGINI,DIE="^DGMT(408.21,",DR="[DGMT ENTER/EDIT CHILD EXPENSES]" D ^DIE
"RTN","DGMTSC31",61,0)
 S:'$D(DGFIN) DGFL=$S($D(DTOUT):-2,$D(DUOUT):-1,1:0)
"RTN","DGMTSC31",62,0)
 I DGIN1'=$G(^DGMT(408.21,DGINI,1)) S DR="103////^S X=DUZ;104///^S X=""NOW""" D ^DIE
"RTN","DGMTSC31",63,0)
 Q
"RTN","DGMTSC3V")
0^20^B5377303
"RTN","DGMTSC3V",1,0)
DGMTSC3V        ;ALB/AMA - Means Test Screen Deductible Expense For MT Version 1
"RTN","DGMTSC3V",2,0)
 ;;5.3;Registration;**688**;Aug 13, 1993;Build 29
"RTN","DGMTSC3V",3,0)
 ;Copied from DGMTSC3
"RTN","DGMTSC3V",4,0)
 ;
"RTN","DGMTSC3V",5,0)
 ; Input  -- DGVINI  Veteran Individual Annual Income IEN
"RTN","DGMTSC3V",6,0)
 ;           DGVIRI  Veteran Income Relation IEN
"RTN","DGMTSC3V",7,0)
 ;           DGVPRI  Veteran Patient Relation IEN
"RTN","DGMTSC3V",8,0)
 ; Output -- None
"RTN","DGMTSC3V",9,0)
 ;
"RTN","DGMTSC3V",10,0)
EN ;Entry point for deductible expense screen
"RTN","DGMTSC3V",11,0)
 S DGMTSCI=3 D HD^DGMTSCU
"RTN","DGMTSC3V",12,0)
 D DIS
"RTN","DGMTSC3V",13,0)
 S DGRNG="1-"_$S('DGDC:1,1:2) G EN^DGMTSCR
"RTN","DGMTSC3V",14,0)
EN1 ;Entry point for read processor return
"RTN","DGMTSC3V",15,0)
 S DGVIR0=$G(^DGMT(408.22,DGVIRI,0)),DGIN1("V")=$G(^DGMT(408.21,DGVINI,1))
"RTN","DGMTSC3V",16,0)
 S DR="[DGMT V1 ENTER/EDIT EXPENSES]"
"RTN","DGMTSC3V",17,0)
 S DA=DGVINI,DIE="^DGMT(408.21," D ^DIE S:'$D(DGFIN) DGMTOUT=1
"RTN","DGMTSC3V",18,0)
 I DGIN1("V")'=$G(^DGMT(408.21,DGVINI,1)) S DR="103////^S X=DUZ;104///^S X=""NOW""" D ^DIE K DA,DIE,DR
"RTN","DGMTSC3V",19,0)
 I '$G(DGMTOUT),DGDR["102" D EN^DGMTSC31
"RTN","DGMTSC3V",20,0)
Q K DGDC,DGDR,DGFIN,DGIN1,DGMTOUT,DGREL,DGVIR0,DGX,DGY,DTOUT,DUOUT
"RTN","DGMTSC3V",21,0)
 G EN
"RTN","DGMTSC3V",22,0)
 ;
"RTN","DGMTSC3V",23,0)
DIS ;Display deductible expenses
"RTN","DGMTSC3V",24,0)
 N DGCNT,DGDCS,DGDEP,DGIN1,DGINC,DGINR,DGREL,DGVIR0
"RTN","DGMTSC3V",25,0)
 S DGVIR0=$G(^DGMT(408.22,DGVIRI,0)),DGIN1("V")=$G(^DGMT(408.21,DGVINI,1))
"RTN","DGMTSC3V",26,0)
 S DGDC=$P(DGVIR0,"^",8) I DGDC D SET^DGMTSC31 S:'$D(DGDCS) DGDC=0
"RTN","DGMTSC3V",27,0)
 D HIGH^DGMTSCU1(1,DGMTACT) W $J("Total Non-Reimbursed Medical Expenses: ",41),$S(+$P(DGIN1("V"),"^",12)'<0:$$AMT^DGMTSCU1(+$P(DGIN1("V"),"^",12)),1:"N/A")
"RTN","DGMTSC3V",28,0)
 W !,$J("Adjusted Medical Expenses: ",44),$S(+$P(DGIN1("V"),"^")'<0:$$AMT^DGMTSCU1(+$P(DGIN1("V"),"^")),1:"N/A")
"RTN","DGMTSC3V",29,0)
 W !,$J("Funeral and Burial Expenses: ",44),$$AMT^DGMTSCU1($P(DGIN1("V"),"^",2))
"RTN","DGMTSC3V",30,0)
 W !,$J("Veteran's Educational Expenses: ",44),$$AMT^DGMTSCU1($P(DGIN1("V"),"^",3))
"RTN","DGMTSC3V",31,0)
 W ! D HIGH^DGMTSCU1(2,DGMTACT) W ?7," Child's Education Expenses: ",$S('DGDC:"N/A",1:"") D DIS^DGMTSC31:DGDC
"RTN","DGMTSC3V",32,0)
 Q
"RTN","DGMTSC4V")
0^21^B18024527
"RTN","DGMTSC4V",1,0)
DGMTSC4V        ;ALB/AMA - Means Test Screen Net Worth For MT Version 1
"RTN","DGMTSC4V",2,0)
 ;;5.3;Registration;**688**;Aug 13, 1993;Build 29
"RTN","DGMTSC4V",3,0)
 ;Copied from DGMTSC4
"RTN","DGMTSC4V",4,0)
 ;
"RTN","DGMTSC4V",5,0)
 ; Input  -- DFN      Patient IEN
"RTN","DGMTSC4V",6,0)
 ;           DGMTDT   Date of Test
"RTN","DGMTSC4V",7,0)
 ;           DGMTYPT  Type of Test 1=MT 2=COPAY
"RTN","DGMTSC4V",8,0)
 ;           DGMTPAR  Annual Means Test Parameter Array
"RTN","DGMTSC4V",9,0)
 ;           DGVINI   Veteran Individual Annual Income IEN
"RTN","DGMTSC4V",10,0)
 ;           DGVIRI   Veteran Income Relation IEN
"RTN","DGMTSC4V",11,0)
 ;           DGVPRI   Veteran Patient Relation IEN
"RTN","DGMTSC4V",12,0)
 ;           DGMTNWC  Net Worth Calculation flag
"RTN","DGMTSC4V",13,0)
 ; Output -- None
"RTN","DGMTSC4V",14,0)
 ;
"RTN","DGMTSC4V",15,0)
EN ;Entry point for previous calendar year net worth screen
"RTN","DGMTSC4V",16,0)
 S DGMTSCI=4 D HD^DGMTSCU
"RTN","DGMTSC4V",17,0)
 D DIS
"RTN","DGMTSC4V",18,0)
 S DGRNG="1-3" G EN^DGMTSCR
"RTN","DGMTSC4V",19,0)
 ;
"RTN","DGMTSC4V",20,0)
EN1 ;Entry point for read processor return
"RTN","DGMTSC4V",21,0)
 D ALL^DGMTU21(DFN,"CS",DGMTDT,"IPR",$S($G(DGMTI):DGMTI,1:""))
"RTN","DGMTSC4V",22,0)
 I DGX!($G(DGSELTY)["V") S DGPRI=DGVPRI,DGPRTY="V" D EDT
"RTN","DGMTSC4V",23,0)
 I '$G(DGMTOUT)&($G(DGSEL)["S")&(DGX!($G(DGSELTY)["S")) S DGPRI=+DGREL("S"),DGPRTY="S" D EDT
"RTN","DGMTSC4V",24,0)
 ;*Patch DG*5.3*688
"RTN","DGMTSC4V",25,0)
 I '$G(DGMTOUT)&($G(DGSEL)["C")&(DGX!($G(DGSELTY)["C")) S DGPRTY="C",DGCNT=0 F  S DGCNT=$O(DGREL("C",DGCNT)) Q:'DGCNT!($G(DGMTOUT))  D
"RTN","DGMTSC4V",26,0)
 .D CHK^DGMTSCU2 I Y S DGPRI=+DGREL("C",DGCNT) D EDT
"RTN","DGMTSC4V",27,0)
Q K DGCNT,DGDEP,DGDR,DGMTOUT,DGPRI,DGPRTY,DGREL,DGSEL,DGSELTY,DGX,DGY,DTOUT,DUOUT,Y
"RTN","DGMTSC4V",28,0)
 G EN
"RTN","DGMTSC4V",29,0)
 ;
"RTN","DGMTSC4V",30,0)
DIS ;Display net worth
"RTN","DGMTSC4V",31,0)
 N DGCAT,DGDC,DGDET,DGIN0,DGIN1,DGIN2,DGINT,DGINTF,DGMTS,DGNC,DGND,DGNWT,DGNWTF,DGSP,DGTYC,DGTHA,DGTHB,DGTHG,DGVIR0,DGCNT
"RTN","DGMTSC4V",32,0)
 D SET^DGMTSCU2 S DGCNT=1
"RTN","DGMTSC4V",33,0)
 I DGMTYPT=1 W !,"Income Thresholds:   " W:$D(DGTHA) "MT Threshold: ",$$AMT^DGMTSCU1(DGTHA) W:$D(DGTHG) ?53,"GMT Threshold: ",$$AMT^DGMTSCU1(DGTHG)
"RTN","DGMTSC4V",34,0)
 W ! W:$D(DGMTPAR("PREV")) "*Previous Years Thresholds*"
"RTN","DGMTSC4V",35,0)
 W ?34,"Veteran" W:DGSP ?47,"Spouse" W:DGDC ?57,"Children" W ?73,"Total"
"RTN","DGMTSC4V",36,0)
 W !?31,"-----------------------------------------------"
"RTN","DGMTSC4V",37,0)
 D HIGH^DGMTSCU1(1,DGMTACT) W "  Cash, Amts in Bank Accts"
"RTN","DGMTSC4V",38,0)
 D FLD(.DGIN2,1,"(CDs,IRAs,Stocks,Bonds):")
"RTN","DGMTSC4V",39,0)
 D HIGH^DGMTSCU1(2,DGMTACT) W "  Land,Bldgs Less Mortgage,"
"RTN","DGMTSC4V",40,0)
 D FLD(.DGIN2,3,"Liens (Not Primary Home):")
"RTN","DGMTSC4V",41,0)
 D HIGH^DGMTSCU1(3,DGMTACT) W "  Other Prop.(Farm,Bus.) Or"
"RTN","DGMTSC4V",42,0)
 W !?5,"Assets (Art,Collectibles)"
"RTN","DGMTSC4V",43,0)
 D FLD(.DGIN2,4,"Less Amount Owed:")
"RTN","DGMTSC4V",44,0)
 W !?51,"Total -->",?66,$J($$AMT^DGMTSCU1(DGNWT),12)
"RTN","DGMTSC4V",45,0)
 I DGMTYPT=1,DGMTACT="VEW",$P($G(DGMT0),"^",14) W !!!!!!,"Declines to give income information makes a MT COPAY REQUIRED status." G DISQ
"RTN","DGMTSC4V",46,0)
 ;
"RTN","DGMTSC4V",47,0)
 I DGMTACT="VEW",DGMTI,$$GET1^DIQ(408.31,DGMTI,.23)["IVM" D  G DISQ
"RTN","DGMTSC4V",48,0)
 . W !!!!!!,"Source of Test is IVM"
"RTN","DGMTSC4V",49,0)
 W !!!!!! I DGMTYPT=1 W "Income of ",$J($$AMT^DGMTSCU1(DGINT-DGDET),12) W "  ",$$GETNAME^DGMTH(DGMTS)
"RTN","DGMTSC4V",50,0)
 I DGMTYPT=1,DGTYC="M",(DGNWT-DGDET)+$S($G(DGMTNWC):0,1:DGINT)'<$P(DGMTPAR,"^",8) W !,?3,"with property of ",$J($$AMT^DGMTSCU1(DGNWT),12)," makes a ",$S(DGTHG>DGTHA:"G",1:""),"MT COPAY REQUIRED status."
"RTN","DGMTSC4V",51,0)
 I DGTYC="M",'DGNWTF W " requires property information."
"RTN","DGMTSC4V",52,0)
 I DGMTYPT=2,'DGNWTF,DGCAT="E" W "Requires property information."
"RTN","DGMTSC4V",53,0)
DISQ Q
"RTN","DGMTSC4V",54,0)
 ;
"RTN","DGMTSC4V",55,0)
FLD(DGIN,DGPCE,DGTXT)   ;Display income fields
"RTN","DGMTSC4V",56,0)
 ;
"RTN","DGMTSC4V",57,0)
 ;  Input -- DGIN as Individual Annual Income 0 node for vet,
"RTN","DGMTSC4V",58,0)
 ;                spouse, and dependents
"RTN","DGMTSC4V",59,0)
 ;           DGRPCE as piece position wanted
"RTN","DGMTSC4V",60,0)
 ;           DGTXT as income description
"RTN","DGMTSC4V",61,0)
 ;
"RTN","DGMTSC4V",62,0)
 ;  Also keeps running total if DGGTOT is defined (grand total)
"RTN","DGMTSC4V",63,0)
 ;
"RTN","DGMTSC4V",64,0)
 N DGTOT,I
"RTN","DGMTSC4V",65,0)
 I '$D(DGBL) S $P(DGBL," ",26)=""
"RTN","DGMTSC4V",66,0)
 W !?5,$E(DGTXT_DGBL,1,26)
"RTN","DGMTSC4V",67,0)
 W $J($$AMT^DGMTSCU1($P(DGIN("V"),"^",DGPCE)),10)
"RTN","DGMTSC4V",68,0)
 W " ",$S($D(DGIN("S")):$J($$AMT^DGMTSCU1($P(DGIN("S"),"^",DGPCE)),10),1:$E(DGBL,1,10))
"RTN","DGMTSC4V",69,0)
 W " ",$S($D(DGIN("C")):$J($$AMT^DGMTSCU1($P(DGIN("C"),"^",DGPCE)),11),1:$E(DGBL,1,11))
"RTN","DGMTSC4V",70,0)
 S DGTOT="",I="" F  S I=$O(DGIN(I)) Q:I=""  I $P(DGIN(I),"^",DGPCE)]"" S DGTOT=DGTOT+$P(DGIN(I),"^",DGPCE)
"RTN","DGMTSC4V",71,0)
 W "  ",$J($$AMT^DGMTSCU1(DGTOT),12)
"RTN","DGMTSC4V",72,0)
 S DGCNT=DGCNT+1
"RTN","DGMTSC4V",73,0)
 Q
"RTN","DGMTSC4V",74,0)
 ;
"RTN","DGMTSC4V",75,0)
EDT ;Edit net worth fields
"RTN","DGMTSC4V",76,0)
 N DA,DGERR,DGFIN,DGINI,DGIN2,DGIRI,DIE,DR,DGMTVR
"RTN","DGMTSC4V",77,0)
 D GETIENS^DGMTU2(DFN,DGPRI,DGMTDT) G EDTQ:DGERR
"RTN","DGMTSC4V",78,0)
 I $G(DGSEL)]"" W !!,"NAME: ",$$NAME^DGMTU1(DGPRI)
"RTN","DGMTSC4V",79,0)
 S DGIN2=$G(^DGMT(408.21,DGINI,2))
"RTN","DGMTSC4V",80,0)
 S DGMTVR=$P($G(^DGMT(408.31,$G(DGMTI),2)),"^",11)
"RTN","DGMTSC4V",81,0)
 S DR="[DGMT V1 ENTER/EDIT NET WORTH]"
"RTN","DGMTSC4V",82,0)
 S DA=DGINI,DIE="^DGMT(408.21," D ^DIE S:'$D(DGFIN) DGMTOUT=1
"RTN","DGMTSC4V",83,0)
 I DGIN2'=$G(^DGMT(408.21,DGINI,2)) S DR="103////^S X=DUZ;104///^S X=""NOW""" D ^DIE
"RTN","DGMTSC4V",84,0)
EDTQ Q
"RTN","DGMTSCR")
0^29^B14443251
"RTN","DGMTSCR",1,0)
DGMTSCR ;ALB/RMO/CAW - Means Test Screen Read Processor ; 8/1/08 1:21pm
"RTN","DGMTSCR",2,0)
 ;;5.3;Registration;**45,688**;Aug 13, 1993;Build 29
"RTN","DGMTSCR",3,0)
 ;
"RTN","DGMTSCR",4,0)
 ; Input  -- DGRNG    Range of selectable items
"RTN","DGMTSCR",5,0)
 ;           DGMTACT  Means Test Action
"RTN","DGMTSCR",6,0)
 ;           DGMTSC   Screen Driver Array
"RTN","DGMTSCR",7,0)
 ;           DGMTSCI  Screen number
"RTN","DGMTSCR",8,0)
 ;           DGVINI   Veteran Individual Annual Income IEN
"RTN","DGMTSCR",9,0)
 ;           DGVPRI   Veteran Income Relation IEN
"RTN","DGMTSCR",10,0)
 ; Output -- DGDR     Template tags  (ie, 101,102,103,104)
"RTN","DGMTSCR",11,0)
 ;           DGX      User input - maybe modified (ie, 1-4) 
"RTN","DGMTSCR",12,0)
 ;           DGY      Items selected in expanded form  (ie, 1,2,3,4)
"RTN","DGMTSCR",13,0)
 ;    Returned for screen 2 and 4:
"RTN","DGMTSCR",14,0)
 ;           DGSEL    Column selections available  (ie, V, S, C)
"RTN","DGMTSCR",15,0)
 ;           DGSELTY  User input - column selected  (ie, V or S or C)
"RTN","DGMTSCR",16,0)
 ;
"RTN","DGMTSCR",17,0)
EN K DGDR,DGSEL,DGSELTY,DGX,DGY,I D FEED
"RTN","DGMTSCR",18,0)
 I $G(DGSCR1) S X="" G EN1
"RTN","DGMTSCR",19,0)
 W !,DGVI,"<RET>",DGVO," to CONTINUE," W:DGMTACT'="VEW" " ",DGVI,DGRNG,DGVO," or ",DGVI,"'ALL' ",DGVO,"to EDIT," W DGVI," ^N",DGVO," for screen N, or ",DGVI,"'^'",DGVO," to EXIT: " R X:DTIME S:'$T X="^"
"RTN","DGMTSCR",20,0)
EN1 K DGSCR1 S DGX=$$UPPER^DGUTL(X)
"RTN","DGMTSCR",21,0)
 I DGX="^" G Q^DGMTSC
"RTN","DGMTSCR",22,0)
 I DGX?1"^".N,$D(DGMTSC(+$P(DGX,"^",2))) G @($$ROU^DGMTSCU(+$P(DGX,"^",2)))
"RTN","DGMTSCR",23,0)
 I DGMTACT'="VEW","^2^4^"[("^"_DGMTSCI_"^") D SEL I DGSEL[$E(DGX),$E(DGX,2)?1N S DGSELTY=$E(DGX),DGX=$P(DGX,DGSELTY,2)
"RTN","DGMTSCR",24,0)
 I DGMTACT'="VEW",$E(DGX)="A" S X=DGX,Z="^ALL" D IN^DGHELP S:%'=-1 DGX=DGRNG
"RTN","DGMTSCR",25,0)
 I DGX["?" D HLP G Q^DGMTSC:$D(DTOUT)!($D(DUOUT)),@($$ROU^DGMTSCU(DGMTSCI))
"RTN","DGMTSCR",26,0)
 I DGX="",$O(DGMTSC(DGMTSCI)) G @($$ROU^DGMTSCU($O(DGMTSC(DGMTSCI))))
"RTN","DGMTSCR",27,0)
 I DGX="" G Q^DGMTSC
"RTN","DGMTSCR",28,0)
 I DGMTACT'="VEW" D PRO I $D(DGSELTY) S DGX=DGSELTY_DGX
"RTN","DGMTSCR",29,0)
 S:DGMTACT="VEW" DGERR=1 I DGERR D HLP G @($$ROU^DGMTSCU(DGMTSCI))
"RTN","DGMTSCR",30,0)
Q G @($$ROURET^DGMTSCU(DGMTSCI))
"RTN","DGMTSCR",31,0)
 ;
"RTN","DGMTSCR",32,0)
FEED ;Line feed to the bottom of the screen
"RTN","DGMTSCR",33,0)
 N DGB,I
"RTN","DGMTSCR",34,0)
 S DGB=$S('IOSL:24,1:IOSL)-5 F I=$Y:1:DGB W !
"RTN","DGMTSCR",35,0)
 Q
"RTN","DGMTSCR",36,0)
 ;
"RTN","DGMTSCR",37,0)
SEL ;Check available column selections for Veteran, Spouse or Children
"RTN","DGMTSCR",38,0)
 N DGDC,DGNC,DGND,DGSP,DGVIR0,DGX
"RTN","DGMTSCR",39,0)
 D DEP^DGMTSCU2
"RTN","DGMTSCR",40,0)
 S DGSEL="V"_$S(DGSP:"S",1:"")_$S(DGDC:"C",1:"")
"RTN","DGMTSCR",41,0)
SELQ Q
"RTN","DGMTSCR",42,0)
 ;
"RTN","DGMTSCR",43,0)
HLP ;Help display
"RTN","DGMTSCR",44,0)
 N DGIOM,DGLNE,DGMTSCR,DIR,I,X
"RTN","DGMTSCR",45,0)
 S DGHLPF=1 D HD^DGMTSCU
"RTN","DGMTSCR",46,0)
 W !!,"Enter <RET> to continue to the next available screen."
"RTN","DGMTSCR",47,0)
 I DGMTACT'="VEW" W !,"Enter an available item number from ",DGRNG," to edit.",!,"The items should be separated by commas or a range of numbers",!,"separated by a dash, or a combination of commas and dashes."
"RTN","DGMTSCR",48,0)
 I DGMTACT'="VEW"&(DGMTSCI=2!(DGMTSCI=4))&($D(DGSEL)) W !,"To edit a specific column, enter 'V'",$S(DGSEL["S":", 'S'",1:""),$S(DGSEL["C":", 'C'",1:"")," in front of the selected items."
"RTN","DGMTSCR",49,0)
 I DGMTACT'="VEW" W !,"Enter 'ALL' to edit all available items on the screen."
"RTN","DGMTSCR",50,0)
 W !,"Enter '^N' to jump to a select screen.  Enter '^' to exit."
"RTN","DGMTSCR",51,0)
 W !!,"AVAILABLE SCREENS"
"RTN","DGMTSCR",52,0)
 S I=0 F  S I=$O(DGMTSC(I)) Q:'I  W !,"[",+$$SCR^DGMTSCU(I),"]  ",$P($$SCR^DGMTSCU(I),";",2)
"RTN","DGMTSCR",53,0)
 S DGLNE="",DGIOM=$S('IOM:80,1:IOM),$P(DGLNE,"=",(DGIOM-1))=""
"RTN","DGMTSCR",54,0)
 W !,DGLNE S DIR(0)="E" D ^DIR
"RTN","DGMTSCR",55,0)
 Q
"RTN","DGMTSCR",56,0)
 ;
"RTN","DGMTSCR",57,0)
PRO ;Process user selection; cnt - dash - parse - selection
"RTN","DGMTSCR",58,0)
 N DGC,DGD,DGP,DGS
"RTN","DGMTSCR",59,0)
 S DGC=0,DGERR=0,DGY="",DGDR=""
"RTN","DGMTSCR",60,0)
PARSE S DGC=DGC+1,DGP=$P(DGX,",",DGC) G PROQ:DGP=""
"RTN","DGMTSCR",61,0)
 I DGP?.N1"-".N S DGD="" F DGS=$P(DGP,"-"):1:$P(DGP,"-",2) D CHK Q:DGERR
"RTN","DGMTSCR",62,0)
 I '$D(DGD) S DGS=DGP D CHK
"RTN","DGMTSCR",63,0)
 K DGD G PROQ:DGERR,PARSE
"RTN","DGMTSCR",64,0)
PROQ Q
"RTN","DGMTSCR",65,0)
 ;
"RTN","DGMTSCR",66,0)
CHK I $D(DGD),+$P(DGP,"-",2)<+$P(DGP,"-",1) S DGERR=1
"RTN","DGMTSCR",67,0)
 I 'DGERR,DGS'?.N S DGERR=1
"RTN","DGMTSCR",68,0)
 I 'DGERR&(DGS>$P(DGRNG,"-",2)!(DGS<$P(DGRNG,"-"))) S DGERR=1
"RTN","DGMTSCR",69,0)
 I 'DGERR S DGY=DGY_$S($L(DGY):",",1:"")_DGS,DGDR=DGDR_$S($L(DGDR):",",1:"")_(DGS+100)
"RTN","DGMTSCR",70,0)
 Q
"RTN","DGMTSCU")
0^1^B13382727
"RTN","DGMTSCU",1,0)
DGMTSCU ;ALB/RMO/CAW,LBD - Means Test Screen Driver Utilities ;21 JAN 1992 8:00 pm
"RTN","DGMTSCU",2,0)
 ;;5.3;Registration;**456,688**;Aug 13, 1993;Build 29
"RTN","DGMTSCU",3,0)
 ;
"RTN","DGMTSCU",4,0)
SETUP ;Set-up the screen driver array and required screen variables
"RTN","DGMTSCU",5,0)
 ; Input  -- DFN              Patient IEN
"RTN","DGMTSCU",6,0)
 ;           DGMTDT           Date of Test
"RTN","DGMTSCU",7,0)
 ;           DGMTYPT          Type of Test
"RTN","DGMTSCU",8,0)
 ; Output -- DGMTSC           Screen Driver Array
"RTN","DGMTSCU",9,0)
 ;           DGVPRI           Veteran Patient Relation IEN
"RTN","DGMTSCU",10,0)
 ;           DGVINI           Veteran Individual Annual Income IEN
"RTN","DGMTSCU",11,0)
 ;           DGVIRI           Veteran Income Relation IEN
"RTN","DGMTSCU",12,0)
 ;           DGMTPAR          Annual Means Test Parameter Array
"RTN","DGMTSCU",13,0)
 ;           DGMTGMT          GMT Threshold Values
"RTN","DGMTSCU",14,0)
 ;           DGMTNWC          Net Worth Calculation flag
"RTN","DGMTSCU",15,0)
 ;           DGERR            1=ERROR and 0=NO ERROR
"RTN","DGMTSCU",16,0)
 N DGINI,DGIRI,DGLY,DGPRI,DGPRTY,DGSCR,I,X
"RTN","DGMTSCU",17,0)
 K DGMTSC S DGERR=0,DGLY=$$LYR^DGMTSCU1(DGMTDT)
"RTN","DGMTSCU",18,0)
 S DGSCR=$S(DGMTYPT=1:5,DGMTYPT=2&($$ASKNW^DGMTCOU):5,1:4)
"RTN","DGMTSCU",19,0)
 ;
"RTN","DGMTSCU",20,0)
 ;* Check version; IF pre 2005 form, call version 0 input
"RTN","DGMTSCU",21,0)
 I (+$P($G(^DGMT(408.31,DGMTI,2)),"^",11)=0) DO
"RTN","DGMTSCU",22,0)
 . F I=1:1 S X=$P($T(SCRNS+I),";;",2) Q:X="QUIT"!(+X=DGSCR)  S DGMTSC(+X)=X
"RTN","DGMTSCU",23,0)
 ;* Check version; IF Feb-2005 form, call version 1 input
"RTN","DGMTSCU",24,0)
 I (+$P($G(^DGMT(408.31,DGMTI,2)),"^",11)=1) DO
"RTN","DGMTSCU",25,0)
 . F I=1:1 S X=$P($T(SCRNS1+I),";;",2) Q:X="QUIT"!(+X=DGSCR)  S DGMTSC(+X)=X
"RTN","DGMTSCU",26,0)
 ;
"RTN","DGMTSCU",27,0)
 D NEW^DGRPEIS1 S:DGPRI'>0 DGERR=1 G Q:DGERR S DGVPRI=DGPRI
"RTN","DGMTSCU",28,0)
 D GETIENS^DGMTU2(DFN,DGPRI,DGMTDT) G Q:DGERR S DGVINI=DGINI,DGVIRI=DGIRI
"RTN","DGMTSCU",29,0)
 D PAR S:DGMTPAR="" DGERR=1
"RTN","DGMTSCU",30,0)
Q Q
"RTN","DGMTSCU",31,0)
 ;
"RTN","DGMTSCU",32,0)
PAR ;Annual Means Test Parameters
"RTN","DGMTSCU",33,0)
 ; Input  -- DGLY             Last Year
"RTN","DGMTSCU",34,0)
 ; Output -- DGMTPAR          Means Test Parameter 0th node
"RTN","DGMTSCU",35,0)
 ;           DGMTGMT          GMT Threshold values
"RTN","DGMTSCU",36,0)
 ;           DGMTNWC          Net Worth Calculation flag
"RTN","DGMTSCU",37,0)
 ;    Returned if the current year's parameters are not available:
"RTN","DGMTSCU",38,0)
 ;           DGMTPAR("PREV")  Previous Year Income Parameters
"RTN","DGMTSCU",39,0)
 N GMT
"RTN","DGMTSCU",40,0)
 S DGMTPAR=$S($D(^DG(43,1,"MT",DGLY+10000,0)):^(0),1:"")
"RTN","DGMTSCU",41,0)
 I DGMTPAR']"",$D(^DG(43,1,"MT",DGLY,0)) S DGMTPAR=^(0),DGMTPAR("PREV")=""
"RTN","DGMTSCU",42,0)
 ; Get Net Worth Calculation flag
"RTN","DGMTSCU",43,0)
 S DGMTNWC=+$G(^DG(43,1,"GMT"))
"RTN","DGMTSCU",44,0)
 ; Get GMT Threshold values for this veteran
"RTN","DGMTSCU",45,0)
 S DGMTGMT=""
"RTN","DGMTSCU",46,0)
 D GETFIPS^EASAILK(DFN,DGLY,.GMT)
"RTN","DGMTSCU",47,0)
 I '$G(GMT("GMTIEN")) Q
"RTN","DGMTSCU",48,0)
 S DGMTGMT=$G(^EAS(712.5,GMT("GMTIEN"),1))
"RTN","DGMTSCU",49,0)
 Q
"RTN","DGMTSCU",50,0)
 ;
"RTN","DGMTSCU",51,0)
HD ;Print screen header
"RTN","DGMTSCU",52,0)
 ; Input  -- DGMTSCI  Screen number
"RTN","DGMTSCU",53,0)
 ;           DGVPRI   Veteran Patient Relation IEN
"RTN","DGMTSCU",54,0)
 ;           DGMTDT   Date of Test
"RTN","DGMTSCU",55,0)
 ;           DGHLPF   Help Flag  (Optional)
"RTN","DGMTSCU",56,0)
 ; Output -- Screen Header
"RTN","DGMTSCU",57,0)
 N DGHDR,DGIOM,DGLNE,DGMTSCR,DGTAB,Y
"RTN","DGMTSCU",58,0)
 S:'$D(DGHLPF) DGHLPF=0
"RTN","DGMTSCU",59,0)
 S DGLNE="",DGIOM=$S('IOM:80,1:IOM),$P(DGLNE,"=",(DGIOM-1))=""
"RTN","DGMTSCU",60,0)
 S DGHDR=$P($$SCR(DGMTSCI),";",2)_", SCREEN <"_+$$SCR(DGMTSCI)_"> "_$S(DGHLPF:"HELP",1:"")
"RTN","DGMTSCU",61,0)
 S DGTAB=DGIOM-$L(DGHDR)\2
"RTN","DGMTSCU",62,0)
 S (DGVI,DGVO)="" I $S('$D(IOST(0)):1,'$D(^DG(43,1,0)):1,'$P(^DG(43,1,0),"^",36):1,$D(^DG(43,1,"TERM",IOST(0))):1,1:0) G HDNH ;goto HDNH if not high intensity
"RTN","DGMTSCU",63,0)
 S X="IOINHI;IOINLOW" D ENDR^%ZISS K X S DGVI=IOINHI,DGVO=IOINLOW S X=132 X ^%ZOSF("RM")
"RTN","DGMTSCU",64,0)
HDNH ;
"RTN","DGMTSCU",65,0)
 W @IOF W ?DGTAB,DGVI,DGHDR,DGVO
"RTN","DGMTSCU",66,0)
 I 'DGHLPF W !,$$NAME^DGMTU1(DGVPRI),"  ",$$SSN^DGMTU1(DGVPRI),?(DGIOM-24),"ANNUAL INCOME FOR " S Y=$$LYR^DGMTSCU1(DGMTDT) X ^DD("DD") W Y
"RTN","DGMTSCU",67,0)
 W !,DGLNE
"RTN","DGMTSCU",68,0)
 K DGHLPF Q
"RTN","DGMTSCU",69,0)
 ;
"RTN","DGMTSCU",70,0)
SCR(DGMTSCI) ;Screen name and number
"RTN","DGMTSCU",71,0)
 ;         Input  -- DGMTSCI  Screen number
"RTN","DGMTSCU",72,0)
 ;         Output -- Screen number;Screen name
"RTN","DGMTSCU",73,0)
 N DGMTSCR
"RTN","DGMTSCU",74,0)
 S DGMTSCR=$P($G(DGMTSC(DGMTSCI)),";",1,2)
"RTN","DGMTSCU",75,0)
 Q $G(DGMTSCR)
"RTN","DGMTSCU",76,0)
 ;
"RTN","DGMTSCU",77,0)
ROU(DGMTSCI) ;Screen entry routine
"RTN","DGMTSCU",78,0)
 ;         Input  -- DGMTSCI  Screen number
"RTN","DGMTSCU",79,0)
 ;         Output -- Routine name
"RTN","DGMTSCU",80,0)
 N DGROU
"RTN","DGMTSCU",81,0)
 S DGROU=$P($G(DGMTSC(DGMTSCI)),";",3)
"RTN","DGMTSCU",82,0)
 Q $G(DGROU)
"RTN","DGMTSCU",83,0)
 ;
"RTN","DGMTSCU",84,0)
ROURET(DGMTSCI) ;Screen read processor return routine
"RTN","DGMTSCU",85,0)
 ;         Input  -- DGMTSCI  Screen number
"RTN","DGMTSCU",86,0)
 ;         Output -- Routine name
"RTN","DGMTSCU",87,0)
 N DGROU
"RTN","DGMTSCU",88,0)
 S DGROU=$P($G(DGMTSC(DGMTSCI)),";",4)
"RTN","DGMTSCU",89,0)
 Q $G(DGROU)
"RTN","DGMTSCU",90,0)
 ;
"RTN","DGMTSCU",91,0)
 ;Version 0 screen processing
"RTN","DGMTSCU",92,0)
SCRNS ;Screen Number;Screen Name;Screen Entry Routine;Reader Return Routine
"RTN","DGMTSCU",93,0)
 ;;1;MARITAL STATUS/DEPENDENTS;EN^DGMTSC1;EN1^DGMTSC1
"RTN","DGMTSCU",94,0)
 ;;2;PREVIOUS CALENDAR YEAR GROSS INCOME;EN^DGMTSC2;EN1^DGMTSC2
"RTN","DGMTSCU",95,0)
 ;;3;DEDUCTIBLE EXPENSES;EN^DGMTSC3;EN1^DGMTSC3
"RTN","DGMTSCU",96,0)
 ;;4;PREVIOUS CALENDAR YEAR NET WORTH;EN^DGMTSC4;EN1^DGMTSC4
"RTN","DGMTSCU",97,0)
 ;;QUIT
"RTN","DGMTSCU",98,0)
 ;
"RTN","DGMTSCU",99,0)
 ;Version 1 screen processing
"RTN","DGMTSCU",100,0)
SCRNS1 ;Screen Number;Screen Name;Screen Entry Routine;Reader Return Routine
"RTN","DGMTSCU",101,0)
 ;;1;MARITAL STATUS/DEPENDENTS;EN^DGMTSC1;EN1^DGMTSC1
"RTN","DGMTSCU",102,0)
 ;;2;PREVIOUS CALENDAR YEAR GROSS INCOME;EN^DGMTSC2V;EN1^DGMTSC2V
"RTN","DGMTSCU",103,0)
 ;;3;DEDUCTIBLE EXPENSES;EN^DGMTSC3V;EN1^DGMTSC3V
"RTN","DGMTSCU",104,0)
 ;;4;PREVIOUS CALENDAR YEAR NET WORTH;EN^DGMTSC4V;EN1^DGMTSC4V
"RTN","DGMTSCU",105,0)
 ;;QUIT
"RTN","DGMTSCU3")
0^14^B8099876
"RTN","DGMTSCU3",1,0)
DGMTSCU3 ;ALB/RMO - Means Test Screen Variable Utilities Cont. ;4 MAY 1992 7:45 am
"RTN","DGMTSCU3",2,0)
 ;;5.3;Registration;**45,688**;Aug 13, 1993;Build 29
"RTN","DGMTSCU3",3,0)
 ;
"RTN","DGMTSCU3",4,0)
INC ;Determine income, expense and net worth
"RTN","DGMTSCU3",5,0)
 ; Input  -- DFN      Patient file IEN
"RTN","DGMTSCU3",6,0)
 ;           DGCOMF   Means Test Completion Flag  (Optional)
"RTN","DGMTSCU3",7,0)
 ;                    (1 if completing means test)
"RTN","DGMTSCU3",8,0)
 ;           DGMTDT   Date of Test
"RTN","DGMTSCU3",9,0)
 ;           DGMTI    Annual Means Test IEN
"RTN","DGMTSCU3",10,0)
 ;           DGVINI   Veteran Individual Annual Income IEN
"RTN","DGMTSCU3",11,0)
 ;           DGSP     Spouse 1=YES and 0=NO (mt income)
"RTN","DGMTSCU3",12,0)
 ;           DGDC     Dependent children 1=YES and 0=NO (mt income)
"RTN","DGMTSCU3",13,0)
 ;           DGMTPAR  Annual Means Test Parameters
"RTN","DGMTSCU3",14,0)
 ; Output -- DGIN0    Annual Income 0th node array (income)
"RTN","DGMTSCU3",15,0)
 ;           DGIN1    Annual Income 1 node array (expense)
"RTN","DGMTSCU3",16,0)
 ;           DGIN2    Annual Income 2 node array (net worth)
"RTN","DGMTSCU3",17,0)
 ;           DGINT    Total income
"RTN","DGMTSCU3",18,0)
 ;           DGDET    Total deductible expenses
"RTN","DGMTSCU3",19,0)
 ;           DGNWT    Total net worth
"RTN","DGMTSCU3",20,0)
 ;           DGINTF   Income flag
"RTN","DGMTSCU3",21,0)
 ;           DGNWTF   Net worth flag
"RTN","DGMTSCU3",22,0)
 N DGCNT,DGINC,DGINR,I,J,Y
"RTN","DGMTSCU3",23,0)
 D ALL^DGMTU21(DFN,"VCS",DGMTDT,"IR",$S($G(DGMTI):DGMTI,1:""))
"RTN","DGMTSCU3",24,0)
 S DGIN0("V")=$G(^DGMT(408.21,DGVINI,0)),DGIN1("V")=$G(^(1)),DGIN2("V")=$G(^(2))
"RTN","DGMTSCU3",25,0)
 S DGINT=$$TOT^DGMTSCU1(DGIN0("V"),8,17)
"RTN","DGMTSCU3",26,0)
 S DGDET=$$TOT^DGMTSCU1(DGIN1("V"),1,3)
"RTN","DGMTSCU3",27,0)
 S DGNWT=$$TOT^DGMTSCU1(DGIN2("V"),1,4)-$P(DGIN2("V"),"^",5)
"RTN","DGMTSCU3",28,0)
 I $G(DGCOMF) D MT(DGINR("V"),DGMTI)
"RTN","DGMTSCU3",29,0)
 I DGSP S (DGIN0("S"),DGIN1("S"),DGIN2("S"))="" D SPOUSE:$D(DGINC("S"))
"RTN","DGMTSCU3",30,0)
 I DGDC S (DGIN0("C"),DGIN1("C"))="",DGIN2("C")="",DGCNT=0 F  S DGCNT=$O(DGINC("C",DGCNT)) Q:'DGCNT  D CHK^DGMTSCU2,CHILD:Y
"RTN","DGMTSCU3",31,0)
 S DGINTF=$S(DGINT:1,1:0) I 'DGINTF S J="" F  S J=$O(DGIN0(J)) Q:J=""!(DGINTF)  F I=8:1:17 Q:DGINTF  S:$P(DGIN0(J),"^",I)]"" DGINTF=1
"RTN","DGMTSCU3",32,0)
 S DGNWTF=$S(DGNWT:1,1:0) I 'DGNWTF S J="" F  S J=$O(DGIN2(J)) Q:J=""!(DGNWTF)  F I=1:1:5 Q:DGNWTF  S:$P(DGIN2(J),"^",I)]"" DGNWTF=1
"RTN","DGMTSCU3",33,0)
 Q
"RTN","DGMTSCU3",34,0)
 ;
"RTN","DGMTSCU3",35,0)
SPOUSE ;Determine spouse income and net worth
"RTN","DGMTSCU3",36,0)
 S DGIN0("S")=$G(^DGMT(408.21,DGINC("S"),0)),DGIN1("S")=$G(^(1)),DGIN2("S")=$G(^(2))
"RTN","DGMTSCU3",37,0)
 S DGINT=DGINT+$$TOT^DGMTSCU1(DGIN0("S"),8,17)
"RTN","DGMTSCU3",38,0)
 S DGNWT=DGNWT+($$TOT^DGMTSCU1(DGIN2("S"),1,4)-$P(DGIN2("S"),"^",5))
"RTN","DGMTSCU3",39,0)
 I $G(DGCOMF) D MT(DGINR("S"),DGMTI)
"RTN","DGMTSCU3",40,0)
SPOUSEQ Q
"RTN","DGMTSCU3",41,0)
 ;
"RTN","DGMTSCU3",42,0)
CHILD ;Determine total dependent children(s) income and expense
"RTN","DGMTSCU3",43,0)
 N DGCE,DGEMP,I,X
"RTN","DGMTSCU3",44,0)
 S X=$G(^DGMT(408.21,DGINC("C",DGCNT),0)) F I=8:1:17 I $P(X,"^",I)]"" S $P(DGIN0("C"),"^",I)=$P(DGIN0("C"),"^",I)+$P(X,"^",I)
"RTN","DGMTSCU3",45,0)
 S DGEMP=$P(X,"^",14),DGINT=DGINT+$$TOT^DGMTSCU1(X,8,17)
"RTN","DGMTSCU3",46,0)
 S X=$G(^DGMT(408.21,DGINC("C",DGCNT),1)) I $P(X,"^",3)]"" S $P(DGIN1("C"),"^",3)=$P(DGIN1("C"),"^",3)+$P(X,"^",3)
"RTN","DGMTSCU3",47,0)
 S DGCE=(DGEMP-$P(DGMTPAR,"^",17))-$P(X,"^",3)
"RTN","DGMTSCU3",48,0)
 S DGDET=DGDET+DGEMP-$S($G(DGCE)>0:DGCE,1:0)
"RTN","DGMTSCU3",49,0)
 I $G(DGCOMF) D MT(DGINR("C",DGCNT),DGMTI)
"RTN","DGMTSCU3",50,0)
 S X=$G(^DGMT(408.21,DGINC("C",DGCNT),2))
"RTN","DGMTSCU3",51,0)
 F I=1:1:9 I $P(X,"^",I)]"" S $P(DGIN2("C"),"^",I)=$P(DGIN2("C"),"^",I)+$P(X,"^",I)
"RTN","DGMTSCU3",52,0)
 S DGNWT=DGNWT+($$TOT^DGMTSCU1(X,1,4)-$P(X,"^",5))
"RTN","DGMTSCU3",53,0)
CHILDQ Q
"RTN","DGMTSCU3",54,0)
 ;
"RTN","DGMTSCU3",55,0)
MT(DGINR,DGMTI) ;Update Means Test IEN in Individual Annual Income file
"RTN","DGMTSCU3",56,0)
 ;         Input  -- DGINR  Income Relation IEN
"RTN","DGMTSCU3",57,0)
 ;                   DGMTI  Annual Means Test IEN
"RTN","DGMTSCU3",58,0)
 ;         Output -- Update Means Test IEN
"RTN","DGMTSCU3",59,0)
 N DA,DIE,DR
"RTN","DGMTSCU3",60,0)
 S DA=DGINR,DIE="^DGMT(408.22,",DR="31////^S X="_DGMTI D ^DIE
"RTN","DGMTSCU3",61,0)
 Q
"RTN","DGMTU11")
0^35^B23774730
"RTN","DGMTU11",1,0)
DGMTU11 ;ALB/MIR,TDM,GTS - Patient Relation Retrieval Utilities ; 10/30/06
"RTN","DGMTU11",2,0)
 ;;5.3;Registration;**33,45,182,311,688**;Aug 13, 1993;Build 29
"RTN","DGMTU11",3,0)
 ;
"RTN","DGMTU11",4,0)
 ;
"RTN","DGMTU11",5,0)
 ;=======================================================================
"RTN","DGMTU11",6,0)
 ; The following utilities will obtain data from the PATIENT RELATION
"RTN","DGMTU11",7,0)
 ; file
"RTN","DGMTU11",8,0)
 ;=======================================================================
"RTN","DGMTU11",9,0)
 ;
"RTN","DGMTU11",10,0)
 ;
"RTN","DGMTU11",11,0)
GETREL(DFN,DGTYPE,DGDT,DGMT) ; Get all active dependents for a patient
"RTN","DGMTU11",12,0)
 ;
"RTN","DGMTU11",13,0)
 ;     Input -- DFN as the IEN of file 2 (for the patient)
"RTN","DGMTU11",14,0)
 ;              DGTYPE containing the letters V, S, C, or D representing
"RTN","DGMTU11",15,0)
 ;                     the type of dependents returned
"RTN","DGMTU11",16,0)
 ;                     (C and D should be mutually exclusive)
"RTN","DGMTU11",17,0)
 ;              DGDT [optional] as active date...DT if not  defined
"RTN","DGMTU11",18,0)
 ;                   if no month/day, checks entire year/month
"RTN","DGMTU11",19,0)
 ;              DGMT [optional] IFN of means test
"RTN","DGMTU11",20,0)
 ;    Output -- DGREL("V") = veteran reference
"RTN","DGMTU11",21,0)
 ;              DGREL("S") = spouse reference
"RTN","DGMTU11",22,0)
 ;              DGREL("C",counter) = child reference (only MT dep)
"RTN","DGMTU11",23,0)
 ;              DGREL("D",counter) = dependent reference (all deps)
"RTN","DGMTU11",24,0)
 ;              reference=IFN of 408.12^dep file ref
"RTN","DGMTU11",25,0)
 ;              DGDEP = number of active dependents
"RTN","DGMTU11",26,0)
 ;
"RTN","DGMTU11",27,0)
 N CT,DGX,IFN,IEN,REF,X,DGCD K DGREL
"RTN","DGMTU11",28,0)
 S (CT,IFN,IEN)=0,DGDT=$S($G(DGDT):DGDT,1:DT)
"RTN","DGMTU11",29,0)
 D:$G(DGMT) RELINC  ;IFN of Means Test is supplied
"RTN","DGMTU11",30,0)
 D:('$G(DGREL("V"))&(DGTYPE["V"))!('$G(DGMT)) RELFND ;No Means Test IFN or problem setting DGREL(V)
"RTN","DGMTU11",31,0)
 D GETRELQ ; Increment the dependent count
"RTN","DGMTU11",32,0)
 Q 
"RTN","DGMTU11",33,0)
RELINC F  S IFN=$O(^DGMT(408.22,"AMT",DGMT,DFN,IFN)) Q:'IFN  D
"RTN","DGMTU11",34,0)
 .S IEN=+$P($G(^DGMT(408.21,IFN,0)),"^",2),DGX=$G(^DGPR(408.12,IEN,0))
"RTN","DGMTU11",35,0)
 .D SET
"RTN","DGMTU11",36,0)
 Q
"RTN","DGMTU11",37,0)
RELFND S IEN=0 F  S IEN=$O(^DGPR(408.12,"B",DFN,IEN)) Q:'IEN  S DGX=$G(^DGPR(408.12,IEN,0)) I $$ACTIVE(IEN,DGDT) D SET
"RTN","DGMTU11",38,0)
 Q
"RTN","DGMTU11",39,0)
GETRELQ S DGDEP=CT
"RTN","DGMTU11",40,0)
 Q
"RTN","DGMTU11",41,0)
 ;
"RTN","DGMTU11",42,0)
 ;
"RTN","DGMTU11",43,0)
SET ; set variables into array...first subscript is relation type, second
"RTN","DGMTU11",44,0)
 ; is IEN of file 408.12 (patient relations file)
"RTN","DGMTU11",45,0)
 ;
"RTN","DGMTU11",46,0)
 N REF,TYPE
"RTN","DGMTU11",47,0)
 S X=$P(DGX,"^",2),REF=$P(DGX,"^",3),TYPE=""
"RTN","DGMTU11",48,0)
 I X=1,(DGTYPE["V") S TYPE="V"
"RTN","DGMTU11",49,0)
 I X=2,(DGTYPE["S") S TYPE="S"
"RTN","DGMTU11",50,0)
 I X>2,(X<7) S TYPE=$S(DGTYPE["D":"D",DGTYPE["C":"C",1:"")
"RTN","DGMTU11",51,0)
 I X>6,(DGTYPE["D") S TYPE="D"
"RTN","DGMTU11",52,0)
 I 'X!(TYPE']"") Q  ; not valid or not chosen
"RTN","DGMTU11",53,0)
 I "VS"[TYPE,$D(DGREL(TYPE)) Q  ; take first self or spouse on file
"RTN","DGMTU11",54,0)
 S REF=IEN_"^"_REF
"RTN","DGMTU11",55,0)
 I "VS"[TYPE S DGREL(TYPE)=REF
"RTN","DGMTU11",56,0)
 I "CD"[TYPE&('$G(DGCD(REF))) S CT=CT+1,DGREL(TYPE,CT)=REF,DGCD(REF)=CT
"RTN","DGMTU11",57,0)
 Q
"RTN","DGMTU11",58,0)
 ;
"RTN","DGMTU11",59,0)
 ;
"RTN","DGMTU11",60,0)
ACTIVE(IEN,DGDT) ; Extrinsic function to determine if 408.12 entry is active
"RTN","DGMTU11",61,0)
 ;
"RTN","DGMTU11",62,0)
 ;     Input -- IEN as internal entry number of pt relation file
"RTN","DGMTU11",63,0)
 ;              DGDT as 'as of' date (uses DT if undefined)
"RTN","DGMTU11",64,0)
 ;    Output -- 1 if active, 0 otherwise
"RTN","DGMTU11",65,0)
 ;
"RTN","DGMTU11",66,0)
 N DGFL,DGID,MIEN,DGNOM,DGNOY,ID,Y
"RTN","DGMTU11",67,0)
 S DGID=$S($G(DGDT):DGDT,1:DT) I '$P(DGID,".",2) S $P(DGID,".",2)=2359
"RTN","DGMTU11",68,0)
 S (DGFL,Y,DGNOM,DGNOY)=0
"RTN","DGMTU11",69,0)
 S ID=DGID S:'$E(ID,4,5) ID=$E(ID,1,3)_99_$E(ID,6,99),DGNOM=1 I '$E(ID,6,7) S ID=$E(ID,1,5)_99_$E(ID,8,99),DGNOY=1 ;end of year or end of month if nothing passed
"RTN","DGMTU11",70,0)
 S ID=-ID,DGID=-DGID
"RTN","DGMTU11",71,0)
 F  S ID=$O(^DGPR(408.12,IEN,"E","AID",ID)) Q:'ID!DGFL!Y  S MIEN=$O(^(ID,0)) D
"RTN","DGMTU11",72,0)
 . S X=$G(^DGPR(408.12,IEN,"E",MIEN,0)) I 'X Q
"RTN","DGMTU11",73,0)
 . ;I 'DGNOY,'DGNOM S DGFL=1 S:$P(X,"^",2) Y=1 Q
"RTN","DGMTU11",74,0)
 . I $P(X,"^",2)=1 S Y=1 Q
"RTN","DGMTU11",75,0)
 . I ID>DGID S DGFL=1 ;quit...already before begin date
"RTN","DGMTU11",76,0)
 Q $S(Y:1,1:0)
"RTN","DGMTU11",77,0)
 ;
"RTN","DGMTU11",78,0)
 ;
"RTN","DGMTU11",79,0)
RESET(DFN,DGDT,DGMT) ;
"RTN","DGMTU11",80,0)
 ; Sets 'NUMBER OF DEPENDENT CHILDREN' (#.13) and
"RTN","DGMTU11",81,0)
 ;      'DEPENDENT CHILDREN' (#.08) in Income Relation File (#408.22)
"RTN","DGMTU11",82,0)
 ;      based upon the count of active child dependents in Patient
"RTN","DGMTU11",83,0)
 ;      Relation File (#408.12).
"RTN","DGMTU11",84,0)
 ;
"RTN","DGMTU11",85,0)
 ; IN:  DFN  - IEN of Patient File (#2)
"RTN","DGMTU11",86,0)
 ;      DGDT - [optional] as 'as of' date
"RTN","DGMTU11",87,0)
 ;      DGMT - [optional] means test IEN
"RTN","DGMTU11",88,0)
 ; OUT: SETS (.08) & (.13) fields of (408.22)
"RTN","DGMTU11",89,0)
 ;      No Formal Output
"RTN","DGMTU11",90,0)
 ;
"RTN","DGMTU11",91,0)
 N DGNODE,DGDEPYN,DGDEP,DGREL,DGX,PRIEN,SPOUSE
"RTN","DGMTU11",92,0)
 S (CT,IEN,PRIEN,SPOUSE,DGDEP)=0,DGDT=$S($G(DGDT):DGDT,1:$$LYR^DGMTSCU1(DT))
"RTN","DGMTU11",93,0)
 D GETREL(DFN,"VSD",DGDT,$G(DGMT)) S PRIEN=+$G(DGREL("V")),SPOUSE=$S($G(DGREL("S")):1,1:0)
"RTN","DGMTU11",94,0)
 S DGX=$$IAI^DGMTU3(+PRIEN,($E(DGDT,1,3)_"0000"),$S($G(DGMT):$P($G(^DGMT(408.31,DGMT,0)),"^",19),1:1)) ;408.21 IEN
"RTN","DGMTU11",95,0)
 S DGX=$O(^DGMT(408.22,"AIND",+DGX,0)) ;408.22 IEN
"RTN","DGMTU11",96,0)
 S DGNODE=$G(^DGMT(408.22,+DGX,0)) I DGNODE']"" Q
"RTN","DGMTU11",97,0)
 S DGDEPYN=$S(DGDEP:1,1:0)
"RTN","DGMTU11",98,0)
 I $P(DGNODE,"^",13)'=DGDEP!($P(DGNODE,"^",8)'=DGDEPYN)!($P(DGNODE,"^",5)'=SPOUSE) D
"RTN","DGMTU11",99,0)
 .S DIE="^DGMT(408.22,",DA=+DGX,DR=".13////^S X=DGDEP"_$S(+$P(DGNODE,"^",8)=DGDEPYN:"",1:";.08////^S X=DGDEPYN")_$S($P(DGNODE,"^",5)=SPOUSE:"",1:";.05////^S X=SPOUSE")
"RTN","DGMTU11",100,0)
 .D ^DIE
"RTN","DGMTU11",101,0)
 .K DR,DA,DIE,DIC,Y,X
"RTN","DGMTU11",102,0)
 Q
"RTN","DGMTU11",103,0)
 ;
"RTN","DGMTU11",104,0)
GETINACD(DFN,DGREL) ; Get all INACTIVE dependents for a patient
"RTN","DGMTU11",105,0)
 ;     Input -- DFN as the IEN of file 2 (for the patient)
"RTN","DGMTU11",106,0)
 ;              DGREL as Array of active spouse/dependents
"RTN","DGMTU11",107,0)
 ;    Output -- DGIREL("S",counter) = spouse reference
"RTN","DGMTU11",108,0)
 ;              DGIREL("C",counter) = child reference
"RTN","DGMTU11",109,0)
 N IEN,XCTR,TMPDGEL,XITYP,EDT,IFN,NODE
"RTN","DGMTU11",110,0)
 K DGIREL
"RTN","DGMTU11",111,0)
 Q:'$D(DGREL)
"RTN","DGMTU11",112,0)
 S IEN=$P($G(DGREL("S")),U) S:IEN'="" TMPDGREL(IEN)=""
"RTN","DGMTU11",113,0)
 S XCTR="" F  S XCTR=$O(DGREL("C",XCTR)) Q:XCTR=""  D
"RTN","DGMTU11",114,0)
 . S IEN=$P(DGREL("C",XCTR),U) S:IEN'="" TMPDGREL(IEN)=""
"RTN","DGMTU11",115,0)
 S IEN=0 F  S IEN=$O(^DGPR(408.12,"B",DFN,IEN)) Q:IEN=""  D
"RTN","DGMTU11",116,0)
 . Q:($D(TMPDGREL(IEN)))!('$D(^DGPR(408.12,IEN,"E")))
"RTN","DGMTU11",117,0)
 . S XITYP=$P($G(^DGPR(408.12,IEN,0)),U,2)
"RTN","DGMTU11",118,0)
 . S XITYP=$S(XITYP=2:"S",((XITYP>2)&(XITYP<7)):"C",1:"") Q:XITYP=""
"RTN","DGMTU11",119,0)
 . S EDT=$O(^DGPR(408.12,IEN,"E","AID","")) Q:EDT=""
"RTN","DGMTU11",120,0)
 . S IFN=$O(^DGPR(408.12,IEN,"E","AID",EDT,"")) Q:IFN=""
"RTN","DGMTU11",121,0)
 . Q:$P($G(^DGPR(408.12,IEN,"E",IFN,0)),U,2)   ;Don't want Active
"RTN","DGMTU11",122,0)
 . S NODE=$G(^DGPR(408.12,IEN,0))
"RTN","DGMTU11",123,0)
 . S DGIREL(XITYP,$O(DGIREL(XITYP,""),-1)+1)=IEN_U_$P(NODE,U,3)_U_(EDT*-1)
"RTN","DGMTU11",124,0)
 Q
"RTN","DGMTU11",125,0)
 ;
"RTN","DGMTU11",126,0)
CNTDEPS(DFN) ;Count Dependent children
"RTN","DGMTU11",127,0)
 ; DG*5.3*688 - EVC changes; GTS
"RTN","DGMTU11",128,0)
 ; Called by DGDEP4 and DGRPEIS1
"RTN","DGMTU11",129,0)
 ;
"RTN","DGMTU11",130,0)
 ;INPUT:
"RTN","DGMTU11",131,0)
 ;  DFN - Patient file IEN for MT Veteran
"RTN","DGMTU11",132,0)
 ;OUTPUT:
"RTN","DGMTU11",133,0)
 ;  Number of child dependents
"RTN","DGMTU11",134,0)
 ;
"RTN","DGMTU11",135,0)
 N IEN,DEPCNT,DGX
"RTN","DGMTU11",136,0)
 S DEPCNT=0
"RTN","DGMTU11",137,0)
 S IEN=0
"RTN","DGMTU11",138,0)
 F  S IEN=$O(^DGPR(408.12,"B",DFN,IEN)) Q:'IEN  DO
"RTN","DGMTU11",139,0)
 . S DGX=$G(^DGPR(408.12,IEN,0))
"RTN","DGMTU11",140,0)
 . I ($P(DGX,U,2)>2),($P(DGX,U,2)<7) S DEPCNT=DEPCNT+1
"RTN","DGMTU11",141,0)
 Q DEPCNT
"RTN","DGMTU2")
0^15^B46628572
"RTN","DGMTU2",1,0)
DGMTU2 ;ALB/RMO - Income Utilities ;28 JAN 1992 11:00 am
"RTN","DGMTU2",2,0)
 ;;5.3;Registration;**33,688**;Aug 13, 1993;Build 29
"RTN","DGMTU2",3,0)
 ;
"RTN","DGMTU2",4,0)
GETIENS(DFN,DGPRI,DGDT) ;Look-up individual annual income and income relation
"RTN","DGMTU2",5,0)
 ;                 Input  -- DFN    Patient file IEN
"RTN","DGMTU2",6,0)
 ;                           DGPRI  Patient Relation IEN
"RTN","DGMTU2",7,0)
 ;                           DGDT   Date/Time
"RTN","DGMTU2",8,0)
 ;                 Output -- DGINI  Individual Annual Income IEN
"RTN","DGMTU2",9,0)
 ;                           DGIRI  Income Relation IEN
"RTN","DGMTU2",10,0)
 ;                           DGERR  1=ERROR and 0=NO ERROR
"RTN","DGMTU2",11,0)
 S DGERR=0
"RTN","DGMTU2",12,0)
 S DGINI=$$GETIN(DFN,DGPRI,DGDT) S:DGINI<0 DGERR=1
"RTN","DGMTU2",13,0)
 I 'DGERR S DGIRI=$$GETIR(DFN,DGINI) S:DGIRI<0 DGERR=1
"RTN","DGMTU2",14,0)
 Q
"RTN","DGMTU2",15,0)
 ;
"RTN","DGMTU2",16,0)
GETIN(DFN,DGPRI,DGDT) ;Look-up individual annual income
"RTN","DGMTU2",17,0)
 ;                Add a new entry if one is not found
"RTN","DGMTU2",18,0)
 ;                 Input  -- DFN    Patient file IEN
"RTN","DGMTU2",19,0)
 ;                           DGPRI  Patient Relation IEN
"RTN","DGMTU2",20,0)
 ;                           DGDT   Date/Time
"RTN","DGMTU2",21,0)
 ;                 Output -- Individual Annual Income IEN 
"RTN","DGMTU2",22,0)
 N DGINI,DGLY
"RTN","DGMTU2",23,0)
 S DGLY=$$LYR^DGMTSCU1(DGDT)
"RTN","DGMTU2",24,0)
 S DGINI=+$$IAI^DGMTU3(DGPRI,DGLY)
"RTN","DGMTU2",25,0)
 I '$D(^DGMT(408.21,DGINI,0)) S DGINI=$$ADDIN(DFN,DGPRI,DGLY)
"RTN","DGMTU2",26,0)
GETINQ Q $S(DGINI>0:DGINI,1:-1)
"RTN","DGMTU2",27,0)
 ;
"RTN","DGMTU2",28,0)
ADDIN(DFN,DGPRI,DGLY) ;Add a new individual annual income entry
"RTN","DGMTU2",29,0)
 ;                 Input  -- DFN    Patient file IEN
"RTN","DGMTU2",30,0)
 ;                           DGPRI  Patient Relation IEN
"RTN","DGMTU2",31,0)
 ;                           DGLY   Last Year
"RTN","DGMTU2",32,0)
 ;                 Output -- New Individual Annual Income IEN 
"RTN","DGMTU2",33,0)
 N DA,DD,DGINI,DGNOW,DIC,DIK,DINUM,DLAYGO,DO,X,Y,%
"RTN","DGMTU2",34,0)
 D NOW^%DTC S DGNOW=%
"RTN","DGMTU2",35,0)
 S X=DGLY,(DIC,DIK)="^DGMT(408.21,",DIC(0)="L",DLAYGO=408.21
"RTN","DGMTU2",36,0)
 D FILE^DICN S DGINI=+Y
"RTN","DGMTU2",37,0)
 I DGINI>0 L +^DGMT(408.21,DGINI) S $P(^DGMT(408.21,DGINI,0),"^",2)=DGPRI,^("USR")=DUZ_"^"_DGNOW,DA=DGINI D IX1^DIK L -^DGMT(408.21,DGINI)
"RTN","DGMTU2",38,0)
ADDINQ Q $S(DGINI>0:DGINI,1:-1)
"RTN","DGMTU2",39,0)
 ;
"RTN","DGMTU2",40,0)
GETIR(DFN,DGINI) ;Look-up income relation
"RTN","DGMTU2",41,0)
 ;                Add a new entry if one is not found
"RTN","DGMTU2",42,0)
 ;                 Input  -- DFN    Patient file IEN
"RTN","DGMTU2",43,0)
 ;                           DGINI  Individual Annual Income IEN
"RTN","DGMTU2",44,0)
 ;                 Output -- Income Relation IEN
"RTN","DGMTU2",45,0)
 N DGIRI
"RTN","DGMTU2",46,0)
 S DGIRI=+$O(^DGMT(408.22,"AIND",DGINI,0))
"RTN","DGMTU2",47,0)
 I '$D(^DGMT(408.22,DGIRI,0)) S DGIRI=$$ADDIR(DFN,DGINI)
"RTN","DGMTU2",48,0)
GETIRQ Q $S(DGIRI>0:DGIRI,1:-1)
"RTN","DGMTU2",49,0)
 ;
"RTN","DGMTU2",50,0)
ADDIR(DFN,DGINI) ;Add a new income relation entry
"RTN","DGMTU2",51,0)
 ;                 Input  -- DFN    Patient file IEN
"RTN","DGMTU2",52,0)
 ;                           DGINI  Individual Annual Income IEN
"RTN","DGMTU2",53,0)
 ;                 Output -- New Income Relation IEN
"RTN","DGMTU2",54,0)
 N DA,DD,DGIRI,DIC,DIK,DINUM,DLAYGO,DO,X,Y
"RTN","DGMTU2",55,0)
 S X=DFN,(DIC,DIK)="^DGMT(408.22,",DIC(0)="L",DLAYGO=408.22
"RTN","DGMTU2",56,0)
 D FILE^DICN S DGIRI=+Y
"RTN","DGMTU2",57,0)
 I DGIRI>0 L +^DGMT(408.22,DGIRI) S $P(^DGMT(408.22,DGIRI,0),"^",2)=DGINI,DA=DGIRI D IX1^DIK L -^DGMT(408.22,DGIRI)
"RTN","DGMTU2",58,0)
ADDIRQ Q $S(DGIRI>0:DGIRI,1:-1)
"RTN","DGMTU2",59,0)
 ;
"RTN","DGMTU2",60,0)
 ; GTS - DG*5.3*688
"RTN","DGMTU2",61,0)
VRCHKUP(DGMTYPT,TYPE,DGOLDDT,DGNWDT) ;Check the version and convert IAI records, as needed
"RTN","DGMTU2",62,0)
 ; Input  -- DGMTYPT  : Type of test being processed
"RTN","DGMTU2",63,0)
 ;           TYPE     : Optional - used when called from COPYRX^DGMTR1
"RTN","DGMTU2",64,0)
 ;                                  to indicate existing MT or LTC
"RTN","DGMTU2",65,0)
 ;           DGOLDDT  : Optional - Date of Test for Old MT/CP test
"RTN","DGMTU2",66,0)
 ;           DGNWDT   : Optional - Date of Test for New MT/CP test
"RTN","DGMTU2",67,0)
 ; Output -- CONVRTD  : 1 - IAI Records converted
"RTN","DGMTU2",68,0)
 ;                    : 0 - IAI Records not converted
"RTN","DGMTU2",69,0)
 ;
"RTN","DGMTU2",70,0)
 N CONVRTD,DGMTLST,DGOTHIEN,DGSAMEYR,DGDEC31D,DGERR,DGMTRT,DGMTRT2
"RTN","DGMTU2",71,0)
 S CONVRTD=0
"RTN","DGMTU2",72,0)
 S DGSAMEYR=0
"RTN","DGMTU2",73,0)
 ;
"RTN","DGMTU2",74,0)
 I +$G(DGOLDDT)=0 S DGOLDDT=DT ;When DGOLDDT is not defined, default today's date
"RTN","DGMTU2",75,0)
 I +$G(DGNWDT)'=0 S:($E(DGOLDDT,1,3)=$E(DGNWDT,1,3)) DGSAMEYR=1 ;If have New and Old test dates, check for same yr
"RTN","DGMTU2",76,0)
 S DGDEC31D=$E(DGOLDDT,1,3)_"1231" ;Set search date of Dec 31 of Old Test year
"RTN","DGMTU2",77,0)
 ;
"RTN","DGMTU2",78,0)
 ; Check type of test being added or edited and then check for another test in the current year
"RTN","DGMTU2",79,0)
 ; If Same year, get new test
"RTN","DGMTU2",80,0)
 I DGSAMEYR DO
"RTN","DGMTU2",81,0)
 .; NOTE: MT can not be created from a LTC CP Exempt test
"RTN","DGMTU2",82,0)
 .I DGMTYPT=1 DO
"RTN","DGMTU2",83,0)
 . . S DGMTLST=$$LST^DGMTU(DFN,DGNWDT,2) ;Find existing CP test - MT required
"RTN","DGMTU2",84,0)
 . . S:($E($P(DGMTLST,"^",2),1,3)'=$E(DGOLDDT,1,3)) DGMTLST=$$LSTNP^DGMTU21(DFN,DGNWDT,2) ; Last primary test is previous YR
"RTN","DGMTU2",85,0)
 . ; When updating CP test find either MT or LTC CP Exemption test
"RTN","DGMTU2",86,0)
 .I DGMTYPT=2 DO
"RTN","DGMTU2",87,0)
 . . IF '$D(TYPE) S DGMTLST=$$LST^DGMTU(DFN,DGNWDT,1) ;Find existing MT test - CP required
"RTN","DGMTU2",88,0)
 . . IF $D(TYPE) S DGMTLST=$$LST^DGMTU(DFN,DGNWDT,TYPE) ;Find existing MT or LTC - CP Exempt
"RTN","DGMTU2",89,0)
 .I DGMTYPT=4 DO
"RTN","DGMTU2",90,0)
 . . IF '$D(TYPE) S DGMTLST=$$LST^DGMTU(DFN,DGNWDT,1) ;Find existing MT test - CP required
"RTN","DGMTU2",91,0)
 . . IF $D(TYPE) S DGMTLST=$$LST^DGMTU(DFN,DGNWDT,TYPE) ;Find existing MT - CP req.
"RTN","DGMTU2",92,0)
 . . ; If Last primary test is previous YR, look for last [may not be primary] (to check current year)
"RTN","DGMTU2",93,0)
 . . I $E($P(DGMTLST,"^",2),1,3)'=$E(DGOLDDT,1,3) DO
"RTN","DGMTU2",94,0)
 . . . S:'$D(TYPE) DGMTLST=$$LSTNP^DGMTU21(DFN,DGNWDT,1)
"RTN","DGMTU2",95,0)
 . . . S:$D(TYPE) DGMTLST=$$LSTNP^DGMTU21(DFN,DGNWDT,TYPE)
"RTN","DGMTU2",96,0)
 ;If not same year, search for new test in old test year
"RTN","DGMTU2",97,0)
 I 'DGSAMEYR DO
"RTN","DGMTU2",98,0)
 .; NOTE: MT can not be created from a LTC CP Exempt test
"RTN","DGMTU2",99,0)
 .I DGMTYPT=1 DO
"RTN","DGMTU2",100,0)
 . . S DGMTLST=$$LST^DGMTU(DFN,DGDEC31D,2) ;Find existing CP test - MT required
"RTN","DGMTU2",101,0)
 .; When updating CP test find either MT or LTC CP Exemption test
"RTN","DGMTU2",102,0)
 .I DGMTYPT=2 DO
"RTN","DGMTU2",103,0)
 . . IF '$D(TYPE) S DGMTLST=$$LST^DGMTU(DFN,DGDEC31D,1) ;Find existing MT test - CP required
"RTN","DGMTU2",104,0)
 . . IF $D(TYPE) S DGMTLST=$$LST^DGMTU(DFN,DGDEC31D,TYPE) ;Find existing MT or LTC - CP Exempt
"RTN","DGMTU2",105,0)
 .I DGMTYPT=4 DO
"RTN","DGMTU2",106,0)
 . . IF '$D(TYPE) S DGMTLST=$$LST^DGMTU(DFN,DGDEC31D,1) ;Find existing MT test - CP required
"RTN","DGMTU2",107,0)
 . . IF $D(TYPE) S DGMTLST=$$LST^DGMTU(DFN,DGDEC31D,TYPE) ;Find existing MT test - CP req.
"RTN","DGMTU2",108,0)
 . . ; If Last primary test is previous YR, look for last [may not be primary] (to check current year)
"RTN","DGMTU2",109,0)
 . . I $E($P(DGMTLST,"^",2),1,3)'=$E(DGOLDDT,1,3) DO
"RTN","DGMTU2",110,0)
 . . . S:'$D(TYPE) DGMTLST=$$LSTNP^DGMTU21(DFN,DGDEC31D,1)
"RTN","DGMTU2",111,0)
 . . . S:$D(TYPE) DGMTLST=$$LSTNP^DGMTU21(DFN,DGDEC31D,TYPE)
"RTN","DGMTU2",112,0)
 ;
"RTN","DGMTU2",113,0)
 ; LTC4 test does not require a record in 408.31, 408.21 records can exist without MT/CP records
"RTN","DGMTU2",114,0)
 ; If 408.31 entry is not found and LTC4 is being added
"RTN","DGMTU2",115,0)
 I (+$G(DGMTLST)'>0),(+DGMTYPT=4) DO
"RTN","DGMTU2",116,0)
 . N DGINC2,DGREL2,DGINR2,DGDEP2
"RTN","DGMTU2",117,0)
 . M:$D(DGINC) DGINC2=DGINC
"RTN","DGMTU2",118,0)
 . M:$D(DGREL) DGREL2=DGREL
"RTN","DGMTU2",119,0)
 . M:$D(DGINR) DGINR2=DGINR
"RTN","DGMTU2",120,0)
 . M:$D(DGDEP) DGDEP2=DGDEP
"RTN","DGMTU2",121,0)
 . ; Search IAI records in 408.21; If found convert to 1, as necessary
"RTN","DGMTU2",122,0)
 . D ALL^DGMTU21(DFN,"VSD",DT,"IPR")
"RTN","DGMTU2",123,0)
 . I $D(DGINC) DO
"RTN","DGMTU2",124,0)
 . . N OTHRTST
"RTN","DGMTU2",125,0)
 . . D ISCNVRT^DGMTUTL(.DGINC)
"RTN","DGMTU2",126,0)
 . . S OTHRTST=$$UPDTTSTS^DGMTU21(DFN,$E($P(DGMTLST,"^",2),1,3))
"RTN","DGMTU2",127,0)
 . . S CONVRTD=1
"RTN","DGMTU2",128,0)
 . ; Restore DGINC, DGREL, DGINR, and DGDEP
"RTN","DGMTU2",129,0)
 . K DGINC,DGREL,DGINR,DGDEP
"RTN","DGMTU2",130,0)
 . M:$D(DGINC2) DGINC=DGINC2
"RTN","DGMTU2",131,0)
 . M:$D(DGREL2) DGREL=DGREL2
"RTN","DGMTU2",132,0)
 . M:$D(DGINR2) DGINR=DGINR2
"RTN","DGMTU2",133,0)
 . M:$D(DGDEP2) DGDEP=DGDEP2
"RTN","DGMTU2",134,0)
 ;
"RTN","DGMTU2",135,0)
 ; If another test is found
"RTN","DGMTU2",136,0)
 I $D(DGMTLST),(+DGMTLST>0) DO
"RTN","DGMTU2",137,0)
 . ; if the year of the test that have = year of test with IAI records to analyze
"RTN","DGMTU2",138,0)
 . I ($E($P(DGMTLST,"^",2),1,3)=$E(DGOLDDT,1,3)) DO
"RTN","DGMTU2",139,0)
 . . S DGOTHIEN=+DGMTLST
"RTN","DGMTU2",140,0)
 . . ;
"RTN","DGMTU2",141,0)
 . . ; If the other test was not entered in Version 1 format
"RTN","DGMTU2",142,0)
 . . I +$P($G(^DGMT(408.31,DGOTHIEN,2)),"^",11)'=1 DO
"RTN","DGMTU2",143,0)
 . . . ; Save values of DGINC, DGREL, DGINR, and DGDEP
"RTN","DGMTU2",144,0)
 . . . N DGINC2,DGREL2,DGINR2,DGDEP2
"RTN","DGMTU2",145,0)
 . . . M:$D(DGINC) DGINC2=DGINC
"RTN","DGMTU2",146,0)
 . . . M:$D(DGREL) DGREL2=DGREL
"RTN","DGMTU2",147,0)
 . . . M:$D(DGINR) DGINR2=DGINR
"RTN","DGMTU2",148,0)
 . . . M:$D(DGDEP) DGDEP2=DGDEP
"RTN","DGMTU2",149,0)
 . . . ;
"RTN","DGMTU2",150,0)
 . . . ; Get IAI records from 408.21 and convert them from version 0 to 1
"RTN","DGMTU2",151,0)
 . . . D:(+$P(DGMTLST,"^",2)>0) ALL^DGMTU21(DFN,"VSD",+$P(DGMTLST,"^",2),"IPR")
"RTN","DGMTU2",152,0)
 . . . D:(+$P(DGMTLST,"^",2)'>0) ALL^DGMTU21(DFN,"VSD",DT,"IPR")
"RTN","DGMTU2",153,0)
 . . . D ISCNVRT^DGMTUTL(.DGINC)
"RTN","DGMTU2",154,0)
 . . . ;
"RTN","DGMTU2",155,0)
 . . . ; Update 2.11 in all (1, 2 and 4 type) 408.31 records for DFN and IY
"RTN","DGMTU2",156,0)
 . . . N OTHRTST
"RTN","DGMTU2",157,0)
 . . . S OTHRTST=$$UPDTTSTS^DGMTU21(DFN,$E($P(DGMTLST,"^",2),1,3))
"RTN","DGMTU2",158,0)
 . . . ;
"RTN","DGMTU2",159,0)
 . . . ; Restore DGINC, DGREL, DGINR, and DGDEP
"RTN","DGMTU2",160,0)
 . . . K DGINC,DGREL,DGINR,DGDEP
"RTN","DGMTU2",161,0)
 . . . M:$D(DGINC2) DGINC=DGINC2
"RTN","DGMTU2",162,0)
 . . . M:$D(DGREL2) DGREL=DGREL2
"RTN","DGMTU2",163,0)
 . . . M:$D(DGINR2) DGINR=DGINR2
"RTN","DGMTU2",164,0)
 . . . M:$D(DGDEP2) DGDEP=DGDEP2
"RTN","DGMTU2",165,0)
 . . . S CONVRTD=1
"RTN","DGMTU2",166,0)
VRCHKQ Q CONVRTD
"RTN","DGMTU21")
0^100^B9783744
"RTN","DGMTU21",1,0)
DGMTU21 ;ALB/RMO - Income Utilities Cont. ;6 MAR 1992 8:40 am
"RTN","DGMTU21",2,0)
 ;;5.3;Registration;**33,45,182,688**;Aug 13, 1993;Build 29
"RTN","DGMTU21",3,0)
 ;
"RTN","DGMTU21",4,0)
ALL(DFN,DGTYPE,DGDT,DGRTY,DGMT) ;Select patient relation, individual annual
"RTN","DGMTU21",5,0)
 ;                        income and income relation arrays of internal
"RTN","DGMTU21",6,0)
 ;                        entry numbers
"RTN","DGMTU21",7,0)
 ;                         Input  -- DFN     Patient file IEN
"RTN","DGMTU21",8,0)
 ;                                   DGTYPE  Type of Relation which can
"RTN","DGMTU21",9,0)
 ;                                           contain:
"RTN","DGMTU21",10,0)
 ;                                           V for veteran
"RTN","DGMTU21",11,0)
 ;                                           S for spouse
"RTN","DGMTU21",12,0)
 ;                                           C for dependent children
"RTN","DGMTU21",13,0)
 ;                                                 or
"RTN","DGMTU21",14,0)
 ;                                           D for all dependents
"RTN","DGMTU21",15,0)
 ;                                   DGDT    Date/Time
"RTN","DGMTU21",16,0)
 ;                                   DGRTY   Type of Array to Return
"RTN","DGMTU21",17,0)
 ;                                           which can contain:
"RTN","DGMTU21",18,0)
 ;                                           I for Ind Annual Income
"RTN","DGMTU21",19,0)
 ;                                           P for Patient Relation
"RTN","DGMTU21",20,0)
 ;                                           R for Income Relation
"RTN","DGMTU21",21,0)
 ;                                           (Optional - default IPR)
"RTN","DGMTU21",22,0)
 ;                                   DGMT    IFN of Means Test (optional)
"RTN","DGMTU21",23,0)
 ;                 Output -- DGREL   Patient Relation IEN Array
"RTN","DGMTU21",24,0)
 ;                           DGINC   Individual Annual Income IEN Array
"RTN","DGMTU21",25,0)
 ;                           DGINR   Income Relation IEN Array
"RTN","DGMTU21",26,0)
 ;                           DGDEP   Number of Dependents
"RTN","DGMTU21",27,0)
 K DGINC,DGINR,DGREL
"RTN","DGMTU21",28,0)
 N DGCNT,DGLY,DGPRTY
"RTN","DGMTU21",29,0)
 S:'$D(DGRTY) DGRTY="IPR" S DGLY=$$LYR^DGMTSCU1(DGDT)
"RTN","DGMTU21",30,0)
 D GETREL^DGMTU11(DFN,DGTYPE,DGLY,$G(DGMT))
"RTN","DGMTU21",31,0)
 S DGPRTY="" F  S DGPRTY=$O(DGREL(DGPRTY)) Q:DGPRTY=""  D SET
"RTN","DGMTU21",32,0)
 I DGRTY'["P" K DGREL
"RTN","DGMTU21",33,0)
ALLQ Q
"RTN","DGMTU21",34,0)
 ;
"RTN","DGMTU21",35,0)
SET ;Set individual annual income and income relation arrays
"RTN","DGMTU21",36,0)
 N DGCNT,DGPRI,DGINI,DGIRI
"RTN","DGMTU21",37,0)
 I "CD"[DGPRTY S DGCNT=0 F  S DGCNT=$O(DGREL(DGPRTY,DGCNT)) Q:'DGCNT  D
"RTN","DGMTU21",38,0)
 .S DGPRI=+DGREL(DGPRTY,DGCNT) D GET
"RTN","DGMTU21",39,0)
 .I DGINI,DGRTY["I" S DGINC(DGPRTY,DGCNT)=DGINI
"RTN","DGMTU21",40,0)
 .I DGIRI,DGRTY["R" S DGINR(DGPRTY,DGCNT)=DGIRI
"RTN","DGMTU21",41,0)
 I "SV"[DGPRTY D
"RTN","DGMTU21",42,0)
 .S DGPRI=+DGREL(DGPRTY) D GET
"RTN","DGMTU21",43,0)
 .I DGINI,DGRTY["I" S DGINC(DGPRTY)=DGINI
"RTN","DGMTU21",44,0)
 .I DGIRI,DGRTY["R" S DGINR(DGPRTY)=DGIRI
"RTN","DGMTU21",45,0)
 Q
"RTN","DGMTU21",46,0)
 ;
"RTN","DGMTU21",47,0)
GET ;Look-up individual annual income and income relation IEN
"RTN","DGMTU21",48,0)
 S DGINI=+$$IAI^DGMTU3(DGPRI,DGLY,$S($G(DGMT):$P($G(^DGMT(408.31,DGMT,0)),"^",19),1:1))
"RTN","DGMTU21",49,0)
 S DGIRI=+$O(^DGMT(408.22,"AIND",DGINI,0))
"RTN","DGMTU21",50,0)
 Q
"RTN","DGMTU21",51,0)
 ;
"RTN","DGMTU21",52,0)
 ; GTS - DG*5.3*688
"RTN","DGMTU21",53,0)
UPDTTSTS(DFN,IY) ;Update all tests for IY of converted IAI rec's
"RTN","DGMTU21",54,0)
 ; INPUT: DFN - Patient file IEN
"RTN","DGMTU21",55,0)
 ;        IY  - Income Year FM format (ex: 306 for 2006)
"RTN","DGMTU21",56,0)
 ;        
"RTN","DGMTU21",57,0)
 ; OUTPUT: RESULT
"RTN","DGMTU21",58,0)
 ;               1 - Converted records
"RTN","DGMTU21",59,0)
 ;               0 - Did not convert records
"RTN","DGMTU21",60,0)
 ;               
"RTN","DGMTU21",61,0)
 N RESULT,TYPE,TESTDT,IRIEN,DGMT2
"RTN","DGMTU21",62,0)
 S RESULT=0
"RTN","DGMTU21",63,0)
 F TYPE=1,2,4 DO
"RTN","DGMTU21",64,0)
 . S TESTDT=""
"RTN","DGMTU21",65,0)
 . S IRIEN=""
"RTN","DGMTU21",66,0)
 . I $D(^DGMT(408.31,"AID",TYPE)) DO
"RTN","DGMTU21",67,0)
 . . F  Q:('$D(^DGMT(408.31,"AID",TYPE,DFN)))  S TESTDT=$O(^DGMT(408.31,"AID",TYPE,DFN,TESTDT)) Q:(+TESTDT=0)  DO
"RTN","DGMTU21",68,0)
 . . . I $E(TESTDT,2,4)=IY DO
"RTN","DGMTU21",69,0)
 . . . . S IRIEN=$O(^DGMT(408.31,"AID",TYPE,DFN,TESTDT,""))
"RTN","DGMTU21",70,0)
 . . . . ; Update 2.11 in 408.31 rec
"RTN","DGMTU21",71,0)
 . . . . S DGMT2(408.31,+IRIEN_",",2.11)=1
"RTN","DGMTU21",72,0)
 . . . . S DGERR=""
"RTN","DGMTU21",73,0)
 . . . . D FILE^DIE("","DGMT2",DGERR)
"RTN","DGMTU21",74,0)
 . . . . S RESULT=1
"RTN","DGMTU21",75,0)
 Q RESULT
"RTN","DGMTU21",76,0)
 ;
"RTN","DGMTU21",77,0)
 ; GTS - DG*5.3*688
"RTN","DGMTU21",78,0)
LSTNP(DFN,DGDT,DGMTYPT) ;Last MT/CP/LTC4 test for a patient regardless of Primary status
"RTN","DGMTU21",79,0)
 ;         Input  -- DFN   Patient IEN
"RTN","DGMTU21",80,0)
 ;                   DGDT  Date/Time  (Optional- default today@2359)
"RTN","DGMTU21",81,0)
 ;                DGMTYPT  Type of Test (Optional - if not defined 
"RTN","DGMTU21",82,0)
 ;                                       Means Test will be assumed)
"RTN","DGMTU21",83,0)
 ;         Output -- Annual Means Test IEN^Date of Test
"RTN","DGMTU21",84,0)
 ;                   ^Status Name^Status Code^Source of Test
"RTN","DGMTU21",85,0)
 N DGIDT,DGMTFL1,DGMTI,DGNOD,Y I '$D(DGMTYPT) S DGMTYPT=1
"RTN","DGMTU21",86,0)
 S DGIDT=$S($G(DGDT)>0:-DGDT,1:-DT) S:'$P(DGIDT,".",2) DGIDT=DGIDT_.2359
"RTN","DGMTU21",87,0)
 F  S DGIDT=+$O(^DGMT(408.31,"AID",DGMTYPT,DFN,DGIDT)) Q:'DGIDT!$G(DGMTFL1)  D
"RTN","DGMTU21",88,0)
 .F DGMTI=0:0 S DGMTI=+$O(^DGMT(408.31,"AID",DGMTYPT,DFN,DGIDT,DGMTI)) Q:'DGMTI!$G(DGMTFL1)  D
"RTN","DGMTU21",89,0)
 ..S DGNOD=$G(^DGMT(408.31,DGMTI,0)) I DGNOD!(DGMTYPT=4) S DGMTFL1=1,Y=DGMTI_"^"_$P(^(0),"^")_"^"_$$MTS^DGMTU(DFN,+$P(^(0),"^",3))_"^"_$P(DGNOD,"^",23)
"RTN","DGMTU21",90,0)
 Q $G(Y)
"RTN","DGMTU22")
0^25^B2167797
"RTN","DGMTU22",1,0)
DGMTU22 ;ALB/CAW - COPY PRIOR YEAR INCOME INFORMATION; 6/18/92
"RTN","DGMTU22",2,0)
 ;;5.3;Registration;**33,45,624,688**;Aug 13, 1993;Build 29
"RTN","DGMTU22",3,0)
 ;
"RTN","DGMTU22",4,0)
NOBUCKS(DFN,DGDT) ; Used by Income Screen Checks if BOTH
"RTN","DGMTU22",5,0)
 ;  NO meaningful Income Data for Prior Year
"RTN","DGMTU22",6,0)
 ;  AND there is data for Year before Prior Year
"RTN","DGMTU22",7,0)
 ;  2=YES (but some edit/entry in 408.22),1=YES & 0=NO
"RTN","DGMTU22",8,0)
 ;  ** REQUIRES DGINR("V")
"RTN","DGMTU22",9,0)
 N DGCURR,DGPRIEN,DGPRIOR,DGPY,DGLY,DGIAI,DGIR,DGY,DGINP
"RTN","DGMTU22",10,0)
 I $G(DGNOCOPY) S DGY=0 G QTNB
"RTN","DGMTU22",11,0)
 S:'$D(DGDT) DGDT=DT
"RTN","DGMTU22",12,0)
 S DGLY=$E(DGDT,1,3)_"0000"-10000,DGPY=DGLY-10000
"RTN","DGMTU22",13,0)
 S (DGPRIOR,DGCURR)=0
"RTN","DGMTU22",14,0)
 F DGPRIEN=0:0 S DGPRIEN=$O(^DGPR(408.12,"B",DFN,DGPRIEN)) Q:'DGPRIEN  D
"RTN","DGMTU22",15,0)
 .S:$D(^DGMT(408.21,"AI",+DGPRIEN,-DGPY)) DGPRIOR=DGPRIOR+1
"RTN","DGMTU22",16,0)
 .S DGIAI=$$IAI^DGMTU3(+DGPRIEN,DGLY)
"RTN","DGMTU22",17,0)
 .I DGIAI]"" D
"RTN","DGMTU22",18,0)
 ..S DGCURR=DGCURR+$S($P($G(^DGMT(408.21,DGIAI,0)),U,8,18)'?."^":1,($P($G(^(1)),U,1,3)]""):1,($P($G(^(2)),U,1,5)]""):1,1:0)
"RTN","DGMTU22",19,0)
 ..;S DGINP=$O(^DGMT(408.22,"AIND",+DGIAI,"")) I $P($G(^DGMT(408.22,+DGINP,"MT")),U) S DGCURR=DGCURR+1
"RTN","DGMTU22",20,0)
 I 'DGPRIOR!DGCURR S DGY=0 G QTNB
"RTN","DGMTU22",21,0)
 S DGIR=$G(^DGMT(408.22,+$G(DGINR("V")),0))
"RTN","DGMTU22",22,0)
 S DGY=$S($P(DGIR,U,5)]"":2,($P(DGIR,U,13)]""):2,1:1)
"RTN","DGMTU22",23,0)
QTNB Q DGY
"RTN","DGMTUTL")
0^16^B32802544
"RTN","DGMTUTL",1,0)
DGMTUTL ;ALB/CAW/BRM/LBD - Means Test generic utilities ; 8/12/02 4:33pm
"RTN","DGMTUTL",2,0)
 ;;5.3;Registration;**3,31,166,182,454,688**;Aug 13, 1993;Build 29
"RTN","DGMTUTL",3,0)
 ;
"RTN","DGMTUTL",4,0)
FDATE(Y) ; -- return formatted date
"RTN","DGMTUTL",5,0)
 ;   input:          Y := field name
"RTN","DGMTUTL",6,0)
 ;  output: [returned] := formatted date only
"RTN","DGMTUTL",7,0)
 N DGY
"RTN","DGMTUTL",8,0)
 S DGY=$$FMTE^XLFDT(Y,"5F"),DGY=$TR(DGY," ","0")
"RTN","DGMTUTL",9,0)
 Q DGY
"RTN","DGMTUTL",10,0)
 ;
"RTN","DGMTUTL",11,0)
FTIME(Y) ; -- return formatted date/time
"RTN","DGMTUTL",12,0)
 ;   input:          Y := internal date/time
"RTN","DGMTUTL",13,0)
 ;  output: [returned] := formatted date and time
"RTN","DGMTUTL",14,0)
 D DD^%DT
"RTN","DGMTUTL",15,0)
 Q Y
"RTN","DGMTUTL",16,0)
 ;
"RTN","DGMTUTL",17,0)
RANGE(WHEN) ; select date range
"RTN","DGMTUTL",18,0)
 ;  input:  WHEN := past or future dates (optional)
"RTN","DGMTUTL",19,0)
 ; output: DGBEG := begin date
"RTN","DGMTUTL",20,0)
 ;         DGEND := end date
"RTN","DGMTUTL",21,0)
 ; return: was selection made [ 1|yes   0|no]
"RTN","DGMTUTL",22,0)
 W !!,$$LINE("Date Range Selection")
"RTN","DGMTUTL",23,0)
DATE S DIR(0)="D^::EX",DIR("A")="Enter Beginning Date",DIR("?")="^D HELP^%DTC" D ^DIR K DIR G:$D(DIRUT) RANGEQ S DGBEG=Y
"RTN","DGMTUTL",24,0)
 I $G(WHEN)="P",DGBEG>(DT_.9999) W !,"   Future dates are not allowed.",*7 K DGBEG G DATE
"RTN","DGMTUTL",25,0)
 I $G(WHEN)="F",(DGBEG_.9999)<DT W !,"   Past dates are not allowed.",*7 K DGBEG G DATE
"RTN","DGMTUTL",26,0)
 ;select ending date
"RTN","DGMTUTL",27,0)
 S DIR(0)="D^::EX",DIR("A")="Enter Ending Date",DIR("?")="^D HELP^%DTC" D ^DIR K DIR G:$D(DIRUT) RANGEQ
"RTN","DGMTUTL",28,0)
 S DGEND=Y
"RTN","DGMTUTL",29,0)
 I $G(WHEN)="P",DGEND>(DT_.9999) W !,"   Future dates are not allowed.",*7 K DGEND G DATE
"RTN","DGMTUTL",30,0)
 I $G(WHEN)="F",(DGEND_.9999)<DT W !,"   Past dates are not allowed.",*7 K DGEND G DATE
"RTN","DGMTUTL",31,0)
 I DGEND<DGBEG W !!,"Beginning Date must be prior to Ending Date" K DGEND G DATE
"RTN","DGMTUTL",32,0)
RANGEQ Q $D(DGEND)
"RTN","DGMTUTL",33,0)
 ;
"RTN","DGMTUTL",34,0)
DIV() ; -- get division data
"RTN","DGMTUTL",35,0)
 ;  input: none
"RTN","DGMTUTL",36,0)
 ; output: VAUTD := divs selected (VAUTD=1 for all)
"RTN","DGMTUTL",37,0)
 ; return: was selection made [ 1|yes   0|no]
"RTN","DGMTUTL",38,0)
 ;
"RTN","DGMTUTL",39,0)
 W:$P($G(^DG(43,1,"GL")),U,2) !!,$$LINE("Division Selection")
"RTN","DGMTUTL",40,0)
 D ASK2 I Y<0 K VAUTD
"RTN","DGMTUTL",41,0)
 Q $D(VAUTD)>0
"RTN","DGMTUTL",42,0)
 ;
"RTN","DGMTUTL",43,0)
CLINIC() ; -- get clinic data
"RTN","DGMTUTL",44,0)
 ;  input: VAUTD  := divisions selected
"RTN","DGMTUTL",45,0)
 ; output: VAUTC := clinic selected (VAUTC=1 for all)
"RTN","DGMTUTL",46,0)
 ; return: was selection made [ 1|yes   0|no]
"RTN","DGMTUTL",47,0)
 ;
"RTN","DGMTUTL",48,0)
 W !!,$$LINE("Clinic Selection")
"RTN","DGMTUTL",49,0)
 S DIC("S")="I $S(VAUTD:1,$D(VAUTD(+$P(^SC(Y,0),U,15))):1,'+$P(^(0),U,15)&$D(VAUTD(+$O(^DG(40.8,0)))):1,1:0)"
"RTN","DGMTUTL",50,0)
 S DIC="^SC(",VAUTSTR="clinic",VAUTVB="VAUTC",VAUTNI=2
"RTN","DGMTUTL",51,0)
 D FIRST^VAUTOMA
"RTN","DGMTUTL",52,0)
 I Y<0 K VAUTC
"RTN","DGMTUTL",53,0)
CLINICQ Q $D(VAUTC)>0
"RTN","DGMTUTL",54,0)
 ;
"RTN","DGMTUTL",55,0)
 ;
"RTN","DGMTUTL",56,0)
LINE(STR) ; -- print line
"RTN","DGMTUTL",57,0)
 ;  input: STR := text to insert
"RTN","DGMTUTL",58,0)
 ; output: none
"RTN","DGMTUTL",59,0)
 ; return: text to use
"RTN","DGMTUTL",60,0)
 ;
"RTN","DGMTUTL",61,0)
 N X
"RTN","DGMTUTL",62,0)
 S:STR]"" STR=" "_STR_" "
"RTN","DGMTUTL",63,0)
 S $P(X,"_",(IOM/2)-($L(STR)/2))=""
"RTN","DGMTUTL",64,0)
 Q X_STR_X
"RTN","DGMTUTL",65,0)
 ;
"RTN","DGMTUTL",66,0)
ASK2 S (VAUTD,Y)=0 I '$D(^DG(40.8,+$O(^DG(40.8,0)),0)) W !,*7,"***WARNING...MEDICAL CENTER DIVISION FILE IS NOT SET UP" G ASK2Q
"RTN","DGMTUTL",67,0)
 I '$P($G(^DG(43,1,"GL")),U,2) S VAUTD=1 G ASK2Q
"RTN","DGMTUTL",68,0)
 I $D(^DG(43,1,"GL")),$P(^("GL"),U,2) G DIVISION^VAUTOMA
"RTN","DGMTUTL",69,0)
 S I=$O(^DG(40.8,0)) G:'$D(^DG(40.8,+I,0)) ASK2Q S VAUTD(I)=$P(^(0),U) K DIC Q
"RTN","DGMTUTL",70,0)
ASK2Q ;
"RTN","DGMTUTL",71,0)
 Q
"RTN","DGMTUTL",72,0)
 ;
"RTN","DGMTUTL",73,0)
CLOSE ; Utility to clean up tasked outputs
"RTN","DGMTUTL",74,0)
 Q:'$D(ZTQUEUED)
"RTN","DGMTUTL",75,0)
 D KILL^%ZTLOAD K ZTSK,ZTDESC,ZTRTN,ZTREQ,ZTSAVE,ZTIO,ZTDTH,ZTUCI,IO("Q"),IO("C")
"RTN","DGMTUTL",76,0)
 Q
"RTN","DGMTUTL",77,0)
 ;
"RTN","DGMTUTL",78,0)
XMY(GROUP,DGDUZ,DGPOST) ; -- set up XMY for mail group members
"RTN","DGMTUTL",79,0)
 ; input: GROUP := mail group efn [required]
"RTN","DGMTUTL",80,0)
 ;        DGDUZ := send to current user [ 0|no ; 1|yes] [optional]
"RTN","DGMTUTL",81,0)
 ;       DGPOST := send to postmaster if XMY is undefined
"RTN","DGMTUTL",82,0)
 ;                 [ 0|no ; 1|yes] [optional]
"RTN","DGMTUTL",83,0)
 ; output:  XMY := array of users
"RTN","DGMTUTL",84,0)
 ;        XMDUZ := message sender set postmaster
"RTN","DGMTUTL",85,0)
 ;
"RTN","DGMTUTL",86,0)
 N I K XMY
"RTN","DGMTUTL",87,0)
 I '$D(DGDUZ) N DGDUZ S DGDUZ=1
"RTN","DGMTUTL",88,0)
 I '$D(DGPOST) N DGPOST S SDPOST=1
"RTN","DGMTUTL",89,0)
 S XMY("G."_$P($G(^XMB(3.8,GROUP,0)),U))=""
"RTN","DGMTUTL",90,0)
 I DGDUZ,DUZ S XMY(DUZ)=""
"RTN","DGMTUTL",91,0)
 ; makes sure it gets sent to someone
"RTN","DGMTUTL",92,0)
 I '$D(XMY),DGPOST S XMY(.5)=""
"RTN","DGMTUTL",93,0)
 ; make postmaster the sender so it will show up as new to DUZ
"RTN","DGMTUTL",94,0)
 S XMDUZ=.5
"RTN","DGMTUTL",95,0)
 Q
"RTN","DGMTUTL",96,0)
 ;
"RTN","DGMTUTL",97,0)
 ;
"RTN","DGMTUTL",98,0)
LOCK(DFN) ;
"RTN","DGMTUTL",99,0)
 ; Description: Sets a lock used to synchronize local income test
"RTN","DGMTUTL",100,0)
 ; options with the income test upload. 
"RTN","DGMTUTL",101,0)
 ;
"RTN","DGMTUTL",102,0)
 ;  Input:
"RTN","DGMTUTL",103,0)
 ;    DFN - ien of record in PATIENT file
"RTN","DGMTUTL",104,0)
 ;
"RTN","DGMTUTL",105,0)
 ; Output:
"RTN","DGMTUTL",106,0)
 ;   Function value - returns 1 if the lock was obtained, 0 otherwise.
"RTN","DGMTUTL",107,0)
 ;
"RTN","DGMTUTL",108,0)
 Q:'$G(DFN) 1
"RTN","DGMTUTL",109,0)
 L +^DGMT("LOCAL INCOME TEST",DFN):5
"RTN","DGMTUTL",110,0)
 Q $T
"RTN","DGMTUTL",111,0)
 ;
"RTN","DGMTUTL",112,0)
 ;
"RTN","DGMTUTL",113,0)
UNLOCK(DFN) ;
"RTN","DGMTUTL",114,0)
 ; Description: Release the lock obtained by calling $$LOCK(DFN).
"RTN","DGMTUTL",115,0)
 ;
"RTN","DGMTUTL",116,0)
 ;  Input:
"RTN","DGMTUTL",117,0)
 ;    DFN - ien of record in PATIENT file
"RTN","DGMTUTL",118,0)
 ;
"RTN","DGMTUTL",119,0)
 ; Output: none
"RTN","DGMTUTL",120,0)
 ;
"RTN","DGMTUTL",121,0)
 Q:'$G(DFN)
"RTN","DGMTUTL",122,0)
 L -^DGMT("LOCAL INCOME TEST",DFN)
"RTN","DGMTUTL",123,0)
 Q
"RTN","DGMTUTL",124,0)
 ;
"RTN","DGMTUTL",125,0)
PA(DGMTI) ;Determine if the Pending Adjudication is for MT or GMT
"RTN","DGMTUTL",126,0)
 ; Input:
"RTN","DGMTUTL",127,0)
 ;   DGMTI - IEN of Annual Means Test file #408.31
"RTN","DGMTUTL",128,0)
 ; Output:
"RTN","DGMTUTL",129,0)
 ;   Returns "MT","GMT", or "" if it can't be determined
"RTN","DGMTUTL",130,0)
 ;
"RTN","DGMTUTL",131,0)
 N PA,DGMT0,MTTHR,GMTTHR
"RTN","DGMTUTL",132,0)
 S PA=""
"RTN","DGMTUTL",133,0)
 I '$G(DGMTI) Q PA
"RTN","DGMTUTL",134,0)
 S DGMT0=$G(^DGMT(408.31,DGMTI,0))
"RTN","DGMTUTL",135,0)
 ; If means test status is not Pending Adjudication, quit
"RTN","DGMTUTL",136,0)
 I $P(DGMT0,U,3)'=2 Q PA
"RTN","DGMTUTL",137,0)
 ; Get MT Threshold and GMT Threshold
"RTN","DGMTUTL",138,0)
 S MTTHR=+$P(DGMT0,U,12) I 'MTTHR Q PA
"RTN","DGMTUTL",139,0)
 S GMTTHR=+$P(DGMT0,U,27)
"RTN","DGMTUTL",140,0)
 ; If GMT Threshold is greater than MT Threshold then return GMT,
"RTN","DGMTUTL",141,0)
 ; otherwise return MT
"RTN","DGMTUTL",142,0)
 S PA=$S(GMTTHR>MTTHR:"GMT",1:"MT")
"RTN","DGMTUTL",143,0)
 Q PA
"RTN","DGMTUTL",144,0)
 ;
"RTN","DGMTUTL",145,0)
ISCNVRT(DGINC) ;* Convert Node 0 for records in 408.21 (IAI)
"RTN","DGMTUTL",146,0)
 ; Input:  DGINC - Individual Annual Income IEN Array
"RTN","DGMTUTL",147,0)
 ;
"RTN","DGMTUTL",148,0)
 N RESULT,IAIREC,NULLVAL,PCE,IAIIEN,TOT08,TOT201,TOT204,NWNODE
"RTN","DGMTUTL",149,0)
 S NULLVAL=""
"RTN","DGMTUTL",150,0)
 ;
"RTN","DGMTUTL",151,0)
 ; Convert 408.21 nodes to version 1 form
"RTN","DGMTUTL",152,0)
 F RECTYP="V","S","D"  DO
"RTN","DGMTUTL",153,0)
 . I RECTYP'="D" DO
"RTN","DGMTUTL",154,0)
 . . I $D(DGINC(RECTYP)) DO
"RTN","DGMTUTL",155,0)
 . . . S IAIIEN=DGINC(RECTYP)
"RTN","DGMTUTL",156,0)
 . . . S IAIREC=$G(^DGMT(408.21,IAIIEN,0))
"RTN","DGMTUTL",157,0)
 . . . S NWNODE=$G(^DGMT(408.21,IAIIEN,2))
"RTN","DGMTUTL",158,0)
 . . . S (TOT08,TOT201,TOT204)=0
"RTN","DGMTUTL",159,0)
 . . . S TOT201=$P(NWNODE,"^",1)+$P(NWNODE,"^",2)
"RTN","DGMTUTL",160,0)
 . . . S TOT204=$P(NWNODE,"^",4)-$P(NWNODE,"^",5)
"RTN","DGMTUTL",161,0)
 . . . S PCE=""
"RTN","DGMTUTL",162,0)
 . . . F PCE=8:1:13,15,16 I $P(IAIREC,"^",PCE)'=NULLVAL S TOT08=TOT08+$P(IAIREC,"^",PCE)
"RTN","DGMTUTL",163,0)
 . . . N DGERR,DGMTRT,FLDNM
"RTN","DGMTUTL",164,0)
 . . . S FLDNM=""
"RTN","DGMTUTL",165,0)
 . . . S DGERR=""
"RTN","DGMTUTL",166,0)
 . . . F FLDNM=.09:.01:.13,.15,.16,2.02,2.05 S DGMTRT(408.21,IAIIEN_",",FLDNM)="@"
"RTN","DGMTUTL",167,0)
 . . . S DGMTRT(408.21,IAIIEN_",",".08")=$S(TOT08>0:TOT08,1:"")
"RTN","DGMTUTL",168,0)
 . . . S DGMTRT(408.21,IAIIEN_",","2.01")=$S(TOT201>0:TOT201,1:"")
"RTN","DGMTUTL",169,0)
 . . . S DGMTRT(408.21,IAIIEN_",","2.04")=$S(TOT204>0:TOT204,1:"")
"RTN","DGMTUTL",170,0)
 . . . D FILE^DIE("E","DGMTRT",DGERR)
"RTN","DGMTUTL",171,0)
 . ;
"RTN","DGMTUTL",172,0)
 . I RECTYP="D" DO
"RTN","DGMTUTL",173,0)
 . . N DEPNUM,DGMTVR
"RTN","DGMTUTL",174,0)
 . . S DGMTVR=1
"RTN","DGMTUTL",175,0)
 . . S DEPNUM=""
"RTN","DGMTUTL",176,0)
 . . F  S DEPNUM=$O(DGINC("D",DEPNUM))  Q:DEPNUM=""  DO
"RTN","DGMTUTL",177,0)
 . . . S IAIIEN=DGINC("D",DEPNUM)
"RTN","DGMTUTL",178,0)
 . . . S IAIREC=$G(^DGMT(408.21,IAIIEN,0))
"RTN","DGMTUTL",179,0)
 . . . S NWNODE=$G(^DGMT(408.21,IAIIEN,2))
"RTN","DGMTUTL",180,0)
 . . . S (TOT08,TOT201,TOT204)=0
"RTN","DGMTUTL",181,0)
 . . . S TOT201=$P(NWNODE,"^",1)+$P(NWNODE,"^",2)
"RTN","DGMTUTL",182,0)
 . . . S TOT204=$P(NWNODE,"^",4)-$P(NWNODE,"^",5)
"RTN","DGMTUTL",183,0)
 . . . S PCE=""
"RTN","DGMTUTL",184,0)
 . . . F PCE=8:1:13,15,16 I $P(IAIREC,"^",PCE)'=NULLVAL S TOT08=TOT08+$P(IAIREC,"^",PCE)
"RTN","DGMTUTL",185,0)
 . . . N DGERR,DGMTRT,FLDNM
"RTN","DGMTUTL",186,0)
 . . . S FLDNM=""
"RTN","DGMTUTL",187,0)
 . . . S DGERR=""
"RTN","DGMTUTL",188,0)
 . . . F FLDNM=.09:.01:.13,.15,.16,2.02,2.05 S DGMTRT(408.21,IAIIEN_",",FLDNM)="@"
"RTN","DGMTUTL",189,0)
 . . . S DGMTRT(408.21,IAIIEN_",",".08")=$S(TOT08>0:TOT08,1:"")
"RTN","DGMTUTL",190,0)
 . . . S DGMTRT(408.21,IAIIEN_",","2.01")=$S(TOT201>0:TOT201,1:"")
"RTN","DGMTUTL",191,0)
 . . . S DGMTRT(408.21,IAIIEN_",","2.04")=$S(TOT204>0:TOT204,1:"")
"RTN","DGMTUTL",192,0)
 . . . D FILE^DIE("E","DGMTRT",DGERR)
"RTN","DGMTUTL",193,0)
 Q
"RTN","DGMTUTL3")
0^26^B13743942
"RTN","DGMTUTL3",1,0)
DGMTUTL3 ;ALB/GTS - Means Test generic utilities ; 12/16/05 2:53pm
"RTN","DGMTUTL3",2,0)
 ;;5.3;Registration;**688**;Aug 13, 1993;Build 29
"RTN","DGMTUTL3",3,0)
 ;
"RTN","DGMTUTL3",4,0)
VER(DGINC) ;* Return the version of Individual Annual Income records (0 or 1)
"RTN","DGMTUTL3",5,0)
 ; Input:  DGINC   Individual Annual Income IEN Array
"RTN","DGMTUTL3",6,0)
 ; Output: 1 - version 1 1010EZ form Feb, 2005
"RTN","DGMTUTL3",7,0)
 ;         0 - version 0 1010EZ form pre Feb, 2005
"RTN","DGMTUTL3",8,0)
 ;        -1 - Annual Means Test record is associated and it is not a
"RTN","DGMTUTL3",9,0)
 ;              Means/Co-Pay test
"RTN","DGMTUTL3",10,0)
 ;
"RTN","DGMTUTL3",11,0)
 ;  Example on input array:
"RTN","DGMTUTL3",12,0)
 ;       DGINC("D",#) = 408.21 record IENs for dependents.  # 1 node 
"RTN","DGMTUTL3",13,0)
 ;                       for each Dependent
"RTN","DGMTUTL3",14,0)
 ;       DGINC("S") = 408.21 record IEN for active Spouse
"RTN","DGMTUTL3",15,0)
 ;       DGINC("V") = 408.21 record IEN for Veteran
"RTN","DGMTUTL3",16,0)
 ;
"RTN","DGMTUTL3",17,0)
 N MTVER,RECTYP,IAIIEN,CONVRT,FORM,IAIVER
"RTN","DGMTUTL3",18,0)
 S MTVER=1 ;Version returned from API.  If IAI rec's are for LTC tests,
"RTN","DGMTUTL3",19,0)
 ;           then VER exits and returns -1
"RTN","DGMTUTL3",20,0)
 ;
"RTN","DGMTUTL3",21,0)
 ;If a veteran DGINC node is not defined, then there is no IAI records
"RTN","DGMTUTL3",22,0)
 ; for last year (current MT) and new (version 1) records will be entered
"RTN","DGMTUTL3",23,0)
 ;QUIT!!
"RTN","DGMTUTL3",24,0)
 I '$G(DGINC("V")) Q MTVER
"RTN","DGMTUTL3",25,0)
 ;
"RTN","DGMTUTL3",26,0)
 S CONVRT=-1 ;Indicates record is converted.
"RTN","DGMTUTL3",27,0)
 ;             (-1: LTC rec 0: 408.21/2.11 is null or 0;
"RTN","DGMTUTL3",28,0)
 ;               1: 408.21/2.11 is 1)
"RTN","DGMTUTL3",29,0)
 ; Version returned from IAIWALK.  Any value of 0 causes VER to exit and return 0
"RTN","DGMTUTL3",30,0)
 S IAIVER=1
"RTN","DGMTUTL3",31,0)
 ;            
"RTN","DGMTUTL3",32,0)
 ;
"RTN","DGMTUTL3",33,0)
 ; MTVER could be 0 because the IAI node is walked or is found to either
"RTN","DGMTUTL3",34,0)
 ;  have a 0 or null in 2.11.  If 2.11 is null, the record has not been reviewed
"RTN","DGMTUTL3",35,0)
 ;  and a version not indicated.
"RTN","DGMTUTL3",36,0)
 ;
"RTN","DGMTUTL3",37,0)
 ; Check type of test associated with IAI records
"RTN","DGMTUTL3",38,0)
 I (+$P($G(^DGMT(408.31,+$G(^DGMT(408.21,DGINC("V"),"MT")),0)),"^",19)>2) DO
"RTN","DGMTUTL3",39,0)
 . W !!,"Income Records are for Long Term Care type tests.  This data can not be edited."
"RTN","DGMTUTL3",40,0)
 . S MTVER=-1
"RTN","DGMTUTL3",41,0)
 ;
"RTN","DGMTUTL3",42,0)
 Q:(MTVER=-1) MTVER  ;QUIT if IAI records are for LTC type tests
"RTN","DGMTUTL3",43,0)
 ;
"RTN","DGMTUTL3",44,0)
 ; Quit loop if version is found to be 0 or the MT record has been
"RTN","DGMTUTL3",45,0)
 ;  verified and a version indicated
"RTN","DGMTUTL3",46,0)
 F RECTYP="V","S","D"  Q:(+MTVER=0)  Q:(+CONVRT=1)  DO
"RTN","DGMTUTL3",47,0)
 . I RECTYP'="D" DO
"RTN","DGMTUTL3",48,0)
 . . I $D(DGINC(RECTYP)) DO
"RTN","DGMTUTL3",49,0)
 . . . S IAIIEN=DGINC(RECTYP)
"RTN","DGMTUTL3",50,0)
 . . . ;Check 2.11 on related MT record in 408.31
"RTN","DGMTUTL3",51,0)
 . . . ; (CONVRT=-1 : Conversion check not yet completed)
"RTN","DGMTUTL3",52,0)
 . . . ;MTRECVER will return a value of 0 or 1 for CONVRT
"RTN","DGMTUTL3",53,0)
 . . . D:(+CONVRT=-1) MTRECVER(IAIIEN,.FORM,.CONVRT) ;Assume all IAI rec's have #31 or don't
"RTN","DGMTUTL3",54,0)
 . . . S:(CONVRT=1) MTVER=FORM ;If 408.31 rec has a version,
"RTN","DGMTUTL3",55,0)
 . . . ;                         set MTVER and Quit with that value
"RTN","DGMTUTL3",56,0)
 . . . I CONVRT=0 S IAIVER=$$IAIWALK(IAIIEN) ;IAIVER = 0 when version 0 IAI rec found
"RTN","DGMTUTL3",57,0)
 . . . S:(IAIVER=0) MTVER=0
"RTN","DGMTUTL3",58,0)
 . ;
"RTN","DGMTUTL3",59,0)
 . ;Review Dependent IAI records
"RTN","DGMTUTL3",60,0)
 . I RECTYP="D" DO
"RTN","DGMTUTL3",61,0)
 . . N DEPNUM
"RTN","DGMTUTL3",62,0)
 . . S DEPNUM=""
"RTN","DGMTUTL3",63,0)
 . . ;QUIT 'D' IEN loop when all have been reviewed or related 408.31
"RTN","DGMTUTL3",64,0)
 . . ; record has a version in 2.11
"RTN","DGMTUTL3",65,0)
 . . F  S DEPNUM=$O(DGINC("D",DEPNUM))  Q:DEPNUM=""  Q:CONVRT=1  Q:IAIVER=0  DO
"RTN","DGMTUTL3",66,0)
 . . . S IAIIEN=DGINC("D",DEPNUM)
"RTN","DGMTUTL3",67,0)
 . . . ;Check 2.11 on related MT record in 408.31
"RTN","DGMTUTL3",68,0)
 . . . ; (CONVRT=-1 : conversion check not yet completed)
"RTN","DGMTUTL3",69,0)
 . . . ; MTRECVER will return a value of 0 or 1 for CONVRT
"RTN","DGMTUTL3",70,0)
 . . . D:(+CONVRT=-1) MTRECVER(IAIIEN,.FORM,.CONVRT) ;Assume all IAI rec's have #31 or don't
"RTN","DGMTUTL3",71,0)
 . . . S:(CONVRT=1) MTVER=FORM ;if 408.31 rec has a version, set MTVER and Quit with that value
"RTN","DGMTUTL3",72,0)
 . . . I CONVRT=0 S IAIVER=$$IAIWALK(IAIIEN) ;IAIVER = 0 when version 0 IAI record is found
"RTN","DGMTUTL3",73,0)
 . . . S:(IAIVER=0) MTVER=0
"RTN","DGMTUTL3",74,0)
 Q MTVER
"RTN","DGMTUTL3",75,0)
 ;
"RTN","DGMTUTL3",76,0)
MTRECVER(IAI,VER211,CONVRT) ;* Return the version indicated in 408.31 Means Test Version field (2.11)
"RTN","DGMTUTL3",77,0)
 ; Input:  IAI - Individual Annual Income entry IEN
"RTN","DGMTUTL3",78,0)
 ;
"RTN","DGMTUTL3",79,0)
 ; Output (passed by reference):
"RTN","DGMTUTL3",80,0)
 ;    VER211: 1 - version 1 1010EZ form Feb, 2005
"RTN","DGMTUTL3",81,0)
 ;            0 - version 0 1010EZ form pre Feb, 2005
"RTN","DGMTUTL3",82,0)
 ;         NULL - version not indicated on 408.31
"RTN","DGMTUTL3",83,0)
 ;
"RTN","DGMTUTL3",84,0)
 ;    CONVRT: 0 - Means Test Version field (2.11) is not defined
"RTN","DGMTUTL3",85,0)
 ;            1 - Means Test Version field is defined with a value (0 or 1)
"RTN","DGMTUTL3",86,0)
 ;
"RTN","DGMTUTL3",87,0)
 S CONVRT=0
"RTN","DGMTUTL3",88,0)
 S VER211=$P($G(^DGMT(408.31,+$G(^DGMT(408.21,IAI,"MT")),2)),"^",11)
"RTN","DGMTUTL3",89,0)
 S:(VER211'["") CONVRT=1
"RTN","DGMTUTL3",90,0)
 S VER211=+VER211
"RTN","DGMTUTL3",91,0)
 Q
"RTN","DGMTUTL3",92,0)
 ;
"RTN","DGMTUTL3",93,0)
IAIWALK(IAI) ;* Return the version per findings in 408.21 record
"RTN","DGMTUTL3",94,0)
 ; Input:  IAI - Individual Annual Income entry IEN
"RTN","DGMTUTL3",95,0)
 ; Returned value:
"RTN","DGMTUTL3",96,0)
 ;            0 - Record contains data defined for version 0 (pre Feb, 2005)
"RTN","DGMTUTL3",97,0)
 ;                  Form (pce's 9-13, 15, 16)
"RTN","DGMTUTL3",98,0)
 ;            1 - Record contains data defined for version 1 (Feb, 2005) Form
"RTN","DGMTUTL3",99,0)
 ;
"RTN","DGMTUTL3",100,0)
 N RECVER,IAIREC,NULLVAL,PCE
"RTN","DGMTUTL3",101,0)
 S NULLVAL=""
"RTN","DGMTUTL3",102,0)
 S PCE=""
"RTN","DGMTUTL3",103,0)
 S RECVER=1
"RTN","DGMTUTL3",104,0)
 S IAIREC=$G(^DGMT(408.21,IAI,0))
"RTN","DGMTUTL3",105,0)
 F PCE=9:1:13,15,16 I $P(IAIREC,"^",PCE)'=NULLVAL S RECVER=0
"RTN","DGMTUTL3",106,0)
 Q RECVER
"RTN","DGREGAED")
0^47^B40294783
"RTN","DGREGAED",1,0)
DGREGAED ;ALB/DW/PHH,BAJ - Address Edit API; 01/03/2006 ; 8/15/08 11:29am
"RTN","DGREGAED",2,0)
 ;;5.3;Registration;**522,560,658,730,688**;Aug 13, 1993;Build 29
"RTN","DGREGAED",3,0)
 ;;
"RTN","DGREGAED",4,0)
 ;; **688** Modifications for Country and Foreign address
"RTN","DGREGAED",5,0)
 ;
"RTN","DGREGAED",6,0)
EN(DFN,FLG,SRC) ;Entry point
"RTN","DGREGAED",7,0)
 ;Input: 
"RTN","DGREGAED",8,0)
 ;  DFN (required) - Internal Entry # of Patient File (#2)
"RTN","DGREGAED",9,0)
 ;  FLG (optional) - Flags of 1 or 0; if null, 0 is assumed. Details:
"RTN","DGREGAED",10,0)
 ;    FLG(1) - if 1 let user edit phone numbers (field #.131 and #.132)
"RTN","DGREGAED",11,0)
 ;    FLG(2) - if 1 display before & after address for user confirmation
"RTN","DGREGAED",12,0)
 K EASZIPLK
"RTN","DGREGAED",13,0)
 N DGINPUT,DGCMP,ICNTRY,CNTRY,FORGN,PSTR,OLDC
"RTN","DGREGAED",14,0)
 N I,X,Y
"RTN","DGREGAED",15,0)
 I $G(DFN)="" Q
"RTN","DGREGAED",16,0)
 ;I ($G(DFN)'?.N) Q
"RTN","DGREGAED",17,0)
 S FLG(1)=$G(FLG(1)),FLG(2)=$G(FLG(2))
"RTN","DGREGAED",18,0)
 D GETOLD(.DGCMP,DFN)
"RTN","DGREGAED",19,0)
 S CNTRY="",ICNTRY=$P($G(^DPT(DFN,.11)),"^",10) I ICNTRY="" S ICNTRY=1  ;default country is USA if NULL
"RTN","DGREGAED",20,0)
 S OLDC=DGCMP("OLD",.1173),FORGN=$$FOREIGN^DGADDUTL(DFN,ICNTRY,2,.1173,.CNTRY)
"RTN","DGREGAED",21,0)
 S FSTR=$$INPT1(DFN,FORGN,.PSTR)       ;set up field string of address prompts
"RTN","DGREGAED",22,0)
 S DGINPUT=1 D INPUT(.DGINPUT,DFN,FSTR,CNTRY) I $G(DGINPUT)=-1 Q
"RTN","DGREGAED",23,0)
 I $G(FLG(2))=1 D COMPARE(.DGINPUT,.DGCMP,.FLG)
"RTN","DGREGAED",24,0)
 I '$$CONFIRM() W !,"Change aborted." D EOP Q
"RTN","DGREGAED",25,0)
 N DGPRIOR
"RTN","DGREGAED",26,0)
 D GETPRIOR^DGADDUTL(DFN,.DGPRIOR)
"RTN","DGREGAED",27,0)
 D SAVE(.DGINPUT,DFN,FSTR,FORGN) I $G(SRC)="",+$G(DGNEW) Q
"RTN","DGREGAED",28,0)
 Q:'$$FILEYN^DGADDUTL(.DGPRIOR,.DGINPUT)
"RTN","DGREGAED",29,0)
 D GETUPDTS^DGADDUTL(DFN,.DGINPUT)
"RTN","DGREGAED",30,0)
 D UPDADDLG^DGADDUTL(DFN,.DGPRIOR,.DGINPUT)
"RTN","DGREGAED",31,0)
 Q
"RTN","DGREGAED",32,0)
INPUT(DGINPUT,DFN,FSTR,CNTRY) ;Let user input address changes
"RTN","DGREGAED",33,0)
 ;Output: DGINPUT(field#)=external^internal(if any)
"RTN","DGREGAED",34,0)
 N DIR,X,Y,DA,DGR,DTOUT,DUOUT,DIROUT,DGN,L
"RTN","DGREGAED",35,0)
 F L=1:1:$L(FSTR,",") S DGN=$P(FSTR,",",L),DGINPUT(DGN)="" Q:DGINPUT=-1  D
"RTN","DGREGAED",36,0)
 . I $$SKIP(DGN,.DGINPUT,.FLG) Q
"RTN","DGREGAED",37,0)
 . I DGN=.1112 D ZIPINP(.DGINPUT,DFN) Q
"RTN","DGREGAED",38,0)
 . I '$$READ(DFN,DGN,.Y) S DGINPUT=-1 Q
"RTN","DGREGAED",39,0)
 . I DGN=.121 S Y=$G(Y) D  Q
"RTN","DGREGAED",40,0)
 .. I Y="",DGINPUT(DGN)="" Q
"RTN","DGREGAED",41,0)
 .. I $P(Y,U)=$$GET1^DIQ(2,DFN_",",DGN,"I") S DGINPUT(DGN)=$$GET1^DIQ(2,DFN_",",DGN)_U_$P(Y,U) Q
"RTN","DGREGAED",42,0)
 .. S DGINPUT(DGN)=$P(Y(0),U)_U_Y
"RTN","DGREGAED",43,0)
 . S DGINPUT(DGN)=$G(Y)
"RTN","DGREGAED",44,0)
 I DGINPUT'=-1 S DGINPUT(.1173)=CNTRY_"^"_$O(^HL(779.004,"B",CNTRY,""))
"RTN","DGREGAED",45,0)
 Q
"RTN","DGREGAED",46,0)
GETOLD(DGCMP,DFN) ;populate array with existing address info
"RTN","DGREGAED",47,0)
 N CCIEN,DGCURR,CFORGN,CFSTR,L,T,DGCIEN,DGST,DGCNTY,COUNTRY
"RTN","DGREGAED",48,0)
 S CFORGN=0
"RTN","DGREGAED",49,0)
 ; get current country
"RTN","DGREGAED",50,0)
 ; If current country is NULL it is old data
"RTN","DGREGAED",51,0)
 ; Leave it NULL here because this is not an edit funtion
"RTN","DGREGAED",52,0)
 S CCIEN=$$GET1^DIQ(2,DFN_",","COUNTRY","I")
"RTN","DGREGAED",53,0)
 ;I CCIEN="" S CCIEN=$O(^HL(779.004,"D","UNITED STATES",""))
"RTN","DGREGAED",54,0)
 S CFORGN=$$FORIEN^DGADDUTL(CCIEN)
"RTN","DGREGAED",55,0)
 ;get current address fields and xlate to ^DIQ format
"RTN","DGREGAED",56,0)
 S CFSTR=$$INPT1(DFN,CFORGN),CFSTR=$TR(CFSTR,",",";")
"RTN","DGREGAED",57,0)
 ; Domestic data needs some extra fields
"RTN","DGREGAED",58,0)
 I 'CFORGN S CFSTR=CFSTR_";.114;.115;.117"
"RTN","DGREGAED",59,0)
 D GETS^DIQ(2,DFN_",",CFSTR,"EI","DGCURR")
"RTN","DGREGAED",60,0)
 F L=1:1:$L(CFSTR,";") S T=$P(CFSTR,";",L),DGCMP("OLD",T)=$G(DGCURR(2,DFN_",",T,"E"))
"RTN","DGREGAED",61,0)
 S COUNTRY=$$CNTRYI^DGADDUTL(CCIEN) I COUNTRY=-1 S COUNTRY="UNKNOWN COUNTRY"
"RTN","DGREGAED",62,0)
 S DGCMP("OLD",.1173)=COUNTRY_"^"_CCIEN
"RTN","DGREGAED",63,0)
 I 'CFORGN D
"RTN","DGREGAED",64,0)
 . S DGCIEN=$G(DGCURR(2,DFN_",",.117,"I"))
"RTN","DGREGAED",65,0)
 . S DGST=$G(DGCURR(2,DFN_",",.115,"I"))
"RTN","DGREGAED",66,0)
 . S DGCNTY=$$CNTY^DGREGAZL(DGST,DGCIEN)
"RTN","DGREGAED",67,0)
 . I DGCNTY=-1 S DGCNTY=""
"RTN","DGREGAED",68,0)
 . S DGCMP("OLD",.117)=$P(DGCNTY,U)_" "_$P(DGCNTY,U,3)
"RTN","DGREGAED",69,0)
 Q
"RTN","DGREGAED",70,0)
 ;
"RTN","DGREGAED",71,0)
COMPARE(DGINPUT,DGCMP,FLG) ;Display before & after address fields.
"RTN","DGREGAED",72,0)
 N DGM
"RTN","DGREGAED",73,0)
 M DGCMP("NEW")=DGINPUT
"RTN","DGREGAED",74,0)
 F DGM="OLD","NEW" D
"RTN","DGREGAED",75,0)
 . I DGCMP(DGM,.1173)]"",$$FORIEN^DGADDUTL($P(DGCMP(DGM,.1173),U,2)) D DISPFGN(.DGCMP,DGM,.FLG) Q
"RTN","DGREGAED",76,0)
 . I DGM="NEW" D
"RTN","DGREGAED",77,0)
 . . S DGCNTY=$P($G(DGCMP("NEW",.117)),U)_" "_$P($G(DGCMP("NEW",.117)),U,3)
"RTN","DGREGAED",78,0)
 . . S DGCMP("NEW",.117)=DGCNTY
"RTN","DGREGAED",79,0)
 . . I ($L(DGCMP("NEW",.1112))>5)&($P(DGCMP("NEW",.1112),"-",2)="") S DGCMP("NEW",.1112)=$E(DGCMP("NEW",.1112),1,5)_"-"_$E(DGCMP("NEW",.1112),6,9)
"RTN","DGREGAED",80,0)
 . D DISPUS(.DGCMP,DGM,.FLG)
"RTN","DGREGAED",81,0)
 Q
"RTN","DGREGAED",82,0)
 ;
"RTN","DGREGAED",83,0)
DISPUS(DGCMP,DGM,FLG) ;tag to display US data
"RTN","DGREGAED",84,0)
 N DGCNTRY
"RTN","DGREGAED",85,0)
 W !,?2,"[",DGM," ADDRESS]"
"RTN","DGREGAED",86,0)
 W ?16,$P($G(DGCMP(DGM,.111)),U)
"RTN","DGREGAED",87,0)
 I $P($G(DGCMP(DGM,.112)),U)'="" W !,?16,$P($G(DGCMP(DGM,.112)),U)
"RTN","DGREGAED",88,0)
 I $P($G(DGCMP(DGM,.113)),U)'="" W !,?16,$P($G(DGCMP(DGM,.113)),U)
"RTN","DGREGAED",89,0)
 W !,?16,$P($G(DGCMP(DGM,.114)),U)
"RTN","DGREGAED",90,0)
 W:($P($G(DGCMP(DGM,.114)),U)'="")!($P($G(DGCMP(DGM,.115)),U)'="") ","
"RTN","DGREGAED",91,0)
 W $P($G(DGCMP(DGM,.115)),U)
"RTN","DGREGAED",92,0)
 W " ",$G(DGCMP(DGM,.1112))
"RTN","DGREGAED",93,0)
 S DGCNTRY=$$CNTRYI^DGADDUTL($P($G(DGCMP(DGM,.1173)),U,2))
"RTN","DGREGAED",94,0)
 I DGCNTRY]"",(DGCNTRY'=-1) W !?16,DGCNTRY
"RTN","DGREGAED",95,0)
 I $P($G(DGCMP(DGM,.117)),U)'="" W !,?6,"  County: ",$P($G(DGCMP(DGM,.117)),U)
"RTN","DGREGAED",96,0)
 I $G(FLG(1))=1 D
"RTN","DGREGAED",97,0)
 . W !,?6,"   Phone: ",?16,$P($G(DGCMP(DGM,.131)),U)
"RTN","DGREGAED",98,0)
 . W !,?6,"  Office: ",?16,$P($G(DGCMP(DGM,.132)),U)
"RTN","DGREGAED",99,0)
 W !,?6,"Bad Addr: ",?16,$P($G(DGCMP(DGM,.121)),U)
"RTN","DGREGAED",100,0)
 W !
"RTN","DGREGAED",101,0)
 Q
"RTN","DGREGAED",102,0)
 ;
"RTN","DGREGAED",103,0)
DISPFGN(DGCMP,DGM,FLG) ;tag to display Foreign data
"RTN","DGREGAED",104,0)
 N DGCNTRY
"RTN","DGREGAED",105,0)
 W !,?2,"[",DGM," ADDRESS]"
"RTN","DGREGAED",106,0)
 W ?16,$P($G(DGCMP(DGM,.111)),U)
"RTN","DGREGAED",107,0)
 I $P($G(DGCMP(DGM,.112)),U)'="" W !,?16,$P($G(DGCMP(DGM,.112)),U)
"RTN","DGREGAED",108,0)
 I $P($G(DGCMP(DGM,.113)),U)'="" W !,?16,$P($G(DGCMP(DGM,.113)),U)
"RTN","DGREGAED",109,0)
 W !,?16,$P($G(DGCMP(DGM,.1172)),U)_" "_$P($G(DGCMP(DGM,.114)),U)_" "_$P($G(DGCMP(DGM,.1171)),U)
"RTN","DGREGAED",110,0)
 S DGCNTRY=$$CNTRYI^DGADDUTL($P($G(DGCMP(DGM,.1173)),U,2))
"RTN","DGREGAED",111,0)
 S DGCNTRY=$S(DGCNTRY="":"UNSPECIFIED COUNTRY",DGCNTRY=-1:"UNKNOWN COUNTRY",1:DGCNTRY)
"RTN","DGREGAED",112,0)
 I DGCNTRY]"" W !?16,DGCNTRY
"RTN","DGREGAED",113,0)
 I $G(FLG(1))=1 D
"RTN","DGREGAED",114,0)
 . W !,?6,"   Phone: ",?16,$P($G(DGCMP(DGM,.131)),U)
"RTN","DGREGAED",115,0)
 . W !,?6,"  Office: ",?16,$P($G(DGCMP(DGM,.132)),U)
"RTN","DGREGAED",116,0)
 W !,?6,"Bad Addr: ",?16,$P($G(DGCMP(DGM,.121)),U)
"RTN","DGREGAED",117,0)
 W !
"RTN","DGREGAED",118,0)
 Q
"RTN","DGREGAED",119,0)
 ;
"RTN","DGREGAED",120,0)
CONFIRM() ;Confirm if user wants to save the change
"RTN","DGREGAED",121,0)
 N DIR,X,Y,DTOUT,DUOUT,DIROUT
"RTN","DGREGAED",122,0)
 S DIR(0)="Y"
"RTN","DGREGAED",123,0)
 S DIR("A")="Are you sure that you want to save the above changes"
"RTN","DGREGAED",124,0)
 S DIR("?")="Please answer Y for YES or N for NO."
"RTN","DGREGAED",125,0)
 D ^DIR
"RTN","DGREGAED",126,0)
 I $D(DTOUT)!($G(Y)=0) Q 0
"RTN","DGREGAED",127,0)
 I $D(DUOUT)!$D(DIROUT) Q 0
"RTN","DGREGAED",128,0)
 Q 1
"RTN","DGREGAED",129,0)
SAVE(DGINPUT,DFN,FSTR,FORGN) ;Save changes
"RTN","DGREGAED",130,0)
 N DGN,DGER,DGM,L
"RTN","DGREGAED",131,0)
 S DGER=0
"RTN","DGREGAED",132,0)
 ; need to get the country code into the DGINPUT array
"RTN","DGREGAED",133,0)
 ; if it's a domestic address, we have to add in CITY,STATE & COUNTY
"RTN","DGREGAED",134,0)
 S FSTR=FSTR_$S('FORGN:",.114,.115,.117,.1173",1:",.1173")
"RTN","DGREGAED",135,0)
 F L=1:1:$L(FSTR,",") S DGN=$P(FSTR,",",L) D
"RTN","DGREGAED",136,0)
 . I ($G(FLG(1))'=1)&((DGN=.131)!(DGN=.132)) Q
"RTN","DGREGAED",137,0)
 . N DGCODE,DGNAME,FDA,MSG
"RTN","DGREGAED",138,0)
 . S DGCODE=$P($G(DGINPUT(DGN)),U,2)
"RTN","DGREGAED",139,0)
 . S DGNAME=$P($G(DGINPUT(DGN)),U)
"RTN","DGREGAED",140,0)
 . S FDA(2,DFN_",",DGN)=$S(DGCODE:DGCODE,1:DGNAME)
"RTN","DGREGAED",141,0)
 . D FILE^DIE($S(DGCODE:"",1:"E"),"FDA","MSG")
"RTN","DGREGAED",142,0)
 . I $D(MSG) D
"RTN","DGREGAED",143,0)
 .. S DGM="",DGER=1
"RTN","DGREGAED",144,0)
 .. W !,"Please review the saved changes!!",!
"RTN","DGREGAED",145,0)
 .. F  S DGM=$O(MSG("DIERR",1,"TEXT",DGM)) Q:DGM=""  D
"RTN","DGREGAED",146,0)
 ... W $G(MSG("DIERR",1,"TEXT",DGM))
"RTN","DGREGAED",147,0)
 I $G(DGER)=0 W !,"Change saved."
"RTN","DGREGAED",148,0)
 D EOP
"RTN","DGREGAED",149,0)
 Q
"RTN","DGREGAED",150,0)
READ(DFN,DGN,Y) ;Read input, return success
"RTN","DGREGAED",151,0)
 N SUCCESS,DIR,DA,DTOUT,DUOUT,DIROUT,L,POP
"RTN","DGREGAED",152,0)
 S SUCCESS=1,POP=0
"RTN","DGREGAED",153,0)
 F L=0:0 D  Q:POP
"RTN","DGREGAED",154,0)
 . S DIR(0)=2_","_DGN
"RTN","DGREGAED",155,0)
 . S DA=DFN
"RTN","DGREGAED",156,0)
 . D ^DIR
"RTN","DGREGAED",157,0)
 . I $D(DTOUT) S POP=1,SUCCESS=0 Q
"RTN","DGREGAED",158,0)
 . I $D(DUOUT)!$D(DIROUT) D UPCT Q
"RTN","DGREGAED",159,0)
 . S POP=1
"RTN","DGREGAED",160,0)
 Q SUCCESS
"RTN","DGREGAED",161,0)
INPT1(DFN,FORGN,PSTR) ; first address input prompts
"RTN","DGREGAED",162,0)
 N FSTR
"RTN","DGREGAED",163,0)
 ; PSTR is the full set of fields domestic & foreign combined
"RTN","DGREGAED",164,0)
 ; FSTR is the set of fields depending on Country code
"RTN","DGREGAED",165,0)
 S PSTR=".111,.112,.113,.114,.115,.117,.1112,.1171,.1172,.1173,.131,.132,.121"
"RTN","DGREGAED",166,0)
 S FSTR=".111,.112,.113,.1112,.131,.132,.121"
"RTN","DGREGAED",167,0)
 I FORGN S FSTR=".111,.112,.113,.114,.1171,.1172,.131,.132,.121"
"RTN","DGREGAED",168,0)
 Q FSTR
"RTN","DGREGAED",169,0)
ZIPINP(DGINPUT,DFN) ; get ZIP+4 input
"RTN","DGREGAED",170,0)
 N DGR
"RTN","DGREGAED",171,0)
 D EN^DGREGAZL(.DGR,DFN)
"RTN","DGREGAED",172,0)
 I $G(DGR)=-1 Q
"RTN","DGREGAED",173,0)
 M DGINPUT=DGR
"RTN","DGREGAED",174,0)
 Q
"RTN","DGREGAED",175,0)
SKIP(DGN,DGINPUT,FLG) ; determine whether or not to skip this step
"RTN","DGREGAED",176,0)
 N SKIP
"RTN","DGREGAED",177,0)
 S SKIP=0
"RTN","DGREGAED",178,0)
 I ($G(DGINPUT(.111))="")&((DGN=.112)!(DGN=.113)) S SKIP=1
"RTN","DGREGAED",179,0)
 I ($G(DGINPUT(.112))="")&(DGN=.113) S SKIP=1
"RTN","DGREGAED",180,0)
 I ($G(FLG(1))'=1)&((DGN=.131)!(DGN=.132)) S SKIP=1
"RTN","DGREGAED",181,0)
 Q SKIP
"RTN","DGREGAED",182,0)
EOP ;End of page prompt
"RTN","DGREGAED",183,0)
 N DIR,DTOUT,DUOUT,DIROUT,X,Y
"RTN","DGREGAED",184,0)
 S DIR(0)="E"
"RTN","DGREGAED",185,0)
 S DIR("A")="Press ENTER to continue"
"RTN","DGREGAED",186,0)
 D ^DIR
"RTN","DGREGAED",187,0)
 Q
"RTN","DGREGAED",188,0)
UPCT ;Indicate "^" or "^^" are unacceptable inputs.
"RTN","DGREGAED",189,0)
 W !,"EXIT NOT ALLOWED ??"
"RTN","DGREGAED",190,0)
 Q
"RTN","DGREGARP")
0^84^B87862676
"RTN","DGREGARP",1,0)
DGREGARP ;ALB/DW,ERC-Address audit reports ; 8/1/08 1:21pm
"RTN","DGREGARP",2,0)
 ;;5.3;Registration;**522,560,688**;Aug 13, 1993;Build 29
"RTN","DGREGARP",3,0)
EN(TYPE) ;Entry point
"RTN","DGREGARP",4,0)
 N DGRNG,XMY,XMSUB,XMDUZ,XMTEXT,DGSRT,DGTOTAL
"RTN","DGREGARP",5,0)
 K ^TMP($J,"DG ADD CHNG")
"RTN","DGREGARP",6,0)
 K ^TMP($J,"DG BEFORE")
"RTN","DGREGARP",7,0)
 I ($G(TYPE)'="ALL")&($G(TYPE)'="RX") Q
"RTN","DGREGARP",8,0)
 ;If mail group has no member or remote-member
"RTN","DGREGARP",9,0)
 I '$$MEMBER() D  Q
"RTN","DGREGARP",10,0)
 . I '$D(ZTQUEUED) W !!,"DG DAILY ADDRESS CHANGE does not have a member. Report not sent." D EOP^DGREGAED
"RTN","DGREGARP",11,0)
 ;Entry from TaskMan
"RTN","DGREGARP",12,0)
 I $D(ZTQUEUED) D  Q
"RTN","DGREGARP",13,0)
 . D PRINT
"RTN","DGREGARP",14,0)
 ;User runs the option
"RTN","DGREGARP",15,0)
 I '$D(ZTQUEUED) D
"RTN","DGREGARP",16,0)
 . W !!,"The report will be sent to mail group DG DAILY ADDRESS CHANGE."
"RTN","DGREGARP",17,0)
 . D QUE
"RTN","DGREGARP",18,0)
 . W !! D EOP^DGREGAED
"RTN","DGREGARP",19,0)
 Q
"RTN","DGREGARP",20,0)
MEMBER() ;Return 0 if mail group has no local or remote member
"RTN","DGREGARP",21,0)
 N RESULT,DGIEN,DGRMT
"RTN","DGREGARP",22,0)
 S RESULT=1
"RTN","DGREGARP",23,0)
 S DGIEN=$$FIND1^DIC(3.8,"","X","DG DAILY ADDRESS CHANGE")
"RTN","DGREGARP",24,0)
 D LIST^DIC(3.812,","_DGIEN_",",.01,"P","","","","","","","DGRMT")
"RTN","DGREGARP",25,0)
 I ($P($G(DGRMT("DILIST",0)),U)'>0),('$$GOTLOCAL^XMXAPIG("DG DAILY ADDRESS CHANGE")) S RESULT=0
"RTN","DGREGARP",26,0)
 Q RESULT
"RTN","DGREGARP",27,0)
QUE ;Que the task if user invokes option
"RTN","DGREGARP",28,0)
 N ZTDESC,ZTIO,ZTRTN,ZTSAVE,ZTSK,ZUSR,POP,X,ERR,IOP
"RTN","DGREGARP",29,0)
 W !
"RTN","DGREGARP",30,0)
 S ZTIO=""
"RTN","DGREGARP",31,0)
 S ZTSAVE("TYPE")=""
"RTN","DGREGARP",32,0)
 S ZTRTN="PRINT^DGREGARP"
"RTN","DGREGARP",33,0)
 S ZTDESC="DG "_$G(TYPE)_" ADDRESS CHANGE REPORT"
"RTN","DGREGARP",34,0)
 D ^%ZTLOAD
"RTN","DGREGARP",35,0)
 D ^%ZISC,HOME^%ZIS
"RTN","DGREGARP",36,0)
 W !,$S($D(ZTSK):"REQUEST QUEUED AS TASK#"_ZTSK,1:"REQUEST CANCELLED!")
"RTN","DGREGARP",37,0)
 Q
"RTN","DGREGARP",38,0)
PRESORT ;Sort for the report
"RTN","DGREGARP",39,0)
 N DGRNG
"RTN","DGREGARP",40,0)
 D RANGE(.DGRNG)
"RTN","DGREGARP",41,0)
 I DGRNG=-1 Q
"RTN","DGREGARP",42,0)
 D SORT(.DGRNG,TYPE)
"RTN","DGREGARP",43,0)
 Q
"RTN","DGREGARP",44,0)
PRINT ;Create the email message.
"RTN","DGREGARP",45,0)
 N DGLINE,DFN,SSN,IEN
"RTN","DGREGARP",46,0)
 S (DGLINE,DFN,SSN,IEN)=0
"RTN","DGREGARP",47,0)
 D CHKPAR
"RTN","DGREGARP",48,0)
 D HEADER
"RTN","DGREGARP",49,0)
 D PRESORT
"RTN","DGREGARP",50,0)
 D REPORT
"RTN","DGREGARP",51,0)
 D TOTAL
"RTN","DGREGARP",52,0)
 D EMAIL(TYPE)
"RTN","DGREGARP",53,0)
 Q
"RTN","DGREGARP",54,0)
 ;
"RTN","DGREGARP",55,0)
REPORT ;Create the address change report body
"RTN","DGREGARP",56,0)
 N DGNAME,DGSSN,DGDFN
"RTN","DGREGARP",57,0)
 N DGR,DGUSER,DGDATE,DGSRC,DG12
"RTN","DGREGARP",58,0)
 N DGA,DGFOR,DGN,DGO
"RTN","DGREGARP",59,0)
 N DGPRSCRP
"RTN","DGREGARP",60,0)
 S (DGNAME,DGSSN,DGDFN)=""
"RTN","DGREGARP",61,0)
 F  S DGNAME=$O(^TMP($J,"DG BEFORE",DGNAME)) Q:DGNAME=""  D
"RTN","DGREGARP",62,0)
 . S DGSSN=""
"RTN","DGREGARP",63,0)
 . F  S DGSSN=$O(^TMP($J,"DG BEFORE",DGNAME,DGSSN)) Q:DGSSN=""  D
"RTN","DGREGARP",64,0)
 .. S DGDFN=""
"RTN","DGREGARP",65,0)
 .. F  S DGDFN=$O(^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN)) Q:DGDFN=""  D
"RTN","DGREGARP",66,0)
 ... D GEN(DGNAME,DGSSN,DGDFN)
"RTN","DGREGARP",67,0)
 ... D OLD(DGNAME,DGSSN,DGDFN)
"RTN","DGREGARP",68,0)
 ... D NEW(DGNAME,DGSSN,DGDFN)
"RTN","DGREGARP",69,0)
 ... D PRSCPT(DGDFN)
"RTN","DGREGARP",70,0)
 Q
"RTN","DGREGARP",71,0)
GEN(DGNAME,DGSSN,DGDFN) ;General information for each patient
"RTN","DGREGARP",72,0)
 K DGR
"RTN","DGREGARP",73,0)
 D GETS^DIQ(2,DGDFN_",",".122;.118;.119;.12","E","DGR")
"RTN","DGREGARP",74,0)
 S DGUSER=$G(DGR(2,DGDFN_",",.122,"E"))
"RTN","DGREGARP",75,0)
 S DGDATE=$G(DGR(2,DGDFN_",",.118,"E"))
"RTN","DGREGARP",76,0)
 S DGSRC=$G(DGR(2,DGDFN_",",.119,"E"))
"RTN","DGREGARP",77,0)
 S DG12=$G(DGR(2,DGDFN_",",.12,"E"))
"RTN","DGREGARP",78,0)
 D
"RTN","DGREGARP",79,0)
 . D LNPLUS
"RTN","DGREGARP",80,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)=""
"RTN","DGREGARP",81,0)
 . D LNPLUS
"RTN","DGREGARP",82,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="   PATIENT: "_DGNAME_"   SSN: "_$E(DGSSN,6,10)
"RTN","DGREGARP",83,0)
 . D LNPLUS
"RTN","DGREGARP",84,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="      USER: "_DGUSER_"   DATE: "_DGDATE
"RTN","DGREGARP",85,0)
 . D LNPLUS
"RTN","DGREGARP",86,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="    SOURCE: "_DGSRC_"   "_DG12
"RTN","DGREGARP",87,0)
 Q
"RTN","DGREGARP",88,0)
OLD(DGNAME,DGSSN,DGDFN) ;Get address as of 24 hours ago, assuming audits are on for all
"RTN","DGREGARP",89,0)
 S DGO("ADD1")=$G(^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN,.111))
"RTN","DGREGARP",90,0)
 S DGO("ADD2")=$G(^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN,.112))
"RTN","DGREGARP",91,0)
 S DGO("ADD3")=$G(^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN,.113))
"RTN","DGREGARP",92,0)
 S DGO("CITY")=$G(^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN,.114))
"RTN","DGREGARP",93,0)
 S DGO("ST")=$G(^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN,.115))
"RTN","DGREGARP",94,0)
 S DGO("ZIP")=$G(^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN,.1112))
"RTN","DGREGARP",95,0)
 S DGO("CNTY")=$G(^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN,.117))
"RTN","DGREGARP",96,0)
 S DGO("PROV")=$G(^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN,.1171))
"RTN","DGREGARP",97,0)
 S DGO("PCODE")=$G(^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN,.1172))
"RTN","DGREGARP",98,0)
 S DGO("CNTRY")=$G(^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN,.1173))
"RTN","DGREGARP",99,0)
 S DGFOR=$$FOR^DGADDUTL(DGO("CNTRY"))
"RTN","DGREGARP",100,0)
 I $G(DGO("CNTRY"))]"" D CNTRY^DGADDUT2(.DGO)
"RTN","DGREGARP",101,0)
 S DGO("TAG")="BEFORE"
"RTN","DGREGARP",102,0)
 D DISP(.DGO)
"RTN","DGREGARP",103,0)
 S DGFOR=0
"RTN","DGREGARP",104,0)
 Q
"RTN","DGREGARP",105,0)
DISP(DGA) ;
"RTN","DGREGARP",106,0)
 D LNPLUS
"RTN","DGREGARP",107,0)
 S ^TMP($J,"DG ADD CHNG",DGLINE)="     "_DGA("TAG")_": "_DGA("ADD1")
"RTN","DGREGARP",108,0)
 I $G(DGA("ADD2"))'="" D
"RTN","DGREGARP",109,0)
 . D LNPLUS
"RTN","DGREGARP",110,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="            "_DGA("ADD2")
"RTN","DGREGARP",111,0)
 I $G(DGA("ADD3"))'="" D
"RTN","DGREGARP",112,0)
 . D LNPLUS
"RTN","DGREGARP",113,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="            "_DGA("ADD3")
"RTN","DGREGARP",114,0)
 I 'DGFOR D
"RTN","DGREGARP",115,0)
 . I (DGA("CITY")'="")!(DGA("ST")'="") D
"RTN","DGREGARP",116,0)
 . . D LNPLUS
"RTN","DGREGARP",117,0)
 . . S ^TMP($J,"DG ADD CHNG",DGLINE)="            "_DGA("CITY")_","_DGA("ST")_" "_DGA("ZIP")
"RTN","DGREGARP",118,0)
 I (DGA("CNTY")'="") D
"RTN","DGREGARP",119,0)
 . D LNPLUS
"RTN","DGREGARP",120,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="            "_"COUNTY CODE: "_DGA("CNTY")
"RTN","DGREGARP",121,0)
 I DGFOR D
"RTN","DGREGARP",122,0)
 . I (DGA("CITY")'="")!(DGA("PROV")'="") D
"RTN","DGREGARP",123,0)
 .. D LNPLUS
"RTN","DGREGARP",124,0)
 .. S ^TMP($J,"DG ADD CHNG",DGLINE)="            "_$S(DGA("PCODE")]"":DGA("PCODE")_" ",1:"")_DGA("CITY")_","_DGA("PROV")
"RTN","DGREGARP",125,0)
 I DGA("CNTRY")]"" D
"RTN","DGREGARP",126,0)
 . D LNPLUS
"RTN","DGREGARP",127,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="            "_DGA("CNTRY")
"RTN","DGREGARP",128,0)
 I $G(DGA("HPHN"))'="" D
"RTN","DGREGARP",129,0)
 . D LNPLUS
"RTN","DGREGARP",130,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="  "_"PHONE(H): "_DGA("HPHN")
"RTN","DGREGARP",131,0)
 I $G(DGA("OPHN"))'="" D
"RTN","DGREGARP",132,0)
 . D LNPLUS
"RTN","DGREGARP",133,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="  "_"PHONE(O): "_DGA("OPHN")
"RTN","DGREGARP",134,0)
 Q
"RTN","DGREGARP",135,0)
NEW(DGNAME,DGSSN,DGDFN) ;Get current address
"RTN","DGREGARP",136,0)
 K DGCURR
"RTN","DGREGARP",137,0)
 D GETS^DIQ(2,DGDFN_",",".111;.112;.113;.114;.115;.116;.117:1173;.119;.12;.1112;.131;.132","E","DGCURR")
"RTN","DGREGARP",138,0)
 S DGN("ADD1")=$G(DGCURR(2,DGDFN_",",.111,"E"))
"RTN","DGREGARP",139,0)
 S DGN("ADD2")=$G(DGCURR(2,DGDFN_",",.112,"E"))
"RTN","DGREGARP",140,0)
 S DGN("ADD3")=$G(DGCURR(2,DGDFN_",",.113,"E"))
"RTN","DGREGARP",141,0)
 S DGN("CITY")=$G(DGCURR(2,DGDFN_",",.114,"E"))
"RTN","DGREGARP",142,0)
 S DGN("ST")=$G(DGCURR(2,DGDFN_",",.115,"E"))
"RTN","DGREGARP",143,0)
 S DGN("ZIP")=$G(DGCURR(2,DGDFN_",",.1112,"E"))
"RTN","DGREGARP",144,0)
 S DGN("CNTY")=$G(DGCURR(2,DGDFN_",",.117,"E"))
"RTN","DGREGARP",145,0)
 S DGN("OPHN")=$G(DGCURR(2,DGDFN_",",.132,"E"))
"RTN","DGREGARP",146,0)
 S DGN("HPHN")=$G(DGCURR(2,DGDFN_",",.131,"E"))
"RTN","DGREGARP",147,0)
 S DGN("PROV")=$G(DGCURR(2,DGDFN_",",.1171,"E"))
"RTN","DGREGARP",148,0)
 S DGN("PCODE")=$G(DGCURR(2,DGDFN_",",.1172,"E"))
"RTN","DGREGARP",149,0)
 S DGN("CNTRY")=$G(DGCURR(2,DGDFN_",",.1173,"E"))
"RTN","DGREGARP",150,0)
 S DGFOR=$$FOR^DGADDUTL(DGN("CNTRY"))
"RTN","DGREGARP",151,0)
 I $G(DGN("CNTRY"))]"" D CNTRY^DGADDUT2(.DGN)
"RTN","DGREGARP",152,0)
 S DGN("TAG")="AFTER"
"RTN","DGREGARP",153,0)
 D DISP(.DGN)
"RTN","DGREGARP",154,0)
 Q
"RTN","DGREGARP",155,0)
PRSCPT(DGDFN) ;Display if the patient has active prescription
"RTN","DGREGARP",156,0)
 S DGPRSCRP=$$EN^PSSRXACT(DGDFN)
"RTN","DGREGARP",157,0)
 I $G(DGPRSCRP)=1 D
"RTN","DGREGARP",158,0)
 . D LNPLUS
"RTN","DGREGARP",159,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="Patient has active pharmacy prescription(s)"
"RTN","DGREGARP",160,0)
 Q
"RTN","DGREGARP",161,0)
EXIT S:$D(ZTQUEUED) ZTREQ="@"
"RTN","DGREGARP",162,0)
 K ^TMP($J,"DG ADD CHNG")
"RTN","DGREGARP",163,0)
 K ^TMP($J,"DG BEFORE")
"RTN","DGREGARP",164,0)
 Q
"RTN","DGREGARP",165,0)
CHKPAR ;Check if audit is on for the fields
"RTN","DGREGARP",166,0)
 N DGR,DGN,DGFLD
"RTN","DGREGARP",167,0)
 F DGN=.111,.112,.113,.114,.115,.116,.117,.1171,.1172,.1173,.1112 D
"RTN","DGREGARP",168,0)
 . K DGR
"RTN","DGREGARP",169,0)
 . D FIELD^DID(2,DGN,"","LABEL;AUDIT","DGR")
"RTN","DGREGARP",170,0)
 . I $D(DGR("DIERR")) Q
"RTN","DGREGARP",171,0)
 . I ($G(DGR("AUDIT"))'["YES")&($G(DGR("AUDIT"))'["EDITED OR DELETED") D
"RTN","DGREGARP",172,0)
 .. D LNPLUS^DGREGARP
"RTN","DGREGARP",173,0)
 .. S ^TMP($J,"DG ADD CHNG",DGLINE)="Audit is off for the "_$G(DGR("LABEL"))_" field"
"RTN","DGREGARP",174,0)
 Q
"RTN","DGREGARP",175,0)
RANGE(RESULT) ;Get the range of the reports
"RTN","DGREGARP",176,0)
 K RESULT
"RTN","DGREGARP",177,0)
 N DGBEGIN,DGEND,DGNOW,DGAGO
"RTN","DGREGARP",178,0)
 N X,X1,X2
"RTN","DGREGARP",179,0)
 D NOW^%DTC
"RTN","DGREGARP",180,0)
 S DGNOW=%
"RTN","DGREGARP",181,0)
 S X1=%,X2="-1" D C^%DTC
"RTN","DGREGARP",182,0)
 S DGAGO=X
"RTN","DGREGARP",183,0)
 S DGNOW=$O(^DIA(2,"C",DGNOW),-1)
"RTN","DGREGARP",184,0)
 S DGAGO=$O(^DIA(2,"C",DGAGO))
"RTN","DGREGARP",185,0)
 I ($G(DGNOW)="")!($G(DGAGO)="") S RESULT=-1 Q
"RTN","DGREGARP",186,0)
 S (DGBEGIN,DGEND)=""
"RTN","DGREGARP",187,0)
 S DGBEGIN=$O(^DIA(2,"C",DGNOW,DGBEGIN),-1)
"RTN","DGREGARP",188,0)
 S DGEND=$O(^DIA(2,"C",DGAGO,DGEND))
"RTN","DGREGARP",189,0)
 I $G(DGBEGIN)=""!$G(DGEND)="" S RESULT=-1 Q
"RTN","DGREGARP",190,0)
 S DGBEGIN=DGBEGIN+1
"RTN","DGREGARP",191,0)
 S RESULT=DGBEGIN_U_DGEND
"RTN","DGREGARP",192,0)
 Q
"RTN","DGREGARP",193,0)
SORT(RANGE,TYPE) ;Build the temp global to display
"RTN","DGREGARP",194,0)
 N DGBEGIN,DGEND,DGIEN,DGDFN,DGFLD
"RTN","DGREGARP",195,0)
 S DGIEN=$P($G(RANGE),U)
"RTN","DGREGARP",196,0)
 S DGEND=$P($G(RANGE),U,2)
"RTN","DGREGARP",197,0)
 F  S DGIEN=$O(^DIA(2,DGIEN),-1) Q:DGIEN<DGEND  D:$$SCRN(TYPE,DGIEN)
"RTN","DGREGARP",198,0)
 . D BUILD(TYPE,DGIEN)
"RTN","DGREGARP",199,0)
 Q
"RTN","DGREGARP",200,0)
SCRN(TYPE,DGIEN) ;Screen Audit file to find address changes.
"RTN","DGREGARP",201,0)
 N DGFLD
"RTN","DGREGARP",202,0)
 S DGFLD=$P($G(^DIA(2,DGIEN,0)),U,3)
"RTN","DGREGARP",203,0)
 I (DGFLD=.114)!(DGFLD=.116)!(DGFLD=.117)!(DGFLD=.1112)!(DGFLD=.115) Q 1
"RTN","DGREGARP",204,0)
 I (DGFLD=.111)!(DGFLD=.112)!(DGFLD=.113)!(DGFLD=.1171)!(DGFLD=.1172)!(DGFLD=.1173) Q 1
"RTN","DGREGARP",205,0)
 Q 0
"RTN","DGREGARP",206,0)
BUILD(TYPE,DGIEN) ;Build temp global
"RTN","DGREGARP",207,0)
 N DGDFN,DGFLD,DGNAME,DGSSN,DGCURR,DGN
"RTN","DGREGARP",208,0)
 S DGDFN=$P($G(^DIA(2,DGIEN,0)),U)
"RTN","DGREGARP",209,0)
 I $G(TYPE)="RX" Q:'$$EN^PSSRXACT(DGDFN)
"RTN","DGREGARP",210,0)
 D GETS^DIQ(2,DGDFN_",",".01;.09","E","DGCURR")
"RTN","DGREGARP",211,0)
 S DGNAME=$G(DGCURR(2,DGDFN_",",.01,"E"))
"RTN","DGREGARP",212,0)
 S DGSSN=$G(DGCURR(2,DGDFN_",",.09,"E"))
"RTN","DGREGARP",213,0)
 I ($G(DGNAME)="")!($G(DGSSN)="")!($G(DGDFN)="") Q
"RTN","DGREGARP",214,0)
 S DGFLD=$P($G(^DIA(2,DGIEN,0)),U,3)
"RTN","DGREGARP",215,0)
 I '$D(^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN)) D
"RTN","DGREGARP",216,0)
 . ;Get current address
"RTN","DGREGARP",217,0)
 . K DGCURR,DGN
"RTN","DGREGARP",218,0)
 . D GETS^DIQ(2,DGDFN_",",".111;.112;.113;.114;.115;.116;.117:.1173;.1112","E","DGCURR")
"RTN","DGREGARP",219,0)
 . F DGN=.111,.112,.113,.114,.115,.116,.117,.1171,.1172,.1173,.1112 D
"RTN","DGREGARP",220,0)
 .. S ^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN,DGN)=$G(DGCURR(2,DGDFN_",",DGN,"E"))
"RTN","DGREGARP",221,0)
 . S DGTOTAL=$G(DGTOTAL)+1
"RTN","DGREGARP",222,0)
 S ^TMP($J,"DG BEFORE",DGNAME,DGSSN,DGDFN,DGFLD)=$P($G(^DIA(2,DGIEN,2)),U)
"RTN","DGREGARP",223,0)
 Q
"RTN","DGREGARP",224,0)
LNPLUS ;Increase line number for the email text
"RTN","DGREGARP",225,0)
 S DGLINE=$G(DGLINE)+1
"RTN","DGREGARP",226,0)
 Q
"RTN","DGREGARP",227,0)
HEADER ;Report header
"RTN","DGREGARP",228,0)
 N RDT,Y
"RTN","DGREGARP",229,0)
 I $G(TYPE)="ALL" D
"RTN","DGREGARP",230,0)
 . D LNPLUS
"RTN","DGREGARP",231,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)=""
"RTN","DGREGARP",232,0)
 . D LNPLUS
"RTN","DGREGARP",233,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="                       ALL ADDRESS CHANGE REPORT"
"RTN","DGREGARP",234,0)
 I $G(TYPE)="RX" D
"RTN","DGREGARP",235,0)
 . D LNPLUS
"RTN","DGREGARP",236,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)=""
"RTN","DGREGARP",237,0)
 . D LNPLUS
"RTN","DGREGARP",238,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="   ALL ADDRESS CHANGE FOR PATIENTS WITH ACTIVE PRESCRIPTIONS REPORT"
"RTN","DGREGARP",239,0)
 D NOW^%DTC S Y=% X ^DD("DD")
"RTN","DGREGARP",240,0)
 S RDT=$P(Y,"@",1)_"@"_$P($P(Y,"@",2),":",1,2)
"RTN","DGREGARP",241,0)
 D
"RTN","DGREGARP",242,0)
 . D LNPLUS
"RTN","DGREGARP",243,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="            The BEFORE address shown may not be accurate."
"RTN","DGREGARP",244,0)
 . D LNPLUS
"RTN","DGREGARP",245,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="     It is only valid as of 24 hours prior to running the report."
"RTN","DGREGARP",246,0)
 . D LNPLUS
"RTN","DGREGARP",247,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="          Changes within the last 24 hours will not be shown."
"RTN","DGREGARP",248,0)
 . D LNPLUS^DGREGARP
"RTN","DGREGARP",249,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="               Date/Time Report Run: "_RDT
"RTN","DGREGARP",250,0)
 . D LNPLUS^DGREGARP
"RTN","DGREGARP",251,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="-----------------------------------------------------------------------------"
"RTN","DGREGARP",252,0)
 Q
"RTN","DGREGARP",253,0)
TOTAL ;Get the total of the patients
"RTN","DGREGARP",254,0)
 N DGCNT
"RTN","DGREGARP",255,0)
 ;S DGCNT=$G(^TMP($J,"DG BEFORE","TOTAL"))
"RTN","DGREGARP",256,0)
 S DGCNT=$G(DGTOTAL)
"RTN","DGREGARP",257,0)
 I $G(DGCNT)>0 D
"RTN","DGREGARP",258,0)
 . D LNPLUS
"RTN","DGREGARP",259,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)=""
"RTN","DGREGARP",260,0)
 . D LNPLUS
"RTN","DGREGARP",261,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="TOTAL RECORD(S): "_DGCNT
"RTN","DGREGARP",262,0)
 Q
"RTN","DGREGARP",263,0)
EMAIL(TYPE) ;Email the report to mailgroup.
"RTN","DGREGARP",264,0)
 ;If called within a task, protect variables
"RTN","DGREGARP",265,0)
 I $D(ZTQUEUED) N %,DIFROM
"RTN","DGREGARP",266,0)
 N RDT
"RTN","DGREGARP",267,0)
 D NOW^%DTC S Y=% X ^DD("DD")
"RTN","DGREGARP",268,0)
 S RDT=$P(Y,"@",1)_"@"_$P($P(Y,"@",2),":",1,2)
"RTN","DGREGARP",269,0)
 S XMSUB="DG "_$G(TYPE)_" ADDRESS CHANGE ("_RDT_")"
"RTN","DGREGARP",270,0)
 S XMY("G.DG DAILY ADDRESS CHANGE")=""
"RTN","DGREGARP",271,0)
 I $G(DGTOTAL)'>0 D
"RTN","DGREGARP",272,0)
 . D LNPLUS
"RTN","DGREGARP",273,0)
 . S ^TMP($J,"DG ADD CHNG",DGLINE)="*** NO RECORDS TO PRINT ***"
"RTN","DGREGARP",274,0)
 S XMTEXT="^TMP($J,""DG ADD CHNG"","
"RTN","DGREGARP",275,0)
 D ^XMD
"RTN","DGREGARP",276,0)
 Q
"RTN","DGREGTE2")
0^88^B21750712
"RTN","DGREGTE2",1,0)
DGREGTE2 ;ALB/BAJ - Temporary & Confidential Address Support Routine; 02/27/2006
"RTN","DGREGTE2",2,0)
 ;;5.3;Registration;**688**;Aug 13, 1993;Build 29
"RTN","DGREGTE2",3,0)
 ;
"RTN","DGREGTE2",4,0)
 Q
"RTN","DGREGTE2",5,0)
 ;
"RTN","DGREGTE2",6,0)
GETOLD(DGCMP,DFN,TYPE) ;populate array with existing address info
"RTN","DGREGTE2",7,0)
 N CCIEN,DGCURR,CFORGN,CFSTR,L,T,DGCIEN,DGST,DGCNTY,FDESC,FNODE,FPECE,CCNTRY,COUNTRY
"RTN","DGREGTE2",8,0)
 S CFORGN=0,FDESC=$S(TYPE="TEMP":"TEMPORARY ADDRESS COUNTRY",1:"CONFIDENTIAL ADDR COUNTRY")
"RTN","DGREGTE2",9,0)
 ; get current country
"RTN","DGREGTE2",10,0)
 S FNODE=$S(TYPE="TEMP":.122,TYPE="CONF":.141,1:.11)
"RTN","DGREGTE2",11,0)
 S FPECE=$S(TYPE="TEMP":3,TYPE="CONF":16,1:10)
"RTN","DGREGTE2",12,0)
 S CCIEN=$P($G(^DPT(DFN,FNODE)),U,FPECE)
"RTN","DGREGTE2",13,0)
 I CCIEN="" S CCNTRY=$O(^HL(779.004,"D","UNITED STATES",""))
"RTN","DGREGTE2",14,0)
 S CFORGN=$$FORIEN^DGADDUTL(CCIEN)
"RTN","DGREGTE2",15,0)
 ;get current address fields and xlate to ^DIQ format
"RTN","DGREGTE2",16,0)
 S CFSTR=$$INPT1(DFN,CFORGN),CFSTR=$TR(CFSTR,",",";")
"RTN","DGREGTE2",17,0)
 ; Domestic data needs some extra fields
"RTN","DGREGTE2",18,0)
 ; add country field before lookup
"RTN","DGREGTE2",19,0)
 D GETS^DIQ(2,DFN_",",CFSTR,"EI","DGCURR")
"RTN","DGREGTE2",20,0)
 F L=1:1:$L(CFSTR,";") S T=$P(CFSTR,";",L),DGCMP("OLD",T)=$G(DGCURR(2,DFN_",",T,"E"))
"RTN","DGREGTE2",21,0)
 S COUNTRY=$$CNTRYI^DGADDUTL(CCIEN) I COUNTRY=-1 S COUNTRY="UNKNOWN COUNTRY"
"RTN","DGREGTE2",22,0)
 S DGCMP("OLD",FCNTRY)=COUNTRY
"RTN","DGREGTE2",23,0)
 I 'CFORGN D
"RTN","DGREGTE2",24,0)
 . S DGCIEN=$G(DGCURR(2,DFN_",",FCOUNTY,"I"))
"RTN","DGREGTE2",25,0)
 . S DGST=$G(DGCURR(2,DFN_",",FSTATE,"I"))
"RTN","DGREGTE2",26,0)
 . S DGCNTY=$$CNTY^DGREGAZL(DGST,DGCIEN)
"RTN","DGREGTE2",27,0)
 . I DGCNTY=-1 S DGCNTY=""
"RTN","DGREGTE2",28,0)
 . S DGCMP("OLD",FCOUNTY)="" I DGCNTY]"" S DGCMP("OLD",FCOUNTY)=$P(DGCNTY,U)_" "_$P(DGCNTY,U,3)
"RTN","DGREGTE2",29,0)
 Q
"RTN","DGREGTE2",30,0)
INPT1(DFN,FORGN,PSTR) ; address input prompts
"RTN","DGREGTE2",31,0)
 N FSTR
"RTN","DGREGTE2",32,0)
 ; PSTR contains the full list of address fields to be modified
"RTN","DGREGTE2",33,0)
 ; FSTR contains the field list based on country
"RTN","DGREGTE2",34,0)
 S PSTR=FSLINE1_","_FSLINE2_","_FSLINE3_","_FCITY_","_FSTATE_","_FCOUNTY_","_FZIP_","_FPROV_","_FPSTAL_","_FCNTRY_$S(TYPE="TEMP":","_FPHONE,1:"")
"RTN","DGREGTE2",35,0)
 S FSTR=FSLINE1_","_FSLINE2_","_FSLINE3_","_FCITY_","_FSTATE_","_FCOUNTY_","_FZIP_$S(TYPE="TEMP":","_FPHONE,1:"")
"RTN","DGREGTE2",36,0)
 I FORGN S FSTR=FSLINE1_","_FSLINE2_","_FSLINE3_","_FCITY_","_FPROV_","_FPSTAL_$S(TYPE="TEMP":","_FPHONE,1:"")
"RTN","DGREGTE2",37,0)
 Q FSTR
"RTN","DGREGTE2",38,0)
 ;
"RTN","DGREGTE2",39,0)
SURE() ; Are you sure prompt
"RTN","DGREGTE2",40,0)
 N DIR,X,Y,DUOUT,DTOUT,DIRUT
"RTN","DGREGTE2",41,0)
 S DIR(0)="Y"
"RTN","DGREGTE2",42,0)
 S DIR("B")="NO"
"RTN","DGREGTE2",43,0)
 S DIR("A")="   SURE YOU WANT TO DELETE"
"RTN","DGREGTE2",44,0)
 D ^DIR
"RTN","DGREGTE2",45,0)
 Q Y
"RTN","DGREGTE2",46,0)
SKIP(DGN,DGINPUT) ; determine whether or not to skip the prompt
"RTN","DGREGTE2",47,0)
 N SKIP,NULL
"RTN","DGREGTE2",48,0)
 S SKIP=0
"RTN","DGREGTE2",49,0)
 S NULL=($G(DGINPUT(FSLINE1))="")!(($G(DGINPUT(FSLINE1))="@"))
"RTN","DGREGTE2",50,0)
 I NULL,(DGN=FSLINE2) S SKIP=1
"RTN","DGREGTE2",51,0)
 S NULL=($G(DGINPUT(FSLINE2))="")!(($G(DGINPUT(FSLINE2))="@"))
"RTN","DGREGTE2",52,0)
 I NULL,(DGN=FSLINE3) S SKIP=1
"RTN","DGREGTE2",53,0)
 Q SKIP
"RTN","DGREGTE2",54,0)
 ;
"RTN","DGREGTE2",55,0)
INIT ; initialize variables
"RTN","DGREGTE2",56,0)
 ; This tag reads the table at FLDDAT (below) to set relationship between
"RTN","DGREGTE2",57,0)
 ; variables and Field numbers.
"RTN","DGREGTE2",58,0)
 ; 
"RTN","DGREGTE2",59,0)
 ; Set up array of fields needed
"RTN","DGREGTE2",60,0)
 N I,T,FTYPE,VNAME,FNUM,RFLD
"RTN","DGREGTE2",61,0)
 F I=1:1 S T=$P($T(FLDDAT+I^DGREGTE2),";;",3) Q:T="QUIT"  D
"RTN","DGREGTE2",62,0)
 . S FTYPE=$P(T,";",1),VNAME=$P(T,";",2),FNUM=$P(T,";",3)
"RTN","DGREGTE2",63,0)
 . I FTYPE=TYPE S @VNAME=FNUM
"RTN","DGREGTE2",64,0)
 ; Set up array of field and prompting rules
"RTN","DGREGTE2",65,0)
 K T,I
"RTN","DGREGTE2",66,0)
 F I=1:1 S T=$P($T(FLDPRMPT+I^DGREGTE2),";;",2) Q:T="QUIT"  D
"RTN","DGREGTE2",67,0)
 . S RFLD=$P(T,";",1) I RFLD'="ALL" S RFLD=@RFLD
"RTN","DGREGTE2",68,0)
 . S RPROC(RFLD,$P(T,";",2),$P(T,";",3))=$P(T,";",4)
"RTN","DGREGTE2",69,0)
 Q
"RTN","DGREGTE2",70,0)
FLDDAT ; Table of field values STRUCTURE --> Description;;Type;Variable Name;Field Number
"RTN","DGREGTE2",71,0)
 ;;Street Line 1;;TEMP;FSLINE1;.1211
"RTN","DGREGTE2",72,0)
 ;;Street Line 2;;TEMP;FSLINE2;.1212
"RTN","DGREGTE2",73,0)
 ;;Street Line 3;;TEMP;FSLINE3;.1213
"RTN","DGREGTE2",74,0)
 ;;City;;TEMP;FCITY;.1214
"RTN","DGREGTE2",75,0)
 ;;State;;TEMP;FSTATE;.1215
"RTN","DGREGTE2",76,0)
 ;;County;;TEMP;FCOUNTY;.12111
"RTN","DGREGTE2",77,0)
 ;;Zip;;TEMP;FZIP;.12112
"RTN","DGREGTE2",78,0)
 ;;Phone;;TEMP;FPHONE;.1219
"RTN","DGREGTE2",79,0)
 ;;Province;;TEMP;FPROV;.1221
"RTN","DGREGTE2",80,0)
 ;;Postal Code;;TEMP;FPSTAL;.1222
"RTN","DGREGTE2",81,0)
 ;;Country;;TEMP;FCNTRY;.1223
"RTN","DGREGTE2",82,0)
 ;;Address Node 1;;TEMP;FNODE1;.121
"RTN","DGREGTE2",83,0)
 ;;Address Node 2;;TEMP;FNODE2;.122
"RTN","DGREGTE2",84,0)
 ;;Country data piece;;TEMP;CPEICE;3
"RTN","DGREGTE2",85,0)
 ;;Street Line 1;;CONF;FSLINE1;.1411
"RTN","DGREGTE2",86,0)
 ;;Street Line 2;;CONF;FSLINE2;.1412
"RTN","DGREGTE2",87,0)
 ;;Street Line 3;;CONF;FSLINE3;.1413
"RTN","DGREGTE2",88,0)
 ;;City;;CONF;FCITY;.1414
"RTN","DGREGTE2",89,0)
 ;;State;;CONF;FSTATE;.1415
"RTN","DGREGTE2",90,0)
 ;;County;;CONF;FCOUNTY;.14111
"RTN","DGREGTE2",91,0)
 ;;Zip;;CONF;FZIP;.1416
"RTN","DGREGTE2",92,0)
 ;;Phone;;CONF;FPHONE;
"RTN","DGREGTE2",93,0)
 ;;Province;;CONF;FPROV;.14114
"RTN","DGREGTE2",94,0)
 ;;Postal Code;;CONF;FPSTAL;.14115
"RTN","DGREGTE2",95,0)
 ;;Country;;CONF;FCNTRY;.14116
"RTN","DGREGTE2",96,0)
 ;;Address Node 1;;CONF;FNODE1;.141
"RTN","DGREGTE2",97,0)
 ;;Address Node 2;;CONF;FNODE2;.141
"RTN","DGREGTE2",98,0)
 ;;Country data piece;;CONF;CPEICE;16
"RTN","DGREGTE2",99,0)
 ;;QUIT;;QUIT
"RTN","DGREGTE2",100,0)
 ;;
"RTN","DGREGTE2",101,0)
FLDPRMPT ;Table of prompts and responses STRUCTURE --> Description;;Field;Old Value;New Value;Response Code
"RTN","DGREGTE2",102,0)
 ;;ALL;NULL;UPCAR;REPEAT
"RTN","DGREGTE2",103,0)
 ;;ALL;NULL;DELETE;QUES
"RTN","DGREGTE2",104,0)
 ;;ALL;NULL;VALUE;OK
"RTN","DGREGTE2",105,0)
 ;;ALL;VALUE;UPCAR;REPEAT
"RTN","DGREGTE2",106,0)
 ;;ALL;VALUE;NULL;OK
"RTN","DGREGTE2",107,0)
 ;;ALL;VALUE;VALUE;OK
"RTN","DGREGTE2",108,0)
 ;;FSLINE1;NULL;NULL;REVERSE
"RTN","DGREGTE2",109,0)
 ;;FSLINE2;NULL;NULL;OK
"RTN","DGREGTE2",110,0)
 ;;FSLINE3;NULL;NULL;OK
"RTN","DGREGTE2",111,0)
 ;;FCITY;NULL;NULL;REVERSE
"RTN","DGREGTE2",112,0)
 ;;FSTATE;NULL;NULL;REVERSE
"RTN","DGREGTE2",113,0)
 ;;FZIP;NULL;NULL;REVERSE
"RTN","DGREGTE2",114,0)
 ;;FCOUNTY;NULL;NULL;REVERSE
"RTN","DGREGTE2",115,0)
 ;;FPROV;NULL;NULL;OK
"RTN","DGREGTE2",116,0)
 ;;FPSTAL;NULL;NULL;OK
"RTN","DGREGTE2",117,0)
 ;;FCNTRY;NULL;NULL;REVERSE
"RTN","DGREGTE2",118,0)
 ;;FSLINE1;VALUE;DELETE;INSTRUCT
"RTN","DGREGTE2",119,0)
 ;;FSLINE2;VALUE;DELETE;CONFIRM
"RTN","DGREGTE2",120,0)
 ;;FSLINE3;VALUE;DELETE;CONFIRM
"RTN","DGREGTE2",121,0)
 ;;FCITY;VALUE;DELETE;INSTRUCT
"RTN","DGREGTE2",122,0)
 ;;FSTATE;VALUE;DELETE;INSTRUCT
"RTN","DGREGTE2",123,0)
 ;;FZIP;VALUE;DELETE;INSTRUCT
"RTN","DGREGTE2",124,0)
 ;;FCOUNTY;VALUE;DELETE;INSTRUCT
"RTN","DGREGTE2",125,0)
 ;;FPROV;VALUE;DELETE;CONFIRM
"RTN","DGREGTE2",126,0)
 ;;FPSTAL;VALUE;DELETE;CONFIRM
"RTN","DGREGTE2",127,0)
 ;;FCNTRY;VALUE;DELETE;REVERSE
"RTN","DGREGTE2",128,0)
 ;;QUIT
"RTN","DGREGTE2",129,0)
 ;;
"RTN","DGREGTED")
0^53^B23110608
"RTN","DGREGTED",1,0)
DGREGTED ;ALB/BAJ - Temporary & Confidential Address Edits API ; 8/1/08 1:22pm
"RTN","DGREGTED",2,0)
 ;;5.3;Registration;**688**;Aug 13, 1993;Build 29
"RTN","DGREGTED",3,0)
EN(DFN,TYPE,RET) ;Entry point
"RTN","DGREGTED",4,0)
 ; This routine controls Edits to Temporary & Confidential addresses
"RTN","DGREGTED",5,0)
 ; 
"RTN","DGREGTED",6,0)
 ; Input
"RTN","DGREGTED",7,0)
 ;       DFN  = Patient DFN
"RTN","DGREGTED",8,0)
 ;       TYPE = Type of address: "TEMP" or "CONF"
"RTN","DGREGTED",9,0)
 ;       RET  = Flag to signal return to first prompt
"RTN","DGREGTED",10,0)
 ;       
"RTN","DGREGTED",11,0)
 ; Output
"RTN","DGREGTED",12,0)
 ;       RET  0 = Return to first prompt
"RTN","DGREGTED",13,0)
 ;            1 = Do not return
"RTN","DGREGTED",14,0)
 ;       
"RTN","DGREGTED",15,0)
 N DGINPUT,FORGN,FSTR,ICNTRY,CNTRY,PSTR,DGCMP,DGOLD
"RTN","DGREGTED",16,0)
 N FSLINE1,FSLINE2,FSLINE3,FCITY,FSTATE,FCOUNTY,FZIP,FPHONE
"RTN","DGREGTED",17,0)
 N FPROV,FPSTAL,FCNTRY,FNODE1,FNODE2,CPEICE,OLDC,RPROC
"RTN","DGREGTED",18,0)
 N I,X,Y
"RTN","DGREGTED",19,0)
 I $G(DFN)="" Q
"RTN","DGREGTED",20,0)
 ;I ($G(DFN)'?.N) Q
"RTN","DGREGTED",21,0)
 D INIT^DGREGTE2  I $P($G(^DPT(DFN,FNODE1)),U,9)="N" Q
"RTN","DGREGTED",22,0)
 D GETOLD^DGREGTE2(.DGCMP,DFN,TYPE) M DGOLD=DGCMP("OLD") K DGCMP
"RTN","DGREGTED",23,0)
 S CNTRY="",ICNTRY=$P($G(^DPT(DFN,FNODE2)),"^",CPEICE) I ICNTRY="" S ICNTRY=1    ;default US if NULL
"RTN","DGREGTED",24,0)
 S FORGN=$$FOREIGN^DGADDUTL(DFN,ICNTRY,2,FCNTRY,.CNTRY) Q:$G(CNTRY)=""  I FORGN=-1 S RET=0 Q
"RTN","DGREGTED",25,0)
 S FSTR=$$INPT1^DGREGTE2(DFN,FORGN,.PSTR),DGINPUT=1 D INPUT(.DGINPUT,DFN,FSTR)
"RTN","DGREGTED",26,0)
 I $G(DGINPUT)=-1 S RET=0 Q
"RTN","DGREGTED",27,0)
 D SAVE(.DGINPUT,DFN,FSTR,CNTRY)
"RTN","DGREGTED",28,0)
 Q
"RTN","DGREGTED",29,0)
 ;
"RTN","DGREGTED",30,0)
INPUT(DGINPUT,DFN,FSTR) ;Let user input address changes
"RTN","DGREGTED",31,0)
 ; Input:
"RTN","DGREGTED",32,0)
 ;       DGINPUT - Array to hold field values DGINPUT(field#)
"RTN","DGREGTED",33,0)
 ;       DFN     - Patient DFN
"RTN","DGREGTED",34,0)
 ;       FSTR    - String of fields (foreign or domestic) to work with
"RTN","DGREGTED",35,0)
 ;       
"RTN","DGREGTED",36,0)
 ; Output: 
"RTN","DGREGTED",37,0)
 ;       DGINPUT(field#)=external^internal(if any)
"RTN","DGREGTED",38,0)
 ; 
"RTN","DGREGTED",39,0)
 N DIR,X,Y,DA,DGR,DTOUT,DUOUT,DIROUT,DGN,L,SUCCESS,REP
"RTN","DGREGTED",40,0)
 F L=1:1:$L(FSTR,",") S DGN=$P(FSTR,",",L) Q:DGINPUT=-1  D
"RTN","DGREGTED",41,0)
 . S REP=0
"RTN","DGREGTED",42,0)
 . I $$SKIP^DGREGTE2(DGN,.DGINPUT) Q
"RTN","DGREGTED",43,0)
 . S SUCCESS=$$READ(DFN,.DGOLD,DGN,.Y,.REP) I 'SUCCESS D  Q
"RTN","DGREGTED",44,0)
 . . I 'REP S DGINPUT=-1 Q
"RTN","DGREGTED",45,0)
 . . ; repeat the question so we have to set the counter back
"RTN","DGREGTED",46,0)
 . . S L=L-1
"RTN","DGREGTED",47,0)
 . S DGINPUT(DGN)=$G(Y)
"RTN","DGREGTED",48,0)
 Q
"RTN","DGREGTED",49,0)
 ;
"RTN","DGREGTED",50,0)
READ(DFN,DGOLD,DGN,Y,REP) ;Read input, return success
"RTN","DGREGTED",51,0)
 ; Input:
"RTN","DGREGTED",52,0)
 ;       DFN   - Patient DFN
"RTN","DGREGTED",53,0)
 ;       DGOLD - Array of current field values.
"RTN","DGREGTED",54,0)
 ;       DGN   - Current field to read
"RTN","DGREGTED",55,0)
 ;       Y     - Current Field value
"RTN","DGREGTED",56,0)
 ;       REP   - Flag -- should prompt be repeated
"RTN","DGREGTED",57,0)
 ;       
"RTN","DGREGTED",58,0)
 ; Output
"RTN","DGREGTED",59,0)
 ;       SUCCESS 1 = Input successful go to next prompt
"RTN","DGREGTED",60,0)
 ;               0 = Input unsuccessful Repeat or Abort as indicated by REP variable
"RTN","DGREGTED",61,0)
 ;       REP     1 = Error - Repeat prompt
"RTN","DGREGTED",62,0)
 ;               0 = Error - Do not repeat
"RTN","DGREGTED",63,0)
 ;       Y       New field value
"RTN","DGREGTED",64,0)
 ;       
"RTN","DGREGTED",65,0)
 N SUCCESS,DIR,DA,DTOUT,DUOUT,DIRUT,DIROUT,X,L,T,POP,DGST,CNTYFLD,REVERSE
"RTN","DGREGTED",66,0)
 S SUCCESS=1,(POP,REVERSE)=0,CNTYFLD=$S(TYPE="TEMP":"TEMPORARY ADDRESS COUNTY",1:"CONFIDENTIAL ADDRESS COUNTY")
"RTN","DGREGTED",67,0)
 S DIR(0)=2_","_DGN,DIR("B")=$G(DGOLD(DGN))
"RTN","DGREGTED",68,0)
 S DA=DFN
"RTN","DGREGTED",69,0)
 F  D  Q:POP
"RTN","DGREGTED",70,0)
 . K DTOUT,DUOUT,DIROUT
"RTN","DGREGTED",71,0)
 . S MSG=""
"RTN","DGREGTED",72,0)
 . I ($G(DGINPUT(FSTATE))="")&(DGN=FCOUNTY) S POP=1 Q
"RTN","DGREGTED",73,0)
 . S DIR("B")=$S($D(DGINPUT(DGN)):DGINPUT(DGN),$G(DGOLD(DGN))]"":DGOLD(DGN),1:"")
"RTN","DGREGTED",74,0)
 . I DGN=FCOUNTY D 
"RTN","DGREGTED",75,0)
 . . S DIR(0)="POA^DIC(5,"_$P(DGINPUT(FSTATE),U)_",1,:AEMQ"
"RTN","DGREGTED",76,0)
 . . S DIR("A")=CNTYFLD_": "
"RTN","DGREGTED",77,0)
 . . ; we can't prompt if there's no previous entry
"RTN","DGREGTED",78,0)
 . . I $D(DGOLD(DGN)) S T=$L(DGOLD(DGN)," "),DIR("B")=$P($G(DGOLD(DGN))," ",1,T-1)
"RTN","DGREGTED",79,0)
 . D ^DIR
"RTN","DGREGTED",80,0)
 . I $D(DTOUT) S POP=1,SUCCESS=0 Q
"RTN","DGREGTED",81,0)
 . I $D(DIRUT) S MSG="",REVERSE=0 D ANSW(X,.DGOLD,DGN,.MSG,.Y,.REP,$G(RET),.REVERSE) S:REP SUCCESS=0 W:MSG]"" !,MSG
"RTN","DGREGTED",82,0)
 . I REVERSE S (REP,SUCCESS)=0
"RTN","DGREGTED",83,0)
 . S POP=1
"RTN","DGREGTED",84,0)
 Q SUCCESS
"RTN","DGREGTED",85,0)
 ;
"RTN","DGREGTED",86,0)
SAVE(DGINPUT,DFN,FSTR,CNTRY) ;Save changes
"RTN","DGREGTED",87,0)
 N DATA,DGENDA,L,T,FILE,ERROR
"RTN","DGREGTED",88,0)
 S DGENDA=DFN,FILE=2
"RTN","DGREGTED",89,0)
 ; need to get the country code into the DGINPUT array
"RTN","DGREGTED",90,0)
 S DGINPUT(FCNTRY)=$O(^HL(779.004,"B",CNTRY,""))
"RTN","DGREGTED",91,0)
 S FSTR=FSTR_","_FCNTRY
"RTN","DGREGTED",92,0)
 F L=1:1:$L(FSTR,",") S T=$P(FSTR,",",L) S DATA(T)=$P($G(DGINPUT(T)),U)
"RTN","DGREGTED",93,0)
 Q $$UPD^DGENDBS(FILE,.DGENDA,.DATA,.ERROR)
"RTN","DGREGTED",94,0)
 ;
"RTN","DGREGTED",95,0)
ANSW(YIN,DGOLD,DGN,MSG,YOUT,REP,RET,REVERSE) ;analyze input commands
"RTN","DGREGTED",96,0)
 ; This API will process reads and set bits, messages and flags accordingly.
"RTN","DGREGTED",97,0)
 ; Because there is different behavior depending on prompt and input, the input
"RTN","DGREGTED",98,0)
 ; of each field needs to be evaluated separately at the time of input and before
"RTN","DGREGTED",99,0)
 ; deciding to continue the edit.  Input rules are loaded into array RPROC at the
"RTN","DGREGTED",100,0)
 ; beginning of this routine in call to INIT^DGREGTE2.
"RTN","DGREGTED",101,0)
 ; 
"RTN","DGREGTED",102,0)
 ; Input
"RTN","DGREGTED",103,0)
 ;       N       - User input "Y" value
"RTN","DGREGTED",104,0)
 ;       DGOLD   - Array of current values
"RTN","DGREGTED",105,0)
 ;       DGN     - Current field
"RTN","DGREGTED",106,0)
 ;       MSG     - Variable for Text message
"RTN","DGREGTED",107,0)
 ;       YOUT    - User input ("Y") value
"RTN","DGREGTED",108,0)
 ;       REP     - Flag to repeat prompt
"RTN","DGREGTED",109,0)
 ;       RET     - Flag to return success or failure to calling module
"RTN","DGREGTED",110,0)
 ;       REVERSE - Flag to revert to first prompt in sequence
"RTN","DGREGTED",111,0)
 ; 
"RTN","DGREGTED",112,0)
 ; Output
"RTN","DGREGTED",113,0)
 ;       MSG     - Text message (for incorrect entries)
"RTN","DGREGTED",114,0)
 ;       REP     - Repeat current prompt
"RTN","DGREGTED",115,0)
 ;       REVERSE - Revert to first prompt in sequence
"RTN","DGREGTED",116,0)
 ; 
"RTN","DGREGTED",117,0)
 N X,Y,DTOUT,DIRUT,DUOUT,PRMPT,RMSG,TDGN,ACT
"RTN","DGREGTED",118,0)
 N OLDVAL,NEWVAL
"RTN","DGREGTED",119,0)
 ;
"RTN","DGREGTED",120,0)
 S PRMPT=$S(TYPE="TEMP":"TEMPORARY",1:"CONFIDENTIAL")
"RTN","DGREGTED",121,0)
 S RMSG("LINE")="BUT I NEED AT LEAST ONE LINE OF A "_PRMPT_" ADDRESS"
"RTN","DGREGTED",122,0)
 S RMSG("REVERSE")="This is a required response."
"RTN","DGREGTED",123,0)
 S RMSG("REPEAT")="EXIT NOT ALLOWED ??"
"RTN","DGREGTED",124,0)
 S RMSG("QUES")="??"
"RTN","DGREGTED",125,0)
 S RMSG("INSTRUCT")=$S(TYPE="TEMP":"TADD^DGLOCK1",TYPE="CONF":"CADD1^DGLOCK3",1:"OK")
"RTN","DGREGTED",126,0)
 S OLDVAL=$G(DGOLD(DGN)),OLDVAL=$$PROC(OLDVAL),NEWVAL=$$PROC(YIN)
"RTN","DGREGTED",127,0)
 S TDGN=$S($D(RPROC(DGN,OLDVAL,NEWVAL)):DGN,1:"ALL")
"RTN","DGREGTED",128,0)
 I '$D(RPROC(TDGN,OLDVAL,NEWVAL)) S RPROC(TDGN,OLDVAL,NEWVAL)="OK"
"RTN","DGREGTED",129,0)
 S ACT=RPROC(TDGN,OLDVAL,NEWVAL)
"RTN","DGREGTED",130,0)
 D @ACT
"RTN","DGREGTED",131,0)
 Q
"RTN","DGREGTED",132,0)
REVERSE ;
"RTN","DGREGTED",133,0)
 N MSUB
"RTN","DGREGTED",134,0)
 S MSUB=$S(DGN=FSLINE1:"LINE",1:"REVERSE")
"RTN","DGREGTED",135,0)
 W !,RMSG(MSUB)
"RTN","DGREGTED",136,0)
 S REVERSE=1
"RTN","DGREGTED",137,0)
 Q
"RTN","DGREGTED",138,0)
REPEAT ;
"RTN","DGREGTED",139,0)
 W !,RMSG("REPEAT")
"RTN","DGREGTED",140,0)
 S REP=1
"RTN","DGREGTED",141,0)
 Q
"RTN","DGREGTED",142,0)
OK ;
"RTN","DGREGTED",143,0)
 Q
"RTN","DGREGTED",144,0)
QUES ;
"RTN","DGREGTED",145,0)
 W RMSG("QUES")
"RTN","DGREGTED",146,0)
 S REP=1
"RTN","DGREGTED",147,0)
 Q
"RTN","DGREGTED",148,0)
CONFIRM ;
"RTN","DGREGTED",149,0)
 I '$$SURE^DGREGTE2 S YOUT=DGOLD(DGN),REP=1 Q
"RTN","DGREGTED",150,0)
 S YOUT=YIN,REP=0
"RTN","DGREGTED",151,0)
 Q
"RTN","DGREGTED",152,0)
INSTRUCT ;
"RTN","DGREGTED",153,0)
 D @RMSG("INSTRUCT")
"RTN","DGREGTED",154,0)
 S REP=1
"RTN","DGREGTED",155,0)
 Q
"RTN","DGREGTED",156,0)
PROC(VAL) ;process the input and return a type of value
"RTN","DGREGTED",157,0)
 ; input
"RTN","DGREGTED",158,0)
 ;   VAL - The value to examine
"RTN","DGREGTED",159,0)
 ;       
"RTN","DGREGTED",160,0)
 ; output
"RTN","DGREGTED",161,0)
 ;   a value type
"RTN","DGREGTED",162,0)
 ;     VALUE  = input - validation is a separate task and is not done here
"RTN","DGREGTED",163,0)
 ;     NULL   = NULL input
"RTN","DGREGTED",164,0)
 ;     UPCAR  = the "^" character
"RTN","DGREGTED",165,0)
 ;     DELETE = the "@" character
"RTN","DGREGTED",166,0)
 Q $S(VAL="":"NULL",$E(VAL)="^":"UPCAR",$E(VAL)="@":"DELETE",1:"VALUE")
"RTN","DGREGTED",167,0)
EOP ;End of page prompt
"RTN","DGREGTED",168,0)
 N DIR,DTOUT,DUOUT,DIROUT,X,Y
"RTN","DGREGTED",169,0)
 S DIR(0)="E"
"RTN","DGREGTED",170,0)
 S DIR("A")="Press ENTER to continue"
"RTN","DGREGTED",171,0)
 D ^DIR
"RTN","DGREGTED",172,0)
 Q
"RTN","DGRP1")
0^48^B34627316
"RTN","DGRP1",1,0)
DGRP1 ;ALB/MRL,ERC,BAJ - DEMOGRAPHIC DATA ; 8/15/08 11:30am
"RTN","DGRP1",2,0)
 ;;5.3;Registration;**109,161,506,244,546,570,629,638,649,700,653,688**;Aug 13, 1993;Build 29
"RTN","DGRP1",3,0)
 ;
"RTN","DGRP1",4,0)
EN ;
"RTN","DGRP1",5,0)
 S (DGRPS,DGRPW)=1 D H^DGRPU F I=0,.11,.121,.122,.13,.15,.24,57,"SSN" S DGRP(I)=$S($D(^DPT(DFN,I)):^(I),1:"")
"RTN","DGRP1",6,0)
 I $P(DGRP(.15),"^",2)]"" S Z="APPLICANT IS LISTED AS 'INELIGIBLE' FOR TREATMENT!",DGRPCM=1 D WW^DGRPV S DGRPCM=0
"RTN","DGRP1",7,0)
 ;I $P(DGRP(.15),"^",3)]"" S Z="APPLICANT IS LISTED AS 'MISSING'.  NOTIFY APPROPRIATE PERSONNEL!",DGRPCM=1 D WW^DGRPV S DGRPCM=0
"RTN","DGRP1",8,0)
 ;Retrieve SSN Verification status DG*5.3*688 BAJ 11/22/2005
"RTN","DGRP1",9,0)
 N SSNV D GETSTAT(.SSNV)
"RTN","DGRP1",10,0)
 W ! S Z=1 D WW^DGRPV W "    Name: " S Z=$P(DGRP(0),"^",1),Z1=31 D WW1^DGRPV
"RTN","DGRP1",11,0)
 ;Display SSN and SSN Verification status DG*5.3*688 BAJ 11/22/2005
"RTN","DGRP1",12,0)
 W "SS: " S X=$P(DGRP(0),"^",9),Z=$E(X,1,3)_"-"_$E(X,4,5)_"-"_$E(X,6,10),Z1=13 D WW1^DGRPV W SSNV
"RTN","DGRP1",13,0)
 W ! S Z="",Z1=8 D WW1^DGRPV S Y=$P(DGRP(0),"^",3) X ^DD("DD") W "DOB: ",Y
"RTN","DGRP1",14,0)
 ;add Pseuso SSN Reason - DG*5.3*653, ERC
"RTN","DGRP1",15,0)
 I $P(DGRP(0),U,9)["P" D
"RTN","DGRP1",16,0)
 . N DGSPACE
"RTN","DGRP1",17,0)
 . S DGSPACE=10-$L(Y) ;adjust to maintain spacing on screen
"RTN","DGRP1",18,0)
 . S Z1=12+DGSPACE D WW1^DGRPV W "PSSN Reason: "
"RTN","DGRP1",19,0)
 . I $P(DGRP(0),U,9)["P" D
"RTN","DGRP1",20,0)
 . . N DGREAS D SSNREAS(.DGREAS)
"RTN","DGRP1",21,0)
 . . Q:$G(DGREAS)']""
"RTN","DGRP1",22,0)
 . . W DGREAS
"RTN","DGRP1",23,0)
 D GETNCAL  ;Display name component, sex, and alias information
"RTN","DGRP1",24,0)
 S Z=3,DGRPX=DGRP(0) D WW^DGRPV W " Remarks: ",$S($P(DGRPX,"^",10)]"":$E($P(DGRPX,"^",10),1,65),1:"NO REMARKS ENTERED FOR THIS PATIENT") S DGAD=.11,(DGA1,DGA2)=1 D A^DGRPU I $P(DGRP(.121),"^",9)="Y" S DGAD=.121,DGA1=1,DGA2=2 D A^DGRPU
"RTN","DGRP1",25,0)
 S Z=4 D WW^DGRPV W " Permanent Address: " S Z=" ",Z1=17
"RTN","DGRP1",26,0)
 D WW1^DGRPV S Z=5,DGRPW=0 D WW^DGRPV W " Temporary Address: "
"RTN","DGRP1",27,0)
 W !?9
"RTN","DGRP1",28,0)
 S Z1=39,Z=$S($D(DGA(1)):DGA(1),1:"NONE ON FILE") D WW1^DGRPV W $S($D(DGA(2)):DGA(2),1:"NO TEMPORARY ADDRESS")
"RTN","DGRP1",29,0)
 ; loop through DGA array beginning with DGA(2) and print data at ?9 (odds) and ?48 (evens)
"RTN","DGRP1",30,0)
 S I=2 F I1=0:0 S I=$O(DGA(I)) Q:I=""  W:(I#2)!($X>50) !?9 W:'(I#2) ?48 W DGA(I)
"RTN","DGRP1",31,0)
 D COUNTY(.DGRP)  ; print County if applicable
"RTN","DGRP1",32,0)
 W !?4,"Phone: ",$S($P(DGRP(.13),U,1)]"":$P(DGRP(.13),U,1),1:DGRPU),?44,"Phone: ",$S($P(DGRP(.121),U,9)'="Y":"NOT APPLICABLE",$P(DGRP(.121),U,10)]"":$P(DGRP(.121),U,10),1:DGRPU)
"RTN","DGRP1",33,0)
 S X="NOT APPLICABLE" I $P(DGRP(.121),U,9)="Y" S Y=$P(DGRP(.121),U,7) X:Y]"" ^DD("DD") S X=$S(Y]"":Y,1:DGRPU)_"-",Y=$P(DGRP(.121),U,8) X:Y]"" ^DD("DD") S X=X_$S(Y]"":Y,1:DGRPU)
"RTN","DGRP1",34,0)
 W !?3,"Office: ",$S($P(DGRP(.13),U,2)]"":$P(DGRP(.13),U,2),1:DGRPU),?42,"From/To: ",X
"RTN","DGRP1",35,0)
 W !?1,"Bad Addr: ",$$EXTERNAL^DILFD(2,.121,"",$P(DGRP(.11),U,16))
"RTN","DGRP1",36,0)
 ;
"RTN","DGRP1",37,0)
 ; ***  Additional displays added for Pre-Registration
"RTN","DGRP1",38,0)
 I $G(DGPRFLG)=1 D
"RTN","DGRP1",39,0)
 . W !
"RTN","DGRP1",40,0)
 . N I,MIS1,X,X1,SA1,TP1,X2,X3,ES1
"RTN","DGRP1",41,0)
 . I $D(^DIA(2,"B",DFN)) S X="" F I=1:1 S X=$O(^DIA(2,"B",DFN,X)) Q:X<1  I $P(^DIA(2,X,0),U,3)=.05 S MIS1=$P(^DIA(2,X,0),U,2)
"RTN","DGRP1",42,0)
 . W:$D(MIS1)>0 !," [MARITAL STATUS CHANGED:] "_$$FMTE^XLFDT(MIS1,"5D")
"RTN","DGRP1",43,0)
 . I $D(^DIA(2,"B",DFN)) S X1="" F I=1:1 S X1=$O(^DIA(2,"B",DFN,X1)) Q:X1<1  S:$P(^DIA(2,X1,0),U,3)=.111 SA1=$P(^DIA(2,X1,0),U,2)
"RTN","DGRP1",44,0)
 . W:$D(SA1)>0 !," [STREET ADDRESS LAST CHANGED:] "_$$FMTE^XLFDT(SA1,"5D")
"RTN","DGRP1",45,0)
 . I $D(^DIA(2,"B",DFN)) S X2="" F I=1:1 S X2=$O(^DIA(2,"B",DFN,X2)) Q:X2<1  S:$P(^DIA(2,X2,0),U,3)=.131 TP1=$P(^DIA(2,X2,0),U,2)
"RTN","DGRP1",46,0)
 . W:$D(TP1)>0 !," [HOME PHONE NUMBER CHANGED:] "_$$FMTE^XLFDT(TP1,"5D")
"RTN","DGRP1",47,0)
 . I $D(^DIA(2,"B",DFN)) S X3="" F I=1:1 S X3=$O(^DIA(2,"B",DFN,X3)) Q:X3<1  S:$P(^DIA(2,X3,0),U,3)=.31115 ES1=$P(^DIA(2,X3,0),U,2)
"RTN","DGRP1",48,0)
 . W:$D(ES1)>0 !," [EMPLOYMENT STATUS CHANGED:] "_$$FMTE^XLFDT(ES1,"5D")
"RTN","DGRP1",49,0)
 . ; The IB Insurance API does not provide date entered or edited information, so this information will not be displayed for preregistration
"RTN","DGRP1",50,0)
 . I $$INSUR^IBBAPI(DFN,"","AR",.DGDATA,"1,10,11") F DGI=0:0 S DGI=$O(DGDATA("IBBAPI","INSUR",DGI)) Q:'DGI  D
"RTN","DGRP1",51,0)
 .. W !," [INSURANCE:] ",$P(DGDATA("IBBAPI","INSUR",DGI,1),U,2)
"RTN","DGRP1",52,0)
 .. W "  EFFECTIVE DATE: ",$$FMTE^XLFDT(DGDATA("IBBAPI","INSUR",DGI,10),"5D"),"  EXPIRATION DATE: ",$$FMTE^XLFDT(DGDATA("IBBAPI","INSUR",DGI,11),"5D")
"RTN","DGRP1",53,0)
 ;
"RTN","DGRP1",54,0)
 G ^DGRPP
"RTN","DGRP1",55,0)
 ;
"RTN","DGRP1",56,0)
GETNCAL ;Get name component values
"RTN","DGRP1",57,0)
 N DGCOMP,DGNC,DGI,DGA,DGALIAS,DGX,DGRPW
"RTN","DGRP1",58,0)
 S DGNC="Family^Given^Middle^Prefix^Suffix^Degree"
"RTN","DGRP1",59,0)
 S DGCOMP=+$G(^DPT(DFN,"NAME"))_","
"RTN","DGRP1",60,0)
 I DGCOMP D GETS^DIQ(20,DGCOMP,"1:6",,"DGCOMP")
"RTN","DGRP1",61,0)
 ;Get alias values
"RTN","DGRP1",62,0)
 S DGA=0 F DGI=1:1:5 D  Q:'$D(DGALIAS(DGI))
"RTN","DGRP1",63,0)
A2 .S DGA=$O(^DPT(DFN,.01,DGA))
"RTN","DGRP1",64,0)
 .I 'DGA D:DGI=1  Q
"RTN","DGRP1",65,0)
 ..S DGALIAS(DGI)="< No alias entries on file >" Q
"RTN","DGRP1",66,0)
 .I DGI=5 S DGALIAS(DGI)="< More alias entries on file >" Q
"RTN","DGRP1",67,0)
 .S DGX=$G(^DPT(DFN,.01,DGA,0)) G:'$L(DGX) A2
"RTN","DGRP1",68,0)
 .S DGALIAS(DGI)=$P(DGX,U),DGX=$P(DGX,U,2)
"RTN","DGRP1",69,0)
 .I $L(DGX) D
"RTN","DGRP1",70,0)
 ..S DGX=" "_$E(DGX,1,3)_"-"_$E(DGX,4,5)_"-"_$E(DGX,6,9)
"RTN","DGRP1",71,0)
 ..; BAJ DG*5.2*700 retrofit 06/22/06
"RTN","DGRP1",72,0)
 ..S DGALIAS(DGI)=$E(DGALIAS(DGI),1,19)
"RTN","DGRP1",73,0)
 ..S $E(DGALIAS(DGI),20)=DGX Q
"RTN","DGRP1",74,0)
 .S DGALIAS(DGI)=$E(DGALIAS(DGI),1,32)
"RTN","DGRP1",75,0)
 .Q
"RTN","DGRP1",76,0)
 ;Display name component, sex, multiple birth indicator and alias data
"RTN","DGRP1",77,0)
 F DGI=1:1:6 D
"RTN","DGRP1",78,0)
 .W !?5,$J($P(DGNC,U,DGI),6),": ",$E($G(DGCOMP(20,DGCOMP,DGI)),1,$S(DGI=1:23,1:27))
"RTN","DGRP1",79,0)
 .; BAJ DG*5.3*700 retrofit 06/22/06
"RTN","DGRP1",80,0)
 .I DGI=1 S (Z,DGRPW)=1 W ?43,"Sex: " S X=$P(DGRP(0),"^",2),Z=$S(X="M":"MALE",X="F":"FEMALE",1:DGRPU),Z1=3 D WW1^DGRPV
"RTN","DGRP1",81,0)
 .I DGI=1 S (Z,DGRPW)=1 W ?56,"MBI: " S X=$P($G(^DPT(DFN,"MPIMB")),U),Z=$S(X="N":"NO",X="Y":"*MULTIPLE BIRTH*",1:DGRPU),Z1=16 D WW1^DGRPV
"RTN","DGRP1",82,0)
 .I DGI=2 S DGRPW=0,Z=2 W ?37 D WW^DGRPV W " Alias: "
"RTN","DGRP1",83,0)
 .I DGI>1 W ?47,$G(DGALIAS(DGI-1))
"RTN","DGRP1",84,0)
 .Q
"RTN","DGRP1",85,0)
 Q
"RTN","DGRP1",86,0)
GETSTAT(SSNV) ;get SSN VERIFIED STATUS DG*5.3*688 BAJ 11/22/2005
"RTN","DGRP1",87,0)
 N T
"RTN","DGRP1",88,0)
 S T=$P($G(^DPT(DFN,"SSN")),"^",2)
"RTN","DGRP1",89,0)
 S SSNV=$S(T=2:"INVALID",T=4:"VERIFIED",1:"")
"RTN","DGRP1",90,0)
 Q
"RTN","DGRP1",91,0)
 ;
"RTN","DGRP1",92,0)
SSNREAS(DGREAS) ;get Pseuso SSN Reason - DG*5.3*653, ERC
"RTN","DGRP1",93,0)
 S DGREAS=$P(DGRP("SSN"),U)
"RTN","DGRP1",94,0)
 I $G(DGREAS)']"" Q
"RTN","DGRP1",95,0)
 S DGREAS=$S(DGREAS="R":"Refused to Provide",DGREAS="S":"SSN Unknown/Follow-up Required",DGREAS="N":"No SSN Assigned",1:"< None Entered >")
"RTN","DGRP1",96,0)
 Q
"RTN","DGRP1",97,0)
COUNTY(DGRP) ;retrieve and print County info if a US address
"RTN","DGRP1",98,0)
 N DGCC,CNODE,FNODE,FPCE,FILE,IEN,CNTRY,PLINE
"RTN","DGRP1",99,0)
 ; data location of Permanent Address County info
"RTN","DGRP1",100,0)
 S FNODE=.11,FPCE=10,DGCC=""
"RTN","DGRP1",101,0)
 ; only print county info if it's a US address
"RTN","DGRP1",102,0)
 S IEN=$P(DGRP(FNODE),U,FPCE) I '$$FORIEN^DGADDUTL(IEN) D
"RTN","DGRP1",103,0)
 . S DGCC=$S($D(^DIC(5,+$P(DGRP(FNODE),U,5),1,+$P(DGRP(FNODE),U,7),0)):$E($P(^(0),U,1),1,20)_$S($P(^(0),U,3)]"":" ("_$P(^(0),U,3)_")",1:""),1:DGRPU)
"RTN","DGRP1",104,0)
 S PLINE=$S(DGCC]"":"County: "_DGCC,1:"")
"RTN","DGRP1",105,0)
 W !?3,PLINE
"RTN","DGRP1",106,0)
 S DGCC=""
"RTN","DGRP1",107,0)
 ; data location of Temporary address County info
"RTN","DGRP1",108,0)
 S CNODE=.121,FNODE=.122,FPCE=3
"RTN","DGRP1",109,0)
 ; only print county info if it's a US address
"RTN","DGRP1",110,0)
 S IEN=$P(DGRP(FNODE),U,FPCE) I '$$FORIEN^DGADDUTL(IEN) D
"RTN","DGRP1",111,0)
 . S DGCC=$S($P(DGRP(CNODE),U,9)'="Y":"NOT APPLICABLE",$D(^DIC(5,+$P(DGRP(CNODE),U,5),1,+$P(DGRP(CNODE),U,11),0)):$E($P(^(0),U,1),1,20)_$S($P(^(0),U,3)]"":" ("_$P(^(0),U,3)_")",1:""),1:DGRPU)
"RTN","DGRP1",112,0)
 S PLINE=$S(DGCC]"":"County: "_DGCC,1:"")
"RTN","DGRP1",113,0)
 W ?43,PLINE
"RTN","DGRP1",114,0)
 Q
"RTN","DGRP1",115,0)
 ;
"RTN","DGRP6EF")
0^103^B17483122
"RTN","DGRP6EF",1,0)
DGRP6EF ;ALB/TMK,EG,BAJ - REGISTRATION SCREEN 6 FIELDS FOR EXPOSURE FACTORS; 07/20/2006
"RTN","DGRP6EF",2,0)
 ;;5.3;Registration;**689,659,737,688**;Aug 13, 1993;Build 29
"RTN","DGRP6EF",3,0)
 ;
"RTN","DGRP6EF",4,0)
EN(DFN,QUIT) ; Display Environmental exposure factors/allow to edit
"RTN","DGRP6EF",5,0)
 N I,IND,DG321,DG322,DGCT,DIR,Z,X,Y,DIE,DR,DA,DGNONT
"RTN","DGRP6EF",6,0)
 ; Returns QUIT=1 if ^ entered
"RTN","DGRP6EF",7,0)
 ;
"RTN","DGRP6EF",8,0)
EN1 D CLEAR^VALM1
"RTN","DGRP6EF",9,0)
 N DTOUT,DUOUT,TYPE,SEL,L,S,L1,L2,L3
"RTN","DGRP6EF",10,0)
 S DG321=$G(^DPT(DFN,.321)),DG322=$G(^DPT(DFN,.322))
"RTN","DGRP6EF",11,0)
 ;
"RTN","DGRP6EF",12,0)
 S DIR(0)="SA^",DGCT=0
"RTN","DGRP6EF",13,0)
 S DGCT=DGCT+1,DIR("A",DGCT)=$$SSNNM^DGRPU(DFN)
"RTN","DGRP6EF",14,0)
 S DGCT=DGCT+1,DIR("A",DGCT)="",$P(DIR("A",DGCT),"=",81)=""
"RTN","DGRP6EF",15,0)
 S DGCT=DGCT+1,DIR("A",DGCT)=$J("",23)_"**** ENVIRONMENTAL FACTORS ****",DGCT=DGCT+1,DIR("A",DGCT)=" "
"RTN","DGRP6EF",16,0)
 S IND=$S('$G(DGRPV):"[]",1:"<>")
"RTN","DGRP6EF",17,0)
 S DGCT=DGCT+1
"RTN","DGRP6EF",18,0)
 S Z=$E(IND)_"1"_$E(IND,2)
"RTN","DGRP6EF",19,0)
 ; "OTHER" choice added DG*5.3*688
"RTN","DGRP6EF",20,0)
 ; variables S,L1,L2, & L3 used for dynamic spacing
"RTN","DGRP6EF",21,0)
 S SEL=$P(DG321,U,13),S=$C(32),($P(L1,S,6),$P(L2,S,$S(SEL="O":3,1:2)),$P(L3,S,3))=""
"RTN","DGRP6EF",22,0)
 S TYPE=$S(SEL="K":" (DMZ) ",SEL="V":" (VIET)",SEL="O":" (OTH)",1:$J("",7))
"RTN","DGRP6EF",23,0)
 S DIR("A",DGCT)=Z_L1_"A/O Exp.: "_$$YN^DGRP6CL(DG321,2)_TYPE_L2_"Reg: "_$$DAT^DGRP6CL(DG321,7,12)_L3_"Exam: "_$$DAT^DGRP6CL(DG321,9,12)_"A/O#: "_$P(DG321,U,10)
"RTN","DGRP6EF",24,0)
 S Z=$E(IND)_"2"_$E(IND,2)
"RTN","DGRP6EF",25,0)
 S DGCT=DGCT+1,DIR("A",DGCT)=Z_"     ION Rad.: "_$$YN^DGRP6CL(DG321,3)_$J("",8)_"Reg: "_$$DAT^DGRP6CL(DG321,11,12)_"Method: "
"RTN","DGRP6EF",26,0)
 S:$P(DG321,U,12)>7 $P(DG321,U,12)="" S DIR("A",DGCT)=DIR("A",DGCT)_$P($T(SELTBL+$P(DG321,U,12)),";;",2)
"RTN","DGRP6EF",27,0)
 S Z=$E(IND)_"3"_$E(IND,2)
"RTN","DGRP6EF",28,0)
 ;Env Contam name changed to SW Asia Conditions, DG*5.3*688
"RTN","DGRP6EF",29,0)
 S DGCT=DGCT+1,DIR("A",DGCT)=Z_" SW Asia Cond: "_$$YN^DGRP6CL(DG322,13)_$J("",8)_"Reg: "_$$DAT^DGRP6CL(DG322,14,12)_"  Exam: "_$$DAT^DGRP6CL(DG322,15,11)
"RTN","DGRP6EF",30,0)
 S DGNONT=0 I $$GETSTAT^DGNTAPI1(DFN)>2,'$D(^XUSEC("DGNT VERIFY",DUZ)) S DGNONT=1
"RTN","DGRP6EF",31,0)
 I $G(DGRPV) S DGNONT=1
"RTN","DGRP6EF",32,0)
 S DGCT=DGCT+1,DIR("A",DGCT)=$S(DGNONT:"<",1:"[")_"4"_$S(DGNONT:">",1:"]")_"   N/T Radium: " N DGNT S DGRPX=$$GETCUR^DGNTAPI(DFN,"DGNT") S DIR("A",DGCT)=DIR("A",DGCT)_$G(DGNT("INTRP"))
"RTN","DGRP6EF",33,0)
 ;
"RTN","DGRP6EF",34,0)
 S DGCT=DGCT+1,DIR("A",DGCT)=" "
"RTN","DGRP6EF",35,0)
 S DIR("A")=$S('$G(DGRPV):"SELECT AN ENVIRONMENTAL FACTOR (1-"_(4-DGNONT)_") OR (Q)UIT: ",1:"PRESS RETURN TO CONTINUE ")
"RTN","DGRP6EF",36,0)
 ;Env Contam name changed to SW Asia Conditions, DG*5.3*688
"RTN","DGRP6EF",37,0)
 S DIR(0)=$S('$G(DGRPV):"SA^1:A/O Exp;2:ION Rad;3:SW Asia Cond;"_$S(DGNONT:"",1:"4:N/T Radium;")_"Q:QUIT",1:"EA")
"RTN","DGRP6EF",38,0)
 I '$G(DGRPV) S DIR("B")="QUIT"
"RTN","DGRP6EF",39,0)
 D ^DIR K DIR
"RTN","DGRP6EF",40,0)
 I $G(DGRPV)!$D(DUOUT)!$D(DTOUT)!(Y="Q") S:Y'="Q" QUIT=1 G QUIT
"RTN","DGRP6EF",41,0)
 S Z="603"_$E("0",2-$L(+Y))_+Y
"RTN","DGRP6EF",42,0)
 S DIE=2,DA=DFN,DR=$P($T(@Z),";;",2) D:DR'="" ^DIE
"RTN","DGRP6EF",43,0)
 K DIE,DA,DR
"RTN","DGRP6EF",44,0)
 G EN1
"RTN","DGRP6EF",45,0)
 ;
"RTN","DGRP6EF",46,0)
QUIT Q
"RTN","DGRP6EF",47,0)
 ;
"RTN","DGRP6EF",48,0)
EF(DFN,LIN) ;
"RTN","DGRP6EF",49,0)
 N DG321,DG322,LENGTH,Z,SEQ
"RTN","DGRP6EF",50,0)
 K LIN S (LENGTH,LIN)=0
"RTN","DGRP6EF",51,0)
 S DG321=$G(^DPT(DFN,.321)),DG322=$G(^(.322))
"RTN","DGRP6EF",52,0)
 I $P(DG321,U,2)="Y" D
"RTN","DGRP6EF",53,0)
 . S Z="A/O Exp.",SEQ=1
"RTN","DGRP6EF",54,0)
 . ;S:'$P(DG321,U,7)!'$P(DG321,U,9)!($P(DG321,U,10)="") Z=Z_"(Incomplete)"
"RTN","DGRP6EF",55,0)
 . S:'$P(DG321,U,7)!('$P(DG321,U,9))="" Z=Z_"(Incomplete)"
"RTN","DGRP6EF",56,0)
 . D SETLNEX^DGRP6(Z,SEQ,.LIN,.LENGTH)
"RTN","DGRP6EF",57,0)
 ;
"RTN","DGRP6EF",58,0)
 I $P(DG321,U,3)="Y" D
"RTN","DGRP6EF",59,0)
 . S Z="Ion Rad.",SEQ=2
"RTN","DGRP6EF",60,0)
 . S:'$P(DG321,U,11)!($P(DG321,U,12)="") Z=Z_"(Incomplete)"
"RTN","DGRP6EF",61,0)
 . D SETLNEX^DGRP6(Z,SEQ,.LIN,.LENGTH)
"RTN","DGRP6EF",62,0)
 ;
"RTN","DGRP6EF",63,0)
 I $P(DG322,U,13)="Y" D
"RTN","DGRP6EF",64,0)
 . I 'LIN S LIN=LIN+1,LIN(LIN)=""
"RTN","DGRP6EF",65,0)
 . ;Env Contam name changed to SW Asia Conditions, DG*5.3*688
"RTN","DGRP6EF",66,0)
 . S Z="SW Asia Cond.",SEQ=3
"RTN","DGRP6EF",67,0)
 . S:'$P(DG322,U,14)!'$P(DG322,U,15) Z=Z_"(Incomplete)"
"RTN","DGRP6EF",68,0)
 . D SETLNEX^DGRP6(Z,SEQ,.LIN,.LENGTH)
"RTN","DGRP6EF",69,0)
 ; N/T Radium Exposure
"RTN","DGRP6EF",70,0)
 N DGNT,DGRPX S DGRPX=$$GETCUR^DGNTAPI(DFN,"DGNT")
"RTN","DGRP6EF",71,0)
 I "NO"'[$G(DGNT("INTRP")) D
"RTN","DGRP6EF",72,0)
 . I 'LIN S LIN=LIN+1,LIN(LIN)=""
"RTN","DGRP6EF",73,0)
 . S SEQ=4 D SETLNEX^DGRP6("N/T Radium ("_$P(DGNT("INTRP"),"YES,",2)_")",SEQ,.LIN,.LENGTH)
"RTN","DGRP6EF",74,0)
  Q
"RTN","DGRP6EF",75,0)
  ; The following tag is a table of values.  Do not change location of values including null at SELTBL+0
"RTN","DGRP6EF",76,0)
SELTBL ;;
"RTN","DGRP6EF",77,0)
 ;;NO VALUE
"RTN","DGRP6EF",78,0)
 ;;HIROSHIMA/NAGASAKI
"RTN","DGRP6EF",79,0)
 ;;ATMOSPHERIC NUCLEAR TEST
"RTN","DGRP6EF",80,0)
 ;;H/N AND ATMOSPHERIC TEST
"RTN","DGRP6EF",81,0)
 ;;UNDERGROUND NUCLEAR TEST
"RTN","DGRP6EF",82,0)
 ;;EXP. AT NUCLEAR FACILITY
"RTN","DGRP6EF",83,0)
 ;;OTHER
"RTN","DGRP6EF",84,0)
60301 ;;.32102//NO;S:X'="Y" Y="@65";.3213;.32107;.32109;.3211;@65;
"RTN","DGRP6EF",85,0)
60302 ;;.32103//NO;S:X'="Y" Y="@66";.3212;.32111;@66;
"RTN","DGRP6EF",86,0)
60303 ;;.322013//NO;S:X'="Y" Y="@612";.322014;Q;.322015;@612;
"RTN","DGRP6EF",87,0)
60304 ;;D REG^DGNTQ(DFN)
"RTN","DGRP6EF",88,0)
 ;;
"RTN","DGRP7")
0^74^B17215942
"RTN","DGRP7",1,0)
DGRP7 ;ALB/MRL,CKN,ERC - REGISTRATION SCREEN 7/ELIGIBILITY INFORMATION ; 7/25/06 12:06pm
"RTN","DGRP7",2,0)
 ;;5.3;Registration;**528,653,688**;Aug 13, 1993;Build 29
"RTN","DGRP7",3,0)
 N DGCASH,DGMBCK
"RTN","DGRP7",4,0)
 S DGRPS=7 D H^DGRPU F I=0,.29,.3,.31,.32,.321,.36,.362,"TYPE","VET" S DGRP(I)=$S($D(^DPT(DFN,I)):^(I),1:"")
"RTN","DGRP7",5,0)
 S (DGRPW,Z)=1 D WW^DGRPV W "       Patient Type: " S DGRPX=DGRP("TYPE"),Z=$S($D(^DG(391,+DGRPX,0)):$P(^(0),"^",1),1:DGRPU),Z1=34 D WW1^DGRPV W "Veteran: " S DGRPX=DGRP("VET"),(X,Z1)=1 D YN
"RTN","DGRP7",6,0)
 W !?9,"Svc Connected: " S DGRPX=DGRP(.3),X=1,Z1=31,DGNA=$S($P(DGRP("VET"),"^",1)="Y":0,1:1) D YN2 W "SC Percent: " W:$E(Z)'="Y" "N/A" I $E(Z)="Y" D
"RTN","DGRP7",7,0)
 .S X=$P(DGRPX,"^",2) W $S(X="":"UNANSWERED",1:+X_"%")
"RTN","DGRP7",8,0)
 .S X=$P(DGRP(.3),"^",1),DGNA=$S(X'="Y":1,1:0)
"RTN","DGRP7",9,0)
 .W !?9,"SC Award Date: ",$$DATENP^DG1010P0(DGRPX,12) W ?53,"Unemployable: " S X=5,Z1=0 D YN2
"RTN","DGRP7",10,0)
 .W !?19,"P&T: " S X=4,Z1=23 D YN2 I $P(DGRP(.3),U,4)["Y" W "P&T Effective Date: " W:$P(DGRP(.3),U,13)']"" "UNANSWERED" I $P(DGRP(.3),U,13)]"" S Y=$P(DGRP(.3),U,13) D DD^%DT W $G(Y)
"RTN","DGRP7",11,0)
 W !?9,"Rated Incomp.: " S X=$$YN2^DG1010P0(DGRP(.29),12) W X D:X["Y"
"RTN","DGRP7",12,0)
 .W "   Date (CIVIL): ",$$DATENP^DG1010P0(DGRP(.29),2)
"RTN","DGRP7",13,0)
 .W "    Date (VA): ",$$DATENP^DG1010P0(DGRP(.29),1)
"RTN","DGRP7",14,0)
 S DGRPX=DGRP(.31) W !?10,"Claim Number: ",$S($P(DGRPX,"^",3)]"":$P(DGRPX,"^",3),1:DGRPU),!?11,"Folder Loc.: ",$$POINT^DG1010P0(DGRP(.31),4,4)
"RTN","DGRP7",15,0)
 S Z=2 D WW^DGRPV ;monetary benefits section
"RTN","DGRP7",16,0)
 W "   Aid & Attendance: " S Z=$$YN2^DG1010P0(DGRP(.362),12) D MBCK S Z1=31 D WW1^DGRPV
"RTN","DGRP7",17,0)
 W "Housebound: ",$$YN2^DG1010P0(DGRP(.362),13) D MBCK
"RTN","DGRP7",18,0)
 W !?12,"VA Pension: " S Z=$$YN2^DG1010P0(DGRP(.362),14) D MBCK S Z1=28 D WW1^DGRPV
"RTN","DGRP7",19,0)
 W "VA Disability: ",$$YN2^DG1010P0(DGRP(.3),11) D MBCK
"RTN","DGRP7",20,0)
 W !?4,"Total Check Amount: " S X=$$DISP^DG1010P0(DGRP(.362),20,'DGMBCK) W $S(X:"$"_X,1:X)
"RTN","DGRP7",21,0)
 W !?10,"GI Insurance: " S Z=$$YN2^DG1010P0(DGRP(.362),17) S Z1=35 D WW1^DGRPV
"RTN","DGRP7",22,0)
 W "Amount: " S X=$$DISP^DG1010P0(DGRP(.362),6) W $S(X:"$"_X,1:X)
"RTN","DGRP7",23,0)
 S Z=3 D WW^DGRPV S DGRPE=+DGRP(.36),Z=$S($D(^DIC(8,+DGRPE,0)):$P(^(0),"^",1),1:DGRPU)
"RTN","DGRP7",24,0)
 W "  Primary Elig Code: ",Z D AAC1^DGLOCK2 I DGAAC(1)]"" W !?8,"Agency/Country: ",$S($D(^DIC(35,+$P(DGRP(.3),"^",9),0)):$P(^(0),"^",1),1:DGRPU)
"RTN","DGRP7",25,0)
 W !?4,"Other Elig Code(s): " S I1="" F I=0:0 S I=$O(^DPT("AEL",DFN,I)) Q:'I  I $D(^DIC(8,+I,0)),I'=DGRPE S I1=I1+1 W:I1>1 !?24 W $P(^(0),"^",1)
"RTN","DGRP7",26,0)
 W:'I1 "NO ADDITIONAL ELIGIBILITIES IDENTIFIED"
"RTN","DGRP7",27,0)
 S DGRPX=+$P(DGRP(.32),"^",3) W !?5,"Period of Service: ",$S($D(^DIC(21,+DGRPX,0)):$P(^(0),"^",1),1:DGRPU)
"RTN","DGRP7",28,0)
 D ^DGYZODS G:'DGODS CONT S DGRPX=$S($D(^DPT(DFN,"ODS")):^("ODS"),1:"") W !?6,"Recalled to Duty: ",$S($P(DGRPX,"^",2)=1:"FROM NATIONAL GUARDS",$P(DGRPX,"^",2)=2:"FROM RESERVES",$P(DGRPX,"^",2)=0:"NO",1:DGRPU)
"RTN","DGRP7",29,0)
 W !?18,"Rank: ",$S($D(^DIC(25002.1,+$P(DGRPX,"^",3),0)):$P(^(0),"^",1),1:DGRPU)
"RTN","DGRP7",30,0)
CONT ;
"RTN","DGRP7",31,0)
 ;display Combat Vet Eligibility, if present
"RTN","DGRP7",32,0)
 N DGCV,SHAD
"RTN","DGRP7",33,0)
 S SHAD=$P(DGRP(.321),"^",15)  ;SHAD Indicator
"RTN","DGRP7",34,0)
 S DGCV=$$CVEDT^DGCV(DFN) I +$G(DGCV)=1 D
"RTN","DGRP7",35,0)
 . W !,"<3.1> Combat Vet Elig.: "
"RTN","DGRP7",36,0)
 . W $S($P(DGCV,U,3)=1:"ELIGIBLE",$P(DGCV,U,3)=0:"EXPIRED",1:"")
"RTN","DGRP7",37,0)
 . I $P($G(DGCV),U,2)]"" D
"RTN","DGRP7",38,0)
 . . S Y=$P(DGCV,U,2) D DD^%DT
"RTN","DGRP7",39,0)
 . . W " End Date: "_Y
"RTN","DGRP7",40,0)
 . I SHAD=1 W ?56,"<3.2>Proj 112/SHAD: YES"  ;Only display if YES
"RTN","DGRP7",41,0)
 ;
"RTN","DGRP7",42,0)
 I (+$G(DGCV)'=1)&(SHAD=1) W !,?56,"<3.2>Proj 112/SHAD: YES"
"RTN","DGRP7",43,0)
 ;
"RTN","DGRP7",44,0)
 ;print sc disabilities (per patient)
"RTN","DGRP7",45,0)
 W ! S Z=4 D WW^DGRPV W " Service Connected Conditions as stated by applicant" S X="",$P(X,"-",52)="" W !?4,X
"RTN","DGRP7",46,0)
 W !?4 S I3=0 F I=0:0 S I=$O(^DPT(DFN,.373,I)) Q:'I  S I1=$P(^(I,0),"^",1)_" ("_+$P(^(0),"^",2)_"%), ",I3=I W:(79-$X)<$L(I1) !?4 W I1
"RTN","DGRP7",47,0)
 W:'I3 ?4,"NONE STATED"
"RTN","DGRP7",48,0)
Q K DGAAC,DGNA,DGODS,DGRP,DGRPE,DGRPX,I,I1,I2,I3,X,X1,Z,Z1
"RTN","DGRP7",49,0)
 G ^DGRPP
"RTN","DGRP7",50,0)
YN S Z=$S($P(DGRPX,"^",X)="Y":"YES",$P(DGRPX,"^",X)="N":"NO",$P(DGRPX,"^",X)="U":"UNKNOWN",1:"UNANSWERED") D WW1^DGRPV
"RTN","DGRP7",51,0)
 Q
"RTN","DGRP7",52,0)
YN2 S Z=$S(DGNA:"N/A",$P(DGRPX,"^",X)="Y":"YES",$P(DGRPX,"^",X)="N":"NO",$P(DGRPX,"^",X)="U":"UNKNOWN",1:"UNANSWERED") D WW1^DGRPV
"RTN","DGRP7",53,0)
 Q
"RTN","DGRP7",54,0)
MBCK ;flag for any MB Y/N fields = yes
"RTN","DGRP7",55,0)
 S DGMBCK=$S($G(DGMBCK):1,(X="Y"):1,1:0)
"RTN","DGRP7",56,0)
 Q
"RTN","DGRP9")
0^17^B59126798
"RTN","DGRP9",1,0)
DGRP9 ;ALB/RMO/MIR - Screen 9 - Income Screening Data ;23 JAN 1992 11:00 am
"RTN","DGRP9",2,0)
 ;;5.3;Registration;**45,108,487,688**;Aug 13, 1993;Build 29
"RTN","DGRP9",3,0)
 ;
"RTN","DGRP9",4,0)
EN ;
"RTN","DGRP9",5,0)
 ; DVBGUI : CAPRI GUI User
"RTN","DGRP9",6,0)
 I $D(DVBGUI) U IO ;If called from CAPRI menu set output device.
"RTN","DGRP9",7,0)
 K DGDEP,DGINC,DGREL
"RTN","DGRP9",8,0)
 N DGMT,DGEFDT,DGMTED,DGNOBUCK,DGLSTYR,DGMTV
"RTN","DGRP9",9,0)
 S DGLSTYR=$E(DT,1,3)+1699
"RTN","DGRP9",10,0)
 S DGRPS=9 D H^DGRPU
"RTN","DGRP9",11,0)
 D:'DGRPV NEW^DGRPEIS1
"RTN","DGRP9",12,0)
 D ALL^DGMTU21(DFN,"VSD",DT,"IPR")
"RTN","DGRP9",13,0)
 S DGNOBUCK=$S(DGRPV:0,1:$$NOBUCKS^DGMTU22(DFN,DT))
"RTN","DGRP9",14,0)
 S DGMT=$$LST^DGMTU(DFN,DT),DGEFDT=$P(DGMT,U,2)
"RTN","DGRP9",15,0)
 ;
"RTN","DGRP9",16,0)
 ; If Date of Test returned is not more than a year old, or the MT does not have one of the following statuses:
"RTN","DGRP9",17,0)
 ;      MT COPAY EXEMPT          (MT)  A
"RTN","DGRP9",18,0)
 ;      MT COPAY REQUIRED        (MT)  C
"RTN","DGRP9",19,0)
 ;      EXEMPT                   (CP)  E
"RTN","DGRP9",20,0)
 ;      NON-EXEMPT               (CP)  M
"RTN","DGRP9",21,0)
 ;      PENDING ADJUDICATION     (CP)  P
"RTN","DGRP9",22,0)
 ; or DGNOBUCK=0 (Prior or Current years IAI data does not exist and no dpdnts or spouse exists)
"RTN","DGRP9",23,0)
 ; SET date of test for 408.31 records (DGEFDT) to today (create new records)
"RTN","DGRP9",24,0)
 S:'((DGEFDT+10000)>DT&("^A^C^P^E^M^"[(U_$P(DGMT,U,4)))&DGNOBUCK) DGEFDT=DT
"RTN","DGRP9",25,0)
 S DGISYR=$E($$LYR^DGMTSCU1(DGEFDT),1,3)+1700 ; IS year (Year previous to DGEFDT)
"RTN","DGRP9",26,0)
 D:DT'=DGEFDT ALL^DGMTU21(DFN,"VSD",DGEFDT,"IPR") ; Get IAI records if DGEFDT is <DT
"RTN","DGRP9",27,0)
 ;
"RTN","DGRP9",28,0)
 ; GTS - DG*5.3*688 MT Version
"RTN","DGRP9",29,0)
 ; If creating new IAI records for new year (execution transfers when 'E' is entered in EN^DGRPP)
"RTN","DGRP9",30,0)
 S:(+$G(DGIAINEW)=1) DGMTV=1
"RTN","DGRP9",31,0)
 ; If identifying IAI records for display to user for first time in L/E execution
"RTN","DGRP9",32,0)
 I +$G(DGIAINEW)=0 DO
"RTN","DGRP9",33,0)
 . ; If MT 408.31 record exists and is for current year, get form of test; if it doesn't exist, 
"RTN","DGRP9",34,0)
 . ;   default form to version 1
"RTN","DGRP9",35,0)
 . I ($P(DGMT,"^",1)]""),($E($P(DGMT,"^",2),1,3)=$E(DT,1,3)) S DGMTV=+$P($G(^DGMT(408.31,+DGMT,2)),"^",11) ; existing MT version
"RTN","DGRP9",36,0)
 . I ($P(DGMT,"^",1)']"")!(($P(DGMT,"^",1)]"")&($E($P(DGMT,"^",2),1,3)'=$E(DT,1,3))) DO
"RTN","DGRP9",37,0)
 . . S DGMTV=1 ; Default IS records without MT to version 1 format
"RTN","DGRP9",38,0)
 . . ; If Test Date is not current year
"RTN","DGRP9",39,0)
 . . I ($P(DGMT,"^",1)]""),($E($P(DGMT,"^",2),1,3)'=$E(DT,1,3)) DO
"RTN","DGRP9",40,0)
 . . . ; If test date is less than 1 yr old or test is an active status get the means test version of the test
"RTN","DGRP9",41,0)
 . . . ;  and prior yrs IAI recs exist
"RTN","DGRP9",42,0)
 . . . I ((DGEFDT+10000)>DT&("^A^C^P^E^M^"[(U_$P(DGMT,U,4)))&DGNOBUCK) S DGMTV=+$P($G(^DGMT(408.31,+DGMT,2)),"^",11)
"RTN","DGRP9",43,0)
 . . . ; If test date is more than 1 yr old OR test is NOT an active status or there are no prior yrs IAI recs
"RTN","DGRP9",44,0)
 . . . I '((DGEFDT+10000)>DT&("^A^C^P^E^M^"[(U_$P(DGMT,U,4)))&DGNOBUCK) DO
"RTN","DGRP9",45,0)
 . . . .I $D(DGINC),($$VER^DGMTUTL3(.DGINC)=0) DO IAICK(DFN,.DGINC)
"RTN","DGRP9",46,0)
 . . ;
"RTN","DGRP9",47,0)
 . . ; If 408.21 rec's and records are pre Feb '05 format, then convert IS (0) node to version 1
"RTN","DGRP9",48,0)
 . . ; If no IS nodes exist or are version 1, do not convert 0 node.  (Entry will be version 1)
"RTN","DGRP9",49,0)
 . . I $P(DGMT,"^",1)']"",$D(DGINC),($$VER^DGMTUTL3(.DGINC)=0) DO IAICK(DFN,.DGINC)
"RTN","DGRP9",50,0)
 ;
"RTN","DGRP9",51,0)
 ; Default DGMTV=1 when entering a new test and IAI records from prior year are not available
"RTN","DGRP9",52,0)
 I +DGMT'>0 I '((DGEFDT+10000)>DT&("^A^C^P^E^M^"[(U_$P(DGMT,U,4)))) S DGMTV=1
"RTN","DGRP9",53,0)
 ;
"RTN","DGRP9",54,0)
 S DGSP=$D(DGREL("S")) ; DGSP = flag ... + if spouse, 0 if not
"RTN","DGRP9",55,0)
 D TOT(.DGINC) ;Totals income into DGTOT(x) node (x=V, S, or D)
"RTN","DGRP9",56,0)
 D:(+DGMTV=0) DIS ;Display and keep old version 0 MT in 0 form after saving
"RTN","DGRP9",57,0)
 D:(+DGMTV=1) DIS1 ;Display and store MT in version 1 format
"RTN","DGRP9",58,0)
 K DGTOT,DGIAINEW
"RTN","DGRP9",59,0)
 G ^DGRPP
"RTN","DGRP9",60,0)
 ;
"RTN","DGRP9",61,0)
DIS ;Display income
"RTN","DGRP9",62,0)
 D MTCHK
"RTN","DGRP9",63,0)
 N DGBL,SCV0
"RTN","DGRP9",64,0)
 S SCV0=""
"RTN","DGRP9",65,0)
 W !!?34,"Veteran" W:DGSP ?46,"Spouse" W:DGDEP ?56,"Dependents" W ?73,"Total"
"RTN","DGRP9",66,0)
 W !?31,"-----------------------------------------------"
"RTN","DGRP9",67,0)
 S DGGTOT=0,DGRPW=1 ;initialize grand total variable
"RTN","DGRP9",68,0)
 S Z=1 D WW^DGRPV D FLD(.DGTOT,8,"Social Security (Not SSI)")
"RTN","DGRP9",69,0)
 S Z=2 D WW^DGRPV D FLD(.DGTOT,9,"U.S. Civil Service")
"RTN","DGRP9",70,0)
 S Z=3 D WW^DGRPV D FLD(.DGTOT,10,"U.S. Railroad Retirement")
"RTN","DGRP9",71,0)
 S Z=4 D WW^DGRPV D FLD(.DGTOT,11,"Military Retirement")
"RTN","DGRP9",72,0)
 S Z=5 D WW^DGRPV D FLD(.DGTOT,12,"Unemployment Compensation")
"RTN","DGRP9",73,0)
 S Z=6 D WW^DGRPV D FLD(.DGTOT,13,"Other Retirement")
"RTN","DGRP9",74,0)
 S Z=7 D WW^DGRPV D FLD(.DGTOT,14,"Total Employment Income")
"RTN","DGRP9",75,0)
 S Z=8 D WW^DGRPV D FLD(.DGTOT,15,"Interest,Dividend,Annuity")
"RTN","DGRP9",76,0)
 S Z=9 D WW^DGRPV D FLD(.DGTOT,16,"Workers Comp or Black Lung")
"RTN","DGRP9",77,0)
 S Z=10 D WW^DGRPV D FLD(.DGTOT,17,"All Other Income")
"RTN","DGRP9",78,0)
 W !,DGBL,DGBL," Total 1-10 -->"," ",$J($$AMT^DGMTSCU1(DGGTOT),12)
"RTN","DGRP9",79,0)
 ;
"RTN","DGRP9",80,0)
 ;** Patch DG*5.3*108; estimated household income follows
"RTN","DGRP9",81,0)
 W !!,DGISYR_" Estimated ""Household"" Taxable Income: "_$S($P(DGTOT("V"),U,21)'="":$$AMT^DGMTSCU1($P(DGTOT("V"),U,21)),1:"")
"RTN","DGRP9",82,0)
 Q
"RTN","DGRP9",83,0)
 ;
"RTN","DGRP9",84,0)
DIS1 ;Display income in version 1 form for screen 9 in Load/Edit.
"RTN","DGRP9",85,0)
 D MTCHK
"RTN","DGRP9",86,0)
 N DGBL,SCV0
"RTN","DGRP9",87,0)
 W !!?34,"Veteran" W:DGSP ?46,"Spouse" W:DGDEP ?56,"Dependents" W ?73,"Total"
"RTN","DGRP9",88,0)
 W !?31,"-----------------------------------------------"
"RTN","DGRP9",89,0)
 S DGGTOT=0,DGRPW=1 ;initialize grand total variable
"RTN","DGRP9",90,0)
 S Z=1 D WW^DGRPV W "  Total Employment Income",!
"RTN","DGRP9",91,0)
 D FLD(.DGTOT,14,"   (Wages, Bonuses, Tips):")
"RTN","DGRP9",92,0)
 S Z=2 D WW^DGRPV W "  Net Income from Farm,",!
"RTN","DGRP9",93,0)
 D FLD(.DGTOT,17,"   Ranch, Property, Bus.:")
"RTN","DGRP9",94,0)
 S Z=3 D WW^DGRPV W "  Other Income Amounts",!
"RTN","DGRP9",95,0)
 W "     (Soc. Sec., Compensation,",!
"RTN","DGRP9",96,0)
 S SCV0=""
"RTN","DGRP9",97,0)
 D FLD(.DGTOT,8,"   Pension, Interest, Div.): ")
"RTN","DGRP9",98,0)
 K SCV0
"RTN","DGRP9",99,0)
 W !,DGBL,DGBL," Total 1-3 -->  "," ",$J($$AMT^DGMTSCU1(DGGTOT),11)
"RTN","DGRP9",100,0)
 ;
"RTN","DGRP9",101,0)
 ;** Estimated household income follows
"RTN","DGRP9",102,0)
 W !!,DGISYR_" Estimated ""Household"" Taxable Income: "_$S($P(DGTOT("V"),U,21)'="":$$AMT^DGMTSCU1($P(DGTOT("V"),U,21)),1:"")
"RTN","DGRP9",103,0)
 Q
"RTN","DGRP9",104,0)
 ;
"RTN","DGRP9",105,0)
FLD(DGIN,DGPCE,DGTXT) ;Display inc. fields
"RTN","DGRP9",106,0)
 ; Input:
"RTN","DGRP9",107,0)
 ;       DGIN 0 node of #408.21 for vet,spouse, and deps
"RTN","DGRP9",108,0)
 ;       DGRPCE as piece
"RTN","DGRP9",109,0)
 ;       DGTXT as income desc.
"RTN","DGRP9",110,0)
 ;       DGGTOT - If defined keeps running total 
"RTN","DGRP9",111,0)
 N DGTOT,I
"RTN","DGRP9",112,0)
 I '$D(DGBL) S $P(DGBL," ",26)=""
"RTN","DGRP9",113,0)
 W:Z'["10" " "
"RTN","DGRP9",114,0)
 W " ",DGTXT,$P(DGBL," ",$L(DGTXT),28)
"RTN","DGRP9",115,0)
 W:('$D(SCV0)) $J($$AMT^DGMTSCU1($P(DGIN("V"),"^",DGPCE)),13)
"RTN","DGRP9",116,0)
 W:($D(SCV0)) $J($$AMT^DGMTSCU1($P(DGIN("V"),"^",DGPCE)),10)
"RTN","DGRP9",117,0)
 W " ",$S($D(DGIN("S")):$J($$AMT^DGMTSCU1($P(DGIN("S"),"^",DGPCE)),10),1:$E(DGBL,1,10))
"RTN","DGRP9",118,0)
 W " ",$S($D(DGIN("D")):$J($$AMT^DGMTSCU1($P(DGIN("D"),"^",DGPCE)),11),1:$E(DGBL,1,11))
"RTN","DGRP9",119,0)
 S DGTOT="",I="" F  S I=$O(DGIN(I)) Q:I=""  I $P(DGIN(I),"^",DGPCE)]"" S DGTOT=DGTOT+$P(DGIN(I),"^",DGPCE)
"RTN","DGRP9",120,0)
 W "  ",$J($$AMT^DGMTSCU1(DGTOT),12)
"RTN","DGRP9",121,0)
 I $D(DGGTOT) S DGGTOT=DGGTOT+DGTOT
"RTN","DGRP9",122,0)
 Q
"RTN","DGRP9",123,0)
 ;
"RTN","DGRP9",124,0)
TOT(DGINC,DGDOEXP) ; Totals income
"RTN","DGRP9",125,0)
 ; Input
"RTN","DGRP9",126,0)
 ;   DGINC(x,ct) where X is V, S, or D and CT(counter)(per ALL^DGMTU21)
"RTN","DGRP9",127,0)
 ;   DGDOEXP: IF =1 TOTAL EXPENSE
"RTN","DGRP9",128,0)
 ;
"RTN","DGRP9",129,0)
 ;Output
"RTN","DGRP9",130,0)
 ;   DGTOT(x) where x is V, S, or D and DGTOT(x) = 0 node of #408.21
"RTN","DGRP9",131,0)
 ;    (totaled if x is D...total of all deps)
"RTN","DGRP9",132,0)
 ;
"RTN","DGRP9",133,0)
 N DGCT,NODE,PIECE
"RTN","DGRP9",134,0)
 S DGDOEXP=$G(DGDOEXP)
"RTN","DGRP9",135,0)
 S DGTOT("V")=""
"RTN","DGRP9",136,0)
 F DGTYPE="V","S","D" I $D(DGREL(DGTYPE)) S DGTOT(DGTYPE)="" D
"RTN","DGRP9",137,0)
 . S:DGDOEXP&("VS"[DGTYPE) DGEXP(DGTYPE)=$$GET1ND(+$G(DGINC(DGTYPE)))
"RTN","DGRP9",138,0)
 . I "VS"[DGTYPE S DGTOT(DGTYPE)=$$GET0ND(+$G(DGINC(DGTYPE))) Q
"RTN","DGRP9",139,0)
 . F DGCT=0:0 S DGCT=$O(DGINC(DGTYPE,DGCT)) Q:'DGCT  D
"RTN","DGRP9",140,0)
 . . S:DGDOEXP DGEXP(DGTYPE)=$$GET1ND(+$G(DGINC(DGTYPE,DGCT)))
"RTN","DGRP9",141,0)
 . . S NODE=$$GET0ND(+DGINC(DGTYPE,DGCT))
"RTN","DGRP9",142,0)
 . . F PIECE=8:1:17 I $P(NODE,"^",PIECE)]"" S $P(DGTOT("D"),"^",PIECE)=$P(DGTOT("D"),"^",PIECE)+$P(NODE,"^",PIECE)
"RTN","DGRP9",143,0)
 Q
"RTN","DGRP9",144,0)
 ;
"RTN","DGRP9",145,0)
GET0ND(IEN) ; Returns the 0 node of File #408.21
"RTN","DGRP9",146,0)
 Q $G(^DGMT(408.21,IEN,0))
"RTN","DGRP9",147,0)
 ;
"RTN","DGRP9",148,0)
GET1ND(IEN) ; Returns the 1 node of file #408.21
"RTN","DGRP9",149,0)
 Q $G(^DGMT(408.21,IEN,1))
"RTN","DGRP9",150,0)
 ;
"RTN","DGRP9",151,0)
MTCHK ; Checks if MT/CP is complete for prior calendar year
"RTN","DGRP9",152,0)
 ; Input:
"RTN","DGRP9",153,0)
 ;    DFN
"RTN","DGRP9",154,0)
 ;    DGINR array of income relation for deps
"RTN","DGRP9",155,0)
 ;    DGISYR as income screening year
"RTN","DGRP9",156,0)
 ;Output:
"RTN","DGRP9",157,0)
 ;    DGMTC as MT complete flag (1= yes,2=Non-Mt'd deps exist, 0 o/w)
"RTN","DGRP9",158,0)
 ;    DGMTC("S")= Mt complete, but spouse not MTed
"RTN","DGRP9",159,0)
 ;    DGMTC("D")= Mt complete, but at least one dep not MT'D
"RTN","DGRP9",160,0)
 ;         $D(DGMTED(X,X) if can't edit MT data
"RTN","DGRP9",161,0)
 ;
"RTN","DGRP9",162,0)
 N DGFL,DGHD,DGMTYPT,DGMTCP,I,X
"RTN","DGRP9",163,0)
 S (DGFL,DGMTC)=0 ;initialize flag to 0
"RTN","DGRP9",164,0)
 S DGHD="Income data for "_DGISYR_".  "
"RTN","DGRP9",165,0)
 I '$D(DGMTV) N DGMTV S DGMTV=1
"RTN","DGRP9",166,0)
 S:DGMTV=0 DGRPVV(9)="0000000000"
"RTN","DGRP9",167,0)
 S:DGMTV=1 DGRPVV(9)="000"
"RTN","DGRP9",168,0)
 I $P($G(^DGMT(408.21,+$G(DGINC("V")),0)),U,18) S DGHD=DGHD_"  [Data Copied - Not Updated]"
"RTN","DGRP9",169,0)
 I '$$MTCOMP^DGRPU(DFN,DGEFDT) W !?(40-($L(DGHD)/2)),DGHD Q  ; CP/MT not complete
"RTN","DGRP9",170,0)
 S DGMTCP=$S(DGMTYPT=1:"Means",1:"Copay")
"RTN","DGRP9",171,0)
 S:DGMTV=0 DGRPVV(9)="1111111111"
"RTN","DGRP9",172,0)
 S:DGMTV=1 DGRPVV(9)="111"
"RTN","DGRP9",173,0)
 S DGMTC=1,DGMTED("V")=1 S DGHD=DGHD_DGMTCP_" Test is complete for that calendar year!"
"RTN","DGRP9",174,0)
 W !?(40-($L(DGHD)/2)),DGHD
"RTN","DGRP9",175,0)
 G:DGEFDT'=DT MTCKQT ;NO EDITING AT ALL FOR LAST YEAR
"RTN","DGRP9",176,0)
 I $D(DGREL("S")) S DGFL=1 I +$G(^DGMT(408.22,+$G(DGINR("S")),"MT")) S DGMTED("S")=1,DGFL=0
"RTN","DGRP9",177,0)
 I DGFL S DGMTC("S")=1 S DGFL=0
"RTN","DGRP9",178,0)
 F I=0:0 S I=$O(DGREL("D",I)) Q:'I  S X=+$G(^DGMT(408.22,+$G(DGINR("D",I)),"MT")) S:X DGMTED("D",I)=1 I 'X S DGFL=1
"RTN","DGRP9",179,0)
 I DGFL S DGMTC("D")=1
"RTN","DGRP9",180,0)
 I $D(DGMTC("S"))!$D(DGMTC("D")) W !,*7," You can only edit these items for dependents who are not "_DGMTCP_" tested!" S DGMTC=2 S:DGMTV=0 DGRPVV(9)="0000000000" S:DGMTV=1 DGRPVV(9)="000" Q
"RTN","DGRP9",181,0)
 W !,*7,?12,"This data must be edited through the "_DGMTCP_" test module!"
"RTN","DGRP9",182,0)
MTCKQT Q
"RTN","DGRP9",183,0)
 ;
"RTN","DGRP9",184,0)
 ;; GTS - DG*5.3*688 MT Version
"RTN","DGRP9",185,0)
IAICK(DFN,DGINC) ;Check version of IAI recs that don't have assoc. MT and convert version 0 record
"RTN","DGRP9",186,0)
 N DGTY,OTHRTST
"RTN","DGRP9",187,0)
 S DGTY=$S((+$G(^DGMT(408.21,+DGINC("V"),0))>0):$E(+$G(^DGMT(408.21,+DGINC("V"),0)),1,3)+1,1:$E(DT,1,3))
"RTN","DGRP9",188,0)
 ;NOTE: ISCNVRT not executed when - Patient is changed to NSC VET. but PEC remains SC when Copay test exists.
"RTN","DGRP9",189,0)
 ;       Changing PEC to SC will exercise ISCNVRT and convert vr 0 IAI rec's to vr 1
"RTN","DGRP9",190,0)
 D ISCNVRT^DGMTUTL(.DGINC)
"RTN","DGRP9",191,0)
 S OTHRTST=$$UPDTTSTS^DGMTU21(DFN,DGTY) ;Update 2.11 on all (1, 2 and 4 type) 408.31 recs for DFN and IY
"RTN","DGRP9",192,0)
 Q
"RTN","DGRPC")
0^59^B26505581
"RTN","DGRPC",1,0)
DGRPC ;ALB/MRL/PJR/PHH/EG/BAJ - CHECK CONSISTENCY OF PATIENT DATA ; 01/18/2006
"RTN","DGRPC",2,0)
 ;;5.3;Registration;**108,121,314,301,470,489,505,451,568,585,641,653,688**;Aug 13, 1993;Build 29
"RTN","DGRPC",3,0)
 ;
"RTN","DGRPC",4,0)
 ;linetags in routines correspond to IEN of file 38.6
"RTN","DGRPC",5,0)
 ;
"RTN","DGRPC",6,0)
 ;variables:  DGVT = 1 if VETERAN? = YES, 0 if NO
"RTN","DGRPC",7,0)
 ;            DGSC = 1 if SC? = YES, 0 if NO
"RTN","DGRPC",8,0)
 ;            DGCD = 0 node of file EC file (#8)
"RTN","DGRPC",9,0)
 ;        DGRPCOLD = old inconsistencies for pt (separated by ,s)
"RTN","DGRPC",10,0)
 ;           DGCHK = #s to check (separated by ,s)
"RTN","DGRPC",11,0)
 ;           DGLST = next # to check
"RTN","DGRPC",12,0)
 ;            DGER = inconsistencies found (separated by ,s)
"RTN","DGRPC",13,0)
 ;           DGNCK = 1 if missing key elig data...can't process further
"RTN","DGRPC",14,0)
 ;
"RTN","DGRPC",15,0)
 N ANYMSE,CONARR,CONCHK,CONERR,CONSPEC,LOC,I5,I6
"RTN","DGRPC",16,0)
 N MSECHK,MSESET,MSERR,MSDATERR,RANGE,RANSET
"RTN","DGRPC",17,0)
 D ON I $S(('$D(DFN)#2):1,'$D(^DPT(DFN,0)):1,DGER:1,1:0) G KVAR^DGRPCE:DGER
"RTN","DGRPC",18,0)
EN S:'$D(DGEDCN)#2 DGEDCN=0 I DGEDCN W !!,"Checking data for consistency..."
"RTN","DGRPC",19,0)
 D START:DGEDCN
"RTN","DGRPC",20,0)
 F I=0,.13,.141,.121,.122,.22,.24,.3,.31,.311,.32,.321,.322,.33,.35,.36,.362,.38,.39,.52,.53,"TYPE","VET" S DGP(I)=$G(^DPT(DFN,I))
"RTN","DGRPC",21,0)
 ;get old inconsistencies
"RTN","DGRPC",22,0)
 S DGRPCOLD="," I $D(^DGIN(38.5,DFN)) F I=0:0 S I=$O(^DGIN(38.5,DFN,"I",I)) Q:'I  S DGRPCOLD=DGRPCOLD_I_","
"RTN","DGRPC",23,0)
 ;find consistencies to check/not check
"RTN","DGRPC",24,0)
 ; DG*5.3*653 modified to exclude checks numbered>99  BAJ  10/25/2005
"RTN","DGRPC",25,0)
 S DGCHK="," F I=0:0 S I=$O(^DGIN(38.6,I)) Q:'I!(I=99)  I $D(^(I,0)),$S(I=2:0,I=51:0,I=9:1,I=10:1,I=13:1,I=14:1,I=22:1,I=52:1,I=53:1,'$P(^(0),"^",5):1,1:0),I'=99 S DGCHK=DGCHK_I_","
"RTN","DGRPC",26,0)
 S DGVT=$S(DGP("VET")="Y":1,1:0),DGSC=$S($P(DGP(.3),"^",1)="Y":1,1:0),DGCD=$S($D(^DIC(8,+DGP(.36),0)):^(0),1:""),(DGCT,DGER,DGNCK)="" I 'DGVT,$D(^DG(391,+DGP("TYPE"),0)),$P(^(0),"^",2) S DGVT=2
"RTN","DGRPC",27,0)
 S DGLST=+$P(DGCHK,",",2) G @DGLST
"RTN","DGRPC",28,0)
1 S DGD=$P(DGP(0),"^",1) I DGD?1L.E!(DGD?.E1L.E)!(DGD="") S X=1 D COMB,NEXT I +DGLST'=2 G @DGLST
"RTN","DGRPC",29,0)
 S I1=0 F I=1:1:$L(DGD) Q:I1  S J=$E(DGD,I) I J?1NP,$A(J)>32,J'=",",J'="-",J'=".",J'="'" S I1=1
"RTN","DGRPC",30,0)
 I I1 S X=1 D COMB
"RTN","DGRPC",31,0)
 D NEXT I +DGLST'=2 G @DGLST
"RTN","DGRPC",32,0)
2 S I1=0 F I=0:0 S I=$O(^DPT(DFN,.01,I)) Q:'I!(I1)  I $P(^(I,0),"^",1)'?1A.E S I1=1
"RTN","DGRPC",33,0)
 I I1 S X=2 D COMB
"RTN","DGRPC",34,0)
 D NEXT I +DGLST>7!('DGLST) G @DGLST
"RTN","DGRPC",35,0)
3 ;
"RTN","DGRPC",36,0)
4 ;
"RTN","DGRPC",37,0)
5 ;
"RTN","DGRPC",38,0)
6 ;
"RTN","DGRPC",39,0)
7 F I=2,3,5,8,9 I $P(DGP(0),"^",I)="" S X=$S(I=2:3,I=3:4,I=5:5,I=8:6,1:7) D COMB:DGCHK[(","_X_",")
"RTN","DGRPC",40,0)
 S DGLST=7 G:DGCHK'[",7," FIND^DGRPC2 D NEXT I +DGLST'=8 G @DGLST
"RTN","DGRPC",41,0)
8 S I1=0,DGD=$G(^DPT(DFN,.11)) I '$P(DGD,"^",10) S I1=1,X=8 D COMB,NEXT G @DGLST
"RTN","DGRPC",42,0)
 I '$D(^HL(779.004,$P(DGD,"^",10))) S I1=1,X=8 D COMB,NEXT G @DGLST
"RTN","DGRPC",43,0)
 N STR8 S STR8="1,4,5,6,7" I $$FORIEN^DGADDUTL($P(DGD,"^",10)) S STR8="1,4"
"RTN","DGRPC",44,0)
 F T=1:1:$L(STR8,",") S I=$P(STR8,",",T) Q:I1  I $P(DGD,"^",I)="" S I1=1
"RTN","DGRPC",45,0)
 I I1 S X=8 D COMB
"RTN","DGRPC",46,0)
 D NEXT I +DGLST'=9 G @DGLST
"RTN","DGRPC",47,0)
9 I DGP("VET")="" S X=9,DGNCK=1 D COMB
"RTN","DGRPC",48,0)
 D NEXT I +DGLST'=10 G @DGLST
"RTN","DGRPC",49,0)
10 I $P(DGP(.3),"^",1)="" S X=10,DGNCK=1 D COMB
"RTN","DGRPC",50,0)
 D NEXT I +DGLST'=11 G @DGLST
"RTN","DGRPC",51,0)
11 I 'DGVT,DGSC S X=11 D COMB
"RTN","DGRPC",52,0)
 D NEXT I +DGLST'=12 G @DGLST
"RTN","DGRPC",53,0)
12 I DGSC,DGVT,$P(DGP(.3),"^",2)="" S X=12 D COMB
"RTN","DGRPC",54,0)
 D NEXT I +DGLST'=13 G @DGLST
"RTN","DGRPC",55,0)
13 I '$D(^DIC(21,+$P(DGP(.32),"^",3),0)) S X=13,DGNCK=1 D COMB
"RTN","DGRPC",56,0)
 D NEXT I +DGLST'=14 G @DGLST
"RTN","DGRPC",57,0)
14 I $P(DGCD,"^",1)="" S X=14,DGNCK=1 D COMB
"RTN","DGRPC",58,0)
 ;
"RTN","DGRPC",59,0)
 ;Check Patient Eligibilities multiple if Primary Elig Code defined
"RTN","DGRPC",60,0)
 I DGP(.36),'$D(^DPT(DFN,"E",+DGP(.36),0)) D PRI^VADPT60 ;5.3*301
"RTN","DGRPC",61,0)
 ;
"RTN","DGRPC",62,0)
 D NEXT I +DGLST'=15 G FIND^DGRPC2:+DGLST=35,@DGLST
"RTN","DGRPC",63,0)
15 I $P($G(^DPT(DFN,.15)),"^",2)]"",$P(DGP(.3),"^",7)="" S X=15 D COMB
"RTN","DGRPC",64,0)
 D NEXT I +DGLST'=16 G FIND^DGRPC2:+DGLST=35,@DGLST
"RTN","DGRPC",65,0)
16 D H^DGUTL I +DGP(.35)>DGTIME S X=16 D COMB
"RTN","DGRPC",66,0)
 D NEXT I +DGLST'=17 G FIND^DGRPC2:+DGLST=35,@DGLST
"RTN","DGRPC",67,0)
17 K DGDATE,DGTIME
"RTN","DGRPC",68,0)
 N SDARRAY,SDCLIEN,SDDATE
"RTN","DGRPC",69,0)
 S I1=0,DGD=DT
"RTN","DGRPC",70,0)
 S SDARRAY("FLDS")=3
"RTN","DGRPC",71,0)
 S SDARRAY(4)=DFN
"RTN","DGRPC",72,0)
 I +DGP(.35),$$SDAPI^SDAMA301(.SDARRAY) D
"RTN","DGRPC",73,0)
 .;if there is data hanging from the 101 subscript,
"RTN","DGRPC",74,0)
 .;then this is a valid appointment
"RTN","DGRPC",75,0)
 .;otherwise it is an error eg 01/21/2005
"RTN","DGRPC",76,0)
 .I $D(^TMP($J,"SDAMA301",101))=1 Q
"RTN","DGRPC",77,0)
 .S SDCLIEN=0
"RTN","DGRPC",78,0)
 .F  S SDCLIEN=$O(^TMP($J,"SDAMA301",DFN,SDCLIEN)) Q:'SDCLIEN!(I1)  D
"RTN","DGRPC",79,0)
 ..S SDDATE=0
"RTN","DGRPC",80,0)
 ..F  S SDDATE=$O(^TMP($J,"SDAMA301",DFN,SDCLIEN,SDDATE)) Q:'SDDATE!(I1)  D
"RTN","DGRPC",81,0)
 ...S X=$P($P(^TMP($J,"SDAMA301",DFN,SDCLIEN,SDDATE),"^",3),";")
"RTN","DGRPC",82,0)
 ...I X=""!(X="I") S I1=1
"RTN","DGRPC",83,0)
 K ^TMP($J,"SDAMA301")
"RTN","DGRPC",84,0)
 I I1 S X=17 D COMB
"RTN","DGRPC",85,0)
 ;
"RTN","DGRPC",86,0)
END ; end of routine...find next check to execute (or goto end)
"RTN","DGRPC",87,0)
 S:DGNCK DGLST=35 G:DGCHK'[",35,"&(DGNCK) FIND^DGRPC2 D NEXT G @DGLST
"RTN","DGRPC",88,0)
 ;
"RTN","DGRPC",89,0)
COMB ;record inconsistency
"RTN","DGRPC",90,0)
 S DGCT=DGCT+1,DGER=DGER_X_",",DGLST=X Q
"RTN","DGRPC",91,0)
 Q
"RTN","DGRPC",92,0)
 ;
"RTN","DGRPC",93,0)
NEXT ; find the next consistency check to check (goto end if can't process further)
"RTN","DGRPC",94,0)
 S I=$F(DGCHK,(","_DGLST_",")),DGLST=+$E(DGCHK,I,999) I +DGLST,DGLST<18 Q
"RTN","DGRPC",95,0)
 I +DGLST,DGNCK,+DGLST>17,+DGLST<36 S DGLST=35 Q:DGCHK'[",35,"  G NEXT
"RTN","DGRPC",96,0)
 S:'+DGLST DGLST="END^DGRPC3" I +DGLST S DGLST=DGLST_"^DGRPC"_$S(+DGLST<43:1,+DGLST<79:2,1:3)
"RTN","DGRPC",97,0)
 Q
"RTN","DGRPC",98,0)
 ;
"RTN","DGRPC",99,0)
PAT ;check inconsistencies for a selected patient
"RTN","DGRPC",100,0)
 D ON G KVAR^DGRPCE:DGER W !! S DIC="^DPT(",DIC(0)="AEQMZ",DIC("A")="Check consistency for which PATIENT: " D ^DIC K DIC G KVAR^DGRPCE:Y'>0 S DFN=+Y,DGEDCN=1 D DGRPC G PAT
"RTN","DGRPC",101,0)
 ;
"RTN","DGRPC",102,0)
START ;record start time for checker
"RTN","DGRPC",103,0)
 S DGSTART=$H Q
"RTN","DGRPC",104,0)
 ;
"RTN","DGRPC",105,0)
TIME ;record end time for checker
"RTN","DGRPC",106,0)
 Q:'$D(DGSTART)#2  S DGEND=$H,X=$P(DGSTART,",",2),X1=$P(DGEND,",",2)
"RTN","DGRPC",107,0)
 I +DGSTART=+DGEND S DGTIME=X1-X
"RTN","DGRPC",108,0)
 E  S DGTIME=(5184000-X)+X1
"RTN","DGRPC",109,0)
 I $S(DGCT:0,DGCON=1:1,1:0) G TIMEQ
"RTN","DGRPC",110,0)
 W !!,"===> ",$S(DGCT:DGCT,DGCON<2:"No",1:"All")," inconsistenc",$S(DGCT=1:"y",1:"ies")," ",$S('DGCON:"found",DGCON=1:"filed",1:"removed")," in ",DGTIME," second",$S(DGTIME=1:"",1:"s"),"..." H 1
"RTN","DGRPC",111,0)
TIMEQ K DGSTART,DGEND,DGTIME,X,X1,DGCON Q
"RTN","DGRPC",112,0)
 ;
"RTN","DGRPC",113,0)
ON ;check if checker is on
"RTN","DGRPC",114,0)
 S DGER=0 I $S('$D(^DG(43,1,0)):1,'$P(^(0),"^",37):1,1:0) S DGER=1
"RTN","DGRPC",115,0)
 S:'$D(DGEDCN) DGEDCN=0 W:DGER !!,"CONSISTENCY CHECKER TURNED OFF!!",$C(7) Q
"RTN","DGRPC1")
0^85^B13110554
"RTN","DGRPC1",1,0)
DGRPC1 ;ALB/MRL/PJR - CHECK CONSISTENCY OF PATIENT DATA (CONT) ; 5/28/04 8:51am
"RTN","DGRPC1",2,0)
 ;;5.3;Registration;**314,342,451,564,688**;Aug 13, 1993;Build 29
"RTN","DGRPC1",3,0)
18 ;
"RTN","DGRPC1",4,0)
19 S X=$S($P(DGCD,"^",5)="Y":1,1:0) I $S(X=DGVT:0,DGVT=2&('X):0,1:1) S X=$S(DGVT:18,1:19) I DGCHK[(","_X_",") D COMB
"RTN","DGRPC1",5,0)
 S:'DGVT DGLST=$S(+DGLST>22:+DGLST,1:22) G:DGCHK'[",22,"&'DGVT FIND^DGRPC2 D NEXT I DGLST>20!('DGLST) G @DGLST
"RTN","DGRPC1",6,0)
20 I DGVT,DGSC S DGD=$S(+$P(DGP(.3),"^",2)>49:1,1:3) I $P(DGCD,"^",4)'=DGD!($P(DGCD,"^",5)="N") S X=20 D COMB
"RTN","DGRPC1",7,0)
 S:DGSC DGLST=$S(+DGLST>22:+DGLST,1:22) G:DGCHK'[",22,"&DGSC FIND^DGRPC2 D NEXT I +DGLST'=21 G @DGLST
"RTN","DGRPC1",8,0)
21 ; off
"RTN","DGRPC1",9,0)
 D NEXT I +DGLST'=22 G @DGLST
"RTN","DGRPC1",10,0)
22 I $P(DGP("VET"),"^",1)'="Y" G 221
"RTN","DGRPC1",11,0)
 S DGSTR="^"
"RTN","DGRPC1",12,0)
 I DGSC S DGSTR=DGSTR_$S($P(DGP(.3),"^",2)<50:3,1:1)_"^" G 220 ;only appropriate sc type
"RTN","DGRPC1",13,0)
 I $P(DGP(.52),"^",5)="Y" S DGSTR=DGSTR_"18^" G 220 ;pow only
"RTN","DGRPC1",14,0)
 I $P(DGP(.53),"^",1)="Y" S DGSTR=DGSTR_"22^" G 220 ;Purple Heart
"RTN","DGRPC1",15,0)
 I $P(DGP(0),"^",3)'>2061231 S DGSTR=DGSTR_"16^" ;mex border
"RTN","DGRPC1",16,0)
 I $P(DGP(0),"^",3)'>2071231 S DGSTR=DGSTR_"17^" ;allow WWI
"RTN","DGRPC1",17,0)
 S DGFL=0 I $P(DGP(.362),"^",12)="Y" S DGSTR=DGSTR_"2^",DGFL=1 ; a&a
"RTN","DGRPC1",18,0)
 I $P(DGP(.362),"^",13)="Y" S DGSTR=DGSTR_"15^",DGFL=1 ; hb
"RTN","DGRPC1",19,0)
 I DGFL=1 G 220
"RTN","DGRPC1",20,0)
 I $P(DGP(.362),"^",14)="Y" S DGSTR=DGSTR_"4^" G 220 ;nsc, va pen
"RTN","DGRPC1",21,0)
 S DGSTR=DGSTR_"5^" ;nsc
"RTN","DGRPC1",22,0)
220 I DGSTR'[("^"_$P(DGCD,"^",9)_"^") S X=22 D COMB
"RTN","DGRPC1",23,0)
 K DGSTR
"RTN","DGRPC1",24,0)
221 D NEXT I +DGLST'=23 G @DGLST
"RTN","DGRPC1",25,0)
23 S DGD=$G(^DPT(DFN,.361)) I $P(DGD,"^",1)="V",$P(DGD,"^",2)="" S X=23 D COMB
"RTN","DGRPC1",26,0)
 D NEXT I +DGLST'=24 G @DGLST
"RTN","DGRPC1",27,0)
24 I '$D(^DIC(21,+$P(DGP(.32),"^",3),"E",+$P(DGP(.36),"^",1))) S X=24 D COMB
"RTN","DGRPC1",28,0)
 D NEXT I +DGLST'=25 G @DGLST
"RTN","DGRPC1",29,0)
25 ;off
"RTN","DGRPC1",30,0)
 S:DGVT DGLST=35 G:DGCHK'[",35,"&DGVT FIND^DGRPC2 D NEXT I +DGLST'=26 G @DGLST
"RTN","DGRPC1",31,0)
26 ;off
"RTN","DGRPC1",32,0)
27 ;off
"RTN","DGRPC1",33,0)
28 ;off
"RTN","DGRPC1",34,0)
 D NEXT I +DGLST>32!('DGLST) G @DGLST
"RTN","DGRPC1",35,0)
29 ;
"RTN","DGRPC1",36,0)
30 ;
"RTN","DGRPC1",37,0)
31 ;
"RTN","DGRPC1",38,0)
 ;
"RTN","DGRPC1",39,0)
32 I 'DGVT S DGD=DGP(.362),X=28 F I=12,13,14,16 S X=X+1 I $P(DGD,"^",I)="Y",(DGCHK[(","_X_",")) D COMB
"RTN","DGRPC1",40,0)
 S DGLST=32 G:DGCHK'[",32," FIND^DGRPC2 D NEXT G @DGLST
"RTN","DGRPC1",41,0)
33 ;off
"RTN","DGRPC1",42,0)
 S DGLST=33 G:DGCHK'[",33," FIND^DGRPC2 D NEXT I +DGLST>35!('DGLST) G @DGLST
"RTN","DGRPC1",43,0)
 ;
"RTN","DGRPC1",44,0)
34 I 'DGVT,$P(DGP(.52),"^",5)="Y",DGCHK[(","_34_",") D COMB S DGLST=34 G:DGCHK'[",34," FIND^DGRPC2 D NEXT G @DGLST
"RTN","DGRPC1",45,0)
35 ;off
"RTN","DGRPC1",46,0)
 S DGLST=35 G:DGCHK'[",35," FIND^DGRPC2 D NEXT I +DGLST'=36 G @DGLST
"RTN","DGRPC1",47,0)
36 I '$D(^DG(391,+DGP("TYPE"),0)) S X=36 D COMB
"RTN","DGRPC1",48,0)
 ;;S:'DGVT DGLST=48 G:DGCHK'[",48,"&'DGVT FIND^DGRPC2 D NEXT I +DGLST>40!('DGLST) G @DGLST
"RTN","DGRPC1",49,0)
 D NEXT I +DGLST>40!('DGLST) G @DGLST
"RTN","DGRPC1",50,0)
37 ;; This check deactivated by EVC project (DG*5.3*688)
"RTN","DGRPC1",51,0)
38 ;
"RTN","DGRPC1",52,0)
39 ;
"RTN","DGRPC1",53,0)
40 F I=5,11 S I2=0,X=$S(I=5:37,1:39) I $P(DGP(.52),"^",I)="Y" D PC
"RTN","DGRPC1",54,0)
 ;;
"RTN","DGRPC1",55,0)
41 ;; Inconsistencies 41 and 42 are superseded by 72 through 82
"RTN","DGRPC1",56,0)
42 ;;
"RTN","DGRPC1",57,0)
 ;;
"RTN","DGRPC1",58,0)
 S DGLST=42 S:'DGVT DGLST=48 G:DGCHK'[",48,"&'DGVT FIND^DGRPC2 D NEXT G @DGLST
"RTN","DGRPC1",59,0)
 ;
"RTN","DGRPC1",60,0)
PC I DGCHK[(","_X_","),X'=37 F I1=I+1:1:I+3 I $P(DGP(.52),"^",I1)="",'I2 D COMB S I2=1
"RTN","DGRPC1",61,0)
 I DGCHK[(","_X_","),X'=37 F I1=I+2:1:I+3 I $E($P(DGP(.52),"^",I1),4,7)="0000",'I2 D COMB S I2=1
"RTN","DGRPC1",62,0)
 S X=X+1 I DGCHK[(","_X_","),$P(DGP(.52),"^",I+2),$P(DGP(.52),"^",I+3),'$$B4^DGRPDT($P(DGP(.52),"^",I+2),$P(DGP(.52),"^",I+3),1) D COMB
"RTN","DGRPC1",63,0)
 Q
"RTN","DGRPC1",64,0)
 ;
"RTN","DGRPC1",65,0)
COMB S DGCT=DGCT+1,DGER=DGER_X_",",DGLST=X Q
"RTN","DGRPC1",66,0)
 Q
"RTN","DGRPC1",67,0)
NEXT S I=$F(DGCHK,(","_+DGLST_",")),DGLST=+$E(DGCHK,I,999) I +DGLST,+DGLST<41 Q
"RTN","DGRPC1",68,0)
 I +DGLST,+DGLST<79 S DGLST=DGLST_"^DGRPC2" Q
"RTN","DGRPC1",69,0)
 S:'DGLST DGLST="END^DGRPC3" I +DGLST S DGLST=DGLST_"^DGRPC3"
"RTN","DGRPC1",70,0)
 Q
"RTN","DGRPC2")
0^60^B64408428
"RTN","DGRPC2",1,0)
DGRPC2 ;ALB/MRL/SCK/PJR/BAJ/LBD - CHECK CONSISTENCY OF PATIENT DATA (CONT) ; 8/15/08 11:33am
"RTN","DGRPC2",2,0)
 ;;5.3;Registration;**45,69,108,121,205,218,342,387,470,467,489,505,507,528,451,564,570,657,688**;Aug 13, 1993;Build 29
"RTN","DGRPC2",3,0)
 ;
"RTN","DGRPC2",4,0)
43 ;off
"RTN","DGRPC2",5,0)
44 ;off
"RTN","DGRPC2",6,0)
45 ;off
"RTN","DGRPC2",7,0)
46 ;off
"RTN","DGRPC2",8,0)
47 ;off
"RTN","DGRPC2",9,0)
 S DGLST=$S(DGCHK[",47,":47,DGCHK[",46,":46,DGCHK[",45,":45,DGCHK[",44,":44,1:DGLST)
"RTN","DGRPC2",10,0)
 D NEXT G @DGLST
"RTN","DGRPC2",11,0)
48 I DGVT S DGD=DGP(.362) I DGCHK[(",48,"),($P(DGD,"^",17)="Y"),($P(DGD,"^",6)="") S X=48 D COMB
"RTN","DGRPC2",12,0)
 D NEXT G @DGLST
"RTN","DGRPC2",13,0)
49 ;
"RTN","DGRPC2",14,0)
50 ; insurance checks
"RTN","DGRPC2",15,0)
 I DGCHK[",49,"!(DGCHK[",50,") D  S DGLST=$S(DGCHK["50":50,1:49)
"RTN","DGRPC2",16,0)
 . N COV,INS,X
"RTN","DGRPC2",17,0)
 . S X=0,COV=$S($P(DGP(.31),"^",11)="Y":1,1:0)
"RTN","DGRPC2",18,0)
 . S INS=$$INSUR^IBBAPI(DFN,DT,"R")
"RTN","DGRPC2",19,0)
 . I COV,'INS S X=49 ; yes, but none
"RTN","DGRPC2",20,0)
 . I 'COV,INS S X=50 ; not yes, but some
"RTN","DGRPC2",21,0)
 . I DGCHK[(","_X_",") D COMB
"RTN","DGRPC2",22,0)
 D NEXT G @DGLST
"RTN","DGRPC2",23,0)
51 D NEXT G @DGLST ; 51 disabled
"RTN","DGRPC2",24,0)
 S X=$S($D(^DIC(21,+$P(DGP(.32),"^",3),0)):$P(^(0),"^",3),1:"")
"RTN","DGRPC2",25,0)
 I X="Z"&($P(DGP(.32),"^",5)'=7)&($P(DGP(.32),"^",10)'=7)&($P(DGP(.32),"^",15)'=7)!($P(DGP(.32),"^",5)=7&(X'="Z")) S X=51 D COMB
"RTN","DGRPC2",26,0)
 ;
"RTN","DGRPC2",27,0)
52 I $P(DGP(.31),"^",11)']"" S X=52 D COMB ;automatically on
"RTN","DGRPC2",28,0)
 D NEXT G @DGLST
"RTN","DGRPC2",29,0)
53 I $P(DGP(.311),"^",15)']"" S X=53 D COMB ;automatically on
"RTN","DGRPC2",30,0)
 D NEXT G @DGLST
"RTN","DGRPC2",31,0)
54 ;
"RTN","DGRPC2",32,0)
55 ;BELOW IS USED BY BOTH 54 & 55
"RTN","DGRPC2",33,0)
 S DGLST=$S(DGCHK["55":55,1:54)
"RTN","DGRPC2",34,0)
 I $G(^DPT(DFN,.35)),(^(.35)<+($E(DT,1,3)_"0000")) D NEXT G @DGLST ; patient died before current year
"RTN","DGRPC2",35,0)
 N DGE S DGE=+$O(^DIC(8.1,"B","SERVICE CONNECTED 50% to 100%",0))
"RTN","DGRPC2",36,0)
 I $P($G(^DPT(DFN,.3)),U,2)'<50!($P($G(^DIC(8,+$G(^DPT(DFN,.36)),0)),U,9)=DGE) D NEXT G @DGLST ;50-100% SC
"RTN","DGRPC2",37,0)
 S DGPTYP=$G(^DG(391,+DGP("TYPE"),"S")),DGISYR=$E(DT,1,3)-1_"0000" I '$P(DGPTYP,"^",8)&('$P(DGPTYP,"^",9)) K DGPTYP,DGISYR D NEXT G @DGLST ; screens 8 and 9 off
"RTN","DGRPC2",38,0)
 D ALL^DGMTU21(DFN,"VSD",DT,"IP")
"RTN","DGRPC2",39,0)
 I '$P(DGPTYP,"^",8)!(DGCHK'["54") G JUST55 ; screen 8 off OR JUST 55 IN CHK
"RTN","DGRPC2",40,0)
 S DGFL=0 I $D(DGREL("S")),($$SSN^DGMTU1(+DGREL("S"))']"") S DGFL=1
"RTN","DGRPC2",41,0)
 I 'DGFL F I=0:0 S I=$O(DGREL("D",I)) Q:'I  I $$SSN^DGMTU1(+DGREL("D",I))']"" S DGFL=1 Q
"RTN","DGRPC2",42,0)
 I DGFL S X=54 D COMB
"RTN","DGRPC2",43,0)
JUST55 I DGCHK'["55" D NEXT G @DGLST
"RTN","DGRPC2",44,0)
 S DGLST=55
"RTN","DGRPC2",45,0)
 I '$P(DGPTYP,"^",9) D NEXT G @DGLST ; screen 9 off
"RTN","DGRPC2",46,0)
 D TOT^DGRP9(.DGINC) S DGFL=0
"RTN","DGRPC2",47,0)
 F DGD="V","S","D" I $D(DGTOT(DGD)) F I=8:1:17 I $P(DGTOT(DGD),"^",I)]"" S DGFL=1 Q
"RTN","DGRPC2",48,0)
 I 'DGFL N DGAPD,DG55 D  I 'DGAPD&('DG55)  S X=55 D COMB
"RTN","DGRPC2",49,0)
 . S DGAPD=+$$LST^DGMTU(DFN),DGAPD=+$P($G(^DGMT(408.31,+DGAPD,0)),U,11)
"RTN","DGRPC2",50,0)
 . S DG55=$$CHECK55(DFN) ; **507, Additional Income Checks
"RTN","DGRPC2",51,0)
 D NEXT G @DGLST
"RTN","DGRPC2",52,0)
56 I DGVT S DGD=DGP(.3) I DGCHK[(",56,"),($P(DGD,"^",11)="Y"),($P(DGP(.362),"^",20)="") S X=56 D COMB
"RTN","DGRPC2",53,0)
 D NEXT G END^DGRPC3:$S('+DGLST:1,+DGLST=99:1,1:0) G @DGLST
"RTN","DGRPC2",54,0)
57 I $P(DGP(.38),U,1) D
"RTN","DGRPC2",55,0)
 .N X1,X2
"RTN","DGRPC2",56,0)
 .S X1=$P(DGP(.38),U,2)
"RTN","DGRPC2",57,0)
 .S X=$P($G(^DG(43,1,0)),U,46) S X2=$S(X:X,1:365) D C^%DTC
"RTN","DGRPC2",58,0)
 .I X<DT S X=57 D COMB
"RTN","DGRPC2",59,0)
 D NEXT G @DGLST
"RTN","DGRPC2",60,0)
58 ;58 - EC Claim - No Gulf/Som Svc
"RTN","DGRPC2",61,0)
 ;off
"RTN","DGRPC2",62,0)
 ;DG*5.3*688 changed the wording of Environmental Contaminants
"RTN","DGRPC2",63,0)
 ;so if this cc is ever activated the text in ^DGIN(38.6,58 
"RTN","DGRPC2",64,0)
 ;needs to be changed to Southwset Asia Conditions.
"RTN","DGRPC2",65,0)
 D NEXT G @DGLST
"RTN","DGRPC2",66,0)
59 ;59 - incomplete Catastrophic Disability info
"RTN","DGRPC2",67,0)
 I $$HASCAT^DGENCDA(DFN) D
"RTN","DGRPC2",68,0)
 .I '$P(DGP(.39),"^",2) S X=59 D COMB
"RTN","DGRPC2",69,0)
 D NEXT G @DGLST
"RTN","DGRPC2",70,0)
60 ;60 - Location of agent orange exposure unanswered
"RTN","DGRPC2",71,0)
 I DGVT,$P(DGP(.321),"^",2)="Y",$P(DGP(.321),"^",13)="" S X=60 D COMB
"RTN","DGRPC2",72,0)
 D NEXT G @DGLST
"RTN","DGRPC2",73,0)
61 ;61 - Incomplete Phone Number
"RTN","DGRPC2",74,0)
 ; DG*5.3*657 BAJ Phone number check modified
"RTN","DGRPC2",75,0)
 ; Home phone check is disabled
"RTN","DGRPC2",76,0)
 ; Work phone is required only if pt is employed
"RTN","DGRPC2",77,0)
 N EMPST
"RTN","DGRPC2",78,0)
 S EMPST=","_$P($G(^DPT(DFN,.311)),U,15)_","
"RTN","DGRPC2",79,0)
 I ",1,2,4,"[EMPST,($P(DGP(.13),"^",2)="") S X=61 D COMB
"RTN","DGRPC2",80,0)
 D NEXT G @DGLST
"RTN","DGRPC2",81,0)
62 ;62 - Missing Emergency Contact Name
"RTN","DGRPC2",82,0)
 I $P(DGP(.33),"^")="" S X=62 D COMB
"RTN","DGRPC2",83,0)
 D NEXT G @DGLST
"RTN","DGRPC2",84,0)
63 ;Confidential Address check
"RTN","DGRPC2",85,0)
 N STR63,J,DGI,DGERR
"RTN","DGRPC2",86,0)
 S DGERR=0
"RTN","DGRPC2",87,0)
 I $P(DGP(.141),U,9)="Y",$P($$CAACT^DGRPCADD(DFN),U) D
"RTN","DGRPC2",88,0)
 . ; country is either NULL or non-numeric
"RTN","DGRPC2",89,0)
 . I '$P(DGP(.141),U,16) S DGERR=1 Q
"RTN","DGRPC2",90,0)
 . ; country is not in Country file
"RTN","DGRPC2",91,0)
 . I '$D(^HL(779.004,$P(DGP(.141),"^",16))) S DGERR=1 Q
"RTN","DGRPC2",92,0)
 . S STR63="1,4,5,6" I $$FORIEN^DGADDUTL($P(DGP(.141),"^",16)) S STR63="1,4"
"RTN","DGRPC2",93,0)
 . F J=1:1:$L(STR63,",") S DGI=$P(STR63,",",J) Q:DGERR  I $P(DGP(.141),U,DGI)="" S DGERR=1
"RTN","DGRPC2",94,0)
 I DGERR S X=63 D COMB
"RTN","DGRPC2",95,0)
 D NEXT G @DGLST
"RTN","DGRPC2",96,0)
64 ;64 - Place of Birth City/State Missing ;**505
"RTN","DGRPC2",97,0)
 I $P(DGP(0),"^",11)=""!($P(DGP(0),"^",12)="") S X=64 D COMB
"RTN","DGRPC2",98,0)
 D NEXT G @DGLST
"RTN","DGRPC2",99,0)
65 ;65 - Mother's Maiden Name Missing ;**505
"RTN","DGRPC2",100,0)
 I $P(DGP(.24),"^",3)="" S X=65 D COMB
"RTN","DGRPC2",101,0)
 D NEXT G @DGLST
"RTN","DGRPC2",102,0)
66 ;66 - Pseudo SSN in use ;**505
"RTN","DGRPC2",103,0)
 ; DG*5.3*657 BAJ 11/20/2005 Removed from CC.  Pseudo notice appears in Patient List
"RTN","DGRPC2",104,0)
 ;I $P(DGP(0),"^",9)["P" S X=66 D COMB
"RTN","DGRPC2",105,0)
 ; off
"RTN","DGRPC2",106,0)
 D NEXT G @DGLST
"RTN","DGRPC2",107,0)
67 ;67 - Serv Sep Date [Last] missing or imprecise, patch 528
"RTN","DGRPC2",108,0)
 N DGG
"RTN","DGRPC2",109,0)
 S DGG=$$CVELIG^DGCV(DFN)
"RTN","DGRPC2",110,0)
 I $G(DGG)["A"!($G(DGG)["F") S X=67 D COMB
"RTN","DGRPC2",111,0)
 D NEXT G @DGLST
"RTN","DGRPC2",112,0)
68 ;used for 68-71, for Combat Vet, DG*5.3*528
"RTN","DGRPC2",113,0)
69 ;
"RTN","DGRPC2",114,0)
70 ;
"RTN","DGRPC2",115,0)
71 ;
"RTN","DGRPC2",116,0)
 ;68 - Combat To Date missing or imprecise, patch 528
"RTN","DGRPC2",117,0)
 ;69 - Yugoslavia To Date missing or imprecise, patch 528
"RTN","DGRPC2",118,0)
 ;70 - Somalia To Date missing or imprecise, patch 528
"RTN","DGRPC2",119,0)
 ;71 - Persian Gulf To Date missing or imprecise, patch 528
"RTN","DGRPC2",120,0)
 N DGG
"RTN","DGRPC2",121,0)
 S DGG=$$CVELIG^DGCV(DFN)
"RTN","DGRPC2",122,0)
 I DGG["B"!(DGG["G") S X=68 D COMB
"RTN","DGRPC2",123,0)
 I DGG["C"!(DGG["H") S X=69 D COMB
"RTN","DGRPC2",124,0)
 I DGG["D"!(DGG["I") S X=70 D COMB
"RTN","DGRPC2",125,0)
 I DGG["E"!(DGG["J") S X=71 D COMB
"RTN","DGRPC2",126,0)
 S DGLST=71
"RTN","DGRPC2",127,0)
 D NEXT G @DGLST
"RTN","DGRPC2",128,0)
72 ;; MSE - Required Fields
"RTN","DGRPC2",129,0)
 S:'$G(MSECHK) MSECHK=$$MSCK^DGMSCK I MSERR S X=72 D COMB
"RTN","DGRPC2",130,0)
 D NEXT G @DGLST
"RTN","DGRPC2",131,0)
73 ;; An MSE FROM date precedes an MSE TO date
"RTN","DGRPC2",132,0)
 S:'$G(MSECHK) MSECHK=$$MSCK^DGMSCK I MSDATERR D NEXT G @DGLST
"RTN","DGRPC2",133,0)
 F I1=6,11,16 I '$$B4^DGRPDT($P(DGP(.32),"^",I1),$P(DGP(.32),"^",I1+1),1) S X=73 D COMB S (MSERR,MSDATERR)=1 Q
"RTN","DGRPC2",134,0)
 D NEXT G @DGLST
"RTN","DGRPC2",135,0)
74 ;; Conflict Date Missing or Incomplete
"RTN","DGRPC2",136,0)
 S:'$G(CONCHK) CONCHK=$$CNCK^DGMSCK I CONERR S X=74 D COMB
"RTN","DGRPC2",137,0)
 D NEXT G @DGLST
"RTN","DGRPC2",138,0)
75 ;; Conflict TO date precedes FROM date
"RTN","DGRPC2",139,0)
76 ;; Conflict Date out of range for conflict
"RTN","DGRPC2",140,0)
 S:'$G(CONCHK) CONCHK=$$CNCK^DGMSCK
"RTN","DGRPC2",141,0)
 S LOC="",(I5,I6)=0 F I1=1:1 S LOC=$O(CONSPEC(LOC)) Q:LOC=""  I CONARR(LOC)=1 D
"RTN","DGRPC2",142,0)
 .N FROMDAT,FROMPC,TODAT,TOPC,NODE,DATA
"RTN","DGRPC2",143,0)
 .S DATA=CONSPEC(LOC)
"RTN","DGRPC2",144,0)
 .S NODE=$P(DATA,",",1),FROMPC=$P(DATA,",",3),TOPC=$P(DATA,",",4)
"RTN","DGRPC2",145,0)
 .S FROMDAT=$P(DGP(NODE),"^",FROMPC),TODAT=$P(DGP(NODE),"^",TOPC)
"RTN","DGRPC2",146,0)
 .I '$$B4^DGRPDT(FROMDAT,TODAT,1) S X=75 D COMB:'I5&(DGCHK[(",75,")) S CONARR(LOC)=2,I5=1 Q
"RTN","DGRPC2",147,0)
 .I DGCHK'[(",76,") Q
"RTN","DGRPC2",148,0)
 .S:'$G(RANSET) RANSET=$$RANGE^DGMSCK
"RTN","DGRPC2",149,0)
 .I '$$RWITHIN^DGRPDT($P(RANGE(LOC),"^",1),$P(RANGE(LOC),"^",2),FROMDAT,TODAT) S X=76 D COMB:'I6 S CONARR(LOC)=2,I6=1
"RTN","DGRPC2",150,0)
 .Q
"RTN","DGRPC2",151,0)
 S DGLST=76 D NEXT G @DGLST
"RTN","DGRPC2",152,0)
77 ;; Date out of range for POW Location
"RTN","DGRPC2",153,0)
 ;; Check turned off by EVC project (DG*5.3*688)
"RTN","DGRPC2",154,0)
 D NEXT G @DGLST
"RTN","DGRPC2",155,0)
78 ;; Date out of range for Combat Location
"RTN","DGRPC2",156,0)
 S:'$G(RANSET) RANSET=$$RANGE^DGMSCK
"RTN","DGRPC2",157,0)
 ;; Don't check if Combat Data Incomplete or if Combat TO precedes FROM
"RTN","DGRPC2",158,0)
 I ((","_DGER_",")[(",39,"))!((","_DGER_",")[(",40,")) D NEXT G @DGLST
"RTN","DGRPC2",159,0)
 I $P(DGP(.52),"^",11)'="Y" D NEXT G @DGLST ;; Don't check if no COMBAT
"RTN","DGRPC2",160,0)
 S LOC=$$COMPOW^DGRPMS($P(DGP(.52),"^",12)) I LOC="" D NEXT G @DGLST
"RTN","DGRPC2",161,0)
 I '$$RWITHIN^DGRPDT($P(RANGE(LOC),"^",1),$P(RANGE(LOC),"^",2),$P(DGP(.52),"^",13),$P(DGP(.52),"^",14)) S X=78 D COMB
"RTN","DGRPC2",162,0)
 D NEXT G @DGLST
"RTN","DGRPC2",163,0)
COMB S DGCT=DGCT+1,DGER=DGER_X_",",DGLST=X Q
"RTN","DGRPC2",164,0)
 ;
"RTN","DGRPC2",165,0)
NEXT S I=$F(DGCHK,(","_+DGLST_",")),DGLST=+$E(DGCHK,I,999) I +DGLST,+DGLST<79 Q
"RTN","DGRPC2",166,0)
 S:'DGLST DGLST="END^DGRPC3" I +DGLST S DGLST=DGLST_"^DGRPC3"
"RTN","DGRPC2",167,0)
 Q
"RTN","DGRPC2",168,0)
FIND F I=DGLST:1:99 I DGCHK[(","_I_",") Q
"RTN","DGRPC2",169,0)
 I DGNCK,(I>17),(I<36) S DGLST=36 G FIND
"RTN","DGRPC2",170,0)
 I I,I<99 S DGLST=I G @(DGLST_$S(DGLST>78:"^DGRPC3",DGLST>42:"",DGLST>17:"^DGRPC1",1:"^DGRPC"))
"RTN","DGRPC2",171,0)
 G END^DGRPC3
"RTN","DGRPC2",172,0)
 ;
"RTN","DGRPC2",173,0)
CHECK55(DFN) ;Buisness rules for additional 55-INCOME DATA MISSING checks
"RTN","DGRPC2",174,0)
 ;  Modeled from DGMTR checks.
"RTN","DGRPC2",175,0)
 ;  Input  DFN - IEN from PATIENT File #2
"RTN","DGRPC2",176,0)
 ;
"RTN","DGRPC2",177,0)
 ;  Output 1 - If Income check passes additional buisness rules
"RTN","DGRPC2",178,0)
 ;         0 - If Income check fails additional buisness rules
"RTN","DGRPC2",179,0)
 ;
"RTN","DGRPC2",180,0)
 N VAMB,VASV,VA,VADMVT,VAEL,VAINDT,DGRTN,DGMED,DG,DG1,DGWARD,DGSRVC
"RTN","DGRPC2",181,0)
 ;
"RTN","DGRPC2",182,0)
 S DGRTN=0
"RTN","DGRPC2",183,0)
 D MB^VADPT I +VAMB(7) S DGRTN=1 G Q55  ; Check if receiving VA Disability
"RTN","DGRPC2",184,0)
 D SVC^VADPT I +VASV(4) S DGRTN=1 G Q55  ; check if POW status indicated
"RTN","DGRPC2",185,0)
 I +VASV(9),(+VASV(9,1)=3) S DGRTN=1 G Q55  ; Check if Purple Heart Status is Confirmed
"RTN","DGRPC2",186,0)
 D GETS^DIQ(2,DFN_",",".381:.383","I","DGMED")
"RTN","DGRPC2",187,0)
 I $G(DGMED(2,DFN_",",.381,"I")) S DGRTN=1 G Q55  ; Check if eligible for Medicaid
"RTN","DGRPC2",188,0)
 D ADM^VADPT2 ; Check for current admission to DOM ward 
"RTN","DGRPC2",189,0)
 I +$G(VADMVT) D  G:DGRTN Q55
"RTN","DGRPC2",190,0)
 . Q:'$$GET1^DIQ(43,1,16,"I")  ; Has Dom wards?
"RTN","DGRPC2",191,0)
 . S DGWARD=$$GET1^DIQ(405,VADMVT,.06,"I") ; Get ward location
"RTN","DGRPC2",192,0)
 . S DGSRVC=$$GET1^DIQ(42,DGWARD,.03,"I") ; Get ward service
"RTN","DGRPC2",193,0)
 . S:DGSRVC="D" DGRTN=1 ; If ward service is 'D', then return 1
"RTN","DGRPC2",194,0)
 ;
"RTN","DGRPC2",195,0)
 ; Additional checks for 0% SC
"RTN","DGRPC2",196,0)
 D ELIG^VADPT
"RTN","DGRPC2",197,0)
 I +VAEL(3),'$P(VAEL(3),U,2) D  ; Check if service connected with % of zero
"RTN","DGRPC2",198,0)
 . I +VAMB(4) S DGRTN=1 Q  ; Check if receiving a VA pension
"RTN","DGRPC2",199,0)
 . S DG=0 ; Check for secondary eligibilities
"RTN","DGRPC2",200,0)
 . F  S DG=$O(VAEL(1,DG)) Q:'DG  D  Q:DGRTN
"RTN","DGRPC2",201,0)
 . . F DG1=2,4,15,16,17,18 I DG=DG1 S DGRTN=1 Q
"RTN","DGRPC2",202,0)
 ; DG*5.3*657 BAJ
"RTN","DGRPC2",203,0)
 ; Additional business rules
"RTN","DGRPC2",204,0)
 ; Do NOT file inconsistency for the following:
"RTN","DGRPC2",205,0)
 ; 1. Service Connected = YES, Eligibility Code is "SC LESS THAN 50%", SC % is 10-49, A&A = "YES"
"RTN","DGRPC2",206,0)
 ; 2. Service Connected = YES, Eligibility Code is "SC LESS THAN 50%", SC % is 10-49, VA Pension = "YES"
"RTN","DGRPC2",207,0)
 ; 3. Patient Type is "NSC Veteran" and A&A = "YES"
"RTN","DGRPC2",208,0)
 ; 4. Patient Type is "NSC Veteran" and VA Pension = "YES"
"RTN","DGRPC2",209,0)
 ; Arrays elements used:
"RTN","DGRPC2",210,0)
 ; .. VAEL(3) $P 1 = SERVICE CONNECTED? $P 2 = SC %
"RTN","DGRPC2",211,0)
 ; .. VAEL(6) $P 2 = PATIENT TYPE, "B" INDEX VALUE
"RTN","DGRPC2",212,0)
 ; .. VAMB(1) $P 1 = RECEIVING A&A
"RTN","DGRPC2",213,0)
 ; .. VAMB(4) $P 1 = RECEIVING VA PENSION
"RTN","DGRPC2",214,0)
 I $P(VAEL(1),"^",2)="SC LESS THAN 50%",+VAEL(3) S PCNT=$P(VAEL(3),"^",2) I PCNT'<10,PCNT'>50 S DGRTN=$S(+VAMB(1):1,VAMB(4):1,1:DGRTN)
"RTN","DGRPC2",215,0)
 I $P($G(VAEL(6)),"^",2)="NSC VETERAN" S DGRTN=$S(+VAMB(1):1,VAMB(4):1,1:DGRTN)
"RTN","DGRPC2",216,0)
 ;
"RTN","DGRPC2",217,0)
Q55 D KVAR^VADPT
"RTN","DGRPC2",218,0)
 Q $G(DGRTN)
"RTN","DGRPC3")
0^61^B23485665
"RTN","DGRPC3",1,0)
DGRPC3 ;ALB/PJR,LBD,BAJ - CHECK CONSISTENCY OF PATIENT DATA (CONT) ; 7/21/06 8:33am
"RTN","DGRPC3",2,0)
 ;;5.3;Registration;**451,632,673,657,688**;Aug 13, 1993;Build 29
"RTN","DGRPC3",3,0)
 ;
"RTN","DGRPC3",4,0)
79 ;; MSE Dates overlap
"RTN","DGRPC3",5,0)
 ;; Don't check if MSE Dates Incomplete or if MSE TO precedes FROM
"RTN","DGRPC3",6,0)
 ;; or unless at least 2 ranges
"RTN","DGRPC3",7,0)
 S:'$G(MSECHK) MSECHK=$$MSCK^DGMSCK I MSDATERR!($L(ANYMSE)<2) D NEXT G @DGLST
"RTN","DGRPC3",8,0)
 I ANYMSE[1,'$$OVRLPCHK^DGRPDT(DFN,$P(DGP(.32),"^",6),$P(DGP(.32),"^",7),1,".326^.327") S X=79 D COMB S MSERR=1 D NEXT G @DGLST
"RTN","DGRPC3",9,0)
 I ANYMSE'[1,'$$OVRLPCHK^DGRPDT(DFN,$P(DGP(.32),"^",11),$P(DGP(.32),"^",12),1,".3292^.3293") S X=79 D COMB S MSERR=1 D NEXT G @DGLST
"RTN","DGRPC3",10,0)
 D NEXT G @DGLST
"RTN","DGRPC3",11,0)
80 ;; POW Dates not within MSE
"RTN","DGRPC3",12,0)
 ;; Check turned off by EVC project (DG*5.3*688)
"RTN","DGRPC3",13,0)
 D NEXT G @DGLST
"RTN","DGRPC3",14,0)
81 ;; Combat Dates not within MSE
"RTN","DGRPC3",15,0)
 I '$P(DGP(.52),"^",12) D NEXT G @DGLST ;; Don't check if no COMBAT Data
"RTN","DGRPC3",16,0)
 ;; Don't check if COMBAT Data Incomplete or if COMBAT TO precedes FROM
"RTN","DGRPC3",17,0)
 I ((","_DGER_",")[(",39,"))!((","_DGER_",")[(",40,")) D NEXT G @DGLST
"RTN","DGRPC3",18,0)
 S:'$G(MSECHK) MSECHK=$$MSCK^DGMSCK S:'$G(MSESET) MSESET=$$MSFROMTO^DGMSCK
"RTN","DGRPC3",19,0)
 ;; If COMBAT, but no MSE, then Range is NOT within MSE
"RTN","DGRPC3",20,0)
 I 'ANYMSE S X=81 D COMB D NEXT G @DGLST
"RTN","DGRPC3",21,0)
 I '$$RWITHIN^DGRPDT($P(MSESET,"^",1),$P(MSESET,"^",2),$P(DGP(.52),"^",13),$P(DGP(.52),"^",14)) S X=81 D COMB
"RTN","DGRPC3",22,0)
 D NEXT G @DGLST
"RTN","DGRPC3",23,0)
82 ;; Conflict Dates not within MSE
"RTN","DGRPC3",24,0)
 S:'$G(CONCHK) CONCHK=$$CNCK^DGMSCK
"RTN","DGRPC3",25,0)
 S:'$G(MSECHK) MSECHK=$$MSCK^DGMSCK S:'$G(MSESET) MSESET=$$MSFROMTO^DGMSCK
"RTN","DGRPC3",26,0)
 S LOC="",I2=0 F I1=1:1 S LOC=$O(CONSPEC(LOC)) Q:LOC=""  I CONARR(LOC)=1 D
"RTN","DGRPC3",27,0)
 .N FROMDAT,FROMPC,TODAT,TOPC,NODE,DATA
"RTN","DGRPC3",28,0)
 .S DATA=CONSPEC(LOC)
"RTN","DGRPC3",29,0)
 .S NODE=$P(DATA,",",1),FROMPC=$P(DATA,",",3),TOPC=$P(DATA,",",4)
"RTN","DGRPC3",30,0)
 .S FROMDAT=$P(DGP(NODE),"^",FROMPC),TODAT=$P(DGP(NODE),"^",TOPC)
"RTN","DGRPC3",31,0)
 .I '$$RWITHIN^DGRPDT($P(MSESET,"^",1),$P(MSESET,"^",2),FROMDAT,TODAT) S X=82 D COMB:'I2 S CONARR(LOC)=2,I2=1
"RTN","DGRPC3",32,0)
 .Q
"RTN","DGRPC3",33,0)
 ; Check OIF/OEF conflict dates
"RTN","DGRPC3",34,0)
 N DGOEIF D GET^DGENOEIF(DFN,.DGOEIF,0,"",0)
"RTN","DGRPC3",35,0)
 I $G(DGOEIF("COUNT")),DGER'[",82," D
"RTN","DGRPC3",36,0)
 . N Z
"RTN","DGRPC3",37,0)
 . S Z=0 F  S Z=$O(DGOEIF("IEN",Z)) Q:'Z  D  Q:DGER[",82,"
"RTN","DGRPC3",38,0)
 .. S FROMDAT=$G(DGOEIF("FR",Z)),TODAT=$G(DGOEIF("TO",Z)),LOC=$G(DGOEIF("LOC",Z))
"RTN","DGRPC3",39,0)
 .. I '$$RWITHIN^DGRPDT($P(MSESET,"^",1),$P(MSESET,"^",2),FROMDAT,TODAT) S X=82 D COMB S I2=1
"RTN","DGRPC3",40,0)
 D NEXT G @DGLST
"RTN","DGRPC3",41,0)
83 ;Merchant Seaman or Filipino Vet BOS requires service dates during WWII
"RTN","DGRPC3",42,0)
 N BOS,BOSN,MS,MSE,OUT
"RTN","DGRPC3",43,0)
 F MS=1:1:3 D  Q:$G(OUT)
"RTN","DGRPC3",44,0)
 .I MS=2,$P(DGP(.32),U,19)'="Y" S OUT=1 Q
"RTN","DGRPC3",45,0)
 .I MS=3,$P(DGP(.32),U,20)'="Y" S OUT=1 Q
"RTN","DGRPC3",46,0)
 .S BOS=$P(DGP(.32),U,(5*MS)) Q:'BOS  S BOSN=$P($G(^DIC(23,BOS,0)),U)
"RTN","DGRPC3",47,0)
 .S MSE=$S(MS=1:"MSL",MS=2:"MSNTL",1:"MSNNTL")
"RTN","DGRPC3",48,0)
 .I $$BRANCH^DGRPMS(BOS_U_BOSN),'$$WWII^DGRPMS(DFN,"",MSE) S X=83 D COMB S OUT=1 Q
"RTN","DGRPC3",49,0)
 D NEXT G @DGLST
"RTN","DGRPC3",50,0)
84 ;Filipino Vet BOS requires Filipino Vet Proof
"RTN","DGRPC3",51,0)
 N MS,BOS,OUT
"RTN","DGRPC3",52,0)
 F MS=1:1:3 D  Q:$G(OUT)
"RTN","DGRPC3",53,0)
 .I MS=2,$P(DGP(.32),U,19)'="Y" S OUT=1 Q
"RTN","DGRPC3",54,0)
 .I MS=3,$P(DGP(.32),U,20)'="Y" S OUT=1 Q
"RTN","DGRPC3",55,0)
 .S BOS=$P(DGP(.32),U,(5*MS))
"RTN","DGRPC3",56,0)
 .I $$FV^DGRPMS(BOS)=1,$P(DGP(.321),U,14)="" S X=84 D COMB S OUT=1 Q
"RTN","DGRPC3",57,0)
 D NEXT G @DGLST
"RTN","DGRPC3",58,0)
85 ;Eligible Filipino Vet should have Veteran status = 'YES'
"RTN","DGRPC3",59,0)
86 ;Ineligible Filipino Vet should have Veteran status = 'NO'
"RTN","DGRPC3",60,0)
 N MS,BOS,FV,FILV,NOTFV,MSE,OUT
"RTN","DGRPC3",61,0)
 F MS=1:1:3 D  Q:$G(OUT)
"RTN","DGRPC3",62,0)
 .I MS=2,$P(DGP(.32),U,19)'="Y" S OUT=1 Q
"RTN","DGRPC3",63,0)
 .I MS=3,$P(DGP(.32),U,20)'="Y" S OUT=1 Q
"RTN","DGRPC3",64,0)
 .S BOS=$P(DGP(.32),U,(5*MS)),FV=$$FV^DGRPMS(BOS) I 'FV S NOTFV="" Q
"RTN","DGRPC3",65,0)
 .S MSE=$S(MS=1:"MSL",MS=2:"MSNTL",1:"MSNNTL")
"RTN","DGRPC3",66,0)
 .I '$$WWII^DGRPMS(DFN,"",MSE) S FILV("I")="" Q
"RTN","DGRPC3",67,0)
 .I FV=2 S FILV("E")="" Q
"RTN","DGRPC3",68,0)
 .I $P(DGP(.321),U,14)=""!($P(DGP(.321),U,14)="NO") S FILV("I")="" Q
"RTN","DGRPC3",69,0)
 .S FILV("E")=""
"RTN","DGRPC3",70,0)
 I $D(FILV) D
"RTN","DGRPC3",71,0)
 .I DGVT'=1,$D(FILV("E")) S X=85 D COMB Q
"RTN","DGRPC3",72,0)
 .I DGCHK'[(",86,") Q
"RTN","DGRPC3",73,0)
 .I DGVT=1,'$D(NOTFV),'$D(FILV("E")),$D(FILV("I")) S X=86 D COMB
"RTN","DGRPC3",74,0)
 S DGLST=86
"RTN","DGRPC3",75,0)
 D NEXT G @DGLST
"RTN","DGRPC3",76,0)
87 ; DG*5.3*657 BAJ 11/24/2005 CC #87 added
"RTN","DGRPC3",77,0)
 ; SC Eligibility but no rated Disability Codes
"RTN","DGRPC3",78,0)
 ; 1. Svc Connected is answered "YES"
"RTN","DGRPC3",79,0)
 ; 2. Eligibility code is either SC < 50% or SC 50-100%
"RTN","DGRPC3",80,0)
 ; 3. Svc connected %-age is 0 or greater
"RTN","DGRPC3",81,0)
 ; 4. Patient has no rated disabilities
"RTN","DGRPC3",82,0)
 ; .. VAEL(1) $P 1 = Primary Eligibility Code  $p 2 = Primary Elig External Value
"RTN","DGRPC3",83,0)
 ; .. VAEL(3) $P 1 = SERVICE CONNECTED? $P 2 = SC %
"RTN","DGRPC3",84,0)
 ; .. Rated Disabilities : ^DPT(DFN,.372,0) $P 4 is number of records  '($P($G(^DPT(DFN,.372,0)),"^",4)) is TRUE
"RTN","DGRPC3",85,0)
 ;
"RTN","DGRPC3",86,0)
 ; Get Eligibility info
"RTN","DGRPC3",87,0)
 D ELIG^VADPT
"RTN","DGRPC3",88,0)
 ;
"RTN","DGRPC3",89,0)
 ; If not svc connected, don't check
"RTN","DGRPC3",90,0)
 I '$G(VAEL(3)) D NEXT G @DGLST
"RTN","DGRPC3",91,0)
 ;
"RTN","DGRPC3",92,0)
 I +VAEL(3)=1!(+VAEL(3)=3) D
"RTN","DGRPC3",93,0)
 . Q:$P(VAEL(3),"^",2)<0
"RTN","DGRPC3",94,0)
 . Q:$P(VAEL(3),"^",2)=""
"RTN","DGRPC3",95,0)
 . I '($P($G(^DPT(DFN,.372,0)),"^",4)) S X=87 D COMB
"RTN","DGRPC3",96,0)
 D NEXT G @DGLST
"RTN","DGRPC3",97,0)
 ;
"RTN","DGRPC3",98,0)
88 ;Temporary Address check
"RTN","DGRPC3",99,0)
 N STR88,J,DGI,DGERR,START,END
"RTN","DGRPC3",100,0)
 S DGERR=0
"RTN","DGRPC3",101,0)
 I $P(DGP(.121),U,9)="Y" D
"RTN","DGRPC3",102,0)
 . ;check only if current date is within effective range
"RTN","DGRPC3",103,0)
 . S START=$P(DGP(.121),U,7),END=$P(DGP(.121),U,8)
"RTN","DGRPC3",104,0)
 . Q:START=""  I END="" S END=9999999
"RTN","DGRPC3",105,0)
 . ; quit if current date is not within range
"RTN","DGRPC3",106,0)
 . I '(DT'<START&(DT'>END)) Q
"RTN","DGRPC3",107,0)
 . ; country is either NULL or non-numeric
"RTN","DGRPC3",108,0)
 . I '$P(DGP(.122),U,3) S DGERR=1 Q
"RTN","DGRPC3",109,0)
 . ; country is not in Country file
"RTN","DGRPC3",110,0)
 . I '$D(^HL(779.004,$P(DGP(.122),U,3))) S DGERR=1 Q
"RTN","DGRPC3",111,0)
 . S STR88="1,4,5,6" I $$FORIEN^DGADDUTL($P(DGP(.122),"^",3)) S STR88="1,4"
"RTN","DGRPC3",112,0)
 . F J=1:1:$L(STR88,",") S DGI=$P(STR88,",",J) Q:DGERR  I $P(DGP(.121),U,DGI)="" S DGERR=1
"RTN","DGRPC3",113,0)
 I DGERR S X=88 D COMB
"RTN","DGRPC3",114,0)
 D NEXT G @DGLST
"RTN","DGRPC3",115,0)
99 ; synonymous with END
"RTN","DGRPC3",116,0)
END I DGNCK S X=99 D COMB
"RTN","DGRPC3",117,0)
 I DGEDCN S DGCON=0 D TIME^DGRPC
"RTN","DGRPC3",118,0)
 K C,C1,C2,DGCD,DGD,DGD1,DGD2,DGDATE,DGDEP,DGCHK,DGFL,DGINC,DGISYR,DGLST,DGMS,DGNCK,DGP,DGPTYP,DGREL,DGSCT,DGT,DGTIME,DGTOT,DGVT,I,I2,I2,J,VAIN,X,X1
"RTN","DGRPC3",119,0)
 G ^DGRPCF
"RTN","DGRPC3",120,0)
 ;
"RTN","DGRPC3",121,0)
COMB S DGCT=DGCT+1,DGER=DGER_X_",",DGLST=X Q
"RTN","DGRPC3",122,0)
 ;;
"RTN","DGRPC3",123,0)
NEXT S I=$F(DGCHK,(","_+DGLST_",")),DGLST=+$E(DGCHK,I,999) S:'DGLST DGLST="END"
"RTN","DGRPC3",124,0)
 Q
"RTN","DGRPCADD")
0^62^B13015027
"RTN","DGRPCADD",1,0)
DGRPCADD ;ALB/MRL,BAJ - REGISTRATION SCREEN 1.1/CONFIDENTIAL ADDRESS INFORMATION ;Jan 17, 2006
"RTN","DGRPCADD",2,0)
 ;;5.3;Registration;**489,624,688**;Aug 13, 1993;Build 29
"RTN","DGRPCADD",3,0)
 ;;**688 BAJ Jan 17,2006 Modifications to support Foreign addresses
"RTN","DGRPCADD",4,0)
CADD ;Confidential Address
"RTN","DGRPCADD",5,0)
 N CNT,DGA1,DGA2,DGA3,DGA4,DGACT,DGBEG,DGCAN,DGCAT,DGCC,DGEND,DGTYP,DGTYPNAM,DGX,DGXX,DGZ,DGZIP,DGI,Y,Z,DGERR
"RTN","DGRPCADD",6,0)
 N DGA14,DGA15,DGA16,FORGN,DGCNTRY
"RTN","DGRPCADD",7,0)
 S DGRPS=1.1 D H^DGRPU
"RTN","DGRPCADD",8,0)
 S DGRP(.141)=$G(^DPT(DFN,.141))
"RTN","DGRPCADD",9,0)
 S Z=1,DGRPW=1.1 D WW^DGRPV W "Confidential Address"
"RTN","DGRPCADD",10,0)
 ; if no data or no Category, display "NO CONFIDENTIAL..."
"RTN","DGRPCADD",11,0)
 ;I DGRP(.141)=""!($P(DGRP(.141),U)="")!('$P($$CAACT(DFN),U)) D  G END
"RTN","DGRPCADD",12,0)
 I DGRP(.141)=""!('$P($$CAACT(DFN),U)) D  G END
"RTN","DGRPCADD",13,0)
 .W !?5,"NO CONFIDENTIAL ADDRESS"
"RTN","DGRPCADD",14,0)
 .W !!?42,"From/To:  NOT APPLICABLE"
"RTN","DGRPCADD",15,0)
 S DGXX=DGRP(.141),DGA1=$P(DGXX,"^",1),DGA2=$P(DGXX,"^",2),DGA3=$P(DGXX,"^",3),DGA4=$P(DGXX,"^",4)
"RTN","DGRPCADD",16,0)
 S DGA14=$P(DGXX,"^",14),DGA15=$P(DGXX,"^",15)
"RTN","DGRPCADD",17,0)
 S DGA16=$P(DGXX,"^",16) S:'DGA16 DGA16=""
"RTN","DGRPCADD",18,0)
 S DGCNTRY=$E($$CNTRYI^DGADDUTL(DGA16),1,25),FORGN=$$FORIEN^DGADDUTL(DGA16)
"RTN","DGRPCADD",19,0)
 I DGCNTRY=-1 S DGCNTRY="UNKNOWN COUNTRY"
"RTN","DGRPCADD",20,0)
 W:DGA1'="" !?3,DGA1
"RTN","DGRPCADD",21,0)
 I 'FORGN D
"RTN","DGRPCADD",22,0)
 . ;If we didn't skip a line for Address Line 1, skip line now
"RTN","DGRPCADD",23,0)
 . I DGA1="" W !
"RTN","DGRPCADD",24,0)
 . W ?43,"County: "
"RTN","DGRPCADD",25,0)
 . I $D(^DIC(5,+$P(DGRP(.141),"^",5),1,+$P(DGRP(.141),"^",11),0)) D
"RTN","DGRPCADD",26,0)
 . . S DGCC=^DIC(5,+$P(DGRP(.141),"^",5),1,+$P(DGRP(.141),"^",11),0) W $P(DGCC,"^",1),"(",$P(DGCC,"^",3),")"
"RTN","DGRPCADD",27,0)
 W:DGA2'="" !?3,DGA2
"RTN","DGRPCADD",28,0)
 W:DGA3'="" !?3,DGA3
"RTN","DGRPCADD",29,0)
 I FORGN W !?3,DGA15_" "_DGA4_" "_DGA14
"RTN","DGRPCADD",30,0)
 I 'FORGN W !?3,DGA4 D
"RTN","DGRPCADD",31,0)
 . I $D(^DIC(5,+$P(DGRP(.141),"^",5),0)) W ",",$P(^DIC(5,+$P(DGRP(.141),"^",5),0),"^",2)
"RTN","DGRPCADD",32,0)
 . S DGZIP=$P(DGRP(.141),"^",6) I $L(DGZIP)>5 S DGZIP=$E(DGZIP,1,5)_"-"_$E(DGZIP,6,12)
"RTN","DGRPCADD",33,0)
 . W " ",DGZIP
"RTN","DGRPCADD",34,0)
 W !?3,DGCNTRY
"RTN","DGRPCADD",35,0)
 W ?42,"From/To: " S (DGZ,DGX)="" F DGI=7,8 S DGZ=$P(DGRP(.141),"^",DGI),Y=DGZ D
"RTN","DGRPCADD",36,0)
 .I DGI=7 X:Y]"" ^DD("DD") S DGBEG=Y,DGX=Y
"RTN","DGRPCADD",37,0)
 .I DGI=8 X:Y]"" ^DD("DD") S DGEND=Y,DGX=DGX_"-"_$S(Y]"":Y,1:"UNANSWERED")
"RTN","DGRPCADD",38,0)
 W DGX
"RTN","DGRPCADD",39,0)
 W !!,"Categories: " I $D(^DPT(DFN,.14)) D
"RTN","DGRPCADD",40,0)
 .S DGCAT=$$GET1^DID(2.141,.01,"","POINTER","","DGERR")
"RTN","DGRPCADD",41,0)
 .S DGX="",DGCAN="" F  S DGCAN=$O(^DPT(DFN,.14,DGCAN)) Q:DGCAN=""  D
"RTN","DGRPCADD",42,0)
 ..Q:'$D(^DPT(DFN,.14,DGCAN,0))
"RTN","DGRPCADD",43,0)
 ..S DGTYP=$P(^DPT(DFN,.14,DGCAN,0),"^",1),DGACT=$P(^DPT(DFN,.14,DGCAN,0),"^",2)
"RTN","DGRPCADD",44,0)
 ..S DGACT=$S(DGACT="Y":"Active",DGACT="N":"Inactive",1:"Unanswered")
"RTN","DGRPCADD",45,0)
 ..S DGTYPNAM="" F DGI=1:1 S DGTYPNAM=$P(DGCAT,";",DGI) Q:DGTYPNAM=""  D
"RTN","DGRPCADD",46,0)
 ...I DGTYPNAM[DGTYP S DGTYPNAM=$P(DGTYPNAM,":",2),DGX=DGTYPNAM_"("_DGACT_")"_","_DGX
"RTN","DGRPCADD",47,0)
 S DGXX="",CNT=0 F DGI=1:1 S DGXX=$P(DGX,",",DGI) Q:DGXX=""  D
"RTN","DGRPCADD",48,0)
 .W:CNT>0 !
"RTN","DGRPCADD",49,0)
 .W ?13,DGXX
"RTN","DGRPCADD",50,0)
 .S CNT=CNT+1
"RTN","DGRPCADD",51,0)
 ; line feed before continuing
"RTN","DGRPCADD",52,0)
 W !
"RTN","DGRPCADD",53,0)
END ;
"RTN","DGRPCADD",54,0)
 S DGRP(.13)=$G(^DPT(DFN,.13))
"RTN","DGRPCADD",55,0)
 S Z=2,DGRPW=1.1 D WW^DGRPV W "    Cell Phone: "
"RTN","DGRPCADD",56,0)
 ;
"RTN","DGRPCADD",57,0)
 ;* Output Cell phone
"RTN","DGRPCADD",58,0)
 I $P(DGRP(.13),U,4)'="" W ?20,$P(DGRP(.13),U,4)
"RTN","DGRPCADD",59,0)
 I $P(DGRP(.13),U,4)="" W ?20,"UNANSWERED"
"RTN","DGRPCADD",60,0)
 ;
"RTN","DGRPCADD",61,0)
 ;* Output Pager
"RTN","DGRPCADD",62,0)
 W !,"          Pager #: "
"RTN","DGRPCADD",63,0)
 I $P(DGRP(.13),U,5)'="" W ?19,$P(DGRP(.13),U,5)
"RTN","DGRPCADD",64,0)
 I $P(DGRP(.13),U,5)="" W ?19,"UNANSWERED"
"RTN","DGRPCADD",65,0)
 ;
"RTN","DGRPCADD",66,0)
 ;* Output Email Address
"RTN","DGRPCADD",67,0)
 W !,"    Email Address: "
"RTN","DGRPCADD",68,0)
 I $P(DGRP(.13),U,3)'="" W ?19,$P(DGRP(.13),U,3)
"RTN","DGRPCADD",69,0)
 I $P(DGRP(.13),U,3)="" W ?19,"UNANSWERED"
"RTN","DGRPCADD",70,0)
 ;
"RTN","DGRPCADD",71,0)
 G ^DGRPP
"RTN","DGRPCADD",72,0)
CAACT(DFN,ACTDT) ;Determines if the Confidential Address is active
"RTN","DGRPCADD",73,0)
 ;Input:  DFN - Patient (#2) file internal entry number (Required)
"RTN","DGRPCADD",74,0)
 ;        ACTDT - Date used to determine if address is active 
"RTN","DGRPCADD",75,0)
 ;                (Optional) Defaults to DT if not defined. 
"RTN","DGRPCADD",76,0)
 ;
"RTN","DGRPCADD",77,0)
 ;Output:
"RTN","DGRPCADD",78,0)
 ;   1st piece 0 inactive based on start/stop dates
"RTN","DGRPCADD",79,0)
 ;             1 active based on start/stop dates
"RTN","DGRPCADD",80,0)
 ;   2nd piece 0 - no active correspondence types
"RTN","DGRPCADD",81,0)
 ;             1 - at least one active correspondence type
"RTN","DGRPCADD",82,0)
 ;
"RTN","DGRPCADD",83,0)
 N DGCA,DGCABEG,DGCAEND,DGSTAT,DGIEN,DGTYP,DGFLG
"RTN","DGRPCADD",84,0)
 S DGSTAT="0^0"
"RTN","DGRPCADD",85,0)
 I '$D(DFN) Q DGSTAT
"RTN","DGRPCADD",86,0)
 I '$D(ACTDT) S ACTDT=DT
"RTN","DGRPCADD",87,0)
 S DGCA=$G(^DPT(DFN,.141)) D
"RTN","DGRPCADD",88,0)
 .I DGCA="" Q
"RTN","DGRPCADD",89,0)
 .S DGCABEG=$P(DGCA,U,7)
"RTN","DGRPCADD",90,0)
 .S DGCAEND=$P(DGCA,U,8)
"RTN","DGRPCADD",91,0)
 .I 'DGCABEG!(DGCABEG>ACTDT)!(DGCAEND&(DGCAEND<ACTDT)) Q
"RTN","DGRPCADD",92,0)
 .S DGSTAT="1^0"
"RTN","DGRPCADD",93,0)
 ;Build array of correspondence types
"RTN","DGRPCADD",94,0)
 S (DGIEN,DGFLG)=0
"RTN","DGRPCADD",95,0)
 F  S DGIEN=$O(^DPT(DFN,.14,DGIEN)) Q:'DGIEN  D  Q:DGFLG
"RTN","DGRPCADD",96,0)
 .S DGTYP=$G(^DPT(DFN,.14,+DGIEN,0))
"RTN","DGRPCADD",97,0)
 .I $P(DGTYP,U,2)="Y" S DGFLG=1
"RTN","DGRPCADD",98,0)
 S $P(DGSTAT,U,2)=$S(DGFLG=1:1,1:0)
"RTN","DGRPCADD",99,0)
 Q DGSTAT
"RTN","DGRPCE1")
0^102^B59700884
"RTN","DGRPCE1",1,0)
DGRPCE1 ;ALB/MIR/BRM/LBD,BAJ - CONSISTENCY CHECKER EDIT ; 07/18/06
"RTN","DGRPCE1",2,0)
 ;;5.3;Registration;**108,226,470,454,489,505,522,451,632,689,657,688**;Aug 13, 1993;Build 29
"RTN","DGRPCE1",3,0)
 N I,J F I=1:1:8,16,53,57,58,61:1:88 D SASK
"RTN","DGRPCE1",4,0)
 ;F I=49,50,52 D SASK ;BELOW REPLACED WITH ^IBCNSP2 CALL
"RTN","DGRPCE1",5,0)
 ;OLDS DR(2,2.312)="S DGRPADI="""";.01;1;2;15;8;7;3;6;S DGRPADI=X;I DGRPADI'=""v"" S Y=""@2312"";17///^S X=""`""_DFN;16///^S X=""01"";S Y=""@23121"";@2312;17;16//^S X=$S(DGRPADI=""s"":""02"",1:"""");@23121;9:14;"
"RTN","DGRPCE1",6,0)
 Q
"RTN","DGRPCE1",7,0)
SASK I DGER[(","_I_","),DGASK'[(","_I_",") F J=I,I*1000:1 Q:'$T(@J)  S DGD=DGD_$P($T(@J),";;",2,999) D SAVE
"RTN","DGRPCE1",8,0)
 S DGASK=DGASK_I_","
"RTN","DGRPCE1",9,0)
 Q
"RTN","DGRPCE1",10,0)
SAVE I $L(@DGDR)+$L(DGD)<241 S @DGDR=@DGDR_DGD,DGD="" Q
"RTN","DGRPCE1",11,0)
 S DGDRC=DGDRC+1,DGDR="DR(1,2,"_DGDRC_")",@DGDR=DGD,DGD="" Q
"RTN","DGRPCE1",12,0)
 ;
"RTN","DGRPCE1",13,0)
 ;
"RTN","DGRPCE1",14,0)
ELIG ;eligibility code...if M11+, use compiled template, otherwise DR string
"RTN","DGRPCE1",15,0)
 I ^%ZOSF("OS")'["M/11+" S DGD=$P($T(14),";;",2,999) D SAVE Q
"RTN","DGRPCE1",16,0)
 N DA,DIE,DR S DIE="^DPT(",DA=DFN,DR="[DG CONSISTENCY CHECKER]" D ^DIE
"RTN","DGRPCE1",17,0)
 Q
"RTN","DGRPCE1",18,0)
 ;
"RTN","DGRPCE1",19,0)
 ;
"RTN","DGRPCE1",20,0)
1 ;;.01;
"RTN","DGRPCE1",21,0)
2 ;;1;
"RTN","DGRPCE1",22,0)
3 ;;.02;
"RTN","DGRPCE1",23,0)
4 ;;.03;
"RTN","DGRPCE1",24,0)
5 ;;.05;
"RTN","DGRPCE1",25,0)
6 ;;.08;
"RTN","DGRPCE1",26,0)
7 ;;.09;
"RTN","DGRPCE1",27,0)
8 ;;N FLG S FLG(2)=1 S:$G(DGER)[",61," FLG(1)=1 D EN^DGREGAED(DFN,.FLG);
"RTN","DGRPCE1",28,0)
14 ;;.361;S DGECODE=$S($D(^DIC(8,+X,0)):$P(^(0),"^",1),1:"");S:$S(DGECODE["ALLIED":0,DGECODE["FEDERAL":0,1:1) Y=.323;.309;.323;D ^DGYZODS;S:'DGODS Y="@14";11500.02;11500.03;@14;
"RTN","DGRPCE1",29,0)
16 ;;.351;
"RTN","DGRPCE1",30,0)
53 ;;.07;.31115;I $S(X']"":1,X=3:1,X=9:1,1:0) S Y="@53";.3111;S:X']"" Y="@53";.3113;S:X']"" Y=.3116;.3114;S:X']"" Y=.3116;.3115:.3117;.2205;.3119;@53;
"RTN","DGRPCE1",31,0)
57 ;;.381;.382///NOW;
"RTN","DGRPCE1",32,0)
58 ;;.322013;S:X'="Y" Y="@589";.322014;.322015;.32201;S:X'="Y" Y="@581";.322011;.322012;@581;.322016;S:X'="Y" Y="@589";.322017;.322018;@589;
"RTN","DGRPCE1",33,0)
61 ;;S:$G(DGER)[",8," Y="@619";.132;@619;
"RTN","DGRPCE1",34,0)
62 ;;.331;
"RTN","DGRPCE1",35,0)
63 ;;D EN^DGREGTED(DFN,"CONF");
"RTN","DGRPCE1",36,0)
64 ;;.092;.093;
"RTN","DGRPCE1",37,0)
65 ;;.2403;
"RTN","DGRPCE1",38,0)
66 ;;.09;
"RTN","DGRPCE1",39,0)
67 ;;S:$$DGERCK^DGRPCE1("73^79^80^81^82",.DGER) Y="@67";W !!,$C(7),"SERVICE SEPARATION DATE [LAST] must be a precise date to determine CV Elig",!;.325;.32911;.326;.327;@67;
"RTN","DGRPCE1",40,0)
68 ;;S:$$DGERCK^DGRPCE1("39^40",.DGER) Y="@68";W !!,$C(7),"COMBAT TO DATE must be a precise date to determine CV Eligibility",!;.5291;S:X'="Y" Y="@68";.5292;.5293;.5294;@68;
"RTN","DGRPCE1",41,0)
69 ;;S:$$DGERCK^DGRPCE1("74^75^76",.DGER) Y="@69";W !!,$C(7),"YUGOSLAVIA TO DATE must be a precise date to determine CV Eligibility",!;.322019;S:X'="Y" Y="@69";.32202;.322021;@69;
"RTN","DGRPCE1",42,0)
70 ;;S:$$DGERCK^DGRPCE1("74^75^76",.DGER) Y="@70";W !!,$C(7),"SOMALIA TO DATE must be a precise date to determine CV Eligibility",!;.322016;S:X'="Y" Y="@70";.322017;.322018,@70;
"RTN","DGRPCE1",43,0)
71 ;;S:$$DGERCK^DGRPCE1("74^75^76",.DGER) Y="@71";W !!,$C(7),"PERSIAN GULF TO DATE must be a precise date to determine CV Eligibility",!;.32201;S:X'="Y" Y="@71";.322011;.322012;@71;
"RTN","DGRPCE1",44,0)
72 ;;.325;.32911;.326;.327;.324;S:'$$YN^DGRPCE1(.3285) Y="@7201";.3291;.32912;.3292;.3293;.329;@7201;S:'$$YN^DGRPCE1(.32945) Y="@7202";.3296;.32913;.3297;.3298;.3295;@7202;
"RTN","DGRPCE1",45,0)
 ;
"RTN","DGRPCE1",46,0)
73 ;;S:$$DGERCK^DGRPCE1(72,.DGER) Y="@7302";.325;.32911;.326;.327;.324;S:'$$YN^DGRPCE1(.3285) Y="@7301";.3291;.32912;.3292;.3293;.329;@7301;S:'$$YN^DGRPCE1(.32945) Y="@7302";.3296;.32913;.3297;.3298;.3295;@7302;
"RTN","DGRPCE1",47,0)
74 ;;S:'$$YN^DGRPCE1(.32101) Y="@7401";.32101;S:X'="Y" Y="@7401";.32104;.32105;@7401;S:'$$YN^DGRPCE1(.322016) Y="@7402";.322016;S:X'="Y" Y="@7402";.322017;.322018;@7402;
"RTN","DGRPCE1",48,0)
74000 ;;S:'$$YN^DGRPCE1(.322019) Y="@7403";.322019;S:X'="Y" Y="@7403";.32202;.322021;@7403;S:'$$YN^DGRPCE1(.3221) Y="@7404";.3221;S:X'="Y" Y="@7404";.3222;.3223;@7404;
"RTN","DGRPCE1",49,0)
74001 ;;S:'$$YN^DGRPCE1(.3224) Y="@7405";.3224;S:X'="Y" Y="@7405";.3225;.3226;@7405;S:'$$YN^DGRPCE1(.3227) Y="@7406";.3227;S:X'="Y" Y="@7406";.3228;.3229;@7406;
"RTN","DGRPCE1",50,0)
74002 ;;S:'$$YN^DGRPCE1(.32201) Y="@7407";.32201;S:X'="Y" Y="@7407";.322011;.322012;@7407;
"RTN","DGRPCE1",51,0)
75 ;;S:$$DGERCK^DGRPCE1(74,.DGER) Y="@7507";S:'$$YN^DGRPCE1(.32101) Y="@7501";.32101;S:X'="Y" Y="@7501";.32104;.32105;@7501;S:'$$YN^DGRPCE1(.322016) Y="@7502";.322016;S:X'="Y" Y="@7502";.322017;.322018;@7502;
"RTN","DGRPCE1",52,0)
75000 ;;S:'$$YN^DGRPCE1(.322019) Y="@7503";.322019;S:X'="Y" Y="@7503";.32202;.322021;@7503;S:'$$YN^DGRPCE1(.3221) Y="@7504";.3221;S:X'="Y" Y="@7504";.3222;.3223;@7504;
"RTN","DGRPCE1",53,0)
75001 ;;S:'$$YN^DGRPCE1(.3224) Y="@7505";.3224;S:X'="Y" Y="@7505";.3225;.3226;@7505;S:'$$YN^DGRPCE1(.3227) Y="@7506";.3227;S:X'="Y" Y="@7506";.3228;.3229;@7506;
"RTN","DGRPCE1",54,0)
75002 ;;S:'$$YN^DGRPCE1(.32201) Y="@7507";.32201;S:X'="Y" Y="@7507";.322011;.322012;@7507;
"RTN","DGRPCE1",55,0)
76 ;;S:$$DGERCK^DGRPCE1("74^75",.DGER) Y="@7607";S:'$$YN^DGRPCE1(.32101) Y="@7601";.32101;S:X'="Y" Y="@7601";.32104;.32105;@7601;S:'$$YN^DGRPCE1(.322016) Y="@7602";.322016;S:X'="Y" Y="@7602";.322017;.322018;@7602;
"RTN","DGRPCE1",56,0)
76000 ;;S:'$$YN^DGRPCE1(.322019) Y="@7603";.322019;S:X'="Y" Y="@7603";.32202;.322021;@7603;S:'$$YN^DGRPCE1(.3221) Y="@7604";.3221;S:X'="Y" Y="@7604";.3222;.3223;@7604;
"RTN","DGRPCE1",57,0)
76001 ;;S:'$$YN^DGRPCE1(.3224) Y="@7605";.3224;S:X'="Y" Y="@7605";.3225;.3226;@7605;S:'$$YN^DGRPCE1(.3227) Y="@7606";.3227;S:X'="Y" Y="@7606";.3228;.3229;@7606;
"RTN","DGRPCE1",58,0)
76002 ;;S:'$$YN^DGRPCE1(.32201) Y="@7607";.32201;S:X'="Y" Y="@7607";.322011;.322012;@7607;
"RTN","DGRPCE1",59,0)
77 ;;S:(($$DGERCK^DGRPCE1("37^38",.DGER))!('$$YN^DGRPCE1(.525))) Y="@77";.525;S:X'="Y" Y="@77";.526;.527;.528;@77;
"RTN","DGRPCE1",60,0)
78 ;;S:(($$DGERCK^DGRPCE1("39^40^68",.DGER))!('$$YN^DGRPCE1(.5291))) Y="@78";.5291;S:X'="Y" Y="@78";.5292;.5293;.5294;@78;
"RTN","DGRPCE1",61,0)
79 ;;S:$$DGERCK^DGRPCE1("72^73",.DGER) Y="@7902";.325;.32911;.326;.327;.324;S:'$$YN^DGRPCE1(.3285) Y="@7901";.3291;.32912;.3292;.3293;.329;@7901;S:'$$YN^DGRPCE1(.32945) Y="@7902";.3296;.32913;.3297;.3298;.3295;@7902;
"RTN","DGRPCE1",62,0)
80 ;;S:(($$DGERCK^DGRPCE1("37^38^77",.DGER))!('$$YN^DGRPCE1(.525))) Y="@8001";.525;S:X'="Y" Y="@8001";.526;.527;.528;@8001;S:$$DGERCK^DGRPCE1("72^73^79",.DGER) Y="@8003";
"RTN","DGRPCE1",63,0)
80000 ;;.325;.32911;.326;.327;.324;S:'$$YN^DGRPCE1(.3285) Y="@8002";.3291;.32912;.3292;.3293;.329;@8002;S:'$$YN^DGRPCE1(.32945) Y="@8003";.3296;.32913;.3297;.3298;.3295;@8003;
"RTN","DGRPCE1",64,0)
81 ;;S:(($$DGERCK^DGRPCE1("39^40^78",.DGER))!('$$YN^DGRPCE1(.5291))) Y="@8101";.5291;S:X'="Y" Y="@8101";.5292;.5293;.5294;@8101;S:$$DGERCK^DGRPCE1("72^73^79^80",.DGER) Y="@8103";
"RTN","DGRPCE1",65,0)
81000 ;;.325;.32911;.326;.327;.324;S:'$$YN^DGRPCE1(.3285) Y="@8102";.3291;.32912;.3292;.3293;.329;@8102;S:'$$YN^DGRPCE1(.32945) Y="@8103";.3296;.32913;.3297;.3298;.3295;@8103;
"RTN","DGRPCE1",66,0)
82 ;;S:($$DGERCK^DGRPCE1("74^75^76",.DGER)) Y="@8207";S:'$$YN^DGRPCE1(.32101) Y="@8201";.32101;S:X'="Y" Y="@8201";.32104;.32105;@8201;S:'$$YN^DGRPCE1(.322016) Y="@8202";.322016;
"RTN","DGRPCE1",67,0)
82000 ;;S:X'="Y" Y="@8202";.322017;.322018;@8202;S:'$$YN^DGRPCE1(.322019) Y="@8203";.322019;S:X'="Y" Y="@8203";.32202;.322021;@8203;S:'$$YN^DGRPCE1(.3221) Y="@8204";.3221;
"RTN","DGRPCE1",68,0)
82001 ;;S:X'="Y" Y="@8204";.3222;.3223;@8204;S:'$$YN^DGRPCE1(.3224) Y="@8205";.3224;S:X'="Y" Y="@8205";.3225;.3226;@8205;S:'$$YN^DGRPCE1(.3227) Y="@8206";.3227;S:X'="Y" Y="@8206";
"RTN","DGRPCE1",69,0)
82002 ;;.3228;.3229;@8206;S:'$$YN^DGRPCE1(.32201) Y="@8207";.32201;S:X'="Y" Y="@8207";.322011;.322012;@8207;S:($$DGERCK^DGRPCE1("72^73^79^80^81",.DGER)) Y="@8209";
"RTN","DGRPCE1",70,0)
82003 ;;.325;.32911;.326;.327;.324;S:'$$YN^DGRPCE1(.3285) Y="@8208";.3291;.32912;.3292;.3293;.329;@8208;S:'$$YN^DGRPCE1(.32945) Y="@8209";,3296;.32913;.3297;.3298;.3295;@8209;
"RTN","DGRPCE1",71,0)
83 ;;S:$$DGERCK^DGRPCE1(73,.DGER) Y="@83";@8295;D SET32^DGRPE(DA,.DIPA,1);.325;S DIPA("X1")=X S:X']"" Y="@83";S:$$FV^DGRPMS(X)'=1 Y="@8296";.3214;I X']"" W !?4,$C(7),"Proof is required for Filipino Vet." S Y="@8295";
"RTN","DGRPCE1",72,0)
83000 ;;@8296;D:DIPA("X1")'="" WARN32^DGRPE(DIPA("X1"),.DIPA,1,.Y) S:$E(Y,1,4)="@601" Y=.326;.32911;.326;.327;
"RTN","DGRPCE1",73,0)
83001 ;;.3285//NO;S:X'="Y" Y="@83";D SET32^DGRPE(DA,.DIPA,2);.3291;S DIPA("X2")=X S:X']"" Y="@83";S:$$FV^DGRPMS(X)'=1 Y="@832";.3214;I X']"" W !?4,$C(7),"Proof is required for Filipino Vet." S Y=".3291";S Y=.3292;
"RTN","DGRPCE1",74,0)
83002 ;;@832;D:DIPA("X2")'="" WARN32^DGRPE(DIPA("X2"),.DIPA,2,.Y) S:$E(Y,1,4)="@601" Y=.3292;.32912;.3292;.3293;
"RTN","DGRPCE1",75,0)
83003 ;;.32945//NO;S:X'="Y" Y="@83";D SET32^DGRPE(DA,.DIPA,3);.3296;S DIPA("X3")=X S:X']"" Y="@83";S:$$FV^DGRPMS(X)'=1 Y="@833";.3214;I X']"" W !?4,$C(7),"Proof is required for Filipino Vet." S Y=".3296";S Y=.3297;@833;
"RTN","DGRPCE1",76,0)
83004 ;;D:DIPA("X3")'="" WARN32^DGRPE(DIPA("X3"),.DIPA,3,.Y) S:$E(Y,1,4)="@601" Y=.3297;.32913;.3297;.3298;@83;
"RTN","DGRPCE1",77,0)
84 ;;.3214;
"RTN","DGRPCE1",78,0)
85 ;;1901;
"RTN","DGRPCE1",79,0)
86 ;;1901;
"RTN","DGRPCE1",80,0)
87 ;;D VETTYPE^DGRPE1;D MSG^DGRPE1 S Y=0;@114;K DGRDCHG;D DR^DGRPE1;.302;.3721;D EFF^DGRPE1;D:$G(DGRDCHG) BULL^DGRPE1;K DGRDCHG
"RTN","DGRPCE1",81,0)
88 ;;D EN^DGREGTED(DFN,"TEMP");
"RTN","DGRPCE1",82,0)
 ;
"RTN","DGRPCE1",83,0)
YN(FLD,DFN,FILE) ; return binary for YES/NO flds in the Patient (#2) file
"RTN","DGRPCE1",84,0)
 N RTN
"RTN","DGRPCE1",85,0)
 Q:$G(FLD)']"" ""
"RTN","DGRPCE1",86,0)
 S:$G(FILE)="" FILE=2 S:$G(DFN)="" DFN=$G(DA) Q:$G(DFN)']"" ""
"RTN","DGRPCE1",87,0)
 S RTN=$$GET1^DIQ(FILE,DFN_",",FLD,"I")
"RTN","DGRPCE1",88,0)
 Q $S(RTN=1:1,RTN=0:0,RTN="Y":1,RTN="N":0,1:"")
"RTN","DGRPCE1",89,0)
 ;
"RTN","DGRPCE1",90,0)
DGERCK(STR,DGER) ;do any of the STR errors exist in DGER?
"RTN","DGRPCE1",91,0)
 N RTN,X
"RTN","DGRPCE1",92,0)
 Q:$G(STR)']"" 0  Q:$G(DGER)']"" 0
"RTN","DGRPCE1",93,0)
 S RTN=0 F X=1:1 Q:RTN!($P(STR,"^",X)="")  I DGER[(","_$P(STR,"^",X)_",") S RTN=1
"RTN","DGRPCE1",94,0)
 Q RTN
"RTN","DGRPD")
0^50^B62562309
"RTN","DGRPD",1,0)
DGRPD ;ALB/MRL/MLR/JAN/LBD/EG/BRM/JRC/BAJ-PATIENT INQUIRY (NEW) ; 05/03/06
"RTN","DGRPD",2,0)
 ;;5.3;Registration;**109,124,121,57,161,149,286,358,436,445,489,498,506,513,518,550,545,568,585,677,703,688**;Aug 13, 1993;Build 29
"RTN","DGRPD",3,0)
 ;  *286*  Newing variables X,Y in OKLINE subroutine
"RTN","DGRPD",4,0)
 ;  *358*  If a patient is on a domiciliary ward, don't display MEANS
"RTN","DGRPD",5,0)
 ;         TEST required/Medication Copayment Exemption messages
"RTN","DGRPD",6,0)
 ;  *436*  If an inpatient is not on a domiciliary ward, don't display
"RTN","DGRPD",7,0)
 ;         Medication Copayment Exemption message
"RTN","DGRPD",8,0)
 ;  *545*  Add death information near the remarks field
"RTN","DGRPD",9,0)
 ;  *677*  Added Emergency Response
"RTN","DGRPD",10,0)
 ;  *688*  Modified to display Country and Foreign Address
"RTN","DGRPD",11,0)
SEL K DFN,DGRPOUT W ! S DIC="^DPT(",DIC(0)="AEQMZ" D ^DIC G Q:Y'>0 S DFN=+Y N Y W ! S DIR(0)="E" D ^DIR G SEL:$D(DTOUT)!($D(DUOUT)) D EN G SEL
"RTN","DGRPD",12,0)
EN ;call to display patient inquiry - input DFN
"RTN","DGRPD",13,0)
 ;MPI/PD CHANGE
"RTN","DGRPD",14,0)
 S DGCMOR="UNSPECIFIED",DGMPI=$G(^DPT(+DFN,"MPI"))
"RTN","DGRPD",15,0)
 S DGLOCATN=$$FIND1^DIC(4,"","MX","`"_+$P(DGMPI,U,3)),DGLOCATN=$S(+DGLOCATN>0:$P($$NS^XUAF4(DGLOCATN),U),1:"NOT LISTED")
"RTN","DGRPD",16,0)
 I $D(DGMPI),$D(DGLOCATN) S DGCMOR=$P(DGLOCATN,"^")
"RTN","DGRPD",17,0)
 ;END MPI/PD CHANGE
"RTN","DGRPD",18,0)
 K DGRPOUT,DGHOW S DGABBRV=$S($D(^DG(43,1,0)):+$P(^(0),"^",38),1:0),DGRPU="UNSPECIFIED" D DEM^VADPT,HDR^DGRPD1 F I=0,.11,.13,.121,.122,.31,.32,.36,.361,.141,.3 S DGRP(I)=$S($D(^DPT(DFN,I)):^(I),1:"")
"RTN","DGRPD",19,0)
 S DGAD=.11,(DGA1,DGA2)=1 D A^DGRPU S DGTMPAD=0 I $P(DGRP(.121),"^",9)="Y" S DGTMPAD=$S('$P(DGRP(.121),"^",8):1,$P(DGRP(.121),"^",8)'<DT:1,1:0) I DGTMPAD S DGAD=.121,DGA1=1,DGA2=2 D A^DGRPU
"RTN","DGRPD",20,0)
 W ?1,"Address: ",$S($D(DGA(1)):DGA(1),1:"NONE ON FILE"),?40,"Temporary: ",$S($D(DGA(2)):DGA(2),1:"NO TEMPORARY ADDRESS")
"RTN","DGRPD",21,0)
 S I=2 F I1=0:0 S I=$O(DGA(I)) Q:I=""  W:(I#2)!($X>50) !?9 W:'(I#2) ?48 W DGA(I)
"RTN","DGRPD",22,0)
 S DGCC=+$P(DGRP(.11),U,7),DGST=+$P(DGRP(.11),U,5),DGCC=$S($D(^DIC(5,DGST,1,DGCC,0)):$E($P(^(0),U,1),1,20)_$S($P(^(0),U,3)]"":" ("_$P(^(0),U,3)_")",1:""),1:DGRPU)
"RTN","DGRPD",23,0)
 N DGCNTRY,DGFORGN S DGCNTRY=$P(DGRP(.11),"^",10),DGFORGN=$$FORIEN^DGADDUTL(DGCNTRY) I 'DGFORGN W !?2,"County: ",DGCC
"RTN","DGRPD",24,0)
 S X="NOT APPLICABLE" I DGTMPAD S Y=$P(DGRP(.121),U,7) X:Y]"" ^DD("DD") S X=$S(Y]"":Y,1:DGRPU)_"-",Y=$P(DGRP(.121),U,8) X:Y]"" ^DD("DD") S X=X_$S(Y]"":Y,1:DGRPU)
"RTN","DGRPD",25,0)
 N DGSKIP S DGSKIP=$S(DGFORGN:"!,?42,""From/To: """,1:"?42, ""From/To: """)
"RTN","DGRPD",26,0)
 W @DGSKIP,X,!?3,"Phone: ",$S($P(DGRP(.13),U,1)]"":$P(DGRP(.13),U,1),1:DGRPU),?44,"Phone: ",$S('DGTMPAD:X,$P(DGRP(.121),U,10)]"":$P(DGRP(.121),U,10),1:DGRPU) K DGTMPADW
"RTN","DGRPD",27,0)
 W !?2,"Office: ",$S($P(DGRP(.13),U,2)]"":$P(DGRP(.13),U,2),1:DGRPU)
"RTN","DGRPD",28,0)
 W !?4,"Cell: ",$S($P(DGRP(.13),U,4)]"":$P(DGRP(.13),U,4),1:DGRPU)
"RTN","DGRPD",29,0)
 W !?2,"E-mail: ",$S($P(DGRP(.13),U,3)]"":$P(DGRP(.13),U,3),1:DGRPU)
"RTN","DGRPD",30,0)
 W !,"Bad Addr: ",$$EXTERNAL^DILFD(2,.121,"",$$BADADR^DGUTL3(+DFN))
"RTN","DGRPD",31,0)
 D CA
"RTN","DGRPD",32,0)
 N DGEMER S DGEMER=$$EXTERNAL^DILFD(2,.181,"",$P($G(^DPT(DFN,.18)),"^"))
"RTN","DGRPD",33,0)
 W:DGEMER]"" !?32,"Emergency Response: ",DGEMER
"RTN","DGRPD",34,0)
 I 'DGABBRV W !!?4,"POS: ",$S($D(^DIC(21,+$P(DGRP(.32),"^",3),0)):$P(^(0),"^",1),1:DGRPU),?42,"Claim #: ",$S($P(DGRP(.31),"^",3)]"":$P(DGRP(.31),"^",3),1:"UNSPECIFIED")
"RTN","DGRPD",35,0)
 I 'DGABBRV W !?2,"Relig: ",$S($D(^DIC(13,+$P(DGRP(0),"^",8),0)):$P(^(0),"^",1),1:DGRPU),?46,"Sex: ",$S($P(VADM(5),"^",2)]"":$P(VADM(5),"^",2),1:"UNSPECIFIED")
"RTN","DGRPD",36,0)
 I 'DGABBRV W ! D
"RTN","DGRPD",37,0)
 .N RACE,ETHNIC,PTR,VAL,X,DIWL,DIWR,DIWF
"RTN","DGRPD",38,0)
 .K ^UTILITY($J,"W")
"RTN","DGRPD",39,0)
 .S PTR=0 F  S PTR=+$O(^DPT(DFN,.02,PTR)) Q:'PTR  D
"RTN","DGRPD",40,0)
 ..S VAL=+$G(^DPT(DFN,.02,PTR,0))
"RTN","DGRPD",41,0)
 ..Q:$$INACTIVE^DGUTL4(VAL,1)
"RTN","DGRPD",42,0)
 ..S VAL=$$PTR2TEXT^DGUTL4(VAL,1) S:+$O(^DPT(DFN,.02,PTR)) VAL=VAL_", "
"RTN","DGRPD",43,0)
 ..S X=VAL,DIWL=0,DIWR=30,DIWF="" D ^DIWP
"RTN","DGRPD",44,0)
 .M RACE=^UTILITY($J,"W",0) S:$G(RACE(1,0))="" RACE(1,0)="UNANSWERED"
"RTN","DGRPD",45,0)
 .K ^UTILITY($J,"W")
"RTN","DGRPD",46,0)
 .S PTR=0 F  S PTR=+$O(^DPT(DFN,.06,PTR)) Q:'PTR  D
"RTN","DGRPD",47,0)
 ..S VAL=+$G(^DPT(DFN,.06,PTR,0))
"RTN","DGRPD",48,0)
 ..Q:$$INACTIVE^DGUTL4(VAL,2)
"RTN","DGRPD",49,0)
 ..S VAL=$$PTR2TEXT^DGUTL4(VAL,2) S:+$O(^DPT(DFN,.06,PTR)) VAL=VAL_", "
"RTN","DGRPD",50,0)
 ..S X=VAL,DIWL=0,DIWR=30,DIWF="" D ^DIWP
"RTN","DGRPD",51,0)
 .M ETHNIC=^UTILITY($J,"W",0) S:$G(ETHNIC(1,0))="" ETHNIC(1,0)="UNANSWERED"
"RTN","DGRPD",52,0)
 .K ^UTILITY($J,"W")
"RTN","DGRPD",53,0)
 .W ?3,"Race: ",RACE(1,0),?40,"Ethnicity: ",ETHNIC(1,0)
"RTN","DGRPD",54,0)
 .F X=2:1 Q:'$D(RACE(X,0))&'$D(ETHNIC(X,0))  W !,?9,$G(RACE(X,0)),?51,$G(ETHNIC(X,0))
"RTN","DGRPD",55,0)
 I '$$OKLINE^DGRPD1(16) G Q
"RTN","DGRPD",56,0)
 ;display cv status #4156
"RTN","DGRPD",57,0)
 N DGCV S DGCV=$$CVEDT^DGCV(+DFN)
"RTN","DGRPD",58,0)
 W !!,?2,"Combat Vet Status: "_$S($P(DGCV,U,3)=1:"ELIGIBLE",$P(DGCV,U,3)="":"NOT ELIGIBLE",1:"EXPIRED") I DGCV>0 W ?45,"End Date: "_$$FMTE^XLFDT($P(DGCV,U,2),"5DZ")
"RTN","DGRPD",59,0)
 ;display primary eligibility
"RTN","DGRPD",60,0)
 S X1=DGRP(.36),X=$P(DGRP(.361),"^",1) W !,"Primary Eligibility: ",$S($D(^DIC(8,+X1,0)):$P(^(0),"^",1)_" ("_$S(X="V":"VERIFIED",X="P":"PENDING VERIFICATION",X="R":"PENDING REVERIFICATION",1:"NOT VERIFIED")_")",1:DGRPU)
"RTN","DGRPD",61,0)
 W !,"Other Eligibilities: " F I=0:0 S I=$O(^DIC(8,I)) Q:'I  I $D(^DIC(8,I,0)),I'=+X1 S X=$P(^(0),"^",1)_", " I $D(^DPT("AEL",DFN,I)) W:$X+$L(X)>79 !?21 W X
"RTN","DGRPD",62,0)
 I '$$OKLINE^DGRPD1(16) G Q
"RTN","DGRPD",63,0)
 ;employability status
"RTN","DGRPD",64,0)
 W !?6,"Unemployable: ",$S($P(DGRP(.3),U,5)="Y":"YES",1:"NO")
"RTN","DGRPD",65,0)
 ;display the catastrophic disability review date if there is one
"RTN","DGRPD",66,0)
 D CATDIS^DGRPD1
"RTN","DGRPD",67,0)
 I $G(DGPRFLG)=1 G Q:'$$OKLINE^DGRPD1(19) D
"RTN","DGRPD",68,0)
 . N DGPDT,DGPTM
"RTN","DGRPD",69,0)
 . W !,$$REPEAT^XLFSTR("-",78)
"RTN","DGRPD",70,0)
 . S DGPDT="",DGPDT=$O(^DGS(41.41,"ADC",DFN,DGPDT),-1)
"RTN","DGRPD",71,0)
 . W !,"[PRE-REGISTER DATE:]  "_$S(DGPDT]"":$$FMTE^XLFDT(DGPDT,"1D"),1:"NONE ON FILE")
"RTN","DGRPD",72,0)
 . S DGPTM=$$PCTEAM^DGSDUTL(DFN)
"RTN","DGRPD",73,0)
 . I $P(DGPTM,U,2)]"" W !,"[PRIMARY CARE TEAM:] "_$P(DGPTM,U,2)
"RTN","DGRPD",74,0)
 . W !,$$REPEAT^XLFSTR("-",78)
"RTN","DGRPD",75,0)
 ; Check if patient is an inpatient and on a DOM ward
"RTN","DGRPD",76,0)
 ; If inpatient is on a DOM ward, don't display MT or CP messages
"RTN","DGRPD",77,0)
 ; If inpatient is NOT on a DOM ward, don't display CP message
"RTN","DGRPD",78,0)
 N DGDOM,DGDOM1,VAHOW,VAROOT,VAINDT,VAIP,VAERR
"RTN","DGRPD",79,0)
 G Q:'$$OKLINE^DGRPD1(14)
"RTN","DGRPD",80,0)
 D DOM^DGMTR
"RTN","DGRPD",81,0)
 I '$G(DGDOM) D
"RTN","DGRPD",82,0)
 .D DIS^DGMTU(DFN)
"RTN","DGRPD",83,0)
 .D IN5^VADPT
"RTN","DGRPD",84,0)
 .I $G(VAIP(1))="" D DISP^IBARXEU(DFN,DT,3,1)
"RTN","DGRPD",85,0)
 ;I 'DGABBRV,$E(IOST,1,2)="C-" F I=$Y:1:20 W !
"RTN","DGRPD",86,0)
 D DIS^EASECU(DFN)   ;Added for LTC III (DG*5.3*518)
"RTN","DGRPD",87,0)
 S VAIP("L")=""
"RTN","DGRPD",88,0)
 I $$OKLINE^DGRPD1(14) D INP
"RTN","DGRPD",89,0)
 I '$G(DGRPOUT),($$OKLINE^DGRPD1(17)) D SA
"RTN","DGRPD",90,0)
 ;MPI/PD CHANGE
"RTN","DGRPD",91,0)
Q D KVA^VADPT K %DT,D0,D1,DGA,DGA1,DGA2,DGABBRV,DGAD,DGCC,DGCMOR,DGDOM,DGLOCATN,DGMPI,DGRP,DGRPU,DGS,DGST,DGXFR0,DIC,DIR,DTOUT,DUOUT,DIRUT,DIROUT,I,I1,L,LDM,POP,SDCT,VA,X,X1,Y Q
"RTN","DGRPD",92,0)
CA ;Confidential Address
"RTN","DGRPD",93,0)
 W !!?1,"Confidential Address:  ",?44,"Confidential Address Categories:"
"RTN","DGRPD",94,0)
 N DGCABEG,DGCAEND,DGA,DGARRAY,DGERROR
"RTN","DGRPD",95,0)
 S DGCABEG=$P(DGRP(.141),U,7),DGCAEND=$P(DGRP(.141),U,8)
"RTN","DGRPD",96,0)
 I 'DGCABEG!(DGCABEG>DT)!(DGCAEND&(DGCAEND<DT)) D  Q
"RTN","DGRPD",97,0)
 .W !?9,"NO CONFIDENTIAL ADDRESS"
"RTN","DGRPD",98,0)
 .W !?1,"From/To: NOT APPLICABLE"
"RTN","DGRPD",99,0)
 S DGAD=.141,(DGA1,DGA2)=1
"RTN","DGRPD",100,0)
 D AL^DGRPU(30)
"RTN","DGRPD",101,0)
 D GETS^DIQ(2,DFN,".141*,","E","DGARRAY","DGERROR")
"RTN","DGRPD",102,0)
 ;Format Confidential Address categories
"RTN","DGRPD",103,0)
 N DGIEN,DGCAST
"RTN","DGRPD",104,0)
 S DGIEN=0
"RTN","DGRPD",105,0)
 S DGA2=2
"RTN","DGRPD",106,0)
 F  S DGIEN=$O(DGARRAY(2.141,DGIEN)) Q:'DGIEN  D
"RTN","DGRPD",107,0)
 .S DGA(DGA2)=DGARRAY(2.141,DGIEN,.01,"E")
"RTN","DGRPD",108,0)
 .S DGCAST=DGARRAY(2.141,DGIEN,1,"E")
"RTN","DGRPD",109,0)
 .S DGA(DGA2)=DGA(DGA2)_"("_$S(DGCAST="YES":"Active",1:"Inactive")_")"
"RTN","DGRPD",110,0)
 .S DGA2=DGA2+2
"RTN","DGRPD",111,0)
 S I=0 F I1=0:0 S I=$O(DGA(I)) Q:I=""  W:(I#2)!($X>43) !?9 W:'(I#2) ?44 W DGA(I)
"RTN","DGRPD",112,0)
 W !?1,"From/To:  ",$$FMTE^XLFDT(DGCABEG)_"-"_$S(DGCAEND'="":$$FMTE^XLFDT(DGCAEND),1:"UNANSWERED")
"RTN","DGRPD",113,0)
 Q
"RTN","DGRPD",114,0)
INP S VAIP("D")="L" D INP^DGPMV10
"RTN","DGRPD",115,0)
 S DGPMT=0
"RTN","DGRPD",116,0)
 D CS^DGPMV10 K DGPMT,DGPMIFN K:'$D(DGSWITCH) DGPMVI,DGPMDCD Q
"RTN","DGRPD",117,0)
SA F I=0:0 S I=$O(^DGS(41.1,"B",DFN,I)) G CL:'I S X=^DGS(41.1,I,0) I $P(X,"^",2)>(DT-1),$P(X,"^",13)']"",'$P(X,"^",17) S L=$P(X,"^",2) D:$$OKLINE^DGRPD1(17) SAA Q:$G(DGRPOUT)
"RTN","DGRPD",118,0)
 Q
"RTN","DGRPD",119,0)
SAA ;Scheduled Admit Data
"RTN","DGRPD",120,0)
 W !!?14,"Scheduled Admit"
"RTN","DGRPD",121,0)
 W:$D(^DIC(42,+$P(X,U,8),0)) " on ward "_$P(^(0),U)
"RTN","DGRPD",122,0)
 W:$D(^DIC(45.7,+$P(X,U,9),0)) " for treating specialty "_$P(^(0),U)
"RTN","DGRPD",123,0)
 W " on "_$$FMTE^XLFDT(L,"5DZ")
"RTN","DGRPD",124,0)
 Q  ;SAA
"RTN","DGRPD",125,0)
 ;
"RTN","DGRPD",126,0)
CL G FA:$O(^DPT(DFN,"DE",0))="" S SDCT=0 F I=0:0 S I=$O(^DPT(DFN,"DE",I)) Q:'I  I $D(^(I,0)),$P(^(0),"^",2)'="I",$O(^(0)) S SDCT=SDCT+1 W:SDCT=1 !!,"Currently enrolled in " W:$X>50 !?22 W $S($D(^SC(+^(0),0)):$P(^(0),"^",1)_", ",1:"")
"RTN","DGRPD",127,0)
 ;
"RTN","DGRPD",128,0)
FA G:'$$OKLINE^DGRPD1(20) RMK
"RTN","DGRPD",129,0)
 ;
"RTN","DGRPD",130,0)
 N DGARRAY,SDCNT
"RTN","DGRPD",131,0)
 S DGARRAY("FLDS")="1;2;3;18",DGARRAY(4)=DFN,DGARRAY(1)=DT,DGARRAY("SORT")="P"
"RTN","DGRPD",132,0)
 S SDCNT=$$SDAPI^SDAMA301(.DGARRAY),CT=0 W !!,"Future Appointments: "
"RTN","DGRPD",133,0)
 ;if there is lower subscripts hanging from the 101 node,
"RTN","DGRPD",134,0)
 ;then it is a valid appointment, otherwise it is
"RTN","DGRPD",135,0)
 ;an error eg 01/20/2005
"RTN","DGRPD",136,0)
 I $D(^TMP($J,"SDAMA301",101))=1 W "Appointment Database is Unavailable" G RMK
"RTN","DGRPD",137,0)
 I $O(^TMP($J,"SDAMA301",DFN,DT))'>0 W "NONE" G RMK
"RTN","DGRPD",138,0)
 ;
"RTN","DGRPD",139,0)
 W ?22,"Date",?33,"Time",?39,"Clinic",!?22 F I=22:1:75 W "="
"RTN","DGRPD",140,0)
 F FA=DT:0 S FA=$O(^TMP($J,"SDAMA301",DFN,FA)) G RMK:'FA D  Q:CT>5
"RTN","DGRPD",141,0)
 .N STAT S STAT=$P($P(^TMP($J,"SDAMA301",DFN,FA),U,3),";")
"RTN","DGRPD",142,0)
 .S C=+$P(^TMP($J,"SDAMA301",DFN,FA),U,2) I STAT'["C" D
"RTN","DGRPD",143,0)
 ..D COV
"RTN","DGRPD",144,0)
 ..N DGAPPT S DGAPPT=$$FMTE^XLFDT($E(FA,1,12),"5Z")
"RTN","DGRPD",145,0)
 ..W !?22,$P(DGAPPT,"@"),?33,$P(DGAPPT,"@",2)
"RTN","DGRPD",146,0)
 ..W ?39,$P($P(^TMP($J,"SDAMA301",DFN,FA),U,2),";",2)," ",COV
"RTN","DGRPD",147,0)
 ..Q
"RTN","DGRPD",148,0)
 I $O(^TMP($J,"SDAMA301",DFN,FA))>0 W !,"See Scheduling options for additional appointments."
"RTN","DGRPD",149,0)
RMK I '$G(DGRPOUT),($$OKLINE^DGRPD1(21)) W !!,"Remarks: ",$P(^DPT(DFN,0),"^",10)
"RTN","DGRPD",150,0)
 D GETS^DIQ(2,DFN_",",".351;.353;.354;.355","E","PDTHINFO")
"RTN","DGRPD",151,0)
 W !!
"RTN","DGRPD",152,0)
 W "Date of Death Information"
"RTN","DGRPD",153,0)
 W !,?5,"Date of Death: ",$G(PDTHINFO(2,DFN_",",.351,"E"))
"RTN","DGRPD",154,0)
 W !,?5,"Source of Notification: ",$G(PDTHINFO(2,DFN_",",.353,"E"))
"RTN","DGRPD",155,0)
 W !,?5,"Updated Date/Time: ",$G(PDTHINFO(2,DFN_",",.354,"E"))
"RTN","DGRPD",156,0)
 W !,?5,"Last Edited By: ",$G(PDTHINFO(2,DFN_",",.355,"E")),!
"RTN","DGRPD",157,0)
 I $$OKLINE^DGRPD1(14) D EC^DGRPD1
"RTN","DGRPD",158,0)
 K DGARRAY,SDCNT,^TMP($J,"SDAMA301"),ADM,L,TRN,DIS,SSN,FA,C,COV,NOW,CT,DGD,DGD1,I ;Y killed after dghinqky
"RTN","DGRPD",159,0)
 Q
"RTN","DGRPD",160,0)
COV S COV=$S(+$P(^TMP($J,"SDAMA301",DFN,FA),U,18)=7:" (Collateral) ",1:"")
"RTN","DGRPD",161,0)
 S COV=COV_$S(STAT["NT":" * NO ACTION TAKEN *",STAT["N":" * NO-SHOW *",1:""),CT=CT+1 Q
"RTN","DGRPD",162,0)
 Q
"RTN","DGRPD",163,0)
 ;
"RTN","DGRPD",164,0)
OREN S XQORQUIT=1 Q:'$D(ORVP)  S DFN=+ORVP D EN R !!,"Press RETURN to CONTINUE: ",X:DTIME
"RTN","DGRPD",165,0)
 Q
"RTN","DGRPD1")
0^99^B8127087
"RTN","DGRPD1",1,0)
DGRPD1 ;BPFO/JRC/BAJ - PATIENT INQUIRY (NEW) ; 8/15/08 11:35am
"RTN","DGRPD1",2,0)
 ;;5.3;Registration;**703,730,688**;Aug 13, 1993;Build 29
"RTN","DGRPD1",3,0)
 ; DG*5.3*688 BAJ
"RTN","DGRPD1",4,0)
 ; tags HDR & OKLINE moved as is from DGRPD for size considerations
"RTN","DGRPD1",5,0)
 Q
"RTN","DGRPD1",6,0)
EC ;display emergency contact information
"RTN","DGRPD1",7,0)
 N DGEC1,DGEC2
"RTN","DGRPD1",8,0)
 Q:'$G(DFN)
"RTN","DGRPD1",9,0)
 S VAOA("A")=1,VAROOT="DGEC1"  D OAD^VADPT ; Get Primary EC
"RTN","DGRPD1",10,0)
 S VAOA("A")=4,VAROOT="DGEC2"  D OAD^VADPT ; Get Secondary EC
"RTN","DGRPD1",11,0)
 I DGEC1(9)]"" D
"RTN","DGRPD1",12,0)
 . W !,"Emergency Contact Information:"
"RTN","DGRPD1",13,0)
 . ;Contacts name and realtionship
"RTN","DGRPD1",14,0)
 . W !?5,"E-Cont.: ",DGEC1(9)
"RTN","DGRPD1",15,0)
 . I DGEC2(9)]"" W ?40,"E2-Cont.: ",DGEC2(9)
"RTN","DGRPD1",16,0)
 . W !,"Relationship: ",DGEC1(10)
"RTN","DGRPD1",17,0)
 . I DGEC2(9)]"" W ?36,"Relationship: ",DGEC2(10)
"RTN","DGRPD1",18,0)
 . ;ECs address lines 1, 2 and 3
"RTN","DGRPD1",19,0)
 . I DGEC1(1)]"" W !?14,DGEC1(1)
"RTN","DGRPD1",20,0)
 . I DGEC1(1)']"",DGEC2(1)]"" W !
"RTN","DGRPD1",21,0)
 . I DGEC2(1)]"" W ?50,DGEC2(1)
"RTN","DGRPD1",22,0)
 . I DGEC1(2)]"" W !?14,DGEC1(2)
"RTN","DGRPD1",23,0)
 . I DGEC1(2)']"",DGEC2(2)]"" W !
"RTN","DGRPD1",24,0)
 . I DGEC2(2)]"" W ?50,DGEC2(2)
"RTN","DGRPD1",25,0)
 . I DGEC1(3)]"" W !?14,DGEC1(3)
"RTN","DGRPD1",26,0)
 . I DGEC1(3)']"",DGEC2(3)]"" W !
"RTN","DGRPD1",27,0)
 . I DGEC2(3)]"" W ?50,DGEC2(3)
"RTN","DGRPD1",28,0)
 . ;Emergency Contact 1 City, State an Zip+4
"RTN","DGRPD1",29,0)
 . I DGEC1(4)]"" D
"RTN","DGRPD1",30,0)
 . . W !?14,DGEC1(4)
"RTN","DGRPD1",31,0)
 . . I DGEC1(5)]"" W ", "_$$GET1^DIQ(5,+DGEC1(5),1)
"RTN","DGRPD1",32,0)
 . . W "  ",$P(DGEC1(11),"^",2)
"RTN","DGRPD1",33,0)
 . ;Emergency Contact 2 City State and Zip+4
"RTN","DGRPD1",34,0)
 . I DGEC2(4)]"" D
"RTN","DGRPD1",35,0)
 . . I DGEC1(4)']"" W !
"RTN","DGRPD1",36,0)
 . . W ?50,DGEC2(4)
"RTN","DGRPD1",37,0)
 . . I DGEC2(5)]"" W ", "_$$GET1^DIQ(5,+DGEC2(5),1)
"RTN","DGRPD1",38,0)
 . . W "  ",$P(DGEC2(11),"^",2)
"RTN","DGRPD1",39,0)
 .;Home and work phones
"RTN","DGRPD1",40,0)
 . W !,?7,"Phone: ",$S(DGEC1(8)]"":DGEC1(8),1:"UNSPECIFIED")
"RTN","DGRPD1",41,0)
 . I DGEC2(9)]"" W ?43,"Phone: ",$S(DGEC2(8)]"":DGEC2(8),1:"UNSPECIFIED")
"RTN","DGRPD1",42,0)
 . W !?2,"Work Phone: ",$S($P(^DPT(DFN,.33),U,11)]"":$P(^DPT(DFN,.33),U,11),1:"UNSPECIFIED")
"RTN","DGRPD1",43,0)
 . I DGEC2(9)]"" W ?38,"Work Phone: ",$S($P(^DPT(DFN,.331),U,11)]"":$P(^DPT(DFN,.331),U,11),1:"UNSPECIFIED")
"RTN","DGRPD1",44,0)
 D KVAR^VADPT
"RTN","DGRPD1",45,0)
 Q
"RTN","DGRPD1",46,0)
 ;
"RTN","DGRPD1",47,0)
CATDIS ;
"RTN","DGRPD1",48,0)
 ;displays catastrophic disabity review date if there is one
"RTN","DGRPD1",49,0)
 N DGCDIS
"RTN","DGRPD1",50,0)
 Q:'$G(DFN)
"RTN","DGRPD1",51,0)
 I $$GET^DGENCDA(DFN,.DGCDIS) D
"RTN","DGRPD1",52,0)
 .Q:'DGCDIS("REVDTE")
"RTN","DGRPD1",53,0)
 .W !!,"Catastrophically Disabled Review Date: ",$$FMTE^XLFDT(DGCDIS("REVDTE"),1)
"RTN","DGRPD1",54,0)
 Q
"RTN","DGRPD1",55,0)
HDR I '$D(IOF) S IOP="HOME" D ^%ZIS K IOP
"RTN","DGRPD1",56,0)
 ;MPI/PD CHANGE
"RTN","DGRPD1",57,0)
 W @IOF,!,$P(VADM(1),"^",1),?40,$P(VADM(2),"^",2),?65,$P(VADM(3),"^",2) S X="",$P(X,"=",78)="" W !,X,!?15,"COORDINATING MASTER OF RECORD: ",DGCMOR,! Q
"RTN","DGRPD1",58,0)
 ;END MPI/PD CHANGE
"RTN","DGRPD1",59,0)
OKLINE(DGLINE) ;DOES PAUSE/HEADER IF $Y EXCEEDS DGLINE
"RTN","DGRPD1",60,0)
 ;
"RTN","DGRPD1",61,0)
 ;IN:   DGLINE --MAX LINE COUNT W/O PAUSE
"RTN","DGRPD1",62,0)
 ;OUT:  DGLINE[RETURNED] -- 0 IF TIMEOUT/UP ARROW
"RTN","DGRPD1",63,0)
 ;      DGRPOUT[SET]     -- 1 IF "
"RTN","DGRPD1",64,0)
 N X,Y  ;**286** MLR 09/25/00  Newing X & Y variables prior to ^DIR
"RTN","DGRPD1",65,0)
 I $G(IOST)["P-" Q DGLINE ; if printer, quit
"RTN","DGRPD1",66,0)
 I $Y>DGLINE N DIR S DIR(0)="E" D ^DIR D:Y HDR I 'Y S DGRPOUT=1,DGLINE=0
"RTN","DGRPD1",67,0)
 Q DGLINE
"RTN","DGRPD1",68,0)
 ;
"RTN","DGRPE")
0^43^B60707997
"RTN","DGRPE",1,0)
DGRPE ;ALB/MRL,LBD,BRM,TMK,BAJ - REGISTRATIONS EDITS ; 09/12/05 1:27pm
"RTN","DGRPE",2,0)
 ;;5.3;Registration;**32,114,139,169,175,247,190,343,397,342,454,415,489,506,244,547,522,528,555,508,451,626,638,624,677,672,702,689,735,688**;Aug 13, 1993;Build 29
"RTN","DGRPE",3,0)
 ;
"RTN","DGRPE",4,0)
 ;DGDR contains a string of edits; edit=screen*10+item #
"RTN","DGRPE",5,0)
 ;
"RTN","DGRPE",6,0)
 ;line tag screen*10+item*1000 = continuation line
"RTN","DGRPE",7,0)
 ;
"RTN","DGRPE",8,0)
 I DGRPS=1,DGDR["101," D CEDITS^DGRPECE(DFN)
"RTN","DGRPE",9,0)
 I DGRPS=8 D ^DGRPEIS,Q Q  ; family demographic edit...not conventional!!  :)
"RTN","DGRPE",10,0)
 I DGRPS=9 D EDIT9^DGRPEIS2,Q Q  ; income screening data ($$$)
"RTN","DGRPE",11,0)
 I DGRPS=5,DGDR["501," D
"RTN","DGRPE",12,0)
 .I $G(DGPRFLG) D PREG^IBCNBME(DFN) Q
"RTN","DGRPE",13,0)
 .D REG^IBCNBME(DFN)
"RTN","DGRPE",14,0)
 .Q
"RTN","DGRPE",15,0)
 N QUIT S QUIT=0
"RTN","DGRPE",16,0)
 I DGRPS=6,$S(DGDR["602,"!(DGDR["603,"):1,1:0) D  I QUIT D Q Q  ;Screen 6 subscreens
"RTN","DGRPE",17,0)
 . I DGDR["601," D  Q:QUIT
"RTN","DGRPE",18,0)
 .. D SETDR("601,",.DR)
"RTN","DGRPE",19,0)
 .. S (DA,Y)=DFN,DIE="^DPT("
"RTN","DGRPE",20,0)
 .. D ^DIE I $D(Y) S QUIT=1
"RTN","DGRPE",21,0)
 .. S DGDR=$P(DGDR,"601,",1)_$P(DGDR,"601,",2,999)
"RTN","DGRPE",22,0)
 . I DGDR["602," D EN^DGRP6CL(DFN,.QUIT)  Q:QUIT  ; Conflicts
"RTN","DGRPE",23,0)
 . I DGDR["603," D EN^DGRP6EF(DFN,.QUIT)  Q:QUIT  ; Exposures
"RTN","DGRPE",24,0)
 ;-- Tricare screen #15
"RTN","DGRPE",25,0)
 I DGRPS=15 D EDIT^DGRP15,Q Q
"RTN","DGRPE",26,0)
 ;
"RTN","DGRPE",27,0)
 N DGPH,DGPHFLG
"RTN","DGRPE",28,0)
 K DR S (DA,Y)=DFN,DIE="^DPT(",DR="",DGDRS="DR",DGCT=0
"RTN","DGRPE",29,0)
 G ^DGRPE1:DGRPS>6
"RTN","DGRPE",30,0)
 I DGRPS=4 D ^DGRPE4
"RTN","DGRPE",31,0)
 D SETDR(DGDR,.DR)
"RTN","DGRPE",32,0)
 S (DA,Y)=DFN,DIE="^DPT("
"RTN","DGRPE",33,0)
 D ^DIE
"RTN","DGRPE",34,0)
 ;check for Combat Vet status
"RTN","DGRPE",35,0)
 I $G(DGCVFLG)=1,($P($$CVEDT^DGCV(DFN),U,2)']"") D
"RTN","DGRPE",36,0)
 . W !!,"**NOTE-Change(s) made in this session deleted the veteran's Combat Vet status!"
"RTN","DGRPE",37,0)
 . S DIR(0)="EA" D ^DIR K DIR
"RTN","DGRPE",38,0)
 I $G(DGPHFLG)>0 D EDITPH1^DGRPLE()
"RTN","DGRPE",39,0)
Q K DA,DIE,DR,DGCT,DGCVFLG,DGDR,DGDRD,DGDRS,DGRPADI,I,J,J1,DGCOMLOC,DIPA
"RTN","DGRPE",40,0)
 Q
"RTN","DGRPE",41,0)
 ;
"RTN","DGRPE",42,0)
SETDR(DGDR,DR) ; Set up DR string(s) for edit groups selected
"RTN","DGRPE",43,0)
 N DGCT,DGDRS,J1,J2
"RTN","DGRPE",44,0)
 K DR S DR="",DGDRS="DR",DGCT=0
"RTN","DGRPE",45,0)
 F I=1:1 S J=$P(DGDR,",",I) Q:J=""  S J1=J D:$T(@J1)
"RTN","DGRPE",46,0)
 . S DGDRD=$P($T(@J1),";;",2) D S
"RTN","DGRPE",47,0)
 . N J2
"RTN","DGRPE",48,0)
 . F J2=0:1 S J1=J*1000+J2 Q:'$T(@J1)  S DGDRD=$P($T(@J1),";;",2) D S
"RTN","DGRPE",49,0)
 Q
"RTN","DGRPE",50,0)
 ;
"RTN","DGRPE",51,0)
S I $L(@DGDRS)+$L(DGDRD)<241 S @DGDRS=@DGDRS_DGDRD Q
"RTN","DGRPE",52,0)
 S DGCT=DGCT+1,DGDRS="DR(1,2,"_DGCT_")",@DGDRS=DGDRD Q
"RTN","DGRPE",53,0)
 Q
"RTN","DGRPE",54,0)
 ;
"RTN","DGRPE",55,0)
SETFLDS(DGDR) ; Set up fields to edit
"RTN","DGRPE",56,0)
 Q
"RTN","DGRPE",57,0)
 ;
"RTN","DGRPE",58,0)
101 ;;
"RTN","DGRPE",59,0)
102 ;;1;
"RTN","DGRPE",60,0)
103 ;;.091;
"RTN","DGRPE",61,0)
104 ;;N FLG S (FLG(1),FLG(2))=1 D EN^DGREGAED(DFN,.FLG);
"RTN","DGRPE",62,0)
105 ;;.12105//NO;S:X="N" Y="@15" S:X="Y" DIE("NO^")="";.1217;I X']"" W !?4,$C(7),"But I need a Start Date for this Temporary Address." S Y=.12105;.1218;
"RTN","DGRPE",63,0)
105000 ;;N RET S RET=1 D EN^DGREGTED(DFN,"TEMP",.RET) S:'RET Y=.12105;@15;K DIE("NO^");
"RTN","DGRPE",64,0)
109 ;;N FLG S (FLG(1),FLG(2))=1 D EN^DGREGAED(DFN,.FLG);.02;D DR109^DGRPE;6;2;K DR(2,2.02),DR(2,2.06);.05;.08;K DIE("NO^");
"RTN","DGRPE",65,0)
111 ;;.14105//NO;S:X="N" Y="@111" S:X="Y" DIE("NO^")="";.1417;I X']"" W !?4,$C(7),"But I need a Start Date." S Y=.14105;.1418;D DR111^DGRPE;.141;I '$P($$CAACT^DGRPCADD(DFN),U,2) W !?4,"But I need at least one active category." S Y=.14105;
"RTN","DGRPE",66,0)
111000 ;;K DR(2,2.141);N RET S RET=1 D EN^DGREGTED(DFN,"CONF",.RET) S:'RET Y=.14105;@111;K DIE("NO^");
"RTN","DGRPE",67,0)
112 ;;.134;.135;.133
"RTN","DGRPE",68,0)
201 ;;.05;.08;.092;.093;.2401:.2403;57.4//NOT APPLICABLE;
"RTN","DGRPE",69,0)
202 ;;1010.15//NO;S:X'="Y" Y="@22";S DIE("NO^")="";1010.152;I X']"" W !?4,*7,"But I need to know where you were treated most recently." S Y=1010.15;1010.151;1010.154;S:X']"" Y="@22";1010.153;@22;K DIE("NO^");
"RTN","DGRPE",70,0)
203 ;;D DR203^DGRPE;6ETHNICITY;2RACE;K DR(2,2.02),DR(2,2.06);
"RTN","DGRPE",71,0)
205 ;;.181;
"RTN","DGRPE",72,0)
301 ;;.211;S:X']"" Y="@31";.212;D DR301^DGRPE S:DG4=1 Y=.213;.2125//NO;I X="Y" S DGADD=".21" D AD^DGRPE S Y=.21011;.213;K DG4;S:X']"" Y=.216;.214;S:X']"" Y=.216;.215:.217;.2207;.219;.21011;@31;
"RTN","DGRPE",73,0)
302 ;;.2191;S:X']"" Y="@32";.2192;D DR301^DGRPE S:DG4=1 Y=.2193;.21925//NO;I X="Y" S DGADD=".211" D AD^DGRPE S Y=.211011;
"RTN","DGRPE",74,0)
302000 ;;.2193;S:X']"" Y=.2196;.2194;S:X']"" Y=.2196;.2195:.2197;.2203;.2199;.211011;@32;
"RTN","DGRPE",75,0)
303 ;;N DGX1,DGX2;I '$L($P($G(^DPT(DFN,.21)),U)) S Y="@33";.3305//NO;I X="Y" S Y="@34",DGX1=1 S:$D(^DPT(DFN,.22)) $P(^(.22),U,1)=$P(^(.22),U,7);@33;.331;S:X']"" DGX1=2,Y="@34";.332;@34;
"RTN","DGRPE",76,0)
303000 ;;S:$G(DGX1) Y="@341";.333;S:X']"" Y=.336;.334;S:X']"" Y=.336;.335:.337;.2201;.339;.33011;S DGX1=2;@341;
"RTN","DGRPE",77,0)
303001 ;;S:$G(DGX1)=2 Y="@35";S DGX2=$G(^DPT(DA,.21));.331///^S X=$P(DGX2,U);.332///^S X=$P(DGX2,U,2);.333////^S X=$P(DGX2,U,3);.334///^S X=$P(DGX2,U,4);@35;
"RTN","DGRPE",78,0)
303002 ;;S:$G(DGX1)=2 Y="@351";.335///^S X=$P(DGX2,U,5);.336///^S X=$P(DGX2,U,6);.337///^S X=$P(DGX2,U,7);.338///^S X=$P(DGX2,U,8);.339///^S X=$P(DGX2,U,9);.33011///^S X=$P(DGX2,U,11);@351;K DGX1,DGX2;
"RTN","DGRPE",79,0)
304 ;;.3311;S:X']"" Y="@36";.3312;.3313;S:X']"" Y=.3316;.3314;S:X']"" Y=.3316;.3315:.3317;.2204;.3319;.331011;@36;        
"RTN","DGRPE",80,0)
305 ;;N DGX1,DGX2;I '$L($P($G(^DPT(DFN,.21)),U)) S Y="@37";.3405//NO;I X="Y" S DGX1=1,Y="@371" S:$D(^DPT(DFN,.22)) $P(^(.22),U,2)=$P(^(.22),U,7);@37;.341;S:X']"" DGX1=2,Y="@371";.342;@371;
"RTN","DGRPE",81,0)
305000 ;;S:$G(DGX1) Y="@38";.343;S:X']"" Y=.346;.344;S:X']"" Y=.346;.345:.347;.2202;.349;.34011;S DGX1=2;@38;
"RTN","DGRPE",82,0)
305001 ;;S:$G(DGX1)=2 Y="@381";S DGX2=$G(^DPT(DA,.21));.341///^S X=$P(DGX2,U);.342///^S X=$P(DGX2,U,2);.343///^S X=$P(DGX2,U,3);.344///^S X=$P(DGX2,U,4);@381
"RTN","DGRPE",83,0)
305002 ;;S:$G(DGX1)=2 Y="@39";.345///^S X=$P(DGX2,U,5);.346///^S X=$P(DGX2,U,6);.347///^S X=$P(DGX2,U,7);.348///^S X=$P(DGX2,U,8);.349///^S X=$P(DGX2,U,9);.34011///^S X=$P(DGX2,U,11);@39;K DGX1,DGX2;
"RTN","DGRPE",84,0)
401 ;;.01;.31115;S:($S(X']"":1,X=3:1,X=9:1,1:0)) Y="@41" S:(X'=5) Y=.3111;.31116;.3111;S:X']"" Y="@41";.3113;S:X']"" Y=.3116;.3114;S:X']"" Y=.3116;.3115:.3117;.2205;.3119;@41;
"RTN","DGRPE",85,0)
402 ;;.2514;.2515;S:($S(X']"":1,X=3:1,X=9:1,1:0)) Y="@42" S:(X'=5) Y=.251;.2516;.251;S:X']"" Y="@42";.252;S:X']"" Y=.255;.253;S:X']"" Y=.255;.254:.256;.2206;.258;@42;
"RTN","DGRPE",86,0)
501 ;;
"RTN","DGRPE",87,0)
502 ;;.381;.382///NOW;
"RTN","DGRPE",88,0)
503 ;;.383;
"RTN","DGRPE",89,0)
601 ;;@60101;D SET32^DGRPE(DA,.DIPA,1);.325;S DIPA("X1")=X S:X="" Y="@60199" I X'="" S:$$FV^DGRPMS(X)'=1 Y="@60111";.3214;I X="" D PRF^DGRPE S Y="@60101";S Y="@6011";
"RTN","DGRPE",90,0)
601000 ;;@60111;D:DIPA("X1")'="" WARN32^DGRPE(DIPA("X1"),.DIPA,1,.Y);.32911;@6011;.328;.326;.327;.324;.3285//NO;S:X'="Y" Y="@60199";
"RTN","DGRPE",91,0)
601001 ;;@60102;D SET32^DGRPE(DA,.DIPA,2);.3291;S DIPA("X2")=X S:X="" Y="@60199" I X'="" S:$$FV^DGRPMS(X)'=1 Y="@60112";.3214;I X="" D PRF^DGRPE S Y="@60102";S Y="@6012";
"RTN","DGRPE",92,0)
601002 ;;@60112;D:DIPA("X2")'="" WARN32^DGRPE(DIPA("X2"),.DIPA,2,.Y);.32912;@6012;.3294;.3292;.3293;.329;.32945//NO;S:X'="Y" Y="@60199";
"RTN","DGRPE",93,0)
601003 ;;@60103;D SET32^DGRPE(DA,.DIPA,3);.3296;S DIPA("X3")=X S:X="" Y="@60199" I X'="" S:$$FV^DGRPMS(X)'=1 Y="@60113";.3214;I X="" D PRF^DGRPE S Y="@60103";S Y="@6013";
"RTN","DGRPE",94,0)
601004 ;;@60113;D:DIPA("X3")'="" WARN32^DGRPE(DIPA("X3"),.DIPA,3,.Y);.32913;@6013;.3299;.3297;.3298;.3295;@60199;
"RTN","DGRPE",95,0)
602 ;;Q;
"RTN","DGRPE",96,0)
603 ;;Q;
"RTN","DGRPE",97,0)
604 ;;.525//NO;S:X'="Y" Y="@62";.526:.528;@62;
"RTN","DGRPE",98,0)
605 ;;.5291//NO;S:X'="Y" Y="@63";.5292:.5294;@63;
"RTN","DGRPE",99,0)
606 ;;I $P($G(^DPT(DFN,.361)),U,3)="H" S Y="@6131";.3602//NO;.3603//NO;S Y="@6132";@6131;.3602;.3603;@6132;
"RTN","DGRPE",100,0)
607 ;;.368//NO;.369//NO;I $S('$D(^DPT(DA,.36)):1,$P(^(.36),U,8)="Y"!($P(^(.36),U,9)="Y"):0,1:1) S Y="@614";.37;@614;
"RTN","DGRPE",101,0)
608 ;;S DGPHFLG=0;.531;S:X'="Y" DGX=X,Y="@616";.532///^S X="PENDING";S Y="@6161";@616;S:DGX'="N" Y="@6162";.533///^S X="VAMC";@6161;S DGPHFLG=1;.535///^S X=$$DIV^DGRPLE();@6162;
"RTN","DGRPE",102,0)
AD N DGZ4,DGPC
"RTN","DGRPE",103,0)
 S X=$S($D(^DPT(DA,.11)):^(.11),1:""),DGZ4=$P(X,U,12),DGPHONE=$S($D(^(.13)):$P(^(.13),U,1),1:""),Y=$S($D(^(DGADD)):^(DGADD),1:""),^(DGADD)=$P(Y,U,1)_U_$P(Y,U,2)_U_$P(X,U,1,6)_U_DGPHONE_U_$P(Y,U,10)
"RTN","DGRPE",104,0)
 I DGZ4 S DGPC=$S((DGADD=.33):1,(DGADD=.34):2,(DGADD=.211):3,(DGADD=.331):4,(DGADD=.311):5,(DGADD=.25):6,(DGADD=.21):7,1:0) S:DGPC $P(^DPT(DFN,.22),U,DGPC)=DGZ4
"RTN","DGRPE",105,0)
 K DGADD,DGPHONE Q
"RTN","DGRPE",106,0)
DR109 ;Drop through (use same logic as DR203)
"RTN","DGRPE",107,0)
DR203 S DR(2,2.02)=".01RACE;I $P($G(^DIC(10.3,+$P($G(^DPT(DA(1),.02,DA,0)),""^"",2),0)),""^"",2)=""S"" S Y=""@2031"";.02;@2031;"
"RTN","DGRPE",108,0)
 S DR(2,2.06)=".01ETHNICITY;I $P($G(^DIC(10.3,+$P($G(^DPT(DA(1),.06,DA,0)),""^"",2),0)),""^"",2)=""S"" S Y=""@2032"";.02;@2032;"
"RTN","DGRPE",109,0)
 Q
"RTN","DGRPE",110,0)
DR111 ;Set DR string for Confidential Address categories
"RTN","DGRPE",111,0)
 S DR(2,2.141)=".01;1//YES;"
"RTN","DGRPE",112,0)
 Q
"RTN","DGRPE",113,0)
DR301 ;set up variables for foreign address
"RTN","DGRPE",114,0)
 N DG3,DG33
"RTN","DGRPE",115,0)
 S DG4=0
"RTN","DGRPE",116,0)
 S DG3=$P($G(^DPT(DFN,.11)),U,10)
"RTN","DGRPE",117,0)
 S DG33=$O(^HL(779.004,"B","USA",""))
"RTN","DGRPE",118,0)
 I $G(DG3)]"",(DG3'=$G(DG33)) S DG4=1
"RTN","DGRPE",119,0)
 Q
"RTN","DGRPE",120,0)
PRF ; Write Proof needed for FV
"RTN","DGRPE",121,0)
 W !?4,$C(7),"Proof is required for Filipino vet."
"RTN","DGRPE",122,0)
 Q
"RTN","DGRPE",123,0)
 ;
"RTN","DGRPE",124,0)
SET32(DA,DIPA,SEQ) ; Extract the .32 node from patient file and set DIPA
"RTN","DGRPE",125,0)
 ; array with the BOS and component data for the SEQ military service
"RTN","DGRPE",126,0)
 ; episode (1-3)
"RTN","DGRPE",127,0)
 N I,Q,Z
"RTN","DGRPE",128,0)
 K DIPA(32,SEQ)
"RTN","DGRPE",129,0)
 S Q=$G(^DPT(DA,.32)),Z=$G(^(.3291))
"RTN","DGRPE",130,0)
 S DIPA(32,SEQ)=$P(Q,U,SEQ*5)_U_$P(Z,U,SEQ),DIPA("X"_SEQ)=$P(DIPA(32,SEQ),U)
"RTN","DGRPE",131,0)
 Q
"RTN","DGRPE",132,0)
 ;
"RTN","DGRPE",133,0)
WARN32(X,DIPA,SEQ,Y) ; Warn if the BOS is changed, then the component will
"RTN","DGRPE",134,0)
 ; be deleted
"RTN","DGRPE",135,0)
 ; Returns Y to skip component if the component should not be asked
"RTN","DGRPE",136,0)
 ;   for this branch of service
"RTN","DGRPE",137,0)
 N Z
"RTN","DGRPE",138,0)
 I '$$CMP(X) S Y="@601"_SEQ
"RTN","DGRPE",139,0)
 S Z=$G(DIPA(32,SEQ))
"RTN","DGRPE",140,0)
 Q:$S($P(Z,U,2)=""!($P(Z,U)=""):1,1:$P(Z,U)=X)
"RTN","DGRPE",141,0)
 ;
"RTN","DGRPE",142,0)
 I '$D(DIQUIET) W !!,*7,"** WARNING - BRANCH OF SERVICE WAS CHANGED SO THE COMPONENT WAS DELETED",!
"RTN","DGRPE",143,0)
 Q
"RTN","DGRPE",144,0)
 ;
"RTN","DGRPE",145,0)
CMP(X) ; Function to determine if service component is valid for
"RTN","DGRPE",146,0)
 ; branch of service ien in X   0 = invalid  1 = valid  
"RTN","DGRPE",147,0)
 ; Component only valid for ARMY/AIR FORCE/MARINES/COAST GUARD/NOAA/USPHS
"RTN","DGRPE",148,0)
 Q $S('$G(X):0,X'>5!(X=9)!(X=10):1,1:0)
"RTN","DGRPE",149,0)
 ;
"RTN","DGRPE1")
0^106^B9042647
"RTN","DGRPE1",1,0)
DGRPE1 ;ALB/MRL,RTK,BRM,RGL,ERC - REGISTRATIONS EDITS (CONTINUED) ; 11/13/06 12:57pm
"RTN","DGRPE1",2,0)
 ;;5.3;Registration;**114,327,451,631,688**;Aug 13, 1993;Build 29
"RTN","DGRPE1",3,0)
 ;
"RTN","DGRPE1",4,0)
 ;***CONTAINS ISM SPECIFIC CODE TO AVOID STORE ERRORS WITH ELIG.***
"RTN","DGRPE1",5,0)
 ;
"RTN","DGRPE1",6,0)
 I DGRPS'=7 F I=1:1 S J=$P(DGDR,",",I) Q:J=""  F J1=J,J*1000 Q:'$T(@J1)  S DGDRD=$P($T(@J1),";;",2) D S
"RTN","DGRPE1",7,0)
 I DGRPS=7 S DR="[DG LOAD EDIT SCREEN 7]"
"RTN","DGRPE1",8,0)
 ;S DR(2,2.0361)=".01"
"RTN","DGRPE1",9,0)
 D ^DIE K DIE,DR,DGCT,DGDR,DGDRD,DGDRS,I,J,J1
"RTN","DGRPE1",10,0)
 ;update/set ELIGIBILITY VERIF. SOURCE field (327/Ineligible Project)
"RTN","DGRPE1",11,0)
 I $D(^DPT(DFN,.361)) S DGELG=^DPT(DFN,.361) D
"RTN","DGRPE1",12,0)
 .N DGXEL
"RTN","DGRPE1",13,0)
 .S DGXEL=$P(DGELG,U,5),DATA(.3613)="V"
"RTN","DGRPE1",14,0)
 .I $S($G(DGXEL)["CEV":1,$G(DGXEL)["VBA":1,$G(DGXEL)["VIVA":1,1:0),$P(DGELG,U,6)=.5 S DATA(.3613)="H"
"RTN","DGRPE1",15,0)
 .I '$$UPD^DGENDBS(2,DFN,.DATA)
"RTN","DGRPE1",16,0)
 Q
"RTN","DGRPE1",17,0)
S I $L(@DGDRS)+$L(DGDRD)<241 S @DGDRS=@DGDRS_DGDRD Q
"RTN","DGRPE1",18,0)
 S DGCT=DGCT+1,DGDRS="DR(1,2,"_DGCT_")",@DGDRS=DGDRD Q
"RTN","DGRPE1",19,0)
701 ;;391;D SC7^DGRPV;1901;.301;S:X'="Y" Y=.313;.302;.313;.312;
"RTN","DGRPE1",20,0)
702 ;;.361;D AAC1^DGLOCK2 S:DGAAC(1)']"" Y=361;.309;361;.323;D ^DGYZODS;S:'DGODS Y=.36265;11500.02;11500.03;.36265;S:X='"Y" Y="@72";.3626;@72;
"RTN","DGRPE1",21,0)
703 ;;.3731;
"RTN","DGRPE1",22,0)
1001 ;;.152;S:X="" Y="@101";.1651;.1653;.1654;.307;.1656;@101;
"RTN","DGRPE1",23,0)
1002 ;;.153;S:X="" Y="@102";.1657:.1659;.16;@102;
"RTN","DGRPE1",24,0)
1101 ;;.3611;.3612;.3614;.3615;
"RTN","DGRPE1",25,0)
1102 ;;.306;
"RTN","DGRPE1",26,0)
1103 ;;.322;
"RTN","DGRPE1",27,0)
1104 ;;D VETTYPE^DGRPE1;D MSG^DGRPE1 S Y=0;@114;K DGRDCHG;D DR^DGRPE1;.302;.3721;D EFF^DGRPE1;D:$G(DGRDCHG) BULL^DGRPE1;K DGRDCHG
"RTN","DGRPE1",28,0)
MSG W !,"Patient is not a veteran.  Can't enter rated disabilities",! Q
"RTN","DGRPE1",29,0)
 ;
"RTN","DGRPE1",30,0)
BULL ; Rated Disabilities update bulletin
"RTN","DGRPE1",31,0)
 N DGBULL,DGLINE,DGMGRP,DGNAME,DIFROM,VA,VAERR,XMTEXT,XMSUB,XMDUZ
"RTN","DGRPE1",32,0)
 S DGMGRP=$O(^XMB(3.8,"B","DGEN ELIGIBILITY ALERT",""))
"RTN","DGRPE1",33,0)
 Q:'DGMGRP
"RTN","DGRPE1",34,0)
 D XMY^DGMTUTL(DGMGRP,0,1)
"RTN","DGRPE1",35,0)
 S DGNAME=$P($G(^DPT(DFN,0)),"^"),DGSSN=$P($G(^DPT(DFN,0)),"^",9)
"RTN","DGRPE1",36,0)
 S XMTEXT="DGBULL("
"RTN","DGRPE1",37,0)
 S XMSUB="RATED DISABILITY UPDATED"
"RTN","DGRPE1",38,0)
 S DGLINE=0
"RTN","DGRPE1",39,0)
 D LINE^DGEN("Patient: "_DGNAME,.DGLINE)
"RTN","DGRPE1",40,0)
 D LINE^DGEN("SSN: "_DGSSN,.DGLINE)
"RTN","DGRPE1",41,0)
 D LINE^DGEN("",.DGLINE)
"RTN","DGRPE1",42,0)
 D LINE^DGEN("Send updates to SC Disabilities to HEC via fax or HECAlert",.DGLINE)
"RTN","DGRPE1",43,0)
 D LINE^DGEN("Outlook mail group so that they can be entered into VHA's",.DGLINE)
"RTN","DGRPE1",44,0)
 D LINE^DGEN("Authoritative Database.  SC Disability information entered directly",.DGLINE)
"RTN","DGRPE1",45,0)
 D LINE^DGEN("into VistA may be overlaid.",.DGLINE)
"RTN","DGRPE1",46,0)
 D ^XMD
"RTN","DGRPE1",47,0)
 Q
"RTN","DGRPE1",48,0)
DR ;
"RTN","DGRPE1",49,0)
 K DGSCPC
"RTN","DGRPE1",50,0)
 S DGSCPC=$P($G(^DPT(DFN,.3)),U,2)
"RTN","DGRPE1",51,0)
 S DR(2,2.04)=".01;2;3"
"RTN","DGRPE1",52,0)
 Q
"RTN","DGRPE1",53,0)
EFF ;
"RTN","DGRPE1",54,0)
 I $G(DGSCPC)=$P($G(^DPT(DFN,.3)),U,2) Q
"RTN","DGRPE1",55,0)
 S DGFDA(2,DFN_",",.3014)="@"
"RTN","DGRPE1",56,0)
 D FILE^DIE("","DGFDA","DGERR")
"RTN","DGRPE1",57,0)
 K DGFDA,DGSCPC
"RTN","DGRPE1",58,0)
 Q
"RTN","DGRPE1",59,0)
VETTYPE ;
"RTN","DGRPE1",60,0)
 S:$S('$D(^DPT(DFN,"VET")):0,^("VET")="Y":1,1:0) Y="@114" Q
"RTN","DGRPE1",61,0)
 S:'$S('$D(^("TYPE")):1,'$D(^DG(391,+^("TYPE"),0)):1,$P(^(0),"^",2):0,1:1) Y="@114"
"RTN","DGRPE1",62,0)
 Q
"RTN","DGRPECE")
0^89^B66239213
"RTN","DGRPECE",1,0)
DGRPECE ;ALB/MRY,ERC,BAJ - REGISTRATION CATASTROPHIC EDITS ; 10/4/06 3:27pm
"RTN","DGRPECE",2,0)
 ;;5.3;Registration;**638,682,700,720,653,688**;Aug 13, 1993;Build 29
"RTN","DGRPECE",3,0)
 ;
"RTN","DGRPECE",4,0)
CEDITS(DFN) ;catastrophic edits  - buffer values, save after check
"RTN","DGRPECE",5,0)
 ;Input;
"RTN","DGRPECE",6,0)
 ;  DFN  := patient ien
"RTN","DGRPECE",7,0)
 ;Catastrophic edits will prompt for name, ssn, dob, and sex.  Placing
"RTN","DGRPECE",8,0)
 ;responses into a buffer space.  User will be alerted on catastrophic
"RTN","DGRPECE",9,0)
 ;edits on the following conditions:
"RTN","DGRPECE",10,0)
 ; 1. Two or more catastrophic edits will generate a warning message.
"RTN","DGRPECE",11,0)
 ; 2. Acceptance of two or more catastrophic edits will generate an alert
"RTN","DGRPECE",12,0)
 ; to appropriate supervising staff holding the DG CATASTROPHIC EDIT key.
"RTN","DGRPECE",13,0)
 ; 3. Acceptance of <2 catastrophic edits will process normally.
"RTN","DGRPECE",14,0)
 ;
"RTN","DGRPECE",15,0)
 ; Arrays: BEFORE - Holds patient values before the edit process
"RTN","DGRPECE",16,0)
 ;                  (before snapshot).
"RTN","DGRPECE",17,0)
 ;         BUFFER - initialized with BEFORE array, holds edited changes
"RTN","DGRPECE",18,0)
 ;                  (after snapshot).
"RTN","DGRPECE",19,0)
 ;         SAVE   - holds only edited changes for filing into file #2.
"RTN","DGRPECE",20,0)
 ;
"RTN","DGRPECE",21,0)
 N DA,DIR,DIRUT,Y,BUFFER,BEFORE,SAVE,DG20IEN
"RTN","DGRPECE",22,0)
 D BEFORE(DFN,.BEFORE,.BUFFER) ;retrieve before patient values
"RTN","DGRPECE",23,0)
 ;buffer - get name
"RTN","DGRPECE",24,0)
 K DG20NAME
"RTN","DGRPECE",25,0)
 S BUFFER("NAME")=$$NCEDIT^DPTNAME(DFN,,.DG20NAME)
"RTN","DGRPECE",26,0)
 I BUFFER("NAME")="" S BUFFER("NAME")=BEFORE("NAME")
"RTN","DGRPECE",27,0)
 I $D(DG20NAME("FAMILY")) S BUFFER("FAMILY")=DG20NAME("FAMILY")
"RTN","DGRPECE",28,0)
 I $D(DG20NAME("GIVEN")) S BUFFER("GIVEN")=DG20NAME("GIVEN")
"RTN","DGRPECE",29,0)
 I $D(DG20NAME("MIDDLE")) S BUFFER("MIDDLE")=DG20NAME("MIDDLE")
"RTN","DGRPECE",30,0)
 I $D(DG20NAME("SUFFIX")) S BUFFER("SUFFIX")=DG20NAME("SUFFIX")
"RTN","DGRPECE",31,0)
 ; the formal name is last name, first name, middle name and suffix
"RTN","DGRPECE",32,0)
 ; the prefix and degree are only stored in file 20
"RTN","DGRPECE",33,0)
 I $D(DG20NAME("PREFIX")) S BUFFER("PREFIX")=DG20NAME("PREFIX")
"RTN","DGRPECE",34,0)
 I $D(DG20NAME("DEGREE")) S BUFFER("DEGREE")=DG20NAME("DEGREE")
"RTN","DGRPECE",35,0)
 K DG20NAME
"RTN","DGRPECE",36,0)
 ;DG*5.3*688 BAJ if SSN is verified, do not allow edits
"RTN","DGRPECE",37,0)
 I BEFORE("SSNV")="VERIFIED" D  G DOB
"RTN","DGRPECE",38,0)
 . S BUFFER("SSN")=BEFORE("SSN")
"RTN","DGRPECE",39,0)
 . W !,"SSN: "_BUFFER("SSN")
"RTN","DGRPECE",40,0)
 . W !,"SOCIAL SECURITY NUMBER "_BUFFER("SSN")_" has been verified by SSA --NO EDITING"
"RTN","DGRPECE",41,0)
 ;
"RTN","DGRPECE",42,0)
 ;buffer - get ssn
"RTN","DGRPECE",43,0)
 S DIR(0)="2,.09^^"
"RTN","DGRPECE",44,0)
 S DA=DFN D ^DIR
"RTN","DGRPECE",45,0)
 I $D(DIRUT) D CECHECK Q
"RTN","DGRPECE",46,0)
 S BUFFER("SSN")=Y
"RTN","DGRPECE",47,0)
 ;if SSN is pseudo, Pseudo SSN Reason is req. - DG*5.3*653, ERC
"RTN","DGRPECE",48,0)
 I $G(BUFFER("SSN"))["P" D  I $D(DIRUT) D CECHECK Q
"RTN","DGRPECE",49,0)
REAS . ;
"RTN","DGRPECE",50,0)
 . N DGREA,DGQSSN,DIR
"RTN","DGRPECE",51,0)
 . S DGQSSN=0
"RTN","DGRPECE",52,0)
 . S DGREA=$P($G(^DPT(DFN,"SSN")),U)
"RTN","DGRPECE",53,0)
 . S DIR(0)="2,.0906^^"
"RTN","DGRPECE",54,0)
 . S DA=DFN
"RTN","DGRPECE",55,0)
 . D ^DIR
"RTN","DGRPECE",56,0)
 . I ($D(DUOUT)!($D(DTOUT))!($D(DIRUT))),($G(BUFFER("SSNREAS"))']"") D
"RTN","DGRPECE",57,0)
 . . W !?10,"PSSN Reason Required if SSN is a Pseudo."
"RTN","DGRPECE",58,0)
 . . I $G(BEFORE("SSN"))["P" G REAS
"RTN","DGRPECE",59,0)
 . . I $G(BEFORE("SSN"))']"" G REAS
"RTN","DGRPECE",60,0)
 . . S DIR(0)="YA",DIR("A")="          Delete Pseudo SSN?: ",DIR("?")="If the SSN is a Pseudo SSN there must be a Pseudo SSN Reason.",DIR("B")="YES"
"RTN","DGRPECE",61,0)
 . . D ^DIR
"RTN","DGRPECE",62,0)
 . . I Y=1 S BUFFER("SSN")=BEFORE("SSN"),DGQSSN=1,Y="" Q
"RTN","DGRPECE",63,0)
 . . G REAS
"RTN","DGRPECE",64,0)
 . I DGQSSN=1 Q
"RTN","DGRPECE",65,0)
 . S BUFFER("SSNREAS")=Y
"RTN","DGRPECE",66,0)
 . I $D(DIRUT)!('$D(BUFFER("SSN"))) D CECHECK Q
"RTN","DGRPECE",67,0)
DOB ;buffer - get dob
"RTN","DGRPECE",68,0)
 S DIR(0)="2,.03^^"
"RTN","DGRPECE",69,0)
 S DA=DFN D ^DIR
"RTN","DGRPECE",70,0)
 I $D(DIRUT) D CECHECK Q
"RTN","DGRPECE",71,0)
 S BUFFER("DOB")=Y
"RTN","DGRPECE",72,0)
SEX ;buffer - get sex
"RTN","DGRPECE",73,0)
 S DIR(0)="2,.02^^"
"RTN","DGRPECE",74,0)
 S DA=DFN D ^DIR
"RTN","DGRPECE",75,0)
 I $D(DIRUT) D CECHECK Q
"RTN","DGRPECE",76,0)
 S BUFFER("SEX")=Y
"RTN","DGRPECE",77,0)
MBI ; buffer - get MBI (multiple birth indicator)
"RTN","DGRPECE",78,0)
 S DIR(0)="2,994^^"
"RTN","DGRPECE",79,0)
 S DA=DFN D ^DIR
"RTN","DGRPECE",80,0)
 S BUFFER("MBI")=Y
"RTN","DGRPECE",81,0)
 I $D(DIRUT) D CECHECK Q
"RTN","DGRPECE",82,0)
CECHECK ;do catastrophic edit checks, alert, and save
"RTN","DGRPECE",83,0)
 N DGCNT,DGCEFLG
"RTN","DGRPECE",84,0)
 ;Compare before/buffer arrays, putting edits into save array.
"RTN","DGRPECE",85,0)
 S DGCNT=$$AFTER(.BEFORE,.BUFFER,.SAVE)
"RTN","DGRPECE",86,0)
 ;   DGCNT:  0  = no changes
"RTN","DGRPECE",87,0)
 ;           1  = only one edit change, ok to save w/o CE message
"RTN","DGRPECE",88,0)
 ;           >1 = more then 1 edit, give CE message
"RTN","DGRPECE",89,0)
 I DGCNT>1 D  ;give CE message
"RTN","DGRPECE",90,0)
 . S DGCEFLG=$$WARNING()
"RTN","DGRPECE",91,0)
 . ;    DGCEFLG: 0  = exit without saving changes
"RTN","DGRPECE",92,0)
 . ;             1  = send alert and save
"RTN","DGRPECE",93,0)
 . I DGCEFLG=0 S DGCNT=0
"RTN","DGRPECE",94,0)
 I DGCNT>0 D SAVE(DFN) I $D(DGCEFLG),DGCEFLG D ALERT
"RTN","DGRPECE",95,0)
 Q
"RTN","DGRPECE",96,0)
 ;
"RTN","DGRPECE",97,0)
SAVE(DFN) ;store accepted/edited values into patient file
"RTN","DGRPECE",98,0)
 N FDATA,DIERR
"RTN","DGRPECE",99,0)
 I $D(SAVE("NAME")) S FDATA(2,+DFN_",",.01)=SAVE("NAME")
"RTN","DGRPECE",100,0)
 I $D(SAVE("DOB")) S FDATA(2,+DFN_",",.03)=SAVE("DOB")
"RTN","DGRPECE",101,0)
 I $D(SAVE("SEX")) S FDATA(2,+DFN_",",.02)=SAVE("SEX")
"RTN","DGRPECE",102,0)
 I $D(SAVE("SSN")) S FDATA(2,+DFN_",",.09)=SAVE("SSN")
"RTN","DGRPECE",103,0)
 I $D(SAVE("SSNREAS")) S FDATA(2,+DFN_",",.0906)=SAVE("SSNREAS")
"RTN","DGRPECE",104,0)
 I $D(SAVE("MBI")) S FDATA(2,+DFN_",",994)=SAVE("MBI")
"RTN","DGRPECE",105,0)
 D FILE^DIE("","FDATA","DIERR")
"RTN","DGRPECE",106,0)
 K FDATA,DIERR
"RTN","DGRPECE",107,0)
 I '$D(^VA(20,DG20IEN)) S DG20IEN=$$GET1^DIQ(2,+DFN_",",1.01,"I")
"RTN","DGRPECE",108,0)
 I $D(SAVE("NAME")) D
"RTN","DGRPECE",109,0)
 .S FDATA(20,+DG20IEN_",",1)=BUFFER("FAMILY")
"RTN","DGRPECE",110,0)
 .S FDATA(20,+DG20IEN_",",2)=BUFFER("GIVEN")
"RTN","DGRPECE",111,0)
 .S FDATA(20,+DG20IEN_",",3)=BUFFER("MIDDLE")
"RTN","DGRPECE",112,0)
 .S FDATA(20,+DG20IEN_",",5)=BUFFER("SUFFIX")
"RTN","DGRPECE",113,0)
 .D FILE^DIE("","FDATA","DIERR")
"RTN","DGRPECE",114,0)
 .K FDATA,DIERR
"RTN","DGRPECE",115,0)
 I $D(BUFFER("PREFIX")) S FDATA(20,+DG20IEN_",",4)=BUFFER("PREFIX")
"RTN","DGRPECE",116,0)
 I $D(BUFFER("DEGREE")) S FDATA(20,+DG20IEN_",",6)=BUFFER("DEGREE")
"RTN","DGRPECE",117,0)
 I $D(SAVE("PREFIX")) S FDATA(20,+DG20IEN_",",4)=SAVE("PREFIX")
"RTN","DGRPECE",118,0)
 I $D(SAVE("DEGREE")) S FDATA(20,+DG20IEN_",",6)=SAVE("DEGREE")
"RTN","DGRPECE",119,0)
 D FILE^DIE("","FDATA","DIERR")
"RTN","DGRPECE",120,0)
 K FDATA,DIERR
"RTN","DGRPECE",121,0)
 Q
"RTN","DGRPECE",122,0)
 ;
"RTN","DGRPECE",123,0)
BEFORE(IEN,BEF,BUF) ;save original name, ssn, dob, sex, mbi, prefix, degree
"RTN","DGRPECE",124,0)
 N DG20
"RTN","DGRPECE",125,0)
 S BEF("NAME")=$$GET1^DIQ(2,+IEN_",",.01),BUF("NAME")=BEF("NAME")
"RTN","DGRPECE",126,0)
 S BEF("SSN")=$$GET1^DIQ(2,+IEN_",",.09),BUF("SSN")=BEF("SSN")
"RTN","DGRPECE",127,0)
 ;Get SSN Verification flag DG*5.3*688 BAJ 11/22/2005
"RTN","DGRPECE",128,0)
 S BEF("SSNV")=$$GET1^DIQ(2,+IEN_",",.0907),BUF("SSNV")=BEF("SSNV")
"RTN","DGRPECE",129,0)
 S BEF("SSNREAS")=$$GET1^DIQ(2,+IEN_",",.0906),BUF("SSNREAS")=BEF("SSNREAS")
"RTN","DGRPECE",130,0)
 S BEF("DOB")=$$GET1^DIQ(2,+IEN_",",.03,"I"),BUF("DOB")=BEF("DOB")
"RTN","DGRPECE",131,0)
 S BEF("SEX")=$$GET1^DIQ(2,+IEN_",",.02,"I"),BUF("SEX")=BEF("SEX")
"RTN","DGRPECE",132,0)
 S BEF("MBI")=$$GET1^DIQ(2,+IEN_",",994,"I"),BUF("MBI")=BEF("MBI")
"RTN","DGRPECE",133,0)
 D GETS^DIQ(2,+IEN_",",1.01,"I","DG20")
"RTN","DGRPECE",134,0)
 S BEF("FAMILY")="",BEF("GIVEN")="",BUF("FAMILY")="",BUF("GIVEN")=""
"RTN","DGRPECE",135,0)
 S BEF("MIDDLE")="",BEF("SUFFIX")="",BUF("MIDDLE")="",BUF("SUFFIX")=""
"RTN","DGRPECE",136,0)
 S BEF("PREFIX")="",BEF("DEGREE")="",BUF("PREFIX")="",BUF("DEGREE")=""
"RTN","DGRPECE",137,0)
 S DG20IEN=DG20(2,+IEN_",",1.01,"I")
"RTN","DGRPECE",138,0)
 I $$GET1^DIQ(20,+DG20IEN_",",.03)[+IEN D
"RTN","DGRPECE",139,0)
 . S BEF("FAMILY")=$$GET1^DIQ(20,+DG20IEN_",",1),BUF("FAMILY")=BEF("FAMILY")
"RTN","DGRPECE",140,0)
 . S BEF("GIVEN")=$$GET1^DIQ(20,+DG20IEN_",",2),BUF("GIVEN")=BEF("GIVEN")
"RTN","DGRPECE",141,0)
 . S BEF("MIDDLE")=$$GET1^DIQ(20,+DG20IEN_",",3),BUF("MIDDLE")=BEF("MIDDLE")
"RTN","DGRPECE",142,0)
 . S BEF("SUFFIX")=$$GET1^DIQ(20,+DG20IEN_",",5),BUF("SUFFIX")=BEF("SUFFIX")
"RTN","DGRPECE",143,0)
 . S BEF("PREFIX")=$$GET1^DIQ(20,+DG20IEN_",",4),BUF("PREFIX")=BEF("PREFIX")
"RTN","DGRPECE",144,0)
 . S BEF("DEGREE")=$$GET1^DIQ(20,+DG20IEN_",",6),BUF("DEGREE")=BEF("DEGREE")
"RTN","DGRPECE",145,0)
 ;add some demographic information (before snapshot)
"RTN","DGRPECE",146,0)
 S BEF("MAIDEN")=$E($$GET1^DIQ(2,+IEN_",",.2403),1,17)
"RTN","DGRPECE",147,0)
 S BEF("POBCITY")=$E($$GET1^DIQ(2,+IEN_",",.092),1,15)
"RTN","DGRPECE",148,0)
 S BEF("POBSTATE")=$$GET1^DIQ(2,+IEN_",",.093,"I")
"RTN","DGRPECE",149,0)
 Q
"RTN","DGRPECE",150,0)
 ;
"RTN","DGRPECE",151,0)
AFTER(BEF,BUF,SAV) ;prevent catastrophic edit checks
"RTN","DGRPECE",152,0)
 N DGCNT,DG20CNT S (DGCNT,DG20CNT)=0
"RTN","DGRPECE",153,0)
 I $D(BUF("FAMILY")),BUF("FAMILY")'="",BUF("FAMILY")'=BEF("FAMILY") D
"RTN","DGRPECE",154,0)
 . S DG20CNT=DG20CNT+1
"RTN","DGRPECE",155,0)
 . S SAV("NAME")=BUF("NAME")
"RTN","DGRPECE",156,0)
 I $D(BUF("GIVEN")),BUF("GIVEN")'="",BUF("GIVEN")'=BEF("GIVEN") D
"RTN","DGRPECE",157,0)
 . S DG20CNT=DG20CNT+1
"RTN","DGRPECE",158,0)
 . S SAV("NAME")=BUF("NAME")
"RTN","DGRPECE",159,0)
 I $D(BUF("MIDDLE")),BUF("MIDDLE")'=BEF("MIDDLE") D
"RTN","DGRPECE",160,0)
 . S SAV("NAME")=BUF("NAME") ; minor change doesn't count
"RTN","DGRPECE",161,0)
 I $D(BUF("SUFFIX")),BUF("SUFFIX")'=BEF("SUFFIX") D
"RTN","DGRPECE",162,0)
 . S SAV("NAME")=BUF("NAME") ; minor change doesn't count
"RTN","DGRPECE",163,0)
 I DG20CNT>0 S DGCNT=1
"RTN","DGRPECE",164,0)
 I $D(BUF("PREFIX")),BUF("PREFIX")'=BEF("PREFIX") D
"RTN","DGRPECE",165,0)
 . S SAV("PREFIX")=BUF("PREFIX")
"RTN","DGRPECE",166,0)
 I $D(BUF("DEGREE")),BUF("DEGREE")'=BEF("DEGREE") D
"RTN","DGRPECE",167,0)
 . S SAV("DEGREE")=BUF("DEGREE")
"RTN","DGRPECE",168,0)
 I $D(BUF("DOB")),BUF("DOB")'="",BUF("DOB")'=BEF("DOB") D
"RTN","DGRPECE",169,0)
 . S SAV("DOB")=BUF("DOB"),DGCNT=DGCNT+1
"RTN","DGRPECE",170,0)
 I $D(BUF("SEX")),BUF("SEX")'="",BUF("SEX")'=BEF("SEX") D
"RTN","DGRPECE",171,0)
 . S SAV("SEX")=BUF("SEX"),DGCNT=DGCNT+1
"RTN","DGRPECE",172,0)
 I $D(BUF("SSN")),BUF("SSN")'="",BUF("SSN")'=BEF("SSN") D
"RTN","DGRPECE",173,0)
 . S SAV("SSN")=BUF("SSN"),DGCNT=DGCNT+1
"RTN","DGRPECE",174,0)
 I $D(BUF("SSNREAS")),BUF("SSNREAS")'="",BUF("SSNREAS")'=BEF("SSNREAS") D
"RTN","DGRPECE",175,0)
 . S SAV("SSNREAS")=BUF("SSNREAS"),DGCNT=DGCNT+1
"RTN","DGRPECE",176,0)
 I $D(BUF("MBI")),BUF("MBI")'=BEF("MBI") D
"RTN","DGRPECE",177,0)
 . S SAV("MBI")=BUF("MBI")
"RTN","DGRPECE",178,0)
 I DGCNT=0,$D(SAV("NAME")) Q 1 ;minor name change (i.e. middle name or suffix)
"RTN","DGRPECE",179,0)
 I DGCNT=0,$D(SAV("PREFIX"))!($D(SAV("DEGREE"))) Q 1 ; prefix or degree change
"RTN","DGRPECE",180,0)
 I DGCNT=0,$D(SAV("MBI")) Q 1 ; multiple birth indicator change
"RTN","DGRPECE",181,0)
 I DGCNT=0 Q 0 ;no changes
"RTN","DGRPECE",182,0)
 I DGCNT<2 Q 1 ;make one change w/o CE message
"RTN","DGRPECE",183,0)
 I DGCNT>1 Q 2 ;more than 1 change, send CE message
"RTN","DGRPECE",184,0)
 ;
"RTN","DGRPECE",185,0)
WARNING() ;CE warning message
"RTN","DGRPECE",186,0)
 ;Output     0  = exit without saving changes
"RTN","DGRPECE",187,0)
 ;           1  = send alert and save
"RTN","DGRPECE",188,0)
 W !!,?25,"**WARNING!!**"
"RTN","DGRPECE",189,0)
 W !!,"The edits you are about to make, may potentially change the identity of"
"RTN","DGRPECE",190,0)
 W !,"this patient.  Please verify that you have selected the correct patient"
"RTN","DGRPECE",191,0)
 W !,"and ensure that supporting documentation exists for these changes.  If"
"RTN","DGRPECE",192,0)
 W !,"you continue with these edits, an alert will be generated and sent to"
"RTN","DGRPECE",193,0)
 W !,"your Supervisor and ADPAC, notifying them of the changes."
"RTN","DGRPECE",194,0)
 N DIR,DGANS,Y
"RTN","DGRPECE",195,0)
 S DIR(0)="Y",DIR("A")="Do you wish to continue and save your edits:"
"RTN","DGRPECE",196,0)
 S DIR("B")="NO" D ^DIR K DIR S DGANS=Y
"RTN","DGRPECE",197,0)
 S DGANS=$S(Y=1:1,1:0) ;0=don't save, 1=save with CE alert
"RTN","DGRPECE",198,0)
 Q DGANS
"RTN","DGRPECE",199,0)
 ;
"RTN","DGRPECE",200,0)
ALERT ;Queue alert
"RTN","DGRPECE",201,0)
 X ^%ZOSF("UCI") S ZTUCI=Y,ZTRTN="ALERT^DGRPECE1",ZTDTH=$H,ZTIO="",IEN=DFN
"RTN","DGRPECE",202,0)
 F V="IEN","BEFORE(","BUFFER(","SAVE(","XQY" S ZTSAVE(V)=""
"RTN","DGRPECE",203,0)
 S ZTDESC="Patient Catastrophic Edits alert" K V,ZTSK N X D ^%ZTLOAD  Q
"RTN","DGRPECE",204,0)
 ;D ALERT^DGRPECE1(DFN,.BEFORE,.BUFFER,.SAVE)
"RTN","DGRPECE",205,0)
 Q
"RTN","DGRPEIS")
0^44^B44253668
"RTN","DGRPEIS",1,0)
DGRPEIS ;ALB/MIR,ERC - INCOME SCREENING DATA FOR EDIT ; 1/23/06 2:37pm
"RTN","DGRPEIS",2,0)
 ;;5.3;Registration;**10,45,108,624,653,688**;Aug 13, 1993;Build 29
"RTN","DGRPEIS",3,0)
 ; Handles editing of dependent info
"RTN","DGRPEIS",4,0)
 ; CHANGES TO THIS ROUTINE SHOULD BE COORDINATED WITH THE MEANS TEST
"RTN","DGRPEIS",5,0)
 ; DEVELOPER.  MANY CALLS IN THIS ROUTINE (ADD, EDIT, INACT, ETC.) ARE
"RTN","DGRPEIS",6,0)
 ; CALLED FROM MEANS TEST OR ARE MIMICKED THERE.
"RTN","DGRPEIS",7,0)
 ; In:   DFN as IEN of PATIENT file
"RTN","DGRPEIS",8,0)
 ;       DGDR as string of items selected for editing
"RTN","DGRPEIS",9,0)
 ;Out:   DGFL as -2 if time-out, -1 if up-arrow
"RTN","DGRPEIS",10,0)
EN S DGFL=0
"RTN","DGRPEIS",11,0)
 S DGISDT=$$LYR^DGMTSCU1(DT)
"RTN","DGRPEIS",12,0)
 S DGRP(0)=$G(^DPT(DFN,0)) D NEW^DGRPEIS1,GETREL^DGMTU11(DFN,"VSD",DGISDT)
"RTN","DGRPEIS",13,0)
 I DGDR[801 D SPOUSE^DGRPEIS2 S DGPREF=$G(DGREL("S")) G Q:DGFL I DGSPFL D:DGPREF EDIT(DGPREF,"S") I 'DGPREF D ADD(DFN,"S")
"RTN","DGRPEIS",14,0)
 K DGSPFL,DGPREF
"RTN","DGRPEIS",15,0)
Q Q
"RTN","DGRPEIS",16,0)
 ;
"RTN","DGRPEIS",17,0)
ADD(DFN,DGTYPE,DGTSTDT,DGDEP) ; subroutine to add to files 408.12 & 408.13
"RTN","DGRPEIS",18,0)
 ; In -- DFN as the IEN of file 2 for the vet
"RTN","DGRPEIS",19,0)
 ;       DGTYPE as C for mt children or D for all deps
"RTN","DGRPEIS",20,0)
 ;            S for spouse (default spouse)
"RTN","DGRPEIS",21,0)
 ;       DGTSTDT - optional test date
"RTN","DGRPEIS",22,0)
 ;       DGDEP - optional number of dependent children
"RTN","DGRPEIS",23,0)
 ;Out -- DGPRI as patient relation IEN
"RTN","DGRPEIS",24,0)
 ;       DGIPI as income person IEN
"RTN","DGRPEIS",25,0)
 ;       DGFL as -2 if time-out, -1 if '^', 0 otherwise
"RTN","DGRPEIS",26,0)
 N ANS,DA,PROMPT,SPOUSE,TYPE,DGVADD,DGSKIPST,DGSADD,DGIPIEN,DGUQTLP
"RTN","DGRPEIS",27,0)
 I '$D(DGTSTDT) N DGTSTDT S DGTSTDT=$S($D(DGMTDT):DGMTDT,1:DT)
"RTN","DGRPEIS",28,0)
 S DGFL=$G(DGFL)
"RTN","DGRPEIS",29,0)
 S:('$D(DGDEP)) DGDEP=""
"RTN","DGRPEIS",30,0)
 S DGTYPE=$G(DGTYPE),SPOUSE=$S(DGTYPE']"":1,DGTYPE="C":0,DGTYPE="D":0,1:1)
"RTN","DGRPEIS",31,0)
 S DGFL=$G(DGFL),PROMPT="NAME^SEX^DATE OF BIRTH^^^^^^SSN^PS SSN REASON^MAIDEN NAME^STREET ADDRESS [LINE 1]^STREET ADDRESS [LINE 2]^STREET ADDRESS [LINE 3]^CITY^STATE^ZIP^PHONE NUMBER"
"RTN","DGRPEIS",32,0)
 S TYPE=$S(SPOUSE:"SPOUSE'S ",DGTYPE="C":"CHILD'S ",1:"DEPENDENT'S ")
"RTN","DGRPEIS",33,0)
 S DGSKIPST=0 ;* Skip Add 2 and 3 prompts when Add 1 or 2 not entered
"RTN","DGRPEIS",34,0)
 S DGUQTLP=0
"RTN","DGRPEIS",35,0)
 F DGRPI=.01:.01:.03,.09,.1,1.1:.1:1.8 D  Q:DGVADD  Q:DGSADD  Q:DGUQTLP  I DGFL Q
"RTN","DGRPEIS",36,0)
 . S (DGSADD,DGVADD,DGIPIEN)=0
"RTN","DGRPEIS",37,0)
 . ; Is spouse/dependent address same as patient address?
"RTN","DGRPEIS",38,0)
 . I +DGRPI=1.2 DO
"RTN","DGRPEIS",39,0)
 . . I $$FORIEN^DGADDUTL($P($G(^DPT(DFN,.11)),U,10)) G FOREIGN ; only ask next fields if address same if vet address is in USA
"RTN","DGRPEIS",40,0)
 . . K DIR
"RTN","DGRPEIS",41,0)
 . . S DIR(0)="YAO^^"
"RTN","DGRPEIS",42,0)
 . . S DIR("A")=TYPE_"STREET ADDRESS SAME AS PATIENT'S: "
"RTN","DGRPEIS",43,0)
 . . S DIR("B")="YES"
"RTN","DGRPEIS",44,0)
 . . S:TYPE'="SPOUSE'S " DIR("?")="Enter 'Y' if the child/dependent has the same address and phone number as the patient, otherwise enter 'N'."
"RTN","DGRPEIS",45,0)
 . . S:TYPE="SPOUSE'S " DIR("?")="Enter 'Y' if the spouse has the same address and phone number as the patient, otherwise enter 'N'."
"RTN","DGRPEIS",46,0)
 . . D ^DIR
"RTN","DGRPEIS",47,0)
 . . S DGVADD=+Y
"RTN","DGRPEIS",48,0)
 . . K Y,DIR
"RTN","DGRPEIS",49,0)
FOREIGN . . ;tag to rejoin if vet address is not USA
"RTN","DGRPEIS",50,0)
 . . S DGIPIEN=$$SPSCHK(DFN)
"RTN","DGRPEIS",51,0)
 . . I 'DGVADD,(TYPE'="SPOUSE'S"),(DGIPIEN) DO
"RTN","DGRPEIS",52,0)
 . . . K DIR,Y
"RTN","DGRPEIS",53,0)
 . . . S DIR(0)="YAO^^"
"RTN","DGRPEIS",54,0)
 . . . S DIR("A")=TYPE_"STREET ADDRESS SAME AS SPOUSE'S: "
"RTN","DGRPEIS",55,0)
 . . . S DIR("B")="YES"
"RTN","DGRPEIS",56,0)
 . . . S DIR("?")="Enter 'Y' if the child/dependent has the same address as the spouse, otherwise enter 'N'."
"RTN","DGRPEIS",57,0)
 . . . D ^DIR
"RTN","DGRPEIS",58,0)
 . . . S DGSADD=+Y
"RTN","DGRPEIS",59,0)
 . . . K Y,DIR
"RTN","DGRPEIS",60,0)
 . ;
"RTN","DGRPEIS",61,0)
 . ; If spouse/dependent address is same as patient's set spouse/dep add.
"RTN","DGRPEIS",62,0)
 . I DGVADD D PATASET(DFN) ;*Set to Patient address
"RTN","DGRPEIS",63,0)
 . I DGSADD D SPSASET(DGIPIEN) ;*Set to Spouse address
"RTN","DGRPEIS",64,0)
 . ;
"RTN","DGRPEIS",65,0)
 . ; Spouse/dep address is not same as patient/spouse add, prompt add.
"RTN","DGRPEIS",66,0)
 . I 'DGVADD,'DGSADD DO
"RTN","DGRPEIS",67,0)
 . . K DIR S DIR(0)="408.13,"_DGRPI I DGRPI=.01 S DIR(0)=DIR(0)_"O"
"RTN","DGRPEIS",68,0)
 . . I DGRPI=.02,SPOUSE S X=$P($G(^DPT(DFN,0)),"^",2) I X]"" S DIR("B")=$S(X="F":"MALE",1:"FEMALE") ; default spouse sex
"RTN","DGRPEIS",69,0)
 . . S:DGRPI=.03 DIR(0)=DIR(0)_"^^"_"S %DT=""EP"" D ^%DT S X=Y K:($E(DGTSTDT,1,3)-1_1231)<X X"
"RTN","DGRPEIS",70,0)
 . . S:+DGRPI<1 DIR("A")=TYPE_$P(PROMPT,"^",DGRPI*100)
"RTN","DGRPEIS",71,0)
 . . S:+DGRPI>1 DIR("A")=TYPE_$P(PROMPT,"^",DGRPI*10)
"RTN","DGRPEIS",72,0)
 . . I (+DGRPI'=1.1)!((+DGRPI=1.1)&(SPOUSE)&($G(ANS(.02))="F")) DO
"RTN","DGRPEIS",73,0)
 . . . ;if .1, check to see if SSN is a pseudo, if yes, require Reason
"RTN","DGRPEIS",74,0)
 . . . I DGRPI=.1 D REAS Q
"RTN","DGRPEIS",75,0)
 . . . I (+DGRPI=1.3)!(+DGRPI=1.4) D:('DGSKIPST) ^DIR
"RTN","DGRPEIS",76,0)
 . . . I (+DGRPI'=1.3)&(+DGRPI'=1.4) D ^DIR
"RTN","DGRPEIS",77,0)
 . . . I $D(DTOUT)!$D(DUOUT) S:(DGRPI=.09)!((DGRPI>1.1)&(DGRPI<1.9)) DGUQTLP=1
"RTN","DGRPEIS",78,0)
 . . . I $D(DTOUT)!$D(DUOUT) S DGFL=$S($D(DUOUT):$S((DGRPI>1.1)&(DGRPI<1.9):"",1:-1),1:-2) Q
"RTN","DGRPEIS",79,0)
 . . . I DGRPI=.01,(Y']"") S DGFL=-1 Q
"RTN","DGRPEIS",80,0)
 . . . S ANS(DGRPI)=Y
"RTN","DGRPEIS",81,0)
 . . . I (+DGRPI=1.2),(ANS(1.2)']"") S DGSKIPST=1
"RTN","DGRPEIS",82,0)
 . . . I (+DGRPI=1.3),(ANS(1.3)']"") S DGSKIPST=1
"RTN","DGRPEIS",83,0)
 . . . I DGRPI=.03,$D(ANS(.03)) S X2=ANS(.03),X1=DT D ^%DTC I 'SPOUSE S AGE=(X/365.25) W ?62,"(AGE: "_$P(AGE,".")_")" I AGE>17 D WRT^DGRPEIS3
"RTN","DGRPEIS",84,0)
 . . I DGRPI=.01,(Y']"") Q
"RTN","DGRPEIS",85,0)
 I '$D(ANS(.01)) S DGFL=0 G ADDQ
"RTN","DGRPEIS",86,0)
 I DGFL=-2!'$D(ANS(.09)) W !?3,*7,"Incomplete Entry...Deleted" G ADDQ
"RTN","DGRPEIS",87,0)
 S DGRP0ND=ANS(.01)_"^"_ANS(.02)_"^"_ANS(.03)_"^^^^^^"_$G(ANS(.09))_"^"_$G(ANS(.1))
"RTN","DGRPEIS",88,0)
 S DGRP1ND=$G(ANS(1.1))_"^"_$G(ANS(1.2))_"^"_$G(ANS(1.3))_"^"_$G(ANS(1.4))_"^"_$G(ANS(1.5))_"^"_$P($G(ANS(1.6)),"^",1)_"^"_$G(ANS(1.7))_"^"_$G(ANS(1.8))
"RTN","DGRPEIS",89,0)
 D NEWIP^DGRPEIS1
"RTN","DGRPEIS",90,0)
ADDQ K DGRP0ND,DGRP1ND,DGRPI,DIR,DIRUT,DTOUT,DUOUT
"RTN","DGRPEIS",91,0)
 Q
"RTN","DGRPEIS",92,0)
 ;
"RTN","DGRPEIS",93,0)
PATASET(DFN) ;* Set the address equal to the patient's
"RTN","DGRPEIS",94,0)
 ; Input:  DFN   - Patient file IEN and key to Patient Relation entries
"RTN","DGRPEIS",95,0)
 ; Output: ANS array of dependents address
"RTN","DGRPEIS",96,0)
 S ANS(1.2)=$P($G(^DPT(DFN,.11)),"^",1)
"RTN","DGRPEIS",97,0)
 S ANS(1.3)=$P($G(^DPT(DFN,.11)),"^",2)
"RTN","DGRPEIS",98,0)
 S ANS(1.4)=$P($G(^DPT(DFN,.11)),"^",3)
"RTN","DGRPEIS",99,0)
 S ANS(1.5)=$P($G(^DPT(DFN,.11)),"^",4)
"RTN","DGRPEIS",100,0)
 S ANS(1.6)=$P($G(^DPT(DFN,.11)),"^",5)
"RTN","DGRPEIS",101,0)
 S ANS(1.7)=$P($G(^DPT(DFN,.11)),"^",12)
"RTN","DGRPEIS",102,0)
 S ANS(1.8)=$P($G(^DPT(DFN,.13)),"^",1)
"RTN","DGRPEIS",103,0)
 Q
"RTN","DGRPEIS",104,0)
 ;
"RTN","DGRPEIS",105,0)
SPSCHK(DFN) ;*Check for existence of active spouse
"RTN","DGRPEIS",106,0)
 ; Input:  DFN   - Patient file IEN and key to Patient Relation entries
"RTN","DGRPEIS",107,0)
 ; Output: IPIEN - Spouse IEN in 408.13
"RTN","DGRPEIS",108,0)
 ;                 0: no active spouse
"RTN","DGRPEIS",109,0)
 N PRIEN,IPIEN,SPREDIEN,SPRED
"RTN","DGRPEIS",110,0)
 S IPIEN=0
"RTN","DGRPEIS",111,0)
 I $D(^DGPR(408.12,"B",DFN)) DO
"RTN","DGRPEIS",112,0)
 . S PRIEN=""
"RTN","DGRPEIS",113,0)
 . F  S PRIEN=$O(^DGPR(408.12,"B",DFN,PRIEN)) Q:(+PRIEN=0)  DO
"RTN","DGRPEIS",114,0)
 . . I $D(^DG(408.11,$P(^DGPR(408.12,PRIEN,0),"^",2),0)) DO
"RTN","DGRPEIS",115,0)
 . . . I $P(^DG(408.11,$P(^DGPR(408.12,PRIEN,0),"^",2),0),"^",1)="SPOUSE" DO
"RTN","DGRPEIS",116,0)
 . . . . S SPRED=$O(^DGPR(408.12,PRIEN,"E","AID",""))
"RTN","DGRPEIS",117,0)
 . . . . S:+SPRED'=0 SPREDIEN=$O(^DGPR(408.12,PRIEN,"E","AID",SPRED,""))
"RTN","DGRPEIS",118,0)
 . . . . I +$P($G(^DGPR(408.12,PRIEN,"E",SPREDIEN,0)),"^",2)=1 S IPIEN=$P($P(^DGPR(408.12,PRIEN,0),"^",3),";",1)
"RTN","DGRPEIS",119,0)
 Q IPIEN
"RTN","DGRPEIS",120,0)
 ;
"RTN","DGRPEIS",121,0)
SPSASET(IPIEN) ;* Set the address equal to the patient's spouse address
"RTN","DGRPEIS",122,0)
 ; Input:  IPIEN - Spouse IEN in 408.13
"RTN","DGRPEIS",123,0)
 ; Output: ANS array of Childs address
"RTN","DGRPEIS",124,0)
 ;
"RTN","DGRPEIS",125,0)
 S ANS(1.2)=$P($G(^DGPR(408.13,IPIEN,1)),"^",2)
"RTN","DGRPEIS",126,0)
 S ANS(1.3)=$P($G(^DGPR(408.13,IPIEN,1)),"^",3)
"RTN","DGRPEIS",127,0)
 S ANS(1.4)=$P($G(^DGPR(408.13,IPIEN,1)),"^",4)
"RTN","DGRPEIS",128,0)
 S ANS(1.5)=$P($G(^DGPR(408.13,IPIEN,1)),"^",5)
"RTN","DGRPEIS",129,0)
 S ANS(1.6)=$P($G(^DGPR(408.13,IPIEN,1)),"^",6)
"RTN","DGRPEIS",130,0)
 S ANS(1.7)=$P($G(^DGPR(408.13,IPIEN,1)),"^",7)
"RTN","DGRPEIS",131,0)
 S ANS(1.8)=$P($G(^DGPR(408.13,IPIEN,1)),"^",8)
"RTN","DGRPEIS",132,0)
 Q
"RTN","DGRPEIS",133,0)
 ;
"RTN","DGRPEIS",134,0)
INACT ; prompt to inactivate a patient relation
"RTN","DGRPEIS",135,0)
 ;     Input -- DGREL("D") array of dependents
"RTN","DGRPEIS",136,0)
 ;              DGDEP as number of deps (from GETREL call)
"RTN","DGRPEIS",137,0)
 N ACT,DGDT,IEN,X
"RTN","DGRPEIS",138,0)
 S DGFL=$G(DGFL)
"RTN","DGRPEIS",139,0)
 I 'DGDEP W !!,"No dependents to inactivate!" Q
"RTN","DGRPEIS",140,0)
 W !!,"Enter a number 1-",DGDEP," to indicate the dependent you wish to inactivate: " R X:DTIME
"RTN","DGRPEIS",141,0)
 I '$T S DGFL=-2 Q
"RTN","DGRPEIS",142,0)
 I X["^" S DGFL=-1 Q
"RTN","DGRPEIS",143,0)
 I X']"" Q
"RTN","DGRPEIS",144,0)
 I X["?" W !!,"Enter a number 1-",DGDEP," indicating the number of the dependent you wish to inactivate" G INACT
"RTN","DGRPEIS",145,0)
 I $D(DGREL("D",X)) S X=DGREL("D",X) D SETUP^DGRPEIS1 Q  ; check for IVM dependents
"RTN","DGRPEIS",146,0)
 S X=$G(DGREL("C",X)) I 'X G INACT ; check for MT deps
"RTN","DGRPEIS",147,0)
 D SETUP^DGRPEIS1
"RTN","DGRPEIS",148,0)
 Q
"RTN","DGRPEIS",149,0)
EDIT(DGPREF,DGTYPE,DATE) ; edit demographic data for a dep
"RTN","DGRPEIS",150,0)
 ;    Input -- DGPREF as returned by GETREL^DGMTU11 for dep to edit
"RTN","DGRPEIS",151,0)
 ;             DGTYPE as D if all deps or C if MT children only
"RTN","DGRPEIS",152,0)
 ;                    S for spouse (optional - spouse if not defined)
"RTN","DGRPEIS",153,0)
 ;             DATE [optional] as income screening year/default= last yr
"RTN","DGRPEIS",154,0)
 ;   Output -- DGFL as -2 if timeout, -1 if '^', or 0 o/w
"RTN","DGRPEIS",155,0)
 N DOB,DGACT,RELATION,UPARROW,X,Y,DGEDDEP
"RTN","DGRPEIS",156,0)
 D EDIT^DGRPEIS3
"RTN","DGRPEIS",157,0)
 Q
"RTN","DGRPEIS",158,0)
REAS ;require a Pseudo SSN Reason if the SSN is a Pseudo - DG*5.3*653 ERC
"RTN","DGRPEIS",159,0)
 Q:ANS(.09)'["P"
"RTN","DGRPEIS",160,0)
 S DIR(0)="408.13,.1^^"
"RTN","DGRPEIS",161,0)
 D ^DIR
"RTN","DGRPEIS",162,0)
 I $D(DUOUT) S DGFL=-2 Q
"RTN","DGRPEIS",163,0)
 I $D(DTOUT)!($D(DIRUT)) W !!,"Pseudo SSN Reason Required if the SSN is Pseudo." G REAS
"RTN","DGRPEIS",164,0)
 ;I $D(DUOUT) S DGFL=-2 Q
"RTN","DGRPEIS",165,0)
 S ANS(.1)=Y
"RTN","DGRPEIS",166,0)
 Q
"RTN","DGRPEIS1")
0^45^B27428084
"RTN","DGRPEIS1",1,0)
DGRPEIS1 ;ALB/MIR - CALLS TO ADD NEW PATIENT RELATIONS AND INCOME PERSONS ; 27 FEB 92
"RTN","DGRPEIS1",2,0)
 ;;5.3;Registration;**10,45,108,624,688**;Aug 13, 1993;Build 29
"RTN","DGRPEIS1",3,0)
 ;Adds entries to FILES #408.12 & 408.13
"RTN","DGRPEIS1",4,0)
 ;
"RTN","DGRPEIS1",5,0)
NEW ;check if data in FILE #408.12
"RTN","DGRPEIS1",6,0)
 ;out - DGPRI=IFN of #408.12
"RTN","DGRPEIS1",7,0)
 ;      DGFL [-1='^'/-2=time-out]
"RTN","DGRPEIS1",8,0)
 N DGRPDOB,DGRP0ND
"RTN","DGRPEIS1",9,0)
 I '$D(DGTSTDT) N DGTSTDT S DGTSTDT=$S($D(DGMTDT):DGMTDT,1:DT)
"RTN","DGRPEIS1",10,0)
 S DGPRI=$O(^DGPR(408.12,"C",DFN_";DPT(",0)),DGFL=$G(DGFL)
"RTN","DGRPEIS1",11,0)
 I '$D(^DGPR(408.12,+DGPRI,0)) S DGRP0ND=DFN_"^"_1_"^"_DFN_";DPT(",DGRPDOB=$P($G(^DPT(+DFN,0)),"^",3) D NEWPR
"RTN","DGRPEIS1",12,0)
 S DGIRI=$O(^DGMT(408.22,"B",DFN,0))
"RTN","DGRPEIS1",13,0)
 I '$D(^DGMT(408.22,+DGIRI,0)) D GETIENS^DGMTU2(DFN,+DGPRI,DGTSTDT)
"RTN","DGRPEIS1",14,0)
 Q
"RTN","DGRPEIS1",15,0)
NEWIP ;Add relation to #408.13 file
"RTN","DGRPEIS1",16,0)
 ; In - DFN=IEN of File #2
"RTN","DGRPEIS1",17,0)
 ;      DGRP0ND=0 node of 408.13
"RTN","DGRPEIS1",18,0)
 ;      DGDEP=Optional count of children dependents associated with patient
"RTN","DGRPEIS1",19,0)
 ;Out - DGIPI=408.13 IEN
"RTN","DGRPEIS1",20,0)
 K DINUM N DGRPDOB,DGSEX,I,X
"RTN","DGRPEIS1",21,0)
 S:('$D(DGDEP)) DGDEP=""
"RTN","DGRPEIS1",22,0)
 S DGRPDOB=$P(DGRP0ND,"^",3),DGSEX=$P(DGRP0ND,"^",2)
"RTN","DGRPEIS1",23,0)
 S (DIK,DIC)="^DGPR(408.13,",DIC(0)="L",DLAYGO=408.13,X=$P(DGRP0ND,"^",1) K DD,DO D FILE^DICN S (DGIPI,DA)=+Y K DLAYGO
"RTN","DGRPEIS1",24,0)
 L +^DGPR(408.13,+DGIPI) S ^DGPR(408.13,+DGIPI,0)=DGRP0ND S ^DGPR(408.13,+DGIPI,1)=DGRP1ND D IX1^DIK L -^DGPR(408.13,+DGIPI)
"RTN","DGRPEIS1",25,0)
 S Y=DGIPI,DGRP0ND=DFN_"^"_$S(SPOUSE:2,1:"")_"^"_+Y_";DGPR(408.13,"
"RTN","DGRPEIS1",26,0)
 ;FALLS THRU!
"RTN","DGRPEIS1",27,0)
NEWPR ;Add entry to file #408.12
"RTN","DGRPEIS1",28,0)
 ;In - DGRP0ND=0 node of 408.12
"RTN","DGRPEIS1",29,0)
 ;     DGRPDOB=DOB of relation
"RTN","DGRPEIS1",30,0)
 ;Out - DGPRI=IFN of new 408.12 entry
"RTN","DGRPEIS1",31,0)
 K DINUM N DOB,X
"RTN","DGRPEIS1",32,0)
 I '$D(DGTSTDT) N DGTSTDT S DGTSTDT=$S($D(DGMTDT):DGMTDT,1:DT)
"RTN","DGRPEIS1",33,0)
 S DOB=$G(DGRPDOB) I 'DOB S DOB=$E(DGTSTDT,1,3)-1_"0101" ; use dob for effective date...default = Jan 1 of prior year
"RTN","DGRPEIS1",34,0)
DIC ;* GTS - DG*6.3*688 restructured the IF code and DIC("S") that follows
"RTN","DGRPEIS1",35,0)
 N DGDEPCNT
"RTN","DGRPEIS1",36,0)
 S DGDEPCNT=$$CNTDEPS^DGMTU11(DFN)
"RTN","DGRPEIS1",37,0)
 I $P(DGRP0ND,"^",2)']"" DO
"RTN","DGRPEIS1",38,0)
 .S DIC="^DG(408.11,"
"RTN","DGRPEIS1",39,0)
 .S DIC(0)="AEQMZ"
"RTN","DGRPEIS1",40,0)
 .S DIC("A")="RELATIONSHIP: "
"RTN","DGRPEIS1",41,0)
 .S DIC("S")="I Y>2,""E""_DGSEX[$P(^(0),""^"",3),$S((DGTYPE=""D"")&(+DGDEPCNT<19):1,(DGTYPE=""D"")&(+DGDEPCNT>18)&(Y>6):1,(DGTYPE=""C"")&(Y<7):1,1:0)"
"RTN","DGRPEIS1",42,0)
 I $P(DGRP0ND,"^",2)']"" D ^DIC I '$D(DTOUT),(Y'>0) W *7,"   Required!!" G DIC
"RTN","DGRPEIS1",43,0)
 I $D(DTOUT) K DTOUT S DGFL=-2 G NEWPRQ
"RTN","DGRPEIS1",44,0)
 I $P(DGRP0ND,"^",2)']"" S $P(DGRP0ND,"^",2)=+Y
"RTN","DGRPEIS1",45,0)
 D ACT^DGRPEIS2 I DGFL<0 D  G NEWPRQ
"RTN","DGRPEIS1",46,0)
 .W !?3,*7,"Entry incomplete...deleted",!
"RTN","DGRPEIS1",47,0)
 .Q:'$G(DA)!($G(DIK)'="^DGPR(408.13,")  ;defined for deps in newip
"RTN","DGRPEIS1",48,0)
 .D ^DIK
"RTN","DGRPEIS1",49,0)
 S (DIK,DIC)="^DGPR(408.12,",DIC(0)="L",DLAYGO=408.12,X=+DGRP0ND K DD,DO D FILE^DICN S DGPRI=+Y K DLAYGO
"RTN","DGRPEIS1",50,0)
 S DA=+DGPRI L +^DGPR(408.12,+DGPRI) S ^DGPR(408.12,+DGPRI,0)=DGRP0ND,^DGPR(408.12,+DGPRI,"E",0)="^408.1275D^1^1",^(1,0)=DGACT_"^"_1 D IX1^DIK L -^DGPR(408.12,+DGPRI)
"RTN","DGRPEIS1",51,0)
 D RESET^DGMTU11(DFN)
"RTN","DGRPEIS1",52,0)
 S Y=DGPRI
"RTN","DGRPEIS1",53,0)
NEWPRQ K DGACT,DGSEX,DGRPDOB,DA,DIC,DIK,DIRUT,DTOUT,DUOUT,X,Y
"RTN","DGRPEIS1",54,0)
 Q
"RTN","DGRPEIS1",55,0)
SETUP ; called from SPINACT / sets vars for ASOF tag
"RTN","DGRPEIS1",56,0)
 N FNAME S FNAME=$P($$NAME^DGMTU1(+X),",",2)
"RTN","DGRPEIS1",57,0)
 S ACT=$O(^DGPR(408.12,+X,"E","AID","")),ACT=$O(^(+ACT,0)),ACT=$G(^DGPR(408.12,+X,"E",+ACT,0))
"RTN","DGRPEIS1",58,0)
 I $P(ACT,"^",2)']"" Q  ; never active
"RTN","DGRPEIS1",59,0)
 I '$P(ACT,U,2) D  Q
"RTN","DGRPEIS1",60,0)
 .W !,"Dependent has been inactivated as of "
"RTN","DGRPEIS1",61,0)
 .S Y=+ACT
"RTN","DGRPEIS1",62,0)
 .D DD^%DT W Y H 3
"RTN","DGRPEIS1",63,0)
 S IEN=+X
"RTN","DGRPEIS1",64,0)
ASOF ;ask as of date
"RTN","DGRPEIS1",65,0)
 N LYR,SPOUSE,DGXDT
"RTN","DGRPEIS1",66,0)
 I '$D(DGTSTDT) N DGTSTDT S DGTSTDT=$S($D(DGMTDT):DGMTDT,1:DT)
"RTN","DGRPEIS1",67,0)
 S SPOUSE=$S($P($G(^DGPR(408.12,+IEN,0)),"^",2)=2:1,1:0)
"RTN","DGRPEIS1",68,0)
 S LYR=$E($$LYR^DGMTSCU1(DGTSTDT),1,3)_1231
"RTN","DGRPEIS1",69,0)
 ;I 'SPOUSE S LYR=$E($$LYR^DGMTSCU1(LYR),1,3)_1231
"RTN","DGRPEIS1",70,0)
 K DIR S DIR(0)="D^"_+ACT_":"_LYR_":AEP",DIR("A")="Date "_FNAME_" no longer a dependent"
"RTN","DGRPEIS1",71,0)
 S DIR("?",1)="Enter the date this person was no longer a dependent of the veteran.",DIR("?",2)="This could include a date of death or the date a child turned 18 for"
"RTN","DGRPEIS1",72,0)
 S DIR("?",3)="children.  For a spouse, this would be the date of divorce or date ",DIR("?",4)="of death of the spouse.  Date must be after the person became a"
"RTN","DGRPEIS1",73,0)
 S DIR("?",5)="dependent, but prior to 12/31/"_($E(LYR,1,3)+1700)_"."
"RTN","DGRPEIS1",74,0)
 I 'SPOUSE S DIR("?",6)=" ",DIR("?",7)="A person should only be inactivated if the individual was not a",DIR("?",8)="dependent at any time during the prior calendar year."
"RTN","DGRPEIS1",75,0)
 S DIR("?")=" "
"RTN","DGRPEIS1",76,0)
 I SPOUSE S DIR("?",6)=" ",DIR("?",7)="A spouse should be inactivated if the spouse and veteran were not",DIR("?",8)="married as of 12/31/"_($E(LYR,1,3)+1700)_"."
"RTN","DGRPEIS1",77,0)
 D ^DIR K DIR
"RTN","DGRPEIS1",78,0)
 I $D(DTOUT)!$D(DUOUT) S DGFL=$S($D(DTOUT):-2,1:-1) Q
"RTN","DGRPEIS1",79,0)
 S DGXDT=Y
"RTN","DGRPEIS1",80,0)
 I $E(Y,1,3)=$E(LYR,1,3) D  Q:'$G(Y)
"RTN","DGRPEIS1",81,0)
 .N DIR,DIRUT,DIROUT,DTOUT,DUOUT
"RTN","DGRPEIS1",82,0)
 .W !!,"Warning: Data will be used if dependent was active at least one day in a"
"RTN","DGRPEIS1",83,0)
 .W !,"year.  Data will not be used if inactivation is prior to 1/1/"_($E(LYR,1,3)+1700)_" or it"
"RTN","DGRPEIS1",84,0)
 .W !,"is equal to the activation date."
"RTN","DGRPEIS1",85,0)
 .S DIR(0)="Y",DIR("B")="NO",DIR("A")="Do you wish to inactivate this dependent on the selected date?"
"RTN","DGRPEIS1",86,0)
 .D ^DIR
"RTN","DGRPEIS1",87,0)
 S DA(1)=IEN,DIC="^DGPR(408.12,"_DA(1)_",""E"",",X=DGXDT,DIC(0)="L",DLAYGO=408.1275 D ^DIC S DIE=DIC,DA=+Y,DR=".02////0" D ^DIE
"RTN","DGRPEIS1",88,0)
 D RESET^DGMTU11(DFN)
"RTN","DGRPEIS1",89,0)
ASOFQ K DA,DIC,DIE,DIR,DIRUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","DGRPEIS1",90,0)
 Q
"RTN","DGRPEIS2")
0^46^B19531893
"RTN","DGRPEIS2",1,0)
DGRPEIS2 ;ALB/MIR,ERC - EDIT INCOME SCREENING DATA (SCREEN 9) ; 4/20/06 10:37am
"RTN","DGRPEIS2",2,0)
 ;;5.3;Registration;**10,45,122,653,688**;Aug 13, 1993;Build 29
"RTN","DGRPEIS2",3,0)
 ;  -Called from DGRPE to edit Scr #9 (Income Screening)
"RTN","DGRPEIS2",4,0)
EDIT9 ; Allow edit of income screening amounts (called from DGRPE)
"RTN","DGRPEIS2",5,0)
 ; In: DFN
"RTN","DGRPEIS2",6,0)
 ;     DGRPANN as string of selected items
"RTN","DGRPEIS2",7,0)
 ;     DGRPSEL as allowable groups for edit (V, S, and/or D)
"RTN","DGRPEIS2",8,0)
 ;     DGRPSELT (maybe) as type of dependent selected (V=vet,
"RTN","DGRPEIS2",9,0)
 ;        S=spouse, and D=dependent).  If not defined, it is set
"RTN","DGRPEIS2",10,0)
 ;        to DGRPSEL.
"RTN","DGRPEIS2",11,0)
 N MTVER,DGMTI,DGTY,DGIAIYR,DGTYEXT
"RTN","DGRPEIS2",12,0)
 I 'DGRPANN Q  ; if no string passed in (nothing selected)
"RTN","DGRPEIS2",13,0)
 S DGRPSELT=$G(DGRPSELT) I DGRPSELT']"" S DGRPSELT=DGRPSEL ; if no V, S, or D preface, edit all
"RTN","DGRPEIS2",14,0)
 D ALL^DGMTU21(DFN,"VSD",DT,"IP")
"RTN","DGRPEIS2",15,0)
 S DGIAIYR=$P($G(^DGMT(408.21,+$G(DGINC("V")),0)),"^",1)
"RTN","DGRPEIS2",16,0)
 S DGIAIYR=$E(DGIAIYR,1,3)+1700
"RTN","DGRPEIS2",17,0)
 S DGMTI=+$$LST^DGMTU(DFN,DT)
"RTN","DGRPEIS2",18,0)
 I (+DGMTI>0),(+DGIAIYR>0) DO
"RTN","DGRPEIS2",19,0)
 . S DGTY=$E($P(^DGMT(408.31,+DGMTI,0),"^",1),1,3)
"RTN","DGRPEIS2",20,0)
 . S DGTYEXT=DGTY+1700
"RTN","DGRPEIS2",21,0)
 . S:(DGTYEXT=DGIAIYR+1) MTVER=$P($G(^DGMT(408.31,+DGMTI,2)),"^",11)
"RTN","DGRPEIS2",22,0)
 . S:(DGTYEXT'=(DGIAIYR+1)) MTVER=$$VER^DGMTUTL3(.DGINC)
"RTN","DGRPEIS2",23,0)
 I (+DGMTI'>0)!(+DGIAIYR'>0) S MTVER=$$VER^DGMTUTL3(.DGINC)
"RTN","DGRPEIS2",24,0)
 I '$G(DGREL("V")) D HELP^DGRPEIS3 G EDIT9Q
"RTN","DGRPEIS2",25,0)
 I DGRPSELT["V" S DGPRI=+DGREL("V"),DGMTED=$D(DGMTED("V")) D EDT
"RTN","DGRPEIS2",26,0)
 I '$G(DGRPOUT)&(DGRPSELT["S") S DGPRI=+DGREL("S"),DGMTED=$D(DGMTED("S")) D EDT
"RTN","DGRPEIS2",27,0)
 I '$G(DGRPOUT)&(DGRPSELT["D") F DGCNT=0:0 S DGCNT=$O(DGREL("D",DGCNT)) Q:'DGCNT!($G(DGRPOUT))  S DGPRI=+DGREL("D",DGCNT),DGMTED=$D(DGMTED("D",DGCNT)) D EDT
"RTN","DGRPEIS2",28,0)
 S DGFL=$G(DGFL)
"RTN","DGRPEIS2",29,0)
 K DGCNT
"RTN","DGRPEIS2",30,0)
EDIT9Q Q
"RTN","DGRPEIS2",31,0)
 ;
"RTN","DGRPEIS2",32,0)
EDT ;Edit inc and nt worth
"RTN","DGRPEIS2",33,0)
 N DA,DGERR,DGFIN,DGINI,DGIRI,DIE,DR,OK
"RTN","DGRPEIS2",34,0)
 I '$D(DGTSTDT) N DGTSTDT S DGTSTDT=$S($D(DGMTDT):DGMTDT,1:DT)
"RTN","DGRPEIS2",35,0)
 D GETIENS^DGMTU2(DFN,+DGPRI,DGTSTDT) G EDTQ:DGERR
"RTN","DGRPEIS2",36,0)
 I DGRPSELT]"" W !!,"NAME: ",$$NAME^DGMTU1(DGPRI)
"RTN","DGRPEIS2",37,0)
 I DGMTED W "    [Must edit through means test!!]" Q
"RTN","DGRPEIS2",38,0)
 S DA=DGINI,DIE="^DGMT(408.21,"
"RTN","DGRPEIS2",39,0)
 S:(+MTVER<1) DR="[DGRP ENTER/EDIT ANNUAL INCOME]"
"RTN","DGRPEIS2",40,0)
 S:(+MTVER=1) DR="[DGRP V1 ENTER/EDIT ANNUAL INC]"
"RTN","DGRPEIS2",41,0)
 D ^DIE S:'$D(DGFIN) DGRPOUT=1
"RTN","DGRPEIS2",42,0)
 I $D(DTOUT) S DGFL=-2,DGRPOUT=1 Q
"RTN","DGRPEIS2",43,0)
 I 'DGRPOUT S DR="103////^S X=DUZ;104///^S X=""NOW""" D ^DIE
"RTN","DGRPEIS2",44,0)
 I 'DGRPOUT&'$D(DGINC("V")) D GETIENS^DGMTU2(DFN,+DGREL("V"),DT) S DGINC("V")=DGINI G:DGERR EDTQ
"RTN","DGRPEIS2",45,0)
 I 'DGRPOUT&($G(DA)'=$G(DGINC("V"))) S DA=DGINC("V") D ^DIE
"RTN","DGRPEIS2",46,0)
 ;
"RTN","DGRPEIS2",47,0)
 ;log patient for transmission to HEC if DCD criteria are met
"RTN","DGRPEIS2",48,0)
 D LOGDCD^IVMCUC($G(DFN))
"RTN","DGRPEIS2",49,0)
 ;
"RTN","DGRPEIS2",50,0)
EDTQ Q
"RTN","DGRPEIS2",51,0)
 ;
"RTN","DGRPEIS2",52,0)
SPOUSE ; make sure marital status, spouse is up-to-date
"RTN","DGRPEIS2",53,0)
 ; input -- DFN
"RTN","DGRPEIS2",54,0)
 ;          DGREL("V") as returned from GETREL for veteran
"RTN","DGRPEIS2",55,0)
 ;  used -- DGSPFL as VETS marital status
"RTN","DGRPEIS2",56,0)
 N DGMS
"RTN","DGRPEIS2",57,0)
 D GETIENS^DGMTU2(DFN,+DGREL("V"),DT)
"RTN","DGRPEIS2",58,0)
 S DGMS=$P($G(^DIC(11,+$P($G(^DPT(DFN,0)),"^",5),0)),"^",3),DGMS=$S("^M^S^"[("^"_DGMS_"^"):"YES",DGMS']"":"",1:"NO")
"RTN","DGRPEIS2",59,0)
 D GETREL^DGMTU11(DFN,"S",DT,$G(DGMTI)) I $D(DGREL("S")) S DGMS="YES"
"RTN","DGRPEIS2",60,0)
 ;
"RTN","DGRPEIS2",61,0)
SPOUSE1 S DIE="^DGMT(408.22,",DA=DGIRI,DR=".05"_$S($G(DGMTI):"///",1:"//")_"^S X=DGMS" D ^DIE K DIE,DA,DR
"RTN","DGRPEIS2",62,0)
 S DGSPFL=$P($G(^DGMT(408.22,DGIRI,0)),"^",5)
"RTN","DGRPEIS2",63,0)
 Q
"RTN","DGRPEIS2",64,0)
 ;
"RTN","DGRPEIS2",65,0)
ACT ; ask date active as of (use dob if KIDS)
"RTN","DGRPEIS2",66,0)
 ; In:  DOB
"RTN","DGRPEIS2",67,0)
 ;      DGRP0ND as 0 node of PATIENT RELATION file (relation=piece 2)
"RTN","DGRPEIS2",68,0)
 ;Out:  DGACT as date patient should be activated as of
"RTN","DGRPEIS2",69,0)
 ;      DGFL as -1 if '^' or -2 if time-out
"RTN","DGRPEIS2",70,0)
 N RELATION,X,Y
"RTN","DGRPEIS2",71,0)
 S DGFL=$G(DGFL),RELATION=$P(DGRP0ND,"^",2)
"RTN","DGRPEIS2",72,0)
 I RELATION=1 S DGACT=DOB Q  ;use DOB is self
"RTN","DGRPEIS2",73,0)
 I "^3^4^"[("^"_RELATION_"^") S Y=DOB X ^DD("DD") S DIR("B")=Y ;if son or daughter, use DOB as default
"RTN","DGRPEIS2",74,0)
 ;
"RTN","DGRPEIS2",75,0)
READ ; get active as of date
"RTN","DGRPEIS2",76,0)
 ; DIR("B") set before entry
"RTN","DGRPEIS2",77,0)
 ; DOB passed in as input
"RTN","DGRPEIS2",78,0)
 N DGDT,DGISDT,DGDTSPEC,VDOB
"RTN","DGRPEIS2",79,0)
 I '$D(DGTSTDT) N DGTSTDT S DGTSTDT=$S($D(DGMTDT):DGMTDT,1:DT)
"RTN","DGRPEIS2",80,0)
 S DGDT=$E(DGTSTDT,1,3)-1_"1231",DGISDT=$E(DGDT,1,3)+1700,DGACT=DOB
"RTN","DGRPEIS2",81,0)
 S DGDTSPEC=$S($G(DGEDDEP):":EPX",1:":EP")
"RTN","DGRPEIS2",82,0)
 ;S DIR(0)="D^"_DOB_":"_DGDT_DGDTSPEC,DIR("A")="EFFECTIVE DATE"
"RTN","DGRPEIS2",83,0)
 S DIR(0)="D^"_DOB
"RTN","DGRPEIS2",84,0)
 I RELATION=2 S VDOB=$P($G(^DPT(DFN,0)),"^",3) S:(VDOB>DOB) $P(DIR(0),"^",2)=VDOB
"RTN","DGRPEIS2",85,0)
 S DIR(0)=DIR(0)_":"_DGDT_DGDTSPEC,DIR("A")="EFFECTIVE DATE"
"RTN","DGRPEIS2",86,0)
 S DIR("?")="^D HELP1^DGRPEIS3(DGISDT)"
"RTN","DGRPEIS2",87,0)
 D ^DIR K DIR I Y'>0 S DGFL=$S($D(DTOUT):-2,$D(DUOUT)!$D(DIRUT):-1,1:0) G ACTQ:DGFL,READ
"RTN","DGRPEIS2",88,0)
 S DGACT=Y
"RTN","DGRPEIS2",89,0)
ACTQ K DIRUT,DTOUT,DUOUT
"RTN","DGRPEIS2",90,0)
 Q
"RTN","DGRPEIS2",91,0)
RELTYPE(RELIEN,TYPE) ;* Return type of relationship
"RTN","DGRPEIS2",92,0)
 ;
"RTN","DGRPEIS2",93,0)
 ;* INPUT
"RTN","DGRPEIS2",94,0)
 ;    RELIEN - IEN from Income Person file (408.13)
"RTN","DGRPEIS2",95,0)
 ;    TYPE   - 0: Pull specific relationship from Relationship file
"RTN","DGRPEIS2",96,0)
 ;           - 1: Just return "spouse", "child", "dependent"
"RTN","DGRPEIS2",97,0)
 ;
"RTN","DGRPEIS2",98,0)
 ;* OUTPUT
"RTN","DGRPEIS2",99,0)
 ;    DGPATREL - Relationship value
"RTN","DGRPEIS2",100,0)
 ;
"RTN","DGRPEIS2",101,0)
 N DGPTRLIN,DGRELIEN,DGPATREL
"RTN","DGRPEIS2",102,0)
 S TYPE=+$G(TYPE)
"RTN","DGRPEIS2",103,0)
 I +$G(RELIEN)>0 DO
"RTN","DGRPEIS2",104,0)
 .S DGPTRLIN=""
"RTN","DGRPEIS2",105,0)
 .S DGPTRLIN=$O(^DGPR(408.12,"C",RELIEN_";DGPR(408.13,",DGPTRLIN))
"RTN","DGRPEIS2",106,0)
 .S DGRELIEN=$P($G(^DGPR(408.12,DGPTRLIN,0)),"^",2)
"RTN","DGRPEIS2",107,0)
 .S DGPATREL=$P($G(^DG(408.11,DGRELIEN,0)),"^",1)
"RTN","DGRPEIS2",108,0)
 .S:DGPATREL']"" DGPATREL="dependent"
"RTN","DGRPEIS2",109,0)
 .I +TYPE=1 S DGPATREL=$S(DGPATREL["SPOUSE":"spouse",($G(DGRPS)=8):"relative",$G(DGSCR8):"relative",1:"child")
"RTN","DGRPEIS2",110,0)
 I +$G(RELIEN)'>0 DO
"RTN","DGRPEIS2",111,0)
 .S:$G(DGANS)="S" DGPATREL="spouse"
"RTN","DGRPEIS2",112,0)
 .S:$G(DGANS)="C" DGPATREL="child"
"RTN","DGRPEIS2",113,0)
 .S:$G(DGANS)="D" DGPATREL="relative"
"RTN","DGRPEIS2",114,0)
 S:DGPATREL="" DGPATREL="relative"
"RTN","DGRPEIS2",115,0)
 Q DGPATREL
"RTN","DGRPEIS3")
0^68^B88249878
"RTN","DGRPEIS3",1,0)
DGRPEIS3 ;ALB/CAW,EG,ERC,BAJ - INCOME SCREENING DATA (CON'T) ; 1/3/06 9:03am
"RTN","DGRPEIS3",2,0)
 ;;5.3;Registration;**45,624,659,653,688**;Aug 13, 1993;Build 29
"RTN","DGRPEIS3",3,0)
 ;
"RTN","DGRPEIS3",4,0)
HELP ; Display information when veteran's DOB is past the income year
"RTN","DGRPEIS3",5,0)
 ;
"RTN","DGRPEIS3",6,0)
 W !!,"Please return to screen 8 and check the veteran's effective date."
"RTN","DGRPEIS3",7,0)
 W !,"The effective date was created based on the veteran's date of birth."
"RTN","DGRPEIS3",8,0)
 W !,"You might also want to check the date of birth for this veteran."
"RTN","DGRPEIS3",9,0)
 W ! S DIR(0)="E" D ^DIR K DIR W !
"RTN","DGRPEIS3",10,0)
 Q
"RTN","DGRPEIS3",11,0)
 ;
"RTN","DGRPEIS3",12,0)
WRT ; Write age statement
"RTN","DGRPEIS3",13,0)
 Q:'$G(DGMTI)
"RTN","DGRPEIS3",14,0)
 W !!,"This dependent is 18 years or older.  To list this person as a dependent"
"RTN","DGRPEIS3",15,0)
 W !,"they have to be:"
"RTN","DGRPEIS3",16,0)
 W !,"     1.  An UNMARRIED child who is under the age of 18."
"RTN","DGRPEIS3",17,0)
 W !,"     2.  Between the ages of 18 and 23 and attending school."
"RTN","DGRPEIS3",18,0)
 W !,"     3.  An unmarried child over the age of 17 who became permanently"
"RTN","DGRPEIS3",19,0)
 W !,"         incapable of self support before the age of 18."
"RTN","DGRPEIS3",20,0)
 Q
"RTN","DGRPEIS3",21,0)
 ;
"RTN","DGRPEIS3",22,0)
EDIT ;CALLED FROM ROUTINE DGRPEIS
"RTN","DGRPEIS3",23,0)
 N DGEXIT,SSNV,SSNVL,SSNUM
"RTN","DGRPEIS3",24,0)
 S DGEDDEP=1
"RTN","DGRPEIS3",25,0)
 S DGFL=$G(DGFL)
"RTN","DGRPEIS3",26,0)
 S DATE=$S($G(DATE):DATE,1:$$LYR^DGMTSCU1(DT))
"RTN","DGRPEIS3",27,0)
 S X=$P(DGPREF,"^",2)
"RTN","DGRPEIS3",28,0)
 S DGTYPE=$G(DGTYPE),DGTYPE=$S(DGTYPE']"":"S",DGTYPE="C":"C",DGTYPE="D":"D",1:"S")
"RTN","DGRPEIS3",29,0)
 S DIE="^"_$P(X,";",2),DA=+X
"RTN","DGRPEIS3",30,0)
 ;
"RTN","DGRPEIS3",31,0)
 ; DG*5.3*653 ERC Pseudo SSN Reason changes
"RTN","DGRPEIS3",32,0)
 ; DG*5.3*688 BAJ SSN Verification changes
"RTN","DGRPEIS3",33,0)
 ; 
"RTN","DGRPEIS3",34,0)
 ; Retrieve SSN VERIFIED statusrequired 
"RTN","DGRPEIS3",35,0)
 S SSNVL=DIE_DA_",0)"
"RTN","DGRPEIS3",36,0)
 S SSNUM=$P(@SSNVL,"^",9),SSNV=$P(@SSNVL,"^",11)
"RTN","DGRPEIS3",37,0)
 ;
"RTN","DGRPEIS3",38,0)
 ; Lock SSN if SSN is VERIFIED
"RTN","DGRPEIS3",39,0)
 S DR=$S(SSNV=4:".01;.02;.03;S UPARROW=1",1:".01;.02;.03;.09;S UPARROW=1")
"RTN","DGRPEIS3",40,0)
 S DGEXIT=0
"RTN","DGRPEIS3",41,0)
 K DG,DQ D ^DIE I $D(DTOUT)!$D(DUOUT)!'$D(UPARROW) S DGFL=$S($D(DTOUT):-2,1:-1) S DGEXIT=1 D EDITQ Q
"RTN","DGRPEIS3",42,0)
 I SSNV="V" W !,"SOCIAL SECURITY NUMBER "_SSNUM_" has been verified by SSA -- NO EDITING"
"RTN","DGRPEIS3",43,0)
 ;
"RTN","DGRPEIS3",44,0)
 ; changes to make Pseudo SSN Reason required - DG*5.3*653, ERC
"RTN","DGRPEIS3",45,0)
 S DGEXIT=0 I $P($G(@(DIE_DA_",0)")),U,9)["P" D SSNREA(.DGEXIT) I DGEXIT=1 Q
"RTN","DGRPEIS3",46,0)
 I DGTYPE="S" D
"RTN","DGRPEIS3",47,0)
 . S DR="1.1;S UPARROW=1"
"RTN","DGRPEIS3",48,0)
 . K DG,DQ D ^DIE I $D(DTOUT)!$D(DUOUT)!'$D(UPARROW) S DGFL=$S($D(DTOUT):-2,1:-1) S DGEXIT=1
"RTN","DGRPEIS3",49,0)
 I DGEXIT=1 Q
"RTN","DGRPEIS3",50,0)
 ;
"RTN","DGRPEIS3",51,0)
 ; ; end SSN Verification & Pseudo SSN Reason changes
"RTN","DGRPEIS3",52,0)
 ; 
"RTN","DGRPEIS3",53,0)
 S DOB=$P($G(@(DIE_DA_",0)")),U,3)
"RTN","DGRPEIS3",54,0)
 ;
"RTN","DGRPEIS3",55,0)
 N DGVADD,DGSADD,DGIPIEN,DGUQTLP,SPOUSE,DGFL,DGRPI
"RTN","DGRPEIS3",56,0)
 S (DGVADD,DGSADD,DGIPIEN,DGUQTLP)=0
"RTN","DGRPEIS3",57,0)
 S SPOUSE=$S(DGTYPE="S":1,1:0),DGFL=$G(DGFL)
"RTN","DGRPEIS3",58,0)
 ;
"RTN","DGRPEIS3",59,0)
 ; if veteran address is not USA, skip this ^DIR call
"RTN","DGRPEIS3",60,0)
 I $$FORIEN^DGADDUTL($P($G(^DPT(DFN,.11)),U,10)) G FOREIGN
"RTN","DGRPEIS3",61,0)
 ; Is spouse/dependent address same as patient address?
"RTN","DGRPEIS3",62,0)
 K DIR
"RTN","DGRPEIS3",63,0)
 S DIR(0)="YAO^^"
"RTN","DGRPEIS3",64,0)
 S DIR("A")="STREET ADDRESS SAME AS PATIENT'S: "
"RTN","DGRPEIS3",65,0)
 S DIR("B")="YES"
"RTN","DGRPEIS3",66,0)
 S DIR("?")="Enter 'Y' if the "_$S(SPOUSE:"spouse",1:"child")_" has the same address as the patient, otherwise enter 'N'."
"RTN","DGRPEIS3",67,0)
 D ^DIR
"RTN","DGRPEIS3",68,0)
 S DGVADD=+Y
"RTN","DGRPEIS3",69,0)
 K Y,DIR
"RTN","DGRPEIS3",70,0)
FOREIGN ;tag added for rejoining if country not USA
"RTN","DGRPEIS3",71,0)
 S DGIPIEN=$$SPSCHK^DGRPEIS(DFN)
"RTN","DGRPEIS3",72,0)
 I 'DGVADD,(DGTYPE'="S"),DGIPIEN D
"RTN","DGRPEIS3",73,0)
 . K DIR,Y
"RTN","DGRPEIS3",74,0)
 . S DIR(0)="YAO^^"
"RTN","DGRPEIS3",75,0)
 . S DIR("A")="STREET ADDRESS SAME AS SPOUSE'S: "
"RTN","DGRPEIS3",76,0)
 . S DIR("B")="YES"
"RTN","DGRPEIS3",77,0)
 . S DIR("?")="Enter 'Y' if the child has the same address as the spouse, otherwise enter 'N'."
"RTN","DGRPEIS3",78,0)
 . D ^DIR
"RTN","DGRPEIS3",79,0)
 . S DGSADD=+Y
"RTN","DGRPEIS3",80,0)
 . K Y,DIR
"RTN","DGRPEIS3",81,0)
 ;
"RTN","DGRPEIS3",82,0)
 ; If spouse/dependent address is same as patient's, set spouse/dep address
"RTN","DGRPEIS3",83,0)
 I DGVADD!DGSADD D
"RTN","DGRPEIS3",84,0)
 . I DGVADD D PATASET^DGRPEIS(DFN) ;*Set to Patient address
"RTN","DGRPEIS3",85,0)
 . I DGSADD D SPSASET^DGRPEIS(DGIPIEN) ;*Set to Spouse address
"RTN","DGRPEIS3",86,0)
 . N FLD,FDA S FLD=0 F  S FLD=$O(ANS(FLD)) Q:'FLD  D
"RTN","DGRPEIS3",87,0)
 . . S FDA(408.13,DA_",",FLD)=ANS(FLD) K ANS(FLD)
"RTN","DGRPEIS3",88,0)
 . D FILE^DIE("","FDA","")
"RTN","DGRPEIS3",89,0)
 ;
"RTN","DGRPEIS3",90,0)
 ;Spouse/dep address not same as patient/spouse address; prompt for it
"RTN","DGRPEIS3",91,0)
 I 'DGVADD,'DGSADD D
"RTN","DGRPEIS3",92,0)
 . S DR="1.2;S:X']"""" Y=1.5;1.3;S:X']"""" Y=1.5;1.4;1.5;1.6;1.7;1.8;S UPARROW=1"
"RTN","DGRPEIS3",93,0)
 . K DG,DQ D ^DIE
"RTN","DGRPEIS3",94,0)
 I $D(DTOUT)!$D(DUOUT)!'$D(UPARROW) S DGFL=$S($D(DTOUT):-2,1:-1) D EDITQ Q
"RTN","DGRPEIS3",95,0)
 ;
"RTN","DGRPEIS3",96,0)
 I DGTYPE'="S" K UPARROW S DIE="^DGPR(408.12,",DA=+DGPREF,DR=".02;S UPARROW=1" K DG,DQ D ^DIE I $D(DTOUT)!$D(DUOUT)!'$D(UPARROW) S DGFL=$S($D(DTOUT):-2,1:-1)
"RTN","DGRPEIS3",97,0)
 S RELATION=$P($G(^DGPR(408.12,+DGPREF,0)),"^",2)
"RTN","DGRPEIS3",98,0)
 S DGX=$O(^DGPR(408.12,+DGPREF,"E","AID","")),DGMIEN=$O(^(+DGX,0))
"RTN","DGRPEIS3",99,0)
EDACTDT I $G(^DGPR(408.12,+DGPREF,"E",+DGMIEN,0)) D  G:$G(DGFL)<0 EDITQ
"RTN","DGRPEIS3",100,0)
 . S (DGACT,Y)=+^(0) X ^DD("DD")
"RTN","DGRPEIS3",101,0)
 . S DIR("B")=Y
"RTN","DGRPEIS3",102,0)
 . D READ^DGRPEIS2
"RTN","DGRPEIS3",103,0)
 . I -DGACT'=DGX W !,"Use 'Expand Dependent' option to change effective date." H 2 S DGFL=-1 Q
"RTN","DGRPEIS3",104,0)
 . Q:$G(DGFL)<0
"RTN","DGRPEIS3",105,0)
 . S DIE="^DGPR(408.12,"_+DGPREF_",""E"",",DA(1)=+DGPREF,DA=DGMIEN,DR=".01///"_DGACT
"RTN","DGRPEIS3",106,0)
 . D ^DIE
"RTN","DGRPEIS3",107,0)
 I DGTYPE="S" S X=+DGPREF D SETUP^DGRPEIS1
"RTN","DGRPEIS3",108,0)
 K DGACT,DGMIEN,RELATION,DA,DIE,DR,UPARROW,DTOUT,DUOUT,DIRUT
"RTN","DGRPEIS3",109,0)
EDITQ K DA,DIE,DIRUT,DR,DTOUT,DUOUT
"RTN","DGRPEIS3",110,0)
 Q
"RTN","DGRPEIS3",111,0)
 ;
"RTN","DGRPEIS3",112,0)
SSNREA(DGEXIT) ;if SSN is pseudo Pseudo SSN Reason is required - DG*5.3*653
"RTN","DGRPEIS3",113,0)
 N I,EXIT
"RTN","DGRPEIS3",114,0)
 S EXIT=0
"RTN","DGRPEIS3",115,0)
 F  D  Q:EXIT
"RTN","DGRPEIS3",116,0)
 . S DR=$S(DIE["DGPR":.1,1:.0906)_";S UPARROW=1"
"RTN","DGRPEIS3",117,0)
 . K DG,DQ D ^DIE I $D(DTOUT)!$D(DUOUT)!'$D(UPARROW) S DGFL=$S($D(DTOUT):-2,1:-1) S (EXIT,DGEXIT)=1 Q
"RTN","DGRPEIS3",118,0)
 . I $P($G(@(DIE_DA_",0)")),U,10)']"" S EXIT=0 Q
"RTN","DGRPEIS3",119,0)
 . S EXIT=1
"RTN","DGRPEIS3",120,0)
 Q
"RTN","DGRPEIS3",121,0)
HELP1(DGISDT) ; Displays the help for the active/inactive prompt
"RTN","DGRPEIS3",122,0)
 ;
"RTN","DGRPEIS3",123,0)
 D CLEAR^VALM1
"RTN","DGRPEIS3",124,0)
 W !,"Enter the date this person first became a dependent of the veteran."
"RTN","DGRPEIS3",125,0)
 W !,"In the case of a spouse, this would be the date of marriage.  For"
"RTN","DGRPEIS3",126,0)
 W !,"a child, this would be the date of birth or date of adoption.  For a"
"RTN","DGRPEIS3",127,0)
 W !,"stepchild, this would be the date of marriage to the child's parent."
"RTN","DGRPEIS3",128,0)
 W !!,"Date must be before DEC 31, "_DGISDT_" as dependents are collected for the"
"RTN","DGRPEIS3",129,0)
 W !,"prior calendar year only."
"RTN","DGRPEIS3",130,0)
 S VALMBCK="R"
"RTN","DGRPEIS3",131,0)
 Q
"RTN","DGRPEIS3",132,0)
 ;
"RTN","DGRPEIS3",133,0)
HELPDOB ; * Displays help for Date of Birth
"RTN","DGRPEIS3",134,0)
 N DGRDVAR
"RTN","DGRPEIS3",135,0)
 I X="?" D  Q
"RTN","DGRPEIS3",136,0)
 . W !?5,"Enter the date this dependent was born.  The date must not be during the"
"RTN","DGRPEIS3",137,0)
 . W !?5,"current calendar year.  Only persons that were dependents before the"
"RTN","DGRPEIS3",138,0)
 . W !?5,"current year may be entered.",!
"RTN","DGRPEIS3",139,0)
 . I $G(DA) W !,"Enter RETURN to continue:" R DGRDVAR:DTIME W !
"RTN","DGRPEIS3",140,0)
 ;
"RTN","DGRPEIS3",141,0)
 W !?8,"Enter the date on which this relative was born.  This information is"
"RTN","DGRPEIS3",142,0)
 W !?8,"necessary for use in the income screening and means test portions of"
"RTN","DGRPEIS3",143,0)
 W !?8,"MAS."
"RTN","DGRPEIS3",144,0)
 W !!?8,"The date entered must not be during the current calendar year.  That"
"RTN","DGRPEIS3",145,0)
 W !?8,"is, it must be on or before December 31 or the prior calendar year."
"RTN","DGRPEIS3",146,0)
 I $G(DA) W ! S DIR(0)="E" D ^DIR Q:+Y<1
"RTN","DGRPEIS3",147,0)
 W !!?8,"The reason for this is that this data is used for collecting income"
"RTN","DGRPEIS3",148,0)
 W !?8,"information for the purposes of comparing this data with the Internal"
"RTN","DGRPEIS3",149,0)
 W !?8,"Revenue Service (IRS).  Children born during the calendar year cannot"
"RTN","DGRPEIS3",150,0)
 W !?8,"be entered until next year."
"RTN","DGRPEIS3",151,0)
 I $G(DA) W !!,"Enter RETURN to continue:" R DGRDVAR:DTIME W !
"RTN","DGRPEIS3",152,0)
 Q
"RTN","DGRPEIS3",153,0)
 ;
"RTN","DGRPEIS3",154,0)
HELPMN ; * Displays help for Spouse Maiden Name
"RTN","DGRPEIS3",155,0)
 W !?8,"Enter the spouse's maiden name in 'LAST,FIRST MIDDLE SUFFIX' format."
"RTN","DGRPEIS3",156,0)
 W !?8,"Entry of the LAST name only is permitted and the comma may be omitted."
"RTN","DGRPEIS3",157,0)
 W !?8,"If the response contains no comma, one will be appended to the value."
"RTN","DGRPEIS3",158,0)
 W !?8,"Including the comma, the value must be at least 3 characters in length.",!
"RTN","DGRPEIS3",159,0)
 Q
"RTN","DGRPEIS3",160,0)
 ;
"RTN","DGRPEIS3",161,0)
HELPSA1 ; * Displays help for Street Address 1
"RTN","DGRPEIS3",162,0)
 N DGRELTP
"RTN","DGRPEIS3",163,0)
 S DGRELTP=$$RELTYPE^DGRPEIS2($G(DA),1)
"RTN","DGRPEIS3",164,0)
 W !,"If a "_DGRELTP_"'s name has been specified, enter the first line of"
"RTN","DGRPEIS3",165,0)
 W !,"that person's street address [3-30 characters]; otherwise this field"
"RTN","DGRPEIS3",166,0)
 W !,"may be left blank.  This field cannot be deleted as long as a "_DGRELTP_"'s"
"RTN","DGRPEIS3",167,0)
 W !,"name is on file."
"RTN","DGRPEIS3",168,0)
 I $G(DA),(X="?") W !
"RTN","DGRPEIS3",169,0)
 Q
"RTN","DGRPEIS3",170,0)
 ;
"RTN","DGRPEIS3",171,0)
HELPSA2 ; * Displays help for Street Address 2
"RTN","DGRPEIS3",172,0)
 N DGRELTP
"RTN","DGRPEIS3",173,0)
 S DGRELTP=$$RELTYPE^DGRPEIS2($G(DA),1)
"RTN","DGRPEIS3",174,0)
 W !,"If a "_DGRELTP_"'s name has been specified, enter the second line of"
"RTN","DGRPEIS3",175,0)
 W !,"that person's street address [3-30 characters]; otherwise this field"
"RTN","DGRPEIS3",176,0)
 W !,"may be left blank.  This field cannot be deleted as long as a "_DGRELTP_"'s"
"RTN","DGRPEIS3",177,0)
 W !,"name is on file."
"RTN","DGRPEIS3",178,0)
 I $G(DA),(X="?") W !
"RTN","DGRPEIS3",179,0)
 Q
"RTN","DGRPEIS3",180,0)
 ;
"RTN","DGRPEIS3",181,0)
HELPSA3 ; * Displays help for Street Address 3
"RTN","DGRPEIS3",182,0)
 N DGRELTP
"RTN","DGRPEIS3",183,0)
 S DGRELTP=$$RELTYPE^DGRPEIS2($G(DA),1)
"RTN","DGRPEIS3",184,0)
 W !,"If a "_DGRELTP_"'s name has been specified, enter the third line of"
"RTN","DGRPEIS3",185,0)
 W !,"that person's street address [3-30 characters]; otherwise this field"
"RTN","DGRPEIS3",186,0)
 W !,"may be left blank.  This field cannot be deleted as long as a "_DGRELTP_"'s"
"RTN","DGRPEIS3",187,0)
 W !,"name is on file."
"RTN","DGRPEIS3",188,0)
 I $G(DA),(X="?") W !
"RTN","DGRPEIS3",189,0)
 Q
"RTN","DGRPEIS3",190,0)
 ;
"RTN","DGRPEIS3",191,0)
HELPCITY ; * Displays help for City
"RTN","DGRPEIS3",192,0)
 N DGRELTP
"RTN","DGRPEIS3",193,0)
 S DGRELTP=$$RELTYPE^DGRPEIS2($G(DA),1)
"RTN","DGRPEIS3",194,0)
 W !,"If a "_DGRELTP_"'s name has been specified, enter the city in which"
"RTN","DGRPEIS3",195,0)
 W !,"that person resides [3-30 characters]; otherwise this field may be"
"RTN","DGRPEIS3",196,0)
 W !,"left blank.  This field cannot be deleted as long as a "_DGRELTP_"'s"
"RTN","DGRPEIS3",197,0)
 W !,"name is on file."
"RTN","DGRPEIS3",198,0)
 I $G(DA),(X="?") W !
"RTN","DGRPEIS3",199,0)
 Q
"RTN","DGRPEIS3",200,0)
 ;
"RTN","DGRPEIS3",201,0)
HELPSTAT ; * Displays help for the state
"RTN","DGRPEIS3",202,0)
 N DGRELTP,DIRA,DGRDVAR
"RTN","DGRPEIS3",203,0)
 S DGRELTP=$$RELTYPE^DGRPEIS2($G(DA),1)
"RTN","DGRPEIS3",204,0)
 W !,"If a "_DGRELTP_"'s name has been specified, select the state in which"
"RTN","DGRPEIS3",205,0)
 W !,"that person resides; otherwise this field may be left blank.  This"
"RTN","DGRPEIS3",206,0)
 W !,"field cannot be deleted as long as a "_DGRELTP_"'s name is on file.",!
"RTN","DGRPEIS3",207,0)
 ;
"RTN","DGRPEIS3",208,0)
 Q:X="?"
"RTN","DGRPEIS3",209,0)
 W !,"Enter RETURN to continue:" R DGRDVAR:DTIME
"RTN","DGRPEIS3",210,0)
 Q
"RTN","DGRPEIS3",211,0)
 ;
"RTN","DGRPEIS3",212,0)
HELPZIP ; * Displays help for the Zip code
"RTN","DGRPEIS3",213,0)
 N DGRELTP
"RTN","DGRPEIS3",214,0)
 S DGRELTP=$$RELTYPE^DGRPEIS2($G(DA),1)
"RTN","DGRPEIS3",215,0)
 W !,"Answer with the 5 digit format (e.g. 12345) or the nine digit"
"RTN","DGRPEIS3",216,0)
 W !,"format (e.g. 12345-6789 or 123456789).  This is related to the"
"RTN","DGRPEIS3",217,0)
 W !,DGRELTP_"'s address."
"RTN","DGRPEIS3",218,0)
 I $G(DA),(X="?") W !
"RTN","DGRPEIS3",219,0)
 Q
"RTN","DGRPEIS3",220,0)
HELPPHON ; * Displays help for the Phone number
"RTN","DGRPEIS3",221,0)
 N DGRELTP
"RTN","DGRPEIS3",222,0)
 S DGRELTP=$$RELTYPE^DGRPEIS2($G(DA),1)
"RTN","DGRPEIS3",223,0)
 W !,"If a "_DGRELTP_"'s name has been specified, enter the "_DGRELTP_"'s"
"RTN","DGRPEIS3",224,0)
 W !,"phone number [4-20 characters], otherwise this field may be left"
"RTN","DGRPEIS3",225,0)
 W !,"blank.  This field cannot be deleted as long as a "_DGRELTP_"'s"
"RTN","DGRPEIS3",226,0)
 W !,"name is on file."
"RTN","DGRPEIS3",227,0)
 I $G(DA),(X="?") W !
"RTN","DGRPEIS3",228,0)
 Q
"RTN","DGRPLE")
0^41^B21407706
"RTN","DGRPLE",1,0)
DGRPLE ;WAS/ERC/RMM,ALB/CKN - REGISTRATION EDITS OF PURPLE HEART FIELDS ; 11/22/05 4:13pm
"RTN","DGRPLE",2,0)
 ;;5.3;Registration;**314,343,377,431,653,688**;Aug 13, 1993;Build 29
"RTN","DGRPLE",3,0)
 ;
"RTN","DGRPLE",4,0)
DIV() ;Get Institution Name
"RTN","DGRPLE",5,0)
 ;If site is multi-divisional then ask user for division
"RTN","DGRPLE",6,0)
 ;
"RTN","DGRPLE",7,0)
 ; DBIA: #10112 - supported API $$SITE^VASITE and $$PRIM^VASITE
"RTN","DGRPLE",8,0)
 ;                for retrieving Institution name
"RTN","DGRPLE",9,0)
 ;
"RTN","DGRPLE",10,0)
 ; Input: none
"RTN","DGRPLE",11,0)
 ;
"RTN","DGRPLE",12,0)
 ; Output:  DGNAM - Institution name
"RTN","DGRPLE",13,0)
 ;
"RTN","DGRPLE",14,0)
 N DGDIV,DGSTN,DGNAM
"RTN","DGRPLE",15,0)
 S DGDIV=$S($D(^DG(40.8,"B")):$$MULTDIV,1:$$PRIM^VASITE)
"RTN","DGRPLE",16,0)
 S DGSTN=$$SITE^VASITE(,DGDIV)
"RTN","DGRPLE",17,0)
 S DGNAM=$S($P(DGSTN,U,2)]"":$P(DGSTN,U,2),1:"")
"RTN","DGRPLE",18,0)
 Q DGNAM
"RTN","DGRPLE",19,0)
 ;
"RTN","DGRPLE",20,0)
MULTDIV() ;User selects from active divisions
"RTN","DGRPLE",21,0)
 ;
"RTN","DGRPLE",22,0)
 ; Input: none
"RTN","DGRPLE",23,0)
 ;
"RTN","DGRPLE",24,0)
 ; Output:
"RTN","DGRPLE",25,0)
 ;      Function return value - Division IEN
"RTN","DGRPLE",26,0)
 ;
"RTN","DGRPLE",27,0)
 N DIR,X,Y
"RTN","DGRPLE",28,0)
 S DIR(0)="PA^40.8:EM"
"RTN","DGRPLE",29,0)
 S DIR("A")="Enter your division: "
"RTN","DGRPLE",30,0)
 S DIR("S")="I $$SITE^VASITE(,+Y)>0"
"RTN","DGRPLE",31,0)
 D ^DIR
"RTN","DGRPLE",32,0)
 Q +Y
"RTN","DGRPLE",33,0)
 ;
"RTN","DGRPLE",34,0)
EDITPOW(DG1,DG2,DG3,DG4,DGDFN) ;entry from enrollment for HEC updates
"RTN","DGRPLE",35,0)
 ;    DGDFN - Patient File IEN
"RTN","DGRPLE",36,0)
 ;    DG1   - POW Indicator
"RTN","DGRPLE",37,0)
 ;    DG2   - POW Confinement Location
"RTN","DGRPLE",38,0)
 ;    DG3   - POW From Date
"RTN","DGRPLE",39,0)
 ;    DG4   - POW To Date
"RTN","DGRPLE",40,0)
 ; Update POW data from HEC - DG*5.3*653
"RTN","DGRPLE",41,0)
 N DATA,DGENDA,ERROR,CURPOW,POW
"RTN","DGRPLE",42,0)
 S DGENDA=DGDFN
"RTN","DGRPLE",43,0)
 S CURPOW=$G(^DPT(DGDFN,.52))
"RTN","DGRPLE",44,0)
 S POW(.525)=$P(CURPOW,"^",5) ;Current POW indicator
"RTN","DGRPLE",45,0)
 S POW(.529)=$P(CURPOW,"^",9) ;Current POW verified status
"RTN","DGRPLE",46,0)
 S DATA(.525)=$G(DG1)
"RTN","DGRPLE",47,0)
 ;If Current POW Verified Status is null,
"RTN","DGRPLE",48,0)
 ;OR Current POW Verified Status is not null and incoming POW indicator is different than current POW indicator,
"RTN","DGRPLE",49,0)
 ;set POW Verified Status to current Date/Time.
"RTN","DGRPLE",50,0)
 I (POW(.529)="")!((POW(.529)'="")&(DG1'=POW(.525))) S DATA(.529)=$$NOW^XLFDT()
"RTN","DGRPLE",51,0)
 ;Remove the values in database if POW Indicator is NO
"RTN","DGRPLE",52,0)
 ;otherwise update new values
"RTN","DGRPLE",53,0)
 S DATA(.526)=$S(DG1="N":"@",1:DG2)
"RTN","DGRPLE",54,0)
 S DATA(.527)=$S(DG1="N":"@",1:DG3)
"RTN","DGRPLE",55,0)
 S DATA(.528)=$S(DG1="N":"@",1:DG4)
"RTN","DGRPLE",56,0)
 I '$$UPD^DGENDBS(2,.DGENDA,.DATA,.ERROR) D
"RTN","DGRPLE",57,0)
 . D ADDMSG^DGENUPL3(.MSGS,"Unable to update POW Data.",1)
"RTN","DGRPLE",58,0)
 K DATA,DGENDA,ERROR,DG1,DG2,DG3,DG4
"RTN","DGRPLE",59,0)
 Q
"RTN","DGRPLE",60,0)
 ;
"RTN","DGRPLE",61,0)
EDITPH(DG1,DG2,DG3,DGDFN) ;entry from enrollment for HEC updates
"RTN","DGRPLE",62,0)
 ;    DGDFN - Patient File IEN
"RTN","DGRPLE",63,0)
 ;    DG1   - PH Indicator
"RTN","DGRPLE",64,0)
 ;    DG2   - PH Status
"RTN","DGRPLE",65,0)
 ;    DG3   - PH Remarks
"RTN","DGRPLE",66,0)
 ;
"RTN","DGRPLE",67,0)
 N DATA,DGENDA,ERROR,DGUSER,DGPHARR,%
"RTN","DGRPLE",68,0)
 S DGENDA=DGDFN
"RTN","DGRPLE",69,0)
 S (DG(1),DATA(.531))=DG1
"RTN","DGRPLE",70,0)
 S (DG(2),DATA(.532))=$S(DG1="N":"",1:DG2)
"RTN","DGRPLE",71,0)
 S (DG(3),DATA(.533))=$S(DG1="Y":"",1:DG3)
"RTN","DGRPLE",72,0)
 I '$$UPD^DGENDBS(2,.DGENDA,.DATA,.ERROR) D
"RTN","DGRPLE",73,0)
 .D ADDMSG^DGENUPL3(.MSGS,"Unable to update Purple Heart Data.",1)
"RTN","DGRPLE",74,0)
 K DATA,DGENDA,ERROR
"RTN","DGRPLE",75,0)
 ; If the Database Server Failed, Quit.
"RTN","DGRPLE",76,0)
 Q:'$D(^DPT(DGDFN,.53))
"RTN","DGRPLE",77,0)
 S DGUSER="HEC User",DGPHARR=^DPT(DGDFN,.53)
"RTN","DGRPLE",78,0)
 ; If nothing was changed, don't update the history, Quit.
"RTN","DGRPLE",79,0)
 Q:'$$CHANGE(DG(1),DG(2),DG(3),DGDFN)
"RTN","DGRPLE",80,0)
 ;
"RTN","DGRPLE",81,0)
 D NOW^%DTC
"RTN","DGRPLE",82,0)
 S DATA(.01)=%,DATA(1)=DG(1),DATA(2)=DG(2),DATA(3)=DG(3)
"RTN","DGRPLE",83,0)
 S DATA(4)=DGUSER,DGENDA(1)=DGDFN
"RTN","DGRPLE",84,0)
 I '$$ADD^DGENDBS(2.0534,.DGENDA,.DATA,.ERROR) D
"RTN","DGRPLE",85,0)
 .D ADDMSG^DGENUPL3(.MSGS,"Unable to update Purple Heart History.",1)
"RTN","DGRPLE",86,0)
 K DATA,DGENDA,ERROR
"RTN","DGRPLE",87,0)
 ;
"RTN","DGRPLE",88,0)
 Q
"RTN","DGRPLE",89,0)
 ;
"RTN","DGRPLE",90,0)
EDITPH1(DGUSER) ;
"RTN","DGRPLE",91,0)
 ; Input:   DGUSER - Person filing Purple Heart changes
"RTN","DGRPLE",92,0)
 ;
"RTN","DGRPLE",93,0)
 ; Output:  none
"RTN","DGRPLE",94,0)
 ;
"RTN","DGRPLE",95,0)
 S DGUSER=$G(DGUSER,$P(^VA(200,DUZ,0),U))
"RTN","DGRPLE",96,0)
 NEW DGPHARR,DG,DGX
"RTN","DGRPLE",97,0)
 S DGPHARR=^DPT(DFN,.53)
"RTN","DGRPLE",98,0)
 ;REDIE will ensure there is a STATUS only if indicator is 
"RTN","DGRPLE",99,0)
 ;'yes' and a REMARK only if indicator is 'no'
"RTN","DGRPLE",100,0)
 I $P(DGPHARR,U)="Y",($P(DGPHARR,U,3)]"") D REDIE(3)
"RTN","DGRPLE",101,0)
 I $P(DGPHARR,U)="N",($P(DGPHARR,U,2)]"") D REDIE(2)
"RTN","DGRPLE",102,0)
 F DGX=1:1:3 S DG(DGX)=$P(DGPHARR,U,DGX)
"RTN","DGRPLE",103,0)
 I $$CHANGE(DG(1),DG(2),DG(3),DFN) D EDITPH2(DG(1),DG(2),DG(3),DGUSER)
"RTN","DGRPLE",104,0)
 Q
"RTN","DGRPLE",105,0)
 ;
"RTN","DGRPLE",106,0)
EDITPH2(DG1,DG2,DG3,DG4) ;stuff PH values into the PH multiple of file #2
"RTN","DGRPLE",107,0)
 S DFN=DA
"RTN","DGRPLE",108,0)
 N DA,DIC,DIE
"RTN","DGRPLE",109,0)
 S DIC="^DPT("_DFN_",""PH"","
"RTN","DGRPLE",110,0)
 S DA(1)=DFN
"RTN","DGRPLE",111,0)
 D NOW^%DTC S X=%
"RTN","DGRPLE",112,0)
 S DIC(0)="L"
"RTN","DGRPLE",113,0)
 S DIC("DR")="1///^S X=$G(DG1);2///^S X=$G(DG2);3///^S X=$G(DG3);4///^S X=$G(DG4)"
"RTN","DGRPLE",114,0)
 D ^DIC
"RTN","DGRPLE",115,0)
 Q
"RTN","DGRPLE",116,0)
 ;
"RTN","DGRPLE",117,0)
REDIE(DGPCE) ; make sure value in PH Status and PH Remarks consistent 
"RTN","DGRPLE",118,0)
 ; with value of PH Indicator
"RTN","DGRPLE",119,0)
 N DA,DIE,DR
"RTN","DGRPLE",120,0)
 S DIE="^DPT(",DR=$S($G(DGPCE)=2:.532,1:.533)_"///^S X=""@"""
"RTN","DGRPLE",121,0)
 S DA=DFN
"RTN","DGRPLE",122,0)
 D ^DIE
"RTN","DGRPLE",123,0)
 S DGPHARR=^DPT(DFN,.53)
"RTN","DGRPLE",124,0)
 Q
"RTN","DGRPLE",125,0)
 ;
"RTN","DGRPLE",126,0)
CHANGE(DGPH1,DGPH2,DGPH3,DGPHDFN) ;Check to see if the entry has changed
"RTN","DGRPLE",127,0)
 ; Input:
"RTN","DGRPLE",128,0)
 ;       DGPH1  - PH Indicator
"RTN","DGRPLE",129,0)
 ;       DGPH2  - PH Status
"RTN","DGRPLE",130,0)
 ;       DGPH3  - PH Remarks
"RTN","DGRPLE",131,0)
 ;       DGPHDFN- Patient file IEN
"RTN","DGRPLE",132,0)
 ;
"RTN","DGRPLE",133,0)
 ; Output:  none
"RTN","DGRPLE",134,0)
 ;
"RTN","DGRPLE",135,0)
 ; Return:  DGCHG = 1 - Change in any of the input values has occurred
"RTN","DGRPLE",136,0)
 ;          DGCHG = 0 - No change
"RTN","DGRPLE",137,0)
 ;
"RTN","DGRPLE",138,0)
 N DGCHG    ;Return value
"RTN","DGRPLE",139,0)
 N DGARR    ;Array containing last values from audit
"RTN","DGRPLE",140,0)
 N DGPHVAL  ;Merged array of DGARR
"RTN","DGRPLE",141,0)
 N DGERR    ;Error root for DIQ
"RTN","DGRPLE",142,0)
 N DGIEN    ;IEN of last audit value
"RTN","DGRPLE",143,0)
 N DGFILE   ;Purple Heart Multiple
"RTN","DGRPLE",144,0)
 N DGI      ;Index counter
"RTN","DGRPLE",145,0)
 ;
"RTN","DGRPLE",146,0)
 K DGPHINC
"RTN","DGRPLE",147,0)
 S DGCHG=0
"RTN","DGRPLE",148,0)
 S DGFILE=2.0534
"RTN","DGRPLE",149,0)
 S DGIEN=$O(^DPT(DGPHDFN,"PH","B"),-1)
"RTN","DGRPLE",150,0)
 I DGIEN="" S DGCHG=1 G AUDITQ
"RTN","DGRPLE",151,0)
 D GETS^DIQ(DGFILE,DGIEN_","_DGPHDFN_",","1;2;3","I","DGARR","DGERR")
"RTN","DGRPLE",152,0)
 I $D(DGERR) S DGCHG=1 G AUDITQ
"RTN","DGRPLE",153,0)
 M DGPHVAL=DGARR(DGFILE,DGIEN_","_DGPHDFN_",")
"RTN","DGRPLE",154,0)
 F DGI=1:1:3 I @("DGPH"_DGI)'=DGPHVAL(DGI,"I") D
"RTN","DGRPLE",155,0)
 . S DGCHG=1
"RTN","DGRPLE",156,0)
 . I DGI=1 D  ; PH INDICATOR has changed
"RTN","DGRPLE",157,0)
 . . I DGPH1="N",DGPHVAL(DGI,"I")="Y" S DGPHINC=1 ; Package Variable to note PH Indicator has changed
"RTN","DGRPLE",158,0)
AUDITQ Q DGCHG
"RTN","DGRPMS")
0^86^B49653378
"RTN","DGRPMS",1,0)
DGRPMS ;ALB/BRM,LBD - MILITARY SERVICE APIS ; 8/15/08 11:36am
"RTN","DGRPMS",2,0)
 ;;5.3;Registration;**451,626,646,673,689,688**;Aug 13, 1993;Build 29
"RTN","DGRPMS",3,0)
 ;
"RTN","DGRPMS",4,0)
VALCON1(DFN,IEN,CDATE,FRTO) ; Valid conflict input for OIF/OEF/UNKNOWN OEF/OIF?
"RTN","DGRPMS",5,0)
 ; Need to send the ien of the multiple as well as the DFN and
"RTN","DGRPMS",6,0)
 ; determine the specific conflict area
"RTN","DGRPMS",7,0)
 N Z
"RTN","DGRPMS",8,0)
 S Z=$P("OIF^OEF^UNK",U,+$G(^DPT(DFN,.3215,+IEN,0)))
"RTN","DGRPMS",9,0)
 ;Q:Z="UNK" 1  ; Never need to check this - only entered through HEC
"RTN","DGRPMS",10,0)
 Q $$VALCON(DFN,Z_"-"_IEN,CDATE,FRTO)
"RTN","DGRPMS",11,0)
 ;
"RTN","DGRPMS",12,0)
VALCON(DFN,CNFLCT,CDATE,FRTO,OEIFAIL) ;is this a valid conflict input?
"RTN","DGRPMS",13,0)
 ;
"RTN","DGRPMS",14,0)
 ;INPUT:
"RTN","DGRPMS",15,0)
 ;      FRTO - 0=FRDT 1=TODT  (defaults to FRDT if FRTO="")
"RTN","DGRPMS",16,0)
 ;OUTPUT:
"RTN","DGRPMS",17,0)
 ;      OEIFAIL = 1 for not within MSE for OIF/OEF data (pass by ref)
"RTN","DGRPMS",18,0)
 ;
"RTN","DGRPMS",19,0)
 N RTN,X,Y,FRDT,TODT,CNFLCTV,IGNORE,COMPOW,MSG,DTCHK,CNFLCT2,OEFOIF
"RTN","DGRPMS",20,0)
 S OEIFAIL=0
"RTN","DGRPMS",21,0)
 Q:'$D(DFN) "0^INVALID PATIENT"
"RTN","DGRPMS",22,0)
 Q:'$D(^DPT(DFN)) "0^INVALID PATIENT"
"RTN","DGRPMS",23,0)
 Q:'$$VALID^DGRPDT(.CDATE) "0^INVALID DATE"
"RTN","DGRPMS",24,0)
 S FRTO=+$G(FRTO)
"RTN","DGRPMS",25,0)
 I 'FRTO S TODT=$$GETDT(DFN,.CNFLCT),FRDT=CDATE K DGFRDT
"RTN","DGRPMS",26,0)
 E  S FRDT=$$GETDT(DFN,.CNFLCT,FRTO) S:$G(DGFRDT) FRDT=$G(DGFRDT) S TODT=CDATE K DGFRDT
"RTN","DGRPMS",27,0)
 S DTCHK=$$DTUTIL^DGRPDT(CDATE,$$GETDT(DFN,.CNFLCT,'FRTO),1)
"RTN","DGRPMS",28,0)
 I 'DTCHK D MSG($P(DTCHK,"^",2),2,2) Q DTCHK
"RTN","DGRPMS",29,0)
 I CNFLCT="COMB"!(CNFLCT="POW") D
"RTN","DGRPMS",30,0)
 .S COMPOW=$S(CNFLCT="COMB":1,1:2)
"RTN","DGRPMS",31,0)
 .S CNFLCT2=CNFLCT
"RTN","DGRPMS",32,0)
 .S CNFLCT=$$COMPOW($S($G(DGCOMLOC):$P(DGCOMLOC,"^"),1:$$GETDT(DFN,CNFLCT,3)))
"RTN","DGRPMS",33,0)
 S CNFLCTV=""
"RTN","DGRPMS",34,0)
 I CNFLCT]"" S CNFLCTV=$$CNFLCTDT^DGRPDT(FRDT,$S(FRTO:TODT,1:""),.CNFLCT)
"RTN","DGRPMS",35,0)
 I ('CNFLCTV) D MSG($P(CNFLCTV,"^",2),2,1) Q CNFLCTV  ;dates are not within conflict
"RTN","DGRPMS",36,0)
 ;
"RTN","DGRPMS",37,0)
 S MSG=$S('$G(COMPOW):"Conflict",$G(COMPOW)=2:"POW",1:"Combat")
"RTN","DGRPMS",38,0)
 I FRDT,TODT,'$$B4^DGRPDT(FRDT,TODT,0) D MSG((MSG_" From Date is not Before "_MSG_" To Date"),2,1) Q "0^"_MSG_" From Date is not Before "_MSG_" To Date"
"RTN","DGRPMS",39,0)
 S IGNORE=$S('$P(CNFLCT,"-",2):$P($P($T(@($P(CNFLCT,"-"))),";;",2),"^",FRTO+1),1:"")
"RTN","DGRPMS",40,0)
 S:$G(COMPOW) IGNORE=$P($P($T(@(CNFLCT2)),";;",2),"^",FRTO+1)
"RTN","DGRPMS",41,0)
 ; 
"RTN","DGRPMS",42,0)
 ; Check for overlaps and dates w/in MSE's, except for POW DG*5.3*688
"RTN","DGRPMS",43,0)
 S RTN=1
"RTN","DGRPMS",44,0)
 I $G(COMPOW)'=2 D
"RTN","DGRPMS",45,0)
 . S OEFOIF=$S($P(CNFLCT,"-",2):$P(CNFLCT,"-",2)_U_CNFLCT,1:""),RTN=$$COVRLP2^DGRPDT(DFN,FRDT,TODT,IGNORE,.OEFOIF)
"RTN","DGRPMS",46,0)
 . I 'RTN,$G(OEFOIF),$G(OEFOIF(1)) S OEIFAIL=1
"RTN","DGRPMS",47,0)
 Q:RTN RTN
"RTN","DGRPMS",48,0)
 D MSG($P(RTN,"^",2),2,1)
"RTN","DGRPMS",49,0)
 Q RTN
"RTN","DGRPMS",50,0)
 ;
"RTN","DGRPMS",51,0)
VALMSE(DFN,MDATE,FRTO,FLD) ;is this a valid Military Service Episode date?
"RTN","DGRPMS",52,0)
 ;
"RTN","DGRPMS",53,0)
 ;INPUT:
"RTN","DGRPMS",54,0)
 ;      FRTO - 0=FRDT 1=TODT  (defaults to FRDT if FRTO="")
"RTN","DGRPMS",55,0)
 ;       FLD - MSE field being edited/added (MSL,MSNTL,MSNNTL)
"RTN","DGRPMS",56,0)
 ;
"RTN","DGRPMS",57,0)
 N RTN,X,Y,FRDT,TODT,IGNORE,DTCHK
"RTN","DGRPMS",58,0)
 Q:'$D(DFN) "0^INVALID PATIENT"
"RTN","DGRPMS",59,0)
 Q:'$D(^DPT(DFN)) "0^INVALID PATIENT"
"RTN","DGRPMS",60,0)
 Q:'$$VALID^DGRPDT(.MDATE) "0^INVALID DATE"
"RTN","DGRPMS",61,0)
 S FRTO=+$G(FRTO)
"RTN","DGRPMS",62,0)
 I 'FRTO S FRDT=MDATE,TODT=$$GETDT(DFN,.FLD,FRTO) K DGFRDT
"RTN","DGRPMS",63,0)
 E  S FRDT=$$GETDT(DFN,.FLD,FRTO) S:$G(DGFRDT) FRDT=$G(DGFRDT) S TODT=MDATE K DGFRDT
"RTN","DGRPMS",64,0)
 S DTCHK=$$DTUTIL^DGRPDT(MDATE,$$GETDT(DFN,.FLD,'FRTO),1)
"RTN","DGRPMS",65,0)
 I 'DTCHK D MSG($P(DTCHK,"^",2),2,2) K DGCOMBR Q DTCHK
"RTN","DGRPMS",66,0)
 I FRTO,FRDT,TODT,'$$B4^DGRPDT(.FRDT,.TODT,0) D MSG("Service Entry Date is not before Service Separation Date",2,1) K DGCOMBR Q "0^Service Entry Date is not before Service Separation Date"
"RTN","DGRPMS",67,0)
 S IGNORE=$P($P($T(@(FLD)),";;",2),"^",FRTO+1)
"RTN","DGRPMS",68,0)
 S RTN=$$OVRLPCHK^DGRPDT(.DFN,.FRDT,.TODT,1,.IGNORE)
"RTN","DGRPMS",69,0)
 I $G(DGCOMBR)']"" S DGCOMBR=$$GETDT(DFN,.FLD,4)
"RTN","DGRPMS",70,0)
 I RTN,FRTO,$$BRANCH(.DGCOMBR),('$$WWII(DFN,TODT,.FLD)) D MSG("Branch of Service Requires WWII Dates of Service",2,1) K DGCOMBR Q "0^BOS Requires WWII Dates"
"RTN","DGRPMS",71,0)
 K DGCOMBR
"RTN","DGRPMS",72,0)
 Q:RTN RTN
"RTN","DGRPMS",73,0)
 D MSG($P(RTN,"^",2),2,1)
"RTN","DGRPMS",74,0)
 Q RTN
"RTN","DGRPMS",75,0)
 ;
"RTN","DGRPMS",76,0)
BRANCH(DGCOMBR) ;branches of service that require WWII service dates
"RTN","DGRPMS",77,0)
 N BRANCH
"RTN","DGRPMS",78,0)
 Q:'$G(DGCOMBR) 0
"RTN","DGRPMS",79,0)
 S BRANCH=$P(DGCOMBR,"^",2)
"RTN","DGRPMS",80,0)
 Q:BRANCH="MERCHANT SEAMAN" 1
"RTN","DGRPMS",81,0)
 Q:BRANCH="F.COMMONWEALTH" 1
"RTN","DGRPMS",82,0)
 Q:BRANCH="F.GUERILLA" 1
"RTN","DGRPMS",83,0)
 Q:BRANCH="F.SCOUTS NEW" 1
"RTN","DGRPMS",84,0)
 Q:BRANCH="F.SCOUTS OLD" 1
"RTN","DGRPMS",85,0)
 Q 0
"RTN","DGRPMS",86,0)
 ;
"RTN","DGRPMS",87,0)
VALCOMP(DFN,CODE,DGEPI) ; Verify component is consistent with the corresponding
"RTN","DGRPMS",88,0)
 ;  branch of service  Also, branch of service must be entered before
"RTN","DGRPMS",89,0)
 ;  component.
"RTN","DGRPMS",90,0)
 ;  ACTIVATED NATIONAL GUARD (G) only valid for ARMY or AIR FORCE branch
"RTN","DGRPMS",91,0)
 ;  ACTIVATED RESERVE (V) only valid for ARMY, AIR FORCE, MARINES, NAVY
"RTN","DGRPMS",92,0)
 ;                    or COAST GUARD branch
"RTN","DGRPMS",93,0)
 ; DFN = ien of patient in file 2
"RTN","DGRPMS",94,0)
 ; DGEPI = episode # to check (1=LAST, 2=NTL, 3=NNTL)
"RTN","DGRPMS",95,0)
 ; CODE = the component code
"RTN","DGRPMS",96,0)
 ; OUTPUT: 1 if valid component
"RTN","DGRPMS",97,0)
 ;         0 if invalid component or branch of serv missing
"RTN","DGRPMS",98,0)
 N Z
"RTN","DGRPMS",99,0)
 S Z=+$P($G(^DPT(DFN,.32)),U,DGEPI*5)
"RTN","DGRPMS",100,0)
 I 'Z Q 0  ; Require bos
"RTN","DGRPMS",101,0)
 I CODE="R" Q 1  ; Regular is valid for all
"RTN","DGRPMS",102,0)
 Q:Z=1!(Z=2) 1  ; Army (1)/air force (2) valid for guard and reserves
"RTN","DGRPMS",103,0)
 ; reserves also include navy (3), marines (4), coast guard (5)
"RTN","DGRPMS",104,0)
 I CODE="V" Q $S(Z>2&(Z<6):1,1:0)
"RTN","DGRPMS",105,0)
 ;
"RTN","DGRPMS",106,0)
 Q 0
"RTN","DGRPMS",107,0)
 ;
"RTN","DGRPMS",108,0)
GETDT(DFN,CNFLCT,FRTO) ; get from date, to date, or location from patient file
"RTN","DGRPMS",109,0)
 ;
"RTN","DGRPMS",110,0)
 N CFLDS,CFLD,CNF1,CNF2,RTN1,IENS,FILE
"RTN","DGRPMS",111,0)
 Q:'$D(DFN) ""
"RTN","DGRPMS",112,0)
 Q:'$D(^DPT(DFN)) ""
"RTN","DGRPMS",113,0)
 Q:$G(CNFLCT)="" ""
"RTN","DGRPMS",114,0)
 S:$G(FRTO)="" FRTO=0
"RTN","DGRPMS",115,0)
 S CNF1=$P(CNFLCT,"-"),CNF2=+$P(CNFLCT,"-",2)
"RTN","DGRPMS",116,0)
 ; OEF/OIF/ UNKNOWN OEF/OIF data without a supplied entry in the
"RTN","DGRPMS",117,0)
 ;   multiple cannot be retrieved  OEF-1 indicates an OEF location
"RTN","DGRPMS",118,0)
 ;   stored at the '1' subscript of the .3215 multiple
"RTN","DGRPMS",119,0)
 I "^OEF^OIF^UNK^"[(U_CNF1_U),'CNF2 Q ""
"RTN","DGRPMS",120,0)
 S CFLDS=$P($T(@(CNF1)),";;",2) Q:CFLDS']"" ""
"RTN","DGRPMS",121,0)
 S CFLD=$S('FRTO:$P(CFLDS,"^",2),FRTO=1:$P(CFLDS,"^"),1:$P(CFLDS,"^",3))
"RTN","DGRPMS",122,0)
 Q:'CFLD ""
"RTN","DGRPMS",123,0)
 S IENS=DFN_",",FILE=2
"RTN","DGRPMS",124,0)
 S:CNF2 IENS=CNF2_","_IENS,FILE=2.3215 ; For OIF/OEF, must set ref to multiple
"RTN","DGRPMS",125,0)
 S RTN1=$$GET1^DIQ(FILE,IENS,CFLD,"I")
"RTN","DGRPMS",126,0)
 I FRTO=4 S RTN1=RTN1_"^"_$$EXTERNAL^DILFD(FILE,CFLD,"",RTN1)
"RTN","DGRPMS",127,0)
 Q RTN1
"RTN","DGRPMS",128,0)
 ;
"RTN","DGRPMS",129,0)
WWII(DFN,TODT,FLD) ; was this patient in WWII?
"RTN","DGRPMS",130,0)
 ;  this API assumes the WWII period to be from 12/07/41-12/31/46
"RTN","DGRPMS",131,0)
 ;
"RTN","DGRPMS",132,0)
 N OK,NODE,DATA,WWIIS,WWIIE,PATDT,PATE,PATS
"RTN","DGRPMS",133,0)
 Q:'$G(DFN) "-1^UNKNOWN"
"RTN","DGRPMS",134,0)
 S NODE(.32)=".326,.327,.3285,.3292,.3293,.32945,.3297,.3298"
"RTN","DGRPMS",135,0)
 S WWIIS=2411207,WWIIE=2461231
"RTN","DGRPMS",136,0)
 D GETDAT^DGRPDT(DFN,.NODE,.DATA)
"RTN","DGRPMS",137,0)
 S PATDT=$G(FLD) Q:PATDT']"" 0
"RTN","DGRPMS",138,0)
 S PATS=$P($G(DATA(PATDT)),"^"),PATE=$P($G(DATA(PATDT)),"^",2)
"RTN","DGRPMS",139,0)
 S:'$G(TODT) TODT=PATE
"RTN","DGRPMS",140,0)
 S OK=0
"RTN","DGRPMS",141,0)
 S OK=$$WITHIN^DGRPDT(WWIIS,WWIIE,PATS)
"RTN","DGRPMS",142,0)
 S:'OK OK=$$WITHIN^DGRPDT(WWIIS,WWIIE,TODT)
"RTN","DGRPMS",143,0)
 S:'OK OK=$$RWITHIN^DGRPDT(PATS,TODT,WWIIS,WWIIE)
"RTN","DGRPMS",144,0)
 Q $G(OK)
"RTN","DGRPMS",145,0)
DELMSE(DFN,TYPE) ; delete MSE from patient
"RTN","DGRPMS",146,0)
 ;
"RTN","DGRPMS",147,0)
 ; Input: DFN - Internal entry number for the Patient File (#2)
"RTN","DGRPMS",148,0)
 ;       TYPE - 1=Last MSE  2=Next to Last MSE  3=Next to Next to Last
"RTN","DGRPMS",149,0)
 ;
"RTN","DGRPMS",150,0)
 Q:'$G(TYPE)
"RTN","DGRPMS",151,0)
 Q:(('$G(DFN))!'$D(^DPT(DFN)))
"RTN","DGRPMS",152,0)
 N IENS,FDA,X,X1,X2,Y,ZZ,ROOT
"RTN","DGRPMS",153,0)
 S IENS=DFN_",",ROOT="FDA(2,IENS)",X=""
"RTN","DGRPMS",154,0)
 I TYPE=1 F ZZ=.324,.326,.327,.328 S @ROOT@(ZZ)=X
"RTN","DGRPMS",155,0)
 I TYPE=2 F ZZ=.329,.3292,.3293,.3294 S @ROOT@(ZZ)=X
"RTN","DGRPMS",156,0)
 I TYPE=3 F ZZ=.3295,.3297,.3298,.3299 S @ROOT@(ZZ)=X
"RTN","DGRPMS",157,0)
 D FILE^DIE("K","FDA","ERR")
"RTN","DGRPMS",158,0)
 Q
"RTN","DGRPMS",159,0)
 ;
"RTN","DGRPMS",160,0)
COMPOW(VAL) ;convert POW and Combat Location fields
"RTN","DGRPMS",161,0)
 ;
"RTN","DGRPMS",162,0)
 N ABRV
"RTN","DGRPMS",163,0)
 Q:'$G(VAL) ""
"RTN","DGRPMS",164,0)
 S ABRV=$$GET1^DIQ(22,VAL_",",1,"I")
"RTN","DGRPMS",165,0)
 Q:ABRV="WWI" "WWI"
"RTN","DGRPMS",166,0)
 Q:ABRV="WWII-EUROPE" "WWIIE"
"RTN","DGRPMS",167,0)
 Q:ABRV="WWII-PACIFIC" "WWIIP"
"RTN","DGRPMS",168,0)
 Q:ABRV="KOREAN" "KOR"
"RTN","DGRPMS",169,0)
 Q:ABRV="VIETNAM" "VIET"
"RTN","DGRPMS",170,0)
 Q:ABRV="OTHER" "OTHER"
"RTN","DGRPMS",171,0)
 Q:ABRV="PERSIAN GULF" "GULF"
"RTN","DGRPMS",172,0)
 Q:ABRV="YUGOSLAVIA" "YUG"
"RTN","DGRPMS",173,0)
 Q:ABRV="SOMALIA" "SOM"
"RTN","DGRPMS",174,0)
 Q ""
"RTN","DGRPMS",175,0)
 ;
"RTN","DGRPMS",176,0)
FV(X) ;Is this a Filipino Vet branch of service?
"RTN","DGRPMS",177,0)
 ;Added for HVE II (DG*5.3*451)
"RTN","DGRPMS",178,0)
 ;INPUT:  X = IEN Branch of Service file #23
"RTN","DGRPMS",179,0)
 ;OUTPUT: 1 = Filipino Vet BOS (F.COMMONWEALTH, F.GUERILLA, F.SCOUTS NEW)
"RTN","DGRPMS",180,0)
 ;        2 = Filipino Vet BOS (F.SCOUTS OLD)
"RTN","DGRPMS",181,0)
 ;        0 = Not Filipino Vet BOS
"RTN","DGRPMS",182,0)
 N FV
"RTN","DGRPMS",183,0)
 I '$G(X) Q 0
"RTN","DGRPMS",184,0)
 S FV=$P($G(^DIC(23,X,0)),U,1)
"RTN","DGRPMS",185,0)
 Q $S(FV="F.SCOUTS OLD":2,$E(FV,1,2)="F.":1,1:0)
"RTN","DGRPMS",186,0)
 ;
"RTN","DGRPMS",187,0)
FVP ;MUMPS cross-reference "AFV1" on Service Branch [Last] (#.325), "AFV2"
"RTN","DGRPMS",188,0)
 ;on Service Branch [NTL] (#.3291), and "AFV3" on Service Branch [NNTL]
"RTN","DGRPMS",189,0)
 ;(#.3296) in the Patient file #2.  If the Service Branch fields do not
"RTN","DGRPMS",190,0)
 ;contain a Filipino Veteran branch of service, the Filipino Vet Proof
"RTN","DGRPMS",191,0)
 ;field (#.3214) will be deleted.
"RTN","DGRPMS",192,0)
 Q:'$G(DA)
"RTN","DGRPMS",193,0)
 N BOS,MS,FV,IENS,FDA
"RTN","DGRPMS",194,0)
 S MS=$G(^DPT(DA,.32))
"RTN","DGRPMS",195,0)
 F BOS=5,10,15 S FV=$$FV($P(MS,U,BOS)) Q:FV=1
"RTN","DGRPMS",196,0)
 I FV=1 Q  ;Filipino Vet BOS found, quit
"RTN","DGRPMS",197,0)
 ;Delete Filipino Vet Proof
"RTN","DGRPMS",198,0)
 S IENS=DA_",",FDA(2,IENS,.3214)="@"
"RTN","DGRPMS",199,0)
 D FILE^DIE("","FDA")
"RTN","DGRPMS",200,0)
 Q
"RTN","DGRPMS",201,0)
 ;
"RTN","DGRPMS",202,0)
MSG(MSGTXT,LF1,LF2) ; This api will format the output text in order to utilize
"RTN","DGRPMS",203,0)
 ; the EN^DDIOL utility.
"RTN","DGRPMS",204,0)
 ;INPUT:  MSGTXT = Message text to display
"RTN","DGRPMS",205,0)
 ;           LF1 = Number of line feeds to preceed the message
"RTN","DGRPMS",206,0)
 ;           L2F = Number of line feeds to follow the message
"RTN","DGRPMS",207,0)
 ;        
"RTN","DGRPMS",208,0)
 N MSGARY,LFSTR
"RTN","DGRPMS",209,0)
 S $P(LFSTR,"!",50)="!"
"RTN","DGRPMS",210,0)
 S:$G(LF1)'="" MSGARY(.5,"F")=$E(LFSTR,1,(LF1-1))
"RTN","DGRPMS",211,0)
 S MSGARY(1)=MSGTXT
"RTN","DGRPMS",212,0)
 S:$G(LF2)'="" MSGARY(2,"F")=$E(LFSTR,1,LF2)
"RTN","DGRPMS",213,0)
 D EN^DDIOL(.MSGARY)
"RTN","DGRPMS",214,0)
 Q
"RTN","DGRPMS",215,0)
 ;
"RTN","DGRPMS",216,0)
CNFLCT ;; ***  DO NOT REMOVE BELOW CONFLICT FIELD LOCATIONS  ***
"RTN","DGRPMS",217,0)
 ;; FROM DATE^TO DATE
"RTN","DGRPMS",218,0)
WWI ;;
"RTN","DGRPMS",219,0)
WWIIE ;;
"RTN","DGRPMS",220,0)
WWIIP ;;
"RTN","DGRPMS",221,0)
KOR ;;
"RTN","DGRPMS",222,0)
VIET ;;.32104^.32105
"RTN","DGRPMS",223,0)
LEB ;;.3222^.3223
"RTN","DGRPMS",224,0)
GREN ;;.3225^.3226
"RTN","DGRPMS",225,0)
PAN ;;.3228^.3229
"RTN","DGRPMS",226,0)
GULF ;;.322011^.322012
"RTN","DGRPMS",227,0)
SOM ;;.322017^.322018
"RTN","DGRPMS",228,0)
YUG ;;.32202^.322021
"RTN","DGRPMS",229,0)
OEF ;;.02^.03
"RTN","DGRPMS",230,0)
OIF ;;.02^.03
"RTN","DGRPMS",231,0)
UNK ;;.02^.03
"RTN","DGRPMS",232,0)
 ;;
"RTN","DGRPMS",233,0)
 ;;  **BELOW VALUES ARE USED FOR MSE CHECKS - DO NOT REMOVE ***
"RTN","DGRPMS",234,0)
 ;; ENTRY DATE^SEPERATION DATE
"RTN","DGRPMS",235,0)
MSL ;;.326^.327^.325
"RTN","DGRPMS",236,0)
MSNTL ;;.3292^.3293^.3291
"RTN","DGRPMS",237,0)
MSNNTL ;;.3297^.3298^.3296
"RTN","DGRPMS",238,0)
 ;;
"RTN","DGRPMS",239,0)
 ;;  **BELOW VALUES ARE USED FOR POW AND COMBAT CHECKS - DO NOT REMOVE
"RTN","DGRPMS",240,0)
 ;; FROM DATE^TO DATE^LOCATION
"RTN","DGRPMS",241,0)
COMB ;;.5293^.5294^.5292
"RTN","DGRPMS",242,0)
POW ;;.527^.528^.526
"RTN","DGRPMS",243,0)
 ;;
"RTN","DGRPP")
0^18^B18355225
"RTN","DGRPP",1,0)
DGRPP ;ALB/MRL,AEG - REGISTRATION SCREEN PROCESSOR ;07/18/06
"RTN","DGRPP",2,0)
 ;;5.3;Registration;**92,147,343,404,397,489,689,688**;Aug 13, 1993;Build 29
"RTN","DGRPP",3,0)
 ;
"RTN","DGRPP",4,0)
 ;DGRPS    : Screen to edit
"RTN","DGRPP",5,0)
 ;DGRPSEL  : If screen 9 (income screening) set to allowable selections
"RTN","DGRPP",6,0)
 ;           (V=Veteran, S=Spouse, D=Dependents)
"RTN","DGRPP",7,0)
 ;DGRPSELT : If screen 9, type selected (V, S, or D or all if none specified)
"RTN","DGRPP",8,0)
 ;DGRPAN   : Selectable items on screen for edit (user input)
"RTN","DGRPP",9,0)
 ;DGRPANP  : Selectable items for print on page footer - i.e. 1-3
"RTN","DGRPP",10,0)
 ;DGRPANN  : Selected item(s) extrapolated (screen_item)
"RTN","DGRPP",11,0)
 ;
"RTN","DGRPP",12,0)
 ;
"RTN","DGRPP",13,0)
EN ;
"RTN","DGRPP",14,0)
 D:'$$BEGUPLD^DGENUPL3(DFN)
"RTN","DGRPP",15,0)
 .D UNLOCK^DGENPTA1(DFN)
"RTN","DGRPP",16,0)
 .D CKUPLOAD^DGENUPL3(DFN)
"RTN","DGRPP",17,0)
 .I $$LOCK^DGENPTA1(DFN)
"RTN","DGRPP",18,0)
 D ENDUPLD^DGENUPL3(DFN)
"RTN","DGRPP",19,0)
 D Q1,WHICH^DGRPP1 W ! K DGRP S DGRPAN="" F I=1:1:$L(DGRPVV(DGRPS)) I $S('DGRPV:1,DGRPS=6:I=2!(I=3),1:0) S:'$E(DGRPVV(DGRPS),I) DGRPAN=DGRPAN_I_","
"RTN","DGRPP",20,0)
 D STR^DGRPP1 F I=$Y:1:20 W !
"RTN","DGRPP",21,0)
 ; remove COPY option DG*5.3*688
"RTN","DGRPP",22,0)
 I ("8^9"[DGRPS),($G(DGEFDT)'=DT) S Z="E" D W W "=ENTER new "_(DGISYR+1)_" data,"
"RTN","DGRPP",23,0)
 S Z="<RET>" D W W " to ",$S(DGRPS<DGRPLAST:"CONTINUE",1:"QUIT"),", "
"RTN","DGRPP",24,0)
 I DGRPAN]"" S Z=DGRPANP D W D
"RTN","DGRPP",25,0)
 . I '$G(DGRPV) W " or " S Z="ALL" D W
"RTN","DGRPP",26,0)
 . W " to "_$S('$G(DGRPV):"EDIT, ",DGRPS=6:"EXPAND, ",1:"")
"RTN","DGRPP",27,0)
 S DGRPOUT=0,Z="^N" D W W " for screen N or " S Z="'^'" D W W " to QUIT" I DGRPSEL=""!(DGRPVV(9)'["0")!+$G(DGRPV) W ": "
"RTN","DGRPP",28,0)
 I DGRPSEL]"" D MOREHLP^DGRPP1
"RTN","DGRPP",29,0)
 R DGRPANN:DTIME S:'$T DGRPOUT=1 I DGRPANN']"",'DGRPOUT G NEXT
"RTN","DGRPP",30,0)
 I $E(DGRPANN)="E",$G(DGNOBUCK),("8^9"[DGRPS) D
"RTN","DGRPP",31,0)
 .S DGNOCOPY=1
"RTN","DGRPP",32,0)
 . ; remove COPY option DG*5.3*688
"RTN","DGRPP",33,0)
 .S DGRPANN=U_DGRPS,DGRPVV(9)="000",DGRPVV(8)="00",DGIAINEW=1
"RTN","DGRPP",34,0)
JUMP G JUMP^DGRPP1:DGRPANN?1"^"1N.".".1N I DGRPOUT!(DGRPANN?1"^".E) G Q
"RTN","DGRPP",35,0)
 S (DGRPANN,X)=$$UPPER^DGUTL(DGRPANN)
"RTN","DGRPP",36,0)
 I $E(DGRPANN)="A" S X=DGRPANN,Z="^ALL" D IN^DGHELP I %'=-1 S DGRPANN=DGRPANP
"RTN","DGRPP",37,0)
 I DGRPANN]"",(DGRPSEL[$E(DGRPANN)) S DGRPSELT=$E(DGRPANN),DGRPANN=$P(DGRPANN,DGRPSELT,2) ; save off type, run through all other checks
"RTN","DGRPP",38,0)
 I DGRPANN'?1N.E D ^DGRPH G:DGRPS'=1.1 @("^DGRP"_DGRPS) G:DGRPS=1.1 ^DGRPCADD
"RTN","DGRPP",39,0)
 S DGDR="" F I=1:1 S DGCH=$P(DGRPANN,",",I) Q:DGCH']""!($L(DGCH)>5)  D CHOICE
"RTN","DGRPP",40,0)
 I DGDR']"" D ^DGRPH S X=DGRPS G SCRX
"RTN","DGRPP",41,0)
 D ^DGRPE G QQ:'$D(^DPT(DFN,0)) S X=DGRPS G SCRX
"RTN","DGRPP",42,0)
Q I 'DGELVER D:$S(DGRPOUT:0,'$D(DGRPV):0,'DGRPV:1,1:0) LT^DGRPP1
"RTN","DGRPP",43,0)
 K DGDEP,DGINC,DGINR,DGMTC,DGMTED,DGREL,DGTOT,DGSP
"RTN","DGRPP",44,0)
 K DGCH,DGGTOT,DGIRI,DGPRI,DGRPSE1,DGNOCOPY
"RTN","DGRPP",45,0)
 D SENSCHK
"RTN","DGRPP",46,0)
 I 'DGRPV S DGEDCN=1 D ^DGRPC K DGEDCN
"RTN","DGRPP",47,0)
QQ K DGRPNA,DGRPS,DGRPTYPE,DGRPU,DGRPV,DGRPVV,DGRPW,DGVI,DGVO,DGRPCM,DGELVER,DGRPLAST
"RTN","DGRPP",48,0)
Q1 K %DT,C,DGA,DGA1,DGA2,DGAD,DGDR,DGRP,DGRPAG,DGRPAN,DGRPANN,DGRPANP,DGRPD,DGRPSEL,DGRPSELT,DGRPVR,DGRPX,DGAAC
"RTN","DGRPP",49,0)
 K DIRUT,DUOUT,DTOUT
"RTN","DGRPP",50,0)
 K DIC,I,I1,I2,I3,J,X,X1,X2,X3,Y,Z,Z1 I $D(DFN)#2,DFN]"" S:$D(^DPT(DFN,0)) DA=DFN
"RTN","DGRPP",51,0)
 Q
"RTN","DGRPP",52,0)
 ;
"RTN","DGRPP",53,0)
SENSCHK ; check whether patient record should be made sensitive
"RTN","DGRPP",54,0)
 N ELIG,FLAG,X
"RTN","DGRPP",55,0)
 S ELIG=0,FLAG=0
"RTN","DGRPP",56,0)
 I '$D(^DPT($G(DFN),0)) Q  ; patient not defined
"RTN","DGRPP",57,0)
 I $D(^DGSL(38.1,DFN,0)) Q  ; patient already in dg security log file
"RTN","DGRPP",58,0)
 S X=$S($D(^DPT(DFN,"TYPE")):+^("TYPE"),1:"") I $D(^DG(391,+X,0)),$P(^(0),"^",4) D SEC Q:FLAG
"RTN","DGRPP",59,0)
 F  S ELIG=$O(^DPT(DFN,"E",ELIG)) Q:'ELIG  D  Q:FLAG
"RTN","DGRPP",60,0)
 . S X=$G(^DIC(8,ELIG,0))
"RTN","DGRPP",61,0)
 . I $P(X,"^",12) D SEC
"RTN","DGRPP",62,0)
 Q
"RTN","DGRPP",63,0)
 ;
"RTN","DGRPP",64,0)
SEC ;if patient type says make record sensitive, add to security log file
"RTN","DGRPP",65,0)
 K DD,DO S DIC="^DGSL(38.1,",(X,DINUM)=DFN,DIC(0)="L",DIC("DR")="2///1;3////"_DUZ_";4///NOW;" D FILE^DICN
"RTN","DGRPP",66,0)
 I $D(^DGSL(38.1,DFN,0)) W !!,"===> Record has been classified as sensitive." S FLAG=1
"RTN","DGRPP",67,0)
 K DIC,X,DINUM,DA,DD,DO,Y
"RTN","DGRPP",68,0)
 Q
"RTN","DGRPP",69,0)
 ;
"RTN","DGRPP",70,0)
CHOICE ;parse out which items were selected for edit
"RTN","DGRPP",71,0)
 ;
"RTN","DGRPP",72,0)
 ;DGCH=choice to be parsed (either number or number-number)
"RTN","DGRPP",73,0)
 ;
"RTN","DGRPP",74,0)
 N DGFL S DGFL=0
"RTN","DGRPP",75,0)
 I DGCH["-" Q:DGCH'?1.2N1"-"1.2N!($P(DGCH,"-",2)>17)  F J=$P(DGCH,"-",1):1:$P(DGCH,"-",2) I DGRPAN[(J_",") D:(DGRPS=9) SCR9 I 'DGFL S DGDR=DGDR_(DGRPS*100+J)_","
"RTN","DGRPP",76,0)
 I DGCH'["-",DGCH?1.2N,(DGRPAN[(DGCH_",")) S DGDR=DGDR_(DGRPS*100+DGCH)_","
"RTN","DGRPP",77,0)
 Q
"RTN","DGRPP",78,0)
 ;
"RTN","DGRPP",79,0)
NEXT ;find next available screen...goto
"RTN","DGRPP",80,0)
 I DGRPS=DGRPLAST G Q ;last screen and return...quit
"RTN","DGRPP",81,0)
 S X=DGRPLAST
"RTN","DGRPP",82,0)
 F I=DGRPS+1:1 S J=$E(DGRPVV,I) Q:J']""  I 'J S X=I Q
"RTN","DGRPP",83,0)
 I DGRPS=1 S X=1.1
"RTN","DGRPP",84,0)
SCRX ;goto screen X
"RTN","DGRPP",85,0)
 ;I DGRPLAST=DGRPS,DGRPLAST=X G Q
"RTN","DGRPP",86,0)
 I X[".",X'=1.1 S X=$P(X,".",1)
"RTN","DGRPP",87,0)
 G:X=1.1 ^DGRPCADD
"RTN","DGRPP",88,0)
 G:X'=1.1 @("^DGRP"_X) ;goto next available screen
"RTN","DGRPP",89,0)
 ;
"RTN","DGRPP",90,0)
W ;write highlighted text on screen (if parameter on)
"RTN","DGRPP",91,0)
 I IOST="C-QUME",$L(DGVI)'=2 W Z
"RTN","DGRPP",92,0)
 E  W @DGVI,Z,@DGVO
"RTN","DGRPP",93,0)
 Q
"RTN","DGRPP",94,0)
 ;
"RTN","DGRPP",95,0)
SCR9 ; see if MT is completed.  Allow only selective editing if so
"RTN","DGRPP",96,0)
 I 'DGMTC Q
"RTN","DGRPP",97,0)
 I '$D(DGRPSELT) S:DGMTC=1 DGFL=1 Q  ;if no non-mt dependents
"RTN","DGRPP",98,0)
 I DGRPSELT="S",$D(DGMTC("S")) Q
"RTN","DGRPP",99,0)
 I DGRPSELT="D",$D(DGMTC("D")) Q
"RTN","DGRPP",100,0)
 S DGFL=1
"RTN","DGRPP",101,0)
 Q
"RTN","DGRPU")
0^49^B81808598
"RTN","DGRPU",1,0)
DGRPU ;ALB/MRL,TMK,BAJ - REGISTRATION UTILITY ROUTINE ; 12/20/2005
"RTN","DGRPU",2,0)
 ;;5.3;Registration;**33,114,489,624,672,689,688**;Aug 13, 1993;Build 29
"RTN","DGRPU",3,0)
H ;Screen Header
"RTN","DGRPU",4,0)
 I DGRPS'=1.1 W @IOF S Z=$P($T(H1+DGRPS),";;",2)_", SCREEN <"_DGRPS_">"_$S($D(DGRPH):" HELP",1:""),X=79-$L(Z)\2 D W
"RTN","DGRPU",5,0)
 I DGRPS=1.1 W @IOF S Z="ADDITIONAL PATIENT DEMOGRAPHIC DATA, SCREEN <"_DGRPS_">"_$S($D(DGRPH):" HELP",1:""),X=79-$L(Z)\2 D W
"RTN","DGRPU",6,0)
 S X=$$SSNNM(DFN)
"RTN","DGRPU",7,0)
 I '$D(DGRPH) W !,X S X=$S($D(DGRPTYPE):$P(DGRPTYPE,"^",1),1:"PATIENT TYPE UNKNOWN"),X1=79-$L(X) W ?X1,X
"RTN","DGRPU",8,0)
 S X="",$P(X,"=",80)="" W !,X Q
"RTN","DGRPU",9,0)
 Q
"RTN","DGRPU",10,0)
AL(DGLEN) ;DGLEN= Available length of line
"RTN","DGRPU",11,0)
A ;Format address(es)
"RTN","DGRPU",12,0)
 ; DG*5.3*688 BAJ 12/20/2005 modified for foreign address
"RTN","DGRPU",13,0)
 I '$D(DGLEN) N DGLEN S DGLEN=29
"RTN","DGRPU",14,0)
 N I,DGX,FILE,IEN,CNTRY,TMP,FNODE,FPCE,ROU
"RTN","DGRPU",15,0)
 ; set up variables
"RTN","DGRPU",16,0)
 S FNODE=$S(DGAD=.121:.122,1:DGAD),FPCE=$S(DGAD=.121:3,DGAD=.141:16,1:10)
"RTN","DGRPU",17,0)
 ; collect Street Address info
"RTN","DGRPU",18,0)
 F I=DGA1:1:DGA1+2 I $P(DGRP(DGAD),U,I)]"" S TMP(DGA2)=$P(DGRP(DGAD),U,I),DGA2=DGA2+2
"RTN","DGRPU",19,0)
 I DGA2=1 S TMP(1)="STREET ADDRESS UNKNOWN",DGA2=DGA2+2
"RTN","DGRPU",20,0)
 ; retrieve country info -- PERM country is piece 10 of node .11
"RTN","DGRPU",21,0)
 S FOR=0
"RTN","DGRPU",22,0)
 I DGA1=1 D
"RTN","DGRPU",23,0)
 . S FILE=779.004,IEN=$P(DGRP(FNODE),U,FPCE),CNTRY=$E($$CNTRYI^DGADDUTL(IEN),1,25) I CNTRY=-1 S CNTRY="UNKNOWN COUNTRY"
"RTN","DGRPU",24,0)
 . ; assemble (US) CITY, STATE ZIP or (FOREIGN) CITY PROVINCE POSTAL CODE
"RTN","DGRPU",25,0)
 . S FOR=$$FORIEN^DGADDUTL(IEN) I FOR=-1 S FOR=1
"RTN","DGRPU",26,0)
 S ROU=$S(FOR=1:"FOREIGN",1:"US")_"(DGAD,.TMP,DGA1,.DGA2)" D @ROU
"RTN","DGRPU",27,0)
 ; append COUNTRY to address
"RTN","DGRPU",28,0)
 S DGA2=DGA2+2,TMP(DGA2)=$S($G(CNTRY)="":"",1:CNTRY)
"RTN","DGRPU",29,0)
 M DGA=TMP
"RTN","DGRPU",30,0)
 K DGA1
"RTN","DGRPU",31,0)
 Q
"RTN","DGRPU",32,0)
 ;
"RTN","DGRPU",33,0)
US(DGAD,TMP,DGA1,DGA2) ;process US addresses and format in DGA array
"RTN","DGRPU",34,0)
 ; DG*5.3*688 BAJ this is the code for all addresses prior to the addition of Foreign address logic.
"RTN","DGRPU",35,0)
 ; Modifications for Foreign address are in Tag FOREIGN
"RTN","DGRPU",36,0)
 N DGX,I,J
"RTN","DGRPU",37,0)
 ; format STATE field and merge with CITY & ZIP
"RTN","DGRPU",38,0)
 S J=$S('$D(^DIC(5,+$P(DGRP(DGAD),U,DGA1+4),0)):"",('$L($P(^(0),U,2))):$P(^(0),U,1),1:$P(^(0),U,2)),J(1)=$P(DGRP(DGAD),U,DGA1+3),J(2)=$P(DGRP(DGAD),U,DGA1+5),TMP(DGA2)=$S(J(1)]""&(J]""):J(1)_","_J,J(1)]"":J(1),J]"":J,1:"UNK. CITY/STATE")
"RTN","DGRPU",39,0)
 ; zip code capture
"RTN","DGRPU",40,0)
 I ".33^.34^.211^.331^.311^.25^.21"[DGAD D
"RTN","DGRPU",41,0)
 .F I=1:1:7 I $P(".33^.34^.211^.331^.311^.25^.21",U,I)=DGAD S DGX=$P($G(^DPT(DFN,.22)),U,I)
"RTN","DGRPU",42,0)
 E  D
"RTN","DGRPU",43,0)
 .I DGAD=.141 S DGX=$P(DGRP(.141),U,6) Q
"RTN","DGRPU",44,0)
 .S DGX=$P(DGRP(DGAD),U,DGA1+11)
"RTN","DGRPU",45,0)
 ; format ZIP+4 with hyphen
"RTN","DGRPU",46,0)
 S:$L(DGX)>5 DGX=$E(DGX,1,5)_"-"_$E(DGX,6,9)
"RTN","DGRPU",47,0)
 ;combine CITY,STATE and ZIP fields on a single line
"RTN","DGRPU",48,0)
 S TMP(DGA2)=$E($P(TMP(DGA2),",",1),1,(DGLEN-($L(DGX)+4)))_$S($L($P(TMP(DGA2),",",2)):",",1:"")_$P(TMP(DGA2),",",2)_" "_DGX
"RTN","DGRPU",49,0)
 F I=0:0 S I=$O(TMP(I)) Q:'I  S TMP(I)=$E(TMP(I),1,DGLEN)
"RTN","DGRPU",50,0)
 Q
"RTN","DGRPU",51,0)
 ;
"RTN","DGRPU",52,0)
FOREIGN(DGAD,TMP,DGA1,DGA2) ;process FOREIGN addresses and format in DGA array
"RTN","DGRPU",53,0)
 N I,J,CITY,PRVNCE,PSTCD,FNODE
"RTN","DGRPU",54,0)
 F I=1:1 S J=$P($T(FNPCS+I),";;",3) Q:J="QUIT"  D
"RTN","DGRPU",55,0)
 . I DGAD=$P(J,";",1) S FNODE=$P(J,";",2),CITY=$P(J,";",3),PRVNCE=$P(J,";",4),PSTCD=$P(J,";",5)
"RTN","DGRPU",56,0)
 ; assemble CITY PROVINCE and POSTAL CODE on the same line
"RTN","DGRPU",57,0)
 ; NOTE CITY is sometimes on a different node than the PROVINCE & POSTAL CODE
"RTN","DGRPU",58,0)
 S TMP(DGA2)=$P(DGRP(FNODE),U,PSTCD)_" "_$P(DGRP(DGAD),U,CITY)_" "_$P(DGRP(FNODE),U,PRVNCE)
"RTN","DGRPU",59,0)
 F I=0:0 S I=$O(TMP(I)) Q:'I  S TMP(I)=$E(TMP(I),1,DGLEN)
"RTN","DGRPU",60,0)
 Q
"RTN","DGRPU",61,0)
 ;
"RTN","DGRPU",62,0)
W I IOST="C-QUME",$L(DGVI)'=2 W ?X,Z Q
"RTN","DGRPU",63,0)
 W ?X,@DGVI,Z,@DGVO
"RTN","DGRPU",64,0)
 Q
"RTN","DGRPU",65,0)
 ;
"RTN","DGRPU",66,0)
FNPCS ; Foreign data pieces.  Structure-->Description;;Main Node;Data Node;City;Province;Postal code.
"RTN","DGRPU",67,0)
 ;;Permanent;;.11;.11;4;8;9
"RTN","DGRPU",68,0)
 ;;Temporary;;.121;.122;4;1;2
"RTN","DGRPU",69,0)
 ;;Confidential;;.141;.141;4;14;15
"RTN","DGRPU",70,0)
 ;;QUIT;;QUIT
"RTN","DGRPU",71,0)
 ;
"RTN","DGRPU",72,0)
H1 ;
"RTN","DGRPU",73,0)
 ;;PATIENT DEMOGRAPHIC DATA
"RTN","DGRPU",74,0)
 ;;PATIENT DATA
"RTN","DGRPU",75,0)
 ;;EMERGENCY CONTACT DATA
"RTN","DGRPU",76,0)
 ;;APPLICANT/SPOUSE EMPLOYMENT DATA
"RTN","DGRPU",77,0)
 ;;INSURANCE DATA
"RTN","DGRPU",78,0)
 ;;MILITARY SERVICE DATA
"RTN","DGRPU",79,0)
 ;;ELIGIBILITY STATUS DATA
"RTN","DGRPU",80,0)
 ;;FAMILY DEMOGRAPHIC DATA
"RTN","DGRPU",81,0)
 ;;INCOME SCREENING DATA
"RTN","DGRPU",82,0)
 ;;INELIGIBLE/MISSING DATA
"RTN","DGRPU",83,0)
 ;;ELIGIBILITY VERIFICATION DATA
"RTN","DGRPU",84,0)
 ;;ADMISSION INFORMATION
"RTN","DGRPU",85,0)
 ;;APPLICATION INFORMATION
"RTN","DGRPU",86,0)
 ;;APPOINTMENT INFORMATION
"RTN","DGRPU",87,0)
 ;;SPONSOR DEMOGRAPHIC INFORMATION
"RTN","DGRPU",88,0)
 ;
"RTN","DGRPU",89,0)
 ;
"RTN","DGRPU",90,0)
INCOME(DFN,DGDT) ; compute income for veteran...if not in 408.21, pass back file 2 data
"RTN","DGRPU",91,0)
 ; (called by PTF)
"RTN","DGRPU",92,0)
 ;
"RTN","DGRPU",93,0)
 ;
"RTN","DGRPU",94,0)
 ;  Input:  DFN as IEN of PATIENT file
"RTN","DGRPU",95,0)
 ;          DGDT as date to return income as of
"RTN","DGRPU",96,0)
 ;
"RTN","DGRPU",97,0)
 ; Output:  total income (computed function)
"RTN","DGRPU",98,0)
 ;          (from 408.21 if available...otherwise from file 2)
"RTN","DGRPU",99,0)
 ;
"RTN","DGRPU",100,0)
 ;
"RTN","DGRPU",101,0)
 N DGDEP,DGINC,DGREL,DGTOT,DGX,I S DGTOT=0
"RTN","DGRPU",102,0)
 D ALL^DGMTU21(DFN,"V",DGDT,"I")
"RTN","DGRPU",103,0)
 S DGX=$G(^DGMT(408.21,+$G(DGINC("V")),0)) I DGX]"" F I=8:1:17 S DGTOT=DGTOT+$P(DGX,"^",I)
"RTN","DGRPU",104,0)
 I DGX']"" S DGTOT=$P($G(^DPT(DFN,.362)),U,20)
"RTN","DGRPU",105,0)
 Q DGTOT
"RTN","DGRPU",106,0)
 ;
"RTN","DGRPU",107,0)
 ;
"RTN","DGRPU",108,0)
MTCOMP(DFN,DGDT) ; is current means test OR COPAY complete?
"RTN","DGRPU",109,0)
 ;
"RTN","DGRPU",110,0)
 ;  Input:  DFN as IEN of PATIENT file
"RTN","DGRPU",111,0)
 ;          DGDT as 'as of' date
"RTN","DGRPU",112,0)
 ;
"RTN","DGRPU",113,0)
 ; Output:  1 if means test/COPAY for year prior to DT passed is complete
"RTN","DGRPU",114,0)
 ;          0 otherwise
"RTN","DGRPU",115,0)
 ;          DGMTYPT 1=MT;2=CP;0=NONE
"RTN","DGRPU",116,0)
 ;
"RTN","DGRPU",117,0)
 N COMP,MT,X,YR
"RTN","DGRPU",118,0)
 S YR=$$LYR^DGMTSCU1(DGDT),MT=$$LST^DGMTCOU1(DFN,DGDT)
"RTN","DGRPU",119,0)
 S DGMTYPT=+$P(MT,U,5)
"RTN","DGRPU",120,0)
 S COMP=1
"RTN","DGRPU",121,0)
 I DGMTYPT=1 D  ;MT
"RTN","DGRPU",122,0)
 .I $P(MT,"^",4)']""!("^R^N^"[("^"_$P(MT,"^",4)_"^")) S COMP=0
"RTN","DGRPU",123,0)
 I DGMTYPT=2 D  ;CP
"RTN","DGRPU",124,0)
 .I $P(MT,"^",4)']""!("^I^L^"[("^"_$P(MT,"^",4)_"^")) S COMP=0
"RTN","DGRPU",125,0)
 S X=+$P(MT,"^",2) I ($E(X,1,3)-1)*10000<YR S COMP=0
"RTN","DGRPU",126,0)
 Q COMP
"RTN","DGRPU",127,0)
 ;
"RTN","DGRPU",128,0)
HLP1010 ;* This is called by the Executable Help for Patient field #1010.159
"RTN","DGRPU",129,0)
 ;   (APPOINTMENT REQUEST ON 1010EZ)
"RTN","DGRPU",130,0)
 W !!,"    Enter a 'Y' if the veteran applicant has requested an"
"RTN","DGRPU",131,0)
 W !,"    appointment with a VA doctor or provider and wants to be"
"RTN","DGRPU",132,0)
 W !,"    seen as soon as one becomes available  Enter a 'N'"
"RTN","DGRPU",133,0)
 W !,"    if the veteran applicant has not requested an appointment."
"RTN","DGRPU",134,0)
 W !!,"    This question may ONLY be entered ONCE for the veteran."
"RTN","DGRPU",135,0)
 W !,"    The answer to this question CANNOT be changed after the"
"RTN","DGRPU",136,0)
 W !,"    initial entry.",!
"RTN","DGRPU",137,0)
 Q
"RTN","DGRPU",138,0)
 ;
"RTN","DGRPU",139,0)
HLPCS ; * This is called by the Executable Help for Income Relation field #.1
"RTN","DGRPU",140,0)
 Q:X="?"
"RTN","DGRPU",141,0)
 N DIR,DGRDVAR
"RTN","DGRPU",142,0)
 W !?8,"Enter in this field a Yes or No to indicate whether the veteran"
"RTN","DGRPU",143,0)
 W !?8,"contributed any dollar amount to the child's support last calendar"
"RTN","DGRPU",144,0)
 W !?8,"year.  The contributions do not have to be in regular set amounts."
"RTN","DGRPU",145,0)
 W !?8,"For example, a veteran who paid a child's school tuition or"
"RTN","DGRPU",146,0)
 W !?8,"medical bills would be contributing to the child's support.",!
"RTN","DGRPU",147,0)
 W !,"Enter RETURN to continue:" R DGRDVAR:DTIME W !
"RTN","DGRPU",148,0)
 Q
"RTN","DGRPU",149,0)
 ;
"RTN","DGRPU",150,0)
HLP1823 ;*This is called by the Executable Help for Patient Relation field #.18
"RTN","DGRPU",151,0)
 N DIR,DGRDVAR
"RTN","DGRPU",152,0)
 W !?7,"Enter 'Y' if the child is currently 18 to 23 years old and the child"
"RTN","DGRPU",153,0)
 W !?7,"attended school last calendar year.  Enter 'N' if the child is currently"
"RTN","DGRPU",154,0)
 W !?7,"18 to 23 years old but the child did not attend school last calendar"
"RTN","DGRPU",155,0)
 W !?7,"year.  Enter 'N' if the child is not currently 18 to 23 years old.",!
"RTN","DGRPU",156,0)
 I $G(DA) W !,"Enter RETURN to continue:" R DGRDVAR:DTIME W !
"RTN","DGRPU",157,0)
 Q
"RTN","DGRPU",158,0)
 ;
"RTN","DGRPU",159,0)
HLPMLDS ;* This is called by the Executable Help for Patient field #.362
"RTN","DGRPU",160,0)
 ;   (DISABILITY RET. FROM MILITARY?)
"RTN","DGRPU",161,0)
 N X,Y,DIR
"RTN","DGRPU",162,0)
 W !!,"  Enter '0' or 'NO' if the veteran:"
"RTN","DGRPU",163,0)
 W !,"    -- Is NOT retired from the military OR"
"RTN","DGRPU",164,0)
 W !,"    -- Is retired from the military due to length of service AND"
"RTN","DGRPU",165,0)
 W !,"       does NOT have a disability confirmed by the Military Branch"
"RTN","DGRPU",166,0)
 W !,"       to have been incurred in or aggravated while on active duty."
"RTN","DGRPU",167,0)
 W !!,"  Enter '1' or 'YES, RECEIVING MILITARY RETIREMENT' if the veteran:"
"RTN","DGRPU",168,0)
 W !,"    -- Is confirmed by the Military Branch to have been discharged"
"RTN","DGRPU",169,0)
 W !,"       or released due to a disability incurred in or aggravated"
"RTN","DGRPU",170,0)
 W !,"       while on active duty AND"
"RTN","DGRPU",171,0)
 W !,"       -- Has NOT filed a claim for VA compensation benefits OR"
"RTN","DGRPU",172,0)
 W !,"       -- Has been rated by the VA to be NSC OR"
"RTN","DGRPU",173,0)
 W !,"       -- Has been rated by the VA to have noncompensable 0%"
"RTN","DGRPU",174,0)
 W !,"          SC conditions."
"RTN","DGRPU",175,0)
 S DIR(0)="E" D ^DIR Q:+Y<1
"RTN","DGRPU",176,0)
 W !!,"  Enter '2' or 'YES, RECEIVING MILITARY RETIREMENT IN LIEU OF VA"
"RTN","DGRPU",177,0)
 W !,"                COMPENSATION' if the veteran:"
"RTN","DGRPU",178,0)
 W !,"       -- Is confirmed by the Military Branch to have been discharged"
"RTN","DGRPU",179,0)
 W !,"          or released due to a disability incurred in or aggravated"
"RTN","DGRPU",180,0)
 W !,"          while on active duty AND"
"RTN","DGRPU",181,0)
 W !,"       -- Is receiving military disability retirement pay AND"
"RTN","DGRPU",182,0)
 W !,"       -- Has been rated by VA to have compensable SC conditions"
"RTN","DGRPU",183,0)
 W !,"          but is NOT receiving compensation from the VA"
"RTN","DGRPU",184,0)
 W !!,"          Once eligibility has been verified, this field will no longer"
"RTN","DGRPU",185,0)
 W !,"          be editable to any user who does not hold the designated security"
"RTN","DGRPU",186,0)
 W !,"          key."
"RTN","DGRPU",187,0)
 Q
"RTN","DGRPU",188,0)
HLP3602 ;help text for field .3602, Rec'ing Disability in Lieu of VA Comp
"RTN","DGRPU",189,0)
 W !,"     Enter 'Y' if this veteran applicant is receiving disability"
"RTN","DGRPU",190,0)
 W !,"     retirement pay from the Military instead of VA compensation."
"RTN","DGRPU",191,0)
 W !,"     Enter 'N' if this veteran applicant is not receiving disability"
"RTN","DGRPU",192,0)
 W !,"     retirement pay from the Military instead of VA compensation."
"RTN","DGRPU",193,0)
 W !,"     Once eligibility has been verified by HEC this field will no longer "
"RTN","DGRPU",194,0)
 W !,"     be editable by VistA users. Send updates and/or requests to HEC."
"RTN","DGRPU",195,0)
 Q
"RTN","DGRPU",196,0)
HLP3603 ;help text for field .3603, Discharge Due to LOD Disability
"RTN","DGRPU",197,0)
 W !,"     Enter 'Y' if this veteran applicant was discharged from the"
"RTN","DGRPU",198,0)
 W !,"     military for a disability incurred or aggravated in the line "
"RTN","DGRPU",199,0)
 W !,"     of duty.  Enter 'N' if this veteran applicant was not discharged"
"RTN","DGRPU",200,0)
 W !,"     from the military for a disability incurred or aggravated in the"
"RTN","DGRPU",201,0)
 W !,"     line of duty. Once eligibility has been verified by HEC this field"
"RTN","DGRPU",202,0)
 W !,"     will no longer be editable by VistA users. Send updates and/or requests"
"RTN","DGRPU",203,0)
 W !,"     to HEC."
"RTN","DGRPU",204,0)
 Q
"RTN","DGRPU",205,0)
SSNNM(DFN) ; SSN and name on first line of screen
"RTN","DGRPU",206,0)
 N X,SSN
"RTN","DGRPU",207,0)
 S X=$S($D(^DPT(+DFN,0)):^(0),1:""),SSN=$P(X,"^",9),SSN=$E(SSN,1,3)_"-"_$E(SSN,4,5)_"-"_$E(SSN,6,10)
"RTN","DGRPU",208,0)
 S X=$P(X,U)_"; "_SSN
"RTN","DGRPU",209,0)
 Q X
"RTN","DGRPU",210,0)
 ;
"RTN","DGRPV")
0^19^B17609021
"RTN","DGRPV",1,0)
DGRPV ;ALB/MRL,RTK,PJR,BRM,TMK,AMA,LBD - REGISTRATION DEFINE VARIABLES ON ENTRY ; 8/11/05 12:56pm
"RTN","DGRPV",2,0)
 ;;5.3;Registration;**109,114,247,190,327,365,343,397,415,489,546,545,451,624,677,672,689,716,688**;Aug 13, 1993;Build 29
"RTN","DGRPV",3,0)
 ;
"RTN","DGRPV",4,0)
 ;
"RTN","DGRPV",5,0)
 ;set up variables for registration screen processing
"RTN","DGRPV",6,0)
 ;
"RTN","DGRPV",7,0)
 ;DGRPVV   :string of 15 ones and zeros each character corresponding to
"RTN","DGRPV",8,0)
 ;          a particular screen (0 means allow edit, 1 means don't)
"RTN","DGRPV",9,0)
 ;
"RTN","DGRPV",10,0)
 ;DGRPVV(n):where n=screen number.  String of x ones and zeros where
"RTN","DGRPV",11,0)
 ;          x is the number of elements on screen n (0=edit, 1=don't)
"RTN","DGRPV",12,0)
 ;
"RTN","DGRPV",13,0)
 ;DGVI     :Turn on high intensity
"RTN","DGRPV",14,0)
 ;DGVO     :Turn off high intensity
"RTN","DGRPV",15,0)
 ;
"RTN","DGRPV",16,0)
EN D DT^DICRW I '$D(DVBGUI) D HOME^%ZIS
"RTN","DGRPV",17,0)
 S (DGVI,DGVO)="""""" I $S('$D(IOST(0)):1,'$D(^DG(43,1,0)):1,'$P(^DG(43,1,0),"^",36):1,$D(^DG(43,1,"TERM",IOST(0))):1,1:0) G M ;goto M if not high intensity
"RTN","DGRPV",18,0)
 I $D(^%ZIS(2,IOST(0),7)) S I=^(7),X=$S($P(I,"^",3)]"":3,1:2) I $L($P(I,"^",1)),$L($P(I,"^",X)) S DGVI=$P(I,"^",1),DGVO=$P(I,"^",X)
"RTN","DGRPV",19,0)
M I $L(DGVI_DGVO)>4 S X=132 X ^%ZOSF("RM")
"RTN","DGRPV",20,0)
 S DGRPW=1,DGRPCM=0,DGRPU="UNANSWERED",DGRPNA="NOT APPLICABLE",DGRPV=$S($D(DGRPV):DGRPV,1:1)
"RTN","DGRPV",21,0)
SC7 S X=$S('$D(^DPT(DFN,"TYPE")):0,1:+^("TYPE")) S:'$D(DGELVER) DGELVER=0
"RTN","DGRPV",22,0)
 S DGRPTYPE=$S($D(^DG(391,+X,0)):^(0),1:""),(DGRPSC,DGRPSCE,DGRPSCE1)="" S:'$D(DGELVER) DGELVER=0
"RTN","DGRPV",23,0)
 I DGRPTYPE'="" S DGRPSC=$G(^DG(391,+X,"S")),DGRPSCE=$G(^("E")),DGRPSCE1=$G(^("E10"))
"RTN","DGRPV",24,0)
 ;
"RTN","DGRPV",25,0)
 S DGPH=$P($G(^DPT(DFN,.53)),U)  ;Purple Heart Indicator
"RTN","DGRPV",26,0)
 I $G(DGPRFLG)=1 D
"RTN","DGRPV",27,0)
 . S DGRPVV="000001111111111"
"RTN","DGRPV",28,0)
 E  D
"RTN","DGRPV",29,0)
 . S DGRPVV="000000000000000"
"RTN","DGRPV",30,0)
 S X="5^3^5^2^3^8^4^2^3^2^4^5^5^2^1"
"RTN","DGRPV",31,0)
 F I=1:1:15 S J=+$P(X,"^",I),DGRPVV(I)=$S((I<12)!(I=15):$E("00000000000000000",1,J),1:$E("11111111111111111",1,J))
"RTN","DGRPV",32,0)
 S DGRPVV(1.1)="00"
"RTN","DGRPV",33,0)
 S DGRPVV(2)="00010"
"RTN","DGRPV",34,0)
 I $P($G(^DPT(DFN,.52)),U,9)'="" S $E(DGRPVV(6),4)=1  ;POW status verified, no editing (DG*5.3*688)
"RTN","DGRPV",35,0)
 I $G(DGPH)]"" S $E(DGRPVV(6),8)=1
"RTN","DGRPV",36,0)
 ;
"RTN","DGRPV",37,0)
 F I=3,6,8,9,10,11 S J=+$P(DGRPSC,"^",I) I 'J S DGRPVV=$E(DGRPVV,0,I-1)_1_$E(DGRPVV,I+1,99)
"RTN","DGRPV",38,0)
 ;
"RTN","DGRPV",39,0)
 ;-- if patient type is TRICARE then turn off screens 2,4
"RTN","DGRPV",40,0)
 ;
"RTN","DGRPV",41,0)
 ;-- modified 08/20/2003 for NOIS Calls MAC-0400-61574 & AMA-0700-71769 
"RTN","DGRPV",42,0)
 ;-- commented the line to allow screens 2 & 4 to display for Tricare
"RTN","DGRPV",43,0)
 ;I DGRPTYPE["TRICARE" F I=2,4 S J=+$P(DGRPSC,"^",I) I 'J S DGRPVV=$E(DGRPVV,0,I-1)_1_$E(DGRPVV,I+1,99)
"RTN","DGRPV",44,0)
 ;
"RTN","DGRPV",45,0)
 F I=31:0 S I=$O(^DD(391,I)) Q:I=""!(I>99)  I $D(^(I,0)),($E(^(0),1)'="*"),'+$P(DGRPSCE,"^",I) S X1=$E(I),X2=$E(I,2) I +X1 S DGRPVV(X1)=$E(DGRPVV(X1),0,X2-1)_1_$E(DGRPVV(X1),X2+1,99)
"RTN","DGRPV",46,0)
 I $G(^DPT(DFN,.35)),(^(.35)<+($E(DT,1,3)_"0000")) S DGRPVV=$E(DGRPVV,0,7)_11_$E(DGRPVV,10,99)
"RTN","DGRPV",47,0)
 K DIRUT,DUOUT,DTOUT
"RTN","DGRPV",48,0)
 ;
"RTN","DGRPV",49,0)
 ;Fields are numbered screen_item and put in that piece position.
"RTN","DGRPV",50,0)
 ;Because FM does not allow more than 100 pieces on a node, it was
"RTN","DGRPV",51,0)
 ;necessary to start a new node E10 for fields on screens 10 or higher.
"RTN","DGRPV",52,0)
 ;In these instances, the piece position will be screen_item-100 so,
"RTN","DGRPV",53,0)
 ;for example, screen 11, item 2 would be field 112, but piece 12.
"RTN","DGRPV",54,0)
 ;Items on screens <10 will be found on node E.
"RTN","DGRPV",55,0)
 ;
"RTN","DGRPV",56,0)
 F I=100:0 S I=$O(^DD(391,I)) Q:I=""!(I>150)  I $D(^(I,0)),($E(^(0),1)'="*"),'+$P(DGRPSCE1,"^",I-100) S X1=$E(I,1,2),X2=$E(I,3) I +X1 S DGRPVV(X1)=$E(DGRPVV(X1),0,X2-1)_1_$E(DGRPVV(X1),X2+1,99)
"RTN","DGRPV",57,0)
 ;
"RTN","DGRPV",58,0)
 I $S('($D(DUZ)#2):0,'$D(^XUSEC("DG ELIGIBILITY",DUZ)):0,1:1) G ELVER ;if user holds eligibility key, skip
"RTN","DGRPV",59,0)
 F I=.3,.32,.361 S DGRP(I)=$S($D(^DPT(DFN,I)):^(I),1:"")
"RTN","DGRPV",60,0)
 S DGRPVV(10)=11 I $P(DGRP(.361),"^",1)="V" S DGRPVV(7)=111,DGRPVV(1)=1_$E(DGRPVV(1),2,99) ;if elig verified, can't edit elig data, name, ssn, or dob
"RTN","DGRPV",61,0)
 I $P(DGRP(.3),"^",6)]"" S DGRPVV(8)=11 ;if monetary ben. verified, can't edit income screening data
"RTN","DGRPV",62,0)
 I $P(DGRP(.32),"^",2)]"" S DGRPVV(6)=111111111 ;if service data verified, can't edit service screen
"RTN","DGRPV",63,0)
 ;
"RTN","DGRPV",64,0)
ELVER ;set up variables for eligibility verification
"RTN","DGRPV",65,0)
 ;if elig ver option, only edit screens 1, 2, and 7 (and 6, 8, 9, 10,
"RTN","DGRPV",66,0)
 ;   and 11 if they're turned on).
"RTN","DGRPV",67,0)
 ;
"RTN","DGRPV",68,0)
 S DGRP(.361)=$G(^DPT(DFN,.361))
"RTN","DGRPV",69,0)
 I $P(DGRP(.361),U,3)="H" S DGRPVV(10)=10
"RTN","DGRPV",70,0)
 I $P($G(DGRP(.361)),U)="V",($P(DGRP(.361),U,3)="H") S DGRPVV(6)=$E(DGRPVV(6),1,5)_1_$E(DGRPVV(6),7,99),DGRPVV(11)=1000
"RTN","DGRPV",71,0)
 S:'DGELVER DGRPLAST=$S($G(DGPRFLG)=1:5,1:15)
"RTN","DGRPV",72,0)
 I DGELVER S DGRPVV="00111"_$E(DGRPVV,6,11)_"1111" F I=1:1:11 S J=$E(DGRPVV,I) I 'J S DGRPLAST=I
"RTN","DGRPV",73,0)
Q K DGRPSC,DGRPSCE
"RTN","DGRPV",74,0)
 Q
"RTN","DGRPV",75,0)
 ;
"RTN","DGRPV",76,0)
WW ;Write number on screens for display and/or edit (Z=number)
"RTN","DGRPV",77,0)
 W:DGRPW ! S Z=$S(DGRPCM:Z,DGRPV:"<"_Z_">",$E(DGRPVV(DGRPS),Z):"<"_Z_">",1:"["_Z_"]")
"RTN","DGRPV",78,0)
 I DGRPCM!($E(Z)="[") W @DGVI,Z,@DGVO
"RTN","DGRPV",79,0)
 I 'DGRPCM&($E(Z)'="[") W Z
"RTN","DGRPV",80,0)
 Q
"RTN","DGRPV",81,0)
 ;
"RTN","DGRPV",82,0)
WW1 ;spacing for screen display (Z=item to print)
"RTN","DGRPV",83,0)
 F Z2=1:1:(Z1-$L(Z)) S Z=Z_" "
"RTN","DGRPV",84,0)
 W Z K Z2
"RTN","DGRPV",85,0)
 Q
"RTN","DGRPV",86,0)
 ;
"RTN","DGRPV",87,0)
WW2 ; Write number on screen for fields always selectable
"RTN","DGRPV",88,0)
 W:DGRPW ! S Z="["_Z_"]"
"RTN","DGRPV",89,0)
 I DGRPCM!($E(Z)="[") W @DGVI,Z,@DGVO
"RTN","DGRPV",90,0)
 Q
"RTN","VADPT")
0^64^B16796333
"RTN","VADPT",1,0)
VADPT ;ALB/MRL/MJK,ERC - RETURN PATIENT VARIABLE ARRAYS [DRIVER] ; 8/1/08 1:29pm
"RTN","VADPT",2,0)
 ;;5.3;Registration;**193,343,389,415,489,498,688**;Aug 13, 1993;Build 29
"RTN","VADPT",3,0)
 ;DFN = Patient IFN [if not passed entire array returned as null]
"RTN","VADPT",4,0)
 ;
"RTN","VADPT",5,0)
DEM ;Demographic Variables
"RTN","VADPT",6,0)
 S VAN=1,VAN(1)=12,VAV="VADM" D ^VADPT0 Q
"RTN","VADPT",7,0)
 ;
"RTN","VADPT",8,0)
OPD ;Other Patient Data
"RTN","VADPT",9,0)
 S VAN=2,VAN(1)=7,VAV="VAPD" D ^VADPT0 Q
"RTN","VADPT",10,0)
 ;
"RTN","VADPT",11,0)
ADD ;Current Address
"RTN","VADPT",12,0)
 S VAN=3,VAN(1)=28,VAV="VAPA" D ^VADPT0 Q
"RTN","VADPT",13,0)
 ;
"RTN","VADPT",14,0)
OAD ;Other Patient Variables
"RTN","VADPT",15,0)
 S VAN=4,VAN(1)=11,VAV="VAOA" D ^VADPT0 Q
"RTN","VADPT",16,0)
 ;
"RTN","VADPT",17,0)
INP ;Inpatient Data [pre-version 5]
"RTN","VADPT",18,0)
 N VAINDTT S VAN=5,VAN(1)=11,VAV="VAIN",VAINDTT=$G(VAINDT) N VAINDT S:VAINDTT VAINDT=$$DATIM(VAINDTT) D ^VADPT0 Q
"RTN","VADPT",19,0)
 ;
"RTN","VADPT",20,0)
IN5 ;Inpatient Data [v5.0 and above]
"RTN","VADPT",21,0)
 N VAINDTT S VAN=6,VAN(1)=19,VAV=$S('$D(VAIP("V")):"VAIP",VAIP("V")'?1A.E:"VAIP",1:VAIP("V")),VAINDTT=$G(VAIP("D")) S:$L(VAINDTT) VAIP("D")=VAINDTT S:VAINDTT VAIP("D")=$$DATIM(VAINDTT) D ^VADPT0 S:$L(VAINDTT) VAIP("D")=VAINDTT Q
"RTN","VADPT",22,0)
 ;
"RTN","VADPT",23,0)
ELIG ;Eligibility Information
"RTN","VADPT",24,0)
 S VAN=7,VAN(1)=9,VAV="VAEL" D ^VADPT0 Q
"RTN","VADPT",25,0)
 ;
"RTN","VADPT",26,0)
MB ;Monetary Benefits
"RTN","VADPT",27,0)
 S VAN=8,VAN(1)=9,VAV="VAMB" D ^VADPT0 Q
"RTN","VADPT",28,0)
 ;
"RTN","VADPT",29,0)
SVC ;Service Information
"RTN","VADPT",30,0)
 S VAN=9,VAN(1)=14,VAV="VASV" D ^VADPT0 Q
"RTN","VADPT",31,0)
 ;
"RTN","VADPT",32,0)
REG ;Registration data
"RTN","VADPT",33,0)
 S VAN=10,VAV="VARP" D ^VADPT0 Q
"RTN","VADPT",34,0)
 ;
"RTN","VADPT",35,0)
SDE ;Enrollment Information
"RTN","VADPT",36,0)
 S VAN=11,VAV="VAEN" D ^VADPT0 Q
"RTN","VADPT",37,0)
 ;
"RTN","VADPT",38,0)
SDA ;Appointment Information
"RTN","VADPT",39,0)
 S VAN=12,VAV="VASD" D ^VADPT0 Q
"RTN","VADPT",40,0)
 ;
"RTN","VADPT",41,0)
PID ;Patient Id
"RTN","VADPT",42,0)
 S VAN=13,VAV="VA" D ^VADPT0 Q
"RTN","VADPT",43,0)
 ;
"RTN","VADPT",44,0)
TESTPAT(DFN)    ;Test patient ?  Returns 0 (No) or 1 (Yes)
"RTN","VADPT",45,0)
 S DFN=+$G(DFN) I 'DFN Q 0
"RTN","VADPT",46,0)
 I $D(^DPT("ATEST",DFN)) Q 1
"RTN","VADPT",47,0)
 N NODE S NODE=$G(^DPT(DFN,0))
"RTN","VADPT",48,0)
 I $P(NODE,"^",21)=1 Q 1
"RTN","VADPT",49,0)
 I $E($P(NODE,"^",9),1,5)="00000" Q 1
"RTN","VADPT",50,0)
 Q 0
"RTN","VADPT",51,0)
 ;
"RTN","VADPT",52,0)
V5 S X=$S($D(^DG(43,1,"VERSION")):+^("VERSION"),1:""),VADPT("V")=$S(X<5:0,1:1) K X Q
"RTN","VADPT",53,0)
OERR ;
"RTN","VADPT",54,0)
1 S VATAG=1 D MULT Q
"RTN","VADPT",55,0)
2 S VATAG=2 D MULT Q
"RTN","VADPT",56,0)
3 S VATAG=3 D MULT Q
"RTN","VADPT",57,0)
4 S VATAG=4 D MULT Q
"RTN","VADPT",58,0)
5 S VATAG=5 D MULT Q
"RTN","VADPT",59,0)
6 S VATAG=6 D MULT Q
"RTN","VADPT",60,0)
7 S VATAG=7 D MULT Q
"RTN","VADPT",61,0)
8 S VATAG=8 D MULT Q
"RTN","VADPT",62,0)
9 S VATAG=9 D MULT Q
"RTN","VADPT",63,0)
10 S VATAG=10 D MULT Q
"RTN","VADPT",64,0)
51 S VATAG=11 D MULT Q
"RTN","VADPT",65,0)
52 S VATAG=12 D MULT Q
"RTN","VADPT",66,0)
53 S VATAG=13 D MULT Q
"RTN","VADPT",67,0)
ALL S VATAG=14 D MULT Q
"RTN","VADPT",68,0)
A5 S VATAG=15 D MULT Q
"RTN","VADPT",69,0)
SEL Q:$O(VARRAY(0))']""  S VATAG=0,VATAG(2)=$P($T(TAG),";;",2)
"RTN","VADPT",70,0)
 F VATAG(1)=0:0 S VATAG=$O(VARRAY(VATAG)) Q:VATAG=""  I VATAG(2)[("^"_VATAG_"^") S VARRAY(VATAG)=1,VAROOT=$S($D(VAROOT(VATAG)):VAROOT(VATAG),1:"") D @VATAG
"RTN","VADPT",71,0)
 G Q
"RTN","VADPT",72,0)
 ;
"RTN","VADPT",73,0)
MULT S VATAG=$P($T(TG+VATAG),";;",2)
"RTN","VADPT",74,0)
 F VATAG(1)=1:1 S VATAG(2)=$P(VATAG,"^",VATAG(1)) Q:VATAG(2)=""  S VAROOT=$S($D(VAROOT(VATAG(2))):VAROOT(VATAG(2)),1:"") D @(VATAG(2))
"RTN","VADPT",75,0)
Q S VAROOT="" K:$D(VAROOT)'=11 VAROOT K VATAG Q
"RTN","VADPT",76,0)
 ;
"RTN","VADPT",77,0)
KVA K VA
"RTN","VADPT",78,0)
KVAR D KVAR^VADPT0 K:$D(VAIP("V")) @(VAIP("V")) K I,X,Y,VARRAY,VADM,VAPD,VADPT,VAOA,VASV,VAEL,VAMB,VARP,VAEN,VASD,VAIN,VAIP,VAPA,VAHOW,VAINDT,VAERR,^UTILITY("VADPT",$J),VA200,VATEST Q
"RTN","VADPT",79,0)
DATIM(DATIM) ;If time not specified see if movement on that date
"RTN","VADPT",80,0)
 Q:DATIM'?7N DATIM
"RTN","VADPT",81,0)
 N A,B S A=$O(^DGPM("ADFN"_DFN,DATIM)),B=+$O(^(+A,0))
"RTN","VADPT",82,0)
 I 'A Q DATIM
"RTN","VADPT",83,0)
 I $P($G(^DGPM(+B,0)),"^",2)=3 Q DATIM  ;Next movement is discharge
"RTN","VADPT",84,0)
 F  Q:"^4^5^7^"'[(U_$P($G(^DGPM(+B,0)),"^",2))  S A=$O(^DGPM("ADFN"_DFN,A)),B=+$O(^(+A,0)) I $E(A,1,7)'=DATIM Q
"RTN","VADPT",85,0)
 I 'A Q DATIM
"RTN","VADPT",86,0)
 I $E(A,1,7)'=DATIM Q DATIM
"RTN","VADPT",87,0)
 Q A
"RTN","VADPT",88,0)
 ;
"RTN","VADPT",89,0)
TG ;
"RTN","VADPT",90,0)
 ;;DEM^INP
"RTN","VADPT",91,0)
 ;;DEM^ELIG
"RTN","VADPT",92,0)
 ;;ELIG^INP
"RTN","VADPT",93,0)
 ;;DEM^ADD
"RTN","VADPT",94,0)
 ;;ADD^INP
"RTN","VADPT",95,0)
 ;;DEM^ELIG^ADD
"RTN","VADPT",96,0)
 ;;ELIG^SVC
"RTN","VADPT",97,0)
 ;;ELIG^SVC^MB
"RTN","VADPT",98,0)
 ;;DEM^REG^SDE^SDA
"RTN","VADPT",99,0)
 ;;SDE^SDA
"RTN","VADPT",100,0)
 ;;DEM^IN5
"RTN","VADPT",101,0)
 ;;ELIG^IN5
"RTN","VADPT",102,0)
 ;;ADD^IN5
"RTN","VADPT",103,0)
 ;;DEM^OPD^INP^ADD^ELIG^SVC^OAD^MB^REG^SDE^SDA
"RTN","VADPT",104,0)
 ;;DEM^OPD^IN5^ADD^ELIG^SVC^OAD^MB^REG^SDE^SDA
"RTN","VADPT",105,0)
 ;
"RTN","VADPT",106,0)
TAG ;;^DEM^OPD^INP^IN5^ADD^OAD^ELIG^SVC^MB^REG^SDE^SDA^
"RTN","VADPT0")
0^65^B13477759
"RTN","VADPT0",1,0)
VADPT0 ;ALB/MRL/MJK,ERC - PATIENT VARIABLE ROUTINE DRIVER, CONT. ; 8/1/08 1:29pm
"RTN","VADPT0",2,0)
 ;;5.3;Registration;**343,342,415,489,498,528,689,789,688**;Aug 13, 1993;Build 29
"RTN","VADPT0",3,0)
 ;
"RTN","VADPT0",4,0)
 ;Initialize variables
"RTN","VADPT0",5,0)
 N I1
"RTN","VADPT0",6,0)
 S U="^" D DT^DICRW:'$D(DT)
"RTN","VADPT0",7,0)
 S VAERR=$S('$D(DFN)#2:1,'$D(^DPT(DFN,0)):1,1:0)
"RTN","VADPT0",8,0)
 S Y=VAN'=13 I Y,$D(VAROOT)'[0,VAROOT]"" S Y=0,VAV=VAROOT K @VAV
"RTN","VADPT0",9,0)
 I Y S:$S(VAN>9:1,'$D(VAHOW):0,1:VAHOW[2) VAV="^UTILITY("_""""_VAV_""""_","_$J_")"
"RTN","VADPT0",10,0)
 D @VAN
"RTN","VADPT0",11,0)
Q K X,Y,VAC,VAS,VAV,VAW,VAN,I,VAX,VAZ Q
"RTN","VADPT0",12,0)
 ;
"RTN","VADPT0",13,0)
INIT ; -- determine #'s or names then init array
"RTN","VADPT0",14,0)
 ;
"RTN","VADPT0",15,0)
 S VAS="1^2^3^4^5^6^7^8^9^10^11^12^13^14^15^16^17^18^19^20^21^22^23^24^25^26^27^28"
"RTN","VADPT0",16,0)
 I VAN<10,$D(VAHOW),VAHOW[1 S VAS=$P($T(SS+VAN),";;",2)
"RTN","VADPT0",17,0)
 I $D(VAN(1)) F I=1:1:VAN(1) S @VAV@($P(VAS,"^",I))=""
"RTN","VADPT0",18,0)
 Q
"RTN","VADPT0",19,0)
 ;
"RTN","VADPT0",20,0)
1 ; -- [DEM] demos 
"RTN","VADPT0",21,0)
 D C1,INIT I 'VAERR D 1^VADPT1,13 Q
"RTN","VADPT0",22,0)
 ;
"RTN","VADPT0",23,0)
2 ; -- [OPD] other pt vars
"RTN","VADPT0",24,0)
 D C2,INIT,2^VADPT1:'VAERR Q
"RTN","VADPT0",25,0)
 ;
"RTN","VADPT0",26,0)
3 ; -- [ADD] current address
"RTN","VADPT0",27,0)
 D C3,INIT,3^VADPT1:'VAERR Q
"RTN","VADPT0",28,0)
 ;
"RTN","VADPT0",29,0)
4 ; -- [OAD] other pt vars
"RTN","VADPT0",30,0)
 D C4,INIT,4^VADPT1:'VAERR Q
"RTN","VADPT0",31,0)
 ;
"RTN","VADPT0",32,0)
5 ; -- [INP] inpt data -v5
"RTN","VADPT0",33,0)
 D C5,INIT,5^VADPT2:'VAERR Q
"RTN","VADPT0",34,0)
 ;
"RTN","VADPT0",35,0)
6 ; -- [IN5] inpt data v5
"RTN","VADPT0",36,0)
 D C6,INIT F I=13:1:17 F I1=1:1:7 S @VAV@($P(VAS,"^",I),I1)=""
"RTN","VADPT0",37,0)
 F I=1:1:3 S @VAV@($P(VAS,"^",19),I)=""
"RTN","VADPT0",38,0)
 D 6^VADPT3:'VAERR Q
"RTN","VADPT0",39,0)
 ;
"RTN","VADPT0",40,0)
7 ; -- [ELIG] elig data
"RTN","VADPT0",41,0)
 D C7,INIT F I=1:1:6 S @VAV@($P(VAS,"^",5),I)=""
"RTN","VADPT0",42,0)
 D 7^VADPT4:'VAERR Q
"RTN","VADPT0",43,0)
 ;
"RTN","VADPT0",44,0)
8 ; -- [MB] $ benefits
"RTN","VADPT0",45,0)
 D C8,INIT D 8^VADPT4:'VAERR Q
"RTN","VADPT0",46,0)
 ;
"RTN","VADPT0",47,0)
9 ; -- [SVC] service data
"RTN","VADPT0",48,0)
 D C9,INIT F I=1:1:9 S @VAV@($P(VAS,"^",I),1)="",@VAV@($P(VAS,"^",I),2)=""
"RTN","VADPT0",49,0)
 S @VAV@($P(VAS,"^",10),1)=""
"RTN","VADPT0",50,0)
 F I=11:1:13 S @VAV@($P(VAS,"^",I))=0
"RTN","VADPT0",51,0)
 S @VAV@($P(VAS,"^",14),1)=""
"RTN","VADPT0",52,0)
 S @VAV@($P(VAS,"^",4),3)="",@VAV@($P(VAS,"^",5),3)=""
"RTN","VADPT0",53,0)
 F I=2,6,7,8 F I1=3,4,5 S @VAV@($P(VAS,"^",I),I1)=""
"RTN","VADPT0",54,0)
 D 9^VADPT4:'VAERR Q
"RTN","VADPT0",55,0)
 ;
"RTN","VADPT0",56,0)
10 ; -- [REG] registration data
"RTN","VADPT0",57,0)
 D C10,INIT D 10^VADPT5:'VAERR Q
"RTN","VADPT0",58,0)
 ;
"RTN","VADPT0",59,0)
11 ; -- [SDE] clinic enrollment data
"RTN","VADPT0",60,0)
 D C11,INIT D 11^VADPT5:'VAERR Q
"RTN","VADPT0",61,0)
 ;
"RTN","VADPT0",62,0)
12 ; -- [SDA] appt data
"RTN","VADPT0",63,0)
 D C12,INIT D 12^VADPT5:'VAERR Q
"RTN","VADPT0",64,0)
 ;
"RTN","VADPT0",65,0)
13 ; -- [PID] pt id's
"RTN","VADPT0",66,0)
 S (VA("PID"),VA("BID"))="" D 13^VADPT6:'VAERR Q
"RTN","VADPT0",67,0)
 ;
"RTN","VADPT0",68,0)
KVAR ; kill all vadpt data
"RTN","VADPT0",69,0)
 K VAN
"RTN","VADPT0",70,0)
C1 K ^UTILITY("VADM",$J),VADM Q:$D(VAN)
"RTN","VADPT0",71,0)
C2 K ^UTILITY("VAPD",$J),VAPD Q:$D(VAN)
"RTN","VADPT0",72,0)
C3 K X S:$D(VAPA("P")) X("P")=VAPA("P")
"RTN","VADPT0",73,0)
 S:$D(VAPA("CD")) X("CD")=VAPA("CD")
"RTN","VADPT0",74,0)
 K ^UTILITY("VAPA",$J),VAPA
"RTN","VADPT0",75,0)
 S:$D(X("P")) VAPA("P")=X("P") K X("P")
"RTN","VADPT0",76,0)
 S:$D(X("CD")) VAPA("CD")=X("CD") K X Q:$D(VAN)
"RTN","VADPT0",77,0)
C4 K X S:$D(VAOA("A")) X("A")=VAOA("A")
"RTN","VADPT0",78,0)
 K ^UTILITY("VAOA",$J),VAOA
"RTN","VADPT0",79,0)
 S:$D(X("A")) VAOA("A")=X("A") K X Q:$D(VAN)
"RTN","VADPT0",80,0)
C5 K ^UTILITY("VAIN",$J),VAIN Q:$D(VAN)
"RTN","VADPT0",81,0)
C6 K X F I="D","E","L","M","V" I $D(VAIP(I)) S X(I)=VAIP(I)
"RTN","VADPT0",82,0)
 S Y=$S('$D(VAIP("V")):"VAIP",VAIP("V")'?1A.E:"VAIP",1:VAIP("V")) K ^UTILITY(Y,$J),@Y
"RTN","VADPT0",83,0)
 F I="D","E","L","M","V" I $D(X(I)) S VAIP(I)=X(I)
"RTN","VADPT0",84,0)
 K X Q:$D(VAN)
"RTN","VADPT0",85,0)
C7 K ^UTILITY("VAEL",$J),VAEL Q:$D(VAN)
"RTN","VADPT0",86,0)
C8 K ^UTILITY("VAMB",$J),VAMB Q:$D(VAN)
"RTN","VADPT0",87,0)
C9 K ^UTILITY("VASV",$J),VASV Q:$D(VAN)
"RTN","VADPT0",88,0)
C10 K ^UTILITY("VARP",$J) Q:$D(VAN)
"RTN","VADPT0",89,0)
C11 K ^UTILITY("VAEN",$J) Q:$D(VAN)
"RTN","VADPT0",90,0)
C12 K ^UTILITY("VASD",$J) Q
"RTN","VADPT0",91,0)
C13 Q
"RTN","VADPT0",92,0)
 ;
"RTN","VADPT0",93,0)
SS ;  1^ 2^ 3^ 4^ 5^ 6^ 7^ 8^ 9^10^11^12^13^14^15^16^17^18^19^20^21^22^23^24^25^26^27^28
"RTN","VADPT0",94,0)
 ;;NM^SS^DB^AG^SX^EX^RE^RA^RP^MS^ET^RC
"RTN","VADPT0",95,0)
 ;;BC^BS^FN^MN^MM^OC^ES
"RTN","VADPT0",96,0)
 ;;L1^L2^L3^CI^ST^ZP^CO^PN^TS^TE^Z4^CCA^CL1^CL2^CL3^CCI^CST^CZP^CCO^CCS^CCE^CTY^PR^PC^CT^CPR^CPC^CCT
"RTN","VADPT0",97,0)
 ;;L1^L2^L3^CI^ST^ZP^CO^PN^NM^RE^Z4
"RTN","VADPT0",98,0)
 ;;AN^DR^TS^WL^RB^BS^AD^AT^AF^PT^AP
"RTN","VADPT0",99,0)
 ;;MN^TT^MD^MT^WL^RB^DR^TS^MF^BS^RD^PT^AN^LN^PN^NN^DN^AP^FD
"RTN","VADPT0",100,0)
 ;;EL^PS^SC^VT^IN^TY^CN^ES^MT
"RTN","VADPT0",101,0)
 ;;AA^HB^SS^PE^MR^SI^DI^OR^GI
"RTN","VADPT0",102,0)
 ;;VN^AO^IR^PW^CS^S1^S2^S3^PH^CV^OIF^OEF^UNK^SHD
"RTN","VADPT1")
0^66^B42511929
"RTN","VADPT1",1,0)
VADPT1 ;ALB/MRL/MJK,ERC - PATIENT VARIABLES ; 8/1/08 1:29pm
"RTN","VADPT1",2,0)
 ;;5.3;Registration;**415,489,516,614,688**;Aug 13, 1993;Build 29
"RTN","VADPT1",3,0)
1 ;Demographic [DEM]
"RTN","VADPT1",4,0)
 N W,Z,NODE
"RTN","VADPT1",5,0)
 ;
"RTN","VADPT1",6,0)
 ; -- name [1 - NM]
"RTN","VADPT1",7,0)
 S VAX=^DPT(DFN,0),@VAV@($P(VAS,"^",1))=$P(VAX,"^")
"RTN","VADPT1",8,0)
 ;
"RTN","VADPT1",9,0)
 ; -- ssn [2 - SS]
"RTN","VADPT1",10,0)
 S Z=$P(VAX,"^",9) S:Z]"" @VAV@($P(VAS,"^",2))=Z_$S(Z]"":"^"_$E(Z,1,3)_"-"_$E(Z,4,5)_"-"_$E(Z,6,10),1:"")
"RTN","VADPT1",11,0)
 ;
"RTN","VADPT1",12,0)
 ; -- date of birth [2 - DB]
"RTN","VADPT1",13,0)
 S Z=$P(VAX,"^",3),Y=Z I Y]"" X ^DD("DD") S @VAV@($P(VAS,"^",3))=Z_"^"_Y
"RTN","VADPT1",14,0)
 ;
"RTN","VADPT1",15,0)
 ; -- age [4 - AG]
"RTN","VADPT1",16,0)
 S W=$S('$D(^DPT(DFN,.35)):"",'^(.35):"",1:+^(.35)) S Y=$S('W:DT,1:W) S:Z]"" @VAV@($P(VAS,"^",4))=$E(Y,1,3)-$E(Z,1,3)-($E(Y,4,7)<$E(Z,4,7))
"RTN","VADPT1",17,0)
 ;
"RTN","VADPT1",18,0)
 ; -- expired date [6 - EX]
"RTN","VADPT1",19,0)
 S (Y,Z)=W X:Y]"" ^DD("DD") S:Z]"" @VAV@($P(VAS,"^",6))=Z_"^"_Y
"RTN","VADPT1",20,0)
 ;
"RTN","VADPT1",21,0)
 ; -- sex [5 - SX]
"RTN","VADPT1",22,0)
 S Z=$P(VAX,"^",2) S:Z]"" @VAV@($P(VAS,"^",5))=Z_"^"_$S(Z="M":"MALE",Z="F":"FEMALE",1:"") K Z
"RTN","VADPT1",23,0)
 ;
"RTN","VADPT1",24,0)
 ; -- remarks [7 - RE]
"RTN","VADPT1",25,0)
 S @VAV@($P(VAS,"^",7))=$P(VAX,"^",10)
"RTN","VADPT1",26,0)
 ;
"RTN","VADPT1",27,0)
 ; -- historic race [8 - RA]
"RTN","VADPT1",28,0)
 S Z=$P(VAX,"^",6),@VAV@($P(VAS,"^",8))=Z_$S($D(^DIC(10,+Z,0)):"^"_$P(^(0),"^"),1:"")
"RTN","VADPT1",29,0)
 ;
"RTN","VADPT1",30,0)
 ; -- religion [9 - RP]
"RTN","VADPT1",31,0)
 S Z=$P(VAX,"^",8),@VAV@($P(VAS,"^",9))=Z_$S($D(^DIC(13,+Z,0)):"^"_$P(^(0),"^"),1:"")
"RTN","VADPT1",32,0)
 ;
"RTN","VADPT1",33,0)
 ; -- marital status [10 - MS]
"RTN","VADPT1",34,0)
 S Z=$P(VAX,"^",5),@VAV@($P(VAS,"^",10))=Z_$S($D(^DIC(11,+Z,0)):"^"_$P(^(0),"^"),1:"")
"RTN","VADPT1",35,0)
 ;
"RTN","VADPT1",36,0)
 ; -- ethnicity [11 - ET]
"RTN","VADPT1",37,0)
 S X=0 F Y=1:1 S X=+$O(^DPT(DFN,.06,X)) Q:'X  D
"RTN","VADPT1",38,0)
 .S NODE=$G(^DPT(DFN,.06,X,0)),Z=$P(NODE,"^",1) I Z D
"RTN","VADPT1",39,0)
 ..S @VAV@($P(VAS,"^",11),Y)=Z_"^"_$P($G(^DIC(10.2,Z,0)),"^",1)
"RTN","VADPT1",40,0)
 ..; -- collection method
"RTN","VADPT1",41,0)
 ..S Z=$P(NODE,"^",2) I Z D
"RTN","VADPT1",42,0)
 ...S @VAV@($P(VAS,"^",11),Y,1)=Z_"^"_$P($G(^DIC(10.3,Z,0)),"^",1)
"RTN","VADPT1",43,0)
 S @VAV@($P(VAS,"^",11))=Y-1
"RTN","VADPT1",44,0)
 ;
"RTN","VADPT1",45,0)
 ; -- race [12 - RC]
"RTN","VADPT1",46,0)
 S X=0 F Y=1:1 S X=+$O(^DPT(DFN,.02,X)) Q:'X  D
"RTN","VADPT1",47,0)
 .S NODE=$G(^DPT(DFN,.02,X,0)),Z=$P(NODE,"^",1) I Z D
"RTN","VADPT1",48,0)
 ..S @VAV@($P(VAS,"^",12),Y)=Z_"^"_$P($G(^DIC(10,Z,0)),"^",1)
"RTN","VADPT1",49,0)
 ..; -- collection method
"RTN","VADPT1",50,0)
 ..S Z=$P(NODE,"^",2) I Z D
"RTN","VADPT1",51,0)
 ...S @VAV@($P(VAS,"^",12),Y,1)=Z_"^"_$P($G(^DIC(10.3,Z,0)),"^",1)
"RTN","VADPT1",52,0)
 S @VAV@($P(VAS,"^",12))=Y-1
"RTN","VADPT1",53,0)
 Q
"RTN","VADPT1",54,0)
 ;
"RTN","VADPT1",55,0)
2 ;Other Patient Variables [OPD]
"RTN","VADPT1",56,0)
 N W,Z
"RTN","VADPT1",57,0)
 S VAX=^DPT(DFN,0)
"RTN","VADPT1",58,0)
 ;
"RTN","VADPT1",59,0)
 ; -- city of birth [1 - BC]
"RTN","VADPT1",60,0)
 S @VAV@($P(VAS,"^",1))=$P(VAX,"^",11)
"RTN","VADPT1",61,0)
 ;
"RTN","VADPT1",62,0)
 ; -- state of birth [2 - BS]
"RTN","VADPT1",63,0)
 S Z=$P(VAX,"^",12),@VAV@($P(VAS,"^",2))=Z_$S($D(^DIC(5,+Z,0)):"^"_$P(^(0),"^",1),1:"")
"RTN","VADPT1",64,0)
 ;
"RTN","VADPT1",65,0)
 ; -- occupation [6 - OC]
"RTN","VADPT1",66,0)
 S @VAV@($P(VAS,"^",6))=$P(VAX,"^",7)
"RTN","VADPT1",67,0)
 ;
"RTN","VADPT1",68,0)
 ; -- names
"RTN","VADPT1",69,0)
 S VAX=$S($D(^DPT(DFN,.24)):^(.24),1:"")
"RTN","VADPT1",70,0)
 S @VAV@($P(VAS,"^",3))=$P(VAX,"^",1) ; father's        [3 - FN]
"RTN","VADPT1",71,0)
 S @VAV@($P(VAS,"^",4))=$P(VAX,"^",2) ; mother's        [4 - MN]
"RTN","VADPT1",72,0)
 S @VAV@($P(VAS,"^",5))=$P(VAX,"^",3) ; mother's maiden [5 - MM]
"RTN","VADPT1",73,0)
 ;
"RTN","VADPT1",74,0)
 ; -- employment status [7 - ES]
"RTN","VADPT1",75,0)
 S VAX=$S($D(^DPT(DFN,.311)):^(.311),1:""),W="EMPLOYED FULL TIME^EMPLOYED PART TIME^NOT EMPLOYED^SELF EMPLOYED^RETIRED^ACTIVE MILITARY DUTY^UNKNOWN"
"RTN","VADPT1",76,0)
 S Z=$P(VAX,"^",15),@VAV@($P(VAS,"^",7))=Z_$S(Z:"^"_$P(W,"^",Z),1:"")
"RTN","VADPT1",77,0)
 Q
"RTN","VADPT1",78,0)
 ;
"RTN","VADPT1",79,0)
3 ;Address [ADD]
"RTN","VADPT1",80,0)
 N VAFOR
"RTN","VADPT1",81,0)
 S VABEG=$S($D(VATEST("ADD",9)):VATEST("ADD",9),1:DT),VAEND=$S($D(VATEST("ADD",10)):VATEST("ADD",10),1:DT)
"RTN","VADPT1",82,0)
 I $S($D(VAPA("P")):1,'$D(^DPT(DFN,.121)):1,$P(^(.121),"^",9)'="Y":1,'$P(^(.121),"^",7):1,$P(^(.121),"^",7)>VABEG:1,'$P(^(.121),"^",8):0,1:$P(^(.121),"^",8)<VAEND) S VAX=$S($D(^DPT(DFN,.11)):^(.11),1:""),VAX(1)=0
"RTN","VADPT1",83,0)
 E  S VAX=$S($D(^DPT(DFN,.121)):^(.121),1:""),VAX(1)=1
"RTN","VADPT1",84,0)
 ;set the foreign address fields into local variables for later
"RTN","VADPT1",85,0)
 I 'VAX(1) S VAFOR=$P(VAX,U,8,10)
"RTN","VADPT1",86,0)
 I VAX(1) D
"RTN","VADPT1",87,0)
 . I '$D(^DPT(DFN,.122)) S VAFOR="" Q
"RTN","VADPT1",88,0)
 . S VAFOR=$P(^DPT(DFN,.122),U,1,3)
"RTN","VADPT1",89,0)
 F I=1:1:6 S VAZ=$P(VAX,"^",I),@VAV@($P(VAS,"^",I))=VAZ I I=5,$D(^DIC(5,+VAZ,0)) S VAZ=$P(^(0),"^"),@VAV@($P(VAS,"^",5))=@VAV@($P(VAS,"^",5))_"^"_VAZ
"RTN","VADPT1",90,0)
 S VAZ=$S('VAX(1):$P(VAX,"^",7),1:$P(VAX,"^",11)) S:$D(^DIC(5,+$P(VAX,"^",5),1,+VAZ,0)) VAZ=VAZ_"^"_$P(^(0),"^",1) S @VAV@($P(VAS,"^",7))=VAZ
"RTN","VADPT1",91,0)
 S VAZIP4=$P(VAX,U,12)
"RTN","VADPT1",92,0)
 S @VAV@($P(VAS,U,11))=VAZIP4_$S('$G(VAZIP4):"",($L(VAZIP4)=5):U_VAZIP4,1:U_$E(VAZIP4,1,5)_"-"_$E(VAZIP4,6,9))
"RTN","VADPT1",93,0)
 ;DG*5.3*516
"RTN","VADPT1",94,0)
 I $D(^DPT(DFN,.13)) S @VAV@($P(VAS,"^",8))=$P(^(.13),"^",1)
"RTN","VADPT1",95,0)
 ;foreign address fields
"RTN","VADPT1",96,0)
 F I=1:1:3 S VAZ=$P(VAFOR,U,I) S @VAV@($P(VAS,U,I+22))=VAZ
"RTN","VADPT1",97,0)
 ;
"RTN","VADPT1",98,0)
 I $P($G(VAFOR),U,3)]"" D
"RTN","VADPT1",99,0)
 . S VACNTRY=$P(VAFOR,U,3)
"RTN","VADPT1",100,0)
 . S VACNTRY=$$CNTRYI^DGADDUTL(VACNTRY)
"RTN","VADPT1",101,0)
 . S $P(@VAV@($P(VAS,U,25)),U,2)=VACNTRY
"RTN","VADPT1",102,0)
 I 'VAX(1) G CA
"RTN","VADPT1",103,0)
 S @VAV@($P(VAS,"^",8))=$P(VAX,"^",10)
"RTN","VADPT1",104,0)
 F I=7,8 S VAZ=$P(VAX,"^",I),Y=VAZ X:Y]"" ^DD("DD") S @VAV@($P(VAS,"^",I+2))=VAZ_"^"_Y
"RTN","VADPT1",105,0)
CA ;Confidential Address
"RTN","VADPT1",106,0)
 I '$D(^DPT(DFN,.141)) G Q3
"RTN","VADPT1",107,0)
 N VACAT,VAACT,VAACTDT,VATYP,VATYPNAM,VACAN
"RTN","VADPT1",108,0)
 S VAX=$S($D(^DPT(DFN,.141)):^(.141),1:"")
"RTN","VADPT1",109,0)
 S VAACTDT=$S($D(VAPA("CD")):VAPA("CD"),1:DT)
"RTN","VADPT1",110,0)
 F I=1:1:6 S VAZ=$P(VAX,"^",I),@VAV@($P(VAS,"^",I+12))=VAZ D
"RTN","VADPT1",111,0)
 .I I=5,$D(^DIC(5,+VAZ,0)) S VAZ=$P(^(0),"^"),@VAV@($P(VAS,"^",I+12))=@VAV@($P(VAS,"^",I+12))_"^"_VAZ Q
"RTN","VADPT1",112,0)
 .I I=6,($G(VAZ)]"") S @VAV@($P(VAS,"^",I+12))=@VAV@($P(VAS,"^",I+12))_"^"_$S(($L(VAZ)=5):VAZ,1:$E(VAZ,1,5)_"-"_$E(VAZ,6,9))
"RTN","VADPT1",113,0)
 S VAZ=$P(VAX,"^",11) S:$D(^DIC(5,+$P(VAX,"^",5),1,+VAZ,0)) VAZ=VAZ_"^"_$P(^(0),"^",1) S @VAV@($P(VAS,"^",19))=VAZ
"RTN","VADPT1",114,0)
 F I=7,8 S VAZ=$P(VAX,"^",I),Y=VAZ X:Y]"" ^DD("DD") S @VAV@($P(VAS,"^",I+13))=VAZ_"^"_Y
"RTN","VADPT1",115,0)
 S VABEG=$P(VAX,"^",7),VAEND=$P(VAX,"^",8)
"RTN","VADPT1",116,0)
 S @VAV@($P(VAS,"^",12))=1
"RTN","VADPT1",117,0)
 I 'VABEG!(VABEG>VAACTDT)!(VAEND&(VAEND<VAACTDT)) S @VAV@($P(VAS,"^",12))=0
"RTN","VADPT1",118,0)
 I $D(^DPT(DFN,.14)) D
"RTN","VADPT1",119,0)
 .S VACAN="" F  S VACAN=$O(^DPT(DFN,.14,VACAN)) Q:VACAN=""  D
"RTN","VADPT1",120,0)
 ..Q:'$D(^DPT(DFN,.14,VACAN,0))
"RTN","VADPT1",121,0)
 ..S VATYP=$P(^DPT(DFN,.14,VACAN,0),"^",1),VAACT=$P(^DPT(DFN,.14,VACAN,0),"^",2)
"RTN","VADPT1",122,0)
 ..S VACAT=$$GET1^DID(2.141,.01,"","POINTER","","DGERR")
"RTN","VADPT1",123,0)
 ..S VATYPNAM="" F I=1:1 S VATYPNAM=$P(VACAT,";",I) Q:VATYPNAM=""  D
"RTN","VADPT1",124,0)
 ...I +VATYPNAM[VATYP S VATYPNAM=$P(VATYPNAM,":",2),@VAV@($P(VAS,"^",22),VATYP)=VATYP_"^"_VATYPNAM_"^"_VAACT
"RTN","VADPT1",125,0)
 ;foreign address fields for the confidential address
"RTN","VADPT1",126,0)
 F I=1:1:3 S @VAV@($P(VAS,U,I+25))=$P(VAX,U,I+13)
"RTN","VADPT1",127,0)
 I @VAV@($P(VAS,U,28))]"" D
"RTN","VADPT1",128,0)
 . I '$D(^HL(779.004,$P(VAX,U,16),0)) Q
"RTN","VADPT1",129,0)
 . S $P(@VAV@($P(VAS,U,28)),U,2)=$$CNTRYI^DGADDUTL($P(VAX,U,16))
"RTN","VADPT1",130,0)
Q3 K VABEG,VAEND,VAZIP4 Q
"RTN","VADPT1",131,0)
 ;
"RTN","VADPT1",132,0)
4 ;Other Address [OAD]
"RTN","VADPT1",133,0)
 N VAZIP4
"RTN","VADPT1",134,0)
 I $S('$D(VAOA("A")):1,VAOA("A")<1:1,VAOA("A")>6:1,1:0) S VAX=.21,VAOA("A")=7
"RTN","VADPT1",135,0)
 E  S VAX="."_$P("33^34^211^331^311^25","^",+VAOA("A"))
"RTN","VADPT1",136,0)
 S VAX(1)=VAX,VAX=$S($D(^DPT(DFN,VAX(1))):^(VAX(1)),1:"") I VAX(1)=.25 S VAX=$P(VAX,"^",1)_"^^"_$P(VAX,"^",2,99)
"RTN","VADPT1",137,0)
 S VAX(2)=0 F I=3,4,5,6,7,8 S VAX(2)=VAX(2)+1,@VAV@($P(VAS,"^",VAX(2)))=$P(VAX,"^",I)
"RTN","VADPT1",138,0)
 S @VAV@($P(VAS,"^",7))="",@VAV@($P(VAS,"^",8))=$P(VAX,"^",9),VAX(2)=8
"RTN","VADPT1",139,0)
 F I=1,2 S VAX(2)=VAX(2)+1,@VAV@($P(VAS,"^",VAX(2)))=$P(VAX,"^",I)
"RTN","VADPT1",140,0)
 I "^.311^.25"[("^"_VAX(1)_"^") S @VAV@($P(VAS,"^",10))=""
"RTN","VADPT1",141,0)
 S VAZ=@VAV@($P(VAS,"^",5)) I VAZ,$D(^DIC(5,+VAZ,0)) S VAZ(1)=$P(^(0),"^",1),@VAV@($P(VAS,"^",5))=VAZ_"^"_VAZ(1)
"RTN","VADPT1",142,0)
 S VAZIP4=$P($G(^DPT(DFN,.22)),U,VAOA("A"))
"RTN","VADPT1",143,0)
 S @VAV@($P(VAS,U,11))=VAZIP4_$S('$G(VAZIP4):"",($L(VAZIP4)=5):U_VAZIP4,1:U_$E(VAZIP4,1,5)_"-"_$E(VAZIP4,6,9))
"RTN","VADPT1",144,0)
 Q
"RTN","VADPT4")
0^67^B35665898
"RTN","VADPT4",1,0)
VADPT4 ;ALB/MRL/MJK,ERC - PATIENT VARIABLES; 12 DEC 1988
"RTN","VADPT4",2,0)
 ;;5.3;Registration;**343,342,528,689,688**;Aug 13, 1993;Build 29
"RTN","VADPT4",3,0)
7 ;Eligibility [ELIG]
"RTN","VADPT4",4,0)
 F I=.15,.3,.31,.32,.36,.361,"INE","TYPE","VET" S VAX(I)=$S($D(^DPT(DFN,I)):^(I),1:"")
"RTN","VADPT4",5,0)
 S VAZ=$P(VAX(.36),"^",1) S:$D(^DIC(8,+VAZ,0)) VAZ=VAZ_"^"_$P(^(0),"^",1) S @VAV@($P(VAS,"^",1))=VAZ
"RTN","VADPT4",6,0)
 S VAX=0 F I=0:0 S VAX=$O(^DPT(DFN,"E",VAX)) Q:VAX'>0  S VAZ=VAX I $D(^DIC(8,+VAZ,0)),+@VAV@($P(VAS,"^"))'=VAZ S VAZ=VAZ_"^"_$P(^DIC(8,+VAZ,0),"^") S @VAV@($P(VAS,"^",1),VAX)=VAZ
"RTN","VADPT4",7,0)
 S VAZ=$P(VAX(.32),"^",3) S:$D(^DIC(21,+VAZ,0)) VAZ=VAZ_"^"_$P(^(0),"^",1) S @VAV@($P(VAS,"^",2))=VAZ
"RTN","VADPT4",8,0)
 S VAZ=$S($P(VAX(.3),"^",1)="Y":1,1:0) S:VAZ VAZ=VAZ_"^"_$P(VAX(.3),"^",2) S @VAV@($P(VAS,"^",3))=VAZ
"RTN","VADPT4",9,0)
 S @VAV@($P(VAS,"^",4))=$S(VAX("VET")="Y":1,1:0),VAZ=$S(+$P(VAX(.15),"^",2):0,1:1),@VAV@($P(VAS,"^",5))=VAZ
"RTN","VADPT4",10,0)
 I VAZ F I=1:1:6 S @VAV@($P(VAS,"^",5),I)="" G 71
"RTN","VADPT4",11,0)
 S VAZ=$P(VAX(.15),"^",2),Y=VAZ X ^DD("DD") S @VAV@($P(VAS,"^",5),1)=VAZ_"^"_Y,VAZ=$P(VAX("INE"),"^",1) S:VAZ]"" VAZ=VAZ_"^"_$P("VAMC^REGIONAL OFFICE^RPC","^",VAZ) S @VAV@($P(VAS,"^",5),2)=VAZ
"RTN","VADPT4",12,0)
 S @VAV@($P(VAS,"^",5),3)=$P(VAX("INE"),"^",3),VAZ=$P(VAX("INE"),"^",4) S:$D(^DIC(5,+VAZ,0)) VAZ=VAZ_"^"_$P(^(0),"^",1) S @VAV@($P(VAS,"^",5),4)=VAZ
"RTN","VADPT4",13,0)
 S @VAV@($P(VAS,"^",5),5)=$P(VAX("INE"),"^",6),@VAV@($P(VAS,"^",5),6)=$P(VAX(.3),"^",7)
"RTN","VADPT4",14,0)
71 S VAZ=VAX("TYPE") S:$D(^DG(391,+VAZ,0)) VAZ=VAZ_"^"_$P(^(0),"^",1) S @VAV@($P(VAS,"^",6))=VAZ
"RTN","VADPT4",15,0)
 S @VAV@($P(VAS,"^",7))=$P(VAX(.31),"^",3),VAZ=$P(VAX(.361),"^",1) S:VAZ]"" VAZ=VAZ_"^"_$S(VAZ="V":"VERIFIED",VAZ="P":"PENDING VERIFICATION",VAZ="R":"PENDING RE-VERIFICATION",1:"") S @VAV@($P(VAS,"^",8))=VAZ
"RTN","VADPT4",16,0)
 I $D(^DPT(DFN,0)) S VAX=$P(^(0),"^",14),VAX=$G(^DG(408.32,+VAX,0)) I VAX]"" S @VAV@($P(VAS,"^",9))=$P(VAX,"^",2)_"^"_$P(VAX,"^",1)
"RTN","VADPT4",17,0)
 Q
"RTN","VADPT4",18,0)
 ;
"RTN","VADPT4",19,0)
8 ;Monetary Benefits [MB]
"RTN","VADPT4",20,0)
 N DGTOTVA
"RTN","VADPT4",21,0)
 S @VAV@($P(VAS,"^",6))=0 ; SSI no longer supported
"RTN","VADPT4",22,0)
 D ALL^DGMTU21(DFN,"V",DT,"I")
"RTN","VADPT4",23,0)
 S VAX=$G(^DGMT(408.21,+$G(DGINC("V")),0)) F I=8,11,13 S @VAV@($S(I=8:$P(VAS,"^",3),I=11:$P(VAS,"^",5),1:$P(VAS,"^",8)))=$S($P(VAX,"^",I)'="":"1^"_$P(VAX,"^",I),1:0)
"RTN","VADPT4",24,0)
 S VAX=$G(^DPT(DFN,.362))
"RTN","VADPT4",25,0)
 S DGTOTVA=$P(VAX,U,20)
"RTN","VADPT4",26,0)
 F I=12,13,14 S @VAV@($S(I=12:$P(VAS,"^",1),(I=13):$P(VAS,"^",2),1:$P(VAS,"^",4)))=$S($P(VAX,"^",I)="Y":1_U_DGTOTVA,1:0)
"RTN","VADPT4",27,0)
 S I=17 S @VAV@($P(VAS,"^",9))=$S($P(VAX,"^",17)="Y":1_U_$P(VAX,U,6),1:0)
"RTN","VADPT4",28,0)
 S VAX=$G(^DPT(DFN,.3)) S @VAV@($P(VAS,"^",7))=$S($P(VAX,"^",11)="Y":1_U_DGTOTVA,1:0)
"RTN","VADPT4",29,0)
 K DGDEP,DGREL,DGINC,DGINR Q
"RTN","VADPT4",30,0)
 ;
"RTN","VADPT4",31,0)
9 ;Service information
"RTN","VADPT4",32,0)
 F I=.32,.321,.3291,.52,.53 S VAX(I)=$S($D(^DPT(DFN,I)):^(I),1:"")
"RTN","VADPT4",33,0)
 S VAX("N")=.321 F I=1,2,3 S VAX(3)=I,VAZ=$S($P(VAX(.321),"^",I)="Y":1,1:0),@VAV@($P(VAS,"^",VAX(3)))=VAZ I VAZ S VAX(1)=$S(I=1:"4^5",I=2:"7^9^8",1:11),VAX(4)=0 D 91
"RTN","VADPT4",34,0)
 S VAX("N")=.52 F I=5,11 S VAX(3)=$S(I=5:4,1:5),VAX(1)=$S(I=5:"7^8",1:"13^14"),VAZ=$S($P(VAX(.52),"^",I)="Y":1,1:0),@VAV@($P(VAS,"^",VAX(3)))=VAZ I VAZ S VAX(4)=0 D 91
"RTN","VADPT4",35,0)
 ;Combat Vet
"RTN","VADPT4",36,0)
 S VAX(3)=10,VAX(1)="15",VAZ=$S($P(VAX(.52),U,15)]"":1,1:0),@VAV@($P(VAS,U,VAX(3)))=VAZ I VAZ S VAX(4)=0 D 91
"RTN","VADPT4",37,0)
 F I=6,7,8 S @VAV@($P(VAS,"^",I))="" F VAX(1)=1:1:6 S @VAV@($P(VAS,"^",I),VAX(1))=""
"RTN","VADPT4",38,0)
 S VAX("N")=.32,VAZ=$S($P(VAX(.32),"^",5)]"":1,1:0),@VAV@($P(VAS,"^",6))=VAZ I VAZ,$P(VAX(.32),"^",19)="Y" S VAZ=1,@VAV@($P(VAS,"^",7))=VAZ I VAZ,$P(VAX(.32),"^",20)="Y" S @VAV@($P(VAS,"^",8))=1
"RTN","VADPT4",39,0)
 F I=6,7,8 I @VAV@($P(VAS,"^",I)) S VAX(3)=I,VAX(1)=$S(I=6:"6^7",I=7:"11^12",1:"16^17"),VAX(4)=3 D 91
"RTN","VADPT4",40,0)
 S VAX("N")=.3291
"RTN","VADPT4",41,0)
 F I=6,7,8 I @VAV@($P(VAS,"^",I)) S VAX(3)=I,VAX(1)=I-5,VAX(4)=6 D 94
"RTN","VADPT4",42,0)
 S VAX("N")=.53,VAX(3)=9,VAX(1)="2^3",VAZ=$S($P(VAX(.53),U)="Y":1,$P(VAX(.53),U)="N":1,1:0),@VAV@($P(VAS,U,VAX(3)))=$S($P(VAX(.53),U)="Y":1,$P(VAX(.53),U)="N":0,1:"") I VAZ S VAX(4)=0 D 93
"RTN","VADPT4",43,0)
 S VAX("N")=.3215,VAZ=$$GET^DGENOEIF(DFN,.VAZ,1)
"RTN","VADPT4",44,0)
 ;OEF/OIF
"RTN","VADPT4",45,0)
 F I=11,12,13 S @VAV@(I)=+$G(VAZ($P("OIF^OEF^UNK",U,I-10),"COUNT"))
"RTN","VADPT4",46,0)
 S VAX(2)=11
"RTN","VADPT4",47,0)
 F I="OIF","OEF","UNK" S VAX=0 F  S VAX=$O(VAZ(I,VAX)) S:'VAX VAX(2)=VAX(2)+1 Q:'VAX  S VAX(3)=0 D
"RTN","VADPT4",48,0)
 . N Z
"RTN","VADPT4",49,0)
 . F VAX(1)="LOC","FR","TO" S VAX(3)=VAX(3)+1,Z=$G(VAZ(I,VAX,VAX(1))),@VAV@(VAX(2),VAX,VAX(3))=Z D 95
"RTN","VADPT4",50,0)
 ;SHAD - added with DG*5.3*688
"RTN","VADPT4",51,0)
 S VAX(3)=14,VAZ=$S($P(VAX(.321),U,15)]"":1,1:0),@VAV@($P(VAS,U,VAX(3)))=VAZ I VAZ S @VAV@($P(VAS,U,VAX(3)),1)=$S($P(VAX(.321),U,15)=1:"1^YES",1:"0^NO")
"RTN","VADPT4",52,0)
 Q
"RTN","VADPT4",53,0)
 ;
"RTN","VADPT4",54,0)
91 ;date fields
"RTN","VADPT4",55,0)
 F VAX(2)=1:1 S VAX(4)=VAX(4)+1,X=+$P(VAX(1),"^",VAX(2)) Q:'X  S X=$P(VAX(VAX("N")),"^",X),VAZ=X,Y=VAZ X:Y]"" ^DD("DD") S @VAV@($P(VAS,"^",VAX(3)),VAX(4))=$S(VAZ]"":VAZ_"^"_Y,1:"")
"RTN","VADPT4",56,0)
 Q:VAX(3)=1!(VAX(3)=9)!(VAX(3)=10)
"RTN","VADPT4",57,0)
 ;some sets of codes
"RTN","VADPT4",58,0)
 I VAX(3)=2 S @VAV@($P(VAS,"^",2),4)=$P(VAX(.321),"^",10) S (X,VAZ)=$P(VAX(.321),"^",13) S:X]"" VAZ=VAZ_"^"_$S(X="K":"KOREAN DMZ",1:"VIETNAM") S @VAV@($P(VAS,"^",2),5)=VAZ Q
"RTN","VADPT4",59,0)
 I VAX(3)<4 S X=$P(VAX(.321),"^",12),VAZ=X S:X]"" VAZ=VAZ_"^"_$S(X="T":"NUCLEAR TESTING",X="N":"NAGASAKI/HIROSHIMA",1:"BOTH") S @VAV@($P(VAS,"^",3),2)=VAZ Q
"RTN","VADPT4",60,0)
 ;POW, combat locations
"RTN","VADPT4",61,0)
 I VAX(3)<6 S X=$P(VAX(VAX("N")),"^",$S(VAX(3)=4:6,1:12)),VAZ=X S:$D(^DIC(22,+X,0)) VAZ=VAZ_"^"_$P(^(0),"^",1) S @VAV@($P(VAS,"^",VAX(3)),3)=VAZ Q
"RTN","VADPT4",62,0)
 ;service episodes
"RTN","VADPT4",63,0)
 S X=$S(VAX(3)=6:5,VAX(3)=7:10,1:15),VAX(2)=0 F VAX(5)=X,X+3,X-1 S VAX(2)=VAX(2)+1,VAZ=$P(VAX(VAX("N")),"^",VAX(5)),@VAV@($P(VAS,"^",VAX(3)),VAX(2))=VAZ I "^4^5^9^10^14^15^"[("^"_VAX(5)_"^"),+VAZ D 92
"RTN","VADPT4",64,0)
 Q
"RTN","VADPT4",65,0)
92 ;pointers to Branch of Service (23) and Type Discharge (25)
"RTN","VADPT4",66,0)
 S VAX(6)="^DIC("_$S('(VAX(5)#5):23,1:25)_","_+VAZ_",0)" I $D(@(VAX(6))) S VAZ=$P(^(0),"^",1),@VAV@($P(VAS,"^",VAX(3)),VAX(2))=@VAV@($P(VAS,"^",VAX(3)),VAX(2))_"^"_VAZ
"RTN","VADPT4",67,0)
 Q
"RTN","VADPT4",68,0)
93 ;Purple Heart
"RTN","VADPT4",69,0)
 NEW VAFILE,VAIENS,VAFLDS,VAARR,VAI
"RTN","VADPT4",70,0)
 S VAFILE=2,VAIENS=DFN_",",VAFLDS=".532;.533"
"RTN","VADPT4",71,0)
 D GETS^DIQ(VAFILE,VAIENS,VAFLDS,"IEN","VAARR")
"RTN","VADPT4",72,0)
 F VAI=1:1 S VAFLDS(VAI)=$P(VAFLDS,";",VAI) Q:VAFLDS(VAI)=""  D
"RTN","VADPT4",73,0)
 . I '$D(VAARR(VAFILE,VAIENS,VAFLDS(VAI),"I")),'$D(VAARR(VAFILE,VAIENS,VAFLDS(VAI),"E")) S @VAV@($P(VAS,"^",VAX(3)),VAI)=""
"RTN","VADPT4",74,0)
 . E  S @VAV@($P(VAS,U,VAX(3)),VAI)=$G(VAARR(VAFILE,VAIENS,VAFLDS(VAI),"I"))_"^"_$G(VAARR(VAFILE,VAIENS,VAFLDS(VAI),"E"))
"RTN","VADPT4",75,0)
 Q
"RTN","VADPT4",76,0)
94 ;more military service
"RTN","VADPT4",77,0)
 N VAARR,VAIENS,VAFLDS
"RTN","VADPT4",78,0)
 S VAIENS=DFN_",",VAFLDS=".3291"_VAX(1)
"RTN","VADPT4",79,0)
 D GETS^DIQ(2,VAIENS,VAFLDS,"IEN","VAARR")
"RTN","VADPT4",80,0)
 I $G(VAARR(2,VAIENS,VAFLDS,"I"))'="" D
"RTN","VADPT4",81,0)
 . S @VAV@($P(VAS,"^",VAX(3)),VAX(4))=$G(VAARR(2,VAIENS,VAFLDS,"I"))_"^"_$G(VAARR(2,VAIENS,VAFLDS,"E"))
"RTN","VADPT4",82,0)
 Q
"RTN","VADPT4",83,0)
 ;
"RTN","VADPT4",84,0)
95 ;OEF/OIF
"RTN","VADPT4",85,0)
 N X,Y
"RTN","VADPT4",86,0)
 I VAX(3)=1 S $P(@VAV@(VAX(2),VAX,VAX(3)),U,2)=$$EXTERNAL^DILFD(2.3215,.01,"",Z)
"RTN","VADPT4",87,0)
 I VAX(3)=2!(VAX(3)=3) S Y=Z X ^DD("DD") S:Y'="" $P(@VAV@(VAX(2),VAX,VAX(3)),U,2)=Y
"RTN","VADPT4",88,0)
 Q
"RTN","VADPT4",89,0)
 ;
"RTN","VAFHLZBT")
0^109^B11379827
"RTN","VAFHLZBT",1,0)
VAFHLZBT ;ALB/KCL,CKN - CREATE HL7 BENEFICIARY TRAVEL (ZBT) SEGMENT ; 12/6/06 3:25pm
"RTN","VAFHLZBT",2,0)
 ;;5.3;Registration;**122,688**;Aug 13, 1993;Build 29
"RTN","VAFHLZBT",3,0)
 ;
"RTN","VAFHLZBT",4,0)
 ;
"RTN","VAFHLZBT",5,0)
 ; This generic extrinsic function is designed to return the HL7
"RTN","VAFHLZBT",6,0)
 ; Beneficiary Travel (ZBT) segment.  This segment contains VA-
"RTN","VAFHLZBT",7,0)
 ; specific Beneficiary Travel data for a selected patient.
"RTN","VAFHLZBT",8,0)
 ;
"RTN","VAFHLZBT",9,0)
 ;
"RTN","VAFHLZBT",10,0)
EN(VAFDATE,VAFSTR,VAFHLQ,VAFHLFS) ; --
"RTN","VAFHLZBT",11,0)
 ; Entry point for creating HL7 ZBT segment
"RTN","VAFHLZBT",12,0)
 ;
"RTN","VAFHLZBT",13,0)
 ; Input(s): 
"RTN","VAFHLZBT",14,0)
 ;    VAFDATE - internal entry number of Bene Travel Claim (#392) file
"RTN","VAFHLZBT",15,0)
 ;     VAFSTR - (optional) string of fields requested, separated by
"RTN","VAFHLZBT",16,0)
 ;              commas.  If not passed, return all data fields.
"RTN","VAFHLZBT",17,0)
 ;     VAFHLQ - (optional) HL7 null variable.
"RTN","VAFHLZBT",18,0)
 ;    VAFHLFS - (optional) HL7 field separator.
"RTN","VAFHLZBT",19,0)
 ;
"RTN","VAFHLZBT",20,0)
 ;   Output:
"RTN","VAFHLZBT",21,0)
 ;    String containing the desired components of the HL7 ZBT segment
"RTN","VAFHLZBT",22,0)
 ;
"RTN","VAFHLZBT",23,0)
 ;
"RTN","VAFHLZBT",24,0)
 N VAFANOD,VAFCERT,VAFCLM,VAFMTS,VAFY,X,Y
"RTN","VAFHLZBT",25,0)
 ;
"RTN","VAFHLZBT",26,0)
 ; if VAFHLQ or VAFHLFS not passed, use default HL7 variables
"RTN","VAFHLZBT",27,0)
 S VAFHLQ=$S($D(VAFHLQ):VAFHLQ,1:$G(HLQ)),VAFHLFS=$S($D(VAFHLFS):VAFHLFS,1:$G(HLFS))
"RTN","VAFHLZBT",28,0)
 ;
"RTN","VAFHLZBT",29,0)
 ;If VAFDATE not passed, populate all valid seq. with ""(dbl quotes)
"RTN","VAFHLZBT",30,0)
 I '$G(VAFDATE) D  G ENQ
"RTN","VAFHLZBT",31,0)
 . S VAFY=1
"RTN","VAFHLZBT",32,0)
 . I $G(VAFSTR) F I=2:1:$L(VAFSTR,",") S $P(VAFY,VAFHLFS,$P(VAFSTR,",",I))=VAFHLQ
"RTN","VAFHLZBT",33,0)
 . E  F I=2:1:7 S $P(VAFY,VAFHLFS,I)=VAFHLQ
"RTN","VAFHLZBT",34,0)
 ;
"RTN","VAFHLZBT",35,0)
 ; zero node from BENE TRAVEL CLAIM (#392) file
"RTN","VAFHLZBT",36,0)
 S VAFCLM=$G(^DGBT(392,VAFDATE,0))
"RTN","VAFHLZBT",37,0)
 ; convert 5th piece to pointer value
"RTN","VAFHLZBT",38,0)
 S Y=0,X=$P(VAFCLM,"^",5) I X'="" D ^%DT S X=9999999-Y
"RTN","VAFHLZBT",39,0)
 ;
"RTN","VAFHLZBT",40,0)
 ; zero & 'A' node from BENE TRAVEL CERT. (#392.2) file
"RTN","VAFHLZBT",41,0)
 S VAFCERT=$G(^DGBT(392.2,+$O(^DGBT(392.2,"C",+$P(VAFCLM,"^",2),+X)),0)),VAFANOD=$G(^("A"))
"RTN","VAFHLZBT",42,0)
 I VAFCERT="" S VAFCERT=$G(^DGBT(392.2,+$O(^DGBT(392.2,"C",+$P(VAFCLM,"^",2),0)),0)),VAFANOD=$G(^("A"))
"RTN","VAFHLZBT",43,0)
 ;
"RTN","VAFHLZBT",44,0)
 ;If no certificate, populate all valid seq. with ""(dbl quotes)
"RTN","VAFHLZBT",45,0)
 I VAFCERT="" D  G ENQ
"RTN","VAFHLZBT",46,0)
 . S VAFY=1
"RTN","VAFHLZBT",47,0)
 . I $G(VAFSTR) F I=2:1:$L(VAFSTR,",") S $P(VAFY,VAFHLFS,$P(VAFSTR,",",I))=VAFHLQ
"RTN","VAFHLZBT",48,0)
 . E  F I=2:1:7 S $P(VAFY,VAFHLFS,I)=VAFHLQ
"RTN","VAFHLZBT",49,0)
 ;
"RTN","VAFHLZBT",50,0)
 ; if VAFSTR not passed, return all data fields
"RTN","VAFHLZBT",51,0)
 I $G(VAFSTR)']"" S VAFSTR="2,3,4,5,6,7"
"RTN","VAFHLZBT",52,0)
 S $P(VAFY,VAFHLFS,8)="",VAFSTR=","_VAFSTR_","
"RTN","VAFHLZBT",53,0)
 ;
"RTN","VAFHLZBT",54,0)
 S $P(VAFY,VAFHLFS,1)=1 ; Set Id - always 1
"RTN","VAFHLZBT",55,0)
 I VAFSTR[",2," S $P(VAFY,VAFHLFS,2)=$S($P(VAFCERT,"^",1)]"":$$HLDATE^HLFNC($P(VAFCERT,"^",1)),1:VAFHLQ) ; Date Certified
"RTN","VAFHLZBT",56,0)
 I VAFSTR[",3," S X=$$YN^VAFHLFNC($P(VAFCERT,"^",3)),$P(VAFY,VAFHLFS,3)=$S(X]"":X,1:VAFHLQ) ; Eligible
"RTN","VAFHLZBT",57,0)
 I VAFSTR[",4," S $P(VAFY,VAFHLFS,4)=$S($P(VAFCERT,"^",4)]"":$P(VAFCERT,"^",4),1:VAFHLQ) ; Amount Certified (amount of income reported)
"RTN","VAFHLZBT",58,0)
 ;
"RTN","VAFHLZBT",59,0)
 I VAFSTR[",5," D
"RTN","VAFHLZBT",60,0)
 .I $P(VAFANOD,"^",8)]"" D
"RTN","VAFHLZBT",61,0)
 ..S VAFMTS=$P(VAFANOD,"^",8)
"RTN","VAFHLZBT",62,0)
 ..I $L(VAFMTS)>1 S VAFMTS=$TR(VAFMTS," ","")
"RTN","VAFHLZBT",63,0)
 ..I $L(VAFMTS)<1 S VAFMTST="" Q
"RTN","VAFHLZBT",64,0)
 ..S VAFMTST=+$O(^DG(408.32,"C",VAFMTS,0)),VAFMTST=$G(^DG(408.32,+VAFMTST,0)),VAFMTST=$P(VAFMTST,"^",2)
"RTN","VAFHLZBT",65,0)
 .S $P(VAFY,VAFHLFS,5)=$S($G(VAFMTST)]"":VAFMTST,1:VAFHLQ) ; Means Test Status 
"RTN","VAFHLZBT",66,0)
 ;
"RTN","VAFHLZBT",67,0)
 I VAFSTR[",6," D
"RTN","VAFHLZBT",68,0)
 .I $P(VAFANOD,"^",9)]"" D
"RTN","VAFHLZBT",69,0)
 ..S VAFELIG=+$O(^DIC(8,"B",$P(VAFANOD,"^",9),0)),VAFELIG=$P($G(^DIC(8,VAFELIG,0)),"^",9)
"RTN","VAFHLZBT",70,0)
 .S $P(VAFY,VAFHLFS,6)=$S(+$G(VAFELIG)>0:VAFELIG,1:VAFHLQ) ; Primary Eligibility Code
"RTN","VAFHLZBT",71,0)
 ;
"RTN","VAFHLZBT",72,0)
 I VAFSTR[",7," S $P(VAFY,VAFHLFS,7)=$S($P(VAFCLM,"^",1)]"":$$HLDATE^HLFNC($P(VAFCLM,"^",1)),1:VAFHLQ) ; Claim Date
"RTN","VAFHLZBT",73,0)
 ;
"RTN","VAFHLZBT",74,0)
ENQ Q "ZBT"_VAFHLFS_$G(VAFY)
"RTN","VAFHLZDP")
0^36^B6500029
"RTN","VAFHLZDP",1,0)
VAFHLZDP ;ALB/MLI,TDM - Creates HL7 segments ZDP and/or ZIC ; 12/12/05 3:49pm
"RTN","VAFHLZDP",2,0)
 ;;5.3;Registration;**33,653,688**;Aug 13, 1993;Build 29
"RTN","VAFHLZDP",3,0)
 ;
"RTN","VAFHLZDP",4,0)
 ; This routine will return the ZDP (dependent) segment for the
"RTN","VAFHLZDP",5,0)
 ; dependent specified by the variable VAFIEN.
"RTN","VAFHLZDP",6,0)
 ;
"RTN","VAFHLZDP",7,0)
EN(VAFIEN,VAFSTR,VAFNUM,VAFMTDT,VAFIADT) ; Call to produce ZDP segment for given individual
"RTN","VAFHLZDP",8,0)
 ;
"RTN","VAFHLZDP",9,0)
 ;
"RTN","VAFHLZDP",10,0)
 ;  Input:  VAFIEN   as IEN of PATIENT RELATION (#408.12) file
"RTN","VAFHLZDP",11,0)
 ;          VAFSTR   as string of desired fields separated by commas
"RTN","VAFHLZDP",12,0)
 ;          VAFNUM   as the number desired for the set id (default = 1)
"RTN","VAFHLZDP",13,0)
 ;          VAFMTDT  as the date of the means test (default = DT)
"RTN","VAFHLZDP",14,0)
 ;          VAFIADT  as spouse/dependent inactivation date (optional)
"RTN","VAFHLZDP",15,0)
 ;
"RTN","VAFHLZDP",16,0)
 ; Output:  String of fields forming HL7 ZDP segment
"RTN","VAFHLZDP",17,0)
 ;
"RTN","VAFHLZDP",18,0)
 N NODE,NODE0,X,VAFY,NODE1
"RTN","VAFHLZDP",19,0)
 S NODE=$$DEM^DGMTU1(+$G(VAFIEN))
"RTN","VAFHLZDP",20,0)
 I $G(VAFSTR)']"" G QUIT
"RTN","VAFHLZDP",21,0)
 S $P(VAFY,HLFS,7)="",VAFSTR=","_VAFSTR_","
"RTN","VAFHLZDP",22,0)
 S $P(VAFY,HLFS,1)=$S($G(VAFNUM):VAFNUM,1:1)
"RTN","VAFHLZDP",23,0)
 S VAFMTDT=$S($G(VAFMTDT):VAFMTDT,1:DT)
"RTN","VAFHLZDP",24,0)
 I VAFSTR[",2," S X=$$HLNAME^HLFNC($P(NODE,"^",1)),$P(VAFY,HLFS,2)=$S(X]"":X,1:HLQ) ; name
"RTN","VAFHLZDP",25,0)
 I VAFSTR[",3," S $P(VAFY,HLFS,3)=$S($P(NODE,"^",2)]"":$P(NODE,"^",2),1:HLQ) ; sex
"RTN","VAFHLZDP",26,0)
 I VAFSTR[",4," S X=$$HLDATE^HLFNC($P(NODE,"^",3)),$P(VAFY,HLFS,4)=$S(X]"":X,1:HLQ) ; dob
"RTN","VAFHLZDP",27,0)
 I VAFSTR[",5," S $P(VAFY,HLFS,5)=$S($P(NODE,"^",9)]"":$P(NODE,"^",9),1:HLQ) ; ssn
"RTN","VAFHLZDP",28,0)
 I VAFSTR[",6," D
"RTN","VAFHLZDP",29,0)
 .S NODE0=$G(^DGPR(408.12,+$G(VAFIEN),0))
"RTN","VAFHLZDP",30,0)
 .S $P(VAFY,HLFS,6)=$S($P(NODE0,"^",2)]"":$P(NODE0,"^",2),1:HLQ) ; relationship to patient
"RTN","VAFHLZDP",31,0)
 I VAFSTR[",7," S $P(VAFY,HLFS,7)=+$G(VAFIEN) ; internal entry number
"RTN","VAFHLZDP",32,0)
 I VAFSTR[",8,",$$REL^DGMTU1(VAFIEN)="SPOUSE" D
"RTN","VAFHLZDP",33,0)
 .S NODE1=$$NODE1(+$G(VAFIEN))
"RTN","VAFHLZDP",34,0)
 .S $P(VAFY,HLFS,8)=$S($P(NODE1,"^")]"":$P(NODE1,"^"),1:HLQ) ; spouse's maiden name
"RTN","VAFHLZDP",35,0)
 I VAFSTR[",9," D
"RTN","VAFHLZDP",36,0)
 .S X=-($E(VAFMTDT,1,3)-1_"1231.9"),X=-$O(^DGPR(408.12,+$G(VAFIEN),"E","AID",X))
"RTN","VAFHLZDP",37,0)
 .S X=$$HLDATE^HLFNC(X),$P(VAFY,HLFS,9)=$S(X]"":X,1:HLQ) ; effective date
"RTN","VAFHLZDP",38,0)
 I VAFSTR[",10," S $P(VAFY,HLFS,10)=$S($P(NODE,"^",10)]"":$P(NODE,"^",10),1:HLQ) ; pseudo ssn reason
"RTN","VAFHLZDP",39,0)
 I VAFSTR[",11," S X=$$HLDATE^HLFNC($G(VAFIADT)),$P(VAFY,HLFS,11)=$S(X]"":X,1:HLQ) ; inactivation date
"RTN","VAFHLZDP",40,0)
 ;
"RTN","VAFHLZDP",41,0)
QUIT Q "ZDP"_HLFS_$G(VAFY)
"RTN","VAFHLZDP",42,0)
 ;
"RTN","VAFHLZDP",43,0)
NODE1(DGPRI) ;GET Node 1 of Patient Relation
"RTN","VAFHLZDP",44,0)
 N DGVPI,DGVP1
"RTN","VAFHLZDP",45,0)
 S DGVPI=$P($G(^DGPR(408.12,DGPRI,0)),"^",3)
"RTN","VAFHLZDP",46,0)
 I DGVPI]"" S DGVP1=$G(@("^"_$P(DGVPI,";",2)_+DGVPI_",1)"))
"RTN","VAFHLZDP",47,0)
 Q $S($G(DGVP1)]"":DGVP1,1:"")
"RTN","VAFHLZPD")
0^37^B57162988
"RTN","VAFHLZPD",1,0)
VAFHLZPD ;ALB/KCL/PHH,TDM - Create generic HL7 ZPD segment ; 8/15/08 11:42am
"RTN","VAFHLZPD",2,0)
 ;;5.3;Registration;**94,122,160,220,247,545,564,568,677,653,688**;Aug 13, 1993;Build 29
"RTN","VAFHLZPD",3,0)
 ;
"RTN","VAFHLZPD",4,0)
 ;
"RTN","VAFHLZPD",5,0)
EN(DFN,VAFSTR) ; This generic extrinsic function was designed to return
"RTN","VAFHLZPD",6,0)
 ;  sequences 1 throught 21 of the HL7 ZPD segment.  This segment
"RTN","VAFHLZPD",7,0)
 ;  contains VA-specific patient information that is not contained in
"RTN","VAFHLZPD",8,0)
 ;  the HL7 PID segment.  This call does not accomodate a segment
"RTN","VAFHLZPD",9,0)
 ;  length greater than 245 and has been superceeded by EN1^VAFHLZPD.
"RTN","VAFHLZPD",10,0)
 ;  This line tag has been left for backwards compatability.
"RTN","VAFHLZPD",11,0)
 ;
"RTN","VAFHLZPD",12,0)
 ;Input - DFN as internal entry number of the PATIENT file
"RTN","VAFHLZPD",13,0)
 ;      - VAFSTR as the string of fields requested seperated by commas
"RTN","VAFHLZPD",14,0)
 ;        (Defaults to all fields)
"RTN","VAFHLZPD",15,0)
 ;
"RTN","VAFHLZPD",16,0)
 ;     *****Also assumes all HL7 variables returned from*****
"RTN","VAFHLZPD",17,0)
 ;          INIT^HLTRANS are defined.
"RTN","VAFHLZPD",18,0)
 ;
"RTN","VAFHLZPD",19,0)
 ;Output - String of data forming the ZPD segment.
"RTN","VAFHLZPD",20,0)
 ;
"RTN","VAFHLZPD",21,0)
 ;
"RTN","VAFHLZPD",22,0)
 N VAFY,VAFZPD,REMARKS
"RTN","VAFHLZPD",23,0)
 S VAFY=$$EN1($G(DFN),$G(VAFSTR))
"RTN","VAFHLZPD",24,0)
 ;Segment less than 245 characters
"RTN","VAFHLZPD",25,0)
 I ('$D(VAFZPD(1))) D
"RTN","VAFHLZPD",26,0)
 . ;Remove sequences 22 and higher
"RTN","VAFHLZPD",27,0)
 . S VAFY=$P(VAFY,HLFS,1,22)
"RTN","VAFHLZPD",28,0)
 ;Segment greater than 245 characters
"RTN","VAFHLZPD",29,0)
 I ($D(VAFZPD(1))) D
"RTN","VAFHLZPD",30,0)
 . ;Strip out REMARKS (seq 2)
"RTN","VAFHLZPD",31,0)
 . S REMARKS=$P(VAFY,HLFS,3)
"RTN","VAFHLZPD",32,0)
 . S $P(VAFY,HLFS,3)=""
"RTN","VAFHLZPD",33,0)
 . ;Append up to sequence 21 (PRIMARY CARE TEAM)
"RTN","VAFHLZPD",34,0)
 . S VAFY=VAFY_$P(VAFZPD(1),HLFS,1,((21-$L(VAFY,HLFS))+2))
"RTN","VAFHLZPD",35,0)
 . ;Place REMARKS back into segment, truncating if needed
"RTN","VAFHLZPD",36,0)
 . S $P(VAFY,HLFS,3)=$E(REMARKS,1,(245-$L(VAFY)))
"RTN","VAFHLZPD",37,0)
 ;Done
"RTN","VAFHLZPD",38,0)
 Q VAFY
"RTN","VAFHLZPD",39,0)
 ;
"RTN","VAFHLZPD",40,0)
EN1(DFN,VAFSTR) ; This generic extrinsic function was designed to return the
"RTN","VAFHLZPD",41,0)
 ;  HL7 ZPD segment.  This segment contains VA-specific patient
"RTN","VAFHLZPD",42,0)
 ;  information that is not contained in the HL7 PID segment.  This
"RTN","VAFHLZPD",43,0)
 ;  call superceeds EN^VAFHLZPD because it accomodates a segment
"RTN","VAFHLZPD",44,0)
 ;  length greater than 245.
"RTN","VAFHLZPD",45,0)
 ; 
"RTN","VAFHLZPD",46,0)
 ;
"RTN","VAFHLZPD",47,0)
 ;Input  : DFN - Pointer to PATIENT file (#2)
"RTN","VAFHLZPD",48,0)
 ;         VAFSTR - List of data elements to retrieve seperated
"RTN","VAFHLZPD",49,0)
 ;                  by commas (ex: 1,2,3)
"RTN","VAFHLZPD",50,0)
 ;                - Defaults to all data elements
"RTN","VAFHLZPD",51,0)
 ;         Existance of HL7 encoding variables is assumed
"RTN","VAFHLZPD",52,0)
 ;         (HLFS, HLENC, HLQ)
"RTN","VAFHLZPD",53,0)
 ;Output : ZPD segment
"RTN","VAFHLZPD",54,0)
 ;       : If the ZPD segment becomes longer than 245 characters,
"RTN","VAFHLZPD",55,0)
 ;         remaining fields will be placed in VAFZPD(1)
"RTN","VAFHLZPD",56,0)
 ;Notes  : Sequence 1 (Set ID) will always have a value of '1'
"RTN","VAFHLZPD",57,0)
 ;       : A ZPD segment with sequence one set to '1' will be returned
"RTN","VAFHLZPD",58,0)
 ;         if DFN is not valid
"RTN","VAFHLZPD",59,0)
 ;       : Variable VAFZPD is initialized on entry
"RTN","VAFHLZPD",60,0)
 ;
"RTN","VAFHLZPD",61,0)
 ;Declare variables
"RTN","VAFHLZPD",62,0)
 N VAFHLZPD,VAFY,SEQ,SPILL,SPILLON,SPOT,LASTSEQ,MAXLEN
"RTN","VAFHLZPD",63,0)
 K VAFZPD
"RTN","VAFHLZPD",64,0)
 S MAXLEN=245
"RTN","VAFHLZPD",65,0)
 ;Get data
"RTN","VAFHLZPD",66,0)
 D GETDATA($G(DFN),$G(VAFSTR),"VAFHLZPD")
"RTN","VAFHLZPD",67,0)
 ;Build segment
"RTN","VAFHLZPD",68,0)
 S VAFY="VAFHLZPD"
"RTN","VAFHLZPD",69,0)
 S SPILL=0
"RTN","VAFHLZPD",70,0)
 S SPILLON=0
"RTN","VAFHLZPD",71,0)
 S @VAFY="ZPD"
"RTN","VAFHLZPD",72,0)
 S LASTSEQ=+$O(VAFHLZPD(""),-1)
"RTN","VAFHLZPD",73,0)
 F SEQ=1:1:LASTSEQ D
"RTN","VAFHLZPD",74,0)
 . ;Make sure maximum length won't be exceeded
"RTN","VAFHLZPD",75,0)
 . I ($L(@VAFY)+$L($G(VAFHLZPD(SEQ)))+1)>MAXLEN D
"RTN","VAFHLZPD",76,0)
 . . ;Max length exceeded - start putting data on next node
"RTN","VAFHLZPD",77,0)
 . . S SPILL=SPILL+1
"RTN","VAFHLZPD",78,0)
 . . S SPILLON=SEQ-1
"RTN","VAFHLZPD",79,0)
 . . S VAFY=$NA(VAFZPD(SPILL))
"RTN","VAFHLZPD",80,0)
 . ;Add to string
"RTN","VAFHLZPD",81,0)
 . S SPOT=(SEQ+1)-SPILLON
"RTN","VAFHLZPD",82,0)
 . S $P(@VAFY,HLFS,SPOT)=$G(VAFHLZPD(SEQ))
"RTN","VAFHLZPD",83,0)
 ;Return segment
"RTN","VAFHLZPD",84,0)
 Q VAFHLZPD
"RTN","VAFHLZPD",85,0)
 ;
"RTN","VAFHLZPD",86,0)
GETDATA(DFN,VAFSTR,ARRAY) ;Get info needed to build segment
"RTN","VAFHLZPD",87,0)
 ;Input  : DFN - Pointer to PATIENT file (#2)
"RTN","VAFHLZPD",88,0)
 ;         VAFSTR - List of data elements to retrieve seperated
"RTN","VAFHLZPD",89,0)
 ;                  by commas (ex: 1,2,3)
"RTN","VAFHLZPD",90,0)
 ;                - Defaults to all data elements
"RTN","VAFHLZPD",91,0)
 ;         ARRAY - Array to return data in (full global reference)
"RTN","VAFHLZPD",92,0)
 ;                 Defaults to ^TMP($J,"VAFHLZPD")
"RTN","VAFHLZPD",93,0)
 ;         Existance of HL7 encoding variables is assumed
"RTN","VAFHLZPD",94,0)
 ;         (HLFS, HLENC, HLQ)
"RTN","VAFHLZPD",95,0)
 ;Output : Nothing
"RTN","VAFHLZPD",96,0)
 ;           ARRAY(SeqNum) = Value
"RTN","VAFHLZPD",97,0)
 ;Notes  : ARRAY is initialized (KILLed) on entry
"RTN","VAFHLZPD",98,0)
 ;       : Sequence 1 (Set ID) will always have a value of '1'
"RTN","VAFHLZPD",99,0)
 ;
"RTN","VAFHLZPD",100,0)
 ;Check input
"RTN","VAFHLZPD",101,0)
 S ARRAY=$G(ARRAY)
"RTN","VAFHLZPD",102,0)
 S:(ARRAY="") ARRAY=$NA(^TMP($J,"VAFHLZPD"))
"RTN","VAFHLZPD",103,0)
 K @ARRAY
"RTN","VAFHLZPD",104,0)
 ;Sequence 1 - Set ID
"RTN","VAFHLZPD",105,0)
 ;  value is always '1'
"RTN","VAFHLZPD",106,0)
 S @ARRAY@(1)=1
"RTN","VAFHLZPD",107,0)
 S DFN=+$G(DFN)
"RTN","VAFHLZPD",108,0)
 S VAFSTR=$G(VAFSTR)
"RTN","VAFHLZPD",109,0)
 S:(VAFSTR="") VAFSTR=$$COMMANUM(1,40)
"RTN","VAFHLZPD",110,0)
 S VAFSTR=","_VAFSTR_","
"RTN","VAFHLZPD",111,0)
 ;Declare variables
"RTN","VAFHLZPD",112,0)
 N VAFNODE,VAPD,X1,X
"RTN","VAFHLZPD",113,0)
 ;Get zero node
"RTN","VAFHLZPD",114,0)
 S VAFNODE=$G(^DPT(DFN,0))
"RTN","VAFHLZPD",115,0)
 ;Get other patient data from VADPT
"RTN","VAFHLZPD",116,0)
 D OPD^VADPT
"RTN","VAFHLZPD",117,0)
 ;Sequence 2 - Remarks (truncate to 60 characters)
"RTN","VAFHLZPD",118,0)
 I VAFSTR[",2," S X=$P(VAFNODE,"^",10),@ARRAY@(2)=$S(X="":HLQ,1:$E(X,1,60))
"RTN","VAFHLZPD",119,0)
 ;Sequence 3 - Place of birth (city)
"RTN","VAFHLZPD",120,0)
 I VAFSTR[",3," S @ARRAY@(3)=$S(VAPD(1)]"":VAPD(1),1:HLQ)
"RTN","VAFHLZPD",121,0)
 ;Sequence 4 - Place of birth (State abbrv.)
"RTN","VAFHLZPD",122,0)
 I VAFSTR[",4," S X1=$P($G(^DIC(5,$P(+VAPD(2),"^",1),0)),"^",2),@ARRAY@(4)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",123,0)
 ;Sequence 5 - Current means test status
"RTN","VAFHLZPD",124,0)
 I VAFSTR[",5," S X=$P(VAFNODE,"^",14),X1=$P($G(^DG(408.32,+X,0)),"^",2),@ARRAY@(5)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",125,0)
 ;Sequence 6 - Fathers name
"RTN","VAFHLZPD",126,0)
 I VAFSTR[",6," S @ARRAY@(6)=$S(VAPD(3)]"":VAPD(3),1:HLQ)
"RTN","VAFHLZPD",127,0)
 ;Sequence 7 - Mothers name
"RTN","VAFHLZPD",128,0)
 I VAFSTR[",7," S @ARRAY@(7)=$S(VAPD(4)]"":VAPD(4),1:HLQ)
"RTN","VAFHLZPD",129,0)
 ;Sequence 8 - Rated incompetent
"RTN","VAFHLZPD",130,0)
 I VAFSTR[",8," S X1=$$YN^VAFHLFNC($P($G(^DPT(DFN,.29)),"^",12)),@ARRAY@(8)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",131,0)
 ;Sequence 9 - Date of Death
"RTN","VAFHLZPD",132,0)
 I VAFSTR[",9," S X=$P($G(^DPT(DFN,.35)),"^",1),X1=$$HLDATE^HLFNC(X),@ARRAY@(9)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",133,0)
 ;Sequence 10 - Collateral sponser name
"RTN","VAFHLZPD",134,0)
 I VAFSTR[10 D
"RTN","VAFHLZPD",135,0)
 . S X=$P($G(^DPT(DFN,.36)),"^",11)
"RTN","VAFHLZPD",136,0)
 . S X1=$P($G(^DPT(+X,0)),"^",1)
"RTN","VAFHLZPD",137,0)
 . S @ARRAY@(10)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",138,0)
 ;Sequence 11 - Active Health Insurance?
"RTN","VAFHLZPD",139,0)
 I VAFSTR[11 S X=$$INS^VAFHLFNC(DFN),X1=$$YN^VAFHLFNC(X),@ARRAY@(11)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",140,0)
 ;Sequences 12 & 13
"RTN","VAFHLZPD",141,0)
 I VAFSTR[12!(VAFSTR[13) D
"RTN","VAFHLZPD",142,0)
 . S X=$G(^DPT(DFN,.38))
"RTN","VAFHLZPD",143,0)
 . ;Sequence 12 - Eligible for Medicaid
"RTN","VAFHLZPD",144,0)
 . I VAFSTR[12 S X1=$$YN^VAFHLFNC($P(X,"^",1)),@ARRAY@(12)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",145,0)
 . ;Sequence 13 - Date Medicaid last asked
"RTN","VAFHLZPD",146,0)
 . I VAFSTR[13 S X1=$$HLDATE^HLFNC($P(X,"^",2)),@ARRAY@(13)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",147,0)
 ;Sequence 14 - Race
"RTN","VAFHLZPD",148,0)
 I VAFSTR[14 S X=$P(VAFNODE,"^",6) S X1=$P($G(^DIC(10,+X,0)),"^",2),@ARRAY@(14)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",149,0)
 ;Sequence 15 - Religious Preference
"RTN","VAFHLZPD",150,0)
 I VAFSTR[15 S X=$P(VAFNODE,"^",8) S X1=$P($G(^DIC(13,+X,0)),"^",4),@ARRAY@(15)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",151,0)
 ;Sequence 16 - Homeless Indicator
"RTN","VAFHLZPD",152,0)
 I VAFSTR[16 S X=$T(HOMELESS^SOWKHIRM) S @ARRAY@(16)=$S(X]"":$$HOMELESS^SOWKHIRM(DFN),1:HLQ)
"RTN","VAFHLZPD",153,0)
 ;Sequences 17 & 20
"RTN","VAFHLZPD",154,0)
 I ((VAFSTR[17)!(VAFSTR[20)) D
"RTN","VAFHLZPD",155,0)
 . ;POW Status & Location
"RTN","VAFHLZPD",156,0)
 . N VAF52,POW,LOC
"RTN","VAFHLZPD",157,0)
 . S VAF52=$G(^DPT(DFN,.52))
"RTN","VAFHLZPD",158,0)
 . ;POW Status Indicated?
"RTN","VAFHLZPD",159,0)
 . S POW=$P(VAF52,"^",5)
"RTN","VAFHLZPD",160,0)
 . S:(POW="") POW=HLQ
"RTN","VAFHLZPD",161,0)
 . ;POW Confinement Location (translates pointer to coded value)
"RTN","VAFHLZPD",162,0)
 . S LOC=$P(VAF52,"^",6)
"RTN","VAFHLZPD",163,0)
 . S:(LOC="") LOC=HLQ
"RTN","VAFHLZPD",164,0)
 . I (LOC'=HLQ) S LOC=$S(LOC>0&(LOC<7):LOC+3,LOC>6&(LOC<9):$C(LOC+58),1:"")
"RTN","VAFHLZPD",165,0)
 . ;Add to output array
"RTN","VAFHLZPD",166,0)
 . ;Sequence 17 - POW Status
"RTN","VAFHLZPD",167,0)
 . S:(VAFSTR[17) @ARRAY@(17)=POW
"RTN","VAFHLZPD",168,0)
 . ;Sequence 20 - POW Confinement Location
"RTN","VAFHLZPD",169,0)
 . S:(VAFSTR[20) @ARRAY@(20)=LOC
"RTN","VAFHLZPD",170,0)
 ;Sequence 18 - Insurance Type
"RTN","VAFHLZPD",171,0)
 I VAFSTR[18 S X=+$$INSTYP^IBCNS1(DFN),@ARRAY@(18)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZPD",172,0)
 ;Sequence 19 - RX Copay Exemption Status
"RTN","VAFHLZPD",173,0)
 I VAFSTR[19 S X=+$$RXST^IBARXEU(DFN),@ARRAY@(19)=$S(X'<0:X,1:HLQ)
"RTN","VAFHLZPD",174,0)
 ;Sequence 21 - Primary Care Team
"RTN","VAFHLZPD",175,0)
 I (VAFSTR[21) D
"RTN","VAFHLZPD",176,0)
 . ;Get Primary Care Team  (as defined in PCMM)
"RTN","VAFHLZPD",177,0)
 . S X=$$PCTEAM^DGSDUTL(DFN)
"RTN","VAFHLZPD",178,0)
 . S X=$P(X,"^",2)
"RTN","VAFHLZPD",179,0)
 . S:(X="") X=HLQ
"RTN","VAFHLZPD",180,0)
 . ;Put into output array
"RTN","VAFHLZPD",181,0)
 . S @ARRAY@(21)=X
"RTN","VAFHLZPD",182,0)
 ; 
"RTN","VAFHLZPD",183,0)
 ; Sequences 22 thru 30 added by DG*5.3*264 (Smart Card)
"RTN","VAFHLZPD",184,0)
 ;
"RTN","VAFHLZPD",185,0)
 ; Sequences 22 & 23
"RTN","VAFHLZPD",186,0)
 I VAFSTR[22!(VAFSTR[23) D
"RTN","VAFHLZPD",187,0)
 . ; GI Insurance
"RTN","VAFHLZPD",188,0)
 . S X=$G(^DPT(DFN,.362))
"RTN","VAFHLZPD",189,0)
 . I VAFSTR[22 S X1=$P(X,U,17),@ARRAY@(22)=$S(X1="U":"N",X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",190,0)
 . I VAFSTR[23 S X1=$P(X,U,6),@ARRAY@(23)=$S(X1:$E(X1,1,6),1:HLQ)
"RTN","VAFHLZPD",191,0)
 ; Sequences 24 through 27
"RTN","VAFHLZPD",192,0)
 I VAFSTR[24!(VAFSTR[25)!(VAFSTR[26)!(VAFSTR[27) D
"RTN","VAFHLZPD",193,0)
 . ; Most recent care dates & locations
"RTN","VAFHLZPD",194,0)
 . S X=$G(^DPT(DFN,1010.15))
"RTN","VAFHLZPD",195,0)
 . I VAFSTR[24 S X1=$$HLDATE^HLFNC($P(X,U)),@ARRAY@(24)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",196,0)
 . I VAFSTR[25 S X1=$P(X,U,2),X1=$P($G(^DIC(4,+X1,0)),U),@ARRAY@(25)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",197,0)
 . I VAFSTR[26 S X1=$$HLDATE^HLFNC($P(X,U,3)),@ARRAY@(26)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",198,0)
 . I VAFSTR[27 S X1=$P(X,U,4),X1=$P($G(^DIC(4,+X1,0)),U),@ARRAY@(27)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",199,0)
 ; Sequences 28 & 29
"RTN","VAFHLZPD",200,0)
 I VAFSTR[28!(VAFSTR[29) D
"RTN","VAFHLZPD",201,0)
 . ; dates ruled incompetent (civil and VA)
"RTN","VAFHLZPD",202,0)
 . S X=$G(^DPT(DFN,.29))
"RTN","VAFHLZPD",203,0)
 . I VAFSTR[28 S X1=$$HLDATE^HLFNC($P(X,U,2)),@ARRAY@(28)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",204,0)
 . I VAFSTR[29 S X1=$$HLDATE^HLFNC($P(X,U)),@ARRAY@(29)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",205,0)
 ; Sequence 30 - Spinal cord injury
"RTN","VAFHLZPD",206,0)
 I VAFSTR[30 S X=$P($G(^DPT(DFN,57)),U,4),@ARRAY@(30)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZPD",207,0)
 ; Sequence 31 - Source of Notification
"RTN","VAFHLZPD",208,0)
 I VAFSTR[9&(VAFSTR[31) S X=$P($G(^DPT(DFN,.35)),U,3),@ARRAY@(31)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZPD",209,0)
 ; Sequence 32 - Date/Time Last Updated
"RTN","VAFHLZPD",210,0)
 I VAFSTR[9&(VAFSTR[32) S X=$P($G(^DPT(DFN,.35)),U,4),X1=$$HLDATE^HLFNC(X),@ARRAY@(32)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",211,0)
 ; Sequence 33 - Filipino Veteran Proof
"RTN","VAFHLZPD",212,0)
 I VAFSTR[33 S X=$P($G(^DPT(DFN,.321)),U,14),@ARRAY@(33)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZPD",213,0)
 ; Sequence 34 - Pseudo SSN Reason - Veteran
"RTN","VAFHLZPD",214,0)
 I VAFSTR[34 S X=$P($G(^DPT(DFN,"SSN")),U),@ARRAY@(34)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZPD",215,0)
 ; Sequence 35 - Agency/Allied Country
"RTN","VAFHLZPD",216,0)
 I VAFSTR[35 S X=$P($G(^DPT(DFN,.3)),U,9),X1=$P($G(^DIC(35,+X,0)),U,2),@ARRAY@(35)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",217,0)
 ; Sequence 40 - Emergency Response Indicator
"RTN","VAFHLZPD",218,0)
 I VAFSTR[40 S X=$P($G(^DPT(DFN,.18)),U),@ARRAY@(40)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZPD",219,0)
 ;Done - cleanup & quit
"RTN","VAFHLZPD",220,0)
 D KVA^VADPT
"RTN","VAFHLZPD",221,0)
 Q
"RTN","VAFHLZPD",222,0)
 ;
"RTN","VAFHLZPD",223,0)
COMMANUM(FROM,TO) ;Build comma seperated list of numbers
"RTN","VAFHLZPD",224,0)
 ;Input  : FROM - Starting number (default = 1)
"RTN","VAFHLZPD",225,0)
 ;         TO - Ending number (default = FROM)
"RTN","VAFHLZPD",226,0)
 ;Output : Comma seperated list of numbers between FROM and TO
"RTN","VAFHLZPD",227,0)
 ;         (Ex: 1,2,3)
"RTN","VAFHLZPD",228,0)
 ;Notes  : Call assumes FROM <= TO
"RTN","VAFHLZPD",229,0)
 ;
"RTN","VAFHLZPD",230,0)
 S FROM=$G(FROM) S:(FROM="") FROM=1
"RTN","VAFHLZPD",231,0)
 S TO=$G(TO) S:(TO="") TO=FROM
"RTN","VAFHLZPD",232,0)
 N OUTPUT,X
"RTN","VAFHLZPD",233,0)
 S OUTPUT=FROM
"RTN","VAFHLZPD",234,0)
 F X=(FROM+1):1:TO S OUTPUT=(OUTPUT_","_X)
"RTN","VAFHLZPD",235,0)
 Q OUTPUT
"RTN","VAFHLZTA")
0^38^B11281178
"RTN","VAFHLZTA",1,0)
VAFHLZTA ;ALB/ESD,TDM - Creation of ZTA segment ; 8/20/07 12:21pm
"RTN","VAFHLZTA",2,0)
 ;;5.3;Registration;**68,653,688**;Aug 13, 1993;Build 29
"RTN","VAFHLZTA",3,0)
 ;
"RTN","VAFHLZTA",4,0)
 ; This generic extrinsic function returns the HL7 VA-Specific Temporary Address (ZTA) segment.
"RTN","VAFHLZTA",5,0)
 ;
"RTN","VAFHLZTA",6,0)
 ;
"RTN","VAFHLZTA",7,0)
EN(DFN,VAFSTR,VAFNUM,HL) ; Returns HL7 ZTA segment containing temporary address
"RTN","VAFHLZTA",8,0)
 ;                 data.
"RTN","VAFHLZTA",9,0)
 ;
"RTN","VAFHLZTA",10,0)
 ;  Input - DFN as internal entry number of the PATIENT file
"RTN","VAFHLZTA",11,0)
 ;          VAFSTR as string of fields requested separated by commas.
"RTN","VAFHLZTA",12,0)
 ;          VAFNUM as SetId - set to 1.
"RTN","VAFHLZTA",13,0)
 ;          HL as array of standard HL7 variables.  **REQUIRED**
"RTN","VAFHLZTA",14,0)
 ;
"RTN","VAFHLZTA",15,0)
 ; Output - string of components forming the ZTA segment.
"RTN","VAFHLZTA",16,0)
 ;
"RTN","VAFHLZTA",17,0)
 N VAFNODE,VAFY,X,X1
"RTN","VAFHLZTA",18,0)
 N HLECH,HLFS,HLQ,COMP,SUBCOMP,REP,HLES,VAFNODE1,HL7STRG,SQ5,CNTRY
"RTN","VAFHLZTA",19,0)
 I '$G(DFN)!($G(VAFSTR)']"") G QUIT
"RTN","VAFHLZTA",20,0)
 S HLECH=HL("ECH"),HLFS=HL("FS"),HLQ=HL("Q"),(COMP,HL("COMP"))=$E(HL("ECH"),1)
"RTN","VAFHLZTA",21,0)
 S (SUBCOMP,HL("SUBCOMP"))=$E(HL("ECH"),4),(REP,HL("REP"))=$E(HL("ECH"),2),HLES=$E(HL("ECH"),3)
"RTN","VAFHLZTA",22,0)
 S VAFNODE=$G(^DPT(DFN,.121)),VAFNODE1=$G(^DPT(DFN,.122))
"RTN","VAFHLZTA",23,0)
 S $P(VAFY,HLFS,9)="",VAFSTR=","_VAFSTR_","
"RTN","VAFHLZTA",24,0)
 S $P(VAFY,HLFS,1)=1 ; SetId equal to 1
"RTN","VAFHLZTA",25,0)
 I VAFSTR[",2," S X=$P(VAFNODE,"^",9),$P(VAFY,HLFS,2)=$$YN^VAFHLFNC(X) ; Temporary Address Enter/Edit?
"RTN","VAFHLZTA",26,0)
 I VAFSTR[",3," S X=$$HLDATE^HLFNC($P(VAFNODE,"^",7)),$P(VAFY,HLFS,3)=$S(X]"":X,1:HLQ) ; Temporary Address Start Date
"RTN","VAFHLZTA",27,0)
 I VAFSTR[",4," S X=$$HLDATE^HLFNC($P(VAFNODE,"^",8)),$P(VAFY,HLFS,4)=$S(X]"":X,1:HLQ) ; Temporary Address End Date
"RTN","VAFHLZTA",28,0)
 I VAFSTR[",5," D
"RTN","VAFHLZTA",29,0)
 . K HL7STRG S HL7STRG=$P(VAFNODE,"^",1) D HL7TXT^VAFCQRY1(.HL7STRG,.HL,HLES) S SQ5=$S(HL7STRG="":HLQ,1:HL7STRG)
"RTN","VAFHLZTA",30,0)
 . K HL7STRG S HL7STRG=$P(VAFNODE,"^",2) D HL7TXT^VAFCQRY1(.HL7STRG,.HL,HLES) S $P(SQ5,COMP,2)=$S(HL7STRG="":HLQ,1:HL7STRG)
"RTN","VAFHLZTA",31,0)
 . K HL7STRG S HL7STRG=$P(VAFNODE,"^",3) D HL7TXT^VAFCQRY1(.HL7STRG,.HL,HLES) S $P(SQ5,COMP,8)=$S(HL7STRG="":HLQ,1:HL7STRG)
"RTN","VAFHLZTA",32,0)
 . S CNTRY=$$GET1^DIQ(2,DFN_",",.1223)  ;RETURN EXTERNAL VALUE
"RTN","VAFHLZTA",33,0)
 . I CNTRY="US" S CNTRY="USA"
"RTN","VAFHLZTA",34,0)
 . K HL7STRG S HL7STRG=$P(VAFNODE,"^",4),$P(SQ5,COMP,3)=$S(HL7STRG="":HLQ,1:HL7STRG)
"RTN","VAFHLZTA",35,0)
 . I CNTRY=""!(CNTRY="USA") D    ;have USA address
"RTN","VAFHLZTA",36,0)
 . . S X=$$GET1^DIQ(5,+$P(VAFNODE,"^",5)_",",1),$P(SQ5,COMP,4)=$S(X="":HLQ,1:X)
"RTN","VAFHLZTA",37,0)
 . . S X=$P(VAFNODE,"^",12),$P(SQ5,COMP,5)=$S(X="":HLQ,1:X)
"RTN","VAFHLZTA",38,0)
 . I CNTRY'="",(CNTRY'="USA") D  ;Check for foreign address fields
"RTN","VAFHLZTA",39,0)
 . . S X=$P(VAFNODE1,"^",1),$P(SQ5,COMP,4)=$S(X="":HLQ,1:X)
"RTN","VAFHLZTA",40,0)
 . . S X=$P(VAFNODE1,"^",2),$P(SQ5,COMP,5)=$S(X="":HLQ,1:X)
"RTN","VAFHLZTA",41,0)
 . S $P(SQ5,COMP,6)=$S(CNTRY="":HLQ,1:CNTRY)
"RTN","VAFHLZTA",42,0)
 . S X=$$GET1^DIQ(2,DFN_",",.12111),$P(SQ5,COMP,9)=$S(X="":HLQ,1:X)
"RTN","VAFHLZTA",43,0)
 . S $P(VAFY,HLFS,5)=SQ5
"RTN","VAFHLZTA",44,0)
 I VAFSTR[",6," S X=$$GET1^DIQ(2,DFN_",",.12111),$P(VAFY,HLFS,6)=$S(X="":HLQ,1:X)
"RTN","VAFHLZTA",45,0)
 I VAFSTR[",7," S X=$$HLPHONE^HLFNC($P(VAFNODE,"^",10)),$P(VAFY,HLFS,7)=$S(X]"":X,1:HLQ) ; Temporary Address Phone
"RTN","VAFHLZTA",46,0)
 I VAFSTR[",8," S X=$$HLDATE^HLFNC($P(VAFNODE,"^",13)),$P(VAFY,HLFS,8)=$S(X]"":X,1:HLQ) ; Temp Addr Last Updated
"RTN","VAFHLZTA",47,0)
 I VAFSTR[",9," D   ; Temp Addr Site of Change
"RTN","VAFHLZTA",48,0)
 . S X=$P(VAFNODE,"^",14),X=$$GET1^DIQ(4,(+X)_",",99)
"RTN","VAFHLZTA",49,0)
 . S $P(VAFY,HLFS,9)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZTA",50,0)
QUIT Q "ZTA"_HLFS_$G(VAFY)
"VER")
8.0^22.0
"^DD",2,2,.09,0)
SOCIAL SECURITY NUMBER^RFXa^^0;9^K:X[""""!($A(X)=45) X I $D(X) S:'$D(DPTX) DFN=DA D SSN^DGINP Q  I $L(X)>10
"^DD",2,2,.09,.1)
SSN
"^DD",2,2,.09,1,0)
^.1^^-1
"^DD",2,2,.09,1,1,0)
2^BS^MUMPS
"^DD",2,2,.09,1,1,1)
S ^DPT("BS",$E(X,6,9),DA)=""
"^DD",2,2,.09,1,1,2)
K:$E(X,6,9)'="" ^DPT("BS",$E(X,6,9),DA)
"^DD",2,2,.09,1,2,0)
^^TRIGGER^2^.083
"^DD",2,2,.09,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,0)):^(0),1:"") S X=$P(Y(1),U,20),X=X S DIU=X K Y S X=DIV S X="1" X ^DD(2,.09,1,2,1.4)
"^DD",2,2,.09,1,2,1.4)
S DIH=$S($D(^DPT(DIV(0),0)):^(0),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,19,99))  S DIH=DIH_U" S %=$P(DIH,U,21,999),DIU=$P(DIH,U,20),^(0)=$P(DIH,U,1,19)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.083 D ^DICR
"^DD",2,2,.09,1,2,2)
Q
"^DD",2,2,.09,1,2,"CREATE VALUE")
"1"
"^DD",2,2,.09,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.09,1,2,"FIELD")
#.083
"^DD",2,2,.09,1,3,0)
2^BS5^MUMPS
"^DD",2,2,.09,1,3,1)
S ^DPT("BS5",$E(^DPT(DA,0),1)_$E(X,6,9),DA)=""
"^DD",2,2,.09,1,3,2)
K ^DPT("BS5",$E(^DPT(DA,0),1)_$E(X,6,9),DA)
"^DD",2,2,.09,1,4,0)
2^AODS1^MUMPS
"^DD",2,2,.09,1,4,1)
S A1B2TAG="PAT" D ^A1B2XFR
"^DD",2,2,.09,1,4,2)
S A1B2TAG="PAT" D ^A1B2XFR
"^DD",2,2,.09,1,5,0)
2^ATP^MUMPS
"^DD",2,2,.09,1,5,1)
I $E(X,1,5)="00000" D SET^DGREGDD1(DA,.6,0,21,1)
"^DD",2,2,.09,1,5,2)
D KILL^DGREGDD1(DA,.6,0,21,0)
"^DD",2,2,.09,1,5,"%D",0)
^^2^2^2951026^^^^
"^DD",2,2,.09,1,5,"%D",1,0)
This cross reference is used to indentify test patients. Test patients are
"^DD",2,2,.09,1,5,"%D",2,0)
designated by five leading zeros in the SSN.
"^DD",2,2,.09,1,5,"DT")
2951026
"^DD",2,2,.09,1,7,0)
2^SSN
"^DD",2,2,.09,1,7,1)
S ^DPT("SSN",$E(X,1,30),DA)=""
"^DD",2,2,.09,1,7,2)
K ^DPT("SSN",$E(X,1,30),DA)
"^DD",2,2,.09,1,8,0)
2^AVADPT6^MUMPS
"^DD",2,2,.09,1,8,1)
S VADFN=DA D SET^VADPT6 K VADFN
"^DD",2,2,.09,1,8,2)
S VADFN=DA D KILL^VADPT6 K VADFN
"^DD",2,2,.09,1,9,0)
2^AD^MUMPS
"^DD",2,2,.09,1,9,1)
S PPP=X,X="PPPFMX" X ^%ZOSF("TEST") D:$T SNSSN^PPPFMX S X=PPP K PPP
"^DD",2,2,.09,1,9,2)
S PPP=X,X="PPPFMX" X ^%ZOSF("TEST") D:$T KNSSN^PPPFMX S X=PPP K PPP
"^DD",2,2,.09,1,9,"%D",0)
^.101^2^2^3010423^^
"^DD",2,2,.09,1,9,"%D",1,0)
This cross-reference is used to add a new SSN to the Prescription
"^DD",2,2,.09,1,9,"%D",2,0)
Practices Files when a new patient is added to the patient file.
"^DD",2,2,.09,1,9,"DT")
2920611
"^DD",2,2,.09,1,10,0)
^^TRIGGER^2^.0906
"^DD",2,2,.09,1,10,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)'["P" I X S X=DIV S Y(1)=$S($D(^DPT(D0,"SSN")):^("SSN"),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(2,.09,1,10,1.4)
"^DD",2,2,.09,1,10,1.4)
S DIH=$G(^DPT(DIV(0),"SSN")),DIV=X S $P(^("SSN"),U,1)=DIV,DIH=2,DIG=.0906 D ^DICR
"^DD",2,2,.09,1,10,2)
Q
"^DD",2,2,.09,1,10,"%D",0)
^^1^1^3051128^
"^DD",2,2,.09,1,10,"%D",1,0)
Pseudo SSN Reason will have a value only if SSN is a Pseudo SSN. 
"^DD",2,2,.09,1,10,"CREATE CONDITION")
#.09'["P"
"^DD",2,2,.09,1,10,"CREATE VALUE")
@
"^DD",2,2,.09,1,10,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.09,1,10,"DT")
3051003
"^DD",2,2,.09,1,10,"FIELD")
PSEUDO SSN REAS
"^DD",2,2,.09,1,301,0)
2^IVM09^MUMPS
"^DD",2,2,.09,1,301,1)
S IVMX=X,X="IVMPXFR" X ^%ZOSF("TEST") D:$T DPT^IVMPXFR S X=IVMX K IVMX
"^DD",2,2,.09,1,301,2)
S IVMX=X,X="IVMPXFR" X ^%ZOSF("TEST") D:$T DPT^IVMPXFR S X=IVMX K IVMX
"^DD",2,2,.09,1,301,"%D",0)
^.101^4^4^3010423^^
"^DD",2,2,.09,1,301,"%D",1,0)
This cross-reference will check the IVM PATIENT file to see if a change
"^DD",2,2,.09,1,301,"%D",2,0)
to this field will require transmission to the IVM Center.  If it does,
"^DD",2,2,.09,1,301,"%D",3,0)
the IVM PATIENT file entry's TRANSMISSION STATUS will be set to 0 and
"^DD",2,2,.09,1,301,"%D",4,0)
the nightly background job will transmit the updated information.
"^DD",2,2,.09,1,301,"DT")
2930605
"^DD",2,2,.09,1,800,0)
2^PX09^MUMPS
"^DD",2,2,.09,1,800,1)
S PX=X,X="PXXDPT" X ^%ZOSF("TEST") D:$T SETSSN^PXXDPT S X=PX K PX
"^DD",2,2,.09,1,800,2)
S PX=X,X="PXXDPT" X ^%ZOSF("TEST") D:$T KILLSSN^PXXDPT S X=PX K PX
"^DD",2,2,.09,1,800,"%D",0)
^^2^2^2960624^^^
"^DD",2,2,.09,1,800,"%D",1,0)
This cross-reference is used to add a new SSN to the 9000001 IHS Patient
"^DD",2,2,.09,1,800,"%D",2,0)
File when a new patient is added to the Patient File.
"^DD",2,2,.09,1,800,"DT")
2930908
"^DD",2,2,.09,1,991,0)
2^AVAFC09^MUMPS
"^DD",2,2,.09,1,991,1)
I ($T(AVAFC^VAFCDD01)'="") S VAFCF=".09;" D AVAFC^VAFCDD01(DA)
"^DD",2,2,.09,1,991,2)
I ($T(AVAFC^VAFCDD01)'="") S VAFCF=".09;" D AVAFC^VAFCDD01(DA)
"^DD",2,2,.09,1,991,"%D",0)
^^15^15^2990204^^^^
"^DD",2,2,.09,1,991,"%D",1,0)
This cross reference is used to remember that changes were made to the
"^DD",2,2,.09,1,991,"%D",2,0)
PATIENT file (#2) outside of the Registration process.  Execution of this
"^DD",2,2,.09,1,991,"%D",3,0)
cross reference will create an entry in the ADT/HL7 PIVOT file (#391.71)
"^DD",2,2,.09,1,991,"%D",4,0)
and mark it as requiring transmission of an HL7 ADT-A08 message.
"^DD",2,2,.09,1,991,"%D",5,0)
 
"^DD",2,2,.09,1,991,"%D",6,0)
The local variable VAFCFLG will be set to 1 if the cross reference is
"^DD",2,2,.09,1,991,"%D",7,0)
not executed because the change is being made from within the Registration
"^DD",2,2,.09,1,991,"%D",8,0)
process.
"^DD",2,2,.09,1,991,"%D",9,0)
 
"^DD",2,2,.09,1,991,"%D",10,0)
Execution of this cross reference can be prevented by setting the local
"^DD",2,2,.09,1,991,"%D",11,0)
variable VAFCA08 equal to 1.
"^DD",2,2,.09,1,991,"%D",12,0)
  
"^DD",2,2,.09,1,991,"%D",13,0)
The local variable VAFCF is used to identify the field edited.
"^DD",2,2,.09,1,991,"%D",14,0)
This data is stored in the FIELD(S) EDITED (#2.1) field in the 
"^DD",2,2,.09,1,991,"%D",15,0)
ADT/HL7 PIVOT file (#391.71).
"^DD",2,2,.09,1,991,"DT")
2970825
"^DD",2,2,.09,1,992,0)
2^ADGRU09^MUMPS
"^DD",2,2,.09,1,992,1)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.09,1,992,2)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.09,1,992,"%D",0)
^^9^9^3000202^^^^
"^DD",2,2,.09,1,992,"%D",1,0)
This cross reference is used to remember that changes were made to a 
"^DD",2,2,.09,1,992,"%D",2,0)
monitored data field in the PATIENT File (#2) required for a vendor
"^DD",2,2,.09,1,992,"%D",3,0)
RAI/MDS COTS system.  Execution of this cross reference will create
"^DD",2,2,.09,1,992,"%D",4,0)
an entry in the ADT/HL7 PIVOT file (#391.71) and mark it as requiring
"^DD",2,2,.09,1,992,"%D",5,0)
transmission of an HL7 demographic A08 update message to the COTS
"^DD",2,2,.09,1,992,"%D",6,0)
interface.
"^DD",2,2,.09,1,992,"%D",7,0)
 
"^DD",2,2,.09,1,992,"%D",8,0)
The local variable DGRUGA08 will be set to 1 if the cross reference is
"^DD",2,2,.09,1,992,"%D",9,0)
not to be executed as part of a re-indexing.
"^DD",2,2,.09,1,992,"DT")
3000202
"^DD",2,2,.09,2)
S Y(0)=Y S:$L(Y)=11 Y=$E(Y,10,11)_$E(Y,1,9)
"^DD",2,2,.09,2.1)
S:$L(Y)=11 Y=$E(Y,10,11)_$E(Y,1,9)
"^DD",2,2,.09,3)
Enter 9-digit SSN or 'P' for pseudo-SSN.
"^DD",2,2,.09,10)
10/10 FORM
"^DD",2,2,.09,11,0)
^.2LAP^^0
"^DD",2,2,.09,11,1,0)
1^
"^DD",2,2,.09,11,2,0)
2^
"^DD",2,2,.09,20,0)
^.3LA^1^1
"^DD",2,2,.09,20,1,0)
DEMOG^
"^DD",2,2,.09,21,0)
^^14^14^3081021^
"^DD",2,2,.09,21,1,0)
Answer with the individual's social security number.  Answer must be 9 
"^DD",2,2,.09,21,2,0)
numbers in length. The SSN will be sent to the SSA for verification.  
"^DD",2,2,.09,21,3,0)
This will be displayed next to the SSN.  Once an SSN has received a
"^DD",2,2,.09,21,4,0)
status of Verified, it is locked from user updating and a "VERIFIED"
"^DD",2,2,.09,21,5,0)
will be displayed by the SSN field.  Only the Identity Management Data
"^DD",2,2,.09,21,6,0)
QUality Team are able to change a beneficiary's (veteran/non veteran)
"^DD",2,2,.09,21,7,0)
SSN.  If an Invalid per SSA status is received for the SSN, then an
"^DD",2,2,.09,21,8,0)
"INVALID" will appear next to the invalid SSN of the individual.
"^DD",2,2,.09,21,9,0)
Facilities should make every effort to obtain the accurate SSN from the
"^DD",2,2,.09,21,10,0)
individual for any invalid or pseudo SSN entry.
"^DD",2,2,.09,21,11,0)
 
"^DD",2,2,.09,21,12,0)
If a valid SSN is not known, then a "P" will be entered at the SSN
"^DD",2,2,.09,21,13,0)
prompt for the system to automatically assign a Pseudo-SSN.  If a
"^DD",2,2,.09,21,14,0)
Pseudo SSN is entered, a Reason for entering it will be required.
"^DD",2,2,.09,"AUDIT")
y
"^DD",2,2,.09,"DT")
3051006
"^DD",2,2,.0907,0)
SSN VERIFICATION STATUS^S^4:VERIFIED;2:INVALID;^SSN;2^Q
"^DD",2,2,.0907,21,0)
^^3^3^3060406^
"^DD",2,2,.0907,21,1,0)
This field designates whether or not the SSN has been verified. This field
"^DD",2,2,.0907,21,2,0)
will be received in the HL7 record.  It is not editable by the user.  Once
"^DD",2,2,.0907,21,3,0)
the SSN is verified by the SSA, it is no longer editable. 
"^DD",2,2,.0907,"DT")
3060406
"^DD",2,2,.115,0)
STATE^*P5'a^DIC(5,^.11;5^S DIC("S")="I $P(^DIC(5,Y,0),U,6)=1" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",2,2,.115,1,0)
^.1^^-1
"^DD",2,2,.115,1,1,0)
^^TRIGGER^2^.117
"^DD",2,2,.115,1,1,1)
Q
"^DD",2,2,.115,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:""),Y=$P(Y(1),U,7) X:$D(^DD(2,.117,2)) ^(2) S X=Y S DIU=X K Y S X=DIV S X="" X ^DD(2,.115,1,1,2.4)
"^DD",2,2,.115,1,1,2.4)
S DIH=$S($D(^DPT(DIV(0),.11)):^(.11),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,6,99))  S DIH=DIH_U" S %=$P(DIH,U,8,999),^(.11)=$P(DIH,U,1,6)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.117 D ^DICR
"^DD",2,2,.115,1,1,"CREATE VALUE")
NO EFFECT
"^DD",2,2,.115,1,1,"DELETE VALUE")
@
"^DD",2,2,.115,1,1,"FIELD")
COUNTY
"^DD",2,2,.115,1,2,0)
2^AODS115^MUMPS
"^DD",2,2,.115,1,2,1)
S A1B2TAG="PAT" D ^A1B2XFR
"^DD",2,2,.115,1,2,2)
S A1B2TAG="PAT" D ^A1B2XFR
"^DD",2,2,.115,1,3,0)
2^AENR115^MUMPS
"^DD",2,2,.115,1,3,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.115,1,3,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.115,1,3,3)
DO NOT DELETE
"^DD",2,2,.115,1,3,"%D",0)
^^2^2^2971007^^^
"^DD",2,2,.115,1,3,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",2,2,.115,1,3,"%D",2,0)
enrollment. 
"^DD",2,2,.115,1,3,"DT")
2971007
"^DD",2,2,.115,1,4,0)
^^TRIGGER^2^.118
"^DD",2,2,.115,1,4,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X=DIV S X=$$NOW^XLFDT() S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,13)=DIV,DIH=2,DIG=.118 D ^DICR
"^DD",2,2,.115,1,4,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X=DIV S X=$$NOW^XLFDT S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,13)=DIV,DIH=2,DIG=.118 D ^DICR
"^DD",2,2,.115,1,4,"%D",0)
^^2^2^3020703^
"^DD",2,2,.115,1,4,"%D",1,0)
This cross-reference will update the Address Change DT/TM field when 
"^DD",2,2,.115,1,4,"%D",2,0)
address data changes for a patient.
"^DD",2,2,.115,1,4,"CREATE VALUE")
S X=$$NOW^XLFDT()
"^DD",2,2,.115,1,4,"DELETE VALUE")
S X=$$NOW^XLFDT
"^DD",2,2,.115,1,4,"DT")
3020703
"^DD",2,2,.115,1,4,"FIELD")
ADDRESS CHANGE DT
"^DD",2,2,.115,1,301,0)
2^IVM115^MUMPS
"^DD",2,2,.115,1,301,1)
S IVMX=X,X="IVMPXFR" X ^%ZOSF("TEST") D:$T DPT^IVMPXFR S X=IVMX K IVMX
"^DD",2,2,.115,1,301,2)
S IVMX=X,X="IVMPXFR" X ^%ZOSF("TEST") D:$T DPT^IVMPXFR S X=IVMX K IVMX
"^DD",2,2,.115,1,301,"%D",0)
^^5^5^2930605^
"^DD",2,2,.115,1,301,"%D",1,0)
This cross-reference will check the IVM PATIENT file to see if a change
"^DD",2,2,.115,1,301,"%D",2,0)
to this field will require transmission to the IVM Center.  If it does,
"^DD",2,2,.115,1,301,"%D",3,0)
the IVM PATIENT file entry's TRANSMISSION STATUS will be set to 0 and
"^DD",2,2,.115,1,301,"%D",4,0)
the nightly background job will transmit the updated information.
"^DD",2,2,.115,1,301,"DT")
2930605
"^DD",2,2,.115,1,991,0)
2^AVAFC115^MUMPS
"^DD",2,2,.115,1,991,1)
I ($T(AVAFC^VAFCDD01)'="") S VAFCF=".115;" D AVAFC^VAFCDD01(DA)
"^DD",2,2,.115,1,991,2)
I ($T(AVAFC^VAFCDD01)'="") S VAFCF=".115;" D AVAFC^VAFCDD01(DA)
"^DD",2,2,.115,1,991,"%D",0)
^^15^15^2990204^^^^
"^DD",2,2,.115,1,991,"%D",1,0)
This cross reference is used to remember that changes were made to the
"^DD",2,2,.115,1,991,"%D",2,0)
PATIENT file (#2) outside of the Registration process.  Execution of this
"^DD",2,2,.115,1,991,"%D",3,0)
cross reference will create an entry in the ADT/HL7 PIVOT file (#391.71)
"^DD",2,2,.115,1,991,"%D",4,0)
and mark it as requiring transmission of an HL7 ADT-A08 message.
"^DD",2,2,.115,1,991,"%D",5,0)
 
"^DD",2,2,.115,1,991,"%D",6,0)
The local variable VAFCFLG will be set to 1 if the cross reference is
"^DD",2,2,.115,1,991,"%D",7,0)
not executed because the change is being made from within the Registration
"^DD",2,2,.115,1,991,"%D",8,0)
process.
"^DD",2,2,.115,1,991,"%D",9,0)
 
"^DD",2,2,.115,1,991,"%D",10,0)
Execution of this cross reference can be prevented by setting the local
"^DD",2,2,.115,1,991,"%D",11,0)
variable VAFCA08 equal to 1.
"^DD",2,2,.115,1,991,"%D",12,0)
  
"^DD",2,2,.115,1,991,"%D",13,0)
The local variable VAFCF is used to identify the field edited.
"^DD",2,2,.115,1,991,"%D",14,0)
This data is stored in the FIELD(S) EDITED (#2.1) field in the 
"^DD",2,2,.115,1,991,"%D",15,0)
ADT/HL7 PIVOT file (#391.71).
"^DD",2,2,.115,1,991,"DT")
2970825
"^DD",2,2,.115,1,992,0)
2^ADGRU115^MUMPS
"^DD",2,2,.115,1,992,1)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.115,1,992,2)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.115,1,992,"%D",0)
^^9^9^2990920^
"^DD",2,2,.115,1,992,"%D",1,0)
This cross reference is used to remember that changes were made to a 
"^DD",2,2,.115,1,992,"%D",2,0)
monitored data field in the PATIENT File (#2) required for a vendor
"^DD",2,2,.115,1,992,"%D",3,0)
RAI/MDS COTS system.  Execution of this cross reference will create
"^DD",2,2,.115,1,992,"%D",4,0)
an entry in the ADT/HL7 PIVOT file (#391.71) and mark it as requiring
"^DD",2,2,.115,1,992,"%D",5,0)
transmission of an HL7 demographic A08 update message to the COTS
"^DD",2,2,.115,1,992,"%D",6,0)
interface.
"^DD",2,2,.115,1,992,"%D",7,0)
 
"^DD",2,2,.115,1,992,"%D",8,0)
The local variable DGRUGA08 will be set to 1 if the cross reference is
"^DD",2,2,.115,1,992,"%D",9,0)
not to be executed as part of a re-indexing.
"^DD",2,2,.115,1,992,"DT")
2990920
"^DD",2,2,.115,3)
Select from the available listing the state in which this applicant resides.
"^DD",2,2,.115,12)
This screen prevents selection of entires that are valid US states or possessions.
"^DD",2,2,.115,12.1)
S DIC("S")="I $P(^DIC(5,Y,0),U,6)=1"
"^DD",2,2,.115,20,0)
^.3LA^1^1
"^DD",2,2,.115,20,1,0)
DEMOG
"^DD",2,2,.115,21,0)
^.001^2^2^3070626^^^^
"^DD",2,2,.115,21,1,0)
From the available listing choose the state in which this applicant
"^DD",2,2,.115,21,2,0)
resides.
"^DD",2,2,.115,"AUDIT")
y
"^DD",2,2,.115,"DT")
3070626
"^DD",2,2,.1171,0)
PROVINCE^Fa^^.11;8^K:$L(X)>20!($L(X)<1) X
"^DD",2,2,.1171,1,0)
^.1
"^DD",2,2,.1171,1,1,0)
^^TRIGGER^2^.118
"^DD",2,2,.1171,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X=DIV S X=$$NOW^XLFDT() S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,13)=DIV,DIH=2,DIG=.118 D ^DICR
"^DD",2,2,.1171,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X=DIV S X=$$NOW^XLFDT() S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,13)=DIV,DIH=2,DIG=.118 D ^DICR
"^DD",2,2,.1171,1,1,"%D",0)
^^2^2^3060117^
"^DD",2,2,.1171,1,1,"%D",1,0)
This cross-reference will be used to update the Date/Time stamp for an 
"^DD",2,2,.1171,1,1,"%D",2,0)
Address Change.
"^DD",2,2,.1171,1,1,"CREATE VALUE")
S X=$$NOW^XLFDT()
"^DD",2,2,.1171,1,1,"DELETE VALUE")
S X=$$NOW^XLFDT()
"^DD",2,2,.1171,1,1,"FIELD")
#.118
"^DD",2,2,.1171,3)
Answer must be 1-20 characters in length.
"^DD",2,2,.1171,21,0)
^^4^4^3060405^
"^DD",2,2,.1171,21,1,0)
Enter a Province if the patient has provided one for his/her foreign
"^DD",2,2,.1171,21,2,0)
address.  
"^DD",2,2,.1171,21,3,0)
 
"^DD",2,2,.1171,21,4,0)
The entry can be alphanumeric and up to 20 characters in length.
"^DD",2,2,.1171,"AUDIT")
y
"^DD",2,2,.1171,"DT")
3060210
"^DD",2,2,.1172,0)
POSTAL CODE^Fa^^.11;9^K:$L(X)>10!($L(X)<1) X
"^DD",2,2,.1172,1,0)
^.1
"^DD",2,2,.1172,1,1,0)
^^TRIGGER^2^.118
"^DD",2,2,.1172,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X=DIV S X=$$NOW^XLFDT() S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,13)=DIV,DIH=2,DIG=.118 D ^DICR
"^DD",2,2,.1172,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X=DIV S X=$$NOW^XLFDT() S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,13)=DIV,DIH=2,DIG=.118 D ^DICR
"^DD",2,2,.1172,1,1,"%D",0)
^^2^2^3060117^
"^DD",2,2,.1172,1,1,"%D",1,0)
This cross-reference will be used to update the Date/Time stamp for an 
"^DD",2,2,.1172,1,1,"%D",2,0)
Address Change.
"^DD",2,2,.1172,1,1,"CREATE VALUE")
S X=$$NOW^XLFDT()
"^DD",2,2,.1172,1,1,"DELETE VALUE")
S X=$$NOW^XLFDT()
"^DD",2,2,.1172,1,1,"FIELD")
#.118
"^DD",2,2,.1172,3)
Answer must be 1-10 characters in length.
"^DD",2,2,.1172,21,0)
^^4^4^3060405^
"^DD",2,2,.1172,21,1,0)
Enter with patient's postal code if the patient has provided one for
"^DD",2,2,.1172,21,2,0)
his/her foreign address.
"^DD",2,2,.1172,21,3,0)
 
"^DD",2,2,.1172,21,4,0)
The entry can be alphanumeric and up to 10 characters in length.
"^DD",2,2,.1172,"AUDIT")
y
"^DD",2,2,.1172,"DT")
3060210
"^DD",2,2,.1173,0)
COUNTRY^P779.004'a^HL(779.004,^.11;10^Q
"^DD",2,2,.1173,1,0)
^.1^^-1
"^DD",2,2,.1173,1,2,0)
^^TRIGGER^2^.118
"^DD",2,2,.1173,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X=DIV S X=$$NOW^XLFDT() S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,13)=DIV,DIH=2,DIG=.118 D ^DICR
"^DD",2,2,.1173,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X=DIV S X=$$NOW^XLFDT() S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,13)=DIV,DIH=2,DIG=.118 D ^DICR
"^DD",2,2,.1173,1,2,"%D",0)
^^2^2^3060117^
"^DD",2,2,.1173,1,2,"%D",1,0)
This cross-reference will be used to update the Date/Time stamp for an 
"^DD",2,2,.1173,1,2,"%D",2,0)
Address Change.
"^DD",2,2,.1173,1,2,"CREATE VALUE")
S X=$$NOW^XLFDT()
"^DD",2,2,.1173,1,2,"DELETE VALUE")
S X=$$NOW^XLFDT()
"^DD",2,2,.1173,1,2,"DT")
3060113
"^DD",2,2,.1173,1,2,"FIELD")
#.118
"^DD",2,2,.1173,21,0)
^.001^4^4^3070816^^^^
"^DD",2,2,.1173,21,1,0)
Enter the country where the patient's permanent address is located.
"^DD",2,2,.1173,21,2,0)
 
"^DD",2,2,.1173,21,3,0)
If entering an Army/Air Force Post Office (APO) or a Fleet Post Office 
"^DD",2,2,.1173,21,4,0)
(FPO) address select United States as the country.
"^DD",2,2,.1173,"AUDIT")
y
"^DD",2,2,.1173,"DT")
3070816
"^DD",2,2,.119,0)
ADDRESS CHANGE SOURCE^S^HEC:HEC;VAMC:VAMC;HBSC:HBSC;NCOA:NCOA;BVA:BVA;VAINS:VAINS;USPS:USPS;LACS:LACS;^.11;14^Q
"^DD",2,2,.119,1,0)
^.1^^-1
"^DD",2,2,.119,1,1,0)
^^TRIGGER^2^.12
"^DD",2,2,.119,1,1,1)
X ^DD(2,.119,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,15),X=X S DIU=X K Y S X=DIV S X=$$GETSITE^DGMTU4($G(DUZ)) I X S X=$O(^DIC(4,"D",X,"")) X ^DD(2,.119,1,1,1.4)
"^DD",2,2,.119,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(2,.119,0)),U,3) S X='$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59))'="VAMC"
"^DD",2,2,.119,1,1,1.4)
S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,15)=DIV,DIH=2,DIG=.12 D ^DICR
"^DD",2,2,.119,1,1,2)
X ^DD(2,.119,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,15),X=X S DIU=X K Y S X=DIV S X=$$GETSITE^DGMTU4($G(DUZ)) I X S X=$O(^DIC(4,"D",X,"")) X ^DD(2,.119,1,1,2.4)
"^DD",2,2,.119,1,1,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(2)=$C(59)_$P($G(^DD(2,.119,0)),U,3),Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X='$P($P(Y(2),$C(59)_$P(Y(1),U,14)_":",2),$C(59))'="VAMC"
"^DD",2,2,.119,1,1,2.4)
S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,15)=DIV,DIH=2,DIG=.12 D ^DICR
"^DD",2,2,.119,1,1,"%D",0)
^.101^6^6^3080818^^
"^DD",2,2,.119,1,1,"%D",1,0)
This cross-reference will trigger the population of the
"^DD",2,2,.119,1,1,"%D",2,0)
ADDRESS CHANGE SITE field with the appropriate station
"^DD",2,2,.119,1,1,"%D",3,0)
number if the ADDRESS CHANGE SOURCE equals "VAMC".  The
"^DD",2,2,.119,1,1,"%D",4,0)
Address Change Site field should be overwritten for cases
"^DD",2,2,.119,1,1,"%D",5,0)
where the site would be incorrect (i.e. uploading Z05
"^DD",2,2,.119,1,1,"%D",6,0)
message).
"^DD",2,2,.119,1,1,"CREATE CONDITION")
'ADDRESS CHANGE SOURCE'="VAMC"
"^DD",2,2,.119,1,1,"CREATE VALUE")
S X=$$GETSITE^DGMTU4($G(DUZ)) I X S X=$O(^DIC(4,"D",X,""))
"^DD",2,2,.119,1,1,"DELETE CONDITION")
'ADDRESS CHANGE SOURCE'="VAMC"
"^DD",2,2,.119,1,1,"DELETE VALUE")
S X=$$GETSITE^DGMTU4($G(DUZ)) I X S X=$O(^DIC(4,"D",X,""))
"^DD",2,2,.119,1,1,"DT")
3060215
"^DD",2,2,.119,1,1,"FIELD")
#.12
"^DD",2,2,.119,3)
Please enter the source of the address change.
"^DD",2,2,.119,5,1,0)
2^.118^1
"^DD",2,2,.119,9)
^
"^DD",2,2,.119,21,0)
^.001^1^1^3060420^^^^
"^DD",2,2,.119,21,1,0)
This field will hold the source of the Last address change.
"^DD",2,2,.119,"DT")
3080818
"^DD",2,2,.121,0)
BAD ADDRESS INDICATOR^*S^1:UNDELIVERABLE;2:HOMELESS;3:OTHER;4:ADDRESS NOT FOUND;^.11;16^Q
"^DD",2,2,.121,1,0)
^.1
"^DD",2,2,.121,1,1,0)
2^AENR121^MUMPS
"^DD",2,2,.121,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.121,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.121,1,1,3)
DO NOT DELETE
"^DD",2,2,.121,1,1,"%D",0)
^^2^2^3060911^
"^DD",2,2,.121,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",2,2,.121,1,1,"%D",2,0)
enrollment.
"^DD",2,2,.121,1,1,"DT")
3060911
"^DD",2,2,.121,1,2,0)
^^TRIGGER^2^.118
"^DD",2,2,.121,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X=DIV S X=$$NOW^XLFDT() S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,13)=DIV,DIH=2,DIG=.118 D ^DICR
"^DD",2,2,.121,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X=DIV S X=$$NOW^XLFDT() S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,13)=DIV,DIH=2,DIG=.118 D ^DICR
"^DD",2,2,.121,1,2,"%D",0)
^.101^2^2^3061030^^
"^DD",2,2,.121,1,2,"%D",1,0)
This cross-reference will be used to update the Date/Time stamp for an  
"^DD",2,2,.121,1,2,"%D",2,0)
Address Change.
"^DD",2,2,.121,1,2,"CREATE VALUE")
S X=$$NOW^XLFDT()
"^DD",2,2,.121,1,2,"DELETE VALUE")
S X=$$NOW^XLFDT()
"^DD",2,2,.121,1,2,"DT")
3061010
"^DD",2,2,.121,1,2,"FIELD")
#.118
"^DD",2,2,.121,3)
Please enter 1 if the address is 'UNDELIVERABLE', 2 if the patient is 'HOMELESS', or 3 for 'OTHER' bad address reasons.
"^DD",2,2,.121,12)
Only 1-3 may be selected.
"^DD",2,2,.121,12.1)
S DIC("S")="I Y'=4"
"^DD",2,2,.121,21,0)
^.001^14^14^3060712^^
"^DD",2,2,.121,21,1,0)
The Bad Address Indicator field applies to the address at which the patient
"^DD",2,2,.121,21,2,0)
resides.  This field should be set as follows (if applicable):
"^DD",2,2,.121,21,3,0)
 
"^DD",2,2,.121,21,4,0)
    "UNDELIVERABLE" - Bad Address based on returned mail.
"^DD",2,2,.121,21,5,0)
    "HOMELESS" - Patient is known to be homeless.
"^DD",2,2,.121,21,6,0)
    "OTHER" - Other Bad Address Reason
"^DD",2,2,.121,21,7,0)
 
"^DD",2,2,.121,21,8,0)
Setting this field will prevent a Bad Address from being shared with HEC
"^DD",2,2,.121,21,9,0)
and other VAMC facilities. It will also be used to block Means Test 
"^DD",2,2,.121,21,10,0)
Renewal Letters from being sent.
"^DD",2,2,.121,21,11,0)
 
"^DD",2,2,.121,21,12,0)
Once the Bad Address Indicator is set, incoming "newer" addresses will
"^DD",2,2,.121,21,13,0)
automatically remove the Bad Address Indicator, and allow the "updated"
"^DD",2,2,.121,21,14,0)
address to be transmitted to HEC and other VAMC facilities.
"^DD",2,2,.121,23,0)
^.001^9^9^3060712^^^^
"^DD",2,2,.121,23,1,0)
This field is being used in conjunction with Patient Address fields
"^DD",2,2,.121,23,2,0)
.111, .1112, .112, .113, .114, .115, .116, and .117, which are located
"^DD",2,2,.121,23,3,0)
in the Patient (#2) file.
"^DD",2,2,.121,23,4,0)

"^DD",2,2,.121,23,5,0)
A programmer API, $$BADADR^DGUTL3(DFN) will allow the return of the Bad
"^DD",2,2,.121,23,6,0)
Address Indicator.  The following parameters are used:
"^DD",2,2,.121,23,7,0)

"^DD",2,2,.121,23,8,0)
Input Parameter: DFN - internal entry number for the Patient file (#2)
"^DD",2,2,.121,23,9,0)
   Return value: internal value of the Bad Address Indicator or <null>
"^DD",2,2,.121,"AUDIT")

"^DD",2,2,.121,"DT")
3061010
"^DD",2,2,.12113,0)
TEMPORARY ADDRESS CHANGE DT/TM^DX^^.121;13^S %DT="ESTX" D ^%DT S X=Y K:X<1 X
"^DD",2,2,.12113,1,0)
^.1
"^DD",2,2,.12113,1,1,0)
2^AENR12113^MUMPS
"^DD",2,2,.12113,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.12113,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.12113,1,1,3)
 DO NOT DELETE
"^DD",2,2,.12113,1,1,"%D",0)
^.101^2^2^3050615^^^^
"^DD",2,2,.12113,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",2,2,.12113,1,1,"%D",2,0)
enrollment.
"^DD",2,2,.12113,1,1,"DT")
3050615
"^DD",2,2,.12113,1,2,0)
^^TRIGGER^2^.12114
"^DD",2,2,.12113,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.121)):^(.121),1:"") S X=$P(Y(1),U,14),X=X S DIU=X K Y S X=DIV S X=$$GETSITE^DGMTU4($G(DUZ)) I X S X=$O(^DIC(4,"D",X,"")) X ^DD(2,.12113,1,2,1.4)
"^DD",2,2,.12113,1,2,1.4)
S DIH=$G(^DPT(DIV(0),.121)),DIV=X S $P(^(.121),U,14)=DIV,DIH=2,DIG=.12114 D ^DICR
"^DD",2,2,.12113,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.121)):^(.121),1:"") S X=$P(Y(1),U,14),X=X S DIU=X K Y S X=DIV S X=$$GETSITE^DGMTU4($G(DUZ)) I X S X=$O(^DIC(4,"D",X,"")) X ^DD(2,.12113,1,2,2.4)
"^DD",2,2,.12113,1,2,2.4)
S DIH=$G(^DPT(DIV(0),.121)),DIV=X S $P(^(.121),U,14)=DIV,DIH=2,DIG=.12114 D ^DICR
"^DD",2,2,.12113,1,2,"CREATE VALUE")
S X=$$GETSITE^DGMTU4($G(DUZ)) I X S X=$O(^DIC(4,"D",X,""))
"^DD",2,2,.12113,1,2,"DELETE VALUE")
S X=$$GETSITE^DGMTU4($G(DUZ)) I X S X=$O(^DIC(4,"D",X,""))
"^DD",2,2,.12113,1,2,"DT")
3060111
"^DD",2,2,.12113,1,2,"FIELD")
`.12114
"^DD",2,2,.12113,3)
(No range limit on date)
"^DD",2,2,.12113,9)
^
"^DD",2,2,.12113,21,0)
^^2^2^3050519^
"^DD",2,2,.12113,21,1,0)
This field will hold the date and time of the last Temporary Address
"^DD",2,2,.12113,21,2,0)
Update.
"^DD",2,2,.12113,"DT")
3050615
"^DD",2,2,.1215,0)
TEMPORARY STATE^*P5'X^DIC(5,^.121;5^S DIC("S")="I $P(^DIC(5,Y,0),U,6)=1" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X I $D(X) S DFN=DA D TAD^DGLOCK Q
"^DD",2,2,.1215,.1)

"^DD",2,2,.1215,1,0)
^.1^^0
"^DD",2,2,.1215,3)
Enter the state in which this applicant is temporarily residing.
"^DD",2,2,.1215,12)
This screen will restrict the entry of a state to valid US states or possessions.
"^DD",2,2,.1215,12.1)
S DIC("S")="I $P(^DIC(5,Y,0),U,6)=1"
"^DD",2,2,.1215,20,0)
^.3LA^1^1
"^DD",2,2,.1215,20,1,0)
TAD
"^DD",2,2,.1215,21,0)
^.001^5^5^3070626^^^^
"^DD",2,2,.1215,21,1,0)
If the WANT TO ENTER A TEMPORARY ADDRESS prompt is answered YES
"^DD",2,2,.1215,21,2,0)
select from the available listing the state in which the temporary
"^DD",2,2,.1215,21,3,0)
address lies, otherwise nothing may be entered.  This field may
"^DD",2,2,.1215,21,4,0)
not be deleted as long as the need for a temporary address is
"^DD",2,2,.1215,21,5,0)
indicated.
"^DD",2,2,.1215,"DEL",1,0)
S DFN=DA D TADD^DGLOCK1 I '$D(X)
"^DD",2,2,.1215,"DT")
3070626
"^DD",2,2,.1221,0)
TEMPORARY ADDRESS PROVINCE^F^^.122;1^K:$L(X)>20!($L(X)<1) X
"^DD",2,2,.1221,1,0)
^.1^^0
"^DD",2,2,.1221,3)
Answer must be 1-20 characters in length.
"^DD",2,2,.1221,21,0)
^^4^4^3060405^
"^DD",2,2,.1221,21,1,0)
Enter a Province if the patient has provided one for his/her foreign
"^DD",2,2,.1221,21,2,0)
address.  
"^DD",2,2,.1221,21,3,0)
 
"^DD",2,2,.1221,21,4,0)
The entry can be alphanumeric and up to 20 characters in length.
"^DD",2,2,.1221,"DT")
3060615
"^DD",2,2,.1222,0)
TEMPORARY ADDRESS POSTAL CODE^F^^.122;2^K:$L(X)>10!($L(X)<1) X
"^DD",2,2,.1222,1,0)
^.1^^0
"^DD",2,2,.1222,3)
Answer must be 1-10 characters in length.
"^DD",2,2,.1222,21,0)
^^4^4^3060405^
"^DD",2,2,.1222,21,1,0)
Enter with patient's postal code if the patient has provided one for
"^DD",2,2,.1222,21,2,0)
his/her foreign address.
"^DD",2,2,.1222,21,3,0)
 
"^DD",2,2,.1222,21,4,0)
The entry can be alphanumeric and up to 10 characters in length.
"^DD",2,2,.1222,"DT")
3060615
"^DD",2,2,.1223,0)
TEMPORARY ADDRESS COUNTRY^P779.004'^HL(779.004,^.122;3^Q
"^DD",2,2,.1223,1,0)
^.1^^0
"^DD",2,2,.1223,21,0)
^^4^4^3060131^
"^DD",2,2,.1223,21,1,0)
Enter the country where the patient's temporary address is located.
"^DD",2,2,.1223,21,2,0)
 
"^DD",2,2,.1223,21,3,0)
If entering an Army/Air Force Post Office (APO) or a Fleet Post Office 
"^DD",2,2,.1223,21,4,0)
(FPO) address select United States as the country.
"^DD",2,2,.1223,"DT")
3060615
"^DD",2,2,.133,0)
EMAIL ADDRESS^F^^.13;3^K:$L(X)>50!($L(X)<3)!'(X?1.E1"@"1.E1"."1.E) X
"^DD",2,2,.133,.1)
Email Address
"^DD",2,2,.133,1,0)
^.1^^-1
"^DD",2,2,.133,1,1,0)
^^TRIGGER^2^.136
"^DD",2,2,.133,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.13)):^(.13),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X=DIV S X=$$NOW^XLFDT() S DIH=$G(^DPT(DIV(0),.13)),DIV=X S $P(^(.13),U,6)=DIV,DIH=2,DIG=.136 D ^DICR
"^DD",2,2,.133,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.13)):^(.13),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X=DIV S X=$$NOW^XLFDT() S DIH=$G(^DPT(DIV(0),.13)),DIV=X S $P(^(.13),U,6)=DIV,DIH=2,DIG=.136 D ^DICR
"^DD",2,2,.133,1,1,"%D",0)
^^2^2^3060411^
"^DD",2,2,.133,1,1,"%D",1,0)
This cross reference will update the EMAIL ADDRESS CHANGE DT/TM field
"^DD",2,2,.133,1,1,"%D",2,0)
with current date and time stamp each time this field is changed.
"^DD",2,2,.133,1,1,"CREATE VALUE")
S X=$$NOW^XLFDT()
"^DD",2,2,.133,1,1,"DELETE VALUE")
S X=$$NOW^XLFDT()
"^DD",2,2,.133,1,1,"FIELD")
#.136
"^DD",2,2,.133,3)
Enter the applicant's email address [3-50 characters].  The entry must include an '@'.
"^DD",2,2,.133,4)
D 133^DGMTDD5
"^DD",2,2,.133,"DT")
3060411
"^DD",2,2,.14114,0)
CONFIDENTIAL ADDR PROVINCE^F^^.141;14^K:$L(X)>20!($L(X)<1) X
"^DD",2,2,.14114,1,0)
^.1^^0
"^DD",2,2,.14114,3)
Answer must be 1-20 characters in length.
"^DD",2,2,.14114,21,0)
^^4^4^3060405^
"^DD",2,2,.14114,21,1,0)
Enter a Province if the patient has provided one for his/her foreign
"^DD",2,2,.14114,21,2,0)
address.  
"^DD",2,2,.14114,21,3,0)
 
"^DD",2,2,.14114,21,4,0)
The entry can be alphanumeric and up to 20 characters in length.
"^DD",2,2,.14114,"DT")
3060517
"^DD",2,2,.14115,0)
CONFIDENTIAL ADDR POSTAL CODE^F^^.141;15^K:$L(X)>10!($L(X)<1) X
"^DD",2,2,.14115,1,0)
^.1^^0
"^DD",2,2,.14115,3)
Answer must be 1-10 characters in length.
"^DD",2,2,.14115,21,0)
^^4^4^3060405^
"^DD",2,2,.14115,21,1,0)
Enter with patient's postal code if the patient has provided one for
"^DD",2,2,.14115,21,2,0)
his/her foreign address.
"^DD",2,2,.14115,21,3,0)
 
"^DD",2,2,.14115,21,4,0)
The entry can be alphanumeric and up to 10 characters in length.
"^DD",2,2,.14115,"DT")
3060517
"^DD",2,2,.14116,0)
CONFIDENTIAL ADDR COUNTRY^P779.004'^HL(779.004,^.141;16^Q
"^DD",2,2,.14116,1,0)
^.1^^0
"^DD",2,2,.14116,3)
Enter the country where the patient's permanent address is located.
"^DD",2,2,.14116,21,0)
^^4^4^3060131^
"^DD",2,2,.14116,21,1,0)
Enter the country where the patient's confidential address is located.
"^DD",2,2,.14116,21,2,0)
 
"^DD",2,2,.14116,21,3,0)
If entering an Army/Air Force Post Office (APO) or a Fleet Post Office 
"^DD",2,2,.14116,21,4,0)
(FPO) address select United States as the country.
"^DD",2,2,.14116,"DT")
3060606
"^DD",2,2,.3013,0)
P&T EFFECTIVE DATE^DX^^.3;13^S %DT="EXP" D ^%DT S X=Y K:X<1!(DT<X) X I $D(X) S DFN=DA D PTDT^DGLOCK I $D(X) S DFN=DA D EV2^DGLOCK
"^DD",2,2,.3013,1,0)
^.1
"^DD",2,2,.3013,1,1,0)
2^AENR3013^MUMPS
"^DD",2,2,.3013,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3013,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3013,1,1,3)
DO NOT DELETE
"^DD",2,2,.3013,1,1,"%D",0)
^^2^2^3060412^
"^DD",2,2,.3013,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",2,2,.3013,1,1,"%D",2,0)
enrollment.
"^DD",2,2,.3013,1,1,"DT")
3060412
"^DD",2,2,.3013,3)
Must be a past date.
"^DD",2,2,.3013,5,1,0)
2^.304^2
"^DD",2,2,.3013,21,0)
^^4^4^3060614^
"^DD",2,2,.3013,21,1,0)
Enter the Effective Date the patient was awarded P&T disability status
"^DD",2,2,.3013,21,2,0)
by VARO.
"^DD",2,2,.3013,21,3,0)
This field is optional (not required).  But if entered, must be a 
"^DD",2,2,.3013,21,4,0)
precise date.  That is, a day, month and year MUST be included.
"^DD",2,2,.3013,"DT")
3060801
"^DD",2,2,.304,0)
P&T^SX^Y:YES;N:NO;^.3;4^S DFN=DA D EV2^DGLOCK
"^DD",2,2,.304,.1)
PERMANENT AND TOTAL
"^DD",2,2,.304,1,0)
^.1
"^DD",2,2,.304,1,1,0)
2^AENR304^MUMPS
"^DD",2,2,.304,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.304,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.304,1,1,3)
 DO NOT DELETE
"^DD",2,2,.304,1,1,"%D",0)
^.101^2^2^3050606^^^^
"^DD",2,2,.304,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",2,2,.304,1,1,"%D",2,0)
enrollment.
"^DD",2,2,.304,1,1,"DT")
3050606
"^DD",2,2,.304,1,2,0)
^^TRIGGER^2^.3013
"^DD",2,2,.304,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(2,.304,0)),U,3) S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59))'="Y" I X S X=DIV S Y(1)=$S($D(^DPT(D0,.3)):^(.3),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X="" X ^DD(2,.304,1,2,1.4)
"^DD",2,2,.304,1,2,1.4)
S DIH=$G(^DPT(DIV(0),.3)),DIV=X S $P(^(.3),U,13)=DIV,DIH=2,DIG=.3013 D ^DICR
"^DD",2,2,.304,1,2,2)
X ^DD(2,.304,1,2,2.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.3)):^(.3),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X="" S DIH=$G(^DPT(DIV(0),.3)),DIV=X S $P(^(.3),U,13)=DIV,DIH=2,DIG=.3013 D ^DICR
"^DD",2,2,.304,1,2,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(2)=$C(59)_$P($G(^DD(2,.304,0)),U,3),Y(1)=$S($D(^DPT(D0,.3)):^(.3),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,4)_":",2),$C(59))'="Y"
"^DD",2,2,.304,1,2,"%D",0)
^.101^2^2^3060515^^^
"^DD",2,2,.304,1,2,"%D",1,0)
This cross reference will delete the P&T Effective date field (#.3103) if 
"^DD",2,2,.304,1,2,"%D",2,0)
the P&T field is not YES.
"^DD",2,2,.304,1,2,"CREATE CONDITION")
#.304'="Y"
"^DD",2,2,.304,1,2,"CREATE VALUE")
@
"^DD",2,2,.304,1,2,"DELETE CONDITION")
#.304'="Y"
"^DD",2,2,.304,1,2,"DELETE VALUE")
@
"^DD",2,2,.304,1,2,"DT")
3060322
"^DD",2,2,.304,1,2,"FIELD")
P&T EFFECTIVE DATE
"^DD",2,2,.304,3)
Is this patient permanently and totally disabled due to an SC condition?
"^DD",2,2,.304,21,0)
^^5^5^3060828^
"^DD",2,2,.304,21,1,0)
This field will contain YES if the patient is determined to be
"^DD",2,2,.304,21,2,0)
permanently and totally disabled by VARO due to a service connected
"^DD",2,2,.304,21,3,0)
condition.
"^DD",2,2,.304,21,4,0)
 
"^DD",2,2,.304,21,5,0)
Answering "YES" will prompt you to enter a P&T Effective Date.
"^DD",2,2,.304,"DT")
3060712
"^DD",2,2,.32102,0)
AGENT ORANGE EXPOS. INDICATED?^RSX^Y:YES;N:NO;U:UNKNOWN;^.321;2^S DFN=DA D SV^DGLOCK
"^DD",2,2,.32102,.1)
EXPOSED TO AGENT ORANGE
"^DD",2,2,.32102,1,0)
^.1
"^DD",2,2,.32102,1,1,0)
^^TRIGGER^2^.32107
"^DD",2,2,.32102,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(2,.32102,0)),U,3) S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59))="NO" I X S X=DIV S Y(1)=$S($D(^DPT(D0,.321)):^(.321),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(2,.32102,1,1,1.4)
"^DD",2,2,.32102,1,1,1.4)
S DIH=$G(^DPT(DIV(0),.321)),DIV=X S $P(^(.321),U,7)=DIV,DIH=2,DIG=.32107 D ^DICR
"^DD",2,2,.32102,1,1,2)
Q
"^DD",2,2,.32102,1,1,"CREATE CONDITION")
#.32102="NO"
"^DD",2,2,.32102,1,1,"CREATE VALUE")
@
"^DD",2,2,.32102,1,1,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.32102,1,1,"DT")
3080507
"^DD",2,2,.32102,1,1,"FIELD")
#.32107
"^DD",2,2,.32102,1,2,0)
^^TRIGGER^2^.3211
"^DD",2,2,.32102,1,2,1)
X ^DD(2,.32102,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.321)):^(.321),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y S X="" S DIH=$G(^DPT(DIV(0),.321)),DIV=X S $P(^(.321),U,10)=DIV,DIH=2,DIG=.3211 D ^DICR
"^DD",2,2,.32102,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(2,.32102,0)),U,3) S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59))="NO"
"^DD",2,2,.32102,1,2,2)
Q
"^DD",2,2,.32102,1,2,"CREATE CONDITION")
#.32102="NO"
"^DD",2,2,.32102,1,2,"CREATE VALUE")
@
"^DD",2,2,.32102,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.32102,1,2,"DT")
3080507
"^DD",2,2,.32102,1,2,"FIELD")
#.3211
"^DD",2,2,.32102,1,3,0)
^^TRIGGER^2^.32109
"^DD",2,2,.32102,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(2,.32102,0)),U,3) S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59))="NO" I X S X=DIV S Y(1)=$S($D(^DPT(D0,.321)):^(.321),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X="" X ^DD(2,.32102,1,3,1.4)
"^DD",2,2,.32102,1,3,1.4)
S DIH=$G(^DPT(DIV(0),.321)),DIV=X S $P(^(.321),U,9)=DIV,DIH=2,DIG=.32109 D ^DICR
"^DD",2,2,.32102,1,3,2)
Q
"^DD",2,2,.32102,1,3,"CREATE CONDITION")
#.32102="NO"
"^DD",2,2,.32102,1,3,"CREATE VALUE")
@
"^DD",2,2,.32102,1,3,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.32102,1,3,"DT")
3080507
"^DD",2,2,.32102,1,3,"FIELD")
#.32109
"^DD",2,2,.32102,1,4,0)
2^AENR32102^MUMPS
"^DD",2,2,.32102,1,4,1)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.32102,1,4,2)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.32102,1,4,3)
DO NOT DELETE
"^DD",2,2,.32102,1,4,"%D",0)
^^2^2^2970630^^
"^DD",2,2,.32102,1,4,"%D",1,0)
This cross-reference is used to update the patient's current Patient Enrollment 
"^DD",2,2,.32102,1,4,"%D",2,0)
record.
"^DD",2,2,.32102,1,4,"DT")
2970630
"^DD",2,2,.32102,1,5,0)
^^TRIGGER^2^.3213
"^DD",2,2,.32102,1,5,1)
X ^DD(2,.32102,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.321)):^(.321),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X="" S DIH=$G(^DPT(DIV(0),.321)),DIV=X S $P(^(.321),U,13)=DIV,DIH=2,DIG=.3213 D ^DICR
"^DD",2,2,.32102,1,5,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(2,.32102,0)),U,3) S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.32102,1,5,2)
Q
"^DD",2,2,.32102,1,5,"CREATE CONDITION")
#.32102="NO"
"^DD",2,2,.32102,1,5,"CREATE VALUE")
@
"^DD",2,2,.32102,1,5,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.32102,1,5,"DT")
3010314
"^DD",2,2,.32102,1,5,"FIELD")
#.3213
"^DD",2,2,.32102,3)
Enter 'Y' if this patient claims exposure to agent orange, 'N' if not, 'U' if unknown.
"^DD",2,2,.32102,20,0)
^.3LA^1^1
"^DD",2,2,.32102,20,1,0)
AO
"^DD",2,2,.32102,21,0)
^.001^8^8^3080507^^
"^DD",2,2,.32102,21,1,0)
For this veteran applicant enter 'Y' if s/he was exposed to the chemical
"^DD",2,2,.32102,21,2,0)
agent orange, 'N' if not, or 'U' if unknown.  Exposure cannot be claimed
"^DD",2,2,.32102,21,3,0)
unless the Period of Service (field .323) is answered VIETNAM ERA, which
"^DD",2,2,.32102,21,4,0)
entails those serving in the Korean DMZ between January 1, 1968 and
"^DD",2,2,.32102,21,5,0)
December 31, 1969 or Vietnam.
"^DD",2,2,.32102,21,6,0)
 
"^DD",2,2,.32102,21,7,0)
Once the service record has been verified only users who hold the
"^DD",2,2,.32102,21,8,0)
designated security key may enter/edit this field.
"^DD",2,2,.32102,"DT")
3080507
"^DD",2,2,.32107,0)
AGENT ORANGE REGISTRATION DATE^DX^^.321;7^S %DT="E",%DT(0)=-DT D ^%DT K %DT S X=Y K:Y<1 X I $D(X) S DFN=DA D AO^DGLOCK I $D(X) D DOB^DGHELP
"^DD",2,2,.32107,.1)

"^DD",2,2,.32107,1,0)
^.1^^0
"^DD",2,2,.32107,3)
Enter the date on which this patient was registered as being exposed to agent orange.
"^DD",2,2,.32107,5,1,0)
2^.32102^1
"^DD",2,2,.32107,20,0)
^.3LA^1^1
"^DD",2,2,.32107,20,1,0)
AO
"^DD",2,2,.32107,21,0)
^.001^5^5^3080527^^
"^DD",2,2,.32107,21,1,0)
For this veteran applicant who was exposed to agent orange (EXPOSED TO
"^DD",2,2,.32107,21,2,0)
AGENT ORANGE prompt must be answered YES) enter the date registered.
"^DD",2,2,.32107,21,3,0)
Once the service record is verified only users who hold the designated
"^DD",2,2,.32107,21,4,0)
security key may enter/edit this field.  As long as agent orange
"^DD",2,2,.32107,21,5,0)
exposure is indicated this field may not be deleted.
"^DD",2,2,.32107,"DEL",1,0)
S DFN=DA D AOD^DGLOCK1 I '$D(X)
"^DD",2,2,.32107,"DT")
3010107
"^DD",2,2,.3213,0)
AGENT ORANGE EXPOSURE LOCATION^RSX^K:KOREAN DMZ;V:VIETNAM;O:OTHER;^.321;13^Q
"^DD",2,2,.3213,.1)
Agent Orange Exposure Location
"^DD",2,2,.3213,1,0)
^.1
"^DD",2,2,.3213,1,1,0)
2^AENR3213^MUMPS
"^DD",2,2,.3213,1,1,1)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.3213,1,1,2)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.3213,1,1,3)
DO NOT DELETE
"^DD",2,2,.3213,1,1,"%D",0)
^^2^2^3060218^
"^DD",2,2,.3213,1,1,"%D",1,0)
This MUMPS cross-reference is used to update the patient's current 
"^DD",2,2,.3213,1,1,"%D",2,0)
Patient Enrollment record.
"^DD",2,2,.3213,1,1,"DT")
3060218
"^DD",2,2,.3213,3)
Enter where the patient was exposed to agent orange
"^DD",2,2,.3213,5,1,0)
2^.32102^5
"^DD",2,2,.3213,21,0)
^.001^5^5^3060214^^^^
"^DD",2,2,.3213,21,1,0)
For this veteran applicant who was exposed to agent orange (EXPOSED TO
"^DD",2,2,.3213,21,2,0)
AGENT ORANGE prompt must be answered YES) enter the location where the
"^DD",2,2,.3213,21,3,0)
exposure occurred.  Once the service record has been verified only users
"^DD",2,2,.3213,21,4,0)
who hold the designated security key may enter/edit this field.  This
"^DD",2,2,.3213,21,5,0)
field cannot be deleted as long as agent orange exposure is indicated.
"^DD",2,2,.3213,"DEL",1,0)
S DFN=DA D AOD^DGLOCK1 I '$D(X)
"^DD",2,2,.3213,"DT")
3060218
"^DD",2,2,.322013,0)
SOUTHWEST ASIA CONDITIONS?^RSX^Y:YES;N:NO;U:UNKNOWN;^.322;13^S DFN=DA D SV^DGLOCK
"^DD",2,2,.322013,.1)

"^DD",2,2,.322013,1,0)
^.1
"^DD",2,2,.322013,1,1,0)
^^TRIGGER^2^.322014
"^DD",2,2,.322013,1,1,1)
X ^DD(2,.322013,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,14),X=X S DIU=X K Y S X="" S DIH=$G(^DPT(DIV(0),.322)),DIV=X S $P(^(.322),U,14)=DIV,DIH=2,DIG=.322014 D ^DICR
"^DD",2,2,.322013,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(2,.322013,0)),U,3) S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59))'="YES"
"^DD",2,2,.322013,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,14),X=X S DIU=X K Y S X="" S DIH=$G(^DPT(DIV(0),.322)),DIV=X S $P(^(.322),U,14)=DIV,DIH=2,DIG=.322014 D ^DICR
"^DD",2,2,.322013,1,1,"%D",0)
^^2^2^3080422^
"^DD",2,2,.322013,1,1,"%D",1,0)
This will delete the 'SW ASIA COND REGISTRATION DATE' field (#.322014) if 
"^DD",2,2,.322013,1,1,"%D",2,0)
the 'SOUTHWEST ASIA CONDITIONS?' field is not "YES".
"^DD",2,2,.322013,1,1,"CREATE CONDITION")
#.322013'="YES"
"^DD",2,2,.322013,1,1,"CREATE VALUE")
@
"^DD",2,2,.322013,1,1,"DELETE VALUE")
@
"^DD",2,2,.322013,1,1,"DT")
3080422
"^DD",2,2,.322013,1,1,"FIELD")
#.322014
"^DD",2,2,.322013,1,2,0)
^^TRIGGER^2^.322015
"^DD",2,2,.322013,1,2,1)
X ^DD(2,.322013,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,15),X=X S DIU=X K Y S X="" S DIH=$G(^DPT(DIV(0),.322)),DIV=X S $P(^(.322),U,15)=DIV,DIH=2,DIG=.322015 D ^DICR
"^DD",2,2,.322013,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(2,.322013,0)),U,3) S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59))'="YES"
"^DD",2,2,.322013,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,15),X=X S DIU=X K Y S X="" S DIH=$G(^DPT(DIV(0),.322)),DIV=X S $P(^(.322),U,15)=DIV,DIH=2,DIG=.322015 D ^DICR
"^DD",2,2,.322013,1,2,"%D",0)
^^2^2^3080422^
"^DD",2,2,.322013,1,2,"%D",1,0)
This trigger deletes the 'SW ASIA EXAM DATE' field if the 'SOUTHWEST ASIA 
"^DD",2,2,.322013,1,2,"%D",2,0)
CONDITIONS?' field is not "YES".
"^DD",2,2,.322013,1,2,"CREATE CONDITION")
#.322013'="YES"
"^DD",2,2,.322013,1,2,"CREATE VALUE")
@
"^DD",2,2,.322013,1,2,"DELETE VALUE")
@
"^DD",2,2,.322013,1,2,"DT")
3080422
"^DD",2,2,.322013,1,2,"FIELD")
#.322015
"^DD",2,2,.322013,1,3,0)
2^AENR322013^MUMPS
"^DD",2,2,.322013,1,3,1)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.322013,1,3,2)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.322013,1,3,3)
DO NOT DELETE
"^DD",2,2,.322013,1,3,"%D",0)
^.101^2^2^3060517^^^^
"^DD",2,2,.322013,1,3,"%D",1,0)
This cross-reference is used to update the patient's current Patient Enrollment 
"^DD",2,2,.322013,1,3,"%D",2,0)
record.
"^DD",2,2,.322013,1,3,"DT")
2970630
"^DD",2,2,.322013,3)
Enter 'Y' if this patient claims exposure to Southwest Asia Conditions, 'N' if not, 'U' if unknown.
"^DD",2,2,.322013,5,1,0)
2^.322016^3
"^DD",2,2,.322013,5,2,0)
2^.32201^3
"^DD",2,2,.322013,21,0)
^.001^9^9^3060517^^
"^DD",2,2,.322013,21,1,0)
Enter "Y" if veteran claims need for care of conditions related to
"^DD",2,2,.322013,21,2,0)
service in SW Asia. Enter "N" if veteran did not serve in SW Asia or
"^DD",2,2,.322013,21,3,0)
does not claim need for care of conditions related to service in SW
"^DD",2,2,.322013,21,4,0)
Asia. Enter "U" when veteran served in SW Asia, but is unsure of
"^DD",2,2,.322013,21,5,0)
whether conditions may be related to that service. SW Asia Theater
"^DD",2,2,.322013,21,6,0)
of operations is defined as: Iraq, Kuwait, Saudi Arabia, the neutral
"^DD",2,2,.322013,21,7,0)
zone between Iraq and Saudi Arabia, Bahrain, Qatar, the United Arab
"^DD",2,2,.322013,21,8,0)
Emirates, Oman, the Gulf of Aden, the Gulf of Oman, the Persian Gulf,
"^DD",2,2,.322013,21,9,0)
the Arabian Sea, the Red Sea, and the airspace above these locations.
"^DD",2,2,.322013,23,0)
^.001^2^2^3060517^^^^
"^DD",2,2,.322013,23,1,0)
This indicates that the veteran was affected by some kind of 
"^DD",2,2,.322013,23,2,0)
SW Asia conditions in the Persian Gulf.
"^DD",2,2,.322013,"DT")
3080422
"^DD",2,2,.322014,0)
SW ASIA COND REGISTRATION DATE^DX^^.322;14^S %DT="E",%DT(0)=-DT D ^%DT S X=Y K:Y<1 X I $D(X) S DFN=DA D EC^DGLOCK
"^DD",2,2,.322014,3)
Enter the date on which this patient was registered as being exposed to Southwest Asia conditions.  This must be after 8/1/1990.
"^DD",2,2,.322014,5,1,0)
2^.322013^1
"^DD",2,2,.322014,21,0)
^.001^3^3^3060510^^^^
"^DD",2,2,.322014,21,1,0)
This is the date on which the patient registered for being exposed to
"^DD",2,2,.322014,21,2,0)
Conditions related to service in SW Asia. This date must be after
"^DD",2,2,.322014,21,3,0)
8/1/1990.
"^DD",2,2,.322014,23,0)
^^2^2^3060510^
"^DD",2,2,.322014,23,1,0)
This is the date on which the patient registered for being exposed to
"^DD",2,2,.322014,23,2,0)
Southwest Asia conditions.  This date must be after 8/1/1990.
"^DD",2,2,.322014,"DT")
3060503
"^DD",2,2,.322015,0)
SW ASIA COND EXAM DATE^DX^^.322;15^S %DT="E",%DT(0)=-DT D ^%DT S X=Y K:Y<1 X I $D(X) D EC^DGLOCK
"^DD",2,2,.322015,3)
Enter the date this patient was examined for the Southwest Asia conditions claimed (Must be after 8/1/1990).
"^DD",2,2,.322015,5,1,0)
2^.322013^2
"^DD",2,2,.322015,21,0)
^.001^2^2^3060510^^
"^DD",2,2,.322015,21,1,0)
This is the date on which an examination for exposure to Conditions 
"^DD",2,2,.322015,21,2,0)
related to service in SW Asia was performed on the patient.
"^DD",2,2,.322015,"DT")
3060503
"^DD",2,2,.525,0)
POW STATUS INDICATED?^RSX^Y:YES;N:NO;U:UNKNOWN;^.52;5^S DFN=DA D POWV^DGLOCK I $D(X) D SV^DGLOCK
"^DD",2,2,.525,.1)
WERE YOU A PRISONER OF WAR
"^DD",2,2,.525,1,0)
^.1
"^DD",2,2,.525,1,1,0)
^^TRIGGER^2^.526
"^DD",2,2,.525,1,1,1)
X ^DD(2,.525,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$S('$D(^DIC(22,+$P(Y(1),U,6),0)):"",1:$P(^(0),U,1)) S DIU=X K Y S X=DIV S X="" X ^DD(2,.525,1,1,1.4)
"^DD",2,2,.525,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.525,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.525,1,1,1.4)
S DIH=$S($D(^DPT(DIV(0),.52)):^(.52),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,5,99))  S DIH=DIH_U" S %=$P(DIH,U,7,999),DIU=$P(DIH,U,6),^(.52)=$P(DIH,U,1,5)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.526 D ^DICR
"^DD",2,2,.525,1,1,2)
Q
"^DD",2,2,.525,1,1,"CREATE CONDITION")
WERE YOU A PRISONER OF WAR="NO"
"^DD",2,2,.525,1,1,"CREATE VALUE")
@
"^DD",2,2,.525,1,1,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.525,1,1,"FIELD")
POW WAR
"^DD",2,2,.525,1,2,0)
^^TRIGGER^2^.527
"^DD",2,2,.525,1,2,1)
X ^DD(2,.525,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$P(Y(1),U,7) S DIU=X K Y S X=DIV S X="" X ^DD(2,.525,1,2,1.4)
"^DD",2,2,.525,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.525,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.525,1,2,1.4)
S DIH=$S($D(^DPT(DIV(0),.52)):^(.52),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,6,99))  S DIH=DIH_U" S %=$P(DIH,U,8,999),DIU=$P(DIH,U,7),^(.52)=$P(DIH,U,1,6)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.527 D ^DICR
"^DD",2,2,.525,1,2,2)
Q
"^DD",2,2,.525,1,2,"CREATE CONDITION")
#.525="NO"
"^DD",2,2,.525,1,2,"CREATE VALUE")
@
"^DD",2,2,.525,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.525,1,2,"FIELD")
POW FROM DATE
"^DD",2,2,.525,1,3,0)
^^TRIGGER^2^.528
"^DD",2,2,.525,1,3,1)
X ^DD(2,.525,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$P(Y(1),U,8) S DIU=X K Y S X=DIV S X="" X ^DD(2,.525,1,3,1.4)
"^DD",2,2,.525,1,3,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.525,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.525,1,3,1.4)
S DIH=$S($D(^DPT(DIV(0),.52)):^(.52),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,7,99))  S DIH=DIH_U" S %=$P(DIH,U,9,999),DIU=$P(DIH,U,8),^(.52)=$P(DIH,U,1,7)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.528 D ^DICR
"^DD",2,2,.525,1,3,2)
Q
"^DD",2,2,.525,1,3,"CREATE CONDITION")
#.525="NO"
"^DD",2,2,.525,1,3,"CREATE VALUE")
@
"^DD",2,2,.525,1,3,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.525,1,3,"FIELD")
#.528
"^DD",2,2,.525,1,4,0)
2^AENR525^MUMPS
"^DD",2,2,.525,1,4,1)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.525,1,4,2)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.525,1,4,3)
DO NOT DELETE
"^DD",2,2,.525,1,4,"%D",0)
^.101^2^2^3040708^^^
"^DD",2,2,.525,1,4,"%D",1,0)
This cross-reference is used to update the patient's current Patient Enrollment 
"^DD",2,2,.525,1,4,"%D",2,0)
record.
"^DD",2,2,.525,1,4,"DT")
2970630
"^DD",2,2,.525,1,5,0)
2^AMTR^MUMPS
"^DD",2,2,.525,1,5,1)
S DFN=DA D EN^DGMTR K DGREQF
"^DD",2,2,.525,1,5,2)
S DFN=DA D EN^DGMTR K DGREQF
"^DD",2,2,.525,1,5,"%D",0)
^^2^2^2970927^
"^DD",2,2,.525,1,5,"%D",1,0)
This cross-reference is used to determine whether or not a means test is
"^DD",2,2,.525,1,5,"%D",2,0)
required.
"^DD",2,2,.525,1,5,"DT")
2970927
"^DD",2,2,.525,1,6,0)
2^AENRL525^MUMPS
"^DD",2,2,.525,1,6,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.525,1,6,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.525,1,6,"%D",0)
^^2^2^3040708^
"^DD",2,2,.525,1,6,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.525,1,6,"%D",2,0)
POW STATUS INDICATED? field.
"^DD",2,2,.525,1,6,"DT")
3040708
"^DD",2,2,.525,3)
Was this patient a Prisoner of War?
"^DD",2,2,.525,20,0)
^.3LA^1^1
"^DD",2,2,.525,20,1,0)
PW
"^DD",2,2,.525,21,0)
^^3^3^3060222^
"^DD",2,2,.525,21,1,0)
For this veteran applicant enter 'Y' if s/he was confined as a prisoner
"^DD",2,2,.525,21,2,0)
of war, 'N' if not, or 'U' if unknown.  Once the POW Status is verified 
"^DD",2,2,.525,21,3,0)
by the HEC, it is no longer editable.
"^DD",2,2,.525,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.525,"DT")
3060222
"^DD",2,2,.529,0)
POW STATUS VERIFIED^D^^.52;9^S %DT="ETXR" D ^%DT S X=Y K:Y<1 X
"^DD",2,2,.529,21,0)
^.001^3^3^3060222^^^
"^DD",2,2,.529,21,1,0)
This field contains the date/time that the POW status was received
"^DD",2,2,.529,21,2,0)
from HEC.  Once the POW status has been received from HEC, it can
"^DD",2,2,.529,21,3,0)
no longer be edited by the site.
"^DD",2,2,.529,"DT")
3060222
"^DD",27.11,27.11,50.13,0)
SOUTHWEST ASIA CONDITIONS^SI^Y:YES;N:NO;U:UNKNOWN;^E;13^Q
"^DD",27.11,27.11,50.13,3)
Enter the SOUTHWEST ASIA CONDITIONS status associated with the enrollment priority determination.
"^DD",27.11,27.11,50.13,21,0)
^^2^2^3060621^
"^DD",27.11,27.11,50.13,21,1,0)
The SOUTHWEST ASIA CONDITIONS status associated with the enrollment
"^DD",27.11,27.11,50.13,21,2,0)
priority determination.
"^DD",27.11,27.11,50.13,"DT")
3060621
"^DD",27.11,27.11,50.22,0)
AGENT ORANGE EXPOSURE LOCATION^S^K:KOREAN DMZ;V:VIETNAM;O:OTHER;^E;22^Q
"^DD",27.11,27.11,50.22,3)
Enter where the patient was exposed to agent orange.
"^DD",27.11,27.11,50.22,21,0)
^.001^3^3^3080416^^
"^DD",27.11,27.11,50.22,21,1,0)
For this veteran applicant who was exposed to agent orange (EXPOSED TO 
"^DD",27.11,27.11,50.22,21,2,0)
AGENT ORANGE prompt must be answered YES) enter the location where the 
"^DD",27.11,27.11,50.22,21,3,0)
exposure occurred.
"^DD",27.11,27.11,50.22,"DT")
3060726
"^DD",35,35,1,0)
ABBREVIATION^F^^0;2^K:$L(X)>10!($L(X)<1) X
"^DD",35,35,1,1,0)
^.1
"^DD",35,35,1,1,1,0)
35^C
"^DD",35,35,1,1,1,1)
S ^DIC(35,"C",$E(X,1,30),DA)=""
"^DD",35,35,1,1,1,2)
K ^DIC(35,"C",$E(X,1,30),DA)
"^DD",35,35,1,1,1,"%D",0)
^^1^1^3051205^
"^DD",35,35,1,1,1,"%D",1,0)
This cross reference will allow look-ups on the abbreviation field.
"^DD",35,35,1,1,1,"DT")
3051205
"^DD",35,35,1,3)
ANSWER MUST BE 1-10 CHARACTERS IN LENGTH
"^DD",35,35,1,21,0)
^^3^3^2911222^
"^DD",35,35,1,21,1,0)
This field contains an abbreviation for this federal agency.  On outputs
"^DD",35,35,1,21,2,0)
and other displays where the entire name of the federal agency may not fit,
"^DD",35,35,1,21,3,0)
this abbreviation may appear instead.
"^DD",35,35,1,"DT")
3051205
"^DD",301.7,301.7,0)
FIELD^^14^21
"^DD",301.7,301.7,0,"DDA")
N
"^DD",301.7,301.7,0,"DT")
3050610
"^DD",301.7,301.7,0,"IX","B",301.7,.01)

"^DD",301.7,301.7,0,"IX","C",301.7,1)

"^DD",301.7,301.7,0,"NM","IVM ADDRESS CHANGE LOG")

"^DD",301.7,301.7,0,"VRPK")
IVM
"^DD",301.7,301.7,.01,0)
ADDRESS CHANGE DT/TM^RDXI^^0;1^S %DT="ESTX" D ^%DT S X=Y K:X<1 X
"^DD",301.7,301.7,.01,1,0)
^.1
"^DD",301.7,301.7,.01,1,1,0)
301.7^B
"^DD",301.7,301.7,.01,1,1,1)
S ^IVM(301.7,"B",$E(X,1,30),DA)=""
"^DD",301.7,301.7,.01,1,1,2)
K ^IVM(301.7,"B",$E(X,1,30),DA)
"^DD",301.7,301.7,.01,3)
(No range limit on date)
"^DD",301.7,301.7,.01,21,0)
^.001^1^1^3050825^^
"^DD",301.7,301.7,.01,21,1,0)
This field will hold the date and time of the last Address Update.
"^DD",301.7,301.7,.01,"DT")
3050825
"^DD",301.7,301.7,1,0)
PATIENT^RP2'I^DPT(^0;2^Q
"^DD",301.7,301.7,1,1,0)
^.1
"^DD",301.7,301.7,1,1,1,0)
301.7^C
"^DD",301.7,301.7,1,1,1,1)
S ^IVM(301.7,"C",$E(X,1,30),DA)=""
"^DD",301.7,301.7,1,1,1,2)
K ^IVM(301.7,"C",$E(X,1,30),DA)
"^DD",301.7,301.7,1,1,1,"%D",0)
^^2^2^3050510^
"^DD",301.7,301.7,1,1,1,"%D",1,0)
This cross-reference can be used to sort by patient by internal entry
"^DD",301.7,301.7,1,1,1,"%D",2,0)
number.
"^DD",301.7,301.7,1,1,1,"DT")
3050510
"^DD",301.7,301.7,1,3)
Please enter the patient associated with this address update.
"^DD",301.7,301.7,1,21,0)
^^1^1^3050510^
"^DD",301.7,301.7,1,21,1,0)
This is the Patient associated with this address update.
"^DD",301.7,301.7,1,"DT")
3050825
"^DD",301.7,301.7,2,0)
ADDRESS CHANGE USER^P200'^VA(200,^0;3^Q
"^DD",301.7,301.7,2,21,0)
^^1^1^3050510^
"^DD",301.7,301.7,2,21,1,0)
The name of the user who has changed this patient's primary address.
"^DD",301.7,301.7,2,"DT")
3050510
"^DD",301.7,301.7,3,0)
ADDRESS CHANGE SOURCE^S^HEC:HEC;VAMC:VAMC;HBSC:HBSC;NCOA:NCOA;BVA:BVA;VAIN:VAINS;USPS:USPS;^0;4^Q
"^DD",301.7,301.7,3,3)
Please enter the source of the address change.
"^DD",301.7,301.7,3,21,0)
^^1^1^3050510^
"^DD",301.7,301.7,3,21,1,0)
This field will hold the source of the last address change.
"^DD",301.7,301.7,3,"DT")
3050510
"^DD",301.7,301.7,3.5,0)
ADDRESS CHANGE SITE^P4'^DIC(4,^0;5^Q
"^DD",301.7,301.7,3.5,"DT")
3050610
"^DD",301.7,301.7,4,0)
PRIOR ADDRESS CHANGE DT/TM^DX^^1;1^S %DT="ESTX" D ^%DT S X=Y K:X<1 X
"^DD",301.7,301.7,4,3)
(No range limit on date)
"^DD",301.7,301.7,4,21,0)
^^1^1^3050510^
"^DD",301.7,301.7,4,21,1,0)
This field will hold the date and time of the prior address update.
"^DD",301.7,301.7,4,"DT")
3050510
"^DD",301.7,301.7,5,0)
PRIOR ADDRESS CHANGE USER^P200'^VA(200,^1;2^Q
"^DD",301.7,301.7,5,21,0)
^^1^1^3050510^
"^DD",301.7,301.7,5,21,1,0)
The name of the prior user who changed this patient's primary address.
"^DD",301.7,301.7,5,"DT")
3050510
"^DD",301.7,301.7,6,0)
PRIOR ADDRESS CHANGE SITE^P4'^DIC(4,^1;3^Q
"^DD",301.7,301.7,6,3)
Please enter the prior Site that changed this patient's address.
"^DD",301.7,301.7,6,21,0)
^^3^3^3050510^
"^DD",301.7,301.7,6,21,1,0)
This field will hold the prior Site that changed this patient's address.
"^DD",301.7,301.7,6,21,2,0)
This field is only populated when the PRIOR ADDRESS SOURCE is listed as
"^DD",301.7,301.7,6,21,3,0)
VAMC.
"^DD",301.7,301.7,6,"DT")
3050510
"^DD",301.7,301.7,7,0)
PRIOR ADDRESS CHANGE SOURCE^S^HEC:HEC;VAMC:VAMC;HBSC:HBSC;NCOA:NCOA;BVA:BVA;VAIN:VAINS;USPS:USPS;^1;4^Q
"^DD",301.7,301.7,7,3)
Please enter the source of the prior address change.
"^DD",301.7,301.7,7,21,0)
^^1^1^3050510^
"^DD",301.7,301.7,7,21,1,0)
This field will hold the source of the prior address change.
"^DD",301.7,301.7,7,"DT")
3050510
"^DD",301.7,301.7,8,0)
PRIOR PHONE NUMBER [RESIDENCE]^F^^1;5^K:$L(X)>20!($L(X)<4) X
"^DD",301.7,301.7,8,3)
Enter the patients prior home telephone number [4-20 characters].
"^DD",301.7,301.7,8,21,0)
^^2^2^3050510^
"^DD",301.7,301.7,8,21,1,0)
Enter the telephone number [4-20 characters] to this patient's prior
"^DD",301.7,301.7,8,21,2,0)
place of residence.
"^DD",301.7,301.7,8,"DT")
3050510
"^DD",301.7,301.7,9,0)
PRIOR STREET ADDRESS [LINE 1]^FX^^1;6^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>35!($L(X)<3) X
"^DD",301.7,301.7,9,3)
Enter the first line of this patient's prior residence street address [3-35 characters].
"^DD",301.7,301.7,9,21,0)
^^2^2^3050510^
"^DD",301.7,301.7,9,21,1,0)
This is the first line of this patient's prior residence street address
"^DD",301.7,301.7,9,21,2,0)
[3-35 characters].
"^DD",301.7,301.7,9,"DT")
3050510
"^DD",301.7,301.7,10,0)
PRIOR STREET ADDRESS [LINE 2]^FX^^1;7^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>30!($L(X)<3) X D:$D(X) UP^DGHELP
"^DD",301.7,301.7,10,3)
If necessary, enter the second line of this patient's street address [3-30 characters].
"^DD",301.7,301.7,10,21,0)
^^3^3^3050510^
"^DD",301.7,301.7,10,21,1,0)
Enter the second line of this patient's prior residence street address
"^DD",301.7,301.7,10,21,2,0)
[3-30 characters]  if the space provided in 'street address' was not 
"^DD",301.7,301.7,10,21,3,0)
sufficient.
"^DD",301.7,301.7,10,"DT")
3050510
"^DD",301.7,301.7,11,0)
PRIOR CITY^F^^1;8^K:$L(X)>15!($L(X)<2) X
"^DD",301.7,301.7,11,3)
Answer must be 2-15 characters in length
"^DD",301.7,301.7,11,21,0)
^^3^3^3050510^
"^DD",301.7,301.7,11,21,1,0)
Enter the prior city in which this patient resided [2-15 characters].
"^DD",301.7,301.7,11,21,2,0)
If the space provided is not sufficient please abbreviate the city to 
"^DD",301.7,301.7,11,21,3,0)
the best of your ability.
"^DD",301.7,301.7,11,"DT")
3050510
"^DD",301.7,301.7,12,0)
PRIOR COUNTY^FX^^1;9^K:$L(X)>30!($L(X)<3)!'(X'?1P.E)!(X'?.ANP) X
"^DD",301.7,301.7,12,3)
Please enter the prior county that for this patient's address [3 - 30 characters].
"^DD",301.7,301.7,12,21,0)
^^1^1^3050516^
"^DD",301.7,301.7,12,21,1,0)
This is the prior county in which this patient resided [3-30 characters].
"^DD",301.7,301.7,12,"DT")
3050516
"^DD",301.7,301.7,13,0)
PRIOR STATE^P5'^DIC(5,^1;10^Q
"^DD",301.7,301.7,13,3)
Select from the available listing the state for this patient's prior residence.
"^DD",301.7,301.7,13,21,0)
^^2^2^3050510^
"^DD",301.7,301.7,13,21,1,0)
Select from the available listing the prior state in which this patient
"^DD",301.7,301.7,13,21,2,0)
resided.
"^DD",301.7,301.7,13,"DT")
3050510
"^DD",301.7,301.7,14,0)
PRIOR ZIP+4^FX^^1;11^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>20!($L(X)<5) X I $D(X) D ZIPIN^VAFADDR
"^DD",301.7,301.7,14,3)
Answer with either 5 digit or 9 digit prior zip code.
"^DD",301.7,301.7,14,21,0)
^^2^2^3050510^
"^DD",301.7,301.7,14,21,1,0)
Answer with either the 5 digit format (e.g. 12345) or the nine digit
"^DD",301.7,301.7,14,21,2,0)
format (e.g. 12345-6789 or 123456789) for the prior zip code.
"^DD",301.7,301.7,14,"DT")
3050510
"^DD",301.7,301.7,15,0)
PRIOR PROVINCE^F^^1;12^K:$L(X)>20!($L(X)<1) X
"^DD",301.7,301.7,15,3)
Enter the patients prior province [1-20 characters].
"^DD",301.7,301.7,15,21,0)
^^2^2^3051212^
"^DD",301.7,301.7,15,21,1,0)
Enter the province [1-20 characters] to this
"^DD",301.7,301.7,15,21,2,0)
patient's prior place of residence.
"^DD",301.7,301.7,15,"DT")
3051212
"^DD",301.7,301.7,16,0)
PRIOR POSTAL CODE^F^^1;13^K:$L(X)>10!($L(X)<1) X
"^DD",301.7,301.7,16,3)
Enter the patients prior postal code [1-10 characters].
"^DD",301.7,301.7,16,21,0)
^^2^2^3051212^
"^DD",301.7,301.7,16,21,1,0)
Enter the postal code [1-10 characters] to this
"^DD",301.7,301.7,16,21,2,0)
patient's prior place of residence.
"^DD",301.7,301.7,16,"DT")
3051212
"^DD",301.7,301.7,17,0)
PRIOR COUNTRY^P779.004'^HL(779.004,^1;14^Q
"^DD",301.7,301.7,17,21,0)
^.001^1^1^3060712^^
"^DD",301.7,301.7,17,21,1,0)
This field will hold the value of Country in the prior address.
"^DD",301.7,301.7,17,"DT")
3060712
"^DD",301.7,301.7,18,0)
PRIOR BAD ADDRESS INDICATOR^S^1:UNDELIVERABLE;2:HOMELESS;3:OTHER;4:ADDRESS NOT FOUND;^1;15^Q
"^DD",301.7,301.7,18,3)
Please enter valid prior Bad Address Indicator.
"^DD",301.7,301.7,18,21,0)
^.001^1^1^3060407^^
"^DD",301.7,301.7,18,21,1,0)
This field will hold the prior Bad Address Indicator.
"^DD",301.7,301.7,18,"DT")
3060407
"^DD",301.7,301.7,19,0)
PRIOR STREET ADDRESS [LINE 3]^FX^^2;1^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>30!($L(X)<3) X
"^DD",301.7,301.7,19,3)
If necessary, enter a third line of this applicant's street address [3-30 characters].
"^DD",301.7,301.7,19,21,0)
^.001^2^2^3060711^^^
"^DD",301.7,301.7,19,21,1,0)
Enter the third line of this applicant's residence street address [3-30 characters]
"^DD",301.7,301.7,19,21,2,0)
if the space provided in 'street address' and 'street address 2' was not sufficient.
"^DD",301.7,301.7,19,"DT")
3060711
"^DD",408.12,408.12,.02,0)
RELATIONSHIP^R*P408.11'^DG(408.11,^0;2^D REL^DGMTDD1 D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",408.12,408.12,.02,1,0)
^.1
"^DD",408.12,408.12,.02,1,1,0)
408.12^AENR02^MUMPS
"^DD",408.12,408.12,.02,1,1,1)
D E40812^DGRTRIG(DA)
"^DD",408.12,408.12,.02,1,1,2)
D E40812^DGRTRIG(DA)
"^DD",408.12,408.12,.02,1,1,3)
 DO NOT DELETE
"^DD",408.12,408.12,.02,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.12,408.12,.02,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.12,408.12,.02,1,1,"%D",2,0)
enrollment.
"^DD",408.12,408.12,.02,1,1,"DT")
3050913
"^DD",408.12,408.12,.02,3)
Enter this persons relationship to the veteran.
"^DD",408.12,408.12,.02,12)
Only allows appropriate codes given sex of relation.  Self and Spouse not editable or selectable.  Only 19 child Dependents allowed per veteran.
"^DD",408.12,408.12,.02,12.1)
D REL^DGMTDD1
"^DD",408.12,408.12,.02,21,0)
^.001^6^6^3061208^^^
"^DD",408.12,408.12,.02,21,1,0)
Enter in this field the persons relationship to the veteran.  Choose
"^DD",408.12,408.12,.02,21,2,0)
only those that are appropriate for the sex of the person entered.
"^DD",408.12,408.12,.02,21,3,0)
Self and Spouse will not be selectable or editable.  They are created
"^DD",408.12,408.12,.02,21,4,0)
automatically by the module.  If there are already 19 child dependents
"^DD",408.12,408.12,.02,21,5,0)
associated with the veteran this dependent may not be son, stepson, 
"^DD",408.12,408.12,.02,21,6,0)
daughter or stepdaughter.
"^DD",408.12,408.12,.02,"DT")
3050913
"^DD",408.13,408.13,.09,0)
SOCIAL SECURITY NUMBER^RFX^^0;9^K:X[""""!($A(X)=45) X I $D(X) D SSN^DGMTDD1
"^DD",408.13,408.13,.09,.1)
SSN
"^DD",408.13,408.13,.09,1,0)
^.1
"^DD",408.13,408.13,.09,1,1,0)
408.13^BS^MUMPS
"^DD",408.13,408.13,.09,1,1,1)
S ^DGPR(408.13,"BS",$E(X,6,9),DA)=""
"^DD",408.13,408.13,.09,1,1,2)
K ^DGPR(408.13,"BS",$E(X,6,9),DA)
"^DD",408.13,408.13,.09,1,1,"DT")
2920121
"^DD",408.13,408.13,.09,1,2,0)
408.13^BS5^MUMPS
"^DD",408.13,408.13,.09,1,2,1)
S ^DGPR(408.13,"BS5",$E(^DGPR(408.13,DA,0),1)_$E(X,6,9),DA)=""
"^DD",408.13,408.13,.09,1,2,2)
K ^DGPR(408.13,"BS5",$E(^DGPR(408.13,DA,0),1)_$E(X,6,9),DA)
"^DD",408.13,408.13,.09,1,2,"DT")
2920121
"^DD",408.13,408.13,.09,1,3,0)
408.13^SSN
"^DD",408.13,408.13,.09,1,3,1)
S ^DGPR(408.13,"SSN",$E(X,1,30),DA)=""
"^DD",408.13,408.13,.09,1,3,2)
K ^DGPR(408.13,"SSN",$E(X,1,30),DA)
"^DD",408.13,408.13,.09,1,3,"DT")
2920121
"^DD",408.13,408.13,.09,1,4,0)
408.13^AIVM^MUMPS
"^DD",408.13,408.13,.09,1,4,1)
S IVMX=X,X="IVMPXFR" X ^%ZOSF("TEST") D:$T SPSSN^IVMPXFR S X=IVMX K IVMX
"^DD",408.13,408.13,.09,1,4,2)
S IVMX=X,X="IVMPXFR" X ^%ZOSF("TEST") D:$T SPSSN^IVMPXFR S X=IVMX K IVMX
"^DD",408.13,408.13,.09,1,4,"%D",0)
^^4^4^2940714^
"^DD",408.13,408.13,.09,1,4,"%D",1,0)
This cross-reference will check the IVM PATIENT file to see if a change
"^DD",408.13,408.13,.09,1,4,"%D",2,0)
to this field will require transmission to the IVM Center.  If it does,
"^DD",408.13,408.13,.09,1,4,"%D",3,0)
the IVM PATIENT file entry's TRANSMISSION STATUS will be set to 0 and
"^DD",408.13,408.13,.09,1,4,"%D",4,0)
the nightly background job will transmit the updated information.
"^DD",408.13,408.13,.09,1,4,"DT")
2940714
"^DD",408.13,408.13,.09,1,5,0)
408.13^AENR09^MUMPS
"^DD",408.13,408.13,.09,1,5,1)
D E40813^DGRTRIG(DA)
"^DD",408.13,408.13,.09,1,5,1.4)
S DIH=$G(^DGPR(408.13,DIV(0),0)),DIV=X S $P(^(0),U,10)=DIV,DIH=408.13,DIG=.1 D ^DICR
"^DD",408.13,408.13,.09,1,5,2)
D E40813^DGRTRIG(DA)
"^DD",408.13,408.13,.09,1,5,3)
 DO NOT DELETE
"^DD",408.13,408.13,.09,1,5,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.13,408.13,.09,1,5,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.13,408.13,.09,1,5,"%D",2,0)
enrollment.
"^DD",408.13,408.13,.09,1,5,"CREATE CONDITION")
#.09'["P"
"^DD",408.13,408.13,.09,1,5,"CREATE VALUE")
@
"^DD",408.13,408.13,.09,1,5,"DELETE VALUE")
NO EFFECT
"^DD",408.13,408.13,.09,1,5,"DT")
3050913
"^DD",408.13,408.13,.09,1,5,"FIELD")
PSEUDO SSN REASON
"^DD",408.13,408.13,.09,1,6,0)
^^TRIGGER^408.13^.1
"^DD",408.13,408.13,.09,1,6,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)'["P" I X S X=DIV S Y(1)=$S($D(^DGPR(408.13,D0,0)):^(0),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y S X="" X ^DD(408.13,.09,1,6,1.4)
"^DD",408.13,408.13,.09,1,6,1.4)
S DIH=$G(^DGPR(408.13,DIV(0),0)),DIV=X S $P(^(0),U,10)=DIV,DIH=408.13,DIG=.1 D ^DICR
"^DD",408.13,408.13,.09,1,6,2)
Q
"^DD",408.13,408.13,.09,1,6,3)
DO NOT DELETE
"^DD",408.13,408.13,.09,1,6,"%D",0)
^^1^1^3060712^
"^DD",408.13,408.13,.09,1,6,"%D",1,0)
Pseudo SSN Reason will have a value only if SSN is a Pseudo SSN.
"^DD",408.13,408.13,.09,1,6,"CREATE CONDITION")
#.09'["P"
"^DD",408.13,408.13,.09,1,6,"CREATE VALUE")
@
"^DD",408.13,408.13,.09,1,6,"DELETE VALUE")
NO EFFECT
"^DD",408.13,408.13,.09,1,6,"DT")
3060712
"^DD",408.13,408.13,.09,1,6,"FIELD")
PSEUDO SSN REASON
"^DD",408.13,408.13,.09,3)
Answer with the individual's social security number.  Answer must be 9 numbers in length or a "P" or a pseudo SSN.
"^DD",408.13,408.13,.09,21,0)
^^13^13^3070130^
"^DD",408.13,408.13,.09,21,1,0)
Answer with the individual's social security number.  Answer must be 9 
"^DD",408.13,408.13,.09,21,2,0)
numbers in length. The SSN will be sent to the SSA for verification. 
"^DD",408.13,408.13,.09,21,3,0)
This status will be displayed next to the SSN.  Once an SSN has
"^DD",408.13,408.13,.09,21,4,0)
received a status of Verified, it is locked from user updating and a 
"^DD",408.13,408.13,.09,21,5,0)
"VERIFIED" will be displayed by the SSN field.  Only HEC staff are able 
"^DD",408.13,408.13,.09,21,6,0)
to change a Spouse or Dependents verified SSN.  If SSA indicates the 
"^DD",408.13,408.13,.09,21,7,0)
SSN is invalid, "INVALID" will appear next to the invalid SSN of the
"^DD",408.13,408.13,.09,21,8,0)
individual. Facilities should make every effort to obtain the accurate 
"^DD",408.13,408.13,.09,21,9,0)
SSN from the individual for any invalid or pseudo SSN.
"^DD",408.13,408.13,.09,21,10,0)
 
"^DD",408.13,408.13,.09,21,11,0)
If a valid SSN is not known, then a "P" will be entered at the SSN
"^DD",408.13,408.13,.09,21,12,0)
prompt for the system to automatically assign a Pseudo-SSN.  If a
"^DD",408.13,408.13,.09,21,13,0)
Pseudo SSN is entered, a Reason for entering it will be required.
"^DD",408.13,408.13,.09,23,0)
^.001^1^1^3070130^^^^
"^DD",408.13,408.13,.09,23,1,0)
This contains the SSN of the veteran's dependents.  This is not required.
"^DD",408.13,408.13,.09,"DT")
3060712
"^DD",408.13,408.13,.11,0)
SSN VERIFICATION STATUS^S^4:VERIFIED;2:INVALID;^0;11^Q
"^DD",408.13,408.13,.11,21,0)
^^3^3^3060406^
"^DD",408.13,408.13,.11,21,1,0)
This field designates whether or not the SSN has been verified. This field
"^DD",408.13,408.13,.11,21,2,0)
will be received in the HL7 record.  It is not editable by the user.  Once
"^DD",408.13,408.13,.11,21,3,0)
the SSN is verified by the SSA, it is no longer editable.
"^DD",408.13,408.13,.11,"DT")
3060406
"^DD",408.21,408.21,.08,0)
SOCIAL SECURITY (NOT SSI)^NJ10,2X^^0;8^S:X["$" X=$P(X,"$",2) X:X["*" "S X=X*12 W ""  "",X" K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",408.21,408.21,.08,.1)
ANNUAL SOCIAL SECURITY (NOT SSI)
"^DD",408.21,408.21,.08,1,0)
^.1
"^DD",408.21,408.21,.08,1,1,0)
408.21^AENR08^MUMPS
"^DD",408.21,408.21,.08,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.08,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.08,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,.08,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,.08,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,.08,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,.08,1,1,"DT")
3050913
"^DD",408.21,408.21,.08,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,.08,4)
D:$G(DGMTYPT)=3 8^EASECDD D:$G(DGMTYPT)'=3 8^DGMTDD4
"^DD",408.21,408.21,.08,23,0)
^.001^12^12^3061030^^
"^DD",408.21,408.21,.08,23,1,0)
This field is shared by Income Screening and Means Test.  Both
"^DD",408.21,408.21,.08,23,2,0)
applications maintain the field.
"^DD",408.21,408.21,.08,23,3,0)
 
"^DD",408.21,408.21,.08,23,4,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays
"^DD",408.21,408.21,.08,23,5,0)
on screen as 'Social Security (Not SSI)'.  It contains the amount of
"^DD",408.21,408.21,.08,23,6,0)
annual Social Security received the previous calendar year.  It does not
"^DD",408.21,408.21,.08,23,7,0)
include SSI.
"^DD",408.21,408.21,.08,23,8,0)
 
"^DD",408.21,408.21,.08,23,9,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field displays on screen 
"^DD",408.21,408.21,.08,23,10,0)
as 'Other Income Amounts (Soc. Sec., Compensation, Pension, Interest, 
"^DD",408.21,408.21,.08,23,11,0)
Div.)'.  It contains the amount of annual Social Security, compensation,
"^DD",408.21,408.21,.08,23,12,0)
pension, interest, and dividends.  It does not include welfare.
"^DD",408.21,408.21,.08,"DT")
3060922
"^DD",408.21,408.21,.09,0)
U.S. CIVIL SERVICE^NJ8,2X^^0;9^S:X["$" X=$P(X,"$",2) X:X["*" "S X=X*12 W ""  "",X" K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",408.21,408.21,.09,.1)
ANNUAL U.S. CIVIL SERVICE
"^DD",408.21,408.21,.09,1,0)
^.1
"^DD",408.21,408.21,.09,1,1,0)
408.21^AENR09^MUMPS
"^DD",408.21,408.21,.09,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.09,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.09,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,.09,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,.09,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,.09,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,.09,1,1,"DT")
3050913
"^DD",408.21,408.21,.09,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,.09,4)
D:$G(DGMTYPT)=3 9^EASECDD
"^DD",408.21,408.21,.09,21,0)
^.001^4^4^3070130^^
"^DD",408.21,408.21,.09,21,1,0)
Enter in this field the annual amount of U.S. Civil Service received
"^DD",408.21,408.21,.09,21,2,0)
during the previous calendar year.
"^DD",408.21,408.21,.09,21,3,0)
 
"^DD",408.21,408.21,.09,21,4,0)
A monthly amount can be entered with an '*' after it.
"^DD",408.21,408.21,.09,23,0)
^.001^9^9^3070130^^^^
"^DD",408.21,408.21,.09,23,1,0)
This field is shared by Income Screening and Means Test.  Both
"^DD",408.21,408.21,.09,23,2,0)
applications maintain the field.
"^DD",408.21,408.21,.09,23,3,0)
 
"^DD",408.21,408.21,.09,23,4,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays
"^DD",408.21,408.21,.09,23,5,0)
on screen as 'U.S. Civil Service'.  It contains the amount of annual
"^DD",408.21,408.21,.09,23,6,0)
Civil Service compensation received the previous calendar year.
"^DD",408.21,408.21,.09,23,7,0)
 
"^DD",408.21,408.21,.09,23,8,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field does not display
"^DD",408.21,408.21,.09,23,9,0)
on screen.  It should contain Null.
"^DD",408.21,408.21,.09,"DT")
3070130
"^DD",408.21,408.21,.1,0)
U.S. RAILROAD RETIREMENT^NJ8,2X^^0;10^S:X["$" X=$P(X,"$",2) X:X["*" "S X=X*12 W ""  "",X" K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",408.21,408.21,.1,.1)
ANNUAL U.S. RAILROAD RETIREMENT
"^DD",408.21,408.21,.1,1,0)
^.1
"^DD",408.21,408.21,.1,1,1,0)
408.21^AENR1^MUMPS
"^DD",408.21,408.21,.1,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.1,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.1,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,.1,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,.1,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,.1,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,.1,1,1,"DT")
3050913
"^DD",408.21,408.21,.1,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,.1,4)
D:$G(DGMTYPT)=3 10^EASECDD
"^DD",408.21,408.21,.1,21,0)
^.001^4^4^3061030^^^^
"^DD",408.21,408.21,.1,21,1,0)
Enter in this field the annual amount of U.S. Railroad Retirement
"^DD",408.21,408.21,.1,21,2,0)
received during the previous calendar year.
"^DD",408.21,408.21,.1,21,3,0)
 
"^DD",408.21,408.21,.1,21,4,0)
A monthly amount can be entered with an '*' after it.
"^DD",408.21,408.21,.1,23,0)
^^10^10^3061030^
"^DD",408.21,408.21,.1,23,1,0)
This field is shared by Income Screening and Means Test.  Both
"^DD",408.21,408.21,.1,23,2,0)
applications maintain the field.
"^DD",408.21,408.21,.1,23,3,0)
 
"^DD",408.21,408.21,.1,23,4,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays
"^DD",408.21,408.21,.1,23,5,0)
on screen as 'U.S. Railroad Retirement'.  It contains the amount of
"^DD",408.21,408.21,.1,23,6,0)
annual Railroad Retirement compensation received the previous calendar
"^DD",408.21,408.21,.1,23,7,0)
year.
"^DD",408.21,408.21,.1,23,8,0)
 
"^DD",408.21,408.21,.1,23,9,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field does not display
"^DD",408.21,408.21,.1,23,10,0)
on screen.  It should contain Null.
"^DD",408.21,408.21,.1,"DT")
3050913
"^DD",408.21,408.21,.11,0)
MILITARY RETIREMENT^NJ8,2X^^0;11^S:X["$" X=$P(X,"$",2) X:X["*" "S X=X*12 W ""  "",X" K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",408.21,408.21,.11,.1)
ANNUAL MILITARY RETIREMENT
"^DD",408.21,408.21,.11,1,0)
^.1
"^DD",408.21,408.21,.11,1,1,0)
408.21^AENR11^MUMPS
"^DD",408.21,408.21,.11,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.11,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.11,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,.11,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,.11,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,.11,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,.11,1,1,"DT")
3050913
"^DD",408.21,408.21,.11,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,.11,4)
D:$G(DGMTYPT)=3 11^EASECDD
"^DD",408.21,408.21,.11,21,0)
^.001^4^4^3061030^^^^
"^DD",408.21,408.21,.11,21,1,0)
Enter in this field the annual amount of Military Retirement received
"^DD",408.21,408.21,.11,21,2,0)
during the previous calendar year.
"^DD",408.21,408.21,.11,21,3,0)
 
"^DD",408.21,408.21,.11,21,4,0)
A monthly amount can be entered with an '*' after it.
"^DD",408.21,408.21,.11,23,0)
^^9^9^3061030^
"^DD",408.21,408.21,.11,23,1,0)
This field is shared by Income Screening and Means Test.  Both
"^DD",408.21,408.21,.11,23,2,0)
applications maintain the field.
"^DD",408.21,408.21,.11,23,3,0)
 
"^DD",408.21,408.21,.11,23,4,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays
"^DD",408.21,408.21,.11,23,5,0)
on screen as 'Military Retirement'.  It contains the amount of annual
"^DD",408.21,408.21,.11,23,6,0)
Military Retirement compensation received the previous calendar year.
"^DD",408.21,408.21,.11,23,7,0)
 
"^DD",408.21,408.21,.11,23,8,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field does not display
"^DD",408.21,408.21,.11,23,9,0)
on screen.  It should contain Null.
"^DD",408.21,408.21,.11,"DT")
3050913
"^DD",408.21,408.21,.12,0)
UNEMPLOYMENT COMPENSATION^NJ8,2X^^0;12^S:X["$" X=$P(X,"$",2) X:X["*" "S X=X*12 W ""  "",X" K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",408.21,408.21,.12,.1)
ANNUAL UNEMPLOYMENT COMPENSATION
"^DD",408.21,408.21,.12,1,0)
^.1
"^DD",408.21,408.21,.12,1,1,0)
408.21^AENR12^MUMPS
"^DD",408.21,408.21,.12,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.12,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.12,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,.12,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,.12,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,.12,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,.12,1,1,"DT")
3050913
"^DD",408.21,408.21,.12,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,.12,4)
D:$G(DGMTYPT)=3 12^EASECDD
"^DD",408.21,408.21,.12,21,0)
^.001^4^4^3061030^^^^
"^DD",408.21,408.21,.12,21,1,0)
Enter in this field the annual amount of Unemployment Compensation
"^DD",408.21,408.21,.12,21,2,0)
received during the previous calendar year.
"^DD",408.21,408.21,.12,21,3,0)
 
"^DD",408.21,408.21,.12,21,4,0)
A monthly amount can be entered with an '*' after it.
"^DD",408.21,408.21,.12,23,0)
^^9^9^3061030^
"^DD",408.21,408.21,.12,23,1,0)
This field is shared by Income Screening and Means Test.  Both
"^DD",408.21,408.21,.12,23,2,0)
applications maintain the field.
"^DD",408.21,408.21,.12,23,3,0)
 
"^DD",408.21,408.21,.12,23,4,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays
"^DD",408.21,408.21,.12,23,5,0)
on screen as 'Unemployment Compensation'.  It contains the amount of
"^DD",408.21,408.21,.12,23,6,0)
annual unemployment compensation received the previous calendar year.
"^DD",408.21,408.21,.12,23,7,0)
 
"^DD",408.21,408.21,.12,23,8,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field does not display
"^DD",408.21,408.21,.12,23,9,0)
on screen.  It should contain Null.
"^DD",408.21,408.21,.12,"DT")
3050913
"^DD",408.21,408.21,.13,0)
OTHER RETIREMENT^NJ8,2X^^0;13^S:X["$" X=$P(X,"$",2) X:X["*" "S X=X*12 W ""  "",X" K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",408.21,408.21,.13,.1)
ANNUAL OTHER RETIREMENT
"^DD",408.21,408.21,.13,1,0)
^.1
"^DD",408.21,408.21,.13,1,1,0)
408.21^AENR13^MUMPS
"^DD",408.21,408.21,.13,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.13,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.13,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,.13,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,.13,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,.13,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,.13,1,1,"DT")
3050913
"^DD",408.21,408.21,.13,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,.13,4)
D:$G(DGMTYPT)=3 13^EASECDD
"^DD",408.21,408.21,.13,21,0)
^.001^5^5^3061030^^
"^DD",408.21,408.21,.13,21,1,0)
Enter in this field the annual amount of Other Retirement received
"^DD",408.21,408.21,.13,21,2,0)
during the previous calendar year.  This includes company, state,
"^DD",408.21,408.21,.13,21,3,0)
local, etc.
"^DD",408.21,408.21,.13,21,4,0)
 
"^DD",408.21,408.21,.13,21,5,0)
A monthly amount can be entered with an '*' after it.
"^DD",408.21,408.21,.13,23,0)
^^9^9^3061030^
"^DD",408.21,408.21,.13,23,1,0)
This field is shared by Income Screening and Means Test.  Both
"^DD",408.21,408.21,.13,23,2,0)
applications maintain the field.
"^DD",408.21,408.21,.13,23,3,0)
 
"^DD",408.21,408.21,.13,23,4,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays on
"^DD",408.21,408.21,.13,23,5,0)
screen as 'Other Retirement'.  It contains the amount of annual other
"^DD",408.21,408.21,.13,23,6,0)
retirement compensation received the previous calendar year.
"^DD",408.21,408.21,.13,23,7,0)
 
"^DD",408.21,408.21,.13,23,8,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field does not display on
"^DD",408.21,408.21,.13,23,9,0)
screen.  It should contain Null.
"^DD",408.21,408.21,.13,"DT")
3060712
"^DD",408.21,408.21,.14,0)
TOTAL INCOME FROM EMPLOYMENT^NJ9,2X^^0;14^S:X["$" X=$P(X,"$",2) X:X["*" "S X=X*12 W ""  "",X" K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",408.21,408.21,.14,.1)
ANNUAL TOTAL INCOME FROM EMPLOYMENT
"^DD",408.21,408.21,.14,1,0)
^.1
"^DD",408.21,408.21,.14,1,1,0)
408.21^AIX14^MUMPS
"^DD",408.21,408.21,.14,1,1,1)
D EMP^DGMTDD3
"^DD",408.21,408.21,.14,1,1,2)
I $D(^DGMT(408.21,DA,0)),$P(^(0),U,14)="" D EMP^DGMTDD3
"^DD",408.21,408.21,.14,1,1,"%D",0)
^^4^4^2920412^^^^
"^DD",408.21,408.21,.14,1,1,"%D",1,0)
This mumps cross-reference works like a "trigger" cross-reference.
"^DD",408.21,408.21,.14,1,1,"%D",2,0)
If the patient has a child with no employment income, or the child's
"^DD",408.21,408.21,.14,1,1,"%D",3,0)
employment income minus the income exclusion is not greater than 0 any
"^DD",408.21,408.21,.14,1,1,"%D",4,0)
corresponding educational expenses on file for the year are deleted.
"^DD",408.21,408.21,.14,1,1,"DT")
2920412
"^DD",408.21,408.21,.14,1,2,0)
408.21^AENR14^MUMPS
"^DD",408.21,408.21,.14,1,2,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.14,1,2,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.14,1,2,3)
 DO NOT DELETE
"^DD",408.21,408.21,.14,1,2,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,.14,1,2,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,.14,1,2,"%D",2,0)
enrollment.
"^DD",408.21,408.21,.14,1,2,"DT")
3050913
"^DD",408.21,408.21,.14,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,.14,4)
D:$G(DGMTYPT)=3 14^EASECDD D:$G(DGMTYPT)'=3 14^DGMTDD4
"^DD",408.21,408.21,.14,23,0)
^^13^13^3061030^
"^DD",408.21,408.21,.14,23,1,0)
This field is shared by Income Screening and Means Test.  Both
"^DD",408.21,408.21,.14,23,2,0)
applications maintain this field.
"^DD",408.21,408.21,.14,23,3,0)
 
"^DD",408.21,408.21,.14,23,4,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays on
"^DD",408.21,408.21,.14,23,5,0)
screen as 'Total Employment Income'.  It contains the annual amount of
"^DD",408.21,408.21,.14,23,6,0)
total income from employment received during the previous calendar year.  
"^DD",408.21,408.21,.14,23,7,0)
This includes wages, salary, earnings, and tips.
"^DD",408.21,408.21,.14,23,8,0)
 
"^DD",408.21,408.21,.14,23,9,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field displays on screen
"^DD",408.21,408.21,.14,23,10,0)
as 'Total Employment Income (Wages, Bonuses, Tips)'.  It contains the
"^DD",408.21,408.21,.14,23,11,0)
annual amount of total income from employment received during the previous
"^DD",408.21,408.21,.14,23,12,0)
calendar year.  It includes wages, salary, earnings and tips.  It does not
"^DD",408.21,408.21,.14,23,13,0)
include income from farm, ranch, property, or business.
"^DD",408.21,408.21,.14,"DT")
3060712
"^DD",408.21,408.21,.15,0)
INTEREST, DIVIDEND, OR ANNUITY^NJ8,2X^^0;15^S:X["$" X=$P(X,"$",2) X:X["*" "S X=X*12 W ""  "",X" K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",408.21,408.21,.15,.1)
ANNUAL INTEREST, DIVIDEND OR ANNUITY INCOME
"^DD",408.21,408.21,.15,1,0)
^.1
"^DD",408.21,408.21,.15,1,1,0)
408.21^AENR15^MUMPS
"^DD",408.21,408.21,.15,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.15,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.15,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,.15,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,.15,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,.15,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,.15,1,1,"DT")
3050913
"^DD",408.21,408.21,.15,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,.15,4)
D:$G(DGMTYPT)=3 15^EASECDD
"^DD",408.21,408.21,.15,21,0)
^.001^4^4^3061030^^
"^DD",408.21,408.21,.15,21,1,0)
Enter in this field the annual amount of Interest, Dividend, or
"^DD",408.21,408.21,.15,21,2,0)
Annuity Income received during the previous calendar year.
"^DD",408.21,408.21,.15,21,3,0)
 
"^DD",408.21,408.21,.15,21,4,0)
A monthly amount can be entered with an '*' after it.
"^DD",408.21,408.21,.15,23,0)
^^9^9^3061030^
"^DD",408.21,408.21,.15,23,1,0)
This field is shared by Income Screening and Means Test.  Both
"^DD",408.21,408.21,.15,23,2,0)
applications maintain this field.
"^DD",408.21,408.21,.15,23,3,0)
 
"^DD",408.21,408.21,.15,23,4,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays on
"^DD",408.21,408.21,.15,23,5,0)
screen as 'Interest,Dividend,Annuity'.  It contains the amount of annual
"^DD",408.21,408.21,.15,23,6,0)
interest, dividend, and annuity received the previous calendar year.
"^DD",408.21,408.21,.15,23,7,0)
 
"^DD",408.21,408.21,.15,23,8,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field does not display on
"^DD",408.21,408.21,.15,23,9,0)
screen.  It should contain Null.
"^DD",408.21,408.21,.15,"DT")
3060712
"^DD",408.21,408.21,.16,0)
WORKERS COMP. OR BLACK LUNG^NJ8,2X^^0;16^S:X["$" X=$P(X,"$",2) X:X["*" "S X=X*12 W ""  "",X" K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",408.21,408.21,.16,.1)
ANNUAL WORKERS COMPENSATION OR BLACK LUNG BENEFITS
"^DD",408.21,408.21,.16,1,0)
^.1
"^DD",408.21,408.21,.16,1,1,0)
408.21^AENR16^MUMPS
"^DD",408.21,408.21,.16,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.16,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.16,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,.16,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,.16,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,.16,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,.16,1,1,"DT")
3050913
"^DD",408.21,408.21,.16,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,.16,4)
D:$G(DGMTYPT)=3 16^EASECDD
"^DD",408.21,408.21,.16,21,0)
^.001^4^4^3061030^^
"^DD",408.21,408.21,.16,21,1,0)
Enter in this field the annual amount of Workers Compensation or
"^DD",408.21,408.21,.16,21,2,0)
Black Lung Benefits received during the previous calendar year.
"^DD",408.21,408.21,.16,21,3,0)
 
"^DD",408.21,408.21,.16,21,4,0)
A monthly amount can be entered with an '*' after it.
"^DD",408.21,408.21,.16,23,0)
^^10^10^3061030^
"^DD",408.21,408.21,.16,23,1,0)
This field is shared by Income Screening and Means Test.  Both
"^DD",408.21,408.21,.16,23,2,0)
applications maintain the field.
"^DD",408.21,408.21,.16,23,3,0)
 
"^DD",408.21,408.21,.16,23,4,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays on
"^DD",408.21,408.21,.16,23,5,0)
screen as 'Workers Comp or Black Lung'.  It contains the amount of annual
"^DD",408.21,408.21,.16,23,6,0)
workers compensation or Black Lung benefit received the previous calendar
"^DD",408.21,408.21,.16,23,7,0)
year.
"^DD",408.21,408.21,.16,23,8,0)
 
"^DD",408.21,408.21,.16,23,9,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field does not display on
"^DD",408.21,408.21,.16,23,10,0)
screen.  It should contain Null.
"^DD",408.21,408.21,.16,"DT")
3060712
"^DD",408.21,408.21,.17,0)
ALL OTHER INCOME^NJ9,2X^^0;17^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999)!(X<0)!(X?.E1"."3.N) X
"^DD",408.21,408.21,.17,.1)
ANNUAL ALL OTHER INCOME
"^DD",408.21,408.21,.17,1,0)
^.1
"^DD",408.21,408.21,.17,1,1,0)
408.21^AENR17^MUMPS
"^DD",408.21,408.21,.17,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.17,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,.17,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,.17,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,.17,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,.17,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,.17,1,1,"DT")
3050913
"^DD",408.21,408.21,.17,3)
Type a Dollar amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,.17,4)
D:$G(DGMTYPT)=3 17^EASECDD D:$G(DGMTYPT)'=3 17^DGMTDD4
"^DD",408.21,408.21,.17,23,0)
^^11^11^3061030^
"^DD",408.21,408.21,.17,23,1,0)
This field is shared by Income Screening and Means Test.  Both
"^DD",408.21,408.21,.17,23,2,0)
applications maintain this field. 
"^DD",408.21,408.21,.17,23,3,0)
 
"^DD",408.21,408.21,.17,23,4,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays on
"^DD",408.21,408.21,.17,23,5,0)
screen as 'All Other Income'.  It contains the amount of annual net income
"^DD",408.21,408.21,.17,23,6,0)
from a farm or business received the previous calendar year.
"^DD",408.21,408.21,.17,23,7,0)
 
"^DD",408.21,408.21,.17,23,8,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field displays on screen
"^DD",408.21,408.21,.17,23,9,0)
as 'Net Income from Farm, Ranch, Property, Bus.'. It contains the net
"^DD",408.21,408.21,.17,23,10,0)
income amount from your farm, ranch, property or business received during
"^DD",408.21,408.21,.17,23,11,0)
the previous calendar year.
"^DD",408.21,408.21,.17,"DT")
3060712
"^DD",408.21,408.21,1.01,0)
ADJUSTED MEDICAL EXPENSES^NJ8,2X^^1;1^S:X["$" X=$P(X,"$",2) X:X["*" "S X=X*12 D EN^DDIOL(""  ""_X,"""",""?0"")" K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",408.21,408.21,1.01,1,0)
^.1
"^DD",408.21,408.21,1.01,1,1,0)
408.21^AGME101^MUMPS
"^DD",408.21,408.21,1.01,1,1,1)
D AGME101^DGMTSCU4(DA)
"^DD",408.21,408.21,1.01,1,1,2)
D AGME101^DGMTSCU4(DA)
"^DD",408.21,408.21,1.01,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,1.01,1,1,"%D",0)
^.101^2^2^3050310^^^
"^DD",408.21,408.21,1.01,1,1,"%D",1,0)
Should fire only upon an IVM upload change to this field.  Gross medical 
"^DD",408.21,408.21,1.01,1,1,"%D",2,0)
expense needs to be back-calculated when IVM changes this field.
"^DD",408.21,408.21,1.01,1,1,"DT")
3050309
"^DD",408.21,408.21,1.01,1,2,0)
408.21^AENR101^MUMPS
"^DD",408.21,408.21,1.01,1,2,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,1.01,1,2,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,1.01,1,2,3)
DO NOT DELETE
"^DD",408.21,408.21,1.01,1,2,"%D",0)
^^2^2^3050913^
"^DD",408.21,408.21,1.01,1,2,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,1.01,1,2,"%D",2,0)
enrollment.
"^DD",408.21,408.21,1.01,1,2,"DT")
3050913
"^DD",408.21,408.21,1.01,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,1.01,4)
D:$G(DGMTYPT)=3 101^EASECDD
"^DD",408.21,408.21,1.01,21,0)
^.001^13^13^3061030^^^^
"^DD",408.21,408.21,1.01,21,1,0)
Enter in this field the total amount of unreimbursed medical expenses
"^DD",408.21,408.21,1.01,21,2,0)
paid by the veteran during the previous calendar year.  The expenses
"^DD",408.21,408.21,1.01,21,3,0)
can be for the veteran or for members of the veteran's family.
"^DD",408.21,408.21,1.01,21,4,0)
Reportable medical expenses include amounts paid for the following:
"^DD",408.21,408.21,1.01,21,5,0)
fees of physicians, dentists, and other providers of health services;
"^DD",408.21,408.21,1.01,21,6,0)
hospital and nursing home fees; medical insurance premiums (including
"^DD",408.21,408.21,1.01,21,7,0)
the Medicare premium); drugs and medicines; eyeglasses; any other
"^DD",408.21,408.21,1.01,21,8,0)
expenses that are reasonable related to medical care.  The expenses
"^DD",408.21,408.21,1.01,21,9,0)
must actually have been paid by the veteran.  Do not list expenses
"^DD",408.21,408.21,1.01,21,10,0)
which have not been paid or which have been paid by someone other
"^DD",408.21,408.21,1.01,21,11,0)
than the veteran.  Do not list expenses which the veteran has paid if
"^DD",408.21,408.21,1.01,21,12,0)
the veteran expects to receive reimbursement from insurance or some
"^DD",408.21,408.21,1.01,21,13,0)
other source.
"^DD",408.21,408.21,1.01,23,0)
^^11^11^3061030^
"^DD",408.21,408.21,1.01,23,1,0)
As of patch DG*5.3*624, this field should not be edited directly.  This
"^DD",408.21,408.21,1.01,23,2,0)
field is now derived based upon the value entered in field 1.12 and the
"^DD",408.21,408.21,1.01,23,3,0)
number of dependents active for the test.  An IVM upload is the only 
"^DD",408.21,408.21,1.01,23,4,0)
exception.  When this happens, field 1.12 will be back-calculated based 
"^DD",408.21,408.21,1.01,23,5,0)
on the value IVM places here.
"^DD",408.21,408.21,1.01,23,6,0)
 
"^DD",408.21,408.21,1.01,23,7,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays on
"^DD",408.21,408.21,1.01,23,8,0)
screen as 'Adjusted Medical Expenses'.
"^DD",408.21,408.21,1.01,23,9,0)
 
"^DD",408.21,408.21,1.01,23,10,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field also displays on
"^DD",408.21,408.21,1.01,23,11,0)
screen as 'Adjusted Medical Expenses'.
"^DD",408.21,408.21,1.01,"DT")
3060712
"^DD",408.21,408.21,1.02,0)
FUNERAL AND BURIAL EXPENSES^NJ8,2X^^1;2^S:X["$" X=$P(X,"$",2) X:X["*" "S X=X*12 D EN^DDIOL(""  ""_X,"""",""?0"")" K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",408.21,408.21,1.02,1,0)
^.1
"^DD",408.21,408.21,1.02,1,1,0)
408.21^AENR102^MUMPS
"^DD",408.21,408.21,1.02,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,1.02,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,1.02,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,1.02,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,1.02,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,1.02,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,1.02,1,1,"DT")
3050913
"^DD",408.21,408.21,1.02,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,1.02,4)
D:$G(DGMTYPT)=3 102^EASECDD D:$G(DGMTYPT)'=3 102^DGMTDD4
"^DD",408.21,408.21,1.02,23,0)
^^12^12^3061030^
"^DD",408.21,408.21,1.02,23,1,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays on
"^DD",408.21,408.21,1.02,23,2,0)
screen as 'Funeral and Burial Expenses'.  It contains amounts paid by the
"^DD",408.21,408.21,1.02,23,3,0)
veteran during the previous calendar year for funeral or burial expenses
"^DD",408.21,408.21,1.02,23,4,0)
of the veteran's spouse or child.  It requires a spouse or dependent child
"^DD",408.21,408.21,1.02,23,5,0)
for entry/edit.
"^DD",408.21,408.21,1.02,23,6,0)
 
"^DD",408.21,408.21,1.02,23,7,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field also displays on
"^DD",408.21,408.21,1.02,23,8,0)
screen as 'Funeral and Burial Expenses'.  It contains amounts paid by the
"^DD",408.21,408.21,1.02,23,9,0)
veteran during the previous calendar year for funeral or burial expenses
"^DD",408.21,408.21,1.02,23,10,0)
of the veteran's spouse or child.  It contains prepaid expenses incurred
"^DD",408.21,408.21,1.02,23,11,0)
by the veteran.  It does not require a spouse or dependent child for
"^DD",408.21,408.21,1.02,23,12,0)
entry/edit.
"^DD",408.21,408.21,1.02,"DT")
3071002
"^DD",408.21,408.21,1.12,0)
GROSS MEDICAL EXPENSES^NJ10,2X^^1;12^S:X["$" X=$P(X,"$",2) X:X["*" "S X=X*12 D EN^DDIOL(""  ""_X,"""",""?0"")" K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",408.21,408.21,1.12,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,1.12,4)
D:$G(DGMTYPT)'=3 112^DGMTDD4
"^DD",408.21,408.21,1.12,23,0)
^.001^10^10^3070918^^
"^DD",408.21,408.21,1.12,23,1,0)
Enter the total amount of unreimbursed medical expenses
"^DD",408.21,408.21,1.12,23,2,0)
paid by the veteran during the previous calendar year.
"^DD",408.21,408.21,1.12,23,3,0)
The expenses can be for the veteran or for persons that
"^DD",408.21,408.21,1.12,23,4,0)
the veteran has a legal or moral obligation to support.
"^DD",408.21,408.21,1.12,23,5,0)
 
"^DD",408.21,408.21,1.12,23,6,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field
"^DD",408.21,408.21,1.12,23,7,0)
displays on screen as 'Gross Medical Expenses'.
"^DD",408.21,408.21,1.12,23,8,0)
 
"^DD",408.21,408.21,1.12,23,9,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field displays
"^DD",408.21,408.21,1.12,23,10,0)
on screen as 'Total Non-Reimbursed Medical Expenses'.
"^DD",408.21,408.21,1.12,"DT")
3050222
"^DD",408.21,408.21,2.01,0)
CASH, AMOUNTS IN BANK ACCOUNTS^NJ9,2X^^2;1^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999)!(X<0) X D NET^DGMTDD3:$D(X)
"^DD",408.21,408.21,2.01,.1)
CASH, AMOUNTS IN BANK ACCOUNTS (INCLUDE IRA'S)
"^DD",408.21,408.21,2.01,1,0)
^.1
"^DD",408.21,408.21,2.01,1,1,0)
408.21^AENR201^MUMPS
"^DD",408.21,408.21,2.01,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,2.01,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,2.01,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,2.01,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,2.01,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,2.01,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,2.01,1,1,"DT")
3050913
"^DD",408.21,408.21,2.01,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,2.01,4)
D:$G(DGMTYPT)=3 201^EASECDD D:$G(DGMTYPT)'=3 201^DGMTDD5
"^DD",408.21,408.21,2.01,23,0)
^^12^12^3061030^
"^DD",408.21,408.21,2.01,23,1,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays on
"^DD",408.21,408.21,2.01,23,2,0)
screen as 'Cash, Amts in Bank Accts'.  It contains amounts from checking
"^DD",408.21,408.21,2.01,23,3,0)
accounts, savings accounts, certificates of deposit, and IRAs.  It does
"^DD",408.21,408.21,2.01,23,4,0)
not include stocks and bonds. When the .02 PATIENT RELATION indicates
"^DD",408.21,408.21,2.01,23,5,0)
"V"eteran, this field may include cash amounts from the veteran plus all
"^DD",408.21,408.21,2.01,23,6,0)
dependent children.
"^DD",408.21,408.21,2.01,23,7,0)
 
"^DD",408.21,408.21,2.01,23,8,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field displays on screen
"^DD",408.21,408.21,2.01,23,9,0)
as 'Cash, Amts in Bank Accts (CDs, IRAs, Stocks, Bonds)'. It contains
"^DD",408.21,408.21,2.01,23,10,0)
amounts from checking accounts, savings accounts, certificates of deposit,
"^DD",408.21,408.21,2.01,23,11,0)
IRAs, and stocks and bonds.  When the .02 PATIENT RELATION indicates
"^DD",408.21,408.21,2.01,23,12,0)
"V"eteran, this field will contain cash amounts from the veteran only.
"^DD",408.21,408.21,2.01,"DT")
3060712
"^DD",408.21,408.21,2.02,0)
STOCKS AND BONDS^NJ9,2X^^2;2^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999)!(X<0) X D NET^DGMTDD3:$D(X)
"^DD",408.21,408.21,2.02,1,0)
^.1
"^DD",408.21,408.21,2.02,1,1,0)
408.21^AENR202^MUMPS
"^DD",408.21,408.21,2.02,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,2.02,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,2.02,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,2.02,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,2.02,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,2.02,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,2.02,1,1,"DT")
3050913
"^DD",408.21,408.21,2.02,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,2.02,4)
D:$G(DGMTYPT)=3 202^EASECDD
"^DD",408.21,408.21,2.02,21,0)
^.001^3^3^3061030^^^^
"^DD",408.21,408.21,2.02,21,1,0)
Enter in this field stocks, bonds, and similar assets.  The reportable
"^DD",408.21,408.21,2.02,21,2,0)
value of the stock or bond is the amount of money that the asset
"^DD",408.21,408.21,2.02,21,3,0)
would bring if it were cashed out today.
"^DD",408.21,408.21,2.02,23,0)
^.001^7^7^3061030^^
"^DD",408.21,408.21,2.02,23,1,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays on
"^DD",408.21,408.21,2.02,23,2,0)
screen as 'Stocks and Bonds'.  It contains amounts from stocks, bonds, and
"^DD",408.21,408.21,2.02,23,3,0)
similar assets.  When the .02 PATIENT RELATION indicates "V"eteran, this
"^DD",408.21,408.21,2.02,23,4,0)
field may include amounts from the veteran plus all dependent children.
"^DD",408.21,408.21,2.02,23,5,0)
 
"^DD",408.21,408.21,2.02,23,6,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field does not display on
"^DD",408.21,408.21,2.02,23,7,0)
screen.  It should contain Null.
"^DD",408.21,408.21,2.02,"DT")
3060712
"^DD",408.21,408.21,2.03,0)
REAL PROPERTY^NJ9,2X^^2;3^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999)!(X<0) X D NET^DGMTDD3:$D(X)
"^DD",408.21,408.21,2.03,.1)
REAL PROPERTY (NOT INCLUDING PRIMARY RESIDENCE)
"^DD",408.21,408.21,2.03,1,0)
^.1
"^DD",408.21,408.21,2.03,1,1,0)
408.21^AENR203^MUMPS
"^DD",408.21,408.21,2.03,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,2.03,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,2.03,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,2.03,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,2.03,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,2.03,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,2.03,1,1,"DT")
3050913
"^DD",408.21,408.21,2.03,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,2.03,4)
D:$G(DGMTYPT)'=3 203^DGMTDD5
"^DD",408.21,408.21,2.03,23,0)
^^12^12^3061030^
"^DD",408.21,408.21,2.03,23,1,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays on
"^DD",408.21,408.21,2.03,23,2,0)
screen as 'Real Property'.  It contains amounts from any real property
"^DD",408.21,408.21,2.03,23,3,0)
owned minus the amount owed.  It does not include the value of the
"^DD",408.21,408.21,2.03,23,4,0)
veteran's primary residence.  When the .02 PATIENT RELATION indicates
"^DD",408.21,408.21,2.03,23,5,0)
"V"eteran, this field may include amounts from the veteran plus all
"^DD",408.21,408.21,2.03,23,6,0)
dependent children.
"^DD",408.21,408.21,2.03,23,7,0)
 
"^DD",408.21,408.21,2.03,23,8,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field displays on screen
"^DD",408.21,408.21,2.03,23,9,0)
as 'Land/Bldgs Less Mortgage, Liens'.  It contains amounts from any real
"^DD",408.21,408.21,2.03,23,10,0)
property owned minus the amount owed.  It does not include the value of
"^DD",408.21,408.21,2.03,23,11,0)
the veteran's primary residence.  When the .02 PATIENT RELATION indicates
"^DD",408.21,408.21,2.03,23,12,0)
"V"eteran, this field will contain amounts from the veteran only.
"^DD",408.21,408.21,2.03,"DT")
3060712
"^DD",408.21,408.21,2.04,0)
OTHER PROPERTY OR ASSETS^NJ9,2X^^2;4^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999)!(X<0) X D NET^DGMTDD3:$D(X)
"^DD",408.21,408.21,2.04,.1)
OTHER PROPERTY NOT SHOWN ELSEWHERE
"^DD",408.21,408.21,2.04,1,0)
^.1
"^DD",408.21,408.21,2.04,1,1,0)
408.21^AIX204^MUMPS
"^DD",408.21,408.21,2.04,1,1,1)
I $D(^DGMT(408.21,DA,2)),$P(^(2),U,4)=0 D OTH^DGMTDD3
"^DD",408.21,408.21,2.04,1,1,2)
I $D(^DGMT(408.21,DA,2)),$P(^(2),U,4)="" D OTH^DGMTDD3
"^DD",408.21,408.21,2.04,1,1,"DT")
2920325
"^DD",408.21,408.21,2.04,1,2,0)
408.21^AENR204^MUMPS
"^DD",408.21,408.21,2.04,1,2,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,2.04,1,2,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,2.04,1,2,3)
 DO NOT DELETE
"^DD",408.21,408.21,2.04,1,2,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,2.04,1,2,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,2.04,1,2,"%D",2,0)
enrollment.
"^DD",408.21,408.21,2.04,1,2,"DT")
3050913
"^DD",408.21,408.21,2.04,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,2.04,4)
D:$G(DGMTYPT)'=3 204^DGMTDD5
"^DD",408.21,408.21,2.04,23,0)
^^11^11^3061030^
"^DD",408.21,408.21,2.04,23,1,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays on
"^DD",408.21,408.21,2.04,23,2,0)
screen as 'Other Property or Assets'.  It contains amounts from any other
"^DD",408.21,408.21,2.04,23,3,0)
property or assets owned.  When the .02 PATIENT RELATION indicates
"^DD",408.21,408.21,2.04,23,4,0)
"V"eteran, this field may include amounts from the veteran plus all
"^DD",408.21,408.21,2.04,23,5,0)
dependent children.
"^DD",408.21,408.21,2.04,23,6,0)
 
"^DD",408.21,408.21,2.04,23,7,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field displays on screen
"^DD",408.21,408.21,2.04,23,8,0)
as 'Other Prop (Farm, Bus.) Or Assets (Art, Collectibles) Less Amt
"^DD",408.21,408.21,2.04,23,9,0)
Owed'.  It contains amounts from any other property or assets owned minus
"^DD",408.21,408.21,2.04,23,10,0)
the amount owed.  When the .02 PATIENT RELATION indicates "V"eteran, this
"^DD",408.21,408.21,2.04,23,11,0)
field will contain amounts from the veteran only.
"^DD",408.21,408.21,2.04,"DT")
3060712
"^DD",408.21,408.21,2.05,0)
DEBTS^NJ9,2X^^2;5^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999)!(X<0) X D DEB^DGMTDD3:$D(X)
"^DD",408.21,408.21,2.05,1,0)
^.1
"^DD",408.21,408.21,2.05,1,1,0)
408.21^AENR205^MUMPS
"^DD",408.21,408.21,2.05,1,1,1)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,2.05,1,1,2)
D E40821^DGRTRIG(DA)
"^DD",408.21,408.21,2.05,1,1,3)
 DO NOT DELETE
"^DD",408.21,408.21,2.05,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.21,408.21,2.05,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.21,408.21,2.05,1,1,"%D",2,0)
enrollment.
"^DD",408.21,408.21,2.05,1,1,"DT")
3050913
"^DD",408.21,408.21,2.05,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",408.21,408.21,2.05,21,0)
^.001^3^3^3061030^^^^
"^DD",408.21,408.21,2.05,21,1,0)
Enter in this field debts that will reduce the value of the property
"^DD",408.21,408.21,2.05,21,2,0)
listed in 'OTHER PROPERTY OR ASSETS'.  It cannot exceed the 'OTHER
"^DD",408.21,408.21,2.05,21,3,0)
PROPERTY OR ASSETS'.  DO NOT ENTER ANY CREDIT CARD DEBTS.
"^DD",408.21,408.21,2.05,23,0)
^.001^8^8^3061030^^
"^DD",408.21,408.21,2.05,23,1,0)
When 408.31/2.11 MEANS TEST VERSION is Null or '0', this field displays on
"^DD",408.21,408.21,2.05,23,2,0)
screen as 'Debts'.  It contains amounts from debts which would reduce the
"^DD",408.21,408.21,2.05,23,3,0)
value of the other property or assets. It does not include credit card
"^DD",408.21,408.21,2.05,23,4,0)
debt.  When the .02 PATIENT RELATION indicates "V"eteran, this field may
"^DD",408.21,408.21,2.05,23,5,0)
include amounts from the veteran plus all dependent children.
"^DD",408.21,408.21,2.05,23,6,0)
 
"^DD",408.21,408.21,2.05,23,7,0)
When 408.31/2.11 MEANS TEST VERSION is '1', this field does not display on
"^DD",408.21,408.21,2.05,23,8,0)
screen.  It should contain Null.
"^DD",408.21,408.21,2.05,"DT")
3060712
"^DD",408.22,408.22,.11,0)
CHILD HAD INCOME^SX^1:YES;0:NO;^0;11^Q
"^DD",408.22,408.22,.11,.1)
DID CHILD HAVE ANY INCOME
"^DD",408.22,408.22,.11,1,0)
^.1
"^DD",408.22,408.22,.11,1,1,0)
^^TRIGGER^408.22^.12
"^DD",408.22,408.22,.11,1,1,1)
X ^DD(408.22,.11,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DGMT(408.22,D0,0)):^(0),1:"") S X=$P(Y(1),U,12),X=X S DIU=X K Y S X="" S DIH=$G(^DGMT(408.22,DIV(0),0)),DIV=X S $P(^(0),U,12)=DIV,DIH=408.22,DIG=.12 D ^DICR
"^DD",408.22,408.22,.11,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(408.22,.11,0)),U,3) S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59))="NO"
"^DD",408.22,408.22,.11,1,1,2)
X ^DD(408.22,.11,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^DGMT(408.22,D0,0)):^(0),1:"") S X=$P(Y(1),U,12),X=X S DIU=X K Y S X="" S DIH=$G(^DGMT(408.22,DIV(0),0)),DIV=X S $P(^(0),U,12)=DIV,DIH=408.22,DIG=.12 D ^DICR
"^DD",408.22,408.22,.11,1,1,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(2)=$C(59)_$P($G(^DD(408.22,.11,0)),U,3),Y(1)=$S($D(^DGMT(408.22,D0,0)):^(0),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,11)_":",2),$C(59))=""
"^DD",408.22,408.22,.11,1,1,"%D",0)
^.101^3^3^3080422^^
"^DD",408.22,408.22,.11,1,1,"%D",1,0)
This triggered cross-reference will update the 'Income Available to You' 
"^DD",408.22,408.22,.11,1,1,"%D",2,0)
field (#.12).  If the  patient has a dependent child whose income is not 
"^DD",408.22,408.22,.11,1,1,"%D",3,0)
available to him or her, the 'Income Avaliable to You' field is deleted.
"^DD",408.22,408.22,.11,1,1,"CREATE CONDITION")
#.11="NO"
"^DD",408.22,408.22,.11,1,1,"CREATE VALUE")
@
"^DD",408.22,408.22,.11,1,1,"DELETE CONDITION")
#.11=""
"^DD",408.22,408.22,.11,1,1,"DELETE VALUE")
@
"^DD",408.22,408.22,.11,1,1,"DT")
3080422
"^DD",408.22,408.22,.11,1,1,"FIELD")
#.12
"^DD",408.22,408.22,.11,1,2,0)
408.22^AIX11^MUMPS
"^DD",408.22,408.22,.11,1,2,1)
I $D(^DGMT(408.22,DA,0)),$P(^(0),U,11)=0 D INC^DGMTDD2
"^DD",408.22,408.22,.11,1,2,2)
I $D(^DGMT(408.22,DA,0)),$P(^(0),U,11)="" D INC^DGMTDD2
"^DD",408.22,408.22,.11,1,2,"%D",0)
^^3^3^2920402^^^^
"^DD",408.22,408.22,.11,1,2,"%D",1,0)
This mumps cross-reference works like a "trigger" cross-reference.
"^DD",408.22,408.22,.11,1,2,"%D",2,0)
If the patient had a child with no income, any corresponding income
"^DD",408.22,408.22,.11,1,2,"%D",3,0)
or educational expenses on file for the year are deleted.
"^DD",408.22,408.22,.11,1,2,"DT")
2920323
"^DD",408.22,408.22,.11,1,3,0)
408.22^AENR11^MUMPS
"^DD",408.22,408.22,.11,1,3,1)
D E40822^DGRTRIG(DA)
"^DD",408.22,408.22,.11,1,3,2)
D E40822^DGRTRIG(DA)
"^DD",408.22,408.22,.11,1,3,3)
 DO NOT DELETE
"^DD",408.22,408.22,.11,1,3,"%D",0)
^.101^2^2^3050913^^^^
"^DD",408.22,408.22,.11,1,3,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.22,408.22,.11,1,3,"%D",2,0)
enrollment.
"^DD",408.22,408.22,.11,1,3,"DT")
3050913
"^DD",408.22,408.22,.11,3)

"^DD",408.22,408.22,.11,4)
D CHLDINNW^DGMTHLP
"^DD",408.22,408.22,.11,"DT")
3080422
"^DD",408.22,408.22,.12,0)
INCOME AVAILABLE TO YOU^SX^1:YES;0:NO;^0;12^D AVL^DGMTDD2
"^DD",408.22,408.22,.12,.1)
WAS THE CHILD'S INCOME AVAILABLE TO YOU
"^DD",408.22,408.22,.12,1,0)
^.1
"^DD",408.22,408.22,.12,1,1,0)
408.22^AIX12^MUMPS
"^DD",408.22,408.22,.12,1,1,1)
I $D(^DGMT(408.22,DA,0)),$P(^(0),U,12)=0,$P(^(0),U,11) D INC^DGMTDD2
"^DD",408.22,408.22,.12,1,1,2)
I $D(^DGMT(408.22,DA,0)),$P(^(0),U,12)="",$P(^(0),U,11) D INC^DGMTDD2
"^DD",408.22,408.22,.12,1,1,"%D",0)
^.101^4^4^3080421^^^^
"^DD",408.22,408.22,.12,1,1,"%D",1,0)
This mumps cross-reference works like a "trigger" cross-reference.
"^DD",408.22,408.22,.12,1,1,"%D",2,0)
If the patient had a child whose income was not available to him or her,
"^DD",408.22,408.22,.12,1,1,"%D",3,0)
any corresponding income or educational expenses on file for the year
"^DD",408.22,408.22,.12,1,1,"%D",4,0)
are deleted.
"^DD",408.22,408.22,.12,1,1,"DT")
2920323
"^DD",408.22,408.22,.12,1,2,0)
408.22^AENR12^MUMPS
"^DD",408.22,408.22,.12,1,2,1)
D E40822^DGRTRIG(DA)
"^DD",408.22,408.22,.12,1,2,2)
D E40822^DGRTRIG(DA)
"^DD",408.22,408.22,.12,1,2,3)
 DO NOT DELETE
"^DD",408.22,408.22,.12,1,2,"%D",0)
^.101^2^2^3080421^^^^
"^DD",408.22,408.22,.12,1,2,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",408.22,408.22,.12,1,2,"%D",2,0)
enrollment.
"^DD",408.22,408.22,.12,1,2,"DT")
3050913
"^DD",408.22,408.22,.12,3)

"^DD",408.22,408.22,.12,4)
D INNWAVAL^DGMTHLP
"^DD",408.22,408.22,.12,5,1,0)
408.22^.11^1
"^DD",408.22,408.22,.12,"DT")
3050913
"^DD",408.31,408.31,.04,0)
INCOME^NJ13,2^^0;4^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999999)!(X<0) X
"^DD",408.31,408.31,.04,3)
Type a Dollar Amount between 0 and 9999999999, 2 Decimal Digits
"^DD",408.31,408.31,.04,21,0)
^.001^18^18^3061030^^^^
"^DD",408.31,408.31,.04,21,1,0)
This field is computed by the system.  It is a summation of each
"^DD",408.31,408.31,.04,21,2,0)
applicable family member's income in the Individual Annual Income
"^DD",408.31,408.31,.04,21,3,0)
file (#408.21) for the previous calendar year from date of test.
"^DD",408.31,408.31,.04,21,4,0)
 
"^DD",408.31,408.31,.04,21,5,0)
If the veteran is married, the spouse's income will only be
"^DD",408.31,408.31,.04,21,6,0)
collected and subsequently included in the test under
"^DD",408.31,408.31,.04,21,7,0)
certain conditions.  The veteran and spouse must either live
"^DD",408.31,408.31,.04,21,8,0)
together or if they do not live together, the veteran must
"^DD",408.31,408.31,.04,21,9,0)
have contributed at least $600 to the spouse's support during
"^DD",408.31,408.31,.04,21,10,0)
the previous calendar year.
"^DD",408.31,408.31,.04,21,11,0)
 
"^DD",408.31,408.31,.04,21,12,0)
If the veteran has dependent children, the children's income will
"^DD",408.31,408.31,.04,21,13,0)
only be collected and subsequently included in the test under
"^DD",408.31,408.31,.04,21,14,0)
certain conditions.  Only children who have income and whose income
"^DD",408.31,408.31,.04,21,15,0)
is available to the veteran need to provide income information.
"^DD",408.31,408.31,.04,21,16,0)
 
"^DD",408.31,408.31,.04,21,17,0)
For means test, it is this cumulative family income which is used to derive 
"^DD",408.31,408.31,.04,21,18,0)
the means test threshold(s), status and subsequent category of care.
"^DD",408.31,408.31,.04,23,0)
^.001^16^16^3061030^^
"^DD",408.31,408.31,.04,23,1,0)
When 2.11 MEANS TEST VERSION is Null or '0', the summation of each
"^DD",408.31,408.31,.04,23,2,0)
applicable family member's income in the Individual Annual Income
"^DD",408.31,408.31,.04,23,3,0)
file (#408.21) for the previous calendar year will be performed
"^DD",408.31,408.31,.04,23,4,0)
on income dollar amounts collected in the pre-Feb 2005 10-10EZ
"^DD",408.31,408.31,.04,23,5,0)
format.  All income fields for veteran, spouse, and dependent
"^DD",408.31,408.31,.04,23,6,0)
child(ren) from the Individual Annual Income file (#408.21) may
"^DD",408.31,408.31,.04,23,7,0)
have values.
"^DD",408.31,408.31,.04,23,8,0)
 
"^DD",408.31,408.31,.04,23,9,0)
When 2.11 MEANS TEST VERSION is '1', the summation of each
"^DD",408.31,408.31,.04,23,10,0)
applicable family member's income in the Individual Annual Income
"^DD",408.31,408.31,.04,23,11,0)
file (#408.21) for the previous calendar year will be performed
"^DD",408.31,408.31,.04,23,12,0)
on income dollar amounts collected in the Feb 2005 10-10EZ format.
"^DD",408.31,408.31,.04,23,13,0)
Only income fields .08-SOCIAL SECURITY(NOT SSI), .14-TOTAL
"^DD",408.31,408.31,.04,23,14,0)
EMPLOYMENT INCOME, and .17-ALL OTHER INCOME for veteran, spouse,
"^DD",408.31,408.31,.04,23,15,0)
and dependent child(ren) from the Individual Annual Income file
"^DD",408.31,408.31,.04,23,16,0)
(#408.21) will have values.
"^DD",408.31,408.31,.04,"DT")
2941206
"^DD",408.31,408.31,.05,0)
NET WORTH^NJ12,2^^0;5^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>999999999)!(X<0) X
"^DD",408.31,408.31,.05,3)
Type a Dollar Amount between 0 and 999999999, 2 Decimal Digits
"^DD",408.31,408.31,.05,21,0)
^.001^17^17^3061030^^
"^DD",408.31,408.31,.05,21,1,0)
This field is computed by the system.  Is a summation of the veteran,
"^DD",408.31,408.31,.05,21,2,0)
spouse (if applicable), and dependent child(ren) if applicable net
"^DD",408.31,408.31,.05,21,3,0)
worth, minus any debts in the Individual Annual Income file (#408.21)
"^DD",408.31,408.31,.05,21,4,0)
for the previous calendar year from date of test.
"^DD",408.31,408.31,.05,21,5,0)
 
"^DD",408.31,408.31,.05,21,6,0)
If the veteran is married, the spouse's net worth will only be collected
"^DD",408.31,408.31,.05,21,7,0)
and subsequently included in the means test under certain conditions.
"^DD",408.31,408.31,.05,21,8,0)
The veteran and spouse must either live together or if they do not live
"^DD",408.31,408.31,.05,21,9,0)
together, the veteran must have contributed at least $600 to the spouse's
"^DD",408.31,408.31,.05,21,10,0)
support during the previous calendar year.
"^DD",408.31,408.31,.05,21,11,0)
 
"^DD",408.31,408.31,.05,21,12,0)
When determining the means test status and subsequent category of care,
"^DD",408.31,408.31,.05,21,13,0)
the system will require net worth be entered for those veterans who
"^DD",408.31,408.31,.05,21,14,0)
require mandatory care.
"^DD",408.31,408.31,.05,21,15,0)
 
"^DD",408.31,408.31,.05,21,16,0)
If the income plus net worth exceed the annual property threshold, the
"^DD",408.31,408.31,.05,21,17,0)
case can be sent to adjudication for the test.
"^DD",408.31,408.31,.05,23,0)
^.001^20^20^3061030^^^^
"^DD",408.31,408.31,.05,23,1,0)
When 2.11 MEANS TEST VERSION is Null or '0', the summation of each
"^DD",408.31,408.31,.05,23,2,0)
applicable family member's net worth in the Individual Annual Income
"^DD",408.31,408.31,.05,23,3,0)
file (#408.21) will be performed on net worth dollar amounts
"^DD",408.31,408.31,.05,23,4,0)
collected in the pre-Feb 2005 10-10EZ format.  All veteran and spouse
"^DD",408.31,408.31,.05,23,5,0)
fields from the Individual Annual Income file (#408.21) may have
"^DD",408.31,408.31,.05,23,6,0)
values.  In the pre-Feb 2005 format, dependent child(ren) net worth
"^DD",408.31,408.31,.05,23,7,0)
amount(s) are not collected from the VistA screens and are not
"^DD",408.31,408.31,.05,23,8,0)
stored in Individual Annual Income file (#408.21).
"^DD",408.31,408.31,.05,23,9,0)
 
"^DD",408.31,408.31,.05,23,10,0)
When 2.11 MEANS TEST VERSION is '1', the summation of each
"^DD",408.31,408.31,.05,23,11,0)
applicable family member's net worth in the Individual Annual Income
"^DD",408.31,408.31,.05,23,12,0)
file (#408.21) will be performed on net worth dollar amounts
"^DD",408.31,408.31,.05,23,13,0)
collected in the Feb 2005 10-10EZ format.  In the Feb 2005 format,
"^DD",408.31,408.31,.05,23,14,0)
dependent child(ren) net worth amount(s) are collected from the
"^DD",408.31,408.31,.05,23,15,0)
VistA screens and are stored in Individual Annual Income file
"^DD",408.31,408.31,.05,23,16,0)
(#408.21).
"^DD",408.31,408.31,.05,23,17,0)
 
"^DD",408.31,408.31,.05,23,18,0)
Only net worth fields 2.01-CASH AMOUNTS IN BANK ACCOUNTS, 2.03-REAL
"^DD",408.31,408.31,.05,23,19,0)
PROPERTY, and 2.04-OTHER PROPERTY OR ASSETS from the Individual
"^DD",408.31,408.31,.05,23,20,0)
Annual Income file (#408.21) will have values.
"^DD",408.31,408.31,.05,"DT")
2941206
"^DD",408.31,408.31,2.11,0)
MEANS TEST VERSION^S^0:Before Feb 2005 Format;1:Feb 2005;^2;11^Q
"^DD",408.31,408.31,2.11,.1)
Means Test Version Indicator
"^DD",408.31,408.31,2.11,3)
Enter 0 if Income was collected prior to Feb, 2005; 1 if collected in or after Feb. 2005.
"^DD",408.31,408.31,2.11,21,0)
^.001^7^7^3060526^^^^
"^DD",408.31,408.31,2.11,21,1,0)
Prior to February 2005, dependent income data was not separated out of 
"^DD",408.31,408.31,2.11,21,2,0)
the data entered for the patient.  Previous to February 2005, dependent 
"^DD",408.31,408.31,2.11,21,3,0)
data was added to patient income figures and stored with that patient's 
"^DD",408.31,408.31,2.11,21,4,0)
respective record.  Subsequent to February 2005, Means Test was designed 
"^DD",408.31,408.31,2.11,21,5,0)
so that dependent income data would not be included with patient income 
"^DD",408.31,408.31,2.11,21,6,0)
data but instead be stored with the respective dependent Means Test 
"^DD",408.31,408.31,2.11,21,7,0)
records.
"^DD",408.31,408.31,2.11,23,0)
^.001^22^22^3060526^^^
"^DD",408.31,408.31,2.11,23,1,0)
Set of Codes field that indicates the storage design of dependent data as 
"^DD",408.31,408.31,2.11,23,2,0)
follows:  
"^DD",408.31,408.31,2.11,23,3,0)
                    0 : Prior to February, 2005 collection form 
"^DD",408.31,408.31,2.11,23,4,0)
                    1 : February, 2005 subsequent collection form 
"^DD",408.31,408.31,2.11,23,5,0)
                   
"^DD",408.31,408.31,2.11,23,6,0)
Prior to February 2005, dependent income information was collected and 
"^DD",408.31,408.31,2.11,23,7,0)
stored in the respective fields of the INDIVIDUAL ANNUAL INCOME file 
"^DD",408.31,408.31,2.11,23,8,0)
(#408.21) in addition to and with the Patient's record.  Subsequent to 
"^DD",408.31,408.31,2.11,23,9,0)
February 2005, dependent income information was designed and implemented 
"^DD",408.31,408.31,2.11,23,10,0)
so that it is stored in the respective fields of the dependent's entry in 
"^DD",408.31,408.31,2.11,23,11,0)
the INDIVIDUAL ANNUAL INCOME file (#408.21). 
"^DD",408.31,408.31,2.11,23,12,0)
For example: 
"^DD",408.31,408.31,2.11,23,13,0)
  Version 0 INDIVIDUAL ANNUAL INCOME file entry of 
"^DD",408.31,408.31,2.11,23,14,0)
    (#2.01) CASH, AMOUNTS IN BANK ACCOUNTS for patient equals 
"^DD",408.31,408.31,2.11,23,15,0)
                                     Patient + Dependent amounts 
"^DD",408.31,408.31,2.11,23,16,0)
 
"^DD",408.31,408.31,2.11,23,17,0)
  Version 1 INDIVIDUAL ANNUAL INCOME file entry of 
"^DD",408.31,408.31,2.11,23,18,0)
    (#2.01) CASH, AMOUNTS IN BANK ACCOUNTS for patient equals 
"^DD",408.31,408.31,2.11,23,19,0)
                                     Patient amount 
"^DD",408.31,408.31,2.11,23,20,0)
 
"^DD",408.31,408.31,2.11,23,21,0)
    (#2.01) CASH, AMOUNTS IN BANK ACCOUNTS for dependent(s) equals 
"^DD",408.31,408.31,2.11,23,22,0)
                                     Dependent amount(s)
"^DD",408.31,408.31,2.11,"DT")
3060210
"^DIC",301.7,301.7,0)
IVM ADDRESS CHANGE LOG^301.7
"^DIC",301.7,301.7,0,"GL")
^IVM(301.7,
"^DIC",301.7,301.7,"%",0)
^1.005^^0
"^DIC",301.7,301.7,"%D",0)
^^12^12^3050825^
"^DIC",301.7,301.7,"%D",1,0)
The IVM ADDRESS CHANGE LOG file contains the patient's prior address
"^DIC",301.7,301.7,"%D",2,0)
information when the address has been updated.
"^DIC",301.7,301.7,"%D",3,0)
 
"^DIC",301.7,301.7,"%D",4,0)
A record will be created when the address is updated from either the
"^DIC",301.7,301.7,"%D",5,0)
upload of an ORU~Z05 Demographic (Address) HL7 Transmission or from manual
"^DIC",301.7,301.7,"%D",6,0)
data entry using any of the following options:  DG ADDRESS UPDATE,
"^DIC",301.7,301.7,"%D",7,0)
DG REGISTER PATIENT, DGPRE PRE-REGISTER OPTION, and DG LOAD PATIENT DATA.
"^DIC",301.7,301.7,"%D",8,0)
 
"^DIC",301.7,301.7,"%D",9,0)
The previous address information found in the PATIENT File #2 will be
"^DIC",301.7,301.7,"%D",10,0)
stored along with the Date/Time the address was changed, the Source of the
"^DIC",301.7,301.7,"%D",11,0)
change, and User ID of the person who made the change.  In the case of an
"^DIC",301.7,301.7,"%D",12,0)
update via an ORU~Z05, the User ID will be POSTMASTER.
"^DIC",301.7,"B","IVM ADDRESS CHANGE LOG",301.7)

**INSTALL NAME**
IVM*2.0*115
"BLD",7091,0)
IVM*2.0*115^INCOME VERIFICATION MATCH^0^3090219^y
"BLD",7091,1,0)
^^2^2^3051221^^
"BLD",7091,1,1,0)
See the Patch Description for IVM*2*115 as generated out of the Forum 
"BLD",7091,1,2,0)
Patch Module.
"BLD",7091,4,0)
^9.64PA^301.7^1
"BLD",7091,4,301.7,0)
301.7
"BLD",7091,4,301.7,2,0)
^9.641^301.7^1
"BLD",7091,4,301.7,2,301.7,0)
IVM ADDRESS CHANGE LOG  (File-top level)
"BLD",7091,4,301.7,2,301.7,1,0)
^9.6411^19^5
"BLD",7091,4,301.7,2,301.7,1,15,0)
PRIOR PROVINCE
"BLD",7091,4,301.7,2,301.7,1,16,0)
PRIOR POSTAL CODE
"BLD",7091,4,301.7,2,301.7,1,17,0)
PRIOR COUNTRY
"BLD",7091,4,301.7,2,301.7,1,18,0)
PRIOR BAD ADDRESS INDICATOR
"BLD",7091,4,301.7,2,301.7,1,19,0)
PRIOR STREET ADDRESS [LINE 3]
"BLD",7091,4,301.7,222)
y^y^p^^^^n^^n
"BLD",7091,4,301.7,224)

"BLD",7091,4,"APDD",301.7,301.7)

"BLD",7091,4,"APDD",301.7,301.7,15)

"BLD",7091,4,"APDD",301.7,301.7,16)

"BLD",7091,4,"APDD",301.7,301.7,17)

"BLD",7091,4,"APDD",301.7,301.7,18)

"BLD",7091,4,"APDD",301.7,301.7,19)

"BLD",7091,4,"B",301.7,301.7)

"BLD",7091,6.3)
28
"BLD",7091,"KRN",0)
^9.67PA^8989.52^19
"BLD",7091,"KRN",.4,0)
.4
"BLD",7091,"KRN",.401,0)
.401
"BLD",7091,"KRN",.402,0)
.402
"BLD",7091,"KRN",.403,0)
.403
"BLD",7091,"KRN",.5,0)
.5
"BLD",7091,"KRN",.84,0)
.84
"BLD",7091,"KRN",3.6,0)
3.6
"BLD",7091,"KRN",3.8,0)
3.8
"BLD",7091,"KRN",9.2,0)
9.2
"BLD",7091,"KRN",9.8,0)
9.8
"BLD",7091,"KRN",9.8,"NM",0)
^9.68A^34^28
"BLD",7091,"KRN",9.8,"NM",4,0)
IVMPTRN8^^0^B54392757
"BLD",7091,"KRN",9.8,"NM",6,0)
IVMUM4^^0^B4479688
"BLD",7091,"KRN",9.8,"NM",7,0)
IVMUM6^^0^B22728422
"BLD",7091,"KRN",9.8,"NM",9,0)
IVMPTRN7^^0^B8730852
"BLD",7091,"KRN",9.8,"NM",11,0)
IVMCM^^0^B80339401
"BLD",7091,"KRN",9.8,"NM",12,0)
IVMCM2^^0^B19385978
"BLD",7091,"KRN",9.8,"NM",13,0)
IVMCM4^^0^B4317028
"BLD",7091,"KRN",9.8,"NM",14,0)
IVMCM6^^0^B76408345
"BLD",7091,"KRN",9.8,"NM",15,0)
IVMCM9^^0^B7931917
"BLD",7091,"KRN",9.8,"NM",16,0)
IVMCMC^^0^B37984998
"BLD",7091,"KRN",9.8,"NM",17,0)
IVMCMF^^0^B14332096
"BLD",7091,"KRN",9.8,"NM",18,0)
IVMCMF2^^0^B12196365
"BLD",7091,"KRN",9.8,"NM",19,0)
IVMPREC6^^0^B74089697
"BLD",7091,"KRN",9.8,"NM",20,0)
IVMPREC8^^0^B61872101
"BLD",7091,"KRN",9.8,"NM",21,0)
IVMPRECA^^0^B47594808
"BLD",7091,"KRN",9.8,"NM",22,0)
IVMPLOG^^0^B41834735
"BLD",7091,"KRN",9.8,"NM",23,0)
IVMADDRP^^0^B69858623
"BLD",7091,"KRN",9.8,"NM",24,0)
IVMLDEM6^^0^B62944324
"BLD",7091,"KRN",9.8,"NM",25,0)
IVMCM1^^0^B46763584
"BLD",7091,"KRN",9.8,"NM",26,0)
IVMPREC9^^0^B30633727
"BLD",7091,"KRN",9.8,"NM",27,0)
IVMCME^^0^B13712271
"BLD",7091,"KRN",9.8,"NM",28,0)
IVMUFNC^^0^B48337126
"BLD",7091,"KRN",9.8,"NM",29,0)
IVMPRECZ^^0^B28846671
"BLD",7091,"KRN",9.8,"NM",30,0)
IVMPREC3^^0^B20718682
"BLD",7091,"KRN",9.8,"NM",31,0)
IVMPTRN9^^0^B53274295
"BLD",7091,"KRN",9.8,"NM",32,0)
IVMZ7CS^^0^B9219399
"BLD",7091,"KRN",9.8,"NM",33,0)
IVMZ7CD^^0^B17483086
"BLD",7091,"KRN",9.8,"NM",34,0)
IVMPTRN4^^0^B15675551
"BLD",7091,"KRN",9.8,"NM","B","IVMADDRP",23)

"BLD",7091,"KRN",9.8,"NM","B","IVMCM",11)

"BLD",7091,"KRN",9.8,"NM","B","IVMCM1",25)

"BLD",7091,"KRN",9.8,"NM","B","IVMCM2",12)

"BLD",7091,"KRN",9.8,"NM","B","IVMCM4",13)

"BLD",7091,"KRN",9.8,"NM","B","IVMCM6",14)

"BLD",7091,"KRN",9.8,"NM","B","IVMCM9",15)

"BLD",7091,"KRN",9.8,"NM","B","IVMCMC",16)

"BLD",7091,"KRN",9.8,"NM","B","IVMCME",27)

"BLD",7091,"KRN",9.8,"NM","B","IVMCMF",17)

"BLD",7091,"KRN",9.8,"NM","B","IVMCMF2",18)

"BLD",7091,"KRN",9.8,"NM","B","IVMLDEM6",24)

"BLD",7091,"KRN",9.8,"NM","B","IVMPLOG",22)

"BLD",7091,"KRN",9.8,"NM","B","IVMPREC3",30)

"BLD",7091,"KRN",9.8,"NM","B","IVMPREC6",19)

"BLD",7091,"KRN",9.8,"NM","B","IVMPREC8",20)

"BLD",7091,"KRN",9.8,"NM","B","IVMPREC9",26)

"BLD",7091,"KRN",9.8,"NM","B","IVMPRECA",21)

"BLD",7091,"KRN",9.8,"NM","B","IVMPRECZ",29)

"BLD",7091,"KRN",9.8,"NM","B","IVMPTRN4",34)

"BLD",7091,"KRN",9.8,"NM","B","IVMPTRN7",9)

"BLD",7091,"KRN",9.8,"NM","B","IVMPTRN8",4)

"BLD",7091,"KRN",9.8,"NM","B","IVMPTRN9",31)

"BLD",7091,"KRN",9.8,"NM","B","IVMUFNC",28)

"BLD",7091,"KRN",9.8,"NM","B","IVMUM4",6)

"BLD",7091,"KRN",9.8,"NM","B","IVMUM6",7)

"BLD",7091,"KRN",9.8,"NM","B","IVMZ7CD",33)

"BLD",7091,"KRN",9.8,"NM","B","IVMZ7CS",32)

"BLD",7091,"KRN",19,0)
19
"BLD",7091,"KRN",19.1,0)
19.1
"BLD",7091,"KRN",101,0)
101
"BLD",7091,"KRN",409.61,0)
409.61
"BLD",7091,"KRN",771,0)
771
"BLD",7091,"KRN",870,0)
870
"BLD",7091,"KRN",8989.51,0)
8989.51
"BLD",7091,"KRN",8989.52,0)
8989.52
"BLD",7091,"KRN",8994,0)
8994
"BLD",7091,"KRN","B",.4,.4)

"BLD",7091,"KRN","B",.401,.401)

"BLD",7091,"KRN","B",.402,.402)

"BLD",7091,"KRN","B",.403,.403)

"BLD",7091,"KRN","B",.5,.5)

"BLD",7091,"KRN","B",.84,.84)

"BLD",7091,"KRN","B",3.6,3.6)

"BLD",7091,"KRN","B",3.8,3.8)

"BLD",7091,"KRN","B",9.2,9.2)

"BLD",7091,"KRN","B",9.8,9.8)

"BLD",7091,"KRN","B",19,19)

"BLD",7091,"KRN","B",19.1,19.1)

"BLD",7091,"KRN","B",101,101)

"BLD",7091,"KRN","B",409.61,409.61)

"BLD",7091,"KRN","B",771,771)

"BLD",7091,"KRN","B",870,870)

"BLD",7091,"KRN","B",8989.51,8989.51)

"BLD",7091,"KRN","B",8989.52,8989.52)

"BLD",7091,"KRN","B",8994,8994)

"BLD",7091,"QUES",0)
^9.62^^
"BLD",7091,"REQB",0)
^9.611^20^17
"BLD",7091,"REQB",2,0)
IVM*2.0*84^2
"BLD",7091,"REQB",3,0)
IVM*2.0*90^2
"BLD",7091,"REQB",4,0)
IVM*2.0*102^2
"BLD",7091,"REQB",5,0)
IVM*2.0*105^2
"BLD",7091,"REQB",7,0)
IVM*2.0*106^2
"BLD",7091,"REQB",9,0)
IVM*2.0*111^2
"BLD",7091,"REQB",10,0)
IVM*2.0*124^2
"BLD",7091,"REQB",11,0)
IVM*2.0*123^2
"BLD",7091,"REQB",12,0)
IVM*2.0*71^2
"BLD",7091,"REQB",13,0)
IVM*2.0*17^2
"BLD",7091,"REQB",14,0)
IVM*2.0*58^2
"BLD",7091,"REQB",15,0)
IVM*2.0*107^2
"BLD",7091,"REQB",16,0)
IVM*2.0*68^2
"BLD",7091,"REQB",17,0)
IVM*2.0*56^2
"BLD",7091,"REQB",18,0)
IVM*2.0*86^2
"BLD",7091,"REQB",19,0)
IVM*2.0*94^2
"BLD",7091,"REQB",20,0)
IVM*2.0*132^2
"BLD",7091,"REQB","B","IVM*2.0*102",4)

"BLD",7091,"REQB","B","IVM*2.0*105",5)

"BLD",7091,"REQB","B","IVM*2.0*106",7)

"BLD",7091,"REQB","B","IVM*2.0*107",15)

"BLD",7091,"REQB","B","IVM*2.0*111",9)

"BLD",7091,"REQB","B","IVM*2.0*123",11)

"BLD",7091,"REQB","B","IVM*2.0*124",10)

"BLD",7091,"REQB","B","IVM*2.0*132",20)

"BLD",7091,"REQB","B","IVM*2.0*17",13)

"BLD",7091,"REQB","B","IVM*2.0*56",17)

"BLD",7091,"REQB","B","IVM*2.0*58",14)

"BLD",7091,"REQB","B","IVM*2.0*68",16)

"BLD",7091,"REQB","B","IVM*2.0*71",12)

"BLD",7091,"REQB","B","IVM*2.0*84",2)

"BLD",7091,"REQB","B","IVM*2.0*86",18)

"BLD",7091,"REQB","B","IVM*2.0*90",3)

"BLD",7091,"REQB","B","IVM*2.0*94",19)

"FIA",301.7)
IVM ADDRESS CHANGE LOG
"FIA",301.7,0)
^IVM(301.7,
"FIA",301.7,0,0)
301.7D
"FIA",301.7,0,1)
y^y^p^^^^n^^n
"FIA",301.7,0,10)

"FIA",301.7,0,11)

"FIA",301.7,0,"RLRO")

"FIA",301.7,0,"VR")
2.0^IVM
"FIA",301.7,301.7)
1
"FIA",301.7,301.7,15)

"FIA",301.7,301.7,16)

"FIA",301.7,301.7,17)

"FIA",301.7,301.7,18)

"FIA",301.7,301.7,19)

"MBREQ")
0
"PKG",120,-1)
1^1
"PKG",120,0)
INCOME VERIFICATION MATCH^IVM^IVM Software for interface with the IVM Center
"PKG",120,22,0)
^9.49I^1^1
"PKG",120,22,1,0)
2.0^2941021^2960823
"PKG",120,22,1,"PAH",1,0)
115^3090219^83
"PKG",120,22,1,"PAH",1,1,0)
^^2^2^3090219
"PKG",120,22,1,"PAH",1,1,1,0)
See the Patch Description for IVM*2*115 as generated out of the Forum 
"PKG",120,22,1,"PAH",1,1,2,0)
Patch Module.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
28
"RTN","IVMADDRP")
0^23^B69858623
"RTN","IVMADDRP",1,0)
IVMADDRP ;ALB/PHH,EG,ERC,BAJ,CKN - IVM ADDRESS UPLOAD LOG REPORT ; 7/11/06 4:36pm
"RTN","IVMADDRP",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**108,106,115**; 21-OCT-94;Build 28
"RTN","IVMADDRP",3,0)
 ;
"RTN","IVMADDRP",4,0)
 ; This routine list veterans who have had more than one address
"RTN","IVMADDRP",5,0)
 ; change in the past 90 days.
"RTN","IVMADDRP",6,0)
 ;
"RTN","IVMADDRP",7,0)
 N SDATE,EDATE,HDR,MSG,%ZIS,ZTRTN,ZTDESC,ZTSAVE,PAGE,ZTSK,ZTREQ,POP,X
"RTN","IVMADDRP",8,0)
 N BDT,U,DFN,SO
"RTN","IVMADDRP",9,0)
 S U="^",DFN="",SO=""
"RTN","IVMADDRP",10,0)
 S DOS=$$DOS
"RTN","IVMADDRP",11,0)
 I DOS="^" Q
"RTN","IVMADDRP",12,0)
 S X=$$ENDDATE
"RTN","IVMADDRP",13,0)
 I X="" Q
"RTN","IVMADDRP",14,0)
 S BDT=$P(X,"^",1)
"RTN","IVMADDRP",15,0)
 I DOS="D" D  I DFN="" Q
"RTN","IVMADDRP",16,0)
 . S DFN=$$GETPAT
"RTN","IVMADDRP",17,0)
 . Q
"RTN","IVMADDRP",18,0)
 I DOS="S" S SO=$$SORTORD I SO="^" Q
"RTN","IVMADDRP",19,0)
 S (SDATE,EDATE,HDR)=""
"RTN","IVMADDRP",20,0)
 S EDATE=$$FMADD^XLFDT(BDT) I EDATE="" Q
"RTN","IVMADDRP",21,0)
 S SDATE=$$FMADD^XLFDT(EDATE,-90)
"RTN","IVMADDRP",22,0)
 ;
"RTN","IVMADDRP",23,0)
 ; Get report device. Queue report if requested
"RTN","IVMADDRP",24,0)
 S MSG(1)=""
"RTN","IVMADDRP",25,0)
 S MSG(2)="This report may take a long time to generate.  It is recommended that the report"
"RTN","IVMADDRP",26,0)
 S MSG(3)="be queued to print."
"RTN","IVMADDRP",27,0)
 S MSG(4)=""
"RTN","IVMADDRP",28,0)
 D BMES^XPDUTL(.MSG)
"RTN","IVMADDRP",29,0)
 K IOP,%ZIS
"RTN","IVMADDRP",30,0)
 S %ZIS="MQ"
"RTN","IVMADDRP",31,0)
 D ^%ZIS I POP W !!,"Report Cancelled!" Q
"RTN","IVMADDRP",32,0)
 I $D(IO("Q")) D  Q
"RTN","IVMADDRP",33,0)
 . S ZTRTN="START^IVMADDRP"
"RTN","IVMADDRP",34,0)
 . S ZTDESC="IVM Address Change Log Report"
"RTN","IVMADDRP",35,0)
 . S (ZTSAVE("PAGE"),ZTSAVE("SDATE"),ZTSAVE("EDATE"))=""
"RTN","IVMADDRP",36,0)
 . S (ZTSAVE("DOS"),ZTSAVE("DFN"),ZTSAVE("SO"))=""
"RTN","IVMADDRP",37,0)
 . D ^%ZTLOAD
"RTN","IVMADDRP",38,0)
 . W !!,"Report "_$S($D(ZTSK):"Queued!",1:"Cancelled!")
"RTN","IVMADDRP",39,0)
 . D HOME^%ZIS
"RTN","IVMADDRP",40,0)
 . Q
"RTN","IVMADDRP",41,0)
 D START,^%ZISC
"RTN","IVMADDRP",42,0)
 Q
"RTN","IVMADDRP",43,0)
DOS() ;detail or summary
"RTN","IVMADDRP",44,0)
 N DIR,Y,X
"RTN","IVMADDRP",45,0)
 S DIR(0)="SA^D:Detail;S:Summary"
"RTN","IVMADDRP",46,0)
 S DIR("A")="Select Type of Report to Run: "
"RTN","IVMADDRP",47,0)
 D ^DIR
"RTN","IVMADDRP",48,0)
 Q Y
"RTN","IVMADDRP",49,0)
 ;
"RTN","IVMADDRP",50,0)
GETPAT() ;get a patient
"RTN","IVMADDRP",51,0)
 N DIC,Y,X,U
"RTN","IVMADDRP",52,0)
 S DIC="^DPT(",DIC(0)="AEQZM" D ^DIC
"RTN","IVMADDRP",53,0)
 Q $S($P(Y,U,1)>0:$P(Y,U,1),1:"")
"RTN","IVMADDRP",54,0)
 ;
"RTN","IVMADDRP",55,0)
ENDDATE() ;get an end date, default to TODAY
"RTN","IVMADDRP",56,0)
 N DIR,Y,X
"RTN","IVMADDRP",57,0)
 S DIR(0)="D^::EX",DIR("?")="^D HELP^%DTC",DIR("B")=$$FMTE^XLFDT(DT)
"RTN","IVMADDRP",58,0)
 S DIR("A")="Enter End Date of 90 Day Window: "
"RTN","IVMADDRP",59,0)
 D ^DIR
"RTN","IVMADDRP",60,0)
 Q $S('Y:"",1:Y)
"RTN","IVMADDRP",61,0)
 ;
"RTN","IVMADDRP",62,0)
SORTORD() ;get sort order for summary
"RTN","IVMADDRP",63,0)
 N DIR,Y,X
"RTN","IVMADDRP",64,0)
 S DIR(0)="SA^S:Social Security Number;N:Name then SSN"
"RTN","IVMADDRP",65,0)
 S DIR("A")="What Order Do You Want to See Output: "
"RTN","IVMADDRP",66,0)
 D ^DIR
"RTN","IVMADDRP",67,0)
 Q Y
"RTN","IVMADDRP",68,0)
 ;
"RTN","IVMADDRP",69,0)
START ; Generate Report
"RTN","IVMADDRP",70,0)
 N CRT,X
"RTN","IVMADDRP",71,0)
 K ^XTMP("IVMADDRP",$J)
"RTN","IVMADDRP",72,0)
 S CRT=$S($E(IOST,1,2)="C-":1,1:0)
"RTN","IVMADDRP",73,0)
 S X=$$BUILD(SDATE,EDATE,DOS,DFN,SO)
"RTN","IVMADDRP",74,0)
 U IO W ! D REPORT W ! U 0
"RTN","IVMADDRP",75,0)
 K ^XTMP("IVMADDRP",$J)
"RTN","IVMADDRP",76,0)
 I $G(ZTSK) S ZTREQ="@"
"RTN","IVMADDRP",77,0)
 Q
"RTN","IVMADDRP",78,0)
BUILD(SDATE,EDATE,DOS,DFN,SO) ; Build the Report
"RTN","IVMADDRP",79,0)
 ;use C index if you are only looking for one DFN
"RTN","IVMADDRP",80,0)
 I $L(DFN) D C Q 1
"RTN","IVMADDRP",81,0)
 N CHDTTM
"RTN","IVMADDRP",82,0)
 S CHDTTM=SDATE
"RTN","IVMADDRP",83,0)
 F  S CHDTTM=$O(^IVM(301.7,"B",CHDTTM)) Q:CHDTTM=""!(CHDTTM>(EDATE+1))  D ADDIEN
"RTN","IVMADDRP",84,0)
 Q 1
"RTN","IVMADDRP",85,0)
ADDIEN ;
"RTN","IVMADDRP",86,0)
 N ADDIEN
"RTN","IVMADDRP",87,0)
 S ADDIEN=0
"RTN","IVMADDRP",88,0)
 F  S ADDIEN=$O(^IVM(301.7,"B",CHDTTM,ADDIEN)) Q:ADDIEN=""  D GETINF
"RTN","IVMADDRP",89,0)
 Q
"RTN","IVMADDRP",90,0)
C N ADDIEN,CHDTTM
"RTN","IVMADDRP",91,0)
 S ADDIEN=""
"RTN","IVMADDRP",92,0)
 F  S ADDIEN=$O(^IVM(301.7,"C",DFN,ADDIEN)) Q:ADDIEN=""  D
"RTN","IVMADDRP",93,0)
 . S CHDTTM=$P($G(^IVM(301.7,ADDIEN,0)),"^",1)
"RTN","IVMADDRP",94,0)
 . I (CHDTTM>SDATE),(CHDTTM<(EDATE+1)) D GETINF
"RTN","IVMADDRP",95,0)
 . Q
"RTN","IVMADDRP",96,0)
 Q
"RTN","IVMADDRP",97,0)
GETINF ; 
"RTN","IVMADDRP",98,0)
 N NODE0,NODE1,DFN,SSN,NAME,ADDR1,ADDR2,CITY,STATE,ZIP,SORT1,SORT2,U
"RTN","IVMADDRP",99,0)
 N SOURCE,SIEN,SITE,PROV,PCODE,COUNTRY,DGBAI,BAI,ADDR3,NODE2
"RTN","IVMADDRP",100,0)
 S U="^",SITE=""
"RTN","IVMADDRP",101,0)
 S NODE0=$G(^IVM(301.7,ADDIEN,0))
"RTN","IVMADDRP",102,0)
 S NODE1=$G(^IVM(301.7,ADDIEN,1))
"RTN","IVMADDRP",103,0)
 S NODE2=$G(^IVM(301.7,ADDIEN,2))
"RTN","IVMADDRP",104,0)
 S DFN=$P(NODE0,"^",2)
"RTN","IVMADDRP",105,0)
 Q:DFN=""
"RTN","IVMADDRP",106,0)
 Q:'$D(^DPT(DFN))
"RTN","IVMADDRP",107,0)
 S SSN=$P($G(^DPT(DFN,0)),"^",9)
"RTN","IVMADDRP",108,0)
 Q:SSN=""
"RTN","IVMADDRP",109,0)
 S NAME=$P($G(^DPT(DFN,0)),"^",1)
"RTN","IVMADDRP",110,0)
 S SOURCE=$P(NODE1,"^",4),SIEN=$P(NODE1,"^",3)
"RTN","IVMADDRP",111,0)
 I SIEN S SITE=$P($G(^DIC(4,SIEN,0)),"^",1)
"RTN","IVMADDRP",112,0)
 S ADDR1=$P(NODE1,"^",6)
"RTN","IVMADDRP",113,0)
 S ADDR2=$P(NODE1,"^",7)
"RTN","IVMADDRP",114,0)
 S ADDR3=$P(NODE2,"^",1)
"RTN","IVMADDRP",115,0)
 S CITY=$P(NODE1,"^",8)
"RTN","IVMADDRP",116,0)
 S STATE=$P(NODE1,"^",10)
"RTN","IVMADDRP",117,0)
 I STATE'="",$D(^DIC(5,STATE,0)) S STATE=$P(^DIC(5,STATE,0),"^",2)
"RTN","IVMADDRP",118,0)
 S ZIP=$P(NODE1,"^",11)
"RTN","IVMADDRP",119,0)
 S PROV=$P(NODE1,"^",12)
"RTN","IVMADDRP",120,0)
 S PCODE=$P(NODE1,"^",13)
"RTN","IVMADDRP",121,0)
 S COUNTRY=$P(NODE1,"^",14)
"RTN","IVMADDRP",122,0)
 I COUNTRY'="",$D(^HL(779.004,"B",COUNTRY,0)) S COUNTRY=$$CNTRYI^DGADDUTL(COUNTRY)
"RTN","IVMADDRP",123,0)
 I COUNTRY=-1 S COUNTRY="UNKNOWN COUNTRY"
"RTN","IVMADDRP",124,0)
 S DGBAI=$P(NODE1,"^",15)
"RTN","IVMADDRP",125,0)
 S BAI=$S(DGBAI=1:"UNDELIVERABLE",DGBAI=2:"HOMELESS",DGBAI=3:"OTHER",DGBAI=4:"ADDRESS NOT FOUND",1:"")
"RTN","IVMADDRP",126,0)
 I DOS="D" D  Q
"RTN","IVMADDRP",127,0)
 . S ^XTMP("IVMADDRP",$J,SSN,CHDTTM)=ADDIEN_"^"_DFN_"^"_NAME_"^"_ADDR1_"^"_ADDR2_"^"_CITY_"^"_STATE_"^"_ZIP_"^"_SOURCE_"^"_SITE_"^"_PROV_"^"_PCODE_"^"_COUNTRY_"^"_BAI_"^"_ADDR3
"RTN","IVMADDRP",128,0)
 . S ^XTMP("IVMADDRP",$J,SSN)=$G(^XTMP("IVMADDRP",$J,SSN))+1
"RTN","IVMADDRP",129,0)
 . Q
"RTN","IVMADDRP",130,0)
 I DOS="S" D
"RTN","IVMADDRP",131,0)
 . S SORT1=$S(SO="S":SSN,1:NAME) I NAME="" S SORT1="UNKNOWN"
"RTN","IVMADDRP",132,0)
 . S SORT2=$S(SO="S":0,1:SSN)
"RTN","IVMADDRP",133,0)
 . S ^XTMP("IVMADDRP",$J,SORT1,SORT2,"INF")=NAME_U_SSN
"RTN","IVMADDRP",134,0)
 . S ^XTMP("IVMADDRP",$J,SORT1,SORT2,"DATE",CHDTTM)=""
"RTN","IVMADDRP",135,0)
 . S ^XTMP("IVMADDRP",$J,SORT1,SORT2)=$G(^XTMP("IVMADDRP",$J,SORT1,SORT2))+1
"RTN","IVMADDRP",136,0)
 . Q
"RTN","IVMADDRP",137,0)
 Q
"RTN","IVMADDRP",138,0)
REPORT ; Display the Report
"RTN","IVMADDRP",139,0)
 D HEADER
"RTN","IVMADDRP",140,0)
 I '$D(^XTMP("IVMADDRP",$J)) D  Q
"RTN","IVMADDRP",141,0)
 . N X S X="****** NOTHING TO REPORT ******" W !?80-$L(X)\2,X,!
"RTN","IVMADDRP",142,0)
 . Q
"RTN","IVMADDRP",143,0)
 I DOS="S" D SUMMARY Q
"RTN","IVMADDRP",144,0)
 N SSN
"RTN","IVMADDRP",145,0)
 ;
"RTN","IVMADDRP",146,0)
 S SSN=""
"RTN","IVMADDRP",147,0)
 F  S SSN=$O(^XTMP("IVMADDRP",$J,SSN)) Q:SSN=""  D DETAIL
"RTN","IVMADDRP",148,0)
 Q
"RTN","IVMADDRP",149,0)
DETAIL N NAME,CHDTTM,ADDR,ADDR2,CITY,STATE,ZIP,CSZ
"RTN","IVMADDRP",150,0)
 N ADDR1,ADDR2,X,U,QUIT,CNT,SITE,SOURCE,DGCNTRY,DGFOR,ADDR3,BAI
"RTN","IVMADDRP",151,0)
 S CHDTTM="",U="^",QUIT=0,CNT=0
"RTN","IVMADDRP",152,0)
 I $G(^XTMP("IVMADDRP",$J,SSN))'>1 Q
"RTN","IVMADDRP",153,0)
 F  S CHDTTM=$O(^XTMP("IVMADDRP",$J,SSN,CHDTTM)) Q:CHDTTM=""!(QUIT)  D
"RTN","IVMADDRP",154,0)
 . S X=$G(^XTMP("IVMADDRP",$J,SSN,CHDTTM))
"RTN","IVMADDRP",155,0)
 . S NAME=$P(X,U,3)
"RTN","IVMADDRP",156,0)
 . S ADDR1=$P(X,U,4)
"RTN","IVMADDRP",157,0)
 . S ADDR2=$P(X,U,5)
"RTN","IVMADDRP",158,0)
 . S ADDR3=$P(X,U,15)
"RTN","IVMADDRP",159,0)
 . S CITY=$P(X,U,6)
"RTN","IVMADDRP",160,0)
 . S STATE=$P(X,U,7)
"RTN","IVMADDRP",161,0)
 . S ZIP=$P(X,U,8)
"RTN","IVMADDRP",162,0)
 . S SOURCE=$P(X,U,9)
"RTN","IVMADDRP",163,0)
 . S SITE=$P(X,U,10)
"RTN","IVMADDRP",164,0)
 . S PROV=$P(X,U,11)
"RTN","IVMADDRP",165,0)
 . S PCODE=$P(X,U,12)
"RTN","IVMADDRP",166,0)
 . S COUNTRY=$P(X,U,13)
"RTN","IVMADDRP",167,0)
 . S BAI=$P(X,U,14)
"RTN","IVMADDRP",168,0)
 . S DGCNTRY=$$CNTRYI^DGADDUTL(COUNTRY)
"RTN","IVMADDRP",169,0)
 . S DGFOR=$$FORIEN^DGADDUTL(COUNTRY)
"RTN","IVMADDRP",170,0)
 . I DGFOR=-1 S DGCNTRY="UNKNOWN COUNTRY" S DGFOR=1
"RTN","IVMADDRP",171,0)
 . I ($Y+6)>IOSL D HEADER I QUIT Q
"RTN","IVMADDRP",172,0)
 . W !,$$FSSN(SSN),?12,$E(NAME,1,20)
"RTN","IVMADDRP",173,0)
 . W ?35,$$FMTE^XLFDT($P(CHDTTM,".",1))
"RTN","IVMADDRP",174,0)
 . I DGFOR=0 S CSZ=$$CSZ(CITY,STATE,ZIP)
"RTN","IVMADDRP",175,0)
 . I DGFOR=1 S CSZ=$$PCP(PCODE,CITY,PROV)
"RTN","IVMADDRP",176,0)
 . W ?49,$E(ADDR1,1,30),!
"RTN","IVMADDRP",177,0)
 . I $L(ADDR2) W ?49,$E(ADDR2,1,30),!
"RTN","IVMADDRP",178,0)
 . I $L(ADDR3) W ?49,$E(ADDR3,1,30),!
"RTN","IVMADDRP",179,0)
 . I $L(CSZ) W ?49,$E(CSZ,1,30),!
"RTN","IVMADDRP",180,0)
 . I $L(DGCNTRY) W ?49,$E(DGCNTRY,1,30),!
"RTN","IVMADDRP",181,0)
 . I $L(SOURCE) W ?49,"SOURCE: ",SOURCE,!
"RTN","IVMADDRP",182,0)
 . I $L(SITE) W ?49,"SITE: ",SITE
"RTN","IVMADDRP",183,0)
 . I $L(BAI) W !?49,"BAI: ",BAI
"RTN","IVMADDRP",184,0)
 . S CNT=CNT+1
"RTN","IVMADDRP",185,0)
 . Q
"RTN","IVMADDRP",186,0)
 I 'QUIT D TOTAL(CNT)
"RTN","IVMADDRP",187,0)
 Q
"RTN","IVMADDRP",188,0)
SUMMARY N SORT1,QUIT,CNT
"RTN","IVMADDRP",189,0)
 S SORT1="",QUIT=0,CNT=0
"RTN","IVMADDRP",190,0)
 F  S SORT1=$O(^XTMP("IVMADDRP",$J,SORT1)) Q:SORT1=""!(QUIT)  D SORT2
"RTN","IVMADDRP",191,0)
 I 'QUIT D TOTAL(CNT)
"RTN","IVMADDRP",192,0)
 Q
"RTN","IVMADDRP",193,0)
SORT2 N NAME,SSN
"RTN","IVMADDRP",194,0)
 S SORT2=""
"RTN","IVMADDRP",195,0)
 F  S SORT2=$O(^XTMP("IVMADDRP",$J,SORT1,SORT2)) Q:SORT2=""!(QUIT)  D
"RTN","IVMADDRP",196,0)
 . I $G(^XTMP("IVMADDRP",$J,SORT1,SORT2))'>1 Q
"RTN","IVMADDRP",197,0)
 . D SUMPR S CNT=CNT+1
"RTN","IVMADDRP",198,0)
 . Q
"RTN","IVMADDRP",199,0)
 Q
"RTN","IVMADDRP",200,0)
SUMPR N X,U
"RTN","IVMADDRP",201,0)
 S U="^"
"RTN","IVMADDRP",202,0)
 S X=$G(^XTMP("IVMADDRP",$J,SORT1,SORT2,"INF"))
"RTN","IVMADDRP",203,0)
 S NAME=$P(X,U,1),SSN=$P(X,U,2)
"RTN","IVMADDRP",204,0)
 I ($Y+2)>IOSL D HEADER I QUIT Q
"RTN","IVMADDRP",205,0)
 W !,$$FSSN(SSN),?12,$E(NAME,1,20)
"RTN","IVMADDRP",206,0)
 W ?35,$$FMTE^XLFDT($O(^XTMP("IVMADDRP",$J,SORT1,SORT2,"DATE",""),-1))
"RTN","IVMADDRP",207,0)
 S X=$G(^XTMP("IVMADDRP",$J,SORT1,SORT2))
"RTN","IVMADDRP",208,0)
 W ?73,$J($FN(X,","),5)
"RTN","IVMADDRP",209,0)
 Q
"RTN","IVMADDRP",210,0)
TOTAL(CNT) ;
"RTN","IVMADDRP",211,0)
 I ($Y+2)>IOSL D HEADER
"RTN","IVMADDRP",212,0)
 W !!,"Total records found meeting criteria: ",CNT,!
"RTN","IVMADDRP",213,0)
 Q
"RTN","IVMADDRP",214,0)
CSZ(CITY,STATE,ZIP) ;format city, state and zip into one line
"RTN","IVMADDRP",215,0)
 N X
"RTN","IVMADDRP",216,0)
 S X=""
"RTN","IVMADDRP",217,0)
 I $L(CITY) S X=CITY
"RTN","IVMADDRP",218,0)
 I $L(STATE) D
"RTN","IVMADDRP",219,0)
 . I $L(X) S X=X_", "_STATE Q
"RTN","IVMADDRP",220,0)
 . S X=STATE
"RTN","IVMADDRP",221,0)
 . Q
"RTN","IVMADDRP",222,0)
 I $L(ZIP) D
"RTN","IVMADDRP",223,0)
 . I $L(X) S X=X_"  "_ZIP Q
"RTN","IVMADDRP",224,0)
 . S X=ZIP
"RTN","IVMADDRP",225,0)
 . Q
"RTN","IVMADDRP",226,0)
 Q X
"RTN","IVMADDRP",227,0)
PCP(PCODE,CITY,PROV) ;format postal code, city, province for foreign address
"RTN","IVMADDRP",228,0)
 N X
"RTN","IVMADDRP",229,0)
 S X=""
"RTN","IVMADDRP",230,0)
 I $L(PCODE) S X=PCODE
"RTN","IVMADDRP",231,0)
 I $L(CITY) D
"RTN","IVMADDRP",232,0)
 . I $L(X) S X=X_" "_CITY Q
"RTN","IVMADDRP",233,0)
 . S X=CITY
"RTN","IVMADDRP",234,0)
 .Q
"RTN","IVMADDRP",235,0)
 I $L(PROV) D
"RTN","IVMADDRP",236,0)
 . I $L(X) S X=X_" "_PROV Q
"RTN","IVMADDRP",237,0)
 . S X=PROV
"RTN","IVMADDRP",238,0)
 . Q
"RTN","IVMADDRP",239,0)
 Q X
"RTN","IVMADDRP",240,0)
FSSN(SSN) ; Format the SSN
"RTN","IVMADDRP",241,0)
 N FMTSSN
"RTN","IVMADDRP",242,0)
 I SSN="NO SSN" Q SSN
"RTN","IVMADDRP",243,0)
 I $L(SSN)=9 S FMTSSN=SSN
"RTN","IVMADDRP",244,0)
 I $L(SSN)>9 S FMTSSN=$E(SSN,1,10)  ; Account for pseudo-SSN
"RTN","IVMADDRP",245,0)
 I $L(SSN)<9 D
"RTN","IVMADDRP",246,0)
 . S FMTSSN=""
"RTN","IVMADDRP",247,0)
 . F FMTSSN=$L(SSN):1:9 S FMTSSN=FMTSSN_"0"
"RTN","IVMADDRP",248,0)
 . S FMTSSN=FMTSSN_SSN
"RTN","IVMADDRP",249,0)
 . Q
"RTN","IVMADDRP",250,0)
 Q FMTSSN
"RTN","IVMADDRP",251,0)
HEADER ; Print the header
"RTN","IVMADDRP",252,0)
 N IDX,PGHDR
"RTN","IVMADDRP",253,0)
 S QUIT=0
"RTN","IVMADDRP",254,0)
 I $G(CRT),($G(PAGE)>0) I $$PAUSE(0) S QUIT=1 Q
"RTN","IVMADDRP",255,0)
 S PAGE=$G(PAGE,0),PAGE=PAGE+1,PGHDR="Page: "_$J(PAGE,3)
"RTN","IVMADDRP",256,0)
 W #
"RTN","IVMADDRP",257,0)
 I $G(CRT) W $C(27,91,72,27,91,74)  ; Additional $C to clear screen in Cache'
"RTN","IVMADDRP",258,0)
 S IDX="",IDX=$O(HDR(IDX))
"RTN","IVMADDRP",259,0)
 W "IVM ADDRESS CHANGE LOG REPORT",?71,PGHDR
"RTN","IVMADDRP",260,0)
 W !,$$FMTE^XLFDT(SDATE)_" THRU "_$$FMTE^XLFDT(EDATE)
"RTN","IVMADDRP",261,0)
 I DOS="D" D
"RTN","IVMADDRP",262,0)
 . W !!,"SSN",?12,"NAME",?35,"CHANGE DATE",?49,"PRIOR ADDRESS"
"RTN","IVMADDRP",263,0)
 . W !,"---",?12,"----",?35,"-----------",?49,"--------------"
"RTN","IVMADDRP",264,0)
 . Q
"RTN","IVMADDRP",265,0)
 I DOS="S" D
"RTN","IVMADDRP",266,0)
 . W !!,"SSN",?12,"NAME",?35,"LAST UPDATED",?69,"# ENTRIES"
"RTN","IVMADDRP",267,0)
 . W !,"---",?12,"----",?35,"------------",?69,"---------"
"RTN","IVMADDRP",268,0)
 . Q
"RTN","IVMADDRP",269,0)
 Q
"RTN","IVMADDRP",270,0)
PAUSE(RESP) ; Prompt user for next page or quit
"RTN","IVMADDRP",271,0)
 N DIR,DIRUT,DUOUT,DTOUT,U,X,Y
"RTN","IVMADDRP",272,0)
 W !
"RTN","IVMADDRP",273,0)
 S DIR(0)="E"
"RTN","IVMADDRP",274,0)
 D ^DIR
"RTN","IVMADDRP",275,0)
 I 'Y S RESP=1
"RTN","IVMADDRP",276,0)
 Q RESP
"RTN","IVMCM")
0^11^B80339401
"RTN","IVMCM",1,0)
IVMCM ;ALB/SEK,KCL,RTK,AEG,BRM,AEG - PROCESS INCOME TEST (Z10) TRANSMISSIONS ; 8/15/08 10:18am
"RTN","IVMCM",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**12,17,28,41,44,53,34,49,59,55,63,77,74,123,115**;21-OCT-94;Build 28
"RTN","IVMCM",3,0)
 ;
"RTN","IVMCM",4,0)
 ;
"RTN","IVMCM",5,0)
ORF ; Handler for ORF type HL7 messages received from HEC
"RTN","IVMCM",6,0)
 ;
"RTN","IVMCM",7,0)
 ; Make sure POSTMASTER DUZ instead of DUZ of Person who
"RTN","IVMCM",8,0)
 ; started Incoming Logical Link.
"RTN","IVMCM",9,0)
 S DUZ=.5
"RTN","IVMCM",10,0)
 N CNT,IVMRTN,SEGCNT
"RTN","IVMCM",11,0)
 S IVMRTN="IVMCMX"  ;USE "IVMCMX" BECAUSE "IVMCM" ALREADY USED
"RTN","IVMCM",12,0)
 K ^TMP($J,IVMRTN),DIC
"RTN","IVMCM",13,0)
 S (DGMSGF,DGMTMSG)=1  ; HL7 rtn. Don't need DG interative messages.
"RTN","IVMCM",14,0)
 S HLECH=HL("ECH"),HLQ=HL("Q"),HLMID=HL("MID")
"RTN","IVMCM",15,0)
 K %,%H,%I D NOW^%DTC S HLDT=%
"RTN","IVMCM",16,0)
 F SEGCNT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","IVMCM",17,0)
 . S CNT=0
"RTN","IVMCM",18,0)
 . S ^TMP($J,IVMRTN,SEGCNT,CNT)=HLNODE
"RTN","IVMCM",19,0)
 . F  S CNT=$O(HLNODE(CNT)) Q:'CNT  D
"RTN","IVMCM",20,0)
 . . S ^TMP($J,IVMRTN,SEGCNT,CNT)=HLNODE(CNT)
"RTN","IVMCM",21,0)
 S HLDA=HLMTIEN
"RTN","IVMCM",22,0)
 ;
"RTN","IVMCM",23,0)
 N SEG,EVENT,MSGID
"RTN","IVMCM",24,0)
 S:'$D(HLEVN) HLEVN=0
"RTN","IVMCM",25,0)
 D NXTSEG^DGENUPL(HLDA,0,.SEG)
"RTN","IVMCM",26,0)
 Q:(SEG("TYPE")'="MSH")  ;would not have reached here if this happened!
"RTN","IVMCM",27,0)
 S EVENT=$P(SEG(9),$E(HLECH),2)
"RTN","IVMCM",28,0)
 ;
"RTN","IVMCM",29,0)
 ; INITIALIZE HL7 VARIABLES
"RTN","IVMCM",30,0)
 S HLEID="VAMC "_$P($$SITE^VASITE,"^",3)_" ORF-"_EVENT_" SERVER"
"RTN","IVMCM",31,0)
 S HLEID=$O(^ORD(101,"B",HLEID,0))
"RTN","IVMCM",32,0)
 D INIT^HLFNC2(HLEID,.HL)
"RTN","IVMCM",33,0)
 S HLEIDS=$O(^ORD(101,HLEID,775,"B",0))
"RTN","IVMCM",34,0)
 ;
"RTN","IVMCM",35,0)
 ; Handle means test signature ORF (Z06) event
"RTN","IVMCM",36,0)
 I EVENT="Z06" D ORF^IVMPREC7
"RTN","IVMCM",37,0)
 ;
"RTN","IVMCM",38,0)
 ; Handle income test ORF (Z10) event
"RTN","IVMCM",39,0)
 I EVENT="Z10" D Z10
"RTN","IVMCM",40,0)
 ;
"RTN","IVMCM",41,0)
 ; Handle enrollment/elig. ORF (Z11) event
"RTN","IVMCM",42,0)
 I EVENT="Z11" D
"RTN","IVMCM",43,0)
 .S MSGID=SEG(10)
"RTN","IVMCM",44,0)
 .D ORFZ11^DGENUPL(HLDA,MSGID)
"RTN","IVMCM",45,0)
 ;
"RTN","IVMCM",46,0)
 K ^TMP($J,IVMRTN)
"RTN","IVMCM",47,0)
 Q
"RTN","IVMCM",48,0)
 ;
"RTN","IVMCM",49,0)
 ;
"RTN","IVMCM",50,0)
Z10 ; Entry point for receipt of ORF~Z10 transmission
"RTN","IVMCM",51,0)
 ; The Income Test (Z10) transmission has the following format:
"RTN","IVMCM",52,0)
 ;
"RTN","IVMCM",53,0)
 ;       BHS           ORF msgs do not include batch header or trailer.
"RTN","IVMCM",54,0)
 ;       {MSH
"RTN","IVMCM",55,0)
 ;        PID          They will include the sequence:  MSA 
"RTN","IVMCM",56,0)
 ;        ZIC                                           QRD
"RTN","IVMCM",57,0)
 ;        ZIR                                           QRF
"RTN","IVMCM",58,0)
 ;        {ZDP         These segments will follow the MSH segment.
"RTN","IVMCM",59,0)
 ;         ZIC
"RTN","IVMCM",60,0)
 ;         ZIR
"RTN","IVMCM",61,0)
 ;        }
"RTN","IVMCM",62,0)
 ;        {ZMT
"RTN","IVMCM",63,0)
 ;        }
"RTN","IVMCM",64,0)
 ;        ZBT
"RTN","IVMCM",65,0)
 ;       }
"RTN","IVMCM",66,0)
 ;       BTS
"RTN","IVMCM",67,0)
 ;
"RTN","IVMCM",68,0)
 S IVMORF=1 ; set ORF msg flag
"RTN","IVMCM",69,0)
 S (HLEVN,IVMCT,IVMERROR,IVMCNTR)=0 ; init vars
"RTN","IVMCM",70,0)
 ;
"RTN","IVMCM",71,0)
ORU ; Entry point for receipt of ORU~Z10 trans (called by IVMPREC2)
"RTN","IVMCM",72,0)
 S IVMTYPE=5,IVMZ10F=1
"RTN","IVMCM",73,0)
 ;
"RTN","IVMCM",74,0)
 ; - loop through the msg in (#772 file), and process (PROC) msgs
"RTN","IVMCM",75,0)
 S IVMDA=0 F  S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)) Q:'IVMDA  S IVMSEG=$G(^(IVMDA,0)) I $E(IVMSEG,1,3)="MSH" D PROC Q:'IVMDA
"RTN","IVMCM",76,0)
 ;
"RTN","IVMCM",77,0)
 ; - if ORF msg flag, update the Query Tran Log
"RTN","IVMCM",78,0)
 I $G(IVMORF) D
"RTN","IVMCM",79,0)
 .I $G(DFN),$D(IVMMCI) D
"RTN","IVMCM",80,0)
 ..N IVMCR
"RTN","IVMCM",81,0)
 ..S IVMCR=$P("1^2^3^7^5^6^4","^",IVMTYPE)  ;map reason to test type
"RTN","IVMCM",82,0)
 ..D FIND^IVMCQ2(DFN,IVMMCI,HLDT,$S($D(HLERR):5,1:IVMCR),1)
"RTN","IVMCM",83,0)
 ;
"RTN","IVMCM",84,0)
 ; - if tests are uploaded, generate notification msg
"RTN","IVMCM",85,0)
 I $D(^TMP($J,"IVMBULL")) D ^IVMCMB
"RTN","IVMCM",86,0)
 ;
"RTN","IVMCM",87,0)
ENQ ;
"RTN","IVMCM",88,0)
 K IVMDA,IVMORF,IVMSEG,IVMFLGC,IVMTYPE,IVMMTIEN,IVMMTDT,IVMDGBT,IVMMCI
"RTN","IVMCM",89,0)
 K ^TMP($J,"IVMCM"),^("IVMBULL"),DGMSGF,DGADDF,IVMCPAY,IVMBULL,DFN
"RTN","IVMCM",90,0)
 K DGMTMSG,IVMZ10F
"RTN","IVMCM",91,0)
 Q
"RTN","IVMCM",92,0)
 ;
"RTN","IVMCM",93,0)
PROC ; Process each HL7 message from (#772) file
"RTN","IVMCM",94,0)
 ;
"RTN","IVMCM",95,0)
 N IVMFUTR,TMSTAMP,SOURCE,NODE,HSDATE,IVMZ10,DGMTP,DGMTACT,DGMTI,DGMTA
"RTN","IVMCM",96,0)
 S DGMTACT="ADD"
"RTN","IVMCM",97,0)
 D PRIOR^DGMTEVT
"RTN","IVMCM",98,0)
 S IVMZ10="UPLOAD IN PROGRESS"
"RTN","IVMCM",99,0)
 S IVMFUTR=0 ;this flag will indicate whether or not a test with a future date is being uploaded
"RTN","IVMCM",100,0)
 S IVMMTIEN=0
"RTN","IVMCM",101,0)
 ;
"RTN","IVMCM",102,0)
 S MSGID=$P(IVMSEG,HLFS,10) ; msg control id for ACK's
"RTN","IVMCM",103,0)
 ; - check if DCD messaging is enabled
"RTN","IVMCM",104,0)
 I '$$DCDON^IVMUPAR1() D PROB^IVMCMC("Facility has DCD messaging disabled") Q
"RTN","IVMCM",105,0)
 ;
"RTN","IVMCM",106,0)
 ; - check HL7 msg structure for errors
"RTN","IVMCM",107,0)
 K HLERR,^TMP($J,"IVMCM")
"RTN","IVMCM",108,0)
 D ^IVMCMC I $D(HLERR) K:HLERR="" HLERR Q
"RTN","IVMCM",109,0)
 ;
"RTN","IVMCM",110,0)
 ; Determine type of test/transmission
"RTN","IVMCM",111,0)
 S IVMTYPE=0
"RTN","IVMCM",112,0)
 ;
"RTN","IVMCM",113,0)
 ; - was a means test sent?
"RTN","IVMCM",114,0)
 I $P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,2) S IVMTYPE=1 ; MT trans
"RTN","IVMCM",115,0)
 ;
"RTN","IVMCM",116,0)
 ; - if MT and CT transmitted, error - pt can't have both unless
"RTN","IVMCM",117,0)
 ;   one is a deletion, but HEC not currently handling that situation
"RTN","IVMCM",118,0)
 I IVMTYPE,$P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2) D PROB^IVMCMC("Patient  can not have both a Means Test and Copay Test") Q
"RTN","IVMCM",119,0)
 I $P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2) S IVMTYPE=2 ; CT trans
"RTN","IVMCM",120,0)
 ;
"RTN","IVMCM",121,0)
 ; - if no MT or CT or LTC then Income Screening
"RTN","IVMCM",122,0)
 I 'IVMTYPE,'$P($G(^TMP($J,"IVMCM","ZMT4")),HLFS,2) S IVMTYPE=3 ; IS trans
"RTN","IVMCM",123,0)
 ;
"RTN","IVMCM",124,0)
 ;send an eligibility query if no eligibility code
"RTN","IVMCM",125,0)
 I '$$ELIG^IVMCUF1(DFN),'$$PENDING^DGENQRY(DFN) I $$SEND^DGENQRY1(DFN)
"RTN","IVMCM",126,0)
 ;
"RTN","IVMCM",127,0)
 ; obtain locks used to sychronize upload with local income test options
"RTN","IVMCM",128,0)
 D GETLOCKS^IVMCUPL(DFN)
"RTN","IVMCM",129,0)
 ;
"RTN","IVMCM",130,0)
 ;
"RTN","IVMCM",131,0)
MT ; If transmission is a Means Test
"RTN","IVMCM",132,0)
 N NODE0,RET,CODE,DATA,MTSIG,MTSIGDT
"RTN","IVMCM",133,0)
 S HLQ=$G(HL("Q"))
"RTN","IVMCM",134,0)
 S:HLQ="" HLQ=""""""
"RTN","IVMCM",135,0)
 I IVMTYPE=1 D  I $D(HLERR) G PROCQ
"RTN","IVMCM",136,0)
 .S IVMMTDT=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,2))
"RTN","IVMCM",137,0)
 .S TMSTAMP=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,25))
"RTN","IVMCM",138,0)
 .S HSDATE=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,24))
"RTN","IVMCM",139,0)
 .S SOURCE=$P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,22)
"RTN","IVMCM",140,0)
 .S MTSIG=$P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,27)
"RTN","IVMCM",141,0)
 .S MTSIGDT=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,15))
"RTN","IVMCM",142,0)
 .S IVMLAST=$$LST^DGMTU(DFN,$E(IVMMTDT,1,3)_1231,1)
"RTN","IVMCM",143,0)
 .; Check that test is for same year
"RTN","IVMCM",144,0)
 .I $P(IVMLAST,U,2),$E($P(IVMLAST,U,2),1,3)'=$E(IVMMTDT,1,3) S IVMLAST=""
"RTN","IVMCM",145,0)
 .Q:$$UPDMTSIG^IVMCMF(+IVMLAST,TMSTAMP,MTSIG,MTSIGDT)
"RTN","IVMCM",146,0)
 .I $$Z06MT^EASPTRN1(+IVMLAST) D PROB^IVMCMC("IVM Means Test already on file for this year") Q
"RTN","IVMCM",147,0)
 .I '$$ELIG^IVMUFNC5(DFN) S ERRMSG="Means Test upload not appropriate for current patient"
"RTN","IVMCM",148,0)
 .I $$AGE^IVMUFNC5(DT)>$$INCY^IVMUFNC5(IVMMTDT) D
"RTN","IVMCM",149,0)
 ..N CATCZMT S CATCZMT=$G(^TMP($J,"IVMCM","ZMT1"))
"RTN","IVMCM",150,0)
 ..S CATC=$$CATC^IVMUFNC5(CATCZMT)
"RTN","IVMCM",151,0)
 ..I '+$G(CATC) S ERRMSG="Only Means Tests in current/previous income years are valid (not effective)"
"RTN","IVMCM",152,0)
 .I $G(ERRMSG)'="" D PROB^IVMCMC(ERRMSG) K ERRMSG,CATC Q
"RTN","IVMCM",153,0)
 .;
"RTN","IVMCM",154,0)
 .; - perform edit checks and file MT
"RTN","IVMCM",155,0)
 .D CHKDT
"RTN","IVMCM",156,0)
 .;deletion indicator sent?
"RTN","IVMCM",157,0)
 .I $P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,3)=HLQ D  Q
"RTN","IVMCM",158,0)
 ..D
"RTN","IVMCM",159,0)
 ...;if there is a future test for that income year, delete that
"RTN","IVMCM",160,0)
 ...N IEN,DATA,IVMPAT
"RTN","IVMCM",161,0)
 ...S IEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),1,.IVMPAT)
"RTN","IVMCM",162,0)
 ...I IEN S DATA(.06)="" I $$UPD^DGENDBS(301.5,IVMPAT,.DATA)
"RTN","IVMCM",163,0)
 ...I IEN,$D(^DGMT(408.31,IEN,0)) D
"RTN","IVMCM",164,0)
 ....S IVMMTIEN=IEN
"RTN","IVMCM",165,0)
 ....S IVMFUTR=1
"RTN","IVMCM",166,0)
 ...E  D
"RTN","IVMCM",167,0)
 ....S IVMFUTR=0
"RTN","IVMCM",168,0)
 ..Q:('IVMMTIEN)
"RTN","IVMCM",169,0)
 ..S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM",170,0)
 ..I $$EN^IVMCMD(IVMMTIEN) D
"RTN","IVMCM",171,0)
 ...S RET=$$LST^DGMTU(DFN,DT,IVMTYPE)
"RTN","IVMCM",172,0)
 ...S CODE=$S(($E($P(RET,"^",2),1,3)=$E(DT,1,3)):$P(RET,"^",4),1:"")
"RTN","IVMCM",173,0)
 ...D ADD^IVMCMB(DFN,IVMTYPE,$S(IVMFUTR:"DELETE FUTR TEST",1:"DELETE PRMRY TEST"),+$G(NODE0),$$GETCODE^DGMTH($P(NODE0,"^",3)),CODE)
"RTN","IVMCM",174,0)
 .;
"RTN","IVMCM",175,0)
 .;check timestamp - if matches current primary test and hardship matches, then this is a duplicate and does not need to be uploaded
"RTN","IVMCM",176,0)
 .I TMSTAMP D
"RTN","IVMCM",177,0)
 ..S NODE=""
"RTN","IVMCM",178,0)
 ..I IVMFUTR N IVMMTIEN S IVMMTIEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),1)
"RTN","IVMCM",179,0)
 ..Q:'IVMMTIEN
"RTN","IVMCM",180,0)
 ..S NODE=$G(^DGMT(408.31,IVMMTIEN,2))
"RTN","IVMCM",181,0)
 .S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM",182,0)
 .I TMSTAMP,TMSTAMP=$P(NODE,"^",2),IVMMTDT=$P(NODE0,"^"),SOURCE=$P(NODE,"^",5),(HSDATE=$P(NODE,"^")) Q
"RTN","IVMCM",183,0)
 .;
"RTN","IVMCM",184,0)
 .D DELTYPE^IVMCMD(DFN,IVMMTDT,2)
"RTN","IVMCM",185,0)
 .D EN^IVMCM1
"RTN","IVMCM",186,0)
 ;
"RTN","IVMCM",187,0)
 ;
"RTN","IVMCM",188,0)
CT ; If transmission is a Copay Test
"RTN","IVMCM",189,0)
 N NODE0,RET,CODE,DATA
"RTN","IVMCM",190,0)
 I IVMTYPE=2 D  I $D(HLERR) G PROCQ
"RTN","IVMCM",191,0)
 .S IVMMTDT=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2))
"RTN","IVMCM",192,0)
 .S TMSTAMP=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,25))
"RTN","IVMCM",193,0)
 .S SOURCE=$P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,22)
"RTN","IVMCM",194,0)
 .S IVMLAST=$$LST^DGMTU(DFN,$E(IVMMTDT,1,3)_1231,2)
"RTN","IVMCM",195,0)
 .S IVMCPAY=$$RXST^IBARXEU(DFN)
"RTN","IVMCM",196,0)
 .I $$AGE^IVMUFNC5(DT)>$$INCY^IVMUFNC5(IVMMTDT) D PROB^IVMCMC("Only Copay Tests in the current/previous income years are valid. (Not effective)") Q
"RTN","IVMCM",197,0)
 .; - perform edit checks and file CT
"RTN","IVMCM",198,0)
 .D CHKDT
"RTN","IVMCM",199,0)
 .;deletion indicator sent?
"RTN","IVMCM",200,0)
 .I $P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,3)=HLQ D  Q
"RTN","IVMCM",201,0)
 ..D
"RTN","IVMCM",202,0)
 ...;if there is a future test for that income year, delete that
"RTN","IVMCM",203,0)
 ...N IEN,DATA,IVMPAT
"RTN","IVMCM",204,0)
 ...S IEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),2,.IVMPAT)
"RTN","IVMCM",205,0)
 ...I IEN S DATA(.07)="" I $$UPD^DGENDBS(301.5,IVMPAT,.DATA)
"RTN","IVMCM",206,0)
 ...I IEN,$D(^DGMT(408.31,IEN,0)) D
"RTN","IVMCM",207,0)
 ....S IVMMTIEN=IEN
"RTN","IVMCM",208,0)
 ....S IVMFUTR=1
"RTN","IVMCM",209,0)
 ...E  D
"RTN","IVMCM",210,0)
 ....S IVMFUTR=0
"RTN","IVMCM",211,0)
 ..Q:('IVMMTIEN)
"RTN","IVMCM",212,0)
 ..S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM",213,0)
 ..I $$EN^IVMCMD(IVMMTIEN) D
"RTN","IVMCM",214,0)
 ...S RET=$$LST^DGMTU(DFN,DT,IVMTYPE)
"RTN","IVMCM",215,0)
 ...S CODE=$S(($E($P(RET,"^",2),1,3)=$E(DT,1,3)):$P(RET,"^",4),1:"")
"RTN","IVMCM",216,0)
 ...D ADD^IVMCMB(DFN,IVMTYPE,$S(IVMFUTR:"DELETE FUTR TEST",1:"DELETE PRMRY TEST"),+$G(NODE0),$$GETCODE^DGMTH($P(NODE0,"^",3)),CODE)
"RTN","IVMCM",217,0)
 .;
"RTN","IVMCM",218,0)
 .;check timestamp - if matches current primary test, then this is a duplicate and does not need to be uploaded
"RTN","IVMCM",219,0)
 .I TMSTAMP D
"RTN","IVMCM",220,0)
 ..S NODE=""
"RTN","IVMCM",221,0)
 ..I IVMFUTR N IVMMTIEN S IVMMTIEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),2)
"RTN","IVMCM",222,0)
 ..Q:'IVMMTIEN
"RTN","IVMCM",223,0)
 ..S NODE=$G(^DGMT(408.31,IVMMTIEN,2))
"RTN","IVMCM",224,0)
 .S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM",225,0)
 .I TMSTAMP,TMSTAMP=$P(NODE,"^",2),IVMMTDT=$P(NODE0,"^"),SOURCE=$P(NODE,"^",5) Q
"RTN","IVMCM",226,0)
 .;
"RTN","IVMCM",227,0)
 .D DELTYPE^IVMCMD(DFN,IVMMTDT,1)
"RTN","IVMCM",228,0)
 .D EN^IVMCM1
"RTN","IVMCM",229,0)
 ;
"RTN","IVMCM",230,0)
IS ; - If transmission is income screening info only then do not process
"RTN","IVMCM",231,0)
 ; - outside of the scope of MTS
"RTN","IVMCM",232,0)
 ;I IVMTYPE=3 S IVMMTDT=0 D EN^IVMCM1 I $D(HLERR) G PROCQ
"RTN","IVMCM",233,0)
 I IVMTYPE=3 S IVMMTDT=0
"RTN","IVMCM",234,0)
 ;
"RTN","IVMCM",235,0)
LTC ; If transmission contains a Long Term Care Test (TYPE 4 TEST)
"RTN","IVMCM",236,0)
 I $P($G(^TMP($J,"IVMCM","ZMT4")),HLFS,2) D LTC^IVMCM1
"RTN","IVMCM",237,0)
 ;
"RTN","IVMCM",238,0)
PROCQ ;
"RTN","IVMCM",239,0)
 ; release locks used to sychronize upload with local income test options
"RTN","IVMCM",240,0)
 D RELLOCKS^IVMCUPL(DFN)
"RTN","IVMCM",241,0)
 Q
"RTN","IVMCM",242,0)
 ;
"RTN","IVMCM",243,0)
CHKDT ; check date of income test being uploaded
"RTN","IVMCM",244,0)
 ; Is it a future date?  If so, set IVMFUTR=1
"RTN","IVMCM",245,0)
 ;
"RTN","IVMCM",246,0)
 ; IVMMTIEN is the IEN of current primary test for the year
"RTN","IVMCM",247,0)
 ;
"RTN","IVMCM",248,0)
 I $E($P(IVMLAST,"^",2),1,3)=$E(IVMMTDT,1,3) S IVMMTIEN=+IVMLAST
"RTN","IVMCM",249,0)
 I IVMMTDT>DT S IVMFUTR=1
"RTN","IVMCM",250,0)
 Q
"RTN","IVMCM",251,0)
FUTURE(DFN,YEAR,TYPE,IVMPAT) ;
"RTN","IVMCM",252,0)
 ;Returns the ien of the future test, if there is one
"RTN","IVMCM",253,0)
 ;Inputs:  DFN
"RTN","IVMCM",254,0)
 ;         YEAR  - income year
"RTN","IVMCM",255,0)
 ;         TYPE - type of test
"RTN","IVMCM",256,0)
 ;Output:
"RTN","IVMCM",257,0)
 ;  function value - ien of future means test, if there is one, "" otherwise
"RTN","IVMCM",258,0)
 ;  IVMPAT - Pointer to the IVM Patient file for the income year if there is an entry (pass by reference)
"RTN","IVMCM",259,0)
 ;
"RTN","IVMCM",260,0)
 N RET
"RTN","IVMCM",261,0)
 S RET=""
"RTN","IVMCM",262,0)
 S IVMPAT=$$FIND^IVMPLOG(DFN,YEAR)
"RTN","IVMCM",263,0)
 I IVMPAT S RET=$P($G(^IVM(301.5,IVMPAT,0)),"^",$S(TYPE=1:6,1:7))
"RTN","IVMCM",264,0)
 Q RET
"RTN","IVMCM1")
0^25^B46763584
"RTN","IVMCM1",1,0)
IVMCM1 ;ALB/SEK,BRM,TDM - DCD INCOME TESTS UPLOAD DRIVER ; 2/9/06 1:57pm
"RTN","IVMCM1",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**17,49,71,115**;21-OCT-94;Build 28
"RTN","IVMCM1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMCM1",4,0)
 ;
"RTN","IVMCM1",5,0)
EN ; this routine will call routines to upload means/copay/LTC test and
"RTN","IVMCM1",6,0)
 ; income screening sent by the IVM Center (DCD).  the calling routine
"RTN","IVMCM1",7,0)
 ; validated segment sequence.  entries will be added/modified in the
"RTN","IVMCM1",8,0)
 ; following means test and patient files:
"RTN","IVMCM1",9,0)
 ;
"RTN","IVMCM1",10,0)
 ;       PATIENT RELATION (#408.12)
"RTN","IVMCM1",11,0)
 ;       INCOME PERSON (#408.13)
"RTN","IVMCM1",12,0)
 ;       INDIVIDUAL ANNUAL INCOME (#408.21)
"RTN","IVMCM1",13,0)
 ;       INCOME RELATION (#408.22)
"RTN","IVMCM1",14,0)
 ;       ANNUAL MEANS TEST (#408.31)
"RTN","IVMCM1",15,0)
 ;       MEANS TEST CHANGES (#408.41)
"RTN","IVMCM1",16,0)
 ;       PATIENT (#2)
"RTN","IVMCM1",17,0)
 ;
"RTN","IVMCM1",18,0)
 ; input:
"RTN","IVMCM1",19,0)
 ;
"RTN","IVMCM1",20,0)
 ; IVMTYPE test type 1-means 2-copay 3-income screening 4-LTC
"RTN","IVMCM1",21,0)
 ; IVMMTIEN IEN of replaced test (408.31)
"RTN","IVMCM1",22,0)
 ; IVMFLGC  # of dependent children
"RTN","IVMCM1",23,0)
 ; IVMMTDT  dt of test
"RTN","IVMCM1",24,0)
 ; DGLY income year
"RTN","IVMCM1",25,0)
 ;
"RTN","IVMCM1",26,0)
 ; ^TMP($J,"IVMCM",  contains data sent by IVM Center
"RTN","IVMCM1",27,0)
 ;   3rd node "PIDV"
"RTN","IVMCM1",28,0)
 ;            "ZICV"
"RTN","IVMCM1",29,0)
 ;            "ZIRV"
"RTN","IVMCM1",30,0)
 ;            "ZDPS"
"RTN","IVMCM1",31,0)
 ;            "ZICS"
"RTN","IVMCM1",32,0)
 ;            "ZIRS"
"RTN","IVMCM1",33,0)
 ;           {"ZDPC",N
"RTN","IVMCM1",34,0)
 ;            "ZICC",N
"RTN","IVMCM1",35,0)
 ;            "ZIRC",N
"RTN","IVMCM1",36,0)
 ;           }
"RTN","IVMCM1",37,0)
 ;           {"ZDPIS",N}        Inactive Spouse Entries
"RTN","IVMCM1",38,0)
 ;           {"ZDPIC",N}        Inactive Child Entries
"RTN","IVMCM1",39,0)
 ;            "ZMT1"
"RTN","IVMCM1",40,0)
 ;            "ZMT2"
"RTN","IVMCM1",41,0)
 ;            "ZMT4"
"RTN","IVMCM1",42,0)
 ;            "ZBT"  
"RTN","IVMCM1",43,0)
 ;
"RTN","IVMCM1",44,0)
 S:'$D(DUZ) DUZ=.5
"RTN","IVMCM1",45,0)
 ;
"RTN","IVMCM1",46,0)
 ; subscript of array IVMAR is 408.12 ien transmitted by IVM Center
"RTN","IVMCM1",47,0)
 ; or created by upload. IVMAR2 is the array used to check for dup SSNs
"RTN","IVMCM1",48,0)
 K IVMAR,IVMAR2
"RTN","IVMCM1",49,0)
 ;
"RTN","IVMCM1",50,0)
 ; New Edit Checks
"RTN","IVMCM1",51,0)
 N IVMERR,OK2UPLD S IVMERR="",OK2UPLD=1
"RTN","IVMCM1",52,0)
 D EN^IVMCMF(.IVMERR),PROB^IVMCMFB(,.IVMERR,0) Q:'OK2UPLD
"RTN","IVMCM1",53,0)
 ;
"RTN","IVMCM1",54,0)
 ; IVMHADJ indicates means test hardship/adjudication
"RTN","IVMCM1",55,0)
 ; 1-adj 2-hardship 3-pending adj 0-not adj/hard
"RTN","IVMCM1",56,0)
 I IVMTYPE=1 D
"RTN","IVMCM1",57,0)
 .S IVMSEG=$G(^TMP($J,"IVMCM","ZMT1"))
"RTN","IVMCM1",58,0)
 .S IVMHADJ=$S($P(IVMSEG,"^",13):2,$P(IVMSEG,"^",6)]"":1,$P(IVMSEG,"^",3)="P":3,1:0)
"RTN","IVMCM1",59,0)
 ;
"RTN","IVMCM1",60,0)
 S:IVMTYPE=3 DGMTI=""
"RTN","IVMCM1",61,0)
 ;
"RTN","IVMCM1",62,0)
 ; add new annual means test file (408.31) stub for Means test,
"RTN","IVMCM1",63,0)
 ; RX Copay test, or Long Term Care test
"RTN","IVMCM1",64,0)
 I "^1^2^4^"[("^"_IVMTYPE_"^") D
"RTN","IVMCM1",65,0)
 .;
"RTN","IVMCM1",66,0)
 .; input   DGMTDT (.01) dt of test
"RTN","IVMCM1",67,0)
 .;         DFN (.02) Patient IEN
"RTN","IVMCM1",68,0)
 .;         DGMTYPT (.19) type of test
"RTN","IVMCM1",69,0)
 .; output  DGMTI annual means test IEN
"RTN","IVMCM1",70,0)
 .S DGMTDT=IVMMTDT,DGMTYPT=IVMTYPE
"RTN","IVMCM1",71,0)
 .D ADD^DGMTA
"RTN","IVMCM1",72,0)
 .;
"RTN","IVMCM1",73,0)
 .; change primary income test for year?
"RTN","IVMCM1",74,0)
 .S DA=DGMTI,DIE="^DGMT(408.31,",DR="2////0"
"RTN","IVMCM1",75,0)
 .D ^DIE K DA,DIE,DR
"RTN","IVMCM1",76,0)
 ;
"RTN","IVMCM1",77,0)
 D NEWVET^IVMCM3 Q:$D(IVMFERR)  ; if no entry in patient relation file for vet add
"RTN","IVMCM1",78,0)
 ;
"RTN","IVMCM1",79,0)
 ; get patient relation ien (#408.12) for vet, spouse, & child
"RTN","IVMCM1",80,0)
 S IVMREQU=$P($G(^DG(408.32,+$P($G(^DGMT(408.31,IVMMTIEN,0)),"^",3),0)),"^",2)
"RTN","IVMCM1",81,0)
 D GETREL^DGMTU11(DFN,"VSC",DGLY,$S($G(IVMMTIEN)&(IVMREQU'="R"):IVMMTIEN,1:0))
"RTN","IVMCM1",82,0)
 ;
"RTN","IVMCM1",83,0)
 ; add dependent(s) to income person file (408.13)
"RTN","IVMCM1",84,0)
 ;
"RTN","IVMCM1",85,0)
 ; add spouse if not in 408.13
"RTN","IVMCM1",86,0)
 S IVMSPCHV="S" ; spouse/child/vet indicator
"RTN","IVMCM1",87,0)
 S IVMSEG=$G(^TMP($J,"IVMCM","ZDPS")) ; spouse ZDP segment
"RTN","IVMCM1",88,0)
 D INPIEN^IVMCM2
"RTN","IVMCM1",89,0)
 Q:$D(IVMFERR)
"RTN","IVMCM1",90,0)
 ;
"RTN","IVMCM1",91,0)
 I IVMFLG5 G ADDCHILD ; entry not added - goto add children
"RTN","IVMCM1",92,0)
 ;
"RTN","IVMCM1",93,0)
 ; add entry to patient relation file (408.12)
"RTN","IVMCM1",94,0)
 D EN^IVMCM3
"RTN","IVMCM1",95,0)
 Q:$D(IVMFERR)
"RTN","IVMCM1",96,0)
 ;
"RTN","IVMCM1",97,0)
ADDS21 ; add spouse entry to individual annual income file (408.21)
"RTN","IVMCM1",98,0)
 S IVMSEG=$G(^TMP($J,"IVMCM","ZICS")) ; spouse ZIC segment
"RTN","IVMCM1",99,0)
 D EN^IVMCM4
"RTN","IVMCM1",100,0)
 Q:$D(IVMFERR)
"RTN","IVMCM1",101,0)
 ;
"RTN","IVMCM1",102,0)
 ; add spouse entry to income relation file (408.22)
"RTN","IVMCM1",103,0)
 S IVMSEG=$G(^TMP($J,"IVMCM","ZIRS")) ; spouse ZIR segment
"RTN","IVMCM1",104,0)
 D EN^IVMCM5
"RTN","IVMCM1",105,0)
 Q:$D(IVMFERR)
"RTN","IVMCM1",106,0)
 ;
"RTN","IVMCM1",107,0)
ADDCHILD ; add children if not in 408.13
"RTN","IVMCM1",108,0)
 S IVMSPCHV="C" ; spouse/child/vet indicator
"RTN","IVMCM1",109,0)
 I 'IVMFLGC G ADDV21 ; no dependent children 
"RTN","IVMCM1",110,0)
 F IVMCTR3=1:1:IVMFLGC D  Q:$D(IVMFERR)
"RTN","IVMCM1",111,0)
 .S IVMSEG=$G(^TMP($J,"IVMCM","ZDPC",IVMCTR3)) ; child ZDP segment
"RTN","IVMCM1",112,0)
 .D INPIEN^IVMCM2
"RTN","IVMCM1",113,0)
 .Q:$D(IVMFERR)
"RTN","IVMCM1",114,0)
 .;
"RTN","IVMCM1",115,0)
 .; add child entry to patient relation file (408.12)
"RTN","IVMCM1",116,0)
 .D EN^IVMCM3
"RTN","IVMCM1",117,0)
 .Q:$D(IVMFERR)
"RTN","IVMCM1",118,0)
 .;
"RTN","IVMCM1",119,0)
ADDC21 .; add child entry to individual annual income file (408.21)
"RTN","IVMCM1",120,0)
 .S IVMSEG=$G(^TMP($J,"IVMCM","ZICC",IVMCTR3)) ; child ZIC segment
"RTN","IVMCM1",121,0)
 .D EN^IVMCM4
"RTN","IVMCM1",122,0)
 .Q:$D(IVMFERR)
"RTN","IVMCM1",123,0)
 .;
"RTN","IVMCM1",124,0)
 .; add entry to income relation file (408.22)
"RTN","IVMCM1",125,0)
 .S IVMSEG=$G(^TMP($J,"IVMCM","ZIRC",IVMCTR3)) ; child ZIR segment
"RTN","IVMCM1",126,0)
 .D EN^IVMCM5
"RTN","IVMCM1",127,0)
 .Q:$D(IVMFERR)
"RTN","IVMCM1",128,0)
 .Q
"RTN","IVMCM1",129,0)
 Q:$D(IVMFERR)
"RTN","IVMCM1",130,0)
 ;
"RTN","IVMCM1",131,0)
ADDV21 ; add vet entry to individual annual income file (408.21)
"RTN","IVMCM1",132,0)
 ; get vet patient relation ien
"RTN","IVMCM1",133,0)
 S DGPRI=+$G(DGREL("V"))
"RTN","IVMCM1",134,0)
 S IVMSEG=$G(^TMP($J,"IVMCM","ZICV")) ; vet ZIC segment
"RTN","IVMCM1",135,0)
 S IVMSPCHV="V" ; spouse/child/vet indicator
"RTN","IVMCM1",136,0)
 D EN^IVMCM4
"RTN","IVMCM1",137,0)
 Q:$D(IVMFERR)
"RTN","IVMCM1",138,0)
 S DGVINI=DGINI ; vet individual annual income ien
"RTN","IVMCM1",139,0)
 ;
"RTN","IVMCM1",140,0)
 ; add vet entry to income relation file (408.22)
"RTN","IVMCM1",141,0)
 S IVMSEG=$G(^TMP($J,"IVMCM","ZIRV")) ; vet ZIR segment
"RTN","IVMCM1",142,0)
 D EN^IVMCM5
"RTN","IVMCM1",143,0)
 Q:$D(IVMFERR)
"RTN","IVMCM1",144,0)
 S DGVIRI=DGIRI ; vet income relation ien
"RTN","IVMCM1",145,0)
 ;
"RTN","IVMCM1",146,0)
ADDINACT ; Process inactive ZDP's (ZDPIS & ZDPID entries)
"RTN","IVMCM1",147,0)
 N ISEG,ICTR,IVMIDT,X,DA
"RTN","IVMCM1",148,0)
 F ISEG="ZDPIS","ZDPIC" D  Q:$D(IVMFERR)
"RTN","IVMCM1",149,0)
 . S ICTR=0
"RTN","IVMCM1",150,0)
 . F  S ICTR=$O(^TMP($J,"IVMCM",ISEG,ICTR)) Q:(ICTR="")!($D(IVMFERR))  D
"RTN","IVMCM1",151,0)
 . . S IVMSEG=$G(^TMP($J,"IVMCM",ISEG,ICTR)) Q:IVMSEG=""
"RTN","IVMCM1",152,0)
 . . S IVMIDT=+$P(IVMSEG,"^",11)        ;dep inactivation date
"RTN","IVMCM1",153,0)
 . . I $L(IVMIDT)<8 D  Q
"RTN","IVMCM1",154,0)
 . . . S IVMTEXT(6)="Invalid dependent inactivation date"
"RTN","IVMCM1",155,0)
 . . . D PROB^IVMCMC(IVMTEXT(6))
"RTN","IVMCM1",156,0)
 . . . D ERRBULL^IVMPREC7,MAIL^IVMUFNC("DGMT MT/CT UPLOAD ALERTS")
"RTN","IVMCM1",157,0)
 . . . S IVMFERR=""
"RTN","IVMCM1",158,0)
 . . S IVMIDT=$$FMDATE^HLFNC(IVMIDT)
"RTN","IVMCM1",159,0)
 . . D INPIEN^IVMCM2 Q:$D(IVMFERR)           ;add if not in 408.13
"RTN","IVMCM1",160,0)
 . . I IVMFLG2 D NEWPR^IVMCM3 Q:$D(IVMFERR)  ;add if not in 408.12
"RTN","IVMCM1",161,0)
 . . S X=IVMIDT                              ;inactivation date
"RTN","IVMCM1",162,0)
 . . S DA(1)=+DGPRI                          ;dependent 408.12 ien
"RTN","IVMCM1",163,0)
 . . D INACT1^IVMCM5                         ;inactivate dependent
"RTN","IVMCM1",164,0)
 ;
"RTN","IVMCM1",165,0)
COMPLETE ; complete means test, copay test, or Long Term Care test
"RTN","IVMCM1",166,0)
 ;
"RTN","IVMCM1",167,0)
 D EN^IVMCM6
"RTN","IVMCM1",168,0)
 ;
"RTN","IVMCM1",169,0)
 ; cleanup
"RTN","IVMCM1",170,0)
 K DGINI,DGIRI,DGMTDT,DGMTI,DGMTYPT,DGPRI,DGREL,DGVINI,DGVIRI
"RTN","IVMCM1",171,0)
 K IVMAR,IVMCEB,IVMCTR3,IVMFERR,IVMFLG1
"RTN","IVMCM1",172,0)
 K IVMFLG2,IVMFLG5,IVMHADJ,IVMMTB,IVMPRN
"RTN","IVMCM1",173,0)
 K IVMRELN,IVMRELO,IVMREQU,IVMSEG,IVMSPCHV,IVMX
"RTN","IVMCM1",174,0)
 Q
"RTN","IVMCM1",175,0)
 ;
"RTN","IVMCM1",176,0)
LTC ; transmission contains a long term care test (type 4)
"RTN","IVMCM1",177,0)
 ;
"RTN","IVMCM1",178,0)
 Q:'$P($G(^TMP($J,"IVMCM","ZMT4")),HLFS,2)
"RTN","IVMCM1",179,0)
 I "^1^2^"[("^"_$G(IVMTYPE)_"^") N IVMTYPE
"RTN","IVMCM1",180,0)
 S IVMTYPE=4,IVMFUTR=0
"RTN","IVMCM1",181,0)
 S IVMMTDT=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT4")),HLFS,2))
"RTN","IVMCM1",182,0)
 S TMSTAMP=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT4")),HLFS,25))
"RTN","IVMCM1",183,0)
 S SOURCE=$P($G(^TMP($J,"IVMCM","ZMT4")),HLFS,22)
"RTN","IVMCM1",184,0)
 S IVMLAST=$$LST^DGMTU(DFN,$E(IVMMTDT,1,3)_1231,4)
"RTN","IVMCM1",185,0)
 S IVMMTIEN=+IVMLAST  ;last LTC test
"RTN","IVMCM1",186,0)
 ;deletion indicator sent?
"RTN","IVMCM1",187,0)
 I $P($G(^TMP($J,"IVMCM","ZMT4")),HLFS,3)=HLQ D  Q
"RTN","IVMCM1",188,0)
 .Q:('IVMMTIEN)
"RTN","IVMCM1",189,0)
 .S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM1",190,0)
 .I $$EN^IVMCMD(IVMMTIEN) D
"RTN","IVMCM1",191,0)
 ..S RET=$$LST^DGMTU(DFN,DT,IVMTYPE)
"RTN","IVMCM1",192,0)
 ..S CODE=$S(($E($P(RET,"^",2),1,3)=$E(DT,1,3)):$P(RET,"^",4),1:"")
"RTN","IVMCM1",193,0)
 ..D ADD^IVMCMB(DFN,IVMTYPE,"DELETE LONG TERM CARE TEST",+$G(NODE0),$$GETCODE^DGMTH($P(NODE0,"^",3)),CODE)
"RTN","IVMCM1",194,0)
 ;
"RTN","IVMCM1",195,0)
 ;check date/time last edited, test date and source - if they match current test then this is a duplicate and does not need to be uploaded
"RTN","IVMCM1",196,0)
 N NODE0,NODE2
"RTN","IVMCM1",197,0)
 S NODE2=$G(^DGMT(408.31,IVMMTIEN,2)),NODE0=$G(^(0))
"RTN","IVMCM1",198,0)
 I TMSTAMP,TMSTAMP=$P(NODE2,"^",2),IVMMTDT=$P(NODE0,"^"),SOURCE=$P(NODE2,"^",5) Q
"RTN","IVMCM1",199,0)
 ;
"RTN","IVMCM1",200,0)
 D DELTYPE^IVMCMD(DFN,IVMMTDT,4)
"RTN","IVMCM1",201,0)
 I $P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,2)!($P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2)) D  Q
"RTN","IVMCM1",202,0)
 .S DGMTDT=IVMMTDT,DGMTYPT=IVMTYPE
"RTN","IVMCM1",203,0)
 .D ADD^DGMTA
"RTN","IVMCM1",204,0)
 .D COMPLETE^IVMCM1
"RTN","IVMCM1",205,0)
 D EN^IVMCM1
"RTN","IVMCM1",206,0)
 Q
"RTN","IVMCM2")
0^12^B19385978
"RTN","IVMCM2",1,0)
IVMCM2 ;ALB/SEK,CKN,TDM - ADD NEW DCD DEPENDENT TO INCOME PERSON FILE ; 7/31/08 2:26pm
"RTN","IVMCM2",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**17,105,115**;21-OCT-94;Build 28
"RTN","IVMCM2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMCM2",4,0)
 ;
"RTN","IVMCM2",5,0)
EN ; this routine will add entries to INCOME PERSON file (408.13) for
"RTN","IVMCM2",6,0)
 ; new dependents (spouse/children).  if DCD demo data (name, dob, 
"RTN","IVMCM2",7,0)
 ; ssn, sex) is different than VAMC data, 408.13 will be changed to
"RTN","IVMCM2",8,0)
 ; contain the DCD data.  the MEANS TEST CHANGES file (408.41) will
"RTN","IVMCM2",9,0)
 ; contain both values.
"RTN","IVMCM2",10,0)
 ;
"RTN","IVMCM2",11,0)
INPIEN ; get INCOME PERSON IEN
"RTN","IVMCM2",12,0)
 ; if PATIENT RELATION IEN not in ZDP
"RTN","IVMCM2",13,0)
 ;    add dependent to INCOME PERSON file if dependent not found
"RTN","IVMCM2",14,0)
 ;    dependent found if dob, sex, & relationship (408.12) match
"RTN","IVMCM2",15,0)
 ;
"RTN","IVMCM2",16,0)
 ;     Input    DFN     IEN of file #2
"RTN","IVMCM2",17,0)
 ;              IVMSEG  dependent's ZDP segment
"RTN","IVMCM2",18,0)
 ;
"RTN","IVMCM2",19,0)
 ; ivmflg1=1 have 408.13 ien when exit (found or added)
"RTN","IVMCM2",20,0)
 ; ivmflg2=1 dep record must be added to 408.12
"RTN","IVMCM2",21,0)
 ; ivmflg5=1 spouse ZDP incomplete(not dependent) - always spouse records
"RTN","IVMCM2",22,0)
 S (IVMFLG1,IVMFLG2,IVMFLG5)=0
"RTN","IVMCM2",23,0)
 S DGPRI=$P(IVMSEG,"^",7) ; ien of patient relation file
"RTN","IVMCM2",24,0)
 ;
"RTN","IVMCM2",25,0)
 S IVMNM=$$FMNAME^HLFNC($P(IVMSEG,"^",2)),IVMSEX=$P(IVMSEG,"^",3),IVMDOB=$$FMDATE^HLFNC($P(IVMSEG,"^",4)),IVMSSN=$P(IVMSEG,"^",5)
"RTN","IVMCM2",26,0)
 S IVMPSSNR=$P(IVMSEG,"^",10) ;Pseudo SSN Reason IVM*2*105
"RTN","IVMCM2",27,0)
 ;if there is a valid Pseudo SSN Reason, then append a "P" to the end
"RTN","IVMCM2",28,0)
 ;of the SSN so that it cam be recognized on VistA as a pseudo - IVM*2*115
"RTN","IVMCM2",29,0)
 S IVMSSN=$G(IVMSSN)_$S($G(IVMPSSNR)="N":"P",$G(IVMPSSNR)="R":"P",$G(IVMPSSNR)="S":"P",1:"")
"RTN","IVMCM2",30,0)
 S IVMEFFDT=$$FMDATE^HLFNC($P(IVMSEG,"^",9)),IVMRELN=$P(IVMSEG,"^",6)
"RTN","IVMCM2",31,0)
 S IVMSPMNM=$P(IVMSEG,"^",8) ;Spouse Maiden Name IVM*2*105
"RTN","IVMCM2",32,0)
 ;If not valid value, set it to null
"RTN","IVMCM2",33,0)
 I IVMPSSNR]"",IVMPSSNR'="R",IVMPSSNR'="S",IVMPSSNR'="N" S IVMPSSNR=""
"RTN","IVMCM2",34,0)
 S IVMSSNVS=$P(IVMSEG,"^",12) ;SSN Verification Status IVM*2*115
"RTN","IVMCM2",35,0)
 ;If not valid value, set it to null
"RTN","IVMCM2",36,0)
 I IVMSSNVS]"",IVMSSNVS'=2,IVMSSNVS'=4 S IVMSSNVS=""  ;IVM*2*115
"RTN","IVMCM2",37,0)
 ;
"RTN","IVMCM2",38,0)
 I IVMSPCHV="S"&((IVMNM']"")!(IVMSEX']"")!(IVMDOB']"")) S IVMFLG5=1 Q
"RTN","IVMCM2",39,0)
 I 'DGPRI G NOIEN
"RTN","IVMCM2",40,0)
 ;
"RTN","IVMCM2",41,0)
 ; if ien of patient relation file (dgpri) transmitted by IVM Center
"RTN","IVMCM2",42,0)
 ; and found in 408.12, get ien of income person.  if DCD demo data
"RTN","IVMCM2",43,0)
 ; is different, change in 408.13 & add to 408.41
"RTN","IVMCM2",44,0)
 ; ivmprn is 0 node of 408.12
"RTN","IVMCM2",45,0)
 ; dgipi is ien of 408.13
"RTN","IVMCM2",46,0)
 S IVMPRN=$G(^DGPR(408.12,+DGPRI,0))
"RTN","IVMCM2",47,0)
 I IVMPRN]"" D GETIPI Q:$D(IVMFERR)  S DGIPI=+$P($P(IVMPRN,"^",3),";"),IVMFLG1=1,IVMRELO=$P(IVMPRN,"^",2) D AUDITP^IVMCM9,AUDIT^IVMCM9 Q
"RTN","IVMCM2",48,0)
 ;
"RTN","IVMCM2",49,0)
NOIEN ; ien of patient relation file is not transmitted or transmitted and
"RTN","IVMCM2",50,0)
 ; not found
"RTN","IVMCM2",51,0)
 ; check if dependent in income person file
"RTN","IVMCM2",52,0)
 ; if dependent not found in 408.13, setup ivmstr =  0 node of 408.13
"RTN","IVMCM2",53,0)
 ; subscript of array IVMAR is ien of 408.12 transmitted by IVM Center or
"RTN","IVMCM2",54,0)
 ; created or found by upload.
"RTN","IVMCM2",55,0)
 ;
"RTN","IVMCM2",56,0)
 S DGPRI=0 F  S DGPRI=$O(^DGPR(408.12,"B",DFN,DGPRI)) Q:'DGPRI  D  Q:IVMFLG1!($D(IVMFERR))
"RTN","IVMCM2",57,0)
 .D GETIP
"RTN","IVMCM2",58,0)
 .Q:$D(IVMFERR)!($D(IVMAR(DGPRI)))!(IVMRELO=1)
"RTN","IVMCM2",59,0)
 .I IVMSEX=IVMSEX13&(IVMDOB=IVMDOB13)&(IVMRELN=IVMRELO) S IVMFLG1=1,IVMAR(DGPRI)=""
"RTN","IVMCM2",60,0)
 .Q
"RTN","IVMCM2",61,0)
 ;
"RTN","IVMCM2",62,0)
 ; found dependent in 408.13. if demo data different, change in 408.13
"RTN","IVMCM2",63,0)
 ; and add in 408.41
"RTN","IVMCM2",64,0)
 Q:$D(IVMFERR)
"RTN","IVMCM2",65,0)
 I IVMFLG1 S DGIPI=+$P($P(IVMPRN,"^",3),";") D AUDITP^IVMCM9,AUDIT1^IVMCM9 Q
"RTN","IVMCM2",66,0)
 ;
"RTN","IVMCM2",67,0)
 ; dependent not found. add record to 408.13
"RTN","IVMCM2",68,0)
 I 'IVMFLG1 D
"RTN","IVMCM2",69,0)
 .S $P(IVMSTR,"^")=IVMNM,$P(IVMSTR,"^",2)=IVMSEX,$P(IVMSTR,"^",3)=IVMDOB,$P(IVMSTR,"^",9)=IVMSSN,$P(IVMSTR,"^",10)=IVMPSSNR,$P(IVMSTR,"^",11)=IVMSSNVS,$P(IVMSTR1,"^")=IVMSPMNM
"RTN","IVMCM2",70,0)
 .D ADDDEP
"RTN","IVMCM2",71,0)
 Q
"RTN","IVMCM2",72,0)
 ;
"RTN","IVMCM2",73,0)
ADDDEP ; add dependent to 408.13 file
"RTN","IVMCM2",74,0)
 ; In - DFN=IEN of File #2
"RTN","IVMCM2",75,0)
 ;      DGRP0ND=0 node of 408.13
"RTN","IVMCM2",76,0)
 ;      DGRP1ND=1 node of 408.13
"RTN","IVMCM2",77,0)
 ;Out - DGIPI=408.13 IEN
"RTN","IVMCM2",78,0)
 ;
"RTN","IVMCM2",79,0)
 N X,Y
"RTN","IVMCM2",80,0)
 S DGRP0ND=IVMSTR
"RTN","IVMCM2",81,0)
 S DGRP1ND=IVMSTR1
"RTN","IVMCM2",82,0)
 K DINUM
"RTN","IVMCM2",83,0)
 S (DIK,DIC)="^DGPR(408.13,",DIC(0)="L",DLAYGO=408.13,X=$P(DGRP0ND,"^") K DD,DO D FILE^DICN S (DGIPI,DA)=+Y K DLAYGO
"RTN","IVMCM2",84,0)
 ;
"RTN","IVMCM2",85,0)
 ; if can't create stub notify site & IVM Center
"RTN","IVMCM2",86,0)
 I DGIPI'>0 D  Q
"RTN","IVMCM2",87,0)
 .S (IVMTEXT(6))="Can't create stub for file 408.13"
"RTN","IVMCM2",88,0)
 .D PROB^IVMCMC(IVMTEXT(6))
"RTN","IVMCM2",89,0)
 .D ERRBULL^IVMPREC7,MAIL^IVMUFNC("DGMT MT/CT UPLOAD ALERTS")
"RTN","IVMCM2",90,0)
 .S IVMFERR=""
"RTN","IVMCM2",91,0)
 L +^DGPR(408.13,+DGIPI) S ^DGPR(408.13,+DGIPI,0)=DGRP0ND,^DGPR(408.13,+DGIPI,1)=DGRP1ND D IX1^DIK L -^DGPR(408.13,+DGIPI)
"RTN","IVMCM2",92,0)
 S IVMFLG2=1 ; added dep to 408.13 must add to 408.12
"RTN","IVMCM2",93,0)
 K DIK,DIC
"RTN","IVMCM2",94,0)
 Q
"RTN","IVMCM2",95,0)
 ;
"RTN","IVMCM2",96,0)
 ;
"RTN","IVMCM2",97,0)
GETIP ; if can't find 408.12 record notify site & IVM Center
"RTN","IVMCM2",98,0)
 S IVMPRN=$G(^DGPR(408.12,+DGPRI,0))
"RTN","IVMCM2",99,0)
 S IVMRELO=$P(IVMPRN,"^",2)
"RTN","IVMCM2",100,0)
 I IVMPRN']"" D  Q
"RTN","IVMCM2",101,0)
 .S (IVMTEXT(6))="Can't find 408.12 record "_DGPRI
"RTN","IVMCM2",102,0)
 .D PROB^IVMCMC(IVMTEXT(6))
"RTN","IVMCM2",103,0)
 .D ERRBULL^IVMPREC7,MAIL^IVMUFNC("DGMT MT/CT UPLOAD ALERTS")
"RTN","IVMCM2",104,0)
 .S IVMFERR=""
"RTN","IVMCM2",105,0)
 Q:IVMRELO=1
"RTN","IVMCM2",106,0)
 ;
"RTN","IVMCM2",107,0)
GETIPI ; ivmseg13 is 0 node of income person file
"RTN","IVMCM2",108,0)
 ; get demo data in 408.13 & 408.12
"RTN","IVMCM2",109,0)
 S IVMSEG13=$$DEM^DGMTU1(DGPRI)
"RTN","IVMCM2",110,0)
 S IVMSG131=$$DEM1^DGMTU1(DGPRI) ;Get node 1
"RTN","IVMCM2",111,0)
 I IVMSEG13']"" D  Q
"RTN","IVMCM2",112,0)
 .S (IVMTEXT(6))="Can't find 408.13 record"
"RTN","IVMCM2",113,0)
 .D PROB^IVMCMC(IVMTEXT(6))
"RTN","IVMCM2",114,0)
 .D ERRBULL^IVMPREC7,MAIL^IVMUFNC("DGMT MT/CT UPLOAD ALERTS")
"RTN","IVMCM2",115,0)
 .S IVMFERR=""
"RTN","IVMCM2",116,0)
 S IVMSEX13=$P(IVMSEG13,"^",2),IVMDOB13=$P(IVMSEG13,"^",3),IVMSSN13=$P(IVMSEG13,"^",9),IVMPSR13=$P(IVMSEG13,"^",10),IVMSVS13=$P(IVMSEG13,"^",11)
"RTN","IVMCM2",117,0)
 S IVMSMN13=$P($G(IVMSG131),"^")
"RTN","IVMCM2",118,0)
 S IVMNM13=$P(IVMSEG13,"^")
"RTN","IVMCM2",119,0)
 Q
"RTN","IVMCM4")
0^13^B4317028
"RTN","IVMCM4",1,0)
IVMCM4 ;ALB/SEK,ERC - ADD DCD NEW INDIVIDUAL ANNUAL INCOME FILE ENTRIES ; 5/6/08 2:01pm
"RTN","IVMCM4",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**17,115**;21-OCT-94;Build 28
"RTN","IVMCM4",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMCM4",4,0)
 ;
"RTN","IVMCM4",5,0)
EN ; this routine will add entries to INDIVIDUAL ANNUAL INCOME file
"RTN","IVMCM4",6,0)
 ; (408.21)
"RTN","IVMCM4",7,0)
 ;
"RTN","IVMCM4",8,0)
 ; DFN       Patient file IEN
"RTN","IVMCM4",9,0)
 ; DGPRI     Patient Relation IEN
"RTN","IVMCM4",10,0)
 ; DGLY      Last Year
"RTN","IVMCM4",11,0)
 ; DGINI     New Individual Annual Income IEN
"RTN","IVMCM4",12,0)
 ; IVMSEG    ZIC record for veteran or spouse or dependent
"RTN","IVMCM4",13,0)
 ; IVMMTIEN  Means Test IEN (#408.31)
"RTN","IVMCM4",14,0)
 ; IVM0      408.21 0 node pieces 8-20
"RTN","IVMCM4",15,0)
 ; IVM1             1 node pieces 1-3
"RTN","IVMCM4",16,0)
 ; IVM2             2 node pieces 1-5
"RTN","IVMCM4",17,0)
 ;
"RTN","IVMCM4",18,0)
 N IVM0,IVM1,IVM2,IVMC
"RTN","IVMCM4",19,0)
 S DGINI=$$ADDIN^DGMTU2(DFN,DGPRI,DGLY)
"RTN","IVMCM4",20,0)
 ;
"RTN","IVMCM4",21,0)
 ; if can't create stub notify site & IVM Center
"RTN","IVMCM4",22,0)
 I DGINI'>0 D  Q
"RTN","IVMCM4",23,0)
 .S (IVMTEXT(6),HLERR)="Can't create stub for file 408.21"
"RTN","IVMCM4",24,0)
 .D ERRBULL^IVMPREC7,MAIL^IVMUFNC("DGMT MT/CT UPLOAD ALERTS")
"RTN","IVMCM4",25,0)
 .S IVMFERR=""
"RTN","IVMCM4",26,0)
 ;
"RTN","IVMCM4",27,0)
EN1 ; add 1 node for vet & child
"RTN","IVMCM4",28,0)
 ; add 2 node for vet, spouse & (when VR 1) child
"RTN","IVMCM4",29,0)
 ;
"RTN","IVMCM4",30,0)
 ; - zero node:pieces 8-20
"RTN","IVMCM4",31,0)
 F IVMC=3:1:12 S:$P(IVMSEG,"^",IVMC)=HLQ $P(IVMSEG,"^",IVMC)=""
"RTN","IVMCM4",32,0)
 S IVM0=$P(IVMSEG,"^",3,12)
"RTN","IVMCM4",33,0)
 ;
"RTN","IVMCM4",34,0)
 I IVMSPCHV'="S" F IVMC=13:1:15 S:$P(IVMSEG,"^",IVMC)=HLQ $P(IVMSEG,"^",IVMC)=""
"RTN","IVMCM4",35,0)
 I IVMSPCHV'="S" S IVM1=$P(IVMSEG,"^",13,15)
"RTN","IVMCM4",36,0)
 ;IVM*2.0*115
"RTN","IVMCM4",37,0)
 L +^DGMT(408.21,DGINI) S $P(^DGMT(408.21,DGINI,0),"^",8,20)=IVM0,DA=DGINI S:IVMSPCHV'="S" ^(1)=IVM1
"RTN","IVMCM4",38,0)
 N MTVERS
"RTN","IVMCM4",39,0)
 S MTVERS=$S(+$G(DGMTI):+$P($G(^DGMT(408.31,$G(DGMTI),2)),"^",11),1:0)
"RTN","IVMCM4",40,0)
 I +$G(MTVERS)=0 D
"RTN","IVMCM4",41,0)
 . I IVMSPCHV'="C" F IVMC=16:1:20 S:$P(IVMSEG,"^",IVMC)=HLQ $P(IVMSEG,"^",IVMC)=""
"RTN","IVMCM4",42,0)
 . I IVMSPCHV'="C" S IVM2=$P(IVMSEG,"^",16,20)
"RTN","IVMCM4",43,0)
 . S:IVMSPCHV'="C" ^DGMT(408.21,DGINI,2)=IVM2
"RTN","IVMCM4",44,0)
 E  D
"RTN","IVMCM4",45,0)
 . F IVMC=16,18,19 S:$P(IVMSEG,"^",IVMC)=HLQ $P(IVMSEG,"^",IVMC)=""
"RTN","IVMCM4",46,0)
 . S IVM2=$P(IVMSEG,"^",16)_"^^"_$P(IVMSEG,"^",18,19)
"RTN","IVMCM4",47,0)
 . S ^DGMT(408.21,DGINI,2)=IVM2
"RTN","IVMCM4",48,0)
 S DIK="^DGMT(408.21,"
"RTN","IVMCM4",49,0)
 D IX1^DIK L -^DGMT(408.21,DGINI)
"RTN","IVMCM4",50,0)
 K DA,DIK
"RTN","IVMCM4",51,0)
 Q
"RTN","IVMCM6")
0^14^B76408345
"RTN","IVMCM6",1,0)
IVMCM6 ;ALB/SEK,JAN,RTK,CKN,TDM,GN - COMPLETE DCD INCOME TEST ; 7/21/03 1:13pm
"RTN","IVMCM6",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**17,25,39,44,50,53,49,58,62,67,84,115**;21-OCT-94;Build 28
"RTN","IVMCM6",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMCM6",4,0)
 ;
"RTN","IVMCM6",5,0)
 ;IVM*2*84 - insure DGMTP is defined by LTC test prior to calling
"RTN","IVMCM6",6,0)
 ;           audit
"RTN","IVMCM6",7,0)
 ;
"RTN","IVMCM6",8,0)
EN ; This routine will update annual means test file (#408.31):
"RTN","IVMCM6",9,0)
 ;      
"RTN","IVMCM6",10,0)
 ; Note: There is no entry in 408.31 for income screening.
"RTN","IVMCM6",11,0)
 ;
"RTN","IVMCM6",12,0)
 ;
"RTN","IVMCM6",13,0)
 ;Input:
"RTN","IVMCM6",14,0)
 ;  DGMTI - ien of new Annual Means Test which requires completion
"RTN","IVMCM6",15,0)
 ;  IVMMTIEN - ien of replaced test (may not exist)
"RTN","IVMCM6",16,0)
 ;
"RTN","IVMCM6",17,0)
 ; - open case record in (#301.5) file
"RTN","IVMCM6",18,0)
 N DGREF,DATA,CODE,FIELD,RET,NODE0,NODE2,OK2SND
"RTN","IVMCM6",19,0)
 D CHKTST,OPEN
"RTN","IVMCM6",20,0)
 ;
"RTN","IVMCM6",21,0)
 ; - if income screening goto MTBULL
"RTN","IVMCM6",22,0)
 I IVMTYPE=3 G MTBULL
"RTN","IVMCM6",23,0)
 ;
"RTN","IVMCM6",24,0)
 ; - setup variables for (#408.31) file
"RTN","IVMCM6",25,0)
 ;get the ZMT segment, translate HLQ's to NULLS
"RTN","IVMCM6",26,0)
 S IVMSEG=$G(^TMP($J,"IVMCM","ZMT"_IVMTYPE)) ; get mt/copay ZMT segment
"RTN","IVMCM6",27,0)
 F FIELD=4:1:30 I FIELD'=24,$P(IVMSEG,HLFS,FIELD)=HLQ S $P(IVMSEG,HLFS,FIELD)=""
"RTN","IVMCM6",28,0)
 ;
"RTN","IVMCM6",29,0)
 S IVM1=$$FMDATE^HLFNC($P(IVMSEG,"^",10)) ; dt/time completed
"RTN","IVMCM6",30,0)
 S IVM2=$P(IVMSEG,"^",7) ; agree to pay deductible
"RTN","IVMCM6",31,0)
 S IVM3=$$FMDATE^HLFNC($P(IVMSEG,"^",15)) ; dt vet signed test
"RTN","IVMCM6",32,0)
 S IVM4=$P(IVMSEG,"^",16) ; declines to give income info field
"RTN","IVMCM6",33,0)
 S:IVM4 DGREF=""
"RTN","IVMCM6",34,0)
 S IVM5=$$FMDATE^HLFNC($P(IVMSEG,"^",6)) ; dt/time of adjudication
"RTN","IVMCM6",35,0)
 S IVM6=$P(IVMSEG,"^",3) ;status
"RTN","IVMCM6",36,0)
 S IVM7=$P(IVMSEG,"^",13) ; hardship
"RTN","IVMCM6",37,0)
 S:$G(IVMHADJ) IVMCAT=$P(IVMSEG,"^",3) ; test status 
"RTN","IVMCM6",38,0)
 S IVM8=$P(IVMSEG,"^",22) ; site conducting test
"RTN","IVMCM6",39,0)
 S IVM9=$P(IVMSEG,"^",23) ; site granting hardship
"RTN","IVMCM6",40,0)
 S IVM10=$P(IVMSEG,"^",11) ; prev years threshold
"RTN","IVMCM6",41,0)
 S IVM11=$P(IVMSEG,"^",18) ; source of test
"RTN","IVMCM6",42,0)
 S IVM12=$$FMDATE^HLFNC($P(IVMSEG,"^",24)) ; hardship effective date
"RTN","IVMCM6",43,0)
 S IVM13=$$FMDATE^HLFNC($P(IVMSEG,"^",25)) ; date/time last edited
"RTN","IVMCM6",44,0)
 S IVM14=$P(IVMSEG,"^",26) ; test determined status
"RTN","IVMCM6",45,0)
 S IVM15=$P(IVMSEG,"^",4) ; income 
"RTN","IVMCM6",46,0)
 S IVM16=$P(IVMSEG,"^",5) ; net worth
"RTN","IVMCM6",47,0)
 S IVM17=$P(IVMSEG,"^",8) ; threshold A
"RTN","IVMCM6",48,0)
 S IVM18=$P(IVMSEG,"^",9) ; deductible expenses
"RTN","IVMCM6",49,0)
 S IVM19=$P(IVMSEG,"^",12) ; total dependents
"RTN","IVMCM6",50,0)
 S IVM20=$P(IVMSEG,"^",27) ; signature valid?
"RTN","IVMCM6",51,0)
 S IVM21=$$FMDATE^HLFNC($P(IVMSEG,"^",14)) ; hardship review date
"RTN","IVMCM6",52,0)
 S IVM22=$P(IVMSEG,"^",28) ; GMT threshold
"RTN","IVMCM6",53,0)
 S IVM23=$P(IVMSEG,"^",29) ; hardship reason
"RTN","IVMCM6",54,0)
 S IVM24=+$P(IVMSEG,"^",30) ; Means Test Version
"RTN","IVMCM6",55,0)
 ;
"RTN","IVMCM6",56,0)
 ;old tests may not have the field Test-Determined Status
"RTN","IVMCM6",57,0)
 I IVM14="" D
"RTN","IVMCM6",58,0)
 . I IVMTYPE=1,IVM7,"AG"[IVM6 D  Q
"RTN","IVMCM6",59,0)
 . . I IVM6="A",(IVM15'>IVM22) S IVM14="G" Q   ;Income <= GMT Threshold
"RTN","IVMCM6",60,0)
 . . S IVM14="C"
"RTN","IVMCM6",61,0)
 . S IVM14=IVM6
"RTN","IVMCM6",62,0)
 ;
"RTN","IVMCM6",63,0)
 ; - fields for means test, copay test and Long Term Care Test
"RTN","IVMCM6",64,0)
 S DATA(.14)=IVM4,DATA(.18)=IVM19,DATA(.23)=IVM11,DATA(2.05)=IVM8,DATA(.06)=DUZ,DATA(.07)=IVM1,DATA(2.02)=IVM13,DATA(2.03)=$$GETSTAT^DGMTH(IVM14,IVMTYPE),DATA(2.11)=IVM24
"RTN","IVMCM6",65,0)
 ;
"RTN","IVMCM6",66,0)
 I IVM7 S DATA(.08)=.5,DATA(.09)=$$NOW^XLFDT
"RTN","IVMCM6",67,0)
 ;
"RTN","IVMCM6",68,0)
 I 'IVM4 S DATA(.04)=IVM15,DATA(.15)=IVM18
"RTN","IVMCM6",69,0)
 ;
"RTN","IVMCM6",70,0)
 ; - means test fields
"RTN","IVMCM6",71,0)
 I IVMTYPE=1 D
"RTN","IVMCM6",72,0)
 . S DATA(.11)=IVM2,DATA(.12)=IVM17,DATA(.2)=IVM7,DATA(.24)=IVM3,DATA(.29)=IVM20,DATA(2.04)=IVM9,DATA(.1)=IVM5,DATA(2.01)=IVM12
"RTN","IVMCM6",73,0)
 . I 'IVM4 S DATA(.05)=IVM16
"RTN","IVMCM6",74,0)
 . S DATA(.16)=IVM10,DATA(.21)=IVM21,DATA(.27)=IVM22,DATA(2.09)=IVM23
"RTN","IVMCM6",75,0)
 ;
"RTN","IVMCM6",76,0)
 ; - Long Term Care fields
"RTN","IVMCM6",77,0)
 I IVMTYPE=4 D
"RTN","IVMCM6",78,0)
 . N DATE,TYPE
"RTN","IVMCM6",79,0)
 . ;set pointer to associated means test or RX copay test if there is one
"RTN","IVMCM6",80,0)
 . I $P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,2) S DATE=$P(^TMP($J,"IVMCM","ZMT1"),HLFS,2),TYPE=1
"RTN","IVMCM6",81,0)
 . E  I $P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2) S DATE=$P(^TMP($J,"IVMCM","ZMT2"),HLFS,2),TYPE=2
"RTN","IVMCM6",82,0)
 . I $G(DATE) S DATA(2.08)=$P($$LST^DGMTU(DFN,DATE,TYPE),"^")
"RTN","IVMCM6",83,0)
 . S DATA(.11)=IVM2
"RTN","IVMCM6",84,0)
 . I 'IVM4 S DATA(.05)=IVM16
"RTN","IVMCM6",85,0)
 . K DATA(2.03)  ;test determined status is not used in LTC test
"RTN","IVMCM6",86,0)
 ;
"RTN","IVMCM6",87,0)
 I $G(IVMMTIEN) D
"RTN","IVMCM6",88,0)
 . ; Get record data to compare with HL7 Message data
"RTN","IVMCM6",89,0)
 . S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM6",90,0)
 . S NODE2=$G(^DGMT(408.31,IVMMTIEN,2))
"RTN","IVMCM6",91,0)
 . ;
"RTN","IVMCM6",92,0)
 . ; If Site Conducting Test is the same, get Completed By from record.
"RTN","IVMCM6",93,0)
 . I $P(NODE2,"^",5)=IVM8 S DATA(.06)=$P(NODE0,"^",6)
"RTN","IVMCM6",94,0)
 . ;
"RTN","IVMCM6",95,0)
 . ; If there are Comments, copy them into new record
"RTN","IVMCM6",96,0)
 . I $D(^DGMT(408.31,IVMMTIEN,"C")) S DATA(50)="^DGMT(408.31,"_IVMMTIEN_",""C"")"
"RTN","IVMCM6",97,0)
 . ;
"RTN","IVMCM6",98,0)
 . I IVMTYPE=1 D
"RTN","IVMCM6",99,0)
 . . ; Hardship is YES in msg and record, and the Site Granting Hardship
"RTN","IVMCM6",100,0)
 . . ; is the same as the site receiving the msg, keep the record data
"RTN","IVMCM6",101,0)
 . . I IVM7,$P(NODE0,"^",20),IVM9=$P($$SITE^VASITE,"^",3) S DATA(.21)=$P(NODE0,"^",21),DATA(.22)=$P(NODE0,"^",22),DATA(2.01)=$P(NODE2,"^",1),DATA(.08)=$P(NODE0,"^",8),DATA(.09)=$P(NODE0,"^",9)
"RTN","IVMCM6",102,0)
 . . ;
"RTN","IVMCM6",103,0)
 . . ; Hardship is YES in msg and record, and the Site Granting Hardship
"RTN","IVMCM6",104,0)
 . . ; is NOT the same in both the msg and record, keep the message data
"RTN","IVMCM6",105,0)
 . . I IVM7,$P(NODE0,"^",20),$P(NODE2,"^",4)'=IVM9 S DATA(.22)=DATA(.06)
"RTN","IVMCM6",106,0)
 . . ;
"RTN","IVMCM6",107,0)
 . . ; Hardship is YES in msg and NO in record, keep the message data
"RTN","IVMCM6",108,0)
 . . I IVM7,'$P(NODE0,"^",20) S DATA(.22)=DATA(.06)
"RTN","IVMCM6",109,0)
 . . ;
"RTN","IVMCM6",110,0)
 . . ; Hardship is set to delete in msg, delete the Hardship
"RTN","IVMCM6",111,0)
 . . I IVM12=HLQ!('IVM7&($P(NODE0,"^",20))) D
"RTN","IVMCM6",112,0)
 . . . S (DATA(.08),DATA(.09),DATA(.2),DATA(.21),DATA(.22),DATA(2.01),DATA(2.04),DATA(2.09))=""
"RTN","IVMCM6",113,0)
 . . . I $P(NODE0,"^",20) D BULL2^IVMCMB(DFN,$P(NODE2,"^"),$P(NODE2,"^",4))
"RTN","IVMCM6",114,0)
 . . ;
"RTN","IVMCM6",115,0)
 . . ; Hardship is NO in msg and in record, keep the message data
"RTN","IVMCM6",116,0)
 . . I 'IVM7,'$P(NODE0,"^",20) S DATA(.22)=""
"RTN","IVMCM6",117,0)
 . . ;
"RTN","IVMCM6",118,0)
 . . ; Notify site of hardship?
"RTN","IVMCM6",119,0)
 . . I IVM12'=HLQ,IVM7,((IVM12'=$P(NODE2,"^"))!('$P(NODE0,"^",20))) D BULL1^IVMCMB(DFN,IVM12,IVM9)
"RTN","IVMCM6",120,0)
 . . ;
"RTN","IVMCM6",121,0)
 . . ; Notify site to discontinue net-worth development?
"RTN","IVMCM6",122,0)
 . . I IVM11=3,$P(NODE0,"^",23)=1,$$GETCODE^DGMTH($P(NODE0,"^",3))="P" D BULL3^IVMCMB(DFN)
"RTN","IVMCM6",123,0)
 ;
"RTN","IVMCM6",124,0)
 ;determine status based on test-determined status and hardship
"RTN","IVMCM6",125,0)
 S CODE=IVM14
"RTN","IVMCM6",126,0)
 I IVMTYPE=1,DATA(.2) S CODE=IVM6
"RTN","IVMCM6",127,0)
 S DATA(.03)=$$GETSTAT^DGMTH(CODE,IVMTYPE)
"RTN","IVMCM6",128,0)
 ;
"RTN","IVMCM6",129,0)
 I $$UPD^DGENDBS(408.31,DGMTI,.DATA) D
"RTN","IVMCM6",130,0)
 . ; can't call MT Events protocol for Long Term Care Copay Exemption
"RTN","IVMCM6",131,0)
 . ; Tests as it triggers an IB and Enrollment update
"RTN","IVMCM6",132,0)
 . ; so manually call needed protocols to trigger audit, date stamp
"RTN","IVMCM6",133,0)
 . ; and transmission (if necessary)
"RTN","IVMCM6",134,0)
 . I IVMTYPE=4 D  Q
"RTN","IVMCM6",135,0)
 . . S:$G(DGMTACT)="" DGMTACT="ADD"
"RTN","IVMCM6",136,0)
 . . S DGMTP=$G(DGMTP)                                       ;IVM*2*84
"RTN","IVMCM6",137,0)
 . . S DGMTINF=1  ;Means Test Interactive/Non-interactive flag
"RTN","IVMCM6",138,0)
 . . D AFTER^DGMTEVT
"RTN","IVMCM6",139,0)
 . . D EN^DGMTAUD                   ;means test audit event
"RTN","IVMCM6",140,0)
 . . D ^IVMPMTE                     ;IVM means test event
"RTN","IVMCM6",141,0)
 . . D DATETIME^DGMTU4($G(DGMTI))   ;date stamp
"RTN","IVMCM6",142,0)
 . ;
"RTN","IVMCM6",143,0)
 . ; - call means test event driver if not future test
"RTN","IVMCM6",144,0)
 . I 'IVMFUTR D
"RTN","IVMCM6",145,0)
 . . D:(IVMTYPE=1) MTPRIME^DGMTU4(DGMTI)
"RTN","IVMCM6",146,0)
 . . D:(IVMTYPE=2) RXPRIME^DGMTU4(DGMTI)
"RTN","IVMCM6",147,0)
 . . S CODE=$$GETCODE^DGMTH($P($G(^DGMT(408.31,DGMTI,0)),"^",3))
"RTN","IVMCM6",148,0)
 . E  D
"RTN","IVMCM6",149,0)
 . . ;enter to list of future tests kept in the IVM Patient file
"RTN","IVMCM6",150,0)
 . . D ADDFUTR^IVMPLOG2(DGMTI)
"RTN","IVMCM6",151,0)
 . . ;also, if HEC changed the test to a future date, there could be
"RTN","IVMCM6",152,0)
 . . ;a test on file for the same income year marked as primary
"RTN","IVMCM6",153,0)
 . . I $G(IVMMTIEN),$P(NODE2,"^",5)=IVM8 D
"RTN","IVMCM6",154,0)
 . . . N DATA,ERROR,DGMTI,DGMTACT,DGMTYPT,DGMTA
"RTN","IVMCM6",155,0)
 . . . S DATA(2)=0
"RTN","IVMCM6",156,0)
 . . . I $$UPD^DGENDBS(408.31,IVMMTIEN,.DATA,.ERROR)
"RTN","IVMCM6",157,0)
 . . . ; if the test being replaced by the uploaded future test
"RTN","IVMCM6",158,0)
 . . . ; becomes non-primary and the site conducted both tests
"RTN","IVMCM6",159,0)
 . . . ; then call Means Test event driver (non interactively)
"RTN","IVMCM6",160,0)
 . . . S DGMTACT="EDT",DGMTI=IVMMTIEN,DGMTYPT=IVMTYPE,DGMTINF=1
"RTN","IVMCM6",161,0)
 . . . D AFTER^DGMTEVT
"RTN","IVMCM6",162,0)
 . . . D EN^DGMTEVT
"RTN","IVMCM6",163,0)
 . . . D
"RTN","IVMCM6",164,0)
 . . . . N DGMSGF,DGADDF
"RTN","IVMCM6",165,0)
 . . . . S DGMSGF=1,DGADDF=0
"RTN","IVMCM6",166,0)
 . . . . D EN^DGMTR
"RTN","IVMCM6",167,0)
 . D:OK2SND TRNSMT
"RTN","IVMCM6",168,0)
 ;
"RTN","IVMCM6",169,0)
 ;
"RTN","IVMCM6",170,0)
MTBULL ; Build results array
"RTN","IVMCM6",171,0)
 D ADD^IVMCMB(DFN,IVMTYPE,$S(IVMFUTR:"Future Test",1:"New Test"),$G(IVMMTDT),$S($G(IVMMTIEN):$$GETCODE^DGMTH($P($G(^DGMT(408.31,IVMMTIEN,0)),"^",3)),1:""),CODE)
"RTN","IVMCM6",172,0)
 ;
"RTN","IVMCM6",173,0)
CLEANUP ; cleanup
"RTN","IVMCM6",174,0)
 K DGCAT,DGCOMF,DGMTACT,DGMTI,DGMTINF,DGMTPAR,DGTHB,IVMBU45,IVMOP,IVMOP1
"RTN","IVMCM6",175,0)
 K IVM1,IVM2,IVM3,IVM4,IVM5,IVM6,IVM7,IVM8,IVM9,IVM10,IVM11,IVM12,IVM13,IVM14,IVMCAT,IVMCEA,IVMCEB,IVMMTA,IVM15,IVM16,IVM17,IVM18,IVM19,IVM20,IVM21
"RTN","IVMCM6",176,0)
 K IVM22,IVM23,IVM24
"RTN","IVMCM6",177,0)
 Q
"RTN","IVMCM6",178,0)
 ;
"RTN","IVMCM6",179,0)
OPEN ; open case record for uploaded test
"RTN","IVMCM6",180,0)
 S IVMOP="",IVMOP=$O(^IVM(301.5,"AYR",DGLY,DFN,IVMOP)) I 'IVMOP D OPEN1 Q
"RTN","IVMCM6",181,0)
 S IVMOP1=$G(^IVM(301.5,IVMOP,0)) I 'IVMOP1 D OPEN1 Q
"RTN","IVMCM6",182,0)
 I $P(IVMOP1,"^",4)=1 S DA=+IVMOP D  Q
"RTN","IVMCM6",183,0)
 . S DIE="^IVM(301.5,",DR=".03////1;.04////0"
"RTN","IVMCM6",184,0)
 . D OPEN2
"RTN","IVMCM6",185,0)
 Q
"RTN","IVMCM6",186,0)
OPEN1 K DD,DO
"RTN","IVMCM6",187,0)
 S DIC="^IVM(301.5,",DIC(0)="LMNZ",X=DFN,DLAYGO=301.5
"RTN","IVMCM6",188,0)
 D FILE^DICN Q:Y'>0  S DA=+Y
"RTN","IVMCM6",189,0)
 S DIE="^IVM(301.5,",DR=".02////^S X=DGLY;.03////1;.04////0"
"RTN","IVMCM6",190,0)
OPEN2 D ^DIE K DD,DO,DIC,DLAYGO,X,Y,DIE,DR
"RTN","IVMCM6",191,0)
 Q
"RTN","IVMCM6",192,0)
 ;
"RTN","IVMCM6",193,0)
MTDRIVER ; call means test event driver
"RTN","IVMCM6",194,0)
 ; dgmtact
"RTN","IVMCM6",195,0)
 ; adj  adjudicated mt
"RTN","IVMCM6",196,0)
 ; cat  hardship mt
"RTN","IVMCM6",197,0)
 ; add  new mt or copay
"RTN","IVMCM6",198,0)
 ; edit corrected mt or copay
"RTN","IVMCM6",199,0)
 ;         
"RTN","IVMCM6",200,0)
 N IVMDA,IVMDT,IVMFLG,IVMMTDT,IVMNEW
"RTN","IVMCM6",201,0)
 S DGMTACT=$S($G(IVMHADJ)=1:"ADJ",$G(IVMHADJ)=2:"CAT",'$G(DGMTP):"ADD",1:"EDT")
"RTN","IVMCM6",202,0)
 D AFTER^DGMTEVT
"RTN","IVMCM6",203,0)
 S DGMTINF=1 ; non-interactive flag
"RTN","IVMCM6",204,0)
 D EN^DGMTEVT
"RTN","IVMCM6",205,0)
 Q
"RTN","IVMCM6",206,0)
 ;
"RTN","IVMCM6",207,0)
CHKTST ; Verify if the incoming Income Test requires a Z07 transmission.
"RTN","IVMCM6",208,0)
 ;
"RTN","IVMCM6",209,0)
 N MTREC,REC01,ZMTSEG
"RTN","IVMCM6",210,0)
 S OK2SND=0
"RTN","IVMCM6",211,0)
 S MTREC=$G(^DGMT(408.31,DGMTI,0))
"RTN","IVMCM6",212,0)
 Q:'$D(^DGMT(408.31,DGMTI,0))
"RTN","IVMCM6",213,0)
 ; Check if the Source of the Test is DCD
"RTN","IVMCM6",214,0)
 S ZMTSEG=$G(^TMP($J,"IVMCM","ZMT"_IVMTYPE))
"RTN","IVMCM6",215,0)
 Q:$P($G(^DG(408.34,+$P(ZMTSEG,U,18),0)),U)'="DCD"
"RTN","IVMCM6",216,0)
 ;Check if the DCD software has been installed
"RTN","IVMCM6",217,0)
 Q:'$$VERSION^XPDUTL("IVMC")
"RTN","IVMCM6",218,0)
 ;
"RTN","IVMCM6",219,0)
 ; If the source of the test is DCD, and the site receiving the test
"RTN","IVMCM6",220,0)
 ; is a DCD site, set the record to transmit.
"RTN","IVMCM6",221,0)
 S OK2SND=1
"RTN","IVMCM6",222,0)
 Q
"RTN","IVMCM6",223,0)
 ;
"RTN","IVMCM6",224,0)
TRNSMT ; Set the record to transmit due to DCD Criteria
"RTN","IVMCM6",225,0)
 N REC01,DCDDATA,DCDIEN,EVENTS,ERROR
"RTN","IVMCM6",226,0)
 S REC01=$O(^IVM(301.5,"AYR",DGLY,DFN,""))
"RTN","IVMCM6",227,0)
 S DCDDATA(.04)=0,DCDIEN=REC01
"RTN","IVMCM6",228,0)
 I $$UPD^DGENDBS(301.5,DCDIEN,.DCDDATA,.ERROR)
"RTN","IVMCM6",229,0)
 S EVENTS("DCD")=1
"RTN","IVMCM6",230,0)
 I $$SETSTAT^IVMPLOG(REC01,.EVENTS)
"RTN","IVMCM6",231,0)
 ;
"RTN","IVMCM6",232,0)
 Q
"RTN","IVMCM9")
0^15^B7931917
"RTN","IVMCM9",1,0)
IVMCM9 ;ALB/SEK,CKN,TDM - ADD DCD DEPENDENT CHANGES TO 408.13 & 408.41 ; 5/10/06 11:19am
"RTN","IVMCM9",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**17,105,115**;21-OCT-94;Build 28
"RTN","IVMCM9",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMCM9",4,0)
 ;
"RTN","IVMCM9",5,0)
AUDIT ; change dependent demo data in 408.13 and add changes to 408.41.
"RTN","IVMCM9",6,0)
 ; if IVM transmitted IEN of 408.12 and IEN found at VAMC, any of the
"RTN","IVMCM9",7,0)
 ; 4 demo fields could be different.  if ien of 408.12 is not
"RTN","IVMCM9",8,0)
 ; transmitted and dependent is found in 408.13, name & ssn could be
"RTN","IVMCM9",9,0)
 ; different because sex, dob, & relationship (408.12) must be the same.
"RTN","IVMCM9",10,0)
 I IVMDOB'=IVMDOB13 D
"RTN","IVMCM9",11,0)
 .S DGMTACT="DOB",DGMTSOLD=IVMDOB13,DGMTSNEW=IVMDOB D SET^DGMTAUD
"RTN","IVMCM9",12,0)
 .S IVMDR=".03////^S X=IVMDOB"
"RTN","IVMCM9",13,0)
 .Q
"RTN","IVMCM9",14,0)
 I IVMSEX'=IVMSEX13 D
"RTN","IVMCM9",15,0)
 .S DGMTACT="SEX",DGMTSOLD=IVMSEX13,DGMTSNEW=IVMSEX D SET^DGMTAUD
"RTN","IVMCM9",16,0)
 .S IVMDR=$S($D(IVMDR):IVMDR_";",1:"") S IVMDR=IVMDR_".02////^S X=IVMSEX"
"RTN","IVMCM9",17,0)
 .Q
"RTN","IVMCM9",18,0)
AUDIT1 I IVMNM'=IVMNM13 D
"RTN","IVMCM9",19,0)
 .S DGMTACT="NAM",DGMTSOLD=IVMNM13,DGMTSNEW=IVMNM D SET^DGMTAUD
"RTN","IVMCM9",20,0)
 .S IVMDR=$S($D(IVMDR):IVMDR_";",1:"") S IVMDR=IVMDR_".01////^S X=IVMNM"
"RTN","IVMCM9",21,0)
 .Q
"RTN","IVMCM9",22,0)
 I IVMSSN'=IVMSSN13 D
"RTN","IVMCM9",23,0)
 .;If spouse and not a pseudo quit if not verified
"RTN","IVMCM9",24,0)
 .Q:(IVMSPCHV="S")&(IVMSSNVS'=4)&(IVMSSN'["P")
"RTN","IVMCM9",25,0)
 .S DGMTACT="SSN",DGMTSOLD=IVMSSN13,DGMTSNEW=IVMSSN D SET^DGMTAUD
"RTN","IVMCM9",26,0)
 .S IVMSSN=$S(IVMSSN="":"@",1:IVMSSN)
"RTN","IVMCM9",27,0)
 .S IVMDR=$S($D(IVMDR):IVMDR_";",1:"") S IVMDR=IVMDR_".09////^S X=IVMSSN"
"RTN","IVMCM9",28,0)
 .Q
"RTN","IVMCM9",29,0)
 I IVMPSSNR'=IVMPSR13 D
"RTN","IVMCM9",30,0)
 .S IVMPSSNR=$S(IVMPSSNR="":"@",1:IVMPSSNR)
"RTN","IVMCM9",31,0)
 .S IVMDR=$S($D(IVMDR):IVMDR_";",1:"") S IVMDR=IVMDR_".1////^S X=IVMPSSNR"
"RTN","IVMCM9",32,0)
 .Q
"RTN","IVMCM9",33,0)
 I IVMSSNVS'=IVMSVS13 D
"RTN","IVMCM9",34,0)
 .I IVMSPCHV="S",IVMSSNVS="" Q  ;If spouse quit if no verify status
"RTN","IVMCM9",35,0)
 .I IVMSPCHV="S",IVMSSNVS=2,IVMSSN'=IVMSSN13 Q  ;Quit if Spouse, verify status=Invalid and NO SSN match
"RTN","IVMCM9",36,0)
 .S IVMSSNVS=$S(IVMSSNVS="":"@",1:IVMSSNVS)
"RTN","IVMCM9",37,0)
 .S IVMDR=$S($D(IVMDR):IVMDR_";",1:"") S IVMDR=IVMDR_".11////^S X=IVMSSNVS"
"RTN","IVMCM9",38,0)
 .Q
"RTN","IVMCM9",39,0)
 I IVMSPMNM'=IVMSMN13 D
"RTN","IVMCM9",40,0)
 .S IVMSPMNM=$S(IVMSPMNM="":"@",1:IVMSPMNM)
"RTN","IVMCM9",41,0)
 .S IVMDR=$S($D(IVMDR):IVMDR_";",1:"") S IVMDR=IVMDR_"1.1////^S X=IVMSPMNM"
"RTN","IVMCM9",42,0)
 .Q
"RTN","IVMCM9",43,0)
 ;
"RTN","IVMCM9",44,0)
 ; change 408.13
"RTN","IVMCM9",45,0)
 I $D(IVMDR) S DR=IVMDR,DA=DGIPI,DIE="^DGPR(408.13," D ^DIE K DA,DIE,DR,IVMDR Q
"RTN","IVMCM9",46,0)
 K DGDEPI,DGMTA,DGMTACT,DGMTSNEW,DGMTSOLD
"RTN","IVMCM9",47,0)
 Q
"RTN","IVMCM9",48,0)
 ;
"RTN","IVMCM9",49,0)
AUDITP ; set common variables for audit
"RTN","IVMCM9",50,0)
 S DGMTYPT=$S(IVMTYPE=3:"",1:IVMTYPE),DGDEPI=DGIPI
"RTN","IVMCM9",51,0)
 I IVMMTIEN S DGMTA=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM9",52,0)
 S $P(DGMTA,"^",2)=DFN
"RTN","IVMCM9",53,0)
 K IVMDR
"RTN","IVMCM9",54,0)
 ;
"RTN","IVMCM9",55,0)
 ; dgrel("s") contains 408.12 IEN of active spouse of VAMC test
"RTN","IVMCM9",56,0)
 ; dgrel("c",xxx) contains 408.12 IEN of active children of VAMC test
"RTN","IVMCM9",57,0)
 ; if VAMC dependent not a DCD dependent the dependent must be inactivated
"RTN","IVMCM9",58,0)
 ; dependents remaining in dgrel after all DCD dependents are uploaded, will be inactivated
"RTN","IVMCM9",59,0)
 ; if DCD & VAMC dependent, kill dgrel to prevent inactivation of dependent
"RTN","IVMCM9",60,0)
 ; dgpri is DCD (or DCD & VAMC) dependent's 408.12 IEN
"RTN","IVMCM9",61,0)
 I IVMSPCHV="S" D  Q
"RTN","IVMCM9",62,0)
 .I +$G(DGREL("S"))=DGPRI K DGREL("S")
"RTN","IVMCM9",63,0)
 S IVMFLG4=1,IVMCC=0 F  S IVMCC=$O(DGREL("C",IVMCC)) Q:'IVMCC  D  Q:'IVMFLG4
"RTN","IVMCM9",64,0)
 .I +$G(DGREL("C",IVMCC))=DGPRI S IVMFLG4=0 K DGREL("C",IVMCC)
"RTN","IVMCM9",65,0)
 K IVMCC
"RTN","IVMCM9",66,0)
 Q
"RTN","IVMCMC")
0^16^B37984998
"RTN","IVMCMC",1,0)
IVMCMC ;ALB/SEK,BRM,GN,TDM - CHECK INCOME TEST TRANSMISSION SEGMENTS ; 8/15/08 10:20am
"RTN","IVMCMC",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**17,34,49,51,90,115**;21-OCT-94;Build 28
"RTN","IVMCMC",3,0)
 ;
"RTN","IVMCMC",4,0)
 ;IVM*2*90 - stop upload of LTC type 4 test when staus code not valid
"RTN","IVMCMC",5,0)
 ;
"RTN","IVMCMC",6,0)
EN ; Check segment structure of Income Test (Z10) transmission.
"RTN","IVMCMC",7,0)
 ;  Variable input:
"RTN","IVMCMC",8,0)
 ;      IVMDA  --  pointer to an incoming message line in file #772
"RTN","IVMCMC",9,0)
 ;     IVMORF  --  [optional]: set to 1 if Z10 is an ORF message
"RTN","IVMCMC",10,0)
 ;     IVMSEG  --  the MSH segment string
"RTN","IVMCMC",11,0)
 ; 
"RTN","IVMCMC",12,0)
 ;     plus the usual HL7 variables: HLDA, HLFS, HLQ, HLECH
"RTN","IVMCMC",13,0)
 ; 
"RTN","IVMCMC",14,0)
 ;  Variable output:
"RTN","IVMCMC",15,0)
 ;        DFN  --  pointer to the patient in file #2
"RTN","IVMCMC",16,0)
 ;       DGLY  --  Income Year
"RTN","IVMCMC",17,0)
 ;    IVMFLGC  --  Number of Dependent Children
"RTN","IVMCMC",18,0)
 ;    IVMMCI   --  HL7 message control id of query sent to IVM Center
"RTN","IVMCMC",19,0)
 ; 
"RTN","IVMCMC",20,0)
 ;    and the global array ^TMP($J,"IVMCM" which holds the message.
"RTN","IVMCMC",21,0)
 ;
"RTN","IVMCMC",22,0)
 N ERRMSG,DOBP,SEXP,X,Y,ZDPIFLG,TMPARY,PID3ARY,ICN
"RTN","IVMCMC",23,0)
 ;
"RTN","IVMCMC",24,0)
 ; - message control id from MSH segment
"RTN","IVMCMC",25,0)
 S MSGID=$P(IVMSEG,HLFS,10)
"RTN","IVMCMC",26,0)
 ;
"RTN","IVMCMC",27,0)
 ; - if query response (ORF), do additional edit checks
"RTN","IVMCMC",28,0)
 I $G(IVMORF) D ADDL I $D(HLERR) G ENQ
"RTN","IVMCMC",29,0)
 ;
"RTN","IVMCMC",30,0)
 ; - check the PID segment and get a match on patient
"RTN","IVMCMC",31,0)
 D GET("PIDV") I IVMSEG1'="PID" D PROB("Missing PID segment") G ENQ
"RTN","IVMCMC",32,0)
 ;S DOBP=$P(IVMSEG,HLFS,8),SEXP=$P(IVMSEG,HLFS,9)
"RTN","IVMCMC",33,0)
 S DOBP=$G(^TMP($J,"IVMCM","PIDV",7)),SEXP=$G(^TMP($J,"IVMCM","PIDV",8))
"RTN","IVMCMC",34,0)
 ;S SSNP=$G(^TMP($J,"IVMCM","PIDV",19))
"RTN","IVMCMC",35,0)
 I SEXP'="F"&(SEXP'="M") D PROB("Incorrect value for Sex") G ENQ
"RTN","IVMCMC",36,0)
 S X=$$FMDATE^HLFNC(DOBP),%DT=X D ^%DT I Y<0 D PROB("Invalid Date of Birth") G ENQ
"RTN","IVMCMC",37,0)
 ;S DFN=$$LOOKUP^IVMUFNC(SSNP,Y,SEXP,.ERRMSG)
"RTN","IVMCMC",38,0)
 ;I 'DFN D PROB(ERRMSG) G ENQ
"RTN","IVMCMC",39,0)
 M TMPARY(3)=^TMP($J,"IVMCM","PIDV",3) D PARSPID3^IVMUFNC(.TMPARY,.PID3ARY)
"RTN","IVMCMC",40,0)
 S DFN=$G(PID3ARY("PI")),ICN=$G(PID3ARY("NI"))
"RTN","IVMCMC",41,0)
 I '$$MATCH^IVMUFNC(DFN,ICN,"","","I",.ERRMSG) D PROB(ERRMSG) G ENQ
"RTN","IVMCMC",42,0)
 K TMPARY,PID3ARY
"RTN","IVMCMC",43,0)
 ;
"RTN","IVMCMC",44,0)
 ; - check for veteran's ZIC and ZIR segments
"RTN","IVMCMC",45,0)
 D GET("ZICV") I IVMSEG1'="ZIC" D PROB("Missing veteran's ZIC segment") G ENQ
"RTN","IVMCMC",46,0)
 S DGLY=$$FMDATE^HLFNC($P(IVMSEG,"^",3)) ; income year
"RTN","IVMCMC",47,0)
 I 'DGLY D PROB("Missing veteran's Income Year") G ENQ
"RTN","IVMCMC",48,0)
 D GET("ZIRV") I IVMSEG1'="ZIR" D PROB("Missing veteran's ZIR segment") G ENQ
"RTN","IVMCMC",49,0)
 ;
"RTN","IVMCMC",50,0)
 ; - check for spouse's ZDP, ZIC, ZIR segments
"RTN","IVMCMC",51,0)
 D GET("ZDPS") I IVMSEG1'="ZDP" D PROB("Missing spouse's ZDP segment") G ENQ
"RTN","IVMCMC",52,0)
 D GET("ZICS") I IVMSEG1'="ZIC" D PROB("Missing spouse's ZIC segment") G ENQ
"RTN","IVMCMC",53,0)
 D GET("ZIRS") I IVMSEG1'="ZIR" D PROB("Missing spouse's ZIR segment") G ENQ
"RTN","IVMCMC",54,0)
 ;
"RTN","IVMCMC",55,0)
 ; - check for dependent children's ZDP, ZIC, ZIR segments and ZMT segment
"RTN","IVMCMC",56,0)
 S (IVMFLGC,ZDPIFLG)=0
"RTN","IVMCMC",57,0)
 F IVMNBR=1:1 D  I $D(HLERR)!(IVMSEG1="ZMT") Q
"RTN","IVMCMC",58,0)
 .D GET("ZDPC",IVMNBR) I IVMSEG1'="ZDP",IVMSEG1'="ZMT" D PROB("Missing child's ZDP segment or ZMT segment") Q
"RTN","IVMCMC",59,0)
 .I IVMSEG1="ZMT" Q
"RTN","IVMCMC",60,0)
 .I $P(IVMSEG,"^",2)=""!($P(IVMSEG,"^",3)="")!($P(IVMSEG,"^",4)="") D PROB("Missing child data from ZDP segment") Q
"RTN","IVMCMC",61,0)
 .Q:ZDPIFLG  ;No ZIC,ZIR segs or # of children for inactive dependents
"RTN","IVMCMC",62,0)
 .D GET("ZICC",IVMNBR) I IVMSEG1'="ZIC" D PROB("Missing child's ZIC segment") Q
"RTN","IVMCMC",63,0)
 .D GET("ZIRC",IVMNBR) I IVMSEG1'="ZIR" D PROB("Missing child's ZIR segment") Q
"RTN","IVMCMC",64,0)
 .S IVMFLGC=IVMFLGC+1 ; # of children
"RTN","IVMCMC",65,0)
 ;
"RTN","IVMCMC",66,0)
 I $D(HLERR) G ENQ
"RTN","IVMCMC",67,0)
 ;
"RTN","IVMCMC",68,0)
 ; - check for remaining ZMT and ZBT segments
"RTN","IVMCMC",69,0)
 D GET("ZMT2") I IVMSEG1'="ZMT" D PROB("Missing Copay Test ZMT segment") G ENQ
"RTN","IVMCMC",70,0)
 ;
"RTN","IVMCMC",71,0)
 ; ** added ZMT4 lines for LTC phase II (IVM*2*49)
"RTN","IVMCMC",72,0)
 ; uncomment after all sites have installed to enable consistency chk
"RTN","IVMCMC",73,0)
 D GET("ZMT4") I IVMSEG1'="ZMT" D PROB("Missing LTC Test ZMT segment") G ENQ
"RTN","IVMCMC",74,0)
 ;
"RTN","IVMCMC",75,0)
 ; remove next line after all sites have installed
"RTN","IVMCMC",76,0)
 ;D GET("ZMT4") I IVMSEG1'="ZMT" K ^TMP($J,"IVMCM","ZMT4") S IVMDA=IVMDA-1
"RTN","IVMCMC",77,0)
 ;
"RTN","IVMCMC",78,0)
 D GET("ZBT") I IVMSEG1'="ZBT" D PROB("Missing Beneficiary Travel ZBT segment") G ENQ
"RTN","IVMCMC",79,0)
 ;
"RTN","IVMCMC",80,0)
ENQ I IVMSEG1="MSH" S IVMDA=IVMDA-1,HLERR="",IVMTYPE=5
"RTN","IVMCMC",81,0)
 K IVMSEG1,IVMNBR
"RTN","IVMCMC",82,0)
 Q
"RTN","IVMCMC",83,0)
 ;
"RTN","IVMCMC",84,0)
 ;
"RTN","IVMCMC",85,0)
GET(SEG,NUM) ; Get the next HL7 segment.
"RTN","IVMCMC",86,0)
 ;  Formal input:
"RTN","IVMCMC",87,0)
 ;        SEG  --  String with which to build ^TMP($J,"IVMCM"
"RTN","IVMCMC",88,0)
 ;        NUM  --  Number to index child dependent strings [optional]
"RTN","IVMCMC",89,0)
 ;  Required variable input:
"RTN","IVMCMC",90,0)
 ;       HLDA  --  Pointer to the incoming message in file #772
"RTN","IVMCMC",91,0)
 ;      IVMDA  --  Pointer to the next message line within file #772
"RTN","IVMCMC",92,0)
 N NEXTSEG,NOPID,PIDCNTR,PIDSTR,SEQ
"RTN","IVMCMC",93,0)
 S IVMDA=$O(^TMP($J,IVMRTN,+IVMDA)),IVMSEG=$G(^(+IVMDA,0))
"RTN","IVMCMC",94,0)
 S NEXTSEG=$E($G(^TMP($J,IVMRTN,IVMDA+1,0)),1,3)
"RTN","IVMCMC",95,0)
 S IVMSEG1=$E(IVMSEG,1,3)
"RTN","IVMCMC",96,0)
 I $G(SEG)="" G GETQ
"RTN","IVMCMC",97,0)
 I IVMSEG1="ZIR" S IVMSEG=$$CLEARF^IVMPRECA(IVMSEG,HLFS,15)  ;Strip ""
"RTN","IVMCMC",98,0)
 I IVMSEG1="ZDP" S IVMSEG=$$CLEARF^IVMPRECA(IVMSEG,HLFS)     ;Strip ""
"RTN","IVMCMC",99,0)
 I $G(NUM),IVMSEG1'="ZMT" D  G GETQ
"RTN","IVMCMC",100,0)
 .I IVMSEG1="ZDP",$P(IVMSEG,HLFS,12)="",NEXTSEG'="ZIC" D PROB("Missing Child ZIC segment OR Inactive ZDP missing Inactivation Date") Q
"RTN","IVMCMC",101,0)
 .I IVMSEG1="ZDP",$P(IVMSEG,HLFS,12)'="" D
"RTN","IVMCMC",102,0)
 ..I NEXTSEG="ZIC" D PROB("ZIC segment following Inactive ZDP segment") Q
"RTN","IVMCMC",103,0)
 ..S ZDPIFLG=1
"RTN","IVMCMC",104,0)
 ..S SEG=$S($P(IVMSEG,HLFS,7)=2:"ZDPIS",1:"ZDPIC")
"RTN","IVMCMC",105,0)
 ..S NUM=$O(^TMP($J,"IVMCM",SEG,""),-1)+1
"RTN","IVMCMC",106,0)
 .Q:$D(HLERR)
"RTN","IVMCMC",107,0)
 .S ^TMP($J,"IVMCM",SEG,NUM)=$P(IVMSEG,HLFS,2,99)
"RTN","IVMCMC",108,0)
 I IVMSEG1="ZMT",$E(SEG,1,3)'="ZMT" S SEG="ZMT1"
"RTN","IVMCMC",109,0)
 ;
"RTN","IVMCMC",110,0)
 ;IVM*2*90   don't allow upload of LTC with a date & a bad status code
"RTN","IVMCMC",111,0)
 I SEG="ZMT4",$P(IVMSEG,HLFS,3),$P(IVMSEG,HLFS,4)'=0,$P(IVMSEG,HLFS,4)'=1,$P(IVMSEG,HLFS,4)'="""""" Q
"RTN","IVMCMC",112,0)
 ;
"RTN","IVMCMC",113,0)
 I IVMSEG1="PID" D  Q
"RTN","IVMCMC",114,0)
 .K ^TMP($J,"IVMCM",SEG)
"RTN","IVMCMC",115,0)
 .S (NOPID,PIDCNTR)=1
"RTN","IVMCMC",116,0)
 .S PIDSTR(PIDCNTR)=$P(IVMSEG,HLFS,2,99)
"RTN","IVMCMC",117,0)
 .F I=1:1 D  Q:NOPID
"RTN","IVMCMC",118,0)
 ..I $E($G(^TMP($J,IVMRTN,IVMDA+1,0)),1,4)="ZIC^" S NOPID=1 Q
"RTN","IVMCMC",119,0)
 ..S IVMDA=$O(^TMP($J,IVMRTN,+IVMDA))
"RTN","IVMCMC",120,0)
 ..S IVMSEG=$G(^TMP($J,IVMRTN,+IVMDA,0))
"RTN","IVMCMC",121,0)
 ..S PIDCNTR=PIDCNTR+1,PIDSTR(PIDCNTR)=IVMSEG
"RTN","IVMCMC",122,0)
 .D BLDPID^IVMPREC6(.PIDSTR,.IVMPID)
"RTN","IVMCMC",123,0)
 .M ^TMP($J,"IVMCM","PIDV")=IVMPID
"RTN","IVMCMC",124,0)
 ;
"RTN","IVMCMC",125,0)
 S ^TMP($J,"IVMCM",SEG)=$P(IVMSEG,HLFS,2,99)
"RTN","IVMCMC",126,0)
GETQ Q
"RTN","IVMCMC",127,0)
 ;
"RTN","IVMCMC",128,0)
PROB(ERR) ; Process encountered errors.
"RTN","IVMCMC",129,0)
 ;  Input:  ERR  --  Error text
"RTN","IVMCMC",130,0)
 S HLERR=ERR
"RTN","IVMCMC",131,0)
 D ACK^IVMPREC
"RTN","IVMCMC",132,0)
 Q
"RTN","IVMCMC",133,0)
 ;
"RTN","IVMCMC",134,0)
ADDL ; Perform additional segment checks for ORF messages.
"RTN","IVMCMC",135,0)
 ;
"RTN","IVMCMC",136,0)
 N DOB,ERRMSG,IVMMSA,IVMPAT,IVMQRD,IVMQRF,QARRAY,QRYIEN,SEX,SSN
"RTN","IVMCMC",137,0)
 ;
"RTN","IVMCMC",138,0)
 ; edit checks for MSA, QRD, and QRF segments
"RTN","IVMCMC",139,0)
 D GET("") I IVMSEG1'="MSA" D PROB("Missing required MSA segment") G ADDLQ
"RTN","IVMCMC",140,0)
 S IVMMCI=$P(IVMSEG,"^",3) ; msg control id of msg being acknowledged
"RTN","IVMCMC",141,0)
 S IVMMSA=IVMSEG
"RTN","IVMCMC",142,0)
 ; trace reply back to the original query msg
"RTN","IVMCMC",143,0)
 S QRYIEN=$$FINDMSG^IVMCQ2(IVMMCI)
"RTN","IVMCMC",144,0)
 I 'QRYIEN D PROB("Query not found") G ADDLQ
"RTN","IVMCMC",145,0)
 I QRYIEN,'$$GET^IVMCQ2(QRYIEN,.QARRAY) D PROB("Query not found") G ADDLQ
"RTN","IVMCMC",146,0)
 S DFN=QARRAY("DFN")
"RTN","IVMCMC",147,0)
 ;
"RTN","IVMCMC",148,0)
 D GET("") I IVMSEG1'="QRD" D PROB("Missing required QRD segment") G ADDLQ
"RTN","IVMCMC",149,0)
 S IVMQRD=IVMSEG
"RTN","IVMCMC",150,0)
 S SSN=$P(IVMQRD,HLFS,9)
"RTN","IVMCMC",151,0)
 ;
"RTN","IVMCMC",152,0)
 D GET("") I IVMSEG1'="QRF" D PROB("Missing required QRF segment") G ADDLQ
"RTN","IVMCMC",153,0)
 S IVMQRF=IVMSEG
"RTN","IVMCMC",154,0)
 S DOB=$$FMDATE^HLFNC($P(IVMQRF,HLFS,5))
"RTN","IVMCMC",155,0)
 S SEX=$P(IVMQRF,HLFS,6)
"RTN","IVMCMC",156,0)
 ;
"RTN","IVMCMC",157,0)
 ;
"RTN","IVMCMC",158,0)
 ; if application reject rec'd from HEC (i.e. No income data on file)
"RTN","IVMCMC",159,0)
 I $P(IVMMSA,HLFS,2)="AR" D
"RTN","IVMCMC",160,0)
 .S HLERR=""
"RTN","IVMCMC",161,0)
 .S IVMTYPE=7  ;type 4 is now used for LTC test (IVM*2*49)
"RTN","IVMCMC",162,0)
 .; - if patient identifiers rec'd from HEC incorrect, 
"RTN","IVMCMC",163,0)
 .;   queue off job to send a new query
"RTN","IVMCMC",164,0)
 .I $$GETPAT^IVMUFNC(DFN,.IVMPAT),((SSN'=IVMPAT("SSN"))!(DOB'=IVMPAT("DOB"))!(SEX'=IVMPAT("SEX"))) D QRYQUE^IVMCQ2(DFN)
"RTN","IVMCMC",165,0)
 ;
"RTN","IVMCMC",166,0)
ADDLQ Q
"RTN","IVMCME")
0^27^B13712271
"RTN","IVMCME",1,0)
IVMCME ;ALB/SEK,BRM,TDM - DCD INCOME TEST EDIT CHECK DRIVER ; 3/22/06 4:12pm
"RTN","IVMCME",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**17,49,58,115**;21-OCT-94;Build 28
"RTN","IVMCME",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMCME",4,0)
 ;
"RTN","IVMCME",5,0)
 ; This routine will perform edit checks to validate income tests
"RTN","IVMCME",6,0)
 ; which are transmitted to DHCP from that Data Collection Division
"RTN","IVMCME",7,0)
 ; of the IVM Center.  Any errors will be recorded and will be sent
"RTN","IVMCME",8,0)
 ; automatically to the IVM Center for processing.
"RTN","IVMCME",9,0)
 ;
"RTN","IVMCME",10,0)
 ; This routine is called from IVMCM1.
"RTN","IVMCME",11,0)
 ;
"RTN","IVMCME",12,0)
 ; Required Input:
"RTN","IVMCME",13,0)
 ;   The global array ^TMP($J,"IVMCM" which contains the income test
"RTN","IVMCME",14,0)
 ;   The local variable IVMTYPE, which may be:
"RTN","IVMCME",15,0)
 ;       1 - Means Test
"RTN","IVMCME",16,0)
 ;       2 - Copay Test
"RTN","IVMCME",17,0)
 ;       3 - Income Screening information only
"RTN","IVMCME",18,0)
 ;       4 - Long Term Care Test
"RTN","IVMCME",19,0)
 ;
"RTN","IVMCME",20,0)
 ; Output:
"RTN","IVMCME",21,0)
 ;   IVMMTERR as error condition found (free text)
"RTN","IVMCME",22,0)
 ;
"RTN","IVMCME",23,0)
EN() ; Entry point to begin edit checks.
"RTN","IVMCME",24,0)
 ;
"RTN","IVMCME",25,0)
 N ARRAY,DEP,ERROR,I,IEN,SPOUSE,STRING,TYPE,X,Y
"RTN","IVMCME",26,0)
 S ERROR=""
"RTN","IVMCME",27,0)
 ;
"RTN","IVMCME",28,0)
 I '$G(IVMTYPE) S ERROR="Income Test Type not Specified" G ENQ
"RTN","IVMCME",29,0)
 ;
"RTN","IVMCME",30,0)
 ; - build strings for the veteran
"RTN","IVMCME",31,0)
 S SPOUSE=0,DEP=1
"RTN","IVMCME",32,0)
 ;S ARRAY("PID")=$$CLEAR($G(^TMP($J,"IVMCM","PIDV")))
"RTN","IVMCME",33,0)
 S X=0 F  S X=$O(^TMP($J,"IVMCM","PIDV",X)) Q:X=""  D
"RTN","IVMCME",34,0)
 .I $D(^TMP($J,"IVMCM","PIDV",X))=1 D
"RTN","IVMCME",35,0)
 ..S ARRAY("PID",X)=$$CLEAR(^TMP($J,"IVMCM","PIDV",X))
"RTN","IVMCME",36,0)
 .I $D(^TMP($J,"IVMCM","PIDV",X))=10 D
"RTN","IVMCME",37,0)
 ..S Y=0 F  S Y=$O(^TMP($J,"IVMCM","PIDV",X,Y)) Q:Y=""  D
"RTN","IVMCME",38,0)
 ...S ARRAY("PID",X,Y)=$$CLEAR(^TMP($J,"IVMCM","PIDV",X,Y))
"RTN","IVMCME",39,0)
 ;
"RTN","IVMCME",40,0)
 S ARRAY("ZIC")=$$CLEAR($G(^TMP($J,"IVMCM","ZICV"))),$P(ARRAY("ZIC"),HLFS,21)=$$TOTAL(ARRAY("ZIC"))
"RTN","IVMCME",41,0)
 S ARRAY("ZIR")=$$CLEAR($G(^TMP($J,"IVMCM","ZIRV")))
"RTN","IVMCME",42,0)
 ;
"RTN","IVMCME",43,0)
 ; - build strings for spouse as dependent
"RTN","IVMCME",44,0)
 S ARRAY(DEP,"ZDP")=$$CLEAR($G(^TMP($J,"IVMCM","ZDPS")))
"RTN","IVMCME",45,0)
 S ARRAY(DEP,"ZIC")=$$CLEAR($G(^TMP($J,"IVMCM","ZICS")))
"RTN","IVMCME",46,0)
 S ARRAY(DEP,"ZIR")=$$CLEAR($G(^TMP($J,"IVMCM","ZIRS")))
"RTN","IVMCME",47,0)
 D ADJ
"RTN","IVMCME",48,0)
 ;
"RTN","IVMCME",49,0)
 ; - build strings for children as dependents
"RTN","IVMCME",50,0)
 S IEN=0 F  S IEN=$O(^TMP($J,"IVMCM","ZDPC",IEN)) Q:'IEN  D
"RTN","IVMCME",51,0)
 . S DEP=DEP+1
"RTN","IVMCME",52,0)
 . S ARRAY(DEP,"ZDP")=$$CLEAR($G(^TMP($J,"IVMCM","ZDPC",IEN)))
"RTN","IVMCME",53,0)
 . S ARRAY(DEP,"ZIC")=$$CLEAR($G(^TMP($J,"IVMCM","ZICC",IEN)))
"RTN","IVMCME",54,0)
 . S ARRAY(DEP,"ZIR")=$$CLEAR($G(^TMP($J,"IVMCM","ZIRC",IEN)))
"RTN","IVMCME",55,0)
 . D ADJ
"RTN","IVMCME",56,0)
 ;
"RTN","IVMCME",57,0)
 ; - build income test string and check for errors
"RTN","IVMCME",58,0)
 S ARRAY("ZMT")=$$CLEAR($G(^TMP($J,"IVMCM","ZMT"_IVMTYPE)))
"RTN","IVMCME",59,0)
 S ERROR=$$CHECK()
"RTN","IVMCME",60,0)
ENQ Q ERROR
"RTN","IVMCME",61,0)
 ;
"RTN","IVMCME",62,0)
 ;
"RTN","IVMCME",63,0)
CHECK() ; check validity of transmission data
"RTN","IVMCME",64,0)
 ;
"RTN","IVMCME",65,0)
 ; Output:  error message (first one found)
"RTN","IVMCME",66,0)
 ;
"RTN","IVMCME",67,0)
 N ERROR,IEN
"RTN","IVMCME",68,0)
 S ERROR=$$ZIC^IVMCME2(ARRAY("ZIC"))
"RTN","IVMCME",69,0)
 I ERROR']"" S ERROR=$$ZIR^IVMCME1(ARRAY("ZIR"))
"RTN","IVMCME",70,0)
 I ERROR']"","^1^2^4^"[("^"_IVMTYPE_"^") S ERROR=$$ZMT^IVMCME4(ARRAY("ZMT"))
"RTN","IVMCME",71,0)
 I ERROR']"" F IEN=0:0 S IEN=$O(ARRAY(IEN)) Q:'IEN  D  I ERROR]"" G CHECKQ ; check dependent segments
"RTN","IVMCME",72,0)
 . S ERROR=$$ZDP^IVMCME3(ARRAY(IEN,"ZDP"),IEN)
"RTN","IVMCME",73,0)
 . I ERROR']"" S ERROR=$$ZIC^IVMCME2(ARRAY(IEN,"ZIC"),IEN)
"RTN","IVMCME",74,0)
 . I ERROR']"" S ERROR=$$ZIR^IVMCME1(ARRAY(IEN,"ZIR"),IEN)
"RTN","IVMCME",75,0)
CHECKQ Q ERROR
"RTN","IVMCME",76,0)
 ;
"RTN","IVMCME",77,0)
 ;
"RTN","IVMCME",78,0)
CLEAR(NODE) ; convert HLQ to null
"RTN","IVMCME",79,0)
 N I
"RTN","IVMCME",80,0)
 F I=1:1:$L(NODE,HLFS) I $P(NODE,HLFS,I)=HLQ S $P(NODE,HLFS,I)=""
"RTN","IVMCME",81,0)
 Q NODE
"RTN","IVMCME",82,0)
 ;
"RTN","IVMCME",83,0)
 ;
"RTN","IVMCME",84,0)
TOTAL(STRING,INCR,DEP) ; append total on the end
"RTN","IVMCME",85,0)
 N I,D,N,INC,DEB,NET S (INC,DEB,NET)=""
"RTN","IVMCME",86,0)
INC ; income
"RTN","IVMCME",87,0)
 I $D(INCR),$P($G(DEP),HLFS,6)'=2,'$P(INCR,HLFS,9) S INC=0 G DEBT
"RTN","IVMCME",88,0)
 F I=3:1:12 S INC=$G(INC)+$P(STRING,HLFS,I)
"RTN","IVMCME",89,0)
DEBT ; debts
"RTN","IVMCME",90,0)
 F I=13:1:15 S DEB=$G(DEB)+$P(STRING,HLFS,I)
"RTN","IVMCME",91,0)
NET ; net worth
"RTN","IVMCME",92,0)
 F I=16:1:19 I $P(STRING,HLFS,I)]"" S NET=$G(NET)+$P(STRING,HLFS,I)
"RTN","IVMCME",93,0)
 I NET]"" S NET=NET-$P(STRING,HLFS,20)
"RTN","IVMCME",94,0)
 Q INC_HLFS_DEB_HLFS_NET
"RTN","IVMCME",95,0)
 ;
"RTN","IVMCME",96,0)
 ;
"RTN","IVMCME",97,0)
ADJ ; Adjust spouse dependent's strings
"RTN","IVMCME",98,0)
 I $P(ARRAY(DEP,"ZDP"),HLFS,6)=2,$P(ARRAY(DEP,"ZDP"),HLFS,2,4)'="^^" S SPOUSE=DEP
"RTN","IVMCME",99,0)
 I $P(ARRAY(DEP,"ZDP"),HLFS,6)=2,$P(ARRAY(DEP,"ZDP"),HLFS,2,4)="^^" K ARRAY(DEP) S DEP=DEP-1
"RTN","IVMCME",100,0)
 I DEP S $P(ARRAY(DEP,"ZIC"),HLFS,21)=$$TOTAL(ARRAY(DEP,"ZIC"),ARRAY(DEP,"ZIR"),ARRAY(DEP,"ZDP"))
"RTN","IVMCME",101,0)
 Q
"RTN","IVMCMF")
0^17^B14332096
"RTN","IVMCMF",1,0)
IVMCMF ;ALB/RMM,TDM - INCOME TEST EDIT CHECK DRIVER ; 2/1/07 10:14am
"RTN","IVMCMF",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**71,82,107,115**;21-OCT-94;Build 28
"RTN","IVMCMF",3,0)
 ;
"RTN","IVMCMF",4,0)
 ; This routine will perform edit checks to validate income tests which
"RTN","IVMCMF",5,0)
 ; are transmitted to VistA from the IVM Center. Any errors will be 
"RTN","IVMCMF",6,0)
 ; recorded and will be added to the record in the ANNUAL MEANS TEST 
"RTN","IVMCMF",7,0)
 ; File #408.31.
"RTN","IVMCMF",8,0)
 ;
"RTN","IVMCMF",9,0)
 ; This routine is called from IVMCM1.
"RTN","IVMCMF",10,0)
 ;
"RTN","IVMCMF",11,0)
 ; Required Input:
"RTN","IVMCMF",12,0)
 ;   The global array ^TMP($J,"IVMCM" which contains the income test
"RTN","IVMCMF",13,0)
 ;   The local variable IVMTYPE, which may be:
"RTN","IVMCMF",14,0)
 ;       1 - Means Test
"RTN","IVMCMF",15,0)
 ;       2 - Copay Test
"RTN","IVMCMF",16,0)
 ;       4 - Long Term Care Test
"RTN","IVMCMF",17,0)
 ;
"RTN","IVMCMF",18,0)
 ; Output:
"RTN","IVMCMF",19,0)
 ;   Array IVMERR as a list of error condition(s) found (free text)
"RTN","IVMCMF",20,0)
 ;
"RTN","IVMCMF",21,0)
EN(IVMERR) ; Entry point to begin edit checks.
"RTN","IVMCMF",22,0)
 ;
"RTN","IVMCMF",23,0)
 N ARRAY,DEP,I,IEN,SPOUSE,CNT,HLERR,ISEG,J
"RTN","IVMCMF",24,0)
 S (DEP,CNT)=1,SPOUSE=0
"RTN","IVMCMF",25,0)
 I +$G(IVMTYPE)'>0 S CNT=CNT+1,IVMERR(CNT)="Income Test Type not Specified"
"RTN","IVMCMF",26,0)
 ;
"RTN","IVMCMF",27,0)
 ; Build strings for the veteran
"RTN","IVMCMF",28,0)
 ;S ARRAY("PID")=$$CLEAR($G(^TMP($J,"IVMCM","PIDV")))
"RTN","IVMCMF",29,0)
 S I=0 F  S I=$O(^TMP($J,"IVMCM","PIDV",I)) Q:I=""  D
"RTN","IVMCMF",30,0)
 .I $D(^TMP($J,"IVMCM","PIDV",I))=1 D
"RTN","IVMCMF",31,0)
 ..S ARRAY("PID",I)=$$CLEAR(^TMP($J,"IVMCM","PIDV",I))
"RTN","IVMCMF",32,0)
 .I $D(^TMP($J,"IVMCM","PIDV",I))=10 D
"RTN","IVMCMF",33,0)
 ..S J=0 F  S J=$O(^TMP($J,"IVMCM","PIDV",I,J)) Q:J=""  D
"RTN","IVMCMF",34,0)
 ...S ARRAY("PID",I,J)=$$CLEAR(^TMP($J,"IVMCM","PIDV",I,J))
"RTN","IVMCMF",35,0)
 ;
"RTN","IVMCMF",36,0)
 S ARRAY("ZIC")=$$CLEAR($G(^TMP($J,"IVMCM","ZICV"))),$P(ARRAY("ZIC"),HLFS,21)=$$TOTAL^IVMCME(ARRAY("ZIC"))
"RTN","IVMCMF",37,0)
 S ARRAY("ZIR")=$$CLEAR($G(^TMP($J,"IVMCM","ZIRV")))
"RTN","IVMCMF",38,0)
 ;
"RTN","IVMCMF",39,0)
 ; Build string for spouse as dependent
"RTN","IVMCMF",40,0)
 S ARRAY(DEP,"ZDP")=$$CLEAR($G(^TMP($J,"IVMCM","ZDPS")))
"RTN","IVMCMF",41,0)
 S ARRAY(DEP,"ZIC")=$$CLEAR($G(^TMP($J,"IVMCM","ZICS")))
"RTN","IVMCMF",42,0)
 S ARRAY(DEP,"ZIR")=$$CLEAR($G(^TMP($J,"IVMCM","ZIRS")))
"RTN","IVMCMF",43,0)
 D ADJ^IVMCME
"RTN","IVMCMF",44,0)
 ;
"RTN","IVMCMF",45,0)
 ; Build strings for children as dependents
"RTN","IVMCMF",46,0)
 S IEN=0 F  S IEN=$O(^TMP($J,"IVMCM","ZDPC",IEN)) Q:'IEN  D
"RTN","IVMCMF",47,0)
 . S DEP=DEP+1
"RTN","IVMCMF",48,0)
 . S ARRAY(DEP,"ZDP")=$$CLEAR($G(^TMP($J,"IVMCM","ZDPC",IEN)))
"RTN","IVMCMF",49,0)
 . S ARRAY(DEP,"ZIC")=$$CLEAR($G(^TMP($J,"IVMCM","ZICC",IEN)))
"RTN","IVMCMF",50,0)
 . S ARRAY(DEP,"ZIR")=$$CLEAR($G(^TMP($J,"IVMCM","ZIRC",IEN)))
"RTN","IVMCMF",51,0)
 . D ADJ^IVMCME
"RTN","IVMCMF",52,0)
 ;
"RTN","IVMCMF",53,0)
 ; Build strings for inactive spouse and children dependents
"RTN","IVMCMF",54,0)
 F ISEG="ZDPIS","ZDPIC" D
"RTN","IVMCMF",55,0)
 . S IEN=0 F  S IEN=$O(^TMP($J,"IVMCM",ISEG,IEN)) Q:'IEN  D
"RTN","IVMCMF",56,0)
 . . S DEP=DEP+1
"RTN","IVMCMF",57,0)
 . . S ARRAY(DEP,"ZDP")=$$CLEAR($G(^TMP($J,"IVMCM",ISEG,IEN)))
"RTN","IVMCMF",58,0)
 ;
"RTN","IVMCMF",59,0)
 ; - build income test string and check for errors
"RTN","IVMCMF",60,0)
 S ARRAY("ZMT")=$$CLEAR($G(^TMP($J,"IVMCM","ZMT"_IVMTYPE)))
"RTN","IVMCMF",61,0)
 ;
"RTN","IVMCMF",62,0)
 I '$$UPLDOK() S HLERR="Income Test not Uploaded",OK2UPLD=0 D ACK^IVMPREC Q
"RTN","IVMCMF",63,0)
 ;
"RTN","IVMCMF",64,0)
 ; Check Income Test before applying consistency checks
"RTN","IVMCMF",65,0)
 ; - If AGREED TO PAY DEDUCTIBLE is NO
"RTN","IVMCMF",66,0)
 ; - or DECLINES TO GIVE INCOME INFO and AGREED TO PAY DEDUCTIBLE are YES
"RTN","IVMCMF",67,0)
 ; Quit, the consistency checks are unnecessary.
"RTN","IVMCMF",68,0)
 N APD,DTGII S APD=$P(ARRAY("ZMT"),U,11),DTGII=$P(ARRAY("ZMT"),U,14)
"RTN","IVMCMF",69,0)
 I APD=0!(APD=1&(DTGII=1)) Q
"RTN","IVMCMF",70,0)
 ;
"RTN","IVMCMF",71,0)
 D CHECK
"RTN","IVMCMF",72,0)
ENQ Q
"RTN","IVMCMF",73,0)
 ;
"RTN","IVMCMF",74,0)
CLEAR(NODE) ; Convert HLQ to NULL
"RTN","IVMCMF",75,0)
 N I
"RTN","IVMCMF",76,0)
 F I=1:1:$L(NODE,HLFS) I $P(NODE,HLFS,I)=HLQ S $P(NODE,HLFS,I)=""
"RTN","IVMCMF",77,0)
 Q NODE
"RTN","IVMCMF",78,0)
 ;
"RTN","IVMCMF",79,0)
CHECK ; Check validity of transmission data
"RTN","IVMCMF",80,0)
 N IEN
"RTN","IVMCMF",81,0)
 I "^1^2^4^"[("^"_IVMTYPE_"^") D ZMT^IVMCMF2(ARRAY("ZMT"))
"RTN","IVMCMF",82,0)
 D ZIR^IVMCMF1(ARRAY("ZIR"))
"RTN","IVMCMF",83,0)
 ;
"RTN","IVMCMF",84,0)
 S IEN="" F  S IEN=$O(ARRAY(IEN)) Q:'IEN  D
"RTN","IVMCMF",85,0)
 . D ZDP^IVMCMF2(ARRAY(IEN,"ZDP"))
"RTN","IVMCMF",86,0)
 . I $D(ARRAY(IEN,"ZIC")) D ZIC^IVMCMF1(ARRAY(IEN,"ZIC"),IEN)
"RTN","IVMCMF",87,0)
 . I $D(ARRAY(IEN,"ZIR")) D ZIR^IVMCMF1(ARRAY(IEN,"ZIR"),IEN)
"RTN","IVMCMF",88,0)
CHECKQ Q
"RTN","IVMCMF",89,0)
 ;
"RTN","IVMCMF",90,0)
UPLDOK() ; Check if the test is complete and OK to upload
"RTN","IVMCMF",91,0)
 ; Quit if not a valid test type
"RTN","IVMCMF",92,0)
 I "^1^2^3^4^"'[(U_IVMTYPE_U) Q 0
"RTN","IVMCMF",93,0)
 ;
"RTN","IVMCMF",94,0)
 ; Check the Income Test Status
"RTN","IVMCMF",95,0)
 N DGSTAT S DGSTAT=$P(ARRAY("ZMT"),U,3)
"RTN","IVMCMF",96,0)
 I IVMTYPE=1,"^C^A^G^N^P^"'[(U_DGSTAT_U) Q 0
"RTN","IVMCMF",97,0)
 I IVMTYPE=2,"^M^E^L^"'[(U_DGSTAT_U) Q 0
"RTN","IVMCMF",98,0)
 I IVMTYPE=4,"^0^1^"'[(U_DGSTAT_U) Q 0
"RTN","IVMCMF",99,0)
 ;
"RTN","IVMCMF",100,0)
 ; Check if the test has been completed
"RTN","IVMCMF",101,0)
 I IVMTYPE'=3,+$P(ARRAY("ZMT"),U,10)'>0 Q 0
"RTN","IVMCMF",102,0)
 Q 1
"RTN","IVMCMF",103,0)
 ;
"RTN","IVMCMF",104,0)
UPDMTSIG(MTIEN,TMSTAMP,MTSIG,MTSIGDT) ;
"RTN","IVMCMF",105,0)
 ;if the timestamp matchs AND MT Sig or MT Sig Date changed, update MT Sig info
"RTN","IVMCMF",106,0)
 I '$G(MTIEN) Q 0
"RTN","IVMCMF",107,0)
 S MTSIG=$G(MTSIG),MTSIGDT=$G(MTSIGDT)
"RTN","IVMCMF",108,0)
 N ND0,ND2,DATA
"RTN","IVMCMF",109,0)
 S ND2=$G(^DGMT(408.31,MTIEN,2))
"RTN","IVMCMF",110,0)
 I $G(TMSTAMP)'=$P(ND2,"^",2) Q 0
"RTN","IVMCMF",111,0)
 S ND0=$G(^DGMT(408.31,MTIEN,0))
"RTN","IVMCMF",112,0)
 I MTSIG=$P(ND0,"^",29)&(MTSIGDT=$P(ND0,"^",24)) Q 0
"RTN","IVMCMF",113,0)
 S DATA(.24)=MTSIGDT  ; dt vet signed test
"RTN","IVMCMF",114,0)
 S DATA(.29)=MTSIG    ; means test signed
"RTN","IVMCMF",115,0)
 I $$UPD^DGENDBS(408.31,MTIEN,.DATA)
"RTN","IVMCMF",116,0)
 Q 1
"RTN","IVMCMF2")
0^18^B12196365
"RTN","IVMCMF2",1,0)
IVMCMF2 ;ALB/SEK,CKN,TDM - CHECK INCOME DEPENDENT DATA ; 4/14/06 1:34pm
"RTN","IVMCMF2",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**71,107,105,115**;21-OCT-94;Build 28
"RTN","IVMCMF2",3,0)
 ;
"RTN","IVMCMF2",4,0)
 ; This routine is a called from IVMCMF.
"RTN","IVMCMF2",5,0)
 ;
"RTN","IVMCMF2",6,0)
ZMT(STRING) ; check ZMT segment
"RTN","IVMCMF2",7,0)
 ;
"RTN","IVMCMF2",8,0)
 ; Input:  STRING as ZMT segment
"RTN","IVMCMF2",9,0)
 ;
"RTN","IVMCMF2",10,0)
 N X,Y
"RTN","IVMCMF2",11,0)
 ;
"RTN","IVMCMF2",12,0)
 ; Means Test Status Checks
"RTN","IVMCMF2",13,0)
 I IVMTYPE=1,$P(STRING,HLFS,3)'="G" D MT^IVMCMF3(STRING,ARRAY("ZIC"))
"RTN","IVMCMF2",14,0)
 ;
"RTN","IVMCMF2",15,0)
 ; Copay Test Status Checks
"RTN","IVMCMF2",16,0)
 I IVMTYPE=2 D CO^IVMCMF3(STRING)
"RTN","IVMCMF2",17,0)
 ;
"RTN","IVMCMF2",18,0)
 ; Hardship consistency checks
"RTN","IVMCMF2",19,0)
 N HARDSHIP K HARDSHIP
"RTN","IVMCMF2",20,0)
 S HARDSHIP("Y/N")=$P(STRING,HLFS,13)
"RTN","IVMCMF2",21,0)
 S HARDSHIP("SITE")=$P(STRING,HLFS,23)
"RTN","IVMCMF2",22,0)
 S HARDSHIP("EFFDATE")=$P(STRING,HLFS,24)
"RTN","IVMCMF2",23,0)
 ;
"RTN","IVMCMF2",24,0)
 I (IVMTYPE'=4),(HARDSHIP("Y/N"))!(+HARDSHIP("SITE"))!(HARDSHIP("EFFDATE")) D
"RTN","IVMCMF2",25,0)
 .I HARDSHIP("Y/N")="" S CNT=CNT+1,IVMERR(CNT)="Missing Hardship Indicator"
"RTN","IVMCMF2",26,0)
 .I HARDSHIP("SITE")="" S CNT=CNT+1,IVMERR(CNT)="Missing Site Granting Hardship"
"RTN","IVMCMF2",27,0)
 .;starting in year 2000, all hardships should have an effective date
"RTN","IVMCMF2",28,0)
 .I $E($P(STRING,HLFS,2),1,4)'<2000,(HARDSHIP("EFFDATE")="") S CNT=CNT+1,IVMERR(CNT)="Missing Hardship Effective Date"
"RTN","IVMCMF2",29,0)
 .I $L(HARDSHIP("EFFDATE")) S X=$$FMDATE^HLFNC(HARDSHIP("EFFDATE")),%DT=X D ^%DT I Y<0 S CNT=CNT+1,IVMERR(CNT)="Invalid Hardship Effective Date"
"RTN","IVMCMF2",30,0)
 .I HARDSHIP("EFFDATE"),(HARDSHIP("EFFDATE")<($P(STRING,HLFS,2))-1) S CNT=CNT+1,IVMERR(CNT)="Hardship Effective Date earlier than Means Test Date"
"RTN","IVMCMF2",31,0)
 ;
"RTN","IVMCMF2",32,0)
 ; Source of Test
"RTN","IVMCMF2",33,0)
 S X=$P(STRING,HLFS,18)
"RTN","IVMCMF2",34,0)
 I "^1^2^3^4^"'[(U_X_U) S CNT=CNT+1,IVMERR(CNT)="Source of Test must be identified"
"RTN","IVMCMF2",35,0)
 I X=4,$P(STRING,HLFS,22)="" S CNT=CNT+1,IVMERR(CNT)="Site Conducting Test must be identified"
"RTN","IVMCMF2",36,0)
 ;
"RTN","IVMCMF2",37,0)
ZMTQ Q
"RTN","IVMCMF2",38,0)
 ;
"RTN","IVMCMF2",39,0)
ZDP(STRING) ; Check validity of ZDP segment
"RTN","IVMCMF2",40,0)
 ;
"RTN","IVMCMF2",41,0)
 ; Input:  STRING as ZDP segment
"RTN","IVMCMF2",42,0)
 ;
"RTN","IVMCMF2",43,0)
 N RELAT,IVMZDP5,PSSNRSN,SSNVSTAT
"RTN","IVMCMF2",44,0)
 S IVMZDP5=$P(STRING,HLFS,5)
"RTN","IVMCMF2",45,0)
 I +IVMZDP5'>0 D  G ZDPQ
"RTN","IVMCMF2",46,0)
 .S RELAT=$P(STRING,HLFS,6),RELAT=$S($D(^DG(408.11,RELAT,0)):$P(^DG(408.11,RELAT,0),HLFS),1:"OTHER")
"RTN","IVMCMF2",47,0)
 .S CNT=CNT+1,IVMERR(CNT)="Dependent ("_RELAT_") transmitted without SSN"
"RTN","IVMCMF2",48,0)
 I $D(IVMAR2(IVMZDP5)) S CNT=CNT+1,IVMERR(CNT)="Two dependents transmitted with same SSN"
"RTN","IVMCMF2",49,0)
 S IVMAR2(IVMZDP5)=""
"RTN","IVMCMF2",50,0)
 S PSSNRSN=$P(STRING,HLFS,10) I PSSNRSN]"",(PSSNRSN'="R"),(PSSNRSN'="S"),(PSSNRSN'="N") S CNT=CNT+1,IVMERR(CNT)="Invalid Pseudo SSN Reason transmitted for Spouse/Dependent."
"RTN","IVMCMF2",51,0)
 S SSNVSTAT=$P(STRING,HLFS,12) I SSNVSTAT]"",(SSNVSTAT'=2),(SSNVSTAT'=4) S CNT=CNT+1,IVMERR(CNT)="Invalid SSN Verification Status transmitted for Spouse/Dependent."
"RTN","IVMCMF2",52,0)
ZDPQ Q
"RTN","IVMLDEM6")
0^24^B62944324
"RTN","IVMLDEM6",1,0)
IVMLDEM6 ;ALB/KCL/BRM/PHH/CKN - IVM DEMOGRAPHIC UPLOAD FILE ADDRESS ; 2/15/07 3:10pm
"RTN","IVMLDEM6",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**10,58,73,79,108,106,105,124,115**; 21-OCT-94;Build 28
"RTN","IVMLDEM6",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMLDEM6",4,0)
 ;
"RTN","IVMLDEM6",5,0)
 ;
"RTN","IVMLDEM6",6,0)
ADDR(DFN,IVMDA2,IVMDA1,IVMDA,IVMPPICK) ; - function to check if uploadable field
"RTN","IVMLDEM6",7,0)
 ;                          is an address field and return a flag
"RTN","IVMLDEM6",8,0)
 ;
"RTN","IVMLDEM6",9,0)
 ;  Input:      DFN  -  as patient IEN
"RTN","IVMLDEM6",10,0)
 ;           IVMDA2  -  pointer to case record in (#301.5) file
"RTN","IVMLDEM6",11,0)
 ;           IVMDA1  -  pointer to PID msg in (#301.501) sub-file
"RTN","IVMLDEM6",12,0)
 ;            IVMDA  -  pointer to record in (#301.511) sub-file
"RTN","IVMLDEM6",13,0)
 ;         IVMPPICK  -  residence phone number and/or another address
"RTN","IVMLDEM6",14,0)
 ;                        field selected
"RTN","IVMLDEM6",15,0)
 ;                      0 - phone or an address field not selected 
"RTN","IVMLDEM6",16,0)
 ;                      1 - address field(s) selected
"RTN","IVMLDEM6",17,0)
 ;                      2 - phone selected
"RTN","IVMLDEM6",18,0)
 ;                      3 - both address field(s) and phone selected
"RTN","IVMLDEM6",19,0)
 ;
"RTN","IVMLDEM6",20,0)
 ; Output: IVMFLAG   -  1 if address field
"RTN","IVMLDEM6",21,0)
 ;                      0 if not an address field
"RTN","IVMLDEM6",22,0)
 ;
"RTN","IVMLDEM6",23,0)
 ;
"RTN","IVMLDEM6",24,0)
 N IVMFLAG,IVMI,IVMJ,IVMNODE,IVMPTR,Y,IVMAFLD,IVMAVAL
"RTN","IVMLDEM6",25,0)
 ;
"RTN","IVMLDEM6",26,0)
 ; - initialize flags
"RTN","IVMLDEM6",27,0)
 S IVMFLAG=0
"RTN","IVMLDEM6",28,0)
 ;
"RTN","IVMLDEM6",29,0)
 ; - check for required parameters
"RTN","IVMLDEM6",30,0)
 I '$G(DFN)!('$G(IVMDA))!('$G(IVMDA1))!'($G(IVMDA2)) G ADDRQ
"RTN","IVMLDEM6",31,0)
 ;
"RTN","IVMLDEM6",32,0)
 ; - get pointer to (#301.92) file from (#301.511) sub-file
"RTN","IVMLDEM6",33,0)
 S IVMPTR=+$G(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM",IVMDA,0)) G ADDRQ:'IVMPTR
"RTN","IVMLDEM6",34,0)
 ;
"RTN","IVMLDEM6",35,0)
ASK I '$D(^IVM(301.92,"AD",+IVMPTR)) G ADDRQ
"RTN","IVMLDEM6",36,0)
 I IVMPPICK=2 G ASK1
"RTN","IVMLDEM6",37,0)
 W ! S DIR("A")="Do you wish to proceed with this action"
"RTN","IVMLDEM6",38,0)
 S DIR("A",1)="You have selected to update an address field."
"RTN","IVMLDEM6",39,0)
 S DIR("A",2)="You will be required to upload the entire address."
"RTN","IVMLDEM6",40,0)
 S DIR("?")="Enter 'YES' to continue or 'NO' to abort."
"RTN","IVMLDEM6",41,0)
 S DIR(0)="Y",DIR("B")="NO"
"RTN","IVMLDEM6",42,0)
 D ^DIR K DIR
"RTN","IVMLDEM6",43,0)
 S IVMFLAG=1 G ADDRQ:'Y
"RTN","IVMLDEM6",44,0)
 W ! S DIR("A")="Are you sure that you want to update the complete address"
"RTN","IVMLDEM6",45,0)
 S:$$PHARM(+$G(DFN)) DIR("A",1)="*** WARNING: This patient has ACTIVE PRESCRIPTIONS on file."
"RTN","IVMLDEM6",46,0)
 S DIR("A",2)=""
"RTN","IVMLDEM6",47,0)
 I $$ADRDTCK^IVMLDEM9(+$G(DFN),IVMDA2,IVMDA1) S DIR("A",2)="*** WARNING: The address that you are attempting to file is OLDER than",DIR("A",3)="             the address on file.",DIR("A",4)=""
"RTN","IVMLDEM6",48,0)
 S DIR("?",1)="Enter 'YES' to update the complete address that was received from"
"RTN","IVMLDEM6",49,0)
 S DIR("?")="HEC.  Enter 'NO' to quit."
"RTN","IVMLDEM6",50,0)
 S DIR(0)="Y",DIR("B")="NO"
"RTN","IVMLDEM6",51,0)
 D ^DIR K DIR
"RTN","IVMLDEM6",52,0)
 S IVMFLAG=1 G ADDRQ:'Y
"RTN","IVMLDEM6",53,0)
 W !,"Filing address fields... "
"RTN","IVMLDEM6",54,0)
 ;
"RTN","IVMLDEM6",55,0)
 ; determine correct address change date/time to use
"RTN","IVMLDEM6",56,0)
 D ADDRDT(DFN,IVMDA2,IVMDA1)
"RTN","IVMLDEM6",57,0)
 ;
"RTN","IVMLDEM6",58,0)
LOOP ;
"RTN","IVMLDEM6",59,0)
 N DGPRIOR D GETPRIOR^DGADDUTL(DFN,.DGPRIOR)
"RTN","IVMLDEM6",60,0)
 ;
"RTN","IVMLDEM6",61,0)
 I IVMPPICK'=2 D EN^DGCLEAR(DFN,"PERM") ;Deleting existing address before updating
"RTN","IVMLDEM6",62,0)
 ; - loop thru fields in ^IVM(301.92,"AD" x-ref
"RTN","IVMLDEM6",63,0)
 S IVMI=0 F  S IVMI=$O(^IVM(301.92,"AD",IVMI)) Q:IVMI']""  D
"RTN","IVMLDEM6",64,0)
 .S IVMJ=0 F  S IVMJ=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IVMI,IVMJ)) Q:IVMJ']""  D
"RTN","IVMLDEM6",65,0)
 ..;
"RTN","IVMLDEM6",66,0)
 ..; - check for data node in (#301.511) sub-file
"RTN","IVMLDEM6",67,0)
 ..S IVMNODE=$G(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM",IVMJ,0)) Q:IVMNODE']""
"RTN","IVMLDEM6",68,0)
 ..Q:'(+IVMNODE)!($P(IVMNODE,"^",2)']"")
"RTN","IVMLDEM6",69,0)
 ..;
"RTN","IVMLDEM6",70,0)
 ..; - check if residence phone number and not selected to upload
"RTN","IVMLDEM6",71,0)
 ..Q:(IVMPPICK=1&(+IVMNODE=$O(^IVM(301.92,"B","PHONE NUMBER [RESIDENCE]",0))))
"RTN","IVMLDEM6",72,0)
 ..; - check if not residence phone number and only phone selected to upload
"RTN","IVMLDEM6",73,0)
 ..Q:(IVMPPICK=2&(+IVMNODE'=$O(^IVM(301.92,"B","PHONE NUMBER [RESIDENCE]",0))))
"RTN","IVMLDEM6",74,0)
 ..;
"RTN","IVMLDEM6",75,0)
 ..;Store Address change Date/time, source and site in ^TMP to file at the end of process.
"RTN","IVMLDEM6",76,0)
 ..S IVMAFLD=$P($G(^IVM(301.92,+IVMNODE,0)),"^",5),IVMAVAL=$P(IVMNODE,"^",2)
"RTN","IVMLDEM6",77,0)
 ..I ((IVMAFLD=.118)!(IVMAFLD=.119)!(IVMAFLD=.12)) S ^TMP($J,"CHANGE UPDATE",IVMAFLD)=IVMAVAL
"RTN","IVMLDEM6",78,0)
 ..; - perform any necessary address field manipulation and
"RTN","IVMLDEM6",79,0)
 ..;   load addr field rec'd from IVM into DHCP (#2) file
"RTN","IVMLDEM6",80,0)
 ..D UPLOAD(+DFN,$P($G(^IVM(301.92,+IVMNODE,0)),"^",5),$P(IVMNODE,"^",2)) S IVMFLAG=1
"RTN","IVMLDEM6",81,0)
 ..;
"RTN","IVMLDEM6",82,0)
 ..; - remove entry from (#301.511) sub-file
"RTN","IVMLDEM6",83,0)
 ..D DELENT^IVMLDEMU(IVMDA2,IVMDA1,IVMJ)
"RTN","IVMLDEM6",84,0)
 ;
"RTN","IVMLDEM6",85,0)
 D ADDRCHNG^IVMPREC6(DFN) ;Update Address change date/time,source,site if necessary
"RTN","IVMLDEM6",86,0)
 I IVMFLAG W "completed.",! D
"RTN","IVMLDEM6",87,0)
 .N DGCURR
"RTN","IVMLDEM6",88,0)
 .D GETUPDTS^DGADDUTL(DFN,.DGCURR)
"RTN","IVMLDEM6",89,0)
 .D UPDADDLG^DGADDUTL(DFN,.DGPRIOR,.DGCURR)
"RTN","IVMLDEM6",90,0)
 ;
"RTN","IVMLDEM6",91,0)
 ; - if addr is uploaded and phone # is not - ask user delete phone
"RTN","IVMLDEM6",92,0)
 I IVMFLAG,$P($G(^DPT(+DFN,.13)),"^")]"",(2>IVMPPICK) D PHONE
"RTN","IVMLDEM6",93,0)
 S VALMBCK="R"
"RTN","IVMLDEM6",94,0)
 ;
"RTN","IVMLDEM6",95,0)
 ;
"RTN","IVMLDEM6",96,0)
ADDRQ ; - return  -->  1 if uploadable field is an address field
"RTN","IVMLDEM6",97,0)
 ;           -->  0 if uploadable field is not an address field
"RTN","IVMLDEM6",98,0)
 ;
"RTN","IVMLDEM6",99,0)
 I IVMFLAG D RESET^IVMLDEMU
"RTN","IVMLDEM6",100,0)
 Q IVMFLAG
"RTN","IVMLDEM6",101,0)
 ;
"RTN","IVMLDEM6",102,0)
 ;
"RTN","IVMLDEM6",103,0)
UPLOAD(DFN,IVMFIELD,IVMVALUE) ; - file address fields received from IVM
"RTN","IVMLDEM6",104,0)
 ;
"RTN","IVMLDEM6",105,0)
 ;  Input:       DFN  -  as patient IEN
"RTN","IVMLDEM6",106,0)
 ;          IVMFIELD  -  as the field number to be updated
"RTN","IVMLDEM6",107,0)
 ;          IVMVALUE  -  as the value of the field
"RTN","IVMLDEM6",108,0)
 ;
"RTN","IVMLDEM6",109,0)
 ; Output: None
"RTN","IVMLDEM6",110,0)
 ;
"RTN","IVMLDEM6",111,0)
 ;
"RTN","IVMLDEM6",112,0)
 ; - update specified address field in the Patient (#2) file
"RTN","IVMLDEM6",113,0)
 N DIE,DA,DR
"RTN","IVMLDEM6",114,0)
 S DIE="^DPT(",DA=DFN,DR=IVMFIELD_"////^S X=IVMVALUE"
"RTN","IVMLDEM6",115,0)
 D ^DIE K DA,DIE,DR
"RTN","IVMLDEM6",116,0)
 ;
"RTN","IVMLDEM6",117,0)
 ; - delete inaccurate Addr Change Site data if Source is not VAMC
"RTN","IVMLDEM6",118,0)
 ;   (trigger x-ref does not fire with 4 slash stuff)
"RTN","IVMLDEM6",119,0)
 I IVMFIELD=.119,IVMVALUE'="VAMC" S FDA(2,+DFN_",",.12)="@" D UPDATE^DIE("E","FDA")
"RTN","IVMLDEM6",120,0)
 ;
"RTN","IVMLDEM6",121,0)
 Q
"RTN","IVMLDEM6",122,0)
 ;
"RTN","IVMLDEM6",123,0)
 ;
"RTN","IVMLDEM6",124,0)
PHONE ; - ask user to delete phone # [Residence] from Patient (#2) file
"RTN","IVMLDEM6",125,0)
 D PHONE^IVMPREC9 ;Moved this tag to IVMPREC9 due to routine size limit.
"RTN","IVMLDEM6",126,0)
 Q
"RTN","IVMLDEM6",127,0)
 ;
"RTN","IVMLDEM6",128,0)
ASK1 ; - phone selected to be uploaded - address fields not selected
"RTN","IVMLDEM6",129,0)
 W ! S DIR("A")="Okay to update the PHONE NUMBER [RESIDENCE] field"
"RTN","IVMLDEM6",130,0)
 S DIR("?",1)="Enter 'YES' to update the patient's Phone Number [Residence] that was"
"RTN","IVMLDEM6",131,0)
 S DIR("?",2)="received from HEC.  Enter 'NO' to quit."
"RTN","IVMLDEM6",132,0)
 S DIR(0)="Y",DIR("B")="YES"
"RTN","IVMLDEM6",133,0)
 D ^DIR K DIR
"RTN","IVMLDEM6",134,0)
 S IVMFLAG=1 G ADDRQ:'Y
"RTN","IVMLDEM6",135,0)
 W !,"Updating PHONE NUMBER [RESIDENCE] field... "
"RTN","IVMLDEM6",136,0)
 G LOOP
"RTN","IVMLDEM6",137,0)
 ;
"RTN","IVMLDEM6",138,0)
AUTOADDR(DFN,IVMPPICK,NOUPDT) ;
"RTN","IVMLDEM6",139,0)
 ; this functionality is copied from above and modified to allow
"RTN","IVMLDEM6",140,0)
 ; an automated upload of patient address information as stipulated
"RTN","IVMLDEM6",141,0)
 ; in the business requirements for Address Indexing to support GMT
"RTN","IVMLDEM6",142,0)
 ;
"RTN","IVMLDEM6",143,0)
 ;  Input:      DFN  -  as patient IEN
"RTN","IVMLDEM6",144,0)
 ;         IVMPPICK  -  residence phone number and/or another address
"RTN","IVMLDEM6",145,0)
 ;                        field selected
"RTN","IVMLDEM6",146,0)
 ;                      1 - address field(s) selected
"RTN","IVMLDEM6",147,0)
 ;                      3 - both address field(s) and phone selected
"RTN","IVMLDEM6",148,0)
 ;           NOUPDT  -  (optional) this flag is set when the incoming
"RTN","IVMLDEM6",149,0)
 ;                      address data is older than the existing
"RTN","IVMLDEM6",150,0)
 ;                      address in the Patient (#2) file
"RTN","IVMLDEM6",151,0)
 ;
"RTN","IVMLDEM6",152,0)
 ; Output: IVMFLAG   -  1 if address fields updated
"RTN","IVMLDEM6",153,0)
 ;                      0 if address fields not updated
"RTN","IVMLDEM6",154,0)
 ;
"RTN","IVMLDEM6",155,0)
 ;
"RTN","IVMLDEM6",156,0)
 ;
"RTN","IVMLDEM6",157,0)
 N IVMFLAG,IVMI,IVMJ,IVMNODE,IVMPTR,Y,IVMAFLD,IVMAVAL,DELFLG
"RTN","IVMLDEM6",158,0)
 ;
"RTN","IVMLDEM6",159,0)
 ; - initialize flags
"RTN","IVMLDEM6",160,0)
 S IVMFLAG=0,DELFLG=1
"RTN","IVMLDEM6",161,0)
 S:'$G(NOUPDT) NOUPDT=0
"RTN","IVMLDEM6",162,0)
 ;
"RTN","IVMLDEM6",163,0)
 ; - check for required parameters
"RTN","IVMLDEM6",164,0)
 Q:'$G(DFN) IVMFLAG
"RTN","IVMLDEM6",165,0)
 ;
"RTN","IVMLDEM6",166,0)
 N DGPRIOR D GETPRIOR^DGADDUTL(DFN,.DGPRIOR)
"RTN","IVMLDEM6",167,0)
 ; Set the flag to don't auto-update if there is an active Prescription record and the Bad Address Indicator is null
"RTN","IVMLDEM6",168,0)
 I ('NOUPDT),$$PHARM(+DFN),'$$BADADR^DGUTL3(+DFN) S DELFLG=0
"RTN","IVMLDEM6",169,0)
 I 'NOUPDT,DELFLG D EN^DGCLEAR(DFN,"PERM") ;Deleting existing address before updating
"RTN","IVMLDEM6",170,0)
 ;
"RTN","IVMLDEM6",171,0)
 S IVMDA2=$G(IVM3015)
"RTN","IVMLDEM6",172,0)
 Q:'$G(IVMDA2) IVMFLAG
"RTN","IVMLDEM6",173,0)
 S IVMDA1=$O(^HL(771.3,"B","PID",""))
"RTN","IVMLDEM6",174,0)
 S IVMDA1=$O(^IVM(301.5,IVMDA2,"IN","B",IVMDA1,""),-1)
"RTN","IVMLDEM6",175,0)
 Q:'IVMDA1 IVMFLAG
"RTN","IVMLDEM6",176,0)
 ;
"RTN","IVMLDEM6",177,0)
 S IVMI=0 F  S IVMI=$O(^IVM(301.92,"AD",IVMI)) Q:IVMI']""  D
"RTN","IVMLDEM6",178,0)
 .S IVMJ=0 F  S IVMJ=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IVMI,IVMJ)) Q:IVMJ']""  D
"RTN","IVMLDEM6",179,0)
 ..;
"RTN","IVMLDEM6",180,0)
 ..; - check for data node in (#301.511) sub-file
"RTN","IVMLDEM6",181,0)
 ..S IVMNODE=$G(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM",IVMJ,0))
"RTN","IVMLDEM6",182,0)
 ..I ('+IVMNODE)!($P(IVMNODE,"^",2)']"") Q
"RTN","IVMLDEM6",183,0)
 ..;
"RTN","IVMLDEM6",184,0)
 ..; - check if residence phone number -> do not auto-upload
"RTN","IVMLDEM6",185,0)
 ..I (IVMPPICK=1&(+IVMNODE=$O(^IVM(301.92,"B","PHONE NUMBER [RESIDENCE]",0)))) D DEMBULL^IVMPREC6 Q
"RTN","IVMLDEM6",186,0)
 ..;
"RTN","IVMLDEM6",187,0)
 ..; don't auto-update if there is an active Prescription record and
"RTN","IVMLDEM6",188,0)
 ..; the Bad Address Indicator is null
"RTN","IVMLDEM6",189,0)
 ..I 'DELFLG D DEMBULL^IVMPREC6 Q
"RTN","IVMLDEM6",190,0)
 ..;Store Address change Date/time, source and site in ^TMP to file at the end of process.
"RTN","IVMLDEM6",191,0)
 ..S IVMAFLD=$P($G(^IVM(301.92,+IVMNODE,0)),"^",5),IVMAVAL=$P(IVMNODE,"^",2)
"RTN","IVMLDEM6",192,0)
 ..I 'NOUPDT,((IVMAFLD=.118)!(IVMAFLD=.119)!(IVMAFLD=.12)) S ^TMP($J,"CHANGE UPDATE",IVMAFLD)=IVMAVAL
"RTN","IVMLDEM6",193,0)
 ..;
"RTN","IVMLDEM6",194,0)
 ..; - load addr field rec'd from IVM into DHCP (#2) file
"RTN","IVMLDEM6",195,0)
 ..I 'NOUPDT D UPLOAD(+DFN,IVMAFLD,IVMAVAL) S IVMFLAG=1
"RTN","IVMLDEM6",196,0)
 ..;
"RTN","IVMLDEM6",197,0)
 ..; - remove entry from (#301.511) sub-file
"RTN","IVMLDEM6",198,0)
 ..D DELENT^IVMLDEMU(IVMDA2,IVMDA1,IVMJ)
"RTN","IVMLDEM6",199,0)
 ..; - if no display or uploadable fields left, then delete the PID
"RTN","IVMLDEM6",200,0)
 ..;   segment
"RTN","IVMLDEM6",201,0)
 ..I '$$DEMO^IVMLDEM5(IVMDA2,IVMDA1,0),'$$DEMO^IVMLDEM5(IVMDA2,IVMDA1,1) D
"RTN","IVMLDEM6",202,0)
 ...D DELETE^IVMLDEM5(IVMDA2,IVMDA1," ") ; Dummy up name parameter
"RTN","IVMLDEM6",203,0)
 D ADDRCHNG^IVMPREC6(DFN) ;Update Address change date/time,source,site if necessary
"RTN","IVMLDEM6",204,0)
 I IVMFLAG D
"RTN","IVMLDEM6",205,0)
 .N DGCURR
"RTN","IVMLDEM6",206,0)
 .D GETUPDTS^DGADDUTL(DFN,.DGCURR)
"RTN","IVMLDEM6",207,0)
 .D UPDADDLG^DGADDUTL(DFN,.DGPRIOR,.DGCURR)
"RTN","IVMLDEM6",208,0)
 Q IVMFLAG
"RTN","IVMLDEM6",209,0)
 ;
"RTN","IVMLDEM6",210,0)
ADDRDT(DFN,IVMDA2,IVMDA1) ;
"RTN","IVMLDEM6",211,0)
 ; - validate Address Change Dt/Tm before filing
"RTN","IVMLDEM6",212,0)
 ;   if incoming address is accepted and the change date is older
"RTN","IVMLDEM6",213,0)
 ;   than what's on file, then use today's date for Addr Chg Dt/Tm
"RTN","IVMLDEM6",214,0)
 ;
"RTN","IVMLDEM6",215,0)
 Q:'$$ADRDTCK^IVMLDEM9(DFN,IVMDA2,IVMDA1)
"RTN","IVMLDEM6",216,0)
 N FDA,IEN92,IVMDA,IENS,ERR
"RTN","IVMLDEM6",217,0)
 S IEN92=$O(^IVM(301.92,"C","RF171","")) Q:'IEN92
"RTN","IVMLDEM6",218,0)
 Q:'$D(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IEN92))
"RTN","IVMLDEM6",219,0)
 S IVMDA=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IEN92,"")) Q:'IVMDA
"RTN","IVMLDEM6",220,0)
 S IENS=IVMDA_","_IVMDA1_","_IVMDA2_","
"RTN","IVMLDEM6",221,0)
 S FDA(301.511,IENS,.02)=$$NOW^XLFDT
"RTN","IVMLDEM6",222,0)
 D FILE^DIE("","FDA","ERR")
"RTN","IVMLDEM6",223,0)
 Q
"RTN","IVMLDEM6",224,0)
 ;
"RTN","IVMLDEM6",225,0)
PHARM(DFN) ;does this patient have active pharmacy prescriptions?
"RTN","IVMLDEM6",226,0)
 ;
"RTN","IVMLDEM6",227,0)
 ;External reference to $$EN^PSSRXACT supported by IA #4237
"RTN","IVMLDEM6",228,0)
 ;
"RTN","IVMLDEM6",229,0)
 Q $S('$G(DFN):0,1:$$EN^PSSRXACT(DFN))
"RTN","IVMPLOG")
0^22^B41834735
"RTN","IVMPLOG",1,0)
IVMPLOG ;ALB/CJM,RTK,ERC - API for IVM PATIENT file; ; 8/15/08 12:49pm
"RTN","IVMPLOG",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**9,19,12,21,17,28,36,40,49,68,115**; 21-OCT-94;Build 28
"RTN","IVMPLOG",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMPLOG",4,0)
 ;
"RTN","IVMPLOG",5,0)
 ;
"RTN","IVMPLOG",6,0)
FIND(DFN,YEAR) ;
"RTN","IVMPLOG",7,0)
 ;Description: Looks up an entry in the IVM PATIENT file (#301.5).
"RTN","IVMPLOG",8,0)
 ;Input:
"RTN","IVMPLOG",9,0)
 ;  DFN - IEN in the PATIENT file.
"RTN","IVMPLOG",10,0)
 ;  YEAR - value for the INCOME YEAR field, a year in FM format.
"RTN","IVMPLOG",11,0)
 ;Output:
"RTN","IVMPLOG",12,0)
 ;  Function Value - returns IEN of record if found, NULL otherwise.
"RTN","IVMPLOG",13,0)
 ;
"RTN","IVMPLOG",14,0)
 Q:('$G(DFN)!'$G(YEAR)) ""
"RTN","IVMPLOG",15,0)
 ;
"RTN","IVMPLOG",16,0)
 N YR
"RTN","IVMPLOG",17,0)
 S YR=$E(YEAR,1,3)_"0000"
"RTN","IVMPLOG",18,0)
 Q $O(^IVM(301.5,"APT",DFN,YR,0))
"RTN","IVMPLOG",19,0)
 ;
"RTN","IVMPLOG",20,0)
LOCK(IEN) ;
"RTN","IVMPLOG",21,0)
 ;Description: Locks a record in the IVM PATIENT file.
"RTN","IVMPLOG",22,0)
 ;Input:
"RTN","IVMPLOG",23,0)
 ;  IEN - ien of record  in IVM PATIENT file.
"RTN","IVMPLOG",24,0)
 ;Output:
"RTN","IVMPLOG",25,0)
 ;  Function Value - 1 if successful, 0 otherwise.
"RTN","IVMPLOG",26,0)
 ;
"RTN","IVMPLOG",27,0)
 I $G(IEN) L +^IVM(301.5,IEN):3
"RTN","IVMPLOG",28,0)
 Q $T
"RTN","IVMPLOG",29,0)
 ;
"RTN","IVMPLOG",30,0)
UNLOCK(IEN) ;
"RTN","IVMPLOG",31,0)
 ;Description: Unlocks a record in the IVM PATIENT file.
"RTN","IVMPLOG",32,0)
 ;Input:
"RTN","IVMPLOG",33,0)
 ;  IEN - ien of record in the IVM PATIENT file.
"RTN","IVMPLOG",34,0)
 ;Output: None
"RTN","IVMPLOG",35,0)
 ;
"RTN","IVMPLOG",36,0)
 I $G(IEN) L -^IVM(301.5,IEN)
"RTN","IVMPLOG",37,0)
 Q
"RTN","IVMPLOG",38,0)
 ;
"RTN","IVMPLOG",39,0)
STATUS(IEN,EVENTS) ;
"RTN","IVMPLOG",40,0)
 ;Description: Returns the value of the TRANSMISSION STATUS field of the 
"RTN","IVMPLOG",41,0)
 ;  IVM PATIENT file.
"RTN","IVMPLOG",42,0)
 ;
"RTN","IVMPLOG",43,0)
 ;Input:
"RTN","IVMPLOG",44,0)
 ;  IEN - internal entry number of a record in the IVM PATIENT file
"RTN","IVMPLOG",45,0)
 ;Output:
"RTN","IVMPLOG",46,0)
 ;  Function Value -returns the value of the TRANSMISSION STATUS field
"RTN","IVMPLOG",47,0)
 ;  EVENTS - optional, pass by reference.  Will return the types of events logged.
"RTN","IVMPLOG",48,0)
 ;  EVENTS("IVM") - value of IVM EVENT field
"RTN","IVMPLOG",49,0)
 ;  EVENTS("DCD") - value of DCD EVENT field
"RTN","IVMPLOG",50,0)
 ;  EVENTS("ENROLL") - value of ENROLLMENT EVENT field
"RTN","IVMPLOG",51,0)
 ;
"RTN","IVMPLOG",52,0)
 ;
"RTN","IVMPLOG",53,0)
 S EVENTS("IVM")=""
"RTN","IVMPLOG",54,0)
 S EVENTS("DCD")=""
"RTN","IVMPLOG",55,0)
 S EVENTS("ENROLL")=""
"RTN","IVMPLOG",56,0)
 ;
"RTN","IVMPLOG",57,0)
 Q:'$G(IEN) ""
"RTN","IVMPLOG",58,0)
 ;
"RTN","IVMPLOG",59,0)
 N NODE
"RTN","IVMPLOG",60,0)
 S NODE=$G(^IVM(301.5,IEN,"E"))
"RTN","IVMPLOG",61,0)
 S EVENTS("IVM")=$P(NODE,"^")
"RTN","IVMPLOG",62,0)
 S EVENTS("DCD")=$P(NODE,"^",2)
"RTN","IVMPLOG",63,0)
 S EVENTS("ENROLL")=$P(NODE,"^",3)
"RTN","IVMPLOG",64,0)
 Q $P($G(^IVM(301.5,IEN,0)),"^",3)
"RTN","IVMPLOG",65,0)
 ;
"RTN","IVMPLOG",66,0)
SETSTAT(IEN,EVENTS,ERRMSG) ;
"RTN","IVMPLOG",67,0)
 ;Description: Sets the value of the TRANSMISSION STATUS field of the
"RTN","IVMPLOG",68,0)
 ;  IVM PATIENT file for a particular record to 0, meaning transmission
"RTN","IVMPLOG",69,0)
 ;  is requested.  If the case is closed, depending on the event types,
"RTN","IVMPLOG",70,0)
 ;  the TRANSMISSION STATUS may not be set.
"RTN","IVMPLOG",71,0)
 ;Input:
"RTN","IVMPLOG",72,0)
 ;  IEN - internal entry number of a record in the IVM PATIENT file.
"RTN","IVMPLOG",73,0)
 ;  EVENTS () - an array of reasons for transmission, pass by reference.
"RTN","IVMPLOG",74,0)
 ;  EVENTS("IVM") = 1 if transmission due to IVM criteria, 0 otherwise
"RTN","IVMPLOG",75,0)
 ;  EVENTS("DCD")=1 if transmission due to DCD criteria, 0 otherwise
"RTN","IVMPLOG",76,0)
 ;  EVENTS("ENROLL")=1 if transmission due to enrollment criteria, 0 otherwise
"RTN","IVMPLOG",77,0)
 ;Output:  
"RTN","IVMPLOG",78,0)
 ;  Function Value - 1 on success, 0 on failure.
"RTN","IVMPLOG",79,0)
 ;  ERRMSG - optional, pass by reference if needed, returns message on failure
"RTN","IVMPLOG",80,0)
 ;
"RTN","IVMPLOG",81,0)
 N DATA,CLOSED,SUCCESS
"RTN","IVMPLOG",82,0)
 ;
"RTN","IVMPLOG",83,0)
 I ($G(DGENUPLD)="ENROLLMENT/ELIGIBILITY UPLOAD IN PROGRESS") S ERRMSG="ENROLLMENT UPLOAD IN PROGRESS" Q 0
"RTN","IVMPLOG",84,0)
 ;
"RTN","IVMPLOG",85,0)
 I '$$LOCK($G(IEN)) S ERRMSG="UNABLE TO OBTAIN LOCK ON IVM PATIENT, TRY AGAIN LATTER" Q 0
"RTN","IVMPLOG",86,0)
 S CLOSED=$$CLOSED(IEN)
"RTN","IVMPLOG",87,0)
 S SUCCESS=0
"RTN","IVMPLOG",88,0)
 I ('CLOSED)!(1=$G(EVENTS("ENROLL"))) D
"RTN","IVMPLOG",89,0)
 .S DATA(.03)=0
"RTN","IVMPLOG",90,0)
 .I 'CLOSED D
"RTN","IVMPLOG",91,0)
 ..I $G(EVENTS("IVM"))=1 S DATA(30.01)=1
"RTN","IVMPLOG",92,0)
 ..I $G(EVENTS("DCD"))=1 S DATA(30.02)=1
"RTN","IVMPLOG",93,0)
 .I $G(EVENTS("ENROLL"))=1 S DATA(30.03)=1
"RTN","IVMPLOG",94,0)
 .S SUCCESS=$$UPD^DGENDBS(301.5,IEN,.DATA,.ERRMSG)
"RTN","IVMPLOG",95,0)
 E  S SUCCESS=0,ERRMSG="CASE IS CLOSED"
"RTN","IVMPLOG",96,0)
 D UNLOCK(IEN)
"RTN","IVMPLOG",97,0)
 Q SUCCESS
"RTN","IVMPLOG",98,0)
 ;
"RTN","IVMPLOG",99,0)
CLEAR(IEN,WHEN) ;
"RTN","IVMPLOG",100,0)
 ; Description: Sets the value of the TRANSMISSION STATUS field of the
"RTN","IVMPLOG",101,0)
 ;IVM PATIENT file for a particular record to 1, meaning transmission
"RTN","IVMPLOG",102,0)
 ;already occurred.
"RTN","IVMPLOG",103,0)
 ;
"RTN","IVMPLOG",104,0)
 ;Input:
"RTN","IVMPLOG",105,0)
 ;  IEN - internal entry number of record in IVM PATIENT file
"RTN","IVMPLOG",106,0)
 ;  WHEN - optional, date/time in FM format that transmission occurred
"RTN","IVMPLOG",107,0)
 ;Output:
"RTN","IVMPLOG",108,0)
 ;  Function Value - 1 on success, 0 on failure
"RTN","IVMPLOG",109,0)
 ; 
"RTN","IVMPLOG",110,0)
 N SUCCESS,PLOG,DATA
"RTN","IVMPLOG",111,0)
 Q:'$$LOCK($G(IEN)) 0
"RTN","IVMPLOG",112,0)
 Q:'$$GET(IEN,.PLOG) 0
"RTN","IVMPLOG",113,0)
 S DATA(.03)=1
"RTN","IVMPLOG",114,0)
 I PLOG("EVENTS","IVM")=1 S DATA(30.01)=2
"RTN","IVMPLOG",115,0)
 I PLOG("EVENTS","DCD")=1 S DATA(30.02)=2
"RTN","IVMPLOG",116,0)
 I PLOG("EVENTS","ENROLL")=1 S DATA(30.03)=2
"RTN","IVMPLOG",117,0)
 I $G(WHEN),((PLOG("FIRST")'>0)!(WHEN<PLOG("FIRST"))) S DATA(.05)=WHEN
"RTN","IVMPLOG",118,0)
 S SUCCESS=$$UPD^DGENDBS(301.5,IEN,.DATA)
"RTN","IVMPLOG",119,0)
 D UNLOCK(IEN)
"RTN","IVMPLOG",120,0)
 Q SUCCESS
"RTN","IVMPLOG",121,0)
 ;
"RTN","IVMPLOG",122,0)
GET(IEN,PLOG) ;
"RTN","IVMPLOG",123,0)
 ;Description: Used to obtain a record in the IVM PATIENT file.  The
"RTN","IVMPLOG",124,0)
 ;values are returned in the PLOG() array.
"RTN","IVMPLOG",125,0)
 ;Input:
"RTN","IVMPLOG",126,0)
 ;  IEN - internal entry number of a record in the IVM PATIENT file.
"RTN","IVMPLOG",127,0)
 ;Output:
"RTN","IVMPLOG",128,0)
 ;  Function Value - 1 on success, 0 on failure.
"RTN","IVMPLOG",129,0)
 ;  PLOG() array, pass by reference.  Subscripts are
"RTN","IVMPLOG",130,0)
 ;  "DFN" - value of the PATIENT field (#.01) which is the ien of record in the PATIENT file.
"RTN","IVMPLOG",131,0)
 ;  "YEAR" -  value of the INCOME YEAR field (#.02)
"RTN","IVMPLOG",132,0)
 ;  "STATUS" - value from the TRANSMISSIONS STATUS field (#.03)
"RTN","IVMPLOG",133,0)
 ;  "FIRST" -  value from the QUERY TRANSMISSION DATE/TIME field (#.05)
"RTN","IVMPLOG",134,0)
 ;  "CLOSE" - value from the STOP FLAG field (#.04)
"RTN","IVMPLOG",135,0)
 ;  "CLOSE","REASON" -  value from the CLOSURE REASON field (#301.93)
"RTN","IVMPLOG",136,0)
 ;  "CLOSE","SOURCE" - value of the CLOSURE SOURCE  field (#1.02)
"RTN","IVMPLOG",137,0)
 ;  "CLOSE","TIME" - value of the CLOSURE DATE/TIME field (#1.03)
"RTN","IVMPLOG",138,0)
 ;  "EVENTS","IVM" - value of the IVM EVENT field
"RTN","IVMPLOG",139,0)
 ;  "EVENTS","DCD" - value of the DCD EVENT field
"RTN","IVMPLOG",140,0)
 ;  "EVENTS","ENROLL" - value of the ENROLLMENT EVENT field
"RTN","IVMPLOG",141,0)
 ;
"RTN","IVMPLOG",142,0)
 N NODE
"RTN","IVMPLOG",143,0)
 Q:'$G(IEN) 0
"RTN","IVMPLOG",144,0)
 S NODE=$G(^IVM(301.5,IEN,0))
"RTN","IVMPLOG",145,0)
 Q:(NODE="") 0
"RTN","IVMPLOG",146,0)
 S PLOG("DFN")=$P(NODE,"^")
"RTN","IVMPLOG",147,0)
 S PLOG("YEAR")=$P(NODE,"^",2)
"RTN","IVMPLOG",148,0)
 S PLOG("STATUS")=$P(NODE,"^",3)
"RTN","IVMPLOG",149,0)
 S PLOG("FIRST")=$P(NODE,"^",5)
"RTN","IVMPLOG",150,0)
 S PLOG("CLOSE")=$P(NODE,"^",4)
"RTN","IVMPLOG",151,0)
 S NODE=$G(^IVM(301.5,IEN,1))
"RTN","IVMPLOG",152,0)
 S PLOG("CLOSE","REASON")=$P(NODE,"^")
"RTN","IVMPLOG",153,0)
 S PLOG("CLOSE","SOURCE")=$P(NODE,"^",2)
"RTN","IVMPLOG",154,0)
 S PLOG("CLOSE","TIME")=$P(NODE,"^",3)
"RTN","IVMPLOG",155,0)
 S NODE=$G(^IVM(301.5,IEN,"E"))
"RTN","IVMPLOG",156,0)
 S PLOG("EVENTS","IVM")=$P(NODE,"^")
"RTN","IVMPLOG",157,0)
 S PLOG("EVENTS","DCD")=$P(NODE,"^",2)
"RTN","IVMPLOG",158,0)
 S PLOG("EVENTS","ENROLL")=$P(NODE,"^",3)
"RTN","IVMPLOG",159,0)
 Q 1
"RTN","IVMPLOG",160,0)
 ;
"RTN","IVMPLOG",161,0)
CLOSED(IEN) ;
"RTN","IVMPLOG",162,0)
 ;Description: Returns the value of the STOP FLAG field of the
"RTN","IVMPLOG",163,0)
 ;IVM PATIENT file for a particular record, which indicates whether
"RTN","IVMPLOG",164,0)
 ;transmissions for certain events (but not enrollment events) should
"RTN","IVMPLOG",165,0)
 ;take place.
"RTN","IVMPLOG",166,0)
 ;
"RTN","IVMPLOG",167,0)
 ;Input:
"RTN","IVMPLOG",168,0)
 ;  IEN - internal entry number of a record in the IVM PATIENT file.
"RTN","IVMPLOG",169,0)
 ;Output:
"RTN","IVMPLOG",170,0)
 ;  Function Value - The value of the STOP FLAG field.
"RTN","IVMPLOG",171,0)
 ;
"RTN","IVMPLOG",172,0)
 Q:'$G(IEN) ""
"RTN","IVMPLOG",173,0)
 Q $P($G(^IVM(301.5,IEN,0)),"^",4)
"RTN","IVMPLOG",174,0)
 ;
"RTN","IVMPLOG",175,0)
LOG(DFN,YEAR,EVENTS) ;
"RTN","IVMPLOG",176,0)
 ;Description: Used to queue a patient for the nightly full transmission
"RTN","IVMPLOG",177,0)
 ;for a particular income year. If EVENTS is not passed, an entry in the 
"RTN","IVMPLOG",178,0)
 ;IVM PATIENT file will be created if it does not already exist, but
"RTN","IVMPLOG",179,0)
 ;the flag for transmission will not be set.
"RTN","IVMPLOG",180,0)
 ;
"RTN","IVMPLOG",181,0)
 ;Input:
"RTN","IVMPLOG",182,0)
 ;  DFN - ien of record in the PATIENT file.
"RTN","IVMPLOG",183,0)
 ;  YEAR -  income year in FM format.  This is the year that is to be
"RTN","IVMPLOG",184,0)
 ;  used when creating the full transmission message.
"RTN","IVMPLOG",185,0)
 ;  EVENTS () - an array of reasons for transmission, pass by reference.
"RTN","IVMPLOG",186,0)
 ;    EVENTS("IVM") = 1 if transmission due to IVM criteria, 0 otherwise
"RTN","IVMPLOG",187,0)
 ;    EVENTS(" "DCD")=1 if transmission due to DCD criteria, 0 otherwise
"RTN","IVMPLOG",188,0)
 ;    EVENTS("ENROLL")=1 if transmission due to enrollment criteria, 0 otherwise
"RTN","IVMPLOG",189,0)
 ;Output:
"RTN","IVMPLOG",190,0)
 ;  Function Value - internal entry number of the IVM PATIENT file record, or NULL if record could not be found or created.
"RTN","IVMPLOG",191,0)
 ;
"RTN","IVMPLOG",192,0)
 N IEN
"RTN","IVMPLOG",193,0)
 ;
"RTN","IVMPLOG",194,0)
 ;if the eligibility/enrollment upload is in progess, do nothing
"RTN","IVMPLOG",195,0)
 Q:($G(DGENUPLD)="ENROLLMENT/ELIGIBILITY UPLOAD IN PROGRESS") ""
"RTN","IVMPLOG",196,0)
 ;
"RTN","IVMPLOG",197,0)
 ;to be compatable with current software - in some places,
"RTN","IVMPLOG",198,0)
 ;YEAR passed is just 3 digits
"RTN","IVMPLOG",199,0)
 S:YEAR YEAR=$E(YEAR,1,3)_"0000"
"RTN","IVMPLOG",200,0)
 ;
"RTN","IVMPLOG",201,0)
 Q:'$$TESTVAL^DGENDBS(301.5,.01,DFN) ""
"RTN","IVMPLOG",202,0)
 Q:'$$TESTVAL^DGENDBS(301.5,.02,YEAR) ""
"RTN","IVMPLOG",203,0)
 ;
"RTN","IVMPLOG",204,0)
 ; check for an existing record in 301.5 for this income year...
"RTN","IVMPLOG",205,0)
 S IEN=$$FIND(DFN,YEAR)
"RTN","IVMPLOG",206,0)
 I 'IEN D
"RTN","IVMPLOG",207,0)
 .;need to create a new record
"RTN","IVMPLOG",208,0)
 .N DATA
"RTN","IVMPLOG",209,0)
 .L +^IVM(301.5,0):3
"RTN","IVMPLOG",210,0)
 .Q:'$T
"RTN","IVMPLOG",211,0)
 .S IEN=$$FIND(DFN,YEAR)
"RTN","IVMPLOG",212,0)
 .I IEN L -^IVM(301.5,0) Q
"RTN","IVMPLOG",213,0)
 .S DATA(.01)=DFN,DATA(.02)=YEAR,DATA(.04)=1,DATA(1.01)=5,DATA(1.02)=2,DATA(1.03)=$$NOW^XLFDT
"RTN","IVMPLOG",214,0)
 .S IEN=$$ADD^DGENDBS(301.5,,.DATA)
"RTN","IVMPLOG",215,0)
 .L -^IVM(301.5,0)
"RTN","IVMPLOG",216,0)
 I IEN,$D(EVENTS),$$SETSTAT(IEN,.EVENTS)
"RTN","IVMPLOG",217,0)
 Q IEN
"RTN","IVMPLOG",218,0)
 ;
"RTN","IVMPLOG",219,0)
DELETE(DFN,TESTDATE,MT,RX,HARDSHIP,LTC) ;
"RTN","IVMPLOG",220,0)
 ;Description: Used to notify HEC that deletion of a MT,RX Copay test,
"RTN","IVMPLOG",221,0)
 ;LTC copay exemption test or hardship has occurred
"RTN","IVMPLOG",222,0)
 ;
"RTN","IVMPLOG",223,0)
 ;Input:
"RTN","IVMPLOG",224,0)
 ;  DFN - ien of record in the PATIENT file.
"RTN","IVMPLOG",225,0)
 ;  TESTDATE - date of test
"RTN","IVMPLOG",226,0)
 ;  MT - if $D(MT),MT then a MT was deleted
"RTN","IVMPLOG",227,0)
 ;  RX - if $D(RX),RX then a RX copay test was deleted
"RTN","IVMPLOG",228,0)
 ;  HARDSHIP - if $D(HARDSHIP),HARDSHIP then a hardship was deleted
"RTN","IVMPLOG",229,0)
 ;  LTC - if $G(LTC) then a LTC copay exemption test was deleted
"RTN","IVMPLOG",230,0)
 ;Output: none
"RTN","IVMPLOG",231,0)
 ;
"RTN","IVMPLOG",232,0)
 N YEAR,IEN,DATA
"RTN","IVMPLOG",233,0)
 ;
"RTN","IVMPLOG",234,0)
 S YEAR=($E(TESTDATE,1,3)-1)_"0000"
"RTN","IVMPLOG",235,0)
 ;
"RTN","IVMPLOG",236,0)
 ;
"RTN","IVMPLOG",237,0)
 S IEN=$$FIND(DFN,YEAR)
"RTN","IVMPLOG",238,0)
 Q:'IEN
"RTN","IVMPLOG",239,0)
 I $D(HARDSHIP),HARDSHIP S DATA(.1)=TESTDATE
"RTN","IVMPLOG",240,0)
 I $D(MT),MT S DATA(.08)=TESTDATE
"RTN","IVMPLOG",241,0)
 I $D(RX),RX S DATA(.09)=TESTDATE
"RTN","IVMPLOG",242,0)
 I $G(LTC) S DATA(.11)=TESTDATE
"RTN","IVMPLOG",243,0)
 I $$UPD^DGENDBS(301.5,IEN,.DATA)
"RTN","IVMPLOG",244,0)
 Q
"RTN","IVMPLOG",245,0)
 ;
"RTN","IVMPLOG",246,0)
EVENT(DFN) ;
"RTN","IVMPLOG",247,0)
 ;Description: Called in response to enrollment events. Determines
"RTN","IVMPLOG",248,0)
 ;whether for this patient transmission is appropriate, and if so the
"RTN","IVMPLOG",249,0)
 ;patient is logged for transmission.
"RTN","IVMPLOG",250,0)
 ;
"RTN","IVMPLOG",251,0)
 ;Input: DFN
"RTN","IVMPLOG",252,0)
 ;Output: none
"RTN","IVMPLOG",253,0)
 ;
"RTN","IVMPLOG",254,0)
 Q:'$G(DFN)
"RTN","IVMPLOG",255,0)
 ;
"RTN","IVMPLOG",256,0)
 Q:'$$ON^IVMUPAR1  ;quit if enrollment events turned off
"RTN","IVMPLOG",257,0)
 ;
"RTN","IVMPLOG",258,0)
 ;don't want to log event if called due to file re-indexing
"RTN","IVMPLOG",259,0)
 I $D(DIU(0))!($D(DIK)&$D(DIKJ)&$D(DIKLK)&$D(DIKS)&$D(DIN)) Q
"RTN","IVMPLOG",260,0)
 ;
"RTN","IVMPLOG",261,0)
 ;if the eligibility/enrollment upload is in progess, or there is no enrollment, do nothing
"RTN","IVMPLOG",262,0)
 Q:($G(DGENUPLD)="ENROLLMENT/ELIGIBILITY UPLOAD IN PROGRESS")
"RTN","IVMPLOG",263,0)
 ;remove screen for non-vets, IVM 115 - ERC
"RTN","IVMPLOG",264,0)
 I '$$VET1^DGENPTA(DFN) S EVENTS("ENROLL")=1 I $$LOG(DFN,$$YEAR(DFN),.EVENTS) Q 
"RTN","IVMPLOG",265,0)
 I ('$$FINDCUR^DGENA(DFN)),('$$VET^DGENPTA(DFN)) Q
"RTN","IVMPLOG",266,0)
 N STATUS
"RTN","IVMPLOG",267,0)
 S STATUS=$$STATUS^DGENA(DFN)
"RTN","IVMPLOG",268,0)
 ; Purple Heart added status 21
"RTN","IVMPLOG",269,0)
 I $$VET1^DGENPTA(DFN)!(STATUS=1)!(STATUS=2)!(STATUS=9)!(STATUS=15)!(STATUS=16)!(STATUS=17)!(STATUS=18)!(STATUS=19)!(STATUS=20)!(STATUS=21)!(STATUS=23) D
"RTN","IVMPLOG",270,0)
 .N EVENTS
"RTN","IVMPLOG",271,0)
 .S EVENTS("ENROLL")=1
"RTN","IVMPLOG",272,0)
 .I $$LOG(DFN,$$YEAR(DFN),.EVENTS) ;no need to inform on success or failure
"RTN","IVMPLOG",273,0)
 Q
"RTN","IVMPLOG",274,0)
 ;
"RTN","IVMPLOG",275,0)
YEAR(DFN) ;
"RTN","IVMPLOG",276,0)
 ;Determines the income year to be used in the transmission 
"RTN","IVMPLOG",277,0)
 ;
"RTN","IVMPLOG",278,0)
 N YEAR
"RTN","IVMPLOG",279,0)
 S YEAR=$$LD^IVMUFNC4(DFN)
"RTN","IVMPLOG",280,0)
 S:YEAR YEAR=($E(YEAR,1,3)-1)_"0000"
"RTN","IVMPLOG",281,0)
 S:'YEAR YEAR=($E(DT,1,3)-1)_"0000"
"RTN","IVMPLOG",282,0)
 Q YEAR
"RTN","IVMPREC3")
0^30^B20718682
"RTN","IVMPREC3",1,0)
IVMPREC3 ;ALB/KCL/CKN,TDM - PROCESS INCOMING (Z04 EVENT TYPE) HL7 MESSAGES ; 8/15/08 10:21am
"RTN","IVMPREC3",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**3,17,34,111,115**;21-OCT-94;Build 28
"RTN","IVMPREC3",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMPREC3",4,0)
 ;
"RTN","IVMPREC3",5,0)
 ; This routine will process batch ORU insurance(event type Z04) HL7
"RTN","IVMPREC3",6,0)
 ; messages received from the IVM center.  Format of batch:
"RTN","IVMPREC3",7,0)
 ;       BHS
"RTN","IVMPREC3",8,0)
 ;       {MSH
"RTN","IVMPREC3",9,0)
 ;        PID
"RTN","IVMPREC3",10,0)
 ;        IN1    could be a continuation of IN1
"RTN","IVMPREC3",11,0)
 ;        ZIV
"RTN","IVMPREC3",12,0)
 ;       }
"RTN","IVMPREC3",13,0)
 ;       BTS
"RTN","IVMPREC3",14,0)
 ;
"RTN","IVMPREC3",15,0)
EN ; - entry point to process insurance messages
"RTN","IVMPREC3",16,0)
 ;
"RTN","IVMPREC3",17,0)
 N IVMPID,PIDSTR,COMP,CNTR,NOPID,TMPARY,PID3ARY,ICN,DFN,CNTR2
"RTN","IVMPREC3",18,0)
 F IVMDA=1:0 S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)) Q:'IVMDA  S IVMSEG=$G(^(IVMDA,0)) I $E(IVMSEG,1,3)="MSH" D
"RTN","IVMPREC3",19,0)
 .K HLERR
"RTN","IVMPREC3",20,0)
 .;
"RTN","IVMPREC3",21,0)
 .; - message control id from MSH segment
"RTN","IVMPREC3",22,0)
 .S MSGID=$P(IVMSEG,HLFS,10)
"RTN","IVMPREC3",23,0)
 .;
"RTN","IVMPREC3",24,0)
 .; - get message segments from (#772) file
"RTN","IVMPREC3",25,0)
 .S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)),IVMSEG=$G(^(+IVMDA,0)) I $E(IVMSEG,1,3)'="PID" D  Q
"RTN","IVMPREC3",26,0)
 ..S HLERR="Missing PID segment" D ACK^IVMPREC
"RTN","IVMPREC3",27,0)
 .S CNTR=1,NOPID=0,PIDSTR(CNTR)=$P(IVMSEG,HLFS,2,999)
"RTN","IVMPREC3",28,0)
 .;Handle wrapped PID segment
"RTN","IVMPREC3",29,0)
 .F I=1:1 D  Q:NOPID
"RTN","IVMPREC3",30,0)
 ..S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)),IVMSEG=$G(^(+IVMDA,0))
"RTN","IVMPREC3",31,0)
 ..I $E(IVMSEG,1,4)="IN1^" S NOPID=1,IVMDA=IVMDA-1 Q
"RTN","IVMPREC3",32,0)
 ..S CNTR=CNTR+1,PIDSTR(CNTR)=IVMSEG
"RTN","IVMPREC3",33,0)
 .D BLDPID^IVMPREC6(.PIDSTR,.IVMPID)  ;Create IVMPID subscripted by seq #
"RTN","IVMPREC3",34,0)
 .;convert "" to null for PID segment
"RTN","IVMPREC3",35,0)
 .S CNTR="" F  S CNTR=$O(IVMPID(CNTR)) Q:CNTR=""  D
"RTN","IVMPREC3",36,0)
 ..I $O(IVMPID(CNTR,"")) D  Q
"RTN","IVMPREC3",37,0)
 ...S CNTR2="" F  S CNTR2=$O(IVMPID(CNTR,CNTR2)) Q:CNTR2=""  D
"RTN","IVMPREC3",38,0)
 ....S IVMPID(CNTR,CNTR2)=$$CLEARF^IVMPRECA(IVMPID(CNTR,CNTR2),$E(HLECH))
"RTN","IVMPREC3",39,0)
 ..I IVMPID(CNTR)=HLQ S IVMPID(CNTR)=""
"RTN","IVMPREC3",40,0)
 .M TMPARY(3)=IVMPID(3) D PARSPID3^IVMUFNC(.TMPARY,.PID3ARY)
"RTN","IVMPREC3",41,0)
 .S DFN=$G(PID3ARY("PI")),ICN=$G(PID3ARY("NI"))
"RTN","IVMPREC3",42,0)
 .K TMPARY,PID3ARY
"RTN","IVMPREC3",43,0)
 .I '$$MATCH^IVMUFNC(DFN,ICN,"","","I",.ERRMSG) S HLERR=ERRMSG D ACK^IVMPREC Q
"RTN","IVMPREC3",44,0)
 .S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)),IVMSEG=$G(^(+IVMDA,0)) I $E(IVMSEG,1,3)'="IN1" D  Q
"RTN","IVMPREC3",45,0)
 ..S HLERR="Missing IN1 segment" D ACK^IVMPREC
"RTN","IVMPREC3",46,0)
 .S IVMSEG1=$$CLEARF^IVMPRECA($P(IVMSEG,HLFS,2,999),HLFS,",5,")
"RTN","IVMPREC3",47,0)
 .S $P(IVMSEG1,HLFS,5)=$$CLEARF^IVMPRECA($P(IVMSEG1,HLFS,5),$E(HLECH))
"RTN","IVMPREC3",48,0)
 .I $P(IVMSEG1,HLFS,4)']"" D  Q
"RTN","IVMPREC3",49,0)
 ..S HLERR="Missing insurance company name" D ACK^IVMPREC
"RTN","IVMPREC3",50,0)
 .I $P(IVMSEG1,HLFS,8)']"",($P(IVMSEG1,HLFS,9)']"") D  Q
"RTN","IVMPREC3",51,0)
 ..S HLERR=$S($P(IVMSEG1,HLFS,7)']"":"Missing group number",1:"Missing group name") D ACK^IVMPREC
"RTN","IVMPREC3",52,0)
 .I $P(IVMSEG1,HLFS,17)']"" D  Q
"RTN","IVMPREC3",53,0)
 ..S HLERR="Missing insured's relation to patient" D ACK^IVMPREC
"RTN","IVMPREC3",54,0)
 .I $P(IVMSEG1,HLFS,17)'="v",($P(IVMSEG1,HLFS,16)']"") D  Q
"RTN","IVMPREC3",55,0)
 ..S HLERR="Missing name of insured" D ACK^IVMPREC
"RTN","IVMPREC3",56,0)
 .S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)),IVMSEG=$G(^(+IVMDA,0)) I $E(IVMSEG,1,3)'="ZIV",$L(IVMSEG1)'=241 D  Q
"RTN","IVMPREC3",57,0)
 ..S HLERR="Missing ZIV segment" D ACK^IVMPREC
"RTN","IVMPREC3",58,0)
 .S IVMSEG=$$CLEARF^IVMPRECA(IVMSEG,HLFS)
"RTN","IVMPREC3",59,0)
 .I $P(IVMSEG,HLFS,10)']"" D  Q
"RTN","IVMPREC3",60,0)
 ..S HLERR="Missing IVM internal entry number" D ACK^IVMPREC
"RTN","IVMPREC3",61,0)
 .I $L(IVMSEG1)=241 D  Q:$D(IVMERR)
"RTN","IVMPREC3",62,0)
 ..K IVMERR
"RTN","IVMPREC3",63,0)
 ..S IVMSEG3=IVMSEG
"RTN","IVMPREC3",64,0)
 ..S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)),IVMSEG=$$CLEARF^IVMPRECA($G(^(+IVMDA,0)),HLFS)
"RTN","IVMPREC3",65,0)
 ..I $E(IVMSEG,1,3)'="ZIV" S HLERR="Missing ZIV segment",IVMERR="" D ACK^IVMPREC
"RTN","IVMPREC3",66,0)
 .;S IVMSEG2=$P(IVMSEG,"^",10)
"RTN","IVMPREC3",67,0)
 .;
"RTN","IVMPREC3",68,0)
 .; - check for date of death from IVM
"RTN","IVMPREC3",69,0)
 .I $P(IVMSEG,"^",13)]"" S $P(IVMSEG,"^",13)=$$FMDATE^HLFNC($P(IVMSEG,"^",13))
"RTN","IVMPREC3",70,0)
 .;
"RTN","IVMPREC3",71,0)
 .; - ivm ien/fm date of death
"RTN","IVMPREC3",72,0)
 .S IVMSEG2=$S($P(IVMSEG,"^",13)']"":$P(IVMSEG,"^",10),1:$P(IVMSEG,"^",10)_"/"_$P(IVMSEG,"^",13))
"RTN","IVMPREC3",73,0)
 .S IVMDOD=IVMSEG2
"RTN","IVMPREC3",74,0)
 .;
"RTN","IVMPREC3",75,0)
 .; - if no error encountered - store insurance fields in VistA
"RTN","IVMPREC3",76,0)
 .I '$D(HLERR) D
"RTN","IVMPREC3",77,0)
 ..N IVMRTN,IVMDA
"RTN","IVMPREC3",78,0)
 ..D STORE
"RTN","IVMPREC3",79,0)
 ;
"RTN","IVMPREC3",80,0)
 Q
"RTN","IVMPREC3",81,0)
 ;
"RTN","IVMPREC3",82,0)
 ;
"RTN","IVMPREC3",83,0)
STORE ; - store IN1 segment fields in (#301.5) file and in buffer file
"RTN","IVMPREC3",84,0)
 ;  (remove data from 301.5 'ASEG' xref on successful buffer file filing)
"RTN","IVMPREC3",85,0)
 ;
"RTN","IVMPREC3",86,0)
 N IVMI,IVMJ,IVMIN1,IVMADD
"RTN","IVMPREC3",87,0)
 S DA(1)=$O(^IVM(301.5,"B",DFN,0)),X=$$IEN^IVMUFNC4("IN1")
"RTN","IVMPREC3",88,0)
 I DA(1)']"" S HLERR="patient missing from IVM PATIENT file" D ACK^IVMPREC Q
"RTN","IVMPREC3",89,0)
 I X<0 S HLERR="IN1 segment not in HL7 SEGMENT NAME file" D ACK^IVMPREC Q
"RTN","IVMPREC3",90,0)
 I $G(^IVM(301.5,DA(1),"IN",0))']"" S ^(0)="^301.501PA^^"
"RTN","IVMPREC3",91,0)
 S DIC="^IVM(301.5,"_DA(1)_",""IN"",",DIC(0)="L"
"RTN","IVMPREC3",92,0)
 S DIC("DR")=".03///NOW;.07////^S X=IVMSEG2;10////^S X=IVMSEG1",DLAYGO=301.501
"RTN","IVMPREC3",93,0)
 S:$D(IVMSEG3) DIC("DR")=".03///NOW;.07////^S X=IVMSEG2;10////^S X=IVMSEG1;11////^S X=IVMSEG3"
"RTN","IVMPREC3",94,0)
 K DD,DO D FILE^DICN K DIC,DLAYGO
"RTN","IVMPREC3",95,0)
 Q:Y'>0
"RTN","IVMPREC3",96,0)
 S IVMI=DA(1),IVMJ=+Y
"RTN","IVMPREC3",97,0)
 ; Patch IVMB*2*111 automatically files the record into the buffer file
"RTN","IVMPREC3",98,0)
 ; and removes the notification bulletin to IVM and the segment from
"RTN","IVMPREC3",99,0)
 ; file 301.501
"RTN","IVMPREC3",100,0)
 K DA,X,Y
"RTN","IVMPREC3",101,0)
 S IVMIN1=$$GETIN1^IVMLINS1(IVMI,IVMJ),IVMADD=$P(IVMIN1,U,5)
"RTN","IVMPREC3",102,0)
 D TRANSFER^IVMLINS3(1),IVMQ^IVMLINS1
"RTN","IVMPREC3",103,0)
 Q
"RTN","IVMPREC3",104,0)
 ;
"RTN","IVMPREC6")
0^19^B74089697
"RTN","IVMPREC6",1,0)
IVMPREC6 ;ALB/KCL/BRM/CKN - PROCESS INCOMING (Z05 EVENT TYPE) HL7 MESSAGES ; 1/3/07 2:58pm
"RTN","IVMPREC6",2,0)
 ;;2.0; INCOME VERIFICATION MATCH ;**3,4,12,17,34,58,79,102,115**; 21-OCT-94;Build 28
"RTN","IVMPREC6",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMPREC6",4,0)
 ;
"RTN","IVMPREC6",5,0)
 ; This routine will process batch ORU demographic (event type Z05) HL7
"RTN","IVMPREC6",6,0)
 ; messages received from the IVM center.  Format of HL7 batch message:
"RTN","IVMPREC6",7,0)
 ;
"RTN","IVMPREC6",8,0)
 ;       BHS
"RTN","IVMPREC6",9,0)
 ;       {MSH
"RTN","IVMPREC6",10,0)
 ;        PID
"RTN","IVMPREC6",11,0)
 ;        ZPD
"RTN","IVMPREC6",12,0)
 ;        ZGD
"RTN","IVMPREC6",13,0)
 ;        RF1 (optional)
"RTN","IVMPREC6",14,0)
 ;       }
"RTN","IVMPREC6",15,0)
 ;       BTS
"RTN","IVMPREC6",16,0)
 ;
"RTN","IVMPREC6",17,0)
 ;
"RTN","IVMPREC6",18,0)
EN ; - entry point to process HL7 patient demographic message 
"RTN","IVMPREC6",19,0)
 ;
"RTN","IVMPREC6",20,0)
 N DGENUPLD,VAFCA08,DGRUGA08,COMP,DODSEG,GUARSEG
"RTN","IVMPREC6",21,0)
 ;
"RTN","IVMPREC6",22,0)
 ; prevent a return Z07 when uploading a Z05 (Patient file triggers)
"RTN","IVMPREC6",23,0)
 S DGENUPLD="ENROLLMENT/ELIGIBILITY UPLOAD IN PROGRESS"
"RTN","IVMPREC6",24,0)
 ;
"RTN","IVMPREC6",25,0)
 ; prevent MPI A08 message when uploading Z05 (Patient file triggers)
"RTN","IVMPREC6",26,0)
 S VAFCA08=1  ;MPI/CIRN A08 suppression flag
"RTN","IVMPREC6",27,0)
 ;
"RTN","IVMPREC6",28,0)
 S IVMFLG=0,IVMADFLG=0
"RTN","IVMPREC6",29,0)
 ; - get incoming HL7 message from HL7 Transmission (#772) file
"RTN","IVMPREC6",30,0)
 F IVMDA=0:0 S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)) Q:'IVMDA  S IVMSEG=$G(^(IVMDA,0)) I $E(IVMSEG,1,3)="MSH" D
"RTN","IVMPREC6",31,0)
 .K HLERR
"RTN","IVMPREC6",32,0)
 .;
"RTN","IVMPREC6",33,0)
 .; - message control id from MSH segment
"RTN","IVMPREC6",34,0)
 .S MSGID=$P(IVMSEG,HLFS,10),HLMID=MSGID
"RTN","IVMPREC6",35,0)
 .;
"RTN","IVMPREC6",36,0)
 .; - perform demographics message consistency check
"RTN","IVMPREC6",37,0)
 .D EN^IVMPRECA Q:$D(HLERR)
"RTN","IVMPREC6",38,0)
 .;
"RTN","IVMPREC6",39,0)
 .;Set array of Email, Cell, Pager fields
"RTN","IVMPREC6",40,0)
 .D EPCFLDS(.EPCFARY,.EPCDEL)
"RTN","IVMPREC6",41,0)
 .; - get next msg segment
"RTN","IVMPREC6",42,0)
 .D NEXT I $E(IVMSEG,1,3)'="PID" D  Q
"RTN","IVMPREC6",43,0)
 ..S HLERR="Missing PID segment" D ACK^IVMPREC
"RTN","IVMPREC6",44,0)
 .;
"RTN","IVMPREC6",45,0)
 .F I=1:1 D NEXT Q:$E(IVMSEG,1,4)="ZPD^"  ;Go through all PID
"RTN","IVMPREC6",46,0)
 .; - patient IEN (DFN) from PID segment
"RTN","IVMPREC6",47,0)
 .;Use IVMPID array created in IVMPRECA while performing consistency
"RTN","IVMPREC6",48,0)
 .;to process PID segment
"RTN","IVMPREC6",49,0)
 .;
"RTN","IVMPREC6",50,0)
 .;I '$G(IVMDFN) S HLERR="Invalid DFN" D ACK^IVMPREC  Q
"RTN","IVMPREC6",51,0)
 .S DFN=$G(IVMDFN)
"RTN","IVMPREC6",52,0)
 .;I ('DFN!(DFN'=+DFN)!('$D(^DPT(+DFN,0)))) D  Q
"RTN","IVMPREC6",53,0)
 .;.S HLERR="Invalid DFN" D ACK^IVMPREC
"RTN","IVMPREC6",54,0)
 .;I IVMPID(19)'=$P(^DPT(DFN,0),"^",9) D  Q
"RTN","IVMPREC6",55,0)
 .;.S HLERR="Couldn't match HEC SSN with DHCP SSN" D ACK^IVMPREC
"RTN","IVMPREC6",56,0)
 .;
"RTN","IVMPREC6",57,0)
 .; - check for entry in IVM PATIENT file, otherwise create stub entry
"RTN","IVMPREC6",58,0)
 .S IVM3015=$O(^IVM(301.5,"B",DFN,0))
"RTN","IVMPREC6",59,0)
 .I 'IVM3015 S IVM3015=$$LOG^IVMPLOG(DFN,DT)
"RTN","IVMPREC6",60,0)
 .I 'IVM3015 D  Q
"RTN","IVMPREC6",61,0)
 ..S HLERR="Failed to create entry in IVM PATIENT file"
"RTN","IVMPREC6",62,0)
 ..D ACK^IVMPREC
"RTN","IVMPREC6",63,0)
 .;
"RTN","IVMPREC6",64,0)
 .; - compare PID segment fields with DHCP fields
"RTN","IVMPREC6",65,0)
 .S IVMSEG="PID"  ;Setting IVMSEG to PID before it calls COMPARE
"RTN","IVMPREC6",66,0)
 .I 'DODSEG,'GUARSEG D COMPARE(IVMSEG) Q:$D(HLERR)
"RTN","IVMPREC6",67,0)
 .;
"RTN","IVMPREC6",68,0)
 .; - get next msg segment -decrement the counter so it can pickup ZPD
"RTN","IVMPREC6",69,0)
 .S IVMDA=IVMDA-1 D NEXT I $E(IVMSEG,1,3)'="ZPD" D  Q
"RTN","IVMPREC6",70,0)
 ..S HLERR="Missing ZPD segment" D ACK^IVMPREC
"RTN","IVMPREC6",71,0)
 .;Convert "" to null in ZPD segment except seq. 8,9, 31 and 32
"RTN","IVMPREC6",72,0)
 .S IVMSEG=$$CLEARF^IVMPRECA(IVMSEG,HLFS,",9,10,32,33,")
"RTN","IVMPREC6",73,0)
 .;
"RTN","IVMPREC6",74,0)
 .; - compare ZPD segment fields with DHCP fields
"RTN","IVMPREC6",75,0)
 .D COMPARE(IVMSEG)
"RTN","IVMPREC6",76,0)
 .;
"RTN","IVMPREC6",77,0)
 .; - get next msg segment
"RTN","IVMPREC6",78,0)
 .D NEXT I $E(IVMSEG,1,3)="ZEL" D  Q
"RTN","IVMPREC6",79,0)
 ..S HLERR="ZEL segment should not be sent in Z05 message" D ACK^IVMPREC
"RTN","IVMPREC6",80,0)
 .;
"RTN","IVMPREC6",81,0)
 .; - get next msg segment
"RTN","IVMPREC6",82,0)
 .I $E(IVMSEG,1,3)'="ZGD" D  Q
"RTN","IVMPREC6",83,0)
 ..S HLERR="Missing ZGD segment" D ACK^IVMPREC
"RTN","IVMPREC6",84,0)
 .;
"RTN","IVMPREC6",85,0)
 .; - compare ZGD segment fields with DHCP fields
"RTN","IVMPREC6",86,0)
 .; convert "" to null for ZGD segment
"RTN","IVMPREC6",87,0)
 .S IVMSEG=$$CLEARF^IVMPRECA(IVMSEG,HLFS,",7,") ;ignore seq. 6
"RTN","IVMPREC6",88,0)
 .; convert seq. 6 separately
"RTN","IVMPREC6",89,0)
 .S $P(IVMSEG,HLFS,7)=$$CLEARF^IVMPRECA($P(IVMSEG,HLFS,7),$E(HLECH))
"RTN","IVMPREC6",90,0)
 .D COMPARE(IVMSEG)
"RTN","IVMPREC6",91,0)
 .;S IVMFLG=0
"RTN","IVMPREC6",92,0)
 .;
"RTN","IVMPREC6",93,0)
 .; - check for RF1 segment and get segment if it exists
"RTN","IVMPREC6",94,0)
 .;     This process will automatically update patient address data
"RTN","IVMPREC6",95,0)
 .;     in the Patient (#2) file if the incoming address is more
"RTN","IVMPREC6",96,0)
 .;     recent than the existing one.
"RTN","IVMPREC6",97,0)
 .;Modified code to handle multiple RF1 segment - IVM*2*115
"RTN","IVMPREC6",98,0)
 .S (UPDEPC("SAD"),UPDEPC("CPH"),UPDEPC("PNO"),UPDEPC("EAD"))=0
"RTN","IVMPREC6",99,0)
 .S QFLG=0 I $$RF1CHK(IVMRTN,IVMDA) F I=1:1 D  Q:QFLG
"RTN","IVMPREC6",100,0)
 ..D NEXT
"RTN","IVMPREC6",101,0)
 ..S IVMSEG=$$CLEARF^IVMPRECA(IVMSEG,HLFS,",7,") ;ignore seq. 6
"RTN","IVMPREC6",102,0)
 ..S $P(IVMSEG,HLFS,7)=$$CLEARF^IVMPRECA($P(IVMSEG,HLFS,7),$E(HLECH))
"RTN","IVMPREC6",103,0)
 ..I $P(IVMSEG,HLFS,4)="" S QFLG=1 Q  ;Quit if RF1 is blank
"RTN","IVMPREC6",104,0)
 ..D COMPARE(IVMSEG)
"RTN","IVMPREC6",105,0)
 ..I '$$RF1CHK(IVMRTN,IVMDA) S QFLG=1
"RTN","IVMPREC6",106,0)
 .S IVMFLG=0
"RTN","IVMPREC6",107,0)
 ;
"RTN","IVMPREC6",108,0)
 ; - send mail message if necessary
"RTN","IVMPREC6",109,0)
 I IVMCNTR D MAIL^IVMUFNC()
"RTN","IVMPREC6",110,0)
 ; Cleanup variables if no msg necessary
"RTN","IVMPREC6",111,0)
 I 'IVMCNTR K IVMTEXT,XMSUB
"RTN","IVMPREC6",112,0)
 ;
"RTN","IVMPREC6",113,0)
ENQ ; - cleanup variables
"RTN","IVMPREC6",114,0)
 K DA,DFN,IVMADDR,IVMADFLG,IVMDA,IVMDHCP,IVMFLAG,IVMFLD,IVMPIECE,IVMSEG,IVMSTART,IVMXREF,DGENUPLD,IVMPID,PIDSTR,ADDRESS,TELECOM,UPDEPC,EPCFARY,IVMDFN,DODSEG,EPCDEL,GUARSEG
"RTN","IVMPREC6",115,0)
 Q
"RTN","IVMPREC6",116,0)
 ;
"RTN","IVMPREC6",117,0)
 ;
"RTN","IVMPREC6",118,0)
NEXT ; - get the next HL7 segment in the message from HL7 Transmission (#772) file
"RTN","IVMPREC6",119,0)
 ;
"RTN","IVMPREC6",120,0)
 S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)),IVMSEG=$G(^(+IVMDA,0))
"RTN","IVMPREC6",121,0)
 Q
"RTN","IVMPREC6",122,0)
 ;
"RTN","IVMPREC6",123,0)
 ;
"RTN","IVMPREC6",124,0)
COMPARE(IVMSEG) ; - compare incoming HL7 segment/fields with DHCP fields
"RTN","IVMPREC6",125,0)
 ;
"RTN","IVMPREC6",126,0)
 ;  Input:  IVMSEG  --  as the text of the incoming HL7 message
"RTN","IVMPREC6",127,0)
 ;
"RTN","IVMPREC6",128,0)
 ; Output:  None
"RTN","IVMPREC6",129,0)
 ;
"RTN","IVMPREC6",130,0)
 ; - get 3 letter HL7 segment name
"RTN","IVMPREC6",131,0)
 S IVMXREF=$P(IVMSEG,HLFS,1),IVMSTART=IVMXREF
"RTN","IVMPREC6",132,0)
 ;
"RTN","IVMPREC6",133,0)
 ; - strip off HL7 segment name
"RTN","IVMPREC6",134,0)
 S IVMSEG=$P(IVMSEG,HLFS,2,99)
"RTN","IVMPREC6",135,0)
 ;
"RTN","IVMPREC6",136,0)
 ; - roll through "C" x-ref in IVM Demographic Upload Fields (#301.92) file
"RTN","IVMPREC6",137,0)
 F  S IVMXREF=$O(^IVM(301.92,"C",IVMXREF)) Q:IVMXREF']""  D
"RTN","IVMPREC6",138,0)
 .S IVMDEMDA=$O(^IVM(301.92,"C",IVMXREF,"")) Q:IVMDEMDA']""
"RTN","IVMPREC6",139,0)
 .I $$INACTIVE(IVMDEMDA) Q
"RTN","IVMPREC6",140,0)
 .;
"RTN","IVMPREC6",141,0)
 .; - compare incoming HL7 segment fields with DHCP fields
"RTN","IVMPREC6",142,0)
 .I IVMXREF["PID",(IVMSTART["PID") D PID^IVMPREC8
"RTN","IVMPREC6",143,0)
 .I IVMXREF["ZPD",(IVMSTART["ZPD") D ZPD^IVMPREC8
"RTN","IVMPREC6",144,0)
 .I IVMXREF["ZGD",(IVMSTART["ZGD") D ZGD^IVMPREC8
"RTN","IVMPREC6",145,0)
 .I IVMXREF["RF1",(IVMSTART["RF1") D RF1^IVMPREC8
"RTN","IVMPREC6",146,0)
 Q
"RTN","IVMPREC6",147,0)
 ;
"RTN","IVMPREC6",148,0)
 ;
"RTN","IVMPREC6",149,0)
DEMBULL ; -  build mail message for transmission to IVM mail group notifying
"RTN","IVMPREC6",150,0)
 ;    them that patients with updated demographic data has been received
"RTN","IVMPREC6",151,0)
 ;    from the IVM Center and may now be uploaded into DHCP.
"RTN","IVMPREC6",152,0)
 ;
"RTN","IVMPREC6",153,0)
 ; If record is auto uploaded, don't add veteran to bulletin
"RTN","IVMPREC6",154,0)
 I $$CKAUTO Q
"RTN","IVMPREC6",155,0)
 ;
"RTN","IVMPREC6",156,0)
 S IVMPTID=$$PT^IVMUFNC4(DFN)
"RTN","IVMPREC6",157,0)
 S XMSUB="IVM - DEMOGRAPHIC UPLOAD for "_$P($P(IVMPTID,"^"),",")_" ("_$P(IVMPTID,"^",3)_")"
"RTN","IVMPREC6",158,0)
 S IVMTEXT(1)="Updated demographic information has been received from the"
"RTN","IVMPREC6",159,0)
 S IVMTEXT(2)="Health Eligibilty Center.  Please select the 'Demographic Upload'"
"RTN","IVMPREC6",160,0)
 S IVMTEXT(3)="option from the IVM Upload Menu in order to take action on this"
"RTN","IVMPREC6",161,0)
 S IVMTEXT(4)="demographic information.  If you have any questions concerning the"
"RTN","IVMPREC6",162,0)
 S IVMTEXT(5)="information received, please contact the Health Eligibility Center."
"RTN","IVMPREC6",163,0)
 S IVMTEXT(7)=""
"RTN","IVMPREC6",164,0)
 S IVMTEXT(8)="The Health Eligibilty Center has identified the following"
"RTN","IVMPREC6",165,0)
 S IVMTEXT(9)="patients as having updated demographic information:"
"RTN","IVMPREC6",166,0)
 S IVMTEXT(10)=""
"RTN","IVMPREC6",167,0)
 S IVMCNTR=IVMCNTR+1
"RTN","IVMPREC6",168,0)
 S IVMTEXT(IVMCNTR+10)=$J(IVMCNTR_")",5)_"  "_$P(IVMPTID,"^")_" ("_$P(IVMPTID,"^",3)_")"
"RTN","IVMPREC6",169,0)
 Q
"RTN","IVMPREC6",170,0)
 ;
"RTN","IVMPREC6",171,0)
INACTIVE(IVMDEMDA) ;Check if field is inactive in Demographic Upload
"RTN","IVMPREC6",172,0)
 ; Input  -- IVMDEMDA IVM Demographic Upload Fields IEN
"RTN","IVMPREC6",173,0)
 ; Output -- 1=Yes and 0=No
"RTN","IVMPREC6",174,0)
 Q +$P($G(^IVM(301.92,IVMDEMDA,0)),U,9)
"RTN","IVMPREC6",175,0)
 ;
"RTN","IVMPREC6",176,0)
RF1CHK(IVMRTN,IVMDA) ;does an RF1 segment exist in this message?
"RTN","IVMPREC6",177,0)
 N RF1
"RTN","IVMPREC6",178,0)
 S RF1=$O(^TMP($J,IVMRTN,IVMDA))
"RTN","IVMPREC6",179,0)
 I $E($G(^(+RF1,0)),1,3)'="RF1" Q 0
"RTN","IVMPREC6",180,0)
 Q 1
"RTN","IVMPREC6",181,0)
 ;
"RTN","IVMPREC6",182,0)
CKAUTO() ;
"RTN","IVMPREC6",183,0)
 ; Chect if message qualifies for an auto upload.
"RTN","IVMPREC6",184,0)
 N AUTO,IVMI,DOD
"RTN","IVMPREC6",185,0)
 S AUTO=0,IVMI=$O(^IVM(301.92,"C","ZPD09",""))
"RTN","IVMPREC6",186,0)
 I IVMI=IVMDEMDA  D
"RTN","IVMPREC6",187,0)
 .I +IVMFLD'>0 S AUTO=1 Q
"RTN","IVMPREC6",188,0)
 .S DOD=$P($G(^DPT(DFN,.35)),U)
"RTN","IVMPREC6",189,0)
 .I DOD=IVMFLD S AUTO=1 Q
"RTN","IVMPREC6",190,0)
 ;
"RTN","IVMPREC6",191,0)
 Q AUTO
"RTN","IVMPREC6",192,0)
BLDPID(PIDTMP,IVMPID) ;Build IVMPID subscripted by sequence number
"RTN","IVMPREC6",193,0)
 N STR,X1,X2,N,TEXT,C,L
"RTN","IVMPREC6",194,0)
 S STR="",X1=1,(N,X2)=0
"RTN","IVMPREC6",195,0)
 F  S N=$O(PIDTMP(N)) Q:N=""  S TEXT=PIDTMP(N) F L=1:1:$L(TEXT) S C=$E(TEXT,L) D
"RTN","IVMPREC6",196,0)
 . I C="^" D  Q
"RTN","IVMPREC6",197,0)
 . . I X2 S X2=X2+1,IVMPID(X1,X2)=STR
"RTN","IVMPREC6",198,0)
 . . E  S IVMPID(X1)=STR
"RTN","IVMPREC6",199,0)
 . . S STR="",X1=X1+1,X2=0
"RTN","IVMPREC6",200,0)
 . I C="|" D  Q
"RTN","IVMPREC6",201,0)
 . . S X2=X2+1,IVMPID(X1,X2)=STR,STR=""
"RTN","IVMPREC6",202,0)
 . S STR=STR_C
"RTN","IVMPREC6",203,0)
 I $G(C)'="",$G(C)'="^",$G(C)'="|" D
"RTN","IVMPREC6",204,0)
 . I X2 S X2=X2+1,IVMPID(X1,X2)=STR Q
"RTN","IVMPREC6",205,0)
 . S IVMPID(X1)=STR
"RTN","IVMPREC6",206,0)
 Q
"RTN","IVMPREC6",207,0)
ADDRCHNG(DFN) ;Store Address Change Date/time, Source and site if necessary
"RTN","IVMPREC6",208,0)
 N IVMVALUE,IVMFIELD
"RTN","IVMPREC6",209,0)
 I '$D(^TMP($J,"CHANGE UPDATE")) Q
"RTN","IVMPREC6",210,0)
 S IVMFIELD=0 F  S IVMFIELD=$O(^TMP($J,"CHANGE UPDATE",IVMFIELD)) Q:IVMFIELD=""  D
"RTN","IVMPREC6",211,0)
 . S IVMVALUE=$G(^TMP($J,"CHANGE UPDATE",IVMFIELD))
"RTN","IVMPREC6",212,0)
 . S DIE="^DPT(",DA=DFN,DR=IVMFIELD_"////^S X=IVMVALUE"
"RTN","IVMPREC6",213,0)
 . D ^DIE K DA,DIE,DR
"RTN","IVMPREC6",214,0)
 .; - delete inaccurate Addr Change Site data if Source is not VAMC
"RTN","IVMPREC6",215,0)
 . I IVMFIELD=.119,IVMVALUE'="VAMC" S FDA(2,+DFN_",",.12)="@" D UPDATE^DIE("E","FDA")
"RTN","IVMPREC6",216,0)
 K ^TMP($J,"CHANGE UPDATE")
"RTN","IVMPREC6",217,0)
 Q
"RTN","IVMPREC6",218,0)
EPCFLDS(EPCFARY,EPCDEL) ;
"RTN","IVMPREC6",219,0)
 ;EPCFARY - Contains IENs of Pager, email and Cell phone records in 301.92 File - Passed by reference
"RTN","IVMPREC6",220,0)
 ;EPCDEL - Contains field # of Pager, Email and Cell phone fields in Patient(#2) file. - Passed by reference
"RTN","IVMPREC6",221,0)
 I (DODSEG)!(GUARSEG) Q
"RTN","IVMPREC6",222,0)
 S EPCFARY("PNO")=$O(^IVM(301.92,"B","PAGER NUMBER",0))_"^"_$O(^IVM(301.92,"B","PAGER CHANGE DT/TM",0))_"^"_$O(^IVM(301.92,"B","PAGER CHANGE SITE",0))_"^"_$O(^IVM(301.92,"B","PAGER CHANGE SOURCE",0))
"RTN","IVMPREC6",223,0)
 S EPCFARY("CPH")=$O(^IVM(301.92,"B","CELLULAR NUMBER",0))_"^"_$O(^IVM(301.92,"B","CELL PHONE CHANGE DT/TM",0))_"^"_$O(^IVM(301.92,"B","CELL PHONE CHANGE SITE",0))_"^"_$O(^IVM(301.92,"B","CELL PHONE CHANGE SOURCE",0))
"RTN","IVMPREC6",224,0)
 S EPCFARY("EAD")=$O(^IVM(301.92,"B","EMAIL ADDRESS",0))_"^"_$O(^IVM(301.92,"B","EMAIL CHANGE DT/TM",0))_"^"_$O(^IVM(301.92,"B","EMAIL CHANGE SITE",0))_"^"_$O(^IVM(301.92,"B","EMAIL CHANGE SOURCE",0))
"RTN","IVMPREC6",225,0)
 S EPCDEL("PNO")=".135^.1312^.1313^.1314"
"RTN","IVMPREC6",226,0)
 S EPCDEL("CPH")=".134^.139^.1311^.13111"
"RTN","IVMPREC6",227,0)
 S EPCDEL("EAD")=".133^.136^.137^.138"
"RTN","IVMPREC6",228,0)
 Q
"RTN","IVMPREC8")
0^20^B61872101
"RTN","IVMPREC8",1,0)
IVMPREC8 ;ALB/KCL/BRM/PJR/CKN - PROCESS INCOMING (Z05 EVENT TYPE) HL7 MESSAGES (CON'T) ; 8/15/08 10:53am
"RTN","IVMPREC8",2,0)
 ;;2.0; INCOME VERIFICATION MATCH ;**5,6,12,58,73,79,102,115**; 21-OCT-94;Build 28
"RTN","IVMPREC8",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMPREC8",4,0)
 ;
"RTN","IVMPREC8",5,0)
 ; This routine is called from IVMPREC6.
"RTN","IVMPREC8",6,0)
 ; This routine will process batch ORU demographic (event type Z05) HL7
"RTN","IVMPREC8",7,0)
 ; messages received from the IVM center.
"RTN","IVMPREC8",8,0)
 ;
"RTN","IVMPREC8",9,0)
 ;
"RTN","IVMPREC8",10,0)
 ;
"RTN","IVMPREC8",11,0)
PID ; - compare PID segment fields with DHCP fields
"RTN","IVMPREC8",12,0)
 N COMPPH1,COMPPH2,COUNTRY
"RTN","IVMPREC8",13,0)
 ;
"RTN","IVMPREC8",14,0)
 ; - strip off segment name
"RTN","IVMPREC8",15,0)
 S IVMPIECE=$E(IVMXREF,4,7)
"RTN","IVMPREC8",16,0)
 ;Only process if value exist - also handles multiple address
"RTN","IVMPREC8",17,0)
 I $G(IVMPID(+$E(IVMPIECE,1,2)))'=""!($O(IVMPID(+$E(IVMPIECE,1,2),""))) D
"RTN","IVMPREC8",18,0)
 .;
"RTN","IVMPREC8",19,0)
 .; - if PID field is the address field - parse address
"RTN","IVMPREC8",20,0)
 .S IVMADFLG=0
"RTN","IVMPREC8",21,0)
 .I IVMXREF["PID11",'$G(DODSEG) D  Q:IVMFLD=""
"RTN","IVMPREC8",22,0)
 ..; - get PID address field containing 5 pieces seperated by HLECH (~)
"RTN","IVMPREC8",23,0)
 ..;currently only receiving permanent address or Bad address type
"RTN","IVMPREC8",24,0)
 ..S IVMADDR=$S($D(ADDRESS("P")):ADDRESS("P"),$D(ADDRESS("VAB1")):ADDRESS("VAB1"),$D(ADDRESS("VAB2")):ADDRESS("VAB2"),$D(ADDRESS("VAB3")):ADDRESS("VAB3"),$D(ADDRESS("VAB4")):ADDRESS("VAB4"),1:"")
"RTN","IVMPREC8",25,0)
 ..I IVMADDR="" Q
"RTN","IVMPREC8",26,0)
 ..S COUNTRY=$P(IVMADDR,$E(HLECH),6)
"RTN","IVMPREC8",27,0)
 ..S FORADDR=$S(COUNTRY="USA":0,1:1)
"RTN","IVMPREC8",28,0)
 ..; - get piece of address field, and set IVMFLD
"RTN","IVMPREC8",29,0)
 ..S IVMPIECE=$E(IVMPIECE,3,4),IVMFLD=$P(IVMADDR,$E(HLECH),IVMPIECE)
"RTN","IVMPREC8",30,0)
 ..Q:IVMFLD=""
"RTN","IVMPREC8",31,0)
 ..; - convert state abbrev. to pointer
"RTN","IVMPREC8",32,0)
 ..I IVMPIECE=4 D
"RTN","IVMPREC8",33,0)
 ...S IVMFLD=$S('FORADDR:IVMFLD,1:"")
"RTN","IVMPREC8",34,0)
 ...I IVMFLD'="" S (IVMSTPTR,IVMFLD)=+$O(^DIC(5,"C",IVMFLD,0))
"RTN","IVMPREC8",35,0)
 ..I IVMPIECE=5 D
"RTN","IVMPREC8",36,0)
 ...S IVMFLD=$S('FORADDR:IVMFLD,1:"")
"RTN","IVMPREC8",37,0)
 ...I IVMFLD'="" S X=IVMFLD D ZIPIN^VAFADDR S IVMFLD=X
"RTN","IVMPREC8",38,0)
 ..I IVMPIECE="4F" S IVMFLD=$S(FORADDR:IVMFLD,1:"") ;PROVINCE
"RTN","IVMPREC8",39,0)
 ..I IVMPIECE="5F" S IVMFLD=$S(FORADDR:IVMFLD,1:"") ;POSTAL CODE
"RTN","IVMPREC8",40,0)
 ..I IVMPIECE=6 S IVMFLD=$$CNTRCONV(COUNTRY) ;COUNTRY
"RTN","IVMPREC8",41,0)
 ..I IVMPIECE=7 S IVMFLD=$$BAICONV(IVMFLD) ;Bad Address Indicator
"RTN","IVMPREC8",42,0)
 ..S IVMADFLG=1
"RTN","IVMPREC8",43,0)
 .;
"RTN","IVMPREC8",44,0)
 .I IVMXREF["PID12",'$G(DODSEG) D
"RTN","IVMPREC8",45,0)
 ..I 'FORADDR S IVMADFLG=1,IVMFLD=+$O(^DIC(5,IVMSTPTR,1,"C",IVMPID(12),0))  ;Process county only if not foreign address
"RTN","IVMPREC8",46,0)
 .; line remove so that the phone number is compared 
"RTN","IVMPREC8",47,0)
 .; before saving to 301.5.
"RTN","IVMPREC8",48,0)
 .I IVMXREF["PID13",$D(TELECOM),'$G(DODSEG) D
"RTN","IVMPREC8",49,0)
 ..;Pager Number
"RTN","IVMPREC8",50,0)
 ..I IVMXREF="PID13B",$D(TELECOM("BPN")) D
"RTN","IVMPREC8",51,0)
 ...S IVMFLD=$$CONVPH($P($G(TELECOM("BPN")),$E(HLECH))),IVMADFLG=1
"RTN","IVMPREC8",52,0)
 ..;Cell Phone Number
"RTN","IVMPREC8",53,0)
 ..I IVMXREF="PID13C",$D(TELECOM("ORN")) D
"RTN","IVMPREC8",54,0)
 ...S IVMFLD=$$CONVPH($P($G(TELECOM("ORN")),$E(HLECH))),IVMADFLG=1
"RTN","IVMPREC8",55,0)
 ..;Email Address
"RTN","IVMPREC8",56,0)
 ..I IVMXREF="PID13E",$D(TELECOM("NET")) D
"RTN","IVMPREC8",57,0)
 ...S IVMFLD=$P($G(TELECOM("NET")),$E(HLECH),4)
"RTN","IVMPREC8",58,0)
 ...S IVMFLD=$S($$CHKEMAIL(IVMFLD):IVMFLD,1:""),IVMADFLG=1
"RTN","IVMPREC8",59,0)
 .; - file address fields and quit
"RTN","IVMPREC8",60,0)
 .I IVMADFLG D STORE^IVMPREC9 Q
"RTN","IVMPREC8",61,0)
 .;
"RTN","IVMPREC8",62,0)
 .; - otherwise, set IVMFLD to field rec'd from IVM
"RTN","IVMPREC8",63,0)
 .;   for comparison with DHCP field
"RTN","IVMPREC8",64,0)
 .S IVMFLD=$G(IVMPID(IVMPIECE))
"RTN","IVMPREC8",65,0)
 .;
"RTN","IVMPREC8",66,0)
 .; - if HL7 date convert to FM date and set IVMFLD
"RTN","IVMPREC8",67,0)
 .I IVMXREF["PID07" S IVMFLD=$$FMDATE^HLFNC(IVMFLD)
"RTN","IVMPREC8",68,0)
 .;
"RTN","IVMPREC8",69,0)
 .; - call VADPT routine to return DHCP demographics
"RTN","IVMPREC8",70,0)
 .D DEM^VADPT,ADD^VADPT
"RTN","IVMPREC8",71,0)
 .;
"RTN","IVMPREC8",72,0)
 .; - execute code on the 1 node and get DHCP field for comparison
"RTN","IVMPREC8",73,0)
 .S IVMDHCP="" X:$D(^IVM(301.92,+IVMDEMDA,1)) ^(1) S IVMDHCP=Y
"RTN","IVMPREC8",74,0)
 .;
"RTN","IVMPREC8",75,0)
 .; - special logic for phone number processing
"RTN","IVMPREC8",76,0)
 .; - if different, then store the actual value received, then quit
"RTN","IVMPREC8",77,0)
 .;
"RTN","IVMPREC8",78,0)
 .I IVMXREF="PID13",$D(TELECOM("PRN")),'$G(DODSEG) D  Q
"RTN","IVMPREC8",79,0)
 ..S IVMFLD=$P($G(TELECOM("PRN")),$E(HLECH))
"RTN","IVMPREC8",80,0)
 ..I IVMFLD]"" D
"RTN","IVMPREC8",81,0)
 ...S COMPPH1=$$CONVPH(IVMFLD),COMPPH2=$$CONVPH(IVMDHCP)
"RTN","IVMPREC8",82,0)
 ...I COMPPH1'=COMPPH2 D STORE^IVMPREC9
"RTN","IVMPREC8",83,0)
 .;
"RTN","IVMPREC8",84,0)
 .; - if field from IVM does not equal DHCP field - store for uploading
"RTN","IVMPREC8",85,0)
 .I IVMFLD]"",(IVMFLD'=IVMDHCP) D STORE^IVMPREC9
"RTN","IVMPREC8",86,0)
 Q
"RTN","IVMPREC8",87,0)
 ;
"RTN","IVMPREC8",88,0)
 ;
"RTN","IVMPREC8",89,0)
ZPD ; - compare ZPD segment fields with DHCP fields
"RTN","IVMPREC8",90,0)
 N STFLG
"RTN","IVMPREC8",91,0)
 S STFLG=0
"RTN","IVMPREC8",92,0)
 S IVMPIECE=$E(IVMXREF,4,5)
"RTN","IVMPREC8",93,0)
 I $P(IVMSEG,HLFS,IVMPIECE)]"" D
"RTN","IVMPREC8",94,0)
 .;
"RTN","IVMPREC8",95,0)
 .; - set var to HL7 field
"RTN","IVMPREC8",96,0)
 .S IVMFLD=$P(IVMSEG,HLFS,IVMPIECE)
"RTN","IVMPREC8",97,0)
 .;
"RTN","IVMPREC8",98,0)
 .; - if HL7 date convert to FM date
"RTN","IVMPREC8",99,0)
 .I IVMXREF["ZPD09"!(IVMXREF["ZPD13")!(IVMXREF["ZPD32") S IVMFLD=$$FMDATE^HLFNC(IVMFLD)
"RTN","IVMPREC8",100,0)
 .;
"RTN","IVMPREC8",101,0)
 .; - execute code on the 1 node and get DHCP field
"RTN","IVMPREC8",102,0)
 .S IVMDHCP="" X:$D(^IVM(301.92,+IVMDEMDA,1)) ^(1) S IVMDHCP=Y
"RTN","IVMPREC8",103,0)
 .;
"RTN","IVMPREC8",104,0)
 .; - if field from IVM does not equal DHCP field - store for uploading 
"RTN","IVMPREC8",105,0)
 .I IVMFLD]"",(IVMFLD'=IVMDHCP) S STFLG=1 D STORE^IVMPREC9 Q
"RTN","IVMPREC8",106,0)
 .I IVMXREF["ZPD09"!(IVMXREF["ZPD31")!(IVMXREF["ZPD32") D STORE^IVMPREC9
"RTN","IVMPREC8",107,0)
 I IVMXREF["ZPD08",STFLG,$$AUTORINC^IVMPREC9(DFN) Q
"RTN","IVMPREC8",108,0)
 I IVMXREF["ZPD32",$$AUTODOD^IVMLDEMD(DFN)
"RTN","IVMPREC8",109,0)
 Q
"RTN","IVMPREC8",110,0)
 ;
"RTN","IVMPREC8",111,0)
 ;
"RTN","IVMPREC8",112,0)
ZGD ; - compare ZGD segment fields with DHCP fields
"RTN","IVMPREC8",113,0)
 S IVMADFLG=0
"RTN","IVMPREC8",114,0)
 S IVMPIECE=$E(IVMXREF,4,7)
"RTN","IVMPREC8",115,0)
 I $P(IVMSEG,HLFS,$E(IVMPIECE,1,2))]"" D
"RTN","IVMPREC8",116,0)
 .;
"RTN","IVMPREC8",117,0)
 .; - set var IVMFLD to incoming HL7 field
"RTN","IVMPREC8",118,0)
 .I 'IVMADFLG S IVMFLD=$P(IVMSEG,HLFS,IVMPIECE)
"RTN","IVMPREC8",119,0)
 .;
"RTN","IVMPREC8",120,0)
 .; - ZGD06 as the ZGD address field containing 5 pieces seperated by HLECH (~)
"RTN","IVMPREC8",121,0)
 .I IVMXREF["ZGD06" D
"RTN","IVMPREC8",122,0)
 ..S IVMADDR=$P(IVMSEG,HLFS,$E(IVMPIECE,1,2)),IVMPIECE=$E(IVMPIECE,3)
"RTN","IVMPREC8",123,0)
 ..S IVMFLD=$P(IVMADDR,$E(HLECH),IVMPIECE),IVMADFLG=1
"RTN","IVMPREC8",124,0)
 ..I IVMFLD]"",IVMPIECE=4 S IVMFLD=$O(^DIC(5,"C",IVMFLD,0))
"RTN","IVMPREC8",125,0)
 ..I IVMFLD]"",IVMPIECE=5 S X=IVMFLD D ZIPIN^VAFADDR S IVMFLD=$G(X)
"RTN","IVMPREC8",126,0)
 .;
"RTN","IVMPREC8",127,0)
 .; - if HL7 date convert to FM date
"RTN","IVMPREC8",128,0)
 .I IVMXREF["ZGD08" S IVMFLD=$$FMDATE^HLFNC(IVMFLD)
"RTN","IVMPREC8",129,0)
 .;
"RTN","IVMPREC8",130,0)
 .; - execute code on the 1 node and get DHCP field
"RTN","IVMPREC8",131,0)
 .S IVMDHCP="" X:$D(^IVM(301.92,+IVMDEMDA,1)) ^(1) S IVMDHCP=Y
"RTN","IVMPREC8",132,0)
 .;
"RTN","IVMPREC8",133,0)
 .; if field from IVM does not equal DHCP field - store for uploading
"RTN","IVMPREC8",134,0)
 .I IVMFLD]"",(IVMFLD'=IVMDHCP) D STORE^IVMPREC9
"RTN","IVMPREC8",135,0)
 Q
"RTN","IVMPREC8",136,0)
RF1 ; - compare RF1 segment fields with DHCP fields
"RTN","IVMPREC8",137,0)
 S IVMPIECE=$E(IVMXREF,4),IVMADFLG=1,RF1TYPE=$P(IVMSEG,HLFS,3)
"RTN","IVMPREC8",138,0)
 ;As per requirements, delete the communication data (Email, Cell and Pager) if it is not received in Z05.
"RTN","IVMPREC8",139,0)
 ;Hence, remove it from EPCDEL (deletion array) if Data exist in Z05. Comm. fields contained in EPCDEL will be deleted after updating all incoming communication data.
"RTN","IVMPREC8",140,0)
 K EPCDEL(RF1TYPE)
"RTN","IVMPREC8",141,0)
 ;if RF1 field is SEQ6, then parse subcomponents
"RTN","IVMPREC8",142,0)
 I RF1TYPE="SAD",((IVMXREF="RF161")!(IVMXREF="RF162")!(IVMXREF="RF171")) D RF1PROC
"RTN","IVMPREC8",143,0)
 I RF1TYPE="CPH",((IVMXREF="RF161C")!(IVMXREF="RF162C")!(IVMXREF="RF171C")) D RF1PROC
"RTN","IVMPREC8",144,0)
 I RF1TYPE="PNO",((IVMXREF="RF161B")!(IVMXREF="RF162B")!(IVMXREF="RF171B")) D RF1PROC
"RTN","IVMPREC8",145,0)
 I RF1TYPE="EAD",((IVMXREF="RF161E")!(IVMXREF="RF162E")!(IVMXREF="RF171E")) D RF1PROC
"RTN","IVMPREC8",146,0)
 I '$$RF1CHK^IVMPREC6(IVMRTN,IVMDA),IVMXREF="RF171E" D  ;Last RF1
"RTN","IVMPREC8",147,0)
 . I $$AUTOEPC^IVMPREC9(DFN,.UPDEPC)
"RTN","IVMPREC8",148,0)
 . I 'UPDEPC("SAD") S NOUPDT=1
"RTN","IVMPREC8",149,0)
 . I $$AUTOADDR^IVMLDEM6(DFN,1,NOUPDT)
"RTN","IVMPREC8",150,0)
 Q
"RTN","IVMPREC8",151,0)
 ;
"RTN","IVMPREC8",152,0)
RF1PROC ;
"RTN","IVMPREC8",153,0)
 N IVMEPC
"RTN","IVMPREC8",154,0)
 I $P(IVMSEG,HLFS,IVMPIECE)]"" D
"RTN","IVMPREC8",155,0)
 .;if RF1 field is SEQ6, then parse subcomponents
"RTN","IVMPREC8",156,0)
 .I IVMXREF["RF16" D  Q
"RTN","IVMPREC8",157,0)
 ..;- get data containing 4 pieces seperated by HLECH (~)
"RTN","IVMPREC8",158,0)
 ..S IVMRFDAT=$P(IVMSEG,HLFS,6)
"RTN","IVMPREC8",159,0)
 ..S IVMPIECE=$E(IVMXREF,5),IVMFLD=$P(IVMRFDAT,"~",IVMPIECE)
"RTN","IVMPREC8",160,0)
 ..;get 6th character of IVMXREF to determine if value is for Address
"RTN","IVMPREC8",161,0)
 ..;OR Email, Cell and Pager
"RTN","IVMPREC8",162,0)
 ..S IVMEPC=$E(IVMXREF,6)
"RTN","IVMPREC8",163,0)
 ..;Convert Change Source for Address, Email, Cell and Pager
"RTN","IVMPREC8",164,0)
 ..I IVMPIECE=2 S IVMFLD=$S(IVMEPC'="":$$EPCSRCC(IVMFLD),1:$$ADDRCNV(IVMFLD))
"RTN","IVMPREC8",165,0)
 ..Q:IVMFLD=""
"RTN","IVMPREC8",166,0)
 ..D STORE^IVMPREC9
"RTN","IVMPREC8",167,0)
 .I IVMXREF["RF17" D  Q
"RTN","IVMPREC8",168,0)
 ..;get address/telecomm change date/tm field
"RTN","IVMPREC8",169,0)
 ..S IVMFLD=$$FMDATE^HLFNC($P(IVMSEG,HLFS,7))
"RTN","IVMPREC8",170,0)
 ..Q:IVMFLD=""
"RTN","IVMPREC8",171,0)
 ..D STORE^IVMPREC9
"RTN","IVMPREC8",172,0)
 ..; check for auto-upload
"RTN","IVMPREC8",173,0)
 ..S NOUPDT=0
"RTN","IVMPREC8",174,0)
 ..S IVMDHCP=$S(RF1TYPE="SAD":$P($G(^DPT(DFN,.11)),HLFS,13),RF1TYPE="CPH":$P($G(^DPT(DFN,.13)),HLFS,9),RF1TYPE="PNO":$P($G(^DPT(DFN,.13)),HLFS,12),RF1TYPE="EAD":$P($G(^DPT(DFN,.13)),HLFS,6),1:"")
"RTN","IVMPREC8",175,0)
 ..I IVMFLD]"",(IVMFLD>IVMDHCP) D
"RTN","IVMPREC8",176,0)
 ...S UPDEPC(RF1TYPE)=$G(EPCFARY(RF1TYPE))
"RTN","IVMPREC8",177,0)
 ...I RF1TYPE="SAD" S UPDEPC("SAD")=1
"RTN","IVMPREC8",178,0)
 Q
"RTN","IVMPREC8",179,0)
ADDRCNV(ADDRSRC) ;convert Address Source from HL7 to DHCP format
"RTN","IVMPREC8",180,0)
 ;
"RTN","IVMPREC8",181,0)
 Q:$G(ADDRSRC)']"" ""
"RTN","IVMPREC8",182,0)
 Q:ADDRSRC="USVAHEC" "HEC"
"RTN","IVMPREC8",183,0)
 Q:ADDRSRC="USVAMC" "VAMC"
"RTN","IVMPREC8",184,0)
 Q:ADDRSRC="USVAHBSC" "HBSC"
"RTN","IVMPREC8",185,0)
 Q:ADDRSRC="USNCOA" "NCOA"
"RTN","IVMPREC8",186,0)
 Q:ADDRSRC="USVABVA" "BVA"
"RTN","IVMPREC8",187,0)
 Q:ADDRSRC="USVAINS" "VAINS"
"RTN","IVMPREC8",188,0)
 Q:ADDRSRC="USPS" "USPS"
"RTN","IVMPREC8",189,0)
 Q:ADDRSRC="LACS" "LACS"
"RTN","IVMPREC8",190,0)
 Q ""
"RTN","IVMPREC8",191,0)
EPCSRCC(EPCSRC) ;Convert Email, Cell, Pager Change Source from HL7 to DHCP
"RTN","IVMPREC8",192,0)
 ;
"RTN","IVMPREC8",193,0)
 Q:$G(EPCSRC)']"" ""
"RTN","IVMPREC8",194,0)
 Q:EPCSRC="USVAHEC" "HEC"
"RTN","IVMPREC8",195,0)
 Q:EPCSRC="USVAMC" "VAMC"
"RTN","IVMPREC8",196,0)
 Q:EPCSRC="USVAHBSC" "HBSC"
"RTN","IVMPREC8",197,0)
 Q ""
"RTN","IVMPREC8",198,0)
BAICONV(BAISRC) ;Convert Bad address source from HL7 to DHCP format
"RTN","IVMPREC8",199,0)
 Q:$G(BAISRC)']"" ""
"RTN","IVMPREC8",200,0)
 Q:BAISRC="VAB1" 1
"RTN","IVMPREC8",201,0)
 Q:BAISRC="VAB2" 2
"RTN","IVMPREC8",202,0)
 Q:BAISRC="VAB3" 3
"RTN","IVMPREC8",203,0)
 Q:BAISRC="VAB4" 4
"RTN","IVMPREC8",204,0)
 Q ""
"RTN","IVMPREC8",205,0)
CONVPH(PH) ;remove special chars/spaces from Phone number
"RTN","IVMPREC8",206,0)
 Q $TR(PH," )(/#\-","")
"RTN","IVMPREC8",207,0)
CNTRCONV(COUNTRY) ;Check if valid country
"RTN","IVMPREC8",208,0)
 I COUNTRY="" Q 0
"RTN","IVMPREC8",209,0)
 Q $O(^HL(779.004,"B",COUNTRY,""))
"RTN","IVMPREC8",210,0)
CHKEMAIL(EMAIL) ;Check for Valid Email
"RTN","IVMPREC8",211,0)
 I $G(EMAIL)="" Q 0
"RTN","IVMPREC8",212,0)
 I '(EMAIL?1.E1"@"1.E1"."1.E) Q 0
"RTN","IVMPREC8",213,0)
 Q 1
"RTN","IVMPREC9")
0^26^B30633727
"RTN","IVMPREC9",1,0)
IVMPREC9 ;ALB/KCL/BRM/CKN - PROCESS INCOMING (Z05 EVENT TYPE) HL7 MESSAGES (CON'T) ; 8/15/08 10:25am
"RTN","IVMPREC9",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**34,58,115**; 21-OCT-94;Build 28
"RTN","IVMPREC9",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMPREC9",4,0)
 ;
"RTN","IVMPREC9",5,0)
 ;
"RTN","IVMPREC9",6,0)
 ;
"RTN","IVMPREC9",7,0)
STORE ; - store HL7 fields that have a different value than DHCP fields in
"RTN","IVMPREC9",8,0)
 ;   the IVM Patient (#301.5) file (#301.511) multiple for uploading
"RTN","IVMPREC9",9,0)
 ;
"RTN","IVMPREC9",10,0)
 G:IVMFLG STORE2
"RTN","IVMPREC9",11,0)
 S X=$$IEN^IVMUFNC4("PID")
"RTN","IVMPREC9",12,0)
 ;
"RTN","IVMPREC9",13,0)
 K DIC("DR")
"RTN","IVMPREC9",14,0)
 S DA(1)=IVM3015
"RTN","IVMPREC9",15,0)
 I $G(^IVM(301.5,DA(1),"IN",0))']"" S ^(0)="^301.501PA^^"
"RTN","IVMPREC9",16,0)
 S DIC="^IVM(301.5,"_DA(1)_",""IN"",",DIC(0)="L",DLAYGO=301.501
"RTN","IVMPREC9",17,0)
 K DD,DO D FILE^DICN
"RTN","IVMPREC9",18,0)
 K DIC,DLAYGO,X,Y
"RTN","IVMPREC9",19,0)
 ;
"RTN","IVMPREC9",20,0)
 ; - build mail message if SUPRESS DEMOGRAPHIC NOTIFICATION field is
"RTN","IVMPREC9",21,0)
 ;   not set in the IVM Site Parameter (#301.9) file
"RTN","IVMPREC9",22,0)
 ;
"RTN","IVMPREC9",23,0)
 I '$P($G(^IVM(301.9,1,0)),"^",5),'IVMADFLG D DEMBULL^IVMPREC6
"RTN","IVMPREC9",24,0)
 ;
"RTN","IVMPREC9",25,0)
 ; - set flag in order to not repeat STORE tag for one msg
"RTN","IVMPREC9",26,0)
 S IVMFLG=1
"RTN","IVMPREC9",27,0)
 ;
"RTN","IVMPREC9",28,0)
 S DA(2)=DA(1)
"RTN","IVMPREC9",29,0)
 S DA(1)=$P(^IVM(301.5,DA(1),"IN",0),"^",3)
"RTN","IVMPREC9",30,0)
 ;
"RTN","IVMPREC9",31,0)
STORE2 ;
"RTN","IVMPREC9",32,0)
 ; - X as the record in the IVM Demo Upload Fields (#301.92) file
"RTN","IVMPREC9",33,0)
 S X=+IVMDEMDA
"RTN","IVMPREC9",34,0)
 I $G(^IVM(301.5,DA(2),"IN",DA(1),"DEM",0))']"" S ^(0)="^301.511PA^^"
"RTN","IVMPREC9",35,0)
 S DIC="^IVM(301.5,"_DA(2)_",""IN"",DA(1),""DEM"",",DIC(0)="L"
"RTN","IVMPREC9",36,0)
 S DIC("DR")=".02////^S X=IVMFLD",DLAYGO=301.511
"RTN","IVMPREC9",37,0)
 K DD,DO D FILE^DICN
"RTN","IVMPREC9",38,0)
 K DIC,DLAYGO,X,Y
"RTN","IVMPREC9",39,0)
 ;
"RTN","IVMPREC9",40,0)
 Q
"RTN","IVMPREC9",41,0)
 ;
"RTN","IVMPREC9",42,0)
 ;
"RTN","IVMPREC9",43,0)
LOOK ; Find the current DHCP field value.
"RTN","IVMPREC9",44,0)
 ;  Input:   DR  --   Field number of the field in file #2
"RTN","IVMPREC9",45,0)
 ;          DFN  --   Pointer to the patient in file #2
"RTN","IVMPREC9",46,0)
 ;  Output:   Y  --   Internal value of field
"RTN","IVMPREC9",47,0)
 S DIC="^DPT(",DA=DFN,DIQ="IVM",DIQ(0)="I" D EN^DIQ1
"RTN","IVMPREC9",48,0)
 S Y=$G(IVM(2,DFN,DR,"I"))
"RTN","IVMPREC9",49,0)
 K DIC,DIQ,DR,IVM
"RTN","IVMPREC9",50,0)
 Q
"RTN","IVMPREC9",51,0)
AUTOEPC(DFN,UPDEPC) ;
"RTN","IVMPREC9",52,0)
 ; this functionality is copied from IVMLDEM6 and modified to allow
"RTN","IVMPREC9",53,0)
 ; an automated upload of patient communications information
"RTN","IVMPREC9",54,0)
 ;  Input:     DFN  -  as patient IEN
"RTN","IVMPREC9",55,0)
 ;          UPDEPC  -  array contains flag for update/noupdate for all
"RTN","IVMPREC9",56,0)
 ;                     communication types.
"RTN","IVMPREC9",57,0)
 ; Output: IVMFLAG  -  1 if communications fields updated
"RTN","IVMPREC9",58,0)
 ;                     0 if communications fields not updated
"RTN","IVMPREC9",59,0)
 ;
"RTN","IVMPREC9",60,0)
 N IVMFLAG,IVMI,IVMJ,IVMNODE,IVMPTR,Y,UPDT,IVMCVAL,IVMCFLD,SITEFLD,DFLG,CTYP,UPDT
"RTN","IVMPREC9",61,0)
 S IVMFLAG=0  ;initialize flags
"RTN","IVMPREC9",62,0)
 ; - check for required parameters
"RTN","IVMPREC9",63,0)
 Q:'$G(DFN) IVMFLAG
"RTN","IVMPREC9",64,0)
 S IVMDA2=$G(IVM3015)
"RTN","IVMPREC9",65,0)
 Q:'$G(IVMDA2) IVMFLAG
"RTN","IVMPREC9",66,0)
 S IVMDA1=$O(^HL(771.3,"B","PID",""))
"RTN","IVMPREC9",67,0)
 S IVMDA1=$O(^IVM(301.5,IVMDA2,"IN","B",IVMDA1,""),-1)
"RTN","IVMPREC9",68,0)
 Q:'IVMDA1 IVMFLAG
"RTN","IVMPREC9",69,0)
 ;
"RTN","IVMPREC9",70,0)
 S IVMI=0 F  S IVMI=$O(^IVM(301.92,"AD",IVMI)) Q:IVMI']""  D
"RTN","IVMPREC9",71,0)
 .S IVMJ=0 F  S IVMJ=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IVMI,IVMJ)) Q:IVMJ']""  D
"RTN","IVMPREC9",72,0)
 ..S (UPDT,DFLG)=0
"RTN","IVMPREC9",73,0)
 ..; - check for data node in (#301.511) sub-file
"RTN","IVMPREC9",74,0)
 ..S IVMNODE=$G(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM",IVMJ,0))
"RTN","IVMPREC9",75,0)
 ..I ('+IVMNODE)!($P(IVMNODE,"^",2)']"") Q
"RTN","IVMPREC9",76,0)
 ..;Check if fields needs to be updated for particular comm. Type.
"RTN","IVMPREC9",77,0)
 ..S CTYP=0 F  S CTYP=$O(UPDEPC(CTYP)) Q:CTYP=""!UPDT  D
"RTN","IVMPREC9",78,0)
 ...I ("^"_$G(UPDEPC(CTYP))_"^")[("^"_+IVMNODE_"^") S UPDT=1
"RTN","IVMPREC9",79,0)
 ..S IVMCFLD=$P($G(^IVM(301.92,+IVMNODE,0)),"^",5),IVMCVAL=$P(IVMNODE,"^",2)
"RTN","IVMPREC9",80,0)
 ..; - load communications fields rec'd from IVM into DHCP (#2) file
"RTN","IVMPREC9",81,0)
 ..I UPDT D UPLOAD^IVMLDEM6(+DFN,IVMCFLD,IVMCVAL) S IVMFLAG=1
"RTN","IVMPREC9",82,0)
 ..; delete inaccurate Addr Change Site data if Source is not VAMC
"RTN","IVMPREC9",83,0)
 ..I UPDT,((IVMCFLD=.1311)!(IVMCFLD=.1313)!(IVMCFLD=.137)) D
"RTN","IVMPREC9",84,0)
 ...I IVMCVAL="VAMC" Q
"RTN","IVMPREC9",85,0)
 ...S SITEFLD=$S(IVMCFLD=.1311:.13111,IVMCFLD=.1313:.1314,IVMCFLD=.137:.138)
"RTN","IVMPREC9",86,0)
 ... S FDA(2,+DFN_",",SITEFLD)="@" D UPDATE^DIE("E","FDA")
"RTN","IVMPREC9",87,0)
 ..; - remove entry only for Email, Cell and Pager from (#301.511) sub-file
"RTN","IVMPREC9",88,0)
 ..S CTYP=0 F  S CTYP=$O(EPCFARY(CTYP)) Q:CTYP=""!DFLG  D
"RTN","IVMPREC9",89,0)
 ...I ("^"_$G(EPCFARY(CTYP))_"^")[("^"_+IVMNODE_"^") S DFLG=1
"RTN","IVMPREC9",90,0)
 ..I DFLG D DELENT^IVMLDEMU(IVMDA2,IVMDA1,IVMJ)
"RTN","IVMPREC9",91,0)
 ;Delete all communication data (Email, Cell phone, Pager) if they are not received in Z05.
"RTN","IVMPREC9",92,0)
 I $D(EPCDEL) D
"RTN","IVMPREC9",93,0)
 . N CTYPE,DIE,DR,DA,CNTR,VAL
"RTN","IVMPREC9",94,0)
 . S DR="",CNTR=0,VAL="@"
"RTN","IVMPREC9",95,0)
 . S CTYPE="" F  S CTYPE=$O(EPCDEL(CTYPE)) Q:CTYPE=""  D
"RTN","IVMPREC9",96,0)
 . . F I=1:1:$L(EPCDEL(CTYPE),"^") S CNTR=CNTR+1,$P(DR,";",CNTR)=$P(EPCDEL(CTYPE),"^",I)_"////^S X=VAL"
"RTN","IVMPREC9",97,0)
 . S DIE="^DPT(",DA=DFN
"RTN","IVMPREC9",98,0)
 . D ^DIE K DIE,DA,DR
"RTN","IVMPREC9",99,0)
 Q IVMFLAG
"RTN","IVMPREC9",100,0)
 ;
"RTN","IVMPREC9",101,0)
AUTORINC(DFN) ;
"RTN","IVMPREC9",102,0)
 ; application to automatically upload Rated Incompetent data
"RTN","IVMPREC9",103,0)
 ; Input:     DFN   -   Patient IEN
"RTN","IVMPREC9",104,0)
 N IVMI,IVMJ,IVMDA1,IVMDA2,IVMNODE,IVMFLAG,IVMRIVAL,IVMRIFLD
"RTN","IVMPREC9",105,0)
 S IVMFLAG=0
"RTN","IVMPREC9",106,0)
 S IVMDA2=$G(IVM3015)
"RTN","IVMPREC9",107,0)
 I 'IVMDA2 Q IVMFLAG
"RTN","IVMPREC9",108,0)
 S IVMDA1=$O(^HL(771.3,"B","PID",""))
"RTN","IVMPREC9",109,0)
 S IVMDA1=$O(^IVM(301.5,IVMDA2,"IN","B",IVMDA1,""),-1)
"RTN","IVMPREC9",110,0)
 S IVMI=$O(^IVM(301.92,"C","ZPD08","")) I IVMI="" Q IVMFLAG
"RTN","IVMPREC9",111,0)
 S IVMJ=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IVMI,""))
"RTN","IVMPREC9",112,0)
 I IVMJ']"" Q IVMFLAG
"RTN","IVMPREC9",113,0)
 ; - check for data node in (#301.511) sub-file
"RTN","IVMPREC9",114,0)
 S IVMNODE=$G(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM",IVMJ,0))
"RTN","IVMPREC9",115,0)
 I '(+IVMNODE)!($P(IVMNODE,"^",2)']"") Q IVMFLAG
"RTN","IVMPREC9",116,0)
 S IVMRIFLD=$P($G(^IVM(301.92,+IVMNODE,0)),"^",5),IVMRIVAL=$P(IVMNODE,"^",2)
"RTN","IVMPREC9",117,0)
 I IVMRIVAL="""""" S IVMRIVAL="@"
"RTN","IVMPREC9",118,0)
 D UPLOAD^IVMLDEM6(DFN,IVMRIFLD,IVMRIVAL) S IVMFLAG=1
"RTN","IVMPREC9",119,0)
 ; - remove entry from (#301.511) sub-file
"RTN","IVMPREC9",120,0)
 D DELENT^IVMLDEMU(IVMDA2,IVMDA1,IVMJ)
"RTN","IVMPREC9",121,0)
 Q IVMFLAG
"RTN","IVMPREC9",122,0)
PHONE ; - ask user to delete phone # [Residence] from Patient (#2) file
"RTN","IVMPREC9",123,0)
 ; This tag is moved here from IVMLDEM6 due to routine size limit
"RTN","IVMPREC9",124,0)
 D FULL^VALM1
"RTN","IVMPREC9",125,0)
 W ! S DIR("A")="Is it okay to delete the patient's Phone Number [Residence]"
"RTN","IVMPREC9",126,0)
 W ! S DIR("A",1)="The patient's address has been updated and the phonenumber"
"RTN","IVMPREC9",127,0)
 S DIR("A",2)="remains on file."
"RTN","IVMPREC9",128,0)
 S DIR("A",3)=" "
"RTN","IVMPREC9",129,0)
 S DIR("A",4)="Patient Name: "_$P($$PT^IVMUFNC4(+DFN),"^")_" ("_$P($$PT^IVMUFNC4(+DFN),"^",3)_")"
"RTN","IVMPREC9",130,0)
 S DIR("A",5)="Phone Number [Residence]: "_$P($G(^DPT(+DFN,.13)),"^")
"RTN","IVMPREC9",131,0)
 S DIR("A",6)=" "
"RTN","IVMPREC9",132,0)
 S DIR("?",1)="Enter 'YES' to delete the patient's Phone Number [Residence] that is"
"RTN","IVMPREC9",133,0)
 S DIR("?",2)="currently on file.  Enter 'NO' to quit without deleting the patient's"
"RTN","IVMPREC9",134,0)
 S DIR("?")="Phone Number [Residence]."
"RTN","IVMPREC9",135,0)
 S DIR(0)="Y",DIR("B")="NO"
"RTN","IVMPREC9",136,0)
 D ^DIR K DIR
"RTN","IVMPREC9",137,0)
 S:Y $P(^DPT(DFN,.13),"^")="" W !!,"Patient's Phone Number [Residence] has ",$S(Y:"",1:"not "),"been deleted."
"RTN","IVMPREC9",138,0)
 Q
"RTN","IVMPREC9",139,0)
 ;
"RTN","IVMPRECA")
0^21^B47594808
"RTN","IVMPRECA",1,0)
IVMPRECA ;ALB/KCL/BRM/PJR/RGL/CKN - DEMOGRAPHICS MESSAGE CONSISTENCY CHECK ; 8/15/08 10:26am
"RTN","IVMPRECA",2,0)
 ;;2.0; INCOME VERIFICATION MATCH ;**5,6,12,34,58,56,115**; 21-OCT-94;Build 28
"RTN","IVMPRECA",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMPRECA",4,0)
 ;
"RTN","IVMPRECA",5,0)
 ; This routine will perform data validation checks on uploadable
"RTN","IVMPRECA",6,0)
 ; demographic fields received from the IVM Center to ensure they
"RTN","IVMPRECA",7,0)
 ; are acurate prior to their upload into DHCP.
"RTN","IVMPRECA",8,0)
 ;
"RTN","IVMPRECA",9,0)
 ;
"RTN","IVMPRECA",10,0)
 ; Called from routine IVMPREC6 before uploadable demographic fields
"RTN","IVMPRECA",11,0)
 ; are stored in DHCP.
"RTN","IVMPRECA",12,0)
 ;
"RTN","IVMPRECA",13,0)
 ;
"RTN","IVMPRECA",14,0)
EN ; - Entry point to create temp array and perform msg consistency checks
"RTN","IVMPRECA",15,0)
 ;
"RTN","IVMPRECA",16,0)
 N DFN,IVMCNTY,IVMCR,IVMEG,IVMFLAG,IVMFLD,IVMNUM,IVMSTR,IVMSTPTR,X
"RTN","IVMPRECA",17,0)
 N COMP,CNTR,NOPID,ADDRTYPE,ADDSEQ,TELESEQ,COMMTYPE,TCFLG,TMPARRY,PID3ARRY,CNTR2
"RTN","IVMPRECA",18,0)
 S IVMNUM=IVMDA ; 'current' line in ^HL(772,"IN",...
"RTN","IVMPRECA",19,0)
 S DODSEG=0 ;Initialize flag for DOD information
"RTN","IVMPRECA",20,0)
 S GUARSEG=0 ;Initialize flag for Guardian information
"RTN","IVMPRECA",21,0)
 ;
"RTN","IVMPRECA",22,0)
 ; - check the format of the HL7 demographic message
"RTN","IVMPRECA",23,0)
 D NEXT I $E(IVMSTR,1,3)'="PID" S HLERR="Missing PID segment" G ENQ
"RTN","IVMPRECA",24,0)
 S CNTR=1,NOPID=0,PIDSTR(CNTR)=$P(IVMSTR,HLFS,2,999)
"RTN","IVMPRECA",25,0)
 ;Handle wrapped PID segment
"RTN","IVMPRECA",26,0)
 F I=1:1 D  Q:NOPID
"RTN","IVMPRECA",27,0)
 . D NEXT I $E(IVMSTR,1,4)="ZPD^" S NOPID=1 Q
"RTN","IVMPRECA",28,0)
 . S CNTR=CNTR+1,PIDSTR(CNTR)=IVMSTR
"RTN","IVMPRECA",29,0)
 D BLDPID^IVMPREC6(.PIDSTR,.IVMPID)  ;Create IVMPID subscript by seq #
"RTN","IVMPRECA",30,0)
 ;convert "" to null for PID segment
"RTN","IVMPRECA",31,0)
 S CNTR="" F  S CNTR=$O(IVMPID(CNTR)) Q:CNTR=""  D
"RTN","IVMPRECA",32,0)
 . I $O(IVMPID(CNTR,"")) D  Q
"RTN","IVMPRECA",33,0)
 . . S CNTR2="" F  S CNTR2=$O(IVMPID(CNTR,CNTR2)) Q:CNTR2=""  D
"RTN","IVMPRECA",34,0)
 . . . S IVMPID(CNTR,CNTR2)=$$CLEARF(IVMPID(CNTR,CNTR2),$E(HLECH))
"RTN","IVMPRECA",35,0)
 . I CNTR=11 S IVMPID(CNTR)=$$CLEARF(IVMPID(CNTR),$E(HLECH)) Q
"RTN","IVMPRECA",36,0)
 . I IVMPID(CNTR)=HLQ S IVMPID(CNTR)=""
"RTN","IVMPRECA",37,0)
 I $E(IVMSTR,1,3)'="ZPD" S HLERR="Missing ZPD segment" G ENQ
"RTN","IVMPRECA",38,0)
 S IVMSTR("ZPD")=$P(IVMSTR,HLFS,2,999)
"RTN","IVMPRECA",39,0)
 I $P(IVMSTR("ZPD"),HLFS,8)'="" S GUARSEG=1
"RTN","IVMPRECA",40,0)
 I $P(IVMSTR("ZPD"),HLFS,9)'="" S DODSEG=1
"RTN","IVMPRECA",41,0)
 D NEXT I $E(IVMSTR,1,3)="ZEL" S HLERR="ZEL segment should not be sent in Z05 message" G ENQ
"RTN","IVMPRECA",42,0)
 I $E(IVMSTR,1,3)'="ZGD" S HLERR="Missing ZGD segment" G ENQ
"RTN","IVMPRECA",43,0)
 S IVMSTR("ZGD")=$P(IVMSTR,HLFS,2,999)
"RTN","IVMPRECA",44,0)
 ;
"RTN","IVMPRECA",45,0)
 ; - perform field validation checks for PID segment
"RTN","IVMPRECA",46,0)
 M TMPARRY(3)=IVMPID(3) D PARSPID3^IVMUFNC(.TMPARRY,.PID3ARY)
"RTN","IVMPRECA",47,0)
 S DFN=$G(PID3ARY("PI")),ICN=$G(PID3ARY("NI"))
"RTN","IVMPRECA",48,0)
 K TMPARRY,PID3ARY
"RTN","IVMPRECA",49,0)
 I '$$MATCH^IVMUFNC(DFN,ICN,"","","I",.ERRMSG) S HLERR=ERRMSG G ENQ
"RTN","IVMPRECA",50,0)
 S IVMDFN=DFN  ;Store DFN in temp variable to use later
"RTN","IVMPRECA",51,0)
 ;I IVMPID(19)'=$P(^DPT(DFN,0),"^",9) S HLERR="Couldn't match IVM SSN with DHCP SSN" G ENQ
"RTN","IVMPRECA",52,0)
 ;
"RTN","IVMPRECA",53,0)
 S X=IVMPID(7) I X]"",($$FMDATE^HLFNC(X)>DT) S HLERR="Date of Birth greater than current date" G ENQ
"RTN","IVMPRECA",54,0)
 ;
"RTN","IVMPRECA",55,0)
 S X=IVMPID(8) I X]"",X'="M",X'="F" S HLERR="Invalid code sent for Patient sex" G ENQ
"RTN","IVMPRECA",56,0)
 ;
"RTN","IVMPRECA",57,0)
 ; - if address - perform validation checks on addr fields
"RTN","IVMPRECA",58,0)
 ;Get all address from seq. 11 of PID segment
"RTN","IVMPRECA",59,0)
 I 'DODSEG,'GUARSEG D
"RTN","IVMPRECA",60,0)
 . D PID11 Q:$D(HLERR)
"RTN","IVMPRECA",61,0)
 . D PID13
"RTN","IVMPRECA",62,0)
 G ENQ:$D(HLERR)
"RTN","IVMPRECA",63,0)
 ;
"RTN","IVMPRECA",64,0)
 ; - perform field validation check for ZPD and ZGD segment
"RTN","IVMPRECA",65,0)
 ; - I X]"" was changed to I X below for IVM*2*56
"RTN","IVMPRECA",66,0)
 S X=$P(IVMSTR("ZPD"),HLFS,9) I X,($$FMDATE^HLFNC(X)<$P($G(^DPT(+DFN,0)),"^",3))!($$FMDATE^HLFNC(X)>$$DT^XLFDT) S HLERR="Invalid date of death" G ENQ
"RTN","IVMPRECA",67,0)
 S X=$P(IVMSTR("ZGD"),HLFS,2) I X,X'=1 S HLERR="Invalid Guardian Type" G ENQ
"RTN","IVMPRECA",68,0)
 ;
"RTN","IVMPRECA",69,0)
 ;
"RTN","IVMPRECA",70,0)
ENQ ; - send acknowledgement (ACK) 'AE' msg to the IVM Center
"RTN","IVMPRECA",71,0)
 I $D(HLERR) D ACK^IVMPREC
"RTN","IVMPRECA",72,0)
 Q
"RTN","IVMPRECA",73,0)
 ;
"RTN","IVMPRECA",74,0)
 ;
"RTN","IVMPRECA",75,0)
ADDRCHK ; - validate address fields sent by IVM Center
"RTN","IVMPRECA",76,0)
 ;
"RTN","IVMPRECA",77,0)
 S CNTRY=$P(X,$E(HLECH),6) I CNTRY']"" S HLERR="Invalid address - Missing Country" Q
"RTN","IVMPRECA",78,0)
 I '$$CNTRCONV^IVMPREC8(CNTRY) S HLERR="Invalid address - Invalid Country" Q
"RTN","IVMPRECA",79,0)
 S FORFLG=$S(CNTRY="USA":0,1:1)
"RTN","IVMPRECA",80,0)
 I $P(X,$E(HLECH),1)']"" S HLERR="Invalid address - Missing street address [line 1]" Q
"RTN","IVMPRECA",81,0)
 I $P(X,$E(HLECH),3)']"" S HLERR="Invalid address - Missing city" Q
"RTN","IVMPRECA",82,0)
 ;I $P(X,$E(HLECH),4)']"" S HLERR="Invalid address - Missing "_$S('FORFLG:"state abbreviation",1:"province") Q
"RTN","IVMPRECA",83,0)
 ;I $P(X,$E(HLECH),5)']"" S HLERR="Invalid address - Missing "_$S('FORFLG:"zip code",1:"postal code") Q
"RTN","IVMPRECA",84,0)
 I $P(X,$E(HLECH),4)']"",'FORFLG S HLERR="Invalid address - Missing State abbreviation" Q
"RTN","IVMPRECA",85,0)
 I $P(X,$E(HLECH),5)']"",'FORFLG S HLERR="Invalid address - Missing Zip Code" Q
"RTN","IVMPRECA",86,0)
 I 'FORFLG D  Q:$D(HLERR)
"RTN","IVMPRECA",87,0)
 . S IVMCNTY=$G(IVMPID(12))
"RTN","IVMPRECA",88,0)
 . I IVMCNTY']"" S HLERR="Invalid address - Missing county code" Q
"RTN","IVMPRECA",89,0)
 I $L($P(X,$E(HLECH),1))>35!($L($P(X,$E(HLECH),1))<3) S HLERR="Invalid street address [line 1]" Q
"RTN","IVMPRECA",90,0)
 I $P(X,$E(HLECH),2)]"",(($L($P(X,$E(HLECH),2))>30)!($L($P(X,$E(HLECH),2))<3)) S HLERR="Invalid street address [line 2]" Q
"RTN","IVMPRECA",91,0)
 I $L($P(X,$E(HLECH),3))>15!($L($P(X,$E(HLECH),3))<2) S HLERR="Invalid city" Q
"RTN","IVMPRECA",92,0)
 ;
"RTN","IVMPRECA",93,0)
 ; - save state pointer for county code validation only if not foreign address
"RTN","IVMPRECA",94,0)
 I 'FORFLG D  Q:$D(HLERR)
"RTN","IVMPRECA",95,0)
 .S IVMSTPTR=+$O(^DIC(5,"C",$P(X,$E(HLECH),4),0))
"RTN","IVMPRECA",96,0)
 .I 'IVMSTPTR S HLERR="Invalid state abbreviation" Q
"RTN","IVMPRECA",97,0)
 .I '$O(^DIC(5,IVMSTPTR,1,"C",IVMCNTY,0)) D  Q:$G(HLERR)]""
"RTN","IVMPRECA",98,0)
 ..N STFIPS
"RTN","IVMPRECA",99,0)
 ..S STFIPS=IVMSTPTR
"RTN","IVMPRECA",100,0)
 ..S:$L(STFIPS)<2 STFIPS="0"_STFIPS
"RTN","IVMPRECA",101,0)
 ..Q:$$FIPSCHK^XIPUTIL(STFIPS_IVMCNTY)  ;county code is valid
"RTN","IVMPRECA",102,0)
 ..S HLERR="Invalid county code"
"RTN","IVMPRECA",103,0)
 .S X=$P(X,$E(HLECH),5) D ZIPIN^VAFADDR I $D(X)[0 S HLERR="Invalid zip code" Q
"RTN","IVMPRECA",104,0)
 Q
"RTN","IVMPRECA",105,0)
 ;
"RTN","IVMPRECA",106,0)
 ;
"RTN","IVMPRECA",107,0)
NEXT ; - get the next HL7 segment in the message from HL7 Transmission (#772) file
"RTN","IVMPRECA",108,0)
 S IVMNUM=$O(^TMP($J,IVMRTN,IVMNUM)),IVMSTR=$G(^(+IVMNUM,0))
"RTN","IVMPRECA",109,0)
 Q
"RTN","IVMPRECA",110,0)
PID11 ; Perform consistency check for seq. 11
"RTN","IVMPRECA",111,0)
 I $D(IVMPID(11)) D
"RTN","IVMPRECA",112,0)
 . I $O(IVMPID(11,"")) D  Q
"RTN","IVMPRECA",113,0)
 . . S ADDSEQ=0 F  S ADDSEQ=$O(IVMPID(11,ADDSEQ)) Q:ADDSEQ=""!($D(HLERR))  D
"RTN","IVMPRECA",114,0)
 . . . I $G(IVMPID(11,ADDSEQ))="" S HLERR="Invalid Address - Missing Address information" Q
"RTN","IVMPRECA",115,0)
 . . . S ADDRTYPE=$P($G(IVMPID(11,ADDSEQ)),$E(HLECH),7)
"RTN","IVMPRECA",116,0)
 . . . I ADDRTYPE="" S HLERR="Invalid Address - Missing Address Type" Q
"RTN","IVMPRECA",117,0)
 . . . I ADDRTYPE="P"!(ADDRTYPE="VAB1")!(ADDRTYPE="VAB2")!(ADDRTYPE="VAB3")!(ADDRTYPE="VAB4") S ADDRESS(ADDRTYPE)=IVMPID(11,ADDSEQ)
"RTN","IVMPRECA",118,0)
 . I $G(IVMPID(11))="" S HLERR="Invalid Address - Missing Address information" Q
"RTN","IVMPRECA",119,0)
 . S ADDRTYPE=$P($G(IVMPID(11)),$E(HLECH),7)
"RTN","IVMPRECA",120,0)
 . I ADDRTYPE="" S HLERR="Invalid Address - Missing Address Type" Q
"RTN","IVMPRECA",121,0)
 . I ADDRTYPE="P"!(ADDRTYPE="VAB1")!(ADDRTYPE="VAB2")!(ADDRTYPE="VAB3")!(ADDRTYPE="VAB4") S ADDRESS(ADDRTYPE)=IVMPID(11)
"RTN","IVMPRECA",122,0)
 Q:$D(HLERR)
"RTN","IVMPRECA",123,0)
 ;perform consistency checks on Permanent and all bad address
"RTN","IVMPRECA",124,0)
 I '$D(ADDRESS) S HLERR="Invalid Address - Invalid Address Type" Q
"RTN","IVMPRECA",125,0)
 S ADDRTYPE="" S ADDRTYPE=$O(ADDRESS(ADDRTYPE)) D
"RTN","IVMPRECA",126,0)
 . S X=$G(ADDRESS(ADDRTYPE)) D ADDRCHK
"RTN","IVMPRECA",127,0)
 Q
"RTN","IVMPRECA",128,0)
 ;
"RTN","IVMPRECA",129,0)
PID13 ; Perform consistency checks for seq. 13
"RTN","IVMPRECA",130,0)
 ;Get communication data for all types from seq. 13 or PID segment
"RTN","IVMPRECA",131,0)
 S TCFLG=1 ;Flag to check if Telecom data exist.
"RTN","IVMPRECA",132,0)
 I $D(IVMPID(13)) D
"RTN","IVMPRECA",133,0)
 . I $O(IVMPID(13,"")) D  Q
"RTN","IVMPRECA",134,0)
 . . S TELESEQ=0 F  S TELESEQ=$O(IVMPID(13,TELESEQ)) Q:((TELESEQ="")!($D(HLERR))!('TCFLG))  D
"RTN","IVMPRECA",135,0)
 . . . I $G(IVMPID(13,TELESEQ))="" S TCFLG=0 Q
"RTN","IVMPRECA",136,0)
 . . . I $P(IVMPID(13,TELESEQ),$E(HLECH),2)="" S HLERR="Invalid Communication Data - Missing Communication Type - PID Seq 13" Q
"RTN","IVMPRECA",137,0)
 . . . S TELECOM($P(IVMPID(13,TELESEQ),$E(HLECH),2))=IVMPID(13,TELESEQ)
"RTN","IVMPRECA",138,0)
 . I $G(IVMPID(13))="" S TCFLG=0 Q
"RTN","IVMPRECA",139,0)
 . I $P(IVMPID(13),$E(HLECH),2)="" S HLERR="Invalid Communication Data - Missing Communication Type - PID Seq 13" Q
"RTN","IVMPRECA",140,0)
 . S TELECOM($P(IVMPID(13),$E(HLECH),2))=IVMPID(13)
"RTN","IVMPRECA",141,0)
 Q:$D(HLERR)
"RTN","IVMPRECA",142,0)
 ;perform consistency checks on all types of communication data.
"RTN","IVMPRECA",143,0)
 I TCFLG D
"RTN","IVMPRECA",144,0)
 . S COMMTYPE="" F  S COMMTYPE=$O(TELECOM(COMMTYPE)) Q:COMMTYPE=""!$D(HLERR)  D
"RTN","IVMPRECA",145,0)
 . . I COMMTYPE="NET" D  Q
"RTN","IVMPRECA",146,0)
 . . . S X=$P(TELECOM(COMMTYPE),$E(HLECH),4)
"RTN","IVMPRECA",147,0)
 . . . I X]"",'$$CHKEMAIL^IVMPREC8(X) S HLERR="Invalid Email address"
"RTN","IVMPRECA",148,0)
 . . S X=$P(TELECOM(COMMTYPE),$E(HLECH)) I X]"",(($L(X)>20)!($L(X)<4)) S HLERR="Invalid phone number"
"RTN","IVMPRECA",149,0)
 Q
"RTN","IVMPRECA",150,0)
 ;
"RTN","IVMPRECA",151,0)
CLEARF(NODE,DEL,IGNORE) ;
"RTN","IVMPRECA",152,0)
 ; Input:       NODE    - SEGMENT/SEQ.
"RTN","IVMPRECA",153,0)
 ;               DEL    - Delimiter (optional - default is ^)
"RTN","IVMPRECA",154,0)
 ;            IGNORE    - String of seq # to avoid (optional)
"RTN","IVMPRECA",155,0)
 N I
"RTN","IVMPRECA",156,0)
 I $G(DEL)="" S DEL=HLFS
"RTN","IVMPRECA",157,0)
 F I=1:1:$L(NODE,DEL) D
"RTN","IVMPRECA",158,0)
 . I $G(IGNORE)[(","_I_",") Q  ;Ignore this seq. to convert
"RTN","IVMPRECA",159,0)
 . I $P(NODE,DEL,I)=HLQ S $P(NODE,DEL,I)=""
"RTN","IVMPRECA",160,0)
 Q NODE
"RTN","IVMPRECZ")
0^29^B28846671
"RTN","IVMPRECZ",1,0)
IVMPRECZ ;ALB/SEK,RTK,TDM - ROUTINE TO PROCESS V1.5 ORF-Z06 INCOMING HL7 MESSAGES ; 8/15/08 10:28am
"RTN","IVMPRECZ",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**34,64,71,115**;21-OCT-94;Build 28
"RTN","IVMPRECZ",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMPRECZ",4,0)
 ;
"RTN","IVMPRECZ",5,0)
 ;
"RTN","IVMPRECZ",6,0)
GET ; get HL7 segment from ^HL
"RTN","IVMPRECZ",7,0)
 S IVMDA=$O(^HL(772,HLDA,"IN",+IVMDA)),IVMSEG=$G(^(+IVMDA,0))
"RTN","IVMPRECZ",8,0)
 S IVMSEG1=$E(IVMSEG,1,3)
"RTN","IVMPRECZ",9,0)
 I IVMSEG1="PID" D  Q
"RTN","IVMPRECZ",10,0)
 .N NOPID,PIDCNTR,PIDSTR
"RTN","IVMPRECZ",11,0)
 .K IVMPID
"RTN","IVMPRECZ",12,0)
 .S (NOPID,PIDCNTR)=1,PIDSTR(PIDCNTR)=$P(IVMSEG,HLFS,2,99)
"RTN","IVMPRECZ",13,0)
 .F I=1:1 D  Q:NOPID
"RTN","IVMPRECZ",14,0)
 ..I $E($G(^HL(772,HLDA,"IN",IVMDA+1,0)),1,4)="ZMT^" S NOPID=1 Q
"RTN","IVMPRECZ",15,0)
 ..S IVMDA=$O(^HL(772,HLDA,"IN",+IVMDA))
"RTN","IVMPRECZ",16,0)
 ..S IVMSEG=$G(^HL(772,HLDA,"IN",+IVMDA,0))
"RTN","IVMPRECZ",17,0)
 ..S PIDCNTR=PIDCNTR+1,PIDSTR(PIDCNTR)=IVMSEG
"RTN","IVMPRECZ",18,0)
 .D BLDPID^IVMPREC6(.PIDSTR,.IVMPID)
"RTN","IVMPRECZ",19,0)
 Q
"RTN","IVMPRECZ",20,0)
 ;
"RTN","IVMPRECZ",21,0)
ACK ; - prepare acknowledgment (ACK) message
"RTN","IVMPRECZ",22,0)
 S IVMCT=$G(IVMCT)+1
"RTN","IVMPRECZ",23,0)
 S HLSDT="IVMQ",^TMP("HLS",$J,HLSDT,IVMCT)=HLSDATA(1),IVMCT=IVMCT+1
"RTN","IVMPRECZ",24,0)
 S ^TMP("HLS",$J,HLSDT,IVMCT)="MSA"_HLFS_$S($D(HLERR):"AE",1:"AA")_HLFS_HLMID_$S($D(HLERR):HLFS_HLERR_" - SSN "_$S($G(DFN):$P($$PT^IVMUFNC4(DFN),"^",2),1:"NOT FOUND"),1:"")
"RTN","IVMPRECZ",25,0)
 I $D(HLERR) S HLEVN=HLEVN+1,IVMERROR=1
"RTN","IVMPRECZ",26,0)
 Q
"RTN","IVMPRECZ",27,0)
 ;
"RTN","IVMPRECZ",28,0)
NXTSEG(MSGIEN,CURLINE,SEG) ;
"RTN","IVMPRECZ",29,0)
 ;Description: Returns the next segment
"RTN","IVMPRECZ",30,0)
 ;
"RTN","IVMPRECZ",31,0)
 ;Input:
"RTN","IVMPRECZ",32,0)
 ;  MSGIEN - IEN in HL7 MESSAGE TEXT file
"RTN","IVMPRECZ",33,0)
 ;  CURLINE - subscript of the current segment
"RTN","IVMPRECZ",34,0)
 ;
"RTN","IVMPRECZ",35,0)
 ;Output:
"RTN","IVMPRECZ",36,0)
 ;  SEG - an array with the fields of the segment (pass by reference)
"RTN","IVMPRECZ",37,0)
 ;  CURLINE - upone exiting, will be the subscript of the next segment
"RTN","IVMPRECZ",38,0)
 ;
"RTN","IVMPRECZ",39,0)
 S CURLINE=CURLINE+1
"RTN","IVMPRECZ",40,0)
 S SEGMENT=$G(^HL(772,MSGIEN,"IN",CURLINE,0))
"RTN","IVMPRECZ",41,0)
 S SEG("TYPE")=$E(SEGMENT,1,3)
"RTN","IVMPRECZ",42,0)
 ;
"RTN","IVMPRECZ",43,0)
 ; MSH & BHS segs first piece is the field separator, which makes breaking the segment into fields a bit different
"RTN","IVMPRECZ",44,0)
 I (SEG("TYPE")="MSH")!(SEG("TYPE")="BHS") D
"RTN","IVMPRECZ",45,0)
 . S SEG(1)=$E(SEGMENT,4)
"RTN","IVMPRECZ",46,0)
 . F I=2:1:30 S SEG(I)=$P(SEGMENT,HLFS,I)
"RTN","IVMPRECZ",47,0)
 E  D
"RTN","IVMPRECZ",48,0)
 . F I=2:1:31 S SEG(I-1)=$P(SEGMENT,HLFS,I)
"RTN","IVMPRECZ",49,0)
 Q
"RTN","IVMPRECZ",50,0)
 ;
"RTN","IVMPRECZ",51,0)
ERRBULL ; build mail message for transmission to IVM mail group notifying site
"RTN","IVMPRECZ",52,0)
 ; of upload error.
"RTN","IVMPRECZ",53,0)
 S IVMPAT=$$PT^IVMUFNC4(DFN)
"RTN","IVMPRECZ",54,0)
 S XMSUB="MT SIGNATURE UPLOAD "_$E($P(IVMPAT,"^"),1)_$P(IVMPAT,"^",3)
"RTN","IVMPRECZ",55,0)
 S IVMTEXT(1)="Unable to upload a MT Signature.  A Means Test was not found that"
"RTN","IVMPRECZ",56,0)
 S IVMTEXT(2)="matches the Centralized Anniversary Date (CAD) on file at the HEC."
"RTN","IVMPRECZ",57,0)
 S IVMTEXT(3)=" "
"RTN","IVMPRECZ",58,0)
 S IVMTEXT(4)="    NAME:     "_$P(IVMPAT,"^")
"RTN","IVMPRECZ",59,0)
 S IVMTEXT(5)="    ID:       "_$P(IVMPAT,"^",2)
"RTN","IVMPRECZ",60,0)
 S IVMTEXT(6)="    ERROR:    "_IVMTEXT(6)
"RTN","IVMPRECZ",61,0)
 Q
"RTN","IVMPRECZ",62,0)
ORF ;entry point for Means Test Signature Z06 msgs.
"RTN","IVMPRECZ",63,0)
 N SEG,EVENT,MSGID,COMP,TMPARY,PID3ARY,DFN,ICN
"RTN","IVMPRECZ",64,0)
 S:'$D(HLEVN) HLEVN=0
"RTN","IVMPRECZ",65,0)
 D NXTSEG(HLDA,0,.SEG)
"RTN","IVMPRECZ",66,0)
 Q:(SEG("TYPE")'="MSH")  ;wouldn't have reached here if this happened!
"RTN","IVMPRECZ",67,0)
 S EVENT=$P(SEG(9),$E(HLECH),2)
"RTN","IVMPRECZ",68,0)
 I EVENT'="Z06" G ORF^IVMCM
"RTN","IVMPRECZ",69,0)
 I $G(HLFS)="" S HLFS="^"
"RTN","IVMPRECZ",70,0)
 I $G(HLECH)="" S HLECH="~"
"RTN","IVMPRECZ",71,0)
 F IVMDA=0:0 S IVMDA=$O(^HL(772,HLDA,"IN",IVMDA)) Q:'IVMDA  S IVMSEG=$G(^(IVMDA,0)) I $E(IVMSEG,1,3)="MSH" D  Q:'IVMDA
"RTN","IVMPRECZ",72,0)
 .K HLERR
"RTN","IVMPRECZ",73,0)
 .S HLMID=$P(IVMSEG,HLFS,10) ; message control id from MSH
"RTN","IVMPRECZ",74,0)
 .S IVMFLGC=0
"RTN","IVMPRECZ",75,0)
 .D GET I IVMSEG1'="PID" D  Q
"RTN","IVMPRECZ",76,0)
 ..S HLERR="Missing PID segment" D ACK
"RTN","IVMPRECZ",77,0)
 .;S DFN=$P($P(IVMSEG,HLFS,4),$E(HLECH))
"RTN","IVMPRECZ",78,0)
 .M TMPARY(3)=IVMPID(3) D PARSPID3^IVMUFNC(.TMPARY,.PID3ARY)
"RTN","IVMPRECZ",79,0)
 .S DFN=$G(PID3ARY("PI")),ICN=$G(PID3ARY("NI"))
"RTN","IVMPRECZ",80,0)
 .I '$$MATCH^IVMUFNC(DFN,ICN,"","","I",.ERRMSG) S HLERR=ERRMSG D ACK Q
"RTN","IVMPRECZ",81,0)
 .K TMPARY,PID3ARY
"RTN","IVMPRECZ",82,0)
 .;I $P(IVMSEG,HLFS,20)'=$P(^DPT(DFN,0),"^",9) S HLERR="Couldn't match IVMSSN with DHCP SSN" D ACK Q
"RTN","IVMPRECZ",83,0)
 .S IVMDAP=IVMDA ; save IVMDA for veteran PID segment
"RTN","IVMPRECZ",84,0)
 .D GET I IVMSEG1'="ZMT" D  Q
"RTN","IVMPRECZ",85,0)
 ..S HLERR="Missing ZMT segment" D ACK
"RTN","IVMPRECZ",86,0)
 .; IVMMTDT - means test date
"RTN","IVMPRECZ",87,0)
 .; DGLY - income year
"RTN","IVMPRECZ",88,0)
 .; if Means Test not in DHCP don't upload IVM Means Test
"RTN","IVMPRECZ",89,0)
 .S IVMMTDT=$$FMDATE^HLFNC($P(IVMSEG,HLFS,3)) ; means test date from ZMT  segment
"RTN","IVMPRECZ",90,0)
 .S DGLY=$$LYR^DGMTSCU1(IVMMTDT)
"RTN","IVMPRECZ",91,0)
 .; get means test to be updated
"RTN","IVMPRECZ",92,0)
 .N UPMTS
"RTN","IVMPRECZ",93,0)
 .S MTDATE=-IVMMTDT,IVMMTIEN="",(UPMTS,MTFND)=0
"RTN","IVMPRECZ",94,0)
 .F  S IVMMTIEN=$O(^DGMT(408.31,"AID",1,DFN,MTDATE,IVMMTIEN),-1) Q:MTFND!(IVMMTIEN="")  D
"RTN","IVMPRECZ",95,0)
 ..; match site completing in case multiple tests for same date
"RTN","IVMPRECZ",96,0)
 ..I $P(IVMSEG,HLFS,23)=$P(^DGMT(408.31,IVMMTIEN,2),HLFS,5) S UPMTS=IVMMTIEN,MTFND=1 Q
"RTN","IVMPRECZ",97,0)
 .S (IVMMT31,DGMTP)=$G(^DGMT(408.31,UPMTS,0)) ; DGMTP is event driver  variable
"RTN","IVMPRECZ",98,0)
 .I $P(IVMMT31,"^")'=IVMMTDT D  Q
"RTN","IVMPRECZ",99,0)
 ..S Y=IVMMTDT X ^DD("DD")
"RTN","IVMPRECZ",100,0)
 ..S IVMTEXT(6)="Means Test of "_Y_" not found in VistA."
"RTN","IVMPRECZ",101,0)
 ..D ERRBULL,MAIL^IVMUFNC()
"RTN","IVMPRECZ",102,0)
 ..S HLERR="Means test not in VistA" D ACK
"RTN","IVMPRECZ",103,0)
 ..Q
"RTN","IVMPRECZ",104,0)
 .I $P(IVMMT31,"^",23)=2 S Y=IVMMTDT X ^DD("DD") S HLERR="2nd means test  sent for "_Y D ACK Q
"RTN","IVMPRECZ",105,0)
 .; do not upload IVM means test if primary means test status is
"RTN","IVMPRECZ",106,0)
 .; 3-no longer required
"RTN","IVMPRECZ",107,0)
 .; or if hardship case
"RTN","IVMPRECZ",108,0)
 .S IVMSTAT=$P(IVMMT31,"^",3)
"RTN","IVMPRECZ",109,0)
 .I IVMSTAT=3 S HLERR="NOT UPLOADED no longer required" D ACK Q
"RTN","IVMPRECZ",110,0)
 .I $P(IVMMT31,"^",20)=1 S HLERR="NOT UPLOADED hardship case" D ACK Q
"RTN","IVMPRECZ",111,0)
 .;get MT signature and date/time edited info, update means test
"RTN","IVMPRECZ",112,0)
 .N DATA
"RTN","IVMPRECZ",113,0)
 .S DATA(.29)=$P(IVMSEG,HLFS,28),DATA(2.02)=$$FMDATE^HLFNC($P(IVMSEG,HLFS,26)) I $D(DATA(.29)) D
"RTN","IVMPRECZ",114,0)
 ..I $$UPD^DGENDBS(408.31,UPMTS,.DATA)
"RTN","IVMPRECZ",115,0)
 .I '$D(HLERR) D ACK
"RTN","IVMPRECZ",116,0)
 .;
"RTN","IVMPRECZ",117,0)
 .; cleanup
"RTN","IVMPRECZ",118,0)
 .K DGLY,DGMTP,IVMDAP,IVMDAS,IVMDAZ,IVMDGLY,IVMFLG7,IVMFLGC,IVMMT31,IVMMTDT,IVMMTIEN,IVMSEG,IVMSEG1,IVMSTAT,IVMTEXT,XMSUB,FMDATE,MTDATE
"RTN","IVMPRECZ",119,0)
 .Q
"RTN","IVMPRECZ",120,0)
 Q
"RTN","IVMPTRN4")
0^34^B15675551
"RTN","IVMPTRN4",1,0)
IVMPTRN4 ;ALB/SEK,TDM - SEND RE-TRANSMISSIONS TO THE IVM CENTER ; 8/15/08 10:29am
"RTN","IVMPTRN4",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**9,11,17,34,66,81,86,115**; 21-OCT-94;Build 28
"RTN","IVMPTRN4",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMPTRN4",4,0)
 ;
"RTN","IVMPTRN4",5,0)
 ; This routine checks STATUS field of IVM TRANSMISSION LOG file (301.6)
"RTN","IVMPTRN4",6,0)
 ; to see if acknowledgment of the transmission has been received from
"RTN","IVMPTRN4",7,0)
 ; the IVM Center.  If transmission is waiting at the site, a message is
"RTN","IVMPTRN4",8,0)
 ; sent to the recipients of the IVM MESSAGES mail group.  Else the
"RTN","IVMPTRN4",9,0)
 ; message is re-transmitted to the IVM Center.
"RTN","IVMPTRN4",10,0)
 ;
"RTN","IVMPTRN4",11,0)
 ;
"RTN","IVMPTRN4",12,0)
ENTRY ; Check if message transmission has not been acknowledged for the 
"RTN","IVMPTRN4",13,0)
 ; following date range (IVMDMT3 through  IVM14) where:
"RTN","IVMPTRN4",14,0)
 ;     IVMDMT3 - First Date Checked
"RTN","IVMPTRN4",15,0)
 ;     IVM14   - Last Date Checked
"RTN","IVMPTRN4",16,0)
 ;
"RTN","IVMPTRN4",17,0)
 S IVMDTM3=$$FMADD^XLFDT(DT,-14),IVM14=$$FMADD^XLFDT(DT,-14)
"RTN","IVMPTRN4",18,0)
 S IVMDTMST=+$P($G(^IVM(301.9,1,0)),"^",6)
"RTN","IVMPTRN4",19,0)
 S:IVMDTMST<IVM14 IVMDTMST=IVM14
"RTN","IVMPTRN4",20,0)
 ;
"RTN","IVMPTRN4",21,0)
 ; INITIALIZE HL7 VARIABLES
"RTN","IVMPTRN4",22,0)
 N HL,HLEID
"RTN","IVMPTRN4",23,0)
 S HLEID="VAMC "_$P($$SITE^VASITE,"^",3)_" ORU-Z07 SERVER"
"RTN","IVMPTRN4",24,0)
 S HLEID=$O(^ORD(101,"B",HLEID,0))
"RTN","IVMPTRN4",25,0)
 D INIT^IVMUFNC(HLEID,.HL) S HLMTN="ORU" ; Initialize variables for HL7/IVM
"RTN","IVMPTRN4",26,0)
 ;
"RTN","IVMPTRN4",27,0)
 ; check Transmission Date/Time in AB x-ref
"RTN","IVMPTRN4",28,0)
 ; Note 2 oddities about this loop:
"RTN","IVMPTRN4",29,0)
 ;   1) Only checks back 2 weeks, if somehow retransmission not done within this window then it won't be done.
"RTN","IVMPTRN4",30,0)
 ;   2) Assumes IVMDAT will map to exactly one msgid for HL7 message - assumption made in $$MSGN^IVMPTRN4.
"RTN","IVMPTRN4",31,0)
 ;
"RTN","IVMPTRN4",32,0)
 S IVMDAT=IVMDTMST F  S IVMDAT=$O(^IVM(301.6,"AB",IVMDAT)) Q:'IVMDAT!($P(IVMDAT,".")>IVMDTM3)  D MAILMSGN
"RTN","IVMPTRN4",33,0)
 ;
"RTN","IVMPTRN4",34,0)
 ;
"RTN","IVMPTRN4",35,0)
 ;transmit remaining records
"RTN","IVMPTRN4",36,0)
 D
"RTN","IVMPTRN4",37,0)
 .N IVMEVENT
"RTN","IVMPTRN4",38,0)
 .; event code for Full Data Transmission
"RTN","IVMPTRN4",39,0)
 .S IVMEVENT="Z07"
"RTN","IVMPTRN4",40,0)
 .D FILE^IVMPTRN3
"RTN","IVMPTRN4",41,0)
 ;
"RTN","IVMPTRN4",42,0)
 ;clean-up
"RTN","IVMPTRN4",43,0)
 D END^IVMPTRN
"RTN","IVMPTRN4",44,0)
 ;
"RTN","IVMPTRN4",45,0)
ENTRYQ K IVMDAT,IVMMAILF,IVMDTM3,IVMDTMST,IVM14
"RTN","IVMPTRN4",46,0)
 Q
"RTN","IVMPTRN4",47,0)
 ;
"RTN","IVMPTRN4",48,0)
 ;
"RTN","IVMPTRN4",49,0)
MAILMSGN ; Get Mailman message number related to this transmission
"RTN","IVMPTRN4",50,0)
 S IVMMAILN=$$MSGN(IVMDAT)  ;returns #773 IEN for v1.6
"RTN","IVMPTRN4",51,0)
 ;
"RTN","IVMPTRN4",52,0)
 Q:'IVMMAILN                                   ; if no #773 IEN found
"RTN","IVMPTRN4",53,0)
 ;
"RTN","IVMPTRN4",54,0)
 ; find if awaiting initial transmission
"RTN","IVMPTRN4",55,0)
 N SLLN
"RTN","IVMPTRN4",56,0)
 S SLLN=+$P($G(^HLMA(IVMMAILN,0)),"^",7)       ; sending logical link
"RTN","IVMPTRN4",57,0)
 I SLLN,$D(^HLMA("AC","O",SLLN,IVMMAILN)) D  Q
"RTN","IVMPTRN4",58,0)
 .Q:$G(IVMMAILF)  ; already sent message once
"RTN","IVMPTRN4",59,0)
 .S XMSUB="MESSAGES 'AWAITING TRANSMISSION'"
"RTN","IVMPTRN4",60,0)
 .S IVMTEXT(1)="HL7 message number "_IVMMAILN_" is awaiting transmission."
"RTN","IVMPTRN4",61,0)
 .S IVMTEXT(2)="Please call the IVM Center (Atlanta, GA) to ensure the HL7 logical links and filers are running "
"RTN","IVMPTRN4",62,0)
 .S IVMTEXT(3)="if the HL7 logical link and filers are running at your station."
"RTN","IVMPTRN4",63,0)
 .S IVMTEXT(4)=" "
"RTN","IVMPTRN4",64,0)
 .S IVMTEXT(5)="Please note that you may have other messages that are awaiting transmission"
"RTN","IVMPTRN4",65,0)
 .S IVMTEXT(6)="to the IVM Center."
"RTN","IVMPTRN4",66,0)
 .D MAIL^IVMUFNC()
"RTN","IVMPTRN4",67,0)
 .S IVMMAILF=1
"RTN","IVMPTRN4",68,0)
 ;
"RTN","IVMPTRN4",69,0)
 ; Transmission has left site - get individual patient and re-transmit
"RTN","IVMPTRN4",70,0)
 K IVMQUERY("LTD"),IVMQUERY("OVIS") ;Variables needed to open/close last visit date and outpt visit QUERIES
"RTN","IVMPTRN4",71,0)
 F IVMDA=0:0 S IVMDA=$O(^IVM(301.6,"AB",IVMDAT,IVMDA)) Q:'IVMDA  D
"RTN","IVMPTRN4",72,0)
 .;
"RTN","IVMPTRN4",73,0)
 .N IVMTLOG,EVENTS
"RTN","IVMPTRN4",74,0)
 .;
"RTN","IVMPTRN4",75,0)
 .Q:'$$GET^IVMTLOG(IVMDA,.IVMTLOG)
"RTN","IVMPTRN4",76,0)
 .S IVM3015P=IVMTLOG("PAT") Q:'IVM3015P
"RTN","IVMPTRN4",77,0)
 .S IVMNODE=$G(^IVM(301.5,+IVM3015P,0)),(IVMDT,IVMIY)=+$P(IVMNODE,"^",2),DFN=+IVMNODE
"RTN","IVMPTRN4",78,0)
 .I 'DFN!'IVMDT Q
"RTN","IVMPTRN4",79,0)
 .S IVMMTDT=($E(IVMDT,1,3)+1)_"1231.9999"
"RTN","IVMPTRN4",80,0)
 .I $E(IVMMTDT,1,3)'=($E(IVMDT,1,3)+1) S IVMMTDT=$E(IVMDT,1,3)+1_"0101"
"RTN","IVMPTRN4",81,0)
 .;
"RTN","IVMPTRN4",82,0)
 .M EVENTS=IVMTLOG("EVENTS")
"RTN","IVMPTRN4",83,0)
 .;
"RTN","IVMPTRN4",84,0)
 .; Prepare FULL transmission
"RTN","IVMPTRN4",85,0)
 .D FULL^IVMPTRN7(DFN,IVMMTDT,.EVENTS,.IVMCT,.IVMGTOT,,,,.IVMQUERY)
"RTN","IVMPTRN4",86,0)
 .;
"RTN","IVMPTRN4",87,0)
 .;change status to retransmitted
"RTN","IVMPTRN4",88,0)
 .I $$SETSTAT^IVMTLOG(IVMDA,2)
"RTN","IVMPTRN4",89,0)
 F Z="LTD","OVIS" I $G(IVMQUERY(Z)) D CLOSE^SDQ(IVMQUERY(Z)) K IVMQUERY(Z)
"RTN","IVMPTRN4",90,0)
 Q
"RTN","IVMPTRN4",91,0)
 ;
"RTN","IVMPTRN4",92,0)
MSGN(IVMDT) ; Find the mailman message number for an HL7 message
"RTN","IVMPTRN4",93,0)
 ; Input:   IVMDT  --  The date/time (301.6;.02) the msg was sent
"RTN","IVMPTRN4",94,0)
 ; Output:  Pointer to the message in file #773, or zero if not found
"RTN","IVMPTRN4",95,0)
 N IVMMSG,X S IVMMSG=0
"RTN","IVMPTRN4",96,0)
 S X=+$O(^IVM(301.6,"AB",IVMDT,0)),X=$G(^IVM(301.6,X,0))
"RTN","IVMPTRN4",97,0)
 I X S IVMMSG=$$MMN(+$P($P(X,"^",5),"-"))
"RTN","IVMPTRN4",98,0)
MSGNQ Q IVMMSG
"RTN","IVMPTRN4",99,0)
 ;
"RTN","IVMPTRN4",100,0)
MMN(Y) ; Do look-up on file #772 and find mail message number.
"RTN","IVMPTRN4",101,0)
 ;  Input:   Y  --  Message Control ID
"RTN","IVMPTRN4",102,0)
 ;  Output:  Mail Message Number
"RTN","IVMPTRN4",103,0)
 N Z S Z=0
"RTN","IVMPTRN4",104,0)
 S Y=$O(^HL(772,"C",Y,0))
"RTN","IVMPTRN4",105,0)
 I Y S Z=+$O(^HLMA("B",Y,0))  ;Y=#772 IEN, Z=#773 IEN
"RTN","IVMPTRN4",106,0)
MMNQ Q Z
"RTN","IVMPTRN7")
0^9^B8730852
"RTN","IVMPTRN7",1,0)
IVMPTRN7 ;ALB/KCL/CJM/PHH/BAJ,TDM - HL7 FULL DATA TRANSMISSION (Z07) BUILDER ; 8/15/08 10:30am
"RTN","IVMPTRN7",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**9,11,24,34,74,88,105,115**;OCT 21, 1994;Build 28
"RTN","IVMPTRN7",3,0)
 ;
"RTN","IVMPTRN7",4,0)
 ;
"RTN","IVMPTRN7",5,0)
FULL(DFN,IVMMTDT,EVENTS,IVMCT,IVMGTOT,IVMFLL,IVMNOMSH,IVMREC,IVMQUERY) ;
"RTN","IVMPTRN7",6,0)
 ;Description: This entry point will be used to create an HL7 "Full Data Transmission" message for a patient.   Transmission of these messages will be in a batch of 1-100 individual HL7 messages.
"RTN","IVMPTRN7",7,0)
 ;
"RTN","IVMPTRN7",8,0)
 ;Input:
"RTN","IVMPTRN7",9,0)
 ;  DFN - Patient IEN
"RTN","IVMPTRN7",10,0)
 ;  IVMMTDT - date of the patient's Means Test or Copay Test
"RTN","IVMPTRN7",11,0)
 ;  EVENTS () - an array of reasons for transmission, pass by reference.
"RTN","IVMPTRN7",12,0)
 ;  EVENTS("IVM") = 1 if transmission due to IVM criteria, 0 otherwise
"RTN","IVMPTRN7",13,0)
 ;  EVENTS(" "DCD")=1 if transmission due to DCD criteria, 0 otherwise
"RTN","IVMPTRN7",14,0)
 ;  EVENTS("ENROLL")=1 if transmission due to enrollment criteria, 0 otherwise
"RTN","IVMPTRN7",15,0)
 ;  IVMCT - count of segments transmitted, pass by reference
"RTN","IVMPTRN7",16,0)
 ;  IVMGTOT - count of batchs transmitted, pass by reference
"RTN","IVMPTRN7",17,0)
 ;  IVMFLL - (optional), flag for creating MSA, QRD segments for FULL query transmission, $G(IVMFLL) means yes
"RTN","IVMPTRN7",18,0)
 ;  IVMNOMSH - (optional), if IVMNOMSH=1, means the MSH segment should not be built
"RTN","IVMPTRN7",19,0)
 ;  IVMREC - (optional), if $G(IVMFLL), then this variable will contain the internal entry number of Query Income Year #301.9001 mult.
"RTN","IVMPTRN7",20,0)
 ;  IVMQUERY - array passed in by reference where
"RTN","IVMPTRN7",21,0)
 ;    IVMQUERY("LTD") -- # of the QUERY that is currently open or
"RTN","IVMPTRN7",22,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN7",23,0)
 ;                last treatment date
"RTN","IVMPTRN7",24,0)
 ;    IVMQUERY("OVIS") -- # of the QUERY that is currently open or
"RTN","IVMPTRN7",25,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN7",26,0)
 ;                finding outpatient visits
"RTN","IVMPTRN7",27,0)
 ;
"RTN","IVMPTRN7",28,0)
 ;HL7 variables as defined by call to INIT^IVMUFNC:
"RTN","IVMPTRN7",29,0)
 ;  HLEVN - HL7 message event counter 
"RTN","IVMPTRN7",30,0)
 ;  HLSDT - a flag that indicates that the data to be sent is stored in the ^TMP("HLS") global array.
"RTN","IVMPTRN7",31,0)
 ;
"RTN","IVMPTRN7",32,0)
 ;The following variables returned by the INIT^HLTRANS entry point:
"RTN","IVMPTRN7",33,0)
 ;  HLNDAP - Non-DHCP Application Pointer from file 770
"RTN","IVMPTRN7",34,0)
 ;  HLNDAP0 - Zero node from file 770 corresponding to HLNDAP
"RTN","IVMPTRN7",35,0)
 ;  HLDAP - DHCP Application Pointer from file 771
"RTN","IVMPTRN7",36,0)
 ;  HLDAN - The DHCP Application Name (.01 field, file 771) for HLDAP
"RTN","IVMPTRN7",37,0)
 ;  HLPID - HL7 processing ID from file 770
"RTN","IVMPTRN7",38,0)
 ;  HLVER - HL7 version number from file 770
"RTN","IVMPTRN7",39,0)
 ;  HLFS - HL7 Field Separater from the 'FS' node of file 771
"RTN","IVMPTRN7",40,0)
 ;  HLECH - HL7 Encoding Characters from the 'EC' node of file 771
"RTN","IVMPTRN7",41,0)
 ;  HLQ - Double quotes ("") for use in building HL7 segments
"RTN","IVMPTRN7",42,0)
 ;  HLERR - if an error is encountered, an error message is returned in the HLERR variable.
"RTN","IVMPTRN7",43,0)
 ;  HLDA - the internal entry number for the entry created in file 772
"RTN","IVMPTRN7",44,0)
 ;
"RTN","IVMPTRN7",45,0)
 ;  HLDT - the transmission date/time (associated with the entry in in file 772 identified by HLDA) in internal VA FileMan format.
"RTN","IVMPTRN7",46,0)
 ;  HLDT1 - the same transmission date/time as the HLDT variable, only in HL7 format.
"RTN","IVMPTRN7",47,0)
 ;
"RTN","IVMPTRN7",48,0)
 ;Output:
"RTN","IVMPTRN7",49,0)
 ;  ^TMP("HLS",$J,IVMCT) - global array containing all segments of the HL7 message that the VistA application wishes to send.  The HLSDT variable is defined above and the IVMCT variable is a sequential number starting at 1.
"RTN","IVMPTRN7",50,0)
 ;
"RTN","IVMPTRN7",51,0)
 N DGREL,DGINC,DR,I,IVMI,IVMDFN,IVMHLMID,IVMNTE,IVMPAT,IVMQRD,X,IVMCNTID
"RTN","IVMPTRN7",52,0)
 ;
"RTN","IVMPTRN7",53,0)
 ; IVM*2.0*105 BAJ 10/20/2005
"RTN","IVMPTRN7",54,0)
 ; Do Z07 Consistency checks and, if fail, prevent Z07 Build
"RTN","IVMPTRN7",55,0)
 I '$$EN^IVMZ07C(DFN) Q
"RTN","IVMPTRN7",56,0)
 ;
"RTN","IVMPTRN7",57,0)
 ; INITIALIZE HL7 1.6 VARIABLES
"RTN","IVMPTRN7",58,0)
 D INIT^HLFNC2(HLEID,.HL)
"RTN","IVMPTRN7",59,0)
 ;
"RTN","IVMPTRN7",60,0)
 ; quit if Pseudo SSN and not verified
"RTN","IVMPTRN7",61,0)
 ; Q:'$$SNDPSSN(DFN)   ;Removed by IVM*2*105
"RTN","IVMPTRN7",62,0)
 ; 
"RTN","IVMPTRN7",63,0)
 S DGPRIM=$$GET1^DIQ(2,DFN_",",.361)
"RTN","IVMPTRN7",64,0)
 I $G(DGPRIM)]"" S DGPRIM=$O(^DIC(8,"B",DGPRIM,0))
"RTN","IVMPTRN7",65,0)
 I $G(DGPRIM)]"" S DGPRIM=$P($G(^DIC(8,DGPRIM,0)),U,9)
"RTN","IVMPTRN7",66,0)
 I $G(DGPRIM)=14 D REM Q
"RTN","IVMPTRN7",67,0)
 ;
"RTN","IVMPTRN7",68,0)
 ; if count=0 and not first batch
"RTN","IVMPTRN7",69,0)
 ;RMC;I IVMCT=0,$G(IVMGTOT) D FILE^HLTF
"RTN","IVMPTRN7",70,0)
 ;
"RTN","IVMPTRN7",71,0)
 ; HL7 event/message counter
"RTN","IVMPTRN7",72,0)
 S HLEVN=$G(HLEVN)+1
"RTN","IVMPTRN7",73,0)
 ;
"RTN","IVMPTRN7",74,0)
 ; CREATE SLOT FOR EACH NEW BATCH
"RTN","IVMPTRN7",75,0)
 I HLEVN=1 D
"RTN","IVMPTRN7",76,0)
 . K HLMID,MTIEN,HLDT,HLDT1
"RTN","IVMPTRN7",77,0)
 . D CREATE^HLTF(.HLMID,.MTIEN,.HLDT,.HLDT1)
"RTN","IVMPTRN7",78,0)
 ;
"RTN","IVMPTRN7",79,0)
 ; handle message header processing for HL7 full data trans (Z07) msg
"RTN","IVMPTRN7",80,0)
 D MSH^IVMUFNC4($G(IVMNOMSH),$G(IVMFLL),$G(IVMREC),.IVMCT,.IVMCNTID)
"RTN","IVMPTRN7",81,0)
 ;
"RTN","IVMPTRN7",82,0)
 I IVMMTDT="" D
"RTN","IVMPTRN7",83,0)
 .S IVMMTDT=$P($$LST^DGMTU(DFN,DT),"^",2)
"RTN","IVMPTRN7",84,0)
 .I IVMMTDT="" S IVMMTDT=DT
"RTN","IVMPTRN7",85,0)
 ;
"RTN","IVMPTRN7",86,0)
 ; build HL7 Full Data Transmission (Z07) message
"RTN","IVMPTRN7",87,0)
 D BUILD^IVMPTRN8(DFN,IVMMTDT,.IVMCT,.IVMQUERY)
"RTN","IVMPTRN7",88,0)
 ;
"RTN","IVMPTRN7",89,0)
 ; log patient transmission
"RTN","IVMPTRN7",90,0)
 D
"RTN","IVMPTRN7",91,0)
 .N IVMSTAT
"RTN","IVMPTRN7",92,0)
 .S X=$$LST^DGMTCOU1(DFN,IVMMTDT,3)
"RTN","IVMPTRN7",93,0)
 .S IVMSTAT=$S($E($P(X,"^",2),1,3)=$E(IVMMTDT,1,3):$P($G(^DGMT(408.31,+X,0)),"^",3),1:"")
"RTN","IVMPTRN7",94,0)
 .;
"RTN","IVMPTRN7",95,0)
 .D FILEPT^IVMPTRN3(DFN,$$LYR^DGMTSCU1(IVMMTDT),HLDT,IVMCNTID,.EVENTS,IVMSTAT,IVMINS)
"RTN","IVMPTRN7",96,0)
 ;
"RTN","IVMPTRN7",97,0)
 ;if number of HL7 events/msgs is 100 then call HL7 pkg to transmit batch
"RTN","IVMPTRN7",98,0)
 I HLEVN=100 D
"RTN","IVMPTRN7",99,0)
 .N IVMEVENT
"RTN","IVMPTRN7",100,0)
 .; event code for Full Data Transmission
"RTN","IVMPTRN7",101,0)
 .S IVMEVENT="Z07"
"RTN","IVMPTRN7",102,0)
 .I $G(IVMFLL) D FILE1^IVMPTRN3 Q
"RTN","IVMPTRN7",103,0)
 .D FILE^IVMPTRN3
"RTN","IVMPTRN7",104,0)
 Q
"RTN","IVMPTRN7",105,0)
 ;
"RTN","IVMPTRN7",106,0)
SNDPSSN(DFN) ; check SSN and patient eligibility
"RTN","IVMPTRN7",107,0)
 ;
"RTN","IVMPTRN7",108,0)
 ; Input:
"RTN","IVMPTRN7",109,0)
 ;  DFN           Patient file (#2) IEN
"RTN","IVMPTRN7",110,0)
 ; Output:
"RTN","IVMPTRN7",111,0)
 ;  <expression>  1: Pseudo SSN and Eligibility verified or
"RTN","IVMPTRN7",112,0)
 ;                   not a Pseudo SSN
"RTN","IVMPTRN7",113,0)
 ;                0: Psuedo SSN and Eligibility Pending verification
"RTN","IVMPTRN7",114,0)
 ;                   Pending re-verification
"RTN","IVMPTRN7",115,0)
 ;
"RTN","IVMPTRN7",116,0)
 N SSN,PFLG
"RTN","IVMPTRN7",117,0)
 ;
"RTN","IVMPTRN7",118,0)
 ; Don't process records with corrupted nodes
"RTN","IVMPTRN7",119,0)
 I '$D(^DPT(DFN,0)) D REM Q 0
"RTN","IVMPTRN7",120,0)
 ;   
"RTN","IVMPTRN7",121,0)
 S SSN=$P(^DPT(DFN,0),U,9)
"RTN","IVMPTRN7",122,0)
 S PFLG=($E(SSN,$L(SSN))="P") I 'PFLG Q 1
"RTN","IVMPTRN7",123,0)
 I ($P($G(^DPT(DFN,.361)),U)="V") Q 1
"RTN","IVMPTRN7",124,0)
 ;
"RTN","IVMPTRN7",125,0)
 D REM
"RTN","IVMPTRN7",126,0)
 Q 0
"RTN","IVMPTRN7",127,0)
 ;
"RTN","IVMPTRN7",128,0)
REM ; Remove Psuedo SSN from Queue
"RTN","IVMPTRN7",129,0)
 ; Set TRANSMISSION STATUS to transmission not required
"RTN","IVMPTRN7",130,0)
 S PDATA(.03)=1 I $$UPD^DGENDBS(301.5,IVMDA,.PDATA,.ERR)
"RTN","IVMPTRN7",131,0)
 K PDATA,ERR
"RTN","IVMPTRN7",132,0)
 Q
"RTN","IVMPTRN8")
0^4^B54392757
"RTN","IVMPTRN8",1,0)
IVMPTRN8 ;ALB/RKS/PDJ/BRM,TDM - HL7 FULL DATA TRANSMISSION (Z07) BUILDER ; 2/12/09 3:12pm
"RTN","IVMPTRN8",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**9,11,19,12,21,17,24,36,37,47,48,42,34,77,76,75,79,85,89,98,56,97,104,113,109,114,105,115**; 21-OCT-94;Build 28
"RTN","IVMPTRN8",3,0)
 ;
"RTN","IVMPTRN8",4,0)
 ;
"RTN","IVMPTRN8",5,0)
BUILD(DFN,IVMMTDT,IVMCT,IVMQUERY) ; --
"RTN","IVMPTRN8",6,0)
 ;  Description: This entry point will be used to create an HL7 
"RTN","IVMPTRN8",7,0)
 ;  "Full Data Transmission" message for a patient.
"RTN","IVMPTRN8",8,0)
 ;
"RTN","IVMPTRN8",9,0)
 ;  Input:
"RTN","IVMPTRN8",10,0)
 ;        DFN - Patient IEN
"RTN","IVMPTRN8",11,0)
 ;    IVMMTDT - date of the patient's Means Test or Copay Test
"RTN","IVMPTRN8",12,0)
 ;      IVMCT - count of hl7 segments transmitted, pass by reference
"RTN","IVMPTRN8",13,0)
 ;   IVMQUERY - array passed in by reference where
"RTN","IVMPTRN8",14,0)
 ;    IVMQUERY("LTD") -- # of the QUERY that is currently open or
"RTN","IVMPTRN8",15,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN8",16,0)
 ;                last treatment date
"RTN","IVMPTRN8",17,0)
 ;    IVMQUERY("OVIS") -- # of the QUERY that is currently open or
"RTN","IVMPTRN8",18,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN8",19,0)
 ;                finding outpatient visits
"RTN","IVMPTRN8",20,0)
 ;
"RTN","IVMPTRN8",21,0)
 ;  HL7 variables as defined by call to INIT^IVMUFNC:
"RTN","IVMPTRN8",22,0)
 ;      HLEVN - HL7 message event counter 
"RTN","IVMPTRN8",23,0)
 ;      HLSDT - a flag that indicates that the data to be sent is
"RTN","IVMPTRN8",24,0)
 ;              stored in the ^TMP("HLS") global array.
"RTN","IVMPTRN8",25,0)
 ;
"RTN","IVMPTRN8",26,0)
 ;  The following variables returned by the INIT^HLTRANS entry point:
"RTN","IVMPTRN8",27,0)
 ;    HLNDAP - Non-DHCP Application Pointer from file 770
"RTN","IVMPTRN8",28,0)
 ;   HLNDAP0 - Zero node from file 770 corresponding to HLNDAP
"RTN","IVMPTRN8",29,0)
 ;     HLDAP - DHCP Application Pointer from file 771
"RTN","IVMPTRN8",30,0)
 ;     HLDAN - The DHCP Application Name (.01 field, file 771) for HLDAP
"RTN","IVMPTRN8",31,0)
 ;     HLPID - HL7 processing ID from file 770
"RTN","IVMPTRN8",32,0)
 ;     HLVER - HL7 version number from file 770
"RTN","IVMPTRN8",33,0)
 ;      HLFS - HL7 Field Separator from the 'FS' node of file 771
"RTN","IVMPTRN8",34,0)
 ;     HLECH - HL7 Encoding Characters from the 'EC' node of file 771
"RTN","IVMPTRN8",35,0)
 ;       HLQ - Double quotes ("") for use in building HL7 segments
"RTN","IVMPTRN8",36,0)
 ;     HLERR - if an error is encountered, an error message is returned
"RTN","IVMPTRN8",37,0)
 ;             in the HLERR variable.
"RTN","IVMPTRN8",38,0)
 ;      HLDA - the internal entry number for the entry created in
"RTN","IVMPTRN8",39,0)
 ;             file #772.
"RTN","IVMPTRN8",40,0)
 ;      HLDT - transmission date/time (associated with the entry in file
"RTN","IVMPTRN8",41,0)
 ;             #772 identified by HLDA) in internal VA FileMan format.
"RTN","IVMPTRN8",42,0)
 ;     HLDT1 - the same transmission date/time as the HLDT variable, 
"RTN","IVMPTRN8",43,0)
 ;             only in HL7 format.
"RTN","IVMPTRN8",44,0)
 ;
"RTN","IVMPTRN8",45,0)
 ; Output:
"RTN","IVMPTRN8",46,0)
 ;  ^TMP("HLS",$J,IVMCT) - global array containing all segments of the HL7 message that the VistA application wishes to send.  The HLSDT variable is defined above and the IVMCT variable is a sequential number incremented by 1.
"RTN","IVMPTRN8",47,0)
 ;
"RTN","IVMPTRN8",48,0)
 ;
"RTN","IVMPTRN8",49,0)
 N DGINC,DGIR,DGREL,I,IVMNTE,IVMPID,IVMSUB,IVMZRD,VAFPID,VAFZEL,FBZFE,IVMZCD,DELETE,NODE,IVMPIEN,TEST,IVMPNODE,TESTTYPE,SEQS,TESTCODE,HARDSHIP,ACTVIEN,IVMZMH,IVMSEQ
"RTN","IVMPTRN8",50,0)
 N EDBMTZ06,ZMHSQ,SETID,OBXCNT,OBXTMP,DGSEC,SEGOCC,ZIOSEG,N101015,RF1SEG
"RTN","IVMPTRN8",51,0)
 ;
"RTN","IVMPTRN8",52,0)
 ; create (PID) Patient Identification segment
"RTN","IVMPTRN8",53,0)
 ; **** Add ICN to 2nd piece PID segment for MPI@HEC.
"RTN","IVMPTRN8",54,0)
 S IVMCMOR="1,2",IVMSEQ=1
"RTN","IVMPTRN8",55,0)
 ; check to see if site is a legacy site.  If not add ICN to PID segment.
"RTN","IVMPTRN8",56,0)
 I '$D(^PPP(1020.128,"AC",$P($$SITE^VASITE,"^",3))) D
"RTN","IVMPTRN8",57,0)
 . I +$$GETICN^MPIF001(DFN)>0,($$IFLOCAL^MPIF001(DFN)=0) S IVMSEQ=IVMSEQ_",2",IVMCMOR="1,2,3"  ;add SEQ 1 and 2 for PID
"RTN","IVMPTRN8",58,0)
 ;
"RTN","IVMPTRN8",59,0)
 ; send SSN indicating pseudo
"RTN","IVMPTRN8",60,0)
 ; I $P(IVMPID_$G(IVMPID(1)),HLFS,20)["P" D PSEUDO^IVMPTRN1  ; strip 'P' from pseudo SSNs
"RTN","IVMPTRN8",61,0)
 S IVMSEQ=IVMSEQ_",3,5,7,8,11,12,13,14,19"
"RTN","IVMPTRN8",62,0)
 K IVMPID D BLDPID^VAFCQRY1(DFN,1,IVMSEQ,.IVMPID,.HL,.ERROR)
"RTN","IVMPTRN8",63,0)
 S SEGOCC=0 F  S SEGOCC=$O(IVMPID(SEGOCC)) Q:SEGOCC=""  D
"RTN","IVMPTRN8",64,0)
 . S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMPID(SEGOCC)
"RTN","IVMPTRN8",65,0)
 ;
"RTN","IVMPTRN8",66,0)
 ; **** create (PD1) Patient CMOR segment for MPI@HEC.
"RTN","IVMPTRN8",67,0)
 S:'$D(HL("FS")) HL("FS")=HLFS
"RTN","IVMPTRN8",68,0)
 S:'$D(HL("ECH")) HL("ECH")=HLECH
"RTN","IVMPTRN8",69,0)
 S:'$D(HL("Q")) HL("Q")=HLQ
"RTN","IVMPTRN8",70,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLPD1(DFN,IVMCMOR)
"RTN","IVMPTRN8",71,0)
 ;
"RTN","IVMPTRN8",72,0)
 ; create (ZPD) Patient Dependent Info. segment
"RTN","IVMPTRN8",73,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN1^VAFHLZPD(DFN,"1,8,9,11,12,13,17,19,31,32,33,35,40"),IVMINS=$P(^(IVMCT),HLFS,12)
"RTN","IVMPTRN8",74,0)
 I $D(VAFZPD(1)) S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=VAFZPD(1) K VAFZPD(1)
"RTN","IVMPTRN8",75,0)
 ;
"RTN","IVMPTRN8",76,0)
 ; create (ZTA) Temporary Address segment
"RTN","IVMPTRN8",77,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZTA(DFN,"1,2,3,4,5,6,7,8,9",,.HL)
"RTN","IVMPTRN8",78,0)
 ;
"RTN","IVMPTRN8",79,0)
 ; create (ZIE) Ineligible segment
"RTN","IVMPTRN8",80,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIE(DFN,"1,2,3",1)
"RTN","IVMPTRN8",81,0)
 ;
"RTN","IVMPTRN8",82,0)
 ; create (ZEL) Eligibility segment(s) 
"RTN","IVMPTRN8",83,0)
 ; **** Add 5th piece to ZEL to correct consistency check
"RTN","IVMPTRN8",84,0)
 D EN1^VAFHLZEL(DFN,"1,2,5,6,7,8,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,29,34,35,37,38,39,40",2,.VAFZEL)
"RTN","IVMPTRN8",85,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(VAFZEL(1))  ; Primary Eligibility
"RTN","IVMPTRN8",86,0)
 I $D(VAFZEL(1,1)) S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(VAFZEL(1,1))
"RTN","IVMPTRN8",87,0)
 ; - other entitled eligibilities
"RTN","IVMPTRN8",88,0)
 F IVMSUB=1:0 S IVMSUB=+$O(VAFZEL(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",89,0)
 . S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(VAFZEL(+IVMSUB))
"RTN","IVMPTRN8",90,0)
 ;
"RTN","IVMPTRN8",91,0)
 ; create (ZEN) Enrollment segment
"RTN","IVMPTRN8",92,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEN(DFN)
"RTN","IVMPTRN8",93,0)
 ;
"RTN","IVMPTRN8",94,0)
 ; create (ZCD) Catastrophic Disability segment(s)
"RTN","IVMPTRN8",95,0)
 D BUILD^VAFHLZCD(.IVMZCD,DFN,,HLQ,HLFS)
"RTN","IVMPTRN8",96,0)
 F IVMSUB=0:0 S IVMSUB=+$O(IVMZCD(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",97,0)
 . S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(IVMZCD(+IVMSUB))
"RTN","IVMPTRN8",98,0)
 ;
"RTN","IVMPTRN8",99,0)
 ; Optionally create (ZMH) Military History segments
"RTN","IVMPTRN8",100,0)
 D ENTER^VAFHLZMH(DFN,"IVMZMH")
"RTN","IVMPTRN8",101,0)
 S (ZMHSQ,SETID)=0
"RTN","IVMPTRN8",102,0)
 I $D(IVMZMH) F  S ZMHSQ=$O(IVMZMH(ZMHSQ)) Q:ZMHSQ=""  D
"RTN","IVMPTRN8",103,0)
 . Q:$TR($P(IVMZMH(ZMHSQ,0),HLFS,4,5),"""^~")=""
"RTN","IVMPTRN8",104,0)
 . S SETID=SETID+1,IVMCT=IVMCT+1
"RTN","IVMPTRN8",105,0)
 . S ^TMP("HLS",$J,IVMCT)="ZMH"_HLFS_SETID_HLFS_$P(IVMZMH(ZMHSQ,0),HLFS,3,6)
"RTN","IVMPTRN8",106,0)
 ;
"RTN","IVMPTRN8",107,0)
 ; create (ZRD) Rated Disabilities segment(s)
"RTN","IVMPTRN8",108,0)
 D EN^VAFHLZRD(DFN,"1,2,3,4",HLQ,HLFS,"IVMZRD")
"RTN","IVMPTRN8",109,0)
 F IVMSUB=0:0 S IVMSUB=+$O(IVMZRD(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",110,0)
 . S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(IVMZRD(+IVMSUB,0))
"RTN","IVMPTRN8",111,0)
 ;
"RTN","IVMPTRN8",112,0)
 ; create (ZCT) Emergency Contact segment
"RTN","IVMPTRN8",113,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZCT(DFN,"1,2,3,4,5,6,7,10","",1,1)
"RTN","IVMPTRN8",114,0)
 ;
"RTN","IVMPTRN8",115,0)
 ; create (ZEM) Employment Info. segment for (1) Patient & (2) Spouse
"RTN","IVMPTRN8",116,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEM(DFN,"1,2,3")
"RTN","IVMPTRN8",117,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEM(DFN,"1,2,3",2,2)
"RTN","IVMPTRN8",118,0)
 ;
"RTN","IVMPTRN8",119,0)
 ; create (ZGD) Guardian segment for (1) VA & (2) Civil 
"RTN","IVMPTRN8",120,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZGD(DFN,"1,2,3,4,5,6,7,8",1)
"RTN","IVMPTRN8",121,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZGD(DFN,"1,2,3,4,5,6,7,8",2)
"RTN","IVMPTRN8",122,0)
 ;
"RTN","IVMPTRN8",123,0)
 ; Income Year requiring transmission from IVM Patient File (301.5)
"RTN","IVMPTRN8",124,0)
 S IVMIY=$S($D(IVMIY):IVMIY,1:(IVMMTDT-10000))
"RTN","IVMPTRN8",125,0)
 N MTINFO S MTINFO=$$FUT^DGMTU(DFN)
"RTN","IVMPTRN8",126,0)
 I ($E(IVMIY,1,3)+1)=$E($P(MTINFO,U,2),1,3) S IVMMTDT=$P(MTINFO,U,2)
"RTN","IVMPTRN8",127,0)
 ;get the primary test for the income year
"RTN","IVMPTRN8",128,0)
 S TESTTYPE=$$GETTYPE^IVMPTRN9(DFN,IVMMTDT,.TESTCODE,.HARDSHIP,.ACTVIEN)
"RTN","IVMPTRN8",129,0)
 ;
"RTN","IVMPTRN8",130,0)
 ; The following function call returns:
"RTN","IVMPTRN8",131,0)
 ;   - Patient Relation IEN array in DGREL
"RTN","IVMPTRN8",132,0)
 ;   - Individual Annual Income IEN array in DGINC
"RTN","IVMPTRN8",133,0)
 ;   - Income Relation IEN array in DGINR
"RTN","IVMPTRN8",134,0)
 D ALL^DGMTU21(DFN,"VSC",IVMMTDT,"IPR",ACTVIEN)
"RTN","IVMPTRN8",135,0)
 ;
"RTN","IVMPTRN8",136,0)
 S EDBMTZ06=0 I $$VERZ06^EASPTRN1(DFN) S EDBMTZ06=1
"RTN","IVMPTRN8",137,0)
 ; create (ZIC) Income segment for veteran
"RTN","IVMPTRN8",138,0)
 S IVMCT=IVMCT+1
"RTN","IVMPTRN8",139,0)
 ;IVM*2.0*115 -- Check for Means Test Version Indicator
"RTN","IVMPTRN8",140,0)
 N MTVERS S MTVERS=$S(+$G(ACTVIEN):+$P($G(^DGMT(408.31,ACTVIEN,2)),"^",11),1:0)
"RTN","IVMPTRN8",141,0)
 I MTVERS=0 D  I 1
"RTN","IVMPTRN8",142,0)
 . S ^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("V")),"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20")
"RTN","IVMPTRN8",143,0)
 E  D
"RTN","IVMPTRN8",144,0)
 . S ^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("V")),"1,2,3,9,12,13,14,15,16,18,19")
"RTN","IVMPTRN8",145,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",146,0)
 ;use IVMIY not IVMMTDT. For LTC copay exemption, IVMMTDT is not correct
"RTN","IVMPTRN8",147,0)
 S $P(^TMP("HLS",$J,IVMCT),"^",3)=$$HLDATE^HLFNC(IVMIY)
"RTN","IVMPTRN8",148,0)
 ;
"RTN","IVMPTRN8",149,0)
 ; create (ZIR) Income Relation segment for veteran
"RTN","IVMPTRN8",150,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("V")),"1,2,3,4,5,10")
"RTN","IVMPTRN8",151,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^1"
"RTN","IVMPTRN8",152,0)
 ;
"RTN","IVMPTRN8",153,0)
 ; create (ZDP) Patient Dependent Info. segment for spouse
"RTN","IVMPTRN8",154,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZDP(+$G(DGREL("S")),"1,2,3,4,5,6,7,8,9,10")
"RTN","IVMPTRN8",155,0)
 I $P(^TMP("HLS",$J,IVMCT),HLFS,3)'=HLQ,($P($G(^(IVMCT)),HLFS,6)=HLQ) D
"RTN","IVMPTRN8",156,0)
 . ; - pass non-existent SSNs as 0s
"RTN","IVMPTRN8",157,0)
 . S $P(X,HLFS,6)="000000000"
"RTN","IVMPTRN8",158,0)
 ;
"RTN","IVMPTRN8",159,0)
 ; create (ZIC) Income segment for spouse
"RTN","IVMPTRN8",160,0)
 S IVMCT=IVMCT+1
"RTN","IVMPTRN8",161,0)
 ;IVM*2.0*115
"RTN","IVMPTRN8",162,0)
 I MTVERS=0 D  I 1
"RTN","IVMPTRN8",163,0)
 . S ^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("S")),"1,2,3,4,5,6,7,8,9,10,11,12,16,17,18,19,20")
"RTN","IVMPTRN8",164,0)
 E  D
"RTN","IVMPTRN8",165,0)
 . S ^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("S")),"1,2,3,9,12,16,18,19")
"RTN","IVMPTRN8",166,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",167,0)
 ;
"RTN","IVMPTRN8",168,0)
 ; create (ZIR) Income Relation segment for spouse
"RTN","IVMPTRN8",169,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("S")),"1,2,3")
"RTN","IVMPTRN8",170,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^"_$P(^TMP("HLS",$J,IVMCT),"^",2)
"RTN","IVMPTRN8",171,0)
 ;
"RTN","IVMPTRN8",172,0)
 ;
"RTN","IVMPTRN8",173,0)
 ; create ZDP, ZIC, and ZIR segments for all Means Test dependents
"RTN","IVMPTRN8",174,0)
 F IVMSUB=0:0 S IVMSUB=$O(DGREL("C",IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",175,0)
 . ;
"RTN","IVMPTRN8",176,0)
 . ; - create (ZDP) Dependent Info. segment for dependent child
"RTN","IVMPTRN8",177,0)
 . S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZDP(+$G(DGREL("C",IVMSUB)),"1,2,3,4,5,6,7,9,10")
"RTN","IVMPTRN8",178,0)
 . I $P(^TMP("HLS",$J,IVMCT),HLFS,3)'=HLQ,($P($G(^(IVMCT)),HLFS,6)=HLQ) D
"RTN","IVMPTRN8",179,0)
 . . ; - pass non-existent SSNs as 0s
"RTN","IVMPTRN8",180,0)
 . . S $P(X,HLFS,6)="000000000"
"RTN","IVMPTRN8",181,0)
 . ;
"RTN","IVMPTRN8",182,0)
 . ; - create (ZIC) Income segment for dependent child
"RTN","IVMPTRN8",183,0)
 . S IVMCT=IVMCT+1
"RTN","IVMPTRN8",184,0)
 . ;IVM*2.0*115
"RTN","IVMPTRN8",185,0)
 . I MTVERS=0 D  I 1
"RTN","IVMPTRN8",186,0)
 . . S ^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("C",IVMSUB)),"1,2,3,4,5,6,7,8,9,10,11,12,15")
"RTN","IVMPTRN8",187,0)
 . E  D
"RTN","IVMPTRN8",188,0)
 . . S ^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("C",IVMSUB)),"1,2,3,9,12,15,16,18,19")
"RTN","IVMPTRN8",189,0)
 . I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",190,0)
 . ;
"RTN","IVMPTRN8",191,0)
 . ; - create (ZIR) Income Relation segment for dependent child
"RTN","IVMPTRN8",192,0)
 . S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("C",IVMSUB)),"1,2,3,6,7,8,9,14")
"RTN","IVMPTRN8",193,0)
 . I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^"_$P(^TMP("HLS",$J,IVMCT),"^",2)
"RTN","IVMPTRN8",194,0)
 . ;
"RTN","IVMPTRN8",195,0)
 ; Send INACTIVE spouse/dependents.
"RTN","IVMPTRN8",196,0)
 D GETINACD^DGMTU11(DFN,.DGREL)
"RTN","IVMPTRN8",197,0)
 F I="S","C" D
"RTN","IVMPTRN8",198,0)
 . F IVMSUB=0:0 S IVMSUB=$O(DGIREL(I,IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",199,0)
 . . S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZDP(+$G(DGIREL(I,IVMSUB)),"1,2,3,4,5,6,7,9,10,11",,,$P(DGIREL(I,IVMSUB),U,3))
"RTN","IVMPTRN8",200,0)
 ;
"RTN","IVMPTRN8",201,0)
 D GOTO^IVMPTRN9
"RTN","IVMPTRN8",202,0)
 Q
"RTN","IVMPTRN9")
0^31^B53274295
"RTN","IVMPTRN9",1,0)
IVMPTRN9 ;ALB/KCL/CN/BRM,TDM,EG - HL7 FULL DATA TRANSMISSION (Z07) BUILDER (CONTINUED) ; 10/11/07 12:19pm
"RTN","IVMPTRN9",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**9,11,19,12,21,17,46,50,53,34,49,58,79,99,116,105,115**; 21-OCT-94;Build 28
"RTN","IVMPTRN9",3,0)
 ;
"RTN","IVMPTRN9",4,0)
 ;
"RTN","IVMPTRN9",5,0)
GOTO ; place to break up the routine
"RTN","IVMPTRN9",6,0)
 ;
"RTN","IVMPTRN9",7,0)
 ; create (ZIO) Inpatient/Outpatient segment for veteran
"RTN","IVMPTRN9",8,0)
 S N101015=$G(^DPT(DFN,1010.15))
"RTN","IVMPTRN9",9,0)
 S ZIOSEG="ZIO^1^"_$$EN^IVMUFNC1(DFN,IVMMTDT,.IVMQUERY)  ;seq 1-3
"RTN","IVMPTRN9",10,0)
 S ZIOSEG=ZIOSEG_"^"_$$LTD^IVMUFNC(DFN,.IVMQUERY)        ;seq 4
"RTN","IVMPTRN9",11,0)
 S X=$P(N101015,"^",9),$P(ZIOSEG,U,6)=$S(X=0:"N",X=1:"Y",1:HLQ)   ;Appt Request
"RTN","IVMPTRN9",12,0)
 S X=$P(N101015,"^",11),$P(ZIOSEG,U,7)=$S(X]"":$$HLDATE^HLFNC(X),1:HLQ) ;Appt Request Date
"RTN","IVMPTRN9",13,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=ZIOSEG
"RTN","IVMPTRN9",14,0)
 ;
"RTN","IVMPTRN9",15,0)
 ; create (NTE) Notes and Comments segment
"RTN","IVMPTRN9",16,0)
 D NTE^IVMUFNC4(DFN,.IVMNTE,IVMMTDT)
"RTN","IVMPTRN9",17,0)
 I '$D(IVMNTE) D
"RTN","IVMPTRN9",18,0)
 . S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)="NTE^1"
"RTN","IVMPTRN9",19,0)
 I $D(IVMNTE) D
"RTN","IVMPTRN9",20,0)
 . ; - get notes and comments
"RTN","IVMPTRN9",21,0)
 . F IVMSUB=0:0 S IVMSUB=$O(IVMNTE(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN9",22,0)
 . . S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMNTE(IVMSUB)
"RTN","IVMPTRN9",23,0)
 ;
"RTN","IVMPTRN9",24,0)
 ; create (IN1) Insurance segment(s) for all active insurance
"RTN","IVMPTRN9",25,0)
 K ^TMP("VAFIN1",$J)
"RTN","IVMPTRN9",26,0)
 D EN^VAFHLIN1(DFN,"1,4,5,7,8,9,12,13,15,16,17,28,36")
"RTN","IVMPTRN9",27,0)
 F IVMSUB=0:0 S IVMSUB=$O(^TMP("VAFIN1",$J,IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN9",28,0)
 . S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=^TMP("VAFIN1",$J,+IVMSUB,0)
"RTN","IVMPTRN9",29,0)
 ;
"RTN","IVMPTRN9",30,0)
 ;find if the deletion flags were set in the IVM Patient file, and if so, should the deletion indicators be sent?
"RTN","IVMPTRN9",31,0)
 F I="RX","MT","HARDSHIP","DATE OF TEST","LTC" S DELETE(I)=""
"RTN","IVMPTRN9",32,0)
 S IVMPIEN=$$FIND^IVMPLOG(DFN,($E(IVMMTDT,1,3)-1))
"RTN","IVMPTRN9",33,0)
 I IVMPIEN D
"RTN","IVMPTRN9",34,0)
 . S IVMPNODE=$G(^IVM(301.5,IVMPIEN,0))
"RTN","IVMPTRN9",35,0)
 . I $P(IVMPNODE,"^",8)!$P(IVMPNODE,"^",9)!$P(IVMPNODE,"^",10)!$P(IVMPNODE,"^",11) S DELETE("SET")=1
"RTN","IVMPTRN9",36,0)
 . ;was the MT deletion flag set, and if so verify that there is no completed MT
"RTN","IVMPTRN9",37,0)
 . I $P(IVMPNODE,"^",8),(TESTTYPE'=1)!(TESTCODE="")!("ACGP"'[TESTCODE) S DELETE("DATE OF TEST")=$P(IVMPNODE,"^",8),DELETE("MT")=1
"RTN","IVMPTRN9",38,0)
 . ;
"RTN","IVMPTRN9",39,0)
 . ;was the hardship deletion flag set, and if so verify that there is no completed hardship
"RTN","IVMPTRN9",40,0)
 . I $P(IVMPNODE,"^",10),'HARDSHIP D
"RTN","IVMPTRN9",41,0)
 . . S:('DELETE("DATE OF TEST")) DELETE("DATE OF TEST")=$P(IVMPNODE,"^",10)
"RTN","IVMPTRN9",42,0)
 . . S DELETE("HARDSHIP")=1
"RTN","IVMPTRN9",43,0)
 ;
"RTN","IVMPTRN9",44,0)
 ; create (ZMT) Means Test segment 
"RTN","IVMPTRN9",45,0)
 ;
"RTN","IVMPTRN9",46,0)
 S SEQS=$S(TESTTYPE=1:"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,25,26,28,29,30",1:"1,17")
"RTN","IVMPTRN9",47,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^IVMCZMT(DFN,SEQS,IVMMTDT,1,1,.DELETE,1)
"RTN","IVMPTRN9",48,0)
 ;
"RTN","IVMPTRN9",49,0)
 ; create (ZMT) Rx-Copay Test segment
"RTN","IVMPTRN9",50,0)
 I IVMPIEN D
"RTN","IVMPTRN9",51,0)
 . ;was the RX deletion flag set, and if so verify that there is no completed test
"RTN","IVMPTRN9",52,0)
 . I $P(IVMPNODE,"^",9),(TESTTYPE'=2)!(TESTCODE="")!("EM"'[TESTCODE) S DELETE("DATE OF TEST")=$P(IVMPNODE,"^",9),DELETE("RX")=1
"RTN","IVMPTRN9",53,0)
 ;
"RTN","IVMPTRN9",54,0)
 N IVMCPDT,CPTST,LINK,CPDATE
"RTN","IVMPTRN9",55,0)
 ;should be ok to get the last co-pay test for this year vs. looking from the IVMMTDT backwards
"RTN","IVMPTRN9",56,0)
 ;as long as the means test date is in the current year
"RTN","IVMPTRN9",57,0)
 S CPTST=$$LST^DGMTU(DFN,$E(IVMIY,1,3)+1_1231,2)
"RTN","IVMPTRN9",58,0)
 I CPTST D
"RTN","IVMPTRN9",59,0)
 . S CPDATE=$P(CPTST,U,2)
"RTN","IVMPTRN9",60,0)
 . S LINK=$P($G(^DGMT(408.31,+CPTST,2)),U,6)
"RTN","IVMPTRN9",61,0)
 . I TESTTYPE=1,$E(CPDATE,1,3)=$E(IVMMTDT,1,3) D
"RTN","IVMPTRN9",62,0)
 . . ;if you have a means test and a linked co-pay test then send both (the means test
"RTN","IVMPTRN9",63,0)
 . . ;was already sent from above)
"RTN","IVMPTRN9",64,0)
 . . ;if means and copay are not linked, don't send the co-pay test (the means test
"RTN","IVMPTRN9",65,0)
 . . ;was already sent from above)
"RTN","IVMPTRN9",66,0)
 . . I LINK=+$$LST^DGMTU(DFN,IVMMTDT,1) S TESTTYPE=2,(IVMCPDT,IVMMTDT)=CPDATE
"RTN","IVMPTRN9",67,0)
 . . Q
"RTN","IVMPTRN9",68,0)
 . Q
"RTN","IVMPTRN9",69,0)
 ;always send the 2nd ZMT segment
"RTN","IVMPTRN9",70,0)
 S SEQS="1,17"
"RTN","IVMPTRN9",71,0)
 ;can also send a co-pay test if there is no means test (see module GETTYPE)
"RTN","IVMPTRN9",72,0)
 I TESTTYPE=2 D
"RTN","IVMPTRN9",73,0)
 . S SEQS="1,2,3,4,5,6,7,9,10,12,15,16,17,18,21,22,25,26,30"
"RTN","IVMPTRN9",74,0)
 . Q
"RTN","IVMPTRN9",75,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^IVMCZMT(DFN,SEQS,IVMMTDT,2,2,.DELETE,1)
"RTN","IVMPTRN9",76,0)
 ;
"RTN","IVMPTRN9",77,0)
 ; create (ZMT) Long Term Care Copay Exemption Test segment
"RTN","IVMPTRN9",78,0)
 I IVMPIEN D
"RTN","IVMPTRN9",79,0)
 . ; set deletion indicators if LTC test deletion should be transmitted
"RTN","IVMPTRN9",80,0)
 . I $P(IVMPNODE,"^",11) S DELETE("LTC")=1 S:('DELETE("DATE OF TEST")) DELETE("DATE OF TEST")=$P(IVMPNODE,"^",11)
"RTN","IVMPTRN9",81,0)
 ;
"RTN","IVMPTRN9",82,0)
 S SEQS="1,2,3,4,5,7,9,10,12,16,17,18,22,25,30"
"RTN","IVMPTRN9",83,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^IVMCZMT(DFN,SEQS,IVMMTDT,4,4,.DELETE,1)
"RTN","IVMPTRN9",84,0)
 ;
"RTN","IVMPTRN9",85,0)
 ;if the deletion flags were set in the IVM Patient file, unset them
"RTN","IVMPTRN9",86,0)
 I $G(DELETE("SET")) D
"RTN","IVMPTRN9",87,0)
 . N DATA
"RTN","IVMPTRN9",88,0)
 . S DATA(.08)="",DATA(.09)="",DATA(.1)="",DATA(.11)=""
"RTN","IVMPTRN9",89,0)
 . I $$UPD^DGENDBS(301.5,IVMPIEN,.DATA)
"RTN","IVMPTRN9",90,0)
 ;
"RTN","IVMPTRN9",91,0)
 ; create (ZBT) Beneficiary Travel segment based on last BT Claim
"RTN","IVMPTRN9",92,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZBT($$BTCLM^IVMUFNC4(DFN),"1,2,3,4,7")
"RTN","IVMPTRN9",93,0)
 ;
"RTN","IVMPTRN9",94,0)
 ; create (ZFE) Fee Basis segment(s)
"RTN","IVMPTRN9",95,0)
 D EN^FBHLZFE(DFN,"1,2,3,4,5")
"RTN","IVMPTRN9",96,0)
 F IVMSUB=0:0 S IVMSUB=+$O(FBZFE(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN9",97,0)
 . S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(FBZFE(+IVMSUB))
"RTN","IVMPTRN9",98,0)
 ;
"RTN","IVMPTRN9",99,0)
 ; create (ZSP) Service Period segment
"RTN","IVMPTRN9",100,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZSP(DFN,1,1)
"RTN","IVMPTRN9",101,0)
 ;
"RTN","IVMPTRN9",102,0)
 ; optionally create (OBX) segment for Patient Sensitivity Flag
"RTN","IVMPTRN9",103,0)
 K OBXTMP
"RTN","IVMPTRN9",104,0)
 S OBXCNT=0,GETCUR=$$FINDSEC^DGENSEC(DFN)
"RTN","IVMPTRN9",105,0)
 I GETCUR,$$GET^DGENSEC(GETCUR,.DGSEC) D
"RTN","IVMPTRN9",106,0)
 . Q:(DGSEC("LEVEL")'=1)&(DGSEC("LEVEL")'=0)
"RTN","IVMPTRN9",107,0)
 . S OBXTMP(2)="CE",OBXTMP(3)="38.1"_$E(HL("ECH"))_"SECURITY LOG"
"RTN","IVMPTRN9",108,0)
 . S:DGSEC("LEVEL") OBXTMP(5)="Y"_$E(HL("ECH"))_"YES"_$E(HL("ECH"))_"HL70136"
"RTN","IVMPTRN9",109,0)
 . S:'DGSEC("LEVEL") OBXTMP(5)="N"_$E(HL("ECH"))_"NO"_$E(HL("ECH"))_"HL70136"
"RTN","IVMPTRN9",110,0)
 . S OBXTMP(11)="R",OBXTMP(14)=DGSEC("DATETIME")
"RTN","IVMPTRN9",111,0)
 . S OBXTMP(16)="" I $G(DGSEC("SOURCE"))'="" D
"RTN","IVMPTRN9",112,0)
 . . S $P(OBXTMP(16),$E(HL("ECH")),14)=$E(HL("ECH"),4)_DGSEC("SOURCE")
"RTN","IVMPTRN9",113,0)
 . S IVMCT=IVMCT+1,OBXCNT=OBXCNT+1
"RTN","IVMPTRN9",114,0)
 . S ^TMP("HLS",$J,IVMCT)=$$EN^VAFHLOBX(.OBXTMP,OBXCNT,"2,3,5,11,14,16")
"RTN","IVMPTRN9",115,0)
 . I $G(OBXTMP(16))'="" S $P(^TMP("HLS",$J,IVMCT),"^",17)=$G(OBXTMP(16))
"RTN","IVMPTRN9",116,0)
 ;
"RTN","IVMPTRN9",117,0)
 ; create (OBX) segment for NTR
"RTN","IVMPTRN9",118,0)
 ; CALL PIMS API TO GET NTRARRY OF NTR DATA
"RTN","IVMPTRN9",119,0)
 S GETCUR=$$ENRGET^DGNTAPI1(DFN)
"RTN","IVMPTRN9",120,0)
 I GETCUR D NTROBX^IVMPTRNA(.DGNTARR)
"RTN","IVMPTRN9",121,0)
 I $D(NTROBX) D
"RTN","IVMPTRN9",122,0)
 . S IVMCT=IVMCT+1,OBXCNT=OBXCNT+1
"RTN","IVMPTRN9",123,0)
 . S ^TMP("HLS",$J,IVMCT)=$$EN^VAFHLOBX(.NTROBX,OBXCNT,"2,3,5,11,12,14,15,16,17")
"RTN","IVMPTRN9",124,0)
 . I $G(NTROBX(16))'="" S $P(^TMP("HLS",$J,IVMCT),"^",17)=$G(NTROBX(16))
"RTN","IVMPTRN9",125,0)
 . K NTROBX
"RTN","IVMPTRN9",126,0)
 ;
"RTN","IVMPTRN9",127,0)
 ; create (RF1) segment
"RTN","IVMPTRN9",128,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$RF1^IVMPTRNA(DFN,"SAD")
"RTN","IVMPTRN9",129,0)
 F RF1TYP="CAD","CPH","PNO","EAD" D   ;Create Optional RF1 Segments
"RTN","IVMPTRN9",130,0)
 . S RF1SEG=$$RF1^IVMPTRNA(DFN,RF1TYP) Q:RF1SEG=""
"RTN","IVMPTRN9",131,0)
 . S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=RF1SEG
"RTN","IVMPTRN9",132,0)
 ;
"RTN","IVMPTRN9",133,0)
 Q
"RTN","IVMPTRN9",134,0)
 ;
"RTN","IVMPTRN9",135,0)
GETTYPE(DFN,IVMMTDT,CODE,HARDSHIP,ACTVIEN)      ;
"RTN","IVMPTRN9",136,0)
 ;Determines the type of test to include in the Z10.  HEC wants only the
"RTN","IVMPTRN9",137,0)
 ;test that they would consider primary,i.e., preference given to a comptleted means test, even if not currently in effect.
"RTN","IVMPTRN9",138,0)
 ;
"RTN","IVMPTRN9",139,0)
 ;Input:
"RTN","IVMPTRN9",140,0)
 ;  DFN
"RTN","IVMPTRN9",141,0)
 ;  IVMMTDT -date to be the search for the test
"RTN","IVMPTRN9",142,0)
 ;Output:
"RTN","IVMPTRN9",143,0)
 ;  Function value - type of test to send in Z10
"RTN","IVMPTRN9",144,0)
 ;  CODE - status code of test (pass by reference)
"RTN","IVMPTRN9",145,0)
 ;  HARDSHIP - hardship indicator (pass by reference)
"RTN","IVMPTRN9",146,0)
 ;  ACTVIEN - ien of test that should have the associated Income Relations (pass by reference)
"RTN","IVMPTRN9",147,0)
 ;
"RTN","IVMPTRN9",148,0)
 N TESTTYPE,MTNODE,RXNODE,NODE0,NODE2
"RTN","IVMPTRN9",149,0)
 S TESTTYPE=1
"RTN","IVMPTRN9",150,0)
 S (HARDSHIP,CODE,ACTVIEN)=""
"RTN","IVMPTRN9",151,0)
 Q:'$G(IVMMTDT) TESTTYPE
"RTN","IVMPTRN9",152,0)
 Q:'$G(DFN) TESTTYPE
"RTN","IVMPTRN9",153,0)
 ;
"RTN","IVMPTRN9",154,0)
 S MTNODE=$$LST^DGMTU(DFN,IVMMTDT,1) I $E($P(MTNODE,"^",2),1,3)'=$E(IVMMTDT,1,3) S MTNODE=""
"RTN","IVMPTRN9",155,0)
 S RXNODE=$$LST^DGMTU(DFN,IVMMTDT,2) I $E($P(RXNODE,"^",2),1,3)'=$E(IVMMTDT,1,3) S RXNODE=""
"RTN","IVMPTRN9",156,0)
 ;
"RTN","IVMPTRN9",157,0)
 I MTNODE="" S MTNODE=$$FUT^DGMTU(DFN,"",1) I $E($P(MTNODE,"^",2),1,3)'=$E(IVMMTDT,1,3) S MTNODE=""
"RTN","IVMPTRN9",158,0)
 I RXNODE="" S RXNODE=$$FUT^DGMTU(DFN,"",2) I $E($P(RXNODE,"^",2),1,3)'=$E(IVMMTDT,1,3) S RXNODE=""
"RTN","IVMPTRN9",159,0)
 D
"RTN","IVMPTRN9",160,0)
 . ;determine which test has the associated income relations
"RTN","IVMPTRN9",161,0)
 . ;
"RTN","IVMPTRN9",162,0)
 . I +MTNODE S CODE=$P(MTNODE,"^",4) I CODE'="",("ACGPR"[CODE) S ACTVIEN=+MTNODE Q
"RTN","IVMPTRN9",163,0)
 . I +RXNODE S CODE=$P(RXNODE,"^",4) I CODE'="",("EMI"[CODE) S ACTVIEN=+RXNODE Q
"RTN","IVMPTRN9",164,0)
 . I +MTNODE S ACTVIEN=+MTNODE Q
"RTN","IVMPTRN9",165,0)
 . I +RXNODE S ACTVIEN=+RXNODE Q
"RTN","IVMPTRN9",166,0)
 I ACTVIEN,+MTNODE,+RXNODE D TRANSFER^DGMTU4(DFN,$S((ACTVIEN=+MTNODE):+RXNODE,1:+MTNODE),ACTVIEN)
"RTN","IVMPTRN9",167,0)
 ;
"RTN","IVMPTRN9",168,0)
 ;now find the primary test
"RTN","IVMPTRN9",169,0)
 I '(+MTNODE) G CHKCOPAY
"RTN","IVMPTRN9",170,0)
 S CODE=$P(MTNODE,"^",4)
"RTN","IVMPTRN9",171,0)
 S HARDSHIP=$P($G(^DGMT(408.31,+MTNODE,0)),"^",20)
"RTN","IVMPTRN9",172,0)
 I (CODE="")!("ACGP"'[CODE) S NODE2=$G(^DGMT(408.31,+MTNODE,2)),CODE=$$GETCODE^DGMTH($P(NODE2,"^",3)) I (CODE="")!("ACGP"'[CODE) G CHKCOPAY
"RTN","IVMPTRN9",173,0)
 ;
"RTN","IVMPTRN9",174,0)
 G QGETTYPE
"RTN","IVMPTRN9",175,0)
 ;
"RTN","IVMPTRN9",176,0)
CHKCOPAY        ;
"RTN","IVMPTRN9",177,0)
 I '(+RXNODE) G QGETTYPE
"RTN","IVMPTRN9",178,0)
 S CODE=$P(RXNODE,"^",4)
"RTN","IVMPTRN9",179,0)
 I (CODE="")!("EM"'[CODE) S NODE2=$G(^DGMT(408.31,+RXNODE,2)),CODE=$$GETCODE^DGMTH($P(NODE2,"^",3)) I (CODE="")!("EM"'[CODE) G QGETTYPE
"RTN","IVMPTRN9",180,0)
 S TESTTYPE=2
"RTN","IVMPTRN9",181,0)
 ;
"RTN","IVMPTRN9",182,0)
QGETTYPE        ;
"RTN","IVMPTRN9",183,0)
 Q TESTTYPE
"RTN","IVMPTRN9",184,0)
 ;
"RTN","IVMPTRN9",185,0)
FILTER(DFN)     ; address transmission filter
"RTN","IVMPTRN9",186,0)
 ; Check Bad Address Indicator for a known bad address and
"RTN","IVMPTRN9",187,0)
 ; Scrutinize the Street Address line 1 field for known bad address
"RTN","IVMPTRN9",188,0)
 ; strings based on functionality currently in place in HEC Legacy.
"RTN","IVMPTRN9",189,0)
 ;
"RTN","IVMPTRN9",190,0)
 ;  Input: DFN - ien of the Patient (#2) file
"RTN","IVMPTRN9",191,0)
 ; Output:   0 - filter passed (ok to transmit address)
"RTN","IVMPTRN9",192,0)
 ;           1 - filter failed (do not transmit address)
"RTN","IVMPTRN9",193,0)
 ;
"RTN","IVMPTRN9",194,0)
 N VAPA
"RTN","IVMPTRN9",195,0)
 Q:'$G(DFN) 1  ;DFN missing
"RTN","IVMPTRN9",196,0)
 Q:$$BADADR^DGUTL3(DFN) 1  ;check Bad Address Indicator
"RTN","IVMPTRN9",197,0)
 D ADD^VADPT  ;get patient address
"RTN","IVMPTRN9",198,0)
 ; Street Address Line 1 or Zip Code is <null>
"RTN","IVMPTRN9",199,0)
 Q:($G(VAPA(1))="")!($P($G(VAPA(11)),"^")="") 1
"RTN","IVMPTRN9",200,0)
 ; St Addr Line 1 contains 'UNKNOWN', 'HOMELESS', or 'ADDRESS'
"RTN","IVMPTRN9",201,0)
 Q:(VAPA(1)["UNKNOWN")!(VAPA(1)["HOMELESS")!(VAPA(1)["ADDRESS") 1
"RTN","IVMPTRN9",202,0)
 ; The first two characters of the address is equal to '**'
"RTN","IVMPTRN9",203,0)
 Q:$E(VAPA(1),1,2)="**" 1
"RTN","IVMPTRN9",204,0)
 ; passed all address filters - ok to send
"RTN","IVMPTRN9",205,0)
 Q 0
"RTN","IVMUFNC")
0^28^B48337126
"RTN","IVMUFNC",1,0)
IVMUFNC ;ALB/MLI/PHH/SCK,TDM - IVM GENERIC FUNCTIONS ; 6/30/08 4:11pm
"RTN","IVMUFNC",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**3,11,17,34,95,94,115**;21-OCT-94;Build 28
"RTN","IVMUFNC",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMUFNC",4,0)
 ;
"RTN","IVMUFNC",5,0)
 ; This routine contains generic calls for use throughout IVM
"RTN","IVMUFNC",6,0)
 ;
"RTN","IVMUFNC",7,0)
INIT(EID,HL,INT) ; initialize variables for 1.6 HL7/IVM
"RTN","IVMUFNC",8,0)
 S EID=$G(EID),INT=$G(INT)
"RTN","IVMUFNC",9,0)
 S HLDAP="IVM" D INIT^HLFNC2(EID,.HL,INT)
"RTN","IVMUFNC",10,0)
 S (HLEVN,IVMCT)=0 ; initialize segment and message counters
"RTN","IVMUFNC",11,0)
 ;;D NOW^%DTC S HLSDT=%
"RTN","IVMUFNC",12,0)
 Q
"RTN","IVMUFNC",13,0)
 ;
"RTN","IVMUFNC",14,0)
 ;
"RTN","IVMUFNC",15,0)
CLEAN ; clean-up variables for HL7/IVM (as defined by call to INIT)
"RTN","IVMUFNC",16,0)
 D KILL^HLTRANS
"RTN","IVMUFNC",17,0)
 K HLEVN,HLMTN,HLSDT,IVMCT
"RTN","IVMUFNC",18,0)
 Q
"RTN","IVMUFNC",19,0)
 ;
"RTN","IVMUFNC",20,0)
 ;
"RTN","IVMUFNC",21,0)
BATCH ; put BHS and BTS segments into TMP global
"RTN","IVMUFNC",22,0)
 ;
"RTN","IVMUFNC",23,0)
 ;  Input - HLMTN as HL7 message type being sent in this batch (REQUIRED)
"RTN","IVMUFNC",24,0)
 ;          HLEVN as number of HL7 messages in batch (REQUIRED)
"RTN","IVMUFNC",25,0)
 ;          IVMCT as subscript in TMP global where BTS segment goes (REQ)
"RTN","IVMUFNC",26,0)
 ;          HLSEC (optional) as security (see BHS^HLFNC1)
"RTN","IVMUFNC",27,0)
 ;          HLMSA (optional) as message ack variables (see BHS^HLFNC1)
"RTN","IVMUFNC",28,0)
 ;
"RTN","IVMUFNC",29,0)
 ;      ****Also assumes all HL7 variables returned from****
"RTN","IVMUFNC",30,0)
 ;          INIT^HLTRANS are defined
"RTN","IVMUFNC",31,0)
 ;
"RTN","IVMUFNC",32,0)
 Q  ; LINE ADDED FOR HL7 1.6
"RTN","IVMUFNC",33,0)
 S HLSEC=$G(HLSEC),HLMSA=$G(HLMSA)
"RTN","IVMUFNC",34,0)
 S ^TMP("HLS",$J,HLSDT,0)=$$BHS^HLFNC1(HLMTN,HLSEC,HLMSA)
"RTN","IVMUFNC",35,0)
 S ^TMP("HLS",$J,HLSDT,IVMCT)="BTS"_HLFS_HLEVN ; trailer
"RTN","IVMUFNC",36,0)
 Q
"RTN","IVMUFNC",37,0)
 ;
"RTN","IVMUFNC",38,0)
 ;
"RTN","IVMUFNC",39,0)
IVM(DFN,IVMDT) ; extrinsic function - should this pt be transmitted to IVM?
"RTN","IVMUFNC",40,0)
 ;
"RTN","IVMUFNC",41,0)
 ;  Input - DFN as internal entry number of PATIENT file
"RTN","IVMUFNC",42,0)
 ;          IVMDT as date of test (default DT)
"RTN","IVMUFNC",43,0)
 ;
"RTN","IVMUFNC",44,0)
 ; Output - 1 if pt should be sent to IVM, 0 otherwise
"RTN","IVMUFNC",45,0)
 ;
"RTN","IVMUFNC",46,0)
 N X,Y
"RTN","IVMUFNC",47,0)
 S DFN=$G(DFN) I '$D(^DPT(+DFN,0)) G IVMQ
"RTN","IVMUFNC",48,0)
 S IVMDT=$S($G(IVMDT):IVMDT,1:DT)
"RTN","IVMUFNC",49,0)
 S X=$$LST^DGMTU(DFN,IVMDT)
"RTN","IVMUFNC",50,0)
 I $E($P(X,"^",2),1,3)'=$E(IVMDT,1,3) K IVMDT G IVMQ ; not in same year
"RTN","IVMUFNC",51,0)
 S X=$G(^DGMT(408.31,+X,0)) I 'X G IVMQ ; can't find MT entry for date
"RTN","IVMUFNC",52,0)
 I $P(X,"^",3)=6 S:'$$INS(DFN,IVMDT) Y=1 G IVMQ ; C/no insurance...send
"RTN","IVMUFNC",53,0)
 I $P(X,"^",3)'=4 G IVMQ ; not cat A
"RTN","IVMUFNC",54,0)
 I ($P(X,"^",4)-$P(X,"^",15)>$P(X,"^",12))!$P(X,"^",10) G IVMQ ; income-deduct expenses>threshold (hardship) or adjudicated
"RTN","IVMUFNC",55,0)
 S Y=1
"RTN","IVMUFNC",56,0)
IVMQ Q +$G(Y)
"RTN","IVMUFNC",57,0)
 ;
"RTN","IVMUFNC",58,0)
 ;
"RTN","IVMUFNC",59,0)
INS(DFN,IVMDT) ; extrinsic function to see if pt has active insurance
"RTN","IVMUFNC",60,0)
 ;
"RTN","IVMUFNC",61,0)
 ;  Input - DFN as internal entry number of PATIENT file
"RTN","IVMUFNC",62,0)
 ;          IVMDT [optional] as date to compute ins coverage for
"RTN","IVMUFNC",63,0)
 ;
"RTN","IVMUFNC",64,0)
 ; Output - 1 if yes, 0 if no
"RTN","IVMUFNC",65,0)
 ;
"RTN","IVMUFNC",66,0)
 Q $S($$INSUR^IBBAPI(DFN,$G(IVMDT))=1:1,1:0)
"RTN","IVMUFNC",67,0)
 ;
"RTN","IVMUFNC",68,0)
 ;
"RTN","IVMUFNC",69,0)
MAIL(IVMGRP) ; Transmit to members of Mail Group. Before D MAIL^IVMUFNC()
"RTN","IVMUFNC",70,0)
 ; set XMSUB = to subject   and  set IVMTEXT array to message.
"RTN","IVMUFNC",71,0)
 ;
"RTN","IVMUFNC",72,0)
 ;Input:
"RTN","IVMUFNC",73,0)
 ;  IVMGRP - optional parameter, = to name of a mailgroup to send the
"RTN","IVMUFNC",74,0)
 ;           message to.  If not sent, the IVM Site Parameter file is
"RTN","IVMUFNC",75,0)
 ;           used to determine the mailgroup.
"RTN","IVMUFNC",76,0)
 ;
"RTN","IVMUFNC",77,0)
 N DIFROM,XMDUZ,XMTEXT,XMSTRIP,XMROU,XMY,XMZ,XMDF
"RTN","IVMUFNC",78,0)
 S XMDF=""
"RTN","IVMUFNC",79,0)
 S XMDUZ="IVM PACKAGE"
"RTN","IVMUFNC",80,0)
 S XMTEXT="IVMTEXT("
"RTN","IVMUFNC",81,0)
 I '$L($G(IVMGRP)) D
"RTN","IVMUFNC",82,0)
 .S IVMGRP=$P($G(^XMB(3.8,+$P($G(^IVM(301.9,1,0)),"^",2),0)),"^")
"RTN","IVMUFNC",83,0)
 S XMY("G."_IVMGRP_"@"_^XMB("NETNAME"))=""
"RTN","IVMUFNC",84,0)
 D ^XMD
"RTN","IVMUFNC",85,0)
 K IVMTEXT,XMDUZ,XMSUB,XMTEXT,XMY
"RTN","IVMUFNC",86,0)
 Q
"RTN","IVMUFNC",87,0)
 ;
"RTN","IVMUFNC",88,0)
 ;
"RTN","IVMUFNC",89,0)
LTD(DFN,IVMQUERY) ; Find Last Treatment Date
"RTN","IVMUFNC",90,0)
 ;  Input:       DFN -- pointer to the patient in file #2
"RTN","IVMUFNC",91,0)
 ;          IVMQUERY("LTD") -- # of the QUERY that is currently open or
"RTN","IVMUFNC",92,0)
 ;                      undefined, zero, or null if no QUERY opened for
"RTN","IVMUFNC",93,0)
 ;                      last treatment date
"RTN","IVMUFNC",94,0)
 ; Output:  LTD -- Last Treatment Date (really last date seen at
"RTN","IVMUFNC",95,0)
 ;                                      the facility)
"RTN","IVMUFNC",96,0)
 ;
"RTN","IVMUFNC",97,0)
 N LTD,SDSTOP,X,Z,IVMQ
"RTN","IVMUFNC",98,0)
 ;
"RTN","IVMUFNC",99,0)
 ; - need a patient
"RTN","IVMUFNC",100,0)
 S IVMQ=$G(IVMQUERY("LTD"))
"RTN","IVMUFNC",101,0)
 I '$G(DFN) S LTD=0 G LTDQ
"RTN","IVMUFNC",102,0)
 ;
"RTN","IVMUFNC",103,0)
 ; - if current inpatient, set LTD = today and quit
"RTN","IVMUFNC",104,0)
 I $G(^DPT(DFN,.105)) S LTD=DT G LTDQ
"RTN","IVMUFNC",105,0)
 ;
"RTN","IVMUFNC",106,0)
 ; - get the last discharge date
"RTN","IVMUFNC",107,0)
 S LTD=+$O(^DGPM("ATID3",DFN,"")) S:LTD LTD=9999999.9999999-LTD\1 S:LTD>DT LTD=DT
"RTN","IVMUFNC",108,0)
 ;
"RTN","IVMUFNC",109,0)
 ; - get the last registration date and compare to LTD
"RTN","IVMUFNC",110,0)
 S X=+$O(^DPT(DFN,"DIS",0)) I X S X=9999999-X\1 S:X>LTD LTD=X
"RTN","IVMUFNC",111,0)
 ;
"RTN","IVMUFNC",112,0)
 ; - get the last appointment or stop after LTD (if any)
"RTN","IVMUFNC",113,0)
 K ^TMP("DIERR",$J)
"RTN","IVMUFNC",114,0)
 I $G(IVMQ) D ACTIVE^SDQ(.IVMQ,"FALSE","SET") ;clear QUERY results
"RTN","IVMUFNC",115,0)
 I '$G(IVMQ) D
"RTN","IVMUFNC",116,0)
 .D OPEN^SDQ(.IVMQ) Q:'$G(IVMQ)
"RTN","IVMUFNC",117,0)
 .D INDEX^SDQ(.IVMQ,"PATIENT/DATE","SET")
"RTN","IVMUFNC",118,0)
 .D SCANCB^SDQ(.IVMQ,"I $S($P(SDOE0,U,8)=2:1,$P(SDOE0,U,8)=1:$$APPT^IVMUFNC(SDOE0),1:0) S LTD=SDOE0\1,SDSTOP=1","SET")
"RTN","IVMUFNC",119,0)
 .S IVMQUERY("LTD")=IVMQ
"RTN","IVMUFNC",120,0)
 ;
"RTN","IVMUFNC",121,0)
 D PAT^SDQ(.IVMQ,DFN,"SET")
"RTN","IVMUFNC",122,0)
 D DATE^SDQ(.IVMQ,LTD+.000001,9999999,"SET")
"RTN","IVMUFNC",123,0)
 D ACTIVE^SDQ(.IVMQ,"TRUE","SET")
"RTN","IVMUFNC",124,0)
 D SCAN^SDQ(.IVMQ,"BACKWARD")
"RTN","IVMUFNC",125,0)
 K ^TMP("DIERR",$J)
"RTN","IVMUFNC",126,0)
 ;
"RTN","IVMUFNC",127,0)
LTDQ ;
"RTN","IVMUFNC",128,0)
 Q $S(LTD:$$HLDATE^HLFNC(LTD),1:HLQ)
"RTN","IVMUFNC",129,0)
 ;
"RTN","IVMUFNC",130,0)
APPT(SDOE0) ;Determine if appt associated with encounter is in a valid state
"RTN","IVMUFNC",131,0)
 ; Quit when Outpatient Encounter STATUS is CHECKED OUT
"RTN","IVMUFNC",132,0)
 Q:$P(SDOE0,U,12)=2 1
"RTN","IVMUFNC",133,0)
 ; Quit when Outpatient Encounter STATUS is ACTION REQUIRED and the
"RTN","IVMUFNC",134,0)
 ; Appointment Status is SCHEDULED/KEPT
"RTN","IVMUFNC",135,0)
 N DGARRAY,SDCNT,SDSTAT,SDDTTM S DGARRAY("FLDS")=3,DGARRAY(4)=+$P(SDOE0,U,2)
"RTN","IVMUFNC",136,0)
 S DGARRAY(1)=$P(SDOE0,U),DGARRAY("SORT")="P",DGARRAY("MAX")=1
"RTN","IVMUFNC",137,0)
 S SDCNT=$$SDAPI^SDAMA301(.DGARRAY),SDSTAT=""
"RTN","IVMUFNC",138,0)
 I SDCNT>0 D
"RTN","IVMUFNC",139,0)
 .S SDDTTM=$O(^TMP($J,"SDAMA301",DGARRAY(4),0))
"RTN","IVMUFNC",140,0)
 .I SDDTTM S SDSTAT=$P($P($G(^TMP($J,"SDAMA301",DGARRAY(4),SDDTTM)),U,3),";")
"RTN","IVMUFNC",141,0)
 K ^TMP($J,"SDAMA301")
"RTN","IVMUFNC",142,0)
 Q:(($P(SDOE0,U,12)=14)&(SDSTAT="R")) 1
"RTN","IVMUFNC",143,0)
 Q 0
"RTN","IVMUFNC",144,0)
 ;
"RTN","IVMUFNC",145,0)
OUTTR(IVMINT,IVMPAR,IVMST) ; - Transform IVMINT to a displayable value
"RTN","IVMUFNC",146,0)
 ;  Input:   IVMINT  --  internal value of demographic element
"RTN","IVMUFNC",147,0)
 ;                       received from IVM
"RTN","IVMUFNC",148,0)
 ;           IVMPAR  --  Zeroth node of the entry in file #301.92
"RTN","IVMUFNC",149,0)
 ;                       for the demographic element IVMINT
"RTN","IVMUFNC",150,0)
 ;            IVMST  --  [optional] pointer to the STATE (#5) file
"RTN","IVMUFNC",151,0)
 ;                       Required to transform the county code
"RTN","IVMUFNC",152,0)
 ;  Output:  IVMOUT  --  Displayable value for IVMINT
"RTN","IVMUFNC",153,0)
 ;
"RTN","IVMUFNC",154,0)
 N IVMOUT,Z S IVMOUT=IVMINT
"RTN","IVMUFNC",155,0)
 I $G(IVMINT)=""!($G(IVMPAR)="") S IVMOUT="" G OUTTRQ
"RTN","IVMUFNC",156,0)
 ;
"RTN","IVMUFNC",157,0)
 ; - use special transform for county
"RTN","IVMUFNC",158,0)
 I $G(IVMST),$P(IVMPAR,"^",2)="PID12" S IVMOUT=$P($G(^DIC(5,IVMST,1,IVMINT,0)),"^")
"RTN","IVMUFNC",159,0)
 ;
"RTN","IVMUFNC",160,0)
 ; - transform the internal value if necessary
"RTN","IVMUFNC",161,0)
 I $P(IVMPAR,"^",6) S IVMOUT=$$EXPAND($P(IVMPAR,"^",4),$P(IVMPAR,"^",5),IVMINT)
"RTN","IVMUFNC",162,0)
 ;
"RTN","IVMUFNC",163,0)
OUTTRQ Q IVMOUT
"RTN","IVMUFNC",164,0)
 ;
"RTN","IVMUFNC",165,0)
 ;
"RTN","IVMUFNC",166,0)
EXPAND(FILE,FIELD,VALUE) ; - returns internal data in an output format
"RTN","IVMUFNC",167,0)
 N Y,C S Y=VALUE
"RTN","IVMUFNC",168,0)
 I 'FILE!('FIELD)!(VALUE="") G EXPQ
"RTN","IVMUFNC",169,0)
 S Y=VALUE,C=$P(^DD(FILE,FIELD,0),"^",2) D Y^DIQ
"RTN","IVMUFNC",170,0)
EXPQ Q Y
"RTN","IVMUFNC",171,0)
 ;
"RTN","IVMUFNC",172,0)
 ;
"RTN","IVMUFNC",173,0)
GETPAT(DFN,IVMPAT) ;
"RTN","IVMUFNC",174,0)
 ; Description: Used to obtain identifying information for a patient
"RTN","IVMUFNC",175,0)
 ; in the PATIENT file and place it in the IVMPAT() array.
"RTN","IVMUFNC",176,0)
 ;
"RTN","IVMUFNC",177,0)
 ;  Input:
"RTN","IVMUFNC",178,0)
 ;   DFN - ien of patient in PATIENT file
"RTN","IVMUFNC",179,0)
 ;
"RTN","IVMUFNC",180,0)
 ; Output:
"RTN","IVMUFNC",181,0)
 ;  Function Value - 1 on success, 0 on failure
"RTN","IVMUFNC",182,0)
 ;   IVMPAT - (pass by reference) On success, this array will contain
"RTN","IVMUFNC",183,0)
 ;    the patient identifing information. Array subscripts are:
"RTN","IVMUFNC",184,0)
 ;      "DFN"  - ien PATIENT file
"RTN","IVMUFNC",185,0)
 ;      "NAME" - patient name
"RTN","IVMUFNC",186,0)
 ;      "SSN"  - patient Social Security Number
"RTN","IVMUFNC",187,0)
 ;      "DOB"  - patient date of birth (FM format)
"RTN","IVMUFNC",188,0)
 ;      "SEX"  - patient sex
"RTN","IVMUFNC",189,0)
 ;      "ICN"  - patient ICN
"RTN","IVMUFNC",190,0)
 ;
"RTN","IVMUFNC",191,0)
 N IVMNODE
"RTN","IVMUFNC",192,0)
 Q:'$G(DFN) 0
"RTN","IVMUFNC",193,0)
 K IVMPAT S IVMPAT=""
"RTN","IVMUFNC",194,0)
 ;
"RTN","IVMUFNC",195,0)
 ; obtain patient record
"RTN","IVMUFNC",196,0)
 S IVMNODE=$G(^DPT(DFN,0))
"RTN","IVMUFNC",197,0)
 Q:IVMNODE="" 0
"RTN","IVMUFNC",198,0)
 ;
"RTN","IVMUFNC",199,0)
 S IVMPAT("DFN")=DFN
"RTN","IVMUFNC",200,0)
 S IVMPAT("NAME")=$P(IVMNODE,"^")
"RTN","IVMUFNC",201,0)
 S IVMPAT("SEX")=$P(IVMNODE,"^",2)
"RTN","IVMUFNC",202,0)
 S IVMPAT("DOB")=$P(IVMNODE,"^",3)
"RTN","IVMUFNC",203,0)
 S IVMPAT("SSN")=$P(IVMNODE,"^",9)
"RTN","IVMUFNC",204,0)
 S IVMPAT("ICN")=$$GETICN^MPIF001(DFN)
"RTN","IVMUFNC",205,0)
 Q 1
"RTN","IVMUFNC",206,0)
 ;
"RTN","IVMUFNC",207,0)
LOOKUP(SSN,DOB,SEX,ERROR) ;
"RTN","IVMUFNC",208,0)
 ;Description: This function will do a search for the patient based on
"RTN","IVMUFNC",209,0)
 ;the identifying information provided. The function will be successful
"RTN","IVMUFNC",210,0)
 ;only if a single patient is found matching the identifiers provided.
"RTN","IVMUFNC",211,0)
 ;
"RTN","IVMUFNC",212,0)
 ;Inputs:
"RTN","IVMUFNC",213,0)
 ;  SSN - patient Social Security Number
"RTN","IVMUFNC",214,0)
 ;  DOB - patient date of birth (FM format)
"RTN","IVMUFNC",215,0)
 ;  SEX - patient sex
"RTN","IVMUFNC",216,0)
 ;Outputs:
"RTN","IVMUFNC",217,0)
 ;  Function Value - patient DFN if successful, 0 otherwise
"RTN","IVMUFNC",218,0)
 ;  ERROR - if unsuccessful, an error message is returned (optional, pass by reference)
"RTN","IVMUFNC",219,0)
 ;
"RTN","IVMUFNC",220,0)
 N DFN,NODE
"RTN","IVMUFNC",221,0)
 ;
"RTN","IVMUFNC",222,0)
 I $G(SSN)="" S ERROR="INVALID SSN" Q 0
"RTN","IVMUFNC",223,0)
 S DFN=$O(^DPT("SSN",SSN,0))
"RTN","IVMUFNC",224,0)
 I 'DFN S ERROR="SSN NOT FOUND" Q 0
"RTN","IVMUFNC",225,0)
 I $O(^DPT("SSN",SSN,DFN)) S ERROR="MULTIPLE PATIENTS MATCHING SSN" Q 0
"RTN","IVMUFNC",226,0)
 S NODE=$G(^DPT(DFN,0))
"RTN","IVMUFNC",227,0)
 I $P(NODE,"^",2)'=SEX S ERROR="SEX DOES NOT MATCH" Q 0
"RTN","IVMUFNC",228,0)
 I $E($P(NODE,"^",3),1,3)'=$E(DOB,1,3) S ERROR="DOB DOES NOT MATCH" Q 0
"RTN","IVMUFNC",229,0)
 I $E($P(NODE,"^",3),4,5),$E($P(NODE,"^",3),4,5)'=$E(DOB,4,5) S ERROR="DOB DOES NOT MATCH" Q 0
"RTN","IVMUFNC",230,0)
 Q DFN
"RTN","IVMUFNC",231,0)
 ;
"RTN","IVMUFNC",232,0)
MATCH(DFN,ICN,DOB,SEX,CFLG,ERROR) ;
"RTN","IVMUFNC",233,0)
 ;Description: This function will try to match the patient based on
"RTN","IVMUFNC",234,0)
 ;the identifying information provided. The function will be
"RTN","IVMUFNC",235,0)
 ;successful only if the patient is found matching the identifiers
"RTN","IVMUFNC",236,0)
 ;provided.
"RTN","IVMUFNC",237,0)
 ;
"RTN","IVMUFNC",238,0)
 ;Inputs:
"RTN","IVMUFNC",239,0)
 ;  DFN  - patient DFN
"RTN","IVMUFNC",240,0)
 ;  ICN  - patient ICN
"RTN","IVMUFNC",241,0)
 ;  DOB  - patient date of birth (FM format)
"RTN","IVMUFNC",242,0)
 ;  SEX  - patient sex
"RTN","IVMUFNC",243,0)
 ;  CFLG - Compare Flag (Default="IDS", I=ICN, D=DOB, S=Sex)
"RTN","IVMUFNC",244,0)
 ;Outputs:
"RTN","IVMUFNC",245,0)
 ;  Function Value: 1 - patient matched successfully, 0 - otherwise
"RTN","IVMUFNC",246,0)
 ;  ERROR - if unsuccessful, an error message is returned (optional, pass by reference)
"RTN","IVMUFNC",247,0)
 N NODE
"RTN","IVMUFNC",248,0)
 I $G(DFN)="" S ERROR="INVALID DFN" Q 0
"RTN","IVMUFNC",249,0)
 I $G(CFLG)="" S CFLG="IDS"
"RTN","IVMUFNC",250,0)
 S NODE=$G(^DPT(DFN,0)) I NODE="" S ERROR="DFN NOT FOUND" Q 0
"RTN","IVMUFNC",251,0)
 I CFLG["I",$$GETICN^MPIF001(DFN)'=$G(ICN) S ERROR="ICN DOES NOT MATCH" Q 0
"RTN","IVMUFNC",252,0)
 I CFLG["S",$P(NODE,"^",2)'=$G(SEX) S ERROR="SEX DOES NOT MATCH" Q 0
"RTN","IVMUFNC",253,0)
 I CFLG["D",$E($P(NODE,"^",3),1,3)'=$E($G(DOB),1,3) S ERROR="DOB DOES NOT MATCH" Q 0
"RTN","IVMUFNC",254,0)
 I CFLG["D",$E($P(NODE,"^",3),4,5),$E($P(NODE,"^",3),4,5)'=$E($G(DOB),4,5) S ERROR="DOB DOES NOT MATCH" Q 0
"RTN","IVMUFNC",255,0)
 Q 1
"RTN","IVMUFNC",256,0)
PARSPID3(PID3,PID3ARY) ;
"RTN","IVMUFNC",257,0)
 ;Description: This function will parse seq 3 of PID segment
"RTN","IVMUFNC",258,0)
 ;Input :   PID3  -  Array for seq. 3 of PID segment
"RTN","IVMUFNC",259,0)
 ;Output:   PID3ARY("NI") -  Value - ICN
"RTN","IVMUFNC",260,0)
 ;          PID3ARY("PI") -  Value - DFN
"RTN","IVMUFNC",261,0)
 I $D(PID3(3)) D
"RTN","IVMUFNC",262,0)
 .I $O(PID3(3,"")) D  Q
"RTN","IVMUFNC",263,0)
 ..S COMP=0 F  S COMP=$O(PID3(3,COMP)) Q:COMP=""  D
"RTN","IVMUFNC",264,0)
 ...I $P(PID3(3,COMP),$E(HLECH),5)="PI" S PID3ARY("PI")=$P(PID3(3,COMP),$E(HLECH))
"RTN","IVMUFNC",265,0)
 ...I $P(PID3(3,COMP),$E(HLECH),5)="NI" S PID3ARY("NI")=$P(PID3(3,COMP),$E(HLECH))
"RTN","IVMUFNC",266,0)
 .I $P(PID3(3),$E(HLECH),5)="PI" S PID3ARY("PI")=$P(PID3(3),$E(HLECH))
"RTN","IVMUFNC",267,0)
 Q
"RTN","IVMUM4")
0^6^B4479688
"RTN","IVMUM4",1,0)
IVMUM4 ;ALB/SEK - ADD NEW INDIVIDUAL ANNUAL INCOME FILE ENTRIES ; 19 MAY 94
"RTN","IVMUM4",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**1,8,17,115**;21-OCT-94;Build 28
"RTN","IVMUM4",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMUM4",4,0)
 ;
"RTN","IVMUM4",5,0)
EN ; this routine will add entries to INDIVIDUAL ANNUAL INCOME file
"RTN","IVMUM4",6,0)
 ; (408.21)
"RTN","IVMUM4",7,0)
 ; 
"RTN","IVMUM4",8,0)
 ; * A reference to this code in Vista was not discovered.  This may be dead code!
"RTN","IVMUM4",9,0)
 ; *   IVM*2*115 updated EN1 so that Version 1 means test data returned on ZIC
"RTN","IVMUM4",10,0)
 ; *   segments in a Z06 message will be processed for dependent children, if that
"RTN","IVMUM4",11,0)
 ; *   information is ever added to Vista Z06 messages.  Additionally, the code remains
"RTN","IVMUM4",12,0)
 ; *   in case analysis of Vista missed any reference to this routine.
"RTN","IVMUM4",13,0)
 ;
"RTN","IVMUM4",14,0)
 ; DFN    Patient file IEN
"RTN","IVMUM4",15,0)
 ; DGPRI  Patient Relation IEN
"RTN","IVMUM4",16,0)
 ; DGLY      Last Year
"RTN","IVMUM4",17,0)
 ; DGINI     New Individual Annual Income IEN
"RTN","IVMUM4",18,0)
 ; IVMSEG    ZIC record for veteran or spouse or dependent
"RTN","IVMUM4",19,0)
 ; IVMMTIEN  Means Test IEN (#408.31)
"RTN","IVMUM4",20,0)
 ; IVM0      408.21 0 node pieces 8-18
"RTN","IVMUM4",21,0)
 ; IVM1             1 node pieces 1-3
"RTN","IVMUM4",22,0)
 ; IVM2             2 node pieces 1-5
"RTN","IVMUM4",23,0)
 ;
"RTN","IVMUM4",24,0)
 N IVM0,IVM1,IVM2,IVMC
"RTN","IVMUM4",25,0)
 S DGINI=$$ADDIN^DGMTU2(DFN,DGPRI,DGLY)
"RTN","IVMUM4",26,0)
 ;
"RTN","IVMUM4",27,0)
 ; if can't create stub notify site & IVM Center
"RTN","IVMUM4",28,0)
 I DGINI'>0 D  Q
"RTN","IVMUM4",29,0)
 . S (IVMTEXT(6),HLERR)="Can't create stub for file 408.21"
"RTN","IVMUM4",30,0)
 . D ERRBULL^IVMPREC7,MAIL^IVMUFNC()
"RTN","IVMUM4",31,0)
 . S IVMFERR=""
"RTN","IVMUM4",32,0)
 ;
"RTN","IVMUM4",33,0)
EN1 ; add 1 node for vet & child
"RTN","IVMUM4",34,0)
 ; add 2 node for vet, spouse & (when VR 1) child
"RTN","IVMUM4",35,0)
 F IVMC=3:1:12 S:$P(IVMSEG,"^",IVMC)=HLQ $P(IVMSEG,"^",IVMC)=""
"RTN","IVMUM4",36,0)
 S IVM0=$P(IVMSEG,"^",3,12)
"RTN","IVMUM4",37,0)
 I IVMSPCHV'="S" F IVMC=13:1:15 S:$P(IVMSEG,"^",IVMC)=HLQ $P(IVMSEG,"^",IVMC)=""
"RTN","IVMUM4",38,0)
 I IVMSPCHV'="S" S IVM1=$P(IVMSEG,"^",13,15)
"RTN","IVMUM4",39,0)
 ;IVM*2.0*115
"RTN","IVMUM4",40,0)
 L +^DGMT(408.21,DGINI) S $P(^DGMT(408.21,DGINI,0),"^",8,17)=IVM0,DA=DGINI S:IVMSPCHV'="S" ^(1)=IVM1
"RTN","IVMUM4",41,0)
 N MTVERS
"RTN","IVMUM4",42,0)
 S MTVERS=$S(+$G(IVMMTIEN):+$P($G(^DGMT(408.31,$G(IVMMTIEN),2)),"^",11),1:0)
"RTN","IVMUM4",43,0)
 I +$G(MTVERS)=0 D
"RTN","IVMUM4",44,0)
 . I IVMSPCHV'="C" F IVMC=16:1:20 S:$P(IVMSEG,"^",IVMC)=HLQ $P(IVMSEG,"^",IVMC)=""
"RTN","IVMUM4",45,0)
 . I IVMSPCHV'="C" S IVM2=$P(IVMSEG,"^",16,20)
"RTN","IVMUM4",46,0)
 . S:IVMSPCHV'="C" ^DGMT(408.21,DGINI,2)=IVM2
"RTN","IVMUM4",47,0)
 E  D
"RTN","IVMUM4",48,0)
 . F IVMC=16,18,19 S:$P(IVMSEG,"^",IVMC)=HLQ $P(IVMSEG,"^",IVMC)=""
"RTN","IVMUM4",49,0)
 . S IVM2=$P(IVMSEG,"^",16)_"^^"_$P(IVMSEG,"^",18,19)
"RTN","IVMUM4",50,0)
 . S ^DGMT(408.21,DGINI,2)=IVM2
"RTN","IVMUM4",51,0)
 S DIK="^DGMT(408.21,"
"RTN","IVMUM4",52,0)
 D IX1^DIK L -^DGMT(408.21,DGINI)
"RTN","IVMUM4",53,0)
 K DA,DIK
"RTN","IVMUM4",54,0)
 Q
"RTN","IVMUM6")
0^7^B22728422
"RTN","IVMUM6",1,0)
IVMUM6 ;ALB/SEK - COMPLETE MEANS TEST ; 23 MAY 94
"RTN","IVMUM6",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**1,3,17,115**;21-OCT-94;Build 28
"RTN","IVMUM6",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMUM6",4,0)
 ;
"RTN","IVMUM6",5,0)
EN ; this routine will call MAS routines to determine the following:
"RTN","IVMUM6",6,0)
 ;        total dependents
"RTN","IVMUM6",7,0)
 ;        income
"RTN","IVMUM6",8,0)
 ;        net worth
"RTN","IVMUM6",9,0)
 ;        deductible expenses
"RTN","IVMUM6",10,0)
 ;        thresholds
"RTN","IVMUM6",11,0)
 ;        category
"RTN","IVMUM6",12,0)
 ;
"RTN","IVMUM6",13,0)
 ; the above will be added in the ANNUAL MEANS TEST file(#408.31)
"RTN","IVMUM6",14,0)
 ;
"RTN","IVMUM6",15,0)
 ; s dgcomf=1 to indicate completing means test which will update
"RTN","IVMUM6",16,0)
 ; means test ien (field 31) in individual annual income file (408.21)
"RTN","IVMUM6",17,0)
 ; when called SET^DGMTSCU2
"RTN","IVMUM6",18,0)
 S DGCOMF=1
"RTN","IVMUM6",19,0)
 ;
"RTN","IVMUM6",20,0)
 ; get DGMTPAR - annual means test parameters 0 node from ^DG(43,1,"MT"
"RTN","IVMUM6",21,0)
 ; if current year parameters are not available DGMTPAR will contain
"RTN","IVMUM6",22,0)
 ; previous year income parameters and DGMTPAR("PREV") will be defined
"RTN","IVMUM6",23,0)
 ; indicating such.
"RTN","IVMUM6",24,0)
 D PAR^DGMTSCU
"RTN","IVMUM6",25,0)
 ;
"RTN","IVMUM6",26,0)
 ; d set^dgmtscu2 will create the following variables to update
"RTN","IVMUM6",27,0)
 ; annual means test file (408.31):
"RTN","IVMUM6",28,0)
 ;      dgmts - means test status(.03)
"RTN","IVMUM6",29,0)
 ;      dgint - income(.04)
"RTN","IVMUM6",30,0)
 ;      dgnwt - net worth(.05)
"RTN","IVMUM6",31,0)
 ;      dgtha - threshold a(.12)
"RTN","IVMUM6",32,0)
 ;      dgthb - threshold b(.13)
"RTN","IVMUM6",33,0)
 ;      dgdet - deductible expenses(.15)
"RTN","IVMUM6",34,0)
 ;      dgmtpar("prev") - previous years threshold(.16)  (if defined)
"RTN","IVMUM6",35,0)
 ;      dgnd  - total dependents(.18)
"RTN","IVMUM6",36,0)
 ;      
"RTN","IVMUM6",37,0)
 D SET^DGMTSCU2
"RTN","IVMUM6",38,0)
 ;
"RTN","IVMUM6",39,0)
 ; setup other variables for 408.31
"RTN","IVMUM6",40,0)
 S IVMDA1=IVMDAZ D GET^IVMUM1 ; get ZMT segment
"RTN","IVMUM6",41,0)
 S IVM1=$$FMDATE^HLFNC($P(IVMSEG,"^",10)) ; dt/time completed
"RTN","IVMUM6",42,0)
 S IVM2=$P(IVMSEG,"^",7) ; agree to pay deductible
"RTN","IVMUM6",43,0)
 S IVM3=$$FMDATE^HLFNC($P(IVMSEG,"^",15)) ; dt verified test sign
"RTN","IVMUM6",44,0)
 S IVM4=$P(IVMSEG,"^",16) ; declines to give income info field
"RTN","IVMUM6",45,0)
 S IVM5=$$FMDATE^HLFNC($P(IVMSEG,"^",6)) ; dt/time of adjudication
"RTN","IVMUM6",46,0)
 S IVM6=$$FMDATE^HLFNC($P(IVMSEG,"^",20)) ; dt ivm verified mt completed
"RTN","IVMUM6",47,0)
 S IVM7=$P(IVMSEG,"^",21) ; refuse to sign
"RTN","IVMUM6",48,0)
 S IVMSTAT=$P(IVMSEG,"^",3) ; means test status
"RTN","IVMUM6",49,0)
 S IVM8=+$P(IVMSEG,"^",30) ; Means Test Version
"RTN","IVMUM6",50,0)
 ;
"RTN","IVMUM6",51,0)
 I IVM4 S DGCAT="C" D STA^DGMTSCU2 ; make cat C if declines to give income info
"RTN","IVMUM6",52,0)
 ;
"RTN","IVMUM6",53,0)
 I DGTYC="M",(DGNWT+DGINT-DGDET)>$P(DGMTPAR,"^",8) S DGCAT="C" D STA^DGMTSCU2 ; if cat A for income make cat C if high assets
"RTN","IVMUM6",54,0)
 ;
"RTN","IVMUM6",55,0)
 ; add to annual means test file
"RTN","IVMUM6",56,0)
 S:'$D(DGTHB) DGTHB=""
"RTN","IVMUM6",57,0)
 S DA=DGMTI,DIE="^DGMT(408.31,"
"RTN","IVMUM6",58,0)
 S DR=".03////^S X=DGMTS;.04////^S X=DGINT;.05////^S X=DGNWT;.06////^S X=DUZ;.07////^S X=IVM1;.11////^S X=IVM2"
"RTN","IVMUM6",59,0)
 S DR=DR_";.12////^S X=DGTHA;.13////^S X=DGTHB;.14////^S X=IVM4;.15////^S X=DGDET;.18////^S X=DGND;.23////2;.24////^S X=IVM3;2.11////^S X=IVM8"
"RTN","IVMUM6",60,0)
 I $D(DGMTPAR("PREV")) S DR=DR_";.16////1"
"RTN","IVMUM6",61,0)
 D ^DIE K DR
"RTN","IVMUM6",62,0)
 S DR=".1////^S X=IVM5;.25////^S X=IVM6;.26////^S X=IVM7"
"RTN","IVMUM6",63,0)
 D ^DIE K DA,DIE,DR
"RTN","IVMUM6",64,0)
 ;
"RTN","IVMUM6",65,0)
 ; if ivm mt cat diff then calculated cat or still cat a ack msg is
"RTN","IVMUM6",66,0)
 ; sent to ivm center
"RTN","IVMUM6",67,0)
 ; dgcat (mt cat) is also created by d set^dgmtscu2
"RTN","IVMUM6",68,0)
 I IVMSTAT'=DGCAT D  G MTDRIVER
"RTN","IVMUM6",69,0)
 . S HLERR="Uploaded mt cat should be "_DGCAT
"RTN","IVMUM6",70,0)
 I DGCAT="A" D
"RTN","IVMUM6",71,0)
 . S HLERR="Uploaded mt cat is still A"
"RTN","IVMUM6",72,0)
 ;
"RTN","IVMUM6",73,0)
MTDRIVER ; call means test event driver
"RTN","IVMUM6",74,0)
 S DGMTACT="UPL"
"RTN","IVMUM6",75,0)
 D AFTER^DGMTEVT
"RTN","IVMUM6",76,0)
 S DGMTINF=1 ; non-interactive flag
"RTN","IVMUM6",77,0)
 D EN^DGMTEVT
"RTN","IVMUM6",78,0)
 ;
"RTN","IVMUM6",79,0)
 ; close IVM case record for patient
"RTN","IVMUM6",80,0)
 D CLOSE^IVMPTRN1(DGLY,DFN,1,1)
"RTN","IVMUM6",81,0)
 ;
"RTN","IVMUM6",82,0)
 ; Get copay exemption status (IVMCEA) and means test status (IVMMTA
"RTN","IVMUM6",83,0)
 ; after upload.  If different from before upload and send notification
"RTN","IVMUM6",84,0)
 ; mail message to the site.  Also, send notification mail message if
"RTN","IVMUM6",85,0)
 ; patient doesn't agree to pay deductible.
"RTN","IVMUM6",86,0)
 S IVMCNTR=10
"RTN","IVMUM6",87,0)
 S IVMCEA=$P($$RXST^IBARXEU(DFN),"^",2)
"RTN","IVMUM6",88,0)
 I IVMCEA'=IVMCEB D
"RTN","IVMUM6",89,0)
 . S IVMTEXT(10)=""
"RTN","IVMUM6",90,0)
 . S IVMTEXT(11)="The patient is now "_IVMCEA_" from the prescription copayment."
"RTN","IVMUM6",91,0)
 . S IVMCNTR=12
"RTN","IVMUM6",92,0)
 S IVMMTA=$P($$LST^DGMTU(DFN),"^",3)
"RTN","IVMUM6",93,0)
 I IVMMTA'=IVMMTB D
"RTN","IVMUM6",94,0)
 . S IVMTEXT(IVMCNTR)=""
"RTN","IVMUM6",95,0)
 . S IVMTEXT(IVMCNTR+1)="The patient's current Means Test status is now "_IVMMTA_"."
"RTN","IVMUM6",96,0)
 . S IVMCNTR=IVMCNTR+2
"RTN","IVMUM6",97,0)
 I 'IVM2 D
"RTN","IVMUM6",98,0)
 . S IVMTEXT(IVMCNTR)=""
"RTN","IVMUM6",99,0)
 . I IVM2=0 D  Q
"RTN","IVMUM6",100,0)
 . . S IVMTEXT(IVMCNTR+1)="The patient is CATEGORY C and doesn't agree to pay the deductible."
"RTN","IVMUM6",101,0)
 . S IVMTEXT(IVMCNTR+1)="The patient is CATEGORY C and didn't answer agree to pay the deductible."
"RTN","IVMUM6",102,0)
 D MTBULL,MAIL^IVMUFNC()
"RTN","IVMUM6",103,0)
 ;
"RTN","IVMUM6",104,0)
 ; cleanup
"RTN","IVMUM6",105,0)
 K DGCAT,DGCOMF,DGMTACT,DGMTI,DGMTINF,DGMTPAR,DGTHB
"RTN","IVMUM6",106,0)
 K IVM1,IVM2,IVM3,IVM4,IVM5,IVM6,IVM7,IVMCEA,IVMCEB,IVMMTA,IVM8
"RTN","IVMUM6",107,0)
 Q
"RTN","IVMUM6",108,0)
 ;
"RTN","IVMUM6",109,0)
MTBULL ; build mail message for transmission to IVM mail group notifying them
"RTN","IVMUM6",110,0)
 ; an IVM verified means test has been uploaded into DHCP for a patient.
"RTN","IVMUM6",111,0)
 ;
"RTN","IVMUM6",112,0)
 S IVMPAT=$$PT^IVMUFNC4(DFN)
"RTN","IVMUM6",113,0)
 S XMSUB="IVM - MEANS TEST UPLOAD for "_$P($P(IVMPAT,"^"),",")_" ("_$P(IVMPAT,"^",3)_")"
"RTN","IVMUM6",114,0)
 S IVMTEXT(1)="An Income Verification Match verified Means Test has been uploaded"
"RTN","IVMUM6",115,0)
 S IVMTEXT(2)="for the following patient:"
"RTN","IVMUM6",116,0)
 S IVMTEXT(3)=" "
"RTN","IVMUM6",117,0)
 S IVMTEXT(4)="  NAME:           "_$P(IVMPAT,"^")
"RTN","IVMUM6",118,0)
 S IVMTEXT(5)="  ID:             "_$P(IVMPAT,"^",2)
"RTN","IVMUM6",119,0)
 S Y=IVMMTDT X ^DD("DD")
"RTN","IVMUM6",120,0)
 S IVMTEXT(6)="  DATE OF TEST:   "_Y
"RTN","IVMUM6",121,0)
 S IVMTEXT(7)="  PREV CATEGORY:  "_$P($G(^DG(408.32,+$P(IVMMT31,"^",3),0)),"^",2)
"RTN","IVMUM6",122,0)
 S IVMTEXT(8)="  NEW CATEGORY:   "_DGCAT
"RTN","IVMUM6",123,0)
 I IVM5 S Y=IVM5 X ^DD("DD") S IVMTEXT(9)="  DATE/TIME OF ADJUDICATION:  "_Y
"RTN","IVMUM6",124,0)
 Q
"RTN","IVMZ7CD")
0^33^B17483086
"RTN","IVMZ7CD",1,0)
IVMZ7CD ;CKN,BAJ,ERC - HL7 Z07 CONSISTENCY CHECKER -- DEMOGRAPHIC SUBROUTINE ; 8/1/08 1:54pm
"RTN","IVMZ7CD",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**105,127,132,115**;OCT 21,1994;Build 28
"RTN","IVMZ7CD",3,0)
 ;
"RTN","IVMZ7CD",4,0)
 ; Demographic Consistency Checks
"RTN","IVMZ7CD",5,0)
 ; This routine will be called from driver routine and it checks the
"RTN","IVMZ7CD",6,0)
 ; various elements of Person demographic information prior to
"RTN","IVMZ7CD",7,0)
 ; building a Z07 record. Any test which fails consistency check will
"RTN","IVMZ7CD",8,0)
 ; be saved in file 38.6 INCONSISTENT DATA ELEMENT record for Person.
"RTN","IVMZ7CD",9,0)
 ;
"RTN","IVMZ7CD",10,0)
 Q
"RTN","IVMZ7CD",11,0)
 ;
"RTN","IVMZ7CD",12,0)
EN(DFN,DGP,DGSD) ;Entry point
"RTN","IVMZ7CD",13,0)
 ;  input:  DFN - Patient IEN
"RTN","IVMZ7CD",14,0)
 ;          DGP - Patient data array
"RTN","IVMZ7CD",15,0)
 ;         DGSD - Spouse and Dependent data array
"RTN","IVMZ7CD",16,0)
 ; output: ^TMP($J,DFN,RULE) global
"RTN","IVMZ7CD",17,0)
 ;          DFN - Patient IEN
"RTN","IVMZ7CD",18,0)
 ;         RULE - Consistency rule #
"RTN","IVMZ7CD",19,0)
 ;initializing variables
"RTN","IVMZ7CD",20,0)
 N RULE,Y,X,FILERR
"RTN","IVMZ7CD",21,0)
 ;
"RTN","IVMZ7CD",22,0)
 ; loop through rules in INCONSISTENT DATA ELEMENTS file.
"RTN","IVMZ7CD",23,0)
 ; execute only the rules where CHECK/DON'T CHECK and INCLUDE IN Z07
"RTN","IVMZ7CD",24,0)
 ; CHECKS fields are turned ON.
"RTN","IVMZ7CD",25,0)
 ; 
"RTN","IVMZ7CD",26,0)
 ; ***NOTE loop boundary (301-311) must be changed if rule numbers
"RTN","IVMZ7CD",27,0)
 ; are added ***
"RTN","IVMZ7CD",28,0)
 F RULE=301:1:312 I $D(^DGIN(38.6,RULE)) D
"RTN","IVMZ7CD",29,0)
 . S Y=^DGIN(38.6,RULE,0)
"RTN","IVMZ7CD",30,0)
 . I $P(Y,"^",6) D @RULE
"RTN","IVMZ7CD",31,0)
 I $D(FILERR) M ^TMP($J,DFN)=FILERR
"RTN","IVMZ7CD",32,0)
 Q
"RTN","IVMZ7CD",33,0)
 ;
"RTN","IVMZ7CD",34,0)
301 ; PERSON LASTNAME REQUIRED
"RTN","IVMZ7CD",35,0)
 S X=$P($G(DGP("NAME",1)),U) I X="" S FILERR(RULE)=""
"RTN","IVMZ7CD",36,0)
 I '$D(DGSD("DEP")) Q
"RTN","IVMZ7CD",37,0)
 S RIEN=0 F  S RIEN=$O(DGSD("DEP",RIEN)) Q:RIEN=""  D
"RTN","IVMZ7CD",38,0)
 . S X=$P(DGSD("DEP",RIEN,0),U)
"RTN","IVMZ7CD",39,0)
 . S X=$P(X,",") I X="" S FILERR(RULE)=""
"RTN","IVMZ7CD",40,0)
 Q
"RTN","IVMZ7CD",41,0)
 ;
"RTN","IVMZ7CD",42,0)
302 ; DATE OF BIRTH REQUIRED - Duplicate with #4
"RTN","IVMZ7CD",43,0)
 Q  ;This tag needs to be removed after its placement in IVMZ7CR
"RTN","IVMZ7CD",44,0)
 S X=$P($G(DGP("PAT",0)),U,3) I X="" S FILERR(RULE)=""
"RTN","IVMZ7CD",45,0)
 I '$D(DGSD("DEP")) Q
"RTN","IVMZ7CD",46,0)
 S RIEN=0 F  S RIEN=$O(DGSD("DEP",RIEN)) Q:RIEN=""  D
"RTN","IVMZ7CD",47,0)
 . S X=$P(DGSD("DEP",RIEN,0),U,3) I X="" S FILERR(RULE)=""
"RTN","IVMZ7CD",48,0)
 Q
"RTN","IVMZ7CD",49,0)
 ;
"RTN","IVMZ7CD",50,0)
303 ; GENDER REQUIRED
"RTN","IVMZ7CD",51,0)
 S X=$P($G(DGP("PAT",0)),U,2) I X="" S FILERR(RULE)=""
"RTN","IVMZ7CD",52,0)
 I '$D(DGSD("DEP")) Q
"RTN","IVMZ7CD",53,0)
 S RIEN=0 F  S RIEN=$O(DGSD("DEP",RIEN)) Q:RIEN=""  D
"RTN","IVMZ7CD",54,0)
 . S X=$P(DGSD("DEP",RIEN,0),U,2) I X="" S FILERR(RULE)=""
"RTN","IVMZ7CD",55,0)
 Q
"RTN","IVMZ7CD",56,0)
 ;
"RTN","IVMZ7CD",57,0)
304 ; GENDER INVALID
"RTN","IVMZ7CD",58,0)
 S X=$P($G(DGP("PAT",0)),U,2) I X]"",X'="M",X'="F" S FILERR(RULE)=""
"RTN","IVMZ7CD",59,0)
 I '$D(DGSD("DEP")) Q
"RTN","IVMZ7CD",60,0)
 S RIEN=0 F  S RIEN=$O(DGSD("DEP",RIEN)) Q:RIEN=""  D
"RTN","IVMZ7CD",61,0)
 . S X=$P(DGSD("DEP",RIEN,0),U,2)
"RTN","IVMZ7CD",62,0)
 . I X]"",X'="M",X'="F" S FILERR(RULE)=""
"RTN","IVMZ7CD",63,0)
 Q
"RTN","IVMZ7CD",64,0)
 ;
"RTN","IVMZ7CD",65,0)
305 ; VETERAN SSN MISSING - Duplicate with #7
"RTN","IVMZ7CD",66,0)
 Q  ;This tag needs to be removed after its placement in IVMZ7CR
"RTN","IVMZ7CD",67,0)
 S X=$P($G(DGP("PAT",0)),U,9) I X="" S FILERR(RULE)=""
"RTN","IVMZ7CD",68,0)
 Q
"RTN","IVMZ7CD",69,0)
 ;
"RTN","IVMZ7CD",70,0)
306 ; VALID SSN/PSEUDO SSN REQUIRED, turned off with DG*5.3*771
"RTN","IVMZ7CD",71,0)
 N Z
"RTN","IVMZ7CD",72,0)
 S X=$P($G(DGP("PAT",0)),U,9)
"RTN","IVMZ7CD",73,0)
 Q:X=""  ;quit if no SSN
"RTN","IVMZ7CD",74,0)
 Q:$E(X,$L(X))="P"       ;quit if SSN is a Pseudo
"RTN","IVMZ7CD",75,0)
 I $E(X,1,5)="00000" S FILERR(RULE)="" ;First 5 number are zero
"RTN","IVMZ7CD",76,0)
 S $P(Z,$E(X),9)=$E(X) I X=Z S FILERR(RULE)="" ;all numbers are same
"RTN","IVMZ7CD",77,0)
 I $E(X,1,3)="000" S FILERR(RULE)="" ;First 3 digits are zeros
"RTN","IVMZ7CD",78,0)
 I $E(X,4,5)="00" S FILERR(RULE)="" ;4th & 5th are zeros
"RTN","IVMZ7CD",79,0)
 I $E(X,6,9)="0000" S FILERR(RULE)="" ;Last 4 digits are zeros
"RTN","IVMZ7CD",80,0)
 I X=123456789 S FILERR(RULE)="" ;SSN is 123456789
"RTN","IVMZ7CD",81,0)
 Q
"RTN","IVMZ7CD",82,0)
 ;
"RTN","IVMZ7CD",83,0)
307 ; PSEUDO SSN REASON REQUIRED, turned off with DG*5.3*771
"RTN","IVMZ7CD",84,0)
 S X=$P($G(DGP("PAT",0)),U,9)
"RTN","IVMZ7CD",85,0)
 I X]"",X["P",$P($G(DGP("PAT","SSN")),U)="" S FILERR(RULE)=""
"RTN","IVMZ7CD",86,0)
 I '$D(DGSD("DEP")) Q
"RTN","IVMZ7CD",87,0)
 S RIEN=0 F  S RIEN=$O(DGSD("DEP",RIEN)) Q:RIEN=""  D
"RTN","IVMZ7CD",88,0)
 . S X=$P(DGSD("DEP",RIEN,0),U,9)
"RTN","IVMZ7CD",89,0)
 . I X]"",X["P",$P(DGSD("DEP",RIEN,0),U,10)="" S FILERR(RULE)=""
"RTN","IVMZ7CD",90,0)
 Q
"RTN","IVMZ7CD",91,0)
 ;
"RTN","IVMZ7CD",92,0)
308 ; DATE OF DEATH BEFORE DOB
"RTN","IVMZ7CD",93,0)
 S X=$P($G(DGP("PAT",.35)),U) I X']"" Q
"RTN","IVMZ7CD",94,0)
 I X<$P($G(DGP("PAT",0)),U,3) S FILERR(RULE)=""
"RTN","IVMZ7CD",95,0)
 Q
"RTN","IVMZ7CD",96,0)
 ;
"RTN","IVMZ7CD",97,0)
309 ; PATIENT RELATIONSHIP INVALID
"RTN","IVMZ7CD",98,0)
 N DEPSEX,RELSEX,DEPREL
"RTN","IVMZ7CD",99,0)
 I '$D(DGSD("DEP")) Q
"RTN","IVMZ7CD",100,0)
 S RIEN=0 F  S RIEN=$O(DGSD("DEP",RIEN)) Q:RIEN=""  D
"RTN","IVMZ7CD",101,0)
 . S DEPREL=$G(DGSD("DEP",RIEN))
"RTN","IVMZ7CD",102,0)
 . I DEPREL="" S FILERR(RULE)="" Q
"RTN","IVMZ7CD",103,0)
 . I '$D(^DG(408.11,DEPREL)) S FILERR(RULE)="" Q
"RTN","IVMZ7CD",104,0)
 . S DEPSEX=$P(DGSD("DEP",RIEN,0),U,2)
"RTN","IVMZ7CD",105,0)
 . S RELSEX=$P(^DG(408.11,DEPREL,0),U,3)
"RTN","IVMZ7CD",106,0)
 . I RELSEX="E" Q  ;Gender for relation can be either
"RTN","IVMZ7CD",107,0)
 . I DEPSEX'=RELSEX S FILERR(RULE)=""
"RTN","IVMZ7CD",108,0)
 Q
"RTN","IVMZ7CD",109,0)
 ;
"RTN","IVMZ7CD",110,0)
310 ; DEPENDENT EFF. DATE REQUIRED
"RTN","IVMZ7CD",111,0)
 I '$D(DGSD("DEP")) Q
"RTN","IVMZ7CD",112,0)
 S RIEN=0 F  S RIEN=$O(DGSD("DEP",RIEN)) Q:RIEN=""  D
"RTN","IVMZ7CD",113,0)
 . S X=$G(DGSD("DEP",RIEN,"EFF")) I 'X S FILERR(RULE)=""
"RTN","IVMZ7CD",114,0)
 Q
"RTN","IVMZ7CD",115,0)
 ;
"RTN","IVMZ7CD",116,0)
311 ; DATE OF DEATH IS FUTURE DATE - Duplicate with #16
"RTN","IVMZ7CD",117,0)
 Q  ;This tag needs to be removed after its placement in IVMZ7CR
"RTN","IVMZ7CD",118,0)
 S X=$P($G(DGP("PAT",.35)),U)
"RTN","IVMZ7CD",119,0)
 I X]"",X>$$NOW^XLFDT() S FILERR(RULE)=""
"RTN","IVMZ7CD",120,0)
 Q
"RTN","IVMZ7CD",121,0)
 ;
"RTN","IVMZ7CD",122,0)
312 ; PERSON MUST HAVE NATIONAL ICN
"RTN","IVMZ7CD",123,0)
 I $$GETICN^MPIF001(DFN)<0 S FILERR(RULE)="" Q  ;No ICN
"RTN","IVMZ7CD",124,0)
 I $$IFLOCAL^MPIF001(DFN)=1 S FILERR(RULE)=""  ;Not National ICN
"RTN","IVMZ7CD",125,0)
 Q
"RTN","IVMZ7CD",126,0)
 ;
"RTN","IVMZ7CS")
0^32^B9219399
"RTN","IVMZ7CS",1,0)
IVMZ7CS ;TDM,ERC - HL7 Z07 CONSISTENCY CHECKER -- SERVICE SUBROUTINE ; 8/1/08 1:54pm
"RTN","IVMZ7CS",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**105,132,115**;OCT 21,1994;Build 28
"RTN","IVMZ7CS",3,0)
 ;
"RTN","IVMZ7CS",4,0)
 ; Service Consistency Checks
"RTN","IVMZ7CS",5,0)
 ; This routine checks the various elements of service information
"RTN","IVMZ7CS",6,0)
 ; prior to building a Z07 record.  Any tests which fail consistency
"RTN","IVMZ7CS",7,0)
 ; check will be saved to the ^DGIN(38.6 record for the patient.
"RTN","IVMZ7CS",8,0)
 ;
"RTN","IVMZ7CS",9,0)
 ; Must be called from entry point
"RTN","IVMZ7CS",10,0)
 Q
"RTN","IVMZ7CS",11,0)
 ;
"RTN","IVMZ7CS",12,0)
EN(DFN,DGP) ; entry point.  Patient DFN is sent from calling routine.
"RTN","IVMZ7CS",13,0)
 ; initialize working variables
"RTN","IVMZ7CS",14,0)
 N RULE,Y,X,FILERR
"RTN","IVMZ7CS",15,0)
 ;
"RTN","IVMZ7CS",16,0)
 ; loop through rules in INCONSISTENT DATA ELEMENTS file.
"RTN","IVMZ7CS",17,0)
 ; execute only the rules where CHECK/DON'T CHECK and INCLUDE IN Z07
"RTN","IVMZ7CS",18,0)
 ; CHECKS fields are turned ON.
"RTN","IVMZ7CS",19,0)
 ;
"RTN","IVMZ7CS",20,0)
 ; ***NOTE loop boundary (501-517) must be changed if rule numbers
"RTN","IVMZ7CS",21,0)
 ; are added ***
"RTN","IVMZ7CS",22,0)
 F RULE=501:1:517 I $D(^DGIN(38.6,RULE)) D
"RTN","IVMZ7CS",23,0)
 . S Y=^DGIN(38.6,RULE,0)
"RTN","IVMZ7CS",24,0)
 . I $P(Y,U,6) D @RULE
"RTN","IVMZ7CS",25,0)
 I $D(FILERR) M ^TMP($J,DFN)=FILERR
"RTN","IVMZ7CS",26,0)
 Q
"RTN","IVMZ7CS",27,0)
 ;
"RTN","IVMZ7CS",28,0)
501 ; POW STATUS INVALID
"RTN","IVMZ7CS",29,0)
 S X=$P(DGP("PAT",.52),U,5) I (X'="")&(X'="Y")&(X'="N")&(X'="U") S FILERR(RULE)=""
"RTN","IVMZ7CS",30,0)
 Q
"RTN","IVMZ7CS",31,0)
 ;
"RTN","IVMZ7CS",32,0)
502 ; MIL DIS RETIREMENT INVALID
"RTN","IVMZ7CS",33,0)
 S X=$P(DGP("PAT",.36),U,12) I (X'="")&(X'=0)&(X'=1) S FILERR(RULE)=""
"RTN","IVMZ7CS",34,0)
 Q
"RTN","IVMZ7CS",35,0)
 ;
"RTN","IVMZ7CS",36,0)
503 ; DISCHARGE DUE TO DISAB INVALID
"RTN","IVMZ7CS",37,0)
 S X=$P(DGP("PAT",.36),U,13) I (X'="")&(X'=0)&(X'=1) S FILERR(RULE)=""
"RTN","IVMZ7CS",38,0)
 Q
"RTN","IVMZ7CS",39,0)
 ;
"RTN","IVMZ7CS",40,0)
504 ; AGENT ORANGE EXPOSURE INVALID
"RTN","IVMZ7CS",41,0)
 S X=$P(DGP("PAT",.321),U,2) I (X'="")&(X'="Y")&(X'="N")&(X'="U") S FILERR(RULE)=""
"RTN","IVMZ7CS",42,0)
 Q
"RTN","IVMZ7CS",43,0)
 ;
"RTN","IVMZ7CS",44,0)
505 ; RADIATION EXPOSURE INVALID
"RTN","IVMZ7CS",45,0)
 S X=$P(DGP("PAT",.321),U,3) I (X'="")&(X'="Y")&(X'="N")&(X'="U") S FILERR(RULE)=""
"RTN","IVMZ7CS",46,0)
 Q
"RTN","IVMZ7CS",47,0)
 ;
"RTN","IVMZ7CS",48,0)
506 ; SW ASIA CONDITIONS INVALID (Name changed from Env Con. DG*5.3*688)
"RTN","IVMZ7CS",49,0)
 S X=$P(DGP("PAT",.322),U,13) I (X'="")&(X'="Y")&(X'="N")&(X'="U") S FILERR(RULE)=""
"RTN","IVMZ7CS",50,0)
 Q
"RTN","IVMZ7CS",51,0)
 ;
"RTN","IVMZ7CS",52,0)
507 ; RAD EXPOSURE METHOD INVALID
"RTN","IVMZ7CS",53,0)
 I $P(DGP("PAT",.321),U,3)="Y" S X=$P(DGP("PAT",.321),U,12) I X'?1N!(X<2)!(X>7) S FILERR(RULE)=""
"RTN","IVMZ7CS",54,0)
 Q
"RTN","IVMZ7CS",55,0)
 ;
"RTN","IVMZ7CS",56,0)
508 ; MST STATUS INVALID
"RTN","IVMZ7CS",57,0)
 S X=$P($G(DGP("MST",0)),U,3) I (X'="")&(X'="Y")&(X'="N")&(X'="D")&(X'="U") S FILERR(RULE)=""
"RTN","IVMZ7CS",58,0)
 Q
"RTN","IVMZ7CS",59,0)
 ;
"RTN","IVMZ7CS",60,0)
509 ; MST STATUS CHANGE DATE MISSING
"RTN","IVMZ7CS",61,0)
 S X=$P($G(DGP("MST",0)),U,3) I ((X="Y")!(X="N")!(X="D")!(X="U")),$P(DGP("MST",0),U)<1 S FILERR(RULE)=""
"RTN","IVMZ7CS",62,0)
 Q
"RTN","IVMZ7CS",63,0)
 ;
"RTN","IVMZ7CS",64,0)
510 ; MST STATUS SITE REQUIRED
"RTN","IVMZ7CS",65,0)
 S X=$P($G(DGP("MST",0)),U,3) I ((X="Y")!(X="N")!(X="D")!(X="U")),$P(DGP("MST",0),U,6)="" S FILERR(RULE)=""
"RTN","IVMZ7CS",66,0)
 Q
"RTN","IVMZ7CS",67,0)
 ;
"RTN","IVMZ7CS",68,0)
511 ; MST STATUS SITE INVALID
"RTN","IVMZ7CS",69,0)
 S X=$P($G(DGP("MST",0)),U,6) I X'="",'$$TF^XUAF4(X) S FILERR(RULE)=""
"RTN","IVMZ7CS",70,0)
 Q
"RTN","IVMZ7CS",71,0)
 ;
"RTN","IVMZ7CS",72,0)
512 ; AO EXPOSURE LOCATION MISSING
"RTN","IVMZ7CS",73,0)
 ; Note: RULE #60 in IVMZ7CR is a duplicate of this rule
"RTN","IVMZ7CS",74,0)
 Q
"RTN","IVMZ7CS",75,0)
 ;
"RTN","IVMZ7CS",76,0)
513 ; MS ENTRY DATE REQUIRED
"RTN","IVMZ7CS",77,0)
 ; Note: RULE #72 in IVMZ7CR is a duplicate of this rule
"RTN","IVMZ7CS",78,0)
 Q
"RTN","IVMZ7CS",79,0)
 ;
"RTN","IVMZ7CS",80,0)
514 ; MS SEPARATION DATE REQUIRED
"RTN","IVMZ7CS",81,0)
 ; Note: RULE #72 in IVMZ7CR is a duplicate of this rule
"RTN","IVMZ7CS",82,0)
 Q
"RTN","IVMZ7CS",83,0)
 ;
"RTN","IVMZ7CS",84,0)
515 ; CONFLICT FROM/TO DATE REQUIRED
"RTN","IVMZ7CS",85,0)
 ; Note: RULE #74 in IVMZ7CR is a duplicate of this rule
"RTN","IVMZ7CS",86,0)
 Q
"RTN","IVMZ7CS",87,0)
 ;
"RTN","IVMZ7CS",88,0)
516 ; DOB INVALID-MEXICAN BORDER WAR
"RTN","IVMZ7CS",89,0)
 N MBW
"RTN","IVMZ7CS",90,0)
 I $D(^DPT(DFN,"E")) D
"RTN","IVMZ7CS",91,0)
 . S MBW=$O(^DIC(8,"B","MEXICAN BORDER WAR","")) Q:MBW=""
"RTN","IVMZ7CS",92,0)
 . S X=0 F  S X=$O(^DPT(DFN,"E",X)) Q:(X<1)!$D(FILERR(RULE))  D
"RTN","IVMZ7CS",93,0)
 . . I $P(^DPT(DFN,"E",X,0),U)=MBW,$P(DGP("PAT",0),U,3)>2061231 S FILERR(RULE)=""
"RTN","IVMZ7CS",94,0)
 Q
"RTN","IVMZ7CS",95,0)
 ;
"RTN","IVMZ7CS",96,0)
517 ; DOB INVALID-WORLD WAR I
"RTN","IVMZ7CS",97,0)
 N WWI
"RTN","IVMZ7CS",98,0)
 I $D(^DPT(DFN,"E")) D
"RTN","IVMZ7CS",99,0)
 . S WWI=$O(^DIC(8,"B","WORLD WAR I","")) Q:WWI=""
"RTN","IVMZ7CS",100,0)
 . S X=0 F  S X=$O(^DPT(DFN,"E",X)) Q:(X<1)!$D(FILERR(RULE))  D
"RTN","IVMZ7CS",101,0)
 . . I $P(^DPT(DFN,"E",X,0),U)=WWI,$P(DGP("PAT",0),U,3)>2071231 S FILERR(RULE)=""
"RTN","IVMZ7CS",102,0)
 Q
"RTN","IVMZ7CS",103,0)
YM(X) ; Returns whether date has year & month values: 1=yes, 0=no
"RTN","IVMZ7CS",104,0)
 Q ($E(X,1,3)>0)&($E(X,4,5)>0)
"RTN","IVMZ7CS",105,0)
 ;
"RTN","IVMZ7CS",106,0)
YY(X) ; Returns whether date has year a value: 1=yes, 0=no
"RTN","IVMZ7CS",107,0)
 Q ($E(X,1,3)>0)
"VER")
8.0^22.0
"^DD",301.7,301.7,15,0)
PRIOR PROVINCE^F^^1;12^K:$L(X)>20!($L(X)<1) X
"^DD",301.7,301.7,15,3)
Enter the patients prior province [1-20 characters].
"^DD",301.7,301.7,15,21,0)
^^2^2^3051212^
"^DD",301.7,301.7,15,21,1,0)
Enter the province [1-20 characters] to this
"^DD",301.7,301.7,15,21,2,0)
patient's prior place of residence.
"^DD",301.7,301.7,15,"DT")
3051212
"^DD",301.7,301.7,16,0)
PRIOR POSTAL CODE^F^^1;13^K:$L(X)>10!($L(X)<1) X
"^DD",301.7,301.7,16,3)
Enter the patients prior postal code [1-10 characters].
"^DD",301.7,301.7,16,21,0)
^^2^2^3051212^
"^DD",301.7,301.7,16,21,1,0)
Enter the postal code [1-10 characters] to this
"^DD",301.7,301.7,16,21,2,0)
patient's prior place of residence.
"^DD",301.7,301.7,16,"DT")
3051212
"^DD",301.7,301.7,17,0)
PRIOR COUNTRY^P779.004'^HL(779.004,^1;14^Q
"^DD",301.7,301.7,17,21,0)
^.001^1^1^3060712^^
"^DD",301.7,301.7,17,21,1,0)
This field will hold the value of Country in the prior address.
"^DD",301.7,301.7,17,"DT")
3060712
"^DD",301.7,301.7,18,0)
PRIOR BAD ADDRESS INDICATOR^S^1:UNDELIVERABLE;2:HOMELESS;3:OTHER;4:ADDRESS NOT FOUND;^1;15^Q
"^DD",301.7,301.7,18,3)
Please enter valid prior Bad Address Indicator.
"^DD",301.7,301.7,18,21,0)
^.001^1^1^3060407^^
"^DD",301.7,301.7,18,21,1,0)
This field will hold the prior Bad Address Indicator.
"^DD",301.7,301.7,18,"DT")
3060407
"^DD",301.7,301.7,19,0)
PRIOR STREET ADDRESS [LINE 3]^FX^^2;1^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>30!($L(X)<3) X
"^DD",301.7,301.7,19,3)
If necessary, enter a third line of this applicant's street address [3-30 characters].
"^DD",301.7,301.7,19,21,0)
^.001^2^2^3060711^^^
"^DD",301.7,301.7,19,21,1,0)
Enter the third line of this applicant's residence street address [3-30 characters]
"^DD",301.7,301.7,19,21,2,0)
if the space provided in 'street address' and 'street address 2' was not sufficient.
"^DD",301.7,301.7,19,"DT")
3060711
**INSTALL NAME**
EAS*1.0*70
"BLD",7092,0)
EAS*1.0*70^ENROLLMENT APPLICATION SYSTEM^0^3090219^y
"BLD",7092,1,0)
^^1^1^3051214^
"BLD",7092,1,1,0)
MEANS TEST - EVC RELEASE 2
"BLD",7092,4,0)
^9.64PA^^0
"BLD",7092,6.3)
26
"BLD",7092,"ABPKG")
n
"BLD",7092,"INIT")
EN^EAS1070P
"BLD",7092,"KRN",0)
^9.67PA^8989.52^19
"BLD",7092,"KRN",.4,0)
.4
"BLD",7092,"KRN",.401,0)
.401
"BLD",7092,"KRN",.402,0)
.402
"BLD",7092,"KRN",.403,0)
.403
"BLD",7092,"KRN",.5,0)
.5
"BLD",7092,"KRN",.84,0)
.84
"BLD",7092,"KRN",3.6,0)
3.6
"BLD",7092,"KRN",3.8,0)
3.8
"BLD",7092,"KRN",9.2,0)
9.2
"BLD",7092,"KRN",9.8,0)
9.8
"BLD",7092,"KRN",9.8,"NM",0)
^9.68A^32^32
"BLD",7092,"KRN",9.8,"NM",1,0)
EASEZDD^^0^B27307767
"BLD",7092,"KRN",9.8,"NM",2,0)
EASEZP64^^0^B28984285
"BLD",7092,"KRN",9.8,"NM",3,0)
EASEZPDG^^0^B70833329
"BLD",7092,"KRN",9.8,"NM",4,0)
EASEZPV2^^0^B45192091
"BLD",7092,"KRN",9.8,"NM",5,0)
EASEZRP3^^0^B28501959
"BLD",7092,"KRN",9.8,"NM",6,0)
EASEZDD2^^0^B51504841
"BLD",7092,"KRN",9.8,"NM",7,0)
EASEZPDU^^0^B41165544
"BLD",7092,"KRN",9.8,"NM",8,0)
EASEZU5^^0^B63580924
"BLD",7092,"KRN",9.8,"NM",9,0)
EASAILK1^^0^B47986143
"BLD",7092,"KRN",9.8,"NM",10,0)
EASMTL6A^^0^B28863409
"BLD",7092,"KRN",9.8,"NM",11,0)
EASEZI^^0^B24333225
"BLD",7092,"KRN",9.8,"NM",12,0)
EASEZU4^^0^B25484390
"BLD",7092,"KRN",9.8,"NM",13,0)
EASEZC2^^0^B39659618
"BLD",7092,"KRN",9.8,"NM",14,0)
EASEZF4^^0^B20930014
"BLD",7092,"KRN",9.8,"NM",15,0)
EASEZF2^^0^B71188851
"BLD",7092,"KRN",9.8,"NM",16,0)
EASEZU2^^0^B37042049
"BLD",7092,"KRN",9.8,"NM",17,0)
EASEZI1^^0^B17803840
"BLD",7092,"KRN",9.8,"NM",18,0)
EAS1070P^^0^B34050108
"BLD",7092,"KRN",9.8,"NM",19,0)
EASECSC1^^0^B30903966
"BLD",7092,"KRN",9.8,"NM",20,0)
EASEZP62^^0^B63766210
"BLD",7092,"KRN",9.8,"NM",21,0)
EASEZF1^^0^B56560994
"BLD",7092,"KRN",9.8,"NM",22,0)
EASEZP61^^0^B30387154
"BLD",7092,"KRN",9.8,"NM",23,0)
EASEZP6U^^0^B29983306
"BLD",7092,"KRN",9.8,"NM",24,0)
EASEZRP1^^0^B38490607
"BLD",7092,"KRN",9.8,"NM",25,0)
EASEZRPU^^0^B46765829
"BLD",7092,"KRN",9.8,"NM",26,0)
EASEZT1^^0^B16183245
"BLD",7092,"KRN",9.8,"NM",27,0)
EASEZW^^0^B32880175
"BLD",7092,"KRN",9.8,"NM",28,0)
EASEZW2^^0^B28975388
"BLD",7092,"KRN",9.8,"NM",29,0)
EASECMT^^0^B36465428
"BLD",7092,"KRN",9.8,"NM",30,0)
EASEZPVD^^0^B21610185
"BLD",7092,"KRN",9.8,"NM",31,0)
EASEZPVI^^0^B19722232
"BLD",7092,"KRN",9.8,"NM",32,0)
EASEZPU2^^0^B37317619
"BLD",7092,"KRN",9.8,"NM","B","EAS1070P",18)

"BLD",7092,"KRN",9.8,"NM","B","EASAILK1",9)

"BLD",7092,"KRN",9.8,"NM","B","EASECMT",29)

"BLD",7092,"KRN",9.8,"NM","B","EASECSC1",19)

"BLD",7092,"KRN",9.8,"NM","B","EASEZC2",13)

"BLD",7092,"KRN",9.8,"NM","B","EASEZDD",1)

"BLD",7092,"KRN",9.8,"NM","B","EASEZDD2",6)

"BLD",7092,"KRN",9.8,"NM","B","EASEZF1",21)

"BLD",7092,"KRN",9.8,"NM","B","EASEZF2",15)

"BLD",7092,"KRN",9.8,"NM","B","EASEZF4",14)

"BLD",7092,"KRN",9.8,"NM","B","EASEZI",11)

"BLD",7092,"KRN",9.8,"NM","B","EASEZI1",17)

"BLD",7092,"KRN",9.8,"NM","B","EASEZP61",22)

"BLD",7092,"KRN",9.8,"NM","B","EASEZP62",20)

"BLD",7092,"KRN",9.8,"NM","B","EASEZP64",2)

"BLD",7092,"KRN",9.8,"NM","B","EASEZP6U",23)

"BLD",7092,"KRN",9.8,"NM","B","EASEZPDG",3)

"BLD",7092,"KRN",9.8,"NM","B","EASEZPDU",7)

"BLD",7092,"KRN",9.8,"NM","B","EASEZPU2",32)

"BLD",7092,"KRN",9.8,"NM","B","EASEZPV2",4)

"BLD",7092,"KRN",9.8,"NM","B","EASEZPVD",30)

"BLD",7092,"KRN",9.8,"NM","B","EASEZPVI",31)

"BLD",7092,"KRN",9.8,"NM","B","EASEZRP1",24)

"BLD",7092,"KRN",9.8,"NM","B","EASEZRP3",5)

"BLD",7092,"KRN",9.8,"NM","B","EASEZRPU",25)

"BLD",7092,"KRN",9.8,"NM","B","EASEZT1",26)

"BLD",7092,"KRN",9.8,"NM","B","EASEZU2",16)

"BLD",7092,"KRN",9.8,"NM","B","EASEZU4",12)

"BLD",7092,"KRN",9.8,"NM","B","EASEZU5",8)

"BLD",7092,"KRN",9.8,"NM","B","EASEZW",27)

"BLD",7092,"KRN",9.8,"NM","B","EASEZW2",28)

"BLD",7092,"KRN",9.8,"NM","B","EASMTL6A",10)

"BLD",7092,"KRN",19,0)
19
"BLD",7092,"KRN",19,"NM",0)
^9.68A^^
"BLD",7092,"KRN",19.1,0)
19.1
"BLD",7092,"KRN",101,0)
101
"BLD",7092,"KRN",409.61,0)
409.61
"BLD",7092,"KRN",771,0)
771
"BLD",7092,"KRN",870,0)
870
"BLD",7092,"KRN",8989.51,0)
8989.51
"BLD",7092,"KRN",8989.52,0)
8989.52
"BLD",7092,"KRN",8994,0)
8994
"BLD",7092,"KRN","B",.4,.4)

"BLD",7092,"KRN","B",.401,.401)

"BLD",7092,"KRN","B",.402,.402)

"BLD",7092,"KRN","B",.403,.403)

"BLD",7092,"KRN","B",.5,.5)

"BLD",7092,"KRN","B",.84,.84)

"BLD",7092,"KRN","B",3.6,3.6)

"BLD",7092,"KRN","B",3.8,3.8)

"BLD",7092,"KRN","B",9.2,9.2)

"BLD",7092,"KRN","B",9.8,9.8)

"BLD",7092,"KRN","B",19,19)

"BLD",7092,"KRN","B",19.1,19.1)

"BLD",7092,"KRN","B",101,101)

"BLD",7092,"KRN","B",409.61,409.61)

"BLD",7092,"KRN","B",771,771)

"BLD",7092,"KRN","B",870,870)

"BLD",7092,"KRN","B",8989.51,8989.51)

"BLD",7092,"KRN","B",8989.52,8989.52)

"BLD",7092,"KRN","B",8994,8994)

"BLD",7092,"QUES",0)
^9.62^^
"BLD",7092,"REQB",0)
^9.611^10^10
"BLD",7092,"REQB",1,0)
EAS*1.0*66^2
"BLD",7092,"REQB",2,0)
EAS*1.0*54^2
"BLD",7092,"REQB",3,0)
EAS*1.0*75^2
"BLD",7092,"REQB",4,0)
EAS*1.0*39^2
"BLD",7092,"REQB",5,0)
EAS*1.0*18^2
"BLD",7092,"REQB",6,0)
EAS*1.0*51^2
"BLD",7092,"REQB",7,0)
EAS*1.0*57^2
"BLD",7092,"REQB",8,0)
EAS*1.0*62^2
"BLD",7092,"REQB",9,0)
EAS*1.0*60^2
"BLD",7092,"REQB",10,0)
EAS*1.0*53^2
"BLD",7092,"REQB","B","EAS*1.0*18",5)

"BLD",7092,"REQB","B","EAS*1.0*39",4)

"BLD",7092,"REQB","B","EAS*1.0*51",6)

"BLD",7092,"REQB","B","EAS*1.0*53",10)

"BLD",7092,"REQB","B","EAS*1.0*54",2)

"BLD",7092,"REQB","B","EAS*1.0*57",7)

"BLD",7092,"REQB","B","EAS*1.0*60",9)

"BLD",7092,"REQB","B","EAS*1.0*62",8)

"BLD",7092,"REQB","B","EAS*1.0*66",1)

"BLD",7092,"REQB","B","EAS*1.0*75",3)

"INIT")
EN^EAS1070P
"MBREQ")
0
"PKG",187,-1)
1^1
"PKG",187,0)
ENROLLMENT APPLICATION SYSTEM^EAS^ENROLLMENT
"PKG",187,20,0)
^9.402P^1^1
"PKG",187,20,1,0)
2^^EASXDR
"PKG",187,20,1,1)
 
"PKG",187,20,"B",2,1)

"PKG",187,22,0)
^9.49I^1^1
"PKG",187,22,1,0)
1.0^3010315^3010321^66481
"PKG",187,22,1,"PAH",1,0)
70^3090219^83
"PKG",187,22,1,"PAH",1,1,0)
^^1^1^3090219
"PKG",187,22,1,"PAH",1,1,1,0)
MEANS TEST - EVC RELEASE 2
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
32
"RTN","EAS1070P")
0^18^B34050108
"RTN","EAS1070P",1,0)
EAS1070P ;ALB/AMA - Patch EAS*1.0*70 Post-Install Utility Routine ; 2/6/09 1:37pm
"RTN","EAS1070P",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**70**;Mar 15, 2001;Build 26
"RTN","EAS1070P",3,0)
 Q
"RTN","EAS1070P",4,0)
EN ;
"RTN","EAS1070P",5,0)
 ;Check to see how much of this routine has already executed
"RTN","EAS1070P",6,0)
 N START,EASIEN,EASPP S START=0
"RTN","EAS1070P",7,0)
 S EASIEN=$O(^EAS(711,"AB","CHILD1 FARM OR BUSINESS INCOME","")) Q:'EASIEN
"RTN","EAS1070P",8,0)
 I $G(^EAS(711,EASIEN,1))="0^0^0" S START=1
"RTN","EAS1070P",9,0)
 S EASIEN=+$$KEY711^EASEZU1("APPLICANT COUNTRY")
"RTN","EAS1070P",10,0)
 I EASIEN'=.1 S START=2
"RTN","EAS1070P",11,0)
 S EASAPP=$P(^EAS(712,0),U,3)
"RTN","EAS1070P",12,0)
 I (EASIEN'=.1),$D(^EAS(712,+EASAPP,10,"B",EASIEN)) Q
"RTN","EAS1070P",13,0)
 ;
"RTN","EAS1070P",14,0)
 I START<1 D UPDATE
"RTN","EAS1070P",15,0)
 I START<2 D ADDFLDS
"RTN","EAS1070P",16,0)
 I START<3 D ADDCTRY
"RTN","EAS1070P",17,0)
 Q
"RTN","EAS1070P",18,0)
UPDATE ;Update the 1010 Mapping File (#711) with numerous changes
"RTN","EAS1070P",19,0)
 N LINE,CHGS,OLDNM,NEWNM,FSF,DISPNM,NEWHLP,FOUND,DIC,X,TEMP,Y,DIE,DR
"RTN","EAS1070P",20,0)
 W !!,"Updating the 1010 Mapping (#711) File..."
"RTN","EAS1070P",21,0)
 F LINE=1:1 S CHGS=$T(CHANGES+LINE) Q:($P(CHGS,";",3)="END")  D
"RTN","EAS1070P",22,0)
 . ;FORMAT= OLD NAME;NEW NAME;NEW FILE^SUBFILE^FIELD;NEW DISPLAY LABEL;NEW HELP ROUTINE;
"RTN","EAS1070P",23,0)
 . S OLDNM=$P(CHGS,";",3),NEWNM=$P(CHGS,";",4),FSF=$P(CHGS,";",5)
"RTN","EAS1070P",24,0)
 . S DISPNM=$P(CHGS,";",6),NEWHLP=$P(CHGS,";",7),FOUND=0
"RTN","EAS1070P",25,0)
 . ;
"RTN","EAS1070P",26,0)
 . S DIC="^EAS(711,",DIC(0)="M",X=OLDNM D ^DIC
"RTN","EAS1070P",27,0)
 . I +Y=-1 D
"RTN","EAS1070P",28,0)
 . . S TEMP=$E(OLDNM,1,30),(DA,FOUND)=0
"RTN","EAS1070P",29,0)
 . . F  S DA=$O(^EAS(711,"B",TEMP,DA)) Q:'DA!FOUND  D
"RTN","EAS1070P",30,0)
 . . . I $P(^EAS(711,DA,0),"^")=OLDNM S FOUND=DA
"RTN","EAS1070P",31,0)
 . I (+Y=-1),'FOUND Q
"RTN","EAS1070P",32,0)
 . I FOUND S Y=FOUND
"RTN","EAS1070P",33,0)
 . ;
"RTN","EAS1070P",34,0)
 . S DA=+Y,DIE=DIC
"RTN","EAS1070P",35,0)
 . ;
"RTN","EAS1070P",36,0)
 . I NEWNM]"" S DR=".01///"_NEWNM D ^DIE
"RTN","EAS1070P",37,0)
 . I FSF]"" F X=2,3,4 S DR=X_"///"_$P(FSF,"^",(X-1)) D ^DIE
"RTN","EAS1070P",38,0)
 . I DISPNM]"" S DR="5///"_DISPNM D ^DIE
"RTN","EAS1070P",39,0)
 . I NEWHLP]"" S DR="6///"_NEWHLP D ^DIE
"RTN","EAS1070P",40,0)
 ;
"RTN","EAS1070P",41,0)
 W "  DONE!"
"RTN","EAS1070P",42,0)
 Q
"RTN","EAS1070P",43,0)
ADDFLDS ;Add new 1010 Mapping File (711) fields APPLICANT
"RTN","EAS1070P",44,0)
 ;PROVINCE, APPPLICANT COUNTRY, AND APPLICANT POSTAL CODE
"RTN","EAS1070P",45,0)
 N X,EASIEN,DINUM,DIC,DIE,DLAYGO,ACTIVE,VERSION,FILE,SUB,EASKEY,FIELD,DISPLAY,TRNSFRM
"RTN","EAS1070P",46,0)
 W !!,"Adding APPLICANT PROVINCE, APPLICANT POSTAL CODE, and"
"RTN","EAS1070P",47,0)
 W !,"APPLICANT COUNTRY fields to the 1010 Mapping (#711) File..."
"RTN","EAS1070P",48,0)
 F X="APPLICANT PROVINCE","APPLICANT POSTAL CODE","APPLICANT COUNTRY" D
"RTN","EAS1070P",49,0)
 . S EASIEN=+$$KEY711^EASEZU1(X)
"RTN","EAS1070P",50,0)
 . I EASIEN'=.1 Q
"RTN","EAS1070P",51,0)
 . S (EASIEN,DINUM)=$O(^EAS(711,99999999),-1)+1
"RTN","EAS1070P",52,0)
 . S (DIC,DIE)="^EAS(711,",DIC(0)="L",DLAYGO=""
"RTN","EAS1070P",53,0)
 . K DD,DO D FILE^DICN
"RTN","EAS1070P",54,0)
 . S ACTIVE="A",VERSION="3.0",(FILE,SUB)=2
"RTN","EAS1070P",55,0)
 . I X="APPLICANT PROVINCE" D
"RTN","EAS1070P",56,0)
 . . S EASKEY="I;9F.",FIELD=.1171,DISPLAY="Province"
"RTN","EAS1070P",57,0)
 . I X="APPLICANT POSTAL CODE" D
"RTN","EAS1070P",58,0)
 . . S EASKEY="I;9G.",FIELD=.1172,DISPLAY="Postal Code"
"RTN","EAS1070P",59,0)
 . I X="APPLICANT COUNTRY" D
"RTN","EAS1070P",60,0)
 . . S EASKEY="I;9H.",FIELD=.1173,DISPLAY="Country",TRNSFRM="S EASRTR=$$COUNTRY^EASEZT1(EZDATA)"
"RTN","EAS1070P",61,0)
 . S DA=EASIEN,DR=".1///^S X=EASKEY;1///^S X=ACTIVE;1.2///^S X=VERSION;2///^S X=FILE;3///^S X=SUB;4///^S X=FIELD;5///^S X=DISPLAY;"
"RTN","EAS1070P",62,0)
 . I $G(TRNSFRM)]"" S DR=DR_"10///^S X=TRNSFRM;"
"RTN","EAS1070P",63,0)
 . D ^DIE
"RTN","EAS1070P",64,0)
 W "  DONE!"
"RTN","EAS1070P",65,0)
 Q
"RTN","EAS1070P",66,0)
ADDCTRY ;Loop through all existing Holding File (712) applications
"RTN","EAS1070P",67,0)
 ;and add the APPLICANT COUNTRY field entry
"RTN","EAS1070P",68,0)
 N KEYIEN,EASAPP,X,EASKEY,EASDATA,EASIEN
"RTN","EAS1070P",69,0)
 N DINUM,DIC,DIE,DLAYGO,DA,DR,MULTIPLE,ACCEPT
"RTN","EAS1070P",70,0)
 W !!,"Populating APPLICANT COUNTRY fields with 'USA' in all existing applications..."
"RTN","EAS1070P",71,0)
 S KEYIEN=+$$KEY711^EASEZU1("APPLICANT COUNTRY")
"RTN","EAS1070P",72,0)
 S EASAPP=0 F  S EASAPP=$O(^EAS(712,EASAPP)) Q:'EASAPP  D
"RTN","EAS1070P",73,0)
 . I '$D(^EAS(712,EASAPP,10,"B",KEYIEN)) D
"RTN","EAS1070P",74,0)
 . . S X=KEYIEN,EASKEY="I;9H.",EASDATA="USA"
"RTN","EAS1070P",75,0)
 . . S (EASIEN,DINUM)=$O(^EAS(712,EASAPP,10,"B"),-1)+1
"RTN","EAS1070P",76,0)
 . . S (DIC,DIE)="^EAS(712,EASAPP,10,",DIC(0)="L",DLAYGO=""
"RTN","EAS1070P",77,0)
 . . S DA(1)=EASAPP,DIC("P")=$P(^DD(712,10,0),U,2)
"RTN","EAS1070P",78,0)
 . . K DD,DO D FILE^DICN
"RTN","EAS1070P",79,0)
 . . S DA=EASIEN,DR(1)="10;",MULTIPLE=1,ACCEPT=1
"RTN","EAS1070P",80,0)
 . . S DR=".1///^S X=MULTIPLE;1///^S X=EASDATA;1.1///^S X=ACCEPT;"
"RTN","EAS1070P",81,0)
 . . D ^DIE
"RTN","EAS1070P",82,0)
 W "  DONE!",!!
"RTN","EAS1070P",83,0)
 Q
"RTN","EAS1070P",84,0)
CHANGES ;FORMAT = OLD NAME;NEW NAME;NEW FILE^SUBFILE^FIELD;NEW DISPLAY LABEL;NEW HELP ROUTINE;
"RTN","EAS1070P",85,0)
 ;;CHILD1 GROSS ANNUAL INCOME;CHILD1 EMPLOYMENT INCOME;0^0^0;Employment Inc.(Ch+);;
"RTN","EAS1070P",86,0)
 ;;APPLICANT OTHER INCOME;APPLICANT OTHER INCOME AMOUNTS;;;D H08^EASEZDD2;
"RTN","EAS1070P",87,0)
 ;;SPOUSE OTHER INCOME;SPOUSE OTHER INCOME AMOUNTS;;;D H08^EASEZDD2;
"RTN","EAS1070P",88,0)
 ;;CHILD1 OTHER INCOME;CHILD1 OTHER INCOME AMOUNTS;0^0^0;;;
"RTN","EAS1070P",89,0)
 ;;APPLICANT MEDICAL EXPENSES;APPLICANT TOTAL NON-REIMBURSED MEDICAL EXPENSES;;NonReimb. Med. Exp.;;
"RTN","EAS1070P",90,0)
 ;;APPLICANT FUNERAL EXPENSES;;;;D H102^EASEZDD2;
"RTN","EAS1070P",91,0)
 ;;APPLICANT CASH IN BANK;;;;D H201^EASEZDD2;
"RTN","EAS1070P",92,0)
 ;;SPOUSE CASH IN BANK;;;;D H201^EASEZDD2;
"RTN","EAS1070P",93,0)
 ;;APPLICANT REAL PROPERTY LESS MORTGAGES;APPLICANT LAND/BLDGS. LESS MORTGAGES;;Land/Bldgs.;D H203^EASEZDD2;
"RTN","EAS1070P",94,0)
 ;;SPOUSE REAL PROPERTY LESS MORTGAGES;SPOUSE LAND/BLDGS. LESS MORTGAGES;;Land/Bldgs. (Sp.);D HD203^EASEZDD2;
"RTN","EAS1070P",95,0)
 ;;APPLICANT STOCKS BONDS ASSETS LESS DEBTS;APPLICANT OTHER PROPERTY, ASSETS LESS AMT. OWED;;;D H204^EASEZDD2;
"RTN","EAS1070P",96,0)
 ;;SPOUSE STOCKS BONDS ASSETS LESS DEBTS;SPOUSE OTHER PROPERTY, ASSETS LESS AMT. OWED;;;D H204^EASEZDD2;
"RTN","EAS1070P",97,0)
 ;;APPLICANT FARM OR BUSINESS INCOME;;;;D H17^EASEZDD2;
"RTN","EAS1070P",98,0)
 ;;SPOUSE FARM OR BUSINESS INCOME;;;;D H17^EASEZDD2;
"RTN","EAS1070P",99,0)
 ;;CHILD(N) GROSS ANNUAL INCOME;CHILD(N) EMPLOYMENT INCOME;; Employment Income;D H14^EASEZDD2;
"RTN","EAS1070P",100,0)
 ;;CHILD(N) FARM/BUS INCOME;;;;D H17^EASEZDD2;
"RTN","EAS1070P",101,0)
 ;;CHILD(N) OTHER INCOME;CHILD(N) OTHER INCOME AMOUNTS;;;D H08^EASEZDD2;
"RTN","EAS1070P",102,0)
 ;;ASSET(N) CHILD CASH;ASSET(N) CASH IN BANK;408.21^408.21^2.01;;D H201^EASEZDD2;
"RTN","EAS1070P",103,0)
 ;;ASSET(N) CHILD REAL PROPERTY;ASSET(N) LAND/BLDGS. LESS MORTGAGES;408.21^408.21^2.03; Land/Bldgs.;D HD203^EASEZDD2;
"RTN","EAS1070P",104,0)
 ;;ASSET(N) CHILD OTHER PROPERTY;ASSET(N) OTHER PROPERTY, ASSETS LESS AMT. OWED;408.21^408.21^2.04;;D H204^EASEZDD2;
"RTN","EAS1070P",105,0)
 ;;CHILD1 REAL PROPERTY LESS MORTGAGES;CHILD1 LAND/BLDGS. LESS MORTGAGES;;Land/Bldgs. (Ch+);;
"RTN","EAS1070P",106,0)
 ;;CHILD1 STOCKS BONDS ASSETS LESS DEBTS;CHILD1 OTHER PROPERTY, ASSETS LESS AMT. OWED;;;;
"RTN","EAS1070P",107,0)
 ;;APPLICANT GROSS ANNUAL INCOME2;APPLICANT EMPLOYMENT INCOME;;Employment Income;D H14^EASEZDD2;
"RTN","EAS1070P",108,0)
 ;;SPOUSE GROSS ANNUAL INCOME2;SPOUSE EMPLOYMENT INCOME;;Employment Inc. (Sp);D H14^EASEZDD2;
"RTN","EAS1070P",109,0)
 ;;CHILD1 GROSS ANNUAL INCOME2;;0^0^0;Employment Inc.(Ch+);;
"RTN","EAS1070P",110,0)
 ;;CHILD1 FARM OR BUSINESS INCOME;;0^0^0;;;
"RTN","EAS1070P",111,0)
 ;;END;END;;;;
"RTN","EASAILK1")
0^9^B47986143
"RTN","EASAILK1",1,0)
EASAILK1 ;ALB/BRM,ERC - Patient Address Inquiry ; 10/2/07 3:27pm
"RTN","EASAILK1",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**13,29,39,70**;Mar 15, 2001;Build 26
"RTN","EASAILK1",3,0)
 ;
"RTN","EASAILK1",4,0)
PATADDR ;view patient address
"RTN","EASAILK1",5,0)
 ;
"RTN","EASAILK1",6,0)
 N PATNAM,IENS,ZTSAVE
"RTN","EASAILK1",7,0)
 N DTOUT,DUOUT,DIRUT,DIROUT,%ZIS,DIC,DA,DIQ,DLAYGO,Y,X
"RTN","EASAILK1",8,0)
 ;
"RTN","EASAILK1",9,0)
 ; prompt user for patient name and device
"RTN","EASAILK1",10,0)
 S DIC="^DPT(",DIC(0)="AEMQ" D ^DIC
"RTN","EASAILK1",11,0)
 Q:($D(DTOUT)!$D(DUOUT)!$D(DIRUT)!$D(DIROUT)!(Y=-1))
"RTN","EASAILK1",12,0)
 S %ZIS="Q"
"RTN","EASAILK1",13,0)
 S IENS=+Y_",",PATNAM=$P(Y,"^",2)
"RTN","EASAILK1",14,0)
 S ZTSAVE("IENS")="",ZTSAVE("PATNAM")=""
"RTN","EASAILK1",15,0)
 D EN^XUTMDEVQ("QUE^EASAILK1","PATIENT ADDRESS INQUIRY",.ZTSAVE,.%ZIS)
"RTN","EASAILK1",16,0)
 Q
"RTN","EASAILK1",17,0)
QUE ;
"RTN","EASAILK1",18,0)
 N DGC,CONOK,PATOK,TMPOK,FLD,CONARR,TMPARR,PATARR,CONERR,TMPERR,PATERR
"RTN","EASAILK1",19,0)
 N CONSTR,TMPSTR,PATSTR,TYPE,CONFARR,TEMPARR
"RTN","EASAILK1",20,0)
 ;
"RTN","EASAILK1",21,0)
PAT ;patient address
"RTN","EASAILK1",22,0)
 N PATOK
"RTN","EASAILK1",23,0)
 D GETS^DIQ(2,IENS,".111:.121","E","PATARR","PATERR")
"RTN","EASAILK1",24,0)
 W !?12,"Patient Name: ",?26,PATNAM
"RTN","EASAILK1",25,0)
 ;
"RTN","EASAILK1",26,0)
 ; exit if error occurs during DIQ call
"RTN","EASAILK1",27,0)
 I $D(PATERR) W !!?11,"There is invalid data in the Permanent Address",!?11,"Please use Registration options to edit",!! G CON
"RTN","EASAILK1",28,0)
 ;
"RTN","EASAILK1",29,0)
 ; exit if there is no address for patient
"RTN","EASAILK1",30,0)
 S FLD="",PATOK=0
"RTN","EASAILK1",31,0)
 D OK(.PATARR,.PATOK)
"RTN","EASAILK1",32,0)
 I 'PATOK W !!?11,"*** No Permanent Address On File For This Patient ***",!! G CON
"RTN","EASAILK1",33,0)
 ;set a string of the field numbers needed for the patient address
"RTN","EASAILK1",34,0)
 S PATSTR=".111^.112^.113^.114^.115^.1112^.1173^.121^.118^.119^.12^^^.1171^.1172"
"RTN","EASAILK1",35,0)
 N STRARR
"RTN","EASAILK1",36,0)
 D STRG(PATSTR,.STRARR) ;place the fld numbers into an array
"RTN","EASAILK1",37,0)
 S TYPE="Patient"
"RTN","EASAILK1",38,0)
 S DGC=1
"RTN","EASAILK1",39,0)
 ;display the patient address information
"RTN","EASAILK1",40,0)
 D DISP(TYPE,.PATARR,.STRARR)
"RTN","EASAILK1",41,0)
 ;
"RTN","EASAILK1",42,0)
CON ;confidential address
"RTN","EASAILK1",43,0)
 N CONARR,CONERR,CONOK,DGJ
"RTN","EASAILK1",44,0)
 S CONOK=0
"RTN","EASAILK1",45,0)
 D GETS^DIQ(2,IENS,".141*;.14105;.1411:.142","IE","CONARR","CONERR")
"RTN","EASAILK1",46,0)
 I $D(CONERR) S CONOK=-1 G TMP
"RTN","EASAILK1",47,0)
 S FLD=""
"RTN","EASAILK1",48,0)
 D OK(.CONARR,.CONOK) ;checking for presence of confid address array
"RTN","EASAILK1",49,0)
 I $G(CONARR(2,IENS,.14105,"E"))'="YES" S CONOK=0 G TMP
"RTN","EASAILK1",50,0)
 ;treat null end date as if in the future
"RTN","EASAILK1",51,0)
 I DT'<$G(CONARR(2,IENS,.1417,"I")),$G(CONARR(2,IENS,.1418,"I"))']"" G CON2
"RTN","EASAILK1",52,0)
 I DT>$G(CONARR(2,IENS,.1418,"I")) S CONOK=0 G TMP ;if date range in the past, don't display
"RTN","EASAILK1",53,0)
 I DT<$G(CONARR(2,IENS,.1417,"I")) S CONOK=0 G TMP ;if date range in the future, dont display
"RTN","EASAILK1",54,0)
CON2 ;
"RTN","EASAILK1",55,0)
 S DGJ=""
"RTN","EASAILK1",56,0)
 S CONOK=0 ;now check for active E/E confid address
"RTN","EASAILK1",57,0)
 F  S DGJ=$O(CONARR(2.141,DGJ)) Q:DGJ']""  D
"RTN","EASAILK1",58,0)
 . I CONARR(2.141,DGJ,.01,"E")["ELIG" D
"RTN","EASAILK1",59,0)
 . . I CONARR(2.141,DGJ,1,"E")="YES" S CONOK=1
"RTN","EASAILK1",60,0)
 I 'CONOK G TMP
"RTN","EASAILK1",61,0)
 ;set string of the field numbers needed for the confidential address
"RTN","EASAILK1",62,0)
 S CONSTR=".1411^.1412^.1413^.1414^.1415^.1416^.14116^^.14112^^.14113^.1417^.1418^.14114^.14115"
"RTN","EASAILK1",63,0)
 N CONFARR
"RTN","EASAILK1",64,0)
 D STRG(.CONSTR,.CONFARR) ;place field numbers into an array
"RTN","EASAILK1",65,0)
 ;
"RTN","EASAILK1",66,0)
TMP ;temporary address
"RTN","EASAILK1",67,0)
 N TMPARR,TMPERR,TMPOK
"RTN","EASAILK1",68,0)
 S TMPOK=0
"RTN","EASAILK1",69,0)
 D GETS^DIQ(2,IENS,".12105;.1211:.1219;.1221:.1223","IE","TMPARR","TMPERR")
"RTN","EASAILK1",70,0)
 I $D(TMPERR) S TMPOK=-1 G OPT
"RTN","EASAILK1",71,0)
 S FLD=""
"RTN","EASAILK1",72,0)
 D OK(.TMPARR,.TMPOK) ;check for presence of temp address array
"RTN","EASAILK1",73,0)
 I 'TMPOK G OPT
"RTN","EASAILK1",74,0)
 I $G(TMPARR(2,IENS,.12105,"E"))'="YES" S TMPOK=0 G OPT
"RTN","EASAILK1",75,0)
 ;treat null end date as if in the future
"RTN","EASAILK1",76,0)
 I DT'<$G(TMPARR(2,IENS,.1217,"I")),($G(TMPARR(2,IENS,.1218,"I")))']"" G TMP2
"RTN","EASAILK1",77,0)
 I DT>$G(TMPARR(2,IENS,.1218,"I")) S TMPOK=0 ;if date range in the past, don't display
"RTN","EASAILK1",78,0)
TMP2 ;
"RTN","EASAILK1",79,0)
 I 'TMPOK G OPT
"RTN","EASAILK1",80,0)
 N TEMPARR
"RTN","EASAILK1",81,0)
 ;set string of the field numbers needed for the temporary address
"RTN","EASAILK1",82,0)
 S TMPSTR=".1211^.1212^.1213^.1214^.1215^.12112^.1223^^.12113^^.12114^.1217^.1218^.1221^.1222"
"RTN","EASAILK1",83,0)
 D STRG(.TMPSTR,.TEMPARR) ;place field numbers into an array
"RTN","EASAILK1",84,0)
 ;
"RTN","EASAILK1",85,0)
OPT ;let user decide to see confid. a/o temp address if disp. on screen
"RTN","EASAILK1",86,0)
 N DGELIG,DGEND,DGOPT,DGPROMPT,DIR
"RTN","EASAILK1",87,0)
 S DGEND=0
"RTN","EASAILK1",88,0)
 S DGOPT=$S(CONOK=1&(TMPOK=1):3,CONOK=1&(TMPOK=0):2,TMPOK=1&(CONOK=0):1,1:"")
"RTN","EASAILK1",89,0)
 I DGOPT']"" S DGOPT=$S(CONOK=-1&(TMPOK=-1):4,CONOK=-1:5,TMPOK=-1:6,1:"")
"RTN","EASAILK1",90,0)
 I $G(DGOPT)="" W !?5,PATNAM_" has no Temporary or Eligibility/Enrollment",!?5,"Confidential Address." W !! G END
"RTN","EASAILK1",91,0)
 I $G(DGOPT)>3 D
"RTN","EASAILK1",92,0)
 . W !?11,"There is invalid data in the "_$S(DGOPT=4:"Temporary and Confidential ",DGOPT=5:"Confidential ",1:"Temporary ")_"address"_$S(DGOPT=4:"es.",1:".")
"RTN","EASAILK1",93,0)
 . W !?11,"Please use Registration options to edit.",!!
"RTN","EASAILK1",94,0)
 I $E(IOST,1,2)["C-" D
"RTN","EASAILK1",95,0)
 . S DIR(0)="YAO",DIR("B")="Yes"
"RTN","EASAILK1",96,0)
 . S DGELIG="Elig/Enroll Confidential"
"RTN","EASAILK1",97,0)
 . S DGPROMPT=$S(DGOPT=3:DGELIG_" and Temp",DGOPT=2!(CONOK=1):DGELIG,DGOPT=1!(TMPOK=1):"Temporary",1:"")
"RTN","EASAILK1",98,0)
 . I $G(DGPROMPT)="" S DGEND=1 Q
"RTN","EASAILK1",99,0)
 . S DIR("A")="  Would you like to see the "_DGPROMPT_" Address"_$S(DGOPT=3:"es",1:"")_"? "
"RTN","EASAILK1",100,0)
 . D ^DIR K DIR
"RTN","EASAILK1",101,0)
 . I Y'=1 S DGEND=1
"RTN","EASAILK1",102,0)
 I DGEND=1 G END
"RTN","EASAILK1",103,0)
 S DGC=2
"RTN","EASAILK1",104,0)
 ;
"RTN","EASAILK1",105,0)
 ;if displayed on screen offer to show temp and confid addresses and
"RTN","EASAILK1",106,0)
 ;do a page break for readability.
"RTN","EASAILK1",107,0)
 I DGC>1 D
"RTN","EASAILK1",108,0)
 . I $E(IOST,1,2)["C-" W @IOF
"RTN","EASAILK1",109,0)
 . W !!?12,"Patient Name: ",?26,PATNAM
"RTN","EASAILK1",110,0)
 ;display the addresses that are populated
"RTN","EASAILK1",111,0)
 I CONOK=1 S TYPE=" Confid" D DISP(TYPE,.CONARR,.CONFARR)
"RTN","EASAILK1",112,0)
 I TMPOK=1 S TYPE="   Temp" D DISP(TYPE,.TMPARR,.TEMPARR)
"RTN","EASAILK1",113,0)
 I 'CONOK W !?8,"Patient "_PATNAM_" has no Eligibility/Enrollment",!?8,"Confidential Address."
"RTN","EASAILK1",114,0)
 I 'TMPOK W !?8,"Patient "_PATNAM_" has no Temporary Address."
"RTN","EASAILK1",115,0)
 W !
"RTN","EASAILK1",116,0)
 G END
"RTN","EASAILK1",117,0)
 ;
"RTN","EASAILK1",118,0)
OK(ARR,OK) ;check for presence of an array
"RTN","EASAILK1",119,0)
 F  S FLD=$O(ARR(2,IENS,FLD)) Q:'FLD!(OK)  S:$G(ARR(2,IENS,FLD,"E"))]"" OK=1
"RTN","EASAILK1",120,0)
 Q
"RTN","EASAILK1",121,0)
 ;
"RTN","EASAILK1",122,0)
STRG(STR,STRARR) ;set the field string into an array
"RTN","EASAILK1",123,0)
 N DGD
"RTN","EASAILK1",124,0)
 F DGD=1:1:15  S STRARR(DGD)=$P(STR,U,DGD)
"RTN","EASAILK1",125,0)
 Q
"RTN","EASAILK1",126,0)
 ;
"RTN","EASAILK1",127,0)
 ;display address information
"RTN","EASAILK1",128,0)
DISP(TYPE,ARR,STR) ;
"RTN","EASAILK1",129,0)
 N DGCNTRY,DGUSA
"RTN","EASAILK1",130,0)
 S DGUSA=0 ;I country=USA or "" display state/zip, E prov/postal code
"RTN","EASAILK1",131,0)
 S:$G(ARR(2,IENS,$G(STR(7)),"E"))="USA" DGUSA=1
"RTN","EASAILK1",132,0)
 S:$G(ARR(2,IENS,$G(STR(7)),"E"))']"" DGUSA=1
"RTN","EASAILK1",133,0)
 W !?9,TYPE_" Address: ",?26,$S($G(ARR(2,IENS,$G(STR(1)),"E"))]"":ARR(2,IENS,STR(1),"E"),1:"UNKNOWN STREET ADDRESS")
"RTN","EASAILK1",134,0)
 W:$G(ARR(2,IENS,$G(STR(2)),"E"))]"" !?26,ARR(2,IENS,STR(2),"E")
"RTN","EASAILK1",135,0)
 W:$G(ARR(2,IENS,STR(3),"E"))]"" !?26,ARR(2,IENS,STR(3),"E")
"RTN","EASAILK1",136,0)
 I DGUSA D  ;US address or null country which defaults to US
"RTN","EASAILK1",137,0)
 . W !?26,$S($G(ARR(2,IENS,STR(4),"E"))]"":ARR(2,IENS,STR(4),"E"),1:"UNKNOWN CITY")_", "
"RTN","EASAILK1",138,0)
 . W $S($G(ARR(2,IENS,STR(5),"E"))]"":ARR(2,IENS,STR(5),"E"),1:"UNKNOWN STATE")_" "
"RTN","EASAILK1",139,0)
 . W:$G(ARR(2,IENS,STR(6),"E"))]"" ARR(2,IENS,STR(6),"E")
"RTN","EASAILK1",140,0)
 I 'DGUSA D  ;foreign address
"RTN","EASAILK1",141,0)
 . W !?26,""
"RTN","EASAILK1",142,0)
 . W:$G(ARR(2,IENS,STR(15),"E"))]"" ARR(2,IENS,STR(15),"E")_" "
"RTN","EASAILK1",143,0)
 . W $S($G(ARR(2,IENS,STR(4),"E"))]"":ARR(2,IENS,STR(4),"E"),1:"UNKNOWN CITY")_", "
"RTN","EASAILK1",144,0)
 . W $S($G(ARR(2,IENS,STR(14),"E"))]"":ARR(2,IENS,STR(14),"E"),1:"UNKNOWN PROVINCE")_" "
"RTN","EASAILK1",145,0)
 I $G(ARR(2,IENS,STR(7),"E"))]"" D
"RTN","EASAILK1",146,0)
 . S DGCNTRY=ARR(2,IENS,STR(7),"E")
"RTN","EASAILK1",147,0)
 . S DGCNTRY=$$COUNTRY^DGADDUTL(.DGCNTRY)
"RTN","EASAILK1",148,0)
 . W !?26,DGCNTRY
"RTN","EASAILK1",149,0)
 I TYPE["Patient" W !?3,"Bad Address Indicator: ",?26,$G(ARR(2,IENS,STR(8),"E"))
"RTN","EASAILK1",150,0)
 W !?1,TYPE_" Add Change Date: ",?26,$G(ARR(2,IENS,STR(9),"E"))
"RTN","EASAILK1",151,0)
 I TYPE["Patient" W !?3,"Pat Add Change Source: ",?26,$G(ARR(2,IENS,STR(10),"E"))
"RTN","EASAILK1",152,0)
 I TYPE["Patient" W:$G(ARR(2,IENS,STR(10),"E"))="VAMC" !?1,TYPE_" Add Change Site: ",?26,$G(ARR(2,IENS,STR(11),"E"))
"RTN","EASAILK1",153,0)
 I TYPE'["Patient" W:$G(ARR(2,IENS,STR(11),"E"))]"" !?1,TYPE_" Add Change Site: ",?26,$G(ARR(2,IENS,STR(11),"E"))
"RTN","EASAILK1",154,0)
 I TYPE'["Patient" W !?2,TYPE_" Add Start Date: ",?26,$G(ARR(2,IENS,STR(12),"E"))
"RTN","EASAILK1",155,0)
 I TYPE'["Patient" W !?4,TYPE_" Add End Date: ",?26,$G(ARR(2,IENS,STR(13),"E"))
"RTN","EASAILK1",156,0)
 W !
"RTN","EASAILK1",157,0)
 Q
"RTN","EASAILK1",158,0)
 ;
"RTN","EASAILK1",159,0)
END ; common exit point - reset device and prompt user for another name
"RTN","EASAILK1",160,0)
 K %ZIS D ^%ZISC,HOME^%ZIS
"RTN","EASAILK1",161,0)
 G PATADDR
"RTN","EASAILK1",162,0)
 Q
"RTN","EASECMT")
0^29^B36465428
"RTN","EASECMT",1,0)
EASECMT ;ALB/LBD - Means Test for LTC Co-Pay exemption ; 27 DEC 2001
"RTN","EASECMT",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**7,16,18,70**;Mar 15, 2001;Build 26
"RTN","EASECMT",3,0)
 ;
"RTN","EASECMT",4,0)
EN ; This is the entry point for the routine that will find the 
"RTN","EASECMT",5,0)
 ; financial test for a veteran that can be used to check if
"RTN","EASECMT",6,0)
 ; veteran's income is below the threshold and exempt from LTC
"RTN","EASECMT",7,0)
 ; co-payments.  If a financial test is not on file for the veteran
"RTN","EASECMT",8,0)
 ; it can be added through this process.
"RTN","EASECMT",9,0)
 ;  Input --      DFN = Patient IEN
"RTN","EASECMT",10,0)
 ;  Output --     DGEXMPT = 1 (exempt from LTC co-payments)
"RTN","EASECMT",11,0)
 ;                        = 0 or "" (not exempt from LTC co-payments)
"RTN","EASECMT",12,0)
 ;                DGOUT = 1 (user wants to exit from the process) 
"RTN","EASECMT",13,0)
 N DGMTI,DGMTDT,DGMTYPT,DGMTACT,DGL,DGCS,DGMSGF,DGREQF,DGDOM,DGDOM1,Y
"RTN","EASECMT",14,0)
 ; Does veteran have current LTC co-pay exemption test (type 4)?
"RTN","EASECMT",15,0)
 S Y=$$GETLTC4(DFN) I Y S DGEXMPT=$S($P(Y,U,3)="EXEMPT":1,1:0) Q
"RTN","EASECMT",16,0)
 ; Does veteran have current means test?
"RTN","EASECMT",17,0)
 S DGL=$$LST^DGMTU(DFN),DGMTI=+DGL,DGMTDT=$P(DGL,U,2),DGCS=$P(DGL,U,4)
"RTN","EASECMT",18,0)
 ; If last means test has status of Cat C or Pend. Adj. and vet agreed
"RTN","EASECMT",19,0)
 ; to pay MT copay, new means test is not required
"RTN","EASECMT",20,0)
 I ((DGCS="C")!(DGCS="P")),$P($G(^DGMT(408.31,DGMTI,0)),U,11)=1,DGMTDT>2991005 S DGEXMPT=0 D LTC4(DGMTI,DGEXMPT) Q
"RTN","EASECMT",21,0)
 ; If means test is required or more than a year old, do new means test
"RTN","EASECMT",22,0)
 I (DGCS="R")!($$OLD^DGMTU4(DGMTDT)) D  Q:$G(DGOUT)!(DGMTYPT=4)
"RTN","EASECMT",23,0)
 .S (DGADDF,DGMSGF)=1 D ^DGMTR S DGMTYPT=$S(DGREQF:1,1:4)
"RTN","EASECMT",24,0)
 .I '$$ASK(DGMTYPT) S DGOUT=1 Q
"RTN","EASECMT",25,0)
 .S DGMTACT="ADD" I DGMTYPT=1,$E(DGMTDT,1,3)=$E(DT,1,3) S DGMTACT="EDT"
"RTN","EASECMT",26,0)
 .I '$$MT(DFN,DGMTYPT,DGMTACT,.DGMTI) S DGOUT=1 Q
"RTN","EASECMT",27,0)
 .I DGMTYPT=4 D
"RTN","EASECMT",28,0)
 ..D DOM^DGMTR I '$G(DGDOM1) D COPYRX^DGMTR1(DFN,DGMTI)
"RTN","EASECMT",29,0)
 ..S Y=$$GETCODE^DGMTH($P($G(^DGMT(408.31,DGMTI,0)),U,3)),DGEXMPT=$S(Y=0:1,1:0)
"RTN","EASECMT",30,0)
 ; If no means test or means test is no longer required, check if
"RTN","EASECMT",31,0)
 ; there is an RX co-pay test, otherwise do new LTC co-pay exemption test
"RTN","EASECMT",32,0)
 I DGCS=""!(DGCS="N") D  Q:$G(DGOUT)!($G(DGMTYPT)=4)
"RTN","EASECMT",33,0)
 .S DGL=$$LST^DGMTU(DFN,DT,2),DGMTI=+DGL,DGMTDT=$P(DGL,U,2),DGCS=$P(DGL,U,4)
"RTN","EASECMT",34,0)
 .I DGMTI,'$$OLD^DGMTU4(DGMTDT),("^I^L^")'[("^"_DGCS_"^") Q
"RTN","EASECMT",35,0)
 .S DGMTYPT=4
"RTN","EASECMT",36,0)
 .I '$$ASK(DGMTYPT) S DGOUT=1 Q
"RTN","EASECMT",37,0)
 .I '$$MT(DFN,DGMTYPT,"ADD",.DGMTI) S DGOUT=1 Q
"RTN","EASECMT",38,0)
 .D DOM^DGMTR I '$G(DGDOM1) D COPYRX^DGMTR1(DFN,DGMTI)
"RTN","EASECMT",39,0)
 .S Y=$$GETCODE^DGMTH($P($G(^DGMT(408.31,DGMTI,0)),U,3))
"RTN","EASECMT",40,0)
 .S DGEXMPT=$S(Y=0:1,1:0)
"RTN","EASECMT",41,0)
 ; Check if veteran's income is below the pension threshold
"RTN","EASECMT",42,0)
 S DGEXMPT=$$THRES(DFN,DGMTDT)
"RTN","EASECMT",43,0)
 I DGEXMPT<0 W !!,"The income threshold check could not be completed due to an error." S DGOUT=1 Q
"RTN","EASECMT",44,0)
 ; Create LTC co-pay exemption test (type 4) by copying MT
"RTN","EASECMT",45,0)
 D LTC4(DGMTI,DGEXMPT)
"RTN","EASECMT",46,0)
 Q
"RTN","EASECMT",47,0)
 ;
"RTN","EASECMT",48,0)
THRES(DFN,DGMTDT) ; Is veteran's income below the pension threshold
"RTN","EASECMT",49,0)
 ; Input   -  DFN = Patient IEN
"RTN","EASECMT",50,0)
 ;            DGMTDT = Test date
"RTN","EASECMT",51,0)
 ; Output  -   = 1 (Below the threshold)
"RTN","EASECMT",52,0)
 ;             = 0 (Above the threshold)
"RTN","EASECMT",53,0)
 ;             = -1(Error)
"RTN","EASECMT",54,0)
 N DGDC,DGDEP,DGDET,DGERR,DGIN0,DGIN1,DGIN2,DGINI,DGINT,DGINTF,DGIRI
"RTN","EASECMT",55,0)
 N DGNC,DGND,DGNWT,DGNWTF,DGPRI,DGSP,DGVINI,DGVIR0,DGVIRI,DGTHRES
"RTN","EASECMT",56,0)
 N DGLY,DGMTPAR
"RTN","EASECMT",57,0)
 ; Get current single veteran pension threshold amount
"RTN","EASECMT",58,0)
 S DGTHRES=$$THRES^IBARXEU1(DGMTDT,1,0) I '+DGTHRES Q -1
"RTN","EASECMT",59,0)
 ; Calculate veteran's income level and check against the threshold
"RTN","EASECMT",60,0)
 S DGPRI=$O(^DGPR(408.12,"C",DFN_";DPT(",0)) I 'DGPRI Q -1
"RTN","EASECMT",61,0)
 D GETIENS^DGMTU2(DFN,DGPRI,DGMTDT) I '$G(DGIRI),'$G(DGINI) Q -1
"RTN","EASECMT",62,0)
 S DGVIRI=DGIRI,DGVINI=DGINI
"RTN","EASECMT",63,0)
 S DGLY=$$LYR^DGMTSCU1(DGMTDT) D PAR^DGMTSCU
"RTN","EASECMT",64,0)
 D DEP^DGMTSCU2,INC^DGMTSCU3 I '$D(DGINT) Q -1
"RTN","EASECMT",65,0)
 ; If vet declined to provide financial info, return 0 (above threshold)
"RTN","EASECMT",66,0)
 I $P($G(^DGMT(408.31,+$G(DGMTI),0)),U,14) Q 0
"RTN","EASECMT",67,0)
 I (DGINT-DGDET)'>+DGTHRES Q 1
"RTN","EASECMT",68,0)
 Q 0
"RTN","EASECMT",69,0)
 ;
"RTN","EASECMT",70,0)
MT(DFN,TYPE,ACT,DGMTI) ; Complete a means test or LTC co-pay exemption test
"RTN","EASECMT",71,0)
 ; Input    -  DFN = Patient IEN
"RTN","EASECMT",72,0)
 ;             TYPE = Type of test (1=MT; 4=LTC4)
"RTN","EASECMT",73,0)
 ;             ACT = Type of action (ADD or EDT)
"RTN","EASECMT",74,0)
 ;             DGMTI = If EDT action, IEN of test to be edited
"RTN","EASECMT",75,0)
 ; Output   -  EASECMT = 1 (MT completed)
"RTN","EASECMT",76,0)
 ;                     = 0 (MT not completed)
"RTN","EASECMT",77,0)
 ;             DGMTI = IEN of new test
"RTN","EASECMT",78,0)
 N DGMTYPT,DGMTACT,DGMTROU,DGMT0,DGSTA,EASECMT,TYPESAVE
"RTN","EASECMT",79,0)
 S EASECMT=0
"RTN","EASECMT",80,0)
 I $$LOCK^DGMTUTL(DFN) E  Q EASECMT
"RTN","EASECMT",81,0)
 S DGMTYPT=TYPE,DGMTACT=ACT
"RTN","EASECMT",82,0)
 S TYPESAVE=TYPE ;*GTS - EAS*1*70
"RTN","EASECMT",83,0)
 S DGMTDT=$S(DGMTACT="EDT":+$G(^DGMT(408.31,DGMTI,0)),1:DT) G MT1:'DGMTDT
"RTN","EASECMT",84,0)
 ;*GTS - EAS*1*70
"RTN","EASECMT",85,0)
 ; If adding a LTC CP Exemption test, TYPE indicates test copied from for ADD^DGMTA
"RTN","EASECMT",86,0)
 I DGMTACT="ADD" S:TYPE=4 TYPE=1 D ADD^DGMTA S TYPE=TYPESAVE G MT1:'$G(DGMTI)
"RTN","EASECMT",87,0)
 S DGMTROU="MT1^EASECMT"
"RTN","EASECMT",88,0)
 G EN^DGMTSC
"RTN","EASECMT",89,0)
MT1 I $G(DGMTI) D
"RTN","EASECMT",90,0)
 .S DGMT0=$G(^DGMT(408.31,DGMTI,0)),DGSTA=$$GETCODE^DGMTH($P(DGMT0,U,3))
"RTN","EASECMT",91,0)
 .I DGSTA'="","ACP01"[DGSTA,$P(DGMT0,U,7)]"" S EASECMT=1
"RTN","EASECMT",92,0)
 .I 'EASECMT,TYPE=4 D DEL  ;Delete incomplete LTC copay exemption test
"RTN","EASECMT",93,0)
 D UNLOCK^DGMTUTL(DFN)
"RTN","EASECMT",94,0)
 Q +$G(EASECMT)
"RTN","EASECMT",95,0)
 ;
"RTN","EASECMT",96,0)
LTC4(DGMT,DGEXMPT) ; Create or update LTC copay exemption test (type 4) by copying
"RTN","EASECMT",97,0)
 ; means test
"RTN","EASECMT",98,0)
 ; Input   -   DGMT = Annual Means Test IEN of test to be copied
"RTN","EASECMT",99,0)
 ;         -   DGEXMPT = LTC copayments exemption status (optional)
"RTN","EASECMT",100,0)
 Q:'DGMT
"RTN","EASECMT",101,0)
 N DGMT0,DGMT2,DA,DIC,DIK,DLAYGO,X,DFN,DGMTI,DGCONVRT
"RTN","EASECMT",102,0)
 N DGMTA,DGMTP,DGMTACT,DGMTINF,DGMTYPT
"RTN","EASECMT",103,0)
 ; Quit if this is a LTC copay exemption test (type 4)
"RTN","EASECMT",104,0)
 S DGMT0=$G(^DGMT(408.31,DGMT,0)) I $P(DGMT0,U,19)=4 Q
"RTN","EASECMT",105,0)
 S DGMT2=$G(^DGMT(408.31,DGMT,2))
"RTN","EASECMT",106,0)
 ; Add a new LTC 4 test or edit an existing LTC 4 test?
"RTN","EASECMT",107,0)
 S DGMTI=$O(^DGMT(408.31,"AT",DGMT,0))
"RTN","EASECMT",108,0)
 S DGMTACT=$S(DGMTI:"EDT",1:"ADD")
"RTN","EASECMT",109,0)
 S DGMTP="" I DGMTACT="EDT" S DGMTP=$G(^DGMT(408.31,DGMTI,0))
"RTN","EASECMT",110,0)
 S DFN=$P(DGMT0,U,2)
"RTN","EASECMT",111,0)
 ; Add new entry to Annual Means Test file (#408.31) for LTC 4 test
"RTN","EASECMT",112,0)
 I DGMTACT="ADD" D  Q:DGMTI'>0
"RTN","EASECMT",113,0)
 .S X=+DGMT0,(DIC,DIK)="^DGMT(408.31,",DIC(0)="L",DLAYGO=408.31
"RTN","EASECMT",114,0)
 .D FILE^DICN S DGMTI=+Y
"RTN","EASECMT",115,0)
 .;*GTS - EAS*1*70
"RTN","EASECMT",116,0)
 .S DGCONVRT=$$VRCHKUP^DGMTU2(4,$P(DGMT0,"^",19),+DGMT0,+DGMT0)
"RTN","EASECMT",117,0)
 .S DATA(2.11)=1
"RTN","EASECMT",118,0)
 F I=.01,.02,.04,.05,.06,.11,.14,.15,.18,.23 S DATA(I)=$P(DGMT0,U,(I/.01))
"RTN","EASECMT",119,0)
 I '$D(DGEXMPT) S DGEXMPT=$$THRES(DFN,$P(DGMT0,U,1))
"RTN","EASECMT",120,0)
 S DATA(.03)=$S(DGEXMPT:15,1:14),DATA(.07)=DT
"RTN","EASECMT",121,0)
 S DATA(.019)=4,DATA(2.02)=$P(DGMT2,U,2),DATA(2.08)=DGMT
"RTN","EASECMT",122,0)
 S DATA(2.05)=$P(DGMT2,U,5)
"RTN","EASECMT",123,0)
 I $$UPD^DGENDBS(408.31,DGMTI,.DATA,.ERROR)
"RTN","EASECMT",124,0)
 K DATA,ERROR
"RTN","EASECMT",125,0)
 ; Update the LTC copay test (type 3), if status changed
"RTN","EASECMT",126,0)
 I DGMTACT="EDT" D UPLTC3(DGMTI)
"RTN","EASECMT",127,0)
 ; Update Audit file and IVM Patient file
"RTN","EASECMT",128,0)
 S DGMTYPT=4,DGMTINF=1 D AFTER^DGMTEVT
"RTN","EASECMT",129,0)
 D EN^DGMTAUD
"RTN","EASECMT",130,0)
 D EN^IVMPMTE
"RTN","EASECMT",131,0)
 Q
"RTN","EASECMT",132,0)
 ;
"RTN","EASECMT",133,0)
ASK(TYPE) ; Does user want to perform MT/LTC4 test now?
"RTN","EASECMT",134,0)
 ; Input   -   TYPE = Type of test, 1: MT; 4: LTC Copay Exemption
"RTN","EASECMT",135,0)
 ; Output  -   Y = 1 (YES)
"RTN","EASECMT",136,0)
 ;               = 0 (NO)
"RTN","EASECMT",137,0)
 N DIR,TST
"RTN","EASECMT",138,0)
 S TST=$S(TYPE=1:"Means Test",1:"LTC Copay Exemption Test")
"RTN","EASECMT",139,0)
 W !!,"The previous year's financial information is not on file for this veteran.",!,"A ",TST," is required."
"RTN","EASECMT",140,0)
 S DIR("A")="Do you wish to complete the "_TST_" at this time"
"RTN","EASECMT",141,0)
 S DIR("B")="NO",DIR(0)="Y"
"RTN","EASECMT",142,0)
 W ! D ^DIR
"RTN","EASECMT",143,0)
 Q +(Y)
"RTN","EASECMT",144,0)
 ;
"RTN","EASECMT",145,0)
GETLTC4(DFN,DGMTDT) ; Return last LTC co-pay exemption test (type 4),
"RTN","EASECMT",146,0)
 ; if less than a year old
"RTN","EASECMT",147,0)
 ; Input   -   DFN = Patient IEN
"RTN","EASECMT",148,0)
 ;             DGMTDT (optional) = Date of test
"RTN","EASECMT",149,0)
 ; Output  -   Y = Annual Means Test IEN^Date of Test^Status Name^
"RTN","EASECMT",150,0)
 ;                    Status Code^Source of Test
"RTN","EASECMT",151,0)
 ;               = "" (no current LTC co-pay exemption test)
"RTN","EASECMT",152,0)
 N Y
"RTN","EASECMT",153,0)
 S Y="" Q:'$G(DFN) Y I '$G(DGMTDT) S DGMTDT=DT
"RTN","EASECMT",154,0)
 S Y=$$LST^DGMTU(DFN,DGMTDT,4) I '(+Y) Q Y
"RTN","EASECMT",155,0)
 I $$OLD^DGMTU4($P(Y,U,2)) S Y=""
"RTN","EASECMT",156,0)
 Q Y
"RTN","EASECMT",157,0)
 ;
"RTN","EASECMT",158,0)
DEL ;Delete incomplete LTC Copay Exemption test (type 4)
"RTN","EASECMT",159,0)
 ; Input   -- DGMTI  LTC Copay Exemption test IEN
"RTN","EASECMT",160,0)
 N DA,DIK,DIE,DR,V
"RTN","EASECMT",161,0)
 Q:'$G(DGMTI)  Q:$P($G(^DGMT(408.31,DGMTI,0)),U,19)'=4
"RTN","EASECMT",162,0)
 ; Delete pointer in Income Relation file (#408.22)
"RTN","EASECMT",163,0)
 I $D(^DGMT(408.22,"AMT",DGMTI)) D
"RTN","EASECMT",164,0)
 .S DIE="^DGMT(408.22,",DR="31///@"
"RTN","EASECMT",165,0)
 .S V=$O(^DGMT(408.22,"AMT",DGMTI,0)) Q:'V
"RTN","EASECMT",166,0)
 .S IR=0 F  S IR=$O(^DGMT(408.22,"AMT",DGMTI,V,IR)) Q:'IR  S DA=$O(^(IR,0)) I DA D ^DIE
"RTN","EASECMT",167,0)
 ; Delete LTC Copay Exemption test from Annual Means Test file (#408.31)
"RTN","EASECMT",168,0)
 S DA=DGMTI,DIK="^DGMT(408.31,"
"RTN","EASECMT",169,0)
 D ^DIK
"RTN","EASECMT",170,0)
 Q
"RTN","EASECMT",171,0)
 ;
"RTN","EASECMT",172,0)
UPLTC3(DGMT4) ;If the status of a LTC Copay Exemption test (type 4) changes,
"RTN","EASECMT",173,0)
 ;update the status of the LTC Copay test (type 3), if necessary
"RTN","EASECMT",174,0)
 ;  Input   -- DGMT4  LTC Copay Exemption test IEN
"RTN","EASECMT",175,0)
 N DGMT3,DGMTS4,DGMTS3,DGS,DATA,ERROR
"RTN","EASECMT",176,0)
 Q:'DGMT4
"RTN","EASECMT",177,0)
 S DGMT3=$O(^DGMT(408.31,"AT",DGMT4,0)) Q:$G(^DGMT(408.31,+DGMT3,0))=""
"RTN","EASECMT",178,0)
 ; Get test status
"RTN","EASECMT",179,0)
 S DGMTS4=$$GETNAME^DGMTH($P(^DGMT(408.31,DGMT4,0),U,3))
"RTN","EASECMT",180,0)
 S DGMTS3=$$GETNAME^DGMTH($P(^DGMT(408.31,DGMT3,0),U,3))
"RTN","EASECMT",181,0)
 ; If test status is the same quit
"RTN","EASECMT",182,0)
 I DGMTS4=DGMTS3 Q
"RTN","EASECMT",183,0)
 ; If LTC copay test (type 3) is Exempt and the Reason for Exemption is
"RTN","EASECMT",184,0)
 ; anything other than 2 (Income Last Year Below Threshold), quit
"RTN","EASECMT",185,0)
 I DGMTS3="EXEMPT",$P($G(^DGMT(408.31,DGMT3,2)),U,7)'=2 Q
"RTN","EASECMT",186,0)
 ; Get IEN of Means Test Status and update LTC copay test
"RTN","EASECMT",187,0)
 S DGS="" F  S DGS=$O(^DG(408.32,"B",DGMTS4,DGS)) Q:'DGS  I $P(^DG(408.32,DGS,0),U,19)=3 Q
"RTN","EASECMT",188,0)
 S DATA(.03)=DGS,DATA(2.07)=$S(DGMTS4="EXEMPT":2,1:"@")
"RTN","EASECMT",189,0)
 I $$UPD^DGENDBS(408.31,DGMT3,.DATA,.ERROR)
"RTN","EASECMT",190,0)
 Q
"RTN","EASECSC1")
0^19^B30903966
"RTN","EASECSC1",1,0)
EASECSC1 ;ALB/PHH,LBD,EG,ERC - LTC Co-Pay Test Screen Military Service ; 05/06/2006 4:17 PM
"RTN","EASECSC1",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**5,7,38,62,75,70**;Mar 15, 2001;Build 26
"RTN","EASECSC1",3,0)
 ;
"RTN","EASECSC1",4,0)
 ; Input  -- DFN      Patient IEN
"RTN","EASECSC1",5,0)
 ;           DGMTACT  LTC Co-Pay Test Action
"RTN","EASECSC1",6,0)
 ;           DGVINI   Veteran Individual Annual Income IEN
"RTN","EASECSC1",7,0)
 ;           DGVIRI   Veteran Income Relation IEN
"RTN","EASECSC1",8,0)
 ;           DGVPRI   Veteran Patient Relation IEN
"RTN","EASECSC1",9,0)
 ; Output -- None
"RTN","EASECSC1",10,0)
 ;
"RTN","EASECSC1",11,0)
EN ;Entry point
"RTN","EASECSC1",12,0)
 N DGLTCEX,DGLTC,IORVON,IORVOFF
"RTN","EASECSC1",13,0)
 D ^DGRPV
"RTN","EASECSC1",14,0)
 D EASECRP6
"RTN","EASECSC1",15,0)
 S X="IORVON;IORVOFF" D ENDR^%ZISS K X
"RTN","EASECSC1",16,0)
 I $G(DGLTCEX) W !?2,$G(IORVON)," * VETERAN MAY BE EXEMPT FROM COPAY IF LTC EPISODE IS DUE TO THIS CONDITION.",$G(IORVOFF)
"RTN","EASECSC1",17,0)
 S X="^2"
"RTN","EASECSC1",18,0)
 S:$$PAUSE(0) X="^"
"RTN","EASECSC1",19,0)
 G EN1^EASECSCR
"RTN","EASECSC1",20,0)
 Q
"RTN","EASECSC1",21,0)
PAUSE(RESP) ; Prompt user for next page or quit
"RTN","EASECSC1",22,0)
 N DIR,DIRUT,DUOUT,DTOUT,U,X,Y
"RTN","EASECSC1",23,0)
 S DIR(0)="E"
"RTN","EASECSC1",24,0)
 D ^DIR
"RTN","EASECSC1",25,0)
 I 'Y S RESP=1
"RTN","EASECSC1",26,0)
 Q RESP
"RTN","EASECSC1",27,0)
 ;
"RTN","EASECSC1",28,0)
EASECRP6 ; Display the screen
"RTN","EASECSC1",29,0)
 ; Note: This section was copied from ^DGRP6 and modified specifically
"RTN","EASECSC1",30,0)
 ;       to work with LTC.
"RTN","EASECSC1",31,0)
 ;
"RTN","EASECSC1",32,0)
 S (DGRPS,DGMTSCI)=1 D HD^EASECSCU F I=.32,.321,.322,.36,.52,.53 S DGRP(I)=$S($D(^DPT(DFN,I)):^(I),1:"")
"RTN","EASECSC1",33,0)
 S (DGRPW,Z)=1 D WW S Z="    Service Branch",Z1=24 D WW1^DGRPV S Z="   Service #",Z1=19 D WW1^DGRPV S Z="   Entered",Z1=12 D WW1^DGRPV S Z="   Separated",Z1=12 D WW1^DGRPV W "   Discharge"
"RTN","EASECSC1",34,0)
 W !?4,"--------------",?27,"---------",?46,"-------",?58,"---------",?70,"---------"
"RTN","EASECSC1",35,0)
 S DGRPX=DGRP(.32),DGRPSV=4 D S I $P(DGRPX,"^",19)="Y" S DGRPSV=9 D S I $P(DGRPX,"^",20)="Y" S DGRPSV=14 D S
"RTN","EASECSC1",36,0)
 S Z=2,DGRPX=DGRP(.52) D WW W "           POW: " S X=5,Z1=6 D YN W "From: " S X=7,Z1=13 D DAT W "To: " S X=8,Z1=12 D DAT W "War: ",$S($D(^DIC(22,+$P(DGRPX,"^",6),0)):$P(^(0),"^",2),1:"")
"RTN","EASECSC1",37,0)
 S Z=3 D WW W "        Combat: " S X=11,Z1=6 D YN W "From: " S X=13,Z1=13 D DAT W "To: " S X=14,Z1=12 D DAT W "Loc: ",$S($D(^DIC(22,+$P(DGRPX,"^",12),0)):$P(^(0),"^",2),1:"")
"RTN","EASECSC1",38,0)
 S Z=4,DGRPX=DGRP(.321) D WW W "       Vietnam: " S X=1,Z1=6 D YN W "From: " S X=4,Z1=13 D DAT W "To: " S X=5,X1=13 D DAT
"RTN","EASECSC1",39,0)
 S Z=5 D WW W "      A/O Exp.: " S X=2,Z1=7,DGLTC=1 D YN W "Reg: " S X=7,Z1=11 D DAT W "Exam: " S X=9,Z1=11 D DAT W "A/O#: " S Z=$P(DGRPX,"^",10),Z1=8 D WW1^DGRPV S Z=$P(DGRPX,"^",13) W $S(Z="K":" DMZ",Z="V":"VIET",1:"")
"RTN","EASECSC1",40,0)
 S Z=6 D WW W "      ION Rad.: " S X=3,Z1=7,DGLTC=1 D YN W "Reg: " S X=11,Z1=9 D DAT W "Method: "
"RTN","EASECSC1",41,0)
 S X=$P(DGRPX,"^",12) W $S(X=2:"HIROSHIMA/NAGASAKI",X=3:"ATMOSPHERIC NUCLEAR TESTING",X=4:"H/N AND ATMOSPHERIC TESTING",X=5:"UNDERGROUND NUCLEAR TESTING",X=6:"EXPOSURE AT NUCLEAR FACILITY",X=7:"OTHER",1:"")
"RTN","EASECSC1",42,0)
 S DGRPX=DGRP(.322)
"RTN","EASECSC1",43,0)
 F DGX=1,4,7,10 S X=DGX,Z=DGX-1/3+7 D WW W:DGX<10 " " W $S(DGX=1:"      Lebanon",DGX=4:"      Grenada",DGX=7:"       Panama",1:"      Gulf War"),": " S Z1=6 D YN W "From: " S X=DGX+1,Z1=13 D DAT W "To: " S X=DGX+2,Z1=12 D DAT
"RTN","EASECSC1",44,0)
 S Z=11 D WW W "       Somalia: " S (DGX,X)=16,Z1=6 D YN W "From: " S X=17,Z1=13 D DAT W "To: " S X=18,Z1=12 D DAT
"RTN","EASECSC1",45,0)
 ; Contam name changed to SW Asia Conditions, DG*5.3*688
"RTN","EASECSC1",46,0)
 S Z=12 D WW W "  SW Asia Cond: " S X=13,Z1=7,DGLTC=1 D YN W "Reg: " S X=14,Z1=11 D DAT W "Exam: " S X=15,Z1=10 D DAT
"RTN","EASECSC1",47,0)
 S Z=13 D WW S X=$P(DGRP(.36),"^",12)
"RTN","EASECSC1",48,0)
 W "      Mil Disab Retirement: ",$S(X=0:"NO",X=1:"YES",1:"")
"RTN","EASECSC1",49,0)
 S Z=21 S X=$P(DGRP(.36),U,13)
"RTN","EASECSC1",50,0)
 W "           Dischrg Due to Disab: ",$S(X=1:"YES",X=0:"NO",1:"")
"RTN","EASECSC1",51,0)
 S Z=14 D WW W "      Dent Inj: " S DGRPX=DGRP(.36),X=8,Z1=28 D YN W "Teeth Extracted: " S X=9,Z1=9 D YN S DGRPD=0 I $P(DGRPX,"^",8)="Y",$P(DGRPX,"^",9)="Y" S DGRPD=1
"RTN","EASECSC1",52,0)
 I DGRPD S I1="" F I=0:0 S I=$O(^DPT(DFN,.37,I)) Q:'I  S I1=1,DGRPX=^(I,0) D DEN
"RTN","EASECSC1",53,0)
 S DGRPX=DGRP(.322)
"RTN","EASECSC1",54,0)
 S Z=15 D WW W "    Yugoslavia: " S (DGX,X)=19,Z1=6 D YN W "From: " S X=20,Z1=13 D DAT W "To: " S X=21,Z1=12 D DAT
"RTN","EASECSC1",55,0)
 S Z=16 D WW W "  Purple Heart: " S DGRPX=DGRP(.53),X=1 D YN D
"RTN","EASECSC1",56,0)
 . I $P($G(DGRPX),U)="Y",($P($G(DGRPX),U,2)]"") W ?26,"PH Status: "_$S($P($G(DGRPX),U,2)="1":"Pending",$P($G(DGRPX),U,2)="2":"In Process",$P($G(DGRPX),U,2)="3":"Confirmed",1:"")
"RTN","EASECSC1",57,0)
 I $P($G(DGRPX),U)="N" D
"RTN","EASECSC1",58,0)
 . S DGX=$P(DGRPX,U,3)
"RTN","EASECSC1",59,0)
 . S DGX=$S($G(DGX)=1:"UNACCEPTABLE DOCUMENTATION",$G(DGX)=2:"NO DOCUMENTATION REC'D",$G(DGX)=3:"ENTERED IN ERROR",$G(DGX)=4:"UNSUPPORTED PURPLE HEART",$G(DGX)=5:"VAMC",$G(DGX)=6:"UNDELIVERABLE MAIL",1:"")
"RTN","EASECSC1",60,0)
 . I $G(DGX)]"" W ?26,"PH Remarks: "_$S($G(DGX)]"":$G(DGX),1:"")
"RTN","EASECSC1",61,0)
 S Z=17 D WW W "    N/T Radium: " D     ;N/T Radium Treatment expos.
"RTN","EASECSC1",62,0)
 . N DGNT S DGRPX=$$GETCUR^DGNTAPI(DFN,"DGNT") W $G(DGNT("INTRP")) I $G(DGNT("INTRP"))["YES" W "*" S DGLTCEX=1
"RTN","EASECSC1",63,0)
Q K DGRPD,DGRPSV
"RTN","EASECSC1",64,0)
 Q
"RTN","EASECSC1",65,0)
YN S Z=$S($P(DGRPX,"^",X)="Y":"YES",$P(DGRPX,"^",X)="N":"NO",$P(DGRPX,"^",X)="U":"UNK",1:"") S:Z="YES"&($G(DGLTC)) Z=Z_"*",DGLTCEX=1 D WW1^DGRPV K DGLTC Q
"RTN","EASECSC1",66,0)
DAT S Z=$P(DGRPX,"^",X) I Z']"" S Z=""
"RTN","EASECSC1",67,0)
 E  S Z=$$FMTE^XLFDT(Z,"5DZ")
"RTN","EASECSC1",68,0)
 D WW1^DGRPV Q
"RTN","EASECSC1",69,0)
DEN W !?3," Trt Date: " S X=1,Z1=10 D DAT W "Cond.: ",$E($P(DGRPX,"^",2),1,45) Q
"RTN","EASECSC1",70,0)
S N DGRPSB S DGRPSB=+$P(DGRPX,U,DGRPSV+1)  ;Service Branch
"RTN","EASECSC1",71,0)
 W !?4,$S($D(^DIC(23,DGRPSB,0)):$E($P(^(0),"^",1),1,15),1:DGRPU) W:$$FV^DGRPMS(DGRPSB)=1 ?20,"("_$P(DGRP(.321),U,14)_")"
"RTN","EASECSC1",72,0)
 W ?27,$S($P(DGRPX,"^",DGRPSV+4)]"":$P(DGRPX,"^",DGRPSV+4),1:DGRPU)
"RTN","EASECSC1",73,0)
 F I=2,3 S X=$P(DGRPX,"^",DGRPSV+I),X=$S(X]"":$$FMTE^XLFDT(X,"5DZ"),1:"UNKNOWN") W ?$S(I=2:46,1:58),X
"RTN","EASECSC1",74,0)
 W ?70,$S($D(^DIC(25,+$P(DGRPX,"^",DGRPSV),0)):$E($P(^(0),"^",1),1,9),1:"UNKNOWN") Q
"RTN","EASECSC1",75,0)
MR W !?19,"Receiving Military retirement in lieu of VA Compensation." Q
"RTN","EASECSC1",76,0)
WW ;Write number on screens for display and/or edit (Z=number)
"RTN","EASECSC1",77,0)
 ; NOTE: This section was copied from WW^DGRPV and modified specifically
"RTN","EASECSC1",78,0)
 ;       for LTC.  The code calling ^DGRPV has been redirected here.
"RTN","EASECSC1",79,0)
 W:DGRPW !
"RTN","EASECSC1",80,0)
 Q
"RTN","EASEZC2")
0^13^B39659618
"RTN","EASEZC2",1,0)
EASEZC2 ;ALB/jap - Compare 1010EZ Data with VistA Database ;10/16/00  13:08
"RTN","EASEZC2",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**1,51,70**;Mar 15, 2001;Build 26
"RTN","EASEZC2",3,0)
 ;
"RTN","EASEZC2",4,0)
A408 ;get applicant financial data from VistA
"RTN","EASEZC2",5,0)
 N IENS,IEN,B,FF,FILE,SUBF,FLD,MAP,VDATA,KEY,EASAEL
"RTN","EASEZC2",6,0)
 S IENS=$G(INCREL(408,"V",1))
"RTN","EASEZC2",7,0)
 Q:IENS=""
"RTN","EASEZC2",8,0)
 ;associate each ien with file/subfile
"RTN","EASEZC2",9,0)
 S B=0 F FF=408.12,2,408.21,408.22 D
"RTN","EASEZC2",10,0)
 . S B=B+1,IEN=+$P(IENS,U,B)
"RTN","EASEZC2",11,0)
 . Q:'IEN  Q:FF=2
"RTN","EASEZC2",12,0)
 . S (FILE,SUBF)=FF
"RTN","EASEZC2",13,0)
 . S FLD=0 F  S FLD=$O(^TMP("EZINDEX",$J,"A",FILE,SUBF,FLD)) Q:FLD=""  D
"RTN","EASEZC2",14,0)
 . . S MAP=FILE_U_SUBF_U_FLD
"RTN","EASEZC2",15,0)
 . . ;get patient database data
"RTN","EASEZC2",16,0)
 . . S VDATA=$$GET^EASEZC1(IEN,MAP)
"RTN","EASEZC2",17,0)
 . . ;store link in all 1010EZ elements associated with this file/subfile
"RTN","EASEZC2",18,0)
 . . ;store patient data in tmp array and link in subfile #712.01; KEY is ien to file #711
"RTN","EASEZC2",19,0)
 . . S KEY=0 F  S KEY=$O(^TMP("EZINDEX",$J,"A",FILE,SUBF,FLD,KEY)) Q:'KEY  D
"RTN","EASEZC2",20,0)
 . . . S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZC2",21,0)
 . . . S EASAEL=$P($G(^TMP("EZDATA",$J,KEY,1,1)),U,3)
"RTN","EASEZC2",22,0)
 . . . I EASAEL D LINKUP^EASEZU1(EASAPP,EASAEL,IEN)
"RTN","EASEZC2",23,0)
 . . . I 'EASAEL,VDATA'="" D ADD71201^EASEZU1(EASAPP,KEY,IEN,1)
"RTN","EASEZC2",24,0)
 Q
"RTN","EASEZC2",25,0)
 ;
"RTN","EASEZC2",26,0)
SP408 ;get spouse financial data from VistA
"RTN","EASEZC2",27,0)
 ;
"RTN","EASEZC2",28,0)
 N B,TYPE,MAP,M,MM,NSD,OUT,X,IEN,IENS,KEY,FILE,FF,FFF,FLD,SUBF,SUBIEN,VDATA,WHERE
"RTN","EASEZC2",29,0)
 ;get identifying data for database spouse
"RTN","EASEZC2",30,0)
 S IENS=$G(INCREL(408,"S",1))
"RTN","EASEZC2",31,0)
 Q:IENS=""
"RTN","EASEZC2",32,0)
 ;associate each ien with file/subfile
"RTN","EASEZC2",33,0)
 S B=0 F FF=408.12,408.13,408.21,408.22 D
"RTN","EASEZC2",34,0)
 . S B=B+1,IEN=+$P(IENS,U,B)
"RTN","EASEZC2",35,0)
 . Q:'IEN
"RTN","EASEZC2",36,0)
 . S (FILE,SUBF)=FF
"RTN","EASEZC2",37,0)
 . S FLD=0 F  S FLD=$O(^TMP("EZINDEX",$J,"S",FILE,SUBF,FLD)) Q:FLD=""  D
"RTN","EASEZC2",38,0)
 . . S MAP=FILE_U_SUBF_U_FLD
"RTN","EASEZC2",39,0)
 . . ;get patient database data
"RTN","EASEZC2",40,0)
 . . S VDATA=$$GET^EASEZC1(IEN,MAP)
"RTN","EASEZC2",41,0)
 . . ;store link in all 1010EZ elements associated with this file/subfile
"RTN","EASEZC2",42,0)
 . . ;store patient data in tmp array and link in subfile #712.01; KEY is ien to file #711
"RTN","EASEZC2",43,0)
 . . S KEY=0 F  S KEY=$O(^TMP("EZINDEX",$J,"S",FILE,SUBF,FLD,KEY)) Q:'KEY  D
"RTN","EASEZC2",44,0)
 . . . S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZC2",45,0)
 . . . S EASAEL=$P($G(^TMP("EZDATA",$J,KEY,1,1)),U,3)
"RTN","EASEZC2",46,0)
 . . . I EASAEL D LINKUP^EASEZU1(EASAPP,EASAEL,IEN)
"RTN","EASEZC2",47,0)
 . . . I 'EASAEL,VDATA'="" D ADD71201^EASEZU1(EASAPP,KEY,IEN,1)
"RTN","EASEZC2",48,0)
 . ;get data in subfile #408.1275
"RTN","EASEZC2",49,0)
 . I FILE=408.12 S SUBF=408.1275 S FLD=0 F  S FLD=$O(^TMP("EZINDEX",$J,"S",FILE,SUBF,FLD)) Q:FLD=""  D
"RTN","EASEZC2",50,0)
 . . S SUBIEN=$$I1275^EASEZI(IEN)
"RTN","EASEZC2",51,0)
 . . S MAP=FILE_U_SUBF_U_FLD,WHERE=IEN_";"_SUBIEN
"RTN","EASEZC2",52,0)
 . . S VDATA=$$GET^EASEZC1(WHERE,MAP)
"RTN","EASEZC2",53,0)
 . . ;store link in all 1010EZ elements associated with this file/subfile
"RTN","EASEZC2",54,0)
 . . ;store patient data in tmp array and link in subfile #712.01; KEY is ien to file #711
"RTN","EASEZC2",55,0)
 . . S KEY=0 F  S KEY=$O(^TMP("EZINDEX",$J,"S",FILE,SUBF,FLD,KEY)) Q:'KEY  D
"RTN","EASEZC2",56,0)
 . . . S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZC2",57,0)
 . . . S EASAEL=$P($G(^TMP("EZDATA",$J,KEY,1,1)),U,3)
"RTN","EASEZC2",58,0)
 . . . I EASAEL D LINKUP^EASEZU1(EASAPP,EASAEL,WHERE)
"RTN","EASEZC2",59,0)
 . . . I 'EASAEL,VDATA'="" D ADD71201^EASEZU1(EASAPP,KEY,WHERE,1)
"RTN","EASEZC2",60,0)
 Q
"RTN","EASEZC2",61,0)
 ;
"RTN","EASEZC2",62,0)
C1N408 ;get child/dependent financial data from VistA
"RTN","EASEZC2",63,0)
 N B,PERS,EZ,PT,TYPE,GRP,GRP1,MAP,M,MM,NSD,OUT,X,IEN,IENS,FLD,FF,FFF,FILE,SUBF,SUBIEN,VDATA,WHERE
"RTN","EASEZC2",64,0)
 ;
"RTN","EASEZC2",65,0)
 ;get identifying data for 1010EZ child dependents
"RTN","EASEZC2",66,0)
 K PERS("EZ")
"RTN","EASEZC2",67,0)
 S TYPE="CHILD1" S X=$$NSD^EASEZU3(EASAPP,TYPE,1) I X'="" S PERS("EZ",TYPE,1)=X
"RTN","EASEZC2",68,0)
 S TYPE="CHILD(N)",M=0,OUT=0 F  S M=M+1 D  Q:OUT
"RTN","EASEZC2",69,0)
 . S X=$$NSD^EASEZU3(EASAPP,TYPE,M)
"RTN","EASEZC2",70,0)
 . I X="" S OUT=1 Q
"RTN","EASEZC2",71,0)
 . S PERS("EZ",TYPE,M)=X
"RTN","EASEZC2",72,0)
 ;
"RTN","EASEZC2",73,0)
 ;get identifying data for all database dependents
"RTN","EASEZC2",74,0)
 K PERS("PT")
"RTN","EASEZC2",75,0)
 S M=0,MM=0 F  S M=$O(INCREL(408,"C",M)) Q:'M  D
"RTN","EASEZC2",76,0)
 . S IEN=+$P(INCREL(408,"C",M),U,2)
"RTN","EASEZC2",77,0)
 . S NSD="" F FLD=".01",".09",".03" D
"RTN","EASEZC2",78,0)
 . . S FFF="408.13^408.13^"_FLD S X=$$GET^EASEZC1(IEN,FFF)
"RTN","EASEZC2",79,0)
 . . I FLD=".09" S X=$$SSNOUT^EASEZT1(X)
"RTN","EASEZC2",80,0)
 . . S NSD=NSD_X_U
"RTN","EASEZC2",81,0)
 . S MM=MM+1,PERS("PT","CHILD",MM)=NSD,PERS("PT","CHILD",MM,"IENS")=INCREL(408,"C",M)
"RTN","EASEZC2",82,0)
 ;
"RTN","EASEZC2",83,0)
 ;match each EZ child dependent to database dependent if possible
"RTN","EASEZC2",84,0)
 F TYPE="CHILD1","CHILD(N)" S M=0 F  S M=$O(PERS("EZ",TYPE,M)) Q:'M  D
"RTN","EASEZC2",85,0)
 . S EZ=PERS("EZ",TYPE,M)
"RTN","EASEZC2",86,0)
 . S MM=0 F  S MM=$O(PERS("PT","CHILD",MM)) Q:'MM  S PT=PERS("PT","CHILD",MM) D
"RTN","EASEZC2",87,0)
 . . I ($P(EZ,U,2,3)=$P(PT,U,2,3))!($$CMORE^EASEZC2(EZ,PT)) D
"RTN","EASEZC2",88,0)
 . . . S PERS("EZ",TYPE,M,"IENS")=PERS("PT","CHILD",MM,"IENS")
"RTN","EASEZC2",89,0)
 . . . K PERS("PT","CHILD",MM)
"RTN","EASEZC2",90,0)
 ;
"RTN","EASEZC2",91,0)
 ;get identifying data for child in database
"RTN","EASEZC2",92,0)
 F TYPE="CHILD1","CHILD(N)" S M=0 F  S M=$O(PERS("EZ",TYPE,M)) Q:'M  D
"RTN","EASEZC2",93,0)
 . S IENS=$G(PERS("EZ",TYPE,M,"IENS"))
"RTN","EASEZC2",94,0)
 . Q:IENS=""
"RTN","EASEZC2",95,0)
 . S GRP=$S(TYPE="CHILD1":"C1",1:"CN")
"RTN","EASEZC2",96,0)
 . ;associate each ien with file/subfile
"RTN","EASEZC2",97,0)
 . S B=0 F FF=408.12,408.13,408.21,408.22 D
"RTN","EASEZC2",98,0)
 . . S B=B+1,IEN=+$P(IENS,U,B)
"RTN","EASEZC2",99,0)
 . . Q:'IEN
"RTN","EASEZC2",100,0)
 . . S (FILE,SUBF)=FF
"RTN","EASEZC2",101,0)
 . . S FLD=0 F  S FLD=$O(^TMP("EZINDEX",$J,GRP,FILE,SUBF,FLD)) Q:FLD=""  D
"RTN","EASEZC2",102,0)
 . . . S MAP=FILE_U_SUBF_U_FLD
"RTN","EASEZC2",103,0)
 . . . S GRP1=GRP I EASVRSN>5.99,FILE=408.21,"^.08^.14^.17^2.01^2.03^2.04^"[("^"_FLD_"^") S GRP1="CN"
"RTN","EASEZC2",104,0)
 . . . ;get patient database data
"RTN","EASEZC2",105,0)
 . . . S VDATA=$$GET^EASEZC1(IEN,MAP)
"RTN","EASEZC2",106,0)
 . . . ;I FILE=408.21 W !,FLD,?8,TYPE,?18,M,?21,VDATA ;instrumentation for testing
"RTN","EASEZC2",107,0)
 . . . ;store link in all 1010EZ elements associated with this file/subfile
"RTN","EASEZC2",108,0)
 . . . ;store patient data in tmp array and link in subfile #712.01; KEY is ien to file #711
"RTN","EASEZC2",109,0)
 . . . S KEY=$O(^TMP("EZINDEX",$J,GRP1,FILE,SUBF,FLD,0)) Q:'KEY  D
"RTN","EASEZC2",110,0)
 . . . . S MM=M I EASVRSN>5.99,FILE=408.21,"^.08^.14^.17^2.01^2.03^2.04^"[("^"_FLD_"^") S:(TYPE="CHILD(N)") MM=M+1
"RTN","EASEZC2",111,0)
 . . . . ;I FILE=408.21 W !,"*",FLD,?8,TYPE,?18,MM,?21,VDATA ;instrumentation for testing
"RTN","EASEZC2",112,0)
 . . . . S ^TMP("EZDATA",$J,KEY,MM,2)=VDATA
"RTN","EASEZC2",113,0)
 . . . . S EASAEL=$P($G(^TMP("EZDATA",$J,KEY,MM,1)),U,3)
"RTN","EASEZC2",114,0)
 . . . . I EASAEL D LINKUP^EASEZU1(EASAPP,EASAEL,IEN)
"RTN","EASEZC2",115,0)
 . . . . I 'EASAEL,VDATA'="" D ADD71201^EASEZU1(EASAPP,KEY,IEN,1)
"RTN","EASEZC2",116,0)
 . . ;get data in subfile #408.1275
"RTN","EASEZC2",117,0)
 . . I FILE=408.12 S SUBF=408.1275 S FLD=0 F  S FLD=$O(^TMP("EZINDEX",$J,GRP,FILE,SUBF,FLD)) Q:FLD=""  D
"RTN","EASEZC2",118,0)
 . . . S SUBIEN=$$I1275^EASEZI(IEN)
"RTN","EASEZC2",119,0)
 . . . S MAP=FILE_U_SUBF_U_FLD,WHERE=IEN_";"_SUBIEN
"RTN","EASEZC2",120,0)
 . . . S VDATA=$$GET^EASEZC1(WHERE,MAP)
"RTN","EASEZC2",121,0)
 . . . ;store link in all 1010EZ elements associated with this file/subfile
"RTN","EASEZC2",122,0)
 . . . ;store patient data in tmp array and link in subfile #712.01; KEY is ien to file #711
"RTN","EASEZC2",123,0)
 . . . S KEY=0 F  S KEY=$O(^TMP("EZINDEX",$J,GRP,FILE,SUBF,FLD,KEY)) Q:'KEY  D
"RTN","EASEZC2",124,0)
 . . . . S ^TMP("EZDATA",$J,KEY,MM,2)=VDATA
"RTN","EASEZC2",125,0)
 . . . . S EASAEL=$P($G(^TMP("EZDATA",$J,KEY,MM,1)),U,3)
"RTN","EASEZC2",126,0)
 . . . . I EASAEL D LINKUP^EASEZU1(EASAPP,EASAEL,WHERE)
"RTN","EASEZC2",127,0)
 . . . . I 'EASAEL,VDATA'="" D ADD71201^EASEZU1(EASAPP,KEY,WHERE,1)
"RTN","EASEZC2",128,0)
 Q
"RTN","EASEZC2",129,0)
 ;
"RTN","EASEZC2",130,0)
CMORE(EZ,PT) ;
"RTN","EASEZC2",131,0)
 ;input EZ = name^ssn^dob of child on 1010EZ
"RTN","EASEZC2",132,0)
 ;      PT = name^ssn^dob of child in database
"RTN","EASEZC2",133,0)
 ;output MATCH = 0, if no match
"RTN","EASEZC2",134,0)
 N PSSN,PDOB,ESSN,EDOB,K,MATCH,MATCH1,MATCH2
"RTN","EASEZC2",135,0)
 S (MATCH,MATCH1,MATCH2)=0
"RTN","EASEZC2",136,0)
 S ESSN=$P(EZ,U,2),EDOB=$P(EZ,U,3),PSSN=$P(PT,U,2),PDOB=$P(PT,U,3)
"RTN","EASEZC2",137,0)
 S MATCH1=0 F K=1,2,3,5,6,8,9,10,11 I $P(ESSN,U,K)=$P(PSSN,U,K) S MATCH1=MATCH1+1
"RTN","EASEZC2",138,0)
 I $P(EDOB,"/",3)=$P(PDOB,"/",3) S MATCH2=1
"RTN","EASEZC2",139,0)
 I MATCH1>7,MATCH2 S MATCH=1
"RTN","EASEZC2",140,0)
 Q MATCH
"RTN","EASEZDD")
0^1^B27307767
"RTN","EASEZDD",1,0)
EASEZDD ;ALB/CMF - EZ help for long texts  ;22 FEB 2005
"RTN","EASEZDD",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**57,70**;Mar 15, 2001;Build 26
"RTN","EASEZDD",3,0)
 ;
"RTN","EASEZDD",4,0)
H112 ;Non-Reimbursed Medical Expenses (408.21 / 1.12)
"RTN","EASEZDD",5,0)
 ;EAS*1.0*70
"RTN","EASEZDD",6,0)
 S DIR("?",1)="This response must be a number.  Enter the total amount of non-reimbursed"
"RTN","EASEZDD",7,0)
 S DIR("?",2)="medical expenses paid by the veteran during the previous calendar year.  The"
"RTN","EASEZDD",8,0)
 S DIR("?",3)="expenses can be for the veteran or for persons that the veteran has a legal or"
"RTN","EASEZDD",9,0)
 S DIR("?",4)="moral obligation to support.  The expenses must actually have been paid by the"
"RTN","EASEZDD",10,0)
 S DIR("?",5)="veteran.  Reportable medical expenses include amounts paid for the following:"
"RTN","EASEZDD",11,0)
 S DIR("?",6)="fees of physicians, dentists, and other providers of health services; hospital"
"RTN","EASEZDD",12,0)
 S DIR("?",7)="and nursing home fees; medical insurance premiums (including the Medicare"
"RTN","EASEZDD",13,0)
 S DIR("?",8)="premium); drugs and medicines; eyeglasses; any other expenses that are"
"RTN","EASEZDD",14,0)
 S DIR("?",9)="reasonably related to medical care.  Do not list expenses which the veteran has"
"RTN","EASEZDD",15,0)
 S DIR("?",10)="paid if the veteran expects to receive reimbursement from insurance or some"
"RTN","EASEZDD",16,0)
 S DIR("?",11)="other source."
"RTN","EASEZDD",17,0)
 S DIR("?",12)=" "
"RTN","EASEZDD",18,0)
 S DIR("?",13)="By law, not all of the non-reimbursed medical expenses paid by the veteran"
"RTN","EASEZDD",19,0)
 S DIR("?",14)="during the previous calendar year may be deducted from the total annual income."
"RTN","EASEZDD",20,0)
 S DIR("?",15)="The total amount of the non-reimbursed medical expenses entered in this field"
"RTN","EASEZDD",21,0)
 S DIR("?",16)="will be automatically adjusted based upon the veteran's maximum annual pension"
"RTN","EASEZDD",22,0)
 S DIR("?",17)="amount and number of dependents."
"RTN","EASEZDD",23,0)
 S DIR("?",18)=" "
"RTN","EASEZDD",24,0)
 S DIR("?",19)="Intake clerks should remind the veteran to keep receipts for claimed medical"
"RTN","EASEZDD",25,0)
 S DIR("?")="expenses."
"RTN","EASEZDD",26,0)
 Q
"RTN","EASEZDD",27,0)
 ;
"RTN","EASEZDD",28,0)
H07 ;Amount Contributed to Spouse
"RTN","EASEZDD",29,0)
 S DIR("?",1)="If the veteran did not live with his or her spouse, enter"
"RTN","EASEZDD",30,0)
 S DIR("?",2)="in this field the amount the veteran contributed to his"
"RTN","EASEZDD",31,0)
 S DIR("?",3)="or her spouse last calendar year.  If the amount the"
"RTN","EASEZDD",32,0)
 S DIR("?",4)="veteran contributed is less than $600, then the spouse"
"RTN","EASEZDD",33,0)
 S DIR("?")="will not be considered a dependent for financial assessment."
"RTN","EASEZDD",34,0)
 Q
"RTN","EASEZDD",35,0)
H18 ;Child 18-23 In School
"RTN","EASEZDD",36,0)
 S DIR("?",1)="Enter 'Y' if the child is currently 18 to 23 years old"
"RTN","EASEZDD",37,0)
 S DIR("?",2)="and the child attended school last calendar year.  Enter"
"RTN","EASEZDD",38,0)
 S DIR("?",3)="'N' if the child is currently 18 to 23 years old but the"
"RTN","EASEZDD",39,0)
 S DIR("?",4)="child did not attend school last calendar year.  Enter"
"RTN","EASEZDD",40,0)
 S DIR("?")="'N' if the child is not currently 18 to 23 years old."
"RTN","EASEZDD",41,0)
 Q
"RTN","EASEZDD",42,0)
 ;
"RTN","EASEZDD",43,0)
H19 ;Amount Contributed to Child
"RTN","EASEZDD",44,0)
 S DIR("?",1)="Enter in this field the dollar amount that the veteran"
"RTN","EASEZDD",45,0)
 S DIR("?",2)="contributed to the child's support last calendar year."
"RTN","EASEZDD",46,0)
 S DIR("?",3)="The contributions do not have to be in regular set amounts."
"RTN","EASEZDD",47,0)
 S DIR("?",4)="For example, a veteran who paid a child's school tuition or"
"RTN","EASEZDD",48,0)
 S DIR("?")="medical bills would be contributing to the child's support."
"RTN","EASEZDD",49,0)
 Q
"RTN","EASEZDD",50,0)
 ;
"RTN","EASEZDD",51,0)
H362 ;Military Comp
"RTN","EASEZDD",52,0)
 S DIR("?",1)="Enter '0' or 'NO' if the veteran: --Is NOT retired from the military OR --Is"
"RTN","EASEZDD",53,0)
 S DIR("?",2)="retired from the military due to length of service AND does NOT have a"
"RTN","EASEZDD",54,0)
 S DIR("?",3)="disability confirmed by the Military Branch to have been incurred in or "
"RTN","EASEZDD",55,0)
 S DIR("?",4)="aggravated while on active duty.  Enter '1' or 'YES, RECEIVING MILITARY"
"RTN","EASEZDD",56,0)
 S DIR("?",5)="RETIREMENT', if the veteran: --Is confirmed by the Military Branch to have"
"RTN","EASEZDD",57,0)
 S DIR("?",6)="been discharged or released due to a disability incurred in or aggravated"
"RTN","EASEZDD",58,0)
 S DIR("?",7)="while on active duty AND --Has NOT filed a claim for VA compensation benefits"
"RTN","EASEZDD",59,0)
 S DIR("?",8)="OR --Has been rated by the VA to be NSC OR --Has been rated by the VA to"
"RTN","EASEZDD",60,0)
 S DIR("?",9)="have noncompensable 0% SC conditions.  Enter '2' or 'YES, RECEIVING MILITARY"
"RTN","EASEZDD",61,0)
 S DIR("?",10)="RETIREMENT IN LIEU OF VA COMPENSATION',if the veteran: --Is confirmed by the"
"RTN","EASEZDD",62,0)
 S DIR("?",11)="Military Branch to have been discharged or released due to a disability"
"RTN","EASEZDD",63,0)
 S DIR("?",12)="incurred in or aggravated while on active duty, AND --Is receiving military"
"RTN","EASEZDD",64,0)
 S DIR("?",13)="disability retirement pay AND --Has been rated by VA to have compensable SC"
"RTN","EASEZDD",65,0)
 S DIR("?")="conditions but is NOT receiving compensation from the VA."
"RTN","EASEZDD",66,0)
 Q
"RTN","EASEZDD",67,0)
AC ;Area Code
"RTN","EASEZDD",68,0)
 S DIR(0)="FO^3:3^K:X'?3N X"
"RTN","EASEZDD",69,0)
 S DIR("?")="This response must be numeric. Use format nnn. Example 904,412."
"RTN","EASEZDD",70,0)
 Q
"RTN","EASEZDD",71,0)
PN ;Phone Number
"RTN","EASEZDD",72,0)
 S DIR(0)="FO^8:8^K:X'?3N1""-""4N X"
"RTN","EASEZDD",73,0)
 S DIR("?")="This response must be numeric. Use format nnn-nnnn. Example 222-1234."
"RTN","EASEZDD",74,0)
 Q
"RTN","EASEZDD2")
0^6^B51504841
"RTN","EASEZDD2",1,0)
EASEZDD2        ;ALB/AMA - EZ help for long texts, con't
"RTN","EASEZDD2",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**70**;Mar 15, 2001;Build 26
"RTN","EASEZDD2",3,0)
 ;
"RTN","EASEZDD2",4,0)
H14 ;Employment Income (408.21/.14)
"RTN","EASEZDD2",5,0)
 S DIR("?",1)="This response must be a number.  Enter in this field the gross income amount"
"RTN","EASEZDD2",6,0)
 S DIR("?",2)="received from Employment during the previous calendar year.  This includes"
"RTN","EASEZDD2",7,0)
 S DIR("?",3)="wages, bonuses, salary, earnings, and tips.  Exclude income from your farm,"
"RTN","EASEZDD2",8,0)
 S DIR("?")="ranch, property, or business."
"RTN","EASEZDD2",9,0)
 Q
"RTN","EASEZDD2",10,0)
 ;
"RTN","EASEZDD2",11,0)
H17 ;Farm or Business Income (408.21/.17)
"RTN","EASEZDD2",12,0)
 S DIR("?",1)="This response must be a number.  Enter in this field the net income amount"
"RTN","EASEZDD2",13,0)
 S DIR("?",2)="from your farm, ranch, property, or business received during the previous"
"RTN","EASEZDD2",14,0)
 S DIR("?",3)="calendar year."
"RTN","EASEZDD2",15,0)
 S DIR("?",4)=" "
"RTN","EASEZDD2",16,0)
 S DIR("?",5)="Business or Farm Income.  Net income from operation of a farm or other"
"RTN","EASEZDD2",17,0)
 S DIR("?",6)="business is countable.  If a veteran reports this type of income, have the"
"RTN","EASEZDD2",18,0)
 S DIR("?",7)="veteran complete VA Form 21-4165, Pension Claim Questionnaire for Farm Income,"
"RTN","EASEZDD2",19,0)
 S DIR("?",8)="or VA Form 21-4185, Report of Income from Property or Business.  To identify"
"RTN","EASEZDD2",20,0)
 S DIR("?",9)="the net income, subtract the veteran's business or farm expenses from the"
"RTN","EASEZDD2",21,0)
 S DIR("?",10)="gross income derived from the business or farm.  The result should be entered"
"RTN","EASEZDD2",22,0)
 S DIR("?",11)="in this field.  If the veteran or veteran's spouse or child receives a salary"
"RTN","EASEZDD2",23,0)
 S DIR("?",12)="from the business, it should be reported in the 'Total Employment Income'"
"RTN","EASEZDD2",24,0)
 S DIR("?")="field.  Also, note that depreciation is not a deductible expense for VA purposes."
"RTN","EASEZDD2",25,0)
 Q
"RTN","EASEZDD2",26,0)
H08 ;All Other Income (408.21/.08)
"RTN","EASEZDD2",27,0)
 S DIR("?",1)="This response must be a number.  Enter in this field the annual amount of"
"RTN","EASEZDD2",28,0)
 S DIR("?",2)="other income received during the previous calendar year.  This includes,"
"RTN","EASEZDD2",29,0)
 S DIR("?",3)="but is not limited to, Social Security Retirement and/or Disability Income;"
"RTN","EASEZDD2",30,0)
 S DIR("?",4)="compensation benefits such as VA disability, unemployment, retirement, and"
"RTN","EASEZDD2",31,0)
 S DIR("?",5)="pension income; interest; and dividends.  Exclude welfare, Supplemental"
"RTN","EASEZDD2",32,0)
 S DIR("?",6)="Security Income (SSI), or need-based payments from a governmental agency,"
"RTN","EASEZDD2",33,0)
 S DIR("?",7)="profit from occasional sale of property, reinvested interest on IRAs."
"RTN","EASEZDD2",34,0)
 S DIR("?")="See 38 CFR 3.272 for more information."
"RTN","EASEZDD2",35,0)
 Q
"RTN","EASEZDD2",36,0)
H102 ;Funeral and Burial Expenses (408.21/1.02)
"RTN","EASEZDD2",37,0)
 S DIR("?",1)="This response must be a number.  Enter in this field amounts paid by the"
"RTN","EASEZDD2",38,0)
 S DIR("?",2)="veteran during the previous calendar year for funeral or burial expenses of"
"RTN","EASEZDD2",39,0)
 S DIR("?",3)="the veteran's deceased spouse or child or for pre-paid funeral or burial"
"RTN","EASEZDD2",40,0)
 S DIR("?",4)="expenses of the veteran, spouse, or any dependent child.  Do not report"
"RTN","EASEZDD2",41,0)
 S DIR("?",5)="amounts paid for funeral or burial expenses of other relatives such as"
"RTN","EASEZDD2",42,0)
 S DIR("?")="parents, siblings, etc."
"RTN","EASEZDD2",43,0)
 Q
"RTN","EASEZDD2",44,0)
H201 ;Cash, Amount in Bank Accounts (408.21/2.01)
"RTN","EASEZDD2",45,0)
 S DIR("?",1)="This response must be a number.  Enter in this field cash and amounts"
"RTN","EASEZDD2",46,0)
 S DIR("?",2)="in bank accounts.  This includes checking accounts, savings accounts,"
"RTN","EASEZDD2",47,0)
 S DIR("?",3)="Certificates of Deposit (CDs), Individual Retirement Accounts (IRAs),"
"RTN","EASEZDD2",48,0)
 S DIR("?")="stocks and bonds, etc."
"RTN","EASEZDD2",49,0)
 Q
"RTN","EASEZDD2",50,0)
H203 ;Veteran Land, Bldgs Less Mortgage (408.21/2.03)
"RTN","EASEZDD2",51,0)
 S DIR("?",1)="This response must be a number.  Enter in this field the current value of land"
"RTN","EASEZDD2",52,0)
 S DIR("?",2)="and buildings, less mortgages and liens."
"RTN","EASEZDD2",53,0)
 S DIR("?",3)=" "
"RTN","EASEZDD2",54,0)
 S DIR("?",4)="Do not report the value of the veteran's primary residence.  If the veteran's"
"RTN","EASEZDD2",55,0)
 S DIR("?",5)="primary residence is a multifamily dwelling, report the value of the building"
"RTN","EASEZDD2",56,0)
 S DIR("?",6)="less the value of the unit occupied by the veteran.  If the veteran lives on a"
"RTN","EASEZDD2",57,0)
 S DIR("?",7)="farm, report the value of the farm less the value of the house occupied by the"
"RTN","EASEZDD2",58,0)
 S DIR("?",8)="veteran and a reasonable surrounding area.  The size of the 'reasonable lot"
"RTN","EASEZDD2",59,0)
 S DIR("?",9)="area' that can be excluded from net worth consideration is determined by the"
"RTN","EASEZDD2",60,0)
 S DIR("?",10)="degree to which the property is connected to the dwelling and the typical"
"RTN","EASEZDD2",61,0)
 S DIR("?",11)="size of lots in the immediate area.  Contiguous land which is closely"
"RTN","EASEZDD2",62,0)
 S DIR("?",12)="connected to the dwelling in terms of use and which does not greatly exceed"
"RTN","EASEZDD2",63,0)
 S DIR("?",13)="the customary size of lots in the immediate area is excluded from net worth"
"RTN","EASEZDD2",64,0)
 S DIR("?",14)="consideration."
"RTN","EASEZDD2",65,0)
 S DIR("?",15)=" "
"RTN","EASEZDD2",66,0)
 S DIR("?",16)="NOTE:  Since the veteran's primary residence is not reported as an asset, the"
"RTN","EASEZDD2",67,0)
 S DIR("?",17)="mortgage may NOT be reported as a debt.  In addition, the value of any other"
"RTN","EASEZDD2",68,0)
 S DIR("?",18)="property owned by the veteran, spouse, or dependent children will be"
"RTN","EASEZDD2",69,0)
 S DIR("?")="calculated in the same manner."
"RTN","EASEZDD2",70,0)
 Q
"RTN","EASEZDD2",71,0)
H204 ;Other Property or Assets (408.21/2.04)
"RTN","EASEZDD2",72,0)
 S DIR("?",1)="This response must be a number.  Enter in this field the current market"
"RTN","EASEZDD2",73,0)
 S DIR("?",2)="value of other property or assets that are owned, minus the amount that"
"RTN","EASEZDD2",74,0)
 S DIR("?",3)="is owed on these items.  Include the value of farm, ranch, or business"
"RTN","EASEZDD2",75,0)
 S DIR("?",4)="assets.  However, do not report the value of household effects or vehicles"
"RTN","EASEZDD2",76,0)
 S DIR("?",5)="regularly used for family transportation.  Assets may include art, rare"
"RTN","EASEZDD2",77,0)
 S DIR("?")="coins, or collectibles."
"RTN","EASEZDD2",78,0)
 Q
"RTN","EASEZDD2",79,0)
HD203 ;Dependent Land, Bldgs Less Mortgage (408.21/2.03)
"RTN","EASEZDD2",80,0)
 S DIR("?",1)="This response must be a number.  Enter in this field the current value of land"
"RTN","EASEZDD2",81,0)
 S DIR("?",2)="and buildings, less mortgages and liens."
"RTN","EASEZDD2",82,0)
 S DIR("?",3)=" "
"RTN","EASEZDD2",83,0)
 S DIR("?",4)="Do not report the value of the person's primary residence.  If the person's"
"RTN","EASEZDD2",84,0)
 S DIR("?",5)="primary residence is a multifamily dwelling, report the value of the building"
"RTN","EASEZDD2",85,0)
 S DIR("?",6)="less the value of the unit occupied by the person.  If the person lives on a"
"RTN","EASEZDD2",86,0)
 S DIR("?",7)="farm, report the value of the farm less the value of the house occupied by the"
"RTN","EASEZDD2",87,0)
 S DIR("?",8)="person and a reasonable surrounding area.  The size of the 'reasonable lot"
"RTN","EASEZDD2",88,0)
 S DIR("?",9)="area' that can be excluded from net worth consideration is determined by the"
"RTN","EASEZDD2",89,0)
 S DIR("?",10)="degree to which the property is connected to the dwelling and the typical"
"RTN","EASEZDD2",90,0)
 S DIR("?",11)="size of lots in the immediate area.  Contiguous land which is closely"
"RTN","EASEZDD2",91,0)
 S DIR("?",12)="connected to the dwelling in terms of use and which does not greatly exceed"
"RTN","EASEZDD2",92,0)
 S DIR("?",13)="the customary size of lots in the immediate area is excluded from net worth"
"RTN","EASEZDD2",93,0)
 S DIR("?",14)="consideration."
"RTN","EASEZDD2",94,0)
 S DIR("?",15)=" "
"RTN","EASEZDD2",95,0)
 S DIR("?",16)="NOTE:  Since the person's primary residence is not reported as an asset, the"
"RTN","EASEZDD2",96,0)
 S DIR("?",17)="mortgage may NOT be reported as a debt.  In addition, the value of any other"
"RTN","EASEZDD2",97,0)
 S DIR("?",18)="property owned by the veteran, spouse, or dependent children will be"
"RTN","EASEZDD2",98,0)
 S DIR("?")="calculated in the same manner."
"RTN","EASEZDD2",99,0)
 Q
"RTN","EASEZF1")
0^21^B56560994
"RTN","EASEZF1",1,0)
EASEZF1 ;ALB/jap - Filing 1010EZ Data to Patient Database ; 8/11/05 1:50pm
"RTN","EASEZF1",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**1,51,57,62,70**;Mar 15, 2001;Build 26
"RTN","EASEZF1",3,0)
 ;
"RTN","EASEZF1",4,0)
F2(EASAPP,EASDFN) ;file to Patient record in #2
"RTN","EASEZF1",5,0)
 ;input EASDFN = ien to #2
"RTN","EASEZF1",6,0)
 N KEYIEN,FILE,SUBFILE,FLD,DATAKEY,MULTIPLE,SECT,QUES,SUBIEN,ACCEPT,EZDATA,PTDATA,LINK,EROOT,EAS,ERR,IENS,ARRAY,ELIGVER
"RTN","EASEZF1",7,0)
 N DIC,DIQ,DA,DR,X,Y,EZSTRG
"RTN","EASEZF1",8,0)
 Q:'$G(EASDFN)
"RTN","EASEZF1",9,0)
 L +^DPT(EASDFN)
"RTN","EASEZF1",10,0)
 I '$G(EASVRSN) S EASVRSN=$$VERSION^EASEZU4(EASAPP)
"RTN","EASEZF1",11,0)
 ;EAS*1.0*70 - Special handling for Foreign Address
"RTN","EASEZF1",12,0)
 S KEYIEN=+$$KEY711^EASEZU1("APPLICANT COUNTRY")
"RTN","EASEZF1",13,0)
 S DATAKEY=$P(^TMP("EZDATA",$J,KEYIEN),U,4)
"RTN","EASEZF1",14,0)
 S SECT=$P(DATAKEY,";"),QUES=$P(DATAKEY,";",2)
"RTN","EASEZF1",15,0)
 S EZDATA=$P($G(^TMP("EZTEMP",$J,SECT,1,QUES)),U,2)
"RTN","EASEZF1",16,0)
 I EZDATA="UNITED STATES" S EZSTRG="APPLICANT PROVINCE^APPLICANT POSTAL CODE"
"RTN","EASEZF1",17,0)
 E  S EZSTRG="APPLICANT COUNTY^APPLICANT STATE^APPLICANT ZIP"
"RTN","EASEZF1",18,0)
 F X=1:1 S DATANM=$P(EZSTRG,U,X) Q:DATANM=""  D
"RTN","EASEZF1",19,0)
 . S KEYIEN=+$$KEY711^EASEZU1(DATANM) Q:(KEYIEN=.1)
"RTN","EASEZF1",20,0)
 . S DATAKEY=$P(^TMP("EZDATA",$J,KEYIEN),U,4)
"RTN","EASEZF1",21,0)
 . S SECT=$P(DATAKEY,";"),QUES=$P(DATAKEY,";",2)
"RTN","EASEZF1",22,0)
 . K ^TMP("EZDATA",$J,KEYIEN),^TMP("EZTEMP",$J,SECT,1,QUES)
"RTN","EASEZF1",23,0)
 ;
"RTN","EASEZF1",24,0)
 S KEYIEN=0
"RTN","EASEZF1",25,0)
 F  S KEYIEN=$O(^TMP("EZDATA",$J,KEYIEN)) Q:'KEYIEN  D
"RTN","EASEZF1",26,0)
 . S LN=^TMP("EZDATA",$J,KEYIEN),FILE=$P(LN,U,1)
"RTN","EASEZF1",27,0)
 . Q:FILE'=2
"RTN","EASEZF1",28,0)
 . S SUBFILE=$P(LN,U,2),FLD=$P(LN,U,3),DATAKEY=$P(LN,U,4)
"RTN","EASEZF1",29,0)
 . S SECT=$P(DATAKEY,";",1),QUES=$P(DATAKEY,";",2)
"RTN","EASEZF1",30,0)
 . ;call to suppress may be redundant
"RTN","EASEZF1",31,0)
 . Q:$$SUPPRESS^EASEZU4(EASAPP,DATAKEY,1,EASVRSN)
"RTN","EASEZF1",32,0)
 . ;in file #2, multiple is always 1
"RTN","EASEZF1",33,0)
 . S MULTIPLE=1
"RTN","EASEZF1",34,0)
 . Q:'$D(^TMP("EZDATA",$J,KEYIEN,MULTIPLE,1))
"RTN","EASEZF1",35,0)
 . S X=$G(^TMP("EZTEMP",$J,SECT,MULTIPLE,QUES))
"RTN","EASEZF1",36,0)
 . Q:$P(X,U,1)'=KEYIEN
"RTN","EASEZF1",37,0)
 . S EZDATA=$P(X,U,2),ACCEPT=$P(X,U,3),SUBIEN=$P(X,U,4),PTDATA=$P(X,U,5)
"RTN","EASEZF1",38,0)
 . Q:EZDATA=""
"RTN","EASEZF1",39,0)
 . Q:'SUBIEN
"RTN","EASEZF1",40,0)
 . ;special handling for Designee
"RTN","EASEZF1",41,0)
 . I FLD=.3405 S EZDATA=$S(EZDATA="NEXT OF KIN":"YES",1:"NO")
"RTN","EASEZF1",42,0)
 . ;strip off code display from county
"RTN","EASEZF1",43,0)
 . I SECT="I",QUES="9E." S EZDATA=$P(EZDATA," (",1)
"RTN","EASEZF1",44,0)
 . ;get file #2 ien; always same as EASDFN
"RTN","EASEZF1",45,0)
 . S LINK=EASDFN
"RTN","EASEZF1",46,0)
 . ;don't continue if data item not accepted
"RTN","EASEZF1",47,0)
 . Q:ACCEPT<1
"RTN","EASEZF1",48,0)
 . ;process subfile data elsewhere
"RTN","EASEZF1",49,0)
 . I SUBFILE=2.01 Q
"RTN","EASEZF1",50,0)
 . I SUBFILE=2.101 Q
"RTN","EASEZF1",51,0)
 . I SUBFILE=2.02 D F202^EASEZF1(SUBFILE,DATAKEY,EZDATA,SUBIEN,KEYIEN) Q
"RTN","EASEZF1",52,0)
 . I SUBFILE=2.06 D F206^EASEZF1(SUBFILE,DATAKEY,EZDATA,SUBIEN) Q
"RTN","EASEZF1",53,0)
 . ;special conversion to file data to field #.328
"RTN","EASEZF1",54,0)
 . I FLD=.328 D
"RTN","EASEZF1",55,0)
 . . S X=$$UC^EASEZT1(EZDATA) I X="SSN" D
"RTN","EASEZF1",56,0)
 . . . ;allow SSN as Service Number only if field #.328 in patient record is null;
"RTN","EASEZF1",57,0)
 . . . S PTSSN=$$GETANY^EASEZU1(EASAPP,EASDFN,SUBIEN)
"RTN","EASEZF1",58,0)
 . . . I PTSSN="" S EZDATA="SS" Q
"RTN","EASEZF1",59,0)
 . . . ;otherwise Applicant SSN must match Patient SSN
"RTN","EASEZF1",60,0)
 . . . S KK=$$KEY711^EASEZU1("APPLICANT SOCIAL SECURITY NUMBER")
"RTN","EASEZF1",61,0)
 . . . S EZSSN=$P($G(^TMP("EZDATA",$J,KK,1,1)),U,1),EZSSN=$TR(EZSSN,"-","")
"RTN","EASEZF1",62,0)
 . . . I EZSSN=PTSSN S EZDATA="SS" Q
"RTN","EASEZF1",63,0)
 . . . S EZDATA="ssn"
"RTN","EASEZF1",64,0)
 . . K KK,PTSSN,EZSSN
"RTN","EASEZF1",65,0)
 . ;special for fields #.092 & #.093
"RTN","EASEZF1",66,0)
 . I FILE=2,((FLD=.092)!(FLD=.093)) D FPOB(DATAKEY,EZDATA,SUBIEN,PTDATA) Q
"RTN","EASEZF1",67,0)
 . ;don't need these lines after 672
"RTN","EASEZF1",68,0)
 . ;special for field #.362
"RTN","EASEZF1",69,0)
 . ;I FILE=2,FLD=.362,EASVRSN>5.99 I (EZDATA="Y")!(EZDATA="YES") S EZDATA="YES, RECEIVING MILITARY RETIREMENT IN LIEU OF VA COMPENSATION"
"RTN","EASEZF1",70,0)
 . Q:EZDATA=PTDATA
"RTN","EASEZF1",71,0)
 . ;repeat check for verified eligibility;
"RTN","EASEZF1",72,0)
 . ;do not file certain fields if eligibility verified
"RTN","EASEZF1",73,0)
 . K ARRAY
"RTN","EASEZF1",74,0)
 . S DA=EASDFN,DIC="^DPT(",DR=".3611;.3613",DIQ(0)="I",DIQ="ARRAY"
"RTN","EASEZF1",75,0)
 . D EN^DIQ1 K DA,DIC,DIQ,DR
"RTN","EASEZF1",76,0)
 . I $G(ARRAY(2,EASDFN,.3611,"I"))="V",$G(ARRAY(2,EASDFN,.3613,"I"))="H" S ELIGVER=1
"RTN","EASEZF1",77,0)
 . I FLD=.313,$G(ARRAY(2,EASDFN,.3611,"I"))="V" Q
"RTN","EASEZF1",78,0)
 . I $G(ELIGVER),((FLD=.301)!(FLD=.302)!(FLD=.36235)) Q
"RTN","EASEZF1",79,0)
 . ;special for field #.32102 - Agent Orange Exposure . DATAKEY = I;14F
"RTN","EASEZF1",80,0)
 . I FLD=.32102 D F32102^EASEZF1A(EASAPP,EASDFN,EZDATA)
"RTN","EASEZF1",81,0)
 . ;setup to call FM database server using EASDFN as file #2 record
"RTN","EASEZF1",82,0)
 . K EAS,ERR
"RTN","EASEZF1",83,0)
 . S IENS=EASDFN_","
"RTN","EASEZF1",84,0)
 . S EROOT="EAS("_EASAPP_")"
"RTN","EASEZF1",85,0)
 . D VAL^DIE(2,IENS,FLD,"F",EZDATA,,EROOT,"ERR")
"RTN","EASEZF1",86,0)
 . ;try to resolve possible invalid input for free text fields due to length
"RTN","EASEZF1",87,0)
 . I $D(ERR) D RESOLVE
"RTN","EASEZF1",88,0)
 . I $D(ERR) D ERROR^EASEZF2("AP",MULTIPLE,.ERR,"LINK")
"RTN","EASEZF1",89,0)
 . ;file to database if input is valid
"RTN","EASEZF1",90,0)
 . I '$D(ERR) D
"RTN","EASEZF1",91,0)
 . . ;2/1/2001 - don't attempt to file Name, SSN, DOB; too many complications;
"RTN","EASEZF1",92,0)
 . . ;  example: if system assigns pseudo-SSN to new patient, user could overwrite;
"RTN","EASEZF1",93,0)
 . . ;  example: if applicant matched to existing patient, all critical identifying
"RTN","EASEZF1",94,0)
 . . ;           data could be overwritten; could impact HEC as well
"RTN","EASEZF1",95,0)
 . . D FILE^DIE("S",EROOT,"ERR")
"RTN","EASEZF1",96,0)
 . . ;set any replaced data into subfile #712.01 for audit
"RTN","EASEZF1",97,0)
 . . S ^EAS(712,EASAPP,10,SUBIEN,2)=PTDATA_U_LINK
"RTN","EASEZF1",98,0)
 ;
"RTN","EASEZF1",99,0)
 L -^DPT(EASDFN)
"RTN","EASEZF1",100,0)
 Q
"RTN","EASEZF1",101,0)
 ;
"RTN","EASEZF1",102,0)
RESOLVE ;try to resolve invalid input for free text fields only
"RTN","EASEZF1",103,0)
 ;see if mapped to free text field
"RTN","EASEZF1",104,0)
 N FDEF,FTYPE,MAX
"RTN","EASEZF1",105,0)
 I (SUBFILE=FILE)!(SUBFILE="") S FDEF=FILE
"RTN","EASEZF1",106,0)
 E  S FDEF=SUBFILE
"RTN","EASEZF1",107,0)
 S FTYPE=$$GET1^DID(FDEF,FLD,"","TYPE")
"RTN","EASEZF1",108,0)
 Q:FTYPE'="FREE TEXT"
"RTN","EASEZF1",109,0)
 S MAX=$$GET1^DID(FDEF,FLD,"","FIELD LENGTH")
"RTN","EASEZF1",110,0)
 S EZDATA=$E(EZDATA,1,MAX)
"RTN","EASEZF1",111,0)
 K ERR
"RTN","EASEZF1",112,0)
 D VAL^DIE(2,IENS,FLD,"F",EZDATA,,EROOT,"ERR")
"RTN","EASEZF1",113,0)
 ;if still sets ERR array then won't be filed to database
"RTN","EASEZF1",114,0)
 Q
"RTN","EASEZF1",115,0)
 ;
"RTN","EASEZF1",116,0)
F202(SUBFILE,DATAKEY,EZDATA,SUBIEN,KEYIEN) ;add or edit subrecord in subfile #2.02
"RTN","EASEZF1",117,0)
 ;input SUBFILE = 2.02
"RTN","EASEZF1",118,0)
 ;      DATAKEY = data item identifier, e.g., I;4B.
"RTN","EASEZF1",119,0)
 ;      EZDATA  = in these cases, either "N(o)" or "Y(es)"
"RTN","EASEZF1",120,0)
 ;      SUBIEN  = subrecord # for data in #712/#10
"RTN","EASEZF1",121,0)
 ;      KEYIEN  = record # for data element in #711
"RTN","EASEZF1",122,0)
 N X,N,DATANM,EROOT,EAS,EIEN,ERR,FLD,IENS,EASARRAY,LINK,OUT,K1,K3
"RTN","EASEZF1",123,0)
 Q:EZDATA'["Y"
"RTN","EASEZF1",124,0)
 Q:SUBFILE'=2.02
"RTN","EASEZF1",125,0)
 ;covert data to corresponding file #10 pointer
"RTN","EASEZF1",126,0)
 S X=$$KEY711^EASEZU1(DATAKEY)
"RTN","EASEZF1",127,0)
 S K1=$P(X,U,1),DATANM=$P(X,U,2),K3=$P(X,U,3)
"RTN","EASEZF1",128,0)
 Q:(DATANM="")
"RTN","EASEZF1",129,0)
 Q:(K1'=KEYIEN)
"RTN","EASEZF1",130,0)
 Q:(K3'=DATAKEY)
"RTN","EASEZF1",131,0)
 S DATANM=$P(DATANM," - ",2),DATANM=$E(DATANM,1,30)
"RTN","EASEZF1",132,0)
 I DATANM["UNANSWERED" S DATANM="UNKNOWN BY PATIENT"
"RTN","EASEZF1",133,0)
 S EZDATA=$O(^DIC(10,"B",DATANM,0))
"RTN","EASEZF1",134,0)
 Q:EZDATA=""
"RTN","EASEZF1",135,0)
 D I202^EASEZI(EASDFN,.EASARRAY)
"RTN","EASEZF1",136,0)
 ;if matching race already exists, edit method only
"RTN","EASEZF1",137,0)
 S OUT=0,N=0 F  S N=$O(EASARRAY(N)) Q:'N  D
"RTN","EASEZF1",138,0)
 . Q:($P(EASARRAY(N),";",2)'=EZDATA)
"RTN","EASEZF1",139,0)
 . K EAS,ERR
"RTN","EASEZF1",140,0)
 . S IENS=EZDATA_","_EASDFN_","
"RTN","EASEZF1",141,0)
 . S EROOT="EAS("_EASAPP_")"
"RTN","EASEZF1",142,0)
 . S FLD=.02,EAS(EASAPP,SUBFILE,IENS,FLD)=1
"RTN","EASEZF1",143,0)
 . D FILE^DIE("S",EROOT,"ERR")
"RTN","EASEZF1",144,0)
 . S OUT=1
"RTN","EASEZF1",145,0)
 ;no matching race in patient record, add new subrecord
"RTN","EASEZF1",146,0)
 I 'OUT D
"RTN","EASEZF1",147,0)
 . K ERR
"RTN","EASEZF1",148,0)
 . S EROOT="EAS("_EASAPP_")"
"RTN","EASEZF1",149,0)
 . S IENS="+1,"_EASDFN_",",EIEN(1)=EZDATA
"RTN","EASEZF1",150,0)
 . S FLD=.01,EAS(EASAPP,SUBFILE,IENS,FLD)=EZDATA
"RTN","EASEZF1",151,0)
 . S FLD=.02,EAS(EASAPP,SUBFILE,IENS,FLD)=1
"RTN","EASEZF1",152,0)
 . D UPDATE^DIE("S",EROOT,"EIEN","ERR")
"RTN","EASEZF1",153,0)
 . I $D(ERR) D ERROR^EASEZF2("AP",1,.ERR,"LINK") Q
"RTN","EASEZF1",154,0)
 . S LINK=EASDFN_";"_EZDATA
"RTN","EASEZF1",155,0)
 . S ^EAS(712,EASAPP,10,SUBIEN,2)=U_LINK
"RTN","EASEZF1",156,0)
 Q
"RTN","EASEZF1",157,0)
 ;
"RTN","EASEZF1",158,0)
F206(SUBFILE,DATAKEY,EZDATA,SUBIEN) ;add subrecord in subfile #2.06 
"RTN","EASEZF1",159,0)
 ;input SUBFILE = 2.06
"RTN","EASEZF1",160,0)
 ;      DATAKEY = data item identifier, e.g., I;4A.
"RTN","EASEZF1",161,0)
 ;      EZDATA  = in these cases, either "N(o)" or "Y(es)"
"RTN","EASEZF1",162,0)
 N X,EROOT,EAS,EIEN,ERR,FLD,EASARRAY,IENS,LINK,PTDATA
"RTN","EASEZF1",163,0)
 Q:SUBFILE'=2.06
"RTN","EASEZF1",164,0)
 D I206^EASEZI(EASDFN,.EASARRAY)
"RTN","EASEZF1",165,0)
 S LINK=$P($G(EASARRAY(1)),";",2),PTDATA="" I LINK S PTDATA=$P(^DPT(EASDFN,.06,LINK,0),U,1)
"RTN","EASEZF1",166,0)
 I DATAKEY="I;4A." S EZDATA=$S(EZDATA["Y":"H",$E(EZDATA,1)="N":"N",1:"U") D
"RTN","EASEZF1",167,0)
 . S EROOT="EAS("_EASAPP_")"
"RTN","EASEZF1",168,0)
 . S IENS="+1,"_EASDFN_","
"RTN","EASEZF1",169,0)
 . S FLD=.01,EAS(EASAPP,SUBFILE,IENS,FLD)=EZDATA
"RTN","EASEZF1",170,0)
 . S FLD=.02,EAS(EASAPP,SUBFILE,IENS,FLD)="SELF IDENTIFICATION"
"RTN","EASEZF1",171,0)
 . D UPDATE^DIE("ES",EROOT,"EIEN","ERR")
"RTN","EASEZF1",172,0)
 . S LINK=EASDFN_";"_$G(EIEN(1))
"RTN","EASEZF1",173,0)
 . S ^EAS(712,EASAPP,10,SUBIEN,2)=PTDATA_U_LINK
"RTN","EASEZF1",174,0)
 Q
"RTN","EASEZF1",175,0)
 ;
"RTN","EASEZF1",176,0)
FPOB(DATAKEY,EZDATA,SUBIEN,PTDATA) ;add or edit pob city & state
"RTN","EASEZF1",177,0)
 ;input DATAKEY = data item identifier, either, I;8A. or I;8B.
"RTN","EASEZF1",178,0)
 ;      EZDATA  = free text if city or 
"RTN","EASEZF1",179,0)
 ;                state abbrv if state
"RTN","EASEZF1",180,0)
 ;filing for both city & state only done when datakey=I;8A.
"RTN","EASEZF1",181,0)
 N X,EROOT,EAS,EIEN,ERR,FLD,EASARRAY,IENS,LINK,SECT,QUES,XIEN,XDATA
"RTN","EASEZF1",182,0)
 Q:(DATAKEY'="I;8A.")
"RTN","EASEZF1",183,0)
 Q:(EZDATA="")
"RTN","EASEZF1",184,0)
 Q:(EZDATA=PTDATA)
"RTN","EASEZF1",185,0)
 ;file pob city
"RTN","EASEZF1",186,0)
 K EAS,ERR
"RTN","EASEZF1",187,0)
 S FLD=.092,LINK=EASDFN
"RTN","EASEZF1",188,0)
 S IENS=EASDFN_","
"RTN","EASEZF1",189,0)
 S EROOT="EAS("_EASAPP_")"
"RTN","EASEZF1",190,0)
 D VAL^DIE(2,IENS,FLD,"F",EZDATA,,EROOT,"ERR")
"RTN","EASEZF1",191,0)
 I $D(ERR) D RESOLVE
"RTN","EASEZF1",192,0)
 I $D(ERR) D ERROR^EASEZF2("AP",1,.ERR,"LINK") Q
"RTN","EASEZF1",193,0)
 D FILE^DIE("ES",EROOT,"ERR")
"RTN","EASEZF1",194,0)
 ;set any replaced data into subfile #712.01 for audit
"RTN","EASEZF1",195,0)
 S ^EAS(712,EASAPP,10,SUBIEN,2)=PTDATA_U_LINK
"RTN","EASEZF1",196,0)
 ;file pob state
"RTN","EASEZF1",197,0)
 S (EZDATA,XDATA)=""
"RTN","EASEZF1",198,0)
 S DATAKEY="I;8B.",SECT=$P(DATAKEY,";",1),QUES=$P(DATAKEY,";",2)
"RTN","EASEZF1",199,0)
 S X=$G(^TMP("EZTEMP",$J,SECT,1,QUES)),EZDATA=$P(X,U,2),XIEN=$P(X,U,4),XDATA=$P(X,U,5)
"RTN","EASEZF1",200,0)
 Q:(EZDATA="")
"RTN","EASEZF1",201,0)
 Q:(EZDATA=XDATA)
"RTN","EASEZF1",202,0)
 I (EZDATA["FOREIGN")!(EZDATA="FC")!(EZDATA="FG") S EZDATA="FOREIGN"
"RTN","EASEZF1",203,0)
 K EAS,ERR
"RTN","EASEZF1",204,0)
 S FLD=.093
"RTN","EASEZF1",205,0)
 S IENS=EASDFN_","
"RTN","EASEZF1",206,0)
 S EROOT="EAS("_EASAPP_")"
"RTN","EASEZF1",207,0)
 D VAL^DIE(2,IENS,FLD,"F",EZDATA,,EROOT,"ERR")
"RTN","EASEZF1",208,0)
 I $D(ERR) D ERROR^EASEZF2("AP",1,.ERR,"LINK") Q
"RTN","EASEZF1",209,0)
 D FILE^DIE("ES",EROOT,"ERR")
"RTN","EASEZF1",210,0)
 S ^EAS(712,EASAPP,10,XIEN,2)=XDATA_U_LINK
"RTN","EASEZF1",211,0)
 Q
"RTN","EASEZF2")
0^15^B71188851
"RTN","EASEZF2",1,0)
EASEZF2 ;ALB/jap - Filing 1010EZ Data to Patient Database ;10/31/00  13:07
"RTN","EASEZF2",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**1,9,51,57,70**;Mar 15, 2001;Build 26
"RTN","EASEZF2",3,0)
 ;
"RTN","EASEZF2",4,0)
F408(EASAPP,EASDFN) ;
"RTN","EASEZF2",5,0)
 N KEYIEN,FILE,SUBFILE,FLD,DATAKEY,MULTIPLE,MM,SECT,QUES,SUBIEN,ACCEPT,EZDATA,PTDATA,LINK
"RTN","EASEZF2",6,0)
 N DFN,DGPR12,INCYR,TESTYR,LASTINC,XLINK,EROOT,EAS,ERR,IENS,MSG,X,Y
"RTN","EASEZF2",7,0)
 Q:'$G(EASDFN)
"RTN","EASEZF2",8,0)
 ;determine income year for financial data
"RTN","EASEZF2",9,0)
 S Y=$P($G(^EAS(712,EASAPP,0)),U,6) I Y="" S Y=DT
"RTN","EASEZF2",10,0)
 S %F=5,X=$$FMTE^XLFDT(Y,%F),X=+$P(X,"/",3)-1,%DT="P" D ^%DT S INCYR=Y
"RTN","EASEZF2",11,0)
 S YREND=$E(DT,1,3)_"1231"
"RTN","EASEZF2",12,0)
 ;don't file any 408 data if applicant has income test for current year at this site
"RTN","EASEZF2",13,0)
 S LASTINC=$$LST^DGMTU(EASDFN,YREND,1) I LASTINC="" S LASTINC=$$LST^DGMTU(EASDFN,YREND,2)
"RTN","EASEZF2",14,0)
 S TESTYR=$P(LASTINC,U,2)
"RTN","EASEZF2",15,0)
 Q:($E(TESTYR,1,3)=$E(DT,1,3))&($P(LASTINC,U,5)>1)
"RTN","EASEZF2",16,0)
 ;
"RTN","EASEZF2",17,0)
 ;DGPR12("AP") is the Applicant's (veteran's) IEN in file #408.12
"RTN","EASEZF2",18,0)
 S DGPR12("AP")=""
"RTN","EASEZF2",19,0)
 ;add Applicant to file #408.12 if not there already;
"RTN","EASEZF2",20,0)
 ;make this addition even if no other financial data is available;
"RTN","EASEZF2",21,0)
 I '$D(^DGPR(408.12,"B",EASDFN)) D
"RTN","EASEZF2",22,0)
 . ;create the file #408.12 record
"RTN","EASEZF2",23,0)
 . K EAS,ERR,EZIENS
"RTN","EASEZF2",24,0)
 . S EAS(EASAPP,408.12,"+1,",".01")=EASDFN
"RTN","EASEZF2",25,0)
 . S EAS(EASAPP,408.12,"+1,",".02")=1
"RTN","EASEZF2",26,0)
 . S EAS(EASAPP,408.12,"+1,",".03")=EASDFN_";DPT("
"RTN","EASEZF2",27,0)
 . S EROOT="EAS("_EASAPP_")"
"RTN","EASEZF2",28,0)
 . D UPDATE^DIE("S",EROOT,"EZIENS","ERR")
"RTN","EASEZF2",29,0)
 . S DGPR12("AP")=$G(EZIENS(1))
"RTN","EASEZF2",30,0)
 . Q:DGPR12("AP")=""
"RTN","EASEZF2",31,0)
 . ;create the subfile #408.1275 record
"RTN","EASEZF2",32,0)
 . K EAS,ERR,EZIENS
"RTN","EASEZF2",33,0)
 . ;S KEY=+$$KEY711^EASEZU1("APPLICANT DATE OF BIRTH")
"RTN","EASEZF2",34,0)
 . ;S DOB=$P($$DATA712^EASEZU1(EASAPP,KEY,1),U,1)
"RTN","EASEZF2",35,0)
 . ;use DOB from file #2
"RTN","EASEZF2",36,0)
 . S X=$P($G(^DPT(EASDFN,0)),U,3),%DT="PX" D ^%DT S DOB=Y
"RTN","EASEZF2",37,0)
 . S EAS(EASAPP,408.1275,"+1,"_DGPR12("AP")_",",".01")=DOB
"RTN","EASEZF2",38,0)
 . S EAS(EASAPP,408.1275,"+1,"_DGPR12("AP")_",",".02")="YES"
"RTN","EASEZF2",39,0)
 . D UPDATE^DIE("ES",EROOT,"EZIENS","ERR")
"RTN","EASEZF2",40,0)
 . ;link 1010EZ data with new record in #408.12
"RTN","EASEZF2",41,0)
 I DGPR12("AP")="" S DGPR12("AP")=$O(^DGPR(408.12,"B",EASDFN,0))
"RTN","EASEZF2",42,0)
 ;if no record for Applicant in file #408.12 exists, then don't continue
"RTN","EASEZF2",43,0)
 Q:DGPR12("AP")=""
"RTN","EASEZF2",44,0)
 ;
"RTN","EASEZF2",45,0)
 ;kill local holding arrays
"RTN","EASEZF2",46,0)
 K AP,SP,CN,FLINK
"RTN","EASEZF2",47,0)
 ;get data for file #408.12,#408.13,#408.21,#408.22 into local arrays 
"RTN","EASEZF2",48,0)
 S SECT=""
"RTN","EASEZF2",49,0)
 F  S SECT=$O(^TMP("EZTEMP",$J,SECT)) Q:SECT=""  S MULTIPLE=0 D
"RTN","EASEZF2",50,0)
 . F  S MULTIPLE=$O(^TMP("EZTEMP",$J,SECT,MULTIPLE)) Q:MULTIPLE=""  S QUES="" D
"RTN","EASEZF2",51,0)
 . . F  S QUES=$O(^TMP("EZTEMP",$J,SECT,MULTIPLE,QUES)) Q:QUES=""  D
"RTN","EASEZF2",52,0)
 . . . S DATAKEY=SECT_";"_QUES
"RTN","EASEZF2",53,0)
 . . . ;call to suppress may be redundant
"RTN","EASEZF2",54,0)
 . . . Q:$$SUPPRESS^EASEZU4(EASAPP,DATAKEY,1,EASVRSN)
"RTN","EASEZF2",55,0)
 . . . S X=^TMP("EZTEMP",$J,SECT,MULTIPLE,QUES)
"RTN","EASEZF2",56,0)
 . . . S KEYIEN=$P(X,U,1),EZDATA=$P(X,U,2),ACCEPT=$P(X,U,3),SUBIEN=$P(X,U,4),PTDATA=$P(X,U,5)
"RTN","EASEZF2",57,0)
 . . . S LN=^TMP("EZDATA",$J,KEYIEN),FILE=$P(LN,U,1),SUBFILE=$P(LN,U,2),FLD=$P(LN,U,3)
"RTN","EASEZF2",58,0)
 . . . Q:($P(FILE,".",1)'=408)
"RTN","EASEZF2",59,0)
 . . . S LINK=$P($G(^EAS(712,EASAPP,10,SUBIEN,2)),U,2)
"RTN","EASEZF2",60,0)
 . . . S DATANM=$P($G(^EAS(711,KEYIEN,0)),U,1)
"RTN","EASEZF2",61,0)
 . . . S MM=MULTIPLE S:DATANM["CHILD(N)" MM=MULTIPLE+1
"RTN","EASEZF2",62,0)
 . . . I (SECT="IIF")!(SECT="IIG") S MM=MULTIPLE
"RTN","EASEZF2",63,0)
 . . . S ARR=$S(DATANM["SPOUSE":"SP",DATANM["CHILD":"CN",DATANM["ASSET(N)":"CN",1:"AP")
"RTN","EASEZF2",64,0)
 . . . S @ARR@(MM,FILE,SUBFILE,FLD)=EZDATA_U_ACCEPT_U_SUBIEN_U_PTDATA_U_LINK
"RTN","EASEZF2",65,0)
 ;delete any Spouse or Dependent data if #.01 field for file #408.13 does not exist
"RTN","EASEZF2",66,0)
 I $D(SP(1,408.13,408.13,.01))'=1 K SP
"RTN","EASEZF2",67,0)
 ;if contributed to spouse, applicant lived with patient = NO
"RTN","EASEZF2",68,0)
 I +$P($G(AP(1,408.22,408.22,.07)),U,1) D
"RTN","EASEZF2",69,0)
 . S AP(1,408.22,408.22,.06)="NO^2^^^"_$P(AP(1,408.22,408.22,.07),U,5)
"RTN","EASEZF2",70,0)
 S MM=0 F  S MM=$O(CN(MM)) Q:'MM  D
"RTN","EASEZF2",71,0)
 . I $D(CN(MM,408.13,408.13,.01))'=1 K CN(MM) Q
"RTN","EASEZF2",72,0)
 . ;check for amt contributed to child
"RTN","EASEZF2",73,0)
 . I +$P($G(CN(MM,408.22,408.22,.19)),U,1) D
"RTN","EASEZF2",74,0)
 . . S CN(MM,408.22,408.22,.1)="YES^2^^^"_$P(CN(MM,408.22,408.22,.19),U,5)
"RTN","EASEZF2",75,0)
 . . S CN(MM,408.22,408.22,.06)="NO^2^^^"_$P(CN(MM,408.22,408.22,.19),U,5)
"RTN","EASEZF2",76,0)
 ;
"RTN","EASEZF2",77,0)
 ;gather links to VistA for Applicant
"RTN","EASEZF2",78,0)
 S FLINK("AP",1,408.12)=DGPR12("AP")
"RTN","EASEZF2",79,0)
 F FILE=408.21,408.22 D
"RTN","EASEZF2",80,0)
 . S XLINK="",MULTIPLE=1,SUBFILE=FILE,FLD=""
"RTN","EASEZF2",81,0)
 . F  S FLD=$O(AP(MULTIPLE,FILE,SUBFILE,FLD)) Q:FLD=""  D
"RTN","EASEZF2",82,0)
 . . S FLINK("AP",1,FILE)=+$P(AP(MULTIPLE,FILE,SUBFILE,FLD),U,5)
"RTN","EASEZF2",83,0)
 ;gather links to VistA for Spouse
"RTN","EASEZF2",84,0)
 F FILE=408.12,408.13,408.21,408.22 D
"RTN","EASEZF2",85,0)
 . S XLINK="",MULTIPLE=1,SUBFILE=FILE,FLD=""
"RTN","EASEZF2",86,0)
 . F  S FLD=$O(SP(MULTIPLE,FILE,SUBFILE,FLD)) Q:FLD=""  D
"RTN","EASEZF2",87,0)
 . . S FLINK("SP",MULTIPLE,FILE)=+$P(SP(MULTIPLE,FILE,SUBFILE,FLD),U,5)
"RTN","EASEZF2",88,0)
 . I FILE=408.12 S SUBFILE=408.1275 F  S FLD=$O(SP(MULTIPLE,FILE,SUBFILE,FLD)) Q:FLD=""  D
"RTN","EASEZF2",89,0)
 . . S FLINK("SP",MULTIPLE,SUBFILE)=$P($P(SP(MULTIPLE,FILE,SUBFILE,FLD),U,5),";",2)
"RTN","EASEZF2",90,0)
 . . S FLINK("SP",MULTIPLE,FILE)=$P($P(SP(MULTIPLE,FILE,SUBFILE,FLD),U,5),";",1)
"RTN","EASEZF2",91,0)
 ;gather links to VistA for Dependents
"RTN","EASEZF2",92,0)
 S MULTIPLE=0 F  S MULTIPLE=$O(CN(MULTIPLE)) Q:'MULTIPLE  D
"RTN","EASEZF2",93,0)
 . F FILE=408.13,408.12,408.21,408.22 D
"RTN","EASEZF2",94,0)
 . . S XLINK="",SUBFILE=FILE,FLD=""
"RTN","EASEZF2",95,0)
 . . F  S FLD=$O(CN(MULTIPLE,FILE,SUBFILE,FLD)) Q:FLD=""  D
"RTN","EASEZF2",96,0)
 . . . S FLINK("CN",MULTIPLE,FILE)=+$P(CN(MULTIPLE,FILE,SUBFILE,FLD),U,5)
"RTN","EASEZF2",97,0)
 . . I FILE=408.12 S SUBFILE=408.1275 F  S FLD=$O(CN(MULTIPLE,FILE,SUBFILE,FLD)) Q:FLD=""  D
"RTN","EASEZF2",98,0)
 . . . S FLINK("CN",MULTIPLE,SUBFILE)=$P($P(CN(MULTIPLE,FILE,SUBFILE,FLD),U,5),";",2)
"RTN","EASEZF2",99,0)
 . . . S FLINK("CN",MULTIPLE,FILE)=$P($P(CN(MULTIPLE,FILE,SUBFILE,FLD),U,5),";",1)
"RTN","EASEZF2",100,0)
 ;
"RTN","EASEZF2",101,0)
 ;file data
"RTN","EASEZF2",102,0)
 Q:DGPR12("AP")=""
"RTN","EASEZF2",103,0)
 S DFN=EASDFN
"RTN","EASEZF2",104,0)
 D AP
"RTN","EASEZF2",105,0)
 I $D(FLINK("SP")) D SP^EASEZF3
"RTN","EASEZF2",106,0)
 I $D(FLINK("CN")) D CN^EASEZF4
"RTN","EASEZF2",107,0)
 D LINKUP^EASEZF4
"RTN","EASEZF2",108,0)
 ;
"RTN","EASEZF2",109,0)
 Q
"RTN","EASEZF2",110,0)
 ;
"RTN","EASEZF2",111,0)
AP ;file Applicant data
"RTN","EASEZF2",112,0)
 N MT,P22,MULTIPLE,FILE,SUBFILE,FLD,XDATA,ACCEPT,SUBIEN,EZDATA,EAS,ERR,KEY
"RTN","EASEZF2",113,0)
 F FILE=408.21,408.22 D
"RTN","EASEZF2",114,0)
 . S MULTIPLE=1,SUBFILE=FILE,FLD=""
"RTN","EASEZF2",115,0)
 . S XLINK=$G(FLINK("AP",1,FILE))
"RTN","EASEZF2",116,0)
 . ;record in file #408.21 needed for all further data filing
"RTN","EASEZF2",117,0)
 . Q:(FILE'=408.21)&('$G(FLINK("AP",1,408.21)))
"RTN","EASEZF2",118,0)
 . ;for data elements with link to database, 
"RTN","EASEZF2",119,0)
 . ;only file 1010EZ data if accepted by user;
"RTN","EASEZF2",120,0)
 . ;data in external format
"RTN","EASEZF2",121,0)
 . I XLINK D
"RTN","EASEZF2",122,0)
 . . S FLD="" F  S FLD=$O(AP(MULTIPLE,FILE,SUBFILE,FLD)) Q:FLD=""  D
"RTN","EASEZF2",123,0)
 . . . S XDATA=AP(MULTIPLE,FILE,SUBFILE,FLD),ACCEPT=$P(XDATA,U,2)
"RTN","EASEZF2",124,0)
 . . . I ACCEPT D LINK(XDATA,FILE,FLD,"AP",MULTIPLE)
"RTN","EASEZF2",125,0)
 . ;for data elements with no link to database, 
"RTN","EASEZF2",126,0)
 . ;always create new record(s) to store 1010EZ data;
"RTN","EASEZF2",127,0)
 . ;use internal data format
"RTN","EASEZF2",128,0)
 . I 'XLINK D
"RTN","EASEZF2",129,0)
 . . K EAS,ERR
"RTN","EASEZF2",130,0)
 . . S FLD="" F  S FLD=$O(AP(MULTIPLE,FILE,SUBFILE,FLD)) Q:FLD=""  D
"RTN","EASEZF2",131,0)
 . . . S EZDATA=$P(AP(MULTIPLE,FILE,SUBFILE,FLD),U,1)
"RTN","EASEZF2",132,0)
 . . . S EAS(EASAPP,FILE,"+1,",FLD)=EZDATA
"RTN","EASEZF2",133,0)
 . . I FILE=408.21 D
"RTN","EASEZF2",134,0)
 . . . S EAS(EASAPP,FILE,"+1,",".01")=INCYR
"RTN","EASEZF2",135,0)
 . . . S EAS(EASAPP,FILE,"+1,",".02")=FLINK("AP",1,408.12)
"RTN","EASEZF2",136,0)
 . . . S EAS(EASAPP,FILE,"+1,","101")=DUZ
"RTN","EASEZF2",137,0)
 . . . S EAS(EASAPP,FILE,"+1,","102")=DT
"RTN","EASEZF2",138,0)
 . . . S EAS(EASAPP,FILE,"+1,","103")=DUZ
"RTN","EASEZF2",139,0)
 . . . S EAS(EASAPP,FILE,"+1,","104")=DT
"RTN","EASEZF2",140,0)
 . . I FILE=408.22,$G(FLINK("AP",1,408.21)) D
"RTN","EASEZF2",141,0)
 . . . S EAS(EASAPP,FILE,"+1,",".01")=EASDFN
"RTN","EASEZF2",142,0)
 . . . S EAS(EASAPP,FILE,"+1,",".02")=FLINK("AP",1,408.21)
"RTN","EASEZF2",143,0)
 . . . I $G(SP(1,408.13,408.13,.01))'="" S EAS(EASAPP,FILE,"+1,",".05")=1
"RTN","EASEZF2",144,0)
 . . . I $G(CN(1,408.13,408.13,.01))'="" S EAS(EASAPP,FILE,"+1,",".08")=1
"RTN","EASEZF2",145,0)
 . . . S X=$G(EAS(EASAPP,FILE,"+1,",".06"))
"RTN","EASEZF2",146,0)
 . . . S EAS(EASAPP,FILE,"+1,",".06")=$S(X="YES":1,X="NO":0,1:"")
"RTN","EASEZF2",147,0)
 . . S FLINK("AP",MULTIPLE,FILE)=$$NOLINK(.EAS,"AP",MULTIPLE)
"RTN","EASEZF2",148,0)
 . . S FLD="" F  S FLD=$O(AP(MULTIPLE,FILE,SUBFILE,FLD)) Q:FLD=""  D
"RTN","EASEZF2",149,0)
 . . . S SUBIEN=$P(AP(MULTIPLE,FILE,SUBFILE,FLD),U,3)
"RTN","EASEZF2",150,0)
 . . . ;store link to new record in subfile #712.01
"RTN","EASEZF2",151,0)
 . . . S $P(AP(MULTIPLE,FILE,SUBFILE,FLD),U,5)=FLINK("AP",1,FILE)
"RTN","EASEZF2",152,0)
 ;
"RTN","EASEZF2",153,0)
 Q
"RTN","EASEZF2",154,0)
 ;
"RTN","EASEZF2",155,0)
LINK(XDATA,FILE,FLD,GRP,MULTIPLE) ;setup to call FM database server if link to file exists & data accepted
"RTN","EASEZF2",156,0)
 N MSG,EZDATA,SUBIEN,PTDATA,XLINK
"RTN","EASEZF2",157,0)
 K EAS,ERR
"RTN","EASEZF2",158,0)
 S EZDATA=$P(XDATA,U,1),SUBIEN=$P(XDATA,U,3),PTDATA=$P(XDATA,U,4),XLINK=$P(XDATA,U,5)
"RTN","EASEZF2",159,0)
 S IENS=XLINK_","
"RTN","EASEZF2",160,0)
 S EROOT="EAS("_EASAPP_")"
"RTN","EASEZF2",161,0)
 D VAL^DIE(FILE,IENS,FLD,"F",EZDATA,,EROOT,"ERR")
"RTN","EASEZF2",162,0)
 I $D(ERR) D ERROR(GRP,MULTIPLE,.ERR,"LINK") Q
"RTN","EASEZF2",163,0)
 ;file to database if input is valid
"RTN","EASEZF2",164,0)
 I '$D(ERR) D
"RTN","EASEZF2",165,0)
 . I FILE=408.21 D
"RTN","EASEZF2",166,0)
 . . S EAS(EASAPP,FILE,IENS,103)=DUZ
"RTN","EASEZF2",167,0)
 . . S EAS(EASAPP,FILE,IENS,104)=DT
"RTN","EASEZF2",168,0)
 . D FILE^DIE("S",EROOT,"ERR")
"RTN","EASEZF2",169,0)
 . ;set any replaced data into subfile #712.01 for audit
"RTN","EASEZF2",170,0)
 . I SUBIEN S $P(^EAS(712,EASAPP,10,SUBIEN,2),U,1)=PTDATA
"RTN","EASEZF2",171,0)
 Q
"RTN","EASEZF2",172,0)
 ;
"RTN","EASEZF2",173,0)
NOLINK(EAS,GRP,MULTIPLE) ;add new record with accepted data if no link exists;
"RTN","EASEZF2",174,0)
 ;
"RTN","EASEZF2",175,0)
 K EZIENS,ERR,LINK
"RTN","EASEZF2",176,0)
 S EROOT="EAS("_EASAPP_")"
"RTN","EASEZF2",177,0)
 D UPDATE^DIE("S",EROOT,"EZIENS","ERR")
"RTN","EASEZF2",178,0)
 ;call to UPDATE should not return ERR since internal data formats are used, but just in case;
"RTN","EASEZF2",179,0)
 I $D(ERR) D ERROR(GRP,MULTIPLE,.ERR,"NOLINK")
"RTN","EASEZF2",180,0)
 ;return ien to new record
"RTN","EASEZF2",181,0)
 S LINK=$G(EZIENS(1))
"RTN","EASEZF2",182,0)
 Q LINK
"RTN","EASEZF2",183,0)
 ;
"RTN","EASEZF2",184,0)
ERROR(GRP,MULTIPLE,ERR,FROM) ;add FM error text to error msg
"RTN","EASEZF2",185,0)
 N L,LSTLN,ECODE,ENUMBER
"RTN","EASEZF2",186,0)
 S ECODE="" F  S ECODE=$O(ERR("DIERR","E",ECODE)) Q:ECODE=""  S ENUMBER=0 F  S ENUMBER=$O(ERR("DIERR","E",ECODE,ENUMBER)) Q:'ENUMBER  D
"RTN","EASEZF2",187,0)
 . S LSTLN=+$O(^TMP("1010EZERROR",$J,""),-1) I 'LSTLN S LSTLN=6
"RTN","EASEZF2",188,0)
 . S WHO=$S(GRP="SP":"SPOUSE",GRP="CN":"CHILD",1:"APPLICANT")
"RTN","EASEZF2",189,0)
 . I WHO="CHILD" S WHO=WHO_" #"_MULTIPLE
"RTN","EASEZF2",190,0)
 . S FIELD=$G(ERR("DIERR",ENUMBER,"PARAM","FIELD")),FILE=$G(ERR("DIERR",ENUMBER,"PARAM","FILE"))
"RTN","EASEZF2",191,0)
 . I FROM="LINK" D
"RTN","EASEZF2",192,0)
 . . S LSTLN=LSTLN+1,^TMP("1010EZERROR",$J,LSTLN,0)="1010EZ data for "_WHO_" was not filed to"
"RTN","EASEZF2",193,0)
 . . S LSTLN=LSTLN+1,^TMP("1010EZERROR",$J,LSTLN,0)="Field #"_FIELD_" of File #"_FILE_" because:"
"RTN","EASEZF2",194,0)
 . I FROM="NOLINK" D
"RTN","EASEZF2",195,0)
 . . S LSTLN=LSTLN+1,^TMP("1010EZERROR",$J,LSTLN,0)="A new record for "_WHO_" could not be created in"
"RTN","EASEZF2",196,0)
 . . S LSTLN=LSTLN+1,^TMP("1010EZERROR",$J,LSTLN,0)="File #"_FILE_" because Field #"_FIELD_" produced an error:"
"RTN","EASEZF2",197,0)
 . S L=0 F  S L=$O(ERR("DIERR",ENUMBER,"TEXT",L)) Q:'L  D
"RTN","EASEZF2",198,0)
 . . S LN=ERR("DIERR",ENUMBER,"TEXT",L)
"RTN","EASEZF2",199,0)
 . . I $L(LN)<50 S LSTLN=LSTLN+1,^TMP("1010EZERROR",$J,LSTLN,0)=LN Q
"RTN","EASEZF2",200,0)
 . . D WRAP(LN,.LSTLN)
"RTN","EASEZF2",201,0)
 . S LSTLN=LSTLN+1,^TMP("1010EZERROR",$J,LSTLN,0)=" "
"RTN","EASEZF2",202,0)
 Q
"RTN","EASEZF2",203,0)
 ;
"RTN","EASEZF2",204,0)
WRAP(LN,LSTLN) ;parse a long error text line into several message lines
"RTN","EASEZF2",205,0)
 N PART,BB
"RTN","EASEZF2",206,0)
 F  D  Q:$L(LN)<41
"RTN","EASEZF2",207,0)
 . S PART=""
"RTN","EASEZF2",208,0)
 . F BB=1:1:99 S PART=PART_$P(LN," ",BB)_" " I $L(PART)>40 D  Q
"RTN","EASEZF2",209,0)
 . . S LSTLN=LSTLN+1,^TMP("1010EZERROR",$J,LSTLN,0)=PART
"RTN","EASEZF2",210,0)
 . . S LN=$P(LN," ",BB+1,99)
"RTN","EASEZF2",211,0)
 S LSTLN=LSTLN+1,^TMP("1010EZERROR",$J,LSTLN,0)=LN
"RTN","EASEZF2",212,0)
 Q
"RTN","EASEZF4")
0^14^B20930014
"RTN","EASEZF4",1,0)
EASEZF4 ;ALB/jap - Filing 1010EZ Data to Patient Database ;10/31/00  13:07
"RTN","EASEZF4",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**1,51,57,70**;Mar 15, 2001;Build 26
"RTN","EASEZF4",3,0)
 ;
"RTN","EASEZF4",4,0)
CN ;file Dependent/Child data
"RTN","EASEZF4",5,0)
 N MULTIPLE,FILE,SUBFILE,FLD,XDATA,ACCEPT,SUBIEN,SEX,SSN,EZDATA,EAS,ERR,X,Y
"RTN","EASEZF4",6,0)
 ;process sequence must be 408.13 - 408.12 - 408.21 - 408.22
"RTN","EASEZF4",7,0)
 S MULTIPLE=0 F  S MULTIPLE=$O(CN(MULTIPLE)) Q:'MULTIPLE  F FILE=408.13,408.12,408.21,408.22 D
"RTN","EASEZF4",8,0)
 . S SUBFILE=FILE,FLD=""
"RTN","EASEZF4",9,0)
 . S XLINK=$G(FLINK("CN",MULTIPLE,FILE))
"RTN","EASEZF4",10,0)
 . ;record in file #408.13 is needed for all further data filng
"RTN","EASEZF4",11,0)
 . Q:(FILE'=408.13)&('$G(FLINK("CN",MULTIPLE,408.13)))
"RTN","EASEZF4",12,0)
 . ;for data elements with link to database, 
"RTN","EASEZF4",13,0)
 . ;only file 1010EZ data if accepted by user;
"RTN","EASEZF4",14,0)
 . ;data in external format
"RTN","EASEZF4",15,0)
 . I XLINK D
"RTN","EASEZF4",16,0)
 . . ;when #408.12 record exists, don't try to update subfile #408.1275
"RTN","EASEZF4",17,0)
 . . S FLD="" F  S FLD=$O(CN(MULTIPLE,FILE,SUBFILE,FLD)) Q:FLD=""  D
"RTN","EASEZF4",18,0)
 . . . S XDATA=CN(MULTIPLE,FILE,SUBFILE,FLD),ACCEPT=$P(XDATA,U,2)
"RTN","EASEZF4",19,0)
 . . . I FILE=408.13,FLD=.09 S XDATA=$TR(XDATA,"-","")
"RTN","EASEZF4",20,0)
 . . . I ACCEPT D LINK^EASEZF2(XDATA,FILE,FLD,"CN",MULTIPLE)
"RTN","EASEZF4",21,0)
 . ;for data elements with no link to database, 
"RTN","EASEZF4",22,0)
 . ;always create new record(s) to store 1010EZ data;
"RTN","EASEZF4",23,0)
 . ;put data in internal format
"RTN","EASEZF4",24,0)
 . I 'XLINK D
"RTN","EASEZF4",25,0)
 . . K EAS,ERR
"RTN","EASEZF4",26,0)
 . . S FLD="" F  S FLD=$O(CN(MULTIPLE,FILE,SUBFILE,FLD)) Q:FLD=""  D
"RTN","EASEZF4",27,0)
 . . . S EZDATA=$P(CN(MULTIPLE,FILE,SUBFILE,FLD),U,1)
"RTN","EASEZF4",28,0)
 . . . S EAS(EASAPP,FILE,"+1,",FLD)=EZDATA
"RTN","EASEZF4",29,0)
 . . ;supplement data and convert to internal format
"RTN","EASEZF4",30,0)
 . . I FILE=408.13 D
"RTN","EASEZF4",31,0)
 . . . S X=$G(EAS(EASAPP,FILE,"+1,",".03")) I X'="" D ^%DT S EAS(EASAPP,FILE,"+1,",".03")=Y
"RTN","EASEZF4",32,0)
 . . . S X=$G(EAS(EASAPP,FILE,"+1,",".09")) I X'="" D
"RTN","EASEZF4",33,0)
 . . . . S SSN=$TR(X,"-","") S EAS(EASAPP,FILE,"+1,",".09")=SSN
"RTN","EASEZF4",34,0)
 . . . . I $D(^DGPR(408.13,"SSN",SSN)) S EAS(EASAPP,FILE,"+1,",".09")=""
"RTN","EASEZF4",35,0)
 . . . S X=$P($G(CN(MULTIPLE,408.12,408.12,.02)),U,1) S SEX=$S(X["SON":"M",X["DAUGHTER":"F",1:"")
"RTN","EASEZF4",36,0)
 . . . I SEX'="" S EAS(EASAPP,FILE,"+1,",".02")=SEX
"RTN","EASEZF4",37,0)
 . . I FILE=408.12,$G(FLINK("CN",MULTIPLE,408.13)) D F40812^EASEZF3("CN",MULTIPLE)
"RTN","EASEZF4",38,0)
 . . I FILE=408.21,$G(FLINK("CN",MULTIPLE,408.12)) D
"RTN","EASEZF4",39,0)
 . . . S EAS(EASAPP,FILE,"+1,",".01")=INCYR
"RTN","EASEZF4",40,0)
 . . . S EAS(EASAPP,FILE,"+1,",".02")=FLINK("CN",MULTIPLE,408.12)
"RTN","EASEZF4",41,0)
 . . . S EAS(EASAPP,FILE,"+1,","101")=DUZ
"RTN","EASEZF4",42,0)
 . . . S EAS(EASAPP,FILE,"+1,","102")=DT
"RTN","EASEZF4",43,0)
 . . . S EAS(EASAPP,FILE,"+1,","103")=DUZ
"RTN","EASEZF4",44,0)
 . . . S EAS(EASAPP,FILE,"+1,","104")=DT
"RTN","EASEZF4",45,0)
 . . I FILE=408.22,$G(FLINK("CN",MULTIPLE,408.21)) D
"RTN","EASEZF4",46,0)
 . . . S EAS(EASAPP,FILE,"+1,",".01")=EASDFN
"RTN","EASEZF4",47,0)
 . . . S EAS(EASAPP,FILE,"+1,",".02")=FLINK("CN",MULTIPLE,408.21)
"RTN","EASEZF4",48,0)
 . . . S X=$P($G(CN(MULTIPLE,FILE,SUBFILE,".1")),U,1) I X S EAS(EASAPP,FILE,"+1,",".1")="Y"
"RTN","EASEZF4",49,0)
 . . . ;EAS*1.0*57 - ALLOW NULL VALUES FOR .09 AND .18
"RTN","EASEZF4",50,0)
 . . . S X=$P($G(CN(MULTIPLE,FILE,SUBFILE,".09")),U,1),EAS(EASAPP,FILE,"+1,",".09")=$S(X["Y":1,X["N":0,1:"")
"RTN","EASEZF4",51,0)
 . . . S X=$P($G(CN(MULTIPLE,408.21,408.21,".14")),U,1) I X S EAS(EASAPP,FILE,"+1,",".11")=1
"RTN","EASEZF4",52,0)
 . . . S X=$P($G(CN(MULTIPLE,FILE,SUBFILE,".18")),U,1),EAS(EASAPP,FILE,"+1,",".18")=$S(X["Y":1,X["N":0,1:"")
"RTN","EASEZF4",53,0)
 . . . S X=$G(EAS(EASAPP,FILE,"+1,",".1"))
"RTN","EASEZF4",54,0)
 . . . S EAS(EASAPP,FILE,"+1,",".1")=$S(X="YES":1,X="NO":0,1:"")
"RTN","EASEZF4",55,0)
 . . . S X=$G(EAS(EASAPP,FILE,"+1,",".06"))
"RTN","EASEZF4",56,0)
 . . . S EAS(EASAPP,FILE,"+1,",".06")=$S(X="YES":1,X="NO":0,1:"")
"RTN","EASEZF4",57,0)
 . . I FILE'=408.12 D
"RTN","EASEZF4",58,0)
 . . . S FLINK("CN",MULTIPLE,FILE)=$$NOLINK^EASEZF2(.EAS)
"RTN","EASEZF4",59,0)
 . . . S FLD="" F  S FLD=$O(CN(MULTIPLE,FILE,SUBFILE,FLD)) Q:FLD=""  D
"RTN","EASEZF4",60,0)
 . . . . S $P(CN(MULTIPLE,FILE,SUBFILE,FLD),U,5)=FLINK("CN",MULTIPLE,FILE)
"RTN","EASEZF4",61,0)
 Q
"RTN","EASEZF4",62,0)
 ;
"RTN","EASEZF4",63,0)
LINKUP ;
"RTN","EASEZF4",64,0)
 N SUBIEN,KEYIEN,MULTIPLE,FILE,SUBFILE,FIELD,DATAKEY,DATANM,TYPE,LINK,X
"RTN","EASEZF4",65,0)
 S SUBIEN=0 F  S SUBIEN=$O(^EAS(712,EASAPP,10,SUBIEN)) Q:+SUBIEN=0  D
"RTN","EASEZF4",66,0)
 . S X=$G(^EAS(712,EASAPP,10,SUBIEN,1))
"RTN","EASEZF4",67,0)
 . ;quit if no data to file
"RTN","EASEZF4",68,0)
 . Q:(($P(X,U,1)="")&($P(X,U,2)=""))
"RTN","EASEZF4",69,0)
 . S TYPE=""
"RTN","EASEZF4",70,0)
 . S KEYIEN=$P(^EAS(712,EASAPP,10,SUBIEN,0),U,1),MULTIPLE=$P(^(0),U,2)
"RTN","EASEZF4",71,0)
 . S DATANM=$P(^EAS(711,KEYIEN,0),U,1),DATAKEY=$P(^(0),U,2),FILE=$P(^EAS(711,KEYIEN,1),U,1),SUBFILE=$P(^(1),U,2),FIELD=$P(^(1),U,3)
"RTN","EASEZF4",72,0)
 . Q:FILE<408
"RTN","EASEZF4",73,0)
 . Q:FILE>408.22
"RTN","EASEZF4",74,0)
 . I SUBFILE=408.1275 S FILE=SUBFILE
"RTN","EASEZF4",75,0)
 . I DATANM["CHILD" S TYPE="CN"
"RTN","EASEZF4",76,0)
 . I DATANM["ASSET(N)" S TYPE="CN"   ;EAS*1.0*70
"RTN","EASEZF4",77,0)
 . I DATANM["CHILD(N)" D
"RTN","EASEZF4",78,0)
 . . ;necessary because some version 6 income data for child1 is brought-in via a child(n) multiple
"RTN","EASEZF4",79,0)
 . . S MULTIPLE=MULTIPLE+1
"RTN","EASEZF4",80,0)
 . . Q:$G(EASVRSN)<6
"RTN","EASEZF4",81,0)
 . . ;EAS*1.0*70 -- added up-arrows on next line
"RTN","EASEZF4",82,0)
 . . I FILE=408.21,("^.08^.14^.17^"[("^"_FIELD_"^")) S MULTIPLE=MULTIPLE-1
"RTN","EASEZF4",83,0)
 . I DATANM["SPOUSE" S TYPE="SP"
"RTN","EASEZF4",84,0)
 . I TYPE="" S TYPE="AP"
"RTN","EASEZF4",85,0)
 . S LINK=$G(FLINK(TYPE,MULTIPLE,FILE))
"RTN","EASEZF4",86,0)
 . Q:'LINK
"RTN","EASEZF4",87,0)
 . Q:$$SUPPRESS^EASEZU4(EASAPP,DATAKEY,1,$G(EASVRSN))
"RTN","EASEZF4",88,0)
 . I FILE=408.1275 S LINK=FLINK(TYPE,MULTIPLE,408.12)_";"_FLINK(TYPE,MULTIPLE,FILE)
"RTN","EASEZF4",89,0)
 . S $P(^EAS(712,EASAPP,10,SUBIEN,2),U,2)=LINK
"RTN","EASEZF4",90,0)
 Q
"RTN","EASEZI")
0^11^B24333225
"RTN","EASEZI",1,0)
EASEZI ;ALB/jap - Database Inquiry & Record Finder for 1010EZ Processing ;10/12/00  13:08
"RTN","EASEZI",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**1,9,44,51,57,70**;Mar 15, 2001;Build 26
"RTN","EASEZI",3,0)
 ;
"RTN","EASEZI",4,0)
DFN(EASAPP,EASDFN) ;match or add 1010EZ applicant to Patient file #2
"RTN","EASEZI",5,0)
 ;
"RTN","EASEZI",6,0)
 ;input  
"RTN","EASEZI",7,0)
 ;  EASAPP = application ien in file #712
"RTN","EASEZI",8,0)
 ;output 
"RTN","EASEZI",9,0)
 ;  EASDFN = valid ien in file #2; passed by reference
"RTN","EASEZI",10,0)
 ;           OR -1 if no patient match made;
"RTN","EASEZI",11,0)
 ;           note: this may be an existing patient or one newly created by user action
"RTN","EASEZI",12,0)
 ;
"RTN","EASEZI",13,0)
 ;This entry point it used only for initial match of Applicant with Patient database.
"RTN","EASEZI",14,0)
 ;
"RTN","EASEZI",15,0)
 N DFN,DGNEWPF,DGRPTOUT,EZDATA,KEY,NAME,SSN,DOB,SEX,KEYIEN,ACCEPT,ARRAY,RECD
"RTN","EASEZI",16,0)
 N VETTYPE,NEW,TSSN,REM,N,X,DA,DR,DIE,DIC,DIQ,ALREADY,OUT,FILE,SUBFILE,FLD,ELIGVER,SVCVER,APPTVER
"RTN","EASEZI",17,0)
 Q:'EASAPP
"RTN","EASEZI",18,0)
 ;do not proceed if link to file #2 already established
"RTN","EASEZI",19,0)
 S EASDFN=$P($G(^EAS(712,EASAPP,0)),U,10) Q:EASDFN
"RTN","EASEZI",20,0)
 D FULL^VALM1 W @IOF
"RTN","EASEZI",21,0)
 S EASEZNEW="",ELIGVER=0,SVCVER=0,APPTVER=0
"RTN","EASEZI",22,0)
 S KEY=$$KEY711^EASEZU1("APPLICANT SEX")
"RTN","EASEZI",23,0)
 S SEX=$P($$DATA712^EASEZU1(EASAPP,KEY),U,1),SEX=$S(SEX="M":"Male",SEX="F":"Female",1:"")
"RTN","EASEZI",24,0)
 S DIQ="ARRAY",DIQ(0)="E",DA=EASAPP,DR="1;2;3;3.3",DIC=712 D EN^DIQ1
"RTN","EASEZI",25,0)
 S NAME=$G(ARRAY(712,EASAPP,1,"E"))
"RTN","EASEZI",26,0)
 S SSN=$P($G(ARRAY(712,EASAPP,2,"E")),"&",1)
"RTN","EASEZI",27,0)
 S DOB=$P($G(ARRAY(712,EASAPP,2,"E")),"&",2)
"RTN","EASEZI",28,0)
 S RECD=$G(ARRAY(712,EASAPP,3,"E"))
"RTN","EASEZI",29,0)
 S VETTYPE=$G(ARRAY(712,EASAPP,3.3,"E"))
"RTN","EASEZI",30,0)
 W !,"Applicant Data",?24,"Application #: ",EASAPP,?48,"Received: ",RECD,!
"RTN","EASEZI",31,0)
 W !,"Name: ",NAME
"RTN","EASEZI",32,0)
 W !,"SSN: ",SSN,?24,"DOB: ",DOB,?48,"Sex: ",SEX
"RTN","EASEZI",33,0)
 W !,"Veteran Type: ",VETTYPE
"RTN","EASEZI",34,0)
 W !!,"Enter Applicant data as prompted --"
"RTN","EASEZI",35,0)
 ;
"RTN","EASEZI",36,0)
 ;Get Patient file (#2) IEN - DFN
"RTN","EASEZI",37,0)
 D GETPAT^DGRPTU("",1,.DFN,.DGNEWPF)
"RTN","EASEZI",38,0)
 Q:($G(DFN)'>0)
"RTN","EASEZI",39,0)
 ;if DGNEWPF=1 then applicant has just been added to file #2 as new patient
"RTN","EASEZI",40,0)
 S NEW=""
"RTN","EASEZI",41,0)
 I DGNEWPF D
"RTN","EASEZI",42,0)
 . S NEW=1
"RTN","EASEZI",43,0)
 . ;add a remark to file #2 record to help keep track of new patients added by 1010EZ
"RTN","EASEZI",44,0)
 . S REM="NEW PT. FROM ELECTRONIC 10-10EZ -- IN PROCESS"
"RTN","EASEZI",45,0)
 . S DA=DFN,DIE="^DPT(",DR=".091///^S X=REM"
"RTN","EASEZI",46,0)
 . D ^DIE
"RTN","EASEZI",47,0)
 ;if seems to be not new, check remark field just to make sure
"RTN","EASEZI",48,0)
 I NEW="" D
"RTN","EASEZI",49,0)
 . S REM="NEW PT. FROM ELECTRONIC 10-10EZ -- IN PROCESS"
"RTN","EASEZI",50,0)
 . I $P(^DPT(DFN,0),U,10)=REM S NEW=1
"RTN","EASEZI",51,0)
 ;MPI Query
"RTN","EASEZI",52,0)
 S X="MPIFAPI" X ^%ZOSF("TEST")  D
"RTN","EASEZI",53,0)
 . Q:'$T
"RTN","EASEZI",54,0)
 . K MPIFRTN
"RTN","EASEZI",55,0)
 . D MPIQ^MPIFAPI(DFN)
"RTN","EASEZI",56,0)
 . K MPIFRTN,MPIQRYNM
"RTN","EASEZI",57,0)
 ;check for an in-process application already linked to this DFN
"RTN","EASEZI",58,0)
 S OUT=0,ALREADY=0 F  S ALREADY=$O(^EAS(712,"AC",DFN,ALREADY)) Q:'ALREADY  D  Q:OUT
"RTN","EASEZI",59,0)
 . S FILDATE=$P($G(^EAS(712,ALREADY,2)),U,5)
"RTN","EASEZI",60,0)
 . S CLSDATE=$P($G(^EAS(712,ALREADY,2)),U,9)
"RTN","EASEZI",61,0)
 . I 'FILDATE,'CLSDATE S OUT=1 D
"RTN","EASEZI",62,0)
 . . W !!?3,"Sorry... cannot link to selected Patient."
"RTN","EASEZI",63,0)
 . . W !?3,"Application #"_ALREADY_" is already linked to this Patient,"
"RTN","EASEZI",64,0)
 . . W !?3,"and is still in-process."
"RTN","EASEZI",65,0)
 . . D PAUSE^VALM1 K FILDATE,CLSDATE
"RTN","EASEZI",66,0)
 Q:OUT
"RTN","EASEZI",67,0)
 D RESET^EASEZI1
"RTN","EASEZI",68,0)
 Q
"RTN","EASEZI",69,0)
 ;
"RTN","EASEZI",70,0)
I201(EASDFN,EASARRAY) ;retrieve ien(s) in subfile #2.01
"RTN","EASEZI",71,0)
 ;input EASDFN    = ien to #2
"RTN","EASEZI",72,0)
 ;output EASARRAY = ien(s) to #2.01
"RTN","EASEZI",73,0)
 ;                  each array element = EASDFN;subfile_ien
"RTN","EASEZI",74,0)
 ;
"RTN","EASEZI",75,0)
 N N,IEN
"RTN","EASEZI",76,0)
 S IEN=0,N=0 F  S IEN=$O(^DPT(EASDFN,.01,IEN)) Q:'IEN  S N=N+1,EASARRAY(N)=EASDFN_";"_IEN
"RTN","EASEZI",77,0)
 Q
"RTN","EASEZI",78,0)
 ;
"RTN","EASEZI",79,0)
I202(EASDFN,EASARRAY) ;retrieve ien(s) in subfile #2.02
"RTN","EASEZI",80,0)
 ;input EASDFN    = ien to #2
"RTN","EASEZI",81,0)
 ;output EASARRAY = ien(s) to #2.01
"RTN","EASEZI",82,0)
 ;                  each array element = EASDFN;subfile_ien
"RTN","EASEZI",83,0)
 ;
"RTN","EASEZI",84,0)
 N N,IEN
"RTN","EASEZI",85,0)
 S IEN=0,N=0 F  S IEN=$O(^DPT(EASDFN,.02,IEN)) Q:'IEN  S N=N+1,EASARRAY(N)=EASDFN_";"_IEN
"RTN","EASEZI",86,0)
 Q
"RTN","EASEZI",87,0)
 ;
"RTN","EASEZI",88,0)
I206(EASDFN,EASARRAY) ;retrieve ien(s) in subfile #2.06
"RTN","EASEZI",89,0)
 ;input EASDFN    = ien to #2
"RTN","EASEZI",90,0)
 ;output EASARRAY = ien(s) to #2.01
"RTN","EASEZI",91,0)
 ;                  each array element = EASDFN;subfile_ien
"RTN","EASEZI",92,0)
 ;
"RTN","EASEZI",93,0)
 N N,IEN
"RTN","EASEZI",94,0)
 S IEN=0,N=0 F  S IEN=$O(^DPT(EASDFN,.06,IEN)) Q:'IEN  S N=N+1,EASARRAY(N)=EASDFN_";"_IEN
"RTN","EASEZI",95,0)
 Q
"RTN","EASEZI",96,0)
 ;
"RTN","EASEZI",97,0)
I2101(EASDFN,EASARRAY) ;retrieve ien to subfile #2.101
"RTN","EASEZI",98,0)
 ;input EASDFN    = ien to #2
"RTN","EASEZI",99,0)
 ;output EASARRAY = most recent ien in #2.101;
"RTN","EASEZI",100,0)
 ;                  array element = EASDFN;subfile_ien
"RTN","EASEZI",101,0)
 ;
"RTN","EASEZI",102,0)
 N N,IEN,ARR,LAST
"RTN","EASEZI",103,0)
 S IEN=0,N=0 F  S IEN=$O(^DPT(EASDFN,"DIS",IEN)) Q:'IEN  D
"RTN","EASEZI",104,0)
 . S RDATE=$P(^DPT(EASDFN,"DIS",IEN,0),U,1),ARR(RDATE)=IEN
"RTN","EASEZI",105,0)
 I $D(ARR) D
"RTN","EASEZI",106,0)
 . S LAST=$O(ARR(999999999),-1),IEN=ARR(LAST)
"RTN","EASEZI",107,0)
 . S EASARRAY(1)=EASDFN_";"_IEN
"RTN","EASEZI",108,0)
 Q
"RTN","EASEZI",109,0)
 ;
"RTN","EASEZI",110,0)
I2711(EASDFN,EASARRAY) ;retrieve ien to file #27.11
"RTN","EASEZI",111,0)
 ;input EASDFN    = ien to #2
"RTN","EASEZI",112,0)
 ;output EASARRAY = current enrollment ien in #27.11;
"RTN","EASEZI",113,0)
 ;                  array element = ien
"RTN","EASEZI",114,0)
 N CUR
"RTN","EASEZI",115,0)
 S CUR=$$FINDCUR^DGENA(+EASDFN)
"RTN","EASEZI",116,0)
 S EASARRAY(1)=CUR
"RTN","EASEZI",117,0)
 Q
"RTN","EASEZI",118,0)
 ;
"RTN","EASEZI",119,0)
I408(EASDFN,EASAPP,EASARRAY) ;retrieve ien(s) to files #408.12,#408.13,#408.21,#408.22
"RTN","EASEZI",120,0)
 ;
"RTN","EASEZI",121,0)
 ;input EASDFN    = ien to #2
"RTN","EASEZI",122,0)
 ;      EASAPP    = ien to #712
"RTN","EASEZI",123,0)
 ;output EASARRAY = ien(s) to files; passed by reference
"RTN","EASEZI",124,0)
 ;       array(408,"V",1) = ien_#408.12^ien_#408.13^ien_#408.21^ien#408.22 ;veteran data
"RTN","EASEZI",125,0)
 ;       array(408,"S",1) = ien_#408.12^ien_#408.13^ien_#408.21^ien#408.22 ;spouse data
"RTN","EASEZI",126,0)
 ;       array(408,"C",multiple) = ien_#408.12^ien_#408.13^ien_#408.21^ien#408.22 ;child data
"RTN","EASEZI",127,0)
 ;   where ien_#408.13 = ien;global_root
"RTN","EASEZI",128,0)
 ;
"RTN","EASEZI",129,0)
 N CURINCYR,X,Y,DIC,DA,DR,DIQ,EAS,DEP,REL,IX,JX,KX,I13,SUB1,SUB2,INCYR,PT
"RTN","EASEZI",130,0)
 ;
"RTN","EASEZI",131,0)
 Q:'EASDFN
"RTN","EASEZI",132,0)
 S Y=$P($G(^EAS(712,EASAPP,0)),U,6) I Y="" S Y=DT
"RTN","EASEZI",133,0)
 S %F=5,X=$$FMTE^XLFDT(Y,%F),X=+$P(X,"/",3)-1,%DT="P" D ^%DT S CURINCYR=Y
"RTN","EASEZI",134,0)
 ;find all associated 408 records, even if no actual income test
"RTN","EASEZI",135,0)
 ; get #408.12, #408.13, #408.21, #408.22 iens
"RTN","EASEZI",136,0)
 K EAS S DEP=0
"RTN","EASEZI",137,0)
 S IX=0 F  S IX=$O(^DGPR(408.12,"B",EASDFN,IX)) Q:'IX  D
"RTN","EASEZI",138,0)
 . S DIC=408.12,DA=IX,DIQ="EAS",DIQ(0)="I",DR=".02;.03" D EN^DIQ1
"RTN","EASEZI",139,0)
 . S REL=$G(EAS(408.12,IX,.02,"I")),I13=$G(EAS(408.12,IX,.03,"I"))
"RTN","EASEZI",140,0)
 . S (SUB1,SUB2)="" S:REL=1 SUB1="V",SUB2=1 S:REL=2 SUB1="S",SUB2=1 S:REL>2 SUB1="C",DEP=DEP+1,SUB2=DEP
"RTN","EASEZI",141,0)
 . I SUB1]"" S EASARRAY(408,SUB1,SUB2)=IX_U_I13 D
"RTN","EASEZI",142,0)
 . . S JX=$O(^DGMT(408.21,"C",IX,""),-1)
"RTN","EASEZI",143,0)
 . . I JX D
"RTN","EASEZI",144,0)
 . . . S DIC=408.21,DA=JX,DIQ="EAS",DIQ(0)="I",DR=".01;.02" D EN^DIQ1
"RTN","EASEZI",145,0)
 . . . S INCYR=$G(EAS(408.21,JX,.01,"I")),PT=$G(EAS(408.21,JX,.02,"I"))
"RTN","EASEZI",146,0)
 . . . Q:PT'=IX
"RTN","EASEZI",147,0)
 . . . Q:(INCYR<CURINCYR)
"RTN","EASEZI",148,0)
 . . . S KX=$O(^DGMT(408.22,"AIND",JX,0))
"RTN","EASEZI",149,0)
 . . . S EASARRAY(408,SUB1,SUB2)=EASARRAY(408,SUB1,SUB2)_U_JX_U_KX
"RTN","EASEZI",150,0)
 Q
"RTN","EASEZI",151,0)
 ;
"RTN","EASEZI",152,0)
I1275(IEN) ;get the active subrecord from subfile #408.1275
"RTN","EASEZI",153,0)
 ;input     IEN = internal record number to file #408.12
"RTN","EASEZI",154,0)
 ;output SUBIEN = internal record number for active subrecord,
"RTN","EASEZI",155,0)
 ;                or -1 if invalid
"RTN","EASEZI",156,0)
 N B,ACT,SUBIEN
"RTN","EASEZI",157,0)
 I 'IEN Q -1
"RTN","EASEZI",158,0)
 S SUBIEN=-1
"RTN","EASEZI",159,0)
 S B=0 F  S B=$O(^DGPR(408.12,IEN,"E",B)) Q:'B  D
"RTN","EASEZI",160,0)
 . S ACT=$P(^DGPR(408.12,IEN,"E",B,0),U,2)
"RTN","EASEZI",161,0)
 . I ACT S SUBIEN=B
"RTN","EASEZI",162,0)
 Q SUBIEN
"RTN","EASEZI1")
0^17^B17803840
"RTN","EASEZI1",1,0)
EASEZI1 ;ALB/jap - Database Inquiry & Record Finder for 1010EZ Processing ;10/12/00  13:08
"RTN","EASEZI1",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**57,70**;Mar 15, 2001;Build 26
"RTN","EASEZI1",3,0)
 ;continuation of EASEZI, split by patch 57 due to Max size limit
"RTN","EASEZI1",4,0)
 ;
"RTN","EASEZI1",5,0)
RESET ;
"RTN","EASEZI1",6,0)
 ;set link in file #712 record
"RTN","EASEZI1",7,0)
 N FDA,ERR
"RTN","EASEZI1",8,0)
 S FDA(712,EASAPP_",",3.4)=DFN
"RTN","EASEZI1",9,0)
 I NEW D
"RTN","EASEZI1",10,0)
 . S FDA(712,EASAPP_",",3.5)=NEW
"RTN","EASEZI1",11,0)
 D FILE^DIE("","FDA","ERR")
"RTN","EASEZI1",12,0)
 ;
"RTN","EASEZI1",13,0)
 W !,"One moment please...",!
"RTN","EASEZI1",14,0)
 S EASDFN=DFN
"RTN","EASEZI1",15,0)
 ;setup tmp array for data mapping
"RTN","EASEZI1",16,0)
 D LOCAL711^EASEZU2
"RTN","EASEZI1",17,0)
 I '$G(EASVRSN) S EASVRSN=$$VERSION^EASEZU4(EASAPP)
"RTN","EASEZI1",18,0)
 ;if applicant is new to database, user accept/not accept of data elements is constrained; 
"RTN","EASEZI1",19,0)
 ;if applicant is new to VistA, mark all data elements 'accepted';
"RTN","EASEZI1",20,0)
 I NEW S N=0 F  S N=$O(^EAS(712,EASAPP,10,N)) Q:'N  I $G(^EAS(712,EASAPP,10,N,1))'="" D
"RTN","EASEZI1",21,0)
 . S ACCEPT="",FLD="",SUBFILE="",FILE=""
"RTN","EASEZI1",22,0)
 . S KEYIEN=$P(^EAS(712,EASAPP,10,N,0),U,1)
"RTN","EASEZI1",23,0)
 . I KEYIEN S X=$G(^TMP("EZDATA",$J,KEYIEN)),FILE=$P(X,U,1),SUBFILE=$P(X,U,2),FLD=$P(X,U,3),DATAKEY=$P(X,U,4),SECT=$P(DATAKEY,";",1)
"RTN","EASEZI1",24,0)
 . I FLD S ACCEPT=1
"RTN","EASEZI1",25,0)
 . I 'FLD S ACCEPT=-1
"RTN","EASEZI1",26,0)
 . I (FILE=355.33)!(FILE>408) S ACCEPT=2
"RTN","EASEZI1",27,0)
 . I FILE=2,SUBFILE=2,((FLD=.01)!(FLD=.03)!(FLD=.09)!(FLD=.531)) S ACCEPT=-1
"RTN","EASEZI1",28,0)
 . I ((SUBFILE=2.01)!(SUBFILE=2.101)) S ACCEPT=-1
"RTN","EASEZI1",29,0)
 . I (EASVRSN>5.99),((SECT="IIC")!(SECT="IIE")) D
"RTN","EASEZI1",30,0)
 . . S QUES=$P(DATAKEY,";",2)
"RTN","EASEZI1",31,0)
 . . ;EAS*1.0*70 -- added up-arrows on next two lines
"RTN","EASEZI1",32,0)
 . . I SECT="IIC","^1.6^2.3^3.3^"[("^"_QUES_"^") S ACCEPT=-1 Q
"RTN","EASEZI1",33,0)
 . . I SECT="IIE","^1.3^2.3^3.3^"[("^"_QUES_"^") S ACCEPT=-1
"RTN","EASEZI1",34,0)
 . S $P(^EAS(712,EASAPP,10,N,0),U,3)=ACCEPT
"RTN","EASEZI1",35,0)
 ;for applicants matched to existing patients check for 
"RTN","EASEZI1",36,0)
 ; verified eligibility and appt request on 1010 app
"RTN","EASEZI1",37,0)
 I 'NEW D
"RTN","EASEZI1",38,0)
 . K ARRAY
"RTN","EASEZI1",39,0)
 . S DA=EASDFN,DIC="^DPT(",DR=".3611;.3613;1010.159;1010.1511"
"RTN","EASEZI1",40,0)
 . S DIQ(0)="I",DIQ="ARRAY"
"RTN","EASEZI1",41,0)
 . D EN^DIQ1
"RTN","EASEZI1",42,0)
 . I ARRAY(2,EASDFN,.3611,"I")="V",ARRAY(2,EASDFN,.3613,"I")="H" S ELIGVER=1
"RTN","EASEZI1",43,0)
 . I ARRAY(2,EASDFN,1010.159,"I")'="",ARRAY(2,EASDFN,1010.1511,"I")'="" S APPTVER=1
"RTN","EASEZI1",44,0)
 ;correlate #712 data with mapping array
"RTN","EASEZI1",45,0)
 S N=0 F  S N=$O(^EAS(712,EASAPP,10,N)) Q:'N  S X=^(N,0) D
"RTN","EASEZI1",46,0)
 . ;don't set array node if no 1010EZ data
"RTN","EASEZI1",47,0)
 . S EZDATA=$P($G(^EAS(712,EASAPP,10,N,1)),U,1)
"RTN","EASEZI1",48,0)
 . Q:EZDATA=""
"RTN","EASEZI1",49,0)
 . S IEN=$P(X,U,1),MULTIPLE=$P(X,U,2),ACCEPT=$P(X,U,3)
"RTN","EASEZI1",50,0)
 . S ^TMP("EZDATA",$J,IEN,MULTIPLE,1)=EZDATA_U_ACCEPT_U_N
"RTN","EASEZI1",51,0)
 ;
"RTN","EASEZI1",52,0)
 ;if applicant new to VistA, stop here;
"RTN","EASEZI1",53,0)
 I NEW S EASEZNEW=1
"RTN","EASEZI1",54,0)
 Q:$G(EASEZNEW)
"RTN","EASEZI1",55,0)
 ;if matched to existing patient, get all iens needed
"RTN","EASEZI1",56,0)
 W !,"Preparing for data comparison to VistA Patient database...",!
"RTN","EASEZI1",57,0)
 K ALIAS,DISPOS,ENROLL,INCREL,RACE,ETHNC
"RTN","EASEZI1",58,0)
 D I201^EASEZI(EASDFN,.ALIAS) W "."
"RTN","EASEZI1",59,0)
 I $D(ALIAS)>1 D C201^EASEZC1
"RTN","EASEZI1",60,0)
 D I2101^EASEZI(EASDFN,.DISPOS) W "."
"RTN","EASEZI1",61,0)
 I $D(DISPOS)>1 D C2101^EASEZC1
"RTN","EASEZI1",62,0)
 ;finish getting the rest of file #2 data needed for comparison 
"RTN","EASEZI1",63,0)
 D C2^EASEZC1
"RTN","EASEZI1",64,0)
 D I2711^EASEZI(EASDFN,.ENROLL) W "."
"RTN","EASEZI1",65,0)
 I $D(ENROLL)>1 D C2711^EASEZC1
"RTN","EASEZI1",66,0)
 D I408^EASEZI(EASDFN,EASAPP,.INCREL) W "."
"RTN","EASEZI1",67,0)
 I $D(INCREL)>1 D C408^EASEZC1
"RTN","EASEZI1",68,0)
 D I202^EASEZI(EASDFN,.RACE) W "."
"RTN","EASEZI1",69,0)
 I $D(RACE)>1 D C202^EASEZC3
"RTN","EASEZI1",70,0)
 D I206^EASEZI(EASDFN,.ETHNC) W "."
"RTN","EASEZI1",71,0)
 I $D(ETHNC)>1 D C206^EASEZC3
"RTN","EASEZI1",72,0)
 ;set file #355.33 data to 'always accept';
"RTN","EASEZI1",73,0)
 ;set unmatched data for files #408.12, #408.13, #408.21, #408.22 to 'always accept';
"RTN","EASEZI1",74,0)
 S N=0 F  S N=$O(^EAS(712,EASAPP,10,N)) Q:'N  S X=^(N,0) D
"RTN","EASEZI1",75,0)
 . S KEYIEN=$P(X,U,1),MULTIPLE=$P(X,U,2)
"RTN","EASEZI1",76,0)
 . I KEYIEN S X=$G(^TMP("EZDATA",$J,KEYIEN)),FILE=$P(X,U,1),SUBFILE=$P(X,U,2),FLD=$P(X,U,3),DATAKEY=$P(X,U,4),SECT=$P(DATAKEY,";",1)
"RTN","EASEZI1",77,0)
 . S ACCEPT=""
"RTN","EASEZI1",78,0)
 . I 'FLD S ACCEPT=-1
"RTN","EASEZI1",79,0)
 . I FILE=2,SUBFILE=2,((FLD=.01)!(FLD=.03)!(FLD=.09)!(FLD=.531)) S ACCEPT=-1
"RTN","EASEZI1",80,0)
 . ;set certain eligibility related data elements to 'never accept' if eligibility verified
"RTN","EASEZI1",81,0)
 . I FILE=2,FLD=.313,$G(ARRAY(2,EASDFN,.3611,"I"))="V" S ACCEPT=-1
"RTN","EASEZI1",82,0)
 . I FILE=2,$G(ELIGVER),((FLD=.301)!(FLD=.302)!(FLD=.36235)) S ACCEPT=-1
"RTN","EASEZI1",83,0)
 . ;set appt requested element to 'never accept' if already exist
"RTN","EASEZI1",84,0)
 . I FILE=2,$G(APPTVER),FLD=1010.159 S ACCEPT=-1
"RTN","EASEZI1",85,0)
 . ;EAS*1.0*70 -- accept Country
"RTN","EASEZI1",86,0)
 . I FILE=2,(FLD=.1173) S ACCEPT=1
"RTN","EASEZI1",87,0)
 . I FILE=355.33 S ACCEPT=2
"RTN","EASEZI1",88,0)
 . I FILE>408 S ACCEPT=2
"RTN","EASEZI1",89,0)
 . I (EASVRSN>5.99),((SECT="IIC")!(SECT="IIE")) D
"RTN","EASEZI1",90,0)
 . . S QUES=$P(DATAKEY,";",2)
"RTN","EASEZI1",91,0)
 . . ;EAS*1.0*70 -- added the up-arrows on next two lines
"RTN","EASEZI1",92,0)
 . . I SECT="IIC","^1.6^2.3^3.3^"[("^"_QUES_"^") S ACCEPT=-1 Q
"RTN","EASEZI1",93,0)
 . . I SECT="IIE","^1.3^2.3^3.3^"[("^"_QUES_"^") S ACCEPT=-1
"RTN","EASEZI1",94,0)
 . S $P(^EAS(712,EASAPP,10,N,0),U,3)=ACCEPT
"RTN","EASEZI1",95,0)
 . S $P(^TMP("EZDATA",$J,KEYIEN,MULTIPLE,1),U,2)=ACCEPT
"RTN","EASEZI1",96,0)
 K ALIAS,DISPOS,ENROLL,INCREL
"RTN","EASEZI1",97,0)
 Q
"RTN","EASEZI1",98,0)
 ;
"RTN","EASEZP61")
0^22^B30387154
"RTN","EASEZP61",1,0)
EASEZP61 ;ALB/AMA - Print 1010EZ, Version 6 or greater, Cont. ; 10/19/2000
"RTN","EASEZP61",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**51,60,70**;Mar 15, 2001;Build 26
"RTN","EASEZP61",3,0)
 ;
"RTN","EASEZP61",4,0)
 ; This routine copied from EASEZPF1; if the version # of the 1010EZ
"RTN","EASEZP61",5,0)
 ; application is 6.0 or greater, then this routine will be executed.
"RTN","EASEZP61",6,0)
 ;
"RTN","EASEZP61",7,0)
EN(EALNE,EAINFO) ;Entry point for VA 10-10EZ, Version 6 or greater, page 1
"RTN","EASEZP61",8,0)
 ; Called from EN^EASEZP6F
"RTN","EASEZP61",9,0)
 N X,EASD
"RTN","EASEZP61",10,0)
 ;
"RTN","EASEZP61",11,0)
 S EASD=$NA(^TMP("EASEZ",$J,1))
"RTN","EASEZP61",12,0)
 D HDRMAIN^EASEZP6F(.EALNE)
"RTN","EASEZP61",13,0)
 D DEM
"RTN","EASEZP61",14,0)
 ;
"RTN","EASEZP61",15,0)
 D FT^EASEZP6F(.EALNE,.EAINFO)
"RTN","EASEZP61",16,0)
 S EAINFO("VET")=@EASD@(2),EAINFO("SSN")=@EASD@(5)
"RTN","EASEZP61",17,0)
 Q
"RTN","EASEZP61",18,0)
 ;
"RTN","EASEZP61",19,0)
DEM ; Print VA 10-10 Section I, Demographic information
"RTN","EASEZP61",20,0)
 ;
"RTN","EASEZP61",21,0)
 W !!?50,"SECTION I - GENERAL INFORMATION"
"RTN","EASEZP61",22,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",23,0)
 W !?18,"Federal law provides criminal penalties, including a fine and/or imprisonment for up to 5 years,"
"RTN","EASEZP61",24,0)
 W !?20,"for concealing a material fact or making a materially false statement.  (See 18 U.S.C. 1001)"
"RTN","EASEZP61",25,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",26,0)
 ;
"RTN","EASEZP61",27,0)
 W !,"1. VETERAN'S NAME (Last, First, Middle Name)",?50,"|2. OTHER NAMES USED",?87,"|3. MOTHER'S MAIDEN NAME"
"RTN","EASEZP61",28,0)
 W !?3,@EASD@(2),?50,"|   ",@EASD@(3),?87,"|   ",@EASD@("3A")
"RTN","EASEZP61",29,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",30,0)
 ;
"RTN","EASEZP61",31,0)
 W !,"4. GENDER",?16,"|5. WHAT IS YOUR RACE?   ",@EASD@("4B"),"AMERICAN INDIAN OR ALASKA NATIVE"
"RTN","EASEZP61",32,0)
 W ?90,@EASD@("4E"),"ASIAN",?103,@EASD@("4C"),"BLACK OR AFRICAN AMERICAN"
"RTN","EASEZP61",33,0)
 W !?3,@EASD@(4),?16,"|",?41,@EASD@("4D"),"NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER"
"RTN","EASEZP61",34,0)
 W ?90,@EASD@("4F"),"WHITE",?103,@EASD@("4G"),"UNKNOWN BY PATIENT"
"RTN","EASEZP61",35,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",36,0)
 ;
"RTN","EASEZP61",37,0)
 W !,"6. ARE YOU SPANISH, HISPANIC,",?33,"|7. SOCIAL SECURITY NUMBER",?62,"|9. DATE OF BIRTH (mm/dd/yyyy)",?95,"|10. RELIGION"
"RTN","EASEZP61",38,0)
 W !?3,"OR LATINO?   ",@EASD@("4A"),?33,"|   ",@EASD@(5),?62,"|   ",@EASD@(7),?95,"|    ",@EASD@(8)
"RTN","EASEZP61",39,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",40,0)
 ;
"RTN","EASEZP61",41,0)
 W !,"8. CLAIM NUMBER",?66,"|9A. PLACE OF BIRTH (City & State)"
"RTN","EASEZP61",42,0)
 W !?3,@EASD@(6),?66,"|    ",@EASD@("8A")
"RTN","EASEZP61",43,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",44,0)
 ;
"RTN","EASEZP61",45,0)
 ;EAS*1.0*70
"RTN","EASEZP61",46,0)
 I $G(@EASD@("9H"))="UNITED STATES" D  I 1  ;Use domestic address field labels
"RTN","EASEZP61",47,0)
 . W !,"11. PERMANENT ADDRESS (Street)",?41,"|11A. CITY",?64,"|11B. STATE",?107,"|11C. ZIP CODE (9 digits)"
"RTN","EASEZP61",48,0)
 . W !?4,@EASD@("9A"),?41,"|     ",@EASD@("9B"),?64,"|     ",@EASD@("9C"),?107,"|     ",@EASD@("9D")
"RTN","EASEZP61",49,0)
 . W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",50,0)
 . ;
"RTN","EASEZP61",51,0)
 . W !,"11D. COUNTY",?35,"|11E. HOME TELEPHONE NUMBER (Include area code)  |11F. E-MAIL ADDRESS"
"RTN","EASEZP61",52,0)
 . W !?5,@EASD@("9E"),?35,"|     ",@EASD@(10),?84,"|     ",@EASD@("11A")
"RTN","EASEZP61",53,0)
 ;
"RTN","EASEZP61",54,0)
 E  D  ;Use foreign address field labels
"RTN","EASEZP61",55,0)
 . W !,"11. PERMANENT ADDRESS (Street)",?41,"|11A. CITY",?64,"|11B. PROVINCE",?107,"|11C. POSTAL CODE"
"RTN","EASEZP61",56,0)
 . W !?4,@EASD@("9A"),?41,"|     ",@EASD@("9B"),?64,"|     ",@EASD@("9F"),?107,"|     ",@EASD@("9G")
"RTN","EASEZP61",57,0)
 . W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",58,0)
 . ;
"RTN","EASEZP61",59,0)
 . W !,"11D. COUNTRY",?35,"|11E. HOME TELEPHONE NUMBER (Include area code)  |11F. E-MAIL ADDRESS"
"RTN","EASEZP61",60,0)
 . W !?5,@EASD@("9H"),?35,"|     ",@EASD@(10),?84,"|     ",@EASD@("11A")
"RTN","EASEZP61",61,0)
 ;
"RTN","EASEZP61",62,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",63,0)
 ;
"RTN","EASEZP61",64,0)
 W !,"11G. CELLULAR TELEPHONE NUMBER (Include area code)",?66,"|11H. PAGER NUMBER (Include area code)"
"RTN","EASEZP61",65,0)
 W !?5,@EASD@("11G"),?66,"|     ",@EASD@("11H")
"RTN","EASEZP61",66,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",67,0)
 ;
"RTN","EASEZP61",68,0)
 W !,"12. TYPE OF BENEFIT(S) APPLIED FOR:"
"RTN","EASEZP61",69,0)
 W !?4,@EASD@("1A")
"RTN","EASEZP61",70,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",71,0)
 ;
"RTN","EASEZP61",72,0)
 W !,"13. IF APPLYING FOR HEALTH SERVICES OR ENROLLMENT, WHICH VA MEDICAL CENTER",?77,"|14. HAVE YOU BEEN SEEN AT A VA HEALTH CARE FACILITY?"
"RTN","EASEZP61",73,0)
 W !?4,"OR OUTPATIENT CLINIC DO YOU PREFER?  ",@EASD@("1B"),?77,"|    ",@EASD@("11C") I @EASD@("11C")="YES" W ", LOCATION:  ",@EASD@("11D")
"RTN","EASEZP61",74,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",75,0)
 ;
"RTN","EASEZP61",76,0)
 W !,"15. DO YOU WANT AN APPOINTMENT WITH A VA DOCTOR OR PROVIDER AS SOON AS ONE BECOMES",?87,"|16. CURRENT MARITAL STATUS"
"RTN","EASEZP61",77,0)
 W !?4,"AVAILABLE?   ",@EASD@("11B") I @EASD@("11B")="NO" W ", I am only enrolling in case I need care in the future."
"RTN","EASEZP61",78,0)
 W ?87,"|    ",@EASD@(12)
"RTN","EASEZP61",79,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",80,0)
 ;
"RTN","EASEZP61",81,0)
 W !,"17. NAME, ADDRESS AND RELATIONSHIP OF NEXT OF KIN",?83,"|17A. NEXT OF KIN'S HOME TELEPHONE NUMBER"
"RTN","EASEZP61",82,0)
 W !?4,$P(@EASD@("19A"),U)," - ",$P(@EASD@("19A"),U,4),?83,"|     (Include area code)   ",@EASD@("19B")
"RTN","EASEZP61",83,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! F X=1:1:84 W " "
"RTN","EASEZP61",84,0)
 W $E(EALNE("UL"),1,48)
"RTN","EASEZP61",85,0)
 W !?4,$P(@EASD@("19A"),U,2),?83,"|17B. NEXT OF KIN'S WORK TELEPHONE NUMBER"
"RTN","EASEZP61",86,0)
 W !?4,$P(@EASD@("19A"),U,3),?83,"|     (Include area code)   ",@EASD@("19C")
"RTN","EASEZP61",87,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",88,0)
 ;
"RTN","EASEZP61",89,0)
 W !,"18. NAME, ADDRESS AND RELATIONSHIP OF EMERGENCY CONTACT",?83,"|18A. EMERGENCY CONTACT'S HOME TELEPHONE NUMBER"
"RTN","EASEZP61",90,0)
 W !?4,$P(@EASD@("20A"),U)," - ",$P(@EASD@("20A"),U,4),?83,"|     (Include area code)   ",@EASD@("20B")
"RTN","EASEZP61",91,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! F X=1:1:84 W " "
"RTN","EASEZP61",92,0)
 W $E(EALNE("UL"),1,48)
"RTN","EASEZP61",93,0)
 W !?4,$P(@EASD@("20A"),U,2),?83,"|18B. EMERGENCY CONTACT'S WORK TELEPHONE NUMBER"
"RTN","EASEZP61",94,0)
 W !?4,$P(@EASD@("20A"),U,3),?83,"|     (Include area code)   ",@EASD@("20C")
"RTN","EASEZP61",95,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",96,0)
 ;
"RTN","EASEZP61",97,0)
 W !,"19. INDIVIDUAL TO RECEIVE POSSESSION OF YOUR PERSONAL PROPERTY LEFT ON PREMISES UNDER VA CONTROL AFTER YOUR DEPARTURE OR AT THE"
"RTN","EASEZP61",98,0)
 W !?4,"THE TIME OF DEATH  (NOTE: THIS DOES NOT CONSTITUTE A WILL OR TRANSFER OF TITLE):  ",@EASD@(21)
"RTN","EASEZP61",99,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP61",100,0)
 Q
"RTN","EASEZP62")
0^20^B63766210
"RTN","EASEZP62",1,0)
EASEZP62 ;ALB/AMA,ERC - Print 1010EZ, Version 6 or greater, Cont., Page 2 ; 10/19/2000
"RTN","EASEZP62",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**51,60,70**;Mar 15, 2001;Build 26
"RTN","EASEZP62",3,0)
 ;
"RTN","EASEZP62",4,0)
 ;This routine copied from EASEZPF2; if the version # of the 1010EZ
"RTN","EASEZP62",5,0)
 ;application is 6.0 or greater, then this routine will be executed.
"RTN","EASEZP62",6,0)
 ;
"RTN","EASEZP62",7,0)
EN(EALNE,EAINFO) ; Entry point, called from EN^EASEZP6F
"RTN","EASEZP62",8,0)
 ;  Input
"RTN","EASEZP62",9,0)
 ;     EALNE  - Array of line formats for output
"RTN","EASEZP62",10,0)
 ;     EAINFO - Application Data array, see SETUP^EASEZP6F
"RTN","EASEZP62",11,0)
 ;
"RTN","EASEZP62",12,0)
 N EASD
"RTN","EASEZP62",13,0)
 ;
"RTN","EASEZP62",14,0)
 D HDR^EASEZP6F(.EALNE,.EAINFO)
"RTN","EASEZP62",15,0)
 S EASD=$NA(^TMP("EASEZ",$J,1))
"RTN","EASEZP62",16,0)
 ;
"RTN","EASEZP62",17,0)
 D II
"RTN","EASEZP62",18,0)
 D EI
"RTN","EASEZP62",19,0)
 D MIL
"RTN","EASEZP62",20,0)
 D PAP
"RTN","EASEZP62",21,0)
 ;
"RTN","EASEZP62",22,0)
 D FT^EASEZP6F(.EALNE,.EAINFO)
"RTN","EASEZP62",23,0)
 Q
"RTN","EASEZP62",24,0)
 ;
"RTN","EASEZP62",25,0)
II ; Print SECTION II - INSURANCE INFORMATION
"RTN","EASEZP62",26,0)
 ;
"RTN","EASEZP62",27,0)
 W !!?25,"SECTION II - INSURANCE INFORMATION  (Use Separate Sheet for Additional Insurance)"
"RTN","EASEZP62",28,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",29,0)
 ;
"RTN","EASEZP62",30,0)
 W !,"1. ARE YOU COVERED BY HEALTH INSURANCE?",?49,"|2. HEALTH INSURANCE COMPANY NAME, ADDRESS AND TELEPHONE NUMBER"
"RTN","EASEZP62",31,0)
 W !?3,"(Including coverage through a spouse",?49,"|   ",@EASD@("17A")
"RTN","EASEZP62",32,0)
 W !?3,"or another person)   ",@EASD@(17),?49,"|   "
"RTN","EASEZP62",33,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W $E(EALNE("UL"),1,49)
"RTN","EASEZP62",34,0)
 ;
"RTN","EASEZP62",35,0)
 W !,"3. NAME OF POLICY HOLDER",?49,"|   ",$P(@EASD@("17E"),U,2)
"RTN","EASEZP62",36,0)
 W !?3,@EASD@("17B"),?49,"|   ",@EASD@("17I")
"RTN","EASEZP62",37,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",38,0)
 ;
"RTN","EASEZP62",39,0)
 W !,"4. POLICY NUMBER",?49,"|5. GROUP CODE",?85,"|6. ARE YOU ELIGIBLE FOR MEDICAID?"
"RTN","EASEZP62",40,0)
 W !?3,@EASD@("17C"),?49,"|   ",@EASD@("17D"),?85,"|",?110,@EASD@("14J")
"RTN","EASEZP62",41,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",42,0)
 ;
"RTN","EASEZP62",43,0)
 W !,"7. ARE YOU ENROLLED IN MEDICARE HOSPITAL INSURANCE PART A?  ",@EASD@("14K"),?75,"|7A. EFFECTIVE DATE (mm/dd/yyyy)  ",@EASD@("14K1")
"RTN","EASEZP62",44,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",45,0)
 ;
"RTN","EASEZP62",46,0)
 W !,"8. ARE YOU ENROLLED IN MEDICARE HOSPITAL INSURANCE PART B?  ",@EASD@("14L"),?75,"|8A. EFFECTIVE DATE (mm/dd/yyyy)  ",@EASD@("14L1")
"RTN","EASEZP62",47,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",48,0)
 ;
"RTN","EASEZP62",49,0)
 W !,"9. NAME EXACTLY AS IT APPEARS ON YOUR MEDICARE CARD",?70,"|10. MEDICARE CLAIM NUMBER"
"RTN","EASEZP62",50,0)
 W !?3,@EASD@("14N"),?70,"|    ",@EASD@("14M")
"RTN","EASEZP62",51,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",52,0)
 ;
"RTN","EASEZP62",53,0)
 W !,"11. IS NEED FOR CARE DUE TO ON THE JOB INJURY?  ",@EASD@("22A"),?70,"|12. IS NEED FOR CARE DUE TO ACCIDENT?  ",@EASD@("22B")
"RTN","EASEZP62",54,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",55,0)
 Q
"RTN","EASEZP62",56,0)
 ;
"RTN","EASEZP62",57,0)
EI ; Print SECTION III - EMPLOYMENT INFORMATION
"RTN","EASEZP62",58,0)
 ;
"RTN","EASEZP62",59,0)
 W !!?48,"SECTION III - EMPLOYMENT INFORMATION"
"RTN","EASEZP62",60,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",61,0)
 ;
"RTN","EASEZP62",62,0)
 W !,"1. VETERAN'S EMPLOYMENT STATUS",?47,"|1A. COMPANY NAME, ADDRESS AND TELEPHONE NUMBER"
"RTN","EASEZP62",63,0)
 W !?3,$P(@EASD@("15A"),U),?47,"|    ",$P(@EASD@("15B"),U),"   ",$P(@EASD@("15B"),U,4)
"RTN","EASEZP62",64,0)
 W !,"Date of retirement (mm/dd/yyyy)   ",$P(@EASD@("15A"),U,2),?47,"|    ",$P(@EASD@("15B"),U,2)
"RTN","EASEZP62",65,0)
 W !,"If employed or retired, complete item 1A",?47,"|    ",$P(@EASD@("15B"),U,3)
"RTN","EASEZP62",66,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",67,0)
 ;
"RTN","EASEZP62",68,0)
 W !,"2. SPOUSE'S EMPLOYMENT STATUS",?47,"|2A. COMPANY NAME, ADDRESS AND TELEPHONE NUMBER"
"RTN","EASEZP62",69,0)
 W !?3,$P(@EASD@("16A"),U),?47,"|    ",$P(@EASD@("16B"),U),"   ",$P(@EASD@("16B"),U,4)
"RTN","EASEZP62",70,0)
 W !,"Date of retirement (mm/dd/yyyy)   ",$P(@EASD@("16A"),U,2),?47,"|    ",$P(@EASD@("16B"),U,2)
"RTN","EASEZP62",71,0)
 W !,"If employed or retired, complete item 2A",?47,"|    ",$P(@EASD@("16B"),U,3)
"RTN","EASEZP62",72,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",73,0)
 Q
"RTN","EASEZP62",74,0)
 ;
"RTN","EASEZP62",75,0)
MIL ;  Print out VA 10-10EZ Section IV, Military Service Information
"RTN","EASEZP62",76,0)
 ;
"RTN","EASEZP62",77,0)
 W !!?45,"SECTION IV - MILITARY SERVICE INFORMATION"
"RTN","EASEZP62",78,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",79,0)
 ;
"RTN","EASEZP62",80,0)
 W !,"1. LAST BRANCH OF SERVICE",?28,"|1A. LAST ENTRY DATE",?50,"|1B. LAST DISCHARGE DATE",?76,"|1C. DISCHARGE TYPE",?103,"|1D. MILITARY SERVICE NUMBER"
"RTN","EASEZP62",81,0)
 W !?4,@EASD@("13A"),?28,"|    ",@EASD@("13B"),?50,"|    ",@EASD@("13C"),?76,"|    ",@EASD@("13D"),?103,"|    ",@EASD@("13E")
"RTN","EASEZP62",82,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",83,0)
 ;
"RTN","EASEZP62",84,0)
 W !,"2. ANSWER YES OR NO:"
"RTN","EASEZP62",85,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",86,0)
 ;
"RTN","EASEZP62",87,0)
 ;DG*5.3*688 - change wording from Environmental Contaminants to SW 
"RTN","EASEZP62",88,0)
 ;Asia Conditions.
"RTN","EASEZP62",89,0)
 W !,"  A.  ARE YOU A PURPLE HEART AWARD RECIPIENT?",?58,"| ",@EASD@("14A1"),?64,"|  F. DO YOU NEED CARE OF CONDITIONS POTENTIALLY RELATED TO",?124,"| ",@EASD@("14E")
"RTN","EASEZP62",90,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W $E(EALNE("UL"),1,64)
"RTN","EASEZP62",91,0)
 ;
"RTN","EASEZP62",92,0)
 W !,"  B.  ARE YOU A FORMER PRISONER OF WAR?",?58,"| ",@EASD@("14A2"),?64,"|      SERVICE IN SOUTHWEST ASIA?",?124,"|"
"RTN","EASEZP62",93,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",94,0)
 ;
"RTN","EASEZP62",95,0)
 W !,"  C.  DO YOU HAVE A VA SERVICE-CONNECTED RATING?",?58,"| ",@EASD@("14B"),?64,"|  G. WERE YOU EXPOSED TO AGENT ORANGE WHILE SERVING IN",?124,"| ",@EASD@("14F")
"RTN","EASEZP62",96,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W $E(EALNE("UL"),1,64)
"RTN","EASEZP62",97,0)
 ;
"RTN","EASEZP62",98,0)
 W !,"  C1. IF YES, WHAT IS YOUR RATED PERCENTAGE?",?58,"| ",@EASD@("14B1"),"%",?64,"|     VIETNAM?",?124,"|"
"RTN","EASEZP62",99,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",100,0)
 ;
"RTN","EASEZP62",101,0)
 W !,"  D.  DID YOU SERVE IN COMBAT AFTER 11/11/1998?",?58,"| ",@EASD@("14B2"),?64,"|  H. WERE YOU EXPOSED TO RADIATION WHILE IN THE MILITARY?",?124,"| ",@EASD@("14G")
"RTN","EASEZP62",102,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",103,0)
 ;
"RTN","EASEZP62",104,0)
 W !,"  E.  WAS YOUR DISCHARGE FROM MILITARY FOR A DISABILITY",?58,"| ",@EASD@("14D4"),?64,"|  I. DID YOU RECEIVE NOSE & THROAT RADIUM TREATMENTS",?124,"| ",@EASD@("14G1")
"RTN","EASEZP62",105,0)
 W !?6,"INCURRED OR AGGRAVATED IN THE LINE OF DUTY?",?58,"|     |     WHILE IN THE MILITARY?",?124,"|"
"RTN","EASEZP62",106,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",107,0)
 ;
"RTN","EASEZP62",108,0)
 W !,"  E1. ARE YOU RECEIVING DISABILITY RETIREMENT PAY",?58,"| ",@EASD@("14D3"),?64,"|  J. DO YOU HAVE A SPINAL CORD INJURY?",?124,"| ",@EASD@("14I")
"RTN","EASEZP62",109,0)
 W !?6,"INSTEAD OF VA COMPENSATION?",?58,"|     |",?124,"|"
"RTN","EASEZP62",110,0)
 ;
"RTN","EASEZP62",111,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",112,0)
 Q
"RTN","EASEZP62",113,0)
 ;
"RTN","EASEZP62",114,0)
PAP ;  Print SECTION V - PAPERWORK AND PRIVACY ACT INFORMATION
"RTN","EASEZP62",115,0)
 ;
"RTN","EASEZP62",116,0)
 W !!?34,"SECTION V - PAPERWORK REDUCTION ACT AND PRIVACY ACT INFORMATION"
"RTN","EASEZP62",117,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",118,0)
 ;
"RTN","EASEZP62",119,0)
 W !?5,"The Paperwork Reduction Act of 1995 requires us to notify you that this information collection is in accordance with the"
"RTN","EASEZP62",120,0)
 W !,"clearance requirements of section 3507 of the Paperwork Reduction Act of 1995.  We may not conduct or sponsor, and you are not"
"RTN","EASEZP62",121,0)
 W !,"required to respond to, a collection of information unless it displays a valid OMB number.  We anticipate that the time expended by"
"RTN","EASEZP62",122,0)
 W !,"all individuals who must complete this form will average 45 minutes.  This includes the time it will take to read instructions,"
"RTN","EASEZP62",123,0)
 W !,"gather the necessary facts and fill out the form."
"RTN","EASEZP62",124,0)
 W !?5,"Privacy Act Information:  VA is asking you to provide the information on this form under 38 U.S.C., sections 1705, 1710, 1712,"
"RTN","EASEZP62",125,0)
 W !,"and 1722 in order for VA to determine your eligibility for medical benefits.  Information you supply may be verified through a"
"RTN","EASEZP62",126,0)
 W !,"computer-matching program.  VA may disclose the information that you put on the form as permitted by law.  VA may make a ""routine"
"RTN","EASEZP62",127,0)
 W !,"use"" disclosure of the information as outlined in the Privacy Act systems of records notices and in accordance with the VHA Notice"
"RTN","EASEZP62",128,0)
 W !,"of Privacy Practices.  You do not have to provide the information to VA, but if you don't, VA may be unable to process your request"
"RTN","EASEZP62",129,0)
 W !,"and serve your medical needs.  Failure to furnish the information will not have any affect on any other benefits to which you may"
"RTN","EASEZP62",130,0)
 W !,"be entitled.  If you provide VA your Social Security Number, VA will use it to administer your VA benefits.  VA may also use this"
"RTN","EASEZP62",131,0)
 W !,"information to identify veterans and persons claiming or receiving VA benefits and their records, and for other purposes authorized"
"RTN","EASEZP62",132,0)
 W !,"or required by law.",!
"RTN","EASEZP62",133,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP62",134,0)
 Q
"RTN","EASEZP64")
0^2^B28984285
"RTN","EASEZP64",1,0)
EASEZP64 ; ALB/AMA - Print 1010EZ, Version 6 or greater, Cont. ; 10/25/2000
"RTN","EASEZP64",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**60,57,70**;Mar 15, 2001;Build 26
"RTN","EASEZP64",3,0)
 ;
"RTN","EASEZP64",4,0)
 ;This routine carved from EASEZPF3; if the version # of the 1010EZ
"RTN","EASEZP64",5,0)
 ;application is 6.0 or greater, then this routine will be executed.
"RTN","EASEZP64",6,0)
 ;
"RTN","EASEZP64",7,0)
EN(EALNE,EAINFO,EASDG)  ;Entry point to print Page 3, called from EN^EASEZP6F
"RTN","EASEZP64",8,0)
 ;  Input
"RTN","EASEZP64",9,0)
 ;     EALNE  - Array of line formats for output
"RTN","EASEZP64",10,0)
 ;     EAINFO - Application Data array, see SETUP^EASEZPF
"RTN","EASEZP64",11,0)
 ;     EASDG  - Flag variable to signify request to print from DG options
"RTN","EASEZP64",12,0)
 ;
"RTN","EASEZP64",13,0)
 N EASIGN,EASD
"RTN","EASEZP64",14,0)
 ;
"RTN","EASEZP64",15,0)
 I $$GET1^DIQ(712,EAINFO("EASAPP")_",",4)]"" D
"RTN","EASEZP64",16,0)
 . S EASIGN=$$GET1^DIQ(712,EAINFO("EASAPP")_",",4.1)
"RTN","EASEZP64",17,0)
 S EASIGN=$G(EASIGN)
"RTN","EASEZP64",18,0)
 ;
"RTN","EASEZP64",19,0)
 D HDR^EASEZP6F(.EALNE,.EAINFO)
"RTN","EASEZP64",20,0)
 S EASD=$NA(^TMP("EASEZ",$J,2))
"RTN","EASEZP64",21,0)
 ;
"RTN","EASEZP64",22,0)
 D NET
"RTN","EASEZP64",23,0)
 D CON
"RTN","EASEZP64",24,0)
 D AOB
"RTN","EASEZP64",25,0)
 D FT^EASEZP6F(.EALNE,.EAINFO)
"RTN","EASEZP64",26,0)
 ;
"RTN","EASEZP64",27,0)
 Q
"RTN","EASEZP64",28,0)
 ;
"RTN","EASEZP64",29,0)
NET ;  Print SECTION X - PREVIOUS CALENDAR YEAR NET WORTH
"RTN","EASEZP64",30,0)
 ;
"RTN","EASEZP64",31,0)
 I $G(EASDG),+@EASD@(999) W !!?2,"SECTION X - PREVIOUS CALENDAR YEAR NET WORTH  (INCOME YEAR:  ",@EASD@(999),")  (Use a separate sheet for additional dependents)"
"RTN","EASEZP64",32,0)
 E  W !!?38,"SECTION X - PREVIOUS CALENDAR YEAR NET WORTH  (Use a separate sheet for additional dependents)"
"RTN","EASEZP64",33,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP64",34,0)
 ;
"RTN","EASEZP64",35,0)
 W !?78,"|",?84,"VETERAN",?96,"|",?102,"SPOUSE",?114,"|",?120,"CHILD 1"
"RTN","EASEZP64",36,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP64",37,0)
 ;
"RTN","EASEZP64",38,0)
 W !,"1. CASH, AMOUNT IN BANK ACCOUNTS (e.g., checking and savings accounts,",?78,"|  $ ",$P(@EASD@("2E1"),U),?96,"|  $ ",$P(@EASD@("2E1"),U,2),?114,"|  $ ",$P(@EASD@("2E1"),U,3)
"RTN","EASEZP64",39,0)
 W !,"certificates of deposit, individual retirement accounts, stocks and bonds)",?78,"|",?96,"|",?114,"|"
"RTN","EASEZP64",40,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP64",41,0)
 ;
"RTN","EASEZP64",42,0)
 W !,"2. MARKET VALUE OF LAND AND BUILDINGS MINUS MORTGAGES AND LIENS (e.g., second",?78,"|  $ ",$P(@EASD@("2E2"),U),?96,"|  $ ",$P(@EASD@("2E2"),U,2),?114,"|  $ ",$P(@EASD@("2E2"),U,3)
"RTN","EASEZP64",43,0)
 W !,"homes and non-income-producing property.  Do not count your primary home.)",?78,"|",?96,"|",?114,"|"
"RTN","EASEZP64",44,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP64",45,0)
 ;
"RTN","EASEZP64",46,0)
 W !,"3. VALUE OF OTHER PROPERTY OR ASSETS (e.g., art, rare coins, collectibles)",?78,"|  $ ",$P(@EASD@("2E3"),U),?96,"|  $ ",$P(@EASD@("2E3"),U,2),?114,"|  $ ",$P(@EASD@("2E3"),U,3)
"RTN","EASEZP64",47,0)
 W !,"MINUS THE AMOUNT YOU OWE ON THESE ITEMS.  INCLUDE VALUE OF FARM, RANCH, OR",?78,"|",?96,"|",?114,"|"
"RTN","EASEZP64",48,0)
 W !,"BUSINESS ASSETS.  Exclude household effects and family vehicles.",?78,"|",?96,"|",?114,"|"
"RTN","EASEZP64",49,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP64",50,0)
 Q
"RTN","EASEZP64",51,0)
 ;
"RTN","EASEZP64",52,0)
CON ;  Print SECTION XI - CONSENT TO COPAYMENTS
"RTN","EASEZP64",53,0)
 ;
"RTN","EASEZP64",54,0)
 W !!?49,"SECTION XI - CONSENT TO COPAYMENTS"
"RTN","EASEZP64",55,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP64",56,0)
 ;
"RTN","EASEZP64",57,0)
 W !,"If you are a 0% service-connected veteran and do not receive VA monetary benefits or a nonservice-connected veteran (and you are"
"RTN","EASEZP64",58,0)
 W !,"not an Ex-POW, Purple Heart Recipient, WWI veteran or VA pensioner) and your household income (or combined income and net worth)"
"RTN","EASEZP64",59,0)
 W !,"exceeds the established threshold, this application will be considered for enrollment, but only if you agree to pay VA copayments"
"RTN","EASEZP64",60,0)
 W !,"for treatment of your nonservice-connected conditions.  If you are such a veteran, by signing this application you are agreeing"
"RTN","EASEZP64",61,0)
 W !,"to pay the applicable VA copayment as required by law.",!
"RTN","EASEZP64",62,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP64",63,0)
 Q
"RTN","EASEZP64",64,0)
 ;
"RTN","EASEZP64",65,0)
AOB ;  Print SECTION XII - ASSIGNMENT OF BENEFITS
"RTN","EASEZP64",66,0)
 ;
"RTN","EASEZP64",67,0)
 W !!?48,"SECTION XII - ASSIGNMENT OF BENEFITS"
"RTN","EASEZP64",68,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP64",69,0)
 ;
"RTN","EASEZP64",70,0)
 W !,"I understand that pursuant to 38 U.S.C. section 1729, VA is authorized to recover or collect from my health plan (HP) for the"
"RTN","EASEZP64",71,0)
 W !,"reasonable charges of nonservice-connected VA medical care or services furnished or provided to me.  I hereby authorize payment"
"RTN","EASEZP64",72,0)
 W !,"directly to VA from any HP under which I am covered (including coverage provided under my spouse's HP) that is responsible for"
"RTN","EASEZP64",73,0)
 W !,"payment of the charges for my medical care, including benefits otherwise payable to me or my spouse.",!
"RTN","EASEZP64",74,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP64",75,0)
 ;
"RTN","EASEZP64",76,0)
 W !!?6,"ALL APPLICANTS MUST SIGN AND DATE THIS FORM.  REFER TO INSTRUCTIONS WHICH DEFINE WHO CAN SIGN ON BEHALF OF THE VETERAN.",!
"RTN","EASEZP64",77,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP64",78,0)
 ;
"RTN","EASEZP64",79,0)
 W !,"SIGNATURE OF APPLICANT",?90,"| DATE"
"RTN","EASEZP64",80,0)
 I $G(EASIGN)]"" W !,"SIGNATURE OF APPLICANT OR APPLICANT'S REPRESENTATIVE HAS BEEN VERIFIED",?90,"| ",EASIGN,!?90,"|"
"RTN","EASEZP64",81,0)
 E  W !?90,"|",!?90,"|"
"RTN","EASEZP64",82,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZP64",83,0)
 Q
"RTN","EASEZP6U")
0^23^B29983306
"RTN","EASEZP6U",1,0)
EASEZP6U ;ALB/AMA - Print utility for 10-10EZ, Version 6 or greater; 10/23/00
"RTN","EASEZP6U",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**51,60,57,70**;Mar 15, 2001;Build 26
"RTN","EASEZP6U",3,0)
 ;
"RTN","EASEZP6U",4,0)
 Q
"RTN","EASEZP6U",5,0)
 ;Parts of this routine were copied from EASEZPU (the other parts are
"RTN","EASEZP6U",6,0)
 ;in EASEZPU2); if the version # of the 1010EZ application is 6.0 or
"RTN","EASEZP6U",7,0)
 ;greater, then this routine will be executed.
"RTN","EASEZP6U",8,0)
 ;
"RTN","EASEZP6U",9,0)
PAGE1 ;This function retrieves and formats the page 1 application data from
"RTN","EASEZP6U",10,0)
 ;the 1010EZ Holding File, #712, for the printed version of the VistA
"RTN","EASEZP6U",11,0)
 ;10-10EZ form.  If the holding file entry has not been accepted, and
"RTN","EASEZP6U",12,0)
 ;a vista entry is available, the vista entry is printed.
"RTN","EASEZP6U",13,0)
 ;   Called from EN^EASEZP6F
"RTN","EASEZP6U",14,0)
 ;
"RTN","EASEZP6U",15,0)
 ;The ^TMP("EZTEMP") global is built in SETUP^EASEZP6F and
"RTN","EASEZP6U",16,0)
 ;remains until the printed form is complete.
"RTN","EASEZP6U",17,0)
 ; Variables
"RTN","EASEZP6U",18,0)
 ;   ZDATA   - references TMP global for output data
"RTN","EASEZP6U",19,0)
 ;   EZDATA  - references available data from 1010EZ holding file
"RTN","EASEZP6U",20,0)
 ;   EASTR   - Temporary String data variable
"RTN","EASEZP6U",21,0)
 ;   EAX,EAY - Temporary data variables
"RTN","EASEZP6U",22,0)
 ;   EACT    - Temporary city variable
"RTN","EASEZP6U",23,0)
 ;
"RTN","EASEZP6U",24,0)
 N ZDATA,EZDATA,EASTR,EAX,EAY,EACT
"RTN","EASEZP6U",25,0)
 ;
"RTN","EASEZP6U",26,0)
 S ZDATA=$NA(^TMP("EASEZ",$J,1))
"RTN","EASEZP6U",27,0)
 S EZDATA=$NA(^TMP("EZTEMP",$J,"I",1))
"RTN","EASEZP6U",28,0)
 K @ZDATA
"RTN","EASEZP6U",29,0)
 ;
"RTN","EASEZP6U",30,0)
 ;Type Of Benefits Applied For
"RTN","EASEZP6U",31,0)
 S EASTR="" F EAX="1A.1","1A.2","1A.3","1A.4","1A.5" D
"RTN","EASEZP6U",32,0)
 . I $$PROCESS(EAX)="UNKNOWN" S EASTR="UNKNOWN, ",EAX="1A.5" Q
"RTN","EASEZP6U",33,0)
 . I $$PROCESS(EAX)="YES" S EASTR=EASTR_$$BENEFIT(EAX)_", "
"RTN","EASEZP6U",34,0)
 S @ZDATA@("1A")=$E(EASTR,1,($L(EASTR)-2))   ;remove last comma & space
"RTN","EASEZP6U",35,0)
 ;
"RTN","EASEZP6U",36,0)
 S @ZDATA@("1B")=$$PROCESS("1B.")            ;Which facility?
"RTN","EASEZP6U",37,0)
 S @ZDATA@(2)=$$PROCESS(2.1)                 ;Vet's name
"RTN","EASEZP6U",38,0)
 S @ZDATA@(3)=$E($$PROCESS("3."),1,35)       ;Other names used
"RTN","EASEZP6U",39,0)
 S EAX=$E($$PROCESS("3A."),1,35)             ;Mother's maiden name
"RTN","EASEZP6U",40,0)
 I $E(EAX,$L(EAX))="," S EAX=$E(EAX,1,$L(EAX)-1)
"RTN","EASEZP6U",41,0)
 S @ZDATA@("3A")=EAX
"RTN","EASEZP6U",42,0)
 S @ZDATA@(4)=$$PROCESS("4.")                ;Gender
"RTN","EASEZP6U",43,0)
 ;
"RTN","EASEZP6U",44,0)
 S EAX=$$PROCESS("4A.")   ;Are You Spanish, Hispanic, or Latino?
"RTN","EASEZP6U",45,0)
 ;EAS*1.0*57 - print full word "UNKNOWN"
"RTN","EASEZP6U",46,0)
 S @ZDATA@("4A")=$S($E(EAX)="Y"!($E(EAX,1,3)="YES"):"YES",$E(EAX)="N"!($E(EAX,1,3)="NO"):"NO",$E(EAX,1,7)="UNKNOWN":"UNKNOWN",1:"")
"RTN","EASEZP6U",47,0)
 ;
"RTN","EASEZP6U",48,0)
 F EAX="4B","4C","4D","4E","4F","4G" D       ;Race
"RTN","EASEZP6U",49,0)
 . I $E($$PROCESS(EAX_"."),1,3)="YES" S @ZDATA@(EAX)=" X " I 1
"RTN","EASEZP6U",50,0)
 . E  S @ZDATA@(EAX)="___"
"RTN","EASEZP6U",51,0)
 ;
"RTN","EASEZP6U",52,0)
 S @ZDATA@(5)=$$PROCESS("5.")                ;SSN
"RTN","EASEZP6U",53,0)
 S @ZDATA@(6)=$$PROCESS("6.")                ;Claim number
"RTN","EASEZP6U",54,0)
 S @ZDATA@(7)=$$PROCESS("7.")                ;Date of birth
"RTN","EASEZP6U",55,0)
 S @ZDATA@(8)=$$PROCESS("8.")                ;Religion
"RTN","EASEZP6U",56,0)
 S EAX=$$PROCESS("8A."),EAY=$$PROCESS("8B.") ;Birth place city & state
"RTN","EASEZP6U",57,0)
 I (EAX]""),(EAY]"") S @ZDATA@("8A")=EAX_", "_EAY
"RTN","EASEZP6U",58,0)
 E  S @ZDATA@("8A")=$S(EAX]"":EAX,EAY]"":EAY,1:"")
"RTN","EASEZP6U",59,0)
 S @ZDATA@("9A")=$E($$PROCESS("9A."),1,35)   ;Address
"RTN","EASEZP6U",60,0)
 S @ZDATA@("9B")=$E($$PROCESS("9B."),1,32)   ;City
"RTN","EASEZP6U",61,0)
 S @ZDATA@("9C")=$$PROCESS("9C.")            ;State
"RTN","EASEZP6U",62,0)
 S @ZDATA@("9D")=$$PROCESS("9D.")            ;Zip
"RTN","EASEZP6U",63,0)
 S @ZDATA@("9E")=$$PROCESS("9E.")            ;County
"RTN","EASEZP6U",64,0)
 S @ZDATA@("9F")=$$PROCESS("9F.")            ;Province    - EAS*1.0*70
"RTN","EASEZP6U",65,0)
 S @ZDATA@("9G")=$$PROCESS("9G.")            ;Postal Code - EAS*1.0*70
"RTN","EASEZP6U",66,0)
 S @ZDATA@("9H")=$$PROCESS("9H.")            ;Country     - EAS*1.0*70
"RTN","EASEZP6U",67,0)
 S @ZDATA@(10)=$$PROCESS("10.1")             ;Home phone
"RTN","EASEZP6U",68,0)
 S @ZDATA@(11)=$$PROCESS("11.1")             ;Work phone
"RTN","EASEZP6U",69,0)
 S @ZDATA@("11A")=$$PROCESS("11A.")          ;E-mail
"RTN","EASEZP6U",70,0)
 S @ZDATA@("11B")=$$PROCESS("11B.")          ;Want an appt?
"RTN","EASEZP6U",71,0)
 S @ZDATA@("11C")=$$PROCESS("11C.")          ;Been seen before?
"RTN","EASEZP6U",72,0)
 S @ZDATA@("11D")=$$PROCESS("11D.")          ;Location seen before
"RTN","EASEZP6U",73,0)
 ;
"RTN","EASEZP6U",74,0)
 ;EAS*1.0*60 -- add cell phone and pager
"RTN","EASEZP6U",75,0)
 S @ZDATA@("11G")=$$PROCESS("11A1.")         ;Cell phone number
"RTN","EASEZP6U",76,0)
 S @ZDATA@("11H")=$$PROCESS("11A3.")         ;Pager number
"RTN","EASEZP6U",77,0)
 ;
"RTN","EASEZP6U",78,0)
 S @ZDATA@(12)=$$PROCESS("12.")              ;Marital status
"RTN","EASEZP6U",79,0)
 S @ZDATA@("13A")=$$PROCESS("13A.")          ;Last branch of service
"RTN","EASEZP6U",80,0)
 S @ZDATA@("13B")=$$PROCESS("13B.")          ;Last entry date
"RTN","EASEZP6U",81,0)
 S @ZDATA@("13C")=$$PROCESS("13C.")          ;Last discharge date
"RTN","EASEZP6U",82,0)
 S @ZDATA@("13D")=$$PROCESS("13D.")          ;Discharge type
"RTN","EASEZP6U",83,0)
 S @ZDATA@("13E")=$$PROCESS("13E.")          ;Military service number
"RTN","EASEZP6U",84,0)
 ;
"RTN","EASEZP6U",85,0)
 F EAX="14A1","14A2","14B","14B2","14D3","14D4","14E","14F","14G","14G1","14I","14J","14K","14L" D
"RTN","EASEZP6U",86,0)
 . S EAY=$$PROCESS(EAX_".")
"RTN","EASEZP6U",87,0)
 . ;EAS*1.0*57 - no room on form here to print full word "UNKNOWN"
"RTN","EASEZP6U",88,0)
 . S @ZDATA@(EAX)=$S(EAY="Y"!(EAY="YES"):"YES",EAY="N"!(EAY="NO"):"NO",EAY="UNKNOWN":"UNK",1:"")
"RTN","EASEZP6U",89,0)
 ;
"RTN","EASEZP6U",90,0)
 S @ZDATA@("14B1")=$$PROCESS("14B1.")   ;Rated percentage
"RTN","EASEZP6U",91,0)
 S @ZDATA@("14K1")=$$PROCESS("14K1.")   ;Medicare Part A effective date
"RTN","EASEZP6U",92,0)
 S @ZDATA@("14L1")=$$PROCESS("14L1.")   ;Medicare Part B effective date
"RTN","EASEZP6U",93,0)
 S @ZDATA@("14M")=$$PROCESS("14M.")     ;Medicare claim number
"RTN","EASEZP6U",94,0)
 S @ZDATA@("14N")=$$PROCESS("14N.")     ;Name on Medicare card
"RTN","EASEZP6U",95,0)
 ;Vet's employment status^Date of retirement
"RTN","EASEZP6U",96,0)
 S @ZDATA@("15A")=$$PROCESS("15A.1")_U_$$PROCESS("15A.2")
"RTN","EASEZP6U",97,0)
 ;
"RTN","EASEZP6U",98,0)
 S EAX=$E($$PROCESS("15B.1"),1,30)            ;Company's name
"RTN","EASEZP6U",99,0)
 S EACT="",EACT=$E($$PROCESS("15B.3"),1,30)   ;Company's city
"RTN","EASEZP6U",100,0)
 I EACT]"" S EACT=EACT_", "   ;if there's a city, add comma & space
"RTN","EASEZP6U",101,0)
 ;Company's name^Street^City, State Zip^Phone
"RTN","EASEZP6U",102,0)
 S EAX=EAX_U_$E($$PROCESS("15B.2"),1,30)_U_EACT_$$PROCESS("15B.4")_" "_$E($$PROCESS("15B.5"),1,10)_U_$$PROCESS("15B.6")
"RTN","EASEZP6U",103,0)
 S @ZDATA@("15B")=EAX
"RTN","EASEZP6U",104,0)
 ;
"RTN","EASEZP6U",105,0)
 ;Spouse's employment status^Date of retirement
"RTN","EASEZP6U",106,0)
 S @ZDATA@("16A")=$$PROCESS("16A.1")_U_$$PROCESS("16A.2")
"RTN","EASEZP6U",107,0)
 ;
"RTN","EASEZP6U",108,0)
 S EAX=$E($$PROCESS("16B.1"),1,30)            ;Spouse's company's name
"RTN","EASEZP6U",109,0)
 S EACT="",EACT=$E($$PROCESS("16B.3"),1,30)   ;Spouse's company's city
"RTN","EASEZP6U",110,0)
 I EACT]"" S EACT=EACT_", "   ;if there's a city, add comma & space
"RTN","EASEZP6U",111,0)
 ;Spouse's company's name^Street^City, State Zip^Phone
"RTN","EASEZP6U",112,0)
 S EAX=EAX_U_$E($$PROCESS("16B.2"),1,30)_U_EACT_$$PROCESS("16B.4")_" "_$E($$PROCESS("16B.5"),1,10)_U_$$PROCESS("16B.6")
"RTN","EASEZP6U",113,0)
 S @ZDATA@("16B")=EAX
"RTN","EASEZP6U",114,0)
 ;
"RTN","EASEZP6U",115,0)
 Q
"RTN","EASEZP6U",116,0)
 ;
"RTN","EASEZP6U",117,0)
PROCESS(KEY) ; Process data value from ^TMP("EZTEMP" array
"RTN","EASEZP6U",118,0)
 ;format = IEN ^ EAS DATA ^ ACCEPT VALUE ^ 712 SUBIEN ^ VISTA DATA
"RTN","EASEZP6U",119,0)
 ;Take #712 value from 2nd piece, if it's accepted;
"RTN","EASEZP6U",120,0)
 ;otherwise, take the Patient File value from the 5th piece
"RTN","EASEZP6U",121,0)
 ;
"RTN","EASEZP6U",122,0)
 N EAV,RSLT
"RTN","EASEZP6U",123,0)
 ;
"RTN","EASEZP6U",124,0)
 I '$D(@EZDATA@(KEY)) G PQ
"RTN","EASEZP6U",125,0)
 S EAV=@EZDATA@(KEY)
"RTN","EASEZP6U",126,0)
 S RSLT=$S(+$P(EAV,U,3):$P(EAV,U,2),1:$P(EAV,U,5))
"RTN","EASEZP6U",127,0)
PQ Q $G(RSLT)
"RTN","EASEZP6U",128,0)
 ;
"RTN","EASEZP6U",129,0)
BENEFIT(X) ; Return External format of benefit applied for
"RTN","EASEZP6U",130,0)
 ;
"RTN","EASEZP6U",131,0)
 Q $S(X="1A.1":"HEALTH SERVICES",X="1A.2":"NURSING HOME",X="1A.3":"DOMICILIARY",X="1A.4":"DENTAL",X="1A.5":"ENROLLMENT",1:"")
"RTN","EASEZPDG")
0^3^B70833329
"RTN","EASEZPDG",1,0)
EASEZPDG ;ALB/AMA/GTS/CMF - PRINT 10-10EZ OR EZR FROM DG OPTIONS ; 8/1/08 1:23pm
"RTN","EASEZPDG",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**57,70**;Mar 15, 2001;Build 26
"RTN","EASEZPDG",3,0)
 ;
"RTN","EASEZPDG",4,0)
 Q
"RTN","EASEZPDG",5,0)
 ;
"RTN","EASEZPDG",6,0)
ENEZR(EASDFN,EASMTIEN) ;DBIA 4600 - PRINT THE 10-10EZR FROM DG OPTIONS
"RTN","EASEZPDG",7,0)
 ;   INPUT:
"RTN","EASEZPDG",8,0)
 ;      EASDFN - POINTER TO THE PATIENT FILE (#2) - required
"RTN","EASEZPDG",9,0)
 ;      EASMTIEN - POINTER TO MEANS TEST FILE (#408.31) - optional
"RTN","EASEZPDG",10,0)
 ;       (+ien, "", or 0)
"RTN","EASEZPDG",11,0)
 ;   OUTPUT:
"RTN","EASEZPDG",12,0)
 ;      (+ien or ""):ZTSK - TASKMAN JOB NUMBER
"RTN","EASEZPDG",13,0)
 ;      (0):mt ien (forces test lookup only)
"RTN","EASEZPDG",14,0)
 ;
"RTN","EASEZPDG",15,0)
 N EASFLAG,X
"RTN","EASEZPDG",16,0)
 S EASFLAG="EZR"
"RTN","EASEZPDG",17,0)
 S EASDFN=$G(EASDFN)
"RTN","EASEZPDG",18,0)
 S EASMTIEN=$G(EASMTIEN)
"RTN","EASEZPDG",19,0)
 ;
"RTN","EASEZPDG",20,0)
 S X=$$ENEZ(EASDFN,EASMTIEN)
"RTN","EASEZPDG",21,0)
 Q X
"RTN","EASEZPDG",22,0)
 ;
"RTN","EASEZPDG",23,0)
ENEZ(EASDFN,EASMTIEN) ;DBIA 4600 - PRINT THE 10-10EZ FROM DG OPTIONS
"RTN","EASEZPDG",24,0)
 ;   INPUT:
"RTN","EASEZPDG",25,0)
 ;      EASDFN - POINTER TO THE PATIENT FILE (#2) - required
"RTN","EASEZPDG",26,0)
 ;      EASMTIEN - POINTER TO MEANS TEST FILE (#408.31) - optional
"RTN","EASEZPDG",27,0)
 ;       (+ien, "", or 0)
"RTN","EASEZPDG",28,0)
 ;   OUTPUT:
"RTN","EASEZPDG",29,0)
 ;      (+ien or ""):ZTSK - TASKMAN JOB NUMBER
"RTN","EASEZPDG",30,0)
 ;      (0):mt ien (forces test lookup only)
"RTN","EASEZPDG",31,0)
 ;
"RTN","EASEZPDG",32,0)
 S EASDFN=$G(EASDFN)
"RTN","EASEZPDG",33,0)
 S EASMTIEN=$G(EASMTIEN)
"RTN","EASEZPDG",34,0)
 I EASMTIEN=0 Q $$PICK^EASEZPVU(EASDFN,0)
"RTN","EASEZPDG",35,0)
 E  S EASMTIEN=$$PICK^EASEZPVU(EASDFN,EASMTIEN)
"RTN","EASEZPDG",36,0)
 ;
"RTN","EASEZPDG",37,0)
 ;If any EAS applications exist, ensure they're all filed
"RTN","EASEZPDG",38,0)
 N X,INPROG
"RTN","EASEZPDG",39,0)
 S X=0,INPROG=0 F  S X=$O(^EAS(712,"AC",EASDFN,X)) Q:'X!INPROG  D
"RTN","EASEZPDG",40,0)
 . I $$GET1^DIQ(712,X,7.1)="" D
"RTN","EASEZPDG",41,0)
 . . N IX,DATE F IX="REV","PRT","SIG" Q:INPROG  D
"RTN","EASEZPDG",42,0)
 . . . S DATE=0 F  S DATE=$O(^EAS(712,IX,DATE)) Q:'DATE!INPROG  D
"RTN","EASEZPDG",43,0)
 . . . . I $D(^EAS(712,IX,DATE,X)) S INPROG=1
"RTN","EASEZPDG",44,0)
 I INPROG D  Q 0
"RTN","EASEZPDG",45,0)
 . N DIR
"RTN","EASEZPDG",46,0)
 . W !!,"No data have been found for the selected patient, or"
"RTN","EASEZPDG",47,0)
 . W !,"the patient may have an on-line 10-10EZ application"
"RTN","EASEZPDG",48,0)
 . W !,"in progress.  The 10-10EZ"_$S($G(EASFLAG)="EZR":"R",1:"")_" form shall not be printed."
"RTN","EASEZPDG",49,0)
 . S DIR(0)="E" D ^DIR
"RTN","EASEZPDG",50,0)
 ;
"RTN","EASEZPDG",51,0)
 N %ZIS,ZTDESC,ZTIO,ZTRTN,ZTSAVE,ZTSK,ZUSR,POP,ERR
"RTN","EASEZPDG",52,0)
 ;
"RTN","EASEZPDG",53,0)
 W !!?5,*7,"Do not select a slave device for output."
"RTN","EASEZPDG",54,0)
 W !?5,"This output requires a 132 column output printer."
"RTN","EASEZPDG",55,0)
 W !?5,"Output to SCREEN will be unreadable.",!
"RTN","EASEZPDG",56,0)
 ;
"RTN","EASEZPDG",57,0)
 ;
"RTN","EASEZPDG",58,0)
DEV S %ZIS="QM"
"RTN","EASEZPDG",59,0)
 S %ZIS("S")="I $P($G(^(1)),U)'[""SLAVE""&($P($G(^(0)),U)'[""SLAVE"")"
"RTN","EASEZPDG",60,0)
 S %ZIS("B")=""
"RTN","EASEZPDG",61,0)
 ;S IOP="Q"
"RTN","EASEZPDG",62,0)
 D ^%ZIS
"RTN","EASEZPDG",63,0)
 ;
"RTN","EASEZPDG",64,0)
 I POP D  G EXIT
"RTN","EASEZPDG",65,0)
 . I $D(IO("Q")) K IO("Q")
"RTN","EASEZPDG",66,0)
 . W !,"Print request cancelled!"
"RTN","EASEZPDG",67,0)
 . Q
"RTN","EASEZPDG",68,0)
 I IO=IO(0),$E(IOST,1,2)="C-" D  G DEV
"RTN","EASEZPDG",69,0)
 . W !,*7,"CANNOT QUEUE TO HOME DEVICE!",!
"RTN","EASEZPDG",70,0)
 . Q
"RTN","EASEZPDG",71,0)
 ;
"RTN","EASEZPDG",72,0)
 I $G(EASFLAG)="EZR" S ZTDESC="1010EZR PRINT"
"RTN","EASEZPDG",73,0)
 E  S ZTDESC="1010EZ PRINT"
"RTN","EASEZPDG",74,0)
 S ZUSR=DUZ,ZTRTN="EN^EASEZPDG"
"RTN","EASEZPDG",75,0)
 ;
"RTN","EASEZPDG",76,0)
 F X="ZUSR","EASDFN","EASMTIEN","EASFLAG" S ZTSAVE(X)=""
"RTN","EASEZPDG",77,0)
 D ^%ZTLOAD
"RTN","EASEZPDG",78,0)
 D HOME^%ZIS
"RTN","EASEZPDG",79,0)
 ;
"RTN","EASEZPDG",80,0)
EXIT Q +$G(ZTSK)
"RTN","EASEZPDG",81,0)
 ;
"RTN","EASEZPDG",82,0)
EN ;BACKGROUND JOB ENTRY POINT TO PRINT EZ/EZR FROM DG OPTIONS
"RTN","EASEZPDG",83,0)
 ;
"RTN","EASEZPDG",84,0)
 N EASAPP,C2711
"RTN","EASEZPDG",85,0)
 S EASAPP=0
"RTN","EASEZPDG",86,0)
 I '$G(EASVRSN) S EASVRSN=6
"RTN","EASEZPDG",87,0)
 ;
"RTN","EASEZPDG",88,0)
 ;SET UP ^TMP("EZDATA" AND ^TMP("EZINDEX" FROM ^EAS(711,"A","A"
"RTN","EASEZPDG",89,0)
 D LOCAL711^EASEZU2
"RTN","EASEZPDG",90,0)
 ;
"RTN","EASEZPDG",91,0)
 S C2711=+$$KEY711^EASEZU1("TYPE OF BENEFIT-ENROLLMENT")
"RTN","EASEZPDG",92,0)
 D VISTA^EASEZPVD(EASDFN,EASMTIEN)
"RTN","EASEZPDG",93,0)
 ;
"RTN","EASEZPDG",94,0)
 ;SET UP ^TMP("EZTEMP" AND ^TMP("EZDISP" GLOBALS
"RTN","EASEZPDG",95,0)
 D SORT^EASEZC3(0)
"RTN","EASEZPDG",96,0)
 ;
"RTN","EASEZPDG",97,0)
 ;SET UP PRINT VARIABLES
"RTN","EASEZPDG",98,0)
 N EALNE,EAINFO,EAABRT,EAADL,EAMULT,EAAD,EACNT,KEY
"RTN","EASEZPDG",99,0)
 D SETUP^EASEZPDU(.EALNE,.EAINFO)
"RTN","EASEZPDG",100,0)
 ;
"RTN","EASEZPDG",101,0)
 ;DETERMINE WHICH FORM TO PRINT
"RTN","EASEZPDG",102,0)
 I $G(EASFLAG)="EZR" D EZR I 1
"RTN","EASEZPDG",103,0)
 E  D EZ
"RTN","EASEZPDG",104,0)
 ;
"RTN","EASEZPDG",105,0)
 K ^TMP("EASEZ",$J),^TMP("EASEZR",$J)
"RTN","EASEZPDG",106,0)
 K ^TMP("EZDATA",$J),^TMP("EZRDATA",$J)
"RTN","EASEZPDG",107,0)
 K ^TMP("EZINDEX",$J),^TMP("EZRINDEX",$J)
"RTN","EASEZPDG",108,0)
 K ^TMP("EZTEMP",$J),^TMP("EZRTEMP",$J)
"RTN","EASEZPDG",109,0)
 K ^TMP("EZDISP",$J),^TMP("EZRDISP",$J)
"RTN","EASEZPDG",110,0)
 Q
"RTN","EASEZPDG",111,0)
 ;
"RTN","EASEZPDG",112,0)
EZR ; Entry point to print 1010EZR
"RTN","EASEZPDG",113,0)
 ;
"RTN","EASEZPDG",114,0)
 N EASDG,EAADL,EAAD,EACNT
"RTN","EASEZPDG",115,0)
 M ^TMP("EASEZR",$J)=^TMP("EASEZ",$J) K ^TMP("EASEZ",$J)
"RTN","EASEZPDG",116,0)
 M ^TMP("EZRDATA",$J)=^TMP("EZDATA",$J) K ^TMP("EZDATA",$J)
"RTN","EASEZPDG",117,0)
 M ^TMP("EZRINDEX",$J)=^TMP("EZINDEX",$J) K ^TMP("EZINDEX",$J)
"RTN","EASEZPDG",118,0)
 M ^TMP("EZRTEMP",$J)=^TMP("EZTEMP",$J) K ^TMP("EZTEMP",$J)
"RTN","EASEZPDG",119,0)
 M ^TMP("EZRDISP",$J)=^TMP("EZDISP",$J) K ^TMP("EZDISP",$J)
"RTN","EASEZPDG",120,0)
 ;
"RTN","EASEZPDG",121,0)
 D PAGE1^EASEZRPU
"RTN","EASEZPDG",122,0)
 D EN^EASEZRP1(.EALNE,.EAINFO)
"RTN","EASEZPDG",123,0)
 ;
"RTN","EASEZPDG",124,0)
 D PAGE2^EASEZRPP
"RTN","EASEZPDG",125,0)
 S EASDG=1   ;FLAG VARIABLE TO SIGNIFY PRINTING FROM DG
"RTN","EASEZPDG",126,0)
 D EN^EASEZRP2(.EALNE,.EAINFO,EASDG)
"RTN","EASEZPDG",127,0)
 ;
"RTN","EASEZPDG",128,0)
 ;EAS*1.0*70
"RTN","EASEZPDG",129,0)
 N EASMTV
"RTN","EASEZPDG",130,0)
 I +$G(EASMTIEN) S EASMTV=+$P($G(^DGMT(408.31,EASMTIEN,2)),U,11)
"RTN","EASEZPDG",131,0)
 I +$G(EASMTV)=0 D NETEZR^EASEZPDU(.EALNE,.EAINFO,EASDG) I 1
"RTN","EASEZPDG",132,0)
 E  D EN^EASEZRP3(.EALNE,.EAINFO,EASDG)
"RTN","EASEZPDG",133,0)
 ;
"RTN","EASEZPDG",134,0)
 ;Print additional insurance pages if more than 1 insurance company
"RTN","EASEZPDG",135,0)
 F EAADL=1:1 Q:'$D(^TMP("EZRTEMP",$J,"IA",EAADL))  D
"RTN","EASEZPDG",136,0)
 . S EAAD=1
"RTN","EASEZPDG",137,0)
 . D PAGEI^EASEZRPU(EAADL)
"RTN","EASEZPDG",138,0)
 I $G(EAAD) D EN^EASEZRPI(.EALNE,.EAINFO)
"RTN","EASEZPDG",139,0)
 ;
"RTN","EASEZPDG",140,0)
 ;Print additional dependent pages if more than 1 dependent
"RTN","EASEZPDG",141,0)
 S EAAD=0 F EAADL=1:1 Q:'$D(^TMP("EZRTEMP",$J,"IIB",EAADL))  D
"RTN","EASEZPDG",142,0)
 . S EAAD=1   ;FLAG THAT THERE ARE ADDITIONAL DEPENDENTS
"RTN","EASEZPDG",143,0)
 . D PAGEN^EASEZRPU(EAADL)
"RTN","EASEZPDG",144,0)
 I EAAD D EN^EASEZRPD(.EALNE,.EAINFO)
"RTN","EASEZPDG",145,0)
 ;
"RTN","EASEZPDG",146,0)
 ;Print additional dependent financial pages if more
"RTN","EASEZPDG",147,0)
 ;than 1 dependent, starting with the 2nd one
"RTN","EASEZPDG",148,0)
 ;(since Child 1 info already displayed on pages 2 & 3)
"RTN","EASEZPDG",149,0)
 S EAAD=0,EAADL=1 F  S EAADL=$O(^TMP("EZRTEMP",$J,"IIF",EAADL)) Q:'EAADL  D
"RTN","EASEZPDG",150,0)
 . S EAAD=1,KEY=+$$KEY711^EASEZU1("CHILD(N) CHILD #")
"RTN","EASEZPDG",151,0)
 . S ^TMP("EZRTEMP",$J,"IIF",EAADL,"7.")=KEY_"^CHILD "_EAADL_"^1"
"RTN","EASEZPDG",152,0)
 . D PAGEDFF^EASEZRPP(EAADL)
"RTN","EASEZPDG",153,0)
 ;
"RTN","EASEZPDG",154,0)
 ;EAS*1.0*70
"RTN","EASEZPDG",155,0)
 I +$G(EASMTV)=0 D  Q
"RTN","EASEZPDG",156,0)
 . ;SINCE ANY ADDITIONAL DEPENDENTS' NET WORTH AMOUNTS (SECTION IIG)
"RTN","EASEZPDG",157,0)
 . ;ARE INCLUDED IN THE VET'S AMOUNT, DISPLAY A MESSAGE ON THE FORM
"RTN","EASEZPDG",158,0)
 . I EAAD D
"RTN","EASEZPDG",159,0)
 . . N TEMP,HDR,FTR,BEGF,BEGG,ADFF,FNP,GNP
"RTN","EASEZPDG",160,0)
 . . S TEMP="EASEZR",HDR="HDR^EASEZRPF(.EALNE,.EAINFO)"
"RTN","EASEZPDG",161,0)
 . . S FTR="FT^EASEZRPF(.EALNE,.EAINFO)",BEGF="BEGINF^EASEZRPM"
"RTN","EASEZPDG",162,0)
 . . S BEGG="BEGING^EASEZRPM",ADFF="ADFF^EASEZRPM"
"RTN","EASEZPDG",163,0)
 . . S FNP=9,GNP=7
"RTN","EASEZPDG",164,0)
 . . D NETMSG
"RTN","EASEZPDG",165,0)
 . ;
"RTN","EASEZPDG",166,0)
 E  D
"RTN","EASEZPDG",167,0)
 . ;WITH NEW MEANS TEST VERSION, DISPLAY EACH CHILD'S NET WORTH AMOUNTS
"RTN","EASEZPDG",168,0)
 . N EAADG
"RTN","EASEZPDG",169,0)
 . S EAADG=0,EAADL=1 F  S EAADL=$O(^TMP("EZRTEMP",$J,"IIG",EAADL)) Q:'EAADL  D
"RTN","EASEZPDG",170,0)
 . . S EAADG=1,KEY=+$$KEY711^EASEZU1("CHILD(N) CHILD #")
"RTN","EASEZPDG",171,0)
 . . S ^TMP("EZRTEMP",$J,"IIG",EAADL,"9.")=KEY_"^CHILD "_EAADL_"^1"
"RTN","EASEZPDG",172,0)
 . . D PAGEDFG^EASEZRPP(EAADL)
"RTN","EASEZPDG",173,0)
 . I EAAD!EAADG D EN^EASEZRPM(.EALNE,.EAINFO,EASDG)
"RTN","EASEZPDG",174,0)
 ;
"RTN","EASEZPDG",175,0)
 Q
"RTN","EASEZPDG",176,0)
 ;
"RTN","EASEZPDG",177,0)
EZ ;PRINT THE 10-10EZ FORM (copied from EASEZP6F)
"RTN","EASEZPDG",178,0)
 ;
"RTN","EASEZPDG",179,0)
 N EASDG,EAADL,EAAD,EACNT
"RTN","EASEZPDG",180,0)
 D PAGE1^EASEZP6U
"RTN","EASEZPDG",181,0)
 D PAGE1^EASEZPU3
"RTN","EASEZPDG",182,0)
 D EN^EASEZP61(.EALNE,.EAINFO)
"RTN","EASEZPDG",183,0)
 ;
"RTN","EASEZPDG",184,0)
 D PAGE2^EASEZPU2
"RTN","EASEZPDG",185,0)
 D EN^EASEZP62(.EALNE,.EAINFO)
"RTN","EASEZPDG",186,0)
 ;
"RTN","EASEZPDG",187,0)
 S EASDG=1   ;FLAG VARIABLE TO SIGNIFY PRINTING FROM DG
"RTN","EASEZPDG",188,0)
 D EN^EASEZP63(.EALNE,.EAINFO,EASDG)
"RTN","EASEZPDG",189,0)
 ;
"RTN","EASEZPDG",190,0)
 ;EAS*1.0*70
"RTN","EASEZPDG",191,0)
 N EASMTV
"RTN","EASEZPDG",192,0)
 I +$G(EASMTIEN) S EASMTV=+$P($G(^DGMT(408.31,EASMTIEN,2)),U,11)
"RTN","EASEZPDG",193,0)
 I +$G(EASMTV)=0 D NETEZ^EASEZPDU(.EALNE,.EAINFO,EASDG) I 1
"RTN","EASEZPDG",194,0)
 E  D EN^EASEZP64(.EALNE,.EAINFO,EASDG)
"RTN","EASEZPDG",195,0)
 ;
"RTN","EASEZPDG",196,0)
 ;Print additional insurance pages if more than 1 insurance company
"RTN","EASEZPDG",197,0)
 F EAADL=1:1 Q:'$D(^TMP("EZTEMP",$J,"IA",EAADL))  D
"RTN","EASEZPDG",198,0)
 . S EAAD=1
"RTN","EASEZPDG",199,0)
 . D PAGEI^EASEZPU3(EAADL)
"RTN","EASEZPDG",200,0)
 I $G(EAAD) D EN^EASEZP6I(.EALNE,.EAINFO)
"RTN","EASEZPDG",201,0)
 ;
"RTN","EASEZPDG",202,0)
 ;Print additional dependent pages if more than 1 dependent
"RTN","EASEZPDG",203,0)
 S EAAD=0 F EAADL=1:1 Q:'$D(^TMP("EZTEMP",$J,"IIB",EAADL))  D
"RTN","EASEZPDG",204,0)
 . S EAAD=1   ;FLAG THAT THERE ARE ADDITIONAL DEPENDENTS
"RTN","EASEZPDG",205,0)
 . D PAGEN^EASEZPU3(EAADL)
"RTN","EASEZPDG",206,0)
 I EAAD D EN^EASEZP6D(.EALNE,.EAINFO)
"RTN","EASEZPDG",207,0)
 ;
"RTN","EASEZPDG",208,0)
 ;Print additional dependent financial pages if more
"RTN","EASEZPDG",209,0)
 ;than 1 dependent, starting with the 2nd one
"RTN","EASEZPDG",210,0)
 ;(since Child 1 info already displayed on pages 2 & 3)
"RTN","EASEZPDG",211,0)
 S EAAD=0,EAADL=1 F  S EAADL=$O(^TMP("EZTEMP",$J,"IIF",EAADL)) Q:'EAADL  D
"RTN","EASEZPDG",212,0)
 . S EAAD=1,KEY=+$$KEY711^EASEZU1("CHILD(N) CHILD #")
"RTN","EASEZPDG",213,0)
 . S ^TMP("EZTEMP",$J,"IIF",EAADL,"7.")=KEY_"^CHILD "_EAADL_"^1"
"RTN","EASEZPDG",214,0)
 . D PAGEDFF^EASEZPU2(EAADL)
"RTN","EASEZPDG",215,0)
 ;
"RTN","EASEZPDG",216,0)
 ;EAS*1.0*70
"RTN","EASEZPDG",217,0)
 I +$G(EASMTV)=0 D  Q
"RTN","EASEZPDG",218,0)
 . ;SINCE ANY ADDITIONAL DEPENDENTS' NET WORTH AMOUNTS (SECTION IIG)
"RTN","EASEZPDG",219,0)
 . ;ARE INCLUDED IN THE VET'S AMOUNT, DISPLAY A MESSAGE ON THE FORM
"RTN","EASEZPDG",220,0)
 . I EAAD D
"RTN","EASEZPDG",221,0)
 . . ;PRINT IIF AND IIG SECTIONS
"RTN","EASEZPDG",222,0)
 . . N TEMP,HDR,FTR,BEGF,BEGG,ADFF,FNP,GNP
"RTN","EASEZPDG",223,0)
 . . S TEMP="EASEZ",HDR="HDR^EASEZP6F(.EALNE,.EAINFO)"
"RTN","EASEZPDG",224,0)
 . . S FTR="FT^EASEZP6F(.EALNE,.EAINFO)",BEGF="BEGINF^EASEZP6M"
"RTN","EASEZPDG",225,0)
 . . S BEGG="BEGING^EASEZP6M",ADFF="ADFF^EASEZP6M"
"RTN","EASEZPDG",226,0)
 . . S FNP=9,GNP=7
"RTN","EASEZPDG",227,0)
 . . D NETMSG
"RTN","EASEZPDG",228,0)
 . ;
"RTN","EASEZPDG",229,0)
 E  D
"RTN","EASEZPDG",230,0)
 . ;WITH NEW MEANS TEST VERSION, DISPLAY EACH CHILD'S NET WORTH AMOUNTS
"RTN","EASEZPDG",231,0)
 . N EAADG
"RTN","EASEZPDG",232,0)
 . S EAADG=0,EAADL=1 F  S EAADL=$O(^TMP("EZTEMP",$J,"IIG",EAADL)) Q:'EAADL  D
"RTN","EASEZPDG",233,0)
 . . S EAADG=1,KEY=+$$KEY711^EASEZU1("CHILD(N) CHILD #")
"RTN","EASEZPDG",234,0)
 . . S ^TMP("EZTEMP",$J,"IIG",EAADL,"9.")=KEY_"^CHILD "_EAADL_"^1"
"RTN","EASEZPDG",235,0)
 . . D PAGEDFG^EASEZPU2(EAADL)
"RTN","EASEZPDG",236,0)
 . I EAAD!EAADG D EN^EASEZP6M(.EALNE,.EAINFO,EASDG)
"RTN","EASEZPDG",237,0)
 ;
"RTN","EASEZPDG",238,0)
 Q
"RTN","EASEZPDG",239,0)
 ;
"RTN","EASEZPDG",240,0)
NETMSG ;PRINT THE MESSAGE FOR THE NET WORTH SECTION
"RTN","EASEZPDG",241,0)
 ;
"RTN","EASEZPDG",242,0)
 N EASF,DEPF,DFCNT,NEWPG
"RTN","EASEZPDG",243,0)
 ;
"RTN","EASEZPDG",244,0)
 S EASF=$NA(^TMP(TEMP,$J,"DFF"))
"RTN","EASEZPDG",245,0)
 I $O(@EASF@(1)) D @BEGF
"RTN","EASEZPDG",246,0)
 ;
"RTN","EASEZPDG",247,0)
 ;Start printing with 2nd dependent
"RTN","EASEZPDG",248,0)
 S DEPF=1,DFCNT=0 F  S DEPF=$O(@EASF@(DEPF)) Q:'DEPF  D
"RTN","EASEZPDG",249,0)
 . S DFCNT=DFCNT+1
"RTN","EASEZPDG",250,0)
 . ;Check to see if a new page is needed
"RTN","EASEZPDG",251,0)
 . I (DFCNT>1),'((DFCNT-1)#FNP) D
"RTN","EASEZPDG",252,0)
 . . D @FTR
"RTN","EASEZPDG",253,0)
 . . D @BEGF
"RTN","EASEZPDG",254,0)
 . I (DFCNT#FNP)'=1 W !?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZPDG",255,0)
 . D @ADFF
"RTN","EASEZPDG",256,0)
 ;
"RTN","EASEZPDG",257,0)
 ;PRINT NET WORTH MESSAGE IF THERE ARE *any* ADDITIONAL DEPENDENTS
"RTN","EASEZPDG",258,0)
 I ((DFCNT#FNP)'=0),((DFCNT#FNP)'=GNP) W !!,?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZPDG",259,0)
 ;At the end of IIF, to find when to jump to the next page, 
"RTN","EASEZPDG",260,0)
 ;55 print lines, minus 3 lines for Section IIG title header,
"RTN","EASEZPDG",261,0)
 ;minus the number of lines already used on current page,
"RTN","EASEZPDG",262,0)
 ;divided by the number of lines for a Section IIG entry
"RTN","EASEZPDG",263,0)
 S NEWPG=(52-((DFCNT#FNP)*6))\7
"RTN","EASEZPDG",264,0)
 I '(DFCNT#FNP)!'NEWPG!(NEWPG=GNP) S NEWPG=GNP D @FTR
"RTN","EASEZPDG",265,0)
 D @BEGG
"RTN","EASEZPDG",266,0)
 W !!?23,"ANY PREVIOUS CALENDAR YEAR NET WORTH AMOUNTS FROM ANY ADDITIONAL DEPENDENT CHILD(REN)"
"RTN","EASEZPDG",267,0)
 W !!?29,"WILL BE INCLUDED IN THE VETERAN'S PREVIOUS CALENDAR YEAR NET WORTH AMOUNTS.",!
"RTN","EASEZPDG",268,0)
 D @FTR
"RTN","EASEZPDG",269,0)
 ;
"RTN","EASEZPDG",270,0)
 Q
"RTN","EASEZPDU")
0^7^B41165544
"RTN","EASEZPDU",1,0)
EASEZPDU ;ALB/AMA - PRINT 10-10EZ OR EZR FROM DG OPTIONS UTILITIES ; 8/1/08 1:23pm
"RTN","EASEZPDU",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**57,70**;Mar 15, 2001;Build 26
"RTN","EASEZPDU",3,0)
 ;
"RTN","EASEZPDU",4,0)
 Q
"RTN","EASEZPDU",5,0)
 ;
"RTN","EASEZPDU",6,0)
SETUP(EALNE,EAINFO) ; Set-up print variables
"RTN","EASEZPDU",7,0)
 ; Input
"RTN","EASEZPDU",8,0)
 ;   EALNE   - Line format array
"RTN","EASEZPDU",9,0)
 ;   EAINFO  - Misc Data
"RTN","EASEZPDU",10,0)
 ;      ("CLRK") - Clerk's initials
"RTN","EASEZPDU",11,0)
 ;      ("ID")   - Web ID from #712
"RTN","EASEZPDU",12,0)
 ;      ("PGE")  - Page number
"RTN","EASEZPDU",13,0)
 ;      ("VET" ) - Veteran's name submitting the application
"RTN","EASEZPDU",14,0)
 ;      ("SSN")  - Veteran's SSN
"RTN","EASEZPDU",15,0)
 ;
"RTN","EASEZPDU",16,0)
 N X
"RTN","EASEZPDU",17,0)
 ;
"RTN","EASEZPDU",18,0)
 ; Build Line array for printout
"RTN","EASEZPDU",19,0)
 S EALNE("ULC")=$S('($D(IOST)#2):"-",IOST["C-":"-",1:"_")
"RTN","EASEZPDU",20,0)
 S EALNE("D")="",EALNE("DD")="",EALNE("UL")=""
"RTN","EASEZPDU",21,0)
 S $P(EALNE("D"),"-",133)="",$P(EALNE("DD"),"=",133)="",$P(EALNE("UL"),EALNE("ULC"),133)=""
"RTN","EASEZPDU",22,0)
 ;
"RTN","EASEZPDU",23,0)
 ; Set up information array & get clerk's initials
"RTN","EASEZPDU",24,0)
 S ZUSR=$G(ZUSR)
"RTN","EASEZPDU",25,0)
 I +ZUSR>0 D
"RTN","EASEZPDU",26,0)
 . S EAINFO("CLRK")=$$GET1^DIQ(200,ZUSR,1)
"RTN","EASEZPDU",27,0)
 . I EAINFO("CLRK")']"" D
"RTN","EASEZPDU",28,0)
 . . S X=$$GET1^DIQ(200,ZUSR,.01)
"RTN","EASEZPDU",29,0)
 . . S EAINFO("CLRK")=$E($P(X,",",2),1)_$E($P(X,","),1)
"RTN","EASEZPDU",30,0)
 E  D
"RTN","EASEZPDU",31,0)
 . S EAINFO("CLRK")="unk"
"RTN","EASEZPDU",32,0)
 ;
"RTN","EASEZPDU",33,0)
 ; Set data elements
"RTN","EASEZPDU",34,0)
 S EAINFO("PGE")=0
"RTN","EASEZPDU",35,0)
 S EAINFO("ID")=""
"RTN","EASEZPDU",36,0)
 S EAINFO("PD")=$$FMTE^XLFDT($$NOW^XLFDT)
"RTN","EASEZPDU",37,0)
 S EAINFO("EASAPP")=0
"RTN","EASEZPDU",38,0)
 S EAINFO("VET")=""
"RTN","EASEZPDU",39,0)
 S EAINFO("SSN")=""
"RTN","EASEZPDU",40,0)
 Q
"RTN","EASEZPDU",41,0)
 ;
"RTN","EASEZPDU",42,0)
NETEZ(EALNE,EAINFO,EASDG) ;  Print SECTION X - PREVIOUS CALENDAR YEAR NET WORTH
"RTN","EASEZPDU",43,0)
 ;Copied from EASEZP64
"RTN","EASEZPDU",44,0)
 ; Input
"RTN","EASEZPDU",45,0)
 ;   EALNE   - Line format array
"RTN","EASEZPDU",46,0)
 ;   EAINFO  - Misc Data
"RTN","EASEZPDU",47,0)
 ;      ("CLRK") - Clerk's initials
"RTN","EASEZPDU",48,0)
 ;      ("ID")   - Web ID from #712
"RTN","EASEZPDU",49,0)
 ;      ("PGE")  - Page number
"RTN","EASEZPDU",50,0)
 ;      ("VET" ) - Veteran's name submitting the application
"RTN","EASEZPDU",51,0)
 ;      ("SSN")  - Veteran's SSN
"RTN","EASEZPDU",52,0)
 ;      ("DISC") - Financial Disclosure status
"RTN","EASEZPDU",53,0)
 ;    EASDG  - Flag variable to signify request to print from DG options
"RTN","EASEZPDU",54,0)
 ;
"RTN","EASEZPDU",55,0)
 N EASIGN,EASD
"RTN","EASEZPDU",56,0)
 ;
"RTN","EASEZPDU",57,0)
 I $$GET1^DIQ(712,EAINFO("EASAPP")_",",4)]"" D
"RTN","EASEZPDU",58,0)
 . S EASIGN=$$GET1^DIQ(712,EAINFO("EASAPP")_",",4.1)
"RTN","EASEZPDU",59,0)
 S EASIGN=$G(EASIGN)
"RTN","EASEZPDU",60,0)
 ;
"RTN","EASEZPDU",61,0)
 D HDR^EASEZP6F(.EALNE,.EAINFO)
"RTN","EASEZPDU",62,0)
 S EASD=$NA(^TMP("EASEZ",$J,2))
"RTN","EASEZPDU",63,0)
 ;
"RTN","EASEZPDU",64,0)
 I $G(EASDG),+@EASD@(999) W !!?7,"SECTION X - PREVIOUS CALENDAR YEAR NET WORTH  (INCOME YEAR:  ",@EASD@(999),")  (Use a separate sheet for additional dependents)"
"RTN","EASEZPDU",65,0)
 E  W !!?18,"SECTION X - PREVIOUS CALENDAR YEAR NET WORTH  (Use a separate sheet for additional dependents)"
"RTN","EASEZPDU",66,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZPDU",67,0)
 ;
"RTN","EASEZPDU",68,0)
 W !?78,"|",?84,"VETERAN",?96,"|",?102,"SPOUSE",?114,"|",?120,"CHILD 1"
"RTN","EASEZPDU",69,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZPDU",70,0)
 ;
"RTN","EASEZPDU",71,0)
 W !,"1. CASH, AMOUNT IN BANK ACCOUNTS (e.g., checking and savings accounts,",?78,"|  $ ",$P(@EASD@("2E1"),U),?96,"|  $ ",$P(@EASD@("2E1"),U,2),?114,"|"
"RTN","EASEZPDU",72,0)
 I $P(@EASD@("2E1"),U) W "  Included in"
"RTN","EASEZPDU",73,0)
 W !,"certificates of deposit, individual retirement accounts, stocks and bonds)",?78,"|",?96,"|",?114,"|"
"RTN","EASEZPDU",74,0)
 I $P(@EASD@("2E1"),U) W "  Veteran amount"
"RTN","EASEZPDU",75,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZPDU",76,0)
 ;
"RTN","EASEZPDU",77,0)
 W !,"2. MARKET VALUE OF LAND AND BUILDINGS MINUS MORTGAGES AND LIENS (e.g., second",?78,"|  $ ",$P(@EASD@("2E2"),U),?96,"|  $ ",$P(@EASD@("2E2"),U,2),?114,"|"
"RTN","EASEZPDU",78,0)
 I $P(@EASD@("2E2"),U) W "  Included in"
"RTN","EASEZPDU",79,0)
 W !,"homes and non-income-producing property.  Do not count your primary home.)",?78,"|",?96,"|",?114,"|"
"RTN","EASEZPDU",80,0)
 I $P(@EASD@("2E2"),U) W "  Veteran amount"
"RTN","EASEZPDU",81,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZPDU",82,0)
 ;
"RTN","EASEZPDU",83,0)
 W !,"3. VALUE OF OTHER PROPERTY OR ASSETS (e.g., art, rare coins, collectibles)",?78,"|  $ ",$P(@EASD@("2E3"),U),?96,"|  $ ",$P(@EASD@("2E3"),U,2),?114,"|"
"RTN","EASEZPDU",84,0)
 I $P(@EASD@("2E3"),U) W "  Included in"
"RTN","EASEZPDU",85,0)
 W !,"MINUS THE AMOUNT YOU OWE ON THESE ITEMS.  INCLUDE VALUE OF FARM, RANCH, OR",?78,"|",?96,"|",?114,"|"
"RTN","EASEZPDU",86,0)
 I $P(@EASD@("2E3"),U) W "  Veteran amount"
"RTN","EASEZPDU",87,0)
 W !,"BUSINESS ASSETS.  Exclude household effects and family vehicles.",?78,"|",?96,"|",?114,"|"
"RTN","EASEZPDU",88,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZPDU",89,0)
 ;
"RTN","EASEZPDU",90,0)
 D CON^EASEZP64
"RTN","EASEZPDU",91,0)
 D AOB^EASEZP64
"RTN","EASEZPDU",92,0)
 D FT^EASEZP6F(.EALNE,.EAINFO)
"RTN","EASEZPDU",93,0)
 ;
"RTN","EASEZPDU",94,0)
 Q
"RTN","EASEZPDU",95,0)
 ;
"RTN","EASEZPDU",96,0)
NETEZR(EALNE,EAINFO,EASDG) ;  Print SECTION IX - PREVIOUS CALENDAR YEAR NET WORTH
"RTN","EASEZPDU",97,0)
 ;Copied from EASEZRP3
"RTN","EASEZPDU",98,0)
 ; Input
"RTN","EASEZPDU",99,0)
 ;   EALNE   - Line format array
"RTN","EASEZPDU",100,0)
 ;   EAINFO  - Misc Data
"RTN","EASEZPDU",101,0)
 ;      ("CLRK") - Clerk's initials
"RTN","EASEZPDU",102,0)
 ;      ("ID")   - Web ID from #712
"RTN","EASEZPDU",103,0)
 ;      ("PGE")  - Page number
"RTN","EASEZPDU",104,0)
 ;      ("VET" ) - Veteran's name submitting the application
"RTN","EASEZPDU",105,0)
 ;      ("SSN")  - Veteran's SSN
"RTN","EASEZPDU",106,0)
 ;      ("DISC") - Financial Disclosure status
"RTN","EASEZPDU",107,0)
 ;    EASDG  - Flag variable to signify request to print from DG options
"RTN","EASEZPDU",108,0)
 ;
"RTN","EASEZPDU",109,0)
 N EASIGN,EASD
"RTN","EASEZPDU",110,0)
 ;
"RTN","EASEZPDU",111,0)
 I $$GET1^DIQ(712,EAINFO("EASAPP")_",",4)]"" D
"RTN","EASEZPDU",112,0)
 . S EASIGN=$$GET1^DIQ(712,EAINFO("EASAPP")_",",4.1)
"RTN","EASEZPDU",113,0)
 S EASIGN=$G(EASIGN)
"RTN","EASEZPDU",114,0)
 ;
"RTN","EASEZPDU",115,0)
 D HDR^EASEZRPF(.EALNE,.EAINFO)
"RTN","EASEZPDU",116,0)
 S EASD=$NA(^TMP("EASEZR",$J,2))
"RTN","EASEZPDU",117,0)
 ;
"RTN","EASEZPDU",118,0)
 I $G(EASDG),+@EASD@(999) W !?7,"SECTION IX - PREVIOUS CALENDAR YEAR NET WORTH  (INCOME YEAR:  ",@EASD@(999),")  (Use a separate sheet for additional dependents)"
"RTN","EASEZPDU",119,0)
 E  W !?18,"SECTION IX - PREVIOUS CALENDAR YEAR NET WORTH  (Use a separate sheet for additional dependents)"
"RTN","EASEZPDU",120,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZPDU",121,0)
 ;
"RTN","EASEZPDU",122,0)
 W !?78,"|",?84,"VETERAN",?96,"|",?102,"SPOUSE",?114,"|",?120,"CHILD 1"
"RTN","EASEZPDU",123,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZPDU",124,0)
 ;
"RTN","EASEZPDU",125,0)
 W !,"1. CASH, AMOUNT IN BANK ACCOUNTS (e.g., checking and savings accounts,",?78,"|  $ ",$P(@EASD@("2E1"),U),?96,"|  $ ",$P(@EASD@("2E1"),U,2),?114,"|"
"RTN","EASEZPDU",126,0)
 I $P(@EASD@("2E1"),U) W "  Included in"
"RTN","EASEZPDU",127,0)
 W !,"certificates of deposit, individual retirement accounts, stocks and bonds)",?78,"|",?96,"|",?114,"|"
"RTN","EASEZPDU",128,0)
 I $P(@EASD@("2E1"),U) W "  Veteran amount"
"RTN","EASEZPDU",129,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZPDU",130,0)
 ;
"RTN","EASEZPDU",131,0)
 W !,"2. MARKET VALUE OF LAND AND BUILDINGS MINUS MORTGAGES AND LIENS (e.g., second",?78,"|  $ ",$P(@EASD@("2E2"),U),?96,"|  $ ",$P(@EASD@("2E2"),U,2),?114,"|"
"RTN","EASEZPDU",132,0)
 I $P(@EASD@("2E2"),U) W "  Included in"
"RTN","EASEZPDU",133,0)
 W !,"homes and non-income-producing property.  Do not include your primary home.)",?78,"|",?96,"|",?114,"|"
"RTN","EASEZPDU",134,0)
 I $P(@EASD@("2E2"),U) W "  Veteran amount"
"RTN","EASEZPDU",135,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZPDU",136,0)
 ;
"RTN","EASEZPDU",137,0)
 W !,"3. VALUE OF OTHER PROPERTY OR ASSETS (e.g., art, rare coins, collectibles)",?78,"|  $ ",$P(@EASD@("2E3"),U),?96,"|  $ ",$P(@EASD@("2E3"),U,2),?114,"|"
"RTN","EASEZPDU",138,0)
 I $P(@EASD@("2E3"),U) W "  Included in"
"RTN","EASEZPDU",139,0)
 W !,"MINUS THE AMOUNT YOU OWE ON THESE ITEMS.  INCLUDE VALUE OF FARM, RANCH, OR",?78,"|",?96,"|",?114,"|"
"RTN","EASEZPDU",140,0)
 I $P(@EASD@("2E3"),U) W "  Veteran amount"
"RTN","EASEZPDU",141,0)
 W !,"BUSINESS ASSETS.  Exclude household effects and family vehicles.",?78,"|",?96,"|",?114,"|"
"RTN","EASEZPDU",142,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZPDU",143,0)
 ;
"RTN","EASEZPDU",144,0)
 D CON^EASEZRP3
"RTN","EASEZPDU",145,0)
 D AOB^EASEZRP3
"RTN","EASEZPDU",146,0)
 D FT^EASEZRPF(.EALNE,.EAINFO)
"RTN","EASEZPDU",147,0)
 Q
"RTN","EASEZPU2")
0^32^B37317619
"RTN","EASEZPU2",1,0)
EASEZPU2 ; ALB/AMA - Print utility for 10-10EZ, Version 6 or greater ; 8/1/08 1:27pm
"RTN","EASEZPU2",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**51,60,57,70**;Mar 15, 2001;Build 26
"RTN","EASEZPU2",3,0)
 ;
"RTN","EASEZPU2",4,0)
 Q
"RTN","EASEZPU2",5,0)
 ;Parts of this routine were copied from EASEZPU (this is the second
"RTN","EASEZPU2",6,0)
 ;part of EASEZP6U); if the version # of the 1010EZ application is
"RTN","EASEZPU2",7,0)
 ;6.0 or greater, then this routine will be executed.
"RTN","EASEZPU2",8,0)
 ;
"RTN","EASEZPU2",9,0)
PAGE2 ;Retrieve page 2 data and format for output on 10-10EZ form
"RTN","EASEZPU2",10,0)
 ;   Called from EN^EASEZP6F
"RTN","EASEZPU2",11,0)
 ;
"RTN","EASEZPU2",12,0)
 ;Variables
"RTN","EASEZPU2",13,0)
 ;   ZDATA         - references TMP global for output data
"RTN","EASEZPU2",14,0)
 ;   EZDATA        - references available data from 1010EZ holding file
"RTN","EASEZPU2",15,0)
 ;   EAX, EAY      - temporary storage variables
"RTN","EASEZPU2",16,0)
 ;   EACT          - Temporary city variable
"RTN","EASEZPU2",17,0)
 ;   EAV, EAS, EAC - temp storage for vet, spouse, and child variables
"RTN","EASEZPU2",18,0)
 ;
"RTN","EASEZPU2",19,0)
 N ZDATA,EZDATA,EAX,EAY,EACT,EAV,EAS,EAC
"RTN","EASEZPU2",20,0)
 ;
"RTN","EASEZPU2",21,0)
 S ZDATA=$NA(^TMP("EASEZ",$J,2))
"RTN","EASEZPU2",22,0)
 K @ZDATA
"RTN","EASEZPU2",23,0)
 ;
"RTN","EASEZPU2",24,0)
 ; Process Section IIA - Dependent Info
"RTN","EASEZPU2",25,0)
 S EZDATA=$NA(^TMP("EZTEMP",$J,"IIA",1))
"RTN","EASEZPU2",26,0)
 ;
"RTN","EASEZPU2",27,0)
 S EAX=$$PROCESS(1.1),EAY=$$PROCESS(1.5)
"RTN","EASEZPU2",28,0)
 I $E(EAY,$L(EAY))="," S EAY=$E(EAY,1,$L(EAY)-1)
"RTN","EASEZPU2",29,0)
 S @ZDATA@(1)=EAX_U_EAY             ;Spouse's name^maiden name
"RTN","EASEZPU2",30,0)
 S @ZDATA@(2)=$$PROCESS(2.1)        ;Child 1's name
"RTN","EASEZPU2",31,0)
 S @ZDATA@(3)=$$PROCESS("3.")       ;Spouse's SSN
"RTN","EASEZPU2",32,0)
 S @ZDATA@(4)=$$PROCESS("4.")       ;Spouse's date of birth
"RTN","EASEZPU2",33,0)
 S @ZDATA@(5)=$$PROCESS("5.")       ;Child 1's date of birth
"RTN","EASEZPU2",34,0)
 S EACT="",EACT=$$PROCESS(6.2)      ;Spouse's city
"RTN","EASEZPU2",35,0)
 I EACT]"" S EACT=EACT_", "   ;if there's a city, add comma & space
"RTN","EASEZPU2",36,0)
 ;Spouse's street^city, state zip
"RTN","EASEZPU2",37,0)
 S @ZDATA@(6)=$$PROCESS(6.1)_U_EACT_$$PROCESS(6.3)_" "_$$PROCESS(6.4)
"RTN","EASEZPU2",38,0)
 ;
"RTN","EASEZPU2",39,0)
 S @ZDATA@(7)=$$PROCESS("7.")       ;Child 1's SSN
"RTN","EASEZPU2",40,0)
 S @ZDATA@(8)=$$PROCESS(8.1)        ;Spouse's phone
"RTN","EASEZPU2",41,0)
 S @ZDATA@(9)=$$PROCESS("9.")       ;Child 1's relationship
"RTN","EASEZPU2",42,0)
 S @ZDATA@(10)=$$PROCESS("10.")     ;Date of marriage to spouse
"RTN","EASEZPU2",43,0)
 S @ZDATA@(11)=$$PROCESS("11.")     ;Date Child 1 became dependent
"RTN","EASEZPU2",44,0)
 ;
"RTN","EASEZPU2",45,0)
 S EAX=$$PROCESS(12.1)              ;Amount contributed to spouse
"RTN","EASEZPU2",46,0)
 S EAY=$$PROCESS(12.2)              ;Amount contributed to Child 1
"RTN","EASEZPU2",47,0)
 S @ZDATA@(12)=$S(EAX="":"",1:$J(EAX,0,2))_U_$S(EAY="":"",1:$J(EAY,0,2))
"RTN","EASEZPU2",48,0)
 ;
"RTN","EASEZPU2",49,0)
 S @ZDATA@(13)=$$PROCESS("13.")     ;Educational expenses for Child 1
"RTN","EASEZPU2",50,0)
 S @ZDATA@(13)=$S(@ZDATA@(13)="":"",1:$J(@ZDATA@(13),0,2))
"RTN","EASEZPU2",51,0)
 ;
"RTN","EASEZPU2",52,0)
 S EAX=$$PROCESS("14.")             ;Child 1 disabled?
"RTN","EASEZPU2",53,0)
 ;EAS*1.0*57 - print full word "UNKNOWN"
"RTN","EASEZPU2",54,0)
 ;             If Child 1 exists and answer is blank, set to "UNKNOWN"
"RTN","EASEZPU2",55,0)
 ;             If no Child 1, then leave blank
"RTN","EASEZPU2",56,0)
 I (EAX=""),(@ZDATA@(2)]"") S EAX="UNKNOWN"
"RTN","EASEZPU2",57,0)
 I @ZDATA@(2)']"" S EAX=""
"RTN","EASEZPU2",58,0)
 S @ZDATA@(14)=$S(EAX="Y"!(EAX="YES"):"YES",EAX="N"!(EAX="NO"):"NO",EAX="UNKNOWN":"UNKNOWN",1:"")
"RTN","EASEZPU2",59,0)
 S EAX=$$PROCESS("15.")             ;Child 1 attend school last year?
"RTN","EASEZPU2",60,0)
 ;EAS*1.0*57 - print full word "UNKNOWN"
"RTN","EASEZPU2",61,0)
 ;             If Child 1 exists and answer is blank, set to "UNKNOWN"
"RTN","EASEZPU2",62,0)
 ;             If no Child 1, then leave blank
"RTN","EASEZPU2",63,0)
 I (EAX=""),(@ZDATA@(2)]"") S EAX="UNKNOWN"
"RTN","EASEZPU2",64,0)
 I @ZDATA@(2)']"" S EAX=""
"RTN","EASEZPU2",65,0)
 S @ZDATA@(15)=$S(EAX="Y"!(EAX="YES"):"YES",EAX="N"!(EAX="NO"):"NO",EAX="UNKNOWN":"UNKNOWN",1:"")
"RTN","EASEZPU2",66,0)
 ;
"RTN","EASEZPU2",67,0)
 ; Process Section IIC - Previous Calendar Year Gross Annual Income
"RTN","EASEZPU2",68,0)
 S EZDATA=$NA(^TMP("EZTEMP",$J,"IIC",1))
"RTN","EASEZPU2",69,0)
 ;
"RTN","EASEZPU2",70,0)
 S EAV=$$PROCESS(1.4),EAS=$$PROCESS(1.5)     ;Vet & spouse gross income
"RTN","EASEZPU2",71,0)
 S @ZDATA@("2C1")=$S(EAV="":"",1:$J(EAV,0,2))_U_$S(EAS="":"",1:$J(EAS,0,2))
"RTN","EASEZPU2",72,0)
 ;
"RTN","EASEZPU2",73,0)
 S EAV=$$PROCESS(2.1),EAS=$$PROCESS(2.2)     ;Vet & spouse other income
"RTN","EASEZPU2",74,0)
 S @ZDATA@("2C2")=$S(EAV="":"",1:$J(EAV,0,2))_U_$S(EAS="":"",1:$J(EAS,0,2))
"RTN","EASEZPU2",75,0)
 ;
"RTN","EASEZPU2",76,0)
 S EAV=$$PROCESS(3.1),EAS=$$PROCESS(3.2)     ;Vet & spouse net income
"RTN","EASEZPU2",77,0)
 S @ZDATA@("2C3")=$S(EAV="":"",1:$J(EAV,0,2))_U_$S(EAS="":"",1:$J(EAS,0,2))
"RTN","EASEZPU2",78,0)
 ;
"RTN","EASEZPU2",79,0)
 S @ZDATA@(999)=$$PROCESS(999)               ;Vet income year
"RTN","EASEZPU2",80,0)
 I $D(@EZDATA@(998)) D
"RTN","EASEZPU2",81,0)
 . S @ZDATA@(998)=$$PROCESS(998)             ;Vet Declines To Give Info
"RTN","EASEZPU2",82,0)
 ;
"RTN","EASEZPU2",83,0)
 ;Since Child amounts in Section IIC are for ALL dependents,
"RTN","EASEZPU2",84,0)
 ;get just Child 1 amounts from Section IIF - Dependent Gross Incomes
"RTN","EASEZPU2",85,0)
 S EZDATA=$NA(^TMP("EZTEMP",$J,"IIF",1))
"RTN","EASEZPU2",86,0)
 S EAC=$$PROCESS(7.1)                            ;Child 1 gross income
"RTN","EASEZPU2",87,0)
 S @ZDATA@("2C1")=@ZDATA@("2C1")_U_$S(EAC="":"",1:$J(EAC,0,2))
"RTN","EASEZPU2",88,0)
 S EAC=$$PROCESS(7.2)                            ;Child 1 net income
"RTN","EASEZPU2",89,0)
 S @ZDATA@("2C3")=@ZDATA@("2C3")_U_$S(EAC="":"",1:$J(EAC,0,2))
"RTN","EASEZPU2",90,0)
 S EAC=$$PROCESS(7.3)                            ;Child 1 other income
"RTN","EASEZPU2",91,0)
 S @ZDATA@("2C2")=@ZDATA@("2C2")_U_$S(EAC="":"",1:$J(EAC,0,2))
"RTN","EASEZPU2",92,0)
 ;
"RTN","EASEZPU2",93,0)
 ; Process Section IID - Previous Calendar Year Expenses
"RTN","EASEZPU2",94,0)
 S EZDATA=$NA(^TMP("EZTEMP",$J,"IID",1))
"RTN","EASEZPU2",95,0)
 ;
"RTN","EASEZPU2",96,0)
 ;Medical expenses
"RTN","EASEZPU2",97,0)
 S EAX=$$PROCESS("1."),@ZDATA@("2D1")=$S(EAX="":"",1:$J(EAX,0,2))
"RTN","EASEZPU2",98,0)
 ;Funeral expenses
"RTN","EASEZPU2",99,0)
 S EAX=$$PROCESS("2."),@ZDATA@("2D2")=$S(EAX="":"",1:$J(EAX,0,2))
"RTN","EASEZPU2",100,0)
 ;Educational expenses
"RTN","EASEZPU2",101,0)
 S EAX=$$PROCESS("3."),@ZDATA@("2D3")=$S(EAX="":"",1:$J(EAX,0,2))
"RTN","EASEZPU2",102,0)
 ;
"RTN","EASEZPU2",103,0)
 ; Process Section IIE - Previous Calendar Year Net Worth
"RTN","EASEZPU2",104,0)
 S EZDATA=$NA(^TMP("EZTEMP",$J,"IIE",1))
"RTN","EASEZPU2",105,0)
 ;
"RTN","EASEZPU2",106,0)
 S EAV=$$PROCESS(1.1),EAS=$$PROCESS(1.2)  ;Vet & spouse cash
"RTN","EASEZPU2",107,0)
 S @ZDATA@("2E1")=$S(EAV="":"",1:$J(EAV,0,2))_U_$S(EAS="":"",1:$J(EAS,0,2))
"RTN","EASEZPU2",108,0)
 ;
"RTN","EASEZPU2",109,0)
 S EAV=$$PROCESS(2.1),EAS=$$PROCESS(2.2)  ;Vet & spouse land value
"RTN","EASEZPU2",110,0)
 S @ZDATA@("2E2")=$S(EAV="":"",1:$J(EAV,0,2))_U_$S(EAS="":"",1:$J(EAS,0,2))
"RTN","EASEZPU2",111,0)
 ;
"RTN","EASEZPU2",112,0)
 S EAV=$$PROCESS(3.1),EAS=$$PROCESS(3.2)  ;Vet & spouse other property
"RTN","EASEZPU2",113,0)
 S @ZDATA@("2E3")=$S(EAV="":"",1:$J(EAV,0,2))_U_$S(EAS="":"",1:$J(EAS,0,2))
"RTN","EASEZPU2",114,0)
 ;
"RTN","EASEZPU2",115,0)
 ;Since Child amounts in Section IIE are for ALL dependents,
"RTN","EASEZPU2",116,0)
 ;get just Child 1 amounts from Section IIG - Dependent Net Worths
"RTN","EASEZPU2",117,0)
 S EZDATA=$NA(^TMP("EZTEMP",$J,"IIG",1))
"RTN","EASEZPU2",118,0)
 S EAC=$$PROCESS(9.1)                           ;Child 1 cash
"RTN","EASEZPU2",119,0)
 S @ZDATA@("2E1")=@ZDATA@("2E1")_U_$S(EAC="":"",1:$J(EAC,0,2))
"RTN","EASEZPU2",120,0)
 S EAC=$$PROCESS(9.2)                           ;Child 1 land value
"RTN","EASEZPU2",121,0)
 S @ZDATA@("2E2")=@ZDATA@("2E2")_U_$S(EAC="":"",1:$J(EAC,0,2))
"RTN","EASEZPU2",122,0)
 S EAC=$$PROCESS(9.3)                           ;Child 1 other property
"RTN","EASEZPU2",123,0)
 S @ZDATA@("2E3")=@ZDATA@("2E3")_U_$S(EAC="":"",1:$J(EAC,0,2))
"RTN","EASEZPU2",124,0)
 ;
"RTN","EASEZPU2",125,0)
 Q
"RTN","EASEZPU2",126,0)
 ;
"RTN","EASEZPU2",127,0)
PAGEDFF(EADEP) ;  Additional dependent financial page(s) for Section IIF
"RTN","EASEZPU2",128,0)
 ; Called from EN^EASEZP6F
"RTN","EASEZPU2",129,0)
 N ZDATA,EZDATA,EANAME,EAGROSS,EANET,EAOTHER
"RTN","EASEZPU2",130,0)
 ;
"RTN","EASEZPU2",131,0)
 S ZDATA=$NA(^TMP("EASEZ",$J,"DFF",EADEP))
"RTN","EASEZPU2",132,0)
 K @ZDATA
"RTN","EASEZPU2",133,0)
 ;
"RTN","EASEZPU2",134,0)
 ; Process Section IIF
"RTN","EASEZPU2",135,0)
 S EZDATA=$NA(^TMP("EZTEMP",$J,"IIF",EADEP))
"RTN","EASEZPU2",136,0)
 ;
"RTN","EASEZPU2",137,0)
 S EANAME=$$PROCESS("7.")   ;Child number (2 through 19)
"RTN","EASEZPU2",138,0)
 S EAGROSS=$$PROCESS(7.1),EANET=$$PROCESS(7.2),EAOTHER=$$PROCESS(7.3)
"RTN","EASEZPU2",139,0)
 ;Child #^gross income^net income^other income
"RTN","EASEZPU2",140,0)
 S @ZDATA@(7)=EANAME_U_$S(EAGROSS="":"",1:$J(EAGROSS,0,2))_U_$S(EANET="":"",1:$J(EANET,0,2))_U_$S(EAOTHER="":"",1:$J(EAOTHER,0,2))
"RTN","EASEZPU2",141,0)
 ;
"RTN","EASEZPU2",142,0)
 Q
"RTN","EASEZPU2",143,0)
 ;
"RTN","EASEZPU2",144,0)
PAGEDFG(EADEP)  ; Additional dependent financial page(s) for Section IIG
"RTN","EASEZPU2",145,0)
 ; Called from EN^EASEZP6F
"RTN","EASEZPU2",146,0)
 N ZDATA,EZDATA,EANAME,EACASH,EAREAL,EAOTHER
"RTN","EASEZPU2",147,0)
 ;
"RTN","EASEZPU2",148,0)
 S ZDATA=$NA(^TMP("EASEZ",$J,"DFG",EADEP))
"RTN","EASEZPU2",149,0)
 K @ZDATA
"RTN","EASEZPU2",150,0)
 ;
"RTN","EASEZPU2",151,0)
 ; Process Section IIG
"RTN","EASEZPU2",152,0)
 S EZDATA=$NA(^TMP("EZTEMP",$J,"IIG",EADEP))
"RTN","EASEZPU2",153,0)
 ;
"RTN","EASEZPU2",154,0)
 S EANAME=$$PROCESS("9.")   ;Child number (2 through 19)
"RTN","EASEZPU2",155,0)
 S EACASH=$$PROCESS(9.1),EAREAL=$$PROCESS(9.2),EAOTHER=$$PROCESS(9.3)
"RTN","EASEZPU2",156,0)
 ;Child #^cash^land value^other property
"RTN","EASEZPU2",157,0)
 S @ZDATA@(9)=EANAME_U_$S(EACASH="":"",1:$J(EACASH,0,2))_U_$S(EAREAL="":"",1:$J(EAREAL,0,2))_U_$S(EAOTHER="":"",1:$J(EAOTHER,0,2))
"RTN","EASEZPU2",158,0)
 ;
"RTN","EASEZPU2",159,0)
 Q
"RTN","EASEZPU2",160,0)
 ;
"RTN","EASEZPU2",161,0)
PROCESS(KEY) ; Process data value from ^TMP("EZTEMP" array                   
"RTN","EASEZPU2",162,0)
 ;format = IEN ^ EAS DATA ^ ACCEPT VALUE ^ 712 SUBIEN ^ VISTA DATA
"RTN","EASEZPU2",163,0)
 ;Take #712 value from 2nd piece, if it's accepted;
"RTN","EASEZPU2",164,0)
 ;otherwise, take the Patient File value from the 5th piece
"RTN","EASEZPU2",165,0)
 ;
"RTN","EASEZPU2",166,0)
 N EAV,RSLT
"RTN","EASEZPU2",167,0)
 ;
"RTN","EASEZPU2",168,0)
 I '$D(@EZDATA@(KEY)) G PQ
"RTN","EASEZPU2",169,0)
 S EAV=@EZDATA@(KEY)
"RTN","EASEZPU2",170,0)
 S RSLT=$S(+$P(EAV,U,3):$P(EAV,U,2),1:$P(EAV,U,5))
"RTN","EASEZPU2",171,0)
PQ Q $G(RSLT)
"RTN","EASEZPV2")
0^4^B45192091
"RTN","EASEZPV2",1,0)
EASEZPV2 ;ALB/AMA/GTS/CMF - GATHER VISTA MEANS TEST DATA TO PRINT FROM DG OPTIONS ; 8/1/08 1:27pm
"RTN","EASEZPV2",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**57,66,70**;Mar 15, 2001;Build 26
"RTN","EASEZPV2",3,0)
 ;
"RTN","EASEZPV2",4,0)
V408(EASDFN,EASMTIEN) ;GATHER MEANS TEST DATA -- CALLED FROM VISTA^EASEZPVD
"RTN","EASEZPV2",5,0)
 ;   INPUT:
"RTN","EASEZPV2",6,0)
 ;      EASDFN - POINTER TO PATIENT FILE (#2)
"RTN","EASEZPV2",7,0)
 ;      EASMTIEN - MeansTestIEN (#408.31)
"RTN","EASEZPV2",8,0)
 N MTIFN,MTDT,INCREL
"RTN","EASEZPV2",9,0)
 S MTIFN=+$G(EASMTIEN)
"RTN","EASEZPV2",10,0)
 S MTDT=$$GET1^DIQ(408.31,MTIFN_",",.01,"I")
"RTN","EASEZPV2",11,0)
 ;
"RTN","EASEZPV2",12,0)
 ;GET DATA FROM FILES 408.12, 408.13, 408.21, AND 408.22
"RTN","EASEZPV2",13,0)
 D I408^EASEZPVI(EASDFN,MTDT,.INCREL)
"RTN","EASEZPV2",14,0)
 I $D(INCREL)>1 D
"RTN","EASEZPV2",15,0)
 . ;MODIFIED FROM A408^EASEZC2
"RTN","EASEZPV2",16,0)
 . N IENS,B,FILE,M,MM,TYPE,IEN,NSD,FLD,IEN2
"RTN","EASEZPV2",17,0)
 . N FFF,PERS,GRP,GRP1,SUBF,SUBIEN,WHERE
"RTN","EASEZPV2",18,0)
 . S IENS=$G(INCREL(408,"V",1))
"RTN","EASEZPV2",19,0)
 . ;ADD "INCOME YEAR" AND "DECLINES TO GIVE INFO" INTO ^TMP GLOBALS
"RTN","EASEZPV2",20,0)
 . N EZTMPIEN
"RTN","EASEZPV2",21,0)
 . S EZTMPIEN=$O(^TMP("EZDATA",$J,""),-1)+1
"RTN","EASEZPV2",22,0)
 . S ^TMP("EZDATA",$J,EZTMPIEN)="408.21^408.21^.01^IIC;999^Income Year"
"RTN","EASEZPV2",23,0)
 . S ^TMP("EZINDEX",$J,"A",408.21,408.21,.01,EZTMPIEN)=EZTMPIEN_"^APPLICANT INCOME YEAR"
"RTN","EASEZPV2",24,0)
 . S EZTMPIEN=EZTMPIEN+1
"RTN","EASEZPV2",25,0)
 . S ^TMP("EZDATA",$J,EZTMPIEN)="408.31^408.31^.14^IIC;998^Declines To Give Info"
"RTN","EASEZPV2",26,0)
 . S ^TMP("EZINDEX",$J,"A",408.31,408.31,.14,EZTMPIEN)=EZTMPIEN_"^APPLICANT DECLINES TO GIVE INFO"
"RTN","EASEZPV2",27,0)
 . I MTIFN>0 S B=0 D GET408(408.31,"A",MTIFN)
"RTN","EASEZPV2",28,0)
 . S IEN=$P(IENS,U,3),IEN2=$P(IENS,U,4)   ;EAS*66 - GENERATE ADJ EXP
"RTN","EASEZPV2",29,0)
 . I +IEN,+IEN2 D GROSS^DGMTSCU4(IEN,EASDFN,MTDT,IEN2)
"RTN","EASEZPV2",30,0)
 . ;
"RTN","EASEZPV2",31,0)
 . I IENS S B=0 F FILE=408.12,2,408.21,408.22 D GET408(FILE,"A",IENS)
"RTN","EASEZPV2",32,0)
 . ;MODIFIED FROM SP408^EASEZC2
"RTN","EASEZPV2",33,0)
 . S IENS=$G(INCREL(408,"S",1))
"RTN","EASEZPV2",34,0)
 . I IENS S B=0 F FILE=408.12,408.13,408.21,408.22 D GET408(FILE,"S",IENS)
"RTN","EASEZPV2",35,0)
 . ;EAS*1.0*70 -- GET SPOUSE GROSS ANNUAL INCOME AND NET WORTH
"RTN","EASEZPV2",36,0)
 . D SPGAINW
"RTN","EASEZPV2",37,0)
 . ;
"RTN","EASEZPV2",38,0)
 . ;MODIFIED FROM C1N408^EASEZC2
"RTN","EASEZPV2",39,0)
 . S (M,MM)=0 F  S M=$O(INCREL(408,"C",M)) Q:'M  D
"RTN","EASEZPV2",40,0)
 . . S IEN=+$P(INCREL(408,"C",M),U,2)
"RTN","EASEZPV2",41,0)
 . . S NSD="" F FLD=.01,.09,.03 D
"RTN","EASEZPV2",42,0)
 . . . S FFF=408.13_U_408.13_U_FLD,VDATA=$$GET^EASEZC1(IEN,FFF)
"RTN","EASEZPV2",43,0)
 . . . I FLD=.09 S VDATA=$$SSNOUT^EASEZT1(VDATA)
"RTN","EASEZPV2",44,0)
 . . . I FLD=.03 S VDATA=$$XDATE^EASEZT1(VDATA)
"RTN","EASEZPV2",45,0)
 . . . S NSD=NSD_VDATA_U
"RTN","EASEZPV2",46,0)
 . . I MM=0 D  I 1
"RTN","EASEZPV2",47,0)
 . . . S MM=1
"RTN","EASEZPV2",48,0)
 . . . S PERS("EZ","CHILD1",1)=NSD
"RTN","EASEZPV2",49,0)
 . . . S PERS("EZ","CHILD1",1,"IENS")=INCREL(408,"C",M)
"RTN","EASEZPV2",50,0)
 . . E  D
"RTN","EASEZPV2",51,0)
 . . . S PERS("EZ","CHILD(N)",MM)=NSD
"RTN","EASEZPV2",52,0)
 . . . S PERS("EZ","CHILD(N)",MM,"IENS")=INCREL(408,"C",M)
"RTN","EASEZPV2",53,0)
 . . . S MM=MM+1
"RTN","EASEZPV2",54,0)
 . ;
"RTN","EASEZPV2",55,0)
 . ;get identifying data for child in database
"RTN","EASEZPV2",56,0)
 . ;EAS*1.0*70 - duplicate the gross annual income entries
"RTN","EASEZPV2",57,0)
 . ;             for CHILD1, using the CHILD(N) index IENs
"RTN","EASEZPV2",58,0)
 . F FLD=.08,.14,.17 D
"RTN","EASEZPV2",59,0)
 . . S KEY=$O(^TMP("EZINDEX",$J,"CN",408.21,408.21,FLD,0)) Q:'KEY
"RTN","EASEZPV2",60,0)
 . . S ^TMP("EZINDEX",$J,"C1",408.21,408.21,FLD,KEY)=^TMP("EZINDEX",$J,"CN",408.21,408.21,FLD,KEY)
"RTN","EASEZPV2",61,0)
 . ;
"RTN","EASEZPV2",62,0)
 . F TYPE="CHILD1","CHILD(N)" S M=0 F  S M=$O(PERS("EZ",TYPE,M)) Q:'M  D
"RTN","EASEZPV2",63,0)
 . . S IENS=$G(PERS("EZ",TYPE,M,"IENS")) Q:IENS=""
"RTN","EASEZPV2",64,0)
 . . S GRP=$S(TYPE="CHILD1":"C1",1:"CN")
"RTN","EASEZPV2",65,0)
 . . ;associate each ien with file/subfile
"RTN","EASEZPV2",66,0)
 . . S B=0 F FILE=408.12,408.13,408.21,408.22 D
"RTN","EASEZPV2",67,0)
 . . . S B=B+1,IEN=+$P(IENS,U,B) Q:'IEN
"RTN","EASEZPV2",68,0)
 . . . I 'MTDT,((FILE=408.21)!(FILE=408.22)) Q
"RTN","EASEZPV2",69,0)
 . . . D CONT
"RTN","EASEZPV2",70,0)
 . . ;EAS*1.0*70
"RTN","EASEZPV2",71,0)
 . . S IEN=$P($G(PERS("EZ",TYPE,M,"IENS")),U,4) Q:'IEN
"RTN","EASEZPV2",72,0)
 . . N IATY S IATY=$$GET^EASEZC1(IEN,"408.22^408.22^.12")
"RTN","EASEZPV2",73,0)
 . . I IATY'="YES" D  Q
"RTN","EASEZPV2",74,0)
 . . . I EASVRSN>5.99,(TYPE="CHILD(N)") D DELETE(GRP,(M+1))
"RTN","EASEZPV2",75,0)
 . . . E  D DELETE(GRP,M)
"RTN","EASEZPV2",76,0)
 Q
"RTN","EASEZPV2",77,0)
 ;
"RTN","EASEZPV2",78,0)
GET408(FILE,SRCE,IENS) ;GATHER THE DATA FROM THE 408 FILES
"RTN","EASEZPV2",79,0)
 ;   INPUT:
"RTN","EASEZPV2",80,0)
 ;      FILE - FILE TO SEARCH
"RTN","EASEZPV2",81,0)
 ;      SRCE - SOURCE OF DATA ("A"PPLICANT, "S"POUSE)
"RTN","EASEZPV2",82,0)
 ;      IENS - IEN FROM THE INCREL ARRAY
"RTN","EASEZPV2",83,0)
 ;
"RTN","EASEZPV2",84,0)
 N IEN,FLD,MAP,VDATA,KEY
"RTN","EASEZPV2",85,0)
 ;IF NO MEANS TEST, THEN DON'T GATHER ANY MONEY AMOUNTS
"RTN","EASEZPV2",86,0)
 I 'MTDT,((FILE=408.21)!(FILE=408.22)) Q
"RTN","EASEZPV2",87,0)
 S B=B+1,IEN=+$P(IENS,U,B) Q:'IEN  Q:FILE=2
"RTN","EASEZPV2",88,0)
 I (FILE=408.22),('MTIFN!($P($G(^DGMT(FILE,+IEN,"MT")),U)'=MTIFN)) Q
"RTN","EASEZPV2",89,0)
 S FLD=0 F  S FLD=$O(^TMP("EZINDEX",$J,SRCE,FILE,FILE,FLD)) Q:'FLD  D
"RTN","EASEZPV2",90,0)
 . S MAP=FILE_U_FILE_U_FLD
"RTN","EASEZPV2",91,0)
 . S VDATA=$$GET^EASEZC1(IEN,MAP)
"RTN","EASEZPV2",92,0)
 . I (FILE=408.31),(FLD=.14) D
"RTN","EASEZPV2",93,0)
 . . I (VDATA="")!(VDATA=0) S VDATA="NO"
"RTN","EASEZPV2",94,0)
 . . I VDATA=1 S VDATA="YES"
"RTN","EASEZPV2",95,0)
 . I (FILE=408.21) D
"RTN","EASEZPV2",96,0)
 . . I (FLD=.08) S VDATA=$$SUMSSI^EASEZT2(VDATA,IEN)
"RTN","EASEZPV2",97,0)
 . . I (FLD=2.01) S VDATA=$$SUMCASH^EASEZT2(VDATA,IEN)
"RTN","EASEZPV2",98,0)
 . . I (FLD=2.04) S VDATA=$$SUMPROP^EASEZT2(VDATA,IEN)
"RTN","EASEZPV2",99,0)
 . . Q
"RTN","EASEZPV2",100,0)
 . Q:VDATA=-1  Q:VDATA=""
"RTN","EASEZPV2",101,0)
 . I (SRCE="S"),(FILE=408.13),(FLD=.09) S VDATA=$$SSNOUT^EASEZT1(VDATA)
"RTN","EASEZPV2",102,0)
 . I (SRCE="S"),(FILE=408.13),(FLD=.03) S VDATA=$$XDATE^EASEZT1(VDATA)
"RTN","EASEZPV2",103,0)
 . S KEY=0 F  S KEY=$O(^TMP("EZINDEX",$J,SRCE,FILE,FILE,FLD,KEY)) Q:'KEY  D
"RTN","EASEZPV2",104,0)
 . . S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZPV2",105,0)
 . . I (FILE=408.21),(SRCE="A") D
"RTN","EASEZPV2",106,0)
 . . . I ";2.01;2.03;2.04;"'[(";"_FLD_";") Q
"RTN","EASEZPV2",107,0)
 . . . N TEXT,NEWKEY
"RTN","EASEZPV2",108,0)
 . . . I FLD=2.01 S TEXT="APPLICANT CASH IN BANK2"
"RTN","EASEZPV2",109,0)
 . . . I FLD=2.03 S TEXT="APPLICANT REAL PROPERTY LESS MORTGAGES2"
"RTN","EASEZPV2",110,0)
 . . . I FLD=2.04 S TEXT="APPLICANT STOCKS BONDS ASSETS LESS DEBTS2"
"RTN","EASEZPV2",111,0)
 . . . S NEWKEY=+$$KEY711^EASEZU1(TEXT)
"RTN","EASEZPV2",112,0)
 . . . S ^TMP("EZDATA",$J,NEWKEY,1,2)=VDATA
"RTN","EASEZPV2",113,0)
 ;
"RTN","EASEZPV2",114,0)
 I (FILE=408.12),(SRCE="S") D
"RTN","EASEZPV2",115,0)
 . S SUBF=408.1275
"RTN","EASEZPV2",116,0)
 . S FLD=0 F  S FLD=$O(^TMP("EZINDEX",$J,SRCE,FILE,SUBF,FLD)) Q:'FLD  D
"RTN","EASEZPV2",117,0)
 . . S SUBIEN=$$I1275^EASEZI(IEN)
"RTN","EASEZPV2",118,0)
 . . S MAP=FILE_U_SUBF_U_FLD,WHERE=IEN_";"_SUBIEN
"RTN","EASEZPV2",119,0)
 . . S VDATA=$$GET^EASEZC1(WHERE,MAP)
"RTN","EASEZPV2",120,0)
 . . Q:VDATA=-1  Q:VDATA=""
"RTN","EASEZPV2",121,0)
 . . S KEY=0 F  S KEY=$O(^TMP("EZINDEX",$J,SRCE,FILE,SUBF,FLD,KEY)) Q:'KEY  D
"RTN","EASEZPV2",122,0)
 . . . S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZPV2",123,0)
 Q
"RTN","EASEZPV2",124,0)
 ;
"RTN","EASEZPV2",125,0)
CONT ;CONTINUATION OF CHILD FINANCIAL DATA
"RTN","EASEZPV2",126,0)
 ;
"RTN","EASEZPV2",127,0)
 I (FILE=408.22),('MTIFN!'IEN!($P($G(^DGMT(FILE,+IEN,"MT")),U)'=MTIFN)) Q
"RTN","EASEZPV2",128,0)
 S FLD=0 F  S FLD=$O(^TMP("EZINDEX",$J,GRP,FILE,FILE,FLD)) Q:FLD=""  D
"RTN","EASEZPV2",129,0)
 . S MAP=FILE_U_FILE_U_FLD
"RTN","EASEZPV2",130,0)
 . S GRP1=GRP I (EASVRSN>5.99),(FILE=408.21),("^.08^.14^.17^2.01^2.03^2.04^"[("^"_FLD_"^")) S GRP1="CN"
"RTN","EASEZPV2",131,0)
 . S VDATA=$$GET^EASEZC1(IEN,MAP)
"RTN","EASEZPV2",132,0)
 . I (FILE=408.21) D
"RTN","EASEZPV2",133,0)
 . . I (FLD=.08) S VDATA=$$SUMSSI^EASEZT2(VDATA,IEN)
"RTN","EASEZPV2",134,0)
 . . I (FLD=2.01) S VDATA=$$SUMCASH^EASEZT2(VDATA,IEN)
"RTN","EASEZPV2",135,0)
 . . I (FLD=2.04) S VDATA=$$SUMPROP^EASEZT2(VDATA,IEN)
"RTN","EASEZPV2",136,0)
 . . Q
"RTN","EASEZPV2",137,0)
 . Q:VDATA=-1  Q:VDATA=""
"RTN","EASEZPV2",138,0)
 . I (FILE=408.13),(FLD=.09) S VDATA=$$SSNOUT^EASEZT1(VDATA)
"RTN","EASEZPV2",139,0)
 . I (FILE=408.13),(FLD=.03) S VDATA=$$XDATE^EASEZT1(VDATA)
"RTN","EASEZPV2",140,0)
 . ;store link in all 1010EZ elements associated with this file/subfile
"RTN","EASEZPV2",141,0)
 . S KEY=$O(^TMP("EZINDEX",$J,GRP1,FILE,FILE,FLD,0)) Q:'KEY
"RTN","EASEZPV2",142,0)
 . S MM=M I EASVRSN>5.99,FILE=408.21,"^.08^.14^.17^2.01^2.03^2.04^"[("^"_FLD_"^") S:(TYPE="CHILD(N)") MM=M+1
"RTN","EASEZPV2",143,0)
 . S ^TMP("EZDATA",$J,KEY,MM,2)=VDATA
"RTN","EASEZPV2",144,0)
 ;get data in subfile #408.1275
"RTN","EASEZPV2",145,0)
 I FILE=408.12 S SUBF=408.1275 D
"RTN","EASEZPV2",146,0)
 . S FLD=0 F  S FLD=$O(^TMP("EZINDEX",$J,GRP,FILE,SUBF,FLD)) Q:FLD=""  D
"RTN","EASEZPV2",147,0)
 . . S SUBIEN=$$I1275^EASEZI(IEN)
"RTN","EASEZPV2",148,0)
 . . S MAP=FILE_U_SUBF_U_FLD,WHERE=IEN_";"_SUBIEN
"RTN","EASEZPV2",149,0)
 . . S VDATA=$$GET^EASEZC1(WHERE,MAP)
"RTN","EASEZPV2",150,0)
 . . Q:VDATA=-1  Q:VDATA=""
"RTN","EASEZPV2",151,0)
 . . ;store link in all 1010EZ elements associated with this file/subfile
"RTN","EASEZPV2",152,0)
 . . S KEY=0 F  S KEY=$O(^TMP("EZINDEX",$J,GRP,FILE,SUBF,FLD,KEY)) Q:'KEY  D
"RTN","EASEZPV2",153,0)
 . . . S ^TMP("EZDATA",$J,KEY,MM,2)=VDATA
"RTN","EASEZPV2",154,0)
 Q
"RTN","EASEZPV2",155,0)
SPGAINW ;Determine when to print Spouse's
"RTN","EASEZPV2",156,0)
 ;Gross Annual Income and Net Worth Amounts
"RTN","EASEZPV2",157,0)
 N IEN,MLY,LWSP,ACTSP
"RTN","EASEZPV2",158,0)
 S IEN=$P($G(INCREL(408,"V",1)),U,4) Q:'IEN
"RTN","EASEZPV2",159,0)
 S MLY=$$GET^EASEZC1(IEN,"408.22^408.22^.05")
"RTN","EASEZPV2",160,0)
 I MLY'="YES" D DELETE("S",1) Q
"RTN","EASEZPV2",161,0)
 ;
"RTN","EASEZPV2",162,0)
 S LWSP=$$GET^EASEZC1(IEN,"408.22^408.22^.06")
"RTN","EASEZPV2",163,0)
 S ACTSP=+$$GET^EASEZC1(IEN,"408.22^408.22^.07")
"RTN","EASEZPV2",164,0)
 I (LWSP'="YES"),(ACTSP<600) D DELETE("S",1) Q
"RTN","EASEZPV2",165,0)
 Q
"RTN","EASEZPV2",166,0)
DELETE(SRCE,MULT) ;Delete dependent's GAI and NW amounts
"RTN","EASEZPV2",167,0)
 N FILE,FLD,KEY,X
"RTN","EASEZPV2",168,0)
 S FILE=408.21 F FLD=.08,.14,.17,2.01,2.03,2.04 D
"RTN","EASEZPV2",169,0)
 . S KEY=0 F  S KEY=$O(^TMP("EZINDEX",$J,SRCE,FILE,FILE,FLD,KEY)) Q:'KEY  D
"RTN","EASEZPV2",170,0)
 . . F X=1,2 K ^TMP("EZDATA",$J,KEY,MULT,X)
"RTN","EASEZPV2",171,0)
 Q
"RTN","EASEZPVD")
0^30^B21610185
"RTN","EASEZPVD",1,0)
EASEZPVD ;ALB/AMA/CMF - GATHER VISTA DATA TO PRINT FROM DG OPTIONS ; 8/1/08 1:28pm
"RTN","EASEZPVD",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**57,66,70**;Mar 15, 2001;Build 26
"RTN","EASEZPVD",3,0)
 ;
"RTN","EASEZPVD",4,0)
VISTA(EASDFN,EASMTIEN) ;GATHER VISTA DATA -- CALLED FROM EN^EASEZPDG
"RTN","EASEZPVD",5,0)
 ;   INPUT:
"RTN","EASEZPVD",6,0)
 ;      EASDFN - POINTER TO PATIENT FILE (#2)
"RTN","EASEZPVD",7,0)
 ;      EASMTIEN - MeansTestIEN (408.31)
"RTN","EASEZPVD",8,0)
 ;
"RTN","EASEZPVD",9,0)
 N X,KEY,VDATA,DISPOS,DGNT,ENROLL,RACE,ETHNC
"RTN","EASEZPVD",10,0)
 ;
"RTN","EASEZPVD",11,0)
 ;GET LAST ALIAS NAME
"RTN","EASEZPVD",12,0)
 S X=$O(^DPT(EASDFN,.01,""),-1)
"RTN","EASEZPVD",13,0)
 I +X D
"RTN","EASEZPVD",14,0)
 . S KEY=+$$KEY711^EASEZU1("APPLICANT OTHER NAME")
"RTN","EASEZPVD",15,0)
 . S VDATA=$$GET^EASEZC1(EASDFN_";"_+X,"2^2.01^.01")
"RTN","EASEZPVD",16,0)
 . Q:VDATA=-1  Q:VDATA=""
"RTN","EASEZPVD",17,0)
 . S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZPVD",18,0)
 ;
"RTN","EASEZPVD",19,0)
 ;GATHER MOST RECENT DISPOSITION DATA, IF IT EXISTS
"RTN","EASEZPVD",20,0)
 ;OTHERWISE, PRINT "UNKNOWN" FOR THE FOLLOWING FIELDS
"RTN","EASEZPVD",21,0)
 D I2101^EASEZI(EASDFN,.DISPOS)
"RTN","EASEZPVD",22,0)
 I $D(DISPOS)>1 D  I 1
"RTN","EASEZPVD",23,0)
 . ;GET TYPE OF BENEFIT
"RTN","EASEZPVD",24,0)
 . S VDATA=$$GET^EASEZC1(DISPOS(1),"2^2.101^2")
"RTN","EASEZPVD",25,0)
 . I (VDATA'=-1),(VDATA'="") D
"RTN","EASEZPVD",26,0)
 . . I (VDATA="HOSPITAL")!(VDATA="OUTPATIENT MEDICAL") S VDATA="HEALTH SERVICES"
"RTN","EASEZPVD",27,0)
 . . I VDATA["DENTAL" S VDATA="DENTAL"
"RTN","EASEZPVD",28,0)
 . . I VDATA["NURSING" S VDATA="NURSING HOME"
"RTN","EASEZPVD",29,0)
 . . S KEY=+$$KEY711^EASEZU1("TYPE OF BENEFIT-"_VDATA)
"RTN","EASEZPVD",30,0)
 . . S ^TMP("EZDATA",$J,KEY,1,2)="YES"
"RTN","EASEZPVD",31,0)
 . ;GET FACILITY APPLYING TO
"RTN","EASEZPVD",32,0)
 . S KEY=+$$KEY711^EASEZU1("FACILITY TO RECEIVE 1010EZ")
"RTN","EASEZPVD",33,0)
 . S VDATA=$$GET^EASEZC1(DISPOS(1),"2^2.101^3")
"RTN","EASEZPVD",34,0)
 . I (VDATA'=-1),(VDATA'="") S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZPVD",35,0)
 . ;
"RTN","EASEZPVD",36,0)
 . ;GET NEED RELATED TO JOB INJURY OR ACCIDENT
"RTN","EASEZPVD",37,0)
 . S KEY=+$$KEY711^EASEZU1("NEED RELATED TO JOB INJURY")
"RTN","EASEZPVD",38,0)
 . S VDATA=$$GET^EASEZC1(DISPOS(1),"2^2.101^20")
"RTN","EASEZPVD",39,0)
 . I (VDATA'=-1),(VDATA'="") S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZPVD",40,0)
 . S KEY=+$$KEY711^EASEZU1("NEED RELATED TO ACCIDENT")
"RTN","EASEZPVD",41,0)
 . S VDATA=$$GET^EASEZC1(DISPOS(1),"2^2.101^23")
"RTN","EASEZPVD",42,0)
 . I (VDATA'=-1),(VDATA'="") S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZPVD",43,0)
 E  D
"RTN","EASEZPVD",44,0)
 . ;IF NO DISPOSITION DATA, PRINT "UNKNOWN" FOR ABOVE FIELDS
"RTN","EASEZPVD",45,0)
 . S KEY=+$$KEY711^EASEZU1("TYPE OF BENEFIT-HEALTH SERVICES")
"RTN","EASEZPVD",46,0)
 . S ^TMP("EZDATA",$J,KEY,1,2)="UNKNOWN"
"RTN","EASEZPVD",47,0)
 . S KEY=+$$KEY711^EASEZU1("FACILITY TO RECEIVE 1010EZ")
"RTN","EASEZPVD",48,0)
 . S ^TMP("EZDATA",$J,KEY,1,2)="UNKNOWN"
"RTN","EASEZPVD",49,0)
 . S KEY=+$$KEY711^EASEZU1("NEED RELATED TO JOB INJURY")
"RTN","EASEZPVD",50,0)
 . S ^TMP("EZDATA",$J,KEY,1,2)="UNKNOWN"
"RTN","EASEZPVD",51,0)
 . S KEY=+$$KEY711^EASEZU1("NEED RELATED TO ACCIDENT")
"RTN","EASEZPVD",52,0)
 . S ^TMP("EZDATA",$J,KEY,1,2)="UNKNOWN"
"RTN","EASEZPVD",53,0)
 ;
"RTN","EASEZPVD",54,0)
 ;GET DATA FROM FILE #2
"RTN","EASEZPVD",55,0)
 S KEY=0 F  S KEY=$O(^TMP("EZDATA",$J,KEY)) Q:'KEY  D
"RTN","EASEZPVD",56,0)
 . S X=^TMP("EZDATA",$J,KEY)
"RTN","EASEZPVD",57,0)
 . I $P(X,U,1,2)="2^2" D
"RTN","EASEZPVD",58,0)
 . . S VDATA=$$GET^EASEZC1(EASDFN,X)
"RTN","EASEZPVD",59,0)
 . . Q:VDATA=-1  Q:VDATA=""
"RTN","EASEZPVD",60,0)
 . . I $P(X,U,3)=.09 S VDATA=$$SSNOUT^EASEZT1(VDATA)
"RTN","EASEZPVD",61,0)
 . . I $P(X,U,3)=.117 D
"RTN","EASEZPVD",62,0)
 . . . N ST,CNTY,CNAME
"RTN","EASEZPVD",63,0)
 . . . S ST=$$GET1^DIQ(2,EASDFN,.115,"I")
"RTN","EASEZPVD",64,0)
 . . . S CNTY=$$GET1^DIQ(2,EASDFN,.117,"I")
"RTN","EASEZPVD",65,0)
 . . . S CNAME=$$GET1^DIQ(5.01,CNTY_","_ST,.01)
"RTN","EASEZPVD",66,0)
 . . . S VDATA=CNAME_" ("_VDATA_")"
"RTN","EASEZPVD",67,0)
 . . ;EAS*1.0*70
"RTN","EASEZPVD",68,0)
 . . I $P(X,U,3)=.1173 S VDATA=$$COUNTRY^EASEZT1(VDATA) Q:VDATA=-1
"RTN","EASEZPVD",69,0)
 . . I $P(X,U,3)=.3405 D
"RTN","EASEZPVD",70,0)
 . . . I VDATA="N" S VDATA="EMERGENCY CONTACT"
"RTN","EASEZPVD",71,0)
 . . . E  S VDATA="NEXT OF KIN"
"RTN","EASEZPVD",72,0)
 . . I $P(X,U,3)=.362 D
"RTN","EASEZPVD",73,0)
 . . . I VDATA'["IN LIEU OF" S VDATA="NO"
"RTN","EASEZPVD",74,0)
 . . . E  S VDATA="YES"
"RTN","EASEZPVD",75,0)
 . . S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZPVD",76,0)
 ;CONVERT ANSWERS FOR SPINAL CORD INJURY
"RTN","EASEZPVD",77,0)
 S KEY=+$$KEY711^EASEZU1("SPINAL CORD INJURY")
"RTN","EASEZPVD",78,0)
 S VDATA=$$GET^EASEZC1(EASDFN,"2^2^57.4") D
"RTN","EASEZPVD",79,0)
 . I (VDATA=-1)!(VDATA="") S VDATA="UNKNOWN" Q
"RTN","EASEZPVD",80,0)
 . I VDATA="NOT APPLICABLE" S VDATA="NO" Q
"RTN","EASEZPVD",81,0)
 . S VDATA="YES"
"RTN","EASEZPVD",82,0)
 S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZPVD",83,0)
 ;IF PURPLE HEART OR NOSE/THROAT RADIUM UNANSWERED, SET TO "UNKNOWN"
"RTN","EASEZPVD",84,0)
 S KEY=+$$KEY711^EASEZU1("PURPLE HEART")
"RTN","EASEZPVD",85,0)
 S VDATA=$G(^TMP("EZDATA",$J,KEY,1,2))
"RTN","EASEZPVD",86,0)
 I (VDATA=-1)!(VDATA="") S ^TMP("EZDATA",$J,KEY,1,2)="UNKNOWN"
"RTN","EASEZPVD",87,0)
 S KEY=+$$KEY711^EASEZU1("NOSE/THROAT RADIUM")
"RTN","EASEZPVD",88,0)
 S X=$$GETCUR^DGNTAPI(EASDFN,"DGNT")
"RTN","EASEZPVD",89,0)
 S VDATA=$E($G(DGNT("INTRP")))
"RTN","EASEZPVD",90,0)
 I (VDATA=-1)!(VDATA="") S VDATA="UNKNOWN"
"RTN","EASEZPVD",91,0)
 I (VDATA'=-1),(VDATA'="") S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZPVD",92,0)
 ;
"RTN","EASEZPVD",93,0)
 ;GET ENROLLMENT DATA
"RTN","EASEZPVD",94,0)
 D I2711^EASEZI(EASDFN,.ENROLL)
"RTN","EASEZPVD",95,0)
 I $D(ENROLL)>1 D
"RTN","EASEZPVD",96,0)
 . S VDATA="" D ENR^EASEZC1(ENROLL(1),.VDATA)
"RTN","EASEZPVD",97,0)
 . Q:VDATA=-1  Q:VDATA=""
"RTN","EASEZPVD",98,0)
 . S ^TMP("EZDATA",$J,C2711,1,2)=VDATA
"RTN","EASEZPVD",99,0)
 ;
"RTN","EASEZPVD",100,0)
 ;GET DATA FROM FILES 408.12, 408.13, 408.21, AND 408.22
"RTN","EASEZPVD",101,0)
 D V408^EASEZPV2(EASDFN,EASMTIEN)
"RTN","EASEZPVD",102,0)
 ;
"RTN","EASEZPVD",103,0)
 ;GET RACE DATA
"RTN","EASEZPVD",104,0)
 D I202^EASEZI(EASDFN,.RACE)
"RTN","EASEZPVD",105,0)
 I $D(RACE)>1 D
"RTN","EASEZPVD",106,0)
 . N SBIEN
"RTN","EASEZPVD",107,0)
 . S X=0 F  S X=$O(RACE(X)) Q:'X  D
"RTN","EASEZPVD",108,0)
 . . S SBIEN=$P(RACE(X),";",2)
"RTN","EASEZPVD",109,0)
 . . S VDATA=$$GET1^DIQ(2.02,SBIEN_","_EASDFN,.01)
"RTN","EASEZPVD",110,0)
 . . Q:VDATA=-1  Q:VDATA=""
"RTN","EASEZPVD",111,0)
 . . S KEY=+$$KEY711^EASEZU1("APPLICANT RACE - "_VDATA)
"RTN","EASEZPVD",112,0)
 . . S ^TMP("EZDATA",$J,KEY,1,2)="YES"
"RTN","EASEZPVD",113,0)
 ;
"RTN","EASEZPVD",114,0)
 ;GET ETHNICITY DATA
"RTN","EASEZPVD",115,0)
 D I206^EASEZI(EASDFN,.ETHNC)
"RTN","EASEZPVD",116,0)
 I $D(ETHNC)>1 D
"RTN","EASEZPVD",117,0)
 . N SBIEN
"RTN","EASEZPVD",118,0)
 . S X=0 F  S X=$O(ETHNC(X)) Q:'X  D
"RTN","EASEZPVD",119,0)
 . . S SBIEN=$P(ETHNC(X),";",2)
"RTN","EASEZPVD",120,0)
 . . S VDATA=$$GET1^DIQ(2.06,SBIEN_","_EASDFN,.01)
"RTN","EASEZPVD",121,0)
 . . Q:VDATA=-1  Q:VDATA=""
"RTN","EASEZPVD",122,0)
 . . Q:$E(VDATA,1,8)="DECLINED"
"RTN","EASEZPVD",123,0)
 . . I VDATA="HISPANIC OR LATINO" S VDATA="YES"
"RTN","EASEZPVD",124,0)
 . . I $E(VDATA,1,3)="NOT" S VDATA="NO"
"RTN","EASEZPVD",125,0)
 . . I $E(VDATA,1,3)="UNK" S VDATA="UNKNOWN"
"RTN","EASEZPVD",126,0)
 . . S KEY=+$$KEY711^EASEZU1("APPLICANT SPANISH, HISPANIC, OR LATIN")
"RTN","EASEZPVD",127,0)
 . . S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZPVD",128,0)
 ;
"RTN","EASEZPVD",129,0)
 ;GET INSURANCE DATA
"RTN","EASEZPVD",130,0)
 D INSUR^EASEZPVI(EASDFN)
"RTN","EASEZPVD",131,0)
 Q
"RTN","EASEZPVI")
0^31^B19722232
"RTN","EASEZPVI",1,0)
EASEZPVI ;ALB/AMA,ERC; GATHER VISTA INSURANCE DATA TO PRINT FROM DG OPTIONS ; 06 Jul 2005  1:45 PM
"RTN","EASEZPVI",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**57,70**;Mar 15, 2001;Build 26
"RTN","EASEZPVI",3,0)
 ;
"RTN","EASEZPVI",4,0)
 Q
"RTN","EASEZPVI",5,0)
 ;
"RTN","EASEZPVI",6,0)
INSUR(EASDFN) ;GET INSURANCE DATA
"RTN","EASEZPVI",7,0)
 ;   INPUT:
"RTN","EASEZPVI",8,0)
 ;      EASDFN - POINTER TO THE PATIENT FILE
"RTN","EASEZPVI",9,0)
 ;
"RTN","EASEZPVI",10,0)
 ;IF THEY EXIST, FIND INSURANCE COMPANY NAME(S), ADDRESS,
"RTN","EASEZPVI",11,0)
 ;CITY, STATE, ZIP, PHONE, GROUP CODE(S), POLICY NUMBER(S),
"RTN","EASEZPVI",12,0)
 ;NAME(S) OF INSURED, MEDICARE PART A/B, AND EFFECTIVE DATE(S)
"RTN","EASEZPVI",13,0)
 ;
"RTN","EASEZPVI",14,0)
 N KEY,VDATA,MULTIPLE,INDA,IENS,INSUR,INSORT,FLD,TYPE,IEN,INPTR,NAME
"RTN","EASEZPVI",15,0)
 N STREET,CITY,STPTR,STATE,ZIP,PHONE,GRPCD,POLNO,INNAME,KEYNM,M,CAT
"RTN","EASEZPVI",16,0)
 S KEY=+$$KEY711^EASEZU1("APPLICANT HAS INSURANCE")
"RTN","EASEZPVI",17,0)
 S VDATA=$$GET^EASEZC1(EASDFN,"2^2^.3192")
"RTN","EASEZPVI",18,0)
 I (VDATA=-1)!(VDATA="") S ^TMP("EZDATA",$J,KEY,1,2)="UNKNOWN"
"RTN","EASEZPVI",19,0)
 I (VDATA'=-1),(VDATA'="") S ^TMP("EZDATA",$J,KEY,1,2)=VDATA
"RTN","EASEZPVI",20,0)
 Q:VDATA'="YES"
"RTN","EASEZPVI",21,0)
 ;
"RTN","EASEZPVI",22,0)
 S MULTIPLE=0
"RTN","EASEZPVI",23,0)
 S INDA=0 F  S INDA=$O(^DPT(EASDFN,.312,INDA)) Q:'INDA  D
"RTN","EASEZPVI",24,0)
 . D GETS^DIQ(2.312,INDA_","_EASDFN,"**","IE","INSUR")
"RTN","EASEZPVI",25,0)
 S IENS="" F  S IENS=$O(INSUR(2.312,IENS)) Q:IENS=""  D
"RTN","EASEZPVI",26,0)
 . S FLD=0 F  S FLD=$O(INSUR(2.312,IENS,FLD)) Q:'FLD  D
"RTN","EASEZPVI",27,0)
 . . F TYPE="E","I" S INSORT(2.312,+IENS,FLD,TYPE)=$G(INSUR(2.312,IENS,FLD,TYPE))
"RTN","EASEZPVI",28,0)
 K INSUR
"RTN","EASEZPVI",29,0)
 S IEN=0 F  S IEN=$O(INSORT(2.312,IEN)) Q:'IEN  D
"RTN","EASEZPVI",30,0)
 . Q:'$G(INSORT(2.312,IEN,.18,"I"))
"RTN","EASEZPVI",31,0)
 . S INPTR=INSORT(2.312,IEN,.18,"I")
"RTN","EASEZPVI",32,0)
 . Q:$$GET1^DIQ(355.3,INPTR,.11,"I")   ;INACTIVE FLAG
"RTN","EASEZPVI",33,0)
 . I DT'>$G(INSORT(2.312,IEN,3,"I")) Q   ;INSUR EXPIRATION DATE
"RTN","EASEZPVI",34,0)
 . S NAME=$G(INSORT(2.312,IEN,.18,"E"))
"RTN","EASEZPVI",35,0)
 . S STREET=$$GET1^DIQ(36,INPTR,.111),CITY=$$GET1^DIQ(36,INPTR,.114)
"RTN","EASEZPVI",36,0)
 . S STPTR=$$GET1^DIQ(36,INPTR,.115,"I"),STATE=$$GET1^DIQ(5,STPTR,1)
"RTN","EASEZPVI",37,0)
 . S ZIP=$$GET1^DIQ(36,INPTR,.116),PHONE=$$GET1^DIQ(36,INPTR,.131)
"RTN","EASEZPVI",38,0)
 . S GRPCD=$$GET1^DIQ(355.3,INPTR,.04),POLNO=$G(INSORT(2.312,IEN,1,"E"))
"RTN","EASEZPVI",39,0)
 . S INNAME=$G(INSORT(2.312,IEN,17,"E"))
"RTN","EASEZPVI",40,0)
 . S MULTIPLE=MULTIPLE+1
"RTN","EASEZPVI",41,0)
 . I MULTIPLE=1 S KEYNM="APPLICANT",M=1
"RTN","EASEZPVI",42,0)
 . E  S KEYNM="OTHER(N)",M=MULTIPLE-1
"RTN","EASEZPVI",43,0)
 . S KEY=+$$KEY711^EASEZU1(KEYNM_" INSURANCE COMPANY")
"RTN","EASEZPVI",44,0)
 . I NAME]"" S ^TMP("EZDATA",$J,KEY,M,2)=NAME
"RTN","EASEZPVI",45,0)
 . S KEY=+$$KEY711^EASEZU1(KEYNM_" INSURANCE ADDRESS")
"RTN","EASEZPVI",46,0)
 . I STREET]"" S ^TMP("EZDATA",$J,KEY,M,2)=STREET
"RTN","EASEZPVI",47,0)
 . S KEY=+$$KEY711^EASEZU1(KEYNM_" INSURANCE CITY")
"RTN","EASEZPVI",48,0)
 . I CITY]"" S ^TMP("EZDATA",$J,KEY,M,2)=CITY
"RTN","EASEZPVI",49,0)
 . S KEY=+$$KEY711^EASEZU1(KEYNM_" INSURANCE STATE")
"RTN","EASEZPVI",50,0)
 . I STATE]"" S ^TMP("EZDATA",$J,KEY,M,2)=STATE
"RTN","EASEZPVI",51,0)
 . S KEY=+$$KEY711^EASEZU1(KEYNM_" INSURANCE ZIP")
"RTN","EASEZPVI",52,0)
 . I ZIP]"" S ^TMP("EZDATA",$J,KEY,M,2)=ZIP
"RTN","EASEZPVI",53,0)
 . S KEY=+$$KEY711^EASEZU1(KEYNM_" INSURANCE PHONE")
"RTN","EASEZPVI",54,0)
 . I PHONE]"" S ^TMP("EZDATA",$J,KEY,M,2)=PHONE
"RTN","EASEZPVI",55,0)
 . S KEY=+$$KEY711^EASEZU1(KEYNM_" INSURANCE GROUP CODE")
"RTN","EASEZPVI",56,0)
 . I GRPCD]"" S ^TMP("EZDATA",$J,KEY,M,2)=GRPCD
"RTN","EASEZPVI",57,0)
 . S KEY=+$$KEY711^EASEZU1(KEYNM_" INSURANCE POLICY HOLDER")
"RTN","EASEZPVI",58,0)
 . I INNAME]"" S ^TMP("EZDATA",$J,KEY,M,2)=INNAME
"RTN","EASEZPVI",59,0)
 . S KEY=+$$KEY711^EASEZU1(KEYNM_" INSURANCE POLICY NUMBER")
"RTN","EASEZPVI",60,0)
 . I POLNO]"" S ^TMP("EZDATA",$J,KEY,M,2)=POLNO
"RTN","EASEZPVI",61,0)
 . ;
"RTN","EASEZPVI",62,0)
 . I $$GET^EASEZC1(INPTR,"355.3^355.3^.09")="MEDICARE (M)" D
"RTN","EASEZPVI",63,0)
 . . S CAT=$$GET^EASEZC1(INPTR,"355.3^355.3^.14")
"RTN","EASEZPVI",64,0)
 . . I (CAT'="MEDICARE PART A"),(CAT'="MEDICARE PART B") Q
"RTN","EASEZPVI",65,0)
 . . S KEY=+$$KEY711^EASEZU1(CAT)
"RTN","EASEZPVI",66,0)
 . . S ^TMP("EZDATA",$J,KEY,M,2)="YES"
"RTN","EASEZPVI",67,0)
 . . S VDATA=$$GET^EASEZC1(EASDFN_";"_INDA,"2^2.312^8")
"RTN","EASEZPVI",68,0)
 . . Q:VDATA=""  Q:VDATA=-1
"RTN","EASEZPVI",69,0)
 . . S KEY=+$$KEY711^EASEZU1(CAT_" EFFECTIVE DATE")
"RTN","EASEZPVI",70,0)
 . . S ^TMP("EZDATA",$J,KEY,M,2)=VDATA
"RTN","EASEZPVI",71,0)
 ;
"RTN","EASEZPVI",72,0)
 Q
"RTN","EASEZPVI",73,0)
 ;
"RTN","EASEZPVI",74,0)
I408(EASDFN,MTDT,EASARRAY) ;retrieve ien(s) to files #408.12,#408.13,#408.21,#408.22
"RTN","EASEZPVI",75,0)
 ;   Modified from I408^EASEZI, called from V408^EASEZPV2
"RTN","EASEZPVI",76,0)
 ;input EASDFN    = ien to #2
"RTN","EASEZPVI",77,0)
 ;        MTDT    = Means Test date
"RTN","EASEZPVI",78,0)
 ;output EASARRAY = ien(s) to files; passed by reference
"RTN","EASEZPVI",79,0)
 ;   array(408,"V",1) = ien_#408.12^ien_#408.13^ien_#408.21^ien#408.22 ;veteran data
"RTN","EASEZPVI",80,0)
 ;   array(408,"S",1) = ien_#408.12^ien_#408.13^ien_#408.21^ien#408.22 ;spouse data
"RTN","EASEZPVI",81,0)
 ;   array(408,"C",multiple) = ien_#408.12^ien_#408.13^ien_#408.21^ien#408.22 ;child data
"RTN","EASEZPVI",82,0)
 ;where ien_#408.13 = ien;global_root
"RTN","EASEZPVI",83,0)
 ;
"RTN","EASEZPVI",84,0)
 N Y,%F,X,%DT,MTDATE
"RTN","EASEZPVI",85,0)
 N SUB1,SUB2,INCYR,DGINC,DGREL,DGINR
"RTN","EASEZPVI",86,0)
 N I21,I22
"RTN","EASEZPVI",87,0)
 ;
"RTN","EASEZPVI",88,0)
 Q:'EASDFN
"RTN","EASEZPVI",89,0)
 S Y=MTDT,%F=5,X=$$FMTE^XLFDT(Y,%F),X=+$P(X,"/",3)-1,%DT="P"
"RTN","EASEZPVI",90,0)
 D ^%DT S MTDATE=Y
"RTN","EASEZPVI",91,0)
 ;retrieve all associated 408 records; refer to api call for docu
"RTN","EASEZPVI",92,0)
 I MTDT D ALL^DGMTU21(EASDFN,"VSC",MTDT)
"RTN","EASEZPVI",93,0)
 ;massage "V" and "S" nodes for clear use in for loop below
"RTN","EASEZPVI",94,0)
 S:$D(DGINC("V")) DGINC("V",1)=DGINC("V")
"RTN","EASEZPVI",95,0)
 S:$D(DGINR("V")) DGINR("V",1)=DGINR("V")
"RTN","EASEZPVI",96,0)
 S:$D(DGREL("V")) DGREL("V",1)=DGREL("V")
"RTN","EASEZPVI",97,0)
 S:$D(DGINC("S")) DGINC("S",1)=DGINC("S")
"RTN","EASEZPVI",98,0)
 S:$D(DGINR("S")) DGINR("S",1)=DGINR("S")
"RTN","EASEZPVI",99,0)
 S:$D(DGREL("S")) DGREL("S",1)=DGREL("S")
"RTN","EASEZPVI",100,0)
 ;
"RTN","EASEZPVI",101,0)
 F SUB1="V","S","C" D
"RTN","EASEZPVI",102,0)
 . Q:'$D(DGREL(SUB1))
"RTN","EASEZPVI",103,0)
 . S SUB2=0
"RTN","EASEZPVI",104,0)
 . F  S SUB2=$O(DGREL(SUB1,SUB2)) Q:'SUB2  D
"RTN","EASEZPVI",105,0)
 . . S EASARRAY(408,SUB1,SUB2)=DGREL(SUB1,SUB2)
"RTN","EASEZPVI",106,0)
 . . S I21=$G(DGINC(SUB1,SUB2))  ; 408.21 ien
"RTN","EASEZPVI",107,0)
 . . Q:'I21
"RTN","EASEZPVI",108,0)
 . . S INCYR=$$GET1^DIQ(408.21,I21_",",.01,"I")
"RTN","EASEZPVI",109,0)
 . . ;NOTE: The following two quit conditions are probably not
"RTN","EASEZPVI",110,0)
 . . ;      not necessary given the arrays being returned from
"RTN","EASEZPVI",111,0)
 . . ;      ALL^DGMTU21
"RTN","EASEZPVI",112,0)
 . . Q:'MTDT
"RTN","EASEZPVI",113,0)
 . . Q:(INCYR<MTDATE)
"RTN","EASEZPVI",114,0)
 . . S I22=$G(DGINR(SUB1,SUB2))  ;408.22 ien
"RTN","EASEZPVI",115,0)
 . . Q:$G(^DGMT(408.22,+I22,"MT"))=""
"RTN","EASEZPVI",116,0)
 . . ;
"RTN","EASEZPVI",117,0)
 . . S EASARRAY(408,SUB1,SUB2)=EASARRAY(408,SUB1,SUB2)_U_I21_U_I22
"RTN","EASEZPVI",118,0)
 Q
"RTN","EASEZPVI",119,0)
 ;
"RTN","EASEZRP1")
0^24^B38490607
"RTN","EASEZRP1",1,0)
EASEZRP1 ;ALB/AMA - Print 1010EZR ; 8/1/08 1:28pm
"RTN","EASEZRP1",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**57,70**;Mar 15, 2001;Build 26
"RTN","EASEZRP1",3,0)
 ;
"RTN","EASEZRP1",4,0)
EN(EALNE,EAINFO) ;Entry point for VA 10-10EZR, page 1
"RTN","EASEZRP1",5,0)
 ; Called from EN^EASEZRPF
"RTN","EASEZRP1",6,0)
 N EASD,X
"RTN","EASEZRP1",7,0)
 ;
"RTN","EASEZRP1",8,0)
 S EASD=$NA(^TMP("EASEZR",$J,1))
"RTN","EASEZRP1",9,0)
 D HDRMAIN^EASEZRPF(.EALNE)
"RTN","EASEZRP1",10,0)
 D DEM
"RTN","EASEZRP1",11,0)
 D II
"RTN","EASEZRP1",12,0)
 D EI
"RTN","EASEZRP1",13,0)
 ;
"RTN","EASEZRP1",14,0)
 D FT^EASEZRPF(.EALNE,.EAINFO)
"RTN","EASEZRP1",15,0)
 S EAINFO("VET")=@EASD@(2),EAINFO("SSN")=@EASD@(5)
"RTN","EASEZRP1",16,0)
 Q
"RTN","EASEZRP1",17,0)
 ;
"RTN","EASEZRP1",18,0)
DEM ; Print VA 10-10EZR Section I, Demographic information
"RTN","EASEZRP1",19,0)
 ;
"RTN","EASEZRP1",20,0)
 W !?50,"SECTION I - GENERAL INFORMATION"
"RTN","EASEZRP1",21,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",22,0)
 W !?18,"Federal law provides criminal penalties, including a fine and/or imprisonment for up to 5 years,"
"RTN","EASEZRP1",23,0)
 W !?20,"for concealing a material fact or making a materially false statement.  (See 18 U.S.C. 1001)"
"RTN","EASEZRP1",24,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",25,0)
 ;
"RTN","EASEZRP1",26,0)
 W !,"1. VETERAN'S NAME (Last, First, Middle Name)",?66,"|2. OTHER NAMES USED"
"RTN","EASEZRP1",27,0)
 W !?3,@EASD@(2),?66,"|   ",@EASD@(3)
"RTN","EASEZRP1",28,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",29,0)
 ;
"RTN","EASEZRP1",30,0)
 W !,"3. GENDER",?20,"|4. SOCIAL SECURITY NUMBER",?55,"|5. DATE OF BIRTH (mm/dd/yyyy)",?95,"|6. CURRENT MARITAL STATUS"
"RTN","EASEZRP1",31,0)
 W !?3,@EASD@(4),?20,"|   ",@EASD@(5),?55,"|   ",@EASD@(7),?95,"|   ",@EASD@(12)
"RTN","EASEZRP1",32,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",33,0)
 ;
"RTN","EASEZRP1",34,0)
 ;EAS*1.0*70 - CHECK FOR FOREIGN ADDRESS
"RTN","EASEZRP1",35,0)
 I $G(@EASD@("9H"))="UNITED STATES" D  I 1  ;Use domestic address field labels
"RTN","EASEZRP1",36,0)
 . W !,"7. PERMANENT ADDRESS (Street)",?42,"|7A. CITY",?66,"|7B. STATE",?105,"|7C. ZIP"
"RTN","EASEZRP1",37,0)
 . W !?3,@EASD@("9A"),?42,"|    ",@EASD@("9B"),?66,"|    ",@EASD@("9C"),?105,"|    ",@EASD@("9D")
"RTN","EASEZRP1",38,0)
 . W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",39,0)
 . ;
"RTN","EASEZRP1",40,0)
 . W !,"7D. COUNTY",?34,"|7E. HOME TELEPHONE NUMBER (Include area code)",?82,"|7F. E-MAIL ADDRESS"
"RTN","EASEZRP1",41,0)
 . W !?4,@EASD@("9E"),?34,"|    ",@EASD@(10),?82,"|    ",@EASD@("11A")
"RTN","EASEZRP1",42,0)
 ;
"RTN","EASEZRP1",43,0)
 E  D  ;Use foreign address field labels
"RTN","EASEZRP1",44,0)
 . W !,"7. PERMANENT ADDRESS (Street)",?42,"|7A. CITY",?66,"|7B. PROVINCE",?105,"|7C. POSTAL CODE"
"RTN","EASEZRP1",45,0)
 . W !?3,@EASD@("9A"),?42,"|    ",@EASD@("9B"),?66,"|    ",@EASD@("9F"),?105,"|    ",@EASD@("9G")
"RTN","EASEZRP1",46,0)
 . W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",47,0)
 . ;
"RTN","EASEZRP1",48,0)
 . W !,"7D. COUNTRY",?34,"|7E. HOME TELEPHONE NUMBER (Include area code)",?82,"|7F. E-MAIL ADDRESS"
"RTN","EASEZRP1",49,0)
 . W !?4,@EASD@("9H"),?34,"|    ",@EASD@(10),?82,"|    ",@EASD@("11A")
"RTN","EASEZRP1",50,0)
 ;
"RTN","EASEZRP1",51,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",52,0)
 ;
"RTN","EASEZRP1",53,0)
 W !,"7G. CELLULAR TELEPHONE NUMBER (Include area code)",?66,"|7H. PAGER NUMBER (Include area code)"
"RTN","EASEZRP1",54,0)
 W !?4,@EASD@("11G"),?66,"|    ",@EASD@("11H")
"RTN","EASEZRP1",55,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",56,0)
 ;
"RTN","EASEZRP1",57,0)
 W !,"8. NAME, ADDRESS AND RELATIONSHIP OF NEXT OF KIN",?83,"|8A. NEXT OF KIN'S HOME TELEPHONE NUMBER"
"RTN","EASEZRP1",58,0)
 W !?3,$P(@EASD@("19A"),U)," - ",$P(@EASD@("19A"),U,4),?83,"|    (Include area code)   ",@EASD@("19B")
"RTN","EASEZRP1",59,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! F X=1:1:84 W " "
"RTN","EASEZRP1",60,0)
 W $E(EALNE("UL"),1,48)
"RTN","EASEZRP1",61,0)
 W !?3,$P(@EASD@("19A"),U,2),?83,"|8B. NEXT OF KIN'S WORK TELEPHONE NUMBER"
"RTN","EASEZRP1",62,0)
 W !?3,$P(@EASD@("19A"),U,3),?83,"|    (Include area code)   ",@EASD@("19C")
"RTN","EASEZRP1",63,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",64,0)
 ;
"RTN","EASEZRP1",65,0)
 W !,"9. NAME, ADDRESS AND RELATIONSHIP OF EMERGENCY CONTACT",?83,"|9A. EMERGENCY CONTACT'S HOME TELEPHONE NUMBER"
"RTN","EASEZRP1",66,0)
 W !?3,$P(@EASD@("20A"),U)," - ",$P(@EASD@("20A"),U,4),?83,"|    (Include area code)   ",@EASD@("20B")
"RTN","EASEZRP1",67,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! F X=1:1:84 W " "
"RTN","EASEZRP1",68,0)
 W $E(EALNE("UL"),1,48)
"RTN","EASEZRP1",69,0)
 W !?3,$P(@EASD@("20A"),U,2),?83,"|9B. EMERGENCY CONTACT'S WORK TELEPHONE NUMBER"
"RTN","EASEZRP1",70,0)
 W !?3,$P(@EASD@("20A"),U,3),?83,"|    (Include area code)   ",@EASD@("20C")
"RTN","EASEZRP1",71,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",72,0)
 ;
"RTN","EASEZRP1",73,0)
 W !,"10. INDIVIDUAL TO RECEIVE POSSESSION OF YOUR PERSONAL PROPERTY LEFT ON PREMISES UNDER VA CONTROL AFTER YOUR DEPARTURE OR AT THE"
"RTN","EASEZRP1",74,0)
 W !?4,"TIME OF DEATH.  Note: This does not constitute a will or transfer of title.   ",@EASD@(21)
"RTN","EASEZRP1",75,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",76,0)
 Q
"RTN","EASEZRP1",77,0)
 ;
"RTN","EASEZRP1",78,0)
II ; Print VA 10-10EZR SECTION II - INSURANCE INFORMATION
"RTN","EASEZRP1",79,0)
 ;
"RTN","EASEZRP1",80,0)
 W !?23,"SECTION II - INSURANCE INFORMATION  (Use a separate sheet for additional information)"
"RTN","EASEZRP1",81,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",82,0)
 ;
"RTN","EASEZRP1",83,0)
 W !,"1. ARE YOU COVERED BY HEALTH INSURANCE,",?49,"|2. HEALTH INSURANCE COMPANY NAME, ADDRESS AND TELEPHONE NUMBER"
"RTN","EASEZRP1",84,0)
 W !?3,"INCLUDING COVERAGE THROUGH A SPOUSE",?49,"|   ",@EASD@("17A")
"RTN","EASEZRP1",85,0)
 W !?3,"OR ANOTHER PERSON?   ",@EASD@(17),?49,"|   "
"RTN","EASEZRP1",86,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W $E(EALNE("UL"),1,49)
"RTN","EASEZRP1",87,0)
 ;
"RTN","EASEZRP1",88,0)
 W !,"3. NAME OF POLICY HOLDER",?49,"|   ",$P(@EASD@("17E"),U,2)
"RTN","EASEZRP1",89,0)
 W !?3,@EASD@("17B"),?49,"|   ",@EASD@("17I")
"RTN","EASEZRP1",90,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",91,0)
 ;
"RTN","EASEZRP1",92,0)
 W !,"4. POLICY NUMBER",?41,"|5. GROUP CODE",?70,"|6. ARE YOU ELIGIBLE FOR MEDICAID?"
"RTN","EASEZRP1",93,0)
 W !?3,@EASD@("17C"),?41,"|   ",@EASD@("17D"),?70,"|   ",@EASD@("14J")
"RTN","EASEZRP1",94,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",95,0)
 ;
"RTN","EASEZRP1",96,0)
 W !,"7. ARE YOU ENROLLED IN MEDICARE HOSPITAL INSURANCE PART A?",?70,"|7A. EFFECTIVE DATE (mm/dd/yyyy)"
"RTN","EASEZRP1",97,0)
 W !?3,@EASD@("14K"),?70,"|    ",@EASD@("14K1")
"RTN","EASEZRP1",98,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",99,0)
 ;
"RTN","EASEZRP1",100,0)
 W !,"8. ARE YOU ENROLLED IN MEDICARE HOSPITAL INSURANCE PART B?",?70,"|8A. EFFECTIVE DATE (mm/dd/yyyy)"
"RTN","EASEZRP1",101,0)
 W !?3,@EASD@("14L"),?70,"|    ",@EASD@("14L1")
"RTN","EASEZRP1",102,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",103,0)
 ;
"RTN","EASEZRP1",104,0)
 W !,"9. NAME EXACTLY AS IT APPEARS ON YOUR MEDICARE CARD",?70,"|10. MEDICARE CLAIM NUMBER"
"RTN","EASEZRP1",105,0)
 W !?3,@EASD@("14N"),?70,"|    ",@EASD@("14M")
"RTN","EASEZRP1",106,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",107,0)
 Q
"RTN","EASEZRP1",108,0)
 ;
"RTN","EASEZRP1",109,0)
EI ; Print VA 10-10EZR SECTION III - EMPLOYMENT INFORMATION
"RTN","EASEZRP1",110,0)
 ;
"RTN","EASEZRP1",111,0)
 W !?48,"SECTION III - EMPLOYMENT INFORMATION"
"RTN","EASEZRP1",112,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",113,0)
 ;
"RTN","EASEZRP1",114,0)
 W !,"1. VETERAN'S EMPLOYMENT STATUS",?47,"|1A. COMPANY NAME, ADDRESS AND TELEPHONE NUMBER"
"RTN","EASEZRP1",115,0)
 W !?3,$P(@EASD@("15A"),U),?47,"|    ",$P(@EASD@("15B"),U)
"RTN","EASEZRP1",116,0)
 W !,"Date of retirement (mm/dd/yyyy)   ",$P(@EASD@("15A"),U,2),?47,"|    ",$P(@EASD@("15B"),U,2)
"RTN","EASEZRP1",117,0)
 W !,"If employed or retired, complete item 1A",?47,"|    ",$P(@EASD@("15B"),U,3)
"RTN","EASEZRP1",118,0)
 W !?47,"    ",$P(@EASD@("15B"),U,4)
"RTN","EASEZRP1",119,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",120,0)
 ;
"RTN","EASEZRP1",121,0)
 W !,"2. SPOUSE'S EMPLOYMENT STATUS",?47,"|2A. COMPANY NAME, ADDRESS AND TELEPHONE NUMBER"
"RTN","EASEZRP1",122,0)
 W !?3,$P(@EASD@("16A"),U),?47,"|    ",$P(@EASD@("16B"),U)
"RTN","EASEZRP1",123,0)
 W !,"Date of retirement (mm/dd/yyyy)   ",$P(@EASD@("16A"),U,2),?47,"|    ",$P(@EASD@("16B"),U,2)
"RTN","EASEZRP1",124,0)
 W !,"If employed or retired, complete item 2A",?47,"|    ",$P(@EASD@("16B"),U,3)
"RTN","EASEZRP1",125,0)
 W !?47,"|    ",$P(@EASD@("16B"),U,4)
"RTN","EASEZRP1",126,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP1",127,0)
 Q
"RTN","EASEZRP3")
0^5^B28501959
"RTN","EASEZRP3",1,0)
EASEZRP3 ;ALB/AMA - Print 1010EZR, Cont. ; 8/1/08 1:28pm
"RTN","EASEZRP3",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**57,70**;Mar 15, 2001;Build 26
"RTN","EASEZRP3",3,0)
 ;
"RTN","EASEZRP3",4,0)
 Q
"RTN","EASEZRP3",5,0)
 ;
"RTN","EASEZRP3",6,0)
EN(EALNE,EAINFO,EASDG) ; Entry point to print Page 3, called from EN^EASEZRPF
"RTN","EASEZRP3",7,0)
 ;  Input
"RTN","EASEZRP3",8,0)
 ;     EALNE  - Array of line formats for output
"RTN","EASEZRP3",9,0)
 ;     EAINFO - Application Data array, see SETUP^EASEZRPF
"RTN","EASEZRP3",10,0)
 ;     EASDG  - Flag variable to signify request to print from DG options
"RTN","EASEZRP3",11,0)
 ;
"RTN","EASEZRP3",12,0)
 N EASIGN,EASD
"RTN","EASEZRP3",13,0)
 ;
"RTN","EASEZRP3",14,0)
 I $$GET1^DIQ(712,EAINFO("EASAPP")_",",4)]"" D
"RTN","EASEZRP3",15,0)
 . S EASIGN=$$GET1^DIQ(712,EAINFO("EASAPP")_",",4.1)
"RTN","EASEZRP3",16,0)
 S EASIGN=$G(EASIGN)
"RTN","EASEZRP3",17,0)
 ;
"RTN","EASEZRP3",18,0)
 D HDR^EASEZRPF(.EALNE,.EAINFO)
"RTN","EASEZRP3",19,0)
 S EASD=$NA(^TMP("EASEZR",$J,2))
"RTN","EASEZRP3",20,0)
 ;
"RTN","EASEZRP3",21,0)
 D NET
"RTN","EASEZRP3",22,0)
 D CON
"RTN","EASEZRP3",23,0)
 D AOB
"RTN","EASEZRP3",24,0)
 D FT^EASEZRPF(.EALNE,.EAINFO)
"RTN","EASEZRP3",25,0)
 ;
"RTN","EASEZRP3",26,0)
 Q
"RTN","EASEZRP3",27,0)
 ;
"RTN","EASEZRP3",28,0)
NET ;  Print SECTION IX - PREVIOUS CALENDAR YEAR NET WORTH
"RTN","EASEZRP3",29,0)
 ;
"RTN","EASEZRP3",30,0)
 I $G(EASDG),+@EASD@(999) W !!?2,"SECTION IX - PREVIOUS CALENDAR YEAR NET WORTH  (INCOME YEAR:  ",@EASD@(999),")  (Use a separate sheet for additional dependents)"
"RTN","EASEZRP3",31,0)
 E  W !!?38,"SECTION IX - PREVIOUS CALENDAR YEAR NET WORTH  (Use a separate sheet for additional dependents)"
"RTN","EASEZRP3",32,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP3",33,0)
 ;
"RTN","EASEZRP3",34,0)
 W !?78,"|",?84,"VETERAN",?96,"|",?102,"SPOUSE",?114,"|",?120,"CHILD 1"
"RTN","EASEZRP3",35,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP3",36,0)
 ;
"RTN","EASEZRP3",37,0)
 W !,"1. CASH, AMOUNT IN BANK ACCOUNTS (e.g., checking and savings accounts,",?78,"|  $ ",$P(@EASD@("2E1"),U),?96,"|  $ ",$P(@EASD@("2E1"),U,2),?114,"|  $ ",$P(@EASD@("2E1"),U,3)
"RTN","EASEZRP3",38,0)
 W !,"certificates of deposit, individual retirement accounts, stocks and bonds)",?78,"|",?96,"|",?114,"|"
"RTN","EASEZRP3",39,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP3",40,0)
 ;
"RTN","EASEZRP3",41,0)
 W !,"2. MARKET VALUE OF LAND AND BUILDINGS MINUS MORTGAGES AND LIENS (e.g., second",?78,"|  $ ",$P(@EASD@("2E2"),U),?96,"|  $ ",$P(@EASD@("2E2"),U,2),?114,"|  $ ",$P(@EASD@("2E2"),U,3)
"RTN","EASEZRP3",42,0)
 W !,"homes and non-income-producing property.  Do not include your primary home.)",?78,"|",?96,"|",?114,"|"
"RTN","EASEZRP3",43,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP3",44,0)
 ;
"RTN","EASEZRP3",45,0)
 W !,"3. VALUE OF OTHER PROPERTY OR ASSETS (e.g., art, rare coins, collectibles)",?78,"|  $ ",$P(@EASD@("2E3"),U),?96,"|  $ ",$P(@EASD@("2E3"),U,2),?114,"|  $ ",$P(@EASD@("2E3"),U,3)
"RTN","EASEZRP3",46,0)
 W !,"MINUS THE AMOUNT YOU OWE ON THESE ITEMS.  INCLUDE VALUE OF FARM, RANCH, OR",?78,"|",?96,"|",?114,"|"
"RTN","EASEZRP3",47,0)
 W !,"BUSINESS ASSETS.  Exclude household effects and family vehicles.",?78,"|",?96,"|",?114,"|"
"RTN","EASEZRP3",48,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP3",49,0)
 Q
"RTN","EASEZRP3",50,0)
 ;
"RTN","EASEZRP3",51,0)
CON ;  Print SECTION X - CONSENT TO COPAYMENTS
"RTN","EASEZRP3",52,0)
 ;
"RTN","EASEZRP3",53,0)
 W !?49,"SECTION X - CONSENT TO COPAYMENTS"
"RTN","EASEZRP3",54,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP3",55,0)
 ;
"RTN","EASEZRP3",56,0)
 W !,"If you are a 0% service-connected veteran and do not receive VA monetary benefits or a nonservice-connected veteran (and you are"
"RTN","EASEZRP3",57,0)
 W !,"not an Ex-POW, Purple Heart Recipient, WWI veteran or VA pensioner) and your household income (or combined income and net worth)"
"RTN","EASEZRP3",58,0)
 W !,"exceeds the established threshold, this application will be considered for enrollment, but only if you agree to pay VA copayments"
"RTN","EASEZRP3",59,0)
 W !,"for treatment of your nonservice-connected conditions.  If you are such a veteran, by signing this application you are agreeing"
"RTN","EASEZRP3",60,0)
 W !,"to pay the applicable VA copayment as required by law.",!
"RTN","EASEZRP3",61,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP3",62,0)
 Q
"RTN","EASEZRP3",63,0)
 ;
"RTN","EASEZRP3",64,0)
AOB ;  Print SECTION XI - ASSIGNMENT OF BENEFITS
"RTN","EASEZRP3",65,0)
 ;
"RTN","EASEZRP3",66,0)
 W !?48,"SECTION XI - ASSIGNMENT OF BENEFITS"
"RTN","EASEZRP3",67,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP3",68,0)
 ;
"RTN","EASEZRP3",69,0)
 W !,"I understand that pursuant to 38 U.S.C. Section 1729, VA is authorized to recover or collect from my health plan (HP) for the"
"RTN","EASEZRP3",70,0)
 W !,"reasonable charges of nonservice-connected VA medical care or services furnished or provided to me.  I hereby authorize payment"
"RTN","EASEZRP3",71,0)
 W !,"directly to VA from any HP under which I am covered (including coverage provided under my spouse's HP) that is responsible for"
"RTN","EASEZRP3",72,0)
 W !,"payment of the charges for my medical care, including benefits otherwise payable to me or my spouse.",!
"RTN","EASEZRP3",73,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP3",74,0)
 ;
"RTN","EASEZRP3",75,0)
 W !?11,"ALL APPLICANTS MUST SIGN AND DATE THIS FORM.  REFER TO INSTRUCTIONS ON WHO CAN SIGN ON BEHALF OF THE VETERAN.",!
"RTN","EASEZRP3",76,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP3",77,0)
 ;
"RTN","EASEZRP3",78,0)
 W !,"SIGNATURE OF APPLICANT",?90,"| DATE (mm/dd/yyyy)"
"RTN","EASEZRP3",79,0)
 I $G(EASIGN)]"" W !,"SIGNATURE OF APPLICANT OR APPLICANT'S REPRESENTATIVE HAS BEEN VERIFIED",?90,"| ",EASIGN,!?90,"|"
"RTN","EASEZRP3",80,0)
 E  W !?90,"|",!?90,"|"
"RTN","EASEZRP3",81,0)
 W ?131,$C(13) W:EALNE("ULC")="-" ! W EALNE("UL")
"RTN","EASEZRP3",82,0)
 Q
"RTN","EASEZRPU")
0^25^B46765829
"RTN","EASEZRPU",1,0)
EASEZRPU ;ALB/AMA - Print utility for 10-10EZR ; 8/1/08 1:28pm
"RTN","EASEZRPU",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**57,70**;Mar 15, 2001;Build 26
"RTN","EASEZRPU",3,0)
 ;
"RTN","EASEZRPU",4,0)
 Q
"RTN","EASEZRPU",5,0)
 ;
"RTN","EASEZRPU",6,0)
PAGE1 ;This function retrieves and formats the page 1 application data from
"RTN","EASEZRPU",7,0)
 ;the 1010EZ Holding File, #712, for the printed version of the VistA
"RTN","EASEZRPU",8,0)
 ;10-10EZR form.  If the holding file entry has not been accepted, and
"RTN","EASEZRPU",9,0)
 ;a vista entry is available, the vista entry is printed.
"RTN","EASEZRPU",10,0)
 ;   Called from EN^EASEZRPF
"RTN","EASEZRPU",11,0)
 ;
"RTN","EASEZRPU",12,0)
 ;The ^TMP("EZRTEMP") global is built in SETUP^EASEZRPF and
"RTN","EASEZRPU",13,0)
 ;remains until the printed form is complete.
"RTN","EASEZRPU",14,0)
 ; Variables
"RTN","EASEZRPU",15,0)
 ;   ZDATA   - references TMP global for output data
"RTN","EASEZRPU",16,0)
 ;   EZDATA  - references available data from 1010EZ holding file
"RTN","EASEZRPU",17,0)
 ;   EASTR   - Temporary String data variable
"RTN","EASEZRPU",18,0)
 ;   EAX,EAY - Temporary data variables
"RTN","EASEZRPU",19,0)
 ;   EACT    - Temporary city variable
"RTN","EASEZRPU",20,0)
 ;
"RTN","EASEZRPU",21,0)
 ;THIS ROUTINE WAS COPIED FROM EASEZP6U, AND MODIFIED TO
"RTN","EASEZRPU",22,0)
 ;PROCESS JUST THE DATA ELEMENTS NEEDED FOR THE EZR FORM
"RTN","EASEZRPU",23,0)
 ;
"RTN","EASEZRPU",24,0)
 N ZDATA,EZDATA,EASTR,EAX,EAY,EACT
"RTN","EASEZRPU",25,0)
 ;
"RTN","EASEZRPU",26,0)
 S ZDATA=$NA(^TMP("EASEZR",$J,1))
"RTN","EASEZRPU",27,0)
 S EZDATA=$NA(^TMP("EZRTEMP",$J,"I",1))
"RTN","EASEZRPU",28,0)
 K @ZDATA
"RTN","EASEZRPU",29,0)
 ;
"RTN","EASEZRPU",30,0)
 S @ZDATA@(2)=$$PROCESS(2.1)                 ;Vet's name
"RTN","EASEZRPU",31,0)
 S @ZDATA@(3)=$E($$PROCESS("3."),1,35)       ;Other names used
"RTN","EASEZRPU",32,0)
 S @ZDATA@(4)=$$PROCESS("4.")                ;Gender
"RTN","EASEZRPU",33,0)
 ;
"RTN","EASEZRPU",34,0)
 S @ZDATA@(5)=$$PROCESS("5.")                ;SSN
"RTN","EASEZRPU",35,0)
 S @ZDATA@(7)=$$PROCESS("7.")                ;Date of birth
"RTN","EASEZRPU",36,0)
 S @ZDATA@("9A")=$E($$PROCESS("9A."),1,35)   ;Address
"RTN","EASEZRPU",37,0)
 S @ZDATA@("9B")=$E($$PROCESS("9B."),1,32)   ;City
"RTN","EASEZRPU",38,0)
 S @ZDATA@("9C")=$$PROCESS("9C.")            ;State
"RTN","EASEZRPU",39,0)
 S @ZDATA@("9D")=$$PROCESS("9D.")            ;Zip
"RTN","EASEZRPU",40,0)
 S @ZDATA@("9E")=$$PROCESS("9E.")            ;County
"RTN","EASEZRPU",41,0)
 S @ZDATA@("9F")=$$PROCESS("9F.")            ;Province    - EAS*1.0*70
"RTN","EASEZRPU",42,0)
 S @ZDATA@("9G")=$$PROCESS("9G.")            ;Postal Code - EAS*1.0*70
"RTN","EASEZRPU",43,0)
 S @ZDATA@("9H")=$$PROCESS("9H.")            ;Country     - EAS*1.0*70
"RTN","EASEZRPU",44,0)
 S @ZDATA@(10)=$$PROCESS("10.1")             ;Home phone
"RTN","EASEZRPU",45,0)
 S @ZDATA@("11A")=$$PROCESS("11A.")          ;E-mail
"RTN","EASEZRPU",46,0)
 S @ZDATA@("11G")=$$PROCESS("11A1.")         ;Cell phone number
"RTN","EASEZRPU",47,0)
 S @ZDATA@("11H")=$$PROCESS("11A3.")         ;Pager number
"RTN","EASEZRPU",48,0)
 S @ZDATA@(12)=$$PROCESS("12.")              ;Marital status
"RTN","EASEZRPU",49,0)
 ;
"RTN","EASEZRPU",50,0)
 K EAX
"RTN","EASEZRPU",51,0)
 F EAX="14J","14K","14L" D     ;Medicare eligible, Enrolled in Part A/B?
"RTN","EASEZRPU",52,0)
 . S EAY=$$PROCESS(EAX_".")
"RTN","EASEZRPU",53,0)
 . S @ZDATA@(EAX)=$S(EAY="Y"!(EAY="YES"):"YES",EAY="N"!(EAY="NO"):"NO",EAY="UNKNOWN":"UNKNOWN",1:"")
"RTN","EASEZRPU",54,0)
 ;
"RTN","EASEZRPU",55,0)
 S @ZDATA@("14K1")=$$PROCESS("14K1.")   ;Medicare Part A effective date
"RTN","EASEZRPU",56,0)
 S @ZDATA@("14L1")=$$PROCESS("14L1.")   ;Medicare Part B effective date
"RTN","EASEZRPU",57,0)
 S @ZDATA@("14M")=$$PROCESS("14M.")     ;Medicare claim number
"RTN","EASEZRPU",58,0)
 S @ZDATA@("14N")=$$PROCESS("14N.")     ;Name on Medicare card
"RTN","EASEZRPU",59,0)
 ;
"RTN","EASEZRPU",60,0)
 ;Vet's employment status^Date of retirement
"RTN","EASEZRPU",61,0)
 S @ZDATA@("15A")=$$PROCESS("15A.1")_U_$$PROCESS("15A.2")
"RTN","EASEZRPU",62,0)
 K EAX
"RTN","EASEZRPU",63,0)
 S EAX=$E($$PROCESS("15B.1"),1,30)            ;Company's name
"RTN","EASEZRPU",64,0)
 S EACT="",EACT=$E($$PROCESS("15B.3"),1,30)   ;Company's city
"RTN","EASEZRPU",65,0)
 I EACT]"" S EACT=EACT_", "   ;if there's a city, add comma & space
"RTN","EASEZRPU",66,0)
 ;Company's name^Street^City, State Zip^Phone
"RTN","EASEZRPU",67,0)
 S EAX=EAX_U_$E($$PROCESS("15B.2"),1,30)_U_EACT_$$PROCESS("15B.4")_" "_$E($$PROCESS("15B.5"),1,10)_U_$$PROCESS("15B.6")
"RTN","EASEZRPU",68,0)
 S @ZDATA@("15B")=EAX
"RTN","EASEZRPU",69,0)
 ;
"RTN","EASEZRPU",70,0)
 ;Spouse's employment status^Date of retirement
"RTN","EASEZRPU",71,0)
 S @ZDATA@("16A")=$$PROCESS("16A.1")_U_$$PROCESS("16A.2")
"RTN","EASEZRPU",72,0)
 ;
"RTN","EASEZRPU",73,0)
 K EAX
"RTN","EASEZRPU",74,0)
 S EAX=$E($$PROCESS("16B.1"),1,30)            ;Spouse's company's name
"RTN","EASEZRPU",75,0)
 S EACT="",EACT=$E($$PROCESS("16B.3"),1,30)   ;Spouse's company's city
"RTN","EASEZRPU",76,0)
 I EACT]"" S EACT=EACT_", "    ;if there's a city, add comma & space
"RTN","EASEZRPU",77,0)
 ;Spouse's company's name^Street^City, State Zip^Phone
"RTN","EASEZRPU",78,0)
 S EAX=EAX_U_$E($$PROCESS("16B.2"),1,30)_U_EACT_$$PROCESS("16B.4")_" "_$E($$PROCESS("16B.5"),1,10)_U_$$PROCESS("16B.6")
"RTN","EASEZRPU",79,0)
 S @ZDATA@("16B")=EAX
"RTN","EASEZRPU",80,0)
 ;
"RTN","EASEZRPU",81,0)
 S EAX=$$PROCESS("17.")   ;Covered by health insurance?
"RTN","EASEZRPU",82,0)
 S @ZDATA@(17)=$S(EAX="Y"!(EAX="YES"):"YES",EAX="N"!(EAX="NO"):"NO",EAX="UNKNOWN":"UNKNOWN",1:"")
"RTN","EASEZRPU",83,0)
 ;
"RTN","EASEZRPU",84,0)
 S @ZDATA@("17A")=$$PROCESS("17A.")           ;Insurance company's name
"RTN","EASEZRPU",85,0)
 S @ZDATA@("17B")=$E($$PROCESS("17B."),1,30)  ;Name of policy holder
"RTN","EASEZRPU",86,0)
 S @ZDATA@("17C")=$$PROCESS("17C.")           ;Policy number
"RTN","EASEZRPU",87,0)
 S @ZDATA@("17D")=$$PROCESS("17D.")           ;Group code
"RTN","EASEZRPU",88,0)
 ;
"RTN","EASEZRPU",89,0)
 S EACT="",EACT=$$PROCESS("17F.")             ;Insurance company's city
"RTN","EASEZRPU",90,0)
 I EACT]"" S EACT=EACT_", "    ;if there's a city, add comma & space
"RTN","EASEZRPU",91,0)
 ;Insurance company's street^city, state zip
"RTN","EASEZRPU",92,0)
 S @ZDATA@("17E")=$$PROCESS("17E.")_U_EACT_$$PROCESS("17G.")_" "_$$PROCESS("17H.")
"RTN","EASEZRPU",93,0)
 S @ZDATA@("17I")=$$PROCESS("17I.")           ;Insurance company's phone
"RTN","EASEZRPU",94,0)
 ;
"RTN","EASEZRPU",95,0)
 S EACT="",EACT=$E($$PROCESS("19A.4"),1,30)   ;Next-of-kin's city
"RTN","EASEZRPU",96,0)
 I EACT]"" S EACT=EACT_", "    ;if there's a city, add comma & space
"RTN","EASEZRPU",97,0)
 ;Next-of-kin's name^street^city, state zip^relationship
"RTN","EASEZRPU",98,0)
 S @ZDATA@("19A")=$$PROCESS("19A.1")_U_$E($$PROCESS("19A.3"),1,30)_U_EACT_$$PROCESS("19A.5")_" "_$E($$PROCESS("19A.6"),1,10)_U_$$PROCESS("19A.7")
"RTN","EASEZRPU",99,0)
 S @ZDATA@("19B")=$$PROCESS("19B.1")          ;Next-of-kin's home phone
"RTN","EASEZRPU",100,0)
 S @ZDATA@("19C")=$$PROCESS("19C.1")          ;Next-of-kin's work phone
"RTN","EASEZRPU",101,0)
 ;
"RTN","EASEZRPU",102,0)
 S EACT="",EACT=$E($$PROCESS("20A.4"),1,30)   ;Emergency contact's city
"RTN","EASEZRPU",103,0)
 I EACT]"" S EACT=EACT_", "    ;if there's a city, add comma & space
"RTN","EASEZRPU",104,0)
 ;Emergency contact's name^street^city, state zip^relationship
"RTN","EASEZRPU",105,0)
 S @ZDATA@("20A")=$$PROCESS("20A.1")_U_$E($$PROCESS("20A.3"),1,30)_U_EACT_$$PROCESS("20A.5")_" "_$E($$PROCESS("20A.6"),1,10)_U_$$PROCESS("20A.7")
"RTN","EASEZRPU",106,0)
 S @ZDATA@("20B")=$$PROCESS("20B.1")          ;EC's home phone
"RTN","EASEZRPU",107,0)
 S @ZDATA@("20C")=$$PROCESS("20C.1")          ;EC's work phone
"RTN","EASEZRPU",108,0)
 S @ZDATA@("21")=$$PROCESS("21.")             ;Who receives property?
"RTN","EASEZRPU",109,0)
 ;
"RTN","EASEZRPU",110,0)
 Q
"RTN","EASEZRPU",111,0)
 ;
"RTN","EASEZRPU",112,0)
PAGEI(EAINS) ;  Additional Insurance pages
"RTN","EASEZRPU",113,0)
 ; Called from EN^EASEZRPF
"RTN","EASEZRPU",114,0)
 N ZDATA,EZDATA,EACT
"RTN","EASEZRPU",115,0)
 ;
"RTN","EASEZRPU",116,0)
 S ZDATA=$NA(^TMP("EASEZR",$J,"I",EAINS))
"RTN","EASEZRPU",117,0)
 K @ZDATA
"RTN","EASEZRPU",118,0)
 ;
"RTN","EASEZRPU",119,0)
 ; Process Section IA
"RTN","EASEZRPU",120,0)
 S EZDATA=$NA(^TMP("EZRTEMP",$J,"IA",EAINS))
"RTN","EASEZRPU",121,0)
 ;
"RTN","EASEZRPU",122,0)
 S @ZDATA@("17A")=$$PROCESS("17A.")           ;Insurance company's name
"RTN","EASEZRPU",123,0)
 S @ZDATA@("17B")=$E($$PROCESS("17B."),1,30)  ;Name of policy holder
"RTN","EASEZRPU",124,0)
 S @ZDATA@("17C")=$$PROCESS("17C.")           ;Policy number
"RTN","EASEZRPU",125,0)
 S @ZDATA@("17D")=$$PROCESS("17D.")           ;Group code
"RTN","EASEZRPU",126,0)
 S EACT="",EACT=$$PROCESS("17F.")             ;Insurance company's city
"RTN","EASEZRPU",127,0)
 I EACT]"" S EACT=EACT_", "    ;if there's a street, add comma & space
"RTN","EASEZRPU",128,0)
 ;Health insurance company's street^city, state zip
"RTN","EASEZRPU",129,0)
 S @ZDATA@("17E")=$$PROCESS("17E.")_U_EACT_$$PROCESS("17G.")_" "_$$PROCESS("17H.")
"RTN","EASEZRPU",130,0)
 S @ZDATA@("17I")=$$PROCESS("17I.")           ;Insurance company's phone
"RTN","EASEZRPU",131,0)
 ;
"RTN","EASEZRPU",132,0)
 Q
"RTN","EASEZRPU",133,0)
 ;
"RTN","EASEZRPU",134,0)
PAGEN(EADEP) ;  Additional dependent page(s)
"RTN","EASEZRPU",135,0)
 ; Called from EN^EASEZRPF
"RTN","EASEZRPU",136,0)
 N ZDATA,EZDATA,EAX
"RTN","EASEZRPU",137,0)
 ;
"RTN","EASEZRPU",138,0)
 S ZDATA=$NA(^TMP("EASEZR",$J,"D",EADEP))
"RTN","EASEZRPU",139,0)
 K @ZDATA
"RTN","EASEZRPU",140,0)
 ;
"RTN","EASEZRPU",141,0)
 ; Process Section IIB
"RTN","EASEZRPU",142,0)
 S EZDATA=$NA(^TMP("EZRTEMP",$J,"IIB",EADEP))
"RTN","EASEZRPU",143,0)
 ;
"RTN","EASEZRPU",144,0)
 S @ZDATA@(2)=$$PROCESS(1.1)                      ;Child's name
"RTN","EASEZRPU",145,0)
 S @ZDATA@(5)=$$PROCESS("3.")                     ;Date of birth
"RTN","EASEZRPU",146,0)
 S @ZDATA@(7)=$$PROCESS("2.")                     ;SSN
"RTN","EASEZRPU",147,0)
 S @ZDATA@(9)=$$PROCESS("4.")                     ;Relationship
"RTN","EASEZRPU",148,0)
 S @ZDATA@(11)=$$PROCESS("5.")                    ;Date of dependency
"RTN","EASEZRPU",149,0)
 S EAX=$$PROCESS("6.")                            ;Amount contributed
"RTN","EASEZRPU",150,0)
 S @ZDATA@(12)=U_$S(EAX="":"",1:$J(EAX,0,2))
"RTN","EASEZRPU",151,0)
 S EAX=$$PROCESS("7.")                            ;Education expenses
"RTN","EASEZRPU",152,0)
 S @ZDATA@(13)=$S(EAX="":"",1:$J(EAX,0,2))
"RTN","EASEZRPU",153,0)
 ;
"RTN","EASEZRPU",154,0)
 S EAX=$$PROCESS("8.")                            ;Permanently disabled?
"RTN","EASEZRPU",155,0)
 S @ZDATA@(14)=$S(EAX="Y"!(EAX="YES"):"YES",EAX="N"!(EAX="NO"):"NO",EAX="UNKNOWN":"UNKNOWN",1:"")
"RTN","EASEZRPU",156,0)
 S EAX=$$PROCESS("9.")                            ;School last year?
"RTN","EASEZRPU",157,0)
 S @ZDATA@(15)=$S(EAX="Y"!(EAX="YES"):"YES",EAX="N"!(EAX="NO"):"NO",EAX="UNKNOWN":"UNKNOWN",1:"")
"RTN","EASEZRPU",158,0)
 ;
"RTN","EASEZRPU",159,0)
 Q
"RTN","EASEZRPU",160,0)
 ;
"RTN","EASEZRPU",161,0)
PROCESS(KEY) ; Process data value from EZRTEMP array, take #712 value
"RTN","EASEZRPU",162,0)
 ; if it's accepted, otherwise take the Patient File value
"RTN","EASEZRPU",163,0)
 ;
"RTN","EASEZRPU",164,0)
 N EAV,RSLT
"RTN","EASEZRPU",165,0)
 ;
"RTN","EASEZRPU",166,0)
 I '$D(@EZDATA@(KEY)) G PQ
"RTN","EASEZRPU",167,0)
 S EAV=@EZDATA@(KEY)
"RTN","EASEZRPU",168,0)
 S RSLT=$S(+$P(EAV,U,3):$P(EAV,U,2),1:$P(EAV,U,5))
"RTN","EASEZRPU",169,0)
PQ Q $G(RSLT)
"RTN","EASEZT1")
0^26^B16183245
"RTN","EASEZT1",1,0)
EASEZT1 ;ALB/jap - Data Transformation Logic for 1010EZ Processing ;10/12/00  13:08
"RTN","EASEZT1",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**51,70**;Mar 15, 2001;Build 26
"RTN","EASEZT1",3,0)
 ;
"RTN","EASEZT1",4,0)
 ;
"RTN","EASEZT1",5,0)
NAME(EASAPP,TYPE,MULTIPLE) ;get full name for person of interest
"RTN","EASEZT1",6,0)
 ;input  EASAPP = application ien in file #712
"RTN","EASEZT1",7,0)
 ;         TYPE = "APPLICANT", "SPOUSE", "CHILD1", "CHILD(N)", "NEXT-OF-KIN", "E-CONTACT"
"RTN","EASEZT1",8,0)
 ;     MULTIPLE = default to 1, unless TYPE="CHILD(N)"
"RTN","EASEZT1",9,0)
 ;output  NAME   =  LAST,FIRST MIDDLE SUFFIX
"RTN","EASEZT1",10,0)
 ;
"RTN","EASEZT1",11,0)
 ;sets entire name in Vista format;
"RTN","EASEZT1",12,0)
 ;places result in the first data element associated with name;
"RTN","EASEZT1",13,0)
 ;nulls unneeded ^TMP("EZDATA" nodes to avoid use in SORT^EASEZC3
"RTN","EASEZT1",14,0)
 N RTR,KEY,NAME,LAST,FIRST,MDL,SUFF,T
"RTN","EASEZT1",15,0)
 S NAME=""
"RTN","EASEZT1",16,0)
 S KEY=+$$KEY711^EASEZU1(TYPE_" LAST NAME") I KEY D
"RTN","EASEZT1",17,0)
 .S LAST=$P($$DATA712^EASEZU1(EASAPP,KEY,MULTIPLE),U,1)
"RTN","EASEZT1",18,0)
 S KEY=+$$KEY711^EASEZU1(TYPE_" FIRST NAME") I KEY D
"RTN","EASEZT1",19,0)
 .S FIRST=$P($$DATA712^EASEZU1(EASAPP,KEY,MULTIPLE),U,1)
"RTN","EASEZT1",20,0)
 .F T=1,2 S ^TMP("EZDATA",$J,KEY,MULTIPLE,T)=""
"RTN","EASEZT1",21,0)
 S KEY=+$$KEY711^EASEZU1(TYPE_" MIDDLE NAME") I KEY D
"RTN","EASEZT1",22,0)
 .S MDL=$P($$DATA712^EASEZU1(EASAPP,KEY,MULTIPLE),U,1)
"RTN","EASEZT1",23,0)
 .F T=1,2 S ^TMP("EZDATA",$J,KEY,MULTIPLE,T)=""
"RTN","EASEZT1",24,0)
 S KEY=+$$KEY711^EASEZU1(TYPE_" SUFFIX NAME") I KEY D
"RTN","EASEZT1",25,0)
 .S SUFF=$P($$DATA712^EASEZU1(EASAPP,KEY,MULTIPLE),U,1)
"RTN","EASEZT1",26,0)
 .F T=1,2 S ^TMP("EZDATA",$J,KEY,MULTIPLE,T)=""
"RTN","EASEZT1",27,0)
 I (LAST="")!(FIRST="") Q NAME
"RTN","EASEZT1",28,0)
 S NAME=LAST_","_FIRST
"RTN","EASEZT1",29,0)
 I $L(NAME)+$L(MDL)>45 S MDL=$E(MDL,1)
"RTN","EASEZT1",30,0)
 I MDL'="" S NAME=NAME_" "_MDL
"RTN","EASEZT1",31,0)
 I SUFF'="" S NAME=NAME_" "_SUFF
"RTN","EASEZT1",32,0)
 S NAME=$$UC^EASEZT1($E(NAME,1,45))
"RTN","EASEZT1",33,0)
 Q NAME
"RTN","EASEZT1",34,0)
 ;
"RTN","EASEZT1",35,0)
SSNOUT(EASSSN) ;format ssn for output to display or print
"RTN","EASEZT1",36,0)
 ; input  EASSSN = 9 digit OR 9-digit+P ssn
"RTN","EASEZT1",37,0)
 ; output    SSN = nnn-nn-nnnn OR nnn-nn-nnnnP
"RTN","EASEZT1",38,0)
 N SSN,P,X1,X2,X3
"RTN","EASEZT1",39,0)
 I EASSSN="--" Q ""
"RTN","EASEZT1",40,0)
 I $L(EASSSN)'=9 Q EASSSN
"RTN","EASEZT1",41,0)
 S X1=$E(EASSSN,1,3),X2=$E(EASSSN,4,5),X3=$E(EASSSN,6,9),P=$E(EASSSN,10)
"RTN","EASEZT1",42,0)
 S SSN=X1_"-"_X2_"-"_X3 I P="P" S SSN=SSN_P
"RTN","EASEZT1",43,0)
 Q SSN
"RTN","EASEZT1",44,0)
 ;
"RTN","EASEZT1",45,0)
UC(STRING) ;convert to uppercase
"RTN","EASEZT1",46,0)
 ;input  STRING = alpha character string; mixed-case
"RTN","EASEZT1",47,0)
 ;output      X = alpha character string; uppercase
"RTN","EASEZT1",48,0)
 ;
"RTN","EASEZT1",49,0)
 N %,X
"RTN","EASEZT1",50,0)
 S X=STRING
"RTN","EASEZT1",51,0)
 F %=1:1:$L(X) S:$E(X,%)?1L X=$E(X,0,%-1)_$C($A(X,%)-32)_$E(X,%+1,999)
"RTN","EASEZT1",52,0)
 Q X
"RTN","EASEZT1",53,0)
 ;
"RTN","EASEZT1",54,0)
XDATE(XDATE) ;check date
"RTN","EASEZT1",55,0)
 ;input  XDATE = external date mm/dd/yyyy where
"RTN","EASEZT1",56,0)
 ;               mm, dd, and /or yyyy may be null
"RTN","EASEZT1",57,0)
 ;output    XD = FM external date or null
"RTN","EASEZT1",58,0)
 ;
"RTN","EASEZT1",59,0)
 N X,XD,X1,X2,X3,Y,%DT
"RTN","EASEZT1",60,0)
 I XDATE="//" Q ""
"RTN","EASEZT1",61,0)
 S X1=$P(XDATE,"/",1),X2=$P(XDATE,"/",2),X3=$P(XDATE,"/",3)
"RTN","EASEZT1",62,0)
 ;remove invalid portions
"RTN","EASEZT1",63,0)
 I $L(X3)'=4 S X3=""
"RTN","EASEZT1",64,0)
 I X1="" S X2=""
"RTN","EASEZT1",65,0)
 I X3="" S X1="",X2=""
"RTN","EASEZT1",66,0)
 ;if no month, day, year, then null
"RTN","EASEZT1",67,0)
 I X1="",X2="",X3="" Q ""
"RTN","EASEZT1",68,0)
 S X="" S:X1 X=X_X1_" " S:X2 X=X_X2_" " S X=X_X3
"RTN","EASEZT1",69,0)
 ;convert to FM external format
"RTN","EASEZT1",70,0)
 S %DT="P" D ^%DT
"RTN","EASEZT1",71,0)
 D DD^%DT
"RTN","EASEZT1",72,0)
 S XD=Y
"RTN","EASEZT1",73,0)
 I XD=1699 S XD=""
"RTN","EASEZT1",74,0)
 Q XD
"RTN","EASEZT1",75,0)
 ;
"RTN","EASEZT1",76,0)
YN(XDATA) ;
"RTN","EASEZT1",77,0)
 N X
"RTN","EASEZT1",78,0)
 I $L(XDATA)>1 Q XDATA
"RTN","EASEZT1",79,0)
 S X=$S(XDATA="Y":"YES",XDATA="N":"NO",1:"")
"RTN","EASEZT1",80,0)
 Q X
"RTN","EASEZT1",81,0)
 ;
"RTN","EASEZT1",82,0)
SEX(XDATA) ;
"RTN","EASEZT1",83,0)
 N X
"RTN","EASEZT1",84,0)
 I $L(XDATA)>1 Q XDATA
"RTN","EASEZT1",85,0)
 S X=$S(XDATA="M":"MALE",XDATA="F":"FEMALE",1:"UNKNOWN")
"RTN","EASEZT1",86,0)
 Q X
"RTN","EASEZT1",87,0)
 ;
"RTN","EASEZT1",88,0)
STATE(XDATA) ;
"RTN","EASEZT1",89,0)
 N X,XI
"RTN","EASEZT1",90,0)
 I $L(XDATA)'=2 Q XDATA
"RTN","EASEZT1",91,0)
 I XDATA="AS" Q "AMERICAN SAMOA"
"RTN","EASEZT1",92,0)
 I XDATA="DC" Q "DISTRICT OF COLUMBIA"
"RTN","EASEZT1",93,0)
 I XDATA="FM" Q "FEDERATED STATES OF MICRONESIA"
"RTN","EASEZT1",94,0)
 I XDATA="GU" Q "GUAM"
"RTN","EASEZT1",95,0)
 I XDATA="MH" Q "MARSHALL ISLANDS"
"RTN","EASEZT1",96,0)
 I XDATA="MP" Q "NORTHERN MARIANA ISLANDS"
"RTN","EASEZT1",97,0)
 I XDATA="PW" Q "PALAU (TRUST TERRITORY)"
"RTN","EASEZT1",98,0)
 I XDATA="PR" Q "PUERTO RICO"
"RTN","EASEZT1",99,0)
 I XDATA="VI" Q "VIRGIN ISLANDS"
"RTN","EASEZT1",100,0)
 I XDATA="FG" Q "FOREIGN COUNTRY"
"RTN","EASEZT1",101,0)
 S XI=$O(^DIC(5,"C",XDATA,0)) I 'XI Q XDATA
"RTN","EASEZT1",102,0)
 S X=$P($G(^DIC(5,XI,0)),U,1)
"RTN","EASEZT1",103,0)
 Q X
"RTN","EASEZT1",104,0)
 ;
"RTN","EASEZT1",105,0)
COUNTY(EASAPP,XDATA) ;include county code
"RTN","EASEZT1",106,0)
 ;this transform can only be used for APPLICANT COUNTY
"RTN","EASEZT1",107,0)
 N X,ABBR,STATE,SIEN,CIEN,CCODE
"RTN","EASEZT1",108,0)
 I XDATA="" Q XDATA
"RTN","EASEZT1",109,0)
 S KEY=+$$KEY711^EASEZU1("APPLICANT STATE")
"RTN","EASEZT1",110,0)
 I 'KEY Q XDATA
"RTN","EASEZT1",111,0)
 S ABBR="",STATE="",SIEN="",CIEN="",CCODE=""
"RTN","EASEZT1",112,0)
 I KEY D
"RTN","EASEZT1",113,0)
 .S ABBR=$P($$DATA712^EASEZU1(EASAPP,KEY,1),U,1)
"RTN","EASEZT1",114,0)
 .I ABBR'="" S STATE=$$STATE^EASEZT1(ABBR)
"RTN","EASEZT1",115,0)
 .I STATE'="" S SIEN=$O(^DIC(5,"B",STATE,0))
"RTN","EASEZT1",116,0)
 .I SIEN'="" S CIEN=$O(^DIC(5,SIEN,1,"B",XDATA,0))
"RTN","EASEZT1",117,0)
 .I CIEN'="" S CCODE=$P($G(^DIC(5,SIEN,1,CIEN,0)),U,3)
"RTN","EASEZT1",118,0)
 I CCODE'="" S XDATA=XDATA_" ("_CCODE_")"
"RTN","EASEZT1",119,0)
 Q XDATA
"RTN","EASEZT1",120,0)
 ;
"RTN","EASEZT1",121,0)
ETHNIC(XDATA) ;
"RTN","EASEZT1",122,0)
 N X
"RTN","EASEZT1",123,0)
 I ($L(XDATA)>1)!(XDATA="") Q XDATA
"RTN","EASEZT1",124,0)
 S X=$S(XDATA="Y":"YES",XDATA="N":"NO",XDATA="U":"UNKNOWN",1:"")
"RTN","EASEZT1",125,0)
 I X'="" S X=X_" (S)"
"RTN","EASEZT1",126,0)
 Q X
"RTN","EASEZT1",127,0)
 ;
"RTN","EASEZT1",128,0)
RACE(XDATA) ;
"RTN","EASEZT1",129,0)
 N X
"RTN","EASEZT1",130,0)
 I $L(XDATA)>1 Q XDATA
"RTN","EASEZT1",131,0)
 S X=$S(XDATA="Y":"YES (S)",1:"")
"RTN","EASEZT1",132,0)
 Q X
"RTN","EASEZT1",133,0)
 ;
"RTN","EASEZT1",134,0)
LAST(XDATA) ; return LAST NAME, first middle
"RTN","EASEZT1",135,0)
 Q $$UC($P($G(XDATA),","))
"RTN","EASEZT1",136,0)
 ;
"RTN","EASEZT1",137,0)
COUNTRY(XDATA)  ;
"RTN","EASEZT1",138,0)
 ;   Input:  3 character COUNTRY CODE (from file # 779.004)
"RTN","EASEZT1",139,0)
 ;   Output: POSTAL NAME, if it exists
"RTN","EASEZT1",140,0)
 ;           DESCRIPTION, if POSTAL NAME="<NULL>"
"RTN","EASEZT1",141,0)
 ;           -1, if invalid
"RTN","EASEZT1",142,0)
 N RSLT
"RTN","EASEZT1",143,0)
 S RSLT=$$COUNTRY^DGADDUTL(XDATA)
"RTN","EASEZT1",144,0)
 Q $S(RSLT=-1:"",1:RSLT)
"RTN","EASEZT1",145,0)
 ;
"RTN","EASEZU2")
0^16^B37042049
"RTN","EASEZU2",1,0)
EASEZU2 ;ALB/jap - Utilities for 1010EZ Processing ;10/13/00  10:53
"RTN","EASEZU2",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**53,70**;Mar 15, 2001;Build 26
"RTN","EASEZU2",3,0)
 ;
"RTN","EASEZU2",4,0)
PICKALL(EASVIEW) ;For processing status selected, pick-up all records in #712
"RTN","EASEZU2",5,0)
 ;Loop through Application Holding file #712 for status selected
"RTN","EASEZU2",6,0)
 N APP,FAC,INDEX,JDATE,DAT0,NAME,SSN,VETTYPE,FDAYS,WEBID,WILLSEND,ENTRY,EDATE,X,Y,I,J,T,V,X1,X2,X3
"RTN","EASEZU2",7,0)
 Q:'EASVIEW  Q:EASVIEW>6
"RTN","EASEZU2",8,0)
 K ^TMP($J,712,EASVIEW)
"RTN","EASEZU2",9,0)
 ;index to search depends on status selected for viewing
"RTN","EASEZU2",10,0)
 S V=EASVIEW,INDEX=$S(V=1:"NEW",V=2:"REV",V=3:"PRT",V=4:"SIG",V=5:"FIL",V=6:"CLS",1:"")
"RTN","EASEZU2",11,0)
 Q:V=""  Q:INDEX=""
"RTN","EASEZU2",12,0)
 S I=INDEX D
"RTN","EASEZU2",13,0)
 . ;use the index to get each application in selected status
"RTN","EASEZU2",14,0)
 . ;here JDATE is the date on which the application reached status of interest
"RTN","EASEZU2",15,0)
 . S JDATE=0 F  S JDATE=$O(^EAS(712,I,JDATE)) Q:'JDATE  S APP=0 F  S APP=$O(^EAS(712,I,JDATE,APP)) Q:'APP  D
"RTN","EASEZU2",16,0)
 . . S DAT0=$G(^EAS(712,APP,0)),NAME=$P(DAT0,U,4),ENTRY=$P(DAT0,U,6),SSN=$P($P(DAT0,U,5),"&",1),T=$P(DAT0,U,9)
"RTN","EASEZU2",17,0)
 . . S WEBID=$P(DAT0,U,2),WILLSEND=$P(DAT0,U,13)
"RTN","EASEZU2",18,0)
 . . S FAC=$P($G(^EAS(712,APP,1)),U,6) S:FAC="" FAC=1
"RTN","EASEZU2",19,0)
 . . ;don't include filed apps if filed more than 30 days ago. 
"RTN","EASEZU2",20,0)
 . . S FDAYS=0 I (INDEX="FIL")!(INDEX="CLS") S X2=JDATE,X1=DT D ^%DTC S FDAYS=X
"RTN","EASEZU2",21,0)
 . . I FDAYS>30 K ^EAS(712,INDEX,JDATE,APP)
"RTN","EASEZU2",22,0)
 . . Q:FDAYS>30
"RTN","EASEZU2",23,0)
 . . ;avoid any stub entries
"RTN","EASEZU2",24,0)
 . . Q:NAME=""
"RTN","EASEZU2",25,0)
 . . S Y=ENTRY,%F=2,EDATE=$$FMTE^XLFDT(Y,%F) I $L(EDATE)<10 D
"RTN","EASEZU2",26,0)
 . . . S X1=$P(EDATE,"/",1),X2=$P(EDATE,"/",2),X3=$P(EDATE,"/",3)
"RTN","EASEZU2",27,0)
 . . . S:$L(X1)=1 X1="0"_X1 S:$L(X2)=1 X2="0"_X2
"RTN","EASEZU2",28,0)
 . . . S EDATE=X1_"/"_X2_"/"_X3
"RTN","EASEZU2",29,0)
 . . S VETTYPE=$S(T=1:"SC 50-100%",T=2:"SC <50%",T=3:"SC 0%",T=4:"POW",T=5:"PURPLE HEART",T=6:"MIL. RETIREE",T=7:"NSC",1:"")
"RTN","EASEZU2",30,0)
 . . S ^TMP($J,712,EASVIEW,FAC,NAME,ENTRY,APP)=APP_U_SSN_U_VETTYPE_U_EDATE_U_JDATE_U_WEBID_U_WILLSEND_U_FAC
"RTN","EASEZU2",31,0)
 Q
"RTN","EASEZU2",32,0)
 ;
"RTN","EASEZU2",33,0)
SETDATE(EASAPP,INDEX) ;update fields & indexes associated with processing status
"RTN","EASEZU2",34,0)
 ;
"RTN","EASEZU2",35,0)
 N DA,DR,DIE
"RTN","EASEZU2",36,0)
 S DA=EASAPP,DIE="^EAS(712,"
"RTN","EASEZU2",37,0)
 I INDEX="REV" S DR="5.1///^S X=DT;5.2////^S X=DUZ" D ^DIE,REINDEX^EASEZU2(EASAPP,INDEX) Q
"RTN","EASEZU2",38,0)
 I INDEX="PRT" S DR="6.1///^S X=DT;6.2////^S X=DUZ" D ^DIE,REINDEX^EASEZU2(EASAPP,INDEX) Q
"RTN","EASEZU2",39,0)
 I INDEX="SIG" S DR="4///^S X=DT;4.1///^S X=DT;4.2////^S X=DUZ" D ^DIE,REINDEX^EASEZU2(EASAPP,INDEX) Q
"RTN","EASEZU2",40,0)
 I INDEX="FIL" S DR="7.1///^S X=DT;7.2////^S X=DUZ" D ^DIE,REINDEX^EASEZU2(EASAPP,INDEX) Q
"RTN","EASEZU2",41,0)
 I INDEX="CLS" S DR="9.1///^S X=DT;9.2////^S X=DUZ" D ^DIE,REINDEX^EASEZU2(EASAPP,INDEX) Q
"RTN","EASEZU2",42,0)
 Q
"RTN","EASEZU2",43,0)
 ;
"RTN","EASEZU2",44,0)
APPINDEX(EASAPP) ;Check file #712 processing index for Application
"RTN","EASEZU2",45,0)
 ;get determining date and remove any index entries no longer current
"RTN","EASEZU2",46,0)
 N CLSDATE,FILDATE,SIGDATE,PRTDATE,REVDATE,NEWDATE
"RTN","EASEZU2",47,0)
 S CLSDATE=$P($G(^EAS(712,EASAPP,2)),U,9) I CLSDATE D REINDEX(EASAPP,"CLS",CLSDATE) Q
"RTN","EASEZU2",48,0)
 S FILDATE=$P($G(^EAS(712,EASAPP,2)),U,5) I FILDATE D REINDEX(EASAPP,"FIL",FILDATE) Q
"RTN","EASEZU2",49,0)
 S SIGDATE=$P($G(^EAS(712,EASAPP,1)),U,1) I SIGDATE D REINDEX(EASAPP,"SIG",SIGDATE) Q
"RTN","EASEZU2",50,0)
 S PRTDATE=$P($G(^EAS(712,EASAPP,2)),U,3) I PRTDATE D REINDEX(EASAPP,"PRT",PRTDATE) Q
"RTN","EASEZU2",51,0)
 S REVDATE=$P($G(^EAS(712,EASAPP,2)),U,1) I REVDATE D REINDEX(EASAPP,"REV",REVDATE) Q
"RTN","EASEZU2",52,0)
 S NEWDATE=$P($G(^EAS(712,EASAPP,0)),U,6) I NEWDATE D REINDEX(EASAPP,"NEW",NEWDATE) Q
"RTN","EASEZU2",53,0)
 Q
"RTN","EASEZU2",54,0)
 ;
"RTN","EASEZU2",55,0)
REINDEX(EASAPP,EASINDEX,THISDATE) ;Remove previous index for Application upon processing status change
"RTN","EASEZU2",56,0)
 ;There are 6 critical indexes maintained on file #712 to indicate processing status.
"RTN","EASEZU2",57,0)
 ;   "NEW" -- New applications; uses field #3, ENTRY DATE
"RTN","EASEZU2",58,0)
 ;   "REV" -- In Review applications; uses field #5.1, REVIEW DATE
"RTN","EASEZU2",59,0)
 ;   "PRT" -- Printed/Awaiting Signature applications; uses field #6.1, PRINT DATE
"RTN","EASEZU2",60,0)
 ;   "SIG" -- Signed applications; uses field #4, DATE SIGNED BY APPLICANT
"RTN","EASEZU2",61,0)
 ;   "FIL" -- Filed applications; uses field #7.1, FILING DATE
"RTN","EASEZU2",62,0)
 ;   "CLS" -- Closed/inactivated applications; uses field #9.1, CLOSE DATE
"RTN","EASEZU2",63,0)
 ;
"RTN","EASEZU2",64,0)
 ;When a date is initially entered into one of the fields listed above, FM updates the
"RTN","EASEZU2",65,0)
 ;   the index as needed; this function removes the "old" index entry for the application.
"RTN","EASEZU2",66,0)
 ;
"RTN","EASEZU2",67,0)
 ;Once a date has been entered into one of the fields listed above, repeated actions
"RTN","EASEZU2",68,0)
 ;   of the same type do not update the field with a new date; therefore, a new index
"RTN","EASEZU2",69,0)
 ;   entry won't be created.
"RTN","EASEZU2",70,0)
 ;   For example: The first time the 1010EZ application is Printed for Signature
"RTN","EASEZU2",71,0)
 ;                field #6.1 is updated and FM creates the index entry in "PRT",
"RTN","EASEZU2",72,0)
 ;                and this function is called to remove the old "REV" index entry;
"RTN","EASEZU2",73,0)
 ;                If the 1010EZ is Printed again sometime later, say after it has
"RTN","EASEZU2",74,0)
 ;                already been Filed, that Print action will not update field #6.1
"RTN","EASEZU2",75,0)
 ;
"RTN","EASEZU2",76,0)
 ;input 
"RTN","EASEZU2",77,0)
 ;   EASAPP   = ien in file #712 for Application
"RTN","EASEZU2",78,0)
 ;   EASINDEX = index for current processing status
"RTN","EASEZU2",79,0)
 ;   THISDATE = date to be used to set cross-reference; [optional]
"RTN","EASEZU2",80,0)
 ;              internal FM format
"RTN","EASEZU2",81,0)
 ;output
"RTN","EASEZU2",82,0)
 ;   none
"RTN","EASEZU2",83,0)
 ;
"RTN","EASEZU2",84,0)
 N DATE
"RTN","EASEZU2",85,0)
 ;
"RTN","EASEZU2",86,0)
 ;set appropriate index if necessary
"RTN","EASEZU2",87,0)
 I $G(THISDATE) S ^EAS(712,EASINDEX,THISDATE,EASAPP)=""
"RTN","EASEZU2",88,0)
 ;
"RTN","EASEZU2",89,0)
 I EASINDEX="NEW" D  Q
"RTN","EASEZU2",90,0)
 . ;get REVIEW DATE
"RTN","EASEZU2",91,0)
 . S DATE=$P($G(^EAS(712,EASAPP,2)),U,1)
"RTN","EASEZU2",92,0)
 . I DATE K ^EAS(712,"REV",DATE,EASAPP)
"RTN","EASEZU2",93,0)
 . ;get PRINT DATE
"RTN","EASEZU2",94,0)
 . S DATE=$P($G(^EAS(712,EASAPP,2)),U,3)
"RTN","EASEZU2",95,0)
 . I DATE K ^EAS(712,"PRT",DATE,EASAPP)
"RTN","EASEZU2",96,0)
 ;
"RTN","EASEZU2",97,0)
 I EASINDEX="REV" D  Q
"RTN","EASEZU2",98,0)
 . ;get ENTRY DATE
"RTN","EASEZU2",99,0)
 . S DATE=$P($G(^EAS(712,EASAPP,0)),U,6)
"RTN","EASEZU2",100,0)
 . I DATE K ^EAS(712,"NEW",DATE,EASAPP)
"RTN","EASEZU2",101,0)
 ;
"RTN","EASEZU2",102,0)
 I EASINDEX="PRT" D  Q
"RTN","EASEZU2",103,0)
 . ;get REVIEW DATE
"RTN","EASEZU2",104,0)
 . S DATE=$P($G(^EAS(712,EASAPP,2)),U,1)
"RTN","EASEZU2",105,0)
 . I DATE K ^EAS(712,"REV",DATE,EASAPP)
"RTN","EASEZU2",106,0)
 ;
"RTN","EASEZU2",107,0)
 I EASINDEX="SIG" D  Q
"RTN","EASEZU2",108,0)
 . ;get REVIEW DATE
"RTN","EASEZU2",109,0)
 . S DATE=$P($G(^EAS(712,EASAPP,2)),U,1)
"RTN","EASEZU2",110,0)
 . I DATE K ^EAS(712,"REV",DATE,EASAPP)
"RTN","EASEZU2",111,0)
 . ;get PRINT DATE
"RTN","EASEZU2",112,0)
 . S DATE=$P($G(^EAS(712,EASAPP,2)),U,3)
"RTN","EASEZU2",113,0)
 . I DATE K ^EAS(712,"PRT",DATE,EASAPP)
"RTN","EASEZU2",114,0)
 ;
"RTN","EASEZU2",115,0)
 I EASINDEX="FIL" D  Q
"RTN","EASEZU2",116,0)
 . ;get PRINT DATE
"RTN","EASEZU2",117,0)
 . S DATE=$P($G(^EAS(712,EASAPP,2)),U,3)
"RTN","EASEZU2",118,0)
 . I DATE K ^EAS(712,"PRT",DATE,EASAPP)
"RTN","EASEZU2",119,0)
 . ;get DATE SIGNED BY APPLICANT
"RTN","EASEZU2",120,0)
 . S DATE=$P($G(^EAS(712,EASAPP,1)),U,1)
"RTN","EASEZU2",121,0)
 . I DATE K ^EAS(712,"SIG",DATE,EASAPP)
"RTN","EASEZU2",122,0)
 ;
"RTN","EASEZU2",123,0)
 I EASINDEX="CLS" D  Q
"RTN","EASEZU2",124,0)
 . ;get ENTRY DATE
"RTN","EASEZU2",125,0)
 . S DATE=$P($G(^EAS(712,EASAPP,0)),U,6)
"RTN","EASEZU2",126,0)
 . I DATE K ^EAS(712,"NEW",DATE,EASAPP)
"RTN","EASEZU2",127,0)
 . ;get REVIEW DATE
"RTN","EASEZU2",128,0)
 . S DATE=$P($G(^EAS(712,EASAPP,2)),U,1)
"RTN","EASEZU2",129,0)
 . I DATE K ^EAS(712,"REV",DATE,EASAPP)
"RTN","EASEZU2",130,0)
 . ;get PRINT DATE
"RTN","EASEZU2",131,0)
 . S DATE=$P($G(^EAS(712,EASAPP,2)),U,3)
"RTN","EASEZU2",132,0)
 . I DATE K ^EAS(712,"PRT",DATE,EASAPP)
"RTN","EASEZU2",133,0)
 ;
"RTN","EASEZU2",134,0)
 Q
"RTN","EASEZU2",135,0)
 ;
"RTN","EASEZU2",136,0)
CURRSTAT(EASAPP) ;Check file #712 processing index for Application
"RTN","EASEZU2",137,0)
 ;return current Application status
"RTN","EASEZU2",138,0)
 N CLSDATE,FILDATE,SIGDATE,PRTDATE,REVDATE,NEWDATE
"RTN","EASEZU2",139,0)
 S CLSDATE=$P($G(^EAS(712,EASAPP,2)),U,9) I CLSDATE Q "CLS"
"RTN","EASEZU2",140,0)
 S FILDATE=$P($G(^EAS(712,EASAPP,2)),U,5) I FILDATE Q "FIL"
"RTN","EASEZU2",141,0)
 S SIGDATE=$P($G(^EAS(712,EASAPP,1)),U,1) I SIGDATE Q "SIG"
"RTN","EASEZU2",142,0)
 S PRTDATE=$P($G(^EAS(712,EASAPP,2)),U,3) I PRTDATE Q "PRT"
"RTN","EASEZU2",143,0)
 S REVDATE=$P($G(^EAS(712,EASAPP,2)),U,1) I REVDATE Q "REV"
"RTN","EASEZU2",144,0)
 S NEWDATE=$P($G(^EAS(712,EASAPP,0)),U,6) I NEWDATE Q "NEW"
"RTN","EASEZU2",145,0)
 Q ""
"RTN","EASEZU2",146,0)
 ;
"RTN","EASEZU2",147,0)
LOCAL711 ;set up TMP global array
"RTN","EASEZU2",148,0)
 ;to hold file #711 & file #712 correlated data; and a useful index
"RTN","EASEZU2",149,0)
 N IEN,DIC,DIE,DA,DR,DLAYGO,DINUM,X,Y,DATANM,DATAKEY,DISPNM,FILE,SUBF,FLD,GRP
"RTN","EASEZU2",150,0)
 ;make sure 'unknown' is in #711
"RTN","EASEZU2",151,0)
 K ^TMP("EZDATA",$J),^TMP("EZINDEX",$J)
"RTN","EASEZU2",152,0)
 I '$D(^EAS(711,.1,0)) D
"RTN","EASEZU2",153,0)
 . S DIC="^EAS(711,",DIC(0)="L",DLAYGO="",X="UNKNOWN",DINUM=.1
"RTN","EASEZU2",154,0)
 . K DD,DO D FILE^DICN
"RTN","EASEZU2",155,0)
 I $D(^EAS(711,.1,0)) D
"RTN","EASEZU2",156,0)
 . S DA=.1
"RTN","EASEZU2",157,0)
 . S DIE="^EAS(711,",DR=".1///^S X=""UNKNOWN"";1///^S X=""A"";2///^S X=0;3///^S X=0;4///^S X=0"
"RTN","EASEZU2",158,0)
 . D ^DIE
"RTN","EASEZU2",159,0)
 ;pick up records from "ACTIVE" index
"RTN","EASEZU2",160,0)
 S IEN=0 F  S IEN=$O(^EAS(711,"A","A",IEN)) Q:'IEN  D
"RTN","EASEZU2",161,0)
 . S DATAKEY=$P(^EAS(711,IEN,0),U,2),X=$G(^EAS(711,IEN,1)),FILE=$P(X,U,1),SUBF=$P(X,U,2),FLD=$P(X,U,3) S:SUBF="" SUBF=FILE
"RTN","EASEZU2",162,0)
 . S DATANM=$P($G(^EAS(711,IEN,0)),U,1),DISPNM=$G(^EAS(711,IEN,2))
"RTN","EASEZU2",163,0)
 . S ^TMP("EZDATA",$J,IEN)=X_U_DATAKEY_U_DISPNM
"RTN","EASEZU2",164,0)
 . ;EAS*1.0*70
"RTN","EASEZU2",165,0)
 . S GRP=$S(DATANM["SPOUSE":"S",DATANM["CHILD1":"C1",DATANM["CHILD(N)":"CN",DATANM["ASSET(N)":"CN",1:"A")
"RTN","EASEZU2",166,0)
 . I DATANM["ASSET(N)" S ^TMP("EZINDEX",$J,"C1",FILE,SUBF,FLD,IEN)=IEN_U_DATANM
"RTN","EASEZU2",167,0)
 . S ^TMP("EZINDEX",$J,GRP,FILE,SUBF,FLD,IEN)=IEN_U_DATANM
"RTN","EASEZU2",168,0)
 Q
"RTN","EASEZU4")
0^12^B25484390
"RTN","EASEZU4",1,0)
EASEZU4 ;ALB/jap - Utilities for 1010EZ Processing ;10/25/00  08:08
"RTN","EASEZU4",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**51,70**;Mar 15, 2001;Build 26
"RTN","EASEZU4",3,0)
 ;
"RTN","EASEZU4",4,0)
PRT1010 ;print 10-10EZ form with data
"RTN","EASEZU4",5,0)
 ;
"RTN","EASEZU4",6,0)
 N TASK,REVDATE,PRTDATE,ACTION,DIR
"RTN","EASEZU4",7,0)
 S ACTION="'Print 10-10EZ'"
"RTN","EASEZU4",8,0)
 ;no action if closed
"RTN","EASEZU4",9,0)
 I EASPSTAT="CLS" D NOACT^EASEZLM("Inactivated",ACTION) Q
"RTN","EASEZU4",10,0)
 ;don't print if not at least reviewed
"RTN","EASEZU4",11,0)
 S REVDATE=$P($G(^EAS(712,EASAPP,2)),U,1)
"RTN","EASEZU4",12,0)
 I 'REVDATE D NOACT^EASEZLM("Unreviewed",ACTION) Q
"RTN","EASEZU4",13,0)
 ;just in case
"RTN","EASEZU4",14,0)
 I EASPSTAT="NEW" D NOACT^EASEZLM("New",ACTION) Q
"RTN","EASEZU4",15,0)
 ;call to Steve's routine to print 10-10EZ
"RTN","EASEZU4",16,0)
 D FULL^VALM1
"RTN","EASEZU4",17,0)
 S TASK=$$QUE^EASEZPF(EASAPP,EASDFN)
"RTN","EASEZU4",18,0)
 ;should return Task # if actually queued to print
"RTN","EASEZU4",19,0)
 ;if printed, update processing status if necessary; can be printed multiple times
"RTN","EASEZU4",20,0)
 S PRTDATE=$P(^EAS(712,EASAPP,2),U,3)
"RTN","EASEZU4",21,0)
 I 'PRTDATE,$G(TASK) D
"RTN","EASEZU4",22,0)
 . D SETDATE^EASEZU2(EASAPP,"PRT") S EASPSTAT="PRT"
"RTN","EASEZU4",23,0)
 . ;rebuild selection list since this application is removed from list
"RTN","EASEZU4",24,0)
 . D BLD^EASEZLM,HDR2^EASEZL1
"RTN","EASEZU4",25,0)
 S VALMBCK="R"
"RTN","EASEZU4",26,0)
 D PAUSE^VALM1
"RTN","EASEZU4",27,0)
 Q
"RTN","EASEZU4",28,0)
 ;
"RTN","EASEZU4",29,0)
VERSIG ;verify Applicant signature on 10-10EZ
"RTN","EASEZU4",30,0)
 ;
"RTN","EASEZU4",31,0)
 N REVDATE,ACTION,DIR
"RTN","EASEZU4",32,0)
 S ACTION="'Verify Signature'"
"RTN","EASEZU4",33,0)
 ;no action if closed
"RTN","EASEZU4",34,0)
 I EASPSTAT="CLS" D NOACT^EASEZLM("Inactivated",ACTION) Q
"RTN","EASEZU4",35,0)
 ;can't verify sig if not at least reviewed
"RTN","EASEZU4",36,0)
 S REVDATE=$P($G(^EAS(712,EASAPP,2)),U,1)
"RTN","EASEZU4",37,0)
 I 'REVDATE D NOACT^EASEZLM("Unreviewed",ACTION) Q
"RTN","EASEZU4",38,0)
 ;can't sign if already done
"RTN","EASEZU4",39,0)
 I EASPSTAT="SIG" D NOACT^EASEZLM("Previously Signed",ACTION) Q
"RTN","EASEZU4",40,0)
 ;just in case
"RTN","EASEZU4",41,0)
 I EASPSTAT="NEW" D NOACT^EASEZLM("New",ACTION) Q
"RTN","EASEZU4",42,0)
 I EASPSTAT="FIL" D NOACT^EASEZLM("Filed",ACTION) Q
"RTN","EASEZU4",43,0)
 ;update processing status
"RTN","EASEZU4",44,0)
 D SETDATE^EASEZU2(EASAPP,"SIG")
"RTN","EASEZU4",45,0)
 S EASPSTAT="SIG"
"RTN","EASEZU4",46,0)
 W !,"Applicant signature is verified...",!
"RTN","EASEZU4",47,0)
 ;rebuild selection list since this application is removed from list
"RTN","EASEZU4",48,0)
 D BLD^EASEZLM,HDR2^EASEZL1
"RTN","EASEZU4",49,0)
 S VALMBCK="Q"
"RTN","EASEZU4",50,0)
 D PAUSE^VALM1
"RTN","EASEZU4",51,0)
 Q
"RTN","EASEZU4",52,0)
 ;
"RTN","EASEZU4",53,0)
FILE ;file 10-10EZ 'accepted' data to VistA Patient database
"RTN","EASEZU4",54,0)
 ;
"RTN","EASEZU4",55,0)
 N SIGDATE,ACTION,SAVE,ZTSK,STAT,DIR
"RTN","EASEZU4",56,0)
 S ACTION="'File 10-10EZ'"
"RTN","EASEZU4",57,0)
 ;no action if closed
"RTN","EASEZU4",58,0)
 I EASPSTAT="CLS" D NOACT^EASEZLM("Inactivated",ACTION) Q
"RTN","EASEZU4",59,0)
 ;must be signed before filing
"RTN","EASEZU4",60,0)
 S SIGDATE=$P($G(^EAS(712,EASAPP,1)),U,1)
"RTN","EASEZU4",61,0)
 I 'SIGDATE D NOACT^EASEZLM("Unsigned",ACTION) Q
"RTN","EASEZU4",62,0)
 ;can't repeat filing
"RTN","EASEZU4",63,0)
 I EASPSTAT="FIL" D NOACT^EASEZLM("Previously Filed",ACTION) Q
"RTN","EASEZU4",64,0)
 S STAT=$$CURRSTAT^EASEZU2(EASAPP) I STAT="FIL" D NOACT^EASEZLM("Previously Filed",ACTION) Q
"RTN","EASEZU4",65,0)
 ;just in case
"RTN","EASEZU4",66,0)
 I EASPSTAT="NEW" D NOACT^EASEZLM("New",ACTION) Q
"RTN","EASEZU4",67,0)
 I EASPSTAT="REV" D NOACT^EASEZLM("Unsigned",ACTION) Q
"RTN","EASEZU4",68,0)
 I EASPSTAT="PRT" D NOACT^EASEZLM("Unsigned",ACTION) Q
"RTN","EASEZU4",69,0)
 ;
"RTN","EASEZU4",70,0)
 D FILE2
"RTN","EASEZU4",71,0)
 ;rebuild selection list since this application is removed from list
"RTN","EASEZU4",72,0)
 S VALMBCK="R"
"RTN","EASEZU4",73,0)
 I $D(ZTSK) D
"RTN","EASEZU4",74,0)
 . D SETDATE^EASEZU2(EASAPP,"FIL")
"RTN","EASEZU4",75,0)
 . S EASPSTAT="FIL"
"RTN","EASEZU4",76,0)
 . S $P(^EAS(712,EASAPP,2),U,11)=ZTSK
"RTN","EASEZU4",77,0)
 . D BLD^EASEZLM S VALMBCK="Q"
"RTN","EASEZU4",78,0)
 Q
"RTN","EASEZU4",79,0)
 ;
"RTN","EASEZU4",80,0)
CLOSE ;close/inactivate the Application
"RTN","EASEZU4",81,0)
 ;
"RTN","EASEZU4",82,0)
 N SIGDATE,FILDATE,ACTION
"RTN","EASEZU4",83,0)
 S ACTION="'Inactivate'"
"RTN","EASEZU4",84,0)
 ;not allowed if signed or filed
"RTN","EASEZU4",85,0)
 S FILDATE=$P($G(^EAS(712,EASAPP,2)),U,5)
"RTN","EASEZU4",86,0)
 I FILDATE D NOACT^EASEZLM("Filed",ACTION) Q
"RTN","EASEZU4",87,0)
 S SIGDATE=$P($G(^EAS(712,EASAPP,1)),U,1)
"RTN","EASEZU4",88,0)
 I SIGDATE D NOACT^EASEZLM("Signed",ACTION) Q
"RTN","EASEZU4",89,0)
 ;no action if already closed
"RTN","EASEZU4",90,0)
 I EASPSTAT="CLS" D NOACT^EASEZLM("Previously Inactivated",ACTION) Q
"RTN","EASEZU4",91,0)
 ;clear accept flags and updates
"RTN","EASEZU4",92,0)
 D OKRESET^EASEZU3
"RTN","EASEZU4",93,0)
 ;update processing status
"RTN","EASEZU4",94,0)
 D SETDATE^EASEZU2(EASAPP,"CLS")
"RTN","EASEZU4",95,0)
 S EASPSTAT="CLS"
"RTN","EASEZU4",96,0)
 W !,"Application has been closed/inactivated...",!
"RTN","EASEZU4",97,0)
 D PAUSE^VALM1
"RTN","EASEZU4",98,0)
 ;rebuild selection list since this application is removed from list
"RTN","EASEZU4",99,0)
 D BLD^EASEZLM
"RTN","EASEZU4",100,0)
 S VALMBCK="Q"
"RTN","EASEZU4",101,0)
 Q
"RTN","EASEZU4",102,0)
 ;
"RTN","EASEZU4",103,0)
FILE2 ;
"RTN","EASEZU4",104,0)
 N VALMDDF,ZTSAVE,ZTDESC,ZTRTN,ZTIO
"RTN","EASEZU4",105,0)
 K ZTSAVE
"RTN","EASEZU4",106,0)
 S ZTDESC="Filing 10-10EZ Data (Appl. #"_EASAPP_") to VistA",ZTRTN="QUE^EASEZFM",ZTIO=""
"RTN","EASEZU4",107,0)
 S ZTSAVE("EASAPP")=""
"RTN","EASEZU4",108,0)
 D ^%ZTLOAD
"RTN","EASEZU4",109,0)
 I $D(ZTSK) D
"RTN","EASEZU4",110,0)
 . ;update processing status
"RTN","EASEZU4",111,0)
 . W !,"10-10EZ data is being filed as a background job."
"RTN","EASEZU4",112,0)
 . W !,"Task #: ",ZTSK,!
"RTN","EASEZU4",113,0)
 . K DIR D PAUSE^VALM1
"RTN","EASEZU4",114,0)
 Q
"RTN","EASEZU4",115,0)
 ;
"RTN","EASEZU4",116,0)
SUPPRESS(EASAPP,DATAKEY,TYPE,VERSION) ;alb/cmf/51
"RTN","EASEZU4",117,0)
 ;EASAPP = file 712 ien
"RTN","EASEZU4",118,0)
 ;DATAKEY = file 711/.1
"RTN","EASEZU4",119,0)
 ;TYPE = 0:display[default], 1:file, 2:accept
"RTN","EASEZU4",120,0)
 ;VERSION = version # of an application
"RTN","EASEZU4",121,0)
 ;
"RTN","EASEZU4",122,0)
 ;RETURN VALUE = 1 if node should not be displayed, filed, or accepted
"RTN","EASEZU4",123,0)
 ;               0, otherwise
"RTN","EASEZU4",124,0)
 ;
"RTN","EASEZU4",125,0)
 N FLAG,CHKKEY
"RTN","EASEZU4",126,0)
 Q:$G(EASAPP)="" 0
"RTN","EASEZU4",127,0)
 Q:$G(DATAKEY)="" 0
"RTN","EASEZU4",128,0)
 S:$G(VERSION)="" VERSION=$$VERSION(EASAPP)
"RTN","EASEZU4",129,0)
 Q:+VERSION<6 0
"RTN","EASEZU4",130,0)
 S FLAG=0
"RTN","EASEZU4",131,0)
 ;EAS*1.0*70 -- added CHKKEY and up-arrows around datakeys below
"RTN","EASEZU4",132,0)
 S CHKKEY="^"_DATAKEY_"^"
"RTN","EASEZU4",133,0)
 S TYPE=$S($G(TYPE)=1:1,$G(TYPE)=2:2,1:0)
"RTN","EASEZU4",134,0)
 I TYPE=0 D  Q FLAG
"RTN","EASEZU4",135,0)
 . I "^I;18A.^I;18B.^I;18C.^I;18D.^"[CHKKEY S FLAG=1 Q   ;obs
"RTN","EASEZU4",136,0)
 . I "^IIC;1.1^IIC;1.2^IIC;1.3^"[CHKKEY S FLAG=1 Q       ;obs
"RTN","EASEZU4",137,0)
 . I "^I;1A.5^IIC;3.^I;14D1.^"[CHKKEY S FLAG=1 Q         ;obs
"RTN","EASEZU4",138,0)
 . I "^I;14C.^I;14D.^I;14D2.^I;14H.^"[CHKKEY S FLAG=1 Q  ;obs
"RTN","EASEZU4",139,0)
 . I "^IIE;1.^IIE;2.^IIE;3.^"[CHKKEY S FLAG=1 Q          ;print only
"RTN","EASEZU4",140,0)
 . ;EAS*1.0*70 - until added to the web form,
"RTN","EASEZU4",141,0)
 . ;only print and file APPLICANT COUNTRY
"RTN","EASEZU4",142,0)
 . I "^I;9H.^"[CHKKEY S FLAG=1 Q
"RTN","EASEZU4",143,0)
 . Q
"RTN","EASEZU4",144,0)
 I TYPE=1 D  Q FLAG
"RTN","EASEZU4",145,0)
 . I "^I;14D.^I;14D1.^I;14D2.^"[CHKKEY S FLAG=1 Q    ;obs
"RTN","EASEZU4",146,0)
 . I "^IIC;1.1^IIC;1.2^IIC;1.3^"[CHKKEY S FLAG=1 Q   ;obs
"RTN","EASEZU4",147,0)
 . I "^IIE;1.^IIE;2.^IIE;3.^"[CHKKEY S FLAG=1 Q      ;print only
"RTN","EASEZU4",148,0)
 . I "^IIC;1.6^IIC;2.3^IIC;3.3^"[CHKKEY S FLAG=1 Q   ;disp only
"RTN","EASEZU4",149,0)
 . Q
"RTN","EASEZU4",150,0)
 ;
"RTN","EASEZU4",151,0)
 Q FLAG
"RTN","EASEZU4",152,0)
 ;
"RTN","EASEZU4",153,0)
VERSION(EASAPP) ;alb/cmf/51
"RTN","EASEZU4",154,0)
 ;return the version # of an application
"RTN","EASEZU4",155,0)
 Q:$G(EASAPP)="" -1
"RTN","EASEZU4",156,0)
 Q:'$D(^EAS(712,EASAPP)) -1
"RTN","EASEZU4",157,0)
 Q +$P(^EAS(712,EASAPP,0),U,12)
"RTN","EASEZU4",158,0)
 ;
"RTN","EASEZU5")
0^8^B63580924
"RTN","EASEZU5",1,0)
EASEZU5 ;ALB/jap - Utilities for 1010EZ Processing ; 5/27/08 12:23pm
"RTN","EASEZU5",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**1,51,70**;Mar 15, 2001;Build 26
"RTN","EASEZU5",3,0)
 ;
"RTN","EASEZU5",4,0)
PRTCOMP ;print comparison of 10-10EZ data with VistA data
"RTN","EASEZU5",5,0)
 N ACTION
"RTN","EASEZU5",6,0)
 S ACTION="'Print Data'"
"RTN","EASEZU5",7,0)
 ;no action if closed
"RTN","EASEZU5",8,0)
 I EASPSTAT="CLS" D NOACT^EASEZLM("Inactivated",ACTION) Q
"RTN","EASEZU5",9,0)
 ;proceed with print of data comparison
"RTN","EASEZU5",10,0)
 W !,"Data Print queued to background...",!
"RTN","EASEZU5",11,0)
 S VALMBCK="R"
"RTN","EASEZU5",12,0)
 D PAUSE^VALM1
"RTN","EASEZU5",13,0)
 Q
"RTN","EASEZU5",14,0)
 ;
"RTN","EASEZU5",15,0)
UPDATE ;update/overwrite a 10-10EZ data element
"RTN","EASEZU5",16,0)
 N ACTION,SIGDATE,EASSEL,EASERR,EASLN,LN,SUBIEN,MULTIPLE,KEYIEN,UPDATE,UPDATE2,FILE,SUBFILE,FLD,FFF
"RTN","EASEZU5",17,0)
 N ORIGINAL,DATANM,UPDATE,CODE,FILE,SUBFILE,FLD,FDEF,FTYPE,ROOT,SETCODES,MIN,MAX,X,Y,DA,DR,DIC,DIE,DIR,X1,X2,X3
"RTN","EASEZU5",18,0)
 ;variable ORIGINAL holds original 1010EZ data
"RTN","EASEZU5",19,0)
 S ACTION="'Update Field'"
"RTN","EASEZU5",20,0)
 ;no action if closed
"RTN","EASEZU5",21,0)
 I EASPSTAT="CLS" D NOACT^EASEZLM("Inactivated",ACTION) Q
"RTN","EASEZU5",22,0)
 ;invalid for the following process status
"RTN","EASEZU5",23,0)
 I EASPSTAT="NEW" D NOACT^EASEZLM("New",ACTION) Q
"RTN","EASEZU5",24,0)
 I EASPSTAT="PRT" D NOACT^EASEZLM("Unsigned",ACTION) Q
"RTN","EASEZU5",25,0)
 I EASPSTAT="FIL" D NOACT^EASEZLM("Filed",ACTION) Q
"RTN","EASEZU5",26,0)
 ;select data item to update
"RTN","EASEZU5",27,0)
 S VALMBCK="R"
"RTN","EASEZU5",28,0)
 D SEL^EASEZLM
"RTN","EASEZU5",29,0)
 Q:$G(EASERR)
"RTN","EASEZU5",30,0)
 Q:'$G(EASSEL)
"RTN","EASEZU5",31,0)
 S EASLN=EASSEL
"RTN","EASEZU5",32,0)
 ;
"RTN","EASEZU5",33,0)
 ;use DIR reader to get input from user which overwrites 1010EZ data
"RTN","EASEZU5",34,0)
 D FULL^VALM1
"RTN","EASEZU5",35,0)
 S DIR(0)="",(FDEF,FTYPE)=""
"RTN","EASEZU5",36,0)
 S LN=^TMP("EASEXP",$J,"IDX",EASLN),SUBIEN=$P(LN,U,1),MULTIPLE=$P(LN,U,2),KEYIEN=$P(LN,U,3)
"RTN","EASEZU5",37,0)
 S X=$G(^TMP("EZDATA",$J,KEYIEN,MULTIPLE,1)),ORIGINAL=$P(X,U,1),ACCEPT=$P(X,U,2)
"RTN","EASEZU5",38,0)
 S DATANM=$P($G(^EAS(711,KEYIEN,0)),U,1)
"RTN","EASEZU5",39,0)
 S:DATANM="ASSET(N) CASH IN BANK" DATANM="CHILD(N) CASH IN BANK"
"RTN","EASEZU5",40,0)
 S:DATANM="ASSET(N) LAND/BLDGS. LESS MORTGAGES" DATANM="CHILD(N) LAND/BLDGS. LESS MORTGAGES"
"RTN","EASEZU5",41,0)
 S:DATANM="ASSET(N) OTHER PROPERTY, ASSETS LESS AMT. OWED" DATANM="CHILD(N) LAND/BLDGS. LESS MORTGAGES"
"RTN","EASEZU5",42,0)
 S DIR("A")=DATANM
"RTN","EASEZU5",43,0)
 ;if #3 of file #711 is defined then use to set DIR(0);
"RTN","EASEZU5",44,0)
 S X=$G(^EAS(711,KEYIEN,3)) I X'="" X X
"RTN","EASEZU5",45,0)
 S FFF=$G(^EAS(711,KEYIEN,1)),FILE=$P(FFF,U,1),SUBFILE=$P(FFF,U,2),FLD=$P(FFF,U,3)
"RTN","EASEZU5",46,0)
 ;don't allow updates to data which cannot be filed
"RTN","EASEZU5",47,0)
 I ((FILE=0)!(ACCEPT=-1)) D  Q
"RTN","EASEZU5",48,0)
 . W !!,?5,"Sorry...the selected data element cannot be 'Updated'."
"RTN","EASEZU5",49,0)
 . D ADDMSG ;alb/cmf/51
"RTN","EASEZU5",50,0)
 . W !!,?5,"After filing this Application to VistA, use Register a Patient "
"RTN","EASEZU5",51,0)
 . W !,?5,"or Patient Enrollment to enter/update data as needed.",!
"RTN","EASEZU5",52,0)
 . K DIR D PAUSE^VALM1 S VALMBCK="R"
"RTN","EASEZU5",53,0)
 ;exceptions for data input; too complex for simple DIR call;
"RTN","EASEZU5",54,0)
 I DATANM["NAME",DATANM'["OTHER" D ANAME^EASEZU6(EASLN,LN,DATANM) Q
"RTN","EASEZU5",55,0)
 I DATANM["PHONE" D APHONE^EASEZU6(EASLN,LN,DATANM) Q
"RTN","EASEZU5",56,0)
 I DATANM["COUNTY" D ACOUNTY^EASEZU6(EASLN,LN,DATANM) Q
"RTN","EASEZU5",57,0)
 I DATANM["STATE" D ASTATE^EASEZU6(EASLN,LN,DATANM) Q
"RTN","EASEZU5",58,0)
 I DATANM["SOCIAL SECURITY NUMBER",FILE'=2 D ASSN^EASEZU6(EASLN,LN,DATANM,ACCEPT) Q
"RTN","EASEZU5",59,0)
 ;setup DIR(0) for remaining mapped-to data elements
"RTN","EASEZU5",60,0)
 I DIR(0)="",FLD'=0 D
"RTN","EASEZU5",61,0)
 . ;use DIR read based on mapped-to file/field for all other data elements
"RTN","EASEZU5",62,0)
 . I (SUBFILE=FILE)!(SUBFILE="") S FDEF=FILE
"RTN","EASEZU5",63,0)
 . E  S FDEF=SUBFILE
"RTN","EASEZU5",64,0)
 . S FTYPE=$$GET1^DID(FDEF,FLD,"","TYPE")
"RTN","EASEZU5",65,0)
 . ;can't use DD type read, some fields will error because DA is not defined for the input transform;
"RTN","EASEZU5",66,0)
 . ;so set DIR(0) according to field type of VistA target location instead;
"RTN","EASEZU5",67,0)
 . I FTYPE["POINTER" D
"RTN","EASEZU5",68,0)
 . . ;mapped to pointer field
"RTN","EASEZU5",69,0)
 . . S ROOT=$$GET1^DID(FDEF,FLD,"","POINTER")
"RTN","EASEZU5",70,0)
 . . I ROOT'="" S DIR(0)="P"_U_ROOT_":EMZ"
"RTN","EASEZU5",71,0)
 . I FTYPE="SET" D
"RTN","EASEZU5",72,0)
 . . ;mapped to set of codes field
"RTN","EASEZU5",73,0)
 . . S X=^DD(FDEF,FLD,0)
"RTN","EASEZU5",74,0)
 . . S SETCODES=$P(X,U,3) K X
"RTN","EASEZU5",75,0)
 . . S DIR(0)="S"_U_SETCODES
"RTN","EASEZU5",76,0)
 . I FTYPE="DATE/TIME" D
"RTN","EASEZU5",77,0)
 . . ;mapped to date/time field
"RTN","EASEZU5",78,0)
 . . S DIR(0)="D^::AEP"
"RTN","EASEZU5",79,0)
 . I FTYPE="FREE TEXT" D
"RTN","EASEZU5",80,0)
 . . ;mapped to free text field
"RTN","EASEZU5",81,0)
 . . S MAX=$$GET1^DID(FDEF,FLD,"","FIELD LENGTH")
"RTN","EASEZU5",82,0)
 . . I MAX S DIR(0)="F^1:"_MAX
"RTN","EASEZU5",83,0)
 . . E  S DIR(0)="F^1:80"
"RTN","EASEZU5",84,0)
 . I FTYPE="NUMERIC" D
"RTN","EASEZU5",85,0)
 . . ;mapped to numeric field
"RTN","EASEZU5",86,0)
 . . S FINP=$$GET1^DID(FDEF,FLD,"","INPUT TRANSFORM")
"RTN","EASEZU5",87,0)
 . . S MIN=+$P(FINP,"X<",2),MAX=+$P(FINP,"X>",2)
"RTN","EASEZU5",88,0)
 . . ;ALB/70/AMA -- allow 2 decimal places
"RTN","EASEZU5",89,0)
 . . I MAX S DIR(0)="N"_U_MIN_":"_MAX_":2"
"RTN","EASEZU5",90,0)
 . . E  S DIR(0)="N^0:9999999:2"
"RTN","EASEZU5",91,0)
 . . ;Only non-decimal-place field is Rated Percentage, 2/.302
"RTN","EASEZU5",92,0)
 . . I (FDEF=2),(FLD=.302) S DIR(0)=$P(DIR(0),":",1,2)_":0"
"RTN","EASEZU5",93,0)
 I FLD=0 D
"RTN","EASEZU5",94,0)
 . ;unmapped data element
"RTN","EASEZU5",95,0)
 . I DIR(0)="" S DIR(0)="F^1:80"
"RTN","EASEZU5",96,0)
 ;make the DIR call for user input only if DIR(0) has been set
"RTN","EASEZU5",97,0)
 Q:DIR(0)=""
"RTN","EASEZU5",98,0)
 D ^DIR
"RTN","EASEZU5",99,0)
 ;don't continue if user exited w/o input
"RTN","EASEZU5",100,0)
 Q:($D(DTOUT)!$D(DUOUT))
"RTN","EASEZU5",101,0)
 K DIR,DTOUT,DUOUT,DIRUT
"RTN","EASEZU5",102,0)
 ;pickup the DIR output
"RTN","EASEZU5",103,0)
 S UPDATE=$P($G(Y(0)),U,1) S:UPDATE="" UPDATE=$P($G(Y),U,1)
"RTN","EASEZU5",104,0)
 ;don't continue if no data
"RTN","EASEZU5",105,0)
 Q:UPDATE=""
"RTN","EASEZU5",106,0)
 ;convert dates to mm/dd/yyyy
"RTN","EASEZU5",107,0)
 I FTYPE="DATE/TIME" D
"RTN","EASEZU5",108,0)
 . ;Y holds date from DIR call in internal format 
"RTN","EASEZU5",109,0)
 . S %F=5,UPDATE2=$$FMTE^XLFDT(Y,%F) I $L(UPDATE2)<10 D
"RTN","EASEZU5",110,0)
 . . S X1=$P(UPDATE2,"/",1),X2=$P(UPDATE2,"/",2),X3=$P(UPDATE2,"/",3)
"RTN","EASEZU5",111,0)
 . . S:$L(X1)=1 X1="0"_X1 S:$L(X2)=1 X2="0"_X2
"RTN","EASEZU5",112,0)
 . . S UPDATE2=X1_"/"_X2_"/"_X3
"RTN","EASEZU5",113,0)
 . . S UPDATE=UPDATE2
"RTN","EASEZU5",114,0)
 ;special handling for field #.362
"RTN","EASEZU5",115,0)
 I FILE=2,FLD=.362,EASVRSN>5.99 D
"RTN","EASEZU5",116,0)
 . I UPDATE["IN LIEU OF VA COMP" S UPDATE="YES"
"RTN","EASEZU5",117,0)
 . I UPDATE="YES, RECEIVING MILITARY RETIREMENT" S UPDATE="NO"
"RTN","EASEZU5",118,0)
 ;don't continue if no change to data
"RTN","EASEZU5",119,0)
 Q:(UPDATE=ORIGINAL)
"RTN","EASEZU5",120,0)
 Q:(UPDATE="")
"RTN","EASEZU5",121,0)
 ;
"RTN","EASEZU5",122,0)
 I 'ACCEPT S ACCEPT=1
"RTN","EASEZU5",123,0)
 S $P(^TMP("EZDATA",$J,KEYIEN,MULTIPLE,1),U,1,2)=UPDATE_U_ACCEPT
"RTN","EASEZU5",124,0)
 ;file data element; any manually updated element is 'accepted'
"RTN","EASEZU5",125,0)
 S DIE="^EAS(712,EASAPP,10,",DA=SUBIEN,DA(1)=EASAPP,DR(1)="10;"
"RTN","EASEZU5",126,0)
 S DR="1.5///^S X=UPDATE;1.1///^S X=ACCEPT;1.2///^S X=DT;1.3////^S X=DUZ"
"RTN","EASEZU5",127,0)
 D ^DIE
"RTN","EASEZU5",128,0)
 S VALMBCK="R"
"RTN","EASEZU5",129,0)
 ;update screen list
"RTN","EASEZU5",130,0)
 D FLDTEXT^VALM10(EASLN,"EZDATA",UPDATE)
"RTN","EASEZU5",131,0)
 D FLDCTRL^VALM10(EASLN,"EZDATA",IORVON,IORVOFF)
"RTN","EASEZU5",132,0)
 D WRITE^VALM10(EASLN)
"RTN","EASEZU5",133,0)
 Q
"RTN","EASEZU5",134,0)
 ;
"RTN","EASEZU5",135,0)
REMSIG ;remove signature verification from selected Application
"RTN","EASEZU5",136,0)
 N APP,STATUS,DA,DIC,DR,DIR,DIRUT,DUOUT,DTOUT,S,X,Y
"RTN","EASEZU5",137,0)
 W @IOF
"RTN","EASEZU5",138,0)
 W !!,"Lookup and selection for Signature Verification Removal"
"RTN","EASEZU5",139,0)
 W !,"is by Application # only."
"RTN","EASEZU5",140,0)
 W !!,"Only Applications with a Signature Verification Date, but no"
"RTN","EASEZU5",141,0)
 W !,"Filing Date may be selected.",!!
"RTN","EASEZU5",142,0)
 S DIC="^EAS(712,",DIC(0)="AENQXZ",DIC("S")="I +$P($G(^(1)),U,2)>0,+$P($G(^(2)),U,5)=0"
"RTN","EASEZU5",143,0)
 D ^DIC
"RTN","EASEZU5",144,0)
 S APP=+Y
"RTN","EASEZU5",145,0)
 I APP>0 D
"RTN","EASEZU5",146,0)
 . S DIR(0)="YA",DIR("A")="Are you sure Signature Verification should be removed? (Y/N): " D ^DIR
"RTN","EASEZU5",147,0)
 . Q:$D(DIRUT)
"RTN","EASEZU5",148,0)
 . Q:'Y
"RTN","EASEZU5",149,0)
 . W !!,"One moment please...",!
"RTN","EASEZU5",150,0)
 . ;remove signature verification data; update audit fields for sig. removal
"RTN","EASEZU5",151,0)
 . S DA=APP K X,Y
"RTN","EASEZU5",152,0)
 . S DIE=DIC,DR="4///^S X=""@"";4.1///^S X=""@"";4.2///^S X=""@"";4.6///^S X=DT;4.7////^S X=DUZ"
"RTN","EASEZU5",153,0)
 . D ^DIE
"RTN","EASEZU5",154,0)
 . D APPINDEX^EASEZU2(APP)
"RTN","EASEZU5",155,0)
 . S S=$$CURRSTAT^EASEZU2(APP),STATUS=$S(S="PRT":"Printed, Pending Signature",1:"In Review")
"RTN","EASEZU5",156,0)
 . W !!,"Signature Verification removed..."
"RTN","EASEZU5",157,0)
 . W !!,"Application #"_APP_" STATUS -- ",STATUS
"RTN","EASEZU5",158,0)
 W !!
"RTN","EASEZU5",159,0)
 Q
"RTN","EASEZU5",160,0)
 ;
"RTN","EASEZU5",161,0)
ADDMSG ;alb/cmf/51 - special update messages by field
"RTN","EASEZU5",162,0)
 N SECT,S1,S2
"RTN","EASEZU5",163,0)
 Q:EASVRSN<6
"RTN","EASEZU5",164,0)
 S SECT=$P($P(^EAS(711,KEYIEN,0),U,2),";")
"RTN","EASEZU5",165,0)
 Q:SECT'["II"
"RTN","EASEZU5",166,0)
 ;
"RTN","EASEZU5",167,0)
 I SECT="IIC" D  Q
"RTN","EASEZU5",168,0)
 . I DATANM="CHILD1 GROSS ANNUAL INCOME2" D  Q
"RTN","EASEZU5",169,0)
 . . D INCTOT("Employment","employment")
"RTN","EASEZU5",170,0)
 . I DATANM="CHILD1 OTHER INCOME AMOUNTS" D  Q
"RTN","EASEZU5",171,0)
 . . D INCTOT("Other","other")
"RTN","EASEZU5",172,0)
 . I DATANM="CHILD1 FARM OR BUSINESS INCOME" D  Q
"RTN","EASEZU5",173,0)
 . . D INCTOT("Farm/Business","farm/business")
"RTN","EASEZU5",174,0)
 ;
"RTN","EASEZU5",175,0)
 I SECT="IIE" D  Q
"RTN","EASEZU5",176,0)
 . I DATANM="CHILD1 CASH IN BANK" D  Q
"RTN","EASEZU5",177,0)
 . . D ASSTOT("Cash in Bank","cash in bank")
"RTN","EASEZU5",178,0)
 . I DATANM="CHILD1 LAND/BLDGS. LESS MORTGAGES" D  Q
"RTN","EASEZU5",179,0)
 . . D ASSTOT("Land/Bldgs.","land/bldgs.")
"RTN","EASEZU5",180,0)
 . I DATANM="CHILD1 OTHER PROPERTY, ASSETS LESS AMT. OWED" D  Q
"RTN","EASEZU5",181,0)
 . . D ASSTOT("Other Property","other property")
"RTN","EASEZU5",182,0)
 ;
"RTN","EASEZU5",183,0)
 I SECT="IIG" D  Q
"RTN","EASEZU5",184,0)
 . I DATANM="ASSET(N) CHILD CASH" D CHLDASS("Cash in Bank") Q
"RTN","EASEZU5",185,0)
 . I DATANM="ASSET(N) CHILD REAL PROPERTY" D CHLDASS("Real Property") Q
"RTN","EASEZU5",186,0)
 . I DATANM="ASSET(N) CHILD OTHER PROPERTY" D CHLDASS("Other Property") Q
"RTN","EASEZU5",187,0)
 Q
"RTN","EASEZU5",188,0)
 ;
"RTN","EASEZU5",189,0)
INCTOT(S1,S2) ; income total messages
"RTN","EASEZU5",190,0)
 W !!,?5,"The "_S1_" Income Child Total is the sum of the"
"RTN","EASEZU5",191,0)
 W !,?5,"individual child "_S2_" income values.  The Child Total"
"RTN","EASEZU5",192,0)
 W !,?5,"may only be updated by adjusting the individual child"
"RTN","EASEZU5",193,0)
 W !,?5,S2_" income values.  - or..."
"RTN","EASEZU5",194,0)
 Q
"RTN","EASEZU5",195,0)
 ;
"RTN","EASEZU5",196,0)
ASSTOT(S1,S2) ; asset total messages
"RTN","EASEZU5",197,0)
 W !!,?5,"The "_S1_" Child Total is the sum of the individual child"
"RTN","EASEZU5",198,0)
 W !,?5,S2_" values.  The Child Total may only be adjusted by"
"RTN","EASEZU5",199,0)
 W !,?5,"updating the individual child "_S2_" values.  - or..."
"RTN","EASEZU5",200,0)
 Q
"RTN","EASEZU5",201,0)
 ;
"RTN","EASEZU5",202,0)
CHLDASS(S1) ; child asset messages
"RTN","EASEZU5",203,0)
 W !!,?5,"The "_S1_" child amount has been added to the "_S1
"RTN","EASEZU5",204,0)
 W !,?5,"Veteran amount.  The "_S1_" child amount may only"
"RTN","EASEZU5",205,0)
 W !,?5,"be adjusted by updating the "_S1_" Veteran amount."
"RTN","EASEZU5",206,0)
 W !,?5,"  - or..."
"RTN","EASEZU5",207,0)
 Q
"RTN","EASEZU5",208,0)
 ;
"RTN","EASEZW")
0^27^B32880175
"RTN","EASEZW",1,0)
EASEZW ;ALB/jap - Auto-process 1010EZ from Web-based Application ; 5/23/08 4:30pm
"RTN","EASEZW",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**2,51,70**;Mar 15, 2001;Build 26
"RTN","EASEZW",3,0)
 ;
"RTN","EASEZW",4,0)
EN ;entry point from server option
"RTN","EASEZW",5,0)
 ;standard server variables XMZ,XMRG,XMER
"RTN","EASEZW",6,0)
 ;new incoming 1010EZ application data to be filed in #712
"RTN","EASEZW",7,0)
 ;
"RTN","EASEZW",8,0)
 Q:'$G(XMZ)
"RTN","EASEZW",9,0)
 S X=$P(^XMB(3.9,XMZ,0),U,1)
"RTN","EASEZW",10,0)
 ;won't always know the exact format of message subject
"RTN","EASEZW",11,0)
 S X=$P(X,"SID ",2),X=$P(X,U,1),X=$P(X,":",1)
"RTN","EASEZW",12,0)
 S EASWEBID=$TR(X," ","")
"RTN","EASEZW",13,0)
 Q:EASWEBID=""
"RTN","EASEZW",14,0)
 ;don't process if this web submission has been previously rec'd;
"RTN","EASEZW",15,0)
 I $D(^EAS(712,"W",EASWEBID)) D  Q
"RTN","EASEZW",16,0)
 . S EASAPP=$O(^EAS(712,"W",EASWEBID,0))
"RTN","EASEZW",17,0)
 . ;make sure this is an automated 1010EZ data msg
"RTN","EASEZW",18,0)
 . S OK=0 F  X XMREC Q:XMER=-1  S LINE=XMRG D  Q:OK
"RTN","EASEZW",19,0)
 . . I (LINE["SECTION")!(LINE["Section") S LINE=$$UC^EASEZT1(LINE)
"RTN","EASEZW",20,0)
 . . I LINE["VISTA AUTOMATION" S OK=1
"RTN","EASEZW",21,0)
 . ;send receipt confirmation to get Forum in sync and quit
"RTN","EASEZW",22,0)
 . I OK D CONFIRM(EASWEBID,EASAPP,XMZ)
"RTN","EASEZW",23,0)
 ;continue processing if this web submission is new
"RTN","EASEZW",24,0)
 ;get facility applying to (station #)
"RTN","EASEZW",25,0)
 S X=$P($P(^XMB(3.9,XMZ,0),U,1),":",1) I X'="" D
"RTN","EASEZW",26,0)
 . S EASFAC=X,X=$E(X,1,3)
"RTN","EASEZW",27,0)
 . I +X'=X S EASFAC=""
"RTN","EASEZW",28,0)
 ;get message receipt date
"RTN","EASEZW",29,0)
 S EASRECD=$P($P($G(^XMB(3.9,XMZ,.6)),U,1),".",1)
"RTN","EASEZW",30,0)
 ;set next ien for file #712 to match #.01 field, not less than 101
"RTN","EASEZW",31,0)
 S OUT=0,CYCLE=0 F  D  Q:OUT  Q:CYCLE>5
"RTN","EASEZW",32,0)
 . S CYCLE=CYCLE+1
"RTN","EASEZW",33,0)
 . S DINUM=$O(^EAS(712,"B",""),-1) S:'DINUM DINUM=$O(^EAS(712,999999999),-1)
"RTN","EASEZW",34,0)
 . S DINUM=DINUM+1 S:DINUM<100 DINUM=DINUM+100
"RTN","EASEZW",35,0)
 . S DIC="^EAS(712,",DIC(0)="L",DLAYGO="",(NEWIEN,X)=DINUM
"RTN","EASEZW",36,0)
 . K DD,DO D FILE^DICN
"RTN","EASEZW",37,0)
 . ;repair faulty "B" index
"RTN","EASEZW",38,0)
 . I Y=-1,$D(^EAS(712,NEWIEN,0)) S ^EAS(712,"B",NEWIEN,NEWIEN)="" H 3
"RTN","EASEZW",39,0)
 . I Y>0 S OUT=1
"RTN","EASEZW",40,0)
 Q:+Y<0
"RTN","EASEZW",41,0)
 S (DA,EASAPP)=+Y
"RTN","EASEZW",42,0)
 S DIE="^EAS(712,"
"RTN","EASEZW",43,0)
 S DR=".2///^S X=XMZ;3////^S X=EASRECD;3.1///^S X=.5;3.2///^S X=""W"";4.5///^S X=EASFAC"
"RTN","EASEZW",44,0)
 D ^DIE
"RTN","EASEZW",45,0)
 S LINES=$$LINES()
"RTN","EASEZW",46,0)
 I 'LINES D
"RTN","EASEZW",47,0)
 . S DA=EASAPP,DIK="^EAS(712," D ^DIK
"RTN","EASEZW",48,0)
 I LINES D NMSSNDOB D DESIGNEE D CONFIRM(EASWEBID,EASAPP,XMZ)
"RTN","EASEZW",49,0)
 ;EAS*1.0*70 - Check for APPLICANT COUNTRY
"RTN","EASEZW",50,0)
 I LINES D
"RTN","EASEZW",51,0)
 . N X,EASKEY,EASDATA,EASIEN,DINUM,DIC,DIE,DLAYGO,DA,DR,MULTIPLE,ACCEPT
"RTN","EASEZW",52,0)
 . S X=+$$KEY711^EASEZU1("APPLICANT COUNTRY")
"RTN","EASEZW",53,0)
 . I '$D(^EAS(712,EASAPP,10,"B",X)) D
"RTN","EASEZW",54,0)
 . . S EASKEY="I;9H.",EASDATA="USA"
"RTN","EASEZW",55,0)
 . . S (EASIEN,DINUM)=$O(^EAS(712,EASAPP,10,"B"),-1)+1
"RTN","EASEZW",56,0)
 . . S (DIC,DIE)="^EAS(712,EASAPP,10,",DIC(0)="L",DLAYGO=""
"RTN","EASEZW",57,0)
 . . S DA(1)=EASAPP,DIC("P")=$P(^DD(712,10,0),U,2)
"RTN","EASEZW",58,0)
 . . K DD,DO D FILE^DICN
"RTN","EASEZW",59,0)
 . . S DA=EASIEN,DR(1)="10;",MULTIPLE=1,ACCEPT=1
"RTN","EASEZW",60,0)
 . . S DR=".1///^S X=MULTIPLE;1///^S X=EASDATA;1.1///^S X=ACCEPT;"
"RTN","EASEZW",61,0)
 . . D ^DIE
"RTN","EASEZW",62,0)
 Q
"RTN","EASEZW",63,0)
 ;
"RTN","EASEZW",64,0)
LINES() ;parse data lines from message into #712 record
"RTN","EASEZW",65,0)
 N OUT,SECT,LINE,KEYIEN,DATANM,ADDCHILD,MULTIPLE,ZM,ZMM,OUT,DA,DR,DIC,DIE,DINUM,DLAYGO
"RTN","EASEZW",66,0)
 N ADDINSUR,ADDINCOM,ADDASSET,HIIE
"RTN","EASEZW",67,0)
 ;find beginning of data lines
"RTN","EASEZW",68,0)
 S OUT=0 F  X XMREC Q:XMER=-1  S LINE=XMRG D  Q:OUT
"RTN","EASEZW",69,0)
 . I (LINE["SECTION")!(LINE["Section") S LINE=$$UC^EASEZT1(LINE)
"RTN","EASEZW",70,0)
 . I LINE["VISTA AUTOMATION" S OUT=1
"RTN","EASEZW",71,0)
 . I LINE["SECTION" D  Q
"RTN","EASEZW",72,0)
 . . S SECT=$P(LINE," - ",1),SECT=$TR(SECT," ",""),SECT=$P(SECT,"SECTION",2)
"RTN","EASEZW",73,0)
 . . S EASSECT=$TR(SECT,".","")
"RTN","EASEZW",74,0)
 I 'OUT Q 0
"RTN","EASEZW",75,0)
 ;file data lines
"RTN","EASEZW",76,0)
 ;variable EASIEN is the subrecord ien for data filing in file #712
"RTN","EASEZW",77,0)
 S EASIEN=0,OUT=0,ADDCHILD=0
"RTN","EASEZW",78,0)
 S ADDINSUR=0,ADDINCOM=0,ADDASSET=0
"RTN","EASEZW",79,0)
 F  X XMREC Q:XMER=-1  D  Q:OUT
"RTN","EASEZW",80,0)
 . S LINE=XMRG
"RTN","EASEZW",81,0)
 . I (LINE["SECTION")!(LINE["Section") S LINE=$$UC^EASEZT1(LINE)
"RTN","EASEZW",82,0)
 . I LINE["SECTION III" D SEC3 S OUT=1 Q
"RTN","EASEZW",83,0)
 . I $E(LINE,1,3)="EOF" Q
"RTN","EASEZW",84,0)
 . I LINE["ADDITIONAL CHILD" S ADDCHILD=ADDCHILD+1 Q
"RTN","EASEZW",85,0)
 . I LINE["ADDITIONAL INSURANCE" S ADDINSUR=ADDINSUR+1 Q
"RTN","EASEZW",86,0)
 . I LINE["ADDITIONAL INCOME" S ADDINCOM=ADDINCOM+1 Q
"RTN","EASEZW",87,0)
 . I LINE["ADDITIONAL ASSET" S ADDASSET=ADDASSET+1 Q
"RTN","EASEZW",88,0)
 . I LINE["SECTION" D  Q
"RTN","EASEZW",89,0)
 . . S SECT=$P(LINE," - ",1),SECT=$TR(SECT," ",""),SECT=$P(SECT,"SECTION",2)
"RTN","EASEZW",90,0)
 . . S EASSECT=$TR(SECT,".","")
"RTN","EASEZW",91,0)
 . S ZM=1,ZMM=2
"RTN","EASEZW",92,0)
 . F  D  Q:EASKEY=""  S ZM=ZM+2,ZMM=ZM+1
"RTN","EASEZW",93,0)
 . . S EASKEY=$P(LINE,U,ZM),EASKEY=$TR(EASKEY," ","")
"RTN","EASEZW",94,0)
 . . Q:EASKEY=""
"RTN","EASEZW",95,0)
 . . S EASDATA=$E($P(LINE,U,ZMM),1,240)
"RTN","EASEZW",96,0)
 . . ;don't file null data
"RTN","EASEZW",97,0)
 . . Q:(EASDATA=" ")!(EASDATA="")
"RTN","EASEZW",98,0)
 . . ;don't file 'empty' dates, phone numbers, ssns, etc.
"RTN","EASEZW",99,0)
 . . Q:(EASDATA="/")  Q:(EASDATA="//")  Q:(EASDATA="-")  Q:(EASDATA="--")  Q:(EASDATA["?")
"RTN","EASEZW",100,0)
 . . I EASKEY["." S EASKEY=EASSECT_";"_EASKEY
"RTN","EASEZW",101,0)
 . . I (EASKEY="IIE;1.")!(EASKEY="IIE;2.")!(EASKEY="IIE;3.") S HIIE(EASKEY)=EASDATA
"RTN","EASEZW",102,0)
 . . I (EASKEY="IIE;1.1")!(EASKEY="IIE;2.1")!(EASKEY="IIE;3.1") S EASDATA=$G(HIIE($E(EASKEY,1,6)))
"RTN","EASEZW",103,0)
 . . ;find this data element in the mapping file #711
"RTN","EASEZW",104,0)
 . . S X=$$KEY711^EASEZU1(EASKEY),KEYIEN=+X,DATANM=$P(X,U,2)
"RTN","EASEZW",105,0)
 . . S EASIEN=EASIEN+1
"RTN","EASEZW",106,0)
 . . ;create subrecord
"RTN","EASEZW",107,0)
 . . S DIC="^EAS(712,EASAPP,10,",DIC(0)="L",DLAYGO="",X=KEYIEN,DINUM=EASIEN
"RTN","EASEZW",108,0)
 . . S DA(1)=EASAPP,DIC("P")=$P(^DD(712,10,0),U,2)
"RTN","EASEZW",109,0)
 . . K DD,DO D FILE^DICN
"RTN","EASEZW",110,0)
 . . ;file data element
"RTN","EASEZW",111,0)
 . . S DIE="^EAS(712,EASAPP,10,",DA=EASIEN,DA(1)=EASAPP,DR(1)="10;"
"RTN","EASEZW",112,0)
 . . S MULTIPLE=1
"RTN","EASEZW",113,0)
 . . ;I DATANM["CHILD(N)" S MULTIPLE=ADDCHILD
"RTN","EASEZW",114,0)
 . . I DATANM["CHILD(N)" S MULTIPLE=$S(ADDINCOM:ADDINCOM,1:ADDCHILD)
"RTN","EASEZW",115,0)
 . . I DATANM["C(N)" S MULTIPLE=ADDCHILD
"RTN","EASEZW",116,0)
 . . I DATANM["OTHER(N)" S MULTIPLE=ADDINSUR
"RTN","EASEZW",117,0)
 . . ;I DATANM["INCOME(N)" S MULTIPLE=ADDINCOM
"RTN","EASEZW",118,0)
 . . I DATANM["ASSET(N)" S MULTIPLE=ADDASSET
"RTN","EASEZW",119,0)
 . . S DR=".1///^S X=MULTIPLE;1///^S X=EASDATA;"
"RTN","EASEZW",120,0)
 . . D ^DIE
"RTN","EASEZW",121,0)
 Q 1
"RTN","EASEZW",122,0)
 ;
"RTN","EASEZW",123,0)
 ;EAS*1.0*70 - 
"RTN","EASEZW",124,0)
 ;The following sections were split out to EASEZW2 to reduce routine
"RTN","EASEZW",125,0)
 ;size, but the tags still left in for other routines calling this one.
"RTN","EASEZW",126,0)
 ;
"RTN","EASEZW",127,0)
SEC3 ;special parsing for Section III
"RTN","EASEZW",128,0)
 D SEC3^EASEZW2   ;EAS*1.0*70 - split out to reduce rtn size
"RTN","EASEZW",129,0)
 Q
"RTN","EASEZW",130,0)
 ;
"RTN","EASEZW",131,0)
NMSSNDOB ;find applicant's name,ssn,dob in data subrecords & file in main record
"RTN","EASEZW",132,0)
 D NMSSNDOB^EASEZW2   ;EAS*1.0*70 - split out to reduce rtn size
"RTN","EASEZW",133,0)
 Q
"RTN","EASEZW",134,0)
 ;
"RTN","EASEZW",135,0)
VETTYPE(EASAPP) ;derive a veteran type categorization for this Applicant
"RTN","EASEZW",136,0)
 ;input  EASAPP = ien in file #712 for Application
"RTN","EASEZW",137,0)
 ;output TYPE   = veteran type
"RTN","EASEZW",138,0)
 ;
"RTN","EASEZW",139,0)
 Q $$VETTYPE^EASEZW2(EASAPP)   ;EAS*1.0*70 - split out to reduce rtn size
"RTN","EASEZW",140,0)
 ;
"RTN","EASEZW",141,0)
DESIGNEE ;set either NOK or E-CONTACT data into DESIGNEE
"RTN","EASEZW",142,0)
 D DESIGNEE^EASEZW2   ;EAS*1.0*70 - split out to reduce rtn size
"RTN","EASEZW",143,0)
 Q
"RTN","EASEZW",144,0)
 ;
"RTN","EASEZW",145,0)
DSGDAT ;
"RTN","EASEZW",146,0)
 ;;LAST NAME;
"RTN","EASEZW",147,0)
 ;;FIRST NAME;
"RTN","EASEZW",148,0)
 ;;STREET ADDRESS;
"RTN","EASEZW",149,0)
 ;;CITY;
"RTN","EASEZW",150,0)
 ;;STATE;
"RTN","EASEZW",151,0)
 ;;ZIP;;
"RTN","EASEZW",152,0)
 ;;HOME PHONE AREA CODE;
"RTN","EASEZW",153,0)
 ;;HOME PHONE NUMBER;
"RTN","EASEZW",154,0)
 ;;WORK PHONE AREA CODE;
"RTN","EASEZW",155,0)
 ;;WORK PHONE NUMBER;
"RTN","EASEZW",156,0)
 ;;WORK PHONE EXTENSION;
"RTN","EASEZW",157,0)
 ;;RELATIONSHIP;
"RTN","EASEZW",158,0)
 ;;QUIT
"RTN","EASEZW",159,0)
 ;
"RTN","EASEZW",160,0)
CONFIRM(EASWEBID,EASAPP,EASXMZ) ;confirm receipt of web submission message to Forum
"RTN","EASEZW",161,0)
 ;input EASAPP   = ien in file #712
"RTN","EASEZW",162,0)
 ;      EASWEBID = web submission id
"RTN","EASEZW",163,0)
 ;      EASXMZ   = ien in file #3.9 for msg being processed
"RTN","EASEZW",164,0)
 D CONFIRM^EASEZW2(EASWEBID,EASAPP,EASXMZ)   ;EAS*1.0*70 - split out to reduce rtn size
"RTN","EASEZW",165,0)
 Q
"RTN","EASEZW2")
0^28^B28975388
"RTN","EASEZW2",1,0)
EASEZW2 ;ALB/AMA - Auto-process 1010EZ from Web-based Application, part 2 ; 7/31/08 2:17pm
"RTN","EASEZW2",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**70**;Mar 15, 2001;Build 26
"RTN","EASEZW2",3,0)
 ;
"RTN","EASEZW2",4,0)
 ;This is just a continuation of EASEZW, which got too large
"RTN","EASEZW2",5,0)
 ;
"RTN","EASEZW2",6,0)
SEC3 ;special parsing for Section III
"RTN","EASEZW2",7,0)
 N OUT,DA,DIE,DR,X,C,LINE,EMAIL,EVERS,EXPECT,EDETL,ESERV,EAPREQ,ECOMM,ERR
"RTN","EASEZW2",8,0)
 ;find the Submission ID
"RTN","EASEZW2",9,0)
 S EASWEBID="",EMAIL="",EVERS="",EXPECT="",EDETL="",ESERV="",EAPREQ="" S OUT=0
"RTN","EASEZW2",10,0)
 F  X XMREC Q:XMER=-1  D  Q:OUT
"RTN","EASEZW2",11,0)
 . S LINE=XMRG
"RTN","EASEZW2",12,0)
 . I LINE["EOF",LINE["III" S OUT=1 Q
"RTN","EASEZW2",13,0)
 . I LINE["Comment" S NOCOMM=0,JJ=1 F  D  Q:NOCOMM  Q:OUT
"RTN","EASEZW2",14,0)
 . . I JJ=1 S C=$P(LINE,U,2) S ECOMM(JJ)=C
"RTN","EASEZW2",15,0)
 . . I JJ>1,$L(LINE)>1 S ECOMM(JJ)=LINE
"RTN","EASEZW2",16,0)
 . . S JJ=JJ+1
"RTN","EASEZW2",17,0)
 . . X XMREC
"RTN","EASEZW2",18,0)
 . . I XMER=-1 S NOCOMM=1,OUT=1
"RTN","EASEZW2",19,0)
 . . S LINE=XMRG
"RTN","EASEZW2",20,0)
 . . I $E(LINE,1,30)["Services Request" S NOCOMM=1
"RTN","EASEZW2",21,0)
 . I LINE["Submit ID" S EASWEBID=$P(LINE,U,2)
"RTN","EASEZW2",22,0)
 . I LINE["Email Address" S EMAIL=$P(LINE,U,2)
"RTN","EASEZW2",23,0)
 . I LINE["Version #" S EVERS=$P(LINE,U,2)
"RTN","EASEZW2",24,0)
 . I LINE["Veteran To Mail" S X=$P(LINE,U,2),EXPECT=$S(X["Vet":1,1:"")
"RTN","EASEZW2",25,0)
 . I LINE["Provide",LINE["Details" S EDETL=$P(LINE,U,2)
"RTN","EASEZW2",26,0)
 . I LINE["Appointment Request" S X=$P(LINE,U,2),EAPREQ=$S(X="YES":1,1:0)
"RTN","EASEZW2",27,0)
 . I LINE["Services Request" S ESERV=$P(LINE,U,2)
"RTN","EASEZW2",28,0)
 ;file the Submission ID into #712 record
"RTN","EASEZW2",29,0)
 S DA=EASAPP
"RTN","EASEZW2",30,0)
 S DIE="^EAS(712,"
"RTN","EASEZW2",31,0)
 S DR=".1///^S X=EASWEBID;3.6///^S X=EVERS;3.7///^S X=EXPECT;3.8///^S X=EDETL;4.3///^S X=EMAIL;"
"RTN","EASEZW2",32,0)
 S DR=DR_"4.4///^S X=EAPREQ;12///^S X=ESERV"
"RTN","EASEZW2",33,0)
 D ^DIE
"RTN","EASEZW2",34,0)
 K DA,DIE,DR,X,Y
"RTN","EASEZW2",35,0)
 I $D(ECOMM) D WP^DIE(712,EASAPP_",",13,,"ECOMM","ERR")
"RTN","EASEZW2",36,0)
 Q
"RTN","EASEZW2",37,0)
 ;
"RTN","EASEZW2",38,0)
NMSSNDOB ;find applicant's name,ssn,dob in data subrecords & file in main record
"RTN","EASEZW2",39,0)
 ;get applicant name
"RTN","EASEZW2",40,0)
 N KEY,MDL,SUFF,N,X,Y,ZX,DA,DR,DIE
"RTN","EASEZW2",41,0)
 S KEY=$$KEY711^EASEZU1("APPLICANT LAST NAME"),EASNAME=$P($$DATA712^EASEZU1(EASAPP,KEY),U,1)
"RTN","EASEZW2",42,0)
 S KEY=$$KEY711^EASEZU1("APPLICANT FIRST NAME"),EASNAME=EASNAME_","_$P($$DATA712^EASEZU1(EASAPP,KEY),U,1)
"RTN","EASEZW2",43,0)
 S KEY=$$KEY711^EASEZU1("APPLICANT MIDDLE NAME"),MDL=$P($$DATA712^EASEZU1(EASAPP,KEY),U,1)
"RTN","EASEZW2",44,0)
 S KEY=$$KEY711^EASEZU1("APPLICANT SUFFIX NAME"),SUFF=$P($$DATA712^EASEZU1(EASAPP,KEY),U,1)
"RTN","EASEZW2",45,0)
 I $L(EASNAME)+$L(MDL)>45 S MDL=$E(MDL,1)
"RTN","EASEZW2",46,0)
 I MDL'="" S EASNAME=EASNAME_" "_MDL
"RTN","EASEZW2",47,0)
 I SUFF'="" S EASNAME=EASNAME_" "_SUFF
"RTN","EASEZW2",48,0)
 S EASNAME=$$UC^EASEZT1($E(EASNAME,1,45))
"RTN","EASEZW2",49,0)
 ;get applicant ssn & dob
"RTN","EASEZW2",50,0)
 S KEY=$$KEY711^EASEZU1("APPLICANT SOCIAL SECURITY NUMBER")
"RTN","EASEZW2",51,0)
 S EASSSN=$P($$DATA712^EASEZU1(EASAPP,KEY),U,1),EASSSN=$$SSNOUT^EASEZT1(EASSSN)
"RTN","EASEZW2",52,0)
 S KEY=$$KEY711^EASEZU1("APPLICANT DATE OF BIRTH")
"RTN","EASEZW2",53,0)
 S EASDOB=$P($$DATA712^EASEZU1(EASAPP,KEY),U,1)
"RTN","EASEZW2",54,0)
 S VETTYPE=$$VETTYPE(EASAPP)
"RTN","EASEZW2",55,0)
 S N(1)=$O(^EAS(711,"AB","APPLICANT FIRST NAME",0)),KEY(1)=$P($G(^EAS(711,N(1),0)),U,2)
"RTN","EASEZW2",56,0)
 K DA,DR S DA=EASAPP,DIE="^EAS(712,"
"RTN","EASEZW2",57,0)
 S ZX=EASSSN_"&"_EASDOB
"RTN","EASEZW2",58,0)
 S DR="1///^S X=EASNAME;2///^S X=ZX;3.3///^S X=VETTYPE"
"RTN","EASEZW2",59,0)
 D ^DIE
"RTN","EASEZW2",60,0)
 Q
"RTN","EASEZW2",61,0)
 ;
"RTN","EASEZW2",62,0)
VETTYPE(EASAPP) ;derive a veteran type categorization for this Applicant
"RTN","EASEZW2",63,0)
 ;input  EASAPP = ien in file #712 for Application
"RTN","EASEZW2",64,0)
 ;output TYPE   = veteran type
"RTN","EASEZW2",65,0)
 ;
"RTN","EASEZW2",66,0)
 N KEY,PH,POW,SC,SCPC,MRET,VETTYPE
"RTN","EASEZW2",67,0)
 ;get application data needed to determine veteran type
"RTN","EASEZW2",68,0)
 S KEY=$$KEY711^EASEZU1("PURPLE HEART"),PH=$P($$DATA712^EASEZU1(EASAPP,KEY),U,1)
"RTN","EASEZW2",69,0)
 S KEY=$$KEY711^EASEZU1("PRISONER OF WAR"),POW=$P($$DATA712^EASEZU1(EASAPP,KEY),U,1)
"RTN","EASEZW2",70,0)
 S KEY=$$KEY711^EASEZU1("SERVICE-CONNECTED"),SC=$P($$DATA712^EASEZU1(EASAPP,KEY),U,1)
"RTN","EASEZW2",71,0)
 S KEY=$$KEY711^EASEZU1("RATED PERCENTAGE"),SCPC=$P($$DATA712^EASEZU1(EASAPP,KEY),U,1)
"RTN","EASEZW2",72,0)
 S KEY=$$KEY711^EASEZU1("RETIRED FROM MILITARY"),MRET=$P($$DATA712^EASEZU1(EASAPP,KEY),U,1)
"RTN","EASEZW2",73,0)
 ;set veteran type
"RTN","EASEZW2",74,0)
 I PH="Y" Q 5
"RTN","EASEZW2",75,0)
 I POW="Y" Q 4
"RTN","EASEZW2",76,0)
 I SC="Y" S TYPE=$S(+SCPC>49:1,+SCPC=0:3,1:2) Q TYPE
"RTN","EASEZW2",77,0)
 I MRET="Y" Q 6
"RTN","EASEZW2",78,0)
 Q 7
"RTN","EASEZW2",79,0)
 ;
"RTN","EASEZW2",80,0)
DESIGNEE ;set either NOK or E-CONTACT data into DESIGNEE
"RTN","EASEZW2",81,0)
 N DIC,DIE,DA,DR,X,Y,EASDATA,TYPE,MULTIPLE,XPART,KEY,EASIEN
"RTN","EASEZW2",82,0)
 S KEY=$$KEY711^EASEZU1("DESIGNEE")
"RTN","EASEZW2",83,0)
 S EZDATA=$P($$DATA712^EASEZU1(EASAPP,KEY,1),U,1)
"RTN","EASEZW2",84,0)
 I (EZDATA["EMERGENCY")!(EZDATA["CONTACT") S TYPE="E-CONTACT"
"RTN","EASEZW2",85,0)
 E  S TYPE="NEXT-OF-KIN"
"RTN","EASEZW2",86,0)
 ;place all NOK or E-CONTACT data in DESIGNEE data lements
"RTN","EASEZW2",87,0)
 F I=1:1 S X=$P($T(DSGDAT+I),";;",2) Q:X="QUIT"  D
"RTN","EASEZW2",88,0)
 . S XPART=$P(X,";",1)
"RTN","EASEZW2",89,0)
 . S KEY=$$KEY711^EASEZU1(TYPE_" "_XPART)
"RTN","EASEZW2",90,0)
 . Q:KEY=.1
"RTN","EASEZW2",91,0)
 . S KEYIEN=+$P(KEY,U,1),DATAKEY=$P(KEY,U,3)
"RTN","EASEZW2",92,0)
 . ;in file #2, multiple is always 1
"RTN","EASEZW2",93,0)
 . S MULTIPLE=1
"RTN","EASEZW2",94,0)
 . ;get the data element for the NOK or E-CONT
"RTN","EASEZW2",95,0)
 . S X=$$DATA712^EASEZU1(EASAPP,KEY,MULTIPLE),EASDATA=$P(X,U,1)
"RTN","EASEZW2",96,0)
 . Q:EASDATA=""
"RTN","EASEZW2",97,0)
 . ;and file it as DESIGNEE
"RTN","EASEZW2",98,0)
 . ;create subrecord
"RTN","EASEZW2",99,0)
 . S X=$$KEY711^EASEZU1("DESIGNEE"_" "_XPART),KEYIEN=+X
"RTN","EASEZW2",100,0)
 . S EASIEN=$O(^EAS(712,EASAPP,10,999),-1)+1
"RTN","EASEZW2",101,0)
 . S DIC="^EAS(712,EASAPP,10,",DIC(0)="L",DLAYGO="",X=KEYIEN,DINUM=EASIEN
"RTN","EASEZW2",102,0)
 . S DA(1)=EASAPP,DIC("P")=$P(^DD(712,10,0),U,2)
"RTN","EASEZW2",103,0)
 . K DD,DO D FILE^DICN
"RTN","EASEZW2",104,0)
 . ;file data element
"RTN","EASEZW2",105,0)
 . S DIE="^EAS(712,EASAPP,10,",DA=EASIEN,DA(1)=EASAPP,DR(1)="10;"
"RTN","EASEZW2",106,0)
 . S DR=".1///^S X=1;1///^S X=EASDATA;"
"RTN","EASEZW2",107,0)
 . D ^DIE
"RTN","EASEZW2",108,0)
 Q
"RTN","EASEZW2",109,0)
 ;
"RTN","EASEZW2",110,0)
DSGDAT ;
"RTN","EASEZW2",111,0)
 ;;LAST NAME;
"RTN","EASEZW2",112,0)
 ;;FIRST NAME;
"RTN","EASEZW2",113,0)
 ;;STREET ADDRESS;
"RTN","EASEZW2",114,0)
 ;;CITY;
"RTN","EASEZW2",115,0)
 ;;STATE;
"RTN","EASEZW2",116,0)
 ;;ZIP;;
"RTN","EASEZW2",117,0)
 ;;HOME PHONE AREA CODE;
"RTN","EASEZW2",118,0)
 ;;HOME PHONE NUMBER;
"RTN","EASEZW2",119,0)
 ;;WORK PHONE AREA CODE;
"RTN","EASEZW2",120,0)
 ;;WORK PHONE NUMBER;
"RTN","EASEZW2",121,0)
 ;;WORK PHONE EXTENSION;
"RTN","EASEZW2",122,0)
 ;;RELATIONSHIP;
"RTN","EASEZW2",123,0)
 ;;QUIT
"RTN","EASEZW2",124,0)
 ;
"RTN","EASEZW2",125,0)
CONFIRM(EASWEBID,EASAPP,EASXMZ) ;confirm receipt of web submission message to Forum
"RTN","EASEZW2",126,0)
 ;input EASAPP   = ien in file #712
"RTN","EASEZW2",127,0)
 ;      EASWEBID = web submission id
"RTN","EASEZW2",128,0)
 ;      EASXMZ   = ien in file #3.9 for msg being processed
"RTN","EASEZW2",129,0)
 N ARRAY,DIC,DIQ,DA,DR,STN,XMSUB,XMDUZ,XMTEXT,XMY,XMZ
"RTN","EASEZW2",130,0)
 Q:$G(EASAPP)=""  Q:$G(EASWEBID)=""
"RTN","EASEZW2",131,0)
 S DA=EASAPP,DIC="^EAS(712,",DIQ="ARRAY",DIQ(0)="I",DR=".2;4.5"
"RTN","EASEZW2",132,0)
 D EN^DIQ1
"RTN","EASEZW2",133,0)
 S STN=$G(ARRAY(712,EASAPP,4.5,"I")),STN=$TR(STN," ",""),STN=STN_U_"G.VA1010EZ@"_^XMB("NETNAME")
"RTN","EASEZW2",134,0)
 S ^TMP("1010EZRC",$J,1)="Receipt Confirmation for: "_EASWEBID
"RTN","EASEZW2",135,0)
 S ^TMP("1010EZRC",$J,2)="Sent from: "_STN
"RTN","EASEZW2",136,0)
 ;send msg # from holding file record just in case current msg is a duplicate
"RTN","EASEZW2",137,0)
 S ^TMP("1010EZRC",$J,3)="Site msg #: "_$G(ARRAY(712,EASAPP,.2,"I"))
"RTN","EASEZW2",138,0)
 S XMSUB="1010EZ CONFIRMATION for SID "_EASWEBID,XMDUZ=.5
"RTN","EASEZW2",139,0)
 S XMY("1010EZ.1010EZ@FORUM.VA.GOV")=""
"RTN","EASEZW2",140,0)
 S XMTEXT="^TMP(""1010EZRC"",$J,"
"RTN","EASEZW2",141,0)
 D ^XMD
"RTN","EASEZW2",142,0)
 K ^TMP("1010EZRC",$J)
"RTN","EASEZW2",143,0)
 Q
"RTN","EASMTL6A")
0^10^B28863409
"RTN","EASMTL6A",1,0)
EASMTL6A ; MIN/TCM ALB/SCK/PHH,ERC - AUTOMATED MEANS TEST LETTER-PRINT LETTERS CONT ; 10/23/07 4:45pm
"RTN","EASMTL6A",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**3,14,15,29,28,54,70**;MAR 15,2001;Build 26
"RTN","EASMTL6A",3,0)
 ;
"RTN","EASMTL6A",4,0)
LETTER(EASN,TYPE) ;Print letter
"RTN","EASMTL6A",5,0)
 ; Input
"RTN","EASMTL6A",6,0)
 ;     EASN    - File #713.2 IEN
"RTN","EASMTL6A",7,0)
 ;     TYPE    - Letter type
"RTN","EASMTL6A",8,0)
 ;
"RTN","EASMTL6A",9,0)
 N DFN,EASADD,EASIN,EASNME,EALNE,EASFAC,MSG,TAB,EAFIEN,EAX,LINE,EASANV,EASX,VADM,VAROOT,OFFSET,EASPTR,EASLIEN,EASITE,EASRTE,EASDEM,POP
"RTN","EASMTL6A",10,0)
 ;
"RTN","EASMTL6A",11,0)
 S TAB=3 ; Tab spacing for letters
"RTN","EASMTL6A",12,0)
 S OFFSET=+$$GET1^DIQ(713,1,10) ; Get print offset for address
"RTN","EASMTL6A",13,0)
 ;
"RTN","EASMTL6A",14,0)
 ;  Get patient data for letter
"RTN","EASMTL6A",15,0)
 S EASPTR=$$GET1^DIQ(713.2,EASN,2,"I")
"RTN","EASMTL6A",16,0)
 I EASPTR]"" S DFN=$$GET1^DIQ(713.1,EASPTR,.01,"I")
"RTN","EASMTL6A",17,0)
 E  S DFN=-1
"RTN","EASMTL6A",18,0)
 ; Get patient mailing information
"RTN","EASMTL6A",19,0)
 D GETPAT(DFN,.EASDEM,.EASADD)
"RTN","EASMTL6A",20,0)
 ;  Get return address info
"RTN","EASMTL6A",21,0)
 D GETFAC^EASMTL6(DFN,.EASFAC)
"RTN","EASMTL6A",22,0)
 ;
"RTN","EASMTL6A",23,0)
 W @IOF
"RTN","EASMTL6A",24,0)
 I EASFAC(100)]"" D
"RTN","EASMTL6A",25,0)
 . W !!?TAB+OFFSET,EASFAC(100)
"RTN","EASMTL6A",26,0)
 E  D
"RTN","EASMTL6A",27,0)
 . W !!?TAB+OFFSET,"VA MEDICAL CENTER"
"RTN","EASMTL6A",28,0)
 W ?(IOM-10),$E(EASDEM(1),1,1),EASDEM(2)
"RTN","EASMTL6A",29,0)
 ;
"RTN","EASMTL6A",30,0)
 W !?TAB+OFFSET,EASFAC(1.01)
"RTN","EASMTL6A",31,0)
 I EASFAC(1.02)]"" W !?TAB+OFFSET,EASFAC(1.02)
"RTN","EASMTL6A",32,0)
 W !?TAB+OFFSET,EASFAC(1.03)_" "_$P(EASFAC(.02),U,2)_" "_EASFAC(1.04)
"RTN","EASMTL6A",33,0)
 W !!!?TAB+OFFSET,$$FMTE^XLFDT(DT,1)
"RTN","EASMTL6A",34,0)
 ;
"RTN","EASMTL6A",35,0)
 ;; generic test letter setup
"RTN","EASMTL6A",36,0)
 I DFN>0 D
"RTN","EASMTL6A",37,0)
 . S EASNME("FILE")=2,EASNME("IENS")=DFN,EASNME("FIELD")=.01
"RTN","EASMTL6A",38,0)
 . W !!!!?TAB+OFFSET,$$NAMEFMT^XLFNAME(.EASNME,"G")
"RTN","EASMTL6A",39,0)
 E  D
"RTN","EASMTL6A",40,0)
 . W !!!!?TAB+OFFSET,EASDEM(1)
"RTN","EASMTL6A",41,0)
 ;;
"RTN","EASMTL6A",42,0)
 ;;adding foreign address changes for DG*5.3*688 - ERC
"RTN","EASMTL6A",43,0)
 N DGFOR
"RTN","EASMTL6A",44,0)
 S DGFOR=0
"RTN","EASMTL6A",45,0)
 I EASADD(25)]"",($P(EASADD(25),U,2)'["UNITED STATES") S DGFOR=1
"RTN","EASMTL6A",46,0)
 W !?TAB+OFFSET,EASADD(1)
"RTN","EASMTL6A",47,0)
 ;
"RTN","EASMTL6A",48,0)
 I EASADD(2)]"" W !?TAB+OFFSET,EASADD(2)
"RTN","EASMTL6A",49,0)
 ;for domestic address display city/zip
"RTN","EASMTL6A",50,0)
 I 'DGFOR D
"RTN","EASMTL6A",51,0)
 . W !?TAB+OFFSET,EASADD(4)
"RTN","EASMTL6A",52,0)
 . I +EASADD(5) W $S(EASADD(4)]"":",",1:"")_$$GET1^DIQ(5,$P(EASADD(5),U),1)
"RTN","EASMTL6A",53,0)
 . W " ",$P(EASADD(11),U,2)
"RTN","EASMTL6A",54,0)
 ;for foreign address display province/postal
"RTN","EASMTL6A",55,0)
 I DGFOR D
"RTN","EASMTL6A",56,0)
 . W !
"RTN","EASMTL6A",57,0)
 . I EASADD(24)]"" W ?TAB+OFFSET,EASADD(24)_" "_EASADD(4)_" "_EASADD(23)
"RTN","EASMTL6A",58,0)
 . I EASADD(24)']"" W ?TAB+OFFSET,EASADD(4)_$S(EASADD(4):" "_EASADD(23),1:EASADD(23))
"RTN","EASMTL6A",59,0)
 . ;display country for foreign address only
"RTN","EASMTL6A",60,0)
 . I EASADD(25)]"" D
"RTN","EASMTL6A",61,0)
 . . S EASCNTRY=$P(EASADD(25),U,2)
"RTN","EASMTL6A",62,0)
 . . I EASCNTRY=-1 S EASCNTRY="UNKNOWN COUNTRY"
"RTN","EASMTL6A",63,0)
 . . W !?TAB+OFFSET,EASCNTRY
"RTN","EASMTL6A",64,0)
 ;
"RTN","EASMTL6A",65,0)
 S EASANV=$$GET1^DIQ(713.2,EASN,3,"I")
"RTN","EASMTL6A",66,0)
 W !!!!,?TAB,"MEANS TEST ANNIVERSARY DATE: ",$$FMTE^XLFDT($$ADDLEAP^EASMTUTL(EASANV))
"RTN","EASMTL6A",67,0)
 ;
"RTN","EASMTL6A",68,0)
 S EASX=$P(EASDEM(5),U)
"RTN","EASMTL6A",69,0)
 ;; Patch 15
"RTN","EASMTL6A",70,0)
 W !!,?TAB,"Dear ",$S(EASX="M":"Mr. ",EASX="F":"Ms. ",1:"Mr./Ms. ")
"RTN","EASMTL6A",71,0)
 W $S(DFN>0:$$NAMEFMT^XLFNAME(.EASNME,"O","M"),1:"TEST"),":"
"RTN","EASMTL6A",72,0)
 ;;
"RTN","EASMTL6A",73,0)
 ;  Print letter body
"RTN","EASMTL6A",74,0)
 S EASLIEN=$O(^EAS(713.3,"C",TYPE,0))
"RTN","EASMTL6A",75,0)
 Q:'EASLIEN
"RTN","EASMTL6A",76,0)
 S EALNE=0
"RTN","EASMTL6A",77,0)
 ;
"RTN","EASMTL6A",78,0)
 W !
"RTN","EASMTL6A",79,0)
 F  S EALNE=$O(^EAS(713.3,EASLIEN,1,EALNE)) Q:'EALNE  D
"RTN","EASMTL6A",80,0)
 . S LINE=^EAS(713.3,EASLIEN,1,EALNE,0)
"RTN","EASMTL6A",81,0)
 . I LINE["|ANNVDT|" W !?TAB,$P(LINE,"|ANNVDT|",1),$$FMTE^XLFDT($$ADDLEAP^EASMTUTL(EASANV)),$P(LINE,"|ANNVDT|",2) Q
"RTN","EASMTL6A",82,0)
 . W !?TAB,LINE
"RTN","EASMTL6A",83,0)
 ;
"RTN","EASMTL6A",84,0)
 ; Retrieve division section of letter
"RTN","EASMTL6A",85,0)
 S EAFIEN=$O(^EAS(713.3,EASLIEN,2,"B",+EASFAC("FACNUM"),0))
"RTN","EASMTL6A",86,0)
 ;
"RTN","EASMTL6A",87,0)
 I 'EAFIEN D  ; Print default signature block
"RTN","EASMTL6A",88,0)
 . N EAX,LINE
"RTN","EASMTL6A",89,0)
 . F EAX=1:1:9  D
"RTN","EASMTL6A",90,0)
 . . S LINE=$P($T(DEFSIG+EAX),";;",2)
"RTN","EASMTL6A",91,0)
 . . I LINE["|FAC|" W !?TAB,$P(LINE,"|FAC|",1),$S(EASFAC(100)]"":EASFAC(100),1:"VA Medical Center"),$P(LINE,"|FAC|",2) Q
"RTN","EASMTL6A",92,0)
 . . W !?TAB,LINE
"RTN","EASMTL6A",93,0)
 ;
"RTN","EASMTL6A",94,0)
 I EAFIEN D  ; Print division/facility signature block
"RTN","EASMTL6A",95,0)
 . S EALNE=0
"RTN","EASMTL6A",96,0)
 . F  S EALNE=$O(^EAS(713.3,EASLIEN,2,EAFIEN,1,EALNE)) Q:'EALNE  D
"RTN","EASMTL6A",97,0)
 . . W !?TAB,^EAS(713.3,EASLIEN,2,EAFIEN,1,EALNE,0)
"RTN","EASMTL6A",98,0)
 ;
"RTN","EASMTL6A",99,0)
 W !!?TAB,"Enclosure"
"RTN","EASMTL6A",100,0)
 Q
"RTN","EASMTL6A",101,0)
 ;
"RTN","EASMTL6A",102,0)
GETPAT(DFN,EASDEM,EASADD) ; Get patient information
"RTN","EASMTL6A",103,0)
 N VAROOT,VA
"RTN","EASMTL6A",104,0)
 ;
"RTN","EASMTL6A",105,0)
 ;; Patch 15, Generic test letter
"RTN","EASMTL6A",106,0)
 I DFN<0 D  Q
"RTN","EASMTL6A",107,0)
 . S EASDEM(1)="TEST LETTER (DO NOT MAIL!)"
"RTN","EASMTL6A",108,0)
 . S EASDEM(2)="6789"
"RTN","EASMTL6A",109,0)
 . S EASDEM(5)="M"
"RTN","EASMTL6A",110,0)
 . S EASADD(1)="THIS IS A TEST LETTER STREET ADDRESS"
"RTN","EASMTL6A",111,0)
 . S EASADD(2)=""
"RTN","EASMTL6A",112,0)
 . S EASADD(4)="ANYTOWN"
"RTN","EASMTL6A",113,0)
 . S EASADD(5)="36^NEW YORK"
"RTN","EASMTL6A",114,0)
 . S EASADD(11)="111110000^11111-0000"
"RTN","EASMTL6A",115,0)
 . S EASADD(25)="1^UNITED STATES"
"RTN","EASMTL6A",116,0)
 ;; End patch 15
"RTN","EASMTL6A",117,0)
 ;
"RTN","EASMTL6A",118,0)
 S VAROOT="EASADD"
"RTN","EASMTL6A",119,0)
 D ADD^VADPT
"RTN","EASMTL6A",120,0)
 ;
"RTN","EASMTL6A",121,0)
 S VAROOT="EASDEM"
"RTN","EASMTL6A",122,0)
 D DEM^VADPT
"RTN","EASMTL6A",123,0)
 ;
"RTN","EASMTL6A",124,0)
 D PID^VADPT6
"RTN","EASMTL6A",125,0)
 S EASDEM(2)=VA("BID")
"RTN","EASMTL6A",126,0)
 Q
"RTN","EASMTL6A",127,0)
 ;
"RTN","EASMTL6A",128,0)
CHKADR(EASPTR) ; Check for valid address
"RTN","EASMTL6A",129,0)
 N EASADD,RSLT,DFN,VAROOT
"RTN","EASMTL6A",130,0)
 ;
"RTN","EASMTL6A",131,0)
 S DFN=$$GET1^DIQ(713.1,EASPTR,.01,"I")
"RTN","EASMTL6A",132,0)
 S RSLT=1
"RTN","EASMTL6A",133,0)
 S VAROOT="EASADD"
"RTN","EASMTL6A",134,0)
 D ADD^VADPT
"RTN","EASMTL6A",135,0)
 ;; Check for valid mailing address
"RTN","EASMTL6A",136,0)
 I $P(EASADD(25),U,2)']""!($P(EASADD(25),U,2)["UNITED STATES") D
"RTN","EASMTL6A",137,0)
 . I EASADD(1)]"",EASADD(4)]"",EASADD(5)]"",EASADD(11)]"" S RSLT=0
"RTN","EASMTL6A",138,0)
 I $P(EASADD(25),U,2)]""!($P(EASADD(25),U,2)'["UNITED STATES") D
"RTN","EASMTL6A",139,0)
 . I EASADD(1)]"",EASADD(4)]"" S RSLT=0
"RTN","EASMTL6A",140,0)
 ;; Check for Bad Address Indicator
"RTN","EASMTL6A",141,0)
 S EASADD("BAI")=$$BADADR^DGUTL3(DFN),$P(EASADD("BAI"),U,2)=$$EXTERNAL^DILFD(2,.121,"",+EASADD("BAI"))
"RTN","EASMTL6A",142,0)
 S:'RSLT&(EASADD("BAI")) RSLT=1
"RTN","EASMTL6A",143,0)
 D:RSLT ADRERR^EASMTUTL(.EASADD,DFN)
"RTN","EASMTL6A",144,0)
 Q $G(RSLT)
"RTN","EASMTL6A",145,0)
 ;
"RTN","EASMTL6A",146,0)
DEFSIG ; Default closing and signature block
"RTN","EASMTL6A",147,0)
 ;;Thank you for your assistance and cooperation.  If you have any
"RTN","EASMTL6A",148,0)
 ;;questions or need assistance in the completion of the information
"RTN","EASMTL6A",149,0)
 ;;requested, please contact the |FAC| Business 
"RTN","EASMTL6A",150,0)
 ;;Office between 8:00am and 4:00pm Monday through Friday.
"RTN","EASMTL6A",151,0)
 ;;
"RTN","EASMTL6A",152,0)
 ;;Sincerely,
"RTN","EASMTL6A",153,0)
 ;;
"RTN","EASMTL6A",154,0)
 ;;
"RTN","EASMTL6A",155,0)
 ;;
"VER")
8.0^22.0
**END**
**END**

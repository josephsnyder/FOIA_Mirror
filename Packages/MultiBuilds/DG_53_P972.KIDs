KIDS Distribution saved on Aug 20, 2019@12:15:31
DG_53_P972_v2.KID
**KIDS**:DG*5.3*972^IVM*2.0*183^

**INSTALL NAME**
DG*5.3*972
"BLD",10903,0)
DG*5.3*972^REGISTRATION^0^3190820^y
"BLD",10903,1,0)
^^2^2^3190110^^
"BLD",10903,1,1,0)
Please see the DG*5.3*972 patch description for detailed information 
"BLD",10903,1,2,0)
regarding this patch.
"BLD",10903,4,0)
^9.64PA^27.11^2
"BLD",10903,4,2,0)
2
"BLD",10903,4,2,2,0)
^9.641^2^1
"BLD",10903,4,2,2,2,0)
PATIENT  (File-top level)
"BLD",10903,4,2,2,2,1,0)
^9.6411^.541^4
"BLD",10903,4,2,2,2,1,.541,0)
CURRENT MOH INDICATOR
"BLD",10903,4,2,2,2,1,.542,0)
MOH AWARD DATE
"BLD",10903,4,2,2,2,1,.543,0)
MOH STATUS DATE
"BLD",10903,4,2,2,2,1,.544,0)
MOH COPAYMENT EXEMPTION DATE
"BLD",10903,4,2,222)
y^n^p^^^^n^^n
"BLD",10903,4,2,224)

"BLD",10903,4,27.11,0)
27.11
"BLD",10903,4,27.11,2,0)
^9.641^27.11^1
"BLD",10903,4,27.11,2,27.11,0)
PATIENT ENROLLMENT  (File-top level)
"BLD",10903,4,27.11,2,27.11,1,0)
^9.6411^50.23^4
"BLD",10903,4,27.11,2,27.11,1,50.23,0)
MEDAL OF HONOR INDICATED?
"BLD",10903,4,27.11,2,27.11,1,50.28,0)
MOH AWARD DATE
"BLD",10903,4,27.11,2,27.11,1,50.29,0)
MOH STATUS DATE
"BLD",10903,4,27.11,2,27.11,1,50.3,0)
MOH COPAYMENT EXEMPTION DATE
"BLD",10903,4,27.11,222)
y^n^p^^^^n^^n
"BLD",10903,4,27.11,224)

"BLD",10903,4,"APDD",2,2)

"BLD",10903,4,"APDD",2,2,.541)

"BLD",10903,4,"APDD",2,2,.542)

"BLD",10903,4,"APDD",2,2,.543)

"BLD",10903,4,"APDD",2,2,.544)

"BLD",10903,4,"APDD",27.11,27.11)

"BLD",10903,4,"APDD",27.11,27.11,50.23)

"BLD",10903,4,"APDD",27.11,27.11,50.28)

"BLD",10903,4,"APDD",27.11,27.11,50.29)

"BLD",10903,4,"APDD",27.11,27.11,50.3)

"BLD",10903,4,"B",2,2)

"BLD",10903,4,"B",27.11,27.11)

"BLD",10903,6.3)
80
"BLD",10903,"ABPKG")
n
"BLD",10903,"KRN",0)
^9.67PA^779.2^20
"BLD",10903,"KRN",.4,0)
.4
"BLD",10903,"KRN",.401,0)
.401
"BLD",10903,"KRN",.402,0)
.402
"BLD",10903,"KRN",.403,0)
.403
"BLD",10903,"KRN",.5,0)
.5
"BLD",10903,"KRN",.84,0)
.84
"BLD",10903,"KRN",3.6,0)
3.6
"BLD",10903,"KRN",3.8,0)
3.8
"BLD",10903,"KRN",9.2,0)
9.2
"BLD",10903,"KRN",9.8,0)
9.8
"BLD",10903,"KRN",9.8,"NM",0)
^9.68A^35^20
"BLD",10903,"KRN",9.8,"NM",1,0)
DGENA^^0^B30048618
"BLD",10903,"KRN",9.8,"NM",2,0)
DGENA1A^^0^B22886211
"BLD",10903,"KRN",9.8,"NM",7,0)
DGENU^^0^B51369216
"BLD",10903,"KRN",9.8,"NM",9,0)
DGENUPL4^^0^B96907495
"BLD",10903,"KRN",9.8,"NM",10,0)
DGENUPL7^^0^B36030321
"BLD",10903,"KRN",9.8,"NM",11,0)
DGMTCOR^^0^B37845960
"BLD",10903,"KRN",9.8,"NM",15,0)
DGRP6^^0^B27900055
"BLD",10903,"KRN",9.8,"NM",16,0)
DGRPDB^^0^B34652435
"BLD",10903,"KRN",9.8,"NM",17,0)
DGMTUB^^0^B8986083
"BLD",10903,"KRN",9.8,"NM",19,0)
DGMTCOU^^0^B6208786
"BLD",10903,"KRN",9.8,"NM",20,0)
DGMTCOU1^^0^B14542603
"BLD",10903,"KRN",9.8,"NM",21,0)
DGENELA^^0^B33839013
"BLD",10903,"KRN",9.8,"NM",22,0)
DGENELA1^^0^B87005924
"BLD",10903,"KRN",9.8,"NM",26,0)
DGENELA4^^0^B76988124
"BLD",10903,"KRN",9.8,"NM",28,0)
DGENUPL1^^0^B63594791
"BLD",10903,"KRN",9.8,"NM",29,0)
DGMTR^^0^B72013665
"BLD",10903,"KRN",9.8,"NM",30,0)
DGMTR1^^0^B34321057
"BLD",10903,"KRN",9.8,"NM",31,0)
DGENL1^^0^B89499051
"BLD",10903,"KRN",9.8,"NM",32,0)
DGENUPL3^^0^B158219236
"BLD",10903,"KRN",9.8,"NM",35,0)
DGMTA^^0^B44199650
"BLD",10903,"KRN",9.8,"NM","B","DGENA",1)

"BLD",10903,"KRN",9.8,"NM","B","DGENA1A",2)

"BLD",10903,"KRN",9.8,"NM","B","DGENELA",21)

"BLD",10903,"KRN",9.8,"NM","B","DGENELA1",22)

"BLD",10903,"KRN",9.8,"NM","B","DGENELA4",26)

"BLD",10903,"KRN",9.8,"NM","B","DGENL1",31)

"BLD",10903,"KRN",9.8,"NM","B","DGENU",7)

"BLD",10903,"KRN",9.8,"NM","B","DGENUPL1",28)

"BLD",10903,"KRN",9.8,"NM","B","DGENUPL3",32)

"BLD",10903,"KRN",9.8,"NM","B","DGENUPL4",9)

"BLD",10903,"KRN",9.8,"NM","B","DGENUPL7",10)

"BLD",10903,"KRN",9.8,"NM","B","DGMTA",35)

"BLD",10903,"KRN",9.8,"NM","B","DGMTCOR",11)

"BLD",10903,"KRN",9.8,"NM","B","DGMTCOU",19)

"BLD",10903,"KRN",9.8,"NM","B","DGMTCOU1",20)

"BLD",10903,"KRN",9.8,"NM","B","DGMTR",29)

"BLD",10903,"KRN",9.8,"NM","B","DGMTR1",30)

"BLD",10903,"KRN",9.8,"NM","B","DGMTUB",17)

"BLD",10903,"KRN",9.8,"NM","B","DGRP6",15)

"BLD",10903,"KRN",9.8,"NM","B","DGRPDB",16)

"BLD",10903,"KRN",19,0)
19
"BLD",10903,"KRN",19,"NM",0)
^9.68A^^
"BLD",10903,"KRN",19.1,0)
19.1
"BLD",10903,"KRN",101,0)
101
"BLD",10903,"KRN",409.61,0)
409.61
"BLD",10903,"KRN",771,0)
771
"BLD",10903,"KRN",779.2,0)
779.2
"BLD",10903,"KRN",870,0)
870
"BLD",10903,"KRN",8989.51,0)
8989.51
"BLD",10903,"KRN",8989.52,0)
8989.52
"BLD",10903,"KRN",8989.52,"NM",0)
^9.68A^^
"BLD",10903,"KRN",8994,0)
8994
"BLD",10903,"KRN","B",.4,.4)

"BLD",10903,"KRN","B",.401,.401)

"BLD",10903,"KRN","B",.402,.402)

"BLD",10903,"KRN","B",.403,.403)

"BLD",10903,"KRN","B",.5,.5)

"BLD",10903,"KRN","B",.84,.84)

"BLD",10903,"KRN","B",3.6,3.6)

"BLD",10903,"KRN","B",3.8,3.8)

"BLD",10903,"KRN","B",9.2,9.2)

"BLD",10903,"KRN","B",9.8,9.8)

"BLD",10903,"KRN","B",19,19)

"BLD",10903,"KRN","B",19.1,19.1)

"BLD",10903,"KRN","B",101,101)

"BLD",10903,"KRN","B",409.61,409.61)

"BLD",10903,"KRN","B",771,771)

"BLD",10903,"KRN","B",779.2,779.2)

"BLD",10903,"KRN","B",870,870)

"BLD",10903,"KRN","B",8989.51,8989.51)

"BLD",10903,"KRN","B",8989.52,8989.52)

"BLD",10903,"KRN","B",8994,8994)

"BLD",10903,"QDEF")
^^^^NO^^^^^^YES
"BLD",10903,"QUES",0)
^9.62^^
"BLD",10903,"REQB",0)
^9.611^8^6
"BLD",10903,"REQB",1,0)
DG*5.3*858^1
"BLD",10903,"REQB",4,0)
DG*5.3*940^1
"BLD",10903,"REQB",5,0)
DG*5.3*966^1
"BLD",10903,"REQB",6,0)
DG*5.3*481^1
"BLD",10903,"REQB",7,0)
DG*5.3*749^1
"BLD",10903,"REQB",8,0)
DG*5.3*975^1
"BLD",10903,"REQB","B","DG*5.3*481",6)

"BLD",10903,"REQB","B","DG*5.3*749",7)

"BLD",10903,"REQB","B","DG*5.3*858",1)

"BLD",10903,"REQB","B","DG*5.3*940",4)

"BLD",10903,"REQB","B","DG*5.3*966",5)

"BLD",10903,"REQB","B","DG*5.3*975",8)

"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^n^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
5.3^DG
"FIA",2,2)
1
"FIA",2,2,.541)

"FIA",2,2,.542)

"FIA",2,2,.543)

"FIA",2,2,.544)

"FIA",27.11)
PATIENT ENROLLMENT
"FIA",27.11,0)
^DGEN(27.11,
"FIA",27.11,0,0)
27.11OID
"FIA",27.11,0,1)
y^n^p^^^^n^^n
"FIA",27.11,0,10)

"FIA",27.11,0,11)

"FIA",27.11,0,"RLRO")

"FIA",27.11,0,"VR")
5.3^DG
"FIA",27.11,27.11)
1
"FIA",27.11,27.11,50.23)

"FIA",27.11,27.11,50.28)

"FIA",27.11,27.11,50.29)

"FIA",27.11,27.11,50.3)

"MBREQ")
0
"PKG",47,-1)
1^1
"PKG",47,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",47,20,0)
^9.402P^^
"PKG",47,22,0)
^9.49I^1^1
"PKG",47,22,1,0)
5.3^2930813^2960613
"PKG",47,22,1,"PAH",1,0)
972^3190820
"PKG",47,22,1,"PAH",1,1,0)
^^2^2^3190820
"PKG",47,22,1,"PAH",1,1,1,0)
Please see the DG*5.3*972 patch description for detailed information 
"PKG",47,22,1,"PAH",1,1,2,0)
regarding this patch.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
20
"RTN","DGENA")
0^1^B30048618
"RTN","DGENA",1,0)
DGENA ;ALB/CJM,ISA/KWP,Zoltan,LBD,CKN,EG,ERC,TDM,JLS,HM - Enrollment API - Retrieve Data ;03 Mar 2015  10:25 AM
"RTN","DGENA",2,0)
 ;;5.3;Registration;**121,122,147,232,314,564,672,659,653,688,841,909,940,972**;Aug 13, 1993;Build 80
"RTN","DGENA",3,0)
 ;
"RTN","DGENA",4,0)
FINDCUR(DFN) ;
"RTN","DGENA",5,0)
 ;Description: Used to find a patients current enrollment.
"RTN","DGENA",6,0)
 ;Input :
"RTN","DGENA",7,0)
 ;  DFN - Patient IEN
"RTN","DGENA",8,0)
 ;Output:
"RTN","DGENA",9,0)
 ;  Function Value - returns the internal entry number of the patient's
"RTN","DGENA",10,0)
 ;     current enrollment if there is one, NULL otherwise. Checks that
"RTN","DGENA",11,0)
 ;     current enrollment actually belongs to the patient.
"RTN","DGENA",12,0)
 ;
"RTN","DGENA",13,0)
 Q:'$G(DFN) ""
"RTN","DGENA",14,0)
 ;
"RTN","DGENA",15,0)
 N CUR
"RTN","DGENA",16,0)
 S CUR=$P($G(^DPT(DFN,"ENR")),"^")
"RTN","DGENA",17,0)
 I CUR,$P($G(^DGEN(27.11,CUR,0)),"^",2)'=DFN S CUR=""
"RTN","DGENA",18,0)
 Q CUR
"RTN","DGENA",19,0)
 ;
"RTN","DGENA",20,0)
FINDPRI(DGENRIEN) ;
"RTN","DGENA",21,0)
 ;Description: Used to obtain a patient's  enrollment record that was
"RTN","DGENA",22,0)
 ;     prior to the enrollment identified by DGENRIEN.
"RTN","DGENA",23,0)
 ;Input :
"RTN","DGENA",24,0)
 ;  DGENRIEN - this is the internal entry number of a PATIENT ENROLLMENT
"RTN","DGENA",25,0)
 ;     record
"RTN","DGENA",26,0)
 ;Output:
"RTN","DGENA",27,0)
 ;  Function Value - returns the internal entry number of the prior
"RTN","DGENA",28,0)
 ;     enrollment for the patient if there is one, NULL otherwise.
"RTN","DGENA",29,0)
 ;
"RTN","DGENA",30,0)
 Q:'$G(DGENRIEN) ""
"RTN","DGENA",31,0)
 Q $P($G(^DGEN(27.11,DGENRIEN,0)),"^",9)
"RTN","DGENA",32,0)
 ;
"RTN","DGENA",33,0)
ENROLLED(DFN) ;
"RTN","DGENA",34,0)
 ;Description: Returns whether the patient is currently enrolled.
"RTN","DGENA",35,0)
 ;Input:
"RTN","DGENA",36,0)
 ;  DFN - Patient IEN
"RTN","DGENA",37,0)
 ;Output:
"RTN","DGENA",38,0)
 ;  Function Value - returns 1 if the patient is currently enrolled with
"RTN","DGENA",39,0)
 ;     a status of VERIFIED, 0 otherwise
"RTN","DGENA",40,0)
 ;
"RTN","DGENA",41,0)
 N STATUS
"RTN","DGENA",42,0)
 S STATUS=$$STATUS($G(DFN))
"RTN","DGENA",43,0)
 I (STATUS=2) Q 1
"RTN","DGENA",44,0)
 Q 0
"RTN","DGENA",45,0)
 ;
"RTN","DGENA",46,0)
STATUS(DFN) ;
"RTN","DGENA",47,0)
 ;Description: Returns ENROLLMENT STATUS from the patient's current
"RTN","DGENA",48,0)
 ;     enrollment.
"RTN","DGENA",49,0)
 ;Input:
"RTN","DGENA",50,0)
 ;  DFN -  Patient IEN
"RTN","DGENA",51,0)
 ;Output:
"RTN","DGENA",52,0)
 ;  Function Value - If the patient has a current ENROLLMENT STATUS this
"RTN","DGENA",53,0)
 ;     function will return its value, otherwise it returns NULL.
"RTN","DGENA",54,0)
 N DGENRIEN
"RTN","DGENA",55,0)
 S DGENRIEN=$$FINDCUR($G(DFN))
"RTN","DGENA",56,0)
 Q:'DGENRIEN ""
"RTN","DGENA",57,0)
 Q $P($G(^DGEN(27.11,DGENRIEN,0)),"^",4)
"RTN","DGENA",58,0)
 ;
"RTN","DGENA",59,0)
PRIORITY(DFN) ;
"RTN","DGENA",60,0)
 ;Description: Returns ENROLLMENT PRIORITY from the patient's current
"RTN","DGENA",61,0)
 ;     enrollment.
"RTN","DGENA",62,0)
 ;Input:
"RTN","DGENA",63,0)
 ;  DFN -  Patient IEN
"RTN","DGENA",64,0)
 ;Output:
"RTN","DGENA",65,0)
 ;  Function Value - If the patient has a current ENROLLMENT PRIORITY
"RTN","DGENA",66,0)
 ;     this function will return its value, otherwise it returns NULL.
"RTN","DGENA",67,0)
 N DGENRIEN
"RTN","DGENA",68,0)
 S DGENRIEN=$$FINDCUR($G(DFN))
"RTN","DGENA",69,0)
 Q:'DGENRIEN ""
"RTN","DGENA",70,0)
 Q $P($G(^DGEN(27.11,DGENRIEN,0)),"^",7)
"RTN","DGENA",71,0)
 ;
"RTN","DGENA",72,0)
SOURCE(DFN) ;
"RTN","DGENA",73,0)
 ;Description: Returns SOURCE OF ENROLLMENT from the patient's current
"RTN","DGENA",74,0)
 ;     enrollment.
"RTN","DGENA",75,0)
 ;Input:
"RTN","DGENA",76,0)
 ;  DFN -  Patient IEN
"RTN","DGENA",77,0)
 ;Output:
"RTN","DGENA",78,0)
 ;  Function Value - If the patient has a current ENROLLMENT 
"RTN","DGENA",79,0)
 ;     this function will return the SOURCE OF ENROLLMENT, otherwise
"RTN","DGENA",80,0)
 ;     it returns NULL.
"RTN","DGENA",81,0)
 ;
"RTN","DGENA",82,0)
 N DGENRIEN
"RTN","DGENA",83,0)
 S DGENRIEN=$$FINDCUR($G(DFN))
"RTN","DGENA",84,0)
 Q:'DGENRIEN ""
"RTN","DGENA",85,0)
 Q $P($G(^DGEN(27.11,DGENRIEN,0)),"^",3)
"RTN","DGENA",86,0)
 ;
"RTN","DGENA",87,0)
GET(DGENRIEN,DGENR) ;
"RTN","DGENA",88,0)
 ;Description: Used to obtain a record from the Patient Enrollment file
"RTN","DGENA",89,0)
 ;     into the local DGENR array.
"RTN","DGENA",90,0)
 ;Input :
"RTN","DGENA",91,0)
 ;  DGENRIEN - this is the internal entry number of a PATIENT ENROLLMENT record
"RTN","DGENA",92,0)
 ;Output:
"RTN","DGENA",93,0)
 ;  Function  Value - returns 1 on success, 0 on failure.
"RTN","DGENA",94,0)
 ;  DGENR - this is the name of  a local array, it should be passed by
"RTN","DGENA",95,0)
 ;     reference. If the function is successful this array will
"RTN","DGENA",96,0)
 ;     contain the enrollment.
"RTN","DGENA",97,0)
 ;
"RTN","DGENA",98,0)
 ;      subscript      field name
"RTN","DGENA",99,0)
 ;     "APP"           Enrollment Application Date
"RTN","DGENA",100,0)
 ;     "DATE"          Enrollment Date
"RTN","DGENA",101,0)
 ;     "END"           Enrollment End Date
"RTN","DGENA",102,0)
 ;     "DFN"           Patient IEN
"RTN","DGENA",103,0)
 ;     "SOURCE"        Enrollment Source
"RTN","DGENA",104,0)
 ;     "STATUS"        Enrollment Status
"RTN","DGENA",105,0)
 ;     "REASON"        Reason Canceled/Declined
"RTN","DGENA",106,0)
 ;     "REMARKS"       Canceled/Declined Remarks
"RTN","DGENA",107,0)
 ;     "FACREC"        Facility Received
"RTN","DGENA",108,0)
 ;     "PRIORITY"      Enrollment Priority
"RTN","DGENA",109,0)
 ;     "SUBGRP"        Enrollment Sub-Group
"RTN","DGENA",110,0)
 ;     "RCODE"         Reason for Closed Application ;;DJE DG*5.3*940 - Closed Application
"RTN","DGENA",111,0)
 ;     "EFFDATE"       Effective Date
"RTN","DGENA",112,0)
 ;     "PRIORREC"      Prior Enrollment Record
"RTN","DGENA",113,0)
 ;     "ELIG","CODE"            Primary Eligibility Code
"RTN","DGENA",114,0)
 ;     "ELIG","CODE",<code ien> Eligibility Codes
"RTN","DGENA",115,0)
 ;     "ELIG","SC"              Service Connected
"RTN","DGENA",116,0)
 ;     "ELIG","SCPER"           Service Connected Percentage
"RTN","DGENA",117,0)
 ;     "ELIG","POW"             POW Status Indicated
"RTN","DGENA",118,0)
 ;     "ELIG","A&A"             Receiving A&A Benefits
"RTN","DGENA",119,0)
 ;     "ELIG","HB"              Receiving Housebound Benefits
"RTN","DGENA",120,0)
 ;     "ELIG","VAPEN"           Receiving a VA Pension
"RTN","DGENA",121,0)
 ;     "ELIG","VACKAMT"         Total Annual VA Check Amount
"RTN","DGENA",122,0)
 ;     "ELIG","DISRET"          Military Disability Retirement
"RTN","DGENA",123,0)
 ;     "ELIG","DISLOD"          Discharged Due to Disability
"RTN","DGENA",124,0)
 ;     "ELIG","MEDICAID"        Medicaid
"RTN","DGENA",125,0)
 ;     "ELIG","AO"              Exposed to Agent Orange
"RTN","DGENA",126,0)
 ;     "ELIG","AOEXPLOC"        Agent Orange Exposure Location
"RTN","DGENA",127,0)
 ;     "ELIG","IR"              Radiation Exposure Indicated
"RTN","DGENA",128,0)
 ;     "ELIG","RADEXPM"         Radiation Exposure Method
"RTN","DGENA",129,0)
 ;     "ELIG","EC"              SW Asia Cond - was Env Con, DG*5.3*688
"RTN","DGENA",130,0)
 ;     "ELIG","MTSTA"           Means Test Status
"RTN","DGENA",131,0)
 ;     "ELIG","VCD"             Veteran Catastrophically Disabled?
"RTN","DGENA",132,0)
 ;     "ELIG","PH"              Purple Heart Indicated?
"RTN","DGENA",133,0)
 ;     "ELIG","UNEMPLOY"        Unemployable
"RTN","DGENA",134,0)
 ;     "ELIG","CVELEDT"         Combat Veteran End Date
"RTN","DGENA",135,0)
 ;     "ELIG","SHAD"            SHAD Indicated
"RTN","DGENA",136,0)
 ;     "ELIG","MOH"             Medal of Honor Indicated
"RTN","DGENA",137,0)
 ;     "ELIG","MOHAWRDDATE"     Medal of Honor Award Date  DG*5.3*972
"RTN","DGENA",138,0)
 ;     "ELIG","MOHSTATDATE"     Medal of Honor Status Date DG*5.3*972
"RTN","DGENA",139,0)
 ;     "ELIG","MOHEXEMPDATE"    Medal of Honor Copayment Exemption Date DG*5.3*972
"RTN","DGENA",140,0)
 ;     "ELIG","CLE"             Camp Lejeune Indicated?    DG*5.3*909
"RTN","DGENA",141,0)
 ;     "ELIG","CLEDT"           Camp Lejeune Date          DG*5.3*909
"RTN","DGENA",142,0)
 ;     "ELIG","CLEST"           Camp Lejeune Change Site   DG*5.3*909
"RTN","DGENA",143,0)
 ;     "ELIG","CLESOR"          Camp Lejeune Source        DG*5.3*909
"RTN","DGENA",144,0)
 ;     "DATETIME"      Date/Time Entered
"RTN","DGENA",145,0)
 ;     "USER"          Entered By
"RTN","DGENA",146,0)
 ;    
"RTN","DGENA",147,0)
 N SUB,NODE
"RTN","DGENA",148,0)
 I '$G(DGENRIEN) Q 0
"RTN","DGENA",149,0)
 I '$D(^DGEN(27.11,DGENRIEN,0)) Q 0
"RTN","DGENA",150,0)
 K DGENR
"RTN","DGENA",151,0)
 S DGENR=""
"RTN","DGENA",152,0)
 S NODE=$G(^DGEN(27.11,DGENRIEN,0))
"RTN","DGENA",153,0)
 S DGENR("APP")=$P(NODE,"^")
"RTN","DGENA",154,0)
 S DGENR("DATE")=$P(NODE,"^",10)
"RTN","DGENA",155,0)
 S DGENR("END")=$P(NODE,"^",11)
"RTN","DGENA",156,0)
 S DGENR("DFN")=$P(NODE,"^",2)
"RTN","DGENA",157,0)
 S DGENR("SOURCE")=$P(NODE,"^",3)
"RTN","DGENA",158,0)
 S DGENR("STATUS")=$P(NODE,"^",4)
"RTN","DGENA",159,0)
 S DGENR("REASON")=$P(NODE,"^",5)
"RTN","DGENA",160,0)
 S DGENR("FACREC")=$P(NODE,"^",6)
"RTN","DGENA",161,0)
 S DGENR("PRIORITY")=$P(NODE,"^",7)
"RTN","DGENA",162,0)
 S DGENR("EFFDATE")=$P(NODE,"^",8)
"RTN","DGENA",163,0)
 S DGENR("PRIORREC")=$P(NODE,"^",9)
"RTN","DGENA",164,0)
 ;Phase II Get enrollment sub-grp (SRS 6.4)
"RTN","DGENA",165,0)
 S DGENR("SUBGRP")=$P(NODE,"^",12)
"RTN","DGENA",166,0)
 S DGENR("RCODE")=$P(NODE,"^",13) ;DJE field added with DG*5.3*940 - Closed Application - RM#867186
"RTN","DGENA",167,0)
 S NODE=$G(^DGEN(27.11,DGENRIEN,"R"))
"RTN","DGENA",168,0)
 S DGENR("REMARKS")=$P(NODE,"^")
"RTN","DGENA",169,0)
 S NODE=$G(^DGEN(27.11,DGENRIEN,"E"))
"RTN","DGENA",170,0)
 S DGENR("ELIG","CODE")=$P(NODE,"^")
"RTN","DGENA",171,0)
 S DGENR("ELIG","SC")=$P(NODE,"^",2)
"RTN","DGENA",172,0)
 S DGENR("ELIG","SCPER")=$P(NODE,"^",3)
"RTN","DGENA",173,0)
 S DGENR("ELIG","POW")=$P(NODE,"^",4)
"RTN","DGENA",174,0)
 S DGENR("ELIG","A&A")=$P(NODE,"^",5)
"RTN","DGENA",175,0)
 S DGENR("ELIG","HB")=$P(NODE,"^",6)
"RTN","DGENA",176,0)
 S DGENR("ELIG","VAPEN")=$P(NODE,"^",7)
"RTN","DGENA",177,0)
 S DGENR("ELIG","VACKAMT")=$P(NODE,"^",8)
"RTN","DGENA",178,0)
 S DGENR("ELIG","DISRET")=$P(NODE,"^",9)
"RTN","DGENA",179,0)
 S DGENR("ELIG","DISLOD")=$P(NODE,"^",20)  ;added with DG*5.3*672
"RTN","DGENA",180,0)
 S DGENR("ELIG","MEDICAID")=$P(NODE,"^",10)
"RTN","DGENA",181,0)
 S DGENR("ELIG","AO")=$P(NODE,"^",11)
"RTN","DGENA",182,0)
 S DGENR("ELIG","AOEXPLOC")=$P(NODE,"^",22)  ;added with DG*5.3*688
"RTN","DGENA",183,0)
 S DGENR("ELIG","IR")=$P(NODE,"^",12)
"RTN","DGENA",184,0)
 S DGENR("ELIG","EC")=$P(NODE,"^",13)
"RTN","DGENA",185,0)
 S DGENR("ELIG","MTSTA")=$P(NODE,"^",14)
"RTN","DGENA",186,0)
 S DGENR("ELIG","VCD")=$P(NODE,"^",15)
"RTN","DGENA",187,0)
 S DGENR("ELIG","PH")=$P(NODE,"^",16)
"RTN","DGENA",188,0)
 S DGENR("ELIG","UNEMPLOY")=$P(NODE,"^",17)
"RTN","DGENA",189,0)
 S DGENR("ELIG","CVELEDT")=$P(NODE,"^",18)
"RTN","DGENA",190,0)
 S DGENR("ELIG","SHAD")=$P(NODE,"^",19)
"RTN","DGENA",191,0)
 S DGENR("ELIG","RADEXPM")=$P(NODE,"^",21)
"RTN","DGENA",192,0)
 S DGENR("ELIG","MOH")=$P(NODE,"^",23)
"RTN","DGENA",193,0)
 S DGENR("ELIG","CLE")=$P(NODE,"^",24)      ;added with DG*5.3*909
"RTN","DGENA",194,0)
 S DGENR("ELIG","CLEDT")=$P(NODE,"^",25)    ;added with DG*5.3*909
"RTN","DGENA",195,0)
 S DGENR("ELIG","CLEST")=$P(NODE,"^",26)    ;added with DG*5.3*909
"RTN","DGENA",196,0)
 S DGENR("ELIG","CLESOR")=$P(NODE,"^",27)   ;added with DG*5.3*909
"RTN","DGENA",197,0)
 S DGENR("ELIG","MOHAWRDDATE")=$P(NODE,"^",28)   ;added with DG*5.3*972 HM
"RTN","DGENA",198,0)
 S DGENR("ELIG","MOHSTATDATE")=$P(NODE,"^",29)   ;added with DG*5.3*972 HM
"RTN","DGENA",199,0)
 S DGENR("ELIG","MOHEXEMPDATE")=$P(NODE,"^",30)   ;added with DG*5.3*972 HM
"RTN","DGENA",200,0)
 ;S DGENCDZZ=1 ; for CD Testing (disabled).
"RTN","DGENA",201,0)
 S NODE=$G(^DGEN(27.11,DGENRIEN,"U"))
"RTN","DGENA",202,0)
 S DGENR("DATETIME")=$P(NODE,"^")
"RTN","DGENA",203,0)
 S DGENR("USER")=$P(NODE,"^",2)
"RTN","DGENA",204,0)
 Q 1
"RTN","DGENA",205,0)
 ;
"RTN","DGENA1A")
0^2^B22886211
"RTN","DGENA1A",1,0)
DGENA1A ;ALB/CJM,ISA/KWP,Zoltan,LBD,EG,CKN,ERC,TDM,JLS,HM - Enrollment API - File Data Continued ;5/10/11 12:03pm
"RTN","DGENA1A",2,0)
 ;;5.3;Registration;**121,147,232,314,564,672,659,653,688,841,909,940,972**;Aug 13,1993;Build 80
"RTN","DGENA1A",3,0)
 ;
"RTN","DGENA1A",4,0)
KILLALL(DGENRIEN) ;
"RTN","DGENA1A",5,0)
 ;kills all x-refs on the record in the Patient Enrollment file
"RTN","DGENA1A",6,0)
 ;pointed to by DGENRIEN
"RTN","DGENA1A",7,0)
 ;
"RTN","DGENA1A",8,0)
 N DGENR,SUB,VALUE
"RTN","DGENA1A",9,0)
 Q:'$G(DGENRIEN)
"RTN","DGENA1A",10,0)
 Q:'$$GET^DGENA(DGENRIEN,.DGENR)
"RTN","DGENA1A",11,0)
 S SUB=""
"RTN","DGENA1A",12,0)
 F  S SUB=$O(DGENR(SUB)) Q:SUB=""  D
"RTN","DGENA1A",13,0)
 .Q:(SUB="ELIG")
"RTN","DGENA1A",14,0)
 .Q:DGENR(SUB)=""
"RTN","DGENA1A",15,0)
 .D KILL(27.11,DGENRIEN,$$FIELD^DGENU(SUB),DGENR(SUB))
"RTN","DGENA1A",16,0)
 S SUB=""
"RTN","DGENA1A",17,0)
 F  S SUB=$O(DGENR("ELIG",SUB)) Q:SUB=""  D
"RTN","DGENA1A",18,0)
 .Q:DGENR("ELIG",SUB)=""
"RTN","DGENA1A",19,0)
 .D KILL(27.11,DGENRIEN,$$FIELD^DGENU(SUB),DGENR("ELIG",SUB))
"RTN","DGENA1A",20,0)
 Q
"RTN","DGENA1A",21,0)
 ;
"RTN","DGENA1A",22,0)
SETALL(DGENRIEN,DGENR) ;
"RTN","DGENA1A",23,0)
 ;Sets all x-refs on the record in the Patient Enrollment file.
"RTN","DGENA1A",24,0)
 ;Inputs:
"RTN","DGENA1A",25,0)
 ;  DGENRIEN - pointer to PATIENT ENROLLMENT file
"RTN","DGENA1A",26,0)
 ;  DGENR - array containing the record, pass by reference
"RTN","DGENA1A",27,0)
 ;
"RTN","DGENA1A",28,0)
 N SUB,VALUE
"RTN","DGENA1A",29,0)
 Q:'$G(DGENRIEN)
"RTN","DGENA1A",30,0)
 Q:'$D(DGENR)
"RTN","DGENA1A",31,0)
 ;
"RTN","DGENA1A",32,0)
 S SUB=""
"RTN","DGENA1A",33,0)
 F  S SUB=$O(DGENR(SUB)) Q:SUB=""  D
"RTN","DGENA1A",34,0)
 .Q:(SUB="ELIG")
"RTN","DGENA1A",35,0)
 .Q:DGENR(SUB)=""
"RTN","DGENA1A",36,0)
 .D SET(27.11,DGENRIEN,$$FIELD^DGENU(SUB),DGENR(SUB))
"RTN","DGENA1A",37,0)
 S SUB=""
"RTN","DGENA1A",38,0)
 F  S SUB=$O(DGENR("ELIG",SUB)) Q:SUB=""  D
"RTN","DGENA1A",39,0)
 .Q:DGENR("ELIG",SUB)=""
"RTN","DGENA1A",40,0)
 .D SET(27.11,DGENRIEN,$$FIELD^DGENU(SUB),DGENR("ELIG",SUB))
"RTN","DGENA1A",41,0)
 Q
"RTN","DGENA1A",42,0)
 ;
"RTN","DGENA1A",43,0)
KILL(FILE,IEN,FIELD,VALUE) ;
"RTN","DGENA1A",44,0)
 ;executes all the kill logic for x-refs on the field=FIELD for the
"RTN","DGENA1A",45,0)
 ;record=DGENRIEN for the file=FILE for the field value=VALUE
"RTN","DGENA1A",46,0)
 ;
"RTN","DGENA1A",47,0)
 N D0,DA,DIV,DGIX,X
"RTN","DGENA1A",48,0)
 S DA=IEN,X=VALUE,DGIX=0
"RTN","DGENA1A",49,0)
 F  S DGIX=$O(^DD(FILE,FIELD,1,DGIX)) Q:'DGIX  X ^(DGIX,2) S X=VALUE
"RTN","DGENA1A",50,0)
 Q
"RTN","DGENA1A",51,0)
 ;
"RTN","DGENA1A",52,0)
SET(FILE,IEN,FIELD,VALUE) ;
"RTN","DGENA1A",53,0)
 ;executes all the set logic for x-refs on the field=FIELD for the
"RTN","DGENA1A",54,0)
 ;record=DGENRIEN for the file=FILE for the field value=VALUE
"RTN","DGENA1A",55,0)
 ;
"RTN","DGENA1A",56,0)
 N D0,DA,DIV,DGIX,X
"RTN","DGENA1A",57,0)
 S DA=IEN,X=VALUE,DGIX=0
"RTN","DGENA1A",58,0)
 F  S DGIX=$O(^DD(FILE,FIELD,1,DGIX)) Q:'DGIX  X ^(DGIX,1)
"RTN","DGENA1A",59,0)
 Q
"RTN","DGENA1A",60,0)
 ;
"RTN","DGENA1A",61,0)
EDIT(DA,DGENR) ;
"RTN","DGENA1A",62,0)
 ;Description: Overlays a currently existing record, ien=DA, with values
"RTN","DGENA1A",63,0)
 ;     from DGENR array
"RTN","DGENA1A",64,0)
 ;Input -
"RTN","DGENA1A",65,0)
 ;  DA - ien of record in Patient Enrollment file
"RTN","DGENA1A",66,0)
 ;  DGENR - array containing an enrollment, pass by reference
"RTN","DGENA1A",67,0)
 ;Output - 1 on success, 0 on failure
"RTN","DGENA1A",68,0)
 ;
"RTN","DGENA1A",69,0)
 ; *** NOTE: This is called from within FM.  There is a problem in ***
"RTN","DGENA1A",70,0)
 ; *** that ^DIE cannot be used.  Instead, the fields              ***
"RTN","DGENA1A",71,0)
 ; *** are hard-set and cross-referenced.                          ***
"RTN","DGENA1A",72,0)
 ;
"RTN","DGENA1A",73,0)
 N NODE
"RTN","DGENA1A",74,0)
 Q:'$G(DA) 0
"RTN","DGENA1A",75,0)
 S NODE=$G(^DGEN(27.11,$G(DA),0))
"RTN","DGENA1A",76,0)
 Q:NODE="" 0
"RTN","DGENA1A",77,0)
 ;
"RTN","DGENA1A",78,0)
 ;kill off all the cross-references (FM doesn't have an API to do this)
"RTN","DGENA1A",79,0)
 D KILLALL(DA)
"RTN","DGENA1A",80,0)
 ;
"RTN","DGENA1A",81,0)
 ;now hand-set all the fields
"RTN","DGENA1A",82,0)
 ;Phase II Add subgroup to the 12 piece (SRS 6.4)
"RTN","DGENA1A",83,0)
 S NODE=DGENR("APP")_U_DGENR("DFN")_U_DGENR("SOURCE")_U_DGENR("STATUS")_U_DGENR("REASON")_U_DGENR("FACREC")  ;DJE field added with DG*5.3*940 - Closed Application (line split) - RM#867186
"RTN","DGENA1A",84,0)
 S NODE=NODE_U_DGENR("PRIORITY")_U_DGENR("EFFDATE")_U_DGENR("PRIORREC")_U_DGENR("DATE")_U_DGENR("END")_U_DGENR("SUBGRP")_U_DGENR("RCODE") ;DJE field added with DG*5.3*940 - Closed Application - RM#867186
"RTN","DGENA1A",85,0)
 S ^DGEN(27.11,DA,0)=NODE
"RTN","DGENA1A",86,0)
 S ^DGEN(27.11,DA,"R")=DGENR("REMARKS")
"RTN","DGENA1A",87,0)
 S NODE=DGENR("ELIG","CODE")
"RTN","DGENA1A",88,0)
 S NODE=NODE_U_DGENR("ELIG","SC")
"RTN","DGENA1A",89,0)
 S NODE=NODE_U_DGENR("ELIG","SCPER")
"RTN","DGENA1A",90,0)
 S NODE=NODE_U_DGENR("ELIG","POW")
"RTN","DGENA1A",91,0)
 S NODE=NODE_U_DGENR("ELIG","A&A")
"RTN","DGENA1A",92,0)
 S NODE=NODE_U_DGENR("ELIG","HB")
"RTN","DGENA1A",93,0)
 S NODE=NODE_U_DGENR("ELIG","VAPEN")
"RTN","DGENA1A",94,0)
 S NODE=NODE_U_DGENR("ELIG","VACKAMT")
"RTN","DGENA1A",95,0)
 S NODE=NODE_U_DGENR("ELIG","DISRET")
"RTN","DGENA1A",96,0)
 S NODE=NODE_U_DGENR("ELIG","MEDICAID")
"RTN","DGENA1A",97,0)
 S NODE=NODE_U_DGENR("ELIG","AO")
"RTN","DGENA1A",98,0)
 S NODE=NODE_U_DGENR("ELIG","IR")
"RTN","DGENA1A",99,0)
 S NODE=NODE_U_DGENR("ELIG","EC")  ;changed to SW Asia Cond - DG*5.3*688
"RTN","DGENA1A",100,0)
 S NODE=NODE_U_DGENR("ELIG","MTSTA")
"RTN","DGENA1A",101,0)
 S NODE=NODE_U_DGENR("ELIG","VCD")
"RTN","DGENA1A",102,0)
 S NODE=NODE_U_DGENR("ELIG","PH")
"RTN","DGENA1A",103,0)
 S NODE=NODE_U_DGENR("ELIG","UNEMPLOY")
"RTN","DGENA1A",104,0)
 S NODE=NODE_U_DGENR("ELIG","CVELEDT")
"RTN","DGENA1A",105,0)
 S NODE=NODE_U_DGENR("ELIG","SHAD") ;field added with DG*5.3*653
"RTN","DGENA1A",106,0)
 S NODE=NODE_U_DGENR("ELIG","DISLOD") ;field added with DG*5.3*672
"RTN","DGENA1A",107,0)
 S NODE=NODE_U_DGENR("ELIG","RADEXPM")
"RTN","DGENA1A",108,0)
 S NODE=NODE_U_DGENR("ELIG","AOEXPLOC") ;field added with DG*5.3*688
"RTN","DGENA1A",109,0)
 S NODE=NODE_U_DGENR("ELIG","MOH") ;field added with DG*5.3*841
"RTN","DGENA1A",110,0)
 S NODE=NODE_U_DGENR("ELIG","CLE")     ;field added with DG*5.3*909
"RTN","DGENA1A",111,0)
 S NODE=NODE_U_DGENR("ELIG","CLEDT")   ;field added with DG*5.3*909
"RTN","DGENA1A",112,0)
 S NODE=NODE_U_DGENR("ELIG","CLEST")   ;field added with DG*5.3*909
"RTN","DGENA1A",113,0)
 S NODE=NODE_U_DGENR("ELIG","CLESOR")  ;field added with DG*5.3*909
"RTN","DGENA1A",114,0)
 S NODE=NODE_U_DGENR("ELIG","MOHAWRDDATE")  ;field added with DG*5.3*972 HM
"RTN","DGENA1A",115,0)
 S NODE=NODE_U_DGENR("ELIG","MOHSTATDATE")  ;field added with DG*5.3*972 HM
"RTN","DGENA1A",116,0)
 S NODE=NODE_U_DGENR("ELIG","MOHEXEMPDATE")  ;field added with DG*5.3*972 HM
"RTN","DGENA1A",117,0)
 S ^DGEN(27.11,DA,"E")=NODE
"RTN","DGENA1A",118,0)
 S ^DGEN(27.11,DA,"U")=DGENR("DATETIME")_U_DGENR("USER")
"RTN","DGENA1A",119,0)
 ;
"RTN","DGENA1A",120,0)
 ;set the x-refs
"RTN","DGENA1A",121,0)
 D SETALL(DA,.DGENR)
"RTN","DGENA1A",122,0)
 Q 1
"RTN","DGENELA")
0^21^B33839013
"RTN","DGENELA",1,0)
DGENELA ;ALB/CJM,KCL,Zoltan/PJR,RGL,LBD,EG,TMK,CKN,ERC,TDM,JLS,HM - Patient Eligibility API ;3/3/11 3:40pm
"RTN","DGENELA",2,0)
 ;;5.3;Registration;**121,147,232,314,451,564,631,672,659,583,653,688,841,909,972**;Aug 13,1993;Build 80
"RTN","DGENELA",3,0)
 ;
"RTN","DGENELA",4,0)
GET(DFN,DGELG) ;
"RTN","DGENELA",5,0)
 ;Description: Used to obtain the patient eligibility data.
"RTN","DGENELA",6,0)
 ;  The data is placed in the local DGELG array.
"RTN","DGENELA",7,0)
 ;Input:
"RTN","DGENELA",8,0)
 ;  DFN - internal entry number of a record in the PATIENT file
"RTN","DGENELA",9,0)
 ;Output:
"RTN","DGENELA",10,0)
 ;  Function Value - returns 1 on success, 0 on failure
"RTN","DGENELA",11,0)
 ;  DGELG - this is  a local array that will be used to return patient eligibility data. The array subscripts and the fields mapped to are defined below. (pass by reference)
"RTN","DGENELA",12,0)
 ;
"RTN","DGENELA",13,0)
 ;subscript             field name
"RTN","DGENELA",14,0)
 ;"DFN"                ien Patient record
"RTN","DGENELA",15,0)
 ;"ELIG","CODE"        Primary Eligibility Code
"RTN","DGENELA",16,0)
 ;"ELIG","CODE",<ien>  Patient Eligibilities
"RTN","DGENELA",17,0)
 ;"SC"                 Service Connected
"RTN","DGENELA",18,0)
 ;"SCPER"              Service Connected Percentage
"RTN","DGENELA",19,0)
 ;"EFFDT"              SC Combined Effective Date
"RTN","DGENELA",20,0)
 ;"POW"                POW Status Indicated
"RTN","DGENELA",21,0)
 ;"A&A"                Receiving A&A Benefits
"RTN","DGENELA",22,0)
 ;"HB"                 Receiving Housebound Benefits
"RTN","DGENELA",23,0)
 ;"VAPEN"              Receiving a VA Pension
"RTN","DGENELA",24,0)
 ;"VACKAMT"            Total Annual VA Check Amount
"RTN","DGENELA",25,0)
 ;"DISRET"             Military Disability Retirement
"RTN","DGENELA",26,0)
 ;"DISLOD"             Discharge Due to Disability (added with DG 672)
"RTN","DGENELA",27,0)
 ;"MEDICAID"           Medicaid
"RTN","DGENELA",28,0)
 ;"MEDASKDT"           Date Medicaid Last Asked
"RTN","DGENELA",29,0)
 ;"AO"                 Exposed to Agent Orange
"RTN","DGENELA",30,0)
 ;"IR"                 Radiation Exposure Indicated
"RTN","DGENELA",31,0)
 ;"RADEXPM"            Radiation Exposure Method
"RTN","DGENELA",32,0)
 ;"EC"                 SW Asia Cond - change from Env Con, DG*5.3*688
"RTN","DGENELA",33,0)
 ;"MTSTA"              Means Test Status
"RTN","DGENELA",34,0)
 ;P&T                  P&T
"RTN","DGENELA",35,0)
 ;P&TDT                P&T EFFECTIVE DATE (added with DG 688)
"RTN","DGENELA",36,0)
 ;POS                  PERIOD OF SERVICE
"RTN","DGENELA",37,0)
 ;UNEMPLOY             UNEMPLOYABLE
"RTN","DGENELA",38,0)
 ;SCAWDATE             SC AWARD DATE
"RTN","DGENELA",39,0)
 ;RATEINC              RATED INCOMPETENT
"RTN","DGENELA",40,0)
 ;CLAIMNUM             CLAIM NUMBER
"RTN","DGENELA",41,0)
 ;CLAIMLOC             CLAIM FOLDER LOCATION
"RTN","DGENELA",42,0)
 ;VADISAB              RECEIVING VA DISABILITY?
"RTN","DGENELA",43,0)
 ;ELIGSTA              ELIGIBILITY STATUS
"RTN","DGENELA",44,0)
 ;ELIGSTADATE          ELIGIBILITY STATUS DATE
"RTN","DGENELA",45,0)
 ;ELIGVERIF            ELIGIBILITY VERIF. METHOD
"RTN","DGENELA",46,0)
 ;ELIGVSITE            ELIGIBILITY VERIFICATION SITE
"RTN","DGENELA",47,0)
 ;ELIGENTBY            ELIGIBILITY STATUS ENTERED BY
"RTN","DGENELA",48,0)
 ;RATEDIS
"RTN","DGENELA",49,0)
 ;  <COUNT>,"RD"      RATED DISABILITY
"RTN","DGENELA",50,0)
 ;  <COUNT>,"PER"      DISABILITY %
"RTN","DGENELA",51,0)
 ;  <COUNT>,"RDSC"     SERVICE CONNECTED
"RTN","DGENELA",52,0)
 ;  <COUNT>,"RDEXT"    EXTREMITY
"RTN","DGENELA",53,0)
 ;  <COUNT>,"RDORIG"   ORIGINAL RD EFFECTIVE DATE
"RTN","DGENELA",54,0)
 ;  <COUNT>."RDCURR"   CURRENT RD EFFECTIVE DATE
"RTN","DGENELA",55,0)
 ;"VCD"               Veteran Catastrophically Disabled? (#.39)
"RTN","DGENELA",56,0)
 ;"PH"                PURPLE HEART INDICATED
"RTN","DGENELA",57,0)
 ;"AOEXPLOC"          AGENT ORANGE EXPOSURE LOCATION
"RTN","DGENELA",58,0)
 ;"CVELEDT"           COMBAT VETERAN END DATE
"RTN","DGENELA",59,0)
 ;"SHAD"              SHAD EXPOSURE
"RTN","DGENELA",60,0)
 ;"MOH"               MEDAL OF HONOR
"RTN","DGENELA",61,0)
 ;"MOHAWRDDATE"       MEDAL OF HONOR AWARD DATE
"RTN","DGENELA",62,0)
 ;"MOHSTATDATE"       MEDAL OF HONOR CHANGE DATE
"RTN","DGENELA",63,0)
 ;"MOHEXEMPDATE"      MEDAL OF HONOR COPAYMENT EXEMPTION DATE
"RTN","DGENELA",64,0)
 ;"CLE"                CAMP LEJEUNE INDICATED?
"RTN","DGENELA",65,0)
 ;"CLEDT"              CAMP LEJEUNE DATE
"RTN","DGENELA",66,0)
 ;"CLEST"              CAMP LEJEUNE CHANGE SITE
"RTN","DGENELA",67,0)
 ;"CLESOR"             CAMP LEJEUNE SOURCE
"RTN","DGENELA",68,0)
 ;
"RTN","DGENELA",69,0)
 K DGELG
"RTN","DGENELA",70,0)
 S DGELG=""
"RTN","DGENELA",71,0)
 Q:'$D(^DPT(DFN)) 0
"RTN","DGENELA",72,0)
 N NODE,SUBREC,COUNT,CODE,IEN
"RTN","DGENELA",73,0)
 ;
"RTN","DGENELA",74,0)
 S DGELG("DFN")=DFN
"RTN","DGENELA",75,0)
 S DGELG("VCD")=$$VCD^DGENA5(DFN)
"RTN","DGENELA",76,0)
 ;
"RTN","DGENELA",77,0)
 ;
"RTN","DGENELA",78,0)
 S NODE=$G(^DPT(DFN,.29))
"RTN","DGENELA",79,0)
 S DGELG("RATEINC")=$P(NODE,"^",12)
"RTN","DGENELA",80,0)
 ;
"RTN","DGENELA",81,0)
 S NODE=$G(^DPT(DFN,.3))
"RTN","DGENELA",82,0)
 S DGELG("SC")=$P(NODE,"^")
"RTN","DGENELA",83,0)
 S DGELG("SCPER")=$P(NODE,"^",2)
"RTN","DGENELA",84,0)
 S DGELG("P&T")=$P(NODE,"^",4)
"RTN","DGENELA",85,0)
 S DGELG("P&TDT")=$P(NODE,"^",13)
"RTN","DGENELA",86,0)
 S DGELG("UNEMPLOY")=$P(NODE,"^",5)
"RTN","DGENELA",87,0)
 S DGELG("SCAWDATE")=$P(NODE,"^",12)
"RTN","DGENELA",88,0)
 S DGELG("VADISAB")=$P(NODE,"^",11)
"RTN","DGENELA",89,0)
 S DGELG("EFFDT")=$P(NODE,"^",14)
"RTN","DGENELA",90,0)
 ;
"RTN","DGENELA",91,0)
 S NODE=$G(^DPT(DFN,.31))
"RTN","DGENELA",92,0)
 S DGELG("CLAIMNUM")=$P(NODE,"^",3)
"RTN","DGENELA",93,0)
 S DGELG("CLAIMLOC")=$P(NODE,"^",4)
"RTN","DGENELA",94,0)
 ;
"RTN","DGENELA",95,0)
 S NODE=$G(^DPT(DFN,.32))
"RTN","DGENELA",96,0)
 S DGELG("POS")=$P(NODE,"^",3)
"RTN","DGENELA",97,0)
 ;
"RTN","DGENELA",98,0)
 S NODE=$G(^DPT(DFN,.36))
"RTN","DGENELA",99,0)
 S DGELG("ELIG","CODE")=$P(NODE,"^") ;primary eligibility
"RTN","DGENELA",100,0)
 S DGELG("DISRET")=$P(NODE,"^",12)
"RTN","DGENELA",101,0)
 S DGELG("DISLOD")=$P(NODE,"^",13)
"RTN","DGENELA",102,0)
 ;
"RTN","DGENELA",103,0)
 S NODE=$G(^DPT(DFN,.38))
"RTN","DGENELA",104,0)
 S DGELG("MEDICAID")=$P(NODE,"^")
"RTN","DGENELA",105,0)
 S DGELG("MEDASKDT")=$P(NODE,"^",2) ;Date Medicaid Last Asked
"RTN","DGENELA",106,0)
 ;
"RTN","DGENELA",107,0)
 S NODE=$G(^DPT(DFN,.361))
"RTN","DGENELA",108,0)
 S DGELG("ELIGSTA")=$P(NODE,"^")
"RTN","DGENELA",109,0)
 S DGELG("ELIGSTADATE")=$P(NODE,"^",2)
"RTN","DGENELA",110,0)
 S DGELG("ELIGVERIF")=$P(NODE,"^",5)
"RTN","DGENELA",111,0)
 S DGELG("ELIGENTBY")=$P(NODE,"^",6)
"RTN","DGENELA",112,0)
 ;
"RTN","DGENELA",113,0)
 S NODE=$G(^DPT(DFN,.362))
"RTN","DGENELA",114,0)
 S DGELG("VACKAMT")=$P(NODE,"^",20)
"RTN","DGENELA",115,0)
 S DGELG("VAPEN")=$P(NODE,"^",14)
"RTN","DGENELA",116,0)
 S DGELG("A&A")=$P(NODE,"^",12)
"RTN","DGENELA",117,0)
 S DGELG("HB")=$P(NODE,"^",13)
"RTN","DGENELA",118,0)
 ;
"RTN","DGENELA",119,0)
 ;
"RTN","DGENELA",120,0)
 S NODE=$G(^DPT(DFN,.321))
"RTN","DGENELA",121,0)
 S DGELG("AO")=$P(NODE,"^",2)
"RTN","DGENELA",122,0)
 S DGELG("IR")=$P(NODE,"^",3)
"RTN","DGENELA",123,0)
 S DGELG("RADEXPM")=$P(NODE,"^",12)
"RTN","DGENELA",124,0)
 S DGELG("AOEXPLOC")=$P(NODE,"^",13)
"RTN","DGENELA",125,0)
 S DGELG("SHAD")=$P(NODE,"^",15)  ;added with DG*5.3*653
"RTN","DGENELA",126,0)
 ;
"RTN","DGENELA",127,0)
 S NODE=$G(^DPT(DFN,.322))
"RTN","DGENELA",128,0)
 S DGELG("EC")=$P(NODE,"^",13)
"RTN","DGENELA",129,0)
 ;
"RTN","DGENELA",130,0)
 S NODE=$G(^DPT(DFN,.52))
"RTN","DGENELA",131,0)
 S DGELG("POW")=$P(NODE,"^",5)
"RTN","DGENELA",132,0)
 S DGELG("CVELEDT")=$P(NODE,"^",15)
"RTN","DGENELA",133,0)
 ;
"RTN","DGENELA",134,0)
 ; Purple Heart Indicator
"RTN","DGENELA",135,0)
 S NODE=$G(^DPT(DFN,.53))
"RTN","DGENELA",136,0)
 S DGELG("PH")=$P(NODE,"^")
"RTN","DGENELA",137,0)
 ;
"RTN","DGENELA",138,0)
 ; Medal of Honor Indicator
"RTN","DGENELA",139,0)
 S NODE=$G(^DPT(DFN,.54))
"RTN","DGENELA",140,0)
 S DGELG("MOH")=$P(NODE,"^",1)
"RTN","DGENELA",141,0)
 S DGELG("MOHAWRDDATE")=$P(NODE,"^",2) ;MH AWARD DATE DG*5.3*972 HM
"RTN","DGENELA",142,0)
 S DGELG("MOHSTATDATE")=$P(NODE,"^",3) ;MH STATUS DATE DG*5.3*972 HM
"RTN","DGENELA",143,0)
 S DGELG("MOHEXEMPDATE")=$P(NODE,"^",4) ;MH COPAYMENT EXEMPTION DATE DG*5.3*972 HM
"RTN","DGENELA",144,0)
 ;
"RTN","DGENELA",145,0)
 ; Camp Lejeune Eligibility Indicator  DG*5.3*909
"RTN","DGENELA",146,0)
 S NODE=$G(^DPT(DFN,.3217))
"RTN","DGENELA",147,0)
 S DGELG("CLE")=$P(NODE,"^",1)
"RTN","DGENELA",148,0)
 S DGELG("CLEDT")=$P(NODE,"^",2)
"RTN","DGENELA",149,0)
 S DGELG("CLEST")=$P(NODE,"^",3)
"RTN","DGENELA",150,0)
 S DGELG("CLESOR")=$P(NODE,"^",4)
"RTN","DGENELA",151,0)
 ;
"RTN","DGENELA",152,0)
 ;means test category
"RTN","DGENELA",153,0)
 S DGELG("MTSTA")=""
"RTN","DGENELA",154,0)
 S IEN=$P($$LST^DGMTU(DFN),"^")
"RTN","DGENELA",155,0)
 I IEN S DGELG("MTSTA")=$P($G(^DGMT(408.31,IEN,0)),"^",3)
"RTN","DGENELA",156,0)
 ;
"RTN","DGENELA",157,0)
 ;get the other eligibilities multiple
"RTN","DGENELA",158,0)
 S SUBREC=0
"RTN","DGENELA",159,0)
 F  S SUBREC=$O(^DPT(DFN,"E",SUBREC)) Q:'SUBREC  D
"RTN","DGENELA",160,0)
 .S CODE=+$G(^DPT(DFN,"E",SUBREC,0))
"RTN","DGENELA",161,0)
 .;
"RTN","DGENELA",162,0)
 .;need to check the "B" x-ref, because when a code is deleted from the multiple, the kill logic is executed BEFORE the data is actually removed - but the "B" x-ref has been deleted at this point
"RTN","DGENELA",163,0)
 .I CODE,$D(^DPT(DFN,"E","B",CODE)) S DGELG("ELIG","CODE",CODE)=SUBREC
"RTN","DGENELA",164,0)
 ;
"RTN","DGENELA",165,0)
 ;rated disability multiple
"RTN","DGENELA",166,0)
 S SUBREC=0,COUNT=0
"RTN","DGENELA",167,0)
 F  S SUBREC=$O(^DPT(DFN,.372,SUBREC)) Q:'SUBREC  D
"RTN","DGENELA",168,0)
 .S NODE=$G(^DPT(DFN,.372,SUBREC,0))
"RTN","DGENELA",169,0)
 .Q:'$P(NODE,"^")
"RTN","DGENELA",170,0)
 .S COUNT=COUNT+1
"RTN","DGENELA",171,0)
 .S DGELG("RATEDIS",COUNT,"RD")=$P(NODE,"^")
"RTN","DGENELA",172,0)
 .S DGELG("RATEDIS",COUNT,"PER")=$P(NODE,"^",2)
"RTN","DGENELA",173,0)
 .S DGELG("RATEDIS",COUNT,"RDSC")=$P(NODE,"^",3)
"RTN","DGENELA",174,0)
 .S DGELG("RATEDIS",COUNT,"RDEXT")=$P(NODE,"^",4)
"RTN","DGENELA",175,0)
 .S DGELG("RATEDIS",COUNT,"RDORIG")=$P(NODE,"^",5)
"RTN","DGENELA",176,0)
 .S DGELG("RATEDIS",COUNT,"RDCURR")=$P(NODE,"^",6)
"RTN","DGENELA",177,0)
 ;
"RTN","DGENELA",178,0)
 Q 1
"RTN","DGENELA",179,0)
 ;
"RTN","DGENELA",180,0)
NATNAME(CODE) ;
"RTN","DGENELA",181,0)
 ;Description: Given an entry in file #8, Eligibility Code file,
"RTN","DGENELA",182,0)
 ;  finds the corresponding entry in file 8.1, MAS Eligibility Code file,
"RTN","DGENELA",183,0)
 ;  and returns the name
"RTN","DGENELA",184,0)
 ;Input:
"RTN","DGENELA",185,0)
 ;  CODE - pointer to file #8
"RTN","DGENELA",186,0)
 ;Output:
"RTN","DGENELA",187,0)
 ;  Function Value - name of corresponding code in file #8.1
"RTN","DGENELA",188,0)
 ;
"RTN","DGENELA",189,0)
 Q:'$G(CODE) ""
"RTN","DGENELA",190,0)
 Q $$CODENAME($P($G(^DIC(8,CODE,0)),"^",9))
"RTN","DGENELA",191,0)
 ;
"RTN","DGENELA",192,0)
NATCODE(CODE) ;
"RTN","DGENELA",193,0)
 ;Description: Given an entry in file #8, Eligibility Code file,
"RTN","DGENELA",194,0)
 ;  finds the corresponding entry in file 8.1, MAS Eligibility Code file
"RTN","DGENELA",195,0)
 ;Input:
"RTN","DGENELA",196,0)
 ;  CODE - pointer to file #8
"RTN","DGENELA",197,0)
 ;Output:
"RTN","DGENELA",198,0)
 ;  Function Value - pointer to file #8.1
"RTN","DGENELA",199,0)
 ;
"RTN","DGENELA",200,0)
 Q:'$G(CODE) ""
"RTN","DGENELA",201,0)
 Q $P($G(^DIC(8,CODE,0)),"^",9)
"RTN","DGENELA",202,0)
 ;
"RTN","DGENELA",203,0)
CODENAME(CODE) ;
"RTN","DGENELA",204,0)
 ;Description: Given a pointer to file #8.1, MAS Eligibility Code file,
"RTN","DGENELA",205,0)
 ;  it returns the name of the code 
"RTN","DGENELA",206,0)
 ;Input:
"RTN","DGENELA",207,0)
 ;  CODE - pointer to file #8.1
"RTN","DGENELA",208,0)
 ;Output:
"RTN","DGENELA",209,0)
 ;  Function Value - name of the code pointed to
"RTN","DGENELA",210,0)
 ;
"RTN","DGENELA",211,0)
 Q:'$G(CODE) ""
"RTN","DGENELA",212,0)
 Q $P($G(^DIC(8.1,CODE,0)),"^")
"RTN","DGENELA",213,0)
 ;
"RTN","DGENELA",214,0)
ELIGSTAT(DFN,DGELG) ;
"RTN","DGENELA",215,0)
 ;Description: Used to get the ELIGIBILITY STATUS and the 
"RTN","DGENELA",216,0)
 ;ELIGIBILITY STATUS DATE of the patient.
"RTN","DGENELA",217,0)
 ;
"RTN","DGENELA",218,0)
 ;Input:
"RTN","DGENELA",219,0)
 ;  DFN - ien of patient record
"RTN","DGENELA",220,0)
 ;
"RTN","DGENELA",221,0)
 ;Output:
"RTN","DGENELA",222,0)
 ;  Function Value - 1 on success, 0 on failure
"RTN","DGENELA",223,0)
 ;  DGELG array (pass by reference)
"RTN","DGENELA",224,0)
 ;    "ELIGSTA" - ELIGIBILITY STATUS
"RTN","DGENELA",225,0)
 ;    "ELIGSTADATE" - ELIGIBILITY STATUS DATE
"RTN","DGENELA",226,0)
 ;
"RTN","DGENELA",227,0)
 N NODE,SUCCESS
"RTN","DGENELA",228,0)
 D
"RTN","DGENELA",229,0)
 .S SUCCESS=1
"RTN","DGENELA",230,0)
 .I '$G(DFN) S SUCCESS=0 Q
"RTN","DGENELA",231,0)
 .S NODE=$G(^DPT(DFN,.361))
"RTN","DGENELA",232,0)
 .S DGELG("ELIGSTA")=$P(NODE,"^")
"RTN","DGENELA",233,0)
 .S DGELG("ELIGSTADATE")=$P(NODE,"^",2)
"RTN","DGENELA",234,0)
 Q SUCCESS
"RTN","DGENELA1")
0^22^B87005924
"RTN","DGENELA1",1,0)
DGENELA1 ;ALB/CJM,RTK,TDM,PJR,RGL,LBD,EG,TMK,CKN,ERC,HM - Patient Eligibility API ;20 Jan 2015  3:27 PM
"RTN","DGENELA1",2,0)
 ;;5.3;Registration;**147,327,314,367,497,451,564,631,672,659,583,746,653,688,841,909,972**;Aug 13,1993;Build 80
"RTN","DGENELA1",3,0)
 ;
"RTN","DGENELA1",4,0)
CHECK(DGELG,DGPAT,DGCDIS,ERRMSG) ;
"RTN","DGENELA1",5,0)
 ;Does validation checks on the eligibility contained in the DGELG array.
"RTN","DGENELA1",6,0)
 ;
"RTN","DGENELA1",7,0)
 ;Input:
"RTN","DGENELA1",8,0)
 ;  DGELG - array containing eligibility data (pass by reference)
"RTN","DGENELA1",9,0)
 ;  DGPAT - array containing patient data (pass by reference)
"RTN","DGENELA1",10,0)
 ;  DGCDIS - array containing catastrophic disability determination (pass by reference)
"RTN","DGENELA1",11,0)
 ;
"RTN","DGENELA1",12,0)
 ;Output:
"RTN","DGENELA1",13,0)
 ;  Function Value - returns 1 if all validation checks passed, 0 otherwise
"RTN","DGENELA1",14,0)
 ;  ERRMSG - returns a message if validations fail (pass by reference)
"RTN","DGENELA1",15,0)
 ;
"RTN","DGENELA1",16,0)
 N SUCCESS,NATCODE,BAD,SUB,CODE,DGONV,DGTEXT,INELDATE
"RTN","DGENELA1",17,0)
 S SUCCESS=0
"RTN","DGENELA1",18,0)
 S ERRMSG=""
"RTN","DGENELA1",19,0)
 ;
"RTN","DGENELA1",20,0)
 D  ;drops out of block on failure
"RTN","DGENELA1",21,0)
 .;
"RTN","DGENELA1",22,0)
 .;get optional arrays if not there
"RTN","DGENELA1",23,0)
 .I '$D(DGPAT),'$$GET^DGENPTA(DGELG("DFN"),.DGPAT) S ERRMSG="PATIENT NOT FOUND" Q
"RTN","DGENELA1",24,0)
 .I '$D(DGCDIS),'$$GET^DGENCDA(DGELG("DFN"),.DGCDIS) S ERRMSG="PATIENT NOT FOUND" Q
"RTN","DGENELA1",25,0)
 .;
"RTN","DGENELA1",26,0)
 .;do field level checks
"RTN","DGENELA1",27,0)
 .S SUB="" F  S SUB=$O(DGELG(SUB)) Q:(SUB="")  I SUB'="ELIG",SUB'="RATEDIS",'$$CHKFIELD(SUB,DGELG(SUB)) S ERRMSG="BAD VALUE, FIELD = "_$$GET1^DID(2,$$FIELD(SUB),"","LABEL") Q
"RTN","DGENELA1",28,0)
 .;
"RTN","DGENELA1",29,0)
 .Q:(SUB'="")  ;didn't finish the loop
"RTN","DGENELA1",30,0)
 .;
"RTN","DGENELA1",31,0)
 .;also check SC % field of Rated Disabilities
"RTN","DGENELA1",32,0)
 .S SUB="" F  S SUB=$O(DGELG("RATEDIS",SUB)) Q:(SUB="")  I '$$CHKFIELD("PER",DGELG("RATEDIS",SUB,"PER")) S ERRMSG="BAD VALUE, FIELD = DISABILITY % OF THE RATED DISABILITIES MULTIPLE" Q
"RTN","DGENELA1",33,0)
 .Q:(SUB'="")  ;didn't finish the loop
"RTN","DGENELA1",34,0)
 .;
"RTN","DGENELA1",35,0)
 .I DGELG("SC")="Y",DGELG("SCPER")="" S ERRMSG="SC% UNSPECIFIED FOR SC VET" Q
"RTN","DGENELA1",36,0)
 .;
"RTN","DGENELA1",37,0)
 .;!! put this check back when POS is added to the Z11 message
"RTN","DGENELA1",38,0)
 .;I DGPAT("VETERAN")="Y",'DGELG("POS") S ERRMSG="POS UNSPECIFIED" Q 
"RTN","DGENELA1",39,0)
 .;
"RTN","DGENELA1",40,0)
 .I 'DGELG("ELIG","CODE") S ERRMSG="PRIMARY ELIGIBILITY IS UNSPECIFIED" Q
"RTN","DGENELA1",41,0)
 .;
"RTN","DGENELA1",42,0)
 .I (DGELG("VACKAMT")>0),(DGELG("A&A")_DGELG("HB")_DGELG("VAPEN")_DGELG("VADISAB")'["Y") S ERRMSG="VA CHECK AMOUNT > 0 BUT INCOME INDICATORS ALL SHOW 'NO'" Q
"RTN","DGENELA1",43,0)
 .;
"RTN","DGENELA1",44,0)
 .;
"RTN","DGENELA1",45,0)
 .;
"RTN","DGENELA1",46,0)
 .I (DGELG("SC")="N"),(DGELG("VADISAB")="Y") S ERRMSG="NSC VETERANS CAN NOT BE RECEIVING VA DISABILITY BENEFITS" Q
"RTN","DGENELA1",47,0)
 .;
"RTN","DGENELA1",48,0)
 .S BAD=1 D  Q:BAD  ;check primary eligibility
"RTN","DGENELA1",49,0)
 ..S NATCODE=$$NATCODE^DGENELA(DGELG("ELIG","CODE"))
"RTN","DGENELA1",50,0)
 ..Q:'NATCODE
"RTN","DGENELA1",51,0)
 ..;
"RTN","DGENELA1",52,0)
 ..I NATCODE=21 S ERRMSG="CATASTROPHICALLY DISABLED NOT ALLOWED AS PRIMARY ELIGIBILITY" Q
"RTN","DGENELA1",53,0)
 ..;
"RTN","DGENELA1",54,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(DGELG("SCPER")<50),(NATCODE'=3) S ERRMSG="PRIMARY ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTED PERCENTAGE" Q
"RTN","DGENELA1",55,0)
 ..;
"RTN","DGENELA1",56,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(DGELG("SCPER")>49),(NATCODE'=1) S ERRMSG="PRIMARY ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTED PERCENTAGE" Q
"RTN","DGENELA1",57,0)
 ..;
"RTN","DGENELA1",58,0)
 ..S DGONV=$O(^DIC(21,"B","OTHER NON-VETERANS","")),INELDATE=$P($G(^DPT(DFN,.15)),"^",2)
"RTN","DGENELA1",59,0)
 ..I INELDATE'="",DGPAT("INELDATE")'>0,DGELG("POS"),DGELG("POS")=DGONV,'$D(^DIC(21,DGELG("POS"),"E",DGELG("ELIG","CODE"))) D
"RTN","DGENELA1",60,0)
 ...S DGTEXT="Patient was previously determined to be ineligible for VA health care.  Upon review, the individual is determined to be eligible for "
"RTN","DGENELA1",61,0)
 ...S DGTEXT=DGTEXT_"VA care.  Please update period of service and other eligibility data as needed.."
"RTN","DGENELA1",62,0)
 ...D ADDMSG^DGENUPL3(.MSGS,DGTEXT,0)
"RTN","DGENELA1",63,0)
 ..;
"RTN","DGENELA1",64,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(NATCODE=1)!(NATCODE=3) S BAD=0 Q  ;primary eligibility OK
"RTN","DGENELA1",65,0)
 ..;
"RTN","DGENELA1",66,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("POW")="Y"),NATCODE'=18 S ERRMSG="PRIMARY ELIGIBILITY SHOULD BE PRISONER OF WAR" Q
"RTN","DGENELA1",67,0)
 ..;
"RTN","DGENELA1",68,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("POW")="Y"),NATCODE=18 S BAD=0 Q
"RTN","DGENELA1",69,0)
 ..;
"RTN","DGENELA1",70,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("PH")="Y"),NATCODE'=22 S ERRMSG="PRIMARY ELIGIBILITY SHOULD BE PURPLE HEART RECIPIENT" Q
"RTN","DGENELA1",71,0)
 ..;
"RTN","DGENELA1",72,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("PH")="Y"),NATCODE=22 S BAD=0 Q
"RTN","DGENELA1",73,0)
 ..;
"RTN","DGENELA1",74,0)
 ..; disabled DG*5.3*367, for Inel
"RTN","DGENELA1",75,0)
 ..;I (DGPAT("VETERAN")'=$P($G(^DIC(8.1,NATCODE,0)),"^",5)) S ERRMSG="PRIMARY ELIGIBILTY NOT CONSISTENT WITH VETERAN STATUS" Q
"RTN","DGENELA1",76,0)
 ..;
"RTN","DGENELA1",77,0)
 ..I DGELG("A&A")'="Y",NATCODE=2 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH A&A INDICATOR" Q
"RTN","DGENELA1",78,0)
 ..;
"RTN","DGENELA1",79,0)
 ..I DGELG("HB")'="Y",NATCODE=15 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH HOUSEBOUND INDICATOR" Q
"RTN","DGENELA1",80,0)
 ..;
"RTN","DGENELA1",81,0)
 ..I DGELG("VAPEN")'="Y",NATCODE=4 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH VA PENSION INDICATOR" Q
"RTN","DGENELA1",82,0)
 ..;
"RTN","DGENELA1",83,0)
 ..I DGELG("SC")="Y",((NATCODE=4)!(NATCODE=5)) S ERRMSG="NSC ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTION INDICATOR" Q
"RTN","DGENELA1",84,0)
 ..;
"RTN","DGENELA1",85,0)
 ..I (DGPAT("DOB")>2061231),(NATCODE=16) S ERRMSG="DOB IS INCONSISTENT WITH ELIGIBILITY OF MEXICAN BORDER WAR" Q
"RTN","DGENELA1",86,0)
 ..;
"RTN","DGENELA1",87,0)
 ..I (DGPAT("DOB")>2071231),(NATCODE=17) S ERRMSG="DOB IS INCONSISTENT WITH ELIGIBILITY OF WORLD WAR I" Q
"RTN","DGENELA1",88,0)
 ..;
"RTN","DGENELA1",89,0)
 ..;primary eligibility is good
"RTN","DGENELA1",90,0)
 ..S BAD=0
"RTN","DGENELA1",91,0)
 .;
"RTN","DGENELA1",92,0)
 .S SUCCESS=1
"RTN","DGENELA1",93,0)
 .;check eligibilities multiple
"RTN","DGENELA1",94,0)
 .S CODE=0 F  S CODE=$O(DGELG("ELIG","CODE",CODE)) Q:'CODE  D  Q:('SUCCESS)
"RTN","DGENELA1",95,0)
 ..S NATCODE=$$NATCODE^DGENELA(CODE)
"RTN","DGENELA1",96,0)
 ..Q:'NATCODE
"RTN","DGENELA1",97,0)
 ..I NATCODE=21,'DGCDIS("DATE") S SUCCESS=0,ERRMSG="CATASTROPHICALLY DISABLED ELIGIBILITY REQUIRES CATASTROPHICALLY DISABLED DETERMINATION DATE" Q
"RTN","DGENELA1",98,0)
 .;
"RTN","DGENELA1",99,0)
 Q SUCCESS
"RTN","DGENELA1",100,0)
 ;
"RTN","DGENELA1",101,0)
STORE(DGELG,DGPAT,DGCDIS,ERROR,SKIPCHK) ;
"RTN","DGENELA1",102,0)
 ;Stores an eligibility record for a patient. The patient record must
"RTN","DGENELA1",103,0)
 ;already exist. A lock on the Patient record is required, and is
"RTN","DGENELA1",104,0)
 ;released upon completion.
"RTN","DGENELA1",105,0)
 ;
"RTN","DGENELA1",106,0)
 ;Input:
"RTN","DGENELA1",107,0)
 ;  DGELG - eligibility array (pass by reference)
"RTN","DGENELA1",108,0)
 ;  DGPAT - patient array (optional, pass by reference)
"RTN","DGENELA1",109,0)
 ;  DGCDIS - array containing the catastrophic disability determination (optional, pass by reference)
"RTN","DGENELA1",110,0)
 ;  SKIPCHK - flag, set to 1 means that the consistency checks
"RTN","DGENELA1",111,0)
 ;            were already done & should be skipped
"RTN","DGENELA1",112,0)
 ;
"RTN","DGENELA1",113,0)
 ;Output:
"RTN","DGENELA1",114,0)
 ;  Function Value - returns 1 if successful, otherwise 0
"RTN","DGENELA1",115,0)
 ;  ERROR - in event of failure returns an error message (pass by reference, optional)
"RTN","DGENELA1",116,0)
 ;
"RTN","DGENELA1",117,0)
 N SUCCESS,DATA,FIELD,DA,DFN,COUNT
"RTN","DGENELA1",118,0)
 S DFN=$G(DGELG("DFN"))
"RTN","DGENELA1",119,0)
 S SUCCESS=0
"RTN","DGENELA1",120,0)
 S ERROR=""
"RTN","DGENELA1",121,0)
 ;
"RTN","DGENELA1",122,0)
 D  ;drops out of block on failure
"RTN","DGENELA1",123,0)
 .I '$$LOCK^DGENPTA1(DFN) S ERROR="UNABLE TO LOCK PATIENT RECORD" Q
"RTN","DGENELA1",124,0)
 .I $G(SKIPCHK)'=1,'$$CHECK(.DGELG,.DGPAT,.DGCDIS,.ERROR) Q
"RTN","DGENELA1",125,0)
 .S SUB="" F  S SUB=$O(DGELG(SUB)) Q:SUB=""  D
"RTN","DGENELA1",126,0)
 ..I SUB'="ELIG",SUB'="RATEDIS",SUB'="DFN" S FIELD=$$FIELD(SUB) I FIELD S DATA(FIELD)=DGELG(SUB)
"RTN","DGENELA1",127,0)
 .;lock Camp Lejeune when it comes over from HEC in Z11 - DG*5.3*909
"RTN","DGENELA1",128,0)
 .I "^Y^N^"[("^"_$G(DATA(.321701))_"^") S DATA(.32171)=1
"RTN","DGENELA1",129,0)
 .;
"RTN","DGENELA1",130,0)
 .;don't add the Primary Eligibility unless different, so as to not
"RTN","DGENELA1",131,0)
 .;fire off x-refs unless necessary
"RTN","DGENELA1",132,0)
 .I $P($G(^DPT(DFN,.36)),"^")'=DGELG("ELIG","CODE") S DATA(.361)=DGELG("ELIG","CODE")
"RTN","DGENELA1",133,0)
 .;
"RTN","DGENELA1",134,0)
 .; Only update User Enrollee fields if the incoming UE status is
"RTN","DGENELA1",135,0)
 .; greater than the USER ENROLLEE VALID THROUGH on file.
"RTN","DGENELA1",136,0)
 .I $G(DATA(.3617))<$P($G(^DPT(DFN,.361)),"^",7) K DATA(.3617),DATA(.3618)
"RTN","DGENELA1",137,0)
 .;
"RTN","DGENELA1",138,0)
 .;update Patient file record with data from Z11
"RTN","DGENELA1",139,0)
 .D UPDZ11^DGENELA2
"RTN","DGENELA1",140,0)
 .;
"RTN","DGENELA1",141,0)
 .;delete eligibilities that do not belong
"RTN","DGENELA1",142,0)
 .D DELELIG^DGENELA2(DFN,.DGELG)
"RTN","DGENELA1",143,0)
 .;
"RTN","DGENELA1",144,0)
 .;overlay Rated Disabilities
"RTN","DGENELA1",145,0)
 .Q:'$$OVERLAY()
"RTN","DGENELA1",146,0)
 .;
"RTN","DGENELA1",147,0)
 .;Add the new Patient Eligibilities
"RTN","DGENELA1",148,0)
 .;Don't add the an eligibility unless different - so as to not
"RTN","DGENELA1",149,0)
 .;fire off the x-refs unless necessary.
"RTN","DGENELA1",150,0)
 .;Also, try to assign ien = the code (see input transform of the field).
"RTN","DGENELA1",151,0)
 .K DA,DATA
"RTN","DGENELA1",152,0)
 .S DA(1)=DFN
"RTN","DGENELA1",153,0)
 .S DATA(.01)=0
"RTN","DGENELA1",154,0)
 .F  S DATA(.01)=$O(DGELG("ELIG","CODE",DATA(.01))) Q:'DATA(.01)  I '$D(^DPT(DFN,"E","B",DATA(.01))) I '$$ADD^DGENDBS(2.0361,.DA,.DATA,,$S($D(^DPT(DFN,"E",DATA(.01))):0,1:DATA(.01))) S ERROR="FILEMAN FAILED TO ADD PATIENT ELIGIBILITY" Q
"RTN","DGENELA1",155,0)
 .;
"RTN","DGENELA1",156,0)
 .S SUCCESS=1
"RTN","DGENELA1",157,0)
 ;
"RTN","DGENELA1",158,0)
 D UNLOCK^DGENPTA1(DFN)
"RTN","DGENELA1",159,0)
 Q SUCCESS
"RTN","DGENELA1",160,0)
 ;
"RTN","DGENELA1",161,0)
FIELD(SUB) ;
"RTN","DGENELA1",162,0)
 ;given a subscript from the ELIGIBILITY array, returns the field number
"RTN","DGENELA1",163,0)
 ;
"RTN","DGENELA1",164,0)
 Q:SUB="CODE" .361
"RTN","DGENELA1",165,0)
 Q:SUB="SC" .301
"RTN","DGENELA1",166,0)
 Q:SUB="SCPER" .302
"RTN","DGENELA1",167,0)
 Q:SUB="EFFDT" .3014
"RTN","DGENELA1",168,0)
 Q:SUB="POW" .525
"RTN","DGENELA1",169,0)
 Q:SUB="PH" .531
"RTN","DGENELA1",170,0)
 Q:SUB="A&A" .36205
"RTN","DGENELA1",171,0)
 Q:SUB="HB" .36215
"RTN","DGENELA1",172,0)
 Q:SUB="VAPEN" .36235
"RTN","DGENELA1",173,0)
 Q:SUB="VACKAMT" .36295
"RTN","DGENELA1",174,0)
 Q:SUB="DISRET" .3602
"RTN","DGENELA1",175,0)
 Q:SUB="DISLOD" .3603
"RTN","DGENELA1",176,0)
 Q:SUB="MEDICAID" .381
"RTN","DGENELA1",177,0)
 Q:SUB="MEDASKDT" .382 ;EVC - DG*5.3*653
"RTN","DGENELA1",178,0)
 Q:SUB="AO" .32102
"RTN","DGENELA1",179,0)
 Q:SUB="IR" .32103
"RTN","DGENELA1",180,0)
 Q:SUB="EC" .322013  ;name change from Env Con, DG*5.3*688
"RTN","DGENELA1",181,0)
 Q:SUB="MTSTA" ""  ;don't map Means Test Category
"RTN","DGENELA1",182,0)
 Q:SUB="P&T" .304
"RTN","DGENELA1",183,0)
 Q:SUB="P&TDT" .3013  ;field added with DG*5.3*688
"RTN","DGENELA1",184,0)
 Q:SUB="POS" .323
"RTN","DGENELA1",185,0)
 Q:SUB="UNEMPLOY" .305
"RTN","DGENELA1",186,0)
 Q:SUB="SCAWDATE" .3012
"RTN","DGENELA1",187,0)
 Q:SUB="RATEINC" .293
"RTN","DGENELA1",188,0)
 Q:SUB="CLAIMNUM" .313
"RTN","DGENELA1",189,0)
 Q:SUB="CLAIMLOC" .314
"RTN","DGENELA1",190,0)
 Q:SUB="VADISAB" .3025
"RTN","DGENELA1",191,0)
 Q:SUB="ELIGSTA" .3611
"RTN","DGENELA1",192,0)
 Q:SUB="ELIGSTADATE" .3612
"RTN","DGENELA1",193,0)
 Q:SUB="ELIGVERIF" .3615
"RTN","DGENELA1",194,0)
 Q:SUB="ELIGENTBY" .3616
"RTN","DGENELA1",195,0)
 Q:SUB="RD" .01
"RTN","DGENELA1",196,0)
 Q:SUB="PER" 2
"RTN","DGENELA1",197,0)
 Q:SUB="RDSC" 3
"RTN","DGENELA1",198,0)
 Q:SUB="RDEXT" 4
"RTN","DGENELA1",199,0)
 Q:SUB="RDORIG" 5
"RTN","DGENELA1",200,0)
 Q:SUB="RDCURR" 6
"RTN","DGENELA1",201,0)
 Q:SUB="UEYEAR" .3617
"RTN","DGENELA1",202,0)
 Q:SUB="UESITE" .3618
"RTN","DGENELA1",203,0)
 Q:SUB="AOEXPLOC" .3213
"RTN","DGENELA1",204,0)
 Q:SUB="CVELEDT" .5295
"RTN","DGENELA1",205,0)
 Q:SUB="SHAD" .32115
"RTN","DGENELA1",206,0)
 Q:SUB="MOH" .541
"RTN","DGENELA1",207,0)
 Q:SUB="MOHAWRDDATE" .542  ;MOH AWARD DATE DG*5.3*972 HM
"RTN","DGENELA1",208,0)
 Q:SUB="MOHSTATDATE" .543  ;MOH STATUS DATE DG*5.3*972 HM
"RTN","DGENELA1",209,0)
 Q:SUB="MOHEXEMPDATE" .544 ;MOH COPAYMENT EXEMPTION DATE DG*5.3*972 HM
"RTN","DGENELA1",210,0)
 Q:SUB="CLE" .321701     ; Added for Camp Lejeune - DG*5.3*909
"RTN","DGENELA1",211,0)
 Q:SUB="CLEDT" .321702   ; Added for Camp Lejeune - DG*5.3*909
"RTN","DGENELA1",212,0)
 Q:SUB="CLEST" .321703   ; Added for Camp Lejeune - DG*5.3*909
"RTN","DGENELA1",213,0)
 Q:SUB="CLESOR" .321704  ; Added for Camp Lejeune - DG*5.3*909
"RTN","DGENELA1",214,0)
 ;
"RTN","DGENELA1",215,0)
 Q ""
"RTN","DGENELA1",216,0)
 ;
"RTN","DGENELA1",217,0)
CHKFIELD(SUB,VAL) ;
"RTN","DGENELA1",218,0)
 ;Description: Does field level validation of the value. Returns 1
"RTN","DGENELA1",219,0)
 ;if the value is good, 0 otherwise.
"RTN","DGENELA1",220,0)
 ;
"RTN","DGENELA1",221,0)
 Q:($G(VAL)="") 1  ;for now, all NULL values assumed okay
"RTN","DGENELA1",222,0)
 ;
"RTN","DGENELA1",223,0)
 N BAD S BAD=0
"RTN","DGENELA1",224,0)
 I (SUB="SCPER")!(SUB="PER"),(+VAL'=VAL)!(VAL>100)!(VAL<0)!(VAL?.E1"."1N.N) S BAD=1
"RTN","DGENELA1",225,0)
 I SUB="VACKAMT",+VAL'=VAL&(VAL'?.N1"."2N)!(VAL>99999)!(VAL<0) S BAD=1
"RTN","DGENELA1",226,0)
 I SUB="DISRET",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",227,0)
 I SUB="DISLOD",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",228,0)
 I SUB="MEDICAID",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",229,0)
 I SUB="RATEINC",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",230,0)
 I SUB="ELIGSTA",VAL'="P",VAL'="R",VAL'="V" S BAD=1
"RTN","DGENELA1",231,0)
 I SUB="POW",VAL'="Y",VAL'="N",VAL'="U" S BAD=1
"RTN","DGENELA1",232,0)
 Q 'BAD
"RTN","DGENELA1",233,0)
 ;
"RTN","DGENELA1",234,0)
 ;
"RTN","DGENELA1",235,0)
OVERLAY() ;
"RTN","DGENELA1",236,0)
 ;Description: Overlay the local Rated Disabilities with whatever HEC
"RTN","DGENELA1",237,0)
 ;sent.
"RTN","DGENELA1",238,0)
 ;
"RTN","DGENELA1",239,0)
 N SUCCESS S SUCCESS=1
"RTN","DGENELA1",240,0)
 ;
"RTN","DGENELA1",241,0)
 ;delete the rated disabilities multiple
"RTN","DGENELA1",242,0)
 D DELRDIS^DGENELA2(DFN)
"RTN","DGENELA1",243,0)
 ;
"RTN","DGENELA1",244,0)
 ;add the rated disabilities
"RTN","DGENELA1",245,0)
 K DATA,DA
"RTN","DGENELA1",246,0)
 S DA(1)=DFN
"RTN","DGENELA1",247,0)
 S COUNT=0
"RTN","DGENELA1",248,0)
 F  S COUNT=$O(DGELG("RATEDIS",COUNT)) Q:'COUNT  D
"RTN","DGENELA1",249,0)
 .S DATA(.01)=DGELG("RATEDIS",COUNT,"RD")
"RTN","DGENELA1",250,0)
 .I DATA(.01) D
"RTN","DGENELA1",251,0)
 ..S DATA(2)=DGELG("RATEDIS",COUNT,"PER")
"RTN","DGENELA1",252,0)
 ..S DATA(3)=DGELG("RATEDIS",COUNT,"RDSC")
"RTN","DGENELA1",253,0)
 ..S DATA(4)=DGELG("RATEDIS",COUNT,"RDEXT")
"RTN","DGENELA1",254,0)
 ..S DATA(5)=DGELG("RATEDIS",COUNT,"RDORIG")
"RTN","DGENELA1",255,0)
 ..S DATA(6)=DGELG("RATEDIS",COUNT,"RDCURR")
"RTN","DGENELA1",256,0)
 ..I '$$ADD^DGENDBS(2.04,.DA,.DATA) S ERROR="FILEMAN FAILED TO ADD RATED DISABILTIES",SUCCESS=0
"RTN","DGENELA1",257,0)
 Q SUCCESS
"RTN","DGENELA4")
0^26^B76988124
"RTN","DGENELA4",1,0)
DGENELA4 ;ALB/CJM,KCL,RTK,LBD,EG,CKN,DLF,TDM,JLS,HM - Patient Eligibility API ;5/10/11 12:03pm
"RTN","DGENELA4",2,0)
 ;;5.3;Registration;**232,275,306,327,314,367,417,437,456,491,451,564,672,659,653,688,803,754,841,909,972**;Aug 13,1993;Build 80
"RTN","DGENELA4",3,0)
 ;
"RTN","DGENELA4",4,0)
 ;
"RTN","DGENELA4",5,0)
PRIORITY(DFN,DGELG,DGELGSUB,ENRDATE,APPDATE) ;
"RTN","DGENELA4",6,0)
 ; Description: Used to compute the priority group and subgroup for a
"RTN","DGENELA4",7,0)
 ; patient, also returning the subset of the eligibility data on which 
"RTN","DGENELA4",8,0)
 ; the priority subgroup is based.
"RTN","DGENELA4",9,0)
 ;
"RTN","DGENELA4",10,0)
 ;Input:
"RTN","DGENELA4",11,0)
 ;      DFN - ien of patient
"RTN","DGENELA4",12,0)
 ;    DGELG - ELIGIBILITY object array (optional, pass by reference)
"RTN","DGENELA4",13,0)
 ;  ENRDATE - The Enrollment Date. This date is used in the priority
"RTN","DGENELA4",14,0)
 ;            determination only if the application date is not passed.
"RTN","DGENELA4",15,0)
 ;  APPDATE - The Enrollment Application Date.  This date is used
"RTN","DGENELA4",16,0)
 ;            to determine the priority. If the application date
"RTN","DGENELA4",17,0)
 ;            is not passed then the enrollment date (ENRDATE) is used.
"RTN","DGENELA4",18,0)
 ;
"RTN","DGENELA4",19,0)
 ;Output:
"RTN","DGENELA4",20,0)
 ;  Function Value - returns the priority and subgroup computed by the
"RTN","DGENELA4",21,0)
 ;    function as a 2 piece string 'PRIORITY^SUBGROUP'
"RTN","DGENELA4",22,0)
 ;  DGELGSUB - this local array will contain the eligibility data on
"RTN","DGENELA4",23,0)
 ;    which the priority determination was based, pass by reference
"RTN","DGENELA4",24,0)
 ;    if needed.
"RTN","DGENELA4",25,0)
 ;
"RTN","DGENELA4",26,0)
 N CODE,HICODE,PRI,HIPRI,PRIORITY,SUBGRP,HISUB,SUB,DGPAT
"RTN","DGENELA4",27,0)
 K DGELGSUB S DGELGSUB=""
"RTN","DGENELA4",28,0)
 S (HICODE,HIPRI,SUBGRP,HISUB)=""
"RTN","DGENELA4",29,0)
 D
"RTN","DGENELA4",30,0)
 .I '$D(DGELG),'$$GET^DGENELA(DFN,.DGELG) Q  ;cannot proceed with eligibility
"RTN","DGENELA4",31,0)
 .; can't proceed without an Enrollment Date or Application Date
"RTN","DGENELA4",32,0)
 .I '$G(ENRDATE),'$G(APPDATE) Q
"RTN","DGENELA4",33,0)
 .I $$GET^DGENPTA(DFN,.DGPAT)
"RTN","DGENELA4",34,0)
 .; determine priority/subgroup based on primary eligibility
"RTN","DGENELA4",35,0)
 .S HICODE=$$NATCODE^DGENELA(DGELG("ELIG","CODE"))
"RTN","DGENELA4",36,0)
 .S PRIORITY=$$PRI(HICODE,.DGELG,$G(ENRDATE),$G(APPDATE))
"RTN","DGENELA4",37,0)
 .S HIPRI=$P(PRIORITY,"^"),HISUB=$P(PRIORITY,"^",2)
"RTN","DGENELA4",38,0)
 .S CODE=""
"RTN","DGENELA4",39,0)
 .;
"RTN","DGENELA4",40,0)
 .; determine if other eligibilities result in higher priority/subgroup
"RTN","DGENELA4",41,0)
 .F  S CODE=$O(DGELG("ELIG","CODE",CODE)) Q:('CODE!(HIPRI=1))  D
"RTN","DGENELA4",42,0)
 ..S PRIORITY=$$PRI($$NATCODE^DGENELA(CODE),.DGELG,$G(ENRDATE),$G(APPDATE))
"RTN","DGENELA4",43,0)
 ..S PRI=$P(PRIORITY,"^"),SUB=$P(PRIORITY,"^",2)
"RTN","DGENELA4",44,0)
 ..S:((PRI>0)&((PRI<HIPRI)!(HIPRI=""))) HIPRI=PRI,HICODE=$$NATCODE^DGENELA(CODE),HISUB=SUB
"RTN","DGENELA4",45,0)
 ..S:((PRI=HIPRI)&((SUB>0)&(SUB<HISUB))) HIPRI=PRI,HICODE=$$NATCODE^DGENELA(CODE),HISUB=SUB
"RTN","DGENELA4",46,0)
 .;
"RTN","DGENELA4",47,0)
 .;set the DGELGSUB() array with the eligibility information used in the
"RTN","DGENELA4",48,0)
 .;priority determination
"RTN","DGENELA4",49,0)
 .S DGELGSUB("CODE")=HICODE,DGELGSUB("SC")=DGELG("SC"),DGELGSUB("SCPER")=DGELG("SCPER"),DGELGSUB("POW")=DGELG("POW"),DGELGSUB("A&A")=DGELG("A&A"),DGELGSUB("HB")=DGELG("HB")
"RTN","DGENELA4",50,0)
 .S DGELGSUB("VAPEN")=DGELG("VAPEN"),DGELGSUB("VACKAMT")=DGELG("VACKAMT"),DGELGSUB("DISRET")=DGELG("DISRET"),DGELGSUB("DISLOD")=DGELG("DISLOD")
"RTN","DGENELA4",51,0)
 .S DGELGSUB("MEDICAID")=DGELG("MEDICAID"),DGELGSUB("AO")=DGELG("AO"),DGELGSUB("IR")=DGELG("IR"),DGELGSUB("EC")=DGELG("EC"),DGELGSUB("MTSTA")=DGELG("MTSTA")
"RTN","DGENELA4",52,0)
 .;Purple Heart Added to DGELGSUB
"RTN","DGENELA4",53,0)
 .S DGELGSUB("VCD")=DGELG("VCD"),DGELGSUB("PH")=DGELG("PH")
"RTN","DGENELA4",54,0)
 .;Added for HVE Phase III (DG*5.3*564)
"RTN","DGENELA4",55,0)
 .S DGELGSUB("UNEMPLOY")=DGELG("UNEMPLOY"),DGELGSUB("CVELEDT")=DGELG("CVELEDT"),DGELGSUB("SHAD")=DGELG("SHAD")
"RTN","DGENELA4",56,0)
 .;added dg*5.3*659
"RTN","DGENELA4",57,0)
 .S DGELGSUB("RADEXPM")=DGELG("RADEXPM")
"RTN","DGENELA4",58,0)
 .S DGELGSUB("AOEXPLOC")=DGELG("AOEXPLOC")
"RTN","DGENELA4",59,0)
 .S DGELGSUB("MOH")=DGELG("MOH")
"RTN","DGENELA4",60,0)
 .S DGELGSUB("MOHAWRDDATE")=DGELG("MOHAWRDDATE") ;added with DG*5.3*972 HM
"RTN","DGENELA4",61,0)
 .S DGELGSUB("MOHSTATDATE")=DGELG("MOHSTATDATE") ;added with DG*5.3*972 HM
"RTN","DGENELA4",62,0)
 .S DGELGSUB("MOHEXEMPDATE")=DGELG("MOHEXEMPDATE") ;added with DG*5.3*972 HM
"RTN","DGENELA4",63,0)
 .S DGELGSUB("CLE")=DGELG("CLE")         ;added with DG*5.3*909
"RTN","DGENELA4",64,0)
 .S DGELGSUB("CLEDT")=DGELG("CLEDT")     ;added with DG*5.3*909
"RTN","DGENELA4",65,0)
 .S DGELGSUB("CLEST")=DGELG("CLEST")     ;added with DG*5.3*909
"RTN","DGENELA4",66,0)
 .S DGELGSUB("CLESOR")=DGELG("CLESOR")   ;added with DG*5.3*909
"RTN","DGENELA4",67,0)
 .I $G(DGPAT("INELDATE"))'="" S (HIPRI,HISUB)=""
"RTN","DGENELA4",68,0)
 ;
"RTN","DGENELA4",69,0)
 Q HIPRI_$S(HIPRI:"^"_HISUB,1:"")
"RTN","DGENELA4",70,0)
 ;
"RTN","DGENELA4",71,0)
 ;
"RTN","DGENELA4",72,0)
PRI(CODE,DGELG,ENRDATE,APPDATE) ;
"RTN","DGENELA4",73,0)
 ; Description: Returns the priority group and subgroup based on a
"RTN","DGENELA4",74,0)
 ; single eligibility code.
"RTN","DGENELA4",75,0)
 ;Input -
"RTN","DGENELA4",76,0)
 ;  CODE - pointer to file #8.1, MAS Eligibility Code
"RTN","DGENELA4",77,0)
 ;  DGELG - local array obtained by calling $$GET, pass by reference
"RTN","DGENELA4",78,0)
 ;  ENRDATE - The Enrollment Date. This date is used in the priority
"RTN","DGENELA4",79,0)
 ;            determination only if the application date is not passed.
"RTN","DGENELA4",80,0)
 ;  APPDATE - The Enrollment Application Date.  This date is used
"RTN","DGENELA4",81,0)
 ;            to determine the priority. If the application date
"RTN","DGENELA4",82,0)
 ;            is not passed then the enrollment date (ENRDATE) is used.
"RTN","DGENELA4",83,0)
 ;
"RTN","DGENELA4",84,0)
 ;Output -
"RTN","DGENELA4",85,0)
 ;  Function Value - returns the priority and subgroup computed by the
"RTN","DGENELA4",86,0)
 ;   function as a 2 piece string 'PRIORITY^SUBGROUP'
"RTN","DGENELA4",87,0)
 ;
"RTN","DGENELA4",88,0)
 N CODENAME,PRIORITY,MTSTA,SUBGRP,DGEGT,PRISUB,DGMTI,MTTHR,GMTTHR,STAEXP
"RTN","DGENELA4",89,0)
 N NODE2,DGNCM,DGNETW,DGMEDEX,DGEDEX,DGASSTS,DGMTYR,MTTEST1,MTTEST2
"RTN","DGENELA4",90,0)
 S SUBGRP=""
"RTN","DGENELA4",91,0)
 ;
"RTN","DGENELA4",92,0)
 ; use the Application Date when determining the priority, otherwise use
"RTN","DGENELA4",93,0)
 ; the Enrollment Date (ESP DG*5,3*491)
"RTN","DGENELA4",94,0)
 S ENRDATE=$S($G(APPDATE):APPDATE,1:$G(ENRDATE))
"RTN","DGENELA4",95,0)
 ;
"RTN","DGENELA4",96,0)
 ;get the name of the national eligibility code
"RTN","DGENELA4",97,0)
 S CODENAME=$$CODENAME^DGENELA(CODE)
"RTN","DGENELA4",98,0)
 ;
"RTN","DGENELA4",99,0)
 ;get the means test code
"RTN","DGENELA4",100,0)
 S MTSTA=""
"RTN","DGENELA4",101,0)
 I DGELG("MTSTA") S MTSTA=$P($G(^DG(408.32,DGELG("MTSTA"),0)),"^",2)
"RTN","DGENELA4",102,0)
 ;
"RTN","DGENELA4",103,0)
 ;get MT and GMT thresholds
"RTN","DGENELA4",104,0)
 S DGMTI=$P($$LST^DGMTU(DFN),"^")
"RTN","DGENELA4",105,0)
 S MTTHR=$$GET1^DIQ(408.31,+DGMTI,.12,"I")
"RTN","DGENELA4",106,0)
 S GMTTHR=$$GET1^DIQ(408.31,+DGMTI,.27,"I")
"RTN","DGENELA4",107,0)
 S DGNCM=$$GET1^DIQ(408.31,+DGMTI,.04,"I")
"RTN","DGENELA4",108,0)
 S DGNETW=$$GET1^DIQ(408.31,+DGMTI,.05,"I")
"RTN","DGENELA4",109,0)
 D ALL^DGMTU21(DFN,"V",DT,"I",+DGMTI)
"RTN","DGENELA4",110,0)
 S DGAICM=0
"RTN","DGENELA4",111,0)
 S:$G(DGINC("V")) DGAICM=+DGINC("V")
"RTN","DGENELA4",112,0)
 S (DGMEDEX,DGEDEX,DGASSTS)=0
"RTN","DGENELA4",113,0)
 S DGMTYR=$$GET1^DIQ(408.21,+DGAICM,.01,"E")
"RTN","DGENELA4",114,0)
 I $D(^DGMT(408.21,DGAICM,2))  D
"RTN","DGENELA4",115,0)
 .S NODE2=^DGMT(408.21,DGAICM,2)
"RTN","DGENELA4",116,0)
 .S DGASSTS=DGASSTS+$P(NODE2,U,1)+$P(NODE2,U,2)+$P(NODE2,U,3)+$P(NODE2,U,4)-$P(NODE2,U,5)
"RTN","DGENELA4",117,0)
 .S DGASSTS=DGASSTS+$P(NODE2,U,6)+$P(NODE2,U,7)+$P(NODE2,U,8)+$P(NODE2,U,9)
"RTN","DGENELA4",118,0)
 S:$D(^DGMT(408.21,DGAICM,1)) DGMEDEX=$P(^DGMT(408.21,DGAICM,1),"^",12)
"RTN","DGENELA4",119,0)
 S:$D(^DGMT(408.21,DGAICM,1)) DGEDEX=$P(^DGMT(408.21,DGAICM,1),"^",3)
"RTN","DGENELA4",120,0)
 ;
"RTN","DGENELA4",121,0)
 ; get expiration dates for Special Treatment Authority
"RTN","DGENELA4",122,0)
 S STAEXP("AO")=$$STAEXP^DGENELA4("AO")
"RTN","DGENELA4",123,0)
 S STAEXP("EC")=$$STAEXP^DGENELA4("EC")
"RTN","DGENELA4",124,0)
 ;
"RTN","DGENELA4",125,0)
 ;get the Enrollment Group Threshold (EGT) setting
"RTN","DGENELA4",126,0)
 S DGEGT=""
"RTN","DGENELA4",127,0)
 I $$GET^DGENEGT($$FINDCUR^DGENEGT(),.DGEGT)
"RTN","DGENELA4",128,0)
 I '$G(DGELG("RADEXPM")) S DGELG("RADEXPM")=""
"RTN","DGENELA4",129,0)
 I '$G(DGELG("SHAD")) S DGELG("SHAD")=""
"RTN","DGENELA4",130,0)
 ;
"RTN","DGENELA4",131,0)
 D  ;drops out when priority determined
"RTN","DGENELA4",132,0)
 .S PRIORITY=""
"RTN","DGENELA4",133,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")>49))!(CODENAME="SERVICE CONNECTED 50% to 100%") S PRIORITY=1 Q
"RTN","DGENELA4",134,0)
 .I (DGELG("SC")="Y")&(DGELG("SCPER")>0)&(DGELG("UNEMPLOY")="Y")&(DGELG("VACKAMT")>0)&(DGELG("VAPEN")'="Y")&(DGELG("A&A")'="Y")&(DGELG("HB")'="Y") S PRIORITY=1 Q
"RTN","DGENELA4",135,0)
 .I (DGELG("MOH")="Y")&(DGPAT("VETERAN")="Y") S PRIORITY=1 Q   ;Added for DG*5.3*841 added I DGELG("MOH")="Y" S PRIORITY=1 DG*5.3*972 HM
"RTN","DGENELA4",136,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")>29)&(CODENAME="SC LESS THAN 50%")) S PRIORITY=2 Q
"RTN","DGENELA4",137,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")>9)&(CODENAME="SC LESS THAN 50%"))!(DGELG("POW")="Y")!(CODENAME="PRISONER OF WAR")!(DGELG("DISRET")=1)!(DGELG("DISLOD")=1)!(CODENAME="PURPLE HEART RECIPIENT")!(DGELG("PH")="Y") S PRIORITY=3 Q
"RTN","DGENELA4",138,0)
 .I (DGELG("A&A")="Y")!(CODENAME="AID & ATTENDANCE")!(DGELG("HB")="Y")!(CODENAME="HOUSEBOUND")!(DGELG("VCD")="Y") S PRIORITY=4 Q
"RTN","DGENELA4",139,0)
 .I (MTSTA="A")!(DGELG("MEDICAID")=1)!(DGELG("VAPEN")="Y")!(CODENAME="NSC, VA PENSION") S PRIORITY=5 Q
"RTN","DGENELA4",140,0)
 .I (CODENAME="WORLD WAR I")!(CODENAME="MEXICAN BORDER WAR")!(DGELG("VACKAMT")>0)!((DGELG("CVELEDT"))&(DGELG("CVELEDT")'<DT))!(DGELG("SHAD")=1) S PRIORITY=6 Q
"RTN","DGENELA4",141,0)
 .I DGELG("EC")="Y" I (STAEXP("EC")<1)!($$DT^XLFDT<STAEXP("EC")) S PRIORITY=6 Q
"RTN","DGENELA4",142,0)
 .I DGELG("IR")="Y" I (DGELG("RADEXPM")=2)!(DGELG("RADEXPM")=3)!(DGELG("RADEXPM")=4) S PRIORITY=6 Q
"RTN","DGENELA4",143,0)
 .I (DGELG("AO")="Y"),(DGELG("AOEXPLOC"))="V" I (STAEXP("AO")<1)!($$DT^XLFDT<STAEXP("AO")) S PRIORITY=6 Q
"RTN","DGENELA4",144,0)
 .I DGELG("CLE")="Y" S PRIORITY=6 Q  ; Added for DG*5.3*909 Camp Lejeune
"RTN","DGENELA4",145,0)
 .I (MTSTA="G")!((MTSTA="P")&(GMTTHR>MTTHR)) S PRIORITY=7 D  Q
"RTN","DGENELA4",146,0)
 ..I ((DGELG("SC")="Y")&(DGELG("SCPER")=0)&(DGELG("VACKAMT")<1)&(CODENAME="SC LESS THAN 50%")) S SUBGRP=$$SUBPRI(DFN,.PRIORITY,1) Q
"RTN","DGENELA4",147,0)
 ..S SUBGRP=$$SUBPRI(DFN,.PRIORITY,3)
"RTN","DGENELA4",148,0)
 .S MTTEST1=MTTHR
"RTN","DGENELA4",149,0)
 .I GMTTHR>MTTHR S MTTEST1=GMTTHR
"RTN","DGENELA4",150,0)
 .S MTTEST2=MTTEST1+(MTTEST1*0.10)+0.01 ; Add 10% to the test threshold
"RTN","DGENELA4",151,0)
 .I $$SC^DGMTR(DFN),DGMTYR>2007,DGNCM>MTTEST1,MTTEST2>DGNCM,ENRDATE>3090614 S PRIORITY=8,SUBGRP=$$SUBPRI(DFN,.PRIORITY,2) Q
"RTN","DGENELA4",152,0)
 .I $$SC^DGMTR(DFN),DGMTYR>2007,(DGNCM-DGMEDEX-DGEDEX)<MTTHR,DGNCM+DGNETW>79999.99 S PRIORITY=8,SUBGRP=$$SUBPRI(DFN,.PRIORITY,2) Q
"RTN","DGENELA4",153,0)
 .I DGELG("SC")="N",DGMTYR>2007,DGNCM>MTTEST1,MTTEST2>DGNCM,ENRDATE>3090614 S PRIORITY=8,SUBGRP=$$SUBPRI(DFN,.PRIORITY,4) Q
"RTN","DGENELA4",154,0)
 .I DGELG("SC")="N",DGMTYR>2007,(DGNCM-DGMEDEX-DGEDEX)<MTTHR,DGNCM+DGNETW>79999.99 S PRIORITY=8,SUBGRP=$$SUBPRI(DFN,.PRIORITY,4) Q
"RTN","DGENELA4",155,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")=0)&(DGELG("VACKAMT")<1)&(CODENAME="SC LESS THAN 50%")) S PRIORITY=8,SUBGRP=$$SUBPRI(DFN,.PRIORITY,1) Q
"RTN","DGENELA4",156,0)
 .I ((MTSTA="C")!(MTSTA="P")) S PRIORITY=8,SUBGRP=$$SUBPRI(DFN,PRIORITY,3) Q
"RTN","DGENELA4",157,0)
 ;
"RTN","DGENELA4",158,0)
 Q PRIORITY_$S(PRIORITY:"^"_SUBGRP,1:"")
"RTN","DGENELA4",159,0)
 ;
"RTN","DGENELA4",160,0)
SUBPRI(DFN,PRIORITY,SUBGRP) ;calculate sub-priority if under EGT
"RTN","DGENELA4",161,0)
 ;
"RTN","DGENELA4",162,0)
 N PRVPRI,DONE,PRVENST,ENRDT,DGENRIEN,EGT,DGENRC,TODAY,X
"RTN","DGENELA4",163,0)
 Q:'$G(DFN)
"RTN","DGENELA4",164,0)
 S U="^"
"RTN","DGENELA4",165,0)
 S:$G(PRIORITY)="" PRIORITY=""
"RTN","DGENELA4",166,0)
 S:$G(SUBGRP)="" SUBGRP=""
"RTN","DGENELA4",167,0)
 D NOW^%DTC S TODAY=X
"RTN","DGENELA4",168,0)
 Q:'$$GET^DGENEGT($$FINDCUR^DGENEGT(),.EGT) SUBGRP  ;EGT isn't set
"RTN","DGENELA4",169,0)
 Q:TODAY<EGT("EFFDATE") SUBGRP  ;EGT is not in effect
"RTN","DGENELA4",170,0)
 I "^1^3^"[(U_EGT("TYPE")_U) Q SUBGRP
"RTN","DGENELA4",171,0)
 I EGT("TYPE")=2,(PRIORITY+(SUBGRP*.01))<(EGT("PRIORITY")+(EGT("SUBGRP")*.01)) Q SUBGRP
"RTN","DGENELA4",172,0)
 I EGT("TYPE")=4 Q:(PRIORITY<EGT("PRIORITY")) SUBGRP  Q:(PRIORITY>EGT("PRIORITY")) $$SUBCNV(SUBGRP)
"RTN","DGENELA4",173,0)
 ;I $G(ENRDATE) Q:$$ABOVE2^DGENEGT1(ENRDATE,PRIORITY,SUBGRP) SUBGRP
"RTN","DGENELA4",174,0)
 S DGENRIEN=$$FINDCUR^DGENA(DFN)
"RTN","DGENELA4",175,0)
 I 'DGENRIEN,$G(ENRDATE),ENRDATE<EGT("EFFDATE") Q SUBGRP
"RTN","DGENELA4",176,0)
 S DONE=0
"RTN","DGENELA4",177,0)
 F  Q:DONE  D
"RTN","DGENELA4",178,0)
 .I 'DGENRIEN S DONE=2 Q
"RTN","DGENELA4",179,0)
 .I '$$GET^DGENA(DGENRIEN,.DGENRC) S DONE=2 Q
"RTN","DGENELA4",180,0)
 .S DGENRIEN=$$FINDPRI^DGENA(DGENRIEN)
"RTN","DGENELA4",181,0)
 .Q:DGENRC("STATUS")=6   ;deceased
"RTN","DGENELA4",182,0)
 .I $P($G(^DGEN(27.15,+DGENRC("STATUS"),0)),"^",2)="N" S DONE=2 Q
"RTN","DGENELA4",183,0)
 .S ENRDT=$G(DGENRC("APP")) S:'ENRDT ENRDT=$G(DGENRC("EFFDATE"))
"RTN","DGENELA4",184,0)
 .I ENRDT,ENRDT<EGT("EFFDATE") S DONE=1 Q
"RTN","DGENELA4",185,0)
 .; HEC is the authoritative source on continuous enrollment
"RTN","DGENELA4",186,0)
 .I $$OVRRIDE^DGENEGT1(DFN,.EGT) S DONE=1
"RTN","DGENELA4",187,0)
 ;
"RTN","DGENELA4",188,0)
 Q $S(DONE=2:$$SUBCNV(SUBGRP),1:SUBGRP)
"RTN","DGENELA4",189,0)
 ;
"RTN","DGENELA4",190,0)
SUBCNV(SUBGRP) ;return new subgrp
"RTN","DGENELA4",191,0)
 I SUBGRP=1 Q 5
"RTN","DGENELA4",192,0)
 I SUBGRP=3 Q 7
"RTN","DGENELA4",193,0)
 Q SUBGRP
"RTN","DGENELA4",194,0)
 ;
"RTN","DGENELA4",195,0)
STAEXP(STATYP) ;return expiration date for Special Treatment Authority (STA)
"RTN","DGENELA4",196,0)
 ;Input -
"RTN","DGENELA4",197,0)
 ;  STATYP - STA Type (Only AO & EC (SWAC) currently supported)
"RTN","DGENELA4",198,0)
 ;
"RTN","DGENELA4",199,0)
 ;Output -
"RTN","DGENELA4",200,0)
 ;  Function Value - returns the requested expiration date from the
"RTN","DGENELA4",201,0)
 ;                   MAS PARAMETERS file (#43), otherwise returns 0
"RTN","DGENELA4",202,0)
 ;
"RTN","DGENELA4",203,0)
 I STATYP="AO" Q +$P($G(^DG(43,1,"ENR")),U,1)  ;AO Exp Dt
"RTN","DGENELA4",204,0)
 I STATYP="EC" Q +$P($G(^DG(43,1,"ENR")),U,2)  ;EC (SWAC) Exp Dt
"RTN","DGENELA4",205,0)
 Q 0
"RTN","DGENL1")
0^31^B89499051
"RTN","DGENL1",1,0)
DGENL1 ;ALB/RMO,ISA/KWP,Zoltan,ALB/BRM,LBD,ERC,EG,CKN,BAJ,JLS,HM - Patient Enrollment - Build List Area ;5/12/11 3:53pm
"RTN","DGENL1",2,0)
 ;;5.3;Registration;**121,147,232,266,343,564,672,659,653,688,838,841,909,940,972**;Aug 13,1993;Build 80
"RTN","DGENL1",3,0)
 ;
"RTN","DGENL1",4,0)
EN(DGARY,DFN,DGENRIEN,DGCNT) ;Entry point to build list area
"RTN","DGENL1",5,0)
 ; for patient enrollment and patient enrollment history
"RTN","DGENL1",6,0)
 ; Input  -- DGARY    Global array subscript
"RTN","DGENL1",7,0)
 ;           DFN      Patient IEN
"RTN","DGENL1",8,0)
 ;           DGENRIEN Enrollment IEN
"RTN","DGENL1",9,0)
 ; Output -- DGCNT    Number of lines in the list
"RTN","DGENL1",10,0)
 N DGENCAT,DGENR,DGLINE
"RTN","DGENL1",11,0)
 I DGENRIEN,$$GET^DGENA(DGENRIEN,.DGENR) ;set-up enrollment array
"RTN","DGENL1",12,0)
 S DGENCAT=$$CATEGORY^DGENA4(,$G(DGENR("STATUS")))  ;enrollment category
"RTN","DGENL1",13,0)
 S DGENCAT=$$EXTERNAL^DILFD(27.15,.02,"",DGENCAT)
"RTN","DGENL1",14,0)
 S DGLINE=1,DGCNT=0
"RTN","DGENL1",15,0)
 D ENR(DGARY,DFN,.DGENR,.DGLINE,.DGCNT) ;enrollment
"RTN","DGENL1",16,0)
 D PF(DGARY,DFN,.DGENR,.DGLINE,.DGCNT) ;priority factors
"RTN","DGENL1",17,0)
 D HIS^DGENL2(DGARY,DFN,DGENRIEN,.DGLINE,.DGCNT) ;history
"RTN","DGENL1",18,0)
 Q
"RTN","DGENL1",19,0)
 ;
"RTN","DGENL1",20,0)
ENR(DGARY,DFN,DGENR,DGLINE,DGCNT) ;Enrollment 
"RTN","DGENL1",21,0)
 ; Input  -- DGARY    Global array subscript
"RTN","DGENL1",22,0)
 ;           DFN      Patient IEN
"RTN","DGENL1",23,0)
 ;           DGENR    Enrollment array
"RTN","DGENL1",24,0)
 ;           DGLINE   Line number
"RTN","DGENL1",25,0)
 ; Output -- DGCNT    Number of lines in the list
"RTN","DGENL1",26,0)
 N DGSTART
"RTN","DGENL1",27,0)
 ;
"RTN","DGENL1",28,0)
 S DGSTART=DGLINE ; starting line number
"RTN","DGENL1",29,0)
 D SET(DGARY,DGLINE,"Enrollment",31,IORVON,IORVOFF,,,,.DGCNT)
"RTN","DGENL1",30,0)
 ;
"RTN","DGENL1",31,0)
 ;Enrollment Date
"RTN","DGENL1",32,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",33,0)
 D SET(DGARY,DGLINE,"Enrollment Date: "_$S($G(DGENR("DATE")):$$EXT^DGENU("DATE",DGENR("DATE")),1:""),11,,,,,,.DGCNT)
"RTN","DGENL1",34,0)
 ;
"RTN","DGENL1",35,0)
 ;
"RTN","DGENL1",36,0)
 ;Enrollment End Date
"RTN","DGENL1",37,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",38,0)
 D SET(DGARY,DGLINE,"Enrollment End Date: "_$S($G(DGENR("END")):$$EXT^DGENU("END",DGENR("END")),1:""),7,,,,,,.DGCNT)
"RTN","DGENL1",39,0)
 ;
"RTN","DGENL1",40,0)
 ;Enrollment Application Date
"RTN","DGENL1",41,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",42,0)
 D SET(DGARY,DGLINE,"Application Date: "_$S($G(DGENR("APP")):$$EXT^DGENU("APP",DGENR("APP")),1:""),10,,,,,,.DGCNT)
"RTN","DGENL1",43,0)
 ;
"RTN","DGENL1",44,0)
 ;Source
"RTN","DGENL1",45,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",46,0)
 D SET(DGARY,DGLINE,"Source of Enrollment: "_$S($G(DGENR("SOURCE")):$$EXT^DGENU("SOURCE",DGENR("SOURCE")),1:""),6,,,,,,.DGCNT)
"RTN","DGENL1",47,0)
 ;
"RTN","DGENL1",48,0)
 ;Category
"RTN","DGENL1",49,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",50,0)
 D SET(DGARY,DGLINE,"Enrollment Category: "_DGENCAT,7,IORVON,IORVOFF,,,,.DGCNT)
"RTN","DGENL1",51,0)
 ;
"RTN","DGENL1",52,0)
 ;Status
"RTN","DGENL1",53,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",54,0)
 D SET(DGARY,DGLINE,"Enrollment Status: "_$S($G(DGENR("STATUS")):$$EXT^DGENU("STATUS",DGENR("STATUS")),1:""),9,,,,,,.DGCNT)
"RTN","DGENL1",55,0)
 ;
"RTN","DGENL1",56,0)
 ;Reason for Closed Application
"RTN","DGENL1",57,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",58,0)
 D SET(DGARY,DGLINE,"Reason for Closed Application: "_$S($G(DGENR("RCODE")):$$EXT^DGENU("RCODE",DGENR("RCODE")),1:""),,,,,,,.DGCNT)  ;DJE DG*5.3*940 - Closed Application - display reason - - RM#867190
"RTN","DGENL1",59,0)
 ;
"RTN","DGENL1",60,0)
 ;Priority
"RTN","DGENL1",61,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",62,0)
 D SET(DGARY,DGLINE,"Enrollment Priority: "_$S($G(DGENR("PRIORITY")):DGENR("PRIORITY"),1:"")_$S($G(DGENR("SUBGRP")):$$EXT^DGENU("SUBGRP",DGENR("SUBGRP")),1:""),7,,,,,,.DGCNT)
"RTN","DGENL1",63,0)
 ;
"RTN","DGENL1",64,0)
 ;
"RTN","DGENL1",65,0)
 ;Effective date
"RTN","DGENL1",66,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",67,0)
 D SET(DGARY,DGLINE,"Effective Date: "_$S($G(DGENR("EFFDATE")):$$EXT^DGENU("EFFDATE",DGENR("EFFDATE")),1:""),12,,,,,,.DGCNT)
"RTN","DGENL1",68,0)
 ;
"RTN","DGENL1",69,0)
 ;Reason canceled/declined
"RTN","DGENL1",70,0)
 ; Removed blank line to fix format after screen header was increased
"RTN","DGENL1",71,0)
 ; to 3 lines (DG*5.3*838).
"RTN","DGENL1",72,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",73,0)
 D SET(DGARY,DGLINE,"Reason Canceled/Declined: "_$S($G(DGENR("REASON")):$$EXT^DGENU("REASON",DGENR("REASON")),1:""),2,,,,,,.DGCNT)
"RTN","DGENL1",74,0)
 ;
"RTN","DGENL1",75,0)
 ;Canceled/declined remarks
"RTN","DGENL1",76,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",77,0)
 D SET(DGARY,DGLINE,"Canceled/Declined Remarks: "_$S($G(DGENR("REASON"))'="":$$EXT^DGENU("REMARKS",DGENR("REMARKS")),1:""),1,,,,,,.DGCNT)
"RTN","DGENL1",78,0)
 ;
"RTN","DGENL1",79,0)
 ;Entered by
"RTN","DGENL1",80,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",81,0)
 D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",82,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",83,0)
 D SET(DGARY,DGLINE,"Entered By: "_$S($G(DGENR("USER")):$$EXT^DGENU("USER",DGENR("USER")),1:""),16,,,,,,.DGCNT)
"RTN","DGENL1",84,0)
 ;
"RTN","DGENL1",85,0)
 ;Date/time entered
"RTN","DGENL1",86,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",87,0)
 D SET(DGARY,DGLINE,"Date/Time Entered: "_$S($G(DGENR("DATETIME")):$$EXT^DGENU("DATETIME",DGENR("DATETIME")),1:""),9,,,,,,.DGCNT)
"RTN","DGENL1",88,0)
 ;
"RTN","DGENL1",89,0)
 ;Set line to start on next page
"RTN","DGENL1",90,0)
 F DGLINE=DGLINE+1:1:DGSTART+VALM("LINES") D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",91,0)
 Q
"RTN","DGENL1",92,0)
 ;
"RTN","DGENL1",93,0)
PF(DGARY,DFN,DGENR,DGLINE,DGCNT) ;Priority factors 
"RTN","DGENL1",94,0)
 ; Input  -- DGARY    Global array subscript
"RTN","DGENL1",95,0)
 ;           DFN      Patient IEN
"RTN","DGENL1",96,0)
 ;           DGENR    Enrollment array
"RTN","DGENL1",97,0)
 ;           DGLINE   Line number
"RTN","DGENL1",98,0)
 ; Output -- DGCNT    Number of lines in the list
"RTN","DGENL1",99,0)
 N DGSTART
"RTN","DGENL1",100,0)
 ;
"RTN","DGENL1",101,0)
 S DGSTART=DGLINE ; starting line number
"RTN","DGENL1",102,0)
 D SET(DGARY,DGLINE,"Priority Factors",31,IORVON,IORVOFF,,,,.DGCNT)
"RTN","DGENL1",103,0)
 ;
"RTN","DGENL1",104,0)
 ;POW
"RTN","DGENL1",105,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",106,0)
 D SET(DGARY,DGLINE,"POW: "_$S($G(DGENR("ELIG","POW"))'="":$$EXT^DGENU("POW",DGENR("ELIG","POW")),1:""),19,,,,,,.DGCNT)
"RTN","DGENL1",107,0)
 ;
"RTN","DGENL1",108,0)
 ;Medal of Honor (DG*5.3*841) ;REMOVED DG*5.3*972 HM
"RTN","DGENL1",109,0)
 ;I $G(DGENR("ELIG","MOH"))="Y" D
"RTN","DGENL1",110,0)
 ;.D SET(DGARY,DGLINE,"Medal of Honor: YES",48,,,,,,.DGCNT)
"RTN","DGENL1",111,0)
 ;
"RTN","DGENL1",112,0)
 ;Purple Heart - added for patch 343;brm;10/23/00
"RTN","DGENL1",113,0)
 N PHDAT
"RTN","DGENL1",114,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",115,0)
 S PHDAT=$$PHEART(DFN,$G(DGENRIEN),$G(DGENR("DATETIME")))
"RTN","DGENL1",116,0)
 D SET(DGARY,DGLINE,"Purple Hrt: "_$P(PHDAT,U),12,,,,,,.DGCNT)
"RTN","DGENL1",117,0)
 D:$P(PHDAT,U)="YES" SET(DGARY,DGLINE,"Status: "_$P(PHDAT,U,2),32,,,,,,.DGCNT)
"RTN","DGENL1",118,0)
 D:$P(PHDAT,U)="NO" SET(DGARY,DGLINE,"Remarks: "_$P(PHDAT,U,3),31,,,,,,.DGCNT)
"RTN","DGENL1",119,0)
 ;
"RTN","DGENL1",120,0)
 ;Agent orange
"RTN","DGENL1",121,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",122,0)
 D SET(DGARY,DGLINE,"A/O Exp.: "_$S($G(DGENR("ELIG","AO"))'="":$$EXT^DGENU("AO",DGENR("ELIG","AO")),1:""),14,,,,,,.DGCNT)
"RTN","DGENL1",123,0)
 D SET(DGARY,DGLINE,"A/O Exp Loc: "_$S($G(DGENR("ELIG","AOEXPLOC"))'="":$$EXT^DGENU("AOEXPLOC",DGENR("ELIG","AOEXPLOC")),1:""),51,,,,,,.DGCNT)
"RTN","DGENL1",124,0)
 ;
"RTN","DGENL1",125,0)
 ;Ionizing radiation
"RTN","DGENL1",126,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",127,0)
 D SET(DGARY,DGLINE,"ION Rad.: "_$S($G(DGENR("ELIG","IR"))'="":$$EXT^DGENU("IR",DGENR("ELIG","IR")),1:""),14,,,,,,.DGCNT)
"RTN","DGENL1",128,0)
 ;
"RTN","DGENL1",129,0)
 ;Radiation Exposure Method
"RTN","DGENL1",130,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",131,0)
 D SET(DGARY,DGLINE,"Rad Exp Method: "_$S($G(DGENR("ELIG","RADEXPM"))'="":$$EXT^DGENU("RADEXPM",DGENR("ELIG","RADEXPM")),1:""),8,,,,,,.DGCNT)
"RTN","DGENL1",132,0)
 ;
"RTN","DGENL1",133,0)
 ;SW Asia Conditions - name change from Env con DG*5.3*688
"RTN","DGENL1",134,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",135,0)
 D SET(DGARY,DGLINE,"SW Asia Cond: "_$S($G(DGENR("ELIG","EC"))'="":$$EXT^DGENU("EC",DGENR("ELIG","EC")),1:""),10,,,,,,.DGCNT)
"RTN","DGENL1",136,0)
 ;
"RTN","DGENL1",137,0)
 ;Camp Lejeune Eligibility Indicator - new fields added with DG*5.3*909
"RTN","DGENL1",138,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",139,0)
 D SET(DGARY,DGLINE,"Camp Lejeune: "_$S($G(DGENR("ELIG","CLE"))'="":$$EXT^DGENU("CLE",DGENR("ELIG","CLE")),1:""),10,,,,,,.DGCNT)
"RTN","DGENL1",140,0)
 ;
"RTN","DGENL1",141,0)
 ;Military retirement - new fields added with DG*5.3*672
"RTN","DGENL1",142,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",143,0)
 S DGRET=$G(DGENR("ELIG","DISRET"))
"RTN","DGENL1",144,0)
 D SET(DGARY,DGLINE,"Mil Disab Retirement: "_$S($G(DGRET)=0:"NO",$G(DGRET)=1:"YES",$G(DGRET)=2:"YES",$G(DGRET)=3:"UNK",1:""),2,,,,,,.DGCNT)
"RTN","DGENL1",145,0)
 D SET(DGARY,DGLINE,"Dischrg Due to Disab: "_$S($G(DGENR("ELIG","DISLOD"))'="":$$EXT^DGENU("DISLOD",DGENR("ELIG","DISLOD")),1:""),42,,,,,,.DGCNT)
"RTN","DGENL1",146,0)
 ;
"RTN","DGENL1",147,0)
 ;Combat Vet End Date (added for DG*5.3*564 - HVE Phase III)
"RTN","DGENL1",148,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",149,0)
 D SET(DGARY,DGLINE,"Combat Vet End Date: "_$S($G(DGENR("ELIG","CVELEDT"))'="":$$EXT^DGENU("CVELEDT",DGENR("ELIG","CVELEDT")),1:""),3,,,,,,.DGCNT)
"RTN","DGENL1",150,0)
 ;
"RTN","DGENL1",151,0)
 ;Eligible for medicaid
"RTN","DGENL1",152,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",153,0)
 D SET(DGARY,DGLINE,"Eligible for MEDICAID: "_$S($G(DGENR("ELIG","MEDICAID"))'="":$$EXT^DGENU("MEDICAID",DGENR("ELIG","MEDICAID")),1:""),1,,,,,,.DGCNT)
"RTN","DGENL1",154,0)
 ;
"RTN","DGENL1",155,0)
 ;Service connected and percentage
"RTN","DGENL1",156,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",157,0)
 D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",158,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",159,0)
 D SET(DGARY,DGLINE,"Svc Connected: "_$S($G(DGENR("ELIG","SC"))'="":$$EXT^DGENU("SC",DGENR("ELIG","SC")),1:""),9,,,,,,.DGCNT)
"RTN","DGENL1",160,0)
 D SET(DGARY,DGLINE,"SC Percent: "_$S($G(DGENR("ELIG","SCPER"))'="":$$EXT^DGENU("SCPER",DGENR("ELIG","SCPER"))_"%",1:""),52,,,,,,.DGCNT)
"RTN","DGENL1",161,0)
 ;
"RTN","DGENL1",162,0)
 ;Aid & attendance and housebound
"RTN","DGENL1",163,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",164,0)
 D SET(DGARY,DGLINE,"Aid & Attendance: "_$S($G(DGENR("ELIG","A&A"))'="":$$EXT^DGENU("A&A",DGENR("ELIG","A&A")),1:""),6,,,,,,.DGCNT)
"RTN","DGENL1",165,0)
 D SET(DGARY,DGLINE,"Housebound: "_$S($G(DGENR("ELIG","HB"))'="":$$EXT^DGENU("HB",DGENR("ELIG","HB")),1:""),52,,,,,,.DGCNT)
"RTN","DGENL1",166,0)
 ;
"RTN","DGENL1",167,0)
 ;VA Pension
"RTN","DGENL1",168,0)
 ;Unemployable (added for DG*5.3*564 - HVE Phase III)
"RTN","DGENL1",169,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",170,0)
 D SET(DGARY,DGLINE,"VA Pension: "_$S($G(DGENR("ELIG","VAPEN"))'="":$$EXT^DGENU("VAPEN",DGENR("ELIG","VAPEN")),1:""),12,,,,,,.DGCNT)
"RTN","DGENL1",171,0)
 D SET(DGARY,DGLINE,"Unemployable: "_$S($G(DGENR("ELIG","UNEMPLOY"))'="":$$EXT^DGENU("UNEMPLOY",DGENR("ELIG","UNEMPLOY")),1:""),50,,,,,,.DGCNT)
"RTN","DGENL1",172,0)
 ;
"RTN","DGENL1",173,0)
 ;Total check amount
"RTN","DGENL1",174,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",175,0)
 D SET(DGARY,DGLINE,"Total Check Amount: "_$S($G(DGENR("ELIG","VACKAMT"))'="":$$EXT^DGENU("VACKAMT",DGENR("ELIG","VACKAMT")),1:""),4,,,,,,.DGCNT)
"RTN","DGENL1",176,0)
 ;
"RTN","DGENL1",177,0)
 ;PROJ 112/SHAD - DG*5.3*653
"RTN","DGENL1",178,0)
 I $G(DGENR("ELIG","SHAD"))=1 D
"RTN","DGENL1",179,0)
 .D SET(DGARY,DGLINE,"Proj 112/SHAD: "_$$EXT^DGENU("SHAD",DGENR("ELIG","SHAD")),49,,,,,,.DGCNT)
"RTN","DGENL1",180,0)
 ;
"RTN","DGENL1",181,0)
 ;Eligibility code
"RTN","DGENL1",182,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",183,0)
 D SET(DGARY,DGLINE,"Eligibility Code: "_$S($G(DGENR("ELIG","CODE"))'="":$$EXT^DGENU("CODE",DGENR("ELIG","CODE")),1:""),6,,,,,,.DGCNT)
"RTN","DGENL1",184,0)
 ;
"RTN","DGENL1",185,0)
 ;Means test
"RTN","DGENL1",186,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",187,0)
 D SET(DGARY,DGLINE,"Means Test Status: "_$S($G(DGENR("ELIG","MTSTA"))'="":$$EXT^DGENU("MTSTA",DGENR("ELIG","MTSTA")),1:""),5,,,,,,.DGCNT)
"RTN","DGENL1",188,0)
 ;
"RTN","DGENL1",189,0)
 ;Veteran Catastrophically Disabled
"RTN","DGENL1",190,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",191,0)
 D SET(DGARY,DGLINE,"Veteran CD Status: "_$S($G(DGENR("ELIG","VCD"))'="":$$EXT^DGENU("VCD",DGENR("ELIG","VCD")),1:""),5,,,,,,.DGCNT)
"RTN","DGENL1",192,0)
 ;
"RTN","DGENL1",193,0)
 ;Medal of Honor
"RTN","DGENL1",194,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",195,0)
 ; get and display MOH fields DG*5.3*972 HM
"RTN","DGENL1",196,0)
 N DGMOHADT,DGMOHSDT,DGMOHEDT,DGMOHIND
"RTN","DGENL1",197,0)
 S DGMOHIND=$G(DGENR("ELIG","MOH")),DGMOHADT=$G(DGENR("ELIG","MOHAWRDDATE")),DGMOHSDT=$G(DGENR("ELIG","MOHSTATDATE")),DGMOHEDT=$G(DGENR("ELIG","MOHEXEMPDATE"))
"RTN","DGENL1",198,0)
 I DGMOHIND="Y",DGMOHADT="" S DGMOHADT="UNKNOWN",DGMOHEDT="Needs Determination"
"RTN","DGENL1",199,0)
 S DGMOHIND=$S(DGMOHIND="Y":"YES",DGMOHIND="N":"NO",1:"")
"RTN","DGENL1",200,0)
 D SET(DGARY,DGLINE,"MOH Indicator: "_DGMOHIND,9,,,,,,.DGCNT)
"RTN","DGENL1",201,0)
 D SET(DGARY,DGLINE,"MOH Award Date: "_$$FMTE^XLFDT(DGMOHADT,"5DZ"),48,,,,,,.DGCNT) ;MOH Award Date DG*5.3*972 HM
"RTN","DGENL1",202,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",203,0)
 D SET(DGARY,DGLINE,"MOH Status Date: "_$$FMTE^XLFDT(DGMOHSDT,"5DZ"),7,,,,,,.DGCNT) ;MOH Status Date DG*5.3*972 HM
"RTN","DGENL1",204,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",205,0)
 D SET(DGARY,DGLINE,"MOH Copay Exemption Date: "_$$FMTE^XLFDT(DGMOHEDT,"5DZ"),1,,,,,,.DGCNT) ;MOH Copayment Exemption Date DG*5.3*972 HM
"RTN","DGENL1",206,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",207,0)
 ;
"RTN","DGENL1",208,0)
 ;Set line to start on next page
"RTN","DGENL1",209,0)
 F DGLINE=DGLINE+1:1:DGSTART+VALM("LINES") D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",210,0)
 Q
"RTN","DGENL1",211,0)
 ;
"RTN","DGENL1",212,0)
SET(DGARY,DGLINE,DGTEXT,DGCOL,DGON,DGOFF,DGSUB,DGNUM,DGDATA,DGCNT) ; moved to
"RTN","DGENL1",213,0)
 ;DGENL2 as DGENL1 was getting too big
"RTN","DGENL1",214,0)
 I $G(DGCOL)']"" S DGCOL=""
"RTN","DGENL1",215,0)
 I $G(DGON)']"" S DGON=""
"RTN","DGENL1",216,0)
 I $G(DGOFF)']"" S DGOFF=""
"RTN","DGENL1",217,0)
 I $G(DGSUB)']"" S DGSUB=""
"RTN","DGENL1",218,0)
 I $G(DGNUM)']"" S DGNUM=""
"RTN","DGENL1",219,0)
 I $G(DGDATA)']"" S DGDATA=""
"RTN","DGENL1",220,0)
 D SET^DGENL2(DGARY,DGLINE,DGTEXT,DGCOL,DGON,DGOFF,DGSUB,DGNUM,DGDATA,.DGCNT)
"RTN","DGENL1",221,0)
 Q
"RTN","DGENL1",222,0)
PHEART(DFN,DGENRIEN,PHENRDT) ;move to DGENL2
"RTN","DGENL1",223,0)
 N PHI,PHST,PHRR,PHDAT
"RTN","DGENL1",224,0)
 S PHDAT=$$PHEART^DGENL2(DFN,$G(DGENRIEN),$G(DGENR("DATETIME")))
"RTN","DGENL1",225,0)
 S PHI=$P(PHDAT,U),PHST=$P(PHDAT,U,2),PHRR=$P(PHDAT,U,3)
"RTN","DGENL1",226,0)
 I ($G(PHI)]""!($G(PHST)]"")!($G(PHRR)]"")) Q $G(PHI)_"^"_$G(PHST)_"^"_$G(PHRR)
"RTN","DGENL1",227,0)
 Q ""
"RTN","DGENU")
0^7^B51369216
"RTN","DGENU",1,0)
DGENU ;ALB/CJM,ISA/KWP,Zoltan,LBD,EG,CKN,ERC,TMK,PWC,TDM,JLS,HM - Enrollment Utilities ;04/24/2006 9:20 AM
"RTN","DGENU",2,0)
 ;;5.3;Registration;**121,122,147,232,314,564,624,672,659,653,688,536,838,841,909,940,972**;Aug 13,1993;Build 80
"RTN","DGENU",3,0)
 ;
"RTN","DGENU",4,0)
DISPLAY(DFN) ;
"RTN","DGENU",5,0)
 ;Description: Display status message, current enrollment and
"RTN","DGENU",6,0)
 ;     preferred facility information
"RTN","DGENU",7,0)
 ;Input:
"RTN","DGENU",8,0)
 ;  DFN - Patient IEN
"RTN","DGENU",9,0)
 ;  Output:     none
"RTN","DGENU",10,0)
 ;
"RTN","DGENU",11,0)
 N STATUS
"RTN","DGENU",12,0)
 S STATUS=$$STATUS^DGENA(DFN)
"RTN","DGENU",13,0)
 I 'STATUS W !!,"Patient is NOT enrolled in the VA Patient Enrollment System..."
"RTN","DGENU",14,0)
 E  I STATUS=2 D
"RTN","DGENU",15,0)
 .W !!,"Patient is enrolled in the VA Patient Enrollment System..."
"RTN","DGENU",16,0)
 ; Purple Heart added status 21
"RTN","DGENU",17,0)
 E  I (STATUS=9)!(STATUS=1)!(STATUS=15)!(STATUS=16)!(STATUS=17)!(STATUS=18)!(STATUS=21) D
"RTN","DGENU",18,0)
 .W !!,"Application is pending for enrollment in the VA Patient Enrollment System..."
"RTN","DGENU",19,0)
 E  D
"RTN","DGENU",20,0)
 .W !!,"Patient is NOT enrolled in the VA Patient Enrollment System..."
"RTN","DGENU",21,0)
 D CUR(DFN)
"RTN","DGENU",22,0)
 Q
"RTN","DGENU",23,0)
 ;
"RTN","DGENU",24,0)
CUR(DFN) ;
"RTN","DGENU",25,0)
 ;Description - displays current enrollment, category, enrollment
"RTN","DGENU",26,0)
 ;  group threshold, preferred facility and source designation
"RTN","DGENU",27,0)
 ;
"RTN","DGENU",28,0)
 N FACNAME,PREFAC,PFSRC,DGEGT,DGEGTIEN,DGENCAT,DGENR,IORVON,IORVOFF
"RTN","DGENU",29,0)
 I $$GET^DGENA($$FINDCUR^DGENA(DFN),.DGENR)
"RTN","DGENU",30,0)
 ;Get enrollment category
"RTN","DGENU",31,0)
 S DGENCAT=$$CATEGORY^DGENA4(DFN)
"RTN","DGENU",32,0)
 ;Display Category in reverse video
"RTN","DGENU",33,0)
 D REV
"RTN","DGENU",34,0)
 ;Get enrollment group threshold
"RTN","DGENU",35,0)
 S DGEGTIEN=$$FINDCUR^DGENEGT
"RTN","DGENU",36,0)
 S DGEGT=$$GET^DGENEGT(DGEGTIEN,.DGEGT)
"RTN","DGENU",37,0)
 ;Preferred facility
"RTN","DGENU",38,0)
 S PREFAC=$$PREF^DGENPTA(DFN,.FACNAME)
"RTN","DGENU",39,0)
 ;Source Designation
"RTN","DGENU",40,0)
 S PFSRC=$$GET1^DIQ(2,DFN_",",27.03)
"RTN","DGENU",41,0)
 W !?3,"Enrollment Date",?35,": ",$S('$G(DGENR("DATE")):"-none-",1:$$EXT^DGENU("DATE",DGENR("DATE")))
"RTN","DGENU",42,0)
 W !?3,"Enrollment Application Date",?35,": ",$S('$G(DGENR("APP")):"-none-",1:$$EXT^DGENU("DATE",DGENR("APP")))
"RTN","DGENU",43,0)
 W !?3,IORVON,"Enrollment Category             : ",$S($G(DGENCAT)="":"-none-",1:$$EXTERNAL^DILFD(27.15,.02,"",DGENCAT)),IORVOFF
"RTN","DGENU",44,0)
 W !?3,"Enrollment Status",?35,": ",$S($G(DGENR("STATUS"))="":"-none-",1:$$EXT^DGENU("STATUS",DGENR("STATUS")))
"RTN","DGENU",45,0)
 W !?3,"Enrollment Priority",?35,": ",$S($G(DGENR("PRIORITY"))="":"-none-",1:DGENR("PRIORITY")),$S($G(DGENR("SUBGRP"))="":"",1:$$EXT("SUBGRP",DGENR("SUBGRP")))
"RTN","DGENU",46,0)
 W !?3,"Preferred Facility",?35,": ",$S($G(FACNAME)'="":FACNAME,1:"-none-")
"RTN","DGENU",47,0)
 W !?3,"Preferred Facility Source",?35,": ",$S($G(PFSRC)'="":PFSRC,1:"-none-")
"RTN","DGENU",48,0)
 W !?3,"Enrollment Group Threshold",?35,": ",$S($G(DGEGT("PRIORITY"))="":"-none-",1:$$EXTERNAL^DILFD(27.16,.02,"",$G(DGEGT("PRIORITY")))),$S($G(DGEGT("SUBGRP"))="":"",1:$$EXTERNAL^DILFD(27.16,.03,"",$G(DGEGT("SUBGRP"))))
"RTN","DGENU",49,0)
 W !
"RTN","DGENU",50,0)
 Q
"RTN","DGENU",51,0)
REV ;Get variables to display text in reverse video
"RTN","DGENU",52,0)
 N X
"RTN","DGENU",53,0)
 S X="IORVON;IORVOFF"
"RTN","DGENU",54,0)
 D ENDR^%ZISS
"RTN","DGENU",55,0)
 Q
"RTN","DGENU",56,0)
PATID(DFN) ;
"RTN","DGENU",57,0)
 ;Description - Called by FileMan as an identifier for the Patient file.
"RTN","DGENU",58,0)
 ;Displays current enrollment status, priority, and preferred facility.
"RTN","DGENU",59,0)
 ;
"RTN","DGENU",60,0)
 ;Input:
"RTN","DGENU",61,0)
 ;  DFN - ien to Patient file
"RTN","DGENU",62,0)
 ;
"RTN","DGENU",63,0)
 N PREFAC,DGENR,OUTPUT
"RTN","DGENU",64,0)
 I '$$GET^DGENA($$FINDCUR^DGENA(DFN),.DGENR) D
"RTN","DGENU",65,0)
 .S OUTPUT="NO ENROLLMENT APPLICATION ON FILE "
"RTN","DGENU",66,0)
 E  D
"RTN","DGENU",67,0)
 .S OUTPUT=$E("PRIORITY:"_DGENR("PRIORITY")_"   ",1,12)_$E("STATUS:"_$$EXT^DGENU("STATUS",DGENR("STATUS"))_"         ",1,26)
"RTN","DGENU",68,0)
 S PREFAC=$$PREF^DGENPTA(DFN)
"RTN","DGENU",69,0)
 S:PREFAC OUTPUT=OUTPUT_"PREFERRED FACILITY:"_$P($G(^DIC(4,PREFAC,99)),"^")
"RTN","DGENU",70,0)
 I $G(IOM) I ($X#$G(IOM))<6 D
"RTN","DGENU",71,0)
 .D EN^DDIOL(OUTPUT,,"?($X+(10-($X#IOM)))")
"RTN","DGENU",72,0)
 E  D
"RTN","DGENU",73,0)
 .D EN^DDIOL(OUTPUT,,"!?10")
"RTN","DGENU",74,0)
 Q
"RTN","DGENU",75,0)
 ;
"RTN","DGENU",76,0)
EXT(SUB,VAL) ;
"RTN","DGENU",77,0)
 ;Description: Given the subscript used in the PATIENT ENROLLMENT array,
"RTN","DGENU",78,0)
 ;     and a field value, returns the external representation of the
"RTN","DGENU",79,0)
 ;     value, as defined in the fields output transform of the PATIENT
"RTN","DGENU",80,0)
 ;     ENROLLMENT file.
"RTN","DGENU",81,0)
 ;Input: 
"RTN","DGENU",82,0)
 ;  SUB - subscript in the array defined by the PATIENT ENROLLMENT object
"RTN","DGENU",83,0)
 ;  VAL - value of the PATIENT ENROLLMENT object attribute named by SUB
"RTN","DGENU",84,0)
 ;Output:
"RTN","DGENU",85,0)
 ;  Function Value - returns the external value of the attribute as
"RTN","DGENU",86,0)
 ;     defined by the PATIENT ENROLLMENT file
"RTN","DGENU",87,0)
 ;
"RTN","DGENU",88,0)
 Q:(($G(SUB)="")!($G(VAL)="")) ""
"RTN","DGENU",89,0)
 ;
"RTN","DGENU",90,0)
 N FLD
"RTN","DGENU",91,0)
 S FLD=$$FIELD(SUB)
"RTN","DGENU",92,0)
 ;
"RTN","DGENU",93,0)
 Q:(FLD="") ""
"RTN","DGENU",94,0)
 Q $$EXTERNAL^DILFD(27.11,FLD,"F",VAL)
"RTN","DGENU",95,0)
 ;
"RTN","DGENU",96,0)
FIELD(SUB) ;
"RTN","DGENU",97,0)
 ;Description: given a subscript in the enrollment array, returns the
"RTN","DGENU",98,0)
 ;     corresponding field number
"RTN","DGENU",99,0)
 N FLD S FLD=""
"RTN","DGENU",100,0)
 D  ;drops out of block once SUB is determined
"RTN","DGENU",101,0)
 .I SUB="APP" S FLD=.01 Q
"RTN","DGENU",102,0)
 .I SUB="DATE" S FLD=.1 Q
"RTN","DGENU",103,0)
 .I SUB="END" S FLD=.11 Q
"RTN","DGENU",104,0)
 .I SUB="DFN" S FLD=.02 Q
"RTN","DGENU",105,0)
 .I SUB="SOURCE" S FLD=.03 Q
"RTN","DGENU",106,0)
 .I SUB="STATUS" S FLD=.04 Q
"RTN","DGENU",107,0)
 .I SUB="REASON" S FLD=.05 Q
"RTN","DGENU",108,0)
 .I SUB="REMARKS" S FLD=25 Q
"RTN","DGENU",109,0)
 .I SUB="FACREC" S FLD=.06 Q
"RTN","DGENU",110,0)
 .I SUB="PRIORITY" S FLD=.07 Q
"RTN","DGENU",111,0)
 .I SUB="EFFDATE" S FLD=.08 Q
"RTN","DGENU",112,0)
 .I SUB="PRIORREC" S FLD=.09 Q
"RTN","DGENU",113,0)
 .I SUB="SUBGRP" S FLD=.12 Q
"RTN","DGENU",114,0)
 .I SUB="RCODE" S FLD=.13 Q  ;DJE field added with DG*5.3*940 - Closed Application - RM#867186
"RTN","DGENU",115,0)
 .I SUB="CODE" S FLD=50.01 Q
"RTN","DGENU",116,0)
 .I SUB="SC" S FLD=50.02 Q
"RTN","DGENU",117,0)
 .I SUB="SCPER" S FLD=50.03 Q
"RTN","DGENU",118,0)
 .I SUB="POW" S FLD=50.04 Q
"RTN","DGENU",119,0)
 .I SUB="A&A" S FLD=50.05 Q
"RTN","DGENU",120,0)
 .I SUB="HB" S FLD=50.06 Q
"RTN","DGENU",121,0)
 .I SUB="VAPEN" S FLD=50.07 Q
"RTN","DGENU",122,0)
 .I SUB="VACKAMT" S FLD=50.08 Q
"RTN","DGENU",123,0)
 .I SUB="DISRET" S FLD=50.09 Q
"RTN","DGENU",124,0)
 .I SUB="DISLOD" S FLD=50.2 Q  ;field added with DG*5.3*672
"RTN","DGENU",125,0)
 .I SUB="MEDICAID" S FLD=50.1 Q
"RTN","DGENU",126,0)
 .I SUB="AO" S FLD=50.11 Q
"RTN","DGENU",127,0)
 .I SUB="AOEXPLOC" S FLD=50.22 Q  ;field added with DG*5.3*688
"RTN","DGENU",128,0)
 .I SUB="IR" S FLD=50.12 Q
"RTN","DGENU",129,0)
 .I SUB="EC" S FLD=50.13 Q    ;name now SW Asia Con, was Env Con DG*5.3*688
"RTN","DGENU",130,0)
 .I SUB="MTSTA" S FLD=50.14 Q
"RTN","DGENU",131,0)
 .I SUB="VCD" S FLD=50.15 Q
"RTN","DGENU",132,0)
 .I SUB="PH" S FLD=50.16 Q
"RTN","DGENU",133,0)
 .I SUB="UNEMPLOY" S FLD=50.17 Q
"RTN","DGENU",134,0)
 .I SUB="CVELEDT" S FLD=50.18 Q
"RTN","DGENU",135,0)
 .I SUB="SHAD" S FLD=50.19 Q  ;field added with DG*5.3*653
"RTN","DGENU",136,0)
 .I SUB="MOH" S FLD=50.23 Q
"RTN","DGENU",137,0)
 .I SUB="CLE" S FLD=50.24 Q      ;field added with DG*5.3*909
"RTN","DGENU",138,0)
 .I SUB="CLEDT" S FLD=50.25 Q    ;field added with DG*5.3*909
"RTN","DGENU",139,0)
 .I SUB="CLEST" S FLD=50.26 Q    ;field added with DG*5.3*909
"RTN","DGENU",140,0)
 .I SUB="CLESOR" S FLD=50.27 Q   ;field added with DG*5.3*909
"RTN","DGENU",141,0)
 .I SUB="MOHAWRDDATE" S FLD=50.28 Q   ;field added with DG*5.3*972 HM
"RTN","DGENU",142,0)
 .I SUB="MOHSTATDATE" S FLD=50.29 Q   ;field added with DG*5.3*972 HM
"RTN","DGENU",143,0)
 .I SUB="MOHEXEMPDATE" S FLD=50.3 Q   ;field added with DG*5.3*972 HM
"RTN","DGENU",144,0)
 .I SUB="DATETIME" S FLD=75.01 Q
"RTN","DGENU",145,0)
 .I SUB="USER" S FLD=75.02 Q
"RTN","DGENU",146,0)
 .I SUB="RADEXPM" S FLD=76 Q
"RTN","DGENU",147,0)
 Q FLD
"RTN","DGENU",148,0)
 ;
"RTN","DGENU",149,0)
PROMPT(FILE,FIELD,DEFAULT,RESPONSE,REQUIRE,PRMPTNM) ;
"RTN","DGENU",150,0)
 ;Description: requests user to enter a single field value.
"RTN","DGENU",151,0)
 ;Input:
"RTN","DGENU",152,0)
 ;  FILE - the file #
"RTN","DGENU",153,0)
 ;  FIELD - the field #
"RTN","DGENU",154,0)
 ;  DEFAULT - default value, internal form
"RTN","DGENU",155,0)
 ;  REQUIRE - a flag, (+value)'=0 means to require a value to be
"RTN","DGENU",156,0)
 ;            entered and to return failure otherwise (optional)
"RTN","DGENU",157,0)
 ;  PRMPTNM - Optional
"RTN","DGENU",158,0)
 ;             0 - display field LABEL
"RTN","DGENU",159,0)
 ;             1 - Prompt field TITLE
"RTN","DGENU",160,0)
 ;Output:
"RTN","DGENU",161,0)
 ;  Function Value - 0 on failure, 1 on success
"RTN","DGENU",162,0)
 ;  RESPONSE - value entered by user, pass by reference
"RTN","DGENU",163,0)
 ;
"RTN","DGENU",164,0)
 Q:(('$G(FILE))!('$G(FIELD))) 0
"RTN","DGENU",165,0)
 S REQUIRE=$G(REQUIRE)
"RTN","DGENU",166,0)
 S PRMPTNM=$G(PRMPTNM)
"RTN","DGENU",167,0)
 N DIR,DA,QUIT,AGAIN
"RTN","DGENU",168,0)
 ;
"RTN","DGENU",169,0)
 S DIR(0)=FILE_","_FIELD_$S($G(REQUIRE):"",1:"O")_"AO"
"RTN","DGENU",170,0)
 I $G(DEFAULT)'="" DO
"RTN","DGENU",171,0)
 . S:+$G(PRMPTNM)=0 DIR("A")=$$GET1^DID(FILE,FIELD,"","LABEL")_": "_$$EXTERNAL^DILFD(FILE,FIELD,"F",DEFAULT)_"// "
"RTN","DGENU",172,0)
 . S:+$G(PRMPTNM)>0 DIR("A")=$$GET1^DID(FILE,FIELD,"","TITLE")_": "_$$EXTERNAL^DILFD(FILE,FIELD,"F",DEFAULT)_"// "
"RTN","DGENU",173,0)
 S QUIT=0
"RTN","DGENU",174,0)
 F  D  Q:QUIT
"RTN","DGENU",175,0)
 . D ^DIR
"RTN","DGENU",176,0)
 . I $D(DTOUT)!$D(DUOUT) S QUIT=1 Q
"RTN","DGENU",177,0)
 . I X="@" D  Q:AGAIN
"RTN","DGENU",178,0)
 . . S AGAIN=0
"RTN","DGENU",179,0)
 . . I 'REQUIRE,"Yy"'[$E($$YN^DGENCD1("  Are you sure")_"X") S AGAIN=1 Q
"RTN","DGENU",180,0)
 . . S RESPONSE="" ; This might trigger the "required" message below.
"RTN","DGENU",181,0)
 . E  I X="" S RESPONSE=$G(DEFAULT)
"RTN","DGENU",182,0)
 . E  S RESPONSE=$P(Y,"^")
"RTN","DGENU",183,0)
 . ;
"RTN","DGENU",184,0)
 . ; quit this loop if the user entered value OR value not required
"RTN","DGENU",185,0)
 . I RESPONSE'="" S QUIT=1 Q
"RTN","DGENU",186,0)
 . I 'REQUIRE S QUIT=1 Q
"RTN","DGENU",187,0)
 . W !,"This is a required response. Enter '^' to exit"
"RTN","DGENU",188,0)
 I $D(DTOUT)!$D(DUOUT) Q 0
"RTN","DGENU",189,0)
 Q 1
"RTN","DGENU",190,0)
 ;
"RTN","DGENU",191,0)
INST(VADUZ,VACHK) ;
"RTN","DGENU",192,0)
 ; Description: Determine the institution affiliation associated with a
"RTN","DGENU",193,0)
 ;              user.
"RTN","DGENU",194,0)
 ;
"RTN","DGENU",195,0)
 ;  Input:
"RTN","DGENU",196,0)
 ;     VADUZ =  array if passed by reference:
"RTN","DGENU",197,0)
 ;           VADUZ = DUZ
"RTN","DGENU",198,0)
 ;           VADUZ(2) =  
"RTN","DGENU",199,0)
 ;              o  if this value is null: DUZ(2) (institution affiliated
"RTN","DGENU",200,0)
 ;                    with user, prompted at Kernel sign-on)
"RTN","DGENU",201,0)
 ;              o  if value is not null: site to check as valid for the
"RTN","DGENU",202,0)
 ;                    user (Pointer to INSTITUTION (#4) file)
"RTN","DGENU",203,0)
 ; Output:
"RTN","DGENU",204,0)
 ;   Function Value - Returns pointer to the INSTITUTION (#4) file
"RTN","DGENU",205,0)
 ;    entry that is associated with the user, otherwise the pointer
"RTN","DGENU",206,0)
 ;    to the INSTITUTION (#4) file entry of the primary VA Medical
"RTN","DGENU",207,0)
 ;    Center division is returned.
"RTN","DGENU",208,0)
 ;
"RTN","DGENU",209,0)
 ;    VACHK = passed by reference, returned as:
"RTN","DGENU",210,0)
 ;         null if the value in VADUZ(2) is null
"RTN","DGENU",211,0)
 ;            0 if the value in VADUZ(2) is not null and is not a valid
"RTN","DGENU",212,0)
 ;              site for the user
"RTN","DGENU",213,0)
 ;            1 if the value in VADUZ(2) is not null and is a valid site
"RTN","DGENU",214,0)
 ;              for the user
"RTN","DGENU",215,0)
 ;
"RTN","DGENU",216,0)
 S VACHK=$S($G(VADUZ(2))="":"",1:0)
"RTN","DGENU",217,0)
 I $G(VADUZ(2)) D
"RTN","DGENU",218,0)
 . N X,ZZ
"RTN","DGENU",219,0)
 . Q:'$G(VADUZ)
"RTN","DGENU",220,0)
 . S X=$$DIV4^XUSER(.ZZ,VADUZ)
"RTN","DGENU",221,0)
 . I X,$D(ZZ(VADUZ(2))) S VACHK=1
"RTN","DGENU",222,0)
 I '$G(VADUZ(2)) S VADUZ(2)=$G(DUZ(2))
"RTN","DGENU",223,0)
 Q $S($G(VADUZ(2)):VADUZ(2),1:$P($$SITE^VASITE(),"^"))
"RTN","DGENU",224,0)
 ;
"RTN","DGENU",225,0)
GETINST(DGPREFAC,DGINST) ;Get Institution file data
"RTN","DGENU",226,0)
 ; Input  -- DGPREFAC Institution file IEN
"RTN","DGENU",227,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","DGENU",228,0)
 ;           DGINST - Institution file Array
"RTN","DGENU",229,0)
 N DGINST0,DGINST99,DGOKF
"RTN","DGENU",230,0)
 S DGINST0=$G(^DIC(4,DGPREFAC,0)) G GETQ:DGINST0=""
"RTN","DGENU",231,0)
 S DGINST("NAME")=$P(DGINST0,U)
"RTN","DGENU",232,0)
 S DGINST99=$G(^DIC(4,DGPREFAC,99))
"RTN","DGENU",233,0)
 S DGINST("STANUM")=$P(DGINST99,U)
"RTN","DGENU",234,0)
 S DGOKF=1
"RTN","DGENU",235,0)
GETQ Q +$G(DGOKF)
"RTN","DGENUPL1")
0^28^B63594791
"RTN","DGENUPL1",1,0)
DGENUPL1 ;ALB/CJM,ISA,KWP,CKN,LBD,LMD,TDM,TGH,DJS,HM - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ;30 Oct 2017  7:32PM
"RTN","DGENUPL1",2,0)
 ;;5.3;REGISTRATION;**147,222,232,314,397,379,407,363,673,653,688,797,842,894,871,935,959,975,972**;Aug 13,1993;Build 80
"RTN","DGENUPL1",3,0)
 ;
"RTN","DGENUPL1",4,0)
PARSE(MSGIEN,MSGID,CURLINE,ERRCOUNT,DGPAT,DGELG,DGENR,DGCDIS,DGOEIF,DGSEC,DGNTR,DGMST,DGNMSE,DGHBP) ;
"RTN","DGENUPL1",5,0)
 ;
"RTN","DGENUPL1",6,0)
 ;Description:  This function parses the HL7 segments.  It creates arrays
"RTN","DGENUPL1",7,0)
 ;defined by the PATIENT, ENROLLMENT, ELIGIBILY, CATASTROPHIC DISABILITY,
"RTN","DGENUPL1",8,0)
 ;OEF/OIF CONFLICT objects.
"RTN","DGENUPL1",9,0)
 ;Field values are put in DHCP format and the validity at the
"RTN","DGENUPL1",10,0)
 ;field level is tested.  Fields to be deleted are set to "@".
"RTN","DGENUPL1",11,0)
 ;
"RTN","DGENUPL1",12,0)
 ;Input:
"RTN","DGENUPL1",13,0)
 ;  MSGIEN - the ien of the HL7 message in the HL7 MESSAGE TEXT file (772)
"RTN","DGENUPL1",14,0)
 ;  MSGID -message control id of HL7 msg in the MSH segment
"RTN","DGENUPL1",15,0)
 ;  CURLINE - the subscript of the PID segment of the current message (pass by reference)
"RTN","DGENUPL1",16,0)
 ;  ERRCOUNT - is a count of the number of messages in the batch that can not be processed (pass by ref)
"RTN","DGENUPL1",17,0)
 ;
"RTN","DGENUPL1",18,0)
 ;Output:
"RTN","DGENUPL1",19,0)
 ;  Function Value: Returns 1 on success, 0 on failure.
"RTN","DGENUPL1",20,0)
 ;  CURLINE - upon leaving the procedure this parameter should be set to the end of the current message.
"RTN","DGENUPL1",21,0)
 ;  ERRCOUNT - set to count of messages that were not processed due to errors encountered. (pass by ref)
"RTN","DGENUPL1",22,0)
 ;  DGPAT - array defined by the PATIENT object. (pass by ref)
"RTN","DGENUPL1",23,0)
 ;  DGENR - array defined by the PATIENT ENROLLMENT object. (pass by ref)
"RTN","DGENUPL1",24,0)
 ;  DGELG - array defined by the PATIENT ELIGIBILITY object. (pass by ref)
"RTN","DGENUPL1",25,0)
 ;  DGCDIS - array defined by the CATASTROPHIC DISABILITY object. (pass by ref)
"RTN","DGENUPL1",26,0)
 ;  DGSEC - array defined by the PATIENT SECURITY object. (pass by ref)
"RTN","DGENUPL1",27,0)
 ;  DGOEIF - array defined by the OEF/OIF CONFLICT object.  (pass by ref)
"RTN","DGENUPL1",28,0)
 ;  DGNTR - array defined for NTR data.
"RTN","DGENUPL1",29,0)
 ;  DGMST - array defined for MST data.
"RTN","DGENUPL1",30,0)
 ;  DGNMSE - array define for MILITARY SERVICE EPISODE data (pass by ref)
"RTN","DGENUPL1",31,0)
 ;  DGHBP - array define for HEALTH BENEFIT PLAN data (pass by ref) DG*5.3*871
"RTN","DGENUPL1",32,0)
 ;
"RTN","DGENUPL1",33,0)
 N SEG,ERROR,COUNT,QFLG,NFLG
"RTN","DGENUPL1",34,0)
 ;
"RTN","DGENUPL1",35,0)
 ;DJS, Set TMP global to track the presence of ZMH segment; DG*5.3*935
"RTN","DGENUPL1",36,0)
 K ^TMP($J,"DGENUPL") S ^TMP($J,"DGENUPL","ZMH",0)=0
"RTN","DGENUPL1",37,0)
 ;
"RTN","DGENUPL1",38,0)
 K DGEN,DGPAT,DGELG,DGCDIS,DGNTR,DGMST
"RTN","DGENUPL1",39,0)
 ;
"RTN","DGENUPL1",40,0)
 S ERROR=0,NFLG=1
"RTN","DGENUPL1",41,0)
 F SEG="PID","ZPD","ZIE","ZIO","ZEL"  D  Q:ERROR
"RTN","DGENUPL1",42,0)
 .D:NFLG NXTSEG^DGENUPL(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL1",43,0)
 .I SEG="ZIO",SEG("TYPE")'="ZIO" S NFLG=0 Q
"RTN","DGENUPL1",44,0)
 .I SEG("TYPE")=SEG D  Q
"RTN","DGENUPL1",45,0)
 ..I SEG'="ZEL" N DGRTN S DGRTN=SEG_"^DGENUPL2" D @DGRTN      ; DG*5.3*894
"RTN","DGENUPL1",46,0)
 ..D:(SEG="ZEL") ZEL^DGENUPL2(1)
"RTN","DGENUPL1",47,0)
 ..S NFLG=1
"RTN","DGENUPL1",48,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),SEG_" SEGMENT MISSING OR OUT OF ORDER",.ERRCOUNT)
"RTN","DGENUPL1",49,0)
 .S ERROR=1
"RTN","DGENUPL1",50,0)
 .;
"RTN","DGENUPL1",51,0)
 .;possible that in a bad message we are now past the end
"RTN","DGENUPL1",52,0)
 .S CURLINE=CURLINE-1
"RTN","DGENUPL1",53,0)
 ;
"RTN","DGENUPL1",54,0)
 ;DJS, Set segment before processing possible multiple segments; DG*5.3*935
"RTN","DGENUPL1",55,0)
 I 'ERROR S SEG="ZEL" F COUNT=2:1 D NXTSEG^DGENUPL(MSGIEN,CURLINE,.SEG) Q:(SEG("TYPE")'="ZEL")  D  Q:ERROR
"RTN","DGENUPL1",56,0)
 .S CURLINE=CURLINE+1
"RTN","DGENUPL1",57,0)
 .D ZEL^DGENUPL2(COUNT)
"RTN","DGENUPL1",58,0)
 ;
"RTN","DGENUPL1",59,0)
 ;ZE2 is optional, If no ZE2 segment delete pension data
"RTN","DGENUPL1",60,0)
 I 'ERROR D
"RTN","DGENUPL1",61,0)
 .I SEG("TYPE")="ZE2" D ZE2^DGENUPLB S CURLINE=CURLINE+1 Q
"RTN","DGENUPL1",62,0)
 .I SEG("TYPE")'="ZE2" D
"RTN","DGENUPL1",63,0)
 ..Q:$$GET1^DIQ(2,DFN,.3852,"I")=$O(^DG(27.18,"C","00",""))
"RTN","DGENUPL1",64,0)
 ..N PSUB
"RTN","DGENUPL1",65,0)
 ..F PSUB="PENAEFDT","PENTRMDT","PENAREAS","PENTRMR1","PENTRMR2","PENTRMR3","PENTRMR4" S DGPAT(PSUB)="@"
"RTN","DGENUPL1",66,0)
 ;
"RTN","DGENUPL1",67,0)
 ;ZHP is optional & can repeat. DG*5.3*871
"RTN","DGENUPL1",68,0)
 K DGHBP
"RTN","DGENUPL1",69,0)
 ;DJS, Added call to extrinsic function to determine if multiple segments are present ; DG*5.3*935
"RTN","DGENUPL1",70,0)
 I 'ERROR S SEG="ZHP" I $$CHKNXT(CURLINE+1,SEG) D  Q:ERROR $S(ERROR:0,1:1)
"RTN","DGENUPL1",71,0)
 . D NXTSEG^DGENUPL(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL1",72,0)
 . S QFLG=0 F  D  Q:QFLG
"RTN","DGENUPL1",73,0)
 . . I SEG("TYPE")'="ZHP" S QFLG=1,CURLINE=CURLINE-1 Q
"RTN","DGENUPL1",74,0)
 . . D ZHP^DGENUPLB
"RTN","DGENUPL1",75,0)
 . . D NXTSEG^DGENUPL(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL1",76,0)
 ;
"RTN","DGENUPL1",77,0)
 ;Phase II Add the capability to accept more than 1 ZCD
"RTN","DGENUPL1",78,0)
 I 'ERROR F SEG="ZEN","ZMT","ZCD" D  Q:ERROR
"RTN","DGENUPL1",79,0)
 .D NXTSEG^DGENUPL(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL1",80,0)
 .I SEG("TYPE")=SEG D
"RTN","DGENUPL1",81,0)
 ..N DGRTN S DGRTN=SEG_"^DGENUPL2" D @DGRTN     ; DG*5.3*894
"RTN","DGENUPL1",82,0)
 .E  D
"RTN","DGENUPL1",83,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),SEG_" SEGMENT MISSING OR OUT OF ORDER",.ERRCOUNT)
"RTN","DGENUPL1",84,0)
 ..S ERROR=1
"RTN","DGENUPL1",85,0)
 ..;
"RTN","DGENUPL1",86,0)
 ..;possible that in a bad message we are now past the end
"RTN","DGENUPL1",87,0)
 ..S CURLINE=CURLINE-1
"RTN","DGENUPL1",88,0)
 ;
"RTN","DGENUPL1",89,0)
 ;DJS, Added call to extrinsic function to determine if multiple segments are present ; DG*5.3*935
"RTN","DGENUPL1",90,0)
 I 'ERROR S SEG="ZCD" I $$CHKNXT(CURLINE+1,SEG) F COUNT=2:1 D NXTSEG^DGENUPL(MSGIEN,CURLINE,.SEG) Q:(SEG("TYPE")'="ZCD")  D  Q:ERROR
"RTN","DGENUPL1",91,0)
 .S CURLINE=CURLINE+1
"RTN","DGENUPL1",92,0)
 .D ZCD^DGENUPL2
"RTN","DGENUPL1",93,0)
 ;
"RTN","DGENUPL1",94,0)
 ; Purple Heart/OEF-OIF  Addition of optional ZMH segment
"RTN","DGENUPL1",95,0)
 ;              Modified handling of ZSP and ZRD to accomodate ZMH
"RTN","DGENUPL1",96,0)
 ;
"RTN","DGENUPL1",97,0)
 ;DJS, Added call to extrinsic function to determine if multiple segments are present ; DG*5.3*935
"RTN","DGENUPL1",98,0)
 I 'ERROR S SEG="ZSP" I $$CHKNXT(CURLINE+1,SEG) D  Q:ERROR $S(ERROR:0,1:1)
"RTN","DGENUPL1",99,0)
 .D NXTSEG^DGENUPL(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL1",100,0)
 .I SEG("TYPE")="ZSP" D ZSP^DGENUPL2 Q
"RTN","DGENUPL1",101,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),SEG_" SEGMENT MISSING OR OUT OF ORDER",.ERRCOUNT)
"RTN","DGENUPL1",102,0)
 .S ERROR=1
"RTN","DGENUPL1",103,0)
 .;possible that in a bad message we are now past the end
"RTN","DGENUPL1",104,0)
 .S CURLINE=CURLINE-1
"RTN","DGENUPL1",105,0)
 ;
"RTN","DGENUPL1",106,0)
 ;Modified following code to receive multiple ZMH segment for
"RTN","DGENUPL1",107,0)
 ;Military service information - DG*5.3*653
"RTN","DGENUPL1",108,0)
 ;
"RTN","DGENUPL1",109,0)
 ;DJS, Check for no MSE ZMH segments present and non-MSE ZMH segments ; DG*5.3*959
"RTN","DGENUPL1",110,0)
 I 'ERROR S SEG="ZMH" D  ; DG*5.3*972 ;HM - remove Q:ERROR and let code quit with value below
"RTN","DGENUPL1",111,0)
 .N SEGNAM,MSECNT,CURLN,MHSTYP,NONMSE,SGMNT S SEGNAM="",(MSECNT,NONMSE)=0,CURLN=CURLINE
"RTN","DGENUPL1",112,0)
 .F  S CURLN=$O(^TMP($J,IVMRTN,CURLN)) Q:'CURLN  D
"RTN","DGENUPL1",113,0)
 ..S SGMNT=$G(^TMP($J,IVMRTN,CURLN,0)),SEGNAM=$P($G(SGMNT),U) Q:SEGNAM'="ZMH"  S MHSTYP=$P($G(SGMNT),U,3)
"RTN","DGENUPL1",114,0)
 ..I "^SL^SNL^SNNL^MSD^FDD^"[("^"_MHSTYP_"^") S MSECNT=MSECNT+1 Q
"RTN","DGENUPL1",115,0)
 ..E  S NONMSE=NONMSE+1 Q  ;ZMH segment present, but not an MSE
"RTN","DGENUPL1",116,0)
 .;DJS, No MSE-type ZMH segment present, so branch to DGNOZMH to kill HEC-owned MSEs; DG*5.3*935
"RTN","DGENUPL1",117,0)
 .I MSECNT=0 I ^TMP($J,"DGENUPL","ZMH",0)=0 D EN^DGNOZMH(DFN) K ^TMP($J,"DGENUPL")
"RTN","DGENUPL1",118,0)
 .Q:('NONMSE&('MSECNT))
"RTN","DGENUPL1",119,0)
 .;DJS, Added call to extrinsic function to determine if multiple segments are present ; DG*5.3*935
"RTN","DGENUPL1",120,0)
 .S QFLG=0 F  D  Q:QFLG!(ERROR)
"RTN","DGENUPL1",121,0)
 ..I '$$CHKNXT(CURLINE+1,SEG) S QFLG=1 Q
"RTN","DGENUPL1",122,0)
 ..D NXTSEG^DGENUPL(MSGIEN,.CURLINE,.SEG) ;process any ZMH segments that are present in Z11
"RTN","DGENUPL1",123,0)
 ..D ZMH^DGENUPL2
"RTN","DGENUPL1",124,0)
 ;
"RTN","DGENUPL1",125,0)
 ;DJS, Added call to extrinsic function to determine if multiple segments are present ; DG*5.3*935
"RTN","DGENUPL1",126,0)
 I 'ERROR S SEG="ZRD" I $$CHKNXT(CURLINE+1,SEG) F COUNT=2:1 D NXTSEG^DGENUPL(MSGIEN,CURLINE,.SEG) Q:(SEG("TYPE")'="ZRD")  D  Q:ERROR
"RTN","DGENUPL1",127,0)
 .S CURLINE=CURLINE+1
"RTN","DGENUPL1",128,0)
 .D ZRD^DGENUPL2
"RTN","DGENUPL1",129,0)
 ;
"RTN","DGENUPL1",130,0)
 ;DJS, Added call to extrinsic function to determine if multiple segments are present ; DG*5.3*935
"RTN","DGENUPL1",131,0)
 I 'ERROR S SEG="OBX" F  D  Q:(ERROR!('$$CHKNXT(CURLINE+1,SEG)))
"RTN","DGENUPL1",132,0)
 .;possible if OBX segment not present that we are now past the end
"RTN","DGENUPL1",133,0)
 .Q:'$$CHKNXT(CURLINE+1,SEG)
"RTN","DGENUPL1",134,0)
 .D NXTSEG^DGENUPL(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL1",135,0)
 .D OBX^DGENUPL2
"RTN","DGENUPL1",136,0)
 .Q
"RTN","DGENUPL1",137,0)
 ;
"RTN","DGENUPL1",138,0)
 K ^TMP($J,"DGENUPL")
"RTN","DGENUPL1",139,0)
 Q $S(ERROR:0,1:1)
"RTN","DGENUPL1",140,0)
 ;
"RTN","DGENUPL1",141,0)
CONVERT(VAL,DATATYPE,ERROR) ;
"RTN","DGENUPL1",142,0)
 ;Description: Converts the value found in the HL7 segment to DHCP format
"RTN","DGENUPL1",143,0)
 ;
"RTN","DGENUPL1",144,0)
 ;Input:
"RTN","DGENUPL1",145,0)
 ;  VAL - value parsed from the HL7 segment
"RTN","DGENUPL1",146,0)
 ;  DATATYPE: indicates the type of conversion necessary
"RTN","DGENUPL1",147,0)
 ;      "DATE" - needs to be converted to FM format
"RTN","DGENUPL1",148,0)
 ;      "TS" - time stamp, needs to be converted to FM format
"RTN","DGENUPL1",149,0)
 ;      "Y/N" - 0->"N",1->"Y"
"RTN","DGENUPL1",150,0)
 ;      "1/0" - "Y"->1,"N"->0
"RTN","DGENUPL1",151,0)
 ;      "INSTITUTION" - needs to convert the station number with suffix to a point to the INSTITUTION file
"RTN","DGENUPL1",152,0)
 ;      "ELIGIBILITY" - VAL is a pointer to the national eligibility code file (#8.1), needs to be converted to a local eligibility code (file #8)
"RTN","DGENUPL1",153,0)
 ;
"RTN","DGENUPL1",154,0)
 ;      "MT" - VAL  is a Means Test Status code, it needs to be converted
"RTN","DGENUPL1",155,0)
 ;             to a pointer to the Means Test Status file
"RTN","DGENUPL1",156,0)
 ;       Phase II convert code to RSN IEN for DGCDIS object
"RTN","DGENUPL1",157,0)
 ;       "CDRSN" data type converts the codes diagnosis,procedure,condition to RSN IEN. (HL7TORSN^DGENA5)
"RTN","DGENUPL1",158,0)
 ;       "CDDSCR" data type converts the codes descriptor(s) to DSCR IEN. (HL7TODSC^DGENA5)   DG*5.3*894
"RTN","DGENUPL1",159,0)
 ;       "EXT" convert from code to abbreviation
"RTN","DGENUPL1",160,0)
 ;       "POS" convert from Period of Service code to a point to Period of Service file
"RTN","DGENUPL1",161,0)
 ;       "AGENCY" convert Agency/Allied Country code from file 35
"RTN","DGENUPL1",162,0)
 ;       "PENSIONCD" convert Pension Award/Termination Reason code from file 27.18
"RTN","DGENUPL1",163,0)
 ;       "HBP" convert from code to file 25.11 ien DG*5.3*871
"RTN","DGENUPL1",164,0)
 ;OUTPUT:
"RTN","DGENUPL1",165,0)
 ;  Function Value - the result of the conversion
"RTN","DGENUPL1",166,0)
 ;  ERROR - set to 1 if an error is detected, 0 otherwise (optional,pass by ref)
"RTN","DGENUPL1",167,0)
 S ERROR=0
"RTN","DGENUPL1",168,0)
 D
"RTN","DGENUPL1",169,0)
 .I VAL="" Q
"RTN","DGENUPL1",170,0)
 .I VAL="""""" S VAL="@" Q
"RTN","DGENUPL1",171,0)
 .I $G(DATATYPE)="EXT" D  Q
"RTN","DGENUPL1",172,0)
 ..S VAL=$$HLTOLIMB^DGENA5(VAL)
"RTN","DGENUPL1",173,0)
 .I $G(DATATYPE)="CDRSN" D  Q
"RTN","DGENUPL1",174,0)
 ..S VAL=$$HL7TORSN^DGENA5(VAL)
"RTN","DGENUPL1",175,0)
 .; * check the new DESCRIPTOR seq  -  DG*5.3*894
"RTN","DGENUPL1",176,0)
 .I $G(DATATYPE)="CDDSCR" D  Q
"RTN","DGENUPL1",177,0)
 ..S VAL=$$HL7TODSC^DGENA5(VAL)
"RTN","DGENUPL1",178,0)
 .I ($G(DATATYPE)="MT") D  Q
"RTN","DGENUPL1",179,0)
 ..S VAL=$O(^DG(408.32,"AC",1,VAL,0))
"RTN","DGENUPL1",180,0)
 ..I 'VAL S ERROR=1
"RTN","DGENUPL1",181,0)
 .I ($G(DATATYPE)="DATE") D  Q
"RTN","DGENUPL1",182,0)
 ..I $L(VAL)'=8 S ERROR=1 Q
"RTN","DGENUPL1",183,0)
 ..S VAL=$$FMDATE^HLFNC(VAL)
"RTN","DGENUPL1",184,0)
 ..I ((VAL'=+VAL)!($L($P(VAL,"."))<7)) S ERROR=1
"RTN","DGENUPL1",185,0)
 .I ($G(DATATYPE)="TS") D  Q
"RTN","DGENUPL1",186,0)
 ..I $L(VAL)<8 S ERROR=1 Q
"RTN","DGENUPL1",187,0)
 ..S VAL=$$FMDATE^HLFNC(VAL)
"RTN","DGENUPL1",188,0)
 ..I ((VAL'=+VAL)!($L($P(VAL,"."))<7)) S ERROR=1
"RTN","DGENUPL1",189,0)
 .I ($G(DATATYPE)="Y/N") D  Q
"RTN","DGENUPL1",190,0)
 ..I VAL=0 S VAL="N" Q
"RTN","DGENUPL1",191,0)
 ..I VAL=1 S VAL="Y" Q
"RTN","DGENUPL1",192,0)
 ..S ERROR=1
"RTN","DGENUPL1",193,0)
 .I ($G(DATATYPE)="1/0") D  Q
"RTN","DGENUPL1",194,0)
 ..I VAL="N" S VAL=0 Q
"RTN","DGENUPL1",195,0)
 ..I VAL="Y" S VAL=1 Q
"RTN","DGENUPL1",196,0)
 ..S ERROR=1
"RTN","DGENUPL1",197,0)
 .I ($G(DATATYPE)="ELIGIBILITY") D  Q
"RTN","DGENUPL1",198,0)
 ..S VAL=$$MAP(VAL)
"RTN","DGENUPL1",199,0)
 ..I 'VAL S ERROR=1
"RTN","DGENUPL1",200,0)
 .I ($G(DATATYPE)="INSTITUTION") D  Q
"RTN","DGENUPL1",201,0)
 ..N OLDVAL
"RTN","DGENUPL1",202,0)
 ..S OLDVAL=VAL
"RTN","DGENUPL1",203,0)
 ..S VAL=$O(^DIC(4,"D",OLDVAL,0))
"RTN","DGENUPL1",204,0)
 ..I 'VAL S VAL=$O(^DIC(4,"D",(+OLDVAL),0))
"RTN","DGENUPL1",205,0)
 ..I 'VAL S ERROR=1
"RTN","DGENUPL1",206,0)
 .I ($G(DATATYPE)="POS") D  Q
"RTN","DGENUPL1",207,0)
 ..N OLDVAL
"RTN","DGENUPL1",208,0)
 ..S OLDVAL=VAL
"RTN","DGENUPL1",209,0)
 ..S VAL=$O(^DIC(21,"D",OLDVAL,0))
"RTN","DGENUPL1",210,0)
 ..I 'VAL S ERROR=1
"RTN","DGENUPL1",211,0)
 .I ($G(DATATYPE)="AGENCY") D  Q
"RTN","DGENUPL1",212,0)
 ..N OLDVAL
"RTN","DGENUPL1",213,0)
 ..S OLDVAL=VAL
"RTN","DGENUPL1",214,0)
 ..S VAL=$O(^DIC(35,"C",OLDVAL,0))
"RTN","DGENUPL1",215,0)
 ..I 'VAL S ERROR=1
"RTN","DGENUPL1",216,0)
 .I ($G(DATATYPE)="PENSIONCD") D  Q
"RTN","DGENUPL1",217,0)
 ..N OLDVAL
"RTN","DGENUPL1",218,0)
 ..S OLDVAL=VAL
"RTN","DGENUPL1",219,0)
 ..S VAL=$O(^DG(27.18,"C",OLDVAL,0))
"RTN","DGENUPL1",220,0)
 ..I 'VAL S ERROR=1
"RTN","DGENUPL1",221,0)
 .I ($G(DATATYPE)="HBP") D  Q    ; DG*5.3*871
"RTN","DGENUPL1",222,0)
 ..N OLDVAL
"RTN","DGENUPL1",223,0)
 ..S OLDVAL=VAL
"RTN","DGENUPL1",224,0)
 ..S VAL=$O(^DGHBP(25.11,"C",OLDVAL,0))
"RTN","DGENUPL1",225,0)
 ..I 'VAL S ERROR=1
"RTN","DGENUPL1",226,0)
 Q VAL
"RTN","DGENUPL1",227,0)
 ;
"RTN","DGENUPL1",228,0)
MAP(VALUE) ;
"RTN","DGENUPL1",229,0)
 ;Description: Tries to map an eligibility code from file #8.1 (the national MAS ELIGIBILITY CODE file) to file #8 (the local ELIGIBILITY CODE file)
"RTN","DGENUPL1",230,0)
 ;
"RTN","DGENUPL1",231,0)
 ;Input: VALUE - ien of an entry in file #8.1
"RTN","DGENUPL1",232,0)
 ;
"RTN","DGENUPL1",233,0)
 ;Output: Function value - NULL if mapping is not found, otherwise returns an ien of entry in file #8
"RTN","DGENUPL1",234,0)
 ;
"RTN","DGENUPL1",235,0)
 N ECODE,NODE,COUNT,NAME
"RTN","DGENUPL1",236,0)
 ;try to choose a code from file 8 to use that is appropriate
"RTN","DGENUPL1",237,0)
 S (COUNT,ECODE)=0
"RTN","DGENUPL1",238,0)
 ;
"RTN","DGENUPL1",239,0)
 F  S ECODE=$O(^DIC(8,"D",VALUE,ECODE)) Q:'ECODE  D
"RTN","DGENUPL1",240,0)
 .S NODE=$G(^DIC(8,ECODE,0))
"RTN","DGENUPL1",241,0)
 .;put code on list if active
"RTN","DGENUPL1",242,0)
 .I (NODE'=""),'$P(NODE,"^",7) S ECODE(ECODE)=$P(NODE,"^"),COUNT=COUNT+1
"RTN","DGENUPL1",243,0)
 ;
"RTN","DGENUPL1",244,0)
 ;only one match found, so use it
"RTN","DGENUPL1",245,0)
 Q:COUNT=1 $O(ECODE(0))
"RTN","DGENUPL1",246,0)
 ;
"RTN","DGENUPL1",247,0)
 ;no match found
"RTN","DGENUPL1",248,0)
 Q:'COUNT ""
"RTN","DGENUPL1",249,0)
 ;
"RTN","DGENUPL1",250,0)
 ;multiple matches found, try to match by name
"RTN","DGENUPL1",251,0)
 I COUNT>1 D
"RTN","DGENUPL1",252,0)
 .S ECODE=0
"RTN","DGENUPL1",253,0)
 .S NAME=$P($G(^DIC(8.1,VALUE,0)),"^")
"RTN","DGENUPL1",254,0)
 .F  S ECODE=$O(ECODE(ECODE)) Q:'ECODE  Q:ECODE(ECODE)=NAME
"RTN","DGENUPL1",255,0)
 Q ECODE
"RTN","DGENUPL1",256,0)
 ;
"RTN","DGENUPL1",257,0)
ACCEPT(MSGID) ;
"RTN","DGENUPL1",258,0)
 ;Description: Writes an ack (AA) to a global to be transmitted later.
"RTN","DGENUPL1",259,0)
 ;
"RTN","DGENUPL1",260,0)
 ;Inputs:
"RTN","DGENUPL1",261,0)
 ;  MSGID -message control id of HL7 msg in the MSH segment
"RTN","DGENUPL1",262,0)
 ;
"RTN","DGENUPL1",263,0)
 ;Outputs: none
"RTN","DGENUPL1",264,0)
 ;
"RTN","DGENUPL1",265,0)
 K HL,HLMID,HLMTIEN,HLDT,HLDT1
"RTN","DGENUPL1",266,0)
 D INIT^HLFNC2(HLEID,.HL)
"RTN","DGENUPL1",267,0)
 D CREATE^HLTF(.HLMID,.HLMTIEN,.HLDT,.HLDT1)
"RTN","DGENUPL1",268,0)
 S HLEVN=1
"RTN","DGENUPL1",269,0)
 S MID=HLMID_"-"_HLEVN
"RTN","DGENUPL1",270,0)
 D MSH^HLFNC2(.HL,MID,.HLRES)
"RTN","DGENUPL1",271,0)
 S ^TMP("HLS",$J,1)=HLRES
"RTN","DGENUPL1",272,0)
 ;
"RTN","DGENUPL1",273,0)
 ;it seems HLFS sometimes disappears upon reaching this point
"RTN","DGENUPL1",274,0)
 I $G(HLFS)="" S HLFS="^"
"RTN","DGENUPL1",275,0)
 ;
"RTN","DGENUPL1",276,0)
 S ^TMP("HLS",$J,2)="MSA"_HLFS_"AA"_HLFS_MSGID
"RTN","DGENUPL1",277,0)
 Q
"RTN","DGENUPL1",278,0)
 ;
"RTN","DGENUPL1",279,0)
MVERRORS ;
"RTN","DGENUPL1",280,0)
 ;Error messages were being deleted from ^TMP("HLS",$J by another package
"RTN","DGENUPL1",281,0)
 ;during the upload.  To fix this, errors are written to another
"RTN","DGENUPL1",282,0)
 ;subscript, then moved when the error list is complete.
"RTN","DGENUPL1",283,0)
 ;
"RTN","DGENUPL1",284,0)
 M ^TMP("HLS",$J)=^TMP("IVM","HLS",$J)
"RTN","DGENUPL1",285,0)
 K ^TMP("IVM","HLS",$J)
"RTN","DGENUPL1",286,0)
 Q
"RTN","DGENUPL1",287,0)
 ;
"RTN","DGENUPL1",288,0)
 ;DJS, Added Extrinsic Function to determine if multiple segments are present ; DG*5.3*935
"RTN","DGENUPL1",289,0)
CHKNXT(DGNVAL,DGNSEG) ; Check the SEG in the next segment manually
"RTN","DGENUPL1",290,0)
 ; DGNVAL = CURLINE or CURLINE+1
"RTN","DGENUPL1",291,0)
 ; DGNSEG = SEG (3 character SEG)
"RTN","DGENUPL1",292,0)
 ; Returns 1 if there is a match or 0 if there is no match
"RTN","DGENUPL1",293,0)
 ;
"RTN","DGENUPL1",294,0)
 Q $S($E($G(^TMP($J,IVMRTN,+DGNVAL,0)),1,3)=DGNSEG:1,1:0)
"RTN","DGENUPL3")
0^32^B158219236
"RTN","DGENUPL3",1,0)
DGENUPL3 ;ALB/CJM,ISA,KWP,AEG,BRM,ERC,CKN,BAJ,PHH,TDM,LBD,DJS,KUM,JAM,HM - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ;12 June 2018  5:35PM
"RTN","DGENUPL3",2,0)
 ;;5.3;REGISTRATION;**147,230,232,377,404,451,653,688,793,797,841,928,935,947,966,972**;Aug 13,1993;Build 80
"RTN","DGENUPL3",3,0)
 ;
"RTN","DGENUPL3",4,0)
 ;
"RTN","DGENUPL3",5,0)
ADDMSG(MSGS,MESSAGE,TOHEC) ;
"RTN","DGENUPL3",6,0)
 ;Description: Used to add a message to an array of messages to be sent.
"RTN","DGENUPL3",7,0)
 ;
"RTN","DGENUPL3",8,0)
 ;Input:
"RTN","DGENUPL3",9,0)
 ;  MSGS - the array to store the message (pass by reference)
"RTN","DGENUPL3",10,0)
 ;  MESSAGE - the message to store
"RTN","DGENUPL3",11,0)
 ;  TOHEC - a flag, if set to 1 it means that HEC should also receive notification
"RTN","DGENUPL3",12,0)
 ;
"RTN","DGENUPL3",13,0)
 ;Output: none
"RTN","DGENUPL3",14,0)
 ;
"RTN","DGENUPL3",15,0)
 I MESSAGE["DATE OF DEATH" Q
"RTN","DGENUPL3",16,0)
 S MSGS(0)=($G(MSGS(0))+1)
"RTN","DGENUPL3",17,0)
 S MSGS(MSGS(0))=MESSAGE
"RTN","DGENUPL3",18,0)
 I ($G(TOHEC)=1) S MSGS("HEC")=1
"RTN","DGENUPL3",19,0)
 Q
"RTN","DGENUPL3",20,0)
 ;
"RTN","DGENUPL3",21,0)
 ;
"RTN","DGENUPL3",22,0)
NOTIFY(DGPAT,MSGS) ;
"RTN","DGENUPL3",23,0)
 ;Description: This is used to send a message to the local mail group
"RTN","DGENUPL3",24,0)
 ;defined by the MAS Parameter ELIGIBILITY UPLOAD MAIL GROUP.The
"RTN","DGENUPL3",25,0)
 ;notification is to be used when specific problems or conditions
"RTN","DGENUPL3",26,0)
 ;regarding the upload of the enrollment or eligibility data.
"RTN","DGENUPL3",27,0)
 ;
"RTN","DGENUPL3",28,0)
 ;Input: 
"RTN","DGENUPL3",29,0)
 ;  OLDPAT -used if the DGPAT elements have not been built
"RTN","DGENUPL3",30,0)
 ;  DGPAT - patient array (pass by reference)
"RTN","DGENUPL3",31,0)
 ;  MSGS - the an array of messages that should be included in the
"RTN","DGENUPL3",32,0)
 ;         notification (pass by reference). If MSGS("HEC")=1
"RTN","DGENUPL3",33,0)
 ;         it means that HEC should also receive notification.
"RTN","DGENUPL3",34,0)
 ;
"RTN","DGENUPL3",35,0)
 ;Output:   none
"RTN","DGENUPL3",36,0)
 ;
"RTN","DGENUPL3",37,0)
 N TEXT,XMDUZ,XMTEXT,XMSUB,XMSTRIP,XMROU,XMY,XMZ,XMDF,COUNT
"RTN","DGENUPL3",38,0)
 N HEADER,NSC,POW,TMPSTR,MAILGRP,ELIG,CD,DGFDD
"RTN","DGENUPL3",39,0)
 ;
"RTN","DGENUPL3",40,0)
 ;if there are no alerts, then quit
"RTN","DGENUPL3",41,0)
 Q:'$G(MSGS(0))
"RTN","DGENUPL3",42,0)
 ;
"RTN","DGENUPL3",43,0)
 ;Get reason for alert.  If there is more than one reason decide which 
"RTN","DGENUPL3",44,0)
 ;reason to display.  'NON-SERVICE' alerts have a higher priority than
"RTN","DGENUPL3",45,0)
 ;other alerts and are therefore displayed before other alerts in the 
"RTN","DGENUPL3",46,0)
 ;subject line, followed by 'POW' alerts in priority.
"RTN","DGENUPL3",47,0)
 S (ELIG,NSC,POW,CD)=0
"RTN","DGENUPL3",48,0)
 S COUNT=0 F  S COUNT=$O(MSGS(COUNT)) Q:'COUNT!NSC  D
"RTN","DGENUPL3",49,0)
 .I MSGS(COUNT)["PREVIOUSLY ELIGIBLE" S ELIG=1 Q
"RTN","DGENUPL3",50,0)
 .I MSGS(COUNT)["NON-SERVICE" S NSC=1 Q
"RTN","DGENUPL3",51,0)
 .I MSGS(COUNT)["POW" S POW=1 Q
"RTN","DGENUPL3",52,0)
 .I MSGS(COUNT)["CD EVALUATION" S CD=1 Q
"RTN","DGENUPL3",53,0)
 .S HEADER=MSGS(COUNT)
"RTN","DGENUPL3",54,0)
 .Q
"RTN","DGENUPL3",55,0)
 D
"RTN","DGENUPL3",56,0)
 .I ELIG S HEADER="Ineligibility Alert: " Q
"RTN","DGENUPL3",57,0)
 .I NSC S HEADER="NSC Alert: " Q
"RTN","DGENUPL3",58,0)
 .I POW&'NSC S HEADER="POW Alert: " Q
"RTN","DGENUPL3",59,0)
 .I CD S HEADER="CD Alert: " Q
"RTN","DGENUPL3",60,0)
 .Q
"RTN","DGENUPL3",61,0)
 ;
"RTN","DGENUPL3",62,0)
 S XMDF=""
"RTN","DGENUPL3",63,0)
 S (XMDUN,XMDUZ)="Registration Enrollment Module"
"RTN","DGENUPL3",64,0)
 ;Phase II Re-Enrollment
"RTN","DGENUPL3",65,0)
 ;DGPAT("SSN") is built by the parser.  DGPAT("NAME"),DGPAT("SEX"),DGPAT("DOB")(are merged into DGPAT from OLDPAT.
"RTN","DGENUPL3",66,0)
 ;The checks below are to setup the DGPAT elements from OLDPAT if NOTIFY is called before the merge. 
"RTN","DGENUPL3",67,0)
 I '$D(DGPAT("NAME")) S DGPAT("NAME")=$G(OLDPAT("NAME"))
"RTN","DGENUPL3",68,0)
 I '$D(DGPAT("SEX")) S DGPAT("SEX")=$G(OLDPAT("SEX"))
"RTN","DGENUPL3",69,0)
 I '$D(DGPAT("DOB")) S DGPAT("DOB")=$G(OLDPAT("DOB"))
"RTN","DGENUPL3",70,0)
 S TMPSTR=" ("_$E(DGPAT("NAME"),1,1)
"RTN","DGENUPL3",71,0)
 S TMPSTR=TMPSTR_$E(DGPAT("SSN"),$L(DGPAT("SSN"))-3,1000)_")"
"RTN","DGENUPL3",72,0)
 S XMSUB=$E(HEADER,1,30)_$E(DGPAT("NAME"),1,25)_TMPSTR
"RTN","DGENUPL3",73,0)
 ;
"RTN","DGENUPL3",74,0)
 ; send msg to local mail group specified in IVM SITE PARAMETER file
"RTN","DGENUPL3",75,0)
 S MAILGRP=+$P($G(^IVM(301.9,1,0)),"^",9)
"RTN","DGENUPL3",76,0)
 S MAILGRP=$$EXTERNAL^DILFD(301.9,.09,"F",MAILGRP)
"RTN","DGENUPL3",77,0)
 I MAILGRP]"" S XMY("G."_MAILGRP)=""
"RTN","DGENUPL3",78,0)
 ;
"RTN","DGENUPL3",79,0)
 ;Patch DG*5.3*928 is removing ability to send emails to remote email group. Emails have been decommissioned and no longer required.
"RTN","DGENUPL3",80,0)
 ;if flag is set, send msg to remote mail group specified in
"RTN","DGENUPL3",81,0)
 ;the IVM SITE PARAMETER file
"RTN","DGENUPL3",82,0)
 ;I $G(MSGS("HEC"))=1 D
"RTN","DGENUPL3",83,0)
 ;.S MAILGRP=$P($G(^IVM(301.9,1,0)),"^",10)
"RTN","DGENUPL3",84,0)
 ;.S MAILGRP=$$EXTERNAL^DILFD(301.9,.10,"F",MAILGRP)
"RTN","DGENUPL3",85,0)
 ;.I MAILGRP]"" S XMY("G."_MAILGRP)=""
"RTN","DGENUPL3",86,0)
 ;
"RTN","DGENUPL3",87,0)
 ;
"RTN","DGENUPL3",88,0)
 S XMTEXT="TEXT("
"RTN","DGENUPL3",89,0)
 S TEXT(1)="The enrollment/eligibility upload produced the following alerts:"
"RTN","DGENUPL3",90,0)
 S TEXT(2)="  "
"RTN","DGENUPL3",91,0)
 S TEXT(3)="Patient Name   :     "_DGPAT("NAME")
"RTN","DGENUPL3",92,0)
 S TEXT(4)="SSN            :     "_DGPAT("SSN")
"RTN","DGENUPL3",93,0)
 S TEXT(5)="DOB            :     "_$$EXTERNAL^DILFD(2,$$FIELD^DGENPTA1("DOB"),"F",DGPAT("DOB"))
"RTN","DGENUPL3",94,0)
 S TEXT(6)="SEX            :     "_$$EXTERNAL^DILFD(2,$$FIELD^DGENPTA1("SEX"),"F",DGPAT("SEX"))
"RTN","DGENUPL3",95,0)
 S TEXT(7)=" "
"RTN","DGENUPL3",96,0)
 ;
"RTN","DGENUPL3",97,0)
 S TEXT(8)=" ** Alerts **"
"RTN","DGENUPL3",98,0)
 S TEXT(9)=" "
"RTN","DGENUPL3",99,0)
 S COUNT=0 F  S COUNT=$O(MSGS(COUNT)) Q:'COUNT  S TEXT(10+COUNT)=COUNT_") "_MSGS(COUNT)
"RTN","DGENUPL3",100,0)
 ;
"RTN","DGENUPL3",101,0)
 D ^XMD
"RTN","DGENUPL3",102,0)
 Q
"RTN","DGENUPL3",103,0)
 ;
"RTN","DGENUPL3",104,0)
BEGUPLD(DFN) ;
"RTN","DGENUPL3",105,0)
 ;Description: Sets a lock used to determine if an eligibility/enrollment
"RTN","DGENUPL3",106,0)
 ;upload is in progress. 
"RTN","DGENUPL3",107,0)
 ;
"RTN","DGENUPL3",108,0)
 ;Input:
"RTN","DGENUPL3",109,0)
 ;   DFN - ien, Patient record
"RTN","DGENUPL3",110,0)
 ;
"RTN","DGENUPL3",111,0)
 ;Output:
"RTN","DGENUPL3",112,0)
 ;  Function value - returns 1 if the lock was obtained, 0 otherwise.
"RTN","DGENUPL3",113,0)
 ;
"RTN","DGENUPL3",114,0)
 Q:'$G(DFN) 1
"RTN","DGENUPL3",115,0)
 L +^DGEN("ELIGIBILITY UPLOAD",DFN):3
"RTN","DGENUPL3",116,0)
 Q $T
"RTN","DGENUPL3",117,0)
 ;
"RTN","DGENUPL3",118,0)
ENDUPLD(DFN) ;
"RTN","DGENUPL3",119,0)
 ;Description: Releases the lock obtained by calling $$BEGUPLD(DFN)
"RTN","DGENUPL3",120,0)
 ;
"RTN","DGENUPL3",121,0)
 Q:'$G(DFN)
"RTN","DGENUPL3",122,0)
 L -^DGEN("ELIGIBILITY UPLOAD",DFN)
"RTN","DGENUPL3",123,0)
 Q
"RTN","DGENUPL3",124,0)
 ;
"RTN","DGENUPL3",125,0)
CKUPLOAD(DFN) ;
"RTN","DGENUPL3",126,0)
 ;Description: Checks if an upload is in progress.  If so, it pauses
"RTN","DGENUPL3",127,0)
 ;until it is completed.
"RTN","DGENUPL3",128,0)
 ;The enrollment/eligibility upload can take a while to accomplish.
"RTN","DGENUPL3",129,0)
 ;If the lock is not obtained initially, it is assumed that the upload
"RTN","DGENUPL3",130,0)
 ;is in progress, and a message is displayed to the user.
"RTN","DGENUPL3",131,0)
 ;
"RTN","DGENUPL3",132,0)
 ;Input: DFN
"RTN","DGENUPL3",133,0)
 ;Output: none
"RTN","DGENUPL3",134,0)
 ;
"RTN","DGENUPL3",135,0)
 N I
"RTN","DGENUPL3",136,0)
 I '$$BEGUPLD(DFN) D
"RTN","DGENUPL3",137,0)
 .W !!,"Upload of patient enrollment/eligibility data is in progress ..."
"RTN","DGENUPL3",138,0)
 .D UNLOCK^DGENPTA1(DFN)
"RTN","DGENUPL3",139,0)
 .F I=1:1:50 Q:$$BEGUPLD(DFN)  W "."
"RTN","DGENUPL3",140,0)
 .W !,"Upload of patient enrollment/eligibility data is completed.",!
"RTN","DGENUPL3",141,0)
 D ENDUPLD(DFN)
"RTN","DGENUPL3",142,0)
 Q
"RTN","DGENUPL3",143,0)
SCVET ;moved from DGENUPL4 - DG*5.3*688
"RTN","DGENUPL3",144,0)
 I DGPAT3("VETERAN")'="N" D
"RTN","DGENUPL3",145,0)
 . I DGELG3("SC")="N" S DGPAT3("VETERAN")="Y",DGPAT3("PATYPE")=$O(^DG(391,"B","NSC VETERAN",0))
"RTN","DGENUPL3",146,0)
 . I DGELG3("SC")="Y" S DGPAT3("VETERAN")="Y",DGPAT3("PATYPE")=$O(^DG(391,"B","SC VETERAN",0))
"RTN","DGENUPL3",147,0)
 I DGPAT3("VETERAN")="N" S DGPAT3("PATYPE")=$$NONVET(DGELG("ELIG","CODE"))
"RTN","DGENUPL3",148,0)
 Q
"RTN","DGENUPL3",149,0)
 ;
"RTN","DGENUPL3",150,0)
NONVET(DGCODE) ;map Patient Type from Primary Elig (and POS)
"RTN","DGENUPL3",151,0)
 ;added with DG*5.3*688 - ERC
"RTN","DGENUPL3",152,0)
 ; input:         DGCODE is the Primary Eligibility code
"RTN","DGENUPL3",153,0)
 ; output:        DGTPYE is returned as the value for Patient Type
"RTN","DGENUPL3",154,0)
 N PTELG,DGTYPE
"RTN","DGENUPL3",155,0)
 S (PTELG,DGTYPE)=""
"RTN","DGENUPL3",156,0)
 Q:$G(DGCODE)']"" ""
"RTN","DGENUPL3",157,0)
 S PTELG=$$NATNAME^DGENELA(DGCODE)
"RTN","DGENUPL3",158,0)
 Q:$G(PTELG)']"" ""
"RTN","DGENUPL3",159,0)
 I "CHAMPVA^OTHER FEDERAL AGENCY^REIMBURSABLE INSURANCE^SHARING AGREEMENT"[PTELG S DGTYPE=$$POS(.DGTYPE) Q:DGTYPE DGTYPE
"RTN","DGENUPL3",160,0)
 S DGTYPE=$S(PTELG["ALLIED":"ALLIED VETERAN",PTELG["COLLATERAL":"COLLATERAL",PTELG["EMPLOYEE":"EMPLOYEE",PTELG["TRICARE":"TRICARE",1:"")
"RTN","DGENUPL3",161,0)
 I DGTYPE']"" S DGTYPE="NON-VETERAN (OTHER)" ;default Pat Type
"RTN","DGENUPL3",162,0)
 S DGTYPE=$O(^DG(391,"B",DGTYPE,""))
"RTN","DGENUPL3",163,0)
 Q DGTYPE
"RTN","DGENUPL3",164,0)
POS(DGTYPE) ;for these Elig Codes, check POS to determine Patient Type
"RTN","DGENUPL3",165,0)
 S DGPOS=DGELG("POS")
"RTN","DGENUPL3",166,0)
 I $G(DGPOS)']"" Q ""
"RTN","DGENUPL3",167,0)
 I '$D(^DIC(21,DGPOS,0)) Q ""
"RTN","DGENUPL3",168,0)
 S DGPOS=$P(^DIC(21,DGPOS,0),U)
"RTN","DGENUPL3",169,0)
 S DGTYPE=$S(DGPOS["ACTIVE":"ACTIVE DUTY",DGPOS["OPERAT":"ACTIVE DUTY",DGPOS["RETIR":"MILITARY RETIREE",1:"")
"RTN","DGENUPL3",170,0)
 I $G(DGTYPE)]"" S DGTYPE=$O(^DG(391,"B",DGTYPE,""))
"RTN","DGENUPL3",171,0)
 Q DGTYPE
"RTN","DGENUPL3",172,0)
 ;
"RTN","DGENUPL3",173,0)
 ;ZMH code moved here from DGENUPL2 - DG*5.3*653
"RTN","DGENUPL3",174,0)
ZMH ;Purple Heart, POW, OEF/OIF Conflict Loc, Military Service Episodes, Medal of Honor
"RTN","DGENUPL3",175,0)
 ;PROCESS PH, OEF/OIF, MH & POW FROM ZMH
"RTN","DGENUPL3",176,0)
 ;Process Military Service Episodes (SL,SNL,SNNL,MSD) - DG*5.3*797
"RTN","DGENUPL3",177,0)
 ;Process Military Service Episodes (SL,SNL,SNNL,MSD,FDD) - Future Discharge Date Added DG*5.3*935
"RTN","DGENUPL3",178,0)
 ;Process Military Service Episodes (SL,SNL,SNNL,MSD,FDD) - Reason for Early Separation Added DG*5.3*947
"RTN","DGENUPL3",179,0)
 ;Process Military Service Episodes (SL,SNL,SNNL,MSD,FDD) - Separation Reason Code added DG*5.3*966
"RTN","DGENUPL3",180,0)
 ;DJS, Indicate if the ZMH segment exists in this message; DG*5.3*935
"RTN","DGENUPL3",181,0)
 N DGNEW
"RTN","DGENUPL3",182,0)
 S ^TMP($J,"DGENUPL","ZMH",0)=1
"RTN","DGENUPL3",183,0)
 I "^SL^SNL^SNNL^MSD^FDD^"[("^"_SEG(2)_"^") D  Q
"RTN","DGENUPL3",184,0)
 . ;DJS, Store the Future Discharge Date (FDD); DG*5.3*935
"RTN","DGENUPL3",185,0)
 . I SEG(2)="FDD"&($L(SEG(8))<5) S SEG(8)="",I=0 D  Q
"RTN","DGENUPL3",186,0)
 . . ;JAM, FDD is NONEDITABLE in FileMan so this code is modified to directly delete the field; DG*5.3*972
"RTN","DGENUPL3",187,0)
 . . ;S DGNEW=0 F  S I=$O(^DPT(DFN,.3216,I)) Q:I'?.N!($G(I)="")  S DA(1)=DFN,DA=I,DIE="^DPT("_DA(1)_","_.3216_",",DIE(0)="",DR=".08///@" D ^DIE D ID1^DGNOZMH(DFN,I,DGNEW) S I=DA  ;Delete an incomplete MSE ;DG*5.3*935
"RTN","DGENUPL3",188,0)
 . . S DGNEW=0 F  S I=$O(^DPT(DFN,.3216,I)) Q:I'?.N!($G(I)="")  S $P(^DPT(DFN,.3216,I,0),"^",8)="" D ID1^DGNOZMH(DFN,I,DGNEW) ;Delete an incomplete MSE ;DG*5.3*935
"RTN","DGENUPL3",189,0)
 . . K DGNEW Q 
"RTN","DGENUPL3",190,0)
 . N BOS,SN,DIS,SED,SSD,COM,DGFDD,DIE,DA,DR,RES,RESCODE S ERROR=""
"RTN","DGENUPL3",191,0)
 . S BOS=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH)))  ;Service Branch
"RTN","DGENUPL3",192,0)
 . S:BOS]"" BOS=$O(^DIC(23,"B",BOS,""))
"RTN","DGENUPL3",193,0)
 . S SN=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH),2))  ;Service Number
"RTN","DGENUPL3",194,0)
 . S DIS=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH),3))  ;Discharge Type
"RTN","DGENUPL3",195,0)
 . S:DIS]"" DIS=$O(^DIC(25,"B",DIS,""))
"RTN","DGENUPL3",196,0)
 . S SED=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH)),"DATE")  ;Entry Date
"RTN","DGENUPL3",197,0)
 . I 'SED!ERROR D  Q
"RTN","DGENUPL3",198,0)
 . . Q:SEG(2)="FDD"&(SEG(8)="")  D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZMH SEGMENT, SEQ 4, SERVICE ENTRY DATE",.ERRCOUNT)
"RTN","DGENUPL3",199,0)
 . S SSD=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH),2),"DATE")  ;Sep. Date
"RTN","DGENUPL3",200,0)
 . S COM=$$CONVERT^DGENUPL1($P(SEG(5),$E(HLECH)))  ;Service Component
"RTN","DGENUPL3",201,0)
 . ;Add Reason for Early Separation - DG*5.3*947
"RTN","DGENUPL3",202,0)
 . S RES=$$CONVERT^DGENUPL1($P(SEG(9),$E(HLECH)))  ;Reason for Early Separation (free text)
"RTN","DGENUPL3",203,0)
 . ;Add Separation Reason Code (variable is NEW'd above and set into the DGNMSE array below) - DG*5.3*966
"RTN","DGENUPL3",204,0)
 . S RESCODE=$$CONVERT^DGENUPL1($P(SEG(10),$E(HLECH)))  ;Separation Reason Code (3 digit)
"RTN","DGENUPL3",205,0)
 . ;DJS, Create variable DGFDD for storage in Military Service Episode (MSE); DG*5.3*935
"RTN","DGENUPL3",206,0)
 . ;DJS, Create MSE whether or not FDD exists & is a valid date; DG*5.3*935
"RTN","DGENUPL3",207,0)
 . I SEG(2)="FDD" D
"RTN","DGENUPL3",208,0)
 . . S DGFDD=$$CONVERT^DGENUPL1($P(SEG(8),$E(HLECH)),"DATE")
"RTN","DGENUPL3",209,0)
 . . I $$VALID^DGRPDT(.DGFDD)=1 D
"RTN","DGENUPL3",210,0)
 . . .S DGNMSE(-SED)=SED_U_SSD_U_BOS_U_COM_U_SN_U_DIS_U_1_U_DGFDD
"RTN","DGENUPL3",211,0)
 . ;E  S DGNMSE(-SED)=SED_U_SSD_U_BOS_U_COM_U_SN_U_DIS_U_1 
"RTN","DGENUPL3",212,0)
 . E  S DGNMSE(-SED)=SED_U_SSD_U_BOS_U_COM_U_SN_U_DIS_U_1_U_U_RES_U_RESCODE
"RTN","DGENUPL3",213,0)
 ;
"RTN","DGENUPL3",214,0)
 I SEG(2)="PH" D  Q  ;Process Purple Heart from ZMH
"RTN","DGENUPL3",215,0)
 . S DGPAT("PHI")=$P(SEG(3),$E(HLECH))
"RTN","DGENUPL3",216,0)
 . S DGELG("PH")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH)))
"RTN","DGENUPL3",217,0)
 . S DGPAT("PHST")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH),2))
"RTN","DGENUPL3",218,0)
 . S DGPAT("PHRR")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH),3))
"RTN","DGENUPL3",219,0)
 ;
"RTN","DGENUPL3",220,0)
 I SEG(2)="OEIF" D  Q
"RTN","DGENUPL3",221,0)
 . N OEIFLOC
"RTN","DGENUPL3",222,0)
 . S OEIFLOC=$P(SEG(3),$E(HLECH))
"RTN","DGENUPL3",223,0)
 . I OEIFLOC="Conflict Unspecified" Q   ;Ignore these entries
"RTN","DGENUPL3",224,0)
 . I OEIFLOC="Unknown OEF/OIF" S OEIFLOC="UNK"
"RTN","DGENUPL3",225,0)
 . S OEIFLOC=$E(OEIFLOC,1,3)
"RTN","DGENUPL3",226,0)
 . Q:((OEIFLOC'="OIF")&(OEIFLOC'="OEF")&(OEIFLOC'="UNK"))
"RTN","DGENUPL3",227,0)
 . S DGOEIF("COUNT")=$G(DGOEIF("COUNT"))+1
"RTN","DGENUPL3",228,0)
 . S DGOEIF("LOC",DGOEIF("COUNT"))=OEIFLOC
"RTN","DGENUPL3",229,0)
 . S DGOEIF("SITE",DGOEIF("COUNT"))=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH),2),"INSTITUTION")
"RTN","DGENUPL3",230,0)
 . S DGOEIF("FR",DGOEIF("COUNT"))=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH)),"DATE")
"RTN","DGENUPL3",231,0)
 . S DGOEIF("TO",DGOEIF("COUNT"))=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH),2),"DATE")
"RTN","DGENUPL3",232,0)
 . S DGOEIF("LOCK",DGOEIF("COUNT"))=1
"RTN","DGENUPL3",233,0)
 ;
"RTN","DGENUPL3",234,0)
 I SEG(2)="POW" D  ;Process POW from ZMH
"RTN","DGENUPL3",235,0)
 . S DGPAT("POWI")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH))) ;POW STATUS INDICATED
"RTN","DGENUPL3",236,0)
 . S DGELG("POW")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH)))
"RTN","DGENUPL3",237,0)
 . S DGPAT("POWLOC")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH),2))
"RTN","DGENUPL3",238,0)
 . I DGPAT("POWLOC")'="@" S DGPAT("POWLOC")=$$POWLOC(DGPAT("POWLOC"),.ERROR) ;POW CONFINEMENT LOCATION
"RTN","DGENUPL3",239,0)
 . I ERROR D  Q
"RTN","DGENUPL3",240,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZMH SEGMENT, SEQ 3, POW CONFINEMENT LOCATION",.ERRCOUNT)
"RTN","DGENUPL3",241,0)
 . S DGPAT("POWFDT")=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH)),"DATE",.ERROR) ;POW FROM DATE
"RTN","DGENUPL3",242,0)
 . I ERROR D  Q
"RTN","DGENUPL3",243,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZMH SEGMENT, SEQ 4, POW FROM DATE",.ERRCOUNT)
"RTN","DGENUPL3",244,0)
 . S DGPAT("POWTDT")=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH),2),"DATE",.ERROR) ;POW TO DATE
"RTN","DGENUPL3",245,0)
 . I ERROR D  Q
"RTN","DGENUPL3",246,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZMH SEGMENT, SEQ 4, POW TO DATE",.ERRCOUNT)
"RTN","DGENUPL3",247,0)
 ;
"RTN","DGENUPL3",248,0)
 I SEG(2)="MH" D  ;Process Medal of Honor from ZMH
"RTN","DGENUPL3",249,0)
 . N TODAY,Y,DGVDOB,DGLEGDT,DGERRMSG,VAEL
"RTN","DGENUPL3",250,0)
 . S DGPAT("MOH")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH))) ;MH STATUS INDICATED
"RTN","DGENUPL3",251,0)
 . ;MOH DG*5.3*972 HM changes start here
"RTN","DGENUPL3",252,0)
 . S DGELG("MOH")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH)))
"RTN","DGENUPL3",253,0)
 . I DGELG("MOH")="Y" D
"RTN","DGENUPL3",254,0)
 . . I $G(DGPAT("VETERAN"))="Y" Q  ;CHECK IF VETERAN FROM ZEL SEGMENT
"RTN","DGENUPL3",255,0)
 . . I $G(DGPAT("VETERAN"))="N" S ERROR=1 Q  ;IF NOT VETERAN SET ERROR
"RTN","DGENUPL3",256,0)
 . . D ELIG^VADPT I $G(VAEL(4))'=1 S ERROR=1 ;IF CANNOT DETERMINE VETERAN STATUS CALL ELIG^VADPT TO GET STATUS FROM DB, IF NON VETERAN SET ERROR
"RTN","DGENUPL3",257,0)
 . I ERROR D  Q
"RTN","DGENUPL3",258,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZMH SEGMENT, SEQ 3, NON VETERAN INELIGIBLE FOR MEDAL OF HONOR",.ERRCOUNT)
"RTN","DGENUPL3",259,0)
 . S DGPAT("MOHAWRDDATE")=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH),1),"DATE",.ERROR)
"RTN","DGENUPL3",260,0)
 . S DGELG("MOHAWRDDATE")=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH),1),"DATE",.ERROR)
"RTN","DGENUPL3",261,0)
 . I DGPAT("MOH")="N",DGPAT("MOHAWRDDATE")="""" S ERROR=0 ;NO ERROR IF AWARD DATE IS EMPTY STRING
"RTN","DGENUPL3",262,0)
 . I DGPAT("MOH")="N" S DGPAT("MOHAWRDDATE")="",DGELG("MOHAWRDDATE")="" ;IF MOH = 'N' SET AWARD DATE TO NULL
"RTN","DGENUPL3",263,0)
 . S DGLEGDT=3161216 ;MOH LEGISLATION DATE 2016/12/16
"RTN","DGENUPL3",264,0)
 . I $G(DGPAT("MOHAWRDDATE")) D  ;MH AWARD DATE
"RTN","DGENUPL3",265,0)
 . . I DGPAT("MOHAWRDDATE")>DT S ERROR=1
"RTN","DGENUPL3",266,0)
 . . S DGERRMSG="BAD VALUE, ZMH SEGMENT, SEQ 4, MH AWARD DATE IS IN THE FUTURE" ;IF AWARD DATE IS IN FUTURE
"RTN","DGENUPL3",267,0)
 . . S DGVDOB=$P(^DPT(+DFN,0),"^",3)
"RTN","DGENUPL3",268,0)
 . . I DGPAT("MOHAWRDDATE")-DGVDOB<150000 S ERROR=1,DGERRMSG="BAD VALUE, ZMH SEGMENT, SEQ 4, MH AWARD DATE BEFORE BIRTH DATE" ;IF AWARD DATE IS LESS THE DOB + 15 YEARS ;MH AWARD DATE
"RTN","DGENUPL3",269,0)
 . I ERROR D  Q
"RTN","DGENUPL3",270,0)
 . . S DGPAT("MOHAWRDDATE")="" ;IF AWARD FAILS VALIDATION SE TO "" ;MH AWARD DATE
"RTN","DGENUPL3",271,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),DGERRMSG,.ERRCOUNT) ;MH AWARD DATE
"RTN","DGENUPL3",272,0)
 . S DGPAT("MOHSTATDATE")=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH),2),"DATE",.ERROR) ;MH STATUS DATE
"RTN","DGENUPL3",273,0)
 . S DGELG("MOHSTATDATE")=$$CONVERT^DGENUPL1($P(SEG(4),$E(HLECH),2),"DATE",.ERROR) ;MH STATUS DATE
"RTN","DGENUPL3",274,0)
 . I DGPAT("MOH")="N",DGPAT("MOHSTATDATE")="""" S ERROR=0,DGPAT("MOHSTATDATE")="" ;NO ERROR IF AWARD DATE IS EMPTY STRING
"RTN","DGENUPL3",275,0)
 . I DGPAT("MOH")="N",DGPAT("MOHSTATDATE")="" S DGPAT("MOHSTATDATE")=DT,DGELG("MOHSTATDATE")=DT ;IF MOH IS "N' AND STATUS IS NULL SET STATUS DATE TO TODAY
"RTN","DGENUPL3",276,0)
 . I ERROR D  Q
"RTN","DGENUPL3",277,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZMH SEGMENT, SEQ 4, MH STATUS DATE MISSING",.ERRCOUNT)
"RTN","DGENUPL3",278,0)
 . I DGPAT("MOH")="N" S DGPAT("MOHEXEMPDATE")="",DGELG("MOHEXEMPDATE")=""
"RTN","DGENUPL3",279,0)
 . I $G(DGPAT("MOHAWRDDATE")) D
"RTN","DGENUPL3",280,0)
 . . I DGPAT("MOHAWRDDATE")<DGLEGDT S DGPAT("MOHEXEMPDATE")=DGLEGDT,DGELG("MOHEXEMPDATE")=DGLEGDT
"RTN","DGENUPL3",281,0)
 . . I DGPAT("MOHAWRDDATE")=DGLEGDT S DGPAT("MOHEXEMPDATE")=DGPAT("MOHAWRDDATE"),DGELG("MOHEXEMPDATE")=DGPAT("MOHAWRDDATE")
"RTN","DGENUPL3",282,0)
 . . I DGPAT("MOHAWRDDATE")>DGLEGDT S DGPAT("MOHEXEMPDATE")=DGPAT("MOHAWRDDATE"),DGELG("MOHEXEMPDATE")=DGPAT("MOHAWRDDATE")
"RTN","DGENUPL3",283,0)
 . ;MOH DG*5.3*972 HM changes end here
"RTN","DGENUPL3",284,0)
 Q
"RTN","DGENUPL3",285,0)
POWLOC(LOC,ERROR) ;POW Confinement Location mapping with HL7 table VA023
"RTN","DGENUPL3",286,0)
 ;  Input: LOC - HL7 code for location
"RTN","DGENUPL3",287,0)
 ; Output: ERROR - Return error 1 on failure
"RTN","DGENUPL3",288,0)
 ;         IEN22 - IEN of file 22
"RTN","DGENUPL3",289,0)
 N TBL023
"RTN","DGENUPL3",290,0)
 S ERROR=0
"RTN","DGENUPL3",291,0)
 I LOC="" S ERROR=1 Q ""
"RTN","DGENUPL3",292,0)
 S TBL023(4)="WWI",TBL023(5)="WWII-EUROPE",TBL023(6)="WWII-PACIFIC"
"RTN","DGENUPL3",293,0)
 S TBL023(7)="KOREAN",TBL023(8)="VIETNAM",TBL023(9)="OTHER"
"RTN","DGENUPL3",294,0)
 S TBL023("A")="PERSIAN GULF",TBL023("B")="YUGOSLAVIA"
"RTN","DGENUPL3",295,0)
 S IEN22=$O(^DIC(22,"C",TBL023(LOC),""))
"RTN","DGENUPL3",296,0)
 I IEN22="" S ERROR=1
"RTN","DGENUPL3",297,0)
 Q IEN22
"RTN","DGENUPL3",298,0)
 ;
"RTN","DGENUPL4")
0^9^B96907495
"RTN","DGENUPL4",1,0)
DGENUPL4 ;ALB/CJM,RTK,ISA/KWP,ISD/GSN,PHH,RGL,PJR,BRM,TDM,TMK,EG,BAJ,HM - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ;6/28/11 4:36pm
"RTN","DGENUPL4",2,0)
 ;;5.3;REGISTRATION;**147,177,232,253,327,367,377,514,451,625,673,708,688,841,842,972**;Aug 13,1993;Build 80
"RTN","DGENUPL4",3,0)
 ;
"RTN","DGENUPL4",4,0)
UOBJECTS(DFN,DGPAT,DGELG,DGCDIS,DGOEIF,MSGID,ERRCOUNT,MSGS,OLDPAT,OLDELG,OLDCDIS,OLDOEIF) ;
"RTN","DGENUPL4",5,0)
 ;Used to update PATIENT, ELIGIBILITY, CATASTROPHIC
"RTN","DGENUPL4",6,0)
 ;DISABILITY, and OEF/OIF CONFLICT objects 'in memory'.
"RTN","DGENUPL4",7,0)
 ;
"RTN","DGENUPL4",8,0)
 ;Input:
"RTN","DGENUPL4",9,0)
 ;  DFN - ien of record in the PATIENT file
"RTN","DGENUPL4",10,0)
 ;  DGPAT - PATIENT object array (pass by reference)
"RTN","DGENUPL4",11,0)
 ;  DGELG - ELIGIBILITY object array (pass by ref)
"RTN","DGENUPL4",12,0)
 ;  DGCDIS - CATASTROPHIC DISABILITY object array (pass by ref)
"RTN","DGENUPL4",13,0)
 ;  DGOEIF - OEF/OIF conflict object array (pass by ref)
"RTN","DGENUPL4",14,0)
 ;  MSGID - message control id of the HL7 message being processed
"RTN","DGENUPL4",15,0)
 ;  ERRCOUNT - count of errors (pass by ref)
"RTN","DGENUPL4",16,0)
 ;  MSGS - array of messages for the site (pass by ref)
"RTN","DGENUPL4",17,0)
 ;
"RTN","DGENUPL4",18,0)
 ;Output:
"RTN","DGENUPL4",19,0)
 ;  Function Value: 1 if update was successful 'in memory',
"RTN","DGENUPL4",20,0)
 ;           consistency checks pass and the objects can be stored in
"RTN","DGENUPL4",21,0)
 ;           the local database, 0 otherwise.
"RTN","DGENUPL4",22,0)
 ;  DGPAT - PATIENT object array (pass by reference)
"RTN","DGENUPL4",23,0)
 ;  DGELG - ELIGIBILITY object array (pass by ref)
"RTN","DGENUPL4",24,0)
 ;  DGCDIS - CATASTROPHIC DISABILITY object array (pass by ref)
"RTN","DGENUPL4",25,0)
 ;  ERRCOUNT - count of errors (pass by ref)
"RTN","DGENUPL4",26,0)
 ;  MSGS - array of messages for the site (pass by ref)
"RTN","DGENUPL4",27,0)
 ;  OLDPAT - patient object array as it currently exists in database before the update (pass by ref)
"RTN","DGENUPL4",28,0)
 ;  OLDELG - eligibility object array as it currently exists in database before the update (pass by ref)
"RTN","DGENUPL4",29,0)
 ;  OLDCDIS - catastrophically disability object array as it currently exists in database before the update (pass by ref)
"RTN","DGENUPL4",30,0)
 ;  OLDOEIF - OEF/OIF conflict data as it currently exists in database before the update (pass by ref)
"RTN","DGENUPL4",31,0)
 ;
"RTN","DGENUPL4",32,0)
 N DGPAT3,DGELG3,DGCDIS3,SUCCESS
"RTN","DGENUPL4",33,0)
 S SUCCESS=1
"RTN","DGENUPL4",34,0)
 D
"RTN","DGENUPL4",35,0)
 .;first get local site's current data
"RTN","DGENUPL4",36,0)
 .I ('$$GET^DGENPTA(DFN,.OLDPAT))!('$$GET^DGENELA(DFN,.OLDELG))!('$$GET^DGENCDA(DFN,.OLDCDIS))!('$P($$GET^DGENOEIF(DFN,.OLDOEIF,0),U,2)) D  Q
"RTN","DGENUPL4",37,0)
 ..D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),"UNABLE TO ACCESS PATIENT RECORD",.ERRCOUNT)
"RTN","DGENUPL4",38,0)
 ..S SUCCESS=0
"RTN","DGENUPL4",39,0)
 .;
"RTN","DGENUPL4",40,0)
 .;Phase II CD Consistency Checks (SRS 6.5.1.4) check VISTA against HEC
"RTN","DGENUPL4",41,0)
 .S SUCCESS=$$CDCHECK^DGENUPL9()
"RTN","DGENUPL4",42,0)
 .Q:'SUCCESS
"RTN","DGENUPL4",43,0)
 .;
"RTN","DGENUPL4",44,0)
 .;If no 'MH' ZMH segment or Z11 value is null delete VistA value.
"RTN","DGENUPL4",45,0)
 .I ($G(DGPAT("MOH"))="")&($G(OLDPAT("MOH"))'="") S DGPAT("MOH")="@",DGPAT("MOHAWRDDATE")="@",DGPAT("MOHSTATDATE")="@",DGPAT("MOHEXEMPDATE")="@" ;DG*5.3*972 HM
"RTN","DGENUPL4",46,0)
 .I ($G(DGELG("MOH"))="")&($G(OLDELG("MOH"))'="") S DGELG("MOH")="@",DGELG("MOHAWRDDATE")="@",DGELG("MOHSTATDATE")="@",DGELG("MOHEXEMPDATE")="@" ;DG*5.3*972 HM
"RTN","DGENUPL4",47,0)
 .I ($G(DGPAT("MOH"))="N")&($G(OLDPAT("MOH"))'="") S DGPAT("MOH")="N",DGPAT("MOHAWRDDATE")="@",DGPAT("MOHEXEMPDATE")="@" ;DG*5.3*972 HM
"RTN","DGENUPL4",48,0)
 .I ($G(DGELG("MOH"))="N")&($G(OLDELG("MOH"))'="") S DGELG("MOH")="N",DGELG("MOHAWRDDATE")="@",DGELG("MOHEXEMPDATE")="@" ;DG*5.3*972 HM
"RTN","DGENUPL4",49,0)
 .I ($G(DGPAT("MOH"))="N")&($G(OLDPAT("MOH"))="") S DGPAT("MOH")="N",DGPAT("MOHAWRDDATE")="@",DGPAT("MOHEXEMPDATE")="@" ;DG*5.3*972 HM
"RTN","DGENUPL4",50,0)
 .I ($G(DGELG("MOH"))="N")&($G(OLDELG("MOH"))="") S DGELG("MOH")="N",DGELG("MOHAWRDDATE")="@",DGELG("MOHEXEMPDATE")="@" ;DG*5.3*972 HM
"RTN","DGENUPL4",51,0)
 .I ($G(DGPAT("MOH"))="Y")&($G(DGPAT("MOHAWRDDATE"))="") S DGPAT("MOHAWRDDATE")="@",DGPAT("MOHEXEMPDATE")="@" ;DG*5.3*972 HM
"RTN","DGENUPL4",52,0)
 .I ($G(DGELG("MOH"))="Y")&($G(DGELG("MOHAWRDDATE"))="") S DGELG("MOHAWRDDATE")="@",DGELG("MOHEXEMPDATE")="@" ;DG*5.3*972 HM
"RTN","DGENUPL4",53,0)
 .;
"RTN","DGENUPL4",54,0)
 .; Don't upload Pension data if site Pension Reason='Original Award'
"RTN","DGENUPL4",55,0)
 .; & Site Pension Effective Date <= the Z11 Pension Effective Date
"RTN","DGENUPL4",56,0)
 .; & the Z11 does not contain a Termination Date.
"RTN","DGENUPL4",57,0)
 .I +$G(OLDPAT("PENAREAS")),$P($G(^DG(27.18,OLDPAT("PENAREAS"),0)),U,2)="00" D
"RTN","DGENUPL4",58,0)
 ..I (OLDPAT("PENAEFDT")<($G(DGPAT("PENAEFDT"))+1)),($G(DGPAT("PENTRMDT"))<1) D
"RTN","DGENUPL4",59,0)
 ...N SUB F SUB="PENAEFDT","PENTRMDT","PENAREAS","PENTRMR1","PENTRMR2","PENTRMR3","PENTRMR4","PILOCK","PALOCK" S DGPAT(SUB)=""
"RTN","DGENUPL4",60,0)
 .;
"RTN","DGENUPL4",61,0)
 .;If Z11 Pension fields are set, initialize VistA Lock fields to "@"
"RTN","DGENUPL4",62,0)
 .N SUB F SUB="PENAEFDT","PENTRMDT","PENAREAS","PENTRMR1","PENTRMR2","PENTRMR3","PENTRMR4" I $G(DGPAT(SUB))'="" D
"RTN","DGENUPL4",63,0)
 ..S:(OLDPAT("PILOCK")'="") DGPAT("PILOCK")="@"
"RTN","DGENUPL4",64,0)
 ..S:(OLDPAT("PALOCK")'="") DGPAT("PALOCK")="@"
"RTN","DGENUPL4",65,0)
 .;
"RTN","DGENUPL4",66,0)
 .;If Z11 RECEIVING A VA PENSION? not null, Pension Indicator Lock=Y
"RTN","DGENUPL4",67,0)
 .;If Z11 RECEIVING A VA PENSION? deletion, Pension Indicator Lock=@
"RTN","DGENUPL4",68,0)
 .S:DGELG("VAPEN")'="" DGPAT("PILOCK")="Y"
"RTN","DGENUPL4",69,0)
 .S:DGELG("VAPEN")="@" DGPAT("PILOCK")="@"
"RTN","DGENUPL4",70,0)
 .;
"RTN","DGENUPL4",71,0)
 .;If any Z11 Pension fields populated, Pension Indicator Lock=Y
"RTN","DGENUPL4",72,0)
 .N SUB F SUB="PENAEFDT","PENTRMDT","PENAREAS","PENTRMR1","PENTRMR2","PENTRMR3","PENTRMR4" I $G(DGPAT(SUB))'="",$G(DGPAT(SUB))'="@" S DGPAT("PILOCK")="Y"
"RTN","DGENUPL4",73,0)
 .;
"RTN","DGENUPL4",74,0)
 .;If Z11 Pension Termination Reason received, Pension Award Lock=Y
"RTN","DGENUPL4",75,0)
 .N SUB F SUB="PENTRMR1","PENTRMR2","PENTRMR3","PENTRMR4" I $G(DGPAT(SUB))'="",$G(DGPAT(SUB))'="@" S DGPAT("PALOCK")="Y"
"RTN","DGENUPL4",76,0)
 .;
"RTN","DGENUPL4",77,0)
 .;If Z11 Pension Award Reason='Original Award', Pension Award Lock=Y
"RTN","DGENUPL4",78,0)
 .I +$G(DGPAT("PENAREAS")),$P($G(^DG(27.18,DGPAT("PENAREAS"),0)),U,2)="00" S DGPAT("PALOCK")="Y"
"RTN","DGENUPL4",79,0)
 .;
"RTN","DGENUPL4",80,0)
 .;now merge with the update
"RTN","DGENUPL4",81,0)
 .D MERGE
"RTN","DGENUPL4",82,0)
 .;
"RTN","DGENUPL4",83,0)
 .;add the assumed values
"RTN","DGENUPL4",84,0)
 .D ADD
"RTN","DGENUPL4",85,0)
 .;
"RTN","DGENUPL4",86,0)
 .;now do the consistency checks
"RTN","DGENUPL4",87,0)
 .S SUCCESS=$$CHECK()
"RTN","DGENUPL4",88,0)
 .Q:'SUCCESS
"RTN","DGENUPL4",89,0)
 .;
"RTN","DGENUPL4",90,0)
 .;replace input arrays with fully updated versions
"RTN","DGENUPL4",91,0)
 .K DGPAT M DGPAT=DGPAT3
"RTN","DGENUPL4",92,0)
 .K DGELG M DGELG=DGELG3
"RTN","DGENUPL4",93,0)
 .K DGCDIS M DGCDIS=DGCDIS3
"RTN","DGENUPL4",94,0)
 ;
"RTN","DGENUPL4",95,0)
 I SUCCESS D
"RTN","DGENUPL4",96,0)
 .;
"RTN","DGENUPL4",97,0)
 .;list of required notifications
"RTN","DGENUPL4",98,0)
 .;
"RTN","DGENUPL4",99,0)
 .;change in date of death
"RTN","DGENUPL4",100,0)
 .I DGPAT("DEATH"),$P(OLDPAT("DEATH"),".")'=$P(DGPAT("DEATH"),".") D
"RTN","DGENUPL4",101,0)
 ..D ADDMSG^DGENUPL3(.MSGS,"HEC SHOWS DATE OF DEATH = "_$$FMTE^XLFDT(DGPAT("DEATH"),"1"),1)
"RTN","DGENUPL4",102,0)
 ..D ADDMSG^DGENUPL3(.MSGS,$S('OLDPAT("DEATH"):"SITE DOES NOT HAVE DATE OF DEATH",1:"SITE HAS DATE OF DEATH = "_$$FMTE^XLFDT(OLDPAT("DEATH"),"1")),1)
"RTN","DGENUPL4",103,0)
 .;
"RTN","DGENUPL4",104,0)
 .I OLDPAT("DEATH"),'DGPAT("DEATH") D
"RTN","DGENUPL4",105,0)
 ..D ADDMSG^DGENUPL3(.MSGS,"HEC SHOWS NO DATE OF DEATH",1)
"RTN","DGENUPL4",106,0)
 ..D ADDMSG^DGENUPL3(.MSGS,"SITE HAS DATE OF DEATH = "_$$FMTE^XLFDT(OLDPAT("DEATH"),"1"),1)
"RTN","DGENUPL4",107,0)
 .;
"RTN","DGENUPL4",108,0)
 .;change in POW
"RTN","DGENUPL4",109,0)
 .I OLDELG("POW")="N",DGELG("POW")="Y" D ADDMSG^DGENUPL3(.MSGS,"POW STATUS CHANGED TO YES")
"RTN","DGENUPL4",110,0)
 .I OLDELG("POW")="Y",DGELG("POW")="N" D ADDMSG^DGENUPL3(.MSGS,"POW STATUS CHANGED TO NO")
"RTN","DGENUPL4",111,0)
 .;
"RTN","DGENUPL4",112,0)
 .;SC to NSC
"RTN","DGENUPL4",113,0)
 .I OLDELG("SC")="Y",DGELG("SC")="N" D ADDMSG^DGENUPL3(.MSGS,"VETERAN CHANGED TO NON-SERVICE CONNECTED",1)
"RTN","DGENUPL4",114,0)
 .;
"RTN","DGENUPL4",115,0)
 .; Change from Eligible to Ineligible
"RTN","DGENUPL4",116,0)
 .I 'OLDPAT("INELDATE"),DGPAT("INELDATE") D ADDMSG^DGENUPL3(.MSGS,"VETERAN PREVIOUSLY ELIGIBLE FOR VA HEALTH CARE, NOW INELIGIBLE.",1)
"RTN","DGENUPL4",117,0)
 .;
"RTN","DGENUPL4",118,0)
 .; Check for erroneous CD deletion
"RTN","DGENUPL4",119,0)
 .I OLDCDIS("VCD")="","@"[DGCDIS("VCD") Q  ;no notification is needed
"RTN","DGENUPL4",120,0)
 .;
"RTN","DGENUPL4",121,0)
 .; CD Determination Changed
"RTN","DGENUPL4",122,0)
 .I OLDCDIS("VCD")'=DGCDIS("VCD") D ADDMSG^DGENUPL3(.MSGS,"VETERANS CD EVALUATION HAS CHANGED.")
"RTN","DGENUPL4",123,0)
 D EP^DGENUPLB
"RTN","DGENUPL4",124,0)
 Q SUCCESS
"RTN","DGENUPL4",125,0)
 ;
"RTN","DGENUPL4",126,0)
ADD ;
"RTN","DGENUPL4",127,0)
 ;Description: adds computed and assumed values to the updated objects
"RTN","DGENUPL4",128,0)
 ;
"RTN","DGENUPL4",129,0)
 ;Input: DGELG3(),DGPAT3() created in the UOBJECTS procedure.
"RTN","DGENUPL4",130,0)
 ;
"RTN","DGENUPL4",131,0)
 N SUB,TYPE,DATA
"RTN","DGENUPL4",132,0)
 S DGELG3("ELIGENTBY")=.5
"RTN","DGENUPL4",133,0)
 S SUB=0 F  S SUB=$O(DGELG3("RATEDIS",SUB)) Q:'SUB  S DGELG3("RATEDIS",SUB,"RDSC")=1
"RTN","DGENUPL4",134,0)
 ;
"RTN","DGENUPL4",135,0)
 ; Default Patient Types
"RTN","DGENUPL4",136,0)
 D SCVET^DGENUPL3
"RTN","DGENUPL4",137,0)
 ;
"RTN","DGENUPL4",138,0)
 ; If Ineldate apply business rules
"RTN","DGENUPL4",139,0)
 I DGPAT3("INELDATE"),DGELG3("SC")'="Y" D
"RTN","DGENUPL4",140,0)
 .S DGPAT3("VETERAN")="N",DGPAT3("PATYPE")=$O(^DG(391,"B","NON-VETERAN (OTHER)",0))
"RTN","DGENUPL4",141,0)
 .S DGELG3("POS")=$O(^DIC(21,"B","OTHER NON-VETERANS",0))
"RTN","DGENUPL4",142,0)
 ;
"RTN","DGENUPL4",143,0)
 ;update/set ELIGIBILITY VERIF. SOURCE field (Ineligible Project):
"RTN","DGENUPL4",144,0)
 S DATA(.3613)=$S(DGELG3("ELIGVERIF")["VBA":"H",DGELG3("ELIGVERIF")["CEV":"H",DGELG3("ELIGVERIF")["VIVA":"H",1:"V")
"RTN","DGENUPL4",145,0)
 ;
"RTN","DGENUPL4",146,0)
 ; File data fields modified by Ineligible Business Rules
"RTN","DGENUPL4",147,0)
 I $$UPD^DGENDBS(2,DFN,.DATA,.ERROR)
"RTN","DGENUPL4",148,0)
 Q
"RTN","DGENUPL4",149,0)
 ;
"RTN","DGENUPL4",150,0)
MERGE ;
"RTN","DGENUPL4",151,0)
 ;Description: merges arrays with current patient data with the updates
"RTN","DGENUPL4",152,0)
 ; Merges DGPAT() + OLDPAT() -> DGPAT3()
"RTN","DGENUPL4",153,0)
 ;        DGELG() + OLDELG() -> DGELG3()
"RTN","DGENUPL4",154,0)
 ; overlays catastrophic disability array with data from HEC
"RTN","DGENUPL4",155,0)
 ;        DGCDIS() is info from HEC
"RTN","DGENUPL4",156,0)
 ;
"RTN","DGENUPL4",157,0)
 N SUB,SUB2,LOC,HEC,NATCODE
"RTN","DGENUPL4",158,0)
 M DGPAT3=OLDPAT,DGELG3=OLDELG
"RTN","DGENUPL4",159,0)
 ;Replace POW in VistA with HEC data
"RTN","DGENUPL4",160,0)
 I '$D(DGPAT3("POWI")) S DGELG3("POW")=""
"RTN","DGENUPL4",161,0)
 K DGCDIS3 M DGCDIS3=OLDCDIS K DGCDIS3("EXT"),DGCDIS3("PROC"),DGCDIS3("COND"),DGCDIS3("DIAG")
"RTN","DGENUPL4",162,0)
 ;
"RTN","DGENUPL4",163,0)
 ;discard MT status from local database - don't ever want to use it during upload
"RTN","DGENUPL4",164,0)
 S DGELG3("MTSTA")=DGELG("MTSTA")
"RTN","DGENUPL4",165,0)
 ;
"RTN","DGENUPL4",166,0)
 ;patient array
"RTN","DGENUPL4",167,0)
 S SUB=""
"RTN","DGENUPL4",168,0)
 F  S SUB=$O(DGPAT(SUB)) Q:(SUB="")  I (DGPAT(SUB)'="") S DGPAT3(SUB)=$S((DGPAT(SUB)="@"):"",1:DGPAT(SUB))
"RTN","DGENUPL4",169,0)
 ;
"RTN","DGENUPL4",170,0)
 ;Allow Ineligible info deletion (Ineligible Project):
"RTN","DGENUPL4",171,0)
 I $D(DGPAT("INELDEC")),DGPAT("INELDEC")="" S DGPAT("INELDEC")="@"
"RTN","DGENUPL4",172,0)
 I $D(DGPAT("INELREA")),DGPAT("INELREA")="" S DGPAT("INELREA")="@"
"RTN","DGENUPL4",173,0)
 I $D(DGPAT("INELDATE")),DGPAT("INELDATE")="" S DGPAT("INELDATE")="@"
"RTN","DGENUPL4",174,0)
 ;
"RTN","DGENUPL4",175,0)
 ;catastrophic disability array
"RTN","DGENUPL4",176,0)
 S SUB=""
"RTN","DGENUPL4",177,0)
 F  S SUB=$O(DGCDIS(SUB)) Q:(SUB="")  D
"RTN","DGENUPL4",178,0)
 .I $D(DGCDIS(SUB))=1 I ($G(DGCDIS(SUB))'="") S DGCDIS3(SUB)=DGCDIS(SUB)
"RTN","DGENUPL4",179,0)
 .I $D(DGCDIS(SUB))=10 D
"RTN","DGENUPL4",180,0)
 ..S SUB2=""
"RTN","DGENUPL4",181,0)
 ..F  S SUB2=$O(DGCDIS(SUB,SUB2)) Q:SUB2=""  D
"RTN","DGENUPL4",182,0)
 ...I ($G(DGCDIS(SUB,SUB2))'="") S DGCDIS3(SUB,SUB2)=DGCDIS(SUB,SUB2)
"RTN","DGENUPL4",183,0)
 ...I SUB="PROC" D
"RTN","DGENUPL4",184,0)
 ....N CDPROC,CDEXT,LIEN
"RTN","DGENUPL4",185,0)
 ....S CDPROC=$G(DGCDIS("PROC",SUB2))
"RTN","DGENUPL4",186,0)
 ....Q:CDPROC=""
"RTN","DGENUPL4",187,0)
 ....S CDEXT=$G(DGCDIS("EXT",SUB2,1))
"RTN","DGENUPL4",188,0)
 ....Q:CDEXT=""
"RTN","DGENUPL4",189,0)
 ....S LIEN=$O(^DGEN(27.17,CDPROC,1,"B",CDEXT,0))
"RTN","DGENUPL4",190,0)
 ....Q:LIEN=""
"RTN","DGENUPL4",191,0)
 ....S DGCDIS3("EXT",SUB2,LIEN)=CDEXT
"RTN","DGENUPL4",192,0)
 ;
"RTN","DGENUPL4",193,0)
 ;eligibility array
"RTN","DGENUPL4",194,0)
 F  S SUB=$O(DGELG(SUB)) Q:(SUB="")  I ($G(DGELG(SUB))'="") S DGELG3(SUB)=$S((DGELG(SUB)="@"):"",1:DGELG(SUB))
"RTN","DGENUPL4",195,0)
 ;
"RTN","DGENUPL4",196,0)
 ;rated disabilities from HEC should replace local sites
"RTN","DGENUPL4",197,0)
 D
"RTN","DGENUPL4",198,0)
 .K DGELG3("RATEDIS")
"RTN","DGENUPL4",199,0)
 .M DGELG3("RATEDIS")=DGELG("RATEDIS")
"RTN","DGENUPL4",200,0)
 ;
"RTN","DGENUPL4",201,0)
 ;primary eligibility
"RTN","DGENUPL4",202,0)
 I (DGELG("ELIG","CODE")'="") S DGELG3("ELIG","CODE")=$S((DGELG("ELIG","CODE")="@"):"",($$NATCODE^DGENELA(DGELG("ELIG","CODE"))=$$NATCODE^DGENELA(DGELG3("ELIG","CODE"))):DGELG3("ELIG","CODE"),1:DGELG("ELIG","CODE"))
"RTN","DGENUPL4",203,0)
 ;
"RTN","DGENUPL4",204,0)
 ;patient eligibilities multiple
"RTN","DGENUPL4",205,0)
 ;delete veteran type codes not mapped to national codes sent by HEC, but leave non-veteran types and the codes where there is a match
"RTN","DGENUPL4",206,0)
 ;first find all local codes already in the patient file and the ones sent from HEC, keep in arrays LOC and HEC
"RTN","DGENUPL4",207,0)
 S NATCODE=$$NATCODE^DGENELA(DGELG("ELIG","CODE")) I NATCODE S HEC(NATCODE)=""
"RTN","DGENUPL4",208,0)
 S SUB=0 F  S SUB=$O(DGELG("ELIG","CODE",SUB)) Q:'SUB  S NATCODE=$$NATCODE^DGENELA(SUB) I NATCODE S HEC(NATCODE)=""
"RTN","DGENUPL4",209,0)
 S SUB=0 F  S SUB=$O(DGELG3("ELIG","CODE",SUB)) Q:'SUB  S NATCODE=$$NATCODE^DGENELA(SUB) I NATCODE S LOC(NATCODE)=""
"RTN","DGENUPL4",210,0)
 ;Now discard the codes in the local patient database that don't map to a national code sent by HEC, as well as HUMANIARIAN EMERGENCY code if not sent by HEC: 
"RTN","DGENUPL4",211,0)
 S SUB=0
"RTN","DGENUPL4",212,0)
 F  S SUB=$O(DGELG3("ELIG","CODE",SUB)) Q:'SUB  D
"RTN","DGENUPL4",213,0)
 .I $P($G(^DIC(8,SUB,0)),"^",5)="Y"!($P($G(^DIC(8,SUB,0)),"^")["HUMANITARIAN EMERGENCY"),'$D(HEC($$NATCODE^DGENELA(SUB))) K DGELG3("ELIG","CODE",SUB)
"RTN","DGENUPL4",214,0)
 ;now add codes included in the update that the local database does not already contain
"RTN","DGENUPL4",215,0)
 S SUB=0
"RTN","DGENUPL4",216,0)
 F  S SUB=$O(DGELG("ELIG","CODE",SUB)) Q:'SUB  D
"RTN","DGENUPL4",217,0)
 .I '$D(LOC($$NATCODE^DGENELA(SUB))) S DGELG3("ELIG","CODE",SUB)=SUB
"RTN","DGENUPL4",218,0)
 ;Agent Orange Exp. Location, use local database when upload is NULL
"RTN","DGENUPL4",219,0)
 D AO^DGENUPL9
"RTN","DGENUPL4",220,0)
 Q
"RTN","DGENUPL4",221,0)
 ;
"RTN","DGENUPL4",222,0)
CHECK() ;
"RTN","DGENUPL4",223,0)
 ;
"RTN","DGENUPL4",224,0)
 N SUCCESS,ALIVE,ERRMSG,DGENR
"RTN","DGENUPL4",225,0)
 S SUCCESS=1
"RTN","DGENUPL4",226,0)
 S ERRMSG=""
"RTN","DGENUPL4",227,0)
 ;
"RTN","DGENUPL4",228,0)
 ;if upload includes date of death, check for indications that patient is alive
"RTN","DGENUPL4",229,0)
 I DGPAT3("DEATH"),'OLDPAT("DEATH") D  S:ALIVE SUCCESS=0
"RTN","DGENUPL4",230,0)
 .;
"RTN","DGENUPL4",231,0)
 .;determine if patient is at the moment being registered
"RTN","DGENUPL4",232,0)
 .S ALIVE=$$IFREG^DGREG(DFN)
"RTN","DGENUPL4",233,0)
 .;
"RTN","DGENUPL4",234,0)
 .;check if an inpatient
"RTN","DGENUPL4",235,0)
 .I 'ALIVE,$$INPAT^DGENPTA(DFN,DT,DT) S ALIVE=1
"RTN","DGENUPL4",236,0)
 .;
"RTN","DGENUPL4",237,0)
 .;Phase II locally enrolled with enrollment date after death date and status of unverified and rejected-initial application by vamc (SRS 6.5.1.2 e)
"RTN","DGENUPL4",238,0)
 .N CURIEN,CURENR
"RTN","DGENUPL4",239,0)
 .S CURIEN=$$FINDCUR^DGENA(DFN)
"RTN","DGENUPL4",240,0)
 .I CURIEN,$$GET^DGENA(CURIEN,.CURENR),CURENR("DATE")>DGPAT3("DEATH"),CURENR("STATUS")=1!(CURENR("STATUS")=14) S ALIVE=1
"RTN","DGENUPL4",241,0)
 .;there is an indication that he patient may not be dead
"RTN","DGENUPL4",242,0)
 .D:ALIVE ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),"LOCAL SITE VERIFY PATIENT DEATH",.ERRCOUNT),ADDMSG^DGENUPL3(.MSGS,"ELIBILITY UPLOAD CONTAINED DATE OF DEATH AND WAS REJECTED, PLEASE VERIFY PATIENT DEATH",1),NOTIFY^DGENUPL3(.DGPAT,.MSGS)
"RTN","DGENUPL4",243,0)
 ;
"RTN","DGENUPL4",244,0)
 ;only do consistency checks on this data if it is verified
"RTN","DGENUPL4",245,0)
 I SUCCESS,(DGELG3("ELIGSTA")="V") D
"RTN","DGENUPL4",246,0)
 .I $$CHECK^DGENPTA1(.DGPAT3,.ERRMSG),$$CHECK^DGENELA1(.DGELG3,.DGPAT3,.DGCDIS3,.ERRMSG),$$CHECK^DGENCDA1(.DGCDIS3,.ERRMSG)
"RTN","DGENUPL4",247,0)
 .E  D
"RTN","DGENUPL4",248,0)
 ..S SUCCESS=0
"RTN","DGENUPL4",249,0)
 ..D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),ERRMSG,.ERRCOUNT)
"RTN","DGENUPL4",250,0)
 Q SUCCESS
"RTN","DGENUPL7")
0^10^B36030321
"RTN","DGENUPL7",1,0)
DGENUPL7 ;ISA/KWP,CKN,TMK,TDM,LBD,HM - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ;6/17/13 5:48pm
"RTN","DGENUPL7",2,0)
 ;;5.3;REGISTRATION;**232,367,397,417,379,431,513,628,673,653,742,688,797,871,972**;Aug 13,1993;Build 80
"RTN","DGENUPL7",3,0)
 ;
"RTN","DGENUPL7",4,0)
 ;Phase II split from DGENUPL
"RTN","DGENUPL7",5,0)
Z11(MSGIEN,MSGID,CURLINE,DFN,ERRCOUNT) ;
"RTN","DGENUPL7",6,0)
 ;Description:  This is used to process a single ORU~Z11 or ORF~Z11 msg. 
"RTN","DGENUPL7",7,0)
 ;Input:
"RTN","DGENUPL7",8,0)
 ;  MSGIEN - the internal entry number of the HL7 message in the
"RTN","DGENUPL7",9,0)
 ;      HL7 MESSAGE TEXT file (772)
"RTN","DGENUPL7",10,0)
 ;  MSGID -message control id of HL7 msg in the MSH segment
"RTN","DGENUPL7",11,0)
 ;  CURLINE - the subscript of the MSH segment of the current message (pass by reference)
"RTN","DGENUPL7",12,0)
 ;  DFN - identifies the patient, is the ien of a record in the PATIENT file.
"RTN","DGENUPL7",13,0)
 ;  ERRCOUNT - is a count of the number of messages in the batch that can not be processed (pass by reference)
"RTN","DGENUPL7",14,0)
 ;
"RTN","DGENUPL7",15,0)
 ;Output:
"RTN","DGENUPL7",16,0)
 ;  CURLINE - upon leaving the procedure this parameter should be set to the end of the current message. (pass by reference)
"RTN","DGENUPL7",17,0)
 ;  ERRCOUNT - set to count of messages that were not processed due to errors encountered  (pass by reference)
"RTN","DGENUPL7",18,0)
 ;
"RTN","DGENUPL7",19,0)
 N DGELG,DGENR,DGPAT,DGCDIS,DGOEIF,ERROR,ERRMSG,MSGS,DGELGSUB,DGENUPLD,DGCON,DGNMSE
"RTN","DGENUPL7",20,0)
 N DGNEWVAL,DIV,SUB,OLDELG,OLDPAT,OLDDCDIS,OLDEIF,DGSEC,OLDSEC,DGNTR,DGMST,DGPHINC,DGHBP
"RTN","DGENUPL7",21,0)
 ;
"RTN","DGENUPL7",22,0)
 ;some process is killing these HL7 variables, so need to protect them
"RTN","DGENUPL7",23,0)
 S SUB=HLFS
"RTN","DGENUPL7",24,0)
 S DIV=HLECH
"RTN","DGENUPL7",25,0)
 N HLDA,HLDAN,HLDAP,HLDT,HLDT1,HLECH,HLFS,HLNDAP,HLNDAP0,HLPID,HLQ,HLVER,HLERR,HLMTN,HLSDT
"RTN","DGENUPL7",26,0)
 S HLFS=SUB
"RTN","DGENUPL7",27,0)
 S HLECH=DIV
"RTN","DGENUPL7",28,0)
 S HLQ=""""""
"RTN","DGENUPL7",29,0)
 K DIV,SUB
"RTN","DGENUPL7",30,0)
 ;
"RTN","DGENUPL7",31,0)
 ;drops out of block on error
"RTN","DGENUPL7",32,0)
 D
"RTN","DGENUPL7",33,0)
 .Q:'$$PARSE^DGENUPL1(MSGIEN,MSGID,.CURLINE,.ERRCOUNT,.DGPAT,.DGELG,.DGENR,.DGCDIS,.DGOEIF,.DGSEC,.DGNTR,.DGMST,.DGNMSE,.DGHBP)
"RTN","DGENUPL7",34,0)
 .D GETLOCKS^DGENUPL5(DFN)
"RTN","DGENUPL7",35,0)
 .;
"RTN","DGENUPL7",36,0)
 .;Used by cross-references to determine if an upload is in progress.
"RTN","DGENUPL7",37,0)
 .S DGENUPLD="ENROLLMENT/ELIGIBILITY UPLOAD IN PROGRESS"
"RTN","DGENUPL7",38,0)
 .;
"RTN","DGENUPL7",39,0)
 .;Update the PATIENT, ELIGIBILITY, CATASTROPHIC DISABILITY objects in memory
"RTN","DGENUPL7",40,0)
 .Q:'$$UOBJECTS^DGENUPL4(DFN,.DGPAT,.DGELG,.DGCDIS,.DGOEIF,MSGID,.ERRCOUNT,.MSGS,.OLDPAT,.OLDELG,.OLDCDIS,.OLDEIF)
"RTN","DGENUPL7",41,0)
 .S ERROR=0
"RTN","DGENUPL7",42,0)
 .;if the msg contains patient security, process it
"RTN","DGENUPL7",43,0)
 .I $D(DGSEC) D  Q:ERROR
"RTN","DGENUPL7",44,0)
 ..S DGSEC("DFN")=DFN
"RTN","DGENUPL7",45,0)
 ..S DGSEC("USER")=.5
"RTN","DGENUPL7",46,0)
 ..I DGSEC("LEVEL")'="" D
"RTN","DGENUPL7",47,0)
 ...I DGSEC("DATETIME")="" S DGSEC("DATETIME")=$$NOW^XLFDT ;DG*5.3*653 
"RTN","DGENUPL7",48,0)
 ..;
"RTN","DGENUPL7",49,0)
 ..; check consistency of patient security record
"RTN","DGENUPL7",50,0)
 ..I '$$CHECK^DGENSEC(.DGSEC,.ERRMSG) D  Q
"RTN","DGENUPL7",51,0)
 ...S ERROR=1
"RTN","DGENUPL7",52,0)
 ...D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),ERRMSG,.ERRCOUNT)
"RTN","DGENUPL7",53,0)
 ..;
"RTN","DGENUPL7",54,0)
 ..; upload patient security, consistency checks passed
"RTN","DGENUPL7",55,0)
 ..D SECUPLD^DGENUPL5(DFN,.DGSEC,.OLDSEC)
"RTN","DGENUPL7",56,0)
 .;
"RTN","DGENUPL7",57,0)
 .;if the msg has an enrollment process it
"RTN","DGENUPL7",58,0)
 .I DGENR("STATUS")!DGENR("APP") D  Q:ERROR
"RTN","DGENUPL7",59,0)
 ..;use $$PRIORITY to get the eligibility data used to compute priority
"RTN","DGENUPL7",60,0)
 ..I $$PRIORITY^DGENELA4(DFN,.DGELG,.DGELGSUB,DGENR("DATE"),DGENR("APP"))
"RTN","DGENUPL7",61,0)
 ..;
"RTN","DGENUPL7",62,0)
 ..;store the eligibility data in the enrollment record and other missing fields
"RTN","DGENUPL7",63,0)
 ..M DGENR("ELIG")=DGELGSUB
"RTN","DGENUPL7",64,0)
 ..S DGENR("DFN")=DFN
"RTN","DGENUPL7",65,0)
 ..S DGENR("PRIORREC")=""
"RTN","DGENUPL7",66,0)
 ..S DGENR("USER")=.5
"RTN","DGENUPL7",67,0)
 ..S DGENR("DATETIME")=$$NOW^XLFDT
"RTN","DGENUPL7",68,0)
 ..;
"RTN","DGENUPL7",69,0)
 ..;Allow null overwrites of Ineligible data (Ineligible Project):
"RTN","DGENUPL7",70,0)
 ..I $D(DGENR("DATE")),DGENR("DATE")="" S DGENR("DATE")="@"
"RTN","DGENUPL7",71,0)
 ..I $D(DGENR("FACREC")),DGENR("FACREC")="" S DGENR("FACREC")="@"
"RTN","DGENUPL7",72,0)
 ..;
"RTN","DGENUPL7",73,0)
 ..;check the consistency of the enrollment record
"RTN","DGENUPL7",74,0)
 ..I '$$CHECK^DGENA3(.DGENR,.DGPAT,.ERRMSG) D  Q
"RTN","DGENUPL7",75,0)
 ...S ERROR=1
"RTN","DGENUPL7",76,0)
 ...D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),ERRMSG,.ERRCOUNT)
"RTN","DGENUPL7",77,0)
 ..;
"RTN","DGENUPL7",78,0)
 ..; removed EGT consistency check with DG*5.3*628
"RTN","DGENUPL7",79,0)
 ..;Phase II EGT consistency checks (SRS 6.5.1.3)
"RTN","DGENUPL7",80,0)
 ..;Only do the EGT consistency checks for Rejected-Fiscal Year (11),Rejected-Mid Cycle (12),Rejected-Stop enrolling new apps (13),Rejected-Initil App by VAMC (14),Rejected below EGT threshold (22)
"RTN","DGENUPL7",81,0)
 ..;I "^11^12^13^14^22^"[("^"_DGENR("STATUS")_"^"),$$ABOVE^DGENEGT1(DGENR("DFN"),DGENR("PRIORITY"),DGENR("SUBGRP"),"","",1) D  Q
"RTN","DGENUPL7",82,0)
 ..;.S ERROR=1
"RTN","DGENUPL7",83,0)
 ..;.S ERRMSG="THE ENROLLMENT RECORD DID NOT PASS THE EGT CONSISTENCY CHECKS."
"RTN","DGENUPL7",84,0)
 ..;.D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),ERRMSG,.ERRCOUNT)
"RTN","DGENUPL7",85,0)
 ..;
"RTN","DGENUPL7",86,0)
 ..;Allow null overwrites for Ineligible vets (Ineligible Project):
"RTN","DGENUPL7",87,0)
 ..I $G(DGPAT("INELDATE"))'="" S (DGENR("PRIORITY"),DGENR("SUBGRP"))=""
"RTN","DGENUPL7",88,0)
 ..I DGENR("DATE")="@" S DGENR("DATE")=""
"RTN","DGENUPL7",89,0)
 ..I DGENR("FACREC")="@" S DGENR("FACREC")=""
"RTN","DGENUPL7",90,0)
 ..;
"RTN","DGENUPL7",91,0)
 ..D ENRUPLD^DGENUPL8(.DGENR,.DGPAT)
"RTN","DGENUPL7",92,0)
 .;
"RTN","DGENUPL7",93,0)
 .;Store the PATIENT, ELIGIBILITY, & CAT. DISB. objects
"RTN","DGENUPL7",94,0)
 .I $$STORE^DGENPTA1(.DGPAT,,1)
"RTN","DGENUPL7",95,0)
 .I $$STORE^DGENELA1(.DGELG,.DGPAT,.DGCDIS,,1)
"RTN","DGENUPL7",96,0)
 .I $G(DGCDIS("VCD"))'="",$$STORE^DGENCDA2(DFN,.DGCDIS) ;checks first if there is catastrophic disability information
"RTN","DGENUPL7",97,0)
 .;
"RTN","DGENUPL7",98,0)
 .;Call PIMS api to file NTR data.
"RTN","DGENUPL7",99,0)
 .I $D(DGNTR),$$ENRUPD^DGNTAPI1(DFN,.DGNTR)
"RTN","DGENUPL7",100,0)
 .;
"RTN","DGENUPL7",101,0)
 .;Call PIMS api to file MST data.
"RTN","DGENUPL7",102,0)
 .I DGMST("MSTSTAT")'="",DGMST("MSTDT")'="",DGMST("MSTST")'="" D
"RTN","DGENUPL7",103,0)
 ..I $$NEWSTAT^DGMSTAPI(DFN,DGMST("MSTSTAT"),DGMST("MSTDT"),".5",DGMST("MSTST"),0)
"RTN","DGENUPL7",104,0)
 .;
"RTN","DGENUPL7",105,0)
 .;Since HEC is authoritative source, If no OEF/OIF data in Z11, set count to 0 so existing data in VistA will be deleted.
"RTN","DGENUPL7",106,0)
 .I '$D(DGOEIF) S DGOEIF("COUNT")=0
"RTN","DGENUPL7",107,0)
 .;Call PIMS api to file OEF/OIF data.
"RTN","DGENUPL7",108,0)
 .I $D(DGOEIF) D OEIFUPD^DGCLAPI1(DFN,.DGOEIF)
"RTN","DGENUPL7",109,0)
 .;
"RTN","DGENUPL7",110,0)
 .;File the Military Service Episode (MSE) data (DG*5.3*797)
"RTN","DGENUPL7",111,0)
 .I $D(DGNMSE) D UPDMSE^DGMSEUTL(DFN,.DGNMSE)
"RTN","DGENUPL7",112,0)
 .;
"RTN","DGENUPL7",113,0)
 .;File the Health Benefit Plan (HBP) data
"RTN","DGENUPL7",114,0)
 .D HL7UPD^DGHBPUTL(DFN,.DGHBP,MSHDT)
"RTN","DGENUPL7",115,0)
 .;
"RTN","DGENUPL7",116,0)
 .;if the current enrollment is a local then log patient for transmission
"RTN","DGENUPL7",117,0)
 .I $$SOURCE^DGENA(DFN)=1!$G(DGPHINC) K DGENUPLD,DGPHINC D EVENT^IVMPLOG(DFN)
"RTN","DGENUPL7",118,0)
 .;
"RTN","DGENUPL7",119,0)
 .;create the audit trail
"RTN","DGENUPL7",120,0)
 .K OLDPAT("MOH"),DGPAT("MOH") ;remove MOH from audit demographics report DG*5.3*972 HM
"RTN","DGENUPL7",121,0)
 .I $$AUDIT^DGENUPA1(,MSGID,.OLDPAT,.DGPAT,.OLDELG,.DGELG,.OLDCDIS,.DGCDIS,.DGSEC,.OLDSEC)
"RTN","DGENUPL7",122,0)
 .;send notifications
"RTN","DGENUPL7",123,0)
 .D NOTIFY^DGENUPL3(.DGPAT,.MSGS)
"RTN","DGENUPL7",124,0)
 .;
"RTN","DGENUPL7",125,0)
 .;invoke registration consistency checker
"RTN","DGENUPL7",126,0)
 .D REGCHECK^DGENUPL2(DFN)
"RTN","DGENUPL7",127,0)
 ;
"RTN","DGENUPL7",128,0)
 D UNLOCK^DGENUPL5(DFN)
"RTN","DGENUPL7",129,0)
 Q
"RTN","DGMTA")
0^35^B44199650
"RTN","DGMTA",1,0)
DGMTA ;ALB/RMO/CAW/LD/SCG/AEG/PHH/HM - Add a New Means Test;2/24/10 2:58pm
"RTN","DGMTA",2,0)
 ;;5.3;Registration;**33,45,137,166,177,182,290,344,332,433,458,535,612,564,688,661,840,972**;Aug 13, 1993;Build 80
"RTN","DGMTA",3,0)
 ;
"RTN","DGMTA",4,0)
EN ;Entry point to add a new means test
"RTN","DGMTA",5,0)
 N DGMDOD S DGMDOD=""
"RTN","DGMTA",6,0)
 S DGADDF=1
"RTN","DGMTA",7,0)
 I $D(DGMTDFN)#2 D UNLOCK^DGMTUTL(DGMTDFN) K DGMTDFN
"RTN","DGMTA",8,0)
 S DIC="^DPT(",DIC(0)="AEMQ" W ! D ^DIC K DIC G Q:Y<0 S (DFN,DGMTDFN)=+Y
"RTN","DGMTA",9,0)
 I $P($G(^DPT(DFN,.35)),U)'="" S DGMDOD=$P(^DPT(DFN,.35),U)
"RTN","DGMTA",10,0)
 I $G(DGMDOD) W !,"Patient died on: ",$$FMTE^XLFDT(DGMDOD,"1D") Q
"RTN","DGMTA",11,0)
 ;
"RTN","DGMTA",12,0)
 ; check if income test in progress
"RTN","DGMTA",13,0)
 D CKUPLOAD^IVMCUPL(DFN)
"RTN","DGMTA",14,0)
 ;
"RTN","DGMTA",15,0)
 ; obtain lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",16,0)
 I $$LOCK^DGMTUTL(DFN)
"RTN","DGMTA",17,0)
 ;
"RTN","DGMTA",18,0)
 I DGMTYPT=1 N DGDOM1 D EN^DGMTR I 'DGREQF,'$G(DGDOM1) W !,*7,"A means test can only be added for patients who require one.",! K DGDOM1 G EN
"RTN","DGMTA",19,0)
 ;
"RTN","DGMTA",20,0)
 N FUTMT S FUTMT=$$FUT^DGMTU(DFN,"",DGMTYPT) I FUTMT D FTST G EN
"RTN","DGMTA",21,0)
 ;
"RTN","DGMTA",22,0)
 ;if a test was auto-completed, DGADDF gets set to 0
"RTN","DGMTA",23,0)
 I 'DGADDF W !!,*7,"A means test already exists and is in effect" G EN
"RTN","DGMTA",24,0)
 ;
"RTN","DGMTA",25,0)
 K:DGMTYPT=1 DGDOM1
"RTN","DGMTA",26,0)
 I DGMTYPT=2 D EN^DGMTCOR I 'DGMTCOR S I=$P($T(WHY+DGWRT),";",3,99) W !!,*7,"A copay exemption test can only be added for applicable veterans.",!,I G EN
"RTN","DGMTA",27,0)
 S DGLDT=$$LST^DGMTU(DFN,"",DGMTYPT),DGLD=$P(DGLDT,U,2),DGLDYR=$E(DGLD,1,3)_"1231"
"RTN","DGMTA",28,0)
 ;
"RTN","DGMTA",29,0)
DT S %DT("A")="DATE OF TEST: ",%DT="AEX",%DT(0)="-NOW",%DT("B")="NOW" W ! D ^%DT K %DT G Q:Y<0 S DGMTDT=Y
"RTN","DGMTA",30,0)
 I DGMTDT<$S(DGMTYPT=1:2860701,1:2921029) W !?3,*7,"The date of test cannot be before "_$S(DGMTYPT=1:"7/1/1986.",1:"10/29/1992.") G DT
"RTN","DGMTA",31,0)
 I DGLD,DGMTDT<DGLD W !?3,*7,"The date of test cannot be before the last date of test on " S Y=DGLD X ^DD("DD") W Y,"." G DT
"RTN","DGMTA",32,0)
 I DGLD S X1=DGMTDT,X2=DGLD D ^%DTC I X<365,DGMTDT'>DGLDYR D  G EN
"RTN","DGMTA",33,0)
 .W !?3,*7,"An annual date of test already exists on " S Y=DGLD X ^DD("DD") W Y,"."
"RTN","DGMTA",34,0)
 .S DGTTYP=$S(DGMTYPT=1:"Means ",1:"Copay Exemption ")
"RTN","DGMTA",35,0)
 .W !,$S($P($G(^DG(408.34,+$P($G(^DGMT(408.31,+DGLDT,0)),U,23),0)),U)="VAMC":"   Use the 'Edit an Existing "_DGTTYP_"Test' Option.",1:"   Use the 'View a Past Means Test' Option.")
"RTN","DGMTA",36,0)
 ;
"RTN","DGMTA",37,0)
 ;Means Test cannot be added for patient on a DOM ward on date of test
"RTN","DGMTA",38,0)
 I DGMTYPT=2 G PRINT
"RTN","DGMTA",39,0)
 N VAINDT,VADMVT,DGDOM,DGDOM1
"RTN","DGMTA",40,0)
 S VAINDT=DGMTDT
"RTN","DGMTA",41,0)
 D DOM1^DGMTR I $G(DGDOM1) D  K VAINDT,VADMVT,DGDOM,DGDOM1 G EN
"RTN","DGMTA",42,0)
 .W !,*7,"A Means Test cannot be added for patients on a DOM ward on date of test.",!
"RTN","DGMTA",43,0)
 K VAINDT,VADMVT,DGDOM,DGDOM1
"RTN","DGMTA",44,0)
 ;
"RTN","DGMTA",45,0)
 ;A warning message is displayed if last means test for patient is
"RTN","DGMTA",46,0)
 ;from a prior year and has a status of required.  The user is given
"RTN","DGMTA",47,0)
 ;the option to continue or stop adding a new means test.
"RTN","DGMTA",48,0)
 N %
"RTN","DGMTA",49,0)
 I DGLD,DGMTDT>DGLDYR,$P(DGLDT,"^",4)="R" D  Q:%=-1  I %=2 K % G EN
"RTN","DGMTA",50,0)
 .W !?3,*7,"WARNING - last means test on " S Y=DGLD X ^DD("DD") W Y," has a status of required."
"RTN","DGMTA",51,0)
DT2 .W !?3,"Do you still want to continue adding new test"
"RTN","DGMTA",52,0)
 .S %=2 D YN^DICN
"RTN","DGMTA",53,0)
 .I %=0 W !?3,"Answer 'Y'es to continue adding new test." G DT2
"RTN","DGMTA",54,0)
 .Q 
"RTN","DGMTA",55,0)
 K %
"RTN","DGMTA",56,0)
 ;
"RTN","DGMTA",57,0)
PRINT I "^P^A^C^G^"[(U_$P(DGLDT,U,4)_U) S %=1 W !,"Do you wish to print the prior means test" D YN^DICN G:%=-1 Q I %Y["?" W !!,"This will print the prior means test information.",! G PRINT
"RTN","DGMTA",58,0)
 I $G(%)=1 S DGX=DGMTDT,DGMTDT=DGLD,DGMTI=+DGLDT,DGOPT="" D DEV^DGMTP,CLOSE^DGUTQ S DGMTDT=DGX K DGX
"RTN","DGMTA",59,0)
 D ADD G EN:DGMTI<0
"RTN","DGMTA",60,0)
 S DGMTACT="ADD",DGMTROU="EN^DGMTA" G EN^DGMTSC
"RTN","DGMTA",61,0)
 ;
"RTN","DGMTA",62,0)
Q K DA,DFN,DGADDF,DGBL,DGFL,DGFLD,DGIRO,DGLD,DGLDT,DGLDYR,DGMTACT,DGMTCOR,DGMTDT,DGMTI,DGMTROU,DGREQF,DGTTYP,DGMTYPT,DGVI,DGVO,X,X1,X2,Y
"RTN","DGMTA",63,0)
 ;
"RTN","DGMTA",64,0)
 ; release lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",65,0)
 I $D(DGMTDFN)#2 D UNLOCK^DGMTUTL(DGMTDFN) K DGMTDFN
"RTN","DGMTA",66,0)
 Q
"RTN","DGMTA",67,0)
 ;
"RTN","DGMTA",68,0)
ADD ;Add means test
"RTN","DGMTA",69,0)
 ; Input  -- DFN     Patient IEN
"RTN","DGMTA",70,0)
 ;           DGMTDT  Date
"RTN","DGMTA",71,0)
 ;           DGMTYPT Type of Test 1=MT 2=COPAY 4=LTC
"RTN","DGMTA",72,0)
 ; Output -- DGMTI   Annual Means/Copay/LTC Test IEN
"RTN","DGMTA",73,0)
 N DA,DD,DIC,DIK,DINUM,DLAYGO,DO,DS,X,D0,DGSITE,CONVRT,CURIEN,LINK,DGLNKMT
"RTN","DGMTA",74,0)
 ;
"RTN","DGMTA",75,0)
 ; obtain lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",76,0)
 I $$LOCK^DGMTUTL(DFN) E  Q
"RTN","DGMTA",77,0)
 ;
"RTN","DGMTA",78,0)
 ; Check for Linked test and don't lose the link.
"RTN","DGMTA",79,0)
 S LINK="",DGLNKMT=$$LST^DGMTU(DFN,DGMTDT,DGMTYPT),CURIEN=+DGLNKMT
"RTN","DGMTA",80,0)
 I CURIEN D
"RTN","DGMTA",81,0)
 . ;Don't link test if it's in a different year (DG*5.3*661)
"RTN","DGMTA",82,0)
 . I $E($P(DGLNKMT,U,2),1,3)'=$E(DGMTDT,1,3) Q
"RTN","DGMTA",83,0)
 . S LINK=$P($G(^DGMT(408.31,CURIEN,2)),U,6)
"RTN","DGMTA",84,0)
 ;
"RTN","DGMTA",85,0)
 S DGSITE=$$GETSITE^DGMTU4(.DUZ)
"RTN","DGMTA",86,0)
 S X=DGMTDT,(DIC,DIK)="^DGMT(408.31,",DIC(0)="L",DLAYGO=408.31
"RTN","DGMTA",87,0)
 ;
"RTN","DGMTA",88,0)
 ;Look for existing IAI records and convert (if necessary)
"RTN","DGMTA",89,0)
 D ALL^DGMTU21(DFN,"VSD",DT,"IPR") ;ALL only returns IAI from last IY
"RTN","DGMTA",90,0)
 I $D(DGINC) DO
"RTN","DGMTA",91,0)
 . D ISCNVRT^DGMTUTL(.DGINC)
"RTN","DGMTA",92,0)
 ;
"RTN","DGMTA",93,0)
 ; The DIC("DR") string is built in this specific order so that
"RTN","DGMTA",94,0)
 ; all triggers and "M" x-refs fire correctly.  Should not be
"RTN","DGMTA",95,0)
 ; modified without an in-depth review of DD of file #408.31.
"RTN","DGMTA",96,0)
 ;
"RTN","DGMTA",97,0)
 I DGMTYPT=2 D
"RTN","DGMTA",98,0)
 .S DIC("DR")="2////"_(DGMTYPT'=4)_";2.05////"_DGSITE_";2.06////"_LINK
"RTN","DGMTA",99,0)
 .S DIC("DR")=DIC("DR")_";.02////"_DFN_";.019////"_DGMTYPT_";.23////1"
"RTN","DGMTA",100,0)
 E  D
"RTN","DGMTA",101,0)
 .S DIC("DR")="2////"_(DGMTYPT'=4)_";2.05////"_DGSITE_";2.06////"_LINK
"RTN","DGMTA",102,0)
 .S DIC("DR")=DIC("DR")_";.019////"_DGMTYPT_";.02////"_DFN_";.23////1"
"RTN","DGMTA",103,0)
 K DD,DO
"RTN","DGMTA",104,0)
 D FILE^DICN S DGMTI=+Y
"RTN","DGMTA",105,0)
 ;
"RTN","DGMTA",106,0)
 ; Check for another test in the current year and convert IAI records if needed
"RTN","DGMTA",107,0)
 ; Send new test date (as test that have) into VRCHKUP
"RTN","DGMTA",108,0)
 I $D(TYPE),((+TYPE=1)!(TYPE=4)) S CONVRT=$$VRCHKUP^DGMTU2(DGMTYPT,TYPE,DGMTDT)
"RTN","DGMTA",109,0)
 I $D(TYPE),((+TYPE'=1)&(TYPE'=4)) S CONVRT=$$VRCHKUP^DGMTU2(DGMTYPT,,DGMTDT)
"RTN","DGMTA",110,0)
 I '$D(TYPE) S CONVRT=$$VRCHKUP^DGMTU2(DGMTYPT,,DGMTDT)
"RTN","DGMTA",111,0)
 N DGERR,DGMTRT
"RTN","DGMTA",112,0)
 S DGMTRT(408.31,DGMTI_",",2.11)=1
"RTN","DGMTA",113,0)
 S DGERR=""
"RTN","DGMTA",114,0)
 D FILE^DIE("","DGMTRT",DGERR)
"RTN","DGMTA",115,0)
 ; release lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",116,0)
 D UNLOCK^DGMTUTL(DFN)
"RTN","DGMTA",117,0)
 ;
"RTN","DGMTA",118,0)
ADDQ Q
"RTN","DGMTA",119,0)
 ;
"RTN","DGMTA",120,0)
FTST ; Build message for future tests that are added to the system, but
"RTN","DGMTA",121,0)
 ; were not performed by the VAMC trying to add a new MT.
"RTN","DGMTA",122,0)
 N SITE,DGMTYPT,DGTTYP,SRC,SCT
"RTN","DGMTA",123,0)
 S SCT=$P(^DGMT(408.31,+FUTMT,2),U,5),SITE=$$INST^DGENU()
"RTN","DGMTA",124,0)
 S DGMTYPT=$P(^DGMT(408.31,+FUTMT,0),U,19)
"RTN","DGMTA",125,0)
 S DGTTYP=$S(DGMTYPT=1:"Means ",1:"Copay Exemption ")
"RTN","DGMTA",126,0)
 W !?3,*7,"A future test already exists on "
"RTN","DGMTA",127,0)
 S Y=$P(FUTMT,U,2) X ^DD("DD") W Y,"."
"RTN","DGMTA",128,0)
 ; This site performed the MT
"RTN","DGMTA",129,0)
 I SITE=SCT D
"RTN","DGMTA",130,0)
 .W !?3,"Use the 'Edit an Existing "_DGTTYP_"Test' Option."
"RTN","DGMTA",131,0)
 ;
"RTN","DGMTA",132,0)
 ; The MT was added by another VAMC
"RTN","DGMTA",133,0)
 I SITE'=SCT D
"RTN","DGMTA",134,0)
 .S SRC=$P(FUTMT,U,5)
"RTN","DGMTA",135,0)
 .I SCT W !?3,"The "_DGTTYP_"Test was conducted at Site: ",SCT
"RTN","DGMTA",136,0)
 .W !?3,"Please contact "
"RTN","DGMTA",137,0)
 .W $S($D(^DIC(4,+SCT,0)):$P(^DIC(4,+SCT,0),U),SRC=2:"IVM",SRC=3:"the HEC",1:"the site")
"RTN","DGMTA",138,0)
 .W ",",!?3,"if it is necessary to edit the test."
"RTN","DGMTA",139,0)
 Q
"RTN","DGMTA",140,0)
 ; HM DG*5.3*972 - added Medal of Honor to list of reasons
"RTN","DGMTA",141,0)
WHY ;Why Copay Test cannot be added
"RTN","DGMTA",142,0)
 ;;Patient is not a veteran.
"RTN","DGMTA",143,0)
 ;;Patient does not have a Primary Eligibility Code.
"RTN","DGMTA",144,0)
 ;;Patient is Service Connected 50-100%.
"RTN","DGMTA",145,0)
 ;;Means Test options must be used instead of Copay options.
"RTN","DGMTA",146,0)
 ;;Patient is receiving Aid and Attendance, automatically exempted.
"RTN","DGMTA",147,0)
 ;;Patient is receiving Housebound Benefits, automatically exempted.
"RTN","DGMTA",148,0)
 ;;Patient is receiving a VA Pension, automatically exempted.
"RTN","DGMTA",149,0)
 ;;Patient is in a DOM ward, automatically exempted.
"RTN","DGMTA",150,0)
 ;;Patient is an inpatient, automatically exempted.
"RTN","DGMTA",151,0)
 ;;Patient was a POW, automatically exempted.
"RTN","DGMTA",152,0)
 ;;Patient is Unemployable, automatically exempted.
"RTN","DGMTA",153,0)
 ;;Patient is Catastrophically Disabled, automatically exempted.
"RTN","DGMTA",154,0)
 ;;Patient is awarded Medal of Honor, automatically exempted.
"RTN","DGMTCOR")
0^11^B37845960
"RTN","DGMTCOR",1,0)
DGMTCOR ;ALB/CAW,SCG,LBD,TMK,HM - Check Copay Test Requirements;07/28/08
"RTN","DGMTCOR",2,0)
 ;;5.3;Registration;**21,45,182,290,305,330,344,495,564,773,840,858,972**;Aug 13, 1993;Build 80
"RTN","DGMTCOR",3,0)
 ;
"RTN","DGMTCOR",4,0)
 ;A patient may apply for a copay test under the following conditions:
"RTN","DGMTCOR",5,0)
 ;  - Applicant is a veteran
"RTN","DGMTCOR",6,0)
 ;  - Applicant's primary or other eligibility does NOT contain
"RTN","DGMTCOR",7,0)
 ;    - Service Connected 50% to 100% or
"RTN","DGMTCOR",8,0)
 ;    - Aid and Attendance or
"RTN","DGMTCOR",9,0)
 ;    - Housebound or
"RTN","DGMTCOR",10,0)
 ;    - VA Pension
"RTN","DGMTCOR",11,0)
 ;    - Catastrophically Disabled
"RTN","DGMTCOR",12,0)
 ;    - Medal of Honor Recipient
"RTN","DGMTCOR",13,0)
 ;  - Primary Eligibility is NSC
"RTN","DGMTCOR",14,0)
 ;    - who has NOT been means tested
"RTN","DGMTCOR",15,0)
 ;    - who claims exposure to agent orange or ionizing radiation
"RTN","DGMTCOR",16,0)
 ;    - who is eligible for medicaid
"RTN","DGMTCOR",17,0)
 ;  - Applicants who have answered 'no' to Receiving A&A, HB, or Pension
"RTN","DGMTCOR",18,0)
 ;  - Applicants who have previously qualified and applied for a copay 
"RTN","DGMTCOR",19,0)
 ;      exemption, still qualify and have NOT been copay tested in the
"RTN","DGMTCOR",20,0)
 ;      past year
"RTN","DGMTCOR",21,0)
 ;  - Applicants who are not currently a DOM patient or inpatient
"RTN","DGMTCOR",22,0)
 ;      (they are temporarily exempt from copay testing) DG*5.3*290
"RTN","DGMTCOR",23,0)
 ;  - Applicants who do not have POW eligibility (DG*5.3*564 - HVE III)
"RTN","DGMTCOR",24,0)
 ;  - Applicants who do not meet criteria for Unemployable: 
"RTN","DGMTCOR",25,0)
 ;      Unemployable="Y", SC%>0, not receiving A&A, HB or Pension, and
"RTN","DGMTCOR",26,0)
 ;      Total VA Check Amount>0  (DG*5.3*564 - HVE III) 
"RTN","DGMTCOR",27,0)
 ;
"RTN","DGMTCOR",28,0)
 ; Input  -- DFN     Patient IEN
"RTN","DGMTCOR",29,0)
 ;           DGADDF  Means Test Add Flag (optional)
"RTN","DGMTCOR",30,0)
 ;           DGNOIVMUPD Do Not Update IVM Copay Test Flag (optional)
"RTN","DGMTCOR",31,0)
 ; Output -- DGMTCOR  Copay Test Flag
"RTN","DGMTCOR",32,0)
 ;                   (1 if eligible and 0 if not eligible)
"RTN","DGMTCOR",33,0)
 ;
"RTN","DGMTCOR",34,0)
 ;
"RTN","DGMTCOR",35,0)
EN ;
"RTN","DGMTCOR",36,0)
 Q:$G(VAFCA08)=1
"RTN","DGMTCOR",37,0)
 N DGMTI,DGMTYPT,DGMDOD
"RTN","DGMTCOR",38,0)
 D ON^DGMTCOU G:'Y ENQ
"RTN","DGMTCOR",39,0)
 S DGRGAUTO=1 ;possible change in cp status w/o call to cp event driver
"RTN","DGMTCOR",40,0)
 D CHK
"RTN","DGMTCOR",41,0)
 ;
"RTN","DGMTCOR",42,0)
 Q:($G(DGWRT)=8)!($G(DGWRT)=9)   ;brm;quit if inpatient or dom;DG*5.3*290
"RTN","DGMTCOR",43,0)
 S IVMZ10F=+$G(IVMZ10F)
"RTN","DGMTCOR",44,0)
 I 'DGMTCOR,'$G(DGADDF),'$G(DGMDOD),'IVMZ10F D NLA
"RTN","DGMTCOR",45,0)
 I DGMTCOR,'$G(DGADDF),'$G(DGMDOD) D INC
"RTN","DGMTCOR",46,0)
 I DGRGAUTO&'$G(DGADDF) D QREGAUTO ;if cp event driver not fired off & NOT a new means test
"RTN","DGMTCOR",47,0)
 ;
"RTN","DGMTCOR",48,0)
ENQ Q
"RTN","DGMTCOR",49,0)
 ;
"RTN","DGMTCOR",50,0)
CHK N STATUS,DGELIG,DGE,DGI,DGNODE,DGMDOD,DGMTDT,DGMTI,DGMTL
"RTN","DGMTCOR",51,0)
 S DGMTCOR=1,DGMT="",DGMTYPT=2
"RTN","DGMTCOR",52,0)
 I $P($G(^DPT(DFN,"VET")),U,1)'="Y" S DGMTCOR=0,DGWRT=1 G CHKQ ;NON-VET
"RTN","DGMTCOR",53,0)
 ;Added with DG*5.3*344
"RTN","DGMTCOR",54,0)
 S DGMTL=$$LST^DGMTU(DFN),DGMTI=+DGMTL,DGMTDT=$P(DGMTL,U,2)
"RTN","DGMTCOR",55,0)
 S DGMDOD=$P($G(^DPT(DFN,.35)),U)
"RTN","DGMTCOR",56,0)
 I 'DGMTI,$G(DGMDOD) S DGMTCOR=0 Q
"RTN","DGMTCOR",57,0)
 I DGMDOD,(DGMTCOR),(DGMTDT>(DGMDOD-1)) S DGMTCOR=0 G CHKQ
"RTN","DGMTCOR",58,0)
 ;
"RTN","DGMTCOR",59,0)
 I '$P($G(^DPT(DFN,.36)),U) S DGMTCOR=0,DGWRT=2 G CHKQ  ;NO PRIM ELIG
"RTN","DGMTCOR",60,0)
 I +$G(DGMDOD) S DGNOCOPF=1
"RTN","DGMTCOR",61,0)
 ;
"RTN","DGMTCOR",62,0)
 ;This doesn't work! The "AEL" x-ref not there when changing the primary
"RTN","DGMTCOR",63,0)
 ;eligibility! Problem with order that the cross-references are called
"RTN","DGMTCOR",64,0)
 ;in, DGMTR is called before the "AEL" x-ref is set!
"RTN","DGMTCOR",65,0)
 ;F  S DGMTI=$O(^DPT("AEL",DFN,DGMTI)) Q:'DGMTI  S DGMTE=$P($G(^DIC(8,DGMTI,0)),U,9) I "^1^2^4^15^"[("^"_DGMTE_"^") S DGMTCOR=0,DGWRT=3 G CHKQ
"RTN","DGMTCOR",66,0)
 ;
"RTN","DGMTCOR",67,0)
 ;
"RTN","DGMTCOR",68,0)
 S DGI=$P($G(^DPT(DFN,.36)),"^"),DGELIG=U_$P($G(^DIC(8,+DGI,0)),U,9)_U
"RTN","DGMTCOR",69,0)
 S DGI=0 F  S DGI=$O(^DPT(DFN,"E",DGI)) Q:'DGI  S DGE=$P($G(^DPT(DFN,"E",DGI,0)),U),DGELIG=DGELIG_$P($G(^DIC(8,+DGE,0)),U,9)_U
"RTN","DGMTCOR",70,0)
 I (DGELIG["^1^") S DGMTCOR=0,DGWRT=3 G CHKQ  ;SC 50-100%
"RTN","DGMTCOR",71,0)
 F DGI=.3,.362,.39,.52,.54 S DGNODE(DGI)=$G(^DPT(DFN,DGI)) ;DG*5.3*840; added MOH indicator field on loop DG*5.3*972 HM
"RTN","DGMTCOR",72,0)
 I $P(DGNODE(.362),U,12)["Y"!(DGELIG["^2^") S DGMTCOR=0,DGWRT=5 G CHKQ ;A&A
"RTN","DGMTCOR",73,0)
 I $P(DGNODE(.362),U,13)["Y"!(DGELIG["^15^") S DGMTCOR=0,DGWRT=6 G CHKQ ;HB
"RTN","DGMTCOR",74,0)
 I $P(DGNODE(.362),U,14)["Y"!(DGELIG["^4^") S DGMTCOR=0,DGWRT=7 G CHKQ ;PENSION
"RTN","DGMTCOR",75,0)
 I $P(DGNODE(.52),U,5)["Y"!(DGELIG["^18^") S DGMTCOR=0,DGWRT=10 G CHKQ ;POW (DG*5.3*564)
"RTN","DGMTCOR",76,0)
 I $P(DGNODE(.39),U,6)["Y"!(DGELIG["^21^") S DGMTCOR=0,DGWRT=12 G CHKQ ;CD (DG*5.3*840
"RTN","DGMTCOR",77,0)
 I $P(DGNODE(.3),U,5)["Y"&($P(DGNODE(.3),U,2)>0)&($P(DGNODE(.362),U,20)>0) S DGMTCOR=0,DGWRT=11 G CHKQ ;UNEMPLOYABLE (DG*5.3*564)
"RTN","DGMTCOR",78,0)
 I $P(DGNODE(.54),U,1)["Y" S DGMTCOR=0,DGWRT=13 G CHKQ ;MOH (DG*5.3*972);HM
"RTN","DGMTCOR",79,0)
 ;brm added next 3 lines for DG*5.3*290
"RTN","DGMTCOR",80,0)
 N DGDOM,DGDOM1,VAHOW,VAROOT,VAINDT,VAIP,VAERR,NOW
"RTN","DGMTCOR",81,0)
 D DOM^DGMTR I $G(DGDOM) S DGMTCOR=0,DGRGAUTO=0,DGWRT=8 Q        ;DOM
"RTN","DGMTCOR",82,0)
 D IN5^VADPT I $G(VAIP(1))'="" S DGMTCOR=0,DGRGAUTO=0,DGWRT=9 Q  ;INP
"RTN","DGMTCOR",83,0)
 ;DG*5.3*858 MT less than 1 year old as of "VFA Start Date" and point forward do not expire
"RTN","DGMTCOR",84,0)
 I DGMTI,'$$OLDMTPF^DGMTU4(DGMTDT) S STATUS=$P($G(^DGMT(408.31,+DGMTI,0)),U,3) I STATUS'="3" S DGMTCOR=0,DGWRT=4 G CHKQ
"RTN","DGMTCOR",85,0)
CHKQ Q
"RTN","DGMTCOR",86,0)
 ;
"RTN","DGMTCOR",87,0)
NLA ; Change Status to NO LONGER APPLICABLE - if appropriate
"RTN","DGMTCOR",88,0)
 ;
"RTN","DGMTCOR",89,0)
 N DGCS,DGMTI,DGMT0,DGINI,DGINR,DGVAL,DGFL,DGFLD,DGIEN,DGMTACT,TDATE
"RTN","DGMTCOR",90,0)
 S DGMTI=+$$LST^DGMTU(DFN,"",2) Q:'DGMTI!($P($G(^DGMT(408.31,DGMTI,0)),U,3)=10)
"RTN","DGMTCOR",91,0)
 ; Do not allow update of IVM test by site
"RTN","DGMTCOR",92,0)
 I $G(DGNOIVMUPD),$$IVMCVT^DGMTCOR(DGMTI) D  Q  ;Check if converted IVM MT
"RTN","DGMTCOR",93,0)
 . ;I '$G(DGMSGF),$G(DGNOIVMUPD)<2 W !,"IVM RX COPAY TEST EXISTS, BUT VISTA CALCULATES 'NO LONGER APPLICABLE'",!,"CONTACT IVM TO CLEAR UP THE DISCREPANCY - YOU CANNOT UPDATE AN IVM TEST"
"RTN","DGMTCOR",94,0)
 . S DGNOIVMUPD=2 ; Prevent double printing of the message
"RTN","DGMTCOR",95,0)
 S DGMT0=$G(^DGMT(408.31,DGMTI,0)) Q:'DGMT0
"RTN","DGMTCOR",96,0)
 S DGCS=$P(DGMT0,U,3)
"RTN","DGMTCOR",97,0)
 S TDATE=+DGMT0
"RTN","DGMTCOR",98,0)
 S DGMTACT="STA" D PRIOR^DGMTEVT
"RTN","DGMTCOR",99,0)
 ;
"RTN","DGMTCOR",100,0)
 D SAVESTAT^DGMTU4(DGMTI)
"RTN","DGMTCOR",101,0)
 ;
"RTN","DGMTCOR",102,0)
 S DGFL=408.31,DGIEN=DGMTI
"RTN","DGMTCOR",103,0)
 S DGFLD=.03 I DGCS]"" S DGVAL=DGCS D KILL^DGMTR
"RTN","DGMTCOR",104,0)
 S DGVAL=10,$P(^DGMT(408.31,DGMTI,0),"^",3)=DGVAL D SET^DGMTR
"RTN","DGMTCOR",105,0)
 S DGFLD=.17,DGVAL=DT,$P(^DGMT(408.31,DGMTI,0),"^",17)=DT D SET^DGMTR
"RTN","DGMTCOR",106,0)
 W:'$G(DGMTMSG)&'$D(ZTQUEUED) !,"COPAY TEST NO LONGER APPLICABLE"
"RTN","DGMTCOR",107,0)
 D GETINCOM^DGMTU4(DFN,TDATE)
"RTN","DGMTCOR",108,0)
 S DGMTYPT=2 D QUE^DGMTR
"RTN","DGMTCOR",109,0)
 S DGRGAUTO=0
"RTN","DGMTCOR",110,0)
NLAQ Q
"RTN","DGMTCOR",111,0)
 ;
"RTN","DGMTCOR",112,0)
INC ;Update copay status to 'INCOMPLETE' if applicable OR restore completed test
"RTN","DGMTCOR",113,0)
 N DGMTACT,DGMTI,DGFL,DGFLD,DGIEN,DGMTP,DGVAL,DGMT0,AUTOCOMP,ERROR
"RTN","DGMTCOR",114,0)
 S AUTOCOMP=0
"RTN","DGMTCOR",115,0)
 S DGMTI=+$$LST^DGMTU(DFN,"",2)
"RTN","DGMTCOR",116,0)
 D
"RTN","DGMTCOR",117,0)
 .Q:'DGMTI
"RTN","DGMTCOR",118,0)
 .I ($P($G(^DGMT(408.31,DGMTI,0)),U,3)'=10) S AUTOCOMP=1 Q
"RTN","DGMTCOR",119,0)
 .S DGMT0=$G(^DGMT(408.31,DGMTI,0)),DGCS=$P(DGMT0,U,3)
"RTN","DGMTCOR",120,0)
 .Q:'DGMT0
"RTN","DGMTCOR",121,0)
 .S DGMTACT="STA" D PRIOR^DGMTEVT
"RTN","DGMTCOR",122,0)
 .S AUTOCOMP=$$AUTOCOMP^DGMTR(DGMTI)
"RTN","DGMTCOR",123,0)
 .W:'AUTOCOMP&'$G(DGMTMSG)&'$D(ZTQUEUED) !,"COPAY EXEMPTION TEST UPDATED TO INCOMPLETE"
"RTN","DGMTCOR",124,0)
 .W:AUTOCOMP&'$G(DGMTMSG)&'$D(ZTQUEUED) !,"COPAY EXEMPTION TEST UPDATED TO ",$$GETNAME^DGMTH($P($G(^DGMT(408.31,DGMTI,0)),"^",3))
"RTN","DGMTCOR",125,0)
 .S DGMTYPT=2 D QUE^DGMTR
"RTN","DGMTCOR",126,0)
 .S DGRGAUTO=0
"RTN","DGMTCOR",127,0)
 ;
"RTN","DGMTCOR",128,0)
 I $G(IVMZ10)'="UPLOAD IN PROGRESS",$G(DGQSENT)'=1,'AUTOCOMP,'$$OPEN^IVMCQ2(DFN),'$$SENT^IVMCQ2(DFN) D QRYQUE2^IVMCQ2(DFN,$G(DUZ),0,$G(XQY)) S DGQSENT=1 I '$D(ZTQUEUED),'$G(DGMSGF) W !!,"Financial query queued to be sent to HEC..."
"RTN","DGMTCOR",129,0)
 ;
"RTN","DGMTCOR",130,0)
INCQ Q
"RTN","DGMTCOR",131,0)
 ;
"RTN","DGMTCOR",132,0)
QREGAUTO ;Queues off test done by IB recalculating CP status
"RTN","DGMTCOR",133,0)
 ;  Input: DFN
"RTN","DGMTCOR",134,0)
 ;  Action: Possible update of Copay Status
"RTN","DGMTCOR",135,0)
 ;
"RTN","DGMTCOR",136,0)
 Q:'$D(^IBA(354.1,"APIDT",DFN,1))  ;No action if no status on file
"RTN","DGMTCOR",137,0)
 S ZTDESC="CHECK PATIENT FILE CHANGES VS CP STATUS",ZTDTH=$H,ZTRTN="REGAUTO^IBARXEU5",ZTSAVE("DFN")="",ZTIO=""
"RTN","DGMTCOR",138,0)
 D ^%ZTLOAD
"RTN","DGMTCOR",139,0)
 K ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","DGMTCOR",140,0)
 Q
"RTN","DGMTCOR",141,0)
 ;
"RTN","DGMTCOR",142,0)
IVMCVT(IVMTIEN) ; Check for a converted IVM Means Test
"RTN","DGMTCOR",143,0)
 ;  Input  IVMTIEN - MT IEN to check
"RTN","DGMTCOR",144,0)
 ;  Return 1 - if converted MT
"RTN","DGMTCOR",145,0)
 ;         0 - if not a converted MT
"RTN","DGMTCOR",146,0)
 ;
"RTN","DGMTCOR",147,0)
 N FLAG,IVMAR
"RTN","DGMTCOR",148,0)
 S FLAG=0
"RTN","DGMTCOR",149,0)
 I '$G(IVMTIEN) G IVMQ
"RTN","DGMTCOR",150,0)
 D GETS^DIQ(408.31,IVMTIEN,".23;.25","E","IVMAR")
"RTN","DGMTCOR",151,0)
 ; To identify an IVM converted test in the ANNUAL MEANS TEST, #408.31, if the Source of Test (#.23)
"RTN","DGMTCOR",152,0)
 ; is equal to 'IVM' OR the Date IVM Verified MT Completed (#.25) is populated, then the test should
"RTN","DGMTCOR",153,0)
 ; be considered a converted test. 
"RTN","DGMTCOR",154,0)
 I IVMAR(408.31,IVMTIEN_",",.23,"E")="IVM" S FLAG=1 G IVMQ
"RTN","DGMTCOR",155,0)
 I IVMAR(408.31,IVMTIEN_",",.25,"E")]"" S FLAG=1 G IVMQ
"RTN","DGMTCOR",156,0)
IVMQ ;
"RTN","DGMTCOR",157,0)
 Q FLAG
"RTN","DGMTCOU")
0^19^B6208786
"RTN","DGMTCOU",1,0)
DGMTCOU ;ALB/CAW/HM - Copay Utilities ; 12/10/92
"RTN","DGMTCOU",2,0)
 ;;5.3;Registration;**45,182,972**;Aug 13, 1993;Build 80
"RTN","DGMTCOU",3,0)
 ;
"RTN","DGMTCOU",4,0)
EDT(DFN,DGDT) ;Display patients current copay test information and provide
"RTN","DGMTCOU",5,0)
 ;        the user with the option of proceeding with adding a
"RTN","DGMTCOU",6,0)
 ;        copay test or editing an existing copay test
"RTN","DGMTCOU",7,0)
 ;         Input  -- DFN    Patient IEN
"RTN","DGMTCOU",8,0)
 ;                   DGDT   Date/Time
"RTN","DGMTCOU",9,0)
 ;         Output -- None
"RTN","DGMTCOU",10,0)
 ;
"RTN","DGMTCOU",11,0)
 ;
"RTN","DGMTCOU",12,0)
 N DGMTERR,SOURCE,DGMTYPT
"RTN","DGMTCOU",13,0)
 S DGMTYPT=2
"RTN","DGMTCOU",14,0)
 ;
"RTN","DGMTCOU",15,0)
 ; obtain lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTCOU",16,0)
 I $$LOCK^DGMTUTL(DFN)
"RTN","DGMTCOU",17,0)
 ;
"RTN","DGMTCOU",18,0)
 S DGMTI=+$$LST^DGMTU(DFN,DGDT,2)
"RTN","DGMTCOU",19,0)
 S DGMT0=$G(^DGMT(408.31,DGMTI,0)),DGMTDT=+DGMT0 S DGMTS=$P(DGMT0,"^",3)
"RTN","DGMTCOU",20,0)
 I $$YR(DFN,DGDT,+DGMT0) S DGMTS=""
"RTN","DGMTCOU",21,0)
 G:$P($$RXST^IBARXEU(DFN,DT),U,3)=2010&('$$YR(DFN,DT,DGMTI)) EDTQ I $P($G(^DPT(DFN,.54)),"^")="Y" D DISP^IBARXEU(DFN,DGDT,2) W ! ;DG*5.3*972 HM if MOH="Y" do not display
"RTN","DGMTCOU",22,0)
 ;
"RTN","DGMTCOU",23,0)
 ;If test is uneditable, print error message and allow user to view test
"RTN","DGMTCOU",24,0)
 S SOURCE=$P($G(^DGMT(408.31,DGMTI,0)),U,23)
"RTN","DGMTCOU",25,0)
 I SOURCE,'$P($G(^DG(408.34,SOURCE,0)),U,2) D  D:$G(DGMTERR) DISPLAY^DGMTU23(DGMTI,2),PAUSE^DGMTE G EDTQ
"RTN","DGMTCOU",26,0)
 .W !,"The source of this test makes the test uneditable."
"RTN","DGMTCOU",27,0)
 .S DIR("A")="Would you like to view the copay test",DIR("B")="NO",DIR(0)="Y"
"RTN","DGMTCOU",28,0)
 .D ^DIR K DIR S DGMTERR=Y I $D(DTOUT)!($D(DUOUT)) K DGMTERR,DTOUT,DUOUT
"RTN","DGMTCOU",29,0)
 ;
"RTN","DGMTCOU",30,0)
 S DIR("A")="Do you wish to "_$S(DGMTS="":"add a",1:"edit the")_" copay test at this time"
"RTN","DGMTCOU",31,0)
 S DIR("B")=$S(DGMTS=10:"YES",1:"NO"),DIR(0)="Y"
"RTN","DGMTCOU",32,0)
 W ! D ^DIR G EDTQ:$D(DTOUT)!($D(DUOUT))
"RTN","DGMTCOU",33,0)
 I Y,DGMTS]"" S DGMTYPT=2,DGMTACT="EDT",DGMTROU="EDTQ^DGMTCOU" G EN^DGMTSC
"RTN","DGMTCOU",34,0)
 I Y,DGMTS="" S DGMTYPT=2,DGMTACT="ADD",DGMTROU="EDTQ^DGMTCOU" S DGMTDT=DT D ADD^DGMTA G EN^DGMTSC
"RTN","DGMTCOU",35,0)
EDTQ K DGMT0,DGMTACT,DGMTDT,DGMTI,DGMTROU,DGMTS,DIR,Y
"RTN","DGMTCOU",36,0)
 ;
"RTN","DGMTCOU",37,0)
 ; release lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTCOU",38,0)
 D UNLOCK^DGMTUTL(DFN)
"RTN","DGMTCOU",39,0)
 Q
"RTN","DGMTCOU",40,0)
 ;
"RTN","DGMTCOU",41,0)
YR(DFN,DGDT,DGMT0) ;Check to see if test is greater than 365 days
"RTN","DGMTCOU",42,0)
 ;        Input  -- DFN     Patient IEN
"RTN","DGMTCOU",43,0)
 ;                  DGDT    Date/Time to check against
"RTN","DGMTCOU",44,0)
 ;                 DGMT0    Zeroth node of Copay test
"RTN","DGMTCOU",45,0)
 ;        Output -- 1 = TEST IS 365 OR MORE DAYS OLD
"RTN","DGMTCOU",46,0)
 ;                  0 = TEST IS LESS THAN 365 DAYS OLD
"RTN","DGMTCOU",47,0)
 ;
"RTN","DGMTCOU",48,0)
 N X,X1,X2,DGLDYR,DGY S DGY=1
"RTN","DGMTCOU",49,0)
 S DGLDYR=$E(DGMT0,1,3)_"1231"
"RTN","DGMTCOU",50,0)
 I DGMTI S X1=DGDT,X2=$P(DGMT0,U,2) D ^%DTC I X<365,DGDT'>DGLDYR S DGY=0
"RTN","DGMTCOU",51,0)
 Q DGY
"RTN","DGMTCOU",52,0)
 ;
"RTN","DGMTCOU",53,0)
ON ; Check to see of copay software is on
"RTN","DGMTCOU",54,0)
 ;    Input - none
"RTN","DGMTCOU",55,0)
 ;   Output - 1 = YES
"RTN","DGMTCOU",56,0)
 ;            0 = NO
"RTN","DGMTCOU",57,0)
 I $P(^DG(43,1,0),U,41) S Y=1 Q
"RTN","DGMTCOU",58,0)
 S Y=0
"RTN","DGMTCOU",59,0)
 Q
"RTN","DGMTCOU",60,0)
ASKNW() ;
"RTN","DGMTCOU",61,0)
 Q 0
"RTN","DGMTCOU1")
0^20^B14542603
"RTN","DGMTCOU1",1,0)
DGMTCOU1 ;ALB/REW,LD,JAN,AEG,LBD,BDB,HM - COPAY UTILITIES;8/13/04 8:31am
"RTN","DGMTCOU1",2,0)
 ;;5.3;Registration;**33,45,54,335,358,401,436,445,564,840,858,972**;Aug 13, 1993;Build 80
"RTN","DGMTCOU1",3,0)
AUTO(DFN,AUTOEX) ;
"RTN","DGMTCOU1",4,0)
 ; Returns 1 if Exempt from CP w/o needing MT/CP information
"RTN","DGMTCOU1",5,0)
 ;  INPUT: DFN     [Required]
"RTN","DGMTCOU1",6,0)
 ;         AUTOEX  [Optional]
"RTN","DGMTCOU1",7,0)
 ;  RETURNS 1=Exempt 0=Not Exempt
"RTN","DGMTCOU1",8,0)
 ;
"RTN","DGMTCOU1",9,0)
 ; Hold the Auto exclusion information for later use
"RTN","DGMTCOU1",10,0)
 S AUTOEX=$$AUTOINFO(DFN)
"RTN","DGMTCOU1",11,0)
 ;
"RTN","DGMTCOU1",12,0)
 Q AUTOEX["1"
"RTN","DGMTCOU1",13,0)
AUTOINFO(DFN) ;
"RTN","DGMTCOU1",14,0)
 ; This returns info needed to IB to see if MT information needs to be
"RTN","DGMTCOU1",15,0)
 ; looked at to determine Copay Exemption Status
"RTN","DGMTCOU1",16,0)
 ;
"RTN","DGMTCOU1",17,0)
 ;  INPUT: DFN - IEN of Patient File (Required)
"RTN","DGMTCOU1",18,0)
 ;  OUTPUT:(SC>50%^REC.A&A^REC.HB^REC.PEN^DOM PT^NON.VET^INPT^POW^UNEMP^CD^MOH)
"RTN","DGMTCOU1",19,0)
 ;  Piece: (   1  ^   2   ^   3  ^   4   ^   5  ^   6   ^  7 ^ 8 ^  9  ^10 ^ 11)
"RTN","DGMTCOU1",20,0)
 ;  PIECES =1 IF TRUE
"RTN","DGMTCOU1",21,0)
 ;
"RTN","DGMTCOU1",22,0)
 ; Supported ICR #423: Supports use of AUTOINFO^DGMTCOU1(DFN) to check if a veteran
"RTN","DGMTCOU1",23,0)
 ;                      is MOH recipient
"RTN","DGMTCOU1",24,0)
 ;
"RTN","DGMTCOU1",25,0)
 N DGALLEL,DGDOM,DGEL,DGNODE,DGX,DGYR,VADMVT,DGI
"RTN","DGMTCOU1",26,0)
 S DGX=""
"RTN","DGMTCOU1",27,0)
 I $P($G(^DPT(DFN,"VET")),U,1)'="Y" S $P(DGX,U,6)=1 G QTAUTO ;NON-VET
"RTN","DGMTCOU1",28,0)
 S DGEL=0,DGALLEL=U
"RTN","DGMTCOU1",29,0)
 F  S DGEL=$O(^DPT("AEL",DFN,DGEL)) Q:'DGEL  S DGALLEL=DGALLEL_$P($G(^DIC(8,DGEL,0)),U,9)_U
"RTN","DGMTCOU1",30,0)
 F DGI=.3,.362,.39,.52,.54 S DGNODE(DGI)=$G(^DPT(DFN,DGI)) ;DG*5.3*840 ;added MOH indicator field on loop DG*5.3*972 HM
"RTN","DGMTCOU1",31,0)
 I (DGALLEL["^1^") S $P(DGX,U,1)=1 G QTAUTO ;SC>50
"RTN","DGMTCOU1",32,0)
 I $P(DGNODE(.362),U,12)["Y"!(DGALLEL["^2^") S $P(DGX,U,2)=1 G QTAUTO ;A&A
"RTN","DGMTCOU1",33,0)
 I $P(DGNODE(.362),U,13)["Y"!(DGALLEL["^15^") S $P(DGX,U,3)=1 G QTAUTO ;HB
"RTN","DGMTCOU1",34,0)
 I $P(DGNODE(.362),U,14)["Y"!(DGALLEL["^4^") S $P(DGX,U,4)=1 G QTAUTO ;PENSION
"RTN","DGMTCOU1",35,0)
 I $P(DGNODE(.52),U,5)["Y"!(DGALLEL["^18^") S $P(DGX,U,8)=1 G QTAUTO ;POW
"RTN","DGMTCOU1",36,0)
 I $P(DGNODE(.39),U,6)["Y"!(DGALLEL["^21^") S $P(DGX,U,10)=1 G QTAUTO ;CD DG*5.3*840
"RTN","DGMTCOU1",37,0)
 I $P(DGNODE(.3),U,5)["Y"&($P(DGNODE(.3),U,2)>0)&($P(DGNODE(.362),U,20)>0) S $P(DGX,U,9)=1 G QTAUTO ;UNEMPLOYABLE
"RTN","DGMTCOU1",38,0)
 I $P(DGNODE(.54),U,1)["Y" S $P(DGX,U,11)=1 G QTAUTO ; MOH DG*5.3*972 HM
"RTN","DGMTCOU1",39,0)
 N DGDOM,DGDOM1,VAHOW,VAROOT,VAINDT,VAIP,VAERR
"RTN","DGMTCOU1",40,0)
 D DOM^DGMTR I $G(DGDOM) S $P(DGX,U,5)=1 G QTAUTO ;DOM
"RTN","DGMTCOU1",41,0)
 D IN5^VADPT I $G(VAIP(1))'="" S $P(DGX,U,7)=1 G QTAUTO ;INPAT
"RTN","DGMTCOU1",42,0)
QTAUTO Q DGX
"RTN","DGMTCOU1",43,0)
 ;
"RTN","DGMTCOU1",44,0)
LST(DFN,DGDT,DGMTYPT1) ;Last Copay Exemption or Means Test for a patient
"RTN","DGMTCOU1",45,0)
 ;   Input  -- DFN   Patient IEN
"RTN","DGMTCOU1",46,0)
 ;             DGDT  Date/Time  (Optional- default today@2359)
"RTN","DGMTCOU1",47,0)
 ;             DGMTYPT1 (Optional (1:MT, 2:CP, Null/Default or 3:Either)
"RTN","DGMTCOU1",48,0)
 ;   Output -- MT IEN^Date of Test ^Status Name^Status Code^Type of Test
"RTN","DGMTCOU1",49,0)
 ;      Piece:   1   ^     2              3         4            5
"RTN","DGMTCOU1",50,0)
 ;
"RTN","DGMTCOU1",51,0)
 N DGCPDT,DGIDT,DGIDT,DGMTDT,DGMTI,Y
"RTN","DGMTCOU1",52,0)
 S DGIDT=$S($G(DGDT)>0:-DGDT,1:-DT) S:'$P(DGIDT,".",2) DGIDT=DGIDT_.2359
"RTN","DGMTCOU1",53,0)
 I '$D(DGMTYPT1) S DGMTYPT1=3
"RTN","DGMTCOU1",54,0)
 I DGMTYPT1=3 D  ;EITHER
"RTN","DGMTCOU1",55,0)
 .S DGMTDT=+$O(^DGMT(408.31,"AID",1,DFN,DGIDT))
"RTN","DGMTCOU1",56,0)
 .S DGCPDT=+$O(^DGMT(408.31,"AID",2,DFN,DGIDT))
"RTN","DGMTCOU1",57,0)
 .S DGMTYPT1=$S(DGCPDT<DGMTDT:2,(DGCPDT>DGMTDT):1,$D(^DGMT(408.31,"AS",1,3,+DGMTDT,DFN)):2,1:1)
"RTN","DGMTCOU1",58,0)
 S DGMTI=+$$LST^DGMTU(DFN,$P(DGIDT,"-",2),DGMTYPT1)
"RTN","DGMTCOU1",59,0)
 I $D(^DGMT(408.31,DGMTI,0)) S Y=DGMTI_"^"_$P(^(0),"^")_"^"_$$MTS^DGMTU(DFN,+$P(^(0),"^",3))_"^"_DGMTYPT1
"RTN","DGMTCOU1",60,0)
 Q $G(Y)
"RTN","DGMTCOU1",61,0)
THRESH(DGDT) ;PRINTS THE YEAR'S COPAY THRESHOLDS
"RTN","DGMTCOU1",62,0)
 ;UPDATE 11/15/00 TO REFLECT YEAR'S COPAY THRESHOLDS PER VHA DIRECTIVE
"RTN","DGMTCOU1",63,0)
 ;99-064
"RTN","DGMTCOU1",64,0)
 N DGCPLEV,DGDEP,DGNODE,DGTYPE,Y
"RTN","DGMTCOU1",65,0)
 I '$D(DGDT) S DGDT=DT
"RTN","DGMTCOU1",66,0)
 S DGDT=DGDT\1
"RTN","DGMTCOU1",67,0)
 S Y=DGDT X ^DD("DD") W !,?2,"Net Annual Income Thresholds on ",Y,":"
"RTN","DGMTCOU1",68,0)
 S DGTYPE=$S(DGDT<2961201:2,1:1)
"RTN","DGMTCOU1",69,0)
 S DGCPLEV=$$THRES^IBARXEU1(DGDT,DGTYPE,0)
"RTN","DGMTCOU1",70,0)
 I DGCPLEV']"" W !,"None for this date..." G THRESHQT
"RTN","DGMTCOU1",71,0)
 W !,?5,"Num. Dependents: ",?25,"0 (Self)",?42,1,?52,2,?62,3,?72,4
"RTN","DGMTCOU1",72,0)
 W !,?5,"Net Income:"
"RTN","DGMTCOU1",73,0)
 F DGDEP=0:1:4 W ?(23+(DGDEP*10)),$J(+$$THRES^IBARXEU1(DGDT,DGTYPE,DGDEP),10)
"RTN","DGMTCOU1",74,0)
THRESHQT Q
"RTN","DGMTCOU1",75,0)
DISPMAS(DFN) ; Displays Co
"RTN","DGMTCOU1",76,0)
 N DGCPS,DGEX,Y,AUTOEX
"RTN","DGMTCOU1",77,0)
 S DGEX=$$AUTO(DFN,.AUTOEX)
"RTN","DGMTCOU1",78,0)
 I $P($G(AUTOEX),U,5)!($P($G(AUTOEX),U,7)) Q
"RTN","DGMTCOU1",79,0)
 I DGEX W !,"Patient is exempt from Copay."
"RTN","DGMTCOU1",80,0)
 I 'DGEX D
"RTN","DGMTCOU1",81,0)
 .S DGCPS=$$LST365(DFN,DT,2),Y=$P(DGCPS,U,2)
"RTN","DGMTCOU1",82,0)
 .I DGCPS]"" D
"RTN","DGMTCOU1",83,0)
 ..X ^DD("DD")
"RTN","DGMTCOU1",84,0)
 ..W !,"Patient's Copay Status is ",$P(DGCPS,U,3)
"RTN","DGMTCOU1",85,0)
 ..W ".  Last Test Date: ",Y,"."
"RTN","DGMTCOU1",86,0)
 Q
"RTN","DGMTCOU1",87,0)
LST365(DFN,DGDT,DGMTYPT1) ;RETURNS CURRENT MT/CP  (WITHIN 1 YEAR OF VFA START DATE)
"RTN","DGMTCOU1",88,0)
 ;  Input:   DGDT - IB DATE
"RTN","DGMTCOU1",89,0)
 ;           DGMTYPT1 (Optional (1:MT, 2:CP, Null/Default or 3:Either)
"RTN","DGMTCOU1",90,0)
 ;  Output -- MT IEN^Date of Test ^Status Name^Status Code^Type of Test
"RTN","DGMTCOU1",91,0)
 ;     Piece:   1   ^     2              3         4            5
"RTN","DGMTCOU1",92,0)
 N DGLST
"RTN","DGMTCOU1",93,0)
 S DGDT=$G(DGDT)
"RTN","DGMTCOU1",94,0)
 I '$D(DGMTYPT1) S DGMTYPT1=3
"RTN","DGMTCOU1",95,0)
 S DGLST=$$LST(DFN,DGDT,DGMTYPT1)
"RTN","DGMTCOU1",96,0)
 S:$P(DGLST,U,4)="N" DGLST=$$LST(DFN,DGDT,2)
"RTN","DGMTCOU1",97,0)
 ;DG*5.3*858 MT less than 1 year old as of "VFA Start Date" and point forward do not expire
"RTN","DGMTCOU1",98,0)
 S:$$OLDMTPF^DGMTU4($P(DGLST,U,2)) DGLST=""
"RTN","DGMTCOU1",99,0)
 Q DGLST
"RTN","DGMTR")
0^29^B72013665
"RTN","DGMTR",1,0)
DGMTR ;ALB/RMO,CAW,SCG,AEG,SCG,AEG,LBD,BDB,HM - Check Means Test Requirements;7/8/05 2:30pm
"RTN","DGMTR",2,0)
 ;;5.3;Registration;**45,93,114,137,141,147,177,182,146,305,326,314,344,402,426,456,495,672,688,773,840,841,858,972**;Aug 13, 1993;Build 80
"RTN","DGMTR",3,0)
 ;A patient requires a means test under the following conditions:
"RTN","DGMTR",4,0)
 ;  - Primary Eligibility is NSC OR patient is SC 0% non-compensable
"RTN","DGMTR",5,0)
 ;  - who is NOT receiving disability retirement from the military
"RTN","DGMTR",6,0)
 ;  - who is NOT eligible for medicaid
"RTN","DGMTR",7,0)
 ;  - who is NOT on a DOM ward
"RTN","DGMTR",8,0)
 ;  - who has NOT been means tested in the past year
"RTN","DGMTR",9,0)
 ;  - who is NOT a Purple Heart recipient
"RTN","DGMTR",10,0)
 ;  - who is NOT Catastrophically Disabled
"RTN","DGMTR",11,0)
 ;  - who is NOT Medal of Honor recipient
"RTN","DGMTR",12,0)
 ; 
"RTN","DGMTR",13,0)
 ; Input  -- DFN     Patient IEN
"RTN","DGMTR",14,0)
 ;           DGADDF  Means Test Add Flag  (Optional- default none)
"RTN","DGMTR",15,0)
 ;                   (1 if using the 'Add a New Means Test' option)
"RTN","DGMTR",16,0)
 ;           DGMSGF  Means Test Msg Flag  (Optional- default none)
"RTN","DGMTR",17,0)
 ;                   (1 to suppress messages)
"RTN","DGMTR",18,0)
 ;           DGNOIVMUPD No IVM Update Flag (Optional - default allow)
"RTN","DGMTR",19,0)
 ;                   (1 if updating of an IVM test is not allowed)
"RTN","DGMTR",20,0)
 ; Output -- DGREQF  Means Test Require Flag
"RTN","DGMTR",21,0)
 ;                   (1 if required and 0 if not required)
"RTN","DGMTR",22,0)
 ;           DGDOM1  DOM Patient Flag (defined and set to 1 if
"RTN","DGMTR",23,0)
 ;                               patient currently on a DOM ward)
"RTN","DGMTR",24,0)
 ;           DGNOCOPF = 1 to suppress copay test prompt 0 otherwise
"RTN","DGMTR",25,0)
 ;                      used in CP^DG10.  Killed there as well.
"RTN","DGMTR",26,0)
 ;           If NOT using the 'Add a New Means Test' option,
"RTN","DGMTR",27,0)
 ;           a REQUIRED date of test will be added for the
"RTN","DGMTR",28,0)
 ;           patient if it is required.
"RTN","DGMTR",29,0)
 ;           If a means test is required and the current
"RTN","DGMTR",30,0)
 ;           status is NO LONGER REQUIRED, the last date of
"RTN","DGMTR",31,0)
 ;           test and current means test status will be
"RTN","DGMTR",32,0)
 ;           updated to REQUIRED unless the DGNOIVMUPD flag is set to 1
"RTN","DGMTR",33,0)
 ;           and the current primary means test is an IVM test. 
"RTN","DGMTR",34,0)
 ;           If a means test is no longer required the
"RTN","DGMTR",35,0)
 ;           last date of test and the current means test
"RTN","DGMTR",36,0)
 ;           status will also be updated to NO LONGER REQUIRED unless
"RTN","DGMTR",37,0)
 ;           the DGNOIVMUPD flag is set to 1 and the current primary
"RTN","DGMTR",38,0)
 ;           means test is an IVM test.
"RTN","DGMTR",39,0)
EN N DGCS,DGDOM,DGMT0,DGMTI,DGMTYPT,OLD,DGRGAUTO,DGQSENT,DGMTLTD,DGMDOD,DGMTDT
"RTN","DGMTR",40,0)
 ;DG*5.3*146 change to exit if during patient merge process
"RTN","DGMTR",41,0)
 Q:$G(VAFCA08)=1
"RTN","DGMTR",42,0)
 ;DGMTCOR is needed if uploading copay test
"RTN","DGMTR",43,0)
 I $G(RXPRIME)'="DGMTU4" N DGMTCOR
"RTN","DGMTR",44,0)
 S (DGQSENT,DGREQF)=0,(OLD,DGMTYPT)=1
"RTN","DGMTR",45,0)
 I $D(^DPT(DFN,.36)) S X=^(.36) D
"RTN","DGMTR",46,0)
 . I $P($G(^DIC(8,+X,0)),"^",9)=5!($$SC(DFN)) S DGREQF=1
"RTN","DGMTR",47,0)
 . I $P(X,"^",12)=1 S DGREQF=0 ;new field, DG 672
"RTN","DGMTR",48,0)
 . I $P(X,"^",13)=1 S DGREQF=0 ;new field, DG 672 
"RTN","DGMTR",49,0)
 S (DGMTI,DGMT0)="",DGMTI=+$$LST^DGMTU(DFN)
"RTN","DGMTR",50,0)
 S:DGMTI DGMT0=$G(^DGMT(408.31,DGMTI,0))
"RTN","DGMTR",51,0)
 ;Added with DG*5.3*344
"RTN","DGMTR",52,0)
 S:DGMTI DGMTDT=$P(DGMT0,U)
"RTN","DGMTR",53,0)
 S DGMDOD=$P($G(^DPT(DFN,.35)),U)
"RTN","DGMTR",54,0)
 I 'DGMTI,$G(DGMDOD) D EN^DGMTCOR S DGREQF=0 Q
"RTN","DGMTR",55,0)
 I DGREQF S:$G(^DPT(DFN,.38)) DGREQF=0
"RTN","DGMTR",56,0)
 I DGREQF D DOM S:$G(DGDOM) DGREQF=0
"RTN","DGMTR",57,0)
 S DGCS=$P(DGMT0,"^",3)
"RTN","DGMTR",58,0)
 S DGMTLTD=+DGMT0,DGNOCOPF=0
"RTN","DGMTR",59,0)
 I +$G(DGMDOD) S DGNOCOPF=1
"RTN","DGMTR",60,0)
 ;DG*5.3*858 MT less than 1 year old as of "VFA Start Date" and point forward do not expire
"RTN","DGMTR",61,0)
 I DGCS S OLD=$$OLDMTPF^DGMTU4(+DGMT0)
"RTN","DGMTR",62,0)
 ;Purple Heart Recipient ;brm 10/02/00 added 1 line below
"RTN","DGMTR",63,0)
 I $P($G(^DPT(DFN,.53)),U)="Y" S DGREQF=0
"RTN","DGMTR",64,0)
 ;Catastrophically disabled
"RTN","DGMTR",65,0)
 I $P($G(^DPT(DFN,.39)),U,6)="Y" S DGREQF=0 ;DG*5.3*840
"RTN","DGMTR",66,0)
 ;Medal of Honor DG*5.3*840.  Functionality removed with DG*5.3*841
"RTN","DGMTR",67,0)
 I $P($G(^DPT(DFN,.54)),U)="Y" S DGREQF=0 ;Line uncommented so if MOH ="Y", update Means Test to No Longer Required - DG*5.3*972 HM
"RTN","DGMTR",68,0)
 D
"RTN","DGMTR",69,0)
 .;DG*5.3*858 for 1 yr old nol means tests, if not nol, set a mt required stub  
"RTN","DGMTR",70,0)
 .I DGREQF,DGCS=3,$$OLD^DGMTU4(+DGMT0) D ADD Q
"RTN","DGMTR",71,0)
 .I DGREQF,DGCS=3,'$$OLD^DGMTU4(+DGMT0) D REQ Q
"RTN","DGMTR",72,0)
 .I DGREQF,'$G(DGADDF),((DGCS=6)!(DGCS=2)),$P(DGMT0,U,11)=1,DGMTLTD>2991005 S DGREQF=0,DGNOCOPF=1 Q
"RTN","DGMTR",73,0)
 .; next line added 2/19/02 - DG*5.3*426
"RTN","DGMTR",74,0)
 .I DGREQF,'$G(DGADDF),$G(DGCS)=6,+$P(DGMT0,U,14),+$P(DGMT0,U,11) S DGREQF=0,DGNOCOPF=1 Q
"RTN","DGMTR",75,0)
 .I DGREQF,'$G(DGADDF),(('DGCS)!(OLD)),'$G(DGMDOD) D ADD Q
"RTN","DGMTR",76,0)
 .I 'DGREQF,DGCS,DGCS'=3,'$G(DGDOM),'$G(DGMDOD),'+$G(IVMZ10F) D NOL Q
"RTN","DGMTR",77,0)
 ;be sure to check whether or not patient is subject to RX copay!
"RTN","DGMTR",78,0)
 D EN^DGMTCOR
"RTN","DGMTR",79,0)
 Q
"RTN","DGMTR",80,0)
 ;Check if patient is in a DOM
"RTN","DGMTR",81,0)
 ;  call to DOM checks if patient currently on a DOM ward
"RTN","DGMTR",82,0)
 ;                                     (called from EN)
"RTN","DGMTR",83,0)
 ;  call to DOM1 checks if patient on a DOM ward for a specific date
"RTN","DGMTR",84,0)
 ;    before call to DOM1 - N VAINDT,VADMVT,DGDOM,DGDOM1
"RTN","DGMTR",85,0)
 ;                          S VAINDT=specific date
"RTN","DGMTR",86,0)
 ;                          S DFN=Patient IEN
"RTN","DGMTR",87,0)
 ;                 output - DGDOM & DGDOM1 (defined and set to 1 if
"RTN","DGMTR",88,0)
 ;                          patient on a DOM ward for specific date)
"RTN","DGMTR",89,0)
DOM N VAINDT,VADMVT
"RTN","DGMTR",90,0)
DOM1 D ADM^VADPT2
"RTN","DGMTR",91,0)
 I VADMVT,$P($G(^DG(43,1,0)),"^",21),$D(^DIC(42,+$P($G(^DGPM(VADMVT,0)),"^",6),0)),$P(^(0),"^",3)="D" S (DGDOM,DGDOM1)=1
"RTN","DGMTR",92,0)
 Q
"RTN","DGMTR",93,0)
SC(DFN) ;Check if patient is SC 0% non-compensable
"RTN","DGMTR",94,0)
 ; Input  -- DFN     Patient IEN
"RTN","DGMTR",95,0)
 ; Output -- 1=Yes and 0=No
"RTN","DGMTR",96,0)
 ;     No if:
"RTN","DGMTR",97,0)
 ;        No total annual VA check amount
"RTN","DGMTR",98,0)
 ;        POW STATUS INDICATOR is yes
"RTN","DGMTR",99,0)
 ;        Secondary Eligibility is one of the following:
"RTN","DGMTR",100,0)
 ;           A&A, NSC, VA PENSION
"RTN","DGMTR",101,0)
 ;           HOUSEBOUND, MEXICAN BORDER WAR, WWI, POW
"RTN","DGMTR",102,0)
 N DG,DGE,DGF,Y
"RTN","DGMTR",103,0)
 S Y=0
"RTN","DGMTR",104,0)
 ;Primary eligibility is SC LESS THAN 50%
"RTN","DGMTR",105,0)
 I $D(^DPT(DFN,.36)),$P($G(^DIC(8,+^(.36),0)),"^",9)=3 S Y=1
"RTN","DGMTR",106,0)
 G:'Y SCQ
"RTN","DGMTR",107,0)
 ;Service connected percentage is 0
"RTN","DGMTR",108,0)
 I $P($G(^DPT(DFN,.3)),"^",2)'=0 S Y=0 G SCQ
"RTN","DGMTR",109,0)
 ;No Total annual VA check amount
"RTN","DGMTR",110,0)
 I $P($G(^DPT(DFN,.362)),"^",20) S Y=0 G SCQ
"RTN","DGMTR",111,0)
 ;POW STATUS INDICATOR
"RTN","DGMTR",112,0)
 I $P($G(^DPT(DFN,.52)),"^",5)="Y" S Y=0 G SCQ
"RTN","DGMTR",113,0)
 ;Purple Heart Indicator
"RTN","DGMTR",114,0)
 I $P($G(^DPT(DFN,.53)),"^")="Y" S Y=0 G SCQ
"RTN","DGMTR",115,0)
 ;Secondary Eligibility
"RTN","DGMTR",116,0)
 F DG=2,4,15:1:18 S DGE(DG)=""
"RTN","DGMTR",117,0)
 S DG=0 F  S DG=$O(^DPT(DFN,"E","B",DG)) Q:'DG  D SELIG I DGF,$D(DGE(+DGF)) S Y=0 Q
"RTN","DGMTR",118,0)
SCQ Q +$G(Y)
"RTN","DGMTR",119,0)
ADD ;Add a required means test
"RTN","DGMTR",120,0)
 N DGMTA,DGMTACT,DGMTDT,DGMTI,DGMTP,ERROR
"RTN","DGMTR",121,0)
 W:'$G(DGMSGF) !,"MEANS TEST REQUIRED"
"RTN","DGMTR",122,0)
 S DGMTACT="ADD" D PRIOR^DGMTEVT
"RTN","DGMTR",123,0)
 S DGMTDT=DT D ADD^DGMTA
"RTN","DGMTR",124,0)
 I DGMTI>0 S DGMTYPT=1 D
"RTN","DGMTR",125,0)
 .N DATA S DATA(.03)=$$GETSTAT^DGMTH("R",1) I $$UPD^DGENDBS(408.31,DGMTI,.DATA)
"RTN","DGMTR",126,0)
 .D GETINCOM^DGMTU4(DFN,DT)
"RTN","DGMTR",127,0)
 .D QUE
"RTN","DGMTR",128,0)
 I $G(IVMZ10)'="UPLOAD IN PROGRESS",'$$OPEN^IVMCQ2(DFN),'$$SENT^IVMCQ2(DFN) D QRYQUE2^IVMCQ2(DFN,$G(DUZ),0,$G(XQY)) S DGQSENT=1 I '$D(ZTQUEUED),'$G(DGMSGF) W !!,"Financial query queued to be sent to HEC..."
"RTN","DGMTR",129,0)
 Q
"RTN","DGMTR",130,0)
REQ ;Update means test status to REQUIRED
"RTN","DGMTR",131,0)
 N DGMTA,AUTOCOMP,DGMTE,ERROR
"RTN","DGMTR",132,0)
 ;may have set prior MT for means test upload
"RTN","DGMTR",133,0)
 I $G(MTPRIME)'="DGMTU4" N DGMTP,DGMTACT S DGMTACT="STA" D PRIOR^DGMTEVT
"RTN","DGMTR",134,0)
 S AUTOCOMP=$$AUTOCOMP(DGMTI)
"RTN","DGMTR",135,0)
 ;if a test were auto-completed, don't want another being added inadvertently
"RTN","DGMTR",136,0)
 I AUTOCOMP,$G(DGADDF) S DGADDF=0
"RTN","DGMTR",137,0)
 I AUTOCOMP S DGCS=$P($G(^DGMT(408.31,DGMTI,0)),"^",3)
"RTN","DGMTR",138,0)
 I $G(IVMZ10)'="UPLOAD IN PROGRESS",'AUTOCOMP,'$$OPEN^IVMCQ2(DFN),'$$SENT^IVMCQ2(DFN) D QRYQUE2^IVMCQ2(DFN,$G(DUZ),0,$G(XQY)) S DGQSENT=1 I '$D(ZTQUEUED),'$G(DGMSGF) W !!,"Financial query queued to be sent to HEC..."
"RTN","DGMTR",139,0)
 I ('AUTOCOMP),('$G(DGMSGF)) W !,"MEANS TEST REQUIRED"
"RTN","DGMTR",140,0)
 I (AUTOCOMP),('$G(DGMSGF)) W !,"CURRENT MEANS TEST STATUS IS ",$$GETNAME^DGMTH(DGCS)
"RTN","DGMTR",141,0)
 S DGMTYPT=1
"RTN","DGMTR",142,0)
 D QUE
"RTN","DGMTR",143,0)
 Q
"RTN","DGMTR",144,0)
AUTOCOMP(DGMTI) ;
"RTN","DGMTR",145,0)
 ;Will either automatically complete the test (RX copay or means test) 
"RTN","DGMTR",146,0)
 ;based on the Test Determined Status, or will change the status to
"RTN","DGMTR",147,0)
 ;Required for means tests or Incomplete for Rx copay tests
"RTN","DGMTR",148,0)
 ;Input:
"RTN","DGMTR",149,0)
 ;  DGMTI - the ien of the test
"RTN","DGMTR",150,0)
 ;Output:
"RTN","DGMTR",151,0)
 ;  Function value - 1 if the test was completed, 0 otherwise
"RTN","DGMTR",152,0)
 N NODE0,NODE2,DATA,RET,LINKIEN,DGINR,DGINI,ERROR,CODE,TYPE,DFN,TDATE
"RTN","DGMTR",153,0)
 S RET=0
"RTN","DGMTR",154,0)
 Q:'$G(DGMTI) RET
"RTN","DGMTR",155,0)
 S NODE0=$G(^DGMT(408.31,DGMTI,0))
"RTN","DGMTR",156,0)
 Q:(NODE0="") RET
"RTN","DGMTR",157,0)
 S TYPE=$P(NODE0,"^",19)
"RTN","DGMTR",158,0)
 S DFN=$P(NODE0,"^",2)
"RTN","DGMTR",159,0)
 S TDATE=+NODE0
"RTN","DGMTR",160,0)
 S NODE2=$G(^DGMT(408.31,DGMTI,2))
"RTN","DGMTR",161,0)
 ;get test-determined status code
"RTN","DGMTR",162,0)
 S CODE=$$GETCODE^DGMTH($P(NODE2,"^",3))
"RTN","DGMTR",163,0)
 ;if means test
"RTN","DGMTR",164,0)
 I TYPE=1 D
"RTN","DGMTR",165,0)
 .S DATA(.03)=$$GETSTAT^DGMTH("R",1),DATA(.17)=""
"RTN","DGMTR",166,0)
 .I (CODE'=""),"ACGP"[CODE D
"RTN","DGMTR",167,0)
 ..S RET=1
"RTN","DGMTR",168,0)
 ..S DATA(.03)=$P(NODE2,"^",3)
"RTN","DGMTR",169,0)
 ..;determine status if there is a hardship
"RTN","DGMTR",170,0)
 ..I $P(NODE0,"^",20) D
"RTN","DGMTR",171,0)
 ...S DATA(.03)=$$GETSTAT^DGMTH($S(CODE="P":"P",CODE="C"&($P(NODE0,U,27)>$P(NODE0,U,12)):"G",1:"A"),1)
"RTN","DGMTR",172,0)
 .I (CODE="")!(CODE'=""&"ACGP"'[CODE) D
"RTN","DGMTR",173,0)
 ..; Check for another test in the current year and convert IAI records, if needed
"RTN","DGMTR",174,0)
 ..S CONVRT=$$VRCHKUP^DGMTU2(1,,TDATE)
"RTN","DGMTR",175,0)
 ..S DATA(2.11)=1
"RTN","DGMTR",176,0)
 ;RX copay test
"RTN","DGMTR",177,0)
 I TYPE=2 D
"RTN","DGMTR",178,0)
 .S DATA(.03)=$$GETSTAT^DGMTH("I",2),DATA(.17)=""
"RTN","DGMTR",179,0)
 .I (CODE'=""),"EM"[CODE D
"RTN","DGMTR",180,0)
 ..S RET=1
"RTN","DGMTR",181,0)
 ..S DATA(.03)=$P(NODE2,"^",3)
"RTN","DGMTR",182,0)
 .I (CODE="")!(CODE'=""&"EM"'[CODE) D
"RTN","DGMTR",183,0)
 ..; Check for another test in the current year and convert IAI records, if needed
"RTN","DGMTR",184,0)
 ..S CONVRT=$$VRCHKUP^DGMTU2(2,,TDATE)
"RTN","DGMTR",185,0)
 ..S DATA(2.11)=1
"RTN","DGMTR",186,0)
 I '$$UPD^DGENDBS(408.31,DGMTI,.DATA,.ERROR) W:'$G(DGMSGF) ERROR
"RTN","DGMTR",187,0)
 ;restore the pointers from the Income Relation file (408.22) to this
"RTN","DGMTR",188,0)
 ;test, using the linked test
"RTN","DGMTR",189,0)
 S LINKIEN=$P(NODE2,"^",6)
"RTN","DGMTR",190,0)
 I LINKIEN D
"RTN","DGMTR",191,0)
 .S DGINI=0 F  S DGINI=$O(^DGMT(408.22,"AMT",LINKIEN,DFN,DGINI)) Q:'DGINI  S DGINR=$O(^DGMT(408.22,"AMT",LINKIEN,DFN,DGINI,"")) I $P($G(^DGMT(408.22,+DGINR,"MT")),"^")]"" D
"RTN","DGMTR",192,0)
 ..K DATA
"RTN","DGMTR",193,0)
 ..S DATA(31)=DGMTI
"RTN","DGMTR",194,0)
 ..I $$UPD^DGENDBS(408.22,+DGINR,.DATA)
"RTN","DGMTR",195,0)
 D GETINCOM^DGMTU4(DFN,TDATE)
"RTN","DGMTR",196,0)
 Q RET
"RTN","DGMTR",197,0)
NOL ;Update means test status to NO LONGER REQUIRED
"RTN","DGMTR",198,0)
 N DGMTA,DGINI,DGINR,DGMTDT,DATA
"RTN","DGMTR",199,0)
 I $G(DGNOIVMUPD),$$IVMCVT^DGMTCOR(DGMTI) D  G NOLQ ; Check for converted IVM MT
"RTN","DGMTR",200,0)
 . ;I '$G(DGMSGF),$G(DGNOIVMUPD)<2 W !,"IVM MEANS TEST EXISTS, BUT VISTA CALCULATES 'NO LONGER REQUIRED'",!,"CONTACT IVM TO CLEAR UP THE DISCREPANCY - YOU CANNOT UPDATE AN IVM TEST"
"RTN","DGMTR",201,0)
 . S DGNOIVMUPD=2 ; Prevent double printing of the message
"RTN","DGMTR",202,0)
 W:'$G(DGMSGF) !,"MEANS TEST NO LONGER REQUIRED"
"RTN","DGMTR",203,0)
 ;may have set prior MT for means test upload
"RTN","DGMTR",204,0)
 I $G(MTPRIME)'="DGMTU4" N DGMTP,DGMTACT S DGMTACT="STA" D PRIOR^DGMTEVT
"RTN","DGMTR",205,0)
 ;save the Test Determined Status
"RTN","DGMTR",206,0)
 D SAVESTAT^DGMTU4(DGMTI)
"RTN","DGMTR",207,0)
 S DATA(.03)=3,DATA(.17)=DT I $$UPD^DGENDBS(408.31,DGMTI,.DATA)
"RTN","DGMTR",208,0)
 D QUE
"RTN","DGMTR",209,0)
 ;create a Rx copay test based on MT if needed
"RTN","DGMTR",210,0)
 D COPYRX^DGMTR1(DFN,DGMTI)
"RTN","DGMTR",211,0)
NOLQ Q
"RTN","DGMTR",212,0)
SET ;Set Cross-reference
"RTN","DGMTR",213,0)
 N D0,DA,DIV,DGIX,X
"RTN","DGMTR",214,0)
 S DA=DGIEN,X=DGVAL,DGIX=0
"RTN","DGMTR",215,0)
 F  S DGIX=$O(^DD(DGFL,DGFLD,1,DGIX)) Q:'DGIX  X ^(DGIX,1) S X=DGVAL
"RTN","DGMTR",216,0)
 Q
"RTN","DGMTR",217,0)
KILL ;Kill Cross-reference
"RTN","DGMTR",218,0)
 N D0,DA,DIV,DGIX,X
"RTN","DGMTR",219,0)
 S DA=DGIEN,X=DGVAL,DGIX=0
"RTN","DGMTR",220,0)
 F  S DGIX=$O(^DD(DGFL,DGFLD,1,DGIX)) Q:'DGIX  X ^(DGIX,2) S X=DGVAL
"RTN","DGMTR",221,0)
 Q
"RTN","DGMTR",222,0)
QUE ;Queue means test event driver
"RTN","DGMTR",223,0)
 D AFTER^DGMTEVT
"RTN","DGMTR",224,0)
 S ZTDESC="MEANS TEST EVENT DRIVER",ZTDTH=$H,ZTRTN="EN^DGMTEVT"
"RTN","DGMTR",225,0)
 F I="DFN","DGMTACT","DGMTI","DGMTP","DGMTA","DGMTYPT" S ZTSAVE(I)=""
"RTN","DGMTR",226,0)
 S ZTSAVE("DGMTINF")=1
"RTN","DGMTR",227,0)
 I $D(IVMZ10) S ZTSAVE("IVMZ10")=""
"RTN","DGMTR",228,0)
 I $D(DGENUPLD) S ZTSAVE("DGENUPLD")=""
"RTN","DGMTR",229,0)
 S ZTIO="" D ^%ZTLOAD
"RTN","DGMTR",230,0)
 K ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","DGMTR",231,0)
 Q
"RTN","DGMTR",232,0)
SELIG ;Check if secondary eligibility code missing from ELIGIBILITY CODE
"RTN","DGMTR",233,0)
 ;file (#8) or entry in file #8 not pointing to MAS ELIGIBILITY
"RTN","DGMTR",234,0)
 ;CODE file (#8.1)
"RTN","DGMTR",235,0)
 N DGTXT
"RTN","DGMTR",236,0)
 S DGF=$G(^DIC(8,+DG,0)) I DGF="" D  Q
"RTN","DGMTR",237,0)
 .S DGTXT(4)="Entry with an IEN OF "_DG_" missing from"
"RTN","DGMTR",238,0)
 .S DGTXT(5)="the ELIGIBILITY CODE file (#8)"
"RTN","DGMTR",239,0)
 .D MAIL^DGMTR1
"RTN","DGMTR",240,0)
 .Q
"RTN","DGMTR",241,0)
 S DGF=$P(DGF,"^",9) I DGF=""!('$D(^DIC(8.1,+DGF,0))) D
"RTN","DGMTR",242,0)
 .S DGTXT(4)="ELIGIBILITY CODE file (#8) entry with an IEN OF "_DG_" doesn't"
"RTN","DGMTR",243,0)
 .S DGTXT(5)="have a valid pointer to the MAS ELIGIBILITY CODE file (#8.1)"
"RTN","DGMTR",244,0)
 .D MAIL^DGMTR1
"RTN","DGMTR",245,0)
 .S DGF=""
"RTN","DGMTR",246,0)
 .Q
"RTN","DGMTR",247,0)
 Q
"RTN","DGMTR1")
0^30^B34321057
"RTN","DGMTR1",1,0)
DGMTR1 ;ALB/CJM,SCG,LBD,BDB,HM - Check Means Test Requirements Cont'd;3/25/92  09:51
"RTN","DGMTR1",2,0)
 ;;5.3;Registration;**182,344,433,456,564,688,840,858,972**;Aug 13, 1993;Build 80
"RTN","DGMTR1",3,0)
 ;
"RTN","DGMTR1",4,0)
COPYRX(DFN,MTIEN) ;
"RTN","DGMTR1",5,0)
 ;Creates a Pharmacy Copay test based on the means test if the vet is
"RTN","DGMTR1",6,0)
 ;subject to the Rx copayment and the income screening was already
"RTN","DGMTR1",7,0)
 ;completed
"RTN","DGMTR1",8,0)
 ;1/16/2002 - Changes added for LTC Copay Phase II (DG*5.3*433)
"RTN","DGMTR1",9,0)
 ;Creates a Pharmacy Copay test based on a LTC copay exemption test
"RTN","DGMTR1",10,0)
 ;(type 4) if the veteran is exempt from means test
"RTN","DGMTR1",11,0)
 ;
"RTN","DGMTR1",12,0)
 N NODE0,RXSTATUS,Y,DGMT,DGMTYPT,DGNODE,DATA,SUB,COMMENTS,RXIEN,DGMTACT,DGMTI,DGMTP,DGMTA,NODE2,CODE,QUIT,TRIES,ERROR,TYPE
"RTN","DGMTR1",13,0)
 ;
"RTN","DGMTR1",14,0)
 S DGMTP="",DGMTACT="ADD"
"RTN","DGMTR1",15,0)
 D ON^DGMTCOU G:'Y COPYRXQ
"RTN","DGMTR1",16,0)
 I $$CHK(DFN) D
"RTN","DGMTR1",17,0)
 .S NODE0=$G(^DGMT(408.31,MTIEN,0))
"RTN","DGMTR1",18,0)
 .Q:NODE0=""
"RTN","DGMTR1",19,0)
 .S NODE2=$G(^DGMT(408.31,MTIEN,2))
"RTN","DGMTR1",20,0)
 .;
"RTN","DGMTR1",21,0)
 .;get type of test (1=means test; 4=LTC copay exemption test)
"RTN","DGMTR1",22,0)
 .S TYPE=$P(NODE0,"^",19)
"RTN","DGMTR1",23,0)
 .;
"RTN","DGMTR1",24,0)
 .;must have been completed
"RTN","DGMTR1",25,0)
 .S CODE=$$GETCODE^DGMTH($P(NODE0,"^",3))
"RTN","DGMTR1",26,0)
 .S QUIT=1
"RTN","DGMTR1",27,0)
 .I (CODE'=""),("ACGP01"[CODE) S QUIT=0
"RTN","DGMTR1",28,0)
 .S CODE=$$GETCODE^DGMTH($P(NODE2,"^",3))
"RTN","DGMTR1",29,0)
 .I (CODE'=""),("ACGP01"[CODE) S QUIT=0
"RTN","DGMTR1",30,0)
 .Q:QUIT
"RTN","DGMTR1",31,0)
 .;
"RTN","DGMTR1",32,0)
 .;DG*5.3*858 MT less than 1 year old as of "VFA Start Date" and point forward do not expire
"RTN","DGMTR1",33,0)
 .;Q:($$FMDIFF^XLFDT(DT,$P(NODE0,"^"))>365)
"RTN","DGMTR1",34,0)
 .Q:$$OLDMTPF^DGMTU4($P(NODE0,"^"))
"RTN","DGMTR1",35,0)
 .Q:($P(NODE0,"^",14))  ;declined to provide income information
"RTN","DGMTR1",36,0)
 .Q:($P(NODE0,"^",26))  ;refused to sign the test
"RTN","DGMTR1",37,0)
 .F TRIES=1:1 D  Q:(TRIES>3)
"RTN","DGMTR1",38,0)
 ..S DGNODE=$$LST^DGMTU(DFN,$S((DT>$P(NODE0,"^",2)):DT,1:$P(NODE0,"^",2)),2),RXIEN=+DGNODE
"RTN","DGMTR1",39,0)
 ..;
"RTN","DGMTR1",40,0)
 ..;mark existing test as non-primary
"RTN","DGMTR1",41,0)
 ..I RXIEN,($E($P(DGNODE,"^",2),1,3)=$E($P(NODE0,"^"),1,3)) D
"RTN","DGMTR1",42,0)
 ...S DATA(2)=0 I $$UPD^DGENDBS(408.31,RXIEN,.DATA)
"RTN","DGMTR1",43,0)
 ..E  S TRIES=4
"RTN","DGMTR1",44,0)
 .;
"RTN","DGMTR1",45,0)
 .S RXIEN=$P(NODE2,"^",6)
"RTN","DGMTR1",46,0)
 .;if already copied, reuse the same record
"RTN","DGMTR1",47,0)
 .I RXIEN,$P($G(^DGMT(408.31,RXIEN,2)),"^",6)=MTIEN D
"RTN","DGMTR1",48,0)
 ..S DGMTI=RXIEN
"RTN","DGMTR1",49,0)
 ..; Check for another test in the current year and convert IAI records, if needed
"RTN","DGMTR1",50,0)
 ..S CONVRT=$$VRCHKUP^DGMTU2(2,TYPE,$P(^DGMT(408.31,MTIEN,0),"^"),$P(^DGMT(408.31,RXIEN,0),"^"))
"RTN","DGMTR1",51,0)
 .E  D  Q:'DGMTI
"RTN","DGMTR1",52,0)
 ..;This call works. Adding via the ADD^DGENDBS encountered an error
"RTN","DGMTR1",53,0)
 ..S DGMTDT=$P(NODE0,"^") S DGMTYPT=2 D ADD^DGMTA
"RTN","DGMTR1",54,0)
 .;
"RTN","DGMTR1",55,0)
 .S DATA(.019)=2
"RTN","DGMTR1",56,0)
 .S DATA(.03)=""
"RTN","DGMTR1",57,0)
 .F SUB=.01,.02,.04,.05,.06,.07,.14,.15,.18,.23,.24,.25 S DATA(SUB)=$P(NODE0,"^",(SUB/.01))
"RTN","DGMTR1",58,0)
 .S DATA(2)=1
"RTN","DGMTR1",59,0)
 .S DATA(2.02)=$P(NODE2,"^",2)
"RTN","DGMTR1",60,0)
 .S DATA(2.05)=$P(NODE2,"^",5)
"RTN","DGMTR1",61,0)
 .I TYPE=1 D
"RTN","DGMTR1",62,0)
 ..S DATA(2.06)=MTIEN
"RTN","DGMTR1",63,0)
 ..S COMMENTS("LINES",1,0)="This Rx Copay Test was automatically created based on a completed means test"
"RTN","DGMTR1",64,0)
 ..S COMMENTS("LINES",2,0)="which was changed to NO LONGER REQUIRED. All data including income"
"RTN","DGMTR1",65,0)
 ..S COMMENTS("LINES",3,0)="screening was copied from the test on "_$$FMTE^XLFDT($$NOW^XLFDT)_"."
"RTN","DGMTR1",66,0)
 .I TYPE=4 D
"RTN","DGMTR1",67,0)
 ..S COMMENTS("LINES",1,0)="This Rx Copay Test was automatically created based on a completed"
"RTN","DGMTR1",68,0)
 ..S COMMENTS("LINES",2,0)="LTC copay exemption test. All data including income screening"
"RTN","DGMTR1",69,0)
 ..S COMMENTS("LINES",3,0)="was copied from the test on "_$$FMTE^XLFDT($$NOW^XLFDT)_"."
"RTN","DGMTR1",70,0)
 .S DATA(50)="COMMENTS(""LINES"")"
"RTN","DGMTR1",71,0)
 .S (DATA(.03),DATA(2.03))=$$RXSTATUS(MTIEN)
"RTN","DGMTR1",72,0)
 .S DATA(2.11)=1
"RTN","DGMTR1",73,0)
 .I $$UPD^DGENDBS(408.31,DGMTI,.DATA,.ERROR)
"RTN","DGMTR1",74,0)
 .K DATA
"RTN","DGMTR1",75,0)
 .S:TYPE=1 DATA(2.06)=DGMTI
"RTN","DGMTR1",76,0)
 .S:TYPE=4 DATA(2.08)=DGMTI
"RTN","DGMTR1",77,0)
 .I $$UPD^DGENDBS(408.31,MTIEN,.DATA,.ERROR)
"RTN","DGMTR1",78,0)
 .D TRANSFER^DGMTU4(DFN,MTIEN,DGMTI)
"RTN","DGMTR1",79,0)
 .D QUE^DGMTR
"RTN","DGMTR1",80,0)
COPYRXQ ;
"RTN","DGMTR1",81,0)
 K ERROR
"RTN","DGMTR1",82,0)
 Q
"RTN","DGMTR1",83,0)
 ;
"RTN","DGMTR1",84,0)
RXSTATUS(MTIEN) ;
"RTN","DGMTR1",85,0)
 ;Determins RX Copay Status based on the means test
"RTN","DGMTR1",86,0)
 ;
"RTN","DGMTR1",87,0)
 Q:('$G(MTIEN)) ""
"RTN","DGMTR1",88,0)
 N NODE0,NODE,PIECE,IBSTATUS,MTSTATUS
"RTN","DGMTR1",89,0)
 S NODE0=$G(^DGMT(408.31,MTIEN,0))
"RTN","DGMTR1",90,0)
 Q:(NODE0="") ""
"RTN","DGMTR1",91,0)
 F PIECE=1,2,4,5,14,15,18 S $P(NODE,"^",PIECE)=$P(NODE0,"^",PIECE)
"RTN","DGMTR1",92,0)
 S $P(NODE,"^",19)=2
"RTN","DGMTR1",93,0)
 S IBSTATUS=+$$INCDT^IBARXEU1(NODE)
"RTN","DGMTR1",94,0)
 S MTSTATUS=$S(IBSTATUS=1:"E",IBSTATUS=2:"M",1:"")
"RTN","DGMTR1",95,0)
 Q:(MTSTATUS="") ""
"RTN","DGMTR1",96,0)
 Q $O(^DG(408.32,"AC",2,MTSTATUS,0))
"RTN","DGMTR1",97,0)
 ;
"RTN","DGMTR1",98,0)
CHK(DFN) ;
"RTN","DGMTR1",99,0)
 ;can the veteran take a RX copay test?
"RTN","DGMTR1",100,0)
 N DGMTI,DGMTCOR,DGNODE,DGELIG,DGI,DGE
"RTN","DGMTR1",101,0)
 S DGMTCOR=1
"RTN","DGMTR1",102,0)
 ;
"RTN","DGMTR1",103,0)
 I $P($G(^DPT(DFN,"VET")),U,1)'="Y" S DGMTCOR=0 G CHKQ ;NON-VET
"RTN","DGMTR1",104,0)
 S DGI=$P($G(^DPT(DFN,.36)),U) I 'DGI S DGMTCOR=0 G CHKQ ;NO PRIM ELIG
"RTN","DGMTR1",105,0)
 S DGELIG=U_$P($G(^DIC(8,+DGI,0)),U,9)_U
"RTN","DGMTR1",106,0)
 S DGI=0 F  S DGI=$O(^DPT(DFN,"E",DGI)) Q:'DGI  S DGE=$P($G(^DPT(DFN,"E",DGI,0)),U),DGELIG=DGELIG_$P($G(^DIC(8,+DGE,0)),U,9)_U
"RTN","DGMTR1",107,0)
 I (DGELIG["^1^") S DGMTCOR=0 G CHKQ  ;SC 50-100%
"RTN","DGMTR1",108,0)
 F DGI=.3,.362,.39,.52,.54 S DGNODE(DGI)=$G(^DPT(DFN,DGI)) ;added MOH indicator field on loop DG*5.3*972 HM
"RTN","DGMTR1",109,0)
 I $P(DGNODE(.362),U,12)["Y"!(DGELIG["^2^") S DGMTCOR=0 G CHKQ ;A&A
"RTN","DGMTR1",110,0)
 I $P(DGNODE(.362),U,13)["Y"!(DGELIG["^15^") S DGMTCOR=0 G CHKQ ;HB
"RTN","DGMTR1",111,0)
 I $P(DGNODE(.362),U,14)["Y"!(DGELIG["^4^") S DGMTCOR=0 G CHKQ ;PENSION
"RTN","DGMTR1",112,0)
 I $P(DGNODE(.52),U,5)["Y"!(DGELIG["^18^") S DGMTCOR=0 G CHKQ ;POW
"RTN","DGMTR1",113,0)
 I $P(DGNODE(.39),U,6)["Y"!(DGELIG["^21^") S DGMTCOR=0 G CHKQ ;CD DG*5.3*840
"RTN","DGMTR1",114,0)
 I $P(DGNODE(.3),U,5)["Y"&($P(DGNODE(.3),U,2)>0)&($P(DGNODE(.362),U,20)>0) S DGMTCOR=0 G CHKQ ;UNEMPLOYABLE
"RTN","DGMTR1",115,0)
 I $P(DGNODE(.54),U,1)["Y" S DGMTCOR=0 G CHKQ ;if MOH="Y" Q DG*5.3*972 HM
"RTN","DGMTR1",116,0)
CHKQ ;
"RTN","DGMTR1",117,0)
 Q DGMTCOR
"RTN","DGMTR1",118,0)
MAIL ; Send a mailman msg to user/ INCONSISTENCY EDIT GROUP with results
"RTN","DGMTR1",119,0)
 N %,DGB,I,VA,VADM,VAERR,Y,XMDUZ,XMSUB,XMTEXT,XMY,XMZ
"RTN","DGMTR1",120,0)
 D DEM^VADPT
"RTN","DGMTR1",121,0)
 S XMSUB="Patient "_VADM(1)_" has an invalid secondary eligibility"
"RTN","DGMTR1",122,0)
 S XMDUZ="PIMS PACKAGE",XMY(DUZ)="",XMY(.5)=""
"RTN","DGMTR1",123,0)
 S DGB=+$P($G(^DG(43,1,"NOT")),"^",6)
"RTN","DGMTR1",124,0)
 I $D(^XMB(3.8,DGB,0)) S XMY("G."_$P($G(^XMB(3.8,DGB,0)),"^"))=""
"RTN","DGMTR1",125,0)
 S XMTEXT="DGTXT("
"RTN","DGMTR1",126,0)
 D NOW^%DTC S Y=% D DD^%DT
"RTN","DGMTR1",127,0)
 S DGTXT(1)="On "_Y_"  "_VADM(1)_" ("_VA("BID")_")"
"RTN","DGMTR1",128,0)
 S DGTXT(2)="has an invalid secondary eligibility"
"RTN","DGMTR1",129,0)
 S DGTXT(3)="  "
"RTN","DGMTR1",130,0)
 ;que mailman message
"RTN","DGMTR1",131,0)
 N DIFROM,I,ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","DGMTR1",132,0)
 F I="DGTXT(","XMDUZ","XMSUB","XMTEXT","XMY(" S ZTSAVE(I)=""
"RTN","DGMTR1",133,0)
 S ZTDESC="MAILMAN MSG FOR INVALID ELIGIBILITY CODE FILE ENTRIES"
"RTN","DGMTR1",134,0)
 S ZTDTH=$$NOW^XLFDT(),ZTIO="",ZTRTN="^XMD"
"RTN","DGMTR1",135,0)
 D ^%ZTLOAD
"RTN","DGMTR1",136,0)
 Q
"RTN","DGMTUB")
0^17^B8986083
"RTN","DGMTUB",1,0)
DGMTUB ;ALB/RMO/CAW,CPM,LBD,HM - Means Test Billing Utilities ;7/22/02 9:32am
"RTN","DGMTUB",2,0)
 ;;5.3;Registration;**33,456,481,972**;Aug 13, 1993;Build 80
"RTN","DGMTUB",3,0)
 ;
"RTN","DGMTUB",4,0)
BIL(DFN,DGDT) ;Determine if patient is pending adjudication
"RTN","DGMTUB",5,0)
 ;        or category C and has agreed to pay the deductible
"RTN","DGMTUB",6,0)
 ;         Input  -- DFN   Patient IEN
"RTN","DGMTUB",7,0)
 ;                   DGDT  Date/Time
"RTN","DGMTUB",8,0)
 ;         Output -- 1=TRUE and 0=FALSE
"RTN","DGMTUB",9,0)
 ;
"RTN","DGMTUB",10,0)
 ; Supported ICR #643: Supports use of BIL^DGMTUB(DFN,DGDT) to set the award date
"RTN","DGMTUB",11,0)
 ;                      for a veteran who is MOH recipient
"RTN","DGMTUB",12,0)
 ;
"RTN","DGMTUB",13,0)
 N MT0,MTI,TDAT,EDAT,BILL,STOP
"RTN","DGMTUB",14,0)
 S (BILL,STOP)=0
"RTN","DGMTUB",15,0)
 I '$G(DFN) G BILQ
"RTN","DGMTUB",16,0)
 S:'$G(DGDT) DGDT=DT
"RTN","DGMTUB",17,0)
 ;
"RTN","DGMTUB",18,0)
 S TDAT=-(DGDT+.1)
"RTN","DGMTUB",19,0)
 F  S TDAT=$O(^DGMT(408.31,"AID",1,DFN,TDAT)) Q:'TDAT!STOP  D
"RTN","DGMTUB",20,0)
 .S MTI=0 F  S MTI=$O(^DGMT(408.31,"AID",1,DFN,TDAT,MTI)) Q:'MTI!STOP  D
"RTN","DGMTUB",21,0)
 ..S MT0=$G(^DGMT(408.31,MTI,0)) Q:'$G(^("PRIM"))  ; not primary MT
"RTN","DGMTUB",22,0)
 ..;
"RTN","DGMTUB",23,0)
 ..; - evaluate the test if the category isn't 'REQUIRED'
"RTN","DGMTUB",24,0)
 ..I MT0,$P(MT0,"^",3)'=1 D
"RTN","DGMTUB",25,0)
 ...S EDAT=$S($P(MT0,"^",3)=3:+MT0,1:$P(MT0,"^",7))
"RTN","DGMTUB",26,0)
 ...;
"RTN","DGMTUB",27,0)
 ...; - if the patient is not billable on the evaluation date, quit
"RTN","DGMTUB",28,0)
 ...I EDAT\1=(DGDT\1),'$$CK(MT0) S STOP=1 Q
"RTN","DGMTUB",29,0)
 ...;
"RTN","DGMTUB",30,0)
 ...; - if MOH indicator is yes, quit
"RTN","DGMTUB",31,0)
 ...I $P($G(^DPT(DFN,.54)),U)="Y" S STOP=1 Q  ; DG*5.3*972 HM
"RTN","DGMTUB",32,0)
 ...;
"RTN","DGMTUB",33,0)
 ...; - if the test effective date is prior to the evaluation date,
"RTN","DGMTUB",34,0)
 ...;   obtain the billable status and quit
"RTN","DGMTUB",35,0)
 ...I EDAT'>DGDT S BILL=$$CK(MT0),STOP=1
"RTN","DGMTUB",36,0)
 ;
"RTN","DGMTUB",37,0)
BILQ Q BILL
"RTN","DGMTUB",38,0)
 ;
"RTN","DGMTUB",39,0)
BILST(DFN) ;Determine the last date patient was pending adjudication
"RTN","DGMTUB",40,0)
 ;        or category C and agreed to pay the deductible
"RTN","DGMTUB",41,0)
 ;         Input  -- DFN   Patient IEN
"RTN","DGMTUB",42,0)
 ;         Output -- Last effective date
"RTN","DGMTUB",43,0)
 N DGDT,DGENDT,DGMT0,DGMTI,DGMTIDT,DGSTDT
"RTN","DGMTUB",44,0)
 S (DGDT,DGENDT,DGSTDT)=""
"RTN","DGMTUB",45,0)
 I '$G(DFN) G BILSTQ
"RTN","DGMTUB",46,0)
 I $$BIL(DFN,DT) S DGDT=DT G BILSTQ
"RTN","DGMTUB",47,0)
 ;
"RTN","DGMTUB",48,0)
 S DGMTIDT="" F  S DGMTIDT=$O(^DGMT(408.31,"AID",1,DFN,DGMTIDT)) Q:DGMTIDT=""!(DGDT)  D
"RTN","DGMTUB",49,0)
 .S DGMTI=0 F  S DGMTI=$O(^DGMT(408.31,"AID",1,DFN,DGMTIDT,DGMTI)) Q:DGMTI=""!(DGDT)  D
"RTN","DGMTUB",50,0)
 ..I $D(^DGMT(408.31,DGMTI,0)),$G(^("PRIM")) S DGMT0=^(0) D CKDT
"RTN","DGMTUB",51,0)
 ;
"RTN","DGMTUB",52,0)
BILSTQ Q +$P($G(DGDT),".")
"RTN","DGMTUB",53,0)
 ;
"RTN","DGMTUB",54,0)
CKDT ;Check the date of test
"RTN","DGMTUB",55,0)
 N DGMTS,X,X1,X2,Y
"RTN","DGMTUB",56,0)
 S Y=$$CK(DGMT0) S DGMTS=$P(DGMT0,"^",3) S:Y DGSTDT=$P(DGMT0,"^",7) S:'Y DGENDT=$S(DGMTS=1:DGENDT,DGMTS=3:$P(DGMT0,"^"),1:$P(DGMT0,"^",7))
"RTN","DGMTUB",57,0)
 I DGSTDT S:'DGENDT DGDT=DT I DGENDT S X1=DGENDT,X2=-1 D C^%DTC S DGDT=X
"RTN","DGMTUB",58,0)
 Q
"RTN","DGMTUB",59,0)
 ;
"RTN","DGMTUB",60,0)
CK(DGMT0) ;Check if patient is pending adjudication or category C
"RTN","DGMTUB",61,0)
 ;        and has agreed to pay the deductible
"RTN","DGMTUB",62,0)
 ;        Add check for GMT status (DG*5.3*456)
"RTN","DGMTUB",63,0)
 ;         Input  -- DGMT0  Annual Means Test 0th node
"RTN","DGMTUB",64,0)
 ;         Output -- 1=TRUE and 0=FALSE
"RTN","DGMTUB",65,0)
 N DGMTATP,DGMTS,Y
"RTN","DGMTUB",66,0)
 S DGMTS=$P(DGMT0,"^",3),DGMTATP=$P(DGMT0,"^",11)
"RTN","DGMTUB",67,0)
 I ("^2^6^16^"[("^"_DGMTS_"^"))&(DGMTATP'=0) S Y=1
"RTN","DGMTUB",68,0)
 Q +$G(Y)
"RTN","DGMTUB",69,0)
 ;
"RTN","DGMTUB",70,0)
GMT(DFN,DGDT) ;Determine if patient is GMT Copay Required as of the date
"RTN","DGMTUB",71,0)
 ;        specified
"RTN","DGMTUB",72,0)
 ;         Input  -- DFN   Patient IEN
"RTN","DGMTUB",73,0)
 ;                   DGDT  Date/Time
"RTN","DGMTUB",74,0)
 ;         Output -- 1=Patient had GMT status or Pending Adjudication
"RTN","DGMTUB",75,0)
 ;                      for GMT as of date specified
"RTN","DGMTUB",76,0)
 ;                   0=Patient did not have GMT status
"RTN","DGMTUB",77,0)
 ;
"RTN","DGMTUB",78,0)
 N DGMT,DGSTA,DGMT0,DGMTG
"RTN","DGMTUB",79,0)
 I '$G(DFN) Q 0
"RTN","DGMTUB",80,0)
 S:'$G(DGDT) DGDT=DT
"RTN","DGMTUB",81,0)
 ; Get last primary means test with status other than Required
"RTN","DGMTUB",82,0)
 S DGMT=$$LVMT^DGMTU(DFN,DGDT),DGSTA=$P(DGMT,U,4)
"RTN","DGMTUB",83,0)
 I DGSTA="G" Q 1  ; status = GMT copay required
"RTN","DGMTUB",84,0)
 S DGMT0=$G(^DGMT(408.31,+DGMT,0)),DGMTG=$P(DGMT0,U,27)
"RTN","DGMTUB",85,0)
 I DGMTG="" Q 0
"RTN","DGMTUB",86,0)
 ; If status = Pending Adjudication and GMT Threhold is greater than
"RTN","DGMTUB",87,0)
 ; MT Threshold, then patient is Pending Adjudication for GMT
"RTN","DGMTUB",88,0)
 I DGSTA="P",DGMTG>$P(DGMT0,U,12) Q 1
"RTN","DGMTUB",89,0)
 Q 0
"RTN","DGRP6")
0^15^B27900055
"RTN","DGRP6",1,0)
DGRP6 ;ALB/MRL,LBD,TMK,JAM,HM - REGISTRATION SCREEN 6/SERVICE INFORMATION ;5/12/11 10:49am
"RTN","DGRP6",2,0)
 ;;5.3;Registration;**161,247,343,397,342,451,672,689,797,841,842,947,972**;Aug 13, 1993;Build 80
"RTN","DGRP6",3,0)
 N DIPA,LIN,XX,Z1,GLBL
"RTN","DGRP6",4,0)
 S DGRPS=6 D H^DGRPU F I=.32,.321,.322,.36,.385,.52,.53,.54 S DGRP(I)=$S($D(^DPT(DFN,I)):^(I),1:"")
"RTN","DGRP6",5,0)
 S (DGRPW,Z)=1 D WW2^DGRPV S Z=" Service Branch/Component",Z1=27 D WW1^DGRPV S Z="Service #",Z1=16 D WW1^DGRPV S Z=" Entered",Z1=12 D WW1^DGRPV S Z="Separated",Z1=12 D WW1^DGRPV W "Discharge"
"RTN","DGRP6",6,0)
 W !?4,"------------------------",?30,"---------",?47,"-------",?58,"---------",?70,"---------"
"RTN","DGRP6",7,0)
 ;Get MSEs from Military Service Episode sub-file #2.3216 (DG*5.3*797)
"RTN","DGRP6",8,0)
 K ^TMP("DGRP6",$J)
"RTN","DGRP6",9,0)
 S GLBL=$NA(^TMP("DGRP6",$J))
"RTN","DGRP6",10,0)
 D GETMSE^DGRP61(DFN,GLBL,0)
"RTN","DGRP6",11,0)
 D S
"RTN","DGRP6",12,0)
 W !
"RTN","DGRP6",13,0)
 D CL^DGRP6CL2(DFN,.LIN)
"RTN","DGRP6",14,0)
 S Z=2 D WW2^DGRPV S Z="  Conflict Locations: ",Z1=20 D WW1^DGRPV W:'$D(LIN(1)) "< None Specified >" W:$D(LIN(1)) LIN(1)
"RTN","DGRP6",15,0)
 S Z=1 F  S Z=$O(LIN(Z)) Q:'Z  W !,?25,LIN(Z)
"RTN","DGRP6",16,0)
 D EF^DGRP6EF(DFN,.LIN)
"RTN","DGRP6",17,0)
 S Z=3 D WW2^DGRPV S Z=" Environment Factors: ",Z1=21 D WW1^DGRPV W:'$D(LIN(1)) "< None Specified >" W:$D(LIN(1)) LIN(1)
"RTN","DGRP6",18,0)
 S Z=1 F  S Z=$O(LIN(Z)) Q:'Z  W !,?4,"+ ",LIN(Z)
"RTN","DGRP6",19,0)
 S Z=4,DGRPX=DGRP(.52) D WW^DGRPV W "          POW: " S X=5,Z1=6 D YN W "From: " S X=7,Z1=13 D DAT W "To: " S X=8,Z1=12 D DAT W "War: ",$S($D(^DIC(22,+$P(DGRPX,"^",6),0)):$P(^(0),"^",2),1:"")
"RTN","DGRP6",20,0)
 S Z=5 D WW^DGRPV W "       Combat: " S X=11,Z1=6 D YN W "From: " S X=13,Z1=13 D DAT W "To: " S X=14,Z1=12 D DAT W "Loc: ",$S($D(^DIC(22,+$P(DGRPX,"^",12),0)):$P(^(0),"^",2),1:"")
"RTN","DGRP6",21,0)
 S Z=6 D WW^DGRPV S X=$P(DGRP(.36),"^",12),XX=$P(DGRP(.36),"^",13)
"RTN","DGRP6",22,0)
 N DGSPACE
"RTN","DGRP6",23,0)
 S DGSPACE=$S($G(X)="0":" ",$G(X)="1":"",1:"   ")
"RTN","DGRP6",24,0)
 W "     Mil Disab Retirement: ",$S(X=0:"NO",X=1:"YES",1:"") W DGSPACE_"        Dischrg Due to Disab: ",$S(XX=0:"NO",XX=1:"YES",1:"")
"RTN","DGRP6",25,0)
 ;W !
"RTN","DGRP6",26,0)
 S Z=7 D WW^DGRPV W "     Dent Inj: " S DGRPX=DGRP(.36),X=8,Z1=28 D YN W "Teeth Extracted: " S X=9,Z1=9 D YN S DGRPD=0 I $P(DGRPX,"^",8)="Y",$P(DGRPX,"^",9)="Y" S DGRPD=1
"RTN","DGRP6",27,0)
 I DGRPD S I1="" F I=0:0 S I=$O(^DPT(DFN,.37,I)) Q:'I  S I1=1,DGRPX=^(I,0) D DEN
"RTN","DGRP6",28,0)
 S Z=8 D WW^DGRPV W " Purple Heart: " S DGRPX=DGRP(.53),X=1 D YN D
"RTN","DGRP6",29,0)
 . I $P($G(DGRPX),U)="Y",($P($G(DGRPX),U,2)]"") W ?26,"PH Status: "_$S($P($G(DGRPX),U,2)="1":"Pending",$P($G(DGRPX),U,2)="2":"In Process",$P($G(DGRPX),U,2)="3":"Confirmed",1:"")
"RTN","DGRP6",30,0)
 I $P($G(DGRPX),U)="N" D
"RTN","DGRP6",31,0)
 . S DGX=$P(DGRPX,U,3)
"RTN","DGRP6",32,0)
 . S DGX=$S($G(DGX)=1:"UNACCEPTABLE DOCUMENTATION",$G(DGX)=2:"NO DOCUMENTATION REC'D",$G(DGX)=3:"ENTERED IN ERROR",$G(DGX)=4:"UNSUPPORTED PURPLE HEART",$G(DGX)=5:"VAMC",$G(DGX)=6:"UNDELIVERABLE MAIL",1:"")
"RTN","DGRP6",33,0)
 . I $G(DGX)]"" W ?26,"PH Remarks: "_$S($G(DGX)]"":$G(DGX),1:"")
"RTN","DGRP6",34,0)
 ;DG*5.3*841
"RTN","DGRP6",35,0)
 I $P(DGRP(.54),"^")="Y" D
"RTN","DGRP6",36,0)
 .W !,"<9> Medal of Honor: YES"
"RTN","DGRP6",37,0)
 .;MOH updates start here DG*5.3*972 HM
"RTN","DGRP6",38,0)
 .N DGMOHADT,DGMOHEDT,DGMOHSDT
"RTN","DGRP6",39,0)
 .S DGMOHADT=$P(DGRP(.54),"^",2),DGMOHSDT=$P(DGRP(.54),"^",3),DGMOHEDT=$P(DGRP(.54),"^",4) ;get MOH AWARD DATE,MOH STATUS DATE, & MOH COPAYMENT EXEMPTION DATE
"RTN","DGRP6",40,0)
 .I DGMOHADT="" S DGMOHADT="UNKNOWN",DGMOHEDT="Needs Determination" ;Display text when MOH AWARD DATE empty
"RTN","DGRP6",41,0)
 .W ?26,"Award Date: "_$$FMTE^XLFDT(DGMOHADT,"5DZ") ;format MOH AWARD DATE
"RTN","DGRP6",42,0)
 .W ?51,"Status Date: "_$$FMTE^XLFDT(DGMOHSDT,"5DZ") ;format MOH STATUS DATE
"RTN","DGRP6",43,0)
 .W !?4,"MOH Copayment Exemption Date: "_$$FMTE^XLFDT(DGMOHEDT,"5DZ") ;format MOH COPAYMENT EXEMPTION DATE
"RTN","DGRP6",44,0)
 I $P(DGRP(.54),"^")="N" D  ;if MOH indicator is N
"RTN","DGRP6",45,0)
 .N DGMOHSDT S DGMOHSDT=$P(DGRP(.54),"^",3) ;set status date
"RTN","DGRP6",46,0)
 .W !,"<9> Medal of Honor: NO"
"RTN","DGRP6",47,0)
 .W ?26,"Award Date: "
"RTN","DGRP6",48,0)
 .W ?51,"Status Date: "_$$FMTE^XLFDT(DGMOHSDT,"5DZ") ;format MOH STATUS DATE
"RTN","DGRP6",49,0)
 .W !?4,"MOH Copayment Exemption Date: "
"RTN","DGRP6",50,0)
 I $P(DGRP(.54),"^")="" D  ;if MOH indicator is null
"RTN","DGRP6",51,0)
 .W !,"<9> Medal of Honor: "
"RTN","DGRP6",52,0)
 .W ?26,"Award Date: "
"RTN","DGRP6",53,0)
 .W ?51,"Status Date: "
"RTN","DGRP6",54,0)
 .W !?4,"MOH Copayment Exemption Date: "
"RTN","DGRP6",55,0)
 .;MOH end updates DG*5.3*972
"RTN","DGRP6",56,0)
 ;DG*5.3*842
"RTN","DGRP6",57,0)
 I ($P(DGRP(.385),U,8)["Y")!($P(DGRP(.385),U,8)["N") D EN^DDIOL("<10> Class II Dental Indicator: ","","!?0") S DGRPX=DGRP(.385),X=8,Z1=6 D YN I $P(DGRP(.385),U,8)["Y" D EN^DDIOL("Dental Appl Due Before Date: ","","?0") S X=9 D DAT
"RTN","DGRP6",58,0)
Q K DGRPD,DGRPSV
"RTN","DGRP6",59,0)
 G ^DGRPP
"RTN","DGRP6",60,0)
YN S Z=$S($P(DGRPX,"^",X)="Y":"YES",$P(DGRPX,"^",X)="N":"NO",$P(DGRPX,"^",X)="U":"UNK",1:"") D WW1^DGRPV Q
"RTN","DGRP6",61,0)
DAT S Z=$P(DGRPX,"^",X) I Z']"" S Z=""
"RTN","DGRP6",62,0)
 E  S Z=$$FMTE^XLFDT(Z,"5DZ")
"RTN","DGRP6",63,0)
 D WW1^DGRPV Q
"RTN","DGRP6",64,0)
DEN W !?3," Trt Date: " S X=1,Z1=10 D DAT W "Cond.: ",$E($P(DGRPX,"^",2),1,45) Q
"RTN","DGRP6",65,0)
S ;Write Military Service Episodes (DG*5.3*797)
"RTN","DGRP6",66,0)
 N DGL,MSECNT
"RTN","DGRP6",67,0)
 Q:$G(GLBL)=""
"RTN","DGRP6",68,0)
 ; JAM; DG*5.3*947 - Reason for Early Separation displayed with MSE data.
"RTN","DGRP6",69,0)
 ;    This screen displays up to 3 MSE's and must include RES or Final Discharge Date if present
"RTN","DGRP6",70,0)
 ;    Array lines (built in ^DGRP61) may contain an MSE or a RES or FDD, so we need to track the number of MSEs 
"RTN","DGRP6",71,0)
 ;    being displayed (MSECNT)  - not the number of lines
"RTN","DGRP6",72,0)
 S MSECNT=0
"RTN","DGRP6",73,0)
 S DGL=0 F  S DGL=$O(@GLBL@(DGL)) Q:'DGL  D
"RTN","DGRP6",74,0)
 .; JAM; DG*5.3*947 - if this array entry is MSE data (node 1 is present), increment the count and only display 3 episodes
"RTN","DGRP6",75,0)
 .I $D(@GLBL@(DGL,1)) S MSECNT=MSECNT+1
"RTN","DGRP6",76,0)
 .Q:MSECNT>3
"RTN","DGRP6",77,0)
 .I $G(@GLBL@(DGL,0))]"" W !,@GLBL@(DGL,0)
"RTN","DGRP6",78,0)
 ;
"RTN","DGRP6",79,0)
 ; JAM; DG*5.3*947 - indicate more episodes are available using the MSECNT - not the line count
"RTN","DGRP6",80,0)
 ;I DGL>3 W !,"    <more episodes>" Q
"RTN","DGRP6",81,0)
 I MSECNT>3 W !,"    <more episodes>" Q
"RTN","DGRP6",82,0)
 ; end DG*5.3*947 changes
"RTN","DGRP6",83,0)
 Q
"RTN","DGRP6",84,0)
MR W !?19,"Receiving Military retirement in lieu of VA Compensation." Q
"RTN","DGRP6",85,0)
 ;
"RTN","DGRP6",86,0)
SETLNEX(Z,SEQ,LIN,LENGTH) ;
"RTN","DGRP6",87,0)
 I 'LIN S LIN=1,LIN(1)=""
"RTN","DGRP6",88,0)
 S Z=$E("("_SEQ_") "_Z,1,75)
"RTN","DGRP6",89,0)
 I LENGTH+$L(Z)>$S(LIN<2:49,1:70) S LIN=LIN+1,LIN(LIN)="",LENGTH=0
"RTN","DGRP6",90,0)
 S LIN(LIN)=LIN(LIN)_$S(LENGTH:"    ",1:"")_Z,LENGTH=$L(LIN(LIN))
"RTN","DGRP6",91,0)
 Q
"RTN","DGRP6",92,0)
 ;
"RTN","DGRPDB")
0^16^B34652435
"RTN","DGRPDB",1,0)
DGRPDB ;ALB/AAS,JAN,ERC,PHH,HM - VIEW ONLY SCREEN TO DETERMINE BILLING ELIGIBILITY ;24 Dec 2018  1:45 PM
"RTN","DGRPDB",2,0)
 ;;5.3;Registration;**26,50,358,570,631,709,713,749,972**;Aug 13, 1993;Build 80
"RTN","DGRPDB",3,0)
 ;
"RTN","DGRPDB",4,0)
% S:'$D(DGQUIT) DGQUIT=0
"RTN","DGRPDB",5,0)
 G:DGQUIT END S DIC="^DPT(",DIC(0)="AEQMN" D ^DIC G:+Y<1 END S DFN=+Y D EN
"RTN","DGRPDB",6,0)
 G %
"RTN","DGRPDB",7,0)
 ;
"RTN","DGRPDB",8,0)
EN ;entry with DFN defined.
"RTN","DGRPDB",9,0)
 Q:'$D(DFN)  D HOME^%ZIS,2^VADPT,HDR
"RTN","DGRPDB",10,0)
 D MT,AOIR,ELIG,DIS,MOH ;added MOH DG*5.3*972
"RTN","DGRPDB",11,0)
 N DGINS
"RTN","DGRPDB",12,0)
 I $$INSUR^IBBAPI(DFN,"","AR",.DGINS,1)
"RTN","DGRPDB",13,0)
 S C="",C=$O(DGINS("IBBAPI","INSUR",C),-1),C=+C+6
"RTN","DGRPDB",14,0)
 D:($Y>(IOSL-C)) PAUSE,HDR:'DGQUIT Q:DGQUIT  D INS,PAUSE
"RTN","DGRPDB",15,0)
 Q
"RTN","DGRPDB",16,0)
 ;
"RTN","DGRPDB",17,0)
ELIG ;eligibility code(s)
"RTN","DGRPDB",18,0)
 W !!," Primary Elig. Code: ",$P(VAEL(1),"^",2),"  --  ",$S(VAEL(8)']"":"NOT VERIFIED",1:$P(VAEL(8),"^",2))
"RTN","DGRPDB",19,0)
 I VAEL(8)]"" S Y=$S($D(^DPT(DFN,.361)):$P(^(.361),"^",2),1:"") W "  " D DT^DIQ
"RTN","DGRPDB",20,0)
 W !,"Other Elig. Code(s): " I $D(VAEL(1))>9 S I1=0 F I=0:0 S I=$O(VAEL(1,I)) Q:'I  S I1=I1+1 W:I1>1 !?21 W $P(VAEL(1,I),"^",2)
"RTN","DGRPDB",21,0)
 E  W "NO ADDITIONAL ELIGIBILITIES IDENTIFIED"
"RTN","DGRPDB",22,0)
 Q
"RTN","DGRPDB",23,0)
 ;
"RTN","DGRPDB",24,0)
 ;display medal of honor information DG*5.3*972 HM
"RTN","DGRPDB",25,0)
MOH ;medal of honor
"RTN","DGRPDB",26,0)
 N DGMOHADT,DGMOHSDT,DGMOHCED
"RTN","DGRPDB",27,0)
 I $P($G(^DPT(DFN,.54)),"^")="Y" D
"RTN","DGRPDB",28,0)
 .W !,"     Medal of Honor: YES"
"RTN","DGRPDB",29,0)
 .N DGMOHADT,DGMOHEDT,DGMOHSDT
"RTN","DGRPDB",30,0)
 .S DGMOHADT=$P($G(^DPT(DFN,.54)),"^",2),DGMOHSDT=$P($G(^DPT(DFN,.54)),"^",3),DGMOHEDT=$P($G(^DPT(DFN,.54)),"^",4) ;get MOH AWARD DATE,MOH STATUS DATE, & MOH COPAYMENT EXEMPTION DATE
"RTN","DGRPDB",31,0)
 .I DGMOHADT="" S DGMOHADT="UNKNOWN",DGMOHEDT="Needs Determination" ;Display text when MOH AWARD DATE empty
"RTN","DGRPDB",32,0)
 .W ?35,"MOH Status Date: "_$$FMTE^XLFDT(DGMOHSDT,"5DZ") ;format MOH STATUS DATE
"RTN","DGRPDB",33,0)
 .W !,"     MOH Award Date: "_$$FMTE^XLFDT(DGMOHADT,"5DZ") ;format MOH AWARD DATE
"RTN","DGRPDB",34,0)
 .W ?35,"MOH Copay Exemption Date: "_$$FMTE^XLFDT(DGMOHEDT,"5DZ") ;format MOH COPAYMENT EXEMPTION DATE
"RTN","DGRPDB",35,0)
 I $P($G(^DPT(DFN,.54)),"^")="N" D  ;if MOH indicator is N
"RTN","DGRPDB",36,0)
 .N DGMOHSDT S DGMOHSDT=$P($G(^DPT(DFN,.54)),"^",3) ;set status date
"RTN","DGRPDB",37,0)
 .W !,"     Medal of Honor: NO"
"RTN","DGRPDB",38,0)
 .W ?35,"MOH Status Date: "_$$FMTE^XLFDT(DGMOHSDT,"5DZ") ;format MOH STATUS DATE
"RTN","DGRPDB",39,0)
 .W !,"     MOH Award Date: "
"RTN","DGRPDB",40,0)
 .W ?35,"MOH Copay Exemption Date: "
"RTN","DGRPDB",41,0)
 I $P($G(^DPT(DFN,.54)),"^")="" D  ;if MOH indicator is null
"RTN","DGRPDB",42,0)
 .W !,"     Medal of Honor: "
"RTN","DGRPDB",43,0)
 .W ?35,"MOH Status Date: "
"RTN","DGRPDB",44,0)
 .W !,"     MOH Award Date: "
"RTN","DGRPDB",45,0)
 .W ?35,"MOH Copay Exemption Date: "
"RTN","DGRPDB",46,0)
 Q
"RTN","DGRPDB",47,0)
DIS ;rated disabilities - Integration Agreement #700
"RTN","DGRPDB",48,0)
 ;
"RTN","DGRPDB",49,0)
 ;  This is called from the FEE and MCCR package!!!
"RTN","DGRPDB",50,0)
 ;
"RTN","DGRPDB",51,0)
 ;  Input:  DFN as IEN of PATIENT file
"RTN","DGRPDB",52,0)
 ;          VAEL array (if no passed, it is set) of eligibility info
"RTN","DGRPDB",53,0)
 ;
"RTN","DGRPDB",54,0)
 I '$D(VAEL) D ELIG^VADPT S DGKVAR=1
"RTN","DGRPDB",55,0)
 W:'+VAEL(3) !!,"  Service Connected: NO" W:+VAEL(3) !!,"         SC Percent: ",$P(VAEL(3),"^",2)_"%"
"RTN","DGRPDB",56,0)
 N DGQUIT
"RTN","DGRPDB",57,0)
 W !," Rated Disabilities: " I 'VAEL(4),$S('$D(^DG(391,+VAEL(6),0)):1,$P(^(0),"^",2):0,1:1) W "NOT A VETERAN" G DISQ
"RTN","DGRPDB",58,0)
 S I3=0 F I=0:0 S I=$O(^DPT(DFN,.372,I)) Q:'I!($G(DGQUIT)=1)  D
"RTN","DGRPDB",59,0)
 . S I1=^(I,0),I2=$S($D(^DIC(31,+I1,0)):$P(^(0),"^",1)_" ("_+$P(I1,"^",2)_"%-"_$S($P(I1,"^",3):"SC",$P(I1,"^",3)']"":"not specified",1:"NSC")_")",1:""),I3=I3+1
"RTN","DGRPDB",60,0)
 . I $Y>(IOSL-3) D PAUSE I $G(DGQUIT)=0 W @IOF
"RTN","DGRPDB",61,0)
 . I $G(DGQUIT)=1 Q
"RTN","DGRPDB",62,0)
 . W:I3>1 !?21 W I2
"RTN","DGRPDB",63,0)
 W:'I3 "NONE STATED"
"RTN","DGRPDB",64,0)
DISQ I $D(DGKVAR) D KVAR^VADPT K DGKVAR
"RTN","DGRPDB",65,0)
 K I,I1,I2,I3
"RTN","DGRPDB",66,0)
 Q
"RTN","DGRPDB",67,0)
 ;
"RTN","DGRPDB",68,0)
INS ;insurance information
"RTN","DGRPDB",69,0)
 ;
"RTN","DGRPDB",70,0)
 ;  This is called form the FEE package!!!
"RTN","DGRPDB",71,0)
 ;
"RTN","DGRPDB",72,0)
 ;  Input:  DFN as IEN of PATIENT file
"RTN","DGRPDB",73,0)
 ;          DGINSDT as date to compute insurance flag as of (default DT)
"RTN","DGRPDB",74,0)
 ;
"RTN","DGRPDB",75,0)
 Q:'$D(DFN)
"RTN","DGRPDB",76,0)
 W !!,"    Health Insurance: "
"RTN","DGRPDB",77,0)
 S Z=$$INSUR^IBBAPI(DFN,$S($D(DGINSDT):DGINSDT,1:DT))
"RTN","DGRPDB",78,0)
 W $S(Z:"YES",1:"NO")
"RTN","DGRPDB",79,0)
 D DISP^DGIBDSP
"RTN","DGRPDB",80,0)
INSQ K I,I1,DGX,Z
"RTN","DGRPDB",81,0)
 Q
"RTN","DGRPDB",82,0)
 ;
"RTN","DGRPDB",83,0)
IN ; Old code
"RTN","DGRPDB",84,0)
 Q
"RTN","DGRPDB",85,0)
 ;
"RTN","DGRPDB",86,0)
AOIR ;Agent Orange/ionizing radiation/Camp Lejeune
"RTN","DGRPDB",87,0)
 N DGEC,NTA,DGCL
"RTN","DGRPDB",88,0)
 S DGX=$S($D(^DPT(DFN,.321)):^(.321),1:"")
"RTN","DGRPDB",89,0)
 F I=2,3 S X=$P(DGX,"^",I) W:I=2 !,"           A/O Exp.: " W:I=3 "ION Rad.: " W $S(X="Y":"YES",X="N":"NO",X="U":"UNKNOWN",1:"NOT ANSWERED"),"   "
"RTN","DGRPDB",90,0)
 S X=$G(^DPT(DFN,.38)),X1=$P(X,"^",1) W "Medicaid Elig: ",$S(X1="":"NOT ANSWERED",'X1:"NO",1:"YES") I ($X+15)'>IOM W " - " S Y=$P(X,"^",2) D D^DIQ W $P(Y,"@")
"RTN","DGRPDB",91,0)
 S DGEC=$S($D(^DPT(DFN,.322)):^DPT(DFN,.322),1:"")
"RTN","DGRPDB",92,0)
 S X=$P(DGEC,U,13) W !,"        Env Contam.: " W $S(X="Y":"YES",X="N":"NO",X="U":"UNKNOWN",1:"NOT ANSWERED"),"   "
"RTN","DGRPDB",93,0)
 S NTA=$S($$GETCUR^DGNTAPI(DFN,"DGNTARR")>0:DGNTARR("INTRP"),1:"")
"RTN","DGRPDB",94,0)
 K DGNTARR
"RTN","DGRPDB",95,0)
 W "N/T Radium: " W $S(NTA'="":NTA,1:"NOT ANSWERED")
"RTN","DGRPDB",96,0)
 ;DG*5.3*972 HM - Camp Lejeune will always be on next line
"RTN","DGRPDB",97,0)
 S DGCL=$S($D(^DPT(DFN,.3217)):^DPT(DFN,.3217),1:""),X=$P(DGCL,"^",1) W !,"       Camp Lejeune: " W $S(X="Y":"YES",X="N":"NO",1:"NOT ANSWERED")
"RTN","DGRPDB",98,0)
 Q
"RTN","DGRPDB",99,0)
 ;
"RTN","DGRPDB",100,0)
PAUSE F J=1:1 Q:($Y>(IOSL-3))  W !
"RTN","DGRPDB",101,0)
 S DGX1="" I $E(IOST,1,2)["C-" N DIR S DIR(0)="E" D ^DIR S DGQUIT='Y
"RTN","DGRPDB",102,0)
 Q
"RTN","DGRPDB",103,0)
 ;
"RTN","DGRPDB",104,0)
HDR ;Screen Header
"RTN","DGRPDB",105,0)
 W @IOF I $P(VAEL(6),"^",2)]"" S DGTYPE=$P(VAEL(6),"^",2)
"RTN","DGRPDB",106,0)
 W $P(VADM(1),"^",1),?32,VA("PID"),?47,$P(VADM(3),"^",2) S X=$S($D(DGTYPE):$P(DGTYPE,"^",1),1:"PATIENT TYPE UNKNOWN"),X1=79-$L(X) W ?X1,X
"RTN","DGRPDB",107,0)
 S X="",$P(X,"=",80)="" W !,X Q
"RTN","DGRPDB",108,0)
 Q
"RTN","DGRPDB",109,0)
 ;
"RTN","DGRPDB",110,0)
MT I '$O(^DGMT(408.31,"AD",1,DFN,0)) W !,"  Means Test Status:  NOT IN MEANS TEST FILE" Q
"RTN","DGRPDB",111,0)
 ;if patient is on a DOM ward, don't display Means Test required message
"RTN","DGRPDB",112,0)
 D DOM^DGMTR D:'$G(DGDOM) DIS^DGMTU(DFN) K DGDOM
"RTN","DGRPDB",113,0)
 Q
"RTN","DGRPDB",114,0)
 ;
"RTN","DGRPDB",115,0)
END D KVAR^VADPT
"RTN","DGRPDB",116,0)
 K A,C,I,I1,I2,I3,J,DIC,DIR,DFN,DGA1,DGMT,DGMTL,DGMTLA,DGX,DGX1,DGT,DGTYPE,DGQUIT,DGMTLL,X,X1,VAROOT,VA,Y,Z
"RTN","DGRPDB",117,0)
 Q
"RTN","DGRPDB",118,0)
 ;
"RTN","DGRPDB",119,0)
RDIS(DGDFN,DGARR) ;API to return all Rated Disabilities from the 
"RTN","DGRPDB",120,0)
 ;Patient file for a patient using an array.  Returned in descending Service Connected percent.
"RTN","DGRPDB",121,0)
 ;
"RTN","DGRPDB",122,0)
 ; Integration Agreement #4807
"RTN","DGRPDB",123,0)
 ; 
"RTN","DGRPDB",124,0)
 ;Input          DGDFN - IEN of patient file (required)
"RTN","DGRPDB",125,0)
 ;Input/Output   DGARR - name of array for returned disability info (required)
"RTN","DGRPDB",126,0)
 ;               piece 1 - Disability IEN (in file 31)
"RTN","DGRPDB",127,0)
 ;               piece 2 - Disability %
"RTN","DGRPDB",128,0)
 ;               piece 3 - SC? (1,0)
"RTN","DGRPDB",129,0)
 ;               piece 4 - extremity affected
"RTN","DGRPDB",130,0)
 ;               piece 5 - original effective date
"RTN","DGRPDB",131,0)
 ;               piece 6 - current effective date
"RTN","DGRPDB",132,0)
 ;Output 1=successful and array returned with data
"RTN","DGRPDB",133,0)
 ;       0=unsuccessful and no array
"RTN","DGRPDB",134,0)
 ;         
"RTN","DGRPDB",135,0)
 N DGARR1,DGC,DGCC,DGERR,DGNODE,DGCT,DGE,DGEE
"RTN","DGRPDB",136,0)
 K DGW,DGARR
"RTN","DGRPDB",137,0)
 I $G(DGDFN)']"" Q 0
"RTN","DGRPDB",138,0)
 I '$D(^DPT(DGDFN,0)) Q 0
"RTN","DGRPDB",139,0)
 D GETS^DIQ(2,DGDFN,".3721*","I","DGARR1","DGERR")
"RTN","DGRPDB",140,0)
 I $D(DGERR) Q 0
"RTN","DGRPDB",141,0)
 S DGCC=0
"RTN","DGRPDB",142,0)
 S DGCC=$O(^DPT(DGDFN,.372,DGCC))
"RTN","DGRPDB",143,0)
 I 'DGCC Q 0
"RTN","DGRPDB",144,0)
 S DGC=""
"RTN","DGRPDB",145,0)
 F  S DGC=$O(DGARR1(2.04,DGC)) Q:DGC']""  D
"RTN","DGRPDB",146,0)
 . S DGNODE=DGC
"RTN","DGRPDB",147,0)
 . S DGARR(DGC)=DGARR1(2.04,DGNODE,.01,"I")_"^"_DGARR1(2.04,DGNODE,2,"I")_"^"_DGARR1(2.04,DGNODE,3,"I")_"^"_DGARR1(2.04,DGNODE,4,"I")_"^"_DGARR1(2.04,DGNODE,5,"I")_"^"_DGARR1(2.04,DGNODE,6,"I")
"RTN","DGRPDB",148,0)
 S DGE=""
"RTN","DGRPDB",149,0)
 F  S DGE=$O(DGARR(DGE)) Q:'DGE  D
"RTN","DGRPDB",150,0)
 . I $P(DGARR(DGE),U,2)="" S $P(DGARR(DGE),U,2)=0
"RTN","DGRPDB",151,0)
 . S DGW($P(DGARR(DGE),U,2),$P(DGE,",",1))=DGARR(DGE)
"RTN","DGRPDB",152,0)
 S DGE="",DGCT=1
"RTN","DGRPDB",153,0)
 K DGARR
"RTN","DGRPDB",154,0)
 F  S DGE=$O(DGW(DGE),-1) Q:DGE']""  D
"RTN","DGRPDB",155,0)
 . F DGEE=0:0 S DGEE=$O(DGW(DGE,DGEE)) Q:DGEE'>0  D
"RTN","DGRPDB",156,0)
 . . S DGARR(DGCT)=DGW(DGE,DGEE) S DGCT=DGCT+1
"RTN","DGRPDB",157,0)
 K DGW
"RTN","DGRPDB",158,0)
 Q 1
"RTN","DGRPDB",159,0)
 ;
"VER")
8.0^22.2
"^DD",2,2,.541,0)
CURRENT MOH INDICATOR^SIa^Y:YES;N:NO;^.54;1^Q
"^DD",2,2,.541,1,0)
^.1
"^DD",2,2,.541,1,1,0)
2^AMHEN^MUMPS
"^DD",2,2,.541,1,1,1)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.541,1,1,2)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.541,1,1,3)
DO NOT DELETE
"^DD",2,2,.541,1,1,"%D",0)
^^2^2^3110302^
"^DD",2,2,.541,1,1,"%D",1,0)
This cross-reference is used to update the patient's current PATIENT 
"^DD",2,2,.541,1,1,"%D",2,0)
ENROLLMENT (#27.11) record.
"^DD",2,2,.541,1,1,"DT")
3110302
"^DD",2,2,.541,1,2,0)
2^AMHMT^MUMPS
"^DD",2,2,.541,1,2,1)
N DFN,DGMT,DGNOCOPF,DGREQF,DGWRT,IVMZ10F S DFN=DA D EN^DGMTR
"^DD",2,2,.541,1,2,2)
N DFN,DGMT,DGNOCOPF,DGREQF,DGWRT,IVMZ10F S DFN=DA D EN^DGMTR
"^DD",2,2,.541,1,2,"%D",0)
^.101^5^5^3110302^^
"^DD",2,2,.541,1,2,"%D",1,0)
This cross-ref calls the Means Test software. If the PATIENT file (#2), 
"^DD",2,2,.541,1,2,"%D",2,0)
CURRENT MOH INDICATOR field (#.541) is set to 'YES', then the PATIENT 
"^DD",2,2,.541,1,2,"%D",3,0)
file (#2), CURRENT MEANS TEST STATUS field (#.14) is set to '3'.  '3' is 
"^DD",2,2,.541,1,2,"%D",4,0)
a pointer to the MEANS TEST STATUS file (#408.32) and indicates that the 
"^DD",2,2,.541,1,2,"%D",5,0)
Means Test is 'NO LONGER REQUIRED.'
"^DD",2,2,.541,1,2,"DT")
3110302
"^DD",2,2,.541,3)
If the patient is a Veteran, enter 'Y' if Medal of Honor has been awarded, 'N' if Medal of Honor was revoked or set in error, or leave field blank if Medal of Honor has never been awarded.
"^DD",2,2,.541,21,0)
^.001^3^3^3190624^^^^
"^DD",2,2,.541,21,1,0)
This field cannot be edited in VistA.  It is set by the Z11 Upload from 
"^DD",2,2,.541,21,2,0)
HEC.  A response of 'YES' or 'NO' is indicated only if the patient is a 
"^DD",2,2,.541,21,3,0)
Veteran.
"^DD",2,2,.541,"AUDIT")
y
"^DD",2,2,.541,"DT")
3190416
"^DD",2,2,.542,0)
MOH AWARD DATE^DIaX^^.54;2^S %DT="EX" D ^%DT S X=Y K:Y<1 X K:Y>DT X
"^DD",2,2,.542,3)
If the patient is a Veteran, enter the date the Medal of Honor was awarded. The date cannot be in the future.
"^DD",2,2,.542,21,0)
^.001^2^2^3190321^^^
"^DD",2,2,.542,21,1,0)
This field cannot be edited in VistA.  It is set by the Z11 upload from 
"^DD",2,2,.542,21,2,0)
HEC.  A date is indicated only if the patient is a Veteran.
"^DD",2,2,.542,"AUDIT")
y
"^DD",2,2,.542,"DT")
3190718
"^DD",2,2,.543,0)
MOH STATUS DATE^DaIX^^.54;3^S %DT="EX" D ^%DT S X=Y K:Y<1 X K:Y>DT X
"^DD",2,2,.543,3)
If the patient is a Veteran, enter the date the MOH Indicator or the MOH Award Date was last modified. The date cannot be in the future.
"^DD",2,2,.543,21,0)
^.001^2^2^3190227^^
"^DD",2,2,.543,21,1,0)
This field cannot be edited in VistA.  It is set by the Z11 upload from 
"^DD",2,2,.543,21,2,0)
HEC.  A date is indicated only if the patient is a Veteran.
"^DD",2,2,.543,"AUDIT")
y
"^DD",2,2,.543,"DT")
3190718
"^DD",2,2,.544,0)
MOH COPAYMENT EXEMPTION DATE^DaIX^^.54;4^S %DT="EX" D ^%DT S X=Y K:Y<1 X K:Y>DT X
"^DD",2,2,.544,3)
If the patient is a Veteran, enter the date the Veteran is eligible for exemption from payments for healthcare, prescriptions and long-term care. The date cannot be in the future.
"^DD",2,2,.544,21,0)
^.001^3^3^3190228^^^^
"^DD",2,2,.544,21,1,0)
This field cannot be edited in VistA.  This date is determined by the
"^DD",2,2,.544,21,2,0)
VistA system based off Medal of Honor Award Date and Legislation date. A
"^DD",2,2,.544,21,3,0)
date is indicated only if the patient is a Veteran.
"^DD",2,2,.544,"AUDIT")
y
"^DD",2,2,.544,"DT")
3190718
"^DD",27.11,27.11,50.23,0)
MEDAL OF HONOR INDICATED?^SI^Y:YES;N:NO;^E;23^Q
"^DD",27.11,27.11,50.23,3)
If the patient is a Veteran, enter 'Y' if Medal of Honor has been awarded, 'N' if Medal of Honor was revoked or set in error, or leave field blank if Medal of Honor has never been awarded.
"^DD",27.11,27.11,50.23,21,0)
^.001^2^2^3190624^^^^
"^DD",27.11,27.11,50.23,21,1,0)
This field cannot be edited in VistA. It is set by the Z11 Upload from HEC. 
"^DD",27.11,27.11,50.23,21,2,0)
A response of 'YES' or 'NO' is indicated only if the patient is a Veteran. 
"^DD",27.11,27.11,50.23,23,0)
^.001^2^2^3190624^^^^
"^DD",27.11,27.11,50.23,23,1,0)
This field is updated by the F cross-reference on the CURRENT MOH 
"^DD",27.11,27.11,50.23,23,2,0)
INDICATOR (#.541) field in the PATIENT (#2) file.
"^DD",27.11,27.11,50.23,"DT")
3190703
"^DD",27.11,27.11,50.28,0)
MOH AWARD DATE^DaIX^^E;28^S %DT="EX" D ^%DT S X=Y K:Y<1 X K:Y>DT X
"^DD",27.11,27.11,50.28,3)
If the patient is a Veteran, enter the date the Medal of Honor was awarded. The date cannot be in the future.
"^DD",27.11,27.11,50.28,21,0)
^^2^2^3190121^
"^DD",27.11,27.11,50.28,21,1,0)
This field cannot be edited in VistA.  It is set by the Z11 upload from 
"^DD",27.11,27.11,50.28,21,2,0)
HEC.  A date is indicated only if the patient is a Veteran.
"^DD",27.11,27.11,50.28,"AUDIT")
y
"^DD",27.11,27.11,50.28,"DT")
3190718
"^DD",27.11,27.11,50.29,0)
MOH STATUS DATE^DaIX^^E;29^S %DT="EX" D ^%DT S X=Y K:Y<1 X K:Y>DT X
"^DD",27.11,27.11,50.29,3)
If the patient is a Veteran, enter the date the MOH Indicator or the MOH Award Date was last modified. The date cannot be in the future.
"^DD",27.11,27.11,50.29,21,0)
^^2^2^3190121^
"^DD",27.11,27.11,50.29,21,1,0)
This field cannot be edited in VistA.  It is set by the Z11 upload from 
"^DD",27.11,27.11,50.29,21,2,0)
HEC.  A date is indicated only if the patient is a Veteran.
"^DD",27.11,27.11,50.29,"AUDIT")
y
"^DD",27.11,27.11,50.29,"DT")
3190718
"^DD",27.11,27.11,50.3,0)
MOH COPAYMENT EXEMPTION DATE^DaIX^^E;30^S %DT="EX" D ^%DT S X=Y K:Y<1 X K:Y>DT X
"^DD",27.11,27.11,50.3,3)
If the patient is a Veteran, enter the date the Veteran is eligible for exemption from payments for healthcare, prescriptions and long-term care. The date cannot be in the future.
"^DD",27.11,27.11,50.3,21,0)
^.001^3^3^3190227^^^
"^DD",27.11,27.11,50.3,21,1,0)
This field cannot be edited in VistA.  This date is determined by the
"^DD",27.11,27.11,50.3,21,2,0)
VistA system based off Medal of Honor Award date and Legislation date. A
"^DD",27.11,27.11,50.3,21,3,0)
date is indicated only if the patient is a veteran.
"^DD",27.11,27.11,50.3,"AUDIT")
y
"^DD",27.11,27.11,50.3,"DT")
3190718
**INSTALL NAME**
IVM*2.0*183
"BLD",10923,0)
IVM*2.0*183^INCOME VERIFICATION MATCH^0^3190820^y
"BLD",10923,1,0)
^^2^2^3190807^^^
"BLD",10923,1,1,0)
Please see the IVM*2.0*183 patch description for detailed information 
"BLD",10923,1,2,0)
regarding this patch.
"BLD",10923,4,0)
^9.64PA^^
"BLD",10923,6.3)
30
"BLD",10923,"ABPKG")
n
"BLD",10923,"KRN",0)
^9.67PA^779.2^20
"BLD",10923,"KRN",.4,0)
.4
"BLD",10923,"KRN",.401,0)
.401
"BLD",10923,"KRN",.402,0)
.402
"BLD",10923,"KRN",.403,0)
.403
"BLD",10923,"KRN",.5,0)
.5
"BLD",10923,"KRN",.84,0)
.84
"BLD",10923,"KRN",3.6,0)
3.6
"BLD",10923,"KRN",3.8,0)
3.8
"BLD",10923,"KRN",9.2,0)
9.2
"BLD",10923,"KRN",9.8,0)
9.8
"BLD",10923,"KRN",9.8,"NM",0)
^9.68A^5^2
"BLD",10923,"KRN",9.8,"NM",4,0)
IVMUFNC5^^0^B18584748
"BLD",10923,"KRN",9.8,"NM",5,0)
IVMCM^^0^B86738445
"BLD",10923,"KRN",9.8,"NM","B","IVMCM",5)

"BLD",10923,"KRN",9.8,"NM","B","IVMUFNC5",4)

"BLD",10923,"KRN",19,0)
19
"BLD",10923,"KRN",19,"NM",0)
^9.68A^^
"BLD",10923,"KRN",19.1,0)
19.1
"BLD",10923,"KRN",101,0)
101
"BLD",10923,"KRN",409.61,0)
409.61
"BLD",10923,"KRN",771,0)
771
"BLD",10923,"KRN",779.2,0)
779.2
"BLD",10923,"KRN",870,0)
870
"BLD",10923,"KRN",8989.51,0)
8989.51
"BLD",10923,"KRN",8989.52,0)
8989.52
"BLD",10923,"KRN",8994,0)
8994
"BLD",10923,"KRN","B",.4,.4)

"BLD",10923,"KRN","B",.401,.401)

"BLD",10923,"KRN","B",.402,.402)

"BLD",10923,"KRN","B",.403,.403)

"BLD",10923,"KRN","B",.5,.5)

"BLD",10923,"KRN","B",.84,.84)

"BLD",10923,"KRN","B",3.6,3.6)

"BLD",10923,"KRN","B",3.8,3.8)

"BLD",10923,"KRN","B",9.2,9.2)

"BLD",10923,"KRN","B",9.8,9.8)

"BLD",10923,"KRN","B",19,19)

"BLD",10923,"KRN","B",19.1,19.1)

"BLD",10923,"KRN","B",101,101)

"BLD",10923,"KRN","B",409.61,409.61)

"BLD",10923,"KRN","B",771,771)

"BLD",10923,"KRN","B",779.2,779.2)

"BLD",10923,"KRN","B",870,870)

"BLD",10923,"KRN","B",8989.51,8989.51)

"BLD",10923,"KRN","B",8989.52,8989.52)

"BLD",10923,"KRN","B",8994,8994)

"BLD",10923,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",10923,"QUES",0)
^9.62^^
"BLD",10923,"REQB",0)
^9.611^2^2
"BLD",10923,"REQB",1,0)
IVM*2.0*149^1
"BLD",10923,"REQB",2,0)
IVM*2.0*115^1
"BLD",10923,"REQB","B","IVM*2.0*115",2)

"BLD",10923,"REQB","B","IVM*2.0*149",1)

"MBREQ")
0
"PKG",120,-1)
1^1
"PKG",120,0)
INCOME VERIFICATION MATCH^IVM^IVM Software for interface with the IVM Center
"PKG",120,20,0)
^9.402P^^
"PKG",120,22,0)
^9.49I^1^1
"PKG",120,22,1,0)
2.0^2941021^2960823
"PKG",120,22,1,"PAH",1,0)
183^3190820
"PKG",120,22,1,"PAH",1,1,0)
^^2^2^3190820
"PKG",120,22,1,"PAH",1,1,1,0)
Please see the IVM*2.0*183 patch description for detailed information 
"PKG",120,22,1,"PAH",1,1,2,0)
regarding this patch.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","IVMCM")
0^5^B86738445
"RTN","IVMCM",1,0)
IVMCM ;ALB/SEK,KCL,RTK,AEG,BRM,AEG,HM - PROCESS INCOME TEST (Z10) TRANSMISSIONS ; 8/15/08 10:18am
"RTN","IVMCM",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**12,17,28,41,44,53,34,49,59,55,63,77,74,123,115,183**;21-OCT-94;Build 30
"RTN","IVMCM",3,0)
 ;
"RTN","IVMCM",4,0)
 ;
"RTN","IVMCM",5,0)
ORF ; Handler for ORF type HL7 messages received from HEC
"RTN","IVMCM",6,0)
 ;
"RTN","IVMCM",7,0)
 ; Make sure POSTMASTER DUZ instead of DUZ of Person who
"RTN","IVMCM",8,0)
 ; started Incoming Logical Link.
"RTN","IVMCM",9,0)
 S DUZ=.5
"RTN","IVMCM",10,0)
 N CNT,IVMRTN,SEGCNT
"RTN","IVMCM",11,0)
 S IVMRTN="IVMCMX"  ;USE "IVMCMX" BECAUSE "IVMCM" ALREADY USED
"RTN","IVMCM",12,0)
 K ^TMP($J,IVMRTN),DIC
"RTN","IVMCM",13,0)
 S (DGMSGF,DGMTMSG)=1  ; HL7 rtn. Don't need DG interative messages.
"RTN","IVMCM",14,0)
 S HLECH=HL("ECH"),HLQ=HL("Q"),HLMID=HL("MID")
"RTN","IVMCM",15,0)
 K %,%H,%I D NOW^%DTC S HLDT=%
"RTN","IVMCM",16,0)
 F SEGCNT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","IVMCM",17,0)
 . S CNT=0
"RTN","IVMCM",18,0)
 . S ^TMP($J,IVMRTN,SEGCNT,CNT)=HLNODE
"RTN","IVMCM",19,0)
 . F  S CNT=$O(HLNODE(CNT)) Q:'CNT  D
"RTN","IVMCM",20,0)
 . . S ^TMP($J,IVMRTN,SEGCNT,CNT)=HLNODE(CNT)
"RTN","IVMCM",21,0)
 S HLDA=HLMTIEN
"RTN","IVMCM",22,0)
 ;
"RTN","IVMCM",23,0)
 N SEG,EVENT,MSGID
"RTN","IVMCM",24,0)
 S:'$D(HLEVN) HLEVN=0
"RTN","IVMCM",25,0)
 D NXTSEG^DGENUPL(HLDA,0,.SEG)
"RTN","IVMCM",26,0)
 Q:(SEG("TYPE")'="MSH")  ;would not have reached here if this happened!
"RTN","IVMCM",27,0)
 S EVENT=$P(SEG(9),$E(HLECH),2)
"RTN","IVMCM",28,0)
 ;
"RTN","IVMCM",29,0)
 ; INITIALIZE HL7 VARIABLES
"RTN","IVMCM",30,0)
 S HLEID="VAMC "_$P($$SITE^VASITE,"^",3)_" ORF-"_EVENT_" SERVER"
"RTN","IVMCM",31,0)
 S HLEID=$O(^ORD(101,"B",HLEID,0))
"RTN","IVMCM",32,0)
 D INIT^HLFNC2(HLEID,.HL)
"RTN","IVMCM",33,0)
 S HLEIDS=$O(^ORD(101,HLEID,775,"B",0))
"RTN","IVMCM",34,0)
 ;
"RTN","IVMCM",35,0)
 ; Handle means test signature ORF (Z06) event
"RTN","IVMCM",36,0)
 I EVENT="Z06" D ORF^IVMPREC7
"RTN","IVMCM",37,0)
 ;
"RTN","IVMCM",38,0)
 ; Handle income test ORF (Z10) event
"RTN","IVMCM",39,0)
 I EVENT="Z10" D Z10
"RTN","IVMCM",40,0)
 ;
"RTN","IVMCM",41,0)
 ; Handle enrollment/elig. ORF (Z11) event
"RTN","IVMCM",42,0)
 I EVENT="Z11" D
"RTN","IVMCM",43,0)
 .S MSGID=SEG(10)
"RTN","IVMCM",44,0)
 .D ORFZ11^DGENUPL(HLDA,MSGID)
"RTN","IVMCM",45,0)
 ;
"RTN","IVMCM",46,0)
 K ^TMP($J,IVMRTN)
"RTN","IVMCM",47,0)
 Q
"RTN","IVMCM",48,0)
 ;
"RTN","IVMCM",49,0)
 ;
"RTN","IVMCM",50,0)
Z10 ; Entry point for receipt of ORF~Z10 transmission
"RTN","IVMCM",51,0)
 ; The Income Test (Z10) transmission has the following format:
"RTN","IVMCM",52,0)
 ;
"RTN","IVMCM",53,0)
 ;       BHS           ORF msgs do not include batch header or trailer.
"RTN","IVMCM",54,0)
 ;       {MSH
"RTN","IVMCM",55,0)
 ;        PID          They will include the sequence:  MSA 
"RTN","IVMCM",56,0)
 ;        ZIC                                           QRD
"RTN","IVMCM",57,0)
 ;        ZIR                                           QRF
"RTN","IVMCM",58,0)
 ;        {ZDP         These segments will follow the MSH segment.
"RTN","IVMCM",59,0)
 ;         ZIC
"RTN","IVMCM",60,0)
 ;         ZIR
"RTN","IVMCM",61,0)
 ;        }
"RTN","IVMCM",62,0)
 ;        {ZMT
"RTN","IVMCM",63,0)
 ;        }
"RTN","IVMCM",64,0)
 ;        ZBT
"RTN","IVMCM",65,0)
 ;       }
"RTN","IVMCM",66,0)
 ;       BTS
"RTN","IVMCM",67,0)
 ;
"RTN","IVMCM",68,0)
 S IVMORF=1 ; set ORF msg flag
"RTN","IVMCM",69,0)
 S (HLEVN,IVMCT,IVMERROR,IVMCNTR)=0 ; init vars
"RTN","IVMCM",70,0)
 ;
"RTN","IVMCM",71,0)
ORU ; Entry point for receipt of ORU~Z10 trans (called by IVMPREC2)
"RTN","IVMCM",72,0)
 S IVMTYPE=5,IVMZ10F=1
"RTN","IVMCM",73,0)
 ;
"RTN","IVMCM",74,0)
 ; - loop through the msg in (#772 file), and process (PROC) msgs
"RTN","IVMCM",75,0)
 S IVMDA=0 F  S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)) Q:'IVMDA  S IVMSEG=$G(^(IVMDA,0)) I $E(IVMSEG,1,3)="MSH" D PROC Q:'IVMDA
"RTN","IVMCM",76,0)
 ;
"RTN","IVMCM",77,0)
 ; - if ORF msg flag, update the Query Tran Log
"RTN","IVMCM",78,0)
 I $G(IVMORF) D
"RTN","IVMCM",79,0)
 .I $G(DFN),$D(IVMMCI) D
"RTN","IVMCM",80,0)
 ..N IVMCR
"RTN","IVMCM",81,0)
 ..S IVMCR=$P("1^2^3^7^5^6^4","^",IVMTYPE)  ;map reason to test type
"RTN","IVMCM",82,0)
 ..D FIND^IVMCQ2(DFN,IVMMCI,HLDT,$S($D(HLERR):5,1:IVMCR),1)
"RTN","IVMCM",83,0)
 ;
"RTN","IVMCM",84,0)
 ; - if tests are uploaded, generate notification msg
"RTN","IVMCM",85,0)
 I $D(^TMP($J,"IVMBULL")) D ^IVMCMB
"RTN","IVMCM",86,0)
 ;
"RTN","IVMCM",87,0)
ENQ ;
"RTN","IVMCM",88,0)
 K IVMDA,IVMORF,IVMSEG,IVMFLGC,IVMTYPE,IVMMTIEN,IVMMTDT,IVMDGBT,IVMMCI
"RTN","IVMCM",89,0)
 K ^TMP($J,"IVMCM"),^("IVMBULL"),DGMSGF,DGADDF,IVMCPAY,IVMBULL,DFN
"RTN","IVMCM",90,0)
 K DGMTMSG,IVMZ10F
"RTN","IVMCM",91,0)
 Q
"RTN","IVMCM",92,0)
 ;
"RTN","IVMCM",93,0)
PROC ; Process each HL7 message from (#772) file
"RTN","IVMCM",94,0)
 ;
"RTN","IVMCM",95,0)
 N IVMFUTR,TMSTAMP,SOURCE,NODE,HSDATE,IVMZ10,DGMTP,DGMTACT,DGMTI,DGMTA
"RTN","IVMCM",96,0)
 S DGMTACT="ADD"
"RTN","IVMCM",97,0)
 D PRIOR^DGMTEVT
"RTN","IVMCM",98,0)
 S IVMZ10="UPLOAD IN PROGRESS"
"RTN","IVMCM",99,0)
 S IVMFUTR=0 ;this flag will indicate whether or not a test with a future date is being uploaded
"RTN","IVMCM",100,0)
 S IVMMTIEN=0
"RTN","IVMCM",101,0)
 ;
"RTN","IVMCM",102,0)
 S MSGID=$P(IVMSEG,HLFS,10) ; msg control id for ACK's
"RTN","IVMCM",103,0)
 ; - check if DCD messaging is enabled
"RTN","IVMCM",104,0)
 I '$$DCDON^IVMUPAR1() D PROB^IVMCMC("Facility has DCD messaging disabled") Q
"RTN","IVMCM",105,0)
 ;
"RTN","IVMCM",106,0)
 ; - check HL7 msg structure for errors
"RTN","IVMCM",107,0)
 K HLERR,^TMP($J,"IVMCM")
"RTN","IVMCM",108,0)
 D ^IVMCMC I $D(HLERR) K:HLERR="" HLERR Q
"RTN","IVMCM",109,0)
 ;
"RTN","IVMCM",110,0)
 ; Determine type of test/transmission
"RTN","IVMCM",111,0)
 S IVMTYPE=0
"RTN","IVMCM",112,0)
 ;
"RTN","IVMCM",113,0)
 ; - was a means test sent?
"RTN","IVMCM",114,0)
 I $P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,2) S IVMTYPE=1 ; MT trans
"RTN","IVMCM",115,0)
 ;
"RTN","IVMCM",116,0)
 ; - if MT and CT transmitted, error - pt can't have both unless
"RTN","IVMCM",117,0)
 ;   one is a deletion, but HEC not currently handling that situation
"RTN","IVMCM",118,0)
 I IVMTYPE,$P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2) D PROB^IVMCMC("Patient  can not have both a Means Test and Copay Test") Q
"RTN","IVMCM",119,0)
 I $P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2) S IVMTYPE=2 ; CT trans
"RTN","IVMCM",120,0)
 ;
"RTN","IVMCM",121,0)
 ; - if no MT or CT or LTC then Income Screening
"RTN","IVMCM",122,0)
 I 'IVMTYPE,'$P($G(^TMP($J,"IVMCM","ZMT4")),HLFS,2) S IVMTYPE=3 ; IS trans
"RTN","IVMCM",123,0)
 ;
"RTN","IVMCM",124,0)
 ;send an eligibility query if no eligibility code
"RTN","IVMCM",125,0)
 I '$$ELIG^IVMCUF1(DFN),'$$PENDING^DGENQRY(DFN) I $$SEND^DGENQRY1(DFN)
"RTN","IVMCM",126,0)
 ;
"RTN","IVMCM",127,0)
 ; obtain locks used to sychronize upload with local income test options
"RTN","IVMCM",128,0)
 D GETLOCKS^IVMCUPL(DFN)
"RTN","IVMCM",129,0)
 ;
"RTN","IVMCM",130,0)
 ;
"RTN","IVMCM",131,0)
MT ; If transmission is a Means Test
"RTN","IVMCM",132,0)
 N NODE0,RET,CODE,DATA,MTSIG,MTSIGDT,CATCA ;IVM*2.0*183 HM
"RTN","IVMCM",133,0)
 S HLQ=$G(HL("Q"))
"RTN","IVMCM",134,0)
 S:HLQ="" HLQ=""""""
"RTN","IVMCM",135,0)
 I IVMTYPE=1 D  I $D(HLERR) G PROCQ
"RTN","IVMCM",136,0)
 .S IVMMTDT=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,2))
"RTN","IVMCM",137,0)
 .S TMSTAMP=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,25))
"RTN","IVMCM",138,0)
 .S HSDATE=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,24))
"RTN","IVMCM",139,0)
 .S SOURCE=$P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,22)
"RTN","IVMCM",140,0)
 .S MTSIG=$P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,27)
"RTN","IVMCM",141,0)
 .S MTSIGDT=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,15))
"RTN","IVMCM",142,0)
 .S IVMLAST=$$LST^DGMTU(DFN,$E(IVMMTDT,1,3)_1231,1)
"RTN","IVMCM",143,0)
 .; Check that test is for same year
"RTN","IVMCM",144,0)
 .I $P(IVMLAST,U,2),$E($P(IVMLAST,U,2),1,3)'=$E(IVMMTDT,1,3) S IVMLAST=""
"RTN","IVMCM",145,0)
 .Q:$$UPDMTSIG^IVMCMF(+IVMLAST,TMSTAMP,MTSIG,MTSIGDT)
"RTN","IVMCM",146,0)
 .I $$Z06MT^EASPTRN1(+IVMLAST) D PROB^IVMCMC("IVM Means Test already on file for this year") Q
"RTN","IVMCM",147,0)
 .I '$$ELIG^IVMUFNC5(DFN) D PROB^IVMCMC("Means Test upload not appropriate for current patient") Q
"RTN","IVMCM",148,0)
 .I $$AGE^IVMUFNC5(DT)>$$INCY^IVMUFNC5(IVMMTDT) D  I $D(HLERR) Q  ;IVM*2.0*183 HM
"RTN","IVMCM",149,0)
 ..N CATCZMT S CATCZMT=$G(^TMP($J,"IVMCM","ZMT1"))
"RTN","IVMCM",150,0)
 ..S CATC=$$CATC^IVMUFNC5(CATCZMT)
"RTN","IVMCM",151,0)
 ..I '+$G(CATC) D PROB^IVMCMC("Only Means Tests in current/previous income years are valid (not effective)") K CATC Q  ;IVM*2.0*183 HM
"RTN","IVMCM",152,0)
 ..;IVM*2.0*183 HM Check if MT Copay Exempt or GMT Copay Required
"RTN","IVMCM",153,0)
 ..S CATCA=$$ACCMT^IVMUFNC5(CATCZMT) ;IVM*2.0*183 HM
"RTN","IVMCM",154,0)
 ..I '+$G(CATCA) D PROB^IVMCMC("Only Means Tests greater than or equal to one year prior to the VFA Start Date of 1/1/2013 are valid for MT COPAY EXEMPT or GMT COPAY REQUIRED") K CATCA Q  ;IVM*2.0*183 HM
"RTN","IVMCM",155,0)
 .;
"RTN","IVMCM",156,0)
 .; - perform edit checks and file MT
"RTN","IVMCM",157,0)
 .D CHKDT
"RTN","IVMCM",158,0)
 .;deletion indicator sent?
"RTN","IVMCM",159,0)
 .I $P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,3)=HLQ D  Q
"RTN","IVMCM",160,0)
 ..D
"RTN","IVMCM",161,0)
 ...;if there is a future test for that income year, delete that
"RTN","IVMCM",162,0)
 ...N IEN,DATA,IVMPAT
"RTN","IVMCM",163,0)
 ...S IEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),1,.IVMPAT)
"RTN","IVMCM",164,0)
 ...I IEN S DATA(.06)="" I $$UPD^DGENDBS(301.5,IVMPAT,.DATA)
"RTN","IVMCM",165,0)
 ...I IEN,$D(^DGMT(408.31,IEN,0)) D
"RTN","IVMCM",166,0)
 ....S IVMMTIEN=IEN
"RTN","IVMCM",167,0)
 ....S IVMFUTR=1
"RTN","IVMCM",168,0)
 ...E  D
"RTN","IVMCM",169,0)
 ....S IVMFUTR=0
"RTN","IVMCM",170,0)
 ..Q:('IVMMTIEN)
"RTN","IVMCM",171,0)
 ..S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM",172,0)
 ..I $$EN^IVMCMD(IVMMTIEN) D
"RTN","IVMCM",173,0)
 ...S RET=$$LST^DGMTU(DFN,DT,IVMTYPE)
"RTN","IVMCM",174,0)
 ...S CODE=$S(($E($P(RET,"^",2),1,3)=$E(DT,1,3)):$P(RET,"^",4),1:"")
"RTN","IVMCM",175,0)
 ...D ADD^IVMCMB(DFN,IVMTYPE,$S(IVMFUTR:"DELETE FUTR TEST",1:"DELETE PRMRY TEST"),+$G(NODE0),$$GETCODE^DGMTH($P(NODE0,"^",3)),CODE)
"RTN","IVMCM",176,0)
 .;
"RTN","IVMCM",177,0)
 .;check timestamp - if matches current primary test and hardship matches, then this is a duplicate and does not need to be uploaded
"RTN","IVMCM",178,0)
 .I TMSTAMP D
"RTN","IVMCM",179,0)
 ..S NODE=""
"RTN","IVMCM",180,0)
 ..I IVMFUTR N IVMMTIEN S IVMMTIEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),1)
"RTN","IVMCM",181,0)
 ..Q:'IVMMTIEN
"RTN","IVMCM",182,0)
 ..S NODE=$G(^DGMT(408.31,IVMMTIEN,2))
"RTN","IVMCM",183,0)
 .S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM",184,0)
 .I TMSTAMP,TMSTAMP=$P(NODE,"^",2),IVMMTDT=$P(NODE0,"^"),SOURCE=$P(NODE,"^",5),(HSDATE=$P(NODE,"^")) Q
"RTN","IVMCM",185,0)
 .;
"RTN","IVMCM",186,0)
 .D DELTYPE^IVMCMD(DFN,IVMMTDT,2)
"RTN","IVMCM",187,0)
 .D EN^IVMCM1
"RTN","IVMCM",188,0)
 ;
"RTN","IVMCM",189,0)
 ;
"RTN","IVMCM",190,0)
CT ; If transmission is a Copay Test
"RTN","IVMCM",191,0)
 N NODE0,RET,CODE,DATA
"RTN","IVMCM",192,0)
 I IVMTYPE=2 D  I $D(HLERR) G PROCQ
"RTN","IVMCM",193,0)
 .S IVMMTDT=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2))
"RTN","IVMCM",194,0)
 .S TMSTAMP=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,25))
"RTN","IVMCM",195,0)
 .S SOURCE=$P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,22)
"RTN","IVMCM",196,0)
 .S IVMLAST=$$LST^DGMTU(DFN,$E(IVMMTDT,1,3)_1231,2)
"RTN","IVMCM",197,0)
 .S IVMCPAY=$$RXST^IBARXEU(DFN)
"RTN","IVMCM",198,0)
 .I $$AGE^IVMUFNC5(DT)>$$INCY^IVMUFNC5(IVMMTDT) D PROB^IVMCMC("Only Copay Tests in the current/previous income years are valid. (Not effective)") Q
"RTN","IVMCM",199,0)
 .; - perform edit checks and file CT
"RTN","IVMCM",200,0)
 .D CHKDT
"RTN","IVMCM",201,0)
 .;deletion indicator sent?
"RTN","IVMCM",202,0)
 .I $P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,3)=HLQ D  Q
"RTN","IVMCM",203,0)
 ..D
"RTN","IVMCM",204,0)
 ...;if there is a future test for that income year, delete that
"RTN","IVMCM",205,0)
 ...N IEN,DATA,IVMPAT
"RTN","IVMCM",206,0)
 ...S IEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),2,.IVMPAT)
"RTN","IVMCM",207,0)
 ...I IEN S DATA(.07)="" I $$UPD^DGENDBS(301.5,IVMPAT,.DATA)
"RTN","IVMCM",208,0)
 ...I IEN,$D(^DGMT(408.31,IEN,0)) D
"RTN","IVMCM",209,0)
 ....S IVMMTIEN=IEN
"RTN","IVMCM",210,0)
 ....S IVMFUTR=1
"RTN","IVMCM",211,0)
 ...E  D
"RTN","IVMCM",212,0)
 ....S IVMFUTR=0
"RTN","IVMCM",213,0)
 ..Q:('IVMMTIEN)
"RTN","IVMCM",214,0)
 ..S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM",215,0)
 ..I $$EN^IVMCMD(IVMMTIEN) D
"RTN","IVMCM",216,0)
 ...S RET=$$LST^DGMTU(DFN,DT,IVMTYPE)
"RTN","IVMCM",217,0)
 ...S CODE=$S(($E($P(RET,"^",2),1,3)=$E(DT,1,3)):$P(RET,"^",4),1:"")
"RTN","IVMCM",218,0)
 ...D ADD^IVMCMB(DFN,IVMTYPE,$S(IVMFUTR:"DELETE FUTR TEST",1:"DELETE PRMRY TEST"),+$G(NODE0),$$GETCODE^DGMTH($P(NODE0,"^",3)),CODE)
"RTN","IVMCM",219,0)
 .;
"RTN","IVMCM",220,0)
 .;check timestamp - if matches current primary test, then this is a duplicate and does not need to be uploaded
"RTN","IVMCM",221,0)
 .I TMSTAMP D
"RTN","IVMCM",222,0)
 ..S NODE=""
"RTN","IVMCM",223,0)
 ..I IVMFUTR N IVMMTIEN S IVMMTIEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),2)
"RTN","IVMCM",224,0)
 ..Q:'IVMMTIEN
"RTN","IVMCM",225,0)
 ..S NODE=$G(^DGMT(408.31,IVMMTIEN,2))
"RTN","IVMCM",226,0)
 .S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM",227,0)
 .I TMSTAMP,TMSTAMP=$P(NODE,"^",2),IVMMTDT=$P(NODE0,"^"),SOURCE=$P(NODE,"^",5) Q
"RTN","IVMCM",228,0)
 .;
"RTN","IVMCM",229,0)
 .D DELTYPE^IVMCMD(DFN,IVMMTDT,1)
"RTN","IVMCM",230,0)
 .D EN^IVMCM1
"RTN","IVMCM",231,0)
 ;
"RTN","IVMCM",232,0)
IS ; - If transmission is income screening info only then do not process
"RTN","IVMCM",233,0)
 ; - outside of the scope of MTS
"RTN","IVMCM",234,0)
 ;I IVMTYPE=3 S IVMMTDT=0 D EN^IVMCM1 I $D(HLERR) G PROCQ
"RTN","IVMCM",235,0)
 I IVMTYPE=3 S IVMMTDT=0
"RTN","IVMCM",236,0)
 ;
"RTN","IVMCM",237,0)
LTC ; If transmission contains a Long Term Care Test (TYPE 4 TEST)
"RTN","IVMCM",238,0)
 I $P($G(^TMP($J,"IVMCM","ZMT4")),HLFS,2) D LTC^IVMCM1
"RTN","IVMCM",239,0)
 ;
"RTN","IVMCM",240,0)
PROCQ ;
"RTN","IVMCM",241,0)
 ; release locks used to sychronize upload with local income test options
"RTN","IVMCM",242,0)
 D RELLOCKS^IVMCUPL(DFN)
"RTN","IVMCM",243,0)
 Q
"RTN","IVMCM",244,0)
 ;
"RTN","IVMCM",245,0)
CHKDT ; check date of income test being uploaded
"RTN","IVMCM",246,0)
 ; Is it a future date?  If so, set IVMFUTR=1
"RTN","IVMCM",247,0)
 ;
"RTN","IVMCM",248,0)
 ; IVMMTIEN is the IEN of current primary test for the year
"RTN","IVMCM",249,0)
 ;
"RTN","IVMCM",250,0)
 I $E($P(IVMLAST,"^",2),1,3)=$E(IVMMTDT,1,3) S IVMMTIEN=+IVMLAST
"RTN","IVMCM",251,0)
 I IVMMTDT>DT S IVMFUTR=1
"RTN","IVMCM",252,0)
 Q
"RTN","IVMCM",253,0)
FUTURE(DFN,YEAR,TYPE,IVMPAT) ;
"RTN","IVMCM",254,0)
 ;Returns the ien of the future test, if there is one
"RTN","IVMCM",255,0)
 ;Inputs:  DFN
"RTN","IVMCM",256,0)
 ;         YEAR  - income year
"RTN","IVMCM",257,0)
 ;         TYPE - type of test
"RTN","IVMCM",258,0)
 ;Output:
"RTN","IVMCM",259,0)
 ;  function value - ien of future means test, if there is one, "" otherwise
"RTN","IVMCM",260,0)
 ;  IVMPAT - Pointer to the IVM Patient file for the income year if there is an entry (pass by reference)
"RTN","IVMCM",261,0)
 ;
"RTN","IVMCM",262,0)
 N RET
"RTN","IVMCM",263,0)
 S RET=""
"RTN","IVMCM",264,0)
 S IVMPAT=$$FIND^IVMPLOG(DFN,YEAR)
"RTN","IVMCM",265,0)
 I IVMPAT S RET=$P($G(^IVM(301.5,IVMPAT,0)),"^",$S(TYPE=1:6,1:7))
"RTN","IVMCM",266,0)
 Q RET
"RTN","IVMUFNC5")
0^4^B18584748
"RTN","IVMUFNC5",1,0)
IVMUFNC5 ;ALB/AEG,HM - IVM UTILITIES CONTINUED ;8/10/05 1:39pm
"RTN","IVMUFNC5",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**55,109,149,183**;5-10-2002;Build 30
"RTN","IVMUFNC5",3,0)
 ;
"RTN","IVMUFNC5",4,0)
AGE(DT) ;
"RTN","IVMUFNC5",5,0)
 N Y
"RTN","IVMUFNC5",6,0)
 S Y=$E(DT,1,3)-1_"0000",Y=Y-10000
"RTN","IVMUFNC5",7,0)
 Q Y
"RTN","IVMUFNC5",8,0)
 ;
"RTN","IVMUFNC5",9,0)
INCY(IVMMTDT) ;
"RTN","IVMUFNC5",10,0)
 N Y
"RTN","IVMUFNC5",11,0)
 S Y=$E(IVMMTDT,1,3)_"0000",Y=Y-10000
"RTN","IVMUFNC5",12,0)
 Q Y
"RTN","IVMUFNC5",13,0)
 ;
"RTN","IVMUFNC5",14,0)
CATC(DATA) ;
"RTN","IVMUFNC5",15,0)
 ; Extrinsic function to determine is incoming ZMT1 segment meets 
"RTN","IVMUFNC5",16,0)
 ; one of the following groups:
"RTN","IVMUFNC5",17,0)
 ;     1.  Cat C or Pending Adj. / Provided income info / test date
"RTN","IVMUFNC5",18,0)
 ;         is 10/6/99 or later and Agreed to Pay is YES.
"RTN","IVMUFNC5",19,0)
 ;     OR
"RTN","IVMUFNC5",20,0)
 ;
"RTN","IVMUFNC5",21,0)
 ;     2.  Category C based upon declination to provide income info
"RTN","IVMUFNC5",22,0)
 ;         but agreed to pay deductible.
"RTN","IVMUFNC5",23,0)
 ;
"RTN","IVMUFNC5",24,0)
 ;
"RTN","IVMUFNC5",25,0)
 ; Input(s):  $G(^TMP($J,"IVMCM","ZMT1")) global node - Incoming ZMT
"RTN","IVMUFNC5",26,0)
 ;            segment.
"RTN","IVMUFNC5",27,0)
 ;
"RTN","IVMUFNC5",28,0)
 ; Output(s):  Function Value. 1 = Yes patient meets one of the criteria
"RTN","IVMUFNC5",29,0)
 ;                             0 = NO test does not meet criteria.
"RTN","IVMUFNC5",30,0)
 ;                            99 = initialize value and default criteria outside of criteria being checked.
"RTN","IVMUFNC5",31,0)
 N MTDAT,RETV
"RTN","IVMUFNC5",32,0)
 S RETV=99
"RTN","IVMUFNC5",33,0)
 Q:'$D(DATA) 0
"RTN","IVMUFNC5",34,0)
 S MTDAT("DT")=$$FMDATE^HLFNC($P($G(DATA),U,2)),MTDAT("MTS")=$P($G(DATA),U,3)
"RTN","IVMUFNC5",35,0)
 S MTDAT("APD")=$P($G(DATA),U,7),MTDAT("DCLI")=$P($G(DATA),U,16)
"RTN","IVMUFNC5",36,0)
 ; Patient Provided income information.
"RTN","IVMUFNC5",37,0)
 I '+$G(MTDAT("DCLI")) D
"RTN","IVMUFNC5",38,0)
 .; If Cat C or Pending Adjudication test date on or after 10/6/99
"RTN","IVMUFNC5",39,0)
 .; Provided Income info and Agreed to Pay.
"RTN","IVMUFNC5",40,0)
 .;
"RTN","IVMUFNC5",41,0)
 .I $G(MTDAT("MTS"))="C",$G(MTDAT("DT"))'<2991006,$G(MTDAT("APD"))=1 S RETV=1 Q
"RTN","IVMUFNC5",42,0)
 .I $G(MTDAT("MTS"))="P",$G(MTDAT("DT"))'<2991006,$G(MTDAT("APD"))=1 S RETV=1 Q
"RTN","IVMUFNC5",43,0)
 .;check CATC status MT for date less than 10/6/1999 and set the RETV  = 0 for error IVM*2.0*183
"RTN","IVMUFNC5",44,0)
 .I $G(MTDAT("MTS"))="C",$G(MTDAT("DT"))<2991006,$G(MTDAT("APD"))=1 S RETV=0 Q  ;IVM*2.0*183 HM
"RTN","IVMUFNC5",45,0)
 .;Pending Adjudication status MT and if date less than 10/6/1999 and set RETV = 0 for error IVM*2.0*183
"RTN","IVMUFNC5",46,0)
 .I $G(MTDAT("MTS"))="P",$G(MTDAT("DT"))<2991006,$G(MTDAT("APD"))=1 S RETV=0 Q  ;IVM*2.0*183 HM
"RTN","IVMUFNC5",47,0)
 ; Patient Declined to provide income information.
"RTN","IVMUFNC5",48,0)
 I +$G(MTDAT("DCLI")) D
"RTN","IVMUFNC5",49,0)
 .; Cat C and Agreed to Pay - No date restriction
"RTN","IVMUFNC5",50,0)
 .I $G(MTDAT("MTS"))="C",+$G(MTDAT("APD")) S RETV=1 Q
"RTN","IVMUFNC5",51,0)
 ;
"RTN","IVMUFNC5",52,0)
 Q RETV
"RTN","IVMUFNC5",53,0)
 ;
"RTN","IVMUFNC5",54,0)
ACCMT(DATA) ;
"RTN","IVMUFNC5",55,0)
 ; Added for IVM*2.0*183 HM
"RTN","IVMUFNC5",56,0)
 ; Extrinsic function to determine is incoming ZMT1 segment meets 
"RTN","IVMUFNC5",57,0)
 ; one of the following groups:
"RTN","IVMUFNC5",58,0)
 ;     1.  Based upon patient's income information, these patients are 
"RTN","IVMUFNC5",59,0)
 ;         subject to MT and their status is MT Copay Exempt.  ;IVM*2.0*183 HM
"RTN","IVMUFNC5",60,0)
 ;
"RTN","IVMUFNC5",61,0)
 ;     OR
"RTN","IVMUFNC5",62,0)
 ;
"RTN","IVMUFNC5",63,0)
 ;     2.  Patient is Geographic Means Test (GMT) based upon patients who provide
"RTN","IVMUFNC5",64,0)
 ;         income information and agreement to pay the deductible(s).  The patient 
"RTN","IVMUFNC5",65,0)
 ;         Means Test status is GMT Copay Required.  ;IVM*2.0*183 HM
"RTN","IVMUFNC5",66,0)
 ;
"RTN","IVMUFNC5",67,0)
 ; Input(s):  $G(^TMP($J,"IVMCM","ZMT1")) global node - Incoming ZMT
"RTN","IVMUFNC5",68,0)
 ;            segment.
"RTN","IVMUFNC5",69,0)
 ;
"RTN","IVMUFNC5",70,0)
 ; Output(s):  Function Value. 1 = Yes patient meets one of the criteria
"RTN","IVMUFNC5",71,0)
 ;                             0 = NO test does not meet criteria.
"RTN","IVMUFNC5",72,0)
 ;                            99 = initialize value and default criteria outside of criteria being checked.
"RTN","IVMUFNC5",73,0)
 ;
"RTN","IVMUFNC5",74,0)
 ;Controlled Subscription ICR #7088; Supports use of OLDMTPF^DGMTU4(TESTDATE)
"RTN","IVMUFNC5",75,0)
 ;Checks if the date is more than 1 year old of the VFA Start Date
"RTN","IVMUFNC5",76,0)
 ;
"RTN","IVMUFNC5",77,0)
 N MTDAT,RETV,IVML
"RTN","IVMUFNC5",78,0)
 S RETV=99
"RTN","IVMUFNC5",79,0)
 Q:'$D(DATA) 0
"RTN","IVMUFNC5",80,0)
 S MTDAT("APD")=$P($G(DATA),U,7) ;agree to pay deductible information
"RTN","IVMUFNC5",81,0)
 S MTDAT("DT")=$$FMDATE^HLFNC($P($G(DATA),U,2)),MTDAT("MTS")=$P($G(DATA),U,3)
"RTN","IVMUFNC5",82,0)
 ;check for MT Copay Exempt status and MT less than 1 year old as of "VFA Start Date"
"RTN","IVMUFNC5",83,0)
 I MTDAT("MTS")="A",'$$OLDMTPF^DGMTU4(MTDAT("DT")) S RETV=1 ;Logic for #1 comment above
"RTN","IVMUFNC5",84,0)
 I MTDAT("MTS")="A",+$$OLDMTPF^DGMTU4(MTDAT("DT")) S RETV=0
"RTN","IVMUFNC5",85,0)
 ;check for GMT Copay Required status and agreed to pay and MT less than 1 year old as of "VFA Start Date" and does require patient income
"RTN","IVMUFNC5",86,0)
 I MTDAT("MTS")="G",'$$OLDMTPF^DGMTU4(MTDAT("DT")),$G(MTDAT("APD"))=1 S RETV=1 ;Logic for #2 comment above
"RTN","IVMUFNC5",87,0)
 I MTDAT("MTS")="G",+$$OLDMTPF^DGMTU4(MTDAT("DT")),$G(MTDAT("APD"))=1 S RETV=0
"RTN","IVMUFNC5",88,0)
 ;
"RTN","IVMUFNC5",89,0)
 Q RETV
"RTN","IVMUFNC5",90,0)
 ;
"RTN","IVMUFNC5",91,0)
ELIG(DFN) ; Eligibility Check for Cat C uploads older than previous
"RTN","IVMUFNC5",92,0)
 ;         income year data.
"RTN","IVMUFNC5",93,0)
 ;
"RTN","IVMUFNC5",94,0)
 ; Input: DFN - Patient IEN
"RTN","IVMUFNC5",95,0)
 ; Output: Function Value 0 if Z10 upload not appropriate
"RTN","IVMUFNC5",96,0)
 ;
"RTN","IVMUFNC5",97,0)
 N IVMELI
"RTN","IVMUFNC5",98,0)
 S IVMELI=0
"RTN","IVMUFNC5",99,0)
 ; Check primary eligibility
"RTN","IVMUFNC5",100,0)
 I $D(^DPT(DFN,.36)) S X=^(.36) D
"RTN","IVMUFNC5",101,0)
 .; If NSC or SC < 50 0% appropriate to upload old test.
"RTN","IVMUFNC5",102,0)
 .I $P($G(^DIC(8,+X,0)),U,9)=5!($$SC(DFN)) S IVMELI=1
"RTN","IVMUFNC5",103,0)
 .I $P(X,U,12)=1 S IVMELI=0
"RTN","IVMUFNC5",104,0)
 .I $P(X,U,13)=1 S IVMELI=0
"RTN","IVMUFNC5",105,0)
 .K X
"RTN","IVMUFNC5",106,0)
 ; If deceased patient --- don't upload.
"RTN","IVMUFNC5",107,0)
 I +$$GET1^DIQ(2,DFN_",",.351,"I") S IVMELI=0
"RTN","IVMUFNC5",108,0)
 ; If eligible for medicaid, don't upload.
"RTN","IVMUFNC5",109,0)
 I +$$GET1^DIQ(2,DFN_",",.381,"I") S IVMELI=0
"RTN","IVMUFNC5",110,0)
 ; Check PH status.
"RTN","IVMUFNC5",111,0)
 I $P($G(^DPT(DFN,.53)),U)="Y" S IVMELI=0
"RTN","IVMUFNC5",112,0)
 ; Catastrophically disabled
"RTN","IVMUFNC5",113,0)
 I $P($G(^DPT(DFN,.39)),U,6)="Y" S IVMELI=0 ;IVM*2.0*149
"RTN","IVMUFNC5",114,0)
 ; Medal of Honor, don't upload
"RTN","IVMUFNC5",115,0)
 I $P($G(^DPT(DFN,.54)),U)="Y" S IVMELI=0 ;IVM*2.0*183 HM
"RTN","IVMUFNC5",116,0)
 Q IVMELI
"RTN","IVMUFNC5",117,0)
 ;
"RTN","IVMUFNC5",118,0)
SC(DFN) ; Check to see if patient is SC 0% non-compensable.
"RTN","IVMUFNC5",119,0)
 ; Input -- DFN Patient IEN
"RTN","IVMUFNC5",120,0)
 ; Output -- Function value 1=Yes or 0=No
"RTN","IVMUFNC5",121,0)
 ;
"RTN","IVMUFNC5",122,0)
 N IVMG,IVME,IVMF,IVMY
"RTN","IVMUFNC5",123,0)
 S IVMY=0
"RTN","IVMUFNC5",124,0)
 ; Primary Eligibility is SC < 50 %
"RTN","IVMUFNC5",125,0)
 I $D(^DPT(DFN,.36)),$P($G(^DIC(8,+X,0)),U,9)=3 S IVMY=1
"RTN","IVMUFNC5",126,0)
 G:'IVMY SCQ
"RTN","IVMUFNC5",127,0)
 ; Service Connected percentage = 0
"RTN","IVMUFNC5",128,0)
 I $P($G(^DPT(DFN,.3)),U,2)'=0 S IVMY=0 G SCQ
"RTN","IVMUFNC5",129,0)
 ; No Total annual VA Check amount
"RTN","IVMUFNC5",130,0)
 I $P($G(^DPT(DFN,.362)),U,20) S IVMY=0 G SCQ
"RTN","IVMUFNC5",131,0)
 ; POW Status indicated.
"RTN","IVMUFNC5",132,0)
 I $P($G(^DPT(DFN,.52)),U,5)="Y" S IVMY=0 G SCQ
"RTN","IVMUFNC5",133,0)
 ; Purple Heart Indicated.
"RTN","IVMUFNC5",134,0)
 I $P($G(^DPT(DFN,.53)),U)="Y" S IVMY=0 G SCQ
"RTN","IVMUFNC5",135,0)
 ; Check Secondary Eligibilities.
"RTN","IVMUFNC5",136,0)
 F IVMG=2,4,15:1:18 S IVME(IVMG)=""
"RTN","IVMUFNC5",137,0)
 S IVMG=0 F  S IVMG=$O(^DPT(DFN,"E","B",IVMG)) Q:'IVMG  D SEL I IVMF,$D(IVME(+IVMF)) S IVMY=0 Q
"RTN","IVMUFNC5",138,0)
SCQ Q +$G(IVMY)
"RTN","IVMUFNC5",139,0)
 ;
"RTN","IVMUFNC5",140,0)
SEL ;
"RTN","IVMUFNC5",141,0)
 S IVMF=$G(^DIC(8,+IVMG,0)) I IVMF="" Q
"RTN","IVMUFNC5",142,0)
 S IVMF=$P(IVMF,U,9)
"RTN","IVMUFNC5",143,0)
 I IVMF=""!('$D(^DIC(8.1,+IVMF,0))) D
"RTN","IVMUFNC5",144,0)
 .S IVMF=""
"RTN","IVMUFNC5",145,0)
 .Q
"RTN","IVMUFNC5",146,0)
 Q
"VER")
8.0^22.2
**END**
**END**

KIDS Distribution saved on Jun 20, 2018@16:05:38
BPS IB PSO BUNDLE 11.0
**KIDS**:BPS IB PSO BUNDLE 11.0^BPS*1.0*23^IB*2.0*591^PSO*7.0*482^

**INSTALL NAME**
BPS IB PSO BUNDLE 11.0
"BLD",10642,0)
BPS IB PSO BUNDLE 11.0^^1^3180620^y
"BLD",10642,6.3)
44
"BLD",10642,10,0)
^9.63^3^3
"BLD",10642,10,1,0)
BPS*1.0*23^1
"BLD",10642,10,2,0)
IB*2.0*591^1
"BLD",10642,10,3,0)
PSO*7.0*482^1
"BLD",10642,10,"B","BPS*1.0*23",1)

"BLD",10642,10,"B","IB*2.0*591",2)

"BLD",10642,10,"B","PSO*7.0*482",3)

"BLD",10642,"KRN",0)
^9.67PA^779.2^20
"BLD",10642,"KRN",.4,0)
.4
"BLD",10642,"KRN",.401,0)
.401
"BLD",10642,"KRN",.402,0)
.402
"BLD",10642,"KRN",.403,0)
.403
"BLD",10642,"KRN",.5,0)
.5
"BLD",10642,"KRN",.84,0)
.84
"BLD",10642,"KRN",3.6,0)
3.6
"BLD",10642,"KRN",3.8,0)
3.8
"BLD",10642,"KRN",9.2,0)
9.2
"BLD",10642,"KRN",9.8,0)
9.8
"BLD",10642,"KRN",19,0)
19
"BLD",10642,"KRN",19.1,0)
19.1
"BLD",10642,"KRN",101,0)
101
"BLD",10642,"KRN",409.61,0)
409.61
"BLD",10642,"KRN",771,0)
771
"BLD",10642,"KRN",779.2,0)
779.2
"BLD",10642,"KRN",870,0)
870
"BLD",10642,"KRN",8989.51,0)
8989.51
"BLD",10642,"KRN",8989.52,0)
8989.52
"BLD",10642,"KRN",8994,0)
8994
"BLD",10642,"KRN","B",.4,.4)

"BLD",10642,"KRN","B",.401,.401)

"BLD",10642,"KRN","B",.402,.402)

"BLD",10642,"KRN","B",.403,.403)

"BLD",10642,"KRN","B",.5,.5)

"BLD",10642,"KRN","B",.84,.84)

"BLD",10642,"KRN","B",3.6,3.6)

"BLD",10642,"KRN","B",3.8,3.8)

"BLD",10642,"KRN","B",9.2,9.2)

"BLD",10642,"KRN","B",9.8,9.8)

"BLD",10642,"KRN","B",19,19)

"BLD",10642,"KRN","B",19.1,19.1)

"BLD",10642,"KRN","B",101,101)

"BLD",10642,"KRN","B",409.61,409.61)

"BLD",10642,"KRN","B",771,771)

"BLD",10642,"KRN","B",779.2,779.2)

"BLD",10642,"KRN","B",870,870)

"BLD",10642,"KRN","B",8989.51,8989.51)

"BLD",10642,"KRN","B",8989.52,8989.52)

"BLD",10642,"KRN","B",8994,8994)

"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"VER")
8.0^22.2
**INSTALL NAME**
BPS*1.0*23
"BLD",10639,0)
BPS*1.0*23^E CLAIMS MGMT ENGINE^0^3180620^y
"BLD",10639,1,0)
^^1^1^3180305^
"BLD",10639,1,1,0)
MCCF EDI TAS EPHARMACY BUILDS 3 & 4
"BLD",10639,4,0)
^9.64PA^9002313.2^10
"BLD",10639,4,9002313.2,0)
9002313.2
"BLD",10639,4,9002313.2,222)
y^n^f^^n^^y^o^n
"BLD",10639,4,9002313.22,0)
9002313.22
"BLD",10639,4,9002313.22,222)
y^n^f^^n^^y^o^n
"BLD",10639,4,9002313.25,0)
9002313.25
"BLD",10639,4,9002313.25,222)
y^n^f^^n^^y^o^n
"BLD",10639,4,9002313.32,0)
9002313.32
"BLD",10639,4,9002313.32,2,0)
^9.641^9002313.32^1
"BLD",10639,4,9002313.32,2,9002313.32,0)
BPS PAYER RESPONSE OVERRIDES  (File-top level)
"BLD",10639,4,9002313.32,2,9002313.32,1,0)
^9.6411^2.1^1
"BLD",10639,4,9002313.32,2,9002313.32,1,2.1,0)
PATIENT PAY AMOUNT
"BLD",10639,4,9002313.32,222)
y^n^p^^^^n^^n
"BLD",10639,4,9002313.32,224)

"BLD",10639,4,9002313.511,0)
9002313.511
"BLD",10639,4,9002313.511,2,0)
^9.641^9002313.5112^1
"BLD",10639,4,9002313.511,2,9002313.5112,0)
ADDL NCPDP FIELD  (sub-file)
"BLD",10639,4,9002313.511,2,9002313.5112,1,0)
^9.6411^.02^2
"BLD",10639,4,9002313.511,2,9002313.5112,1,.01,0)
ADDL NCPDP FIELD
"BLD",10639,4,9002313.511,2,9002313.5112,1,.02,0)
SEGMENT
"BLD",10639,4,9002313.511,222)
y^y^p^^^^n^^n
"BLD",10639,4,9002313.511,224)

"BLD",10639,4,9002313.59,0)
9002313.59
"BLD",10639,4,9002313.59,2,0)
^9.641^9002313.59141^1
"BLD",10639,4,9002313.59,2,9002313.59141,0)
OTHER PAYER AMT PAID MULTIPLE  (sub-file)
"BLD",10639,4,9002313.59,2,9002313.59141,1,0)
^9.6411^.03^1
"BLD",10639,4,9002313.59,2,9002313.59141,1,.03,0)
OTHER PAYER-PATIENT RESP AMT
"BLD",10639,4,9002313.59,222)
y^n^p^^^^n^^n
"BLD",10639,4,9002313.59,224)

"BLD",10639,4,9002313.77,0)
9002313.77
"BLD",10639,4,9002313.77,2,0)
^9.641^9002313.7781^1
"BLD",10639,4,9002313.77,2,9002313.7781,0)
OTHER PAYER AMT PAID MULTIPLE  (sub-file)
"BLD",10639,4,9002313.77,2,9002313.7781,1,0)
^9.6411^.03^1
"BLD",10639,4,9002313.77,2,9002313.7781,1,.03,0)
OTHER PAYER-PATIENT RESP AMT
"BLD",10639,4,9002313.77,222)
y^n^p^^^^n^^n
"BLD",10639,4,9002313.77,224)

"BLD",10639,4,9002313.9,0)
9002313.9
"BLD",10639,4,9002313.9,222)
y^y^f^^n^^y^o^n
"BLD",10639,4,9002313.91,0)
9002313.91
"BLD",10639,4,9002313.91,222)
y^y^f^^n^^y^o^n
"BLD",10639,4,9002313.91,224)

"BLD",10639,4,9002313.93,0)
9002313.93
"BLD",10639,4,9002313.93,222)
y^n^f^^n^^y^o^n
"BLD",10639,4,"APDD",9002313.32,9002313.32)

"BLD",10639,4,"APDD",9002313.32,9002313.32,2.1)

"BLD",10639,4,"APDD",9002313.511,9002313.5112)

"BLD",10639,4,"APDD",9002313.511,9002313.5112,.01)

"BLD",10639,4,"APDD",9002313.511,9002313.5112,.02)

"BLD",10639,4,"APDD",9002313.59,9002313.59141)

"BLD",10639,4,"APDD",9002313.59,9002313.59141,.03)

"BLD",10639,4,"APDD",9002313.77,9002313.7781)

"BLD",10639,4,"APDD",9002313.77,9002313.7781,.03)

"BLD",10639,4,"B",9002313.2,9002313.2)

"BLD",10639,4,"B",9002313.22,9002313.22)

"BLD",10639,4,"B",9002313.25,9002313.25)

"BLD",10639,4,"B",9002313.32,9002313.32)

"BLD",10639,4,"B",9002313.511,9002313.511)

"BLD",10639,4,"B",9002313.59,9002313.59)

"BLD",10639,4,"B",9002313.77,9002313.77)

"BLD",10639,4,"B",9002313.9,9002313.9)

"BLD",10639,4,"B",9002313.91,9002313.91)

"BLD",10639,4,"B",9002313.93,9002313.93)

"BLD",10639,6.3)
44
"BLD",10639,"INI")
EN^BPS23PRE
"BLD",10639,"INID")
^^n
"BLD",10639,"KRN",0)
^9.67PA^779.2^20
"BLD",10639,"KRN",.4,0)
.4
"BLD",10639,"KRN",.401,0)
.401
"BLD",10639,"KRN",.402,0)
.402
"BLD",10639,"KRN",.403,0)
.403
"BLD",10639,"KRN",.5,0)
.5
"BLD",10639,"KRN",.84,0)
.84
"BLD",10639,"KRN",3.6,0)
3.6
"BLD",10639,"KRN",3.8,0)
3.8
"BLD",10639,"KRN",9.2,0)
9.2
"BLD",10639,"KRN",9.8,0)
9.8
"BLD",10639,"KRN",9.8,"NM",0)
^9.68A^32^32
"BLD",10639,"KRN",9.8,"NM",1,0)
BPSRPT4^^0^B135691834
"BLD",10639,"KRN",9.8,"NM",2,0)
BPSRPT5^^0^B175946250
"BLD",10639,"KRN",9.8,"NM",3,0)
BPSRPT0^^0^B64877834
"BLD",10639,"KRN",9.8,"NM",4,0)
BPSRPT1^^0^B82481306
"BLD",10639,"KRN",9.8,"NM",5,0)
BPSRPT3^^0^B232886550
"BLD",10639,"KRN",9.8,"NM",6,0)
BPSRPT3A^^0^B48335740
"BLD",10639,"KRN",9.8,"NM",7,0)
BPSRPT6^^0^B74397118
"BLD",10639,"KRN",9.8,"NM",8,0)
BPSRPT7^^0^B185034078
"BLD",10639,"KRN",9.8,"NM",9,0)
BPSRPT8^^0^B168765371
"BLD",10639,"KRN",9.8,"NM",10,0)
BPSECX0^^0^B40356172
"BLD",10639,"KRN",9.8,"NM",11,0)
BPSOSCF^^0^B36317164
"BLD",10639,"KRN",9.8,"NM",12,0)
BPSOSH2^^0^B181409797
"BLD",10639,"KRN",9.8,"NM",13,0)
BPSRES^^0^B192481154
"BLD",10639,"KRN",9.8,"NM",14,0)
BPSRES1^^0^B51902398
"BLD",10639,"KRN",9.8,"NM",15,0)
BPSVRX^^0^B237122038
"BLD",10639,"KRN",9.8,"NM",16,0)
BPSVRX3^^0^B134862445
"BLD",10639,"KRN",9.8,"NM",17,0)
BPSOSCD^^0^B106714458
"BLD",10639,"KRN",9.8,"NM",18,0)
BPSOSHF^^0^B45980918
"BLD",10639,"KRN",9.8,"NM",19,0)
BPSOSRX3^^0^B124478276
"BLD",10639,"KRN",9.8,"NM",20,0)
BPSPRRX3^^0^B127795834
"BLD",10639,"KRN",9.8,"NM",21,0)
BPSPRRX6^^0^B122123507
"BLD",10639,"KRN",9.8,"NM",22,0)
BPSTEST^^0^B233813306
"BLD",10639,"KRN",9.8,"NM",23,0)
BPSOSRB^^0^B42516960
"BLD",10639,"KRN",9.8,"NM",24,0)
BPSFLD01^^0^B16648261
"BLD",10639,"KRN",9.8,"NM",25,0)
BPSSCRCV^^0^B116942528
"BLD",10639,"KRN",9.8,"NM",26,0)
BPSSCR01^^0^B18234340
"BLD",10639,"KRN",9.8,"NM",27,0)
BPSSCR03^^0^B75749695
"BLD",10639,"KRN",9.8,"NM",28,0)
BPSSCR05^^0^B7667360
"BLD",10639,"KRN",9.8,"NM",29,0)
BPSSCRSL^^0^B17169581
"BLD",10639,"KRN",9.8,"NM",30,0)
BPSSCRU1^^0^B4148479
"BLD",10639,"KRN",9.8,"NM",31,0)
BPSSCRV1^^0^B141217957
"BLD",10639,"KRN",9.8,"NM",32,0)
BPSSCRV2^^0^B90892572
"BLD",10639,"KRN",9.8,"NM","B","BPSECX0",10)

"BLD",10639,"KRN",9.8,"NM","B","BPSFLD01",24)

"BLD",10639,"KRN",9.8,"NM","B","BPSOSCD",17)

"BLD",10639,"KRN",9.8,"NM","B","BPSOSCF",11)

"BLD",10639,"KRN",9.8,"NM","B","BPSOSH2",12)

"BLD",10639,"KRN",9.8,"NM","B","BPSOSHF",18)

"BLD",10639,"KRN",9.8,"NM","B","BPSOSRB",23)

"BLD",10639,"KRN",9.8,"NM","B","BPSOSRX3",19)

"BLD",10639,"KRN",9.8,"NM","B","BPSPRRX3",20)

"BLD",10639,"KRN",9.8,"NM","B","BPSPRRX6",21)

"BLD",10639,"KRN",9.8,"NM","B","BPSRES",13)

"BLD",10639,"KRN",9.8,"NM","B","BPSRES1",14)

"BLD",10639,"KRN",9.8,"NM","B","BPSRPT0",3)

"BLD",10639,"KRN",9.8,"NM","B","BPSRPT1",4)

"BLD",10639,"KRN",9.8,"NM","B","BPSRPT3",5)

"BLD",10639,"KRN",9.8,"NM","B","BPSRPT3A",6)

"BLD",10639,"KRN",9.8,"NM","B","BPSRPT4",1)

"BLD",10639,"KRN",9.8,"NM","B","BPSRPT5",2)

"BLD",10639,"KRN",9.8,"NM","B","BPSRPT6",7)

"BLD",10639,"KRN",9.8,"NM","B","BPSRPT7",8)

"BLD",10639,"KRN",9.8,"NM","B","BPSRPT8",9)

"BLD",10639,"KRN",9.8,"NM","B","BPSSCR01",26)

"BLD",10639,"KRN",9.8,"NM","B","BPSSCR03",27)

"BLD",10639,"KRN",9.8,"NM","B","BPSSCR05",28)

"BLD",10639,"KRN",9.8,"NM","B","BPSSCRCV",25)

"BLD",10639,"KRN",9.8,"NM","B","BPSSCRSL",29)

"BLD",10639,"KRN",9.8,"NM","B","BPSSCRU1",30)

"BLD",10639,"KRN",9.8,"NM","B","BPSSCRV1",31)

"BLD",10639,"KRN",9.8,"NM","B","BPSSCRV2",32)

"BLD",10639,"KRN",9.8,"NM","B","BPSTEST",22)

"BLD",10639,"KRN",9.8,"NM","B","BPSVRX",15)

"BLD",10639,"KRN",9.8,"NM","B","BPSVRX3",16)

"BLD",10639,"KRN",19,0)
19
"BLD",10639,"KRN",19.1,0)
19.1
"BLD",10639,"KRN",101,0)
101
"BLD",10639,"KRN",101,"NM",0)
^9.68A^18^17
"BLD",10639,"KRN",101,"NM",1,0)
BPS VIEW ECME RX MENU^^0
"BLD",10639,"KRN",101,"NM",2,0)
BPS VRX NAV BILL LIST^^0
"BLD",10639,"KRN",101,"NM",3,0)
BPS VRX NAV BILLING EVENTS RPT^^0
"BLD",10639,"KRN",101,"NM",4,0)
BPS VRX NAV CRI^^0
"BLD",10639,"KRN",101,"NM",5,0)
BPS VRX NAV DG ELIG STATUS^^0
"BLD",10639,"KRN",101,"NM",6,0)
BPS VRX NAV DG ELIG VERIFICATION^^0
"BLD",10639,"KRN",101,"NM",7,0)
BPS VRX NAV ECME CLAIM LOG^^0
"BLD",10639,"KRN",101,"NM",8,0)
BPS VRX NAV INS POL^^0
"BLD",10639,"KRN",101,"NM",9,0)
BPS VRX NAV MED PROFILE^^0
"BLD",10639,"KRN",101,"NM",11,0)
BPS VRX NAV TPJI AR ACCT PROFILE^^0
"BLD",10639,"KRN",101,"NM",12,0)
BPS VRX NAV TPJI AR COMMENT HISTORY^^0
"BLD",10639,"KRN",101,"NM",13,0)
BPS VRX NAV TPJI CLAIM INFORMATION^^0
"BLD",10639,"KRN",101,"NM",14,0)
BPS VRX NAV TPJI ECME RX INFO^^0
"BLD",10639,"KRN",101,"NM",15,0)
BPS VRX NAV VIEWRX^^0
"BLD",10639,"KRN",101,"NM",16,0)
VALM BLANK 3^^0
"BLD",10639,"KRN",101,"NM",17,0)
BPS VRX NAV PRINT REPORT^^0
"BLD",10639,"KRN",101,"NM",18,0)
VALM BLANK 1^^0
"BLD",10639,"KRN",101,"NM","B","BPS VIEW ECME RX MENU",1)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV BILL LIST",2)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV BILLING EVENTS RPT",3)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV CRI",4)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV DG ELIG STATUS",5)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV DG ELIG VERIFICATION",6)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV ECME CLAIM LOG",7)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV INS POL",8)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV MED PROFILE",9)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV PRINT REPORT",17)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV TPJI AR ACCT PROFILE",11)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV TPJI AR COMMENT HISTORY",12)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV TPJI CLAIM INFORMATION",13)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV TPJI ECME RX INFO",14)

"BLD",10639,"KRN",101,"NM","B","BPS VRX NAV VIEWRX",15)

"BLD",10639,"KRN",101,"NM","B","VALM BLANK 1",18)

"BLD",10639,"KRN",101,"NM","B","VALM BLANK 3",16)

"BLD",10639,"KRN",409.61,0)
409.61
"BLD",10639,"KRN",409.61,"NM",0)
^9.68A^^0
"BLD",10639,"KRN",771,0)
771
"BLD",10639,"KRN",779.2,0)
779.2
"BLD",10639,"KRN",870,0)
870
"BLD",10639,"KRN",8989.51,0)
8989.51
"BLD",10639,"KRN",8989.52,0)
8989.52
"BLD",10639,"KRN",8994,0)
8994
"BLD",10639,"KRN","B",.4,.4)

"BLD",10639,"KRN","B",.401,.401)

"BLD",10639,"KRN","B",.402,.402)

"BLD",10639,"KRN","B",.403,.403)

"BLD",10639,"KRN","B",.5,.5)

"BLD",10639,"KRN","B",.84,.84)

"BLD",10639,"KRN","B",3.6,3.6)

"BLD",10639,"KRN","B",3.8,3.8)

"BLD",10639,"KRN","B",9.2,9.2)

"BLD",10639,"KRN","B",9.8,9.8)

"BLD",10639,"KRN","B",19,19)

"BLD",10639,"KRN","B",19.1,19.1)

"BLD",10639,"KRN","B",101,101)

"BLD",10639,"KRN","B",409.61,409.61)

"BLD",10639,"KRN","B",771,771)

"BLD",10639,"KRN","B",779.2,779.2)

"BLD",10639,"KRN","B",870,870)

"BLD",10639,"KRN","B",8989.51,8989.51)

"BLD",10639,"KRN","B",8989.52,8989.52)

"BLD",10639,"KRN","B",8994,8994)

"BLD",10639,"QUES",0)
^9.62^^
"DATA",9002313.2,1,0)
00^NOT SPECIFIED
"DATA",9002313.2,1,1,0)
^9002313.201S^1^1
"DATA",9002313.2,1,1,1,0)
51
"DATA",9002313.2,2,0)
01^DELIVERY COST
"DATA",9002313.2,2,1,0)
^9002313.201S^2^2
"DATA",9002313.2,2,1,1,0)
51
"DATA",9002313.2,2,1,2,0)
D0
"DATA",9002313.2,3,0)
02^SHIPPING COST
"DATA",9002313.2,3,1,0)
^9002313.201S^2^2
"DATA",9002313.2,3,1,1,0)
51
"DATA",9002313.2,3,1,2,0)
D0
"DATA",9002313.2,4,0)
03^POSTAGE COST
"DATA",9002313.2,4,1,0)
^9002313.201S^2^2
"DATA",9002313.2,4,1,1,0)
51
"DATA",9002313.2,4,1,2,0)
D0
"DATA",9002313.2,5,0)
04^ADMINISTRATIVE COST
"DATA",9002313.2,5,1,0)
^9002313.201S^2^2
"DATA",9002313.2,5,1,1,0)
51
"DATA",9002313.2,5,1,2,0)
D0
"DATA",9002313.2,6,0)
05^INCENTIVE
"DATA",9002313.2,6,1,0)
^9002313.201S^2^2
"DATA",9002313.2,6,1,1,0)
51
"DATA",9002313.2,6,1,2,0)
D0
"DATA",9002313.2,7,0)
06^COGNITIVE SERVICE
"DATA",9002313.2,7,1,0)
^9002313.201S^2^2
"DATA",9002313.2,7,1,1,0)
51
"DATA",9002313.2,7,1,2,0)
D0
"DATA",9002313.2,8,0)
07^DRUG BENEFIT
"DATA",9002313.2,8,1,0)
^9002313.201S^2^2
"DATA",9002313.2,8,1,1,0)
51
"DATA",9002313.2,8,1,2,0)
D0
"DATA",9002313.2,9,0)
08^SUM OF ALL REIMBURSEMENT
"DATA",9002313.2,9,1,0)
^9002313.201S^1^1
"DATA",9002313.2,9,1,1,0)
51
"DATA",9002313.2,10,0)
09^COMPOUND PREPARATION COST
"DATA",9002313.2,10,1,0)
^9002313.201S^1^1
"DATA",9002313.2,10,1,1,0)
D0
"DATA",9002313.2,11,0)
10^PERCENTAGE TAX
"DATA",9002313.2,11,1,0)
^9002313.201S^1^1
"DATA",9002313.2,11,1,1,0)
D0
"DATA",9002313.2,12,0)
11^MEDICATION ADMINISTRATION
"DATA",9002313.2,12,1,0)
^9002313.201S^1^1
"DATA",9002313.2,12,1,1,0)
D0
"DATA",9002313.2,13,0)
98^COUPON
"DATA",9002313.2,13,1,0)
^9002313.201S^1^1
"DATA",9002313.2,13,1,1,0)
51
"DATA",9002313.2,14,0)
99^OTHER
"DATA",9002313.2,14,1,0)
^9002313.201S^1^1
"DATA",9002313.2,14,1,1,0)
51
"DATA",9002313.2,15,0)
12^REGULATORY FEE
"DATA",9002313.2,15,1,0)
^9002313.201S^1^1
"DATA",9002313.2,15,1,1,0)
D0
"DATA",9002313.22,1,0)
00^NOT SPECIFIED
"DATA",9002313.22,2,0)
2A^PRESCRIPTION NOT DISPENSED
"DATA",9002313.22,3,0)
3A^RECOMMENDATION ACCEPTED
"DATA",9002313.22,4,0)
1A^DISPENSED AS IS, FALSE POSITIVE
"DATA",9002313.22,5,0)
2B^NOT DISPENSED, DIRECTIONS CLARIFIED
"DATA",9002313.22,6,0)
3B^RECOMMENDATION NOT ACCEPTED
"DATA",9002313.22,7,0)
1B^DISPENSED PRESCRIPTION AS IS
"DATA",9002313.22,8,0)
3C^DISCONTINUED DRUG
"DATA",9002313.22,9,0)
1C^DISPENSED, WITH DIFFERENT DOSE
"DATA",9002313.22,10,0)
3D^REGIMEN CHANGED
"DATA",9002313.22,11,0)
1D^DISPENSED, WITH DIFFERENT DIRECTIONS
"DATA",9002313.22,12,0)
3E^THERAPY CHANGED
"DATA",9002313.22,13,0)
1E^DISPENSED, WITH DIFFERENT DRUG
"DATA",9002313.22,14,0)
3F^THERAPY CHANGED - COST INCREASE ACKNOWLEDGED
"DATA",9002313.22,15,0)
1F^DISPENSED, WITH DIFFERENT QUANTITY
"DATA",9002313.22,16,0)
3G^DRUG THERAPY UNCHANGED
"DATA",9002313.22,17,0)
1G^DISPENSED, WITH PRESCRIBER APPROVAL
"DATA",9002313.22,18,0)
3H^FOLLOW-UP/REPORT
"DATA",9002313.22,19,0)
1H^BRAND-TO-GENERIC CHANGE
"DATA",9002313.22,20,0)
3J^PATIENT REFERRAL
"DATA",9002313.22,21,0)
1J^RX-TO-OTC CHANGE
"DATA",9002313.22,22,0)
3M^COMPLIANCE AID PROVIDED
"DATA",9002313.22,23,0)
1K^DISPENSED WITH DIFFERENT DOSAGE FORM
"DATA",9002313.22,24,0)
3K^INSTRUCTIONS UNDERSTOOD
"DATA",9002313.22,25,0)
3N^MEDICATION ADMINISTERED
"DATA",9002313.22,26,0)
4A^PRESCRIBED WITH ACKNOWLEDGEMENTS
"DATA",9002313.25,1,0)
0^ZZ DO NOT USE - NOT SPECIFIED, DEFAULT
"DATA",9002313.25,2,0)
1^NO OVERRIDE
"DATA",9002313.25,3,0)
2^OTHER OVERRIDE
"DATA",9002313.25,4,0)
3^VACATION SUPPLY
"DATA",9002313.25,5,0)
4^LOST PRESCRIPTION
"DATA",9002313.25,6,0)
5^THERAPY CHANGE
"DATA",9002313.25,7,0)
6^STARTER DOSE
"DATA",9002313.25,8,0)
7^MEDICALLY NECESSARY
"DATA",9002313.25,9,0)
8^PROCESS COMPOUND FOR APPROVED INGREDIENTS
"DATA",9002313.25,10,0)
9^ENCOUNTERS
"DATA",9002313.25,11,0)
99^OTHER
"DATA",9002313.25,12,0)
10^MEETS PLAN LIMITATIONS
"DATA",9002313.25,13,0)
11^CERTIFICATION ON FILE
"DATA",9002313.25,14,0)
12^DME REPLACEMENT INDICATOR
"DATA",9002313.25,15,0)
13^PAYER-RECOGNIZED EMERGENCY/DISASTER ASSISTANCE REQUEST
"DATA",9002313.25,16,0)
14^LONG TERM CARE LEAVE OF ABSENCE
"DATA",9002313.25,17,0)
15^LONG TERM CARE REPLACEMENT MEDICATION
"DATA",9002313.25,18,0)
16^LONG TERM CARE EMERGENCY BOX (KIT) OR AUTOMATED DISPENSING MACHINE
"DATA",9002313.25,19,0)
17^LONG TERM CARE EMERGENCY SUPPLY REMAINDER
"DATA",9002313.25,20,0)
18^LONG TERM CARE PATIENT ADMIT/READMIT INDICATOR
"DATA",9002313.25,21,0)
19^SPLIT BILLING
"DATA",9002313.25,22,0)
21^LTC DISPENSING: 14 DAYS OR LESS NOT APPLICABLE
"DATA",9002313.25,23,0)
22^LTC DISPENSING: 7 DAYS
"DATA",9002313.25,24,0)
23^LTC DISPENSING: 4 DAYS
"DATA",9002313.25,25,0)
24^LTC DISPENSING: 3 DAYS
"DATA",9002313.25,26,0)
25^LTC DISPENSING: 2 DAYS
"DATA",9002313.25,27,0)
26^LTC DISPENSING: 1 DAY
"DATA",9002313.25,28,0)
27^LTC DISPENSING: 4-3 DAYS
"DATA",9002313.25,29,0)
28^LTC DISPENSING: 2-2-3 DAYS
"DATA",9002313.25,30,0)
29^LTC DISPENSING: DAILY AND 3-DAY WEEKEND
"DATA",9002313.25,31,0)
30^LTC DISPENSING: PER SHIFT DISPENSING 
"DATA",9002313.25,32,0)
31^LTC DISPENSING: PER MED PASS DISPENSING
"DATA",9002313.25,33,0)
32^LTC DISPENSING: PRN ON DEMAND
"DATA",9002313.25,34,0)
33^LTC DISPENSING: 7 DAY OR LESS CYCLE NOT OTHERWISE REPRESENTED
"DATA",9002313.25,35,0)
34^LTC DISPENSING: 14 DAYS DISPENSING
"DATA",9002313.25,36,0)
35^LTC DISPENSING: 8-14 DAY DISPENSING METHOD NOT LISTED
"DATA",9002313.25,37,0)
36^LTC DISPENSING: DISPENSED OUTSIDE SHORT CYCLE
"DATA",9002313.25,38,0)
20^SECTION 340B OF THE PUBLIC HEALTH ACT OF 1992
"DATA",9002313.25,39,0)
42^PRESCRIBER ID VALID - PRESCRIBING REQUIREMENTS VALIDATED
"DATA",9002313.25,40,0)
43^PRESCRIBER'S DEA ACTIVE W/DEA AUTHORIZED PRESCRIPTIVE RIGHT
"DATA",9002313.25,41,0)
44^ZZ DO NOT USE - ASSOCIATED PRESCRIBER DEA RECENTLY LICENSED OR RE-ACTIVATED
"DATA",9002313.25,42,0)
45^PRESCRIBER'S DEA VALID HOSP DEA W/SUFFIX-HAS PRESCRIPTIVE AUTH DRUG DEA SCHEDULE
"DATA",9002313.25,43,0)
46^PRESCRIBER'S DEA HAS PRESCRIPTIVE AUTHORITY FOR THIS DRUG DEA SCHEDULE
"DATA",9002313.25,44,0)
47^SHORTENED DAYS SUPPLY DISPENSED
"DATA",9002313.25,45,0)
48^DISPENSED SUBSEQUENT TO A SHORTENED DAYS SUPPLY DISPENSING
"DATA",9002313.25,46,0)
49^PRESCRIBER DOES NOT CURRENTLY HAVE AN ACTIVE TYPE 1 NPI
"DATA",9002313.25,47,0)
52^PRESCRIBER'S STATE LICENSE WITH PRESCRIPTIVE AUTHORITY HAS BEEN VALIDATED
"DATA",9002313.25,48,0)
53^PRESCRIBER NPI ACTIVE & VALID-MEDICARE ENROLLMENT & RX AUTHORITY VALIDATED
"DATA",9002313.25,49,0)
54^CMS OTHER AUTHORIZED PRESCRIBER: PROVIDER W/RX AUTHORITY, MEDICARE INELIGIBLE
"DATA",9002313.25,50,0)
55^PRESCRIBER ENROLLMENT IN STATE MEDICAID PROGRAM HAS BEEN VALIDATED
"DATA",9002313.25,51,0)
56^PHARMACY ENROLLMENT IN STATE MEDICAID PROGRAM HAS BEEN VALIDATED
"DATA",9002313.9,1,0)
TRANSACTION HEADER^100^C
"DATA",9002313.9,2,0)
PATIENT^110^C
"DATA",9002313.9,3,0)
INSURANCE^120^C
"DATA",9002313.9,4,0)
CLAIM^130^C
"DATA",9002313.9,5,0)
PHARMACY PROVIDER^140^C
"DATA",9002313.9,6,0)
PRESCRIBER^150^C
"DATA",9002313.9,7,0)
COORDINATION OF BENEFITS/OTHER PAYMENTS^160^C
"DATA",9002313.9,8,0)
WORKER'S COMPENSATION^170^C
"DATA",9002313.9,9,0)
DUR/PPS^180^C
"DATA",9002313.9,10,0)
PRICING^190^C
"DATA",9002313.9,11,0)
COUPON^200^C
"DATA",9002313.9,12,0)
COMPOUND^210^C
"DATA",9002313.9,13,0)
PRIOR AUTHORIZATION^220^C
"DATA",9002313.9,14,0)
CLINICAL^230^C
"DATA",9002313.9,15,0)
ADDITIONAL DOCUMENTATION^240^C
"DATA",9002313.9,16,0)
FACILITY^250^C
"DATA",9002313.9,17,0)
NARRATIVE^260^C
"DATA",9002313.9,18,0)
PURCHASER^270^C
"DATA",9002313.9,19,0)
SERVICE PROVIDER^280^C
"DATA",9002313.9,20,0)
INTERMEDIARY^290^C
"DATA",9002313.9,21,0)
LAST KNOWN 4RX^300^C
"DATA",9002313.9,22,0)
RESPONSE HEADER^^R
"DATA",9002313.9,23,0)
RESPONSE MESSAGE^^R
"DATA",9002313.9,24,0)
RESPONSE INSURANCE^^R
"DATA",9002313.9,25,0)
RESPONSE PATIENT^^R
"DATA",9002313.9,26,0)
RESPONSE STATUS^^R
"DATA",9002313.9,27,0)
RESPONSE CLAIM^^R
"DATA",9002313.9,28,0)
RESPONSE PRICING^^R
"DATA",9002313.9,29,0)
RESPONSE DUR/PPS^^R
"DATA",9002313.9,30,0)
RESPONSE PRIOR AUTHORIZATION^^R
"DATA",9002313.9,31,0)
RESPONSE COORDINATION OF BENEFITS/OTHER PAYERS^^R
"DATA",9002313.9,32,0)
RESPONSE INTERMEDIARY^^R
"DATA",9002313.9,33,0)
RESPONSE INSURANCE ADDITIONAL INFORMATION^^R
"DATA",9002313.91,1,0)
101^^BIN NUMBER^N^^^^6^N
"DATA",9002313.91,1,5)
A1^6^^1
"DATA",9002313.91,1,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,1,10,1,0)
S BPS("X")=$G(BPS("NCPDP","BIN Number"))
"DATA",9002313.91,1,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,1,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,1,25,0)
^9002313.9104^1^1^3040130^^^^
"DATA",9002313.91,1,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,1,30,0)
^9002313.9103^1^1^3040130^^^^
"DATA",9002313.91,1,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,1)=BPS("X")
"DATA",9002313.91,2,0)
102^^VERSION/RELEASE NUMBER^A/N^^^^2^A/N
"DATA",9002313.91,2,5)
A2^2^^1^22
"DATA",9002313.91,2,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,2,10,1,0)
S BPS("X")=$G(BPS("NCPDP","Version"))
"DATA",9002313.91,2,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,2,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,2,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,2,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,2,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,2,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,2)=BPS("X")
"DATA",9002313.91,3,0)
103^^TRANSACTION CODE^N^^^^2^A/N
"DATA",9002313.91,3,5)
A3^2^^1^22
"DATA",9002313.91,3,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,3,10,1,0)
S BPS("X")=$G(BPS("Transaction Code"))
"DATA",9002313.91,3,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,3,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,3,25,0)
^9002313.9104^1^1^3040130^^^^
"DATA",9002313.91,3,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,3,30,0)
^9002313.9103^1^1^3040130^^^^
"DATA",9002313.91,3,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,3)=BPS("X")
"DATA",9002313.91,4,0)
104^^PROCESSOR CONTROL NUMBER^A/N^^^^10^A/N
"DATA",9002313.91,4,5)
A4^10^^1
"DATA",9002313.91,4,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,4,10,1,0)
S BPS("X")=$G(BPS("NCPDP","PCN"))
"DATA",9002313.91,4,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,4,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,4,25,0)
^9002313.9104^1^1^3040820^^^^
"DATA",9002313.91,4,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,4,30,0)
^9002313.9103^1^1^3040820^^^^
"DATA",9002313.91,4,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,4)=BPS("X")
"DATA",9002313.91,5,0)
201^^SERVICE PROVIDER ID^A/N^^^^15^A/N
"DATA",9002313.91,5,5)
B1^12^^1^22
"DATA",9002313.91,5,10,0)
^^1^1^3110523^
"DATA",9002313.91,5,10,1,0)
S BPS("X")=$G(BPS("Site","NPI"))
"DATA",9002313.91,5,20,0)
^9002313.9102^1^1^3110523^
"DATA",9002313.91,5,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,5,25,0)
^^1^1^3110523^
"DATA",9002313.91,5,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,5,30,0)
^^1^1^3110523^
"DATA",9002313.91,5,30,1,0)
S $P(^BPSC(BPS(9002313.02),200),U,1)=BPS("X")
"DATA",9002313.91,6,0)
301^^GROUP ID^A/N^^^^15^A/N
"DATA",9002313.91,6,5)
C1^15^^3^24
"DATA",9002313.91,6,10,0)
^9002313.9101^1^1^3101216^
"DATA",9002313.91,6,10,1,0)
S BPS("X")=$G(BPS("Insurer","Group #"))
"DATA",9002313.91,6,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,6,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,6,25,0)
^9002313.9104^1^1^3041021^^^^
"DATA",9002313.91,6,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,6,30,0)
^9002313.9103^1^1^3041021^^^^
"DATA",9002313.91,6,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,1)=BPS("X")
"DATA",9002313.91,7,0)
302^^CARDHOLDER ID^A/N^^^^20^A/N
"DATA",9002313.91,7,5)
C2^20^^3^24
"DATA",9002313.91,7,10,0)
^9002313.9101^1^1^3041021
"DATA",9002313.91,7,10,1,0)
S BPS("X")=$G(BPS("Insurer","Policy #"))
"DATA",9002313.91,7,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,7,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,7,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,7,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,7,30,0)
^9002313.9103^1^1^3101004^^^
"DATA",9002313.91,7,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,2)=$TR(BPS("X")," ","")
"DATA",9002313.91,8,0)
303^^PERSON CODE^A/N^^^^3^A/N
"DATA",9002313.91,8,5)
C3^3^^3
"DATA",9002313.91,8,10,0)
^9002313.9101^1^1^3040114
"DATA",9002313.91,8,10,1,0)
S BPS("X")=$G(BPS("Insurer","Person Code"))
"DATA",9002313.91,8,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,8,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,8,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,8,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,8,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,8,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,3)=BPS("X")
"DATA",9002313.91,9,0)
304^^DATE OF BIRTH^N^^^^8^N
"DATA",9002313.91,9,5)
C4^8^^2^25
"DATA",9002313.91,9,10,0)
^9002313.9101^1^1^3040820
"DATA",9002313.91,9,10,1,0)
S BPS("X")=$G(BPS("Patient","DOB"))
"DATA",9002313.91,9,20,0)
^9002313.9102^1^1^3101029^
"DATA",9002313.91,9,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,9,25,0)
^9002313.9104^1^1^3040820^^^^
"DATA",9002313.91,9,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,9,30,0)
^9002313.9103^1^1^3101004^
"DATA",9002313.91,9,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,4)=$G(BPS("X"))
"DATA",9002313.91,10,0)
305^^PATIENT GENDER CODE^N^^^^1^N
"DATA",9002313.91,10,5)
C5^1^^2
"DATA",9002313.91,10,10,0)
^9002313.9101^3^3^3040114
"DATA",9002313.91,10,10,1,0)
S BPS("X")=$G(BPS("Patient","Sex"))
"DATA",9002313.91,10,10,2,0)
S BPS("X")=$E(BPS("X"),1,1)
"DATA",9002313.91,10,10,3,0)
S BPS("X")=$S(BPS("X")="M":"1",BPS("X")="F":"2",1:"0")
"DATA",9002313.91,10,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,10,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,10,25,0)
^9002313.9104^1^1^3040114^^
"DATA",9002313.91,10,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,10,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,10,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,5)=BPS("X")
"DATA",9002313.91,11,0)
306^^PATIENT RELATIONSHIP CODE^N^^^^1^N
"DATA",9002313.91,11,5)
C6^1^^3
"DATA",9002313.91,11,10,0)
^9002313.9101^1^1^3040114
"DATA",9002313.91,11,10,1,0)
S BPS("X")=$G(BPS("Insurer","Relationship"))
"DATA",9002313.91,11,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,11,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,11,25,0)
^9002313.9104^1^1^3040114^^^
"DATA",9002313.91,11,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,11,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,11,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,6)=BPS("X")
"DATA",9002313.91,12,0)
308^^OTHER COVERAGE CODE^N^^^^2^N
"DATA",9002313.91,12,5)
C8^2^^4
"DATA",9002313.91,12,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,12,10,1,0)
S BPS("X")=$G(BPS("Patient","Other Coverage Code"))
"DATA",9002313.91,12,10,2,0)
S:'BPS("X") BPS("X")=0
"DATA",9002313.91,12,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,12,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,12,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,12,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,12,30,0)
^9002313.9103^1^1^3101115^^^
"DATA",9002313.91,12,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),300),U,8)=BPS("X")
"DATA",9002313.91,13,0)
401^^DATE OF SERVICE^N^^^^8^N
"DATA",9002313.91,13,5)
D1^8^^1^22
"DATA",9002313.91,13,10,0)
^^1^1^3121128
"DATA",9002313.91,13,10,1,0)
S BPS("X")=$G(BPS("NCPDP","DOS"))
"DATA",9002313.91,13,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,13,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,13,25,0)
^9002313.9104^1^1^3040113^^^^
"DATA",9002313.91,13,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,13,30,0)
^^1^1^3121128
"DATA",9002313.91,13,30,1,0)
S $P(^BPSC(BPS(9002313.02),401),U,1)=BPS("X")
"DATA",9002313.91,14,0)
307^^PLACE OF SERVICE^A/N^^^^2^N
"DATA",9002313.91,14,5)
C7^2^^2
"DATA",9002313.91,14,10,0)
^9002313.9101^1^1^3040820
"DATA",9002313.91,14,10,1,0)
S BPS("X")=$G(BPS("Patient","Place of Service"))
"DATA",9002313.91,14,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,14,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,14,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,14,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,14,30,0)
^9002313.9103^1^1^3100910^^^^
"DATA",9002313.91,14,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,7)=BPS("X")
"DATA",9002313.91,15,0)
309^^ELIGIBILITY CLARIFICATION CODE^N^^^^1^N
"DATA",9002313.91,15,5)
C9^1^^3
"DATA",9002313.91,15,10,0)
^^2^2^3110727^
"DATA",9002313.91,15,10,1,0)
S BPS("X")=$G(BPS("Insurer","Eligibility Clarification Code"))
"DATA",9002313.91,15,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,15,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,15,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,15,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,15,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,15,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,15,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,9)=BPS("X")
"DATA",9002313.91,16,0)
310^^PATIENT FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,16,5)
CA^12^^2^25
"DATA",9002313.91,16,10,0)
^^1^1^3101216^
"DATA",9002313.91,16,10,1,0)
S BPS("X")=$G(BPS("Patient","First Name"))
"DATA",9002313.91,16,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,16,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,16,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,16,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,16,30,0)
^9002313.9103^1^1^3101004^^^^
"DATA",9002313.91,16,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,10)=BPS("X")
"DATA",9002313.91,17,0)
311^^PATIENT LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,17,5)
CB^15^^2^25
"DATA",9002313.91,17,10,0)
^^1^1^3101216^
"DATA",9002313.91,17,10,1,0)
S BPS("X")=$G(BPS("Patient","Last Name"))
"DATA",9002313.91,17,20,0)
^9002313.9102^1^1^3101004^
"DATA",9002313.91,17,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,17,25,0)
^9002313.9104^1^1^3101004^^^
"DATA",9002313.91,17,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,17,30,0)
^9002313.9103^1^1^3101004^^^
"DATA",9002313.91,17,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,11)=$G(BPS("X"))
"DATA",9002313.91,18,0)
402^^PRESCRIPTION/SERVICE REF NO^N^^^^12^N
"DATA",9002313.91,18,1)
PRESCRIPTION/SERVICE REFERENCE NUMBER
"DATA",9002313.91,18,5)
D2^7^^4^27
"DATA",9002313.91,18,10,0)
^9002313.9101^1^1^3171117^^^^
"DATA",9002313.91,18,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"RX IEN"))
"DATA",9002313.91,18,20,0)
^9002313.9102^2^2^3171117^^
"DATA",9002313.91,18,20,1,0)
I $L($G(BPS("X")))>12 S BPS("X")=$E(BPS("X"),$L(BPS("X"))-11,$L(BPS("X")))
"DATA",9002313.91,18,20,2,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,18,25,0)
^9002313.9104^2^2^3171117^^^^
"DATA",9002313.91,18,25,1,0)
I $L(BPS("X"))>7 S BPS("X")=$E(BPS("X"),$L(BPS("X"))-6,$L(BPS("X")))
"DATA",9002313.91,18,25,2,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),7)
"DATA",9002313.91,18,30,0)
^9002313.9103^1^1^3171117^^^^
"DATA",9002313.91,18,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,2)=BPS("X")
"DATA",9002313.91,19,0)
403^^FILL NUMBER^N^^^^2^N
"DATA",9002313.91,19,5)
D3^2^^4
"DATA",9002313.91,19,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,19,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Refill #"))
"DATA",9002313.91,19,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,19,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,19,25,0)
^9002313.9104^1^1^3030718^^
"DATA",9002313.91,19,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,19,30,0)
1^9002313.9103^1^1^3030718^^^
"DATA",9002313.91,19,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,3)=BPS("X")
"DATA",9002313.91,20,0)
B87^^QUAN LIMIT PER SPC TM PD COUNT^^^^^1^N
"DATA",9002313.91,20,1)
QUANTITY LIMIT PER SPECIFIC TIME PERIOD COUNT
"DATA",9002313.91,20,5)
3P^^2087^^27
"DATA",9002313.91,20,10,0)
^9002313.9101^1^1^3150915^^
"DATA",9002313.91,20,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,21,0)
405^^DAYS SUPPLY^N^^^^3^N
"DATA",9002313.91,21,5)
D5^3^^4
"DATA",9002313.91,21,10,0)
^9002313.9101^1^1^3040109
"DATA",9002313.91,21,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Days Supply"))
"DATA",9002313.91,21,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,21,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,21,25,0)
^9002313.9104^1^1^3030827^^^^
"DATA",9002313.91,21,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,21,30,0)
^9002313.9103^1^1^3030827^^^^
"DATA",9002313.91,21,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,5)=BPS("X")
"DATA",9002313.91,22,0)
406^^COMPOUND CODE^N^^^^1^N
"DATA",9002313.91,22,5)
D6^407^^4
"DATA",9002313.91,22,10,0)
^9002313.9101^2^2^3040114
"DATA",9002313.91,22,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Compound Code"))
"DATA",9002313.91,22,10,2,0)
S:BPS("X")="" BPS("X")=1
"DATA",9002313.91,22,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,22,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,22,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,22,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,22,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,22,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,6)=BPS("X")
"DATA",9002313.91,23,0)
407^^PRODUCT/SERVICE ID^A/N^^^^19^A/N
"DATA",9002313.91,23,5)
D7^19^^4
"DATA",9002313.91,23,10,0)
^9002313.9101^2^2^3030825
"DATA",9002313.91,23,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"NDC"))
"DATA",9002313.91,23,10,2,0)
S BPS("X")=$$NDCF^BPSECFM(BPS("X"))
"DATA",9002313.91,23,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,23,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,23,25,0)
^9002313.9104^1^1^3030825^^^
"DATA",9002313.91,23,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,23,30,0)
^9002313.9103^1^1^3030825^^^^
"DATA",9002313.91,23,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,7)=BPS("X")
"DATA",9002313.91,24,0)
408^^DAW PRODUCT SELECTION CODE^N^^^^1^A/N
"DATA",9002313.91,24,1)
DISPENSE AS WRITTEN (DAW)/ PRODUCT SELECTION CODE
"DATA",9002313.91,24,5)
D8^1^^4
"DATA",9002313.91,24,10,0)
^9002313.9101^2^2^3070205
"DATA",9002313.91,24,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"DAW"))
"DATA",9002313.91,24,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,24,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,24,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,24,25,0)
^9002313.9104^1^1^3061120^
"DATA",9002313.91,24,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,24,30,0)
^9002313.9103^1^1^3030722^
"DATA",9002313.91,24,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,8)=BPS("X")
"DATA",9002313.91,25,0)
409^^INGREDIENT COST SUBMITTED^D^^^^8^D
"DATA",9002313.91,25,5)
D9^8^^10
"DATA",9002313.91,25,10,0)
^^1^1^3121128
"DATA",9002313.91,25,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Ingredient Cost"))
"DATA",9002313.91,25,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,25,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,25,25,0)
^9002313.9104^1^1^3040907^^^^
"DATA",9002313.91,25,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,25,30,0)
^9002313.9103^1^1^3040907^^^^
"DATA",9002313.91,25,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,9)=BPS("X")
"DATA",9002313.91,26,0)
411^^PRESCRIBER ID^A/N^^^^15^A/N
"DATA",9002313.91,26,5)
DB^15^^6
"DATA",9002313.91,26,10,0)
^9002313.9101^1^1^3070214
"DATA",9002313.91,26,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber NPI"))
"DATA",9002313.91,26,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,26,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,26,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,26,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,26,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,26,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,11)=BPS("X")
"DATA",9002313.91,27,0)
414^^DATE PRESCRIPTION WRITTEN^N^^^^8^N
"DATA",9002313.91,27,5)
DE^8^^4
"DATA",9002313.91,27,10,0)
^9002313.9101^1^1^3040913
"DATA",9002313.91,27,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Date Written"))
"DATA",9002313.91,27,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,27,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,27,25,0)
^9002313.9104^1^1^3040913^^^^
"DATA",9002313.91,27,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,27,30,0)
^9002313.9103^1^1^3040913^^^^
"DATA",9002313.91,27,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,14)=BPS("X")
"DATA",9002313.91,28,0)
415^^NUMBER OF REFILLS AUTHORIZED^N^^^^2^N
"DATA",9002313.91,28,5)
DF^2^^4
"DATA",9002313.91,28,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,28,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"# Refills"))
"DATA",9002313.91,28,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,28,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,28,25,0)
^9002313.9104^1^1^3030718^^
"DATA",9002313.91,28,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,28,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,28,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,15)=BPS("X")
"DATA",9002313.91,29,0)
419^^PRESCRIPTION ORIGIN CODE^N^^^^1^N
"DATA",9002313.91,29,5)
DJ^1^^4
"DATA",9002313.91,29,10,0)
^9002313.9101^2^2^3030721
"DATA",9002313.91,29,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Origin Code"))
"DATA",9002313.91,29,10,2,0)
S:BPS("X")="" BPS("X")="0"
"DATA",9002313.91,29,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,29,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,29,25,0)
^9002313.9104^1^1^3030721^^^^
"DATA",9002313.91,29,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,29,30,0)
^9002313.9103^1^1^3030721^^^^
"DATA",9002313.91,29,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,19)=BPS("X")
"DATA",9002313.91,30,0)
420^^SUBMISSION CLARIFICATION CODE^N^^^^2^N
"DATA",9002313.91,30,5)
DK^2^^4
"DATA",9002313.91,30,10,0)
^9002313.9101^1^1^3101006^^^^
"DATA",9002313.91,30,10,1,0)
; GET CODE handled by FLD420^BPSOSSG
"DATA",9002313.91,30,20,0)
^9002313.9102^1^1^3101006^^^^
"DATA",9002313.91,30,20,1,0)
; vD.0 FORMAT CODE handled by FLD420^BPSOSSG
"DATA",9002313.91,30,25,0)
^9002313.9104^1^1^3101006^^^^
"DATA",9002313.91,30,25,1,0)
; FORMAT CODE handled by FLD420^BPSOSSG
"DATA",9002313.91,30,30,0)
^9002313.9103^1^1^3101006^^^^
"DATA",9002313.91,30,30,1,0)
D FLD420^BPSOSSG
"DATA",9002313.91,31,0)
453^^ORIG PRESCR PROD/SERV ID QUAL^N^^^^2^A/N
"DATA",9002313.91,31,1)
ORIGINALLY PRESCRIBED PRODUCT/SERVICE ID QUALIFIER
"DATA",9002313.91,31,5)
EJ^2^^4
"DATA",9002313.91,31,10,0)
^9002313.9101^1^1^3040907
"DATA",9002313.91,31,10,1,0)
S BPS("X")=""
"DATA",9002313.91,31,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,31,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,31,25,0)
^9002313.9104^1^1^3040907^^^^
"DATA",9002313.91,31,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,31,30,0)
^9002313.9103^1^1^3040907^^^
"DATA",9002313.91,31,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,3)=""
"DATA",9002313.91,32,0)
B88^^QUAN LIMIT PER SPC TIME PERIOD^^^^^10^N
"DATA",9002313.91,32,1)
QUANTITY LIMIT PER SPECIFIC TIME PERIOD
"DATA",9002313.91,32,5)
3R^^2088^^27
"DATA",9002313.91,32,10,0)
^^1^1^3150915^
"DATA",9002313.91,32,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,33,0)
423^^BASIS OF COST DETERMINATION^A/N^^^^2^A/N
"DATA",9002313.91,33,5)
DN^2^^10
"DATA",9002313.91,33,10,0)
^9002313.9101^1^1^3030916
"DATA",9002313.91,33,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Basis of Cost Determination"))
"DATA",9002313.91,33,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,33,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,33,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,33,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,33,30,0)
^9002313.9103^1^1^3030916^^^^
"DATA",9002313.91,33,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,23)=BPS("X")
"DATA",9002313.91,34,0)
424^^DIAGNOSIS CODE^A/N^^^^15^A/N
"DATA",9002313.91,34,5)
DO^15^^14
"DATA",9002313.91,34,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,34,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Diagnosis Code"))
"DATA",9002313.91,34,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,34,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,34,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,34,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,34,30,0)
^9002313.9103^1^1^3030718^^
"DATA",9002313.91,34,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,24)=BPS("X")
"DATA",9002313.91,35,0)
430^^GROSS AMOUNT DUE^D^^^^8^D
"DATA",9002313.91,35,5)
DU^8^^10
"DATA",9002313.91,35,10,0)
^9002313.9101^1^1^3030722
"DATA",9002313.91,35,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Gross Amount Due"))
"DATA",9002313.91,35,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,35,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,35,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,35,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,35,30,0)
^9002313.9103^1^1^3030722^^^^
"DATA",9002313.91,35,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,30)=BPS("X")
"DATA",9002313.91,36,0)
433^^PATIENT PAID AMOUNT SUBMITTED^D^^^^8^D
"DATA",9002313.91,36,1)
PATIENT PAID AMOUNT SUBMITTED
"DATA",9002313.91,36,5)
DX^8^^10
"DATA",9002313.91,36,10,0)
^^2^2^3110727^
"DATA",9002313.91,36,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Patient Paid Amount"))
"DATA",9002313.91,36,10,2,0)
S:BPS("X")="" BPS("X")="0.00"
"DATA",9002313.91,36,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,36,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,36,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,36,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,36,30,0)
^9002313.9103^1^1^3030916^^
"DATA",9002313.91,36,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),430),U,3)=BPS("X")
"DATA",9002313.91,37,0)
439^^REASON FOR SERVICE CODE^A/N^^^^2^A/N
"DATA",9002313.91,37,5)
E4^2^^9^29
"DATA",9002313.91,37,10,0)
^9002313.9101^1^1^3031230
"DATA",9002313.91,37,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"DUR","DUR Conflict Code",439))
"DATA",9002313.91,37,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,37,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,37,25,0)
^9002313.9104^1^1^3031230^^
"DATA",9002313.91,37,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,37,30,0)
^9002313.9103^1^1^3101115^^^^
"DATA",9002313.91,37,30,1,0)
D FLD439^BPSOSSG
"DATA",9002313.91,38,0)
440^^PROFESSIONAL SERVICE CODE^A/N^^^^2^A/N
"DATA",9002313.91,38,5)
E5^2^^9
"DATA",9002313.91,38,10,0)
^9002313.9101^1^1^3031230
"DATA",9002313.91,38,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"DUR","DUR Intervention Code",440))
"DATA",9002313.91,38,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,38,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,38,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,38,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,38,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,38,30,1,0)
D FLD440^BPSOSSG
"DATA",9002313.91,39,0)
441^^RESULT OF SERVICE CODE^A/N^^^^2^A/N
"DATA",9002313.91,39,5)
E6^2^^9
"DATA",9002313.91,39,10,0)
^9002313.9101^2^2^3070214
"DATA",9002313.91,39,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"DUR","DUR Outcome Code",441))
"DATA",9002313.91,39,10,2,0)
S:BPS("X")="" BPS("X")="00"
"DATA",9002313.91,39,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,39,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,39,25,0)
^9002313.9104^1^1^3070214^^
"DATA",9002313.91,39,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,39,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,39,30,1,0)
D FLD441^BPSOSSG
"DATA",9002313.91,40,0)
442^^QUANTITY DISPENSED^N^^^^10^N
"DATA",9002313.91,40,5)
E7^10^^4
"DATA",9002313.91,40,10,0)
^9002313.9101^1^1^3070620
"DATA",9002313.91,40,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Quantity"))*1000\1
"DATA",9002313.91,40,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,40,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,40,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,40,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,40,30,0)
^9002313.9103^1^1^3040109^^^^
"DATA",9002313.91,40,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,2)=BPS("X")
"DATA",9002313.91,41,0)
B89^^QUANTITY LIMIT TIME PERIOD^^^^^5^N
"DATA",9002313.91,41,1)
QUANTITY LIMIT TIME PERIOD
"DATA",9002313.91,41,5)
3S^^2089^^27
"DATA",9002313.91,41,10,0)
^^1^1^3150915^
"DATA",9002313.91,41,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,42,0)
412^^DISPENSING FEE SUBMITTED^D^^^^8^D
"DATA",9002313.91,42,5)
DC^8^^10
"DATA",9002313.91,42,10,0)
^^1^1^3121128
"DATA",9002313.91,42,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Dispensing Fee"))
"DATA",9002313.91,42,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,42,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,42,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,42,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,42,30,0)
^9002313.9103^1^1^3040907^^^^
"DATA",9002313.91,42,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,12)=BPS("X")
"DATA",9002313.91,43,0)
B90^^DAYS SUP LIM PER SPC TM PD CNT^^^^^1^N
"DATA",9002313.91,43,1)
DAYS SUPPLY LIMIT PER SPECIFIC TIME PERIOD COUNT
"DATA",9002313.91,43,5)
3T^^2090^^27
"DATA",9002313.91,43,10,0)
^^1^1^3150915^
"DATA",9002313.91,43,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,44,0)
418^^LEVEL OF SERVICE^N^^^^2^N
"DATA",9002313.91,44,5)
DI^2^^4
"DATA",9002313.91,44,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,44,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Level of Service"))
"DATA",9002313.91,44,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,44,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,44,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,44,25,0)
^9002313.9104^1^1^3070215^^
"DATA",9002313.91,44,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,44,30,0)
^9002313.9103^1^1^3070215^^^^
"DATA",9002313.91,44,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,18)=BPS("X")
"DATA",9002313.91,45,0)
421^^PRIMARY CARE PROVIDER ID^A/N^^^^15^A/N
"DATA",9002313.91,45,5)
DL^15^^6
"DATA",9002313.91,45,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,45,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Primary Care Provider NPI"))
"DATA",9002313.91,45,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,45,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,45,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,45,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,45,30,0)
^9002313.9103^1^1^3041015^
"DATA",9002313.91,45,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,21)=""
"DATA",9002313.91,46,0)
426^^USUAL AND CUSTOMARY CHARGE^D^^^^8^D
"DATA",9002313.91,46,5)
DQ^8^^10
"DATA",9002313.91,46,10,0)
^9002313.9101^1^1^3031219
"DATA",9002313.91,46,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Usual & Customary"))
"DATA",9002313.91,46,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,46,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,46,25,0)
^9002313.9104^1^1^3031219^^^^
"DATA",9002313.91,46,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,46,30,0)
^9002313.9103^1^1^3031219^^^^
"DATA",9002313.91,46,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,26)=BPS("X")
"DATA",9002313.91,47,0)
429^^SPECIAL PACKAGING INDICATOR^N^^^^1^N
"DATA",9002313.91,47,5)
DT^1^^4
"DATA",9002313.91,47,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,47,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Unit Dose Indicator"))
"DATA",9002313.91,47,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,47,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,47,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,47,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,47,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,47,30,0)
^9002313.9103^1^1^3030823^^^
"DATA",9002313.91,47,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,29)=BPS("X")
"DATA",9002313.91,48,0)
431^^OTHER PAYER AMOUNT PAID^D^^^^8^D
"DATA",9002313.91,48,5)
DV^8^^7
"DATA",9002313.91,48,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,48,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,48,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,48,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,48,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,48,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,48,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,48,30,1,0)
D SET431^BPSFLD01
"DATA",9002313.91,49,0)
438^^INCENTIVE AMOUNT SUBMITTED^D^^^^8^D
"DATA",9002313.91,49,5)
E3^8^^10
"DATA",9002313.91,49,10,0)
^^1^1^3110505^
"DATA",9002313.91,49,10,1,0)
S BPS("X")=0
"DATA",9002313.91,49,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,49,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,49,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,49,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,49,30,0)
^9002313.9103^1^1^3040907^
"DATA",9002313.91,49,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),430),U,8)=""
"DATA",9002313.91,50,0)
B91^^DAYS SUP LIM PER SPC TM PERIOD^^^^^3^N
"DATA",9002313.91,50,1)
DAYS SUPPLY LIMIT PER SPECIFIC TIME PERIOD
"DATA",9002313.91,50,5)
3W^^2091^^27
"DATA",9002313.91,50,10,0)
^^1^1^3150915^
"DATA",9002313.91,50,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,51,0)
443^^OTHER PAYER DATE^N^^^^8^N
"DATA",9002313.91,51,5)
E8^8^^7
"DATA",9002313.91,51,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,51,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,51,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,51,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,51,25,0)
^9002313.9104^1^1^3040224^
"DATA",9002313.91,51,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,51,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,51,30,1,0)
D SET443^BPSFLD01
"DATA",9002313.91,52,0)
313^^CARDHOLDER LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,52,5)
CD^15^^3
"DATA",9002313.91,52,10,0)
^^1^1^3101216^
"DATA",9002313.91,52,10,1,0)
S BPS("X")=$G(BPS("Cardholder","Last Name"))
"DATA",9002313.91,52,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,52,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,52,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,52,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,52,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,52,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,13)=BPS("X")
"DATA",9002313.91,53,0)
312^^CARDHOLDER FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,53,5)
CC^12^^3
"DATA",9002313.91,53,10,0)
^^1^1^3101216^
"DATA",9002313.91,53,10,1,0)
S BPS("X")=$G(BPS("Cardholder","First Name"))
"DATA",9002313.91,53,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,53,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,53,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,53,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),12)
"DATA",9002313.91,53,30,0)
^9002313.9103^1^1^3101115^^^^
"DATA",9002313.91,53,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,12)=BPS("X")
"DATA",9002313.91,54,0)
322^^PATIENT STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,54,5)
CM^30
"DATA",9002313.91,54,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,54,10,1,0)
S BPS("X")=$G(BPS("Patient","Street Address"))
"DATA",9002313.91,54,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,54,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,54,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,54,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,54,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,54,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,2)=BPS("X")
"DATA",9002313.91,55,0)
323^^PATIENT CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,55,5)
CN^20^^2
"DATA",9002313.91,55,10,0)
^9002313.9101^1^1^3030703
"DATA",9002313.91,55,10,1,0)
S BPS("X")=$G(BPS("Patient","City"))
"DATA",9002313.91,55,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,55,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,55,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,55,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),20)
"DATA",9002313.91,55,30,0)
^9002313.9103^1^1^3030703^^^^
"DATA",9002313.91,55,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,3)=BPS("X")
"DATA",9002313.91,56,0)
324^^PATIENT STATE/PROVINCE ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,56,5)
CO^2^^2
"DATA",9002313.91,56,10,0)
^9002313.9101^1^1^3030717
"DATA",9002313.91,56,10,1,0)
S BPS("X")=$G(BPS("Patient","State"))
"DATA",9002313.91,56,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,56,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,56,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,56,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,56,30,0)
^9002313.9103^1^1^3030717^^^^
"DATA",9002313.91,56,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,4)=BPS("X")
"DATA",9002313.91,57,0)
325^^PATIENT ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,57,5)
CP^15^^2
"DATA",9002313.91,57,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,57,10,1,0)
S BPS("X")=$G(BPS("Patient","Zip"))
"DATA",9002313.91,57,20,0)
^^2^2^3121128
"DATA",9002313.91,57,20,1,0)
S BPS("X")=$TR($G(BPS("X")),"-/._","")
"DATA",9002313.91,57,20,2,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,57,25,0)
^9002313.9104^2^2^3030718^^^^
"DATA",9002313.91,57,25,1,0)
S BPS("X")=$TR(BPS("X"),"-/._","")
"DATA",9002313.91,57,25,2,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),9)
"DATA",9002313.91,57,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,57,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,5)=BPS("X")
"DATA",9002313.91,58,0)
314^^HOME PLAN^A/N^^^^3^A/N
"DATA",9002313.91,58,5)
CE^3
"DATA",9002313.91,58,10,0)
^9002313.9101^1^1^3030823
"DATA",9002313.91,58,10,1,0)
S BPS("X")=$G(BPS("Home Plan"))
"DATA",9002313.91,58,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,58,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,58,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,58,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),3)
"DATA",9002313.91,58,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,58,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,14)=BPS("X")
"DATA",9002313.91,59,0)
315^^EMPLOYER NAME^A/N^^^^30^A/N
"DATA",9002313.91,59,5)
CF^30^^8
"DATA",9002313.91,59,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,59,10,1,0)
D EMPL^BPSOSSG
"DATA",9002313.91,59,10,2,0)
S BPS("X")=$G(BPS("Employer","Name"))
"DATA",9002313.91,59,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,59,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,59,25,0)
^9002313.9104^1^1^3030718^^^
"DATA",9002313.91,59,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,59,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,59,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,5)=BPS("X")
"DATA",9002313.91,60,0)
316^^EMPLOYER STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,60,5)
CG^30
"DATA",9002313.91,60,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,60,10,1,0)
S BPS("X")=$G(BPS("Employer","Address"))
"DATA",9002313.91,60,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,60,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,60,25,0)
^9002313.9104^1^1^3030718^^^
"DATA",9002313.91,60,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,60,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,60,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,6)=BPS("X")
"DATA",9002313.91,61,0)
317^^EMPLOYER CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,61,5)
CH^20^^8
"DATA",9002313.91,61,10,0)
^9002313.9101^1^1^3150112^
"DATA",9002313.91,61,10,1,0)
S BPS("X")=$G(BPS("Employer","City"))
"DATA",9002313.91,61,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,61,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,61,25,0)
^9002313.9104^1^1^3030718^^
"DATA",9002313.91,61,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),20)
"DATA",9002313.91,61,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,61,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,7)=BPS("X")
"DATA",9002313.91,62,0)
318^^EMPLOYER STATE/PROV ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,62,1)
EMPLOYER STATE/ PROVINCE ADDRESS
"DATA",9002313.91,62,5)
CI^2^^8
"DATA",9002313.91,62,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,62,10,1,0)
S BPS("X")=$G(BPS("Employer","State"))
"DATA",9002313.91,62,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,62,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,62,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,62,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,62,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,62,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,8)=BPS("X")
"DATA",9002313.91,63,0)
319^^EMPLOYER ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,63,5)
CJ^15^^8
"DATA",9002313.91,63,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,63,10,1,0)
S BPS("X")=$G(BPS("Employer","Zip Code"))
"DATA",9002313.91,63,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,63,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,63,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,63,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,63,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,63,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,9)=BPS("X")
"DATA",9002313.91,64,0)
327^^CARRIER ID^A/N^^^^10^A/N
"DATA",9002313.91,64,5)
CR^12^^8
"DATA",9002313.91,64,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,64,10,1,0)
S BPS("X")=$G(BPS("Carrier ID #"))
"DATA",9002313.91,64,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,64,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,64,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,64,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),12)
"DATA",9002313.91,64,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,64,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),320),U,7)=BPS("X")
"DATA",9002313.91,65,0)
B92^^DAYS SUPPLY LIMIT TIME PERIOD^^^^^5^N
"DATA",9002313.91,65,1)
DAYS SUPPLY LIMIT TIME PERIOD
"DATA",9002313.91,65,5)
3X^^2092^^27
"DATA",9002313.91,65,10,0)
^^1^1^3150915^
"DATA",9002313.91,65,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,66,0)
C01^^ORIG MANUFACTURER PRODUCT ID^A/N^^^^19^A/N
"DATA",9002313.91,66,1)
ORIGINAL MANUFACTURER PRODUCT ID
"DATA",9002313.91,66,5)
4N^19^2101^4
"DATA",9002313.91,66,10,0)
^9002313.9101^1^1^3171117^^^
"DATA",9002313.91,66,10,1,0)
S BPS("X")=""
"DATA",9002313.91,66,20,0)
^9002313.9102^1^1^3171117^^
"DATA",9002313.91,66,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,66,25,0)
^9002313.9104^1^1^3171117^^^
"DATA",9002313.91,66,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,66,30,0)
^9002313.9103^1^1^3171117^^
"DATA",9002313.91,66,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"C0"),U,1)=BPS("X")
"DATA",9002313.91,67,0)
427^^PRESCRIBER LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,67,5)
DR^15^^6
"DATA",9002313.91,67,10,0)
^9002313.9101^1^1^3110107^^
"DATA",9002313.91,67,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Last Name"))
"DATA",9002313.91,67,20,0)
^9002313.9102^1^1^3110107^
"DATA",9002313.91,67,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,67,25,0)
^9002313.9104^1^1^3110107^^
"DATA",9002313.91,67,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,67,30,0)
^9002313.9103^1^1^3110107^^^^
"DATA",9002313.91,67,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),420),U,27)=BPS("X")
"DATA",9002313.91,68,0)
C02^^ORIG MANUFACTURER PROD ID QUAL^A/N^^^^2^A/N
"DATA",9002313.91,68,1)
ORIGINAL MANUFACTURER PRODUCT ID QUALIFIER
"DATA",9002313.91,68,5)
4P^2^2102^4
"DATA",9002313.91,68,10,0)
^^1^1^3170228^
"DATA",9002313.91,68,10,1,0)
S BPS("X")=""
"DATA",9002313.91,68,20,0)
^^1^1^3170228^
"DATA",9002313.91,68,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,68,25,0)
^^1^1^3170228^
"DATA",9002313.91,68,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,68,30,0)
^^1^1^3170228^
"DATA",9002313.91,68,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"C0"),U,2)=BPS("X")
"DATA",9002313.91,69,0)
434^^DATE OF INJURY^N^^^^8^N
"DATA",9002313.91,69,5)
DY^8^^8
"DATA",9002313.91,69,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,69,10,1,0)
S BPS("X")=$G(BPS("Date of Injury"))
"DATA",9002313.91,69,10,2,0)
S BPS("X")=$$DTF1^BPSECFM(BPS("X"))
"DATA",9002313.91,69,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,69,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,69,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,69,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,69,30,0)
^9002313.9103^1^1^3010125^^
"DATA",9002313.91,69,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),430),U,4)=BPS("X")
"DATA",9002313.91,70,0)
435^^CLAIM/REFERENCE ID^A/N^^^^30^A/N
"DATA",9002313.91,70,5)
DZ^30^^8
"DATA",9002313.91,70,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,70,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Claim/Ref ID #"))
"DATA",9002313.91,70,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,70,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,70,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,70,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,70,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,70,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,35)=BPS("X")
"DATA",9002313.91,71,0)
436^^PRODUCT/SERVICE ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,71,5)
E1^2^^4
"DATA",9002313.91,71,10,0)
^^1^1^3121128
"DATA",9002313.91,71,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Product ID Qualifier"))
"DATA",9002313.91,71,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,71,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,71,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,71,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,71,30,0)
^9002313.9103^1^1^3040107^^^^
"DATA",9002313.91,71,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),430),U,6)=BPS("X")
"DATA",9002313.91,72,0)
B96^^PROVIDER FIRST NAME^A/N^^^^35^A/N
"DATA",9002313.91,72,1)
PROVIDER FIRST NAME
"DATA",9002313.91,72,5)
4A^35^2096^5
"DATA",9002313.91,72,10,0)
^^1^1^3170228^
"DATA",9002313.91,72,10,1,0)
S BPS("X")=""
"DATA",9002313.91,72,20,0)
^^1^1^3170228^
"DATA",9002313.91,72,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),35)
"DATA",9002313.91,72,25,0)
^^1^1^3170228^
"DATA",9002313.91,72,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),35)
"DATA",9002313.91,72,30,0)
^^1^1^3170306^
"DATA",9002313.91,72,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B90"),U,6)=BPS("X")
"DATA",9002313.91,73,0)
B97^^PROVIDER LAST NAME^A/N^^^^35^A/N
"DATA",9002313.91,73,1)
PROVIDER LAST NAME
"DATA",9002313.91,73,5)
4M^35^2097^5
"DATA",9002313.91,73,10,0)
^^1^1^3170228^
"DATA",9002313.91,73,10,1,0)
S BPS("X")=""
"DATA",9002313.91,73,20,0)
^^1^1^3170228^
"DATA",9002313.91,73,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),35)
"DATA",9002313.91,73,25,0)
^^1^1^3170228^
"DATA",9002313.91,73,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),35)
"DATA",9002313.91,73,30,0)
^^1^1^3170306^
"DATA",9002313.91,73,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B90"),U,7)=BPS("X")
"DATA",9002313.91,74,0)
498.51^^PRIOR AUTH PROCESSED DATE^A/N^^^^8^N
"DATA",9002313.91,74,5)
PR^8^^^30
"DATA",9002313.91,74,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,74,10,1,0)
S BPS("X")=""
"DATA",9002313.91,74,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,74,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,75,0)
202^^SERV PROVIDER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,75,1)
SERVICE PROVIDER ID QUALIFIER
"DATA",9002313.91,75,5)
B2^2^^1^22
"DATA",9002313.91,75,10,0)
^9002313.9101^1^1^3070214
"DATA",9002313.91,75,10,1,0)
S BPS("X")="01"
"DATA",9002313.91,75,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,75,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,75,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,75,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,75,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,75,30,1,0)
S $P(^BPSC(BPS(9002313.02),200),U,2)=BPS("X") ;VA
"DATA",9002313.91,76,0)
110^^SOFTWARE VENDOR/CERT ID^A/N^^^^10^A/N
"DATA",9002313.91,76,1)
SOFTWARE VENDOR/ CERTIFICATION ID
"DATA",9002313.91,76,5)
AK^10^^1
"DATA",9002313.91,76,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,76,10,1,0)
S BPS("X")=$G(BPS("NCPDP","Software Vendor/Cert ID"))
"DATA",9002313.91,76,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,76,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,76,25,0)
^9002313.9104^1^1^3040202^^^^
"DATA",9002313.91,76,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10) ;VA
"DATA",9002313.91,76,30,0)
^9002313.9103^1^1^3061023^
"DATA",9002313.91,76,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,10)=BPS("X")
"DATA",9002313.91,77,0)
331^^PATIENT ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,77,5)
CX^2^^2
"DATA",9002313.91,77,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,77,10,1,0)
S BPS("X")="01"
"DATA",9002313.91,77,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,77,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,77,25,0)
^9002313.9104^1^1^3030718^^
"DATA",9002313.91,77,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,77,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,77,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,1)=BPS("X") ;VA
"DATA",9002313.91,78,0)
332^^PATIENT ID^A/N^^^^20^A/N
"DATA",9002313.91,78,5)
CY^20^^2
"DATA",9002313.91,78,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,78,10,1,0)
S BPS("X")=$G(BPS("Patient","SSN"))
"DATA",9002313.91,78,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,78,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,78,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,78,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,78,30,0)
^9002313.9103^1^1^3040820^^^^
"DATA",9002313.91,78,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,2)=BPS("X") ;VA
"DATA",9002313.91,79,0)
326^^PATIENT TELEPHONE NUMBER^N^^^^10^N
"DATA",9002313.91,79,5)
CQ^10^^2
"DATA",9002313.91,79,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,79,10,1,0)
S BPS("X")=$TR($G(BPS("Patient","Phone #")),"#() -_*.@")
"DATA",9002313.91,79,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,79,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,79,25,0)
^9002313.9104^1^1^3101115^
"DATA",9002313.91,79,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,79,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,79,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,6)=BPS("X")
"DATA",9002313.91,80,0)
455^^PRESCRIPTION/SERV REF NO QLFR^A/N^^^^1^A/N
"DATA",9002313.91,80,1)
PRESCRIPTION/ SERVICE REFERENCE NUMBER QUALIFIER
"DATA",9002313.91,80,5)
EM^1^^4^27
"DATA",9002313.91,80,10,0)
^9002313.9101^1^1^3101008^
"DATA",9002313.91,80,10,1,0)
S BPS("X")=1
"DATA",9002313.91,80,20,0)
^9002313.9102^1^1^3101007^^
"DATA",9002313.91,80,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,80,25,0)
^9002313.9104^1^1^3101007^^^
"DATA",9002313.91,80,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,80,30,0)
^9002313.9103^1^1^3101007^^^^
"DATA",9002313.91,80,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,5)=BPS("X")
"DATA",9002313.91,81,0)
460^^QUANTITY PRESCRIBED^N^^^^10^N
"DATA",9002313.91,81,5)
ET^10^^4
"DATA",9002313.91,81,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,81,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Quantity"))*1000\1
"DATA",9002313.91,81,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,81,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,81,25,0)
^9002313.9104^1^1^3030827^^^^
"DATA",9002313.91,81,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,81,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,81,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,10)=BPS("X")
"DATA",9002313.91,82,0)
465^^PROVIDER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,82,5)
EY^2^^5
"DATA",9002313.91,82,10,0)
^9002313.9101^1^1^3070214
"DATA",9002313.91,82,10,1,0)
S BPS("X")="05"
"DATA",9002313.91,82,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,82,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,82,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,82,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,82,30,0)
^9002313.9103^1^1^3041015^
"DATA",9002313.91,82,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,5)=""
"DATA",9002313.91,83,0)
444^^PROVIDER ID^A/N^^^^15^A/N
"DATA",9002313.91,83,5)
E9^15^^5
"DATA",9002313.91,83,10,0)
^9002313.9101^1^1^3070214
"DATA",9002313.91,83,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Provider NPI"))
"DATA",9002313.91,83,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,83,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,83,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,83,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,83,30,0)
^9002313.9103^1^1^3041015^
"DATA",9002313.91,83,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,4)=""
"DATA",9002313.91,84,0)
466^^PRESCRIBER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,84,5)
EZ^2^^6
"DATA",9002313.91,84,10,0)
^^2^2^3101216^
"DATA",9002313.91,84,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber ID Qualifier"))
"DATA",9002313.91,84,10,2,0)
S:BPS("X")="" BPS("X")="01"
"DATA",9002313.91,84,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,84,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,84,25,0)
^9002313.9104^1^1^3070214^^^^
"DATA",9002313.91,84,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,84,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,84,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,6)=BPS("X")
"DATA",9002313.91,85,0)
467^^PRESCRIBER LOCATION CODE^A/N^^^^3^A/N
"DATA",9002313.91,85,5)
1E^3
"DATA",9002313.91,85,10,0)
^9002313.9101^1^1^3030721
"DATA",9002313.91,85,10,1,0)
S BPS("X")=$G(BPS("RX",1,"Prescriber Billing Location"))
"DATA",9002313.91,85,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,85,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,85,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,85,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,85,30,0)
^9002313.9103^1^1^3030721^^^^
"DATA",9002313.91,85,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,7)=BPS("X")
"DATA",9002313.91,86,0)
498^^PRESCRIBER TELEPHONE NUMBER^N^^^^10^N
"DATA",9002313.91,86,5)
PM^10^^6
"DATA",9002313.91,86,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,86,10,1,0)
S BPS("X")=$TR($G(BPS("RX",BPS(9002313.0201),"Prescriber Phone #")),"#() -_*.@")
"DATA",9002313.91,86,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,86,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,86,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,86,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,86,30,0)
^9002313.9103^1^1^3100917^^^^
"DATA",9002313.91,86,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),498),U,12)=BPS("X")
"DATA",9002313.91,87,0)
468^^PRIMARY CARE PROVIDER ID QLFR^A/N^^^^2^A/N
"DATA",9002313.91,87,1)
PRIMARY CARE PROVIDER ID QUALIFIER
"DATA",9002313.91,87,5)
2E^2^^6
"DATA",9002313.91,87,10,0)
^^2^2^3110727^
"DATA",9002313.91,87,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Primary Care Prov ID Qual"))
"DATA",9002313.91,87,10,2,0)
S:BPS("X")="" BPS("X")="01"
"DATA",9002313.91,87,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,87,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,87,25,0)
^9002313.9104^1^1^3070214^^^^
"DATA",9002313.91,87,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,87,30,0)
^9002313.9103^1^1^3041015^
"DATA",9002313.91,87,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,8)=""
"DATA",9002313.91,88,0)
469^^PRIM CARE PROV LOCATION CODE^N^^^^3^A/N
"DATA",9002313.91,88,5)
H5^3
"DATA",9002313.91,88,10,0)
^9002313.9101^1^1^3040114
"DATA",9002313.91,88,10,1,0)
S BPS("X")=$G(BPS("Patient","Primary Care Prov Location Code"))
"DATA",9002313.91,88,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,88,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,88,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,88,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,88,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,88,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,9)=BPS("X")
"DATA",9002313.91,89,0)
470^^PRIM CARE PROVIDER LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,89,1)
PRIMARY CARE PROVIDER LAST NAME
"DATA",9002313.91,89,5)
4E^15^^6
"DATA",9002313.91,89,10,0)
^^1^1^3101217^
"DATA",9002313.91,89,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Primary Care Prov Last Name"))
"DATA",9002313.91,89,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,89,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,89,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,89,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,89,30,0)
^9002313.9103^1^1^3030825^^^^
"DATA",9002313.91,89,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,10)=BPS("X")
"DATA",9002313.91,90,0)
B95^^FACILITY ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,90,1)
FACILITY ID QUALIFIER
"DATA",9002313.91,90,5)
3Z^2^2095^16
"DATA",9002313.91,90,10,0)
^9002313.9101^2^2^3170530^^^
"DATA",9002313.91,90,10,1,0)
S BPS("X")=$G(BPS("Insurer","Facility ID"))
"DATA",9002313.91,90,10,2,0)
S BPS("X")=$S(BPS("X")'="":1,1:"")
"DATA",9002313.91,90,20,0)
^9002313.9102^1^1^3170530^^^
"DATA",9002313.91,90,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,90,25,0)
^9002313.9104^1^1^3170530^^^
"DATA",9002313.91,90,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,90,30,0)
^9002313.9103^1^1^3170530^^^
"DATA",9002313.91,90,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B90"),U,1)=BPS("X")
"DATA",9002313.91,91,0)
480^^OTHER AMT CLAIMED SUBMITTED^D^^^^8^D
"DATA",9002313.91,91,1)
OTHER AMOUNT CLAIMED SUBMITTED
"DATA",9002313.91,91,5)
H9^8^^10
"DATA",9002313.91,91,10,0)
^9002313.9101^1^1^3101006^^^^
"DATA",9002313.91,91,10,1,0)
; GET CODE handled by FLD480^BPSOSSG
"DATA",9002313.91,91,20,0)
^9002313.9102^1^1^3101006^^^^
"DATA",9002313.91,91,20,1,0)
; vD.0 format code handled by FLD480^BPSOSSG
"DATA",9002313.91,91,25,0)
^9002313.9104^1^1^3101006^^^^
"DATA",9002313.91,91,25,1,0)
; format code handled by FLD480^BPSOSSG
"DATA",9002313.91,91,30,0)
^9002313.9103^1^1^3101006^^^^
"DATA",9002313.91,91,30,1,0)
D FLD480^BPSOSSG
"DATA",9002313.91,92,0)
109^^TRANSACTION COUNT^A/N^^^^1^A/N
"DATA",9002313.91,92,5)
A9^1^^1^22
"DATA",9002313.91,92,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,92,10,1,0)
S BPS("X")=$G(BPS("Transaction Count"))
"DATA",9002313.91,92,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,92,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,92,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,92,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,92,30,0)
^9002313.9103^1^1^3040114^^^
"DATA",9002313.91,92,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,9)=BPS("X")
"DATA",9002313.91,93,0)
111^^SEGMENT IDENTIFICATION^A/N^^^^2^A/N
"DATA",9002313.91,93,5)
AM^2^^1
"DATA",9002313.91,93,10,0)
^9002313.9101^1^1^3040114
"DATA",9002313.91,93,10,1,0)
S BPS("X")=""
"DATA",9002313.91,93,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,93,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,94,0)
B98^^RECONCILIATION ID^A/N^^^^30^A/N
"DATA",9002313.91,94,1)
RECONCILIATION ID
"DATA",9002313.91,94,5)
34^30^2098^4^26
"DATA",9002313.91,94,10,0)
^9002313.9101^1^1^3171120^
"DATA",9002313.91,94,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,95,0)
112^^TRANSACTION RESPONSE STATUS^A/N^^^^1^A/N
"DATA",9002313.91,95,5)
AN^2^^^26
"DATA",9002313.91,95,10,0)
^9002313.9101^1^1^3171117^^^
"DATA",9002313.91,95,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,95,25,0)
^9002313.9104^1^1^3171117^^^
"DATA",9002313.91,95,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,95,30,0)
^9002313.9103^1^1^3171117^^^
"DATA",9002313.91,95,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),110),U,2)=BPS("X")
"DATA",9002313.91,96,0)
320^^EMPLOYER TELEPHONE NUMBER^N^^^^10^N
"DATA",9002313.91,96,5)
CK^10^^8
"DATA",9002313.91,96,10,0)
^9002313.9101^1^1^3050802
"DATA",9002313.91,96,10,1,0)
S BPS("X")=$TR($G(BPS("Employer","Phone")),"#() -_*.@")
"DATA",9002313.91,96,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,96,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,96,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,96,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),10)
"DATA",9002313.91,96,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,96,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,10)=BPS("X")
"DATA",9002313.91,97,0)
321^^EMPLOYER CONTACT NAME^A/N^^^^30^A/N
"DATA",9002313.91,97,5)
CL^30
"DATA",9002313.91,97,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,97,10,1,0)
S BPS("X")=""
"DATA",9002313.91,97,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,97,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,97,25,0)
^9002313.9104^1^1^3040224^^^
"DATA",9002313.91,97,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,97,30,0)
^9002313.9103^1^1^3040224^
"DATA",9002313.91,97,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),320),U,1)=BPS("X")
"DATA",9002313.91,98,0)
330^^ALTERNATE ID^A/N^^^^20^A/N
"DATA",9002313.91,98,5)
CW^20^^4
"DATA",9002313.91,98,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,98,10,1,0)
S BPS("X")=""
"DATA",9002313.91,98,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,98,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,98,25,0)
^9002313.9104^1^1^3040224^^^
"DATA",9002313.91,98,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),20)
"DATA",9002313.91,98,30,0)
^9002313.9103^1^1^3040224^^
"DATA",9002313.91,98,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),320),U,10)=BPS("X")
"DATA",9002313.91,99,0)
333^^EMPLOYER ID^A/N^^^^15^A/N
"DATA",9002313.91,99,5)
CZ^15^^2
"DATA",9002313.91,99,10,0)
^9002313.9101^1^1^3030823
"DATA",9002313.91,99,10,1,0)
S BPS("X")=""
"DATA",9002313.91,99,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,99,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,99,25,0)
^9002313.9104^1^1^3030823^
"DATA",9002313.91,99,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,99,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,99,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,3)=BPS("X")
"DATA",9002313.91,100,0)
334^^SMOKER/NONSMOKER^N^^^^1^A/N
"DATA",9002313.91,100,5)
1C^1^^2
"DATA",9002313.91,100,10,0)
^9002313.9101^1^1^3070620
"DATA",9002313.91,100,10,1,0)
S BPS("X")=""
"DATA",9002313.91,100,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,100,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,100,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,100,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),1)
"DATA",9002313.91,100,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,100,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,4)=BPS("X")
"DATA",9002313.91,101,0)
335^^PREGNANCY INDICATOR^N^^^^1^A/N
"DATA",9002313.91,101,5)
2C^1^^2
"DATA",9002313.91,101,10,0)
^9002313.9101^1^1^3030823
"DATA",9002313.91,101,10,1,0)
S BPS("X")=""
"DATA",9002313.91,101,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,101,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,101,25,0)
^9002313.9104^1^1^3030823^^
"DATA",9002313.91,101,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),1)
"DATA",9002313.91,101,30,0)
^9002313.9103^1^1^3030823^^
"DATA",9002313.91,101,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,5)=BPS("X")
"DATA",9002313.91,102,0)
336^^FACILITY ID^A/N^^^^10^A/N
"DATA",9002313.91,102,5)
8C^10^^16
"DATA",9002313.91,102,10,0)
^9002313.9101^1^1^3070103
"DATA",9002313.91,102,10,1,0)
S BPS("X")=$G(BPS("Insurer","Facility ID"))
"DATA",9002313.91,102,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,102,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,102,25,0)
^9002313.9104^1^1^3030823^^
"DATA",9002313.91,102,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),10)
"DATA",9002313.91,102,30,0)
^9002313.9103^1^1^3030823^
"DATA",9002313.91,102,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,6)=BPS("X")
"DATA",9002313.91,103,0)
337^^COB/OTHER PAYMENTS COUNT^N^^^^1^N
"DATA",9002313.91,103,1)
COORDINATION OF BENEFITS/OTHER PAYMENTS COUNT
"DATA",9002313.91,103,5)
4C^1^^7
"DATA",9002313.91,103,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,103,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,103,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,103,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,103,25,0)
^9002313.9104^1^1^3040223^^^
"DATA",9002313.91,103,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,103,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,103,30,1,0)
D SET337^BPSFLD01
"DATA",9002313.91,104,0)
338^^OTHER PAYER COVERAGE TYPE^N^^^^2^A/N
"DATA",9002313.91,104,5)
5C^2^^7^31
"DATA",9002313.91,104,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,104,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,104,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,104,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,104,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,104,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,104,30,0)
^9002313.9103^1^1^3101004^
"DATA",9002313.91,104,30,1,0)
D SET338^BPSFLD01
"DATA",9002313.91,105,0)
339^^OTHER PAYER ID QUALIFIER^N^^^^2^A/N
"DATA",9002313.91,105,5)
6C^2^^7^31
"DATA",9002313.91,105,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,105,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,105,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,105,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,105,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,105,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,105,30,0)
^9002313.9103^1^1^3101004^
"DATA",9002313.91,105,30,1,0)
D SET339^BPSFLD01
"DATA",9002313.91,106,0)
340^^OTHER PAYER ID^A/N^^^^10^A/N
"DATA",9002313.91,106,5)
7C^10^^7^31
"DATA",9002313.91,106,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,106,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,106,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,106,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,106,25,0)
^9002313.9104^1^1^3040223^^
"DATA",9002313.91,106,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,106,30,0)
^9002313.9103^1^1^3101004^^
"DATA",9002313.91,106,30,1,0)
D SET340^BPSFLD01
"DATA",9002313.91,107,0)
341^^OTHER PAYER AMOUNT PAID COUNT^N^^^^1^N
"DATA",9002313.91,107,5)
HB^1^^7
"DATA",9002313.91,107,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,107,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,107,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,107,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,107,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,107,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,107,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,107,30,1,0)
D SET341^BPSFLD01
"DATA",9002313.91,108,0)
342^^OTHER PAYER AMT PAID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,108,1)
OTHER PAYER AMOUNT PAID QUALIFIER
"DATA",9002313.91,108,5)
HC^2^^7
"DATA",9002313.91,108,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,108,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,108,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,108,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,108,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,108,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,108,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,108,30,1,0)
D SET342^BPSFLD01
"DATA",9002313.91,109,0)
343^^DISPENSING STATUS^A/N^^^^1^A/N
"DATA",9002313.91,109,5)
HD^1^^4
"DATA",9002313.91,109,10,0)
^9002313.9101^1^1^3040913
"DATA",9002313.91,109,10,1,0)
S BPS("X")=""
"DATA",9002313.91,109,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,109,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,109,25,0)
^9002313.9104^1^1^3040913^^^^
"DATA",9002313.91,109,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,109,30,0)
^9002313.9103^1^1^3070620^
"DATA",9002313.91,109,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),340),U,3)=""
"DATA",9002313.91,110,0)
344^^QTY INTENDED TO BE DISPENSED^N^^^^10^N
"DATA",9002313.91,110,1)
QUANTITY INTENDED TO BE DISPENSED
"DATA",9002313.91,110,5)
HF^10^^4
"DATA",9002313.91,110,10,0)
^9002313.9101^1^1^3070620
"DATA",9002313.91,110,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Quantity"))*1000\1
"DATA",9002313.91,110,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,110,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,110,25,0)
^9002313.9104^1^1^3070620^
"DATA",9002313.91,110,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,110,30,0)
^9002313.9103^1^1^3070620^
"DATA",9002313.91,110,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),340),U,4)=""
"DATA",9002313.91,111,0)
345^^DAYS SUPPLY INTEND TO BE DISP^N^^^^3^N
"DATA",9002313.91,111,1)
DAYS SUPPLY INTENDED TO BE DISPENSED
"DATA",9002313.91,111,5)
HG^3^^4
"DATA",9002313.91,111,10,0)
^9002313.9101^1^1^3030827
"DATA",9002313.91,111,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Days Supply"))*1000
"DATA",9002313.91,111,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,111,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,111,25,0)
^9002313.9104^1^1^3030827^^^
"DATA",9002313.91,111,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,111,30,0)
^9002313.9103^1^1^3070620^
"DATA",9002313.91,111,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),340),U,5)=""
"DATA",9002313.91,112,0)
346^^BASIS OF CALC - DISPENSING FEE^A/N^^^^2^A/N
"DATA",9002313.91,112,5)
HH^8^^^28
"DATA",9002313.91,112,10,0)
^9002313.9101^1^1^3171117^^
"DATA",9002313.91,112,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,112,25,0)
^9002313.9104^1^1^3171117^^
"DATA",9002313.91,112,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,112,30,0)
^9002313.9103^1^1^3171117^^
"DATA",9002313.91,112,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),340),U,6)=BPS("X")
"DATA",9002313.91,113,0)
347^^BASIS OF CALC - COPAY^A/N^^^^2^A/N
"DATA",9002313.91,113,5)
HJ^8^^^28
"DATA",9002313.91,113,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,113,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,113,25,0)
^9002313.9104^1^1^3040114^^^
"DATA",9002313.91,113,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,113,30,0)
^9002313.9103^1^1^3040114^^^
"DATA",9002313.91,113,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),340),U,7)=BPS("X")
"DATA",9002313.91,114,0)
348^^BASIS OF CALC - FLAT SALES TAX^A/N^^^^2^A/N
"DATA",9002313.91,114,5)
HK^8^^^28
"DATA",9002313.91,114,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,114,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,114,25,0)
^^1^1^3031205^
"DATA",9002313.91,114,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,114,30,0)
^^1^1^3031205^
"DATA",9002313.91,114,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),340),U,8)=BPS("X")
"DATA",9002313.91,115,0)
349^^BASIS OF CALC - % SALES TAX^A/N^^^^2^A/N
"DATA",9002313.91,115,5)
HM^8^^^28
"DATA",9002313.91,115,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,115,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,115,25,0)
^^1^1^3031205^
"DATA",9002313.91,115,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,115,30,0)
^^1^1^3031205^
"DATA",9002313.91,115,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),340),U,9)=BPS("X")
"DATA",9002313.91,116,0)
350^^PATIENT E-MAIL ADDRESS^A/N^^^^80^A/N
"DATA",9002313.91,116,5)
HN^80^^2
"DATA",9002313.91,116,10,0)
^9002313.9101^1^1^3030512
"DATA",9002313.91,116,10,1,0)
S BPS("X")=$G(BPS("Patient","Patient E-Mail Address"))
"DATA",9002313.91,116,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,116,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),80)
"DATA",9002313.91,116,30,0)
^9002313.9103^1^1^3101101^^^
"DATA",9002313.91,116,30,1,0)
S $P(^BPSC(BPS(9002313.02),340),U,10)=$G(BPS("X"))
"DATA",9002313.91,117,0)
351^^OTHER PAYER-PAT RESP AMT QLFR^A/N^^^^2^A/N
"DATA",9002313.91,117,1)
OTHER PAYER-PATIENT RESPONSIBILITY AMOUNT QUALIFIER
"DATA",9002313.91,117,5)
NP^1^^7
"DATA",9002313.91,117,10,0)
^^1^1^3101222^
"DATA",9002313.91,117,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,117,20,0)
^9002313.9102^1^1^3101220^
"DATA",9002313.91,117,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,117,30,0)
^^1^1^3101222^
"DATA",9002313.91,117,30,1,0)
D SET351^BPSFLD01
"DATA",9002313.91,118,0)
352^^OTHER PAYER-PAT RESP AMOUNT^D^^^^10^D
"DATA",9002313.91,118,1)
OTHER PAYER-PATIENT RESPONSIBILITY AMOUNT
"DATA",9002313.91,118,5)
NQ^10^^7
"DATA",9002313.91,118,10,0)
^^1^1^3101222^
"DATA",9002313.91,118,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,118,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,118,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,118,25,0)
^9002313.9104^1^1^3031212^
"DATA",9002313.91,118,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,118,30,0)
^9002313.9103^1^1^3101222^^
"DATA",9002313.91,118,30,1,0)
D SET352^BPSFLD01
"DATA",9002313.91,119,0)
353^^OTHER PAYER-PAT RESP AMT CNT^N^^^^2^N
"DATA",9002313.91,119,1)
OTHER PAYER-PATIENT RESPONSIBILITY AMOUNT COUNT
"DATA",9002313.91,119,5)
NR^1^^7
"DATA",9002313.91,119,10,0)
^^1^1^3101222^
"DATA",9002313.91,119,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,119,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,119,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,119,30,0)
^9002313.9103^1^1^3101222^^
"DATA",9002313.91,119,30,1,0)
D SET353^BPSFLD01
"DATA",9002313.91,120,0)
445^^ORIG PRESCRIBED PROD/SERV CODE^A/N^^^^19^A/N
"DATA",9002313.91,120,1)
ORIGINALLY PRESCRIBED PRODUCT/SERVICE CODE
"DATA",9002313.91,120,5)
EA^19^^4
"DATA",9002313.91,120,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,120,10,1,0)
S BPS("X")=""
"DATA",9002313.91,120,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,120,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,120,25,0)
^9002313.9104^1^1^3040107^^
"DATA",9002313.91,120,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),19)
"DATA",9002313.91,120,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,120,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,5)="" 
"DATA",9002313.91,121,0)
446^^ORIGINALLY PRESCRIBED QUANTITY^N^^^^10^N
"DATA",9002313.91,121,5)
EB^10^^4
"DATA",9002313.91,121,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,121,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Quantity"))*1000\1
"DATA",9002313.91,121,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,121,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,121,25,0)
^9002313.9104^1^1^3030828^^^^
"DATA",9002313.91,121,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,121,30,0)
^9002313.9103^1^1^3030828^^^^
"DATA",9002313.91,121,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,6)=BPS("X") ;VA
"DATA",9002313.91,122,0)
454^^SCHEDULED PRESCRIPTION ID NUM^N^^^^12^A/N
"DATA",9002313.91,122,1)
SCHEDULED PRESCRIPTION ID NUMBER
"DATA",9002313.91,122,5)
EK^12^^4
"DATA",9002313.91,122,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,122,10,1,0)
S BPS("X")=""
"DATA",9002313.91,122,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,122,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,122,25,0)
^9002313.9104^1^1^3040224^^
"DATA",9002313.91,122,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),12)
"DATA",9002313.91,122,30,0)
^9002313.9103^1^1^3040224^^
"DATA",9002313.91,122,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,4)=BPS("X")
"DATA",9002313.91,123,0)
456^^ASSOC PRESCRIPTION/SERV REF NO^A/N^^^^12^N
"DATA",9002313.91,123,1)
ASSOCIATED PRESCRIPTION/ SERVICE REFERENCE NUMBER
"DATA",9002313.91,123,5)
EN^7^^4
"DATA",9002313.91,123,10,0)
^9002313.9101^1^1^3030823
"DATA",9002313.91,123,10,1,0)
S BPS("X")=""
"DATA",9002313.91,123,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,123,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,123,25,0)
^9002313.9104^1^1^3030823^^
"DATA",9002313.91,123,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),7)
"DATA",9002313.91,123,30,0)
^^1^1^3110720^
"DATA",9002313.91,123,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,6)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,124,0)
457^^ASSOC PRESCRIPTION/SERV DATE^A/N^^^^8^N
"DATA",9002313.91,124,1)
ASSOCIATED PRESCRIPTION/ SERVICE DATE
"DATA",9002313.91,124,5)
EP^8^^4
"DATA",9002313.91,124,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,124,10,1,0)
S BPS("X")=""
"DATA",9002313.91,124,20,0)
^9002313.9102^1^1^3101029^
"DATA",9002313.91,124,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,124,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,124,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,124,30,0)
^9002313.9103^1^1^3110720^^
"DATA",9002313.91,124,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,7)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,125,0)
458^^PROCEDURE MODIFIER CODE COUNT^N^^^^2^N
"DATA",9002313.91,125,5)
SE^1^^4
"DATA",9002313.91,125,10,0)
^9002313.9101^1^1^3040819
"DATA",9002313.91,125,10,1,0)
S BPS("X")=""
"DATA",9002313.91,125,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,125,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,125,25,0)
^9002313.9104^1^1^3040819^^^^
"DATA",9002313.91,125,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),1)
"DATA",9002313.91,125,30,0)
^9002313.9103^1^1^3040819^
"DATA",9002313.91,125,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,8)=""
"DATA",9002313.91,126,0)
459^^PROCEDURE MODIFIER CODE^A/N^^^^2^A/N
"DATA",9002313.91,126,5)
ER^2^^4
"DATA",9002313.91,126,10,0)
^9002313.9101^1^1^3040819
"DATA",9002313.91,126,10,1,0)
S BPS("X")=""
"DATA",9002313.91,126,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,126,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,126,25,0)
^9002313.9104^1^1^3040819^^^^
"DATA",9002313.91,126,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,126,30,0)
^^1^1^3110727^
"DATA",9002313.91,126,30,1,0)
; Not implemented
"DATA",9002313.91,127,0)
461^^PRIOR AUTHORIZATION TYPE CODE^N^^^^2^N
"DATA",9002313.91,127,5)
EU^2^^4
"DATA",9002313.91,127,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,127,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Prior Auth Type"))
"DATA",9002313.91,127,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,127,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,127,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,127,25,0)
^9002313.9104^1^1^3031222^^^^
"DATA",9002313.91,127,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,127,30,0)
^9002313.9103^1^1^3031222^^^^
"DATA",9002313.91,127,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,1)=BPS("X")
"DATA",9002313.91,128,0)
462^^PRIOR AUTH NUMBER SUBMITTED^A/N^^^^11^N
"DATA",9002313.91,128,1)
PRIOR AUTHORIZATION NUMBER SUBMITTED
"DATA",9002313.91,128,5)
EV^11^^4
"DATA",9002313.91,128,10,0)
^9002313.9101^1^1^3031222
"DATA",9002313.91,128,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Prior Auth Num Sub"))
"DATA",9002313.91,128,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,128,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,128,25,0)
^9002313.9104^1^1^3031222^^^^
"DATA",9002313.91,128,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,128,30,0)
^9002313.9103^1^1^3031222^^^^
"DATA",9002313.91,128,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,2)=BPS("X")
"DATA",9002313.91,129,0)
464^^INTERMEDIARY AUTHORIZATION ID^A/N^^^^11^A/N
"DATA",9002313.91,129,5)
EX^11
"DATA",9002313.91,129,10,0)
^^2^2^3110727^
"DATA",9002313.91,129,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Intermediary Auth ID"))
"DATA",9002313.91,129,10,2,0)
S:BPS("X")="" BPS("X")=""
"DATA",9002313.91,129,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,129,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,129,25,0)
^9002313.9104^1^1^3030823^
"DATA",9002313.91,129,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),11)
"DATA",9002313.91,129,30,0)
^9002313.9103^1^1^3030823^^^
"DATA",9002313.91,129,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,4)=BPS("X")
"DATA",9002313.91,130,0)
471^^OTHER PAYER REJECT COUNT^N^^^^2^N
"DATA",9002313.91,130,5)
5E^2^^7
"DATA",9002313.91,130,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,130,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,130,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,130,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,130,25,0)
^9002313.9104^1^1^3040224^^
"DATA",9002313.91,130,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,130,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,130,30,1,0)
D SET471^BPSFLD01
"DATA",9002313.91,131,0)
472^^OTHER PAYER REJECT CODE^A/N^^^^3^A/N
"DATA",9002313.91,131,5)
6E^3^^7
"DATA",9002313.91,131,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,131,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,131,20,0)
^9002313.9102^1^1^3101206^
"DATA",9002313.91,131,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,131,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,131,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,131,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,131,30,1,0)
D SET472^BPSFLD01
"DATA",9002313.91,132,0)
473^^DUR/PPS CODE COUNTER^N^^^^1^N
"DATA",9002313.91,132,5)
7E^1^^9
"DATA",9002313.91,132,10,0)
^9002313.9101^1^1^3031230
"DATA",9002313.91,132,10,1,0)
S BPS("X")=1
"DATA",9002313.91,132,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,132,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,132,25,0)
^9002313.9104^1^1^3031230^^^^
"DATA",9002313.91,132,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,132,30,0)
^9002313.9103^1^1^3031230^^^^
"DATA",9002313.91,132,30,1,0)
D FLD473^BPSOSSG
"DATA",9002313.91,133,0)
474^^DUR/PPS LEVEL OF EFFORT^N^^^^2^N
"DATA",9002313.91,133,5)
8E^2^^9
"DATA",9002313.91,133,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,133,10,1,0)
S BPS("X")=12
"DATA",9002313.91,133,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,133,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,133,25,0)
^9002313.9104^1^1^3030718^
"DATA",9002313.91,133,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,133,30,0)
^9002313.9103^1^1^3030718^
"DATA",9002313.91,133,30,1,0)
D FLD474^BPSOSSG
"DATA",9002313.91,134,0)
475^^DUR CO-AGENT ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,134,5)
J9^2^^9
"DATA",9002313.91,134,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,134,10,1,0)
S BPS("X")=""
"DATA",9002313.91,134,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,134,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,134,25,0)
^9002313.9104^1^1^3030718^
"DATA",9002313.91,134,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,134,30,0)
^9002313.9103^1^1^3030718^
"DATA",9002313.91,134,30,1,0)
D FLD475^BPSOSSG
"DATA",9002313.91,135,0)
476^^DUR CO-AGENT ID^A/N^^^^19^A/N
"DATA",9002313.91,135,5)
H6^19^^9
"DATA",9002313.91,135,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,135,10,1,0)
S BPS("X")=""
"DATA",9002313.91,135,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,135,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,135,25,0)
^9002313.9104^1^1^3040107^^^
"DATA",9002313.91,135,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,135,30,0)
^9002313.9103^1^1^3101115^^^^
"DATA",9002313.91,135,30,1,0)
D FLD476^BPSOSSG
"DATA",9002313.91,136,0)
477^^PROF SERVICE FEE SUBMITTED^D^^^^8^D
"DATA",9002313.91,136,1)
PROFESSIONAL SERVICE FEE SUBMITTED
"DATA",9002313.91,136,5)
BE^8^^10
"DATA",9002313.91,136,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,136,10,1,0)
S BPS("X")=0
"DATA",9002313.91,136,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,136,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,136,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,136,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,136,30,0)
^9002313.9103^1^1^3030823^^
"DATA",9002313.91,136,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),470),U,7)=BPS("X")
"DATA",9002313.91,139,0)
481^^FLAT SALES TAX AMT SUBMITTED^D^^^^8^D
"DATA",9002313.91,139,1)
FLAT SALES TAX AMOUNT SUBMITTED
"DATA",9002313.91,139,5)
HA^8^^10
"DATA",9002313.91,139,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,139,10,1,0)
S BPS("X")=0
"DATA",9002313.91,139,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,139,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,139,25,0)
^9002313.9104^1^1^3040907^^
"DATA",9002313.91,139,25,1,0)
S BPS("X")=$$DFF^BPSECFM(BPS("X"),8)
"DATA",9002313.91,139,30,0)
^9002313.9103^1^1^3100923^^^^
"DATA",9002313.91,139,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,1)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,140,0)
482^^PERCENT SALES TAX AMT SBMTTD^D^^^^8^D
"DATA",9002313.91,140,1)
PERCENTAGE SALES TAX AMOUNT SUBMITTED
"DATA",9002313.91,140,5)
GE^8^^10
"DATA",9002313.91,140,10,0)
^9002313.9101^1^1^3050802
"DATA",9002313.91,140,10,1,0)
S BPS("X")=0
"DATA",9002313.91,140,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,140,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,140,25,0)
^9002313.9104^1^1^3040907^^^^
"DATA",9002313.91,140,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,140,30,0)
^9002313.9103^1^1^3100923^^^^
"DATA",9002313.91,140,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,2)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,141,0)
483^^PERCENT SALES TAX RATE SBMTTD^D^^^^7^D
"DATA",9002313.91,141,1)
PERCENTAGE SALES TAX RATE SUBMITTED
"DATA",9002313.91,141,5)
HE^7^^10
"DATA",9002313.91,141,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,141,10,1,0)
S BPS("X")=+$G(BPS("Insurer","Percent Sales Tax Rate Sub"))
"DATA",9002313.91,141,20,0)
^^1^1^3121128
"DATA",9002313.91,141,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),7,4)
"DATA",9002313.91,141,25,0)
^^1^1^3121128
"DATA",9002313.91,141,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),7,4)
"DATA",9002313.91,141,30,0)
^9002313.9103^1^1^3100923^^^^
"DATA",9002313.91,141,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,3)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,142,0)
484^^PERCENT SALES TAX BASIS SBMTTD^A/N^^^^2^A/N
"DATA",9002313.91,142,1)
PERCENTAGE SALES TAX BASIS SUBMITTED
"DATA",9002313.91,142,5)
JE^2^^10
"DATA",9002313.91,142,10,0)
^9002313.9101^1^1^3050802
"DATA",9002313.91,142,10,1,0)
S BPS("X")=""
"DATA",9002313.91,142,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,142,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,142,25,0)
^9002313.9104^1^1^3030824^
"DATA",9002313.91,142,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,142,30,0)
^9002313.9103^1^1^3100923^^^^
"DATA",9002313.91,142,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,4)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,143,0)
485^^COUPON TYPE^A/N^^^^2^A/N
"DATA",9002313.91,143,5)
KE^2^^11
"DATA",9002313.91,143,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,143,10,1,0)
S BPS("X")=""
"DATA",9002313.91,143,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,143,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,143,25,0)
^9002313.9104^1^1^3040107^^
"DATA",9002313.91,143,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,143,30,0)
^9002313.9103^1^1^3101115^^^
"DATA",9002313.91,143,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,5)=BPS("X")
"DATA",9002313.91,144,0)
486^^COUPON NUMBER^A/N^^^^15^A/N
"DATA",9002313.91,144,5)
ME^15^^11
"DATA",9002313.91,144,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,144,10,1,0)
S BPS("X")=""
"DATA",9002313.91,144,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,144,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,144,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,144,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,144,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,144,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,6)=BPS("X")
"DATA",9002313.91,145,0)
487^^COUPON VALUE AMOUNT^D^^^^8^D
"DATA",9002313.91,145,5)
NE^8^^11
"DATA",9002313.91,145,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,145,10,1,0)
S BPS("X")=""
"DATA",9002313.91,145,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,145,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,145,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,145,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,145,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,145,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,7)=BPS("X")
"DATA",9002313.91,146,0)
491^^DIAGNOSIS CODE COUNT^N^^^^1^N
"DATA",9002313.91,146,5)
VE^1^^14
"DATA",9002313.91,146,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,146,10,1,0)
S BPS("X")=""
"DATA",9002313.91,146,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,146,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,146,25,0)
^9002313.9104^1^1^3040107^^^^
"DATA",9002313.91,146,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,147,0)
492^^DIAGNOSIS CODE QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,147,5)
WE^2^^14
"DATA",9002313.91,147,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,147,10,1,0)
S BPS("X")=""
"DATA",9002313.91,147,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,147,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,147,25,0)
^9002313.9104^1^1^3040224^^^
"DATA",9002313.91,147,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,148,0)
493^^CLINICAL INFORMATION COUNTER^N^^^^1^N
"DATA",9002313.91,148,5)
XE^1^^14
"DATA",9002313.91,148,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,148,10,1,0)
S BPS("X")=""
"DATA",9002313.91,148,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,148,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,148,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,148,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,149,0)
498.01^^REQUEST TYPE^N^^^^1^A/N
"DATA",9002313.91,149,5)
PA^1^^13
"DATA",9002313.91,149,10,0)
^9002313.9101^1^1^3040428
"DATA",9002313.91,149,10,1,0)
S BPS("X")=""
"DATA",9002313.91,149,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,149,20,1,0)
S BPS("X")=""
"DATA",9002313.91,149,25,0)
^9002313.9104^1^1^3040428^
"DATA",9002313.91,149,25,1,0)
S BPS("X")=""
"DATA",9002313.91,150,0)
498.02^^REQUEST PERIOD DATE-BEGIN^A/N^^^^8^N
"DATA",9002313.91,150,5)
PB^8^^13
"DATA",9002313.91,150,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,150,10,1,0)
S BPS("X")=""
"DATA",9002313.91,150,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,150,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,151,0)
498.03^^REQUEST PERIOD DATE-END^A/N^^^^8^N
"DATA",9002313.91,151,5)
PC^8^^13
"DATA",9002313.91,151,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,151,10,1,0)
S BPS("X")=""
"DATA",9002313.91,151,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,151,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,152,0)
498.04^^BASIS OF REQUEST^A/N^^^^2^A/N
"DATA",9002313.91,152,5)
PD^2^^13
"DATA",9002313.91,152,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,152,10,1,0)
S BPS("X")=""
"DATA",9002313.91,152,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,152,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,153,0)
498.05^^AUTHORIZED REP FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,153,5)
PE^12^^13
"DATA",9002313.91,153,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,153,10,1,0)
S BPS("X")=""
"DATA",9002313.91,153,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,153,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,154,0)
498.06^^AUTHORIZED REP LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,154,5)
PF^15^^13
"DATA",9002313.91,154,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,154,10,1,0)
S BPS("X")=""
"DATA",9002313.91,154,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,154,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,155,0)
498.07^^AUTHORIZED REP STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,155,5)
PG^30^^13
"DATA",9002313.91,155,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,155,10,1,0)
S BPS("X")=""
"DATA",9002313.91,155,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,155,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,156,0)
498.08^^AUTH REP CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,156,5)
PH^20^^13
"DATA",9002313.91,156,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,156,10,1,0)
S BPS("X")=""
"DATA",9002313.91,156,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,156,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,157,0)
498.09^^AUTHORIZED REP STATE/PROV ADDR^A/N^^^^2^A/N
"DATA",9002313.91,157,5)
PJ^2^^13
"DATA",9002313.91,157,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,157,10,1,0)
S BPS("X")=""
"DATA",9002313.91,157,20,0)
^9002313.9102^1^1^3101206^
"DATA",9002313.91,157,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,158,0)
498.11^^AUTHORIZED REP ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,158,1)
AUTHORIZED REPRESENTATIVE ZIP/POSTAL ZONE
"DATA",9002313.91,158,5)
PK^15^^13
"DATA",9002313.91,158,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,158,10,1,0)
S BPS("X")=""
"DATA",9002313.91,158,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,158,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,159,0)
498.12^^PRESCRIBER TELEPHONE NUMBER^N^^^^10^N
"DATA",9002313.91,159,5)
PM^10^^6
"DATA",9002313.91,159,10,0)
^9002313.9101^1^1^3050802
"DATA",9002313.91,159,10,1,0)
S BPS("X")=$TR($G(BPS("RX",BPS(9002313.0201),"Prescriber Phone #")),"#() -_*.@")
"DATA",9002313.91,159,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,159,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,159,25,0)
^9002313.9104^1^1^3030722^^
"DATA",9002313.91,159,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),10)
"DATA",9002313.91,159,30,0)
^9002313.9103^1^1^3030722^^
"DATA",9002313.91,159,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),498),U,12)=BPS("X")
"DATA",9002313.91,160,0)
498.13^^PRIOR AUTH SUPPORTING DOCUMENT^A/N^^^^500^A/N
"DATA",9002313.91,160,5)
PP^200^^13
"DATA",9002313.91,160,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,160,10,1,0)
S BPS("X")=""
"DATA",9002313.91,160,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,160,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),500)
"DATA",9002313.91,161,0)
498.14^^PRIOR AUTH NUMBER-ASSIGNED^N^^^^11^N
"DATA",9002313.91,161,5)
PY^8^^^30
"DATA",9002313.91,161,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,161,10,1,0)
S BPS("X")=""
"DATA",9002313.91,161,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,161,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,162,0)
498.52^^PRIOR AUTH EFFECTIVE DATE^A/N^^^^8^N
"DATA",9002313.91,162,5)
PS^8^^^30
"DATA",9002313.91,162,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,162,10,1,0)
S BPS("X")=""
"DATA",9002313.91,162,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,162,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,163,0)
498.53^^PRIOR AUTH EXPIRATION DATE^A/N^^^^8^N
"DATA",9002313.91,163,5)
PT^8^^^30
"DATA",9002313.91,163,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,163,10,1,0)
S BPS("X")=""
"DATA",9002313.91,163,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,163,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,164,0)
498.54^^PRIOR AUTH NO REFILLS AUTH^N^^^^2^N
"DATA",9002313.91,164,5)
PW^8^^^30
"DATA",9002313.91,164,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,164,10,1,0)
S BPS("X")=""
"DATA",9002313.91,164,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,164,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,165,0)
498.55^^PRIOR AUTH QTY ACCUMULATED^N^^^^10^N
"DATA",9002313.91,165,5)
PX^8^^^30
"DATA",9002313.91,165,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,165,10,1,0)
S BPS("X")=""
"DATA",9002313.91,165,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,165,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,166,0)
498.57^^PRIOR AUTHORIZATION QUANTITY^A/N^^^^10^N
"DATA",9002313.91,166,5)
RA^3^^^30
"DATA",9002313.91,166,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,166,10,1,0)
S BPS("X")=""
"DATA",9002313.91,166,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,166,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,167,0)
498.58^^PRIOR AUTH DOLLARS AUTHORIZED^N^^^^8^D
"DATA",9002313.91,167,5)
RB^8^^^30
"DATA",9002313.91,167,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,167,10,1,0)
S BPS("X")=""
"DATA",9002313.91,167,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,167,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,168,0)
498.59^^AUTH REP CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,168,5)
PH^20^^13
"DATA",9002313.91,168,10,0)
^9002313.9101^1^1^3030512
"DATA",9002313.91,168,10,1,0)
S BPS("X")=""
"DATA",9002313.91,168,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,168,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,169,0)
501^^HEADER RESPONSE STATUS^A/N^^^^1^A/N
"DATA",9002313.91,169,5)
F1^1^^^22
"DATA",9002313.91,169,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,169,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,169,25,0)
^9002313.9104^1^1^3040202^^^
"DATA",9002313.91,169,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,169,30,0)
^9002313.9103^1^1^3040202^^^
"DATA",9002313.91,169,30,1,0)
S $P(^BPSR(BPS(9002313.02),500),U,1)=BPS("X")
"DATA",9002313.91,170,0)
503^^AUTHORIZATION NUMBER^A/N^^^^20^A/N
"DATA",9002313.91,170,5)
F3^20^^^26
"DATA",9002313.91,170,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,170,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,170,30,0)
^^1^1^3031205^
"DATA",9002313.91,170,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,3)=BPS("X")
"DATA",9002313.91,171,0)
504^^MESSAGE^A/N^^^^200^A/N
"DATA",9002313.91,171,5)
F4^200^^^23
"DATA",9002313.91,171,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,171,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,171,25,0)
^^1^1^3031211^
"DATA",9002313.91,171,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),200)
"DATA",9002313.91,171,30,0)
^^1^1^3031211^
"DATA",9002313.91,171,30,1,0)
S $P(^BPSR(BPS(9002313.02),504),U,1)=BPS("X")
"DATA",9002313.91,172,0)
505^^PATIENT PAY AMOUNT^A/N^^^^8^D
"DATA",9002313.91,172,5)
F5^8^^^28
"DATA",9002313.91,172,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,172,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,172,25,0)
^9002313.9104^1^1^3031212^^
"DATA",9002313.91,172,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,172,30,0)
^9002313.9103^1^1^3031212^^
"DATA",9002313.91,172,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,5)=S BPS("X")
"DATA",9002313.91,173,0)
506^^INGREDIENT COST PAID^A/N^^^^8^D
"DATA",9002313.91,173,5)
F6^8^^^28
"DATA",9002313.91,173,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,173,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,173,25,0)
^9002313.9104^1^1^3031211^^
"DATA",9002313.91,173,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,173,30,0)
^9002313.9103^1^1^3031211^^
"DATA",9002313.91,173,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,6)=BPS("X")
"DATA",9002313.91,174,0)
507^^DISPENSING FEE PAID^A/N^^^^8^D
"DATA",9002313.91,174,5)
F7^8^^^28
"DATA",9002313.91,174,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,174,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,174,25,0)
^9002313.9104^1^1^3031210^^^
"DATA",9002313.91,174,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,174,30,0)
^9002313.9103^1^1^3031210^^^
"DATA",9002313.91,174,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,7)=BPS("X")
"DATA",9002313.91,175,0)
509^^TOTAL AMOUNT PAID^A/N^^^^8^D
"DATA",9002313.91,175,5)
F9^8^^^28
"DATA",9002313.91,175,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,175,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,175,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,175,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,175,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,175,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,9)
"DATA",9002313.91,176,0)
510^^REJECT COUNT^N^^^^2^N
"DATA",9002313.91,176,5)
FA^2^^^26
"DATA",9002313.91,176,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,176,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,176,25,0)
^^1^1^3031217^
"DATA",9002313.91,176,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,176,30,0)
^^1^1^3031217^
"DATA",9002313.91,176,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,10)=BPS("X")
"DATA",9002313.91,177,0)
511^^REJECT CODE^A/N^^^^3^A/N
"DATA",9002313.91,177,5)
FB^3^^^26
"DATA",9002313.91,177,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,177,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,177,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,177,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,177,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,177,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),511,DUR,0),U,1)
"DATA",9002313.91,178,0)
512^^ACCUMULATED DEDUCTIBLE AMOUNT^A/N^^^^8^D
"DATA",9002313.91,178,5)
FC^8^^^28
"DATA",9002313.91,178,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,178,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,178,25,0)
^9002313.9104^1^1^3031210^^^^
"DATA",9002313.91,178,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,178,30,0)
^9002313.9103^1^1^3031210^^^^
"DATA",9002313.91,178,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),"^",10)=BPS("X")
"DATA",9002313.91,179,0)
513^^REMAINING DEDUCTIBLE AMOUNT^A/N^^^^8^D
"DATA",9002313.91,179,5)
FD^8^^^28
"DATA",9002313.91,179,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,179,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,179,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,179,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,179,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,179,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,13)=BPS("X")
"DATA",9002313.91,180,0)
514^^REMAINING BENEFIT AMOUNT^A/N^^^^8^D
"DATA",9002313.91,180,5)
FE^8^^^28
"DATA",9002313.91,180,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,180,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,180,25,0)
^9002313.9104^1^1^3031217^^^
"DATA",9002313.91,180,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,180,30,0)
^9002313.9103^1^1^3031217^^^
"DATA",9002313.91,180,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,14)
"DATA",9002313.91,182,0)
517^^AMT APPLIED TO PERIODIC DEDUCT^D^^^^8^D
"DATA",9002313.91,182,5)
FH^8^^^28
"DATA",9002313.91,182,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,182,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,182,25,0)
^9002313.9104^1^1^3031205^^^
"DATA",9002313.91,182,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,182,30,0)
^9002313.9103^1^1^3031205^^
"DATA",9002313.91,182,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),"^",17)=BPS("X")
"DATA",9002313.91,183,0)
518^^AMOUNT OF COPAY^D^^^^8^D
"DATA",9002313.91,183,5)
FI^8^^^28
"DATA",9002313.91,183,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,183,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,183,25,0)
^^1^1^3031205^
"DATA",9002313.91,183,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,183,30,0)
^^1^1^3031205^
"DATA",9002313.91,183,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),"^",18)=BPS("X")
"DATA",9002313.91,184,0)
519^^AMT ATTRIBUTED TO PRODUCT SEL^D^^^^8^D
"DATA",9002313.91,184,5)
FJ^8
"DATA",9002313.91,184,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,184,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,184,25,0)
^^1^1^3031205^
"DATA",9002313.91,184,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,184,30,0)
^^1^1^3031205^
"DATA",9002313.91,184,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,19)=BPS("X")
"DATA",9002313.91,185,0)
520^^AMOUNT EXCEEDING PERIODIC MAX^D^^^^8^D
"DATA",9002313.91,185,5)
FK^8^^^28
"DATA",9002313.91,185,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,185,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,185,25,0)
^^1^1^3031205^
"DATA",9002313.91,185,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,185,30,0)
^^1^1^3031205^
"DATA",9002313.91,185,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,20)=BPS("X")
"DATA",9002313.91,186,0)
521^^INCENTIVE AMOUNT PAID^A/N^^^^8^D
"DATA",9002313.91,186,5)
FL^8^^^28
"DATA",9002313.91,186,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,186,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,186,25,0)
^^1^1^3031210^
"DATA",9002313.91,186,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,186,30,0)
^^1^1^3031210^
"DATA",9002313.91,186,30,1,0)
$P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,21)=BPS("X")
"DATA",9002313.91,187,0)
522^^BASIS OF REIMB DETERMINATION^N^^^^2^N
"DATA",9002313.91,187,5)
FM^2^^^28
"DATA",9002313.91,187,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,187,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,187,25,0)
^^1^1^3031205^
"DATA",9002313.91,187,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,187,30,0)
^^1^1^3031205^
"DATA",9002313.91,187,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,22)=BPS("X")
"DATA",9002313.91,188,0)
523^^AMOUNT ATTRIBUTED TO SALES TAX^D^^^^8^D
"DATA",9002313.91,188,5)
FN^8^^^28
"DATA",9002313.91,188,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,188,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,188,25,0)
^^1^1^3031205^
"DATA",9002313.91,188,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,188,30,0)
^^1^1^3031205^
"DATA",9002313.91,188,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),"^",23)=BPS("X")
"DATA",9002313.91,189,0)
524^^PLAN ID^A/N^^^^8^A/N
"DATA",9002313.91,189,5)
FO^8^^3^24
"DATA",9002313.91,189,10,0)
^^1^1^3110301^
"DATA",9002313.91,189,10,1,0)
S BPS("X")=$G(BPS("Insurer","Plan ID"))
"DATA",9002313.91,189,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,189,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,189,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,189,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),8)
"DATA",9002313.91,189,30,0)
^9002313.9103^1^1^3030825^^^^
"DATA",9002313.91,189,30,1,0)
S $P(^BPSC(BPS(9002313.02),520),U,4)=BPS("X")
"DATA",9002313.91,191,0)
526^^ADDITIONAL MESSAGE INFORMATION^A/N^^^^40^A/N
"DATA",9002313.91,191,5)
FQ^200^^^26
"DATA",9002313.91,191,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,191,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,191,25,0)
^9002313.9104^1^1^3031210^^^^
"DATA",9002313.91,191,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),200)
"DATA",9002313.91,191,30,0)
^9002313.9103^1^1^3031210^^^^
"DATA",9002313.91,191,30,1,0)
S ^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),526)=BPS("X")
"DATA",9002313.91,192,0)
528^^CLINICAL SIGNIFICANCE CODE^A/N^^^^1^A/N
"DATA",9002313.91,192,5)
FS^1^^^29
"DATA",9002313.91,192,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,192,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,192,25,0)
^9002313.9104^1^1^3031210^^^^
"DATA",9002313.91,192,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,192,30,0)
^9002313.9103^1^1^3031210^^^^
"DATA",9002313.91,192,30,1,0)
S ^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),525)=$G(BPS("X"))
"DATA",9002313.91,193,0)
529^^OTHER PHARMACY INDICATOR^A/N^^^^1^N
"DATA",9002313.91,193,5)
FT^1^^^29
"DATA",9002313.91,193,10,0)
^9002313.9101^1^1^3031212
"DATA",9002313.91,193,10,1,0)
S BPS("X")=""
"DATA",9002313.91,193,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,193,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,194,0)
530^^PREVIOUS DATE OF FILL^A/N^^^^8^N
"DATA",9002313.91,194,5)
FU^8^^^29
"DATA",9002313.91,194,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,194,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,194,25,0)
^^1^1^3031216^
"DATA",9002313.91,194,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X"))
"DATA",9002313.91,194,30,0)
^^1^1^3031216^
"DATA",9002313.91,194,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,5)=BPS("X")
"DATA",9002313.91,195,0)
531^^QUANTITY OF PREVIOUS FILL^N^^^^10^N
"DATA",9002313.91,195,5)
FV^8^^^29
"DATA",9002313.91,195,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,195,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,195,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,195,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,195,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,195,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,6)=BPS("X")
"DATA",9002313.91,196,0)
532^^DATABASE INDICATOR^A/N^^^^1^A/N
"DATA",9002313.91,196,5)
FW^1^^^29
"DATA",9002313.91,196,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,196,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,196,25,0)
^9002313.9104^1^1^3031210^^^
"DATA",9002313.91,196,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,196,30,0)
^9002313.9103^1^1^3031210^^^
"DATA",9002313.91,196,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,BPS(9002313.020101),0),U,7)=BPS("X")
"DATA",9002313.91,197,0)
533^^OTHER PRESCRIBER INDICATOR^A/N^^^^1^N
"DATA",9002313.91,197,5)
FX^1^^^29
"DATA",9002313.91,197,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,197,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,197,25,0)
^^1^1^3031212^
"DATA",9002313.91,197,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,197,30,0)
^^1^1^3031212^
"DATA",9002313.91,197,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,8)=BPS("X")
"DATA",9002313.91,199,0)
544^^DUR FREE TEXT MESSAGE^A/N^^^^30^A/N
"DATA",9002313.91,199,5)
FY^30^^^29
"DATA",9002313.91,199,10,0)
^9002313.9101^1^1^3101116^
"DATA",9002313.91,199,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,199,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,199,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,199,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,199,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,9)=BPS("X")
"DATA",9002313.91,200,0)
545^^NETWORK REIMBURSEMENT ID^A/N^^^^10^A/N
"DATA",9002313.91,200,5)
2F^10^^^24
"DATA",9002313.91,200,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,200,10,1,0)
S BPS("X")=""
"DATA",9002313.91,200,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,200,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,201,0)
546^^REJECTED FLD OCCURRENCE INDCTR^A/N^^^^2^N
"DATA",9002313.91,201,5)
4F^2^^^26
"DATA",9002313.91,201,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,201,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,201,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,201,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,201,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,201,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),511,DUR,0),U,2)=BPS("X")
"DATA",9002313.91,202,0)
547^^APPROVED MESSAGE CODE COUNT^A/N^^^^1^N
"DATA",9002313.91,202,5)
5F^1^^^26
"DATA",9002313.91,202,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,202,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,202,25,0)
^^1^1^3031205^
"DATA",9002313.91,202,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,202,30,0)
^^1^1^3031205^
"DATA",9002313.91,202,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),540),U,7)=BPS("X")
"DATA",9002313.91,203,0)
548^^APPROVED MESSAGE CODE^A/N^^^^3^A/N
"DATA",9002313.91,203,5)
6F^3^^^26
"DATA",9002313.91,203,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,203,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,203,25,0)
^9002313.9104^1^1^3031210^^^
"DATA",9002313.91,203,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,203,30,0)
^9002313.9103^1^1^3031210^^^
"DATA",9002313.91,203,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),548,0),B,4)=BPS("X")
"DATA",9002313.91,204,0)
549^^HELP DESK PHONE NUMBER QUAL^A/N^^^^2^A/N
"DATA",9002313.91,204,1)
HELP DESK TELEPHONE NUMBER QUALIFER
"DATA",9002313.91,204,5)
7F^2^^^26
"DATA",9002313.91,204,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,204,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,204,25,0)
^^1^1^3031210^
"DATA",9002313.91,204,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,204,30,0)
^^1^1^3031210^
"DATA",9002313.91,204,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),540),U,9)=BPS("X")
"DATA",9002313.91,205,0)
550^^HELP DESK TELEPHONE NUMBER^A/N^^^^18^A/N
"DATA",9002313.91,205,5)
8F^18^^^26
"DATA",9002313.91,205,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,205,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,205,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,205,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),18)
"DATA",9002313.91,205,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,205,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),540),U,10)=BPS("X")
"DATA",9002313.91,206,0)
551^^PREFERRED PRODUCT COUNT^A/N^^^^1^N
"DATA",9002313.91,206,5)
9F^1^^^27
"DATA",9002313.91,206,10,0)
^9002313.9101^1^1^3171117^
"DATA",9002313.91,206,10,1,0)
S BPS("X")=""
"DATA",9002313.91,206,20,0)
^9002313.9102^1^1^3171117^
"DATA",9002313.91,206,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,207,0)
552^^PREFERRED PRODUCT ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,207,5)
AP^2^^^27
"DATA",9002313.91,207,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,207,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,207,25,0)
^^1^1^3031216^
"DATA",9002313.91,207,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,207,30,0)
^^1^1^3031216^
"DATA",9002313.91,207,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,1)=BPS("X")
"DATA",9002313.91,208,0)
553^^PREFERRED PRODUCT ID^A/N^^^^19^A/N
"DATA",9002313.91,208,5)
AR^19^^^27
"DATA",9002313.91,208,10,0)
^9002313.9101^1^1^3171117^^^
"DATA",9002313.91,208,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,208,25,0)
^9002313.9104^1^1^3171117^^
"DATA",9002313.91,208,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,208,30,0)
^9002313.9103^1^1^3171117^^
"DATA",9002313.91,208,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,2)=BPS("X")
"DATA",9002313.91,209,0)
554^^PREFERRED PRODUCT INCENTIVE^A/N^^^^8^D
"DATA",9002313.91,209,5)
AS^8^^^27
"DATA",9002313.91,209,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,209,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,209,25,0)
^^1^1^3031216^
"DATA",9002313.91,209,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,209,30,0)
^^1^1^3031216^
"DATA",9002313.91,209,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,3)=BPS("X")
"DATA",9002313.91,210,0)
555^^PREF PRODUCT COST SHARE INCNTV^A/N^^^^8^D
"DATA",9002313.91,210,5)
AT^8^^^27
"DATA",9002313.91,210,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,210,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,210,25,0)
^9002313.9104^1^1^3031216^^
"DATA",9002313.91,210,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,210,30,0)
^9002313.9103^1^1^3031216^^
"DATA",9002313.91,210,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,4)=BPS("X")
"DATA",9002313.91,211,0)
556^^PREFERRED PRODUCT DESCRIPTION^A/N^^^^40^A/N
"DATA",9002313.91,211,5)
AU^40^^^27
"DATA",9002313.91,211,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,211,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,211,25,0)
^^1^1^3031216^
"DATA",9002313.91,211,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,211,30,0)
^^1^1^3031216^
"DATA",9002313.91,211,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,5)=BPS("X")
"DATA",9002313.91,212,0)
557^^TAX EXEMPT INDICATOR^A/N^^^^1^A/N
"DATA",9002313.91,212,5)
AV^1^^^28
"DATA",9002313.91,212,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,212,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,212,25,0)
^^1^1^3031217^
"DATA",9002313.91,212,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,212,30,0)
^^1^1^3031217^
"DATA",9002313.91,212,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),550),U,7)
"DATA",9002313.91,213,0)
558^^FLAT SALES TAX AMOUNT PAID^A/N^^^^8^D
"DATA",9002313.91,213,5)
AW^8^^^28
"DATA",9002313.91,213,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,213,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,213,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,213,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,213,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,213,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),550),U,8)=BPS("X")
"DATA",9002313.91,214,0)
559^^PERCENTAGE SALES TAX AMT PAID^A/N^^^^8^D
"DATA",9002313.91,214,5)
AX^8^^^28
"DATA",9002313.91,214,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,214,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,214,25,0)
^9002313.9104^1^1^3031212^^
"DATA",9002313.91,214,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,214,30,0)
^9002313.9103^1^1^3031212^^^
"DATA",9002313.91,214,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),550),U,9)=BPS("X")
"DATA",9002313.91,215,0)
560^^PERCENTAGE SALES TAX RATE PAID^A/N^^^^7^D
"DATA",9002313.91,215,5)
AY^8^^^28
"DATA",9002313.91,215,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,215,10,1,0)
S BPS("X")=""
"DATA",9002313.91,215,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,215,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),7)
"DATA",9002313.91,216,0)
561^^PERCENT SALES TAX BASIS PAID^A/N^^^^2^A/N
"DATA",9002313.91,216,5)
AZ^8^^^28
"DATA",9002313.91,216,10,0)
^9002313.9101^1^1^3031212
"DATA",9002313.91,216,10,1,0)
S BPS("X")=""
"DATA",9002313.91,216,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,216,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,217,0)
562^^PROFESSIONAL SERVICE FEE PAID^A/N^^^^8^D
"DATA",9002313.91,217,5)
J1^8^^^28
"DATA",9002313.91,217,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,217,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,217,25,0)
^^1^1^3031217^
"DATA",9002313.91,217,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,217,30,0)
^^1^1^3031217^
"DATA",9002313.91,217,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),560),U,2)=BPS("X")
"DATA",9002313.91,218,0)
563^^OTHER AMOUNT PAID COUNT^N^^^^1^N
"DATA",9002313.91,218,5)
J2^1^^^28
"DATA",9002313.91,218,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,218,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,218,25,0)
^^1^1^3031212^
"DATA",9002313.91,218,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,218,30,0)
^^1^1^3031212^
"DATA",9002313.91,218,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),563.01,DUR,0)),U,1)
"DATA",9002313.91,219,0)
564^^OTHER AMOUNT PAID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,219,5)
J3^2^^^28
"DATA",9002313.91,219,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,219,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,219,25,0)
^^1^1^3031212^
"DATA",9002313.91,219,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,219,30,0)
^^1^1^3031212^
"DATA",9002313.91,219,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),563.01,DUR,1),U,1)=BPS("X")
"DATA",9002313.91,220,0)
565^^OTHER AMOUNT PAID^A/N^^^^8^D
"DATA",9002313.91,220,5)
J4^8^^^28
"DATA",9002313.91,220,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,220,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,220,25,0)
^9002313.9104^1^1^3031212^^
"DATA",9002313.91,220,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,220,30,0)
^9002313.9103^1^1^3031212^^
"DATA",9002313.91,220,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),563.01,DUR,1),U,2)=BPS("X")
"DATA",9002313.91,221,0)
566^^OTHER PAYER AMOUNT RECOGNIZED^A/N^^^^8^D
"DATA",9002313.91,221,5)
J5^8^^^28
"DATA",9002313.91,221,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,221,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,221,25,0)
^^1^1^3090304^
"DATA",9002313.91,221,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,221,30,0)
^^1^1^3090304^
"DATA",9002313.91,221,30,1,0)
D SET566^BPSFLD01
"DATA",9002313.91,222,0)
567^^DUR/PPS RESPONSE CODE COUNTER^N^^^^1^N
"DATA",9002313.91,222,5)
J6^1^^^29
"DATA",9002313.91,222,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,222,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,222,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,222,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,222,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,222,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,1)=BPS("X")
"DATA",9002313.91,223,0)
568^^PAYER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,223,5)
J7^2^^^24
"DATA",9002313.91,223,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,223,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,223,25,0)
^^1^1^3031212^
"DATA",9002313.91,223,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,223,30,0)
^^1^1^3031212^
"DATA",9002313.91,223,30,1,0)
S $P(^BPSR(BPS(9002313.02),560),U,8)
"DATA",9002313.91,224,0)
569^^PAYER ID^A/N^^^^10^A/N
"DATA",9002313.91,224,5)
J8^10^^^24
"DATA",9002313.91,224,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,224,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,224,25,0)
^9002313.9104^1^1^3031212^^
"DATA",9002313.91,224,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,224,30,0)
^9002313.9103^1^1^3031212^^
"DATA",9002313.91,224,30,1,0)
S $P(^BPSR(BPS(9002313.02),560),U,9)=BPS("X")
"DATA",9002313.91,225,0)
600^^UNIT OF MEASURE^A/N^^^^2^A/N
"DATA",9002313.91,225,5)
28^2^^4
"DATA",9002313.91,225,10,0)
^9002313.9101^1^1^3070625
"DATA",9002313.91,225,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Unit of Measure"))
"DATA",9002313.91,225,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,225,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,225,25,0)
^9002313.9104^1^1^3070620^
"DATA",9002313.91,225,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,225,30,0)
^9002313.9103^1^1^3070620^
"DATA",9002313.91,225,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),600),U,1)=""
"DATA",9002313.91,240,0)
478^^OTHER AMT CLAIMED SBMTTD COUNT^N^^^^1^N
"DATA",9002313.91,240,1)
OTHER AMOUNT CLAIMED SUBMITTED COUNT
"DATA",9002313.91,240,5)
H7^1^^10
"DATA",9002313.91,240,10,0)
^9002313.9101^1^1^3101006^^^
"DATA",9002313.91,240,10,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,240,20,0)
^9002313.9102^1^1^3101006^^^
"DATA",9002313.91,240,20,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,240,25,0)
^9002313.9104^1^1^3101006^^
"DATA",9002313.91,240,25,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,240,30,0)
^9002313.9103^1^1^3101006^^
"DATA",9002313.91,240,30,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,241,0)
479^^OTHER AMT CLAIMED SUBM QLFR^A/N^^^^2^A/N
"DATA",9002313.91,241,1)
OTHER AMOUNT CLAIMED SUBMITTED QUALIFIER
"DATA",9002313.91,241,5)
H8^2^^10
"DATA",9002313.91,241,10,0)
^9002313.9101^1^1^3101006^^^
"DATA",9002313.91,241,10,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,241,20,0)
^9002313.9102^1^1^3101006^^^
"DATA",9002313.91,241,20,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,241,25,0)
^9002313.9104^1^1^3101006^^
"DATA",9002313.91,241,25,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,241,30,0)
^9002313.9103^1^1^3101006^^
"DATA",9002313.91,241,30,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,242,0)
463^^INTERMEDIARY AUTH TYPE ID^N^^^^2^N
"DATA",9002313.91,242,1)
INTERMEDIARY AUTHORIZATION TYPE ID
"DATA",9002313.91,242,5)
EW^2
"DATA",9002313.91,242,10,0)
^^2^2^3110727^
"DATA",9002313.91,242,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Intermediary Auth Type ID"))
"DATA",9002313.91,242,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,242,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,242,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,242,25,0)
^9002313.9104^1^1^3030823^^^^
"DATA",9002313.91,242,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,242,30,0)
^9002313.9103^1^1^3030823^^
"DATA",9002313.91,242,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,3)=BPS("X")
"DATA",9002313.91,265,0)
451^^COMPOUND DISP UNIT FORM INDCTR^N^^^^1^N
"DATA",9002313.91,265,1)
COMPOUND DISPENSING UNIT FORM INDICATOR
"DATA",9002313.91,265,5)
EG^1^^12
"DATA",9002313.91,265,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,265,10,1,0)
S BPS("X")=""
"DATA",9002313.91,265,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,265,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,265,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,265,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,266,0)
450^^COMPOUND DOSAGE FORM DESC CODE^A/N^^^^15^A/N
"DATA",9002313.91,266,1)
COMPOUND DOSAGE FORM DESCRIPTION CODE
"DATA",9002313.91,266,5)
EF^15^^12
"DATA",9002313.91,266,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,266,10,1,0)
S BPS("X")=""
"DATA",9002313.91,266,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,266,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,266,25,0)
^9002313.9104^1^1^3040107^^^^
"DATA",9002313.91,266,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,266,30,0)
^9002313.9103^1^1^3040107^^^^
"DATA",9002313.91,266,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,10)=BPS("X")
"DATA",9002313.91,267,0)
490^^COMP INGRED BASIS COST DETERM^A/N^^^^2^A/N
"DATA",9002313.91,267,1)
COMPOUND INGREDIENT BASIS OF COST DETERMINATION
"DATA",9002313.91,267,5)
UE^2^^12
"DATA",9002313.91,267,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,267,10,1,0)
S BPS("X")=""
"DATA",9002313.91,267,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,267,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,267,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,267,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,268,0)
447^^COMPOUND INGREDIENT COMP COUNT^N^^^^2^N
"DATA",9002313.91,268,1)
COMPOUND INGREDIENT COMPONENT COUNT
"DATA",9002313.91,268,5)
EC^2^^12
"DATA",9002313.91,268,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,268,10,1,0)
S BPS("X")=""
"DATA",9002313.91,268,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,268,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,268,25,0)
^9002313.9104^1^1^3040107^^^^
"DATA",9002313.91,268,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,268,30,0)
^9002313.9103^1^1^3040107^^^^
"DATA",9002313.91,268,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,7)=BPS("X")
"DATA",9002313.91,269,0)
449^^COMPOUND INGREDIENT DRUG COST^N^^^^8^D
"DATA",9002313.91,269,5)
EE^8^^12
"DATA",9002313.91,269,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,269,10,1,0)
S BPS("X")=""
"DATA",9002313.91,269,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,269,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,269,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,269,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,271,0)
489^^COMPOUND PRODUCT ID^A/N^^^^19^A/N
"DATA",9002313.91,271,5)
TE^19^^12
"DATA",9002313.91,271,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,271,10,1,0)
S BPS("X")=""
"DATA",9002313.91,271,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,271,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,271,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,271,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,272,0)
488^^COMPOUND PRODUCT ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,272,5)
RE^2^^12
"DATA",9002313.91,272,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,272,10,1,0)
S BPS("X")=""
"DATA",9002313.91,272,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,272,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,272,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,272,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,273,0)
452^^COMPOUND ROUTE OF ADMIN^N^^^^2^N
"DATA",9002313.91,273,5)
EH^2
"DATA",9002313.91,273,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,273,10,1,0)
S BPS("X")=""
"DATA",9002313.91,273,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,273,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,273,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,273,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,308,0)
448^^COMPOUND INGREDIENT QUANTITY^N^^^^10^N
"DATA",9002313.91,308,5)
ED^10^^12
"DATA",9002313.91,308,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,308,10,1,0)
S BPS("X")=""
"DATA",9002313.91,308,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,308,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,308,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,308,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,324,0)
494^^MEASUREMENT DATE^A/N^^^^8^N
"DATA",9002313.91,324,5)
ZE^8^^14
"DATA",9002313.91,324,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,324,10,1,0)
S BPS("X")=""
"DATA",9002313.91,324,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,324,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,324,25,0)
^9002313.9104^1^1^3040224^
"DATA",9002313.91,324,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,325,0)
496^^MEASUREMENT DIMENSION^A/N^^^^2^A/N
"DATA",9002313.91,325,5)
H2^2^^14
"DATA",9002313.91,325,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,325,10,1,0)
S BPS("X")=""
"DATA",9002313.91,325,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,325,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,325,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,325,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,326,0)
495^^MEASUREMENT TIME^N^^^^4^N
"DATA",9002313.91,326,5)
H1^4^^14
"DATA",9002313.91,326,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,326,10,1,0)
S BPS("X")=""
"DATA",9002313.91,326,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,326,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,326,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,326,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,327,0)
497^^MEASUREMENT UNIT^A/N^^^^2^A/N
"DATA",9002313.91,327,5)
H3^2^^14
"DATA",9002313.91,327,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,327,10,1,0)
S BPS("X")=""
"DATA",9002313.91,327,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,327,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,327,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,327,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,328,0)
499^^MEASUREMENT VALUE^A/N^^^^15^A/N
"DATA",9002313.91,328,5)
H4^15^^14
"DATA",9002313.91,328,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,328,10,1,0)
S BPS("X")=""
"DATA",9002313.91,328,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,328,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,328,25,0)
^9002313.9104^1^1^3040224^^^
"DATA",9002313.91,328,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,329,0)
990^^OTHER PAYER BIN NUMBER^N^^^^6^N
"DATA",9002313.91,329,5)
MG^6^^3
"DATA",9002313.91,329,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,329,10,1,0)
S BPS("X")=""
"DATA",9002313.91,329,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,329,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,329,30,0)
^9002313.9103^1^1^3101101^
"DATA",9002313.91,329,30,1,0)
S $P(^BPSC(BPS(9002313.02),980),U,10)=""
"DATA",9002313.91,330,0)
991^^OTHER PAYER PROC CONTROL NUM^A/N^^^^10^A/N
"DATA",9002313.91,330,1)
OTHER PAYER PROCESSOR CONTROL NUMBER
"DATA",9002313.91,330,5)
MH^10^^3^31
"DATA",9002313.91,330,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,330,10,1,0)
S BPS("X")=""
"DATA",9002313.91,330,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,330,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,330,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,330,30,1,0)
S $P(^BPSC(BPS(9002313.02),990),U,1)=""
"DATA",9002313.91,331,0)
356^^OTHER PAYER CARDHOLDER ID^A/N^^^^20^A/N
"DATA",9002313.91,331,5)
NU^20^^3^31
"DATA",9002313.91,331,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,331,10,1,0)
S BPS("X")=""
"DATA",9002313.91,331,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,331,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,331,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,331,30,1,0)
S $P(^BPSC(BPS(9002313.02),350),U,6)=""
"DATA",9002313.91,332,0)
992^^OTHER PAYER GROUP ID^A/N^^^^15^A/N
"DATA",9002313.91,332,5)
MJ^15^^3^31
"DATA",9002313.91,332,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,332,10,1,0)
S BPS("X")=""
"DATA",9002313.91,332,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,332,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,332,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,332,30,1,0)
S $P(^BPSC(BPS(9002313.02),990),U,2)=""
"DATA",9002313.91,333,0)
359^^MEDIGAP ID^A/N^^^^20^A/N
"DATA",9002313.91,333,5)
2A^20^^3
"DATA",9002313.91,333,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,333,10,1,0)
S BPS("X")=""
"DATA",9002313.91,333,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,333,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,333,30,0)
^9002313.9103^1^1^3100923^^
"DATA",9002313.91,333,30,1,0)
S $P(^BPSC(BPS(9002313.02),350),U,9)=""
"DATA",9002313.91,334,0)
360^^MEDICAID INDICATOR^N^^^^2^A/N
"DATA",9002313.91,334,5)
2B^2^^3
"DATA",9002313.91,334,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,334,10,1,0)
S BPS("X")=""
"DATA",9002313.91,334,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,334,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,334,30,0)
^9002313.9103^1^1^3101101^
"DATA",9002313.91,334,30,1,0)
S $P(^BPSC(BPS(9002313.02),350),U,10)=""
"DATA",9002313.91,335,0)
361^^PROVIDER ACCEPT ASSGNMT INDCTR^A/N^^^^1^A/N
"DATA",9002313.91,335,1)
PROVIDER ACCEPT ASSIGNMENT INDICATOR
"DATA",9002313.91,335,5)
2D^1^^3
"DATA",9002313.91,335,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,335,10,1,0)
S BPS("X")="Y"
"DATA",9002313.91,335,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,335,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,335,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,335,30,1,0)
S $P(^BPSC(BPS(9002313.02),360),U,1)=$G(BPS("X"))
"DATA",9002313.91,336,0)
997^^CMS PART D DEFND QLFD FACILITY^A/N^^^^1^A/N
"DATA",9002313.91,336,1)
CMS PART D DEFINED QUALIFIED FACILITY
"DATA",9002313.91,336,5)
G2^1^^3
"DATA",9002313.91,336,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,336,10,1,0)
S BPS("X")="N"
"DATA",9002313.91,336,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,336,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,336,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,336,30,1,0)
S $P(^BPSC(BPS(9002313.02),990),U,7)=$G(BPS("X"))
"DATA",9002313.91,337,0)
115^^MEDICAID ID NUMBER^A/N^^^^20^A/N
"DATA",9002313.91,337,5)
N5^20^^3^24
"DATA",9002313.91,337,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,337,10,1,0)
S BPS("X")=""
"DATA",9002313.91,337,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,337,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,337,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,337,30,1,0)
S $P(^BPSC(BPS(9002313.02),110),U,5)=""
"DATA",9002313.91,338,0)
116^^MEDICAID AGENCY NUMBER^A/N^^^^15^A/N
"DATA",9002313.91,338,5)
N6^15^^3^24
"DATA",9002313.91,338,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,338,10,1,0)
S BPS("X")=""
"DATA",9002313.91,338,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,338,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,338,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,338,30,1,0)
S $P(^BPSC(BPS(9002313.02),110),U,6)=""
"DATA",9002313.91,339,0)
384^^PATIENT RESIDENCE^N^^^^2^N
"DATA",9002313.91,339,5)
4X^2^^2
"DATA",9002313.91,339,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,339,10,1,0)
S BPS("X")=$G(BPS("Patient","Patient Residence"))
"DATA",9002313.91,339,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,339,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,339,30,0)
^9002313.9103^1^1^3101007^^^^
"DATA",9002313.91,339,30,1,0)
S $P(^BPSC(BPS(9002313.02),380),U,4)=$G(BPS("X"))
"DATA",9002313.91,340,0)
354^^SUBMISSION CLARIF CODE COUNT^N^^^^1^N
"DATA",9002313.91,340,1)
SUBMISSION CLARIFICATION CODE COUNT
"DATA",9002313.91,340,5)
NX^2^^4
"DATA",9002313.91,340,10,0)
^9002313.9101^1^1^3101006^^
"DATA",9002313.91,340,10,1,0)
; fields 354 & 420 handled by FLD420^BPSOSSG (see SET CODE in field 420)
"DATA",9002313.91,340,20,0)
^9002313.9102^1^1^3101006^^
"DATA",9002313.91,340,20,1,0)
; fields 354 & 420 handled by FLD420^BPSOSSG (see SET CODE in field 420)
"DATA",9002313.91,340,25,0)
^9002313.9104^1^1^3101006^^
"DATA",9002313.91,340,25,1,0)
; fields 354 & 420 handled by FLD420^BPSOSSG (see SET CODE in field 420)
"DATA",9002313.91,340,30,0)
^9002313.9103^1^1^3101006^^^^
"DATA",9002313.91,340,30,1,0)
; fields 354 & 420 handled by FLD420^BPSOSSG (see SET CODE in field 420)
"DATA",9002313.91,341,0)
357^^DELAY REASON CODE^N^^^^2^N
"DATA",9002313.91,341,5)
NV^2^^4
"DATA",9002313.91,341,10,0)
^9002313.9101^1^1^3101007^^
"DATA",9002313.91,341,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Delay Reason Code"))
"DATA",9002313.91,341,20,0)
^9002313.9102^1^1^3101012^
"DATA",9002313.91,341,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,341,30,0)
^9002313.9103^1^1^3101007^^
"DATA",9002313.91,341,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),350),U,7)=$S($G(BPS("X"))="NV00":"",1:$G(BPS("X")))
"DATA",9002313.91,342,0)
880^^TRANSACTION REFERENCE NUMBER^A/N^^^^10^A/N
"DATA",9002313.91,342,5)
K5^10^^4^26
"DATA",9002313.91,342,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,342,10,1,0)
S BPS("X")=""
"DATA",9002313.91,342,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,342,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,342,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,342,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),870),U,10)=""
"DATA",9002313.91,343,0)
391^^PATIENT ASSIGNMENT INDICATOR^A/N^^^^1^A/N
"DATA",9002313.91,343,1)
PATIENT ASSIGNMENT INDICATOR (DIRECT MEMBER REIMBURSEMENT INDICATOR)
"DATA",9002313.91,343,5)
MT^1^^4
"DATA",9002313.91,343,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,343,10,1,0)
S BPS("X")="Y"
"DATA",9002313.91,343,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,343,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,343,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,343,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),390),U,1)=$G(BPS("X"))
"DATA",9002313.91,344,0)
995^^ROUTE OF ADMINISTRATION^A/N^^^^11^A/N
"DATA",9002313.91,344,5)
E2^1^^4
"DATA",9002313.91,344,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,344,10,1,0)
S BPS("X")=""
"DATA",9002313.91,344,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,344,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,344,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,344,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),990),U,5)=$G(BPS("X"))
"DATA",9002313.91,345,0)
996^^COMPOUND TYPE^A/N^^^^2^A/N
"DATA",9002313.91,345,5)
G1^2^^4
"DATA",9002313.91,345,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,345,10,1,0)
S BPS("X")=""
"DATA",9002313.91,345,20,0)
^9002313.9102^1^1^3101206^
"DATA",9002313.91,345,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,345,30,0)
^^1^1^3121128
"DATA",9002313.91,345,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),990),U,6)=""
"DATA",9002313.91,346,0)
114^^MEDICAID SUBROGATION ICN/TCN^A/N^^^^20^A/N
"DATA",9002313.91,346,1)
MEDICAID SUBROGATION INTERNAL CONTROL NUMBER/TRANSACTION CONTROL NUMBER (ICN/TCN)
"DATA",9002313.91,346,5)
N4^20^^4^27
"DATA",9002313.91,346,10,0)
^9002313.9101^1^1^3101110^
"DATA",9002313.91,346,10,1,0)
S BPS("X")=""
"DATA",9002313.91,346,20,0)
^9002313.9102^1^1^3101110^
"DATA",9002313.91,346,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,346,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,346,30,1,0)
S $P(^BPSC(BPS(9002313.02),110),U,4)=""
"DATA",9002313.91,347,0)
147^^PHARMACY SERVICE TYPE^N^^^^2^N
"DATA",9002313.91,347,5)
U7^2^^4
"DATA",9002313.91,347,10,0)
^9002313.9101^1^1^3101007^^
"DATA",9002313.91,347,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Pharmacy Service Type"))
"DATA",9002313.91,347,20,0)
^9002313.9102^1^1^3101007^^
"DATA",9002313.91,347,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,347,30,0)
^9002313.9103^1^1^3101007^^^^
"DATA",9002313.91,347,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),140),U,7)=$G(BPS("X"))
"DATA",9002313.91,348,0)
364^^PRESCRIBER FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,348,5)
2J^12^^6
"DATA",9002313.91,348,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,348,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber First Name"))
"DATA",9002313.91,348,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,348,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,348,30,0)
^9002313.9103^1^1^3101101^^^
"DATA",9002313.91,348,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,4)=$G(BPS("X"))
"DATA",9002313.91,349,0)
365^^PRESCRIBER STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,349,5)
2K^30
"DATA",9002313.91,349,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,349,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Street Address"))
"DATA",9002313.91,349,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,349,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,349,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,349,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,5)=$G(BPS("X"))
"DATA",9002313.91,350,0)
366^^PRESCRIBER CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,350,5)
2M^20^^6
"DATA",9002313.91,350,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,350,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber City Address"))
"DATA",9002313.91,350,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,350,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,350,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,350,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,6)=$G(BPS("X"))
"DATA",9002313.91,351,0)
367^^PRESCRIBER STATE/PROV ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,351,1)
PRESCRIBER STATE/PROVINCE ADDRESS
"DATA",9002313.91,351,5)
2N^2^^6
"DATA",9002313.91,351,10,0)
^9002313.9101^1^1^3101029^^
"DATA",9002313.91,351,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber State/Province Address"))
"DATA",9002313.91,351,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,351,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,351,30,0)
^9002313.9103^1^1^3101101^^^
"DATA",9002313.91,351,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,7)=$G(BPS("X"))
"DATA",9002313.91,352,0)
368^^PRESCRIBER ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,352,5)
2P^2^^6
"DATA",9002313.91,352,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,352,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Zip/Postal Zone"))
"DATA",9002313.91,352,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,352,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,352,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,352,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,8)=$G(BPS("X"))
"DATA",9002313.91,353,0)
993^^INTERNAL CONTROL NUMBER^A/N^^^^30^A/N
"DATA",9002313.91,353,5)
A7^30^^7^26
"DATA",9002313.91,353,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,353,10,1,0)
S BPS("X")=""
"DATA",9002313.91,353,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,353,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,353,30,0)
^9002313.9103^1^1^3101029^
"DATA",9002313.91,353,30,1,0)
; This field currently not implemented
"DATA",9002313.91,354,0)
392^^BENEFIT STAGE COUNT^N^^^^1^N
"DATA",9002313.91,354,5)
MU^1^^7^28
"DATA",9002313.91,354,10,0)
^^1^1^3110727^
"DATA",9002313.91,354,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,354,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,354,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,354,30,0)
^^1^1^3110727^
"DATA",9002313.91,354,30,1,0)
D SET392^BPSFLD01
"DATA",9002313.91,355,0)
393^^BENEFIT STAGE QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,355,5)
MV^2^^7^28
"DATA",9002313.91,355,10,0)
^^1^1^3110727^
"DATA",9002313.91,355,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,355,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,355,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,355,30,0)
^^1^1^3110727^
"DATA",9002313.91,355,30,1,0)
D SET393^BPSFLD01
"DATA",9002313.91,356,0)
394^^BENEFIT STAGE AMOUNT^N^^^^8^D
"DATA",9002313.91,356,5)
MW^8^^7^28
"DATA",9002313.91,356,10,0)
^^1^1^3110727^
"DATA",9002313.91,356,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,356,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,356,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,356,30,0)
^^1^1^3110727^
"DATA",9002313.91,356,30,1,0)
D SET394^BPSFLD01
"DATA",9002313.91,357,0)
117^^BILLING ENTITY TYPE INDICATOR^N^^^^2^N
"DATA",9002313.91,357,5)
TR^2^^8
"DATA",9002313.91,357,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,357,10,1,0)
S BPS("X")=""
"DATA",9002313.91,357,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,357,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,357,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,357,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,7)=""
"DATA",9002313.91,358,0)
118^^PAY TO QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,358,5)
TS^2^^8
"DATA",9002313.91,358,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,358,10,1,0)
S BPS("X")=""
"DATA",9002313.91,358,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,358,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,358,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,358,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,8)=""
"DATA",9002313.91,359,0)
119^^PAY TO ID^A/N^^^^15^A/N
"DATA",9002313.91,359,5)
TT^15^^8
"DATA",9002313.91,359,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,359,10,1,0)
S BPS("X")=""
"DATA",9002313.91,359,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,359,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,359,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,359,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,9)=""
"DATA",9002313.91,360,0)
120^^PAY TO NAME^A/N^^^^20^A/N
"DATA",9002313.91,360,5)
TU^20^^8
"DATA",9002313.91,360,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,360,10,1,0)
S BPS("X")=""
"DATA",9002313.91,360,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,360,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,360,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,360,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,10)=""
"DATA",9002313.91,361,0)
121^^PAY TO STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,361,5)
TV^30
"DATA",9002313.91,361,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,361,10,1,0)
S BPS("X")=""
"DATA",9002313.91,361,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,361,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,361,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,361,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,1)=""
"DATA",9002313.91,362,0)
122^^PAY TO CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,362,5)
TW^20^^8
"DATA",9002313.91,362,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,362,10,1,0)
S BPS("X")=""
"DATA",9002313.91,362,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,362,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,362,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,362,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,2)=""
"DATA",9002313.91,363,0)
124^^PAY TO ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,363,5)
TY^15^^8
"DATA",9002313.91,363,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,363,10,1,0)
S BPS("X")=""
"DATA",9002313.91,363,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,363,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,363,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,363,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,4)=""
"DATA",9002313.91,364,0)
125^^GENERIC EQUIV PROD ID QLFR^A/N^^^^2^A/N
"DATA",9002313.91,364,1)
GENERIC EQUIVALENT PRODUCT ID QUALIFIER
"DATA",9002313.91,364,5)
TZ^2^^8
"DATA",9002313.91,364,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,364,10,1,0)
S BPS("X")=""
"DATA",9002313.91,364,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,364,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,364,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,364,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,5)=""
"DATA",9002313.91,365,0)
126^^GENERIC EQUIVALENT PRODUCT ID^A/N^^^^19^A/N
"DATA",9002313.91,365,5)
UA^19^^8
"DATA",9002313.91,365,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,365,10,1,0)
S BPS("X")=""
"DATA",9002313.91,365,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,365,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,365,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,365,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,6)=""
"DATA",9002313.91,366,0)
113^^MEDICAID PAID AMOUNT^N^^^^8^D
"DATA",9002313.91,366,5)
N3^8^^10
"DATA",9002313.91,366,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,366,10,1,0)
S BPS("X")=""
"DATA",9002313.91,366,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,366,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,366,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,366,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,3)=""
"DATA",9002313.91,367,0)
362^^COMPOUND INGRED MOD CODE CNT^N^^^^2^N
"DATA",9002313.91,367,1)
COMPOUND INGREDIENT MODIFIER CODE COUNT
"DATA",9002313.91,367,5)
2G^2^^12
"DATA",9002313.91,367,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,367,10,1,0)
S BPS("X")=""
"DATA",9002313.91,367,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,367,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,367,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,367,30,1,0)
; This field currently not implemented
"DATA",9002313.91,368,0)
363^^COMPOUND INGRED MODIFIER CODE^A/N^^^^2^A/N
"DATA",9002313.91,368,1)
COMPOUND INGREDIENT MODIFIER CODE
"DATA",9002313.91,368,5)
2H^2^^12
"DATA",9002313.91,368,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,368,10,1,0)
S BPS("X")=""
"DATA",9002313.91,368,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,368,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,368,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,368,30,1,0)
; This field currently not implemented
"DATA",9002313.91,369,0)
369^^ADDITIONAL DCMNTN TYPE ID^A/N^^^^3^A/N
"DATA",9002313.91,369,1)
ADDITIONAL DOCUMENTATION TYPE ID
"DATA",9002313.91,369,5)
2Q^3^^15
"DATA",9002313.91,369,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,369,10,1,0)
S BPS("X")=""
"DATA",9002313.91,369,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,369,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,369,30,0)
^9002313.9103^1^1^3101206^^
"DATA",9002313.91,369,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,9)=""
"DATA",9002313.91,370,0)
370^^LENGTH OF NEED^N^^^^3^N
"DATA",9002313.91,370,5)
2R^3^^15
"DATA",9002313.91,370,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,370,10,1,0)
S BPS("X")=""
"DATA",9002313.91,370,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,370,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,370,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,370,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,10)=""
"DATA",9002313.91,371,0)
371^^LENGTH OF NEED QUALIFIER^N^^^^2^N
"DATA",9002313.91,371,5)
2S^3^^15
"DATA",9002313.91,371,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,371,10,1,0)
S BPS("X")=""
"DATA",9002313.91,371,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,371,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,371,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,371,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,1)=""
"DATA",9002313.91,372,0)
372^^PRESCRIBER/SUPPLIER DT SIGNED^N^^^^8^N
"DATA",9002313.91,372,1)
PRESCRIBER/SUPPLIER DATE SIGNED
"DATA",9002313.91,372,5)
2T^9^^15
"DATA",9002313.91,372,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,372,10,1,0)
S BPS("X")=""
"DATA",9002313.91,372,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,372,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,372,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,372,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,2)=""
"DATA",9002313.91,373,0)
373^^REQUEST STATUS^A/N^^^^1^A/N
"DATA",9002313.91,373,5)
2U^1^^15
"DATA",9002313.91,373,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,373,10,1,0)
S BPS("X")=""
"DATA",9002313.91,373,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,373,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,373,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,373,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,3)=""
"DATA",9002313.91,374,0)
374^^REQUEST PERIOD BEGIN DATE^N^^^^8^N
"DATA",9002313.91,374,5)
2V^8^^15
"DATA",9002313.91,374,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,374,10,1,0)
S BPS("X")=""
"DATA",9002313.91,374,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,374,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,374,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,374,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,4)=""
"DATA",9002313.91,375,0)
375^^REQ PERIOD RECERT/REVISED DT^N^^^^8^N
"DATA",9002313.91,375,1)
REQUEST PERIOD RECERT/REVISED DATE
"DATA",9002313.91,375,5)
2W^8^^15
"DATA",9002313.91,375,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,375,10,1,0)
S BPS("X")=""
"DATA",9002313.91,375,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,375,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,375,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,375,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,5)=""
"DATA",9002313.91,376,0)
376^^SUPPORTING DOCUMENTATION^A/N^^^^65^A/N
"DATA",9002313.91,376,5)
2X^65^^15
"DATA",9002313.91,376,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,376,10,1,0)
S BPS("X")=""
"DATA",9002313.91,376,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,376,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),65)
"DATA",9002313.91,376,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,376,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,6)=""
"DATA",9002313.91,377,0)
377^^QUESTION NUMBER/LETTER COUNT^A/N^^^^2^N
"DATA",9002313.91,377,5)
2Z^65^^15
"DATA",9002313.91,377,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,377,10,1,0)
S BPS("X")=""
"DATA",9002313.91,377,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,377,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,378,0)
378^^QUESTION NUMBER/LETTER^A/N^^^^3^A/N
"DATA",9002313.91,378,5)
4B^3^^15
"DATA",9002313.91,378,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,378,10,1,0)
S BPS("X")=""
"DATA",9002313.91,378,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,378,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,378,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,378,30,1,0)
; This field currently not implemented
"DATA",9002313.91,379,0)
379^^QUESTION PERCENT RESPONSE^N^^^^5^N
"DATA",9002313.91,379,5)
4D^5^^15
"DATA",9002313.91,379,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,379,10,1,0)
S BPS("X")=""
"DATA",9002313.91,379,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,379,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),5)
"DATA",9002313.91,379,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,379,30,1,0)
; This field currently not implemented
"DATA",9002313.91,380,0)
380^^QUESTION DATE RESPONSE^N^^^^8^N
"DATA",9002313.91,380,5)
4G^8^^15
"DATA",9002313.91,380,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,380,10,1,0)
S BPS("X")=""
"DATA",9002313.91,380,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,380,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,380,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,380,30,1,0)
; This field currently not implemented
"DATA",9002313.91,381,0)
381^^QUESTION DOLLAR AMT RESPONSE^N^^^^11^D
"DATA",9002313.91,381,1)
QUESTION DOLLAR AMOUNT RESPONSE
"DATA",9002313.91,381,5)
4H^9^^15
"DATA",9002313.91,381,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,381,10,1,0)
S BPS("X")=""
"DATA",9002313.91,381,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,381,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,381,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,381,30,1,0)
; This field currently not implemented
"DATA",9002313.91,382,0)
382^^QUESTION NUMERIC RESPONSE^N^^^^11^N
"DATA",9002313.91,382,5)
4J^11^^15
"DATA",9002313.91,382,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,382,10,1,0)
S BPS("X")=""
"DATA",9002313.91,382,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,382,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,382,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,382,30,1,0)
; This field currently not implemented
"DATA",9002313.91,383,0)
383^^QUESTION ALPHANUMERIC RESPONSE^A/N^^^^30^A/N
"DATA",9002313.91,383,5)
4K^30^^15
"DATA",9002313.91,383,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,383,10,1,0)
S BPS("X")=""
"DATA",9002313.91,383,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,383,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,383,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,383,30,1,0)
; This field currently not implemented
"DATA",9002313.91,384,0)
385^^FACILITY NAME^A/N^^^^30^A/N
"DATA",9002313.91,384,5)
3Q^30^^16
"DATA",9002313.91,384,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,384,10,1,0)
S BPS("X")=""
"DATA",9002313.91,384,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,384,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,384,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,384,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,5)=""
"DATA",9002313.91,385,0)
386^^FACILITY STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,385,5)
3U^30
"DATA",9002313.91,385,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,385,10,1,0)
S BPS("X")=""
"DATA",9002313.91,385,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,385,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,385,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,385,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,6)=""
"DATA",9002313.91,386,0)
387^^FACILITY STATE/PROV ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,386,1)
FACILITY STATE/PROVINCE ADDRESS
"DATA",9002313.91,386,5)
3V^2^^16
"DATA",9002313.91,386,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,386,10,1,0)
S BPS("X")=""
"DATA",9002313.91,386,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,386,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,386,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,386,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,7)=""
"DATA",9002313.91,387,0)
388^^FACILITY CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,387,5)
5J^20^^16
"DATA",9002313.91,387,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,387,10,1,0)
S BPS("X")=""
"DATA",9002313.91,387,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,387,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,387,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,387,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,8)=""
"DATA",9002313.91,388,0)
389^^FACILITY ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,388,5)
6D^16^^16
"DATA",9002313.91,388,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,388,10,1,0)
S BPS("X")=""
"DATA",9002313.91,388,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,388,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,388,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,388,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,9)=""
"DATA",9002313.91,389,0)
390^^NARRATIVE MESSAGE^A/N^^^^200^A/N
"DATA",9002313.91,389,5)
BM^200^^17
"DATA",9002313.91,389,10,0)
^9002313.9101^1^1^3101110^
"DATA",9002313.91,389,10,1,0)
S BPS("X")=""
"DATA",9002313.91,389,20,0)
^9002313.9102^1^1^3101110^
"DATA",9002313.91,389,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),200)
"DATA",9002313.91,389,30,0)
^9002313.9103^1^1^3101110^^
"DATA",9002313.91,389,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),389),U,2)=""
"DATA",9002313.91,390,0)
130^^ADDITIONAL MESSAGE INFO COUNT^N^^^^2^N
"DATA",9002313.91,390,5)
UF^2^^^26
"DATA",9002313.91,390,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,390,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,391,0)
132^^ADDITIONAL MSG INFO QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,391,5)
UH^2^^^26
"DATA",9002313.91,391,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,391,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,392,0)
131^^ADDITIONAL MSG INFO CONTINUITY^N^^^^1^A/N
"DATA",9002313.91,392,5)
UG^2^^^26
"DATA",9002313.91,392,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,392,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,393,0)
987^^URL^A/N^^^^255^A/N
"DATA",9002313.91,393,5)
MA^255^^^26
"DATA",9002313.91,393,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,393,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,394,0)
571^^AMOUNT ATTRIB TO PROCESSOR FEE^N^^^^8^N
"DATA",9002313.91,394,5)
NZ^8^^^28
"DATA",9002313.91,394,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,394,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,395,0)
575^^PATIENT SALES TAX^N^^^^8^N
"DATA",9002313.91,395,5)
EQ^8^^^28
"DATA",9002313.91,395,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,395,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,396,0)
574^^PLAN SALES TAX AMOUNT^N^^^^8^N
"DATA",9002313.91,396,5)
2Y^8^^^28
"DATA",9002313.91,396,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,396,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,397,0)
572^^AMOUNT OF COINSURANCE^N^^^^8^N
"DATA",9002313.91,397,5)
4U^8^^^28
"DATA",9002313.91,397,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,397,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,398,0)
573^^BASIS OF CALC - COINSURANCE^A/N^^^^2^A/N
"DATA",9002313.91,398,5)
4V^2^^^28
"DATA",9002313.91,398,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,398,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,399,0)
577^^ESTIMATED GENERIC SAVINGS^N^^^^8^N
"DATA",9002313.91,399,5)
G3^8^^^28
"DATA",9002313.91,399,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,399,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,400,0)
128^^SPENDING ACCOUNT AMT REMAINING^N^^^^8^N
"DATA",9002313.91,400,5)
UC^8^^^28
"DATA",9002313.91,400,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,400,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,401,0)
129^^HEALTH PLAN-FUNDED ASSIST AMT^N^^^^8^N
"DATA",9002313.91,401,5)
UD^8^^^28
"DATA",9002313.91,401,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,401,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,402,0)
133^^AMT ATTR TO PROV NETWORK SLCTN^N^^^^8^N
"DATA",9002313.91,402,5)
UJ^8^^^28
"DATA",9002313.91,402,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,402,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,403,0)
134^^AMT ATTR TO PROD SEL BRND DRUG^N^^^^8^N
"DATA",9002313.91,403,5)
UK^8^^^28
"DATA",9002313.91,403,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,403,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,404,0)
135^^AMT ATTR NON-PREF FRMLRY SEL^N^^^^8^N
"DATA",9002313.91,404,5)
UM^8^^^28
"DATA",9002313.91,404,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,404,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,405,0)
136^^AMT ATTR TO N-PREF FRMLRY SEL^N^^^^8^N
"DATA",9002313.91,405,5)
UN^8^^^28
"DATA",9002313.91,405,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,405,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,406,0)
137^^AMOUNT ATTR TO COVERAGE GAP^N^^^^8^N
"DATA",9002313.91,406,5)
UP^8^^^28
"DATA",9002313.91,406,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,406,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,407,0)
148^^INGRED COST CNTRCTD REIMB AMT^N^^^^8^N
"DATA",9002313.91,407,5)
U8^8^^^28
"DATA",9002313.91,407,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,407,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,408,0)
149^^DISP FEE CNTRCTD REIMB AMT^N^^^^8^N
"DATA",9002313.91,408,5)
U9^8^^^28
"DATA",9002313.91,408,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,408,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,409,0)
570^^DUR ADDITIONAL TEXT^A/N^^^^100^A/N
"DATA",9002313.91,409,5)
NS^100^^^29
"DATA",9002313.91,409,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,409,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,410,0)
355^^OTHER PAYER ID COUNT^N^^^^1^N
"DATA",9002313.91,410,5)
NT^1^^^31
"DATA",9002313.91,410,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,410,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,411,0)
142^^OTHER PAYER PERSON CODE^A/N^^^^3^A/N
"DATA",9002313.91,411,5)
UV^3^^^31
"DATA",9002313.91,411,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,411,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,412,0)
127^^OTHER PAYER HELP DESK PH NUM^A/N^^^^18^A/N
"DATA",9002313.91,412,1)
OTHER PAYER HELP DESK TELEPHONE NUMBER
"DATA",9002313.91,412,5)
UB^18^^^31
"DATA",9002313.91,412,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,412,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,413,0)
143^^OTHER PAYER PATIENT REL CODE^N^^^^1^N
"DATA",9002313.91,413,5)
UW^1^^^31
"DATA",9002313.91,413,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,413,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,414,0)
144^^OTHER PAYER EFFECTIVE DATE^N^^^^8^N
"DATA",9002313.91,414,5)
UX^8^^^31
"DATA",9002313.91,414,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,414,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,415,0)
145^^OTHER PAYER TERMINATION DATE^N^^^^8^N
"DATA",9002313.91,415,5)
UY^8^^^31
"DATA",9002313.91,415,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,415,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,416,0)
139^^MEDICARE PART D COVERAGE CODE^N^^^^2^N
"DATA",9002313.91,416,5)
UR^2^^^33
"DATA",9002313.91,416,10,0)
^9002313.9101^1^1^3171117^^
"DATA",9002313.91,416,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,417,0)
138^^CMS LICS LEVEL^A/N^^^^20^A/N
"DATA",9002313.91,417,5)
UQ^20^^^33
"DATA",9002313.91,417,10,0)
^9002313.9101^1^1^3171117^^^
"DATA",9002313.91,417,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,418,0)
240^^CONTRACT NUMBER^A/N^^^^8^A/N
"DATA",9002313.91,418,5)
U1^8^^^33
"DATA",9002313.91,418,10,0)
^9002313.9101^1^1^3171117^^
"DATA",9002313.91,418,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,419,0)
926^^FORMULARY ID^A/N^^^^10^A/N
"DATA",9002313.91,419,5)
FF^10^^^33
"DATA",9002313.91,419,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,419,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,420,0)
757^^BENEFIT ID^A/N^^^^15^A/N
"DATA",9002313.91,420,5)
U6^15^^^33
"DATA",9002313.91,420,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,420,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,421,0)
140^^NEXT MEDICARE PART D EFF DATE^N^^^^8^N
"DATA",9002313.91,421,5)
US^8^^^33
"DATA",9002313.91,421,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,421,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,422,0)
141^^NEXT MEDICARE PART D TERM DATE^N^^^^8^N
"DATA",9002313.91,422,5)
UT^8^^^33
"DATA",9002313.91,422,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,422,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,423,0)
123^^PAY TO STATE/PROVINCE ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,423,1)
PAY TO STATE/ PROVINCE ADDRESS
"DATA",9002313.91,423,5)
TX^2^^8
"DATA",9002313.91,423,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,423,10,1,0)
S BPS("X")=""
"DATA",9002313.91,423,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,423,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,423,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,423,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,3)=""
"DATA",9002313.91,424,0)
579^^ASSOC RX/SERVICE PROV ID QUAL^A/N^^^^2^A/N
"DATA",9002313.91,424,1)
ASSOCIATED PRESCRIPTION / SERVICE PROVIDER ID QUALIFIER
"DATA",9002313.91,424,5)
XX^2^^4
"DATA",9002313.91,424,10,0)
^^1^1^3130311^
"DATA",9002313.91,424,10,1,0)
S BPS("X")=""
"DATA",9002313.91,424,20,0)
^9002313.9102^1^1^3130311^^^^
"DATA",9002313.91,424,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,424,25,0)
^9002313.9104^1^1^3130311^^^^
"DATA",9002313.91,424,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,424,30,0)
^9002313.9103^1^1^3130311^^^
"DATA",9002313.91,424,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),570),U,9)=$G(BPS("X"))
"DATA",9002313.91,425,0)
580^^ASSOC RX/SERVICE PROVIDER ID^A/N^^^^15^A/N
"DATA",9002313.91,425,1)
ASSOCIATED PRESCRIPTION / SERVICE PROVIDER ID
"DATA",9002313.91,425,5)
XY^15^^4
"DATA",9002313.91,425,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,425,10,1,0)
S BPS("X")=""
"DATA",9002313.91,425,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,425,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,425,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,425,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,425,30,0)
^^1^1^3130222^
"DATA",9002313.91,425,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),570),U,10)=BPS("X")
"DATA",9002313.91,426,0)
581^^ASSOC RX/SERVICE REF NUM QUAL^A/N^^^^2^A/N
"DATA",9002313.91,426,1)
ASSOCIATED PRESCRIPTION / SERVICE REFERENCE NUMBER QUALIFIER
"DATA",9002313.91,426,5)
XZ^2^^4
"DATA",9002313.91,426,10,0)
^^1^1^3130222^
"DATA",9002313.91,426,10,1,0)
S BPS("X")=""
"DATA",9002313.91,426,20,0)
^^1^1^3130222^
"DATA",9002313.91,426,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,426,25,0)
^^1^1^3130222^
"DATA",9002313.91,426,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,426,30,0)
^^1^1^3130222^
"DATA",9002313.91,426,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,1)=BPS("X")
"DATA",9002313.91,427,0)
582^^ASSOC RX/SERVICE FILL NUMBER^N^^^^2^N
"DATA",9002313.91,427,1)
ASSOCIATED PRESCRIPTION SERVICE FILL NUMBER
"DATA",9002313.91,427,5)
X0^2^^4
"DATA",9002313.91,427,10,0)
^^1^1^3130222^
"DATA",9002313.91,427,10,1,0)
S BPS("X")=""
"DATA",9002313.91,427,20,0)
^^1^1^3130222^
"DATA",9002313.91,427,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,427,25,0)
^^1^1^3130222^
"DATA",9002313.91,427,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,427,30,0)
^^1^1^3130222^
"DATA",9002313.91,427,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,2)=$G(BPS("X"))
"DATA",9002313.91,428,0)
583^^SERVICE PROVIDER NAME^A/N^^^^30^A/N
"DATA",9002313.91,428,1)
SERVICE PROVIDE NAME
"DATA",9002313.91,428,5)
YK^30^^19
"DATA",9002313.91,428,10,0)
^^1^1^3130228^
"DATA",9002313.91,428,10,1,0)
S BPS("X")=""
"DATA",9002313.91,428,20,0)
^^1^1^3130222^
"DATA",9002313.91,428,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,428,25,0)
^^1^1^3130222^
"DATA",9002313.91,428,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,428,30,0)
^^1^1^3130222^
"DATA",9002313.91,428,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,3)=BPS("X")
"DATA",9002313.91,429,0)
584^^SERVICE PROVIDER STREET^A/N^^^^30^A/N
"DATA",9002313.91,429,1)
SERVICE PROVIDER STREET ADDRESS
"DATA",9002313.91,429,5)
YM^30^^19
"DATA",9002313.91,429,10,0)
^^1^1^3130222^
"DATA",9002313.91,429,10,1,0)
S BPS("X")=""
"DATA",9002313.91,429,20,0)
^^1^1^3130222^
"DATA",9002313.91,429,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,429,25,0)
^^1^1^3130222^
"DATA",9002313.91,429,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,429,30,0)
^^1^1^3130222^
"DATA",9002313.91,429,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,4)=BPS("X")
"DATA",9002313.91,430,0)
585^^SERVICE PROVIDER CITY^A/N^^^^20^A/N
"DATA",9002313.91,430,1)
SERVICE PROVIDER CITY ADDRESS
"DATA",9002313.91,430,5)
YN^20^^19
"DATA",9002313.91,430,10,0)
^9002313.9101^1^1^3130228^^
"DATA",9002313.91,430,10,1,0)
S BPS("X")=""
"DATA",9002313.91,430,20,0)
^^1^1^3130222^
"DATA",9002313.91,430,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,430,25,0)
^^1^1^3130222^
"DATA",9002313.91,430,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,430,30,0)
^^1^1^3130222^
"DATA",9002313.91,430,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,5)=BPS("X")
"DATA",9002313.91,431,0)
586^^SERVICE PROVIDE STATE/PROVINCE^A/N^^^^2^A/N
"DATA",9002313.91,431,1)
SERVICE PROVIDER STATE/PROVINCE ADDRESS
"DATA",9002313.91,431,5)
YP^2^^19
"DATA",9002313.91,431,10,0)
^^1^1^3130222^
"DATA",9002313.91,431,10,1,0)
S BPS("X")=""
"DATA",9002313.91,431,20,0)
^^1^1^3130222^
"DATA",9002313.91,431,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,431,25,0)
^^1^1^3130222^
"DATA",9002313.91,431,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,431,30,0)
^^1^1^3130222^
"DATA",9002313.91,431,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,6)=BPS("X")
"DATA",9002313.91,432,0)
587^^SERVICE PROVIDER ZIP/POST CODE^A/N^^^^15^A/N
"DATA",9002313.91,432,1)
SERVICE PROVIDER ZIP/POSTAL CODE
"DATA",9002313.91,432,5)
YQ^15^^19
"DATA",9002313.91,432,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,432,10,1,0)
S BPS("X")=""
"DATA",9002313.91,432,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,432,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,432,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,432,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,432,30,0)
^^1^1^3130222^
"DATA",9002313.91,432,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,7)=BPS("X")
"DATA",9002313.91,433,0)
590^^SELLER INITIALS^A/N^^^^3^A/N
"DATA",9002313.91,433,1)
SELLER INITIALS
"DATA",9002313.91,433,5)
YT^3^^19
"DATA",9002313.91,433,10,0)
^^1^1^3130222^
"DATA",9002313.91,433,10,1,0)
S BPS("X")=BPS("Provider",MEDN,"Pharmacist Initials")
"DATA",9002313.91,433,20,0)
^9002313.9102^1^1^3130222^^^^
"DATA",9002313.91,433,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,433,25,0)
^9002313.9104^1^1^3130222^^^^
"DATA",9002313.91,433,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,433,30,0)
^9002313.9103^1^1^3130222^^^^
"DATA",9002313.91,433,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,10)=BPS("X")
"DATA",9002313.91,434,0)
591^^PURCHASER ID QUALIFIER^N^^^^2^N
"DATA",9002313.91,434,1)
PURCHASER ID QUALIFIER
"DATA",9002313.91,434,5)
YU^2^^18
"DATA",9002313.91,434,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,434,10,1,0)
S BPS("X")=""
"DATA",9002313.91,434,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,434,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,434,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,434,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,434,30,0)
^^1^1^3130222^
"DATA",9002313.91,434,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,1)=BPS("X")
"DATA",9002313.91,435,0)
592^^PURCHASER ID^A/N^^^^20^A/N
"DATA",9002313.91,435,1)
PURCHASER ID
"DATA",9002313.91,435,5)
YV^20^^18
"DATA",9002313.91,435,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,435,10,1,0)
S BPS("X")=""
"DATA",9002313.91,435,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,435,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,435,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,435,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,435,30,0)
^^1^1^3130222^
"DATA",9002313.91,435,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,2)=BPS("X")
"DATA",9002313.91,436,0)
593^^PURCHASER ID STATE/PROVINCE^A/N^^^^2^A/N
"DATA",9002313.91,436,1)
PURCHASER ID ASSOCIATED STATE/PROVINCE ADDRESS
"DATA",9002313.91,436,5)
YW^2^^18
"DATA",9002313.91,436,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,436,10,1,0)
S BPS("X")=""
"DATA",9002313.91,436,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,436,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,436,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,436,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,436,30,0)
^^1^1^3130222^
"DATA",9002313.91,436,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,3)=BPS("X")
"DATA",9002313.91,437,0)
594^^PURCHASER DATE OF BIRTH^N^^^^8^N
"DATA",9002313.91,437,1)
PURCHASER DATE OF BIRTH
"DATA",9002313.91,437,5)
YX^8^^18
"DATA",9002313.91,437,10,0)
^9002313.9101^1^1^3130228^^^
"DATA",9002313.91,437,10,1,0)
S BPS("X")=""
"DATA",9002313.91,437,20,0)
^^1^1^3130228^
"DATA",9002313.91,437,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,437,25,0)
^9002313.9104^1^1^3130228^^^
"DATA",9002313.91,437,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,437,30,0)
^9002313.9103^1^1^3130228^^
"DATA",9002313.91,437,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,4)=BPS("X")
"DATA",9002313.91,438,0)
595^^PURCHASER GENDER CODE^N^^^^1^N
"DATA",9002313.91,438,1)
PURCHASER GENDER CODE
"DATA",9002313.91,438,5)
YY^1^^18
"DATA",9002313.91,438,10,0)
^^1^1^3130228^
"DATA",9002313.91,438,10,1,0)
S BPS("X")=""
"DATA",9002313.91,438,20,0)
^^1^1^3130222^
"DATA",9002313.91,438,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,438,25,0)
^^1^1^3130222^
"DATA",9002313.91,438,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,438,30,0)
^^1^1^3130222^
"DATA",9002313.91,438,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,5)=BPS("X")
"DATA",9002313.91,439,0)
596^^PURCHASER FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,439,1)
PURCHASER FIRST NAME
"DATA",9002313.91,439,5)
YZ^12^^18
"DATA",9002313.91,439,10,0)
^^1^1^3130222^
"DATA",9002313.91,439,10,1,0)
S BPS("X")=""
"DATA",9002313.91,439,20,0)
^^1^1^3130222^
"DATA",9002313.91,439,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,439,25,0)
^^1^1^3130222^
"DATA",9002313.91,439,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,439,30,0)
^^1^1^3130222^
"DATA",9002313.91,439,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,6)=BPS("X")
"DATA",9002313.91,440,0)
597^^PURCHASER LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,440,1)
PURCHASER LAST NAME
"DATA",9002313.91,440,5)
Y0^15^^18
"DATA",9002313.91,440,10,0)
^9002313.9101^1^1^3130403^^
"DATA",9002313.91,440,10,1,0)
S BPS("X")=""
"DATA",9002313.91,440,20,0)
^9002313.9102^1^1^3130403^^
"DATA",9002313.91,440,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,440,25,0)
^9002313.9104^1^1^3130403^^
"DATA",9002313.91,440,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,440,30,0)
^9002313.9103^1^1^3130403^^
"DATA",9002313.91,440,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,7)=BPS("X")
"DATA",9002313.91,441,0)
598^^PURCHASER STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,441,1)
PURCHASER STREET ADDRESS
"DATA",9002313.91,441,5)
Y1^30^^18
"DATA",9002313.91,441,10,0)
^^1^1^3130222^
"DATA",9002313.91,441,10,1,0)
S BPS("X")=""
"DATA",9002313.91,441,20,0)
^^1^1^3130222^
"DATA",9002313.91,441,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,441,25,0)
^^1^1^3130222^
"DATA",9002313.91,441,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,441,30,0)
^^1^1^3130222^
"DATA",9002313.91,441,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,8)=BPS("X")
"DATA",9002313.91,442,0)
599^^PURCHASER CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,442,1)
PURCHASER CITY ADDRESS
"DATA",9002313.91,442,5)
Y2^20^^18
"DATA",9002313.91,442,10,0)
^^1^1^3130222^
"DATA",9002313.91,442,10,1,0)
S BPS("X")=""
"DATA",9002313.91,442,20,0)
^^1^1^3130222^
"DATA",9002313.91,442,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,442,25,0)
^^1^1^3130222^
"DATA",9002313.91,442,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,442,30,0)
^^1^1^3130222^
"DATA",9002313.91,442,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,9)=BPS("X")
"DATA",9002313.91,443,0)
675^^PURCHASER STATE/PROVINCE CODE^A/N^^^^2^A/N
"DATA",9002313.91,443,1)
PURCHASER ADDRESS STATE/PROVINCE CODE
"DATA",9002313.91,443,5)
Y3^2^^18
"DATA",9002313.91,443,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,443,10,1,0)
S BPS("X")=""
"DATA",9002313.91,443,20,0)
^^1^1^3130222^
"DATA",9002313.91,443,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,443,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,443,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,443,30,0)
^^1^1^3130222^
"DATA",9002313.91,443,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,5)=BPS("X")
"DATA",9002313.91,444,0)
676^^PURCHASER ZIP/POSTAL CODE^A/N^^^^15^A/N
"DATA",9002313.91,444,1)
PURCHASER ZIP/POSTAL CODE
"DATA",9002313.91,444,5)
Y4^15^^18
"DATA",9002313.91,444,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,444,10,1,0)
S BPS("X")=""
"DATA",9002313.91,444,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,444,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,444,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,444,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,444,30,0)
^9002313.9103^1^1^3130222^^^
"DATA",9002313.91,444,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,6)=BPS("X")
"DATA",9002313.91,445,0)
677^^PURCHASER COUNTRY CODE^A/N^^^^2^A/N
"DATA",9002313.91,445,1)
PURCHASER COUNTRY CODE
"DATA",9002313.91,445,5)
Y5^2^^18
"DATA",9002313.91,445,10,0)
^^1^1^3130222^
"DATA",9002313.91,445,10,1,0)
S BPS("X")=""
"DATA",9002313.91,445,20,0)
^^1^1^3130222^
"DATA",9002313.91,445,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,445,25,0)
^^1^1^3130222^
"DATA",9002313.91,445,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,445,30,0)
^^1^1^3130222^
"DATA",9002313.91,445,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,7)=BPS("X")
"DATA",9002313.91,446,0)
678^^TIME OF SERVICE^N^^^^6^N
"DATA",9002313.91,446,1)
TIME OF SERVICE
"DATA",9002313.91,446,5)
Y6^6^^4
"DATA",9002313.91,446,10,0)
^^1^1^3130222^
"DATA",9002313.91,446,10,1,0)
S BPS("X")=BPS("Claim",MEDN,"Time of Service")
"DATA",9002313.91,446,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,446,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,446,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,446,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,446,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,446,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,8)=BPS("X")
"DATA",9002313.91,447,0)
679^^SELLER ID^A/N^^^^70^A/N
"DATA",9002313.91,447,1)
SELLER ID
"DATA",9002313.91,447,5)
Y9^70^^19
"DATA",9002313.91,447,10,0)
^^1^1^3130222^
"DATA",9002313.91,447,10,1,0)
S BPS("X")=BPS("Provider",MEDN,"Pharmacist ID")
"DATA",9002313.91,447,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,447,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),70)
"DATA",9002313.91,447,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,447,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),70)
"DATA",9002313.91,447,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,447,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,9)=BPS("X")
"DATA",9002313.91,448,0)
680^^SELLER ID QUALIFIER^N^^^^2^N
"DATA",9002313.91,448,1)
SELLER ID QUALIFIER
"DATA",9002313.91,448,5)
ZB^2^^19
"DATA",9002313.91,448,10,0)
^^1^1^3130226^
"DATA",9002313.91,448,10,1,0)
S BPS("X")="01"
"DATA",9002313.91,448,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,448,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,448,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,448,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,448,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,448,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,10)=BPS("X")
"DATA",9002313.91,449,0)
681^^SALES TRANSACTION ID^A/N^^^^80^A/N
"DATA",9002313.91,449,1)
SALES TRANSACTION ID
"DATA",9002313.91,449,5)
ZF^80^^4
"DATA",9002313.91,449,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,449,10,1,0)
S BPS("X")=""
"DATA",9002313.91,449,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,449,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),80)
"DATA",9002313.91,449,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,449,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),80)
"DATA",9002313.91,449,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,449,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),680),U,1)=BPS("X")
"DATA",9002313.91,450,0)
A22^^PATIENT ID STATE/PROVINCE^A/N^^^^2^A/N
"DATA",9002313.91,450,1)
PATIENT ID ASSOCIATED STATE/PROVINCE ADDRESS
"DATA",9002313.91,450,5)
YR^2^1022^2
"DATA",9002313.91,450,10,0)
^^1^1^3130222^
"DATA",9002313.91,450,10,1,0)
S BPS("X")=""
"DATA",9002313.91,450,20,0)
^^1^1^3130222^
"DATA",9002313.91,450,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,450,25,0)
^^1^1^3130222^
"DATA",9002313.91,450,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,450,30,0)
^^1^1^3130227^
"DATA",9002313.91,450,30,1,0)
S $P(^BPSC(BPS(9002313.02),"A20"),U,2)=BPS("X")
"DATA",9002313.91,451,0)
A23^^PURCHASER RELATIONSHIP CODE^A/N^^^^2^A/N
"DATA",9002313.91,451,1)
PURCHASER RELATIONSHIP CODE
"DATA",9002313.91,451,5)
YS^2^1023^18
"DATA",9002313.91,451,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,451,10,1,0)
S BPS("X")=""
"DATA",9002313.91,451,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,451,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,451,25,0)
^^1^1^3130222^
"DATA",9002313.91,451,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,451,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,451,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,3)=BPS("X")
"DATA",9002313.91,452,0)
A24^^PRESCRIBER ID STATE/PROVINCE^A/N^^^^2^A/N
"DATA",9002313.91,452,1)
PRESCRIBER ID ASSOCIATED STATE/PROVINCE CODE
"DATA",9002313.91,452,5)
ZK^2^1024^6
"DATA",9002313.91,452,10,0)
^^1^1^3130222^
"DATA",9002313.91,452,10,1,0)
S BPS("X")=""
"DATA",9002313.91,452,20,0)
^^1^1^3130222^
"DATA",9002313.91,452,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,452,25,0)
^^1^1^3130222^
"DATA",9002313.91,452,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,452,30,0)
^^1^1^3130222^
"DATA",9002313.91,452,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,4)=BPS("X")
"DATA",9002313.91,453,0)
A25^^PRESCRIBER ALTERNATE ID QUAL^A/N^^^^2^A/N
"DATA",9002313.91,453,1)
PRESCRIBER ALTERNATE ID QUALIFIER
"DATA",9002313.91,453,5)
ZM^2^1025^6
"DATA",9002313.91,453,10,0)
^^1^1^3130227^
"DATA",9002313.91,453,10,1,0)
S BPS("X")=""
"DATA",9002313.91,453,20,0)
^^1^1^3130222^
"DATA",9002313.91,453,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,453,25,0)
^^1^1^3130222^
"DATA",9002313.91,453,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,453,30,0)
^9002313.9103^1^1^3130227^^
"DATA",9002313.91,453,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,5)=BPS("X")
"DATA",9002313.91,454,0)
A26^^PRESCRIBER ALTERNATE ID^A/N^^^^15^A/N
"DATA",9002313.91,454,1)
PRESCRIBER ALTERNATE ID
"DATA",9002313.91,454,5)
ZP^15^1026^6
"DATA",9002313.91,454,10,0)
^^1^1^3130222^
"DATA",9002313.91,454,10,1,0)
S BPS("X")=""
"DATA",9002313.91,454,20,0)
^^1^1^3130222^
"DATA",9002313.91,454,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,454,25,0)
^^1^1^3130222^
"DATA",9002313.91,454,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,454,30,0)
^^1^1^3130222^
"DATA",9002313.91,454,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,6)=BPS("X")
"DATA",9002313.91,455,0)
A27^^PRESCRIBER ALTERNATE STATE^A/N^^^^2^A/N
"DATA",9002313.91,455,1)
PRESCRIBER ALTERNATE ID ASSOCIATED STATE/PROVINCE ADDRESS
"DATA",9002313.91,455,5)
ZQ^2^1027^6
"DATA",9002313.91,455,10,0)
^^1^1^3130222^
"DATA",9002313.91,455,10,1,0)
S BPS("X")=""
"DATA",9002313.91,455,20,0)
^^1^1^3130222^
"DATA",9002313.91,455,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,455,25,0)
^^1^1^3130222^
"DATA",9002313.91,455,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,455,30,0)
^^1^1^3130222^
"DATA",9002313.91,455,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,7)=BPS("X")
"DATA",9002313.91,456,0)
A28^^ADJUDICATED PAYMENT TYPE^N^^^^2^N
"DATA",9002313.91,456,1)
ADJUDICATED PAYMENT TYPE
"DATA",9002313.91,456,5)
ZR^2^1028^^26
"DATA",9002313.91,456,10,0)
^^1^1^3130222^
"DATA",9002313.91,456,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,457,0)
A29^^REPORTED PAYMENT TYPE^N^^^^2^N
"DATA",9002313.91,457,1)
REPORTED PAYMENT TYPE
"DATA",9002313.91,457,5)
ZS^2^1029^4
"DATA",9002313.91,457,10,0)
^^1^1^3130222^
"DATA",9002313.91,457,10,1,0)
S BPS("X")=""
"DATA",9002313.91,457,20,0)
^^1^1^3130222^
"DATA",9002313.91,457,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,457,25,0)
^^1^1^3130222^
"DATA",9002313.91,457,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,457,30,0)
^^1^1^3130222^
"DATA",9002313.91,457,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,9)=BPS("X")
"DATA",9002313.91,458,0)
A30^^RELEASED DATE^N^^^^8^N
"DATA",9002313.91,458,1)
RELEASED DATE
"DATA",9002313.91,458,5)
ZT^8^1030^18
"DATA",9002313.91,458,10,0)
^^1^1^3130222^
"DATA",9002313.91,458,10,1,0)
S BPS("X")=""
"DATA",9002313.91,458,20,0)
^^1^1^3130222^
"DATA",9002313.91,458,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,458,25,0)
^^1^1^3130222^
"DATA",9002313.91,458,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,458,30,0)
^^1^1^3130222^
"DATA",9002313.91,458,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,10)=BPS("X")
"DATA",9002313.91,459,0)
A31^^RELEASED TIME^N^^^^6^N
"DATA",9002313.91,459,1)
RELEASED TIME
"DATA",9002313.91,459,5)
ZU^6^1031^18
"DATA",9002313.91,459,10,0)
^^1^1^3130228^
"DATA",9002313.91,459,10,1,0)
S BPS("X")=""
"DATA",9002313.91,459,20,0)
^^1^1^3130222^
"DATA",9002313.91,459,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,459,25,0)
^^1^1^3130222^
"DATA",9002313.91,459,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,459,30,0)
^^1^1^3130222^
"DATA",9002313.91,459,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A30"),U,1)=BPS("X")
"DATA",9002313.91,460,0)
A32^^COMPOUND PREPARATION TIME^N^^^^4^N
"DATA",9002313.91,460,1)
COMPOUND PREPARATION TIME
"DATA",9002313.91,460,5)
ZW^4^1032^12
"DATA",9002313.91,460,10,0)
^^1^1^3130222^
"DATA",9002313.91,460,10,1,0)
S BPS("X")=""
"DATA",9002313.91,460,20,0)
^^1^1^3130222^
"DATA",9002313.91,460,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,460,25,0)
^^1^1^3130222^
"DATA",9002313.91,460,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,460,30,0)
^^1^1^3130222^
"DATA",9002313.91,460,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A30"),U,2)=BPS("X")
"DATA",9002313.91,461,0)
A43^^PATIENT COUNTRY CODE^A/N^^^^2^A/N
"DATA",9002313.91,461,1)
PATIENT COUNTRY CODE
"DATA",9002313.91,461,5)
1K^2^1043^2
"DATA",9002313.91,461,10,0)
^^1^1^3130222^
"DATA",9002313.91,461,10,1,0)
S BPS("X")=""
"DATA",9002313.91,461,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,461,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,461,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,461,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,461,30,0)
^^1^1^3130227^
"DATA",9002313.91,461,30,1,0)
S $P(^BPSC(BPS(9002313.02),"A40"),U,3)=BPS("X")
"DATA",9002313.91,462,0)
A45^^VETERINARY USE INDICATOR^A/N^^^^1^A/N
"DATA",9002313.91,462,1)
VETERINARY USE INDICATOR
"DATA",9002313.91,462,5)
1R^1^1045^2
"DATA",9002313.91,462,10,0)
^^1^1^3130222^
"DATA",9002313.91,462,10,1,0)
S BPS("X")=""
"DATA",9002313.91,462,20,0)
^^1^1^3130222^
"DATA",9002313.91,462,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,462,25,0)
^^1^1^3130222^
"DATA",9002313.91,462,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,462,30,0)
^^1^1^3130227^
"DATA",9002313.91,462,30,1,0)
S $P(^BPSC(BPS(9002313.02),"A40"),U,5)=BPS("X")
"DATA",9002313.91,463,0)
B04^^NEXT AVAILABLE FILL DATE^N^^^^8^N
"DATA",9002313.91,463,1)
NEXT AVAILABLE FILL DATE
"DATA",9002313.91,463,5)
BT^8^2004^^26
"DATA",9002313.91,463,10,0)
^^1^1^3130222^
"DATA",9002313.91,463,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,464,0)
B08^^PATIENT STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,464,5)
7A^^2008^2
"DATA",9002313.91,464,10,0)
^^1^1^3150112^
"DATA",9002313.91,464,10,1,0)
S BPS("X")=$G(BPS("Patient","Street Address Line 1"))
"DATA",9002313.91,464,20,0)
^^1^1^3141223
"DATA",9002313.91,464,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,464,30,0)
^^1^1^3141223
"DATA",9002313.91,464,30,1,0)
S $P(^BPSC(BPS(9002313.02),"B00"),U,8)=BPS("X")
"DATA",9002313.91,465,0)
B09^^PATIENT STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,465,5)
7B^^2009^2
"DATA",9002313.91,465,10,0)
^^1^1^3150112^
"DATA",9002313.91,465,10,1,0)
S BPS("X")=$G(BPS("Patient","Street Address Line 2"))
"DATA",9002313.91,465,20,0)
^^1^1^3141223
"DATA",9002313.91,465,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,465,30,0)
^^1^1^3141223
"DATA",9002313.91,465,30,1,0)
S $P(^BPSC(BPS(9002313.02),"B00"),U,9)=BPS("X")
"DATA",9002313.91,466,0)
B38^^PATIENT ID ASSOC COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,466,1)
PATIENT ID ASSOCIATED COUNTRY CODE
"DATA",9002313.91,466,5)
1Y^^2038^2
"DATA",9002313.91,466,10,0)
^^1^1^3141223
"DATA",9002313.91,466,10,1,0)
S BPS("X")="US"
"DATA",9002313.91,466,20,0)
^^1^1^3141223
"DATA",9002313.91,466,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,466,30,0)
^^1^1^3141223
"DATA",9002313.91,466,30,1,0)
S $P(^BPSC(BPS(9002313.02),"B30"),U,8)=BPS("X")
"DATA",9002313.91,467,0)
B26^^PRESCRIBER PHONE NUMBER EXT^^^^^8^N
"DATA",9002313.91,467,1)
PRESCRIBER TELEPHONE NUMBER EXTENSION
"DATA",9002313.91,467,5)
7T^^2026^6
"DATA",9002313.91,467,10,0)
^^1^1^3141223
"DATA",9002313.91,467,10,1,0)
S BPS("X")=""
"DATA",9002313.91,467,20,0)
^^1^1^3141223
"DATA",9002313.91,467,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,467,30,0)
^^1^1^3141223
"DATA",9002313.91,467,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,6)=BPS("X")
"DATA",9002313.91,468,0)
B27^^PRESCRIBER STREET ADDR LINE 1^^^^^40^A/N
"DATA",9002313.91,468,1)
PRESCRIBER STREET ADDRESS LINE 1
"DATA",9002313.91,468,5)
7U^^2027^6
"DATA",9002313.91,468,10,0)
^^1^1^3150112^
"DATA",9002313.91,468,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Street Address Line 1"))
"DATA",9002313.91,468,20,0)
^^1^1^3141223
"DATA",9002313.91,468,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,468,30,0)
^^1^1^3141223
"DATA",9002313.91,468,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,7)=BPS("X")
"DATA",9002313.91,469,0)
B28^^PRESCRIBER STREET ADDR LINE 2^^^^^40^A/N
"DATA",9002313.91,469,1)
PRESCRIBER STREET ADDRESS LINE 2
"DATA",9002313.91,469,5)
7V^^2028^6
"DATA",9002313.91,469,10,0)
^^1^1^3150112^
"DATA",9002313.91,469,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Street Address Line 2"))
"DATA",9002313.91,469,20,0)
^^1^1^3141223
"DATA",9002313.91,469,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,469,30,0)
^^1^1^3141223
"DATA",9002313.91,469,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,8)=BPS("X")
"DATA",9002313.91,470,0)
B40^^PRES ALT ID ASSOC COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,470,1)
PRESCRIBER ALTERNATE ID ASSOCIATED COUNTRY CODE
"DATA",9002313.91,470,5)
3A^^2040^6
"DATA",9002313.91,470,10,0)
^^1^1^3141223
"DATA",9002313.91,470,10,1,0)
S BPS("X")=""
"DATA",9002313.91,470,20,0)
^^1^1^3141223
"DATA",9002313.91,470,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,470,30,0)
^^1^1^3141223
"DATA",9002313.91,470,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,10)=BPS("X")
"DATA",9002313.91,471,0)
B41^^PRES ID ASSOC COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,471,1)
PRESCRIBER ID ASSOCIATED COUNTRY CODE
"DATA",9002313.91,471,5)
3B^^2041^6
"DATA",9002313.91,471,10,0)
^9002313.9101^1^1^3150112^
"DATA",9002313.91,471,10,1,0)
S BPS("X")="US"
"DATA",9002313.91,471,20,0)
^^1^1^3141223
"DATA",9002313.91,471,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,471,30,0)
^^1^1^3141223
"DATA",9002313.91,471,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B40"),U,1)=BPS("X")
"DATA",9002313.91,472,0)
B42^^PRESCRIBER COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,472,5)
3C^^2042^6
"DATA",9002313.91,472,10,0)
^^1^1^3150112^
"DATA",9002313.91,472,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Country"))
"DATA",9002313.91,472,20,0)
^^1^1^3141223
"DATA",9002313.91,472,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,472,30,0)
^^1^1^3141223
"DATA",9002313.91,472,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B40"),U,2)=BPS("X")
"DATA",9002313.91,473,0)
B15^^EMPLOYER STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,473,5)
8D^^2015^8
"DATA",9002313.91,473,10,0)
^^1^1^3141223
"DATA",9002313.91,473,10,1,0)
S BPS("X")=""
"DATA",9002313.91,473,20,0)
^^1^1^3141223
"DATA",9002313.91,473,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,473,30,0)
^^1^1^3141223
"DATA",9002313.91,473,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,5)=BPS("X")
"DATA",9002313.91,474,0)
B16^^EMPLOYER STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,474,5)
7G^^2016^8
"DATA",9002313.91,474,10,0)
^^1^1^3141223
"DATA",9002313.91,474,10,1,0)
S BPS("X")=""
"DATA",9002313.91,474,20,0)
^^1^1^3141223
"DATA",9002313.91,474,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,474,30,0)
^^1^1^3141223
"DATA",9002313.91,474,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,6)=BPS("X")
"DATA",9002313.91,475,0)
B17^^EMPLOYER CONTACT FIRST NAME^^^^^35^A/N
"DATA",9002313.91,475,5)
7H^^2017^8
"DATA",9002313.91,475,10,0)
^^1^1^3141223
"DATA",9002313.91,475,10,1,0)
S BPS("X")=""
"DATA",9002313.91,475,20,0)
^^1^1^3141223
"DATA",9002313.91,475,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),35)
"DATA",9002313.91,475,30,0)
^^1^1^3141223
"DATA",9002313.91,475,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,7)=BPS("X")
"DATA",9002313.91,476,0)
B18^^EMPLOYER CONTACT LAST NAME^^^^^35^A/N
"DATA",9002313.91,476,5)
7J^^2018^8
"DATA",9002313.91,476,10,0)
^^1^1^3141223
"DATA",9002313.91,476,10,1,0)
S BPS("X")=""
"DATA",9002313.91,476,20,0)
^^1^1^3141223
"DATA",9002313.91,476,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),35)
"DATA",9002313.91,476,30,0)
^^1^1^3141223
"DATA",9002313.91,476,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,8)=BPS("X")
"DATA",9002313.91,477,0)
B19^^EMPLOYER PHONE NUMBER EXT^^^^^8^N
"DATA",9002313.91,477,1)
EMPLOYER TELEPHONE NUMBER EXTENSION
"DATA",9002313.91,477,5)
7K^^2019^8
"DATA",9002313.91,477,10,0)
^^1^1^3141223
"DATA",9002313.91,477,10,1,0)
S BPS("X")=""
"DATA",9002313.91,477,20,0)
^^1^1^3141223
"DATA",9002313.91,477,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,477,30,0)
^^1^1^3141223
"DATA",9002313.91,477,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,9)=BPS("X")
"DATA",9002313.91,478,0)
B24^^PAY TO STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,478,5)
7R^^2024^8
"DATA",9002313.91,478,10,0)
^^1^1^3141223
"DATA",9002313.91,478,10,1,0)
S BPS("X")=""
"DATA",9002313.91,478,20,0)
^^1^1^3141223
"DATA",9002313.91,478,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,478,30,0)
^^1^1^3141223
"DATA",9002313.91,478,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,4)=BPS("X")
"DATA",9002313.91,479,0)
B25^^PAY TO STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,479,5)
7S^^2025^8
"DATA",9002313.91,479,10,0)
^^1^1^3141223
"DATA",9002313.91,479,10,1,0)
S BPS("X")=""
"DATA",9002313.91,479,20,0)
^^1^1^3141223
"DATA",9002313.91,479,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,479,30,0)
^^1^1^3141223
"DATA",9002313.91,479,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,5)=BPS("X")
"DATA",9002313.91,480,0)
B35^^EMPLOYER COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,480,5)
1V^^2035^8
"DATA",9002313.91,480,10,0)
^^1^1^3141223
"DATA",9002313.91,480,10,1,0)
S BPS("X")=""
"DATA",9002313.91,480,20,0)
^^1^1^3141223
"DATA",9002313.91,480,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,480,30,0)
^^1^1^3141223
"DATA",9002313.91,480,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,5)=BPS("X")
"DATA",9002313.91,481,0)
B39^^PAY TO COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,481,5)
1Z^^2039^8
"DATA",9002313.91,481,10,0)
^^1^1^3141223
"DATA",9002313.91,481,10,1,0)
S BPS("X")=""
"DATA",9002313.91,481,20,0)
^^1^1^3141223
"DATA",9002313.91,481,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,481,30,0)
^^1^1^3141223
"DATA",9002313.91,481,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,9)=BPS("X")
"DATA",9002313.91,482,0)
B13^^AUTH REP STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,482,1)
AUTHORIZED REPRESENTATIVE STREET ADDRESS LINE 1
"DATA",9002313.91,482,5)
7D^^2013^13
"DATA",9002313.91,482,10,0)
^9002313.9101^1^1^3150112^
"DATA",9002313.91,482,10,1,0)
S BPS("X")=""
"DATA",9002313.91,482,20,0)
^9002313.9102^1^1^3150112^
"DATA",9002313.91,482,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,482,30,0)
^9002313.9103^1^1^3150112^
"DATA",9002313.91,482,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,3)=BPS("X")
"DATA",9002313.91,483,0)
B14^^AUTH REP STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,483,1)
AUTHORIZED REPRESENTATIVE STREET ADDRESS LINE 2
"DATA",9002313.91,483,5)
8B^^2014^13
"DATA",9002313.91,483,10,0)
^^1^1^3141223
"DATA",9002313.91,483,10,1,0)
S BPS("X")=""
"DATA",9002313.91,483,20,0)
^^1^1^3141223
"DATA",9002313.91,483,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,483,30,0)
^^1^1^3141223
"DATA",9002313.91,483,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,4)=BPS("X")
"DATA",9002313.91,484,0)
B34^^AUTH REP COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,484,1)
AUTHORIZED REPRESENTATIVE COUNTRY CODE
"DATA",9002313.91,484,5)
1U^^2034^13
"DATA",9002313.91,484,10,0)
^^1^1^3141223
"DATA",9002313.91,484,10,1,0)
S BPS("X")=""
"DATA",9002313.91,484,20,0)
^^1^1^3141223
"DATA",9002313.91,484,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,484,30,0)
^^1^1^3141223
"DATA",9002313.91,484,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,4)=BPS("X")
"DATA",9002313.91,485,0)
B20^^FACILITY STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,485,5)
7M^^2020^16
"DATA",9002313.91,485,10,0)
^^1^1^3141223
"DATA",9002313.91,485,10,1,0)
S BPS("X")=""
"DATA",9002313.91,485,20,0)
^^1^1^3141223
"DATA",9002313.91,485,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,485,30,0)
^^1^1^3141223
"DATA",9002313.91,485,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,10)=BPS("X")
"DATA",9002313.91,486,0)
B21^^FACILITY STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,486,5)
7N^^2021^16
"DATA",9002313.91,486,10,0)
^^1^1^3141223
"DATA",9002313.91,486,10,1,0)
S BPS("X")=""
"DATA",9002313.91,486,20,0)
^^1^1^3141223
"DATA",9002313.91,486,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,486,30,0)
^^1^1^3141223
"DATA",9002313.91,486,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,1)=BPS("X")
"DATA",9002313.91,487,0)
B37^^FACILITY COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,487,5)
1X^^2037^16
"DATA",9002313.91,487,10,0)
^^1^1^3141223
"DATA",9002313.91,487,10,1,0)
S BPS("X")=""
"DATA",9002313.91,487,20,0)
^^1^1^3141223
"DATA",9002313.91,487,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,487,30,0)
^^1^1^3141223
"DATA",9002313.91,487,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,7)=BPS("X")
"DATA",9002313.91,488,0)
B29^^PURCHASER STREET ADDRESS LINE1^^^^^40^A/N
"DATA",9002313.91,488,1)
PURCHASER STREET ADDRESS LINE 1
"DATA",9002313.91,488,5)
7W^^2029^18
"DATA",9002313.91,488,10,0)
^^1^1^3141223
"DATA",9002313.91,488,10,1,0)
S BPS("X")=""
"DATA",9002313.91,488,20,0)
^^1^1^3141223
"DATA",9002313.91,488,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,488,30,0)
^^1^1^3141223
"DATA",9002313.91,488,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,9)=BPS("X")
"DATA",9002313.91,489,0)
B30^^PURCHASER STREET ADDRESS LINE2^^^^^40^A/N
"DATA",9002313.91,489,1)
PURCHASER STREET ADDRESS LINE 2
"DATA",9002313.91,489,5)
7X^^2030^18
"DATA",9002313.91,489,10,0)
^^1^1^3141223
"DATA",9002313.91,489,10,1,0)
S BPS("X")=""
"DATA",9002313.91,489,20,0)
^^1^1^3141223
"DATA",9002313.91,489,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,489,30,0)
^^1^1^3141223
"DATA",9002313.91,489,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,10)=BPS("X")
"DATA",9002313.91,490,0)
B43^^PURCHASER ID ASSOC COUNTRY CD^^^^^2^A/N
"DATA",9002313.91,490,1)
PURCHASER ID ASSOCIATED COUNTRY CODE
"DATA",9002313.91,490,5)
3D^^2043^18
"DATA",9002313.91,490,10,0)
^^1^1^3141223
"DATA",9002313.91,490,10,1,0)
S BPS("X")=""
"DATA",9002313.91,490,20,0)
^^1^1^3141223
"DATA",9002313.91,490,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,490,30,0)
^^1^1^3141223
"DATA",9002313.91,490,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B40"),U,3)=BPS("X")
"DATA",9002313.91,491,0)
B31^^SERVICE PROV STREET ADD LINE 1^^^^^40^A/N
"DATA",9002313.91,491,1)
SERVICE PROVIDER STREET ADDRESS LINE 1
"DATA",9002313.91,491,5)
7Y^^2031^19
"DATA",9002313.91,491,10,0)
^^1^1^3141223
"DATA",9002313.91,491,10,1,0)
S BPS("X")=""
"DATA",9002313.91,491,20,0)
^^1^1^3141223
"DATA",9002313.91,491,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,491,30,0)
^^1^1^3141223
"DATA",9002313.91,491,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,1)=BPS("X")
"DATA",9002313.91,492,0)
B32^^SERVICE PROV STREET ADD LINE 2^^^^^40^A/N
"DATA",9002313.91,492,1)
SERVICE PROVIDER STREET ADDRESS LINE 2
"DATA",9002313.91,492,5)
7Z^^2032^19
"DATA",9002313.91,492,10,0)
^^1^1^3141223
"DATA",9002313.91,492,10,1,0)
S BPS("X")=""
"DATA",9002313.91,492,20,0)
^^1^1^3141223
"DATA",9002313.91,492,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,492,30,0)
^^1^1^3141223
"DATA",9002313.91,492,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,2)=BPS("X")
"DATA",9002313.91,493,0)
A93^^SERVICE PROVIDER COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,493,5)
1T^^1093^19
"DATA",9002313.91,493,10,0)
^^1^1^3141223
"DATA",9002313.91,493,10,1,0)
S BPS("X")=""
"DATA",9002313.91,493,20,0)
^^1^1^3141223
"DATA",9002313.91,493,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,493,30,0)
^^1^1^3141223
"DATA",9002313.91,493,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A90"),U,3)=BPS("X")
"DATA",9002313.91,494,0)
B44^^INTERMEDIARY ID COUNT^^^^^1^N
"DATA",9002313.91,494,5)
8G^^2044^20
"DATA",9002313.91,494,10,0)
^^1^1^3141223
"DATA",9002313.91,494,10,1,0)
S BPS("X")=""
"DATA",9002313.91,494,20,0)
^^1^1^3141223
"DATA",9002313.91,494,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,494,30,0)
^^1^1^3141223
"DATA",9002313.91,494,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B40"),U,4)=BPS("X")
"DATA",9002313.91,495,0)
B45^^INTERMEDIARY ID TYPE CODE^^^^^2^A/N
"DATA",9002313.91,495,5)
8H^^2045^20
"DATA",9002313.91,495,10,0)
^^1^1^3141223
"DATA",9002313.91,495,10,1,0)
S BPS("X")=""
"DATA",9002313.91,495,20,0)
^^1^1^3141223
"DATA",9002313.91,495,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,496,0)
B46^^INTERMEDIARY ID TYPE ENTITY^^^^^2^A/N
"DATA",9002313.91,496,5)
8J^^2046^20
"DATA",9002313.91,496,10,0)
^^1^1^3141223
"DATA",9002313.91,496,10,1,0)
S BPS("X")=""
"DATA",9002313.91,496,20,0)
^^1^1^3141223
"DATA",9002313.91,496,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,497,0)
B47^^INTERMEDIARY ID QUALIFIER^^^^^2^A/N
"DATA",9002313.91,497,5)
8K^^2047^20
"DATA",9002313.91,497,10,0)
^^1^1^3141223
"DATA",9002313.91,497,10,1,0)
S BPS("X")=""
"DATA",9002313.91,497,20,0)
^^1^1^3141223
"DATA",9002313.91,497,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,498,0)
B48^^INTERMEDIARY ID^^^^^20^A/N
"DATA",9002313.91,498,5)
8M^^2048^20
"DATA",9002313.91,498,10,0)
^^1^1^3141223
"DATA",9002313.91,498,10,1,0)
S BPS("X")=""
"DATA",9002313.91,498,20,0)
^^1^1^3141223
"DATA",9002313.91,498,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,499,0)
B49^^INTERMEDIARY ID STATE/PROV ADD^^^^^2^A/N
"DATA",9002313.91,499,1)
INTERMEDIARY ID STATE/PROVINCE ADDRESS
"DATA",9002313.91,499,5)
8N^^2049^20
"DATA",9002313.91,499,10,0)
^9002313.9101^1^1^3141231^
"DATA",9002313.91,499,10,1,0)
S BPS("X")=""
"DATA",9002313.91,499,20,0)
^9002313.9102^1^1^3141231^
"DATA",9002313.91,499,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,500,0)
B55^^INTERMEDIARY ID COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,500,5)
8U^^2055^20
"DATA",9002313.91,500,10,0)
^^1^1^3141223
"DATA",9002313.91,500,10,1,0)
S BPS("X")=""
"DATA",9002313.91,500,20,0)
^^1^1^3141223
"DATA",9002313.91,500,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,501,0)
B50^^INTERMEDIARY ID RELATION CODE^^^^^1^N
"DATA",9002313.91,501,1)
INTERMEDIARY ID RELATIONSHIP CODE
"DATA",9002313.91,501,5)
8P^^2050^20
"DATA",9002313.91,501,10,0)
^^1^1^3141223
"DATA",9002313.91,501,10,1,0)
S BPS("X")=""
"DATA",9002313.91,501,20,0)
^^1^1^3141223
"DATA",9002313.91,501,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,502,0)
B56^^LAST KNOWN BIN NUMBER^^^^^6^N
"DATA",9002313.91,502,5)
3E^^2056^21
"DATA",9002313.91,502,10,0)
^^1^1^3141223
"DATA",9002313.91,502,10,1,0)
S BPS("X")=""
"DATA",9002313.91,502,20,0)
^^1^1^3141223
"DATA",9002313.91,502,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,502,30,0)
^^1^1^3141223
"DATA",9002313.91,502,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,6)=BPS("X")
"DATA",9002313.91,503,0)
B57^^LAST KNOWN PROCESSOR CNTRL NUM^^^^^10^A/N
"DATA",9002313.91,503,1)
LAST KNOWN PROCESSOR CONTROL NUMBER
"DATA",9002313.91,503,5)
3F^^2057^21
"DATA",9002313.91,503,10,0)
^^1^1^3141223
"DATA",9002313.91,503,10,1,0)
S BPS("X")=""
"DATA",9002313.91,503,20,0)
^^1^1^3141223
"DATA",9002313.91,503,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,503,30,0)
^^1^1^3141223
"DATA",9002313.91,503,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,7)=BPS("X")
"DATA",9002313.91,504,0)
B58^^LAST KNOWN GROUP ID^^^^^15^A/N
"DATA",9002313.91,504,5)
3G^^2058^21
"DATA",9002313.91,504,10,0)
^^1^1^3141223
"DATA",9002313.91,504,10,1,0)
S BPS("X")=""
"DATA",9002313.91,504,20,0)
^^1^1^3141223
"DATA",9002313.91,504,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,504,30,0)
^^1^1^3141223
"DATA",9002313.91,504,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,8)=BPS("X")
"DATA",9002313.91,505,0)
B59^^LAST KNOWN CARDHOLDER ID^^^^^20^A/N
"DATA",9002313.91,505,5)
3H^^2059^21
"DATA",9002313.91,505,10,0)
^^1^1^3141223
"DATA",9002313.91,505,10,1,0)
S BPS("X")=""
"DATA",9002313.91,505,20,0)
^^1^1^3141223
"DATA",9002313.91,505,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,505,30,0)
^^1^1^3141223
"DATA",9002313.91,505,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,9)=BPS("X")
"DATA",9002313.91,506,0)
B60^^YEAR OF LAST PAID CLAIM^^^^^4^N
"DATA",9002313.91,506,5)
3J^^2060^21
"DATA",9002313.91,506,10,0)
^9002313.9101^1^1^3150112^
"DATA",9002313.91,506,10,1,0)
S BPS("X")=""
"DATA",9002313.91,506,20,0)
^^1^1^3150112^
"DATA",9002313.91,506,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,506,30,0)
^9002313.9103^1^1^3150112^
"DATA",9002313.91,506,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,10)=BPS("X")
"DATA",9002313.91,507,0)
B61^^MONTH OF LAST PAID CLAIM^^^^^2^N
"DATA",9002313.91,507,5)
3K^^2061^21
"DATA",9002313.91,507,10,0)
^^1^1^3141223
"DATA",9002313.91,507,10,1,0)
S BPS("X")=""
"DATA",9002313.91,507,20,0)
^^1^1^3141223
"DATA",9002313.91,507,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,507,30,0)
^^1^1^3141223
"DATA",9002313.91,507,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B60"),U,1)=BPS("X")
"DATA",9002313.91,508,0)
B22^^HELP DESK TELEPHONE NUMBER EXT^^^^^8^N
"DATA",9002313.91,508,1)
HELP DESK TELEPHONE NUMBER EXTENSION
"DATA",9002313.91,508,5)
7P^^2022^^26
"DATA",9002313.91,508,10,0)
^^1^1^3141223
"DATA",9002313.91,508,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,509,0)
B33^^PRO SERVICE FEE CONT/REIM AMT^^^^^6.2^D
"DATA",9002313.91,509,1)
PROFESSIONAL SERVICE FEE CONTRACTED/REIMBURSEMENT AMOUNT
"DATA",9002313.91,509,5)
6G^^2033^^28
"DATA",9002313.91,509,10,0)
^^1^1^3141223
"DATA",9002313.91,509,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,510,0)
B23^^OTHER PAYER HELPDESK PHONE EXT^^^^^8^N
"DATA",9002313.91,510,1)
OTHER PAYER HELP DESK TELEPHONE NUMBER EXTENSION
"DATA",9002313.91,510,5)
7Q^^2023^^31
"DATA",9002313.91,510,10,0)
^^1^1^3141223
"DATA",9002313.91,510,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,511,0)
B52^^RESPONSE INTERMEDIARY AUTH CNT^^^^^1^N
"DATA",9002313.91,511,1)
RESPONSE INTERMEDIARY AUTHORIZATION COUNT
"DATA",9002313.91,511,5)
8R^^2052^^32
"DATA",9002313.91,511,10,0)
^^1^1^3141223
"DATA",9002313.91,511,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,512,0)
B53^^RESPONSE INTERMED AUTH TYPE ID^^^^^2^N
"DATA",9002313.91,512,1)
RESPONSE INTERMEDIARY AUTHORIZATION TYPE ID
"DATA",9002313.91,512,5)
8S^^2053^^32
"DATA",9002313.91,512,10,0)
^^1^1^3141223
"DATA",9002313.91,512,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,513,0)
B54^^RESPONSE INTERMEDIARY AUTH ID^^^^^20^A/N
"DATA",9002313.91,513,1)
RESPONSE INTERMEDIARY AUTHORIZATION ID
"DATA",9002313.91,513,5)
8T^^2054^^32
"DATA",9002313.91,513,10,0)
^^1^1^3141223
"DATA",9002313.91,513,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,514,0)
B51^^INTERMEDIARY MESSAGE^^^^^200^A/N
"DATA",9002313.91,514,5)
8Q^^2051^^32
"DATA",9002313.91,514,10,0)
^^1^1^3141223
"DATA",9002313.91,514,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.93,1,0)
01^M/I IIN Number
"DATA",9002313.93,2,0)
02^M/I Version/Release Number
"DATA",9002313.93,3,0)
03^M/I Transaction Code
"DATA",9002313.93,4,0)
04^M/I Processor Control Number
"DATA",9002313.93,5,0)
05^M/I Service Provider Number
"DATA",9002313.93,6,0)
06^M/I Group ID
"DATA",9002313.93,7,0)
07^M/I Cardholder ID
"DATA",9002313.93,8,0)
08^M/I Person Code
"DATA",9002313.93,9,0)
09^M/I Date Of Birth
"DATA",9002313.93,10,0)
10^M/I Patient Gender Code
"DATA",9002313.93,11,0)
11^M/I Patient Relationship Code
"DATA",9002313.93,12,0)
12^M/I Place of Service
"DATA",9002313.93,13,0)
13^M/I Other Coverage Code
"DATA",9002313.93,14,0)
14^M/I Eligibility Clarification Code
"DATA",9002313.93,15,0)
15^M/I Date of Service
"DATA",9002313.93,16,0)
16^M/I Prescription/Service Reference Number
"DATA",9002313.93,17,0)
17^M/I Fill Number
"DATA",9002313.93,18,0)
18^M/I Metric Quantity
"DATA",9002313.93,19,0)
19^M/I Days Supply
"DATA",9002313.93,20,0)
20^M/I Compound Code
"DATA",9002313.93,21,0)
21^M/I Product/Service ID
"DATA",9002313.93,22,0)
22^M/I Dispense As Written (DAW)/Product Selection Code
"DATA",9002313.93,23,0)
23^M/I Ingredient Cost Submitted
"DATA",9002313.93,24,0)
24^M/I SALES TAX
"DATA",9002313.93,25,0)
25^M/I Prescriber ID
"DATA",9002313.93,26,0)
26^M/I Unit Of Measure
"DATA",9002313.93,27,0)
27^Product Identifier not FDA/NSDE Listed
"DATA",9002313.93,28,0)
28^M/I Date Prescription Written
"DATA",9002313.93,29,0)
29^M/I Number Of Refills Authorized
"DATA",9002313.93,30,0)
30^Reversal request outside processor reversal window
"DATA",9002313.93,31,0)
31^No matching paid claim found for reversal request
"DATA",9002313.93,32,0)
32^M/I Level Of Service
"DATA",9002313.93,33,0)
33^M/I Prescription Origin Code
"DATA",9002313.93,34,0)
34^M/I Submission Clarification Code
"DATA",9002313.93,35,0)
35^M/I Primary Care Provider ID
"DATA",9002313.93,36,0)
36^M/I Clinic ID
"DATA",9002313.93,37,0)
37^(FUTURE USE)
"DATA",9002313.93,38,0)
38^M/I Basis Of Cost Determination
"DATA",9002313.93,39,0)
39^M/I Diagnosis Code
"DATA",9002313.93,40,0)
40^Pharmacy Not Contracted With Plan On Date Of Service
"DATA",9002313.93,41,0)
41^Submit Bill To Other Processor Or Primary Payer
"DATA",9002313.93,42,0)
42^Plan's Prescriber database indicates Prescriber ID is inactive/expired
"DATA",9002313.93,43,0)
43^Plan DB indicates the assoc DEA to submitted Prescriber ID is inactive
"DATA",9002313.93,44,0)
44^Plan's Prescriber database indicates DEA to Prescriber ID not found
"DATA",9002313.93,45,0)
45^(FUTURE USE)
"DATA",9002313.93,46,0)
46^Assoc DEA to submitted Prescriber ID doesn't allow drug DEA Schedule
"DATA",9002313.93,47,0)
47^(FUTURE USE)
"DATA",9002313.93,48,0)
48^(FUTURE USE)
"DATA",9002313.93,49,0)
49^(FUTURE USE)
"DATA",9002313.93,50,0)
50^Non-Matched Pharmacy Number
"DATA",9002313.93,51,0)
51^Non-Matched Group ID
"DATA",9002313.93,52,0)
52^Non-Matched Cardholder ID
"DATA",9002313.93,53,0)
53^Non-Matched Person Code
"DATA",9002313.93,54,0)
54^Non-Matched Product/Service ID Number
"DATA",9002313.93,55,0)
55^Non-Matched Product Package Size
"DATA",9002313.93,56,0)
56^Non-Matched Prescriber ID
"DATA",9002313.93,57,0)
57^Non-Matched PA/MC Number
"DATA",9002313.93,58,0)
58^Non-Matched Primary Prescriber
"DATA",9002313.93,59,0)
59^Non-Matched Clinic ID
"DATA",9002313.93,60,0)
60^Product/Service Not Covered For Patient Age
"DATA",9002313.93,61,0)
61^Product/Service Not Covered For Patient Gender
"DATA",9002313.93,62,0)
62^Patient/Card Holder ID Name Mismatch
"DATA",9002313.93,63,0)
63^Product/Service ID Not Covered For Institutionalized Patient
"DATA",9002313.93,64,0)
64^Claim Submitted Does Not Match Prior Authorization
"DATA",9002313.93,65,0)
65^Patient Is Not Covered
"DATA",9002313.93,66,0)
66^Patient Age Exceeds Maximum Age
"DATA",9002313.93,67,0)
67^Filled Before Coverage Effective
"DATA",9002313.93,68,0)
68^Filled After Coverage Expired
"DATA",9002313.93,69,0)
69^Filled After Coverage Terminated
"DATA",9002313.93,70,0)
70^Product/Service Not Covered - Plan/Benefit Exclusion
"DATA",9002313.93,71,0)
71^Prescriber ID Is Not Covered
"DATA",9002313.93,72,0)
72^Primary Prescriber Is Not Covered
"DATA",9002313.93,73,0)
73^Refills Are Not Covered
"DATA",9002313.93,74,0)
74^Other Carrier Payment Meets Or Exceeds Payable
"DATA",9002313.93,75,0)
75^Prior Authorization Required
"DATA",9002313.93,76,0)
76^Plan Limitations Exceeded
"DATA",9002313.93,77,0)
77^Discontinued Product/Service ID Number
"DATA",9002313.93,78,0)
78^Cost Exceeds Maximum
"DATA",9002313.93,79,0)
79^Refill Too Soon
"DATA",9002313.93,80,0)
80^Drug-Diagnosis Mismatch
"DATA",9002313.93,81,0)
81^Claim Too Old
"DATA",9002313.93,82,0)
82^Claim Is Post-Dated
"DATA",9002313.93,83,0)
83^Duplicate Paid/Captured Claim
"DATA",9002313.93,84,0)
84^Claim Has Not Been Paid/Captured
"DATA",9002313.93,85,0)
85^Claim Not Processed
"DATA",9002313.93,86,0)
86^Submit Manual Reversal
"DATA",9002313.93,87,0)
87^Reversal Not Processed
"DATA",9002313.93,88,0)
88^DUR Reject Error
"DATA",9002313.93,89,0)
89^Rejected Claim Fees Paid
"DATA",9002313.93,90,0)
90^Host Hung Up
"DATA",9002313.93,91,0)
91^Host Response Error
"DATA",9002313.93,92,0)
92^System Unavailable/Host Unavailable
"DATA",9002313.93,93,0)
93^Planned Unavailable
"DATA",9002313.93,94,0)
94^Invalid Message
"DATA",9002313.93,95,0)
95^Time Out
"DATA",9002313.93,96,0)
96^Scheduled Downtime
"DATA",9002313.93,97,0)
97^Payer Unavailable
"DATA",9002313.93,98,0)
98^Connection To Payer Is Down
"DATA",9002313.93,99,0)
99^Host Processing Error
"DATA",9002313.93,100,0)
CA^M/I Patient First Name
"DATA",9002313.93,101,0)
CB^M/I Patient Last Name
"DATA",9002313.93,102,0)
CC^M/I Cardholder First Name
"DATA",9002313.93,103,0)
CD^M/I Cardholder Last Name
"DATA",9002313.93,104,0)
CE^M/I Home Plan
"DATA",9002313.93,105,0)
CF^M/I Employer Name
"DATA",9002313.93,106,0)
CG^M/I Employer Street Address
"DATA",9002313.93,107,0)
CH^M/I Employer City Address
"DATA",9002313.93,108,0)
CI^M/I Employer State/Province Address
"DATA",9002313.93,109,0)
CJ^M/I Employer Zip Postal Zone
"DATA",9002313.93,110,0)
CK^M/I Employer Phone Number
"DATA",9002313.93,111,0)
CL^M/I Employer Contact Name
"DATA",9002313.93,112,0)
CM^M/I Patient Street Address
"DATA",9002313.93,113,0)
CN^M/I Patient City Address
"DATA",9002313.93,114,0)
CO^M/I Patient State/Province Address
"DATA",9002313.93,115,0)
CP^M/I Patient Zip/Postal Zone
"DATA",9002313.93,116,0)
CQ^M/I Patient Phone Number
"DATA",9002313.93,117,0)
CR^M/I Carrier ID
"DATA",9002313.93,118,0)
CT^Patient Social Security Number
"DATA",9002313.93,119,0)
DP^M/I DRUG TYPE OVERRIDE
"DATA",9002313.93,120,0)
DR^M/I Prescriber Last Name
"DATA",9002313.93,121,0)
DQ^M/I Usual And Customary Charge
"DATA",9002313.93,122,0)
DS^M/I Postage Amount Claimed
"DATA",9002313.93,123,0)
DT^M/I Special Packaging Indicator
"DATA",9002313.93,124,0)
DU^M/I Gross Amount Due
"DATA",9002313.93,125,0)
DV^M/I Other Payer Amount Paid
"DATA",9002313.93,126,0)
DW^M/I Basis Of Days Supply Determination
"DATA",9002313.93,127,0)
DX^M/I Patient Paid Amount Submitted
"DATA",9002313.93,128,0)
DY^M/I Date Of Injury
"DATA",9002313.93,129,0)
DZ^M/I Claim/Reference ID
"DATA",9002313.93,130,0)
E1^M/I Product/Service ID Qualifier
"DATA",9002313.93,131,0)
E2^M/I Route of Administration
"DATA",9002313.93,132,0)
E3^M/I Incentive Amount Submitted
"DATA",9002313.93,133,0)
E4^M/I Reason For Service Code
"DATA",9002313.93,134,0)
E5^M/I Professional Service Code
"DATA",9002313.93,135,0)
E6^M/I Result Of Service Code
"DATA",9002313.93,136,0)
E7^M/I Quantity Dispensed
"DATA",9002313.93,137,0)
E8^M/I Other Payer Date
"DATA",9002313.93,138,0)
M1^Patient Not Covered In This Aid Category
"DATA",9002313.93,139,0)
M2^Recipient Locked In
"DATA",9002313.93,140,0)
M3^Host PA/MC Error
"DATA",9002313.93,141,0)
M4^Prescription/Service Reference Number/Time Limit Exceeded
"DATA",9002313.93,142,0)
M5^Requires Manual Claim
"DATA",9002313.93,143,0)
M6^Host Eligibility Error
"DATA",9002313.93,144,0)
M7^Host Drug File Error
"DATA",9002313.93,145,0)
M8^Host Provider File Error
"DATA",9002313.93,146,0)
MZ^Error Overflow
"DATA",9002313.93,147,0)
1C^M/I Smoker/Non-Smoker Code
"DATA",9002313.93,148,0)
1E^M/I Prescriber Location Code
"DATA",9002313.93,149,0)
2C^M/I Pregnancy Indicator
"DATA",9002313.93,150,0)
2E^M/I Primary Care Provider ID Qualifier
"DATA",9002313.93,151,0)
3A^M/I Request Type
"DATA",9002313.93,152,0)
3B^M/I Request Period Date-Begin
"DATA",9002313.93,153,0)
3C^M/I Request Period Date-End
"DATA",9002313.93,154,0)
3D^M/I Basis Of Request
"DATA",9002313.93,155,0)
3E^M/I Authorized Representative First Name
"DATA",9002313.93,156,0)
3F^M/I Authorized Representative Last Name
"DATA",9002313.93,157,0)
3G^M/I Authorized Representative Street Address
"DATA",9002313.93,158,0)
3H^M/I Authorized Representative City Address
"DATA",9002313.93,159,0)
3J^M/I Authorized Representative State/Province Address
"DATA",9002313.93,160,0)
3K^M/I Authorized Representative Zip/Postal Zone
"DATA",9002313.93,161,0)
3M^M/I Prescriber Phone Number
"DATA",9002313.93,162,0)
3N^M/I Prior Authorized Number-Assigned
"DATA",9002313.93,163,0)
3P^M/I Authorization Number
"DATA",9002313.93,164,0)
3R^Prior Authorization Not Required
"DATA",9002313.93,165,0)
3S^M/I Prior Authorization Supporting Documentation
"DATA",9002313.93,166,0)
3T^Active Prior Auth Exists Resubmit At Expiration Of Prior Auth
"DATA",9002313.93,167,0)
3W^Prior Authorization In Process
"DATA",9002313.93,168,0)
3X^Authorization Number Not Found
"DATA",9002313.93,169,0)
3Y^Prior Authorization Denied
"DATA",9002313.93,170,0)
4C^M/I Coordination Of Benefits/Other Payments Count
"DATA",9002313.93,171,0)
4E^M/I Primary Care Provider Last Name
"DATA",9002313.93,172,0)
5C^M/I Other Payer Coverage Type
"DATA",9002313.93,173,0)
5E^M/I Other Payer Reject Count
"DATA",9002313.93,174,0)
6C^M/I Other Payer ID Qualifier
"DATA",9002313.93,175,0)
6E^M/I Other Payer Reject Code
"DATA",9002313.93,176,0)
7C^M/I Other Payer ID
"DATA",9002313.93,177,0)
7E^M/I DUR/PPS Code Counter
"DATA",9002313.93,178,0)
8C^M/I Facility ID
"DATA",9002313.93,179,0)
8E^M/I DUR/PPS Level Of Effort
"DATA",9002313.93,180,0)
AA^Patient Spenddown Not Met
"DATA",9002313.93,181,0)
AB^Date Written Is After Date Filled
"DATA",9002313.93,182,0)
AC^Product Not Covered Non-Participating Manufacturer
"DATA",9002313.93,183,0)
AD^Billing Provider Not Eligible To Bill This Claim Type
"DATA",9002313.93,184,0)
AE^QMB (Qualified Medicare Beneficiary)-Bill Medicare
"DATA",9002313.93,185,0)
AF^Patient Enrolled Under Managed Care
"DATA",9002313.93,186,0)
AG^Days Supply Limitation For Product/Service
"DATA",9002313.93,187,0)
AH^Unit Dose Packaging Only Payable For Nursing Home Recipients
"DATA",9002313.93,188,0)
AJ^Generic Drug Required
"DATA",9002313.93,189,0)
AK^M/I Software Vendor/Certification ID
"DATA",9002313.93,190,0)
AM^M/I Segment Identification
"DATA",9002313.93,191,0)
A9^M/I Transaction Count
"DATA",9002313.93,192,0)
BE^M/I Professional Service Fee Submitted
"DATA",9002313.93,193,0)
B2^M/I Service Provider ID Qualifier
"DATA",9002313.93,194,0)
CW^M/I Alternate ID
"DATA",9002313.93,195,0)
CX^M/I Patient ID Qualifier
"DATA",9002313.93,196,0)
CY^M/I Patient ID
"DATA",9002313.93,197,0)
CZ^M/I Employer ID
"DATA",9002313.93,198,0)
DC^M/I Dispensing Fee Submitted
"DATA",9002313.93,199,0)
DN^M/I Basis Of Cost Determination
"DATA",9002313.93,200,0)
EA^M/I Originally Prescribed Product/Service Code
"DATA",9002313.93,201,0)
EB^M/I Originally Prescribed Quantity
"DATA",9002313.93,202,0)
EC^M/I Compound Ingredient Component Count
"DATA",9002313.93,203,0)
ED^M/I Compound Ingredient Quantity
"DATA",9002313.93,204,0)
EE^M/I Compound Ingredient Drug Cost
"DATA",9002313.93,205,0)
EF^M/I Compound Dosage Form Description Code
"DATA",9002313.93,206,0)
EG^M/I Compound Dispensing Unit Form Indicator
"DATA",9002313.93,207,0)
EH^M/I Compound Route of Administration
"DATA",9002313.93,208,0)
EJ^M/I Originally Prescribed Product/Service ID Qualifier
"DATA",9002313.93,209,0)
EK^M/I Scheduled Prescription ID Number
"DATA",9002313.93,210,0)
EM^M/I Prescription/Service Reference Number Qualifier
"DATA",9002313.93,211,0)
EN^M/I Associated Prescription/Service Reference Number
"DATA",9002313.93,212,0)
Ep^M/I Associated Prescription/Service Date
"DATA",9002313.93,213,0)
ER^M/I Procedure Modifier Code
"DATA",9002313.93,214,0)
ET^M/I Quantity Prescribed
"DATA",9002313.93,215,0)
EU^M/I Prior Authorization Type Code
"DATA",9002313.93,216,0)
EV^M/I Prior Authorization ID Submitted 
"DATA",9002313.93,217,0)
EW^M/I Intermediary Authorization Type ID
"DATA",9002313.93,218,0)
EX^M/I Intermediary Authorization ID
"DATA",9002313.93,219,0)
EY^M/I Provider ID Qualifier
"DATA",9002313.93,220,0)
EZ^M/I Prescriber ID Qualifier
"DATA",9002313.93,221,0)
E9^M/I Provider ID
"DATA",9002313.93,222,0)
FO^M/I Plan ID
"DATA",9002313.93,223,0)
GE^M/I Percentage Sales Tax Amount Submitted
"DATA",9002313.93,224,0)
HA^M/I Flat Sales Tax Amount Submitted
"DATA",9002313.93,225,0)
HB^M/I Other Payer Amount Paid Count
"DATA",9002313.93,226,0)
HC^M/I Other Payer Amount Paid Qualifier
"DATA",9002313.93,227,0)
HD^M/I Dispensing Status
"DATA",9002313.93,228,0)
HE^M/I Percentage Sales Tax Rate Submitted
"DATA",9002313.93,229,0)
HF^M/I Quantity Intended To Be Dispensed
"DATA",9002313.93,230,0)
HG^M/I Days Supply Intended To Be Dispensed
"DATA",9002313.93,231,0)
H1^M/I Measurement Time
"DATA",9002313.93,232,0)
H2^M/I Measurement Dimension
"DATA",9002313.93,233,0)
H3^M/I Measurement Unit
"DATA",9002313.93,234,0)
H4^M/I Measurement Value
"DATA",9002313.93,235,0)
H5^M/I Primary Care Provider Location Code
"DATA",9002313.93,236,0)
H6^M/I DUR Co-Agent ID
"DATA",9002313.93,237,0)
H7^M/I Other Amount Claimed Submitted Count
"DATA",9002313.93,238,0)
H8^M/I Other Amount Claimed Submitted Qualifier
"DATA",9002313.93,239,0)
H9^M/I Other Amount Claimed Submitted
"DATA",9002313.93,240,0)
JE^M/I Percentage Sales Tax Basis Submitted
"DATA",9002313.93,241,0)
J9^M/I DUR Co-Agent ID Qualifier
"DATA",9002313.93,242,0)
KE^M/I Coupon Type
"DATA",9002313.93,243,0)
ME^M/I Coupon Number
"DATA",9002313.93,244,0)
NE^M/I Coupon Value Amount
"DATA",9002313.93,245,0)
NN^Transaction Rejected At Switch Or Intermediary
"DATA",9002313.93,246,0)
PA^PA Exhausted/Not Renewable
"DATA",9002313.93,247,0)
PB^Invalid Transaction Count For This Transaction Code
"DATA",9002313.93,248,0)
PC^M/I Request Claim Segment
"DATA",9002313.93,249,0)
PD^M/I Request Clinical Segment
"DATA",9002313.93,250,0)
PE^M/I Request Coordination Of Benefits/Other Payments Segment
"DATA",9002313.93,251,0)
PF^M/I Request Compound Segment
"DATA",9002313.93,252,0)
PG^M/I Request Coupon Segment
"DATA",9002313.93,253,0)
PH^M/I Request DUR/PPS Segment
"DATA",9002313.93,254,0)
PJ^M/I Request Insurance Segment
"DATA",9002313.93,255,0)
PK^M/I Request Patient Segment
"DATA",9002313.93,256,0)
PM^M/I Request Pharmacy Provider Segment
"DATA",9002313.93,257,0)
PN^M/I Request Prescriber Segment
"DATA",9002313.93,258,0)
PP^M/I Request Pricing Segment
"DATA",9002313.93,259,0)
PR^M/I Request Prior Authorization Segment
"DATA",9002313.93,260,0)
PS^M/I Transaction Header Segment
"DATA",9002313.93,261,0)
PT^M/I Request Worker's Compensation Segment
"DATA",9002313.93,262,0)
PV^Non-Matched Associated Prescription/Service Date
"DATA",9002313.93,263,0)
PW^Employer ID Not Covered
"DATA",9002313.93,264,0)
PX^Other Payer ID Not Covered
"DATA",9002313.93,265,0)
PY^Non-Matched Unit Form/Route of Administration
"DATA",9002313.93,266,0)
PZ^Non-Matched Unit Of Measure To Product/Service ID
"DATA",9002313.93,267,0)
P1^Associated Prescription/Service Reference Number Not Found
"DATA",9002313.93,268,0)
P2^Clinical Information Counter Out Of Sequence
"DATA",9002313.93,269,0)
P3^Compound Ingredient Component Count Doesn't Match # Of Repetitions
"DATA",9002313.93,270,0)
P4^COB/Other Payments Count Does Not Match Number Of Repetitions
"DATA",9002313.93,271,0)
P5^Coupon Expired
"DATA",9002313.93,272,0)
P6^Date Of Service Prior To Date Of Birth
"DATA",9002313.93,273,0)
P7^Diagnosis Code Count Does Not Match Number Of Repetitions
"DATA",9002313.93,274,0)
P8^DUR/PPS Code Counter Out Of Sequence
"DATA",9002313.93,275,0)
P9^Field Is Non-Repeatable
"DATA",9002313.93,276,0)
RA^PA Reversal Out Of Order
"DATA",9002313.93,277,0)
RB^Multiple Partials Not Allowed
"DATA",9002313.93,278,0)
RC^Different Drug Entity Between Partial & Completion
"DATA",9002313.93,279,0)
RD^Mismatched Cardholder/Group ID-Partial To Completion
"DATA",9002313.93,280,0)
RE^M/I Compound Product ID Qualifier
"DATA",9002313.93,281,0)
RF^Improper Order Of 'Dispensing Status' Code On Partial Fill Transaction
"DATA",9002313.93,282,0)
RG^M/I Associated Rx/Service Reference # On Completion Transaction
"DATA",9002313.93,283,0)
RH^M/I Associated Prescription/Service Date On Completion Transaction
"DATA",9002313.93,284,0)
RJ^Associated Partial Fill Transaction Not On File
"DATA",9002313.93,285,0)
RK^Partial Fill Transaction Not Supported
"DATA",9002313.93,286,0)
RM^Compl Trans Not Permitted With Same 'Date Of Service' As Partial Trans
"DATA",9002313.93,287,0)
RN^Plan Limits Exceeded On Intended Partial Fill Field Limitations
"DATA",9002313.93,288,0)
RP^Out Of Sequence 'P' Reversal On Partial Fill Transaction
"DATA",9002313.93,289,0)
RS^M/I Associated Prescription/Service Date On Partial Transaction
"DATA",9002313.93,290,0)
RT^M/I Associated Prescription/Service Reference Number On Partial Trans
"DATA",9002313.93,291,0)
RU^Mandatory Elements Must Occur Before Optional Data Elements In Segment
"DATA",9002313.93,292,0)
R1^Other Amount Claimed Submitted Count Does Not Match # of Repetitions
"DATA",9002313.93,293,0)
R2^Other Payer Reject Count Does Not Match Number Of Repetitions
"DATA",9002313.93,294,0)
R3^Procedure Modifier Code Count Does Not Match Number Of Repetitions
"DATA",9002313.93,295,0)
R4^Procedure Modifier Code Invalid For Product/Service ID
"DATA",9002313.93,296,0)
R5^Product/Service ID Must Be Zero When Product/Service ID Qual Equals 06
"DATA",9002313.93,297,0)
R6^Product/Service Not Appropriate For This Location
"DATA",9002313.93,298,0)
R7^Repeating Segment Not Allowed In Same Transaction
"DATA",9002313.93,299,0)
R8^Syntax Error
"DATA",9002313.93,300,0)
R9^Value In Gross Amount Due Does Not Follow Pricing Formulae
"DATA",9002313.93,301,0)
SE^M/I Procedure Modifier Code Count
"DATA",9002313.93,302,0)
TE^Missing/Invalid Compound Product ID
"DATA",9002313.93,303,0)
UE^M/I Compound Ingredient Basis Of Cost Determination
"DATA",9002313.93,304,0)
VE^M/I Diagnosis Code Count
"DATA",9002313.93,305,0)
WE^M/I Diagnosis Code Qualifier
"DATA",9002313.93,306,0)
XE^M/I Clinical Information Counter
"DATA",9002313.93,307,0)
ZE^M/I Measurement Date
"DATA",9002313.93,308,0)
*95^The Clearinghous did not respond in time
"DATA",9002313.93,309,0)
*96^Scheduled Downtime
"DATA",9002313.93,310,0)
*97^Payor Unavailable
"DATA",9002313.93,311,0)
*98^Connection To Payer Is Down
"DATA",9002313.93,312,0)
*95^The Clearinghouse Did Not Respond In Time.
"DATA",9002313.93,313,0)
*97^Payer Unavailable
"DATA",9002313.93,314,0)
1R^Version/Release Value Not Supported
"DATA",9002313.93,315,0)
1S^Transaction Code/Type Value Not Supported
"DATA",9002313.93,316,0)
1T^PCN Must Contain Processor/Payer Assigned Value
"DATA",9002313.93,317,0)
1U^Transaction Count Does Not Match Number of Transactions
"DATA",9002313.93,318,0)
1V^Multiple Transactions Not Supported
"DATA",9002313.93,319,0)
1W^Multi-Ingredient Compound Must Be A Single Transaction
"DATA",9002313.93,320,0)
1X^Vendor Not Certified For Processor/Payer
"DATA",9002313.93,321,0)
1Y^Claim Segment Required For Adjudication
"DATA",9002313.93,322,0)
1Z^Clinical Segment Required For Adjudication
"DATA",9002313.93,323,0)
2A^M/I Medigap ID
"DATA",9002313.93,324,0)
2B^M/I Medicaid Indicator
"DATA",9002313.93,325,0)
2D^M/I Provider Accept Assignment Indicator
"DATA",9002313.93,326,0)
2G^M/I Compound Ingredient Modifier Code Count
"DATA",9002313.93,327,0)
2H^M/I Compound Ingredient Modifier Code
"DATA",9002313.93,328,0)
2J^M/I Prescriber First Name
"DATA",9002313.93,329,0)
2K^M/I Prescriber Street Address
"DATA",9002313.93,330,0)
2M^M/I Prescriber City Address
"DATA",9002313.93,331,0)
2N^M/I Prescriber State/Province Address
"DATA",9002313.93,332,0)
2P^M/I Prescriber Zip/Postal Zone
"DATA",9002313.93,333,0)
2Q^M/I Additional Documentation Type ID
"DATA",9002313.93,334,0)
2R^M/I Length of Need
"DATA",9002313.93,335,0)
2S^M/I Length of Need Qualifier
"DATA",9002313.93,336,0)
2T^M/I Prescriber/Supplier Date Signed
"DATA",9002313.93,337,0)
2U^M/I Request Status
"DATA",9002313.93,338,0)
2V^M/I Request Period Begin Date
"DATA",9002313.93,339,0)
2W^M/I Request Period Recert/Revised Date
"DATA",9002313.93,340,0)
2X^M/I Supporting Documentation
"DATA",9002313.93,341,0)
2Z^M/I Question Number/Letter Count
"DATA",9002313.93,342,0)
3Q^M/I Facility Name
"DATA",9002313.93,343,0)
3U^M/I Facility Street Address
"DATA",9002313.93,344,0)
3V^M/I Facility State/Province Address
"DATA",9002313.93,345,0)
4B^M/I Question Number/Letter
"DATA",9002313.93,346,0)
4D^M/I Question Percent Response
"DATA",9002313.93,347,0)
4G^M/I Question Date Response
"DATA",9002313.93,348,0)
4H^M/I Question Dollar Amount Response
"DATA",9002313.93,349,0)
4J^M/I Question Numeric Response
"DATA",9002313.93,350,0)
4K^M/I Question Alphanumeric Response
"DATA",9002313.93,351,0)
4M^Compound Ingredient Modifier Code Count Doesn't Match # of Repetitions
"DATA",9002313.93,352,0)
4N^Question Number/Letter Count Does Not Match Number of Repetitions
"DATA",9002313.93,353,0)
4P^Question Number/Letter Not Valid for Identified Document
"DATA",9002313.93,354,0)
4Q^Question Response Not Appropriate for Question Number/Letter
"DATA",9002313.93,355,0)
4R^Required Question Num/Letter Response for Indicated Document Missing
"DATA",9002313.93,356,0)
4S^Compound Product ID Requires a Modifier Code
"DATA",9002313.93,357,0)
4T^M/I Additional Documentation Segment
"DATA",9002313.93,358,0)
4W^Must Fill Through Specialty Pharmacy
"DATA",9002313.93,359,0)
4X^M/I Patient Residence
"DATA",9002313.93,360,0)
4Y^Patient Residence Value Not Supported
"DATA",9002313.93,361,0)
4Z^Place of Service Not Supported By Plan
"DATA",9002313.93,362,0)
5J^M/I Facility City Address
"DATA",9002313.93,363,0)
6D^M/I Facility Zip/Postal Zone
"DATA",9002313.93,364,0)
6G^COB/Other Payments Segment Required For Adjudication
"DATA",9002313.93,365,0)
6H^Coupon Segment Required For Adjudication
"DATA",9002313.93,366,0)
6J^Insurance Segment Required For Adjudication
"DATA",9002313.93,367,0)
6K^Patient Segment Required For Adjudication
"DATA",9002313.93,368,0)
6M^Pharmacy Provider Segment Required For Adjudication
"DATA",9002313.93,369,0)
6N^Prescriber Segment Required For Adjudication
"DATA",9002313.93,370,0)
6P^Pricing Segment Required For Adjudication
"DATA",9002313.93,371,0)
6Q^Prior Authorization Segment Required For Adjudication
"DATA",9002313.93,372,0)
6R^Worker's Compensation Segment Required For Adjudication
"DATA",9002313.93,373,0)
6S^Transaction Segment Required For Adjudication
"DATA",9002313.93,374,0)
6T^Compound Segment Required For Adjudication
"DATA",9002313.93,375,0)
6U^Compound Segment Incorrectly Formatted
"DATA",9002313.93,376,0)
6V^Multi-ingredient Compounds Not Supported
"DATA",9002313.93,377,0)
6W^DUR/PPS Segment Required For Adjudication
"DATA",9002313.93,378,0)
6X^DUR/PPS Segment Incorrectly Formatted
"DATA",9002313.93,379,0)
6Y^Not Authorized To Submit Electronically
"DATA",9002313.93,380,0)
6Z^Provider Not Eligible To Perform Service/Dispense Product
"DATA",9002313.93,381,0)
7A^Provider Does Not Match Authorization On File
"DATA",9002313.93,382,0)
7B^Service Provider ID Qualifier Value Not Supported For Processor/Payer
"DATA",9002313.93,383,0)
7D^Non-Matched DOB
"DATA",9002313.93,384,0)
7G^Future Date Not Allowed For DOB
"DATA",9002313.93,385,0)
7H^Non-Matched Gender Code
"DATA",9002313.93,386,0)
7J^Patient Relationship Code Value Not Supported
"DATA",9002313.93,387,0)
7K^Discrepancy Between Other Coverage Code And Other Payer Amount
"DATA",9002313.93,388,0)
7M^Discrepancy Between Other Coverage Code & Other Coverage Info On File
"DATA",9002313.93,389,0)
7N^Patient ID Qualifier Value Not Supported
"DATA",9002313.93,390,0)
7P^COB/Other Payments Count Exceeds Number of Supported Payers
"DATA",9002313.93,391,0)
7Q^Other Payer ID Qualifier Value Not Supported
"DATA",9002313.93,392,0)
7R^Other Payer Amount Paid Count Exceeds Number of Supported Groupings
"DATA",9002313.93,393,0)
7S^Other Payer Amount Paid Qualifier Value Not Supported
"DATA",9002313.93,394,0)
7T^Quantity Intended To Be Dispensed Required For Partial Fill Trans
"DATA",9002313.93,395,0)
7U^Days Supply Intended To Be Dispensed Required For Partial Fill Trans
"DATA",9002313.93,396,0)
7V^Duplicate Refills
"DATA",9002313.93,397,0)
7W^Refills Exceed allowable Refills
"DATA",9002313.93,398,0)
7X^Days Supply Exceeds Plan Limitation
"DATA",9002313.93,399,0)
7Y^Compounds Not Covered
"DATA",9002313.93,400,0)
7Z^Compound Requires Two Or More Ingredients
"DATA",9002313.93,401,0)
8A^Compound Requires At Least One Covered Ingredient
"DATA",9002313.93,402,0)
8B^Compound Segment Missing On A Compound Claim
"DATA",9002313.93,403,0)
8D^Compound Segment Present On A Non-Compound Claim
"DATA",9002313.93,404,0)
8G^Product/Service ID (407-D7) Must Be A Single Zero '0' For Compounds
"DATA",9002313.93,405,0)
8H^Product/Service Only Covered On Compound Claim
"DATA",9002313.93,406,0)
8J^Incorrect Product/Service ID For Processor/Payer
"DATA",9002313.93,407,0)
8K^DAW Code Value Not Supported
"DATA",9002313.93,408,0)
8M^Sum Of Compound Ingredient Costs Does Not Equal Ingredient Cost
"DATA",9002313.93,409,0)
8N^Future Date Prescription Written Not Allowed
"DATA",9002313.93,410,0)
8P^Date Written Different On Previous Filling
"DATA",9002313.93,411,0)
8Q^Excessive Refills Authorized
"DATA",9002313.93,412,0)
8R^Submission Clarification Code Value Not Supported
"DATA",9002313.93,413,0)
8S^Basis Of Cost Determination Value Not Supported
"DATA",9002313.93,414,0)
8T^U&C Must Be Greater Than Zero
"DATA",9002313.93,415,0)
8U^GAD Must Be Greater Than Zero
"DATA",9002313.93,416,0)
8V^Negative Dollar Amount Is Not Supported In Other Payer Amount Paid
"DATA",9002313.93,417,0)
8W^Discrepancy Between Other Coverage Code and Other Payer Amount Paid
"DATA",9002313.93,418,0)
8X^Collection From Cardholder Not Allowed
"DATA",9002313.93,419,0)
8Y^Excessive Amount Collected
"DATA",9002313.93,420,0)
8Z^Product/Service ID Qualifier Value Not Supported
"DATA",9002313.93,421,0)
9B^Reason For Service Code Value Not Supported
"DATA",9002313.93,422,0)
9C^Professional Service Code Value Not Supported
"DATA",9002313.93,423,0)
9D^Result Of Service Code Value Not Supported
"DATA",9002313.93,424,0)
9E^Quantity Does Not Match Dispensing Unit
"DATA",9002313.93,425,0)
9G^Quantity Dispensed Exceeds Maximum Allowed
"DATA",9002313.93,426,0)
9H^Quantity Not Valid For Product/Service ID Submitted
"DATA",9002313.93,427,0)
9J^Future Other Payer Date Not Allowed
"DATA",9002313.93,428,0)
9K^Compound Ingredient Component Cnt Exceeds Num Of Ingredients Supported
"DATA",9002313.93,429,0)
9M^Minimum Of Two Ingredients Required
"DATA",9002313.93,430,0)
9N^Compound Ingredient Quantity Exceeds Maximum Allowed
"DATA",9002313.93,431,0)
9P^Compound Ingredient Drug Cost Must Be Greater Than Zero
"DATA",9002313.93,432,0)
9Q^Route Of Administration Submitted Not Covered
"DATA",9002313.93,433,0)
9R^Prescription/Service Reference Number Qualifier Submitted Not Covered
"DATA",9002313.93,434,0)
9S^Future Associated Prescription/Service Date Not Allowed
"DATA",9002313.93,435,0)
9T^Prior Authorization Type Code Submitted Not Covered
"DATA",9002313.93,436,0)
9U^Provider ID Qualifier Submitted Not Covered
"DATA",9002313.93,437,0)
9V^Prescriber ID Qualifier Submitted Not Covered
"DATA",9002313.93,438,0)
9W^DUR/PPS Code Counter Exceeds Number Of Occurrences Supported
"DATA",9002313.93,439,0)
9X^Coupon Type Submitted Not Covered
"DATA",9002313.93,440,0)
9Y^Compound Product ID Qualifier Submitted Not Covered
"DATA",9002313.93,441,0)
9Z^Duplicate Product ID In Compound
"DATA",9002313.93,442,0)
AQ^M/I Facility Segment
"DATA",9002313.93,443,0)
A5^Not Covered Under Part D Law
"DATA",9002313.93,444,0)
A6^This Product/Service May Be Covered Under Medicare Part B
"DATA",9002313.93,445,0)
A7^M/I Internal Control Number
"DATA",9002313.93,446,0)
BA^Compound Basis of Cost Determination Submitted Not Covered
"DATA",9002313.93,447,0)
BB^Diagnosis Code Qualifier Submitted Not Covered
"DATA",9002313.93,448,0)
BC^Future Measurement Date Not Allowed
"DATA",9002313.93,449,0)
BD^Sender Not Authorized To Submit File Type
"DATA",9002313.93,450,0)
BF^M/I File Type
"DATA",9002313.93,451,0)
BG^Sender ID Not Certified For Processor/Payer
"DATA",9002313.93,452,0)
BH^M/I Sender ID
"DATA",9002313.93,453,0)
BJ^Transmission Type Submitted Not Supported
"DATA",9002313.93,454,0)
BK^M/I Transmission Type
"DATA",9002313.93,455,0)
BM^M/I Narrative Message
"DATA",9002313.93,456,0)
EP^M/I Associated Prescription/Service Date
"DATA",9002313.93,457,0)
G1^M/I Compound Type
"DATA",9002313.93,458,0)
G2^M/I CMS Part D Defined Qualified Facility
"DATA",9002313.93,459,0)
G4^Physician must contact plan
"DATA",9002313.93,460,0)
G5^Pharmacist must contact plan
"DATA",9002313.93,461,0)
G6^Pharmacy Not Contracted in Specialty Network
"DATA",9002313.93,462,0)
G7^Pharmacy Not Contracted in Home Infusion Network
"DATA",9002313.93,463,0)
G8^Pharmacy Not Contracted in Long Term Care Network
"DATA",9002313.93,464,0)
G9^Pharmacy Not Contracted in 90 Day Retail Network
"DATA",9002313.93,465,0)
HN^M/I Patient E-Mail Address
"DATA",9002313.93,466,0)
K5^M/I Transaction Reference Number
"DATA",9002313.93,467,0)
MG^M/I Other Payer BIN Number
"DATA",9002313.93,468,0)
MH^M/I Other Payer Processor Control Number
"DATA",9002313.93,469,0)
MJ^M/I Other Payer Group ID
"DATA",9002313.93,470,0)
MK^Non-Matched Other Payer BIN Number
"DATA",9002313.93,471,0)
MM^Non-Matched Other Payer Processor Control Number
"DATA",9002313.93,472,0)
MN^Non-Matched Other Payer Group ID
"DATA",9002313.93,473,0)
MP^Other Payer Cardholder ID Not Covered
"DATA",9002313.93,474,0)
MR^Product Not On Formulary
"DATA",9002313.93,475,0)
MS^More than 1 Cardholder Found - Narrow Search Criteria
"DATA",9002313.93,476,0)
MT^M/I Patient Assignment Indicator
"DATA",9002313.93,477,0)
MU^M/I Benefit Stage Count
"DATA",9002313.93,478,0)
MV^M/I Benefit Stage Qualifier
"DATA",9002313.93,479,0)
MW^M/I Benefit Stage Amount
"DATA",9002313.93,480,0)
MX^Benefit Stage Count Does Not Match Number Of Repetitions
"DATA",9002313.93,481,0)
NP^M/I Other Payer-Patient Responsibility Amount Qualifier
"DATA",9002313.93,482,0)
NQ^M/I Other Payer-Patient Responsibility Amount
"DATA",9002313.93,483,0)
NR^M/I Other Payer-Patient Responsibility Amount Count
"DATA",9002313.93,484,0)
NU^M/I Other Payer Cardholder ID
"DATA",9002313.93,485,0)
NV^M/I Delay Reason Code
"DATA",9002313.93,486,0)
NX^M/I Submission Clarification Code Count
"DATA",9002313.93,487,0)
N1^No patient match found
"DATA",9002313.93,488,0)
N3^M/I Medicaid Paid Amount
"DATA",9002313.93,489,0)
N4^M/I Medicaid Subrogation Internal Ctrl Number/Transaction Ctrl Number
"DATA",9002313.93,490,0)
N5^M/I Medicaid ID Number
"DATA",9002313.93,491,0)
N6^M/I Medicaid Agency Number
"DATA",9002313.93,492,0)
N7^Use Prior Authorization ID Provided During Transition Period
"DATA",9002313.93,493,0)
N8^Use Prior Authorization ID Provided For Emergency Fill
"DATA",9002313.93,494,0)
N9^Use Prior Authorization ID Provided For Level of Care Change
"DATA",9002313.93,495,0)
PQ^M/I Narrative Segment
"DATA",9002313.93,496,0)
RL^Transitional Benefit/Resubmit Claim
"DATA",9002313.93,497,0)
RV^Multiple Reversals Per Transmission Not Supported
"DATA",9002313.93,498,0)
SF^Other Payer Amount Paid Count Does Not Match Number Of Repetitions
"DATA",9002313.93,499,0)
SG^Submission Clarification Code Count Doesn't Match # of Repetitions
"DATA",9002313.93,500,0)
SH^Other Payer-Patient Resp Amount Count Doesn't Match # of Repetitions
"DATA",9002313.93,501,0)
TN^Emergency Fill/Resubmit Claim
"DATA",9002313.93,502,0)
TP^Level of Care Change/Resubmit Claim
"DATA",9002313.93,503,0)
TQ^Dosage Exceeds Product Labeling Limit
"DATA",9002313.93,504,0)
TR^M/I Billing Entity Type Indicator
"DATA",9002313.93,505,0)
TS^M/I Pay To Qualifier
"DATA",9002313.93,506,0)
TT^M/I Pay To ID
"DATA",9002313.93,507,0)
TU^M/I Pay To Name
"DATA",9002313.93,508,0)
TV^M/I Pay To Street Address
"DATA",9002313.93,509,0)
TW^M/I Pay To City Address
"DATA",9002313.93,510,0)
TX^M/I Pay to State/Province Address
"DATA",9002313.93,511,0)
TY^M/I Pay To Zip/Postal Zone
"DATA",9002313.93,512,0)
TZ^M/I Generic Equivalent Product ID Qualifier
"DATA",9002313.93,513,0)
UA^M/I Generic Equivalent Product ID
"DATA",9002313.93,514,0)
UU^DAW 0 cannot be submitted on a multi-source drug w/available generics
"DATA",9002313.93,515,0)
UZ^Other Payer Coverage Type required on reversals to downstream payers
"DATA",9002313.93,516,0)
U7^M/I Pharmacy Service Type
"DATA",9002313.93,517,0)
VA^Pay To Qualifier Value Not Supported
"DATA",9002313.93,518,0)
VB^Generic Equivalent Product ID Qualifier Value Not Supported
"DATA",9002313.93,519,0)
VC^Pharmacy Service Type Value Not Supported
"DATA",9002313.93,520,0)
VD^Eligibility Search Time Frame Exceeded
"DATA",9002313.93,521,0)
ZA^The COB/Other Payments Segment is mandatory to a downstream payer
"DATA",9002313.93,522,0)
eT^TRICARE-DRUG NON BILLABLE
"DATA",9002313.93,523,0)
MY^M/I Address Count
"DATA",9002313.93,524,0)
NA^M/I Address Qualifier
"DATA",9002313.93,525,0)
NB^M/I Client Name
"DATA",9002313.93,526,0)
NC^M/I Discontinue Date Qualifier
"DATA",9002313.93,527,0)
ND^M/I Discontinue Date
"DATA",9002313.93,528,0)
NF^M/I Easy Open Cap Indicator
"DATA",9002313.93,529,0)
NG^M/I Effective Date
"DATA",9002313.93,530,0)
NH^M/I Expiration Date
"DATA",9002313.93,531,0)
NJ^M/I File Structure Type
"DATA",9002313.93,532,0)
NK^M/I Inactive Prescription Indicator
"DATA",9002313.93,533,0)
NM^M/I Label Directions
"DATA",9002313.93,534,0)
NW^M/I Most Recent Date Filled
"DATA",9002313.93,535,0)
NY^M/I Number Of Fills To-Date
"DATA",9002313.93,536,0)
PU^M/I Number Of Fills Remaining
"DATA",9002313.93,537,0)
P0^Non-zero Value Required for Vaccine Administration
"DATA",9002313.93,538,0)
RQ^M/I Original Dispensed Date
"DATA",9002313.93,539,0)
RR^M/I Patient ID Qualifier Count
"DATA",9002313.93,540,0)
RW^M/I Prescribed Drug Description
"DATA",9002313.93,541,0)
RX^M/I Prescriber ID Count
"DATA",9002313.93,542,0)
RY^M/I Prescriber Specialty
"DATA",9002313.93,543,0)
RZ^M/I Prescriber Specialty Count
"DATA",9002313.93,544,0)
R0^Professional Serv Cd of 'MA' req'd for Vaccine Incentive Fee Submitted
"DATA",9002313.93,545,0)
S0^Accumulator Month Count Does Not Match Number of Repetitions
"DATA",9002313.93,546,0)
S1^M/I Accumulator Year
"DATA",9002313.93,547,0)
S2^M/I Transaction Identifier
"DATA",9002313.93,548,0)
S3^M/I Accumulated Patient True Out Of Pocket Amount
"DATA",9002313.93,549,0)
S4^M/I Accumulated Gross Covered Drug Cost Amount
"DATA",9002313.93,550,0)
S5^M/I DateTime
"DATA",9002313.93,551,0)
S6^M/I Accumulator Month
"DATA",9002313.93,552,0)
S7^M/I Accumulator Month Count
"DATA",9002313.93,553,0)
S8^Non-Matched Transaction Identifier
"DATA",9002313.93,554,0)
S9^M/I Financial Information Reporting Transaction Header Segment
"DATA",9002313.93,555,0)
SA^M/I Quantity Dispensed To Date
"DATA",9002313.93,556,0)
SB^M/I Record Delimiter
"DATA",9002313.93,557,0)
SC^M/I Remaining Quantity
"DATA",9002313.93,558,0)
SD^M/I Sender Name
"DATA",9002313.93,559,0)
SJ^M/I Total Number Of Sending And Receiving Pharmacy Records
"DATA",9002313.93,560,0)
SK^M/I Transfer Flag
"DATA",9002313.93,561,0)
SM^M/I Transfer Type
"DATA",9002313.93,562,0)
SN^M/I Package Acquisition Cost
"DATA",9002313.93,563,0)
SP^M/I Unique Record Identifier
"DATA",9002313.93,564,0)
SQ^M/I Unique Record Identifier Qualifier
"DATA",9002313.93,565,0)
SW^Accum Patient True Out of Pocket must be equal to or greater than zero
"DATA",9002313.93,566,0)
TD^M/I Pharmacist Initials
"DATA",9002313.93,567,0)
TG^Address Count Does Not Match Number Of Repetitions
"DATA",9002313.93,568,0)
TH^Patient ID Qualifier Count Does Not Match Number Of Repetitions
"DATA",9002313.93,569,0)
TJ^Prescriber ID Count Does Not Match Number Of Repetitions
"DATA",9002313.93,570,0)
TK^Prescriber Specialty Count Does Not Match Number Of Repetitions
"DATA",9002313.93,571,0)
TM^Telephone Number Count Does Not Match Number Of Repetitions
"DATA",9002313.93,572,0)
T0^Accumulator Month Count Exceeds Number of Occurrences Supported
"DATA",9002313.93,573,0)
T1^Request Financial Segment Required For Financial Information Reporting
"DATA",9002313.93,574,0)
T2^M/I Request Reference Segment
"DATA",9002313.93,575,0)
T3^Out of Order DateTime
"DATA",9002313.93,576,0)
T4^Duplicate DateTime
"DATA",9002313.93,577,0)
U0^M/I Sending Pharmacy ID
"DATA",9002313.93,578,0)
V0^M/I Telephone Number Count
"DATA",9002313.93,579,0)
W0^M/I Telephone Number Qualifier
"DATA",9002313.93,580,0)
W5^M/I Bed
"DATA",9002313.93,581,0)
W6^M/I Facility Unit
"DATA",9002313.93,582,0)
W7^M/I Hours of Administration
"DATA",9002313.93,583,0)
W8^M/I Room
"DATA",9002313.93,584,0)
W9^Accum Gross Cov Drug Cost Amt Must Be Equal To Or Greater Than Zero
"DATA",9002313.93,585,0)
X1^Accumulated Patient True Out of Pocket exceeds maximum
"DATA",9002313.93,586,0)
X2^Accumulated Gross Covered Drug Cost exceeds maximum
"DATA",9002313.93,587,0)
X3^Out of order Accumulator Months
"DATA",9002313.93,588,0)
X4^Accumulator Year not current or prior year
"DATA",9002313.93,589,0)
X5^M/I Financial Information Reporting Request Insurance Segment
"DATA",9002313.93,590,0)
X6^M/I Request Financial Segment
"DATA",9002313.93,591,0)
X7^Financial Info Reporting Req Ins Seg Required For Financial Reporting
"DATA",9002313.93,592,0)
X8^Procedure Modifier Code Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,593,0)
X9^Diagnosis Code Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,594,0)
YA^Compound Ingredient Mod Code Cnt Exceeds Num Of Occurrences Supported
"DATA",9002313.93,595,0)
YB^Other Amt Claimed Submitted Count Exceeds Num Of Occurrences Supported
"DATA",9002313.93,596,0)
YC^Other Payer Reject Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,597,0)
YD^Other Payer-Patient Resp Amt Cnt Exceeds Num Of Occurrences Supported
"DATA",9002313.93,598,0)
YE^Submission Clarification Code Cnt Exceeds Num of Occurrences Supported
"DATA",9002313.93,599,0)
YF^Question Number/Letter Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,600,0)
YG^Benefit Stage Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,601,0)
YH^Clinical Information Counter Exceeds Number of Occurrences Supported
"DATA",9002313.93,602,0)
YJ^Medicaid Agency Number Not Supported
"DATA",9002313.93,603,0)
201^Patient Segment is not used for this Transaction Code
"DATA",9002313.93,604,0)
202^Insurance Segment is not used for this Transaction Code
"DATA",9002313.93,605,0)
203^Claim Segment is not used for this Transaction Code
"DATA",9002313.93,606,0)
204^Pharmacy Provider Segment is not used for this Transaction Code
"DATA",9002313.93,607,0)
205^Prescriber Segment is not used for this Transaction Code
"DATA",9002313.93,608,0)
206^COB/Other Payments Segment is not used for this Transaction Code
"DATA",9002313.93,609,0)
207^Workers' Compensation Segment is not used for this Transaction Code
"DATA",9002313.93,610,0)
208^DUR/PPS Segment is not used for this Transaction Code
"DATA",9002313.93,611,0)
209^Pricing Segment is not used for this Transaction Code
"DATA",9002313.93,612,0)
210^Coupon Segment is not used for this Transaction Code
"DATA",9002313.93,613,0)
211^Compound Segment is not used for this Transaction Code
"DATA",9002313.93,614,0)
212^Prior Authorization Segment is not used for this Transaction Code
"DATA",9002313.93,615,0)
213^Clinical Segment is not used for this Transaction Code
"DATA",9002313.93,616,0)
214^Additional Documentation Segment is not used for this Transaction Code
"DATA",9002313.93,617,0)
215^Facility Segment is not used for this Transaction Code
"DATA",9002313.93,618,0)
216^Narrative Segment is not used for this Transaction Code
"DATA",9002313.93,619,0)
217^Purchaser Segment is not used for this Transaction Code
"DATA",9002313.93,620,0)
218^Service Provider Segment is not used for this Transaction Code
"DATA",9002313.93,621,0)
219^Patient ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,622,0)
220^Patient ID is not used for this Transaction Code
"DATA",9002313.93,623,0)
221^Date of Birth is not used for this Transaction Code
"DATA",9002313.93,624,0)
222^Patient Gender Code is not used for this Transaction Code
"DATA",9002313.93,625,0)
223^Patient First Name is not used for this Transaction Code
"DATA",9002313.93,626,0)
224^Patient Last Name is not used for this Transaction Code
"DATA",9002313.93,627,0)
225^Patient Street Address is not used for this Transaction Code
"DATA",9002313.93,628,0)
226^Patient City Address is not used for this Transaction Code
"DATA",9002313.93,629,0)
227^Patient State/Province Address is not used for this Transaction Code
"DATA",9002313.93,630,0)
228^Patient ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,631,0)
229^Patient Phone Number is not used for this Transaction Code
"DATA",9002313.93,632,0)
230^Place of Service is not used for this Transaction Code
"DATA",9002313.93,633,0)
231^Employer ID is not used for this Transaction Code
"DATA",9002313.93,634,0)
232^Smoker/Non-Smoker Code is not used for this Transaction Code
"DATA",9002313.93,635,0)
233^Pregnancy Indicator is not used for this Transaction Code
"DATA",9002313.93,636,0)
234^Patient E-Mail Address is not used for this Transaction Code
"DATA",9002313.93,637,0)
235^Patient Residence is not used for this Transaction Code
"DATA",9002313.93,638,0)
236^Patient ID Assoc State/Province Address not used for this Trans Code
"DATA",9002313.93,639,0)
237^Cardholder First Name is not used for this Transaction Code
"DATA",9002313.93,640,0)
238^Cardholder Last Name is not used for this Transaction Code
"DATA",9002313.93,641,0)
239^Home Plan is not used for this Transaction Code
"DATA",9002313.93,642,0)
240^Plan ID is not used for this Transaction Code
"DATA",9002313.93,643,0)
241^Eligibility Clarification Code is not used for this Transaction Code
"DATA",9002313.93,644,0)
242^Group ID is not used for this Transaction Code
"DATA",9002313.93,645,0)
243^Person Code is not used for this Transaction Code
"DATA",9002313.93,646,0)
244^Patient Relationship Code is not used for this Transaction Code
"DATA",9002313.93,647,0)
245^Other Payer BIN Number is not used for this Transaction Code
"DATA",9002313.93,648,0)
246^Other Payer Processor Control Number is not used for this Trans Code
"DATA",9002313.93,649,0)
247^Other Payer Cardholder ID is not used for this Transaction Code
"DATA",9002313.93,650,0)
248^Other Payer Group ID is not used for this Transaction Code
"DATA",9002313.93,651,0)
249^Medigap ID is not used for this Transaction Code
"DATA",9002313.93,652,0)
250^Medicaid Indicator is not used for this Transaction Code
"DATA",9002313.93,653,0)
251^Provider Accept Assignment Indicator is not used for this Trans Code
"DATA",9002313.93,654,0)
252^CMS Part D Defined Qualified Facility is not used for this Trans Code
"DATA",9002313.93,655,0)
253^Medicaid ID Number is not used for this Transaction Code
"DATA",9002313.93,656,0)
254^Medicaid Agency Number is not used for this Transaction Code
"DATA",9002313.93,657,0)
255^Associated Rx/Service Reference Number is not used for this Trans Code
"DATA",9002313.93,658,0)
256^Associated Prescription/Service Date is not used for this Trans Code
"DATA",9002313.93,659,0)
257^Procedure Modifier Code Count is not used for this Transaction Code
"DATA",9002313.93,660,0)
258^Procedure Modifier Code is not used for this Transaction Code
"DATA",9002313.93,661,0)
259^Quantity Dispensed is not used for this Transaction Code
"DATA",9002313.93,662,0)
260^Fill Number is not used for this Transaction Code
"DATA",9002313.93,663,0)
261^Days Supply is not used for this Transaction Code
"DATA",9002313.93,664,0)
262^Compound Code is not used for this Transaction Code
"DATA",9002313.93,665,0)
263^DAW/Product Selection Code is not used for this Trans Code
"DATA",9002313.93,666,0)
264^Date Prescription Written is not used for this Transaction Code
"DATA",9002313.93,667,0)
265^Number of Refills Authorized is not used for this Transaction Code
"DATA",9002313.93,668,0)
266^Prescription Origin Code is not used for this Transaction Code
"DATA",9002313.93,669,0)
267^Submission Clarification Code Count is not used for this Trans Code
"DATA",9002313.93,670,0)
268^Submission Clarification Code is not used for this Transaction Code
"DATA",9002313.93,671,0)
269^Quantity Prescribed is not used for this Transaction Code
"DATA",9002313.93,672,0)
270^Other Coverage Code is not used for this Transaction Code
"DATA",9002313.93,673,0)
271^Special Packaging Indicator is not used for this Transaction Code
"DATA",9002313.93,674,0)
272^Originally Prescribed Prod/Serv ID Qual not used for this Trans Code
"DATA",9002313.93,675,0)
273^Originally Prescribed Prod/Serv Code is not used for this Trans Code
"DATA",9002313.93,676,0)
274^Originally Prescribed Quantity is not used for this Transaction Code
"DATA",9002313.93,677,0)
275^Alternate ID is not used for this Transaction Code
"DATA",9002313.93,678,0)
276^Scheduled Prescription ID Number is not used for this Transaction Code
"DATA",9002313.93,679,0)
277^Unit of Measure is not used for this Transaction Code
"DATA",9002313.93,680,0)
278^Level of Service is not used for this Transaction Code
"DATA",9002313.93,681,0)
279^Prior Authorization Type Code is not used for this Transaction Code
"DATA",9002313.93,682,0)
280^Prior Authorization ID Submitted is not used for this Transaction Code
"DATA",9002313.93,683,0)
281^Intermediary Authorization Type ID is not used for this Trans Code
"DATA",9002313.93,684,0)
282^Intermediary Authorization ID is not used for this Transaction Code
"DATA",9002313.93,685,0)
283^Dispensing Status is not used for this Transaction Code
"DATA",9002313.93,686,0)
284^Quantity Intended to be Dispensed is not used for this Trans Code
"DATA",9002313.93,687,0)
285^Days Supply Intended to be Dispensed is not used for this Trans Code
"DATA",9002313.93,688,0)
286^Delay Reason Code is not used for this Transaction Code
"DATA",9002313.93,689,0)
287^Transaction Reference Number is not used for this Transaction Code
"DATA",9002313.93,690,0)
288^Patient Assignment Indicator is not used for this Trans Code
"DATA",9002313.93,691,0)
289^Route of Administration is not used for this Transaction Code
"DATA",9002313.93,692,0)
290^Compound Type is not used for this Transaction Code
"DATA",9002313.93,693,0)
291^Medicaid Subrogation ICN/TCN is not used for this Transaction Code
"DATA",9002313.93,694,0)
292^Pharmacy Service Type is not used for this Transaction Code
"DATA",9002313.93,695,0)
293^Associated Rx/Service Provider ID Qual is not used for this Trans Code
"DATA",9002313.93,696,0)
294^Associated Rx/Service Provider ID is not used for this Trans Code
"DATA",9002313.93,697,0)
295^Associated Rx/Service Ref Num Qual is not used for this Trans Code
"DATA",9002313.93,698,0)
296^Associated Rx/Service Ref Fill Number is not used for this Trans Code
"DATA",9002313.93,699,0)
297^Time of Service is not used for this Transaction Code
"DATA",9002313.93,700,0)
298^Sales Transaction ID is not used for this Transaction Code
"DATA",9002313.93,701,0)
299^Reported Adjudicated Program Type Is Not Used For This Transaction Code
"DATA",9002313.93,702,0)
300^Provider ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,703,0)
301^Provider ID is not used for this Transaction Code
"DATA",9002313.93,704,0)
302^Prescriber ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,705,0)
303^Prescriber ID is not used for this Transaction Code
"DATA",9002313.93,706,0)
304^Prescriber ID Assoc State/Prov Address not used for this Trans Code
"DATA",9002313.93,707,0)
305^Prescriber Last Name is not used for this Transaction Code
"DATA",9002313.93,708,0)
306^Prescriber Phone Number is not used for this Transaction Code
"DATA",9002313.93,709,0)
307^Primary Care Provider ID Qualifier is not used for this Trans Code
"DATA",9002313.93,710,0)
308^Primary Care Provider ID is not used for this Transaction Code
"DATA",9002313.93,711,0)
309^Primary Care Provider Last Name is not used for this Transaction Code
"DATA",9002313.93,712,0)
310^Prescriber First Name is not used for this Transaction Code
"DATA",9002313.93,713,0)
311^Prescriber Street Address is not used for this Transaction Code
"DATA",9002313.93,714,0)
312^Prescriber City Address is not used for this Transaction Code
"DATA",9002313.93,715,0)
313^Prescriber State/Province Address is not used for this Trans Code
"DATA",9002313.93,716,0)
314^Prescriber ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,717,0)
315^Prescriber Alternate ID Qualifier is not used for this Trans Code
"DATA",9002313.93,718,0)
316^Prescriber Alternate ID is not used for this Transaction Code
"DATA",9002313.93,719,0)
317^Prescriber Alt ID Assoc State/Prov Address not used for this Trans Cd
"DATA",9002313.93,720,0)
318^Other Payer ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,721,0)
319^Other Payer ID is not used for this Transaction Code
"DATA",9002313.93,722,0)
320^Other Payer Date is not used for this Transaction Code
"DATA",9002313.93,723,0)
321^Internal Control Number is not used for this Transaction Code
"DATA",9002313.93,724,0)
322^Other Payer Amount Paid Count is not used for this Transaction Code
"DATA",9002313.93,725,0)
323^Other Payer Amount Paid Qualifier is not used for this Trans Code
"DATA",9002313.93,726,0)
324^Other Payer Amount Paid is not used for this Transaction Code
"DATA",9002313.93,727,0)
325^Other Payer Reject Count is not used for this Transaction Code
"DATA",9002313.93,728,0)
326^Other Payer Reject Code is not used for this Transaction Code
"DATA",9002313.93,729,0)
327^Other Payer-Patient Resp Amount Count is not used for this Trans Code
"DATA",9002313.93,730,0)
328^Other Payer-Patient Resp Amount Qual is not used for this Trans Code
"DATA",9002313.93,731,0)
329^Other Payer-Patient Resp Amount is not used for this Trans Code
"DATA",9002313.93,732,0)
330^Benefit Stage Count is not used for this Transaction Code
"DATA",9002313.93,733,0)
331^Benefit Stage Qualifier is not used for this Transaction Code
"DATA",9002313.93,734,0)
332^Benefit Stage Amount is not used for this Transaction Code
"DATA",9002313.93,735,0)
333^Employer Name is not used for this Transaction Code
"DATA",9002313.93,736,0)
334^Employer Street Address is not used for this Transaction Code
"DATA",9002313.93,737,0)
335^Employer City Address is not used for this Transaction Code
"DATA",9002313.93,738,0)
336^Employer State/Province Address is not used for this Transaction Code
"DATA",9002313.93,739,0)
337^Employer Zip/Postal Code is not used for this Transaction Code
"DATA",9002313.93,740,0)
338^Employer Phone Number is not used for this Transaction Code
"DATA",9002313.93,741,0)
339^Employer Contact Name is not used for this Transaction Code
"DATA",9002313.93,742,0)
340^Carrier ID is not used for this Transaction Code
"DATA",9002313.93,743,0)
341^Claim/Reference ID is not used for this Transaction Code
"DATA",9002313.93,744,0)
342^Billing Entity Type Indicator is not used for this Transaction Code
"DATA",9002313.93,745,0)
343^Pay To Qualifier is not used for this Transaction Code
"DATA",9002313.93,746,0)
344^Pay To ID is not used for this Transaction Code
"DATA",9002313.93,747,0)
345^Pay To Name is not used for this Transaction Code
"DATA",9002313.93,748,0)
346^Pay To Street Address is not used for this Transaction Code
"DATA",9002313.93,749,0)
347^Pay To City Address is not used for this Transaction Code
"DATA",9002313.93,750,0)
348^Pay To State/Province Address is not used for this Transaction Code
"DATA",9002313.93,751,0)
349^Pay To ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,752,0)
350^Generic Equivalent Product ID Qual is not used for this Trans Code
"DATA",9002313.93,753,0)
351^Generic Equivalent Product ID is not used for this Transaction Code
"DATA",9002313.93,754,0)
352^DUR/PPS Code Counter is not used for this Transaction Code
"DATA",9002313.93,755,0)
353^Reason for Service Code is not used for this Transaction Code
"DATA",9002313.93,756,0)
354^Professional Service Code is not used for this Transaction Code
"DATA",9002313.93,757,0)
355^Result of Service Code is not used for this Transaction Code
"DATA",9002313.93,758,0)
356^DUR/PPS Level of Effort is not used for this Transaction Code
"DATA",9002313.93,759,0)
357^DUR Co-Agent ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,760,0)
358^DUR Co-Agent ID is not used for this Transaction Code
"DATA",9002313.93,761,0)
359^Ingredient Cost Submitted is not used for this Transaction Code
"DATA",9002313.93,762,0)
360^Dispensing Fee Submitted is not used for this Transaction Code
"DATA",9002313.93,763,0)
361^Professional Service Fee Submitted is not used for this Trans Code
"DATA",9002313.93,764,0)
362^Patient Paid Amount Submitted is not used for this Transaction Code
"DATA",9002313.93,765,0)
363^Incentive Amount Submitted is not used for this Transaction Code
"DATA",9002313.93,766,0)
364^Other Amount Claimed Submitted Count is not used for this Trans Code
"DATA",9002313.93,767,0)
365^Other Amount Claimed Submitted Qual is not used for this Trans Code
"DATA",9002313.93,768,0)
366^Other Amount Claimed Submitted is not used for this Transaction Code
"DATA",9002313.93,769,0)
367^Flat Sales Tax Amount Submitted is not used for this Transaction Code
"DATA",9002313.93,770,0)
368^Percentage Sales Tax Amount Submitted is not used for this Trans Code
"DATA",9002313.93,771,0)
369^Percentage Sales Tax Rate Submitted is not used for this Trans Code
"DATA",9002313.93,772,0)
370^Percentage Sales Tax Basis Submitted is not used for this Trans Code
"DATA",9002313.93,773,0)
371^Usual and Customary Charge is not used for this Transaction Code
"DATA",9002313.93,774,0)
372^Gross Amount Due is not used for this Transaction Code
"DATA",9002313.93,775,0)
373^Basis of Cost Determination is not used for this Transaction Code
"DATA",9002313.93,776,0)
374^Medicaid Paid Amount is not used for this Transaction Code
"DATA",9002313.93,777,0)
375^Coupon Value Amount is not used for this Transaction Code
"DATA",9002313.93,778,0)
376^Compound Ingredient Drug Cost is not used for this Transaction Code
"DATA",9002313.93,779,0)
377^Compound Ingredient Basis of Cost Determ not used for this Trans Code
"DATA",9002313.93,780,0)
378^Compound Ingredient Modifier Code Count not used for this Trans Code
"DATA",9002313.93,781,0)
379^Compound Ingredient Modifier Code is not used for this Trans Code
"DATA",9002313.93,782,0)
380^Authorized Representative First Name is not used for this Trans Code
"DATA",9002313.93,783,0)
381^Authorized Rep. Last Name is not used for this Transaction Code
"DATA",9002313.93,784,0)
382^Authorized Rep. Street Address is not used for this Transaction Code
"DATA",9002313.93,785,0)
383^Authorized Rep. City is not used for this Transaction Code
"DATA",9002313.93,786,0)
384^Authorized Rep. State/Province is not used for this Transaction Code
"DATA",9002313.93,787,0)
385^Authorized Rep. Zip/Postal Code is not used for this Transaction Code
"DATA",9002313.93,788,0)
386^Prior Authorization Number - Assigned is not used for this Trans Code
"DATA",9002313.93,789,0)
387^Authorization Number is not used for this Transaction Code
"DATA",9002313.93,790,0)
388^Prior Auth Supporting Documentation is not used for this Trans Code
"DATA",9002313.93,791,0)
389^Diagnosis Code Count is not used for this Transaction Code
"DATA",9002313.93,792,0)
390^Diagnosis Code Qualifier is not used for this Transaction Code
"DATA",9002313.93,793,0)
391^Diagnosis Code is not used for this Transaction Code
"DATA",9002313.93,794,0)
392^Clinical Information Counter is not used for this Transaction Code
"DATA",9002313.93,795,0)
393^Measurement Date is not used for this Transaction Code
"DATA",9002313.93,796,0)
394^Measurement Time is not used for this Transaction Code
"DATA",9002313.93,797,0)
395^Measurement Dimension is not used for this Transaction Code
"DATA",9002313.93,798,0)
396^Measurement Unit is not used for this Transaction Code
"DATA",9002313.93,799,0)
397^Measurement Value is not used for this Transaction Code
"DATA",9002313.93,800,0)
398^Request Period Begin Date is not used for this Transaction Code
"DATA",9002313.93,801,0)
399^Request Period Recert/Revised Date is not used for this Trans Code
"DATA",9002313.93,802,0)
400^Request Status is not used for this Transaction Code
"DATA",9002313.93,803,0)
401^Length Of Need Qualifier is not used for this Transaction Code
"DATA",9002313.93,804,0)
402^Length Of Need is not used for this Transaction Code
"DATA",9002313.93,805,0)
403^Prescriber/Supplier Date Signed is not used for this Transaction Code
"DATA",9002313.93,806,0)
404^Supporting Documentation is not used for this Transaction Code
"DATA",9002313.93,807,0)
405^Question Number/Letter Count is not used for this Transaction Code
"DATA",9002313.93,808,0)
406^Question Number/Letter is not used for this Transaction Code
"DATA",9002313.93,809,0)
407^Question Percent Response is not used for this Transaction Code
"DATA",9002313.93,810,0)
408^Question Date Response is not used for this Transaction Code
"DATA",9002313.93,811,0)
409^Question Dollar Amount Response is not used for this Transaction Code
"DATA",9002313.93,812,0)
410^Question Numeric Response is not used for this Transaction Code
"DATA",9002313.93,813,0)
411^Question Alphanumeric Response is not used for this Transaction Code
"DATA",9002313.93,814,0)
412^Facility ID is not used for this Transaction Code
"DATA",9002313.93,815,0)
413^Facility Name is not used for this Transaction Code
"DATA",9002313.93,816,0)
414^Facility Street Address is not used for this Transaction Code
"DATA",9002313.93,817,0)
415^Facility City Address is not used for this Transaction Code
"DATA",9002313.93,818,0)
416^Facility State/Province Address is not used for this Transaction Code
"DATA",9002313.93,819,0)
417^Facility ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,820,0)
418^Purchaser ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,821,0)
419^Purchaser ID is not used for this Transaction Code
"DATA",9002313.93,822,0)
420^Purchaser ID Associated State Code is not used for this Trans Code
"DATA",9002313.93,823,0)
421^Purchaser Date of Birth is not used for this Transaction Code
"DATA",9002313.93,824,0)
422^Purchaser Gender Code is not used for this Transaction Code
"DATA",9002313.93,825,0)
423^Purchaser First Name is not used for this Transaction Code
"DATA",9002313.93,826,0)
424^Purchaser Last Name is not used for this Transaction Code
"DATA",9002313.93,827,0)
425^Purchaser Street Address is not used for this Transaction Code
"DATA",9002313.93,828,0)
426^Purchaser City Address is not used for this Transaction Code
"DATA",9002313.93,829,0)
427^Purchaser State/Province Address is not used for this Transaction Code
"DATA",9002313.93,830,0)
428^Purchaser ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,831,0)
429^Purchaser Country Code is not used for this Transaction Code
"DATA",9002313.93,832,0)
430^Purchaser Relationship Code is not used for this Transaction Code
"DATA",9002313.93,833,0)
431^Released Date is not used for this Transaction Code
"DATA",9002313.93,834,0)
432^Released Time is not used for this Transaction Code
"DATA",9002313.93,835,0)
433^Service Provider Name is not used for this Transaction Code
"DATA",9002313.93,836,0)
434^Service Provider Street Address is not used for this Transaction Code
"DATA",9002313.93,837,0)
435^Service Provider City Address is not used for this Transaction Code
"DATA",9002313.93,838,0)
436^Service Prov State/Province Address is not used for this Trans Code
"DATA",9002313.93,839,0)
437^Service Provider ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,840,0)
438^Seller ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,841,0)
439^Seller ID is not used for this Transaction Code
"DATA",9002313.93,842,0)
440^Seller Initials is not used for this Transaction Code
"DATA",9002313.93,843,0)
441^Other Amount Claimed Submitted Grouping Incorrect
"DATA",9002313.93,844,0)
442^Other Payer Amount Paid Grouping Incorrect
"DATA",9002313.93,845,0)
443^Other Payer-Patient Responsibility Amount Grouping Incorrect
"DATA",9002313.93,846,0)
444^Benefit Stage Amount Grouping Incorrect
"DATA",9002313.93,847,0)
445^Diagnosis Code Grouping Incorrect
"DATA",9002313.93,848,0)
446^COB/Other Payments Segment Incorrectly Formatted
"DATA",9002313.93,849,0)
447^Additional Documentation Segment Incorrectly Formatted
"DATA",9002313.93,850,0)
448^Clinical Segment Incorrectly Formatted
"DATA",9002313.93,851,0)
449^Patient Segment Incorrectly Formatted
"DATA",9002313.93,852,0)
450^Insurance Segment Incorrectly Formatted
"DATA",9002313.93,853,0)
451^Transaction Header Segment Incorrectly Formatted
"DATA",9002313.93,854,0)
452^Claim Segment Incorrectly Formatted
"DATA",9002313.93,855,0)
453^Pharmacy Provider Segment Incorrectly Formatted
"DATA",9002313.93,856,0)
454^Prescriber Segment Incorrectly Formatted
"DATA",9002313.93,857,0)
455^Workers' Compensation Segment Incorrectly Formatted
"DATA",9002313.93,858,0)
456^Pricing Segment Incorrectly Formatted
"DATA",9002313.93,859,0)
457^Coupon Segment Incorrectly Formatted
"DATA",9002313.93,860,0)
458^Prior Authorization Segment Incorrectly Formatted
"DATA",9002313.93,861,0)
459^Facility Segment Incorrectly Formatted
"DATA",9002313.93,862,0)
460^Narrative Segment Incorrectly Formatted
"DATA",9002313.93,863,0)
461^Purchaser Segment Incorrectly Formatted
"DATA",9002313.93,864,0)
462^Service Provider Segment Incorrectly Formatted
"DATA",9002313.93,865,0)
463^Pharmacy not contracted in Assisted Living Network
"DATA",9002313.93,866,0)
464^Service Provider ID Qualifier Does Not Precede Service Provider ID
"DATA",9002313.93,867,0)
465^Patient ID Qualifier Does Not Precede Patient ID
"DATA",9002313.93,868,0)
466^Rx/Service Ref Number Qualifier Does Not Precede Rx/Service Ref Number
"DATA",9002313.93,869,0)
467^Product/Service ID Qualifier Does Not Precede Product/Service ID
"DATA",9002313.93,870,0)
468^Procedure Modifier Code Count Does Not Precede Procedure Modifier Code
"DATA",9002313.93,871,0)
469^Submission Clarification Cd Cnt Follows Submission Clarification Code
"DATA",9002313.93,872,0)
470^Orig Prscrbd Prod/Serv ID Qual Follows Orig Prscrbd Prod/Serv Code
"DATA",9002313.93,873,0)
471^Oth Amt Claimed Submitted Cnt Follows Oth Amt Claimed Amt And/Or Qual
"DATA",9002313.93,874,0)
472^Other Amt Claimed Submitted Qual Follows Other Amt Claimed Submitted
"DATA",9002313.93,875,0)
473^Provider Id Qualifier Does Not Precede Provider ID
"DATA",9002313.93,876,0)
474^Prescriber Id Qualifier Does Not Precede Prescriber ID
"DATA",9002313.93,877,0)
475^Primary Care Prov ID Qual Does Not Precede Primary Care Provider ID
"DATA",9002313.93,878,0)
476^COB/Other Payments Count Does Not Precede Other Payer Coverage Type
"DATA",9002313.93,879,0)
477^Other Payer ID Count Does Not Precede Other Payer ID Data Fields
"DATA",9002313.93,880,0)
478^Other Payer ID Qualifier Does Not Precede Other Payer ID
"DATA",9002313.93,881,0)
479^Other Payer Amt Paid Count Follows Other Payer Amt Paid And/Or Qual
"DATA",9002313.93,882,0)
480^Other Payer Amount Paid Qual Does Not Precede Other Payer Amount Paid
"DATA",9002313.93,883,0)
481^Other Payer Reject Count Does Not Precede Other Payer Reject Code
"DATA",9002313.93,884,0)
482^Oth Payer-Pat Resp Amt Cnt Follows Oth Payer-Pat Resp Amt and/or Qual
"DATA",9002313.93,885,0)
483^Other Payer-Patient Resp Amt Qual Follows Other Payer-Patient Resp Amt
"DATA",9002313.93,886,0)
484^Benefit Stage Count Does Not Precede Benefit Stage Amount and/or Qual
"DATA",9002313.93,887,0)
485^Benefit Stage Qualifier Does Not Precede Benefit Stage Amount
"DATA",9002313.93,888,0)
486^Pay To Qualifier Does Not Precede Pay To ID
"DATA",9002313.93,889,0)
487^Generic Equivalent Prod Id Qual Follows Generic Equivalent Prod Id
"DATA",9002313.93,890,0)
488^DUR/PPS Code Counter Does Not Precede DUR Data Fields
"DATA",9002313.93,891,0)
489^DUR Co-Agent ID Qualifier Does Not Precede DUR Co-Agent ID
"DATA",9002313.93,892,0)
490^Compound Ingredient Component Cnt Follows Compound Prod ID And/Or Qual
"DATA",9002313.93,893,0)
491^Compound Product ID Qualifier Does Not Precede Compound Product ID
"DATA",9002313.93,894,0)
492^Compound Ingredient Mod Code Cnt Follows Compound Ingredient Mod Code
"DATA",9002313.93,895,0)
493^Diagnosis Code Count Does Not Precede Diagnosis Code And/Or Qualifier
"DATA",9002313.93,896,0)
494^Diagnosis Code Qualifier Does Not Precede Diagnosis Code
"DATA",9002313.93,897,0)
495^Clinical Info Counter Does Not Precede Clinical Measurement data
"DATA",9002313.93,898,0)
496^Length Of Need Qualifier Does Not Precede Length Of Need
"DATA",9002313.93,899,0)
497^Question Number/Letter Count Does Not Precede Question Number/Letter
"DATA",9002313.93,900,0)
498^Accumulator Month Count Does Not Precede Accumulator Month
"DATA",9002313.93,901,0)
499^Address Count Does Not Precede Address Data Fields
"DATA",9002313.93,902,0)
500^Patient ID Qualifier Count Does Not Precede Patient ID Data Fields
"DATA",9002313.93,903,0)
501^Prescriber ID Count Does Not Precede Prescriber ID Data Fields
"DATA",9002313.93,904,0)
502^Prescriber Specialty Count Does Not Precede Prescriber Specialty
"DATA",9002313.93,905,0)
503^Telephone Number Count Does Not Precede Telephone Number Data Fields
"DATA",9002313.93,906,0)
504^Benefit Stage Qualifier Value Not Supported
"DATA",9002313.93,907,0)
505^Other Payer Coverage Type Value Not Supported
"DATA",9002313.93,908,0)
506^Prescription/Service Reference Number Qualifier Value Not Supported
"DATA",9002313.93,909,0)
507^Additional Documentation Type ID Value Not Supported
"DATA",9002313.93,910,0)
508^Authorized Representative State/Province Address Value Not Supported
"DATA",9002313.93,911,0)
509^Basis Of Request Value Not Supported
"DATA",9002313.93,912,0)
510^Billing Entity Type Indicator Value Not Supported
"DATA",9002313.93,913,0)
511^CMS Part D Defined Qualified Facility Value Not Supported
"DATA",9002313.93,914,0)
512^Compound Code Value Not Supported
"DATA",9002313.93,915,0)
513^Compound Dispensing Unit Form Indicator Value Not Supported
"DATA",9002313.93,916,0)
514^Compound Ingredient Basis of Cost Determination Value Not Supported
"DATA",9002313.93,917,0)
515^Compound Product ID Qualifier Value Not Supported
"DATA",9002313.93,918,0)
516^Compound Type Value Not Supported
"DATA",9002313.93,919,0)
517^Coupon Type Value Not Supported
"DATA",9002313.93,920,0)
518^DUR Co-Agent ID Qualifier Value Not Supported
"DATA",9002313.93,921,0)
519^DUR/PPS Level Of Effort Value Not Supported
"DATA",9002313.93,922,0)
520^Delay Reason Code Value Not Supported
"DATA",9002313.93,923,0)
521^Diagnosis Code Qualifier Value Not Supported
"DATA",9002313.93,924,0)
522^Dispensing Status Value Not Supported
"DATA",9002313.93,925,0)
523^Eligibility Clarification Code Value Not Supported
"DATA",9002313.93,926,0)
524^Employer State/Province Address Value Not Supported
"DATA",9002313.93,927,0)
525^Facility State/Province Address Value Not Supported
"DATA",9002313.93,928,0)
526^Header Response Status Value Not Supported
"DATA",9002313.93,929,0)
527^Intermediary Authorization Type ID Value Not Supported
"DATA",9002313.93,930,0)
528^Length of Need Qualifier Value Not Supported
"DATA",9002313.93,931,0)
529^Level Of Service Value Not Supported
"DATA",9002313.93,932,0)
530^Measurement Dimension Value Not Supported
"DATA",9002313.93,933,0)
531^Measurement Unit Value Not Supported
"DATA",9002313.93,934,0)
532^Medicaid Indicator Value Not Supported
"DATA",9002313.93,935,0)
533^Originally Prescribed Product/Service ID Qualifier Value Not Supported
"DATA",9002313.93,936,0)
534^Other Amount Claimed Submitted Qualifier Value Not Supported
"DATA",9002313.93,937,0)
535^Other Coverage Code Value Not Supported
"DATA",9002313.93,938,0)
536^Other Payer-Patient Responsibility Amount Qual Value Not Supported
"DATA",9002313.93,939,0)
537^Patient Assignment Indicator Value Not Supported
"DATA",9002313.93,940,0)
538^Patient Gender Code Value Not Supported
"DATA",9002313.93,941,0)
539^Patient State/Province Address Value Not Supported
"DATA",9002313.93,942,0)
540^Pay to State/Province Address Value Not Supported
"DATA",9002313.93,943,0)
541^Percentage Sales Tax Basis Submitted Value Not Supported
"DATA",9002313.93,944,0)
542^Pregnancy Indicator Value Not Supported
"DATA",9002313.93,945,0)
543^Prescriber ID Qualifier Value Not Supported
"DATA",9002313.93,946,0)
544^Prescriber State/Province Address Value Not Supported
"DATA",9002313.93,947,0)
545^Prescription Origin Code Value Not Supported
"DATA",9002313.93,948,0)
546^Primary Care Provider ID Qualifier Value Not Supported
"DATA",9002313.93,949,0)
547^Prior Authorization Type Code Value Not Supported
"DATA",9002313.93,950,0)
548^Provider Accept Assignment Indicator Value Not Supported
"DATA",9002313.93,951,0)
549^Provider ID Qualifier Value Not Supported
"DATA",9002313.93,952,0)
550^Request Status Value Not Supported
"DATA",9002313.93,953,0)
551^Request Type Value Not Supported
"DATA",9002313.93,954,0)
552^Route of Administration Value Not Supported
"DATA",9002313.93,955,0)
553^Smoker/Non-Smoker Code Value Not Supported
"DATA",9002313.93,956,0)
554^Special Packaging Indicator Value Not Supported
"DATA",9002313.93,957,0)
555^Transaction Count Value Not Supported
"DATA",9002313.93,958,0)
556^Unit Of Measure Value Not Supported
"DATA",9002313.93,959,0)
557^COB Segment Present On A Non-COB Claim
"DATA",9002313.93,960,0)
7F^Future date not allowed for Date of Birth
"DATA",9002313.93,961,0)
A1^ID Submitted Is Associated With An Excluded Prescriber
"DATA",9002313.93,962,0)
A2^ID Submitted is associated to a Deceased Prescriber
"DATA",9002313.93,963,0)
TF^M/I Technician Initials
"DATA",9002313.93,964,0)
X0^M/I Associated Prescription/Service Fill Number
"DATA",9002313.93,965,0)
XZ^M/I Associated Prescription/Service Reference Number Qualifier
"DATA",9002313.93,966,0)
Y0^M/I Purchaser Last Name
"DATA",9002313.93,967,0)
Y1^M/I Purchaser Street Address
"DATA",9002313.93,968,0)
Y2^M/I Purchaser City Address
"DATA",9002313.93,969,0)
Y3^M/I Purchaser State/Province Code
"DATA",9002313.93,970,0)
Y4^M/I Purchaser Zip/Postal Code
"DATA",9002313.93,971,0)
Y5^M/I Purchaser Country Code
"DATA",9002313.93,972,0)
Y6^M/I Time of Service
"DATA",9002313.93,973,0)
Y7^M/I Associated Prescription/Service Provider ID Qualifier
"DATA",9002313.93,974,0)
Y8^M/I Associated Prescription/Service Provider ID
"DATA",9002313.93,975,0)
Y9^M/I Seller ID
"DATA",9002313.93,976,0)
YK^M/I Service Provider Name
"DATA",9002313.93,977,0)
YM^M/I Service Provider Street Address
"DATA",9002313.93,978,0)
YN^M/I Service Provider City Address
"DATA",9002313.93,979,0)
YP^M/I Service Provider State/Province Code Address
"DATA",9002313.93,980,0)
YQ^M/I Service Provider Zip/Postal Code
"DATA",9002313.93,981,0)
YR^M/I Patient ID Associated State/Province Address
"DATA",9002313.93,982,0)
YS^M/I Purchaser Relationship Code
"DATA",9002313.93,983,0)
YT^M/I Seller Initials
"DATA",9002313.93,984,0)
YU^M/I Purchaser ID Qualifier
"DATA",9002313.93,985,0)
YV^M/I Purchaser ID
"DATA",9002313.93,986,0)
YW^M/I Purchaser ID Associated State/Province Code
"DATA",9002313.93,987,0)
YX^M/I Purchaser Date of Birth
"DATA",9002313.93,988,0)
YY^M/I Purchaser Gender Code
"DATA",9002313.93,989,0)
YZ^M/I Purchaser First Name
"DATA",9002313.93,990,0)
Z0^Purchaser Country Code Value Not Supported For Processor/Payer
"DATA",9002313.93,991,0)
Z1^Prescriber Alternate ID Qualifier Value Not Supported
"DATA",9002313.93,992,0)
Z2^M/I Purchaser Segment
"DATA",9002313.93,993,0)
Z3^Purchaser Segment Present On A Non-Controlled Sub Reporting Trans
"DATA",9002313.93,994,0)
Z4^Purchaser Segment Required On A Controlled Substance Reporting Trans
"DATA",9002313.93,995,0)
Z5^M/I Service Provider Segment
"DATA",9002313.93,996,0)
Z6^Service Prov Segment Present On A non-Controlled Sub Reporting Trans
"DATA",9002313.93,997,0)
Z7^Service Provider Segment Required On A Controlled Sub Reporting Trans
"DATA",9002313.93,998,0)
Z8^Purchaser Relationship Code Value Not Supported
"DATA",9002313.93,999,0)
Z9^Prescriber Alternate ID Not Covered
"DATA",9002313.93,1000,0)
ZB^M/I Seller ID Qualifier
"DATA",9002313.93,1001,0)
ZC^Assoc Rx/Service Prov ID Qual Value Not Supported For Processor/Payer
"DATA",9002313.93,1002,0)
ZD^Associated Rx/Service Reference Number Qualifier Value Not Supported
"DATA",9002313.93,1003,0)
ZF^M/I Sales Transaction ID
"DATA",9002313.93,1004,0)
ZK^M/I Prescriber ID Associated State/Province Address
"DATA",9002313.93,1005,0)
ZM^M/I Prescriber Alternate ID Qualifier
"DATA",9002313.93,1006,0)
ZN^Purchaser ID Qualifier Value Not Supported For Processor/Payer
"DATA",9002313.93,1007,0)
ZP^M/I Prescriber Alternate ID
"DATA",9002313.93,1008,0)
ZQ^M/I Prescriber Alternate ID Associated State/Province Address
"DATA",9002313.93,1009,0)
ZS^M/I Reported Adjudicated Program Type
"DATA",9002313.93,1010,0)
ZT^M/I Released Date
"DATA",9002313.93,1011,0)
ZU^M/I Released Time
"DATA",9002313.93,1012,0)
ZV^Reported Payment Type Value Not Supported
"DATA",9002313.93,1013,0)
ZW^M/I Compound Preparation Time
"DATA",9002313.93,1014,0)
ZX^M/I CMS Part D Contract ID
"DATA",9002313.93,1015,0)
ZY^M/I Medicare Part D Plan Benefit Package (PBP)
"DATA",9002313.93,1016,0)
ZZ^Cardholder ID submitted is inactive. New Cardholder ID on file
"DATA",9002313.93,1017,0)
eC^CHAMPVA-DRUG NON BILLABLE
"DATA",9002313.93,1018,0)
569^Provide Notice: Medicare Prescription Drug Coverage and Your Rights
"DATA",9002313.93,1019,0)
597^LTC Dispensing Type Does Not Support The Packaging Type
"DATA",9002313.93,1020,0)
709^M/I Record Type
"DATA",9002313.93,1021,0)
558^Part D Plan cannot coordinate benefits with another Part D Plan
"DATA",9002313.93,1022,0)
559^ID Submitted is associated with a Sanctioned Pharmacy
"DATA",9002313.93,1023,0)
560^Pharmacy Not Contracted in Retail Network
"DATA",9002313.93,1024,0)
561^Pharmacy Not Contracted in Mail Order Network
"DATA",9002313.93,1025,0)
562^Pharmacy Not Contracted in Hospice Network
"DATA",9002313.93,1026,0)
563^Pharmacy Not Contracted in Veterans Administration Network
"DATA",9002313.93,1027,0)
564^Pharmacy Not Contracted in Military Network
"DATA",9002313.93,1028,0)
565^Patient Country Code Value Not Supported
"DATA",9002313.93,1029,0)
566^Patient Country Code Not Used For This Transaction
"DATA",9002313.93,1030,0)
567^M/I Veterinary Use Indicator
"DATA",9002313.93,1031,0)
568^Veterinary Use Indicator Value Not Supported
"DATA",9002313.93,1032,0)
570^Veterinary Use Indicator Not Used For This Transaction
"DATA",9002313.93,1033,0)
571^Patient ID Associated State/Province Address Value Not Supported
"DATA",9002313.93,1034,0)
572^Medigap ID Not Covered
"DATA",9002313.93,1035,0)
573^Prescriber Alt ID Assoc State/Province Address Value Not Supported
"DATA",9002313.93,1036,0)
574^Compound Ingredient Modifier Code Not Covered
"DATA",9002313.93,1037,0)
575^Purchaser State/Province Address Value Not Supported
"DATA",9002313.93,1038,0)
576^Service Provider State/Province Address Value Not Supported
"DATA",9002313.93,1039,0)
577^M/I Other Payer ID
"DATA",9002313.93,1040,0)
578^Other Payer ID Count Does Not Match Number of Repetitions
"DATA",9002313.93,1041,0)
579^Other Payer ID Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,1042,0)
580^Other Payer ID Count Grouping Incorrect
"DATA",9002313.93,1043,0)
581^Other Payer ID Count is not used for this Transaction Code
"DATA",9002313.93,1044,0)
582^M/I Fill Number
"DATA",9002313.93,1045,0)
583^Provider ID Not Covered
"DATA",9002313.93,1046,0)
584^Purchaser ID Associated State/Province Code Value Not Supported
"DATA",9002313.93,1047,0)
585^Fill Number Value Not Supported
"DATA",9002313.93,1048,0)
586^Facility ID Not Covered
"DATA",9002313.93,1049,0)
587^Carrier ID Not Covered
"DATA",9002313.93,1050,0)
588^Alternate ID Not Covered
"DATA",9002313.93,1051,0)
589^Patient ID Not Covered
"DATA",9002313.93,1052,0)
590^Compound Dosage Form Not Covered
"DATA",9002313.93,1053,0)
591^Plan ID Not Covered
"DATA",9002313.93,1054,0)
592^DUR Co-Agent ID Not Covered
"DATA",9002313.93,1055,0)
593^M/I Date of Service
"DATA",9002313.93,1056,0)
594^Pay To ID Not Covered
"DATA",9002313.93,1057,0)
595^Associated Prescription/Service Provider ID Not Covered
"DATA",9002313.93,1058,0)
596^Compound Preparation Time Not Used For This Transaction Code
"DATA",9002313.93,1059,0)
598^More Than One Patient Found
"DATA",9002313.93,1060,0)
599^Cardholder ID Matched But Last Name Did Not
"DATA",9002313.93,1061,0)
600^Coverage Outside Submitted Date Of Service
"DATA",9002313.93,1062,0)
601^Intermediary Auth Type ID Does Not Precede Intermediary Auth ID
"DATA",9002313.93,1063,0)
602^Assoc Rx/Serv Prov ID Qual Does Not Precede Assoc Rx/Service Prov ID
"DATA",9002313.93,1064,0)
603^Prescriber Alternate ID Qual Does Not Precede Prescriber Alternate ID
"DATA",9002313.93,1065,0)
604^Purchaser ID Qualifier Does Not Precede Purchaser ID
"DATA",9002313.93,1066,0)
605^Seller ID Qualifier Does Not Precede Seller ID
"DATA",9002313.93,1067,0)
606^Brand Drug/Specific Labeler Code Required
"DATA",9002313.93,1068,0)
607^Info Reporting (N1/N3) Trans Cannot Be Matched To A Claim (B1/B3)
"DATA",9002313.93,1069,0)
608^Step Therapy/Alt Drug Therapy Req'd Prior To Submitted Prod Serv ID
"DATA",9002313.93,1070,0)
609^COB Claim Not Required, Patient Liability Amount Submitted Was Zero
"DATA",9002313.93,1071,0)
610^Info Reporting Trans Matched to Reversed/Rejected Claim Under Part D
"DATA",9002313.93,1072,0)
611^Supp Claim Was Matched To A Claim Covered By A Benefit Oth Than Part D
"DATA",9002313.93,1073,0)
612^LTC Appropriate Dispensing Invalid Submission Clarification Code Combo
"DATA",9002313.93,1074,0)
613^Packaging Methodology Or Dispensing Frequency M/I For LTC Short Cycle
"DATA",9002313.93,1075,0)
614^Uppercase Character(s) Required
"DATA",9002313.93,1076,0)
615^Basis Of Cost Determ Value 14 Req'd When Compound Ing Qty 0, Cost>$0
"DATA",9002313.93,1077,0)
616^Submission Clarification Code 8 Req'd When Compound Ingredient Qty 0
"DATA",9002313.93,1078,0)
617^Compound Ingredient Drug Cost Cannot Be Negative Amount
"DATA",9002313.93,1079,0)
618^Submitted Prescriber's DEA Does Not Allow This Drug DEA Schedule
"DATA",9002313.93,1080,0)
619^Prescriber Type 1 NPI Required
"DATA",9002313.93,1081,0)
620^This Product/Service May Be Covered Under Medicare Part D
"DATA",9002313.93,1082,0)
621^This Medicaid Patient Is Medicare Eligible
"DATA",9002313.93,1083,0)
645^Repackaged product is not covered by the contract
"DATA",9002313.93,1084,0)
646^Pat Not Eligible Due To Non Payment Of Premium. Pat To Contact Plan
"DATA",9002313.93,1085,0)
647^Quantity Prescribed Required For CII Prescription
"DATA",9002313.93,1086,0)
648^Qty Prescribed Doesn't Match Qty Prescribed On Original CII Dispensing
"DATA",9002313.93,1087,0)
649^Cumulative Quantity For This CII Rx Number Exceeds Quantity Prescribed
"DATA",9002313.93,1088,0)
650^Fill Date Greater Than 60 Days From CII Date Rx Written (414-DE)
"DATA",9002313.93,1089,0)
1K^M/I Patient Country Code
"DATA",9002313.93,1090,0)
622^COB Claim not required, patient liability amount submitted was zero
"DATA",9002313.93,1091,0)
623^M/I Authorized Representative Country Code
"DATA",9002313.93,1092,0)
624^M/I Employer Country Code
"DATA",9002313.93,1093,0)
625^M/I Entity Country Code
"DATA",9002313.93,1094,0)
627^M/I Facility Country Code
"DATA",9002313.93,1095,0)
628^M/I Patient ID Associated Country Code
"DATA",9002313.93,1096,0)
629^M/I Pay to Country Code
"DATA",9002313.93,1097,0)
630^M/I Prescriber Alternate ID Associated Country Code
"DATA",9002313.93,1098,0)
631^M/I Prescriber ID Associated Country Code
"DATA",9002313.93,1099,0)
632^M/I Prescriber Country Code
"DATA",9002313.93,1100,0)
633^M/I Purchaser ID Associated Country Code
"DATA",9002313.93,1101,0)
634^Authorized Representative Country Code Value Not Supported
"DATA",9002313.93,1102,0)
635^Employer Country Code Value Not Supported
"DATA",9002313.93,1103,0)
637^Entity Country Code Value Not Supported
"DATA",9002313.93,1104,0)
638^Facility Country Code Value Not Supported
"DATA",9002313.93,1105,0)
639^Patient ID Associated Country Code Value Not Supported
"DATA",9002313.93,1106,0)
640^Pay to Country Code Value Not Supported
"DATA",9002313.93,1107,0)
641^M/I Prescriber Alt ID Associated Country Code Value Not Supported
"DATA",9002313.93,1108,0)
642^M/I Prescriber ID Associated Country Code Value Not Supported
"DATA",9002313.93,1109,0)
643^M/I Prescriber Country Code Value Not Supported
"DATA",9002313.93,1110,0)
644^M/I Purchaser ID Associated Country Code Value Not Supported
"DATA",9002313.93,1111,0)
651^REMS: Mandatory data element(s) missing
"DATA",9002313.93,1112,0)
652^REMS: Prescriber not matched or may not be enrolled
"DATA",9002313.93,1113,0)
653^REMS: Patient not matched or may not be enrolled
"DATA",9002313.93,1114,0)
654^REMS: Pharmacy not matched or may not be enrolled
"DATA",9002313.93,1115,0)
655^REMS: Multiple patient matches
"DATA",9002313.93,1116,0)
656^REMS: Patient age not matched
"DATA",9002313.93,1117,0)
657^REMS: Patient gender not matched
"DATA",9002313.93,1118,0)
658^REMS: Pharmacy has not enrolled
"DATA",9002313.93,1119,0)
659^REMS: Pharmacy has not renewed enrollment
"DATA",9002313.93,1120,0)
660^REMS: Pharmacy has not submitted agreement form
"DATA",9002313.93,1121,0)
661^REMS: Pharmacy has been suspended due to non-compliance
"DATA",9002313.93,1122,0)
662^REMS: Prescriber has not enrolled
"DATA",9002313.93,1123,0)
663^REMS: Prescriber has not completed a knowledge assessment
"DATA",9002313.93,1124,0)
664^REMS: Prescriber has been suspended due to non-compliance
"DATA",9002313.93,1125,0)
665^REMS: Excessive days supply
"DATA",9002313.93,1126,0)
666^REMS: Insufficient days supply
"DATA",9002313.93,1127,0)
667^REMS: Excessive dosage
"DATA",9002313.93,1128,0)
668^REMS: Insufficient dosage
"DATA",9002313.93,1129,0)
669^REMS: Refills not permitted
"DATA",9002313.93,1130,0)
670^REMS: Laboratory test results not documented
"DATA",9002313.93,1131,0)
671^REMS: Laboratory test not conducted within specified time period
"DATA",9002313.93,1132,0)
672^REMS: Dispensing not authorized due to laboratory test results
"DATA",9002313.93,1133,0)
673^REMS: Prescriber counseling of patient not documented
"DATA",9002313.93,1134,0)
674^REMS: Prescriber has not documented safe use conditions
"DATA",9002313.93,1135,0)
675^REMS: Prescriber has not documented patient opioid tolerance
"DATA",9002313.93,1136,0)
676^REMS: Prescriber has not documented patient contraceptive use
"DATA",9002313.93,1137,0)
677^REMS: Lack of contraindicated therapy not documented
"DATA",9002313.93,1138,0)
678^REMS: Step therapy not documented
"DATA",9002313.93,1139,0)
679^REMS: Prescriber has not enrolled patient
"DATA",9002313.93,1140,0)
680^REMS: Prescriber must renew patient enrollment
"DATA",9002313.93,1141,0)
681^REMS: Patient enrollment requirements have not been met
"DATA",9002313.93,1142,0)
682^REMS: Prescriber has not submitted patient agreement
"DATA",9002313.93,1143,0)
683^REMS: Prescriber has not verified patient's reproductive potential
"DATA",9002313.93,1144,0)
684^REMS: Patient has not documented safe use conditions
"DATA",9002313.93,1145,0)
685^REMS: Patient has not documented completed education
"DATA",9002313.93,1146,0)
686^REMS: Patient has not documented contraceptive use
"DATA",9002313.93,1147,0)
687^REMS Administrator Denied
"DATA",9002313.93,1148,0)
688^REMS: Service Billing Denied
"DATA",9002313.93,1149,0)
689^PDMP Administrator Denied
"DATA",9002313.93,1150,0)
690^PDMP: Pharmacy not contracted
"DATA",9002313.93,1151,0)
691^PDMP: Pharmacy contract not renewed
"DATA",9002313.93,1152,0)
692^PDMP: M/I Patient First Name
"DATA",9002313.93,1153,0)
693^PDMP: M/I Patient Last Name
"DATA",9002313.93,1154,0)
694^PDMP: M/I Patient Street Address
"DATA",9002313.93,1155,0)
695^PDMP: M/I Patient City
"DATA",9002313.93,1156,0)
696^PDMP: M/I Patient State or Province
"DATA",9002313.93,1157,0)
697^PDMP: M/I Patient ZIP/Postal Code
"DATA",9002313.93,1158,0)
698^PDMP: M/I Prescriber ID
"DATA",9002313.93,1159,0)
699^PDMP: M/I Prescriber Last Name
"DATA",9002313.93,1160,0)
700^PDMP: M/I Patient ID
"DATA",9002313.93,1161,0)
701^PDMP: M/I Patient Date of Birth
"DATA",9002313.93,1162,0)
702^PDMP: M/I Patient Gender
"DATA",9002313.93,1163,0)
703^PDMP: M/I Prescription Origin Code
"DATA",9002313.93,1164,0)
704^PDMP: M/I Scheduled Rx Serial Number
"DATA",9002313.93,1165,0)
705^PDMP: M/I Product/Service ID
"DATA",9002313.93,1166,0)
706^PDMP: M/I Compound Code
"DATA",9002313.93,1167,0)
707^PDMP: M/I Patient Phone Number
"DATA",9002313.93,1168,0)
708^PDMP: M/I Reported Adjudicated Program Type
"DATA",9002313.93,1169,0)
769^Medicare PartD Pd claim found, Info Report Reversal/Rebill not matched
"DATA",9002313.93,1170,0)
770^Medicare Part D Pd claim not found, Info Report Reversal not processed
"DATA",9002313.93,1171,0)
771^Compound contains unidentifiable ingredient; SCC override not allowed
"DATA",9002313.93,1172,0)
772^Compound not payable due to non-covered ingredient;no override allowed
"DATA",9002313.93,1173,0)
773^Prescriber Is Not Listed On Medicare Enrollment File
"DATA",9002313.93,1174,0)
774^Prescriber Medicare Enrollment Period Is Outside Of Claim Date Of Serv
"DATA",9002313.93,1175,0)
775^Pharmacy not listed within Medicare Fee For Service enrollment file
"DATA",9002313.93,1176,0)
776^Pharmacy enrollment with Medicare Fee For Service has terminated
"DATA",9002313.93,1177,0)
777^Plan's Prescriber data base not able to verify active state license
"DATA",9002313.93,1178,0)
A3^This Product May Be Covered Under Hospice - Medicare A
"DATA",9002313.93,1179,0)
A4^Prod May Be Covered Under Medicare-B Bndld Pymt ESRD Dialysis Facility
"DATA",9002313.93,1180,0)
710^Date Received After Requested Response Date
"DATA",9002313.93,1181,0)
711^M/I Transmission Date
"DATA",9002313.93,1182,0)
712^M/I Sending Entity Identifier
"DATA",9002313.93,1183,0)
713^M/I Receiver ID
"DATA",9002313.93,1184,0)
714^M/I Transmission File Type
"DATA",9002313.93,1185,0)
715^M/I Transmission Type
"DATA",9002313.93,1186,0)
716^Transmission File Type Not Supported
"DATA",9002313.93,1187,0)
717^M/I Submission Number
"DATA",9002313.93,1188,0)
718^M/I Audit Request Type
"DATA",9002313.93,1189,0)
719^Audit Request Type Not Supported
"DATA",9002313.93,1190,0)
720^M/I Service Provider Chain Code
"DATA",9002313.93,1191,0)
721^M/I Entity Name
"DATA",9002313.93,1192,0)
722^M/I Entity Contact First Name
"DATA",9002313.93,1193,0)
723^M/I Entity Contact Last Name
"DATA",9002313.93,1194,0)
724^M/I Entity Address Line 1
"DATA",9002313.93,1195,0)
725^M/I Entity Address Line 2
"DATA",9002313.93,1196,0)
726^M/I Entity City
"DATA",9002313.93,1197,0)
727^M/I Entity State/Province Address
"DATA",9002313.93,1198,0)
728^M/I Entity Zip/Postal Code
"DATA",9002313.93,1199,0)
729^M/I Entity Fax Number
"DATA",9002313.93,1200,0)
730^M/I Entity Email
"DATA",9002313.93,1201,0)
731^Header Response Status Not Supported for this Transmission File Type
"DATA",9002313.93,1202,0)
732^Reject Code Not Supported for this Transmission File Type
"DATA",9002313.93,1203,0)
733^M/I Claim Sequence Number
"DATA",9002313.93,1204,0)
734^M/I Audit Control Identification
"DATA",9002313.93,1205,0)
735^M/I Audit Range Qualifier
"DATA",9002313.93,1206,0)
736^Audit Range Qualifier Not Supported for this Audit Request Type
"DATA",9002313.93,1207,0)
737^M/I Audit Range Start
"DATA",9002313.93,1208,0)
738^Audit Range Start Not Supported for this Audit Request Type
"DATA",9002313.93,1209,0)
739^M/I Audit Range End
"DATA",9002313.93,1210,0)
740^Audit Range End Not Supported for this Audit Request Type
"DATA",9002313.93,1211,0)
741^Exceeds Range Start Limitations
"DATA",9002313.93,1212,0)
742^Exceeds Range End Limitations
"DATA",9002313.93,1213,0)
743^M/I Requested Response Date
"DATA",9002313.93,1214,0)
744^Response Date Requires Rescheduling
"DATA",9002313.93,1215,0)
745^M/I Estimated Arrival Time Description
"DATA",9002313.93,1216,0)
746^Estimated Arrival Time Requires Rescheduling
"DATA",9002313.93,1217,0)
747^M/I Audit Sponsor
"DATA",9002313.93,1218,0)
748^Non-Matched Processor Control Number
"DATA",9002313.93,1219,0)
749^M/I Audit Element Type 1
"DATA",9002313.93,1220,0)
750^M/I Audit Element Type 2
"DATA",9002313.93,1221,0)
751^M/I Audit Element Type 3
"DATA",9002313.93,1222,0)
752^M/I Audit Element Type 4
"DATA",9002313.93,1223,0)
753^M/I Audit Element Type 5
"DATA",9002313.93,1224,0)
754^Audit Element Type not allowable per State Regulation
"DATA",9002313.93,1225,0)
755^Audit Element Type not required for dispensing
"DATA",9002313.93,1226,0)
756^M/I Audit Element Response Type 1
"DATA",9002313.93,1227,0)
757^M/I Audit Element Response Type 2
"DATA",9002313.93,1228,0)
758^M/I Audit Element Response Type 3
"DATA",9002313.93,1229,0)
759^M/I Audit Element Response Type 4
"DATA",9002313.93,1230,0)
760^M/I Audit Element Response Type 5
"DATA",9002313.93,1231,0)
761^M/I Discrepancy Code 1
"DATA",9002313.93,1232,0)
762^M/I Discrepancy Code 2
"DATA",9002313.93,1233,0)
763^M/I Discrepancy Code 3
"DATA",9002313.93,1234,0)
764^M/I Discrepancy Message
"DATA",9002313.93,1235,0)
765^M/I Discrepancy Amount
"DATA",9002313.93,1236,0)
766^Discrepancy Amount in excess of Claimed Amount
"DATA",9002313.93,1237,0)
767^M/I Record Count
"DATA",9002313.93,1238,0)
768^Pharmacy Location has closed
"DATA",9002313.93,1239,0)
778^Invalid Transmission File Type
"DATA",9002313.93,1240,0)
779^Invalid Document Reference Number
"DATA",9002313.93,1241,0)
780^M/I Transmission Time
"DATA",9002313.93,1242,0)
781^Corrupted Transmission Control Number
"DATA",9002313.93,1243,0)
782^M/I Sender ID
"DATA",9002313.93,1244,0)
783^M/I Receiver ID
"DATA",9002313.93,1245,0)
784^M/I File Type
"DATA",9002313.93,1246,0)
785^M/I Submission Number
"DATA",9002313.93,1247,0)
786^M/I Transmission Date
"DATA",9002313.93,1248,0)
787^M/I Accumulator Balance Count
"DATA",9002313.93,1249,0)
788^M/I Accumulator Network Indicator
"DATA",9002313.93,1250,0)
789^M/I Accumulator Action Code
"DATA",9002313.93,1251,0)
790^M/I Benefit Type
"DATA",9002313.93,1252,0)
791^M/I In Network Status
"DATA",9002313.93,1253,0)
792^Duplicate Record
"DATA",9002313.93,1254,0)
793^Retry Limit Exceeded
"DATA",9002313.93,1255,0)
794^Deductible Over Accumulated
"DATA",9002313.93,1256,0)
795^Out Of Pocked Over Accumulated
"DATA",9002313.93,1257,0)
796^Maximum Benefit Amount (CAP) Over Accumulated
"DATA",9002313.93,1258,0)
797^Corrupted Transmission Control Number
"DATA",9002313.93,1259,0)
798^SA Over Accumulated
"DATA",9002313.93,1260,0)
799^LTC Over Accumulated
"DATA",9002313.93,1261,0)
800^RXC Over Accumulated
"DATA",9002313.93,1262,0)
801^M/I Total Amount Paid
"DATA",9002313.93,1263,0)
802^M/I Amount of Copay
"DATA",9002313.93,1264,0)
803^M/I Patient Pay Amount
"DATA",9002313.93,1265,0)
804^M/I Amount Attributed to Product Selection/Brand
"DATA",9002313.93,1266,0)
805^M/I Amount Attributed to Sales Tax
"DATA",9002313.93,1267,0)
806^M/I Amount Attributed to Process Fee
"DATA",9002313.93,1268,0)
807^M/I Invoiced Amount
"DATA",9002313.93,1269,0)
808^M/I Penalty Amount
"DATA",9002313.93,1270,0)
809^Mismatched Original Authorization
"DATA",9002313.93,1271,0)
810^M/I Partner Eligibility Data
"DATA",9002313.93,1272,0)
811^Partner Eligibility Mismatch
"DATA",9002313.93,1273,0)
812^M/I Record Length
"DATA",9002313.93,1274,0)
813^M/I Action Code
"DATA",9002313.93,1275,0)
814^Not Supported Accumulator Action Code
"DATA",9002313.93,1276,0)
815^Balance Mismatch
"DATA",9002313.93,1277,0)
816^Pharmacy Benefit Exclusion, May Be Covered Under Pt's Medical Benefit
"DATA",9002313.93,1278,0)
817^Pharmacy Benefit Exclusion, Covered Under Patient's Medical Benefit
"DATA",9002313.93,1279,0)
818^Medication Administration Not Covered, Plan Benefit Exclusion
"DATA",9002313.93,1280,0)
819^Plan Enrollment File Indicates Medicare As Primary Coverage
"DATA",9002313.93,1281,0)
820^Info Reporting Trans Mtchd to Rev/Rej Clm not Submitted Part D IIN PCN
"DATA",9002313.93,1282,0)
821^Info Reporting Trans Mtchd to Pd Clm Not Submitted Part D IIN PCN
"DATA",9002313.93,1283,0)
822^Drug Unrelated To The Terminal Illness &/Or Rel Cond. No Hospice Cov
"DATA",9002313.93,1284,0)
823^Drug Is Benef Liability-Not Cov By Hospice. Hosp Non-Form. Chk Oth Cov
"DATA",9002313.93,1285,0)
824^Multi-transaction transmission not allowed in current NCPDP standard
"DATA",9002313.93,1286,0)
825^Claim Date Of Service Is Outside Of Product's FDA/NSDE Marketing Dates
"DATA",9002313.93,1287,0)
826^Prescriber NPI Submitted Not Found Within Processor's NPI File
"DATA",9002313.93,1288,0)
827^Pharm Serv Prov Is Temp Suspnded From Processing Clms By Payer/Process
"DATA",9002313.93,1289,0)
828^Plan/Beneficiary Case Management Restriction In Place
"DATA",9002313.93,1290,0)
829^Clm Not Cov Due To Failure To Meet Part D Prescriber NPI Requirements
"DATA",9002313.93,1291,0)
830^Workers' Comp Or P&C Adjuster Auth Required-Pt Must Contact Adjuster
"DATA",9002313.93,1292,0)
831^Product Service ID Carve-Out, Bill Medicaid Fee For Service
"DATA",9002313.93,1293,0)
832^Prescriber NPI Not Found - NPI, MEDICARE, RX Authority Not Validated
"DATA",9002313.93,1294,0)
833^Accumulator Year Is Not Within ATBT Timeframe
"DATA",9002313.93,1295,0)
834^M/I Provider First Name
"DATA",9002313.93,1296,0)
835^M/I Provider Last Name
"DATA",9002313.93,1297,0)
836^M/I Facility ID Qualifier
"DATA",9002313.93,1298,0)
837^Facility ID Value Not Supported
"DATA",9002313.93,1299,0)
838^M/I Original Manufacturer Product ID
"DATA",9002313.93,1300,0)
839^M/I Original Manufacturer Product ID Qualifier
"DATA",9002313.93,1301,0)
840^Original Manufacturer Product ID Value Not Supported
"DATA",9002313.93,1302,0)
841^Record is Locked
"DATA",9002313.93,1303,0)
842^Record is Not Locked
"DATA",9002313.93,1304,0)
843^M/I Transmission ID
"DATA",9002313.93,1305,0)
844^M/I Other Payer Adjudicated Program Type
"DATA",9002313.93,1306,0)
845^Other Payer Reconciliation ID Is Not Used For This Transaction Code
"DATA",9002313.93,1307,0)
846^Benefit Stage Indicator Count Is Not Used For This Transaction Code
"DATA",9002313.93,1308,0)
847^Benefit Stage Indicator Count Does Not Precede Benefit Stage Indicator
"DATA",9002313.93,1309,0)
848^M/I Benefit Stage Indicator Count
"DATA",9002313.93,1310,0)
849^Benefit Stage Indicator Count Does Not Match Number of Repetitions
"DATA",9002313.93,1311,0)
850^Benefit Stage Indicator Is Not Used For This Transaction Code
"DATA",9002313.93,1312,0)
851^Benefit Stage Indicator Value Not Supported
"DATA",9002313.93,1313,0)
852^M/I Benefit Stage Indicator
"DATA",9002313.93,1314,0)
853^N Payer IIN Is Not Used For This Transaction Code
"DATA",9002313.93,1315,0)
854^M/I N Payer IIN
"DATA",9002313.93,1316,0)
855^Non-Matched N Payer IIN
"DATA",9002313.93,1317,0)
856^N Payer Processor Control Number Is Not Used For This Transaction Code
"DATA",9002313.93,1318,0)
857^M/I N Payer Processor Control Number
"DATA",9002313.93,1319,0)
858^Non-Matched N Payer Processor Control Number
"DATA",9002313.93,1320,0)
859^N Payer Group ID Is Not Used For This Transaction Code
"DATA",9002313.93,1321,0)
860^M/I N Payer Group ID
"DATA",9002313.93,1322,0)
861^Non-Matched N Payer Group ID
"DATA",9002313.93,1323,0)
862^N Payer Cardholder ID Is Not Used For This Transaction Code
"DATA",9002313.93,1324,0)
863^M/I N Payer Cardholder ID
"DATA",9002313.93,1325,0)
864^N Payer Cardholder ID Is Not Covered
"DATA",9002313.93,1326,0)
865^N Payer Adjudicated Program Type Is Not Used For This Transaction Code
"DATA",9002313.93,1327,0)
866^M/I N Payer Adjudicated Program Type
"DATA",9002313.93,1328,0)
867^N Payer Adjudicated Program Type Value Not Supported
"DATA",9002313.93,1329,0)
868^M/I N Transaction Reconciliation ID
"DATA",9002313.93,1330,0)
869^M/I N Transaction Source Type
"DATA",9002313.93,1331,0)
870^M/I Prescriber DEA Number
"DATA",9002313.93,1332,0)
871^M/I Compound Level Of Complexity
"DATA",9002313.93,1333,0)
872^Mismatch of Compound Level Complexity And Prep Environment Type
"DATA",9002313.93,1334,0)
873^M/I Preparation Environment Type
"DATA",9002313.93,1335,0)
874^M/I Preparation Environment Event Code
"DATA",9002313.93,1336,0)
875^M/I Total Prescribed Quantity Remaining
"DATA",9002313.93,1337,0)
876^Prescriptive Authority Restrictions Apply, Criteria Not Met
"DATA",9002313.93,1338,0)
877^Service Provider ID Terminated On NPPES File
"DATA",9002313.93,1339,0)
878^Service Provider ID Not Found On NPPES File
"DATA",9002313.93,1340,0)
879^Service Provider ID Excluded From Receiving CMS Enrollment Data
"DATA",9002313.93,1341,0)
880^M/I Submission Type Code
"DATA",9002313.93,1342,0)
881^Missing Submission Type Code Count
"DATA",9002313.93,1343,0)
882^M/I Do Not Dispense Before Date
"DATA",9002313.93,1344,0)
883^Date of Service Prior To Do Not Dispense Before Date
"DATA",9002313.93,1345,0)
884^M/I Multiple RX Order Group Reason Code
"DATA",9002313.93,1346,0)
885^M/I Multiple RX Order Group ID
"DATA",9002313.93,1347,0)
886^M/I Prescriber Place of Service
"DATA",9002313.93,1348,0)
887^Prev Payer is Excluded Fed Health Care Progm Copay Assist Not Allowed
"DATA",9002313.93,1349,0)
888^Beneficiary Is Enrolled In Excluded Federal Health Care Program
"DATA",9002313.93,1350,0)
889^Prescriber Not Enrolled in State Medicaid Program
"DATA",9002313.93,1351,0)
890^Pharmacy Not Enrolled in State Medicaid Program
"DATA",9002313.93,1352,0)
891^Days Supply Is Less Than Plan Minimum
"DATA",9002313.93,1353,0)
892^Pharmacy Must Attest FDA REMS Requirements Have Been Met
"DATA",9002313.93,1354,0)
893^Pharmacy Must Attest Required Patient Form Is On File
"DATA",9002313.93,1355,0)
894^Pharmacy Must Attest Plan Medical Necessity Criteria Has Been Met
"DATA",9002313.93,1356,0)
895^Allowed Number of Overrides Exhausted
"DATA",9002313.93,1357,0)
896^Other Adjudicated Program Type Of Unknown Is Not Covered
"FIA",9002313.2)
BPS NCPDP OTHER PAYER AMT PAID QUAL
"FIA",9002313.2,0)
^BPS(9002313.2,
"FIA",9002313.2,0,0)
9002313.2I
"FIA",9002313.2,0,1)
y^n^f^^n^^y^o^n
"FIA",9002313.2,0,10)

"FIA",9002313.2,0,11)

"FIA",9002313.2,0,"RLRO")

"FIA",9002313.2,0,"VR")
1.0^BPS
"FIA",9002313.2,9002313.2)
0
"FIA",9002313.2,9002313.201)
0
"FIA",9002313.22)
BPS NCPDP RESULT OF SERVICE CODE
"FIA",9002313.22,0)
^BPS(9002313.22,
"FIA",9002313.22,0,0)
9002313.22I
"FIA",9002313.22,0,1)
y^n^f^^n^^y^o^n
"FIA",9002313.22,0,10)

"FIA",9002313.22,0,11)

"FIA",9002313.22,0,"RLRO")

"FIA",9002313.22,0,"VR")
1.0^BPS
"FIA",9002313.22,9002313.22)
0
"FIA",9002313.25)
BPS NCPDP CLARIFICATION CODES
"FIA",9002313.25,0)
^BPS(9002313.25,
"FIA",9002313.25,0,0)
9002313.25I
"FIA",9002313.25,0,1)
y^n^f^^n^^y^o^n
"FIA",9002313.25,0,10)

"FIA",9002313.25,0,11)

"FIA",9002313.25,0,"RLRO")

"FIA",9002313.25,0,"VR")
1.0^BPS
"FIA",9002313.25,9002313.25)
0
"FIA",9002313.32)
BPS PAYER RESPONSE OVERRIDES
"FIA",9002313.32,0)
^BPS(9002313.32,
"FIA",9002313.32,0,0)
9002313.32
"FIA",9002313.32,0,1)
y^n^p^^^^n^^n
"FIA",9002313.32,0,10)

"FIA",9002313.32,0,11)

"FIA",9002313.32,0,"RLRO")

"FIA",9002313.32,0,"VR")
1.0^BPS
"FIA",9002313.32,9002313.32)
1
"FIA",9002313.32,9002313.32,2.1)

"FIA",9002313.511)
BPS NCPDP OVERRIDE
"FIA",9002313.511,0)
^BPS(9002313.511,
"FIA",9002313.511,0,0)
9002313.511AO
"FIA",9002313.511,0,1)
y^y^p^^^^n^^n
"FIA",9002313.511,0,10)

"FIA",9002313.511,0,11)

"FIA",9002313.511,0,"RLRO")

"FIA",9002313.511,0,"VR")
1.0^BPS
"FIA",9002313.511,9002313.511)
1
"FIA",9002313.511,9002313.511,2)

"FIA",9002313.511,9002313.5112)
1
"FIA",9002313.511,9002313.5112,.01)

"FIA",9002313.511,9002313.5112,.02)

"FIA",9002313.59)
BPS TRANSACTION
"FIA",9002313.59,0)
^BPST(
"FIA",9002313.59,0,0)
9002313.59O
"FIA",9002313.59,0,1)
y^n^p^^^^n^^n
"FIA",9002313.59,0,10)

"FIA",9002313.59,0,11)

"FIA",9002313.59,0,"RLRO")

"FIA",9002313.59,0,"VR")
1.0^BPS
"FIA",9002313.59,9002313.59)
1
"FIA",9002313.59,9002313.59141)
1
"FIA",9002313.59,9002313.59141,.03)

"FIA",9002313.77)
BPS REQUESTS
"FIA",9002313.77,0)
^BPS(9002313.77,
"FIA",9002313.77,0,0)
9002313.77
"FIA",9002313.77,0,1)
y^n^p^^^^n^^n
"FIA",9002313.77,0,10)

"FIA",9002313.77,0,11)

"FIA",9002313.77,0,"RLRO")

"FIA",9002313.77,0,"VR")
1.0^BPS
"FIA",9002313.77,9002313.77)
1
"FIA",9002313.77,9002313.7781)
1
"FIA",9002313.77,9002313.7781,.03)

"FIA",9002313.9)
BPS NCPDP SEGMENTS
"FIA",9002313.9,0)
^BPSF(9002313.9,
"FIA",9002313.9,0,0)
9002313.9
"FIA",9002313.9,0,1)
y^y^f^^n^^y^o^n
"FIA",9002313.9,0,10)

"FIA",9002313.9,0,11)

"FIA",9002313.9,0,"RLRO")

"FIA",9002313.9,0,"VR")
1.0^BPS
"FIA",9002313.9,9002313.9)
0
"FIA",9002313.91)
BPS NCPDP FIELD DEFS
"FIA",9002313.91,0)
^BPSF(9002313.91,
"FIA",9002313.91,0,0)
9002313.91I
"FIA",9002313.91,0,1)
y^y^f^^n^^y^o^n
"FIA",9002313.91,0,10)

"FIA",9002313.91,0,11)

"FIA",9002313.91,0,"RLRO")

"FIA",9002313.91,0,"VR")
1.0^BPS
"FIA",9002313.91,9002313.91)
0
"FIA",9002313.91,9002313.9101)
0
"FIA",9002313.91,9002313.9102)
0
"FIA",9002313.91,9002313.9103)
0
"FIA",9002313.91,9002313.9104)
0
"FIA",9002313.93)
BPS NCPDP REJECT CODES
"FIA",9002313.93,0)
^BPSF(9002313.93,
"FIA",9002313.93,0,0)
9002313.93I
"FIA",9002313.93,0,1)
y^n^f^^n^^y^o^n
"FIA",9002313.93,0,10)

"FIA",9002313.93,0,11)

"FIA",9002313.93,0,"RLRO")

"FIA",9002313.93,0,"VR")
1.0^BPS
"FIA",9002313.93,9002313.93)
0
"INI")
EN^BPS23PRE
"KRN",101,1702,-1)
0^18
"KRN",101,1702,0)
VALM BLANK 1^^^A^^^^^^^^LIST MANAGER
"KRN",101,1702,1,0)
^^1^1^2920203^
"KRN",101,1702,1,1,0)
This protocol is used to format spaces in menu lists.
"KRN",101,1702,10,0)
^101.01PA^0^0
"KRN",101,1705,-1)
0^16
"KRN",101,1705,0)
VALM BLANK 3^^^A^^^^^^^^
"KRN",101,1705,1,0)
^^1^1^2920203^
"KRN",101,1705,1,1,0)
This protocol is used to format spaces in menu lists.
"KRN",101,7653,-1)
0^1
"KRN",101,7653,0)
BPS VIEW ECME RX MENU^View ECME Prescription Menu^^M^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,7653,4)
20^3
"KRN",101,7653,10,0)
^101.01PA^17^17
"KRN",101,7653,10,2,0)
7654^VW^11^
"KRN",101,7653,10,2,"^")
BPS VRX NAV VIEWRX
"KRN",101,7653,10,3,0)
7655^CL^12^
"KRN",101,7653,10,3,"^")
BPS VRX NAV ECME CLAIM LOG
"KRN",101,7653,10,4,0)
7656^BE^13^
"KRN",101,7653,10,4,"^")
BPS VRX NAV BILLING EVENTS RPT
"KRN",101,7653,10,5,0)
7657^CR^21^
"KRN",101,7653,10,5,"^")
BPS VRX NAV CRI
"KRN",101,7653,10,6,0)
7658^IN^22^
"KRN",101,7653,10,6,"^")
BPS VRX NAV INS POL
"KRN",101,7653,10,7,0)
7659^LB^23^
"KRN",101,7653,10,7,"^")
BPS VRX NAV BILL LIST
"KRN",101,7653,10,8,0)
7660^CI^31^
"KRN",101,7653,10,8,"^")
BPS VRX NAV TPJI CLAIM INFORMATION
"KRN",101,7653,10,9,0)
7661^AP^32^
"KRN",101,7653,10,9,"^")
BPS VRX NAV TPJI AR ACCT PROFILE
"KRN",101,7653,10,10,0)
7662^CM^33^
"KRN",101,7653,10,10,"^")
BPS VRX NAV TPJI AR COMMENT HISTORY
"KRN",101,7653,10,11,0)
7663^ER^41^
"KRN",101,7653,10,11,"^")
BPS VRX NAV TPJI ECME RX INFO
"KRN",101,7653,10,12,0)
7664^ES^42^
"KRN",101,7653,10,12,"^")
BPS VRX NAV DG ELIG STATUS
"KRN",101,7653,10,13,0)
7665^EV^43^
"KRN",101,7653,10,13,"^")
BPS VRX NAV DG ELIG VERIFICATION
"KRN",101,7653,10,14,0)
8274^PR^44^
"KRN",101,7653,10,14,"^")
BPS VRX NAV PRINT REPORT
"KRN",101,7653,10,15,0)
1702^^14^
"KRN",101,7653,10,15,"^")
VALM BLANK 1
"KRN",101,7653,10,16,0)
8315^MP^24^
"KRN",101,7653,10,16,"^")
BPS VRX NAV MED PROFILE
"KRN",101,7653,10,17,0)
1705^^34^
"KRN",101,7653,10,17,"^")
VALM BLANK 3
"KRN",101,7653,26)
D SHOW^VALM
"KRN",101,7653,28)
Select Action: 
"KRN",101,7653,99)
64718,50580
"KRN",101,7654,-1)
0^15
"KRN",101,7654,0)
BPS VRX NAV VIEWRX^View Rx^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,7654,15)
S VALMBCK="R"
"KRN",101,7654,20)
D NAV^BPSVRX(1)
"KRN",101,7654,99)
64718,50580
"KRN",101,7655,-1)
0^7
"KRN",101,7655,0)
BPS VRX NAV ECME CLAIM LOG^Claim Log^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,7655,15)
S VALMBCK="R"
"KRN",101,7655,20)
D NAV^BPSVRX(2)
"KRN",101,7655,99)
64718,50580
"KRN",101,7656,-1)
0^3
"KRN",101,7656,0)
BPS VRX NAV BILLING EVENTS RPT^Billing Events^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,7656,15)
S VALMBCK="R"
"KRN",101,7656,20)
D NAV^BPSVRX(3)
"KRN",101,7656,99)
64718,50580
"KRN",101,7657,-1)
0^4
"KRN",101,7657,0)
BPS VRX NAV CRI^CRI Report^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,7657,15)
S VALMBCK="R"
"KRN",101,7657,20)
D NAV^BPSVRX(5)
"KRN",101,7657,99)
64718,50580
"KRN",101,7658,-1)
0^8
"KRN",101,7658,0)
BPS VRX NAV INS POL^Insurance^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,7658,15)
S VALMBCK="R"
"KRN",101,7658,20)
D NAV^BPSVRX(6)
"KRN",101,7658,99)
64718,50580
"KRN",101,7659,-1)
0^2
"KRN",101,7659,0)
BPS VRX NAV BILL LIST^List of Bills^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,7659,15)
S VALMBCK="R"
"KRN",101,7659,20)
D NAV^BPSVRX(7)
"KRN",101,7659,99)
64718,50580
"KRN",101,7660,-1)
0^13
"KRN",101,7660,0)
BPS VRX NAV TPJI CLAIM INFORMATION^TPJI Claim Info^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,7660,15)
S VALMBCK="R"
"KRN",101,7660,20)
D NAV^BPSVRX(9)
"KRN",101,7660,99)
64718,50580
"KRN",101,7661,-1)
0^11
"KRN",101,7661,0)
BPS VRX NAV TPJI AR ACCT PROFILE^TPJI Acct Pro^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,7661,15)
S VALMBCK="R"
"KRN",101,7661,20)
D NAV^BPSVRX(10)
"KRN",101,7661,99)
64718,50580
"KRN",101,7662,-1)
0^12
"KRN",101,7662,0)
BPS VRX NAV TPJI AR COMMENT HISTORY^TPJI AR Comm^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,7662,15)
S VALMBCK="R"
"KRN",101,7662,20)
D NAV^BPSVRX(11)
"KRN",101,7662,99)
64718,50580
"KRN",101,7663,-1)
0^14
"KRN",101,7663,0)
BPS VRX NAV TPJI ECME RX INFO^TPJI ECME Rx^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,7663,15)
S VALMBCK="R"
"KRN",101,7663,20)
D NAV^BPSVRX(12)
"KRN",101,7663,99)
64718,50580
"KRN",101,7664,-1)
0^5
"KRN",101,7664,0)
BPS VRX NAV DG ELIG STATUS^Elig Status^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,7664,15)
S VALMBCK="R"
"KRN",101,7664,20)
D NAV^BPSVRX(13)
"KRN",101,7664,99)
64718,50580
"KRN",101,7665,-1)
0^6
"KRN",101,7665,0)
BPS VRX NAV DG ELIG VERIFICATION^Elig Verif^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,7665,15)
S VALMBCK="R"
"KRN",101,7665,20)
D NAV^BPSVRX(14)
"KRN",101,7665,99)
64718,50580
"KRN",101,8274,-1)
0^17
"KRN",101,8274,0)
BPS VRX NAV PRINT REPORT^Print Report(s)^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,8274,15)
S VALMBCK="R"
"KRN",101,8274,20)
D REPORT^BPSVRX3
"KRN",101,8274,99)
64718,50580
"KRN",101,8315,-1)
0^9
"KRN",101,8315,0)
BPS VRX NAV MED PROFILE^Med Profile^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,8315,15)
S VALMBCK="R"
"KRN",101,8315,20)
D NAV^BPSVRX(8)
"KRN",101,8315,99)
64718,50580
"MBREQ")
1
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",632,-1)
1^1
"PKG",632,0)
E CLAIMS MGMT ENGINE^BPS^ELECTRONIC CLAIMS MGT
"PKG",632,22,0)
^9.49I^1^1
"PKG",632,22,1,0)
1.0^3041008^3041130^568
"PKG",632,22,1,"PAH",1,0)
23^3180620^520824633
"PKG",632,22,1,"PAH",1,1,0)
^^1^1^3180620
"PKG",632,22,1,"PAH",1,1,1,0)
MCCF EDI TAS EPHARMACY BUILDS 3 & 4
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
33
"RTN","BPS23PRE")
0^^B18511909
"RTN","BPS23PRE",1,0)
BPS23PRE ;AITC/CKB - Pre-install routine for BPS*1*23 ;2/21/2017
"RTN","BPS23PRE",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**23**;JUN 2004;Build 44
"RTN","BPS23PRE",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPS23PRE",4,0)
 ;
"RTN","BPS23PRE",5,0)
 ; MCCF EDI TAS ePharmacy Iteration 1 - BPS*1*23 patch pre-install
"RTN","BPS23PRE",6,0)
 Q
"RTN","BPS23PRE",7,0)
 ;
"RTN","BPS23PRE",8,0)
EN ; Entry Point for pre-install
"RTN","BPS23PRE",9,0)
 D MES^XPDUTL(" Starting pre-install for BPS*1*23")
"RTN","BPS23PRE",10,0)
 ;
"RTN","BPS23PRE",11,0)
 ; Update Reject codes explanations in file #9002313.93
"RTN","BPS23PRE",12,0)
 D REJECTS
"RTN","BPS23PRE",13,0)
 ;
"RTN","BPS23PRE",14,0)
 ; Update Result of Service Codes explanations in file #9002313.22
"RTN","BPS23PRE",15,0)
 D SVCCODE
"RTN","BPS23PRE",16,0)
 ;
"RTN","BPS23PRE",17,0)
 ; Update Clarification (file #9002313.25) and Other Payer Amount Paid Qualifier
"RTN","BPS23PRE",18,0)
 ;  codes (file #9002313.2) with new descriptions
"RTN","BPS23PRE",19,0)
 D UPDCCQC
"RTN","BPS23PRE",20,0)
 ;
"RTN","BPS23PRE",21,0)
EX ; Exit point
"RTN","BPS23PRE",22,0)
 D MES^XPDUTL(" Finished pre-install of BPS*1*23")
"RTN","BPS23PRE",23,0)
 Q
"RTN","BPS23PRE",24,0)
 ;
"RTN","BPS23PRE",25,0)
REJECTS ; Update Reject Codes with new explanations
"RTN","BPS23PRE",26,0)
 N LINE,DATA,NUM,NAME,DA,DIE,DR,CNT
"RTN","BPS23PRE",27,0)
 D MES^XPDUTL(" - Updating BPS NCPDP REJECT CODES")
"RTN","BPS23PRE",28,0)
 S CNT=0
"RTN","BPS23PRE",29,0)
 F LINE=1:1 S DATA=$P($T(URJCT+LINE),";;",2,99) Q:DATA=""  D
"RTN","BPS23PRE",30,0)
 . S DIE=9002313.93,NUM=$P(DATA,";",1)
"RTN","BPS23PRE",31,0)
 . S DA=$O(^BPSF(DIE,"B",NUM,""))
"RTN","BPS23PRE",32,0)
 . I 'DA D MES^XPDUTL(" - No IEN found for entry "_NUM) Q
"RTN","BPS23PRE",33,0)
 . S NAME=$P(DATA,";",2),DR=".02////^S X=NAME",CNT=CNT+1
"RTN","BPS23PRE",34,0)
 . D ^DIE
"RTN","BPS23PRE",35,0)
 D MES^XPDUTL(" - "_CNT_" entries updated")
"RTN","BPS23PRE",36,0)
 D MES^XPDUTL(" - Done with BPS NCPDP REJECT CODES")
"RTN","BPS23PRE",37,0)
 D MES^XPDUTL(" ")
"RTN","BPS23PRE",38,0)
 Q
"RTN","BPS23PRE",39,0)
 ;
"RTN","BPS23PRE",40,0)
URJCT ; Updated reject explanations
"RTN","BPS23PRE",41,0)
 ;;01;M/I IIN Number
"RTN","BPS23PRE",42,0)
 ;;299;Reported Adjudicated Program Type Is Not Used For This Transaction Code
"RTN","BPS23PRE",43,0)
 ;;708;PDMP: M/I Reported Adjudicated Program Type
"RTN","BPS23PRE",44,0)
 ;;820;Info Reporting Trans Mtchd to Rev/Rej Clm not Submitted Part D IIN PCN
"RTN","BPS23PRE",45,0)
 ;;821;Info Reporting Trans Mtchd to Pd Clm Not Submitted Part D IIN PCN
"RTN","BPS23PRE",46,0)
 ;;A1;ID Submitted Is Associated With An Excluded Prescriber
"RTN","BPS23PRE",47,0)
 ;;ZS;M/I Reported Adjudicated Program Type
"RTN","BPS23PRE",48,0)
 ;;
"RTN","BPS23PRE",49,0)
 ;
"RTN","BPS23PRE",50,0)
SVCCODE ; Update Result of Service Codes with new explanations
"RTN","BPS23PRE",51,0)
 N LINE,CODE,NUM,DESC,DA,DIE,DR,CNT
"RTN","BPS23PRE",52,0)
 D MES^XPDUTL(" - Updating BPS NCPDP RESULT OF SERVICE CODES")
"RTN","BPS23PRE",53,0)
 S CNT=0
"RTN","BPS23PRE",54,0)
 F LINE=1:1 S CODE=$P($T(UPDSVC+LINE),";;",2,99) Q:CODE=""  D
"RTN","BPS23PRE",55,0)
 . S DIE=9002313.22,NUM=$P(CODE,";",1)
"RTN","BPS23PRE",56,0)
 . S DA=$O(^BPS(DIE,"B",NUM,""))
"RTN","BPS23PRE",57,0)
 . I 'DA D MES^XPDUTL(" - No IEN found for entry "_NUM) Q
"RTN","BPS23PRE",58,0)
 . S DESC=$P(CODE,";",2),DR="1////^S X=DESC",CNT=CNT+1
"RTN","BPS23PRE",59,0)
 . D ^DIE
"RTN","BPS23PRE",60,0)
 D MES^XPDUTL(" - "_CNT_" entries updated")
"RTN","BPS23PRE",61,0)
 D MES^XPDUTL(" - Done with BPS NCPDP RESULT OF SERVICE CODES")
"RTN","BPS23PRE",62,0)
 D MES^XPDUTL(" ")
"RTN","BPS23PRE",63,0)
 Q
"RTN","BPS23PRE",64,0)
 ;
"RTN","BPS23PRE",65,0)
UPDSVC ; Updated Result of Service Code explanations
"RTN","BPS23PRE",66,0)
 ;;1A;DISPENSED AS IS, FALSE POSITIVE
"RTN","BPS23PRE",67,0)
 ;;1B;DISPENSED PRESCRIPTION AS IS
"RTN","BPS23PRE",68,0)
 ;;1C;DISPENSED, WITH DIFFERENT DOSE
"RTN","BPS23PRE",69,0)
 ;;1D;DISPENSED, WITH DIFFERENT DIRECTIONS
"RTN","BPS23PRE",70,0)
 ;;1E;DISPENSED, WITH DIFFERENT DRUG
"RTN","BPS23PRE",71,0)
 ;;1F;DISPENSED, WITH DIFFERENT QUANTITY
"RTN","BPS23PRE",72,0)
 ;;1G;DISPENSED, WITH PRESCRIBER APPROVAL
"RTN","BPS23PRE",73,0)
 ;;1K;DISPENSED WITH DIFFERENT DOSAGE FORM
"RTN","BPS23PRE",74,0)
 ;;2A;PRESCRIPTION NOT DISPENSED
"RTN","BPS23PRE",75,0)
 ;;2B;NOT DISPENSED, DIRECTIONS CLARIFIED
"RTN","BPS23PRE",76,0)
 ;;
"RTN","BPS23PRE",77,0)
 ;
"RTN","BPS23PRE",78,0)
UPDCCQC ;
"RTN","BPS23PRE",79,0)
 ;Update Clarification codes with new descriptions
"RTN","BPS23PRE",80,0)
 N LINE,CODE,NUM,DESC,DA,DIE,DR,CNT
"RTN","BPS23PRE",81,0)
 D MES^XPDUTL(" - Updating BPS NCPDP CLARIFICATION CODES")
"RTN","BPS23PRE",82,0)
 S CNT=0
"RTN","BPS23PRE",83,0)
 F LINE=1:1 S CODE=$P($T(UCC+LINE),";;",2,99) Q:CODE=""  D
"RTN","BPS23PRE",84,0)
 . S DIE=9002313.25,NUM=$P(CODE,";",1)
"RTN","BPS23PRE",85,0)
 . S DA=$O(^BPS(DIE,"B",NUM,""))
"RTN","BPS23PRE",86,0)
 . I 'DA D MES^XPDUTL(" - No IEN found for entry "_NUM) Q
"RTN","BPS23PRE",87,0)
 . S DESC=$P(CODE,";",2),DR=".02////^S X=DESC",CNT=CNT+1
"RTN","BPS23PRE",88,0)
 . D ^DIE
"RTN","BPS23PRE",89,0)
 D MES^XPDUTL(" - "_CNT_" entries updated")
"RTN","BPS23PRE",90,0)
 D MES^XPDUTL(" - Done with BPS NCPDP CLARIFICATION CODES")
"RTN","BPS23PRE",91,0)
 D MES^XPDUTL(" ")
"RTN","BPS23PRE",92,0)
 ;
"RTN","BPS23PRE",93,0)
 ;Update Other Payer Amount Paid Qualifier codes with new description
"RTN","BPS23PRE",94,0)
 N LINE,CODE,NUM,DESC,DA,DIE,DR,CNT
"RTN","BPS23PRE",95,0)
 D MES^XPDUTL(" - Updating BPS NCPDP OTHER PAYER AMT PAID QUAL FILE")
"RTN","BPS23PRE",96,0)
 S CNT=0
"RTN","BPS23PRE",97,0)
 F LINE=1:1 S CODE=$P($T(UQC+LINE),";;",2,99) Q:CODE=""  D
"RTN","BPS23PRE",98,0)
 . S DIE=9002313.2,NUM=$P(CODE,";",1)
"RTN","BPS23PRE",99,0)
 . S DA=$O(^BPS(DIE,"B",NUM,""))
"RTN","BPS23PRE",100,0)
 . I 'DA D MES^XPDUTL(" - No IEN found for entry "_NUM) Q
"RTN","BPS23PRE",101,0)
 . S DESC=$P(CODE,";",2),DR=".02////^S X=DESC",CNT=CNT+1
"RTN","BPS23PRE",102,0)
 . D ^DIE
"RTN","BPS23PRE",103,0)
 D MES^XPDUTL(" - "_CNT_" entries updated")
"RTN","BPS23PRE",104,0)
 D MES^XPDUTL(" - Done with BPS NCPDP OTHER PAYER AMT PAID QUAL FILE")
"RTN","BPS23PRE",105,0)
 D MES^XPDUTL(" ")
"RTN","BPS23PRE",106,0)
 Q
"RTN","BPS23PRE",107,0)
 ;
"RTN","BPS23PRE",108,0)
UCC ; Updated Clarification Code explanations
"RTN","BPS23PRE",109,0)
 ;;47;SHORTENED DAYS SUPPLY DISPENSED
"RTN","BPS23PRE",110,0)
 ;;48;DISPENSED SUBSEQUENT TO A SHORTENED DAYS SUPPLY DISPENSING
"RTN","BPS23PRE",111,0)
 ;;
"RTN","BPS23PRE",112,0)
 ;
"RTN","BPS23PRE",113,0)
UQC ; Updated Other Payer Amount Paid Qualifier explanations
"RTN","BPS23PRE",114,0)
 ;;10;PERCENTAGE TAX
"RTN","BPS23PRE",115,0)
 ;;
"RTN","BPS23PRE",116,0)
 ;
"RTN","BPSECX0")
0^10^B40356172
"RTN","BPSECX0",1,0)
BPSECX0 ;BHAM ISC/FCS/DRS/VA/DLF - Retrieve Claim submission record ;05/17/2004
"RTN","BPSECX0",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8,10,15,19,23**;JUN 2004;Build 44
"RTN","BPSECX0",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSECX0",4,0)
 ;
"RTN","BPSECX0",5,0)
 ; This routine is used to pull data from BPS Claims and its multiples
"RTN","BPSECX0",6,0)
 ; GETBPS2 - BPS Claims level
"RTN","BPSECX0",7,0)
 ; GETBPS3 - Transaction subfile
"RTN","BPSECX0",8,0)
 ; GETBPS4 - DUR subfile
"RTN","BPSECX0",9,0)
 ; GETBPS5 - COB subfile.  GETBPS5 calls the following
"RTN","BPSECX0",10,0)
 ;    GETBPS6 - Other Payer Amount Paid subfile
"RTN","BPSECX0",11,0)
 ;    GETBPS7 - Other Payer Reject Code subfile
"RTN","BPSECX0",12,0)
 ;    GETBPS8 - Other Payer Patient Responsibility subfile
"RTN","BPSECX0",13,0)
 ;    GETBPS9 - Benefits Stage subfile
"RTN","BPSECX0",14,0)
 ;
"RTN","BPSECX0",15,0)
 Q
"RTN","BPSECX0",16,0)
 ;
"RTN","BPSECX0",17,0)
 ; Retrieve BPS CLAIMS data
"RTN","BPSECX0",18,0)
 ; CLAIMIEN = ien in BPS CLAIMS (#9002313.02)
"RTN","BPSECX0",19,0)
 ; BPS - Passed by reference
"RTN","BPSECX0",20,0)
 ; returns:  BPS(9002313.02,CLAIMIEN,field #,"I")  = internal format value
"RTN","BPSECX0",21,0)
GETBPS2(CLAIMIEN,BPS) ; called from BPSECA1 > BPSOSQG > BPSOSQ2
"RTN","BPSECX0",22,0)
 ;
"RTN","BPSECX0",23,0)
 Q:$G(CLAIMIEN)=""  ; must have claim IEN
"RTN","BPSECX0",24,0)
 ;
"RTN","BPSECX0",25,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",26,0)
 ;
"RTN","BPSECX0",27,0)
 S DIC=9002313.02,DR="101:899;980:997"  ; all fields from 101-899 and 990-997, skip 901-908 (used for BPS overhead)
"RTN","BPSECX0",28,0)
 S DR=DR_";1022;1043;1045" ;Get alphanumeric NCPDP fields 1022 (A22), 1043 (A23) and 1045 (A45)- BPS*1*15
"RTN","BPSECX0",29,0)
 S DR=DR_";2008;2009;2038" ;Get alphanumeric NCPDP fields 2008 (B08), 2009 (B09) and 2038 (B38) - BPS*1*19
"RTN","BPSECX0",30,0)
 S DA=CLAIMIEN,DIQ="BPS",DIQ(0)="I"  ; "I" for internal format
"RTN","BPSECX0",31,0)
 D EN^DIQ1
"RTN","BPSECX0",32,0)
 Q
"RTN","BPSECX0",33,0)
 ;
"RTN","BPSECX0",34,0)
 ;
"RTN","BPSECX0",35,0)
 ;Retrieve data in TRANSACTIONS multiple in BPS CLAIMS
"RTN","BPSECX0",36,0)
 ; CLAIMIEN = ien in BPS CLAIMS (#9002313.02)
"RTN","BPSECX0",37,0)
 ; TRXIEN = ien in TRANSACTIONS (#9002313.0201)
"RTN","BPSECX0",38,0)
 ; BPS - Passed by reference
"RTN","BPSECX0",39,0)
 ; returns: BPS(9002313.0201,TRXIEN,field #,"I") = internal format value
"RTN","BPSECX0",40,0)
GETBPS3(CLAIMIEN,TRXIEN,BPS) ;called from BPSECA1
"RTN","BPSECX0",41,0)
 ;
"RTN","BPSECX0",42,0)
 Q:$G(CLAIMIEN)=""  Q:$G(TRXIEN)=""  ; must have both
"RTN","BPSECX0",43,0)
 ;
"RTN","BPSECX0",44,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",45,0)
 ;
"RTN","BPSECX0",46,0)
 ; There are other alphanumeric fields that could be added but since they are for segments that are not
"RTN","BPSECX0",47,0)
 ;  supported by E1, B1, B3 transactions and/or not segments not used by VA.  These can be added later, if
"RTN","BPSECX0",48,0)
 ;  needed for those segments.
"RTN","BPSECX0",49,0)
 S DIC=9002313.02,DR="400",DR(9002313.0201)="113:996"  ; all TRANSACTION fields
"RTN","BPSECX0",50,0)
 S DR(9002313.0201)=DR(9002313.0201)_";1023:1032"
"RTN","BPSECX0",51,0)
 S DR(9002313.0201)=DR(9002313.0201)_";2024:2032;2039:2043"
"RTN","BPSECX0",52,0)
 S DR(9002313.0201)=DR(9002313.0201)_";1093;2013:2021;2034;2035;2037"
"RTN","BPSECX0",53,0)
 S DR(9002313.0201)=DR(9002313.0201)_";2056:2061;2095:2097;2101;2102"
"RTN","BPSECX0",54,0)
 S DA=CLAIMIEN,DA(9002313.0201)=TRXIEN  ; IEN and sub-file IEN
"RTN","BPSECX0",55,0)
 S DIQ="BPS",DIQ(0)="I"  ; "I" for internal format
"RTN","BPSECX0",56,0)
 D EN^DIQ1
"RTN","BPSECX0",57,0)
 ;
"RTN","BPSECX0",58,0)
 ; Copy Prescriber Phone Number (498.12) to field 498 as this is where BPSOSH2
"RTN","BPSECX0",59,0)
 ;   expects to find it.  This works for now but if we implement the Prior Auth
"RTN","BPSECX0",60,0)
 ;   segment (which has multiple field labelled 498), a more complete solution
"RTN","BPSECX0",61,0)
 ;   will need to be found
"RTN","BPSECX0",62,0)
 S BPS(9002313.0201,TRXIEN,498,"I")=$G(BPS(9002313.0201,TRXIEN,498.12,"I"))
"RTN","BPSECX0",63,0)
 Q
"RTN","BPSECX0",64,0)
 ;
"RTN","BPSECX0",65,0)
 ;
"RTN","BPSECX0",66,0)
 ;
"RTN","BPSECX0",67,0)
 ;Retrieve DUR/PPS multiple data
"RTN","BPSECX0",68,0)
 ; CLAIMIEN = ien in BPS CLAIMS (#9002313.02)
"RTN","BPSECX0",69,0)
 ; TRXIEN = ien in TRANSACTIONS (#9002313.0201)
"RTN","BPSECX0",70,0)
 ; CDURIEN= DUR/PPS Multiple IEN (9002313.1001)
"RTN","BPSECX0",71,0)
 ; BPS - Passed by reference
"RTN","BPSECX0",72,0)
 ; returns: BPS(9002313.1001,CDURIEN,field #,"I") = Value
"RTN","BPSECX0",73,0)
GETBPS4(CLAIMIEN,TRXIEN,CDURIEN,BPS) ;EP - from BPSECA1
"RTN","BPSECX0",74,0)
 ;
"RTN","BPSECX0",75,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",76,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",77,0)
 Q:$G(TRXIEN)=""
"RTN","BPSECX0",78,0)
 Q:$G(CDURIEN)=""
"RTN","BPSECX0",79,0)
 ;
"RTN","BPSECX0",80,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",81,0)
 S DIC=9002313.02
"RTN","BPSECX0",82,0)
 S DR="400",DR(9002313.0201)=473.01  ;fields
"RTN","BPSECX0",83,0)
 S DR(9002313.1001)=".01;439;440;441;474;475;476"  ;fields
"RTN","BPSECX0",84,0)
 S DA=CLAIMIEN,DA(9002313.0201)=TRXIEN,DA(9002313.1001)=CDURIEN
"RTN","BPSECX0",85,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",86,0)
 D EN^DIQ1
"RTN","BPSECX0",87,0)
 ;
"RTN","BPSECX0",88,0)
 Q
"RTN","BPSECX0",89,0)
 ;
"RTN","BPSECX0",90,0)
 ;
"RTN","BPSECX0",91,0)
 ;Retrieve COB OTHER PAYMENTS multiple data
"RTN","BPSECX0",92,0)
 ; CLAIMIEN = ien in BPS CLAIMS (#9002313.02)
"RTN","BPSECX0",93,0)
 ; TRXIEN = ien in TRANSACTIONS (#9002313.0201)
"RTN","BPSECX0",94,0)
 ; BPCOBIEN= ien in COB OTHER PAYMENTS (#9002313.0401)
"RTN","BPSECX0",95,0)
 ; BPS - Passed by reference
"RTN","BPSECX0",96,0)
 ; Output: BPS(9002313.0401,BPCOBIEN,field #,"I") = Value
"RTN","BPSECX0",97,0)
GETBPS5(CLAIMIEN,TRXIEN,BPCOBIEN,BPS) ;EP - from BPSECA1
"RTN","BPSECX0",98,0)
 ;
"RTN","BPSECX0",99,0)
 Q:$G(CLAIMIEN)=""  Q:$G(TRXIEN)=""  Q:$G(BPCOBIEN)=""
"RTN","BPSECX0",100,0)
 ;
"RTN","BPSECX0",101,0)
 N BPREJCT,BPSCNT,BPSPAMT,BPSOTHR,D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",102,0)
 ;
"RTN","BPSECX0",103,0)
 S DIC=9002313.02
"RTN","BPSECX0",104,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",105,0)
 S DA(9002313.0201)=TRXIEN
"RTN","BPSECX0",106,0)
 S DA(9002313.0401)=BPCOBIEN
"RTN","BPSECX0",107,0)
 S DR="400" ; field (#400) TRANSACTIONS
"RTN","BPSECX0",108,0)
 S DR(9002313.0201)=337.01  ;field (#337.01) COB OTHER PAYMENTS
"RTN","BPSECX0",109,0)
 S DR(9002313.0401)=".01;338;339;340;341;443;471;353;392;393"  ; fields
"RTN","BPSECX0",110,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",111,0)
 D EN^DIQ1
"RTN","BPSECX0",112,0)
 ;
"RTN","BPSECX0",113,0)
 ; Loop through PAYER AMT and get the data
"RTN","BPSECX0",114,0)
 S BPSPAMT=$P($G(^BPSC(CLAIMIEN,400,TRXIEN,337,BPCOBIEN,1,0)),U,4)
"RTN","BPSECX0",115,0)
 F BPSCNT=1:1:BPSPAMT D GETBPS6(CLAIMIEN,TRXIEN,BPCOBIEN,BPSCNT,.BPS)
"RTN","BPSECX0",116,0)
 ;
"RTN","BPSECX0",117,0)
 ; Loop through OTHER PAYER REJECT CODE multiple and get the data
"RTN","BPSECX0",118,0)
 S BPREJCT=$P($G(^BPSC(CLAIMIEN,400,TRXIEN,337,BPCOBIEN,2,0)),U,4)
"RTN","BPSECX0",119,0)
 F BPSCNT=1:1:BPREJCT D GETBPS7(CLAIMIEN,TRXIEN,BPCOBIEN,BPSCNT,.BPS)
"RTN","BPSECX0",120,0)
 ;
"RTN","BPSECX0",121,0)
 ; Loop through PAYER-PATIENT RESP and get the data
"RTN","BPSECX0",122,0)
 S BPSPAMT=$P($G(^BPSC(CLAIMIEN,400,TRXIEN,337,BPCOBIEN,3,0)),U,4)
"RTN","BPSECX0",123,0)
 F BPSCNT=1:1:BPSPAMT D GETBPS8(CLAIMIEN,TRXIEN,BPCOBIEN,BPSCNT,.BPS)
"RTN","BPSECX0",124,0)
 ;
"RTN","BPSECX0",125,0)
 ; Loop through BENEFIT STAGES and get the data
"RTN","BPSECX0",126,0)
 S BPSPAMT=$P($G(^BPSC(CLAIMIEN,400,TRXIEN,337,BPCOBIEN,4,0)),U,4)
"RTN","BPSECX0",127,0)
 F BPSCNT=1:1:BPSPAMT D GETBPS9(CLAIMIEN,TRXIEN,BPCOBIEN,BPSCNT,.BPS)
"RTN","BPSECX0",128,0)
 Q
"RTN","BPSECX0",129,0)
 ;
"RTN","BPSECX0",130,0)
 ; Other Payer Amt Paid multiple (#9002313.401342)
"RTN","BPSECX0",131,0)
GETBPS6(CLAIMIEN,TRXIEN,BPCOBIEN,BPPAYAMT,BPS) ;EP - from GETBPS5
"RTN","BPSECX0",132,0)
 ;
"RTN","BPSECX0",133,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",134,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",135,0)
 Q:$G(TRXIEN)=""
"RTN","BPSECX0",136,0)
 Q:$G(BPCOBIEN)=""
"RTN","BPSECX0",137,0)
 Q:$G(BPPAYAMT)=""
"RTN","BPSECX0",138,0)
 ;
"RTN","BPSECX0",139,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",140,0)
 S DIC=9002313.02
"RTN","BPSECX0",141,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",142,0)
 S DA(9002313.0201)=TRXIEN
"RTN","BPSECX0",143,0)
 S DA(9002313.0401)=BPCOBIEN
"RTN","BPSECX0",144,0)
 S DA(9002313.401342)=BPPAYAMT
"RTN","BPSECX0",145,0)
 S DR="400" ; field (#400) TRANSACTIONS
"RTN","BPSECX0",146,0)
 S DR(9002313.0201)=337.01  ;field (#337.01) COB OTHER PAYMENTS
"RTN","BPSECX0",147,0)
 S DR(9002313.0401)=342 ;(#342) OTHER PAYER AMT PAID MULTIPLE
"RTN","BPSECX0",148,0)
 S DR(9002313.401342)=".01;431"  ;fields
"RTN","BPSECX0",149,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",150,0)
 D EN^DIQ1
"RTN","BPSECX0",151,0)
 ;
"RTN","BPSECX0",152,0)
 Q
"RTN","BPSECX0",153,0)
 ;
"RTN","BPSECX0",154,0)
 ; Other Payer Reject Code multiple (#9002313.401472)
"RTN","BPSECX0",155,0)
GETBPS7(CLAIMIEN,TRXIEN,BPCOBIEN,BPREJCT,BPS) ;EP - from GETBPS5
"RTN","BPSECX0",156,0)
 ;
"RTN","BPSECX0",157,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",158,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",159,0)
 Q:$G(TRXIEN)=""
"RTN","BPSECX0",160,0)
 Q:$G(BPCOBIEN)=""
"RTN","BPSECX0",161,0)
 Q:$G(BPREJCT)=""
"RTN","BPSECX0",162,0)
 ;
"RTN","BPSECX0",163,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",164,0)
 ;
"RTN","BPSECX0",165,0)
 S DIC=9002313.02
"RTN","BPSECX0",166,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",167,0)
 S DA(9002313.0201)=TRXIEN
"RTN","BPSECX0",168,0)
 S DA(9002313.0401)=BPCOBIEN
"RTN","BPSECX0",169,0)
 S DA(9002313.401472)=BPREJCT
"RTN","BPSECX0",170,0)
 S DR="400" ; field (#400) TRANSACTIONS
"RTN","BPSECX0",171,0)
 S DR(9002313.0201)=337.01  ;field (#337.01) COB OTHER PAYMENTS
"RTN","BPSECX0",172,0)
 S DR(9002313.0401)=472 ;(#472) OTHER PAYER REJECT CODE MLTPL
"RTN","BPSECX0",173,0)
 S DR(9002313.401472)=".01"  ;fields
"RTN","BPSECX0",174,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",175,0)
 D EN^DIQ1
"RTN","BPSECX0",176,0)
 Q
"RTN","BPSECX0",177,0)
 ;
"RTN","BPSECX0",178,0)
 ; Other Payer-Patient Resp Amt multiple (#9002313.401353)
"RTN","BPSECX0",179,0)
GETBPS8(CLAIMIEN,TRXIEN,BPCOBIEN,BPPAYAMT,BPS) ;EP - from GETBPS5
"RTN","BPSECX0",180,0)
 ;
"RTN","BPSECX0",181,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",182,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",183,0)
 Q:$G(TRXIEN)=""
"RTN","BPSECX0",184,0)
 Q:$G(BPCOBIEN)=""
"RTN","BPSECX0",185,0)
 Q:$G(BPPAYAMT)=""
"RTN","BPSECX0",186,0)
 ;
"RTN","BPSECX0",187,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",188,0)
 S DIC=9002313.02
"RTN","BPSECX0",189,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",190,0)
 S DA(9002313.0201)=TRXIEN
"RTN","BPSECX0",191,0)
 S DA(9002313.0401)=BPCOBIEN
"RTN","BPSECX0",192,0)
 S DA(9002313.401353)=BPPAYAMT
"RTN","BPSECX0",193,0)
 S DR="400" ; field (#400) TRANSACTIONS
"RTN","BPSECX0",194,0)
 S DR(9002313.0201)=337.01  ;field (#337.01) COB OTHER PAYMENTS
"RTN","BPSECX0",195,0)
 S DR(9002313.0401)=353.01  ;field (#353.01) OTHER PAYER-PATIENT RESP MLTPL
"RTN","BPSECX0",196,0)
 S DR(9002313.401353)=".01;351;352"  ;fields
"RTN","BPSECX0",197,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",198,0)
 D EN^DIQ1
"RTN","BPSECX0",199,0)
 ;
"RTN","BPSECX0",200,0)
 Q
"RTN","BPSECX0",201,0)
 ;
"RTN","BPSECX0",202,0)
 ; Benefit Stages multiple (#9002313.401392)
"RTN","BPSECX0",203,0)
GETBPS9(CLAIMIEN,TRXIEN,BPCOBIEN,BPPAYAMT,BPS) ;EP - from GETBPS5
"RTN","BPSECX0",204,0)
 ;
"RTN","BPSECX0",205,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",206,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",207,0)
 Q:$G(TRXIEN)=""
"RTN","BPSECX0",208,0)
 Q:$G(BPCOBIEN)=""
"RTN","BPSECX0",209,0)
 Q:$G(BPPAYAMT)=""
"RTN","BPSECX0",210,0)
 ;
"RTN","BPSECX0",211,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",212,0)
 S DIC=9002313.02
"RTN","BPSECX0",213,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",214,0)
 S DA(9002313.0201)=TRXIEN
"RTN","BPSECX0",215,0)
 S DA(9002313.0401)=BPCOBIEN
"RTN","BPSECX0",216,0)
 S DA(9002313.401392)=BPPAYAMT
"RTN","BPSECX0",217,0)
 S DR="400" ; field (#400) TRANSACTIONS
"RTN","BPSECX0",218,0)
 S DR(9002313.0201)=337.01  ;field (#337.01) COB OTHER PAYMENTS
"RTN","BPSECX0",219,0)
 S DR(9002313.0401)=392.01  ;field (#392.01) BENEFIT STAGE MLTPL
"RTN","BPSECX0",220,0)
 S DR(9002313.401392)=".01;393;394"  ;fields
"RTN","BPSECX0",221,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",222,0)
 D EN^DIQ1
"RTN","BPSECX0",223,0)
 ;
"RTN","BPSECX0",224,0)
 Q
"RTN","BPSFLD01")
0^24^B16648261
"RTN","BPSFLD01",1,0)
BPSFLD01 ;ALB/SS - ePharmacy secondary billing - COB fields processing ;27-FEB-09
"RTN","BPSFLD01",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8,10,23**;JUN 2004;Build 44
"RTN","BPSFLD01",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSFLD01",4,0)
 ;
"RTN","BPSFLD01",5,0)
SET337 ; 337-4C Other Payments Count
"RTN","BPSFLD01",6,0)
 ; This field is used twice.
"RTN","BPSFLD01",7,0)
 ; The total count is stored in 9002313.0201,337.  BPSOPIEN is not defined for this case.
"RTN","BPSFLD01",8,0)
 ; The individual counter is stored in 9002313.0401,.01 where BPSOPIEN is defined.
"RTN","BPSFLD01",9,0)
 ;
"RTN","BPSFLD01",10,0)
 I '$G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),330),U,7)=BPS("X") Q
"RTN","BPSFLD01",11,0)
 ;
"RTN","BPSFLD01",12,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,1)=BPS("X")
"RTN","BPSFLD01",13,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,"B",BPS("X"),BPSOPIEN)=""
"RTN","BPSFLD01",14,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,0)="^9002313.0401A^"_BPSOPIEN_U_BPSOPIEN
"RTN","BPSFLD01",15,0)
 Q
"RTN","BPSFLD01",16,0)
 ;
"RTN","BPSFLD01",17,0)
SET338 ; 338-5C Other Payer Coverage Type
"RTN","BPSFLD01",18,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,2)=BPS("X")
"RTN","BPSFLD01",19,0)
 Q
"RTN","BPSFLD01",20,0)
 ;
"RTN","BPSFLD01",21,0)
SET339 ; 339-6C Other Payer ID Qualifier
"RTN","BPSFLD01",22,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,3)=BPS("X")
"RTN","BPSFLD01",23,0)
 Q
"RTN","BPSFLD01",24,0)
 ;
"RTN","BPSFLD01",25,0)
SET340 ; 340-7C Other Payer ID
"RTN","BPSFLD01",26,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,4)=BPS("X")
"RTN","BPSFLD01",27,0)
 Q
"RTN","BPSFLD01",28,0)
 ;
"RTN","BPSFLD01",29,0)
SET443 ; 443-E8 Other Payer Date
"RTN","BPSFLD01",30,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,5)=BPS("X")
"RTN","BPSFLD01",31,0)
 Q
"RTN","BPSFLD01",32,0)
 ;
"RTN","BPSFLD01",33,0)
SET341 ; 341-HB Other Payer Amount Paid Count
"RTN","BPSFLD01",34,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,6)=BPS("X")
"RTN","BPSFLD01",35,0)
 Q
"RTN","BPSFLD01",36,0)
 ;
"RTN","BPSFLD01",37,0)
SET471 ; 471-5E Other Payer Reject Count
"RTN","BPSFLD01",38,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,7)=BPS("X")
"RTN","BPSFLD01",39,0)
 Q
"RTN","BPSFLD01",40,0)
 ;
"RTN","BPSFLD01",41,0)
SET342 ; 342-HC Other Payer Amount Paid Qualifier
"RTN","BPSFLD01",42,0)
 ; .01 field in the 9002313.401342 sub-file
"RTN","BPSFLD01",43,0)
 I '$G(BPSOPIEN)!'$G(BPSOAIEN) Q
"RTN","BPSFLD01",44,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,1,BPSOAIEN,0),U,1)=BPS("X")
"RTN","BPSFLD01",45,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,1,"B",BPS("X"),BPSOAIEN)=""
"RTN","BPSFLD01",46,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,1,0)="^9002313.401342A^"_BPSOAIEN_U_BPSOAIEN
"RTN","BPSFLD01",47,0)
 Q
"RTN","BPSFLD01",48,0)
 ;
"RTN","BPSFLD01",49,0)
SET431 ; 431-DV Other Payer Amount Paid
"RTN","BPSFLD01",50,0)
 I '$G(BPSOPIEN)!'$G(BPSOAIEN) Q
"RTN","BPSFLD01",51,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,1,BPSOAIEN,0),U,2)=BPS("X")
"RTN","BPSFLD01",52,0)
 ; This is an old field, probably not needed anymore
"RTN","BPSFLD01",53,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),430),U,1)=BPS("X")
"RTN","BPSFLD01",54,0)
 Q
"RTN","BPSFLD01",55,0)
 ;
"RTN","BPSFLD01",56,0)
SET472 ; 472-6E Other Payer Reject Code
"RTN","BPSFLD01",57,0)
 ; .01 field in the 9002313.401472 sub-file
"RTN","BPSFLD01",58,0)
 I '$G(BPSOPIEN)!'$G(BPSORIEN) Q
"RTN","BPSFLD01",59,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,2,BPSORIEN,0),U,1)=BPS("X")
"RTN","BPSFLD01",60,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,2,"B",BPS("X"),BPSORIEN)=""
"RTN","BPSFLD01",61,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,2,0)="^9002313.401472A^"_BPSORIEN_U_BPSORIEN
"RTN","BPSFLD01",62,0)
 Q
"RTN","BPSFLD01",63,0)
 ;
"RTN","BPSFLD01",64,0)
SET353 ; 353-NR Other Payer-Patient Responsibility Amount Count
"RTN","BPSFLD01",65,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,8)=BPS("X")
"RTN","BPSFLD01",66,0)
 Q
"RTN","BPSFLD01",67,0)
 ;
"RTN","BPSFLD01",68,0)
SET351 ; 351-NP Other Payer-Patient Responsibility Amount Qualifier
"RTN","BPSFLD01",69,0)
 I '$G(BPSOPIEN)!'$G(BPSCOUNT) Q
"RTN","BPSFLD01",70,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,3,BPSCOUNT,0),U,1,2)=BPSCOUNT_U_BPS("X")
"RTN","BPSFLD01",71,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,3,"B",BPSCOUNT,BPSCOUNT)=""
"RTN","BPSFLD01",72,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,3,0)="^9002313.401353A^"_BPSCOUNT_U_BPSCOUNT
"RTN","BPSFLD01",73,0)
 Q
"RTN","BPSFLD01",74,0)
 ;
"RTN","BPSFLD01",75,0)
SET352 ; 352-NQ Other Payer-Patient Responsibility Amount Paid
"RTN","BPSFLD01",76,0)
 I '$G(BPSOPIEN)!'$G(BPSCOUNT) Q
"RTN","BPSFLD01",77,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,3,BPSCOUNT,0),U,3)=BPS("X")
"RTN","BPSFLD01",78,0)
 Q
"RTN","BPSFLD01",79,0)
 ;
"RTN","BPSFLD01",80,0)
SET392 ; 392-MU Benefit Stage Count
"RTN","BPSFLD01",81,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,9)=BPS("X")
"RTN","BPSFLD01",82,0)
 Q
"RTN","BPSFLD01",83,0)
 ;
"RTN","BPSFLD01",84,0)
SET393 ; 393-MV Benefit Stage Qualifier
"RTN","BPSFLD01",85,0)
 I '$G(BPSOPIEN)!'$G(BPSOAIEN) Q
"RTN","BPSFLD01",86,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,4,BPSOAIEN,0),U,1,2)=BPSOAIEN_U_BPS("X")
"RTN","BPSFLD01",87,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,4,"B",BPSOAIEN,BPSOAIEN)=""
"RTN","BPSFLD01",88,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,4,0)="^9002313.401392^"_BPSOAIEN_U_BPSOAIEN
"RTN","BPSFLD01",89,0)
 Q
"RTN","BPSFLD01",90,0)
 ;
"RTN","BPSFLD01",91,0)
SET394 ; 394-MW Benefit Stage Amount
"RTN","BPSFLD01",92,0)
 I '$G(BPSOPIEN)!'$G(BPSOAIEN) Q
"RTN","BPSFLD01",93,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,4,BPSOAIEN,0),U,3)=BPS("X")
"RTN","BPSFLD01",94,0)
 Q
"RTN","BPSOSCD")
0^17^B106714458
"RTN","BPSOSCD",1,0)
BPSOSCD ;BHAM ISC/FCS/DRS/DLF - Set BPS() "RX" nodes for current medication ;06/01/2004
"RTN","BPSOSCD",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2,5,7,8,10,11,15,19,20,23**;JUN 2004;Build 44
"RTN","BPSOSCD",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSCD",4,0)
 ;
"RTN","BPSOSCD",5,0)
 ; reference to $$ACPHONE^IBNCPDPI supported by DBIA 4721
"RTN","BPSOSCD",6,0)
 ; reference to $$MADD^XUAF4 supported by DBIA 2171
"RTN","BPSOSCD",7,0)
 ; reference to $$GET1^DIQ(200,field) supported by DBIA 10060
"RTN","BPSOSCD",8,0)
 ; reference to $$GET1^DIQ(5,field) supported by DBIA 10056
"RTN","BPSOSCD",9,0)
 ; reference to PSS^PSO59 supported by DBIA 4827
"RTN","BPSOSCD",10,0)
 ; reference to $$SITE^VASITE supported by DBIA 10112
"RTN","BPSOSCD",11,0)
 ;
"RTN","BPSOSCD",12,0)
 Q
"RTN","BPSOSCD",13,0)
 ;
"RTN","BPSOSCD",14,0)
 ;MEDINFO, Set BPS("RX)" nodes for current medication
"RTN","BPSOSCD",15,0)
 ; Called from BPSOSCA for every transaction in the multiple
"RTN","BPSOSCD",16,0)
 ; IEN59 = IEN in BPS TRANSACTION (#9002313.59)
"RTN","BPSOSCD",17,0)
 ; IEN5902 = IEN for Insurance multiple of BPS Transactions
"RTN","BPSOSCD",18,0)
 ; MEDN = Index number of medication being processed
"RTN","BPSOSCD",19,0)
 ; BPS array shared by all of the BPSOSC* routines, created in BPSOSCA
"RTN","BPSOSCD",20,0)
 ; VAINFO created in BPSOSCB
"RTN","BPSOSCD",21,0)
MEDINFO(IEN59,IEN5902,MEDN) ;
"RTN","BPSOSCD",22,0)
 ; Verify Parameters
"RTN","BPSOSCD",23,0)
 I $G(IEN59)="" Q
"RTN","BPSOSCD",24,0)
 I $G(IEN5902)="" Q
"RTN","BPSOSCD",25,0)
 I $G(MEDN)="" Q
"RTN","BPSOSCD",26,0)
 ;
"RTN","BPSOSCD",27,0)
 N %,BPS0,DRUGIEN,IENS,J,NDC,NPI,OSITEIEN,PRICING,PROVIEN,RTN,RXI,RXIEN,RXRFIEN,VANATURE,VAOIEN,X,ADFEE
"RTN","BPSOSCD",28,0)
 ;
"RTN","BPSOSCD",29,0)
 ;RXIEN=Rx IEN, RXRFIEN=Fill Number, IENS=FileMan style IENS
"RTN","BPSOSCD",30,0)
 S BPS0=$G(^BPST(IEN59,1)),RXIEN=$P(BPS0,U,11),RXRFIEN=$P(BPS0,U,1),IENS=IEN5902_","_IEN59_","
"RTN","BPSOSCD",31,0)
 ;
"RTN","BPSOSCD",32,0)
 S RTN=$T(+0)  ; for log
"RTN","BPSOSCD",33,0)
 ; Get any user-entered overrides stored in BPS NCPDP OVERRIDES
"RTN","BPSOSCD",34,0)
 D OVERRIDE(IEN59,MEDN)
"RTN","BPSOSCD",35,0)
 ;
"RTN","BPSOSCD",36,0)
 ; Retrieve DUR values
"RTN","BPSOSCD",37,0)
 D DURVALUE(IEN59,MEDN)
"RTN","BPSOSCD",38,0)
 ;
"RTN","BPSOSCD",39,0)
 ; Build COB array for secondary claims
"RTN","BPSOSCD",40,0)
 I $$COB59^BPSUTIL2(IEN59)>1 D COB(IEN59,MEDN)
"RTN","BPSOSCD",41,0)
 ;
"RTN","BPSOSCD",42,0)
 ; Basic RX info
"RTN","BPSOSCD",43,0)
 S BPS("RX",MEDN,"IEN59")=IEN59
"RTN","BPSOSCD",44,0)
 S BPS("RX",MEDN,"RX IEN")=RXIEN
"RTN","BPSOSCD",45,0)
 S BPS("RX",MEDN,"RX Number")=RXIEN
"RTN","BPSOSCD",46,0)
 ;
"RTN","BPSOSCD",47,0)
 ; Stop if the transaction code is "E1" and there is no Prescription IEN
"RTN","BPSOSCD",48,0)
 I BPS("Transaction Code")="E1",RXIEN="" Q
"RTN","BPSOSCD",49,0)
 ;
"RTN","BPSOSCD",50,0)
 ; Get Provider Info
"RTN","BPSOSCD",51,0)
 S PROVIEN=+$$RXAPI1^BPSUTIL1(RXIEN,4,"I")
"RTN","BPSOSCD",52,0)
 S BPS("RX",MEDN,"Prescriber IEN")=PROVIEN
"RTN","BPSOSCD",53,0)
 I PROVIEN'="" D
"RTN","BPSOSCD",54,0)
 .S X=$$GET1^DIQ(200,PROVIEN,.01)
"RTN","BPSOSCD",55,0)
 .D NAMECOMP^XLFNAME(.X)
"RTN","BPSOSCD",56,0)
 .S BPS("RX",MEDN,"Prescriber Last Name")=X("FAMILY")
"RTN","BPSOSCD",57,0)
 .S BPS("RX",MEDN,"Prescriber First Name")=X("GIVEN")  ; NCPDP field 364-2J
"RTN","BPSOSCD",58,0)
 .S BPS("RX",MEDN,"Prescriber Phone #")=$$ACPHONE^IBNCPDPI ; DBIA 4721, Agent Cashier Phone Number
"RTN","BPSOSCD",59,0)
 .S BPS("RX",MEDN,"Prescriber Billing Location")=""
"RTN","BPSOSCD",60,0)
 .S NPI=$$NPI^BPSNPI("Individual_ID",+PROVIEN)
"RTN","BPSOSCD",61,0)
 .I NPI<0 S NPI=""
"RTN","BPSOSCD",62,0)
 .S BPS("RX",MEDN,"Prescriber NPI")=$P(NPI,U)
"RTN","BPSOSCD",63,0)
 .S BPS("RX",MEDN,"Primary Care Provider NPI")=$P(NPI,U)
"RTN","BPSOSCD",64,0)
 .S BPS("RX",MEDN,"Provider NPI")=$P(NPI,U)
"RTN","BPSOSCD",65,0)
 .;
"RTN","BPSOSCD",66,0)
 .S X=$$PRVADRS(IEN59,PROVIEN)  ; provide address info
"RTN","BPSOSCD",67,0)
 .S BPS("RX",MEDN,"Prescriber Street Address")=$P(X,U)_$S($P(X,U,5)]"":" ",1:"")_$P(X,U,5)  ; NCPDP field 365-2K
"RTN","BPSOSCD",68,0)
 .S BPS("RX",MEDN,"Prescriber Street Address Line 1")=$P(X,U)  ; NCPDP field B27-7U
"RTN","BPSOSCD",69,0)
 .S BPS("RX",MEDN,"Prescriber Street Address Line 2")=$P(X,U,5)  ; NCPDP field B28-8U
"RTN","BPSOSCD",70,0)
 .S BPS("RX",MEDN,"Prescriber City Address")=$P(X,U,2)  ; NCPDP field 366-2M
"RTN","BPSOSCD",71,0)
 .S BPS("RX",MEDN,"Prescriber State/Province Address")=$P(X,U,3)  ; NCPDP field 367-2N
"RTN","BPSOSCD",72,0)
 .S BPS("RX",MEDN,"Prescriber Zip/Postal Zone")=$TR($P(X,U,4)," -")  ; NCPDP field 368-2P
"RTN","BPSOSCD",73,0)
 .S BPS("RX",MEDN,"Prescriber Country")=$$COUNTRY($P(X,U,3),$P(X,U,6))    ;NCPDP field B42-3C
"RTN","BPSOSCD",74,0)
 ;
"RTN","BPSOSCD",75,0)
 ; Stop if Eligibility as we do not need any of the claim data below
"RTN","BPSOSCD",76,0)
 I BPS("Transaction Code")="E1" Q
"RTN","BPSOSCD",77,0)
 ;
"RTN","BPSOSCD",78,0)
 ; Basic Prescription Info
"RTN","BPSOSCD",79,0)
 S BPS("RX",MEDN,"Date Written")=$$RXAPI1^BPSUTIL1(RXIEN,1,"I")
"RTN","BPSOSCD",80,0)
 ; SLT - BPS*1.0*11
"RTN","BPSOSCD",81,0)
 ; if the RX Issue Date is in the future, set it to the current date
"RTN","BPSOSCD",82,0)
 I BPS("RX",MEDN,"Date Written")>DT S BPS("RX",MEDN,"Date Written")=DT
"RTN","BPSOSCD",83,0)
 S BPS("RX",MEDN,"New/Refill")=$S(RXRFIEN="":"N",1:"R")
"RTN","BPSOSCD",84,0)
 S BPS("RX",MEDN,"# Refills")=$$RXAPI1^BPSUTIL1(RXIEN,9,"I")
"RTN","BPSOSCD",85,0)
 S BPS("RX",MEDN,"Refill #")=+RXRFIEN
"RTN","BPSOSCD",86,0)
 S BPS("RX",MEDN,"Pharmacy Service Type")="01"  ; 147-U7 Pharmacy Service Type, 1=Community/Retail Pharmacy Services
"RTN","BPSOSCD",87,0)
 ;
"RTN","BPSOSCD",88,0)
 ; PreAuth and Prior Authorization
"RTN","BPSOSCD",89,0)
 ; #1.09 Prior Authorization Number, #1.15 Prior Auth Type Code
"RTN","BPSOSCD",90,0)
 S X=$G(^BPST(IEN59,1))
"RTN","BPSOSCD",91,0)
 S BPS("RX",MEDN,"Preauth #")=$P(X,U,15)_$P(X,U,9)
"RTN","BPSOSCD",92,0)
 S BPS("Claim",MEDN,"Prior Auth Type")=$P(X,U,15)
"RTN","BPSOSCD",93,0)
 S BPS("Claim",MEDN,"Prior Auth Num Sub")=$P(X,U,9)
"RTN","BPSOSCD",94,0)
 ;
"RTN","BPSOSCD",95,0)
 ; delay reason code not sent unless user specifies a code
"RTN","BPSOSCD",96,0)
 S BPS("Claim",MEDN,"Delay Reason Code")=""  ; 357-NV Delay Reason Code
"RTN","BPSOSCD",97,0)
 ;
"RTN","BPSOSCD",98,0)
 ; Calculate date/time for Time of Service 678-Y6 - BPS*1*15
"RTN","BPSOSCD",99,0)
 ; using SUBMIT REQUEST DATE TIME field #17 from earliest transmission log entry
"RTN","BPSOSCD",100,0)
 N FDTIME,IEN57 S IEN57=$O(^BPSTL("B",IEN59,0)) I IEN57 S FDTIME=$P($G(^BPSTL(IEN57,0)),U,13)
"RTN","BPSOSCD",101,0)
 ; Otherwise use current time
"RTN","BPSOSCD",102,0)
 I $G(FDTIME)="" S FDTIME=$$NOW^XLFDT
"RTN","BPSOSCD",103,0)
 ; Save time as HHMMSS
"RTN","BPSOSCD",104,0)
 S BPS("Claim",MEDN,"Time of Service")=$$LJ^XLFSTR($P(FDTIME,".",2),6,0) ; 678-Y6 Time of Service
"RTN","BPSOSCD",105,0)
 ;
"RTN","BPSOSCD",106,0)
 ; NDC = NDC number drug, try transaction 1st, if null get it from Rx/refill
"RTN","BPSOSCD",107,0)
 S BPS("RX",MEDN,"Product ID Qualifier")="03"
"RTN","BPSOSCD",108,0)
 S NDC=$P(^BPST(IEN59,1),U,2)
"RTN","BPSOSCD",109,0)
 I NDC="" S NDC=$$GETNDC^PSONDCUT(RXIEN,RXRFIEN) D LOG^BPSOSL(IEN59,RTN_"-NDC sent as "_NDC)
"RTN","BPSOSCD",110,0)
 S BPS("RX",MEDN,"NDC")=NDC
"RTN","BPSOSCD",111,0)
 ;
"RTN","BPSOSCD",112,0)
 ; Prescription Data dependent on original vs. refill
"RTN","BPSOSCD",113,0)
 D:'RXRFIEN  ; 1st fill
"RTN","BPSOSCD",114,0)
 .S BPS("RX",MEDN,"Days Supply")=$$RXAPI1^BPSUTIL1(RXIEN,8,"I")
"RTN","BPSOSCD",115,0)
 .S BPS("RX",MEDN,"DAW")=$$RXAPI1^BPSUTIL1(RXIEN,81,"I")
"RTN","BPSOSCD",116,0)
 .;Use FINISHING PERSON field as pharmacist identifier for Initials and ID - BPS*1*15 - DBIA 10112 for $$SITE
"RTN","BPSOSCD",117,0)
 .S BPS("Provider",MEDN,"Pharmacist Initials")=$$GET1^DIQ(200,+$$RXAPI1^BPSUTIL1(RXIEN,38,"I"),1)
"RTN","BPSOSCD",118,0)
 .S BPS("Provider",MEDN,"Pharmacist ID")=$P($$SITE^VASITE,U,3)_$$RJ^XLFSTR(+$$RXAPI1^BPSUTIL1(RXIEN,38,"I"),15,0)
"RTN","BPSOSCD",119,0)
 D:RXRFIEN  ; refill
"RTN","BPSOSCD",120,0)
 .S BPS("RX",MEDN,"Days Supply")=$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,RXRFIEN,1.1,"I")
"RTN","BPSOSCD",121,0)
 .S BPS("RX",MEDN,"DAW")=$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,RXRFIEN,81,"I")
"RTN","BPSOSCD",122,0)
 .;Use FILLING PERSON field as pharmacist identifier for Initials and ID - BPS*1*15 - DBIA 10112 for $$SITE
"RTN","BPSOSCD",123,0)
 .S BPS("Provider",MEDN,"Pharmacist Initials")=$$GET1^DIQ(200,+$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,RXRFIEN,19,"I"),1)
"RTN","BPSOSCD",124,0)
 .S BPS("Provider",MEDN,"Pharmacist ID")=$P($$SITE^VASITE,U,3)_$$RJ^XLFSTR(+$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,RXRFIEN,19,"I"),15,0)
"RTN","BPSOSCD",125,0)
 ;
"RTN","BPSOSCD",126,0)
 ; Origin Code, VAOIEN=PLACER ORDER # from file 52, VANATURE=NATURE OF ORDER in sub-file 100.008
"RTN","BPSOSCD",127,0)
 S VAOIEN=+$$RXAPI1^BPSUTIL1(RXIEN,39.3,"I"),VANATURE=$$GET1^DIQ(100.008,"1,"_VAOIEN_",","12")
"RTN","BPSOSCD",128,0)
 S BPS("RX",MEDN,"Origin Code")=$S(VANATURE="AUTO":2,VANATURE["ELECTRONIC":3,VANATURE="DUPLICATE":0,VANATURE["TELEPHONE":2,1:1)
"RTN","BPSOSCD",129,0)
 ;
"RTN","BPSOSCD",130,0)
 ; NCPDP field 420-DK Submission Clarification Code, default to "01" for vD.0
"RTN","BPSOSCD",131,0)
 ;   note: this is a multiple (#9002313.02354), additional codes may be added by other routines
"RTN","BPSOSCD",132,0)
 S %=$P($G(^BPST(IEN59,12)),U,3),BPS("RX",MEDN,"Submission Clarif Code",1)=$S(%]"":%,1:"01")
"RTN","BPSOSCD",133,0)
 ;
"RTN","BPSOSCD",134,0)
 ; Drug Info
"RTN","BPSOSCD",135,0)
 S DRUGIEN=$$RXAPI1^BPSUTIL1(RXIEN,6,"I")
"RTN","BPSOSCD",136,0)
 D:DRUGIEN'=""
"RTN","BPSOSCD",137,0)
 .S BPS("RX",MEDN,"Drug IEN")=DRUGIEN
"RTN","BPSOSCD",138,0)
 .S BPS("RX",MEDN,"Drug Name")=$$DRUGDIE^BPSUTIL1(DRUGIEN,.01,"E")
"RTN","BPSOSCD",139,0)
 ;
"RTN","BPSOSCD",140,0)
 ; Pricing Info
"RTN","BPSOSCD",141,0)
 S PRICING=$G(^BPST(IEN59,5))
"RTN","BPSOSCD",142,0)
 S BPS("RX",MEDN,"Quantity")=$P(PRICING,U)
"RTN","BPSOSCD",143,0)
 S BPS("RX",MEDN,"Unit Price")=$P(PRICING,U,2)
"RTN","BPSOSCD",144,0)
 S BPS("RX",MEDN,"Unit of Measure")=$P(PRICING,U,8)
"RTN","BPSOSCD",145,0)
 S BPS("RX",MEDN,"Basis of Cost Determination")=$G(VAINFO(9002313.59902,IENS,902.13,"I"))
"RTN","BPSOSCD",146,0)
 S BPS("RX",MEDN,"Usual & Customary")=$G(VAINFO(9002313.59902,IENS,902.14,"I"))
"RTN","BPSOSCD",147,0)
 S BPS("RX",MEDN,"Gross Amount Due")=$G(VAINFO(9002313.59902,IENS,902.15,"I"))
"RTN","BPSOSCD",148,0)
 S BPS("RX",MEDN,"Ingredient Cost")=$G(VAINFO(9002313.59902,IENS,902.2,"I"))
"RTN","BPSOSCD",149,0)
 S BPS("RX",MEDN,"Dispensing Fee")=$G(VAINFO(9002313.59902,IENS,902.12,"I"))
"RTN","BPSOSCD",150,0)
 S ADFEE=+$G(VAINFO(9002313.59902,IENS,902.16,"I"))
"RTN","BPSOSCD",151,0)
 I ADFEE'=0 D
"RTN","BPSOSCD",152,0)
 . S BPS("RX",MEDN,"Other Amt Qual",1)="04"
"RTN","BPSOSCD",153,0)
 . S BPS("RX",MEDN,"Other Amt Value",1)=ADFEE
"RTN","BPSOSCD",154,0)
 ;
"RTN","BPSOSCD",155,0)
 Q
"RTN","BPSOSCD",156,0)
 ;
"RTN","BPSOSCD",157,0)
 ; OVERRIDE - Retrieve OVERRIDE nodes and put into BPS array
"RTN","BPSOSCD",158,0)
 ; They will be fetched from BPS("OVERRIDE"
"RTN","BPSOSCD",159,0)
 ;   during low-level construction of the actual encoded claim packet.
"RTN","BPSOSCD",160,0)
 ; BPS("OVERRIDE",field)=value  for fields 101-401
"RTN","BPSOSCD",161,0)
 ; BPS("OVERRIDE","RX",MEDN,field) for med #N, fields 402+
"RTN","BPSOSCD",162,0)
 ; Note that if you have multiple transactions bundled, the
"RTN","BPSOSCD",163,0)
 ;   union of overrides from 101-401 apply to all; and if there's a
"RTN","BPSOSCD",164,0)
 ;   conflict, the last one overwrites the previous ones.
"RTN","BPSOSCD",165,0)
OVERRIDE(IEN59,MEDN) ;
"RTN","BPSOSCD",166,0)
 N IEN511,RETVAL
"RTN","BPSOSCD",167,0)
 S IEN511=$P(^BPST(IEN59,1),U,13) Q:'IEN511
"RTN","BPSOSCD",168,0)
 S RETVAL=$$GET511^BPSOSO2(IEN511,"BPS(""OVERRIDE"")","BPS(""OVERRIDE"",""RX"","_MEDN_")")
"RTN","BPSOSCD",169,0)
 Q
"RTN","BPSOSCD",170,0)
 ;
"RTN","BPSOSCD",171,0)
 ; DURVALUE - Will read in the DUR data from the DUR multiple
"RTN","BPSOSCD",172,0)
 ;   in BPS Transactions and store the values into BPS("RX",MEDN,DUR,....)
"RTN","BPSOSCD",173,0)
 ; NOTE - unlike most values, these fields are stored by their
"RTN","BPSOSCD",174,0)
 ;   field number.  Since they are repeating, it will ease the
"RTN","BPSOSCD",175,0)
 ;   retrieval of them, when we populate the claim.
"RTN","BPSOSCD",176,0)
DURVALUE(IEN59,MEDN) ;
"RTN","BPSOSCD",177,0)
 N DUR,DCNT,DURREC
"RTN","BPSOSCD",178,0)
 ;
"RTN","BPSOSCD",179,0)
 S (DUR,DCNT)=0
"RTN","BPSOSCD",180,0)
 F  S DCNT=$O(^BPST(IEN59,13,DCNT)) Q:'DCNT  D
"RTN","BPSOSCD",181,0)
 .S DURREC=$G(^BPST(IEN59,13,DCNT,0))
"RTN","BPSOSCD",182,0)
 .I DURREC="" Q
"RTN","BPSOSCD",183,0)
 .S DUR=DUR+1
"RTN","BPSOSCD",184,0)
 .S BPS("RX",MEDN,"DUR",DUR,473)=DUR            ;473-7E DUR/PPS Code Counter
"RTN","BPSOSCD",185,0)
 .S BPS("RX",MEDN,"DUR",DUR,439)=$P(DURREC,U,3) ;439-E4 Reason For Service Code
"RTN","BPSOSCD",186,0)
 .S BPS("RX",MEDN,"DUR",DUR,440)=$P(DURREC,U,2) ;440-E5 Professional Service Code
"RTN","BPSOSCD",187,0)
 .S BPS("RX",MEDN,"DUR",DUR,441)=$P(DURREC,U,4) ;441-E6 Result of Service Code
"RTN","BPSOSCD",188,0)
 .S BPS("RX",MEDN,"DUR",DUR,474)=""             ;474-8E DUR/PPS Level Of Effort
"RTN","BPSOSCD",189,0)
 .Q:$G(BPS("NCPDP","Version"))'=51  ; fields 475&476 not used in vD.0
"RTN","BPSOSCD",190,0)
 .S BPS("RX",MEDN,"DUR",DUR,475)=""             ;475-J9 DUR Co-Agent ID Qualifier
"RTN","BPSOSCD",191,0)
 .S BPS("RX",MEDN,"DUR",DUR,476)=""             ;476-H6 DUR Co-Agent ID
"RTN","BPSOSCD",192,0)
 ;
"RTN","BPSOSCD",193,0)
 Q
"RTN","BPSOSCD",194,0)
 ;
"RTN","BPSOSCD",195,0)
COB(IEN59,MEDN) ; process the COB fields and build the COB array
"RTN","BPSOSCD",196,0)
 ; Code for Benefit Stages multiple not implemented yet (except by
"RTN","BPSOSCD",197,0)
 ; certification)
"RTN","BPSOSCD",198,0)
 ;
"RTN","BPSOSCD",199,0)
 ; build array of COB secondary claim data from the BPS Transaction file - esg - 6/16/10
"RTN","BPSOSCD",200,0)
 N COBPIEN,APDIEN,REJIEN,DATA
"RTN","BPSOSCD",201,0)
 K BPS("RX",MEDN,"OTHER PAYER")
"RTN","BPSOSCD",202,0)
 ;
"RTN","BPSOSCD",203,0)
 ; Field 337-4C COB OTHER PAYMENTS COUNT (9002313.59,1204)  moved into [1] below
"RTN","BPSOSCD",204,0)
 S BPS("RX",MEDN,"OTHER PAYER",0)=$P($G(^BPST(IEN59,12)),U,4)
"RTN","BPSOSCD",205,0)
 ;
"RTN","BPSOSCD",206,0)
 S COBPIEN=0 F  S COBPIEN=$O(^BPST(IEN59,14,COBPIEN)) Q:'COBPIEN  D
"RTN","BPSOSCD",207,0)
 . ; Note that this will set pieces 1-7.  Piece 8 is reserved for
"RTN","BPSOSCD",208,0)
 . ;  Payer-Patient Responsibility Count and is set by the certification code
"RTN","BPSOSCD",209,0)
 . S BPS("RX",MEDN,"OTHER PAYER",COBPIEN,0)=$G(^BPST(IEN59,14,COBPIEN,0))
"RTN","BPSOSCD",210,0)
 . ;
"RTN","BPSOSCD",211,0)
 . ; retrieve data from other payer amount paid multiple
"RTN","BPSOSCD",212,0)
 . S APDIEN=0 F  S APDIEN=$O(^BPST(IEN59,14,COBPIEN,1,APDIEN)) Q:'APDIEN  D
"RTN","BPSOSCD",213,0)
 .. S DATA=$G(^BPST(IEN59,14,COBPIEN,1,APDIEN,0))
"RTN","BPSOSCD",214,0)
 .. S BPS("RX",MEDN,"OTHER PAYER",COBPIEN,"P",APDIEN,0)=$P(DATA,"^",1)_"^"_$$GET1^DIQ(9002313.2,$P(DATA,"^",2),.01)
"RTN","BPSOSCD",215,0)
 .. S BPS("RX",MEDN,"OTHER PAYER",COBPIEN,"PP",APDIEN,0)=$P(DATA,"^",3)
"RTN","BPSOSCD",216,0)
 .. I +$P(DATA,"^",3) S $P(BPS("RX",MEDN,"OTHER PAYER",COBPIEN,"PP",APDIEN,0),"^",2)="06"
"RTN","BPSOSCD",217,0)
 .. Q
"RTN","BPSOSCD",218,0)
 . ;
"RTN","BPSOSCD",219,0)
 . ; retrieve data from other payer reject multiple
"RTN","BPSOSCD",220,0)
 . S REJIEN=0 F  S REJIEN=$O(^BPST(IEN59,14,COBPIEN,2,REJIEN)) Q:'REJIEN  D
"RTN","BPSOSCD",221,0)
 .. S BPS("RX",MEDN,"OTHER PAYER",COBPIEN,"R",REJIEN,0)=$G(^BPST(IEN59,14,COBPIEN,2,REJIEN,0))
"RTN","BPSOSCD",222,0)
 Q
"RTN","BPSOSCD",223,0)
 ;
"RTN","BPSOSCD",224,0)
PRVADRS(IEN59,PRVIEN) ; site address for a provider
"RTN","BPSOSCD",225,0)
 ; returns "street address^city^st^zip"
"RTN","BPSOSCD",226,0)
 ; IEN59=BPS TRANSACTION (#9002313.59) ien
"RTN","BPSOSCD",227,0)
 ; PRVIEN=provider IEN in NEW PERSON file (#200)
"RTN","BPSOSCD",228,0)
 ;
"RTN","BPSOSCD",229,0)
 I '$G(IEN59) Q ""
"RTN","BPSOSCD",230,0)
 I '$G(PRVIEN) Q ""
"RTN","BPSOSCD",231,0)
 ;
"RTN","BPSOSCD",232,0)
 N BPSND,F,IPTR,IEN,OPSITE,PRVADDR,PRVNVA,RSLT,AD2
"RTN","BPSOSCD",233,0)
 S RSLT=""
"RTN","BPSOSCD",234,0)
 ;
"RTN","BPSOSCD",235,0)
 S PRVNVA=+$$GET1^DIQ(200,PRVIEN_",",53.91,"I")  ; NON-VA PRESCRIBER
"RTN","BPSOSCD",236,0)
 ;
"RTN","BPSOSCD",237,0)
 ; if false, it's a VA prescriber - address data found in file 4 for the VA pharmacy
"RTN","BPSOSCD",238,0)
 I 'PRVNVA D  G PRVADX
"RTN","BPSOSCD",239,0)
 .S OPSITE=$P($G(^BPST(IEN59,1)),U,4)  ; OUTPATIENT SITE ptr
"RTN","BPSOSCD",240,0)
 .Q:'OPSITE
"RTN","BPSOSCD",241,0)
 .S BPSND="BPS59" K ^TMP($J,BPSND)
"RTN","BPSOSCD",242,0)
 .D PSS^PSO59(OPSITE,"",BPSND)
"RTN","BPSOSCD",243,0)
 .S IPTR=$P($G(^TMP($J,BPSND,OPSITE,101)),U)  ; INSTITUTION ptr
"RTN","BPSOSCD",244,0)
 .S:IPTR RSLT=$$MADD^XUAF4(IPTR)_U_$$GET1^DIQ(4,IPTR_",",4.02)_U_$$GET1^DIQ(4,IPTR_",",4.04,"I")
"RTN","BPSOSCD",245,0)
 .K ^TMP($J,BPSND)
"RTN","BPSOSCD",246,0)
 ;
"RTN","BPSOSCD",247,0)
 ; Non-VA prescriber - address data found in file 200
"RTN","BPSOSCD",248,0)
 F F=.111,.112,.113,.114,.115,.116 S PRVADDR(F)=$$GET1^DIQ(200,PRVIEN_",",F)
"RTN","BPSOSCD",249,0)
 ; Get State info
"RTN","BPSOSCD",250,0)
 S PRVADDR(.115,"ABBR")="",IEN=$$GET1^DIQ(200,PRVIEN_",",.115,"I"),PRVADDR(.115,"ABBR")=$$GET1^DIQ(5,+IEN_",",1)
"RTN","BPSOSCD",251,0)
 ; Build Address Line 2
"RTN","BPSOSCD",252,0)
 S AD2=PRVADDR(.112) I PRVADDR(.113)]"" S AD2=AD2_$S(AD2]"":" ",1:"")_PRVADDR(.113)
"RTN","BPSOSCD",253,0)
 ; Build result string
"RTN","BPSOSCD",254,0)
 S RSLT=PRVADDR(.111)_U_PRVADDR(.114)_U_PRVADDR(.115,"ABBR")_U_PRVADDR(.116)_U_AD2_U_IEN
"RTN","BPSOSCD",255,0)
 ;
"RTN","BPSOSCD",256,0)
PRVADX ;
"RTN","BPSOSCD",257,0)
 Q RSLT
"RTN","BPSOSCD",258,0)
 ;
"RTN","BPSOSCD",259,0)
COUNTRY(STATE,IEN) ;
"RTN","BPSOSCD",260,0)
 ; Convert STATE abbreviation into a ISO-3166-1 country code
"RTN","BPSOSCD",261,0)
 ; Input:
"RTN","BPSOSCD",262,0)
 ;    STATE: State Abbreviation
"RTN","BPSOSCD",263,0)
 ; Output: ISO-3166-1 Country Code
"RTN","BPSOSCD",264,0)
 ;
"RTN","BPSOSCD",265,0)
 I $G(STATE)="" Q ""
"RTN","BPSOSCD",266,0)
 I '$G(IEN) Q ""
"RTN","BPSOSCD",267,0)
 I ",BC,MB,NB,NF,NS,NT,ON,PE,QC,SK,YT,CANAD,NU,"[(","_STATE_",") Q "CA" ; Canada
"RTN","BPSOSCD",268,0)
 I STATE="FG"!(STATE="EU")!(STATE="UN") Q ""  ; Foreign Country, Europe, Unknown
"RTN","BPSOSCD",269,0)
 I STATE="AS" Q "AS"  ; American Samoa
"RTN","BPSOSCD",270,0)
 I STATE="FM" Q "FM"  ; Federated States of Micronesia
"RTN","BPSOSCD",271,0)
 I STATE="GU" Q "GU"  ; Guam
"RTN","BPSOSCD",272,0)
 I STATE="MH" Q "MH"  ; Marshall Islands
"RTN","BPSOSCD",273,0)
 I STATE="MP" Q "MP"  ; Northern Mariana Islands
"RTN","BPSOSCD",274,0)
 I STATE="MX" Q "MX"  ; Mexico
"RTN","BPSOSCD",275,0)
 I STATE="PH" Q "PH"  ; Philippines
"RTN","BPSOSCD",276,0)
 I STATE="PR" Q "PR"  ; Puerto Rico
"RTN","BPSOSCD",277,0)
 I STATE="PW" Q "PW"  ; Palau
"RTN","BPSOSCD",278,0)
 I STATE="VI" Q "VI"  ; Virgin Islands
"RTN","BPSOSCD",279,0)
 I $$GET1^DIQ(5,IEN_",",2.2,"I")=1 Q "US"
"RTN","BPSOSCD",280,0)
 Q ""
"RTN","BPSOSCF")
0^11^B36317164
"RTN","BPSOSCF",1,0)
BPSOSCF ;BHAM ISC/FCS/DRS/DLF - Low-level format of .02 ;06/01/2004
"RTN","BPSOSCF",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8,10,15,19,23**;JUN 2004;Build 44
"RTN","BPSOSCF",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSCF",4,0)
 ;
"RTN","BPSOSCF",5,0)
 ; 100  (Transaction Header Segment)
"RTN","BPSOSCF",6,0)
 ; 110  (Patient Segment)
"RTN","BPSOSCF",7,0)
 ; 120  (Insurance Segment)
"RTN","BPSOSCF",8,0)
 ; 130  (Claim Segment)
"RTN","BPSOSCF",9,0)
 ; 140  (Pharmacy Provider Segment)
"RTN","BPSOSCF",10,0)
 ; 150  (Prescriber Segment)
"RTN","BPSOSCF",11,0)
 ; 160  (COB/Other Payments Segment)
"RTN","BPSOSCF",12,0)
 ; 170  (Worker's Compensation Segment)
"RTN","BPSOSCF",13,0)
 ; 180  (DUR/PPS Segment)
"RTN","BPSOSCF",14,0)
 ; 190  (Pricing Segment)
"RTN","BPSOSCF",15,0)
 ; 200  (Coupon Segment)
"RTN","BPSOSCF",16,0)
 ; 210  (Compound Segment)
"RTN","BPSOSCF",17,0)
 ; 220  (Prior Authorization Segment)
"RTN","BPSOSCF",18,0)
 ; 230  (Clinical Segment)
"RTN","BPSOSCF",19,0)
 ; 240  (Additional Documentation Segment)
"RTN","BPSOSCF",20,0)
 ; 250  (Facility Segment)
"RTN","BPSOSCF",21,0)
 ; 260  (Narrative Segment)
"RTN","BPSOSCF",22,0)
 ; 270  (Purchaser Segment)
"RTN","BPSOSCF",23,0)
 ; 280  (Service Provider Segment)
"RTN","BPSOSCF",24,0)
 ; 290  (Intermediary Segment)
"RTN","BPSOSCF",25,0)
 ; 300  (Last Known 4Rx Segment)
"RTN","BPSOSCF",26,0)
 ;
"RTN","BPSOSCF",27,0)
 ; FORMAT = IEN in BPS NCPDP FORMATS (#9002313.92)
"RTN","BPSOSCF",28,0)
 ; NODE = Segment Node
"RTN","BPSOSCF",29,0)
 ; MEDN = Transaction multiple in BPS Claims
"RTN","BPSOSCF",30,0)
XLOOP(FORMAT,NODE,MEDN) ; format claim record
"RTN","BPSOSCF",31,0)
 ;
"RTN","BPSOSCF",32,0)
 Q:$G(FORMAT)=""  Q:$G(NODE)=""  ; FORMAT, NODE required
"RTN","BPSOSCF",33,0)
 ;
"RTN","BPSOSCF",34,0)
 N FLAG,FLDIEN,FLDINFO,IEN511,IEN59,MDATA,NCPVERS,NODEIEN,ORDER,OVERRIDE,PMODE,RECMIEN,BPSX
"RTN","BPSOSCF",35,0)
 ; quit If the payer sheet doesn't have the segment
"RTN","BPSOSCF",36,0)
 I '$D(^BPSF(9002313.92,FORMAT,NODE,0)) Q
"RTN","BPSOSCF",37,0)
 ;
"RTN","BPSOSCF",38,0)
 ; VA doesn't do these segments
"RTN","BPSOSCF",39,0)
 I ",300,290,280,270,260,250,240,230,220,210,200,170,140,"[(","_NODE_",") Q
"RTN","BPSOSCF",40,0)
 ;
"RTN","BPSOSCF",41,0)
 ; Per NCPDP standard, eligibility doesn't support segments listed below
"RTN","BPSOSCF",42,0)
 I BPS("Transaction Code")="E1",",290,280,270,260,250,230,220,210,200,190,180,170,160,130,"[(","_NODE_",") Q
"RTN","BPSOSCF",43,0)
 ;
"RTN","BPSOSCF",44,0)
 ; For COB, if the payer sequence is primary, then quit and don't output the COB fields
"RTN","BPSOSCF",45,0)
 I NODE=160,$$COB59^BPSUTIL2(+$G(BPS("RX",BPS(9002313.0201),"IEN59")))=1 Q
"RTN","BPSOSCF",46,0)
 ;
"RTN","BPSOSCF",47,0)
 ; COB processing is handled differently
"RTN","BPSOSCF",48,0)
 I NODE=160 D COB^BPSOSHF(FORMAT,NODE,MEDN) Q
"RTN","BPSOSCF",49,0)
 ;
"RTN","BPSOSCF",50,0)
 ; DUR is handled differently since it is repeating
"RTN","BPSOSCF",51,0)
 I NODE=180 D DURPPS^BPSOSHF(FORMAT,NODE,MEDN) Q
"RTN","BPSOSCF",52,0)
 ;
"RTN","BPSOSCF",53,0)
 ; Loop through the fields in the segment
"RTN","BPSOSCF",54,0)
 S ORDER=0
"RTN","BPSOSCF",55,0)
 F  S ORDER=$O(^BPSF(9002313.92,FORMAT,NODE,"B",ORDER)) Q:'ORDER  D
"RTN","BPSOSCF",56,0)
 . ; Get the pointer to the BPS NCPDP FIELD DEFS table
"RTN","BPSOSCF",57,0)
 . S RECMIEN=$O(^BPSF(9002313.92,FORMAT,NODE,"B",ORDER,0))
"RTN","BPSOSCF",58,0)
 . I 'RECMIEN D IMPOSS^BPSOSUE("DB","TI","NODE="_NODE,"ORDER="_ORDER,2,$T(+0)) Q
"RTN","BPSOSCF",59,0)
 . S MDATA=^BPSF(9002313.92,FORMAT,NODE,RECMIEN,0),FLDIEN=$P(MDATA,U,2)
"RTN","BPSOSCF",60,0)
 .; Corrupt or erroneous format file
"RTN","BPSOSCF",61,0)
 . I 'FLDIEN Q
"RTN","BPSOSCF",62,0)
 . S FLDINFO=$G(^BPSF(9002313.91,FLDIEN,0))  ; BPS NCPDP FIELD DEFS (#9002313.91)
"RTN","BPSOSCF",63,0)
 . I FLDINFO="" D IMPOSS^BPSOSUE("DB,P","TI","FLDIEN="_FLDIEN,,"XLOOP",$T(+0)) Q
"RTN","BPSOSCF",64,0)
 .; Quit for 111-AM Segment Identification
"RTN","BPSOSCF",65,0)
 .;           478-H7 Other Amount Claimed Submitted Count
"RTN","BPSOSCF",66,0)
 .;           479-H8 Other Amount Claimed Submitted Qualifier
"RTN","BPSOSCF",67,0)
 .; 478 and 479 are handled by 480 and 111 is standard field for each segment
"RTN","BPSOSCF",68,0)
 . S BPSX=$P(FLDINFO,U) I ",111,478,479,"[(","_BPSX_",") Q
"RTN","BPSOSCF",69,0)
 .;
"RTN","BPSOSCF",70,0)
 .; Set override value (may not be defined so override will be null)
"RTN","BPSOSCF",71,0)
 . I $D(MEDN) S OVERRIDE=$G(BPS("OVERRIDE","RX",MEDN,FLDIEN))
"RTN","BPSOSCF",72,0)
 . E  S OVERRIDE=$G(BPS("OVERRIDE",FLDIEN))
"RTN","BPSOSCF",73,0)
 .;
"RTN","BPSOSCF",74,0)
 .; Get processing mode (S-Standard (default), X-Special Code)
"RTN","BPSOSCF",75,0)
 . S PMODE=$P(MDATA,U,3)
"RTN","BPSOSCF",76,0)
 . I PMODE="" S PMODE="S" ;default it
"RTN","BPSOSCF",77,0)
 .;
"RTN","BPSOSCF",78,0)
 .; Default FLAG and value being computed
"RTN","BPSOSCF",79,0)
 . S FLAG="GFS"
"RTN","BPSOSCF",80,0)
 . S BPS("X")=""
"RTN","BPSOSCF",81,0)
 . ;
"RTN","BPSOSCF",82,0)
 . ; If there is an override, set BPS("X") to it and
"RTN","BPSOSCF",83,0)
 . ;   only do Format and Set code
"RTN","BPSOSCF",84,0)
 . I OVERRIDE]"" S FLAG="FS",BPS("X")=OVERRIDE
"RTN","BPSOSCF",85,0)
 . ;
"RTN","BPSOSCF",86,0)
 . ; If Special Code mode is set, execute special code instead
"RTN","BPSOSCF",87,0)
 . ;   of field's Get code and change Flag to FS so Format and
"RTN","BPSOSCF",88,0)
 . ;   Set code is still done but not GET code
"RTN","BPSOSCF",89,0)
 . I PMODE="X",OVERRIDE="" D
"RTN","BPSOSCF",90,0)
 .. S FLAG="FS"
"RTN","BPSOSCF",91,0)
 .. D XSPCCODE(FORMAT,NODE,RECMIEN)
"RTN","BPSOSCF",92,0)
 . ;
"RTN","BPSOSCF",93,0)
 . ; Call XFLDCODE to do processing based on FLAG setting
"RTN","BPSOSCF",94,0)
 . D XFLDCODE(NODE,FLDIEN,FLAG)
"RTN","BPSOSCF",95,0)
 ;
"RTN","BPSOSCF",96,0)
 ; The user has the ability, via the action RED / Resubmit with
"RTN","BPSOSCF",97,0)
 ; Edits, to add to the claim fields not on the payer sheet.
"RTN","BPSOSCF",98,0)
 ; Any fields to be added to the claim are stored in the file
"RTN","BPSOSCF",99,0)
 ; BPS NCPDP OVERRIDE.
"RTN","BPSOSCF",100,0)
 ;
"RTN","BPSOSCF",101,0)
 ; Determine the transaction from the claim.  Determine
"RTN","BPSOSCF",102,0)
 ; override, and Quit if none.  Field 1.13 is NCPDP OVERRIDES,
"RTN","BPSOSCF",103,0)
 ; ptr to 9002313.511.
"RTN","BPSOSCF",104,0)
 ;
"RTN","BPSOSCF",105,0)
 S IEN59=$$CLAIM59^BPSUTIL2(BPS(9002313.02))
"RTN","BPSOSCF",106,0)
 S IEN511=$$GET1^DIQ(9002313.59,IEN59,1.13,"I")
"RTN","BPSOSCF",107,0)
 I 'IEN511 Q
"RTN","BPSOSCF",108,0)
 ;
"RTN","BPSOSCF",109,0)
 ; Loop through additional fields for the current segment (NODE) and
"RTN","BPSOSCF",110,0)
 ; call XFLDCODE to add to the claim.
"RTN","BPSOSCF",111,0)
 ;
"RTN","BPSOSCF",112,0)
 S NODEIEN=$O(^BPSF(9002313.9,"C",NODE,""))
"RTN","BPSOSCF",113,0)
 I 'NODEIEN Q
"RTN","BPSOSCF",114,0)
 S BPSX=""
"RTN","BPSOSCF",115,0)
 F  S BPSX=$O(^BPS(9002313.511,IEN511,2,"SEG",NODEIEN,BPSX)) Q:BPSX=""  D
"RTN","BPSOSCF",116,0)
 . S FLDIEN=$$GET1^DIQ(9002313.5112,BPSX_","_IEN511_",",.01,"I")
"RTN","BPSOSCF",117,0)
 . S BPS("X")=""
"RTN","BPSOSCF",118,0)
 . D XFLDCODE(NODE,FLDIEN,"GFS")
"RTN","BPSOSCF",119,0)
 ;
"RTN","BPSOSCF",120,0)
 Q
"RTN","BPSOSCF",121,0)
 ;
"RTN","BPSOSCF",122,0)
 ;
"RTN","BPSOSCF",123,0)
 ; Execute Get, Format and/or Set MUMPS code for NCPDP Field
"RTN","BPSOSCF",124,0)
 ;
"RTN","BPSOSCF",125,0)
 ; Parameters:   NODE    -  Segment Node
"RTN","BPSOSCF",126,0)
 ;               FLDIEN  -  NCPDP Field Definitions IEN
"RTN","BPSOSCF",127,0)
 ;               FLAG    -  If variable contains:
"RTN","BPSOSCF",128,0)
 ;                          "G" - Execute Get Code
"RTN","BPSOSCF",129,0)
 ;                          "F" - Execute Format Code
"RTN","BPSOSCF",130,0)
 ;                          "S" - Execute S Code
"RTN","BPSOSCF",131,0)
 ;
"RTN","BPSOSCF",132,0)
 ;  When called by the DURPPS^BPSOSHF, DUR is also set and used
"RTN","BPSOSCF",133,0)
 ;   by the SET logic for the DUR fields.  This variable is newed
"RTN","BPSOSCF",134,0)
 ;   by the calling routine
"RTN","BPSOSCF",135,0)
XFLDCODE(NODE,FLDIEN,FLAG) ;EP
"RTN","BPSOSCF",136,0)
 ; 5.1 loops through the 10, 25, 30 nodes
"RTN","BPSOSCF",137,0)
 ;
"RTN","BPSOSCF",138,0)
 N FNODE,INDEX,MCODE,NCPVERS,X
"RTN","BPSOSCF",139,0)
 ;
"RTN","BPSOSCF",140,0)
 ; Check if record exists and FLAG variable is set correctly
"RTN","BPSOSCF",141,0)
 ; Changed from Q: to give fatal error - 10/18/2000
"RTN","BPSOSCF",142,0)
 I 'FLDIEN D IMPOSS^BPSOSUE("DB,P","TI","FLDIEN="_FLDIEN,,"XFLDCODE",$T(+0)) Q
"RTN","BPSOSCF",143,0)
 I FLAG="" D IMPOSS^BPSOSUE("DB,P","TI","FLAG null",,"XFLDCODE",$T(+0)) Q
"RTN","BPSOSCF",144,0)
 ; get NCPDP version, default to vD.0
"RTN","BPSOSCF",145,0)
 S NCPVERS=$G(BPS("NCPDP","Version")) S:NCPVERS="" NCPVERS="D0"
"RTN","BPSOSCF",146,0)
 ; Loop through GET CODE, D0 FORMAT (or FORMAT), SET CODE w-p fields and execute code
"RTN","BPSOSCF",147,0)
 F FNODE=10,20,25,30 D
"RTN","BPSOSCF",148,0)
 .I FNODE=25,NCPVERS="D0" Q  ; node 25 is FORMAT CODE for versions before D.0
"RTN","BPSOSCF",149,0)
 .I FNODE=20,NCPVERS'="D0" Q  ; node 20 is FORMAT CODE for vD.0
"RTN","BPSOSCF",150,0)
 .I FLAG'[$S(FNODE=10:"G",FNODE=25!(FNODE=20):"F",FNODE=30:"S",1:"") Q
"RTN","BPSOSCF",151,0)
 .I '$D(^BPSF(9002313.91,FLDIEN,FNODE,0)) D IMPOSS^BPSOSUE("DB","TI","FLDIEN="_FLDIEN,"FNODE="_FNODE,"XFLDCODE",$T(+0))
"RTN","BPSOSCF",152,0)
 .; Loop through the W-P field and execute each line
"RTN","BPSOSCF",153,0)
 .S INDEX=0
"RTN","BPSOSCF",154,0)
 .F  S INDEX=$O(^BPSF(9002313.91,FLDIEN,FNODE,INDEX)) Q:'INDEX  D
"RTN","BPSOSCF",155,0)
 ..; If doing SET code and if this is not the header segment, add the ID prefix
"RTN","BPSOSCF",156,0)
 ..I FNODE=30,NODE'=100 S BPS("X")=$P($G(^BPSF(9002313.91,FLDIEN,5)),U,1)_BPS("X")
"RTN","BPSOSCF",157,0)
 ..; Get the code and xecute
"RTN","BPSOSCF",158,0)
 ..S MCODE=$G(^BPSF(9002313.91,FLDIEN,FNODE,INDEX,0))
"RTN","BPSOSCF",159,0)
 ..Q:MCODE=""  Q:$E(MCODE,1)=";"  ; no M code or comment
"RTN","BPSOSCF",160,0)
 ..X MCODE
"RTN","BPSOSCF",161,0)
 ;
"RTN","BPSOSCF",162,0)
 Q
"RTN","BPSOSCF",163,0)
 ;
"RTN","BPSOSCF",164,0)
 ;
"RTN","BPSOSCF",165,0)
 ; Execute Special Code (for NCPDP Field within NCPDP Record)
"RTN","BPSOSCF",166,0)
 ; FORMAT = NCPDP Record Format IEN (9002313.92)
"RTN","BPSOSCF",167,0)
 ; NODE = Global node value (100,110,120,130,140)
"RTN","BPSOSCF",168,0)
 ; RECMIEN = Field Multiple IEN
"RTN","BPSOSCF",169,0)
XSPCCODE(FORMAT,NODE,RECMIEN) ;EP - Above and BPSOSHR
"RTN","BPSOSCF",170,0)
 ; BPS NCPDP FORMATS (#9002313.92)
"RTN","BPSOSCF",171,0)
 I '$D(^BPSF(9002313.92,FORMAT,NODE,RECMIEN,0)) D IMPOSS^BPSOSUE("DB,P","TI","no special code there to XECUTE","FORMAT="_FORMAT,"XSPCCODE",$T(+0)) Q
"RTN","BPSOSCF",172,0)
 N INDEX,MCODE
"RTN","BPSOSCF",173,0)
 S INDEX=0
"RTN","BPSOSCF",174,0)
 F  S INDEX=$O(^BPSF(9002313.92,FORMAT,NODE,RECMIEN,1,INDEX)) Q:'INDEX  D
"RTN","BPSOSCF",175,0)
 . S MCODE=$G(^BPSF(9002313.92,FORMAT,NODE,RECMIEN,1,INDEX,0))
"RTN","BPSOSCF",176,0)
 . Q:MCODE=""
"RTN","BPSOSCF",177,0)
 . Q:$E(MCODE,1)=";"
"RTN","BPSOSCF",178,0)
 . X MCODE
"RTN","BPSOSCF",179,0)
 Q
"RTN","BPSOSCF",180,0)
 ;
"RTN","BPSOSH2")
0^12^B181409797
"RTN","BPSOSH2",1,0)
BPSOSH2 ;BHAM ISC/SD/lwj/DLF - Assemble formatted claim ;06/01/2004
"RTN","BPSOSH2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8,10,15,19,20,23**;JUN 2004;Build 44
"RTN","BPSOSH2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSH2",4,0)
 ;
"RTN","BPSOSH2",5,0)
 ;    5.1 had 14 claim segments (Header, Patient, Insurance, Claim
"RTN","BPSOSH2",6,0)
 ;                                Pharmacy Provider, Prescriber,
"RTN","BPSOSH2",7,0)
 ;                                COB, Workers Comp, DUR, Pricing,
"RTN","BPSOSH2",8,0)
 ;                                Coupon, Compound, Prior Auth,
"RTN","BPSOSH2",9,0)
 ;                                Clinical)
"RTN","BPSOSH2",10,0)
 ;
"RTN","BPSOSH2",11,0)
 ;    D.0 added 3 new request segments (Additional Documentation,
"RTN","BPSOSH2",12,0)
 ;                                       Facility, Narrative)
"RTN","BPSOSH2",13,0)
 ;
"RTN","BPSOSH2",14,0)
 ;    D.1 - D.9 introduces Alphanumeric NCPDP numbers and new
"RTN","BPSOSH2",15,0)
 ;                              Purchase and Provider segments
"RTN","BPSOSH2",16,0)
 ;
"RTN","BPSOSH2",17,0)
 ;    E.0 - E.6 added 2 new request segments (Intermediary, Last
"RTN","BPSOSH2",18,0)
 ;                                             Known 4RX)
"RTN","BPSOSH2",19,0)
 ;
"RTN","BPSOSH2",20,0)
 ;    5.1/D.0 requires field identifiers and separators on all fields
"RTN","BPSOSH2",21,0)
 ;        other than the header
"RTN","BPSOSH2",22,0)
 ;    5.1/D.0 segment separators are required prior to each segment
"RTN","BPSOSH2",23,0)
 ;        following the header
"RTN","BPSOSH2",24,0)
 ;    5.1/D.0 group separators appear at the end of each
"RTN","BPSOSH2",25,0)
 ;        transaction (prescription)
"RTN","BPSOSH2",26,0)
 ;    5.1/D.0 only want to send segments that have data - a new
"RTN","BPSOSH2",27,0)
 ;        segment record will hold the data until we are sure
"RTN","BPSOSH2",28,0)
 ;        we have something to send
"RTN","BPSOSH2",29,0)
 ;
"RTN","BPSOSH2",30,0)
 ; Put together ASCII formatted record per the Payer Sheet Definition
"RTN","BPSOSH2",31,0)
 ; Input:  
"RTN","BPSOSH2",32,0)
 ;   NODES - "100^110^120" or "130^140^150^160^170^180^190^200^210^220^230^240^250^260^270^280^290^300"
"RTN","BPSOSH2",33,0)
 ; Passed by Ref:
"RTN","BPSOSH2",34,0)
 ;  .IEN - Internal Entry Number array
"RTN","BPSOSH2",35,0)
 ;  .BPS - Formatted Data Array with claim and transaction data
"RTN","BPSOSH2",36,0)
 ;  .REC - Formatted ASCII record (result)
"RTN","BPSOSH2",37,0)
 ;
"RTN","BPSOSH2",38,0)
XLOOP(NODES,IEN,BPS,REC) ;EP - from BPSECA1
"RTN","BPSOSH2",39,0)
 ;
"RTN","BPSOSH2",40,0)
 N DATAFND,FDATA,FLAG,FLDDATA,FLDID,FLDIEN,FLDNUM,IEN511,IEN59,INDEX,MDATA,NODE,NODEIEN,ORDER,PMODE,RECMIEN,SEGREC
"RTN","BPSOSH2",41,0)
 N VER,TYPE,BPSX
"RTN","BPSOSH2",42,0)
 ;
"RTN","BPSOSH2",43,0)
 ; Get payer sheet version and transaction type
"RTN","BPSOSH2",44,0)
 S VER=$P($G(^BPSF(9002313.92,+$G(IEN(9002313.92)),1)),U,2)
"RTN","BPSOSH2",45,0)
 S TYPE=$G(BPS(9002313.02,+$G(IEN(9002313.02)),103,"I"))
"RTN","BPSOSH2",46,0)
 ;
"RTN","BPSOSH2",47,0)
 ; Loop through the NODES variable delimited by U
"RTN","BPSOSH2",48,0)
 F INDEX=1:1:$L(NODES,U) D
"RTN","BPSOSH2",49,0)
 . S NODE=$P(NODES,U,INDEX) Q:NODE=""
"RTN","BPSOSH2",50,0)
 . ;
"RTN","BPSOSH2",51,0)
 . ; VA does not support these segments
"RTN","BPSOSH2",52,0)
 . Q:",300,290,280,270,260,250,240,230,220,210,200,170,140,"[NODE
"RTN","BPSOSH2",53,0)
 . ;
"RTN","BPSOSH2",54,0)
 . ; Quit if the payer sheet does not have the node
"RTN","BPSOSH2",55,0)
 . Q:'$D(^BPSF(9002313.92,+IEN(9002313.92),NODE,0))
"RTN","BPSOSH2",56,0)
 . ;
"RTN","BPSOSH2",57,0)
 . ; Per NCPDP standard, reversals do not support segments listed below
"RTN","BPSOSH2",58,0)
 . I TYPE="B2",",300,290,280,270,260,250,240,230,220,210,200,170,150,140,"[NODE Q
"RTN","BPSOSH2",59,0)
 . I TYPE="B2",VER="D0",NODE=110 Q  ;Patient segment not supported in a D0 reversal
"RTN","BPSOSH2",60,0)
 . ;
"RTN","BPSOSH2",61,0)
 . ; Per NCPDP standard, eligibility does not support segments listed below
"RTN","BPSOSH2",62,0)
 . I TYPE="E1",",290,280,270,260,250,230,220,210,200,190,180,170,160,130,"[NODE Q
"RTN","BPSOSH2",63,0)
 . ;
"RTN","BPSOSH2",64,0)
 . S DATAFND=0  ; indicates if data is on the segment for us to send
"RTN","BPSOSH2",65,0)
 . S SEGREC=""  ; segment's information
"RTN","BPSOSH2",66,0)
 . ;
"RTN","BPSOSH2",67,0)
 . D:NODE=180 PROCDUR
"RTN","BPSOSH2",68,0)
 . ;
"RTN","BPSOSH2",69,0)
 . ;COB fields
"RTN","BPSOSH2",70,0)
 . D:NODE=160 PROCCOB
"RTN","BPSOSH2",71,0)
 . ;
"RTN","BPSOSH2",72,0)
 . S ORDER=""
"RTN","BPSOSH2",73,0)
 . F  D  Q:'ORDER
"RTN","BPSOSH2",74,0)
 .. ;
"RTN","BPSOSH2",75,0)
 .. Q:NODE=180  ; DUR/PPS section (repeating), already processed
"RTN","BPSOSH2",76,0)
 .. Q:NODE=160  ; COB data processed earlier
"RTN","BPSOSH2",77,0)
 .. S ORDER=$O(^BPSF(9002313.92,+IEN(9002313.92),NODE,"B",ORDER))
"RTN","BPSOSH2",78,0)
 .. Q:'ORDER
"RTN","BPSOSH2",79,0)
 .. S RECMIEN=""
"RTN","BPSOSH2",80,0)
 .. S RECMIEN=$O(^BPSF(9002313.92,+IEN(9002313.92),NODE,"B",ORDER,RECMIEN))
"RTN","BPSOSH2",81,0)
 .. Q:RECMIEN=""
"RTN","BPSOSH2",82,0)
 .. ;
"RTN","BPSOSH2",83,0)
 .. S MDATA=$G(^BPSF(9002313.92,+IEN(9002313.92),NODE,RECMIEN,0))
"RTN","BPSOSH2",84,0)
 .. Q:MDATA=""
"RTN","BPSOSH2",85,0)
 .. ;
"RTN","BPSOSH2",86,0)
 .. S FLDIEN=$P(MDATA,U,2)
"RTN","BPSOSH2",87,0)
 .. Q:FLDIEN=""
"RTN","BPSOSH2",88,0)
 .. ;
"RTN","BPSOSH2",89,0)
 .. S FDATA=$G(^BPSF(9002313.91,FLDIEN,0))
"RTN","BPSOSH2",90,0)
 .. Q:FDATA=""
"RTN","BPSOSH2",91,0)
 .. S FLDNUM=$P(FDATA,U,1)
"RTN","BPSOSH2",92,0)
 .. Q:FLDNUM=""
"RTN","BPSOSH2",93,0)
 .. ;Check for alphanumeric NCPDP numbers - BPS*1*15
"RTN","BPSOSH2",94,0)
 .. I $P(FLDNUM,".")'?3N S FLDNUM=$$VNUM^BPSECMPS(FLDNUM) Q:'FLDNUM
"RTN","BPSOSH2",95,0)
 .. ;
"RTN","BPSOSH2",96,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",97,0)
 .. ;
"RTN","BPSOSH2",98,0)
 .. ;header data
"RTN","BPSOSH2",99,0)
 .. S:NODE<130 FLDDATA=$G(BPS(9002313.02,IEN(9002313.02),FLDNUM,"I"))
"RTN","BPSOSH2",100,0)
 .. ;
"RTN","BPSOSH2",101,0)
 .. ;transaction data
"RTN","BPSOSH2",102,0)
 .. S:NODE>120 FLDDATA=$G(BPS(9002313.0201,IEN(9002313.0201),FLDNUM,"I"))
"RTN","BPSOSH2",103,0)
 .. I $TR($E(FLDDATA,3,999),"0 {}")'="" S DATAFND=1 ;BPS*1*15 - allow for zero in NCPDP ID
"RTN","BPSOSH2",104,0)
 .. ;
"RTN","BPSOSH2",105,0)
 .. ;check if this is the seg id - call this after fld chk since
"RTN","BPSOSH2",106,0)
 .. ;we don't want to send the segment if this is all there is
"RTN","BPSOSH2",107,0)
 .. I (NODE>100)&(FLDNUM=111) S FLDDATA=$$SEGID(NODE)
"RTN","BPSOSH2",108,0)
 .. ;
"RTN","BPSOSH2",109,0)
 .. ; Special code to handle the Submission Clarification Code (420) repeating group
"RTN","BPSOSH2",110,0)
 .. I FLDNUM=420 D SUBCLAR(.DATAFND,.IEN,.SEGREC) Q
"RTN","BPSOSH2",111,0)
 .. ;
"RTN","BPSOSH2",112,0)
 .. ; Special code to handle the Other Amount Claimed repeating group
"RTN","BPSOSH2",113,0)
 .. I FLDNUM=480 D OAMTCLMD(.DATAFND,.IEN,.SEGREC) Q
"RTN","BPSOSH2",114,0)
 .. I FLDNUM=479 Q  ; fields 479 & 480 handled as a pair in OAMTCLMD
"RTN","BPSOSH2",115,0)
 .. ;
"RTN","BPSOSH2",116,0)
 .. Q:FLDDATA=""   ;lje;7/23/03; don't want extra field separators when field is blank for testing for WebMD.
"RTN","BPSOSH2",117,0)
 .. ;
"RTN","BPSOSH2",118,0)
 .. S:NODE=100 SEGREC=SEGREC_FLDDATA  ;no FS on the header rec
"RTN","BPSOSH2",119,0)
 .. S:NODE>100 SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",120,0)
 . ;
"RTN","BPSOSH2",121,0)
 . ; If no data on this segment, Quit, don't check for addl. fields.
"RTN","BPSOSH2",122,0)
 . ;
"RTN","BPSOSH2",123,0)
 . I 'DATAFND Q
"RTN","BPSOSH2",124,0)
 . ;
"RTN","BPSOSH2",125,0)
 . ; The user has the ability, via the action RED / Resubmit with
"RTN","BPSOSH2",126,0)
 . ; Edits, to add claim fields not on the payer sheet.  Any
"RTN","BPSOSH2",127,0)
 . ; fields to be added to the claim are stored in the file BPS NCPDP
"RTN","BPSOSH2",128,0)
 . ; OVERRIDE.  Pull the BPS TRANSACTION from the BPS CLAIMS file,
"RTN","BPSOSH2",129,0)
 . ; then pull the field NCPDP OVERRIDES.  If populated, pull any
"RTN","BPSOSH2",130,0)
 . ; additional fields.
"RTN","BPSOSH2",131,0)
 . ;
"RTN","BPSOSH2",132,0)
 . S IEN59=$$GET1^DIQ(9002313.02,IEN(9002313.02),.08,"I")
"RTN","BPSOSH2",133,0)
 . S IEN511=$$GET1^DIQ(9002313.59,IEN59,1.13,"I")
"RTN","BPSOSH2",134,0)
 . I IEN511 D
"RTN","BPSOSH2",135,0)
 . . ;
"RTN","BPSOSH2",136,0)
 . . ; Loop through additional fields for the current segment
"RTN","BPSOSH2",137,0)
 . . ; (NODE) and add to the claim.
"RTN","BPSOSH2",138,0)
 . . ;
"RTN","BPSOSH2",139,0)
 . . S NODEIEN=$O(^BPSF(9002313.9,"C",NODE,""))
"RTN","BPSOSH2",140,0)
 . . I 'NODEIEN Q
"RTN","BPSOSH2",141,0)
 . . S BPSX=""
"RTN","BPSOSH2",142,0)
 . . F  S BPSX=$O(^BPS(9002313.511,IEN511,2,"SEG",NODEIEN,BPSX)) Q:BPSX=""  D
"RTN","BPSOSH2",143,0)
 . . . S FLDIEN=$$GET1^DIQ(9002313.5112,BPSX_","_IEN511_",",.01,"I")
"RTN","BPSOSH2",144,0)
 . . . ;
"RTN","BPSOSH2",145,0)
 . . . ; The data in the BPS array is stored according to the number
"RTN","BPSOSH2",146,0)
 . . . ; of each field in BPS CLAIMS.  That number corresponds to the
"RTN","BPSOSH2",147,0)
 . . . ; NCPDP field number when the NCPDP number is all numeric.  For
"RTN","BPSOSH2",148,0)
 . . . ; alphanumeric field numbers, such as "B95", we must call
"RTN","BPSOSH2",149,0)
 . . . ; $$VNUM^BPSECMPS to pull the BPS CLAIMS field number from BPS
"RTN","BPSOSH2",150,0)
 . . . ; NCPDP FIELD DEFS.
"RTN","BPSOSH2",151,0)
 . . . ;
"RTN","BPSOSH2",152,0)
 . . . S FLDNUM=$$GET1^DIQ(9002313.91,FLDIEN,.01,"E")
"RTN","BPSOSH2",153,0)
 . . . I FLDNUM="" Q
"RTN","BPSOSH2",154,0)
 . . . I $P(FLDNUM,".")'?3N S FLDNUM=$$VNUM^BPSECMPS(FLDNUM) I 'FLDNUM Q
"RTN","BPSOSH2",155,0)
 . . . ;
"RTN","BPSOSH2",156,0)
 . . . I NODE<130 S FLDDATA=$G(BPS(9002313.02,IEN(9002313.02),FLDNUM,"I"))
"RTN","BPSOSH2",157,0)
 . . . I NODE>120 S FLDDATA=$G(BPS(9002313.0201,IEN(9002313.0201),FLDNUM,"I"))
"RTN","BPSOSH2",158,0)
 . . . ;
"RTN","BPSOSH2",159,0)
 . . . I FLDDATA="" Q
"RTN","BPSOSH2",160,0)
 . . . ;
"RTN","BPSOSH2",161,0)
 . . . ; $C(28) = File Separator.  On all segments except the Header,
"RTN","BPSOSH2",162,0)
 . . . ; FS precedes each field.
"RTN","BPSOSH2",163,0)
 . . . ;
"RTN","BPSOSH2",164,0)
 . . . I NODE=100 S SEGREC=SEGREC_FLDDATA
"RTN","BPSOSH2",165,0)
 . . . I NODE>100 S SEGREC=SEGREC_$C(28)_FLDDATA
"RTN","BPSOSH2",166,0)
 . . . ;
"RTN","BPSOSH2",167,0)
 . . . Q
"RTN","BPSOSH2",168,0)
 . . Q
"RTN","BPSOSH2",169,0)
 . ;
"RTN","BPSOSH2",170,0)
 . I NODE=100 S REC(NODE)=SEGREC   ;no SS when it's the header
"RTN","BPSOSH2",171,0)
 . I NODE>100 D
"RTN","BPSOSH2",172,0)
 .. I '$D(REC(NODE)) S REC(NODE)=REC I REC[$C(29) S REC=""
"RTN","BPSOSH2",173,0)
 .. S REC(NODE)=REC(NODE)_$C(30)_SEGREC  ;SS before the seg
"RTN","BPSOSH2",174,0)
 ;
"RTN","BPSOSH2",175,0)
 Q
"RTN","BPSOSH2",176,0)
 ;
"RTN","BPSOSH2",177,0)
SEGID(ND) ; function, returns Segment ID
"RTN","BPSOSH2",178,0)
 ; Field 111 is the Segment Identifier - for each segment, other than
"RTN","BPSOSH2",179,0)
 ; the header, a unique value must be sent in this field
"RTN","BPSOSH2",180,0)
 ; to identify which segment is being sent.  This value is not stored
"RTN","BPSOSH2",181,0)
 ; in the claim - as it changes with each of the 20 segments. The
"RTN","BPSOSH2",182,0)
 ; field does appear as part of the NCPDP Format, but is simply not stored.
"RTN","BPSOSH2",183,0)
 ;    01 = Patient       02 = Pharmacy Provider    03 = Prescriber
"RTN","BPSOSH2",184,0)
 ;    04 = Insurance     05 = COB/Other Payment    06 = Workers' Comp
"RTN","BPSOSH2",185,0)
 ;    07 = Claim         08 = DUR/PPS              09 = Coupon
"RTN","BPSOSH2",186,0)
 ;    10 = Compound      11 = Pricing              12 = Prior Auth
"RTN","BPSOSH2",187,0)
 ;    13 = Clinical      14 = Additional Doc       15 = Facility
"RTN","BPSOSH2",188,0)
 ;    16 = Narrative     17 = Purchaser            18 = Service Provider
"RTN","BPSOSH2",189,0)
 ;    19 = Intermediary  37 = Last Known 4Rx
"RTN","BPSOSH2",190,0)
 ;
"RTN","BPSOSH2",191,0)
 N FLD
"RTN","BPSOSH2",192,0)
 ;
"RTN","BPSOSH2",193,0)
 S FLD=$S(ND=110:"01",ND=120:"04",ND=130:"07",ND=140:"02",ND=150:"03",ND=160:"05",ND=170:"06",ND=180:"08",ND=190:11,ND=200:"09",ND=210:10,ND=220:12,ND=230:13,ND=240:14,ND=250:15,ND=260:16,ND=270:17,ND=280:18,ND=290:19,ND=300:37,1:"00")
"RTN","BPSOSH2",194,0)
 S FLD="AM"_$$NFF^BPSECFM(FLD,2)
"RTN","BPSOSH2",195,0)
 ;
"RTN","BPSOSH2",196,0)
 Q FLD
"RTN","BPSOSH2",197,0)
 ;
"RTN","BPSOSH2",198,0)
PROCDUR ; The DUR/PPS segment can repeat itself for any given
"RTN","BPSOSH2",199,0)
 ; transaction within a claim.  This means we have to have special
"RTN","BPSOSH2",200,0)
 ; programming to handle the repeating fields.
"RTN","BPSOSH2",201,0)
 ;
"RTN","BPSOSH2",202,0)
 ; Input Data
"RTN","BPSOSH2",203,0)
 ;   BPS array - Set in BPSOSC* routines
"RTN","BPSOSH2",204,0)
 ;   IEN array - Contain IEN information for the BPS NCPDP FORMAT file
"RTN","BPSOSH2",205,0)
 ;   NODE - Multiple of the BPS NCPDP FORMAT file
"RTN","BPSOSH2",206,0)
 ; Input/Output Data
"RTN","BPSOSH2",207,0)
 ;   SEGREC - This is data for the segment being created
"RTN","BPSOSH2",208,0)
 ;   DATAFND - Flag indicating if there is legitimate data for the segment
"RTN","BPSOSH2",209,0)
 ;
"RTN","BPSOSH2",210,0)
 N FIELD,DUR,FLD,ORD,FLDIEN,FLDID,FLDDATA
"RTN","BPSOSH2",211,0)
 ;
"RTN","BPSOSH2",212,0)
 ; If there isn't any data in this segment then quit
"RTN","BPSOSH2",213,0)
 Q:'$D(BPS(9002313.1001))
"RTN","BPSOSH2",214,0)
 ;
"RTN","BPSOSH2",215,0)
 ; Second thing - create the 111 field entry as it is not repeating
"RTN","BPSOSH2",216,0)
 S FLDDATA=$$SEGID(NODE)
"RTN","BPSOSH2",217,0)
 S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",218,0)
 ;
"RTN","BPSOSH2",219,0)
 ; Next- let's look to the format to see which DUR/PPS fields are
"RTN","BPSOSH2",220,0)
 ; needed (remember - ALL fields on the DUR/PPS segment are optional)
"RTN","BPSOSH2",221,0)
 D GETFLDS^BPSOSHF(+IEN(9002313.92),NODE,.FIELD)
"RTN","BPSOSH2",222,0)
 ;
"RTN","BPSOSH2",223,0)
 ; Finally -loop through and process the fields for as many times
"RTN","BPSOSH2",224,0)
 ; as they appear
"RTN","BPSOSH2",225,0)
 S DUR=0
"RTN","BPSOSH2",226,0)
 F  S DUR=$O(BPS(9002313.1001,DUR)) Q:DUR=""  D
"RTN","BPSOSH2",227,0)
 . S ORD=0
"RTN","BPSOSH2",228,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",229,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",230,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",231,0)
 .. S:FLD=473 FLD=.01   ;473 value stored in the .01 field
"RTN","BPSOSH2",232,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",233,0)
 .. ; Transaction data
"RTN","BPSOSH2",234,0)
 .. S FLDDATA=$G(BPS(9002313.1001,DUR,FLD,"I"))
"RTN","BPSOSH2",235,0)
 .. I FLDDATA="" Q
"RTN","BPSOSH2",236,0)
 .. ;
"RTN","BPSOSH2",237,0)
 .. I FLDID'=$TR(FLDDATA,"0 {}") S DATAFND=1 ;fld chk-is the fld empty?
"RTN","BPSOSH2",238,0)
 .. ;
"RTN","BPSOSH2",239,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",240,0)
 ;
"RTN","BPSOSH2",241,0)
 Q
"RTN","BPSOSH2",242,0)
 ;
"RTN","BPSOSH2",243,0)
PROCCOB ;The COB OTHER PAYMENTS segment can repeat itself for any given
"RTN","BPSOSH2",244,0)
 ; transaction within a claim.  This means we have to have special
"RTN","BPSOSH2",245,0)
 ; programming to handle the repeating fields.
"RTN","BPSOSH2",246,0)
 ;
"RTN","BPSOSH2",247,0)
 ; Note that BPS array is set in BPSOSC* routines
"RTN","BPSOSH2",248,0)
 ;
"RTN","BPSOSH2",249,0)
 N FIELD,BPCOB,FLD,ORD
"RTN","BPSOSH2",250,0)
 ;
"RTN","BPSOSH2",251,0)
 ; If there isn't any data in this segment quit
"RTN","BPSOSH2",252,0)
 Q:'$D(BPS(9002313.0401))
"RTN","BPSOSH2",253,0)
 ;
"RTN","BPSOSH2",254,0)
 ; create the 111 field entry as it is not repeating
"RTN","BPSOSH2",255,0)
 S FLDDATA=$$SEGID(NODE)
"RTN","BPSOSH2",256,0)
 S SEGREC=SEGREC_$C(28)_FLDDATA  ; FS always proceeds fld
"RTN","BPSOSH2",257,0)
 ;
"RTN","BPSOSH2",258,0)
 ; look to the format to see which COB fields are needed 
"RTN","BPSOSH2",259,0)
 D GETFLDS^BPSOSHF(+IEN(9002313.92),NODE,.FIELD)
"RTN","BPSOSH2",260,0)
 ;
"RTN","BPSOSH2",261,0)
 ; loop through and process fields for as many times as they appear
"RTN","BPSOSH2",262,0)
 S BPCOB=0
"RTN","BPSOSH2",263,0)
 F  S BPCOB=$O(BPS(9002313.0401,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",264,0)
 . S ORD=0
"RTN","BPSOSH2",265,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",266,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",267,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",268,0)
 .. S:FLD=337 FLD=.01   ; 473-7E value stored in the .01 field
"RTN","BPSOSH2",269,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",270,0)
 .. ; Transaction data
"RTN","BPSOSH2",271,0)
 .. S FLDDATA=$G(BPS(9002313.0401,BPCOB,FLD,"I"))
"RTN","BPSOSH2",272,0)
 .. ;
"RTN","BPSOSH2",273,0)
 .. Q:FLDDATA=""
"RTN","BPSOSH2",274,0)
 .. I $TR(FLDDATA,"0 {}")="HB" Q
"RTN","BPSOSH2",275,0)
 .. I $TR(FLDDATA,"0 {}")="5E" Q
"RTN","BPSOSH2",276,0)
 ..;
"RTN","BPSOSH2",277,0)
 ..I FLDID'=$TR(FLDDATA,"0 {}") S DATAFND=1 ;fld chk-is the fld empty?
"RTN","BPSOSH2",278,0)
 ..S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",279,0)
 ..; handle repeating fields
"RTN","BPSOSH2",280,0)
 ..I FLD=471 D REJCODES ; (#471) OTHER PAYER REJECT COUNT
"RTN","BPSOSH2",281,0)
 ..I FLD=341 D AMTPAID  ; (#341) OTHER PAYER AMOUNT PAID COUNT
"RTN","BPSOSH2",282,0)
 ..I FLD=353 D PATPAID  ; (#353) OTHER PAYER-PATIENT RESPONSIBILITY COUNT
"RTN","BPSOSH2",283,0)
 ..I FLD=392 D BENSTAGE ; (#392) BENEFIT STAGE COUNT
"RTN","BPSOSH2",284,0)
 ;
"RTN","BPSOSH2",285,0)
 Q
"RTN","BPSOSH2",286,0)
 ;
"RTN","BPSOSH2",287,0)
AMTPAID ; (#342) OTHER PAYER AMT PAID QUALIFIER multiple
"RTN","BPSOSH2",288,0)
 N BPCOB,ORD,FLD,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",289,0)
 S BPCOB=0
"RTN","BPSOSH2",290,0)
 F  S BPCOB=$O(BPS(9002313.401342,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",291,0)
 . S ORD=0
"RTN","BPSOSH2",292,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",293,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",294,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",295,0)
 .. S:FLD=342 FLD=.01   ;342 value stored in the .01 field
"RTN","BPSOSH2",296,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",297,0)
 .. ; Transaction data
"RTN","BPSOSH2",298,0)
 .. S FLDDATA=$G(BPS(9002313.401342,BPCOB,FLD,"I"))
"RTN","BPSOSH2",299,0)
 .. ;
"RTN","BPSOSH2",300,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",301,0)
 .. Q:FLDDATA=""
"RTN","BPSOSH2",302,0)
 .. I FLDID'="HC",FLDID=$TR(FLDDATA," ") Q  ; blanks are ok for 342-HC, but not for 431-DV
"RTN","BPSOSH2",303,0)
 .. ;
"RTN","BPSOSH2",304,0)
 .. S DATAFND=1
"RTN","BPSOSH2",305,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",306,0)
 Q
"RTN","BPSOSH2",307,0)
 ; 
"RTN","BPSOSH2",308,0)
REJCODES ; (#472) OTHER PAYER REJECT CODE
"RTN","BPSOSH2",309,0)
 N BPCOB,ORD,FLD,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",310,0)
 S BPCOB=0
"RTN","BPSOSH2",311,0)
 F  S BPCOB=$O(BPS(9002313.401472,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",312,0)
 . S ORD=0
"RTN","BPSOSH2",313,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",314,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",315,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",316,0)
 .. S:FLD=472 FLD=.01   ;472 value stored in the .01 field
"RTN","BPSOSH2",317,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",318,0)
 .. ; Transaction data
"RTN","BPSOSH2",319,0)
 .. S FLDDATA=$G(BPS(9002313.401472,BPCOB,FLD,"I"))
"RTN","BPSOSH2",320,0)
 .. ;
"RTN","BPSOSH2",321,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",322,0)
 .. Q:FLDDATA=""
"RTN","BPSOSH2",323,0)
 .. I FLDID=$TR(FLDDATA,"0 {}") Q
"RTN","BPSOSH2",324,0)
 .. ;
"RTN","BPSOSH2",325,0)
 .. I FLDID'=$TR(FLDDATA,"0 {}") S DATAFND=1 ;fld chk-is the fld empty?
"RTN","BPSOSH2",326,0)
 .. ;
"RTN","BPSOSH2",327,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",328,0)
 Q
"RTN","BPSOSH2",329,0)
 ;
"RTN","BPSOSH2",330,0)
PATPAID ; (#353.01) OTHER PAYER-PATIENT RESPONSIBILITY multiple
"RTN","BPSOSH2",331,0)
 N BPCOB,ORD,FLD,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",332,0)
 S BPCOB=0
"RTN","BPSOSH2",333,0)
 F  S BPCOB=$O(BPS(9002313.401353,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",334,0)
 . S ORD=0
"RTN","BPSOSH2",335,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",336,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",337,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",338,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",339,0)
 .. ; Transaction data
"RTN","BPSOSH2",340,0)
 .. S FLDDATA=$G(BPS(9002313.401353,BPCOB,FLD,"I"))
"RTN","BPSOSH2",341,0)
 .. ;
"RTN","BPSOSH2",342,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",343,0)
 .. I FLDDATA=""!(FLDID=$TR(FLDDATA," ")) Q  ; Check for missing data or only field ID
"RTN","BPSOSH2",344,0)
 .. ;
"RTN","BPSOSH2",345,0)
 .. S DATAFND=1
"RTN","BPSOSH2",346,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",347,0)
 Q
"RTN","BPSOSH2",348,0)
 ;
"RTN","BPSOSH2",349,0)
BENSTAGE ; (#392.01) BENEFIT STAGE MLTPL multiple
"RTN","BPSOSH2",350,0)
 ;
"RTN","BPSOSH2",351,0)
 N BPCOB,ORD,FLD,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",352,0)
 S BPCOB=0
"RTN","BPSOSH2",353,0)
 F  S BPCOB=$O(BPS(9002313.401392,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",354,0)
 . S ORD=0
"RTN","BPSOSH2",355,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",356,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",357,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",358,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",359,0)
 .. ; Transaction data
"RTN","BPSOSH2",360,0)
 .. S FLDDATA=$G(BPS(9002313.401392,BPCOB,FLD,"I"))
"RTN","BPSOSH2",361,0)
 .. ;
"RTN","BPSOSH2",362,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",363,0)
 .. I FLDDATA=""!(FLDID=$TR(FLDDATA," ")) Q  ; Check for missing data or only field ID
"RTN","BPSOSH2",364,0)
 .. ;
"RTN","BPSOSH2",365,0)
 .. S DATAFND=1
"RTN","BPSOSH2",366,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",367,0)
 Q
"RTN","BPSOSH2",368,0)
 ;
"RTN","BPSOSH2",369,0)
SUBCLAR(DATAFND,BPSIEN,SEGREC) ;
"RTN","BPSOSH2",370,0)
 ; BPSIEN, SEGREC passed by ref., SEGREC is updated with repeating fields
"RTN","BPSOSH2",371,0)
 ; 420-DK Submission Clarification Code, a repeating group
"RTN","BPSOSH2",372,0)
 ;
"RTN","BPSOSH2",373,0)
 Q:'$G(BPSIEN(9002313.02))  ; BPS CLAIMS ien
"RTN","BPSOSH2",374,0)
 Q:'$G(BPSIEN(9002313.0201))  ; TRANSACTIONS ien (sub-file 9002313.0201)
"RTN","BPSOSH2",375,0)
 ;
"RTN","BPSOSH2",376,0)
 N BPSD0,BPSD1,BPSD2,X1,X4
"RTN","BPSOSH2",377,0)
 ;
"RTN","BPSOSH2",378,0)
 S BPSD0=BPSIEN(9002313.02),BPSD1=BPSIEN(9002313.0201),BPSD2=0
"RTN","BPSOSH2",379,0)
 ;
"RTN","BPSOSH2",380,0)
 S X4=$P($G(^BPSC(BPSD0,400,BPSD1,350)),U,4)  ; (#354) SUBM CLARIFICATION CODE COUNT
"RTN","BPSOSH2",381,0)
 ;
"RTN","BPSOSH2",382,0)
 I X4=""!($TR(X4,"0 {}")="NX") Q  ; Quit if the count is missing is only the ID
"RTN","BPSOSH2",383,0)
 ;
"RTN","BPSOSH2",384,0)
 F  S BPSD2=$O(^BPSC(BPSD0,400,BPSD1,354.01,BPSD2)) Q:'BPSD2  D
"RTN","BPSOSH2",385,0)
 .S X1=$P($G(^BPSC(BPSD0,400,BPSD1,354.01,BPSD2,1)),U,1)
"RTN","BPSOSH2",386,0)
 .I X1=""!($TR(X1," {}")="DK") Q  ; Quit if the code is missing or only the ID
"RTN","BPSOSH2",387,0)
 .S SEGREC=SEGREC_$C(28)_X1  ; FS always proceeds fld
"RTN","BPSOSH2",388,0)
 .S DATAFND=1  ; data found, result is true
"RTN","BPSOSH2",389,0)
 ;
"RTN","BPSOSH2",390,0)
 Q
"RTN","BPSOSH2",391,0)
 ;
"RTN","BPSOSH2",392,0)
OAMTCLMD(DATAFND,BPSIEN,SEGREC) ;
"RTN","BPSOSH2",393,0)
 ; BPSIEN, SEGREC passed by ref., SEGREC updated with pairs of repeating fields
"RTN","BPSOSH2",394,0)
 ; (#478.01) OTHER AMT CLAIMED MULTIPLE (sub-file 9002313.0601)
"RTN","BPSOSH2",395,0)
 ;
"RTN","BPSOSH2",396,0)
 Q:'$G(BPSIEN(9002313.02))  ; BPS CLAIMS ien
"RTN","BPSOSH2",397,0)
 Q:'$G(BPSIEN(9002313.0201))  ; TRANSACTIONS ien (sub-file 9002313.0201)
"RTN","BPSOSH2",398,0)
 ;
"RTN","BPSOSH2",399,0)
 N BPSD0,BPSD1,BPSD2,X,X2,X3
"RTN","BPSOSH2",400,0)
 ;
"RTN","BPSOSH2",401,0)
 S BPSD0=BPSIEN(9002313.02),BPSD1=BPSIEN(9002313.0201),BPSD2=0
"RTN","BPSOSH2",402,0)
 ;
"RTN","BPSOSH2",403,0)
 F  S BPSD2=$O(^BPSC(BPSD0,400,BPSD1,478.01,BPSD2)) Q:'BPSD2  D
"RTN","BPSOSH2",404,0)
 .S X=$G(^BPSC(BPSD0,400,BPSD1,478.01,BPSD2,0))
"RTN","BPSOSH2",405,0)
 .I X="" Q  ; Quit if the node is missing
"RTN","BPSOSH2",406,0)
 .S X2=$P(X,U,2)  ; (#479) OTHER AMT CLAIMED SUBMTTD QLFR
"RTN","BPSOSH2",407,0)
 .S X3=$P(X,U,3)  ; (#480) OTHER AMOUNT CLAIMED SUBMITTED
"RTN","BPSOSH2",408,0)
 .I X2=""!($TR(X2,"0 {}")="H8") Q  ; Quit if the qualifier is missing or just the ID
"RTN","BPSOSH2",409,0)
 .I X3=""!($TR(X3,"0 {}")="H9") Q  ; Quit if the amount is missing or just the ID
"RTN","BPSOSH2",410,0)
 .S SEGREC=SEGREC_$C(28)_X2_$C(28)_X3  ; FS always proceeds fld
"RTN","BPSOSH2",411,0)
 .S DATAFND=1  ; data found, result is true
"RTN","BPSOSH2",412,0)
 ;
"RTN","BPSOSH2",413,0)
 Q
"RTN","BPSOSH2",414,0)
 ;
"RTN","BPSOSHF")
0^18^B45980918
"RTN","BPSOSHF",1,0)
BPSOSHF ;BHAM ISC/SD/lwj/DLF - Get/Format/Set value for repeating segments ;06/01/2004
"RTN","BPSOSHF",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8,10,11,23**;JUN 2004;Build 44
"RTN","BPSOSHF",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSHF",4,0)
 ;
"RTN","BPSOSHF",5,0)
 ; This routine is an addendum to BPSOSCF.  Its purpose is to handle
"RTN","BPSOSHF",6,0)
 ; some of the repeating fields that now exist in NCPDP 5.1.
"RTN","BPSOSHF",7,0)
 ; The logic was put in here rather than BPSOSCF to keep the original
"RTN","BPSOSHF",8,0)
 ; routine (BPSOSCF) from growing too large and too cumbersome to
"RTN","BPSOSHF",9,0)
 ; maintain.
"RTN","BPSOSHF",10,0)
 ;
"RTN","BPSOSHF",11,0)
DURPPS(FORMAT,NODE,MEDN) ;EP called from BPSOSCF
"RTN","BPSOSHF",12,0)
 ;
"RTN","BPSOSHF",13,0)
 ; First order of business - check the BPS("RX",MEDN,"DUR") array
"RTN","BPSOSHF",14,0)
 ; for values - if there aren't any, we don't need to write this
"RTN","BPSOSHF",15,0)
 ; segment
"RTN","BPSOSHF",16,0)
 ;
"RTN","BPSOSHF",17,0)
 N FIELD,DUR,FLD,OVERRIDE,FLAG,ORD,FLDIEN,FLDNUM,FLDNUMB,FOUND
"RTN","BPSOSHF",18,0)
 S FLAG="FS"
"RTN","BPSOSHF",19,0)
 ;
"RTN","BPSOSHF",20,0)
 Q:'$D(BPS("RX",MEDN,"DUR"))
"RTN","BPSOSHF",21,0)
 ;
"RTN","BPSOSHF",22,0)
 ; Next we need to figure out which fields on this format are really
"RTN","BPSOSHF",23,0)
 ; needed, then we will loop through and populate them
"RTN","BPSOSHF",24,0)
 ;
"RTN","BPSOSHF",25,0)
 D GETFLDS(FORMAT,NODE,.FIELD)
"RTN","BPSOSHF",26,0)
 ;
"RTN","BPSOSHF",27,0)
 ; Now lets get, format and set the field
"RTN","BPSOSHF",28,0)
 S (ORD,DUR)=0
"RTN","BPSOSHF",29,0)
 F  S DUR=$O(BPS("RX",MEDN,"DUR",DUR)) Q:DUR=""  D
"RTN","BPSOSHF",30,0)
 . S FLDNUM="" F  S FLDNUM=$O(BPS("RX",MEDN,"DUR",DUR,FLDNUM)) Q:FLDNUM=""  D
"RTN","BPSOSHF",31,0)
 .. S ORD="",FOUND=0
"RTN","BPSOSHF",32,0)
 .. F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D  Q:FOUND
"RTN","BPSOSHF",33,0)
 ... S FLDNUMB="",FLDNUMB=$P(FIELD(ORD),U,2) Q:FLDNUMB'=FLDNUM
"RTN","BPSOSHF",34,0)
 ... S FLDIEN="",FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSHF",35,0)
 ... S BPS("X")=BPS("RX",MEDN,"DUR",DUR,FLDNUM)
"RTN","BPSOSHF",36,0)
 ... S FOUND=1
"RTN","BPSOSHF",37,0)
 ... D XFLDCODE^BPSOSCF(NODE,FLDIEN,FLAG)  ;format/set
"RTN","BPSOSHF",38,0)
 Q
"RTN","BPSOSHF",39,0)
 ;
"RTN","BPSOSHF",40,0)
COB(FORMAT,NODE,MEDN) ; COB fields processing, NODE=160
"RTN","BPSOSHF",41,0)
 ;---------------------------------------------------------------
"RTN","BPSOSHF",42,0)
 ; The COB data is stored in the following local array:
"RTN","BPSOSHF",43,0)
 ;
"RTN","BPSOSHF",44,0)
 ;      BPS("RX",MEDN,"OTHER PAYER",.....
"RTN","BPSOSHF",45,0)
 ;
"RTN","BPSOSHF",46,0)
 ; Array built in routine BPSOSCD.
"RTN","BPSOSHF",47,0)
 ; Special note - Overrides are not allowed on this multiple.
"RTN","BPSOSHF",48,0)
 ;    "Special" code is not accounted for either.
"RTN","BPSOSHF",49,0)
 ;---------------------------------------------------------------
"RTN","BPSOSHF",50,0)
 ;
"RTN","BPSOSHF",51,0)
 N FIELD,FLD,OVERRIDE,FLAG,ORD,NCPFLD,BPD,BPD1,BPD2,PCE,BPSOPIEN,BPSOAIEN,BPSORIEN,BPSCOUNT
"RTN","BPSOSHF",52,0)
 S FLAG="FS"
"RTN","BPSOSHF",53,0)
 ;
"RTN","BPSOSHF",54,0)
 ; Quit if there is no data in the array
"RTN","BPSOSHF",55,0)
 Q:'$D(BPS("RX",MEDN,"OTHER PAYER"))
"RTN","BPSOSHF",56,0)
 ;
"RTN","BPSOSHF",57,0)
 ; next we need to figure out which fields on this format are really
"RTN","BPSOSHF",58,0)
 ; needed, then we will loop through and populate them
"RTN","BPSOSHF",59,0)
 ;
"RTN","BPSOSHF",60,0)
 D GETFLDS(FORMAT,NODE,.FIELD)
"RTN","BPSOSHF",61,0)
 ;
"RTN","BPSOSHF",62,0)
 ; re-sort this list by the NCPDP field#
"RTN","BPSOSHF",63,0)
 ; NCPFLD(NCPDP FIELD#) = internal field#
"RTN","BPSOSHF",64,0)
 K NCPFLD S ORD=0 F  S ORD=$O(FIELD(ORD)) Q:'ORD  S FLD=$P(FIELD(ORD),U,2) I FLD'="" S NCPFLD(FLD)=+FIELD(ORD)
"RTN","BPSOSHF",65,0)
 ;
"RTN","BPSOSHF",66,0)
 ; see if 337-4C is needed
"RTN","BPSOSHF",67,0)
 S FLD=337
"RTN","BPSOSHF",68,0)
 I $D(NCPFLD(FLD)) D
"RTN","BPSOSHF",69,0)
 . S BPS("X")=$P($G(BPS("RX",MEDN,"OTHER PAYER",0)),U,1)     ; get
"RTN","BPSOSHF",70,0)
 . I BPS("X")="" Q
"RTN","BPSOSHF",71,0)
 . D XFLDCODE^BPSOSCF(NODE,NCPFLD(FLD),FLAG)                 ; format/set
"RTN","BPSOSHF",72,0)
 . Q
"RTN","BPSOSHF",73,0)
 ;
"RTN","BPSOSHF",74,0)
 ; now lets get, format and set the rest of the COB fields
"RTN","BPSOSHF",75,0)
 S BPSOPIEN=0 F  S BPSOPIEN=$O(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN)) Q:'BPSOPIEN  D
"RTN","BPSOSHF",76,0)
 . S BPD=$G(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,0))
"RTN","BPSOSHF",77,0)
 . ; Note that piece 9 (Benefit Stage Count) is only set by Certification Code
"RTN","BPSOSHF",78,0)
 . F PCE=1:1:7,9 D
"RTN","BPSOSHF",79,0)
 .. S FLD=$S(PCE=1:337,PCE=2:338,PCE=3:339,PCE=4:340,PCE=5:443,PCE=6:341,PCE=7:471,PCE=9:392,1:0) Q:'FLD
"RTN","BPSOSHF",80,0)
 .. I '$D(NCPFLD(FLD)) Q                          ; field not needed
"RTN","BPSOSHF",81,0)
 .. I $P(BPD,U,PCE)="" Q                          ; data is nil
"RTN","BPSOSHF",82,0)
 .. S BPS("X")=$P(BPD,U,PCE)                      ; get
"RTN","BPSOSHF",83,0)
 .. D XFLDCODE^BPSOSCF(NODE,NCPFLD(FLD),FLAG)     ; format/set
"RTN","BPSOSHF",84,0)
 .. Q
"RTN","BPSOSHF",85,0)
 . ;
"RTN","BPSOSHF",86,0)
 . ; Now look at the other payer amount paid fields
"RTN","BPSOSHF",87,0)
 . S BPSOAIEN=0 F  S BPSOAIEN=$O(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,"P",BPSOAIEN)) Q:'BPSOAIEN  D
"RTN","BPSOSHF",88,0)
 .. S BPD1=$G(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,"P",BPSOAIEN,0))
"RTN","BPSOSHF",89,0)
 .. F PCE=1,2 D
"RTN","BPSOSHF",90,0)
 ... S FLD=$S(PCE=1:431,PCE=2:342,1:0) Q:'FLD
"RTN","BPSOSHF",91,0)
 ... I '$D(NCPFLD(FLD)) Q                          ; field not needed
"RTN","BPSOSHF",92,0)
 ... I $P(BPD1,U,PCE)="" Q                         ; data is nil
"RTN","BPSOSHF",93,0)
 ... S BPS("X")=$P(BPD1,U,PCE)                     ; get
"RTN","BPSOSHF",94,0)
 ... D XFLDCODE^BPSOSCF(NODE,NCPFLD(FLD),FLAG)     ; format/set
"RTN","BPSOSHF",95,0)
 .. Q
"RTN","BPSOSHF",96,0)
 . ;
"RTN","BPSOSHF",97,0)
 . ; Now look at the other payer reject code fields
"RTN","BPSOSHF",98,0)
 . S BPSORIEN=0 F  S BPSORIEN=$O(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,"R",BPSORIEN)) Q:'BPSORIEN  D
"RTN","BPSOSHF",99,0)
 .. S BPD2=$G(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,"R",BPSORIEN,0))
"RTN","BPSOSHF",100,0)
 .. S FLD=472
"RTN","BPSOSHF",101,0)
 .. I '$D(NCPFLD(FLD)) Q                          ; field not needed
"RTN","BPSOSHF",102,0)
 .. I BPD2="" Q                                   ; data is nil
"RTN","BPSOSHF",103,0)
 .. S BPS("X")=BPD2                               ; get
"RTN","BPSOSHF",104,0)
 .. D XFLDCODE^BPSOSCF(NODE,NCPFLD(FLD),FLAG)     ; format/set
"RTN","BPSOSHF",105,0)
 .. Q
"RTN","BPSOSHF",106,0)
 . ;
"RTN","BPSOSHF",107,0)
 . ; Now look at the other payer-patient amount paid fields
"RTN","BPSOSHF",108,0)
 . S BPSCOUNT=0                                   ; initialize counter
"RTN","BPSOSHF",109,0)
 . S BPSOAIEN=0 F  S BPSOAIEN=$O(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,"PP",BPSOAIEN)) Q:'BPSOAIEN  D
"RTN","BPSOSHF",110,0)
 .. S BPD1=$G(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,"PP",BPSOAIEN,0))
"RTN","BPSOSHF",111,0)
 .. ;
"RTN","BPSOSHF",112,0)
 .. ; Field 352-NQ = OTHER PAYER-PAT RESP AMOUNT
"RTN","BPSOSHF",113,0)
 .. I '$D(NCPFLD(352)) Q                          ; fields not needed
"RTN","BPSOSHF",114,0)
 .. I '+$P(BPD1,U,1) Q                            ; data is nil or zero
"RTN","BPSOSHF",115,0)
 .. S BPSCOUNT=BPSCOUNT+1                         ; increment counter
"RTN","BPSOSHF",116,0)
 .. S BPS("X")=$P(BPD1,U,1)                       ; get
"RTN","BPSOSHF",117,0)
 .. D XFLDCODE^BPSOSCF(NODE,NCPFLD(352),FLAG)     ; format/set
"RTN","BPSOSHF",118,0)
 .. ;
"RTN","BPSOSHF",119,0)
 .. ; If Field 352 is populated, then populate 351 and 353.
"RTN","BPSOSHF",120,0)
 .. ;
"RTN","BPSOSHF",121,0)
 .. ; Field 351-NP = OTHER PAYER-PAT RESP AMT QLFR
"RTN","BPSOSHF",122,0)
 .. S BPS("X")=$P(BPD1,U,2)                       ; get
"RTN","BPSOSHF",123,0)
 .. D XFLDCODE^BPSOSCF(NODE,NCPFLD(351),FLAG)     ; format/set
"RTN","BPSOSHF",124,0)
 .. ;
"RTN","BPSOSHF",125,0)
 .. ; Field 353-NR = OTHER PAYER-PAT RESP AMT CNT
"RTN","BPSOSHF",126,0)
 .. S BPS("X")=BPSCOUNT                           ; get
"RTN","BPSOSHF",127,0)
 .. D XFLDCODE^BPSOSCF(NODE,NCPFLD(353),FLAG)     ; format/set
"RTN","BPSOSHF",128,0)
 .. Q
"RTN","BPSOSHF",129,0)
 . ;
"RTN","BPSOSHF",130,0)
 . ; Now look at the Benefit Stages fields
"RTN","BPSOSHF",131,0)
 . ; Currently, this multiple is only set by certification code
"RTN","BPSOSHF",132,0)
 . S BPSOAIEN=0 F  S BPSOAIEN=$O(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,"BS",BPSOAIEN)) Q:'BPSOAIEN  D
"RTN","BPSOSHF",133,0)
 .. S BPD1=$G(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,"BS",BPSOAIEN,0))
"RTN","BPSOSHF",134,0)
 .. F PCE=1,2 D
"RTN","BPSOSHF",135,0)
 ... S FLD=$S(PCE=1:394,PCE=2:393,1:0) Q:'FLD
"RTN","BPSOSHF",136,0)
 ... I '$D(NCPFLD(FLD)) Q                          ; field not needed
"RTN","BPSOSHF",137,0)
 ... I $P(BPD1,U,PCE)="" Q                         ; data is nil
"RTN","BPSOSHF",138,0)
 ... S BPS("X")=$P(BPD1,U,PCE)                     ; get
"RTN","BPSOSHF",139,0)
 ... D XFLDCODE^BPSOSCF(NODE,NCPFLD(FLD),FLAG)     ; format/set
"RTN","BPSOSHF",140,0)
 .. Q
"RTN","BPSOSHF",141,0)
 . Q
"RTN","BPSOSHF",142,0)
 ;
"RTN","BPSOSHF",143,0)
COBX ;
"RTN","BPSOSHF",144,0)
 Q
"RTN","BPSOSHF",145,0)
 ;
"RTN","BPSOSHF",146,0)
GETFLDS(FORMAT,NODE,FIELD) ;EP NCPDP 5.1
"RTN","BPSOSHF",147,0)
 ;---------------------------------------------------------------
"RTN","BPSOSHF",148,0)
 ;This routine will get the list of repeating fields that must be
"RTN","BPSOSHF",149,0)
 ; be worked with separately
"RTN","BPSOSHF",150,0)
 ; (This was originally coded for the DUR/PPS segment - I'm not
"RTN","BPSOSHF",151,0)
 ; 100% sure how and if it will work for the other repeating
"RTN","BPSOSHF",152,0)
 ; fields that exist within a segment.)
"RTN","BPSOSHF",153,0)
 ;---------------------------------------------------------------
"RTN","BPSOSHF",154,0)
 ; Coming in:
"RTN","BPSOSHF",155,0)
 ;   FORMAT = BPSF(9002313.92 's format IEN
"RTN","BPSOSHF",156,0)
 ;   NODE   = which segment we are processing (i.e. 180 - DUR/PPS)
"RTN","BPSOSHF",157,0)
 ;  .FIELD  = array to store the values in
"RTN","BPSOSHF",158,0)
 ;
"RTN","BPSOSHF",159,0)
 ; Exitting:
"RTN","BPSOSHF",160,0)
 ;  .FIELD array will look like:
"RTN","BPSOSHF",161,0)
 ;     FIELD(ord)=int^ext
"RTN","BPSOSHF",162,0)
 ;  Where:   ext = external field number from BPSF(9002313.91
"RTN","BPSOSHF",163,0)
 ;           int = internal field number from BPSF(9002313.91
"RTN","BPSOSHF",164,0)
 ;           ord = the order of the field - used in creating clm
"RTN","BPSOSHF",165,0)
 ;---------------------------------------------------------------
"RTN","BPSOSHF",166,0)
 ;
"RTN","BPSOSHF",167,0)
 N ORDER,RECMIEN,MDATA,FLDIEN,FLDNUM,DUR
"RTN","BPSOSHF",168,0)
 ;
"RTN","BPSOSHF",169,0)
 S ORDER=0
"RTN","BPSOSHF",170,0)
 ;
"RTN","BPSOSHF",171,0)
 F  D  Q:'ORDER
"RTN","BPSOSHF",172,0)
 . ;
"RTN","BPSOSHF",173,0)
 . ; let's order through the format file for this node
"RTN","BPSOSHF",174,0)
 . S ORDER=$O(^BPSF(9002313.92,FORMAT,NODE,"B",ORDER)) Q:'ORDER
"RTN","BPSOSHF",175,0)
 . S RECMIEN=$O(^BPSF(9002313.92,FORMAT,NODE,"B",ORDER,0))
"RTN","BPSOSHF",176,0)
 . I 'RECMIEN D IMPOSS^BPSOSUE("DB","TI","NODE="_NODE,"ORDER="_ORDER,2,$T(+0))
"RTN","BPSOSHF",177,0)
 . S MDATA=^BPSF(9002313.92,FORMAT,NODE,RECMIEN,0)
"RTN","BPSOSHF",178,0)
 . S FLDIEN=$P(MDATA,U,2)
"RTN","BPSOSHF",179,0)
 . I 'FLDIEN D IMPOSS^BPSOSUE("DB","TI","NODE="_NODE,"RECMIEN="_RECMIEN,3,$T(+0)) ; corrupt or erroneous format file
"RTN","BPSOSHF",180,0)
 . I '$D(^BPSF(9002313.91,FLDIEN,0)) D IMPOSS^BPSOSUE("DB,P","TI","FLDIEN="_FLDIEN,,"DURPPS",$T(+0))  ;incomplete field definition
"RTN","BPSOSHF",181,0)
 . ;
"RTN","BPSOSHF",182,0)
 . ;lets create a list of fields we need
"RTN","BPSOSHF",183,0)
 . S FLDNUM=$P($G(^BPSF(9002313.91,FLDIEN,0)),U)
"RTN","BPSOSHF",184,0)
 . S:FLDNUM'=111 FIELD(ORDER)=FLDIEN_"^"_FLDNUM
"RTN","BPSOSHF",185,0)
 Q
"RTN","BPSOSRB")
0^23^B42516960
"RTN","BPSOSRB",1,0)
BPSOSRB ;BHAM ISC/FCS/DRS/FLS - Process claim on processing queue ;06/01/2004
"RTN","BPSOSRB",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,10,11,20,23**;JUN 2004;Build 44
"RTN","BPSOSRB",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSRB",4,0)
 ;
"RTN","BPSOSRB",5,0)
 Q
"RTN","BPSOSRB",6,0)
BACKGR ;
"RTN","BPSOSRB",7,0)
 I '$$LOCKNOW^BPSOSRX("BACKGROUND") Q
"RTN","BPSOSRB",8,0)
 N TYPE,KEY1,KEY2,IEN59,IEN59PR,BPNOW,BPUNTIL
"RTN","BPSOSRB",9,0)
 N BPIEN77,BPLCKRX,BPQ,BPCOBIND,GRPLAN
"RTN","BPSOSRB",10,0)
 S BPNOW=$$NOW^BPSOSRX()
"RTN","BPSOSRB",11,0)
 ;go through all ACTIVATED
"RTN","BPSOSRB",12,0)
 S KEY1="" F  S KEY1=$O(^BPS(9002313.77,"AC",1,KEY1)) Q:KEY1=""  D
"RTN","BPSOSRB",13,0)
 . S KEY2="" F  S KEY2=$O(^BPS(9002313.77,"AC",1,KEY1,KEY2)) Q:KEY2=""  D
"RTN","BPSOSRB",14,0)
 . . S IEN59PR=+$$IEN59^BPSOSRX(KEY1,KEY2,0)
"RTN","BPSOSRB",15,0)
 . . S BPLCKRX=$$LOCKRF^BPSOSRX(KEY1,KEY2,10,IEN59PR,$T(+0)) I BPLCKRX=0 D  Q
"RTN","BPSOSRB",16,0)
 . . . D LOG^BPSOSL(IEN59PR,$T(+0)_"-Failed to $$LOCKRF^BPSOSRX.  Will retry later.")
"RTN","BPSOSRB",17,0)
 . . S BPQ=0
"RTN","BPSOSRB",18,0)
 . . S BPIEN77="" F  S BPIEN77=$O(^BPS(9002313.77,"AC",1,KEY1,KEY2,BPIEN77)) Q:(+BPIEN77=0)!(BPQ=1)  D
"RTN","BPSOSRB",19,0)
 . . . ;check DONT PROCESS UNTIL field #.08 and if it is greater than NOW then DO NOT process it
"RTN","BPSOSRB",20,0)
 . . . S BPUNTIL=+$P($G(^BPS(9002313.77,BPIEN77,0)),U,8) I BPUNTIL>BPNOW S BPQ=1 Q  ;D LOG^BPSOSL(IEN59,$T(+0)_"-The request cannot be processed until."_BPUNTIL_" Will retry later.") Q
"RTN","BPSOSRB",21,0)
 . . . ;check if PROCESS FLAG is IN PROCESS - if the earlier record for this RX refill is in progress - 
"RTN","BPSOSRB",22,0)
 . . . ;we should not process the next operation queued - go to the next refill (BPQ=1)
"RTN","BPSOSRB",23,0)
 . . . I $P($G(^BPS(9002313.77,BPIEN77,0)),U,4)=2 S BPQ=1 D  Q
"RTN","BPSOSRB",24,0)
 . . . . D LOG^BPSOSL(IEN59,$T(+0)_"-Status is 'IN PROCESS'.  Will retry later.")
"RTN","BPSOSRB",25,0)
 . . . S BPCOBIND=$P(^BPS(9002313.77,BPIEN77,0),U,3)
"RTN","BPSOSRB",26,0)
 . . . S IEN59=$$IEN59^BPSOSRX(KEY1,KEY2,BPCOBIND)
"RTN","BPSOSRB",27,0)
 . . . ; Removed code to check Insurer Asleep
"RTN","BPSOSRB",28,0)
 . . . S TYPE=$P($G(^BPS(9002313.77,+BPIEN77,1)),U,4),TYPE=$S(TYPE="C":"CLAIM",TYPE="U":"UNCLAIM",TYPE="E":"ELIGIBILITY",1:"UNKNW")
"RTN","BPSOSRB",29,0)
 . . . I TYPE="UNKNW" D ERROR(+BPIEN77,IEN59,"Request Type is unknown. Cannot be processed.") Q
"RTN","BPSOSRB",30,0)
 . . . D LOG^BPSOSL(IEN59,$T(+0)_"-Processing the Activated request "_BPIEN77)
"RTN","BPSOSRB",31,0)
 . . . D LOG77(IEN59,BPIEN77)  ; Log entire contents of the request.
"RTN","BPSOSRB",32,0)
 . . . D LOG^BPSOSL(IEN59,$T(+0)_"-Dequeuing.  Type is "_TYPE)
"RTN","BPSOSRB",33,0)
 . . . ; if this is ACTIVATED then make it IN PROCESS (see SETPRFLG below)
"RTN","BPSOSRB",34,0)
 . . . N TIME,MOREDATA
"RTN","BPSOSRB",35,0)
 . . . S TIME=$P($G(^BPS(9002313.77,+BPIEN77,6)),U,1) ; time requested
"RTN","BPSOSRB",36,0)
 . . . D READMORE^BPSOSRX4(BPIEN77,.MOREDATA)
"RTN","BPSOSRB",37,0)
 . . . ;now it is IN PROCESS - i.e. goes to BACKGR1 (as K ^XTMP("BPS-PROC",TYPE,KEY1,KEY2 in old logic) 
"RTN","BPSOSRB",38,0)
 . . . I +$$INPROCES^BPSOSRX4(BPIEN77)=0 D ERROR(+BPIEN77,IEN59,"Cannot change the PROCESS FLAG to IN PROCESS. Cannot be processed.") Q
"RTN","BPSOSRB",39,0)
 . . . D LOG^BPSOSL(IEN59,$T(+0)_"-The request "_BPIEN77_" has been changed to IN PROCESS")
"RTN","BPSOSRB",40,0)
 . . . I +$$BACKGR1(TYPE,KEY1,KEY2,TIME,.MOREDATA,IEN59,+BPIEN77)=0 Q
"RTN","BPSOSRB",41,0)
 . . . S BPQ=1 ; This will skip requests with the same keys as the one just processed
"RTN","BPSOSRB",42,0)
 . . I BPLCKRX D UNLCKRF^BPSOSRX(KEY1,KEY2,IEN59PR,$T(+0))
"RTN","BPSOSRB",43,0)
 D UNLOCK^BPSOSRX("BACKGROUND")
"RTN","BPSOSRB",44,0)
 Q
"RTN","BPSOSRB",45,0)
 ;
"RTN","BPSOSRB",46,0)
LOG77(IEN59,BPIEN77) ; Log entire contents of the request.
"RTN","BPSOSRB",47,0)
 N A
"RTN","BPSOSRB",48,0)
 M A=^BPS(9002313.77,BPIEN77)
"RTN","BPSOSRB",49,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Contents of ^BPS(9002313.77,"_BPIEN77_"), BPS REQUEST:")
"RTN","BPSOSRB",50,0)
 D LOGARRAY^BPSOSL(IEN59,"A")
"RTN","BPSOSRB",51,0)
 Q
"RTN","BPSOSRB",52,0)
 ;
"RTN","BPSOSRB",53,0)
 ; BACKGR1 - Further processing of the claim
"RTN","BPSOSRB",54,0)
 ; Besides the parameter below, IEN59 also needs to be defined
"RTN","BPSOSRB",55,0)
 ; TYPE - "CLAIM", "UNCLAIM", or "ELIGIBILITY"
"RTN","BPSOSRB",56,0)
 ; KEY1 - First key of the request
"RTN","BPSOSRB",57,0)
 ; KEY2 - Second key of the request
"RTN","BPSOSRB",58,0)
 ; TIME - time requested
"RTN","BPSOSRB",59,0)
 ; MOREDATA - array with claim data
"RTN","BPSOSRB",60,0)
 ; IEN59 - BPS TRANSACTION ien
"RTN","BPSOSRB",61,0)
 ; BPS77 - BPS REQUEST file ien
"RTN","BPSOSRB",62,0)
BACKGR1(TYPE,KEY1,KEY2,TIME,MOREDATA,IEN59,BPS77) ;
"RTN","BPSOSRB",63,0)
 ; Resolve multiple requests
"RTN","BPSOSRB",64,0)
 N SKIP,SKIPREAS,BPCOBIND,RESULT,PAYABLE
"RTN","BPSOSRB",65,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Processing request "_BPS77_" with keys "_KEY1_", "_KEY2_" and type "_TYPE)
"RTN","BPSOSRB",66,0)
 S SKIP=0
"RTN","BPSOSRB",67,0)
 S BPCOBIND=$$COB59^BPSUTIL2(IEN59)
"RTN","BPSOSRB",68,0)
 S RESULT=$P($$STATUS^BPSOSRX(KEY1,KEY2,0,,BPCOBIND),U)
"RTN","BPSOSRB",69,0)
 S PAYABLE=$$PAYABLE^BPSOSRX5(RESULT)
"RTN","BPSOSRB",70,0)
 I TYPE="CLAIM" D
"RTN","BPSOSRB",71,0)
 . I $$RXDEL^BPSOS(KEY1,KEY2) S SKIP=1,SKIPREAS="Prescription is marked as DELETED or CANCELLED in Outpatient Pharmacy" Q
"RTN","BPSOSRB",72,0)
 . ;
"RTN","BPSOSRB",73,0)
 . ; Allow resubmit w/o reversal to proceed no matter the claim status (bps*1*20)
"RTN","BPSOSRB",74,0)
 . I $P($G(^BPS(9002313.77,BPS77,1)),U,1)="ERWV" Q
"RTN","BPSOSRB",75,0)
 . ;
"RTN","BPSOSRB",76,0)
 . I PAYABLE S SKIP=1,SKIPREAS="Prescription is currently paid.  Previous Result is "_RESULT Q
"RTN","BPSOSRB",77,0)
 ;
"RTN","BPSOSRB",78,0)
 I TYPE="UNCLAIM",'PAYABLE S SKIP=1,SKIPREAS="Cannot reverse - previous result was "_RESULT
"RTN","BPSOSRB",79,0)
 ;
"RTN","BPSOSRB",80,0)
 ; If the SKIP flag message is set, handle error and quit
"RTN","BPSOSRB",81,0)
 I SKIP D ERROR(BPS77,IEN59,SKIPREAS) Q 0
"RTN","BPSOSRB",82,0)
 ;
"RTN","BPSOSRB",83,0)
 ; Submit claim
"RTN","BPSOSRB",84,0)
 S MOREDATA("SUBMIT TIME")=TIME
"RTN","BPSOSRB",85,0)
 ;
"RTN","BPSOSRB",86,0)
 ; If reversal, execute reversal code and quit
"RTN","BPSOSRB",87,0)
 I TYPE="UNCLAIM" D REVERSE(IEN59,.MOREDATA,$G(BPS77)) Q 1
"RTN","BPSOSRB",88,0)
 ;
"RTN","BPSOSRB",89,0)
 ; Claims and Eligibility will fall through to here
"RTN","BPSOSRB",90,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Initiating Claim")
"RTN","BPSOSRB",91,0)
 D EN^BPSOSIZ(IEN59,.MOREDATA,$G(BPS77))
"RTN","BPSOSRB",92,0)
 Q 1
"RTN","BPSOSRB",93,0)
 ;
"RTN","BPSOSRB",94,0)
 ; Error handling - If a record can not be processed, then it needs to be
"RTN","BPSOSRB",95,0)
 ; inactivated and the next request activated
"RTN","BPSOSRB",96,0)
 ; 
"RTN","BPSOSRB",97,0)
 ; This is also called by ERROR^BPSOSIZ
"RTN","BPSOSRB",98,0)
ERROR(BPS77,IEN59,ERROR) ;
"RTN","BPSOSRB",99,0)
 I '$G(BPS77) Q
"RTN","BPSOSRB",100,0)
 I $G(ERROR)="" S ERROR="Unknown"
"RTN","BPSOSRB",101,0)
 N BPNXT77,BPRETV
"RTN","BPSOSRB",102,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Skipping "_BPS77_" because of ERROR: "_ERROR)
"RTN","BPSOSRB",103,0)
 ;
"RTN","BPSOSRB",104,0)
 ; Inactivate the current request
"RTN","BPSOSRB",105,0)
 S BPRETV=$$INACTIVE^BPSOSRX4(BPS77,ERROR)
"RTN","BPSOSRB",106,0)
 I 'BPRETV D LOG^BPSOSL(IEN59,$T(+0)_"-Could not inactivate the request: "_BPRETV) Q
"RTN","BPSOSRB",107,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Request is inactivated")
"RTN","BPSOSRB",108,0)
 ;
"RTN","BPSOSRB",109,0)
 ; See if there is a next request linked to this one
"RTN","BPSOSRB",110,0)
 ; If there is, activate it
"RTN","BPSOSRB",111,0)
 S BPNXT77=+$$GETNXREQ^BPSOSRX6(BPS77,0,0,$G(IEN59))
"RTN","BPSOSRB",112,0)
 I BPNXT77 D
"RTN","BPSOSRB",113,0)
 . S BPRETV=$$ACTIVATE^BPSOSRX4(BPNXT77)
"RTN","BPSOSRB",114,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-The next request "_BPNXT77_" has "_$S('BPRETV:"not ",1:"")_"been activated")
"RTN","BPSOSRB",115,0)
 Q
"RTN","BPSOSRB",116,0)
 ;
"RTN","BPSOSRB",117,0)
 ; Process the reversal
"RTN","BPSOSRB",118,0)
REVERSE(IEN59,MOREDATA,BP77) ;
"RTN","BPSOSRB",119,0)
 N MSG,RETVAL,REV
"RTN","BPSOSRB",120,0)
 ;
"RTN","BPSOSRB",121,0)
 ; Update BPS REQUEST with the BPS TRANSACTION IEN
"RTN","BPSOSRB",122,0)
 I $G(BP77)>0 D UPD7759^BPSOSRX4(BP77,IEN59)
"RTN","BPSOSRB",123,0)
 ;
"RTN","BPSOSRB",124,0)
 ; Log Reversal or Reversal/Resubmit message.
"RTN","BPSOSRB",125,0)
 ; Note that the reversal/resubmit message is needed
"RTN","BPSOSRB",126,0)
 ;   for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSOSRB",127,0)
 S MSG=$T(+0)_"-Initiating Reversal"
"RTN","BPSOSRB",128,0)
 D LOG^BPSOSL(IEN59,MSG)
"RTN","BPSOSRB",129,0)
 ;
"RTN","BPSOSRB",130,0)
 ; Change status to 0% (Waiting to Start), which will reset START TIME,
"RTN","BPSOSRB",131,0)
 ;   and then to 10% (Building transaction)
"RTN","BPSOSRB",132,0)
 D SETSTAT^BPSOSU(IEN59,0)
"RTN","BPSOSRB",133,0)
 D SETSTAT^BPSOSU(IEN59,10)
"RTN","BPSOSRB",134,0)
 ;
"RTN","BPSOSRB",135,0)
 ; Update specific fields of the BPS Transaction record - Submit Date (#6),
"RTN","BPSOSRB",136,0)
 ;   User (#13), Request Type (#19), Reversal Claim (#401), Reversal Response (#402),
"RTN","BPSOSRB",137,0)
 ;   Reversal Reason (#404), Reversal Request (#405), Reversal Request Date and Time (#406),
"RTN","BPSOSRB",138,0)
 ;   and RX Action (#1201)
"RTN","BPSOSRB",139,0)
 N DIE,DR,DA
"RTN","BPSOSRB",140,0)
 S DIE=9002313.59,DA=IEN59
"RTN","BPSOSRB",141,0)
 S DR="6////"_$G(MOREDATA("SUBMIT TIME"))_";13////"_$G(MOREDATA("USER"))
"RTN","BPSOSRB",142,0)
 S DR=DR_";404////"_$G(MOREDATA("REVERSAL REASON"))_";1201////"_$G(MOREDATA("RX ACTION"))
"RTN","BPSOSRB",143,0)
 S DR=DR_";19////"_$G(MOREDATA("REQ TYPE"))_";405////"_$G(MOREDATA("REQ IEN"))
"RTN","BPSOSRB",144,0)
 S DR=DR_";406////"_MOREDATA("REQ DTTM")_";401////@;402////@"
"RTN","BPSOSRB",145,0)
 ;
"RTN","BPSOSRB",146,0)
 D ^DIE
"RTN","BPSOSRB",147,0)
 ;
"RTN","BPSOSRB",148,0)
 ; Store the Payer Sequence in the log
"RTN","BPSOSRB",149,0)
 N BPSCOB
"RTN","BPSOSRB",150,0)
 S BPSCOB=$$COB59^BPSUTIL2(IEN59),BPSCOB=$S(BPSCOB=2:"-Secondary",BPSCOB=3:"-Tertiary",1:"-Primary"),BPSCOB=BPSCOB_" Insurance"
"RTN","BPSOSRB",151,0)
 D LOG^BPSOSL(IEN59,$T(+0)_BPSCOB)
"RTN","BPSOSRB",152,0)
 ;
"RTN","BPSOSRB",153,0)
 ; Store contents of BPST in the Log
"RTN","BPSOSRB",154,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Contents of ^BPST("_IEN59_") :")
"RTN","BPSOSRB",155,0)
 D LOG59^BPSOSQA(IEN59) ; Log contents of 9002313.59
"RTN","BPSOSRB",156,0)
 ;
"RTN","BPSOSRB",157,0)
 ; Add semi-colon to result text
"RTN","BPSOSRB",158,0)
 D PREVISLY^BPSOSIZ(IEN59)
"RTN","BPSOSRB",159,0)
 ;
"RTN","BPSOSRB",160,0)
 ; Construct reversal claim
"RTN","BPSOSRB",161,0)
 ;   If no reversal claim is returned, log error and quit.
"RTN","BPSOSRB",162,0)
 S REV=$$REVERSE^BPSECA8(IEN59)
"RTN","BPSOSRB",163,0)
 I REV=0 D  Q
"RTN","BPSOSRB",164,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Reversal claim not created for "_IEN59)
"RTN","BPSOSRB",165,0)
 . D ERROR^BPSOSU($T(+0),IEN59,100,"Reversal Claim not created")
"RTN","BPSOSRB",166,0)
 ;
"RTN","BPSOSRB",167,0)
 ; Update Reversal Field in the transaction
"RTN","BPSOSRB",168,0)
 S DIE=9002313.59,DA=IEN59,DR="401////"_REV
"RTN","BPSOSRB",169,0)
 D ^DIE
"RTN","BPSOSRB",170,0)
 ;
"RTN","BPSOSRB",171,0)
 ; Update Log
"RTN","BPSOSRB",172,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Reversal claim "_$P(^BPSC(REV,0),U)_" ("_REV_")")
"RTN","BPSOSRB",173,0)
 ;
"RTN","BPSOSRB",174,0)
 ; Update status to 30% (Building the claim)
"RTN","BPSOSRB",175,0)
 D SETSTAT^BPSOSU(IEN59,30)
"RTN","BPSOSRB",176,0)
 ;
"RTN","BPSOSRB",177,0)
 ; Fire off task to get this on the HL7 queue
"RTN","BPSOSRB",178,0)
 D TASK^BPSOSQA
"RTN","BPSOSRB",179,0)
 Q
"RTN","BPSOSRX3")
0^19^B124478276
"RTN","BPSOSRX3",1,0)
BPSOSRX3 ;ALB/SS - ECME REQUESTS ;02-JAN-08
"RTN","BPSOSRX3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8,10,11,23**;JUN 2004;Build 44
"RTN","BPSOSRX3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSRX3",4,0)
 ;
"RTN","BPSOSRX3",5,0)
 ;Input
"RTN","BPSOSRX3",6,0)
 ;BPREQTYP - request type:
"RTN","BPSOSRX3",7,0)
 ; "C" - Submit a claim to ECME
"RTN","BPSOSRX3",8,0)
 ;  If the claim has already been processed, and it's  resubmitted, then a reversal will be
"RTN","BPSOSRX3",9,0)
 ;   done first, and then the resubmit. Intervening call to $$STATUS may show progress 
"RTN","BPSOSRX3",10,0)
 ;  of the reversal before the resubmitted claim is processed.
"RTN","BPSOSRX3",11,0)
 ; "U"- Reverse submitted claim.
"RTN","BPSOSRX3",12,0)
 ;  The reversal will actually be done ONLY if the  most recent processing of the claim
"RTN","BPSOSRX3",13,0)
 ;   resulted in something reversible, namely E PAYABLE or E REVERSAL REJECTED
"RTN","BPSOSRX3",14,0)
 ; "E" - Eligibility Verification Request
"RTN","BPSOSRX3",15,0)
 ;KEY1 - First Key for the BPS Request file
"RTN","BPSOSRX3",16,0)
 ;KEY2 - Second Key for the BPS Request file
"RTN","BPSOSRX3",17,0)
 ;MOREDATA - Array of data for transaction/claim
"RTN","BPSOSRX3",18,0)
 ;BPCOBIND - payer sequence
"RTN","BPSOSRX3",19,0)
 ;BILLNDC - NDC passed into EN^BPSNCPDP sent in BILLNDC variable or determined by EN^BPSNCPDP if it was null 
"RTN","BPSOSRX3",20,0)
 ;at the very first time when EN^BPSNCPDP was called in "F" (foreground) mode
"RTN","BPSOSRX3",21,0)
 ;BPSKIP(optional)=1 : skip the field, used when CLAIM request is created while the previous 
"RTN","BPSOSRX3",22,0)
 ;request is in progress. That means - billing determination will be done upon activation)
"RTN","BPSOSRX3",23,0)
 ;Return values:
"RTN","BPSOSRX3",24,0)
 ; 1^BPS REQUEST ien = accepted for processing
"RTN","BPSOSRX3",25,0)
 ; 0^reason = failure (should never happen)
"RTN","BPSOSRX3",26,0)
MKRQST(BPREQTYP,KEY1,KEY2,MOREDATA,BPIENS78,BPCOBIND,BILLNDC,BPSKIP) ;
"RTN","BPSOSRX3",27,0)
 N BPIEN77,BPCOB,BPQ,BPIEN772,BPERRMSG,BPIEN59,BPIEN78,BPZ
"RTN","BPSOSRX3",28,0)
 N RETVAL,STAT,TYPE,RESULT,SUBMITDT,BPNOW,BPACTTYP,BP77LCK
"RTN","BPSOSRX3",29,0)
 N DUR,BPIEN771,BPCNT,BPSDUPL
"RTN","BPSOSRX3",30,0)
 S BPSKIP=+$G(BPSKIP)
"RTN","BPSOSRX3",31,0)
 I $G(BPREQTYP)="" Q "0^Parameter error-Request Type"
"RTN","BPSOSRX3",32,0)
 I '$G(KEY1) Q "0^Parameter error-Key1"
"RTN","BPSOSRX3",33,0)
 I BPREQTYP="E",$G(KEY2)'>9000 Q "0^Parameter error-Key2 for eligibility"
"RTN","BPSOSRX3",34,0)
 I '$G(BPCOBIND)="" Q "0^Parameter error-COB Indicator"
"RTN","BPSOSRX3",35,0)
 I '$G(KEY2) S KEY2=0
"RTN","BPSOSRX3",36,0)
 S BPIEN59=+$$IEN59^BPSOSRX(KEY1,KEY2,BPCOBIND)
"RTN","BPSOSRX3",37,0)
 ;
"RTN","BPSOSRX3",38,0)
 ;new record
"RTN","BPSOSRX3",39,0)
 S BPERRMSG="Cannot create record in BPS REQUEST"
"RTN","BPSOSRX3",40,0)
 S BPIEN77=$$INSITEM^BPSUTIL2(9002313.77,"",KEY1,"","","^BPS(9002313.77)",10)
"RTN","BPSOSRX3",41,0)
 I BPIEN77<1 Q "0^"_BPERRMSG
"RTN","BPSOSRX3",42,0)
 S BPNOW=$$NOW^BPSOSRX()
"RTN","BPSOSRX3",43,0)
 S BPACTTYP=$G(MOREDATA("RX ACTION"))
"RTN","BPSOSRX3",44,0)
 ; fill out the fields
"RTN","BPSOSRX3",45,0)
 S BPERRMSG="Missing data for the "
"RTN","BPSOSRX3",46,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,".02",BPIEN77,KEY2)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,.02)
"RTN","BPSOSRX3",47,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,".03",BPIEN77,BPCOBIND)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,.03)
"RTN","BPSOSRX3",48,0)
 ;set delay with the testing tool
"RTN","BPSOSRX3",49,0)
 S BPZ=+$$SETDELAY^BPSTEST(BPIEN59) I BPZ>0 I $$FILLFLDS^BPSUTIL2(9002313.77,".08",BPIEN77,BPZ)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,.08)
"RTN","BPSOSRX3",50,0)
 ;set the process flag to "WAITING"
"RTN","BPSOSRX3",51,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,".04",BPIEN77,0)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,.04)
"RTN","BPSOSRX3",52,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,"6.01",BPIEN77,BPNOW)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,6.01)
"RTN","BPSOSRX3",53,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,"6.05",BPIEN77,BPNOW)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,6.05)
"RTN","BPSOSRX3",54,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"6.02") I $$FILLFLDS^BPSUTIL2(9002313.77,"6.02",BPIEN77,+$G(MOREDATA("USER")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,6.02)
"RTN","BPSOSRX3",55,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,"6.06",BPIEN77,+DUZ)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,6.06)
"RTN","BPSOSRX3",56,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"1.01") I $$FILLFLDS^BPSUTIL2(9002313.77,"1.01",BPIEN77,$G(MOREDATA("RX ACTION")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.01)
"RTN","BPSOSRX3",57,0)
 I $G(MOREDATA("DIVISION")),$$FILLFLDS^BPSUTIL2(9002313.77,"1.02",BPIEN77,MOREDATA("DIVISION"))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.02)
"RTN","BPSOSRX3",58,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,"1.04",BPIEN77,BPREQTYP)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.04)
"RTN","BPSOSRX3",59,0)
 ;if this is a queued "C" request then the billing will be done again upon activation so MOREDATA(BILL) is undefined
"RTN","BPSOSRX3",60,0)
 ;that is why we are not checking this field
"RTN","BPSOSRX3",61,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"1.05") I $$FILLFLDS^BPSUTIL2(9002313.77,"1.05",BPIEN77,$P($G(MOREDATA("BILL")),U))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.05)
"RTN","BPSOSRX3",62,0)
 I '$D(MOREDATA("ELIG")) I $$ACTFIELD(BPSKIP,BPREQTYP,"1.06") I $$FILLFLDS^BPSUTIL2(9002313.77,"1.06",BPIEN77,$P($G(MOREDATA("BILL")),U,3))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.06)
"RTN","BPSOSRX3",63,0)
 I $D(MOREDATA("ELIG")) I $$ACTFIELD(BPSKIP,BPREQTYP,"1.06") I $$FILLFLDS^BPSUTIL2(9002313.77,"1.06",BPIEN77,$G(MOREDATA("ELIG")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.06)
"RTN","BPSOSRX3",64,0)
 I $P($G(MOREDATA("BILL")),U,2)'="" I $$ACTFIELD(BPSKIP,BPREQTYP,"1.07") I $$FILLFLDS^BPSUTIL2(9002313.77,"1.07",BPIEN77,$P($G(MOREDATA("BILL")),U,2))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.07)
"RTN","BPSOSRX3",65,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"1.13") I $$FILLFLDS^BPSUTIL2(9002313.77,"1.13",BPIEN77,$G(MOREDATA("RX")))<1,BPREQTYP'="E" Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.13)
"RTN","BPSOSRX3",66,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"1.14") I $$FILLFLDS^BPSUTIL2(9002313.77,"1.14",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,4))<1,BPREQTYP'="E" Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.14)
"RTN","BPSOSRX3",67,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"1.15") I $$FILLFLDS^BPSUTIL2(9002313.77,"1.15",BPIEN77,$G(MOREDATA("PATIENT")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.15)
"RTN","BPSOSRX3",68,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"1.16"),$$FILLFLDS^BPSUTIL2(9002313.77,"1.16",BPIEN77,$P($G(MOREDATA("IBDATA",1,3)),U,7))<1,BPREQTYP="E" Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.16)
"RTN","BPSOSRX3",69,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"2.01") I $$FILLFLDS^BPSUTIL2(9002313.77,"2.01",BPIEN77,+$G(MOREDATA("DATE OF SERVICE")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.01)
"RTN","BPSOSRX3",70,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"2.02") I $$FILLFLDS^BPSUTIL2(9002313.77,"2.02",BPIEN77,$G(MOREDATA("REVERSAL REASON")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.02)
"RTN","BPSOSRX3",71,0)
 I $L($G(MOREDATA("BPOVRIEN")))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"2.04",BPIEN77,$G(MOREDATA("BPOVRIEN")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.04)
"RTN","BPSOSRX3",72,0)
 I $L($G(MOREDATA("BPSCLARF")))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"2.05",BPIEN77,$G(MOREDATA("BPSCLARF")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.05)
"RTN","BPSOSRX3",73,0)
 I $L($G(BILLNDC))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"2.06",BPIEN77,BILLNDC)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.06)
"RTN","BPSOSRX3",74,0)
 I $L($P($G(MOREDATA("BPSAUTH")),U))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"2.07",BPIEN77,$E($P(MOREDATA("BPSAUTH"),U,1),1,2))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.07)
"RTN","BPSOSRX3",75,0)
 I $L($P($G(MOREDATA("BPSAUTH")),U,2))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"2.08",BPIEN77,$E($P(MOREDATA("BPSAUTH"),U,2),1,11))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.08)
"RTN","BPSOSRX3",76,0)
 I $L($G(MOREDATA("BPSDELAY")))>0,$$FILLFLDS^BPSUTIL2(9002313.77,"2.1",BPIEN77,MOREDATA("BPSDELAY"))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.1)
"RTN","BPSOSRX3",77,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"4.01") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.01",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,1))
"RTN","BPSOSRX3",78,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"4.02") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.02",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,2))
"RTN","BPSOSRX3",79,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"4.03") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.03",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,3))
"RTN","BPSOSRX3",80,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"4.04"),$$FILLFLDS^BPSUTIL2(9002313.77,"4.04",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,4))
"RTN","BPSOSRX3",81,0)
 I $P($G(MOREDATA("BPSDATA",1)),U,5)'="" I $$ACTFIELD(BPSKIP,BPREQTYP,"4.05") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.05",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,5))
"RTN","BPSOSRX3",82,0)
 I $P($G(MOREDATA("BPSDATA",1)),U,6)'="" I $$ACTFIELD(BPSKIP,BPREQTYP,"4.06") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.06",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,6))
"RTN","BPSOSRX3",83,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"4.07") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.07",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,7))
"RTN","BPSOSRX3",84,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"4.08") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.08",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,8))
"RTN","BPSOSRX3",85,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"4.09") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.09",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,9))
"RTN","BPSOSRX3",86,0)
 I $G(MOREDATA("CLOSE AFT REV"))=1 I $$FILLFLDS^BPSUTIL2(9002313.77,"7.01",BPIEN77,1)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,7.01)
"RTN","BPSOSRX3",87,0)
 I $G(MOREDATA("CLOSE AFT REV REASON"))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"7.02",BPIEN77,+$G(MOREDATA("CLOSE AFT REV REASON")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,7.02)
"RTN","BPSOSRX3",88,0)
 I $L($G(MOREDATA("CLOSE AFT REV COMMENT")))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"7.03",BPIEN77,$G(MOREDATA("CLOSE AFT REV COMMENT")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,7.03)
"RTN","BPSOSRX3",89,0)
 I $G(BPSARRY("SC/EI OVR"))=1 I $$FILLFLDS^BPSUTIL2(9002313.77,"2.09",BPIEN77,1)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.09)
"RTN","BPSOSRX3",90,0)
 ;
"RTN","BPSOSRX3",91,0)
 ; secondary billing and primary Tricare billing related fields
"RTN","BPSOSRX3",92,0)
 I $G(MOREDATA("RTYPE"))'="" I $$FILLFLDS^BPSUTIL2(9002313.77,"1.08",BPIEN77,MOREDATA("RTYPE"))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.08)
"RTN","BPSOSRX3",93,0)
 I $G(MOREDATA("PRIMARY BILL"))'="" I $$FILLFLDS^BPSUTIL2(9002313.77,"1.09",BPIEN77,MOREDATA("PRIMARY BILL"))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.09)
"RTN","BPSOSRX3",94,0)
 I $G(MOREDATA("PRIOR PAYMENT"))'="" I $$FILLFLDS^BPSUTIL2(9002313.77,"1.1",BPIEN77,MOREDATA("PRIOR PAYMENT"))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.1)
"RTN","BPSOSRX3",95,0)
 I $G(MOREDATA("337-4C"))'="" I $$FILLFLDS^BPSUTIL2(9002313.77,1.11,BPIEN77,MOREDATA("337-4C"))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.11)   ; cob other payments count
"RTN","BPSOSRX3",96,0)
 I $G(MOREDATA("308-C8"))'="" I $$FILLFLDS^BPSUTIL2(9002313.77,1.12,BPIEN77,MOREDATA("308-C8"))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.12)   ; other coverage code
"RTN","BPSOSRX3",97,0)
 ;
"RTN","BPSOSRX3",98,0)
 ; store secondary billing related data entered by the user - esg 6/8/10
"RTN","BPSOSRX3",99,0)
 S BPQ=0,BPERRMSG=""
"RTN","BPSOSRX3",100,0)
 I BPCOBIND=2 D
"RTN","BPSOSRX3",101,0)
 . N AMTIEN,BPIEN1,BPIEN2,BPIEN778,BPZ,BPZ1,BPZ2,OPAMT,OPAPQ,OPAYD,OPPRA,OPREJ,PIEN,REJIEN
"RTN","BPSOSRX3",102,0)
 . S PIEN=0 F  S PIEN=$O(MOREDATA("OTHER PAYER",PIEN)) Q:'PIEN!BPQ  D
"RTN","BPSOSRX3",103,0)
 .. S OPAYD=$G(MOREDATA("OTHER PAYER",PIEN,0)) Q:OPAYD=""
"RTN","BPSOSRX3",104,0)
 .. ;
"RTN","BPSOSRX3",105,0)
 .. ; count up the number of multiples we have in each set
"RTN","BPSOSRX3",106,0)
 .. S BPZ=0 F BPZ1=0:1 S BPZ=$O(MOREDATA("OTHER PAYER",PIEN,"P",BPZ)) Q:'BPZ
"RTN","BPSOSRX3",107,0)
 .. S BPZ=0 F BPZ2=0:1 S BPZ=$O(MOREDATA("OTHER PAYER",PIEN,"R",BPZ)) Q:'BPZ
"RTN","BPSOSRX3",108,0)
 .. I BPZ1,BPZ2 S BPQ=1,BPERRMSG="Can't have both payments and rejects for the same OTHER PAYER" Q
"RTN","BPSOSRX3",109,0)
 .. ;
"RTN","BPSOSRX3",110,0)
 .. ; add a new entry to subfile 9002313.778
"RTN","BPSOSRX3",111,0)
 .. S BPIEN778=$$INSITEM^BPSUTIL2(9002313.778,BPIEN77,PIEN,PIEN,"",,0)
"RTN","BPSOSRX3",112,0)
 .. I BPIEN778<1 S BPERRMSG="Can't create entry in COB OTHER PAYERS multiple of the BPS REQUESTS file",BPQ=1 Q
"RTN","BPSOSRX3",113,0)
 .. S BPERRMSG="Can't populate field in COB OTHER PAYERS multiple"   ; just in case BPQ is set below
"RTN","BPSOSRX3",114,0)
 .. ;
"RTN","BPSOSRX3",115,0)
 .. ; set the rest of the pieces at this level
"RTN","BPSOSRX3",116,0)
 .. I $P(OPAYD,U,2)'="" I $$FILLFLDS^BPSUTIL2(9002313.778,.02,PIEN_","_BPIEN77,$P(OPAYD,U,2))<1 S BPQ=1 Q
"RTN","BPSOSRX3",117,0)
 .. I $P(OPAYD,U,3)'="" I $$FILLFLDS^BPSUTIL2(9002313.778,.03,PIEN_","_BPIEN77,$P(OPAYD,U,3))<1 S BPQ=1 Q
"RTN","BPSOSRX3",118,0)
 .. I $P(OPAYD,U,4)'="" I $$FILLFLDS^BPSUTIL2(9002313.778,.04,PIEN_","_BPIEN77,$P(OPAYD,U,4))<1 S BPQ=1 Q
"RTN","BPSOSRX3",119,0)
 .. I $P(OPAYD,U,5)'="" I $$FILLFLDS^BPSUTIL2(9002313.778,.05,PIEN_","_BPIEN77,$P(OPAYD,U,5))<1 S BPQ=1 Q
"RTN","BPSOSRX3",120,0)
 .. I $$FILLFLDS^BPSUTIL2(9002313.778,.06,PIEN_","_BPIEN77,BPZ1)<1 S BPQ=1 Q
"RTN","BPSOSRX3",121,0)
 .. I $$FILLFLDS^BPSUTIL2(9002313.778,.07,PIEN_","_BPIEN77,BPZ2)<1 S BPQ=1 Q
"RTN","BPSOSRX3",122,0)
 .. S BPERRMSG=""
"RTN","BPSOSRX3",123,0)
 .. ;
"RTN","BPSOSRX3",124,0)
 .. ; now loop thru the other payer payment array
"RTN","BPSOSRX3",125,0)
 .. S AMTIEN=0 F  S AMTIEN=$O(MOREDATA("OTHER PAYER",PIEN,"P",AMTIEN)) Q:'AMTIEN!BPQ  D
"RTN","BPSOSRX3",126,0)
 ... S OPAMT=$G(MOREDATA("OTHER PAYER",PIEN,"P",AMTIEN,0))
"RTN","BPSOSRX3",127,0)
 ... S OPAPQ=$P(OPAMT,U,2)   ; 342-HC other payer amt paid qualifier (ncpdp 5.1 blank is OK)
"RTN","BPSOSRX3",128,0)
 ... S OPPRA=$P(OPAMT,U,3)   ; 352-NQ, Other Payer-Patient Responsibility Amount
"RTN","BPSOSRX3",129,0)
 ... S OPAMT=+OPAMT          ; 431-DV other payer amt paid
"RTN","BPSOSRX3",130,0)
 ... ;
"RTN","BPSOSRX3",131,0)
 ... ; add a new entry to subfile 9002313.7781
"RTN","BPSOSRX3",132,0)
 ... S BPIEN1=$$INSITEM^BPSUTIL2(9002313.7781,PIEN_","_BPIEN77,OPAMT,AMTIEN,"",,0)
"RTN","BPSOSRX3",133,0)
 ... I BPIEN1<1 S BPERRMSG="Can't create entry in 9002313.7781 subfile",BPQ=1 Q
"RTN","BPSOSRX3",134,0)
 ... ;
"RTN","BPSOSRX3",135,0)
 ... ; set piece 2
"RTN","BPSOSRX3",136,0)
 ... I OPAPQ'="" I $$FILLFLDS^BPSUTIL2(9002313.7781,.02,AMTIEN_","_PIEN_","_BPIEN77,OPAPQ)<1 D
"RTN","BPSOSRX3",137,0)
 .... S BPQ=1,BPERRMSG="Can't populate .02 field in 9002313.7781 subfile"
"RTN","BPSOSRX3",138,0)
 .... Q
"RTN","BPSOSRX3",139,0)
 ... ;
"RTN","BPSOSRX3",140,0)
 ... ; set piece 3
"RTN","BPSOSRX3",141,0)
 ... I OPPRA'="" I $$FILLFLDS^BPSUTIL2(9002313.7781,.03,AMTIEN_","_PIEN_","_BPIEN77,OPPRA)<1 D
"RTN","BPSOSRX3",142,0)
 .... S BPQ=1,BPERRMSG="Can't populate .03 field in 9002313.7781 subfile"
"RTN","BPSOSRX3",143,0)
 .... Q
"RTN","BPSOSRX3",144,0)
 ... ;
"RTN","BPSOSRX3",145,0)
 ... Q
"RTN","BPSOSRX3",146,0)
 .. ;
"RTN","BPSOSRX3",147,0)
 .. ; now loop thru the other payer reject array
"RTN","BPSOSRX3",148,0)
 .. S REJIEN=0 F  S REJIEN=$O(MOREDATA("OTHER PAYER",PIEN,"R",REJIEN)) Q:'REJIEN!BPQ  D
"RTN","BPSOSRX3",149,0)
 ... S OPREJ=$G(MOREDATA("OTHER PAYER",PIEN,"R",REJIEN,0)) Q:OPREJ=""  Q:$P(OPREJ,U,1)=""
"RTN","BPSOSRX3",150,0)
 ... ;
"RTN","BPSOSRX3",151,0)
 ... ; add a new entry to subfile 9002313.7782
"RTN","BPSOSRX3",152,0)
 ... S BPIEN2=$$INSITEM^BPSUTIL2(9002313.7782,PIEN_","_BPIEN77,$P(OPREJ,U,1),REJIEN,"",,0)
"RTN","BPSOSRX3",153,0)
 ... I BPIEN2<1 S BPERRMSG="Can't create entry in 9002313.7782 subfile",BPQ=1 Q
"RTN","BPSOSRX3",154,0)
 ... Q
"RTN","BPSOSRX3",155,0)
 .. Q
"RTN","BPSOSRX3",156,0)
 . Q
"RTN","BPSOSRX3",157,0)
 I BPQ Q "0^"_BPERRMSG_" (COB DATA)"
"RTN","BPSOSRX3",158,0)
 ;
"RTN","BPSOSRX3",159,0)
 ;store DURREC info
"RTN","BPSOSRX3",160,0)
 S BPQ=0
"RTN","BPSOSRX3",161,0)
 S DUR=0
"RTN","BPSOSRX3",162,0)
 F  S DUR=$O(MOREDATA("DUR",DUR)) Q:+DUR=0!(BPQ=1)  D
"RTN","BPSOSRX3",163,0)
 . S BPIEN771=$$INSITEM^BPSUTIL2(9002313.771,BPIEN77,$P(MOREDATA("DUR",DUR,0),U),DUR,"",,0)
"RTN","BPSOSRX3",164,0)
 . I BPIEN771<1 S BPERRMSG="Cannot create DUR record in DUR multiple of the BPS REQUEST file",BPQ=1 Q
"RTN","BPSOSRX3",165,0)
 . S BPERRMSG="Cannot populate a field in DUR multiple"
"RTN","BPSOSRX3",166,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.771,".02",DUR_","_BPIEN77,$P(MOREDATA("DUR",DUR,0),U,2))<1 S BPQ=1 Q
"RTN","BPSOSRX3",167,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.771,".03",DUR_","_BPIEN77,$P(MOREDATA("DUR",DUR,0),U,3))<1 S BPQ=1 Q
"RTN","BPSOSRX3",168,0)
 I BPQ=1 Q "0^"_BPERRMSG_" DUR DATA"
"RTN","BPSOSRX3",169,0)
 ;
"RTN","BPSOSRX3",170,0)
 ;store ins to IB INSURER DATA
"RTN","BPSOSRX3",171,0)
 S BPQ=0
"RTN","BPSOSRX3",172,0)
 S BPCOB=0 F  S BPCOB=$O(BPIENS78(BPCOB)) Q:+BPCOB=0!(BPQ=1)  D
"RTN","BPSOSRX3",173,0)
 . S BPIEN772=$$INSITEM^BPSUTIL2(9002313.772,BPIEN77,BPCOB,BPCOB,"",,0)
"RTN","BPSOSRX3",174,0)
 . I BPIEN772<1 S BPERRMSG="Cannot create record in IBDATA multiple of the BPS REQUEST file",BPQ=1 Q
"RTN","BPSOSRX3",175,0)
 . S BPERRMSG="Cannot populate a field in IBDATA multiple"
"RTN","BPSOSRX3",176,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.772,".02",BPCOB_","_BPIEN77,$S(BPCOBIND=BPCOB:1,1:0))<1 S BPQ=1 Q
"RTN","BPSOSRX3",177,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.772,".03",BPCOB_","_BPIEN77,BPIENS78(BPCOB))<1 S BPQ=1 Q
"RTN","BPSOSRX3",178,0)
 I BPQ=1 Q "0^"_BPERRMSG_"INSURER DATA"
"RTN","BPSOSRX3",179,0)
 ;
"RTN","BPSOSRX3",180,0)
 ;return 1 (success) and IEN of the 9002313.77 entry
"RTN","BPSOSRX3",181,0)
 Q "1^"_BPIEN77
"RTN","BPSOSRX3",182,0)
 ;
"RTN","BPSOSRX3",183,0)
 ;check if the field is used in MOREDATA for the specified REQUEST TYPE - CLAIM="C" /UNCLAIM="U"
"RTN","BPSOSRX3",184,0)
ACTFIELD(BPSKIP,BPREQTYP,BPFLD) ;
"RTN","BPSOSRX3",185,0)
 ;For Reversal or Skip, only do RX Action, Date of Service, Reversal Reason, and User who made the Request
"RTN","BPSOSRX3",186,0)
 I (BPREQTYP="U")!(BPSKIP=1) Q ";1.01;2.01;2.02;6.02;"[(";"_BPFLD_";")
"RTN","BPSOSRX3",187,0)
 ;For Eligibility Verification, skip Eligibility
"RTN","BPSOSRX3",188,0)
 I BPREQTYP="E",";1.06;"[(";"_BPFLD_";") Q 0
"RTN","BPSOSRX3",189,0)
 Q 1
"RTN","BPSOSRX3",190,0)
 ;
"RTN","BPSOSRX3",191,0)
 ;Lock BPS REQUEST
"RTN","BPSOSRX3",192,0)
LOCK77(BPTIMOUT,IEN59,BPSRC) ;
"RTN","BPSOSRX3",193,0)
 N BPRET
"RTN","BPSOSRX3",194,0)
 L +^BPS(9002313.77):+$G(BPTIMOUT)
"RTN","BPSOSRX3",195,0)
 S BPRET=$T
"RTN","BPSOSRX3",196,0)
 I $G(IEN59)>0 D LOG^BPSOSL(IEN59,$G(BPSRC)_$S(BPRET=1:"-Lock",1:"-Failed to Lock")_" BPS REQUEST file")
"RTN","BPSOSRX3",197,0)
 Q BPRET
"RTN","BPSOSRX3",198,0)
 ;
"RTN","BPSOSRX3",199,0)
 ;UnLock BPS REQUEST
"RTN","BPSOSRX3",200,0)
UNLOCK77(IEN59,BPSRC) ;
"RTN","BPSOSRX3",201,0)
 L -^BPS(9002313.77)
"RTN","BPSOSRX3",202,0)
 I $G(IEN59)>0 D LOG^BPSOSL(IEN59,$G(BPSRC)_"-Unlock BPS REQUEST file")
"RTN","BPSOSRX3",203,0)
 Q
"RTN","BPSOSRX3",204,0)
 ;
"RTN","BPSOSRX3",205,0)
 ;BP77 - ien of BPS REQUEST
"RTN","BPSOSRX3",206,0)
ERRFIELD(BP77,BPRFILE,BPMESS,BPFILENO,BPFLDNO) ;
"RTN","BPSOSRX3",207,0)
 I $G(BP77)>0 D DELREQST^BPSOSRX4(BP77) ;delete incomplete record
"RTN","BPSOSRX3",208,0)
 Q $$FIELDMSG^BPSOSRX2(BPRFILE,BPMESS,BPFILENO,BPFLDNO)
"RTN","BPSOSRX3",209,0)
 ;
"RTN","BPSOSRX3",210,0)
 ;BPSOSRX3
"RTN","BPSPRRX3")
0^20^B127795834
"RTN","BPSPRRX3",1,0)
BPSPRRX3 ;ALB/SS - ePharmacy secondary billing ;16-DEC-08
"RTN","BPSPRRX3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8,10,11,19,23**;JUN 2004;Build 44
"RTN","BPSPRRX3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSPRRX3",4,0)
 ;
"RTN","BPSPRRX3",5,0)
 ;External reference to file 399.3 supported by IA 3822
"RTN","BPSPRRX3",6,0)
 ;External reference to $$INSUR^IBBAPI supported by IA 4419
"RTN","BPSPRRX3",7,0)
 ;External reference to $$PLANEPS^IBNCPDPU supported by IA 5572
"RTN","BPSPRRX3",8,0)
 ;
"RTN","BPSPRRX3",9,0)
PROMPTS(RX,FILL,DOS,BPSPRARR) ;
"RTN","BPSPRRX3",10,0)
 ;BPSPRARR - array to pass values determined earlier (if any) and to return user's input/corrections
"RTN","BPSPRRX3",11,0)
 ;Input:
"RTN","BPSPRRX3",12,0)
 ;  RX - Prescription IEN
"RTN","BPSPRRX3",13,0)
 ;  FILL - Fill Number
"RTN","BPSPRRX3",14,0)
 ;  DOS - Date of Service
"RTN","BPSPRRX3",15,0)
 ;  BPSPRARR - Array of data passed by reference
"RTN","BPSPRRX3",16,0)
 ;Returns 
"RTN","BPSPRRX3",17,0)
 ;   1 = the data is correct
"RTN","BPSPRRX3",18,0)
 ;  -1 = the data is not correct - Do not create the claim
"RTN","BPSPRRX3",19,0)
 ;
"RTN","BPSPRRX3",20,0)
 ; Check paramters
"RTN","BPSPRRX3",21,0)
 I '$G(RX) Q -1
"RTN","BPSPRRX3",22,0)
 I $G(FILL)="" Q -1
"RTN","BPSPRRX3",23,0)
 I '$G(DOS) Q -1
"RTN","BPSPRRX3",24,0)
 ;
"RTN","BPSPRRX3",25,0)
 ;
"RTN","BPSPRRX3",26,0)
 N BPQ,BPSQ,IEN59PR,DFN,BPSPLAN,BPX,BPSDFLT,BPSSET
"RTN","BPSPRRX3",27,0)
 N BPSPIEN,BPSSET,BPCNT,BPSRJ,BPSPAID,RETV,TOTAL
"RTN","BPSPRRX3",28,0)
 N BPRATTYP,BPSPDRJ,BPSPLNSL,BPX1,BPSFIEN,BPSPSARR,BPSPSHV
"RTN","BPSPRRX3",29,0)
 N IEN59SEC,BPSRET,BPSINS
"RTN","BPSPRRX3",30,0)
 ;
"RTN","BPSPRRX3",31,0)
 S (BPQ,BPSQ)=0
"RTN","BPSPRRX3",32,0)
 ;
"RTN","BPSPRRX3",33,0)
 ; Other Payer IEN defaults to 1 since we don't do tertiary
"RTN","BPSPRRX3",34,0)
 S BPSPIEN=1
"RTN","BPSPRRX3",35,0)
 ;
"RTN","BPSPRRX3",36,0)
 ; Get Primary BPS Transaction
"RTN","BPSPRRX3",37,0)
 S IEN59PR=$$IEN59^BPSOSRX(RX,FILL,1)
"RTN","BPSPRRX3",38,0)
 ;
"RTN","BPSPRRX3",39,0)
 ; Get/validate Patient DFN
"RTN","BPSPRRX3",40,0)
 S DFN=$P($G(^BPST(IEN59PR,0)),U,6)
"RTN","BPSPRRX3",41,0)
 I DFN="" S DFN=$$RXAPI1^BPSUTIL1(RX,2,"I")
"RTN","BPSPRRX3",42,0)
 I DFN="" Q -1
"RTN","BPSPRRX3",43,0)
 ;
"RTN","BPSPRRX3",44,0)
 ; Get patient insurances
"RTN","BPSPRRX3",45,0)
 S BPSRET=$$INSUR^IBBAPI(DFN,DOS,"E",.BPSINS,"1,7,8")
"RTN","BPSPRRX3",46,0)
 ;
"RTN","BPSPRRX3",47,0)
 ; Get the first Secondary insurance for default
"RTN","BPSPRRX3",48,0)
 S BPSPRARR("PLAN")="",BPSPRARR("INS NAME")="",(BPX,BPQ)=0
"RTN","BPSPRRX3",49,0)
 F  S BPX=$O(BPSINS("IBBAPI","INSUR",BPX)) Q:'BPX  D  Q:BPQ
"RTN","BPSPRRX3",50,0)
 . I $P(BPSINS("IBBAPI","INSUR",BPX,7),U)'=2 Q
"RTN","BPSPRRX3",51,0)
 . S BPSPRARR("PLAN")=$P(BPSINS("IBBAPI","INSUR",BPX,8),U)
"RTN","BPSPRRX3",52,0)
 . S BPSPRARR("INS NAME")=$P(BPSINS("IBBAPI","INSUR",BPX,1),U,2)
"RTN","BPSPRRX3",53,0)
 . S BPQ=1
"RTN","BPSPRRX3",54,0)
 . Q
"RTN","BPSPRRX3",55,0)
 ;
"RTN","BPSPRRX3",56,0)
 ; Get Rate Type for the Secondary Insurance
"RTN","BPSPRRX3",57,0)
 S IEN59SEC=$$IEN59^BPSOSRX(RX,FILL,2)
"RTN","BPSPRRX3",58,0)
 S BPSPRARR("RTYPE")=$$GETRTP59^BPSPRRX5(IEN59SEC)
"RTN","BPSPRRX3",59,0)
 I BPSPRARR("RTYPE")="" S BPSPRARR("RTYPE")=8
"RTN","BPSPRRX3",60,0)
 ;
"RTN","BPSPRRX3",61,0)
 ; Display current COB fields
"RTN","BPSPRRX3",62,0)
 D DISPSEC(.BPSPRARR)
"RTN","BPSPRRX3",63,0)
 ;
"RTN","BPSPRRX3",64,0)
 S BPQ=0
"RTN","BPSPRRX3",65,0)
 I $G(BPSPRARR("PLAN"))=""!($G(BPSPRARR("RTYPE"))="")!($G(BPSPRARR("308-C8"))="") S BPQ=1
"RTN","BPSPRRX3",66,0)
 I BPSQ=0 F BPX=4,5 I $P($G(BPSPRARR("OTHER PAYER",BPSPIEN,0)),U,BPX)="" S BPQ=1
"RTN","BPSPRRX3",67,0)
 I BPQ=0,'$D(BPSPRARR("OTHER PAYER",BPSPIEN,"P")),'$D(BPSPRARR("OTHER PAYER",BPSPIEN,"R")) S BPQ=1
"RTN","BPSPRRX3",68,0)
 ;
"RTN","BPSPRRX3",69,0)
 ; Prompt to continue or not
"RTN","BPSPRRX3",70,0)
 W !
"RTN","BPSPRRX3",71,0)
 I BPQ=1 W !,"Required secondary claim information is missing. Enter all required information",!
"RTN","BPSPRRX3",72,0)
 E  S BPQ=$$YESNO^BPSSCRRS("Do you want to edit this Secondary Claim Information (Y/N)","N") Q:BPQ=-1 -1 G:BPQ=0 END
"RTN","BPSPRRX3",73,0)
 ;
"RTN","BPSPRRX3",74,0)
 ; Prompt for Secondary Insurance Plan
"RTN","BPSPRRX3",75,0)
 W !
"RTN","BPSPRRX3",76,0)
 F  D  Q:BPSQ'=0
"RTN","BPSPRRX3",77,0)
 . S BPSPLAN=$$SELECTPL^BPSPRRX1(DFN,DOS,.BPSPLNSL,"SECONDARY INSURANCE POLICY",$G(BPSPRARR("PLAN")))
"RTN","BPSPRRX3",78,0)
 . I BPSPLAN=0 S BPSQ=-1 Q
"RTN","BPSPRRX3",79,0)
 . I $P(BPSPLNSL(7),U)'=2 W !,"Must select a Secondary insurance plan." Q
"RTN","BPSPRRX3",80,0)
 . S BPSPRARR("PLAN")=BPSPLAN
"RTN","BPSPRRX3",81,0)
 . S BPSPRARR("INS NAME")=$P(BPSPLNSL(1),U,2)
"RTN","BPSPRRX3",82,0)
 . S BPSPSHV=$$PAYSHTV(BPSPLAN)
"RTN","BPSPRRX3",83,0)
 . S BPSQ=1
"RTN","BPSPRRX3",84,0)
 Q:BPSQ=-1 -1
"RTN","BPSPRRX3",85,0)
 ;
"RTN","BPSPRRX3",86,0)
 ; Prompt for Rate Type and store in BPSPRARR("RTYPE")
"RTN","BPSPRRX3",87,0)
 F  S BPRATTYP=$$RATETYPE^BPSPRRX2($S($G(BPSPRARR("RTYPE"))]"":BPSPRARR("RTYPE"),1:8)) Q:BPRATTYP'=""
"RTN","BPSPRRX3",88,0)
 I BPRATTYP=-1 Q -1
"RTN","BPSPRRX3",89,0)
 S BPSPRARR("RTYPE")=BPRATTYP
"RTN","BPSPRRX3",90,0)
 ;
"RTN","BPSPRRX3",91,0)
 ; Prompt for OTHER COVERAGE CODE
"RTN","BPSPRRX3",92,0)
 I $G(BPSPRARR("308-C8"))="" S BPSPRARR("308-C8")="04"
"RTN","BPSPRRX3",93,0)
 S BPSSET="" D SET308(.BPSSET)
"RTN","BPSPRRX3",94,0)
 S RETV=$$PROMPT("SRA"_U_BPSSET,"OTHER COVERAGE CODE:  ",$G(BPSPRARR("308-C8")),"Indicate whether or not the patient has other insurance coverage")
"RTN","BPSPRRX3",95,0)
 Q:RETV<0 -1
"RTN","BPSPRRX3",96,0)
 S BPSPRARR("308-C8")=RETV
"RTN","BPSPRRX3",97,0)
 ;
"RTN","BPSPRRX3",98,0)
 ; Prompt for OTHER PAYER ID
"RTN","BPSPRRX3",99,0)
 S BPSDFLT=$P($G(BPSPRARR("OTHER PAYER",BPSPIEN,0)),U,4)
"RTN","BPSPRRX3",100,0)
 S RETV=$$PROMPT("FR"_U_"0:10:","OTHER PAYER ID",$G(BPSDFLT),"ID assigned to the payer") Q:RETV<0 -1
"RTN","BPSPRRX3",101,0)
 Q:RETV=-1 -1
"RTN","BPSPRRX3",102,0)
 S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,4)=RETV
"RTN","BPSPRRX3",103,0)
 ;
"RTN","BPSPRRX3",104,0)
 ; Prompt for OTHER PAYER DATE
"RTN","BPSPRRX3",105,0)
 S BPSDFLT=$P($G(BPSPRARR("OTHER PAYER",BPSPIEN,0)),U,5)
"RTN","BPSPRRX3",106,0)
 S RETV=$$PROMPT("DR"_U_"","OTHER PAYER DATE",$$FMTE^XLFDT($G(BPSDFLT)),"Payment or denial date of the claim submitted to the other payer. Used for coordination of benefits.")
"RTN","BPSPRRX3",107,0)
 Q:RETV=-1 -1
"RTN","BPSPRRX3",108,0)
 S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,5)=RETV
"RTN","BPSPRRX3",109,0)
 ;
"RTN","BPSPRRX3",110,0)
 ; Prompt for Paid Amount or Reject Codes
"RTN","BPSPRRX3",111,0)
 S BPSSET="PAID:PAID AMOUNTS;REJECT:REJECT CODES"
"RTN","BPSPRRX3",112,0)
 S BPSDFLT=""
"RTN","BPSPRRX3",113,0)
 I $D(BPSPRARR("OTHER PAYER",BPSPIEN,"P")) S BPSDFLT="PAID AMOUNTS"
"RTN","BPSPRRX3",114,0)
 I $D(BPSPRARR("OTHER PAYER",BPSPIEN,"R")) S BPSDFLT=$S(BPSDFLT="PAID AMOUNTS":"",1:"REJECT CODES")
"RTN","BPSPRRX3",115,0)
 S BPSPDRJ=$$PROMPT("SRA"_U_BPSSET,"Edit Paid Amounts or Reject Codes (PAID AMOUNTS/REJECT CODES):  ",BPSDFLT,"Edit the Paid Amounts or Reject Codes")
"RTN","BPSPRRX3",116,0)
 Q:BPSPDRJ=-1 -1
"RTN","BPSPRRX3",117,0)
 ;
"RTN","BPSPRRX3",118,0)
 ; Prompt to edit paid amounts
"RTN","BPSPRRX3",119,0)
 D:BPSPDRJ="PAID"
"RTN","BPSPRRX3",120,0)
 . ; Remove reject codes.
"RTN","BPSPRRX3",121,0)
 . K BPSPRARR("OTHER PAYER",BPSPIEN,"R")
"RTN","BPSPRRX3",122,0)
 . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,7)=""
"RTN","BPSPRRX3",123,0)
 . ;
"RTN","BPSPRRX3",124,0)
 . K BPSPAID
"RTN","BPSPRRX3",125,0)
 . S (BPCNT,BPX,BPQ,TOTAL)=0
"RTN","BPSPRRX3",126,0)
 . ; BPS NCPDP FIELD DEFS for field 342 codes
"RTN","BPSPRRX3",127,0)
 . S BPSSET=$$GETCDLST(BPSPSHV)
"RTN","BPSPRRX3",128,0)
 . F BPX1=0:1 S BPX=$O(BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX)) Q:'BPX  D  Q:BPQ=1
"RTN","BPSPRRX3",129,0)
 . . S BPSQUAL=$P(BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX,0),U,2)
"RTN","BPSPRRX3",130,0)
 . . S BPSQUAL=$$GET1^DIQ(9002313.2,BPSQUAL,.01)
"RTN","BPSPRRX3",131,0)
 . . S BPSAMT=$P(BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX,0),U,1)
"RTN","BPSPRRX3",132,0)
 . . S BPQ=$$ASKPAID(BPSSET,BPSQUAL,BPSAMT,.BPCNT,.BPSPAID)
"RTN","BPSPRRX3",133,0)
 . ;
"RTN","BPSPRRX3",134,0)
 . I 'BPQ F  S BPQ=$$ASKPAID(BPSSET,"","",.BPCNT,.BPSPAID) Q:BPQ=1
"RTN","BPSPRRX3",135,0)
 . ; Enter updated values into the BPSPRARR array
"RTN","BPSPRRX3",136,0)
 . K BPSPRARR("OTHER PAYER",BPSPIEN,"P")
"RTN","BPSPRRX3",137,0)
 . S BPX=0 F BPX1=0:1 S BPX=$O(BPSPAID(1,BPX)) Q:BPX=""  D
"RTN","BPSPRRX3",138,0)
 . . S BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX,0)=BPSPAID(1,BPX)
"RTN","BPSPRRX3",139,0)
 . . S TOTAL=TOTAL+BPSPAID(1,BPX)
"RTN","BPSPRRX3",140,0)
 . . ;
"RTN","BPSPRRX3",141,0)
 . ; Set the OTHER PAYER AMOUNT PAID COUNT
"RTN","BPSPRRX3",142,0)
 . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,6)=BPX1
"RTN","BPSPRRX3",143,0)
 . Q
"RTN","BPSPRRX3",144,0)
 ;
"RTN","BPSPRRX3",145,0)
 ; Edit/add reject codes
"RTN","BPSPRRX3",146,0)
 D:BPSPDRJ="REJECT"
"RTN","BPSPRRX3",147,0)
 . ; Remove paid amounts on the prior claim.
"RTN","BPSPRRX3",148,0)
 . K BPSPRARR("OTHER PAYER",BPSPIEN,"P")
"RTN","BPSPRRX3",149,0)
 . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,6)=""
"RTN","BPSPRRX3",150,0)
 . ;
"RTN","BPSPRRX3",151,0)
 . K BPSRJ
"RTN","BPSPRRX3",152,0)
 . S (BPCNT,BPX)=0
"RTN","BPSPRRX3",153,0)
 . F BPX1=0:1 S BPX=$O(BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX)) Q:'BPX  D  Q:BPCNT>4
"RTN","BPSPRRX3",154,0)
 . . S BPSDFLT=BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX,0)
"RTN","BPSPRRX3",155,0)
 . . S RETV=$$PROMPT("PO^9002313.93:AEMQ","OTHER PAYER REJECT CODE",$G(BPSDFLT),"Enter the reject code returned by the previous payer")
"RTN","BPSPRRX3",156,0)
 . . Q:RETV=-1
"RTN","BPSPRRX3",157,0)
 . . S BPCNT=BPCNT+1,BPSRJ(BPCNT)=$P(RETV,U,2)
"RTN","BPSPRRX3",158,0)
 . I BPCNT=5 W !,"Maximum of 5 OTHER PAYER REJECT CODES reached."
"RTN","BPSPRRX3",159,0)
 . I BPCNT<5 F  S RETV=$$PROMPT("PO^9002313.93:AEMQ","OTHER PAYER REJECT CODE","","Enter the reject code returned by the previous payer") Q:RETV=-1  D  Q:BPCNT>4
"RTN","BPSPRRX3",160,0)
 . . S BPCNT=BPCNT+1
"RTN","BPSPRRX3",161,0)
 . . S BPSRJ(BPCNT)=$P(RETV,U,2)
"RTN","BPSPRRX3",162,0)
 . . I BPCNT>4 W !,"Maximum of 5 OTHER PAYER REJECT CODES reached."
"RTN","BPSPRRX3",163,0)
 . K BPSPRARR("OTHER PAYER",BPSPIEN,"R")
"RTN","BPSPRRX3",164,0)
 . S BPX=0 F BPX1=0:1 S BPX=$O(BPSRJ(BPX)) Q:BPX=""  S BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX,0)=BPSRJ(BPX)
"RTN","BPSPRRX3",165,0)
 . ; Set the OTHER PAYER REJECT COUNT
"RTN","BPSPRRX3",166,0)
 . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,7)=BPX1
"RTN","BPSPRRX3",167,0)
 . Q
"RTN","BPSPRRX3",168,0)
 ;
"RTN","BPSPRRX3",169,0)
 I '$D(BPSPRARR("OTHER PAYER",BPSPIEN,"P")),'$D(BPSPRARR("OTHER PAYER",BPSPIEN,"R")) W !,"No Paid Amounts or Reject Codes entered" Q -1
"RTN","BPSPRRX3",170,0)
 ;
"RTN","BPSPRRX3",171,0)
 ; Default OTHER PAYER COVERAGE TYPE to PRIMARY
"RTN","BPSPRRX3",172,0)
 S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,2)="01"
"RTN","BPSPRRX3",173,0)
 ;
"RTN","BPSPRRX3",174,0)
 ; Default OTHER PAYER ID QUALIFIER to BIN
"RTN","BPSPRRX3",175,0)
 S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,3)="03"
"RTN","BPSPRRX3",176,0)
 ;
"RTN","BPSPRRX3",177,0)
 ; If the PRIOR PAYMENT is 0 but the user entered paid amounts, update the PRIOR PAYMENT
"RTN","BPSPRRX3",178,0)
 I +$G(BPSPRARR("PRIOR PAYMENT"))=0,$D(BPSPRARR("OTHER PAYER",BPSPIEN,"P")) D
"RTN","BPSPRRX3",179,0)
 . S BPSPRARR("PRIOR PAYMENT")=TOTAL
"RTN","BPSPRRX3",180,0)
 . I TOTAL>0 S BPSPRARR("308-C8")="02"
"RTN","BPSPRRX3",181,0)
 . E  S BPSPRARR("308-C8")="04"
"RTN","BPSPRRX3",182,0)
 ;
"RTN","BPSPRRX3",183,0)
END ;
"RTN","BPSPRRX3",184,0)
 Q 1
"RTN","BPSPRRX3",185,0)
 ;
"RTN","BPSPRRX3",186,0)
 ; 
"RTN","BPSPRRX3",187,0)
ASKPAID(BPSSET,BPSQUAL,BPSAMT,BPCNT,BPSPAID) ;
"RTN","BPSPRRX3",188,0)
 N RETV1,RETV2,BPSX,BPSPRA,BPSQ S BPSQ=0
"RTN","BPSPRRX3",189,0)
 I BPCNT>8 W !,"  Maximum of 9 OTHER PAYER AMOUNT PAID reached." Q 1
"RTN","BPSPRRX3",190,0)
ASK1 S RETV1=$$PROMPT("SOA"_U_BPSSET,"OTHER PAYER AMOUNT PAID QUALIFIER:  ",$G(BPSQUAL),"Type of payment from other sources (including coupons)")
"RTN","BPSPRRX3",191,0)
 I RETV1=-1!(RETV1="") Q 1
"RTN","BPSPRRX3",192,0)
 I RETV1="08",$D(BPSPAID(2)) W !,"  Qualifier '08' cannot be entered with other qualifiers" G ASK1
"RTN","BPSPRRX3",193,0)
 S RETV2=$$PROMPT("NO"_U_"0:999999.99:2","OTHER PAYER AMOUNT PAID",$G(BPSAMT),"Amount of any payment from other sources (including coupons)")
"RTN","BPSPRRX3",194,0)
 I RETV2=-1!(RETV2="") Q 1
"RTN","BPSPRRX3",195,0)
 ; Check for duplicate qualifiers and add Amount Paid to previous amount entered
"RTN","BPSPRRX3",196,0)
 I $D(BPSPAID(2,RETV1)) D  Q 0
"RTN","BPSPRRX3",197,0)
 . S BPSX="" F  S BPSX=$O(BPSPAID(1,BPSX)) Q:BPSX=""  D  Q:BPSQ
"RTN","BPSPRRX3",198,0)
 . . I $P(BPSPAID(1,BPSX),U,2)=RETV1 D
"RTN","BPSPRRX3",199,0)
 . . . S BPSPRA=$P(BPSPAID(1,BPSX),U),$P(BPSPAID(1,BPSX),U)=BPSPRA+RETV2,BPSQ=1
"RTN","BPSPRRX3",200,0)
 . . . W !,"  $",$FN(RETV2,",",2)," has been added to amount $",$FN(BPSPRA,",",2)," for Qualifier ",RETV1
"RTN","BPSPRRX3",201,0)
 S BPCNT=BPCNT+1
"RTN","BPSPRRX3",202,0)
 S BPSPAID(1,BPCNT)=RETV2_U_$$GETPDIEN^BPSPRRX6(RETV1)
"RTN","BPSPRRX3",203,0)
 S BPSPAID(2,RETV1)=""
"RTN","BPSPRRX3",204,0)
 I RETV1="08" Q 1
"RTN","BPSPRRX3",205,0)
 Q 0
"RTN","BPSPRRX3",206,0)
 ;
"RTN","BPSPRRX3",207,0)
DISPSEC(BPSPRARR) ;
"RTN","BPSPRRX3",208,0)
 ; Validate and Display the current secondary insurance information and prompt to edit.
"RTN","BPSPRRX3",209,0)
 ; Input:
"RTN","BPSPRRX3",210,0)
 ;   BPSPRARR - Array of COB data, passed by reference
"RTN","BPSPRRX3",211,0)
 ;
"RTN","BPSPRRX3",212,0)
 N BPSPIEN,BPSCOB,BPSCOV,BPX,BPSCOV,DATA
"RTN","BPSPRRX3",213,0)
 ;
"RTN","BPSPRRX3",214,0)
 ; Other Payer IEN defaults to 1 since we don't do tertiary
"RTN","BPSPRRX3",215,0)
 S BPSPIEN=1,BPSCOB="SECONDARY"
"RTN","BPSPRRX3",216,0)
 ;
"RTN","BPSPRRX3",217,0)
 ; Get Coverage Code
"RTN","BPSPRRX3",218,0)
 S BPSCOV=$G(BPSPRARR("308-C8"))
"RTN","BPSPRRX3",219,0)
 I BPSCOV="02" S BPSCOV="02 (OTHER COVERAGE EXISTS - PAYMENT COLLECTED)"
"RTN","BPSPRRX3",220,0)
 E  I BPSCOV="03" S BPSCOV="03 (OTHER COVERAGE EXISTS - THIS CLAIM NOT COVERED)"
"RTN","BPSPRRX3",221,0)
 E  S BPSCOV="04 (OTHER COVERAGE EXISTS - PAYMENT NOT COLLECTED)"
"RTN","BPSPRRX3",222,0)
 ;
"RTN","BPSPRRX3",223,0)
 ; Write Data
"RTN","BPSPRRX3",224,0)
 W !!,"Data for Secondary Claim"
"RTN","BPSPRRX3",225,0)
 W !,"------------------------"
"RTN","BPSPRRX3",226,0)
 W !,"Insurance:  "_$G(BPSPRARR("INS NAME"))_"    COB: "_BPSCOB
"RTN","BPSPRRX3",227,0)
 W !,"Rate Type:  "_$$GET1^DIQ(399.3,$G(BPSPRARR("RTYPE"))_",",.01,,,,)
"RTN","BPSPRRX3",228,0)
 W !,"Other Coverage Code:  "_BPSCOV
"RTN","BPSPRRX3",229,0)
 W !,"Other Payer Coverage Type:  01 (PRIMARY)"
"RTN","BPSPRRX3",230,0)
 W !,"Other Payer ID Qualifier:  03 (BANK INFORMATION NUMBER (BIN))"
"RTN","BPSPRRX3",231,0)
 W !,"Other Payer ID:  "_$P($G(BPSPRARR("OTHER PAYER",BPSPIEN,0)),U,4)
"RTN","BPSPRRX3",232,0)
 W !,"Other Payer Date:  "_$$FMTE^XLFDT($P($G(BPSPRARR("OTHER PAYER",BPSPIEN,0)),U,5))
"RTN","BPSPRRX3",233,0)
 ;
"RTN","BPSPRRX3",234,0)
 ; Write Paid Amounts if previous claim if they are there
"RTN","BPSPRRX3",235,0)
 I $D(BPSPRARR("OTHER PAYER",BPSPIEN,"P")) D
"RTN","BPSPRRX3",236,0)
 . S BPX=0 F  S BPX=$O(BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX)) Q:BPX=""  D
"RTN","BPSPRRX3",237,0)
 . . S DATA=BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX,0)
"RTN","BPSPRRX3",238,0)
 . . W !,"Other Payer Paid Qualifier:  "_$$GET1^DIQ(9002313.2,$P(DATA,U,2),.01)_" ("_$$GET1^DIQ(9002313.2,$P(DATA,U,2),.02)_")"
"RTN","BPSPRRX3",239,0)
 . . W !,"Other Payer Amount Paid:  $"_$FN($P(DATA,U,1),",",2)
"RTN","BPSPRRX3",240,0)
 . . I $P(DATA,U,3)'="" D
"RTN","BPSPRRX3",241,0)
 . . . W !,"Other Payer Patient Resp Amount Qualifier:  06 (AMT REPORTED BY PRIOR PAYER)"
"RTN","BPSPRRX3",242,0)
 . . . W !,"Other Payer Patient Resp Amount:  $"_$FN($P(DATA,U,3),",",2)
"RTN","BPSPRRX3",243,0)
 ;
"RTN","BPSPRRX3",244,0)
 ; Write Reject Codes if previous claims if they are there
"RTN","BPSPRRX3",245,0)
 I $D(BPSPRARR("OTHER PAYER",BPSPIEN,"R")) D
"RTN","BPSPRRX3",246,0)
 . S BPX=0 F  S BPX=$O(BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX)) Q:BPX=""  D
"RTN","BPSPRRX3",247,0)
 . . W !,"Other Payer Reject Code:  "_$$TRANREJ^BPSECFM($G(BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX,0)))
"RTN","BPSPRRX3",248,0)
 Q
"RTN","BPSPRRX3",249,0)
 ;
"RTN","BPSPRRX3",250,0)
PROMPT(ZERONODE,PRMTMSG,DFLTVAL,BPSHLP) ;
"RTN","BPSPRRX3",251,0)
 ;prompts for selection
"RTN","BPSPRRX3",252,0)
 ;returns selection
"RTN","BPSPRRX3",253,0)
 ;OR -1 when timeout and uparrow
"RTN","BPSPRRX3",254,0)
 ;
"RTN","BPSPRRX3",255,0)
 N Y,DUOUT,DTOUT,BPQUIT,DIROUT
"RTN","BPSPRRX3",256,0)
 N DIR
"RTN","BPSPRRX3",257,0)
 S DIR(0)=ZERONODE
"RTN","BPSPRRX3",258,0)
 S DIR("A")=PRMTMSG
"RTN","BPSPRRX3",259,0)
 I BPSHLP]"" S DIR("?")=BPSHLP
"RTN","BPSPRRX3",260,0)
 S:$L($G(DFLTVAL))>0 DIR("B")=DFLTVAL
"RTN","BPSPRRX3",261,0)
 D ^DIR
"RTN","BPSPRRX3",262,0)
 I (Y=-1)!$D(DIROUT)!$D(DUOUT)!$D(DTOUT) Q -1
"RTN","BPSPRRX3",263,0)
 Q Y
"RTN","BPSPRRX3",264,0)
 ;
"RTN","BPSPRRX3",265,0)
GETCDLST(VERSION) ; Returns a list of codes by field/version for use in PROMPTS
"RTN","BPSPRRX3",266,0)
 N CSUB,VSUB,ARRAY,X,BPSSET,BPSCD,BPSV,BPSOK
"RTN","BPSPRRX3",267,0)
 S VERSION=$G(VERSION)
"RTN","BPSPRRX3",268,0)
 S VERSION=$S(VERSION=5.1:51,VERSION=51:51,VERSION="D.0":"D0",VERSION="D0":"D0",1:"D0")
"RTN","BPSPRRX3",269,0)
 S BPSSET=""
"RTN","BPSPRRX3",270,0)
 S BPSCD=0 F  S BPSCD=$O(^BPS(9002313.2,BPSCD)) Q:BPSCD=""  D
"RTN","BPSPRRX3",271,0)
 . S (BPSOK,BPSV)=0 F  S BPSV=$O(^BPS(9002313.2,BPSCD,1,BPSV)) Q:BPSV=""  D  Q:BPSOK
"RTN","BPSPRRX3",272,0)
 . . I $P($G(^BPS(9002313.2,BPSCD,1,BPSV,0)),U)=VERSION S BPSOK=1
"RTN","BPSPRRX3",273,0)
 . I BPSOK S ARRAY(BPSCD)=$P(^BPS(9002313.2,BPSCD,0),U,1)_U_$P(^BPS(9002313.2,BPSCD,0),U,2)
"RTN","BPSPRRX3",274,0)
 S X=0 F  S X=$O(ARRAY(X)) Q:X=""  D
"RTN","BPSPRRX3",275,0)
 . S BPSSET=BPSSET_$P(ARRAY(X),U)_":"_$P(ARRAY(X),U,2)_";"
"RTN","BPSPRRX3",276,0)
 Q BPSSET
"RTN","BPSPRRX3",277,0)
 ;
"RTN","BPSPRRX3",278,0)
PAYSHTV(BPSPLAN) ;Get the Billing Payer Sheet version for this plan
"RTN","BPSPRRX3",279,0)
 ; BPSPLAN = IEN to GROUP INSURANCE PLAN file #355.3
"RTN","BPSPRRX3",280,0)
 N BPSPSH,BPSBPSH
"RTN","BPSPRRX3",281,0)
 ; Get Payer Sheets
"RTN","BPSPRRX3",282,0)
 S BPSPSH=$$PLANEPS^IBNCPDPU(BPSPLAN)
"RTN","BPSPRRX3",283,0)
 ; Get Billing Payer Sheet
"RTN","BPSPRRX3",284,0)
 I +BPSPSH S BPSBPSH=$P($P(BPSPSH,"^",2),",")
"RTN","BPSPRRX3",285,0)
 I $G(BPSBPSH)']"" Q ""
"RTN","BPSPRRX3",286,0)
 Q $P(^BPSF(9002313.92,BPSBPSH,1),U,2)
"RTN","BPSPRRX3",287,0)
 ;
"RTN","BPSPRRX3",288,0)
 ;because the set of codes is too long to fit the MUMPS code line - use a special code to populte set of codes
"RTN","BPSPRRX3",289,0)
SET308(BPSSET) ;
"RTN","BPSPRRX3",290,0)
 N BPX,BPZ
"RTN","BPSPRRX3",291,0)
 F BPX=2:1 S BPZ=$P($T(SET308C8+BPX),";;",2) Q:BPZ=""  D
"RTN","BPSPRRX3",292,0)
 . S BPSSET=BPSSET_$P(BPZ,U)_";"
"RTN","BPSPRRX3",293,0)
 Q
"RTN","BPSPRRX3",294,0)
 ;
"RTN","BPSPRRX3",295,0)
SET308C8 ;set of codes for 308-C8
"RTN","BPSPRRX3",296,0)
 ; set of codes
"RTN","BPSPRRX3",297,0)
 ;;00:NOT SPECIFIED BY PATIENT
"RTN","BPSPRRX3",298,0)
 ;;01:NO OTHER COVERAGE IDENTIFIED
"RTN","BPSPRRX3",299,0)
 ;;02:OTHER COVERAGE EXISTS - PAYMENT COLLECTED
"RTN","BPSPRRX3",300,0)
 ;;03:OTHER COVERAGE BILLED - CLAIM NOT COVERED
"RTN","BPSPRRX3",301,0)
 ;;04:OTHER COVERAGE EXISTS - PAYMENT NOT COLLECTED
"RTN","BPSPRRX3",302,0)
 ;;08:CLAIM IS BILLING FOR PATIENT FINANCIAL RESPONSIBILITY ONLY
"RTN","BPSPRRX3",303,0)
 ;;
"RTN","BPSPRRX3",304,0)
 ;
"RTN","BPSPRRX3",305,0)
 ;BPSPRRX3
"RTN","BPSPRRX6")
0^21^B122123507
"RTN","BPSPRRX6",1,0)
BPSPRRX6 ;ALB/SS - ePharmacy secondary billing ;12-DEC-08
"RTN","BPSPRRX6",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8,10,11,19,23**;JUN 2004;Build 44
"RTN","BPSPRRX6",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSPRRX6",4,0)
 ;
"RTN","BPSPRRX6",5,0)
 ;
"RTN","BPSPRRX6",6,0)
RXINFO(BPSRX) ;
"RTN","BPSPRRX6",7,0)
 ;Check if if prescription with given number exists
"RTN","BPSPRRX6",8,0)
 ;Input:
"RTN","BPSPRRX6",9,0)
 ;  BPSRX - RX#
"RTN","BPSPRRX6",10,0)
 ;Return:
"RTN","BPSPRRX6",11,0)
 ;  1st piece - ien of #52
"RTN","BPSPRRX6",12,0)
 ;  2nd piece - ien of #2
"RTN","BPSPRRX6",13,0)
 ;  -1 if "^" was entered
"RTN","BPSPRRX6",14,0)
 ;
"RTN","BPSPRRX6",15,0)
 N BPSDFN,BPS52,BPSRET
"RTN","BPSPRRX6",16,0)
 ;prompt for the patient
"RTN","BPSPRRX6",17,0)
 S BPSDFN=$$PROMPT^BPSSCRCV("P^DPT(","SELECT PATIENT")
"RTN","BPSPRRX6",18,0)
 I BPSDFN=-1 Q -1
"RTN","BPSPRRX6",19,0)
 K ^TMP($J,"BPSPRRX")
"RTN","BPSPRRX6",20,0)
 D RX^PSO52API(BPSDFN,"BPSPRRX",,BPSRX,"0")
"RTN","BPSPRRX6",21,0)
 I +$G(^TMP($J,"BPSPRRX",BPSDFN,0))=-1 D  Q 0
"RTN","BPSPRRX6",22,0)
 . W !,"Incorrect RX# or patient name entered.",!
"RTN","BPSPRRX6",23,0)
 S BPSRET=+$O(^TMP($J,"BPSPRRX",BPSDFN,0))_U_BPSDFN
"RTN","BPSPRRX6",24,0)
 K ^TMP($J,"BPSPRRX")
"RTN","BPSPRRX6",25,0)
 Q BPSRET
"RTN","BPSPRRX6",26,0)
 ;
"RTN","BPSPRRX6",27,0)
RXREFIL(BPS52,BPSDFN,BPSRXNO) ;
"RTN","BPSPRRX6",28,0)
 ; Prompt for the fill# and do the rest
"RTN","BPSPRRX6",29,0)
 ;
"RTN","BPSPRRX6",30,0)
 N BPSRF,BPSARR,BPSVAL,BPSELCTD,BPSRETV,BPORRFDT
"RTN","BPSPRRX6",31,0)
 K ^TMP($J,"BPSPRRX")
"RTN","BPSPRRX6",32,0)
 D RX^PSO52API(BPSDFN,"BPSPRRX",BPS52,,"R")
"RTN","BPSPRRX6",33,0)
 I +$G(^TMP($J,"BPSPRRX",BPSDFN,BPS52,"RF",0))=0 Q 0
"RTN","BPSPRRX6",34,0)
 S BPSRF=0
"RTN","BPSPRRX6",35,0)
 F  S BPSRF=$O(^TMP($J,"BPSPRRX",BPSDFN,BPS52,"RF",BPSRF)) Q:+BPSRF=0  D
"RTN","BPSPRRX6",36,0)
 . S BPSVAL=$G(^TMP($J,"BPSPRRX",BPSDFN,BPS52,"RF",BPSRF,.01))
"RTN","BPSPRRX6",37,0)
 . S BPSARR(BPSRF)=BPSRF_U_$P(BPSVAL,U)
"RTN","BPSPRRX6",38,0)
 ;original fill date
"RTN","BPSPRRX6",39,0)
 S BPORRFDT=$$RXFLDT^PSOBPSUT(BPS52,0)
"RTN","BPSPRRX6",40,0)
 S BPSARR(0)=0_U_BPORRFDT
"RTN","BPSPRRX6",41,0)
 F  S BPSELCTD=$$SELREFIL^BPSPRRX5(.BPSARR,"SELECT A FILL TO BILL","RX #"_BPSRXNO_" has the following fills:") Q:$P(BPSELCTD,U)'=""
"RTN","BPSPRRX6",42,0)
 I BPSELCTD<0 Q -1
"RTN","BPSPRRX6",43,0)
 Q BPSELCTD
"RTN","BPSPRRX6",44,0)
 ;
"RTN","BPSPRRX6",45,0)
SECBIL59(MOREDATA,IEN59) ;
"RTN","BPSPRRX6",46,0)
 ; Populate secondary billing fields in BPS TRANSACTION
"RTN","BPSPRRX6",47,0)
 ; MOREDATA array filed into 9002313.59
"RTN","BPSPRRX6",48,0)
 N BPTYPE,BPSTIME,BPCOB
"RTN","BPSPRRX6",49,0)
 N AMTIEN,BPIEN1,BPIEN2,BPZ5914,BPZ,BPZ1,BPZ2,OPAMT,OPAPQ,OPAYD,OPPRA,OPREJ,PIEN,REJIEN,BPQ
"RTN","BPSPRRX6",50,0)
 I +$G(IEN59)=0 Q
"RTN","BPSPRRX6",51,0)
 ;
"RTN","BPSPRRX6",52,0)
 I $L($G(MOREDATA("337-4C"))) I $$FILLFLDS^BPSUTIL2(9002313.59,1204,IEN59,MOREDATA("337-4C"))<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#1204) of (#9002313.59)")   ; cob other payments count
"RTN","BPSPRRX6",53,0)
 I $L($G(MOREDATA("308-C8"))) I $$FILLFLDS^BPSUTIL2(9002313.59,1205,IEN59,MOREDATA("308-C8"))<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#1205) of (#9002313.59)")   ; other coverage code
"RTN","BPSPRRX6",54,0)
 ;
"RTN","BPSPRRX6",55,0)
 ; store secondary billing related data entered by the user - esg 6/14/10
"RTN","BPSPRRX6",56,0)
 S BPQ=0
"RTN","BPSPRRX6",57,0)
 S PIEN=0 F  S PIEN=$O(MOREDATA("OTHER PAYER",PIEN)) Q:'PIEN!BPQ  D
"RTN","BPSPRRX6",58,0)
 . S OPAYD=$G(MOREDATA("OTHER PAYER",PIEN,0)) Q:OPAYD=""
"RTN","BPSPRRX6",59,0)
 . ;
"RTN","BPSPRRX6",60,0)
 . ; count up the number of multiples we have in each set
"RTN","BPSPRRX6",61,0)
 . S BPZ=0 F BPZ1=0:1 S BPZ=$O(MOREDATA("OTHER PAYER",PIEN,"P",BPZ)) Q:'BPZ
"RTN","BPSPRRX6",62,0)
 . S BPZ=0 F BPZ2=0:1 S BPZ=$O(MOREDATA("OTHER PAYER",PIEN,"R",BPZ)) Q:'BPZ
"RTN","BPSPRRX6",63,0)
 . I BPZ1,BPZ2 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot have both payments and rejects for the same OTHER PAYER.") Q
"RTN","BPSPRRX6",64,0)
 . ;
"RTN","BPSPRRX6",65,0)
 . ; add a new entry to subfile 9002313.5914
"RTN","BPSPRRX6",66,0)
 . S BPZ5914=$$INSITEM^BPSUTIL2(9002313.5914,IEN59,PIEN,PIEN,"",,0)
"RTN","BPSPRRX6",67,0)
 . I BPZ5914<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Can't create entry in COB OTHER PAYERS multiple of the BPS TRANSACTION file") Q
"RTN","BPSPRRX6",68,0)
 . ;
"RTN","BPSPRRX6",69,0)
 . ; set the rest of the pieces at this level
"RTN","BPSPRRX6",70,0)
 . I $P(OPAYD,U,2)'="" I $$FILLFLDS^BPSUTIL2(9002313.5914,.02,PIEN_","_IEN59,$P(OPAYD,U,2))<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.02) of (#9002313.5914)") Q
"RTN","BPSPRRX6",71,0)
 . I $P(OPAYD,U,3)'="" I $$FILLFLDS^BPSUTIL2(9002313.5914,.03,PIEN_","_IEN59,$P(OPAYD,U,3))<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.03) of (#9002313.5914)") Q
"RTN","BPSPRRX6",72,0)
 . I $P(OPAYD,U,4)'="" I $$FILLFLDS^BPSUTIL2(9002313.5914,.04,PIEN_","_IEN59,$P(OPAYD,U,4))<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.04) of (#9002313.5914)") Q
"RTN","BPSPRRX6",73,0)
 . I $P(OPAYD,U,5)'="" I $$FILLFLDS^BPSUTIL2(9002313.5914,.05,PIEN_","_IEN59,$P(OPAYD,U,5))<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.05) of (#9002313.5914)") Q
"RTN","BPSPRRX6",74,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.5914,.06,PIEN_","_IEN59,BPZ1)<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.06) of (#9002313.5914)") Q
"RTN","BPSPRRX6",75,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.5914,.07,PIEN_","_IEN59,BPZ2)<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.07) of (#9002313.5914)") Q
"RTN","BPSPRRX6",76,0)
 . ;
"RTN","BPSPRRX6",77,0)
 . ; now loop thru the other payer payment array
"RTN","BPSPRRX6",78,0)
 . S AMTIEN=0 F  S AMTIEN=$O(MOREDATA("OTHER PAYER",PIEN,"P",AMTIEN)) Q:'AMTIEN!BPQ  D
"RTN","BPSPRRX6",79,0)
 .. S OPAMT=$G(MOREDATA("OTHER PAYER",PIEN,"P",AMTIEN,0))
"RTN","BPSPRRX6",80,0)
 .. S OPAPQ=$P(OPAMT,U,2)   ; 342-HC other payer amt paid qualifier (ncpdp 5.1 blank is OK)
"RTN","BPSPRRX6",81,0)
 .. S OPPRA=$P(OPAMT,U,3)   ; 352-NQ, Other Payer-Patient Responsibility Amount
"RTN","BPSPRRX6",82,0)
 .. S OPAMT=+OPAMT          ; 431-DV other payer amt paid
"RTN","BPSPRRX6",83,0)
 .. ;
"RTN","BPSPRRX6",84,0)
 .. ; add a new entry to subfile 9002313.59141
"RTN","BPSPRRX6",85,0)
 .. S BPIEN1=$$INSITEM^BPSUTIL2(9002313.59141,PIEN_","_IEN59,OPAMT,AMTIEN,"",,0)
"RTN","BPSPRRX6",86,0)
 .. I BPIEN1<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Can't create entry in 9002313.59141 subfile") Q
"RTN","BPSPRRX6",87,0)
 .. ;
"RTN","BPSPRRX6",88,0)
 .. ; set piece 2
"RTN","BPSPRRX6",89,0)
 .. I OPAPQ'="" I $$FILLFLDS^BPSUTIL2(9002313.59141,.02,AMTIEN_","_PIEN_","_IEN59,OPAPQ)<1 D
"RTN","BPSPRRX6",90,0)
 ... S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.02) of (#9002313.59141)")
"RTN","BPSPRRX6",91,0)
 ... Q
"RTN","BPSPRRX6",92,0)
 .. ;
"RTN","BPSPRRX6",93,0)
 .. ; set piece 3
"RTN","BPSPRRX6",94,0)
 .. I OPPRA'="" I $$FILLFLDS^BPSUTIL2(9002313.59141,.03,AMTIEN_","_PIEN_","_IEN59,OPPRA)<1 D
"RTN","BPSPRRX6",95,0)
 ... S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.03) of (#9002313.59141)")
"RTN","BPSPRRX6",96,0)
 ... Q
"RTN","BPSPRRX6",97,0)
 .. ;
"RTN","BPSPRRX6",98,0)
 .. Q
"RTN","BPSPRRX6",99,0)
 . ;
"RTN","BPSPRRX6",100,0)
 . ; now loop thru the other payer reject array
"RTN","BPSPRRX6",101,0)
 . S REJIEN=0 F  S REJIEN=$O(MOREDATA("OTHER PAYER",PIEN,"R",REJIEN)) Q:'REJIEN!BPQ  D
"RTN","BPSPRRX6",102,0)
 .. S OPREJ=$G(MOREDATA("OTHER PAYER",PIEN,"R",REJIEN,0)) Q:OPREJ=""  Q:$P(OPREJ,U,1)=""
"RTN","BPSPRRX6",103,0)
 .. ;
"RTN","BPSPRRX6",104,0)
 .. ; add a new entry to subfile 9002313.59142
"RTN","BPSPRRX6",105,0)
 .. S BPIEN2=$$INSITEM^BPSUTIL2(9002313.59142,PIEN_","_IEN59,$P(OPREJ,U,1),REJIEN,"",,0)
"RTN","BPSPRRX6",106,0)
 .. I BPIEN2<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Can't create entry in 9002313.59142 subfile") Q
"RTN","BPSPRRX6",107,0)
 .. Q
"RTN","BPSPRRX6",108,0)
 . Q
"RTN","BPSPRRX6",109,0)
 Q
"RTN","BPSPRRX6",110,0)
 ;
"RTN","BPSPRRX6",111,0)
SECDATA(RX,FILL,BPSPLAN,BPSPRDAT,BPSRTYPE) ;
"RTN","BPSPRRX6",112,0)
 ;Populate array elements to resubmit SECONDARY claim.  This builds the COB data using
"RTN","BPSPRRX6",113,0)
 ;  the secondary claim that was previously submitted.
"RTN","BPSPRRX6",114,0)
 ;This will be called by the PRO option (BPSPRRX, BPSPRRX5) and Resubmit with Edits (BPSRES)
"RTN","BPSPRRX6",115,0)
 ;  if it cannot build the COB claim data from the primary claim, which will only happen
"RTN","BPSPRRX6",116,0)
 ;  if the primary claim is missing (primary claim was paper).
"RTN","BPSPRRX6",117,0)
 ;This is also called by BPSNCPDP when the secondary data is missing.  I believe that this
"RTN","BPSPRRX6",118,0)
 ;  will only happen for a Resubmit (RES) from the ECME User Screen.  For this process, we
"RTN","BPSPRRX6",119,0)
 ;  also need to compile the PRIMARY BILL, insurance plan, and rate type.
"RTN","BPSPRRX6",120,0)
 ;
"RTN","BPSPRRX6",121,0)
 ;Input:
"RTN","BPSPRRX6",122,0)
 ;  RX - Prescription (#52) IEN
"RTN","BPSPRRX6",123,0)
 ;  FILL - Fill Number
"RTN","BPSPRRX6",124,0)
 ;  BPSPLAN - Plan (#355.3) IEN, by reference
"RTN","BPSPRRX6",125,0)
 ;  BPSPRDAT - Array with secondary data, by reference
"RTN","BPSPRRX6",126,0)
 ;  BPSRTYPE - Rate Type (#399.3) IEN, by reference
"RTN","BPSPRRX6",127,0)
 ;Output:
"RTN","BPSPRRX6",128,0)
 ;  1 - Success
"RTN","BPSPRRX6",129,0)
 ;  0 - Cannot populate array
"RTN","BPSPRRX6",130,0)
 ;
"RTN","BPSPRRX6",131,0)
 N IEN59SEC,BPBILL
"RTN","BPSPRRX6",132,0)
 I '$G(RX) Q 0
"RTN","BPSPRRX6",133,0)
 I $G(FILL)="" Q 0
"RTN","BPSPRRX6",134,0)
 ;
"RTN","BPSPRRX6",135,0)
 ; Get Transaction IENs for the secondary transaction
"RTN","BPSPRRX6",136,0)
 S IEN59SEC=$$IEN59^BPSOSRX(RX,FILL,2)
"RTN","BPSPRRX6",137,0)
 ;
"RTN","BPSPRRX6",138,0)
 ; Get Primary Bill for the secondary claim
"RTN","BPSPRRX6",139,0)
 S BPBILL=$$PAYBLPRI^BPSUTIL2(IEN59SEC)
"RTN","BPSPRRX6",140,0)
 I BPBILL>0 S BPSPRDAT("PRIMARY BILL")=BPBILL
"RTN","BPSPRRX6",141,0)
 ;
"RTN","BPSPRRX6",142,0)
 ; Get Plan, Rate Type, and Prior Payment from the secondary transaction
"RTN","BPSPRRX6",143,0)
 S BPSPLAN=+$P($G(^BPST(IEN59SEC,10,1,0)),U,1)
"RTN","BPSPRRX6",144,0)
 S BPSRTYPE=+$P($G(^BPST(IEN59SEC,10,1,0)),U,8)
"RTN","BPSPRRX6",145,0)
 S BPSPRDAT("PRIOR PAYMENT")=$P($G(^BPST(IEN59SEC,10,1,2)),U,9)
"RTN","BPSPRRX6",146,0)
 ;
"RTN","BPSPRRX6",147,0)
 ; Build array of COB secondary claim data from the BPS Transaction file - esg - 6/14/10
"RTN","BPSPRRX6",148,0)
 S BPSPRDAT("337-4C")=$P($G(^BPST(IEN59SEC,12)),U,4)  ;1204 cob other payments count
"RTN","BPSPRRX6",149,0)
 S BPSPRDAT("308-C8")=$P($G(^BPST(IEN59SEC,12)),U,5)  ;1205 other coverage code
"RTN","BPSPRRX6",150,0)
 ;
"RTN","BPSPRRX6",151,0)
 ; Build COB data array - esg - 6/14/10
"RTN","BPSPRRX6",152,0)
 N COBPIEN,APDIEN,REJIEN
"RTN","BPSPRRX6",153,0)
 K BPSPRDAT("OTHER PAYER")
"RTN","BPSPRRX6",154,0)
 S COBPIEN=0 F  S COBPIEN=$O(^BPST(IEN59SEC,14,COBPIEN)) Q:'COBPIEN  D
"RTN","BPSPRRX6",155,0)
 . S BPSPRDAT("OTHER PAYER",COBPIEN,0)=$G(^BPST(IEN59SEC,14,COBPIEN,0))
"RTN","BPSPRRX6",156,0)
 . ;
"RTN","BPSPRRX6",157,0)
 . ; Retrieve data from other payer amount paid multiple
"RTN","BPSPRRX6",158,0)
 . S APDIEN=0 F  S APDIEN=$O(^BPST(IEN59SEC,14,COBPIEN,1,APDIEN)) Q:'APDIEN  D
"RTN","BPSPRRX6",159,0)
 .. S BPSPRDAT("OTHER PAYER",COBPIEN,"P",APDIEN,0)=$G(^BPST(IEN59SEC,14,COBPIEN,1,APDIEN,0))
"RTN","BPSPRRX6",160,0)
 .. Q
"RTN","BPSPRRX6",161,0)
 . ;
"RTN","BPSPRRX6",162,0)
 . ; Retrieve data from other payer reject multiple
"RTN","BPSPRRX6",163,0)
 . S REJIEN=0 F  S REJIEN=$O(^BPST(IEN59SEC,14,COBPIEN,2,REJIEN)) Q:'REJIEN  D
"RTN","BPSPRRX6",164,0)
 .. S BPSPRDAT("OTHER PAYER",COBPIEN,"R",REJIEN,0)=$G(^BPST(IEN59SEC,14,COBPIEN,2,REJIEN,0))
"RTN","BPSPRRX6",165,0)
 .. Q
"RTN","BPSPRRX6",166,0)
 . Q
"RTN","BPSPRRX6",167,0)
 Q 1
"RTN","BPSPRRX6",168,0)
 ;
"RTN","BPSPRRX6",169,0)
PRIMDATA(RX,FILL,COBARRAY) ;
"RTN","BPSPRRX6",170,0)
 ; Build COB data from primary claim and response
"RTN","BPSPRRX6",171,0)
 ; This is called by PRO option (BPSPRRX, BPSPRRX5) and Resubmit with Edits (BPSRES)
"RTN","BPSPRRX6",172,0)
 ; 
"RTN","BPSPRRX6",173,0)
 ; Input:
"RTN","BPSPRRX6",174,0)
 ;   RX - Prescription IEN
"RTN","BPSPRRX6",175,0)
 ;   FILL - Fill Number
"RTN","BPSPRRX6",176,0)
 ;   COBARRAY - Array that will be build, passed by reference
"RTN","BPSPRRX6",177,0)
 ; Return:
"RTN","BPSPRRX6",178,0)
 ;   0 = Invalid data (transactions, claim, or response is missing)
"RTN","BPSPRRX6",179,0)
 ;   1 = Valid data
"RTN","BPSPRRX6",180,0)
 ;
"RTN","BPSPRRX6",181,0)
 I '$G(RX) Q 0
"RTN","BPSPRRX6",182,0)
 I $G(FILL)="" Q 0
"RTN","BPSPRRX6",183,0)
 N IEN59PR,BPSIEN,BPSCLM,BPSRESP,BPSSTAT,BIN,BPSOPDT,BPX,BPSPIEN,CNT
"RTN","BPSPRRX6",184,0)
 ;
"RTN","BPSPRRX6",185,0)
 ; Get primary transaction and check that is exists
"RTN","BPSPRRX6",186,0)
 S IEN59PR=$$IEN59^BPSOSRX(RX,FILL,1)
"RTN","BPSPRRX6",187,0)
 I '$D(^BPST(IEN59PR)) Q 0
"RTN","BPSPRRX6",188,0)
 ;
"RTN","BPSPRRX6",189,0)
 ; Get Claim and Response and make sure they both exist
"RTN","BPSPRRX6",190,0)
 S BPSCLM=+$P($G(^BPST(IEN59PR,0)),U,4)
"RTN","BPSPRRX6",191,0)
 I BPSCLM=0 Q 0
"RTN","BPSPRRX6",192,0)
 I '$D(^BPSC(BPSCLM)) Q 0
"RTN","BPSPRRX6",193,0)
 S BPSRESP=+$P($G(^BPST(IEN59PR,0)),U,5)
"RTN","BPSPRRX6",194,0)
 I BPSRESP=0 Q 0
"RTN","BPSPRRX6",195,0)
 I '$D(^BPSR(BPSRESP)) Q 0
"RTN","BPSPRRX6",196,0)
 ;
"RTN","BPSPRRX6",197,0)
 ; Get status of primary transaction
"RTN","BPSPRRX6",198,0)
 S BPSSTAT=$P($$STATUS^BPSOSRX(RX,FILL,,,1),U)
"RTN","BPSPRRX6",199,0)
 ;
"RTN","BPSPRRX6",200,0)
 ; If the primary claim is payable, get the PRIOR PAYMENT from the primary Response record
"RTN","BPSPRRX6",201,0)
 S COBARRAY("PRIOR PAYMENT")=""
"RTN","BPSPRRX6",202,0)
 I $$PAYABLE^BPSOSRX5(BPSSTAT),BPSRESP S COBARRAY("PRIOR PAYMENT")=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,9))
"RTN","BPSPRRX6",203,0)
 ;
"RTN","BPSPRRX6",204,0)
 ; Get Coverage Code
"RTN","BPSPRRX6",205,0)
 I $G(COBARRAY("PRIOR PAYMENT"))>0 S COBARRAY("308-C8")="02"
"RTN","BPSPRRX6",206,0)
 E  I BPSSTAT["E REJECTED" S COBARRAY("308-C8")="03"
"RTN","BPSPRRX6",207,0)
 E  S COBARRAY("308-C8")="04"
"RTN","BPSPRRX6",208,0)
 ;
"RTN","BPSPRRX6",209,0)
 ; Get BIN from the primary claim record
"RTN","BPSPRRX6",210,0)
 S BIN=""
"RTN","BPSPRRX6",211,0)
 I BPSCLM S BIN=$P($G(^BPSC(BPSCLM,100)),U)
"RTN","BPSPRRX6",212,0)
 ;
"RTN","BPSPRRX6",213,0)
 ; Get the Other Payer Date in internal format from the primary Response record
"RTN","BPSPRRX6",214,0)
 S BPSOPDT=""
"RTN","BPSPRRX6",215,0)
 I BPSRESP S BPSOPDT=($P($G(^BPSR(BPSRESP,0)),U,2))\1
"RTN","BPSPRRX6",216,0)
 ;
"RTN","BPSPRRX6",217,0)
 ; Default the Other Payer IEN 1 since we only do secondary
"RTN","BPSPRRX6",218,0)
 S BPSPIEN=1
"RTN","BPSPRRX6",219,0)
 S COBARRAY("337-4C")=BPSPIEN ; Other Payer Count
"RTN","BPSPRRX6",220,0)
 ;
"RTN","BPSPRRX6",221,0)
 ; Set array of Other Payer Data
"RTN","BPSPRRX6",222,0)
 K COBARRAY("OTHER PAYER")
"RTN","BPSPRRX6",223,0)
 S COBARRAY("OTHER PAYER",BPSPIEN,0)="1^01^03^"_BIN_"^"_BPSOPDT_"^0^0"
"RTN","BPSPRRX6",224,0)
 ;
"RTN","BPSPRRX6",225,0)
 ; Build Paid Amounts if previous claim was paid
"RTN","BPSPRRX6",226,0)
 I BPSSTAT["E PAYABLE",$G(COBARRAY("PRIOR PAYMENT"))]"" D
"RTN","BPSPRRX6",227,0)
 . N BPARR,BPX D GETOPAP(BPSRESP,.BPARR)
"RTN","BPSPRRX6",228,0)
 . S BPX=0 F CNT=0:1  S BPX=$O(BPARR(BPX)) Q:BPX=""  S COBARRAY("OTHER PAYER",BPSPIEN,"P",BPX,0)=BPARR(BPX)
"RTN","BPSPRRX6",229,0)
 . S $P(COBARRAY("OTHER PAYER",BPSPIEN,0),U,6)=CNT
"RTN","BPSPRRX6",230,0)
 ;
"RTN","BPSPRRX6",231,0)
 ; Build Reject Codes if previous claims was rejected
"RTN","BPSPRRX6",232,0)
 I BPSSTAT["E REJECTED" D
"RTN","BPSPRRX6",233,0)
 . N BPARR,BPX D GETRJCOD(BPSRESP,.BPARR)
"RTN","BPSPRRX6",234,0)
 . S BPX=0 F CNT=0:1  S BPX=$O(BPARR(BPX)) Q:BPX=""  S COBARRAY("OTHER PAYER",BPSPIEN,"R",BPX,0)=BPARR(BPX)
"RTN","BPSPRRX6",235,0)
 . S $P(COBARRAY("OTHER PAYER",BPSPIEN,0),U,7)=CNT
"RTN","BPSPRRX6",236,0)
 Q 1
"RTN","BPSPRRX6",237,0)
 ;
"RTN","BPSPRRX6",238,0)
GETOPAP(BPSRESP,BPSDAT) ;
"RTN","BPSPRRX6",239,0)
 ; Get the Other Payer Amount Paid values and qualifiers
"RTN","BPSPRRX6",240,0)
 ; Input:
"RTN","BPSPRRX6",241,0)
 ;   BPSRESP = IEN of BPS RESPONSE file
"RTN","BPSPRRX6",242,0)
 ;   BPSDAT(N) = Array of Other Payer fields (passed by reference)
"RTN","BPSPRRX6",243,0)
 ;       [1] Patient Pay Amount
"RTN","BPSPRRX6",244,0)
 ;       [2] Qualifier
"RTN","BPSPRRX6",245,0)
 ;       [3] Other Payer Patient Responsibility Amount
"RTN","BPSPRRX6",246,0)
 ;
"RTN","BPSPRRX6",247,0)
 I '$G(BPSRESP) Q
"RTN","BPSPRRX6",248,0)
 I '$D(^BPSR(BPSRESP,1000)) Q
"RTN","BPSPRRX6",249,0)
 N CNT,BPS505,BPS509,BPS559,BPS558,BPS523,BPS563,BPS562,BPS521,BPSQUAL,BPSAMNT,BPSTAX,BPSOAP,BPSX
"RTN","BPSPRRX6",250,0)
 S CNT=0
"RTN","BPSPRRX6",251,0)
 ; Set up D.0 fields for COB segment
"RTN","BPSPRRX6",252,0)
 S BPS509=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,9))
"RTN","BPSPRRX6",253,0)
 ; If Total Amount Paid is a negative number, set it to zero.
"RTN","BPSPRRX6",254,0)
 ; Zero Pay amount is allowed
"RTN","BPSPRRX6",255,0)
 I BPS509<0 S BPS509=0
"RTN","BPSPRRX6",256,0)
 ;
"RTN","BPSPRRX6",257,0)
 ; Cognitive Services Qualifier/Professional Service Fee Paid
"RTN","BPSPRRX6",258,0)
 S BPS562=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,560)),U,2))
"RTN","BPSPRRX6",259,0)
 I BPS562<0 S BPS562=0
"RTN","BPSPRRX6",260,0)
 I +BPS562 S CNT=CNT+1,BPSDAT(CNT)=BPS562_U_"06"
"RTN","BPSPRRX6",261,0)
 ;
"RTN","BPSPRRX6",262,0)
 ; Incentive Qualifier/Incentive Amt Paid
"RTN","BPSPRRX6",263,0)
 S BPS521=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,21))
"RTN","BPSPRRX6",264,0)
 I BPS521<0 S BPS521=0
"RTN","BPSPRRX6",265,0)
 I +BPS521 S CNT=CNT+1,BPSDAT(CNT)=BPS521_U_"05"
"RTN","BPSPRRX6",266,0)
 ; Subtract Incentive Qualifier from Paid Amount for Drug Benefit
"RTN","BPSPRRX6",267,0)
 S BPS509=BPS509-BPS521
"RTN","BPSPRRX6",268,0)
 ;
"RTN","BPSPRRX6",269,0)
 ; Default all Tax values to zero for negative values
"RTN","BPSPRRX6",270,0)
 S BPS559=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,550)),U,9)) ; Percentage Sales Tax Paid
"RTN","BPSPRRX6",271,0)
 I BPS559<0 S BPS559=0
"RTN","BPSPRRX6",272,0)
 S BPS558=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,550)),U,8)) ; Flat Sales Tax Paid
"RTN","BPSPRRX6",273,0)
 I BPS558<0 S BPS558=0
"RTN","BPSPRRX6",274,0)
 S BPS523=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,23)) ; Amount Attributed to Sales Tax
"RTN","BPSPRRX6",275,0)
 I BPS523<0 S BPS523=0
"RTN","BPSPRRX6",276,0)
 ;
"RTN","BPSPRRX6",277,0)
 ; Sales Tax Qualifier
"RTN","BPSPRRX6",278,0)
 S BPSTAX=BPS559+BPS558-BPS523
"RTN","BPSPRRX6",279,0)
 I BPSTAX<0 S BPSTAX=0
"RTN","BPSPRRX6",280,0)
 I +BPSTAX S CNT=CNT+1,BPSDAT(CNT)=BPSTAX_U_"10"
"RTN","BPSPRRX6",281,0)
 ; Subtract Sales Tax Qualifier from Paid Amount for Drug Benefit
"RTN","BPSPRRX6",282,0)
 S BPS509=BPS509-BPSTAX
"RTN","BPSPRRX6",283,0)
 ;
"RTN","BPSPRRX6",284,0)
 ; Set OTHER AMOUNT PAID multiples
"RTN","BPSPRRX6",285,0)
 S BPS563=0 F  S BPS563=$O(^BPSR(BPSRESP,1000,1,563.01,BPS563)) Q:BPS563=""  D
"RTN","BPSPRRX6",286,0)
 . S BPSQUAL=$P($G(^BPSR(BPSRESP,1000,1,563.01,BPS563,1)),U,1)
"RTN","BPSPRRX6",287,0)
 . ; Quit if qualifier = 99 since there is no NCPDP mapping for this qualifier
"RTN","BPSPRRX6",288,0)
 . Q:BPSQUAL']""!(BPSQUAL=99)
"RTN","BPSPRRX6",289,0)
 . S BPSAMNT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,563.01,BPS563,1)),U,2))
"RTN","BPSPRRX6",290,0)
 . ; Default negative amounts to zero
"RTN","BPSPRRX6",291,0)
 . I BPSAMNT<0 S BPSAMNT=0
"RTN","BPSPRRX6",292,0)
 . I $D(BPSOAP(BPSQUAL)) S BPSOAP(BPSQUAL)=BPSOAP(BPSQUAL)+BPSAMNT
"RTN","BPSPRRX6",293,0)
 . I '$D(BPSOAP(BPSQUAL)) S BPSOAP(BPSQUAL)=BPSAMNT
"RTN","BPSPRRX6",294,0)
 . ; Subtract Amount if Qualifier is 01, 02, 03, 04, 09 or 11
"RTN","BPSPRRX6",295,0)
 . I "010203040911"[BPSQUAL S BPS509=BPS509-BPSAMNT
"RTN","BPSPRRX6",296,0)
 I $D(BPSOAP) D
"RTN","BPSPRRX6",297,0)
 . S BPSX="" F  S BPSX=$O(BPSOAP(BPSX)) Q:BPSX=""  D
"RTN","BPSPRRX6",298,0)
 . . S CNT=CNT+1,BPSDAT(CNT)=BPSOAP(BPSX)_U_$$GETPDIEN(BPSX)
"RTN","BPSPRRX6",299,0)
 ; Set Drug Benefit Qualifier
"RTN","BPSPRRX6",300,0)
 I BPS509<0 S BPS509=0
"RTN","BPSPRRX6",301,0)
 ; Set Patient Pay Amount
"RTN","BPSPRRX6",302,0)
 S BPS505=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,5))
"RTN","BPSPRRX6",303,0)
 ;
"RTN","BPSPRRX6",304,0)
 S CNT=CNT+1,BPSDAT(CNT)=BPS509_U_$$GETPDIEN("07")_U_BPS505
"RTN","BPSPRRX6",305,0)
 Q
"RTN","BPSPRRX6",306,0)
 ;
"RTN","BPSPRRX6",307,0)
GETPDIEN(CODE) ;
"RTN","BPSPRRX6",308,0)
 ; Get the Other Payer Amount Paid Qualifier IEN for BPS NCPCP OTHER
"RTN","BPSPRRX6",309,0)
 ;   PAYER AMOUNT PAID QUAL file
"RTN","BPSPRRX6",310,0)
 I $G(CODE)="" Q ""
"RTN","BPSPRRX6",311,0)
 Q $O(^BPS(9002313.2,"B",CODE,""))
"RTN","BPSPRRX6",312,0)
 ;
"RTN","BPSPRRX6",313,0)
GETRJCOD(BPRESP,BPARR) ;
"RTN","BPSPRRX6",314,0)
 ; Get the first five reject codes w/o getting duplicates
"RTN","BPSPRRX6",315,0)
 ; Input:
"RTN","BPSPRRX6",316,0)
 ;   BPSRESP = IEN of BPS RESPONSE file
"RTN","BPSPRRX6",317,0)
 ;   BPSARR1 = Array of Reject Codes
"RTN","BPSPRRX6",318,0)
 ;
"RTN","BPSPRRX6",319,0)
 I '$G(BPRESP) Q
"RTN","BPSPRRX6",320,0)
 I '$D(^BPSR(BPRESP,1000)) Q
"RTN","BPSPRRX6",321,0)
 N BPRCNT,BPRJ,BPPOS,BPRJCOD
"RTN","BPSPRRX6",322,0)
 ;
"RTN","BPSPRRX6",323,0)
 ; Default BPPOS to the first transaction in the RESPONSE multiple
"RTN","BPSPRRX6",324,0)
 ; We only want the first five reject codes and no duplicates
"RTN","BPSPRRX6",325,0)
 S (BPRCNT,BPRJ)=0,BPPOS=1
"RTN","BPSPRRX6",326,0)
 F  S BPRJ=$O(^BPSR(BPRESP,1000,BPPOS,511,BPRJ)) Q:+BPRJ=0  D  Q:BPRCNT>4
"RTN","BPSPRRX6",327,0)
 . S BPRJCOD=$P($G(^BPSR(BPRESP,1000,BPPOS,511,BPRJ,0)),U)
"RTN","BPSPRRX6",328,0)
 . Q:$L(BPRJCOD)=0
"RTN","BPSPRRX6",329,0)
 . ; Only store if not a duplicate
"RTN","BPSPRRX6",330,0)
 . I '$D(BPARR(BPRJCOD)) S BPRCNT=BPRCNT+1,BPARR(BPRCNT)=BPRJCOD
"RTN","BPSPRRX6",331,0)
 Q
"RTN","BPSPRRX6",332,0)
 ;BPSPRRX6
"RTN","BPSRES")
0^13^B192481154
"RTN","BPSRES",1,0)
BPSRES ;BHAM ISC/BEE - ECME SCREEN RESUBMIT W/EDITS ;3/12/08  14:01
"RTN","BPSRES",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**3,5,7,8,10,11,20,21,23**;JUN 2004;Build 44
"RTN","BPSRES",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRES",4,0)
 ;
"RTN","BPSRES",5,0)
 ; Reference to $$RXRLDT^PSOBPSUT supported by DBIA 4701
"RTN","BPSRES",6,0)
 ; Reference to $$RXFLDT^PSOBPSUT supported by DBIA 4701
"RTN","BPSRES",7,0)
 ; Reference to $$FIND^PSOREJUT supported by DBIA 4706
"RTN","BPSRES",8,0)
 ; Reference to GET^PSOREJU2 supported by DBIA 6749
"RTN","BPSRES",9,0)
 ;
"RTN","BPSRES",10,0)
 ;ECME Resubmit w/EDITS Protocol (Hidden) - Called by [BPS USER SCREEN]
"RTN","BPSRES",11,0)
 ;
"RTN","BPSRES",12,0)
RESED N BPSEL
"RTN","BPSRES",13,0)
 ;
"RTN","BPSRES",14,0)
 I '$D(@(VALMAR)) G XRESED
"RTN","BPSRES",15,0)
 D FULL^VALM1
"RTN","BPSRES",16,0)
 ;
"RTN","BPSRES",17,0)
 ;Select the claim to resubmit
"RTN","BPSRES",18,0)
 W !,"Enter the line number for the claim to be resubmitted."
"RTN","BPSRES",19,0)
 S BPSEL=$$ASKLINE("Select item","Please select a SINGLE claim only when using the Resubmit w/EDITS action option.")
"RTN","BPSRES",20,0)
 I BPSEL<1 S VALMBCK="R" G XRESED
"RTN","BPSRES",21,0)
 ;
"RTN","BPSRES",22,0)
 ;Attempt to resubmit the claim, update the content of the screen, and display
"RTN","BPSRES",23,0)
 ;only if claim submitted successfully
"RTN","BPSRES",24,0)
 I $$DOSELCTD(BPSEL) D REDRAW^BPSSCRUD("Updating screen for resubmitted claim...")
"RTN","BPSRES",25,0)
 E  S VALMBCK="R"
"RTN","BPSRES",26,0)
 ;
"RTN","BPSRES",27,0)
XRESED Q
"RTN","BPSRES",28,0)
 ;
"RTN","BPSRES",29,0)
 ;Attempt to Edit and Resubmit Selected Claim
"RTN","BPSRES",30,0)
 ;
"RTN","BPSRES",31,0)
 ;   Input Value -> BPRXI - Entry with ptr to BPS TRANSACTION file
"RTN","BPSRES",32,0)
 ;
"RTN","BPSRES",33,0)
 ;  Return Value -> 0 - Claim was not resubmitted
"RTN","BPSRES",34,0)
 ;                  1 - Claim was resubmitted
"RTN","BPSRES",35,0)
 ;
"RTN","BPSRES",36,0)
DOSELCTD(BPRXI) ;
"RTN","BPSRES",37,0)
 N BP02,BP59,BPADDLTXT,BPBILL,BPCLTOT,BPDFN,BPDOSDT,BPOVRIEN,BPQ,BPRXIEN,BPRXR,BPSTATUS,BPUPDFLG
"RTN","BPSRES",38,0)
 N BPCOB,BPSURE,BPPTRES,BPPHSRV,BPDLYRS,COBDATA,BPPRIOPN,BPSPCLS,BPMSG
"RTN","BPSRES",39,0)
 S BPQ=""
"RTN","BPSRES",40,0)
 S BPADDLTXT=""
"RTN","BPSRES",41,0)
 S (BPCLTOT,BPUPDFLG)=0
"RTN","BPSRES",42,0)
 ;
"RTN","BPSRES",43,0)
 ;Pull BPS TRANSACTION/BPS CLAIMS entries
"RTN","BPSRES",44,0)
 S BP59=$P(BPRXI,U,4) I BP59="" W !!,"No Initial Claim Submission Found - Data Elements are NOT Editable for Re-Submission",! G XRES
"RTN","BPSRES",45,0)
 ;
"RTN","BPSRES",46,0)
 ; check for non-billable entry
"RTN","BPSRES",47,0)
 I $$NB^BPSSCR03(BP59) W !!,"Entry is NON BILLABLE.  There is no claim to edit or resubmit.",! G XRES
"RTN","BPSRES",48,0)
 ;
"RTN","BPSRES",49,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4) I 'BP02 W !!,"No Initial Claim Submission Found - Data Elements are NOT Editable for Re-Submission",! G XRES
"RTN","BPSRES",50,0)
 ;
"RTN","BPSRES",51,0)
 ;Write Form Feed
"RTN","BPSRES",52,0)
 W @IOF
"RTN","BPSRES",53,0)
 ;
"RTN","BPSRES",54,0)
 ;Display selected claim and ask to submit
"RTN","BPSRES",55,0)
 S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSRES",56,0)
 W !,"You've chosen to RESUBMIT the following prescription for "_$E($$PATNAME^BPSSCRU2(BPDFN),1,13)
"RTN","BPSRES",57,0)
 W !,@VALMAR@(+$P(BPRXI,U,5),0)
"RTN","BPSRES",58,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure(Y/N)")
"RTN","BPSRES",59,0)
 I BPQ'=1 S BPQ="^" G XRES
"RTN","BPSRES",60,0)
 ;
"RTN","BPSRES",61,0)
 ;Check to make sure claim can be Resubmitted w/EDITS
"RTN","BPSRES",62,0)
 S BPRXIEN=$P(BP59,".")
"RTN","BPSRES",63,0)
 S BPRXR=+$E($P(BP59,".",2),1,4)
"RTN","BPSRES",64,0)
 I $$RXDEL^BPSOS($P(BP59,".",1),+$E($P(BP59,".",2),1,4)) W !!,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"cannot be Resubmitted w/EDITS because it has been deleted in Pharmacy.",! G XRES
"RTN","BPSRES",65,0)
 S BPSTATUS=$P($$CLAIMST^BPSSCRU3(BP59),U)
"RTN","BPSRES",66,0)
 I BPSTATUS["IN PROGRESS" W !!,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"is still In Progress and cannot be Resubmitted w/EDITS",! G XRES
"RTN","BPSRES",67,0)
 I BPSTATUS'["E REJECTED" W !!,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"is NOT Rejected and cannot be Resubmitted w/EDITS",! G XRES
"RTN","BPSRES",68,0)
 I $P($G(^BPST(BP59,0)),U,14)<2,$$PAYABLE^BPSOSRX5(BPSTATUS),$$PAYBLSEC^BPSUTIL2(BP59) D  G XRES
"RTN","BPSRES",69,0)
 . W !,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"cannot be Resubmitted if the secondary claim is payable.",!,"Please reverse the secondary claim first."
"RTN","BPSRES",70,0)
 ;
"RTN","BPSRES",71,0)
 ;Can't resubmit a closed claim. The user must reopen first.
"RTN","BPSRES",72,0)
 I $$CLOSED^BPSSCRU1(BP59) W !!,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"is Closed and cannot be Resubmitted w/EDITS.",! G XRES
"RTN","BPSRES",73,0)
 ;
"RTN","BPSRES",74,0)
 S BPCOB=$$COB59^BPSUTIL2(BP59)
"RTN","BPSRES",75,0)
 ;If this is a secondary, make sure Primary is either Payable or Closed.
"RTN","BPSRES",76,0)
 S BPPRIOPN=0 I BPCOB=2 D  G XRES:BPPRIOPN=1
"RTN","BPSRES",77,0)
 . ;Get Primary claim status
"RTN","BPSRES",78,0)
 . S BPSPCLS=$$FINDECLM^BPSPRRX5(BPRXIEN,BPRXR,1)
"RTN","BPSRES",79,0)
 . I $P(BPSPCLS,U)>1 D
"RTN","BPSRES",80,0)
 .. Q:$$CLOSED^BPSSCRU1($P(BPSPCLS,U,2))
"RTN","BPSRES",81,0)
 .. W !,"The secondary claim cannot be Resubmitted unless the primary is either payable",!,"or closed. Please resubmit or close the primary claim first."
"RTN","BPSRES",82,0)
 .. S BPPRIOPN=1
"RTN","BPSRES",83,0)
 ;Retrieve DOS
"RTN","BPSRES",84,0)
 S BPDOSDT=$$DOSDATE^BPSSCRRS(BPRXIEN,BPRXR)
"RTN","BPSRES",85,0)
 ;
"RTN","BPSRES",86,0)
 ;Prompt for EDIT Information
"RTN","BPSRES",87,0)
 S BPOVRIEN=$$PROMPTS(BP59,BP02,BPRXIEN,BPRXR,BPCOB,.BPDOSDT,.COBDATA,.BPADDLTXT) I BPOVRIEN=-1 G XRES
"RTN","BPSRES",88,0)
 ;
"RTN","BPSRES",89,0)
 ; Submit the claim
"RTN","BPSRES",90,0)
 S BPBILL=$$EN^BPSNCPDP(BPRXIEN,BPRXR,BPDOSDT,"ERES","","ECME RESUBMIT","",BPOVRIEN,"","",BPCOB,"F","","",$G(COBDATA("PLAN")),.COBDATA,$G(COBDATA("RTYPE")))
"RTN","BPSRES",91,0)
 ;
"RTN","BPSRES",92,0)
 ;Print Return Value Message
"RTN","BPSRES",93,0)
 W !!
"RTN","BPSRES",94,0)
 W:+BPBILL>0 $S(+BPBILL=10:"Reversal but no Resubmit:",1:"Not Processed:"),!,"  "
"RTN","BPSRES",95,0)
 ;
"RTN","BPSRES",96,0)
 ;Change Return Message for SC/EI
"RTN","BPSRES",97,0)
 S:$P(BPBILL,U,2)="NEEDS SC DETERMINATION" $P(BPBILL,U,2)="NEEDS SC/EI DETERMINATION"
"RTN","BPSRES",98,0)
 W $P(BPBILL,U,2)
"RTN","BPSRES",99,0)
 ;
"RTN","BPSRES",100,0)
 ;0 Prescription/Fill successfully submitted to ECME
"RTN","BPSRES",101,0)
 ;1 ECME did not submit prescription/fill
"RTN","BPSRES",102,0)
 ;2 IB says prescription/fill is not ECME billable or the data returned from IB is not valid
"RTN","BPSRES",103,0)
 ;3 ECME closed the claim but did not submit it to the payer
"RTN","BPSRES",104,0)
 ;4 Unable to queue the ECME claim
"RTN","BPSRES",105,0)
 ;5 Invalid input
"RTN","BPSRES",106,0)
 ;10 Reversal Processed But Claim Was Not Resubmitted
"RTN","BPSRES",107,0)
 ;
"RTN","BPSRES",108,0)
 I +BPBILL=0 D
"RTN","BPSRES",109,0)
 . S BPMSG="ECME RED Resubmit Claim w/Edits"
"RTN","BPSRES",110,0)
 . I BPADDLTXT'="" S BPMSG=BPMSG_": "_BPADDLTXT
"RTN","BPSRES",111,0)
 . S BPMSG=BPMSG_"-"_$S(BPCOB=1:"p",BPCOB=2:"s",1:"")_$$INSNAME^BPSSCRU6(BP59)
"RTN","BPSRES",112,0)
 . S BPMSG=$E(BPMSG,1,100)
"RTN","BPSRES",113,0)
 . D ECMEACT^PSOBPSU1(+BPRXIEN,+BPRXR,BPMSG)
"RTN","BPSRES",114,0)
 . S BPUPDFLG=1,BPCLTOT=1
"RTN","BPSRES",115,0)
 ;
"RTN","BPSRES",116,0)
XRES ;
"RTN","BPSRES",117,0)
 I BPCLTOT W !,BPCLTOT," claim",$S(BPCLTOT'=1:"s have",1:" has")," been resubmitted.",!
"RTN","BPSRES",118,0)
 D PAUSE^VALM1
"RTN","BPSRES",119,0)
 Q BPUPDFLG
"RTN","BPSRES",120,0)
 ;
"RTN","BPSRES",121,0)
XRES2 ;
"RTN","BPSRES",122,0)
 I BPCLTOT W !,BPCLTOT," claim",$S(BPCLTOT'=1:"s have",1:" has")," been resubmitted.",!
"RTN","BPSRES",123,0)
 Q BPUPDFLG
"RTN","BPSRES",124,0)
 ;
"RTN","BPSRES",125,0)
 ;Enter EDIT information for claim
"RTN","BPSRES",126,0)
 ;
"RTN","BPSRES",127,0)
 ;  Input Values -> BP59 - The BPS TRANSACTION entry
"RTN","BPSRES",128,0)
 ;                  BP02 - The BPS CLAIMS entry
"RTN","BPSRES",129,0)
 ;                  BPRXIEN - Prescription IEN (#52)
"RTN","BPSRES",130,0)
 ;                  BPRXR - Fill Number
"RTN","BPSRES",131,0)
 ;                  BPCOB - (optional) payer sequence (1-primary, 2 -secondary)
"RTN","BPSRES",132,0)
 ;                  BPDOSDT - Date of Service, passed by reference 
"RTN","BPSRES",133,0)
 ;                  BPSECOND - Array, passed by reference, of COB data
"RTN","BPSRES",134,0)
 ;                  BPADDLTXT - Passed by reference, text to add to ECME
"RTN","BPSRES",135,0)
 ;                     log if user chooses to use Date of Service on the
"RTN","BPSRES",136,0)
 ;                     claim instead of the Release Date.
"RTN","BPSRES",137,0)
 ;  Output Value -> BPQ  - -1 - The user chose to quit
"RTN","BPSRES",138,0)
 ;                         "" - The user completed the EDITS
"RTN","BPSRES",139,0)
PROMPTS(BP59,BP02,BPRXIEN,BPRXR,BPCOB,BPDOSDT,BPSECOND,BPADDLTXT) ;
"RTN","BPSRES",140,0)
 N %,BP300,BP35401,BPCLCD1,BPCLCD2,BPCLCD3,BPFDA,BPFLD,BPOVRIEN,BPMED,BPPSNCD
"RTN","BPSRES",141,0)
 N BPPREAUT,BPPRETYP,BPQ,BPRELCD,BPRELEASEDT,DIC,DIR,DIROUT,DTOUT,DUOUT,X,Y,DIRUT,DUP
"RTN","BPSRES",142,0)
 N BPCLCDN,BPCLCDX,BPSX,BPSADDLFLDS
"RTN","BPSRES",143,0)
 S BPQ=""
"RTN","BPSRES",144,0)
 I +$G(BPCOB)=0 S BPCOB=1
"RTN","BPSRES",145,0)
 ;Pull Information from Claim
"RTN","BPSRES",146,0)
 S BP300=$G(^BPSC(BP02,300))
"RTN","BPSRES",147,0)
 S BPRELCD=$TR($E($P(BP300,U,6),3,99)," ")
"RTN","BPSRES",148,0)
 S BPPSNCD=$TR($E($P(BP300,U,3),3,99)," ")
"RTN","BPSRES",149,0)
 S (BPPRETYP,BPPREAUT,BPDLYRS,BPPHSRV)=""
"RTN","BPSRES",150,0)
 S BPMED=0 F  S BPMED=$O(^BPSC(BP02,400,BPMED)) Q:'BPMED  D  I BPPREAUT]"" Q
"RTN","BPSRES",151,0)
 . N BP460 S BP460=$G(^BPSC(BP02,400,BPMED,460))
"RTN","BPSRES",152,0)
 . S:BPPREAUT="" BPPREAUT=$TR($E($P(BP460,U,2),3,99)," "),BPPRETYP=$TR($E($P(BP460,U),3,99)," ")
"RTN","BPSRES",153,0)
 . S:BPDLYRS="" BPDLYRS=$TR($E($P($G(^BPSC(BP02,400,BPMED,350)),U,7),3,99)," ") I BPDLYRS]"" S BPDLYRS=+BPDLYRS
"RTN","BPSRES",154,0)
 . S:BPPHSRV="" BPPHSRV=$TR($E($P($G(^BPSC(BP02,400,BPMED,140)),U,7),3,99)," ")
"RTN","BPSRES",155,0)
 . F BP35401=1:1:3 S @("BPCLCD"_BP35401)=$TR($E($P($G(^BPSC(BP02,400,BPMED,354.01,BP35401,1)),U),3,99)," ")
"RTN","BPSRES",156,0)
 . S BPCLCD1=+BPCLCD1 I BPCLCD1=0 S BPCLCD1=1
"RTN","BPSRES",157,0)
 S BPPTRES=$TR($E($P($G(^BPSC(BP02,380)),U,4),3,99)," ") I BPPTRES="" S BPPTRES=1
"RTN","BPSRES",158,0)
 S:BPPHSRV="" BPPHSRV=1
"RTN","BPSRES",159,0)
 ;
"RTN","BPSRES",160,0)
 ;Relationship Code
"RTN","BPSRES",161,0)
 N X,DIC,Y
"RTN","BPSRES",162,0)
 S DIC("B")=BPRELCD
"RTN","BPSRES",163,0)
 S DIC(0)="QEAM",DIC=9002313.19,DIC("A")="Pharmacy Relationship Code: "
"RTN","BPSRES",164,0)
 D ^DIC
"RTN","BPSRES",165,0)
 ;Check for "^" or timeout
"RTN","BPSRES",166,0)
 I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",167,0)
 S BPRELCD=$P(Y,U,2)
"RTN","BPSRES",168,0)
 K X,DIC,Y
"RTN","BPSRES",169,0)
 ;
"RTN","BPSRES",170,0)
 ;Person Code
"RTN","BPSRES",171,0)
 K DIR("?") S DIR(0)="FO^1:3",DIR("A")="Pharmacy Person Code",DIR("?")="Enter the Specific Person Code Assigned to the Patient by the Payer"
"RTN","BPSRES",172,0)
 S DIR("B")=BPPSNCD
"RTN","BPSRES",173,0)
 D ^DIR
"RTN","BPSRES",174,0)
 I $D(DTOUT)!$D(DUOUT) S BPQ=-1 G XPROMPTS
"RTN","BPSRES",175,0)
 S BPPSNCD=Y
"RTN","BPSRES",176,0)
 ;
"RTN","BPSRES",177,0)
 ;Pre-Authorization
"RTN","BPSRES",178,0)
 K DIR("?") S DIR(0)="FO^1:11",DIR("A")="Prior Authorization Number",DIR("?")="Enter the Number Submitted by the Provider to Identify the Prior Authorization"
"RTN","BPSRES",179,0)
 S DIR("B")=BPPREAUT
"RTN","BPSRES",180,0)
 D ^DIR
"RTN","BPSRES",181,0)
 I $D(DTOUT)!$D(DUOUT) S BPQ=-1 G XPROMPTS
"RTN","BPSRES",182,0)
 S BPPREAUT=Y
"RTN","BPSRES",183,0)
 ;
"RTN","BPSRES",184,0)
 ;Prior-Authorization Type Code
"RTN","BPSRES",185,0)
 N X,DIC,Y
"RTN","BPSRES",186,0)
 S DIC("B")=+BPPRETYP
"RTN","BPSRES",187,0)
 S DIC(0)="QEAM",DIC=9002313.26,DIC("A")="Prior Authorization Type Code: "
"RTN","BPSRES",188,0)
 D ^DIC
"RTN","BPSRES",189,0)
 ;Check for "^" or timeout
"RTN","BPSRES",190,0)
 I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",191,0)
 S BPPRETYP=$P(Y,U,2)
"RTN","BPSRES",192,0)
 K X,DIC,Y
"RTN","BPSRES",193,0)
 ;
"RTN","BPSRES",194,0)
 ; If there is a pending reject on the Pharmacists Worklist, or there
"RTN","BPSRES",195,0)
 ; is a resolved or unresolved reject 79 or 88, then only display
"RTN","BPSRES",196,0)
 ; Submission Clarification Codes and do not allow enter/edit. (BPS*1*21)
"RTN","BPSRES",197,0)
 ;
"RTN","BPSRES",198,0)
 I $$BPSKIP(BPRXIEN,BPRXR) D  G P1
"RTN","BPSRES",199,0)
 . F BP35401=1:1:3 I @("BPCLCD"_BP35401) D
"RTN","BPSRES",200,0)
 . . S BPSX=+@("BPCLCD"_BP35401)
"RTN","BPSRES",201,0)
 . . W !,"Submission Clarification Code ",BP35401,": ",BPSX
"RTN","BPSRES",202,0)
 . . S BPCLCDX=$O(^BPS(9002313.25,"B",BPSX,"")),BPCLCDN=$P(^BPS(9002313.25,BPCLCDX,0),U,2)
"RTN","BPSRES",203,0)
 . . W ?44,BPCLCDN
"RTN","BPSRES",204,0)
 . . Q
"RTN","BPSRES",205,0)
 . W !," **OPECC cannot edit Sub. Clar. Code field for this reject - refer to Pharmacist"
"RTN","BPSRES",206,0)
 . Q
"RTN","BPSRES",207,0)
 ;
"RTN","BPSRES",208,0)
 ;Submission Clarification Code 1
"RTN","BPSRES",209,0)
 S DIC("B")=BPCLCD1
"RTN","BPSRES",210,0)
 S DIC(0)="QEAM",DIC=9002313.25,DIC("A")="Submission Clarification Code 1: "
"RTN","BPSRES",211,0)
 D ^DIC
"RTN","BPSRES",212,0)
 ;Check for "^" or timeout
"RTN","BPSRES",213,0)
 I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",214,0)
 S BPCLCD1=$P(Y,U,2)
"RTN","BPSRES",215,0)
 K X,DIC,Y
"RTN","BPSRES",216,0)
 ;
"RTN","BPSRES",217,0)
 ;Submission Clarification Code 2
"RTN","BPSRES",218,0)
 I +BPCLCD2 S BPCLCD2=+BPCLCD2 S DIC("B")=BPCLCD2
"RTN","BPSRES",219,0)
 S DIC(0)="QEAM",DIC=9002313.25,DIC("A")="Submission Clarification Code 2: ",DUP=0
"RTN","BPSRES",220,0)
 F  D  Q:BPQ=-1  Q:'DUP
"RTN","BPSRES",221,0)
 . D ^DIC
"RTN","BPSRES",222,0)
 . ;Check for "^" or timeout
"RTN","BPSRES",223,0)
 . I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y Q
"RTN","BPSRES",224,0)
 . S BPCLCD2=$P(Y,U,2)
"RTN","BPSRES",225,0)
 . S DUP=0 I BPCLCD2=BPCLCD1 S BPCLCD2="" W !,"  Duplicates not allowed" S DUP=1
"RTN","BPSRES",226,0)
 K X,DIC,Y
"RTN","BPSRES",227,0)
 I BPQ=-1 G XPROMPTS
"RTN","BPSRES",228,0)
 ;
"RTN","BPSRES",229,0)
 ;Submission Clarification Code 3
"RTN","BPSRES",230,0)
 I BPCLCD2'="" D  I BPQ=-1 G XPROMPTS
"RTN","BPSRES",231,0)
 . I +BPCLCD3 S BPCLCD3=+BPCLCD3 S DIC("B")=BPCLCD3
"RTN","BPSRES",232,0)
 . S DIC(0)="QEAM",DIC=9002313.25,DIC("A")="Submission Clarification Code 3: ",DUP=0
"RTN","BPSRES",233,0)
 . F  D  Q:'DUP  I BPQ=-1 Q
"RTN","BPSRES",234,0)
 . . D ^DIC
"RTN","BPSRES",235,0)
 . . ;Check for "^" or timeout
"RTN","BPSRES",236,0)
 . . I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y Q
"RTN","BPSRES",237,0)
 . . S BPCLCD3=$P(Y,U,2)
"RTN","BPSRES",238,0)
 . . S DUP=0 I BPCLCD3=BPCLCD1!(BPCLCD3=BPCLCD2) S BPCLCD3="" W !,"  Duplicates not allowed" S DUP=1
"RTN","BPSRES",239,0)
 . K X,DIC,Y
"RTN","BPSRES",240,0)
 ;
"RTN","BPSRES",241,0)
P1 ;
"RTN","BPSRES",242,0)
 ;
"RTN","BPSRES",243,0)
 ; If the user opts to use the Date of Service instead of the
"RTN","BPSRES",244,0)
 ; Release Date, then set BPADDLTXT, which will be used when creating
"RTN","BPSRES",245,0)
 ; an entry in the Activity Log.
"RTN","BPSRES",246,0)
 ;
"RTN","BPSRES",247,0)
 S BPADDLTXT=""
"RTN","BPSRES",248,0)
 S BPRELEASEDT=$$RELDATE^BPSBCKJ(+BPRXIEN,+BPRXR)
"RTN","BPSRES",249,0)
 I BPRELEASEDT]"" D  I BPQ=-1 G XPROMPTS
"RTN","BPSRES",250,0)
 . S BPDOSDT=$$EDITDT(1,BPRXIEN,BPRXR,BP02)
"RTN","BPSRES",251,0)
 . I BPDOSDT="^" S BPQ=-1 Q
"RTN","BPSRES",252,0)
 . I BPDOSDT'=(BPRELEASEDT\1) S BPADDLTXT="Date of Service ("_$$FMTE^XLFDT(BPDOSDT,5)_")"
"RTN","BPSRES",253,0)
 . Q
"RTN","BPSRES",254,0)
 ;
"RTN","BPSRES",255,0)
 ;Patient Residence Code
"RTN","BPSRES",256,0)
 N X,DIC,Y
"RTN","BPSRES",257,0)
 S DIC("B")=+BPPTRES
"RTN","BPSRES",258,0)
 S DIC(0)="QEAM",DIC=9002313.27,DIC("A")="Patient Residence Code: "
"RTN","BPSRES",259,0)
 D ^DIC
"RTN","BPSRES",260,0)
 ;Check for "^" or timeout
"RTN","BPSRES",261,0)
 I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",262,0)
 S BPPTRES=$P(Y,U,2)
"RTN","BPSRES",263,0)
 K X,DIC,Y
"RTN","BPSRES",264,0)
 ;
"RTN","BPSRES",265,0)
 ;Pharmacy Service Type Code
"RTN","BPSRES",266,0)
 N X,DIC,Y
"RTN","BPSRES",267,0)
 S DIC("B")=+BPPHSRV
"RTN","BPSRES",268,0)
 S DIC(0)="QEAM",DIC=9002313.28,DIC("A")="Pharmacy Service Type Code: "
"RTN","BPSRES",269,0)
 D ^DIC
"RTN","BPSRES",270,0)
 ;Check for "^" or timeout
"RTN","BPSRES",271,0)
 I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",272,0)
 S BPPHSRV=$P(Y,U,2)
"RTN","BPSRES",273,0)
 K X,DIC,Y
"RTN","BPSRES",274,0)
 ;
"RTN","BPSRES",275,0)
 ;Delay Reason Code
"RTN","BPSRES",276,0)
 N X,DIC,Y
"RTN","BPSRES",277,0)
 S DIC("B")=BPDLYRS
"RTN","BPSRES",278,0)
 S DIC(0)="QEAM",DIC=9002313.29,DIC("A")="Delay Reason Code: "
"RTN","BPSRES",279,0)
 D ^DIC
"RTN","BPSRES",280,0)
 ;Check for "^" or timeout
"RTN","BPSRES",281,0)
 I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",282,0)
 S BPDLYRS=$P(Y,U,2)
"RTN","BPSRES",283,0)
 K X,DIC,Y
"RTN","BPSRES",284,0)
 ;
"RTN","BPSRES",285,0)
 ; If secondary claim, setup secondary data and allow user to edit
"RTN","BPSRES",286,0)
 ; Get data from the primary claim, if it exists
"RTN","BPSRES",287,0)
 I BPCOB=2 D  I BPQ=-1 G XPROMPTS
"RTN","BPSRES",288,0)
 . N BPSPL59,BPRTTP59
"RTN","BPSRES",289,0)
 . S BPRET=$$PRIMDATA^BPSPRRX6(BPRXIEN,BPRXR,.BPSECOND)
"RTN","BPSRES",290,0)
 . ; If the primary claim data is missing, get data from the most recent secondary claim
"RTN","BPSRES",291,0)
 . I 'BPRET,$$SECDATA^BPSPRRX6(BPRXIEN,BPRXR,.BPSPL59,.BPSECOND,.BPRTTP59)
"RTN","BPSRES",292,0)
 . ; The PRIMARY BILL element is set by $$SECDATA.  If SECDATA is not called, this element will be 
"RTN","BPSRES",293,0)
 . ;   missing and we will need to create it
"RTN","BPSRES",294,0)
 . I '$D(BPSECOND("PRIMARY BILL")) D
"RTN","BPSRES",295,0)
 .. N BPBILL
"RTN","BPSRES",296,0)
 .. S BPBILL=$$PAYBLPRI^BPSUTIL2(BP59)
"RTN","BPSRES",297,0)
 .. I BPBILL>0 S BPSECOND("PRIMARY BILL")=BPBILL
"RTN","BPSRES",298,0)
 . ; Set flag telling BPSNCPDP not to recompile the data from the BPS Transaction and the secondary claim
"RTN","BPSRES",299,0)
 . S BPSECOND("NEW COB DATA")=1
"RTN","BPSRES",300,0)
 . ; $$PROMPTS displays the data and allows the user edit the data.
"RTN","BPSRES",301,0)
 . S BPQ=$$PROMPTS^BPSPRRX3(BPRXIEN,BPRXR,BPDOSDT,.BPSECOND)
"RTN","BPSRES",302,0)
 ;
"RTN","BPSRES",303,0)
 ; Allow user to add to the claim additional fields which are
"RTN","BPSRES",304,0)
 ; not on the payer sheet.  $$ADDLFLDS will return 0 if no
"RTN","BPSRES",305,0)
 ; additional fields were selected or -1 if the user exited out.
"RTN","BPSRES",306,0)
 ;
"RTN","BPSRES",307,0)
 S BPQ=$$ADDLFLDS^BPSRES1(BP02,BP59,.BPSADDLFLDS)
"RTN","BPSRES",308,0)
 I BPQ=-1 G XPROMPTS
"RTN","BPSRES",309,0)
 ;
"RTN","BPSRES",310,0)
 ;Ask to proceed
"RTN","BPSRES",311,0)
 W !
"RTN","BPSRES",312,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure(Y/N)")
"RTN","BPSRES",313,0)
 I BPQ'=1 S BPQ=-1 G XPROMPTS
"RTN","BPSRES",314,0)
 S BPQ=1
"RTN","BPSRES",315,0)
 ;
"RTN","BPSRES",316,0)
 ; Save the override values and the list of additional fields
"RTN","BPSRES",317,0)
 ; in file# 9002313.511, BPS NCPDP OVERRIDES.
"RTN","BPSRES",318,0)
 ;
"RTN","BPSRES",319,0)
 I '$$SAVE^BPSRES1("RED",BP59,.BPSADDLFLDS) S BPQ=-1
"RTN","BPSRES",320,0)
 ;
"RTN","BPSRES",321,0)
XPROMPTS ;
"RTN","BPSRES",322,0)
 S BPOVRIEN=$S(BPQ=-1:BPQ,$G(BPOVRIEN(1))]"":BPOVRIEN(1),1:-1)
"RTN","BPSRES",323,0)
 Q BPOVRIEN
"RTN","BPSRES",324,0)
 ;
"RTN","BPSRES",325,0)
 ;Prompt User for Claim to Resubmit (w/EDITS)
"RTN","BPSRES",326,0)
 ;
"RTN","BPSRES",327,0)
 ; Input values ->  BPROMPT - prompt string
"RTN","BPSRES",328,0)
 ;                 BPERRMES - the message to display when the user tries
"RTN","BPSRES",329,0)
 ;                           to make multi line selection (optional)
"RTN","BPSRES",330,0)
 ;                  Piece
"RTN","BPSRES",331,0)
 ;output values ->      1 - 1 = okay, <0 = errors, 0 = quit
"RTN","BPSRES",332,0)
 ;                      2 - patient ien #2
"RTN","BPSRES",333,0)
 ;                      3 - insurance ien #36
"RTN","BPSRES",334,0)
 ;                      4 - ptr to #9002313.59
"RTN","BPSRES",335,0)
 ;                      5 - 1st line for index(es) in LM "VALM" array
"RTN","BPSRES",336,0)
 ;                      6 - patient's index
"RTN","BPSRES",337,0)
 ;                      7 - claim's index
"RTN","BPSRES",338,0)
ASKLINE(BPROMPT,BPERRMES) ;
"RTN","BPSRES",339,0)
 N BPRET,BPCNT
"RTN","BPSRES",340,0)
 S BPRET="",BPCNT=0
"RTN","BPSRES",341,0)
 F  S BPRET=$$SELLINE^BPSSCRU4(BPROMPT,"C",VALMAR,"") Q:BPRET'<0  D
"RTN","BPSRES",342,0)
 . ;
"RTN","BPSRES",343,0)
 . I BPCNT<1 S BPCNT=BPCNT+1 W !
"RTN","BPSRES",344,0)
 . E  S BPCNT=0 D RE^VALM4
"RTN","BPSRES",345,0)
 . I BPRET=-1 W "Invalid line number" ; (invalid Patient summary line)"
"RTN","BPSRES",346,0)
 . I BPRET=-8 W $S($G(BPERRMES)]"":BPERRMES,1:" Invalid line number")
"RTN","BPSRES",347,0)
 . I BPRET=-4 W "Invalid line number" ; (invalid RX line)"
"RTN","BPSRES",348,0)
 . I BPRET=-2 W "Please select Patient's summary line."
"RTN","BPSRES",349,0)
 . I BPRET=-3 W "Please specify RX line."
"RTN","BPSRES",350,0)
 . I ",-1,-8,-4,-2,-3,"'[(","_BPRET_",") W "Incorrect format." ; Corrupted array (",BPRET,")"
"RTN","BPSRES",351,0)
 Q BPRET
"RTN","BPSRES",352,0)
 ;
"RTN","BPSRES",353,0)
EDITDT(DFLT,BPRXIEN,BPRXR,BP02) ;Prompt User to choose correct Date of Service
"RTN","BPSRES",354,0)
 ;
"RTN","BPSRES",355,0)
 ; Input value ->  DFLT - The data to use as the default value. If no default
"RTN","BPSRES",356,0)
 ;                        is provided, Current Date of Service will be used.
"RTN","BPSRES",357,0)
 ;
"RTN","BPSRES",358,0)
 ;                        1 - Current Date of Service
"RTN","BPSRES",359,0)
 ;                        2 - Fill Date
"RTN","BPSRES",360,0)
 ;                        3 - Release Date
"RTN","BPSRES",361,0)
 ;
"RTN","BPSRES",362,0)
 ;              BPRXIEN - Pointer to the PRESCRIPTION file (#52)
"RTN","BPSRES",363,0)
 ;                BPRXR - Refill number for prescription
"RTN","BPSRES",364,0)
 ;                 BP02 - Pointer to the BPS CLAIMS file (#9002313.02)
"RTN","BPSRES",365,0)
 ;
"RTN","BPSRES",366,0)
 ; Output value -> Selected Date of Service in FileMan format
"RTN","BPSRES",367,0)
 ;
"RTN","BPSRES",368,0)
 ; Reference to $$RXRLDT^PSOBPSUT supported by DBIA 4701
"RTN","BPSRES",369,0)
 ; Reference to $$RXFLDT^PSOBPSUT supported by DBIA 4701
"RTN","BPSRES",370,0)
 ;
"RTN","BPSRES",371,0)
 N BPRLS,BPFIL,BPCUR,DIR,DIRUT,DIROUT,DTOUT,DUOUT,OPT,TMP,X,Y
"RTN","BPSRES",372,0)
 S BPRLS=$$RXRLDT^PSOBPSUT(BPRXIEN,BPRXR)\1 ;release date
"RTN","BPSRES",373,0)
 S BPFIL=$$RXFLDT^PSOBPSUT(BPRXIEN,BPRXR)\1 ;fill date
"RTN","BPSRES",374,0)
 S BPCUR=$$HL7TFM^XLFDT($$GET1^DIQ(9002313.02,BP02,401)) ;current date of service
"RTN","BPSRES",375,0)
 S DFLT=$G(DFLT),DIR("B")=1,DIR("A")="Date of Service"
"RTN","BPSRES",376,0)
 I DFLT=2,BPFIL]"" S DIR("B")=2
"RTN","BPSRES",377,0)
 I DFLT=3,BPRLS]"" S DIR("B")=3
"RTN","BPSRES",378,0)
 S OPT=1,DIR(0)="S^"_OPT_":"_$$FMTE^XLFDT(BPCUR,"5D")_" Current Date of Service",TMP(OPT)=BPCUR
"RTN","BPSRES",379,0)
 I BPFIL'>DT,BPFIL<BPRLS S OPT=OPT+1,DIR(0)=DIR(0)_";"_OPT_":"_$$FMTE^XLFDT(BPFIL,"5D")_" Fill Date",TMP(OPT)=BPFIL
"RTN","BPSRES",380,0)
 I BPRLS'>DT S OPT=OPT+1,DIR(0)=DIR(0)_";"_OPT_":"_$$FMTE^XLFDT(BPRLS,"5D")_" Release Date",TMP(OPT)=BPRLS
"RTN","BPSRES",381,0)
 D ^DIR
"RTN","BPSRES",382,0)
 I $D(DIRUT) S Y="^" Q Y
"RTN","BPSRES",383,0)
 Q TMP(Y)
"RTN","BPSRES",384,0)
 ;
"RTN","BPSRES",385,0)
BPSKIP(BPSRX,BPSFILL) ; Determine whether to skip the enter/edit of Submission Clarification Codes
"RTN","BPSRES",386,0)
 ; This function will return a '1' if the enter/edit of Submission 
"RTN","BPSRES",387,0)
 ; Clarification Codes should be skipped (not allowed).
"RTN","BPSRES",388,0)
 ;
"RTN","BPSRES",389,0)
 N BPS7988DATE,BPSACTIVITY,BPSECMEDATE,BPSREJECT,BPSX
"RTN","BPSRES",390,0)
 ;
"RTN","BPSRES",391,0)
 ; If any open/unresolved rejects are on the pharmacist worklist, Quit with 1.
"RTN","BPSRES",392,0)
 ;
"RTN","BPSRES",393,0)
 I $$FIND^PSOREJUT(BPSRX,BPSFILL) Q 1
"RTN","BPSRES",394,0)
 ;
"RTN","BPSRES",395,0)
 ; If there are any closed/resolved 79/88 rejects for this Rx/Fill,
"RTN","BPSRES",396,0)
 ; pull the latest detected date/time.
"RTN","BPSRES",397,0)
 ; If there has not been any ECME activity since that date/time, then
"RTN","BPSRES",398,0)
 ; disallow the edit of Submission Clarification Codes, Quit with 1.
"RTN","BPSRES",399,0)
 ;
"RTN","BPSRES",400,0)
 S BPS7988DATE=0
"RTN","BPSRES",401,0)
 ;
"RTN","BPSRES",402,0)
 ; Loop through the REJECTS multiple.
"RTN","BPSRES",403,0)
 S BPSREJECT=0
"RTN","BPSRES",404,0)
 F  S BPSREJECT=$O(^PSRX(BPSRX,"REJ",BPSREJECT)) Q:'BPSREJECT  D
"RTN","BPSRES",405,0)
 . ; If a reject is not for the current fill, skip this one.
"RTN","BPSRES",406,0)
 . I $$GET1^DIQ(52.25,BPSREJECT_","_BPSRX,5)'=BPSFILL Q
"RTN","BPSRES",407,0)
 . ;
"RTN","BPSRES",408,0)
 . ; If not a 79 or 88, skip this one.
"RTN","BPSRES",409,0)
 . I ",79,88,"'[(","_$$GET1^DIQ(52.25,BPSREJECT_","_BPSRX,.01)_",") Q
"RTN","BPSRES",410,0)
 . ;
"RTN","BPSRES",411,0)
 . ; Pull DATE/TIME DETECTED.  If the date/time is later than
"RTN","BPSRES",412,0)
 . ; BPS7988DATE, then reset BPS7988DATE to that date/time.
"RTN","BPSRES",413,0)
 . S BPSX=$$GET1^DIQ(52.25,BPSREJECT_","_BPSRX,1,"I")
"RTN","BPSRES",414,0)
 . I BPSX>BPS7988DATE S BPS7988DATE=BPSX
"RTN","BPSRES",415,0)
 . Q
"RTN","BPSRES",416,0)
 ; 
"RTN","BPSRES",417,0)
 ; If <blank> then Quit with 0.
"RTN","BPSRES",418,0)
 I BPS7988DATE=0 Q 0
"RTN","BPSRES",419,0)
 ;
"RTN","BPSRES",420,0)
 ; Once we have the most recent DATE/TIME DETECTED, determine whether
"RTN","BPSRES",421,0)
 ; there is ECME activity later than that.
"RTN","BPSRES",422,0)
 ;
"RTN","BPSRES",423,0)
 ; Loop through entries the ACTIVITY LOG multiple.
"RTN","BPSRES",424,0)
 S (BPSX,BPSACTIVITY,BPSECMEDATE)=0
"RTN","BPSRES",425,0)
 F  S BPSACTIVITY=$O(^PSRX(BPSRX,"A",BPSACTIVITY)) Q:'BPSACTIVITY  D
"RTN","BPSRES",426,0)
 . ; If the REASON is not "M" (=ECME), skip.
"RTN","BPSRES",427,0)
 . I $$GET1^DIQ(52.3,BPSACTIVITY_","_BPSRX,.02,"I")'="M" Q
"RTN","BPSRES",428,0)
 . ; 
"RTN","BPSRES",429,0)
 . ; Pull the date/time stamp from the activity log entry.  If later
"RTN","BPSRES",430,0)
 . ; than what we found so far, update BPSECMEDATE.
"RTN","BPSRES",431,0)
 . S BPSX=$$GET1^DIQ(52.3,BPSACTIVITY_","_BPSRX,.01,"I")
"RTN","BPSRES",432,0)
 . I BPSX>BPSECMEDATE S BPSECMEDATE=BPSX
"RTN","BPSRES",433,0)
 . Q
"RTN","BPSRES",434,0)
 ;
"RTN","BPSRES",435,0)
 ; If the BPSECMEDATE is later than BPS7988DATE, then Quit with 0
"RTN","BPSRES",436,0)
 ; to allow the edit of Submission Clarification Codes.  Otherwise,
"RTN","BPSRES",437,0)
 ; Quit with 1 to skip, not allow, the enter/edit of those codes.
"RTN","BPSRES",438,0)
 ; When a claim is rejected, the time stamp on the Activity Log may
"RTN","BPSRES",439,0)
 ; be a second or two later than the time stamp on the Reject.
"RTN","BPSRES",440,0)
 ; Therefore, we add 60 seconds to the time stamp on the reject when
"RTN","BPSRES",441,0)
 ; making this comparison.
"RTN","BPSRES",442,0)
 ;
"RTN","BPSRES",443,0)
 I BPSECMEDATE>(BPS7988DATE+.00006) Q 0
"RTN","BPSRES",444,0)
 Q 1
"RTN","BPSRES",445,0)
 ;
"RTN","BPSRES1")
0^14^B51902398
"RTN","BPSRES1",1,0)
BPSRES1 ;AITC/MRD - ECME SCREEN RESUBMIT W/EDITS ;10/23/17
"RTN","BPSRES1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**23**;JUN 2004;Build 44
"RTN","BPSRES1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRES1",4,0)
 ;
"RTN","BPSRES1",5,0)
ADDLFLDS(BPS02,BPS59,BPSADDLFLDS) ; Add fields to a claim.
"RTN","BPSRES1",6,0)
 ; This function allows the user to add to claim fields not on payer
"RTN","BPSRES1",7,0)
 ; sheet.  It is used by the RED/Resubmit with Edits Action on the
"RTN","BPSRES1",8,0)
 ; ECME User Screen and by the PRO Option (Process Secondary/TRICARE
"RTN","BPSRES1",9,0)
 ; Rx to ECME).
"RTN","BPSRES1",10,0)
 ; Input: BPS02 = Pointer to BPS CLAIMS
"RTN","BPSRES1",11,0)
 ;        BPS59 = Pointer to BSP TRANSACTION
"RTN","BPSRES1",12,0)
 ; This function will return:
"RTN","BPSRES1",13,0)
 ;     1 - If user entered additional fields.
"RTN","BPSRES1",14,0)
 ;     0 - If user added no fields.
"RTN","BPSRES1",15,0)
 ;    -1 - If user exited out via "^".
"RTN","BPSRES1",16,0)
 ; This function will also set up the array BPSADDFLDS if the user
"RTN","BPSRES1",17,0)
 ; chooses to add any fields to the claim.
"RTN","BPSRES1",18,0)
 ;    BPSADDLFLDS(Field IEN) = Value to Send
"RTN","BPSRES1",19,0)
 ;
"RTN","BPSRES1",20,0)
 N BPS,BPSFIELD,BPSGETCODE,BPSPAYER,BPSQ,BPSSEGMENT
"RTN","BPSRES1",21,0)
 N DIC,MEDN,TRANLIST,X,Y
"RTN","BPSRES1",22,0)
 ;
"RTN","BPSRES1",23,0)
 ; Prompt user whether to enter additional fields.  Quit with -1 if
"RTN","BPSRES1",24,0)
 ; user entered "^".  Quit with 0 if user entered "No".
"RTN","BPSRES1",25,0)
 ;
"RTN","BPSRES1",26,0)
 S BPSQ=$$YESNO^BPSSCRRS("Submit NCPDP Field Not on Payer Sheet (Y/N)","N")
"RTN","BPSRES1",27,0)
 I BPSQ'=1 Q BPSQ
"RTN","BPSRES1",28,0)
 ;
"RTN","BPSRES1",29,0)
 ; Kill array that will contain list of fields to be added.
"RTN","BPSRES1",30,0)
 ;
"RTN","BPSRES1",31,0)
 K BPSADDLFLDS
"RTN","BPSRES1",32,0)
 ;
"RTN","BPSRES1",33,0)
 ; Build an array listing the fields already on the payer sheet and an
"RTN","BPSRES1",34,0)
 ; array listing all segments on the payer sheet.  Include all segments,
"RTN","BPSRES1",35,0)
 ; though some may be excluded later.
"RTN","BPSRES1",36,0)
 ;
"RTN","BPSRES1",37,0)
 D ARRAYS(BPS02,.BPSPAYER,.BPSSEGMENT)
"RTN","BPSRES1",38,0)
 I 'BPSPAYER Q 0
"RTN","BPSRES1",39,0)
 ;
"RTN","BPSRES1",40,0)
 ; Build BPS array.  While each field in the file BPS NCPDP FIELD DEFS
"RTN","BPSRES1",41,0)
 ; has Get Code (executable M code) for pulling the data value, the way
"RTN","BPSRES1",42,0)
 ; this has been implemented is that first the subroutine $$BPS^BPSOSCB
"RTN","BPSRES1",43,0)
 ; pulls many fields of data, building the BPS array, and then the
"RTN","BPSRES1",44,0)
 ; Get Code for each field puts into BPS("X") a value from the BPS
"RTN","BPSRES1",45,0)
 ; array.  Because the system needs to display to the user the value
"RTN","BPSRES1",46,0)
 ; that would be sent with a field being added to the claim, we need to
"RTN","BPSRES1",47,0)
 ; build the entire BPS array, which will be used by the Get Code for
"RTN","BPSRES1",48,0)
 ; any fields selected by the user.  TRANLIST is an array listing all
"RTN","BPSRES1",49,0)
 ; BPS Transactions in this batch of claims.  However, the VA does not
"RTN","BPSRES1",50,0)
 ; ever batch claims, so there is always only one transaction in that
"RTN","BPSRES1",51,0)
 ; list.  BPS(9002313.0201) must be set to 1.  It should never return a
"RTN","BPSRES1",52,0)
 ; value other than 0, but if it does, Quit.
"RTN","BPSRES1",53,0)
 ;
"RTN","BPSRES1",54,0)
 S TRANLIST(BPS59)=""
"RTN","BPSRES1",55,0)
 S BPS(9002313.0201)=1
"RTN","BPSRES1",56,0)
 S X=$$BPS^BPSOSCB
"RTN","BPSRES1",57,0)
 I X W !,$P(X,U,2),".",!,"Fields may not be added at this time." Q 0
"RTN","BPSRES1",58,0)
 ;
"RTN","BPSRES1",59,0)
 ; Display help text.
"RTN","BPSRES1",60,0)
 ;
"RTN","BPSRES1",61,0)
 W !!,"Enter a valid NCPDP Field name or number.  Enter '??' for"
"RTN","BPSRES1",62,0)
 W !,"a list of possible choices.  Fields already on the payer sheet"
"RTN","BPSRES1",63,0)
 W !,"are excluded from the list of possible choices.  Also excluded"
"RTN","BPSRES1",64,0)
 W !,"are any fields that do not have logic to pull data from VistA"
"RTN","BPSRES1",65,0)
 W !,"(i.e. fields that will always be <blank>)."
"RTN","BPSRES1",66,0)
 ;
"RTN","BPSRES1",67,0)
A1 ; Prompt user for an NCPDP field to add to the claim.
"RTN","BPSRES1",68,0)
 ;
"RTN","BPSRES1",69,0)
 K DIC
"RTN","BPSRES1",70,0)
 ;
"RTN","BPSRES1",71,0)
 S DIC=9002313.91
"RTN","BPSRES1",72,0)
 S DIC(0)="AEMQ"
"RTN","BPSRES1",73,0)
 S DIC("A")="NCPDP Field Name or Number:  "
"RTN","BPSRES1",74,0)
 S DIC("S")="I $$CHECK^BPSRES1(Y,.BPSPAYER,.BPSSEGMENT)"
"RTN","BPSRES1",75,0)
 S DIC("T")=""
"RTN","BPSRES1",76,0)
 ;
"RTN","BPSRES1",77,0)
 W !
"RTN","BPSRES1",78,0)
 D ^DIC
"RTN","BPSRES1",79,0)
 ;
"RTN","BPSRES1",80,0)
 ; When the user just hits <return>, skip down to A2.
"RTN","BPSRES1",81,0)
 ;
"RTN","BPSRES1",82,0)
 I X="" G A2
"RTN","BPSRES1",83,0)
 ;
"RTN","BPSRES1",84,0)
 I Y=-1 Q -1
"RTN","BPSRES1",85,0)
 S BPSFIELD=+Y
"RTN","BPSRES1",86,0)
 ;
"RTN","BPSRES1",87,0)
 ; Disallow a field already added.
"RTN","BPSRES1",88,0)
 ;
"RTN","BPSRES1",89,0)
 I $D(BPSADDLFLDS(BPSFIELD)) W !,?4,"This field has already been added to the claim.",*7 G A1
"RTN","BPSRES1",90,0)
 ;
"RTN","BPSRES1",91,0)
 ; Display to the user the value to be sent with this field.
"RTN","BPSRES1",92,0)
 ;
"RTN","BPSRES1",93,0)
 S BPS("X")=""
"RTN","BPSRES1",94,0)
 S MEDN=1  ; Required for some GET codes.
"RTN","BPSRES1",95,0)
 S BPSGETCODE=0
"RTN","BPSRES1",96,0)
 F  S BPSGETCODE=$O(^BPSF(9002313.91,BPSFIELD,10,BPSGETCODE)) Q:'BPSGETCODE  X $G(^BPSF(9002313.91,BPSFIELD,10,BPSGETCODE,0))
"RTN","BPSRES1",97,0)
 W !,?4,"Value to transmit: ",BPS("X")
"RTN","BPSRES1",98,0)
 S BPSQ=$$YESNO^BPSSCRRS("Transmit with claim (Y/N)","Y")
"RTN","BPSRES1",99,0)
 I BPSQ=0 G A1
"RTN","BPSRES1",100,0)
 I BPSQ=-1 K BPSADDLFLDS Q -1
"RTN","BPSRES1",101,0)
 ;
"RTN","BPSRES1",102,0)
 ; Add selected field to array (Y=internal field #).
"RTN","BPSRES1",103,0)
 ;
"RTN","BPSRES1",104,0)
 S BPSADDLFLDS(BPSFIELD)=BPS("X")
"RTN","BPSRES1",105,0)
 ;
"RTN","BPSRES1",106,0)
 G A1
"RTN","BPSRES1",107,0)
 ;
"RTN","BPSRES1",108,0)
A2 ; User is done selecting fields to add.
"RTN","BPSRES1",109,0)
 ;
"RTN","BPSRES1",110,0)
 ; If user added no fields, Quit with 0.
"RTN","BPSRES1",111,0)
 ;
"RTN","BPSRES1",112,0)
 I '$D(BPSADDLFLDS) Q 0
"RTN","BPSRES1",113,0)
 ;
"RTN","BPSRES1",114,0)
 ; Display to the user the list of fields being added to the claim.
"RTN","BPSRES1",115,0)
 ;
"RTN","BPSRES1",116,0)
 W !!,"Fields entered to transmit:"
"RTN","BPSRES1",117,0)
 S BPSFIELD=""
"RTN","BPSRES1",118,0)
 F  S BPSFIELD=$O(BPSADDLFLDS(BPSFIELD)) Q:'BPSFIELD  D
"RTN","BPSRES1",119,0)
 . W !,?4,$$GET1^DIQ(9002313.91,BPSFIELD,.01),"-"
"RTN","BPSRES1",120,0)
 . W $$GET1^DIQ(9002313.91,BPSFIELD,.06)," "
"RTN","BPSRES1",121,0)
 . W $$GET1^DIQ(9002313.91,BPSFIELD,.03),": "
"RTN","BPSRES1",122,0)
 . W BPSADDLFLDS(BPSFIELD)
"RTN","BPSRES1",123,0)
 . Q
"RTN","BPSRES1",124,0)
 ;
"RTN","BPSRES1",125,0)
 ; Do not ask "Are you sure?" here -- that will be asked in
"RTN","BPSRES1",126,0)
 ; PROMPTS^BPSRES after Quitting out of this subroutine.
"RTN","BPSRES1",127,0)
 ;
"RTN","BPSRES1",128,0)
 Q 1
"RTN","BPSRES1",129,0)
 ;
"RTN","BPSRES1",130,0)
ARRAYS(BPS02,BPSPAYER,BPSSEGMENT)  ; Build BPSPAYER array and BPSSEGMENT array.
"RTN","BPSRES1",131,0)
 ;
"RTN","BPSRES1",132,0)
 ; Build an array listing the fields already on the payer sheet and
"RTN","BPSRES1",133,0)
 ; an array listing all segments on the payer sheet.  Include all
"RTN","BPSRES1",134,0)
 ; segments, though some may be excluded later.
"RTN","BPSRES1",135,0)
 ;
"RTN","BPSRES1",136,0)
 N BPSFIELD,BPSORDER
"RTN","BPSRES1",137,0)
 ;
"RTN","BPSRES1",138,0)
 S BPSPAYER=$$GET1^DIQ(9002313.02,BPS02,.02,"I")  ; Payer Sheet.
"RTN","BPSRES1",139,0)
 I 'BPSPAYER Q
"RTN","BPSRES1",140,0)
 F BPSSEGMENT=100:10:300 D
"RTN","BPSRES1",141,0)
 . I '$D(^BPSF(9002313.92,BPSPAYER,BPSSEGMENT)) Q
"RTN","BPSRES1",142,0)
 . S BPSSEGMENT(BPSSEGMENT)=""
"RTN","BPSRES1",143,0)
 . S BPSORDER=0
"RTN","BPSRES1",144,0)
 . F  S BPSORDER=$O(^BPSF(9002313.92,BPSPAYER,BPSSEGMENT,BPSORDER)) Q:'BPSORDER  D
"RTN","BPSRES1",145,0)
 . . S BPSFIELD=$P($G(^BPSF(9002313.92,BPSPAYER,BPSSEGMENT,BPSORDER,0)),"^",2)  ; Field IEN
"RTN","BPSRES1",146,0)
 . . I BPSFIELD'="" S BPSPAYER(BPSFIELD)=""
"RTN","BPSRES1",147,0)
 . . Q
"RTN","BPSRES1",148,0)
 . Q
"RTN","BPSRES1",149,0)
 ;
"RTN","BPSRES1",150,0)
 Q
"RTN","BPSRES1",151,0)
 ;
"RTN","BPSRES1",152,0)
CHECK(BPSY,BPSPAYER,BPSSEGMENT) ; Screen for BPS NCPDP FIELD DEFS lookup.  See ADDLFLDS above.
"RTN","BPSRES1",153,0)
 ; This function is called for a given entry in the file BPS
"RTN","BPSRES1",154,0)
 ; NCPDP FIELD DEFS, where +Y will be the IEN.  If this function
"RTN","BPSRES1",155,0)
 ; returns a 1, then this entry is a valid choice.  If this
"RTN","BPSRES1",156,0)
 ; function returns a 0, then this entry will not be displayed to
"RTN","BPSRES1",157,0)
 ; the user when listing possible choices and this entry will not
"RTN","BPSRES1",158,0)
 ; be a valid choice for the user.
"RTN","BPSRES1",159,0)
 ;
"RTN","BPSRES1",160,0)
 ; Disallow if already on the payer sheet.
"RTN","BPSRES1",161,0)
 ;
"RTN","BPSRES1",162,0)
 I $D(BPSPAYER(+BPSY)) Q 0
"RTN","BPSRES1",163,0)
 ;
"RTN","BPSRES1",164,0)
 ; Disallow if this field is not on a request segment or if this
"RTN","BPSRES1",165,0)
 ; field is on a segment not on the payer sheet.
"RTN","BPSRES1",166,0)
 ;
"RTN","BPSRES1",167,0)
 S BPSSEGMENT=$P($G(^BPSF(9002313.91,+BPSY,5)),"^",4)  ; Request Segment.
"RTN","BPSRES1",168,0)
 S BPSSEGMENT=$P($G(^BPSF(9002313.9,+BPSSEGMENT,0)),"^",2)
"RTN","BPSRES1",169,0)
 I BPSSEGMENT="" Q 0
"RTN","BPSRES1",170,0)
 I '$D(BPSSEGMENT(BPSSEGMENT)) Q 0
"RTN","BPSRES1",171,0)
 ;
"RTN","BPSRES1",172,0)
 ; There are many segments the VA does not send, even if that
"RTN","BPSRES1",173,0)
 ; segment is on a payer sheet.  Disallow any fields that are
"RTN","BPSRES1",174,0)
 ; on one of those segments.
"RTN","BPSRES1",175,0)
 ;
"RTN","BPSRES1",176,0)
 I ",140,170,200,210,220,230,240,250,260,270,280,290,300,"[(","_BPSSEGMENT_",") Q 0
"RTN","BPSRES1",177,0)
 ;
"RTN","BPSRES1",178,0)
 ; Disallow if Get Code is simply Setting BPS("X") to "".
"RTN","BPSRES1",179,0)
 ;
"RTN","BPSRES1",180,0)
 I $G(^BPSF(9002313.91,+BPSY,10,1,0))["S BPS(""X"")=""""" Q 0
"RTN","BPSRES1",181,0)
 ;
"RTN","BPSRES1",182,0)
 Q 1
"RTN","BPSRES1",183,0)
 ;
"RTN","BPSRES1",184,0)
SAVE(BPSACTION,BPS59,BPSADDLFLDS) ; Save into BPS NCPDP OVERRIDES (#9002313.511)
"RTN","BPSRES1",185,0)
 ;
"RTN","BPSRES1",186,0)
 ; If the user chooses to add any fields to the claim, each field
"RTN","BPSRES1",187,0)
 ; will be listed as BPSADDLFLDS(Field IEN).
"RTN","BPSRES1",188,0)
 ;
"RTN","BPSRES1",189,0)
 ; Input:  BPSACTION = Action selected by user (e.g. RED, PRO)
"RTN","BPSRES1",190,0)
 ;         BPS59 = Pointer to BPS TRANSACTIONS
"RTN","BPSRES1",191,0)
 ;         BPSADDLFLDS = Passed by reference, array listing the
"RTN","BPSRES1",192,0)
 ;            NCPDP fields to be added to the claim.
"RTN","BPSRES1",193,0)
 ;            BPSADDLFLDS(NCPDP Field) = ""
"RTN","BPSRES1",194,0)
 ;
"RTN","BPSRES1",195,0)
 ; BPOVRIEN is Newed in DOSELCTD^BPSRES and should not be Newed here.
"RTN","BPSRES1",196,0)
 ;
"RTN","BPSRES1",197,0)
 N BPSFDA,BPSFIELD,BPSMSG,BPSCNT,BPSFIELD
"RTN","BPSRES1",198,0)
 ;
"RTN","BPSRES1",199,0)
 S BPSFDA(9002313.511,"+1,",.01)=BPS59
"RTN","BPSRES1",200,0)
 D NOW^%DTC
"RTN","BPSRES1",201,0)
 S BPSFDA(9002313.511,"+1,",.02)=%
"RTN","BPSRES1",202,0)
 ;
"RTN","BPSRES1",203,0)
 ; Store the fields for which the user was prompted.
"RTN","BPSRES1",204,0)
 ;
"RTN","BPSRES1",205,0)
 S BPSCNT=1
"RTN","BPSRES1",206,0)
 I BPSACTION="RED" D
"RTN","BPSRES1",207,0)
 . S BPSFIELD=$O(^BPSF(9002313.91,"B",303,"")) I BPSFIELD]"" S BPSFDA(9002313.5111,"+2,+1,",.01)=BPSFIELD,BPSFDA(9002313.5111,"+2,+1,",.02)=BPPSNCD
"RTN","BPSRES1",208,0)
 . S BPSFIELD=$O(^BPSF(9002313.91,"B",306,"")) I BPSFIELD]"" S BPSFDA(9002313.5111,"+3,+1,",.01)=BPSFIELD,BPSFDA(9002313.5111,"+3,+1,",.02)=BPRELCD
"RTN","BPSRES1",209,0)
 . S BPSFIELD=$O(^BPSF(9002313.91,"B",462,"")) I BPSFIELD]"" S BPSFDA(9002313.5111,"+4,+1,",.01)=BPSFIELD,BPSFDA(9002313.5111,"+4,+1,",.02)=BPPREAUT
"RTN","BPSRES1",210,0)
 . S BPSFIELD=$O(^BPSF(9002313.91,"B",461,"")) I BPSFIELD]"" S BPSFDA(9002313.5111,"+5,+1,",.01)=BPSFIELD,BPSFDA(9002313.5111,"+5,+1,",.02)=BPPRETYP
"RTN","BPSRES1",211,0)
 . S BPSFIELD=$O(^BPSF(9002313.91,"B",420,"")) I BPSFIELD]"" S BPSFDA(9002313.5111,"+6,+1,",.01)=BPSFIELD,BPSFDA(9002313.5111,"+6,+1,",.02)=BPCLCD1_"~"_$G(BPCLCD2)_"~"_$G(BPCLCD3)
"RTN","BPSRES1",212,0)
 . S BPSFIELD=$O(^BPSF(9002313.91,"B",384,"")) I BPSFIELD]"" S BPSFDA(9002313.5111,"+7,+1,",.01)=BPSFIELD,BPSFDA(9002313.5111,"+7,+1,",.02)=BPPTRES
"RTN","BPSRES1",213,0)
 . S BPSFIELD=$O(^BPSF(9002313.91,"B",147,"")) I BPSFIELD]"" S BPSFDA(9002313.5111,"+8,+1,",.01)=BPSFIELD,BPSFDA(9002313.5111,"+8,+1,",.02)=BPPHSRV
"RTN","BPSRES1",214,0)
 . S BPSFIELD=$O(^BPSF(9002313.91,"B",357,"")) I BPSFIELD]"" S BPSFDA(9002313.5111,"+9,+1,",.01)=BPSFIELD,BPSFDA(9002313.5111,"+9,+1,",.02)=BPDLYRS
"RTN","BPSRES1",215,0)
 . S BPSCNT=9
"RTN","BPSRES1",216,0)
 . Q
"RTN","BPSRES1",217,0)
 ;
"RTN","BPSRES1",218,0)
 ; Store additional NCPDP fields which the user chose to add to the
"RTN","BPSRES1",219,0)
 ; the resubmitted claim.
"RTN","BPSRES1",220,0)
 ;
"RTN","BPSRES1",221,0)
 S BPSFIELD=0
"RTN","BPSRES1",222,0)
 F  S BPSFIELD=$O(BPSADDLFLDS(BPSFIELD)) Q:'BPSFIELD  D
"RTN","BPSRES1",223,0)
 . S BPSCNT=BPSCNT+1
"RTN","BPSRES1",224,0)
 . S BPSFDA(9002313.5112,"+"_BPSCNT_",+1,",.01)=BPSFIELD  ; Field#
"RTN","BPSRES1",225,0)
 . S BPSFDA(9002313.5112,"+"_BPSCNT_",+1,",.02)=$$GET1^DIQ(9002313.91,BPSFIELD,2,"I")  ; Segment#
"RTN","BPSRES1",226,0)
 . Q
"RTN","BPSRES1",227,0)
 ;
"RTN","BPSRES1",228,0)
 D UPDATE^DIE("","BPSFDA","BPOVRIEN","BPSMSG")
"RTN","BPSRES1",229,0)
 ;
"RTN","BPSRES1",230,0)
 I $D(BPSMSG("DIERR")) W !!,"Could Not Save Override information into BPS NCPDP OVERRIDES FILES",! Q -1
"RTN","BPSRES1",231,0)
 ;
"RTN","BPSRES1",232,0)
 Q 1
"RTN","BPSRES1",233,0)
 ;
"RTN","BPSRPT0")
0^3^B64877834
"RTN","BPSRPT0",1,0)
BPSRPT0 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT0",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,10,11,19,20,23**;JUN 2004;Build 44
"RTN","BPSRPT0",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT0",4,0)
 ;
"RTN","BPSRPT0",5,0)
 Q
"RTN","BPSRPT0",6,0)
 ;
"RTN","BPSRPT0",7,0)
 ; Front End for ECME Reports
"RTN","BPSRPT0",8,0)
 ; 
"RTN","BPSRPT0",9,0)
 ; Input variable: BPRTYPE -> 1 = Payable Claims
"RTN","BPSRPT0",10,0)
 ;                          2 = Rejected Claims
"RTN","BPSRPT0",11,0)
 ;                          3 = Claims Submitted, Not Yet Released
"RTN","BPSRPT0",12,0)
 ;                          4 = Reversed Claims
"RTN","BPSRPT0",13,0)
 ;                          5 = Recent Transactions
"RTN","BPSRPT0",14,0)
 ;                          6 = Totals By Date
"RTN","BPSRPT0",15,0)
 ;                          7 = Closed Claims
"RTN","BPSRPT0",16,0)
 ;                          8 = Spending Account Report
"RTN","BPSRPT0",17,0)
 ;                          9 = ECME RXs with Non-Billable Status
"RTN","BPSRPT0",18,0)
 ;                          
"RTN","BPSRPT0",19,0)
 ; Passed variables:
"RTN","BPSRPT0",20,0)
 ;  The following local variables are set in BPSPRT0 and are passed throughout
"RTN","BPSRPT0",21,0)
 ;  the BPSRPT* routines. They are used during the looping/filtering of transactions
"RTN","BPSRPT0",22,0)
 ;  and when creating the reports.
"RTN","BPSRPT0",23,0)
 ;  These local variable are not passed as parameters but assumed to be defined.
"RTN","BPSRPT0",24,0)
 ; 
"RTN","BPSRPT0",25,0)
 ;    BPRTYPE -  report number (1-9) 
"RTN","BPSRPT0",26,0)
 ;      1 = Payable Claims, 2 = Rejected Claims, 3 = Claims Submitted, Not Yet Released, 
"RTN","BPSRPT0",27,0)
 ;      4 = Reversed Claims, 5 = Recent Transactions, 6 = Totals By Date,
"RTN","BPSRPT0",28,0)
 ;      7 = Closed Claims, 8 = Spending Account Report, 9 = ECME RXs with Non-Billable Status
"RTN","BPSRPT0",29,0)
 ;    BPRPTNAM - report name 
"RTN","BPSRPT0",30,0)
 ;      1-PAYABLE CLAIMS, 2-REJECTED CLAIMS, 3-SUBMIT,NOT RELEASED CLAIMS,
"RTN","BPSRPT0",31,0)
 ;      4-REVERSED CLAIMS, 5-RECENT TRANSACTIONS, 6-TOTALS, 7-CLOSED CLAIMS,
"RTN","BPSRPT0",32,0)
 ;      8-SPENDING ACCOUNT REPORT, 9-RXS WITH NON-BILLABLE STATUS
"RTN","BPSRPT0",33,0)
 ;    BPSLC - all lower case letters (used to convert from lower to upper)
"RTN","BPSRPT0",34,0)
 ;    BPSUC - all upper case letters (used to convert from lower to upper)
"RTN","BPSRPT0",35,0)
 ;    BPPHARM - Pharmacy Divisions or ALL
"RTN","BPSRPT0",36,0)
 ;      BPPHARM=0 - ALL
"RTN","BPSRPT0",37,0)
 ;        if Pharmacy Divisions was selected, returns BPPHARM variable and an array
"RTN","BPSRPT0",38,0)
 ;      BPPHARM=1
"RTN","BPSRPT0",39,0)
 ;      BPPHARM(ptr) for each selection - Pointer to BPS PHARMACIES 
"RTN","BPSRPT0",40,0)
 ;    BPSUMDET - 1=Display Summary  or 0=Detail Format 
"RTN","BPSRPT0",41,0)
 ;    BPINS - allow selection of Insurance or ALL, returns BPINS variable and BPARR array
"RTN","BPSRPT0",42,0)
 ;      0="^" Exit
"RTN","BPSRPT0",43,0)
 ;      1=if ALL - BPARR(1.11)="A",BPARR(2.04)="",BPARR("INS")=""
"RTN","BPSRPT0",44,0)
 ;      1=if INSURANCE
"RTN","BPSRPT0",45,0)
 ;        BPARR(1.11)="I",
"RTN","BPSRPT0",46,0)
 ;        BPARR(2.04)=";1;ptr;"   if multiple entries - BPARR(2.04)=";ptr;ptr;."
"RTN","BPSRPT0",47,0)
 ;        BPARR("INS")=";1;ptr;"  if multiple entries - BPARR("INS")=";ptr;ptr;."
"RTN","BPSRPT0",48,0)
 ;      ptr - Pointer to the INSURANCE file
"RTN","BPSRPT0",49,0)
 ;    BPINSINF - BPINSINF=0 - if ALL Insurances was selected above
"RTN","BPSRPT0",50,0)
 ;      BPINSINF=BPARR("INS") 
"RTN","BPSRPT0",51,0)
 ;    BPMWC - Fill location C-CMOP, W-WINDOW, M-MAIL
"RTN","BPSRPT0",52,0)
 ;      BPMWC=A-ALL, ^-Exit
"RTN","BPSRPT0",53,0)
 ;      BPMWC=(C,W,M)
"RTN","BPSRPT0",54,0)
 ;       if multiple entries - BPMWC=(a comma delimited string of users selection, e.g. "C,M")
"RTN","BPSRPT0",55,0)
 ;    BPRTBCK - Fill Type - 2-RealTime Fills, 3-Backbills, 4-PRO Option, 5-Resubmission
"RTN","BPSRPT0",56,0)
 ;      BPRTBCK=1-ALL,^-exit
"RTN","BPSRPT0",57,0)
 ;      BPRTBCK=(2,3,4,5)
"RTN","BPSRPT0",58,0)
 ;       if multiple entries - BPRTBCK=(a comma delimited string of users selection, e.g. "3,5")
"RTN","BPSRPT0",59,0)
 ;    BPQSTDRG - Drug-2 or Drug Class-3 or All-1 or Exit-^
"RTN","BPSRPT0",60,0)
 ;      BPQSTDRG=(1,2,3,^)
"RTN","BPSRPT0",61,0)
 ;    BPDRUG - select Drug - ptr=Pointer to the DRUG file #50
"RTN","BPSRPT0",62,0)
 ;      BPDRUG= ptr - if multiple entries - BPDRUG="ptr,ptr,."
"RTN","BPSRPT0",63,0)
 ;    BPDRGCL - select Drug - ptr= Pointer to the DRUG CLASS file #50.5
"RTN","BPSRPT0",64,0)
 ;      BPDRGCL= ptr - if multiple entries - BPDRGCL= ptr,ptr,.
"RTN","BPSRPT0",65,0)
 ;    BPBEGDT - Date Range
"RTN","BPSRPT0",66,0)
 ;      BPBEGDT=^-Exit
"RTN","BPSRPT0",67,0)
 ;      BPBEGDT= beginning date ^ ending date
"RTN","BPSRPT0",68,0)
 ;      BPBEGDT=$P(BPBEGDT,U) - beginning date
"RTN","BPSRPT0",69,0)
 ;      BPENDDT=$P(BPBEGDT,U,2) - ending date
"RTN","BPSRPT0",70,0)
 ;    BPRLNRL - 2-Released, 3-Not Released or 1-All
"RTN","BPSRPT0",71,0)
 ;      BPRLNRL=(1,2,3,^) ^=exit
"RTN","BPSRPT0",72,0)
 ;    BPREJCD - Specific Reject Code or All
"RTN","BPSRPT0",73,0)
 ;      BPREJCD=0-ALL, ^-Exit
"RTN","BPSRPT0",74,0)
 ;      BPREJCD=ptr - if multiple entries - BPREJCD=ptr,ptr,.
"RTN","BPSRPT0",75,0)
 ;       ptr=Pointer to Reject Code in #9002313.93
"RTN","BPSRPT0",76,0)
 ;    BPAUTREV - AutoReversed-1 or All-0
"RTN","BPSRPT0",77,0)
 ;      BPAUTREV=(0,1,^)
"RTN","BPSRPT0",78,0)
 ;    BPACREJ - Accepted-2, Rejected-1 or All-0
"RTN","BPSRPT0",79,0)
 ;      BPACREJ=(0,1,2,^)
"RTN","BPSRPT0",80,0)
 ;    BPCCRSN - Specific Close Claim Reason-ptr or All-0
"RTN","BPSRPT0",81,0)
 ;      BPCCRSN=(0,ptr) - ptr=Pointer to #356.8
"RTN","BPSRPT0",82,0)
 ;    BPELIG - Eligibility V-Veteran, T-Tricare, C-Champva or 0-All
"RTN","BPSRPT0",83,0)
 ;      BPELIG=(V,T,C,0,^)
"RTN","BPSRPT0",84,0)
 ;    BPELIG1 - multiple Eligibilities or All-0 
"RTN","BPSRPT0",85,0)
 ;      BPELIG1=(0,^)
"RTN","BPSRPT0",86,0)
 ;      BPELIG1=(V,T,C)   V-Veteran, T-Tricare, C-Champva
"RTN","BPSRPT0",87,0)
 ;       if multiple entries BPELIG1=(a comma delimited string of users selection, e.g. "C,T")
"RTN","BPSRPT0",88,0)
 ;    BPOPCL - Open-2, Closed-1 or All-0
"RTN","BPSRPT0",89,0)
 ;      BPOPCL=(0,1,2,^)
"RTN","BPSRPT0",90,0)
 ;    BPRESC - Selected Prescriber-ptr or All-0 - ptr=Pointer to file #200
"RTN","BPSRPT0",91,0)
 ;      BPRESC=(0,^)
"RTN","BPSRPT0",92,0)
 ;      BPRESC=ptr - if multiple entries - BPRESC=ptr,ptr,.
"RTN","BPSRPT0",93,0)
 ;    BPQSTPAT - select Patients-1 or All-0
"RTN","BPSRPT0",94,0)
 ;      BPQSTPAT=(0,1,^)
"RTN","BPSRPT0",95,0)
 ;    BPPAT - if Patients=1 was selected above
"RTN","BPSRPT0",96,0)
 ;      BPPAT=ptr - if multiple entries - BPPAT=ptr,ptr  ptr=Pointer to file #2
"RTN","BPSRPT0",97,0)
 ;    BPBILL - Range of Billed Amount-1 or All-0
"RTN","BPSRPT0",98,0)
 ;      BPBILL=(0,1,^) 
"RTN","BPSRPT0",99,0)
 ;    BPMIN - if BPBILL=1 enter minimum billed amount
"RTN","BPSRPT0",100,0)
 ;      BPMIN=amount entered, default is 0
"RTN","BPSRPT0",101,0)
 ;    BPMAX - if BPBILL=1 enter maximum billed amount
"RTN","BPSRPT0",102,0)
 ;      BPMAX=amount entered, default is 999999
"RTN","BPSRPT0",103,0)
 ;    BPALRC - All-A or Most Recent-R (Non-Billable Status report only, BPRTYPE=9)
"RTN","BPSRPT0",104,0)
 ;      BPALRC=(A,R,^)
"RTN","BPSRPT0",105,0)
 ;    BPNBSTS - Non-Billable Status (Non-Billable Status report only, BPRTYPE=9)
"RTN","BPSRPT0",106,0)
 ;      BPNBSTS=(0-All,1-certain Non-billable status,^)
"RTN","BPSRPT0",107,0)
 ;       if BPNBSTS=1 there is a BPNBSTS array for each status selected
"RTN","BPSRPT0",108,0)
 ;      BPNBSTS(ptr)=status  - for each status selected
"RTN","BPSRPT0",109,0)
 ;       ptr=Pointer to file #366.17 - status=non-billable reason from file #366.17 field #.01
"RTN","BPSRPT0",110,0)
 ;    BPEXCEL - Excel capture-detail only, if BPSUMDET=0 (detail format)
"RTN","BPSRPT0",111,0)
 ;      BPEXCEL=(0-No, 1-Yes, ^)
"RTN","BPSRPT0",112,0)
 ;    BPQ - device variable - I POP S BPQ=1 otherwise BPQ=0
"RTN","BPSRPT0",113,0)
 ;
"RTN","BPSRPT0",114,0)
 ; The following local variables are not set in BPSRPT0 however they are used in several
"RTN","BPSRPT0",115,0)
 ; BPSRPT* routines.  They are not passed as parameters but assumed to be defined.
"RTN","BPSRPT0",116,0)
 ;    BPBLINE - blank line indicator, 1-print blank line
"RTN","BPSRPT0",117,0)
 ;    BPGRPLAN - insurance plan name
"RTN","BPSRPT0",118,0)
 ;    BPSDATA - tells whether data has been displayed to the screen (0-No,1-Yes)
"RTN","BPSRPT0",119,0)
 ;                          
"RTN","BPSRPT0",120,0)
EN(BPRTYPE) N %,BPACREJ,BPAUTREV,BPBEGDT,BPCCRSN,BPDRGCL,BPDRUG,BPENDDT,BPEXCEL,BPNOW,BPPHARM,BPINSINF,BPMWC,BPQ,BPQSTDRG
"RTN","BPSRPT0",121,0)
 N BPREJCD,BPRLNRL,BPRPTNAM,BPRTBCK,BPSCR,BPSUMDET,CODE,POS,STAT,X,Y,BPINS,BPARR,BPELIG,BPOPCL
"RTN","BPSRPT0",122,0)
 N BPNBSTS,BPALRC,BPELIG1,BPRESC,BPPAT,BPQSTPAT,BPBILL,BPMIN,BPMAX,BPSLC,BPSUC
"RTN","BPSRPT0",123,0)
 ;
"RTN","BPSRPT0",124,0)
 ;Verify that a valid report has been requested
"RTN","BPSRPT0",125,0)
 I ",1,2,3,4,5,6,7,8,9,"'[(","_$G(BPRTYPE)_",") W "<Invalid Menu Definition - Report Undefined>" H 3 Q
"RTN","BPSRPT0",126,0)
 S BPRPTNAM=$P("PAYABLE CLAIMS^REJECTED CLAIMS^SUBMIT,NOT RELEASED CLAIMS^REVERSED CLAIMS^RECENT TRANSACTIONS^TOTALS^CLOSED CLAIMS^SPENDING ACCOUNT REPORT^RXS WITH NON-BILLABLE STATUS","^",BPRTYPE)
"RTN","BPSRPT0",127,0)
 ;
"RTN","BPSRPT0",128,0)
 ;Needed to convert lower case entries to upper case
"RTN","BPSRPT0",129,0)
 S BPSLC="abcdefghijklmnopqrstuvwxyz"
"RTN","BPSRPT0",130,0)
 S BPSUC="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
"RTN","BPSRPT0",131,0)
 ;
"RTN","BPSRPT0",132,0)
 ;Get current Date/Time
"RTN","BPSRPT0",133,0)
 D NOW^%DTC S Y=% D DD^%DT S BPNOW=Y
"RTN","BPSRPT0",134,0)
 ;
"RTN","BPSRPT0",135,0)
 ;Prompt for ECME Pharmacy Division(s) (No Default)
"RTN","BPSRPT0",136,0)
 ;Sets up BPPHARM variable and array, BPPHARM =0 ALL or BPPHARM=1,BPPHARM(ptr) for list
"RTN","BPSRPT0",137,0)
 S X=$$SELPHARM^BPSRPT3() I X="^" G EXIT
"RTN","BPSRPT0",138,0)
 ;
"RTN","BPSRPT0",139,0)
 ;Prompt to Display Summary or Detail Format (Default to Detail)
"RTN","BPSRPT0",140,0)
 ;Returns 1 for Summary, 0 for Detail
"RTN","BPSRPT0",141,0)
 S BPSUMDET=$$SELSMDET^BPSRPT3(2) I BPSUMDET="^" G EXIT
"RTN","BPSRPT0",142,0)
 ;
"RTN","BPSRPT0",143,0)
 ;Prompt to allow selection of Multiple Insurances or All (Default to ALL)
"RTN","BPSRPT0",144,0)
 ;See description for $$INSURSEL^BPSSCRCU
"RTN","BPSRPT0",145,0)
 S BPINS=$$INSURSEL^BPSSCRCU(.BPARR,DUZ) I BPINS<1 G EXIT
"RTN","BPSRPT0",146,0)
 S BPINSINF=$S(BPARR(1.11)="I":BPARR("INS"),1:0)
"RTN","BPSRPT0",147,0)
 ;If Multiple Insurances was selected "I" and the the user entered "^" or
"RTN","BPSRPT0",148,0)
 ;the user hit return therefore not selecting a Insurance return to the menu
"RTN","BPSRPT0",149,0)
 I BPINSINF=";" G EXIT
"RTN","BPSRPT0",150,0)
 ;
"RTN","BPSRPT0",151,0)
 ;Prompt to Display (C)MOP or (M)ail or (W)indow or (A)LL (Default to ALL)
"RTN","BPSRPT0",152,0)
 ;Returns (A-ALL,M-Mail,W-Window,C-CMOP)
"RTN","BPSRPT0",153,0)
 I (",2,")'[BPRTYPE S BPMWC=$$SELMWC^BPSRPT3("A") I BPMWC="^" G EXIT
"RTN","BPSRPT0",154,0)
 I (",2,")[BPRTYPE S BPMWC=$$SELMWC1^BPSRPT3("A") I BPMWC="^" G EXIT
"RTN","BPSRPT0",155,0)
 ;
"RTN","BPSRPT0",156,0)
 ;Prompt to Display (R)ealTime Fills or (B)ackbills or (P)RO Option or Re(S)ubmission or (A)LL (Default to ALL)
"RTN","BPSRPT0",157,0)
 ;Returns (1-ALL,2-RealTime Fills,3-Backbills,4-PRO Option,5-Resubmission)
"RTN","BPSRPT0",158,0)
 S BPRTBCK=1
"RTN","BPSRPT0",159,0)
 I (",2,9,")'[BPRTYPE S BPRTBCK=$$SELRTBCK^BPSRPT3(1) I BPRTBCK="^" G EXIT
"RTN","BPSRPT0",160,0)
 I (",2,9,")[BPRTYPE S BPRTBCK=$$SELRBPS^BPSRPT3() I BPRTBCK="^" G EXIT
"RTN","BPSRPT0",161,0)
 ;
"RTN","BPSRPT0",162,0)
 ;Prompt to Display Specific (D)rug or Drug (C)lass or (A)ll (Default to ALL)
"RTN","BPSRPT0",163,0)
 ;Returns (1-ALL,2-Drug,3-Drug Class)
"RTN","BPSRPT0",164,0)
 S BPQSTDRG=$$SELDRGAL^BPSRPT3(1) I BPQSTDRG="^" Q
"RTN","BPSRPT0",165,0)
 ;
"RTN","BPSRPT0",166,0)
 ;Prompt to Select Drug (No Default)
"RTN","BPSRPT0",167,0)
 S BPDRUG=0 I BPQSTDRG=2 D  I BPDRUG="^" G EXIT
"RTN","BPSRPT0",168,0)
 . I (",2,")'[BPRTYPE S BPDRUG=$$SELDRG^BPSRPT3()
"RTN","BPSRPT0",169,0)
 . I (",2,")[BPRTYPE S BPDRUG=$$SELDRG1^BPSRPT3A()
"RTN","BPSRPT0",170,0)
 ;
"RTN","BPSRPT0",171,0)
 ;Prompt to Select Drug Class (No Default)
"RTN","BPSRPT0",172,0)
 S BPDRGCL=0 I BPQSTDRG=3 D  I BPDRGCL="^" G EXIT
"RTN","BPSRPT0",173,0)
 . I (",2,")'[BPRTYPE S BPDRGCL=$$SELDRGCL^BPSRPT3()
"RTN","BPSRPT0",174,0)
 . I (",2,")[BPRTYPE S BPDRGCL=$$SELDC^BPSRPT3A()
"RTN","BPSRPT0",175,0)
 ;
"RTN","BPSRPT0",176,0)
 ;Report Specific Prompts
"RTN","BPSRPT0",177,0)
 ;
"RTN","BPSRPT0",178,0)
 ;Prompt to select Date Range
"RTN","BPSRPT0",179,0)
 ;Returns (Start Date^End Date)
"RTN","BPSRPT0",180,0)
 I (",1,2,3,4,5,6,7,8,9,")[BPRTYPE S BPBEGDT=$$SELDATE^BPSRPT3(BPRTYPE) D  I BPBEGDT="^" G EXIT
"RTN","BPSRPT0",181,0)
 .I BPBEGDT="^" Q
"RTN","BPSRPT0",182,0)
 .S BPENDDT=$P(BPBEGDT,U,2)
"RTN","BPSRPT0",183,0)
 .S BPBEGDT=$P(BPBEGDT,U)
"RTN","BPSRPT0",184,0)
 ;
"RTN","BPSRPT0",185,0)
 ;Prompt to Include (R)ELEASED or (N)OT RELEASED or (A)LL (Default to RELEASED)
"RTN","BPSRPT0",186,0)
 ;Returns (1-ALL,2-RELEASED,3-NOT RELEASED)
"RTN","BPSRPT0",187,0)
 S BPRLNRL=$S(BPRTYPE=3:3,1:1) I (",1,2,4,6,7,8,9,")[BPRTYPE S BPRLNRL=$$SELRLNRL^BPSRPT4($S(BPRTYPE=9:1,1:2)) I BPRLNRL="^" G EXIT
"RTN","BPSRPT0",188,0)
 ;
"RTN","BPSRPT0",189,0)
 ;Prompt to Include (S)pecific Reject Code or (A)LL (Default to ALL)
"RTN","BPSRPT0",190,0)
 ;Returns: 0=ALL
"RTN","BPSRPT0",191,0)
 ;         ^=if user entered "^"
"RTN","BPSRPT0",192,0)
 ;       ptr=string of ptr's delimited with a comma e.g. BPREJCD="95,100,"
"RTN","BPSRPT0",193,0)
 ;        (ptr is the Pointer to the Selected Reject Code in #9002313.93)
"RTN","BPSRPT0",194,0)
 S BPREJCD=0 I (",2,")[BPRTYPE S BPREJCD=$$SELREJCD^BPSRPT4() I BPREJCD="^" G EXIT
"RTN","BPSRPT0",195,0)
 ;
"RTN","BPSRPT0",196,0)
 ;Prompt to Include Auto(R)eversed or (A)LL (Default to ALL)
"RTN","BPSRPT0",197,0)
 ;Returns (0-All,1-AutoReversed)
"RTN","BPSRPT0",198,0)
 S BPAUTREV=0 I (",4,")[BPRTYPE S BPAUTREV=$$SELAUREV^BPSRPT4(0) I BPAUTREV="^" G EXIT
"RTN","BPSRPT0",199,0)
 ;
"RTN","BPSRPT0",200,0)
 ;Prompt to Include A(C)cepted or (R)ejected or (A)LL (Default to REJECTED)
"RTN","BPSRPT0",201,0)
 ;Returns (0-All,1-Rejected,2-Accepted)
"RTN","BPSRPT0",202,0)
 S BPACREJ=0 I (",4,")[BPRTYPE S BPACREJ=$$SELACREJ^BPSRPT4(1) I BPACREJ="^" G EXIT
"RTN","BPSRPT0",203,0)
 ;
"RTN","BPSRPT0",204,0)
 ;Prompt to Include (S)pecific Close Claim Reason or (A)ll (Default to All)
"RTN","BPSRPT0",205,0)
 ;Returns (0-All,ptr-Pointer to #356.8)
"RTN","BPSRPT0",206,0)
 S BPCCRSN=0 I (",7,")[BPRTYPE S BPCCRSN=$$SELCCRSN^BPSRPT4(0) I BPCCRSN="^" G EXIT
"RTN","BPSRPT0",207,0)
 ;
"RTN","BPSRPT0",208,0)
 ;Prompt for Eligibility Indicator for payable, rejected, reversed and closed claims report
"RTN","BPSRPT0",209,0)
 ;Returns (V=VETERAN,T=TRICARE,C=CHAMPVA,0=All)
"RTN","BPSRPT0",210,0)
 S BPELIG=0 I (",1,4,7,")[BPRTYPE S BPELIG=$$SELELIG^BPSRPT3(1) I BPELIG="^" G EXIT
"RTN","BPSRPT0",211,0)
 ;
"RTN","BPSRPT0",212,0)
 ;Prompt for All or Most Recent (Non-Billable Status Report only)
"RTN","BPSRPT0",213,0)
 ;Returns A - All, R - Most Recent
"RTN","BPSRPT0",214,0)
 S BPALRC=0 I (",9,")[BPRTYPE S BPALRC=$$SELALRC^BPSRPT3() I BPALRC="^" G EXIT
"RTN","BPSRPT0",215,0)
 ;
"RTN","BPSRPT0",216,0)
 ;Prompt for multiple Eligibility Indicator for Non-Billable Status and Rejected Claims Report
"RTN","BPSRPT0",217,0)
 ;Sets up BPELIG1 variable, returns 0 if (A)ll was selected or 1. If BPELIG1=1 then the array
"RTN","BPSRPT0",218,0)
 ; BPARR("ELIG") is set, BPARR("ELIG",xx) for each eligibility selected - xx="V", "T" or "C"
"RTN","BPSRPT0",219,0)
 S BPELIG1=0 I (",2,9,")[BPRTYPE S BPELIG1=$$SELELIG1^BPSRPT3() I BPELIG1="^" G EXIT
"RTN","BPSRPT0",220,0)
 ;
"RTN","BPSRPT0",221,0)
 ;Prompt for Open/Closed/All claims
"RTN","BPSRPT0",222,0)
 ;Returns (1=Closed,2=Open,0=All)
"RTN","BPSRPT0",223,0)
 S BPOPCL=0 I (",2,")[BPRTYPE S BPOPCL=$$SELOPCL^BPSRPT3(2) I BPOPCL="^" G EXIT
"RTN","BPSRPT0",224,0)
 ;
"RTN","BPSRPT0",225,0)
 ;Prompt to select SPECIFIC PRESCRIBER(S) or (A)ll Prescribers
"RTN","BPSRPT0",226,0)
 ;Returns: 0=ALL,^=exit
"RTN","BPSRPT0",227,0)
 ;if Specific Prescriber was selected
"RTN","BPSRPT0",228,0)
 ;Returns: BPRESC=a string of prescriber ien's separated by a comma
"RTN","BPSRPT0",229,0)
 S BPRESC=0 I (",2,")[BPRTYPE S BPRESC=$$SELPRESC^BPSRPT3A() I BPRESC="^" G EXIT
"RTN","BPSRPT0",230,0)
 ;   
"RTN","BPSRPT0",231,0)
 ;Prompt to select (P)atients or (A)LL Patients
"RTN","BPSRPT0",232,0)
 ;Returns: (0=ALL,1=Patient,^=exit)
"RTN","BPSRPT0",233,0)
 S BPQSTPAT=0 I (",2,")[BPRTYPE S BPQSTPAT=$$SELPA^BPSRPT3A() I BPQSTPAT="^" G EXIT
"RTN","BPSRPT0",234,0)
 ;
"RTN","BPSRPT0",235,0)
 ;If (P)atients was selected, prompt for one or more patients
"RTN","BPSRPT0",236,0)
 ;Returns: BPPAT=a string of patient ien's separated by a comma
"RTN","BPSRPT0",237,0)
 I BPQSTPAT=1 S BPPAT=$$SELPAT^BPSRPT3A() I BPPAT="^" G EXIT
"RTN","BPSRPT0",238,0)
 ;
"RTN","BPSRPT0",239,0)
 ;Prompt to select(R)ange for Billed Amount or (A)LL
"RTN","BPSRPT0",240,0)
 ;Returns: (0=ALL,1=Range,^=exit)
"RTN","BPSRPT0",241,0)
 S BPBILL=0 I (",2,")[BPRTYPE S BPBILL=$$SELBAMT^BPSRPT3A() I BPBILL="^" G EXIT
"RTN","BPSRPT0",242,0)
 ;If Range of Billed Amount was selected prompt for Minimum and Maximum
"RTN","BPSRPT0",243,0)
 ;Returns: BPMIN=minimum amount entered, BPMAX=maximum amount entered
"RTN","BPSRPT0",244,0)
 S (BPMIN,BPMAX)=0
"RTN","BPSRPT0",245,0)
 I BPBILL=1 W !,"Range for Billed Amount" D  I (BPMIN="^")!(BPMAX="^") G EXIT
"RTN","BPSRPT0",246,0)
 . S BPMIN=$$SELBMIN^BPSRPT3A() I BPMIN="^" Q
"RTN","BPSRPT0",247,0)
 . S BPMAX=$$SELBMAX^BPSRPT3A()
"RTN","BPSRPT0",248,0)
 ;
"RTN","BPSRPT0",249,0)
 ;Prompt for Non-Billable Status (Non-Billable Status Report only)
"RTN","BPSRPT0",250,0)
 ;Sets up BPNBSTS variable and array, BPNBSTS=0 ALL or BPNBSTS=1,BPNBSTS(xx) for list
"RTN","BPSRPT0",251,0)
 S BPNBSTS=0 I (",9,")[BPRTYPE S BPNBSTS=$$SELNBSTS^BPSRPT3() I BPNBSTS="^" G EXIT
"RTN","BPSRPT0",252,0)
 ;
"RTN","BPSRPT0",253,0)
 ;Prompt for Excel Capture (Detail Only)
"RTN","BPSRPT0",254,0)
 S BPEXCEL=0 I 'BPSUMDET S BPEXCEL=$$SELEXCEL^BPSRPT4() I BPEXCEL="^" G EXIT
"RTN","BPSRPT0",255,0)
 ;
"RTN","BPSRPT0",256,0)
 ;Prompt for the Device
"RTN","BPSRPT0",257,0)
 I 'BPEXCEL D
"RTN","BPSRPT0",258,0)
 .W !!,"WARNING - THIS REPORT REQUIRES THAT A DEVICE WITH 132 COLUMN WIDTH BE USED."
"RTN","BPSRPT0",259,0)
 .W !,"IT WILL NOT DISPLAY CORRECTLY USING 80 COLUMN WIDTH DEVICES",!
"RTN","BPSRPT0",260,0)
 S BPQ=0 D DEVICE(BPRPTNAM) Q:BPQ
"RTN","BPSRPT0",261,0)
 ;
"RTN","BPSRPT0",262,0)
 ;Compile and Run the Report
"RTN","BPSRPT0",263,0)
 D RUN(BPEXCEL,BPRPTNAM,BPSUMDET)
"RTN","BPSRPT0",264,0)
 I 'BPQ D PAUSE2^BPSRPT1
"RTN","BPSRPT0",265,0)
 ;
"RTN","BPSRPT0",266,0)
EXIT Q
"RTN","BPSRPT0",267,0)
 ;
"RTN","BPSRPT0",268,0)
 ;Compile and Run the Report
"RTN","BPSRPT0",269,0)
 ;
"RTN","BPSRPT0",270,0)
RUN(BPEXCEL,BPRPTNAM,BPSUMDET) N BPPAGE,BPTMP
"RTN","BPSRPT0",271,0)
 S BPTMP=$NA(^TMP($J,"BPSRPT"))
"RTN","BPSRPT0",272,0)
 K @BPTMP
"RTN","BPSRPT0",273,0)
 S BPPAGE=0
"RTN","BPSRPT0",274,0)
 W:BPSCR&'BPEXCEL !,"Please wait...",!
"RTN","BPSRPT0",275,0)
 ;
"RTN","BPSRPT0",276,0)
 ;Compile the report
"RTN","BPSRPT0",277,0)
 Q:$$COLLECT^BPSRPT1(BPTMP)=-1
"RTN","BPSRPT0",278,0)
 U IO
"RTN","BPSRPT0",279,0)
 ;
"RTN","BPSRPT0",280,0)
 ;Display the report
"RTN","BPSRPT0",281,0)
 D REPORT^BPSRPT5(BPTMP,BPEXCEL,BPSCR,BPRPTNAM,BPSUMDET,BPPAGE)
"RTN","BPSRPT0",282,0)
 I 'BPSCR W !,@IOF
"RTN","BPSRPT0",283,0)
 K @BPTMP
"RTN","BPSRPT0",284,0)
 I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","BPSRPT0",285,0)
 D ^%ZISC
"RTN","BPSRPT0",286,0)
 Q
"RTN","BPSRPT0",287,0)
 ;
"RTN","BPSRPT0",288,0)
 ;Prompt For the Device
"RTN","BPSRPT0",289,0)
 ;
"RTN","BPSRPT0",290,0)
 ; Returns Device variables and BPSCR
"RTN","BPSRPT0",291,0)
 ;
"RTN","BPSRPT0",292,0)
DEVICE(BPRPTNAM) N %ZIS,ZTSK,ZTRTN,ZTIO,ZTDESC,ZTSAVE,POP
"RTN","BPSRPT0",293,0)
 S %ZIS="QM"
"RTN","BPSRPT0",294,0)
 D ^%ZIS
"RTN","BPSRPT0",295,0)
 I POP S BPQ=1
"RTN","BPSRPT0",296,0)
 ;
"RTN","BPSRPT0",297,0)
 ;Check for exit
"RTN","BPSRPT0",298,0)
 I $G(BPQ) G XDEV
"RTN","BPSRPT0",299,0)
 ;
"RTN","BPSRPT0",300,0)
 S BPSCR=$S($E($G(IOST),1,2)="C-":1,1:0)
"RTN","BPSRPT0",301,0)
 I $D(IO("Q")) D  S BPQ=1
"RTN","BPSRPT0",302,0)
 . S ZTRTN="RUN^BPSRPT0(BPEXCEL,BPRPTNAM,BPSUMDET)"
"RTN","BPSRPT0",303,0)
 . S ZTIO=ION
"RTN","BPSRPT0",304,0)
 . S ZTSAVE("*")=""
"RTN","BPSRPT0",305,0)
 . S ZTDESC="BPS REPORT: "_BPRPTNAM
"RTN","BPSRPT0",306,0)
 . D ^%ZTLOAD
"RTN","BPSRPT0",307,0)
 . W !,$S($D(ZTSK):"REQUEST QUEUED TASK="_ZTSK,1:"REQUEST CANCELLED")
"RTN","BPSRPT0",308,0)
 . D HOME^%ZIS
"RTN","BPSRPT0",309,0)
 U IO
"RTN","BPSRPT0",310,0)
XDEV Q
"RTN","BPSRPT1")
0^4^B82481306
"RTN","BPSRPT1",1,0)
BPSRPT1 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,10,11,19,20,23**;JUN 2004;Build 44
"RTN","BPSRPT1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT1",4,0)
 ;
"RTN","BPSRPT1",5,0)
 ; Reference to COLLECT^IBNCPEV3 supported by ICR 6131
"RTN","BPSRPT1",6,0)
 ;
"RTN","BPSRPT1",7,0)
 Q
"RTN","BPSRPT1",8,0)
 ;
"RTN","BPSRPT1",9,0)
 ; ECME Report Compile Routine - Looping/Filtering Routine
"RTN","BPSRPT1",10,0)
 ;
"RTN","BPSRPT1",11,0)
 ;  Input Variables:
"RTN","BPSRPT1",12,0)
 ;               BPRTYPE - Type of Report (1-9)
"RTN","BPSRPT1",13,0)
 ;               BPGLTMP - Temporary storage global
"RTN","BPSRPT1",14,0)
 ;  BPPHARM/BPPHARM(ptr) - Set to 0 for all pharmacies, if set to 1 array
"RTN","BPSRPT1",15,0)
 ;                         of internal pointers of selected pharmacies
"RTN","BPSRPT1",16,0)
 ;              BPSUMDET - (1) Summary or (0) Detail format
"RTN","BPSRPT1",17,0)
 ;              BPINSINF - Set to 0 for all insurances or list of file 36 IENs
"RTN","BPSRPT1",18,0)
 ;                 BPMWC - A-ALL,M-Mail,W-Window,C-CMOP Prescriptions
"RTN","BPSRPT1",19,0)
 ;               BPRTBCK - 1-ALL,2-RealTime,3-Backbill Claim Submission,4-PRO Option,5-Resubmission
"RTN","BPSRPT1",20,0)
 ;               BPRLNRL - 1-ALL,2-RELEASED,3-NOT RELEASED
"RTN","BPSRPT1",21,0)
 ;                BPDRUG - DRUG to report on (ptr to #50)
"RTN","BPSRPT1",22,0)
 ;               BPDRGCL - DRUG CLASS to report on (0 for ALL)
"RTN","BPSRPT1",23,0)
 ;               BPBEGDT - Beginning Date
"RTN","BPSRPT1",24,0)
 ;               BPENDDT - Ending Date
"RTN","BPSRPT1",25,0)
 ;               BPCCRSN - Set to 0 for all closed claim reasons or ptr to #356.8
"RTN","BPSRPT1",26,0)
 ;              BPAUTREV - 0-ALL,1-Auto Reversed
"RTN","BPSRPT1",27,0)
 ;               BPACREJ - 0-ALL,1-REJECTED,2-ACCEPTED
"RTN","BPSRPT1",28,0)
 ;               BPNBSTS - Non-Billable Status
"RTN","BPSRPT1",29,0)
 ;    BPELIG1/BPELIG1(x) - Array of multiple eligibilities
"RTN","BPSRPT1",30,0)
 ;                BPALRC - A-All or R:Most recent
"RTN","BPSRPT1",31,0)
 ;              
"RTN","BPSRPT1",32,0)
COLLECT(BPGLTMP) N BP02,BP57,BP59,BPENDDT1,BPLDT02,BPLDT57,X,Y,OK,BPIX
"RTN","BPSRPT1",33,0)
 ;
"RTN","BPSRPT1",34,0)
 ;Check Variables
"RTN","BPSRPT1",35,0)
 S OK=1
"RTN","BPSRPT1",36,0)
 S:'$G(BPBEGDT) BPBEGDT=0
"RTN","BPSRPT1",37,0)
 S:'$G(BPENDDT) BPENDDT=9999999
"RTN","BPSRPT1",38,0)
 S BPENDDT=BPENDDT+0.9
"RTN","BPSRPT1",39,0)
 I $G(BPRTYPE)=""!($G(BPGLTMP)="")!($G(BPPHARM)="")!($G(BPSUMDET)="")!($G(BPINSINF)="")!($G(BPMWC)="")!($G(BPRTBCK)="") S OK=-1 G EXIT
"RTN","BPSRPT1",40,0)
 ;
"RTN","BPSRPT1",41,0)
 ; For the Non-Billable Status report, we need to loop through the IB NCPDP EVENT LOG instead 
"RTN","BPSRPT1",42,0)
 ;   of BPS Claim/BPS Transaction data
"RTN","BPSRPT1",43,0)
 I BPRTYPE=9 Q $$COLLECT^IBNCPEV3(BPBEGDT,BPENDDT,BPMWC,BPRLNRL,BPDRUG,BPDRGCL,BPALRC,.BPPHARM,.BPINSINF,.BPNBSTS,.BPELIG1,BPGLTMP)
"RTN","BPSRPT1",44,0)
 ;
"RTN","BPSRPT1",45,0)
 ;Loop through BPS CLAIMS
"RTN","BPSRPT1",46,0)
 ;
"RTN","BPSRPT1",47,0)
 ;First look for fill/refill cross reference
"RTN","BPSRPT1",48,0)
 ;Loop through Date of Service Index in BPS CLAIMS file and find link to 
"RTN","BPSRPT1",49,0)
 ;claim in BPS TRANSACTION.  Process earliest Date of Service entry found in
"RTN","BPSRPT1",50,0)
 ;BPS TRANSACTION
"RTN","BPSRPT1",51,0)
 ;
"RTN","BPSRPT1",52,0)
 ;Choose Index to Loop through (different for Closed Claims)
"RTN","BPSRPT1",53,0)
 S BPIX="AF" S:BPRTYPE=7 BPIX="AG"
"RTN","BPSRPT1",54,0)
 ;
"RTN","BPSRPT1",55,0)
 S BPLDT02=$S(BPIX="AF":$$FM2YMD(BPBEGDT-0.00001),1:BPBEGDT) S:BPLDT02="" BPLDT02=0
"RTN","BPSRPT1",56,0)
 S BPENDDT1=$S(BPIX="AF":$$FM2YMD(BPENDDT),1:BPENDDT_".9999999999") S:BPENDDT1="" BPENDDT1=99999999
"RTN","BPSRPT1",57,0)
 F  S BPLDT02=+$O(^BPSC(BPIX,BPLDT02)) Q:BPLDT02=0!(BPLDT02>BPENDDT1)  D
"RTN","BPSRPT1",58,0)
 . S BP02=0 F  S BP02=$O(^BPSC(BPIX,BPLDT02,BP02)) Q:+BP02=0  D
"RTN","BPSRPT1",59,0)
 . . S BP59=+$O(^BPST("AE",BP02,0))
"RTN","BPSRPT1",60,0)
 . . Q:BP59=0
"RTN","BPSRPT1",61,0)
 . . I $D(@BPGLTMP@("FILE59",BP59)) Q
"RTN","BPSRPT1",62,0)
 . . S @BPGLTMP@("FILE59",BP59)=BPLDT02_"^02"
"RTN","BPSRPT1",63,0)
 . . D PROCESS(BP59)
"RTN","BPSRPT1",64,0)
 ;
"RTN","BPSRPT1",65,0)
 ;#9002313.59 has only one entry per claim with, which has a date 
"RTN","BPSRPT1",66,0)
 ;  of the latest update for the claim
"RTN","BPSRPT1",67,0)
 ;#9002313.57 has more than one entries per claim and keep all 
"RTN","BPSRPT1",68,0)
 ;  changes made the claim
"RTN","BPSRPT1",69,0)
 ;so we have to go thru #9002313.57 to find the earliest date 
"RTN","BPSRPT1",70,0)
 ;related to the claim to check it against BPBEGDT
"RTN","BPSRPT1",71,0)
 S BPLDT57=BPBEGDT-0.00001
"RTN","BPSRPT1",72,0)
 F  S BPLDT57=+$O(^BPSTL("AH",BPLDT57)) Q:BPLDT57=0!(BPLDT57>BPENDDT)  D
"RTN","BPSRPT1",73,0)
 . S BP57=0 F  S BP57=$O(^BPSTL("AH",BPLDT57,BP57)) Q:+BP57=0  D
"RTN","BPSRPT1",74,0)
 . . S BP59=+$G(^BPSTL(BP57,0))
"RTN","BPSRPT1",75,0)
 . . I $D(@BPGLTMP@("FILE59",BP59)) Q
"RTN","BPSRPT1",76,0)
 . . S @BPGLTMP@("FILE59",BP59)=BPLDT57_"^57"
"RTN","BPSRPT1",77,0)
 . . D PROCESS(BP59)
"RTN","BPSRPT1",78,0)
 ;
"RTN","BPSRPT1",79,0)
 ;Remove Portion of Scratch Global
"RTN","BPSRPT1",80,0)
EXIT K @BPGLTMP@("FILE59")
"RTN","BPSRPT1",81,0)
 Q OK
"RTN","BPSRPT1",82,0)
 ;
"RTN","BPSRPT1",83,0)
 ;Convert FB date to YYYYMMDD
"RTN","BPSRPT1",84,0)
FM2YMD(BPFMDT) N Y,Y1
"RTN","BPSRPT1",85,0)
 S Y=$E(BPFMDT,2,3),Y1=$E(BPFMDT,1,1) S Y=$S(Y1=3:"20"_Y,Y1=2:"19"_Y,1:"")
"RTN","BPSRPT1",86,0)
 Q:Y Y_$E(BPFMDT,4,7)
"RTN","BPSRPT1",87,0)
 Q ""
"RTN","BPSRPT1",88,0)
 ;
"RTN","BPSRPT1",89,0)
 ;Process each Entry
"RTN","BPSRPT1",90,0)
 ;
"RTN","BPSRPT1",91,0)
PROCESS(BP59) ;
"RTN","BPSRPT1",92,0)
 N BPBILLED,BPBCK,BPBCKXBPDFN,BPREF,BPPAYBL,BPPLAN,BPREJ,BPRLSDT,BPRX,BPRXDC,BPRXDRG,BPSTATUS,BPSEQ,BPSTOP
"RTN","BPSRPT1",93,0)
 ;
"RTN","BPSRPT1",94,0)
 S BPSEQ=$$COB59^BPSUTIL2(BP59)
"RTN","BPSRPT1",95,0)
 ;
"RTN","BPSRPT1",96,0)
 ;Get ABSBRXI - ptr to #52
"RTN","BPSRPT1",97,0)
 S BPRX=+$P($G(^BPST(BP59,1)),U,11)
"RTN","BPSRPT1",98,0)
 ;
"RTN","BPSRPT1",99,0)
 ;Get ABSBRXR - Prescription Number IEN
"RTN","BPSRPT1",100,0)
 S BPREF=+$P($G(^BPST(BP59,1)),U)
"RTN","BPSRPT1",101,0)
 ;
"RTN","BPSRPT1",102,0)
 ;Get PATIENT - ptr to #2
"RTN","BPSRPT1",103,0)
 S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSRPT1",104,0)
 ; 
"RTN","BPSRPT1",105,0)
 ; Skip eligibility verification transactions
"RTN","BPSRPT1",106,0)
 I $P($G(^BPST(BP59,0)),U,15)="E" G XPROC
"RTN","BPSRPT1",107,0)
 ;
"RTN","BPSRPT1",108,0)
 ;Check for correct BPS Pharmacy (DIVISION)
"RTN","BPSRPT1",109,0)
 I $G(BPPHARM)=1,$$CHKPHRM(BP59)=0 G XPROC
"RTN","BPSRPT1",110,0)
 ;
"RTN","BPSRPT1",111,0)
 ;Check for Display 1-ALL,2-RELEASED,3-NOT RELEASED
"RTN","BPSRPT1",112,0)
 S BPRLSDT=$$RELEASED(BPRX,BPREF)
"RTN","BPSRPT1",113,0)
 I BPRLNRL'=1 I ((BPRLNRL=2)&(BPRLSDT=0))!((BPRLNRL=3)&(BPRLSDT)) G XPROC
"RTN","BPSRPT1",114,0)
 ;
"RTN","BPSRPT1",115,0)
 ;Get Status
"RTN","BPSRPT1",116,0)
 S BPSTATUS=$$STATUS^BPSRPT6(BPRX,BPREF,BPSEQ)
"RTN","BPSRPT1",117,0)
 ;
"RTN","BPSRPT1",118,0)
 ;if REVERSAL
"RTN","BPSRPT1",119,0)
 I BPRTYPE=4,BPSTATUS'["REVERSAL" G XPROC  ; exclude non-reversed
"RTN","BPSRPT1",120,0)
 I BPRTYPE=4,$$CLOSED02^BPSSCR03($P(^BPST(BP59,0),U,4))=1 G XPROC  ; exclude closed claims for Reversal Report
"RTN","BPSRPT1",121,0)
 ;
"RTN","BPSRPT1",122,0)
 ;if PAYABLE
"RTN","BPSRPT1",123,0)
 S BPPAYBL=BPSTATUS["PAYABLE"
"RTN","BPSRPT1",124,0)
 I BPRTYPE=1,'BPPAYBL G XPROC  ; exclude non-payable
"RTN","BPSRPT1",125,0)
 I BPRTYPE=1,BPSTATUS["REVERSAL" G XPROC  ; reversed
"RTN","BPSRPT1",126,0)
 ;
"RTN","BPSRPT1",127,0)
 ;if REJECTED
"RTN","BPSRPT1",128,0)
 S BPREJ=BPSTATUS["REJECTED"
"RTN","BPSRPT1",129,0)
 I BPRTYPE=2,BPSTATUS["REVERSAL" G XPROC ; exclude rejected reversals
"RTN","BPSRPT1",130,0)
 I BPRTYPE=2,'BPREJ G XPROC  ; exclude non-rejected
"RTN","BPSRPT1",131,0)
 ;
"RTN","BPSRPT1",132,0)
 ;if SUBMITTED NOT RELEASED exclude released ones
"RTN","BPSRPT1",133,0)
 I BPRTYPE=3,BPRLSDT'=0 G XPROC
"RTN","BPSRPT1",134,0)
 I BPRTYPE=3,'BPPAYBL G XPROC  ; exclude non-payable
"RTN","BPSRPT1",135,0)
 ;
"RTN","BPSRPT1",136,0)
 ;Auto Reverse Check
"RTN","BPSRPT1",137,0)
 I BPRTYPE=4,BPAUTREV,'$$AUTOREV(BP59) G XPROC
"RTN","BPSRPT1",138,0)
 ;
"RTN","BPSRPT1",139,0)
 ;if CLOSED
"RTN","BPSRPT1",140,0)
 I BPRTYPE=7,'$$CLSCLM(BP59) G XPROC  ;exclude open claims
"RTN","BPSRPT1",141,0)
 ;I BPRTYPE=7,BPSTATUS'["REJECTED" G XPROC  ;exclude non-rejected closed claims
"RTN","BPSRPT1",142,0)
 ;
"RTN","BPSRPT1",143,0)
 ;if Spending Account Report, check Pricing Segment for data
"RTN","BPSRPT1",144,0)
 I BPRTYPE=8,'$$PRICING^BPSRPT5(BP59) G XPROC
"RTN","BPSRPT1",145,0)
 ;
"RTN","BPSRPT1",146,0)
 ;if Recent Transactions, exclude closed claims
"RTN","BPSRPT1",147,0)
 I BPRTYPE=5,$$CLSCLM(BP59) G XPROC
"RTN","BPSRPT1",148,0)
 ;
"RTN","BPSRPT1",149,0)
 ;If Totals by Date, include only rejects and payables
"RTN","BPSRPT1",150,0)
 I BPRTYPE=6,BPSTATUS'["REJECTED",BPSTATUS'["PAYABLE" G XPROC  ; Reversed
"RTN","BPSRPT1",151,0)
 ;
"RTN","BPSRPT1",152,0)
 ;Realtime/Backbill/PRO Option/Resubmission Check
"RTN","BPSRPT1",153,0)
 S BPBCK=$$RTBCK(BP59)
"RTN","BPSRPT1",154,0)
 ;
"RTN","BPSRPT1",155,0)
 ; BPBCK   = 1 Backbill / 2 PRO / 5 Resub / 0 Realtime
"RTN","BPSRPT1",156,0)
 ; BPRTBCK = 3 Backbill / 4 PRO / 5 Resub / 2 Realtime
"RTN","BPSRPT1",157,0)
 ;
"RTN","BPSRPT1",158,0)
 S BPBCKX=$S(BPBCK=1:3,BPBCK=2:4,BPBCK=5:5,BPBCK=0:2,1:"") ;convert to BPRTBCK value
"RTN","BPSRPT1",159,0)
 ;
"RTN","BPSRPT1",160,0)
 ; If user doesn't want all transmission types (BPRTBCK'=1),
"RTN","BPSRPT1",161,0)
 ; then figure out if this transaction is OK
"RTN","BPSRPT1",162,0)
 I BPRTBCK'=1,BPRTBCK'[BPBCKX G XPROC
"RTN","BPSRPT1",163,0)
 ;
"RTN","BPSRPT1",164,0)
 ;Check for MAIL/WINDOW/CMOP/ALL
"RTN","BPSRPT1",165,0)
 I BPMWC'="A",BPMWC'[$$MWC^BPSRPT6(BPRX,BPREF) G XPROC
"RTN","BPSRPT1",166,0)
 ;
"RTN","BPSRPT1",167,0)
 ;Check for selected insurance
"RTN","BPSRPT1",168,0)
 S BPPLAN=$$INSNAM^BPSRPT6(BP59)
"RTN","BPSRPT1",169,0)
 I BPINSINF'=0,'$$CHKINS^BPSSCRCU($P(BPPLAN,U,1),BPINSINF) G XPROC
"RTN","BPSRPT1",170,0)
 S BPPLAN=$P(BPPLAN,U,2)
"RTN","BPSRPT1",171,0)
 ; 
"RTN","BPSRPT1",172,0)
 ;Check for selected drug
"RTN","BPSRPT1",173,0)
 S BPRXDRG=$$GETDRUG^BPSRPT6(BPRX)
"RTN","BPSRPT1",174,0)
 I BPRXDRG=0 G XPROC
"RTN","BPSRPT1",175,0)
 I BPDRUG D  I BPSTOP=0 G XPROC
"RTN","BPSRPT1",176,0)
 . S BPSTOP=0
"RTN","BPSRPT1",177,0)
 . F I=1:1:$L(BPDRUG,",") I BPRXDRG=$P(BPDRUG,",",I) S BPSTOP=1 Q
"RTN","BPSRPT1",178,0)
 ;
"RTN","BPSRPT1",179,0)
 ;Check for selected drug classes
"RTN","BPSRPT1",180,0)
 I BPDRGCL'=0 S BPRXDC=$$DRGCLNAM^BPSRPT6($$GETDRGCL^BPSRPT6(BPRXDRG),99) D  I BPSTOP=0 G XPROC
"RTN","BPSRPT1",181,0)
 . S BPSTOP=0
"RTN","BPSRPT1",182,0)
 . F I=1:1:$L(BPDRGCL,";") I BPRXDC=$P(BPDRGCL,";",I) S BPSTOP=1 Q
"RTN","BPSRPT1",183,0)
 ;
"RTN","BPSRPT1",184,0)
 ;Check for selected Close Reason
"RTN","BPSRPT1",185,0)
 I BPCCRSN,BPCCRSN'=$P($$CLRSN^BPSRPT7(BP59),U) G XPROC
"RTN","BPSRPT1",186,0)
 ;
"RTN","BPSRPT1",187,0)
 ;Check for Accepted/Rejected
"RTN","BPSRPT1",188,0)
 I BPACREJ=1,BPSTATUS'["REJECTED" G XPROC
"RTN","BPSRPT1",189,0)
 I BPACREJ=2,BPSTATUS'["ACCEPTED" G XPROC
"RTN","BPSRPT1",190,0)
 ;
"RTN","BPSRPT1",191,0)
 ;Check for Specific Reject Code
"RTN","BPSRPT1",192,0)
 I BPREJCD'=0 D  I BPSTOP=0 G XPROC
"RTN","BPSRPT1",193,0)
 . S BPSTOP=0
"RTN","BPSRPT1",194,0)
 . F I=1:1:($L(BPREJCD,",")-1) I $$CKREJ(BP59,$P(BPREJCD,",",I)) S BPSTOP=1 Q
"RTN","BPSRPT1",195,0)
 ;
"RTN","BPSRPT1",196,0)
 ;Check for Eligibility Code
"RTN","BPSRPT1",197,0)
 I BPELIG'=0,BPELIG'=$$ELIGCODE^BPSSCR05(BP59) G XPROC
"RTN","BPSRPT1",198,0)
 ;
"RTN","BPSRPT1",199,0)
 ;Check for Eligibility Codes, when one or more is selected (BPELIG1=1)
"RTN","BPSRPT1",200,0)
 I (",2,9,")[BPRTYPE,BPELIG1'=0 S ELIG=$$ELIGCODE^BPSSCR05(BP59) G:$G(ELIG)="" XPROC I '$D(BPELIG1(ELIG)) G XPROC
"RTN","BPSRPT1",201,0)
 ;
"RTN","BPSRPT1",202,0)
 ;Check for selected Prescribers
"RTN","BPSRPT1",203,0)
 I BPRESC'=0 D  I BPSTOP=0 G XPROC
"RTN","BPSRPT1",204,0)
 . S BPSTOP=0
"RTN","BPSRPT1",205,0)
 . F I=1:1:$L(BPRESC,",")-1 I $$CKPRESC(BP59,$P(BPRESC,",",I)) S BPSTOP=1 Q
"RTN","BPSRPT1",206,0)
 ;
"RTN","BPSRPT1",207,0)
 ;Check for selected Patients
"RTN","BPSRPT1",208,0)
 I BPQSTPAT'=0,$G(BPPAT)'="" D  I BPSTOP=0 G XPROC
"RTN","BPSRPT1",209,0)
 . S BPSTOP=0
"RTN","BPSRPT1",210,0)
 . F I=1:1:$L(BPPAT,",") I $P(BPPAT,",",I)[$$GET1^DIQ(9002313.59,BP59,5,"I") S BPSTOP=1 Q
"RTN","BPSRPT1",211,0)
 ;
"RTN","BPSRPT1",212,0)
 ; Check for Billed Amount
"RTN","BPSRPT1",213,0)
 I $G(BPBILL)'=0 S BPBILLED=$$GET1^DIQ(9002313.59,BP59,505) I (BPBILLED<BPMIN)!(BPBILLED>BPMAX) G XPROC
"RTN","BPSRPT1",214,0)
 ;
"RTN","BPSRPT1",215,0)
 ;Check Open/Closed claim
"RTN","BPSRPT1",216,0)
 I BPOPCL'=0,((BPOPCL=2)&($$CLOSED02^BPSSCR03($P(^BPST(BP59,0),U,4))=1))!((BPOPCL=1)&($$CLOSED02^BPSSCR03($P(^BPST(BP59,0),U,4))'=1)) G XPROC
"RTN","BPSRPT1",217,0)
 ;
"RTN","BPSRPT1",218,0)
 ;Save Entry for Report
"RTN","BPSRPT1",219,0)
 D SETTMP^BPSRPT2(BPGLTMP,BPDFN,BPRX,BPREF,BP59,BPBEGDT,BPENDDT,.BPPHARM,BPSUMDET,BPPLAN,BPRLSDT,BPPAYBL,BPREJ,BPRXDRG,$P(BPSTATUS,U))
"RTN","BPSRPT1",220,0)
 ;
"RTN","BPSRPT1",221,0)
XPROC Q
"RTN","BPSRPT1",222,0)
 ;
"RTN","BPSRPT1",223,0)
 ;Check if selected BPS PHARMACY
"RTN","BPSRPT1",224,0)
 ;
"RTN","BPSRPT1",225,0)
 ; Defined Variable: BPPHARM(ptr) - List of BPS Pharmacies to Report on
"RTN","BPSRPT1",226,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",227,0)
 ; 
"RTN","BPSRPT1",228,0)
 ; Returned Value -> 0 = Entry not in list of selected pharmacies
"RTN","BPSRPT1",229,0)
 ;                   1 = Entry is in list of selected pharmacies
"RTN","BPSRPT1",230,0)
CHKPHRM(BP59) N PHARM
"RTN","BPSRPT1",231,0)
 S PHARM=+$P($G(^BPST(BP59,1)),"^",7)
"RTN","BPSRPT1",232,0)
 S PHARM=$S($D(BPPHARM(PHARM)):1,1:0)
"RTN","BPSRPT1",233,0)
 Q PHARM
"RTN","BPSRPT1",234,0)
 ;
"RTN","BPSRPT1",235,0)
 ;Determine whether claim is Released or Not Released
"RTN","BPSRPT1",236,0)
 ;
"RTN","BPSRPT1",237,0)
 ; Input Variables: BPRX - ptr to PRESCRIPTION (#52)
"RTN","BPSRPT1",238,0)
 ;                 BPREF - refill # (0-No Refills,1-1st Refill, 2-2nd, ...) 
"RTN","BPSRPT1",239,0)
 ;
"RTN","BPSRPT1",240,0)
 ; Return Value ->             0 = Not Released
"RTN","BPSRPT1",241,0)
 ;                 released date = Released
"RTN","BPSRPT1",242,0)
 ;                 
"RTN","BPSRPT1",243,0)
RELEASED(BPRX,BPREF) N RDT
"RTN","BPSRPT1",244,0)
 ;
"RTN","BPSRPT1",245,0)
 I BPREF=0 S RDT=$$RXRELDT^BPSRPT6(BPRX)\1
"RTN","BPSRPT1",246,0)
 I BPREF'=0 S RDT=$$REFRELDT^BPSRPT6(BPRX,BPREF)\1
"RTN","BPSRPT1",247,0)
 Q RDT
"RTN","BPSRPT1",248,0)
 ;
"RTN","BPSRPT1",249,0)
 ;Determine if claim was Auto Reversed
"RTN","BPSRPT1",250,0)
 ;
"RTN","BPSRPT1",251,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",252,0)
 ; Return Value -> 1 = Auto Reversed
"RTN","BPSRPT1",253,0)
 ;                 0 = Not Auto Reversed
"RTN","BPSRPT1",254,0)
 ;
"RTN","BPSRPT1",255,0)
AUTOREV(BP59) N AR,BP02
"RTN","BPSRPT1",256,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT1",257,0)
 S AR=+$P($G(^BPSC(BP02,0)),U,7)
"RTN","BPSRPT1",258,0)
 Q AR
"RTN","BPSRPT1",259,0)
 ;
"RTN","BPSRPT1",260,0)
 ;Determine if claim was closed
"RTN","BPSRPT1",261,0)
 ;
"RTN","BPSRPT1",262,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",263,0)
 ; Return Value -> 1 = Closed
"RTN","BPSRPT1",264,0)
 ;                 0 = Not Closed
"RTN","BPSRPT1",265,0)
 ;                 
"RTN","BPSRPT1",266,0)
CLSCLM(BP59) N BP02,CL
"RTN","BPSRPT1",267,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT1",268,0)
 S CL=+$G(^BPSC(BP02,900))
"RTN","BPSRPT1",269,0)
 Q CL
"RTN","BPSRPT1",270,0)
 ;
"RTN","BPSRPT1",271,0)
 ;Determine whether claim is Realtime or Backbilled or PRO Option or Resubmission
"RTN","BPSRPT1",272,0)
 ;
"RTN","BPSRPT1",273,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",274,0)
 ; Return Value -> 5 = Resubmission
"RTN","BPSRPT1",275,0)
 ;                 2 = PRO Option
"RTN","BPSRPT1",276,0)
 ;                 1 = Backbilled
"RTN","BPSRPT1",277,0)
 ;                 0 = Realtime
"RTN","BPSRPT1",278,0)
RTBCK(BP59) N BB
"RTN","BPSRPT1",279,0)
 S BB=$P($G(^BPST(BP59,12)),U,1)
"RTN","BPSRPT1",280,0)
 S BB=$S(BB="BB":1,BB="P2":2,BB="P2S":2,BB="ERES":5,BB="ERWV":5,BB="ERNB":5,1:0)
"RTN","BPSRPT1",281,0)
 Q BB
"RTN","BPSRPT1",282,0)
 ;
"RTN","BPSRPT1",283,0)
 ;Determine if the Prescriber for claim was one of the Prescribers selected
"RTN","BPSRPT1",284,0)
 ;
"RTN","BPSRPT1",285,0)
 ; Input Variables: BPS59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",286,0)
 ;                  BPSRESC - string of Prescribers selected separated by a comma
"RTN","BPSRPT1",287,0)
 ;
"RTN","BPSRPT1",288,0)
 ; Return Value -> 1 = Prescriber is on the list of selected Prescribers 
"RTN","BPSRPT1",289,0)
 ;                 0 = RX and/or Prescriber not found, or the Prescriber for this
"RTN","BPSRPT1",290,0)
 ;                     transaction isn't one of the selected Prescribers
"RTN","BPSRPT1",291,0)
 ;
"RTN","BPSRPT1",292,0)
CKPRESC(BPS59,BPSPRESC) ;
"RTN","BPSRPT1",293,0)
 ; 
"RTN","BPSRPT1",294,0)
 N BPSFND,BPSRX,BPSRXPRSC
"RTN","BPSRPT1",295,0)
 ;
"RTN","BPSRPT1",296,0)
 S BPSFND=0  ; Initialize to zero.
"RTN","BPSRPT1",297,0)
 ;
"RTN","BPSRPT1",298,0)
 ; get the prescription number ien from the BPS TRANSACTION file
"RTN","BPSRPT1",299,0)
 S BPSRX=$$GET1^DIQ(9002313.59,BPS59,1.11,"I")
"RTN","BPSRPT1",300,0)
 ;
"RTN","BPSRPT1",301,0)
 ; if the prescription number didn't exist 
"RTN","BPSRPT1",302,0)
 I BPSRX="" G CKPRESCX
"RTN","BPSRPT1",303,0)
 ;
"RTN","BPSRPT1",304,0)
 ; get the prescriber ien from the PRESCRIPTION file
"RTN","BPSRPT1",305,0)
 S BPSRXPRSC=$$GET1^DIQ(52,BPSRX,4,"I")
"RTN","BPSRPT1",306,0)
 ;
"RTN","BPSRPT1",307,0)
 ; if the prescriber didn't exist BPRESC 
"RTN","BPSRPT1",308,0)
 I BPSRXPRSC="" G CKPRESCX
"RTN","BPSRPT1",309,0)
 ;
"RTN","BPSRPT1",310,0)
 ; The Prescriber for this transaction is one of the Prescribers selected
"RTN","BPSRPT1",311,0)
 I BPSPRESC[BPSRXPRSC S BPSFND=1
"RTN","BPSRPT1",312,0)
 ;
"RTN","BPSRPT1",313,0)
CKPRESCX ;
"RTN","BPSRPT1",314,0)
 Q BPSFND
"RTN","BPSRPT1",315,0)
 ;
"RTN","BPSRPT1",316,0)
 ;Screen Pause 1
"RTN","BPSRPT1",317,0)
 ;
"RTN","BPSRPT1",318,0)
 ; Return variable - BPQ = 0 Continue
"RTN","BPSRPT1",319,0)
 ;                          2 Quit
"RTN","BPSRPT1",320,0)
PAUSE N X
"RTN","BPSRPT1",321,0)
 U IO(0) W !!,"Press RETURN to continue, '^' to exit:"
"RTN","BPSRPT1",322,0)
 R X:$G(DTIME) S:'$T X="^" S:X["^" BPQ=2
"RTN","BPSRPT1",323,0)
 U IO
"RTN","BPSRPT1",324,0)
 Q
"RTN","BPSRPT1",325,0)
 ;
"RTN","BPSRPT1",326,0)
 ;Screen Pause 2
"RTN","BPSRPT1",327,0)
 ;
"RTN","BPSRPT1",328,0)
 ; Return variable - BPQ = 0 Continue
"RTN","BPSRPT1",329,0)
 ;                         2 Quit
"RTN","BPSRPT1",330,0)
PAUSE2 N X
"RTN","BPSRPT1",331,0)
 U IO(0) W !!,"Press RETURN to continue:"
"RTN","BPSRPT1",332,0)
 R X:$G(DTIME) S:'$T X="^" S:X["^" BPQ=2
"RTN","BPSRPT1",333,0)
 U IO
"RTN","BPSRPT1",334,0)
 Q
"RTN","BPSRPT1",335,0)
 ;
"RTN","BPSRPT1",336,0)
 ;Get ECME#
"RTN","BPSRPT1",337,0)
 ;
"RTN","BPSRPT1",338,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSRPT1",339,0)
 ;output :
"RTN","BPSRPT1",340,0)
 ;ECME number from 9002313.02
"RTN","BPSRPT1",341,0)
 ; 7 or 12 digits of the prescription IEN file 52
"RTN","BPSRPT1",342,0)
 ; or 12 spaces
"RTN","BPSRPT1",343,0)
ECMENUM(BP59) ;*/
"RTN","BPSRPT1",344,0)
 Q $$ECMENUM^BPSSCRU2(BP59)
"RTN","BPSRPT1",345,0)
 ;
"RTN","BPSRPT1",346,0)
 ;Convert FM date or date.time to displayable (mm/dd/yy HH:MM) format
"RTN","BPSRPT1",347,0)
 ;
"RTN","BPSRPT1",348,0)
DATTIM(X) N DATE,BPT,BPM,BPH,BPAP
"RTN","BPSRPT1",349,0)
 S DATE=$S(X:$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3),1:"")
"RTN","BPSRPT1",350,0)
 S BPT=$P(X,".",2) S:$L(BPT)<4 BPT=BPT_$E("0000",1,4-$L(BPT))
"RTN","BPSRPT1",351,0)
 S BPH=$E(BPT,1,2),BPM=$E(BPT,3,4)
"RTN","BPSRPT1",352,0)
 S BPAP="AM" I BPH>12 S BPH=BPH-12,BPAP="PM" S:$L(BPH)<2 BPH="0"_BPH
"RTN","BPSRPT1",353,0)
 I BPT S:'BPH BPH=12 S DATE=DATE_" "_BPH_":"_BPM_BPAP
"RTN","BPSRPT1",354,0)
 Q $G(DATE)
"RTN","BPSRPT1",355,0)
 ;
"RTN","BPSRPT1",356,0)
 ;Display RT-Realtime,BB-Backbill,P2-PRO Option, RS-Resubmission or " "
"RTN","BPSRPT1",357,0)
 ;
"RTN","BPSRPT1",358,0)
RTBCKNAM(BPINDEX) Q $S(BPINDEX=0:"RT",BPINDEX=1:"BB",BPINDEX=2:"P2",BPINDEX=5:"RS",1:" ")
"RTN","BPSRPT1",359,0)
 ;
"RTN","BPSRPT1",360,0)
 ;See for Specific Reject Code
"RTN","BPSRPT1",361,0)
 ;
"RTN","BPSRPT1",362,0)
CKREJ(BP59,BPREJCD) N FREJ,I,REJ,X
"RTN","BPSRPT1",363,0)
 S FREJ=0
"RTN","BPSRPT1",364,0)
 S X=$$REJTEXT^BPSRPT2(BP59,.REJ)
"RTN","BPSRPT1",365,0)
 S X="" F  S X=$O(REJ(X)) Q:X=""  D  Q:FREJ=1
"RTN","BPSRPT1",366,0)
 .S REJ=$P($G(REJ(X)),":") Q:REJ=""
"RTN","BPSRPT1",367,0)
 .S I="" F  S I=$O(^BPSF(9002313.93,"B",REJ,I)) Q:I=""  I I=BPREJCD S FREJ=1
"RTN","BPSRPT1",368,0)
 Q FREJ
"RTN","BPSRPT3")
0^5^B232886550
"RTN","BPSRPT3",1,0)
BPSRPT3 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,11,14,19,20,23**;JUN 2004;Build 44
"RTN","BPSRPT3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT3",4,0)
 ;
"RTN","BPSRPT3",5,0)
 ;Reference to IB NCPCP NON-BILLABLE STATUS REASONS (#366.17) supported by ICR 6136
"RTN","BPSRPT3",6,0)
 ;
"RTN","BPSRPT3",7,0)
 Q
"RTN","BPSRPT3",8,0)
 ;
"RTN","BPSRPT3",9,0)
 ; Select the ECME Pharmacy or Pharmacies
"RTN","BPSRPT3",10,0)
 ; 
"RTN","BPSRPT3",11,0)
 ; Input Variable -> none
"RTN","BPSRPT3",12,0)
 ; Return Value ->   "" = Valid Entry or Entries Selected
"RTN","BPSRPT3",13,0)
 ;                                        ^ = Exit
"RTN","BPSRPT3",14,0)
 ;                                       
"RTN","BPSRPT3",15,0)
 ; Output Variable -> BPPHARM = 1 One or More Pharmacies Selected
"RTN","BPSRPT3",16,0)
 ;                          = 0 User Entered 'ALL'
"RTN","BPSRPT3",17,0)
 ;                            
"RTN","BPSRPT3",18,0)
 ; If BPPHARM = 1 then the BPPHARM array will be defined where:
"RTN","BPSRPT3",19,0)
 ;    BPPHARM(ptr) = ptr ^ BPS PHARMACY NAME and
"RTN","BPSRPT3",20,0)
 ;    ptr = Internal Pointer to BPS PHARMACIES file (#9002313.56)
"RTN","BPSRPT3",21,0)
 ;                    
"RTN","BPSRPT3",22,0)
SELPHARM() N DIC,DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",23,0)
 ;
"RTN","BPSRPT3",24,0)
 ;Reset BPPHARM array
"RTN","BPSRPT3",25,0)
 K BPPHARM
"RTN","BPSRPT3",26,0)
 ;
"RTN","BPSRPT3",27,0)
 ;First see if they want to enter individual divisions or ALL
"RTN","BPSRPT3",28,0)
 S DIR(0)="S^D:DIVISION;A:ALL"
"RTN","BPSRPT3",29,0)
 S DIR("A")="Select Certain Pharmacy (D)ivisions or (A)LL"
"RTN","BPSRPT3",30,0)
 S DIR("L",1)="Select one of the following:"
"RTN","BPSRPT3",31,0)
 S DIR("L",2)=""
"RTN","BPSRPT3",32,0)
 S DIR("L",3)="     D         DIVISION"
"RTN","BPSRPT3",33,0)
 S DIR("L",4)="     A         ALL"
"RTN","BPSRPT3",34,0)
 D ^DIR K DIR
"RTN","BPSRPT3",35,0)
 ;
"RTN","BPSRPT3",36,0)
 ;Check for "^" or timeout, otherwise define BPPHARM
"RTN","BPSRPT3",37,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",38,0)
 E  S BPPHARM=$S(Y="A":0,1:1)
"RTN","BPSRPT3",39,0)
 ;
"RTN","BPSRPT3",40,0)
 ;If division selected, ask prompt
"RTN","BPSRPT3",41,0)
 I $G(BPPHARM)=1 F  D  Q:Y="^"!(Y="") 
"RTN","BPSRPT3",42,0)
 .;
"RTN","BPSRPT3",43,0)
 .;Prompt for entry
"RTN","BPSRPT3",44,0)
 .K X S DIC(0)="QEAM",DIC=9002313.56,DIC("A")="Select ECME Pharmacy Division(s): "
"RTN","BPSRPT3",45,0)
 .W ! D ^DIC
"RTN","BPSRPT3",46,0)
 .;
"RTN","BPSRPT3",47,0)
 .;Check for "^" or timeout 
"RTN","BPSRPT3",48,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1) K BPPHARM S Y="^" Q
"RTN","BPSRPT3",49,0)
 .;
"RTN","BPSRPT3",50,0)
 .;Check for blank entry, quit if no previous selections
"RTN","BPSRPT3",51,0)
 .I $G(X)="" S Y=$S($D(BPPHARM)>9:"",1:"^") K:Y="^" BPPHARM Q
"RTN","BPSRPT3",52,0)
 .;
"RTN","BPSRPT3",53,0)
 .;Handle Deletes
"RTN","BPSRPT3",54,0)
 .I $D(BPPHARM(+Y)) D  Q:Y="^"  I 1
"RTN","BPSRPT3",55,0)
 ..N P
"RTN","BPSRPT3",56,0)
 ..S P=Y  ;Save Original Value
"RTN","BPSRPT3",57,0)
 ..S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_$P(P,U,2)_" from your list?"
"RTN","BPSRPT3",58,0)
 ..S DIR("B")="NO" D ^DIR
"RTN","BPSRPT3",59,0)
 ..I ($G(DUOUT)=1)!($G(DTOUT)=1) K BPPHARM S Y="^" Q
"RTN","BPSRPT3",60,0)
 ..I Y="Y" K BPPHARM(+P),BPPHARM("B",$P(P,U,2),+P)
"RTN","BPSRPT3",61,0)
 ..S Y=P  ;Restore Original Value
"RTN","BPSRPT3",62,0)
 ..K P
"RTN","BPSRPT3",63,0)
 .E  D
"RTN","BPSRPT3",64,0)
 ..;Define new entries in BPPHARM array
"RTN","BPSRPT3",65,0)
 ..S BPPHARM(+Y)=Y
"RTN","BPSRPT3",66,0)
 ..S BPPHARM("B",$P(Y,U,2),+Y)=""
"RTN","BPSRPT3",67,0)
 .;
"RTN","BPSRPT3",68,0)
 .;Display a list of selected divisions
"RTN","BPSRPT3",69,0)
 .I $D(BPPHARM)>9 D
"RTN","BPSRPT3",70,0)
 ..N X
"RTN","BPSRPT3",71,0)
 ..W !,?2,"Selected:"
"RTN","BPSRPT3",72,0)
 ..S X="" F  S X=$O(BPPHARM("B",X)) Q:X=""  W !,?10,X
"RTN","BPSRPT3",73,0)
 ..K X
"RTN","BPSRPT3",74,0)
 .Q
"RTN","BPSRPT3",75,0)
 ;
"RTN","BPSRPT3",76,0)
 K BPPHARM("B")
"RTN","BPSRPT3",77,0)
 Q Y
"RTN","BPSRPT3",78,0)
 ;
"RTN","BPSRPT3",79,0)
 ; Select to Include Eligibility of (V)ETERAN, (T)RICARE, (C)HAMPVA or (A)ll
"RTN","BPSRPT3",80,0)
 ; 
"RTN","BPSRPT3",81,0)
 ; Input Variable -> DFLT = 0 = All
"RTN","BPSRPT3",82,0)
 ;                          1 = VETERAN
"RTN","BPSRPT3",83,0)
 ;                          2 = TRICARE
"RTN","BPSRPT3",84,0)
 ;                          3 = CHAMPVA
"RTN","BPSRPT3",85,0)
 ; 
"RTN","BPSRPT3",86,0)
 ; Return Value ->  V, T, C or 0 for All
"RTN","BPSRPT3",87,0)
 ;
"RTN","BPSRPT3",88,0)
SELELIG(DFLT) N DIC,DIR,DIRUT,DUOUT,DTOUT,DIROUT,X,Y
"RTN","BPSRPT3",89,0)
 S DFLT=$S($G(DFLT)=1:"V",$G(DFLT)=2:"T",$G(DFLT)=3:"C",1:"A")
"RTN","BPSRPT3",90,0)
 S DIR(0)="S^V:VETERAN;T:TRICARE;C:CHAMPVA;A:ALL"
"RTN","BPSRPT3",91,0)
 S DIR("A")="Include Certain Eligibility Type or (A)ll",DIR("B")=DFLT
"RTN","BPSRPT3",92,0)
 D ^DIR
"RTN","BPSRPT3",93,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",94,0)
 S Y=$S(Y="A":0,1:Y)
"RTN","BPSRPT3",95,0)
 Q Y
"RTN","BPSRPT3",96,0)
 ;
"RTN","BPSRPT3",97,0)
 ; Display (S)ummary or (D)etail Format
"RTN","BPSRPT3",98,0)
 ;
"RTN","BPSRPT3",99,0)
 ; Input Variable -> DFLT = 1 Summary
"RTN","BPSRPT3",100,0)
 ;                          2 Detail
"RTN","BPSRPT3",101,0)
 ;
"RTN","BPSRPT3",102,0)
 ; Return Value ->   1 = Summary
"RTN","BPSRPT3",103,0)
 ;                   0 = Detail
"RTN","BPSRPT3",104,0)
 ;                   ^ = Exit
"RTN","BPSRPT3",105,0)
 ;
"RTN","BPSRPT3",106,0)
SELSMDET(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",107,0)
 S DFLT=$S($G(DFLT)=1:"Summary",$G(DFLT)=0:"Detail",1:"Detail")
"RTN","BPSRPT3",108,0)
 S DIR(0)="S^S:Summary;D:Detail",DIR("A")="Display (S)ummary or (D)etail Format",DIR("B")=DFLT
"RTN","BPSRPT3",109,0)
 D ^DIR
"RTN","BPSRPT3",110,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",111,0)
 S Y=$S(Y="S":1,Y="D":0,1:Y)
"RTN","BPSRPT3",112,0)
 Q Y
"RTN","BPSRPT3",113,0)
 ;
"RTN","BPSRPT3",114,0)
 ; Display (C)MOP or (M)ail or (W)indow or (A)ll
"RTN","BPSRPT3",115,0)
 ; 
"RTN","BPSRPT3",116,0)
 ;    Input Variable -> DFLT = C CMOP
"RTN","BPSRPT3",117,0)
 ;                             W Window
"RTN","BPSRPT3",118,0)
 ;                             M Mail
"RTN","BPSRPT3",119,0)
 ;                             A All
"RTN","BPSRPT3",120,0)
 ;                          
"RTN","BPSRPT3",121,0)
 ;    Return Value ->   C = CMOP
"RTN","BPSRPT3",122,0)
 ;                      W = Window
"RTN","BPSRPT3",123,0)
 ;                      M = Mail
"RTN","BPSRPT3",124,0)
 ;                      A = All
"RTN","BPSRPT3",125,0)
 ;                      ^ = Exit
"RTN","BPSRPT3",126,0)
 ; 
"RTN","BPSRPT3",127,0)
SELMWC(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",128,0)
 S DFLT=$S($G(DFLT)="C":"CMOP",$G(DFLT)="W":"Window",$G(DFLT)="M":"Mail",1:"ALL")
"RTN","BPSRPT3",129,0)
 S DIR(0)="S^C:CMOP;M:Mail;W:Window;A:ALL"
"RTN","BPSRPT3",130,0)
 S DIR("A")="Display (C)MOP or (M)ail or (W)indow or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT3",131,0)
 D ^DIR
"RTN","BPSRPT3",132,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",133,0)
 Q Y
"RTN","BPSRPT3",134,0)
 ;
"RTN","BPSRPT3",135,0)
 ;
"RTN","BPSRPT3",136,0)
SELMWC1(DFLT) ;
"RTN","BPSRPT3",137,0)
 ; Upon completion of prompt, values will be placed into a string delimited
"RTN","BPSRPT3",138,0)
 ; by commas. e.g. C,M
"RTN","BPSRPT3",139,0)
 ; 
"RTN","BPSRPT3",140,0)
 ; If user includes (A)ll as a code, "A" will be stored in BPARR
"RTN","BPSRPT3",141,0)
 ; array. e.g. Entry of C,M,A will save as BPARR("MWC")="A"
"RTN","BPSRPT3",142,0)
 ; 
"RTN","BPSRPT3",143,0)
 ; User input values are temporary stored in array BPSMWC to eliminate duplicate 
"RTN","BPSRPT3",144,0)
 ; entries. e.g. Entry of C,M,C will save as BPARR("MWC")="C,M"
"RTN","BPSRPT3",145,0)
 ; 
"RTN","BPSRPT3",146,0)
BPSMWC ;
"RTN","BPSRPT3",147,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",148,0)
 N BPARR,BPSMWC,BPSERR,BPSMWCSTR,BPSSEL,BPSX
"RTN","BPSRPT3",149,0)
 ;
"RTN","BPSRPT3",150,0)
 S BPSMWCSTR=",C,M,W,A,"
"RTN","BPSRPT3",151,0)
 S DIR(0)="FO^0:7"
"RTN","BPSRPT3",152,0)
 S DIR("A",1)=""
"RTN","BPSRPT3",153,0)
 S DIR("A",2)="     Select one or more of the following:"
"RTN","BPSRPT3",154,0)
 S DIR("A",3)=""
"RTN","BPSRPT3",155,0)
 S DIR("A",4)="          C         CMOP"
"RTN","BPSRPT3",156,0)
 S DIR("A",5)="          M         Mail"
"RTN","BPSRPT3",157,0)
 S DIR("A",6)="          W         Window"
"RTN","BPSRPT3",158,0)
 S DIR("A",7)="          A         ALL"
"RTN","BPSRPT3",159,0)
 S DIR("A",8)=""
"RTN","BPSRPT3",160,0)
 S DIR("A")="Display (C)MOP or (M)ail or (W)indow or (A)ll"
"RTN","BPSRPT3",161,0)
 S DIR("B")="A" S:$G(BPARR("MWC"))'="" DIR("B")=BPARR("MWC")
"RTN","BPSRPT3",162,0)
 S DIR("?",1)="Enter a single response or multiple responses separated by commas."
"RTN","BPSRPT3",163,0)
 S DIR("?",2)=" Example:"
"RTN","BPSRPT3",164,0)
 S DIR("?",3)="  C"
"RTN","BPSRPT3",165,0)
 S DIR("?")="  C,M"
"RTN","BPSRPT3",166,0)
 D ^DIR K DIR
"RTN","BPSRPT3",167,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($D(DIRUT)) Q "^"
"RTN","BPSRPT3",168,0)
 ;
"RTN","BPSRPT3",169,0)
 ;Convert any lower case to upper case
"RTN","BPSRPT3",170,0)
 S X=$TR(X,BPSLC,BPSUC)
"RTN","BPSRPT3",171,0)
 ;
"RTN","BPSRPT3",172,0)
 ;If 'A' was one of the selections,reset X to include all available selections.
"RTN","BPSRPT3",173,0)
 I X[",",X["A" S X="C,M,W"
"RTN","BPSRPT3",174,0)
 ;
"RTN","BPSRPT3",175,0)
 ; Loop through user input (returned in variable X).
"RTN","BPSRPT3",176,0)
 ; Display warning message if any user input selection is not included
"RTN","BPSRPT3",177,0)
 ; in the string of acceptable codes (BPSMWCSTR) and re-prompt question.
"RTN","BPSRPT3",178,0)
 ; Assign valid selections to BPSMWC array. This array will prevent
"RTN","BPSRPT3",179,0)
 ; duplicate entries from being saved to the user's profile.
"RTN","BPSRPT3",180,0)
 ;
"RTN","BPSRPT3",181,0)
 K BPSMWC
"RTN","BPSRPT3",182,0)
 S BPSERR=""
"RTN","BPSRPT3",183,0)
 F BPSX=1:1:$L(X,",") D
"RTN","BPSRPT3",184,0)
 . S BPSSEL=$P(X,",",BPSX)
"RTN","BPSRPT3",185,0)
 . I BPSMWCSTR'[(","_BPSSEL_",") W !," ",BPSSEL," is not a valid entry." S BPSERR=1 Q
"RTN","BPSRPT3",186,0)
 . S BPSMWC(BPSSEL)=""
"RTN","BPSRPT3",187,0)
 ;
"RTN","BPSRPT3",188,0)
 I $G(BPSERR)=1 G BPSMWC
"RTN","BPSRPT3",189,0)
 ;
"RTN","BPSRPT3",190,0)
 ; If user included (A)ll as a selection, set profile setting to "A".
"RTN","BPSRPT3",191,0)
 ;
"RTN","BPSRPT3",192,0)
 I $D(BPSMWC("A")) S BPARR("MWC")="A"
"RTN","BPSRPT3",193,0)
 E  D  ; User did not enter "A".
"RTN","BPSRPT3",194,0)
 . ;
"RTN","BPSRPT3",195,0)
 . ; At this point user selections are valid, do not include "A".
"RTN","BPSRPT3",196,0)
 . ; Loop through and set selections into a comma delimited
"RTN","BPSRPT3",197,0)
 . ; string before assigning to BPARR array.
"RTN","BPSRPT3",198,0)
 . ;
"RTN","BPSRPT3",199,0)
 . S BPSSEL=""
"RTN","BPSRPT3",200,0)
 . F  S BPSSEL=$O(BPSMWC(BPSSEL)) Q:BPSSEL=""  D
"RTN","BPSRPT3",201,0)
 . . ; Display the user selections
"RTN","BPSRPT3",202,0)
 . . W !,?10,$S(BPSSEL="C":"CMOP",BPSSEL="M":"MAIL",BPSSEL="W":"WINDOW",1:"")
"RTN","BPSRPT3",203,0)
 . . S BPSMWC=$G(BPSMWC)_BPSSEL_","
"RTN","BPSRPT3",204,0)
 . S BPSMWC=$E(BPSMWC,1,($L(BPSMWC)-1))
"RTN","BPSRPT3",205,0)
 . S BPARR("MWC")=BPSMWC
"RTN","BPSRPT3",206,0)
 ;
"RTN","BPSRPT3",207,0)
 Q BPARR("MWC")
"RTN","BPSRPT3",208,0)
 ;
"RTN","BPSRPT3",209,0)
 ; Display (R)ealTime Fills or (B)ackbills or (P)RO option or Re(S)ubmission or (A)LL
"RTN","BPSRPT3",210,0)
 ;
"RTN","BPSRPT3",211,0)
 ;    Input Variable -> DFLT = 5 Resubmission
"RTN","BPSRPT3",212,0)
 ;                             4 PRO Option
"RTN","BPSRPT3",213,0)
 ;                             3 Backbill
"RTN","BPSRPT3",214,0)
 ;                             2 Real Time Fills
"RTN","BPSRPT3",215,0)
 ;                             1 ALL
"RTN","BPSRPT3",216,0)
 ;                          
"RTN","BPSRPT3",217,0)
 ;    Return Value ->   5 = Resubmision
"RTN","BPSRPT3",218,0)
 ;                      4 = PRO Option
"RTN","BPSRPT3",219,0)
 ;                      3 = Backbill (manually)
"RTN","BPSRPT3",220,0)
 ;                      2 = Real Time Fills (automatically during FINISH)
"RTN","BPSRPT3",221,0)
 ;                      1 = ALL
"RTN","BPSRPT3",222,0)
 ;                      ^ = Exit
"RTN","BPSRPT3",223,0)
 ;
"RTN","BPSRPT3",224,0)
SELRTBCK(DFLT) N DIR,DIRUT,DTOUT,DUOUT,DIROUT,X,Y
"RTN","BPSRPT3",225,0)
 S DFLT=$S($G(DFLT)=2:"Real Time",$G(DFLT)=3:"Backbill",$G(DFLT)=4:"PRO Option",$G(DFLT)=5:"Resubmission",1:"A")
"RTN","BPSRPT3",226,0)
 S DIR(0)="S^R:Real Time Fills;B:Backbill;P:PRO Option;S:ReSubmission;A:ALL"
"RTN","BPSRPT3",227,0)
 S DIR("A")="Display (R)ealTime, (B)ackbills, (P)RO Option, Re(S)ubmission or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT3",228,0)
 D ^DIR
"RTN","BPSRPT3",229,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",230,0)
 S Y=$S(Y="A":1,Y="R":2,Y="B":3,Y="P":4,Y="S":5,1:Y)
"RTN","BPSRPT3",231,0)
 Q Y
"RTN","BPSRPT3",232,0)
 ;
"RTN","BPSRPT3",233,0)
SELRBPS() ;
"RTN","BPSRPT3",234,0)
 ;
"RTN","BPSRPT3",235,0)
 ; BPSRBSTR = string of valid codes
"RTN","BPSRPT3",236,0)
 ;
"RTN","BPSRPT3",237,0)
 ; Upon completion of prompt, values will be placed into a string delimited
"RTN","BPSRPT3",238,0)
 ; by commas. e.g. P,R
"RTN","BPSRPT3",239,0)
 ;
"RTN","BPSRPT3",240,0)
 ; If user selected (A)ll then 1 will be stored in BPARR
"RTN","BPSRPT3",241,0)
 ;
"RTN","BPSRPT3",242,0)
 ; User input values are temporary stored in array BPSRBPS to eliminate duplicate 
"RTN","BPSRPT3",243,0)
 ; entries.
"RTN","BPSRPT3",244,0)
 ;
"RTN","BPSRPT3",245,0)
BPRBPS ; Realtime / Backbills / Pro Option / Resubmission / All
"RTN","BPSRPT3",246,0)
 N BPARR,BPSRBPS,BPSERR,BPSRBSTR,BPSSEL,BPSX
"RTN","BPSRPT3",247,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",248,0)
 ;
"RTN","BPSRPT3",249,0)
 S BPSRBSTR=",R,B,P,S,A,"
"RTN","BPSRPT3",250,0)
 S DIR(0)="FO^0:7"
"RTN","BPSRPT3",251,0)
 S DIR("A",1)=""
"RTN","BPSRPT3",252,0)
 S DIR("A",2)="     Select one or more of the following:"
"RTN","BPSRPT3",253,0)
 S DIR("A",3)=""
"RTN","BPSRPT3",254,0)
 S DIR("A",4)="          R         Real Time Fills"
"RTN","BPSRPT3",255,0)
 S DIR("A",5)="          B         Backbill"
"RTN","BPSRPT3",256,0)
 S DIR("A",6)="          P         PRO Option"
"RTN","BPSRPT3",257,0)
 S DIR("A",7)="          S         ReSubmission"
"RTN","BPSRPT3",258,0)
 S DIR("A",8)="          A         ALL"
"RTN","BPSRPT3",259,0)
 S DIR("A",9)=""
"RTN","BPSRPT3",260,0)
 S DIR("A")="Display (R)ealTime, (B)ackbills, (P)RO Option, Re(S)ubmission or (A)ll"
"RTN","BPSRPT3",261,0)
 S DIR("B")="A" S:$G(BPARR("RBPS"))'="" DIR("B")=BPARR("RBPS")
"RTN","BPSRPT3",262,0)
 S DIR("?",1)="Enter a single response or multiple responses separated by commas."
"RTN","BPSRPT3",263,0)
 S DIR("?",2)=" Example:"
"RTN","BPSRPT3",264,0)
 S DIR("?",3)="  B"
"RTN","BPSRPT3",265,0)
 S DIR("?")="  B,P"
"RTN","BPSRPT3",266,0)
 D ^DIR K DIR
"RTN","BPSRPT3",267,0)
 ;
"RTN","BPSRPT3",268,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($D(DIRUT)) Q "^"
"RTN","BPSRPT3",269,0)
 ;
"RTN","BPSRPT3",270,0)
 ;Convert any lower case to upper case
"RTN","BPSRPT3",271,0)
 S X=$TR(X,BPSLC,BPSUC)
"RTN","BPSRPT3",272,0)
 ;
"RTN","BPSRPT3",273,0)
 ;If 'A' was one of the selections,reset X to include all available selections.
"RTN","BPSRPT3",274,0)
 I X[",",X["A" S X="R,B,P,S"
"RTN","BPSRPT3",275,0)
 ;
"RTN","BPSRPT3",276,0)
 ; Loop through user input (returned in variable X).
"RTN","BPSRPT3",277,0)
 ; Display warning message if any user input selection is not included
"RTN","BPSRPT3",278,0)
 ; in the string of acceptable codes (BPSRBSTR) and re-prompt question.
"RTN","BPSRPT3",279,0)
 ; Assign valid selections to BPRTBCK array. This array will prevent
"RTN","BPSRPT3",280,0)
 ; duplicate entries from being saved to the user's profile.
"RTN","BPSRPT3",281,0)
 ;
"RTN","BPSRPT3",282,0)
 K BPSRBPS
"RTN","BPSRPT3",283,0)
 S (BPSSEL,BPSERR)=""
"RTN","BPSRPT3",284,0)
 F BPSX=1:1:$L(X,",") D
"RTN","BPSRPT3",285,0)
 . S BPSSEL=$P(X,",",BPSX)
"RTN","BPSRPT3",286,0)
 . I BPSRBSTR'[(","_BPSSEL_",") W !," ",BPSSEL," is not a valid entry." S BPSERR=1 Q
"RTN","BPSRPT3",287,0)
 . S BPSRBPS(BPSSEL)=""
"RTN","BPSRPT3",288,0)
 ;
"RTN","BPSRPT3",289,0)
 I $G(BPSERR)=1 G BPRBPS
"RTN","BPSRPT3",290,0)
 ;
"RTN","BPSRPT3",291,0)
 ; If user selected (A)ll, set profile setting to ALL.
"RTN","BPSRPT3",292,0)
 I $D(BPSRBPS("A")) S BPARR("RBPS")=1
"RTN","BPSRPT3",293,0)
 E  D  ; User did not enter "A".
"RTN","BPSRPT3",294,0)
 . ;
"RTN","BPSRPT3",295,0)
 . ; At this point user selections are valid and do not include "A".
"RTN","BPSRPT3",296,0)
 . ; Loop through valid user selections. Set selections into a
"RTN","BPSRPT3",297,0)
 . ; comma delimited string before assigning to BPARR array.
"RTN","BPSRPT3",298,0)
 . ;
"RTN","BPSRPT3",299,0)
 . S (BPSSEL,BPSSELN)=""
"RTN","BPSRPT3",300,0)
 . F  S BPSSEL=$O(BPSRBPS(BPSSEL)) Q:BPSSEL=""  D
"RTN","BPSRPT3",301,0)
 . . ; Display the user selections
"RTN","BPSRPT3",302,0)
 . . W !,?10,$S(BPSSEL="R":"REALTIME",BPSSEL="B":"BACKBILLS",BPSSEL="P":"PRO OPTION",BPSSEL="S":"RESUBMISSION",1:"")
"RTN","BPSRPT3",303,0)
 . . S BPSRBPS=$G(BPSRBPS)_BPSSEL_","
"RTN","BPSRPT3",304,0)
 . S BPSRBPS=$E(BPSRBPS,1,($L(BPSRBPS)-1))
"RTN","BPSRPT3",305,0)
 ;
"RTN","BPSRPT3",306,0)
 ; If ALL wasn't selected convert BPSRBPS to numerical a value, like existing functionality in SELRTBCK^BPSRPT3.
"RTN","BPSRPT3",307,0)
 I '$D(BPSRBPS("A")) D
"RTN","BPSRPT3",308,0)
 . N RTBCKX,NRTBCK
"RTN","BPSRPT3",309,0)
 . S NRTBCK=""
"RTN","BPSRPT3",310,0)
 . I $L(BPSRBPS)=1 D
"RTN","BPSRPT3",311,0)
 . . S NRTBCK=$S(BPSRBPS="R":2,BPSRBPS="B":3,BPSRBPS="P":4,BPSRBPS="S":5,1:"")
"RTN","BPSRPT3",312,0)
 . . S BPARR("RBPS")=NRTBCK
"RTN","BPSRPT3",313,0)
 . E  D
"RTN","BPSRPT3",314,0)
 . . F I=1:1:$L(BPSRBPS,",") S RTBCKX=$P(BPSRBPS,",",I),NRTBCK=NRTBCK_$S(RTBCKX="R":2,RTBCKX="B":3,RTBCKX="P":4,RTBCKX="S":5,1:"")_","
"RTN","BPSRPT3",315,0)
 . . S BPARR("RBPS")=$E(NRTBCK,1,$L(NRTBCK)-1)
"RTN","BPSRPT3",316,0)
 ;
"RTN","BPSRPT3",317,0)
 Q BPARR("RBPS")
"RTN","BPSRPT3",318,0)
 ;
"RTN","BPSRPT3",319,0)
 ; Display Specific (D)rug or Drug (C)lass
"RTN","BPSRPT3",320,0)
 ; 
"RTN","BPSRPT3",321,0)
 ;    Input Variable -> DFLT = 3 Drug Class
"RTN","BPSRPT3",322,0)
 ;                             2 Drug
"RTN","BPSRPT3",323,0)
 ;                             1 ALL
"RTN","BPSRPT3",324,0)
 ;                          
"RTN","BPSRPT3",325,0)
 ;     Return Value ->   3 = Drug Class
"RTN","BPSRPT3",326,0)
 ;                       2 = Drug
"RTN","BPSRPT3",327,0)
 ;                       1 = ALL
"RTN","BPSRPT3",328,0)
 ;                       ^ = Exit
"RTN","BPSRPT3",329,0)
 ;                       
"RTN","BPSRPT3",330,0)
SELDRGAL(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",331,0)
 S DFLT=$S($G(DFLT)=2:"Drug",$G(DFLT)=3:"Drug Class",1:"ALL")
"RTN","BPSRPT3",332,0)
 S DIR(0)="S^D:Drug;C:Drug Class;A:ALL"
"RTN","BPSRPT3",333,0)
 S DIR("A")="Display Specific (D)rug or Drug (C)lass or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT3",334,0)
 D ^DIR
"RTN","BPSRPT3",335,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",336,0)
 S Y=$S(Y="A":1,Y="D":2,Y="C":3,1:Y)
"RTN","BPSRPT3",337,0)
 Q Y
"RTN","BPSRPT3",338,0)
 ;
"RTN","BPSRPT3",339,0)
 ; Select Drug
"RTN","BPSRPT3",340,0)
 ; 
"RTN","BPSRPT3",341,0)
 ; Input Variable -> none
"RTN","BPSRPT3",342,0)
 ; 
"RTN","BPSRPT3",343,0)
 ; Return Value -> ptr = pointer to DRUG file (#50)
"RTN","BPSRPT3",344,0)
 ;                   ^ = Exit
"RTN","BPSRPT3",345,0)
 ;                   
"RTN","BPSRPT3",346,0)
SELDRG() N DIC,DIRUT,DUOUT,X,Y
"RTN","BPSRPT3",347,0)
 ;
"RTN","BPSRPT3",348,0)
 ;Prompt for entry
"RTN","BPSRPT3",349,0)
 W ! D SELDRG^BPSRPT6
"RTN","BPSRPT3",350,0)
 ;
"RTN","BPSRPT3",351,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT3",352,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",353,0)
 ;
"RTN","BPSRPT3",354,0)
 ;Check for Valid Entry
"RTN","BPSRPT3",355,0)
 I +Y>0 S Y=+Y
"RTN","BPSRPT3",356,0)
 ;
"RTN","BPSRPT3",357,0)
 Q Y
"RTN","BPSRPT3",358,0)
 ;
"RTN","BPSRPT3",359,0)
 ; Select Drug Class
"RTN","BPSRPT3",360,0)
 ; 
"RTN","BPSRPT3",361,0)
 ; Input Variable -> none
"RTN","BPSRPT3",362,0)
 ; 
"RTN","BPSRPT3",363,0)
 ; Return Value -> ptr = pointer to VA DRUG CLASS file (#50.605)
"RTN","BPSRPT3",364,0)
 ;                   ^ = Exit
"RTN","BPSRPT3",365,0)
 ;
"RTN","BPSRPT3",366,0)
SELDRGCL() N DIC,DIRUT,DUOUT,Y
"RTN","BPSRPT3",367,0)
 ;
"RTN","BPSRPT3",368,0)
 ;Prompt for entry
"RTN","BPSRPT3",369,0)
 ;Using DIC^PSNDI per ICR 4554 - BPS*1*14 ticket 313337
"RTN","BPSRPT3",370,0)
 S DIC="50.605",DIC(0)="QEAMZ" D DIC^PSNDI(DIC,"BPS",.DIC,,,)
"RTN","BPSRPT3",371,0)
 ;
"RTN","BPSRPT3",372,0)
 ;call returns DRUG CLASS CODE, need to extract DRUG CLASSIFICATION
"RTN","BPSRPT3",373,0)
 I +$G(Y)>0 S Y=$P($G(Y(0)),"^",2) I $G(Y)="" S Y=-1
"RTN","BPSRPT3",374,0)
 ;
"RTN","BPSRPT3",375,0)
 ;If nothing was returned set Y="-1" so report knows 
"RTN","BPSRPT3",376,0)
 I $G(Y)=-1 S Y="^"
"RTN","BPSRPT3",377,0)
 ;
"RTN","BPSRPT3",378,0)
 Q Y
"RTN","BPSRPT3",379,0)
 ;
"RTN","BPSRPT3",380,0)
 ; Enter Date Range
"RTN","BPSRPT3",381,0)
 ;
"RTN","BPSRPT3",382,0)
 ; Input Variable -> TYPE = 7 CLOSE REPORT
"RTN","BPSRPT3",383,0)
 ;                          1-6 OTHER REPORTS
"RTN","BPSRPT3",384,0)
 ;
"RTN","BPSRPT3",385,0)
 ; Return Value -> P1^P2
"RTN","BPSRPT3",386,0)
 ; 
"RTN","BPSRPT3",387,0)
 ;           where P1 = From Date
"RTN","BPSRPT3",388,0)
 ;                    = ^ Exit
"RTN","BPSRPT3",389,0)
 ;                 P2 = To Date
"RTN","BPSRPT3",390,0)
 ;                    = blank for Exit
"RTN","BPSRPT3",391,0)
 ;                 
"RTN","BPSRPT3",392,0)
SELDATE(TYPE) N BPSIBDT,DIR,DIRUT,DTOUT,DUOUT,VAL,X,Y
"RTN","BPSRPT3",393,0)
 S TYPE=$S($G(TYPE)=7:"CLOSE",1:"TRANSACTION")
"RTN","BPSRPT3",394,0)
SELDATE1 S VAL="",DIR(0)="DA^:DT:EX",DIR("A")="START WITH "_TYPE_" DATE: ",DIR("B")="T-1"
"RTN","BPSRPT3",395,0)
 W ! D ^DIR
"RTN","BPSRPT3",396,0)
 ;
"RTN","BPSRPT3",397,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT3",398,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S VAL="^"
"RTN","BPSRPT3",399,0)
 ;
"RTN","BPSRPT3",400,0)
 I VAL="" D
"RTN","BPSRPT3",401,0)
 .S $P(VAL,U)=Y
"RTN","BPSRPT3",402,0)
 .S DIR(0)="DA^"_VAL_":DT:EX",DIR("A")="  GO TO "_TYPE_" DATE: ",DIR("B")="T"
"RTN","BPSRPT3",403,0)
 .D ^DIR
"RTN","BPSRPT3",404,0)
 .;
"RTN","BPSRPT3",405,0)
 .;Check for "^", timeout, or blank entry
"RTN","BPSRPT3",406,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S VAL="^" Q
"RTN","BPSRPT3",407,0)
 .;
"RTN","BPSRPT3",408,0)
 .;Define Entry
"RTN","BPSRPT3",409,0)
 .S $P(VAL,U,2)=Y
"RTN","BPSRPT3",410,0)
 ;
"RTN","BPSRPT3",411,0)
 Q VAL
"RTN","BPSRPT3",412,0)
 ;
"RTN","BPSRPT3",413,0)
 ; Select to Include Open or Closed or All claims
"RTN","BPSRPT3",414,0)
 ; 
"RTN","BPSRPT3",415,0)
 ; Input Variable -> DFLT = 0 = All
"RTN","BPSRPT3",416,0)
 ;                          1 = Closed
"RTN","BPSRPT3",417,0)
 ;                          2 = Open
"RTN","BPSRPT3",418,0)
 ; 
"RTN","BPSRPT3",419,0)
 ; Return Value -> 0 = All, 1 = Closed, 2 = Open
"RTN","BPSRPT3",420,0)
SELOPCL(DFLT) N DIC,DIR,DIRUT,DUOUT,X,Y
"RTN","BPSRPT3",421,0)
 ;
"RTN","BPSRPT3",422,0)
 S DFLT=$S($G(DFLT)=1:"C",$G(DFLT)=2:"O",1:"A")
"RTN","BPSRPT3",423,0)
 S DIR(0)="S^O:OPEN;C:CLOSED;A:ALL"
"RTN","BPSRPT3",424,0)
 S DIR("A")="Include (O)pen, (C)losed, or (A)ll Claims",DIR("B")=DFLT
"RTN","BPSRPT3",425,0)
 D ^DIR
"RTN","BPSRPT3",426,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",427,0)
 ;
"RTN","BPSRPT3",428,0)
 S Y=$S(Y="C":1,Y="O":2,1:0)
"RTN","BPSRPT3",429,0)
 Q Y
"RTN","BPSRPT3",430,0)
 ;
"RTN","BPSRPT3",431,0)
SELELIG1() ;
"RTN","BPSRPT3",432,0)
 ; Select multiple Eligibilities
"RTN","BPSRPT3",433,0)
 ; 
"RTN","BPSRPT3",434,0)
 ; Input Variable -> none
"RTN","BPSRPT3",435,0)
 ; Return Value   -> 0: All, 1: Selected Eligibilities; '^' = Exit
"RTN","BPSRPT3",436,0)
 ;                                       
"RTN","BPSRPT3",437,0)
 ; Output Variable -> BPELIG1 = 1 - One or More Eligibilities Selected
"RTN","BPSRPT3",438,0)
 ;                            = 0 - User Entered 'ALL'
"RTN","BPSRPT3",439,0)
 ;                            = "^" - User quit
"RTN","BPSRPT3",440,0)
 ;                            
"RTN","BPSRPT3",441,0)
 ; If BPELIG1 = 1 then the BPELIG1 array will be defined where:
"RTN","BPSRPT3",442,0)
 ;    BPELIG1("C")="CHAMPVA"
"RTN","BPSRPT3",443,0)
 ;    BPELIG1("T")="TRICARE"
"RTN","BPSRPT3",444,0)
 ;    BPELIG1("V")="VETERAN"
"RTN","BPSRPT3",445,0)
 ;
"RTN","BPSRPT3",446,0)
 ;
"RTN","BPSRPT3",447,0)
BPSELIG1 ;
"RTN","BPSRPT3",448,0)
 ;Reset BPELIG1 array
"RTN","BPSRPT3",449,0)
 K BPELIG1
"RTN","BPSRPT3",450,0)
 N DIR,DTOUT,DUOUT,DIRUT,DIROUT,X,Y,P
"RTN","BPSRPT3",451,0)
 N BPSVTC,BPSERR,BPSVTCSTR,BPSSEL,BPSX
"RTN","BPSRPT3",452,0)
 ;
"RTN","BPSRPT3",453,0)
 S BPSVTCSTR=",V,T,C,A,"
"RTN","BPSRPT3",454,0)
 S DIR(0)="FO^0:7"
"RTN","BPSRPT3",455,0)
 S DIR("A",1)=""
"RTN","BPSRPT3",456,0)
 S DIR("A",2)="Select one or more of the following:"
"RTN","BPSRPT3",457,0)
 S DIR("A",3)=""
"RTN","BPSRPT3",458,0)
 S DIR("A",4)="     V         VETERAN"
"RTN","BPSRPT3",459,0)
 S DIR("A",5)="     T         TRICARE"
"RTN","BPSRPT3",460,0)
 S DIR("A",6)="     C         CHAMPVA"
"RTN","BPSRPT3",461,0)
 S DIR("A",7)="     A         ALL"
"RTN","BPSRPT3",462,0)
 S DIR("A",8)=""
"RTN","BPSRPT3",463,0)
 S DIR("A")="Display (V)ETERAN or (T)RICARE or (C)HAMPVA or (A)LL"
"RTN","BPSRPT3",464,0)
 S DIR("B")="A" S:$G(BPARR("ELIG"))'="" DIR("B")=BPARR("ELIG")
"RTN","BPSRPT3",465,0)
 S DIR("?",1)="Enter a single response or multiple responses separated by commas."
"RTN","BPSRPT3",466,0)
 S DIR("?",2)=" Example:"
"RTN","BPSRPT3",467,0)
 S DIR("?",3)=" T"
"RTN","BPSRPT3",468,0)
 S DIR("?")=" T,C"
"RTN","BPSRPT3",469,0)
 D ^DIR K DIR
"RTN","BPSRPT3",470,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($D(DIRUT)) Q "^"
"RTN","BPSRPT3",471,0)
 ;
"RTN","BPSRPT3",472,0)
 ;Convert any lower case to upper case
"RTN","BPSRPT3",473,0)
 S X=$TR(X,BPSLC,BPSUC)
"RTN","BPSRPT3",474,0)
 ;
"RTN","BPSRPT3",475,0)
 ;If 'A' was one of the selections, reset X to include all available selections.
"RTN","BPSRPT3",476,0)
 I X[",",X["A" S X="V,T,C"
"RTN","BPSRPT3",477,0)
 ;
"RTN","BPSRPT3",478,0)
 ; Loop through user input (returned in variable X).
"RTN","BPSRPT3",479,0)
 ; Display warning message if any user input selection is not included
"RTN","BPSRPT3",480,0)
 ; in the string of acceptable codes (BPSVTCSTR) and re-prompt question.
"RTN","BPSRPT3",481,0)
 ; Assign valid selections to BPSVTC array. This array will prevent
"RTN","BPSRPT3",482,0)
 ; duplicate entries from being saved to the user's profile.
"RTN","BPSRPT3",483,0)
 ;
"RTN","BPSRPT3",484,0)
 K BPSVTC
"RTN","BPSRPT3",485,0)
 S BPSERR=""
"RTN","BPSRPT3",486,0)
 F BPSX=1:1:$L(X,",") D
"RTN","BPSRPT3",487,0)
 . S BPSSEL=$P(X,",",BPSX)
"RTN","BPSRPT3",488,0)
 . I BPSVTCSTR'[(","_BPSSEL_",") W !," ",BPSSEL," is not a valid entry." S BPSERR=1 Q
"RTN","BPSRPT3",489,0)
 . ; if All was selected don't include in array
"RTN","BPSRPT3",490,0)
 .   I BPSSEL'="A" S BPELIG1(BPSSEL)=$S(BPSSEL="V":"VETERAN",BPSSEL="T":"TRICARE",BPSSEL="C":"CHAMPVA",1:"")
"RTN","BPSRPT3",491,0)
 ;
"RTN","BPSRPT3",492,0)
 I $G(BPSERR)=1 G BPSELIG1
"RTN","BPSRPT3",493,0)
 ;
"RTN","BPSRPT3",494,0)
 ; ALL was selected
"RTN","BPSRPT3",495,0)
 I X="A" S BPELIG1=0
"RTN","BPSRPT3",496,0)
 E  D  ; 
"RTN","BPSRPT3",497,0)
 . ;User selected one or more eligibilities
"RTN","BPSRPT3",498,0)
 . S BPELIG1=1
"RTN","BPSRPT3",499,0)
 . ;
"RTN","BPSRPT3",500,0)
 . ; Display the user selections
"RTN","BPSRPT3",501,0)
 . ;
"RTN","BPSRPT3",502,0)
 . S BPSSEL=""
"RTN","BPSRPT3",503,0)
 . F  S BPSSEL=$O(BPELIG1(BPSSEL)) Q:BPSSEL=""  W !,?10,BPELIG1(BPSSEL)
"RTN","BPSRPT3",504,0)
 ;
"RTN","BPSRPT3",505,0)
 Q BPELIG1
"RTN","BPSRPT3",506,0)
 ;
"RTN","BPSRPT3",507,0)
SELALRC() ; 
"RTN","BPSRPT3",508,0)
 ; Display Most (R)ecent or (A)ll
"RTN","BPSRPT3",509,0)
 ;
"RTN","BPSRPT3",510,0)
 ; Return Value ->   A: All
"RTN","BPSRPT3",511,0)
 ;                   R: Most Recent
"RTN","BPSRPT3",512,0)
 ;                   ^: Exit
"RTN","BPSRPT3",513,0)
 ;
"RTN","BPSRPT3",514,0)
 N DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","BPSRPT3",515,0)
 ;
"RTN","BPSRPT3",516,0)
 S DIR(0)="S^R:Most Recent;A:ALL"
"RTN","BPSRPT3",517,0)
 S DIR("A")="Select Most (R)ecent or (A)ll"
"RTN","BPSRPT3",518,0)
 S DIR("B")="MOST RECENT"
"RTN","BPSRPT3",519,0)
 S DIR("L",1)="Select one of the following:"
"RTN","BPSRPT3",520,0)
 S DIR("L",2)=""
"RTN","BPSRPT3",521,0)
 S DIR("L",3)="     R         Most Recent Transaction Only"
"RTN","BPSRPT3",522,0)
 S DIR("L",4)="     A         ALL Transactions (will list the Rx/Fill each time resubmitted)"
"RTN","BPSRPT3",523,0)
 D ^DIR K DIR
"RTN","BPSRPT3",524,0)
 ;
"RTN","BPSRPT3",525,0)
 ;Check for "^" or timeout, 
"RTN","BPSRPT3",526,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",527,0)
 Q Y
"RTN","BPSRPT3",528,0)
 ;
"RTN","BPSRPT3",529,0)
SELNBSTS() ; 
"RTN","BPSRPT3",530,0)
 ; Select the Non-Billable Status Reason
"RTN","BPSRPT3",531,0)
 ; 
"RTN","BPSRPT3",532,0)
 ; Input Variable -> None
"RTN","BPSRPT3",533,0)
 ; Return Value   -> 0: All, 1: Selected Non-Billable Status; '^' = Exit
"RTN","BPSRPT3",534,0)
 ;                                       
"RTN","BPSRPT3",535,0)
 ; Output Variable -> BPNBSTS = 1 - One or More Non-Billable Statuses Selected
"RTN","BPSRPT3",536,0)
 ;                            = 0 - User Entered 'ALL'
"RTN","BPSRPT3",537,0)
 ;                            = "" - User quit
"RTN","BPSRPT3",538,0)
 ;                            
"RTN","BPSRPT3",539,0)
 ; If BPNBSTS = 1 then the BPNBSTS array will be defined where:
"RTN","BPSRPT3",540,0)
 ;    BPNBSTS(Non-Billable Status IEN)=Non-Billable Status Reason
"RTN","BPSRPT3",541,0)
 ;
"RTN","BPSRPT3",542,0)
 ;Reset BPNBSTS array
"RTN","BPSRPT3",543,0)
 K BPNBSTS
"RTN","BPSRPT3",544,0)
 N DIR,DTOUT,DUOUT,DIRUT,DIROUT,X,Y,P,DIC
"RTN","BPSRPT3",545,0)
 ;
"RTN","BPSRPT3",546,0)
 ;First see if they want to enter individual eligibilities or ALL
"RTN","BPSRPT3",547,0)
 S DIR(0)="S^S:NON-BILLABLE STATUS;A:ALL"
"RTN","BPSRPT3",548,0)
 S DIR("A")="Select Certain Non-Billable (S)tatus or (A)ll"
"RTN","BPSRPT3",549,0)
 S DIR("B")="ALL"
"RTN","BPSRPT3",550,0)
 S DIR("L",1)="Select one of the following:"
"RTN","BPSRPT3",551,0)
 S DIR("L",2)=""
"RTN","BPSRPT3",552,0)
 S DIR("L",3)="     S         NON-BILLABLE STATUS"
"RTN","BPSRPT3",553,0)
 S DIR("L",4)="     A         ALL"
"RTN","BPSRPT3",554,0)
 D ^DIR K DIR
"RTN","BPSRPT3",555,0)
 ;
"RTN","BPSRPT3",556,0)
 ;Check for "^" or timeout, otherwise define BPNBSTS
"RTN","BPSRPT3",557,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",558,0)
 S BPNBSTS=$S(Y="A":0,Y="^":"^",1:1)
"RTN","BPSRPT3",559,0)
 I BPNBSTS'=1 Q BPNBSTS
"RTN","BPSRPT3",560,0)
 ;
"RTN","BPSRPT3",561,0)
 ;Allow user to select multiple non-billable statuses
"RTN","BPSRPT3",562,0)
 F  D  Q:Y="^"!(Y="")
"RTN","BPSRPT3",563,0)
 .;Prompt for entry - ICR 6136
"RTN","BPSRPT3",564,0)
 .K X
"RTN","BPSRPT3",565,0)
 .S DIC(0)="QEAM",DIC=366.17,DIC("A")="Select Non-Billable Reason: "
"RTN","BPSRPT3",566,0)
 .W ! D ^DIC
"RTN","BPSRPT3",567,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^" Q
"RTN","BPSRPT3",568,0)
 .;
"RTN","BPSRPT3",569,0)
 .;Check for blank entry, quit if no previous selections
"RTN","BPSRPT3",570,0)
 .I $G(Y)=-1 S Y=$S($D(BPNBSTS)>9:"",1:"^") Q
"RTN","BPSRPT3",571,0)
 .;
"RTN","BPSRPT3",572,0)
 .; Add entry to array or handle duplicate entries
"RTN","BPSRPT3",573,0)
 .I '$D(BPNBSTS($P(Y,U,1))) S BPNBSTS($P(Y,U,1))=$P(Y,U,2),BPNBSTS("B",$P(Y,U,2),$P(Y,U,1))=""
"RTN","BPSRPT3",574,0)
 .E  D  I Y="^" Q
"RTN","BPSRPT3",575,0)
 ..;Already in the array, so ask whether to delete
"RTN","BPSRPT3",576,0)
 ..N P
"RTN","BPSRPT3",577,0)
 ..S P=Y  ;Save Original Value
"RTN","BPSRPT3",578,0)
 ..S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_$P(P,U,2)_" from your list?"
"RTN","BPSRPT3",579,0)
 ..S DIR("B")="NO"
"RTN","BPSRPT3",580,0)
 ..D ^DIR
"RTN","BPSRPT3",581,0)
 ..I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^" Q
"RTN","BPSRPT3",582,0)
 ..I Y="Y" K BPNBSTS($P(P,U,1)),BPNBSTS("B",$P(P,U,2),$P(P,U,1))
"RTN","BPSRPT3",583,0)
 ..S Y=P  ;Restore Original Value
"RTN","BPSRPT3",584,0)
 ..K P
"RTN","BPSRPT3",585,0)
 .;
"RTN","BPSRPT3",586,0)
 .;Display a list of selected values
"RTN","BPSRPT3",587,0)
 .I $D(BPNBSTS)>9 D
"RTN","BPSRPT3",588,0)
 ..N X
"RTN","BPSRPT3",589,0)
 ..W !,?2,"Selected:"
"RTN","BPSRPT3",590,0)
 ..S X="" F  S X=$O(BPNBSTS("B",X)) Q:X=""  W !,?10,X
"RTN","BPSRPT3",591,0)
 ..K X
"RTN","BPSRPT3",592,0)
 .Q
"RTN","BPSRPT3",593,0)
 ;
"RTN","BPSRPT3",594,0)
 ; Reset BPNBSTS array if user exited
"RTN","BPSRPT3",595,0)
 I Y="^" K BPNBSTS S BPNBSTS="^" Q "^"
"RTN","BPSRPT3",596,0)
 ;
"RTN","BPSRPT3",597,0)
 ; Deleted 'x-ref' as we don't need to return that
"RTN","BPSRPT3",598,0)
 K BPNBSTS("B")
"RTN","BPSRPT3",599,0)
 ; 
"RTN","BPSRPT3",600,0)
 Q 1
"RTN","BPSRPT3",601,0)
 ;
"RTN","BPSRPT3A")
0^6^B48335740
"RTN","BPSRPT3A",1,0)
BPSRPT3A ;AITC/CKB - ECME REPORTS ;9/28/2017
"RTN","BPSRPT3A",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**23**;JUN 2004;Build 44
"RTN","BPSRPT3A",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT3A",4,0)
 ;
"RTN","BPSRPT3A",5,0)
 Q
"RTN","BPSRPT3A",6,0)
 ;
"RTN","BPSRPT3A",7,0)
SELPRESC() ;
"RTN","BPSRPT3A",8,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3A",9,0)
 ;
"RTN","BPSRPT3A",10,0)
 ;Select to include (S)pecific Prescriber or (A)ll Prescribers
"RTN","BPSRPT3A",11,0)
 ;
"RTN","BPSRPT3A",12,0)
 S DIR(0)="S^S:SPECIFIC PRESCRIBER(S);A:ALL PRESCRIBERS"
"RTN","BPSRPT3A",13,0)
 S DIR("A")="Select Specific Prescriber(s) or include ALL Prescribers"
"RTN","BPSRPT3A",14,0)
 S DIR("B")="A"
"RTN","BPSRPT3A",15,0)
 S DIR("L",1)="Select one of the following:"
"RTN","BPSRPT3A",16,0)
 S DIR("L",2)=""
"RTN","BPSRPT3A",17,0)
 S DIR("L",3)="     S         Specific Prescriber(s)"
"RTN","BPSRPT3A",18,0)
 S DIR("L",4)="     A         ALL Prescribers"
"RTN","BPSRPT3A",19,0)
 D ^DIR K DIR
"RTN","BPSRPT3A",20,0)
 ;
"RTN","BPSRPT3A",21,0)
 ;If (A)LL was selected, return 0 (zero)
"RTN","BPSRPT3A",22,0)
 I Y="A" Q 0
"RTN","BPSRPT3A",23,0)
 ;If "^" was entered or there was a Timeout, return "^"
"RTN","BPSRPT3A",24,0)
 I (Y="^")!($G(DUOUT)=1)!($G(DTOUT)=1)!($D(DIRUT)) Q "^"
"RTN","BPSRPT3A",25,0)
 W !
"RTN","BPSRPT3A",26,0)
 ;
"RTN","BPSRPT3A",27,0)
BPPRESC ;
"RTN","BPSRPT3A",28,0)
 ;User selected (S)pecific Prescriber, allow user to select one or multiple Prescribers.
"RTN","BPSRPT3A",29,0)
 N DIC,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3A",30,0)
 N ARR,BPSARRAY,BPSRESCAR
"RTN","BPSRPT3A",31,0)
 K DIC,X,Y
"RTN","BPSRPT3A",32,0)
 ;
"RTN","BPSRPT3A",33,0)
 S DIC(0)="QEAM",DIC="^VA(200,",DIC("A")="Select Prescriber: "
"RTN","BPSRPT3A",34,0)
 S DIC("S")="I +$G(^VA(200,Y,""PS""))"
"RTN","BPSRPT3A",35,0)
 F  D ^DIC Q:X=""  D  Q:$G(BPSARRAY)="^"
"RTN","BPSRPT3A",36,0)
 . ; Check for "^" or a timeout, if found set BPSARRAY="^" and quit.
"RTN","BPSRPT3A",37,0)
 . I $D(DUOUT)!$D(DTOUT)!($D(DIRUT)) S BPSARRAY="^" Q
"RTN","BPSRPT3A",38,0)
 . ;
"RTN","BPSRPT3A",39,0)
 . ; Add selection to BPSARRAY and display Prescriber's Name.
"RTN","BPSRPT3A",40,0)
 . S BPSARRAY(+Y)=$P(Y,U,2)
"RTN","BPSRPT3A",41,0)
 . W " ",$P(Y,"^",2),!
"RTN","BPSRPT3A",42,0)
 . ;
"RTN","BPSRPT3A",43,0)
 . ; Display a list of current selections.
"RTN","BPSRPT3A",44,0)
 . I $D(BPSARRAY) D
"RTN","BPSRPT3A",45,0)
 . . S ARR="" F  S ARR=$O(BPSARRAY(ARR)) Q:'ARR  W ?10,BPSARRAY(ARR),!
"RTN","BPSRPT3A",46,0)
 ;
"RTN","BPSRPT3A",47,0)
 ; If BPSARRAY="^" quit and return "^".
"RTN","BPSRPT3A",48,0)
 I $G(BPSARRAY)="^" Q "^"
"RTN","BPSRPT3A",49,0)
 ;
"RTN","BPSRPT3A",50,0)
 ; If nothing was selected, return "^" so the user will return to the menu 
"RTN","BPSRPT3A",51,0)
 I '$D(BPSARRAY) Q "^"
"RTN","BPSRPT3A",52,0)
 ;
"RTN","BPSRPT3A",53,0)
 ; Create a comma delimited string BPSRESCAR that contains the selected Prescribers ien's.
"RTN","BPSRPT3A",54,0)
 S BPSRESCAR=""
"RTN","BPSRPT3A",55,0)
 S ARR="" F  S ARR=$O(BPSARRAY(ARR)) Q:'ARR  S BPSRESCAR=BPSRESCAR_ARR_","
"RTN","BPSRPT3A",56,0)
 ;
"RTN","BPSRPT3A",57,0)
 Q BPSRESCAR
"RTN","BPSRPT3A",58,0)
 ;
"RTN","BPSRPT3A",59,0)
SELPA(DFLT) ;
"RTN","BPSRPT3A",60,0)
 ;
"RTN","BPSRPT3A",61,0)
 ; Display (P)atients or (A)ll
"RTN","BPSRPT3A",62,0)
 ; 
"RTN","BPSRPT3A",63,0)
 ;    Input Variable -> DFLT = ALL
"RTN","BPSRPT3A",64,0)
 ;                          
"RTN","BPSRPT3A",65,0)
 ;     Return Value ->   1 = Patients
"RTN","BPSRPT3A",66,0)
 ;                       0 = ALL
"RTN","BPSRPT3A",67,0)
 ;                       ^ = Exit
"RTN","BPSRPT3A",68,0)
 ;                       
"RTN","BPSRPT3A",69,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3A",70,0)
 S DFLT="ALL"
"RTN","BPSRPT3A",71,0)
 S DIR(0)="S^P:Patient;A:ALL"
"RTN","BPSRPT3A",72,0)
 S DIR("A")="Display Selected (P)atients or (A)LL"
"RTN","BPSRPT3A",73,0)
 S DIR("B")=DFLT
"RTN","BPSRPT3A",74,0)
 D ^DIR
"RTN","BPSRPT3A",75,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3A",76,0)
 S Y=$S(Y="A":0,Y="P":1,1:Y)
"RTN","BPSRPT3A",77,0)
 Q Y
"RTN","BPSRPT3A",78,0)
 ;
"RTN","BPSRPT3A",79,0)
SELPAT() ;
"RTN","BPSRPT3A",80,0)
 ; Allow user to select a single or multiple PATIENT(s).
"RTN","BPSRPT3A",81,0)
 ;
"RTN","BPSRPT3A",82,0)
 ; If the users selected one or more PATIENTs, the selection will be stored
"RTN","BPSRPT3A",83,0)
 ; in BPARR("PATIENT")separated by a comma. e.g. BPARR("PATIENT")= patient ien1 , patient ien2
"RTN","BPSRPT3A",84,0)
 ;
"RTN","BPSRPT3A",85,0)
BPPAT ;
"RTN","BPSRPT3A",86,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3A",87,0)
 N BPARR,BPSARRAY,BPSIEN
"RTN","BPSRPT3A",88,0)
 ;
"RTN","BPSRPT3A",89,0)
 S BPARR("PATIENT")=""
"RTN","BPSRPT3A",90,0)
 ;
"RTN","BPSRPT3A",91,0)
 ; The SEL tag prompts user to 'Select Patient' and validates the selection against the PATIENT file.
"RTN","BPSRPT3A",92,0)
 D SEL("Patient","^DPT(",.BPSARRAY)
"RTN","BPSRPT3A",93,0)
 ;
"RTN","BPSRPT3A",94,0)
 ; If the user entered "^" quit, no longer prompting the user to 'Select Patient'
"RTN","BPSRPT3A",95,0)
 I $G(BPSARRAY)="^" Q "^"
"RTN","BPSRPT3A",96,0)
 ;
"RTN","BPSRPT3A",97,0)
 ; If no Patient was selected, return "^" so the user will return to the menu 
"RTN","BPSRPT3A",98,0)
 I $G(BPSARRAY)=0 Q "^"
"RTN","BPSRPT3A",99,0)
 ;
"RTN","BPSRPT3A",100,0)
 M BPARR("PATIENT")=BPSARRAY
"RTN","BPSRPT3A",101,0)
 ;
"RTN","BPSRPT3A",102,0)
 ; Creates a string of all the patient ien's selected separated by a comma.
"RTN","BPSRPT3A",103,0)
 S BPSIEN=""
"RTN","BPSRPT3A",104,0)
 F  S BPSIEN=$O(BPARR("PATIENT",BPSIEN)) Q:BPSIEN=""  D
"RTN","BPSRPT3A",105,0)
 . I BPARR("PATIENT")'="" S BPARR("PATIENT")=BPARR("PATIENT")_","
"RTN","BPSRPT3A",106,0)
 . S BPARR("PATIENT")=BPARR("PATIENT")_BPSIEN
"RTN","BPSRPT3A",107,0)
 . Q
"RTN","BPSRPT3A",108,0)
 ;
"RTN","BPSRPT3A",109,0)
 Q BPARR("PATIENT")
"RTN","BPSRPT3A",110,0)
 ;
"RTN","BPSRPT3A",111,0)
SELBAMT() ;
"RTN","BPSRPT3A",112,0)
 ;
"RTN","BPSRPT3A",113,0)
 ; Select (R)ange for Billed Amount or (A)ll
"RTN","BPSRPT3A",114,0)
 ; 
"RTN","BPSRPT3A",115,0)
 ;    Input Variable -> DFLT = ALL
"RTN","BPSRPT3A",116,0)
 ;                          
"RTN","BPSRPT3A",117,0)
 ;     Return Value ->   1 = Billed Amt Range
"RTN","BPSRPT3A",118,0)
 ;                       0 = ALL
"RTN","BPSRPT3A",119,0)
 ;                       ^ = Exit
"RTN","BPSRPT3A",120,0)
 ;                       
"RTN","BPSRPT3A",121,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3A",122,0)
 S DFLT="ALL"
"RTN","BPSRPT3A",123,0)
 S DIR(0)="S^R:Range;A:ALL"
"RTN","BPSRPT3A",124,0)
 S DIR("A")="Select (R)ange for Billed Amount or (A)LL"
"RTN","BPSRPT3A",125,0)
 S DIR("B")=DFLT
"RTN","BPSRPT3A",126,0)
 D ^DIR
"RTN","BPSRPT3A",127,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3A",128,0)
 S Y=$S(Y="A":0,Y="R":1,1:Y)
"RTN","BPSRPT3A",129,0)
 Q Y
"RTN","BPSRPT3A",130,0)
 ;
"RTN","BPSRPT3A",131,0)
SELBMIN() ;
"RTN","BPSRPT3A",132,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3A",133,0)
 ;
"RTN","BPSRPT3A",134,0)
 S DIR("A")="     Minimum Billed Amount: "
"RTN","BPSRPT3A",135,0)
 S DIR("B")=0
"RTN","BPSRPT3A",136,0)
 S DIR(0)="NA^0:999999"
"RTN","BPSRPT3A",137,0)
 S DIR("?",1)="Enter the minimum billed amount OR press"
"RTN","BPSRPT3A",138,0)
 S DIR("?",2)="return for a minimum billed amount of zero (0)."
"RTN","BPSRPT3A",139,0)
 S DIR("?")=" Example: 500 - no decimal digits"
"RTN","BPSRPT3A",140,0)
 D ^DIR
"RTN","BPSRPT3A",141,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) Q "^"
"RTN","BPSRPT3A",142,0)
 Q Y
"RTN","BPSRPT3A",143,0)
 ;
"RTN","BPSRPT3A",144,0)
SELBMAX() ;
"RTN","BPSRPT3A",145,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3A",146,0)
 ;
"RTN","BPSRPT3A",147,0)
 S DIR("A")="     Maximum Billed Amount: "
"RTN","BPSRPT3A",148,0)
 S DIR("B")=999999
"RTN","BPSRPT3A",149,0)
 S DIR(0)="NA^0:999999^I X'>$G(BPMIN) W !,""The Maximum Billed Amount must be greater than the Minimum Billed Amount."" K X"
"RTN","BPSRPT3A",150,0)
 S DIR("?",1)="Enter the maximum billed amount. The amount"
"RTN","BPSRPT3A",151,0)
 S DIR("?",2)="entered must be greater than the minimum billed."
"RTN","BPSRPT3A",152,0)
 S DIR("?")=" Example: 1500 - no decimal digits"
"RTN","BPSRPT3A",153,0)
 D ^DIR
"RTN","BPSRPT3A",154,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) Q "^"
"RTN","BPSRPT3A",155,0)
 Q Y
"RTN","BPSRPT3A",156,0)
 ;
"RTN","BPSRPT3A",157,0)
SELDRG1() ;
"RTN","BPSRPT3A",158,0)
 ;
"RTN","BPSRPT3A",159,0)
 ; Allow user to select a single or multiple DRUGS.
"RTN","BPSRPT3A",160,0)
 ;
"RTN","BPSRPT3A",161,0)
 ; The users selection is stored in BPARR("DRUG") separated by a comma.
"RTN","BPSRPT3A",162,0)
 ;  BPARR("DRUG")=drug ien1,drug ien2
"RTN","BPSRPT3A",163,0)
 ;
"RTN","BPSRPT3A",164,0)
DRG1 ;
"RTN","BPSRPT3A",165,0)
 N BPARR,BPSIEN,BPSDRGARR
"RTN","BPSRPT3A",166,0)
 S BPARR("DRUG")=""
"RTN","BPSRPT3A",167,0)
 ;
"RTN","BPSRPT3A",168,0)
 ; The SEL tag prompts user to 'Select Drug' and validates the selection against the DRUG file.
"RTN","BPSRPT3A",169,0)
 D SEL("Drug","^PSDRUG(",.BPSDRGARR)
"RTN","BPSRPT3A",170,0)
 ;
"RTN","BPSRPT3A",171,0)
 ; If the user entered "^" quit, no longer prompting the user to 'Select Drug'
"RTN","BPSRPT3A",172,0)
 I $G(BPSDRGARR)="^" Q "^"
"RTN","BPSRPT3A",173,0)
 ;
"RTN","BPSRPT3A",174,0)
 ; If no drug was selected, return "^" so the user will return to the menu
"RTN","BPSRPT3A",175,0)
 I $G(BPSDRGARR)=0 Q "^"
"RTN","BPSRPT3A",176,0)
 ;
"RTN","BPSRPT3A",177,0)
 M BPARR("DRUG")=BPSDRGARR
"RTN","BPSRPT3A",178,0)
 ;
"RTN","BPSRPT3A",179,0)
 ; Creates a string of all the drug ien's selected separated by a comma.
"RTN","BPSRPT3A",180,0)
 S BPSIEN=""
"RTN","BPSRPT3A",181,0)
 F  S BPSIEN=$O(BPARR("DRUG",BPSIEN)) Q:BPSIEN=""  D
"RTN","BPSRPT3A",182,0)
 . I BPARR("DRUG")'="" S BPARR("DRUG")=BPARR("DRUG")_","
"RTN","BPSRPT3A",183,0)
 . S BPARR("DRUG")=BPARR("DRUG")_BPSIEN
"RTN","BPSRPT3A",184,0)
 . Q
"RTN","BPSRPT3A",185,0)
 ;
"RTN","BPSRPT3A",186,0)
 Q BPARR("DRUG")
"RTN","BPSRPT3A",187,0)
 ;
"RTN","BPSRPT3A",188,0)
SELDC() ;
"RTN","BPSRPT3A",189,0)
 ;
"RTN","BPSRPT3A",190,0)
 ; Allow user to select a single or multiple DRUG CLASSes,
"RTN","BPSRPT3A",191,0)
 ;
"RTN","BPSRPT3A",192,0)
 ; The users selection is stored in BPARR("DRUG CLASS") separated by a semi colon.
"RTN","BPSRPT3A",193,0)
 ; BPARR("DRUG CLASS")=dc name ien ; dc name ien
"RTN","BPSRPT3A",194,0)
 ;
"RTN","BPSRPT3A",195,0)
DRGCL ;
"RTN","BPSRPT3A",196,0)
 N BPARR,BPSIEN,BPSDCARR
"RTN","BPSRPT3A",197,0)
 S BPARR("DRUG CLASS")=""
"RTN","BPSRPT3A",198,0)
 ;
"RTN","BPSRPT3A",199,0)
 ; The SEL tag prompts user and validates the selection against the DRUG CLASS file.
"RTN","BPSRPT3A",200,0)
 D SEL("Drug Class","^PS(50.605,",.BPSDCARR)
"RTN","BPSRPT3A",201,0)
 ;
"RTN","BPSRPT3A",202,0)
 ; If the user entered "^" quit, no longer prompting the user to 'Select Drug Class'
"RTN","BPSRPT3A",203,0)
 I $G(BPSDCARR)="^" Q "^"
"RTN","BPSRPT3A",204,0)
 ;
"RTN","BPSRPT3A",205,0)
 ; If no drug was selected, return "^" so the user will return to the menu
"RTN","BPSRPT3A",206,0)
 I $G(BPSDCARR)=0 Q "^"
"RTN","BPSRPT3A",207,0)
 ;
"RTN","BPSRPT3A",208,0)
 M BPARR("DRUG CLASS")=BPSDCARR
"RTN","BPSRPT3A",209,0)
 ;
"RTN","BPSRPT3A",210,0)
 ; Creates a string of all the drug class ien's selected separated by a comma. 
"RTN","BPSRPT3A",211,0)
 S BPSIEN=""
"RTN","BPSRPT3A",212,0)
 F  S BPSIEN=$O(BPARR("DRUG CLASS",BPSIEN)) Q:BPSIEN=""  D
"RTN","BPSRPT3A",213,0)
 . I BPARR("DRUG CLASS")'="" S BPARR("DRUG CLASS")=BPARR("DRUG CLASS")_";"
"RTN","BPSRPT3A",214,0)
 . S BPARR("DRUG CLASS")=BPARR("DRUG CLASS")_$$GET1^DIQ(50.605,BPSIEN,1)
"RTN","BPSRPT3A",215,0)
 . Q
"RTN","BPSRPT3A",216,0)
 ;
"RTN","BPSRPT3A",217,0)
 Q BPARR("DRUG CLASS")
"RTN","BPSRPT3A",218,0)
 ; 
"RTN","BPSRPT3A",219,0)
SEL(FIELD,FILE,BPSARRAY,DEFAULT) ;
"RTN","BPSRPT3A",220,0)
 ; Provides field selection for One or More
"RTN","BPSRPT3A",221,0)
 N DIC,DTOUT,DUOUT,QT,Y,X
"RTN","BPSRPT3A",222,0)
 N BPSARR
"RTN","BPSRPT3A",223,0)
 ;
"RTN","BPSRPT3A",224,0)
 S DIC=FILE,DIC(0)="QEZAM",DIC("A")="Select "_FIELD_": "
"RTN","BPSRPT3A",225,0)
 I $G(DEFAULT)'="" S DIC("B")=DEFAULT
"RTN","BPSRPT3A",226,0)
 F  D ^DIC Q:X=""  D  Q:$G(QT)
"RTN","BPSRPT3A",227,0)
 . ; Check for "^" or timeout, if found set BPSARRAY="^" and quit.
"RTN","BPSRPT3A",228,0)
 . I $D(DTOUT)!$D(DUOUT) K BPSARRAY S BPSARRAY="^",QT=1 Q
"RTN","BPSRPT3A",229,0)
 . ;
"RTN","BPSRPT3A",230,0)
 . ; If selection already exists in BPSARRAY, then display  message
"RTN","BPSRPT3A",231,0)
 . ; "(already selected)" and prompt for next selection.
"RTN","BPSRPT3A",232,0)
 . I $D(BPSARRAY(+Y)) W "   (already selected)"
"RTN","BPSRPT3A",233,0)
 . S BPSARRAY(+Y)=$P(Y,"^",2)
"RTN","BPSRPT3A",234,0)
 . W "  ",$P(Y,"^",2),!
"RTN","BPSRPT3A",235,0)
 . ;
"RTN","BPSRPT3A",236,0)
 . S DIC("A")="Select "_FIELD_": "
"RTN","BPSRPT3A",237,0)
 . ;
"RTN","BPSRPT3A",238,0)
 . ; display a list of current selections
"RTN","BPSRPT3A",239,0)
 . I FIELD="Drug Class" D
"RTN","BPSRPT3A",240,0)
 . . S BPSARR=""
"RTN","BPSRPT3A",241,0)
 . . F  S BPSARR=$O(BPSARRAY(BPSARR)) Q:'BPSARR  I BPSARR'=+Y W ?3,$$GET1^DIQ(50.605,BPSARR,1),"  ",$$GET1^DIQ(50.605,BPSARR,.01),!
"RTN","BPSRPT3A",242,0)
 . ;
"RTN","BPSRPT3A",243,0)
 . I $D(BPSARRAY),FIELD'="Drug Class" D
"RTN","BPSRPT3A",244,0)
 . . S BPSARR="" F  S BPSARR=$O(BPSARRAY(BPSARR)) Q:'BPSARR  W ?10,BPSARRAY(BPSARR),!
"RTN","BPSRPT3A",245,0)
 . K DIC("B")
"RTN","BPSRPT3A",246,0)
 ;
"RTN","BPSRPT3A",247,0)
 ; If nothing was selected set BPSARRAY=0
"RTN","BPSRPT3A",248,0)
 I '$D(BPSARRAY) S BPSARRAY=0
"RTN","BPSRPT3A",249,0)
 Q
"RTN","BPSRPT3A",250,0)
 ;
"RTN","BPSRPT4")
0^1^B135691834
"RTN","BPSRPT4",1,0)
BPSRPT4 ;BHAM ISC/BEE - ECME REPORTS (CONT) ;14-FEB-05
"RTN","BPSRPT4",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,10,11,19,23**;JUN 2004;Build 44
"RTN","BPSRPT4",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT4",4,0)
 ;
"RTN","BPSRPT4",5,0)
 Q
"RTN","BPSRPT4",6,0)
 ;
"RTN","BPSRPT4",7,0)
 ; Include Rxs - (R)ELEASED or (N)OT RELEASED or (A)LL
"RTN","BPSRPT4",8,0)
 ;
"RTN","BPSRPT4",9,0)
 ;    Input Variable -> DFLT = 3 NOT RELEASED
"RTN","BPSRPT4",10,0)
 ;                             2 RELEASED
"RTN","BPSRPT4",11,0)
 ;                             1 ALL
"RTN","BPSRPT4",12,0)
 ;                          
"RTN","BPSRPT4",13,0)
 ;    Return Value ->   3 = NOT RELEASED
"RTN","BPSRPT4",14,0)
 ;                      2 = RELEASED
"RTN","BPSRPT4",15,0)
 ;                      1 = ALL
"RTN","BPSRPT4",16,0)
 ;                      ^ = Exit
"RTN","BPSRPT4",17,0)
 ;
"RTN","BPSRPT4",18,0)
SELRLNRL(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT4",19,0)
 S DFLT=$S($G(DFLT)=1:"ALL",$G(DFLT)=3:"NOT RELEASED",1:"RELEASED")
"RTN","BPSRPT4",20,0)
 S DIR(0)="S^R:RELEASED;N:NOT RELEASED;A:ALL"
"RTN","BPSRPT4",21,0)
 S DIR("A")="Include Rxs - (R)ELEASED or (N)OT RELEASED or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",22,0)
 D ^DIR
"RTN","BPSRPT4",23,0)
 ;
"RTN","BPSRPT4",24,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",25,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S Y="^"
"RTN","BPSRPT4",26,0)
 ;
"RTN","BPSRPT4",27,0)
 S Y=$S(Y="A":1,Y="R":2,Y="N":3,1:Y)
"RTN","BPSRPT4",28,0)
 ;
"RTN","BPSRPT4",29,0)
 Q Y
"RTN","BPSRPT4",30,0)
 ;
"RTN","BPSRPT4",31,0)
 ; Select to Include (S)pecific Reject Code or (A)ll
"RTN","BPSRPT4",32,0)
 ;                          
"RTN","BPSRPT4",33,0)
 ; Return Value ->   ptr = pointer to BPS NCPDP REJECT CODES (#9002313.93)
"RTN","BPSRPT4",34,0)
 ;  if more than 1 Reject Code is selected, a string of pointers seperated by commas is returned.
"RTN","BPSRPT4",35,0)
 ;            ptr,ptr,...= pointers to BPS NCPDP REJECT CODES (#9002313.93)
"RTN","BPSRPT4",36,0)
 ;                     0 = All Reject Codes
"RTN","BPSRPT4",37,0)
 ;                     ^ = Exit
"RTN","BPSRPT4",38,0)
 ;
"RTN","BPSRPT4",39,0)
SELREJCD() ;
"RTN","BPSRPT4",40,0)
 ; User input will be temporarily stored in BPS115AR for display to user 
"RTN","BPSRPT4",41,0)
 ; of selected REJECT CODES.
"RTN","BPSRPT4",42,0)
 ; 
"RTN","BPSRPT4",43,0)
 ; If 'S' is selected, at least one REJECT CODE must be selected. If no selection 
"RTN","BPSRPT4",44,0)
 ; was made the user will be re-prompted to select a reject code.
"RTN","BPSRPT4",45,0)
 ; 
"RTN","BPSRPT4",46,0)
 ; Upon completion of REJECT CODE(s) entry, values will be placed into a string 
"RTN","BPSRPT4",47,0)
 ; delimited by commas. e.g. BPARR("REJ")="50,60,"
"RTN","BPSRPT4",48,0)
 ; 
"RTN","BPSRPT4",49,0)
 ; BPSRCAR = array containing REJECT CODE information
"RTN","BPSRPT4",50,0)
 ; BPSRCAR(BPSRC)=BPSRCE
"RTN","BPSRPT4",51,0)
 ;  BPSRC = IEN from File #9002313.93 / BPSRCE = Reject Code Explanation  
"RTN","BPSRPT4",52,0)
 ;
"RTN","BPSRPT4",53,0)
 N BPSREJ,DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT4",54,0)
 ;
"RTN","BPSRPT4",55,0)
 ; BPSREJ = 1^S - Specific Reject Code
"RTN","BPSRPT4",56,0)
 ;          1^A - ALL
"RTN","BPSRPT4",57,0)
 ;           -1 - if user entered "^"
"RTN","BPSRPT4",58,0)
 ;
"RTN","BPSRPT4",59,0)
 S BPSREJ=$$EDITFLD^BPSSCRCV(1.1,DUZ,"S^S:Specific Reject Code;A:ALL","Include (S)pecific Reject Code or (A)LL","ALL",.BPARR)
"RTN","BPSRPT4",60,0)
 ;
"RTN","BPSRPT4",61,0)
 ;If (A)LL was selected, return 0 (zero)
"RTN","BPSRPT4",62,0)
 I BPSREJ["A" Q 0
"RTN","BPSRPT4",63,0)
 ;If user entered "^" to exit, return "^"
"RTN","BPSRPT4",64,0)
 I BPSREJ=-1 Q "^"
"RTN","BPSRPT4",65,0)
 ;
"RTN","BPSRPT4",66,0)
BPSREJCD ;
"RTN","BPSRPT4",67,0)
 N BPARR,BPSCNT,BPSRC,BPSRCAR,BPSRCC,BPSRCE,BPSRCX
"RTN","BPSRPT4",68,0)
 N DFLTVAL,DIR0,PRMTMSG
"RTN","BPSRPT4",69,0)
 ;
"RTN","BPSRPT4",70,0)
 ;If (S)pecific Reject Code was selected, assign existing entry(s) into BPS115AR array.
"RTN","BPSRPT4",71,0)
 I $P(BPSREJ,U,2)="S" D
"RTN","BPSRPT4",72,0)
 . ;Prompt user to enter one or multiple Reject Codes
"RTN","BPSRPT4",73,0)
 . S BPSRC="" F  D  Q:BPSRC=-1
"RTN","BPSRPT4",74,0)
 . . S DIR0="P^BPSF(9002313.93,"
"RTN","BPSRPT4",75,0)
 . . S PRMTMSG="Select Reject Code"
"RTN","BPSRPT4",76,0)
 . . S DFLTVAL=""
"RTN","BPSRPT4",77,0)
 . . S BPSRC=$$PROMPT^BPSSCRCV(DIR0,PRMTMSG,DFLTVAL)
"RTN","BPSRPT4",78,0)
 . . ;
"RTN","BPSRPT4",79,0)
 . . ; If user didn't make a selection
"RTN","BPSRPT4",80,0)
 . . I BPSRC=-1 Q
"RTN","BPSRPT4",81,0)
 . . ;
"RTN","BPSRPT4",82,0)
 . . ; Get the Code and Explanation for the Reject Code selected
"RTN","BPSRPT4",83,0)
 . . S BPSRCC=$$GET1^DIQ(9002313.93,BPSRC,.01)
"RTN","BPSRPT4",84,0)
 . . S BPSRCE=$$GET1^DIQ(9002313.93,BPSRC,.02)
"RTN","BPSRPT4",85,0)
 . . ;
"RTN","BPSRPT4",86,0)
 . . ; If entry doesn't exist, add new entry into BPSRCAR array.
"RTN","BPSRPT4",87,0)
 . . I '$D(BPSRCAR(BPSRC)) S BPSRCAR(BPSRC)=BPSRCC_U_BPSRCE
"RTN","BPSRPT4",88,0)
 . . ;
"RTN","BPSRPT4",89,0)
 . . ; Display existing entry(s) to user.
"RTN","BPSRPT4",90,0)
 . . I $D(BPSRCAR) D
"RTN","BPSRPT4",91,0)
 . . . S BPSRC="" F  S BPSRC=$O(BPSRCAR(BPSRC)) Q:BPSRC=""  W !,?3,$P(BPSRCAR(BPSRC),U),?13,$P(BPSRCAR(BPSRC),U,2)
"RTN","BPSRPT4",92,0)
 . ;
"RTN","BPSRPT4",93,0)
 . ; If user selected (S)pecific Reject Code, return "^" in order for the user to return to the menu
"RTN","BPSRPT4",94,0)
 . I '$D(BPSRCAR) S BPARR("REJCD")="^" Q
"RTN","BPSRPT4",95,0)
 . ;
"RTN","BPSRPT4",96,0)
 . ; Loop through selected reject codes, set selected reject codes into BPARR("REJCD") delimited by comma. 
"RTN","BPSRPT4",97,0)
 . S BPARR("REJCD")=""
"RTN","BPSRPT4",98,0)
 . S BPSRC="" F  S BPSRC=$O(BPSRCAR(BPSRC)) Q:BPSRC=""  S BPARR("REJCD")=BPARR("REJCD")_BPSRC_","
"RTN","BPSRPT4",99,0)
 ;
"RTN","BPSRPT4",100,0)
SELRCX ;
"RTN","BPSRPT4",101,0)
 Q BPARR("REJCD")
"RTN","BPSRPT4",102,0)
 ;
"RTN","BPSRPT4",103,0)
 ; Include Auto(R)eversed or (A)LL
"RTN","BPSRPT4",104,0)
 ; 
"RTN","BPSRPT4",105,0)
 ;    Input Variable -> DFLT = 1 AutoReversed
"RTN","BPSRPT4",106,0)
 ;                             0 ALL
"RTN","BPSRPT4",107,0)
 ;                          
"RTN","BPSRPT4",108,0)
 ;    Return Value ->   1 = AutoReversed
"RTN","BPSRPT4",109,0)
 ;                      0 = ALL
"RTN","BPSRPT4",110,0)
 ;                      ^ = Exit
"RTN","BPSRPT4",111,0)
 ;
"RTN","BPSRPT4",112,0)
SELAUREV(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT4",113,0)
 ;
"RTN","BPSRPT4",114,0)
 S DFLT=$S($G(DFLT)=1:"AutoReversed",1:"ALL")
"RTN","BPSRPT4",115,0)
 S DIR(0)="S^R:AutoReversed;A:ALL"
"RTN","BPSRPT4",116,0)
 S DIR("A")="Include Auto(R)eversed or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",117,0)
 D ^DIR
"RTN","BPSRPT4",118,0)
 ;
"RTN","BPSRPT4",119,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",120,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S Y="^"
"RTN","BPSRPT4",121,0)
 ;
"RTN","BPSRPT4",122,0)
 S Y=$S(Y="A":0,Y="R":1,1:Y)
"RTN","BPSRPT4",123,0)
 ;
"RTN","BPSRPT4",124,0)
 Q Y
"RTN","BPSRPT4",125,0)
 ;
"RTN","BPSRPT4",126,0)
 ; Include A(C)cepted or (R)ejected or (A)LL
"RTN","BPSRPT4",127,0)
 ; 
"RTN","BPSRPT4",128,0)
 ;    Input Variable -> DFLT = 2 Accepted
"RTN","BPSRPT4",129,0)
 ;                             1 Rejected
"RTN","BPSRPT4",130,0)
 ;                             0 ALL
"RTN","BPSRPT4",131,0)
 ;                          
"RTN","BPSRPT4",132,0)
 ;    Return Value ->   2 = Accepted
"RTN","BPSRPT4",133,0)
 ;                      1 = Rejected
"RTN","BPSRPT4",134,0)
 ;                      0 = ALL
"RTN","BPSRPT4",135,0)
 ;                      ^ = Exit
"RTN","BPSRPT4",136,0)
 ;
"RTN","BPSRPT4",137,0)
SELACREJ(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT4",138,0)
 ;
"RTN","BPSRPT4",139,0)
 S DFLT=$S($G(DFLT)=2:"Accepted",$G(DFLT)=1:"Rejected",1:"ALL")
"RTN","BPSRPT4",140,0)
 S DIR(0)="S^C:Accepted;R:Rejected;A:ALL"
"RTN","BPSRPT4",141,0)
 S DIR("A")="Include A(C)cepted or (R)ejected or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",142,0)
 D ^DIR
"RTN","BPSRPT4",143,0)
 ;
"RTN","BPSRPT4",144,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",145,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S Y="^"
"RTN","BPSRPT4",146,0)
 ;
"RTN","BPSRPT4",147,0)
 S Y=$S(Y="C":2,Y="R":1,Y="A":0,1:Y)
"RTN","BPSRPT4",148,0)
 ;
"RTN","BPSRPT4",149,0)
 Q Y
"RTN","BPSRPT4",150,0)
 ;
"RTN","BPSRPT4",151,0)
 ; Select to Include (S)pecific Close Claim Reason or (A)ll
"RTN","BPSRPT4",152,0)
 ;
"RTN","BPSRPT4",153,0)
 ; Input Variable -> DFLT = 1 Specific CLAIMS TRACKING NON-BILLABLE REASONS
"RTN","BPSRPT4",154,0)
 ;                          0 All Reasons
"RTN","BPSRPT4",155,0)
 ;                          
"RTN","BPSRPT4",156,0)
 ; Return Value ->   ptr = pointer to CLAIMS TRACKING NON-BILLABLE REASONS (#356.8)
"RTN","BPSRPT4",157,0)
 ;                     0 = All Reasons
"RTN","BPSRPT4",158,0)
 ;                     ^ = Exit
"RTN","BPSRPT4",159,0)
 ;
"RTN","BPSRPT4",160,0)
SELCCRSN(DFLT) N DIC,DIR,DIRUT,DUOUT,RSN,X,Y
"RTN","BPSRPT4",161,0)
 ;
"RTN","BPSRPT4",162,0)
 S DFLT=$S($G(DFLT)=1:"Specific Close Claim Reason",1:"ALL")
"RTN","BPSRPT4",163,0)
 S DIR(0)="S^S:Specific Close Claim Reason;A:ALL"
"RTN","BPSRPT4",164,0)
 S DIR("A")="Include (S)pecific Close Claim Reason or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",165,0)
 D ^DIR
"RTN","BPSRPT4",166,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT4",167,0)
 S RSN=$S(Y="S":1,Y="A":0,1:Y)
"RTN","BPSRPT4",168,0)
 ;
"RTN","BPSRPT4",169,0)
 ;Check for "^" or timeout
"RTN","BPSRPT4",170,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S (RSN,Y)="^"
"RTN","BPSRPT4",171,0)
 ;
"RTN","BPSRPT4",172,0)
 ;If Specific Reject Code selected, ask prompt
"RTN","BPSRPT4",173,0)
 I $G(RSN)=1 D
"RTN","BPSRPT4",174,0)
 .;
"RTN","BPSRPT4",175,0)
 .;Prompt for entry
"RTN","BPSRPT4",176,0)
 .K X S DIC(0)="QEAM",DIC=356.8,DIC("A")="Select Close Claim Reason: "
"RTN","BPSRPT4",177,0)
 .W ! D ^DIC
"RTN","BPSRPT4",178,0)
 .;
"RTN","BPSRPT4",179,0)
 .;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",180,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S (RSN,Y)="^" Q
"RTN","BPSRPT4",181,0)
 .;
"RTN","BPSRPT4",182,0)
 .;If valid entry, setup RSN
"RTN","BPSRPT4",183,0)
 .I +Y>0 S RSN=+Y
"RTN","BPSRPT4",184,0)
 ;
"RTN","BPSRPT4",185,0)
 Q RSN
"RTN","BPSRPT4",186,0)
 ; 
"RTN","BPSRPT4",187,0)
 ;Pull Selected BPS Pharmacies for Display
"RTN","BPSRPT4",188,0)
 ;
"RTN","BPSRPT4",189,0)
 ;  Input Variables: 
"RTN","BPSRPT4",190,0)
 ;  BPPHARM/BPPHARM(ptr) - Set to 0 for all pharmacies, if set to 1 array of internal
"RTN","BPSRPT4",191,0)
 ;                         pointers of selected pharmacies       
"RTN","BPSRPT4",192,0)
 ;                       - BPLEN = The length of the display field
"RTN","BPSRPT4",193,0)
 ;  Returned value -> List of selected BPS Pharmacies (possibly cut short)                 
"RTN","BPSRPT4",194,0)
 ; 
"RTN","BPSRPT4",195,0)
GETDIVS(BPLEN,BPPHARM) N BPDIV,BPSTR,BPQUIT
"RTN","BPSRPT4",196,0)
 I $G(BPPHARM)=0 S BPSTR="ALL"
"RTN","BPSRPT4",197,0)
 E  D
"RTN","BPSRPT4",198,0)
 .S BPDIV="",BPQUIT=0,BPSTR=""
"RTN","BPSRPT4",199,0)
 .F  S BPDIV=$O(BPPHARM(BPDIV)) Q:+BPDIV=0  D  Q:BPQUIT=1
"RTN","BPSRPT4",200,0)
 .. I $L(BPSTR_$$DIVNAME^BPSSCRDS(BPDIV))>(BPLEN-4) D  S BPQUIT=1 Q
"RTN","BPSRPT4",201,0)
 ... S BPSTR=$$LJ^BPSSCR02(BPSTR_",...",BPLEN)
"RTN","BPSRPT4",202,0)
 .. S BPSTR=BPSTR_$S(BPSTR]"":", ",1:"")_$$DIVNAME^BPSSCRDS(BPDIV)
"RTN","BPSRPT4",203,0)
 Q BPSTR
"RTN","BPSRPT4",204,0)
 ;
"RTN","BPSRPT4",205,0)
 ;Get the Reject Code
"RTN","BPSRPT4",206,0)
 ;
"RTN","BPSRPT4",207,0)
 ; Input variable -> 0 for All Reject Codes or
"RTN","BPSRPT4",208,0)
 ;                   lookup to BPS NCPDP REJECT CODES (#9002313.93)
"RTN","BPSRPT4",209,0)
 ; Returned value -> ALL or the selected Reject Code
"RTN","BPSRPT4",210,0)
 ; 
"RTN","BPSRPT4",211,0)
GETREJ(REJ) ;
"RTN","BPSRPT4",212,0)
 I REJ="0" S REJ="ALL"
"RTN","BPSRPT4",213,0)
 E  S REJ=$P($G(^BPSF(9002313.93,+REJ,0)),U,2)
"RTN","BPSRPT4",214,0)
 Q REJ
"RTN","BPSRPT4",215,0)
 ;
"RTN","BPSRPT4",216,0)
 ;Print Header 2 Line 1
"RTN","BPSRPT4",217,0)
 ;
"RTN","BPSRPT4",218,0)
 ; Input variable: BPRTYPE -> Report Type (1-7)
"RTN","BPSRPT4",219,0)
 ;
"RTN","BPSRPT4",220,0)
HEADLN1(BPRTYPE) ;
"RTN","BPSRPT4",221,0)
 I (",1,2,3,4,5,7,8,9,")[BPRTYPE W !,"PATIENT NAME",?27,"Pt.ID"
"RTN","BPSRPT4",222,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT4",223,0)
 . W ?35,"ELIG"
"RTN","BPSRPT4",224,0)
 . W ?40,"RX#"
"RTN","BPSRPT4",225,0)
 . W ?52,"REF/ECME#"
"RTN","BPSRPT4",226,0)
 . W ?73,"DATE"
"RTN","BPSRPT4",227,0)
 . W ?83,$J("$BILLED",10)
"RTN","BPSRPT4",228,0)
 . W ?102,$J("$INS RESPONSE",13)
"RTN","BPSRPT4",229,0)
 . W ?122,$J("$COLLECT",10)
"RTN","BPSRPT4",230,0)
 ;
"RTN","BPSRPT4",231,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT4",232,0)
 . W ?35,"ELIG"
"RTN","BPSRPT4",233,0)
 . W ?40,"RX#"
"RTN","BPSRPT4",234,0)
 . W ?52,"REF/ECME#"
"RTN","BPSRPT4",235,0)
 . W ?73,"DATE"
"RTN","BPSRPT4",236,0)
 . W ?83,"RELEASED ON"
"RTN","BPSRPT4",237,0)
 . W ?96,"RX INFO"
"RTN","BPSRPT4",238,0)
 . W ?114,"COB"
"RTN","BPSRPT4",239,0)
 . W ?121,"OPEN/CLOSED"
"RTN","BPSRPT4",240,0)
 ;
"RTN","BPSRPT4",241,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT4",242,0)
 . W ?35,"RX#"
"RTN","BPSRPT4",243,0)
 . W ?47,"REF/ECME#"
"RTN","BPSRPT4",244,0)
 . W ?68,"DATE"
"RTN","BPSRPT4",245,0)
 . W ?100,$J("$BILLED",10)
"RTN","BPSRPT4",246,0)
 . W ?119,$J("$INS RESPONSE",13)
"RTN","BPSRPT4",247,0)
 ;
"RTN","BPSRPT4",248,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT4",249,0)
 . W ?35,"RX#"
"RTN","BPSRPT4",250,0)
 . W ?47,"REF/ECME#"
"RTN","BPSRPT4",251,0)
 . W ?65,"COMPLETED"
"RTN","BPSRPT4",252,0)
 . W ?83,"TRANS TYPE"
"RTN","BPSRPT4",253,0)
 . W ?100,"PAYER RESPONSE"
"RTN","BPSRPT4",254,0)
 . W ?125,"COB"
"RTN","BPSRPT4",255,0)
 ;
"RTN","BPSRPT4",256,0)
 I BPRTYPE=6 D  Q
"RTN","BPSRPT4",257,0)
 . W !,?33,$J("AMOUNT",17)
"RTN","BPSRPT4",258,0)
 . W ?51,$J("RETURNED",17)
"RTN","BPSRPT4",259,0)
 . W ?69,$J("RETURNED",17)
"RTN","BPSRPT4",260,0)
 . W ?87,$J("AMOUNT",17)
"RTN","BPSRPT4",261,0)
 ;
"RTN","BPSRPT4",262,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT4",263,0)
 . W ?35,"ELIG"
"RTN","BPSRPT4",264,0)
 . W ?40,"RX#"
"RTN","BPSRPT4",265,0)
 . W ?52,"REF/ECME#"
"RTN","BPSRPT4",266,0)
 . W ?70,"RX INFO"
"RTN","BPSRPT4",267,0)
 . W ?89,"DRUG"
"RTN","BPSRPT4",268,0)
 . W ?118,"NDC"
"RTN","BPSRPT4",269,0)
 ;
"RTN","BPSRPT4",270,0)
 I (BPRTYPE=8) D  Q
"RTN","BPSRPT4",271,0)
 . W ?35,"RX#"
"RTN","BPSRPT4",272,0)
 . W ?47,"REF/ECME#"
"RTN","BPSRPT4",273,0)
 . W ?68,"DATE"
"RTN","BPSRPT4",274,0)
 . W ?78,$J("$BILLED",10)
"RTN","BPSRPT4",275,0)
 . W ?97,$J("$INS RESPONSE",13)
"RTN","BPSRPT4",276,0)
 . W ?122,$J("$COLLECT",10)
"RTN","BPSRPT4",277,0)
 ;
"RTN","BPSRPT4",278,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT4",279,0)
 . W ?35,"ELIG"
"RTN","BPSRPT4",280,0)
 . W ?40,"RX#"
"RTN","BPSRPT4",281,0)
 . W ?52,"REF"
"RTN","BPSRPT4",282,0)
 . W ?64,"DATE"
"RTN","BPSRPT4",283,0)
 . W ?84,$J("$DRUG COST",10)
"RTN","BPSRPT4",284,0)
 Q
"RTN","BPSRPT4",285,0)
 ;
"RTN","BPSRPT4",286,0)
 ;Print Header 2 Line 2
"RTN","BPSRPT4",287,0)
 ;
"RTN","BPSRPT4",288,0)
 ; Input variable: BPRTYPE -> Report Type (1-9)
"RTN","BPSRPT4",289,0)
 ; 
"RTN","BPSRPT4",290,0)
HEADLN2(BPRTYPE) ;
"RTN","BPSRPT4",291,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT4",292,0)
 . W !,?4,"DRUG"
"RTN","BPSRPT4",293,0)
 . W ?36,"NDC"
"RTN","BPSRPT4",294,0)
 . I BPRTYPE=1 W ?47,"RELEASED ON"
"RTN","BPSRPT4",295,0)
 . W ?68,"RX INFO"
"RTN","BPSRPT4",296,0)
 . I BPRTYPE=4 W ?92,"COB"
"RTN","BPSRPT4",297,0)
 . I BPRTYPE=1 W ?120,"BILL#",?129,"COB"
"RTN","BPSRPT4",298,0)
 ;
"RTN","BPSRPT4",299,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT4",300,0)
 . W !,?3,"CARDHOLD.ID"
"RTN","BPSRPT4",301,0)
 . W ?26,"GROUP ID"
"RTN","BPSRPT4",302,0)
 . W ?41,$J("$BILLED",10)
"RTN","BPSRPT4",303,0)
 . W ?54,"QTY"
"RTN","BPSRPT4",304,0)
 . W ?61,"NDC#"
"RTN","BPSRPT4",305,0)
 . W ?82,"PRESCRIBER ID"
"RTN","BPSRPT4",306,0)
 . W ?98,"NAME"
"RTN","BPSRPT4",307,0)
 ;
"RTN","BPSRPT4",308,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT4",309,0)
 . W !,?4,"DRUG"
"RTN","BPSRPT4",310,0)
 . W ?43,"NDC"
"RTN","BPSRPT4",311,0)
 . W ?68,"RX INFO"
"RTN","BPSRPT4",312,0)
 . W ?88,"COB"
"RTN","BPSRPT4",313,0)
 ;
"RTN","BPSRPT4",314,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT4",315,0)
 . W !,?4,"DRUG"
"RTN","BPSRPT4",316,0)
 . W ?32,"NDC"
"RTN","BPSRPT4",317,0)
 . W ?47,"RX INFO"
"RTN","BPSRPT4",318,0)
 . W ?69,"INSURANCE"
"RTN","BPSRPT4",319,0)
 . W ?112,"ELAP TIME IN SECONDS"
"RTN","BPSRPT4",320,0)
 ;
"RTN","BPSRPT4",321,0)
 I BPRTYPE=6 D  Q
"RTN","BPSRPT4",322,0)
 .W !,?1,"DATE"
"RTN","BPSRPT4",323,0)
 .W ?15,$J("#CLAIMS",17)
"RTN","BPSRPT4",324,0)
 .W ?33,$J("SUBMITTED",17)
"RTN","BPSRPT4",325,0)
 .W ?51,$J("REJECTED",17)
"RTN","BPSRPT4",326,0)
 .W ?69,$J("PAYABLE",17)
"RTN","BPSRPT4",327,0)
 .W ?87,$J("TO RECEIVE",17)
"RTN","BPSRPT4",328,0)
 .W ?115,$J("DIFFERENCE",17)
"RTN","BPSRPT4",329,0)
 ;
"RTN","BPSRPT4",330,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT4",331,0)
 . W !,?3,"CARDHOLD.ID"
"RTN","BPSRPT4",332,0)
 . W ?27,"GROUP ID"
"RTN","BPSRPT4",333,0)
 . W ?46,"CLOSE DATE/TIME"
"RTN","BPSRPT4",334,0)
 . W ?65,"CLOSED BY"
"RTN","BPSRPT4",335,0)
 . W ?93,"CLOSE REASON"
"RTN","BPSRPT4",336,0)
 . W ?126,"COB"
"RTN","BPSRPT4",337,0)
 ;
"RTN","BPSRPT4",338,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT4",339,0)
 . W !,?2,"DRUG"
"RTN","BPSRPT4",340,0)
 . W ?38,"RX INFO"
"RTN","BPSRPT4",341,0)
 . W ?54,"INS GROUP#"
"RTN","BPSRPT4",342,0)
 . W ?72,"INS GROUP NAME"
"RTN","BPSRPT4",343,0)
 . W ?125,"BILL#"
"RTN","BPSRPT4",344,0)
 ;
"RTN","BPSRPT4",345,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT4",346,0)
 . W !,?4,"DRUG"
"RTN","BPSRPT4",347,0)
 . W ?36,"NDC"
"RTN","BPSRPT4",348,0)
 . W ?47,"RELEASED ON"
"RTN","BPSRPT4",349,0)
 . W ?62,"RX INFO"
"RTN","BPSRPT4",350,0)
 . W ?75,"NON-BILLABLE STATUS"
"RTN","BPSRPT4",351,0)
 Q
"RTN","BPSRPT4",352,0)
 ;
"RTN","BPSRPT4",353,0)
 ;Print Header 2 Line 3
"RTN","BPSRPT4",354,0)
 ;
"RTN","BPSRPT4",355,0)
 ; Input variable: BPRTYPE -> Report Type (1-7)
"RTN","BPSRPT4",356,0)
 ; 
"RTN","BPSRPT4",357,0)
HEADLN3(BPTYP) ;
"RTN","BPSRPT4",358,0)
 I BPTYP=4 D  Q
"RTN","BPSRPT4",359,0)
 . W !,?6,"RELEASED ON"
"RTN","BPSRPT4",360,0)
 . W ?22,"REVERSAL METHOD/RETURN STATUS/REASON"
"RTN","BPSRPT4",361,0)
 ;
"RTN","BPSRPT4",362,0)
 I BPTYP=8 D  Q
"RTN","BPSRPT4",363,0)
 . W !,?4,"$PROVIDER NETWORK"
"RTN","BPSRPT4",364,0)
 . W ?23,"$BRAND DRUG"
"RTN","BPSRPT4",365,0)
 . W ?38,"$NON-PREF FORM"
"RTN","BPSRPT4",366,0)
 . W ?56,"$BRAND NON-PREF FORM"
"RTN","BPSRPT4",367,0)
 . W ?81,"$COVERAGE GAP"
"RTN","BPSRPT4",368,0)
 . W ?96,"$HEALTH ASST"
"RTN","BPSRPT4",369,0)
 . W ?111,"$SPEND ACCT REMAINING"
"RTN","BPSRPT4",370,0)
 Q
"RTN","BPSRPT4",371,0)
 ;
"RTN","BPSRPT4",372,0)
SELEXCEL() ; - Returns whether to capture data for Excel report.
"RTN","BPSRPT4",373,0)
 ; Output: EXCEL = 1 - YES (capture data) / 0 - NO (DO NOT capture data)
"RTN","BPSRPT4",374,0)
 ;
"RTN","BPSRPT4",375,0)
 N EXCEL,DIR,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","BPSRPT4",376,0)
 I ",1,2,3,4,"[(","_BPRTYPE_",") D
"RTN","BPSRPT4",377,0)
 . W !!,"Data fields VA Ingredient Cost, VA Dispensing Fee, Ingredient Cost Paid,",!
"RTN","BPSRPT4",378,0)
 . W "Dispensing Fee Paid and Patient Responsibility (INS) will only be included",!
"RTN","BPSRPT4",379,0)
 . W "when the report is captured for an Excel document.  All additional data fields",!
"RTN","BPSRPT4",380,0)
 . W "may not be present for all reports."
"RTN","BPSRPT4",381,0)
 S DIR(0)="Y",DIR("B")="NO",DIR("T")=DTIME W !
"RTN","BPSRPT4",382,0)
 S DIR("A")="Do you want to capture report data for an Excel document"
"RTN","BPSRPT4",383,0)
 S DIR("?")="^D HEXC^BPSRPT4"
"RTN","BPSRPT4",384,0)
 D ^DIR K DIR I $D(DIRUT)!$D(DTOUT)!$D(DUOUT)!$D(DIROUT) Q "^"
"RTN","BPSRPT4",385,0)
 K DIROUT,DTOUT,DUOUT,DIRUT
"RTN","BPSRPT4",386,0)
 S EXCEL=0 I Y S EXCEL=1
"RTN","BPSRPT4",387,0)
 ;
"RTN","BPSRPT4",388,0)
 ;Display Excel display message
"RTN","BPSRPT4",389,0)
 I EXCEL=1 D EXMSG
"RTN","BPSRPT4",390,0)
 ;
"RTN","BPSRPT4",391,0)
 Q EXCEL
"RTN","BPSRPT4",392,0)
 ;
"RTN","BPSRPT4",393,0)
HEXC ; - 'Do you want to capture data...' prompt
"RTN","BPSRPT4",394,0)
 W !!,"      Enter:  'Y'    -  To capture detail report data to transfer"
"RTN","BPSRPT4",395,0)
 W !,"                        to an Excel document"
"RTN","BPSRPT4",396,0)
 W !,"              '<CR>' -  To skip this option"
"RTN","BPSRPT4",397,0)
 W !,"              '^'    -  To quit this option"
"RTN","BPSRPT4",398,0)
 Q
"RTN","BPSRPT4",399,0)
 ;
"RTN","BPSRPT4",400,0)
 ;Display the message about capturing to an Excel file format
"RTN","BPSRPT4",401,0)
 ; 
"RTN","BPSRPT4",402,0)
EXMSG ;
"RTN","BPSRPT4",403,0)
 I (",2,")'[BPRTYPE D
"RTN","BPSRPT4",404,0)
 . W !!?5,"Before continuing, please set up your terminal to capture the"
"RTN","BPSRPT4",405,0)
 . W !?5,"detail report data. On some terminals, this can  be  done  by"
"RTN","BPSRPT4",406,0)
 . W !?5,"clicking  on the 'Tools' menu above, then click  on  'Capture"
"RTN","BPSRPT4",407,0)
 . W !?5,"Incoming  Data' to save to  Desktop. This  report  may take a"
"RTN","BPSRPT4",408,0)
 . W !?5,"while to run."
"RTN","BPSRPT4",409,0)
 . W !!?5,"Note: To avoid  undesired  wrapping of the data  saved to the"
"RTN","BPSRPT4",410,0)
 . W !?5,"      file, please enter '0;256;999' at the 'DEVICE:' prompt.",!
"RTN","BPSRPT4",411,0)
  E  D
"RTN","BPSRPT4",412,0)
 . W !!?5,"Before continuing, please set up your terminal to capture the"
"RTN","BPSRPT4",413,0)
 . W !?5,"detail report data and save the detail report data in a text file"
"RTN","BPSRPT4",414,0)
 . W !?5,"to a local drive. This report may take a while to run."
"RTN","BPSRPT4",415,0)
 . W !!?5,"Note: To avoid undesired wrapping of the data saved to the file,"
"RTN","BPSRPT4",416,0)
 . W !?5,"      please enter '0;256;99999' at the 'DEVICE:' prompt.",!
"RTN","BPSRPT4",417,0)
 Q
"RTN","BPSRPT5")
0^2^B175946250
"RTN","BPSRPT5",1,0)
BPSRPT5 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT5",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8,10,11,19,23**;JUN 2004;Build 44
"RTN","BPSRPT5",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT5",4,0)
 ;
"RTN","BPSRPT5",5,0)
 ;Reference to IB NCPCP NON-BILLABLE STATUS REASONS (#366.17) supported by ICR 6136
"RTN","BPSRPT5",6,0)
 ;
"RTN","BPSRPT5",7,0)
 ;Routine to Display the Reports
"RTN","BPSRPT5",8,0)
 ;
"RTN","BPSRPT5",9,0)
 ;Print Report Line 1
"RTN","BPSRPT5",10,0)
WRLINE1(BPRTYPE,BPREC,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT,BPBIL,BPINS,BPCOLL,BPEXCEL,BPPSEQ) ;
"RTN","BPSRPT5",11,0)
 ;Excel Output
"RTN","BPSRPT5",12,0)
 I $G(BPEXCEL) D WRLINE1^BPSRPT8(BPRTYPE,.BPREC,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT,BPBIL,BPINS,BPCOLL,BPPSEQ) Q
"RTN","BPSRPT5",13,0)
 ;Report Output
"RTN","BPSRPT5",14,0)
 W !,$$PATNAME^BPSRPT6(BPDFN)
"RTN","BPSRPT5",15,0)
 W ?27,"("_$$SSN4^BPSRPT6(BPDFN)_")"
"RTN","BPSRPT5",16,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT5",17,0)
 . N ELGCD S ELGCD=$$ELIGCODE^BPSSCR05($P(BPX,U,3))
"RTN","BPSRPT5",18,0)
 . W ?35,$S(ELGCD="V":"VET",ELGCD="T":"TRI",ELGCD="C":"CVA",1:"UNK")
"RTN","BPSRPT5",19,0)
 . W ?40,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)
"RTN","BPSRPT5",20,0)
 . W ?52,BPREF,"/",$$ECMENUM^BPSRPT1($P(BPX,U,3))
"RTN","BPSRPT5",21,0)
 . W ?73,$$DATTIM^BPSRPT1(BPSRTDT)
"RTN","BPSRPT5",22,0)
 . W ?83,$J(BPBIL,10,2),?105,$J(BPINS,10,2),?122,$S(BPCOLL]"":$J(BPCOLL,10,2),1:"")
"RTN","BPSRPT5",23,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT5",24,0)
 . N ELGCD S ELGCD=$$ELIGCODE^BPSSCR05($P(BPX,U,3))
"RTN","BPSRPT5",25,0)
 . W ?35,$S(ELGCD="V":"VET",ELGCD="T":"TRI",ELGCD="C":"CVA",1:"UNK")
"RTN","BPSRPT5",26,0)
 . W ?40,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)
"RTN","BPSRPT5",27,0)
 . W ?52,BPREF,"/",$$ECMENUM^BPSRPT1($P(BPX,U,3))
"RTN","BPSRPT5",28,0)
 . W ?73,$$DATTIM^BPSRPT1(BPSRTDT)
"RTN","BPSRPT5",29,0)
 . W ?83,$$DATTIM^BPSRPT1(+BPX)
"RTN","BPSRPT5",30,0)
 . W ?96,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",31,0)
 . W ?99,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",32,0)
 . W ?103,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",33,0)
 . W ?105,$S($P(BPX,U):"/R",1:"/N")
"RTN","BPSRPT5",34,0)
 . W ?114,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",35,0)
 . W ?121,$S($$CLOSED02^BPSSCR03($P(^BPST($P(BPX,U,3),0),U,4))=1:"Closed",1:"Open")
"RTN","BPSRPT5",36,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT5",37,0)
 . W ?35,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)
"RTN","BPSRPT5",38,0)
 . W ?47,BPREF,"/",$$ECMENUM^BPSRPT1($P(BPX,U,3))
"RTN","BPSRPT5",39,0)
 . W ?68,$$DATTIM^BPSRPT1(BPSRTDT)
"RTN","BPSRPT5",40,0)
 . W ?100,$J(BPBIL,10,2),?122,$J(BPINS,10,2)
"RTN","BPSRPT5",41,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT5",42,0)
 . W ?35,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)
"RTN","BPSRPT5",43,0)
 . W ?47,BPREF,"/",$$ECMENUM^BPSRPT1($P(BPX,U,3))
"RTN","BPSRPT5",44,0)
 . W ?65,$$DATTIM^BPSRPT1($$TRANDT^BPSRPT2($P(BPX,U,3),1))
"RTN","BPSRPT5",45,0)
 . W ?83,$$TTYPE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)
"RTN","BPSRPT5",46,0)
 . W ?100,$$RESPONSE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)
"RTN","BPSRPT5",47,0)
 . W ?125,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",48,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT5",49,0)
 . N ELGCD S ELGCD=$$ELIGCODE^BPSSCR05($P(BPX,U,3))
"RTN","BPSRPT5",50,0)
 . W ?35,$S(ELGCD="V":"VET",ELGCD="T":"TRI",ELGCD="C":"CVA",1:"UNK")
"RTN","BPSRPT5",51,0)
 . W ?40,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)
"RTN","BPSRPT5",52,0)
 . W ?52,BPREF,"/",$$ECMENUM^BPSRPT1($P(BPX,U,3))
"RTN","BPSRPT5",53,0)
 . W ?70,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",54,0)
 . W ?73,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",55,0)
 . W ?77,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",56,0)
 . W ?79,$S($P(BPX,U):"/R",1:"/N")
"RTN","BPSRPT5",57,0)
 . W ?84,$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT5",58,0)
 . W ?89,$$DRGNAM^BPSRPT6($P(BPX,U,14),27)
"RTN","BPSRPT5",59,0)
 . W ?118,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",60,0)
 I BPRTYPE=8 D
"RTN","BPSRPT5",61,0)
 . W ?35,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)
"RTN","BPSRPT5",62,0)
 . W ?47,BPREF,"/",$$ECMENUM^BPSRPT1($P(BPX,U,3))
"RTN","BPSRPT5",63,0)
 . W ?68,$$DATTIM^BPSRPT1(BPSRTDT)
"RTN","BPSRPT5",64,0)
 . W ?78,$J(BPBIL,10,2),?100,$J(BPINS,10,2),?122,$S(BPCOLL]"":$J(BPCOLL,10,2),1:"")
"RTN","BPSRPT5",65,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT5",66,0)
 . N ELGCD S ELGCD=$P(BPX,U,1)
"RTN","BPSRPT5",67,0)
 . W ?35,$S(ELGCD="V":"VET",ELGCD="T":"TRI",ELGCD="C":"CVA",1:"UNK") ; Eligibility
"RTN","BPSRPT5",68,0)
 . W ?40,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)  ; RX and Copay indicator
"RTN","BPSRPT5",69,0)
 . W ?52,BPREF                     ; Refill
"RTN","BPSRPT5",70,0)
 . W ?64,$$DATTIM^BPSRPT1(BPSRTDT) ; Transaction Date
"RTN","BPSRPT5",71,0)
 . W ?84,$J($P(BPX,U,2),10,2)      ; Drug Cost
"RTN","BPSRPT5",72,0)
 Q
"RTN","BPSRPT5",73,0)
 ;
"RTN","BPSRPT5",74,0)
 ;Print Report Line 2
"RTN","BPSRPT5",75,0)
WRLINE2(BPRTYPE,BPREC,BPX,BPRX,BPREF,BPBIL,BPGRPLAN,BPEXCEL,BPICNT,BPPSEQ) ;
"RTN","BPSRPT5",76,0)
 ;Excel Output
"RTN","BPSRPT5",77,0)
 N BPSX
"RTN","BPSRPT5",78,0)
 I $G(BPEXCEL) D WRLINE2^BPSRPT8(BPRTYPE,.BPREC,BPX,BPRX,BPREF,BPBIL,BPGRPLAN,BPPSEQ) Q
"RTN","BPSRPT5",79,0)
 ;Report Output
"RTN","BPSRPT5",80,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT5",81,0)
 . W !,?4,$$DRGNAM^BPSRPT6($P(BPX,U,14),27),?32,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",82,0)
 . I BPRTYPE=1 W ?47,$$DATTIM^BPSRPT1(+BPX)
"RTN","BPSRPT5",83,0)
 . W ?68,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",84,0)
 . W ?71,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",85,0)
 . W ?75,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",86,0)
 . W ?77,$S($P(BPX,U):"/R",1:"/N")
"RTN","BPSRPT5",87,0)
 . W ?82,$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT5",88,0)
 . I BPRTYPE=4 W ?92,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",89,0)
 . I BPRTYPE=1 W ?115,$$BILLCOB(BPRX,BPREF,BPPSEQ)
"RTN","BPSRPT5",90,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT5",91,0)
 . W !,?3,$E($$CRDHLDID^BPSRPT2(+$P(BPX,U,3)),3,23)
"RTN","BPSRPT5",92,0)
 . W ?26,$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,17)
"RTN","BPSRPT5",93,0)
 . W ?41,$J(BPBIL,10,2)
"RTN","BPSRPT5",94,0)
 . W ?54,$$QTY^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",95,0)
 . W ?61,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",96,0)
 . S BPSX=$$PRESCIN^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",97,0)
 . W ?82,$P(BPSX,U),?98,$P(BPSX,U,2)
"RTN","BPSRPT5",98,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT5",99,0)
 . W !,?4,$$DRGNAM^BPSRPT6($P(BPX,U,14),32)
"RTN","BPSRPT5",100,0)
 . W ?41,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",101,0)
 . W ?68,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",102,0)
 . W ?71,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",103,0)
 . W ?74,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",104,0)
 . W ?76,$S($P(BPX,U):"/R",1:"/N")
"RTN","BPSRPT5",105,0)
 . W ?81,$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT5",106,0)
 . W ?88,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",107,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT5",108,0)
 . W !,?4,$$DRGNAM^BPSRPT6($P(BPX,U,14),23)
"RTN","BPSRPT5",109,0)
 . W ?28,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",110,0)
 . W ?47,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",111,0)
 . W ?50,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",112,0)
 . W ?53,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",113,0)
 . W ?55,$S($P(BPX,U):"/R",1:"/N")
"RTN","BPSRPT5",114,0)
 . W ?60,$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT5",115,0)
 . I $P(BPGRPLAN,U,2)]"" W ?69,$E($P(BPGRPLAN,U,2),1,30)
"RTN","BPSRPT5",116,0)
 . W ?122,$J($$ELAPSE^BPSRPT6($P(BPX,U,3)),10)
"RTN","BPSRPT5",117,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT5",118,0)
 . W !,?3,$E($$CRDHLDID^BPSRPT2(+$P(BPX,U,3)),3,23)
"RTN","BPSRPT5",119,0)
 . W ?28,$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,17)
"RTN","BPSRPT5",120,0)
 . W ?46,$$DATTIM^BPSRPT1(+$$CLOSEDT^BPSRPT2(+$P(BPX,U,3)))
"RTN","BPSRPT5",121,0)
 . N BPCLBY S BPCLBY=$E($$CLSBY^BPSRPT6(+$P(BPX,U,3)),1,25) S:BPCLBY="" BPCLBY="BLANK"
"RTN","BPSRPT5",122,0)
 . W ?65,BPCLBY S BPCNT(BPCLBY)=$G(BPCNT(BPCLBY))+1,BPGCNT(BPCLBY)=$G(BPGCNT(BPCLBY))+1,BPICNT(BPCLBY)=$G(BPICNT(BPCLBY))+1
"RTN","BPSRPT5",123,0)
 . W ?93,$E($P($$CLRSN^BPSRPT7(+$P(BPX,U,3)),U,2),1,30)
"RTN","BPSRPT5",124,0)
 . W ?128,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",125,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT5",126,0)
 . W !,?2,$$DRGNAM^BPSRPT6($P(BPX,U,14),34)
"RTN","BPSRPT5",127,0)
 . W ?38,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",128,0)
 . W ?42,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",129,0)
 . W ?46,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",130,0)
 . W ?48,$S($P(BPX,U):"/R",1:"/N")
"RTN","BPSRPT5",131,0)
 . W ?54,$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)
"RTN","BPSRPT5",132,0)
 . W ?72,$E(BPGRPLAN,1,50)
"RTN","BPSRPT5",133,0)
 . W ?125,$$BILL^BPSRPT6(BPRX,BPREF,BPPSEQ)
"RTN","BPSRPT5",134,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT5",135,0)
 . W !,?4,$$DRGNAM^BPSRPT6($P(BPX,U,4),27) ;Drug
"RTN","BPSRPT5",136,0)
 . W ?32,$$GETNDC^BPSRPT6(BPRX,BPREF)  ;NDC
"RTN","BPSRPT5",137,0)
 . W ?47,$$DATTIM^BPSRPT1($P(BPX,U,5)) ;Release Date
"RTN","BPSRPT5",138,0)
 . W ?62,$$MWC^BPSRPT6(BPRX,BPREF)     ;Fill Location
"RTN","BPSRPT5",139,0)
 . W ?65,$$RXSTANAM^BPSSCRU2($P(BPX,U,6))  ;Status
"RTN","BPSRPT5",140,0)
 . W ?67,$S($P(BPX,U,5):"/R",1:"/N")   ;Released
"RTN","BPSRPT5",141,0)
 . W ?75,$E($$GET1^DIQ(366.17,$P(BPX,U,7),.01,"E"),1,57) ;Non-Billalble Reason - ICR 6136
"RTN","BPSRPT5",142,0)
 Q
"RTN","BPSRPT5",143,0)
 ;
"RTN","BPSRPT5",144,0)
 ;Print Report Line 3
"RTN","BPSRPT5",145,0)
WRLINE3(BPRTYPE,BPREC,BPX,BPEXCEL) N BP59,BPRICINF
"RTN","BPSRPT5",146,0)
 S BP59=+$P(BPX,U,3)
"RTN","BPSRPT5",147,0)
 ;Excel Output
"RTN","BPSRPT5",148,0)
 I $G(BPEXCEL) D WRLINE3^BPSRPT8(BPRTYPE,.BPREC,BPX) Q
"RTN","BPSRPT5",149,0)
 ;Report Output
"RTN","BPSRPT5",150,0)
 I BPRTYPE=4 D  Q
"RTN","BPSRPT5",151,0)
 . S NP=$$CHKP(1) Q:BPQ
"RTN","BPSRPT5",152,0)
 . ;Released On
"RTN","BPSRPT5",153,0)
 . W !,?6,$$DATTIM^BPSRPT1(+BPX)
"RTN","BPSRPT5",154,0)
 . ;Method
"RTN","BPSRPT5",155,0)
 . I $$AUTOREV^BPSRPT1(BP59) W ?22,"AUTO/"
"RTN","BPSRPT5",156,0)
 . E  W ?22,"REGULAR/"
"RTN","BPSRPT5",157,0)
 . ;Return Status
"RTN","BPSRPT5",158,0)
 . I $P(BPX,U,15)["ACCEPTED" W "ACCEPTED/"
"RTN","BPSRPT5",159,0)
 . E  W "REJECTED/"
"RTN","BPSRPT5",160,0)
 . ;Reason
"RTN","BPSRPT5",161,0)
 . W $$RVSRSN^BPSRPT7(+$P(BPX,U,3))
"RTN","BPSRPT5",162,0)
 ;
"RTN","BPSRPT5",163,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT5",164,0)
 . S BPRICINF=$$PRICEVAL(BP59)
"RTN","BPSRPT5",165,0)
 . W !,?4,$S($P(BPRICINF,U,3)]"":$P(BPRICINF,U,3),1:"N/A")
"RTN","BPSRPT5",166,0)
 . W ?23,$S($P(BPRICINF,U,4)]"":$P(BPRICINF,U,4),1:"N/A")
"RTN","BPSRPT5",167,0)
 . W ?38,$S($P(BPRICINF,U,5)]"":$P(BPRICINF,U,5),1:"N/A")
"RTN","BPSRPT5",168,0)
 . W ?56,$S($P(BPRICINF,U,6)]"":$P(BPRICINF,U,6),1:"N/A")
"RTN","BPSRPT5",169,0)
 . W ?81,$S($P(BPRICINF,U,7)]"":$P(BPRICINF,U,7),1:"N/A")
"RTN","BPSRPT5",170,0)
 . W ?96,$S($P(BPRICINF,U,2)]"":$P(BPRICINF,U,2),1:"N/A")
"RTN","BPSRPT5",171,0)
 . W ?111,$S($P(BPRICINF,U,1)]"":$P(BPRICINF,U,1),1:"N/A")
"RTN","BPSRPT5",172,0)
 ;
"RTN","BPSRPT5",173,0)
 Q
"RTN","BPSRPT5",174,0)
 ;
"RTN","BPSRPT5",175,0)
 ;Display the Report
"RTN","BPSRPT5",176,0)
REPORT(REF,BPEXCEL,BPSCR,BPRPTNAM,BPSUMDET,BPPAGE) ;
"RTN","BPSRPT5",177,0)
 N BPBIL,BPBLINE,BPCOLL,BPDFN,BPDIV,BPELTM,BPGELTM,BPGBIL,BPGINS,BPGCOLL,BPGCNT,BPGRPLAN,BPINS,BPLINES,BPREC,BPREF,BPRX,BPSRTDT,BPSTATUS,BPTBIL,BPTCOLL,BPTINS,BPX,BPSGTOT,NP,BPSDATA
"RTN","BPSRPT5",178,0)
 N BPPSEQ,BPBILINF,BPRICINF,BPINSBIN
"RTN","BPSRPT5",179,0)
 N BPGPRICE,BPG128,BPG129,BPG133,BPG134,BPG135,BPG136,BPG137
"RTN","BPSRPT5",180,0)
 N BPIPRICE,BPI128,BPI129,BPI133,BPI134,BPI135,BPI136,BPI137
"RTN","BPSRPT5",181,0)
 N BPTPRICE,BPT128,BPT129,BPT133,BPT134,BPT135,BPT136,BPT137
"RTN","BPSRPT5",182,0)
 I '$D(@REF) D HDR^BPSRPT7(BPRTYPE,BPRPTNAM,.BPPAGE) W !,"No data meets the criteria." G XREPORT
"RTN","BPSRPT5",183,0)
 S (BPGBIL,BPGINS,BPGCOLL,BPGCNT,BPGELTM,BPGPRICE,BPG128,BPG129,BPG133,BPG134,BPG135,BPG136,BPG137)=0
"RTN","BPSRPT5",184,0)
 S BPDIV="" F  S BPDIV=$O(@REF@(BPDIV)) Q:BPDIV=""  D  Q:BPQ
"RTN","BPSRPT5",185,0)
 .S BPGRPLAN=""
"RTN","BPSRPT5",186,0)
 .D HDR^BPSRPT7(BPRTYPE,BPRPTNAM,.BPPAGE)
"RTN","BPSRPT5",187,0)
 .N BPCNT S (BPTBIL,BPTINS,BPTCOLL,BPCNT,BPELTM,BPTPRICE,BPT128,BPT129,BPT133,BPT134,BPT135,BPT136,BPT137)=0
"RTN","BPSRPT5",188,0)
 .F  S BPGRPLAN=$O(@REF@(BPDIV,BPGRPLAN)) Q:BPGRPLAN=""  D  Q:BPQ
"RTN","BPSRPT5",189,0)
 .. S BPINSBIN=0
"RTN","BPSRPT5",190,0)
 .. N BPSCLM,BPREC,BPTOT,BPIBIL,BPICNT,BPICOL,BPIINS
"RTN","BPSRPT5",191,0)
 .. S (BPIBIL,BPICNT,BPICOL,BPIINS,BPIPRICE,BPI128,BPI129,BPI133,BPI134,BPI135,BPI136,BPI137)=0
"RTN","BPSRPT5",192,0)
 .. S BPDFN="" F  S BPDFN=$O(@REF@(BPDIV,BPGRPLAN,BPDFN)) Q:BPDFN=""  D  Q:BPQ
"RTN","BPSRPT5",193,0)
 ... S BPSRTDT="" F  S BPSRTDT=$O(@REF@(BPDIV,BPGRPLAN,BPDFN,BPSRTDT)) Q:BPSRTDT=""  D  Q:BPQ
"RTN","BPSRPT5",194,0)
 .... S BPRX="" F  S BPRX=$O(@REF@(BPDIV,BPGRPLAN,BPDFN,BPSRTDT,BPRX)) Q:BPRX=""  D  Q:BPQ
"RTN","BPSRPT5",195,0)
 ..... S BPREF="" F  S BPREF=$O(@REF@(BPDIV,BPGRPLAN,BPDFN,BPSRTDT,BPRX,BPREF)) Q:BPREF=""  D  Q:BPQ
"RTN","BPSRPT5",196,0)
 ...... S BPX=@REF@(BPDIV,BPGRPLAN,BPDFN,BPSRTDT,BPRX,BPREF)
"RTN","BPSRPT5",197,0)
 ...... I BPSUMDET=0,BPINSBIN=0 D
"RTN","BPSRPT5",198,0)
 ....... D WRPLAN(BPGRPLAN) S BPINSBIN=1 ;Set Insurance/Bin Indicator
"RTN","BPSRPT5",199,0)
 ....... S BPBLINE=""  ;Reset Blank Line Indicator
"RTN","BPSRPT5",200,0)
 ...... S BPCNT=BPCNT+1,BPGCNT=BPGCNT+1,BPICNT=BPICNT+1
"RTN","BPSRPT5",201,0)
 ...... S BPPSEQ=+$$COB59^BPSUTIL2($P(BPX,U,3))
"RTN","BPSRPT5",202,0)
 ...... I BPRTYPE=5 D
"RTN","BPSRPT5",203,0)
 ....... S BPELTM=BPELTM+$$ELAPSE^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",204,0)
 ....... S BPGELTM=BPGELTM+$$ELAPSE^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",205,0)
 ...... I BPRTYPE=9 D
"RTN","BPSRPT5",206,0)
 ....... S (BPBIL,BPINS,BPTINS,BPGINS,BPIINS,BPBILINF,BPCOLL,BPTCOLL,BPGCOLL,BPICOL)=""
"RTN","BPSRPT5",207,0)
 ....... S BPTBIL=BPTBIL+$P(BPX,U,2),BPGBIL=BPGBIL+$P(BPX,U,2),BPIBIL=BPIBIL+$P(BPX,U,2)
"RTN","BPSRPT5",208,0)
 ...... E  D
"RTN","BPSRPT5",209,0)
 ....... S BPBIL=$$BILLED^BPSRPT7($P(BPX,U,3)),BPTBIL=BPTBIL+BPBIL,BPGBIL=BPGBIL+BPBIL,BPIBIL=BPIBIL+BPBIL
"RTN","BPSRPT5",210,0)
 ....... S BPINS=$$INSPAID^BPSRPT2($P(BPX,U,3)),BPTINS=BPTINS+BPINS,BPGINS=BPGINS+BPINS,BPIINS=BPIINS+BPINS
"RTN","BPSRPT5",211,0)
 ....... S BPBILINF=$$COLLECTD^BPSRPT6(BPRX,BPREF,BPPSEQ)
"RTN","BPSRPT5",212,0)
 ....... S BPCOLL=+BPBILINF,BPTCOLL=BPTCOLL+BPCOLL,BPGCOLL=BPGCOLL+BPCOLL,BPICOL=BPICOL+BPCOLL
"RTN","BPSRPT5",213,0)
 ...... I BPRTYPE=6 D  Q
"RTN","BPSRPT5",214,0)
 ....... S BPSTATUS=$P(BPX,U,7)
"RTN","BPSRPT5",215,0)
 ....... I BPSTATUS["REJECT" S $P(BPSCLM(BPSRTDT),U,3)=$P($G(BPSCLM(BPSRTDT)),U,3)+BPBIL
"RTN","BPSRPT5",216,0)
 ....... I BPSTATUS["PAYABLE" S $P(BPSCLM(BPSRTDT),U,4)=$P($G(BPSCLM(BPSRTDT)),U,4)+BPBIL
"RTN","BPSRPT5",217,0)
 ....... S $P(BPSCLM(BPSRTDT),U,2)=$P($G(BPSCLM(BPSRTDT)),U,2)+BPBIL
"RTN","BPSRPT5",218,0)
 ....... S $P(BPSCLM(BPSRTDT),U,5)=$P($G(BPSCLM(BPSRTDT)),U,5)+BPINS
"RTN","BPSRPT5",219,0)
 ....... S $P(BPSCLM(BPSRTDT),U)=$P($G(BPSCLM(BPSRTDT)),U)+1
"RTN","BPSRPT5",220,0)
 ...... I BPRTYPE=8 D
"RTN","BPSRPT5",221,0)
 ....... ;Get Pricing Information for totals
"RTN","BPSRPT5",222,0)
 ....... S BPRICINF=$$PRICEVAL(+$P(BPX,U,3))
"RTN","BPSRPT5",223,0)
 ....... S BPI128=BPI128+$P($G(BPRICINF),U),BPI129=BPI129+$P($G(BPRICINF),U,2),BPI133=BPI133+$P($G(BPRICINF),U,3),BPI134=BPI134+$P($G(BPRICINF),U,4)
"RTN","BPSRPT5",224,0)
 ....... S BPI135=BPI135+$P($G(BPRICINF),U,5),BPI136=BPI136+$P($G(BPRICINF),U,6),BPI137=BPI137+$P($G(BPRICINF),U,7)
"RTN","BPSRPT5",225,0)
 ....... S BPT128=BPT128+$P($G(BPRICINF),U),BPT129=BPT129+$P($G(BPRICINF),U,2),BPT133=BPT133+$P($G(BPRICINF),U,3),BPT134=BPT134+$P($G(BPRICINF),U,4)
"RTN","BPSRPT5",226,0)
 ....... S BPT135=BPT135+$P($G(BPRICINF),U,5),BPT136=BPT136+$P($G(BPRICINF),U,6),BPT137=BPT137+$P($G(BPRICINF),U,7)
"RTN","BPSRPT5",227,0)
 ....... S BPG128=BPG128+$P($G(BPRICINF),U),BPG129=BPG129+$P($G(BPRICINF),U,2),BPG133=BPG133+$P($G(BPRICINF),U,3),BPG134=BPG134+$P($G(BPRICINF),U,4)
"RTN","BPSRPT5",228,0)
 ....... S BPG135=BPG135+$P($G(BPRICINF),U,5),BPG136=BPG136+$P($G(BPRICINF),U,6),BPG137=BPG137+$P($G(BPRICINF),U,7)
"RTN","BPSRPT5",229,0)
 ....... S BPIPRICE=BPI128_U_BPI129_U_BPI133_U_BPI134_U_BPI135_U_BPI136_U_BPI137
"RTN","BPSRPT5",230,0)
 ....... S BPTPRICE=BPT128_U_BPT129_U_BPT133_U_BPT134_U_BPT135_U_BPT136_U_BPT137
"RTN","BPSRPT5",231,0)
 ....... S BPGPRICE=BPG128_U_BPG129_U_BPG133_U_BPG134_U_BPG135_U_BPG136_U_BPG137
"RTN","BPSRPT5",232,0)
 ...... ;Display Detail Section
"RTN","BPSRPT5",233,0)
 ...... Q:BPSUMDET=1
"RTN","BPSRPT5",234,0)
 ...... S BPREC=""  ;Reset Excel Display Variable
"RTN","BPSRPT5",235,0)
 ...... I 'BPEXCEL,BPRTYPE=1,BPBLINE=1 S NP=$$CHKP(2) Q:BPQ  I BPBLINE=1 W !  ;Print blank line
"RTN","BPSRPT5",236,0)
 ...... S NP=$$CHKP(1) Q:BPQ  D WRLINE1(BPRTYPE,.BPREC,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT,BPBIL,BPINS,BPCOLL,BPEXCEL,BPPSEQ)
"RTN","BPSRPT5",237,0)
 ...... S NP=$$CHKP(1) Q:BPQ  D WRLINE2(BPRTYPE,.BPREC,BPX,BPRX,BPREF,BPBIL,BPGRPLAN,BPEXCEL,.BPICNT,BPPSEQ)
"RTN","BPSRPT5",238,0)
 ...... D WRLINE3(BPRTYPE,.BPREC,BPX,BPEXCEL)
"RTN","BPSRPT5",239,0)
 ...... I (",2,7,8")[BPRTYPE,'BPEXCEL D  Q:BPQ
"RTN","BPSRPT5",240,0)
 ....... D COMMENT(+$P(BPX,U,3)) Q:BPQ
"RTN","BPSRPT5",241,0)
 ....... S NP=$$CHKP(1) Q:BPQ
"RTN","BPSRPT5",242,0)
 ....... I (",2,")'[BPRTYPE W !,?10,"Claim ID: ",$$CLAIMID^BPSRPT2(+$P(BPX,U,3))
"RTN","BPSRPT5",243,0)
 ....... E  W !,?10,$$DRGNAM^BPSRPT6($P(BPX,U,14),34)
"RTN","BPSRPT5",244,0)
 ....... N BPSARR,BPRJCNT,BPZZ S BPRJCNT=$$REJTEXT^BPSRPT2(+$P(BPX,U,3),.BPSARR)
"RTN","BPSRPT5",245,0)
 ....... F BPZZ=1:1:BPRJCNT S NP=$$CHKP(1) Q:BPQ  W !,?10,BPSARR(BPZZ) Q:BPQ
"RTN","BPSRPT5",246,0)
 ...... I 'BPEXCEL,BPRTYPE=1 S BPBLINE=1  ;Set Blank Line Display Indicator
"RTN","BPSRPT5",247,0)
 .. I BPRTYPE=6 D PTBDT^BPSRPT7(BPDIV,BPSUMDET,.BPSCLM,.BPSGTOT)
"RTN","BPSRPT5",248,0)
 .. I 'BPQ,(",1,2,3,4,7,8,9,")[BPRTYPE,'BPEXCEL S NP=$$CHKP(5) Q:BPQ  D ITOT^BPSRPT7(BPRTYPE,BPDIV,BPGRPLAN,BPIBIL,BPIINS,BPICOL,.BPICNT,BPIPRICE)
"RTN","BPSRPT5",249,0)
 .I 'BPEXCEL,'BPQ,BPRTYPE'=6 S NP=$$CHKP(5) Q:BPQ  D TOTALS^BPSRPT7(BPRTYPE,BPDIV,BPTBIL,BPTINS,BPTCOLL,.BPCNT,BPELTM,BPTPRICE)
"RTN","BPSRPT5",250,0)
 .I 'BPEXCEL,'BPQ,$O(@REF@(BPDIV))]"" D:$G(BPSCR) PAUSE^BPSRPT1 Q:BPQ
"RTN","BPSRPT5",251,0)
 ;Print Grand Totals
"RTN","BPSRPT5",252,0)
 I 'BPEXCEL D
"RTN","BPSRPT5",253,0)
 .I 'BPQ,BPRTYPE=6 D PGTOT6^BPSRPT7($G(BPSGTOT))
"RTN","BPSRPT5",254,0)
 .I 'BPQ,BPRTYPE'=6 S NP=$$CHKP(5) Q:BPQ  D PGTOT^BPSRPT7(BPRTYPE,BPGBIL,BPGINS,BPGCOLL,.BPGCNT,BPGELTM,BPGPRICE)
"RTN","BPSRPT5",255,0)
 ;
"RTN","BPSRPT5",256,0)
XREPORT Q
"RTN","BPSRPT5",257,0)
 ;
"RTN","BPSRPT5",258,0)
 ;Display Comments
"RTN","BPSRPT5",259,0)
 ;Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT5",260,0)
COMMENT(BP59) N CNODE,I,J,NP
"RTN","BPSRPT5",261,0)
 S I="" F  S I=$O(^BPST(BP59,11,"B",I),-1) Q:'I  D  Q:BPQ
"RTN","BPSRPT5",262,0)
 .S NP=$$CHKP(1) Q:BPQ
"RTN","BPSRPT5",263,0)
 .S J=$O(^BPST(BP59,11,"B",I,"")) Q:J=""
"RTN","BPSRPT5",264,0)
 .S CNODE=$G(^BPST(BP59,11,J,0))
"RTN","BPSRPT5",265,0)
 .W !,?10,$$DATTIM^BPSRPT1(+$P($P(CNODE,U),"."))," - ",$P(CNODE,U,3)
"RTN","BPSRPT5",266,0)
 Q
"RTN","BPSRPT5",267,0)
 ;
"RTN","BPSRPT5",268,0)
 ;Display the Insurance
"RTN","BPSRPT5",269,0)
 ; Input Variable -> BPSDATA -> if 0, skip page check
"RTN","BPSRPT5",270,0)
 ;                   BPEXCEL -> 1 - Print to Excel/0 Regular Display
"RTN","BPSRPT5",271,0)
WRPLAN(BPGRPLAN) ;
"RTN","BPSRPT5",272,0)
 N GPIEN,INS,NP
"RTN","BPSRPT5",273,0)
 ;
"RTN","BPSRPT5",274,0)
 I BPSUMDET'=0 Q
"RTN","BPSRPT5",275,0)
 I BPEXCEL Q
"RTN","BPSRPT5",276,0)
 ;Skip for Recent Transactions and Totals by Date Reports
"RTN","BPSRPT5",277,0)
 I BPRTYPE=5!(BPRTYPE=6) Q
"RTN","BPSRPT5",278,0)
 I $G(BPSDATA) S NP=$$CHKP(5) Q:BPQ!NP
"RTN","BPSRPT5",279,0)
 ;Get and display the Insurance Name
"RTN","BPSRPT5",280,0)
 S INS=$E(BPGRPLAN,1,90)
"RTN","BPSRPT5",281,0)
 I INS]"" D
"RTN","BPSRPT5",282,0)
 . D ULINE("-")
"RTN","BPSRPT5",283,0)
 . W !,INS
"RTN","BPSRPT5",284,0)
 . ;include the Insurance Bin after the Insurance name
"RTN","BPSRPT5",285,0)
 . I (",2,")[BPRTYPE D
"RTN","BPSRPT5",286,0)
 . . W " - ",$$INSBIN^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",287,0)
 . D ULINE("-")
"RTN","BPSRPT5",288,0)
 Q
"RTN","BPSRPT5",289,0)
 ;
"RTN","BPSRPT5",290,0)
 ;Check for End of Page
"RTN","BPSRPT5",291,0)
 ; Input variables -> BPLINES -> Number of lines from bottom
"RTN","BPSRPT5",292,0)
 ;                    BPEXCEL -> 1 - Print to Excel/0 Regular Display
"RTN","BPSRPT5",293,0)
 ; Output variable -> BPSDATA -> 0 -> New screen, no data displayed yet
"RTN","BPSRPT5",294,0)
 ;                               1 -> Data displayed on current screen
"RTN","BPSRPT5",295,0)
CHKP(BPLINES) Q:$G(BPEXCEL) 0
"RTN","BPSRPT5",296,0)
 S BPLINES=BPLINES+1
"RTN","BPSRPT5",297,0)
 I $G(BPSCR) S BPLINES=BPLINES+2
"RTN","BPSRPT5",298,0)
 I $G(BPSCR),'$G(BPSDATA) S BPSDATA=1 Q 0
"RTN","BPSRPT5",299,0)
 S BPSDATA=1
"RTN","BPSRPT5",300,0)
 I $Y>(IOSL-BPLINES) D:$G(BPSCR) PAUSE^BPSRPT1 Q:$G(BPQ) 0 D HDR^BPSRPT7(BPRTYPE,BPRPTNAM,.BPPAGE) Q 1
"RTN","BPSRPT5",301,0)
 Q 0
"RTN","BPSRPT5",302,0)
 ;
"RTN","BPSRPT5",303,0)
 ;Print one line of characters
"RTN","BPSRPT5",304,0)
ULINE(X) N I
"RTN","BPSRPT5",305,0)
 W ! F I=1:1:132 W $G(X,"-")
"RTN","BPSRPT5",306,0)
 Q
"RTN","BPSRPT5",307,0)
BILLCOB(BPRX,BPREF,BPPSEQ) ;
"RTN","BPSRPT5",308,0)
 N BPSBILL
"RTN","BPSRPT5",309,0)
 S BPSBILL=$$BILL^BPSRPT6(BPRX,BPREF,BPPSEQ)
"RTN","BPSRPT5",310,0)
 I BPSBILL="" Q ""
"RTN","BPSRPT5",311,0)
 Q $J(BPSBILL_"  "_$$RXCOB^BPSRPT8(BPPSEQ)_"  ",17)
"RTN","BPSRPT5",312,0)
 ;
"RTN","BPSRPT5",313,0)
PRICING(BP59) ; Check if the Spending Account Remaining field has non-zero data
"RTN","BPSRPT5",314,0)
 ; Returns: 1 if true, 0 if not
"RTN","BPSRPT5",315,0)
 N BPSRESP,BPSPOS
"RTN","BPSRPT5",316,0)
 D RESP59^BPSRPT2(BP59,.BPSRESP,.BPSPOS)
"RTN","BPSRPT5",317,0)
 Q:(BPSRESP="")!(BPSPOS="") 0
"RTN","BPSRPT5",318,0)
 I +$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,BPSPOS,120)),U,8)) Q 1
"RTN","BPSRPT5",319,0)
 Q 0
"RTN","BPSRPT5",320,0)
 ;
"RTN","BPSRPT5",321,0)
PRICEVAL(BP59) ;
"RTN","BPSRPT5",322,0)
 N BPSRESP,BPSPOS,RETV,BPS120,BPS130
"RTN","BPSRPT5",323,0)
 S RETV=0
"RTN","BPSRPT5",324,0)
 D RESP59^BPSRPT2(BP59,.BPSRESP,.BPSPOS)
"RTN","BPSRPT5",325,0)
 Q:(BPSRESP="")!(BPSPOS="") RETV
"RTN","BPSRPT5",326,0)
 S BPS120=$G(^BPSR(BPSRESP,1000,BPSPOS,120)),BPS130=$G(^BPSR(BPSRESP,1000,BPSPOS,130))
"RTN","BPSRPT5",327,0)
 S RETV=$$DFF2EXT^BPSECFM($P($G(BPS120),U,8))_U_$$DFF2EXT^BPSECFM($P($G(BPS120),U,9))_U_$$DFF2EXT^BPSECFM($P($G(BPS130),U,3))_U_$$DFF2EXT^BPSECFM($P($G(BPS130),U,4))
"RTN","BPSRPT5",328,0)
 S RETV=RETV_U_$$DFF2EXT^BPSECFM($P($G(BPS130),U,5))_U_$$DFF2EXT^BPSECFM($P($G(BPS130),U,6))_U_$$DFF2EXT^BPSECFM($P($G(BPS130),U,7))
"RTN","BPSRPT5",329,0)
 Q RETV
"RTN","BPSRPT5",330,0)
 ;
"RTN","BPSRPT6")
0^7^B74397118
"RTN","BPSRPT6",1,0)
BPSRPT6 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT6",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8,23**;JUN 2004;Build 44
"RTN","BPSRPT6",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT6",4,0)
 ;
"RTN","BPSRPT6",5,0)
 Q
"RTN","BPSRPT6",6,0)
 ;
"RTN","BPSRPT6",7,0)
 ;Get the Insurance Company pointer and name
"RTN","BPSRPT6",8,0)
 ;
"RTN","BPSRPT6",9,0)
 ; Returned Value -> ptr^Insurance Company Name
"RTN","BPSRPT6",10,0)
 ; 
"RTN","BPSRPT6",11,0)
INSNAM(BP59) N BPIN,BPDOS,BPDFN,BPSZZ,BP36,BPX,BPINAME,BPIBA,BP36IEN
"RTN","BPSRPT6",12,0)
 ;
"RTN","BPSRPT6",13,0)
 ;Reset Insurance
"RTN","BPSRPT6",14,0)
 S BP36=""
"RTN","BPSRPT6",15,0)
 ;
"RTN","BPSRPT6",16,0)
 ;First Pull From BPS Transactions
"RTN","BPSRPT6",17,0)
 S BPIN=+$P($G(^BPST(BP59,9)),U)
"RTN","BPSRPT6",18,0)
 I +BPIN D
"RTN","BPSRPT6",19,0)
 . S BPINAME=$P($G(^BPST(BP59,10,BPIN,0)),U,7)
"RTN","BPSRPT6",20,0)
 . S BPIBA=$P($G(^BPST(BP59,10,BPIN,0)),U,1)
"RTN","BPSRPT6",21,0)
 . S BP36IEN=$$INSPL^IBNCPDPI(BPIBA)
"RTN","BPSRPT6",22,0)
 . S:BP36IEN]""&BPINAME]"" BP36=BP36IEN_"^"_BPINAME
"RTN","BPSRPT6",23,0)
 ;If Not Found, look up using API
"RTN","BPSRPT6",24,0)
 I BP36="" D
"RTN","BPSRPT6",25,0)
 .S BPDOS=+$P($G(^BPST(BP59,12)),U,2)\1
"RTN","BPSRPT6",26,0)
 .I BPDOS=0 S BPDOS=+$P($G(^BPST(BP59,0)),U,8)\1
"RTN","BPSRPT6",27,0)
 .S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSRPT6",28,0)
 .S BPX=$$INSUR^IBBAPI(BPDFN,BPDOS,,.BPSZZ,"1")
"RTN","BPSRPT6",29,0)
 .S BP36=$G(BPSZZ("IBBAPI","INSUR",1,1))
"RTN","BPSRPT6",30,0)
 ;
"RTN","BPSRPT6",31,0)
 ;If Not Found, put in MISSING INSURANCE
"RTN","BPSRPT6",32,0)
 I $TR(BP36,U)="" S BP36=" ^**MISSING INSURANCE**"
"RTN","BPSRPT6",33,0)
 ;
"RTN","BPSRPT6",34,0)
 Q BP36
"RTN","BPSRPT6",35,0)
 ;
"RTN","BPSRPT6",36,0)
 ;Select an Insurance Company file entry (Fileman Lookup)
"RTN","BPSRPT6",37,0)
 ;
"RTN","BPSRPT6",38,0)
 ; Returned value -> Insurance Company Name
"RTN","BPSRPT6",39,0)
 ; 
"RTN","BPSRPT6",40,0)
SELINS() N INS
"RTN","BPSRPT6",41,0)
 S INS=$$SELINSUR^IBNCPDPI("Select Insurance","")
"RTN","BPSRPT6",42,0)
 I $P(INS,U)=-1 S INS="^"
"RTN","BPSRPT6",43,0)
 E  S INS=$P(INS,U,2)
"RTN","BPSRPT6",44,0)
 Q INS
"RTN","BPSRPT6",45,0)
 ;
"RTN","BPSRPT6",46,0)
 ;Get the drug name for display
"RTN","BPSRPT6",47,0)
 ;
"RTN","BPSRPT6",48,0)
 ; Input variable ->  BP50 - Lookup to DRUG (#50)
"RTN","BPSRPT6",49,0)
 ;                   BPLEN - Length of the display field
"RTN","BPSRPT6",50,0)
 ; Returned value -> Name of the drug
"RTN","BPSRPT6",51,0)
 ; 
"RTN","BPSRPT6",52,0)
DRGNAM(BP50,BPLEN) Q $E($$DRUGDIE^BPSUTIL1(+BP50,.01,"E"),1,BPLEN)
"RTN","BPSRPT6",53,0)
 ;       
"RTN","BPSRPT6",54,0)
 ;Select a DRUG file entry (Fileman Lookup)
"RTN","BPSRPT6",55,0)
 ;
"RTN","BPSRPT6",56,0)
 ; Returned Variable -> Y
"RTN","BPSRPT6",57,0)
 ; 
"RTN","BPSRPT6",58,0)
SELDRG N DIC S DIC(0)="QEAM",DIC=50,DIC("A")="Select Drug: "
"RTN","BPSRPT6",59,0)
 D DRUGDIC^BPSUTIL1(.DIC)
"RTN","BPSRPT6",60,0)
 Q
"RTN","BPSRPT6",61,0)
 ;
"RTN","BPSRPT6",62,0)
 ;Get the drug class for display
"RTN","BPSRPT6",63,0)
 ;
"RTN","BPSRPT6",64,0)
 ; Input variable -> BP50605 - Lookup to VA DRUG CLASS (#50.605)
"RTN","BPSRPT6",65,0)
 ;                   BPLEN - Length of the display field
"RTN","BPSRPT6",66,0)
 ; Returned value -> Name of the drug class
"RTN","BPSRPT6",67,0)
 ;                   
"RTN","BPSRPT6",68,0)
DRGCLNAM(BP50605,BPLEN) N IEN,Y
"RTN","BPSRPT6",69,0)
 K ^TMP($J,"BPSRPT6")
"RTN","BPSRPT6",70,0)
 S Y=""
"RTN","BPSRPT6",71,0)
 I BP50605]"" D 
"RTN","BPSRPT6",72,0)
 .D C^PSN50P65(BP50605,"","BPSRPT6")
"RTN","BPSRPT6",73,0)
 .S IEN=$O(^TMP($J,"BPSRPT6",0))
"RTN","BPSRPT6",74,0)
 .I IEN]"" S Y=$E($G(^TMP($J,"BPSRPT6",IEN,1)),1,BPLEN)
"RTN","BPSRPT6",75,0)
 K ^TMP($J,"BPSRPT6")
"RTN","BPSRPT6",76,0)
 Q Y
"RTN","BPSRPT6",77,0)
 ;
"RTN","BPSRPT6",78,0)
 ;Select a VA DRUG CLASS file entry (Fileman Lookup)
"RTN","BPSRPT6",79,0)
 ;
"RTN","BPSRPT6",80,0)
SELDRGC N DIR,DIRUT,DTOUT,DUOUT,IEN,TOT,X
"RTN","BPSRPT6",81,0)
 K ^TMP($J,"BPSRPT6")
"RTN","BPSRPT6",82,0)
 ;
"RTN","BPSRPT6",83,0)
 F  D  Q:Y]""
"RTN","BPSRPT6",84,0)
 .K ^TMP($J,"BPSRPT6"),^TMP($J,"BPSRPT6X")
"RTN","BPSRPT6",85,0)
 .S DIR(0)="FO^1:35"
"RTN","BPSRPT6",86,0)
 .S DIR("A")="Select Drug Class"
"RTN","BPSRPT6",87,0)
 .S DIR("?")="Answer with VA DRUG CLASS CODE, or CLASSIFICATION. TYPE '??' FOR A LIST"
"RTN","BPSRPT6",88,0)
 .S DIR("??")="^D DCLIST^BPSRPT6"
"RTN","BPSRPT6",89,0)
 .D ^DIR
"RTN","BPSRPT6",90,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(Y)="") S Y="^" Q
"RTN","BPSRPT6",91,0)
 .;
"RTN","BPSRPT6",92,0)
 .;Get list based on original user input
"RTN","BPSRPT6",93,0)
 .D C^PSN50P65("",Y,"BPSRPT6X")
"RTN","BPSRPT6",94,0)
 .;
"RTN","BPSRPT6",95,0)
 .;Get list based on uppercase input
"RTN","BPSRPT6",96,0)
 .S Y=$$UP^XLFSTR(Y)
"RTN","BPSRPT6",97,0)
 .D C^PSN50P65("",Y,"BPSRPT6")
"RTN","BPSRPT6",98,0)
 .;
"RTN","BPSRPT6",99,0)
 .;Merge lists together
"RTN","BPSRPT6",100,0)
 .M ^TMP($J,"BPSRPT6")=^TMP($J,"BPSRPT6X")
"RTN","BPSRPT6",101,0)
 .K ^TMP($J,"BPSRPT6X")
"RTN","BPSRPT6",102,0)
 .;
"RTN","BPSRPT6",103,0)
 .; Reset 0 node based on combined lists
"RTN","BPSRPT6",104,0)
 .S Y=0 F TOT=0:1 S Y=$O(^TMP($J,"BPSRPT6",Y)) Q:'+Y
"RTN","BPSRPT6",105,0)
 .S ^TMP($J,"BPSRPT6",0)=TOT
"RTN","BPSRPT6",106,0)
 .;
"RTN","BPSRPT6",107,0)
 .;Check for no entries found
"RTN","BPSRPT6",108,0)
 .I TOT<1 W "  ??" S Y="" Q
"RTN","BPSRPT6",109,0)
 .;
"RTN","BPSRPT6",110,0)
 .;Check for Unique Entry
"RTN","BPSRPT6",111,0)
 .I TOT=1 D  Q
"RTN","BPSRPT6",112,0)
 ..S Y="",IEN=$O(^TMP($J,"BPSRPT6",0))
"RTN","BPSRPT6",113,0)
 ..I IEN]"" S Y=$G(^TMP($J,"BPSRPT6",IEN,1)) W $C(13),"Select Drug Class: ",Y
"RTN","BPSRPT6",114,0)
 .;
"RTN","BPSRPT6",115,0)
 .;Check for multiple entries - allow user to pick
"RTN","BPSRPT6",116,0)
 .I TOT>1 S Y=$$DCSEL(TOT)
"RTN","BPSRPT6",117,0)
 .I Y="^^" S Y=""
"RTN","BPSRPT6",118,0)
 .;
"RTN","BPSRPT6",119,0)
 Q
"RTN","BPSRPT6",120,0)
 ;
"RTN","BPSRPT6",121,0)
 ;List Entries in VA DRUG CLASS
"RTN","BPSRPT6",122,0)
 ;
"RTN","BPSRPT6",123,0)
DCLIST N CL,DTOUT,IEN,Y
"RTN","BPSRPT6",124,0)
 K ^TMP($J,"BPSRPT6")
"RTN","BPSRPT6",125,0)
 D C^PSN50P65("","??","BPSRPT6")
"RTN","BPSRPT6",126,0)
 ;
"RTN","BPSRPT6",127,0)
 ;First create new index - sorted by CLASSIFICATION
"RTN","BPSRPT6",128,0)
 S IEN=0 F  S IEN=$O(^TMP($J,"BPSRPT6",IEN)) Q:'IEN  D
"RTN","BPSRPT6",129,0)
 .S CL=$G(^TMP($J,"BPSRPT6",IEN,1)) Q:CL=""
"RTN","BPSRPT6",130,0)
 .S ^TMP($J,"BPSRPT6","B",CL,IEN)=$G(^TMP($J,"BPSRPT6",IEN,".01"))
"RTN","BPSRPT6",131,0)
 ;
"RTN","BPSRPT6",132,0)
 ;Now loop through and display entries
"RTN","BPSRPT6",133,0)
 S $X=0,$Y=0 W !,?3,"Choose from: ",!
"RTN","BPSRPT6",134,0)
 S (Y,CL)="" F  S CL=$O(^TMP($J,"BPSRPT6","B",CL)) Q:CL=""  D  Q:Y]""
"RTN","BPSRPT6",135,0)
 .S IEN="" F  S IEN=$O(^TMP($J,"BPSRPT6","B",CL,IEN)) Q:IEN=""  D  Q:Y]""
"RTN","BPSRPT6",136,0)
 ..W ?3,$G(^TMP($J,"BPSRPT6","B",CL,IEN)),!,?3,CL,!
"RTN","BPSRPT6",137,0)
 ..I $Y>19!'$Y D
"RTN","BPSRPT6",138,0)
 ...W ?3 R "'^' TO STOP: ",Y:$G(DTIME,300)
"RTN","BPSRPT6",139,0)
 ...E  S DTOUT=1
"RTN","BPSRPT6",140,0)
 ...W $C(13),$J("",17),$C(13)
"RTN","BPSRPT6",141,0)
 ...I ($G(DTOUT)=1)!($G(Y)="^") S Y="^" Q
"RTN","BPSRPT6",142,0)
 ...S $X=0,$Y=0
"RTN","BPSRPT6",143,0)
 ;
"RTN","BPSRPT6",144,0)
 K ^TMP($J,"BPSRPT6")
"RTN","BPSRPT6",145,0)
 Q
"RTN","BPSRPT6",146,0)
 ;
"RTN","BPSRPT6",147,0)
 ;Allow user to pick VA DRUG CLASS entry based on initial input
"RTN","BPSRPT6",148,0)
 ;
"RTN","BPSRPT6",149,0)
 ; Input variable - TOT -> Total entries placed in ^TMP($J,"BPSRPT6")
"RTN","BPSRPT6",150,0)
 ; Returned value - VA DRUG CLASSIFICATION
"RTN","BPSRPT6",151,0)
 ;
"RTN","BPSRPT6",152,0)
DCSEL(TOT) N CL,DTOUT,I,IEN,IX,Y
"RTN","BPSRPT6",153,0)
 ;
"RTN","BPSRPT6",154,0)
 ;First create new index
"RTN","BPSRPT6",155,0)
 F IX="B","N" K ^TMP($J,"BPSRPT6",IX)
"RTN","BPSRPT6",156,0)
 S Y="",IEN=0 F  S IEN=$O(^TMP($J,"BPSRPT6",IEN)) Q:'IEN  D
"RTN","BPSRPT6",157,0)
 .S CL=$G(^TMP($J,"BPSRPT6",IEN,1)) Q:CL=""
"RTN","BPSRPT6",158,0)
 .S ^TMP($J,"BPSRPT6","B",CL,IEN)=$G(^TMP($J,"BPSRPT6",IEN,".01"))
"RTN","BPSRPT6",159,0)
 ;
"RTN","BPSRPT6",160,0)
 ;Now loop through and allow one to be picked
"RTN","BPSRPT6",161,0)
 S (Y,CL)="" F  S CL=$O(^TMP($J,"BPSRPT6","B",CL)) Q:CL=""  D  Q:Y]""
"RTN","BPSRPT6",162,0)
 .S IEN="" F  S IEN=$O(^TMP($J,"BPSRPT6","B",CL,IEN)) Q:IEN=""  D  Q:Y]""
"RTN","BPSRPT6",163,0)
 ..S I=$G(I)+1 W !,?5,I,?9,$G(^TMP($J,"BPSRPT6","B",CL,IEN)),!,?3,CL
"RTN","BPSRPT6",164,0)
 ..S ^TMP($J,"BPSRPT6","N",I)=CL
"RTN","BPSRPT6",165,0)
 ..;
"RTN","BPSRPT6",166,0)
 ..;Stop after every 5 entries
"RTN","BPSRPT6",167,0)
 ..I I#5=0 I TOT>I D  Q:$G(Y)="^"!($G(Y)="^^")
"RTN","BPSRPT6",168,0)
 ...W !,"Press <RETURN> to see more, '^' to exit this list, OR"
"RTN","BPSRPT6",169,0)
 ...W !,"CHOOSE 1 - "_I R ": ",Y:DTIME S:'$T DTOUT=1
"RTN","BPSRPT6",170,0)
 ...I ($G(DTOUT)=1)!(Y="^") S Y="^^"
"RTN","BPSRPT6",171,0)
 ..;
"RTN","BPSRPT6",172,0)
 ..;Stop after last entry
"RTN","BPSRPT6",173,0)
 ..I I=TOT D
"RTN","BPSRPT6",174,0)
 ...W !,"CHOOSE 1 - "_I R ": ",Y:DTIME S:'$T DTOUT=1
"RTN","BPSRPT6",175,0)
 ..I ($G(DTOUT)=1)!(Y="^") S Y="^^"
"RTN","BPSRPT6",176,0)
 ..;
"RTN","BPSRPT6",177,0)
 ..;Check for valid entry
"RTN","BPSRPT6",178,0)
 ..I Y="^^" S Y=""
"RTN","BPSRPT6",179,0)
 ..I Y]"",'$D(^TMP($J,"BPSRPT6","N",Y)) W "  ??" S Y=""
"RTN","BPSRPT6",180,0)
 ..I Y]"",$D(^TMP($J,"BPSRPT6","N",Y)) S Y=$G(^TMP($J,"BPSRPT6","N",Y))
"RTN","BPSRPT6",181,0)
 ;
"RTN","BPSRPT6",182,0)
 Q Y
"RTN","BPSRPT6",183,0)
 ;
"RTN","BPSRPT6",184,0)
 ;Get DRUG file pointer
"RTN","BPSRPT6",185,0)
 ;       
"RTN","BPSRPT6",186,0)
 ; Return Value -> n = ptr to DRUG (#50)
"RTN","BPSRPT6",187,0)
 ;                 0 = Unknown
"RTN","BPSRPT6",188,0)
 ; 
"RTN","BPSRPT6",189,0)
GETDRUG(BPRX) Q +$$RXAPI1^BPSUTIL1(BPRX,6,"I")
"RTN","BPSRPT6",190,0)
 ;
"RTN","BPSRPT6",191,0)
 ;Get VA DRUG CLASS pointer
"RTN","BPSRPT6",192,0)
 ;       
"RTN","BPSRPT6",193,0)
 ; Input Variables: BP50 - ptr to DRUG (#50)
"RTN","BPSRPT6",194,0)
 ;
"RTN","BPSRPT6",195,0)
 ; Return Value -> n = ptr to VA DRUG CLASS (#50.605)
"RTN","BPSRPT6",196,0)
 ;                 0 = Unknown
"RTN","BPSRPT6",197,0)
 ;
"RTN","BPSRPT6",198,0)
GETDRGCL(BP50) Q $$DRUGDIE^BPSUTIL1(BP50,25)
"RTN","BPSRPT6",199,0)
 ;
"RTN","BPSRPT6",200,0)
 ;Determine whether claim was Mail, Window, or CMOP
"RTN","BPSRPT6",201,0)
 ;
"RTN","BPSRPT6",202,0)
 ; Input Variables: BPREF - refill # (0-No Refills,1-1st Refill, 2-2nd, ...) 
"RTN","BPSRPT6",203,0)
 ;
"RTN","BPSRPT6",204,0)
 ; Return Value -> M = Mail
"RTN","BPSRPT6",205,0)
 ;                 W = Window
"RTN","BPSRPT6",206,0)
 ;                 C = CMOP
"RTN","BPSRPT6",207,0)
 ;
"RTN","BPSRPT6",208,0)
MWC(BPRX,BPREF) Q $$MWC^PSOBPSU2(BPRX,BPREF)
"RTN","BPSRPT6",209,0)
 ;
"RTN","BPSRPT6",210,0)
 ;Get Patient Name
"RTN","BPSRPT6",211,0)
 ;
"RTN","BPSRPT6",212,0)
 ; Input variable -> BPDFN - ptr to PATIENT (#2)
"RTN","BPSRPT6",213,0)
 ; Returned value -> Patient Name (shortened)
"RTN","BPSRPT6",214,0)
 ; 
"RTN","BPSRPT6",215,0)
PATNAME(BPDFN) Q $E($P($G(^DPT(BPDFN,0)),U),1,25)
"RTN","BPSRPT6",216,0)
 ;
"RTN","BPSRPT6",217,0)
 ;Get Last 4 of SSN
"RTN","BPSRPT6",218,0)
 ;
"RTN","BPSRPT6",219,0)
 ; Input variable -> BPDFN - ptr to PATIENT (#2)
"RTN","BPSRPT6",220,0)
 ; Returned value -> Last 4 digits of patient's SSN
"RTN","BPSRPT6",221,0)
 ; 
"RTN","BPSRPT6",222,0)
SSN4(BPDFN) N X
"RTN","BPSRPT6",223,0)
 S X=$P($G(^DPT(BPDFN,0)),U,9)
"RTN","BPSRPT6",224,0)
 Q $E(X,$L(X)-3,$L(X))
"RTN","BPSRPT6",225,0)
 ;
"RTN","BPSRPT6",226,0)
 ;Get RX#
"RTN","BPSRPT6",227,0)
 ;
"RTN","BPSRPT6",228,0)
 ; Returned value -> RX#
"RTN","BPSRPT6",229,0)
 ; 
"RTN","BPSRPT6",230,0)
RXNUM(BPRX) Q $$RXAPI1^BPSUTIL1(+BPRX,.01,"I")
"RTN","BPSRPT6",231,0)
 ;
"RTN","BPSRPT6",232,0)
 ;Determine $Collected
"RTN","BPSRPT6",233,0)
 ;
"RTN","BPSRPT6",234,0)
 ; Returned Value -> $Collected
"RTN","BPSRPT6",235,0)
 ;
"RTN","BPSRPT6",236,0)
COLLECTD(BPRX,BPREF,BPPAYSEQ) N COL,RET
"RTN","BPSRPT6",237,0)
 S RET=$$BILLINFO^IBNCPDPI(BPRX,BPREF,BPPAYSEQ)
"RTN","BPSRPT6",238,0)
 S COL=$P(RET,U,5) I COL="0",($P(RET,U,3)=16)!($P(RET,U,3)=27) S COL=""
"RTN","BPSRPT6",239,0)
 I $P(RET,U,7)=1 S COL="N/A"
"RTN","BPSRPT6",240,0)
 Q COL_U_$P(RET,U,2)
"RTN","BPSRPT6",241,0)
 ;
"RTN","BPSRPT6",242,0)
 ;Determine Bill #
"RTN","BPSRPT6",243,0)
 ;
"RTN","BPSRPT6",244,0)
 ; Returned Value -> Bill Number
"RTN","BPSRPT6",245,0)
 ;
"RTN","BPSRPT6",246,0)
BILL(BPRX,BPREF,BPPSEQ) ;
"RTN","BPSRPT6",247,0)
 N BPSARR,BPSZ,IBIEN
"RTN","BPSRPT6",248,0)
 I BPPSEQ=1 Q $P($$BILLINFO^IBNCPDPI(BPRX,BPREF,BPPSEQ),U,1)
"RTN","BPSRPT6",249,0)
 I BPPSEQ=2 S BPSZ=$$RXBILL^IBNCPUT3(BPRX,BPREF,"S",,.BPSARR),IBIEN="" D  I +IBIEN>0 Q $P($G(BPSARR(IBIEN)),U,1)
"RTN","BPSRPT6",250,0)
 . S IBIEN=+$P(BPSZ,U,2) Q:IBIEN>0     ; get active bill first
"RTN","BPSRPT6",251,0)
 . S IBIEN=+$O(BPSARR(999999999),-1)   ; get most recent bill next
"RTN","BPSRPT6",252,0)
 . Q
"RTN","BPSRPT6",253,0)
 Q ""
"RTN","BPSRPT6",254,0)
 ;
"RTN","BPSRPT6",255,0)
 ;Get the Closed Claim Reason
"RTN","BPSRPT6",256,0)
 ;
"RTN","BPSRPT6",257,0)
 ; Input variable -> 0 for All Closed Claim Reasons or
"RTN","BPSRPT6",258,0)
 ;                   lookup to CLAIMS TRACKING NON-BILLABLE REASONS (#356.8)
"RTN","BPSRPT6",259,0)
 ; Returned value -> ALL or the selected Closed Claim Reason
"RTN","BPSRPT6",260,0)
 ; 
"RTN","BPSRPT6",261,0)
GETCLR(RSN) ;
"RTN","BPSRPT6",262,0)
 I RSN="0" S RSN="ALL"
"RTN","BPSRPT6",263,0)
 E  S RSN=$P($G(^IBE(356.8,+RSN,0)),U)
"RTN","BPSRPT6",264,0)
 Q RSN
"RTN","BPSRPT6",265,0)
 ;
"RTN","BPSRPT6",266,0)
 ;Get the Closed By Person
"RTN","BPSRPT6",267,0)
 ;
"RTN","BPSRPT6",268,0)
 ; Returned Value -> Closed By Name
"RTN","BPSRPT6",269,0)
 ; 
"RTN","BPSRPT6",270,0)
CLSBY(BP59) N BP02,CBY,Y
"RTN","BPSRPT6",271,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT6",272,0)
 S CBY=+$P($G(^BPSC(BP02,900)),U,3)
"RTN","BPSRPT6",273,0)
 S Y=$$GET1^DIQ(200,CBY_",",".01")
"RTN","BPSRPT6",274,0)
 Q Y
"RTN","BPSRPT6",275,0)
 ;
"RTN","BPSRPT6",276,0)
 ;Get the Claim Status
"RTN","BPSRPT6",277,0)
 ;
"RTN","BPSRPT6",278,0)
 ; Input Variables: BPREF - refill # (0-No Refills,1-1st Refill, 2-2nd, ...) 
"RTN","BPSRPT6",279,0)
 ;
"RTN","BPSRPT6",280,0)
STATUS(BPRX,BPREF,BPSEQ) Q $$STATUS^BPSOSRX(BPRX,BPREF,0,,$G(BPSEQ))
"RTN","BPSRPT6",281,0)
 ;
"RTN","BPSRPT6",282,0)
 ;Elapsed Time
"RTN","BPSRPT6",283,0)
 ;
"RTN","BPSRPT6",284,0)
 ; Returned Value -> TIME - Elapsed Processing Time
"RTN","BPSRPT6",285,0)
 ; 
"RTN","BPSRPT6",286,0)
ELAPSE(BP59) Q $$TIMEDIFI^BPSOSUD($P($G(^BPST(BP59,0)),U,11),$P($G(^BPST(BP59,0)),U,8))
"RTN","BPSRPT6",287,0)
 ;
"RTN","BPSRPT6",288,0)
 ;Get RX issue date
"RTN","BPSRPT6",289,0)
 ;
"RTN","BPSRPT6",290,0)
RXISSDT(BPRX) Q +$$RXAPI1^BPSUTIL1(BPRX,1,"I")
"RTN","BPSRPT6",291,0)
 ;
"RTN","BPSRPT6",292,0)
 ;
"RTN","BPSRPT6",293,0)
 ;Get RX's fill date
"RTN","BPSRPT6",294,0)
RXFILDT(BPRX) Q +$$RXAPI1^BPSUTIL1(BPRX,22,"I")
"RTN","BPSRPT6",295,0)
 ;
"RTN","BPSRPT6",296,0)
 ;Get Refill's issue date
"RTN","BPSRPT6",297,0)
 ;
"RTN","BPSRPT6",298,0)
REFISSDT(BPRX,BPREF) Q $$REFDISDT(BPRX,BPREF)
"RTN","BPSRPT6",299,0)
 ;
"RTN","BPSRPT6",300,0)
 ;Get Refill's dispense date
"RTN","BPSRPT6",301,0)
 ;
"RTN","BPSRPT6",302,0)
REFDISDT(BPRX,BPREF) Q +$$RXSUBF1^BPSUTIL1(BPRX,52,52.1,+BPREF,10.1,"I")
"RTN","BPSRPT6",303,0)
 ;
"RTN","BPSRPT6",304,0)
 ;Get Refill's refill date
"RTN","BPSRPT6",305,0)
 ;
"RTN","BPSRPT6",306,0)
REFFILDT(BPRX,BPREF) Q +$$RXSUBF1^BPSUTIL1(BPRX,52,52.1,+BPREF,.01,"I")
"RTN","BPSRPT6",307,0)
 ;
"RTN","BPSRPT6",308,0)
 ;Get RX's release date
"RTN","BPSRPT6",309,0)
 ;
"RTN","BPSRPT6",310,0)
RXRELDT(BPRX) Q +$$RXAPI1^BPSUTIL1(BPRX,31,"I")
"RTN","BPSRPT6",311,0)
 ;
"RTN","BPSRPT6",312,0)
 ;Get Refill's release date
"RTN","BPSRPT6",313,0)
 ;
"RTN","BPSRPT6",314,0)
REFRELDT(BPRX,BPREF) Q +$$RXSUBF1^BPSUTIL1(BPRX,52,52.1,+BPREF,17,"I")
"RTN","BPSRPT6",315,0)
 ;
"RTN","BPSRPT6",316,0)
 ;See if refill exists
"RTN","BPSRPT6",317,0)
 ;
"RTN","BPSRPT6",318,0)
IFREFILL(BPRX,BPREF) Q $S(+$$RXSUBF1^BPSUTIL1(BPRX,52,52.1,+BPREF,.01,"I"):1,1:0)
"RTN","BPSRPT6",319,0)
 ;
"RTN","BPSRPT6",320,0)
 ;Get RX status
"RTN","BPSRPT6",321,0)
 ;
"RTN","BPSRPT6",322,0)
 ; Input Variables -> BP59 = ptr to BPS TRANSACTIONS
"RTN","BPSRPT6",323,0)
 ;                            
"RTN","BPSRPT6",324,0)
RXSTATUS(BP59) Q $$RXST^BPSSCRU2(BP59)
"RTN","BPSRPT6",325,0)
 ;
"RTN","BPSRPT6",326,0)
 ;Return RX Quantity (From BPS TRANSACTION)
"RTN","BPSRPT6",327,0)
 ;
"RTN","BPSRPT6",328,0)
QTY(BP59) Q +$P($G(^BPST(BP59,5)),U,1)
"RTN","BPSRPT6",329,0)
 ;
"RTN","BPSRPT6",330,0)
 ;Return NDC Number
"RTN","BPSRPT6",331,0)
GETNDC(BPRX,BPREF) Q $$GETNDC^PSONDCUT(BPRX,BPREF)
"RTN","BPSRPT6",332,0)
 ;
"RTN","BPSRPT6",333,0)
 ;Return Copay Status ($)
"RTN","BPSRPT6",334,0)
COPAY(BPRX) Q $S(+$$RXAPI1^BPSUTIL1(BPRX,105,"I"):"$",1:"")
"RTN","BPSRPT6",335,0)
 ;
"RTN","BPSRPT6",336,0)
 ;Get Insurance BIN
"RTN","BPSRPT6",337,0)
 ;
"RTN","BPSRPT6",338,0)
 ; Input variable -> BP59 - ptr to BPS TRANS-PATIENT INSURANCE MULTIPLE (#9002313.59902)
"RTN","BPSRPT6",339,0)
 ; Returned value -> BIN
"RTN","BPSRPT6",340,0)
 ;
"RTN","BPSRPT6",341,0)
INSBIN(BP59) ;
"RTN","BPSRPT6",342,0)
 N BPSBIN,BPSCIEN
"RTN","BPSRPT6",343,0)
 ;
"RTN","BPSRPT6",344,0)
 S BPSBIN=""
"RTN","BPSRPT6",345,0)
 ; Get Claim IEN from BPS TRANS
"RTN","BPSRPT6",346,0)
 S BPSCIEN=$$GET1^DIQ(9002313.59,BP59,3.1)
"RTN","BPSRPT6",347,0)
 ; Get BIN from BPS CLAIMS (#9002313.02)
"RTN","BPSRPT6",348,0)
 S BPSBIN=$$GET1^DIQ(9002313.02,BPSCIEN,101)
"RTN","BPSRPT6",349,0)
 ;
"RTN","BPSRPT6",350,0)
 Q BPSBIN
"RTN","BPSRPT6",351,0)
 ;
"RTN","BPSRPT6",352,0)
 ;Get Prescriber ID and Name
"RTN","BPSRPT6",353,0)
 ;
"RTN","BPSRPT6",354,0)
 ; Input variable -> BP59 - ptr to BPS TRANSACTIONS (#9002313.59)
"RTN","BPSRPT6",355,0)
 ; Returned value -> Prescriber ID ^ Prescriber Name
"RTN","BPSRPT6",356,0)
 ; 
"RTN","BPSRPT6",357,0)
PRESCIN(BP59) ;
"RTN","BPSRPT6",358,0)
 N BPSIEN,BPSPID,BPSPNM,BPSRX
"RTN","BPSRPT6",359,0)
 ;
"RTN","BPSRPT6",360,0)
 S BPSRX=$$GET1^DIQ(9002313.59,BP59,1.11,"I")
"RTN","BPSRPT6",361,0)
 S BPSIEN=$$GET1^DIQ(52,BPSRX,4,"I")
"RTN","BPSRPT6",362,0)
 S BPSPNM=$$GET1^DIQ(200,BPSIEN,.01)
"RTN","BPSRPT6",363,0)
 S BPSPID=$$GET1^DIQ(200,BPSIEN,41.99)
"RTN","BPSRPT6",364,0)
 ;
"RTN","BPSRPT6",365,0)
 Q BPSPID_"^"_BPSPNM
"RTN","BPSRPT6",366,0)
 ;
"RTN","BPSRPT7")
0^8^B185034078
"RTN","BPSRPT7",1,0)
BPSRPT7 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT7",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8,10,11,19,20,23**;JUN 2004;Build 44
"RTN","BPSRPT7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT7",4,0)
 ;
"RTN","BPSRPT7",5,0)
 Q
"RTN","BPSRPT7",6,0)
 ;
"RTN","BPSRPT7",7,0)
 ;Routine to Display the Reports (Continued)
"RTN","BPSRPT7",8,0)
 ;
"RTN","BPSRPT7",9,0)
 ; Input Variables -> BPCLM = Array of report data by date
"RTN","BPSRPT7",10,0)
 ;                   BPDIV,BPSUMDET,GTOT
"RTN","BPSRPT7",11,0)
 ; Returned Value -> Cumulative Grand Totals
"RTN","BPSRPT7",12,0)
 ; 
"RTN","BPSRPT7",13,0)
PTBDT(BPDIV,BPSUMDET,BPCLM,GTOT) N DIFF,I,NP,RDT,TOT,X
"RTN","BPSRPT7",14,0)
 ;
"RTN","BPSRPT7",15,0)
 ;Loop through compiled array and display
"RTN","BPSRPT7",16,0)
 S TOT=""
"RTN","BPSRPT7",17,0)
 S RDT="" F  S RDT=$O(BPCLM(RDT)) Q:RDT=""  D  Q:BPQ
"RTN","BPSRPT7",18,0)
 .S NP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",19,0)
 .S X=$G(BPCLM(RDT))
"RTN","BPSRPT7",20,0)
 .;
"RTN","BPSRPT7",21,0)
 .;Print Details - Report
"RTN","BPSRPT7",22,0)
 .I BPSUMDET=0,'BPEXCEL D
"RTN","BPSRPT7",23,0)
 ..W !,$$DATTIM^BPSRPT1(RDT) ;Date
"RTN","BPSRPT7",24,0)
 ..W ?15,$J(+$P(X,U),17) ;#Claims
"RTN","BPSRPT7",25,0)
 ..W ?33,$J(+$P(X,U,2),17,2)  ;Amount Submitted
"RTN","BPSRPT7",26,0)
 ..W ?51,$J(+$P(X,U,3),17,2)  ;Returned Rejected
"RTN","BPSRPT7",27,0)
 ..W ?69,$J(+$P(X,U,4),17,2)  ;Returned Payable
"RTN","BPSRPT7",28,0)
 ..W ?87,$J(+$P(X,U,5),17,2)  ;Amount to Receive
"RTN","BPSRPT7",29,0)
 ..;
"RTN","BPSRPT7",30,0)
 ..;Difference
"RTN","BPSRPT7",31,0)
 ..S DIFF=+$P(X,U,4)-$P(X,U,5)
"RTN","BPSRPT7",32,0)
 ..I DIFF<0 S DIFF="<"_$TR($J(-DIFF,15,2)," ")_">" W ?117,$J(DIFF,15)
"RTN","BPSRPT7",33,0)
 ..E  W ?116,$J(DIFF,15,2)
"RTN","BPSRPT7",34,0)
 ..;
"RTN","BPSRPT7",35,0)
 ..;Print Details - Excel
"RTN","BPSRPT7",36,0)
 .I BPSUMDET=0,BPEXCEL D
"RTN","BPSRPT7",37,0)
 ..;
"RTN","BPSRPT7",38,0)
 ..;Division
"RTN","BPSRPT7",39,0)
 ..W !,$S(BPDIV=0:"BLANK",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV),U
"RTN","BPSRPT7",40,0)
 ..W $$DATTIM^BPSRPT1(RDT),U  ;Date
"RTN","BPSRPT7",41,0)
 ..W +$P(X,U),U ;#Claims
"RTN","BPSRPT7",42,0)
 ..W $TR($J(+$P(X,U,2),17,2)," "),U  ;Amount Submitted
"RTN","BPSRPT7",43,0)
 ..W $TR($J(+$P(X,U,3),17,2)," "),U  ;Returned Rejected
"RTN","BPSRPT7",44,0)
 ..W $TR($J(+$P(X,U,4),17,2)," "),U  ;Returned Payable
"RTN","BPSRPT7",45,0)
 ..W $TR($J(+$P(X,U,5),17,2)," "),U  ;Amount to Receive
"RTN","BPSRPT7",46,0)
 ..;
"RTN","BPSRPT7",47,0)
 ..;Difference
"RTN","BPSRPT7",48,0)
 ..S DIFF=+$P(X,U,4)-$P(X,U,5)
"RTN","BPSRPT7",49,0)
 ..W $TR($J(DIFF,15,2)," ")
"RTN","BPSRPT7",50,0)
 .;
"RTN","BPSRPT7",51,0)
 .;Save Totals
"RTN","BPSRPT7",52,0)
 .F I=1:1:5 S $P(TOT,U,I)=$P(TOT,U,I)+$P(X,U,I),$P(GTOT,U,I)=$P($G(GTOT),U,I)+$P(X,U,I)
"RTN","BPSRPT7",53,0)
 ;
"RTN","BPSRPT7",54,0)
 ;Print Totals
"RTN","BPSRPT7",55,0)
 Q:BPEXCEL
"RTN","BPSRPT7",56,0)
 Q:BPQ  S NP=$$CHKP^BPSRPT5(2) Q:BPQ
"RTN","BPSRPT7",57,0)
 D ULINE^BPSRPT5("-")
"RTN","BPSRPT7",58,0)
 W !,"TOTALS"
"RTN","BPSRPT7",59,0)
 W ?15,$J(+$P(TOT,U),17)
"RTN","BPSRPT7",60,0)
 W ?33,$J(+$P(TOT,U,2),17,2)
"RTN","BPSRPT7",61,0)
 W ?51,$J(+$P(TOT,U,3),17,2)
"RTN","BPSRPT7",62,0)
 W ?69,$J(+$P(TOT,U,4),17,2)
"RTN","BPSRPT7",63,0)
 W ?87,$J(+$P(TOT,U,5),17,2)
"RTN","BPSRPT7",64,0)
 S X=$S((+$P(TOT,U,4))=0:0,1:(+$P(TOT,U,5))/(+$P(TOT,U,4)))
"RTN","BPSRPT7",65,0)
 S DIFF=+$P(TOT,U,4)-$P(TOT,U,5)
"RTN","BPSRPT7",66,0)
 I DIFF<0 S DIFF="<"_$TR($J(-DIFF,15,2)," ")_">" W ?117,$J(DIFF,15)
"RTN","BPSRPT7",67,0)
 E  W ?116,$J(DIFF,15,2)
"RTN","BPSRPT7",68,0)
 Q
"RTN","BPSRPT7",69,0)
 ;
"RTN","BPSRPT7",70,0)
 ;Print Grand Totals - Report 6
"RTN","BPSRPT7",71,0)
 ;
"RTN","BPSRPT7",72,0)
PGTOT6(GTOT) N DIFF,NP,X
"RTN","BPSRPT7",73,0)
 Q:BPQ  S NP=$$CHKP^BPSRPT5(2) Q:BPQ
"RTN","BPSRPT7",74,0)
 D ULINE^BPSRPT5("-")
"RTN","BPSRPT7",75,0)
 W !,"GRAND TOTALS"
"RTN","BPSRPT7",76,0)
 W ?15,$J(+$P(GTOT,U),17)
"RTN","BPSRPT7",77,0)
 W ?33,$J(+$P(GTOT,U,2),17,2)
"RTN","BPSRPT7",78,0)
 W ?51,$J(+$P(GTOT,U,3),17,2)
"RTN","BPSRPT7",79,0)
 W ?69,$J(+$P(GTOT,U,4),17,2)
"RTN","BPSRPT7",80,0)
 W ?87,$J(+$P(GTOT,U,5),17,2)
"RTN","BPSRPT7",81,0)
 S X=$S((+$P(GTOT,U,4))=0:0,1:(+$P(GTOT,U,5))/(+$P(GTOT,U,4)))
"RTN","BPSRPT7",82,0)
 S DIFF=+$P(GTOT,U,4)-$P(GTOT,U,5)
"RTN","BPSRPT7",83,0)
 I DIFF<0 S DIFF="<"_$TR($J(-DIFF,15,2)," ")_">" W ?117,$J(DIFF,15)
"RTN","BPSRPT7",84,0)
 E  W ?116,$J(DIFF,15,2)
"RTN","BPSRPT7",85,0)
 Q
"RTN","BPSRPT7",86,0)
 ;
"RTN","BPSRPT7",87,0)
 ;Print Grand Totals - Reports 1,2,3,4,5,7,8,9
"RTN","BPSRPT7",88,0)
 ;
"RTN","BPSRPT7",89,0)
PGTOT(BPRTYPE,BPGBIL,BPGINS,BPGCOLL,BPGCNT,BPGELTM,BPRICE) ;
"RTN","BPSRPT7",90,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT7",91,0)
 .W !!,?83,"----------",?105,"----------",?122,"----------"
"RTN","BPSRPT7",92,0)
 .W !,"GRAND TOTALS",?83,$J(BPGBIL,10,2),?105,$J(BPGINS,10,2),?122,$J(BPGCOLL,10,2)
"RTN","BPSRPT7",93,0)
 .W !,"COUNT",?83,$J(BPGCNT,10),?105,$J(BPGCNT,10),?122,$J(BPGCNT,10)
"RTN","BPSRPT7",94,0)
 .W:BPGCNT !,"MEAN",?83,$J(BPGBIL/BPGCNT,10,2),?105,$J(BPGINS/BPGCNT,10,2),?122,$J(BPGCOLL/BPGCNT,10,2)
"RTN","BPSRPT7",95,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT7",96,0)
 .W !!,?100,"----------",?122,"----------"
"RTN","BPSRPT7",97,0)
 .W !,"GRAND TOTALS",?100,$J(BPGBIL,10,2),?122,$J(BPGINS,10,2)
"RTN","BPSRPT7",98,0)
 .W !,"COUNT",?100,$J(BPGCNT,10),?122,$J(BPGCNT,10)
"RTN","BPSRPT7",99,0)
 .W:BPGCNT !,"MEAN",?100,$J(BPGBIL/BPGCNT,10,2),?122,$J(BPGINS/BPGCNT,10,2)
"RTN","BPSRPT7",100,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT7",101,0)
 .W !!,?41,"----------"
"RTN","BPSRPT7",102,0)
 .W !,"GRAND TOTALS",?41,$J(BPGBIL,10,2)
"RTN","BPSRPT7",103,0)
 .W !,"COUNT",?41,$J(BPGCNT,10)
"RTN","BPSRPT7",104,0)
 .W:BPGCNT !,"MEAN",?41,$J(BPGBIL/BPGCNT,10,2)
"RTN","BPSRPT7",105,0)
 I (BPRTYPE=5) D  Q
"RTN","BPSRPT7",106,0)
 .W !!,"GRAND TOTALS (ALL DIVISIONS)",?65,"---------------"
"RTN","BPSRPT7",107,0)
 .W !,"TOTAL CLAIMS",?65,$J(BPGCNT,15)
"RTN","BPSRPT7",108,0)
 .W !,"AVERAGE ELAPSED TIME PER CLAIM",?65,$J($S(BPGCNT=0:"0",1:(BPGELTM\BPGCNT)),15)
"RTN","BPSRPT7",109,0)
 I (BPRTYPE=7) D  Q
"RTN","BPSRPT7",110,0)
 .W !!,"GRAND TOTALS (ALL DIVISIONS) BY BILLER"
"RTN","BPSRPT7",111,0)
 .N BPBILR,BPDIV S BPDIV="ALL DIVISIONS"
"RTN","BPSRPT7",112,0)
 .S BPBILR="" F  S BPBILR=$O(BPGCNT(BPBILR)) Q:BPBILR=""  D  Q:BPQ
"RTN","BPSRPT7",113,0)
 ..S NP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",114,0)
 ..W !,?3,BPBILR,?65,$J($G(BPGCNT(BPBILR)),5)
"RTN","BPSRPT7",115,0)
 .Q:$G(BPQ)
"RTN","BPSRPT7",116,0)
 .W !,?65,"-----"
"RTN","BPSRPT7",117,0)
 .W !,"CLOSED CLAIMS GRAND TOTAL",?65,$J(BPGCNT,5)
"RTN","BPSRPT7",118,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT7",119,0)
 .W !!,?78,"----------",?100,"----------",?122,"----------"
"RTN","BPSRPT7",120,0)
 .W !,"GRAND TOTALS",?78,$J(BPGBIL,10,2),?100,$J(BPGINS,10,2),?122,$J(BPGCOLL,10,2)
"RTN","BPSRPT7",121,0)
 .W !,?4,$J($P(BPRICE,U,3),10,2),?23,$J($P(BPRICE,U,4),10,2),?38,$J($P(BPRICE,U,5),10,2),?56,$J($P(BPRICE,U,6),10,2),?81,$J($P(BPRICE,U,7),10,2),?96,$J($P(BPRICE,U,2),10,2),?111,$J($P(BPRICE,U),10,2)
"RTN","BPSRPT7",122,0)
 .W !,"COUNT",?78,$J(BPGCNT,10),?100,$J(BPGCNT,10),?122,$J(BPGCNT,10)
"RTN","BPSRPT7",123,0)
 .W !,?4,$J(BPGCNT,10),?23,$J(BPGCNT,10),?38,$J(BPGCNT,10),?56,$J(BPGCNT,10),?81,$J(BPGCNT,10),?96,$J(BPGCNT,10),?111,$J(BPGCNT,10)
"RTN","BPSRPT7",124,0)
 .W:BPGCNT !,"MEAN",?78,$J(BPGBIL/BPGCNT,10,2),?100,$J(BPGINS/BPGCNT,10,2),?122,$J(BPGCOLL/BPGCNT,10,2)
"RTN","BPSRPT7",125,0)
 .W !,?4,$J($P(BPRICE,U,3)/BPGCNT,10,2),?23,$J($P(BPRICE,U,4)/BPGCNT,10,2),?38,$J($P(BPRICE,U,5)/BPGCNT,10,2)
"RTN","BPSRPT7",126,0)
 .W ?56,$J($P(BPRICE,U,6)/BPGCNT,10,2),?81,$J($P(BPRICE,U,7)/BPGCNT,10,2),?96,$J($P(BPRICE,U,2)/BPGCNT,10,2),?111,$J($P(BPRICE,U)/BPGCNT,10,2)
"RTN","BPSRPT7",127,0)
 ;
"RTN","BPSRPT7",128,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT7",129,0)
 .W !!,?84,"----------"
"RTN","BPSRPT7",130,0)
 .W !,"GRAND TOTALS",?84,$J(BPGBIL,10,2)
"RTN","BPSRPT7",131,0)
 .W !,"COUNT",?84,$J(BPGCNT,10)
"RTN","BPSRPT7",132,0)
 .W:BPGCNT !,"MEAN",?84,$J(BPGBIL/BPGCNT,10,2)
"RTN","BPSRPT7",133,0)
 Q
"RTN","BPSRPT7",134,0)
 ;
"RTN","BPSRPT7",135,0)
 ;Print Report Insurance Subtotals
"RTN","BPSRPT7",136,0)
 ;
"RTN","BPSRPT7",137,0)
ITOT(BPRTYPE,BPDIV,BPGRPLAN,BPTBIL,BPTINS,BPTCOLL,BPCNT,BPRICE) N BPNP
"RTN","BPSRPT7",138,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT7",139,0)
 .W !!,?83,"----------",?105,"----------",?122,"----------"
"RTN","BPSRPT7",140,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?83,$J(BPTBIL,10,2),?105,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT7",141,0)
 .W !,"COUNT",?83,$J(BPCNT,10),?105,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",142,0)
 .W:BPCNT !,"MEAN",?83,$J(BPTBIL/BPCNT,10,2),?105,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT7",143,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT7",144,0)
 .W !!,?100,"----------",?122,"----------"
"RTN","BPSRPT7",145,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?100,$J(BPTBIL,10,2),?122,$J(BPTINS,10,2)
"RTN","BPSRPT7",146,0)
 .W !,"COUNT",?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",147,0)
 .W:BPCNT !,"MEAN",?100,$J(BPTBIL/BPCNT,10,2),?122,$J(BPTINS/BPCNT,10,2)
"RTN","BPSRPT7",148,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT7",149,0)
 .W !!,?41,"----------"
"RTN","BPSRPT7",150,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,22),?41,$J(BPTBIL,10,2)
"RTN","BPSRPT7",151,0)
 .W !,"COUNT",?41,$J(BPCNT,10)
"RTN","BPSRPT7",152,0)
 .W:BPCNT !,"MEAN",?41,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT7",153,0)
 I (BPRTYPE=7) D  Q
"RTN","BPSRPT7",154,0)
 .W !!,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50)
"RTN","BPSRPT7",155,0)
 .N BPBILR
"RTN","BPSRPT7",156,0)
 .S BPBILR="" F  S BPBILR=$O(BPCNT(BPBILR)) Q:BPBILR=""  D  Q:BPQ
"RTN","BPSRPT7",157,0)
 ..S BPNP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",158,0)
 ..W !,?3,BPBILR,?65,$J($G(BPCNT(BPBILR)),5)
"RTN","BPSRPT7",159,0)
 .Q:$G(BPQ)
"RTN","BPSRPT7",160,0)
 .W !,?65,"-----"
"RTN","BPSRPT7",161,0)
 .W !,"CLOSED CLAIMS SUBTOTAL",?65,$J(BPCNT,5)
"RTN","BPSRPT7",162,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT7",163,0)
 .W !!,?78,"----------",?100,"----------",?122,"----------"
"RTN","BPSRPT7",164,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?78,$J(BPTBIL,10,2),?100,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT7",165,0)
 .W !,?4,$J($P(BPRICE,U,3),10,2),?23,$J($P(BPRICE,U,4),10,2),?38,$J($P(BPRICE,U,5),10,2),?56,$J($P(BPRICE,U,6),10,2),?81,$J($P(BPRICE,U,7),10,2),?96,$J($P(BPRICE,U,2),10,2),?111,$J($P(BPRICE,U),10,2)
"RTN","BPSRPT7",166,0)
 .W !,"COUNT",?78,$J(BPCNT,10),?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",167,0)
 .W !,?4,$J(BPCNT,10),?23,$J(BPCNT,10),?38,$J(BPCNT,10),?56,$J(BPCNT,10),?81,$J(BPCNT,10),?96,$J(BPCNT,10),?111,$J(BPCNT,10)
"RTN","BPSRPT7",168,0)
 .W:BPCNT !,"MEAN",?78,$J(BPTBIL/BPCNT,10,2),?100,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT7",169,0)
 .W !,?4,$J($P(BPRICE,U,3)/BPCNT,10,2),?23,$J($P(BPRICE,U,4)/BPCNT,10,2),?38,$J($P(BPRICE,U,5)/BPCNT,10,2),?56,$J($P(BPRICE,U,6)/BPCNT,10,2),?81,$J($P(BPRICE,U,7)/BPCNT,10,2),?96,$J($P(BPRICE,U,2)/BPCNT,10,2),?111,$J($P(BPRICE,U)/BPCNT,10,2)
"RTN","BPSRPT7",170,0)
 ;
"RTN","BPSRPT7",171,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT7",172,0)
 .W !!,?84,"----------"
"RTN","BPSRPT7",173,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?84,$J(BPTBIL,10,2)
"RTN","BPSRPT7",174,0)
 .W !,"COUNT",?84,$J(BPCNT,10)
"RTN","BPSRPT7",175,0)
 .W:BPCNT !,"MEAN",?84,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT7",176,0)
 Q
"RTN","BPSRPT7",177,0)
 ;
"RTN","BPSRPT7",178,0)
 ;Get Close Reason
"RTN","BPSRPT7",179,0)
 ;
"RTN","BPSRPT7",180,0)
 ; Input Variable -> BP59 = ptr to BPS TRANSACTIONS
"RTN","BPSRPT7",181,0)
 ; Returned Value -> Claim Close Reason
"RTN","BPSRPT7",182,0)
 ;
"RTN","BPSRPT7",183,0)
CLRSN(BP59) N BP02,CIEN,CL
"RTN","BPSRPT7",184,0)
 S CL=""
"RTN","BPSRPT7",185,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT7",186,0)
 S CIEN=+$P($G(^BPSC(BP02,900)),U,4)
"RTN","BPSRPT7",187,0)
 I CIEN'=0 S CL=$$GETCLR^BPSRPT6(CIEN)
"RTN","BPSRPT7",188,0)
 Q CIEN_"^"_CL
"RTN","BPSRPT7",189,0)
 ;
"RTN","BPSRPT7",190,0)
 ;Get Reversal Reason
"RTN","BPSRPT7",191,0)
 ;
"RTN","BPSRPT7",192,0)
 ; Input Variable -> BP59 = ptr to BPS TRANSACTIONS
"RTN","BPSRPT7",193,0)
 ; Returned Value -> Claim Reversal Reason
"RTN","BPSRPT7",194,0)
 ;
"RTN","BPSRPT7",195,0)
RVSRSN(BP59) Q $P($G(^BPST(BP59,4)),U,4)
"RTN","BPSRPT7",196,0)
 ;
"RTN","BPSRPT7",197,0)
 ;Return the Billed Amount
"RTN","BPSRPT7",198,0)
 ;
"RTN","BPSRPT7",199,0)
BILLED(BP59) ;
"RTN","BPSRPT7",200,0)
 Q +$P($G(^BPST(BP59,5)),U,5)
"RTN","BPSRPT7",201,0)
 ;
"RTN","BPSRPT7",202,0)
 ;Return the Transaction Type - SUBMIT or REVERSAL
"RTN","BPSRPT7",203,0)
 ;
"RTN","BPSRPT7",204,0)
TTYPE(BPRX,BPREF,BPSEQ) N BPSTATUS,TTYPE
"RTN","BPSRPT7",205,0)
 S TTYPE="SUBMIT"
"RTN","BPSRPT7",206,0)
 S BPSTATUS=$$STATUS^BPSRPT6(BPRX,BPREF,$G(BPSEQ))
"RTN","BPSRPT7",207,0)
 I BPSTATUS["REVERSAL" S TTYPE="REVERSAL"
"RTN","BPSRPT7",208,0)
 Q TTYPE
"RTN","BPSRPT7",209,0)
 ;
"RTN","BPSRPT7",210,0)
 ;Return the payer response
"RTN","BPSRPT7",211,0)
 ;
"RTN","BPSRPT7",212,0)
RESPONSE(BPRX,BPREF,BPSEQ) Q $P($$STATUS^BPSRPT6(BPRX,BPREF,$G(BPSEQ)),U)
"RTN","BPSRPT7",213,0)
 ;
"RTN","BPSRPT7",214,0)
 ;Print Report Subtotals
"RTN","BPSRPT7",215,0)
 ;
"RTN","BPSRPT7",216,0)
TOTALS(BPRTYPE,BPDIV,BPTBIL,BPTINS,BPTCOLL,BPCNT,BPELTM,BPRICE) ;
"RTN","BPSRPT7",217,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT7",218,0)
 .W !!,?83,"----------",?105,"----------",?122,"----------"
"RTN","BPSRPT7",219,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?83,$J(BPTBIL,10,2),?105,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT7",220,0)
 .W !,"COUNT",?83,$J(BPCNT,10),?105,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",221,0)
 .W:BPCNT !,"MEAN",?83,$J(BPTBIL/BPCNT,10,2),?105,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT7",222,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT7",223,0)
 .W !!,?100,"----------",?122,"----------"
"RTN","BPSRPT7",224,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?100,$J(BPTBIL,10,2),?122,$J(BPTINS,10,2)
"RTN","BPSRPT7",225,0)
 .W !,"COUNT",?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",226,0)
 .W:BPCNT !,"MEAN",?100,$J(BPTBIL/BPCNT,10,2),?122,$J(BPTINS/BPCNT,10,2)
"RTN","BPSRPT7",227,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT7",228,0)
 .W !!,?41,"----------"
"RTN","BPSRPT7",229,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,22),?41,$J(BPTBIL,10,2)
"RTN","BPSRPT7",230,0)
 .W !,"COUNT",?41,$J(BPCNT,10)
"RTN","BPSRPT7",231,0)
 .W:BPCNT !,"MEAN",?41,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT7",232,0)
 I (BPRTYPE=5) D  Q
"RTN","BPSRPT7",233,0)
 .W !!,"SUBTOTALS for DIV: ",$E($$BPDIV(BPDIV),1,43),?65,"---------------"
"RTN","BPSRPT7",234,0)
 .W !,"TOTAL CLAIMS",?65,$J(BPCNT,15)
"RTN","BPSRPT7",235,0)
 .W !,"AVERAGE ELAPSED TIME PER CLAIM",?65,$J($S(BPCNT=0:"0",1:(BPELTM\BPCNT)),15)
"RTN","BPSRPT7",236,0)
 I (BPRTYPE=7) D  Q
"RTN","BPSRPT7",237,0)
 .W !!,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,43)
"RTN","BPSRPT7",238,0)
 .N BPBILR
"RTN","BPSRPT7",239,0)
 .S BPBILR="" F  S BPBILR=$O(BPCNT(BPBILR)) Q:BPBILR=""  D  Q:BPQ
"RTN","BPSRPT7",240,0)
 ..S NP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",241,0)
 ..W !,?3,BPBILR,?65,$J($G(BPCNT(BPBILR)),5)
"RTN","BPSRPT7",242,0)
 .Q:$G(BPQ)
"RTN","BPSRPT7",243,0)
 .W !,?65,"-----"
"RTN","BPSRPT7",244,0)
 .W !,"CLOSED CLAIMS SUBTOTAL",?65,$J(BPCNT,5)
"RTN","BPSRPT7",245,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT7",246,0)
 .W !!,?78,"----------",?100,"----------",?122,"----------"
"RTN","BPSRPT7",247,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?78,$J(BPTBIL,10,2),?100,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT7",248,0)
 .W !,?4,$J($P(BPRICE,U,3),10,2),?23,$J($P(BPRICE,U,4),10,2),?38,$J($P(BPRICE,U,5),10,2),?56,$J($P(BPRICE,U,6),10,2),?81,$J($P(BPRICE,U,7),10,2),?96,$J($P(BPRICE,U,2),10,2),?111,$J($P(BPRICE,U),10,2)
"RTN","BPSRPT7",249,0)
 .W !,"COUNT",?78,$J(BPCNT,10),?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",250,0)
 .W !,?4,$J(BPCNT,10),?23,$J(BPCNT,10),?38,$J(BPCNT,10),?56,$J(BPCNT,10),?81,$J(BPCNT,10),?96,$J(BPCNT,10),?111,$J(BPCNT,10)
"RTN","BPSRPT7",251,0)
 .W:BPCNT !,"MEAN",?78,$J(BPTBIL/BPCNT,10,2),?100,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT7",252,0)
 .W !,?4,$J($P(BPRICE,U,3)/BPCNT,10,2),?23,$J($P(BPRICE,U,4)/BPCNT,10,2),?38,$J($P(BPRICE,U,5)/BPCNT,10,2),?56,$J($P(BPRICE,U,6)/BPCNT,10,2),?81,$J($P(BPRICE,U,7)/BPCNT,10,2),?96,$J($P(BPRICE,U,2)/BPCNT,10,2),?111,$J($P(BPRICE,U)/BPCNT,10,2)
"RTN","BPSRPT7",253,0)
 ;
"RTN","BPSRPT7",254,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT7",255,0)
 .W !!,?84,"----------"
"RTN","BPSRPT7",256,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?84,$J(BPTBIL,10,2)
"RTN","BPSRPT7",257,0)
 .W !,"COUNT",?84,$J(BPCNT,10)
"RTN","BPSRPT7",258,0)
 .W:BPCNT !,"MEAN",?84,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT7",259,0)
 Q
"RTN","BPSRPT7",260,0)
 ;
"RTN","BPSRPT7",261,0)
 ;Print Report Header
"RTN","BPSRPT7",262,0)
 ; Input variables (passed in) - BPRTYPE -> number of report
"RTN","BPSRPT7",263,0)
 ;                             - BPRPTNAM -> report name
"RTN","BPSRPT7",264,0)
 ;                             - BPPAGE -> report page number
"RTN","BPSRPT7",265,0)
 ; Input variables (defined in BPSRPT0) - BPPHARM,BPSUMDET,BPNOW,BPMWC,BPRTBCK,BPINSINF
"RTN","BPSRPT7",266,0)
 ;                                        BPREJCD,BPCCRSN,BPAUTREV,BPACREJ,BPQSTDRG
"RTN","BPSRPT7",267,0)
 ;                                        BPDRUG,BPDRGCL,BPRESC,BPOPCL,BPRLNRL,
"RTN","BPSRPT7",268,0)
 ;                                        BPSORT,BPBEGDT,BPENDDT
"RTN","BPSRPT7",269,0)
 ; Output variable - BPSDATA -> Reset to 0 to show no actual data has been printed
"RTN","BPSRPT7",270,0)
 ;                           on the screen
"RTN","BPSRPT7",271,0)
 ;                   BPPAGE -> First set in BPSRPT0, report page number
"RTN","BPSRPT7",272,0)
 ;                   BPBLINE -> Controls whether to print a blank line
"RTN","BPSRPT7",273,0)
 ;                   
"RTN","BPSRPT7",274,0)
HDR(BPRTYPE,BPRPTNAM,BPPAGE) ;
"RTN","BPSRPT7",275,0)
 ;Display Excel Header
"RTN","BPSRPT7",276,0)
 I BPEXCEL D HDR^BPSRPT8(BPRTYPE) Q
"RTN","BPSRPT7",277,0)
 ;
"RTN","BPSRPT7",278,0)
 ; Define BPPDATA - Tells whether data has been displayed for a screen
"RTN","BPSRPT7",279,0)
 S BPSDATA=0
"RTN","BPSRPT7",280,0)
 S BPBLINE=""
"RTN","BPSRPT7",281,0)
 S BPPAGE=$G(BPPAGE)+1
"RTN","BPSRPT7",282,0)
 W @IOF
"RTN","BPSRPT7",283,0)
 W "ECME "_BPRPTNAM_" "_$S(BPSUMDET=1:"SUMMARY",1:"DETAIL")_" REPORT"
"RTN","BPSRPT7",284,0)
 I (",2,")'[BPRTYPE D
"RTN","BPSRPT7",285,0)
 . W ?89,"Print Date: "_$G(BPNOW)_"  Page:",$J(BPPAGE,3)
"RTN","BPSRPT7",286,0)
 . W !,"DIVISION(S): ",$$GETDIVS^BPSRPT4(72,.BPPHARM)
"RTN","BPSRPT7",287,0)
 . W ?86,"Fill Locations: "_$S(BPMWC="A":"C,M,W",1:BPMWC)
"RTN","BPSRPT7",288,0)
 ;
"RTN","BPSRPT7",289,0)
 I (",2,")[BPRTYPE D
"RTN","BPSRPT7",290,0)
 . W ?87,"Print Date: "_$G(BPNOW)_"  Page:",$J(BPPAGE,3)
"RTN","BPSRPT7",291,0)
 . W !,"DIVISION(S): ",$$GETDIVS^BPSRPT4(72,.BPPHARM)
"RTN","BPSRPT7",292,0)
 . W ?84,"Fill Locations: "_$S(BPMWC="A":"C,M,W",1:BPMWC)
"RTN","BPSRPT7",293,0)
 . W ?110,"Fill Type: "
"RTN","BPSRPT7",294,0)
 . I BPRTBCK=1 W "RT,BB,P2,RS" Q
"RTN","BPSRPT7",295,0)
 . F I=1:1:$L(BPRTBCK,",") W:I'=1 "," S RTBCKX=$P(BPRTBCK,",",I) W $S(RTBCKX=2:"RT",RTBCKX=3:"BB",RTBCKX=4:"P2",RTBCKX=5:"RS",1:"")
"RTN","BPSRPT7",296,0)
 ;
"RTN","BPSRPT7",297,0)
 I (",2,9,")'[BPRTYPE W ?110,"Fill type: "_$S(BPRTBCK=2:"RT",BPRTBCK=3:"BB",BPRTBCK=4:"P2",BPRTBCK=5:"RS",1:"RT,BB,P2,RS")
"RTN","BPSRPT7",298,0)
 ;
"RTN","BPSRPT7",299,0)
 I (",2,")[BPRTYPE W !,"Insurance: "_$S(BPINSINF=0:"ALL",1:"SELECTED")
"RTN","BPSRPT7",300,0)
 I (",2,")'[BPRTYPE W !,"Insurance: "_$S(BPINSINF=0:"ALL",1:$$BPINS(BPINSINF))
"RTN","BPSRPT7",301,0)
 ;
"RTN","BPSRPT7",302,0)
 I (",7,")[BPRTYPE W ?44,"Close Reason: ",$E($$GETCLR^BPSRPT6(BPCCRSN),1,26)
"RTN","BPSRPT7",303,0)
 I (",4,")[BPRTYPE W ?44,$J($S(BPAUTREV=0:"ALL",1:"AUTO"),4)," Reversals"
"RTN","BPSRPT7",304,0)
 I (",4,")[BPRTYPE W ?60,$J($S(BPACREJ=1:"REJECTED",BPACREJ=2:"ACCEPTED",1:"ALL"),8)," Returned Status"
"RTN","BPSRPT7",305,0)
 ;
"RTN","BPSRPT7",306,0)
 I (",2,")'[BPRTYPE W ?87,"Drugs/Classes: "_$S(BPQSTDRG=2:$$DRGNAM^BPSRPT6(BPDRUG,30),BPQSTDRG=3:$E(BPDRGCL,1,30),1:"ALL")
"RTN","BPSRPT7",307,0)
 I (",2,")[BPRTYPE D
"RTN","BPSRPT7",308,0)
 . W ?85,"Drugs/Classes: "_$S(BPQSTDRG'=1:"SELECTED",1:"ALL")
"RTN","BPSRPT7",309,0)
 . W !,"Reject Code: ",$S(BPREJCD'=0:"SELECTED",1:"ALL")
"RTN","BPSRPT7",310,0)
 . W ?87,"Eligibility: " D
"RTN","BPSRPT7",311,0)
 . . I BPELIG1=0 W "CVA,TRI,VET" Q
"RTN","BPSRPT7",312,0)
 . . S (ABVELIG,LIST,N)="" F  S N=$O(BPELIG1(N)) Q:N=""  D
"RTN","BPSRPT7",313,0)
 . . . S ABVELIG=$S(N="C":"CVA",N="T":"TRI",N="V":"VET",1:""),LIST=LIST_$G(ABVELIG)_","
"RTN","BPSRPT7",314,0)
 . . W $E(LIST,1,$L(LIST)-1)
"RTN","BPSRPT7",315,0)
 . W ?113,"Open/Closed: ",$S(BPOPCL=1:"CLOSED",BPOPCL=2:"OPEN",1:"ALL")
"RTN","BPSRPT7",316,0)
 . W !,"Prescriber: ",$S(BPRESC'=0:"SELECTED",1:"ALL")
"RTN","BPSRPT7",317,0)
 . W ?91,"Patient: ",$S(BPQSTPAT'=0:"SELECTED",1:"ALL")
"RTN","BPSRPT7",318,0)
 ;
"RTN","BPSRPT7",319,0)
 I (",1,4,7,")[BPRTYPE W !,"Eligibility: ",$S(BPELIG="V":"VET",BPELIG="T":"TRI",BPELIG="C":"CVA",1:"ALL")
"RTN","BPSRPT7",320,0)
 ;
"RTN","BPSRPT7",321,0)
 I (",9,")[BPRTYPE D
"RTN","BPSRPT7",322,0)
 . W !,"Eligibilities: ",$S(BPELIG1=0:"ALL",1:$$ELIG(.BPELIG1))
"RTN","BPSRPT7",323,0)
 . W !,"NON-BILLABLE STATUS: "_$S(BPNBSTS=0:"ALL",1:$$NBSTS(.BPNBSTS))
"RTN","BPSRPT7",324,0)
 ;
"RTN","BPSRPT7",325,0)
 W !,$S(BPRTYPE=5:"PRESCRIPTIONS",BPRLNRL=2:"RELEASED PRESCRIPTIONS",BPRLNRL=3:"PRESCRIPTIONS (NOT RELEASED)",1:"ALL PRESCRIPTIONS")
"RTN","BPSRPT7",326,0)
 W " BY "_$S(BPRTYPE=7:"CLOSE",1:"TRANSACTION")_" DATE: "
"RTN","BPSRPT7",327,0)
 W "From "_$$DATTIM^BPSRPT1(BPBEGDT)_" through "_$$DATTIM^BPSRPT1($P(BPENDDT,"."))
"RTN","BPSRPT7",328,0)
 ;
"RTN","BPSRPT7",329,0)
 D ULINE^BPSRPT5("=") Q:$G(BPQ)
"RTN","BPSRPT7",330,0)
 D HEADLN1^BPSRPT4(BPRTYPE)
"RTN","BPSRPT7",331,0)
 D HEADLN2^BPSRPT4(BPRTYPE)
"RTN","BPSRPT7",332,0)
 D HEADLN3^BPSRPT4(BPRTYPE)
"RTN","BPSRPT7",333,0)
 D ULINE^BPSRPT5("=")
"RTN","BPSRPT7",334,0)
 ;
"RTN","BPSRPT7",335,0)
 ;Print Division
"RTN","BPSRPT7",336,0)
 I $G(BPDIV)]"" D
"RTN","BPSRPT7",337,0)
 .W !,"DIVISION: ",$S(BPDIV=0:"BLANK",BPDIV="ALL DIVISIONS":"ALL DIVISIONS",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV)
"RTN","BPSRPT7",338,0)
 .I BPRTYPE=5!(BPRTYPE=6)!(BPSUMDET=1)!(BPGRPLAN="") D ULINE^BPSRPT5("-")
"RTN","BPSRPT7",339,0)
 ;
"RTN","BPSRPT7",340,0)
 ;Print Insurance If Defined
"RTN","BPSRPT7",341,0)
 I BPSUMDET=0,$G(BPGRPLAN)]"",$G(BPGRPLAN)'=0,$G(BPGRPLAN)'="~" D WRPLAN^BPSRPT5(BPGRPLAN)
"RTN","BPSRPT7",342,0)
 Q
"RTN","BPSRPT7",343,0)
 ;
"RTN","BPSRPT7",344,0)
 ;Special Division Handling
"RTN","BPSRPT7",345,0)
 ;
"RTN","BPSRPT7",346,0)
BPDIV(BPDIV) Q $S(BPDIV=0:"BLANK",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV)
"RTN","BPSRPT7",347,0)
 ;
"RTN","BPSRPT7",348,0)
 ;Get selected insurance names based on user selection
"RTN","BPSRPT7",349,0)
 ;If length is greater than 68 append "..."
"RTN","BPSRPT7",350,0)
 ;Input: BPINSINF = Semi-colon separated list of file 36 IENs
"RTN","BPSRPT7",351,0)
 ;Output: comma separated list of related file 36 names
"RTN","BPSRPT7",352,0)
BPINS(BPINSINF) ;
"RTN","BPSRPT7",353,0)
 N BPINS,BPINAME,RETV
"RTN","BPSRPT7",354,0)
 S RETV=""
"RTN","BPSRPT7",355,0)
 F I=2:1 S BPINS=$P($G(BPINSINF),";",I) Q:BPINS=""  D
"RTN","BPSRPT7",356,0)
 . S BPINAME=$$INSNM^IBNCPDPI(BPINS) Q:BPINAME=""
"RTN","BPSRPT7",357,0)
 . I RETV'="" S RETV=RETV_", "_BPINAME Q
"RTN","BPSRPT7",358,0)
 . S RETV=BPINAME
"RTN","BPSRPT7",359,0)
 I $L(RETV)>68 S RETV=$E(RETV,1,68)_"..."
"RTN","BPSRPT7",360,0)
 Q RETV
"RTN","BPSRPT7",361,0)
 ;
"RTN","BPSRPT7",362,0)
ELIG(ELIG) ;
"RTN","BPSRPT7",363,0)
 ; Display multiple eligibilities
"RTN","BPSRPT7",364,0)
 ; Input:
"RTN","BPSRPT7",365,0)
 ;   ELIG - Array of multiple eligibilities
"RTN","BPSRPT7",366,0)
 ; Output
"RTN","BPSRPT7",367,0)
 ;   Text of eligibilities
"RTN","BPSRPT7",368,0)
 ;
"RTN","BPSRPT7",369,0)
 I $D(ELIG)=0 Q ""
"RTN","BPSRPT7",370,0)
 N N,LIST
"RTN","BPSRPT7",371,0)
 S LIST=""
"RTN","BPSRPT7",372,0)
 S N="" F  S N=$O(ELIG(N)) Q:N=""  D
"RTN","BPSRPT7",373,0)
 . S LIST=LIST_$G(ELIG(N))_","
"RTN","BPSRPT7",374,0)
 Q $E(LIST,1,$L(LIST)-1)
"RTN","BPSRPT7",375,0)
 ;
"RTN","BPSRPT7",376,0)
NBSTS(NBSTS) ;
"RTN","BPSRPT7",377,0)
 ; Display multiple non-billable statuses
"RTN","BPSRPT7",378,0)
 ; Input:
"RTN","BPSRPT7",379,0)
 ;   NBSTS - Array of multiple non-billable statuses
"RTN","BPSRPT7",380,0)
 ; Output
"RTN","BPSRPT7",381,0)
 ;   Text of non-billable statuses
"RTN","BPSRPT7",382,0)
 ;
"RTN","BPSRPT7",383,0)
 I $D(NBSTS)=0 Q ""
"RTN","BPSRPT7",384,0)
 N N,LIST
"RTN","BPSRPT7",385,0)
 S LIST=""
"RTN","BPSRPT7",386,0)
 S N="" F  S N=$O(NBSTS(N)) Q:N=""  D
"RTN","BPSRPT7",387,0)
 . S LIST=LIST_$G(NBSTS(N))_","
"RTN","BPSRPT7",388,0)
 Q $E(LIST,1,$L(LIST)-1)
"RTN","BPSRPT8")
0^9^B168765371
"RTN","BPSRPT8",1,0)
BPSRPT8 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT8",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8,10,11,19,20,23**;JUN 2004;Build 44
"RTN","BPSRPT8",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT8",4,0)
 ;
"RTN","BPSRPT8",5,0)
 ;Reference to IB NCPCP NON-BILLABLE STATUS REASONS (#366.17) supported by ICR 6136
"RTN","BPSRPT8",6,0)
 ;
"RTN","BPSRPT8",7,0)
 Q
"RTN","BPSRPT8",8,0)
 ;
"RTN","BPSRPT8",9,0)
 ;Routine to Display the Reports in Excel
"RTN","BPSRPT8",10,0)
 ;
"RTN","BPSRPT8",11,0)
 ;Print Report Line 1
"RTN","BPSRPT8",12,0)
 ;
"RTN","BPSRPT8",13,0)
 ; Input Variable -> BPRTYPE,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT
"RTN","BPSRPT8",14,0)
 ;                   BPBIL,BPINS,BPCOLL
"RTN","BPSRPT8",15,0)
 ; 
"RTN","BPSRPT8",16,0)
WRLINE1(BPRTYPE,BPREC,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT,BPBIL,BPINS,BPCOLL,BPPSEQ) ;
"RTN","BPSRPT8",17,0)
 ;
"RTN","BPSRPT8",18,0)
 N BP59,BP02,BP03
"RTN","BPSRPT8",19,0)
 S BP59=$P(BPX,U,3)
"RTN","BPSRPT8",20,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT8",21,0)
 S BP03=+$P($G(^BPST(BP59,0)),U,5)
"RTN","BPSRPT8",22,0)
 ;Division
"RTN","BPSRPT8",23,0)
 I (",2,")'[BPRTYPE S BPREC=$S(BPDIV=0:"BLANK",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV)_U
"RTN","BPSRPT8",24,0)
 I (",2,")[BPRTYPE S BPREC=$S(BPDIV=0:"BLANK",$$DIVNAME^BPSSCRDS(BPDIV)]"":$E($$DIVNAME^BPSSCRDS(BPDIV),1,12),1:$E(BPDIV,1,12))_U
"RTN","BPSRPT8",25,0)
 ;
"RTN","BPSRPT8",26,0)
 ;Insurance
"RTN","BPSRPT8",27,0)
 I BPRTYPE'=5,BPRTYPE'=6,BPRTYPE'=2 S BPREC=BPREC_$E(BPGRPLAN,1,90)_U
"RTN","BPSRPT8",28,0)
 ;
"RTN","BPSRPT8",29,0)
 I (",2")[BPRTYPE D
"RTN","BPSRPT8",30,0)
 . S BPREC=BPREC_$E(BPGRPLAN,1,21)_U ;Insurance
"RTN","BPSRPT8",31,0)
 . S BPREC=BPREC_$$INSBIN^BPSRPT6(BP59)_U ;BIN
"RTN","BPSRPT8",32,0)
 . S BPREC=BPREC_$E($$PATNAME^BPSRPT6(BPDFN),1,13)_U  ;Patient Name
"RTN","BPSRPT8",33,0)
 . S BPREC=BPREC_$$SSN4^BPSRPT6(BPDFN)_U ;L4SSN
"RTN","BPSRPT8",34,0)
 ;
"RTN","BPSRPT8",35,0)
 I (",2,")'[BPRTYPE D
"RTN","BPSRPT8",36,0)
 . S BPREC=BPREC_$$PATNAME^BPSRPT6(BPDFN)_U  ;Patient Name
"RTN","BPSRPT8",37,0)
 . S BPREC=BPREC_"("_$$SSN4^BPSRPT6(BPDFN)_")"_U ;L4SSN
"RTN","BPSRPT8",38,0)
 ;
"RTN","BPSRPT8",39,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT8",40,0)
 . N PTRESP
"RTN","BPSRPT8",41,0)
 . S BPREC=BPREC_$$ELIGCODE^BPSSCR05($P(BPX,U,3))_U ;Eligibility
"RTN","BPSRPT8",42,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",43,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",44,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U  ;Date
"RTN","BPSRPT8",45,0)
 . S BPREC=BPREC_$$INGRCST^BPSSCRLG(BP02)_U  ;Ingredient Cost
"RTN","BPSRPT8",46,0)
 . S BPREC=BPREC_$$DISPFEE^BPSSCRLG(BP02)_U  ;Dispensing Fee
"RTN","BPSRPT8",47,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",48,0)
 . S BPREC=BPREC_$$ICPAID^BPSSCRLG(BP03)_U  ;Ingredient Cost Paid
"RTN","BPSRPT8",49,0)
 . S BPREC=BPREC_$$DFPAID^BPSSCRLG(BP03)_U  ;Dispensing Fee Paid
"RTN","BPSRPT8",50,0)
 . S PTRESP=$$PTRESP^BPSSCRLG(BP03) S BPREC=BPREC_$S('PTRESP:PTRESP,1:"-"_PTRESP)_U  ;Patient Pay Amount
"RTN","BPSRPT8",51,0)
 . S BPREC=BPREC_$TR($J(BPINS,10,2)," ")_U ;$Ins. Paid
"RTN","BPSRPT8",52,0)
 . S BPREC=BPREC_$S(BPCOLL]"":$TR($J(BPCOLL,10,2)," "),1:"")_U ;$Collected
"RTN","BPSRPT8",53,0)
 ;
"RTN","BPSRPT8",54,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT8",55,0)
 . S BPREC=BPREC_$$ELIGCODE^BPSSCR05($P(BPX,U,3))_U ;Eligibility
"RTN","BPSRPT8",56,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",57,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",58,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U ;Date
"RTN","BPSRPT8",59,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(+BPX)_U  ;Released On
"RTN","BPSRPT8",60,0)
 . ;RX INFO
"RTN","BPSRPT8",61,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",62,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U  ;Fill Type
"RTN","BPSRPT8",63,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",64,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",65,0)
 . S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U
"RTN","BPSRPT8",66,0)
 . S BPREC=BPREC_$S($$CLOSED02^BPSSCR03($P(^BPST($P(BPX,U,3),0),U,4))=1:"C",1:"O")_U ;Open/Closed
"RTN","BPSRPT8",67,0)
 ;
"RTN","BPSRPT8",68,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT8",69,0)
 . N PTRESP
"RTN","BPSRPT8",70,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",71,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",72,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U ;Date
"RTN","BPSRPT8",73,0)
 . S BPREC=BPREC_$$INGRCST^BPSSCRLG(BP02)_U  ;Ingredient Cost
"RTN","BPSRPT8",74,0)
 . S BPREC=BPREC_$$DISPFEE^BPSSCRLG(BP02)_U  ;Dispensing Fee
"RTN","BPSRPT8",75,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",76,0)
 . S BPREC=BPREC_$$ICPAID^BPSSCRLG(BP03)_U  ;Ingredient Cost Paid
"RTN","BPSRPT8",77,0)
 . S BPREC=BPREC_$$DFPAID^BPSSCRLG(BP03)_U  ;Dispensing Fee Paid
"RTN","BPSRPT8",78,0)
 . S PTRESP=$$PTRESP^BPSSCRLG(BP03) S BPREC=BPREC_$S('PTRESP:PTRESP,1:"-"_PTRESP)_U  ;Patient Pay Amount
"RTN","BPSRPT8",79,0)
 . S BPREC=BPREC_$TR($J(BPINS,10,2)," ")_U ;Insurance Response
"RTN","BPSRPT8",80,0)
 ;
"RTN","BPSRPT8",81,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT8",82,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",83,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",84,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1($$TRANDT^BPSRPT2($P(BPX,U,3),1))_U ;Completed
"RTN","BPSRPT8",85,0)
 . S BPREC=BPREC_$$TTYPE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)_U ;Trans Type
"RTN","BPSRPT8",86,0)
 . S BPREC=BPREC_$$RESPONSE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)_U ;Payer Response
"RTN","BPSRPT8",87,0)
 . S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U ;RX COB
"RTN","BPSRPT8",88,0)
 ;
"RTN","BPSRPT8",89,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT8",90,0)
 . ;RX INFO
"RTN","BPSRPT8",91,0)
 . S BPREC=BPREC_$$ELIGCODE^BPSSCR05($P(BPX,U,3))_U ;Eligibility
"RTN","BPSRPT8",92,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",93,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",94,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",95,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",96,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",97,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",98,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")_U
"RTN","BPSRPT8",99,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",100,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",101,0)
 ;
"RTN","BPSRPT8",102,0)
 I (BPRTYPE=8) D  Q
"RTN","BPSRPT8",103,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",104,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",105,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U  ;Date
"RTN","BPSRPT8",106,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",107,0)
 . S BPREC=BPREC_$TR($J(BPINS,10,2)," ")_U ;$Ins. Paid
"RTN","BPSRPT8",108,0)
 . S BPREC=BPREC_$S(BPCOLL]"":$TR($J(BPCOLL,10,2)," "),1:"")_U ;$Collected
"RTN","BPSRPT8",109,0)
 ;
"RTN","BPSRPT8",110,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT8",111,0)
 . N ELGCD S ELGCD=$P(BPX,U,1)
"RTN","BPSRPT8",112,0)
 . S BPREC=BPREC_$S(ELGCD="V":"VET",ELGCD="T":"TRI",ELGCD="C":"CVA",1:"UNK")_U
"RTN","BPSRPT8",113,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",114,0)
 . S BPREC=BPREC_BPREF_U                      ;Refill
"RTN","BPSRPT8",115,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U  ;Date
"RTN","BPSRPT8",116,0)
 . S BPREC=BPREC_$S($P(BPX,U,2)]"":$TR($J($P(BPX,U,2),10,2)," "),1:"")_U ;$Drug Cost
"RTN","BPSRPT8",117,0)
 Q
"RTN","BPSRPT8",118,0)
 ;
"RTN","BPSRPT8",119,0)
 ;Print Report Line 2
"RTN","BPSRPT8",120,0)
 ;
"RTN","BPSRPT8",121,0)
 ; Input Variable -> BPRTYPE,BPX,BPRX,BPREF,BPBIL,BPGRPLAN
"RTN","BPSRPT8",122,0)
 ; 
"RTN","BPSRPT8",123,0)
WRLINE2(BPRTYPE,BPREC,BPX,BPRX,BPREF,BPBIL,BPGRPLAN,BPPSEQ) ;
"RTN","BPSRPT8",124,0)
 N BP59,BP02
"RTN","BPSRPT8",125,0)
 S BP59=$P(BPX,U,3)
"RTN","BPSRPT8",126,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT8",127,0)
 ;
"RTN","BPSRPT8",128,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT8",129,0)
 . ;Drug, Released On
"RTN","BPSRPT8",130,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",131,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(+BPX)_U
"RTN","BPSRPT8",132,0)
 . ;RX INFO
"RTN","BPSRPT8",133,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",134,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",135,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",136,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",137,0)
 . I BPRTYPE=4 S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U
"RTN","BPSRPT8",138,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT8",139,0)
 . I BPRTYPE=1 S BPREC=BPREC_U_$$BILL^BPSRPT6(BPRX,BPREF,BPPSEQ)_U_$$RXCOB($G(BPPSEQ)) ;Bill # and RX COB
"RTN","BPSRPT8",140,0)
 ;
"RTN","BPSRPT8",141,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT8",142,0)
 . S BPREC=BPREC_$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)_U ;Group ID
"RTN","BPSRPT8",143,0)
 . S BPREC=BPREC_$$INGRCST^BPSSCRLG(BP02)_U  ;Ingredient Cost
"RTN","BPSRPT8",144,0)
 . S BPREC=BPREC_$$DISPFEE^BPSSCRLG(BP02)_U  ;Dispensing Fee
"RTN","BPSRPT8",145,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",146,0)
 . S BPREC=BPREC_$$QTY^BPSRPT6($P(BPX,U,3))_U ;Qty
"RTN","BPSRPT8",147,0)
 . S BPREC=BPREC_$$GETNDC^BPSRPT6(BPRX,BPREF)_U ;NDC#
"RTN","BPSRPT8",148,0)
 . S BPREC=BPREC_$E($$DRGNAM^BPSRPT6($P(BPX,U,14),32),1,15)_U ;Drug
"RTN","BPSRPT8",149,0)
 ;
"RTN","BPSRPT8",150,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT8",151,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",152,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",153,0)
 . ;RX INFO
"RTN","BPSRPT8",154,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",155,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",156,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",157,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",158,0)
 . S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U
"RTN","BPSRPT8",159,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT8",160,0)
 ;
"RTN","BPSRPT8",161,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT8",162,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",163,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",164,0)
 . ;RX INFO
"RTN","BPSRPT8",165,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",166,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",167,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",168,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",169,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")_U
"RTN","BPSRPT8",170,0)
 . I $P(BPGRPLAN,U,2)]"" S BPREC=BPREC_$E($P(BPGRPLAN,U,2),1,30) ;Insurance
"RTN","BPSRPT8",171,0)
 . S BPREC=BPREC_U_$$ELAPSE^BPSRPT6($P(BPX,U,3))  ;Elapsed Time
"RTN","BPSRPT8",172,0)
 ;
"RTN","BPSRPT8",173,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT8",174,0)
 . S BPREC=BPREC_$E($$CRDHLDID^BPSRPT2(+$P(BPX,U,3)),3,23)_U ;Cardholder ID
"RTN","BPSRPT8",175,0)
 . S BPREC=BPREC_$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)_U  ;Group ID
"RTN","BPSRPT8",176,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",177,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(+$$CLOSEDT^BPSRPT2(+$P(BPX,U,3)))_U ;Close Dt/Time
"RTN","BPSRPT8",178,0)
 . S BPREC=BPREC_$E($$CLSBY^BPSRPT6(+$P(BPX,U,3)),1,25)_U ;Close By
"RTN","BPSRPT8",179,0)
 . S BPREC=BPREC_$E($P($$CLRSN^BPSRPT7(+$P(BPX,U,3)),U,2),1,30)_U ;Close Reason
"RTN","BPSRPT8",180,0)
 ;
"RTN","BPSRPT8",181,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT8",182,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),27)_U ;Drug
"RTN","BPSRPT8",183,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_" " ;Fill Location
"RTN","BPSRPT8",184,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_" " ;Fill Type
"RTN","BPSRPT8",185,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",186,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",187,0)
 . S BPREC=BPREC_$TR($E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)," ","")_U  ;Group ID
"RTN","BPSRPT8",188,0)
 . S BPREC=BPREC_$E(BPGRPLAN,1,30)_U ;Insurance
"RTN","BPSRPT8",189,0)
 . S BPREC=BPREC_$$BILL^BPSRPT6(BPRX,BPREF,BPPSEQ)_U ;Bill#
"RTN","BPSRPT8",190,0)
 ;
"RTN","BPSRPT8",191,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT8",192,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,4),32)_U  ;Drug
"RTN","BPSRPT8",193,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U ;NDC
"RTN","BPSRPT8",194,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1($P(BPX,U,5))_U  ;Release Date
"RTN","BPSRPT8",195,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U      ;Fill Location
"RTN","BPSRPT8",196,0)
 . S BPREC=BPREC_$$RXSTANAM^BPSSCRU2($P(BPX,U,6)) ;Status
"RTN","BPSRPT8",197,0)
 . S BPREC=BPREC_$S($P(BPX,U,5):"/R",1:"/N")_U    ;RL/NR
"RTN","BPSRPT8",198,0)
 . S BPREC=BPREC_$$GET1^DIQ(366.17,$P(BPX,U,7),.01,"E")  ;Non-Billable Status Reason - ICR 6136
"RTN","BPSRPT8",199,0)
 Q
"RTN","BPSRPT8",200,0)
 ;
"RTN","BPSRPT8",201,0)
 ;Print Report Line 3
"RTN","BPSRPT8",202,0)
 ;
"RTN","BPSRPT8",203,0)
 ; Input Variable -> BPRTYPE,BPX
"RTN","BPSRPT8",204,0)
 ; 
"RTN","BPSRPT8",205,0)
WRLINE3(BPRTYPE,BPREC,BPX) ;
"RTN","BPSRPT8",206,0)
 N BP59,BPSARR,BPRJCNT,BPRJEXP,BPZZ,BPRICE
"RTN","BPSRPT8",207,0)
 S BP59=+$P(BPX,U,3)
"RTN","BPSRPT8",208,0)
 ;
"RTN","BPSRPT8",209,0)
 I (",7,")[BPRTYPE D  Q
"RTN","BPSRPT8",210,0)
 .S BPREC=BPREC_$$CLAIMID^BPSRPT2(BP59)_U ;Claim ID
"RTN","BPSRPT8",211,0)
 .S BPRJCNT=$$REJTEXT^BPSRPT2(BP59,.BPSARR)
"RTN","BPSRPT8",212,0)
 .F BPZZ=1:1:BPRJCNT S:BPZZ'=1 BPREC=BPREC_"," S BPREC=BPREC_$P(BPSARR(BPZZ),":")
"RTN","BPSRPT8",213,0)
 .;Write one record per reject/close code
"RTN","BPSRPT8",214,0)
 .S:+BPRJCNT=0 BPRJCNT=1
"RTN","BPSRPT8",215,0)
 .F BPZZ=1:1:BPRJCNT W !,$G(BPREC),U,$P($G(BPSARR(BPZZ)),":"),U,$P($G(BPSARR(BPZZ)),":",2)
"RTN","BPSRPT8",216,0)
 ;
"RTN","BPSRPT8",217,0)
 I (",2,")[BPRTYPE D  Q
"RTN","BPSRPT8",218,0)
 . S BPREC=BPREC_$P($$PRESCIN^BPSRPT6($P(BPX,U,3)),U)_U ;Prescriber ID
"RTN","BPSRPT8",219,0)
 . S BPREC=BPREC_$E($P($$PRESCIN^BPSRPT6($P(BPX,U,3)),U,2),1,13)_U ;Prescriber Name (truncated to 13)
"RTN","BPSRPT8",220,0)
 . S BPRJCNT=$$REJTEXT^BPSRPT2(BP59,.BPSARR)
"RTN","BPSRPT8",221,0)
 . S BPREC=BPREC_$S(BPRJCNT>1:"Y",1:"N")
"RTN","BPSRPT8",222,0)
 . ;Write one record per reject/close code
"RTN","BPSRPT8",223,0)
 . S:+BPRJCNT=0 BPRJCNT=1
"RTN","BPSRPT8",224,0)
 . F BPZZ=1:1:BPRJCNT S BPREC2="" D
"RTN","BPSRPT8",225,0)
 . . S BPREC2=$G(BPREC)_U_$P($G(BPSARR(BPZZ)),":")_U_$P($G(BPSARR(BPZZ)),":",2) W !,$E(BPREC2,1,255)
"RTN","BPSRPT8",226,0)
 ;
"RTN","BPSRPT8",227,0)
 I BPRTYPE=4 D
"RTN","BPSRPT8",228,0)
 . ;Method
"RTN","BPSRPT8",229,0)
 . I $$AUTOREV^BPSRPT1(BP59) S BPREC=BPREC_U_"AUTO"_U
"RTN","BPSRPT8",230,0)
 . E  S BPREC=BPREC_U_"REGULAR"_U
"RTN","BPSRPT8",231,0)
 . ;Return Status
"RTN","BPSRPT8",232,0)
 . I $P(BPX,U,15)["ACCEPTED" S BPREC=BPREC_"ACCEPTED"_U
"RTN","BPSRPT8",233,0)
 . E  S BPREC=BPREC_"REJECTED"_U
"RTN","BPSRPT8",234,0)
 . ;Reason
"RTN","BPSRPT8",235,0)
 . S BPREC=BPREC_$$RVSRSN^BPSRPT7(+$P(BPX,U,3))
"RTN","BPSRPT8",236,0)
 ;
"RTN","BPSRPT8",237,0)
 I BPRTYPE=8 D
"RTN","BPSRPT8",238,0)
 . S BPRICE=$$PRICEVAL^BPSRPT5(BP59)
"RTN","BPSRPT8",239,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,3)_U
"RTN","BPSRPT8",240,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,4)_U
"RTN","BPSRPT8",241,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,5)_U
"RTN","BPSRPT8",242,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,6)_U
"RTN","BPSRPT8",243,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,7)_U
"RTN","BPSRPT8",244,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,2)_U
"RTN","BPSRPT8",245,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,1)_U
"RTN","BPSRPT8",246,0)
 ;Write the record
"RTN","BPSRPT8",247,0)
 W !,$G(BPREC)
"RTN","BPSRPT8",248,0)
 Q
"RTN","BPSRPT8",249,0)
 ;
"RTN","BPSRPT8",250,0)
 ;Print Excel Header
"RTN","BPSRPT8",251,0)
 ;
"RTN","BPSRPT8",252,0)
HDR(BPRTYPE) ;
"RTN","BPSRPT8",253,0)
 ;
"RTN","BPSRPT8",254,0)
 ;Check if header already printed
"RTN","BPSRPT8",255,0)
 I $G(BPSDATA) Q
"RTN","BPSRPT8",256,0)
 S BPSDATA=1
"RTN","BPSRPT8",257,0)
 ;
"RTN","BPSRPT8",258,0)
 ;Division
"RTN","BPSRPT8",259,0)
 W !,"DIVISION",U
"RTN","BPSRPT8",260,0)
 ;
"RTN","BPSRPT8",261,0)
 I BPRTYPE'=5,BPRTYPE'=6 W "INSURANCE",U
"RTN","BPSRPT8",262,0)
 I (",2,")[BPRTYPE W "BIN",U
"RTN","BPSRPT8",263,0)
 ;
"RTN","BPSRPT8",264,0)
 I (",1,3,4,5,7,8,9,")[BPRTYPE W "PATIENT NAME",U,"Pt.ID",U
"RTN","BPSRPT8",265,0)
 ;
"RTN","BPSRPT8",266,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT8",267,0)
 . W "ELIGIBILITY",U
"RTN","BPSRPT8",268,0)
 . W "RX#",U
"RTN","BPSRPT8",269,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",270,0)
 . W "DATE",U
"RTN","BPSRPT8",271,0)
 . W "VA INGREDIENT COST",U
"RTN","BPSRPT8",272,0)
 . W "VA DISPENSING FEE",U
"RTN","BPSRPT8",273,0)
 . W "$BILLED",U
"RTN","BPSRPT8",274,0)
 . W "INGREDIENT COST PAID",U
"RTN","BPSRPT8",275,0)
 . W "DISPENSING FEE PAID",U
"RTN","BPSRPT8",276,0)
 . W "PATIENT RESP (INS)",U
"RTN","BPSRPT8",277,0)
 . W "$INS RESPONSE",U
"RTN","BPSRPT8",278,0)
 . W "$COLLECT",U
"RTN","BPSRPT8",279,0)
 . W "DRUG",U
"RTN","BPSRPT8",280,0)
 . W "NDC",U
"RTN","BPSRPT8",281,0)
 . W "RELEASED ON",U
"RTN","BPSRPT8",282,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",283,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",284,0)
 . W "STATUS",U
"RTN","BPSRPT8",285,0)
 . I BPRTYPE=4 W "RX COB",U
"RTN","BPSRPT8",286,0)
 . W "REJECTED"
"RTN","BPSRPT8",287,0)
 . I BPRTYPE=1 W U,"BILL#",U,"RX COB"
"RTN","BPSRPT8",288,0)
 . I BPRTYPE=4 W U,"REVERSAL METHOD",U,"RETURN STATUS",U,"REASON"
"RTN","BPSRPT8",289,0)
 ;
"RTN","BPSRPT8",290,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT8",291,0)
 . W "PATIENT",U
"RTN","BPSRPT8",292,0)
 . W "Pt.ID",U
"RTN","BPSRPT8",293,0)
 . W "ELIG",U
"RTN","BPSRPT8",294,0)
 . W "RX#",U
"RTN","BPSRPT8",295,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",296,0)
 . W "DATE",U
"RTN","BPSRPT8",297,0)
 . W "RELEASED",U
"RTN","BPSRPT8",298,0)
 . W "LOCATION",U
"RTN","BPSRPT8",299,0)
 . W "TYPE",U
"RTN","BPSRPT8",300,0)
 . W "STATUS",U
"RTN","BPSRPT8",301,0)
 . W "COB",U
"RTN","BPSRPT8",302,0)
 . W "OPEN/CLOSED",U
"RTN","BPSRPT8",303,0)
 . W "GROUP ID",U
"RTN","BPSRPT8",304,0)
 . W "VA ING. COST",U
"RTN","BPSRPT8",305,0)
 . W "VA DISP. FEE",U
"RTN","BPSRPT8",306,0)
 . W "$BILLED",U
"RTN","BPSRPT8",307,0)
 . W "QTY",U
"RTN","BPSRPT8",308,0)
 . W "NDC#",U
"RTN","BPSRPT8",309,0)
 . W "DRUG",U
"RTN","BPSRPT8",310,0)
 . W "PRESCRIBER ID",U
"RTN","BPSRPT8",311,0)
 . W "PRESCRIBER",U
"RTN","BPSRPT8",312,0)
 . W "MULT REJ",U
"RTN","BPSRPT8",313,0)
 . W "REJECT CODE",U
"RTN","BPSRPT8",314,0)
 . W "REJECT EXPLANATION"
"RTN","BPSRPT8",315,0)
 ;
"RTN","BPSRPT8",316,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT8",317,0)
 . W "RX#",U
"RTN","BPSRPT8",318,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",319,0)
 . W "DATE",U
"RTN","BPSRPT8",320,0)
 . W "VA INGREDIENT COST",U
"RTN","BPSRPT8",321,0)
 . W "VA DISPENSING FEE",U
"RTN","BPSRPT8",322,0)
 . W "$BILLED",U
"RTN","BPSRPT8",323,0)
 . W "INGREDIENT COST PAID",U
"RTN","BPSRPT8",324,0)
 . W "DISPENSING FEE PAID",U
"RTN","BPSRPT8",325,0)
 . W "PATIENT RESP (INS)",U
"RTN","BPSRPT8",326,0)
 . W "$INS RESPONSE",U
"RTN","BPSRPT8",327,0)
 . W "DRUG",U
"RTN","BPSRPT8",328,0)
 . W "NDC",U
"RTN","BPSRPT8",329,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",330,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",331,0)
 . W "STATUS",U
"RTN","BPSRPT8",332,0)
 . W "RX COB",U
"RTN","BPSRPT8",333,0)
 . W "REJECTED"
"RTN","BPSRPT8",334,0)
 ;
"RTN","BPSRPT8",335,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT8",336,0)
 . W "RX#",U
"RTN","BPSRPT8",337,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",338,0)
 . W "COMPLETED",U
"RTN","BPSRPT8",339,0)
 . W "TRANS TYPE",U
"RTN","BPSRPT8",340,0)
 . W "PAYER RESPONSE",U
"RTN","BPSRPT8",341,0)
 . W "RX COB",U
"RTN","BPSRPT8",342,0)
 . W "DRUG",U
"RTN","BPSRPT8",343,0)
 . W "NDC",U
"RTN","BPSRPT8",344,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",345,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",346,0)
 . W "STATUS",U
"RTN","BPSRPT8",347,0)
 . W "REJECTED",U
"RTN","BPSRPT8",348,0)
 . W "INSURANCE",U
"RTN","BPSRPT8",349,0)
 . W "ELAP TIME IN SECONDS"
"RTN","BPSRPT8",350,0)
 ;
"RTN","BPSRPT8",351,0)
 I BPRTYPE=6 D  Q
"RTN","BPSRPT8",352,0)
 .W "DATE",U
"RTN","BPSRPT8",353,0)
 .W "#CLAIMS",U
"RTN","BPSRPT8",354,0)
 .W "AMOUNT SUBMITTED",U
"RTN","BPSRPT8",355,0)
 .W "RETURNED REJECTED",U
"RTN","BPSRPT8",356,0)
 .W "RETURNED PAYABLE",U
"RTN","BPSRPT8",357,0)
 .W "AMOUNT TO RECEIVE",U
"RTN","BPSRPT8",358,0)
 .W "DIFFERENCE"
"RTN","BPSRPT8",359,0)
 ;
"RTN","BPSRPT8",360,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT8",361,0)
 . W "ELIGIBILITY",U
"RTN","BPSRPT8",362,0)
 . W "RX#",U
"RTN","BPSRPT8",363,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",364,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",365,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",366,0)
 . W "STATUS",U
"RTN","BPSRPT8",367,0)
 . W "REJECTED",U
"RTN","BPSRPT8",368,0)
 . W "DRUG",U
"RTN","BPSRPT8",369,0)
 . W "NDC",U
"RTN","BPSRPT8",370,0)
 . W "CARDHOLD.ID",U
"RTN","BPSRPT8",371,0)
 . W "GROUP ID",U
"RTN","BPSRPT8",372,0)
 . W "$BILLED",U
"RTN","BPSRPT8",373,0)
 . W "CLOSE DATE/TIME",U
"RTN","BPSRPT8",374,0)
 . W "CLOSED BY",U
"RTN","BPSRPT8",375,0)
 . W "CLOSE REASON",U
"RTN","BPSRPT8",376,0)
 . W "CLAIM ID",U
"RTN","BPSRPT8",377,0)
 . W "REJECT CODE(S)",U
"RTN","BPSRPT8",378,0)
 . W "REJECT CODE",U
"RTN","BPSRPT8",379,0)
 . W "REJECT EXPLANATION"
"RTN","BPSRPT8",380,0)
 ;
"RTN","BPSRPT8",381,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT8",382,0)
 . W "RX#",U
"RTN","BPSRPT8",383,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",384,0)
 . W "DATE",U
"RTN","BPSRPT8",385,0)
 . W "$BILLED",U
"RTN","BPSRPT8",386,0)
 . W "$INS RESPONSE",U
"RTN","BPSRPT8",387,0)
 . W "$COLLECT",U
"RTN","BPSRPT8",388,0)
 . W "DRUG",U
"RTN","BPSRPT8",389,0)
 . W "RX INFO",U
"RTN","BPSRPT8",390,0)
 . W "INS GROUP#",U
"RTN","BPSRPT8",391,0)
 . W "INS GROUP NAME",U
"RTN","BPSRPT8",392,0)
 . W "BILL#",U
"RTN","BPSRPT8",393,0)
 . W "$PROVIDER NETWORK",U
"RTN","BPSRPT8",394,0)
 . W "$BRAND DRUG",U
"RTN","BPSRPT8",395,0)
 . W "$NON-PREF FORM",U
"RTN","BPSRPT8",396,0)
 . W "$BRAND NON-PREF FORM",U
"RTN","BPSRPT8",397,0)
 . W "$COVERAGE GAP",U
"RTN","BPSRPT8",398,0)
 . W "$HEALTH ASST",U
"RTN","BPSRPT8",399,0)
 . W "$SPEND ACCT REMAINING",U
"RTN","BPSRPT8",400,0)
 ;
"RTN","BPSRPT8",401,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT8",402,0)
 . W "ELIGIBILITY",U
"RTN","BPSRPT8",403,0)
 . W "RX#",U
"RTN","BPSRPT8",404,0)
 . W "REF",U
"RTN","BPSRPT8",405,0)
 . W "DATE",U
"RTN","BPSRPT8",406,0)
 . W "$DRUG COST",U
"RTN","BPSRPT8",407,0)
 . W "DRUG",U
"RTN","BPSRPT8",408,0)
 . W "NDC",U
"RTN","BPSRPT8",409,0)
 . W "RELEASED ON",U
"RTN","BPSRPT8",410,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",411,0)
 . W "STATUS",U
"RTN","BPSRPT8",412,0)
 . W "NON-BILLABLE STATUS REASON"
"RTN","BPSRPT8",413,0)
 Q
"RTN","BPSRPT8",414,0)
 ;return RX COB as the 1st letter of the RX COB indicator
"RTN","BPSRPT8",415,0)
RXCOB(BPPSEQ) ;
"RTN","BPSRPT8",416,0)
 Q $S(BPPSEQ=1:"p",BPPSEQ=2:"s",1:"")
"RTN","BPSRPT8",417,0)
 ;BPSRPT8
"RTN","BPSSCR01")
0^26^B18234340
"RTN","BPSSCR01",1,0)
BPSSCR01 ;BHAM ISC/SS - USER SCREEN ;10-MAR-2005
"RTN","BPSSCR01",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,11,20,23**;JUN 2004;Build 44
"RTN","BPSSCR01",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCR01",4,0)
 ;USER SCREEN
"RTN","BPSSCR01",5,0)
 Q
"RTN","BPSSCR01",6,0)
 ;User Screen header
"RTN","BPSSCR01",7,0)
 ;input:
"RTN","BPSSCR01",8,0)
 ; BPSLN - line of the header
"RTN","BPSSCR01",9,0)
 ;output:
"RTN","BPSSCR01",10,0)
 ; text string for the header
"RTN","BPSSCR01",11,0)
HDR(BPSLN) ; -- header code
"RTN","BPSSCR01",12,0)
 N BPARR,BPX,BPXSL
"RTN","BPSSCR01",13,0)
 Q:'$D(@VALMAR@("VIEWPARAMS"))
"RTN","BPSSCR01",14,0)
 D RESTVIEW(.BPARR)
"RTN","BPSSCR01",15,0)
 I BPSLN=1 Q "SELECTED DIVISION(S): "_$$GETVDIVS(.BPARR,58)
"RTN","BPSSCR01",16,0)
 I BPSLN=2 Q $$GETVDETS(.BPARR)
"RTN","BPSSCR01",17,0)
 I BPSLN=3 D  Q BPX
"RTN","BPSSCR01",18,0)
 . S BPXSL=$$SORTTYPE^BPSSCRSL($G(BPARR(1.12)))
"RTN","BPSSCR01",19,0)
 . I BPXSL="" S BPXSL="Transaction date by default"
"RTN","BPSSCR01",20,0)
 . S BPX="           Sorted by: "_BPXSL
"RTN","BPSSCR01",21,0)
 Q ""
"RTN","BPSSCR01",22,0)
 ;/**
"RTN","BPSSCR01",23,0)
 ;get current view details
"RTN","BPSSCR01",24,0)
GETVDETS(BPARR) ;*/
"RTN","BPSSCR01",25,0)
 N BPSTR
"RTN","BPSSCR01",26,0)
  ; If Date Range was selected display the Activity Beginning and Ending Dates.
"RTN","BPSSCR01",27,0)
 I $G(BPARR(1.031))="D" S BPSTR=$$LJ^BPSSCR02(" Activity Date Range: "_$$FMTE^XLFDT(BPARR(1.032))_" - "_$$FMTE^XLFDT(BPARR(1.033)),61)
"RTN","BPSSCR01",28,0)
 ;
"RTN","BPSSCR01",29,0)
 ; If Timeframe was selected display the number of hours or days.
"RTN","BPSSCR01",30,0)
 E  S BPSTR=" Activity Date Range: within the past "_$G(BPARR(1.05))_$S($G(BPARR(1.04))="H":" hour(s)",1:" day(s)")
"RTN","BPSSCR01",31,0)
 Q BPSTR
"RTN","BPSSCR01",32,0)
 ;
"RTN","BPSSCR01",33,0)
 ;/**
"RTN","BPSSCR01",34,0)
 ;get divisions selected
"RTN","BPSSCR01",35,0)
GETVDIVS(BPARRAY,BPMLEN) ;*/
"RTN","BPSSCR01",36,0)
 I $G(BPARRAY(1.13))="A" Q "ALL"
"RTN","BPSSCR01",37,0)
 N BPDIV,BPCNT,BPSTR,BPQUIT
"RTN","BPSSCR01",38,0)
 S BPQUIT=0,BPSTR=""
"RTN","BPSSCR01",39,0)
 F BPCNT=1:1:20 S BPDIV=$P($G(BPARRAY("DIVS")),";",BPCNT+1) Q:+BPDIV=0  D  Q:BPQUIT=1
"RTN","BPSSCR01",40,0)
 . I $L(BPSTR_$$DIVNAME^BPSSCRDS(BPDIV))>(BPMLEN-4) D  S BPQUIT=1 Q
"RTN","BPSSCR01",41,0)
 . . S BPSTR=$$LJ^BPSSCR02(BPSTR_",...",BPMLEN)
"RTN","BPSSCR01",42,0)
 . S BPSTR=BPSTR_$S(BPCNT>1:", ",1:"")_$$DIVNAME^BPSSCRDS(BPDIV)
"RTN","BPSSCR01",43,0)
 Q BPSTR
"RTN","BPSSCR01",44,0)
 ;/**
"RTN","BPSSCR01",45,0)
 ;input:
"RTN","BPSSCR01",46,0)
 ; BPARR - local array to store user profile info
"RTN","BPSSCR01",47,0)
 ;returns:
"RTN","BPSSCR01",48,0)
 ; the last number in LM ARRAY
"RTN","BPSSCR01",49,0)
INIT() ; -- init variables and list array*/
"RTN","BPSSCR01",50,0)
 N BPLN,BPLM,BP59,BPSORT,BPTMPGL,BPRET
"RTN","BPSSCR01",51,0)
 N BPARR
"RTN","BPSSCR01",52,0)
 ;
"RTN","BPSSCR01",53,0)
 ;get user's ien in BPS PRFILE file
"RTN","BPSSCR01",54,0)
 ;if array is not defined then read information from file, 
"RTN","BPSSCR01",55,0)
 ;otherwise use current info from the array, because the user
"RTN","BPSSCR01",56,0)
 ;may specify criteria in array without saving it in file for
"RTN","BPSSCR01",57,0)
 ;the temporary use
"RTN","BPSSCR01",58,0)
 I '$D(@VALMAR@("VIEWPARAMS")) D
"RTN","BPSSCR01",59,0)
 . D READPROF^BPSSCRSL(.BPARR,+DUZ)
"RTN","BPSSCR01",60,0)
 . D SAVEVIEW(.BPARR)
"RTN","BPSSCR01",61,0)
 E  D RESTVIEW(.BPARR)
"RTN","BPSSCR01",62,0)
 ;get date/time range
"RTN","BPSSCR01",63,0)
 I $$GETDT^BPSSCRU1(.BPARR)=0 Q
"RTN","BPSSCR01",64,0)
 ;
"RTN","BPSSCR01",65,0)
 S BPTMPGL=$NA(^TMP($J,"BPSSCR"))
"RTN","BPSSCR01",66,0)
 K @BPTMPGL,@VALMAR
"RTN","BPSSCR01",67,0)
 D COLLECT^BPSSCR04(BPTMPGL,.BPARR)
"RTN","BPSSCR01",68,0)
 D SAVEVIEW(.BPARR)
"RTN","BPSSCR01",69,0)
 S BPRET=$$LMARRAY(BPTMPGL,.BPARR)
"RTN","BPSSCR01",70,0)
 K @BPTMPGL
"RTN","BPSSCR01",71,0)
 S:BPRET>1 BPRET=BPRET-1
"RTN","BPSSCR01",72,0)
 Q BPRET
"RTN","BPSSCR01",73,0)
 ;
"RTN","BPSSCR01",74,0)
 ;/**
"RTN","BPSSCR01",75,0)
 ;make elements for List Manager array
"RTN","BPSSCR01",76,0)
 ;input:
"RTN","BPSSCR01",77,0)
 ;BPTMPGL - TMP global to store selected claims
"RTN","BPSSCR01",78,0)
 ;BPARR - local array to store user profile info
"RTN","BPSSCR01",79,0)
 ;returns:
"RTN","BPSSCR01",80,0)
 ; the last number in LM ARRAY
"RTN","BPSSCR01",81,0)
 ;indexing (example):
"RTN","BPSSCR01",82,0)
 ;S ^TMP("BPSSCR",$J,"VALM",1,0)="2   BUMSTEAD,CHARLE 5444 WEBMD"
"RTN","BPSSCR01",83,0)
 ;S ^TMP("BPSSCR",$J,"VALM",2,0)="    2.1  CEFACLOR 500MG CAP"
"RTN","BPSSCR01",84,0)
 ;S ^TMP("BPSSCR",$J,"VALM",3,0)="    2.2  AMPICILLIN 250MG CAP"
"RTN","BPSSCR01",85,0)
 ;S ^TMP("BPSSCR",$J,"VALM","LMIND",2,437272,7008776.00001,0)=""
"RTN","BPSSCR01",86,0)
 ;S ^TMP("BPSSCR",$J,"VALM","LMIND",2.1,437272,7008778.00011,1)=""
"RTN","BPSSCR01",87,0)
 ;S ^TMP("BPSSCR",$J,"VALM","LMIND",2.2,437272,7009457.00001,2)=""
"RTN","BPSSCR01",88,0)
LMARRAY(BPTMPGL,BPARR) ;*/
"RTN","BPSSCR01",89,0)
 N BPSRTVAL,BP59,BPSORT,BPLN,BPLM,BPSTR1,BPCLM,BPPREV
"RTN","BPSSCR01",90,0)
 S BPLM=0 ;patient_AND_insurance level counter
"RTN","BPSSCR01",91,0)
 S BPCLM=0 ;claim level counter 
"RTN","BPSSCR01",92,0)
 S BP59=0
"RTN","BPSSCR01",93,0)
 S BPLN=1 ;line counter for List manager array to display on the screen
"RTN","BPSSCR01",94,0)
 S BPPREV=0 ;to store data from previous patient group
"RTN","BPSSCR01",95,0)
 ;sort type:
"RTN","BPSSCR01",96,0)
 ;'T' FOR TRANSACTION DATE
"RTN","BPSSCR01",97,0)
 ;'D' FOR DIVISION (ECME pharmacy)
"RTN","BPSSCR01",98,0)
 ;'I' FOR INSURANCE
"RTN","BPSSCR01",99,0)
 ;'C' FOR REJECT CODE 
"RTN","BPSSCR01",100,0)
 ;'P' FOR PATIENT NAME
"RTN","BPSSCR01",101,0)
 ;'N' FOR DRUG NAME
"RTN","BPSSCR01",102,0)
 ;'B' FOR BILL TYPE (BB/P2/RT/RS)
"RTN","BPSSCR01",103,0)
 ;'L' FOR FILL LOCATION (Windows/Mail/CMOP) 
"RTN","BPSSCR01",104,0)
 ;'R' FOR RELEASED/NON-RELEASED RX
"RTN","BPSSCR01",105,0)
 ;'A' FOR ACTIVE/DISCONTINUED RX
"RTN","BPSSCR01",106,0)
 S BPSORT=$G(BPARR(1.12))
"RTN","BPSSCR01",107,0)
 S:BPSORT="" BPSORT="T" ;default
"RTN","BPSSCR01",108,0)
 S BPSRTVAL="" ;a value that "makes" an order, can be a string
"RTN","BPSSCR01",109,0)
 F  S BPSRTVAL=$O(@BPTMPGL@("SORT",BPSORT,BPSRTVAL)) Q:BPSRTVAL=""  D
"RTN","BPSSCR01",110,0)
 . I BPSORT="D" D
"RTN","BPSSCR01",111,0)
 . . S BPSTR1="---- Division: "_$$DIVNAME^BPSSCRDS(+$P(BPSRTVAL,U,2))_" "
"RTN","BPSSCR01",112,0)
 . . D SET^VALM10(BPLN,BPSTR1_$$LINE^BPSSCRU3(79-$L(BPSTR1),"-"),0)
"RTN","BPSSCR01",113,0)
 . . S BPLN=BPLN+1
"RTN","BPSSCR01",114,0)
 . I BPSORT="C" D
"RTN","BPSSCR01",115,0)
 . . S BPSTR1=$E("---- Reject code: "_$$GETRJNAM^BPSSCRU3(BPSRTVAL)_" ",1,79)
"RTN","BPSSCR01",116,0)
 . . D SET^VALM10(BPLN,BPSTR1_$$LINE^BPSSCRU3(79-$L(BPSTR1),"-"),0)
"RTN","BPSSCR01",117,0)
 . . S BPLN=BPLN+1
"RTN","BPSSCR01",118,0)
 . S BP59=0
"RTN","BPSSCR01",119,0)
 . F  S BP59=+$O(@BPTMPGL@("SORT",BPSORT,BPSRTVAL,BP59)) Q:+BP59=0  D
"RTN","BPSSCR01",120,0)
 . . I BP59'=0 D MKARRELM^BPSSCR02(.BPLN,VALMAR,BP59,.BPLM,.BPCLM,.BPPREV)
"RTN","BPSSCR01",121,0)
 D UPDPREV^BPSSCR02(VALMAR,BPLM,BPPREV)
"RTN","BPSSCR01",122,0)
 Q BPLN
"RTN","BPSSCR01",123,0)
 ;
"RTN","BPSSCR01",124,0)
HELP ; -- help code
"RTN","BPSSCR01",125,0)
 N X S X="?" D DISP^XQORM1 W !!
"RTN","BPSSCR01",126,0)
 Q
"RTN","BPSSCR01",127,0)
 ;
"RTN","BPSSCR01",128,0)
EXIT ; -- exit code
"RTN","BPSSCR01",129,0)
 Q
"RTN","BPSSCR01",130,0)
 ;
"RTN","BPSSCR01",131,0)
EXPND ; -- expand code
"RTN","BPSSCR01",132,0)
 Q
"RTN","BPSSCR01",133,0)
 ;/**
"RTN","BPSSCR01",134,0)
 ;store current view params in VALMAR("VIEWPARAMS") TMP global array
"RTN","BPSSCR01",135,0)
 ;to display in the header
"RTN","BPSSCR01",136,0)
 ;input: 
"RTN","BPSSCR01",137,0)
 ; BPARR - array with user profile info to store
"RTN","BPSSCR01",138,0)
SAVEVIEW(BPARR) ;        S @VALMAR@("VIEWPARAMS",BPLMIND,BPDFN,BP59,BPLINE)=""
"RTN","BPSSCR01",139,0)
 Q:'$D(BPARR)
"RTN","BPSSCR01",140,0)
 M @VALMAR@("VIEWPARAMS")=BPARR
"RTN","BPSSCR01",141,0)
 Q
"RTN","BPSSCR01",142,0)
 ;
"RTN","BPSSCR01",143,0)
 ;/**
"RTN","BPSSCR01",144,0)
 ;restore current view params from VALMAR("VIEWPARAMS") TMP global array
"RTN","BPSSCR01",145,0)
 ;input: 
"RTN","BPSSCR01",146,0)
 ; BPARR - array with user profile info to store
"RTN","BPSSCR01",147,0)
RESTVIEW(BPARR) ;        S @VALMAR@("VIEWPARAMS",BPLMIND,BPDFN,BP59,BPLINE)=""
"RTN","BPSSCR01",148,0)
 Q:'$D(@VALMAR@("VIEWPARAMS"))
"RTN","BPSSCR01",149,0)
 M BPARR=@VALMAR@("VIEWPARAMS")
"RTN","BPSSCR01",150,0)
 Q
"RTN","BPSSCR01",151,0)
 ;
"RTN","BPSSCR03")
0^27^B75749695
"RTN","BPSSCR03",1,0)
BPSSCR03 ;BHAM ISC/SS - ECME USR SCREEN UTILITIES ;05-APR-05
"RTN","BPSSCR03",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,10,11,20,23**;JUN 2004;Build 44
"RTN","BPSSCR03",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCR03",4,0)
 Q
"RTN","BPSSCR03",5,0)
 ;/**
"RTN","BPSSCR03",6,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSSCR03",7,0)
 ; BPARR to return formatted info via ref
"RTN","BPSSCR03",8,0)
 ; BPMLEM - max len for each line
"RTN","BPSSCR03",9,0)
 ; BPMODE - mode
"RTN","BPSSCR03",10,0)
 ;   R -regular for main screen, will show only latest comment
"RTN","BPSSCR03",11,0)
 ;   C - comment mode - show all comments
"RTN","BPSSCR03",12,0)
ADDINF(BP59,BPARR,BPMLEN,BPMODE) ;to return additional information about the claim*/
"RTN","BPSSCR03",13,0)
 N BPX,BPN,BPTXT1,BPTXT2,BPTXT3,BPTXT4,BPX1,BPN2,BPSTATUS,BPSCOBA,BP59X,I
"RTN","BPSSCR03",14,0)
 S BPN=0,(BPTXT1,BPTXT2,BPTXT3,BPTXT4,BPX1)=""
"RTN","BPSSCR03",15,0)
 I BPMODE="R" D
"RTN","BPSSCR03",16,0)
 . S BPX=$$COMMENT^BPSSCRU3(BP59)
"RTN","BPSSCR03",17,0)
 . I $L(BPX)>0 S BPN=BPN+1,BPARR(BPN)=$P(BPX,U)
"RTN","BPSSCR03",18,0)
 . I $P(BPX,U,2)]"" S BPN=BPN+1,BPARR(BPN)="("_$P(BPX,U,2)_")"
"RTN","BPSSCR03",19,0)
 E  D
"RTN","BPSSCR03",20,0)
 . N BPCMNT,BPX1 S BPCMNT=99999999
"RTN","BPSSCR03",21,0)
 . F  S BPCMNT=$O(^BPST(BP59,11,BPCMNT),-1) Q:+BPCMNT=0  D
"RTN","BPSSCR03",22,0)
 . . S BPX1=$G(^BPST(BP59,11,BPCMNT,0))
"RTN","BPSSCR03",23,0)
 . . I BPX1="" Q
"RTN","BPSSCR03",24,0)
 . . S BPX=$$DATTIM^BPSSCRU3($P(BPX1,U,1)\1)_$S(+$P(BPX1,U,4):" (Pharm)",1:"")_" - "_$P(BPX1,U,3)
"RTN","BPSSCR03",25,0)
 . . I $L(BPX)>0 S BPN=BPN+1,BPARR(BPN)=BPX
"RTN","BPSSCR03",26,0)
 . . I +$P(BPX1,U,2)]"" D
"RTN","BPSSCR03",27,0)
 . . . S BPX=$$USERNAM^BPSCMT01(+$P(BPX1,U,2))
"RTN","BPSSCR03",28,0)
 . . . I BPX'="" S BPX="("_BPX_")",BPN=BPN+1,BPARR(BPN)=BPX
"RTN","BPSSCR03",29,0)
 S BPX=$$CLAIMST^BPSSCRU3(BP59)
"RTN","BPSSCR03",30,0)
 S BPSTATUS=$P(BPX,U)
"RTN","BPSSCR03",31,0)
 ; Show status for this BPS Transaction
"RTN","BPSSCR03",32,0)
 S BPTXT1=$$COBCLST^BPSSCRU6(BP59)
"RTN","BPSSCR03",33,0)
 ; Append status for associated claim, if one exists
"RTN","BPSSCR03",34,0)
 S BPSCOBA=$$ALLCOB59^BPSUTIL2(BP59)
"RTN","BPSSCR03",35,0)
 F I=1:1 S BP59X=$P(BPSCOBA,U,I) Q:BP59X=""  D
"RTN","BPSSCR03",36,0)
 . Q:BP59X=BP59
"RTN","BPSSCR03",37,0)
 . S BPTXT1=BPTXT1_" ("_$$COBCLST^BPSSCRU6(BP59X)_")"
"RTN","BPSSCR03",38,0)
 ;
"RTN","BPSSCR03",39,0)
 ; build the TRI/CVA non-billable reject/reason lines  (bps*1*20)
"RTN","BPSSCR03",40,0)
 I $$NB(BP59) D
"RTN","BPSSCR03",41,0)
 . I $L(BPTXT1)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT1   ; store the current line
"RTN","BPSSCR03",42,0)
 . S BPTXT1=""
"RTN","BPSSCR03",43,0)
 . S BPN=BPN+1,BPARR(BPN)=$$EREJTXT(BP59)         ; store the eT/eC non-billable reject/reason line
"RTN","BPSSCR03",44,0)
 . Q
"RTN","BPSSCR03",45,0)
 ;
"RTN","BPSSCR03",46,0)
 I (BPSTATUS["E REJECTED")!(BPSTATUS["E REVERSAL REJECTED") D
"RTN","BPSSCR03",47,0)
 . I $L(BPTXT1)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT1
"RTN","BPSSCR03",48,0)
 . S BPTXT1=""
"RTN","BPSSCR03",49,0)
 . S BPN2=BPN
"RTN","BPSSCR03",50,0)
 . D GETRJCOD^BPSSCRU3(BP59,.BPARR,.BPN,74,"")
"RTN","BPSSCR03",51,0)
 . D WRAPLN2^BPSSCRU5(.BPN,.BPARR,$$GETMESS^BPSSCRU3(504,BP59),74,"",0)
"RTN","BPSSCR03",52,0)
 . D WRAPLN2^BPSSCRU5(.BPN,.BPARR,$$GETMESS^BPSSCRU3(526,BP59),74,"",0)
"RTN","BPSSCR03",53,0)
 ;
"RTN","BPSSCR03",54,0)
 I (BPSTATUS["E OTHER")!(BPSTATUS["IN PROGRESS")!(BPSTATUS["E UNSTRANDED")!(BPSTATUS["E CAPTURED")!(BPSTATUS["E REVERSAL OTHER")!(BPSTATUS["E REVERSAL UNSTRANDED") D
"RTN","BPSSCR03",55,0)
 . I (BPSTATUS["E OTHER")!(BPSTATUS["E REVERSAL OTHER")!(BPSTATUS["IN PROGRESS") S BPX1=$P(BPX,U,3) I BPTXT1=BPX1 S BPX1=""
"RTN","BPSSCR03",56,0)
 . S:BPX1="" BPX1=$$GETMESS^BPSSCRU3(504,BP59)
"RTN","BPSSCR03",57,0)
 . I $L(BPX1)>0 S BPTXT1=BPTXT1_"- "_$TR(BPX1,"]","")
"RTN","BPSSCR03",58,0)
 ;
"RTN","BPSSCR03",59,0)
 S BPTXT2=$E(BPTXT1,1,BPMLEN)
"RTN","BPSSCR03",60,0)
 S BPTXT3=$E(BPTXT1,BPMLEN+1,2*BPMLEN)
"RTN","BPSSCR03",61,0)
 S BPTXT4=$E(BPTXT1,(2*BPMLEN)+1,3*BPMLEN)
"RTN","BPSSCR03",62,0)
 I $L(BPTXT2)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT2
"RTN","BPSSCR03",63,0)
 I $L(BPTXT3)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT3
"RTN","BPSSCR03",64,0)
 I $L(BPTXT4)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT4
"RTN","BPSSCR03",65,0)
 Q BPN
"RTN","BPSSCR03",66,0)
 ;
"RTN","BPSSCR03",67,0)
CLMINF(BP59) ;ptr to #9002313.59
"RTN","BPSSCR03",68,0)
 W !,"Claim info. Press a key"
"RTN","BPSSCR03",69,0)
 D PAUSE^VALM1
"RTN","BPSSCR03",70,0)
 Q
"RTN","BPSSCR03",71,0)
 ;
"RTN","BPSSCR03",72,0)
EREJTXT(BP59) ; return the eT/eC line for non-billable entry
"RTN","BPSSCR03",73,0)
 N ELIG,BPX2
"RTN","BPSSCR03",74,0)
 S BPX2=""
"RTN","BPSSCR03",75,0)
 S ELIG=$$GET1^DIQ(9002313.59,BP59,901.04)
"RTN","BPSSCR03",76,0)
 I '$F(".T.C.","."_$E(ELIG,1)_".") G EREJTX            ; must be TRI/CVA eligibility for non-billable
"RTN","BPSSCR03",77,0)
 S BPX2="e"_$E(ELIG,1)_":"_ELIG_"-RX NOT BILLABLE ("_$P($G(^BPST(BP59,3)),U,1)_")"   ; build eT / eC line
"RTN","BPSSCR03",78,0)
EREJTX ;
"RTN","BPSSCR03",79,0)
 Q BPX2
"RTN","BPSSCR03",80,0)
 ;
"RTN","BPSSCR03",81,0)
COMM(BP59) ;ptr to #9002313.59
"RTN","BPSSCR03",82,0)
 W !,"the latest comment. Press a key"
"RTN","BPSSCR03",83,0)
 D PAUSE^VALM1
"RTN","BPSSCR03",84,0)
 Q
"RTN","BPSSCR03",85,0)
 ;
"RTN","BPSSCR03",86,0)
RESP(BP59) ;Payer Response Information
"RTN","BPSSCR03",87,0)
 W !,"payer Response Information. Press a key"
"RTN","BPSSCR03",88,0)
 D PAUSE^VALM1
"RTN","BPSSCR03",89,0)
 Q
"RTN","BPSSCR03",90,0)
 ;
"RTN","BPSSCR03",91,0)
 ;/**
"RTN","BPSSCR03",92,0)
 ;Checks if the claim is closed and sets the "/Closed" indicator at the end of the text
"RTN","BPSSCR03",93,0)
 ;BP59 - pointer to file #9002313.59
"RTN","BPSSCR03",94,0)
 ;BPTXT - Current status text to be displayed
"RTN","BPSSCR03",95,0)
 ;return:
"RTN","BPSSCR03",96,0)
 ;if the claim is not closed, BPTXT is returned. If it is closed BPTXT_"/Closed " is returned
"RTN","BPSSCR03",97,0)
CLMCLSTX(BP59,BPTXT) ;*/
"RTN","BPSSCR03",98,0)
 Q $S($$CLOSED02($P($G(^BPST(BP59,0)),U,4)):BPTXT_"/Closed ",1:BPTXT)
"RTN","BPSSCR03",99,0)
 ;
"RTN","BPSSCR03",100,0)
 ;/**
"RTN","BPSSCR03",101,0)
 ;Checks if the CLAIM for specific Transaction is CLOSED?
"RTN","BPSSCR03",102,0)
 ;BPCLAIM - ptr to #9002313.02
"RTN","BPSSCR03",103,0)
 ;see also CLOSED^BPSSCRU1
"RTN","BPSSCR03",104,0)
CLOSED02(BPCLAIM) ;*/
"RTN","BPSSCR03",105,0)
 I +$G(BPCLAIM)=0 Q 0
"RTN","BPSSCR03",106,0)
 ; get closed status
"RTN","BPSSCR03",107,0)
 Q +$P($G(^BPSC(BPCLAIM,900)),U)=1
"RTN","BPSSCR03",108,0)
 ;
"RTN","BPSSCR03",109,0)
 ;return:
"RTN","BPSSCR03",110,0)
 ; 1 - okay. matches criteria
"RTN","BPSSCR03",111,0)
 ; 0-  not okay, doesn't match criteria
"RTN","BPSSCR03",112,0)
FILTER(BP59,BPARR) ;
"RTN","BPSSCR03",113,0)
 N BPST0,BPST1,BPRXREF,BPRX52,BPREFNUM,BPRTBB
"RTN","BPSSCR03",114,0)
 N BPRET,BPSRPU,BPSFT
"RTN","BPSSCR03",115,0)
 S BPRET=1 ;1 - okay by default
"RTN","BPSSCR03",116,0)
 S BPST0=$G(^BPST(BP59,0))
"RTN","BPSSCR03",117,0)
 S BPST1=$G(^BPST(BP59,1))
"RTN","BPSSCR03",118,0)
 ; Do not display eligibility verification requests
"RTN","BPSSCR03",119,0)
 I $P(BPST0,U,15)="E" Q 0
"RTN","BPSSCR03",120,0)
 S BPRXREF=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSSCR03",121,0)
 S BPRX52=+$P(BPRXREF,U) ;ptr to #52
"RTN","BPSSCR03",122,0)
 S BPREFNUM=$P(BPRXREF,U,2) ;refill #
"RTN","BPSSCR03",123,0)
 ;
"RTN","BPSSCR03",124,0)
 ;Check for Open Claim
"RTN","BPSSCR03",125,0)
 I '$$NB(BP59),$G(BPARR(2.02))="O",$$CLOSED02(+$P(BPST0,U,4)) Q 0    ; n/a for non-billables
"RTN","BPSSCR03",126,0)
 ;Check for Closed Claim
"RTN","BPSSCR03",127,0)
 I '$$NB(BP59),$G(BPARR(2.02))="C",'$$CLOSED02(+$P(BPST0,U,4)) Q 0   ; n/a for non-billables
"RTN","BPSSCR03",128,0)
 ;
"RTN","BPSSCR03",129,0)
 I $G(BPARR(1.19))="O",$$NBCL(BP59) Q 0     ; non-billable entry - Open entries only
"RTN","BPSSCR03",130,0)
 I $G(BPARR(1.19))="C",$$NBOP(BP59) Q 0     ; non-billable entry - Closed entries only
"RTN","BPSSCR03",131,0)
 ;
"RTN","BPSSCR03",132,0)
 ;Eligibility Indicator
"RTN","BPSSCR03",133,0)
 I '$$FLTELIG^BPSSCR05(BP59,.BPARR) Q 0
"RTN","BPSSCR03",134,0)
 ;
"RTN","BPSSCR03",135,0)
 ;Submission type
"RTN","BPSSCR03",136,0)
 I '$$NB(BP59),'$$FLTSUBTP^BPSSCR05(BP59,.BPARR) Q 0      ; n/a for non-billables
"RTN","BPSSCR03",137,0)
 ;
"RTN","BPSSCR03",138,0)
 ;user
"RTN","BPSSCR03",139,0)
 I $G(BPARR(1.01))="U",$$FLTUSR(BPST0,.BPARR)=0 Q 0
"RTN","BPSSCR03",140,0)
 ;
"RTN","BPSSCR03",141,0)
 ;patient
"RTN","BPSSCR03",142,0)
 I $G(BPARR(1.02))="P",$$FLTPAT(BPST0,.BPARR)=0 Q 0
"RTN","BPSSCR03",143,0)
 ;
"RTN","BPSSCR03",144,0)
 ;RX
"RTN","BPSSCR03",145,0)
 I $G(BPARR(1.03))="R",$$FLTRX(BPST1,.BPARR)=0 Q 0
"RTN","BPSSCR03",146,0)
 ;
"RTN","BPSSCR03",147,0)
 S BPSRPU=1
"RTN","BPSSCR03",148,0)
 I '$$NB(BP59) D    ; n/a for non-billables
"RTN","BPSSCR03",149,0)
 . S BPSRPU=0
"RTN","BPSSCR03",150,0)
 . I ($G(BPARR(1.06))["R")&($$REJECTED^BPSSCR02(BP59)=1) S BPSRPU=1
"RTN","BPSSCR03",151,0)
 . I ($G(BPARR(1.06))["P")&($$PAYABLE^BPSSCR02(BP59)=1) S BPSRPU=1
"RTN","BPSSCR03",152,0)
 . I ($G(BPARR(1.06))["U")&($$UNSTRAND^BPSSCR02(BP59)=1) S BPSRPU=1
"RTN","BPSSCR03",153,0)
 . I $G(BPARR(1.06))["A" S BPSRPU=1
"RTN","BPSSCR03",154,0)
 I BPSRPU=0 Q 0
"RTN","BPSSCR03",155,0)
 ;
"RTN","BPSSCR03",156,0)
 ;released
"RTN","BPSSCR03",157,0)
 I $G(BPARR(1.07))="R",$$RL^BPSSCRU2(BP59)'="R" Q 0
"RTN","BPSSCR03",158,0)
 ;non released
"RTN","BPSSCR03",159,0)
 I $G(BPARR(1.07))="N",$$RL^BPSSCRU2(BP59)="R" Q 0
"RTN","BPSSCR03",160,0)
 ;
"RTN","BPSSCR03",161,0)
 ;window/cmop/mail
"RTN","BPSSCR03",162,0)
 I $G(BPARR(1.08))'="A",$$ISMWC(BPRX52,BPREFNUM,$G(BPARR(1.08)))=0 Q 0
"RTN","BPSSCR03",163,0)
 ;
"RTN","BPSSCR03",164,0)
 ; filter checks for fill type
"RTN","BPSSCR03",165,0)
 S BPRTBB=$$RTBB^BPSSCRU2(BP59) I BPRTBB="**" S BPRTBB="RT"
"RTN","BPSSCR03",166,0)
 S BPSFT=1
"RTN","BPSSCR03",167,0)
 I $G(BPARR(1.09))'["A" D
"RTN","BPSSCR03",168,0)
 . S BPSFT=0
"RTN","BPSSCR03",169,0)
 . I $G(BPARR(1.09))["B",BPRTBB="BB" S BPSFT=1     ; filter for back billing
"RTN","BPSSCR03",170,0)
 . I $G(BPARR(1.09))["P",BPRTBB="P2" S BPSFT=1     ; filter for PRO Option
"RTN","BPSSCR03",171,0)
 . I $G(BPARR(1.09))["S",BPRTBB="RS" S BPSFT=1     ; filter for ECME user screen resubmits (BPS*1*20)
"RTN","BPSSCR03",172,0)
 . I $G(BPARR(1.09))["R",BPRTBB="RT" S BPSFT=1     ; filter for real time
"RTN","BPSSCR03",173,0)
 I BPSFT=0 Q 0
"RTN","BPSSCR03",174,0)
 ;
"RTN","BPSSCR03",175,0)
 ;if only rejected and only specific rejected codes should be displayed
"RTN","BPSSCR03",176,0)
 ;I $G(BPARR(1.06))["R",$G(BPARR(1.1))="R",$$FLTREJ(BP59,.BPARR)=0 Q 0
"RTN","BPSSCR03",177,0)
 I (($G(BPARR(1.06))["R")!($G(BPARR(1.06))="A")),$G(BPARR(1.1))="R",$$FLTREJ(BP59,.BPARR)=0 Q 0
"RTN","BPSSCR03",178,0)
 ;
"RTN","BPSSCR03",179,0)
 ;insurance
"RTN","BPSSCR03",180,0)
 I '$$FLTINS^BPSSCR05(BP59,.BPARR) Q 0
"RTN","BPSSCR03",181,0)
 ;
"RTN","BPSSCR03",182,0)
 ;divisions - ECME pharmacies
"RTN","BPSSCR03",183,0)
 I $G(BPARR(1.13))="D",BPARR("DIVS")'[(";"_$P(BPST1,U,7)_";") Q 0
"RTN","BPSSCR03",184,0)
 Q 1
"RTN","BPSSCR03",185,0)
 ;
"RTN","BPSSCR03",186,0)
 ;check user filter
"RTN","BPSSCR03",187,0)
 ;input:
"RTN","BPSSCR03",188,0)
 ;BPST0 - zero node of #9002313.59
"RTN","BPSSCR03",189,0)
 ;BPARR array with user's preferences
"RTN","BPSSCR03",190,0)
 ;returns :
"RTN","BPSSCR03",191,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",192,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",193,0)
FLTUSR(BPST0,BPARR) ;
"RTN","BPSSCR03",194,0)
 I $L($G(BPARR(1.16)))=0 Q 0
"RTN","BPSSCR03",195,0)
 I $P(BPST0,U,10)=$G(BPARR(1.16)) Q 1
"RTN","BPSSCR03",196,0)
 I $G(BPARR(1.16))[(";"_$P(BPST0,U,10)_";") Q 1
"RTN","BPSSCR03",197,0)
 Q 0
"RTN","BPSSCR03",198,0)
 ;
"RTN","BPSSCR03",199,0)
 ;check patient filter
"RTN","BPSSCR03",200,0)
 ;input:
"RTN","BPSSCR03",201,0)
 ;BPST0 - zero node of #9002313.59
"RTN","BPSSCR03",202,0)
 ;BPARR array with user's preferences
"RTN","BPSSCR03",203,0)
 ;returns :
"RTN","BPSSCR03",204,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",205,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",206,0)
FLTPAT(BPST0,BPARR) ;
"RTN","BPSSCR03",207,0)
 I $L($G(BPARR(1.17)))=0 Q 0
"RTN","BPSSCR03",208,0)
 I $P(BPST0,U,6)=$G(BPARR(1.17)) Q 1
"RTN","BPSSCR03",209,0)
 I $G(BPARR(1.17))[(";"_$P(BPST0,U,6)_";") Q 1
"RTN","BPSSCR03",210,0)
 Q 0
"RTN","BPSSCR03",211,0)
 ;check RX filter
"RTN","BPSSCR03",212,0)
 ;input:
"RTN","BPSSCR03",213,0)
 ;BPST1 - 1st node of #9002313.59
"RTN","BPSSCR03",214,0)
 ;BPARR array with user's preferences
"RTN","BPSSCR03",215,0)
 ;returns :
"RTN","BPSSCR03",216,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",217,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",218,0)
FLTRX(BPST1,BPARR) ;
"RTN","BPSSCR03",219,0)
 I $L($G(BPARR(1.18)))=0 Q 0
"RTN","BPSSCR03",220,0)
 I $P(BPST1,U,11)=$G(BPARR(1.18)) Q 1
"RTN","BPSSCR03",221,0)
 I $G(BPARR(1.18))[(";"_$P(BPST1,U,11)_";") Q 1
"RTN","BPSSCR03",222,0)
 Q 0
"RTN","BPSSCR03",223,0)
 ;input:
"RTN","BPSSCR03",224,0)
 ;BP59 - zero node of #9002313.59
"RTN","BPSSCR03",225,0)
 ;BPARR array with user's preferences
"RTN","BPSSCR03",226,0)
 ;returns :
"RTN","BPSSCR03",227,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",228,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",229,0)
FLTREJ(BP59,BPARR) ;
"RTN","BPSSCR03",230,0)
 N BPRCODES
"RTN","BPSSCR03",231,0)
 N BPSRJCD,BPSRJFLAG,BPSRJIEN
"RTN","BPSSCR03",232,0)
 D REJCODES^BPSSCRU3(BP59,.BPRCODES,1) ; bps*1*20 include possible non-billable pseudo-reject codes too
"RTN","BPSSCR03",233,0)
 ;
"RTN","BPSSCR03",234,0)
 S BPSRJCD="",BPSRJFLAG=0
"RTN","BPSSCR03",235,0)
 F  S BPSRJCD=$O(BPRCODES(BPSRJCD)) Q:BPSRJCD=""  Q:BPSRJFLAG=1  D
"RTN","BPSSCR03",236,0)
 . S BPSRJIEN="",BPSRJIEN=$O(^BPSF(9002313.93,"B",BPSRJCD,BPSRJIEN))
"RTN","BPSSCR03",237,0)
 . I BPARR(1.15)=BPSRJIEN S BPSRJFLAG=1
"RTN","BPSSCR03",238,0)
 . I BPARR(1.15)[(";"_BPSRJIEN_";") S BPSRJFLAG=1
"RTN","BPSSCR03",239,0)
 Q BPSRJFLAG
"RTN","BPSSCR03",240,0)
 ;
"RTN","BPSSCR03",241,0)
 ;check W(indow)/C(mop)/M(ail)
"RTN","BPSSCR03",242,0)
 ;input:
"RTN","BPSSCR03",243,0)
 ;BPRX52 - ptr to #52
"RTN","BPSSCR03",244,0)
 ;BPREFNUM - refill #
"RTN","BPSSCR03",245,0)
 ;BPMWC - given value from CMOP/MAIL/WINDOW instance 1.08 of BPS USRSCR parameters
"RTN","BPSSCR03",246,0)
 ;returns :
"RTN","BPSSCR03",247,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",248,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",249,0)
ISMWC(BPRX52,BPREFNUM,BPMWC) ;
"RTN","BPSSCR03",250,0)
 I BPMWC[$$MWCNAME^BPSSCRU2($$MWC^BPSSCRU2(BPRX52,BPREFNUM)) Q 1
"RTN","BPSSCR03",251,0)
 Q 0
"RTN","BPSSCR03",252,0)
 ;
"RTN","BPSSCR03",253,0)
FILTRALL(BPTMP1,BPTMP2,BPARR) ;
"RTN","BPSSCR03",254,0)
 N BP59
"RTN","BPSSCR03",255,0)
 S BP59=0
"RTN","BPSSCR03",256,0)
 F  S BP59=+$O(@BPTMP1@(BP59)) Q:+BP59=0  D
"RTN","BPSSCR03",257,0)
 . I $$FILTER(BP59,.BPARR) S @BPTMP2@(BP59)=""
"RTN","BPSSCR03",258,0)
 Q
"RTN","BPSSCR03",259,0)
 ;
"RTN","BPSSCR03",260,0)
 ;go thru all FILE59 entries and run SETTRDFN for each of them
"RTN","BPSSCR03",261,0)
 ;
"RTN","BPSSCR03",262,0)
TRDFNALL(BPTMP) ;
"RTN","BPSSCR03",263,0)
 N BP59
"RTN","BPSSCR03",264,0)
 S BP59=0
"RTN","BPSSCR03",265,0)
 F  S BP59=+$O(@BPTMP@("FILE59",BP59)) Q:+BP59=0  D
"RTN","BPSSCR03",266,0)
 . D SETTRDFN(BPTMP,BP59)
"RTN","BPSSCR03",267,0)
 Q
"RTN","BPSSCR03",268,0)
 ;
"RTN","BPSSCR03",269,0)
 ;sorting for "TRANSACTION DATE" type is
"RTN","BPSSCR03",270,0)
 ;actually sorting by patients , but patient should be sorted not in alphabetical order:
"RTN","BPSSCR03",271,0)
 ;the first patient is the one which has the most recent transaction and so on
"RTN","BPSSCR03",272,0)
 ;BPTMP - TMP global
"RTN","BPSSCR03",273,0)
 ;BP59 - ptr to #9002313.59
"RTN","BPSSCR03",274,0)
SETTRDFN(BPTMP,BP59) ;
"RTN","BPSSCR03",275,0)
 ;the following stores the latest transaction date of the claims, which
"RTN","BPSSCR03",276,0)
 ;was found for this particular combination of patient and insurance
"RTN","BPSSCR03",277,0)
 ;@BPTMP@("DFN-TRDT",BPDFN,BPINSUR)=BPTRDT
"RTN","BPSSCR03",278,0)
 ;the following stores the latest transaction date BPTRDT,patient BPDFN and
"RTN","BPSSCR03",279,0)
 ;insurance BPINSUR to provide a proper order
"RTN","BPSSCR03",280,0)
 ;@BPTMP@("TRDTDFN",BPTRDT,BPDFN,BPINSUR)=""
"RTN","BPSSCR03",281,0)
 N BPZERO,BPTRDT,BPDFN,BPPREV,BPINSUR
"RTN","BPSSCR03",282,0)
 S BPZERO=$G(^BPST(BP59,0)) ;
"RTN","BPSSCR03",283,0)
 S BPTRDT=-$P(BPZERO,U,8) ;"transaction" date
"RTN","BPSSCR03",284,0)
 S BPDFN=+$P(BPZERO,U,6) ;patient ptr to #2
"RTN","BPSSCR03",285,0)
 S BPINSUR=+$$GETINSUR^BPSSCRU2(BP59) ;insurance ien
"RTN","BPSSCR03",286,0)
 ;in the beginning we don't have any "DFN-TRDT" and "TRDTDFN"
"RTN","BPSSCR03",287,0)
 ;so create them and quit
"RTN","BPSSCR03",288,0)
 I '$D(@BPTMP@("DFN-TRDT",BPDFN,BPINSUR)) D  Q
"RTN","BPSSCR03",289,0)
 . S @BPTMP@("DFN-TRDT",BPDFN,BPINSUR)=BPTRDT
"RTN","BPSSCR03",290,0)
 . S @BPTMP@("TRDTDFN",BPTRDT,BPDFN,BPINSUR)=""
"RTN","BPSSCR03",291,0)
 ;if we already have them then get the latest into BPPREV
"RTN","BPSSCR03",292,0)
 S BPPREV=+$G(@BPTMP@("DFN-TRDT",BPDFN,BPINSUR))
"RTN","BPSSCR03",293,0)
 ;and compare it against the BPTRDT for this BP59
"RTN","BPSSCR03",294,0)
 ;if the BPTRDT is greater then replace the values in "DFN-TRDT"
"RTN","BPSSCR03",295,0)
 ;and "TRDTDFN"
"RTN","BPSSCR03",296,0)
 I BPTRDT<BPPREV D
"RTN","BPSSCR03",297,0)
 . S @BPTMP@("TRDTDFN",BPTRDT,BPDFN,BPINSUR)=""
"RTN","BPSSCR03",298,0)
 . S @BPTMP@("DFN-TRDT",BPDFN,BPINSUR)=BPTRDT
"RTN","BPSSCR03",299,0)
 . K @BPTMP@("TRDTDFN",BPPREV,BPDFN,BPINSUR)
"RTN","BPSSCR03",300,0)
 Q
"RTN","BPSSCR03",301,0)
 ;
"RTN","BPSSCR03",302,0)
NB(BP59) ; Is this BPS Transaction a TRI/CVA non-billable entry?
"RTN","BPSSCR03",303,0)
 I $P($G(^BPST(+$G(BP59),0)),U,15)="N" Q 1    ; yep
"RTN","BPSSCR03",304,0)
 Q 0                                          ; nope
"RTN","BPSSCR03",305,0)
 ;
"RTN","BPSSCR03",306,0)
NBCL(BP59) ; Is this BPS Transaction a Closed TRI/CVA non-billable entry?
"RTN","BPSSCR03",307,0)
 I $$NB(+$G(BP59)),$P($G(^BPST(+$G(BP59),3)),U,2) Q 1    ; yep
"RTN","BPSSCR03",308,0)
 Q 0                                                     ; nope
"RTN","BPSSCR03",309,0)
 ;
"RTN","BPSSCR03",310,0)
NBOP(BP59) ; Is this BPS Transaction an Open TRI/CVA non-billable entry?
"RTN","BPSSCR03",311,0)
 I $$NB(+$G(BP59)),'$P($G(^BPST(+$G(BP59),3)),U,2) Q 1   ; yep
"RTN","BPSSCR03",312,0)
 Q 0                                                     ; nope
"RTN","BPSSCR03",313,0)
 ;
"RTN","BPSSCR05")
0^28^B7667360
"RTN","BPSSCR05",1,0)
BPSSCR05 ;BHAM ISC/BNT - ECME USR SCREEN UTILITIES ;05-APR-05
"RTN","BPSSCR05",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,23**;JUN 2004;Build 44
"RTN","BPSSCR05",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCR05",4,0)
 Q
"RTN","BPSSCR05",5,0)
 ;Filter Eligibility of Veteran, Tricare, or ChampVA (ChampVA is reserved for future use)
"RTN","BPSSCR05",6,0)
 ;input:
"RTN","BPSSCR05",7,0)
 ;BP59 - ptr to #59
"RTN","BPSSCR05",8,0)
 ;BPARR - array with user's preferences
"RTN","BPSSCR05",9,0)
 ;returns :
"RTN","BPSSCR05",10,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR05",11,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR05",12,0)
FLTELIG(BP59,BPARR) ;
"RTN","BPSSCR05",13,0)
 Q:$G(BPARR(2.01))="A" 1
"RTN","BPSSCR05",14,0)
 I $G(BPARR(2.01))="" S BPARR(2.01)="V"
"RTN","BPSSCR05",15,0)
 I $G(BPARR(2.01))[$$ELIGCODE(BP59) Q 1
"RTN","BPSSCR05",16,0)
 Q 0
"RTN","BPSSCR05",17,0)
 ;Filter Submission Type of Billing Requests or Reversals
"RTN","BPSSCR05",18,0)
 ;input:
"RTN","BPSSCR05",19,0)
 ;BP59 - ptr to #59
"RTN","BPSSCR05",20,0)
 ;BPARR - array with user's preferences
"RTN","BPSSCR05",21,0)
 ;returns :
"RTN","BPSSCR05",22,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR05",23,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR05",24,0)
FLTSUBTP(BP59,BPARR) ;
"RTN","BPSSCR05",25,0)
 N BPSCLM,BPTRCD
"RTN","BPSSCR05",26,0)
 Q:$G(BPARR(2.03))="A" 1
"RTN","BPSSCR05",27,0)
 Q:$G(BPARR(2.03))="" 1
"RTN","BPSSCR05",28,0)
 ; Get the claim IEN
"RTN","BPSSCR05",29,0)
 S BPSCLM=$S($P($G(^BPST(BP59,4)),U)>0:$P($G(^BPST(BP59,4)),U),1:$P($G(^BPST(BP59,0)),U,4))
"RTN","BPSSCR05",30,0)
 Q:BPSCLM="" 0
"RTN","BPSSCR05",31,0)
 ; Get the Transaction Code from BPS CLAIMS
"RTN","BPSSCR05",32,0)
 S BPTRCD=$$TRNSCODE(BPSCLM)
"RTN","BPSSCR05",33,0)
 Q:BPTRCD="" 0
"RTN","BPSSCR05",34,0)
 ; Transaction Code B1 = Billing Request, B2 = Reversal
"RTN","BPSSCR05",35,0)
 Q $S((BPTRCD="B1")&($G(BPARR(2.03))="B"):1,(BPTRCD="B2")&($G(BPARR(2.03))="R"):1,1:0)
"RTN","BPSSCR05",36,0)
 ;
"RTN","BPSSCR05",37,0)
 ;Filter Insurance companies
"RTN","BPSSCR05",38,0)
 ;input:
"RTN","BPSSCR05",39,0)
 ;BP59 - ptr to #59
"RTN","BPSSCR05",40,0)
 ;BPARR - array with user's preferences
"RTN","BPSSCR05",41,0)
 ;returns :
"RTN","BPSSCR05",42,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR05",43,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR05",44,0)
FLTINS(BP59,BPARR) ;
"RTN","BPSSCR05",45,0)
 Q:$G(BPARR(1.11))="A" 1
"RTN","BPSSCR05",46,0)
 Q:$G(BPARR(2.04))="" 1
"RTN","BPSSCR05",47,0)
 N BPINS,BPJ,BPINSIEN,I
"RTN","BPSSCR05",48,0)
 S BPINSIEN=$P($G(^BPST(BP59,10,+$G(^BPST(BP59,9)),0)),U)
"RTN","BPSSCR05",49,0)
 S BPINS=0
"RTN","BPSSCR05",50,0)
 F I=2:1 S BPJ=$P(BPARR(2.04),";",I) Q:BPJ=""  D  Q:BPINS
"RTN","BPSSCR05",51,0)
 . S BPINS=$S($$INSPL^IBNCPDPI(BPINSIEN)=BPJ:1,1:0)
"RTN","BPSSCR05",52,0)
 Q BPINS
"RTN","BPSSCR05",53,0)
 ;
"RTN","BPSSCR05",54,0)
 ;/**
"RTN","BPSSCR05",55,0)
 ;Returns the Eligibility Code for the entry in file 59
"RTN","BPSSCR05",56,0)
 ;input:
"RTN","BPSSCR05",57,0)
 ;BP59 - ptr to file 59
"RTN","BPSSCR05",58,0)
 ;returns:
"RTN","BPSSCR05",59,0)
 ;V=Veteran, T=Tricare, C=ChampVA, or null
"RTN","BPSSCR05",60,0)
ELIGCODE(BP59) ; **/
"RTN","BPSSCR05",61,0)
 Q $P($G(^BPST(BP59,9)),U,4)
"RTN","BPSSCR05",62,0)
 ;
"RTN","BPSSCR05",63,0)
 ;Returns the Transaction Code for a claim
"RTN","BPSSCR05",64,0)
 ;input:
"RTN","BPSSCR05",65,0)
 ;BP02 - ptr to BPS CLAIMS file
"RTN","BPSSCR05",66,0)
 ;returns:
"RTN","BPSSCR05",67,0)
 ;Internal value of TRANSACTION CODE field
"RTN","BPSSCR05",68,0)
 ;B1 = Billing, B2 = Reversal, B3 = Rebill, etc.
"RTN","BPSSCR05",69,0)
TRNSCODE(BP02) ;
"RTN","BPSSCR05",70,0)
 Q $P($G(^BPSC(BP02,100)),U,3)
"RTN","BPSSCR05",71,0)
 ;
"RTN","BPSSCR05",72,0)
 ;MKNEWARR is called by CLOSE^BPSSCRCL to create an array
"RTN","BPSSCR05",73,0)
 ;of BP59 records for use by the Close Claims option.
"RTN","BPSSCR05",74,0)
 ;
"RTN","BPSSCR05",75,0)
MKNEWARR(BPARR,BPNEWARR,BPINSARR) ;
"RTN","BPSSCR05",76,0)
 N BP59,BPREJ,BPREJCNT,BPRELCNT,BPREL,BPINS,BPCLST,BPDFN
"RTN","BPSSCR05",77,0)
 S BPREJCNT=0,BPRELCNT=0
"RTN","BPSSCR05",78,0)
 S BPINS=0
"RTN","BPSSCR05",79,0)
 S BP59="" F  S BP59=$O(BPARR(BP59)) Q:BP59=""  D
"RTN","BPSSCR05",80,0)
 . S BPREJ=0
"RTN","BPSSCR05",81,0)
 . S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSSCR05",82,0)
 . S BPCLST=$$CLAIMST^BPSSCRU3(BP59)
"RTN","BPSSCR05",83,0)
 . S BPREJ=$S($P(BPCLST,U)="E REJECTED":1,$P(BPCLST,U)="E REVERSAL ACCEPTED":1,1:0)
"RTN","BPSSCR05",84,0)
 . S:BPREJ BPREJCNT=BPREJCNT+1
"RTN","BPSSCR05",85,0)
 . S BPREL=$S($$RXAPI1^BPSUTIL1(+$P($$RXREF^BPSSCRU2(BP59),U),106,"I"):1,1:0)
"RTN","BPSSCR05",86,0)
 . S:BPREL BPRELCNT=BPRELCNT+1
"RTN","BPSSCR05",87,0)
 . S BPNEWARR(BPDFN,BP59)=BPARR(BP59)_U_BPREJ_U_BPREL
"RTN","BPSSCR05",88,0)
 . S BPINS=$P($$GETINSUR^BPSSCRU2(BP59),U,2)
"RTN","BPSSCR05",89,0)
 . I BPREJ=1,$L(BPINS)>0 S BPINSARR(BPDFN,BPINS,BP59)=BPARR(BP59)
"RTN","BPSSCR05",90,0)
 Q BPREJCNT_U_BPRELCNT
"RTN","BPSSCR05",91,0)
 ;
"RTN","BPSSCRCV")
0^25^B116942528
"RTN","BPSSCRCV",1,0)
BPSSCRCV ;BHAM ISC/SS - ECME SCREEN CHANGE VIEW ;05-APR-05
"RTN","BPSSCRCV",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,11,14,20,22,23**;JUN 2004;Build 44
"RTN","BPSSCRCV",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRCV",4,0)
 ;USER SCREEN
"RTN","BPSSCRCV",5,0)
 Q
"RTN","BPSSCRCV",6,0)
 ;****
"RTN","BPSSCRCV",7,0)
 ;This software is using PARAMETER TOOLS (see XT*7.3*26) to store user's settings:
"RTN","BPSSCRCV",8,0)
 ;PARAMETER DEFINITION NAME="BPS USRSCR" (file #8989.51, IA# 2263)
"RTN","BPSSCRCV",9,0)
 ;ENTITY is "USR" , i.e. IEN in ^VA(200  -- see definition for "BPS USRSCR"
"RTN","BPSSCRCV",10,0)
 ;INSTANCEs are as follows:
"RTN","BPSSCRCV",11,0)
 ;1.01 ONE/ALL USERS --'U' ONE USER, 'A' ALL; Display claims for ONE or ALL users 
"RTN","BPSSCRCV",12,0)
 ;1.02 ONE/ALL PATIENTS --'P' FOR ONE PATIENT; 'A' FOR ALL; Display claims for ONE/ALL PATIENTS 
"RTN","BPSSCRCV",13,0)
 ;1.03 ONE/ALL RX --'R' FOR ONE RX; 'A' FOR ALL; Display claims for ONE or ALL RX 
"RTN","BPSSCRCV",14,0)
 ;1.031 DATE RANGE/TIMEFRAME -- 'D' FOR DATE RANGE; 'T' FOR TIMEFRAME;
"RTN","BPSSCRCV",15,0)
 ;1.032 ACTIVITY BEGINNING DATE - Beginning Date of the Date Range
"RTN","BPSSCRCV",16,0)
 ;1.033 ACTIVITY ENDING DATE - Ending Date of the Date Range 
"RTN","BPSSCRCV",17,0)
 ;1.04 HOURS/DAYS -- 'D' FOR DAYS; 'H' FOR HOURS; Use HOURS or DAYS to specify timeframe 
"RTN","BPSSCRCV",18,0)
 ;1.05 TIMEFRAME -- NUMBER Depends on the value of the field "USR SCR HOURS/DAYS" this field will
"RTN","BPSSCRCV",19,0)
 ;store the default number of HOURS from NOW or DAYS from TODAY to select claims to display 
"RTN","BPSSCRCV",20,0)
 ;1.06 REJECTED/PAYABLE --'R' FOR REJECTS; 'P' FOR PAYABLES; 'U' FOR UNSTRANDED; 'A' FOR ALL; Display Rejects or Payables or Unstranded or ALL claims 
"RTN","BPSSCRCV",21,0)
 ;1.07 RELEASED/NOT RELEASED --'R' FOR RELEASED; 'N' FOR NON-RELEASED; 'A' FOR ALL; Display Released Rxs or Non-Released Rxs or ALL 
"RTN","BPSSCRCV",22,0)
 ;1.08 CMOP/MAIL/WINDOW --'C' FOR CMOP; 'M' FOR MAIL;'W' FOR WINDOW;'A' FOR ALL; Display CMOP or Mail or Window or ALL Rxs 
"RTN","BPSSCRCV",23,0)
 ;1.09 REALTIME/BACKBILL --'R' FOR REALTIME; 'B' FOR BACKBILLS; 'P' FOR PRO Option; 'S' FOR ECME User Screen Resubmits;
"RTN","BPSSCRCV",24,0)
 ;      'A' FOR ALL; Display RealTime, Backbills, PRO Option, Resubmission, or ALL
"RTN","BPSSCRCV",25,0)
 ;1.1 REJECT CODE/ALL --'R' FOR REJECT CODE; 'A' FOR ALL; Display Specific Reject Code or ALL Reject
"RTN","BPSSCRCV",26,0)
 ;Codes 0 means ALL Reject Codes otherwise - Reject Code value 
"RTN","BPSSCRCV",27,0)
 ;1.11 SPECIFIC/ALL INSURANCES --'I' FOR SPECIFIC INSURANCE(S);'A' FOR ALL; Display Specific Insurance Company(s) or All null - ALL otherwise - pointer to INSURANCE COMPANY file #36 
"RTN","BPSSCRCV",28,0)
 ;1.12 SORT LIST --'T' FOR TRANSACTION DATE;'D' FOR DIVISION; 'I' FOR INSURANCE; 'C' FOR REJECT CODE; 
"RTN","BPSSCRCV",29,0)
 ;'P' FOR PATIENT NAME -- 'N' FOR DRUG NAME; 'B' FOR BILL TYPE (BB/P2/RT/RS); 'L' FOR FILL LOCATION;
"RTN","BPSSCRCV",30,0)
 ;'R' FOR RELEASED/NON-RELEASED -- 'A' FOR ACTIVE/DISCONTINUED; the field used to sort claims in the list 
"RTN","BPSSCRCV",31,0)
 ;1.13 ALL ECME PHARMACY DIVISIONS --'D' FOR DIVISION; 'A' FOR ALL; 
"RTN","BPSSCRCV",32,0)
 ;1.14 SELECTED INSURANCE -- Single, or multiple, insurance(s) to select claims for the User Screen, to store INSURANCE COMPANY pointer (#36) 
"RTN","BPSSCRCV",33,0)
 ;1.15 SELECTED REJECTED CODE --POINTER TO BPS NCPDP REJECT CODES FILE (#9002313.93) Reject code selected by the user to filter claims.
"RTN","BPSSCRCV",34,0)
 ;1.16 SELECTED USER -- POINTER TO NEW PERSON FILE (#200) Selected user for the user screen 
"RTN","BPSSCRCV",35,0)
 ;1.17 SELECTED PATIENT -- POINTER TO PATIENT FILE (#2) Selected patient for the User Screen 
"RTN","BPSSCRCV",36,0)
 ;1.18 SELECTED RX -- POINTER TO PRESCRIPTION FILE (#52) Selected RX 
"RTN","BPSSCRCV",37,0)
 ;1.19 NON-BILLABLE TRI/CVA ENTRIES OPEN/CLOSED/ALL -- 'O' Open; 'C' Closed; 'A' All
"RTN","BPSSCRCV",38,0)
 ;2    ECME PHARMACY DIVISION -- the list of POINTERs TO BPS PHARMACIES FILE (#9002313.56) separated by ";"
"RTN","BPSSCRCV",39,0)
 ;should start and end with ";", example: ";4;5;"
"RTN","BPSSCRCV",40,0)
 ;2.01 ELIGIBILITY TYPE --'V' FOR VETERAN;'T' FOR TRICARE;'C' FOR CHAMPVA;'A' FOR ALL; Display claims for specific Eligibility Type or ALL (BNT BPS*1.0*7)
"RTN","BPSSCRCV",41,0)
 ;2.02 OPEN/CLOSED/ALL --'O' OPEN CLAIMS;'C' CLOSED CLAIMS;'A' FOR ALL; Display Open, Closed, or ALL claims (BNT BPS*1.0*7)
"RTN","BPSSCRCV",42,0)
 ;2.03 SUBMISSION TYPE --'B' BILLING REQUESTS;'R' REVERSALS;'A' FOR ALL; Display specific submission type claims or ALL (BNT BPS*1.0*7)
"RTN","BPSSCRCV",43,0)
 ;2.04 INSURANCES -- List of POINTERs to the INSURANCE COMPANY FILE (#36) separated by ";"
"RTN","BPSSCRCV",44,0)
 ;should start and end with ";", example: ";4;5;"
"RTN","BPSSCRCV",45,0)
 ;NOTE: use D ^XPAREDIT to add/edit values
"RTN","BPSSCRCV",46,0)
 ;
"RTN","BPSSCRCV",47,0)
 ;*****
"RTN","BPSSCRCV",48,0)
 ;
"RTN","BPSSCRCV",49,0)
CV ;
"RTN","BPSSCRCV",50,0)
 N BPSRESCV,BPSTMPCV,DIR,Y
"RTN","BPSSCRCV",51,0)
 D FULL^VALM1
"RTN","BPSSCRCV",52,0)
 W @IOF
"RTN","BPSSCRCV",53,0)
 S BPSTMPCV=$G(BPARR("TEMPCV"))   ; Define Temp View Flag before BPARR is killed
"RTN","BPSSCRCV",54,0)
 K BPARR
"RTN","BPSSCRCV",55,0)
 I +$G(DUZ)=0 D ERRMSG^BPSSCRCV("Unknown User") Q
"RTN","BPSSCRCV",56,0)
 N BPDUZ7
"RTN","BPSSCRCV",57,0)
 S BPDUZ7=+DUZ
"RTN","BPSSCRCV",58,0)
 ;always get current profile from the file
"RTN","BPSSCRCV",59,0)
 D READPROF^BPSSCRSL(.BPARR,BPDUZ7)
"RTN","BPSSCRCV",60,0)
 ; BPARR("1.13") is the parameter for Pharmacy Division. 
"RTN","BPSSCRCV",61,0)
 ; If BPARR("1.13") is defined, the user has a preferred view defined.
"RTN","BPSSCRCV",62,0)
 I ($G(BPSTMPCV)=1)&($G(BPARR("1.13"))'="") D
"RTN","BPSSCRCV",63,0)
 . S DIR(0)="Y"
"RTN","BPSSCRCV",64,0)
 . S DIR("A")="Restore your Preferred View and exit Change View (Y/N)"
"RTN","BPSSCRCV",65,0)
 . D ^DIR
"RTN","BPSSCRCV",66,0)
 . S BPSRESCV=Y
"RTN","BPSSCRCV",67,0)
 I $G(BPSRESCV)=1 G CV1     ; User replied YES - restore to preferred view.
"RTN","BPSSCRCV",68,0)
 D SAVEVIEW^BPSSCR01(.BPARR)
"RTN","BPSSCRCV",69,0)
 ;edit current profile
"RTN","BPSSCRCV",70,0)
 D EDITPROF(.BPARR,.BPDUZ7)
"RTN","BPSSCRCV",71,0)
 ;ask user if need to save everything in USR PROFILE file 
"RTN","BPSSCRCV",72,0)
 ;(except SORT LIST field)
"RTN","BPSSCRCV",73,0)
 N BPSRT S BPSRT=BPARR(1.12)
"RTN","BPSSCRCV",74,0)
 K BPARR(1.12)
"RTN","BPSSCRCV",75,0)
 D ENDEDIT^BPSSCRSL(.BPARR,+BPDUZ7)
"RTN","BPSSCRCV",76,0)
 S BPARR(1.12)=BPSRT
"RTN","BPSSCRCV",77,0)
CV1 ;
"RTN","BPSSCRCV",78,0)
 D SAVEVIEW^BPSSCR01(.BPARR)
"RTN","BPSSCRCV",79,0)
 S VALMBG=1
"RTN","BPSSCRCV",80,0)
 D REDRAW^BPSSCRUD("Updating screen...")
"RTN","BPSSCRCV",81,0)
 Q
"RTN","BPSSCRCV",82,0)
 ;edit user profile for CHANGE VIEW
"RTN","BPSSCRCV",83,0)
EDITPROF(BPARR,BPDUZ7) ;
"RTN","BPSSCRCV",84,0)
 I +$G(DUZ)=0 D ERRMSG("Unknown User") Q
"RTN","BPSSCRCV",85,0)
 N BP1,BPACT,BPTF,BPQ,BPINP
"RTN","BPSSCRCV",86,0)
 N BPRET
"RTN","BPSSCRCV",87,0)
 N DIR,DR,DIE,DA
"RTN","BPSSCRCV",88,0)
 N BPS106,BPS106STR,BPS108,BPS108STR,BPS109,BPS109STR,BPS115,BPS115AR,BPS115NM,BPS115X
"RTN","BPSSCRCV",89,0)
 N BPS116,BPS116AR,BPS116NM,BPS116X,BPS117,BPS117AR,BPS117NM,BPS117X,BPS118,BPS118AR,BPS118X
"RTN","BPSSCRCV",90,0)
 N BPS201,BPS201STR,BPSCNT,BPSDRUG,BPSERR,BPSRXD,BPSRXN,BPSSEL,BPSX,BPSDAYS,BPSTMPDT
"RTN","BPSSCRCV",91,0)
 ;get ONE/ALL USERS?
"RTN","BPSSCRCV",92,0)
 ;EDITFLD(FILENO,FLDNO,RECIEN,CODESET,PRMTMSG,DFLTCODE)  ;
"RTN","BPSSCRCV",93,0)
 ;
"RTN","BPSSCRCV",94,0)
BPS113 ; FIELD 1.13 - Division
"RTN","BPSSCRCV",95,0)
 S BPRET=$$DS^BPSSCRDS(.BPARR,+BPDUZ7) ;get divisions
"RTN","BPSSCRCV",96,0)
 Q:BPRET=-2  ;quit due to timeout or ^
"RTN","BPSSCRCV",97,0)
 ; If (D)ivision option was selected but no Divisons entered, set BPARR(1.13)to "A"
"RTN","BPSSCRCV",98,0)
 ; and re-prompt current question.
"RTN","BPSSCRCV",99,0)
 I ($G(BPARR(1.13))="D")&(($G(BPARR("DIVS"))="")!($G(BPARR("DIVS"))=";")) S BPARR(1.13)="A" G BPS113
"RTN","BPSSCRCV",100,0)
 ;
"RTN","BPSSCRCV",101,0)
 I $$BPS201^BPSSCRV1(.BPARR)=0 Q
"RTN","BPSSCRCV",102,0)
 I $$BPS101^BPSSCRV1(.BPARR)=0 Q
"RTN","BPSSCRCV",103,0)
 I $$BPS102^BPSSCRV1(.BPARR)=0 Q
"RTN","BPSSCRCV",104,0)
 I BPARR(1.02)="A" S BPSTMPDT="" D DTERNG   ; If ALL patients, verify date range is not over 180 days
"RTN","BPSSCRCV",105,0)
 I $$BPS103^BPSSCRV1(.BPARR)=0 Q
"RTN","BPSSCRCV",106,0)
 ;
"RTN","BPSSCRCV",107,0)
DATETIME ; Display by Date Range or Timeframe
"RTN","BPSSCRCV",108,0)
 ; Prompt the user to select Display Activity Date Range or Timeframe.
"RTN","BPSSCRCV",109,0)
 S BPINP=$$ACTTYP()
"RTN","BPSSCRCV",110,0)
 Q:BPINP=-1      ;quit due to timeout or ^
"RTN","BPSSCRCV",111,0)
 ;
"RTN","BPSSCRCV",112,0)
 S BPACT=BPINP
"RTN","BPSSCRCV",113,0)
 S BPQ=0
"RTN","BPSSCRCV",114,0)
 ;
"RTN","BPSSCRCV",115,0)
 S BPSDAYS=180
"RTN","BPSSCRCV",116,0)
 I BPARR(1.02)="P" S BPSDAYS=366
"RTN","BPSSCRCV",117,0)
 ;
"RTN","BPSSCRCV",118,0)
 ; If Date Range was selected, prompt for Activity Beginning and Ending Date.
"RTN","BPSSCRCV",119,0)
 I BPACT="D" D
"RTN","BPSSCRCV",120,0)
 . ; Clear out Timeframe parameters.
"RTN","BPSSCRCV",121,0)
 . S (BPARR(1.04),BPARR(1.05))=""
"RTN","BPSSCRCV",122,0)
 . ;
"RTN","BPSSCRCV",123,0)
 . S BPINP=$$BEGDATE()
"RTN","BPSSCRCV",124,0)
 . I BPINP=-1 S BPQ=-1 Q
"RTN","BPSSCRCV",125,0)
 . S BPINP=$$ENDDATE()
"RTN","BPSSCRCV",126,0)
 . I BPINP=-1 S BPQ=-1 Q
"RTN","BPSSCRCV",127,0)
 ;
"RTN","BPSSCRCV",128,0)
 I BPQ=-1 D  G DATETIME  ; Date Range selected, but no dates entered
"RTN","BPSSCRCV",129,0)
 . W !!,"Beginning and Ending Dates are required for Date Range"
"RTN","BPSSCRCV",130,0)
 . ; Don't allow user to exit out without making valid selections.
"RTN","BPSSCRCV",131,0)
 . ; If user selects Date Range but no valid dates default to Timeframe and 7 days.
"RTN","BPSSCRCV",132,0)
 . S BPARR(1.031)="T",BPARR(1.04)="D",BPARR(1.05)=7
"RTN","BPSSCRCV",133,0)
 ;
"RTN","BPSSCRCV",134,0)
 ; If Timeframe was selected, prompt for Days or Hours and Activity Timeframe Value.
"RTN","BPSSCRCV",135,0)
 I BPACT="T" D
"RTN","BPSSCRCV",136,0)
 . ; Clear out Date Range Parameters.
"RTN","BPSSCRCV",137,0)
 . S (BPARR(1.032),BPARR(1.033))=""
"RTN","BPSSCRCV",138,0)
 . ;
"RTN","BPSSCRCV",139,0)
 . S BPINP=$$EDITFLD(1.04,+BPDUZ7,"S^D:DAYS;H:HOURS","Activity Timeframe (H)ours or (D)ays","DAYS",.BPARR)
"RTN","BPSSCRCV",140,0)
 . I BPINP=-1 S BPQ=-1 Q
"RTN","BPSSCRCV",141,0)
 . S BPTF=$P(BPINP,U,2)
"RTN","BPSSCRCV",142,0)
 . S BPINP=$$EDITFLD(1.05,+BPDUZ7,"N^1:"_BPSDAYS_":0","Activity Timeframe Value",$S(BPTF="H":24,1:7),.BPARR)
"RTN","BPSSCRCV",143,0)
 . I BPINP=-1 S BPQ=-1 Q
"RTN","BPSSCRCV",144,0)
 Q:BPQ=-1         ;quit due to timeout or ^
"RTN","BPSSCRCV",145,0)
 ;
"RTN","BPSSCRCV",146,0)
 Q:$$EDITFLD(2.02,+BPDUZ7,"S^O:OPEN CLAIMS;C:CLOSED CLAIMS;A:ALL","Select Open/Closed or All Claims","O",.BPARR)=-1
"RTN","BPSSCRCV",147,0)
 Q:$$EDITFLD(1.19,+BPDUZ7,"S^O:Open Non-Billable Entries;C:Closed Non-Billable Entries;A:ALL","Display (O)pen or (C)losed or (A)ll Non-Billable Entries","A",.BPARR)=-1
"RTN","BPSSCRCV",148,0)
 Q:$$EDITFLD(2.03,+BPDUZ7,"S^B:BILLING REQUESTS;R:REVERSALS;A:ALL","Select Submission Type","A",.BPARR)=-1
"RTN","BPSSCRCV",149,0)
 I $$BPS106^BPSSCRV2(.BPARR)=0 Q
"RTN","BPSSCRCV",150,0)
 Q:$$EDITFLD(1.07,+BPDUZ7,"S^R:RELEASED;N:NON-RELEASED;A:ALL","Display (R)eleased Rxs or (N)on-Released Rxs or (A)LL","RELEASED",.BPARR)=-1
"RTN","BPSSCRCV",151,0)
 I $$BPS108^BPSSCRV2(.BPARR)=0 Q
"RTN","BPSSCRCV",152,0)
 I $$BPS109^BPSSCRV2(.BPARR)=0 Q
"RTN","BPSSCRCV",153,0)
 I $$BPS110^BPSSCRV2(.BPARR)=0 Q
"RTN","BPSSCRCV",154,0)
 ;
"RTN","BPSSCRCV",155,0)
 Q:$$INSURSEL^BPSSCRCU(.BPARR,+BPDUZ7)=-1
"RTN","BPSSCRCV",156,0)
 Q
"RTN","BPSSCRCV",157,0)
 ;
"RTN","BPSSCRCV",158,0)
ERRMSG(BPMSG) ;
"RTN","BPSSCRCV",159,0)
 W !,"***",BPMSG,"***",!
"RTN","BPSSCRCV",160,0)
 D PAUSE^VALM1
"RTN","BPSSCRCV",161,0)
 Q
"RTN","BPSSCRCV",162,0)
 ;/**
"RTN","BPSSCRCV",163,0)
 ;FLDNO - PARAMETERS INSTANCE
"RTN","BPSSCRCV",164,0)
 ;RECIEN - User DUZ
"RTN","BPSSCRCV",165,0)
 ;DIR0 - like DIR(0) node for ^DIR - i.e. field type, etc
"RTN","BPSSCRCV",166,0)
 ;PRMTMSG - user prompt
"RTN","BPSSCRCV",167,0)
 ;DFLTVAL - pass the default value for the case if there is no value in database
"RTN","BPSSCRCV",168,0)
 ;BPARRAY - array to store and change values in profile
"RTN","BPSSCRCV",169,0)
 ;returns:
"RTN","BPSSCRCV",170,0)
 ;as return value:
"RTN","BPSSCRCV",171,0)
 ; "1^value" - if selected
"RTN","BPSSCRCV",172,0)
 ; "-1" if timeout or uparrow
"RTN","BPSSCRCV",173,0)
 ;via BPARRAY
"RTN","BPSSCRCV",174,0)
 ; BPARRAY(filedno)=value
"RTN","BPSSCRCV",175,0)
EDITFLD(FLDNO,RECIEN,DIR0,PRMTMSG,DFLTVAL,BPARRAY) ;*/
"RTN","BPSSCRCV",176,0)
 N DIR,RETV,RETARR
"RTN","BPSSCRCV",177,0)
 N RECIENS,FDA,LCK,ERRARR
"RTN","BPSSCRCV",178,0)
 S RETV=$$GETPARAM^BPSSCRSL(FLDNO,RECIEN)
"RTN","BPSSCRCV",179,0)
 I FLDNO=1.17 S RETV=$P($G(^DPT(+RETV,0)),U)
"RTN","BPSSCRCV",180,0)
 ;Use the External Code from File #9002313.93 as the default value to display to user.
"RTN","BPSSCRCV",181,0)
 I FLDNO=1.15 S RETV=$P($G(^BPSF(9002313.93,+RETV,0)),U)
"RTN","BPSSCRCV",182,0)
 ;if data then use it, otherwise use data from parameter
"RTN","BPSSCRCV",183,0)
 I $L($G(RETV))>0&($G(BPSERR)'=1) S DFLTVAL=RETV E  S DFLTVAL=$G(DFLTVAL)
"RTN","BPSSCRCV",184,0)
 ;prompt the user
"RTN","BPSSCRCV",185,0)
 S RETV=$$PROMPT(DIR0,PRMTMSG,DFLTVAL)
"RTN","BPSSCRCV",186,0)
 Q:RETV<0 -1
"RTN","BPSSCRCV",187,0)
 ;save it in the database
"RTN","BPSSCRCV",188,0)
 S BPARRAY(FLDNO)=RETV
"RTN","BPSSCRCV",189,0)
 Q "1^"_RETV
"RTN","BPSSCRCV",190,0)
 ;
"RTN","BPSSCRCV",191,0)
 ;
"RTN","BPSSCRCV",192,0)
FILEIT(FILENO,FLDNO,RECIEN,NEWVAL) ;
"RTN","BPSSCRCV",193,0)
 N RECIENS
"RTN","BPSSCRCV",194,0)
 S RECIENS=RECIEN_","
"RTN","BPSSCRCV",195,0)
 S FDA(FILENO,RECIENS,FLDNO)=NEWVAL
"RTN","BPSSCRCV",196,0)
 L +^BPS(FILENO,RECIEN,1):10 S LCK=$T I 'LCK Q "0^"_NEWVAL_"^LOCKED"  ;quit
"RTN","BPSSCRCV",197,0)
 D FILE^DIE("","FDA","ERRARR")
"RTN","BPSSCRCV",198,0)
 I LCK L -^BPS(FILENO,RECIEN,1)
"RTN","BPSSCRCV",199,0)
 I $D(ERRARR) Q "0^"_NEWVAL_"^"_ERRARR("DIERR",1,"TEXT",1)
"RTN","BPSSCRCV",200,0)
 Q "1^"_NEWVAL
"RTN","BPSSCRCV",201,0)
 ;
"RTN","BPSSCRCV",202,0)
 ;prompts for selection
"RTN","BPSSCRCV",203,0)
 ;returns selection
"RTN","BPSSCRCV",204,0)
 ;OR -1 when timeout and uparrow
"RTN","BPSSCRCV",205,0)
PROMPT(ZERONODE,PRMTMSG,DFLTVAL) ;
"RTN","BPSSCRCV",206,0)
 N Y,DUOUT,DTOUT,BPQUIT,DIROUT
"RTN","BPSSCRCV",207,0)
 S BPQUIT=0
"RTN","BPSSCRCV",208,0)
 I $E(ZERONODE,1,1)="P" D
"RTN","BPSSCRCV",209,0)
 . N DIC
"RTN","BPSSCRCV",210,0)
 . S DIC="^"_$P(ZERONODE,U,2)
"RTN","BPSSCRCV",211,0)
 . S DIC(0)="AEMNQ"
"RTN","BPSSCRCV",212,0)
 . S:$L($G(DFLTVAL))>0 DIC("B")=DFLTVAL
"RTN","BPSSCRCV",213,0)
 . S DIC("A")=PRMTMSG_": "
"RTN","BPSSCRCV",214,0)
 . D ^DIC
"RTN","BPSSCRCV",215,0)
 . I (Y=-1)!$D(DUOUT)!$D(DTOUT) S BPQUIT=1
"RTN","BPSSCRCV",216,0)
 E  D
"RTN","BPSSCRCV",217,0)
 . N DIR
"RTN","BPSSCRCV",218,0)
 . S DIR(0)=ZERONODE
"RTN","BPSSCRCV",219,0)
 . S DIR("A")=PRMTMSG
"RTN","BPSSCRCV",220,0)
 . S:$L($G(DFLTVAL))>0 DIR("B")=DFLTVAL
"RTN","BPSSCRCV",221,0)
 . ;
"RTN","BPSSCRCV",222,0)
 . ; display some extra text for FLDNO=1.19   (BPS*1*20)
"RTN","BPSSCRCV",223,0)
 . I $G(FLDNO)=1.19 D
"RTN","BPSSCRCV",224,0)
 .. S DIR("A",1)="    Please note this question only applies to"
"RTN","BPSSCRCV",225,0)
 .. S DIR("A",2)="    TRICARE or CHAMPVA Non-Billable Entries."
"RTN","BPSSCRCV",226,0)
 .. S DIR("A",3)=" "
"RTN","BPSSCRCV",227,0)
 .. Q
"RTN","BPSSCRCV",228,0)
 . ;
"RTN","BPSSCRCV",229,0)
 . D ^DIR
"RTN","BPSSCRCV",230,0)
 . I (Y=-1)!$D(DIROUT)!$D(DUOUT)!$D(DTOUT) S BPQUIT=1
"RTN","BPSSCRCV",231,0)
 I BPQUIT=1 Q -1
"RTN","BPSSCRCV",232,0)
 Q $P(Y,U)
"RTN","BPSSCRCV",233,0)
 ;
"RTN","BPSSCRCV",234,0)
GETFLD(FILENO,FLDNO,RECIEN) ;
"RTN","BPSSCRCV",235,0)
 N RETV,RETARR
"RTN","BPSSCRCV",236,0)
 N RECIENS
"RTN","BPSSCRCV",237,0)
 S RECIENS=RECIEN_","
"RTN","BPSSCRCV",238,0)
 ; first try to get the value from file
"RTN","BPSSCRCV",239,0)
 D GETS^DIQ(FILENO,RECIENS,FLDNO,"E","RETARR")
"RTN","BPSSCRCV",240,0)
 S RETV=$G(RETARR(FILENO,RECIENS,FLDNO,"E"))
"RTN","BPSSCRCV",241,0)
 Q $G(RETV)
"RTN","BPSSCRCV",242,0)
 ;
"RTN","BPSSCRCV",243,0)
 ;save all profile array to file
"RTN","BPSSCRCV",244,0)
 ;BPARRAY - arrays with pointers to 9002313.56
"RTN","BPSSCRCV",245,0)
 ;BPDUZ7 - DUZ
"RTN","BPSSCRCV",246,0)
FILEALL(BPARRAY,BPDUZ7) ;
"RTN","BPSSCRCV",247,0)
 ;BPS*14 - RRA changed API, because previously it was re-writing Division
"RTN","BPSSCRCV",248,0)
 ;and Insurance parameter regardless if it was modified and had a value
"RTN","BPSSCRCV",249,0)
 ;ticket 337299
"RTN","BPSSCRCV",250,0)
 N BPFLD,BP2
"RTN","BPSSCRCV",251,0)
 S BPFLD=0
"RTN","BPSSCRCV",252,0)
 F  S BPFLD=$O(BPARRAY(BPFLD)) Q:$G(BPFLD)=""  D
"RTN","BPSSCRCV",253,0)
 . I BPFLD="DIVS" I $$SAVEPAR^BPSSCRSL(2,BPDUZ7,$G(BPARRAY("DIVS")))
"RTN","BPSSCRCV",254,0)
 . I BPFLD="INS" I $$SAVEPAR^BPSSCRSL(2.04,BPDUZ7,$G(BPARRAY("INS")))
"RTN","BPSSCRCV",255,0)
 . Q:+BPFLD=0  I $$SAVEPAR^BPSSCRSL(BPFLD,+BPDUZ7,$G(BPARRAY(BPFLD)))
"RTN","BPSSCRCV",256,0)
 Q
"RTN","BPSSCRCV",257,0)
 ;
"RTN","BPSSCRCV",258,0)
ACTTYP() ; Prompt the user to select Display Activity Date Range or Timeframe.
"RTN","BPSSCRCV",259,0)
 ; The user is required to select D or T and there is no default value.
"RTN","BPSSCRCV",260,0)
 ; 
"RTN","BPSSCRCV",261,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,RETV,X,Y
"RTN","BPSSCRCV",262,0)
 S RETV=$$GETPARAM^BPSSCRSL(1.031,+BPDUZ7)
"RTN","BPSSCRCV",263,0)
 S DIR(0)="S^D:Date Range;T:Timeframe"
"RTN","BPSSCRCV",264,0)
 S DIR("A")="Display Activity (D)ate Range or (T)imeframe"
"RTN","BPSSCRCV",265,0)
 S DIR("B")="T"
"RTN","BPSSCRCV",266,0)
 I RETV'="" S DIR("B")=RETV
"RTN","BPSSCRCV",267,0)
 S DIR("?",1)="Date Range will allow a user to specify an activity beginning and ending date."
"RTN","BPSSCRCV",268,0)
 S DIR("?")="Timeframe will allow a user to specify the activity by days or hours."
"RTN","BPSSCRCV",269,0)
 D ^DIR
"RTN","BPSSCRCV",270,0)
 ;
"RTN","BPSSCRCV",271,0)
 ;quit due to timeout or ^
"RTN","BPSSCRCV",272,0)
 I $D(DIRUT) Q -1
"RTN","BPSSCRCV",273,0)
 ;
"RTN","BPSSCRCV",274,0)
 S BPARR(1.031)=Y
"RTN","BPSSCRCV",275,0)
 Q BPARR(1.031)
"RTN","BPSSCRCV",276,0)
 ;
"RTN","BPSSCRCV",277,0)
BEGDATE() ; Enter Activity Beginning Date when Date Range is selected
"RTN","BPSSCRCV",278,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,RETV,X,Y
"RTN","BPSSCRCV",279,0)
 S RETV=$$GETPARAM^BPSSCRSL(1.032,+BPDUZ7)
"RTN","BPSSCRCV",280,0)
 I $G(BPSTMPDT)=1 S RETV="T-7"
"RTN","BPSSCRCV",281,0)
BEGDATE1 ;
"RTN","BPSSCRCV",282,0)
 S DIR(0)="D"
"RTN","BPSSCRCV",283,0)
 S DIR("A")="Activity Beginning Date"
"RTN","BPSSCRCV",284,0)
 I RETV'="" S DIR("B")=$$FMTE^XLFDT(RETV,"D")
"RTN","BPSSCRCV",285,0)
 S DIR("?")="Enter a date which is less than or equal to "_$$FMTE^XLFDT($$NOW^XLFDT(),"D")
"RTN","BPSSCRCV",286,0)
 D ^DIR
"RTN","BPSSCRCV",287,0)
 ;
"RTN","BPSSCRCV",288,0)
 ;quit due to timeout or ^
"RTN","BPSSCRCV",289,0)
 I $D(DIRUT) Q -1
"RTN","BPSSCRCV",290,0)
 ;
"RTN","BPSSCRCV",291,0)
 I Y>$$NOW^XLFDT() W !,"Enter a date less than or equal to "_$$FMTE^XLFDT($$NOW^XLFDT(),"D"),! G BEGDATE1
"RTN","BPSSCRCV",292,0)
 ;
"RTN","BPSSCRCV",293,0)
 W "  (",Y(0),")"
"RTN","BPSSCRCV",294,0)
 S BPARR(1.032)=Y
"RTN","BPSSCRCV",295,0)
 Q BPARR(1.032)
"RTN","BPSSCRCV",296,0)
 ;
"RTN","BPSSCRCV",297,0)
ENDDATE() ; Enter Activity Ending Date when Date Range is selected
"RTN","BPSSCRCV",298,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,RETV,X,Y
"RTN","BPSSCRCV",299,0)
 S RETV=$$GETPARAM^BPSSCRSL(1.033,+BPDUZ7)
"RTN","BPSSCRCV",300,0)
 I $G(BPSTMPDT)=1 S RETV="T"
"RTN","BPSSCRCV",301,0)
ENDDATE1 ;
"RTN","BPSSCRCV",302,0)
 S DIR(0)="D"
"RTN","BPSSCRCV",303,0)
 S DIR("A")="Activity Ending Date"
"RTN","BPSSCRCV",304,0)
 I RETV'="" S DIR("B")=$$FMTE^XLFDT(RETV,"D")
"RTN","BPSSCRCV",305,0)
 S DIR("?")="Enter a date which is no more than "_BPSDAYS_" days after the Beginning Date."
"RTN","BPSSCRCV",306,0)
 D ^DIR
"RTN","BPSSCRCV",307,0)
 ;
"RTN","BPSSCRCV",308,0)
 ;quit due to timeout or ^
"RTN","BPSSCRCV",309,0)
 I $D(DIRUT) Q -1
"RTN","BPSSCRCV",310,0)
 ; 
"RTN","BPSSCRCV",311,0)
 I Y<BPARR(1.032) W !!,"Ending Date precedes Beginning Date.",! G ENDDATE1
"RTN","BPSSCRCV",312,0)
 ;
"RTN","BPSSCRCV",313,0)
 I $$FMDIFF^XLFDT(Y,BPARR(1.032))>BPSDAYS D  G ENDDATE1
"RTN","BPSSCRCV",314,0)
 . W !!,"Date range exceeds "_BPSDAYS_" day limit.  Select an Ending Date no more"
"RTN","BPSSCRCV",315,0)
 . W !,"than "_BPSDAYS_" days after the Beginning Date.",!
"RTN","BPSSCRCV",316,0)
 ;
"RTN","BPSSCRCV",317,0)
 W "  (",Y(0),")"
"RTN","BPSSCRCV",318,0)
 S BPARR(1.033)=Y
"RTN","BPSSCRCV",319,0)
 Q BPARR(1.033)
"RTN","BPSSCRCV",320,0)
 ;
"RTN","BPSSCRCV",321,0)
DTERNG ; Date Range Check
"RTN","BPSSCRCV",322,0)
 ; If ALL patients selected, verify the user preferred time frame
"RTN","BPSSCRCV",323,0)
 ; is not outside of the allowable range. If time frame is outside
"RTN","BPSSCRCV",324,0)
 ; of the allowable range, update range to the past 7 days.
"RTN","BPSSCRCV",325,0)
 N BPS1031,BPS1032,BPS1033,BPS104,BPS105,BPSDAYS
"RTN","BPSSCRCV",326,0)
 S BPS1031=$$GETPARAM^BPSSCRSL(1.031,+BPDUZ7)
"RTN","BPSSCRCV",327,0)
 S BPS1032=$$GETPARAM^BPSSCRSL(1.032,+BPDUZ7)
"RTN","BPSSCRCV",328,0)
 S BPS1033=$$GETPARAM^BPSSCRSL(1.033,+BPDUZ7)
"RTN","BPSSCRCV",329,0)
 S BPS104=$$GETPARAM^BPSSCRSL(1.04,+BPDUZ7)
"RTN","BPSSCRCV",330,0)
 S BPS105=$$GETPARAM^BPSSCRSL(1.05,+BPDUZ7)
"RTN","BPSSCRCV",331,0)
 I ((BPS1031="T")&(BPS105>180))!((BPS1031="D")&($$FMDIFF^XLFDT(BPS1033,BPS1032)>180)) D
"RTN","BPSSCRCV",332,0)
 . S BPARR(1.031)="T"
"RTN","BPSSCRCV",333,0)
 . S BPARR(1.032)=""
"RTN","BPSSCRCV",334,0)
 . S BPARR(1.033)=""
"RTN","BPSSCRCV",335,0)
 . S BPARR(1.04)="D"
"RTN","BPSSCRCV",336,0)
 . S BPARR(1.05)=7
"RTN","BPSSCRCV",337,0)
 . I BPS1031="T" S BPSDAYS=BPS105
"RTN","BPSSCRCV",338,0)
 . I BPS1031="D" S BPSDAYS=$$FMDIFF^XLFDT(BPS1033,BPS1032)
"RTN","BPSSCRCV",339,0)
 . W !!,"Date range exceeds 180 day limit which is not allowed when all patients"
"RTN","BPSSCRCV",340,0)
 . W !,"are selected.  The window of time has changed from "_BPSDAYS_" days to the"
"RTN","BPSSCRCV",341,0)
 . W !,"last 7 days."
"RTN","BPSSCRCV",342,0)
 . S BPSTMPDT=1
"RTN","BPSSCRCV",343,0)
 Q
"RTN","BPSSCRSL")
0^29^B17169581
"RTN","BPSSCRSL",1,0)
BPSSCRSL ;BHAM ISC/SS - ECME SCREEN SORT LIST ;05-APR-05
"RTN","BPSSCRSL",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,7,11,20,22,23**;JUN 2004;Build 44
"RTN","BPSSCRSL",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRSL",4,0)
 ;USER SCREEN
"RTN","BPSSCRSL",5,0)
 ;
"RTN","BPSSCRSL",6,0)
 ;This software is using PARAMETER TOOLS (see XT*7.3*26) to store user's settings:
"RTN","BPSSCRSL",7,0)
 ;PARAMETER DEFINITION NAME="BPS USRSCR" (file #8989.51, IA# 2263)
"RTN","BPSSCRSL",8,0)
 ;ENTITY is "USR" , i.e. IEN in ^VA(200  -- see definition for "BPS USRSCR"
"RTN","BPSSCRSL",9,0)
 ;INSTANCEs are as follows:
"RTN","BPSSCRSL",10,0)
 ;1.01 ONE/ALL USERS --'U' ONE USER, 'A' ALL; Display claims for ONE or ALL users 
"RTN","BPSSCRSL",11,0)
 ;1.02 ONE/ALL PATIENTS --'P' FOR ONE PATIENT; 'A' FOR ALL; Display claims for ONE/ALL PATIENTS 
"RTN","BPSSCRSL",12,0)
 ;1.03 ONE/ALL RX --'R' FOR ONE RX; 'A' FOR ALL; Display claims for ONE or ALL RX 
"RTN","BPSSCRSL",13,0)
 ;1.031 DATE RANGE/TIMEFRAME -- 'D' FOR DATE RANGE; 'T' FOR TIMEFRAME
"RTN","BPSSCRSL",14,0)
 ;1.032 ACTIVITY BEGINNING DATE - Beginning Date of the Date Range
"RTN","BPSSCRSL",15,0)
 ;1.033 ACTIVITY ENDING DATE - Ending Date of the Date Range
"RTN","BPSSCRSL",16,0)
 ;1.04 HOURS/DAYS -- 'D' FOR DAYS; 'H' FOR HOURS; Use HOURS or DAYS to specify timeframe 
"RTN","BPSSCRSL",17,0)
 ;1.05 TIMEFRAME -- NUMBER Depends on the value of the field "USR SCR HOURS/DAYS" this field will
"RTN","BPSSCRSL",18,0)
 ;store the default number of HOURS from NOW or DAYS from TODAY to select claims to display 
"RTN","BPSSCRSL",19,0)
 ;1.06 REJECTED/PAYABLE --'R' FOR REJECTS; 'P' FOR PAYABLES; 'U' FOR UNSTRANDED; 'A' FOR ALL; Display Rejects or Payables or Unstranded or ALL claims 
"RTN","BPSSCRSL",20,0)
 ;1.07 RELEASED/NOT RELEASED --'R' FOR RELEASED; 'N' FOR NON-RELEASED; 'A' FOR ALL; Display Released Rxs or Non-Released Rxs or ALL 
"RTN","BPSSCRSL",21,0)
 ;1.08 CMOP/MAIL/WINDOW --'C' FOR CMOP; 'M' FOR MAIL;'W' FOR WINDOW;'A' FOR ALL; Display CMOP or Mail or Window or ALL Rxs 
"RTN","BPSSCRSL",22,0)
 ;1.09 REALTIME/BACKBILL --'R' FOR REALTIME; 'B' FOR BACKBILLS; 'P' FOR PRO OPTION; 'R' FOR RESUBMISSION; 'A' FOR ALL;
"RTN","BPSSCRSL",23,0)
 ;     Display (R)ealTime, (B)ackbills, (P)RO Option, Re(S)ubmission or (A)LL
"RTN","BPSSCRSL",24,0)
 ;1.1 REJECT CODE/ALL --'R' FOR REJECT CODE; 'A' FOR ALL; Display Specific Reject Code or ALL Reject
"RTN","BPSSCRSL",25,0)
 ;Codes 0 means ALL Reject Codes otherwise - Reject Code value 
"RTN","BPSSCRSL",26,0)
 ;1.11 SPECIFIC/ALL INSURANCES --'I' FOR SPECIFIC INSURANCE(S);'A' FOR ALL; Display Specific Insurance Company(s) or All null - ALL otherwise - pointer to INSURANCE COMPANY file #36 
"RTN","BPSSCRSL",27,0)
 ;1.12 SORT LIST --'T' FOR TRANSACTION DATE;'D' FOR DIVISION; 'I' FOR INSURANCE; 'C' FOR REJECT CODE; 
"RTN","BPSSCRSL",28,0)
 ;'P' FOR PATIENT NAME -- 'N' FOR DRUG NAME; 'B' FOR BILL TYPE (BB/P2/RT/RS); 'L' FOR FILL LOCATION;
"RTN","BPSSCRSL",29,0)
 ;'R' FOR RELEASED/NON-RELEASED -- 'A' FOR ACTIVE/DISCONTINUED; the field used to sort claims in the list 
"RTN","BPSSCRSL",30,0)
 ;1.13 ALL ECME PHARMACY DIVISIONS --'D' FOR DIVISION; 'A' FOR ALL; 
"RTN","BPSSCRSL",31,0)
 ;1.14 SELECTED INSURANCE -- Single, or multiple, insurance(s) to select claims for the User Screen, to store INSURANCE COMPANY pointer (#36) 
"RTN","BPSSCRSL",32,0)
 ;1.15 SELECTED REJECTED CODE --POINTER TO BPS NCPDP REJECT CODES FILE (#9002313.93) Reject code selected by the user to filter claims.
"RTN","BPSSCRSL",33,0)
 ;1.16 SELECTED USER -- POINTER TO NEW PERSON FILE (#200) Selected user for the user screen 
"RTN","BPSSCRSL",34,0)
 ;1.17 SELECTED PATIENT -- POINTER TO PATIENT FILE (#2) Selected patient for the User Screen 
"RTN","BPSSCRSL",35,0)
 ;1.18 SELECTED RX -- POINTER TO PRESCRIPTION FILE (#52) Selected RX 
"RTN","BPSSCRSL",36,0)
 ;1.19 NON-BILLABLE TRI/CVA ENTRIES OPEN/CLOSED/ALL -- 'O' Open; 'C' Closed; 'A' All
"RTN","BPSSCRSL",37,0)
 ;2    ECME PHARMACY DIVISION -- the list of POINTERs TO BPS PHARMACIES FILE (#9002313.56) separated by "^"
"RTN","BPSSCRSL",38,0)
 ;2.01 ELIGIBILITY TYPE --'V' FOR VETERAN;'T' FOR TRICARE;'C' FOR CHAMPVA;'A' FOR ALL; Display claims for specific Eligibility Type or ALL 
"RTN","BPSSCRSL",39,0)
 ;2.02 OPEN/CLOSED/ALL --'O' OPEN CLAIMS;'C' CLOSED CLAIMS;'A' FOR ALL; Display Open, Closed, or ALL claims 
"RTN","BPSSCRSL",40,0)
 ;2.03 SUBMISSION TYPE --'B' BILLING REQUESTS;'R' REVERSALS;'A' FOR ALL; Display specific submission type claims or ALL 
"RTN","BPSSCRSL",41,0)
 ;2.04 INSURANCES -- List of POINTERs to the INSURANCE COMPANY FILE (#36) separated by ";"
"RTN","BPSSCRSL",42,0)
 ;should start and end with ";", example: ";4;5;"
"RTN","BPSSCRSL",43,0)
 ;
"RTN","BPSSCRSL",44,0)
 ;NOTE: use D ^XPAREDIT to add/edit values
"RTN","BPSSCRSL",45,0)
 ;
"RTN","BPSSCRSL",46,0)
 ;*****
"RTN","BPSSCRSL",47,0)
SL ;
"RTN","BPSSCRSL",48,0)
 D FULL^VALM1
"RTN","BPSSCRSL",49,0)
 W @IOF
"RTN","BPSSCRSL",50,0)
 K BPARR
"RTN","BPSSCRSL",51,0)
 I +$G(DUZ)=0 D ERRMSG^BPSSCRCV("Unknown User") Q
"RTN","BPSSCRSL",52,0)
 N BPDUZ7
"RTN","BPSSCRSL",53,0)
 S BPDUZ7=+DUZ
"RTN","BPSSCRSL",54,0)
 ;always get current profile from the file
"RTN","BPSSCRSL",55,0)
 ;D READPRFP(.BPARR,+DUZ)
"RTN","BPSSCRSL",56,0)
 D READPROF(.BPARR,+BPDUZ7)
"RTN","BPSSCRSL",57,0)
 D SAVEVIEW^BPSSCR01(.BPARR)
"RTN","BPSSCRSL",58,0)
 ;edit current profile
"RTN","BPSSCRSL",59,0)
 D EDITPROF(.BPARR,.BPDUZ7)
"RTN","BPSSCRSL",60,0)
 D SAVEVIEW^BPSSCR01(.BPARR)
"RTN","BPSSCRSL",61,0)
 ;save it if necessary only for SORT LIST field
"RTN","BPSSCRSL",62,0)
 ;(so we used a separate array for this and save it only)
"RTN","BPSSCRSL",63,0)
 N BPSRT S BPSRT(1.12)=BPARR(1.12)
"RTN","BPSSCRSL",64,0)
 D ENDEDIT(.BPSRT,+BPDUZ7)
"RTN","BPSSCRSL",65,0)
 D SAVEVIEW^BPSSCR01(.BPARR)
"RTN","BPSSCRSL",66,0)
 ;redraw screen
"RTN","BPSSCRSL",67,0)
 D REDRAW^BPSSCRUD("Updating screen...")
"RTN","BPSSCRSL",68,0)
 Q
"RTN","BPSSCRSL",69,0)
 ;
"RTN","BPSSCRSL",70,0)
 ;input:
"RTN","BPSSCRSL",71,0)
 ;BPARRAY - array that all settings:  
"RTN","BPSSCRSL",72,0)
 ;   in the form BPARRAY(instance in "BPS USRSCR" parameter tool entry) = value
"RTN","BPSSCRSL",73,0)
 ;BPDUZ7 - DUZ
"RTN","BPSSCRSL",74,0)
EDITPROF(BPARR,BPDUZ7) ;
"RTN","BPSSCRSL",75,0)
 N BP1
"RTN","BPSSCRSL",76,0)
 N BPRET
"RTN","BPSSCRSL",77,0)
 N BPSTR
"RTN","BPSSCRSL",78,0)
 S BPSTR="S^T:TRANSACTION DATE;D:DIVISION;I:INSURANCE;C:REJECT CODE;P:PATIENT NAME;N:DRUG NAME;B:BILL TYPE (BB/P2/RT/RS);L:FILL LOCATION;R:RELEASED/NON-RELEASED;A:ACTIVE/DISCONTINUED"
"RTN","BPSSCRSL",79,0)
 I $$EDITFLD^BPSSCRCV(1.12,+BPDUZ7,BPSTR,"ENTER SORT TYPE","TRANSACTION DATE",.BPARR)=-1 S BPDUZ7=0 Q
"RTN","BPSSCRSL",80,0)
 Q
"RTN","BPSSCRSL",81,0)
 ;
"RTN","BPSSCRSL",82,0)
 ;input:
"RTN","BPSSCRSL",83,0)
 ;BPARRAY - array that all settings:  
"RTN","BPSSCRSL",84,0)
 ;in the form BPARRAY(instance in "BPS USRSCR" parameter tool entry) = value
"RTN","BPSSCRSL",85,0)
 ;BPDUZ7 - DUZ
"RTN","BPSSCRSL",86,0)
 ;
"RTN","BPSSCRSL",87,0)
ENDEDIT(BPARRAY,BPDUZ7) ;
"RTN","BPSSCRSL",88,0)
 S BPARRAY("TEMPCV")=1     ; Default as Temporary View defined
"RTN","BPSSCRSL",89,0)
 I $$PROMPT^BPSSCRCV("S^Y:YES;N:NO","DO YOU WANT TO SAVE THIS VIEW AS YOUR PREFERRED VIEW (Y/N)?","")="Y" D
"RTN","BPSSCRSL",90,0)
 . D FILEALL^BPSSCRCV(.BPARRAY,BPDUZ7)
"RTN","BPSSCRSL",91,0)
 . K BPARRAY("TEMPCV")       ; User agreed to save view as preferred - Remove TEMPCV flag
"RTN","BPSSCRSL",92,0)
 Q
"RTN","BPSSCRSL",93,0)
 ;read profile information (used in other routines as well)
"RTN","BPSSCRSL",94,0)
 ;input:
"RTN","BPSSCRSL",95,0)
 ;BPDUZ7 - DUZ
"RTN","BPSSCRSL",96,0)
 ;input/output:
"RTN","BPSSCRSL",97,0)
 ;BPARRAY - to return back profile information, as reference
"RTN","BPSSCRSL",98,0)
 ;see description in the top of the routine
"RTN","BPSSCRSL",99,0)
READPROF(BPARRAY,BPDUZ7) ;
"RTN","BPSSCRSL",100,0)
 N RETV,RETARR,BPFLDNO,BPDIV,BP1
"RTN","BPSSCRSL",101,0)
 N RECIENS
"RTN","BPSSCRSL",102,0)
 S RECIENS=BPDUZ7_","
"RTN","BPSSCRSL",103,0)
 F BPFLDNO=1.01,1.02,1.03,1.031,1.032,1.033,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,2.01,2.02,2.03,2.04 D
"RTN","BPSSCRSL",104,0)
 . S RETV=$$GETPARAM(BPFLDNO,+BPDUZ7)
"RTN","BPSSCRSL",105,0)
 . S BPARRAY(BPFLDNO)=RETV
"RTN","BPSSCRSL",106,0)
 I BPARRAY(1.13)="D" D
"RTN","BPSSCRSL",107,0)
 . S BPARRAY("DIVS")=$$GETPARAM(2,+BPDUZ7)
"RTN","BPSSCRSL",108,0)
 I BPARRAY(1.11)="I" D
"RTN","BPSSCRSL",109,0)
 . S BPARRAY("INS")=$$GETPARAM(2.04,+BPDUZ7)
"RTN","BPSSCRSL",110,0)
 Q
"RTN","BPSSCRSL",111,0)
 ;
"RTN","BPSSCRSL",112,0)
SORTTYPE(BPSTYPE) ;
"RTN","BPSSCRSL",113,0)
 Q:(BPSTYPE="T") "Transaction Date"
"RTN","BPSSCRSL",114,0)
 Q:(BPSTYPE="D") "ECME division"
"RTN","BPSSCRSL",115,0)
 Q:(BPSTYPE="I") "Insurance"
"RTN","BPSSCRSL",116,0)
 Q:(BPSTYPE="C") "Reject Code"
"RTN","BPSSCRSL",117,0)
 Q:(BPSTYPE="P") "Patient Name"
"RTN","BPSSCRSL",118,0)
 Q:(BPSTYPE="N") "Drug Name"
"RTN","BPSSCRSL",119,0)
 Q:(BPSTYPE="B") "Claim's Origin (BB/P2/RT/RS)"
"RTN","BPSSCRSL",120,0)
 Q:(BPSTYPE="L") "Fill Location"
"RTN","BPSSCRSL",121,0)
 Q:(BPSTYPE="R") "Released/Non-released"
"RTN","BPSSCRSL",122,0)
 Q:(BPSTYPE="A") "Active/Discontinued"
"RTN","BPSSCRSL",123,0)
 Q ""
"RTN","BPSSCRSL",124,0)
 ;
"RTN","BPSSCRSL",125,0)
 ;
"RTN","BPSSCRSL",126,0)
GETPARAM(BPFLDNO,BPDUZ) ;
"RTN","BPSSCRSL",127,0)
 Q $$GET^XPAR(BPDUZ_";VA(200,","BPS USRSCR",BPFLDNO,"I")
"RTN","BPSSCRSL",128,0)
 ;
"RTN","BPSSCRSL",129,0)
 ;save value of the parameter
"RTN","BPSSCRSL",130,0)
SAVEPAR(BPFLDNO,BPDUZ,BPVAL) ;
"RTN","BPSSCRSL",131,0)
 D EN^XPAR(BPDUZ_";VA(200,","BPS USRSCR",BPFLDNO,BPVAL,.BPERR)
"RTN","BPSSCRSL",132,0)
 I BPERR'="0" W !,BPERR,! Q 0
"RTN","BPSSCRSL",133,0)
 Q 1
"RTN","BPSSCRSL",134,0)
 ;
"RTN","BPSSCRU1")
0^30^B4148479
"RTN","BPSSCRU1",1,0)
BPSSCRU1 ;BHAM ISC/SS - ECME SCREEN UTILITIES ;05-APR-05
"RTN","BPSSCRU1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,11,23**;JUN 2004;Build 44
"RTN","BPSSCRU1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRU1",4,0)
 ;USER SCREEN
"RTN","BPSSCRU1",5,0)
 Q
"RTN","BPSSCRU1",6,0)
 ;
"RTN","BPSSCRU1",7,0)
 ;get date/time range
"RTN","BPSSCRU1",8,0)
 ;input:
"RTN","BPSSCRU1",9,0)
 ; BPROF - to store user profile info
"RTN","BPSSCRU1",10,0)
 ;output:
"RTN","BPSSCRU1",11,0)
 ; BPROF("BDT") - start datetime in FM format
"RTN","BPSSCRU1",12,0)
 ; BPROF("EDT") - end datetime in FM format
"RTN","BPSSCRU1",13,0)
GETDT(BPROF) ;
"RTN","BPSSCRU1",14,0)
 N BPNOW,X,BPHORL,%
"RTN","BPSSCRU1",15,0)
 ; If the user selected Display Activity Date Range. 
"RTN","BPSSCRU1",16,0)
 I $G(BPROF(1.031))="D" D  Q 1
"RTN","BPSSCRU1",17,0)
 . ; Adds seconds to the beginning date (BPROF(1.032)-1) in order
"RTN","BPSSCRU1",18,0)
 . ; to pick up everything for that beginning date.
"RTN","BPSSCRU1",19,0)
 . ;  Example: BPROF(1.032)=3170901, BPROF("BDT")=3170900.999999
"RTN","BPSSCRU1",20,0)
 . ;
"RTN","BPSSCRU1",21,0)
 . S BPROF("BDT")=$G(BPROF(1.032))-0.000001
"RTN","BPSSCRU1",22,0)
 . ; 
"RTN","BPSSCRU1",23,0)
 . ; Adds seconds to the ending date (BPROF(1.033)) in order
"RTN","BPSSCRU1",24,0)
 . ; to pick up everything for the ending date.
"RTN","BPSSCRU1",25,0)
 . ;  Example: BPROF(1.033)=3170906, BPROF("BDT")=3170906.9
"RTN","BPSSCRU1",26,0)
 . ;
"RTN","BPSSCRU1",27,0)
 . S BPROF("EDT")=$G(BPROF(1.033))+0.9
"RTN","BPSSCRU1",28,0)
 ;
"RTN","BPSSCRU1",29,0)
 ; If the user selected Display Timeframe.
"RTN","BPSSCRU1",30,0)
 ; Timeframe is the default if no selection was made.
"RTN","BPSSCRU1",31,0)
 E  D
"RTN","BPSSCRU1",32,0)
 . D NOW^%DTC S BPNOW=%
"RTN","BPSSCRU1",33,0)
 . I ($G(BPROF(1.04))'="D")&($G(BPROF(1.04))'="H") S BPROF(1.04)="D"
"RTN","BPSSCRU1",34,0)
 . I +$G(BPROF(1.05))=0 S BPROF(1.05)=1
"RTN","BPSSCRU1",35,0)
 . I $G(BPROF(1.04))="D" D
"RTN","BPSSCRU1",36,0)
 . . S BPROF("BDT")=$$FMADD^XLFDT(BPNOW\1,-$G(BPROF(1.05)))-0.000001
"RTN","BPSSCRU1",37,0)
 . . S BPROF("EDT")=(BPNOW\1)+0.9
"RTN","BPSSCRU1",38,0)
 . I $G(BPROF(1.04))="H" D
"RTN","BPSSCRU1",39,0)
 . . S BPROF("BDT")=$$FMADD^XLFDT(BPNOW,0,-$G(BPROF(1.05)))
"RTN","BPSSCRU1",40,0)
 . . S BPROF("EDT")=BPNOW
"RTN","BPSSCRU1",41,0)
 Q 1
"RTN","BPSSCRU1",42,0)
 ;
"RTN","BPSSCRU1",43,0)
ISCOPAY ;stub
"RTN","BPSSCRU1",44,0)
 Q "COPAY"
"RTN","BPSSCRU1",45,0)
 ;
"RTN","BPSSCRU1",46,0)
CLPRCNTG ;stub
"RTN","BPSSCRU1",47,0)
 Q "%%"
"RTN","BPSSCRU1",48,0)
 ;
"RTN","BPSSCRU1",49,0)
PTCLMINF ;stub
"RTN","BPSSCRU1",50,0)
 Q "X claims payable"
"RTN","BPSSCRU1",51,0)
 ;
"RTN","BPSSCRU1",52,0)
 ;/**
"RTN","BPSSCRU1",53,0)
 ;get user name from file #200
"RTN","BPSSCRU1",54,0)
 ;input: BPDUZ ien in file 200
"RTN","BPSSCRU1",55,0)
 ;output name as string
"RTN","BPSSCRU1",56,0)
GETUSRNM(BPDUZ) ;
"RTN","BPSSCRU1",57,0)
 Q $E($$GET1^DIQ(200,+BPDUZ,.01,"E"),1,20)
"RTN","BPSSCRU1",58,0)
 ;
"RTN","BPSSCRU1",59,0)
 ;/**
"RTN","BPSSCRU1",60,0)
 ;Checks if the CLAIM for specific Transaction is CLOSED?
"RTN","BPSSCRU1",61,0)
 ;BP59 - 9002313.59
"RTN","BPSSCRU1",62,0)
CLOSED(BP59) ;*/
"RTN","BPSSCRU1",63,0)
 N BPCLAIM
"RTN","BPSSCRU1",64,0)
 I $G(BP59)="" Q 0
"RTN","BPSSCRU1",65,0)
 ;get claim ptr to #9002313.02
"RTN","BPSSCRU1",66,0)
 S BPCLAIM=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSSCRU1",67,0)
 I 'BPCLAIM Q 0
"RTN","BPSSCRU1",68,0)
 ; get closed status
"RTN","BPSSCRU1",69,0)
 Q +$P($G(^BPSC(BPCLAIM,900)),U)=1
"RTN","BPSSCRV1")
0^31^B141217957
"RTN","BPSSCRV1",1,0)
BPSSCRV1 ;AITC/PD - ECME SCREEN CHANGE VIEW continued;1/17/2018
"RTN","BPSSCRV1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**23**;JUN 2004;Build 44
"RTN","BPSSCRV1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRV1",4,0)
 ;USER SCREEN continued
"RTN","BPSSCRV1",5,0)
 Q
"RTN","BPSSCRV1",6,0)
 ;****
"RTN","BPSSCRV1",7,0)
 ;
"RTN","BPSSCRV1",8,0)
 ; New'ing of BPS* arrays and variables handled in routine BPSSCRCV
"RTN","BPSSCRV1",9,0)
 ; 
"RTN","BPSSCRV1",10,0)
BPS201(BPARR) ; FIELD 2.01 - Eligibility Type
"RTN","BPSSCRV1",11,0)
BPS201A ;
"RTN","BPSSCRV1",12,0)
 ;
"RTN","BPSSCRV1",13,0)
 S BPS201STR=",V,T,C,A,"
"RTN","BPSSCRV1",14,0)
 S DIR(0)="FO^0:7"
"RTN","BPSSCRV1",15,0)
 S DIR("A",1)=""
"RTN","BPSSCRV1",16,0)
 S DIR("A",2)="     Select one of the following:"
"RTN","BPSSCRV1",17,0)
 S DIR("A",3)=""
"RTN","BPSSCRV1",18,0)
 S DIR("A",4)="          V         VETERAN"
"RTN","BPSSCRV1",19,0)
 S DIR("A",5)="          T         TRICARE"
"RTN","BPSSCRV1",20,0)
 S DIR("A",6)="          C         CHAMPVA"
"RTN","BPSSCRV1",21,0)
 S DIR("A",7)="          A         ALL"
"RTN","BPSSCRV1",22,0)
 S DIR("A",8)=""
"RTN","BPSSCRV1",23,0)
 S DIR("A")="Select One or Many Eligibility Types or (A)ll"
"RTN","BPSSCRV1",24,0)
 S DIR("B")="V"
"RTN","BPSSCRV1",25,0)
 I $G(BPARR(2.01))'="" S DIR("B")=BPARR(2.01)
"RTN","BPSSCRV1",26,0)
 S DIR("?",1)="Enter a single response or multiple responses separated by commas."
"RTN","BPSSCRV1",27,0)
 S DIR("?",2)=" Example:"
"RTN","BPSSCRV1",28,0)
 S DIR("?",3)="  T"
"RTN","BPSSCRV1",29,0)
 S DIR("?")="  T,C"
"RTN","BPSSCRV1",30,0)
 D ^DIR K DIR
"RTN","BPSSCRV1",31,0)
 ;
"RTN","BPSSCRV1",32,0)
 I $D(DIRUT) Q 0
"RTN","BPSSCRV1",33,0)
 ;
"RTN","BPSSCRV1",34,0)
 ; Loop through user input (returned in variable X).
"RTN","BPSSCRV1",35,0)
 ; Display warning message if any user input selection is not included
"RTN","BPSSCRV1",36,0)
 ; in the string of acceptable codes (BPS201STR) and re-prompt question.
"RTN","BPSSCRV1",37,0)
 ; Assign valid selections to BPS201 array. This array will prevent
"RTN","BPSSCRV1",38,0)
 ; duplicate entries from being saved to the user's profile.
"RTN","BPSSCRV1",39,0)
 ;
"RTN","BPSSCRV1",40,0)
 K BPS201
"RTN","BPSSCRV1",41,0)
 S X=$TR(X,"vtca","VTCA")
"RTN","BPSSCRV1",42,0)
 S X=$TR(X," ","")
"RTN","BPSSCRV1",43,0)
 S BPSERR=0
"RTN","BPSSCRV1",44,0)
 F BPSX=1:1:$L(X,",") D
"RTN","BPSSCRV1",45,0)
 . S BPSSEL=$P(X,",",BPSX)
"RTN","BPSSCRV1",46,0)
 . I BPS201STR'[(","_BPSSEL_",") W !," ",BPSSEL," is not a valid entry." S BPSERR=1 Q
"RTN","BPSSCRV1",47,0)
 . S BPS201(BPSSEL)=""
"RTN","BPSSCRV1",48,0)
 ; 
"RTN","BPSSCRV1",49,0)
 I $G(BPSERR)=1 G BPS201A
"RTN","BPSSCRV1",50,0)
 ; 
"RTN","BPSSCRV1",51,0)
 ; If user included (A)ll as a selection, set profile setting to A.
"RTN","BPSSCRV1",52,0)
 ;
"RTN","BPSSCRV1",53,0)
 I $D(BPS201("A")) S BPARR(2.01)="A"
"RTN","BPSSCRV1",54,0)
 E  D  ; User did not enter "A".
"RTN","BPSSCRV1",55,0)
 . ;
"RTN","BPSSCRV1",56,0)
 . ; At this point user selections are valid and do not include "A".
"RTN","BPSSCRV1",57,0)
 . ; Loop through valid user selections. Set selections into a
"RTN","BPSSCRV1",58,0)
 . ; comma delimited string before assigning to BPARR array.
"RTN","BPSSCRV1",59,0)
 . ;
"RTN","BPSSCRV1",60,0)
 . S BPSSEL=""
"RTN","BPSSCRV1",61,0)
 . W !,?2,"Selected:"
"RTN","BPSSCRV1",62,0)
 . F  S BPSSEL=$O(BPS201(BPSSEL)) Q:BPSSEL=""  D
"RTN","BPSSCRV1",63,0)
 . . S BPS201=$G(BPS201)_BPSSEL_","
"RTN","BPSSCRV1",64,0)
 . . I BPSSEL="C" W !,?10,"CHAMPVA"
"RTN","BPSSCRV1",65,0)
 . . I BPSSEL="T" W !,?10,"TRICARE"
"RTN","BPSSCRV1",66,0)
 . . I BPSSEL="V" W !,?10,"VETERAN"
"RTN","BPSSCRV1",67,0)
 . S BPS201=$E(BPS201,1,($L(BPS201)-1))
"RTN","BPSSCRV1",68,0)
 . S BPARR(2.01)=BPS201
"RTN","BPSSCRV1",69,0)
 ;
"RTN","BPSSCRV1",70,0)
 Q 1
"RTN","BPSSCRV1",71,0)
 ;
"RTN","BPSSCRV1",72,0)
 ; ^^^^^^^^^^ End of BPS201 Logic ^^^^^^^^^^
"RTN","BPSSCRV1",73,0)
 ;
"RTN","BPSSCRV1",74,0)
 ; ********** Start of BPS101 / BPS116 Logic **********
"RTN","BPSSCRV1",75,0)
 ;
"RTN","BPSSCRV1",76,0)
 ; User input will be temporarily stored in BPS116AR for display to user 
"RTN","BPSSCRV1",77,0)
 ; of selected USERS while in CV Action.
"RTN","BPSSCRV1",78,0)
 ; 
"RTN","BPSSCRV1",79,0)
 ; If U is selected, at least one USER must be selected. If not, selection 
"RTN","BPSSCRV1",80,0)
 ; will default to (A)ll and the current question will be re-prompted.
"RTN","BPSSCRV1",81,0)
 ; 
"RTN","BPSSCRV1",82,0)
 ; Upon completion of USERs entry, values will be placed into a string 
"RTN","BPSSCRV1",83,0)
 ; delimited by semicolons. e.g. BPARR(1.16)=";12345;56789;"
"RTN","BPSSCRV1",84,0)
 ; 
"RTN","BPSSCRV1",85,0)
 ; BPS116AR = array containing USER information
"RTN","BPSSCRV1",86,0)
 ; BPS116AR(BPS116)=""    BPS116 = IEN from New Person File #200
"RTN","BPSSCRV1",87,0)
 ; BPS116AR("B",BPS116NM) BPS116NM = User Name - Index used to display 
"RTN","BPSSCRV1",88,0)
 ; selected USERs in alphabetical order while in CV Action.
"RTN","BPSSCRV1",89,0)
 ;
"RTN","BPSSCRV1",90,0)
BPS101(BPARR) ; Fields 1.01 and 1.16 - User(s)
"RTN","BPSSCRV1",91,0)
BPS101A ;
"RTN","BPSSCRV1",92,0)
 ;
"RTN","BPSSCRV1",93,0)
 N BPSI
"RTN","BPSSCRV1",94,0)
 ;
"RTN","BPSSCRV1",95,0)
 S BPINP=$$EDITFLD^BPSSCRCV(1.01,+BPDUZ7,"S^U:USER;A:ALL","Display One or Many ECME (U)sers or (A)LL","ALL",.BPARR)
"RTN","BPSSCRV1",96,0)
 I BPINP=-1 Q 0
"RTN","BPSSCRV1",97,0)
 ;
"RTN","BPSSCRV1",98,0)
 S BPSERR=0
"RTN","BPSSCRV1",99,0)
 ;
"RTN","BPSSCRV1",100,0)
 ; If user selection is U, assign existing entry(s) into BPS116AR array.
"RTN","BPSSCRV1",101,0)
 ;
"RTN","BPSSCRV1",102,0)
 I $P(BPINP,U,2)="U" D
"RTN","BPSSCRV1",103,0)
 . S BPS116=$G(BPARR(1.16))
"RTN","BPSSCRV1",104,0)
 . I BPS116'="" D
"RTN","BPSSCRV1",105,0)
 . . S BPSCNT=$L(BPS116,";")
"RTN","BPSSCRV1",106,0)
 . . I BPSCNT=1 D
"RTN","BPSSCRV1",107,0)
 . . . S BPS116NM=$$GET1^DIQ(200,BPS116,.01)
"RTN","BPSSCRV1",108,0)
 . . . I $G(BPS116NM)'="" S BPS116AR(BPS116)="",BPS116AR("B",BPS116NM)=""
"RTN","BPSSCRV1",109,0)
 . . I +BPSCNT>2 D
"RTN","BPSSCRV1",110,0)
 . . . F BPSI=2:1:BPSCNT-1 D
"RTN","BPSSCRV1",111,0)
 . . . . S BPS116X=$P(BPS116,";",BPSI),BPS116NM=$$GET1^DIQ(200,BPS116X,.01)
"RTN","BPSSCRV1",112,0)
 . . . . I $G(BPS116NM)'="" S BPS116AR(BPS116X)="",BPS116AR("B",BPS116NM)=""
"RTN","BPSSCRV1",113,0)
 . ;
"RTN","BPSSCRV1",114,0)
 . ; Display existing entry(s) to user.
"RTN","BPSSCRV1",115,0)
 . ;
"RTN","BPSSCRV1",116,0)
 . I $D(BPS116AR) D
"RTN","BPSSCRV1",117,0)
 . . W !,?2,"Selected:"
"RTN","BPSSCRV1",118,0)
 . . S BPS116NM="" F  S BPS116NM=$O(BPS116AR("B",BPS116NM)) Q:BPS116NM=""  W !,?10,BPS116NM
"RTN","BPSSCRV1",119,0)
 . ;
"RTN","BPSSCRV1",120,0)
 . W !!,"Enter a user to select."
"RTN","BPSSCRV1",121,0)
 . W !,"Once all users are selected, hit enter without making a selection.",!
"RTN","BPSSCRV1",122,0)
 . ;
"RTN","BPSSCRV1",123,0)
 . S BPS116="" F  D  Q:BPS116=-1
"RTN","BPSSCRV1",124,0)
 . . S DIR0="P^VA(200,"
"RTN","BPSSCRV1",125,0)
 . . S PRMTMSG="Select User"
"RTN","BPSSCRV1",126,0)
 . . S DFLTVAL=""
"RTN","BPSSCRV1",127,0)
 . . S BPS116=$$PROMPT^BPSSCRCV(DIR0,PRMTMSG,DFLTVAL)
"RTN","BPSSCRV1",128,0)
 . . ;
"RTN","BPSSCRV1",129,0)
 . . ; Exit 'Select User' loop if user entered nil.
"RTN","BPSSCRV1",130,0)
 . . ; 
"RTN","BPSSCRV1",131,0)
 . . I BPS116=-1 Q
"RTN","BPSSCRV1",132,0)
 . . ; 
"RTN","BPSSCRV1",133,0)
 . . S BPS116NM=$$GET1^DIQ(200,BPS116,.01)
"RTN","BPSSCRV1",134,0)
 . . ;
"RTN","BPSSCRV1",135,0)
 . . ; If entry exists in BPS116AR array, prompt user to delete from list.
"RTN","BPSSCRV1",136,0)
 . . ; 
"RTN","BPSSCRV1",137,0)
 . . I $D(BPS116AR(BPS116)) D
"RTN","BPSSCRV1",138,0)
 . . . S DIR(0)="S^Y:YES;N:NO"
"RTN","BPSSCRV1",139,0)
 . . . S DIR("A")="Delete "_BPS116NM_" from your list?"
"RTN","BPSSCRV1",140,0)
 . . . S DIR("B")="NO"
"RTN","BPSSCRV1",141,0)
 . . . D ^DIR
"RTN","BPSSCRV1",142,0)
 . . . I Y="Y" K BPS116AR(BPS116),BPS116AR("B",BPS116NM)
"RTN","BPSSCRV1",143,0)
 . . . ; 
"RTN","BPSSCRV1",144,0)
 . . E  D
"RTN","BPSSCRV1",145,0)
 . . . ; 
"RTN","BPSSCRV1",146,0)
 . . . ; Set new entry into BPS116AR array.
"RTN","BPSSCRV1",147,0)
 . . . ;
"RTN","BPSSCRV1",148,0)
 . . . I $G(BPS116NM)'="" S BPS116AR(BPS116)="",BPS116AR("B",BPS116NM)=""
"RTN","BPSSCRV1",149,0)
 . . ;
"RTN","BPSSCRV1",150,0)
 . . ; Display existing entry(s) to user. 
"RTN","BPSSCRV1",151,0)
 . . ;
"RTN","BPSSCRV1",152,0)
 . . I $D(BPS116AR) D
"RTN","BPSSCRV1",153,0)
 . . . W !,?2,"Selected:"
"RTN","BPSSCRV1",154,0)
 . . . S BPS116NM="" F  S BPS116NM=$O(BPS116AR("B",BPS116NM)) Q:BPS116NM=""  W !,?10,BPS116NM
"RTN","BPSSCRV1",155,0)
 . ;
"RTN","BPSSCRV1",156,0)
 . ; If user selected (U)ser but has not selected any users,
"RTN","BPSSCRV1",157,0)
 . ; set profile setting to ALL and set BPSERR flag to re-prompt question.
"RTN","BPSSCRV1",158,0)
 .; 
"RTN","BPSSCRV1",159,0)
 . I '$D(BPS116AR) S BPARR(1.01)="A",BPARR(1.16)="" S BPSERR=1 Q
"RTN","BPSSCRV1",160,0)
 . ;
"RTN","BPSSCRV1",161,0)
 . ; Loop through selected users, setting selected users into 
"RTN","BPSSCRV1",162,0)
 . ; BPARR array - delimited by semi-colon.
"RTN","BPSSCRV1",163,0)
 . ; 
"RTN","BPSSCRV1",164,0)
 . S BPARR(1.16)=";"
"RTN","BPSSCRV1",165,0)
 . S BPS116=0 F  S BPS116=$O(BPS116AR(BPS116)) Q:+BPS116=0  S BPARR(1.16)=BPARR(1.16)_BPS116_";"
"RTN","BPSSCRV1",166,0)
 E  D  ; User selected ALL
"RTN","BPSSCRV1",167,0)
 . S BPARR(1.01)="A"
"RTN","BPSSCRV1",168,0)
 . S BPARR(1.16)=""
"RTN","BPSSCRV1",169,0)
 ;
"RTN","BPSSCRV1",170,0)
 ; If BPSERR flag is 1, re-prompt question.
"RTN","BPSSCRV1",171,0)
 ; 
"RTN","BPSSCRV1",172,0)
 I $G(BPSERR)=1 G BPS101A
"RTN","BPSSCRV1",173,0)
 ;
"RTN","BPSSCRV1",174,0)
 Q 1
"RTN","BPSSCRV1",175,0)
 ;
"RTN","BPSSCRV1",176,0)
 ; ^^^^^^^^^^ End of BPS101 / BPS116 Logic ^^^^^^^^^^
"RTN","BPSSCRV1",177,0)
 ;
"RTN","BPSSCRV1",178,0)
 ; ********** Start of BPS102 / BPS117 Logic **********
"RTN","BPSSCRV1",179,0)
 ;
"RTN","BPSSCRV1",180,0)
 ; User input will be temporarily stored in BPS117AR for display to user 
"RTN","BPSSCRV1",181,0)
 ; of selected PATIENTS while in CV Action.
"RTN","BPSSCRV1",182,0)
 ; 
"RTN","BPSSCRV1",183,0)
 ; If P is selected, at least one PATIENT must be selected. If not, selection 
"RTN","BPSSCRV1",184,0)
 ; will default to (A)ll and the current question will be re-prompted.
"RTN","BPSSCRV1",185,0)
 ; 
"RTN","BPSSCRV1",186,0)
 ; Upon completion of PATIENTs entry, values will be placed into a string 
"RTN","BPSSCRV1",187,0)
 ; delimited by semicolons. e.g. BPARR(1.17)=";12345;56789;"
"RTN","BPSSCRV1",188,0)
 ; 
"RTN","BPSSCRV1",189,0)
 ; BPS117AR = array containing PATIENT information
"RTN","BPSSCRV1",190,0)
 ; BPS117AR(BPS117)=""    BPS117 = IEN from Patient File ^DPT
"RTN","BPSSCRV1",191,0)
 ; BPS117AR("B",BPS117M) BPS117NM = Patient Name - Index used to display 
"RTN","BPSSCRV1",192,0)
 ; selected PATIENTs in alphabetical order while in CV Action. 
"RTN","BPSSCRV1",193,0)
 ;
"RTN","BPSSCRV1",194,0)
BPS102(BPARR) ; Fields 1.02 and 1.17 - Patient(s)
"RTN","BPSSCRV1",195,0)
BPS102A ;
"RTN","BPSSCRV1",196,0)
 ;
"RTN","BPSSCRV1",197,0)
 N BPSI
"RTN","BPSSCRV1",198,0)
 ;
"RTN","BPSSCRV1",199,0)
 S BPINP=$$EDITFLD^BPSSCRCV(1.02,+BPDUZ7,"S^P:PATIENT;A:ALL","Display One or Many (P)atients or (A)LL","ALL",.BPARR)
"RTN","BPSSCRV1",200,0)
 I BPINP=-1 Q 0
"RTN","BPSSCRV1",201,0)
 ;
"RTN","BPSSCRV1",202,0)
 S BPSERR=0
"RTN","BPSSCRV1",203,0)
 ;
"RTN","BPSSCRV1",204,0)
 ; If user selection is P, assign existing entry(s) into BPS117AR array.
"RTN","BPSSCRV1",205,0)
 ;
"RTN","BPSSCRV1",206,0)
 I $P(BPINP,U,2)="P" D
"RTN","BPSSCRV1",207,0)
 . S BPS117=$G(BPARR(1.17))
"RTN","BPSSCRV1",208,0)
 . I BPS117'="" D
"RTN","BPSSCRV1",209,0)
 . . S BPSCNT=$L(BPS117,";")
"RTN","BPSSCRV1",210,0)
 . . I BPSCNT=1 D
"RTN","BPSSCRV1",211,0)
 . . . S BPS117NM=$$GET1^DIQ(2,BPS117,.01)
"RTN","BPSSCRV1",212,0)
 . . . I $G(BPS117NM)'="" S BPS117AR(BPS117)="",BPS117AR("B",BPS117NM)=""
"RTN","BPSSCRV1",213,0)
 . . I +BPSCNT>2 D
"RTN","BPSSCRV1",214,0)
 . . . F BPSI=2:1:BPSCNT-1 D
"RTN","BPSSCRV1",215,0)
 . . . . S BPS117X=$P(BPS117,";",BPSI),BPS117NM=$$GET1^DIQ(2,BPS117X,.01)
"RTN","BPSSCRV1",216,0)
 . . . . I $G(BPS117NM)'="" S BPS117AR(BPS117X)="",BPS117AR("B",BPS117NM)=""
"RTN","BPSSCRV1",217,0)
 . ;
"RTN","BPSSCRV1",218,0)
 . ; Display existing entry(s) to user.
"RTN","BPSSCRV1",219,0)
 . ; 
"RTN","BPSSCRV1",220,0)
 . I $D(BPS117AR) D
"RTN","BPSSCRV1",221,0)
 . . W !,?2,"Selected:"
"RTN","BPSSCRV1",222,0)
 . . S BPS117NM="" F  S BPS117NM=$O(BPS117AR("B",BPS117NM)) Q:BPS117NM=""  W !,?10,BPS117NM
"RTN","BPSSCRV1",223,0)
 . ;
"RTN","BPSSCRV1",224,0)
 . W !!,"Enter a patient to select."
"RTN","BPSSCRV1",225,0)
 . W !,"Once all patients are selected, hit enter without making a selection.",!
"RTN","BPSSCRV1",226,0)
 . ;
"RTN","BPSSCRV1",227,0)
 . S BPS117="" F  D  Q:BPS117=-1
"RTN","BPSSCRV1",228,0)
 . . S DIR0="P^DPT("
"RTN","BPSSCRV1",229,0)
 . . S PRMTMSG="Select Patient"
"RTN","BPSSCRV1",230,0)
 . . S DFLTVAL=""
"RTN","BPSSCRV1",231,0)
 . . S BPS117=$$PROMPT^BPSSCRCV(DIR0,PRMTMSG,DFLTVAL)
"RTN","BPSSCRV1",232,0)
 . . ;
"RTN","BPSSCRV1",233,0)
 . . ; Exit 'Select Patient' loop if user entered nil.
"RTN","BPSSCRV1",234,0)
 . . ; 
"RTN","BPSSCRV1",235,0)
 . . I BPS117=-1 Q
"RTN","BPSSCRV1",236,0)
 . . ; 
"RTN","BPSSCRV1",237,0)
 . . S BPS117NM=$$GET1^DIQ(2,BPS117,.01)
"RTN","BPSSCRV1",238,0)
 . . ;
"RTN","BPSSCRV1",239,0)
 . . ; If entry exists in BPS117AR array, prompt user to delete from list.
"RTN","BPSSCRV1",240,0)
 . . ; 
"RTN","BPSSCRV1",241,0)
 . . I $D(BPS117AR(BPS117)) D
"RTN","BPSSCRV1",242,0)
 . . . S DIR(0)="S^Y:YES;N:NO"
"RTN","BPSSCRV1",243,0)
 . . . S DIR("A")="Delete "_BPS117NM_" from your list?"
"RTN","BPSSCRV1",244,0)
 . . . S DIR("B")="NO"
"RTN","BPSSCRV1",245,0)
 . . . D ^DIR
"RTN","BPSSCRV1",246,0)
 . . . I Y="Y" K BPS117AR(BPS117),BPS117AR("B",BPS117NM)
"RTN","BPSSCRV1",247,0)
 . . . ; 
"RTN","BPSSCRV1",248,0)
 . . E  D
"RTN","BPSSCRV1",249,0)
 . . . ; 
"RTN","BPSSCRV1",250,0)
 . . . ; Set new entry into BPS117AR array.
"RTN","BPSSCRV1",251,0)
 . . . ; 
"RTN","BPSSCRV1",252,0)
 . . . I $G(BPS117NM)'="" S BPS117AR(BPS117)="",BPS117AR("B",BPS117NM)=""
"RTN","BPSSCRV1",253,0)
 . . ;
"RTN","BPSSCRV1",254,0)
 . . ; Display existing entry(s) to user.
"RTN","BPSSCRV1",255,0)
 . . ; 
"RTN","BPSSCRV1",256,0)
 . . I $D(BPS117AR) D
"RTN","BPSSCRV1",257,0)
 . . . W !,?2,"Selected:"
"RTN","BPSSCRV1",258,0)
 . . . S BPS117NM="" F  S BPS117NM=$O(BPS117AR("B",BPS117NM)) Q:BPS117NM=""  W !,?10,BPS117NM
"RTN","BPSSCRV1",259,0)
 . ;
"RTN","BPSSCRV1",260,0)
 . ; If user selected (P)atient but has not selected any patients,
"RTN","BPSSCRV1",261,0)
 . ; set profile setting to ALL and re-prompt question.
"RTN","BPSSCRV1",262,0)
 . ; 
"RTN","BPSSCRV1",263,0)
 . I '$D(BPS117AR) S BPARR(1.02)="A",BPARR(1.17)="" S BPSERR=1 Q
"RTN","BPSSCRV1",264,0)
 . ;
"RTN","BPSSCRV1",265,0)
 . ; Loop through selected patients, setting selected patients into
"RTN","BPSSCRV1",266,0)
 . ; BPARR array - delimited by semi-colon.
"RTN","BPSSCRV1",267,0)
 . ;
"RTN","BPSSCRV1",268,0)
 . S BPARR(1.17)=";"
"RTN","BPSSCRV1",269,0)
 . S BPS117=0 F  S BPS117=$O(BPS117AR(BPS117)) Q:+BPS117=0  S BPARR(1.17)=BPARR(1.17)_BPS117_";"
"RTN","BPSSCRV1",270,0)
 E  D  ; User selected ALL
"RTN","BPSSCRV1",271,0)
 . S BPARR(1.02)="A"
"RTN","BPSSCRV1",272,0)
 . S BPARR(1.17)=""
"RTN","BPSSCRV1",273,0)
 ;
"RTN","BPSSCRV1",274,0)
 ; If BPSERR flag is 1, re-prompt question.
"RTN","BPSSCRV1",275,0)
 ; 
"RTN","BPSSCRV1",276,0)
 I $G(BPSERR)=1 G BPS102A
"RTN","BPSSCRV1",277,0)
 ;
"RTN","BPSSCRV1",278,0)
 Q 1
"RTN","BPSSCRV1",279,0)
 ;
"RTN","BPSSCRV1",280,0)
 ; ^^^^^^^^^^ End of BPS102 / BPS117 Logic ^^^^^^^^^^
"RTN","BPSSCRV1",281,0)
 ;
"RTN","BPSSCRV1",282,0)
 ; ********** Start of BPS103 / BPS118 Logic **********
"RTN","BPSSCRV1",283,0)
 ;
"RTN","BPSSCRV1",284,0)
 ; User input will be temporarily stored in BPS118AR for display to user 
"RTN","BPSSCRV1",285,0)
 ; of selected RXs while in CV Action.
"RTN","BPSSCRV1",286,0)
 ; 
"RTN","BPSSCRV1",287,0)
 ; If R is selected, at least one RX must be selected. If not, selection 
"RTN","BPSSCRV1",288,0)
 ; will default to (A)ll and the current question will be re-prompted.
"RTN","BPSSCRV1",289,0)
 ; 
"RTN","BPSSCRV1",290,0)
 ; Upon completion of RXs entry, values will be placed into a string 
"RTN","BPSSCRV1",291,0)
 ; delimited by semicolons. e.g. BPARR(1.18)=";12345;56789;"
"RTN","BPSSCRV1",292,0)
 ; 
"RTN","BPSSCRV1",293,0)
 ; BPS118AR = array containing RX information
"RTN","BPSSCRV1",294,0)
 ; BPS118AR(BPS118)=""  BPS118 = IEN from Prescription File #52
"RTN","BPSSCRV1",295,0)
 ; BPS118AR("B",BPSRXN) BPSRXN = RX Number - Index used to display 
"RTN","BPSSCRV1",296,0)
 ; selected RXs in numerical order while in CV Action.
"RTN","BPSSCRV1",297,0)
 ;   
"RTN","BPSSCRV1",298,0)
BPS103(BPARR) ; Fields 1.03 and 1.18 - Rx(s)
"RTN","BPSSCRV1",299,0)
BPS103A ;
"RTN","BPSSCRV1",300,0)
 ;
"RTN","BPSSCRV1",301,0)
 N BPSI
"RTN","BPSSCRV1",302,0)
 ;
"RTN","BPSSCRV1",303,0)
 S BPINP=$$EDITFLD^BPSSCRCV(1.03,+BPDUZ7,"S^R:RX;A:ALL","Display One or Many (R)x or (A)LL","ALL",.BPARR)
"RTN","BPSSCRV1",304,0)
 I BPINP=-1 Q 0
"RTN","BPSSCRV1",305,0)
 ;
"RTN","BPSSCRV1",306,0)
 S BPSERR=0
"RTN","BPSSCRV1",307,0)
 ; 
"RTN","BPSSCRV1",308,0)
 ; If user selection is R, assign existing entry(s) into BPS118AR array.
"RTN","BPSSCRV1",309,0)
 ;
"RTN","BPSSCRV1",310,0)
 I $P(BPINP,U,2)="R" D
"RTN","BPSSCRV1",311,0)
 . S BPS118=$G(BPARR(1.18))
"RTN","BPSSCRV1",312,0)
 . I BPS118'="" D
"RTN","BPSSCRV1",313,0)
 . . S BPSCNT=$L(BPS118,";")
"RTN","BPSSCRV1",314,0)
 . . I BPSCNT=1 D
"RTN","BPSSCRV1",315,0)
 . . . S DIC=52
"RTN","BPSSCRV1",316,0)
 . . . S DR=".01;6"
"RTN","BPSSCRV1",317,0)
 . . . S DA=BPS118
"RTN","BPSSCRV1",318,0)
 . . . S DIQ="BPSRXD"
"RTN","BPSSCRV1",319,0)
 . . . S DIQ(0)="E"
"RTN","BPSSCRV1",320,0)
 . . . D DIQ^PSODI(52,DIC,DR,DA,.DIQ)   ; ICR 4858
"RTN","BPSSCRV1",321,0)
 . . . ; 
"RTN","BPSSCRV1",322,0)
 . . . S BPSRXN=$G(BPSRXD(52,DA,.01,"E"))
"RTN","BPSSCRV1",323,0)
 . . . S BPSDRUG=$G(BPSRXD(52,DA,6,"E"))
"RTN","BPSSCRV1",324,0)
 . . . ; 
"RTN","BPSSCRV1",325,0)
 . . . S BPS118AR(BPS118)="",BPS118AR("B",BPSRXN)=BPSDRUG
"RTN","BPSSCRV1",326,0)
 . . . ; 
"RTN","BPSSCRV1",327,0)
 . . I +BPSCNT>2 D
"RTN","BPSSCRV1",328,0)
 . . . F BPSI=2:1:BPSCNT-1 D
"RTN","BPSSCRV1",329,0)
 . . . . S BPS118X=$P(BPS118,";",BPSI)
"RTN","BPSSCRV1",330,0)
 . . . . S DIC=52
"RTN","BPSSCRV1",331,0)
 . . . . S DR=".01;6"
"RTN","BPSSCRV1",332,0)
 . . . . S DA=BPS118X
"RTN","BPSSCRV1",333,0)
 . . . . S DIQ="BPSRXD"
"RTN","BPSSCRV1",334,0)
 . . . . S DIQ(0)="E"
"RTN","BPSSCRV1",335,0)
 . . . . D DIQ^PSODI(52,DIC,DR,DA,.DIQ)   ; ICR 4858
"RTN","BPSSCRV1",336,0)
 . . . . ;
"RTN","BPSSCRV1",337,0)
 . . . . S BPSRXN=$G(BPSRXD(52,DA,.01,"E"))
"RTN","BPSSCRV1",338,0)
 . . . . S BPSDRUG=$G(BPSRXD(52,DA,6,"E"))
"RTN","BPSSCRV1",339,0)
 . . . . ; 
"RTN","BPSSCRV1",340,0)
 . . . . S BPS118AR(BPS118X)="",BPS118AR("B",BPSRXN)=BPSDRUG
"RTN","BPSSCRV1",341,0)
 . ;
"RTN","BPSSCRV1",342,0)
 . ; Display existing entry(s) to user.
"RTN","BPSSCRV1",343,0)
 . ; 
"RTN","BPSSCRV1",344,0)
 . I $D(BPS118AR) D
"RTN","BPSSCRV1",345,0)
 . . W !,?2,"Selected:"
"RTN","BPSSCRV1",346,0)
 . . S BPSRXN="" F  S BPSRXN=$O(BPS118AR("B",BPSRXN)) Q:BPSRXN=""  W !,?10,BPSRXN,?30,BPS118AR("B",BPSRXN)
"RTN","BPSSCRV1",347,0)
 . ;
"RTN","BPSSCRV1",348,0)
 . W !!,"Enter a prescription to select."
"RTN","BPSSCRV1",349,0)
 . W !,"Once all prescriptions are selected, hit enter without making a selection.",!
"RTN","BPSSCRV1",350,0)
 . ;
"RTN","BPSSCRV1",351,0)
 . S BPS118="" F  D  Q:BPS118=-1
"RTN","BPSSCRV1",352,0)
 . . S PRMTMSG="Select RX"
"RTN","BPSSCRV1",353,0)
 . . S DFLTVAL=""
"RTN","BPSSCRV1",354,0)
 . . S BPS118=$$PROMPTRX^BPSUTIL1(PRMTMSG,DFLTVAL)
"RTN","BPSSCRV1",355,0)
 . . ; 
"RTN","BPSSCRV1",356,0)
 . . ; Exit 'Select RX' loop if user entered nil.
"RTN","BPSSCRV1",357,0)
 . . ;
"RTN","BPSSCRV1",358,0)
 . . I BPS118=-1 Q
"RTN","BPSSCRV1",359,0)
 . . ;
"RTN","BPSSCRV1",360,0)
 . . S DIC=52
"RTN","BPSSCRV1",361,0)
 . . S DR=".01;6"
"RTN","BPSSCRV1",362,0)
 . . S DA=BPS118
"RTN","BPSSCRV1",363,0)
 . . S DIQ="BPSRXD"
"RTN","BPSSCRV1",364,0)
 . . S DIQ(0)="E"
"RTN","BPSSCRV1",365,0)
 . . D DIQ^PSODI(52,DIC,DR,DA,.DIQ)   ; ICR 4858
"RTN","BPSSCRV1",366,0)
 . . ; 
"RTN","BPSSCRV1",367,0)
 . . S BPSRXN=$G(BPSRXD(52,DA,.01,"E"))
"RTN","BPSSCRV1",368,0)
 . . S BPSDRUG=$G(BPSRXD(52,DA,6,"E"))
"RTN","BPSSCRV1",369,0)
 . .
"RTN","BPSSCRV1",370,0)
 . . ; 
"RTN","BPSSCRV1",371,0)
 . . ; If entry exists in BPS118AR array, prompt user to delete from list.
"RTN","BPSSCRV1",372,0)
 . . ; 
"RTN","BPSSCRV1",373,0)
 . . I $D(BPS118AR(BPS118)) D
"RTN","BPSSCRV1",374,0)
 . . . S DIR(0)="S^Y:YES;N:NO"
"RTN","BPSSCRV1",375,0)
 . . . S DIR("A")="Delete "_BPSRXN_" from your list?"
"RTN","BPSSCRV1",376,0)
 . . . S DIR("B")="NO"
"RTN","BPSSCRV1",377,0)
 . . . D ^DIR
"RTN","BPSSCRV1",378,0)
 . . . I Y="Y" K BPS118AR(BPS118),BPS118AR("B",BPSRXN)
"RTN","BPSSCRV1",379,0)
 . . . ; 
"RTN","BPSSCRV1",380,0)
 . . E  D
"RTN","BPSSCRV1",381,0)
 . . . ; Set new entry into BPS118AR array.
"RTN","BPSSCRV1",382,0)
 . . . ; 
"RTN","BPSSCRV1",383,0)
 . . . S BPS118AR(BPS118)="",BPS118AR("B",BPSRXN)=BPSDRUG
"RTN","BPSSCRV1",384,0)
 . . ;
"RTN","BPSSCRV1",385,0)
 . . ; Display existing entry(s) to user.
"RTN","BPSSCRV1",386,0)
 . . ;
"RTN","BPSSCRV1",387,0)
 . . I $D(BPS118AR) D
"RTN","BPSSCRV1",388,0)
 . . . W !,?2,"Selected:"
"RTN","BPSSCRV1",389,0)
 . . . S BPSRXN="" F  S BPSRXN=$O(BPS118AR("B",BPSRXN)) Q:BPSRXN=""  W !,?10,BPSRXN,?30,BPS118AR("B",BPSRXN)
"RTN","BPSSCRV1",390,0)
 . ;
"RTN","BPSSCRV1",391,0)
 . ; If user selected (R)x but has not selected any RXs,
"RTN","BPSSCRV1",392,0)
 . ; set profile setting to ALL and set BPSERR flag to re-prompt question.
"RTN","BPSSCRV1",393,0)
 . ; 
"RTN","BPSSCRV1",394,0)
 . I '$D(BPS118AR) S BPARR(1.03)="A",BPARR(1.18)="" S BPSERR=1 Q
"RTN","BPSSCRV1",395,0)
 . ;
"RTN","BPSSCRV1",396,0)
 . ; Loop through selected RXs, setting selected RXs into
"RTN","BPSSCRV1",397,0)
 . ; BPARR array - delimited by semi-colon.
"RTN","BPSSCRV1",398,0)
 . ; 
"RTN","BPSSCRV1",399,0)
 . S BPARR(1.18)=";"
"RTN","BPSSCRV1",400,0)
 . S BPS118=0 F  S BPS118=$O(BPS118AR(BPS118)) Q:+BPS118=0  S BPARR(1.18)=BPARR(1.18)_BPS118_";"
"RTN","BPSSCRV1",401,0)
 E  D  ; User selected ALL
"RTN","BPSSCRV1",402,0)
 . S BPARR(1.03)="A"
"RTN","BPSSCRV1",403,0)
 . S BPARR(1.18)=""
"RTN","BPSSCRV1",404,0)
 ;
"RTN","BPSSCRV1",405,0)
 ; If BPSERR flag is 1, re-prompt question.
"RTN","BPSSCRV1",406,0)
 ;
"RTN","BPSSCRV1",407,0)
 I $G(BPSERR)=1 G BPS103A
"RTN","BPSSCRV1",408,0)
 ;
"RTN","BPSSCRV1",409,0)
 Q 1
"RTN","BPSSCRV1",410,0)
 ;
"RTN","BPSSCRV1",411,0)
 ; ^^^^^^^^^^ End of BPS103 / BPS118 Logic ^^^^^^^^^^
"RTN","BPSSCRV1",412,0)
 ;
"RTN","BPSSCRV1",413,0)
 Q
"RTN","BPSSCRV2")
0^32^B90892572
"RTN","BPSSCRV2",1,0)
BPSSCRV2 ;AITC/PD - ECME SCREEN CHANGE VIEW continued;1/17/2018
"RTN","BPSSCRV2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**23**;JUN 2004;Build 44
"RTN","BPSSCRV2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRV2",4,0)
 ;USER SCREEN continued
"RTN","BPSSCRV2",5,0)
 Q
"RTN","BPSSCRV2",6,0)
 ;****
"RTN","BPSSCRV2",7,0)
 ;
"RTN","BPSSCRV2",8,0)
 ; New'ing of BPS* arrays and variables handled in routine BPSSCRCV
"RTN","BPSSCRV2",9,0)
 ;
"RTN","BPSSCRV2",10,0)
BPS106(BPARR) ; FIELD 1.06 - Rejects / Payables / Unstranded / All
"RTN","BPSSCRV2",11,0)
BPS106A ;
"RTN","BPSSCRV2",12,0)
 ; 
"RTN","BPSSCRV2",13,0)
 S BPS106STR=",R,P,U,A,"
"RTN","BPSSCRV2",14,0)
 S DIR(0)="FO^0:7"
"RTN","BPSSCRV2",15,0)
 S DIR("A",1)=""
"RTN","BPSSCRV2",16,0)
 S DIR("A",2)="     Select one of the following:"
"RTN","BPSSCRV2",17,0)
 S DIR("A",3)=""
"RTN","BPSSCRV2",18,0)
 S DIR("A",4)="          R         REJECTS"
"RTN","BPSSCRV2",19,0)
 S DIR("A",5)="          P         PAYABLES"
"RTN","BPSSCRV2",20,0)
 S DIR("A",6)="          U         UNSTRANDED"
"RTN","BPSSCRV2",21,0)
 S DIR("A",7)="          A         ALL"
"RTN","BPSSCRV2",22,0)
 S DIR("A",8)=""
"RTN","BPSSCRV2",23,0)
 S DIR("A")="Display (R)ejects or (P)ayables or (U)nstranded or (A)ll"
"RTN","BPSSCRV2",24,0)
 S DIR("B")="A"
"RTN","BPSSCRV2",25,0)
 I $G(BPARR(1.06))'="" S DIR("B")=BPARR(1.06)
"RTN","BPSSCRV2",26,0)
 S DIR("?",1)="Enter a single response or multiple responses separated by commas."
"RTN","BPSSCRV2",27,0)
 S DIR("?",2)=" Example:"
"RTN","BPSSCRV2",28,0)
 S DIR("?",3)="  P"
"RTN","BPSSCRV2",29,0)
 S DIR("?")="  P,R"
"RTN","BPSSCRV2",30,0)
 D ^DIR K DIR
"RTN","BPSSCRV2",31,0)
 ;
"RTN","BPSSCRV2",32,0)
 I $D(DIRUT) Q 0
"RTN","BPSSCRV2",33,0)
 ;
"RTN","BPSSCRV2",34,0)
 ; Loop through user input (returned in variable X).
"RTN","BPSSCRV2",35,0)
 ; Display warning message if any user input selection is not included
"RTN","BPSSCRV2",36,0)
 ; in the string of acceptable codes (BPS106STR) and re-prompt question.
"RTN","BPSSCRV2",37,0)
 ; Assign valid selections to BPS106 array. This array will prevent
"RTN","BPSSCRV2",38,0)
 ; duplicate entries from being saved to the user's profile.
"RTN","BPSSCRV2",39,0)
 ;
"RTN","BPSSCRV2",40,0)
 K BPS106
"RTN","BPSSCRV2",41,0)
 S BPSERR=0
"RTN","BPSSCRV2",42,0)
 S X=$TR(X,"rpua","RPUA")
"RTN","BPSSCRV2",43,0)
 S X=$TR(X," ","")
"RTN","BPSSCRV2",44,0)
 F BPSX=1:1:$L(X,",") D
"RTN","BPSSCRV2",45,0)
 . S BPSSEL=$P(X,",",BPSX)
"RTN","BPSSCRV2",46,0)
 . I BPS106STR'[(","_BPSSEL_",") W !," ",BPSSEL," is not a valid entry." S BPSERR=1 Q
"RTN","BPSSCRV2",47,0)
 . S BPS106(BPSSEL)=""
"RTN","BPSSCRV2",48,0)
 ;
"RTN","BPSSCRV2",49,0)
 I $G(BPSERR)=1 G BPS106A
"RTN","BPSSCRV2",50,0)
 ;
"RTN","BPSSCRV2",51,0)
 ; If user included (A)ll as a selection, set profile setting to A.
"RTN","BPSSCRV2",52,0)
 ;
"RTN","BPSSCRV2",53,0)
 I $D(BPS106("A")) S BPARR(1.06)="A"
"RTN","BPSSCRV2",54,0)
 E  D  ; User did not enter "A"
"RTN","BPSSCRV2",55,0)
 . ; 
"RTN","BPSSCRV2",56,0)
 . ; At this point user selections are valid and do not include "A".
"RTN","BPSSCRV2",57,0)
 . ; Loop through valid user selections. Set selections into a
"RTN","BPSSCRV2",58,0)
 . ; comma delimited string before assigning to BPARR array.
"RTN","BPSSCRV2",59,0)
 . ; 
"RTN","BPSSCRV2",60,0)
 . S BPSSEL=""
"RTN","BPSSCRV2",61,0)
 . W !,?2,"Selected:"
"RTN","BPSSCRV2",62,0)
 . F  S BPSSEL=$O(BPS106(BPSSEL)) Q:BPSSEL=""  D
"RTN","BPSSCRV2",63,0)
 . . S BPS106=$G(BPS106)_BPSSEL_","
"RTN","BPSSCRV2",64,0)
 . . I BPSSEL="P" W !,?10,"PAYABLES"
"RTN","BPSSCRV2",65,0)
 . . I BPSSEL="U" W !,?10,"UNSTRANDED"
"RTN","BPSSCRV2",66,0)
 . . I BPSSEL="R" W !,?10,"REJECTS"
"RTN","BPSSCRV2",67,0)
 . S BPS106=$E(BPS106,1,($L(BPS106)-1))
"RTN","BPSSCRV2",68,0)
 . S BPARR(1.06)=BPS106
"RTN","BPSSCRV2",69,0)
 ;
"RTN","BPSSCRV2",70,0)
 Q 1
"RTN","BPSSCRV2",71,0)
 ;
"RTN","BPSSCRV2",72,0)
 ; ^^^^^^^^^^ End of BPS106 Logic ^^^^^^^^^^
"RTN","BPSSCRV2",73,0)
 ;
"RTN","BPSSCRV2",74,0)
 ; ********** Start of BPS108 Logic **********
"RTN","BPSSCRV2",75,0)
 ;
"RTN","BPSSCRV2",76,0)
 ; BPS108STR = string of valid codes
"RTN","BPSSCRV2",77,0)
 ; 
"RTN","BPSSCRV2",78,0)
 ; Upon completion of prompt, values will be placed into a string delimited
"RTN","BPSSCRV2",79,0)
 ; by commas. e.g. C,M
"RTN","BPSSCRV2",80,0)
 ; 
"RTN","BPSSCRV2",81,0)
 ; If user includes (A)ll as a code, only A will be stored in BPARR
"RTN","BPSSCRV2",82,0)
 ; array. e.g. Entry of C,M,A will save as BPARR(1.08)="A"
"RTN","BPSSCRV2",83,0)
 ; 
"RTN","BPSSCRV2",84,0)
 ; User input values are temporary stored in array BPS108 to eliminate duplicate 
"RTN","BPSSCRV2",85,0)
 ; entries. e.g. Entry of C,M,C will save as BPARR(1.08)="C,M"
"RTN","BPSSCRV2",86,0)
 ;   
"RTN","BPSSCRV2",87,0)
BPS108(BPARR) ; FIELD 1.08 - CMOP / Mail / Window / All
"RTN","BPSSCRV2",88,0)
BPS108A ;
"RTN","BPSSCRV2",89,0)
 ; 
"RTN","BPSSCRV2",90,0)
 S BPS108STR=",C,M,W,A,"
"RTN","BPSSCRV2",91,0)
 S DIR(0)="FO^0:7"
"RTN","BPSSCRV2",92,0)
 S DIR("A",1)=""
"RTN","BPSSCRV2",93,0)
 S DIR("A",2)="     Select one of the following:"
"RTN","BPSSCRV2",94,0)
 S DIR("A",3)=""
"RTN","BPSSCRV2",95,0)
 S DIR("A",4)="          C         CMOP"
"RTN","BPSSCRV2",96,0)
 S DIR("A",5)="          M         MAIL"
"RTN","BPSSCRV2",97,0)
 S DIR("A",6)="          W         WINDOW"
"RTN","BPSSCRV2",98,0)
 S DIR("A",7)="          A         ALL"
"RTN","BPSSCRV2",99,0)
 S DIR("A",8)=""
"RTN","BPSSCRV2",100,0)
 S DIR("A")="Display (C)MOP or (M)ail or (W)indow or (A)ll"
"RTN","BPSSCRV2",101,0)
 S DIR("B")="A" S:$G(BPARR(1.08))'="" DIR("B")=BPARR(1.08)
"RTN","BPSSCRV2",102,0)
 S DIR("?",1)="Enter a single response or multiple responses separated by commas."
"RTN","BPSSCRV2",103,0)
 S DIR("?",2)=" Example:"
"RTN","BPSSCRV2",104,0)
 S DIR("?",3)="  C"
"RTN","BPSSCRV2",105,0)
 S DIR("?")="  C,M"
"RTN","BPSSCRV2",106,0)
 D ^DIR K DIR
"RTN","BPSSCRV2",107,0)
 ;
"RTN","BPSSCRV2",108,0)
 I $D(DIRUT) Q 0
"RTN","BPSSCRV2",109,0)
 ;
"RTN","BPSSCRV2",110,0)
 ; Loop through user input (returned in variable X).
"RTN","BPSSCRV2",111,0)
 ; Display warning message if any user input selection is not included
"RTN","BPSSCRV2",112,0)
 ; in the string of acceptable codes (BPS108STR) and re-prompt question.
"RTN","BPSSCRV2",113,0)
 ; Assign valid selections to BPS108 array. This array will prevent
"RTN","BPSSCRV2",114,0)
 ; duplicate entries from being saved to the user's profile.
"RTN","BPSSCRV2",115,0)
 ;
"RTN","BPSSCRV2",116,0)
 K BPS108
"RTN","BPSSCRV2",117,0)
 S BPSERR=""
"RTN","BPSSCRV2",118,0)
 S X=$TR(X,"cmwa","CMWA")
"RTN","BPSSCRV2",119,0)
 S X=$TR(X," ","")
"RTN","BPSSCRV2",120,0)
 F BPSX=1:1:$L(X,",") D
"RTN","BPSSCRV2",121,0)
 . S BPSSEL=$P(X,",",BPSX)
"RTN","BPSSCRV2",122,0)
 . I BPS108STR'[(","_BPSSEL_",") W !," ",BPSSEL," is not a valid entry." S BPSERR=1 Q
"RTN","BPSSCRV2",123,0)
 . S BPS108(BPSSEL)=""
"RTN","BPSSCRV2",124,0)
 ;
"RTN","BPSSCRV2",125,0)
 I $G(BPSERR)=1 G BPS108A
"RTN","BPSSCRV2",126,0)
 ;
"RTN","BPSSCRV2",127,0)
 ; If user included (A)ll as a seleection, set profile setting to A.
"RTN","BPSSCRV2",128,0)
 ;
"RTN","BPSSCRV2",129,0)
 I $D(BPS108("A")) S BPARR(1.08)="A"
"RTN","BPSSCRV2",130,0)
 E  D  ; User did not enter "A".
"RTN","BPSSCRV2",131,0)
 . ;
"RTN","BPSSCRV2",132,0)
 . ; At this point user selections are valid and do not include "A".
"RTN","BPSSCRV2",133,0)
 . ; Loop through valid user selections. Set selections into a
"RTN","BPSSCRV2",134,0)
 . ; comma delimited string before assigning to BPARR array.
"RTN","BPSSCRV2",135,0)
 . ;
"RTN","BPSSCRV2",136,0)
 . S BPSSEL=""
"RTN","BPSSCRV2",137,0)
 . W !,?2,"Selected:"
"RTN","BPSSCRV2",138,0)
 . F  S BPSSEL=$O(BPS108(BPSSEL)) Q:BPSSEL=""  D
"RTN","BPSSCRV2",139,0)
 . . S BPS108=$G(BPS108)_BPSSEL_","
"RTN","BPSSCRV2",140,0)
 . . I BPSSEL="C" W !,?10,"CMOP"
"RTN","BPSSCRV2",141,0)
 . . I BPSSEL="M" W !,?10,"MAIL"
"RTN","BPSSCRV2",142,0)
 . . I BPSSEL="W" W !,?10,"WINDOW"
"RTN","BPSSCRV2",143,0)
 . S BPS108=$E(BPS108,1,($L(BPS108)-1))
"RTN","BPSSCRV2",144,0)
 . S BPARR(1.08)=BPS108
"RTN","BPSSCRV2",145,0)
 ;
"RTN","BPSSCRV2",146,0)
 Q 1
"RTN","BPSSCRV2",147,0)
 ;
"RTN","BPSSCRV2",148,0)
 ; ^^^^^^^^^^ End of BPS108 Logic ^^^^^^^^^^
"RTN","BPSSCRV2",149,0)
 ;
"RTN","BPSSCRV2",150,0)
 ; ********** Start of BPS109 Logic **********
"RTN","BPSSCRV2",151,0)
 ;
"RTN","BPSSCRV2",152,0)
 ; BPS109STR = string of valid codes
"RTN","BPSSCRV2",153,0)
 ;
"RTN","BPSSCRV2",154,0)
 ; Upon completion of prompt, values will be placed into a string delimited
"RTN","BPSSCRV2",155,0)
 ; by commas. e.g. P,R
"RTN","BPSSCRV2",156,0)
 ;
"RTN","BPSSCRV2",157,0)
 ; If user includes (A)ll as a code, only A will be stored in BPARR
"RTN","BPSSCRV2",158,0)
 ; array. e.g. Entry of R,P,A will save as BPARR(1.09)="A"'
"RTN","BPSSCRV2",159,0)
 ;
"RTN","BPSSCRV2",160,0)
 ; User input values are temporary stored in array BPS106 to eliminate duplicate 
"RTN","BPSSCRV2",161,0)
 ; entries. e.g. Entry of R,P,R will save as BPARR(1.09)="P,R"
"RTN","BPSSCRV2",162,0)
 ;  
"RTN","BPSSCRV2",163,0)
BPS109(BPARR) ; FIELD 1.09 - Realtime / Backbills / Pro Option / Resubmission / All
"RTN","BPSSCRV2",164,0)
BPS109A ;
"RTN","BPSSCRV2",165,0)
 ;
"RTN","BPSSCRV2",166,0)
 S BPS109STR=",R,B,P,S,A,"
"RTN","BPSSCRV2",167,0)
 S DIR(0)="FO^0:7"
"RTN","BPSSCRV2",168,0)
 S DIR("A",1)=""
"RTN","BPSSCRV2",169,0)
 S DIR("A",2)="     Select one of the following:"
"RTN","BPSSCRV2",170,0)
 S DIR("A",3)=""
"RTN","BPSSCRV2",171,0)
 S DIR("A",4)="          R         REALTIME"
"RTN","BPSSCRV2",172,0)
 S DIR("A",5)="          B         BACKBILLS"
"RTN","BPSSCRV2",173,0)
 S DIR("A",6)="          P         PRO OPTION"
"RTN","BPSSCRV2",174,0)
 S DIR("A",7)="          S         RESUBMISSION"
"RTN","BPSSCRV2",175,0)
 S DIR("A",8)="          A         ALL"
"RTN","BPSSCRV2",176,0)
 S DIR("A",9)=""
"RTN","BPSSCRV2",177,0)
 S DIR("A")="Display (R)ealTime, (B)ackbills, (P)RO Option, Re(S)ubmission or (A)ll"
"RTN","BPSSCRV2",178,0)
 S DIR("B")="A"
"RTN","BPSSCRV2",179,0)
 I $G(BPARR(1.09))'="" S DIR("B")=BPARR(1.09)
"RTN","BPSSCRV2",180,0)
 S DIR("?",1)="Enter a single response or multiple responses separated by commas."
"RTN","BPSSCRV2",181,0)
 S DIR("?",2)=" Example:"
"RTN","BPSSCRV2",182,0)
 S DIR("?",3)="  B"
"RTN","BPSSCRV2",183,0)
 S DIR("?")="  B,P"
"RTN","BPSSCRV2",184,0)
 D ^DIR K DIR
"RTN","BPSSCRV2",185,0)
 ;
"RTN","BPSSCRV2",186,0)
 I $D(DIRUT) Q 0
"RTN","BPSSCRV2",187,0)
 ;
"RTN","BPSSCRV2",188,0)
 ; Loop through user input (returned in variable X).
"RTN","BPSSCRV2",189,0)
 ; Display warning message if any user input selection is not included
"RTN","BPSSCRV2",190,0)
 ; in the string of acceptable codes (BPS109STR) and re-prompt question.
"RTN","BPSSCRV2",191,0)
 ; Assign valid selections to BPS109 array. This array will prevent
"RTN","BPSSCRV2",192,0)
 ; duplicate entries from being saved to the user's profile.
"RTN","BPSSCRV2",193,0)
 ;
"RTN","BPSSCRV2",194,0)
 K BPS109
"RTN","BPSSCRV2",195,0)
 S X=$TR(X,"rbpsa","RBPSA")
"RTN","BPSSCRV2",196,0)
 S X=$TR(X," ","")
"RTN","BPSSCRV2",197,0)
 S BPSERR=""
"RTN","BPSSCRV2",198,0)
 F BPSX=1:1:$L(X,",") D
"RTN","BPSSCRV2",199,0)
 . S BPSSEL=$P(X,",",BPSX)
"RTN","BPSSCRV2",200,0)
 . I BPS109STR'[(","_BPSSEL_",") W !," ",BPSSEL," is not a valid entry." S BPSERR=1 Q
"RTN","BPSSCRV2",201,0)
 . S BPS109(BPSSEL)=""
"RTN","BPSSCRV2",202,0)
 ;
"RTN","BPSSCRV2",203,0)
 I $G(BPSERR)=1 G BPS109A
"RTN","BPSSCRV2",204,0)
 ;
"RTN","BPSSCRV2",205,0)
 ; If user included (A)ll as a selection, set profile setting to A.
"RTN","BPSSCRV2",206,0)
 ;
"RTN","BPSSCRV2",207,0)
 I $D(BPS109("A")) S BPARR(1.09)="A"
"RTN","BPSSCRV2",208,0)
 E  D  ; User did not enter "A".
"RTN","BPSSCRV2",209,0)
 . ;
"RTN","BPSSCRV2",210,0)
 . ; At this point user selections are valid and do not include "A".
"RTN","BPSSCRV2",211,0)
 . ; Loop through valid user selections. Set selections into a
"RTN","BPSSCRV2",212,0)
 . ; comma delimited string before assigning to BPARR array.
"RTN","BPSSCRV2",213,0)
 . ;
"RTN","BPSSCRV2",214,0)
 . S BPSSEL=""
"RTN","BPSSCRV2",215,0)
 . W !,?2,"Selected:"
"RTN","BPSSCRV2",216,0)
 . F  S BPSSEL=$O(BPS109(BPSSEL)) Q:BPSSEL=""  D
"RTN","BPSSCRV2",217,0)
 . . S BPS109=$G(BPS109)_BPSSEL_","
"RTN","BPSSCRV2",218,0)
 . . I BPSSEL="B" W !,?10,"BACKBILLS"
"RTN","BPSSCRV2",219,0)
 . . I BPSSEL="P" W !,?10,"PRO OPTION"
"RTN","BPSSCRV2",220,0)
 . . I BPSSEL="R" W !,?10,"REALTIME"
"RTN","BPSSCRV2",221,0)
 . . I BPSSEL="S" W !,?10,"RESUBMISSION"
"RTN","BPSSCRV2",222,0)
 . S BPS109=$E(BPS109,1,($L(BPS109)-1))
"RTN","BPSSCRV2",223,0)
 . S BPARR(1.09)=BPS109
"RTN","BPSSCRV2",224,0)
 ;
"RTN","BPSSCRV2",225,0)
 Q 1
"RTN","BPSSCRV2",226,0)
 ;
"RTN","BPSSCRV2",227,0)
 ; ^^^^^^^^^^ End of BPS109 Logic ^^^^^^^^^^
"RTN","BPSSCRV2",228,0)
 ;
"RTN","BPSSCRV2",229,0)
 ; ********** Start of BPS110 / BPS115 Logic **********
"RTN","BPSSCRV2",230,0)
 ;
"RTN","BPSSCRV2",231,0)
 ; User input will be temporarily stored in BPS115AR for display to user 
"RTN","BPSSCRV2",232,0)
 ; of selected REJECT CODES while in CV Action.
"RTN","BPSSCRV2",233,0)
 ; 
"RTN","BPSSCRV2",234,0)
 ; If R is selected, at least one REJECT CODE must be selected. If not, selection 
"RTN","BPSSCRV2",235,0)
 ; will default to (A)ll and the current question will be re-prompted.
"RTN","BPSSCRV2",236,0)
 ; 
"RTN","BPSSCRV2",237,0)
 ; Upon completion of REJECT CODEs entry, values will be placed into a string 
"RTN","BPSSCRV2",238,0)
 ; delimited by semicolons. e.g. BPARR(1.15)=";50;60;"
"RTN","BPSSCRV2",239,0)
 ; 
"RTN","BPSSCRV2",240,0)
 ; BPS115AR = array containing REJECT CODE information
"RTN","BPSSCRV2",241,0)
 ; BPS115AR(BPS115)=BPS115NM    BPS115 = IEN from File #9002313.93
"RTN","BPSSCRV2",242,0)
 ;                              BPS115NM = Reject Code Explanation 
"RTN","BPSSCRV2",243,0)
 ; 
"RTN","BPSSCRV2",244,0)
BPS110(BPARR) ; Fields 1.10 and 1.15 - Reject Code(s)
"RTN","BPSSCRV2",245,0)
BPS110A ;
"RTN","BPSSCRV2",246,0)
 ;
"RTN","BPSSCRV2",247,0)
 N BPSI
"RTN","BPSSCRV2",248,0)
 ;
"RTN","BPSSCRV2",249,0)
 S BPINP=$$EDITFLD^BPSSCRCV(1.1,+BPDUZ7,"S^R:REJECT CODE;A:ALL","Display Specific (R)eject Code or (A)LL","ALL",.BPARR)
"RTN","BPSSCRV2",250,0)
 I BPINP=-1 Q 0
"RTN","BPSSCRV2",251,0)
 ;
"RTN","BPSSCRV2",252,0)
 S BPSERR=0
"RTN","BPSSCRV2",253,0)
 ; 
"RTN","BPSSCRV2",254,0)
 ; If user selection is R, assign existing entry(s) into BPS115AR array.
"RTN","BPSSCRV2",255,0)
 ;
"RTN","BPSSCRV2",256,0)
 I $P(BPINP,U,2)="R" D
"RTN","BPSSCRV2",257,0)
 . S BPS115=$G(BPARR(1.15))
"RTN","BPSSCRV2",258,0)
 . I BPS115'="" D
"RTN","BPSSCRV2",259,0)
 . . S BPSCNT=$L(BPS115,";")
"RTN","BPSSCRV2",260,0)
 . . I BPSCNT=1 D
"RTN","BPSSCRV2",261,0)
 . . . S BPS115CD=$$GET1^DIQ(9002313.93,BPS115,.01)
"RTN","BPSSCRV2",262,0)
 . . . S BPS115NM=$$GET1^DIQ(9002313.93,BPS115,.02)
"RTN","BPSSCRV2",263,0)
 . . . S BPS115AR(BPS115)=BPS115CD_"^"_BPS115NM
"RTN","BPSSCRV2",264,0)
 . . I +BPSCNT>2 D
"RTN","BPSSCRV2",265,0)
 . . . F BPSI=2:1:BPSCNT-1 D
"RTN","BPSSCRV2",266,0)
 . . . . S BPS115X=$P(BPS115,";",BPSI)
"RTN","BPSSCRV2",267,0)
 . . . . S BPS115CD=$$GET1^DIQ(9002313.93,BPS115X,.01)
"RTN","BPSSCRV2",268,0)
 . . . . S BPS115NM=$$GET1^DIQ(9002313.93,BPS115X,.02)
"RTN","BPSSCRV2",269,0)
 . . . . S BPS115AR(BPS115X)=BPS115CD_"^"_BPS115NM
"RTN","BPSSCRV2",270,0)
 . ;
"RTN","BPSSCRV2",271,0)
 . ; Display existing entry(s) to user.
"RTN","BPSSCRV2",272,0)
 . ; 
"RTN","BPSSCRV2",273,0)
 . I $D(BPS115AR) D
"RTN","BPSSCRV2",274,0)
 . . W !,?2,"Selected:"
"RTN","BPSSCRV2",275,0)
 . . S BPS115="" F  S BPS115=$O(BPS115AR(BPS115)) Q:BPS115=""  D
"RTN","BPSSCRV2",276,0)
 . . . W !,?10,$P(BPS115AR(BPS115),"^")
"RTN","BPSSCRV2",277,0)
 . . . W ?20,$P(BPS115AR(BPS115),"^",2)
"RTN","BPSSCRV2",278,0)
 . ;
"RTN","BPSSCRV2",279,0)
 . S BPS115="" F  D  Q:BPS115=-1
"RTN","BPSSCRV2",280,0)
 . . S DIR0="P^BPSF(9002313.93,"
"RTN","BPSSCRV2",281,0)
 . . S PRMTMSG="Select Reject Code"
"RTN","BPSSCRV2",282,0)
 . . S DFLTVAL=""
"RTN","BPSSCRV2",283,0)
 . . S BPS115=$$PROMPT^BPSSCRCV(DIR0,PRMTMSG,DFLTVAL)
"RTN","BPSSCRV2",284,0)
 . . ; 
"RTN","BPSSCRV2",285,0)
 . . ; Exit 'Select Reject Code' loop if user entered nil.
"RTN","BPSSCRV2",286,0)
 . . ; 
"RTN","BPSSCRV2",287,0)
 . . I BPS115=-1 Q
"RTN","BPSSCRV2",288,0)
 . . ;
"RTN","BPSSCRV2",289,0)
 . . S BPS115CD=$$GET1^DIQ(9002313.93,BPS115,.01)
"RTN","BPSSCRV2",290,0)
 . . S BPS115NM=$$GET1^DIQ(9002313.93,BPS115,.02)
"RTN","BPSSCRV2",291,0)
 . . 
"RTN","BPSSCRV2",292,0)
 . . ;
"RTN","BPSSCRV2",293,0)
 . . ; If entry exists in BPS115AR array, prompt user to delete from list.
"RTN","BPSSCRV2",294,0)
 . . ; 
"RTN","BPSSCRV2",295,0)
 . . I $D(BPS115AR(BPS115)) D
"RTN","BPSSCRV2",296,0)
 . . . S DIR(0)="S^Y:YES;N:NO"
"RTN","BPSSCRV2",297,0)
 . . . S DIR("A")="Delete "_$P(BPS115AR(BPS115),"^")_" from your list?"
"RTN","BPSSCRV2",298,0)
 . . . S DIR("B")="NO"
"RTN","BPSSCRV2",299,0)
 . . . D ^DIR
"RTN","BPSSCRV2",300,0)
 . . . I Y="Y" K BPS115AR(BPS115)
"RTN","BPSSCRV2",301,0)
 . . . ; 
"RTN","BPSSCRV2",302,0)
 . . E  D
"RTN","BPSSCRV2",303,0)
 . . . ; 
"RTN","BPSSCRV2",304,0)
 . . . ; Set new entry intp BPS115AR array.
"RTN","BPSSCRV2",305,0)
 . . . ; 
"RTN","BPSSCRV2",306,0)
 . . . S BPS115AR(BPS115)=BPS115CD_"^"_BPS115NM
"RTN","BPSSCRV2",307,0)
 . . ;
"RTN","BPSSCRV2",308,0)
 . . ; Display existing entry(s) to user.
"RTN","BPSSCRV2",309,0)
 . . ; 
"RTN","BPSSCRV2",310,0)
 . . I $D(BPS115AR) D
"RTN","BPSSCRV2",311,0)
 . . . W !,?2,"Selected:"
"RTN","BPSSCRV2",312,0)
 . . . S BPS115="" F  S BPS115=$O(BPS115AR(BPS115)) Q:BPS115=""  D
"RTN","BPSSCRV2",313,0)
 . . . . W !,?10,$P(BPS115AR(BPS115),"^")
"RTN","BPSSCRV2",314,0)
 . . . . W ?20,$P(BPS115AR(BPS115),"^",2)
"RTN","BPSSCRV2",315,0)
 . ;
"RTN","BPSSCRV2",316,0)
 . ; If user selected (R)eject but has not selected any Reject Codes,
"RTN","BPSSCRV2",317,0)
 . ; set profile setting to ALL and set BPSERR flag to re-prompt question.
"RTN","BPSSCRV2",318,0)
 . ;
"RTN","BPSSCRV2",319,0)
 . I '$D(BPS115AR) S BPARR(1.1)="A",BPARR(1.15)="" S BPSERR=1 Q
"RTN","BPSSCRV2",320,0)
 . ;
"RTN","BPSSCRV2",321,0)
 . ; Loop through selected reject codes, setting selected reject codes into
"RTN","BPSSCRV2",322,0)
 . ; BPARR array - delimited by semi-colon. 
"RTN","BPSSCRV2",323,0)
 . ; 
"RTN","BPSSCRV2",324,0)
 . S BPARR(1.15)=";"
"RTN","BPSSCRV2",325,0)
 . S BPS115=0 F  S BPS115=$O(BPS115AR(BPS115)) Q:+BPS115=0  S BPARR(1.15)=BPARR(1.15)_BPS115_";"
"RTN","BPSSCRV2",326,0)
 E  D  ; User selected ALL
"RTN","BPSSCRV2",327,0)
 . S BPARR(1.1)="A"
"RTN","BPSSCRV2",328,0)
 . S BPARR(1.15)=""
"RTN","BPSSCRV2",329,0)
 ; 
"RTN","BPSSCRV2",330,0)
 ; If BPSERR flag is 1, re-prompt question.
"RTN","BPSSCRV2",331,0)
 ; 
"RTN","BPSSCRV2",332,0)
 I $G(BPSERR)=1 G BPS110A
"RTN","BPSSCRV2",333,0)
 ;
"RTN","BPSSCRV2",334,0)
 Q 1
"RTN","BPSSCRV2",335,0)
 ;
"RTN","BPSSCRV2",336,0)
 ; ^^^^^^^^^^ End of BPS110 / BPS115 Logic ^^^^^^^^^^
"RTN","BPSSCRV2",337,0)
 ;
"RTN","BPSSCRV2",338,0)
 Q
"RTN","BPSTEST")
0^22^B233813306
"RTN","BPSTEST",1,0)
BPSTEST ;OAK/ELZ - ECME TESTING TOOL ;11/15/07  09:55
"RTN","BPSTEST",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**6,7,8,10,11,15,19,20,22,23**;JUN 2004;Build 44
"RTN","BPSTEST",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSTEST",4,0)
 ;
"RTN","BPSTEST",5,0)
 ; Look at BPSTEST1 for additional documentation of the Testing Tool
"RTN","BPSTEST",6,0)
 ;
"RTN","BPSTEST",7,0)
GETOVER(KEY1,KEY2,BPSORESP,BPSWHERE,BPSTYPE,BPPAYSEQ) ;
"RTN","BPSTEST",8,0)
 ; called by BPSNCPDP to enter overrides for a particular RX
"RTN","BPSTEST",9,0)
 ; INPUT
"RTN","BPSTEST",10,0)
 ;    KEY1      - Prescription IEN/Patient IEN
"RTN","BPSTEST",11,0)
 ;    KEY2      - Fill Number/Policy Number
"RTN","BPSTEST",12,0)
 ;    BPSORESP  - Previous response when this claim was processed
"RTN","BPSTEST",13,0)
 ;    BPSWHERE  - RX Action passed into BPSNCPDP
"RTN","BPSTEST",14,0)
 ;    BPSTYPE   - R (Reversal), S (Submission), E (Eligibility)
"RTN","BPSTEST",15,0)
 ;    BPPAYSEQ  - payer sequence 1 - primary, 2 - secondary 
"RTN","BPSTEST",16,0)
 ; OUTPUT
"RTN","BPSTEST",17,0)
 ;    None - Table BPS PAYER RESPONSE OVERRIDE entry is created.
"RTN","BPSTEST",18,0)
 ;
"RTN","BPSTEST",19,0)
 N BPSTRANS,BPSTIEN,BPSSRESP,DIC,X,Y,DIR,DIK,DA
"RTN","BPSTEST",20,0)
 ;
"RTN","BPSTEST",21,0)
 ; Check if testing is enabled
"RTN","BPSTEST",22,0)
 I '$$CHECK() Q
"RTN","BPSTEST",23,0)
 ;
"RTN","BPSTEST",24,0)
 ; Option can not be run for Date of Death option as it causes errors
"RTN","BPSTEST",25,0)
 I $G(XQY0)["DG DEATH ENTRY" W !,"The testing tool can not be run from Date of Death option" Q
"RTN","BPSTEST",26,0)
 ;
"RTN","BPSTEST",27,0)
 ; Do not run for background jobs
"RTN","BPSTEST",28,0)
 I $D(ZTQUEUED)!(",AREV,CRLB,CRLR,CRLX,CRRL,PC,PL,"[(","_BPSWHERE_",")) Q
"RTN","BPSTEST",29,0)
 ;
"RTN","BPSTEST",30,0)
 ; Create Transaction Number
"RTN","BPSTEST",31,0)
 S BPSTRANS=$$IEN59^BPSOSRX(KEY1,KEY2,$S($G(BPPAYSEQ)>0:+BPPAYSEQ,1:1))
"RTN","BPSTEST",32,0)
 ;
"RTN","BPSTEST",33,0)
 ; Lookup the record in the BPS PAYER RESPONSE OVERRIDE table
"RTN","BPSTEST",34,0)
 S DIC=9002313.32,DIC(0)="",X=BPSTRANS
"RTN","BPSTEST",35,0)
 D ^DIC
"RTN","BPSTEST",36,0)
 S BPSTIEN=+Y
"RTN","BPSTEST",37,0)
 ;
"RTN","BPSTEST",38,0)
 ; Prompt if user wants to do overrides
"RTN","BPSTEST",39,0)
 W !!,"Payer Overrides are enabled at this site.  If this is production environment,"
"RTN","BPSTEST",40,0)
 W !,"do not enter overrides (enter No at the next prompt) and disable this"
"RTN","BPSTEST",41,0)
 W !,"functionality in the BPS SETUP table."
"RTN","BPSTEST",42,0)
 W !!,"Entering No at the next prompt will delete any current overrides for the"
"RTN","BPSTEST",43,0)
 W !,"request, if they exist.",!
"RTN","BPSTEST",44,0)
 S DIR(0)="SA^Y:Yes;N:No"
"RTN","BPSTEST",45,0)
 S DIR("A")="Do you want to enter overrides for this request? ",DIR("B")="NO"
"RTN","BPSTEST",46,0)
 D ^DIR
"RTN","BPSTEST",47,0)
 ;
"RTN","BPSTEST",48,0)
 ; If no, delete the transaction (if it exists) and quit
"RTN","BPSTEST",49,0)
 I Y'="Y" D:BPSTIEN'=-1  Q
"RTN","BPSTEST",50,0)
 . S DIK="^BPS(9002313.32,",DA=BPSTIEN
"RTN","BPSTEST",51,0)
 . D ^DIK
"RTN","BPSTEST",52,0)
 ;
"RTN","BPSTEST",53,0)
 ; If the record does not exist, create it
"RTN","BPSTEST",54,0)
 I BPSTIEN=-1 S BPSTIEN=$$CREATE(BPSTRANS)
"RTN","BPSTEST",55,0)
 I BPSTIEN=-1 W !,"Failed to create the BPS PAYER RESPONSE OVERRIDE record",! Q
"RTN","BPSTEST",56,0)
 ;
"RTN","BPSTEST",57,0)
 ; If BPSTYPE is 'S' (submission) and old response is 'E Payable', change BPSTYPE to 'RS'
"RTN","BPSTEST",58,0)
 ; But don't change BPSTYPE to 'RS' if the BPSWHERE value is "ERWV" which is the Resubmit Without Reversal action (BPS*1*20)
"RTN","BPSTEST",59,0)
 I BPSTYPE="S",BPSWHERE'="ERWV",BPSORESP="E PAYABLE"!(BPSORESP="E DUPLICATE")!(BPSORESP="E REVERSAL REJECTED")!(BPSORESP="E REVERSAL UNSTRANDED") S BPSTYPE="RS"
"RTN","BPSTEST",60,0)
 ;
"RTN","BPSTEST",61,0)
 ; Update with the BPSTYPE
"RTN","BPSTEST",62,0)
 D FILE("^BPS(9002313.32,",BPSTIEN,.02,BPSTYPE)
"RTN","BPSTEST",63,0)
 ;
"RTN","BPSTEST",64,0)
 ; Message for RS
"RTN","BPSTEST",65,0)
 I BPSTYPE="RS" D
"RTN","BPSTEST",66,0)
 . W !!,"This submission may also have a reversal so you will be prompted for the"
"RTN","BPSTEST",67,0)
 . W !,"reversal overrides."
"RTN","BPSTEST",68,0)
 ;
"RTN","BPSTEST",69,0)
 ; If BPSTYPE is equal to 'E', then prompt for eligibility response
"RTN","BPSTEST",70,0)
 I BPSTYPE["E" D
"RTN","BPSTEST",71,0)
 . W !!,"Eligibility Questions"
"RTN","BPSTEST",72,0)
 . D PROMPT(BPSTIEN,.08,"A")
"RTN","BPSTEST",73,0)
 . N BPSRESP
"RTN","BPSTEST",74,0)
 . S BPSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.08,"I")
"RTN","BPSTEST",75,0)
 . I BPSRESP="R" D REJECTS(BPSTIEN) ; BPS*1*22
"RTN","BPSTEST",76,0)
 ;
"RTN","BPSTEST",77,0)
 ; If BPSTYPE contains 'R', then prompt for reversal response
"RTN","BPSTEST",78,0)
 I BPSTYPE["R" D
"RTN","BPSTEST",79,0)
 . W !!,"Reversal Questions"
"RTN","BPSTEST",80,0)
 . D PROMPT(BPSTIEN,.05,"A")
"RTN","BPSTEST",81,0)
 . N BPSRESP
"RTN","BPSTEST",82,0)
 . S BPSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.05,"I")
"RTN","BPSTEST",83,0)
 . I BPSRESP="R" D ENREVRJ(BPSTRANS)
"RTN","BPSTEST",84,0)
 ;
"RTN","BPSTEST",85,0)
 ; If BPSTYPE contains 'S', do submission response
"RTN","BPSTEST",86,0)
 I BPSTYPE["S" D
"RTN","BPSTEST",87,0)
 . W !!,"Submission Questions"
"RTN","BPSTEST",88,0)
 . D PROMPT(BPSTIEN,.03,"P")
"RTN","BPSTEST",89,0)
 . S BPSSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.03,"I")
"RTN","BPSTEST",90,0)
 . I BPSSRESP="P"!(BPSSRESP="D") D PROMPT(BPSTIEN,.04,40)       ; total amount paid (509-F9)
"RTN","BPSTEST",91,0)
 . I BPSSRESP="P"!(BPSSRESP="D") D PROMPT(BPSTIEN,.06,9)        ; copay amount (518-FI)
"RTN","BPSTEST",92,0)
 . I BPSSRESP="R" D REJECTS(BPSTIEN) ; BPS*1*22
"RTN","BPSTEST",93,0)
 . ;
"RTN","BPSTEST",94,0)
 . ; This section is for new D1-E7 fields and other fields so we can test that they are filed correctly
"RTN","BPSTEST",95,0)
 . ; At some point, these can probably be removed
"RTN","BPSTEST",96,0)
 . I BPSSRESP="P"!(BPSSRESP="D")!(BPSSRESP="R") D
"RTN","BPSTEST",97,0)
 .. ;
"RTN","BPSTEST",98,0)
 .. ; Ask if user wants to enter data for additional response file fields - Quit if user says no
"RTN","BPSTEST",99,0)
 .. N DIR,DTOUT,DUOUT,DIROUT,DIRUT
"RTN","BPSTEST",100,0)
 .. S DIR(0)="YA",DIR("A")="Populate Additional Response Fields? ",DIR("B")="No" W ! D ^DIR
"RTN","BPSTEST",101,0)
 .. I Y'=1 Q
"RTN","BPSTEST",102,0)
 .. ;
"RTN","BPSTEST",103,0)
 .. ; Overrides to test functionality of BPS*1*20
"RTN","BPSTEST",104,0)
 .. D PROMPT(BPSTIEN,.15,0)        ; Ingredient Cost Paid (506)
"RTN","BPSTEST",105,0)
 .. D PROMPT(BPSTIEN,.16,0)        ; Dispensing Fee Paid (507)
"RTN","BPSTEST",106,0)
 .. D PROMPT(BPSTIEN,.17,0)        ; Remaining Deductible Amount (513)
"RTN","BPSTEST",107,0)
 .. D PROMPT(BPSTIEN,.18,0)        ; Amount Applied to Periodic Deductible (517)
"RTN","BPSTEST",108,0)
 .. ;
"RTN","BPSTEST",109,0)
 .. ; Additional overrides for D1-D9 (BPS*1*15)
"RTN","BPSTEST",110,0)
 .. D PROMPT(BPSTIEN,.09,"")       ; next available fill date
"RTN","BPSTEST",111,0)
 .. D PROMPT(BPSTIEN,.1,"")        ; adjudicated payment type
"RTN","BPSTEST",112,0)
 .. ;
"RTN","BPSTEST",113,0)
 .. ; Additional overrides for E0-E6 (BPS*1*19)
"RTN","BPSTEST",114,0)
 .. D PROMPT(BPSTIEN,2.01,"04")    ; % sales tax basis pd
"RTN","BPSTEST",115,0)
 .. D PROMPT(BPSTIEN,2.02,11)      ; other amount paid qualifier
"RTN","BPSTEST",116,0)
 .. D PROMPT(BPSTIEN,2.03,"01")    ; payer id qualifier
"RTN","BPSTEST",117,0)
 .. D PROMPT(BPSTIEN,2.04,"")      ; help desk phone# ext
"RTN","BPSTEST",118,0)
 .. D PROMPT(BPSTIEN,2.05,"")      ; pro service fee cont/reim amt
"RTN","BPSTEST",119,0)
 .. D PROMPT(BPSTIEN,2.06,"")      ; other payer help desk phone# ext
"RTN","BPSTEST",120,0)
 .. D PROMPT(BPSTIEN,2.07,"")      ; response intermed auth type id
"RTN","BPSTEST",121,0)
 .. D PROMPT(BPSTIEN,2.08,"")      ; response intermed auth id
"RTN","BPSTEST",122,0)
 .. D PROMPT(BPSTIEN,3.01,"")      ; response intermed message
"RTN","BPSTEST",123,0)
 .. ;
"RTN","BPSTEST",124,0)
 .. ; E7 overrides (BPS*1*20)
"RTN","BPSTEST",125,0)
 .. D PROMPT(BPSTIEN,.11,"")          ; quan limit per specific time period
"RTN","BPSTEST",126,0)
 .. D PROMPT(BPSTIEN,.12,"")          ; quan limit time period
"RTN","BPSTEST",127,0)
 .. D PROMPT(BPSTIEN,.13,"")          ; days supp limit per specific time period
"RTN","BPSTEST",128,0)
 .. D PROMPT(BPSTIEN,.14,"")          ; days supp limit time period
"RTN","BPSTEST",129,0)
 .. ; Overrides to test functionality - BPS*1*22
"RTN","BPSTEST",130,0)
 .. D PROMPT(BPSTIEN,2.09,"")         ; reconciliation id
"RTN","BPSTEST",131,0)
 .. ;
"RTN","BPSTEST",132,0)
 .. D PROMPT(BPSTIEN,2.1,"")          ; Patient Pay Amount
"RTN","BPSTEST",133,0)
 ;
"RTN","BPSTEST",134,0)
 W ! D PROMPT(BPSTIEN,.07,0)
"RTN","BPSTEST",135,0)
 Q
"RTN","BPSTEST",136,0)
 ;
"RTN","BPSTEST",137,0)
SETOVER(BPSTRANS,BPSTYPE,BPSDATA) ;
"RTN","BPSTEST",138,0)
 ; called by BPSECMPS to set the override data
"RTN","BPSTEST",139,0)
 ; Input
"RTN","BPSTEST",140,0)
 ;    BPSTRANS - Transaction IEN
"RTN","BPSTEST",141,0)
 ;    BPSTYPE  - B1 for submission, B2 for reversals
"RTN","BPSTEST",142,0)
 ; Output
"RTN","BPSTEST",143,0)
 ;    BPSDATA    - Passed by reference and updated with appropriate overrides
"RTN","BPSTEST",144,0)
 ;
"RTN","BPSTEST",145,0)
 N BPSTIEN,BPSRRESP,BPSSRESP,BPSPAID,BPSRCNT,BPSRIEN,BPSRCODE,BPSRCD,BPSCOPAY,BPSXXXX,BPSUNDEF
"RTN","BPSTEST",146,0)
 N BPSAJPAY,BPSNFLDT,BPSX
"RTN","BPSTEST",147,0)
 N BPS506,BPS507,BPS513,BPS517
"RTN","BPSTEST",148,0)
 ;
"RTN","BPSTEST",149,0)
 ; Check the Test Flag in set in BPS SETUP
"RTN","BPSTEST",150,0)
 I '$$CHECK() Q
"RTN","BPSTEST",151,0)
 ;
"RTN","BPSTEST",152,0)
 ; Check if the Transaction Number is defined in BPS RESPONSE OVERRIDES
"RTN","BPSTEST",153,0)
 S BPSTIEN=$O(^BPS(9002313.32,"B",BPSTRANS,""))
"RTN","BPSTEST",154,0)
 I BPSTIEN="" Q
"RTN","BPSTEST",155,0)
 ;
"RTN","BPSTEST",156,0)
 ; If a eligibility, check for specific reversal overrides and set
"RTN","BPSTEST",157,0)
 I BPSTYPE="E1" D  Q
"RTN","BPSTEST",158,0)
 . S BPSRRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.08,"I")
"RTN","BPSTEST",159,0)
 . ;
"RTN","BPSTEST",160,0)
 . ; If the response is Stranded, force an <UNDEF> error
"RTN","BPSTEST",161,0)
 . I BPSRRESP="S" S BPSXXXX=BPSUNDEF
"RTN","BPSTEST",162,0)
 . I BPSRRESP]"" S BPSDATA(1,112)=BPSRRESP
"RTN","BPSTEST",163,0)
 . S BPSDATA(9002313.03,9002313.03,"+1,",501)=$S(BPSRRESP="R":"R",1:"A")
"RTN","BPSTEST",164,0)
 . ; 
"RTN","BPSTEST",165,0)
 . ; If the response is accepted, delete the reject code count and codes
"RTN","BPSTEST",166,0)
 . I BPSRRESP="A" K BPSDATA(1,510),BPSDATA(1,511)
"RTN","BPSTEST",167,0)
 . ; 
"RTN","BPSTEST",168,0)
 . ; If the response is rejected, delete the rejections returned by payers
"RTN","BPSTEST",169,0)
 . ;   and put in the ones entered by the user
"RTN","BPSTEST",170,0)
 . I BPSRRESP="R" D
"RTN","BPSTEST",171,0)
 .. K BPSDATA(1,509),BPSDATA(1,511)
"RTN","BPSTEST",172,0)
 .. S BPSRCNT=0
"RTN","BPSTEST",173,0)
 .. S BPSRIEN=0 F  S BPSRIEN=$O(^BPS(9002313.32,BPSTIEN,1,BPSRIEN)) Q:+BPSRIEN=0  D
"RTN","BPSTEST",174,0)
 ... S BPSRCODE=$P($G(^BPS(9002313.32,BPSTIEN,1,BPSRIEN,0)),"^",1)
"RTN","BPSTEST",175,0)
 ... ; Increment counter and store
"RTN","BPSTEST",176,0)
 ... I BPSRCODE]"" D
"RTN","BPSTEST",177,0)
 .... S BPSRCD=$$GET1^DIQ(9002313.93,BPSRCODE_",",.01,"E")
"RTN","BPSTEST",178,0)
 .... I BPSRCD]"" S BPSRCNT=BPSRCNT+1,BPSDATA(1,511,BPSRCNT)=BPSRCD
"RTN","BPSTEST",179,0)
 .. ; Store total number of rejections
"RTN","BPSTEST",180,0)
 .. S BPSDATA(1,510)=BPSRCNT
"RTN","BPSTEST",181,0)
 ;
"RTN","BPSTEST",182,0)
 ; If a reversal, check for specific reversal overrides and set
"RTN","BPSTEST",183,0)
 I BPSTYPE="B2" D
"RTN","BPSTEST",184,0)
 . S BPSRRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.05,"I")
"RTN","BPSTEST",185,0)
 . ;
"RTN","BPSTEST",186,0)
 . ; If the response is Stranded, force an <UNDEF> error
"RTN","BPSTEST",187,0)
 . I BPSRRESP="S" S BPSXXXX=BPSUNDEF
"RTN","BPSTEST",188,0)
 . I BPSRRESP]"" S BPSDATA(1,112)=$S(BPSRRESP="D":"S",1:BPSRRESP)
"RTN","BPSTEST",189,0)
 . S BPSDATA(9002313.03,9002313.03,"+1,",501)=$S(BPSRRESP="R":"R",1:"A")
"RTN","BPSTEST",190,0)
 . ;
"RTN","BPSTEST",191,0)
 . ; If the response is accepted or duplicate, kill the reject code count and codes
"RTN","BPSTEST",192,0)
 . I BPSRRESP="A"!(BPSRRESP="D") K BPSDATA(1,510),BPSDATA(1,511)
"RTN","BPSTEST",193,0)
 . ;
"RTN","BPSTEST",194,0)
 . ; If the response is rejected, set the reject codes
"RTN","BPSTEST",195,0)
 . I BPSRRESP="R" D SETREJ(BPSTRANS)
"RTN","BPSTEST",196,0)
 ;
"RTN","BPSTEST",197,0)
 ; If a submission, check for specific submission overrides and set
"RTN","BPSTEST",198,0)
 I BPSTYPE="B1" D
"RTN","BPSTEST",199,0)
 . ; Get submission response
"RTN","BPSTEST",200,0)
 . S BPSSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.03,"I")
"RTN","BPSTEST",201,0)
 . ;
"RTN","BPSTEST",202,0)
 . ; If the response is Stranded, force an <UNDEF> error
"RTN","BPSTEST",203,0)
 . I BPSSRESP="S" S BPSXXXX=BPSUNDEF
"RTN","BPSTEST",204,0)
 . ;
"RTN","BPSTEST",205,0)
 . ; If BPSSRESP exists, file it
"RTN","BPSTEST",206,0)
 . I BPSSRESP]"" D
"RTN","BPSTEST",207,0)
 .. S BPSDATA(1,112)=BPSSRESP
"RTN","BPSTEST",208,0)
 .. S BPSDATA(9002313.03,9002313.03,"+1,",501)=$S(BPSSRESP="R":"R",1:"A")
"RTN","BPSTEST",209,0)
 .. ; If payable or duplicate, get the BPSPAID amount and file it if it
"RTN","BPSTEST",210,0)
 .. ; exists.  Also delete any reject codes
"RTN","BPSTEST",211,0)
 .. I BPSSRESP="P"!(BPSSRESP="D") D
"RTN","BPSTEST",212,0)
 ... ;
"RTN","BPSTEST",213,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.1,"I")             ; 505-F5 Patient Pay Amount
"RTN","BPSTEST",214,0)
 ... I BPSX]"" S BPSDATA(1,"505")=$$DFF^BPSECFM(BPSX,10)
"RTN","BPSTEST",215,0)
 ... ;
"RTN","BPSTEST",216,0)
 ... S BPSPAID=$$GET1^DIQ(9002313.32,BPSTIEN_",",.04,"I")
"RTN","BPSTEST",217,0)
 ... I BPSPAID]"" S BPSDATA(1,509)=$$DFF^BPSECFM(BPSPAID,8)         ; 509 Total amount paid
"RTN","BPSTEST",218,0)
 ... ;
"RTN","BPSTEST",219,0)
 ... K BPSDATA(1,510),BPSDATA(1,511)      ; kill Reject Count (510) and Reject Code (511)
"RTN","BPSTEST",220,0)
 ... ;
"RTN","BPSTEST",221,0)
 ... S BPSCOPAY=$$GET1^DIQ(9002313.32,BPSTIEN_",",.06,"I")
"RTN","BPSTEST",222,0)
 ... I BPSCOPAY]"" S BPSDATA(1,518)=$$DFF^BPSECFM(BPSCOPAY,8)       ; 518 Copay Amount
"RTN","BPSTEST",223,0)
 ... ;
"RTN","BPSTEST",224,0)
 ... S BPS506=$$GET1^DIQ(9002313.32,BPSTIEN_",",.15,"I")
"RTN","BPSTEST",225,0)
 ... I BPS506]"" S BPSDATA(1,506)=$$DFF^BPSECFM(BPS506,8)           ; 506 Ingredient Cost Paid
"RTN","BPSTEST",226,0)
 ... ;
"RTN","BPSTEST",227,0)
 ... S BPS507=$$GET1^DIQ(9002313.32,BPSTIEN_",",.16,"I")
"RTN","BPSTEST",228,0)
 ... I BPS507]"" S BPSDATA(1,507)=$$DFF^BPSECFM(BPS507,8)           ; 507 Dispensing Fee Paid
"RTN","BPSTEST",229,0)
 ... ;
"RTN","BPSTEST",230,0)
 ... S BPS513=$$GET1^DIQ(9002313.32,BPSTIEN_",",.17,"I")
"RTN","BPSTEST",231,0)
 ... I BPS513]"" S BPSDATA(1,513)=$$DFF^BPSECFM(BPS513,8)           ; 513 Remaining Deductible Amount
"RTN","BPSTEST",232,0)
 ... ;
"RTN","BPSTEST",233,0)
 ... S BPS517=$$GET1^DIQ(9002313.32,BPSTIEN_",",.18,"I")
"RTN","BPSTEST",234,0)
 ... I BPS517]"" S BPSDATA(1,517)=$$DFF^BPSECFM(BPS517,8)           ; 517 Amount Applied to Periodic Deductible
"RTN","BPSTEST",235,0)
 ... Q
"RTN","BPSTEST",236,0)
 .. ;
"RTN","BPSTEST",237,0)
 .. I BPSSRESP="P"!(BPSSRESP="D")!(BPSSRESP="R") D
"RTN","BPSTEST",238,0)
 ... ; D1-D9 fields (BPS*1*15)
"RTN","BPSTEST",239,0)
 ... S BPSAJPAY=$$GET1^DIQ(9002313.32,BPSTIEN_",",.1,"I")           ; Adjudicated Payment Type
"RTN","BPSTEST",240,0)
 ... I BPSAJPAY]"" S BPSDATA(1,1028)=$$NFF^BPSECFM(BPSAJPAY,2)
"RTN","BPSTEST",241,0)
 ... S BPSNFLDT=$$GET1^DIQ(9002313.32,BPSTIEN_",",.09,"I")          ; Override Next Available Fill
"RTN","BPSTEST",242,0)
 ... I BPSNFLDT]"" S BPSDATA(1,2004)=$$DTF1^BPSECFM(BPSNFLDT)
"RTN","BPSTEST",243,0)
 ... ;
"RTN","BPSTEST",244,0)
 ... ; E0-E6 overrides (BPS*1*19)
"RTN","BPSTEST",245,0)
 ... ; PERCENTAGE SALES TAX BASIS PAID
"RTN","BPSTEST",246,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.01,"I")
"RTN","BPSTEST",247,0)
 ... I BPSX]"" S BPSDATA(1,561)=BPSX
"RTN","BPSTEST",248,0)
 ... ; OTHER AMOUNT PAID QUALIFIER and associated field
"RTN","BPSTEST",249,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.02,"I")
"RTN","BPSTEST",250,0)
 ... I BPSX]"" S BPSDATA(1,564,1)=$$NFF^BPSECFM(BPSX,2),BPSDATA(1,565,1)=$$DFF^BPSECFM(5.64,8),BPSDATA(1,563)=1
"RTN","BPSTEST",251,0)
 ... ; PAYER ID QUALIFIER
"RTN","BPSTEST",252,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.03,"I")
"RTN","BPSTEST",253,0)
 ... I BPSX]"" S BPSDATA(9002313.03,9002313.03,"+1,",568)=BPSX
"RTN","BPSTEST",254,0)
 ... ; HELP DESK TELEPHONE NUMBER EXTENSION
"RTN","BPSTEST",255,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.04,"I")
"RTN","BPSTEST",256,0)
 ... I BPSX]"" S BPSDATA(1,"2022")=$$NFF^BPSECFM(BPSX,8)
"RTN","BPSTEST",257,0)
 ... ; PROFESSIONAL SERVICE FEE CONTRACTED/REIMURSEMENT AMOUNT
"RTN","BPSTEST",258,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.05,"I")
"RTN","BPSTEST",259,0)
 ... I BPSX]"" S BPSDATA(1,"2033")=$$DFF^BPSECFM(BPSX,8)
"RTN","BPSTEST",260,0)
 ... ; OTHER PAYER HELPDESK TELEPHONE EXTENSION
"RTN","BPSTEST",261,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.06,"I")
"RTN","BPSTEST",262,0)
 ... I BPSX]"" S BPSDATA(1,"2023",1)=$$NFF^BPSECFM(BPSX,8),BPSDATA(1,338,1)="01"
"RTN","BPSTEST",263,0)
 ... ; RESPONSE INTERMEDIARY AUTHORIZATION TYPE ID and associated fields
"RTN","BPSTEST",264,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.07,"I")
"RTN","BPSTEST",265,0)
 ... I BPSX]"" S BPSDATA(1,"2053",1)=$$NFF^BPSECFM(BPSX,2),BPSDATA(1,2052)=1
"RTN","BPSTEST",266,0)
 ... ; RESPONSE INTERMEDIARY AUTHORIZATION ID and associated fields
"RTN","BPSTEST",267,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.08,"I")
"RTN","BPSTEST",268,0)
 ... I BPSX]"" S BPSDATA(1,"2054",1)=$$ANFF^BPSECFM(BPSX,20),BPSDATA(1,2052)=1
"RTN","BPSTEST",269,0)
 ... ; INTERMEDIARY MESSAGE and associated fields
"RTN","BPSTEST",270,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",3.01,"I")
"RTN","BPSTEST",271,0)
 ... I BPSX]"" S BPSDATA(1,"2051",1)=$$ANFF^BPSECFM(BPSX,200),BPSDATA(1,2052)=1
"RTN","BPSTEST",272,0)
 ... ; (BPS*1*22)
"RTN","BPSTEST",273,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.09,"I") ; B98-34 reconciliation id
"RTN","BPSTEST",274,0)
 ... I BPSX]"" S BPSDATA(1,"2098")=$$ANFF^BPSECFM(BPSX,30)
"RTN","BPSTEST",275,0)
 ... ;
"RTN","BPSTEST",276,0)
 ... ; E7 overrides (BPS*1*20)
"RTN","BPSTEST",277,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",.11,"I") I BPSX'="" D     ; B88-3R quantity limit per spec time period
"RTN","BPSTEST",278,0)
 .... S BPSDATA(1,2087)=1                          ; count field
"RTN","BPSTEST",279,0)
 .... S BPSDATA(1,2088,1)=$$NFF^BPSECFM(BPSX,10)   ; data from override file
"RTN","BPSTEST",280,0)
 .... Q
"RTN","BPSTEST",281,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",.12,"I") I BPSX'="" D     ; B89-3S quantity limit time period
"RTN","BPSTEST",282,0)
 .... S BPSDATA(1,2087)=1                          ; count field
"RTN","BPSTEST",283,0)
 .... S BPSDATA(1,2089,1)=$$NFF^BPSECFM(BPSX,5)    ; data from override file
"RTN","BPSTEST",284,0)
 .... Q
"RTN","BPSTEST",285,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",.13,"I") I BPSX'="" D     ; B91-3W days supply limit per spec time period
"RTN","BPSTEST",286,0)
 .... S BPSDATA(1,2090)=1                          ; count field
"RTN","BPSTEST",287,0)
 .... S BPSDATA(1,2091,1)=$$NFF^BPSECFM(BPSX,3)    ; data from override file
"RTN","BPSTEST",288,0)
 .... Q
"RTN","BPSTEST",289,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",.14,"I") I BPSX'="" D     ; B92-3X days supply limit time period
"RTN","BPSTEST",290,0)
 .... S BPSDATA(1,2090)=1                          ; count field
"RTN","BPSTEST",291,0)
 .... S BPSDATA(1,2092,1)=$$NFF^BPSECFM(BPSX,5)    ; data from override file
"RTN","BPSTEST",292,0)
 .... Q
"RTN","BPSTEST",293,0)
 ... Q
"RTN","BPSTEST",294,0)
 .. ;
"RTN","BPSTEST",295,0)
 .. ; If rejected, get the rejection code and file them
"RTN","BPSTEST",296,0)
 .. ; Also, delete the BPSPAID amount
"RTN","BPSTEST",297,0)
 .. I BPSSRESP="R" D
"RTN","BPSTEST",298,0)
 ... ; Delete old rejections and BPSPAID amount
"RTN","BPSTEST",299,0)
 ... K BPSDATA(1,509),BPSDATA(1,511)
"RTN","BPSTEST",300,0)
 ... ; Loop through rejections and store
"RTN","BPSTEST",301,0)
 ... S BPSRCNT=0
"RTN","BPSTEST",302,0)
 ... S BPSRIEN=0 F  S BPSRIEN=$O(^BPS(9002313.32,BPSTIEN,1,BPSRIEN)) Q:+BPSRIEN=0  D
"RTN","BPSTEST",303,0)
 .... S BPSRCODE=$P($G(^BPS(9002313.32,BPSTIEN,1,BPSRIEN,0)),"^",1)
"RTN","BPSTEST",304,0)
 .... ; Increment counter and store
"RTN","BPSTEST",305,0)
 .... I BPSRCODE]"" D
"RTN","BPSTEST",306,0)
 ..... S BPSRCD=$$GET1^DIQ(9002313.93,BPSRCODE_",",.01,"E")
"RTN","BPSTEST",307,0)
 ..... I BPSRCD]"" S BPSRCNT=BPSRCNT+1,BPSDATA(1,511,BPSRCNT)=BPSRCD
"RTN","BPSTEST",308,0)
 ... ; Store total number of rejections
"RTN","BPSTEST",309,0)
 ... S BPSDATA(1,510)=BPSRCNT
"RTN","BPSTEST",310,0)
 Q
"RTN","BPSTEST",311,0)
 ;
"RTN","BPSTEST",312,0)
SELOVER ;
"RTN","BPSTEST",313,0)
 ; Used to create overrides for prescription that will processed in the
"RTN","BPSTEST",314,0)
 ; background (CMOP, auto-reversals).  The user is prompted for the
"RTN","BPSTEST",315,0)
 ; prescription and other information and then calls GETOVER.  It is called
"RTN","BPSTEST",316,0)
 ; by option BPS PROVIDER RESPONSE OVERRIDES
"RTN","BPSTEST",317,0)
 ;
"RTN","BPSTEST",318,0)
 ; This does not work for eligibility but we don't do them in the background 
"RTN","BPSTEST",319,0)
 ;   right now.
"RTN","BPSTEST",320,0)
 ;
"RTN","BPSTEST",321,0)
 N BPSRXIEN,BPSRXNM,BPSRXFL,BPSRFL,BPSORESP,BPSTYPE,BPSRXARR,BPSRARR,DIC,Y,DIR
"RTN","BPSTEST",322,0)
 ;
"RTN","BPSTEST",323,0)
 ; Check if test mode is on
"RTN","BPSTEST",324,0)
 I '$$CHECK() Q
"RTN","BPSTEST",325,0)
 ;
"RTN","BPSTEST",326,0)
 ; Prompt for the Prescription
"RTN","BPSTEST",327,0)
 S BPSRXIEN=$$PROMPTRX^BPSUTIL1 Q:BPSRXIEN<1
"RTN","BPSTEST",328,0)
 D RXAPI^BPSUTIL1(BPSRXIEN,".01;22","BPSRXARR","IE")
"RTN","BPSTEST",329,0)
 S BPSRXNM=$G(BPSRXARR(52,BPSRXIEN,.01,"E"))
"RTN","BPSTEST",330,0)
 ;
"RTN","BPSTEST",331,0)
 ; Prompt for Fill/Refill
"RTN","BPSTEST",332,0)
 S DIR(0)="S^0:"_$G(BPSRXARR(52,BPSRXIEN,22,"E"))
"RTN","BPSTEST",333,0)
 F BPSRFL=1:1 D RXSUBF^BPSUTIL1(BPSRXIEN,52,52.1,BPSRFL,.01,"BPSRARR","E") Q:$G(BPSRARR(52.1,BPSRFL,.01,"E"))=""  D
"RTN","BPSTEST",334,0)
 . S DIR(0)=DIR(0)_";"_BPSRFL_":"_BPSRARR(52.1,BPSRFL,.01,"E")
"RTN","BPSTEST",335,0)
 S DIR("A")="Select fill/refill for prescription "_BPSRXNM,DIR("B")=0
"RTN","BPSTEST",336,0)
 D ^DIR
"RTN","BPSTEST",337,0)
 I Y'=+Y Q
"RTN","BPSTEST",338,0)
 S BPSRXFL=Y
"RTN","BPSTEST",339,0)
 ;
"RTN","BPSTEST",340,0)
 ; Prompt for BPSTYPE
"RTN","BPSTEST",341,0)
 S DIR(0)="S^R:Reversal;RS:Resubmit with Reversal;S:Submit"
"RTN","BPSTEST",342,0)
 S DIR("A")="Enter BPSTYPE of transaction",DIR("B")="SUBMIT"
"RTN","BPSTEST",343,0)
 D ^DIR
"RTN","BPSTEST",344,0)
 I ",R,RS,S,"'[","_Y_"," Q
"RTN","BPSTEST",345,0)
 S BPSTYPE=Y
"RTN","BPSTEST",346,0)
 ;
"RTN","BPSTEST",347,0)
 ; Set up parameters
"RTN","BPSTEST",348,0)
 S BPSORESP=""
"RTN","BPSTEST",349,0)
 I BPSTYPE="RS" S BPSTYPE="S",BPSORESP="E PAYABLE"
"RTN","BPSTEST",350,0)
 ;
"RTN","BPSTEST",351,0)
 ; Call GETOVER
"RTN","BPSTEST",352,0)
 D GETOVER(BPSRXIEN,BPSRXFL,BPSORESP,"",BPSTYPE)
"RTN","BPSTEST",353,0)
 Q
"RTN","BPSTEST",354,0)
 ;
"RTN","BPSTEST",355,0)
CHECK() ;
"RTN","BPSTEST",356,0)
 ; Check if Test Mode is ON in the BPS Setup table
"RTN","BPSTEST",357,0)
 ; Also called by BPSNCPDP and BPSEMCPS
"RTN","BPSTEST",358,0)
 ;
"RTN","BPSTEST",359,0)
 ;IA#4440
"RTN","BPSTEST",360,0)
 Q $S($$PROD^XUPROD:0,1:$P($G(^BPS(9002313.99,1,0)),"^",3))
"RTN","BPSTEST",361,0)
 ;
"RTN","BPSTEST",362,0)
CREATE(BPSTRANS) ;
"RTN","BPSTEST",363,0)
 ; Create the Override record
"RTN","BPSTEST",364,0)
 ;
"RTN","BPSTEST",365,0)
 N DIC,X,Y,BPSTIEN,DA
"RTN","BPSTEST",366,0)
 S DIC=9002313.32,DIC(0)="L",X=BPSTRANS
"RTN","BPSTEST",367,0)
 D ^DIC
"RTN","BPSTEST",368,0)
 S BPSTIEN=+Y
"RTN","BPSTEST",369,0)
 Q BPSTIEN
"RTN","BPSTEST",370,0)
 ;
"RTN","BPSTEST",371,0)
FILE(DIE,DA,BPSFLD,BPSDATA) ;
"RTN","BPSTEST",372,0)
 ; File in the Override record
"RTN","BPSTEST",373,0)
 ;
"RTN","BPSTEST",374,0)
 N DR,X,Y
"RTN","BPSTEST",375,0)
 S DR=BPSFLD_"///"_BPSDATA
"RTN","BPSTEST",376,0)
 L +@(DIE_DA_")"):0 I $T D ^DIE L -@(DIE_DA_")") Q
"RTN","BPSTEST",377,0)
 W !?5,"Another user is editing this entry."
"RTN","BPSTEST",378,0)
 Q
"RTN","BPSTEST",379,0)
 ;
"RTN","BPSTEST",380,0)
PROMPT(DA,BPSFLD,BPSDFLT) ;
"RTN","BPSTEST",381,0)
 ; Prompt for a specific field and set the data
"RTN","BPSTEST",382,0)
 ;
"RTN","BPSTEST",383,0)
 N DIE,DR,DTOUT,X,Y
"RTN","BPSTEST",384,0)
 S DIE="^BPS(9002313.32,",DR=BPSFLD_"//"_BPSDFLT
"RTN","BPSTEST",385,0)
 L +@(DIE_DA_")"):0 I $T D ^DIE L -@(DIE_DA_")") Q
"RTN","BPSTEST",386,0)
 W !?5,"Another user is editing this entry."
"RTN","BPSTEST",387,0)
 Q
"RTN","BPSTEST",388,0)
 ;
"RTN","BPSTEST",389,0)
REJECTS(BPSTIEN) ; BPS*1*22
"RTN","BPSTEST",390,0)
 N DA,DIE,DR,DTOUT,X,Y
"RTN","BPSTEST",391,0)
 ; Delete all entries from the reject multiple so user doesn't have to manually delete 
"RTN","BPSTEST",392,0)
 ; The reject code prompt will have a default value of '07'
"RTN","BPSTEST",393,0)
 K ^BPS(9002313.32,BPSTIEN,1)
"RTN","BPSTEST",394,0)
 ; Prompt for Reject Code(s) and set the data 
"RTN","BPSTEST",395,0)
 S DA=BPSTIEN,DIE="^BPS(9002313.32,",DR=1_"//07"
"RTN","BPSTEST",396,0)
 L +@(DIE_DA_")"):0 I $T D ^DIE L -@(DIE_DA_")") Q
"RTN","BPSTEST",397,0)
 W !?5,"Another user is editing this entry."
"RTN","BPSTEST",398,0)
 Q 
"RTN","BPSTEST",399,0)
 ;
"RTN","BPSTEST",400,0)
SETDELAY(BPSTRANS) ;
"RTN","BPSTEST",401,0)
 ; Input
"RTN","BPSTEST",402,0)
 ;    BPSTRANS - Transaction IEN
"RTN","BPSTEST",403,0)
 ; Check the Test Flag in set in BPS SETUP
"RTN","BPSTEST",404,0)
 I '$$CHECK() Q 0
"RTN","BPSTEST",405,0)
 N BPSDELAY,BPSTIEN,BPSTIME
"RTN","BPSTEST",406,0)
 ; Check if the Transaction Number is defined in BPS RESPONSE OVERRIDES
"RTN","BPSTEST",407,0)
 S BPSTIEN=$O(^BPS(9002313.32,"B",BPSTRANS,""))
"RTN","BPSTEST",408,0)
 I BPSTIEN="" Q 0
"RTN","BPSTEST",409,0)
 S BPSDELAY=$$GET1^DIQ(9002313.32,BPSTIEN_",",.07,"I")*60
"RTN","BPSTEST",410,0)
 I BPSDELAY'>0 Q 0
"RTN","BPSTEST",411,0)
 S BPSTIME=$$FMADD^XLFDT($$NOW^XLFDT,,,,BPSDELAY)
"RTN","BPSTEST",412,0)
 I BPSTIME>0 D  Q BPSTIME
"RTN","BPSTEST",413,0)
 . ;schedule a task to run RUNNING^BPSOSRX
"RTN","BPSTEST",414,0)
 . N ZTRTN,ZTDTH,ZTIO,ZTSK
"RTN","BPSTEST",415,0)
 . S ZTRTN="RUNECME^BPSTEST",ZTDESC="BPSTEST: ECME testing tool"
"RTN","BPSTEST",416,0)
 . S ZTDTH=$$FMADD^XLFDT($$NOW^XLFDT,,,,BPSDELAY+10),ZTIO=""
"RTN","BPSTEST",417,0)
 . D ^%ZTLOAD
"RTN","BPSTEST",418,0)
 Q 0
"RTN","BPSTEST",419,0)
 ;
"RTN","BPSTEST",420,0)
RUNECME ;
"RTN","BPSTEST",421,0)
 D RUNNING^BPSOSRX()
"RTN","BPSTEST",422,0)
 Q
"RTN","BPSTEST",423,0)
 ;get the reversal reject from the ^XTMP and set BPSDATA to override data
"RTN","BPSTEST",424,0)
SETREJ(BPSTRANS) ;
"RTN","BPSTEST",425,0)
 N BPSREJ
"RTN","BPSTEST",426,0)
 S BPSREJ=$G(^XTMP("BPSTEST",BPSTRANS))
"RTN","BPSTEST",427,0)
 I BPSREJ="" Q
"RTN","BPSTEST",428,0)
 S BPSDATA(1,511,1)=BPSREJ
"RTN","BPSTEST",429,0)
 S BPSDATA(1,510)=1
"RTN","BPSTEST",430,0)
 Q
"RTN","BPSTEST",431,0)
 ;enter a reversal reject
"RTN","BPSTEST",432,0)
ENREVRJ(BPSTRANS) ;
"RTN","BPSTEST",433,0)
 N BPRJCODE,TMSTAMP
"RTN","BPSTEST",434,0)
 S BPRJCODE=$$PROMPT^BPSSCRU4("Enter a reject code for reversal")
"RTN","BPSTEST",435,0)
 I $P(BPRJCODE,U)="" Q
"RTN","BPSTEST",436,0)
 I $P(BPRJCODE,U)=0 Q
"RTN","BPSTEST",437,0)
 N X,X1,X2
"RTN","BPSTEST",438,0)
 S X1=DT,X2=2 D C^%DTC
"RTN","BPSTEST",439,0)
 S ^XTMP("BPSTEST",0)=X_U_DT_U_"ECME TESTING TOOL, SEE BPSTEST ROUTINE"
"RTN","BPSTEST",440,0)
 S ^XTMP("BPSTEST",BPSTRANS)=$P(BPRJCODE,U)
"RTN","BPSTEST",441,0)
 Q
"RTN","BPSTEST",442,0)
 ;
"RTN","BPSVRX")
0^15^B237122038
"RTN","BPSVRX",1,0)
BPSVRX ;ALB/ESG - View ECME Prescription ;5/23/2011
"RTN","BPSVRX",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**11,23**;JUN 2004;Build 44
"RTN","BPSVRX",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSVRX",4,0)
 ;
"RTN","BPSVRX",5,0)
 ; Reference to $$RXBILL^IBNCPUT3 supported by IA #5355
"RTN","BPSVRX",6,0)
 ; Reference to RX^PSO52API supported by IA #4820
"RTN","BPSVRX",7,0)
 ; Reference to $$RXNUM^PSOBPSU2 supported by IA #4970
"RTN","BPSVRX",8,0)
 ; Reference to DIC^PSODI supported by IA #4858
"RTN","BPSVRX",9,0)
 ; Reference to DIQ^PSODI supported by IA #4858
"RTN","BPSVRX",10,0)
 ; Reference to $$CTRL^XMXUTIL1 supported by IA #2735
"RTN","BPSVRX",11,0)
 ; Reference to $$TRIM^XLFSTR supported by IA #10104
"RTN","BPSVRX",12,0)
 ;
"RTN","BPSVRX",13,0)
 N VALMCNT,VALMQUIT,VALMBG,BPSVRXCLM,DFN,RXIEN,FILL,VIEWTYPE
"RTN","BPSVRX",14,0)
 D EN^VALM("BPS VIEW ECME RX")
"RTN","BPSVRX",15,0)
 K BPSVRX
"RTN","BPSVRX",16,0)
 Q
"RTN","BPSVRX",17,0)
 ;
"RTN","BPSVRX",18,0)
HDR ; -- header code
"RTN","BPSVRX",19,0)
 N V1,V2,VADM,DFN,VA,VAERR
"RTN","BPSVRX",20,0)
 S RXIEN=$G(RXIEN),FILL=$G(FILL)
"RTN","BPSVRX",21,0)
 S V1=$$LJ^XLFSTR("Rx#: "_$$RXNUM^BPSSCRU2(RXIEN)_"/"_FILL,19)
"RTN","BPSVRX",22,0)
 S V1=V1_$$LJ^XLFSTR("ECME#: "_$P($$CLAIM^BPSBUTL(RXIEN,FILL),U,6),21)
"RTN","BPSVRX",23,0)
 S V1=V1_"Drug: "_$E($$RXAPI1^BPSUTIL1(RXIEN,6),1,34)
"RTN","BPSVRX",24,0)
 S VALMHDR(1)=V1
"RTN","BPSVRX",25,0)
 ;
"RTN","BPSVRX",26,0)
 S DFN=+$$RXAPI1^BPSUTIL1(RXIEN,2,"I")
"RTN","BPSVRX",27,0)
 D DEM^VADPT
"RTN","BPSVRX",28,0)
 S V2=$$LJ^XLFSTR("Patient: "_$E($G(VADM(1)),1,30)_" ("_$G(VA("BID"))_")",48)
"RTN","BPSVRX",29,0)
 S V2=V2_$$LJ^XLFSTR("Sex: "_$P($G(VADM(5)),U,1),8)
"RTN","BPSVRX",30,0)
 S V2=V2_$$LJ^XLFSTR("DOB: "_$$FMTE^XLFDT($P($G(VADM(3)),U,1),"2Z")_" ("_$G(VADM(4))_")",22)
"RTN","BPSVRX",31,0)
 S VALMHDR(2)=V2
"RTN","BPSVRX",32,0)
 Q
"RTN","BPSVRX",33,0)
 ;
"RTN","BPSVRX",34,0)
HELP ; -- help code
"RTN","BPSVRX",35,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","BPSVRX",36,0)
 Q
"RTN","BPSVRX",37,0)
 ;
"RTN","BPSVRX",38,0)
EXIT ; -- ListManager exit code
"RTN","BPSVRX",39,0)
 K ^TMP("BPSVRX",$J)
"RTN","BPSVRX",40,0)
 Q
"RTN","BPSVRX",41,0)
 ;
"RTN","BPSVRX",42,0)
INIT(BPSVRX) ; ListManager entry point
"RTN","BPSVRX",43,0)
 N BPSVRXQ,BPSFL
"RTN","BPSVRX",44,0)
 ;
"RTN","BPSVRX",45,0)
 ; Array entries may or may not be set-up by external calling applications.
"RTN","BPSVRX",46,0)
 ;
"RTN","BPSVRX",47,0)
 ; BPSVRX("RXIEN") - Rx ien
"RTN","BPSVRX",48,0)
 ; BPSVRX("FILL#") - fill#
"RTN","BPSVRX",49,0)
 ;
"RTN","BPSVRX",50,0)
 ; All array entries are optional.  If not defined, then the system will prompt the user.  First thing to do
"RTN","BPSVRX",51,0)
 ; is figure out what data is defined upon entry to this routine.
"RTN","BPSVRX",52,0)
 ;
"RTN","BPSVRX",53,0)
 ; check Rx
"RTN","BPSVRX",54,0)
 S RXIEN=+$G(BPSVRX("RXIEN"))
"RTN","BPSVRX",55,0)
 I 'RXIEN K BPSVRX G INIT1   ; no Rx
"RTN","BPSVRX",56,0)
 I $$RXAPI1^BPSUTIL1(RXIEN,.01,"E")="" K BPSVRX G INIT1   ; invalid Rx
"RTN","BPSVRX",57,0)
 S DFN=+$$RXAPI1^BPSUTIL1(RXIEN,2,"I")
"RTN","BPSVRX",58,0)
 I 'DFN K BPSVRX,DFN G INIT1   ; invalid patient ien
"RTN","BPSVRX",59,0)
 ;
"RTN","BPSVRX",60,0)
 ; RXIEN is good, check fill#
"RTN","BPSVRX",61,0)
 S FILL=$G(BPSVRX("FILL#"))
"RTN","BPSVRX",62,0)
 I FILL="" G INIT2   ; rx is OK, fill# is not known
"RTN","BPSVRX",63,0)
 I FILL=0 G INIT3    ; rx is OK, original fill OK
"RTN","BPSVRX",64,0)
 I $$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,FILL,.01,"I") G INIT3   ; fill OK - fill date found in 52.1
"RTN","BPSVRX",65,0)
 D RFL(RXIEN,.BPSFL) I $D(BPSFL(FILL)) G INIT3   ; fill OK - found in BPS Transaction
"RTN","BPSVRX",66,0)
 ;
"RTN","BPSVRX",67,0)
 ; fill# is not valid so prompt for it
"RTN","BPSVRX",68,0)
 G INIT2
"RTN","BPSVRX",69,0)
 ;
"RTN","BPSVRX",70,0)
 ;-------------------------------------------------
"RTN","BPSVRX",71,0)
 ;
"RTN","BPSVRX",72,0)
INIT1 ; internal branch point to perform all prompts (Rx, fill#, view type)
"RTN","BPSVRX",73,0)
 S RXIEN=$$RXP()
"RTN","BPSVRX",74,0)
 I $G(BPSVRXQ) S VALMQUIT=1 G INITX
"RTN","BPSVRX",75,0)
 S DFN=+$P(RXIEN,U,2),RXIEN=+$P(RXIEN,U,1)
"RTN","BPSVRX",76,0)
 I 'RXIEN!'DFN S VALMQUIT=1 G INITX
"RTN","BPSVRX",77,0)
 ;
"RTN","BPSVRX",78,0)
INIT2 ; internal branch point for fill# prompt and view type prompt
"RTN","BPSVRX",79,0)
 S FILL=$$FILLP(RXIEN,DFN)
"RTN","BPSVRX",80,0)
 I $G(BPSVRXQ) S VALMQUIT=1 G INITX
"RTN","BPSVRX",81,0)
 I FILL="" S VALMQUIT=1 G INITX
"RTN","BPSVRX",82,0)
 ;
"RTN","BPSVRX",83,0)
INIT3 ; internal branch point for view type prompt
"RTN","BPSVRX",84,0)
 S VIEWTYPE=$$VTP(RXIEN,FILL)
"RTN","BPSVRX",85,0)
 I $G(BPSVRXQ) S VALMQUIT=1 G INITX
"RTN","BPSVRX",86,0)
 I VIEWTYPE'="M",VIEWTYPE'="A" S VALMQUIT=1 G INITX
"RTN","BPSVRX",87,0)
 ;
"RTN","BPSVRX",88,0)
 ; Build list
"RTN","BPSVRX",89,0)
 D BUILD(RXIEN,FILL,VIEWTYPE)
"RTN","BPSVRX",90,0)
 ;
"RTN","BPSVRX",91,0)
INITX ; finished with the INIT code to initially build the list
"RTN","BPSVRX",92,0)
 Q
"RTN","BPSVRX",93,0)
 ;
"RTN","BPSVRX",94,0)
RXP() ; prompt the user to enter the prescription
"RTN","BPSVRX",95,0)
 ; output value of function is RXIEN^DFN
"RTN","BPSVRX",96,0)
 ; return BPSVRXQ=1 to exit option
"RTN","BPSVRX",97,0)
 ;
"RTN","BPSVRX",98,0)
 N RXIEN,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT,DIC,DR,DA,D0,DIQ,BPSRXD,PSODIY,RXN,DFN,PNM,DRUG,RXST
"RTN","BPSVRX",99,0)
RXPR ;
"RTN","BPSVRX",100,0)
 S RXIEN="",DFN=""
"RTN","BPSVRX",101,0)
 S DIR(0)="FAO"
"RTN","BPSVRX",102,0)
 S DIR("A")="Select Prescription: "
"RTN","BPSVRX",103,0)
 S DIR("?",1)=" A prescription number or ECME number may be entered.  To look-up a"
"RTN","BPSVRX",104,0)
 S DIR("?",2)=" prescription by the ECME number, please enter ""E."" followed by the ECME"
"RTN","BPSVRX",105,0)
 S DIR("?")=" number with or without any leading zeros."
"RTN","BPSVRX",106,0)
 W ! D ^DIR K DIR
"RTN","BPSVRX",107,0)
 I X=""!$D(DIRUT) S BPSVRXQ=1 G RXPX
"RTN","BPSVRX",108,0)
 S X=$$UP^XLFSTR(X)
"RTN","BPSVRX",109,0)
 ;
"RTN","BPSVRX",110,0)
 ; ECME# lookup
"RTN","BPSVRX",111,0)
 I $E(X,1,2)="E." S RXIEN=+$$RXNUM^PSOBPSU2($E(X,3,$L(X))) G RXP1     ; DBIA #4970
"RTN","BPSVRX",112,0)
 ;
"RTN","BPSVRX",113,0)
 ; Rx# lookup
"RTN","BPSVRX",114,0)
 S DIC=52
"RTN","BPSVRX",115,0)
 S DIC(0)="E"
"RTN","BPSVRX",116,0)
 S DIC("S")="I $P($G(^(0)),U,2),$D(^(""STA"")),$P($G(^(""STA"")),U,1)'=13"
"RTN","BPSVRX",117,0)
 W ! D DIC^PSODI(52,.DIC,X) K DIC    ; DBIA# 4858
"RTN","BPSVRX",118,0)
 S RXIEN=+Y
"RTN","BPSVRX",119,0)
 ;
"RTN","BPSVRX",120,0)
RXP1 ;
"RTN","BPSVRX",121,0)
 ;
"RTN","BPSVRX",122,0)
 I RXIEN'>0 W "   Invalid selection. Please try again.",$C(7) G RXPR    ; start over
"RTN","BPSVRX",123,0)
 ;
"RTN","BPSVRX",124,0)
 ; Display Rx data and get confirmation to proceed
"RTN","BPSVRX",125,0)
 S DIC=52,DR=".01;2;6;100",DA=RXIEN,DIQ="BPSRXD",DIQ(0)="IE"
"RTN","BPSVRX",126,0)
 D DIQ^PSODI(52,DIC,DR,DA,.DIQ)    ; DBIA# 4858
"RTN","BPSVRX",127,0)
 S RXN=$G(BPSRXD(52,DA,.01,"E"))
"RTN","BPSVRX",128,0)
 S DFN=+$G(BPSRXD(52,DA,2,"I"))
"RTN","BPSVRX",129,0)
 S PNM=$G(BPSRXD(52,DA,2,"E"))
"RTN","BPSVRX",130,0)
 S DRUG=$G(BPSRXD(52,DA,6,"E"))
"RTN","BPSVRX",131,0)
 S RXST=$G(BPSRXD(52,DA,100,"E"))
"RTN","BPSVRX",132,0)
 W !!?1,"Patient",?25,"Rx#",?37,"Drug Name",?63,"Rx Status"
"RTN","BPSVRX",133,0)
 W !?1,$E(PNM,1,23),?25,RXN,?37,$E(DRUG,1,25),?63,$E(RXST,1,16),!
"RTN","BPSVRX",134,0)
 ;
"RTN","BPSVRX",135,0)
 I $$YESNO^BPSSCRRS("OK to continue","Yes")<1 G RXPR    ; start over
"RTN","BPSVRX",136,0)
 ;
"RTN","BPSVRX",137,0)
RXPX ;
"RTN","BPSVRX",138,0)
 Q RXIEN_U_DFN
"RTN","BPSVRX",139,0)
 ;
"RTN","BPSVRX",140,0)
FILLP(RXIEN,DFN) ; prompt for a fill# given the RXIEN and DFN
"RTN","BPSVRX",141,0)
 ; return BPSVRXQ=1 to exit option
"RTN","BPSVRX",142,0)
 ;
"RTN","BPSVRX",143,0)
 N FILL,BPFLZ,RF,FLDT,RELDT,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT,CNT,BSTR,BPSFL
"RTN","BPSVRX",144,0)
 S FILL=""
"RTN","BPSVRX",145,0)
 I '$G(RXIEN)!'$G(DFN) G FILLX
"RTN","BPSVRX",146,0)
 ;
"RTN","BPSVRX",147,0)
 K ^TMP($J,"BPSP"),BPFLZ
"RTN","BPSVRX",148,0)
 D RX^PSO52API(DFN,"BPSP",RXIEN,,"2,R")    ; DBIA# 4820
"RTN","BPSVRX",149,0)
 S RF=0 F  S RF=$O(^TMP($J,"BPSP",DFN,RXIEN,"RF",RF)) Q:'RF  D
"RTN","BPSVRX",150,0)
 . S FLDT=+$G(^TMP($J,"BPSP",DFN,RXIEN,"RF",RF,.01))\1   ; fill date
"RTN","BPSVRX",151,0)
 . S RELDT=+$G(^TMP($J,"BPSP",DFN,RXIEN,"RF",RF,17))\1   ; release date
"RTN","BPSVRX",152,0)
 . S BPFLZ(RF)=FLDT_U_RELDT
"RTN","BPSVRX",153,0)
 . Q
"RTN","BPSVRX",154,0)
 ;
"RTN","BPSVRX",155,0)
 ; add original fill date and original release date to local array
"RTN","BPSVRX",156,0)
 S FLDT=+$G(^TMP($J,"BPSP",DFN,RXIEN,22))\1    ; original fill date
"RTN","BPSVRX",157,0)
 S RELDT=+$G(^TMP($J,"BPSP",DFN,RXIEN,31))\1   ; original release date
"RTN","BPSVRX",158,0)
 S BPFLZ(0)=FLDT_U_RELDT
"RTN","BPSVRX",159,0)
 ;
"RTN","BPSVRX",160,0)
 ; check for any deleted fills that have ECME activity
"RTN","BPSVRX",161,0)
 D RFL(RXIEN,.BPSFL)
"RTN","BPSVRX",162,0)
 S RF="" F  S RF=$O(BPSFL(RF)) Q:RF=""  I '$D(BPFLZ(RF)) S BPFLZ(RF)=0_U_0
"RTN","BPSVRX",163,0)
 ;
"RTN","BPSVRX",164,0)
 S DIR(0)="S"
"RTN","BPSVRX",165,0)
 S DIR("L",1)="Rx# "_$G(^TMP($J,"BPSP",DFN,RXIEN,.01))_" has the following fills:"
"RTN","BPSVRX",166,0)
 S DIR("L",2)=""
"RTN","BPSVRX",167,0)
 S DIR("L",3)="    Fill#   Fill Date     Release Date"
"RTN","BPSVRX",168,0)
 S DIR("L",4)="    -----   ----------    ------------"
"RTN","BPSVRX",169,0)
 S CNT=0,BSTR=""
"RTN","BPSVRX",170,0)
 S RF="" F  S RF=$O(BPFLZ(RF)) Q:RF=""  D
"RTN","BPSVRX",171,0)
 . S CNT=CNT+1
"RTN","BPSVRX",172,0)
 . S FLDT=$$FMTE^XLFDT($P(BPFLZ(RF),U,1),"5Z") I 'FLDT S FLDT="    -     "
"RTN","BPSVRX",173,0)
 . S RELDT=$$FMTE^XLFDT($P(BPFLZ(RF),U,2),"5Z") I 'RELDT S RELDT="    -     "
"RTN","BPSVRX",174,0)
 . I 'FLDT,'RELDT S (FLDT,RELDT)=" Deleted  "
"RTN","BPSVRX",175,0)
 . S $P(BSTR,";",CNT)=RF_":"_FLDT_"    "_RELDT
"RTN","BPSVRX",176,0)
 . S DIR("L",CNT+4)=$J(RF,7)_"     "_FLDT_"    "_RELDT
"RTN","BPSVRX",177,0)
 . Q
"RTN","BPSVRX",178,0)
 S DIR("L")=" "
"RTN","BPSVRX",179,0)
 S $P(DIR(0),U,2)=BSTR
"RTN","BPSVRX",180,0)
 S DIR("A")="Select Fill Number"
"RTN","BPSVRX",181,0)
 I CNT=1 D
"RTN","BPSVRX",182,0)
 . S DIR("B")=$O(BPFLZ(""))     ; default if there is only 1 fill
"RTN","BPSVRX",183,0)
 . S $P(DIR("L",1)," ",$L(DIR("L",1)," "))="fill:"    ; singular
"RTN","BPSVRX",184,0)
 . Q
"RTN","BPSVRX",185,0)
 W ! D ^DIR K DIR
"RTN","BPSVRX",186,0)
 I Y=""!$D(DIRUT) S BPSVRXQ=1 G FILLX
"RTN","BPSVRX",187,0)
 S FILL=Y
"RTN","BPSVRX",188,0)
 ;
"RTN","BPSVRX",189,0)
FILLX ;
"RTN","BPSVRX",190,0)
 K ^TMP($J,"BPSP")
"RTN","BPSVRX",191,0)
 Q FILL
"RTN","BPSVRX",192,0)
 ;
"RTN","BPSVRX",193,0)
VTP(RXIEN,FILL) ; prompt for the view type of this report
"RTN","BPSVRX",194,0)
 ; Most recent ECME transaction or All ECME transactions
"RTN","BPSVRX",195,0)
 ; Output value of function is "M" or "A".
"RTN","BPSVRX",196,0)
 ; return BPSVRXQ=1 to exit option
"RTN","BPSVRX",197,0)
 ;
"RTN","BPSVRX",198,0)
 N VIEWTYPE,TOT,COB,IEN59,BP57,T1,T2,T3,MTXT,ATXT,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","BPSVRX",199,0)
 N BPSVRXIB,IBIFN,IBC,IBA,IB,BPSVRXCAN
"RTN","BPSVRX",200,0)
 S VIEWTYPE=""
"RTN","BPSVRX",201,0)
 I '$G(RXIEN) G VTPX
"RTN","BPSVRX",202,0)
 I $G(FILL)="" G VTPX
"RTN","BPSVRX",203,0)
 ;
"RTN","BPSVRX",204,0)
 ; count up the number of ECME transactions on file (total and by COB)
"RTN","BPSVRX",205,0)
 K TOT
"RTN","BPSVRX",206,0)
 F COB=1:1:3 S IEN59=$$IEN59^BPSOSRX(RXIEN,FILL,COB) D
"RTN","BPSVRX",207,0)
 . I IEN59="" Q
"RTN","BPSVRX",208,0)
 . S BP57=0 F  S BP57=$O(^BPSTL("B",IEN59,BP57)) Q:'BP57  S TOT=$G(TOT)+1,TOT(COB)=$G(TOT(COB))+1
"RTN","BPSVRX",209,0)
 . Q
"RTN","BPSVRX",210,0)
 S TOT=+$G(TOT),T1=+$G(TOT(1)),T2=+$G(TOT(2)),T3=+$G(TOT(3))
"RTN","BPSVRX",211,0)
 ;
"RTN","BPSVRX",212,0)
 ; if 0 ECME transactions found, then no need to ask this next question
"RTN","BPSVRX",213,0)
 I TOT=0 S VIEWTYPE="M" G VTPCB
"RTN","BPSVRX",214,0)
 ;
"RTN","BPSVRX",215,0)
 S DIR(0)="S"
"RTN","BPSVRX",216,0)
 I TOT=1 S DIR("A",1)="  There is 1 ECME transaction for this Rx/fill."
"RTN","BPSVRX",217,0)
 E  S DIR("A",1)="  There are "_TOT_" ECME transactions for this Rx/fill."
"RTN","BPSVRX",218,0)
 S DIR("A",2)="  "
"RTN","BPSVRX",219,0)
 I T2!T3 S DIR("A",2)="  "_T1_" for the primary payer"_$S(T2:", "_T2_" for the secondary payer",1:"")_$S(T3:", "_T3_" for the tertiary payer",1:"")_".",DIR("A",3)="  "
"RTN","BPSVRX",220,0)
 S MTXT="Most recent transaction"_$S(T2!T3:" for each payer",1:"")
"RTN","BPSVRX",221,0)
 S ATXT="All transactions"
"RTN","BPSVRX",222,0)
 S DIR("A")="Select "_MTXT_" or "_ATXT
"RTN","BPSVRX",223,0)
 S DIR("B")="M"
"RTN","BPSVRX",224,0)
 S $P(DIR(0),U,2)="M:"_MTXT_";A:"_ATXT
"RTN","BPSVRX",225,0)
 W ! D ^DIR K DIR
"RTN","BPSVRX",226,0)
 I Y=""!$D(DIRUT) S BPSVRXQ=1 G VTPX
"RTN","BPSVRX",227,0)
 S VIEWTYPE=Y
"RTN","BPSVRX",228,0)
 ;
"RTN","BPSVRX",229,0)
VTPCB ;
"RTN","BPSVRX",230,0)
 ; check for cancelled bills and ask how they should be handled
"RTN","BPSVRX",231,0)
 K BPSVRXCLM
"RTN","BPSVRX",232,0)
 I $$RXBILL^IBNCPUT3(RXIEN,FILL,"","",.BPSVRXIB)   ; build a list of all bills for Rx/fill# (IA #5355)
"RTN","BPSVRX",233,0)
 S (IBIFN,IBC,IBA)=0 F  S IBIFN=$O(BPSVRXIB(IBIFN)) Q:'IBIFN  D
"RTN","BPSVRX",234,0)
 . S IB=$G(BPSVRXIB(IBIFN))
"RTN","BPSVRX",235,0)
 . I $P(IB,U,8)=7!($P(IB,U,2)="CB")!($P(IB,U,2)="CN") S IBC=IBC+1,BPSVRXCLM(IBIFN)=0 Q  ; cancelled bill
"RTN","BPSVRX",236,0)
 . S IBA=IBA+1  ; non-cancelled bill
"RTN","BPSVRX",237,0)
 . S BPSVRXCLM(IBIFN)=1
"RTN","BPSVRX",238,0)
 . Q
"RTN","BPSVRX",239,0)
 S BPSVRXCLM=IBA+IBC
"RTN","BPSVRX",240,0)
 ;
"RTN","BPSVRX",241,0)
 I IBC=0 G VTPX   ; no cancelled bills found so no further questions
"RTN","BPSVRX",242,0)
 ;
"RTN","BPSVRX",243,0)
 I IBC,IBA S DIR("A",1)="  "_IBA_" non-cancelled bill"_$S(IBA=1:"",1:"s")_" and "_IBC_" cancelled bill"_$S(IBC=1:"",1:"s")_" exist for this Rx/fill."
"RTN","BPSVRX",244,0)
 I IBC,'IBA S DIR("A",1)="  "_IBC_" cancelled bill"_$S(IBC=1:"",1:"s")_", but no active bills exist for this Rx/fill."
"RTN","BPSVRX",245,0)
 I IBA S DIR("A",2)="  The non-cancelled bill"_$S(IBA=1:"",1:"s")_" will automatically be included.",DIR("A",3)="  "
"RTN","BPSVRX",246,0)
 I 'IBA S DIR("A",2)="  "
"RTN","BPSVRX",247,0)
 S DIR("A")="Do you want to include the cancelled bill"_$S(IBC=1:"",1:"s")
"RTN","BPSVRX",248,0)
 S DIR("B")="No"
"RTN","BPSVRX",249,0)
 S DIR(0)="Y"
"RTN","BPSVRX",250,0)
 W ! D ^DIR K DIR
"RTN","BPSVRX",251,0)
 I Y=""!$D(DIRUT) S BPSVRXQ=1 G VTPX
"RTN","BPSVRX",252,0)
 S BPSVRXCAN=Y
"RTN","BPSVRX",253,0)
 ;
"RTN","BPSVRX",254,0)
 ; If the user wants cancelled bills, then no changes to the BPSVRXCLM list are needed so get out
"RTN","BPSVRX",255,0)
 I BPSVRXCAN G VTPX
"RTN","BPSVRX",256,0)
 ;
"RTN","BPSVRX",257,0)
 ; If the user does not want cancelled bills, then remove them from the BPSVRXCLM list
"RTN","BPSVRX",258,0)
 S IBIFN=0 F  S IBIFN=$O(BPSVRXCLM(IBIFN)) Q:'IBIFN  I 'BPSVRXCLM(IBIFN) K BPSVRXCLM(IBIFN)
"RTN","BPSVRX",259,0)
 S BPSVRXCLM=IBA
"RTN","BPSVRX",260,0)
 ;
"RTN","BPSVRX",261,0)
VTPX ;
"RTN","BPSVRX",262,0)
 Q VIEWTYPE
"RTN","BPSVRX",263,0)
 ;
"RTN","BPSVRX",264,0)
BUILD(RXIEN,FILL,VIEWTYPE) ; build list
"RTN","BPSVRX",265,0)
 ; This is called in the INIT section to build the ListMan scratch global
"RTN","BPSVRX",266,0)
 ; all parameters are required and must exist when this is called
"RTN","BPSVRX",267,0)
 ;
"RTN","BPSVRX",268,0)
 S BPSVRX=1   ; special variable indicating this is the driver routine
"RTN","BPSVRX",269,0)
 I '$D(ZTQUEUED) W !
"RTN","BPSVRX",270,0)
 K ^TMP("BPSVRX",$J)    ; initialize display array
"RTN","BPSVRX",271,0)
 ;
"RTN","BPSVRX",272,0)
 D VIEWRX^BPSVRX1(RXIEN,FILL,VIEWTYPE,1)            ; View Prescriptions [PSO VIEW]
"RTN","BPSVRX",273,0)
 D LOG^BPSVRX1(RXIEN,FILL,VIEWTYPE,2)               ; ECME Print Claim Log
"RTN","BPSVRX",274,0)
 D BILL^BPSVRX1(RXIEN,FILL,VIEWTYPE,3)              ; IB ECME Billing Events Report
"RTN","BPSVRX",275,0)
 ; Comment out SD until US1401 is coded
"RTN","BPSVRX",276,0)
 ; D SD^BPSVRX3(RXIEN,FILL,VIEWTYPE,4)               ; SD Sensitive Drug
"RTN","BPSVRX",277,0)
 D CRI^BPSVRX1(RXIEN,FILL,VIEWTYPE,5)               ; ECME Claims-Response Inquiry Report
"RTN","BPSVRX",278,0)
 D INS^BPSVRX1(RXIEN,FILL,VIEWTYPE,6)               ; View Pharmacy Insurance policies
"RTN","BPSVRX",279,0)
 D TPJILST^BPSVRX1(RXIEN,FILL,VIEWTYPE,7)           ; List of TPJI-eligible bills
"RTN","BPSVRX",280,0)
 D MP^BPSVRX3(RXIEN,FILL,VIEWTYPE,8)               ; MP Medication Profile
"RTN","BPSVRX",281,0)
 D TPJICI^BPSVRX1(RXIEN,FILL,VIEWTYPE,9)            ; TPJI - Claim Information
"RTN","BPSVRX",282,0)
 D TPJIARP^BPSVRX1(RXIEN,FILL,VIEWTYPE,10)           ; TPJI - AR Account Profile
"RTN","BPSVRX",283,0)
 D TPJIARCH^BPSVRX1(RXIEN,FILL,VIEWTYPE,11)          ; TPJI - AR Comment History
"RTN","BPSVRX",284,0)
 D TPJIECME^BPSVRX1(RXIEN,FILL,VIEWTYPE,12)         ; TPJI - ECME Rx Response Info
"RTN","BPSVRX",285,0)
 D DGELST^BPSVRX2(RXIEN,FILL,VIEWTYPE,13)           ; View Registration Elig Status
"RTN","BPSVRX",286,0)
 D DGELV^BPSVRX2(RXIEN,FILL,VIEWTYPE,14)            ; View Registration Elig Verification
"RTN","BPSVRX",287,0)
 ;
"RTN","BPSVRX",288,0)
BUILDX ;
"RTN","BPSVRX",289,0)
 Q
"RTN","BPSVRX",290,0)
 ;
"RTN","BPSVRX",291,0)
NAV(SNUM) ; ListMan nav jumping
"RTN","BPSVRX",292,0)
 S VALMBG=$G(BPSVRX("LISTNAV",SNUM),1)   ; default to 1 if not defined
"RTN","BPSVRX",293,0)
NAVX ;
"RTN","BPSVRX",294,0)
 Q
"RTN","BPSVRX",295,0)
 ;
"RTN","BPSVRX",296,0)
UPDATE(DISP,HDR,TITLE,NAME,SNUM) ; update the BPSVRX ListMan display array
"RTN","BPSVRX",297,0)
 ;  DISP - display array to be merged into ^TMP("BPSVRX",$J)
"RTN","BPSVRX",298,0)
 ;         Assmues display lines are found in @DISP@(N,0)
"RTN","BPSVRX",299,0)
 ;   HDR - header data array (i.e. VALMHDR data); HDR(1)=line 1; HDR(2)=line 2; etc.
"RTN","BPSVRX",300,0)
 ; TITLE - title of section (i.e. VALM("TITLE")
"RTN","BPSVRX",301,0)
 ;  NAME - name/description of section being added (required)
"RTN","BPSVRX",302,0)
 ;  SNUM - section number used for ListMan navigational jumps (required)
"RTN","BPSVRX",303,0)
 ;
"RTN","BPSVRX",304,0)
 N LN,Z,NODATA,BPSVID
"RTN","BPSVRX",305,0)
 ;
"RTN","BPSVRX",306,0)
 S LN=+$O(^TMP("BPSVRX",$J,""),-1)   ; last line# used in display array
"RTN","BPSVRX",307,0)
 ;
"RTN","BPSVRX",308,0)
 ; display name of section centered and reverse video
"RTN","BPSVRX",309,0)
 I $G(NAME)'="" D
"RTN","BPSVRX",310,0)
 . S LN=LN+1,^TMP("BPSVRX",$J,LN,0)=$$CJ^XLFSTR(NAME,80)
"RTN","BPSVRX",311,0)
 . D CNTRL^VALM10(LN,1,80,IORVON,IORVOFF)  ; reverse video line
"RTN","BPSVRX",312,0)
 . I '$D(BPSVRX("LISTNAV",SNUM)) S BPSVRX("LISTNAV",SNUM)=LN   ; store 1st line# of each section
"RTN","BPSVRX",313,0)
 . Q
"RTN","BPSVRX",314,0)
 ;
"RTN","BPSVRX",315,0)
 ; merge in the ListMan title if one exists
"RTN","BPSVRX",316,0)
 I $G(TITLE)'="" D
"RTN","BPSVRX",317,0)
 . S LN=LN+1,^TMP("BPSVRX",$J,LN,0)=$$FLN(LN,TITLE)
"RTN","BPSVRX",318,0)
 . D CNTRL^VALM10(LN,1,80,IOUON,IOUOFF)    ; display a line under the title
"RTN","BPSVRX",319,0)
 . Q
"RTN","BPSVRX",320,0)
 ;
"RTN","BPSVRX",321,0)
 ; merge in header data if this array exists
"RTN","BPSVRX",322,0)
 I $O(HDR(0)) D
"RTN","BPSVRX",323,0)
 . S Z=0 F  S Z=$O(HDR(Z)) Q:'Z  S LN=LN+1,^TMP("BPSVRX",$J,LN,0)=$$FLN(LN,$G(HDR(Z)))
"RTN","BPSVRX",324,0)
 . D CNTRL^VALM10(LN,1,80,IOUON,IOUOFF)    ; display a line under the header data
"RTN","BPSVRX",325,0)
 . Q
"RTN","BPSVRX",326,0)
 ;
"RTN","BPSVRX",327,0)
 ; merge in display array
"RTN","BPSVRX",328,0)
 S BPSVID="VALM VIDEO"
"RTN","BPSVRX",329,0)
 I DISP="" S DISP="NODATA"
"RTN","BPSVRX",330,0)
 S Z=0 F  S Z=$O(@DISP@(Z)) Q:'Z  S LN=LN+1,^TMP("BPSVRX",$J,LN,0)=$G(@DISP@(Z,0)) D
"RTN","BPSVRX",331,0)
 . ; check for video attributes to be duplicated
"RTN","BPSVRX",332,0)
 . I '$D(^TMP(BPSVID,$J,999,Z)) Q  ; no video attributes on this line
"RTN","BPSVRX",333,0)
 . M ^TMP(BPSVID,$J,VALMEVL,LN)=^TMP(BPSVID,$J,999,Z)   ; copy video attributes
"RTN","BPSVRX",334,0)
 . K ^TMP(BPSVID,$J,999,Z)   ; clean-up
"RTN","BPSVRX",335,0)
 . Q
"RTN","BPSVRX",336,0)
 ;
"RTN","BPSVRX",337,0)
 ; display a message if no data found for this section
"RTN","BPSVRX",338,0)
 I '$O(@DISP@(0)) D
"RTN","BPSVRX",339,0)
 . S LN=LN+1,^TMP("BPSVRX",$J,LN,0)="   "
"RTN","BPSVRX",340,0)
 . S LN=LN+1,^TMP("BPSVRX",$J,LN,0)="       <No data found for this section>"
"RTN","BPSVRX",341,0)
 . S LN=LN+1,^TMP("BPSVRX",$J,LN,0)="   "
"RTN","BPSVRX",342,0)
 . Q
"RTN","BPSVRX",343,0)
 ;
"RTN","BPSVRX",344,0)
 ; update the number of lines in the list
"RTN","BPSVRX",345,0)
 S VALMCNT=LN
"RTN","BPSVRX",346,0)
 ;
"RTN","BPSVRX",347,0)
UPDX ;
"RTN","BPSVRX",348,0)
 Q
"RTN","BPSVRX",349,0)
 ;
"RTN","BPSVRX",350,0)
FLN(LINE,DATA) ; format line# LINE by reproducing any video attributes found in string DATA
"RTN","BPSVRX",351,0)
 N VARON,VAROFF,FINDON,FINDOFF,COL,WIDTH
"RTN","BPSVRX",352,0)
 ;
"RTN","BPSVRX",353,0)
 F VARON="IOBON","IORVON","IOUON","IOINHI" D   ; on attribute
"RTN","BPSVRX",354,0)
 . S VAROFF=$S(VARON="IOBON":"IOBOFF",VARON="IORVON":"IORVOFF",VARON="IOUON":"IOUOFF",1:"IOINORM")  ; off attribute
"RTN","BPSVRX",355,0)
 . F  S FINDON=$F(DATA,@VARON) Q:'FINDON  D
"RTN","BPSVRX",356,0)
 .. S COL=FINDON-$L(@VARON)      ; starting column for video attribute
"RTN","BPSVRX",357,0)
 .. S FINDOFF=$F(DATA,@VAROFF)   ; see if off attribute is also found
"RTN","BPSVRX",358,0)
 .. I FINDOFF S WIDTH=FINDOFF-COL-$L(@VARON)-$L(@VAROFF)    ; width of affected text between on and off attributes
"RTN","BPSVRX",359,0)
 .. I 'FINDOFF S WIDTH=$L(DATA)-COL-$L(@VARON)              ; width of affected text (thru the end of the string)
"RTN","BPSVRX",360,0)
 .. D CNTRL^VALM10(LINE,COL,WIDTH,@VARON,@VAROFF)           ; save the video attribute using Listman API
"RTN","BPSVRX",361,0)
 .. S DATA=$P(DATA,@VARON,1)_$P(DATA,@VARON,2,999)                  ; remove 1st on attribute
"RTN","BPSVRX",362,0)
 .. I FINDOFF S DATA=$P(DATA,@VAROFF,1)_$P(DATA,@VAROFF,2,999)      ; remove 1st off attribute
"RTN","BPSVRX",363,0)
 .. Q
"RTN","BPSVRX",364,0)
 . Q
"RTN","BPSVRX",365,0)
 I DATA="" S DATA="    "  ; blank lines need to be non-nil so video attributes may exist for them
"RTN","BPSVRX",366,0)
FLNX ;
"RTN","BPSVRX",367,0)
 Q DATA
"RTN","BPSVRX",368,0)
 ;
"RTN","BPSVRX",369,0)
HFS(SECTION,RTN,VRXHDR,HDRARY,BPSVRXKQ) ; output data to scratch host file and merge into ListMan display array
"RTN","BPSVRX",370,0)
 ;  SECTION - section code (e.g. "BER" - billing events report, "CRI" - claims-response inquiry)
"RTN","BPSVRX",371,0)
 ;      RTN - tag^routine to invoke to produce the report
"RTN","BPSVRX",372,0)
 ;   VRXHDR - name of section to appear at the start of the display
"RTN","BPSVRX",373,0)
 ;   HDRARY - header array
"RTN","BPSVRX",374,0)
 ; BPSVRXKQ - section#
"RTN","BPSVRX",375,0)
 ;
"RTN","BPSVRX",376,0)
 N BPSHANDLE,BPSVDIR,BPSVFILE,HDR,POP,GLO,BPSARR,BVZ,BV1
"RTN","BPSVRX",377,0)
 ;
"RTN","BPSVRX",378,0)
 ; create a host file to write the data
"RTN","BPSVRX",379,0)
 S SECTION="BPSVRX_"_$G(SECTION)
"RTN","BPSVRX",380,0)
 S BPSHANDLE=SECTION_"_"_$J
"RTN","BPSVRX",381,0)
 S BPSVDIR=$$DEFDIR^%ZISH()
"RTN","BPSVRX",382,0)
 S BPSVFILE=BPSHANDLE_".RPT"
"RTN","BPSVRX",383,0)
 I BPSVDIR="" D  G HFSX
"RTN","BPSVRX",384,0)
 . S HDR(1)="Error: Default directory is blank."
"RTN","BPSVRX",385,0)
 . S HDR(2)="Please define one in the KERNEL SYSTEM PARAMETERS."
"RTN","BPSVRX",386,0)
 . D UPDATE("",.HDR,"",VRXHDR,BPSVRXKQ)
"RTN","BPSVRX",387,0)
 . Q
"RTN","BPSVRX",388,0)
 ;
"RTN","BPSVRX",389,0)
 D OPEN^%ZISH(BPSHANDLE,BPSVDIR,BPSVFILE,"W")
"RTN","BPSVRX",390,0)
 I POP D  G HFSX
"RTN","BPSVRX",391,0)
 . S HDR(1)="Error: Unable to open scratch data file for writing."
"RTN","BPSVRX",392,0)
 . S HDR(2)="Directory="_BPSVDIR
"RTN","BPSVRX",393,0)
 . S HDR(3)="Filename="_BPSVFILE
"RTN","BPSVRX",394,0)
 . D UPDATE("",.HDR,"",VRXHDR,BPSVRXKQ)
"RTN","BPSVRX",395,0)
 . Q
"RTN","BPSVRX",396,0)
 ;
"RTN","BPSVRX",397,0)
 U IO                      ; use the file
"RTN","BPSVRX",398,0)
 S IOM=80,IOSL=100000      ; 80 char width and long screen
"RTN","BPSVRX",399,0)
 D @RTN                    ; create the report
"RTN","BPSVRX",400,0)
 D CLOSE^%ZISH(BPSHANDLE)  ; close the data file
"RTN","BPSVRX",401,0)
 ;
"RTN","BPSVRX",402,0)
 ; move contents of scratch data file to scratch global
"RTN","BPSVRX",403,0)
 S GLO=$NA(^TMP($J,SECTION,1,0))
"RTN","BPSVRX",404,0)
 K ^TMP($J,SECTION)
"RTN","BPSVRX",405,0)
 I '$$FTG^%ZISH(BPSVDIR,BPSVFILE,GLO,3) D  G HFSX
"RTN","BPSVRX",406,0)
 . S HDR(1)="Error: Unable to read in the contents of the scratch data file."
"RTN","BPSVRX",407,0)
 . S HDR(2)="Directory="_BPSVDIR
"RTN","BPSVRX",408,0)
 . S HDR(3)="Filename="_BPSVFILE
"RTN","BPSVRX",409,0)
 . S HDR(4)="Destination="_GLO
"RTN","BPSVRX",410,0)
 . D UPDATE("",.HDR,"",VRXHDR,BPSVRXKQ)
"RTN","BPSVRX",411,0)
 . Q
"RTN","BPSVRX",412,0)
 ;
"RTN","BPSVRX",413,0)
 ; delete the scratch data file
"RTN","BPSVRX",414,0)
 S BPSARR(BPSVFILE)=""
"RTN","BPSVRX",415,0)
 I $$DEL^%ZISH(BPSVDIR,$NA(BPSARR))
"RTN","BPSVRX",416,0)
 ;
"RTN","BPSVRX",417,0)
 ; remove "PAGE 1" line from the beginning of the display data
"RTN","BPSVRX",418,0)
 F BVZ=1:1:10 I $$TRIM^XLFSTR($G(^TMP($J,SECTION,BVZ,0)))="PAGE 1" K ^TMP($J,SECTION,BVZ,0)
"RTN","BPSVRX",419,0)
 ;
"RTN","BPSVRX",420,0)
 ; remove all control characters and trailing spaces from all lines
"RTN","BPSVRX",421,0)
 S BVZ=0 F  S BVZ=$O(^TMP($J,SECTION,BVZ)) Q:'BVZ  S BV1=$G(^TMP($J,SECTION,BVZ,0)),BV1=$$CTRL^XMXUTIL1(BV1),BV1=$$TRIM^XLFSTR(BV1,"R"),^TMP($J,SECTION,BVZ,0)=BV1    ; DBIAs #2735, #10104
"RTN","BPSVRX",422,0)
 ;
"RTN","BPSVRX",423,0)
 ; update BPSVRX display array
"RTN","BPSVRX",424,0)
 S GLO=$NA(^TMP($J,SECTION))
"RTN","BPSVRX",425,0)
 D UPDATE(GLO,.HDRARY,"",VRXHDR,BPSVRXKQ)
"RTN","BPSVRX",426,0)
 K ^TMP($J,SECTION)   ; clean up scratch global
"RTN","BPSVRX",427,0)
 ;
"RTN","BPSVRX",428,0)
HFSX ;
"RTN","BPSVRX",429,0)
 Q
"RTN","BPSVRX",430,0)
 ;
"RTN","BPSVRX",431,0)
RFL(RXIEN,FILLIST) ; Return a list of all ECME fill#s for the Rx
"RTN","BPSVRX",432,0)
 N BP59,FL
"RTN","BPSVRX",433,0)
 K FILLIST
"RTN","BPSVRX",434,0)
 S RXIEN=+$G(RXIEN) I 'RXIEN G RFLX
"RTN","BPSVRX",435,0)
 S BP59=RXIEN F  S BP59=$O(^BPST(BP59)) Q:$P(BP59,".",1)'=RXIEN  S FL=$P($G(^BPST(BP59,1)),U,1) I FL'="" S FILLIST(FL)=BP59
"RTN","BPSVRX",436,0)
RFLX ;
"RTN","BPSVRX",437,0)
 Q
"RTN","BPSVRX",438,0)
 ;
"RTN","BPSVRX",439,0)
VER ; Selection from the ECME User Screen
"RTN","BPSVRX",440,0)
 N BPSG,RXREF,BPSVRX
"RTN","BPSVRX",441,0)
 D FULL^VALM1
"RTN","BPSVRX",442,0)
 W !,"Enter the claim line number for the View ePharmacy Rx report."
"RTN","BPSVRX",443,0)
 S BPSG=$$ASKLINE^BPSSCRU4("Select item","C","Please select SINGLE Rx Line.")
"RTN","BPSVRX",444,0)
 I BPSG<1 G VERX
"RTN","BPSVRX",445,0)
 S RXREF=$$RXREF^BPSSCRU2(+$P(BPSG,U,4))
"RTN","BPSVRX",446,0)
 S BPSVRX("RXIEN")=$P(RXREF,U,1)
"RTN","BPSVRX",447,0)
 S BPSVRX("FILL#")=$P(RXREF,U,2)
"RTN","BPSVRX",448,0)
 D ^BPSVRX
"RTN","BPSVRX",449,0)
VERX ;
"RTN","BPSVRX",450,0)
 S VALMBCK="R"
"RTN","BPSVRX",451,0)
 Q
"RTN","BPSVRX",452,0)
 ;
"RTN","BPSVRX3")
0^16^B134862445
"RTN","BPSVRX3",1,0)
BPSVRX3 ;AITC/PD - Print Report from VER;5/2/2017
"RTN","BPSVRX3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**22,23**;JUN 2004;Build 44
"RTN","BPSVRX3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSVRX3",4,0)
 ;
"RTN","BPSVRX3",5,0)
 ; Reference to MEDPRO^PSOPMP0 supported by IA #6863
"RTN","BPSVRX3",6,0)
 ;
"RTN","BPSVRX3",7,0)
 Q
"RTN","BPSVRX3",8,0)
 ;
"RTN","BPSVRX3",9,0)
REPORT ; Select and print sections of the list.
"RTN","BPSVRX3",10,0)
 ;
"RTN","BPSVRX3",11,0)
 ; Allow the user to select one or more sections of the VER list to
"RTN","BPSVRX3",12,0)
 ; print to the specified device.
"RTN","BPSVRX3",13,0)
 ;
"RTN","BPSVRX3",14,0)
 N BPSAR,BPSLIST
"RTN","BPSVRX3",15,0)
 D FULL^VALM1
"RTN","BPSVRX3",16,0)
 ;
"RTN","BPSVRX3",17,0)
LIST I '$$SELECT(.BPSLIST) G REXIT
"RTN","BPSVRX3",18,0)
 ;
"RTN","BPSVRX3",19,0)
 D BUILD
"RTN","BPSVRX3",20,0)
 ;
"RTN","BPSVRX3",21,0)
 I '$$DEVICE() G REXIT:$$STOP,LIST
"RTN","BPSVRX3",22,0)
 ;
"RTN","BPSVRX3",23,0)
REXIT ; Exit point.
"RTN","BPSVRX3",24,0)
 ;
"RTN","BPSVRX3",25,0)
 Q
"RTN","BPSVRX3",26,0)
 ;
"RTN","BPSVRX3",27,0)
SELECT(BPSLIST) ; Allow user to select sections of the list to be printed.
"RTN","BPSVRX3",28,0)
 ;
"RTN","BPSVRX3",29,0)
 ; This function returns a 1 if the user entered one or more sections
"RTN","BPSVRX3",30,0)
 ; to be printed, 0 if no selection was made.
"RTN","BPSVRX3",31,0)
 ; This function expects the following variables to exist:
"RTN","BPSVRX3",32,0)
 ; - BPSVRX("LISTNAV",Section#) = Beginning Line#
"RTN","BPSVRX3",33,0)
 ;   where Section# is a number, 1-14, corresponding to a section of the
"RTN","BPSVRX3",34,0)
 ; ListMan list, and Beginning Line# is the first line of that section.
"RTN","BPSVRX3",35,0)
 ;
"RTN","BPSVRX3",36,0)
 ; Returns the BPSLIST array with a list of one or more sections:
"RTN","BPSVRX3",37,0)
 ;     BPSLIST(Section#) = First Line ^ Last Line
"RTN","BPSVRX3",38,0)
 ; Where First Line and Last Line are the first and last lines of
"RTN","BPSVRX3",39,0)
 ; that section in the list and Section# can be one or more numbers
"RTN","BPSVRX3",40,0)
 ; from 1 to 14, each corresponding to a section:
"RTN","BPSVRX3",41,0)
 ;     10 - AP, TPJI Account Profile
"RTN","BPSVRX3",42,0)
 ;      3 - BE, Billing Events
"RTN","BPSVRX3",43,0)
 ;      9 - CI, TPJI Claim Info
"RTN","BPSVRX3",44,0)
 ;      2 - CL, Claim Log
"RTN","BPSVRX3",45,0)
 ;     11 - CM, TPJI AR Comment History
"RTN","BPSVRX3",46,0)
 ;      5 - CR, Claims Response Inquiry Report
"RTN","BPSVRX3",47,0)
 ;     12 - ER, TPJI ECME Rx Information
"RTN","BPSVRX3",48,0)
 ;     13 - ES, Eligibility Status
"RTN","BPSVRX3",49,0)
 ;     14 - EV, Eligibility Verification
"RTN","BPSVRX3",50,0)
 ;      6 - IN, Insurance
"RTN","BPSVRX3",51,0)
 ;      7 - LB, List of Bills
"RTN","BPSVRX3",52,0)
 ;      8 - MP, Medication Profile
"RTN","BPSVRX3",53,0)
 ; Comment out SD until US1401 is coded
"RTN","BPSVRX3",54,0)
 ;      4 - SD, Sensitive Drug
"RTN","BPSVRX3",55,0)
 ;      1 - VW, View Rx
"RTN","BPSVRX3",56,0)
 ;
"RTN","BPSVRX3",57,0)
 N BPSLC,BPSLISTNAV,BPSSECBEGIN,BPSSECEND,BPSSECNUM,BPSSECLIST,BPSSEL
"RTN","BPSVRX3",58,0)
 N BPSUC,BPSX,BPSY,DA,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSVRX3",59,0)
 ;
"RTN","BPSVRX3",60,0)
 ; Comment out SD until US1401 is coded
"RTN","BPSVRX3",61,0)
 ; S BPSSECLIST=",AP,BE,CI,CL,CM,CR,ER,ES,EV,IN,LB,MP,SD,VW,"
"RTN","BPSVRX3",62,0)
 S BPSSECLIST=",AP,BE,CI,CL,CM,CR,ER,ES,EV,IN,LB,MP,VW,"
"RTN","BPSVRX3",63,0)
 S BPSLISTNAV("AP")=10
"RTN","BPSVRX3",64,0)
 S BPSLISTNAV("BE")=3
"RTN","BPSVRX3",65,0)
 S BPSLISTNAV("CI")=9
"RTN","BPSVRX3",66,0)
 S BPSLISTNAV("CL")=2
"RTN","BPSVRX3",67,0)
 S BPSLISTNAV("CM")=11
"RTN","BPSVRX3",68,0)
 S BPSLISTNAV("CR")=5
"RTN","BPSVRX3",69,0)
 S BPSLISTNAV("ER")=12
"RTN","BPSVRX3",70,0)
 S BPSLISTNAV("ES")=13
"RTN","BPSVRX3",71,0)
 S BPSLISTNAV("EV")=14
"RTN","BPSVRX3",72,0)
 S BPSLISTNAV("IN")=6
"RTN","BPSVRX3",73,0)
 S BPSLISTNAV("LB")=7
"RTN","BPSVRX3",74,0)
 S BPSLISTNAV("MP")=8
"RTN","BPSVRX3",75,0)
 ; Comment out SD until US1401 is coded
"RTN","BPSVRX3",76,0)
 ; S BPSLISTNAV("SD")=4
"RTN","BPSVRX3",77,0)
 S BPSLISTNAV("VW")=1
"RTN","BPSVRX3",78,0)
 ;
"RTN","BPSVRX3",79,0)
 S BPSUC="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
"RTN","BPSVRX3",80,0)
 S BPSLC="abcdefghijklmnopqrstuvwxyz"
"RTN","BPSVRX3",81,0)
 ;
"RTN","BPSVRX3",82,0)
 ; Display the list of actions to the user once, upon executing the PR option.
"RTN","BPSVRX3",83,0)
 ; List can be re-displayed to the user by entering ??.
"RTN","BPSVRX3",84,0)
 W !
"RTN","BPSVRX3",85,0)
 W !,"VW View Rx          CR CRI Report       CI TPJI Claim Info  ER TPJI ECME Rx"
"RTN","BPSVRX3",86,0)
 W !,"CL Claim Log        IN Insurance        AP TPJI Acct Pro    ES Elig Status"
"RTN","BPSVRX3",87,0)
 W !,"BE Billing Events   LB List of Bills    CM TPJI AR Comm     EV Elig Verif"
"RTN","BPSVRX3",88,0)
 ; Comment out SD until US1401 is coded
"RTN","BPSVRX3",89,0)
 ; W !,"SD Sensitive Drug   MP Med Profile"
"RTN","BPSVRX3",90,0)
 W !,"                    MP Med Profile"
"RTN","BPSVRX3",91,0)
 W !
"RTN","BPSVRX3",92,0)
 ;
"RTN","BPSVRX3",93,0)
SELECT1 ; Prompt user for section(s) to print.
"RTN","BPSVRX3",94,0)
 ;
"RTN","BPSVRX3",95,0)
 S DIR(0)="FOU^0:80"
"RTN","BPSVRX3",96,0)
 S DIR("A")="Select Report to Print"
"RTN","BPSVRX3",97,0)
 S DIR("?",1)=" Select one or many report(s) to print, separated by commas. When all"
"RTN","BPSVRX3",98,0)
 S DIR("?",2)=" reports have been selected, hit enter without making another selection."
"RTN","BPSVRX3",99,0)
 S DIR("?",3)=" Example: "
"RTN","BPSVRX3",100,0)
 S DIR("?",4)="  Select Report to Print: VW,IN,CM"
"RTN","BPSVRX3",101,0)
 S DIR("?")="  Select Report to Print: ES"
"RTN","BPSVRX3",102,0)
 S DIR("??")="^D HELP^BPSVRX3"
"RTN","BPSVRX3",103,0)
 ;
"RTN","BPSVRX3",104,0)
 D ^DIR
"RTN","BPSVRX3",105,0)
 ;
"RTN","BPSVRX3",106,0)
 ; If user enters "^" or "^^", or it times out, clear out the
"RTN","BPSVRX3",107,0)
 ; list and skip to end.
"RTN","BPSVRX3",108,0)
 ;
"RTN","BPSVRX3",109,0)
 I $D(DTOUT)!$D(DUOUT) K BPSLIST G SELECTQ
"RTN","BPSVRX3",110,0)
 ;
"RTN","BPSVRX3",111,0)
 ; If user entered nothing, skip to end.
"RTN","BPSVRX3",112,0)
 ;
"RTN","BPSVRX3",113,0)
 I X="" G SELECTQ
"RTN","BPSVRX3",114,0)
 ;
"RTN","BPSVRX3",115,0)
 ; Convert any lower case to upper case
"RTN","BPSVRX3",116,0)
 S X=$TR(X,BPSLC,BPSUC)
"RTN","BPSVRX3",117,0)
 ;
"RTN","BPSVRX3",118,0)
 F BPSX=1:1:$L(X,",") D
"RTN","BPSVRX3",119,0)
 . S BPSSEL=$P(X,",",BPSX)
"RTN","BPSVRX3",120,0)
 . I BPSSECLIST'[(","_BPSSEL_",") W !,*7," ",BPSSEL," is not a valid entry." Q
"RTN","BPSVRX3",121,0)
 . S BPSSECNUM=BPSLISTNAV(BPSSEL)
"RTN","BPSVRX3",122,0)
 . I $D(BPSLIST(BPSSECNUM)) W !,*7," ",BPSSEL," already selected." Q
"RTN","BPSVRX3",123,0)
 . S BPSSECBEGIN=$G(BPSVRX("LISTNAV",BPSSECNUM))
"RTN","BPSVRX3",124,0)
 . S BPSY=$O(BPSVRX("LISTNAV",BPSSECNUM))
"RTN","BPSVRX3",125,0)
 . I BPSY'="" S BPSSECEND=$G(BPSVRX("LISTNAV",BPSY))-1
"RTN","BPSVRX3",126,0)
 . E  S BPSSECEND=$O(^TMP("BPSVRX",$J,""),-1)
"RTN","BPSVRX3",127,0)
 . S BPSLIST(BPSSECNUM)=BPSSECBEGIN_"^"_BPSSECEND
"RTN","BPSVRX3",128,0)
 . Q
"RTN","BPSVRX3",129,0)
 ;
"RTN","BPSVRX3",130,0)
 G SELECT1
"RTN","BPSVRX3",131,0)
 ;
"RTN","BPSVRX3",132,0)
SELECTQ ;
"RTN","BPSVRX3",133,0)
 I '$D(BPSLIST) Q 0
"RTN","BPSVRX3",134,0)
 Q 1
"RTN","BPSVRX3",135,0)
 ;
"RTN","BPSVRX3",136,0)
BUILD ; Move selected compiled data into BPSAR array
"RTN","BPSVRX3",137,0)
 ;
"RTN","BPSVRX3",138,0)
 N BPSBEGIN,BPSEND,BPSLINE,BPSSECTION
"RTN","BPSVRX3",139,0)
 ;
"RTN","BPSVRX3",140,0)
 K BPSAR
"RTN","BPSVRX3",141,0)
 S BPSSECTION=""
"RTN","BPSVRX3",142,0)
 F  S BPSSECTION=$O(BPSLIST(BPSSECTION)) Q:BPSSECTION=""  D
"RTN","BPSVRX3",143,0)
 . S BPSBEGIN=$P(BPSLIST(BPSSECTION),U,1)
"RTN","BPSVRX3",144,0)
 . S BPSEND=$P(BPSLIST(BPSSECTION),U,2)
"RTN","BPSVRX3",145,0)
 . ;
"RTN","BPSVRX3",146,0)
 . S BPSLINE=BPSBEGIN-1
"RTN","BPSVRX3",147,0)
 . F  S BPSLINE=$O(^TMP("BPSVRX",$J,BPSLINE)) Q:'BPSLINE  Q:BPSLINE>BPSEND  D
"RTN","BPSVRX3",148,0)
 . . ;
"RTN","BPSVRX3",149,0)
 . . S BPSAR(BPSLINE)=^TMP("BPSVRX",$J,BPSLINE,0)
"RTN","BPSVRX3",150,0)
 Q
"RTN","BPSVRX3",151,0)
 ; 
"RTN","BPSVRX3",152,0)
DEVICE() ; Prompt user for output device.
"RTN","BPSVRX3",153,0)
 ; Function return values:
"RTN","BPSVRX3",154,0)
 ;   1 - User selected a device.
"RTN","BPSVRX3",155,0)
 ;   0 - User exited out.
"RTN","BPSVRX3",156,0)
 ;
"RTN","BPSVRX3",157,0)
 N BPSRETURN,DIR,POP,X,Y,ZTDESC,ZTQUEUED,ZTREQ,ZTRTN,ZTSAVE,ZTSK
"RTN","BPSVRX3",158,0)
 S BPSRETURN=1
"RTN","BPSVRX3",159,0)
 ;
"RTN","BPSVRX3",160,0)
 S ZTRTN="PRINT^BPSVRX3"
"RTN","BPSVRX3",161,0)
 S ZTDESC="VER View Prescription Report"
"RTN","BPSVRX3",162,0)
 S ZTSAVE("BPS*")=""
"RTN","BPSVRX3",163,0)
 S ZTSAVE("VALMHDR(")=""
"RTN","BPSVRX3",164,0)
 ;
"RTN","BPSVRX3",165,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE,"QM",1)
"RTN","BPSVRX3",166,0)
 I POP S BPSRETURN=0
"RTN","BPSVRX3",167,0)
 I $G(ZTSK) W !!,"Report compilation has started with task# ",ZTSK,".",! S DIR(0)="E" D ^DIR
"RTN","BPSVRX3",168,0)
 ;
"RTN","BPSVRX3",169,0)
 Q BPSRETURN
"RTN","BPSVRX3",170,0)
 ;
"RTN","BPSVRX3",171,0)
STOP()   ; Determine if user wishes to exit out of the option entirely.
"RTN","BPSVRX3",172,0)
 ; Function return values:
"RTN","BPSVRX3",173,0)
 ;   1 - Yes, exit entirely.
"RTN","BPSVRX3",174,0)
 ;   0 - No, do not exit but return to the previous question.
"RTN","BPSVRX3",175,0)
 ;
"RTN","BPSVRX3",176,0)
 N DIR,DIRUT,Y
"RTN","BPSVRX3",177,0)
 ;
"RTN","BPSVRX3",178,0)
 S DIR(0)="Y"
"RTN","BPSVRX3",179,0)
 S DIR("A")="Do you want to exit out of this option entirely"
"RTN","BPSVRX3",180,0)
 S DIR("B")="YES"
"RTN","BPSVRX3",181,0)
 S DIR("?",1)="  Enter YES to immediately exit out of this option."
"RTN","BPSVRX3",182,0)
 S DIR("?")="  Enter NO to return to the previous question."
"RTN","BPSVRX3",183,0)
 W !
"RTN","BPSVRX3",184,0)
 D ^DIR
"RTN","BPSVRX3",185,0)
 I $D(DIRUT) S Y=1
"RTN","BPSVRX3",186,0)
 Q Y
"RTN","BPSVRX3",187,0)
 ;
"RTN","BPSVRX3",188,0)
PRINT ; Print sections of the list.
"RTN","BPSVRX3",189,0)
 ;
"RTN","BPSVRX3",190,0)
 ; BPSLIST will be an array of one or more sections from the existing
"RTN","BPSVRX3",191,0)
 ; ListMan list stored in ^TMP("BPSVRX",$J).  Format of BPSLIST:
"RTN","BPSVRX3",192,0)
 ;     BPSLIST(Section#) = First Line ^ Last Line
"RTN","BPSVRX3",193,0)
 ; Where First Line and Last Line are the first and last lines of
"RTN","BPSVRX3",194,0)
 ; that section in the list and Section# can be one or more numbers
"RTN","BPSVRX3",195,0)
 ; from 1 to 14, each corresponding to a section:
"RTN","BPSVRX3",196,0)
 ;     10 - AP, TPJI Account Profile
"RTN","BPSVRX3",197,0)
 ;      3 - BE, Billing Events
"RTN","BPSVRX3",198,0)
 ;      9 - CI, TPJI Claim Info
"RTN","BPSVRX3",199,0)
 ;      2 - CL, Claim Log
"RTN","BPSVRX3",200,0)
 ;     11 - CM, TPJI AR Comment History
"RTN","BPSVRX3",201,0)
 ;      5 - CR, Claims Response Inquiry Report
"RTN","BPSVRX3",202,0)
 ;     12 - ER, TPJI ECME Rx Information
"RTN","BPSVRX3",203,0)
 ;     13 - ES, Eligibility Status
"RTN","BPSVRX3",204,0)
 ;     14 - EV, Eligibility Verification
"RTN","BPSVRX3",205,0)
 ;      6 - IN, Insurance
"RTN","BPSVRX3",206,0)
 ;      7 - LB, List of Bills
"RTN","BPSVRX3",207,0)
 ;      8 - MP, Medication Profile
"RTN","BPSVRX3",208,0)
 ; Comment out SD until US1401 is coded
"RTN","BPSVRX3",209,0)
 ;      4 - SD, Sensitive Drug
"RTN","BPSVRX3",210,0)
 ;      1 - VW, View Rx
"RTN","BPSVRX3",211,0)
 ;
"RTN","BPSVRX3",212,0)
 N BPSCRT,BPSBEGIN,BPSDASHES,BPSEND,BPSLINE,BPSPAGE,BPSSECTION,BPSSTOP
"RTN","BPSVRX3",213,0)
 ;
"RTN","BPSVRX3",214,0)
 S BPSCRT=$S($E(IOST,1,2)="C-":1,1:0)
"RTN","BPSVRX3",215,0)
 S BPSPAGE=0,BPSSTOP=0,$P(BPSDASHES,"=",79)=""
"RTN","BPSVRX3",216,0)
 ;
"RTN","BPSVRX3",217,0)
 S BPSSECTION=""
"RTN","BPSVRX3",218,0)
 F  S BPSSECTION=$O(BPSLIST(BPSSECTION)) Q:BPSSECTION=""  D  Q:BPSSTOP
"RTN","BPSVRX3",219,0)
 . S BPSBEGIN=$P(BPSLIST(BPSSECTION),U,1)
"RTN","BPSVRX3",220,0)
 . S BPSEND=$P(BPSLIST(BPSSECTION),U,2)
"RTN","BPSVRX3",221,0)
 . ;
"RTN","BPSVRX3",222,0)
 . ; Display the header at the top of each section.
"RTN","BPSVRX3",223,0)
 . ;
"RTN","BPSVRX3",224,0)
 . D HEADER
"RTN","BPSVRX3",225,0)
 . ;
"RTN","BPSVRX3",226,0)
 . S BPSLINE=BPSBEGIN-1
"RTN","BPSVRX3",227,0)
 . F  S BPSLINE=$O(BPSAR(BPSLINE)) Q:'BPSLINE  Q:BPSLINE>BPSEND  D  Q:BPSSTOP
"RTN","BPSVRX3",228,0)
 . . ;
"RTN","BPSVRX3",229,0)
 . . I $Y+3>IOSL D HEADER I BPSSTOP Q
"RTN","BPSVRX3",230,0)
 . . ;
"RTN","BPSVRX3",231,0)
 . . W !,BPSAR(BPSLINE)
"RTN","BPSVRX3",232,0)
 . . ;
"RTN","BPSVRX3",233,0)
 . . Q
"RTN","BPSVRX3",234,0)
 . Q
"RTN","BPSVRX3",235,0)
 ;
"RTN","BPSVRX3",236,0)
 I BPSSTOP G PRINTQ
"RTN","BPSVRX3",237,0)
 I $Y+4>IOSL D HEADER I BPSSTOP G PRINTQ
"RTN","BPSVRX3",238,0)
 W !!?5,"*** End of Report ***"
"RTN","BPSVRX3",239,0)
 I BPSCRT S DIR(0)="E" W ! D ^DIR K DIR
"RTN","BPSVRX3",240,0)
 ;
"RTN","BPSVRX3",241,0)
PRINTQ ;
"RTN","BPSVRX3",242,0)
 ;
"RTN","BPSVRX3",243,0)
 I $D(ZTQUEUED) S ZTREQ="@"  ; If queued, purge the task after exiting.
"RTN","BPSVRX3",244,0)
 ;
"RTN","BPSVRX3",245,0)
 Q
"RTN","BPSVRX3",246,0)
 ;
"RTN","BPSVRX3",247,0)
HEADER ; Print the header.
"RTN","BPSVRX3",248,0)
 ;
"RTN","BPSVRX3",249,0)
 N BPSX
"RTN","BPSVRX3",250,0)
 ;
"RTN","BPSVRX3",251,0)
 ; If PAGE (i.e. not the first page) and device is the screen, do an
"RTN","BPSVRX3",252,0)
 ; end-of-page reader call.  If PAGE or screen output, do a form feed.
"RTN","BPSVRX3",253,0)
 ; If this is the first page ('BPSPAGE), and device is file or printer
"RTN","BPSVRX3",254,0)
 ; ('BPSCRT), reset the left margin ($C(13)).
"RTN","BPSVRX3",255,0)
 ;
"RTN","BPSVRX3",256,0)
 I BPSPAGE,BPSCRT S DIR(0)="E" D ^DIR K DIR I 'Y S BPSSTOP=1 G HEADERQ
"RTN","BPSVRX3",257,0)
 I BPSPAGE!BPSCRT W @IOF
"RTN","BPSVRX3",258,0)
 I 'BPSPAGE,'BPSCRT W $C(13)
"RTN","BPSVRX3",259,0)
 S BPSPAGE=BPSPAGE+1
"RTN","BPSVRX3",260,0)
 ;
"RTN","BPSVRX3",261,0)
 ; Write the report header.
"RTN","BPSVRX3",262,0)
 ;
"RTN","BPSVRX3",263,0)
 W "View Pharmacy Rx Report",?70,"Page: ",BPSPAGE,!
"RTN","BPSVRX3",264,0)
 ;
"RTN","BPSVRX3",265,0)
 S BPSX=0
"RTN","BPSVRX3",266,0)
 F  S BPSX=$O(VALMHDR(BPSX)) Q:'BPSX  W VALMHDR(BPSX),!
"RTN","BPSVRX3",267,0)
 W BPSDASHES
"RTN","BPSVRX3",268,0)
 ;
"RTN","BPSVRX3",269,0)
HEADERQ ;
"RTN","BPSVRX3",270,0)
 Q
"RTN","BPSVRX3",271,0)
 ;
"RTN","BPSVRX3",272,0)
HELP ; ?? Help - Display Options
"RTN","BPSVRX3",273,0)
 W !,"VW View Rx          CR CRI Report       CI TPJI Claim Info  ER TPJI ECME Rx"
"RTN","BPSVRX3",274,0)
 W !,"CL Claim Log        IN Insurance        AP TPJI Acct Pro    ES Elig Status"
"RTN","BPSVRX3",275,0)
 W !,"BE Billing Events   LB List of Bills    CM TPJI AR Comm     EV Elig Verif"
"RTN","BPSVRX3",276,0)
 ; Comment out SD until US1401 is coded
"RTN","BPSVRX3",277,0)
 ; W !,"SD Sensitive Drug   MP Med Profile"
"RTN","BPSVRX3",278,0)
 W !,"                    MP Med Profile"
"RTN","BPSVRX3",279,0)
 W !
"RTN","BPSVRX3",280,0)
 W !," Select one or many report(s) to print, separated by commas. When all"
"RTN","BPSVRX3",281,0)
 W !," reports have been selected, hit enter without making another selection."
"RTN","BPSVRX3",282,0)
 W !," Example: "
"RTN","BPSVRX3",283,0)
 W !,"  Select Report to Print: VW,IN,CM"
"RTN","BPSVRX3",284,0)
 W !,"  Select Report to Print: ES"
"RTN","BPSVRX3",285,0)
 Q
"RTN","BPSVRX3",286,0)
 ;
"RTN","BPSVRX3",287,0)
SD(RXIEN,FILL,VIEWTYPE,BPSSNUM) ; SD Sensitive Drug
"RTN","BPSVRX3",288,0)
 ;
"RTN","BPSVRX3",289,0)
 I '$D(ZTQUEUED) W !,"Compiling data for Sensitive Drug ..."
"RTN","BPSVRX3",290,0)
 ;
"RTN","BPSVRX3",291,0)
 N BPSCNT,BPSDRUG,BPSDRUGNAME,BPSINS,BPSINSNAME,BPSSD
"RTN","BPSVRX3",292,0)
 N BPSSDEFF,BPSSDEXP,BPSSDSTRING,DFN
"RTN","BPSVRX3",293,0)
 ;
"RTN","BPSVRX3",294,0)
 K ^TMP("BPSVRX-SD",$J)
"RTN","BPSVRX3",295,0)
 ;
"RTN","BPSVRX3",296,0)
 ; Determine Patient, DFN
"RTN","BPSVRX3",297,0)
 ;
"RTN","BPSVRX3",298,0)
 S DFN=+$$RXAPI1^BPSUTIL1(RXIEN,2,"I")  ; Patient IEN.
"RTN","BPSVRX3",299,0)
 ;
"RTN","BPSVRX3",300,0)
 ; Call IB API to pull ROI/SD information for this patient.
"RTN","BPSVRX3",301,0)
 ;
"RTN","BPSVRX3",302,0)
 D BLD^IBNCPDR
"RTN","BPSVRX3",303,0)
 ;
"RTN","BPSVRX3",304,0)
 S ^TMP("BPSVRX-SD",$J,1,0)=""
"RTN","BPSVRX3",305,0)
 S ^TMP("BPSVRX-SD",$J,2,0)="   S Drug                         Insurance            ROI Eff Dt-Exp Dt"
"RTN","BPSVRX3",306,0)
 S ^TMP("BPSVRX-SD",$J,3,0)="        Non-Sensitive Diagnosis     Authorizer               Auth Dt"
"RTN","BPSVRX3",307,0)
 S ^TMP("BPSVRX-SD",$J,4,0)="----------------------------------------------------------------------------"
"RTN","BPSVRX3",308,0)
 S BPSCNT=4
"RTN","BPSVRX3",309,0)
 ;
"RTN","BPSVRX3",310,0)
 S BPSLINE=0
"RTN","BPSVRX3",311,0)
 F  S BPSLINE=$O(^TMP("IBNCR",$J,BPSLINE)) Q:'BPSLINE  D
"RTN","BPSVRX3",312,0)
 . S BPSCNT=BPSCNT+1
"RTN","BPSVRX3",313,0)
 . S ^TMP("BPSVRX-SD",$J,BPSCNT,0)=^TMP("IBNCR",$J,BPSLINE,0)
"RTN","BPSVRX3",314,0)
 ;
"RTN","BPSVRX3",315,0)
 ;
"RTN","BPSVRX3",316,0)
 I BPSCNT=3 D
"RTN","BPSVRX3",317,0)
 . S ^TMP("BPSVRX-SD",$J,4,0)=""
"RTN","BPSVRX3",318,0)
 . S ^TMP("BPSVRX-SD",$J,5,0)="  -- No SD's on file for patient --"
"RTN","BPSVRX3",319,0)
 . S BPSCNT=5
"RTN","BPSVRX3",320,0)
 S ^TMP("BPSVRX-SD",$J,BPSCNT+1,0)=""
"RTN","BPSVRX3",321,0)
 ;
"RTN","BPSVRX3",322,0)
 D UPDATE^BPSVRX($NA(^TMP("BPSVRX-SD",$J)),"","","Sensitive Drug",BPSSNUM)
"RTN","BPSVRX3",323,0)
 ;
"RTN","BPSVRX3",324,0)
 K ^TMP("BPSVRX-SD",$J)
"RTN","BPSVRX3",325,0)
 ;
"RTN","BPSVRX3",326,0)
 Q
"RTN","BPSVRX3",327,0)
 ;
"RTN","BPSVRX3",328,0)
MP(RXIEN,FILL,VIEWTYPE,BPSSNUM) ; MP Medication Profile
"RTN","BPSVRX3",329,0)
 ;
"RTN","BPSVRX3",330,0)
 ;
"RTN","BPSVRX3",331,0)
 I '$D(ZTQUEUED) W !,"Compiling data for Medication Profile ..."
"RTN","BPSVRX3",332,0)
 ;
"RTN","BPSVRX3",333,0)
 N ALLERGY,BPSCNT,BPSLINE,DFN,DOB,GMRVSTR,HT,HTDT,LINE1
"RTN","BPSVRX3",334,0)
 N LINE2,LINE3,LINE4,PSONOAL,SEX,SITE,WT,WTDT,X
"RTN","BPSVRX3",335,0)
 ;
"RTN","BPSVRX3",336,0)
 K ^TMP("BPSVRX-MP",$J)
"RTN","BPSVRX3",337,0)
 ;
"RTN","BPSVRX3",338,0)
 ; Call PSO API to pull MP information for this patient.
"RTN","BPSVRX3",339,0)
 ;
"RTN","BPSVRX3",340,0)
 D MEDPRO^PSOPMP0(RXIEN,FILL)  ; ICR# 6863
"RTN","BPSVRX3",341,0)
 ;
"RTN","BPSVRX3",342,0)
 S SITE=+$$RXSITE^PSOBPSUT(RXIEN,FILL)
"RTN","BPSVRX3",343,0)
 S DFN=+$$GET1^DIQ(52,RXIEN,2,"I")
"RTN","BPSVRX3",344,0)
 D LOAD^PSOPMPPF(SITE,DUZ)
"RTN","BPSVRX3",345,0)
 D DEM^VADPT
"RTN","BPSVRX3",346,0)
 S PNAME=VADM(1)
"RTN","BPSVRX3",347,0)
 S DOB=$S(+VADM(3):$P(VADM(3),"^",2)_" ("_$G(VADM(4))_")",1:"UNKNOWN")
"RTN","BPSVRX3",348,0)
 S SEX=$P(VADM(5),"^",2)
"RTN","BPSVRX3",349,0)
 S (WT,X)="",GMRVSTR="WT" D EN6^GMRVUTL I X'="" S WT=$J($P(X,"^",8)/2.2,6,2),WTDT=$$DAT^PSOPMP1($P(X,"^")\1,"/",1)
"RTN","BPSVRX3",350,0)
 S (HT,X)="",GMRVSTR="HT" D EN6^GMRVUTL I X'="" S HT=$J($P(X,"^",8)*2.54,6,2),HTDT=$$DAT^PSOPMP1($P(X,"^")\1,"/",1)
"RTN","BPSVRX3",351,0)
 S LINE1=PNAME
"RTN","BPSVRX3",352,0)
 S (PSONOAL,ALLERGY)=""
"RTN","BPSVRX3",353,0)
 D EN1^GMRADPT
"RTN","BPSVRX3",354,0)
 I GMRAL S ALLERGY="<A>"
"RTN","BPSVRX3",355,0)
 E  D ALLERGY^PSOORUT2 I PSONOAL'="" S ALLERGY="<NO ALLERGY ASSESSMENT>"
"RTN","BPSVRX3",356,0)
 S LINE1=LINE1,$E(LINE1,43)=ALLERGY
"RTN","BPSVRX3",357,0)
 S LINE2="  PID: "_$P(VADM(2),"^",2),$E(LINE2,50)="HEIGHT(cm): "_$S(HT'="":HT_" ("_HTDT_")",1:"NOT AVAILABLE")
"RTN","BPSVRX3",358,0)
 S LINE3="  DOB: "_DOB,$E(LINE3,50)="WEIGHT(kg): "_$S(WT'="":WT_" ("_WTDT_")",1:"NOT AVAILABLE")
"RTN","BPSVRX3",359,0)
 S LINE4="  SEX: "_SEX,$E(LINE4,43)="EXP/CANCEL CUTOFF: "_PSOEXDCE_" DAYS"
"RTN","BPSVRX3",360,0)
 ;
"RTN","BPSVRX3",361,0)
 S ^TMP("BPSVRX-MP",$J,1,0)=LINE1
"RTN","BPSVRX3",362,0)
 S ^TMP("BPSVRX-MP",$J,2,0)=LINE2
"RTN","BPSVRX3",363,0)
 S ^TMP("BPSVRX-MP",$J,3,0)=LINE3
"RTN","BPSVRX3",364,0)
 S ^TMP("BPSVRX-MP",$J,4,0)=LINE4
"RTN","BPSVRX3",365,0)
 S ^TMP("BPSVRX-MP",$J,5,0)=""
"RTN","BPSVRX3",366,0)
 S ^TMP("BPSVRX-MP",$J,6,0)="                                                        ISSUE    LAST    REF DAY"
"RTN","BPSVRX3",367,0)
 S ^TMP("BPSVRX-MP",$J,7,0)="  # Rx#           DRUG [^]                      QTY ST  DATE     FILL    REM SUP"
"RTN","BPSVRX3",368,0)
 S ^TMP("BPSVRX-MP",$J,8,0)="--------------------------------------------------------------------------------"
"RTN","BPSVRX3",369,0)
 S BPSCNT=8
"RTN","BPSVRX3",370,0)
 ;
"RTN","BPSVRX3",371,0)
 S BPSLINE=0
"RTN","BPSVRX3",372,0)
 F  S BPSLINE=$O(^TMP("PSOPMP0",$J,BPSLINE)) Q:'BPSLINE  D
"RTN","BPSVRX3",373,0)
 . S BPSCNT=BPSCNT+1
"RTN","BPSVRX3",374,0)
 . S ^TMP("BPSVRX-MP",$J,BPSCNT,0)=^TMP("PSOPMP0",$J,BPSLINE,0)
"RTN","BPSVRX3",375,0)
 ;
"RTN","BPSVRX3",376,0)
 I BPSCNT=8 D
"RTN","BPSVRX3",377,0)
 . S ^TMP("BPSVRX-MP",$J,1,0)=""
"RTN","BPSVRX3",378,0)
 . S ^TMP("BPSVRX-MP",$J,2,0)="  -- No prescriptions found for this patient --"
"RTN","BPSVRX3",379,0)
 . S BPSCNT=2
"RTN","BPSVRX3",380,0)
 S ^TMP("BPSVRX-MP",$J,BPSCNT+1,0)=""
"RTN","BPSVRX3",381,0)
 ;
"RTN","BPSVRX3",382,0)
 D UPDATE^BPSVRX($NA(^TMP("BPSVRX-MP",$J)),"","","Medication Profile",BPSSNUM)
"RTN","BPSVRX3",383,0)
 ;
"RTN","BPSVRX3",384,0)
 K ^TMP("BPSVRX-MP",$J),^TMP("PSOPMP0",$J)
"RTN","BPSVRX3",385,0)
 ;
"RTN","BPSVRX3",386,0)
 Q
"SEC","^DIC",9002313.9,9002313.9,0,"AUDIT")
@
"SEC","^DIC",9002313.9,9002313.9,0,"DD")
@
"SEC","^DIC",9002313.9,9002313.9,0,"DEL")
@
"SEC","^DIC",9002313.9,9002313.9,0,"LAYGO")
@
"SEC","^DIC",9002313.9,9002313.9,0,"RD")
Pp
"SEC","^DIC",9002313.9,9002313.9,0,"WR")
@
"SEC","^DIC",9002313.91,9002313.91,0,"AUDIT")
@
"SEC","^DIC",9002313.91,9002313.91,0,"DD")
@
"SEC","^DIC",9002313.91,9002313.91,0,"DEL")
@
"SEC","^DIC",9002313.91,9002313.91,0,"LAYGO")
@
"SEC","^DIC",9002313.91,9002313.91,0,"RD")
Pp
"SEC","^DIC",9002313.91,9002313.91,0,"WR")
@
"UP",9002313.511,9002313.5112,-1)
9002313.511^2
"UP",9002313.511,9002313.5112,0)
9002313.5112
"UP",9002313.59,9002313.59141,-2)
9002313.59^14
"UP",9002313.59,9002313.59141,-1)
9002313.5914^1
"UP",9002313.59,9002313.59141,0)
9002313.59141
"UP",9002313.77,9002313.7781,-2)
9002313.77^8
"UP",9002313.77,9002313.7781,-1)
9002313.778^1
"UP",9002313.77,9002313.7781,0)
9002313.7781
"VER")
8.0^22.2
"^DD",9002313.2,9002313.2,0)
FIELD^^1^3
"^DD",9002313.2,9002313.2,0,"DDA")
N
"^DD",9002313.2,9002313.2,0,"DT")
3180311
"^DD",9002313.2,9002313.2,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",9002313.2,9002313.2,0,"IX","B",9002313.2,.01)

"^DD",9002313.2,9002313.2,0,"NM","BPS NCPDP OTHER PAYER AMT PAID QUAL")

"^DD",9002313.2,9002313.2,0,"PT",9002313.31231,.02)

"^DD",9002313.2,9002313.2,0,"PT",9002313.57141,.02)

"^DD",9002313.2,9002313.2,0,"PT",9002313.59141,.02)

"^DD",9002313.2,9002313.2,0,"PT",9002313.7781,.02)

"^DD",9002313.2,9002313.2,0,"VRPK")
BPS
"^DD",9002313.2,9002313.2,.01,0)
CODE^RF^^0;1^K:$L(X)>5!($L(X)<1)!'(X'?1P.E) X
"^DD",9002313.2,9002313.2,.01,1,0)
^.1
"^DD",9002313.2,9002313.2,.01,1,1,0)
9002313.2^B
"^DD",9002313.2,9002313.2,.01,1,1,1)
S ^BPS(9002313.2,"B",$E(X,1,30),DA)=""
"^DD",9002313.2,9002313.2,.01,1,1,2)
K ^BPS(9002313.2,"B",$E(X,1,30),DA)
"^DD",9002313.2,9002313.2,.01,3)
Answer must be 1-5 characters in length.
"^DD",9002313.2,9002313.2,.01,21,0)
^^1^1^3141126^
"^DD",9002313.2,9002313.2,.01,21,1,0)
This is the code that qualifies the 'Other Payer Amount Paid' (431-DV).
"^DD",9002313.2,9002313.2,.01,"DT")
3141126
"^DD",9002313.2,9002313.2,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>50!($L(X)<1) X
"^DD",9002313.2,9002313.2,.02,3)
Answer must be 1-50 characters in length.
"^DD",9002313.2,9002313.2,.02,21,0)
^^2^2^3141126^
"^DD",9002313.2,9002313.2,.02,21,1,0)
This is the description of the OTHER PAYER AMOUNT PAID QUALIFIER (e.g. 
"^DD",9002313.2,9002313.2,.02,21,2,0)
DRUG BENEFIT)
"^DD",9002313.2,9002313.2,.02,"DT")
3141126
"^DD",9002313.2,9002313.2,1,0)
NCPDP VERSION^9002313.201S^^1;0
"^DD",9002313.2,9002313.2,1,21,0)
^^2^2^3141202^
"^DD",9002313.2,9002313.2,1,21,1,0)
The NCPDP VERSION multiple identifies the specific NCPDP version related 
"^DD",9002313.2,9002313.2,1,21,2,0)
to the CODE.
"^DD",9002313.2,9002313.201,0)
NCPDP VERSION SUB-FIELD^^.01^1
"^DD",9002313.2,9002313.201,0,"DT")
3141126
"^DD",9002313.2,9002313.201,0,"IX","B",9002313.201,.01)

"^DD",9002313.2,9002313.201,0,"NM","NCPDP VERSION")

"^DD",9002313.2,9002313.201,0,"UP")
9002313.2
"^DD",9002313.2,9002313.201,.01,0)
NCPDP VERSION^MS^51:5.1;D0:D.0;^0;1^Q
"^DD",9002313.2,9002313.201,.01,1,0)
^.1
"^DD",9002313.2,9002313.201,.01,1,1,0)
9002313.201^B
"^DD",9002313.2,9002313.201,.01,1,1,1)
S ^BPS(9002313.2,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",9002313.2,9002313.201,.01,1,1,2)
K ^BPS(9002313.2,DA(1),1,"B",$E(X,1,30),DA)
"^DD",9002313.2,9002313.201,.01,3)
Select '51' for Version 5.1 or 'D0' for Version D.0
"^DD",9002313.2,9002313.201,.01,21,0)
^^3^3^3141202^
"^DD",9002313.2,9002313.201,.01,21,1,0)
NCPDP field codes may change between versions of the standard.  Refer to
"^DD",9002313.2,9002313.201,.01,21,2,0)
the NCPDP External Code List to identify versions for a specific NCPDP
"^DD",9002313.2,9002313.201,.01,21,3,0)
code.  
"^DD",9002313.2,9002313.201,.01,"DT")
3141202
"^DD",9002313.22,9002313.22,0)
FIELD^^1^2
"^DD",9002313.22,9002313.22,0,"DDA")
N
"^DD",9002313.22,9002313.22,0,"DT")
3180311
"^DD",9002313.22,9002313.22,0,"ID",1)
W "   ",$P(^(0),U,2)
"^DD",9002313.22,9002313.22,0,"IX","B",9002313.22,.01)

"^DD",9002313.22,9002313.22,0,"NM","BPS NCPDP RESULT OF SERVICE CODE")

"^DD",9002313.22,9002313.22,0,"VRPK")
BPS
"^DD",9002313.22,9002313.22,.01,0)
CODE^RF^^0;1^K:$L(X)>5!($L(X)<1)!'(X'?1P.E) X
"^DD",9002313.22,9002313.22,.01,1,0)
^.1
"^DD",9002313.22,9002313.22,.01,1,1,0)
9002313.22^B
"^DD",9002313.22,9002313.22,.01,1,1,1)
S ^BPS(9002313.22,"B",$E(X,1,30),DA)=""
"^DD",9002313.22,9002313.22,.01,1,1,2)
K ^BPS(9002313.22,"B",$E(X,1,30),DA)
"^DD",9002313.22,9002313.22,.01,3)
Answer must be 1-5 characters in length
"^DD",9002313.22,9002313.22,.01,21,0)
^.001^1^1^3050624^^^
"^DD",9002313.22,9002313.22,.01,21,1,0)
Action taken by a pharmacist in response to a conflict or the result of a pharmacist's professional service.
"^DD",9002313.22,9002313.22,.01,"DT")
3050509
"^DD",9002313.22,9002313.22,1,0)
DESCRIPTION^F^^0;2^K:$L(X)>50!($L(X)<1) X
"^DD",9002313.22,9002313.22,1,3)
Answer must be 1-50 characters in length
"^DD",9002313.22,9002313.22,1,21,0)
^^1^1^3050624^
"^DD",9002313.22,9002313.22,1,21,1,0)
Description of the NCPDP RESULT OF SERVICE CODE used to override DUR rejects (e.g., FILLED, WITH DIFFERENT DOSAGE FORM,THERAPY CHANGED)
"^DD",9002313.22,9002313.22,1,"DT")
3050509
"^DD",9002313.25,9002313.25,0)
FIELD^^.02^2
"^DD",9002313.25,9002313.25,0,"DDA")
N
"^DD",9002313.25,9002313.25,0,"DT")
3180311
"^DD",9002313.25,9002313.25,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",9002313.25,9002313.25,0,"IX","B",9002313.25,.01)

"^DD",9002313.25,9002313.25,0,"NM","BPS NCPDP CLARIFICATION CODES")

"^DD",9002313.25,9002313.25,0,"VRPK")
BPS
"^DD",9002313.25,9002313.25,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1)!'(X'?1P.E) X
"^DD",9002313.25,9002313.25,.01,1,0)
^.1
"^DD",9002313.25,9002313.25,.01,1,1,0)
9002313.25^B
"^DD",9002313.25,9002313.25,.01,1,1,1)
S ^BPS(9002313.25,"B",$E(X,1,30),DA)=""
"^DD",9002313.25,9002313.25,.01,1,1,2)
K ^BPS(9002313.25,"B",$E(X,1,30),DA)
"^DD",9002313.25,9002313.25,.01,3)
Answer must be 1-2 characters in length.
"^DD",9002313.25,9002313.25,.01,21,0)
^^2^2^3080613^
"^DD",9002313.25,9002313.25,.01,21,1,0)
Clarification code to be sent to the payer as defined by the NCPDP 
"^DD",9002313.25,9002313.25,.01,21,2,0)
standard.
"^DD",9002313.25,9002313.25,.01,"DT")
3080613
"^DD",9002313.25,9002313.25,.02,0)
DESCRIPTION^FX^^0;2^K:$L(X)>80!($L(X)<1) X S:$D(X) X=$$UP^XLFSTR(X)
"^DD",9002313.25,9002313.25,.02,3)
Answer must be 1-80 characters in length.
"^DD",9002313.25,9002313.25,.02,21,0)
^^1^1^3080613^
"^DD",9002313.25,9002313.25,.02,21,1,0)
Description of the clarification code.
"^DD",9002313.25,9002313.25,.02,"DT")
3080613
"^DD",9002313.32,9002313.32,2.1,0)
PATIENT PAY AMOUNT^NJ8,2^^2;10^S:X["$" X=$P(X,"$",2) K:X'?."-".N.1".".2N!(X>99999.99)!(X<-99999.99) X
"^DD",9002313.32,9002313.32,2.1,3)
Type a dollar amount between -99999.99 and 99999.99, 2 decimal digits.
"^DD",9002313.32,9002313.32,2.1,21,0)
^.001^4^4^3171215^^
"^DD",9002313.32,9002313.32,2.1,21,1,0)
This is the override value that will be used for the payer response for 
"^DD",9002313.32,9002313.32,2.1,21,2,0)
billing requests. The value will be used to populate the PATIENT PAY 
"^DD",9002313.32,9002313.32,2.1,21,3,0)
AMOUNT (#505) field of RESPONSES (#9002313.0301) subfile of the BPS 
"^DD",9002313.32,9002313.32,2.1,21,4,0)
RESPONSES (#9002313.03) file. This corresponds to NCPDP code 505-F5.
"^DD",9002313.32,9002313.32,2.1,"DT")
3171215
"^DD",9002313.511,9002313.511,2,0)
ADDL NCPDP FIELD^9002313.5112PA^^2;0
"^DD",9002313.511,9002313.511,2,21,0)
^.001^1^1^3171101^^^
"^DD",9002313.511,9002313.511,2,21,1,0)
Additional NCPDP fields to be added to the claim.
"^DD",9002313.511,9002313.5112,0)
ADDL NCPDP FIELD SUB-FIELD^^.02^2
"^DD",9002313.511,9002313.5112,0,"NM","ADDL NCPDP FIELD")

"^DD",9002313.511,9002313.5112,.01,0)
ADDL NCPDP FIELD^MP9002313.91'^BPSF(9002313.91,^0;1^Q
"^DD",9002313.511,9002313.5112,.01,1,0)
^.1
"^DD",9002313.511,9002313.5112,.01,1,1,0)
9002313.5112^B
"^DD",9002313.511,9002313.5112,.01,1,1,1)
S ^BPS(9002313.511,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",9002313.511,9002313.5112,.01,1,1,2)
K ^BPS(9002313.511,DA(1),2,"B",$E(X,1,30),DA)
"^DD",9002313.511,9002313.5112,.01,3)
Select the NCPDP field to be added to the claim.
"^DD",9002313.511,9002313.5112,.01,21,0)
^^1^1^3171023^
"^DD",9002313.511,9002313.5112,.01,21,1,0)
This data field is an NCPDP field to be added to the claim.
"^DD",9002313.511,9002313.5112,.01,"DT")
3171023
"^DD",9002313.511,9002313.5112,.02,0)
SEGMENT^P9002313.9'^BPSF(9002313.9,^0;2^Q
"^DD",9002313.511,9002313.5112,.02,1,0)
^.1
"^DD",9002313.511,9002313.5112,.02,1,1,0)
9002313.5112^SEG
"^DD",9002313.511,9002313.5112,.02,1,1,1)
S ^BPS(9002313.511,DA(1),2,"SEG",$E(X,1,30),DA)=""
"^DD",9002313.511,9002313.5112,.02,1,1,2)
K ^BPS(9002313.511,DA(1),2,"SEG",$E(X,1,30),DA)
"^DD",9002313.511,9002313.5112,.02,1,1,"%D",0)
^^3^3^3171103^
"^DD",9002313.511,9002313.5112,.02,1,1,"%D",1,0)
This cross-reference lists each field by its SEGMENT.  This index is used 
"^DD",9002313.511,9002313.5112,.02,1,1,"%D",2,0)
during the claim submission process to add any additional fields to the 
"^DD",9002313.511,9002313.5112,.02,1,1,"%D",3,0)
appropriate segment (see XLOOP^BPSOSCF and XLOOP^BPSOSH2).
"^DD",9002313.511,9002313.5112,.02,1,1,"DT")
3171026
"^DD",9002313.511,9002313.5112,.02,3)
Select the Segment on which this field should appear.
"^DD",9002313.511,9002313.5112,.02,21,0)
^^2^2^3171101^
"^DD",9002313.511,9002313.5112,.02,21,1,0)
This data field indicates the segment of a claim response on which this 
"^DD",9002313.511,9002313.5112,.02,21,2,0)
NCPDP field should appear.
"^DD",9002313.511,9002313.5112,.02,"DT")
3171026
"^DD",9002313.59,9002313.59141,.03,0)
OTHER PAYER-PATIENT RESP AMT^NJ8,2^^0;3^S:X["$" X=$P(X,"$",2) K:X'?."-".N.1".".2N!(X>99999.99)!(X<-99999.99) X
"^DD",9002313.59,9002313.59141,.03,3)
Type a dollar amount between -99999.99 and 99999.99, 2 decimal digits.
"^DD",9002313.59,9002313.59141,.03,21,0)
^^5^5^3171215^
"^DD",9002313.59,9002313.59141,.03,21,1,0)
NCPDP field 352-NQ - Other Payer-Patient Responsibility Amount.  This is 
"^DD",9002313.59,9002313.59141,.03,21,2,0)
the amount that is calculated by the processor and returned to the
"^DD",9002313.59,9002313.59141,.03,21,3,0)
pharmacy as the TOTAL amount to be paid by the patient to the pharmacy;
"^DD",9002313.59,9002313.59141,.03,21,4,0)
the patient's total cost share, including co-payments, amounts applied to
"^DD",9002313.59,9002313.59141,.03,21,5,0)
deductible, over maximum amounts, penalties, etc.
"^DD",9002313.59,9002313.59141,.03,"DT")
3171215
"^DD",9002313.77,9002313.7781,.03,0)
OTHER PAYER-PATIENT RESP AMT^NJ8,2^^0;3^S:X["$" X=$P(X,"$",2) K:X'?."-".N.1".".2N!(X>99999.99)!(X<-99999.99) X
"^DD",9002313.77,9002313.7781,.03,3)
Type a dollar amount between -99999.99 and 99999.99, 2 decimal digits.
"^DD",9002313.77,9002313.7781,.03,21,0)
^^5^5^3171215^
"^DD",9002313.77,9002313.7781,.03,21,1,0)
NCPDP field 505-F5 - Patient Pay Amount.  This is the amount that is
"^DD",9002313.77,9002313.7781,.03,21,2,0)
calculated by the processor and returned to the pharmacy as the TOTAL
"^DD",9002313.77,9002313.7781,.03,21,3,0)
amount to be paid by the patient to the pharmacy; the patient's total cost
"^DD",9002313.77,9002313.7781,.03,21,4,0)
share, including co-payments, amounts applied to deductible, over maximum
"^DD",9002313.77,9002313.7781,.03,21,5,0)
amounts, penalties, etc.
"^DD",9002313.77,9002313.7781,.03,"DT")
3171215
"^DD",9002313.9,9002313.9,0)
FIELD^^2^3
"^DD",9002313.9,9002313.9,0,"DT")
3180311
"^DD",9002313.9,9002313.9,0,"IX","B",9002313.9,.01)

"^DD",9002313.9,9002313.9,0,"IX","C",9002313.9,1)

"^DD",9002313.9,9002313.9,0,"NM","BPS NCPDP SEGMENTS")

"^DD",9002313.9,9002313.9,0,"PT",9002313.5112,.02)

"^DD",9002313.9,9002313.9,0,"PT",9002313.91,2)

"^DD",9002313.9,9002313.9,0,"PT",9002313.91,3)

"^DD",9002313.9,9002313.9,0,"VRPK")
BPS
"^DD",9002313.9,9002313.9,.01,0)
NAME^RFJ50^^0;1^K:$L(X)>50!($L(X)<5) X
"^DD",9002313.9,9002313.9,.01,1,0)
^.1
"^DD",9002313.9,9002313.9,.01,1,1,0)
9002313.9^B
"^DD",9002313.9,9002313.9,.01,1,1,1)
S ^BPSF(9002313.9,"B",$E(X,1,30),DA)=""
"^DD",9002313.9,9002313.9,.01,1,1,2)
K ^BPSF(9002313.9,"B",$E(X,1,30),DA)
"^DD",9002313.9,9002313.9,.01,3)
Answer must be 5-50 characters in length.
"^DD",9002313.9,9002313.9,.01,11,0)
^.2LAP
"^DD",9002313.9,9002313.9,.01,21,0)
^^1^1^3170619^
"^DD",9002313.9,9002313.9,.01,21,1,0)
This is the name of an NCPDP segment.
"^DD",9002313.9,9002313.9,.01,"DT")
3170619
"^DD",9002313.9,9002313.9,1,0)
VISTA SEGMENT NUMBER^FJ5^^0;2^K:$L(X)>5!($L(X)<1) X
"^DD",9002313.9,9002313.9,1,1,0)
^.1
"^DD",9002313.9,9002313.9,1,1,1,0)
9002313.9^C
"^DD",9002313.9,9002313.9,1,1,1,1)
S ^BPSF(9002313.9,"C",$E(X,1,30),DA)=""
"^DD",9002313.9,9002313.9,1,1,1,2)
K ^BPSF(9002313.9,"C",$E(X,1,30),DA)
"^DD",9002313.9,9002313.9,1,1,1,"%D",0)
^^1^1^3171103^
"^DD",9002313.9,9002313.9,1,1,1,"%D",1,0)
This cross-reference lists each segment by its VISTA SEGMENT NUMBER.
"^DD",9002313.9,9002313.9,1,1,1,"DT")
3171026
"^DD",9002313.9,9002313.9,1,3)
Answer must be 1-5 characters in length.
"^DD",9002313.9,9002313.9,1,21,0)
^^6^6^3171024^
"^DD",9002313.9,9002313.9,1,21,1,0)
Within VistA, each NCPDP segment has a number associated with it.  Within 
"^DD",9002313.9,9002313.9,1,21,2,0)
the software, segments are referred to by this number.  Examples include:
"^DD",9002313.9,9002313.9,1,21,3,0)
  100 = Transaction Header Segment
"^DD",9002313.9,9002313.9,1,21,4,0)
  110 = Patient Segment
"^DD",9002313.9,9002313.9,1,21,5,0)
  120 = Insurance Segment
"^DD",9002313.9,9002313.9,1,21,6,0)
etc.
"^DD",9002313.9,9002313.9,1,"DT")
3171026
"^DD",9002313.9,9002313.9,2,0)
TYPE^S^C:CLAIM;R:RESPONSE;B:BOTH;^0;3^Q
"^DD",9002313.9,9002313.9,2,3)
Enter a value to indicate which type(s) of transaction this segment is a part of.
"^DD",9002313.9,9002313.9,2,21,0)
^^1^1^3170619^
"^DD",9002313.9,9002313.9,2,21,1,0)
Each NCPDP segment is a part of one or more types of transactions.
"^DD",9002313.9,9002313.9,2,"DT")
3170619
"^DD",9002313.91,9002313.91,0)
FIELD^^3^15
"^DD",9002313.91,9002313.91,0,"DDA")
N
"^DD",9002313.91,9002313.91,0,"DT")
3180311
"^DD",9002313.91,9002313.91,0,"ID",.03)
W "   ",$P(^(0),U,3)
"^DD",9002313.91,9002313.91,0,"IX","AC",9002313.91,2)

"^DD",9002313.91,9002313.91,0,"IX","AD",9002313.91,3)

"^DD",9002313.91,9002313.91,0,"IX","B",9002313.91,.01)

"^DD",9002313.91,9002313.91,0,"IX","C",9002313.91,.03)

"^DD",9002313.91,9002313.91,0,"IX","D",9002313.91,.06)

"^DD",9002313.91,9002313.91,0,"NM","BPS NCPDP FIELD DEFS")

"^DD",9002313.91,9002313.91,0,"PT",9002313.311,.01)

"^DD",9002313.91,9002313.91,0,"PT",9002313.3121,.01)

"^DD",9002313.91,9002313.91,0,"PT",9002313.5111,.01)

"^DD",9002313.91,9002313.91,0,"PT",9002313.5112,.01)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9205,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9206,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9207,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9208,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9209,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.921,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9213,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9214,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9215,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9216,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9217,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9218,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9219,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.922,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9223,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9224,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9225,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9227,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9228,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9229,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.923,.02)

"^DD",9002313.91,9002313.91,0,"PT",102000102,.03)

"^DD",9002313.91,9002313.91,0,"VRPK")
BPS
"^DD",9002313.91,9002313.91,.01,0)
NCPDP FIELD NUMBER^RFX^^0;1^K:$L(X)>6!($L(X)<3) X
"^DD",9002313.91,9002313.91,.01,1,0)
^.1
"^DD",9002313.91,9002313.91,.01,1,1,0)
9002313.91^B
"^DD",9002313.91,9002313.91,.01,1,1,1)
S ^BPSF(9002313.91,"B",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,.01,1,1,2)
K ^BPSF(9002313.91,"B",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,.01,3)
Enter the NCPDP field number (either 0-997, 2 Decimal Digits or 3 Alphanumerics).
"^DD",9002313.91,9002313.91,.01,21,0)
^^1^1^3101014^
"^DD",9002313.91,9002313.91,.01,21,1,0)
This is the NCPDP field number as specified in the NCPDP data dictionary.
"^DD",9002313.91,9002313.91,.01,"DT")
3170227
"^DD",9002313.91,9002313.91,.03,0)
NAME^F^^0;3^K:$L(X)>30!($L(X)<3) X
"^DD",9002313.91,9002313.91,.03,1,0)
^.1
"^DD",9002313.91,9002313.91,.03,1,1,0)
9002313.91^C
"^DD",9002313.91,9002313.91,.03,1,1,1)
S ^BPSF(9002313.91,"C",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,.03,1,1,2)
K ^BPSF(9002313.91,"C",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,.03,1,1,"DT")
3001007
"^DD",9002313.91,9002313.91,.03,3)
Answer must be 3-30 characters in length.
"^DD",9002313.91,9002313.91,.03,21,0)
^^2^2^3071227^
"^DD",9002313.91,9002313.91,.03,21,1,0)
Descriptive name the tells what the field is within the pharmacy
"^DD",9002313.91,9002313.91,.03,21,2,0)
environment.
"^DD",9002313.91,9002313.91,.03,"DT")
3071227
"^DD",9002313.91,9002313.91,.04,0)
FORMAT^S^N:NUMERIC;A/N:ALPHA/NUMERIC;D:SIGNED NUMERIC;^0;4^Q
"^DD",9002313.91,9002313.91,.04,3)
Enter the field's format type.
"^DD",9002313.91,9002313.91,.04,21,0)
^^1^1^3071227^
"^DD",9002313.91,9002313.91,.04,21,1,0)
This is the format of the field used within the NCPDP standard.
"^DD",9002313.91,9002313.91,.04,"DT")
3071227
"^DD",9002313.91,9002313.91,.06,0)
ID^F^^5;1^K:$L(X)>2!($L(X)<2) X
"^DD",9002313.91,9002313.91,.06,1,0)
^.1
"^DD",9002313.91,9002313.91,.06,1,1,0)
9002313.91^D
"^DD",9002313.91,9002313.91,.06,1,1,1)
S ^BPSF(9002313.91,"D",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,.06,1,1,2)
K ^BPSF(9002313.91,"D",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,.06,1,1,"%D",0)
^^3^3^3020807^
"^DD",9002313.91,9002313.91,.06,1,1,"%D",1,0)
Cross reference of the 5.1 Field ID.  This cross reference will be used in
"^DD",9002313.91,9002313.91,.06,1,1,"%D",2,0)
the processing of the response as a means of translating the value to a
"^DD",9002313.91,9002313.91,.06,1,1,"%D",3,0)
field number.
"^DD",9002313.91,9002313.91,.06,1,1,"DT")
3020807
"^DD",9002313.91,9002313.91,.06,3)
Answer must be 2 characters in length.
"^DD",9002313.91,9002313.91,.06,21,0)
^^3^3^3071227^
"^DD",9002313.91,9002313.91,.06,21,1,0)
The same as the .02 field, but for specific use when creating 5.1
"^DD",9002313.91,9002313.91,.06,21,2,0)
claims.  The 5.1 fields were separated because 3.x and 5.1 claims were
"^DD",9002313.91,9002313.91,.06,21,3,0)
being submitted concurrently.  
"^DD",9002313.91,9002313.91,.06,"DT")
3071227
"^DD",9002313.91,9002313.91,.07,0)
LENGTH^NJ4,0^^5;2^K:+X'=X!(X>9999)!(X<1)!(X?.E1"."1.N) X
"^DD",9002313.91,9002313.91,.07,3)
Type a number between 1 and 9999, 0 Decimal Digits
"^DD",9002313.91,9002313.91,.07,21,0)
^^1^1^3040121^
"^DD",9002313.91,9002313.91,.07,21,1,0)
Length of the field from the 5.1 NCPDP standard.
"^DD",9002313.91,9002313.91,.07,"DT")
3071227
"^DD",9002313.91,9002313.91,.08,0)
D0 LENGTH^NJ3,0^^0;8^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",9002313.91,9002313.91,.08,3)
Enter the length of the NCPDP field per the NCPDP data dictionary (1-999).
"^DD",9002313.91,9002313.91,.08,21,0)
^^2^2^3101014^
"^DD",9002313.91,9002313.91,.08,21,1,0)
This is the NCPDP length as specified in the NCPDP Telecommunication
"^DD",9002313.91,9002313.91,.08,21,2,0)
Standard version D.0 data dictionary.
"^DD",9002313.91,9002313.91,.08,"DT")
3101014
"^DD",9002313.91,9002313.91,.09,0)
D0 FORMAT^S^N:NUMERIC;A/N:ALPHANUMERIC;D:SIGNED NUMERIC;^0;9^Q
"^DD",9002313.91,9002313.91,.09,3)
Enter the data type for the field based on the NCPDP data dictionary.
"^DD",9002313.91,9002313.91,.09,21,0)
^^2^2^3101014^
"^DD",9002313.91,9002313.91,.09,21,1,0)
This is the NCPDP data type as specified in the NCPDP Telecommunication
"^DD",9002313.91,9002313.91,.09,21,2,0)
Standard version D.0 data dictionary.
"^DD",9002313.91,9002313.91,.09,"DT")
3101014
"^DD",9002313.91,9002313.91,1,0)
VISTA FIELD NUMBER^NJ4,0^^5;3^K:+X'=X!(X>2999)!(X<1001)!(X?.E1"."1.N) X
"^DD",9002313.91,9002313.91,1,3)
Type a number between 1001 and 2999, 0 decimal digits.
"^DD",9002313.91,9002313.91,1,21,0)
^^5^5^3130424^
"^DD",9002313.91,9002313.91,1,21,1,0)
This is the VistA field number used in BPS CLAIMS file #9002313.02 and BPS
"^DD",9002313.91,9002313.91,1,21,2,0)
RESPONSES file #9002313.03. Only used for NCPDP numbers where the first 
"^DD",9002313.91,9002313.91,1,21,3,0)
piece of the NCPDP number is non-numeric.
"^DD",9002313.91,9002313.91,1,21,4,0)
 
"^DD",9002313.91,9002313.91,1,21,5,0)
For example, NCPDP field B04-BT - Next Available Fill Date.
"^DD",9002313.91,9002313.91,1,"DT")
3130424
"^DD",9002313.91,9002313.91,1.01,0)
STANDARD NCPDP FIELD NAME^F^^1;1^K:$L(X)>100!($L(X)<1) X
"^DD",9002313.91,9002313.91,1.01,3)
Enter the full NCPDP field name based on the NCPDP data dictionary (1-100 characters).
"^DD",9002313.91,9002313.91,1.01,21,0)
^^3^3^3101014^
"^DD",9002313.91,9002313.91,1.01,21,1,0)
This field is used for those NCPDP field names that were too long to fit 
"^DD",9002313.91,9002313.91,1.01,21,2,0)
in the NAME (#.03) field.  For those fields, this field will
"^DD",9002313.91,9002313.91,1.01,21,3,0)
have the full NCPDP field name.
"^DD",9002313.91,9002313.91,1.01,"DT")
3110706
"^DD",9002313.91,9002313.91,2,0)
REQUEST SEGMENT^P9002313.9'^BPSF(9002313.9,^5;4^Q
"^DD",9002313.91,9002313.91,2,1,0)
^.1
"^DD",9002313.91,9002313.91,2,1,1,0)
9002313.91^AC
"^DD",9002313.91,9002313.91,2,1,1,1)
S ^BPSF(9002313.91,"AC",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,2,1,1,2)
K ^BPSF(9002313.91,"AC",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,2,1,1,"%D",0)
^^1^1^3171102^
"^DD",9002313.91,9002313.91,2,1,1,"%D",1,0)
This cross-reference lists each field by its REQUEST SEGMENT.
"^DD",9002313.91,9002313.91,2,1,1,"DT")
3171102
"^DD",9002313.91,9002313.91,2,3)
Select the Request Segment which this field would appear on.
"^DD",9002313.91,9002313.91,2,21,0)
^^3^3^3171024^
"^DD",9002313.91,9002313.91,2,21,1,0)
This data field indicates the segment of a claim request on which this 
"^DD",9002313.91,9002313.91,2,21,2,0)
NCPDP field would appear.  If this NCPDP field appears only on the 
"^DD",9002313.91,9002313.91,2,21,3,0)
incoming response, then this field would remain blank.
"^DD",9002313.91,9002313.91,2,"DT")
3171102
"^DD",9002313.91,9002313.91,3,0)
RESPONSE SEGMENT^P9002313.9'^BPSF(9002313.9,^5;5^Q
"^DD",9002313.91,9002313.91,3,1,0)
^.1
"^DD",9002313.91,9002313.91,3,1,1,0)
9002313.91^AD
"^DD",9002313.91,9002313.91,3,1,1,1)
S ^BPSF(9002313.91,"AD",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,3,1,1,2)
K ^BPSF(9002313.91,"AD",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,3,1,1,"%D",0)
^^1^1^3171102^
"^DD",9002313.91,9002313.91,3,1,1,"%D",1,0)
This cross-reference lists each field by its RESPONSE SEGMENT.
"^DD",9002313.91,9002313.91,3,1,1,"DT")
3171102
"^DD",9002313.91,9002313.91,3,3)
Select the Response Segment which this field would appear on.
"^DD",9002313.91,9002313.91,3,21,0)
^^3^3^3171024^
"^DD",9002313.91,9002313.91,3,21,1,0)
This data field indicates the segment of a claim response on which this 
"^DD",9002313.91,9002313.91,3,21,2,0)
NCPDP field would appear.  If this NCPDP field appears only on the 
"^DD",9002313.91,9002313.91,3,21,3,0)
outgoing claim request, then this field would remain blank.
"^DD",9002313.91,9002313.91,3,"DT")
3171102
"^DD",9002313.91,9002313.91,10,0)
GET CODE^9002313.9101^^10;0
"^DD",9002313.91,9002313.91,10,3)
Enter the M code to extract the data for this field.
"^DD",9002313.91,9002313.91,10,9)
@
"^DD",9002313.91,9002313.91,10,21,0)
^.001^2^2^3101001^^
"^DD",9002313.91,9002313.91,10,21,1,0)
M code that tells the BPS system where to find the 
"^DD",9002313.91,9002313.91,10,21,2,0)
particular piece of data for this field.
"^DD",9002313.91,9002313.91,10,"DT")
3071227
"^DD",9002313.91,9002313.91,20,0)
D0 FORMAT CODE^9002313.9102^^20;0
"^DD",9002313.91,9002313.91,20,9)
@
"^DD",9002313.91,9002313.91,20,21,0)
^^4^4^3101014^
"^DD",9002313.91,9002313.91,20,21,1,0)
This field holds the M code used to format the data according to the
"^DD",9002313.91,9002313.91,20,21,2,0)
specifications of the NCPDP Telecommunication Standard version D.0 data
"^DD",9002313.91,9002313.91,20,21,3,0)
dictionary.  For instance, alphanumeric fields are right-padded with
"^DD",9002313.91,9002313.91,20,21,4,0)
spaces up to the length of the specified by the NCPDP standard.
"^DD",9002313.91,9002313.91,20,"DT")
3101005
"^DD",9002313.91,9002313.91,30,0)
SET CODE^9002313.9103^^30;0
"^DD",9002313.91,9002313.91,30,3)
Enter the M code for the field's data storage.
"^DD",9002313.91,9002313.91,30,9)
@
"^DD",9002313.91,9002313.91,30,21,0)
^^1^1^3040326^
"^DD",9002313.91,9002313.91,30,21,1,0)
M code to store the data in the appropriate segment within the claim.
"^DD",9002313.91,9002313.91,30,"DT")
3071227
"^DD",9002313.91,9002313.91,40,0)
FORMAT CODE^9002313.9104^^25;0
"^DD",9002313.91,9002313.91,40,3)
Enter the M code to format the data in NCPDP format.
"^DD",9002313.91,9002313.91,40,9)
@
"^DD",9002313.91,9002313.91,40,21,0)
^^2^2^3071227^
"^DD",9002313.91,9002313.91,40,21,1,0)
M code to format the data before storing it in the claim.  5.1 was
"^DD",9002313.91,9002313.91,40,21,2,0)
separate because 3.2 and 5.1 claims were being submitted at the same time.
"^DD",9002313.91,9002313.91,40,"DT")
3071227
"^DD",9002313.91,9002313.9101,0)
GET CODE SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9101,0,"DT")
3071227
"^DD",9002313.91,9002313.9101,0,"NM","GET CODE")

"^DD",9002313.91,9002313.9101,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9101,.01,0)
GET CODE^WL^^0;1^Q
"^DD",9002313.91,9002313.9101,.01,3)
Enter the M code to extract the data for this field.
"^DD",9002313.91,9002313.9101,.01,9)
@
"^DD",9002313.91,9002313.9101,.01,"DT")
3071227
"^DD",9002313.91,9002313.9102,0)
D0 FORMAT CODE SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9102,0,"DT")
3100721
"^DD",9002313.91,9002313.9102,0,"NM","D0 FORMAT CODE")

"^DD",9002313.91,9002313.9102,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9102,.01,0)
D0 FORMAT CODE^WLx^^0;1^Q
"^DD",9002313.91,9002313.9102,.01,"DT")
3101014
"^DD",9002313.91,9002313.9103,0)
SET CODE SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9103,0,"DT")
2950420
"^DD",9002313.91,9002313.9103,0,"NM","SET CODE")

"^DD",9002313.91,9002313.9103,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9103,.01,0)
SET CODE^WL^^0;1^Q
"^DD",9002313.91,9002313.9103,.01,3)
Enter the M code for the field's data storage.
"^DD",9002313.91,9002313.9103,.01,9)
@
"^DD",9002313.91,9002313.9103,.01,"DT")
3071227
"^DD",9002313.91,9002313.9104,0)
FORMAT CODE SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9104,0,"DT")
3020724
"^DD",9002313.91,9002313.9104,0,"NM","FORMAT CODE")

"^DD",9002313.91,9002313.9104,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9104,.01,0)
FORMAT CODE^WL^^0;1^Q
"^DD",9002313.91,9002313.9104,.01,3)
Enter the M code to format the data in NCPDP format.
"^DD",9002313.91,9002313.9104,.01,9)
@
"^DD",9002313.91,9002313.9104,.01,"DT")
3071227
"^DD",9002313.93,9002313.93,0)
FIELD^^.02^2
"^DD",9002313.93,9002313.93,0,"DDA")
N
"^DD",9002313.93,9002313.93,0,"DT")
3180311
"^DD",9002313.93,9002313.93,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",9002313.93,9002313.93,0,"IX","B",9002313.93,.01)

"^DD",9002313.93,9002313.93,0,"NM","BPS NCPDP REJECT CODES")

"^DD",9002313.93,9002313.93,0,"PT",52.865,.01)

"^DD",9002313.93,9002313.93,0,"PT",52.8651,.01)

"^DD",9002313.93,9002313.93,0,"PT",9002313.321,.01)

"^DD",9002313.93,9002313.93,0,"VRPK")
BPS
"^DD",9002313.93,9002313.93,.01,0)
CODE^RF^^0;1^K:$L(X)>3!($L(X)<2) X
"^DD",9002313.93,9002313.93,.01,1,0)
^.1
"^DD",9002313.93,9002313.93,.01,1,1,0)
9002313.93^B
"^DD",9002313.93,9002313.93,.01,1,1,1)
S ^BPSF(9002313.93,"B",$E(X,1,30),DA)=""
"^DD",9002313.93,9002313.93,.01,1,1,2)
K ^BPSF(9002313.93,"B",$E(X,1,30),DA)
"^DD",9002313.93,9002313.93,.01,3)
Enter the Reject Code that is returned from the payer.
"^DD",9002313.93,9002313.93,.01,21,0)
^^2^2^3080529^
"^DD",9002313.93,9002313.93,.01,21,1,0)
Reject Code returned by the payer for the reason of the rejection.  This
"^DD",9002313.93,9002313.93,.01,21,2,0)
is based on the NCPDP standards.
"^DD",9002313.93,9002313.93,.01,"DT")
3080529
"^DD",9002313.93,9002313.93,.02,0)
EXPLANATION^F^^0;2^K:$L(X)>70!($L(X)<1) X
"^DD",9002313.93,9002313.93,.02,3)
Enter the description of the reject code.
"^DD",9002313.93,9002313.93,.02,21,0)
^^1^1^3080529^
"^DD",9002313.93,9002313.93,.02,21,1,0)
Textual explanation of the claim rejection.
"^DD",9002313.93,9002313.93,.02,"DT")
3180523
"^DIC",9002313.2,9002313.2,0)
BPS NCPDP OTHER PAYER AMT PAID QUAL^9002313.2
"^DIC",9002313.2,9002313.2,0,"GL")
^BPS(9002313.2,
"^DIC",9002313.2,9002313.2,"%",0)
^1.005^1^1
"^DIC",9002313.2,9002313.2,"%",1,0)
BPS
"^DIC",9002313.2,9002313.2,"%","B","BPS",1)

"^DIC",9002313.2,9002313.2,"%D",0)
^1.001^6^6^3150302^^
"^DIC",9002313.2,9002313.2,"%D",1,0)
This file is used to store the codes and descriptions for NCPDP field 
"^DIC",9002313.2,9002313.2,"%D",2,0)
342-HC (Other Payer Amount Paid Qualifier).  These codes are used for 
"^DIC",9002313.2,9002313.2,"%D",3,0)
secondary electronic claim transmissions to third party payers.  No local 
"^DIC",9002313.2,9002313.2,"%D",4,0)
changes should ever be made to this file.
"^DIC",9002313.2,9002313.2,"%D",5,0)
 
"^DIC",9002313.2,9002313.2,"%D",6,0)
Per VA Directive 6402, this file definition should not be modified.
"^DIC",9002313.2,"B","BPS NCPDP OTHER PAYER AMT PAID",9002313.2)

"^DIC",9002313.22,9002313.22,0)
BPS NCPDP RESULT OF SERVICE CODE^9002313.22
"^DIC",9002313.22,9002313.22,0,"GL")
^BPS(9002313.22,
"^DIC",9002313.22,9002313.22,"%",0)
^1.005^^0
"^DIC",9002313.22,9002313.22,"%D",0)
^1.001^7^7^3100817^^^^
"^DIC",9002313.22,9002313.22,"%D",1,0)
NCPDPD field 441-E6 - Result of Service Code
"^DIC",9002313.22,9002313.22,"%D",2,0)
 
"^DIC",9002313.22,9002313.22,"%D",3,0)
This file is used to store the possible NCPDP RESULT OF SERVICE CODE 
"^DIC",9002313.22,9002313.22,"%D",4,0)
values, which are used for overriding DUR rejects.
"^DIC",9002313.22,9002313.22,"%D",5,0)
No local changes should ever be made to this file.
"^DIC",9002313.22,9002313.22,"%D",6,0)
 
"^DIC",9002313.22,9002313.22,"%D",7,0)
Per VHA Directive 2004-038, this file definition should not be modified.
"^DIC",9002313.22,"B","BPS NCPDP RESULT OF SERVICE CO",9002313.22)

"^DIC",9002313.25,9002313.25,0)
BPS NCPDP CLARIFICATION CODES^9002313.25
"^DIC",9002313.25,9002313.25,0,"GL")
^BPS(9002313.25,
"^DIC",9002313.25,9002313.25,"%",0)
^1.005^^0
"^DIC",9002313.25,9002313.25,"%D",0)
^^6^6^3080521^
"^DIC",9002313.25,9002313.25,"%D",1,0)
This file is used to store the possible NCPDP CLARIFICATION CODES values,
"^DIC",9002313.25,9002313.25,"%D",2,0)
which are used for overriding DUR rejects.  No local changes should ever 
"^DIC",9002313.25,9002313.25,"%D",3,0)
be made to this file.  The data stored in this file are based on the 
"^DIC",9002313.25,9002313.25,"%D",4,0)
NCPDP standards and are nationally distributed.
"^DIC",9002313.25,9002313.25,"%D",5,0)
 
"^DIC",9002313.25,9002313.25,"%D",6,0)
Per VHA Directive 2004-038, this file definition should not be modified.
"^DIC",9002313.25,"B","BPS NCPDP CLARIFICATION CODES",9002313.25)

"^DIC",9002313.9,9002313.9,0)
BPS NCPDP SEGMENTS^9002313.9
"^DIC",9002313.9,9002313.9,0,"GL")
^BPSF(9002313.9,
"^DIC",9002313.9,9002313.9,"%",0)
^1.005^^0
"^DIC",9002313.9,9002313.9,"%","B","ABSP",1)

"^DIC",9002313.9,9002313.9,"%D",0)
^1.001^9^9^3171024
"^DIC",9002313.9,9002313.9,"%D",1,0)
Each transaction described in the NCPDP Telecommunication Standard is
"^DIC",9002313.9,9002313.9,"%D",2,0)
comprised of one or more segments.  This file contains a list of
"^DIC",9002313.9,9002313.9,"%D",3,0)
segments.  The file BPS NCPDP FIELD DEFS lists each field that may be
"^DIC",9002313.9,9002313.9,"%D",4,0)
on an outgoing claim request or an incoming claim response.  Each entry
"^DIC",9002313.9,9002313.9,"%D",5,0)
in that file will have a field that points to this file to indicate
"^DIC",9002313.9,9002313.9,"%D",6,0)
which segment that field is a part of for the claim request (field
"^DIC",9002313.9,9002313.9,"%D",7,0)
REQUEST SEGMENT) and/or the claim response (field RESPONSE SEGMENT).
"^DIC",9002313.9,9002313.9,"%D",8,0)
 
"^DIC",9002313.9,9002313.9,"%D",9,0)
Per VA Directive 6402, this file definition should not be modified.
"^DIC",9002313.9,"B","BPS NCPDP SEGMENTS",9002313.9)

"^DIC",9002313.91,9002313.91,0)
BPS NCPDP FIELD DEFS^9002313.91
"^DIC",9002313.91,9002313.91,0,"GL")
^BPSF(9002313.91,
"^DIC",9002313.91,9002313.91,"%",0)
^1.005^^0
"^DIC",9002313.91,9002313.91,"%","B","ABSP",1)

"^DIC",9002313.91,9002313.91,"%D",0)
^1.001^4^4^3100925^^^^
"^DIC",9002313.91,9002313.91,"%D",1,0)
The NCPDP Data Dictionary Individual fields which combine into formatted 
"^DIC",9002313.91,9002313.91,"%D",2,0)
packets.
"^DIC",9002313.91,9002313.91,"%D",3,0)
 
"^DIC",9002313.91,9002313.91,"%D",4,0)
Per VHA Directive 2004-038, this file definition should not be modified.
"^DIC",9002313.91,"B","BPS NCPDP FIELD DEFS",9002313.91)

"^DIC",9002313.93,9002313.93,0)
BPS NCPDP REJECT CODES^9002313.93
"^DIC",9002313.93,9002313.93,0,"GL")
^BPSF(9002313.93,
"^DIC",9002313.93,9002313.93,"%",0)
^1.005^^0
"^DIC",9002313.93,9002313.93,"%","B","ABSP",1)

"^DIC",9002313.93,9002313.93,"%D",0)
^1.001^8^8^3100817^^
"^DIC",9002313.93,9002313.93,"%D",1,0)
NCPDP field 511-FB REJECT CODE
"^DIC",9002313.93,9002313.93,"%D",2,0)
 
"^DIC",9002313.93,9002313.93,"%D",3,0)
This file is used to store the possible NCPDP REJECT CODES, that can be 
"^DIC",9002313.93,9002313.93,"%D",4,0)
returned by the payer.  No local changes should ever be made to this
"^DIC",9002313.93,9002313.93,"%D",5,0)
file.  The data stored in this file are based on the NCPDP standards and
"^DIC",9002313.93,9002313.93,"%D",6,0)
are nationally distributed.
"^DIC",9002313.93,9002313.93,"%D",7,0)
 
"^DIC",9002313.93,9002313.93,"%D",8,0)
Per VHA Directive 2004-038, this file definition should not be modified.
"^DIC",9002313.93,"B","BPS NCPDP REJECT CODES",9002313.93)

**INSTALL NAME**
IB*2.0*591
"BLD",10640,0)
IB*2.0*591^INTEGRATED BILLING^0^3180620^y
"BLD",10640,1,0)
^^1^1^3171107^^^^
"BLD",10640,1,1,0)
MCCF EDI TAS EPHARMACY BUILDS 3 & 4
"BLD",10640,4,0)
^9.64PA^366.14^1
"BLD",10640,4,366.14,0)
366.14
"BLD",10640,4,366.14,2,0)
^9.641^366.1412^1
"BLD",10640,4,366.14,2,366.1412,0)
INSURANCE  (sub-file)
"BLD",10640,4,366.14,2,366.1412,1,0)
^9.6411^^
"BLD",10640,4,366.14,222)
y^y^p^^^^n^^n
"BLD",10640,4,366.14,224)

"BLD",10640,4,"APDD",366.14,366.1412)

"BLD",10640,4,"B",366.14,366.14)

"BLD",10640,6.3)
45
"BLD",10640,"ABPKG")
n
"BLD",10640,"INI")

"BLD",10640,"INIT")

"BLD",10640,"KRN",0)
^9.67PA^779.2^20
"BLD",10640,"KRN",.4,0)
.4
"BLD",10640,"KRN",.4,"NM",0)
^9.68A^^
"BLD",10640,"KRN",.401,0)
.401
"BLD",10640,"KRN",.402,0)
.402
"BLD",10640,"KRN",.403,0)
.403
"BLD",10640,"KRN",.5,0)
.5
"BLD",10640,"KRN",.5,"NM",0)
^9.68A^^
"BLD",10640,"KRN",.84,0)
.84
"BLD",10640,"KRN",3.6,0)
3.6
"BLD",10640,"KRN",3.8,0)
3.8
"BLD",10640,"KRN",9.2,0)
9.2
"BLD",10640,"KRN",9.8,0)
9.8
"BLD",10640,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",10640,"KRN",9.8,"NM",1,0)
IBCNRRP3^^0^B58267824
"BLD",10640,"KRN",9.8,"NM",2,0)
IBCBB11^^0^B104877597
"BLD",10640,"KRN",9.8,"NM",3,0)
IBCBB14^^0^B5240660
"BLD",10640,"KRN",9.8,"NM","B","IBCBB11",2)

"BLD",10640,"KRN",9.8,"NM","B","IBCBB14",3)

"BLD",10640,"KRN",9.8,"NM","B","IBCNRRP3",1)

"BLD",10640,"KRN",19,0)
19
"BLD",10640,"KRN",19,"NM",0)
^9.68A^^0
"BLD",10640,"KRN",19.1,0)
19.1
"BLD",10640,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",10640,"KRN",101,0)
101
"BLD",10640,"KRN",101,"NM",0)
^9.68A^^0
"BLD",10640,"KRN",409.61,0)
409.61
"BLD",10640,"KRN",409.61,"NM",0)
^9.68A^2^2
"BLD",10640,"KRN",409.61,"NM",1,0)
IBCNR GROUP PLAN MATCH^^0
"BLD",10640,"KRN",409.61,"NM",2,0)
IBCNR PLAN MATCH^^0
"BLD",10640,"KRN",409.61,"NM","B","IBCNR GROUP PLAN MATCH",1)

"BLD",10640,"KRN",409.61,"NM","B","IBCNR PLAN MATCH",2)

"BLD",10640,"KRN",771,0)
771
"BLD",10640,"KRN",771,"NM",0)
^9.68A^^
"BLD",10640,"KRN",779.2,0)
779.2
"BLD",10640,"KRN",779.2,"NM",0)
^9.68A^^
"BLD",10640,"KRN",870,0)
870
"BLD",10640,"KRN",870,"NM",0)
^9.68A^^
"BLD",10640,"KRN",8989.51,0)
8989.51
"BLD",10640,"KRN",8989.51,"NM",0)
^9.68A^^
"BLD",10640,"KRN",8989.52,0)
8989.52
"BLD",10640,"KRN",8994,0)
8994
"BLD",10640,"KRN","B",.4,.4)

"BLD",10640,"KRN","B",.401,.401)

"BLD",10640,"KRN","B",.402,.402)

"BLD",10640,"KRN","B",.403,.403)

"BLD",10640,"KRN","B",.5,.5)

"BLD",10640,"KRN","B",.84,.84)

"BLD",10640,"KRN","B",3.6,3.6)

"BLD",10640,"KRN","B",3.8,3.8)

"BLD",10640,"KRN","B",9.2,9.2)

"BLD",10640,"KRN","B",9.8,9.8)

"BLD",10640,"KRN","B",19,19)

"BLD",10640,"KRN","B",19.1,19.1)

"BLD",10640,"KRN","B",101,101)

"BLD",10640,"KRN","B",409.61,409.61)

"BLD",10640,"KRN","B",771,771)

"BLD",10640,"KRN","B",779.2,779.2)

"BLD",10640,"KRN","B",870,870)

"BLD",10640,"KRN","B",8989.51,8989.51)

"BLD",10640,"KRN","B",8989.52,8989.52)

"BLD",10640,"KRN","B",8994,8994)

"BLD",10640,"QDEF")
^^^^^^^^YES
"BLD",10640,"QUES",0)
^9.62^^
"BLD",10640,"REQB",0)
^9.611^^
"FIA",366.14)
IB NCPDP EVENT LOG
"FIA",366.14,0)
^IBCNR(366.14,
"FIA",366.14,0,0)
366.14D
"FIA",366.14,0,1)
y^y^p^^^^n^^n
"FIA",366.14,0,10)

"FIA",366.14,0,11)

"FIA",366.14,0,"RLRO")

"FIA",366.14,0,"VR")
2.0^IB
"FIA",366.14,366.14)
1
"FIA",366.14,366.141)
1
"FIA",366.14,366.141,2)

"FIA",366.14,366.1412)
0
"KRN",409.61,559,-1)
0^2
"KRN",409.61,559,0)
IBCNR PLAN MATCH^1^^80^6^19^0^1^Group Name^IBCNR PLAN LIST^Match Group Insurance Plan^1^^1
"KRN",409.61,559,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,559,"ARRAY")
 ^TMP("IBCNR",$J)
"KRN",409.61,559,"COL",0)
^409.621^6^6
"KRN",409.61,559,"COL",1,0)
NUMBER^1^4
"KRN",409.61,559,"COL",2,0)
GNAME^5^20^Group Name
"KRN",409.61,559,"COL",3,0)
GNUM^28^15^Group Number
"KRN",409.61,559,"COL",4,0)
TYPE^46^13^Type of Plan
"KRN",409.61,559,"COL",5,0)
PHARM^61^13^VA PLAN ID
"KRN",409.61,559,"COL",6,0)
COV^75^8^Rx Covrd
"KRN",409.61,559,"COL","B","COV",6)

"KRN",409.61,559,"COL","B","GNAME",2)

"KRN",409.61,559,"COL","B","GNUM",3)

"KRN",409.61,559,"COL","B","NUMBER",1)

"KRN",409.61,559,"COL","B","PHARM",5)

"KRN",409.61,559,"COL","B","TYPE",4)

"KRN",409.61,559,"FNL")
D EXIT^IBCNRP
"KRN",409.61,559,"HDR")
D HDR^IBCNRP
"KRN",409.61,559,"HLP")
D HELP^IBCNRP
"KRN",409.61,559,"INIT")
D INIT^IBCNRP
"KRN",409.61,561,-1)
0^1
"KRN",409.61,561,0)
IBCNR GROUP PLAN MATCH^1^^80^7^20^0^1^Group Plan^IBCNR GROUP PLAN LIST^Match Group Insurance Plans^1^^1
"KRN",409.61,561,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,561,"ARRAY")
 ^TMP("IBCNR",$J,"PM")
"KRN",409.61,561,"COL",0)
^409.621^5^5
"KRN",409.61,561,"COL",1,0)
NUMBER^1^4
"KRN",409.61,561,"COL",2,0)
GNAME^5^20^Group Name
"KRN",409.61,561,"COL",3,0)
GNUM^28^15^Group Number
"KRN",409.61,561,"COL",4,0)
GTYP^48^13^Grp/Plan Type
"KRN",409.61,561,"COL",5,0)
PHRM^65^15^VA PLAN ID
"KRN",409.61,561,"COL","B","GNAME",2)

"KRN",409.61,561,"COL","B","GNUM",3)

"KRN",409.61,561,"COL","B","GTYP",4)

"KRN",409.61,561,"COL","B","NUMBER",1)

"KRN",409.61,561,"COL","B","PHRM",5)

"KRN",409.61,561,"FNL")
D EXIT^IBCNRPM2
"KRN",409.61,561,"HDR")
D HDR^IBCNRPM2
"KRN",409.61,561,"HLP")
D HELP^IBCNRPM2
"KRN",409.61,561,"INIT")
D INIT^IBCNRPM2
"MBREQ")
1
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"PKG",230,-1)
1^1
"PKG",230,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",230,20,0)
^9.402P^1^1
"PKG",230,20,1,0)
2^^IBAXDR
"PKG",230,20,1,1)

"PKG",230,20,"B",2,1)

"PKG",230,22,0)
^9.49I^1^1
"PKG",230,22,1,0)
2.0^2940321^2940525
"PKG",230,22,1,"PAH",1,0)
591^3180620^520824633
"PKG",230,22,1,"PAH",1,1,0)
^^1^1^3180620
"PKG",230,22,1,"PAH",1,1,1,0)
MCCF EDI TAS EPHARMACY BUILDS 3 & 4
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","IBCBB11")
0^2^B104877597
"RTN","IBCBB11",1,0)
IBCBB11 ;ALB/AAS/OIFO-BP/PIJ - CONTINUATION OF EDIT CHECK ROUTINE ;12 Jun 2006  3:45 PM
"RTN","IBCBB11",2,0)
 ;;2.0;INTEGRATED BILLING;**51,343,363,371,395,392,401,384,400,436,432,516,550,577,568,591**;21-MAR-94;Build 45
"RTN","IBCBB11",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB11",4,0)
 ;
"RTN","IBCBB11",5,0)
WARN(IBDISP) ; Set warning in global
"RTN","IBCBB11",6,0)
 ; DISP = warning text to display
"RTN","IBCBB11",7,0)
 ;
"RTN","IBCBB11",8,0)
 N Z
"RTN","IBCBB11",9,0)
 S Z=+$O(^TMP($J,"BILL-WARN",""),-1)
"RTN","IBCBB11",10,0)
 I Z=0 S ^TMP($J,"BILL-WARN",1)=$J("",5)_"**Warnings**:",Z=1
"RTN","IBCBB11",11,0)
 S Z=Z+1,^TMP($J,"BILL-WARN",Z)=$J("",5)_IBDISP
"RTN","IBCBB11",12,0)
 Q
"RTN","IBCBB11",13,0)
 ;
"RTN","IBCBB11",14,0)
MULTDIV(IBIFN,IBND0) ; Check for multiple divisions on a bill ien IBIFN
"RTN","IBCBB11",15,0)
 ; IBND0 = 0-node of bill
"RTN","IBCBB11",16,0)
 ;
"RTN","IBCBB11",17,0)
 ;  Function returns 1 if more than 1 division found on bill
"RTN","IBCBB11",18,0)
 N Z,Z0,Z1,MULT
"RTN","IBCBB11",19,0)
 S MULT=0,Z1=$P(IBND0,U,22)
"RTN","IBCBB11",20,0)
 I Z1 D
"RTN","IBCBB11",21,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$P(^(Z,0),U,7) I Z0,Z0'=Z1 S MULT=1 Q
"RTN","IBCBB11",22,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  S Z0=$P(^(Z,0),U,6) I Z0,Z0'=Z1 S MULT=2 Q
"RTN","IBCBB11",23,0)
 I 'Z1 S MULT=3
"RTN","IBCBB11",24,0)
 Q MULT
"RTN","IBCBB11",25,0)
 ;
"RTN","IBCBB11",26,0)
 ;; PREGNANCY DX CODES: V22**-V24**, V27**-V28**, 630**-677**
"RTN","IBCBB11",27,0)
 ;; FLU SHOTS PROCEDURE CODES: 90724, G0008, 90732, G0009
"RTN","IBCBB11",28,0)
 ;
"RTN","IBCBB11",29,0)
NPICHK ; Check for required NPIs
"RTN","IBCBB11",30,0)
 N IBNPIS,IBNONPI,IBNPIREQ,Z,IBNFI,IBTF,IBWC,IBXSAVE,IBPRV,IBLINE,IBPRVNT1,IBPRVNT2
"RTN","IBCBB11",31,0)
 ;*** pij start IB*20*436 ***
"RTN","IBCBB11",32,0)
 N IBRATYPE,IBLEGAL
"RTN","IBCBB11",33,0)
 S (IBRATYPE,IBLEGAL)=""
"RTN","IBCBB11",34,0)
 S IBRATYPE=$P($G(^DGCR(399,IBIFN,0)),U,7)
"RTN","IBCBB11",35,0)
 ; Legal types for this use.
"RTN","IBCBB11",36,0)
 ;  7=NO FAULT INS.
"RTN","IBCBB11",37,0)
 ; 10=TORT FEASOR
"RTN","IBCBB11",38,0)
 ; 11=WORKERS' COMP.
"RTN","IBCBB11",39,0)
 S IBNFI=$O(^DGCR(399.3,"B","NO FAULT INS.",0)) S:'IBNFI IBNFI=7
"RTN","IBCBB11",40,0)
 S IBTF=$O(^DGCR(399.3,"B","TORT FEASOR",0)) S:'IBTF IBTF=10
"RTN","IBCBB11",41,0)
 S IBWC=$O(^DGCR(399.3,"B","WORKERS' COMP.",0)) S:'IBWC IBWC=11
"RTN","IBCBB11",42,0)
 ;
"RTN","IBCBB11",43,0)
 I IBRATYPE=IBNFI!(IBRATYPE=IBTF)!(IBRATYPE=IBWC) D
"RTN","IBCBB11",44,0)
 . ; One of the legal types - force local print
"RTN","IBCBB11",45,0)
 . S IBLEGAL=1
"RTN","IBCBB11",46,0)
 ;*** pij end ***
"RTN","IBCBB11",47,0)
 S IBNPIREQ=$$NPIREQ^IBCEP81(DT)  ; Check if NPI is required
"RTN","IBCBB11",48,0)
 ; Check providers
"RTN","IBCBB11",49,0)
 ; IB*2.0*432 changed the NPI check to the new Provider Array
"RTN","IBCBB11",50,0)
 ;S IBNPIS=$$PROVNPI^IBCEF73A(IBIFN,.IBNONPI)
"RTN","IBCBB11",51,0)
 D ALLIDS^IBCEFP(IBIFN,.IBXSAVE,1)
"RTN","IBCBB11",52,0)
 S IBPRV=""
"RTN","IBCBB11",53,0)
 F  S IBPRV=$O(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",54,0)
 . I $P($G(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV,0)),U,4)="" S IBNONPI(IBPRV)=""
"RTN","IBCBB11",55,0)
 S IBLINE=""
"RTN","IBCBB11",56,0)
 F  S IBLINE=$O(IBXSAVE("L-PROV",IBIFN,IBLINE)) Q:'IBLINE  D
"RTN","IBCBB11",57,0)
 . S IBPRV=""
"RTN","IBCBB11",58,0)
 . F  S IBPRV=$O(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV)) Q:IBPRV=""  D
"RTN","IBCBB11",59,0)
 .. I $P($G(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV,0)),U,4)="" S IBNONPI(IBPRV)=""
"RTN","IBCBB11",60,0)
 I $D(IBNONPI) S IBPRV="" F  S IBPRV=$O(IBNONPI(IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",61,0)
 . S IBER=IBER_"IB"_(140+IBPRV)_";" Q  ; If required, set error IB*2*516
"RTN","IBCBB11",62,0)
 ; Check organizations
"RTN","IBCBB11",63,0)
 S IBNONPI=""
"RTN","IBCBB11",64,0)
 S IBNPIS=$$ORGNPI^IBCEF73A(IBIFN,.IBNONPI)
"RTN","IBCBB11",65,0)
 I $L(IBNONPI) F Z=1:1:$L(IBNONPI,U) D
"RTN","IBCBB11",66,0)
 . S IBER=IBER_$P("IB339;^IB340;^IB341;",U,$P(IBNONPI,U,Z))  ; DEM;432 Added NPI errors.
"RTN","IBCBB11",67,0)
 Q
"RTN","IBCBB11",68,0)
 ;
"RTN","IBCBB11",69,0)
TAXCHK ; Check for required taxonomies
"RTN","IBCBB11",70,0)
 N IBDT,IBLINE,IBNOTAX,IBNOTAX1,IBNOTAX2,IBPRV,IBTAXS,IBXSAVE,Z
"RTN","IBCBB11",71,0)
 ;
"RTN","IBCBB11",72,0)
 ; MRD;IB*2.0*516 - This check is now moot; 'today' is always on or
"RTN","IBCBB11",73,0)
 ; after May 23, 2008, so taxonomy codes are always required
"RTN","IBCBB11",74,0)
 ; for certain providers.
"RTN","IBCBB11",75,0)
 ;S IBTAXREQ=$$TAXREQ^IBCEP81(DT)  ; Check if taxonomy is required
"RTN","IBCBB11",76,0)
 ;
"RTN","IBCBB11",77,0)
 ; Check providers
"RTN","IBCBB11",78,0)
 ; IB*2.0*432 changed the Taxonomy check to the new Provider Array
"RTN","IBCBB11",79,0)
 ;S IBTAXS=$$PROVTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCBB11",80,0)
 D ALLIDS^IBCEFP(IBIFN,.IBXSAVE,1)
"RTN","IBCBB11",81,0)
 S IBPRV=""
"RTN","IBCBB11",82,0)
 F  S IBPRV=$O(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",83,0)
 . I $G(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV,"TAXONOMY"))="" D
"RTN","IBCBB11",84,0)
 .. S IBNOTAX(IBPRV)=""
"RTN","IBCBB11",85,0)
 .. S IBNOTAX1=$P(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV),";",1)  ; New variables IBNOTAX1 and IBNOTAX2 for IB*2.0*568 - Deactivated Provider 
"RTN","IBCBB11",86,0)
 .. S IBNOTAX2(IBPRV,IBNOTAX1)=""
"RTN","IBCBB11",87,0)
 .. Q
"RTN","IBCBB11",88,0)
 . Q
"RTN","IBCBB11",89,0)
 ;
"RTN","IBCBB11",90,0)
 S IBLINE=""
"RTN","IBCBB11",91,0)
 F  S IBLINE=$O(IBXSAVE("L-PROV",IBIFN,IBLINE)) Q:'IBLINE  D
"RTN","IBCBB11",92,0)
 . S IBPRV=""
"RTN","IBCBB11",93,0)
 . F  S IBPRV=$O(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV)) Q:IBPRV=""  D
"RTN","IBCBB11",94,0)
 .. I $G(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV,"TAXONOMY"))="" D
"RTN","IBCBB11",95,0)
 ... S IBNOTAX(IBPRV)=""
"RTN","IBCBB11",96,0)
 ... S IBNOTAX1=$P(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV),";",1)  ; New variables IBNOTAX1 and IBNOTAX2 for IB*2.0*568 - Deactivated Provider 
"RTN","IBCBB11",97,0)
 ... S IBNOTAX2(IBPRV,IBNOTAX1)=""
"RTN","IBCBB11",98,0)
 ... Q
"RTN","IBCBB11",99,0)
 .. Q
"RTN","IBCBB11",100,0)
 . Q
"RTN","IBCBB11",101,0)
 ;
"RTN","IBCBB11",102,0)
 ; IB251 = Referring provider taxonomy missing.
"RTN","IBCBB11",103,0)
 ; IB253 = Rendering provider taxonomy missing.
"RTN","IBCBB11",104,0)
 ; IB254 = Attending provider taxonomy missing.
"RTN","IBCBB11",105,0)
 ;
"RTN","IBCBB11",106,0)
 I $D(IBNOTAX) S IBPRV="" F  S IBPRV=$O(IBNOTAX(IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",107,0)
 . ; Only Referring, Rendering and Attending are currently sent to the payer
"RTN","IBCBB11",108,0)
 . ;I IBTAXREQ,"134"[IBPRV S IBER=IBER_"IB"_(250+IBPRV)_";" Q  ; MRD;IB*2.0*516 - Always required.
"RTN","IBCBB11",109,0)
 . I "134"[IBPRV D  Q
"RTN","IBCBB11",110,0)
 .. S IBER=IBER_"IB"_(250+IBPRV)_";" ; If required, set error
"RTN","IBCBB11",111,0)
 .. S IBPRVNT1=$O(IBNOTAX2(IBPRV,"")) ; New check for Deactivated Provider IB*2.0*568 next three lines
"RTN","IBCBB11",112,0)
 .. S IBPRVNT2=$$SPEC^IBCEU(IBPRVNT1,IBEVDT)
"RTN","IBCBB11",113,0)
 .. I '$G(IBPRVNT2) D WARN($P("Referring^Operating^Rendering^Attending^Supervising^^^^Other",U,IBPRV)_" Provider PERSON CLASS/taxonomy was not active at DOS.")  ; set warning
"RTN","IBCBB11",114,0)
 . D WARN("Taxonomy for the "_$P("referring^operating^rendering^attending^supervising^^^^other",U,IBPRV)_" provider has no value")  ; Else, set warning
"RTN","IBCBB11",115,0)
 . Q
"RTN","IBCBB11",116,0)
 ;
"RTN","IBCBB11",117,0)
 ; Check organizations.  The function ORGTAX will set IBNOTAX to be a
"RTN","IBCBB11",118,0)
 ; list of entities missing taxonomy codes, if any (n, n^m, n^m^p,
"RTN","IBCBB11",119,0)
 ; where each 1 is service facility, 2 is non-VA service facility and
"RTN","IBCBB11",120,0)
 ; 3 is billing provider.
"RTN","IBCBB11",121,0)
 ;
"RTN","IBCBB11",122,0)
 S IBNOTAX=""
"RTN","IBCBB11",123,0)
 S IBTAXS=$$ORGTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCBB11",124,0)
 I $L(IBNOTAX) F Z=1:1:$L(IBNOTAX,U) D
"RTN","IBCBB11",125,0)
 . ; IB167 = Billing Provider taxonomy missing.
"RTN","IBCBB11",126,0)
 . ;I IBTAXREQ,$P(IBNOTAX,U,Z)=3 S IBER=IBER_"IB167;" Q  ; MRD;IB*2.0*516 - Always required.
"RTN","IBCBB11",127,0)
 . I $P(IBNOTAX,U,Z)=3 S IBER=IBER_"IB167;" Q
"RTN","IBCBB11",128,0)
 . ; MRD;IB*2.0*516 - Remove warning message for missing taxonomy code for lab or facility.
"RTN","IBCBB11",129,0)
 . ; D WARN("Taxonomy for the "_$P("Service Facility^Non-VA Service Facility^Billing Provider",U,$P(IBNOTAX,U,Z))_" has no value")  ; Else, set warning
"RTN","IBCBB11",130,0)
 . Q
"RTN","IBCBB11",131,0)
 ;
"RTN","IBCBB11",132,0)
 Q
"RTN","IBCBB11",133,0)
 ;
"RTN","IBCBB11",134,0)
VALNDC(IBIFN,IBDFN) ; Moved to ^IBCBB14.
"RTN","IBCBB11",135,0)
 D VALNDC^IBCBB14(IBIFN,IBDFN)
"RTN","IBCBB11",136,0)
 Q
"RTN","IBCBB11",137,0)
 ;
"RTN","IBCBB11",138,0)
PRIIDCHK ; Check for required Pimarary ID (SSN/EIN)
"RTN","IBCBB11",139,0)
 ; If the provider is on the claim, he must have one
"RTN","IBCBB11",140,0)
 ; 
"RTN","IBCBB11",141,0)
 N IBI,IBZ
"RTN","IBCBB11",142,0)
 I $$TXMT^IBCEF4(IBIFN) D
"RTN","IBCBB11",143,0)
 . D F^IBCEF("N-ALL ATT/REND PROV SSN/EI","IBZ",,IBIFN)
"RTN","IBCBB11",144,0)
 . S IBI="" F  S IBI=$O(^DGCR(399,IBIFN,"PRV","B",IBI)) Q:IBI=""  D
"RTN","IBCBB11",145,0)
 .. I $P(IBZ,U,IBI)="" S IBER=IBER_$S(IBI=1:"IB151;",IBI=2:"IB152;",IBI=3!(IBI=4):"IB321;",IBI=5:"IB153;",IBI=9:"IB154;",1:"")
"RTN","IBCBB11",146,0)
 Q
"RTN","IBCBB11",147,0)
 ;
"RTN","IBCBB11",148,0)
RXNPI(IBIFN) ; Moved to ^IBCBB14.
"RTN","IBCBB11",149,0)
 D RXNPI^IBCBB14(IBIFN)
"RTN","IBCBB11",150,0)
 Q
"RTN","IBCBB11",151,0)
 ;
"RTN","IBCBB11",152,0)
ROICHK(IBIFN,IBDFN,IBINS) ; Moved to ^IBCBB14.
"RTN","IBCBB11",153,0)
 Q $$ROICHK^IBCBB14(IBIFN,IBDFN,IBINS)
"RTN","IBCBB11",154,0)
 ;
"RTN","IBCBB11",155,0)
AMBCK(IBIFN)    ; IB*2.0*432 - if ambulance location defined, address must be defined
"RTN","IBCBB11",156,0)
 ; if there is anything entered in any of the address fields (either p/up or drop/off fields), than there needs to be: 
"RTN","IBCBB11",157,0)
 ; Address 1, State and ZIP unless the State is not a US state or possession, then zip code is not needed (CMS1500 only)
"RTN","IBCBB11",158,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",159,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",160,0)
 ;          1 = Error
"RTN","IBCBB11",161,0)
 ;
"RTN","IBCBB11",162,0)
 N IBPAMB,IBDAMB,IBAMBR,IBCK
"RTN","IBCBB11",163,0)
 S IBAMBR=0
"RTN","IBCBB11",164,0)
 Q:$$INSPRF^IBCEF(IBIFN)'=0 IBAMBR
"RTN","IBCBB11",165,0)
 S IBPAMB=$G(^DGCR(399,IBIFN,"U5")),IBDAMB=$G(^DGCR(399,IBIFN,"U6"))
"RTN","IBCBB11",166,0)
 S IBCK(5)=$$NOPUNCT^IBCEF($P(IBPAMB,U,2,6),1),IBCK(6)=$$NOPUNCT^IBCEF($P(IBDAMB,U,1,6),1)
"RTN","IBCBB11",167,0)
 I IBCK(5)="",IBCK(6)="" Q IBAMBR
"RTN","IBCBB11",168,0)
 ; at this point we know that at least one ambulance field has data, so check to see if all have data
"RTN","IBCBB11",169,0)
 I IBCK(5)'="" F I=2,4,5 I $P(IBPAMB,U,I)="" S IBAMBR=1
"RTN","IBCBB11",170,0)
 I IBCK(6)'="" F I=1,2,4,5 I $P(IBDAMB,U,I)="" S IBAMBR=1
"RTN","IBCBB11",171,0)
 Q:IBAMBR=1 IBAMBR
"RTN","IBCBB11",172,0)
 ; now check zip code.  OK to be null if state is not a US Posession
"RTN","IBCBB11",173,0)
 F I="IBPAMB","IBDAMB" I $P(I,U,5)'="",$P($G(^DIC(5,$P(I,U,5),0)),U,6)=1,$P(I,U,6)="" S IBAMBR=1
"RTN","IBCBB11",174,0)
 Q IBAMBR
"RTN","IBCBB11",175,0)
 ;
"RTN","IBCBB11",176,0)
COBAMT(IBIFN)   ; IB*2.0*432 - IF there is a COB amt. it must equal the Total Claim Charge Amount
"RTN","IBCBB11",177,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",178,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",179,0)
 ;          1 = Error
"RTN","IBCBB11",180,0)
 ;
"RTN","IBCBB11",181,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",182,0)
 Q:$P($G(^DGCR(399,IBIFN,"U4")),U)="" 0
"RTN","IBCBB11",183,0)
 Q:+$P($G(^DGCR(399,IBIFN,"U1")),U)'=+$P($G(^DGCR(399,IBIFN,"U4")),U) 1
"RTN","IBCBB11",184,0)
 Q 0
"RTN","IBCBB11",185,0)
 ;
"RTN","IBCBB11",186,0)
COBMRA(IBIFN)   ; IB*2.0*432 - If there is a 'COB total non-covered amount' (File#399, Field#260), 
"RTN","IBCBB11",187,0)
 ; Primary Insurance must be Medicare that never went to Medicare, and this must be a 2ndary or tertiary claim
"RTN","IBCBB11",188,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",189,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",190,0)
 ;          1 = Error
"RTN","IBCBB11",191,0)
 ;
"RTN","IBCBB11",192,0)
 N IBP
"RTN","IBCBB11",193,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",194,0)
 Q:$P($G(^DGCR(399,IBIFN,"U4")),U)="" 0
"RTN","IBCBB11",195,0)
 S IBP=$P($G(^DGCR(399,IBIFN,"M1")),U,5) S:IBP="" IBP=IBIFN
"RTN","IBCBB11",196,0)
 I $$WNRBILL^IBEFUNC(IBIFN,1),$P($G(^DGCR(399,IBP,"S")),U,7)="",$$COBN^IBCEF(IBIFN)>1 Q 0
"RTN","IBCBB11",197,0)
 Q 1
"RTN","IBCBB11",198,0)
 ;
"RTN","IBCBB11",199,0)
COBSEC(IBIFN)   ; IB*2.0*432 - If there is NOT a 'COB total non-covered amount' (File#399, Field#260), 
"RTN","IBCBB11",200,0)
 ; and Primary Insurance is Medicare that never went to Medicare, 2ndary or tertiary claim cannot be set to transmit
"RTN","IBCBB11",201,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",202,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",203,0)
 ;          1 = Error
"RTN","IBCBB11",204,0)
 ;
"RTN","IBCBB11",205,0)
 N IBP
"RTN","IBCBB11",206,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",207,0)
 Q:$P($G(^DGCR(399,IBIFN,"U4")),U)'="" 0
"RTN","IBCBB11",208,0)
 Q:$$COBN^IBCEF(IBIFN)<2 0
"RTN","IBCBB11",209,0)
 S IBP=$P($G(^DGCR(399,IBIFN,"M1")),U,5) S:IBP="" IBP=IBIFN
"RTN","IBCBB11",210,0)
 I $$WNRBILL^IBEFUNC(IBIFN,1),$P($G(^DGCR(399,IBP,"S")),U,7)="",$P($G(^DGCR(399,IBIFN,"TX")),U,8)'=1 Q 1
"RTN","IBCBB11",211,0)
 Q 0
"RTN","IBCBB11",212,0)
 ;
"RTN","IBCBB11",213,0)
TMCK(IBIFN) ;  IB*2.0*432 - Attachment Control Number - REQUIRED when Transmission Method = BM, EL, EM, or FT
"RTN","IBCBB11",214,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",215,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",216,0)
 ;          1 = Error
"RTN","IBCBB11",217,0)
 ;
"RTN","IBCBB11",218,0)
 N IBAC
"RTN","IBCBB11",219,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",220,0)
 F I=1,3 S IBAC(I)=$P($G(^DGCR(399,IBIFN,"U8")),U,I)
"RTN","IBCBB11",221,0)
 Q:IBAC(3)="" 0
"RTN","IBCBB11",222,0)
 Q:IBAC(1)'="" 0
"RTN","IBCBB11",223,0)
 Q:IBAC(3)="AA" 0
"RTN","IBCBB11",224,0)
 Q 1
"RTN","IBCBB11",225,0)
 ;
"RTN","IBCBB11",226,0)
ACCK(IBIFN) ; IB*2.0*432 If any of the loop info is present, then Report Type & Transmission Method req'd
"RTN","IBCBB11",227,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",228,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",229,0)
 ;          1 = Error
"RTN","IBCBB11",230,0)
 ;
"RTN","IBCBB11",231,0)
 N IBAC
"RTN","IBCBB11",232,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",233,0)
 F I=1:1:3 S IBAC(I)=$P($G(^DGCR(399,IBIFN,"U8")),U,I)
"RTN","IBCBB11",234,0)
 ; All fields null, no error
"RTN","IBCBB11",235,0)
 I IBAC(1)="",IBAC(2)="",IBAC(3)="" Q 0
"RTN","IBCBB11",236,0)
 ; Both required fields complete, no error
"RTN","IBCBB11",237,0)
 I IBAC(2)'="",IBAC(3)'="" Q 0
"RTN","IBCBB11",238,0)
 ; At this point, one of the 2 required fields has data and one does not, so error
"RTN","IBCBB11",239,0)
 Q 1
"RTN","IBCBB11",240,0)
 ;
"RTN","IBCBB11",241,0)
LNTMCK(IBIFN) ;  DEM;IB*2.0*432 - (Line Level) Attachment Control Number - REQUIRED when Transmission Method = BM, EL, EM, or FT
"RTN","IBCBB11",242,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",243,0)
 ; OUTPUT - IBLNERR = 0 = no error        
"RTN","IBCBB11",244,0)
 ;          IBLNERR = 1 = Error
"RTN","IBCBB11",245,0)
 ;
"RTN","IBCBB11",246,0)
 N IBAC,IBPROCP,I,IBLNERR
"RTN","IBCBB11",247,0)
 S IBLNERR=0  ; DEM;432 - Initialize error flag IBLNERR to '0' for no errors.
"RTN","IBCBB11",248,0)
 Q:IBIFN="" IBLNERR
"RTN","IBCBB11",249,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:IBLNERR
"RTN","IBCBB11",250,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; DEM;432 - Node '0' is procedure node.
"RTN","IBCBB11",251,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,1))#10)  ; DEM;432 - Node '1' is line level Attachment Control fields.
"RTN","IBCBB11",252,0)
 . F I=1,3 S IBAC(I)=$P(^DGCR(399,IBIFN,"CP",IBPROCP,1),U,I)
"RTN","IBCBB11",253,0)
 . I IBAC(3)="" S IBLNERR=0 Q
"RTN","IBCBB11",254,0)
 . I IBAC(1)'="" S IBLNERR=0 Q
"RTN","IBCBB11",255,0)
 . I (IBAC(3)="AA") S IBLNERR=0 Q
"RTN","IBCBB11",256,0)
 . S IBLNERR=1
"RTN","IBCBB11",257,0)
 . Q
"RTN","IBCBB11",258,0)
 ;
"RTN","IBCBB11",259,0)
 Q IBLNERR
"RTN","IBCBB11",260,0)
 ;
"RTN","IBCBB11",261,0)
LNACCK(IBIFN) ; DEM;IB*2.0*432 (Line Level) If any of the loop info is present, then Report Type & Transmission Method req'd
"RTN","IBCBB11",262,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",263,0)
 ; OUTPUT - IBLNERR = 0 = no error        
"RTN","IBCBB11",264,0)
 ;          IBLNERR = 1 = Error
"RTN","IBCBB11",265,0)
 ;
"RTN","IBCBB11",266,0)
 N IBAC,IBPROCP,I,IBLNERR
"RTN","IBCBB11",267,0)
 S IBLNERR=0  ; DEM;432 - Initialize error flag IBLNERR to '0' for no errors.
"RTN","IBCBB11",268,0)
 Q:IBIFN="" IBLNERR
"RTN","IBCBB11",269,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:IBLNERR
"RTN","IBCBB11",270,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; DEM;432 - Node '0' is procedure node.
"RTN","IBCBB11",271,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,1))#10)  ; DEM;432 - Node '1' is line level Attachment Control fields.
"RTN","IBCBB11",272,0)
 . F I=1:1:3 S IBAC(I)=$P(^DGCR(399,IBIFN,"CP",IBPROCP,1),U,I)
"RTN","IBCBB11",273,0)
 . ; All fields null, no error
"RTN","IBCBB11",274,0)
 . I IBAC(1)="",IBAC(2)="",IBAC(3)="" S IBLNERR=0 Q
"RTN","IBCBB11",275,0)
 . ; Both required fields complete, no error
"RTN","IBCBB11",276,0)
 . I IBAC(2)'="",IBAC(3)'="" S IBLNERR=0 Q
"RTN","IBCBB11",277,0)
 . ; At this point, one of the 2 required fields has data and one does not, so error
"RTN","IBCBB11",278,0)
 . S IBLNERR=1
"RTN","IBCBB11",279,0)
 . Q
"RTN","IBCBB11",280,0)
 ;
"RTN","IBCBB11",281,0)
 Q IBLNERR
"RTN","IBCBB11",282,0)
 ;
"RTN","IBCBB11",283,0)
 ;vd/Beginning of IB*2*577 - Validate Line Level for NDC
"RTN","IBCBB11",284,0)
LNNDCCK(IBIFN) ;IB*2*577 (Line Level) The Units and Units/Basis of Measurement fields are required if the NDC field is populated.
"RTN","IBCBB11",285,0)
 ; INPUT  - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",286,0)
 ; OUTPUT - IBLNERR = 0 = no error
"RTN","IBCBB11",287,0)
 ;          IBLNERR = 1 = Error
"RTN","IBCBB11",288,0)
 ;
"RTN","IBCBB11",289,0)
 N IBAC,IBPROCP,I,IBLNERR
"RTN","IBCBB11",290,0)
 S IBLNERR=0  ; IB*2*577 - Initialize error flag IBLNERR to '0' for no errors.
"RTN","IBCBB11",291,0)
 Q:IBIFN="" IBLNERR
"RTN","IBCBB11",292,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:IBLNERR
"RTN","IBCBB11",293,0)
 . Q:($$GET1^DIQ(399.0304,IBPROCP_","_IBIFN_",","NDC","I")="")   ; IB*2*577 - No NDC Code
"RTN","IBCBB11",294,0)
 . ; If there is an NDC Code, then the UNITS and UNITS/BASIS OF MEASUREMENT are Required.
"RTN","IBCBB11",295,0)
 . I $$GET1^DIQ(399.0304,IBPROCP_","_IBIFN_",","UNITS/BASIS OF MEASUREMENT","I")="" S IBLNERR=1 Q
"RTN","IBCBB11",296,0)
 . I $$GET1^DIQ(399.0304,IBPROCP_","_IBIFN_",","UNITS","I")="" S IBLNERR=1 Q  ;Units (Quantity) is required if there is an NDC Code.
"RTN","IBCBB11",297,0)
 . Q
"RTN","IBCBB11",298,0)
 ;
"RTN","IBCBB11",299,0)
 Q IBLNERR
"RTN","IBCBB11",300,0)
 ;vd/End of IB*2*577
"RTN","IBCBB14")
0^3^B5240660
"RTN","IBCBB14",1,0)
IBCBB14  ;AITC/MRD - CONTINUATION OF EDIT CHECK ROUTINE FOR EPHARM ;7 Jun 2018  2:50 PM
"RTN","IBCBB14",2,0)
 ;;2.0;INTEGRATED BILLING;**591**;21-MAR-94;Build 45
"RTN","IBCBB14",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB14",4,0)
 ;
"RTN","IBCBB14",5,0)
 Q
"RTN","IBCBB14",6,0)
 ;
"RTN","IBCBB14",7,0)
VALNDC(IBIFN,IBDFN) ; IB*2*363 - validate NDC# between PRESCRIPTION file (#52)
"RTN","IBCBB14",8,0)
 ; and IB BILL/CLAIMS PRESCRIPTION REFILL file (#362.4)
"RTN","IBCBB14",9,0)
 ; input - IBIFN = internal entry number of the billing record in the BILL/CLAIMS file (#399)
"RTN","IBCBB14",10,0)
 ;         IBDFN = internal entry number of patient record in the PATIENT file (#2)
"RTN","IBCBB14",11,0)
 N IBX,IBRXCOL
"RTN","IBCBB14",12,0)
 ; call program that determines if NDC differences exist
"RTN","IBCBB14",13,0)
 D VALNDC^IBEFUNC3(IBIFN,IBDFN,.IBRXCOL)
"RTN","IBCBB14",14,0)
 Q:'$D(IBRXCOL)
"RTN","IBCBB14",15,0)
 ; at least one RX on the IB record has an NDC discrepancy 
"RTN","IBCBB14",16,0)
 S IBX=0 F  S IBX=$O(IBRXCOL(IBX)) Q:'IBX  D WARN^IBCBB11("NDC# on Bill does not equal the NDC# on Rx "_IBRXCOL(IBX))
"RTN","IBCBB14",17,0)
 Q
"RTN","IBCBB14",18,0)
 ;
"RTN","IBCBB14",19,0)
RXNPI(IBIFN) ; check for multiple pharmacy npi's on the same bill
"RTN","IBCBB14",20,0)
 N IBORG,IBRXNPI,IBX,IBY
"RTN","IBCBB14",21,0)
 S IBORG=$$RXSITE^IBCEF73A(IBIFN,.IBORG)
"RTN","IBCBB14",22,0)
 S IBX=0 F  S IBX=$O(IBORG(IBX)) Q:'IBX  S IBY=0 F  S IBY=$O(IBORG(IBX,IBY)) Q:'IBY  S IBRXNPI(+IBORG(IBX,IBY))=""
"RTN","IBCBB14",23,0)
 S (IBX,IBY)=0 F  S IBX=$O(IBRXNPI(IBX)) Q:'IBX  S IBY=IBY+1
"RTN","IBCBB14",24,0)
 I IBY>1 D WARN^IBCBB11("Bill has prescriptions resulting from "_IBY_" different NPI locations")
"RTN","IBCBB14",25,0)
 Q
"RTN","IBCBB14",26,0)
 ;
"RTN","IBCBB14",27,0)
ROICHK(IBIFN,IBDFN,IBINS) ; IB*2.0*384 - check prescriptions that contain the
"RTN","IBCBB14",28,0)
 ; SENSITIVE DIAGNOSIS DRUG field #87 in the DRUG File #50 set to 1 against
"RTN","IBCBB14",29,0)
 ; the Claims Tracking ROI file (#356.25) to see if an ROI is on file
"RTN","IBCBB14",30,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB14",31,0)
 ;         IBDFN = IEN of the patient
"RTN","IBCBB14",32,0)
 ;         IBINS = IEN of the payer insurance company (#36)
"RTN","IBCBB14",33,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB14",34,0)
 ;          1 = a prescription is sensitive and there is no ROI on file
"RTN","IBCBB14",35,0)
 ;
"RTN","IBCBB14",36,0)
 N IBX,IBY0,IBRXIEN,IBDT,IBDRUG,ROIQ
"RTN","IBCBB14",37,0)
 S ROIQ=0
"RTN","IBCBB14",38,0)
 S IBX=0 F  S IBX=$O(^IBA(362.4,"C",IBIFN,IBX)) Q:'IBX  D
"RTN","IBCBB14",39,0)
 .S IBY0=^IBA(362.4,IBX,0),IBRXIEN=$P(IBY0,U,5) I 'IBRXIEN Q
"RTN","IBCBB14",40,0)
 .S IBDT=$P(IBY0,U,3),IBDRUG=$P(IBY0,U,4)
"RTN","IBCBB14",41,0)
 .D ZERO^IBRXUTL(IBDRUG)
"RTN","IBCBB14",42,0)
 .I $$SENS^IBNCPDR(IBDRUG) D  ; Sensitive Diagnosis Drug - check for ROI
"RTN","IBCBB14",43,0)
 .. I $$ROI^IBNCPDR4(IBDFN,IBDRUG,IBINS,IBDT) Q  ;ROI is on file
"RTN","IBCBB14",44,0)
 .. D WARN^IBCBB11("ROI not on file for prescription "_$$RXAPI1^IBNCPUT1(IBRXIEN,.01,"E"))
"RTN","IBCBB14",45,0)
 .. S ROIQ=1
"RTN","IBCBB14",46,0)
ROICHKQ ;
"RTN","IBCBB14",47,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBCBB14",48,0)
 Q ROIQ
"RTN","IBCBB14",49,0)
 ;
"RTN","IBCNRRP3")
0^1^B58267824
"RTN","IBCNRRP3",1,0)
IBCNRRP3 ;BHAM ISC/CMW - GROUP PLAN WORKSHEET REPORT PRINT ;03-MAR-2004
"RTN","IBCNRRP3",2,0)
 ;;2.0;INTEGRATED BILLING;**251,276,516,550,591**;21-MAR-94;Build 45
"RTN","IBCNRRP3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRRP3",4,0)
 ;
"RTN","IBCNRRP3",5,0)
 ; ePHARM GROUP PLAN WORKSHEET REPORT
"RTN","IBCNRRP3",6,0)
 ;
"RTN","IBCNRRP3",7,0)
 ; Called by IBCNRRP1
"RTN","IBCNRRP3",8,0)
 ;
"RTN","IBCNRRP3",9,0)
 ; Input variables from IBCNRRP1 and IBCNRRP2:
"RTN","IBCNRRP3",10,0)
 ;   IBCNRRTN = "IBCNRRP1"
"RTN","IBCNRRP3",11,0)
 ;   IBCNRSPC("BEGDT") = Start Date for dt range
"RTN","IBCNRRP3",12,0)
 ;   IBCNRSPC("ENDDT") = End Date for dt range
"RTN","IBCNRRP3",13,0)
 ;   IBCNRSPC("SORT") = 1 - By Insurance/Group; 2 - Total Claims; 
"RTN","IBCNRRP3",14,0)
 ;                      3 - Total Charges; 4 - Exceptions
"RTN","IBCNRRP3",15,0)
 ;   IBCNRSPC("MATCH") = 1 - Matched Only; 0 - All;
"RTN","IBCNRRP3",16,0)
 ;    
"RTN","IBCNRRP3",17,0)
 ;   ^TMP(IBCNRRTN,1); ^TMP(IBCNRRTN,2); ^TMP(IBCNRRTN,3)
"RTN","IBCNRRP3",18,0)
 ; Must call at appropriate tag
"RTN","IBCNRRP3",19,0)
 Q
"RTN","IBCNRRP3",20,0)
 ;
"RTN","IBCNRRP3",21,0)
 ;
"RTN","IBCNRRP3",22,0)
EN(IBCNRRTN,IBCNRSPC) ; Entry pt.
"RTN","IBCNRRP3",23,0)
 ;
"RTN","IBCNRRP3",24,0)
 ; Init vars
"RTN","IBCNRRP3",25,0)
 N CRT,MAXCNT,IBPGC,IBBDT,IBEDT,IBMAT,IBPY,IBPXT,IBSRT,IBDTL
"RTN","IBCNRRP3",26,0)
 N X,Y,DIR,DTOUT,DUOUT,LIN,TOTALS
"RTN","IBCNRRP3",27,0)
 ;
"RTN","IBCNRRP3",28,0)
 S IBBDT=$G(IBCNRSPC("BEGDT"))
"RTN","IBCNRRP3",29,0)
 S IBEDT=$G(IBCNRSPC("ENDDT"))
"RTN","IBCNRRP3",30,0)
 S IBSRT=$G(IBCNRSPC("SORT"))
"RTN","IBCNRRP3",31,0)
 S IBMAT=$G(IBCNRSPC("MATCH"))
"RTN","IBCNRRP3",32,0)
 S (IBPXT,IBPGC)=0
"RTN","IBCNRRP3",33,0)
 ;
"RTN","IBCNRRP3",34,0)
 ; Determine IO parameters
"RTN","IBCNRRP3",35,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNRRP3",36,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNRRP3",37,0)
 ;
"RTN","IBCNRRP3",38,0)
 D PRINT(IBCNRRTN,IBBDT,IBEDT,IBSRT,MAXCNT,IBPGC,IBMAT)
"RTN","IBCNRRP3",39,0)
 I $G(ZTSTOP)!IBPXT G EXIT3
"RTN","IBCNRRP3",40,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNRRP3",41,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNRRP3",42,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNRRP3",43,0)
 ;
"RTN","IBCNRRP3",44,0)
EXIT3 ; Exit pt
"RTN","IBCNRRP3",45,0)
 Q
"RTN","IBCNRRP3",46,0)
 ;
"RTN","IBCNRRP3",47,0)
PRINT(RTN,BDT,EDT,SRT,MAX,PGC,MAT) ; Print data
"RTN","IBCNRRP3",48,0)
 ; Input params: RNT = "IBCNRRP1" - routine, BDT = starting dt,
"RTN","IBCNRRP3",49,0)
 ;  EDT = ending dt
"RTN","IBCNRRP3",50,0)
 ;  SRT = 1/2/3
"RTN","IBCNRRP3",51,0)
 ;  MAT = 1/0
"RTN","IBCNRRP3",52,0)
 ;
"RTN","IBCNRRP3",53,0)
 ; Init vars
"RTN","IBCNRRP3",54,0)
 N EORMSG,NONEMSG,TOTDASHS,DISPDATA,SORT,CT,PRT1,PRT2
"RTN","IBCNRRP3",55,0)
 ;
"RTN","IBCNRRP3",56,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNRRP3",57,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNRRP3",58,0)
 S $P(TOTDASHS,"=",89)=""
"RTN","IBCNRRP3",59,0)
 S CT=0
"RTN","IBCNRRP3",60,0)
 ;
"RTN","IBCNRRP3",61,0)
 I '$D(^XTMP(RTN)) D HEADER W !,?(132-$L(NONEMSG)\2),NONEMSG,!! G PRINT2
"RTN","IBCNRRP3",62,0)
 ;
"RTN","IBCNRRP3",63,0)
 ; Build lines of data to display
"RTN","IBCNRRP3",64,0)
 K ^TMP("IBCNR",$J,"RPTDATA")
"RTN","IBCNRRP3",65,0)
 D DATA
"RTN","IBCNRRP3",66,0)
 K ^TMP("IBCNR",$J,"DSPDATA")
"RTN","IBCNRRP3",67,0)
 D DISP
"RTN","IBCNRRP3",68,0)
 ; Display lines of response
"RTN","IBCNRRP3",69,0)
 D LINE
"RTN","IBCNRRP3",70,0)
 K ^TMP("IBCNR",$J,"DSPDATA"),^TMP("IBCNR",$J,"RPTDATA")
"RTN","IBCNRRP3",71,0)
 Q
"RTN","IBCNRRP3",72,0)
 ;
"RTN","IBCNRRP3",73,0)
PRINT2 I $G(ZTSTOP)!IBPXT G PRINTX
"RTN","IBCNRRP3",74,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!$G(IBPXT) G PRINTX
"RTN","IBCNRRP3",75,0)
 W !,?(132-$L(EORMSG)\2),EORMSG
"RTN","IBCNRRP3",76,0)
 ;
"RTN","IBCNRRP3",77,0)
PRINTX ; PRINT exit point
"RTN","IBCNRRP3",78,0)
 Q
"RTN","IBCNRRP3",79,0)
 ;
"RTN","IBCNRRP3",80,0)
HEADER ; Print header info for each page
"RTN","IBCNRRP3",81,0)
 ; Assumes vars from PRINT: CRT,PGC,IBPXT,MAX,SRT,BDT,EDT,PYR,RDTL,MAR
"RTN","IBCNRRP3",82,0)
 ; Init vars
"RTN","IBCNRRP3",83,0)
 N DIR,X,Y,DTOUT,DUOUT,OFFSET,HDR,DASHES,DASHES2,LIN
"RTN","IBCNRRP3",84,0)
 ;
"RTN","IBCNRRP3",85,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I IBPXT G HEADERX
"RTN","IBCNRRP3",86,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNRRP3",87,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNRRP3",88,0)
 . I $D(DTOUT)!$D(DUOUT) S IBPXT=1 Q
"RTN","IBCNRRP3",89,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S (ZTSTOP,IBPXT)=1 G HEADERX
"RTN","IBCNRRP3",90,0)
 S PGC=PGC+1
"RTN","IBCNRRP3",91,0)
 W @IOF,!,?1,"ePHARM GROUP PLAN WORKSHEET REPORT"
"RTN","IBCNRRP3",92,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC
"RTN","IBCNRRP3",93,0)
 S OFFSET=80-$L(HDR)
"RTN","IBCNRRP3",94,0)
 W ?OFFSET,HDR
"RTN","IBCNRRP3",95,0)
 W !,?1,"Claims with Pharmacy Coverage Sorted by: "_$S(SRT=1:"Insurance/Group",SRT=2:"Max. Total Claims",1:"Max. Total Charges")
"RTN","IBCNRRP3",96,0)
 S HDR=$$FMTE^XLFDT(BDT,"5Z")_" - "_$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNRRP3",97,0)
 S OFFSET=80-$L(HDR)\2
"RTN","IBCNRRP3",98,0)
 W !,?OFFSET,HDR
"RTN","IBCNRRP3",99,0)
 ; Display column headings
"RTN","IBCNRRP3",100,0)
 W !,?1,"Insurance Company Name",?40,"Insurance Company Address"
"RTN","IBCNRRP3",101,0)
 W !,?3,"Group Name/Number",?43,"VA PLAN ID",?60," BIN",?70,"PCN"
"RTN","IBCNRRP3",102,0)
 S $P(DASHES,"=",80)=""
"RTN","IBCNRRP3",103,0)
 W !,?1,DASHES
"RTN","IBCNRRP3",104,0)
 ;
"RTN","IBCNRRP3",105,0)
HEADERX ; HEADER exit pt
"RTN","IBCNRRP3",106,0)
 Q
"RTN","IBCNRRP3",107,0)
 ;
"RTN","IBCNRRP3",108,0)
LINE ; Print line of data
"RTN","IBCNRRP3",109,0)
 ; Assumes vars from PRINT: PGC,IBPXT,MAX
"RTN","IBCNRRP3",110,0)
 ; Init vars
"RTN","IBCNRRP3",111,0)
 N CT,II
"RTN","IBCNRRP3",112,0)
 ;
"RTN","IBCNRRP3",113,0)
 S CT=+$O(^TMP("IBCNR",$J,"DSPDATA",""),-1)
"RTN","IBCNRRP3",114,0)
 I $Y+1+CT>MAX D HEADER I $G(ZTSTOP)!IBPXT G LINEX
"RTN","IBCNRRP3",115,0)
 F II=1:1:CT D  Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNRRP3",116,0)
 . I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNRRP3",117,0)
 . W !,?1,^TMP("IBCNR",$J,"DSPDATA",II)
"RTN","IBCNRRP3",118,0)
 . Q
"RTN","IBCNRRP3",119,0)
 ;
"RTN","IBCNRRP3",120,0)
LINEX ; LINE exit pt
"RTN","IBCNRRP3",121,0)
 Q
"RTN","IBCNRRP3",122,0)
 ;
"RTN","IBCNRRP3",123,0)
DATA ; Gather and format lines of data to be printed
"RTN","IBCNRRP3",124,0)
 ; Assumes vars from PRINT: RTN,SRT,SRT,RDTL,CT,PRT1,PRT2
"RTN","IBCNRRP3",125,0)
 ; Init vars
"RTN","IBCNRRP3",126,0)
 ;
"RTN","IBCNRRP3",127,0)
 ;Loop through and sort TMP file
"RTN","IBCNRRP3",128,0)
 N CNT,IBINS,IBINSNM,IBGRP,IBGRPNM,IBGRPNB,RPDT,RPTOT,RPTCNT,RPTCHG
"RTN","IBCNRRP3",129,0)
 ;Get new HIPAA fields, IBGRP0 no longer needed - IB*2*516
"RTN","IBCNRRP3",130,0)
 ;N IBGRP0,IBGRP6,IBGRPNM,IBPLBIN,IBPLNNM,IBPLPCN,IBPPIEN
"RTN","IBCNRRP3",131,0)
 N IBGRP6,IBGRPNM,IBPLBIN,IBPLNID,IBPLPCN,IBPPIEN
"RTN","IBCNRRP3",132,0)
 S IBINS=0,CNT=0
"RTN","IBCNRRP3",133,0)
 F  S IBINS=$O(^XTMP(RTN,IBINS)) Q:IBINS=""  D
"RTN","IBCNRRP3",134,0)
 . ;get insurance company name
"RTN","IBCNRRP3",135,0)
 . S IBINSNM=$P($G(^DIC(36,IBINS,0)),U)
"RTN","IBCNRRP3",136,0)
 . I IBINSNM="" S IBINSNM="NO NAME EXISTS"
"RTN","IBCNRRP3",137,0)
 . S IBGRP=0
"RTN","IBCNRRP3",138,0)
 . F  S IBGRP=$O(^XTMP(RTN,IBINS,IBGRP)) Q:IBGRP=""  D
"RTN","IBCNRRP3",139,0)
 .. ;get group info
"RTN","IBCNRRP3",140,0)
 .. ;S IBGRP0=$G(^IBA(355.3,IBGRP,0))
"RTN","IBCNRRP3",141,0)
 .. ;get pharmacy plan info
"RTN","IBCNRRP3",142,0)
 .. S IBGRP6=$G(^IBA(355.3,IBGRP,6))
"RTN","IBCNRRP3",143,0)
 .. I 'IBGRP6,$G(MAT) Q  ; Matched only
"RTN","IBCNRRP3",144,0)
 .. ;I IBGRP0 D
"RTN","IBCNRRP3",145,0)
 .. I $$GET1^DIQ(355.3,IBGRP,2.01)]"" D
"RTN","IBCNRRP3",146,0)
 ... S (IBGRPNM,IBGRPNB)=""
"RTN","IBCNRRP3",147,0)
 ... ;S IBGRPNM=$P($G(IBGRP0),U,3) I $G(IBGRPNM)="" S IBGRPNM="<blank>"
"RTN","IBCNRRP3",148,0)
 ... ;S IBGRPNB=$P($G(IBGRP0),U,4) I $G(IBGRPNB)="" S IBGRPNB="<blank>"
"RTN","IBCNRRP3",149,0)
 ... S IBGRPNM=$$GET1^DIQ(355.3,IBGRP,2.01) I $G(IBGRPNM)="" S IBGRPNM="<blank>"
"RTN","IBCNRRP3",150,0)
 ... S IBGRPNB=$$GET1^DIQ(355.3,IBGRP,2.02) I $G(IBGRPNB)="" S IBGRPNB="<blank>"
"RTN","IBCNRRP3",151,0)
 ... S RPDT=IBGRPNB
"RTN","IBCNRRP3",152,0)
 .. I IBGRP6 D
"RTN","IBCNRRP3",153,0)
 ... S (IBPPIEN,IBPLNID,IBPLPCN)=""
"RTN","IBCNRRP3",154,0)
 ... S IBPPIEN=$P($G(IBGRP6),U)
"RTN","IBCNRRP3",155,0)
 ... S IBPLNID=$P($G(^IBCNR(366.03,IBPPIEN,0)),U,1)
"RTN","IBCNRRP3",156,0)
 ... S IBPLBIN=$P($G(^IBCNR(366.03,IBPPIEN,10)),U,2)
"RTN","IBCNRRP3",157,0)
 ... S IBPLPCN=$P($G(^IBCNR(366.03,IBPPIEN,10)),U,3)
"RTN","IBCNRRP3",158,0)
 ... S RPDT=$G(RPDT)_U_$G(IBPLNID)_U_$G(IBPLBIN)_U_$G(IBPLPCN)
"RTN","IBCNRRP3",159,0)
 .. E  S RPDT=$G(RPDT)_U_U_U
"RTN","IBCNRRP3",160,0)
 .. S RPDT=$G(RPDT)_U_$P($G(IBGRP6),U,2,3)
"RTN","IBCNRRP3",161,0)
 .. S RPTOT=^XTMP(RTN,IBINS,IBGRP)
"RTN","IBCNRRP3",162,0)
 .. S RPTCNT=$P(RPTOT,U),RPTCHG=$P(RPTOT,U,2)
"RTN","IBCNRRP3",163,0)
 .. I SRT=1 D  Q
"RTN","IBCNRRP3",164,0)
 ... S ^TMP("IBCNR",$J,"RPTDATA",SRT,IBINSNM,IBINS,IBGRPNM,IBGRP)=$G(RPDT)
"RTN","IBCNRRP3",165,0)
 .. I SRT=2 D  Q
"RTN","IBCNRRP3",166,0)
 ... S ^TMP("IBCNR",$J,"RPTDATA",-$G(RPTCNT),IBINSNM,IBINS,IBGRPNM,IBGRP)=$G(RPDT)
"RTN","IBCNRRP3",167,0)
 .. I SRT=3 D  Q
"RTN","IBCNRRP3",168,0)
 ... S ^TMP("IBCNR",$J,"RPTDATA",-$G(RPTCHG),IBINSNM,IBINS,IBGRPNM,IBGRP)=$G(RPDT)
"RTN","IBCNRRP3",169,0)
 .. I SRT=4 D  Q
"RTN","IBCNRRP3",170,0)
 ... I '$G(IBGRP6) Q
"RTN","IBCNRRP3",171,0)
 ... N OK S OK=1
"RTN","IBCNRRP3",172,0)
 ... I $G(IBPLBIN)'="",$P(IBGRP6,U,2)'="",IBPLBIN'=$P(IBGRP6,U,2) S OK=0
"RTN","IBCNRRP3",173,0)
 ... I $G(IBPLPCN)'="",$P(IBGRP6,U,3)'="",IBPLPCN'=$P(IBGRP6,U,3) S OK=0
"RTN","IBCNRRP3",174,0)
 ... I 'OK S ^TMP("IBCNR",$J,"RPTDATA",SRT,IBINSNM,IBINS,IBGRPNM,IBGRP)=$G(RPDT)
"RTN","IBCNRRP3",175,0)
 Q
"RTN","IBCNRRP3",176,0)
 ;
"RTN","IBCNRRP3",177,0)
DISP ;set up display data
"RTN","IBCNRRP3",178,0)
 N CNT,DISP1,DISP2,DISP3,DISP4,DISP5,DISPD,DASHES2
"RTN","IBCNRRP3",179,0)
 N IBCNADR,IBCIN11,IBCINST,I
"RTN","IBCNRRP3",180,0)
 S DISP1="",CNT=0,$P(DASHES2,"-",80)=""
"RTN","IBCNRRP3",181,0)
 F  S DISP1=$O(^TMP("IBCNR",$J,"RPTDATA",DISP1)) Q:DISP1=""  D
"RTN","IBCNRRP3",182,0)
 . S DISP2=""
"RTN","IBCNRRP3",183,0)
 . F  S DISP2=$O(^TMP("IBCNR",$J,"RPTDATA",DISP1,DISP2)) Q:DISP2=""  D
"RTN","IBCNRRP3",184,0)
 .. S DISP3=0
"RTN","IBCNRRP3",185,0)
 .. F  S DISP3=$O(^TMP("IBCNR",$J,"RPTDATA",DISP1,DISP2,DISP3)) Q:DISP3=""  D
"RTN","IBCNRRP3",186,0)
 ... S DISP4=""
"RTN","IBCNRRP3",187,0)
 ... F  S DISP4=$O(^TMP("IBCNR",$J,"RPTDATA",DISP1,DISP2,DISP3,DISP4)) Q:DISP4=""  D
"RTN","IBCNRRP3",188,0)
 .... S DISP5=0
"RTN","IBCNRRP3",189,0)
 .... F  S DISP5=$O(^TMP("IBCNR",$J,"RPTDATA",DISP1,DISP2,DISP3,DISP4,DISP5)) Q:DISP5=""  D
"RTN","IBCNRRP3",190,0)
 ..... S DISPD=$G(^TMP("IBCNR",$J,"RPTDATA",DISP1,DISP2,DISP3,DISP4,DISP5))
"RTN","IBCNRRP3",191,0)
 ..... ;get insurance addr
"RTN","IBCNRRP3",192,0)
 ..... S IBCIN11=$G(^DIC(36,DISP3,.11))
"RTN","IBCNRRP3",193,0)
 ..... S IBCINST=$S($P(IBCIN11,U,5)="":"--",1:$P($G(^DIC(5,$P(IBCIN11,U,5),0)),U,2))
"RTN","IBCNRRP3",194,0)
 ..... S IBCNADR=$E($P(IBCIN11,U),1,15)_","_$E($P(IBCIN11,U,4),1,10)_","_IBCINST_" "_$E($P(IBCIN11,U,6),1,5)
"RTN","IBCNRRP3",195,0)
 ..... S CNT=CNT+1
"RTN","IBCNRRP3",196,0)
 ..... ;insurance co and group/plan
"RTN","IBCNRRP3",197,0)
 ..... S ^TMP("IBCNR",$J,"DSPDATA",CNT)=$$FO^IBCNEUT1(DISP2,40)_$$FO^IBCNEUT1(IBCNADR,35,"L")
"RTN","IBCNRRP3",198,0)
 ..... ;bin; pcn; and pharmacy plan ID
"RTN","IBCNRRP3",199,0)
 ..... S CNT=CNT+1
"RTN","IBCNRRP3",200,0)
 ..... S ^TMP("IBCNR",$J,"DSPDATA",CNT)=$$FO^IBCNEUT1(($E(DISP4,1,24)_"/"_$E($P(DISPD,U),1,15)),42,"L")_$$FO^IBCNEUT1($P(DISPD,U,2),18,"L")_$$FO^IBCNEUT1($P(DISPD,U,3),9,"L")_$$FO^IBCNEUT1($P(DISPD,U,4),10,"L")
"RTN","IBCNRRP3",201,0)
 ..... S I=$$FO^IBCNEUT1("",60)_$$FO^IBCNEUT1($P(DISPD,U,5),10,"L")_$$FO^IBCNEUT1($P(DISPD,U,6),10,"L")
"RTN","IBCNRRP3",202,0)
 ..... I $TR(I," ")'="" S CNT=CNT+1,^TMP("IBCNR",$J,"DSPDATA",CNT)=I
"RTN","IBCNRRP3",203,0)
 ..... S CNT=CNT+1
"RTN","IBCNRRP3",204,0)
 ..... S ^TMP("IBCNR",$J,"DSPDATA",CNT)=$$FO^IBCNEUT1(DASHES2,79,"L")
"RTN","IBCNRRP3",205,0)
 ;
"RTN","IBCNRRP3",206,0)
DATAX ; DATA exit pt
"RTN","IBCNRRP3",207,0)
 K RPTDATA
"RTN","IBCNRRP3",208,0)
 Q
"RTN","IBCNRRP3",209,0)
 ;
"UP",366.14,366.1412,-2)
366.14^1
"UP",366.14,366.1412,-1)
366.141^5
"UP",366.14,366.1412,0)
366.1412
"VER")
8.0^22.2
"^DD",366.14,366.141,2,0)
INSURANCE^366.1412A^^5;0
"^DD",366.14,366.141,2,21,0)
^.001^1^1^3170927^^^
"^DD",366.14,366.141,2,21,1,0)
Insurance data
"^DD",366.14,366.141,2,23,0)
^^2^2^3060620^
"^DD",366.14,366.141,2,23,1,0)
Insurance data stored in "INS" node of the array which is passed into 
"^DD",366.14,366.141,2,23,2,0)
$$RX^IBNCPDP API (IA #4299)
"^DD",366.14,366.1412,0)
INSURANCE SUB-FIELD^^.07^27
"^DD",366.14,366.1412,0,"DT")
3180311
"^DD",366.14,366.1412,0,"IX","B",366.1412,.01)

"^DD",366.14,366.1412,0,"NM","INSURANCE")

"^DD",366.14,366.1412,0,"UP")
366.141
"^DD",366.14,366.1412,.01,0)
INSURANCE^NJ3,0^^0;1^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X
"^DD",366.14,366.1412,.01,1,0)
^.1
"^DD",366.14,366.1412,.01,1,1,0)
366.1412^B
"^DD",366.14,366.1412,.01,1,1,1)
S ^IBCNR(366.14,DA(2),1,DA(1),5,"B",$E(X,1,30),DA)=""
"^DD",366.14,366.1412,.01,1,1,2)
K ^IBCNR(366.14,DA(2),1,DA(1),5,"B",$E(X,1,30),DA)
"^DD",366.14,366.1412,.01,3)
Type a Number between 0 and 999, 0 Decimal Digits
"^DD",366.14,366.1412,.01,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.01,21,1,0)
Sequential number for patients insurances.
"^DD",366.14,366.1412,.01,"DT")
3060620
"^DD",366.14,366.1412,.02,0)
GROUP INSURANCE PLAN^P355.3'^IBA(355.3,^0;2^Q
"^DD",366.14,366.1412,.02,3)
Enter Group Insurance Plan
"^DD",366.14,366.1412,.02,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.02,21,1,0)
Group Insurance Plan
"^DD",366.14,366.1412,.02,"DT")
3060620
"^DD",366.14,366.1412,.03,0)
BIN^F^^0;3^K:$L(X)>10!($L(X)<1) X
"^DD",366.14,366.1412,.03,3)
Answer must be 1-10 characters in length
"^DD",366.14,366.1412,.03,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.03,21,1,0)
Bank Identification Number
"^DD",366.14,366.1412,.03,"DT")
3060620
"^DD",366.14,366.1412,.04,0)
PCN^F^^0;4^K:$L(X)>16!($L(X)<1) X
"^DD",366.14,366.1412,.04,3)
Answer must be 1-16 characters in length.
"^DD",366.14,366.1412,.04,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.04,21,1,0)
Processor Control Number
"^DD",366.14,366.1412,.04,"DT")
3060620
"^DD",366.14,366.1412,.05,0)
PAYER SHEET B1^F^^0;5^K:$L(X)>20!($L(X)<1) X
"^DD",366.14,366.1412,.05,3)
Answer must be 1-20 characters in length.
"^DD",366.14,366.1412,.05,21,0)
^^1^1^3060620^^
"^DD",366.14,366.1412,.05,21,1,0)
Payer sheet B1
"^DD",366.14,366.1412,.05,"DT")
3060620
"^DD",366.14,366.1412,.06,0)
GROUP ID^FJ55^^0;6^K:$L(X)>55!($L(X)<1) X
"^DD",366.14,366.1412,.06,3)
Answer must be 1-55 characters in length.
"^DD",366.14,366.1412,.06,"DT")
3170927
"^DD",366.14,366.1412,.07,0)
CARDHOLDER ID^FJ80^^0;7^K:$L(X)>80!($L(X)<1) X
"^DD",366.14,366.1412,.07,3)
Answer must be 1-80 characters in length.
"^DD",366.14,366.1412,.07,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.07,21,1,0)
Cardholder ID
"^DD",366.14,366.1412,.07,"DT")
3170927
"^DD",366.14,366.1412,.08,0)
PATIENT RELATIONSHIP CODE^NJ2,0^^0;8^K:+X'=X!(X>99)!(X<0)!(X?.E1"."1N.N) X
"^DD",366.14,366.1412,.08,3)
Type a Number between 0 and 99, 0 Decimal Digits
"^DD",366.14,366.1412,.08,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.08,21,1,0)
Patient Relationship code
"^DD",366.14,366.1412,.08,"DT")
3060620
"^DD",366.14,366.1412,.09,0)
PHARMACY PERSON CODE^F^^0;9^K:$L(X)>3!($L(X)<1) X
"^DD",366.14,366.1412,.09,3)
Answer must be 1-3 characters in length.
"^DD",366.14,366.1412,.09,21,0)
^^12^12^3110621^
"^DD",366.14,366.1412,.09,21,1,0)
This is the pharmacy person code value at the time of IB billing 
"^DD",366.14,366.1412,.09,21,2,0)
determination.  This field is stored and maintained with the patient 
"^DD",366.14,366.1412,.09,21,3,0)
insurance policy data.  This is the code that is assigned by the payer to 
"^DD",366.14,366.1412,.09,21,4,0)
identify the patient.  The payer may use a unique person code to identify
"^DD",366.14,366.1412,.09,21,5,0)
each specific person on the pharmacy insurance policy. This code may also
"^DD",366.14,366.1412,.09,21,6,0)
describe the patient's relationship to the cardholder.
"^DD",366.14,366.1412,.09,21,7,0)
 
"^DD",366.14,366.1412,.09,21,8,0)
Enrollment Standard Examples:
"^DD",366.14,366.1412,.09,21,9,0)
 
"^DD",366.14,366.1412,.09,21,10,0)
  001 = Cardholder
"^DD",366.14,366.1412,.09,21,11,0)
  002 = Spouse
"^DD",366.14,366.1412,.09,21,12,0)
  003 - 999 = Dependents and Others (including second spouses, etc.)
"^DD",366.14,366.1412,.09,23,0)
^^2^2^3110621^
"^DD",366.14,366.1412,.09,23,1,0)
This corresponds with field# 4.06 in subfile 2.312 of the PATIENT (#2) 
"^DD",366.14,366.1412,.09,23,2,0)
file.  NCPDP field 303-C3 - Person Code
"^DD",366.14,366.1412,.09,"DT")
3110621
"^DD",366.14,366.1412,.101,0)
CARDHOLDER FIRST NAME^FJ35^^1;1^K:$L(X)>35!($L(X)<1) X
"^DD",366.14,366.1412,.101,3)
Answer must be 1-35 characters in length.
"^DD",366.14,366.1412,.101,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.101,21,1,0)
Cardholder First Name
"^DD",366.14,366.1412,.101,"DT")
3170927
"^DD",366.14,366.1412,.102,0)
CARDHOLDER LAST NAME^FJ60^^1;2^K:$L(X)>60!($L(X)<1) X
"^DD",366.14,366.1412,.102,3)
Answer must be 1-60 characters in length.
"^DD",366.14,366.1412,.102,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.102,21,1,0)
Cardholder Last Name
"^DD",366.14,366.1412,.102,"DT")
3170927
"^DD",366.14,366.1412,.103,0)
STATE^P5'^DIC(5,^1;3^Q
"^DD",366.14,366.1412,.103,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.103,21,1,0)
State
"^DD",366.14,366.1412,.103,"DT")
3060620
"^DD",366.14,366.1412,.104,0)
PAYER SHEET B2^F^^1;4^K:$L(X)>20!($L(X)<1) X
"^DD",366.14,366.1412,.104,3)
Answer must be 1-20 characters in length.
"^DD",366.14,366.1412,.104,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.104,21,1,0)
Payer sheet B2
"^DD",366.14,366.1412,.104,"DT")
3060620
"^DD",366.14,366.1412,.105,0)
PAYER SHEET B3^F^^1;5^K:$L(X)>20!($L(X)<1) X
"^DD",366.14,366.1412,.105,3)
Answer must be 1-20 characters in length.
"^DD",366.14,366.1412,.105,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.105,21,1,0)
Payer sheet B3
"^DD",366.14,366.1412,.105,"DT")
3060620
"^DD",366.14,366.1412,.106,0)
SOFTWARE/VENDOR CERT ID^F^^1;6^K:$L(X)>20!($L(X)<1) X
"^DD",366.14,366.1412,.106,3)
Answer must be 1-20 characters in length.
"^DD",366.14,366.1412,.106,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.106,21,1,0)
Software/Vendor Certification ID
"^DD",366.14,366.1412,.106,"DT")
3060620
"^DD",366.14,366.1412,.107,0)
INSURANCE NAME^F^^1;7^K:$L(X)>50!($L(X)<1) X
"^DD",366.14,366.1412,.107,3)
Answer must be 1-50 characters in length.
"^DD",366.14,366.1412,.107,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.107,21,1,0)
Insurance Name
"^DD",366.14,366.1412,.107,"DT")
3060620
"^DD",366.14,366.1412,.201,0)
DISPENSING FEE^NJ10,2^^2;1^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",366.14,366.1412,.201,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",366.14,366.1412,.201,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.201,21,1,0)
Dispensing Fee Submitted
"^DD",366.14,366.1412,.201,"DT")
3060620
"^DD",366.14,366.1412,.202,0)
BASIS OF COST DETERMINATION^F^^2;2^K:$L(X)>4!($L(X)<1) X
"^DD",366.14,366.1412,.202,3)
Answer must be 1-4 characters in length.
"^DD",366.14,366.1412,.202,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.202,21,1,0)
Basis of Cost Determination
"^DD",366.14,366.1412,.202,23,0)
^^4^4^3060217^
"^DD",366.14,366.1412,.202,23,1,0)
for basis of cost determination the following is used:
"^DD",366.14,366.1412,.202,23,2,0)
"07" would be sent for Usual & Customary
"^DD",366.14,366.1412,.202,23,3,0)
"01" would be sent for AWP
"^DD",366.14,366.1412,.202,23,4,0)
"05" would be sent for Cost calculations
"^DD",366.14,366.1412,.202,"DT")
3060620
"^DD",366.14,366.1412,.203,0)
AWP OR TORT RATE OR COST^NJ10,2^^2;3^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",366.14,366.1412,.203,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",366.14,366.1412,.203,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.203,21,1,0)
Average Wholesale Price OR Tort dollar amount rate OR Cost amount
"^DD",366.14,366.1412,.203,"DT")
3060620
"^DD",366.14,366.1412,.204,0)
GROSS AMOUNT DUE^NJ10,2^^2;4^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",366.14,366.1412,.204,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",366.14,366.1412,.204,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.204,21,1,0)
Gross Amount Due. Base price plus Dispense fee/Administrative fee.
"^DD",366.14,366.1412,.204,"DT")
3060620
"^DD",366.14,366.1412,.205,0)
ADMINISTRATIVE FEE^NJ10,2^^2;5^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999)!(X<0) X
"^DD",366.14,366.1412,.205,3)
Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits
"^DD",366.14,366.1412,.205,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.205,21,1,0)
Administrative Fee
"^DD",366.14,366.1412,.205,"DT")
3060620
"^DD",366.14,366.1412,.206,0)
INGREDIENT COST^NJ10,2^^2;6^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999)!(X<0)!(X?.E1"."3.N) X
"^DD",366.14,366.1412,.206,3)
Type a dollar amount between 0 and 9999999, 2 decimal digits.
"^DD",366.14,366.1412,.206,21,0)
^^2^2^3110517^
"^DD",366.14,366.1412,.206,21,1,0)
The ingredient cost is the calculation of quantity times unit price.
"^DD",366.14,366.1412,.206,21,2,0)
No fees included.
"^DD",366.14,366.1412,.206,"DT")
3110517
"^DD",366.14,366.1412,.207,0)
USUAL AND CUSTOMARY CHARGE^NJ10,2^^2;7^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999)!(X<0)!(X?.E1"."3.N) X
"^DD",366.14,366.1412,.207,3)
Type a dollar amount between 0 and 9999999, 2 decimal digits.
"^DD",366.14,366.1412,.207,21,0)
^^1^1^3110526^
"^DD",366.14,366.1412,.207,21,1,0)
Usual & Customary Charges. Gross Amount Due less the administrative fees.
"^DD",366.14,366.1412,.207,"DT")
3110526
"^DD",366.14,366.1412,.301,0)
GROUP NAME^FJ80^^3;1^K:$L(X)>80!($L(X)<1) X
"^DD",366.14,366.1412,.301,3)
Answer must be 1-80 characters in length.
"^DD",366.14,366.1412,.301,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.301,21,1,0)
Group Name
"^DD",366.14,366.1412,.301,"DT")
3170927
"^DD",366.14,366.1412,.302,0)
INSURANCE PHONE NUMBER^F^^3;2^K:$L(X)>20!($L(X)<1) X
"^DD",366.14,366.1412,.302,3)
Answer must be 1-20 characters in length.
"^DD",366.14,366.1412,.302,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.302,21,1,0)
Insurance Phone Number
"^DD",366.14,366.1412,.302,"DT")
3060620
"^DD",366.14,366.1412,.303,0)
PLAN ID^F^^3;3^K:$L(X)>50!($L(X)<1) X
"^DD",366.14,366.1412,.303,3)
Answer must be 1-50 characters in length.
"^DD",366.14,366.1412,.303,21,0)
^^1^1^3060620^
"^DD",366.14,366.1412,.303,21,1,0)
Plan ID
"^DD",366.14,366.1412,.303,"DT")
3060620
"^DD",366.14,366.1412,.304,0)
PT INSURANCE POLICY^NJ8,0^^3;4^K:+X'=X!(X>99999999)!(X<0)!(X?.E1"."1.N) X
"^DD",366.14,366.1412,.304,3)
Type a number between 0 and 99999999, 0 decimal digits.
"^DD",366.14,366.1412,.304,21,0)
^^3^3^3110621^
"^DD",366.14,366.1412,.304,21,1,0)
This is the insurance policy at the time of IB billing determination.
"^DD",366.14,366.1412,.304,21,2,0)
This is the internal entry number to the 2.312 subfile of the PATIENT (#2)
"^DD",366.14,366.1412,.304,21,3,0)
file.
"^DD",366.14,366.1412,.304,"DT")
3110621
**INSTALL NAME**
PSO*7.0*482
"BLD",10641,0)
PSO*7.0*482^OUTPATIENT PHARMACY^0^3180620^y
"BLD",10641,1,0)
^^1^1^3170913^
"BLD",10641,1,1,0)
MCCF EDI TAS EPHARMACY BUILDS 3 & 4
"BLD",10641,4,0)
^9.64PA^52.86^2
"BLD",10641,4,52.86,0)
52.86
"BLD",10641,4,52.86,2,0)
^9.641^52.86^1
"BLD",10641,4,52.86,2,52.86,0)
EPHARMACY SITE PARAMETERS  (File-top level)
"BLD",10641,4,52.86,2,52.86,1,0)
^9.6411^7^1
"BLD",10641,4,52.86,2,52.86,1,7,0)
IGNORE THRESHOLD
"BLD",10641,4,52.86,222)
y^n^p^^^^n^^n
"BLD",10641,4,52.86,224)

"BLD",10641,4,55,0)
55
"BLD",10641,4,55,2,0)
^9.641^55.174^2
"BLD",10641,4,55,2,55.17,0)
PATIENT COMMENT  (sub-file)
"BLD",10641,4,55,2,55.17,1,0)
^9.6411^3^4
"BLD",10641,4,55,2,55.17,1,.01,0)
PATIENT COMMENT DATE
"BLD",10641,4,55,2,55.17,1,1,0)
USER
"BLD",10641,4,55,2,55.17,1,2,0)
ACTIVE
"BLD",10641,4,55,2,55.17,1,3,0)
COMMENT
"BLD",10641,4,55,2,55.174,0)
PATIENT COMMENT HISTORY  (sub-file)
"BLD",10641,4,55,2,55.174,1,0)
^9.6411^2^3
"BLD",10641,4,55,2,55.174,1,.01,0)
HISTORY DATE
"BLD",10641,4,55,2,55.174,1,1,0)
USER
"BLD",10641,4,55,2,55.174,1,2,0)
ACTIVITY
"BLD",10641,4,55,222)
y^n^p^^^^n^^n
"BLD",10641,4,55,224)

"BLD",10641,4,"APDD",52.86,52.86)

"BLD",10641,4,"APDD",52.86,52.86,7)

"BLD",10641,4,"APDD",55,55.17)

"BLD",10641,4,"APDD",55,55.17,.01)

"BLD",10641,4,"APDD",55,55.17,1)

"BLD",10641,4,"APDD",55,55.17,2)

"BLD",10641,4,"APDD",55,55.17,3)

"BLD",10641,4,"APDD",55,55.174)

"BLD",10641,4,"APDD",55,55.174,.01)

"BLD",10641,4,"APDD",55,55.174,1)

"BLD",10641,4,"APDD",55,55.174,2)

"BLD",10641,4,"B",52.86,52.86)

"BLD",10641,4,"B",55,55)

"BLD",10641,6.3)
44
"BLD",10641,"KRN",0)
^9.67PA^779.2^20
"BLD",10641,"KRN",.4,0)
.4
"BLD",10641,"KRN",.4,"NM",0)
^9.68A^^
"BLD",10641,"KRN",.401,0)
.401
"BLD",10641,"KRN",.402,0)
.402
"BLD",10641,"KRN",.403,0)
.403
"BLD",10641,"KRN",.5,0)
.5
"BLD",10641,"KRN",.84,0)
.84
"BLD",10641,"KRN",3.6,0)
3.6
"BLD",10641,"KRN",3.8,0)
3.8
"BLD",10641,"KRN",9.2,0)
9.2
"BLD",10641,"KRN",9.8,0)
9.8
"BLD",10641,"KRN",9.8,"NM",0)
^9.68A^19^19
"BLD",10641,"KRN",9.8,"NM",1,0)
PSOBPSU3^^0^B17460470
"BLD",10641,"KRN",9.8,"NM",2,0)
PSOREJP2^^0^B199801855
"BLD",10641,"KRN",9.8,"NM",3,0)
PSORXED^^0^B83606769
"BLD",10641,"KRN",9.8,"NM",4,0)
PSORXEDT^^0^B55389504
"BLD",10641,"KRN",9.8,"NM",5,0)
PSOLBLN^^0^B80788445
"BLD",10641,"KRN",9.8,"NM",6,0)
PSOREJU3^^0^B146070419
"BLD",10641,"KRN",9.8,"NM",7,0)
PSOREJP1^^0^B202538328
"BLD",10641,"KRN",9.8,"NM",8,0)
PSOBPSU2^^0^B63271095
"BLD",10641,"KRN",9.8,"NM",9,0)
PSOBPSU1^^0^B114078580
"BLD",10641,"KRN",9.8,"NM",10,0)
PSOPMP0^^0^B96962935
"BLD",10641,"KRN",9.8,"NM",11,0)
PSOREJP3^^0^B262665295
"BLD",10641,"KRN",9.8,"NM",12,0)
PSOPTC0^^0^B69697728
"BLD",10641,"KRN",9.8,"NM",13,0)
PSOBPSSL^^0^B94150549
"BLD",10641,"KRN",9.8,"NM",14,0)
PSOBPSSP^^0^B316836860
"BLD",10641,"KRN",9.8,"NM",15,0)
PSOREJU1^^0^B163747187
"BLD",10641,"KRN",9.8,"NM",16,0)
PSORXL1^^0^B54060761
"BLD",10641,"KRN",9.8,"NM",17,0)
PSOORAL1^^0^B120026363
"BLD",10641,"KRN",9.8,"NM",18,0)
PSORXVW1^^0^B75490408
"BLD",10641,"KRN",9.8,"NM",19,0)
PSOORAL2^^0^B25016352
"BLD",10641,"KRN",9.8,"NM","B","PSOBPSSL",13)

"BLD",10641,"KRN",9.8,"NM","B","PSOBPSSP",14)

"BLD",10641,"KRN",9.8,"NM","B","PSOBPSU1",9)

"BLD",10641,"KRN",9.8,"NM","B","PSOBPSU2",8)

"BLD",10641,"KRN",9.8,"NM","B","PSOBPSU3",1)

"BLD",10641,"KRN",9.8,"NM","B","PSOLBLN",5)

"BLD",10641,"KRN",9.8,"NM","B","PSOORAL1",17)

"BLD",10641,"KRN",9.8,"NM","B","PSOORAL2",19)

"BLD",10641,"KRN",9.8,"NM","B","PSOPMP0",10)

"BLD",10641,"KRN",9.8,"NM","B","PSOPTC0",12)

"BLD",10641,"KRN",9.8,"NM","B","PSOREJP1",7)

"BLD",10641,"KRN",9.8,"NM","B","PSOREJP2",2)

"BLD",10641,"KRN",9.8,"NM","B","PSOREJP3",11)

"BLD",10641,"KRN",9.8,"NM","B","PSOREJU1",15)

"BLD",10641,"KRN",9.8,"NM","B","PSOREJU3",6)

"BLD",10641,"KRN",9.8,"NM","B","PSORXED",3)

"BLD",10641,"KRN",9.8,"NM","B","PSORXEDT",4)

"BLD",10641,"KRN",9.8,"NM","B","PSORXL1",16)

"BLD",10641,"KRN",9.8,"NM","B","PSORXVW1",18)

"BLD",10641,"KRN",19,0)
19
"BLD",10641,"KRN",19,"NM",0)
^9.68A^13^13
"BLD",10641,"KRN",19,"NM",1,0)
PSO EPHARMACY PATIENT COMMENTS^^0
"BLD",10641,"KRN",19,"NM",2,0)
PSO EPHARMACY MENU^^0
"BLD",10641,"KRN",19,"NM",3,0)
PSO REJECTS WORKLIST^^4^
"BLD",10641,"KRN",19,"NM",4,0)
PSO REJECTS VIEW/PROCESS^^4^
"BLD",10641,"KRN",19,"NM",5,0)
PSO PMP^^4^
"BLD",10641,"KRN",19,"NM",6,0)
PSO PMP SITE PREFERENCES^^4^
"BLD",10641,"KRN",19,"NM",7,0)
PSO IGNORED REJECTS REPORT^^4^
"BLD",10641,"KRN",19,"NM",8,0)
PSO ePHARM SITE PARAMETERS^^4^
"BLD",10641,"KRN",19,"NM",9,0)
PSO NDC VALIDATE^^4^
"BLD",10641,"KRN",19,"NM",10,0)
PSO TRI CVA OVERRIDE REPORT^^4^
"BLD",10641,"KRN",19,"NM",11,0)
BPS RPT VIEW ECME RX^^4^
"BLD",10641,"KRN",19,"NM",12,0)
PSO PRODUCTIVITY REVENUE RPT^^4^
"BLD",10641,"KRN",19,"NM",13,0)
CMOP AND OPAI TESTING TOOL^^4^
"BLD",10641,"KRN",19,"NM","B","BPS RPT VIEW ECME RX",11)

"BLD",10641,"KRN",19,"NM","B","CMOP AND OPAI TESTING TOOL",13)

"BLD",10641,"KRN",19,"NM","B","PSO EPHARMACY MENU",2)

"BLD",10641,"KRN",19,"NM","B","PSO EPHARMACY PATIENT COMMENTS",1)

"BLD",10641,"KRN",19,"NM","B","PSO IGNORED REJECTS REPORT",7)

"BLD",10641,"KRN",19,"NM","B","PSO NDC VALIDATE",9)

"BLD",10641,"KRN",19,"NM","B","PSO PMP",5)

"BLD",10641,"KRN",19,"NM","B","PSO PMP SITE PREFERENCES",6)

"BLD",10641,"KRN",19,"NM","B","PSO PRODUCTIVITY REVENUE RPT",12)

"BLD",10641,"KRN",19,"NM","B","PSO REJECTS VIEW/PROCESS",4)

"BLD",10641,"KRN",19,"NM","B","PSO REJECTS WORKLIST",3)

"BLD",10641,"KRN",19,"NM","B","PSO TRI CVA OVERRIDE REPORT",10)

"BLD",10641,"KRN",19,"NM","B","PSO ePHARM SITE PARAMETERS",8)

"BLD",10641,"KRN",19.1,0)
19.1
"BLD",10641,"KRN",101,0)
101
"BLD",10641,"KRN",101,"NM",0)
^9.68A^10^10
"BLD",10641,"KRN",101,"NM",1,0)
PSO PATIENT COMMENT ACTIVATE^^0
"BLD",10641,"KRN",101,"NM",2,0)
PSO PATIENT COMMENT ADD^^0
"BLD",10641,"KRN",101,"NM",3,0)
PSO PATIENT COMMENT DOWN A LINE^^0
"BLD",10641,"KRN",101,"NM",4,0)
PSO PATIENT COMMENT EXIT^^0
"BLD",10641,"KRN",101,"NM",5,0)
PSO PATIENT COMMENT HIDDEN MENU^^0
"BLD",10641,"KRN",101,"NM",6,0)
PSO PATIENT COMMENT HISTORY^^0
"BLD",10641,"KRN",101,"NM",7,0)
PSO PATIENT COMMENT MENU^^0
"BLD",10641,"KRN",101,"NM",8,0)
PSO PATIENT COMMENT NEXT SCREEN^^0
"BLD",10641,"KRN",101,"NM",9,0)
PSO PATIENT COMMENT PREVIOUS SCREEN^^0
"BLD",10641,"KRN",101,"NM",10,0)
PSO PATIENT COMMENT UP A LINE^^0
"BLD",10641,"KRN",101,"NM","B","PSO PATIENT COMMENT ACTIVATE",1)

"BLD",10641,"KRN",101,"NM","B","PSO PATIENT COMMENT ADD",2)

"BLD",10641,"KRN",101,"NM","B","PSO PATIENT COMMENT DOWN A LINE",3)

"BLD",10641,"KRN",101,"NM","B","PSO PATIENT COMMENT EXIT",4)

"BLD",10641,"KRN",101,"NM","B","PSO PATIENT COMMENT HIDDEN MENU",5)

"BLD",10641,"KRN",101,"NM","B","PSO PATIENT COMMENT HISTORY",6)

"BLD",10641,"KRN",101,"NM","B","PSO PATIENT COMMENT MENU",7)

"BLD",10641,"KRN",101,"NM","B","PSO PATIENT COMMENT NEXT SCREEN",8)

"BLD",10641,"KRN",101,"NM","B","PSO PATIENT COMMENT PREVIOUS SCREEN",9)

"BLD",10641,"KRN",101,"NM","B","PSO PATIENT COMMENT UP A LINE",10)

"BLD",10641,"KRN",409.61,0)
409.61
"BLD",10641,"KRN",409.61,"NM",0)
^9.68A^1^1
"BLD",10641,"KRN",409.61,"NM",1,0)
PSO PATIENT COMMENT^^0
"BLD",10641,"KRN",409.61,"NM","B","PSO PATIENT COMMENT",1)

"BLD",10641,"KRN",771,0)
771
"BLD",10641,"KRN",779.2,0)
779.2
"BLD",10641,"KRN",870,0)
870
"BLD",10641,"KRN",8989.51,0)
8989.51
"BLD",10641,"KRN",8989.52,0)
8989.52
"BLD",10641,"KRN",8994,0)
8994
"BLD",10641,"KRN","B",.4,.4)

"BLD",10641,"KRN","B",.401,.401)

"BLD",10641,"KRN","B",.402,.402)

"BLD",10641,"KRN","B",.403,.403)

"BLD",10641,"KRN","B",.5,.5)

"BLD",10641,"KRN","B",.84,.84)

"BLD",10641,"KRN","B",3.6,3.6)

"BLD",10641,"KRN","B",3.8,3.8)

"BLD",10641,"KRN","B",9.2,9.2)

"BLD",10641,"KRN","B",9.8,9.8)

"BLD",10641,"KRN","B",19,19)

"BLD",10641,"KRN","B",19.1,19.1)

"BLD",10641,"KRN","B",101,101)

"BLD",10641,"KRN","B",409.61,409.61)

"BLD",10641,"KRN","B",771,771)

"BLD",10641,"KRN","B",779.2,779.2)

"BLD",10641,"KRN","B",870,870)

"BLD",10641,"KRN","B",8989.51,8989.51)

"BLD",10641,"KRN","B",8989.52,8989.52)

"BLD",10641,"KRN","B",8994,8994)

"BLD",10641,"QUES",0)
^9.62^^
"FIA",52.86)
EPHARMACY SITE PARAMETERS
"FIA",52.86,0)
^PS(52.86,
"FIA",52.86,0,0)
52.86P
"FIA",52.86,0,1)
y^n^p^^^^n^^n
"FIA",52.86,0,10)

"FIA",52.86,0,11)

"FIA",52.86,0,"RLRO")

"FIA",52.86,0,"VR")
7.0^PSO
"FIA",52.86,52.86)
1
"FIA",52.86,52.86,7)

"FIA",55)
PHARMACY PATIENT
"FIA",55,0)
^PS(55,
"FIA",55,0,0)
55P
"FIA",55,0,1)
y^n^p^^^^n^^n
"FIA",55,0,10)

"FIA",55,0,11)

"FIA",55,0,"RLRO")

"FIA",55,0,"VR")
7.0^PSO
"FIA",55,55)
1
"FIA",55,55,70)

"FIA",55,55.17)
1
"FIA",55,55.17,.01)

"FIA",55,55.17,1)

"FIA",55,55.17,2)

"FIA",55,55.17,3)

"FIA",55,55.17,4)

"FIA",55,55.174)
1
"FIA",55,55.174,.01)

"FIA",55,55.174,1)

"FIA",55,55.174,2)

"KRN",19,2920243,-1)
4^3
"KRN",19,2920243,0)
PSO REJECTS WORKLIST
"KRN",19,2920244,-1)
0^2
"KRN",19,2920244,0)
PSO EPHARMACY MENU^ePharmacy Menu^^M^^^^^^^^OUTPATIENT PHARMACY
"KRN",19,2920244,10,0)
^19.01IP^13^13
"KRN",19,2920244,10,1,0)
2920243^WL^70
"KRN",19,2920244,10,1,"^")
PSO REJECTS WORKLIST
"KRN",19,2920244,10,2,0)
2920245^VP^60
"KRN",19,2920244,10,2,"^")
PSO REJECTS VIEW/PROCESS
"KRN",19,2920244,10,3,0)
2920667^MP^20
"KRN",19,2920244,10,3,"^")
PSO PMP
"KRN",19,2920244,10,4,0)
2920668^PF^40
"KRN",19,2920244,10,4,"^")
PSO PMP SITE PREFERENCES
"KRN",19,2920244,10,5,0)
2920669^IR^10
"KRN",19,2920244,10,5,"^")
PSO IGNORED REJECTS REPORT
"KRN",19,2920244,10,7,0)
2921011^SP^50
"KRN",19,2920244,10,7,"^")
PSO ePHARM SITE PARAMETERS
"KRN",19,2920244,10,8,0)
2921013^NV^30
"KRN",19,2920244,10,8,"^")
PSO NDC VALIDATE
"KRN",19,2920244,10,9,0)
2921330^TC^80
"KRN",19,2920244,10,9,"^")
PSO TRI CVA OVERRIDE REPORT
"KRN",19,2920244,10,10,0)
2921615^VER^90
"KRN",19,2920244,10,10,"^")
BPS RPT VIEW ECME RX
"KRN",19,2920244,10,11,0)
2922327^PR^85
"KRN",19,2920244,10,11,"^")
PSO PRODUCTIVITY REVENUE RPT
"KRN",19,2920244,10,12,0)
2922490^ZZ
"KRN",19,2920244,10,12,"^")
CMOP AND OPAI TESTING TOOL
"KRN",19,2920244,10,13,0)
2922489^PC^88
"KRN",19,2920244,10,13,"^")
PSO EPHARMACY PATIENT COMMENTS
"KRN",19,2920244,99)
64718,50581
"KRN",19,2920244,99.1)
64819,14430
"KRN",19,2920244,"U")
EPHARMACY MENU
"KRN",19,2920245,-1)
4^4
"KRN",19,2920245,0)
PSO REJECTS VIEW/PROCESS
"KRN",19,2920667,-1)
4^5
"KRN",19,2920667,0)
PSO PMP
"KRN",19,2920668,-1)
4^6
"KRN",19,2920668,0)
PSO PMP SITE PREFERENCES
"KRN",19,2920669,-1)
4^7
"KRN",19,2920669,0)
PSO IGNORED REJECTS REPORT
"KRN",19,2921011,-1)
4^8
"KRN",19,2921011,0)
PSO ePHARM SITE PARAMETERS
"KRN",19,2921013,-1)
4^9
"KRN",19,2921013,0)
PSO NDC VALIDATE
"KRN",19,2921330,-1)
4^10
"KRN",19,2921330,0)
PSO TRI CVA OVERRIDE REPORT
"KRN",19,2921615,-1)
4^11
"KRN",19,2921615,0)
BPS RPT VIEW ECME RX
"KRN",19,2922327,-1)
4^12
"KRN",19,2922327,0)
PSO PRODUCTIVITY REVENUE RPT
"KRN",19,2922489,-1)
0^1
"KRN",19,2922489,0)
PSO EPHARMACY PATIENT COMMENTS^ePharmacy Patient Comment^^R^^PSO EPHARMACY SITE MANAGER^^^^^^OUTPATIENT PHARMACY
"KRN",19,2922489,1,0)
^^2^2^3171207^
"KRN",19,2922489,1,1,0)
This option allows entry of Patient Billing comments and will require the 
"KRN",19,2922489,1,2,0)
PSO EPHARMACY SITE MANAGER key.
"KRN",19,2922489,25)
PSOPTC0
"KRN",19,2922489,99)
64635,57744
"KRN",19,2922489,"U")
EPHARMACY PATIENT COMMENT
"KRN",19,2922490,-1)
4^13
"KRN",19,2922490,0)
CMOP AND OPAI TESTING TOOL
"KRN",101,8316,-1)
0^7
"KRN",101,8316,0)
PSO PATIENT COMMENT MENU^Menu protocol for Patient Comment^^M^^^^^^^^
"KRN",101,8316,4)
40^4
"KRN",101,8316,10,0)
^101.01PA^4^4
"KRN",101,8316,10,1,0)
8317^A^1^
"KRN",101,8316,10,1,"^")
PSO PATIENT COMMENT ADD
"KRN",101,8316,10,2,0)
8318^C^3^
"KRN",101,8316,10,2,"^")
PSO PATIENT COMMENT HISTORY
"KRN",101,8316,10,3,0)
8319^I^2^
"KRN",101,8316,10,3,"^")
PSO PATIENT COMMENT ACTIVATE
"KRN",101,8316,10,4,0)
8320^EX^4^
"KRN",101,8316,10,4,"^")
PSO PATIENT COMMENT EXIT
"KRN",101,8316,26)
DO SHOW^VALM
"KRN",101,8316,28)
Select action:
"KRN",101,8316,29)
Quit
"KRN",101,8316,99)
64718,50581
"KRN",101,8317,-1)
0^2
"KRN",101,8317,0)
PSO PATIENT COMMENT ADD^Add Patient Comment^^A^^^^^^^^
"KRN",101,8317,20)
D ADD^PSOPTC0
"KRN",101,8317,99)
64718,50581
"KRN",101,8318,-1)
0^6
"KRN",101,8318,0)
PSO PATIENT COMMENT HISTORY^Comment History^^A^^^^^^^^
"KRN",101,8318,20)
D HIST^PSOPTC0
"KRN",101,8318,99)
64718,50581
"KRN",101,8319,-1)
0^1
"KRN",101,8319,0)
PSO PATIENT COMMENT ACTIVATE^Inactivate or Activate Comment^^A^^^^^^^^
"KRN",101,8319,20)
D ACT^PSOPTC0
"KRN",101,8319,99)
64718,50581
"KRN",101,8320,-1)
0^4
"KRN",101,8320,0)
PSO PATIENT COMMENT EXIT^Exit^^A^^^^^^^^
"KRN",101,8320,2,0)
^101.02A^2^2
"KRN",101,8320,2,1,0)
QUIT
"KRN",101,8320,2,2,0)
EXIT
"KRN",101,8320,2,"B","EXIT",2)

"KRN",101,8320,2,"B","QUIT",1)

"KRN",101,8320,20)
DO EXIT^PSOPTC0
"KRN",101,8320,99)
64718,50581
"KRN",101,8321,-1)
0^3
"KRN",101,8321,0)
PSO PATIENT COMMENT DOWN A LINE^Down a Line^^A^^^^^^^^
"KRN",101,8321,20)
D DOWN^VALM40
"KRN",101,8321,99)
64718,50581
"KRN",101,8322,-1)
0^10
"KRN",101,8322,0)
PSO PATIENT COMMENT UP A LINE^Up a Line^^A^^^^^^^^
"KRN",101,8322,20)
D UP^VALM40
"KRN",101,8322,99)
64718,50581
"KRN",101,8323,-1)
0^9
"KRN",101,8323,0)
PSO PATIENT COMMENT PREVIOUS SCREEN^Previous Screen^^A^^^^^^^^
"KRN",101,8323,20)
D PREV^VALM4
"KRN",101,8323,99)
64718,50581
"KRN",101,8324,-1)
0^8
"KRN",101,8324,0)
PSO PATIENT COMMENT NEXT SCREEN^Next Screen^^A^^^^^^^^
"KRN",101,8324,20)
D NEXT^VALM4
"KRN",101,8324,99)
64718,50581
"KRN",101,8325,-1)
0^5
"KRN",101,8325,0)
PSO PATIENT COMMENT HIDDEN MENU^Patient Comment Hidden Actions^^M^^^^^^^^
"KRN",101,8325,10,0)
^101.01PA^4^4
"KRN",101,8325,10,1,0)
8321^DN^^
"KRN",101,8325,10,1,"^")
PSO PATIENT COMMENT DOWN A LINE
"KRN",101,8325,10,2,0)
8322^UP^^
"KRN",101,8325,10,2,"^")
PSO PATIENT COMMENT UP A LINE
"KRN",101,8325,10,3,0)
8323^-^^
"KRN",101,8325,10,3,"^")
PSO PATIENT COMMENT PREVIOUS SCREEN
"KRN",101,8325,10,4,0)
8324^+^^
"KRN",101,8325,10,4,"^")
PSO PATIENT COMMENT NEXT SCREEN
"KRN",101,8325,99)
64718,50581
"KRN",409.61,787,-1)
0^1
"KRN",409.61,787,0)
PSO PATIENT COMMENT^1^^80^5^20^0^1^^PSO PATIENT COMMENT MENU^ePharmacy Patient Comment^1^^1
"KRN",409.61,787,1)
^PSO PATIENT COMMENT HIDDEN MENU
"KRN",409.61,787,"ARRAY")
 ^TMP("PSOPTC0",$J)
"KRN",409.61,787,"COL",0)
^409.621^1^1
"KRN",409.61,787,"COL",1,0)
COMMENT^3^76^COMMENT
"KRN",409.61,787,"COL","B","COMMENT",1)

"KRN",409.61,787,"FNL")
D EXIT^PSOPTC0
"KRN",409.61,787,"HDR")
D HDR^PSOPTC0
"KRN",409.61,787,"HLP")
D HELP^PSOPTC0
"KRN",409.61,787,"INIT")
D INIT^PSOPTC0
"MBREQ")
1
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",170,-1)
1^1
"PKG",170,0)
OUTPATIENT PHARMACY^PSO^OUTPATIENT LABELS, PROFILE, INVENTORY, PRESCRIPTIONS
"PKG",170,22,0)
^9.49I^1^1
"PKG",170,22,1,0)
7.0^2971216^2981113^1
"PKG",170,22,1,"PAH",1,0)
482^3180620^520824633
"PKG",170,22,1,"PAH",1,1,0)
^^1^1^3180620
"PKG",170,22,1,"PAH",1,1,1,0)
MCCF EDI TAS EPHARMACY BUILDS 3 & 4
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
19
"RTN","PSOBPSSL")
0^13^B94150549
"RTN","PSOBPSSL",1,0)
PSOBPSSL ;ALB/EWL - ePharmacy Site Parameters Definition ;03/20/2013
"RTN","PSOBPSSL",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**421,427,482**;DEC 1997;Build 44
"RTN","PSOBPSSL",3,0)
 ;
"RTN","PSOBPSSL",4,0)
 ; This routine is called from PSOBPSSP from the DP - Display Site Parameters 
"RTN","PSOBPSSL",5,0)
 ; action item.  That is the only way this routine should be entered.
"RTN","PSOBPSSL",6,0)
 ;
"RTN","PSOBPSSL",7,0)
 ; ICR Calls 
"RTN","PSOBPSSL",8,0)
 ;   ICR  Type       Description
"RTN","PSOBPSSL",9,0)
 ; -----  ---------  ---------------------------
"RTN","PSOBPSSL",10,0)
 ; n/a
"RTN","PSOBPSSL",11,0)
 ;
"RTN","PSOBPSSL",12,0)
 ; Other Calls
"RTN","PSOBPSSL",13,0)
 ; ----------------
"RTN","PSOBPSSL",14,0)
 ; DIV^PSOBPSSP
"RTN","PSOBPSSL",15,0)
 Q
"RTN","PSOBPSSL",16,0)
EN ; Entry point for PSO EPHARM PARAMS LIST List Manager screen
"RTN","PSOBPSSL",17,0)
 ;
"RTN","PSOBPSSL",18,0)
 ; PSODIV is the IEN of the initially selected division. Set by ^PSOLSET.
"RTN","PSOBPSSL",19,0)
 ;     Normally not used, only used if this routine is called directly.
"RTN","PSOBPSSL",20,0)
 ; PSODIVS is an array which will contain the divisions to be listed
"RTN","PSOBPSSL",21,0)
 ; PSODIVS will be formatted as follows:
"RTN","PSOBPSSL",22,0)
 ;     The root - PSODIVS will either be a null or contain "ALL"
"RTN","PSOBPSSL",23,0)
 ;     PSODIVS(#) - the # is the ien in file 52.86
"RTN","PSOBPSSL",24,0)
 ;          PSODIVS(#) - value --> IEN^SiteName - IEN from file 52.86
"RTN","PSOBPSSL",25,0)
 ;
"RTN","PSOBPSSL",26,0)
 N PSODIV,PSODIVS
"RTN","PSOBPSSL",27,0)
 ;
"RTN","PSOBPSSL",28,0)
 ; Launch the list manager screen
"RTN","PSOBPSSL",29,0)
 D EN^VALM("PSO EPHARM SITE PARAMS LIST")
"RTN","PSOBPSSL",30,0)
 G EXIT
"RTN","PSOBPSSL",31,0)
 ;
"RTN","PSOBPSSL",32,0)
HDR ; -- header code -- PSO EPHARM SITE PARAMS LIST
"RTN","PSOBPSSL",33,0)
 S VALMHDR(1)=$$SITES(.PSODIVS)
"RTN","PSOBPSSL",34,0)
 S VALMHDR(1)="Pharmacy Division"_$S(VALMHDR(1)[", ":"s: ",1:": ")_VALMHDR(1)
"RTN","PSOBPSSL",35,0)
 I $L(VALMHDR(1))>80 S $E(VALMHDR(1),78,999)="..."
"RTN","PSOBPSSL",36,0)
 S VALMHDR(2)="Site parameter settings for one or more Pharmacy Divisions"
"RTN","PSOBPSSL",37,0)
 Q
"RTN","PSOBPSSL",38,0)
 ;
"RTN","PSOBPSSL",39,0)
INIT ; -- init variables and list array -- PSO EPHARM SITE PARAMS LIST
"RTN","PSOBPSSL",40,0)
 ; PSODIVS is an array which will contain the divisions to be listed (see EN tag)
"RTN","PSOBPSSL",41,0)
 ; LINECT - keeps track of the line count in the display list
"RTN","PSOBPSSL",42,0)
 ; IEN - IEN of file 52.86 (Site Parameters)
"RTN","PSOBPSSL",43,0)
 ; LMARRAY - List Manager Array Name
"RTN","PSOBPSSL",44,0)
 N LMARRAY,IEN,LINECT
"RTN","PSOBPSSL",45,0)
 ;
"RTN","PSOBPSSL",46,0)
 ; Initialize the Line Counter
"RTN","PSOBPSSL",47,0)
 S LINECT=0
"RTN","PSOBPSSL",48,0)
 ;
"RTN","PSOBPSSL",49,0)
 ; Get list of sites to display
"RTN","PSOBPSSL",50,0)
 W ! D SITEPICK(.PSODIVS)
"RTN","PSOBPSSL",51,0)
 ;
"RTN","PSOBPSSL",52,0)
 ; Quit if no sites selected
"RTN","PSOBPSSL",53,0)
 I ('$D(PSODIVS))!($G(PSODIVS)="^") S VALMQUIT=1 Q
"RTN","PSOBPSSL",54,0)
 D CLEAN^VALM10
"RTN","PSOBPSSL",55,0)
 ;
"RTN","PSOBPSSL",56,0)
 ; This is the List Manager Array
"RTN","PSOBPSSL",57,0)
 S LMARRAY=$NA(^TMP("PSOBPSSL",$J)) K @LMARRAY
"RTN","PSOBPSSL",58,0)
 ;
"RTN","PSOBPSSL",59,0)
 ; Process if one or more but not "ALL" sites have been selected
"RTN","PSOBPSSL",60,0)
 I $G(PSODIVS)'="ALL" D
"RTN","PSOBPSSL",61,0)
 . S IEN=0 F  S IEN=$O(PSODIVS(IEN)) Q:'IEN  D GETDATA(IEN,LMARRAY,.LINECT)
"RTN","PSOBPSSL",62,0)
 ;
"RTN","PSOBPSSL",63,0)
 ; Process if "ALL" sites have been selected
"RTN","PSOBPSSL",64,0)
 I $G(PSODIVS)="ALL" D
"RTN","PSOBPSSL",65,0)
 . S IEN=0 F  S IEN=$O(^PS(52.86,IEN)) Q:'IEN  D GETDATA(IEN,LMARRAY,.LINECT)
"RTN","PSOBPSSL",66,0)
 S VALMCNT=LINECT
"RTN","PSOBPSSL",67,0)
 Q
"RTN","PSOBPSSL",68,0)
HELP ; -- help code -- PSO EPHARM MULTI SITE PARAMS
"RTN","PSOBPSSL",69,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","PSOBPSSL",70,0)
 Q
"RTN","PSOBPSSL",71,0)
 ;
"RTN","PSOBPSSL",72,0)
EXPND ; -- expand code
"RTN","PSOBPSSL",73,0)
 Q
"RTN","PSOBPSSL",74,0)
 ;
"RTN","PSOBPSSL",75,0)
EXIT ; -- exit code
"RTN","PSOBPSSL",76,0)
 K PSODIVS,^TMP("PSOBPSSL",$J)
"RTN","PSOBPSSL",77,0)
 Q
"RTN","PSOBPSSL",78,0)
 ;
"RTN","PSOBPSSL",79,0)
SITEPICK(DIVS) ; Get the list of sites to display
"RTN","PSOBPSSL",80,0)
 ; Cloned from SEL^PSOREJU1 with changes for Site Parameter List
"RTN","PSOBPSSL",81,0)
 ;
"RTN","PSOBPSSL",82,0)
 ; Input Parameter
"RTN","PSOBPSSL",83,0)
 ; DIVS - is passed by reference and will hold the set of divisions to process
"RTN","PSOBPSSL",84,0)
 ;
"RTN","PSOBPSSL",85,0)
 ; Local Variables
"RTN","PSOBPSSL",86,0)
 ; QT - used to control when to exit 
"RTN","PSOBPSSL",87,0)
 N QT
"RTN","PSOBPSSL",88,0)
 ;
"RTN","PSOBPSSL",89,0)
 ; Variables used by ^DIC
"RTN","PSOBPSSL",90,0)
 N DIC,DTOUT,DUOUT,Y,X
"RTN","PSOBPSSL",91,0)
 ;
"RTN","PSOBPSSL",92,0)
 ; Instructional message
"RTN","PSOBPSSL",93,0)
 W !!,"You may select a single or multiple Divisions,"
"RTN","PSOBPSSL",94,0)
 W !,"or enter ^ALL to select all Divisions.",!
"RTN","PSOBPSSL",95,0)
 ;
"RTN","PSOBPSSL",96,0)
 ; Select the divisions to display from 52.86
"RTN","PSOBPSSL",97,0)
 K DIVS S DIC="^PS(52.86,",DIC(0)="QEZAM"
"RTN","PSOBPSSL",98,0)
 S DIC("A")="Select a Division to display: "
"RTN","PSOBPSSL",99,0)
 F  D ^DIC Q:X=""  D  Q:$G(QT)
"RTN","PSOBPSSL",100,0)
 . I $$UP^XLFSTR(X)="^ALL" K DIVS S DIVS="ALL",QT=1 Q
"RTN","PSOBPSSL",101,0)
 . I $G(DTOUT)!$G(DUOUT) K DIVS S DIVS="^",QT=1 Q
"RTN","PSOBPSSL",102,0)
 . W "   ",$P(Y,"^",2),$S($D(DIVS(+Y)):"       (already selected)",1:"")
"RTN","PSOBPSSL",103,0)
 . W ! S DIVS(+Y)="",DIC("A")="ANOTHER ONE: " K DIC("B")
"RTN","PSOBPSSL",104,0)
 Q
"RTN","PSOBPSSL",105,0)
 ;
"RTN","PSOBPSSL",106,0)
SITES(DIVS) ; - Returns the list of selected Pharmacy Divisions
"RTN","PSOBPSSL",107,0)
 N SITE,SITES,NAME,PSITE S SITES=""
"RTN","PSOBPSSL",108,0)
 ; DIVS - array identifying the sites being processed.
"RTN","PSOBPSSL",109,0)
 ; SITE - individual PS site numbers IN FILE 52.86
"RTN","PSOBPSSL",110,0)
 ; NAME - division name from file 4
"RTN","PSOBPSSL",111,0)
 ; SITES - comma delimited site names
"RTN","PSOBPSSL",112,0)
 ;
"RTN","PSOBPSSL",113,0)
 ; Create a string of ^ delimited division names.
"RTN","PSOBPSSL",114,0)
 I '$D(DIVS) Q ""
"RTN","PSOBPSSL",115,0)
 I $G(DIVS)="ALL" Q "ALL"
"RTN","PSOBPSSL",116,0)
 ;
"RTN","PSOBPSSL",117,0)
 ; Create a string of ^ delimited division names.
"RTN","PSOBPSSL",118,0)
 S SITE=0,SITES="" F  S SITE=$O(DIVS(SITE)) Q:'SITE  D
"RTN","PSOBPSSL",119,0)
 . S NAME=$$GET1^DIQ(52.86,SITE_",",.01,"E")
"RTN","PSOBPSSL",120,0)
 . S DIVS(SITE)=SITE_U_NAME
"RTN","PSOBPSSL",121,0)
 . S SITES=SITES_$S(SITES]"":", ",1:"")_NAME
"RTN","PSOBPSSL",122,0)
 Q SITES
"RTN","PSOBPSSL",123,0)
 ;
"RTN","PSOBPSSL",124,0)
GETDATA(IEN,DATA,NXTLINE) ; Adds and formats data from one Pharmacy Division
"RTN","PSOBPSSL",125,0)
 ; This may be called multiple times when displaying multiple divisions
"RTN","PSOBPSSL",126,0)
 ; This is called by PSOBPSSP
"RTN","PSOBPSSL",127,0)
 ;
"RTN","PSOBPSSL",128,0)
 ; INPUT PARAMETERS
"RTN","PSOBPSSL",129,0)
 ; IEN - Site IEN from 52.86
"RTN","PSOBPSSL",130,0)
 ; DATA - List Manager Array name
"RTN","PSOBPSSL",131,0)
 ; NXTLINE - output parameter - returns line counter/number of lines in list
"RTN","PSOBPSSL",132,0)
 ;
"RTN","PSOBPSSL",133,0)
 ; check parameters
"RTN","PSOBPSSL",134,0)
 I '$G(IEN) Q 0 ; No parent division passed
"RTN","PSOBPSSL",135,0)
 I $L($G(DATA))<1 Q 0 ; No array passed to the routine
"RTN","PSOBPSSL",136,0)
 I '$D(NXTLINE) Q 0 ; No line number passed must be >= 0
"RTN","PSOBPSSL",137,0)
 ;
"RTN","PSOBPSSL",138,0)
 ; LOCAL VARIABLES
"RTN","PSOBPSSL",139,0)
 ; PSOI - IEN/LOOP CONTROL while looping through array
"RTN","PSOBPSSL",140,0)
 ; GETS - Temp array for GETS^DIQ results
"RTN","PSOBPSSL",141,0)
 ; WLSTDAYS - Days to remain on worklist
"RTN","PSOBPSSL",142,0)
 ; AUTOSEND - Auto send - yes/no
"RTN","PSOBPSSL",143,0)
 ; REJEXPL - Reject code explanations text
"RTN","PSOBPSSL",144,0)
 ; THRESHLD - Threshold amount for fill prevention reject codes
"RTN","PSOBPSSL",145,0)
 ; GETS - array for output from LIST^DIC and processed codes
"RTN","PSOBPSSL",146,0)
 ; IORVON & IORVOFF are Kernel Video Variables used for List Manager formatting
"RTN","PSOBPSSL",147,0)
 ; PSOIGNORE - Ignore Threshold value
"RTN","PSOBPSSL",148,0)
 ;
"RTN","PSOBPSSL",149,0)
 N PSOI,GETS,WLSTDAYS,PAUSE,CODE,AUTOSEND,REJEXPL,THRESHLD,SITE,PSOIGNORE
"RTN","PSOBPSSL",150,0)
 ;
"RTN","PSOBPSSL",151,0)
 ; Get the high level site parameters
"RTN","PSOBPSSL",152,0)
 S SITE=$$GET1^DIQ(52.86,IEN_",",.01)
"RTN","PSOBPSSL",153,0)
 ; Site header
"RTN","PSOBPSSL",154,0)
 I NXTLINE'=0 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)=""
"RTN","PSOBPSSL",155,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="Pharmacy Division: "_$G(SITE)
"RTN","PSOBPSSL",156,0)
 D CNTRL^VALM10(NXTLINE,1,80,IORVON,IORVOFF)
"RTN","PSOBPSSL",157,0)
 ;
"RTN","PSOBPSSL",158,0)
 ; Display General Parameters
"RTN","PSOBPSSL",159,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  General Parameters"
"RTN","PSOBPSSL",160,0)
 D CNTRL^VALM10(NXTLINE,3,18,IOUON,IOUOFF)
"RTN","PSOBPSSL",161,0)
 ;
"RTN","PSOBPSSL",162,0)
 ; Get the site worklist days
"RTN","PSOBPSSL",163,0)
 S WLSTDAYS=$$GET1^DIQ(52.86,IEN_",",4)
"RTN","PSOBPSSL",164,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  Reject Worklist Days: "_$G(WLSTDAYS)
"RTN","PSOBPSSL",165,0)
 ;
"RTN","PSOBPSSL",166,0)
 ; Get the ePharmacy Response Pause
"RTN","PSOBPSSL",167,0)
 S PAUSE=$$GET1^DIQ(52.86,IEN_",",6)
"RTN","PSOBPSSL",168,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  ePharmacy Response Pause: "_$G(PAUSE)
"RTN","PSOBPSSL",169,0)
 ;
"RTN","PSOBPSSL",170,0)
 ; Get the Ignore Threshold
"RTN","PSOBPSSL",171,0)
 S PSOIGNORE=$$GET1^DIQ(52.86,IEN_",",7)
"RTN","PSOBPSSL",172,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  Ignore Threshold: "_$G(PSOIGNORE)
"RTN","PSOBPSSL",173,0)
 ;
"RTN","PSOBPSSL",174,0)
 ; Process the site transfer reject codes
"RTN","PSOBPSSL",175,0)
 ;
"RTN","PSOBPSSL",176,0)
 ; create header for transfer reject code section
"RTN","PSOBPSSL",177,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)=""
"RTN","PSOBPSSL",178,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  Transfer Reject Codes"
"RTN","PSOBPSSL",179,0)
 D CNTRL^VALM10(NXTLINE,3,21,IOUON,IOUOFF)
"RTN","PSOBPSSL",180,0)
 ;
"RTN","PSOBPSSL",181,0)
 ; Get the transfer reject codes
"RTN","PSOBPSSL",182,0)
 K GETS D LIST^DIC(52.8651,","_IEN_",","@;.01IE;1",,,,,,,,"GETS")
"RTN","PSOBPSSL",183,0)
 ;
"RTN","PSOBPSSL",184,0)
 ; create sub-header for transfer reject code section
"RTN","PSOBPSSL",185,0)
 I $D(GETS) D
"RTN","PSOBPSSL",186,0)
 . S NXTLINE=NXTLINE+1
"RTN","PSOBPSSL",187,0)
 . S @DATA@(NXTLINE,0)="  Code  Description                                                   Auto-Send"
"RTN","PSOBPSSL",188,0)
 . S NXTLINE=NXTLINE+1
"RTN","PSOBPSSL",189,0)
 . S @DATA@(NXTLINE,0)="  ----  ------------------------------------------------------------  ---------"
"RTN","PSOBPSSL",190,0)
 . ;
"RTN","PSOBPSSL",191,0)
 . ; Sort the output by external code
"RTN","PSOBPSSL",192,0)
 . S PSOI=0
"RTN","PSOBPSSL",193,0)
 . F  S PSOI=$O(GETS("DILIST","ID",PSOI)) Q:PSOI=""  D
"RTN","PSOBPSSL",194,0)
 . . ; Parse output from LIST^DIC and add to local array GETS as follows:
"RTN","PSOBPSSL",195,0)
 . . ;      GETS({external code})={external AUTO SEND}^{internal code}
"RTN","PSOBPSSL",196,0)
 . . S GETS(" "_GETS("DILIST","ID",PSOI,.01,"E"))=GETS("DILIST","ID",PSOI,1)_U_GETS("DILIST","ID",PSOI,.01,"I")
"RTN","PSOBPSSL",197,0)
 . . Q
"RTN","PSOBPSSL",198,0)
 . ; Kill the part of GETS no longer needed - from LIST^DIC
"RTN","PSOBPSSL",199,0)
 . K GETS("DILIST")
"RTN","PSOBPSSL",200,0)
 . ;
"RTN","PSOBPSSL",201,0)
 . ; process the transfer reject code body
"RTN","PSOBPSSL",202,0)
 . S PSOI="" F  S PSOI=$O(GETS(PSOI)) Q:PSOI=""  D
"RTN","PSOBPSSL",203,0)
 . . S CODE=PSOI,AUTOSEND=$P(GETS(PSOI),U,1)
"RTN","PSOBPSSL",204,0)
 . . ; Get reject explanation
"RTN","PSOBPSSL",205,0)
 . . S REJEXPL=$$GET1^DIQ(9002313.93,$P(GETS(PSOI),U,2)_",",.02)
"RTN","PSOBPSSL",206,0)
 . . ; Build the next list line
"RTN","PSOBPSSL",207,0)
 . . S NXTLINE=NXTLINE+1,$E(@DATA@(NXTLINE,0),3,6)=$J(CODE,4)
"RTN","PSOBPSSL",208,0)
 . . S $E(@DATA@(NXTLINE,0),9,68)=$E(REJEXPL,1,60)
"RTN","PSOBPSSL",209,0)
 . . S $E(@DATA@(NXTLINE,0),77,79)=$S(AUTOSEND="YES":"YES",1:" NO")
"RTN","PSOBPSSL",210,0)
 . Q
"RTN","PSOBPSSL",211,0)
 ;
"RTN","PSOBPSSL",212,0)
 ; process for no transfer reject codes
"RTN","PSOBPSSL",213,0)
 I '$D(GETS) S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  No transfer reject codes for this Pharmacy Division."
"RTN","PSOBPSSL",214,0)
 ;
"RTN","PSOBPSSL",215,0)
 ; Process the Reject Resolution Required Codes
"RTN","PSOBPSSL",216,0)
 ;
"RTN","PSOBPSSL",217,0)
 ; create header for the Reject Resolution Required Codes
"RTN","PSOBPSSL",218,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)=""
"RTN","PSOBPSSL",219,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  Reject Resolution Required Codes"
"RTN","PSOBPSSL",220,0)
 D CNTRL^VALM10(NXTLINE,3,32,IOUON,IOUOFF)
"RTN","PSOBPSSL",221,0)
 ;
"RTN","PSOBPSSL",222,0)
 ; Get the transfer reject codes
"RTN","PSOBPSSL",223,0)
 K GETS D LIST^DIC(52.865,","_IEN_",","@;.01IE;.02",,,,,,,,"GETS")
"RTN","PSOBPSSL",224,0)
 ;
"RTN","PSOBPSSL",225,0)
 ; create sub-header for the Reject Resolution Required Codes
"RTN","PSOBPSSL",226,0)
 I $D(GETS) D
"RTN","PSOBPSSL",227,0)
 . S NXTLINE=NXTLINE+1
"RTN","PSOBPSSL",228,0)
 . S @DATA@(NXTLINE,0)="  Code  Description                                                   Threshold"
"RTN","PSOBPSSL",229,0)
 . S NXTLINE=NXTLINE+1
"RTN","PSOBPSSL",230,0)
 . S @DATA@(NXTLINE,0)="  ----  ------------------------------------------------------------  ---------"
"RTN","PSOBPSSL",231,0)
 . ;
"RTN","PSOBPSSL",232,0)
 . ; Sort the output by external code
"RTN","PSOBPSSL",233,0)
 . S PSOI=0
"RTN","PSOBPSSL",234,0)
 . F  S PSOI=$O(GETS("DILIST","ID",PSOI)) Q:PSOI=""  D
"RTN","PSOBPSSL",235,0)
 . . ; Parse output from LIST^DIC and add to local array GETS as follows:
"RTN","PSOBPSSL",236,0)
 . . ;      GETS({external code})={external DOLLAR THRESHOLD}^{internal code}
"RTN","PSOBPSSL",237,0)
 . . S GETS(" "_GETS("DILIST","ID",PSOI,.01,"E"))=GETS("DILIST","ID",PSOI,.02)_U_GETS("DILIST","ID",PSOI,.01,"I")
"RTN","PSOBPSSL",238,0)
 . . Q
"RTN","PSOBPSSL",239,0)
 . ; Kill the part of GETS no longer needed - from LIST^DIC
"RTN","PSOBPSSL",240,0)
 . K GETS("DILIST")
"RTN","PSOBPSSL",241,0)
 . ;
"RTN","PSOBPSSL",242,0)
 . ; process the Reject Resolution Required code body
"RTN","PSOBPSSL",243,0)
 . S PSOI="" F  S PSOI=$O(GETS(PSOI)) Q:PSOI=""  D
"RTN","PSOBPSSL",244,0)
 . . S CODE=PSOI,THRESHLD=$P(GETS(PSOI),U,1)
"RTN","PSOBPSSL",245,0)
 . . ; Get reject explanation
"RTN","PSOBPSSL",246,0)
 . . S REJEXPL=$$GET1^DIQ(9002313.93,$P(GETS(PSOI),U,2)_",",.02)
"RTN","PSOBPSSL",247,0)
 . . ;
"RTN","PSOBPSSL",248,0)
 . . ; Build the next list line
"RTN","PSOBPSSL",249,0)
 . . S NXTLINE=NXTLINE+1,$E(@DATA@(NXTLINE,0),3,6)=$J(CODE,4)
"RTN","PSOBPSSL",250,0)
 . . S $E(@DATA@(NXTLINE,0),9,68)=$E(REJEXPL,1,60)
"RTN","PSOBPSSL",251,0)
 . . S THRESHLD=+THRESHLD,THRESHLD=$J("$"_$FN(THRESHLD,",",0),10)
"RTN","PSOBPSSL",252,0)
 . . S $E(@DATA@(NXTLINE,0),70,79)=THRESHLD
"RTN","PSOBPSSL",253,0)
 . Q
"RTN","PSOBPSSL",254,0)
 ;
"RTN","PSOBPSSL",255,0)
 ; process for no Reject Resolution Required Codes
"RTN","PSOBPSSL",256,0)
 I '$D(GETS) S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  No Reject Resolution Required Codes for this Pharmacy Division."
"RTN","PSOBPSSL",257,0)
 Q
"RTN","PSOBPSSL",258,0)
 ;
"RTN","PSOBPSSL",259,0)
TRCMSG ; Transfer Reject Informational Message (called by PSOBPSSP, which was too big)
"RTN","PSOBPSSL",260,0)
 W !!,"All transfer rejects will automatically be placed on the Third Party Payer"
"RTN","PSOBPSSL",261,0)
 W !,"Rejects - Worklist if the reject code is defined in the site parameter file"
"RTN","PSOBPSSL",262,0)
 W !,"and the AUTO SEND parameter is set to yes. The OPECC must manually transfer"
"RTN","PSOBPSSL",263,0)
 W !,"the reject if the reject code is defined in the site parameter file"
"RTN","PSOBPSSL",264,0)
 W !,"and the AUTO SEND parameter is set to no. (To be used when Pharmacy can"
"RTN","PSOBPSSL",265,0)
 W !,"possibly correct a locally filled Rx.)"
"RTN","PSOBPSSL",266,0)
 Q
"RTN","PSOBPSSL",267,0)
 ;
"RTN","PSOBPSSL",268,0)
RRRMSG ; Reject Resolution Required Informational Message (called by PSOBPSSP, which was too big)
"RTN","PSOBPSSL",269,0)
 W !!,"All Reject Resolution Required reject codes will automatically be placed"
"RTN","PSOBPSSL",270,0)
 W !,"on the Third Party Payer Rejects - Worklist. This parameter applies to"
"RTN","PSOBPSSL",271,0)
 W !,"rejects for original unreleased fills only. Prescriptions will not be filled"
"RTN","PSOBPSSL",272,0)
 W !,"until the rejects identified by the Reject Resolution parameter are resolved."
"RTN","PSOBPSSL",273,0)
 Q
"RTN","PSOBPSSP")
0^14^B316836860
"RTN","PSOBPSSP",1,0)
PSOBPSSP ;BIRM/LE - ePharmacy Site Parameters Definition ;04/28/08
"RTN","PSOBPSSP",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**289,385,421,427,482**;DEC 1997;Build 44
"RTN","PSOBPSSP",3,0)
 ;
"RTN","PSOBPSSP",4,0)
 ; Patch 421 replaced all logic in this module as the original 
"RTN","PSOBPSSP",5,0)
 ; screen has been replaced by a List Manager screen.
"RTN","PSOBPSSP",6,0)
 ;  
"RTN","PSOBPSSP",7,0)
 ; GETDATA^PSOBPSSP - Populates the List Manager Array
"RTN","PSOBPSSP",8,0)
 ; EN^PSOBPSSL - Site parameter lister
"RTN","PSOBPSSP",9,0)
 ;         
"RTN","PSOBPSSP",10,0)
EN ; - Prompt for ePharmacy Site Parameters
"RTN","PSOBPSSP",11,0)
 ;
"RTN","PSOBPSSP",12,0)
 ; PSODIV is the IEN of the initially selected division
"RTN","PSOBPSSP",13,0)
 ; PSOBPSDV is the IEN of the current ePharmacy division being edited.
"RTN","PSOBPSSP",14,0)
 ; PSOSITE & PSOPAR are populated by the call to ^PSOLSET in DIV
"RTN","PSOBPSSP",15,0)
 ;
"RTN","PSOBPSSP",16,0)
 ; LOCK THE SITE PARAMETER FILE
"RTN","PSOBPSSP",17,0)
 L +^PS(52.86,"LOCK"):0
"RTN","PSOBPSSP",18,0)
 I '$T D  Q
"RTN","PSOBPSSP",19,0)
 . W !!?2,"Sorry, another user is currently using the ePharmacy Site Parameters option."
"RTN","PSOBPSSP",20,0)
 . W !?2,"Please try again later."
"RTN","PSOBPSSP",21,0)
 . D PAUSE^VALM1
"RTN","PSOBPSSP",22,0)
 . Q
"RTN","PSOBPSSP",23,0)
 ;
"RTN","PSOBPSSP",24,0)
 N PSODIV,PSOBPSDV,PSOSITE,PSOPAR
"RTN","PSOBPSSP",25,0)
 D DIV
"RTN","PSOBPSSP",26,0)
 I '$G(PSOSITE) L -^PS(52.86,"LOCK") Q
"RTN","PSOBPSSP",27,0)
 ;
"RTN","PSOBPSSP",28,0)
 ; Informational Messages
"RTN","PSOBPSSP",29,0)
 D TRCMSG^PSOBPSSL,RRRMSG^PSOBPSSL W !
"RTN","PSOBPSSP",30,0)
 ;
"RTN","PSOBPSSP",31,0)
 D EN^VALM("PSO EPHARM SITE PARAMS")
"RTN","PSOBPSSP",32,0)
 L -^PS(52.86,"LOCK")       ; option level unlock
"RTN","PSOBPSSP",33,0)
 Q
"RTN","PSOBPSSP",34,0)
 ;
"RTN","PSOBPSSP",35,0)
HDR ; -- header code -- PSO EPHARM SITE PARAMS
"RTN","PSOBPSSP",36,0)
 S VALMHDR(1)="Pharmacy Division: "_$$GET1^DIQ(52.86,PSOBPSDV_",",.01)
"RTN","PSOBPSSP",37,0)
 Q
"RTN","PSOBPSSP",38,0)
 ;
"RTN","PSOBPSSP",39,0)
INIT ; -- init variables and list array -- PSO EPHARM SITE PARAMS
"RTN","PSOBPSSP",40,0)
 ; PSOBPSDV is the IEN of the current division being edited. (NEWed in EN)
"RTN","PSOBPSSP",41,0)
 ; Get the division number
"RTN","PSOBPSSP",42,0)
 K PSOBPSDV D GETDIV(.PSOBPSDV)
"RTN","PSOBPSSP",43,0)
 I '$D(PSOBPSDV) S VALMQUIT=1 Q
"RTN","PSOBPSSP",44,0)
 D RBUILD
"RTN","PSOBPSSP",45,0)
 Q
"RTN","PSOBPSSP",46,0)
 ;
"RTN","PSOBPSSP",47,0)
HELP ; -- help code -- PSO EPHARM SITE PARAMS
"RTN","PSOBPSSP",48,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","PSOBPSSP",49,0)
 Q
"RTN","PSOBPSSP",50,0)
 ;
"RTN","PSOBPSSP",51,0)
EXIT ; -- exit code
"RTN","PSOBPSSP",52,0)
 ;
"RTN","PSOBPSSP",53,0)
 K PSOBPSDV,PSODIV,^TMP("PSOBPSSP",$J)
"RTN","PSOBPSSP",54,0)
 Q
"RTN","PSOBPSSP",55,0)
 ;
"RTN","PSOBPSSP",56,0)
EXPND ; -- expand code
"RTN","PSOBPSSP",57,0)
 Q
"RTN","PSOBPSSP",58,0)
 ;
"RTN","PSOBPSSP",59,0)
GETDIV(DIV) ; Gets a single division.  If it does not exist, the new division is created
"RTN","PSOBPSSP",60,0)
 ; and the user is prompted for worklist days.
"RTN","PSOBPSSP",61,0)
 ; Called by INIT on entry and when Change Division action is selected
"RTN","PSOBPSSP",62,0)
 ; DIV - ePharmacy site parameter IEN - Parameters for division pointed to in .01 field
"RTN","PSOBPSSP",63,0)
 ;
"RTN","PSOBPSSP",64,0)
 N DIC,DTOUT,DUOUT,DLAYGO,X,Y ; Variables for ^DIC
"RTN","PSOBPSSP",65,0)
 S DIC("A")="Select a Pharmacy Division: " S DIC=52.86,DIC(0)="AEBQL",DLAYGO=52.86 D ^DIC
"RTN","PSOBPSSP",66,0)
 Q:($G(DTOUT))!($D(DUOUT)!(Y<0))
"RTN","PSOBPSSP",67,0)
 S DIV=$P(Y,U,1)
"RTN","PSOBPSSP",68,0)
 Q
"RTN","PSOBPSSP",69,0)
 ;
"RTN","PSOBPSSP",70,0)
BLDLIST(DIV) ; Rebuilds the List Manager array
"RTN","PSOBPSSP",71,0)
 ;
"RTN","PSOBPSSP",72,0)
 ; DIV is the IEN of the current division being edited. (NEWed in EN)
"RTN","PSOBPSSP",73,0)
 ; LINECT - keeps track of the line count in the display list
"RTN","PSOBPSSP",74,0)
 ; LMARRAY - List Manager Array Name
"RTN","PSOBPSSP",75,0)
 ;
"RTN","PSOBPSSP",76,0)
 N LMARRAY,LINECT
"RTN","PSOBPSSP",77,0)
 ;
"RTN","PSOBPSSP",78,0)
 ; Initialize the Line Counter
"RTN","PSOBPSSP",79,0)
 S LINECT=0
"RTN","PSOBPSSP",80,0)
 ;
"RTN","PSOBPSSP",81,0)
 ; This is the List Manager Array
"RTN","PSOBPSSP",82,0)
 D CLEAN^VALM10
"RTN","PSOBPSSP",83,0)
 S LMARRAY=$NA(^TMP("PSOBPSSP",$J)) K @LMARRAY
"RTN","PSOBPSSP",84,0)
 ;
"RTN","PSOBPSSP",85,0)
 ; Get the current data for the selected division
"RTN","PSOBPSSP",86,0)
 D GETDATA^PSOBPSSL(DIV,LMARRAY,.LINECT)
"RTN","PSOBPSSP",87,0)
 S VALMCNT=LINECT
"RTN","PSOBPSSP",88,0)
 Q
"RTN","PSOBPSSP",89,0)
 ;
"RTN","PSOBPSSP",90,0)
DIV ; Establish the PSO Site information - Also called by PSOBPSSL Division/Site selection
"RTN","PSOBPSSP",91,0)
 ;
"RTN","PSOBPSSP",92,0)
 ; PSOSITE and PSOPAR are set by ^PSOLSET - Declared in EN of calling routines
"RTN","PSOBPSSP",93,0)
 ;
"RTN","PSOBPSSP",94,0)
 I '$G(PSOSITE) D ^PSOLSET I '$D(PSOPAR) W $C(7),!!,"Pharmacy Division Must be Selected!",! Q
"RTN","PSOBPSSP",95,0)
 W !!
"RTN","PSOBPSSP",96,0)
 Q
"RTN","PSOBPSSP",97,0)
 ;
"RTN","PSOBPSSP",98,0)
CPYSITES(DIVS,CTR,CDIV,SCR) ; Procedure for picking sites for the copy function.
"RTN","PSOBPSSP",99,0)
 ; Cloned from SEL^PSOREJU1 with changes for Site Parameter Copy action
"RTN","PSOBPSSP",100,0)
 ; 
"RTN","PSOBPSSP",101,0)
 ; Input Parameters
"RTN","PSOBPSSP",102,0)
 ; DIVS - passed by reference and will hold the divisions to process
"RTN","PSOBPSSP",103,0)
 ; CTR - passed by reference, returns the number of divisions picked.
"RTN","PSOBPSSP",104,0)
 ; CDIV - source site parameter pharmacy division IEN (ptr to file 59).
"RTN","PSOBPSSP",105,0)
 ; SCR - Screen to prevent source division from being selected.
"RTN","PSOBPSSP",106,0)
 ;
"RTN","PSOBPSSP",107,0)
 ; Variables used by ^DIC
"RTN","PSOBPSSP",108,0)
 N DIC,DTOUT,DUOUT,Y,X
"RTN","PSOBPSSP",109,0)
 ;
"RTN","PSOBPSSP",110,0)
 ; Local Variables
"RTN","PSOBPSSP",111,0)
 ; PSOI - Pharmacy IEN from file 59
"RTN","PSOBPSSP",112,0)
 ; QT - used to control when to exit
"RTN","PSOBPSSP",113,0)
 ; CTR -counts the number of sites selected 
"RTN","PSOBPSSP",114,0)
 N PSOI,QT
"RTN","PSOBPSSP",115,0)
 ;
"RTN","PSOBPSSP",116,0)
 S (QT,CTR)=0
"RTN","PSOBPSSP",117,0)
 ;
"RTN","PSOBPSSP",118,0)
 ; Instructional message
"RTN","PSOBPSSP",119,0)
 W !,"You may select a single or multiple Pharmacy Divisions,"
"RTN","PSOBPSSP",120,0)
 W !,"or enter ^ALL to select all Pharmacy Divisions.",!
"RTN","PSOBPSSP",121,0)
 ;
"RTN","PSOBPSSP",122,0)
 ; Set up ^DIC call
"RTN","PSOBPSSP",123,0)
 K DIVS S DIC="^PS(59,",DIC(0)="QEZAM"
"RTN","PSOBPSSP",124,0)
 S DIC("A")="Select a Pharmacy Division to be overwritten: "
"RTN","PSOBPSSP",125,0)
 S DIC("S")=$G(SCR)
"RTN","PSOBPSSP",126,0)
 ; 
"RTN","PSOBPSSP",127,0)
 ; Loop through Selections
"RTN","PSOBPSSP",128,0)
 F  D ^DIC Q:X=""!QT  D  Q:QT
"RTN","PSOBPSSP",129,0)
 . ;
"RTN","PSOBPSSP",130,0)
 . ; Special processing if ^ALL was entered
"RTN","PSOBPSSP",131,0)
 . I $$UP^XLFSTR(X)="^ALL" K DIVS S CTR=0,DIVS="ALL",QT=1 D  Q
"RTN","PSOBPSSP",132,0)
 . . S PSOI=0 F  S PSOI=$O(^PS(59,PSOI)) Q:'PSOI  D:PSOI'=CDIV
"RTN","PSOBPSSP",133,0)
 . . . S CTR=CTR+1,DIVS(PSOI)=$$GET1^DIQ(59,PSOI,.01)
"RTN","PSOBPSSP",134,0)
 . ;
"RTN","PSOBPSSP",135,0)
 . ; Quit if timeout or a ^
"RTN","PSOBPSSP",136,0)
 . I $G(DTOUT)!$G(DUOUT) K DIVS S DIVS="^",QT=1 Q
"RTN","PSOBPSSP",137,0)
 . ;
"RTN","PSOBPSSP",138,0)
 . ; do not save if the source division is picked
"RTN","PSOBPSSP",139,0)
 . I +Y=CDIV W !,"The source Pharmacy Division cannot be copied to itself."
"RTN","PSOBPSSP",140,0)
 . ;
"RTN","PSOBPSSP",141,0)
 . ; Do not allow duplicate selections
"RTN","PSOBPSSP",142,0)
 . I +Y'=CDIV,$D(DIVS(+Y)) W $P(Y,U,2)_" is already selected." Q
"RTN","PSOBPSSP",143,0)
 . ;
"RTN","PSOBPSSP",144,0)
 . ; Processing for selected divisions
"RTN","PSOBPSSP",145,0)
 . S DIVS(+Y)=$P(Y,U,2),CTR=CTR+1
"RTN","PSOBPSSP",146,0)
 . ;
"RTN","PSOBPSSP",147,0)
 . ; prompt for another division
"RTN","PSOBPSSP",148,0)
 . W ! S DIC("A")="ANOTHER ONE: " K DIC("B")
"RTN","PSOBPSSP",149,0)
 . Q
"RTN","PSOBPSSP",150,0)
 ;
"RTN","PSOBPSSP",151,0)
 I '$D(DIVS) S DIVS="^"
"RTN","PSOBPSSP",152,0)
 Q
"RTN","PSOBPSSP",153,0)
 ;
"RTN","PSOBPSSP",154,0)
COPYSP ; Action for CP Copy Parameters
"RTN","PSOBPSSP",155,0)
 ; From EN
"RTN","PSOBPSSP",156,0)
 ; PSOBPSDV - source site parameter IEN of 52.86 - defined in EN
"RTN","PSOBPSSP",157,0)
 ;
"RTN","PSOBPSSP",158,0)
 ; Local Variables
"RTN","PSOBPSSP",159,0)
 ; CDIV - current site parameter division to copy to
"RTN","PSOBPSSP",160,0)
 ; CPDIV - source site parameter pharmacy division IEN (ptr to file 59)
"RTN","PSOBPSSP",161,0)
 ; CPYDIVS - array pharmacy divisions where to copy parameters
"RTN","PSOBPSSP",162,0)
 ;     NOTE: The subscripts for CPYDIVS will be the selected IENS from file 59
"RTN","PSOBPSSP",163,0)
 ; CPYFDA - FDA array used in UPDATE^DIE calls
"RTN","PSOBPSSP",164,0)
 ; CPNAME - source site parameter pharmacy division name from file 59
"RTN","PSOBPSSP",165,0)
 ; DIVCT -  holds the return value of the number so sites picked when CPYSITES is called
"RTN","PSOBPSSP",166,0)
 ; IROOT - Returns new IEN after UPDATE^DIE
"RTN","PSOBPSSP",167,0)
 ; PARAMS - local array to hold the parameters from the source site
"RTN","PSOBPSSP",168,0)
 ; PSOI & PSOJ - loop counters
"RTN","PSOBPSSP",169,0)
 N CDIV,CPDIV,CPYFDA,CPYDIVS,CPNAME,DIVCT,IROOT,PARAMS,PSOI,PSOJ
"RTN","PSOBPSSP",170,0)
 ;
"RTN","PSOBPSSP",171,0)
 ; Used by ^DIK
"RTN","PSOBPSSP",172,0)
 N DIK,DA
"RTN","PSOBPSSP",173,0)
 ;
"RTN","PSOBPSSP",174,0)
 ; Used by ^DIR
"RTN","PSOBPSSP",175,0)
 N DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","PSOBPSSP",176,0)
 ;
"RTN","PSOBPSSP",177,0)
 ; Set Full Screen mode
"RTN","PSOBPSSP",178,0)
 D FULL^VALM1
"RTN","PSOBPSSP",179,0)
 ;
"RTN","PSOBPSSP",180,0)
 ; Get the current ePharmacy Site Parameter IEN and division name
"RTN","PSOBPSSP",181,0)
 S CPDIV=$$GET1^DIQ(52.86,PSOBPSDV_",",.01,"I")
"RTN","PSOBPSSP",182,0)
 S CPNAME=$$GET1^DIQ(52.86,PSOBPSDV_",",.01,"E")
"RTN","PSOBPSSP",183,0)
 ;
"RTN","PSOBPSSP",184,0)
 ; FIRST PART OF INSTRUCTION MESSAGE
"RTN","PSOBPSSP",185,0)
 W !!,"The parameters will be copied from "_CPNAME_" Division.",!
"RTN","PSOBPSSP",186,0)
 W !,"Select the Pharmacy Division(s) to overwrite."
"RTN","PSOBPSSP",187,0)
 ;
"RTN","PSOBPSSP",188,0)
 ; Select the desired divisions where to copy parameters
"RTN","PSOBPSSP",189,0)
 ;    The screen value ("I $QS($NA(^(0)),2)'="_CPDIV) will
"RTN","PSOBPSSP",190,0)
 ;    eliminate the source division from the copy to choices
"RTN","PSOBPSSP",191,0)
 D CPYSITES(.CPYDIVS,.DIVCT,CPDIV,"I $QS($NA(^(0)),2)'="_CPDIV)
"RTN","PSOBPSSP",192,0)
 ;
"RTN","PSOBPSSP",193,0)
 ; Quit if no divisions selected
"RTN","PSOBPSSP",194,0)
 I $D(CPYDIVS)<10!(+$G(DIVCT)=0) G EXITCPY
"RTN","PSOBPSSP",195,0)
 ;
"RTN","PSOBPSSP",196,0)
 ; Are you sure code
"RTN","PSOBPSSP",197,0)
 ;
"RTN","PSOBPSSP",198,0)
 ; Get and display current pharmacy name
"RTN","PSOBPSSP",199,0)
 S CPNAME=$$GET1^DIQ(52.86,PSOBPSDV_",",.01)
"RTN","PSOBPSSP",200,0)
 W !!,"The parameters from Pharmacy Division "_CPNAME
"RTN","PSOBPSSP",201,0)
 W !,"will overwrite the parameters in Pharmacy Division"_$S(DIVCT>1:"s:",1:":")
"RTN","PSOBPSSP",202,0)
 ;
"RTN","PSOBPSSP",203,0)
 ; Loop through all the divisions returned by CPYSITES and display their names
"RTN","PSOBPSSP",204,0)
 S PSOI=0 W ! F  S PSOI=$O(CPYDIVS(PSOI)) Q:'PSOI  W !,CPYDIVS(PSOI)
"RTN","PSOBPSSP",205,0)
 ;
"RTN","PSOBPSSP",206,0)
 ; Are you sure code
"RTN","PSOBPSSP",207,0)
 W !! S DIR(0)="Y",DIR("A")="Do you want to continue",DIR("B")="NO" D ^DIR
"RTN","PSOBPSSP",208,0)
 I ('Y)!($G(DUOUT))!($G(DTOUT)) G EXITCPY
"RTN","PSOBPSSP",209,0)
 ;
"RTN","PSOBPSSP",210,0)
 ; Load the source division parameters
"RTN","PSOBPSSP",211,0)
 D GETS^DIQ(52.86,PSOBPSDV_",","**","I","PARAMS")
"RTN","PSOBPSSP",212,0)
 ; Copy the division settings (except user updated by and date/times - these are triggered)
"RTN","PSOBPSSP",213,0)
 S PSOI=0 F  S PSOI=$O(CPYDIVS(PSOI)) Q:'PSOI  D
"RTN","PSOBPSSP",214,0)
 . ;
"RTN","PSOBPSSP",215,0)
 . ; If the parameters exist for this division, delete them
"RTN","PSOBPSSP",216,0)
 . S CDIV=0,CDIV=$O(^PS(52.86,"B",PSOI,CDIV)) ; Check B index for pharmacy division
"RTN","PSOBPSSP",217,0)
 . I CDIV S DA=CDIV,DIK="^PS(52.86," D ^DIK ; Delete parameters if they exist
"RTN","PSOBPSSP",218,0)
 . ;
"RTN","PSOBPSSP",219,0)
 . ; Create the FDA and file the general parameters
"RTN","PSOBPSSP",220,0)
 . K CPYFDA
"RTN","PSOBPSSP",221,0)
 . S CPYFDA(52.86,"+1,",.01)=PSOI
"RTN","PSOBPSSP",222,0)
 . S CPYFDA(52.86,"+1,",4)=+$G(PARAMS(52.86,PSOBPSDV_",",4,"I"))
"RTN","PSOBPSSP",223,0)
 . S CPYFDA(52.86,"+1,",6)=+$G(PARAMS(52.86,PSOBPSDV_",",6,"I"))
"RTN","PSOBPSSP",224,0)
 . I $G(PARAMS(52.86,PSOBPSDV_",",7,"I"))'="" D
"RTN","PSOBPSSP",225,0)
 . . S CPYFDA(52.86,"+1,",7)=+$G(PARAMS(52.86,PSOBPSDV_",",7,"I"))
"RTN","PSOBPSSP",226,0)
 . K IROOT D UPDATE^DIE(,"CPYFDA","IROOT") S CDIV=IROOT(1)
"RTN","PSOBPSSP",227,0)
 . ;
"RTN","PSOBPSSP",228,0)
 . ; Loop through and copy the transfer reject codes
"RTN","PSOBPSSP",229,0)
 . ; Create the FDA and UPDATE the subfile 52.8651
"RTN","PSOBPSSP",230,0)
 . I $D(PARAMS(52.8651)) S PSOJ=0 F  S PSOJ=$O(PARAMS(52.8651,PSOJ)) Q:'PSOJ  D
"RTN","PSOBPSSP",231,0)
 . . K CPYFDA
"RTN","PSOBPSSP",232,0)
 . . S CPYFDA(52.8651,"+1,"_CDIV_",",.01)=PARAMS(52.8651,PSOJ,.01,"I")
"RTN","PSOBPSSP",233,0)
 . . S CPYFDA(52.8651,"+1,"_CDIV_",",1)=PARAMS(52.8651,PSOJ,1,"I")
"RTN","PSOBPSSP",234,0)
 . . D UPDATE^DIE(,"CPYFDA")
"RTN","PSOBPSSP",235,0)
 . . Q
"RTN","PSOBPSSP",236,0)
 . ;
"RTN","PSOBPSSP",237,0)
 . ; Loop through and copy the reject resolution required codes
"RTN","PSOBPSSP",238,0)
 . ; Create the FDA and UPDATE the subfile 52.865
"RTN","PSOBPSSP",239,0)
 . I $D(PARAMS(52.865)) S PSOJ="" F  S PSOJ=$O(PARAMS(52.865,PSOJ)) Q:'PSOJ  D
"RTN","PSOBPSSP",240,0)
 . . K CPYFDA
"RTN","PSOBPSSP",241,0)
 . . S CPYFDA(52.865,"+1,"_CDIV_",",.01)=PARAMS(52.865,PSOJ,.01,"I")
"RTN","PSOBPSSP",242,0)
 . . S CPYFDA(52.865,"+1,"_CDIV_",",.02)=PARAMS(52.865,PSOJ,.02,"I")
"RTN","PSOBPSSP",243,0)
 . . D UPDATE^DIE(,"CPYFDA")
"RTN","PSOBPSSP",244,0)
 . . Q
"RTN","PSOBPSSP",245,0)
 . Q
"RTN","PSOBPSSP",246,0)
EXITCPY ;
"RTN","PSOBPSSP",247,0)
 D RBUILD
"RTN","PSOBPSSP",248,0)
 Q
"RTN","PSOBPSSP",249,0)
 ;
"RTN","PSOBPSSP",250,0)
EDITALL ; Action for EA Edit All Parameters
"RTN","PSOBPSSP",251,0)
 ;
"RTN","PSOBPSSP",252,0)
 ; Local variable
"RTN","PSOBPSSP",253,0)
 ; RET - for control after return from call - if "^" then call RBUILD and quit
"RTN","PSOBPSSP",254,0)
 N RET S RET=""
"RTN","PSOBPSSP",255,0)
 ;
"RTN","PSOBPSSP",256,0)
 ; Call to General Parameter Edit
"RTN","PSOBPSSP",257,0)
 D EDITGEN(.RET)
"RTN","PSOBPSSP",258,0)
 I RET=U D RBUILD Q
"RTN","PSOBPSSP",259,0)
 ;
"RTN","PSOBPSSP",260,0)
 ; Call to Transfer Reject Code Edit
"RTN","PSOBPSSP",261,0)
 D EDITTRC(.RET)
"RTN","PSOBPSSP",262,0)
 I RET=U D RBUILD Q
"RTN","PSOBPSSP",263,0)
 ;
"RTN","PSOBPSSP",264,0)
 ; Call to Reject Resolution Required Code Edit
"RTN","PSOBPSSP",265,0)
 D EDITRRRC
"RTN","PSOBPSSP",266,0)
 ;
"RTN","PSOBPSSP",267,0)
 D RBUILD
"RTN","PSOBPSSP",268,0)
 Q
"RTN","PSOBPSSP",269,0)
 ;
"RTN","PSOBPSSP",270,0)
EDITGEN(RETURN) ; Action for EG Edit General Parameters
"RTN","PSOBPSSP",271,0)
 ;
"RTN","PSOBPSSP",272,0)
 ; Input Parameter
"RTN","PSOBPSSP",273,0)
 ; RETURN - Null if normal exit, "^" if timeout or "^" entered
"RTN","PSOBPSSP",274,0)
 ;
"RTN","PSOBPSSP",275,0)
 ; Variables used by DIE
"RTN","PSOBPSSP",276,0)
 N DIE,DA,DIC,DUOUT,DTOUT,DEF
"RTN","PSOBPSSP",277,0)
 ;
"RTN","PSOBPSSP",278,0)
 ; Set Full Screen mode
"RTN","PSOBPSSP",279,0)
 D FULL^VALM1
"RTN","PSOBPSSP",280,0)
 ;
"RTN","PSOBPSSP",281,0)
 ; Get worklist days & update the record
"RTN","PSOBPSSP",282,0)
 S DIE="^PS(52.86,",DA=PSOBPSDV,DR="4" D ^DIE
"RTN","PSOBPSSP",283,0)
 ; CHECK FOR TIMEOUT OR ^
"RTN","PSOBPSSP",284,0)
 I $G(DTOUT)!$D(Y) S RETURN="^"
"RTN","PSOBPSSP",285,0)
 ;
"RTN","PSOBPSSP",286,0)
 ; Update EPHARMACY RESPONSE PAUSE
"RTN","PSOBPSSP",287,0)
 K DTOUT,DUOUT
"RTN","PSOBPSSP",288,0)
 S DEF=$$GET1^DIQ(52.86,PSOBPSDV_",",6,"I")
"RTN","PSOBPSSP",289,0)
 I DEF="" S DEF=2
"RTN","PSOBPSSP",290,0)
 S DIE="^PS(52.86,",DA=PSOBPSDV,DR="6//"_DEF D ^DIE
"RTN","PSOBPSSP",291,0)
 ; CHECK FOR TIMEOUT OR ^
"RTN","PSOBPSSP",292,0)
 I $G(DTOUT)!$D(Y) S RETURN="^"
"RTN","PSOBPSSP",293,0)
 ;
"RTN","PSOBPSSP",294,0)
 ; Get IGNORE THRESHOLD & update the record
"RTN","PSOBPSSP",295,0)
 S DIE="^PS(52.86,",DA=PSOBPSDV,DR="7" D ^DIE
"RTN","PSOBPSSP",296,0)
 ; CHECK FOR TIMEOUT OR ^
"RTN","PSOBPSSP",297,0)
 I $G(DTOUT)!$D(Y) S RETURN="^"
"RTN","PSOBPSSP",298,0)
 D RBUILD
"RTN","PSOBPSSP",299,0)
 Q
"RTN","PSOBPSSP",300,0)
 ;
"RTN","PSOBPSSP",301,0)
EDITTRC(RETURN)  ; Action for ET Edit Transfer Reject Code
"RTN","PSOBPSSP",302,0)
 ;
"RTN","PSOBPSSP",303,0)
 ; Input Parameter
"RTN","PSOBPSSP",304,0)
 ; RETURN - Null if normal exit, "^" if timeout or "^" entered
"RTN","PSOBPSSP",305,0)
 ;
"RTN","PSOBPSSP",306,0)
 ; From EN
"RTN","PSOBPSSP",307,0)
 ; PSOBPSDV - current division declared in EN
"RTN","PSOBPSSP",308,0)
 ;
"RTN","PSOBPSSP",309,0)
 ; Local Variables
"RTN","PSOBPSSP",310,0)
 ; PASS1 - used to indicate first pass through edit loop for controlling reject prompt
"RTN","PSOBPSSP",311,0)
 ; QT - indicates the loop processing can quit
"RTN","PSOBPSSP",312,0)
 ;
"RTN","PSOBPSSP",313,0)
 ; Set Full Screen mode
"RTN","PSOBPSSP",314,0)
 D FULL^VALM1
"RTN","PSOBPSSP",315,0)
 ;
"RTN","PSOBPSSP",316,0)
 N QT,PASS1
"RTN","PSOBPSSP",317,0)
 S QT=0,PASS1=1
"RTN","PSOBPSSP",318,0)
 ;
"RTN","PSOBPSSP",319,0)
 ; Informational message
"RTN","PSOBPSSP",320,0)
 D TRCMSG^PSOBPSSL
"RTN","PSOBPSSP",321,0)
 ;
"RTN","PSOBPSSP",322,0)
 ; Loop through Reject Code edits
"RTN","PSOBPSSP",323,0)
 F  Q:QT  D
"RTN","PSOBPSSP",324,0)
 . ; DIE,DA,DIC,DUOUT,DTOUT,DIR,DIC,X,Y - Used by FileMan
"RTN","PSOBPSSP",325,0)
 . N DIE,DR,DA,DUOUT,DTOUT,DIR,DIC,Y,X
"RTN","PSOBPSSP",326,0)
 . ; Variables local to this loop
"RTN","PSOBPSSP",327,0)
 . ; REJCODE - External Reject code - .01 field from 9002312.93
"RTN","PSOBPSSP",328,0)
 . ; REJIEN - Reject code IEN from 9002312.93
"RTN","PSOBPSSP",329,0)
 . ; ADD - Flag indicating a new code was selected
"RTN","PSOBPSSP",330,0)
 . ; NEWCDPTR - IEN of the Reject Code in 9002313.92 when the user changed the Reject Code
"RTN","PSOBPSSP",331,0)
 . ;
"RTN","PSOBPSSP",332,0)
 . N REJCODE,REJIEN,ADD,NEWCDPTR
"RTN","PSOBPSSP",333,0)
 . ;
"RTN","PSOBPSSP",334,0)
 . ; Set up and call Lookup (^DIC)
"RTN","PSOBPSSP",335,0)
 . S DIC("A")=$S(PASS1:"",1:"ANOTHER ")_"TRANSFER REJECT CODE: ",PASS1=0
"RTN","PSOBPSSP",336,0)
 . S DIC=9002313.93
"RTN","PSOBPSSP",337,0)
 . S DIC(0)="QEAZ"
"RTN","PSOBPSSP",338,0)
 . S DIC("S")="I '$F("".79.88."","".""_$P($G(^(0)),U,1)_""."")"
"RTN","PSOBPSSP",339,0)
 . W ! D ^DIC
"RTN","PSOBPSSP",340,0)
 . ;
"RTN","PSOBPSSP",341,0)
 . ; Check responses to the lookup
"RTN","PSOBPSSP",342,0)
 . I $G(DUOUT)!($G(DTOUT)) S RETURN=U,QT=1 Q  ; user entered a ^, or timed out
"RTN","PSOBPSSP",343,0)
 . I Y'>0 S QT=1 Q  ; user entered a blank to get out
"RTN","PSOBPSSP",344,0)
 . ;
"RTN","PSOBPSSP",345,0)
 . S REJIEN=+Y,REJCODE=$P(Y,U,2)
"RTN","PSOBPSSP",346,0)
 . S ADD=0
"RTN","PSOBPSSP",347,0)
 . ;
"RTN","PSOBPSSP",348,0)
 . ; if new code, set up new node
"RTN","PSOBPSSP",349,0)
 . I '$D(^PS(52.86,PSOBPSDV,1,"B",REJIEN)) D
"RTN","PSOBPSSP",350,0)
 . . ; TRCFDA - FDA structure used by UPDATE^DIE
"RTN","PSOBPSSP",351,0)
 . . N TRCFDA
"RTN","PSOBPSSP",352,0)
 . . S ADD=1
"RTN","PSOBPSSP",353,0)
 . . ;
"RTN","PSOBPSSP",354,0)
 . . ;Set up FDA and File the data 
"RTN","PSOBPSSP",355,0)
 . . S TRCFDA(52.8651,"+1,"_PSOBPSDV_",",.01)=REJIEN
"RTN","PSOBPSSP",356,0)
 . . S TRCFDA(52.8651,"+1,"_PSOBPSDV_",",1)=0 ; Default AUTO SEND
"RTN","PSOBPSSP",357,0)
 . . D UPDATE^DIE(,"TRCFDA")
"RTN","PSOBPSSP",358,0)
 . . Q
"RTN","PSOBPSSP",359,0)
 . ;
"RTN","PSOBPSSP",360,0)
 . ; Edit the transfer reject code entry
"RTN","PSOBPSSP",361,0)
 . S DA=$O(^PS(52.86,PSOBPSDV,1,"B",REJIEN,0)) Q:'DA
"RTN","PSOBPSSP",362,0)
 . S DA(1)=PSOBPSDV
"RTN","PSOBPSSP",363,0)
 . S DIE="^PS(52.86,"_DA(1)_",1,"
"RTN","PSOBPSSP",364,0)
 . S DR=".01"
"RTN","PSOBPSSP",365,0)
 . I ADD W !!?3,"You are entering a new transfer reject code - "_REJCODE_"."
"RTN","PSOBPSSP",366,0)
 . E  W !!?3,"You are editing an existing transfer reject code - "_REJCODE_"."
"RTN","PSOBPSSP",367,0)
 . D ^DIE
"RTN","PSOBPSSP",368,0)
 . ;
"RTN","PSOBPSSP",369,0)
 . I '$G(DA) Q  ; user deleted it so we're done
"RTN","PSOBPSSP",370,0)
 . I $G(DTOUT) S RETURN=U,QT=1 Q  ; timeout - exit loop
"RTN","PSOBPSSP",371,0)
 . I $D(Y) S RETURN=U,QT=1 Q  ; user entered a ^ to exit loop
"RTN","PSOBPSSP",372,0)
 . ;
"RTN","PSOBPSSP",373,0)
 . ; If the user changed the reject code, check for duplicate OR 79/88
"RTN","PSOBPSSP",374,0)
 . ; Get the current pointer filed by DIE and compare it to the original pointer
"RTN","PSOBPSSP",375,0)
 . S DA=+$G(DA),NEWCDPTR=$P($G(^PS(52.86,PSOBPSDV,1,DA,0)),U,1)
"RTN","PSOBPSSP",376,0)
 . I NEWCDPTR'=REJIEN D
"RTN","PSOBPSSP",377,0)
 . . ; CTR - used in duplicate check. # of records with same code value
"RTN","PSOBPSSP",378,0)
 . . ; IEN - used when checking the "B" index for duplicates using $ORDER
"RTN","PSOBPSSP",379,0)
 . . N CTR,IEN
"RTN","PSOBPSSP",380,0)
 . . ; NEWCDPTR - holds the new reject code after the user changes it
"RTN","PSOBPSSP",381,0)
 . . S (CTR,IEN)=0
"RTN","PSOBPSSP",382,0)
 . . F  S IEN=$O(^PS(52.86,PSOBPSDV,1,"B",NEWCDPTR,IEN)) Q:'IEN  S CTR=CTR+1
"RTN","PSOBPSSP",383,0)
 . . I CTR>1 D  Q
"RTN","PSOBPSSP",384,0)
 . . . S DR=".01////"_REJIEN D ^DIE   ; restore the code pointer
"RTN","PSOBPSSP",385,0)
 . . . W !!?3,"You selected a duplicate reject code.  Code '"_REJCODE_"' has been restored."
"RTN","PSOBPSSP",386,0)
 . . . S NEWCDPTR=0 ; Clear the new pointer if it is no longer valid
"RTN","PSOBPSSP",387,0)
 . . . Q
"RTN","PSOBPSSP",388,0)
 . . I $$GET1^DIQ(9002313.93,NEWCDPTR_",",.01)=79 D  Q
"RTN","PSOBPSSP",389,0)
 . . . S DR=".01////"_REJIEN D ^DIE   ; restore the code pointer
"RTN","PSOBPSSP",390,0)
 . . . W !!?3,"Code '79/RTS' is not valid here.  Code '"_REJCODE_"' has been restored."
"RTN","PSOBPSSP",391,0)
 . . . S NEWCDPTR=0 ; Clear the new pointer if it is no longer valid
"RTN","PSOBPSSP",392,0)
 . . . Q
"RTN","PSOBPSSP",393,0)
 . . I $$GET1^DIQ(9002313.93,NEWCDPTR_",",.01)=88 D  Q
"RTN","PSOBPSSP",394,0)
 . . . W !!?3,"Reject code '88/DUR' is not valid here. Code '"_REJCODE_"' has been restored."
"RTN","PSOBPSSP",395,0)
 . . . S DR=".01////"_REJIEN D ^DIE   ; restore the code pointer
"RTN","PSOBPSSP",396,0)
 . . . S NEWCDPTR=0 ; Clear the new pointer if it is no longer valid
"RTN","PSOBPSSP",397,0)
 . . . Q
"RTN","PSOBPSSP",398,0)
 . . Q
"RTN","PSOBPSSP",399,0)
 . ; NEWCDPTR will be 0 if the user tried to enter an invalid or duplicate reject code
"RTN","PSOBPSSP",400,0)
 . Q:'NEWCDPTR
"RTN","PSOBPSSP",401,0)
 . ;
"RTN","PSOBPSSP",402,0)
 . ; Now edit the AUTO SAVE parameter
"RTN","PSOBPSSP",403,0)
 . S DA(1)=PSOBPSDV
"RTN","PSOBPSSP",404,0)
 . S DIE="^PS(52.86,"_DA(1)_",1,"
"RTN","PSOBPSSP",405,0)
 . S DR="1"
"RTN","PSOBPSSP",406,0)
 . D ^DIE
"RTN","PSOBPSSP",407,0)
 . ;
"RTN","PSOBPSSP",408,0)
 . I $G(DTOUT) S RETURN=U,QT=1 Q  ; timeout - exit loop
"RTN","PSOBPSSP",409,0)
 . I $D(Y) S RETURN=U,QT=1 Q  ; user entered a ^ to exit loop
"RTN","PSOBPSSP",410,0)
 . Q
"RTN","PSOBPSSP",411,0)
 . ;
"RTN","PSOBPSSP",412,0)
 S VALMBG=1
"RTN","PSOBPSSP",413,0)
 D RBUILD
"RTN","PSOBPSSP",414,0)
 Q
"RTN","PSOBPSSP",415,0)
 ;
"RTN","PSOBPSSP",416,0)
EDITRRRC(RETURN)  ; Action for ER Edit Reject Resolution Required Code
"RTN","PSOBPSSP",417,0)
 ;
"RTN","PSOBPSSP",418,0)
 ; Input Parameter
"RTN","PSOBPSSP",419,0)
 ; RETURN - Null if normal exit, "^" if timeout or "^" entered
"RTN","PSOBPSSP",420,0)
 ;
"RTN","PSOBPSSP",421,0)
 ; From EN
"RTN","PSOBPSSP",422,0)
 ; PSOBPSDV - current division declared in EN
"RTN","PSOBPSSP",423,0)
 ;
"RTN","PSOBPSSP",424,0)
 ; Local Variables
"RTN","PSOBPSSP",425,0)
 ; PASS1 - used to indicate first pass through edit loop for controlling reject prompt
"RTN","PSOBPSSP",426,0)
 ; QT - indicates the loop processing can quit
"RTN","PSOBPSSP",427,0)
 ;
"RTN","PSOBPSSP",428,0)
 ; Set Full Screen mode
"RTN","PSOBPSSP",429,0)
 D FULL^VALM1
"RTN","PSOBPSSP",430,0)
 ;
"RTN","PSOBPSSP",431,0)
 N QT,PASS1
"RTN","PSOBPSSP",432,0)
 S QT=0,PASS1=1
"RTN","PSOBPSSP",433,0)
 ;
"RTN","PSOBPSSP",434,0)
 ; Informational message
"RTN","PSOBPSSP",435,0)
 D RRRMSG^PSOBPSSL
"RTN","PSOBPSSP",436,0)
 ;
"RTN","PSOBPSSP",437,0)
 ; Loop through Reject Code edits
"RTN","PSOBPSSP",438,0)
 F  Q:QT  D
"RTN","PSOBPSSP",439,0)
 . ; DIE,DA,DIC,DUOUT,DTOUT,DIR,DIC,X,Y - Used by FileMan
"RTN","PSOBPSSP",440,0)
 . N DIE,DR,DA,DUOUT,DTOUT,DIR,DIC,Y,X
"RTN","PSOBPSSP",441,0)
 . ; Variables local to this loop
"RTN","PSOBPSSP",442,0)
 . ; REJCODE - External Reject code - .01 field from 9002312.93
"RTN","PSOBPSSP",443,0)
 . ; REJIEN - Reject code IEN from 9002312.93
"RTN","PSOBPSSP",444,0)
 . ; ADD - Flag indicating a new code was selected
"RTN","PSOBPSSP",445,0)
 . ; NEWCDPTR - IEN of the Reject Code in 9002313.92 when the user changed the Reject Code
"RTN","PSOBPSSP",446,0)
 . ;
"RTN","PSOBPSSP",447,0)
 . N REJCODE,REJIEN,ADD,NEWCDPTR
"RTN","PSOBPSSP",448,0)
 . ;
"RTN","PSOBPSSP",449,0)
 . ; Set up and call Lookup (^DIC)
"RTN","PSOBPSSP",450,0)
 . S DIC("A")=$S(PASS1:"",1:"ANOTHER ")_"REJECT RESOLUTION REQUIRED CODE: ",PASS1=0
"RTN","PSOBPSSP",451,0)
 . S DIC=9002313.93
"RTN","PSOBPSSP",452,0)
 . S DIC(0)="QEAZ"
"RTN","PSOBPSSP",453,0)
 . S DIC("S")="I '$F("".79.88."","".""_$P($G(^(0)),U,1)_""."")"
"RTN","PSOBPSSP",454,0)
 . W ! D ^DIC
"RTN","PSOBPSSP",455,0)
 . ;
"RTN","PSOBPSSP",456,0)
 . ; Check responses to the lookup
"RTN","PSOBPSSP",457,0)
 . I $G(DUOUT)!($G(DTOUT)) S RETURN=U,QT=1 Q  ; user entered a ^, or timed out
"RTN","PSOBPSSP",458,0)
 . I Y'>0 S QT=1 Q  ; user entered a blank to get out
"RTN","PSOBPSSP",459,0)
 . ;
"RTN","PSOBPSSP",460,0)
 . S REJIEN=+Y,REJCODE=$P(Y,U,2)
"RTN","PSOBPSSP",461,0)
 . S ADD=0
"RTN","PSOBPSSP",462,0)
 . ;
"RTN","PSOBPSSP",463,0)
 . ; if new code, set up new node
"RTN","PSOBPSSP",464,0)
 . I '$D(^PS(52.86,PSOBPSDV,5,"B",REJIEN)) D
"RTN","PSOBPSSP",465,0)
 . . ; RRRCFDA - FDA structure used by UPDATE^DIE
"RTN","PSOBPSSP",466,0)
 . . N RRRCFDA
"RTN","PSOBPSSP",467,0)
 . . S ADD=1
"RTN","PSOBPSSP",468,0)
 . . ;
"RTN","PSOBPSSP",469,0)
 . . ;Set up FDA and File the data 
"RTN","PSOBPSSP",470,0)
 . . S RRRCFDA(52.865,"+1,"_PSOBPSDV_",",.01)=REJIEN
"RTN","PSOBPSSP",471,0)
 . . S RRRCFDA(52.865,"+1,"_PSOBPSDV_",",.02)=0 ; Default DOLLAR THRESHOLD
"RTN","PSOBPSSP",472,0)
 . . D UPDATE^DIE(,"RRRCFDA")
"RTN","PSOBPSSP",473,0)
 . . Q
"RTN","PSOBPSSP",474,0)
 . ;
"RTN","PSOBPSSP",475,0)
 . ; Edit the transfer reject code entry
"RTN","PSOBPSSP",476,0)
 . S DA=$O(^PS(52.86,PSOBPSDV,5,"B",REJIEN,0)) Q:'DA
"RTN","PSOBPSSP",477,0)
 . S DA(1)=PSOBPSDV
"RTN","PSOBPSSP",478,0)
 . S DIE="^PS(52.86,"_DA(1)_",5,"
"RTN","PSOBPSSP",479,0)
 . S DR=".01REJECT RESOLUTION REQUIRED CODE"
"RTN","PSOBPSSP",480,0)
 . I ADD W !!?3,"You are entering a new reject resolution required code - "_REJCODE_"."
"RTN","PSOBPSSP",481,0)
 . E  W !!?3,"You are editing an existing reject resolution required code - "_REJCODE_"."
"RTN","PSOBPSSP",482,0)
 . D ^DIE
"RTN","PSOBPSSP",483,0)
 . ;
"RTN","PSOBPSSP",484,0)
 . I '$G(DA) Q  ; user deleted it so we're done
"RTN","PSOBPSSP",485,0)
 . I $G(DTOUT) S RETURN=U,QT=1 Q  ; timeout - exit loop
"RTN","PSOBPSSP",486,0)
 . I $D(Y) S RETURN=U,QT=1 Q  ; user entered a ^ to exit loop
"RTN","PSOBPSSP",487,0)
 . ;
"RTN","PSOBPSSP",488,0)
 . ; If the user changed the reject code, check for duplicate OR 79/88
"RTN","PSOBPSSP",489,0)
 . ; Get the current pointer filed by DIE and compare it to the original pointer
"RTN","PSOBPSSP",490,0)
 . S DA=+$G(DA),NEWCDPTR=$P($G(^PS(52.86,PSOBPSDV,5,DA,0)),U,1)
"RTN","PSOBPSSP",491,0)
 . I NEWCDPTR'=REJIEN D
"RTN","PSOBPSSP",492,0)
 . . ; CTR - used in duplicate check. # of records with same code value
"RTN","PSOBPSSP",493,0)
 . . ; IEN - used when checking the "B" index for duplicates using $ORDER
"RTN","PSOBPSSP",494,0)
 . . N CTR,IEN
"RTN","PSOBPSSP",495,0)
 . . ; NEWCDPTR - holds the new reject code after the user changes it
"RTN","PSOBPSSP",496,0)
 . . S (CTR,IEN)=0
"RTN","PSOBPSSP",497,0)
 . . F  S IEN=$O(^PS(52.86,PSOBPSDV,5,"B",NEWCDPTR,IEN)) Q:'IEN  S CTR=CTR+1
"RTN","PSOBPSSP",498,0)
 . . I CTR>1 D  Q
"RTN","PSOBPSSP",499,0)
 . . . S DR=".01////"_REJIEN D ^DIE   ; restore the code pointer
"RTN","PSOBPSSP",500,0)
 . . . W !!?3,"You selected a duplicate reject code.  Code '"_REJCODE_"' has been restored."
"RTN","PSOBPSSP",501,0)
 . . . S NEWCDPTR=0 ; Clear the new pointer if it is no longer valid
"RTN","PSOBPSSP",502,0)
 . . . Q
"RTN","PSOBPSSP",503,0)
 . . I $$GET1^DIQ(9002313.93,NEWCDPTR_",",.01)=79 D  Q
"RTN","PSOBPSSP",504,0)
 . . . S DR=".01////"_REJIEN D ^DIE   ; restore the code pointer
"RTN","PSOBPSSP",505,0)
 . . . W !!?3,"Code '79/RTS' is not valid here.  Code '"_REJCODE_"' has been restored."
"RTN","PSOBPSSP",506,0)
 . . . S NEWCDPTR=0 ; Clear the new pointer if it is no longer valid
"RTN","PSOBPSSP",507,0)
 . . . Q
"RTN","PSOBPSSP",508,0)
 . . I $$GET1^DIQ(9002313.93,NEWCDPTR_",",.01)=88 D  Q
"RTN","PSOBPSSP",509,0)
 . . . W !!?3,"Reject code '88/DUR' is not valid here. Code '"_REJCODE_"' has been restored."
"RTN","PSOBPSSP",510,0)
 . . . S DR=".01////"_REJIEN D ^DIE   ; restore the code pointer
"RTN","PSOBPSSP",511,0)
 . . . S NEWCDPTR=0 ; Clear the new pointer if it is no longer valid
"RTN","PSOBPSSP",512,0)
 . . . Q
"RTN","PSOBPSSP",513,0)
 . . Q
"RTN","PSOBPSSP",514,0)
 . ; NEWCDPTR will be 0 if the user tried to enter an invalid or duplicate reject code
"RTN","PSOBPSSP",515,0)
 . Q:'NEWCDPTR
"RTN","PSOBPSSP",516,0)
 . ;
"RTN","PSOBPSSP",517,0)
 . ; Now edit the DOLLAR THRESHOLD parameter
"RTN","PSOBPSSP",518,0)
 . S DA(1)=PSOBPSDV
"RTN","PSOBPSSP",519,0)
 . S DIE="^PS(52.86,"_DA(1)_",5,"
"RTN","PSOBPSSP",520,0)
 . S DR=".02"
"RTN","PSOBPSSP",521,0)
 . D ^DIE
"RTN","PSOBPSSP",522,0)
 . ; Make sure stored value is not null
"RTN","PSOBPSSP",523,0)
 . I '$G(DTOUT),$G(^PS(52.86,PSOBPSDV,5,DA,0)) D
"RTN","PSOBPSSP",524,0)
 . . S $P(^PS(52.86,PSOBPSDV,5,DA,0),U,2)=+$P(^PS(52.86,PSOBPSDV,5,DA,0),U,2)
"RTN","PSOBPSSP",525,0)
 . ;
"RTN","PSOBPSSP",526,0)
 . I $G(DTOUT) S RETURN=U,QT=1 Q  ; timeout - exit loop
"RTN","PSOBPSSP",527,0)
 . I $D(Y) S RETURN=U,QT=1 Q  ; user entered a ^ to exit loop
"RTN","PSOBPSSP",528,0)
 . Q
"RTN","PSOBPSSP",529,0)
 . ;
"RTN","PSOBPSSP",530,0)
 S VALMBG=1
"RTN","PSOBPSSP",531,0)
 D RBUILD
"RTN","PSOBPSSP",532,0)
 Q
"RTN","PSOBPSSP",533,0)
 ;
"RTN","PSOBPSSP",534,0)
CHGDIV ; Action for CD Change Division
"RTN","PSOBPSSP",535,0)
 ;
"RTN","PSOBPSSP",536,0)
 ; From EN
"RTN","PSOBPSSP",537,0)
 ; PSOBPSDV - source site parameter IEN of 52.86 - defined in EN
"RTN","PSOBPSSP",538,0)
 ;
"RTN","PSOBPSSP",539,0)
 ; Local Variable 
"RTN","PSOBPSSP",540,0)
 ; TMPDIV - used to save the current division number in case the user does not pick one
"RTN","PSOBPSSP",541,0)
 N TMPDIV
"RTN","PSOBPSSP",542,0)
 ;
"RTN","PSOBPSSP",543,0)
 ; Set Full Screen mode
"RTN","PSOBPSSP",544,0)
 D FULL^VALM1
"RTN","PSOBPSSP",545,0)
 ;
"RTN","PSOBPSSP",546,0)
 ; save current division
"RTN","PSOBPSSP",547,0)
 S TMPDIV=PSOBPSDV
"RTN","PSOBPSSP",548,0)
 ;
"RTN","PSOBPSSP",549,0)
 ; Kill the current division
"RTN","PSOBPSSP",550,0)
 K PSOBPSDV
"RTN","PSOBPSSP",551,0)
 ;
"RTN","PSOBPSSP",552,0)
 ; Get the division number to process
"RTN","PSOBPSSP",553,0)
 D GETDIV(.PSOBPSDV)
"RTN","PSOBPSSP",554,0)
 ;
"RTN","PSOBPSSP",555,0)
 ; if no division selected, restore current division
"RTN","PSOBPSSP",556,0)
 I '$D(PSOBPSDV) D  Q
"RTN","PSOBPSSP",557,0)
 . S PSOBPSDV=TMPDIV
"RTN","PSOBPSSP",558,0)
 . D RBUILD
"RTN","PSOBPSSP",559,0)
 S VALMHDR(1)="Pharmacy Division: "_$$GET1^DIQ(52.86,PSOBPSDV_",",.01)
"RTN","PSOBPSSP",560,0)
 S VALMBG=1
"RTN","PSOBPSSP",561,0)
 D RBUILD
"RTN","PSOBPSSP",562,0)
 Q
"RTN","PSOBPSSP",563,0)
 ;
"RTN","PSOBPSSP",564,0)
DIVLIST ; Action for DP Display site parameters
"RTN","PSOBPSSP",565,0)
 ;
"RTN","PSOBPSSP",566,0)
 ; Set Full Screen mode
"RTN","PSOBPSSP",567,0)
 D FULL^VALM1
"RTN","PSOBPSSP",568,0)
 ;
"RTN","PSOBPSSP",569,0)
 ; Call List Manager routine for displaying site parameters for multiple divisions
"RTN","PSOBPSSP",570,0)
 D EN^PSOBPSSL
"RTN","PSOBPSSP",571,0)
 ;
"RTN","PSOBPSSP",572,0)
 D RBUILD
"RTN","PSOBPSSP",573,0)
 Q
"RTN","PSOBPSSP",574,0)
 ;
"RTN","PSOBPSSP",575,0)
RBUILD ; rebuild the list and then exit with a refresh
"RTN","PSOBPSSP",576,0)
 ;
"RTN","PSOBPSSP",577,0)
 ; From EN
"RTN","PSOBPSSP",578,0)
 ; PSOBPSDV - source site parameter IEN of 52.86 - defined in EN
"RTN","PSOBPSSP",579,0)
 ;
"RTN","PSOBPSSP",580,0)
 ; VALMBK - List Manager variable
"RTN","PSOBPSSP",581,0)
 ;
"RTN","PSOBPSSP",582,0)
 D BLDLIST(PSOBPSDV)
"RTN","PSOBPSSP",583,0)
 ;
"RTN","PSOBPSSP",584,0)
 S VALMBCK="R"
"RTN","PSOBPSSP",585,0)
 Q
"RTN","PSOBPSU1")
0^9^B114078580
"RTN","PSOBPSU1",1,0)
PSOBPSU1 ;BIRM/MFR - BPS (ECME) Utilities 1 ;10/15/04
"RTN","PSOBPSU1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,260,281,287,303,289,290,358,359,385,403,427,448,482**;DEC 1997;Build 44
"RTN","PSOBPSU1",3,0)
 ;References to $$EN^BPSNCPDP supported by IA 4415
"RTN","PSOBPSU1",4,0)
 ;References to $$NDCFMT^PSSNDCUT,$$GETNDC^PSSNDCUT supported by IA 4707
"RTN","PSOBPSU1",5,0)
 ;References to $$ECMEON^BPSUTIL,$$CMOPON^BPSUTIL supported by IA 4410
"RTN","PSOBPSU1",6,0)
 ;References to $$STORESP^IBNCPDP supported by IA 4299
"RTN","PSOBPSU1",7,0)
 ;References to $$CLAIM^BPSBUTL supported by IA 4719
"RTN","PSOBPSU1",8,0)
 ;Reference to $$RESPONSE^BPSOS03 supported by IA 6226
"RTN","PSOBPSU1",9,0)
 ;
"RTN","PSOBPSU1",10,0)
ECMESND(RX,RFL,DATE,FROM,NDC,CMOP,RVTX,OVRC,CNDC,RESP,IGSW,ALTX,CLA,PA,RXCOB) ; - Sends Rx Release 
"RTN","PSOBPSU1",11,0)
 ;information to ECME/IB and updates NDC in the files 50 & 52; DBIA4702
"RTN","PSOBPSU1",12,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",13,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",14,0)
 ;       (o) DATE - Date of Service
"RTN","PSOBPSU1",15,0)
 ;       (r) FROM - Function within OP (See BWHERE param. in EN^BPSNCPDP api)
"RTN","PSOBPSU1",16,0)
 ;       (o) NDC  - NDC Number (If not passed, will be retrieved from DRUG file)
"RTN","PSOBPSU1",17,0)
 ;       (o) CMOP - CMOP Rx (1-YES/0-NO) (Default: 0)
"RTN","PSOBPSU1",18,0)
 ;       (o) RVTX - REVERSE text (e.g., RX EDIT, RX RELEASE-NDC CHANGE, etc)
"RTN","PSOBPSU1",19,0)
 ;       (o) OVRC - Three sets of 3 NCPDP override codes separated by "~".  Each piece of the set 
"RTN","PSOBPSU1",20,0)
 ;                  is delimited by an "^"
"RTN","PSOBPSU1",21,0)
 ;                  Piece 1: NCPDP Reason for Service Code for overriding DUR REJECTS
"RTN","PSOBPSU1",22,0)
 ;                  Piece 2: NCPDP Professional Service Code for overriding DUR REJECTS
"RTN","PSOBPSU1",23,0)
 ;                  Piece 3: NCPDP Result of Service Code for overriding DUR REJECTS
"RTN","PSOBPSU1",24,0)
 ;       (o) CNDC - Changed NDC? 1 - Yes / 0 - No (Default: NO)
"RTN","PSOBPSU1",25,0)
 ;       (o) IGSW - Ignore Switches (Master and CMOP)? 1 - Yes / 0 - No (Default: NO)
"RTN","PSOBPSU1",26,0)
 ;       (o) ALTX - Alternative Text to be placed in the Rx ECME Activity Log
"RTN","PSOBPSU1",27,0)
 ;       (o) CLA  - NCPDP Clarification Code(s) for overriding DUR/RTS REJECTS
"RTN","PSOBPSU1",28,0)
 ;       (o) PA   - NCPDP Prior Authorization Type and Number (separated by "^")
"RTN","PSOBPSU1",29,0)
 ;       (o) RXCOB- Payer Sequence
"RTN","PSOBPSU1",30,0)
 ;Output:    RESP - Response from $$EN^BPSNCPDP api
"RTN","PSOBPSU1",31,0)
 ;
"RTN","PSOBPSU1",32,0)
 N ACT,NDCACT,DA,PSOELIG,PSOBYPS,ACT1,SMA
"RTN","PSOBPSU1",33,0)
 I '$D(RFL) S RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",34,0)
 ; - ECME is not turned ON for the Rx's Division
"RTN","PSOBPSU1",35,0)
 I '$G(IGSW),'$$ECMEON^BPSUTIL($$RXSITE^PSOBPSUT(RX,RFL)) S RESP="-1^ECME SWITCH OFF" Q
"RTN","PSOBPSU1",36,0)
 ; - ECME CMOP is not turned ON for the Rx's Division
"RTN","PSOBPSU1",37,0)
 I '$G(IGSW),$G(CMOP),'$$CMOPON^BPSUTIL($$RXSITE^PSOBPSUT(RX,RFL)) S RESP="-1^CMOP SWITCH OFF" Q
"RTN","PSOBPSU1",38,0)
 ; - Saving the NDC to be displayed on the ECME Act Log
"RTN","PSOBPSU1",39,0)
 I $G(CNDC) D
"RTN","PSOBPSU1",40,0)
 . I $G(NDC)'="" S NDCACT=NDC Q
"RTN","PSOBPSU1",41,0)
 . S NDCACT=$$GETNDC^PSONDCUT(RX,RFL)
"RTN","PSOBPSU1",42,0)
 I $$NDCFMT^PSSNDCUT($G(NDC))="" D
"RTN","PSOBPSU1",43,0)
 . S NDC=$$GETNDC^PSSNDCUT($$GET1^DIQ(52,RX,6,"I"),$$RXSITE^PSOBPSUT(RX,RFL),+$G(CMOP))
"RTN","PSOBPSU1",44,0)
 . I $G(NDC)'="" D SAVNDC^PSONDCUT(RX,RFL,NDC,+$G(CMOP),1)
"RTN","PSOBPSU1",45,0)
 S PPDU="",PPDU=$$GPPDU^PSONDCUT(RX,RFL,NDC,,1,FROM) K PPDU
"RTN","PSOBPSU1",46,0)
 ;
"RTN","PSOBPSU1",47,0)
 ; Determine if this has multiple overrides from the SMA action of the reject worklist
"RTN","PSOBPSU1",48,0)
 S SMA=0
"RTN","PSOBPSU1",49,0)
 I $G(OVRC)]"",$G(CLA)]"" S SMA=1
"RTN","PSOBPSU1",50,0)
 I $G(OVRC)]"",$G(PA)]"" S SMA=1
"RTN","PSOBPSU1",51,0)
 I $G(CLA)]"",$G(PA)]"" S SMA=1
"RTN","PSOBPSU1",52,0)
 ;
"RTN","PSOBPSU1",53,0)
 ; if the reversal reason text exists, remove semi-colons  pso*7*448
"RTN","PSOBPSU1",54,0)
 I $G(RVTX)'="" S RVTX=$TR(RVTX,";","-")
"RTN","PSOBPSU1",55,0)
 ;
"RTN","PSOBPSU1",56,0)
 ; - Creating ECME Act Log in file 52
"RTN","PSOBPSU1",57,0)
 S ACT=""
"RTN","PSOBPSU1",58,0)
 I $$STATUS^PSOBPSUT(RX,RFL)="E PAYABLE" S ACT="Rev/Resubmit "
"RTN","PSOBPSU1",59,0)
 S ACT=ACT_"ECME:"
"RTN","PSOBPSU1",60,0)
 ;
"RTN","PSOBPSU1",61,0)
 ; - Marked any 'unresolved' REJECTS as 'resolved' (Reason: 1 - Claim re-submitted)
"RTN","PSOBPSU1",62,0)
 N CLSCOM
"RTN","PSOBPSU1",63,0)
 I 'SMA D
"RTN","PSOBPSU1",64,0)
 . I $P($G(OVRC),"~")'="" S CLSCOM="DUR Override Codes "_$TR($P(OVRC,"~"),"^","/")_" submitted."
"RTN","PSOBPSU1",65,0)
 . I $G(CLA)'="" S CLSCOM="Clarification Code(s) "_CLA_" submitted."
"RTN","PSOBPSU1",66,0)
 . I $G(PA)'="" S CLSCOM="Prior Authorization Code ("_$P(PA,"^")_"/"_$P(PA,"^",2)_") submitted."
"RTN","PSOBPSU1",67,0)
 D CLSALL^PSOREJUT(RX,RFL,DUZ,1,$G(CLSCOM),$P($G(OVRC),"~",1),$P($G(OVRC),"~",2),$P($G(OVRC),"~",3),$G(CLA),$G(PA))
"RTN","PSOBPSU1",68,0)
 ; - Call to ECME (NEWing STAT because ECME was overwriting it - Important variable for CMOP release PSXVND)
"RTN","PSOBPSU1",69,0)
 N STAT
"RTN","PSOBPSU1",70,0)
 I $G(RVTX)="",FROM="ED" S RVTX="RX EDITED"
"RTN","PSOBPSU1",71,0)
 S RESP=$$EN^BPSNCPDP(RX,RFL,$$DOS(RX,RFL,.DATE),FROM,NDC,$G(RVTX),$G(OVRC),,$G(CLA),$G(PA),$G(RXCOB))
"RTN","PSOBPSU1",72,0)
 I $$STATUS^PSOBPSUT(RX,RFL)="E PAYABLE" D
"RTN","PSOBPSU1",73,0)
 . D SAVNDC^PSONDCUT(RX,RFL,NDC,+$G(CMOP),1,FROM)
"RTN","PSOBPSU1",74,0)
 . ;
"RTN","PSOBPSU1",75,0)
 . ; MRD;PSO*7.0*448 - If this is a resubmit of a claim with an RRR
"RTN","PSOBPSU1",76,0)
 . ; reject, and it came back E PAYABLE, then display some additional
"RTN","PSOBPSU1",77,0)
 . ; information about the response to the claim, conditional upon the
"RTN","PSOBPSU1",78,0)
 . ; value of FROM.
"RTN","PSOBPSU1",79,0)
 . ;
"RTN","PSOBPSU1",80,0)
 . I ",ED,PE,PP,RF,RN,RRL,"[(","_FROM_","),$$RRR(RX,RFL) D ADDLINFO(RX,RFL,$G(RXCOB))
"RTN","PSOBPSU1",81,0)
 . ;
"RTN","PSOBPSU1",82,0)
 . Q
"RTN","PSOBPSU1",83,0)
 ;
"RTN","PSOBPSU1",84,0)
 ; - Reseting the Re-transmission flag
"RTN","PSOBPSU1",85,0)
 D RETRXF^PSOREJU2(RX,RFL,0)
"RTN","PSOBPSU1",86,0)
 ; Storing eligibility flag
"RTN","PSOBPSU1",87,0)
 S PSOELIG=$P(RESP,"^",3) D:PSOELIG'="" ELIG^PSOBPSU2(RX,RFL,PSOELIG)
"RTN","PSOBPSU1",88,0)
 ;
"RTN","PSOBPSU1",89,0)
 ; Check if this is a bypass RX-claim.  If it is, write it to the Bypass-Override Report
"RTN","PSOBPSU1",90,0)
 S PSOBYPS=$$BYPASS(PSOELIG,$P(RESP,"^",2))
"RTN","PSOBPSU1",91,0)
 I PSOBYPS D EN^PSOBORP2(RX,RFL,RESP)
"RTN","PSOBPSU1",92,0)
 ;
"RTN","PSOBPSU1",93,0)
 ; If from SMA action, split message across multiple log entries
"RTN","PSOBPSU1",94,0)
 ; The last entry will be filed in the code that follows this section as we append other data
"RTN","PSOBPSU1",95,0)
 ;   to the last message.
"RTN","PSOBPSU1",96,0)
 I SMA,+RESP'=2,+RESP'=6,+RESP'=10 D
"RTN","PSOBPSU1",97,0)
 . N MSG
"RTN","PSOBPSU1",98,0)
 . ; If there are DUR overrides, create the message and file it since this will never be the last message
"RTN","PSOBPSU1",99,0)
 . I $G(OVRC)]"" D
"RTN","PSOBPSU1",100,0)
 .. S MSG=ACT_"REJECT WORKLIST-DUR OVERRIDE CODES("_$TR(OVRC,"^","/")_")"
"RTN","PSOBPSU1",101,0)
 .. D RXACT^PSOBPSU2(RX,RFL,MSG,"M",DUZ)
"RTN","PSOBPSU1",102,0)
 . ; If there are Clarification codes, create the message
"RTN","PSOBPSU1",103,0)
 . ; Only file it if we also have a Prior Auth message.
"RTN","PSOBPSU1",104,0)
 . ; Otherwise more data will be added to it and it will be filed below.
"RTN","PSOBPSU1",105,0)
 . I $G(CLA)]"" D
"RTN","PSOBPSU1",106,0)
 .. S MSG=ACT_"REJECT WORKLIST-(CLARIF. CODE="_CLA_")"
"RTN","PSOBPSU1",107,0)
 .. I $G(PA)]"" D RXACT^PSOBPSU2(RX,RFL,MSG,"M",DUZ)
"RTN","PSOBPSU1",108,0)
 . ; If there are Prior Auth overrides, create the message.
"RTN","PSOBPSU1",109,0)
 . ; More data will be added to it and it will be filed below.
"RTN","PSOBPSU1",110,0)
 . I $G(PA)]"" D
"RTN","PSOBPSU1",111,0)
 .. S ALTX="REJECT WORKLIST-(PRIOR AUTH.="_$TR(PA,"^","/")_")"
"RTN","PSOBPSU1",112,0)
 ;
"RTN","PSOBPSU1",113,0)
 ; - Logging ECME Act Log to file 52
"RTN","PSOBPSU1",114,0)
 I $G(ALTX)="" D
"RTN","PSOBPSU1",115,0)
 . N X,ROUTE S (ROUTE,X)=""
"RTN","PSOBPSU1",116,0)
 . S ROUTE=$S(FROM="RF":$$GET1^DIQ(52.1,RFL_","_RX_",",2),FROM="OF":$$GET1^DIQ(52,RX_",",11),1:"")
"RTN","PSOBPSU1",117,0)
 . S:FROM="OF" X=ROUTE_" FILL(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",118,0)
 . S:FROM="RF" X=ROUTE_" REFILL(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",119,0)
 . S:FROM="RN" X="RX RENEWED(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",120,0)
 . S:FROM="PL" X="PRINTED FROM SUSPENSE(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",121,0)
 . S:FROM="PE"!(FROM="PP") X="PULLED FROM SUSPENSE(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",122,0)
 . S:FROM="PC" X="CMOP TRANSMISSION(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",123,0)
 . S:FROM="RRL"!(FROM="CRRL") X="RELEASED RX PREVIOUSLY REVERSED"
"RTN","PSOBPSU1",124,0)
 . S:FROM="ED" X="RX EDITED"
"RTN","PSOBPSU1",125,0)
 . S:$G(RVTX)'="" X=RVTX
"RTN","PSOBPSU1",126,0)
 . I 'SMA,$G(OVRC)'="" S X="DUR OVERRIDE CODES("_$TR(OVRC,"^","/")_")"
"RTN","PSOBPSU1",127,0)
 . S:$G(CNDC) X=X_"(NDC:"_NDCACT_")" S ACT=ACT_X
"RTN","PSOBPSU1",128,0)
 . S ACT=ACT_$$STS(RX,RFL,RESP)
"RTN","PSOBPSU1",129,0)
 I $G(ALTX)'="" S ACT=ACT_ALTX_$$STS(RX,RFL,RESP)
"RTN","PSOBPSU1",130,0)
 I +RESP=2 S ACT="Not ECME Billable: "_$P(RESP,"^",2)
"RTN","PSOBPSU1",131,0)
 I +RESP=6 S ACT=$P(RESP,"^",2)
"RTN","PSOBPSU1",132,0)
 I +RESP=10 S ACT="ECME reversed/NOT re-submitted: "_$P(RESP,"^",2)
"RTN","PSOBPSU1",133,0)
 S:PSOELIG="T" ACT="TRICARE-"_ACT
"RTN","PSOBPSU1",134,0)
 S:PSOELIG="C" ACT="CHAMPVA-"_ACT
"RTN","PSOBPSU1",135,0)
 S ACT1=""
"RTN","PSOBPSU1",136,0)
 I $P(RESP,"^",6),$P(RESP,"^",7)'=""  S ACT1="-"_$S($P(RESP,"^",6)="2":"s",$P(RESP,"^",6)="3":"t",1:"p")_$P(RESP,"^",7)
"RTN","PSOBPSU1",137,0)
 S ACT=$E(ACT_ACT1,1,75)
"RTN","PSOBPSU1",138,0)
 D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOBPSU1",139,0)
 D ELOG^PSOBPSU2(RESP)  ;-Logs an ECME Act Log if Rx Qty is different than Billing Qty
"RTN","PSOBPSU1",140,0)
 ; If not a bypass RX-claim, then call TRICCHK so the user can process
"RTN","PSOBPSU1",141,0)
 I PSOELIG="T"!(PSOELIG="C"),'PSOBYPS D TRICCHK^PSOREJU3(RX,RFL,RESP,FROM,$G(RVTX))
"RTN","PSOBPSU1",142,0)
 Q
"RTN","PSOBPSU1",143,0)
 ;
"RTN","PSOBPSU1",144,0)
BYPASS(PSOELIG,REASON) ;PSO*427
"RTN","PSOBPSU1",145,0)
 ; Check if this Rx gets bypassed. Bypassed Rx show up on the TRICARE/CHAMPVA
"RTN","PSOBPSU1",146,0)
 ;   Override/Bypass Report and will not get the Reject Notification Screen.
"RTN","PSOBPSU1",147,0)
 ;
"RTN","PSOBPSU1",148,0)
 ; Input:
"RTN","PSOBPSU1",149,0)
 ;    POSELIG: Eligibility (C:CHAMPVA, T:TRICARE, V:VETERAN)
"RTN","PSOBPSU1",150,0)
 ;    REASON: Non billable reason returned by ECME
"RTN","PSOBPSU1",151,0)
 ; Output:
"RTN","PSOBPSU1",152,0)
 ;    0: Not a Bypass Rx
"RTN","PSOBPSU1",153,0)
 ;    1: Bypass Rx
"RTN","PSOBPSU1",154,0)
 ;
"RTN","PSOBPSU1",155,0)
 ; Check Parameters
"RTN","PSOBPSU1",156,0)
 I $G(PSOELIG)="" Q 0
"RTN","PSOBPSU1",157,0)
 I $G(REASON)="" Q 0
"RTN","PSOBPSU1",158,0)
 ;
"RTN","PSOBPSU1",159,0)
 ; Only TRICARE and CHAMPVA are bypassed
"RTN","PSOBPSU1",160,0)
 I PSOELIG'="T",PSOELIG'="C" Q 0
"RTN","PSOBPSU1",161,0)
 ;
"RTN","PSOBPSU1",162,0)
 ; Check for TRICARE/CHAMPVA and EI (Veteran claims would not have gotten this far)
"RTN","PSOBPSU1",163,0)
 I ",AGENT ORANGE,IONIZING RADIATION,SC TREATMENT,SOUTHWEST ASIA,MILITARY SEXUAL TRAUMA,HEAD/NECK CANCER,COMBAT VETERAN,PROJECT 112/SHAD,"[(","_REASON_",") Q 1
"RTN","PSOBPSU1",164,0)
 Q 0
"RTN","PSOBPSU1",165,0)
 ;
"RTN","PSOBPSU1",166,0)
RRR(PSORX,PSOFILL) ; Check for an RRR reject on a Prescription/Fill.
"RTN","PSOBPSU1",167,0)
 ; MRD;PSO*7.0*448 - New function to support display of additional
"RTN","PSOBPSU1",168,0)
 ; information for RRR resubmits.  Return '1' if this Rx has a reject
"RTN","PSOBPSU1",169,0)
 ; with the RRR flag set, otherwise return '0'.
"RTN","PSOBPSU1",170,0)
 ; Input:  (r) PSORX   - Rx IEN (#52)
"RTN","PSOBPSU1",171,0)
 ;         (o) PSOFILL - Refill#
"RTN","PSOBPSU1",172,0)
 ; Output: '1' if RRR, '0' if not
"RTN","PSOBPSU1",173,0)
 ;
"RTN","PSOBPSU1",174,0)
 N PSOREJ,PSORRR
"RTN","PSOBPSU1",175,0)
 ;
"RTN","PSOBPSU1",176,0)
 I '$G(PSORX) Q 0
"RTN","PSOBPSU1",177,0)
 I $G(PSOFILL)="" S PSOFILL=0
"RTN","PSOBPSU1",178,0)
 ;
"RTN","PSOBPSU1",179,0)
 ; Loop through the Reject Info sub-file.  If the Fill# on a Reject is
"RTN","PSOBPSU1",180,0)
 ; the same as PSOFILL, and if the Reject is RRR, then set the flag and
"RTN","PSOBPSU1",181,0)
 ; quit out.
"RTN","PSOBPSU1",182,0)
 ;
"RTN","PSOBPSU1",183,0)
 S PSORRR=0
"RTN","PSOBPSU1",184,0)
 S PSOREJ=0
"RTN","PSOBPSU1",185,0)
 F  S PSOREJ=$O(^PSRX(PSORX,"REJ",PSOREJ)) Q:'PSOREJ  D  Q:PSORRR
"RTN","PSOBPSU1",186,0)
 . I $$GET1^DIQ(52.25,PSOREJ_","_PSORX,5)'=PSOFILL Q
"RTN","PSOBPSU1",187,0)
 . I $$GET1^DIQ(52.25,PSOREJ_","_PSORX,30,"I") S PSORRR=1
"RTN","PSOBPSU1",188,0)
 . Q
"RTN","PSOBPSU1",189,0)
 ;
"RTN","PSOBPSU1",190,0)
 Q PSORRR
"RTN","PSOBPSU1",191,0)
 ;
"RTN","PSOBPSU1",192,0)
ADDLINFO(PSORX,PSOFILL,PSOCOB) ; Display additional information for RRR resubmits.
"RTN","PSOBPSU1",193,0)
 ; MRD;PSO*7.0*448 - Display addition information for a paid claim.
"RTN","PSOBPSU1",194,0)
 ; Input: (r) PSORX   - Rx IEN (#52)
"RTN","PSOBPSU1",195,0)
 ;        (o) PSOFILL - Refill#
"RTN","PSOBPSU1",196,0)
 ;        (o) PSOCOB  - Payer Sequence
"RTN","PSOBPSU1",197,0)
 ;
"RTN","PSOBPSU1",198,0)
 ; Use $$RESPONSE^BPSOS03 to pull the following fields from the BPS
"RTN","PSOBPSU1",199,0)
 ; Response file, then display those fields.
"RTN","PSOBPSU1",200,0)
 ;  - Total Amount Paid, field #509
"RTN","PSOBPSU1",201,0)
 ;  - Ingredient Cost Paid, field #506
"RTN","PSOBPSU1",202,0)
 ;  - Amount of Copay/Coinsurance, field #518
"RTN","PSOBPSU1",203,0)
 ;  - Dispensing Fee Paid, field #507
"RTN","PSOBPSU1",204,0)
 ;  - Amount Applied to Periodic Deductible, field #517
"RTN","PSOBPSU1",205,0)
 ;  - Remaining Deductible Amount, field #513
"RTN","PSOBPSU1",206,0)
 ;
"RTN","PSOBPSU1",207,0)
 N PSORESP,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","PSOBPSU1",208,0)
 ;
"RTN","PSOBPSU1",209,0)
 I '$G(PSORX) Q                ; If no Rx passed in, Quit out.
"RTN","PSOBPSU1",210,0)
 I $G(PSOFILL)="" S PSOFILL=0  ; Default Fill to 0 if none.
"RTN","PSOBPSU1",211,0)
 I '$G(PSOCOB) S PSOCOB=1      ; Default COB to 1/primary if none.
"RTN","PSOBPSU1",212,0)
 ;
"RTN","PSOBPSU1",213,0)
 S PSORESP=$$RESPONSE^BPSOS03(PSORX,PSOFILL,PSOCOB)  ; IA 6226.
"RTN","PSOBPSU1",214,0)
 I PSORESP="" Q
"RTN","PSOBPSU1",215,0)
 ;
"RTN","PSOBPSU1",216,0)
 W !,"Total Amount Paid: ",$P(PSORESP,U,1)
"RTN","PSOBPSU1",217,0)
 W ?39,"Ingredient Cost Paid: ",$P(PSORESP,U,2)
"RTN","PSOBPSU1",218,0)
 W !,"Amount of Copay/Coinsurance: ",$P(PSORESP,U,3)
"RTN","PSOBPSU1",219,0)
 W ?39,"Dispensing Fee Paid: ",$P(PSORESP,U,4)
"RTN","PSOBPSU1",220,0)
 W !,"Amount Applied to Periodic Deductible: ",$P(PSORESP,U,5)
"RTN","PSOBPSU1",221,0)
 W !,"Remaining Deductible Amount: ",$P(PSORESP,U,6)
"RTN","PSOBPSU1",222,0)
 ;
"RTN","PSOBPSU1",223,0)
 S DIR(0)="E",DIR("A")="Press Return to continue"
"RTN","PSOBPSU1",224,0)
 W !
"RTN","PSOBPSU1",225,0)
 D ^DIR
"RTN","PSOBPSU1",226,0)
 W !
"RTN","PSOBPSU1",227,0)
 ;
"RTN","PSOBPSU1",228,0)
 Q
"RTN","PSOBPSU1",229,0)
 ;
"RTN","PSOBPSU1",230,0)
REVERSE(RX,RFL,FROM,RSN,RTXT,IGRL,NDC) ; - Reverse a claim and close all OPEN/UNRESOLVED Rejects
"RTN","PSOBPSU1",231,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",232,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",233,0)
 ;       (r) FROM - Function within OP (See BWHERE param. in EN^BPSNCPDP api)
"RTN","PSOBPSU1",234,0)
 ;       (o) RSN  - Close Reason (2:RX ON HOLD;4: RX RETURNED TO STOCK,5:RX DELETED,etc...)
"RTN","PSOBPSU1",235,0)
 ;       (o) RTXT - Close Reason TEXT (Usually no passed if RSN is passed)
"RTN","PSOBPSU1",236,0)
 ;       (o) IGRL - Ignore RELEASE DATE, reverse anyway  
"RTN","PSOBPSU1",237,0)
 ;       (o) NDC  - NDC number related to the reversal (Note: might be an invalid NDC)
"RTN","PSOBPSU1",238,0)
 I '$D(RFL) S RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",239,0)
 N PSOET S PSOET=$$PSOET^PSOREJP3(RX,RFL)   ;cnf, PSO*7.0*358
"RTN","PSOBPSU1",240,0)
 I 'PSOET,$$STATUS^PSOBPSUT(RX,RFL)="" Q    ;cnf, PSO*7.0*358, add PSOET check, allow reversal for TRICARE non-billable reject
"RTN","PSOBPSU1",241,0)
 N RESP,STS,ACT,STAT,DA,STATUS,NOACT,REVECME S RSN=+$G(RSN),RTXT=$G(RTXT),REVECME=1
"RTN","PSOBPSU1",242,0)
 I RTXT="",RSN D
"RTN","PSOBPSU1",243,0)
 . S:RSN=2 RTXT="RX PLACED ON HOLD" S:RSN=3 RTXT="RX SUSPENDED" S:RSN=4 RTXT="RX RETURNED TO STOCK"
"RTN","PSOBPSU1",244,0)
 . S:RSN=5 RTXT="RX DELETED" S:RSN=7 RTXT="RX DISCONTINUED" S:RSN=8 RTXT="RX EDITED"
"RTN","PSOBPSU1",245,0)
 D CLSALL^PSOREJUT(RX,RFL,DUZ,RSN,RTXT)
"RTN","PSOBPSU1",246,0)
 I '$G(IGRL),$$RXRLDT^PSOBPSUT(RX,RFL) Q
"RTN","PSOBPSU1",247,0)
 ; - Reseting the Re-transmission flag if Rx is being suspended
"RTN","PSOBPSU1",248,0)
 I RSN=3!($$GET1^DIQ(52,RX,100,"I")=5) D RETRXF^PSOREJU2(RX,RFL,1)
"RTN","PSOBPSU1",249,0)
 S STATUS=$$STATUS^PSOBPSUT(RX,RFL),NOACT=0
"RTN","PSOBPSU1",250,0)
 I STATUS'="E PAYABLE",STATUS'="IN PROGRESS",STATUS'="E REVERSAL REJECTED",STATUS'="E REVERSAL STRANDED",STATUS'="E DUPLICATE" S NOACT=1
"RTN","PSOBPSU1",251,0)
 ; Only perform ECME reversal for a released CMOP if rx/fill is Discontinued.
"RTN","PSOBPSU1",252,0)
 I FROM="DC",$$CMOP^PSOBPSUT(RX,RFL) S REVECME=0
"RTN","PSOBPSU1",253,0)
 I REVECME S RESP=$$EN^BPSNCPDP(RX,RFL,$$DOS(RX,RFL),FROM,$$GETNDC^PSONDCUT(RX,RFL),RTXT)
"RTN","PSOBPSU1",254,0)
 N PSOTRIC S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOBPSU1",255,0)
 ; - Logging ECME Act Log
"RTN","PSOBPSU1",256,0)
 I '$G(NOACT),REVECME D
"RTN","PSOBPSU1",257,0)
 . S ACT=$S(PSOTRIC=1:"TRICARE ",PSOTRIC=2:"CHAMPVA ",1:"")_"Reversal sent to ECME: "_RTXT_$S($G(NDC)'="":" ("_NDC_")",1:"")_$$STS(RX,RFL,+RESP)
"RTN","PSOBPSU1",258,0)
 . D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOBPSU1",259,0)
 Q
"RTN","PSOBPSU1",260,0)
 ;
"RTN","PSOBPSU1",261,0)
DOS(RX,RFL,DATE) ; Return the Date Of Service for ECME
"RTN","PSOBPSU1",262,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",263,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",264,0)
 ;       (o) DATE - Possible Date Of Service
"RTN","PSOBPSU1",265,0)
 ;Output:    DOS  - Actual Date Of Service
"RTN","PSOBPSU1",266,0)
 I '$D(RFL) S RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",267,0)
 ; - Retrieving RELEASE DATE from file 52 if DATE not passed in
"RTN","PSOBPSU1",268,0)
 I $G(DATE)="" S DATE=$$RXRLDT^PSOBPSUT(RX,RFL)
"RTN","PSOBPSU1",269,0)
 ; - If no date or future date, use today's date
"RTN","PSOBPSU1",270,0)
 I DATE>DT!'DATE S DATE=$$DT^XLFDT
"RTN","PSOBPSU1",271,0)
 Q (DATE\1)
"RTN","PSOBPSU1",272,0)
 ;
"RTN","PSOBPSU1",273,0)
RELEASE(RX,RFL,USR) ; - Notifies IB that the Rx was RELEASED
"RTN","PSOBPSU1",274,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",275,0)
 ;       (o) RFL  - Refill # (Default: most recent)
"RTN","PSOBPSU1",276,0)
 ;       (o) USR  - User responsible for releasing the Rx (Default: .5 - Postmaster)
"RTN","PSOBPSU1",277,0)
 N IBAR,RXAR,RFAR,PSOIBN
"RTN","PSOBPSU1",278,0)
 S:'$D(RFL) RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",279,0)
 S:'$D(USR) USR=.5
"RTN","PSOBPSU1",280,0)
 D GETS^DIQ(52,RX_",",".01;2;6;7;8;22","I","RXAR")
"RTN","PSOBPSU1",281,0)
 S DFN=+$G(RXAR(52,RX_",",2,"I"))
"RTN","PSOBPSU1",282,0)
 S IBAR("PRESCRIPTION")=RX,IBAR("RX NO")=$G(RXAR(52,RX_",",.01,"I"))
"RTN","PSOBPSU1",283,0)
 S IBAR("CLAIMID")=$P($$CLAIM^BPSBUTL(RX,RFL),U,6)
"RTN","PSOBPSU1",284,0)
 S IBAR("USER")=USR
"RTN","PSOBPSU1",285,0)
 S IBAR("DRUG")=RXAR(52,RX_",",6,"I"),IBAR("NDC")=$$GETNDC^PSONDCUT(RX,RFL)
"RTN","PSOBPSU1",286,0)
 S IBAR("FILL NUMBER")=RFL,IBAR("DOS")=$$DOS(RX,RFL),IBAR("RELEASE DATE")=$$RXRLDT^PSOBPSUT(RX,RFL)
"RTN","PSOBPSU1",287,0)
 S IBAR("QTY")=$G(RXAR(52,RX_",",7,"I")),IBAR("DAYS SUPPLY")=$G(RXAR(52,RX_",",8,"I"))
"RTN","PSOBPSU1",288,0)
 I RFL D
"RTN","PSOBPSU1",289,0)
 . D GETS^DIQ(52.1,RFL_","_RX_",",".01;1;1.1","I","RFAR")
"RTN","PSOBPSU1",290,0)
 . S IBAR("QTY")=$G(RFAR(52.1,RFL_","_RX_",",1,"I"))
"RTN","PSOBPSU1",291,0)
 . S IBAR("DAYS SUPPLY")=$G(RFAR(52.1,RFL_","_RX_",",1.1,"I"))
"RTN","PSOBPSU1",292,0)
 S IBAR("STATUS")="RELEASED"
"RTN","PSOBPSU1",293,0)
 S PSOIBN=$$STORESP^IBNCPDP(DFN,.IBAR)
"RTN","PSOBPSU1",294,0)
 Q
"RTN","PSOBPSU1",295,0)
 ;
"RTN","PSOBPSU1",296,0)
LSTRFL(RX) ;  - Returns the latest fill for the Rx
"RTN","PSOBPSU1",297,0)
 ; Input: (r) RX     - Rx IEN (#52)
"RTN","PSOBPSU1",298,0)
 ;Output:     LSTRFL - Most recent refill #
"RTN","PSOBPSU1",299,0)
 N I,LSTRFL
"RTN","PSOBPSU1",300,0)
 S (I,LSTRFL)=0 F  S I=$O(^PSRX(RX,1,I)) Q:'I  S LSTRFL=I
"RTN","PSOBPSU1",301,0)
 Q LSTRFL
"RTN","PSOBPSU1",302,0)
 ;
"RTN","PSOBPSU1",303,0)
ECMEACT(RX,RFL,COMM,USR) ; - Add an Act to the ECME Act Log (FILE 52)
"RTN","PSOBPSU1",304,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",305,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",306,0)
 ;       (r) COMM - Comments (up to 100 characters)
"RTN","PSOBPSU1",307,0)
 ;       (o) USR  - User logging the comments (Default: DUZ)
"RTN","PSOBPSU1",308,0)
 S:'$D(RFL) RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOBPSU1",309,0)
 D RXACT^PSOBPSU2(RX,RFL,COMM,"M",+$G(USR))
"RTN","PSOBPSU1",310,0)
 Q
"RTN","PSOBPSU1",311,0)
 ;
"RTN","PSOBPSU1",312,0)
STS(RX,RFL,RSP) ; Adds the Status to the ECME Act Log according to Rx/fill claim status Response
"RTN","PSOBPSU1",313,0)
 N STS
"RTN","PSOBPSU1",314,0)
 S STS=$S($$STATUS^PSOBPSUT(RX,RFL)'="IN PROGRESS"&($$STATUS^PSOBPSUT(RX,RFL)'=""):"-"_$$STATUS^PSOBPSUT(RX,RFL),1:"")
"RTN","PSOBPSU1",315,0)
 S:+RSP=1 STS="-NO SUBMISSION THROUGH ECME" S:+RSP=3 STS="-NO REVERSAL NEEDED" S:+RSP=4 STS="-NOT PROCESSED"
"RTN","PSOBPSU1",316,0)
 S:+RSP=5 STS="-SOFTWARE ERROR"_$S($P($G(RESP),"^",2)'="":" ("_$P(RESP,"^",2)_")",1:"")
"RTN","PSOBPSU1",317,0)
 I +RSP=2,$$STATUS^PSOBPSUT(RX,RFL)'="" S STS="-NOT BILLABLE:"_$S(PSOELIG="T":"TRICARE",PSOELIG="C":"CHAMPVA",1:"")_":"_$P(RSP,"^",2)
"RTN","PSOBPSU1",318,0)
 Q STS
"RTN","PSOBPSU2")
0^8^B63271095
"RTN","PSOBPSU2",1,0)
PSOBPSU2 ;BIRM/MFR - BPS (ECME) Utilities 2 ;10/15/04
"RTN","PSOBPSU2",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**260,287,289,341,290,358,359,385,421,459,482**;DEC 1997;Build 44
"RTN","PSOBPSU2",3,0)
 ;Reference to File 200 - NEW PERSON supported by IA 10060
"RTN","PSOBPSU2",4,0)
 ;Reference to DUR1^BPSNCPD3 supported by IA 4560
"RTN","PSOBPSU2",5,0)
 ;Reference to $$NCPDPQTY^PSSBPSUT supported by IA 4992
"RTN","PSOBPSU2",6,0)
 ;Reference to $$CLAIM^BPSBUTL supported by IA 4719
"RTN","PSOBPSU2",7,0)
 ; 
"RTN","PSOBPSU2",8,0)
MWC(RX,RFL) ; Returns whether a prescription is (M)ail, (W)indow or (C)MOP
"RTN","PSOBPSU2",9,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU2",10,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU2",11,0)
 ;Output: "M": MAIL / "W": WINDOW / "C": CMOP
"RTN","PSOBPSU2",12,0)
 ;
"RTN","PSOBPSU2",13,0)
 N MWC
"RTN","PSOBPSU2",14,0)
 ;
"RTN","PSOBPSU2",15,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOBPSU2",16,0)
 ;
"RTN","PSOBPSU2",17,0)
 ; If RFL is not zero, then pull the value from MAIL/WINDOW on the
"RTN","PSOBPSU2",18,0)
 ; REFILL multiple. Otherwise, pull the value from MAIL/WINDOW
"RTN","PSOBPSU2",19,0)
 ; at the Prescription level.
"RTN","PSOBPSU2",20,0)
 I RFL S MWC=$$GET1^DIQ(52.1,RFL_","_RX,2,"I")
"RTN","PSOBPSU2",21,0)
 E  S MWC=$$GET1^DIQ(52,RX,11,"I")
"RTN","PSOBPSU2",22,0)
 S:MWC="" MWC="W"
"RTN","PSOBPSU2",23,0)
 I MWC'="M",MWC'="W" Q MWC   ; If neither Mail nor Window, quit now and skip other checks
"RTN","PSOBPSU2",24,0)
 ;
"RTN","PSOBPSU2",25,0)
 ; - Checking the RX SUSPENSE file (#52.5)
"RTN","PSOBPSU2",26,0)
 ; File# 52, field# 100 is STATUS; 5=Suspended
"RTN","PSOBPSU2",27,0)
 I $$GET1^DIQ(52,RX,100,"I")=5 D
"RTN","PSOBPSU2",28,0)
 . N RXS S RXS=+$O(^PS(52.5,"B",RX,0)) Q:'RXS
"RTN","PSOBPSU2",29,0)
 . ; File#52.5, RX SUSPENSE; field# 3, CMOP INDICATOR
"RTN","PSOBPSU2",30,0)
 . ; If the CMOP INDICATOR is not blank, then this is CMOP...
"RTN","PSOBPSU2",31,0)
 . I $$GET1^DIQ(52.5,RXS,3,"I")'="" S MWC="C" Q
"RTN","PSOBPSU2",32,0)
 . ; ...otherwise, this is a Mail fill.
"RTN","PSOBPSU2",33,0)
 . S MWC="M"
"RTN","PSOBPSU2",34,0)
 ;
"RTN","PSOBPSU2",35,0)
 ; - Checking the CMOP EVENT sub-file (#52.01)
"RTN","PSOBPSU2",36,0)
 I MWC'="C" D
"RTN","PSOBPSU2",37,0)
 . N CMP S CMP=0
"RTN","PSOBPSU2",38,0)
 . F  S CMP=$O(^PSRX(RX,4,CMP)) Q:'CMP  D  I MWC="C" Q
"RTN","PSOBPSU2",39,0)
 . . I $$GET1^DIQ(52.01,CMP_","_RX,2,"I")=RFL S MWC="C"
"RTN","PSOBPSU2",40,0)
 ;
"RTN","PSOBPSU2",41,0)
 Q MWC
"RTN","PSOBPSU2",42,0)
 ;
"RTN","PSOBPSU2",43,0)
RXACT(RX,RFL,COMM,TYPE,USR) ; - Add an Activity to the ECME Activity Log (PRESCRIPTION file)
"RTN","PSOBPSU2",44,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU2",45,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU2",46,0)
 ;       (r) COMM - Comments (up to 100 characters)
"RTN","PSOBPSU2",47,0)
 ;       (r) TYPE - Comments type: (M-ECME,E-Edit, etc...) See file #52 DD for all values
"RTN","PSOBPSU2",48,0)
 ;       (o) USR  - User logging the comments (Default: DUZ)
"RTN","PSOBPSU2",49,0)
 ;
"RTN","PSOBPSU2",50,0)
 S:'$D(RFL) RFL=$$LSTRFL^PSOBPSU1(RX) S:'$D(USR) USR=DUZ
"RTN","PSOBPSU2",51,0)
 S:'$D(^VA(200,+USR,0)) USR=DUZ S COMM=$E($G(COMM),1,100)
"RTN","PSOBPSU2",52,0)
 ;
"RTN","PSOBPSU2",53,0)
 I COMM="" Q
"RTN","PSOBPSU2",54,0)
 I '$D(^PSRX(RX)) Q
"RTN","PSOBPSU2",55,0)
 ;
"RTN","PSOBPSU2",56,0)
 N PSOTRIC S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOBPSU2",57,0)
 I PSOTRIC=1,$E(COMM,1,7)'="TRICARE" S COMM=$E("TRICARE-"_COMM,1,100)
"RTN","PSOBPSU2",58,0)
 I PSOTRIC=2,$E(COMM,1,7)'="CHAMPVA" S COMM=$E("CHAMPVA-"_COMM,1,100)
"RTN","PSOBPSU2",59,0)
 N X,DIC,DA,DD,DO,DR,DINUM,Y,DLAYGO
"RTN","PSOBPSU2",60,0)
 S DA(1)=RX,DIC="^PSRX("_RX_",""A"",",DLAYGO=52.3,DIC(0)="L"
"RTN","PSOBPSU2",61,0)
 S DIC("DR")=".02///"_TYPE_";.03////"_USR_";.04///"_$S(TYPE'="M"&(RFL>5):RFL+1,1:RFL)_";.05///"_COMM
"RTN","PSOBPSU2",62,0)
 S X=$$NOW^XLFDT() D FILE^DICN
"RTN","PSOBPSU2",63,0)
 Q
"RTN","PSOBPSU2",64,0)
 ;
"RTN","PSOBPSU2",65,0)
ECMENUM(RX,RFL) ; Returns the ECME number for a specific prescription and fill
"RTN","PSOBPSU2",66,0)
 N ECMENUM
"RTN","PSOBPSU2",67,0)
 I $G(RX)="" Q ""
"RTN","PSOBPSU2",68,0)
 ; Check ECME # for Refill passed in
"RTN","PSOBPSU2",69,0)
 I $G(RFL)'="" S ECMENUM=$$GETECME(RX,RFL) Q ECMENUM
"RTN","PSOBPSU2",70,0)
 ; If Refill is null, check last refill
"RTN","PSOBPSU2",71,0)
 S RFL=$$LSTRFL^PSOBPSU1(RX),ECMENUM=$$GETECME(RX,RFL) I ECMENUM'="" Q ECMENUM
"RTN","PSOBPSU2",72,0)
 ; If no ECME # for last refill, step back through refills in reverse order
"RTN","PSOBPSU2",73,0)
 F  S RFL=RFL-1 Q:(RFL<0)!(ECMENUM'="")  S ECMENUM=$$GETECME(RX,RFL)
"RTN","PSOBPSU2",74,0)
 Q ECMENUM
"RTN","PSOBPSU2",75,0)
 ;
"RTN","PSOBPSU2",76,0)
GETECME(RX,RFL) ;
"RTN","PSOBPSU2",77,0)
 ;Internal function used by ECMENUM to get the ECME # from BPS
"RTN","PSOBPSU2",78,0)
 N ECMENUM
"RTN","PSOBPSU2",79,0)
 I $G(RX)="" Q ""
"RTN","PSOBPSU2",80,0)
 I $G(RFL)="" Q ""
"RTN","PSOBPSU2",81,0)
 S ECMENUM=$P($$CLAIM^BPSBUTL(RX,RFL),U,6)
"RTN","PSOBPSU2",82,0)
 Q ECMENUM
"RTN","PSOBPSU2",83,0)
 ;
"RTN","PSOBPSU2",84,0)
RXNUM(ECME) ; Returns the Rx number for a specific ECME number
"RTN","PSOBPSU2",85,0)
 ;
"RTN","PSOBPSU2",86,0)
 N FOUND,MAX,LFT,RAD,I,DIR,RX,X,Y,DIRUT
"RTN","PSOBPSU2",87,0)
 S ECME=+ECME,LFT=0,FOUND=0
"RTN","PSOBPSU2",88,0)
 S MAX=$O(^PSRX(9999999999999),-1)  ; MAX = largest Rx ien on file
"RTN","PSOBPSU2",89,0)
 ;
"RTN","PSOBPSU2",90,0)
 ; Attempt left digit matching logic in this case only
"RTN","PSOBPSU2",91,0)
 I $L(MAX)>7,$L(ECME)'>7 D
"RTN","PSOBPSU2",92,0)
 . S LFT=$E(MAX,1,$L(MAX)-7)  ; LFT = left most digits
"RTN","PSOBPSU2",93,0)
 . F RAD=LFT:-1:0 S RX=RAD*10000000+ECME I $D(^PSRX(RX,0)),$$ECMENUM(RX)'="" S FOUND=FOUND+1,FOUND(FOUND)=RX
"RTN","PSOBPSU2",94,0)
 . Q
"RTN","PSOBPSU2",95,0)
 ;
"RTN","PSOBPSU2",96,0)
 ; Otherwise attempt a normal lookup
"RTN","PSOBPSU2",97,0)
 E  S RX=ECME I $D(^PSRX(RX,0)),$$ECMENUM(RX)'="" S FOUND=FOUND+1,FOUND(FOUND)=RX
"RTN","PSOBPSU2",98,0)
 ;
"RTN","PSOBPSU2",99,0)
 I 'FOUND S FOUND=-1 G RXNUMX            ; Rx not found
"RTN","PSOBPSU2",100,0)
 I FOUND=1 S FOUND=FOUND(1) G RXNUMX     ; exactly 1 found
"RTN","PSOBPSU2",101,0)
 ;
"RTN","PSOBPSU2",102,0)
 ; More than 1 found so build a list and ask
"RTN","PSOBPSU2",103,0)
 W ! F I=1:1:FOUND W !?5,I,". ",$$GET1^DIQ(52,FOUND(I),.01),?25,$$GET1^DIQ(52,FOUND(I),6)
"RTN","PSOBPSU2",104,0)
 W ! S DIR(0)="NA^1:"_FOUND,DIR("A")="Select one: ",DIR("B")=1
"RTN","PSOBPSU2",105,0)
 D ^DIR I $D(DIRUT) S FOUND=-1 G RXNUMX
"RTN","PSOBPSU2",106,0)
 S FOUND=FOUND(Y)
"RTN","PSOBPSU2",107,0)
 ;
"RTN","PSOBPSU2",108,0)
RXNUMX ;
"RTN","PSOBPSU2",109,0)
 Q FOUND
"RTN","PSOBPSU2",110,0)
 ;
"RTN","PSOBPSU2",111,0)
ELIG(RX,RFL,PSOELIG) ;Stores eligibility flag
"RTN","PSOBPSU2",112,0)
 I RFL>0,'$D(^PSRX(RX,1,RFL,0)) QUIT
"RTN","PSOBPSU2",113,0)
 N DA,DIE,X,Y,PSOTRIC
"RTN","PSOBPSU2",114,0)
 I 'RFL S DA=RX,DIE="^PSRX(",DR="85///"_PSOELIG D ^DIE
"RTN","PSOBPSU2",115,0)
 I RFL S DA=RFL,DA(1)=RX,DIE="^PSRX("_DA(1)_",1,",DR="85///"_PSOELIG D ^DIE
"RTN","PSOBPSU2",116,0)
 Q
"RTN","PSOBPSU2",117,0)
 ;
"RTN","PSOBPSU2",118,0)
ECMESTAT(RX,RFL) ;called from local mail
"RTN","PSOBPSU2",119,0)
 ;Input: 
"RTN","PSOBPSU2",120,0)
 ; RX = Prescription File IEN
"RTN","PSOBPSU2",121,0)
 ; RFL = Refill
"RTN","PSOBPSU2",122,0)
 ;Output:
"RTN","PSOBPSU2",123,0)
 ; 0 for not allowed to print from suspense
"RTN","PSOBPSU2",124,0)
 ; 1 for allowed to print from suspense
"RTN","PSOBPSU2",125,0)
 ;
"RTN","PSOBPSU2",126,0)
 N STATUS,PSOTRIC
"RTN","PSOBPSU2",127,0)
 S STATUS=$$STATUS^PSOBPSUT(RX,RFL)
"RTN","PSOBPSU2",128,0)
 ;IN PROGRESS claims - try again.  If still IN PROGRESS, do not allow to print
"RTN","PSOBPSU2",129,0)
 I STATUS["IN PROGRESS" H 5 S STATUS=$$STATUS^PSOBPSUT(RX,RFL) I STATUS["IN PROGRESS" Q 0
"RTN","PSOBPSU2",130,0)
 ;
"RTN","PSOBPSU2",131,0)
 ;no ECME status, allow to print.  This will eliminate 90% of the cases
"RTN","PSOBPSU2",132,0)
 I STATUS="" Q 1
"RTN","PSOBPSU2",133,0)
 ;
"RTN","PSOBPSU2",134,0)
 ;check for suspense hold date/host reject errors
"RTN","PSOBPSU2",135,0)
 I $$DUR(RX,RFL)=0 Q 0
"RTN","PSOBPSU2",136,0)
 ;
"RTN","PSOBPSU2",137,0)
 ;check for any TRICARE/CHAMPVA rejects, not allowed to go to print until resolved.
"RTN","PSOBPSU2",138,0)
 ;But allow to print if RX/RFL is in the TRI/CVA Audit Log with no unresolved rejects
"RTN","PSOBPSU2",139,0)
 S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,.PSOTRIC)
"RTN","PSOBPSU2",140,0)
 I PSOTRIC,STATUS'["PAYABLE",$$FIND^PSOREJUT(RX,RFL,,,1) Q 0  ; unresolved TRI/CVA rejects - no print  *421
"RTN","PSOBPSU2",141,0)
 I PSOTRIC,STATUS'["PAYABLE",$$TRIAUD^PSOREJU3(RX,RFL) Q 1    ; allow to print - on TRI/CVA Audit log  *421
"RTN","PSOBPSU2",142,0)
 ;
"RTN","PSOBPSU2",143,0)
 ;DUR (88)/RTS (79)/RRR reject codes are not allowed to print until resolved.
"RTN","PSOBPSU2",144,0)
 I $$FIND^PSOREJUT(RX,RFL,,"79,88",,1) Q 0
"RTN","PSOBPSU2",145,0)
 ;
"RTN","PSOBPSU2",146,0)
 Q 1
"RTN","PSOBPSU2",147,0)
 ;
"RTN","PSOBPSU2",148,0)
 ;Description:
"RTN","PSOBPSU2",149,0)
 ;This function checks to see if a RX should be submitted to ECME
"RTN","PSOBPSU2",150,0)
 ;Submit when:
"RTN","PSOBPSU2",151,0)
 ;  RX/Fill was not submitted before (STATUS="")
"RTN","PSOBPSU2",152,0)
 ;  Previous submission had Host Reject Error Code(s)
"RTN","PSOBPSU2",153,0)
 ;Input:
"RTN","PSOBPSU2",154,0)
 ;  RX = Prescription file #52 IEN
"RTN","PSOBPSU2",155,0)
 ;  RFL = Refill number
"RTN","PSOBPSU2",156,0)
 ;Returns:
"RTN","PSOBPSU2",157,0)
 ;  1 = OK to resubmit
"RTN","PSOBPSU2",158,0)
 ;  0 = Don't resubmit
"RTN","PSOBPSU2",159,0)
ECMEST2(RX,RFL) ;
"RTN","PSOBPSU2",160,0)
 N STATUS
"RTN","PSOBPSU2",161,0)
 S STATUS=$$STATUS^PSOBPSUT(RX,RFL)
"RTN","PSOBPSU2",162,0)
 ; Never submitted before, OK to submit
"RTN","PSOBPSU2",163,0)
 I STATUS="" Q 1
"RTN","PSOBPSU2",164,0)
 ; If status other than E REJECTED, don't resubmit
"RTN","PSOBPSU2",165,0)
 I STATUS'="E REJECTED" Q 0
"RTN","PSOBPSU2",166,0)
 ; Check for host reject codes(s)
"RTN","PSOBPSU2",167,0)
 Q $$HOSTREJ(RX,RFL,1)
"RTN","PSOBPSU2",168,0)
 ;
"RTN","PSOBPSU2",169,0)
 ;Description: ePharmacy
"RTN","PSOBPSU2",170,0)
 ;This subroutine checks an RX/FILL for Host Reject Errors returned
"RTN","PSOBPSU2",171,0)
 ;from previous ECME submissions. The host reject errors checked are M6, M8, NN, and 99.
"RTN","PSOBPSU2",172,0)
 ;Note that host reject errors do not pass to the pharmacy reject worklist so it's necessary
"RTN","PSOBPSU2",173,0)
 ;to check ECME for these type errors.
"RTN","PSOBPSU2",174,0)
 ;Input: 
"RTN","PSOBPSU2",175,0)
 ; RX = Prescription File IEN
"RTN","PSOBPSU2",176,0)
 ; RFL = Refill
"RTN","PSOBPSU2",177,0)
 ; ONE = Either 1 or 0 - Defaults to 1
"RTN","PSOBPSU2",178,0)
 ; If 1, At least ONE reject code associated with the RX/FILL must 
"RTN","PSOBPSU2",179,0)
 ;   match either M6, M8, NN, or 99.
"RTN","PSOBPSU2",180,0)
 ; If 0, ALL reject codes must match either M6, M8, NN, or 99
"RTN","PSOBPSU2",181,0)
 ; REJ = (o) reject information from called from routine to be passed back. (contains data returned from DUR1^BPSNCPD3)
"RTN","PSOBPSU2",182,0)
 ;Return:
"RTN","PSOBPSU2",183,0)
 ; 0 = no host rejects exists based on ONE parameter
"RTN","PSOBPSU2",184,0)
 ; 1 = host reject exists based on ONE parameter
"RTN","PSOBPSU2",185,0)
HOSTREJ(RX,RFL,ONE) ; called from PSXRPPL2 and this routine
"RTN","PSOBPSU2",186,0)
 N IDX,TXT,CODE,HRCODE,HRQUIT,RETV,REJ,I
"RTN","PSOBPSU2",187,0)
 S IDX="",(RETV,HRQUIT)=0
"RTN","PSOBPSU2",188,0)
 I '$D(ONE) S ONE=1
"RTN","PSOBPSU2",189,0)
 ;for print from suspense there will only be primary insurance or an index of 1 in REJ array
"RTN","PSOBPSU2",190,0)
 D DUR1^BPSNCPD3(RX,RFL,.REJ) ; Get reject list from last submission if not present
"RTN","PSOBPSU2",191,0)
 S TXT=$G(REJ(1,"REJ CODE LST"))
"RTN","PSOBPSU2",192,0)
 Q:TXT="" 0
"RTN","PSOBPSU2",193,0)
 I ONE=0,TXT'["," S ONE=1
"RTN","PSOBPSU2",194,0)
 F I=1:1:$L(TXT,",") S CODE=$P(TXT,",",I) D  Q:HRQUIT
"RTN","PSOBPSU2",195,0)
 . F HRCODE=99,"M6","M8","NN" D  Q:HRQUIT
"RTN","PSOBPSU2",196,0)
 . . I CODE=HRCODE S RETV=1 I ONE S HRQUIT=1 Q
"RTN","PSOBPSU2",197,0)
 . . I CODE'=HRCODE,RETV=1 S RETV=0,HRQUIT=1 Q
"RTN","PSOBPSU2",198,0)
 Q RETV
"RTN","PSOBPSU2",199,0)
 ;
"RTN","PSOBPSU2",200,0)
 ;Description: 
"RTN","PSOBPSU2",201,0)
 ;Input: RX = Prescription file #52 IEN
"RTN","PSOBPSU2",202,0)
 ; RFL = Refill number
"RTN","PSOBPSU2",203,0)
 ;Returns: A value of 0 (zero) will be returned when reject codes M6, M8,
"RTN","PSOBPSU2",204,0)
 ;NN, and 99 are present OR if on susp hold which means the prescription should not 
"RTN","PSOBPSU2",205,0)
 ;be printed from suspense. Otherwise, a value of 1(one) will be returned.
"RTN","PSOBPSU2",206,0)
DUR(RX,RFL) ;
"RTN","PSOBPSU2",207,0)
 N REJ,IDX,TXT,CODE,SHOLD,SHCODE,ESTAT,SHDT
"RTN","PSOBPSU2",208,0)
 S SHOLD=1,IDX=""
"RTN","PSOBPSU2",209,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOBPSU2",210,0)
 S SHDT=$$SHDT(RX,RFL) ; Get suspense hold date for rx/refill
"RTN","PSOBPSU2",211,0)
 I SHDT'="",SHDT'<$$FMADD^XLFDT(DT,1) Q 0
"RTN","PSOBPSU2",212,0)
 I $$HOSTREJ^PSOBPSU2(RX,RFL,1) I SHDT="" S SHOLD=0 D SHDTLOG(RX,RFL)
"RTN","PSOBPSU2",213,0)
 Q SHOLD
"RTN","PSOBPSU2",214,0)
 ;
"RTN","PSOBPSU2",215,0)
 ;Description: This subroutine sets the EPHARMACY SUSPENSE HOLD DATE field
"RTN","PSOBPSU2",216,0)
 ;for the rx or refill to tomorrow and adds an entry to the SUSPENSE Activity Log.
"RTN","PSOBPSU2",217,0)
 ;Input: RX = Prescription File IEN
"RTN","PSOBPSU2",218,0)
 ; RFL = Refill
"RTN","PSOBPSU2",219,0)
SHDTLOG(RX,RFL) ;
"RTN","PSOBPSU2",220,0)
 N DA,DIE,DR,COMM,SHDT
"RTN","PSOBPSU2",221,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOBPSU2",222,0)
 S SHDT=$$FMADD^XLFDT(DT,1)
"RTN","PSOBPSU2",223,0)
 S COMM="SUSPENSE HOLD until "_$$FMTE^XLFDT(SHDT,"2D")_" due to host reject error."
"RTN","PSOBPSU2",224,0)
 I RFL=0 S DA=RX,DIE="^PSRX(",DR="86///"_SHDT D ^DIE
"RTN","PSOBPSU2",225,0)
 E  S DA=RFL,DA(1)=RX,DIE="^PSRX("_DA(1)_",1,",DR="86///"_SHDT D ^DIE
"RTN","PSOBPSU2",226,0)
 D RXACT(RX,RFL,COMM,"S",+$G(DUZ)) ; Create Activity Log entry
"RTN","PSOBPSU2",227,0)
 Q
"RTN","PSOBPSU2",228,0)
 ;
"RTN","PSOBPSU2",229,0)
 ;Description: This function returns the EPHARMACY SUSPENSE HOLD DATE field
"RTN","PSOBPSU2",230,0)
 ;for the rx or refill
"RTN","PSOBPSU2",231,0)
 ;Input: RX = Prescription File IEN
"RTN","PSOBPSU2",232,0)
 ; RFL = Refill
"RTN","PSOBPSU2",233,0)
SHDT(RX,RFL) ;
"RTN","PSOBPSU2",234,0)
 N FILE,IENS
"RTN","PSOBPSU2",235,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOBPSU2",236,0)
 S FILE=$S(RFL=0:52,1:52.1),IENS=$S(RFL=0:RX_",",1:RFL_","_RX_",")
"RTN","PSOBPSU2",237,0)
 Q $$GET1^DIQ(FILE,IENS,86,"I")
"RTN","PSOBPSU2",238,0)
 ;
"RTN","PSOBPSU2",239,0)
ELOG(RESP) ; - due to size of PSOBPSU1 exceeding limit 
"RTN","PSOBPSU2",240,0)
 ; -Logs an ECME Activity Log if Rx Qty is different than Billing Qty
"RTN","PSOBPSU2",241,0)
 I '$G(RESP),$T(NCPDPQTY^PSSBPSUT)'="" D
"RTN","PSOBPSU2",242,0)
 . N DRUG,RXQTY,BLQTY,BLDU,Z
"RTN","PSOBPSU2",243,0)
 . S DRUG=$$GET1^DIQ(52,RX,6,"I")
"RTN","PSOBPSU2",244,0)
 . S RXQTY=$S('RFL:$$GET1^DIQ(52,RX,7,"I"),1:$$GET1^DIQ(52.1,RFL_","_RX,1))/1
"RTN","PSOBPSU2",245,0)
 . S Z=$$NCPDPQTY^PSSBPSUT(DRUG,RXQTY),BLQTY=Z/1,BLDU=$P(Z,"^",2)
"RTN","PSOBPSU2",246,0)
 . I RXQTY'=BLQTY D
"RTN","PSOBPSU2",247,0)
 . . D RXACT(RX,RFL,"BILLING QUANTITY submitted: "_$J(BLQTY,0,$L($P(BLQTY,".",2)))_" ("_BLDU_")","M",DUZ)
"RTN","PSOBPSU2",248,0)
 Q
"RTN","PSOBPSU2",249,0)
 ;
"RTN","PSOBPSU2",250,0)
UPDFL(RXREC,SUB,INDT) ;update fill date with release date when NDC changes at CMOP and OPAI auto-release
"RTN","PSOBPSU2",251,0)
 ;Input: RXREC = Prescription File IEN
"RTN","PSOBPSU2",252,0)
 ;         SUB = Refill
"RTN","PSOBPSU2",253,0)
 ;        INDT = Release date
"RTN","PSOBPSU2",254,0)
 N DA,DIE,DR,DTOUT,DUOUT,PSOX,SFN,DEAD,XOK,OLD,X,II,EXDAT,OFILLD,COM,CNT,RFCNT,RF  ;*459 - REMOVED SUB
"RTN","PSOBPSU2",255,0)
 S DEAD=0,SFN=""
"RTN","PSOBPSU2",256,0)
 S EXDAT=INDT I EXDAT["." S EXDAT=$P(EXDAT,".")
"RTN","PSOBPSU2",257,0)
 I '$D(SUB) S SUB=0 F II=0:0 S II=$O(^PSRX(RXREC,1,II)) Q:'II  S SUB=+II
"RTN","PSOBPSU2",258,0)
 I 'SUB S OFILLD=$$GET1^DIQ(52,RXREC,22,"I") Q:OFILLD=EXDAT  D
"RTN","PSOBPSU2",259,0)
 .S (X,OLD)=$P(^PSRX(RXREC,2),"^",2),DA=RXREC,DR="22///"_EXDAT_";101///"_EXDAT,DIE=52
"RTN","PSOBPSU2",260,0)
 .D ^DIE K DIE,DA
"RTN","PSOBPSU2",261,0)
 I SUB S (OLD,X)=+$P($G(^PSRX(RXREC,1,SUB,0)),"^"),DA(1)=RXREC,DA=SUB,OFILLD=$$GET1^DIQ(52.1,DA_","_RXREC,.01,"I") Q:OFILLD=EXDAT  D
"RTN","PSOBPSU2",262,0)
 . S DIE="^PSRX("_DA(1)_",1,",DR=".01///"_EXDAT D ^DIE K DIE S $P(^PSRX(RXREC,3),"^")=EXDAT
"RTN","PSOBPSU2",263,0)
 Q:$D(DTOUT)!($D(DUOUT))
"RTN","PSOBPSU2",264,0)
 S DA=RXREC
"RTN","PSOBPSU2",265,0)
 D AREC^PSOSUCH1
"RTN","PSOBPSU2",266,0)
FIN ;
"RTN","PSOBPSU2",267,0)
 Q
"RTN","PSOBPSU3")
0^1^B17460470
"RTN","PSOBPSU3",1,0)
PSOBPSU3 ;ALB/CFS - BPS (ECME) Utilities 3 ;08/27/15
"RTN","PSOBPSU3",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**448,482**;DEC 1997;Build 44
"RTN","PSOBPSU3",3,0)
 ; Reference to ^BPSVRX supported by IA #5723
"RTN","PSOBPSU3",4,0)
 ; Reference to ^BPSPSOU1 supported by IA #6248
"RTN","PSOBPSU3",5,0)
 ;
"RTN","PSOBPSU3",6,0)
RES(RXIEN,DFN) ; Resubmit a claim action from PSO HIDDEN ACTIONS
"RTN","PSOBPSU3",7,0)
 N ACTION,DIRUT,PSOCOB,PSOFILL,PSOFL,PSOFLZ,PSOELIG,REVREAS,VALID
"RTN","PSOBPSU3",8,0)
 S PSOFILL=$$FILL(RXIEN,DFN,.PSOFL)
"RTN","PSOBPSU3",9,0)
 I $D(DIRUT) G END
"RTN","PSOBPSU3",10,0)
 I PSOFILL="" W !!,"No claim was ever submitted for this prescription. Cannot resubmit." D PAUSE^VALM1 G END
"RTN","PSOBPSU3",11,0)
 S PSOELIG=$$ELIGDISP^PSOREJP1(RXIEN,PSOFILL)
"RTN","PSOBPSU3",12,0)
 ; Validate the claim.
"RTN","PSOBPSU3",13,0)
 S VALID=$$VAL^BPSPSOU1(RXIEN,PSOFILL,PSOELIG,"RES",.PSOCOB,.REVREAS) ;DBIA #6248
"RTN","PSOBPSU3",14,0)
 I 'VALID G END
"RTN","PSOBPSU3",15,0)
 I $$RXDEL(RXIEN,PSOFILL) D  D PAUSE^VALM1 G END
"RTN","PSOBPSU3",16,0)
 . W !!,"The claim cannot be Resubmitted since it has been deleted in Pharmacy."
"RTN","PSOBPSU3",17,0)
 ; Resubmit the claim to ECME
"RTN","PSOBPSU3",18,0)
 D ECMESND^PSOBPSU1(RXIEN,PSOFILL,,"ED",,,"RESUBMIT FROM RX EDIT SCREEN","","","","","","","",$G(PSOCOB))
"RTN","PSOBPSU3",19,0)
 I $$PTLBL^PSOREJP2(RXIEN,PSOFILL) S PSORX("PSOL",1)=RXIEN_","  ; Add Rx to Queue List
"RTN","PSOBPSU3",20,0)
 D PAUSE^VALM1
"RTN","PSOBPSU3",21,0)
 S VALMBCK="R"
"RTN","PSOBPSU3",22,0)
 Q
"RTN","PSOBPSU3",23,0)
 ;
"RTN","PSOBPSU3",24,0)
FILL(RXIEN,DFN,PSOFL) ;
"RTN","PSOBPSU3",25,0)
 N CNT,DIR,FILL,FLDT,PSOELIG,PSOET,PSOSTR,REFILL,RELDT,RF,RXNUM,X,Y
"RTN","PSOBPSU3",26,0)
 D FULL^VALM1
"RTN","PSOBPSU3",27,0)
 I '$G(RXIEN)!'$G(DFN) Q ""
"RTN","PSOBPSU3",28,0)
 ;
"RTN","PSOBPSU3",29,0)
 S RXNUM=$P($G(^PSRX(RXIEN,0)),U)
"RTN","PSOBPSU3",30,0)
 K PSOFL,PSOFLZ
"RTN","PSOBPSU3",31,0)
 ; Get refill dates and release dates
"RTN","PSOBPSU3",32,0)
 S REFILL=0 F  S REFILL=$O(^PSRX(RXIEN,1,REFILL)) Q:'REFILL  D
"RTN","PSOBPSU3",33,0)
 . S FLDT=$P($G(^PSRX(RXIEN,1,REFILL,0)),U)\1
"RTN","PSOBPSU3",34,0)
 . S RELDT=$P($G(^PSRX(RXIEN,1,REFILL,0)),U,18)\1
"RTN","PSOBPSU3",35,0)
 . S PSOFLZ(REFILL)=FLDT_U_RELDT
"RTN","PSOBPSU3",36,0)
 ; Get orignal RX fill date and release date
"RTN","PSOBPSU3",37,0)
 S FLDT=$P($G(^PSRX(RXIEN,2)),U)\1
"RTN","PSOBPSU3",38,0)
 S RELDT=$P($G(^PSRX(RXIEN,2)),U,13)\1
"RTN","PSOBPSU3",39,0)
 S PSOFLZ(0)=FLDT_U_RELDT
"RTN","PSOBPSU3",40,0)
 ; Check for any deleted fills that have ECME activity
"RTN","PSOBPSU3",41,0)
 D RFL^BPSVRX(RXIEN,.PSOFL)  ; DBIA #5723
"RTN","PSOBPSU3",42,0)
 I '$D(PSOFL) Q "" ; Not in BPS transaction file.
"RTN","PSOBPSU3",43,0)
 S RF="" F  S RF=$O(PSOFL(RF)) Q:RF=""  I '$D(PSOFLZ(RF)) S PSOFLZ(RF)=0_U_0
"RTN","PSOBPSU3",44,0)
 ;
"RTN","PSOBPSU3",45,0)
 S DIR(0)="S"
"RTN","PSOBPSU3",46,0)
 S DIR("L",1)="Rx# "_RXNUM_" has the following fills:"
"RTN","PSOBPSU3",47,0)
 S DIR("L",2)=""
"RTN","PSOBPSU3",48,0)
 S DIR("L",3)="    Fill#   Fill Date     Release Date"
"RTN","PSOBPSU3",49,0)
 S DIR("L",4)="    -----   ----------    ------------"
"RTN","PSOBPSU3",50,0)
 S CNT=0,PSOSTR=""
"RTN","PSOBPSU3",51,0)
 S RF="" F  S RF=$O(PSOFLZ(RF)) Q:RF=""  D
"RTN","PSOBPSU3",52,0)
 . S CNT=CNT+1
"RTN","PSOBPSU3",53,0)
 . S FLDT=$$FMTE^XLFDT($P(PSOFLZ(RF),U,1),"5Z") I 'FLDT S FLDT="    -     "
"RTN","PSOBPSU3",54,0)
 . S RELDT=$$FMTE^XLFDT($P(PSOFLZ(RF),U,2),"5Z") I 'RELDT S RELDT="    -     "
"RTN","PSOBPSU3",55,0)
 . I 'FLDT,'RELDT S (FLDT,RELDT)=" Deleted  "
"RTN","PSOBPSU3",56,0)
 . S $P(PSOSTR,";",CNT)=RF_":"_FLDT_"    "_RELDT
"RTN","PSOBPSU3",57,0)
 . S DIR("L",CNT+4)=$J(RF,7)_"     "_FLDT_"    "_RELDT
"RTN","PSOBPSU3",58,0)
 . Q
"RTN","PSOBPSU3",59,0)
 S DIR("L")=" "
"RTN","PSOBPSU3",60,0)
 S $P(DIR(0),U,2)=PSOSTR
"RTN","PSOBPSU3",61,0)
 S DIR("A")="Select Fill Number"
"RTN","PSOBPSU3",62,0)
 S DIR("B")=$O(PSOFLZ(""),-1)
"RTN","PSOBPSU3",63,0)
 I CNT=1 D
"RTN","PSOBPSU3",64,0)
 . S $P(DIR("L",1)," ",$L(DIR("L",1)," "))="fill:"    ; singular
"RTN","PSOBPSU3",65,0)
 . Q
"RTN","PSOBPSU3",66,0)
 W ! D ^DIR K DIR
"RTN","PSOBPSU3",67,0)
 S FILL=Y
"RTN","PSOBPSU3",68,0)
 Q FILL
"RTN","PSOBPSU3",69,0)
 ;
"RTN","PSOBPSU3",70,0)
VER(RXIEN,DFN) ; -- VER hidden action under protocol PSO HIDDEN ACTIONS
"RTN","PSOBPSU3",71,0)
 D FULL^VALM1
"RTN","PSOBPSU3",72,0)
 K ^TMP("PSOHDR_ARCHIVE",$J)
"RTN","PSOBPSU3",73,0)
 M ^TMP("PSOHDR_ARCHIVE",$J)=^TMP("PSOHDR",$J)
"RTN","PSOBPSU3",74,0)
 S BPSVRX("RXIEN")=RXIEN
"RTN","PSOBPSU3",75,0)
 D ^BPSVRX  ;DBIA #5723
"RTN","PSOBPSU3",76,0)
 M ^TMP("PSOHDR",$J)=^TMP("PSOHDR_ARCHIVE",$J)
"RTN","PSOBPSU3",77,0)
 K ^TMP("PSOHDR_ARCHIVE",$J)
"RTN","PSOBPSU3",78,0)
 S VALMBCK="R"
"RTN","PSOBPSU3",79,0)
 Q
"RTN","PSOBPSU3",80,0)
 ;
"RTN","PSOBPSU3",81,0)
REV(RXIEN,DFN) ; Reverse a claim action from PSO HIDDEN ACTIONS
"RTN","PSOBPSU3",82,0)
 N DIRUT,PSOCOB,PSOFILL,PSOFL,PSOFLZ,PSOELIG,REVREAS,VALID
"RTN","PSOBPSU3",83,0)
 S PSOFILL=$$FILL(RXIEN,DFN,.PSOFL)
"RTN","PSOBPSU3",84,0)
 I $D(DIRUT) G END
"RTN","PSOBPSU3",85,0)
 I PSOFILL="" W !!,"No claim was ever submitted for this prescription. Cannot reverse." D PAUSE^VALM1 G END
"RTN","PSOBPSU3",86,0)
 S PSOELIG=$$ELIGDISP^PSOREJP1(RXIEN,PSOFILL)
"RTN","PSOBPSU3",87,0)
 ; Validate the claim.
"RTN","PSOBPSU3",88,0)
 S VALID=$$VAL^BPSPSOU1(RXIEN,PSOFILL,PSOELIG,"REV",.PSOCOB,.REVREAS) ;DBIA #6248
"RTN","PSOBPSU3",89,0)
 I 'VALID G END
"RTN","PSOBPSU3",90,0)
 I $$RXDEL(RXIEN,PSOFILL) D  D PAUSE^VALM1 G END
"RTN","PSOBPSU3",91,0)
 . W !!,"The claim cannot be Reversed since it has been deleted in Pharmacy."
"RTN","PSOBPSU3",92,0)
 ; Submit the reversal to ECME
"RTN","PSOBPSU3",93,0)
 D ECMESND^PSOBPSU1(RXIEN,PSOFILL,"","OREV","","",REVREAS,"","","","","","","",$G(PSOCOB))
"RTN","PSOBPSU3",94,0)
 D PAUSE^VALM1
"RTN","PSOBPSU3",95,0)
 S VALMBCK="R"
"RTN","PSOBPSU3",96,0)
 Q
"RTN","PSOBPSU3",97,0)
 ;
"RTN","PSOBPSU3",98,0)
RXDEL(RXIEN,PSOFILL) ; EP - $$ is RX deleted?
"RTN","PSOBPSU3",99,0)
 ; For refills:  if the refill multiple is gone, it's been "deleted"
"RTN","PSOBPSU3",100,0)
 I $G(PSOFILL),'$P($G(^PSRX(RXIEN,1,PSOFILL,0)),U) Q 1
"RTN","PSOBPSU3",101,0)
 ; For first fill: look at the STATUS flag
"RTN","PSOBPSU3",102,0)
 I $P($G(^PSRX(RXIEN,0)),U,1)="" Q 1 ; shouldn't be missing but is
"RTN","PSOBPSU3",103,0)
 N X S X=$P($G(^PSRX(RXIEN,"STA")),U,1)
"RTN","PSOBPSU3",104,0)
 Q X=13 ; if status is DELETED
"RTN","PSOBPSU3",105,0)
 ;
"RTN","PSOBPSU3",106,0)
END ;
"RTN","PSOBPSU3",107,0)
 S VALMBCK="R"
"RTN","PSOBPSU3",108,0)
 Q
"RTN","PSOLBLN")
0^5^B80788445
"RTN","PSOLBLN",1,0)
PSOLBLN ;BIR/RTR - NEW PRINTS LABEL ;11/18/92
"RTN","PSOLBLN",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**16,36,71,107,110,117,135,233,251,387,379,367,383,318,482**;DEC 1997;Build 44
"RTN","PSOLBLN",3,0)
 ;External reference to ^PSDRUG supported by DBIA 221
"RTN","PSOLBLN",4,0)
 ;External reference to ^PS(55 supported by DBIA 2228
"RTN","PSOLBLN",5,0)
 ;External reference to ^VA(200 supported by DBIA 224
"RTN","PSOLBLN",6,0)
 ;External reference to ^SC( supported by DBIA 254
"RTN","PSOLBLN",7,0)
 ;Reference to IEN59^BPSOSRX supported by ICR# 4412
"RTN","PSOLBLN",8,0)
 ;Reference to LOG^BPSOSL supported by ICR# 6764
"RTN","PSOLBLN",9,0)
 ;
"RTN","PSOLBLN",10,0)
 K PSOSTLK,ZTKDRUG I $L($T(PSOSTALK^PSOTALK1)) D PSOSTALK^PSOTALK1 S PSOSTLK=1 ; PRINT SCRIPTALK LABEL IF APPLICABLE
"RTN","PSOLBLN",11,0)
 I $G(IOS),$G(PSOBARS) I $G(PSOBAR0)=""!($G(PSOBAR1)="") S PSOIOS=IOS D DEVBAR^PSOBMST
"RTN","PSOLBLN",12,0)
 I $G(DFN) D ADD^VADPT
"RTN","PSOLBLN",13,0)
 I '$G(COPIES) S COPIES=""
"RTN","PSOLBLN",14,0)
 S ADDR(33)=$G(VAPA(4))_", "_$P($G(VAPA(5)),"^",2)_"  "_$S($G(VAPA(11))]"":$P($G(VAPA(11)),"^",2),1:$G(VAPA(6))),ADDR(22)=""
"RTN","PSOLBLN",15,0)
 S:$G(VAPA(2))]"" ADDR(22)=$G(VAPA(2))_" "_$G(VAPA(3)),ADDR(22)=$E(ADDR(22),1,46) S:ADDR(22)="" ADDR(22)=ADDR(33),ADDR(33)=""
"RTN","PSOLBLN",16,0)
 S ADDR(4)=$S(ADDR(33)="":ADDR(22),1:ADDR(33)) I $G(VAPA(2))="",$G(VAPA(3))="" S ADDR(2)=ADDR(4),ADDR(3)="",ADDR(4)="" G ST
"RTN","PSOLBLN",17,0)
 I $G(VAPA(2))'="",$G(VAPA(3))="" S ADDR(2)=VAPA(2),ADDR(3)=ADDR(4),ADDR(4)="" G ST
"RTN","PSOLBLN",18,0)
 I $G(VAPA(2))="",$G(VAPA(3))'="" S ADDR(2)=VAPA(3),ADDR(3)=ADDR(4),ADDR(4)="" G ST
"RTN","PSOLBLN",19,0)
 S ADDR(2)=$G(VAPA(2)),ADDR(3)=$G(VAPA(3))
"RTN","PSOLBLN",20,0)
ST I $P($G(^PSRX(RX,3)),"^",3) S PSOPROV=+$P(^(0),"^",4) S PSOPROV=$S($G(RXP):+$P($G(RXP),"^",17),$G(RXF):+$P($G(^PSRX(RX,1,RXF,0)),"^",17),1:PSOPROV) S:'$G(PSOPROV) PSOPROV=+$P(^PSRX(RX,0),"^",4) D
"RTN","PSOLBLN",21,0)
 .I +$P($G(^VA(200,PSOPROV,"PS")),"^",7) S:$P($G(PHYS),"/",2)="" PHYS=$G(PHYS)_"/"_$P($G(^VA(200,+$P($G(^PSRX(RX,3)),"^",3),0)),"^")
"RTN","PSOLBLN",22,0)
 ;
"RTN","PSOLBLN",23,0)
 S:$G(PSOBLALL) PSOBLRX=RX
"RTN","PSOLBLN",24,0)
 S:$D(RXRP(RX)) REPRINT=1 S:$D(RXPR(RX)) RXP=RXPR(RX)
"RTN","PSOLBLN",25,0)
 I $G(PSOSUREP)!($G(PSOEXREP)) S REPRINT=1 S:'$G(RXRP(RX)) RXRP(RX)=1
"RTN","PSOLBLN",26,0)
 S RXY=^PSRX(RX,0),RXSTA=$P(^PSRX(RX,"STA"),"^")
"RTN","PSOLBLN",27,0)
 S RXN=$P(RXY,"^"),ISD=$P(RXY,"^",13),RXF=0,DFN=+$P(RXY,"^",2),SIG=$P($G(^PSRX(RX,"SIG")),"^"),ISD=$E(ISD,4,5)_"/"_$E(ISD,6,7)_"/"_($E(ISD,1,3)+1700),ZY=0,$P(LINE,"_",28)="_"
"RTN","PSOLBLN",28,0)
 S PSOLBLPS=+$P(RXY,"^",3),PSOLBLDR=+$P(RXY,"^",6)
"RTN","PSOLBLN",29,0)
 S NURSE=$S($P($G(^DPT(DFN,"NHC")),"^")="Y":1,$P($G(^PS(55,DFN,40)),"^"):1,1:0) S FDT=$P(^PSRX(RX,2),"^",2),PS=$S($D(^PS(59,PSOSITE,0)):^(0),1:""),PS1=$S($D(^(1)):^(1),1:""),PSOSITE7=$P(^("IB"),"^")
"RTN","PSOLBLN",30,0)
 S PS2=$P(PS,"^")_"^"_$P(PS,"^",6)
"RTN","PSOLBLN",31,0)
 S (EXPDT,EXDT)=$P(^PSRX(RX,2),"^",6),EXDT=$S('EXDT:"",1:$E(EXDT,4,5)_"/"_$E(EXDT,6,7)_"/"_($E(EXDT,1,3)+1700))
"RTN","PSOLBLN",32,0)
 S STATE=$S($D(^DIC(5,+$P(PS,"^",8),0)):$P(^(0),"^",2),1:"UKN")
"RTN","PSOLBLN",33,0)
 S DRUG=$$ZZ^PSOSUTL(RX),DEA=$P($G(^PSDRUG(+$P(RXY,"^",6),0)),"^",3),WARN=$P($G(^(0)),"^",8)
"RTN","PSOLBLN",34,0)
 I $G(^PSRX(RX,"P",+$G(RXP),0))]"" S RXPI=RXP D
"RTN","PSOLBLN",35,0)
 .S RXP=^PSRX(RX,"P",RXP,0)
"RTN","PSOLBLN",36,0)
 .S RXY=$P(RXP,"^")_"^"_$P(RXY,"^",2,6)_"^"_$P(RXP,"^",4)_"^"_$P(RXP,"^",10)_"^"_$P(RXY,"^",9)_"^"_$P($G(^PSRX(RX,"SIG")),"^",2)_"^"_$P(RXP,"^",2)_"^"_$P(RXY,"^",12,14)_"^"_$P(^PSRX(RX,"STA"),"^")_"^"_$P(RXP,"^",7)_"^"_$P(RXY,"^",17,99)
"RTN","PSOLBLN",37,0)
 .S FDT=$P(RXP,"^")
"RTN","PSOLBLN",38,0)
 S MW=$P(RXY,"^",11) I $G(RXFL(RX))'=0 D:$G(RXFL(RX))  I '$G(RXFL(RX)) F I=0:0 S I=$O(^PSRX(RX,1,I)) Q:'I  S RXF=RXF+1 S:'$G(RXP) MW=$P(^PSRX(RX,1,I,0),"^",2) I +^PSRX(RX,1,I,0)'<FDT S FDT=+^(0)
"RTN","PSOLBLN",39,0)
 .I $G(RXFL(RX)),'$D(^PSRX(RX,1,RXFL(RX),0)) K RXFL(RX) Q
"RTN","PSOLBLN",40,0)
 .;PSO*7*266
"RTN","PSOLBLN",41,0)
 .S RXF=RXFL(RX) S:'$G(RXP) MW=$P($G(^PSRX(RX,1,RXF,0)),"^",2) F I=0:0 S I=$O(^PSRX(RX,1,I)) Q:'I  I +^PSRX(RX,1,I,0)'<FDT S FDT=+^(0)
"RTN","PSOLBLN",42,0)
 I MW="W" S PSMP=$G(^PSRX(RX,"MP")) I PSMP]"" D
"RTN","PSOLBLN",43,0)
 .N PSJ S PSJ=0 F PSI=1:1:$L(PSMP) S PSMP(PSI)="",PSJ=PSJ+1 F PSJ=PSJ:1 S PSMP(PSI)=PSMP(PSI)_$P(PSMP," ",PSJ)_" " Q:($L(PSMP(PSI))+$L($P(PSMP," ",PSJ+1))>30)
"RTN","PSOLBLN",44,0)
 .K PSMP(PSI)
"RTN","PSOLBLN",45,0)
 S X=$S($D(^PS(55,DFN,0)):^(0),1:""),PSCAP=$P(X,"^",2),PS55=$P($G(X),"^",3),PS55X=$P($G(X),"^",5)
"RTN","PSOLBLN",46,0)
 I (($G(PS55X)]"")&(PS55>1)&(PS55X<DT)) S PS55=0
"RTN","PSOLBLN",47,0)
 S:MW="M" MW=$S((PS55=1!(PS55=4)):"R",1:MW)
"RTN","PSOLBLN",48,0)
 S MW=$S(MW="M":"REGULAR",MW="R":"CERTIFIED",1:"WINDOW")
"RTN","PSOLBLN",49,0)
 I ($G(PSMP(1))']""&($G(PS55)=2)) S PSMP(1)=$G(SSNPN)
"RTN","PSOLBLN",50,0)
 S DATE=$E(FDT,1,7),REF=$P(RXY,"^",9)-RXF S:'$G(RXP) $P(^PSRX(RX,3),"^")=FDT S:REF<1 REF=0 D ^PSOLBL2 S II=RX D ^PSORFL,RFLDT^PSORFL
"RTN","PSOLBLN",51,0)
 S PATST=$G(^PS(53,+$P(RXY,"^",3),0)) S PRTFL=1 I REF=0 S:('$P(PATST,"^",5))!(DEA["W")!(DEA[1)!(DEA[2) PRTFL=0
"RTN","PSOLBLN",52,0)
 S VRPH=$P(^PSRX(RX,2),"^",10),PSCLN=+$P(RXY,"^",5),PSCLN=$S($D(^SC(PSCLN,0)):$P(^(0),"^",2),1:"UNKNOWN")
"RTN","PSOLBLN",53,0)
 S PATST=$P(PATST,"^",2),X1=DT,X2=$P(RXY,"^",8)-10 D C^%DTC:REF I $D(^PSRX(RX,2)),$P(^(2),"^",6),REF,X'<$P(^(2),"^",6) S REF=0,VRPH=$P(^(2),"^",10)
"RTN","PSOLBLN",54,0)
 ;
"RTN","PSOLBLN",55,0)
 S COPIES=COPIES-1,$P(ULN,"_",34)="",PSOTRAIL=1 I $G(SIDE) D REP^PSOLBL2 G REP
"RTN","PSOLBLN",56,0)
 S (Y,X1)=EXPDT X ^DD("DD") S EXPDT=Y,Y=$P(^PSRX(RX,0),"^",13) X ^DD("DD") S ISD=Y,X2=DT D ^%DTC S DIFF=X
"RTN","PSOLBLN",57,0)
 S Y=DATE X ^DD("DD") S DATE=Y D NOW^%DTC S Y=% X ^DD("DD") S NOW=Y
"RTN","PSOLBLN",58,0)
 S TECH="("_$S($P($G(^PSRX(+$G(RX),"OR1")),"^",5):$P($G(^PSRX(+$G(RX),"OR1")),"^",5),1:$P(RXY,"^",16))_"/"_$S($G(VRPH)&($P(PSOPAR,"^",32)):VRPH,1:" ")_")"
"RTN","PSOLBLN",59,0)
 S PSZIP=$P(PS,"^",5) S PSOHZIP=$S(PSZIP["-":PSZIP,1:$E(PSZIP,1,5)_$S($E(PSZIP,6,9)]"":"-"_$E(PSZIP,6,9),1:""))
"RTN","PSOLBLN",60,0)
L1 W ?3,"VAMC ",$P(PS,"^",7),", ",STATE,"  ",$G(PSOHZIP),?54,"VAMC ",$P(PS,"^",7),", ",STATE,"  ",$G(PSOHZIP),?102 W $S($G(REPRINT)&($G(PSOBLALL)):"(GROUP REPRINT)",$G(REPRINT):"(REPRINT)",1:"") W:$G(RXP) "(PARTIAL)"
"RTN","PSOLBLN",61,0)
 W !?3,$P(PS2,"^",2),"  ",$P(PS,"^",3),"-",$P(PS,"^",4),"   ",TECH,?54,$P(PS2,"^",2),"  ",$P(PS,"^",3),"-",$P(PS,"^",4),"   ",TECH,?102,$P(PS2,"^",2)," ",TECH," ",NOW
"RTN","PSOLBLN",62,0)
 W !,"Rx# ",RXN,"  ",DATE,"  Fill ",RXF+1," of ",1+$P(RXY,"^",9),?54,"Rx# ",RXN,"  ",DATE,"  Fill ",RXF+1," of ",1+$P(RXY,"^",9),?102,"Rx# ",RXN,"  ",DATE,"  Fill ",RXF+1," of ",1+$P(RXY,"^",9)
"RTN","PSOLBLN",63,0)
 W !,PNM,"  ",$G(SSNPN),?54,PNM,"  ",$G(SSNPN),?102,PNM,"  ",$G(SSNPN)
"RTN","PSOLBLN",64,0)
 F DR=1:1 Q:$G(SGY(DR))=""  D:DR=4!(DR=7)!(DR=10)!(DR=13)  W !,$G(SGY(DR)),?54,$G(SGY(DR)),?102,$S($G(OSGY(DR))]"":OSGY(DR),1:$G(SGY(DR)))
"RTN","PSOLBLN",65,0)
 .F GG=1:1:27 W !
"RTN","PSOLBLN",66,0)
 I DR>4 S KK=$S(DR=5!(DR=8)!(DR=11):2,(DR=6)!(DR=9)!(DR=12):1,1:0) I KK F HH=1:1:KK W !
"RTN","PSOLBLN",67,0)
 I DR=2 W !!
"RTN","PSOLBLN",68,0)
 I DR=3 W !
"RTN","PSOLBLN",69,0)
 W !,$G(PHYS),?54,$G(PHYS),?102,$G(PHYS)
"RTN","PSOLBLN",70,0)
 S PSMF=$S($G(NURSE):"Mfg______Exp______",1:""),PSDU=$P($G(^PSDRUG($P($G(^PSRX(RX,0)),"^",6),660)),"^",8),PSDU=$S(PSDU="":"      "_PSMF,1:PSDU_" "_PSMF)
"RTN","PSOLBLN",71,0)
 W !,"Qty: "_$G(QTY),"  ",$G(PSDU),?54,"Qty: "_$G(QTY),"  ",$G(PSDU),?102,"Qty: "_$G(QTY),"  ",$G(PSDU)
"RTN","PSOLBLN",72,0)
 S ZTKDRUG="XXXXXX   SCRIPTALK RX   XXXXXX"
"RTN","PSOLBLN",73,0)
 I '$G(PSOSTLK) K PSDU,PSMF W !,DRUG,?54,DRUG,?102,DRUG
"RTN","PSOLBLN",74,0)
 I $G(PSOSTLK) K PSDU,PSMF W !,$S($G(PSOSTALK):ZTKDRUG,1:DRUG),?54,DRUG,?102,DRUG
"RTN","PSOLBLN",75,0)
 I $P(RXY,"^",9)-RXF'>0 D ^PSOLBLN1 G L13
"RTN","PSOLBLN",76,0)
 G:DIFF<30 L11
"RTN","PSOLBLN",77,0)
 W !?54,$P(RXY,"^",9)-RXF," Refills remain prior to ",EXPDT,?102,"Mfg "_$G(MFG)_" Lot# "_$G(LOT) G L12
"RTN","PSOLBLN",78,0)
L11 W !?54,"Last fill prior to ",$G(EXPDT),?102,"Mfg "_$G(MFG)_" Lot# "_$G(LOT)
"RTN","PSOLBLN",79,0)
L12 W !,$P(PS,"^",2),?54,$S($L($G(COPAYVAR)):$G(COPAYVAR)_"     ",1:""),"Days Supply: ",$G(DAYS),?102,"Tech__________RPh_________",!,$P(PS,"^",7),", ",STATE,"  ",$G(PSOHZIP)
"RTN","PSOLBLN",80,0)
 ;send a CR for OPTIFIL (P-MT661BC)
"RTN","PSOLBLN",81,0)
 I $G(PSOBARS),$P(PSOPAR,"^",19)'=1 S X="S",X2=PSOINST_"-"_RX S X1=$X W ?54,@PSOBAR1,X2,@PSOBAR0,$C(13) S $X=0 W:IOST["P-MT661BC" !
"RTN","PSOLBLN",82,0)
 E  W !!!
"RTN","PSOLBLN",83,0)
 W !,"ADDRESS SERVICE REQUESTED"
"RTN","PSOLBLN",84,0)
 ;
"RTN","PSOLBLN",85,0)
 ; Printing FDA Medication Guide (if there's one)
"RTN","PSOLBLN",86,0)
 I $$MGONFILE^PSOFDAUT(RX) D
"RTN","PSOLBLN",87,0)
 . W ?102,"Read FDA Med Guide"
"RTN","PSOLBLN",88,0)
 . I $G(REPRINT),'$D(RXRP(RX,"MG")) Q 
"RTN","PSOLBLN",89,0)
 . N FDAMG S FDAMG=$$PRINTMG^PSOFDAMG(RX,$P($G(PSOFDAPT),"^",2))
"RTN","PSOLBLN",90,0)
 ;
"RTN","PSOLBLN",91,0)
 W:"C"[$E(MW) !,?21,"CERTIFIED MAIL" W !?54,$G(VAPA(1))
"RTN","PSOLBLN",92,0)
 W !,$S($G(PS55)=2:"***DO NOT MAIL***",1:"***CRITICAL MEDICAL SHIPMENT***"),?54,$G(ADDR(2)),?102,"Routing: "_$S("W"[$E(MW):MW,1:MW_" MAIL")
"RTN","PSOLBLN",93,0)
 W !?54,$G(ADDR(3)),?102,"Days supply: ",$G(DAYS)," Cap: ",$S(PSCAP:"**NON-SFTY**",1:"SAFETY")
"RTN","PSOLBLN",94,0)
 W !?54,$G(ADDR(4)),?102,"Isd: ",ISD," Exp: ",EXPDT
"RTN","PSOLBLN",95,0)
 W !,PNM,?54,"*Indicate address change on back of this form",?102,"Last Fill: ",$G(PSOLASTF)
"RTN","PSOLBLN",96,0)
 W !,$S($D(PSMP(1)):PSMP(1),1:$G(VAPA(1))),?54,"[ ] Permanent",?102,"Pat. Stat ",PATST," Clinic: ",PSCLN
"RTN","PSOLBLN",97,0)
 W !,$S($D(PSMP(2)):PSMP(2),$D(PSMP(1)):"",1:$G(ADDR(2))),?54,"[ ] Temporary until ",$S($P($G(VAPA(10)),"^",2)]"":$P($G(VAPA(10)),"^",2),1:"__/__/__"),?102,$S($G(WARN)'="":"DRUG WARNING "_$G(WARN),1:"")
"RTN","PSOLBLN",98,0)
 W !,$S($D(PSMP(3)):PSMP(3),$D(PSMP(1)):"",1:$G(ADDR(3))),!,$S($D(PSMP(4)):PSMP(4),$D(PSMP(1)):"",1:$G(ADDR(4))),?54,"Signature",ULN
"RTN","PSOLBLN",99,0)
 I $G(PSOBARS) S X="S",X2=PSOINST_"-"_RX S X1=$X W ?102,@PSOBAR1,X2,@PSOBAR0,$C(13) S $X=0
"RTN","PSOLBLN",100,0)
L13 I $G(WARN)'="",'$G(PSOBLALL) I '$G(PSDFNFLG),'$G(PSOLAPPL) D WARN^PSOLBL2
"RTN","PSOLBLN",101,0)
 W @IOF
"RTN","PSOLBLN",102,0)
REP I COPIES>0 S SIDE=1 G ST
"RTN","PSOLBLN",103,0)
 D NOW^%DTC S NOW=% K %,%H,%I I $G(RXF)="" S RXF=0 F I=0:0 S I=$O(^PSRX(RX,1,I)) Q:'I  S RXF=I
"RTN","PSOLBLN",104,0)
 S IR=0 F FDA=0:0 S FDA=$O(^PSRX(RX,"L",FDA)) Q:'FDA  S IR=FDA
"RTN","PSOLBLN",105,0)
 S IR=IR+1,^PSRX(RX,"L",0)="^52.032DA^"_IR_"^"_IR
"RTN","PSOLBLN",106,0)
 S ^PSRX(RX,"L",IR,0)=NOW_"^"_$S($G(RXP):99-RXPI,1:RXF)_"^"_$S($G(PCOMX)]"":$G(PCOMX),$G(PCOMH(RX))]"":PCOMH(RX),1:"From RX number "_$P(^PSRX(RX,0),"^"))_$S($G(RXP):" (Partial)",1:"")_$S($G(REPRINT):" (Reprint)",1:"")_"^"_PDUZ
"RTN","PSOLBLN",107,0)
 ;
"RTN","PSOLBLN",108,0)
 ; Add info about the label being printed to the Developer's Log.
"RTN","PSOLBLN",109,0)
 D LOGLBL(RX,RXF,$G(RESP))
"RTN","PSOLBLN",110,0)
 ;
"RTN","PSOLBLN",111,0)
 N PSOBADR,PSOTEMP
"RTN","PSOLBLN",112,0)
 S PSOBADR=$$CHKRX^PSOBAI(RX)
"RTN","PSOLBLN",113,0)
 I $G(PSOBADR) S PSOTEMP=$P(PSOBADR,"^",2),PSOBADR=$P(PSOBADR,"^")
"RTN","PSOLBLN",114,0)
 I $G(PSOBADR),'$G(PSOTEMP) D
"RTN","PSOLBLN",115,0)
 .S IR=IR+1,^PSRX(RX,"L",0)="^52.032DA^"_IR_"^"_IR
"RTN","PSOLBLN",116,0)
 .S ^PSRX(RX,"L",IR,0)=NOW_"^"_$S($G(RXP):99-RXPI,1:RXF)_"^"_"ROUTING="_$G(MW)_" (BAD ADDRESS)"_"^"_PDUZ
"RTN","PSOLBLN",117,0)
 ;Storing FDA Medication Guide filename in the Prescription file
"RTN","PSOLBLN",118,0)
 I $$MGONFILE^PSOFDAUT(RX) D
"RTN","PSOLBLN",119,0)
 . I $G(RXRP(RX)),'$G(RXRP(RX,"MG")) Q
"RTN","PSOLBLN",120,0)
 . S ^PSRX(RX,"L",IR,"FDA")=$P($$MGONFILE^PSOFDAUT(RX),"^",2)
"RTN","PSOLBLN",121,0)
 S ^PSRX(RX,"TYPE")=0 K RXF,IR,FDA,NOW,I,PCOMH(RX)
"RTN","PSOLBLN",122,0)
 I $G(WARN)'="" I $G(PSDFNFLG)!($G(PSOLAPPL)) D ALLWARN^PSOLBLN1
"RTN","PSOLBLN",123,0)
 I $G(WARN)="" I $G(PSDFNFLG)!($G(PSOLAPPL)) D ALL^PSOLBLS
"RTN","PSOLBLN",124,0)
 I $G(PSOBLALL) D:$G(WARN)="" ALL^PSOLBLS D:$G(WARN)'="" ALLWARN^PSOLBLN1
"RTN","PSOLBLN",125,0)
 I '$D(PSSPND),$P(PSOPAR,"^",18) I $G(PSDFNFLG)!($G(PSOLAPPL))!($G(PSOBLALL)) D CHCK2^PSOTRLBL
"RTN","PSOLBLN",126,0)
 D:$G(PSOBLALL) TRAIL^PSOLBL2
"RTN","PSOLBLN",127,0)
END ;
"RTN","PSOLBLN",128,0)
 I $D(RXFLX(RX)) S RXFL(RX)=$G(RXFLX(RX)) K RXFLX
"RTN","PSOLBLN",129,0)
 D KILL^PSOLBL2 Q
"RTN","PSOLBLN",130,0)
 ;
"RTN","PSOLBLN",131,0)
LOGLBL(PSORX,PSORXF,PSORESP) ;
"RTN","PSOLBLN",132,0)
 ;Input Parameters:
"RTN","PSOLBLN",133,0)
 ;  PSORX - IEN to the Prescription file
"RTN","PSOLBLN",134,0)
 ;  PSORXF - Refill number of the Rx
"RTN","PSOLBLN",135,0)
 ;  PSORESP - ECME Response Info, if defined the 4th piece will contain the ECME Status
"RTN","PSOLBLN",136,0)
 ;
"RTN","PSOLBLN",137,0)
 ; Log ECME Claim Status, Menu Option and Action, and whether or not there are
"RTN","PSOLBLN",138,0)
 ; any Open Rejects, to the Developer's Log. If there are Open Rejects, log the
"RTN","PSOLBLN",139,0)
 ; Code and date/time. This will help in troubleshooting when future label
"RTN","PSOLBLN",140,0)
 ; issues are identified.
"RTN","PSOLBLN",141,0)
 ;
"RTN","PSOLBLN",142,0)
 N PSOCD,PSODT,PSOFND,PSOIEN59,PSOLOG,PSOORD,PSOREJDATA,PSORIEN,PSOSTAT
"RTN","PSOLBLN",143,0)
 ;
"RTN","PSOLBLN",144,0)
 ; If PSOIEN59 is not found Quit, it is required in order make an entry in
"RTN","PSOLBLN",145,0)
 ; Developers Log.
"RTN","PSOLBLN",146,0)
 S PSOIEN59=$$IEN59^BPSOSRX(PSORX,PSORXF)
"RTN","PSOLBLN",147,0)
 I PSOIEN59="" Q
"RTN","PSOLBLN",148,0)
 ;
"RTN","PSOLBLN",149,0)
 S PSOSTAT=$P($G(PSORESP),U,4)
"RTN","PSOLBLN",150,0)
 I PSOSTAT="" S PSOSTAT=$$STATUS^PSOBPSUT(PSORX,PSORXF)
"RTN","PSOLBLN",151,0)
 D LOG^BPSOSL(PSOIEN59,$T(+0)_"-ECME Claim Status: "_PSOSTAT) ; ICR #4412,6764
"RTN","PSOLBLN",152,0)
 ;
"RTN","PSOLBLN",153,0)
 I $D(XQY0) D LOG^BPSOSL(PSOIEN59,$T(+0)_"-Menu Option: "_$P(XQY0,U)_"-"_$P(XQY0,U,2))
"RTN","PSOLBLN",154,0)
 ;
"RTN","PSOLBLN",155,0)
 ; The kernel variable XQORNOD(0) captures the Action, however this variable is not
"RTN","PSOLBLN",156,0)
 ; always available to for us to use.  We know that XQORNOD(0) is not available when
"RTN","PSOLBLN",157,0)
 ; a user selects either ED or PP from the Medication Profile.
"RTN","PSOLBLN",158,0)
 ; To determine if PP was selected, go to the EMCE User Screen and select VER-View
"RTN","PSOLBLN",159,0)
 ; Prescription. Check the ECME Log comments for ECME:PULLED FROM SUSPENSE.
"RTN","PSOLBLN",160,0)
 ; If the Prescription has been edited(ED) this will be annotated when you go to the
"RTN","PSOLBLN",161,0)
 ; Medication Profile and select SO. The Remarks will contain "New Order Created by
"RTN","PSOLBLN",162,0)
 ; editing Rx # nnnnn."
"RTN","PSOLBLN",163,0)
 I $D(XQORNOD(0)) D
"RTN","PSOLBLN",164,0)
 . S PSOORD=$P(XQORNOD(0),U,2)
"RTN","PSOLBLN",165,0)
 . S PSOLOG=$$GET1^DIQ(101,PSOORD,.01)_"-"_$$GET1^DIQ(101,PSOORD,1)
"RTN","PSOLBLN",166,0)
 . I $$GET1^DIQ(101,PSOORD,44) S PSOLOG=PSOLOG_"-"_$$GET1^DIQ(101,PSOORD,44)
"RTN","PSOLBLN",167,0)
 . D LOG^BPSOSL(PSOIEN59,$T(+0)_"-Action: "_PSOLOG)
"RTN","PSOLBLN",168,0)
 E  D
"RTN","PSOLBLN",169,0)
 . D LOG^BPSOSL(PSOIEN59,$T(+0)_"-Action: Unavailable")
"RTN","PSOLBLN",170,0)
 ;
"RTN","PSOLBLN",171,0)
 ; Check for any Open Rejects on Third Party Payer Reject Worklist.
"RTN","PSOLBLN",172,0)
 S PSOFND=$$FIND^PSOREJUT(PSORX,PSORXF,.PSOREJDATA)
"RTN","PSOLBLN",173,0)
 ;
"RTN","PSOLBLN",174,0)
 ; Log a message if no Open Rejects were found.
"RTN","PSOLBLN",175,0)
 I 'PSOFND D LOG^BPSOSL(PSOIEN59,$T(+0)_"-Open Rejects: None on WL")
"RTN","PSOLBLN",176,0)
 E  D
"RTN","PSOLBLN",177,0)
 . ; 
"RTN","PSOLBLN",178,0)
 . ; If Open Rejects are found, log the Code and Date/Time for each reject.
"RTN","PSOLBLN",179,0)
 . S PSORIEN=""
"RTN","PSOLBLN",180,0)
 . F  S PSORIEN=$O(PSOREJDATA(PSORIEN)) Q:'PSORIEN  D
"RTN","PSOLBLN",181,0)
 . . S PSOCD=PSOREJDATA(PSORIEN,"CODE"),PSODT=PSOREJDATA(PSORIEN,"DATE/TIME")
"RTN","PSOLBLN",182,0)
 . . D LOG^BPSOSL(PSOIEN59,$T(+0)_"-Open rejects: "_PSOCD_", "_PSODT)
"RTN","PSOLBLN",183,0)
 ;
"RTN","PSOLBLN",184,0)
 Q
"RTN","PSOORAL1")
0^17^B120026363
"RTN","PSOORAL1",1,0)
PSOORAL1 ;BHAM ISC/SAB - Build Listman activity logs ; 12/4/07 12:25pm
"RTN","PSOORAL1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**71,156,148,247,240,287,354,367,408,482**;DEC 1997;Build 44
"RTN","PSOORAL1",3,0)
 N RX0,VALMCNT K DIR,DTOUT,DUOUT,DIRUT,^TMP("PSOAL",$J) S DA=$P(PSOLST(ORN),"^",2),RX0=^PSRX(DA,0),J=DA,RX2=$G(^(2)),R3=$G(^(3)),CMOP=$O(^PSRX(DA,4,0))
"RTN","PSOORAL1",4,0)
 S IEN=0,DIR(0)="LO^1:"_$S(CMOP:9,1:8),DIR("A",1)=" ",DIR("A",2)="Select Activity Log by  number",DIR("A",3)="1.  Refill      2.  Partial      3.  Activity     4.  Labels     5.  Copay"
"RTN","PSOORAL1",5,0)
 S DIR("A")=$S(CMOP:"6.  ECME        7.  SPMP        8.  CMOP Events  9.  All Logs",1:"6.  ECME        7.  SPMP         8.  All Logs")
"RTN","PSOORAL1",6,0)
 S DIR("B")=$S(CMOP:9,1:8) D ^DIR S PSOELSE=+Y I +Y S Y=$S(CMOP&(Y[9):"1,2,3,4,5,6,7,8",'CMOP&(Y[8):"1,2,3,4,5,6,7",1:Y) S ACT=Y D FULL^VALM1 D
"RTN","PSOORAL1",7,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Rx #: "_$P(RX0,"^")_"   Original Fill Released: " I $P(RX2,"^",13) S DTT=$P(RX2,"^",13) D DAT S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_DAT K DAT,DTT
"RTN","PSOORAL1",8,0)
 .I $P(RX2,"^",15) S DTT=$P(RX2,"^",15) D DAT S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"(Returned to Stock "_DAT_")" K DAT,DTT
"RTN","PSOORAL1",9,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Routing: "_$S($P(RX0,"^",11)="W":"Window",1:"Mail")_$S($P($G(^PSRX(DA,"OR1")),"^",5):"      Finished by: "_$P(^VA(200,$P(^PSRX(DA,"OR1"),"^",5),0),"^"),1:"")
"RTN","PSOORAL1",10,0)
 .D:$G(^PSRX(DA,"H"))]""&($P(PSOLST(ORN),"^",3)="HOLD") HLD^PSOORAL2
"RTN","PSOORAL1",11,0)
 .F LOG=1:1:$L(ACT,",") Q:$P(ACT,",",LOG)']""  S LBL=$P(ACT,",",LOG) D @$S(LBL=1:"RF^PSOORAL2",LBL=2:"PAR^PSOORAL2",LBL=3:"ACT",LBL=5:"COPAY",LBL=6:"ECME",LBL=7:"SPMP",LBL=8:"^PSORXVW2",1:"LBL")
"RTN","PSOORAL1",12,0)
 I 'PSOELSE S VALMBCK="" K PSOELSE Q 
"RTN","PSOORAL1",13,0)
 K ST0,RFL,RFLL,RFL1,II,J,N,PHYS,L1,DIRUT,PSDIV,PSEXDT,MED,M1,FFX,DTT,DAT,R3,RTN,SIG,STA,P1,PL,P0,Z0,Z1,EXDT,IFN,DIR,DUOUT,DTOUT,PSOELSE
"RTN","PSOORAL1",14,0)
 K LBL,I,RFDATE,%H,%I,RN,RFT
"RTN","PSOORAL1",15,0)
 S PSOAL=IEN K IEN,ACT,LBL,LOG D EN^PSOORAL S VALMBCK="R"
"RTN","PSOORAL1",16,0)
 Q
"RTN","PSOORAL1",17,0)
ACT ;activity log
"RTN","PSOORAL1",18,0)
 N CNT
"RTN","PSOORAL1",19,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Activity Log:"
"RTN","PSOORAL1",20,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#   Date/Time            Reason         Rx Ref         Initiator Of Activity",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSOORAL1",21,0)
 I '$O(^PSRX(DA,"A",0)) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There's NO Activity to report" Q
"RTN","PSOORAL1",22,0)
 S CNT=0
"RTN","PSOORAL1",23,0)
 F N=0:0 S N=$O(^PSRX(DA,"A",N)) Q:'N  S P1=^(N,0) D
"RTN","PSOORAL1",24,0)
 .I $P(P1,"^",2)="M" Q
"RTN","PSOORAL1",25,0)
 .S DAT=$$FMTE^XLFDT($P(P1,"^"),2)_"             "
"RTN","PSOORAL1",26,0)
 .S IEN=IEN+1,CNT=CNT+1,^TMP("PSOAL",$J,IEN,0)=CNT_"   "_$E(DAT,1,21),$P(RN," ",15)=" ",REA=$P(P1,"^",2)
"RTN","PSOORAL1",27,0)
 .S REA=$F("HUCELPRWSIVDABXGKN",REA)-1
"RTN","PSOORAL1",28,0)
 .I REA D
"RTN","PSOORAL1",29,0)
 ..S STA=$P("HOLD^UNHOLD^DISCONTINUED^EDIT^RENEWED^PARTIAL^REINSTATE^REPRINT^SUSPENSE^RETURNED^INTERVENTION^DELETED^DRUG INTERACTION^PROCESSED^X-INTERFACE^PATIENT INSTR.^PKI/DEA^DISP COMPLETED^","^",REA)
"RTN","PSOORAL1",30,0)
 ..S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_STA_$E(RN,$L(STA)+1,15)
"RTN","PSOORAL1",31,0)
 .E  S $P(STA," ",15)=" ",^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_STA
"RTN","PSOORAL1",32,0)
 .K STA,RN S $P(RN," ",15)=" ",RF=+$P(P1,"^",4)
"RTN","PSOORAL1",33,0)
 .S RFT=$S(RF>0&(RF<6):"REFILL "_RF,RF=6:"PARTIAL",RF>6:"REFILL "_(RF-1),1:"ORIGINAL")
"RTN","PSOORAL1",34,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_RFT_$E(RN,$L(RFT)+1,15)_$E($S($D(^VA(200,+$P(P1,"^",3),0)):$P(^(0),"^"),1:$P(P1,"^",3)),1,24)
"RTN","PSOORAL1",35,0)
 .;S:$P(P1,"^",5)]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Comments: "_$P(P1,"^",5)
"RTN","PSOORAL1",36,0)
 .I $P(P1,"^",5)]"" N PSOACBRK,PSOACBRV D
"RTN","PSOORAL1",37,0)
 ..S PSOACBRV=$P(P1,"^",5)
"RTN","PSOORAL1",38,0)
 ..;PSO*7*240 Use fileman for parsing
"RTN","PSOORAL1",39,0)
 ..K ^UTILITY($J,"W") S X="Comments: "_PSOACBRV,(DIWR,DIWL)=1,DIWF="C80" D ^DIWP F I=1:1:^UTILITY($J,"W",1) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=$G(^UTILITY($J,"W",1,I,0))
"RTN","PSOORAL1",40,0)
 .I $P($G(^PSRX(DA,"A",N,1)),"^")]"" S IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0)," ",5)=$P($G(^PSRX(DA,"A",N,1)),"^") I $P($G(^PSRX(DA,"A",N,1)),"^",2)]"" S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_":"_$P($G(^PSRX(DA,"A",N,1)),"^",2)
"RTN","PSOORAL1",41,0)
 .I $O(^PSRX(DA,"A",N,2,0)) F I=0:0 S I=$O(^PSRX(DA,"A",N,2,I)) Q:'I  S MIG=^PSRX(DA,"A",N,2,I,0) D
"RTN","PSOORAL1",42,0)
 ..S:MIG["Mail Tracking Info.: " IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0)," ",9)=" "
"RTN","PSOORAL1",43,0)
 ..F SG=1:1:$L(MIG) S:$L(^TMP("PSOAL",$J,IEN,0)_" "_$P(MIG," ",SG))>80 IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0)," ",9)=" " S:$P(MIG," ",SG)'="" ^TMP("PSOAL",$J,IEN,0)=$G(^TMP("PSOAL",$J,IEN,0))_" "_$P(MIG," ",SG)
"RTN","PSOORAL1",44,0)
 K MIG,SG,I,^UTILITY($J,"W"),DIWF,DIWL,DIWR
"RTN","PSOORAL1",45,0)
 Q
"RTN","PSOORAL1",46,0)
LBL ;label log
"RTN","PSOORAL1",47,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Label Log:"
"RTN","PSOORAL1",48,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#   Date        Rx Ref                    Printed By",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSOORAL1",49,0)
 I '$O(^PSRX(DA,"L",0)) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There are NO Labels printed." Q
"RTN","PSOORAL1",50,0)
 F L1=0:0 S L1=$O(^PSRX(DA,"L",L1)) Q:'L1  S LBL=^PSRX(DA,"L",L1,0),DTT=$P(^(0),"^") D DAT D
"RTN","PSOORAL1",51,0)
 . S $P(RN," ",26)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=L1_"   "_DAT_"    ",RFT=$S($P(LBL,"^",2):"REFILL "_$P(LBL,"^",2),1:"ORIGINAL"),RFT=RFT_$E(RN,$L(RFT)+1,26)
"RTN","PSOORAL1",52,0)
 . S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_RFT_$P($G(^VA(200,$P(LBL,"^",4),0)),"^"),IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Comments: "_$P(LBL,"^",3)
"RTN","PSOORAL1",53,0)
 . N FDAMGDOC S FDAMGDOC=$G(^PSRX(DA,"L",L1,"FDA"))
"RTN","PSOORAL1",54,0)
 . I FDAMGDOC'="" D
"RTN","PSOORAL1",55,0)
 . . S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="FDA Med Guide: "_$E(FDAMGDOC,1,61)
"RTN","PSOORAL1",56,0)
 . . I $L(FDAMGDOC)>61 D
"RTN","PSOORAL1",57,0)
 . . . F  Q:$E(FDAMGDOC,62,999)=""  D
"RTN","PSOORAL1",58,0)
 . . . . S FDAMGDOC=$E(FDAMGDOC,62,999),IEN=IEN+1
"RTN","PSOORAL1",59,0)
 . . . . S ^TMP("PSOAL",$J,IEN,0)=$E(FDAMGDOC,1,61)
"RTN","PSOORAL1",60,0)
 Q
"RTN","PSOORAL1",61,0)
 ;
"RTN","PSOORAL1",62,0)
COPAY ;Copay activity log
"RTN","PSOORAL1",63,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Copay Activity Log:"
"RTN","PSOORAL1",64,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#   Date        Reason               Rx Ref         Initiator Of Activity",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSOORAL1",65,0)
 I '$O(^PSRX(DA,"COPAY",0)) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There's NO Copay activity to report" Q
"RTN","PSOORAL1",66,0)
 F N=0:0 S N=$O(^PSRX(DA,"COPAY",N)) Q:'N  S P1=^(N,0),DTT=P1\1 D DAT D
"RTN","PSOORAL1",67,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=N_"   "_DAT_"    ",$P(RN," ",21)=" ",REA=$P(P1,"^",2),REA=$F("ARICE",REA)-1
"RTN","PSOORAL1",68,0)
 .I REA D
"RTN","PSOORAL1",69,0)
 ..S STA=$P("ANNUAL CAP REACHED^COPAY RESET^IB-INITIATED COPAY^REMOVE COPAY CHARGE^RX EDITED^","^",REA)
"RTN","PSOORAL1",70,0)
 ..S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_STA_$E(RN,$L(STA)+1,21)
"RTN","PSOORAL1",71,0)
 .E  S $P(STA," ",21)=" ",^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_STA
"RTN","PSOORAL1",72,0)
 .K STA,RN S $P(RN," ",15)=" ",RF=+$P(P1,"^",4)
"RTN","PSOORAL1",73,0)
 .S RFT=$S(RF>0:"REFILL "_RF,1:"ORIGINAL")
"RTN","PSOORAL1",74,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_RFT_$E(RN,$L(RFT)+1,15)_$S($D(^VA(200,+$P(P1,"^",3),0)):$P(^(0),"^"),1:$P(P1,"^",3))
"RTN","PSOORAL1",75,0)
 .S:$P(P1,"^",5)]""!($P(P1,"^",6)]"")!($P(P1,"^",7)]"") IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Comment: "_$P(P1,"^",5)
"RTN","PSOORAL1",76,0)
 .I $P(P1,"^",6)]"" S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"  Old value="_$P(P1,"^",6)_"   New value="_$P(P1,"^",7)
"RTN","PSOORAL1",77,0)
 Q
"RTN","PSOORAL1",78,0)
 ;
"RTN","PSOORAL1",79,0)
ECME ; ECME activity log
"RTN","PSOORAL1",80,0)
 ;
"RTN","PSOORAL1",81,0)
 N DIWF,DIWL,DIWR,I,II,III,LINE,PSOAR,PSOCNT,PSOCNT1,PSOCOMMENT
"RTN","PSOORAL1",82,0)
 N PSODATA,PSODATE,PSODATE1,PSOFIELDS,PSOFILE,PSOIENS,PSOLINE
"RTN","PSOORAL1",83,0)
 N PSOREFILL,PSOREFILL1,PSOUSER,PSOUSER1
"RTN","PSOORAL1",84,0)
 ;
"RTN","PSOORAL1",85,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" "
"RTN","PSOORAL1",86,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="ECME Log:"
"RTN","PSOORAL1",87,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#   Date/Time           Rx Ref          Initiator Of Activity"
"RTN","PSOORAL1",88,0)
 S IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSOORAL1",89,0)
 ;
"RTN","PSOORAL1",90,0)
 ; The comments from ACTIVITY LOG (#52.3) and REJECT INFO (#52.25)
"RTN","PSOORAL1",91,0)
 ; will be compiled in array PSOAR. This array will allow comments
"RTN","PSOORAL1",92,0)
 ; from each sub-file to be sorted in ascending order by date.
"RTN","PSOORAL1",93,0)
 ; A counter (PSOCNT) will be used to accommodate multiple 
"RTN","PSOORAL1",94,0)
 ; comments with the exact same date/time.
"RTN","PSOORAL1",95,0)
 ;
"RTN","PSOORAL1",96,0)
 ; PSOAR array definition:
"RTN","PSOORAL1",97,0)
 ;
"RTN","PSOORAL1",98,0)
 ;  PSOAR(PSODATE)=PSOCNT
"RTN","PSOORAL1",99,0)
 ;  PSOAR(PSODATE,PSOCNT)=PSODATE^PSOUSER1^PSOREFILL1^PSOCOMMENT
"RTN","PSOORAL1",100,0)
 ;  PSOAR(PSODATE,PSOCNT,PSOCNT1)=Additional Comments (if any)
"RTN","PSOORAL1",101,0)
 ;
"RTN","PSOORAL1",102,0)
 ;   PSODATE ---- Date/time of comment - internal format
"RTN","PSOORAL1",103,0)
 ;   PSOCNT ----- Counter of comments, by date
"RTN","PSOORAL1",104,0)
 ;   PSOCNT1 ---- Counter of additional comments (if any)
"RTN","PSOORAL1",105,0)
 ;   PSOUSER1 --- User who entered comment - external format
"RTN","PSOORAL1",106,0)
 ;   PSOREFILL1 - Refill number - external format
"RTN","PSOORAL1",107,0)
 ;   PSOCOMMENT - Comment
"RTN","PSOORAL1",108,0)
 ;
"RTN","PSOORAL1",109,0)
 ; Kill PSOAR to initialize array
"RTN","PSOORAL1",110,0)
 ;
"RTN","PSOORAL1",111,0)
 K PSOAR
"RTN","PSOORAL1",112,0)
 ;
"RTN","PSOORAL1",113,0)
 ; Loop through ACTIVITY LOG (file #52.3) searching for ECME Entries.
"RTN","PSOORAL1",114,0)
 ; ECME Entries are defined as REASON="M".
"RTN","PSOORAL1",115,0)
 ;
"RTN","PSOORAL1",116,0)
 ; ACTIVITY LOG Fields:
"RTN","PSOORAL1",117,0)
 ;  .01 = Activity Log (Date)
"RTN","PSOORAL1",118,0)
 ;  .02 = Reason
"RTN","PSOORAL1",119,0)
 ;  .03 = Initiator of Activity (User)
"RTN","PSOORAL1",120,0)
 ;  .04 = RX Reference (Refill #)
"RTN","PSOORAL1",121,0)
 ;  .05 = Comment
"RTN","PSOORAL1",122,0)
 ;
"RTN","PSOORAL1",123,0)
 ; The above fields will be stored in array PSODATA via a call to ^DIQ.
"RTN","PSOORAL1",124,0)
 ; 
"RTN","PSOORAL1",125,0)
 S I=0
"RTN","PSOORAL1",126,0)
 F  S I=$O(^PSRX(DA,"A",I)) Q:'I  D
"RTN","PSOORAL1",127,0)
 . ;
"RTN","PSOORAL1",128,0)
 . S PSOCNT=0
"RTN","PSOORAL1",129,0)
 . S PSOFILE=52.3
"RTN","PSOORAL1",130,0)
 . S PSOIENS=I_","_DA_","
"RTN","PSOORAL1",131,0)
 . S PSOFIELDS=".01;.02;.03;.04;.05"
"RTN","PSOORAL1",132,0)
 . K PSODATA
"RTN","PSOORAL1",133,0)
 . ;
"RTN","PSOORAL1",134,0)
 . D GETS^DIQ(PSOFILE,I_","_DA,PSOFIELDS,"IE","PSODATA")
"RTN","PSOORAL1",135,0)
 . ;
"RTN","PSOORAL1",136,0)
 . ; If reason is not M (ECME), do not include comment.
"RTN","PSOORAL1",137,0)
 . ;
"RTN","PSOORAL1",138,0)
 . I $G(PSODATA(PSOFILE,PSOIENS,.02,"I"))'="M" Q
"RTN","PSOORAL1",139,0)
 . ;
"RTN","PSOORAL1",140,0)
 . S PSODATE=$G(PSODATA(PSOFILE,PSOIENS,.01,"I"))
"RTN","PSOORAL1",141,0)
 . S PSOUSER1=$G(PSODATA(PSOFILE,PSOIENS,.03,"E"))
"RTN","PSOORAL1",142,0)
 . S PSOREFILL1=$G(PSODATA(PSOFILE,PSOIENS,.04,"E"))
"RTN","PSOORAL1",143,0)
 . S PSOCOMMENT=$G(PSODATA(PSOFILE,PSOIENS,.05,"I"))
"RTN","PSOORAL1",144,0)
 . ;
"RTN","PSOORAL1",145,0)
 . S PSOCNT=$G(PSOAR(PSODATE))+1
"RTN","PSOORAL1",146,0)
 . S PSOAR(PSODATE)=PSOCNT
"RTN","PSOORAL1",147,0)
 . S PSOAR(PSODATE,PSOCNT)=$$FMTE^XLFDT(PSODATE,2)_U_PSOUSER1_U_PSOREFILL1_U_PSOCOMMENT
"RTN","PSOORAL1",148,0)
 . ;
"RTN","PSOORAL1",149,0)
 . ; Node 2 of the ACTIVITY LOG contains any additional comments.
"RTN","PSOORAL1",150,0)
 . ; Loop through OTHER COMMENTS sub-file (file #52.34) to add to PSOAR 
"RTN","PSOORAL1",151,0)
 . ; for reporting.
"RTN","PSOORAL1",152,0)
 . ;
"RTN","PSOORAL1",153,0)
 . I $D(^PSRX(DA,"A",I,2)) D
"RTN","PSOORAL1",154,0)
 . . S PSOCNT1=0
"RTN","PSOORAL1",155,0)
 . . S II=0
"RTN","PSOORAL1",156,0)
 . . F  S II=$O(^PSRX(DA,"A",I,2,II)) Q:'II  D
"RTN","PSOORAL1",157,0)
 . . . S PSOCNT1=PSOCNT1+1
"RTN","PSOORAL1",158,0)
 . . . S PSOAR(PSODATE,PSOCNT,PSOCNT1)=$$GET1^DIQ(52.34,II_","_I_","_DA,.01)
"RTN","PSOORAL1",159,0)
 ;
"RTN","PSOORAL1",160,0)
 ; Loop through REJECT INFO Comments (File #52.2551) searching for
"RTN","PSOORAL1",161,0)
 ; User Created entries.
"RTN","PSOORAL1",162,0)
 ; User Created entries are defined as User'="POSTMASTER"
"RTN","PSOORAL1",163,0)
 ;
"RTN","PSOORAL1",164,0)
 ; REJECT INFO Comments Fields:
"RTN","PSOORAL1",165,0)
 ;  .01  = Date/Time
"RTN","PSOORAL1",166,0)
 ;  1    = User
"RTN","PSOORAL1",167,0)
 ;  2    = Comments
"RTN","PSOORAL1",168,0)
 ;
"RTN","PSOORAL1",169,0)
 ; The above fields will be stored in array PSODATA via a call to ^DIQ.
"RTN","PSOORAL1",170,0)
 ;
"RTN","PSOORAL1",171,0)
 S I=0 F  S I=$O(^PSRX(DA,"REJ",I)) Q:'I  S PSODATE=0 F  S PSODATE=$O(^PSRX(DA,"REJ",I,"COM","B",PSODATE)) Q:'PSODATE  D
"RTN","PSOORAL1",172,0)
 . S III=0 F  S III=$O(^PSRX(DA,"REJ",I,"COM","B",PSODATE,III)) Q:'III  D 
"RTN","PSOORAL1",173,0)
 . . S REC=$G(^PSRX(DA,"REJ",I,"COM",III,0))
"RTN","PSOORAL1",174,0)
 . . S PSOUSER=$P(REC,U,2),PSOUSER1=$P($G(^VA(200,PSOUSER,0)),U,1)
"RTN","PSOORAL1",175,0)
 . . S PSOCOMMENT=$P(REC,U,3)
"RTN","PSOORAL1",176,0)
 . . ;
"RTN","PSOORAL1",177,0)
 . . S PSOREFILL=$$GET1^DIQ(52.25,I_","_DA,5)
"RTN","PSOORAL1",178,0)
 . . I PSOREFILL=0 S PSOREFILL1="ORIGINAL"
"RTN","PSOORAL1",179,0)
 . . E  S PSOREFILL1="REFILL #"_PSOREFILL
"RTN","PSOORAL1",180,0)
 . . ;
"RTN","PSOORAL1",181,0)
 . . S PSOCNT=$G(PSOAR(PSODATE))+1
"RTN","PSOORAL1",182,0)
 . . S PSOAR(PSODATE)=PSOCNT
"RTN","PSOORAL1",183,0)
 . . S PSOAR(PSODATE,PSOCNT)=$$FMTE^XLFDT(PSODATE,2)_U_PSOUSER1_U_PSOREFILL1_U_PSOCOMMENT
"RTN","PSOORAL1",184,0)
 ;
"RTN","PSOORAL1",185,0)
 ; If PSOAR array contains no data, there is No ECME Activity to report. 
"RTN","PSOORAL1",186,0)
 ;
"RTN","PSOORAL1",187,0)
 I '$D(PSOAR) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There's NO ECME Activity to report" Q
"RTN","PSOORAL1",188,0)
 ;
"RTN","PSOORAL1",189,0)
 ; Loop through PSOAR array and assign data to ^TMP array for reporting.
"RTN","PSOORAL1",190,0)
 ; 
"RTN","PSOORAL1",191,0)
 ; PSOLINE = ECME Log Entry line number.
"RTN","PSOORAL1",192,0)
 ;
"RTN","PSOORAL1",193,0)
 S (PSODATE1,PSOREFILL,PSOUSER)=""
"RTN","PSOORAL1",194,0)
 S PSODATE="" F  S PSODATE=$O(PSOAR(PSODATE)) Q:PSODATE=""  D
"RTN","PSOORAL1",195,0)
 . S PSOCNT="" F  S PSOCNT=$O(PSOAR(PSODATE,PSOCNT)) Q:PSOCNT=""  D
"RTN","PSOORAL1",196,0)
 . . S PSODATA=$G(PSOAR(PSODATE,PSOCNT))
"RTN","PSOORAL1",197,0)
 . . ;
"RTN","PSOORAL1",198,0)
 . . S IEN=IEN+1
"RTN","PSOORAL1",199,0)
 . . I '$D(PSOLINE) S PSOLINE=0
"RTN","PSOORAL1",200,0)
 . . S PSOLINE=PSOLINE+1
"RTN","PSOORAL1",201,0)
 . . S PSODATE1=$P(PSODATA,U)
"RTN","PSOORAL1",202,0)
 . . S PSOUSER=$P(PSODATA,U,2)
"RTN","PSOORAL1",203,0)
 . . S PSOREFILL=$P(PSODATA,U,3)
"RTN","PSOORAL1",204,0)
 . . S LINE=PSOLINE
"RTN","PSOORAL1",205,0)
 . . S $E(LINE,5)=PSODATE1
"RTN","PSOORAL1",206,0)
 . . S $E(LINE,25)=PSOREFILL
"RTN","PSOORAL1",207,0)
 . . S $E(LINE,41)=PSOUSER
"RTN","PSOORAL1",208,0)
 . . S ^TMP("PSOAL",$J,IEN,0)=LINE
"RTN","PSOORAL1",209,0)
 . . ;
"RTN","PSOORAL1",210,0)
 . . ; D ^DIWP formats comments into ^UTILITY($J,"W")
"RTN","PSOORAL1",211,0)
 . . ;
"RTN","PSOORAL1",212,0)
 . . S PSOCOMMENT=$P(PSODATA,"^",4)
"RTN","PSOORAL1",213,0)
 . . ;
"RTN","PSOORAL1",214,0)
 . . K ^UTILITY($J,"W")
"RTN","PSOORAL1",215,0)
 . . ;
"RTN","PSOORAL1",216,0)
 . . S X="Comments: "_PSOCOMMENT
"RTN","PSOORAL1",217,0)
 . . S (DIWR,DIWL)=1,DIWF="C80"
"RTN","PSOORAL1",218,0)
 . . D ^DIWP
"RTN","PSOORAL1",219,0)
 . . ;
"RTN","PSOORAL1",220,0)
 . . ; Additional comments (if any)
"RTN","PSOORAL1",221,0)
 . . ;
"RTN","PSOORAL1",222,0)
 . . S PSOCNT1=""
"RTN","PSOORAL1",223,0)
 . . F  S PSOCNT1=$O(PSOAR(PSODATE,PSOCNT,PSOCNT1)) Q:PSOCNT1=""  D
"RTN","PSOORAL1",224,0)
 . . . S X=PSOAR(PSODATE,PSOCNT,PSOCNT1)
"RTN","PSOORAL1",225,0)
 . . . S DIWF="C80I10"
"RTN","PSOORAL1",226,0)
 . . . D ^DIWP
"RTN","PSOORAL1",227,0)
 . . ;
"RTN","PSOORAL1",228,0)
 . . ; Loop through ^UTILITY($J,"W"), adding comments to ^TMP
"RTN","PSOORAL1",229,0)
 . . ;
"RTN","PSOORAL1",230,0)
 . . F I=1:1:^UTILITY($J,"W",1) D 
"RTN","PSOORAL1",231,0)
 . . . S IEN=IEN+1
"RTN","PSOORAL1",232,0)
 . . . S ^TMP("PSOAL",$J,IEN,0)=$G(^UTILITY($J,"W",1,I,0))
"RTN","PSOORAL1",233,0)
 ;
"RTN","PSOORAL1",234,0)
 D DISPREJ
"RTN","PSOORAL1",235,0)
 ;
"RTN","PSOORAL1",236,0)
 K ^UTILITY($J,"W"),DIWR,DIWF,DIWL
"RTN","PSOORAL1",237,0)
 Q
"RTN","PSOORAL1",238,0)
 ;
"RTN","PSOORAL1",239,0)
SPMP ; SPMP (State Prescription Monitoring Program) Log
"RTN","PSOORAL1",240,0)
 N FILL,BAT,LOG,BAT0,LOG0
"RTN","PSOORAL1",241,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1
"RTN","PSOORAL1",242,0)
 S ^TMP("PSOAL",$J,IEN,0)="SPMP (State Prescription Monitoring Program) Log:"
"RTN","PSOORAL1",243,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Date/Time       Fill Type   Exp. Type Bat#  Filename"
"RTN","PSOORAL1",244,0)
 S IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",80)="="
"RTN","PSOORAL1",245,0)
 I '$D(^PS(58.42,"ARX",DA)) D  Q
"RTN","PSOORAL1",246,0)
 . S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There's NO Export Log for this prescription."
"RTN","PSOORAL1",247,0)
 S FILL=""
"RTN","PSOORAL1",248,0)
 F  S FILL=$O(^PS(58.42,"ARX",DA,FILL)) Q:FILL=""  D
"RTN","PSOORAL1",249,0)
 . S BAT=0 F  S BAT=$O(^PS(58.42,"ARX",DA,FILL,BAT)) Q:'BAT  D
"RTN","PSOORAL1",250,0)
 . . S LOG=0 F  S LOG=$O(^PS(58.42,"ARX",DA,FILL,BAT,LOG)) Q:'LOG  D
"RTN","PSOORAL1",251,0)
 . . . S BAT0=$G(^PS(58.42,BAT,0)),LOG0=$G(^PS(58.42,BAT,"RX",LOG,0))
"RTN","PSOORAL1",252,0)
 . . . I '$P(BAT0,"^",10) Q
"RTN","PSOORAL1",253,0)
 . . . S IEN=IEN+1,LINE=$$FMTE^XLFDT($P(BAT0,"^",10),2),$E(LINE,17)=$J($P(LOG0,"^",2),4)
"RTN","PSOORAL1",254,0)
 . . . S $E(LINE,22)=$$GET1^DIQ(58.42001,LOG_","_BAT,2),$E(LINE,29)=$$GET1^DIQ(58.42,BAT,2)
"RTN","PSOORAL1",255,0)
 . . . S $E(LINE,39)=BAT,$E(LINE,45)=$E($$GET1^DIQ(58.42,BAT,6),1,35)
"RTN","PSOORAL1",256,0)
 . . . S ^TMP("PSOAL",$J,IEN,0)=LINE
"RTN","PSOORAL1",257,0)
 Q
"RTN","PSOORAL1",258,0)
 ;
"RTN","PSOORAL1",259,0)
DISPREJ  ;
"RTN","PSOORAL1",260,0)
 N LN,SEQ,REJ,PRI,VAR,X,X1,X2,I,RFT
"RTN","PSOORAL1",261,0)
 I '$D(^PSRX(DA,"REJ")) Q
"RTN","PSOORAL1",262,0)
 S PRI="PSOAL",$P(LN,"=",80)="",SEQ=0
"RTN","PSOORAL1",263,0)
 S IEN=$G(IEN)+1,^TMP(PRI,$J,IEN,0)=" "
"RTN","PSOORAL1",264,0)
 S IEN=IEN+1,^TMP(PRI,$J,IEN,0)="ECME REJECT Log:"
"RTN","PSOORAL1",265,0)
 S IEN=IEN+1,^TMP(PRI,$J,IEN,0)="#  Date/Time Rcvd    Rx Ref    Reject Type     STATUS     Date/Time Resolved"
"RTN","PSOORAL1",266,0)
 S IEN=IEN+1,^TMP(PRI,$J,IEN,0)=LN
"RTN","PSOORAL1",267,0)
 F REJ=0:0 S REJ=$O(^PSRX(DA,"REJ",REJ)) Q:'REJ  D
"RTN","PSOORAL1",268,0)
 . S VAR=$G(^PSRX(DA,"REJ",REJ,0))
"RTN","PSOORAL1",269,0)
 . S RFT=+$P(VAR,"^",4)
"RTN","PSOORAL1",270,0)
 . S SEQ=SEQ+1,X=SEQ,$E(X,4)=$$FMTE^XLFDT($P(VAR,"^",2),2),$E(X,22)=$S(RFT:"REFILL "_RFT,1:"ORIGINAL")
"RTN","PSOORAL1",271,0)
 . S $E(X,32)=$S(+VAR=79:"REFILL TOO SOON",+VAR=88:"DUR",1:$E($$EXP^PSOREJP1($P(VAR,"^",1)),1,15))  ;can't + default because values can be 07, 08, etc.
"RTN","PSOORAL1",272,0)
 . S $E(X,48)=$S($P(VAR,"^",5):"RESOLVED",1:"UNRESOLVED")
"RTN","PSOORAL1",273,0)
 . S:$P(VAR,"^",6) $E(X,59)=$$FMTE^XLFDT($P(VAR,"^",6),2)
"RTN","PSOORAL1",274,0)
 . S IEN=IEN+1,^TMP(PRI,$J,IEN,0)=X
"RTN","PSOORAL1",275,0)
 . I $P(VAR,"^",5) D
"RTN","PSOORAL1",276,0)
 . . S IEN=IEN+1,X=$$GET1^DIQ(52.25,REJ_","_DA,12)
"RTN","PSOORAL1",277,0)
 . . S X1=$$GET1^DIQ(52.25,REJ_","_DA,13) S:X1'="" X=X1_" ("_X_")"
"RTN","PSOORAL1",278,0)
 . . F I=1:1 Q:X=""  D
"RTN","PSOORAL1",279,0)
 . . . S ^TMP(PRI,$J,IEN,0)=$S(I=1:"Comments: ",1:"          ")_$E(X,1,69)
"RTN","PSOORAL1",280,0)
 . . . S X=$E(X,70,999) S:X'="" IEN=IEN+1
"RTN","PSOORAL1",281,0)
 Q
"RTN","PSOORAL1",282,0)
 ;
"RTN","PSOORAL1",283,0)
DAT S DAT="",DTT=DTT\1 Q:DTT'?7N  S DAT=$E(DTT,4,5)_"/"_$E(DTT,6,7)_"/"_$E(DTT,2,3)
"RTN","PSOORAL1",284,0)
 Q
"RTN","PSOORAL2")
0^19^B25016352
"RTN","PSOORAL2",1,0)
PSOORAL2 ;BHAM-ISC/SAB - build listman activity logs con't ;7/27/16 6:45pm
"RTN","PSOORAL2",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**258,260,386,427,454,482**;DEC 1997;Build 44
"RTN","PSOORAL2",3,0)
 ;
"RTN","PSOORAL2",4,0)
RF ;refill log
"RTN","PSOORAL2",5,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Refill Log:"
"RTN","PSOORAL2",6,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#  Log Date   Refill Date  Qty               Routing  Lot #       Pharmacist",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSOORAL2",7,0)
 S (RF,PL)=0 F RF=0:0 S RF=$O(^PSRX(DA,1,RF)) Q:'RF  S PL=PL+1
"RTN","PSOORAL2",8,0)
 I 'PL S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There are NO Refills For this Prescription" Q
"RTN","PSOORAL2",9,0)
 F N=0:0 S N=$O(^PSRX(DA,1,N)) Q:'N  S P1=^(N,0) D
"RTN","PSOORAL2",10,0)
 .S DTT=$P(P1,"^",8)\1 D DAT S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=N_"   "_DAT_"   "
"RTN","PSOORAL2",11,0)
 .S DTT=$P(P1,"^"),$P(RN," ",10)=" " D DAT
"RTN","PSOORAL2",12,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_DAT_"     "_$P(P1,"^",4)_$E("               ",$L($P(P1,"^",4))+1,15)_"  "_$S($P(P1,"^",2)="M":"Mail",1:"Window")_" "_$P(P1,"^",6)_$E(RN,$L($P(P1,"^",6))+1,12)
"RTN","PSOORAL2",13,0)
 .; grab remote fill information as part of OneVA project
"RTN","PSOORAL2",14,0)
 .; and display if available
"RTN","PSOORAL2",15,0)
 .N REMOTEF,REMOTEPH,REMOTES
"RTN","PSOORAL2",16,0)
 .S REMOTEF=$G(^PSRX(DA,1,N,"RF")),REMOTEPH=$P(REMOTEF,U,2),REMOTES=$P(REMOTEF,U)
"RTN","PSOORAL2",17,0)
 .I REMOTES D
"RTN","PSOORAL2",18,0)
 .. S REMOTES=$$FIND1^DIC(4,,"X",REMOTES,"D","I $P(^(0),U,11)=""N"",'$P($G(^(99)),U,4)")
"RTN","PSOORAL2",19,0)
 .. I 'REMOTES S REMOTES="" Q
"RTN","PSOORAL2",20,0)
 .. S REMOTES=$$GET1^DIQ(4,REMOTES_",",99)
"RTN","PSOORAL2",21,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_$E($S(REMOTEPH]"":REMOTEPH,$D(^VA(200,+$P(P1,"^",5),0)):$P(^(0),"^"),1:""),1,16)
"RTN","PSOORAL2",22,0)
 .S PSDIV=$S(REMOTES]"":REMOTES,$D(^PS(59,+$P(P1,"^",9),0)):$P(^(0),"^",6),1:"Unknown"),IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Division: "_PSDIV_$E("        ",$L(PSDIV)+1,8)_"  "
"RTN","PSOORAL2",23,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"Dispensed: "_$S($P(P1,"^",19):$E($P(P1,"^",19),4,5)_"/"_$E($P(P1,"^",19),6,7)_"/"_$E($P(P1,"^",19),2,3),1:"")_"  "
"RTN","PSOORAL2",24,0)
 .S RTS=$S($P(P1,"^",16):" Returned to Stock: "_$E($P(P1,"^",16),4,5)_"/"_$E($P(P1,"^",16),6,7)_"/"_$E($P(P1,"^",16),2,3),1:" Released: "_$S($$RXRLDT^PSOBPSUT(DA,N):$$FMTE^XLFDT($$RXRLDT^PSOBPSUT(DA,N)\1,2),1:""))
"RTN","PSOORAL2",25,0)
 .; Always display the NDC# - PSO*7*427
"RTN","PSOORAL2",26,0)
 .S RTS=RTS_"  NDC: "_$$GETNDC^PSONDCUT(DA,N)
"RTN","PSOORAL2",27,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_RTS S:$P(P1,"^",3)]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="   Remarks: "_$P(P1,"^",3)
"RTN","PSOORAL2",28,0)
 K RTS Q
"RTN","PSOORAL2",29,0)
PAR ;partial log
"RTN","PSOORAL2",30,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Partial Fills:"
"RTN","PSOORAL2",31,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#   Log Date   Date     Qty              Routing    Lot #        Pharmacist",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSOORAL2",32,0)
 I '$O(^PSRX(DA,"P",0)) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There are NO Partials for this Prescription" Q
"RTN","PSOORAL2",33,0)
 S N=0 F  S N=$O(^PSRX(DA,"P",N)) Q:'N  S P1=^(N,0),DTT=$P(P1,"^",8)\1 D DAT D
"RTN","PSOORAL2",34,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=N_"   "_DAT_"  ",QTY=$P(P1,"^",4)_$E("               ",$L($P(P1,"^",4))+1,15)
"RTN","PSOORAL2",35,0)
 .S DTT=$P(P1,"^") D DAT S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_DAT_"  "_QTY_"  "
"RTN","PSOORAL2",36,0)
 .; grab remote fill information as part of OneVA project
"RTN","PSOORAL2",37,0)
 .; and display if available
"RTN","PSOORAL2",38,0)
 .N REMOTEF,REMOTEPH,REMOTES
"RTN","PSOORAL2",39,0)
 .S REMOTEF=$G(^PSRX(DA,"P",N,"PF")),REMOTEPH=$P(REMOTEF,U,2),REMOTES=$P(REMOTEF,U)
"RTN","PSOORAL2",40,0)
 .I REMOTES D
"RTN","PSOORAL2",41,0)
 .. S REMOTES=$$FIND1^DIC(4,,"X",REMOTES,"D","I $P(^(0),U,11)=""N"",'$P($G(^(99)),U,4)")
"RTN","PSOORAL2",42,0)
 .. I 'REMOTES S REMOTES="" Q
"RTN","PSOORAL2",43,0)
 .. S REMOTES=$$GET1^DIQ(4,REMOTES_",",99)
"RTN","PSOORAL2",44,0)
 .S PSDIV=$S(REMOTES]"":REMOTES,$D(^PS(59,+$P(P1,"^",9),0)):$P(^(0),"^",6),1:"UNKNOWN"),PSDIV=PSDIV_$E("        ",$L(PSDIV)+1,8)
"RTN","PSOORAL2",45,0)
 .S MW=$S($P(P1,"^",2)="M":"Mail",1:"Window"),MW=MW_$E("          ",$L(MW)+1,10)
"RTN","PSOORAL2",46,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_MW_"  "_$P(P1,"^",6)_$E("            ",$L($P(P1,"^",6))+1,10)_$E($S(REMOTEPH]"":REMOTEPH,$D(^VA(200,+$P(P1,"^",5),0)):$P(^(0),"^"),1:""),1,16)
"RTN","PSOORAL2",47,0)
 .S RTS=$S($P(P1,"^",16):" RETURNED TO STOCK: "_$E($P(P1,"^",16),4,5)_"/"_$E($P(P1,"^",16),6,7)_"/"_$E($P(P1,"^",16),2,3),1:" RELEASED: "_$S($P(P1,"^",19):$E($P(P1,"^",19),4,5)_"/"_$E($P(P1,"^",19),6,7)_"/"_$E($P(P1,"^",19),2,3),1:""))
"RTN","PSOORAL2",48,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Division: "_PSDIV_" "_RTS ;_"      Entry By: "_$P(^VA(200,$P(P1,"^",7),0),"^")
"RTN","PSOORAL2",49,0)
 .S:$P(P1,"^",3)]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="  REMARKS: "_$P(P1,"^",3) K RTS
"RTN","PSOORAL2",50,0)
 Q
"RTN","PSOORAL2",51,0)
HLD ;hold info
"RTN","PSOORAL2",52,0)
 S DTT=$P(^PSRX(DA,"H"),"^",3) D DAT S HLDR=$$GET1^DIQ(52,DA,99)
"RTN","PSOORAL2",53,0)
 S $P(RN," ",60)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Hold Reason: "_HLDR_$E(RN,$L("Hold Reason: "_HLDR)+1,60)_"Hold Date: "_DAT
"RTN","PSOORAL2",54,0)
 I $P($G(^PSRX(DA,"H")),"^",2)]"" D
"RTN","PSOORAL2",55,0)
 . N HLDCOMM S HLDCOMM=$P(^PSRX(DA,"H"),"^",2)
"RTN","PSOORAL2",56,0)
 . S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Hold Comments: "_$E(HLDCOMM,1,65),HLDCOMM=$E(HLDCOMM,66,999)
"RTN","PSOORAL2",57,0)
 . F  Q:HLDCOMM=""  D
"RTN","PSOORAL2",58,0)
 . . S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="               "_$E(HLDCOMM,1,65),HLDCOMM=$E(HLDCOMM,66,999)
"RTN","PSOORAL2",59,0)
 K RN,DAT,DTT,HLDR
"RTN","PSOORAL2",60,0)
 Q
"RTN","PSOORAL2",61,0)
DAT S DAT="",DTT=DTT\1 Q:DTT'?7N  S DAT=$E(DTT,4,5)_"/"_$E(DTT,6,7)_"/"_$E(DTT,2,3)
"RTN","PSOORAL2",62,0)
 Q
"RTN","PSOPMP0")
0^10^B96962935
"RTN","PSOPMP0",1,0)
PSOPMP0 ;BIRM/MFR - Patient Medication Profile - Listmanager ;10/28/06
"RTN","PSOPMP0",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**260,281,303,289,382,313,427,500,482**;DEC 1997;Build 44
"RTN","PSOPMP0",3,0)
 ;Reference to EN1^GMRADPT supported by IA #10099
"RTN","PSOPMP0",4,0)
 ;Reference to EN6^GMRVUTL supported by IA #1120
"RTN","PSOPMP0",5,0)
 ;Reference to ^PS(55 supported by DBIA 2228
"RTN","PSOPMP0",6,0)
 ;
"RTN","PSOPMP0",7,0)
EN ;Menu option entry point
"RTN","PSOPMP0",8,0)
 N PSOEXPDC,PSOEXDCE,PSOSRTBY,PSORDER,PSOSIGDP,PSOSTSGP,PSOSTORD,PSORDCNT,PSOSTSEQ,PSORDSEQ,PSOCHNG
"RTN","PSOPMP0",9,0)
 N GRPLN,DIC,Y,DFN,GRPLN,HIGHLN,LASTLINE,VALMCNT
"RTN","PSOPMP0",10,0)
 ;
"RTN","PSOPMP0",11,0)
 ;Division selection
"RTN","PSOPMP0",12,0)
 I '$G(PSOSITE) D ^PSOLSET I '$D(PSOPAR) W $C(7),!!,"Pharmacy Division Must be Selected!",! G EXIT
"RTN","PSOPMP0",13,0)
 ;
"RTN","PSOPMP0",14,0)
 ;Patient selection
"RTN","PSOPMP0",15,0)
 W !! S DIC=2,DIC(0)="QEAM" D ^DIC G EXIT:Y<0  S DFN=+Y
"RTN","PSOPMP0",16,0)
 S PSODFN=DFN D CHKADDR^PSOBAI(DFN,1,1)  ;bad address flag/update
"RTN","PSOPMP0",17,0)
 D LST(PSOSITE,DFN)
"RTN","PSOPMP0",18,0)
 Q
"RTN","PSOPMP0",19,0)
 ;
"RTN","PSOPMP0",20,0)
LST(SITE,PSODFN) ;ListManager entry point
"RTN","PSOPMP0",21,0)
 ; Loading Division/User preferences
"RTN","PSOPMP0",22,0)
 D LOAD^PSOPMPPF(SITE,DUZ)
"RTN","PSOPMP0",23,0)
 W !,"Please wait..."
"RTN","PSOPMP0",24,0)
 D EN^VALM("PSO PMP MAIN")
"RTN","PSOPMP0",25,0)
 D FULL^VALM1
"RTN","PSOPMP0",26,0)
 G EXIT
"RTN","PSOPMP0",27,0)
 ;
"RTN","PSOPMP0",28,0)
HDR      ;Header
"RTN","PSOPMP0",29,0)
 N LINE,POS,LINE1,LINE2,LINE3,LINE4,WT,WTDT,HT,HTDT,VADM,DFN,PNAME,DOB,SEX,X,GMRAL,ADVREA
"RTN","PSOPMP0",30,0)
 K VADM S DFN=PSODFN D DEM^VADPT
"RTN","PSOPMP0",31,0)
 S PNAME=VADM(1)
"RTN","PSOPMP0",32,0)
 S DOB=$S(+VADM(3):$P(VADM(3),"^",2)_" ("_$G(VADM(4))_")",1:"UNKNOWN")
"RTN","PSOPMP0",33,0)
 S SEX=$P(VADM(5),"^",2)
"RTN","PSOPMP0",34,0)
 S (WT,X)="",GMRVSTR="WT" D EN6^GMRVUTL I X'="" S WT=$J($P(X,"^",8)/2.2046226,6,2),WTDT=$$DAT^PSOPMP1($P(X,"^")\1,"/",1)
"RTN","PSOPMP0",35,0)
 S (HT,X)="",GMRVSTR="HT" D EN6^GMRVUTL I X'="" S HT=$J($P(X,"^",8)*2.54,6,2),HTDT=$$DAT^PSOPMP1($P(X,"^")\1,"/",1)
"RTN","PSOPMP0",36,0)
 S LINE1=PNAME
"RTN","PSOPMP0",37,0)
 S LINE1=$$ALLERGY^PSOPMP1(LINE1,DFN)
"RTN","PSOPMP0",38,0)
 S LINE2="  PID: "_$P(VADM(2),"^",2),$E(LINE2,50)="HEIGHT(cm): "_$S(HT'="":HT_" ("_HTDT_")",1:"NOT AVAILABLE")
"RTN","PSOPMP0",39,0)
 S LINE3="  DOB: "_DOB,$E(LINE3,50)="WEIGHT(kg): "_$S(WT'="":WT_" ("_WTDT_")",1:"NOT AVAILABLE")
"RTN","PSOPMP0",40,0)
 S LINE4="  SEX: "_SEX,$E(LINE4,43)="EXP/CANCEL CUTOFF: "_PSOEXDCE_" DAYS"
"RTN","PSOPMP0",41,0)
 ;
"RTN","PSOPMP0",42,0)
 K VALMHDR S VALMHDR(1)=LINE1,VALMHDR(2)=LINE2,VALMHDR(3)=LINE3,VALMHDR(4)=LINE4
"RTN","PSOPMP0",43,0)
 D SETHDR^PSOPMP1()
"RTN","PSOPMP0",44,0)
 Q
"RTN","PSOPMP0",45,0)
 ;
"RTN","PSOPMP0",46,0)
INIT ;Populates the Body section for ListMan
"RTN","PSOPMP0",47,0)
 K ^TMP("PSOPMP0",$J),^TMP("PSOPMPSR",$J)
"RTN","PSOPMP0",48,0)
 D SETSORT(PSOSRTBY),SETLINE
"RTN","PSOPMP0",49,0)
 S VALMSG="Select the entry # to view or ?? for more actions"
"RTN","PSOPMP0",50,0)
 Q
"RTN","PSOPMP0",51,0)
 ;
"RTN","PSOPMP0",52,0)
SETLINE ;Sets the line to be displayed in ListMan
"RTN","PSOPMP0",53,0)
 N TYPE,STS,SUB,SEQ,LINE,Z,TOTAL,I,X,X1,ORDCNT,LBL,LN,IENSUB,GROUP,GRP,QTYL
"RTN","PSOPMP0",54,0)
 I '$D(^TMP("PSOPMPSR",$J)) D  Q
"RTN","PSOPMP0",55,0)
 . F I=1:1:6 S ^TMP("PSOPMP0",$J,I,0)=""
"RTN","PSOPMP0",56,0)
 . S ^TMP("PSOPMP0",$J,7,0)="                    No prescriptions found for this patient."
"RTN","PSOPMP0",57,0)
 . S VALMCNT=1
"RTN","PSOPMP0",58,0)
 ;
"RTN","PSOPMP0",59,0)
 ;Resetting list to NORMAL video attributes
"RTN","PSOPMP0",60,0)
 F I=1:1:$G(LASTLINE) D RESTORE^VALM10(I)
"RTN","PSOPMP0",61,0)
 K GRPLN,HIGHLN
"RTN","PSOPMP0",62,0)
 ;Building the list (line by line)
"RTN","PSOPMP0",63,0)
 S (GROUP,STS,SUB)="",LINE=0 K ^TMP("PSOPMP0",$J)
"RTN","PSOPMP0",64,0)
 F  S GROUP=$O(^TMP("PSOPMPSR",$J,GROUP)) Q:GROUP=""  D
"RTN","PSOPMP0",65,0)
 . S GRP=$P(GROUP,"^")
"RTN","PSOPMP0",66,0)
 . I GRP'["R"!('PSOSTSGP&($O(^TMP("PSOPMPSR",$J,GROUP),-1)'="")) D
"RTN","PSOPMP0",67,0)
 . . D GROUP^PSOPMP1($P(GROUP,"^",2),+$G(^TMP("PSOPMPSR",$J,GROUP)),.LINE)
"RTN","PSOPMP0",68,0)
 . F  S STS=$O(^TMP("PSOPMPSR",$J,GROUP,STS)) Q:STS=""  D
"RTN","PSOPMP0",69,0)
 . . I STS'="<NULL>" D
"RTN","PSOPMP0",70,0)
 . . . D GROUP^PSOPMP1($P(STS,"^",2),+$G(^TMP("PSOPMPSR",$J,GROUP,STS)),.LINE)
"RTN","PSOPMP0",71,0)
 . . F  S SUB=$O(^TMP("PSOPMPSR",$J,GROUP,STS,SUB),$S(PSORDER="A":1,1:-1)) Q:SUB=""  D
"RTN","PSOPMP0",72,0)
 . . . S Z=$G(^TMP("PSOPMPSR",$J,GROUP,STS,SUB))
"RTN","PSOPMP0",73,0)
 . . . S X1="",SEQ=$G(SEQ)+1,X1=$J(SEQ,3)
"RTN","PSOPMP0",74,0)
 . . . S QTYL=$L($P(Z,"^",4)) S:QTYL<5 QTYL=5
"RTN","PSOPMP0",75,0)
 . . . I GRP["R"!(GRP["T")!(GRP["H") S $E(X1,5)=$P(Z,"^",2),$E(X1,19)=$E($P(Z,"^",3),1,(32-QTYL))
"RTN","PSOPMP0",76,0)
 . . . I GRP["P"!(GRP["N") S $E(X1,5)=$P(Z,"^",3)
"RTN","PSOPMP0",77,0)
 . . . I GRP["N" S $E(X1,49)="Date Documented:"
"RTN","PSOPMP0",78,0)
 . . . I GRP'["N" S $E(X1,52-QTYL)=$J($P(Z,"^",4),QTYL),$E(X1,53)=$P(Z,"^",5),$E(X1,57)=$P(Z,"^",6)
"RTN","PSOPMP0",79,0)
 . . . S $E(X1,66)=$P(Z,"^",7)
"RTN","PSOPMP0",80,0)
 . . . S $E(X1,74)=$J($P(Z,"^",8),3),$E(X1,78)=$J($P(Z,"^",9),3)
"RTN","PSOPMP0",81,0)
 . . . S LINE=LINE+1,^TMP("PSOPMP0",$J,LINE,0)=X1,HIGHLN(LINE)=""
"RTN","PSOPMP0",82,0)
 . . . S IENSUB=$S(GRP["R"!(GRP["T")!(GRP["H"):"RX",GRP["P":"PEN",1:"NVA")
"RTN","PSOPMP0",83,0)
 . . . S ^TMP("PSOPMP0",$J,SEQ,IENSUB)=$P(Z,"^")
"RTN","PSOPMP0",84,0)
 . . . I IENSUB="PEN"&($P($G(^PS(52.41,+$P(Z,"^"),0)),"^",23)=1) S ^TMP("PSOPMP0",$J,LINE,"RV")=1
"RTN","PSOPMP0",85,0)
 . . . I $G(PSOSIGDP) D SETSIG^PSOPMP1($S(GRP["R"!(GRP["T")!(GRP["H"):"R",GRP["P":"P",1:"N"),+Z,.LINE,PSODFN)
"RTN","PSOPMP0",86,0)
 ;
"RTN","PSOPMP0",87,0)
 ;Saving NORMAL video attributes to be reset later
"RTN","PSOPMP0",88,0)
 I LINE>$G(LASTLINE) D
"RTN","PSOPMP0",89,0)
 . F I=($G(LASTLINE)+1):1:LINE D SAVE^VALM10(I)
"RTN","PSOPMP0",90,0)
 . S LASTLINE=LINE
"RTN","PSOPMP0",91,0)
 D VIDEO^PSOPMP1()
"RTN","PSOPMP0",92,0)
 S VALMCNT=+$G(LINE) D RV^PSOPMP1
"RTN","PSOPMP0",93,0)
 Q
"RTN","PSOPMP0",94,0)
 ;
"RTN","PSOPMP0",95,0)
SETSORT(FIELD) ;Sets the data sorted by the FIELD specified
"RTN","PSOPMP0",96,0)
 N SEQ,RX,RXNUM,DRUG,DRNAME,QTY,STATUS,STS,ISSDT,DOCDAT,LSTFD,REFREM,DAYSUP,SIG,Z,ORD,GRPCNT,GROUP,RFRX,OI,PSOBADR,RDREJ
"RTN","PSOPMP0",97,0)
 K ^TMP("PSOPMPSR",$J)
"RTN","PSOPMP0",98,0)
 ;Loading prescription (file #55)
"RTN","PSOPMP0",99,0)
 S SEQ=0
"RTN","PSOPMP0",100,0)
 F  S SEQ=$O(^PS(55,PSODFN,"P",SEQ)) Q:'SEQ  D
"RTN","PSOPMP0",101,0)
 . S RX=+$G(^PS(55,PSODFN,"P",SEQ,0)) I 'RX!($G(^PSRX(RX,0))="") Q
"RTN","PSOPMP0",102,0)
 . I $$FILTER^PSOPMP1(RX) Q
"RTN","PSOPMP0",103,0)
 . S RXNUM=$$GET1^DIQ(52,RX,.01)
"RTN","PSOPMP0",104,0)
 . S DRUG=$$GET1^DIQ(52,RX,6,"I")
"RTN","PSOPMP0",105,0)
 . S DRNAME=$$GET1^DIQ(50,DRUG,.01)
"RTN","PSOPMP0",106,0)
 . S QTY=$$GET1^DIQ(52,RX,7)
"RTN","PSOPMP0",107,0)
 . S STATUS=$$STSINFO^PSOPMP1(RX)
"RTN","PSOPMP0",108,0)
 . S ISSDT=$$ISSDT^PSOPMP1(RX,"R")
"RTN","PSOPMP0",109,0)
 . S LSTFD=$$LSTFD^PSOPMP1(RX)
"RTN","PSOPMP0",110,0)
 . S REFREM=$$REFREM^PSOPMP1(RX)
"RTN","PSOPMP0",111,0)
 . S DAYSUP=$$GET1^DIQ(52,RX,8)
"RTN","PSOPMP0",112,0)
 . S PSOBADR=$O(^PSRX(RX,"L",9999),-1)
"RTN","PSOPMP0",113,0)
 . I PSOBADR'="" S PSOBADR=$G(^PSRX(RX,"L",PSOBADR,0)) I PSOBADR["(BAD ADDRESS)" S PSOBADR="B"
"RTN","PSOPMP0",114,0)
 . I PSOBADR'="B" S PSOBADR=""
"RTN","PSOPMP0",115,0)
 . S Z="",$P(Z,"^")=RX,$P(Z,"^",2)=RXNUM_$$COPAY^PSOPMP1(RX)_$$ECME^PSOBPSUT(RX)_$$TITRX^PSOUTL(RX),$P(Z,"^",3)=$E(DRNAME,1,30)
"RTN","PSOPMP0",116,0)
 . S $P(Z,"^",4)=QTY,$P(Z,"^",5)=$P(STATUS,"^",3)_$$CMOP^PSOPMP1(DRUG,RX)_PSOBADR,$P(Z,"^",6)=$P(ISSDT,"^",2)
"RTN","PSOPMP0",117,0)
 . S $P(Z,"^",7)=$P(LSTFD,"^",2),$P(Z,"^",8)=REFREM,$P(Z,"^",9)=DAYSUP
"RTN","PSOPMP0",118,0)
 . S SORT=$S(FIELD="RX":RXNUM_" ",FIELD="DR":DRNAME_RXNUM,FIELD="ID":+ISSDT_RXNUM_" ",FIELD="LF":+LSTFD_RXNUM_" ")
"RTN","PSOPMP0",119,0)
 . S STS="<NULL>" I $G(PSOSTSGP) S STS=$P(STATUS,"^")_"^"_$P(STATUS,"^",2)
"RTN","PSOPMP0",120,0)
 . S GROUP=$P(PSORDSEQ("R"),"^")_"R^"_$P(PSORDSEQ("R"),"^",2)
"RTN","PSOPMP0",121,0)
 . ; PSO*427 changes for RRR/TRI/CVA reject display
"RTN","PSOPMP0",122,0)
 . S RDREJ=0  ; initialize RTS/DUR reject flag to 0
"RTN","PSOPMP0",123,0)
 . I $$FIND^PSOREJUT(RX,,,"79,88") S GROUP=$P(PSORDSEQ("T"),"^")_"T^"_$P(PSORDSEQ("T"),"^",2),STS="<NULL>",RDREJ=1
"RTN","PSOPMP0",124,0)
 . ; next look for any unresolved TRI/CVA rejects  *427
"RTN","PSOPMP0",125,0)
 . I 'RDREJ,$$TRIC^PSOREJP1(RX),$$FIND^PSOREJUT(RX,,,,1) S GROUP=$P(PSORDSEQ("H"),U,1)_"H^"_$P(PSORDSEQ("H"),U,2),STS="<NULL>"
"RTN","PSOPMP0",126,0)
 . ; next look for any unresolved RRR rejects  *427
"RTN","PSOPMP0",127,0)
 . I 'RDREJ,'$$TRIC^PSOREJP1(RX),$$FIND^PSOREJUT(RX,,,,,1) S GROUP=$P(PSORDSEQ("H"),U,1)_"H^"_$P(PSORDSEQ("H"),U,2),STS="<NULL>"
"RTN","PSOPMP0",128,0)
 . S ^TMP("PSOPMPSR",$J,GROUP,STS,SORT)=Z
"RTN","PSOPMP0",129,0)
 . S GRPCNT(GROUP)=$G(GRPCNT(GROUP))+1,GRPCNT(GROUP,STS)=$G(GRPCNT(GROUP,STS))+1
"RTN","PSOPMP0",130,0)
 ;
"RTN","PSOPMP0",131,0)
 S GROUP=""
"RTN","PSOPMP0",132,0)
 F  S GROUP=$O(GRPCNT(GROUP)) Q:GROUP=""  D
"RTN","PSOPMP0",133,0)
 . S ^TMP("PSOPMPSR",$J,GROUP)=$G(GRPCNT(GROUP))
"RTN","PSOPMP0",134,0)
 . S STS="" F  S STS=$O(GRPCNT(GROUP,STS)) Q:STS=""  D
"RTN","PSOPMP0",135,0)
 . . S ^TMP("PSOPMPSR",$J,GROUP,STS)=GRPCNT(GROUP,STS)
"RTN","PSOPMP0",136,0)
 ;
"RTN","PSOPMP0",137,0)
 ;Loading pending orders (file #52.41)
"RTN","PSOPMP0",138,0)
 S ORD=0,GROUP=$P(PSORDSEQ("P"),"^")_"P^"_$P(PSORDSEQ("P"),"^",2)
"RTN","PSOPMP0",139,0)
 F  S ORD=$O(^PS(52.41,"P",PSODFN,ORD)) Q:'ORD  D
"RTN","PSOPMP0",140,0)
 . S TYPE=$$GET1^DIQ(52.41,ORD,2,"I")
"RTN","PSOPMP0",141,0)
 . I TYPE="DC"!(TYPE="DE")!(TYPE="HD") Q
"RTN","PSOPMP0",142,0)
 . S DRNAME="",DRUG=+$$GET1^DIQ(52.41,ORD,11,"I") I DRUG S DRNAME=$$GET1^DIQ(50,DRUG,.01)
"RTN","PSOPMP0",143,0)
 . I DRNAME="" D  Q:DRNAME=""
"RTN","PSOPMP0",144,0)
 . . S OI=$$GET1^DIQ(52.41,ORD,8,"I") I 'OI Q
"RTN","PSOPMP0",145,0)
 . . S DRNAME=$$GET1^DIQ(50.7,OI,.01)_" "_$$GET1^DIQ(50.7,OI,.02)
"RTN","PSOPMP0",146,0)
 . S QTY=$$GET1^DIQ(52.41,ORD,12)
"RTN","PSOPMP0",147,0)
 . S STATUS=$$GET1^DIQ(52.41,ORD,2,"I")
"RTN","PSOPMP0",148,0)
 . S ISSDT=$$ISSDT^PSOPMP1(ORD,"P")
"RTN","PSOPMP0",149,0)
 . S REFREM=$$GET1^DIQ(52.41,ORD,13)
"RTN","PSOPMP0",150,0)
 . S DAYSUP=$$GET1^DIQ(52.41,ORD,101)
"RTN","PSOPMP0",151,0)
 . S RFRX="" I STATUS="RF" S RFRX=$$GET1^DIQ(52.41,ORD,21,"I") I RFRX S RFRX=$$GET1^DIQ(52,RFRX,.01)
"RTN","PSOPMP0",152,0)
 . S Z="",$P(Z,"^")=ORD,$P(Z,"^",3)=$E(DRNAME,1,45),$P(Z,"^",4)=QTY,$P(Z,"^",5)=$E(STATUS,1,2)_$$CMOP^PSOPMP1(DRUG)
"RTN","PSOPMP0",153,0)
 . S $P(Z,"^",6)=$S(RFRX'="":"Rx#: "_RFRX,1:$P(ISSDT,"^",2)),$P(Z,"^",8)=REFREM,$P(Z,"^",9)=DAYSUP
"RTN","PSOPMP0",154,0)
 . S SORT=$S(FIELD="RX":DRNAME_ORD,FIELD="DR":DRNAME_ORD,FIELD="ID":+ISSDT_ORD,FIELD="LF":+ISSDT_ORD)
"RTN","PSOPMP0",155,0)
 . S ^TMP("PSOPMPSR",$J,GROUP,"<NULL>",SORT)=Z
"RTN","PSOPMP0",156,0)
 . S GRPCNT(GROUP)=$G(GRPCNT(GROUP))+1
"RTN","PSOPMP0",157,0)
 S:$G(GRPCNT(GROUP)) ^TMP("PSOPMPSR",$J,GROUP)=$G(GRPCNT(GROUP))
"RTN","PSOPMP0",158,0)
 ;
"RTN","PSOPMP0",159,0)
 ;Loading Non-VA Med orders (file #55, sub-file #55.05)
"RTN","PSOPMP0",160,0)
 S ORD=0,GROUP=$P(PSORDSEQ("N"),"^")_"N^"_$P(PSORDSEQ("N"),"^",2)
"RTN","PSOPMP0",161,0)
 F  S ORD=$O(^PS(55,PSODFN,"NVA",ORD)) Q:'ORD  D
"RTN","PSOPMP0",162,0)
 . I $$GET1^DIQ(55.05,ORD_","_PSODFN,5,"I") Q
"RTN","PSOPMP0",163,0)
 . S DRNAME=$$GET1^DIQ(55.05,ORD_","_PSODFN,1)
"RTN","PSOPMP0",164,0)
 . I DRNAME="" D  Q:DRNAME=""
"RTN","PSOPMP0",165,0)
 . . S OI=$$GET1^DIQ(55.05,ORD_","_PSODFN,.01,"I") I 'OI Q
"RTN","PSOPMP0",166,0)
 . . S DRNAME=$$GET1^DIQ(50.7,OI,.01)_" "_$$GET1^DIQ(50.7,OI,.02)
"RTN","PSOPMP0",167,0)
 . S DOCDAT=$P($$GET1^DIQ(55.05,ORD_","_PSODFN_",",11,"I"),".")
"RTN","PSOPMP0",168,0)
 . S Z="",$P(Z,"^")=ORD,$P(Z,"^",3)=$E(DRNAME,1,38),$P(Z,"^",7)=$$DAT^PSOPMP1(DOCDAT,"-")
"RTN","PSOPMP0",169,0)
 . S SORT=$S(FIELD="RX":DRNAME_ORD,FIELD="DR":DRNAME_ORD,FIELD="ID":DOCDAT_ORD,FIELD="LF":DOCDAT_ORD)
"RTN","PSOPMP0",170,0)
 . S ^TMP("PSOPMPSR",$J,GROUP,"<NULL>",SORT)=Z
"RTN","PSOPMP0",171,0)
 . S GRPCNT(GROUP)=$G(GRPCNT(GROUP))+1
"RTN","PSOPMP0",172,0)
 ;
"RTN","PSOPMP0",173,0)
 S:$G(GRPCNT(GROUP)) ^TMP("PSOPMPSR",$J,GROUP)=$G(GRPCNT(GROUP))
"RTN","PSOPMP0",174,0)
 Q
"RTN","PSOPMP0",175,0)
 ;
"RTN","PSOPMP0",176,0)
RX ;Sort by Rx
"RTN","PSOPMP0",177,0)
 D SORT("RX")
"RTN","PSOPMP0",178,0)
 Q
"RTN","PSOPMP0",179,0)
DR ;Sort by Drug
"RTN","PSOPMP0",180,0)
 D SORT("DR")
"RTN","PSOPMP0",181,0)
 Q
"RTN","PSOPMP0",182,0)
ID ;Sort by Issue Date
"RTN","PSOPMP0",183,0)
 D SORT("ID")
"RTN","PSOPMP0",184,0)
 Q
"RTN","PSOPMP0",185,0)
LF ;Sort by Last Fill Date
"RTN","PSOPMP0",186,0)
 D SORT("LF")
"RTN","PSOPMP0",187,0)
 Q
"RTN","PSOPMP0",188,0)
 ;
"RTN","PSOPMP0",189,0)
SORT(FIELD) ;Sort entries by FIELD
"RTN","PSOPMP0",190,0)
 I PSOSRTBY=FIELD S PSORDER=$S(PSORDER="A":"D",1:"A")
"RTN","PSOPMP0",191,0)
 E  S PSOSRTBY=FIELD,PSORDER="A"
"RTN","PSOPMP0",192,0)
 D REF
"RTN","PSOPMP0",193,0)
 Q
"RTN","PSOPMP0",194,0)
 ;
"RTN","PSOPMP0",195,0)
REF ;Screen Refresh
"RTN","PSOPMP0",196,0)
 W ?52,"Please wait..." D INIT,HDR S VALMBCK="R"
"RTN","PSOPMP0",197,0)
 Q
"RTN","PSOPMP0",198,0)
GS ;Group by Status
"RTN","PSOPMP0",199,0)
 W ?52,"Please wait..." S PSOSTSGP=$S($G(PSOSTSGP):0,1:1) D INIT,HDR S VALMBCK="R"
"RTN","PSOPMP0",200,0)
 Q
"RTN","PSOPMP0",201,0)
SIG ;Display SIG
"RTN","PSOPMP0",202,0)
 W ?52,"Please wait..." S PSOSIGDP=$S($G(PSOSIGDP):0,1:1) D INIT,HDR S VALMBCK="R"
"RTN","PSOPMP0",203,0)
 I 'PSOSIGDP S VALMBG=VALMBG\2
"RTN","PSOPMP0",204,0)
 I PSOSIGDP S VALMBG=VALMBG*2-1
"RTN","PSOPMP0",205,0)
 S:VALMBG>(VALMCNT-10) VALMBG=VALMCNT-10 S:VALMBG<1 VALMBG=1
"RTN","PSOPMP0",206,0)
 Q
"RTN","PSOPMP0",207,0)
PI ;Patient Information
"RTN","PSOPMP0",208,0)
 D EN^PSOLMPI S VALMBCK="R"
"RTN","PSOPMP0",209,0)
 Q
"RTN","PSOPMP0",210,0)
CV ;Change View
"RTN","PSOPMP0",211,0)
 D LST^PSOPMPPF(SITE,DUZ) W !?52,"Please wait..." D INIT,HDR
"RTN","PSOPMP0",212,0)
 S VALMBG=1,VALMBCK="R"
"RTN","PSOPMP0",213,0)
 Q
"RTN","PSOPMP0",214,0)
 ;
"RTN","PSOPMP0",215,0)
SEL ;Process selection of one entry
"RTN","PSOPMP0",216,0)
 N PSOSEL,TYPE,XQORM,ORD,TITLE,PSOLIS,XX
"RTN","PSOPMP0",217,0)
 S PSOLIS=$P(XQORNOD(0),"=",2) I 'PSOLIS S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOPMP0",218,0)
 F XX=1:1:$L(PSOLIS,",") Q:$P(PSOLIS,",",XX)']""  D
"RTN","PSOPMP0",219,0)
 .S PSOSEL=+$P(PSOLIS,",",XX) I 'PSOSEL S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOPMP0",220,0)
 .S TYPE=$O(^TMP("PSOPMP0",$J,PSOSEL,0)) I TYPE="" S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOPMP0",221,0)
 .S ORD=$G(^TMP("PSOPMP0",$J,PSOSEL,TYPE))
"RTN","PSOPMP0",222,0)
 .I 'ORD S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOPMP0",223,0)
 .S TITLE=VALM("TITLE")
"RTN","PSOPMP0",224,0)
 .;
"RTN","PSOPMP0",225,0)
 .;Regular prescription
"RTN","PSOPMP0",226,0)
 .I TYPE="RX" D  S VALMBCK="R" D REF
"RTN","PSOPMP0",227,0)
 .. N PSOVDA,PSOSAVE,DA,PS
"RTN","PSOPMP0",228,0)
 .. S (PSOVDA,DA)=ORD,PS="REJECTMP"
"RTN","PSOPMP0",229,0)
 .. N LINE,TITLE,PSODFN D DP^PSORXVW
"RTN","PSOPMP0",230,0)
 .;
"RTN","PSOPMP0",231,0)
 .;Pending Order
"RTN","PSOPMP0",232,0)
 .I TYPE="PEN" D  S VALMBCK="R" D REF
"RTN","PSOPMP0",233,0)
 .. N PSOACTOV,OR0
"RTN","PSOPMP0",234,0)
 .. S OR0=^PS(52.41,ORD,0),PSOACTOV=""
"RTN","PSOPMP0",235,0)
 .. N LINE,TITLE D PENHDR^PSOPMP1(PSODFN),DSPL^PSOORFI1
"RTN","PSOPMP0",236,0)
 .;
"RTN","PSOPMP0",237,0)
 .;Pending Order
"RTN","PSOPMP0",238,0)
 .I TYPE="NVA" D
"RTN","PSOPMP0",239,0)
 .. N LINE,TITLE D EN^PSONVAVW(PSODFN,ORD)
"RTN","PSOPMP0",240,0)
 .;
"RTN","PSOPMP0",241,0)
 S VALMBCK="R",VALM("TITLE")=TITLE
"RTN","PSOPMP0",242,0)
 Q
"RTN","PSOPMP0",243,0)
 ;
"RTN","PSOPMP0",244,0)
EXIT ;
"RTN","PSOPMP0",245,0)
 K ^TMP("PSOPMP0",$J),^TMP("PSOPMPSR",$J)
"RTN","PSOPMP0",246,0)
 Q
"RTN","PSOPMP0",247,0)
 ;
"RTN","PSOPMP0",248,0)
HELP Q
"RTN","PSOPMP0",249,0)
 ;
"RTN","PSOPMP0",250,0)
MEDPRO(RXIEN,FILL) ; MP Medication Profile
"RTN","PSOPMP0",251,0)
 ;
"RTN","PSOPMP0",252,0)
 ; This procedure relies on existing procedures which are part
"RTN","PSOPMP0",253,0)
 ; of Patient Medication Profile ListMan screen.
"RTN","PSOPMP0",254,0)
 ;
"RTN","PSOPMP0",255,0)
 ; New variables used in this procedure.
"RTN","PSOPMP0",256,0)
 ;
"RTN","PSOPMP0",257,0)
 N PSODFN,PSOSIGDP,PSOSITE,PSOSRTBY
"RTN","PSOPMP0",258,0)
 ;
"RTN","PSOPMP0",259,0)
 K ^TMP("PSOPMP0",$J),^TMP("PSOPMPSR",$J)
"RTN","PSOPMP0",260,0)
 ;
"RTN","PSOPMP0",261,0)
 ; Determine Division IEN, ptr to file# 59, and Patient IEN.
"RTN","PSOPMP0",262,0)
 ;
"RTN","PSOPMP0",263,0)
 S PSOSITE=+$$RXSITE^PSOBPSUT(RXIEN,FILL)
"RTN","PSOPMP0",264,0)
 S PSODFN=+$$GET1^DIQ(52,RXIEN,2,"I")
"RTN","PSOPMP0",265,0)
 ;
"RTN","PSOPMP0",266,0)
 ; LOAD determines Division or User preferences.
"RTN","PSOPMP0",267,0)
 ;
"RTN","PSOPMP0",268,0)
 D LOAD^PSOPMPPF(PSOSITE,DUZ)
"RTN","PSOPMP0",269,0)
 S PSOSIGDP=0  ; Do not include signature info.
"RTN","PSOPMP0",270,0)
 ;
"RTN","PSOPMP0",271,0)
 ; SETSORT collects medication data into ^TMP("PSOPMPSR").
"RTN","PSOPMP0",272,0)
 ; SETLINE takes the data collected in ^TMP("PSOPMPSR") and
"RTN","PSOPMP0",273,0)
 ; creates the display lines in ^TMP("PSOPMP0").
"RTN","PSOPMP0",274,0)
 ;
"RTN","PSOPMP0",275,0)
 D SETSORT(PSOSRTBY)
"RTN","PSOPMP0",276,0)
 D SETLINE
"RTN","PSOPMP0",277,0)
 ;
"RTN","PSOPMP0",278,0)
 K ^TMP("PSOPMPSR",$J)
"RTN","PSOPMP0",279,0)
 ;
"RTN","PSOPMP0",280,0)
 ; Clean up variable set but neither Newed nor Killed in LOAD^PSOPMPPF.
"RTN","PSOPMP0",281,0)
 ;
"RTN","PSOPMP0",282,0)
 K PSOEXDCE,PSORDCNT,PSORDER,PSOSRTBY,PSOSTSEQ,PSOSTSGP
"RTN","PSOPMP0",283,0)
 ;
"RTN","PSOPMP0",284,0)
 Q
"RTN","PSOPTC0")
0^12^B69697728
"RTN","PSOPTC0",1,0)
PSOPTC0 ;AITC/PD - Patient Billing Comments;9/5/2017
"RTN","PSOPTC0",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**482**;DEC 1997;Build 44
"RTN","PSOPTC0",3,0)
 ;
"RTN","PSOPTC0",4,0)
EN ; Menu Option Entry Point
"RTN","PSOPTC0",5,0)
 ;
"RTN","PSOPTC0",6,0)
 I '$D(^XUSEC("PSO EPHARMACY SITE MANAGER",DUZ)) W !,$C(7),"Requires Pharmacy Key (PSO EPHARMACY SITE MANAGER) !" Q
"RTN","PSOPTC0",7,0)
 ;
"RTN","PSOPTC0",8,0)
 N DIC,DTOUT,X,Y
"RTN","PSOPTC0",9,0)
 ;
"RTN","PSOPTC0",10,0)
 K PSOPTC
"RTN","PSOPTC0",11,0)
 ;
"RTN","PSOPTC0",12,0)
 ;Division selection
"RTN","PSOPTC0",13,0)
 I '$G(PSOSITE) D ^PSOLSET I '$D(PSOPAR) W $C(7),!!,"Pharmacy Division Must be Selected!",! G EXIT
"RTN","PSOPTC0",14,0)
 ;
"RTN","PSOPTC0",15,0)
 ;Patient selection
"RTN","PSOPTC0",16,0)
 W !!
"RTN","PSOPTC0",17,0)
 S DIC=2,DIC(0)="QEAM"
"RTN","PSOPTC0",18,0)
 D ^DIC
"RTN","PSOPTC0",19,0)
 G EXIT:((Y<0)!($D(DTOUT)))
"RTN","PSOPTC0",20,0)
 S PSOPTC("DFN")=+Y
"RTN","PSOPTC0",21,0)
 ;
"RTN","PSOPTC0",22,0)
 D EN^VALM("PSO PATIENT COMMENT")
"RTN","PSOPTC0",23,0)
 ;
"RTN","PSOPTC0",24,0)
 Q
"RTN","PSOPTC0",25,0)
 ;
"RTN","PSOPTC0",26,0)
HDR ; Header
"RTN","PSOPTC0",27,0)
 ;
"RTN","PSOPTC0",28,0)
 N DFN,H1,VA,VADM
"RTN","PSOPTC0",29,0)
 ;
"RTN","PSOPTC0",30,0)
 S DFN=$G(PSOPTC("DFN"))
"RTN","PSOPTC0",31,0)
 I 'DFN G EXIT
"RTN","PSOPTC0",32,0)
 D DEM^VADPT
"RTN","PSOPTC0",33,0)
 S H1=$$LJ^XLFSTR("Patient: "_$E($G(VADM(1)),1,30)_" ("_$G(VA("BID"))_")",48)
"RTN","PSOPTC0",34,0)
 S H1=H1_$$LJ^XLFSTR("Sex: "_$P($G(VADM(5)),U,1),8)
"RTN","PSOPTC0",35,0)
 S H1=H1_$$LJ^XLFSTR("DOB: "_$$FMTE^XLFDT($P($G(VADM(3)),U,1),"2Z")_" ("_$G(VADM(4))_")",22)
"RTN","PSOPTC0",36,0)
 ;
"RTN","PSOPTC0",37,0)
 S VALMHDR(1)=H1
"RTN","PSOPTC0",38,0)
 S VALMHDR(2)="#   STATUS  DATE/TIME                USER"
"RTN","PSOPTC0",39,0)
 Q
"RTN","PSOPTC0",40,0)
 ;
"RTN","PSOPTC0",41,0)
INIT ; 
"RTN","PSOPTC0",42,0)
 ;
"RTN","PSOPTC0",43,0)
 D CLEAN^VALM10
"RTN","PSOPTC0",44,0)
 D BUILD
"RTN","PSOPTC0",45,0)
 Q
"RTN","PSOPTC0",46,0)
 ;
"RTN","PSOPTC0",47,0)
BUILD ; Build ListMan Screen
"RTN","PSOPTC0",48,0)
 ;
"RTN","PSOPTC0",49,0)
 ; PSODFN = Patient Record ID
"RTN","PSOPTC0",50,0)
 ; PSOPC  = PATIENT COMMENT sub-file (#55.17) Record ID
"RTN","PSOPTC0",51,0)
 ;
"RTN","PSOPTC0",52,0)
 N DIWL,DIWR,PSOCNT,PSOCOM,PSOCOMMENT,PSODATA,PSODATE,PSODATE1
"RTN","PSOPTC0",53,0)
 N PSODFN,PSOLINE,PSOPC,PSOSTATUS,PSOSTR,PSOUSER,PSOY
"RTN","PSOPTC0",54,0)
 ;
"RTN","PSOPTC0",55,0)
 S PSOLINE=0
"RTN","PSOPTC0",56,0)
 S PSOCNT=0
"RTN","PSOPTC0",57,0)
 S PSODFN=$G(PSOPTC("DFN"))
"RTN","PSOPTC0",58,0)
 I 'PSODFN G EXIT
"RTN","PSOPTC0",59,0)
 ;
"RTN","PSOPTC0",60,0)
 ; Loop through the PATIENT COMMENT sub-file (#55.17) in reverse
"RTN","PSOPTC0",61,0)
 ; chronological order. 
"RTN","PSOPTC0",62,0)
 S PSODATE=""
"RTN","PSOPTC0",63,0)
 F  S PSODATE=$O(^PS(55,PSODFN,"PC","B",PSODATE),-1) Q:PSODATE=""  D
"RTN","PSOPTC0",64,0)
 . S PSOPC=$O(^PS(55,PSODFN,"PC","B",PSODATE,""))
"RTN","PSOPTC0",65,0)
 . K PSODATA
"RTN","PSOPTC0",66,0)
 . D GETS^DIQ(55.17,PSOPC_","_PSODFN_",",".01;1;2;3","E","PSODATA")
"RTN","PSOPTC0",67,0)
 . S PSODATE1=$G(PSODATA(55.17,PSOPC_","_PSODFN_",",.01,"E"))
"RTN","PSOPTC0",68,0)
 . S PSOUSER=$G(PSODATA(55.17,PSOPC_","_PSODFN_",",1,"E"))
"RTN","PSOPTC0",69,0)
 . S PSOSTATUS=$G(PSODATA(55.17,PSOPC_","_PSODFN_",",2,"E"))
"RTN","PSOPTC0",70,0)
 . S PSOCOMMENT=$G(PSODATA(55.17,PSOPC_","_PSODFN_",",3,"E"))
"RTN","PSOPTC0",71,0)
 . S PSOCNT=PSOCNT+1
"RTN","PSOPTC0",72,0)
 . S PSOSTR=PSOCNT_"   "_$E(PSOSTATUS)_"       "_PSODATE1_"    "_PSOUSER
"RTN","PSOPTC0",73,0)
 . S PSOLINE=PSOLINE+1
"RTN","PSOPTC0",74,0)
 . S @VALMAR@("IDX",PSOCNT,PSOPC)=""
"RTN","PSOPTC0",75,0)
 . D SET^VALM10(PSOLINE,PSOSTR,"")
"RTN","PSOPTC0",76,0)
 . ; Use ^DIWP to format comment into lines no greater than 78 characters
"RTN","PSOPTC0",77,0)
 . ; with logical breaks between words.
"RTN","PSOPTC0",78,0)
 . K ^UTILITY($J,"W")
"RTN","PSOPTC0",79,0)
 . S X=PSOCOMMENT,DIWL=1,DIWR=78
"RTN","PSOPTC0",80,0)
 . D ^DIWP
"RTN","PSOPTC0",81,0)
 . F PSOY=1:1 Q:('$D(^UTILITY($J,"W",1,PSOY,0)))  D
"RTN","PSOPTC0",82,0)
 . . S PSOCOM=$G(^UTILITY($J,"W",1,PSOY,0))
"RTN","PSOPTC0",83,0)
 . . S PSOLINE=PSOLINE+1
"RTN","PSOPTC0",84,0)
 . . D SET^VALM10(PSOLINE,"  "_PSOCOM,"")
"RTN","PSOPTC0",85,0)
 . K ^UTILITY($J,"W")
"RTN","PSOPTC0",86,0)
 ;
"RTN","PSOPTC0",87,0)
 S VALMCNT=PSOLINE
"RTN","PSOPTC0",88,0)
 ; 
"RTN","PSOPTC0",89,0)
 Q
"RTN","PSOPTC0",90,0)
 ;
"RTN","PSOPTC0",91,0)
ADD ; Add Patient Comment
"RTN","PSOPTC0",92,0)
 ;
"RTN","PSOPTC0",93,0)
 N PSO55,PSOCOM
"RTN","PSOPTC0",94,0)
 ;
"RTN","PSOPTC0",95,0)
 D FULL^VALM1
"RTN","PSOPTC0",96,0)
 S PSOCOM=$$COMMENT("Comment: ",150)
"RTN","PSOPTC0",97,0)
 ; Comment not confirmed or user entered ^ to Exit
"RTN","PSOPTC0",98,0)
 I $L(PSOCOM)=0!(PSOCOM["^") S VALMBCK="R" Q
"RTN","PSOPTC0",99,0)
 S PSO55=$G(PSOPTC("DFN"))
"RTN","PSOPTC0",100,0)
 ; Valid comment entered - Create new multiple record
"RTN","PSOPTC0",101,0)
 D ADDPC(PSOCOM,PSO55)
"RTN","PSOPTC0",102,0)
 D INIT
"RTN","PSOPTC0",103,0)
 S VALMBCK="R"
"RTN","PSOPTC0",104,0)
 ;
"RTN","PSOPTC0",105,0)
 Q
"RTN","PSOPTC0",106,0)
 ;
"RTN","PSOPTC0",107,0)
 ;Enter a comment
"RTN","PSOPTC0",108,0)
 ;PSOTR  -prompt string
"RTN","PSOPTC0",109,0)
 ;PSMLEN -maxlen
"RTN","PSOPTC0",110,0)
 ;returns:
"RTN","PSOPTC0",111,0)
 ; "^" - if user chose to quit 
"RTN","PSOPTC0",112,0)
 ; "" - nothing entered or input has been discarded
"RTN","PSOPTC0",113,0)
 ; otherwise - comment's text
"RTN","PSOPTC0",114,0)
COMMENT(PSOTR,PSMLEN) ;*/
"RTN","PSOPTC0",115,0)
 N DIR,DTOUT,DUOUT,PSQ
"RTN","PSOPTC0",116,0)
 I '$D(PSOTR) S PSOTR="Comment "
"RTN","PSOPTC0",117,0)
 I '$D(PSMLEN) S PSMLEN=150
"RTN","PSOPTC0",118,0)
 S DIR(0)="FA^1:150"
"RTN","PSOPTC0",119,0)
 S DIR("A")=PSOTR
"RTN","PSOPTC0",120,0)
 S DIR("?")="Enter a free text comment up to 150 characters long."
"RTN","PSOPTC0",121,0)
 S PSQ=0
"RTN","PSOPTC0",122,0)
 F  D  Q:+PSQ'=0
"RTN","PSOPTC0",123,0)
 . W ! D ^DIR
"RTN","PSOPTC0",124,0)
 . I $D(DUOUT)!($D(DTOUT)) S PSQ=-1 Q
"RTN","PSOPTC0",125,0)
 . I $L(Y)'>PSMLEN S PSQ=1 Q
"RTN","PSOPTC0",126,0)
 . W !!,"Enter a free text comment up to 150 characters long.",!
"RTN","PSOPTC0",127,0)
 . S DIR("B")=$E(Y,1,PSMLEN)
"RTN","PSOPTC0",128,0)
 Q:PSQ<0 "^"
"RTN","PSOPTC0",129,0)
 Q:$L(Y)=0 ""
"RTN","PSOPTC0",130,0)
 S PSQ=$$YESNO^PSOREJP3("Are you sure Y/N")
"RTN","PSOPTC0",131,0)
 I PSQ=-1 Q "^"
"RTN","PSOPTC0",132,0)
 I PSQ=0 Q ""
"RTN","PSOPTC0",133,0)
 Q Y
"RTN","PSOPTC0",134,0)
 ; 
"RTN","PSOPTC0",135,0)
 ;
"RTN","PSOPTC0",136,0)
ADDPC(PSOCOM,PSO55) ; Add new multiple record for Patient Comment
"RTN","PSOPTC0",137,0)
 ;
"RTN","PSOPTC0",138,0)
 N PSO200,PSOAR,PSOFILE,PSOIEN,PSONOW,PSOPC
"RTN","PSOPTC0",139,0)
 ;
"RTN","PSOPTC0",140,0)
 ; Create the Patient Comment multiple
"RTN","PSOPTC0",141,0)
 S PSOFILE=55.17
"RTN","PSOPTC0",142,0)
 D NOW^%DTC
"RTN","PSOPTC0",143,0)
 S PSONOW=%
"RTN","PSOPTC0",144,0)
 S PSOAR(1,PSOFILE,"+1,"_PSO55_",",.01)=PSONOW
"RTN","PSOPTC0",145,0)
 D UPDATE^DIE("","PSOAR(1)") K PSOAR
"RTN","PSOPTC0",146,0)
 ;
"RTN","PSOPTC0",147,0)
 ; Populate the data into the Patient Comment multiple
"RTN","PSOPTC0",148,0)
 S PSO200=DUZ
"RTN","PSOPTC0",149,0)
 S PSOPC=$O(^PS(55,PSO55,"PC","B",PSONOW,""))
"RTN","PSOPTC0",150,0)
 S PSOIEN=PSOPC_","_PSO55_","
"RTN","PSOPTC0",151,0)
 S PSOAR(PSOFILE,PSOIEN,1)=PSO200
"RTN","PSOPTC0",152,0)
 S PSOAR(PSOFILE,PSOIEN,2)="Y"
"RTN","PSOPTC0",153,0)
 S PSOAR(PSOFILE,PSOIEN,3)=PSOCOM
"RTN","PSOPTC0",154,0)
 D FILE^DIE(,"PSOAR") K PSOAR
"RTN","PSOPTC0",155,0)
 ;
"RTN","PSOPTC0",156,0)
 ; Add Patient Comment History
"RTN","PSOPTC0",157,0)
 D ADDPCH(PSO55,PSOPC,PSONOW,1)
"RTN","PSOPTC0",158,0)
 ;
"RTN","PSOPTC0",159,0)
 Q
"RTN","PSOPTC0",160,0)
 ;
"RTN","PSOPTC0",161,0)
ADDPCH(PSO55,PSOPC,PSONOW,PSOACT) ; Add new multiple record for Patient Comment History
"RTN","PSOPTC0",162,0)
 ;
"RTN","PSOPTC0",163,0)
 N PSO200,PSOAR,PSOFILE,PSOIEN,PSOPCH
"RTN","PSOPTC0",164,0)
 ;
"RTN","PSOPTC0",165,0)
 ; Create the Patient Comment History multiple
"RTN","PSOPTC0",166,0)
 S PSOFILE=55.174
"RTN","PSOPTC0",167,0)
 S PSO200=DUZ
"RTN","PSOPTC0",168,0)
 S PSOAR(1,PSOFILE,"+1,"_PSOPC_","_PSO55_",",.01)=PSONOW
"RTN","PSOPTC0",169,0)
 D UPDATE^DIE("","PSOAR(1)")
"RTN","PSOPTC0",170,0)
 K PSOAR
"RTN","PSOPTC0",171,0)
 ;
"RTN","PSOPTC0",172,0)
 ; Populate the data into the Patient Comment History multiple
"RTN","PSOPTC0",173,0)
 S PSOPCH=$O(^PS(55,PSO55,"PC",PSOPC,"PCH","B",PSONOW,""))
"RTN","PSOPTC0",174,0)
 S PSOIEN=PSOPCH_","_PSOPC_","_PSO55_","
"RTN","PSOPTC0",175,0)
 S PSOAR(PSOFILE,PSOIEN,1)=PSO200
"RTN","PSOPTC0",176,0)
 S PSOAR(PSOFILE,PSOIEN,2)=PSOACT
"RTN","PSOPTC0",177,0)
 D FILE^DIE(,"PSOAR") K PSOAR
"RTN","PSOPTC0",178,0)
 ;
"RTN","PSOPTC0",179,0)
 Q
"RTN","PSOPTC0",180,0)
 ;
"RTN","PSOPTC0",181,0)
ACT ; Activate / Inactivate Patient Comment
"RTN","PSOPTC0",182,0)
 ;
"RTN","PSOPTC0",183,0)
 ; ACT serves as a toggle for Activating and Inactivating comments.
"RTN","PSOPTC0",184,0)
 ; Upon selection of this action, the user will be prompted for 
"RTN","PSOPTC0",185,0)
 ; the line to Activate/Inactivate. The comment will be redisplayed 
"RTN","PSOPTC0",186,0)
 ; to the user. A confirmation prompt will appear. Upon confirmation,
"RTN","PSOPTC0",187,0)
 ; the value will be updated and the display refreshed.
"RTN","PSOPTC0",188,0)
 ; If the user confirmed to change the status of the comment, a history
"RTN","PSOPTC0",189,0)
 ; record will be filed.
"RTN","PSOPTC0",190,0)
 ; 
"RTN","PSOPTC0",191,0)
 N DIWL,DIWR,PSO55,PSOACT,PSOACT1,PSOAR,PSOCOM,PSODATA,PSOFILE
"RTN","PSOPTC0",192,0)
 N PSOLINE,PSOIEN,PSONOW,PSONOWH,PSOPC,PSOY,PSOYESNO
"RTN","PSOPTC0",193,0)
 ;
"RTN","PSOPTC0",194,0)
 ; Get record id (#55.17) for selected entry
"RTN","PSOPTC0",195,0)
 S PSOPC=$$SELECT(.PSOLINE)
"RTN","PSOPTC0",196,0)
 ;
"RTN","PSOPTC0",197,0)
 I PSOPC="^" S VALMBCK="R" Q
"RTN","PSOPTC0",198,0)
 ;
"RTN","PSOPTC0",199,0)
 S PSOFILE=55.17
"RTN","PSOPTC0",200,0)
 S PSO55=PSOPTC("DFN")
"RTN","PSOPTC0",201,0)
 K PSODATA
"RTN","PSOPTC0",202,0)
 S PSOIEN=PSOPC_","_PSO55_","
"RTN","PSOPTC0",203,0)
 D GETS^DIQ(55.17,PSOIEN,".01;2;3","I","PSODATA")
"RTN","PSOPTC0",204,0)
 S PSONOW=$G(PSODATA(55.17,PSOIEN,.01,"I"))
"RTN","PSOPTC0",205,0)
 S PSOACT="Activate"
"RTN","PSOPTC0",206,0)
 S PSOACT1=$G(PSODATA(55.17,PSOIEN,2,"I"))
"RTN","PSOPTC0",207,0)
 I PSOACT1="Y" S PSOACT="Inactivate"
"RTN","PSOPTC0",208,0)
 W !,PSOACT_" Comment # "_PSOLINE_":"
"RTN","PSOPTC0",209,0)
 I $L($G(PSODATA(55.17,PSOIEN,3,"I")))>78 D
"RTN","PSOPTC0",210,0)
 . K ^UTILITY($J,"W")
"RTN","PSOPTC0",211,0)
 . S X=PSODATA(55.17,PSOIEN,3,"I"),DIWL=1,DIWR=78
"RTN","PSOPTC0",212,0)
 . D ^DIWP
"RTN","PSOPTC0",213,0)
 . F PSOY=1:1 Q:('$D(^UTILITY($J,"W",1,PSOY,0)))  D
"RTN","PSOPTC0",214,0)
 . . S PSOCOM=$G(^UTILITY($J,"W",1,PSOY,0))
"RTN","PSOPTC0",215,0)
 . . W !,"  "_PSOCOM
"RTN","PSOPTC0",216,0)
 . K ^UTILITY($J,"W")
"RTN","PSOPTC0",217,0)
 E  W !,"  "_PSODATA(55.17,PSOIEN,3,"I")
"RTN","PSOPTC0",218,0)
 ;
"RTN","PSOPTC0",219,0)
 S PSOYESNO=$$YESNO^PSOREJP3("Are you sure Y/N")
"RTN","PSOPTC0",220,0)
 I PSOYESNO=-1 G ACTX
"RTN","PSOPTC0",221,0)
 ;
"RTN","PSOPTC0",222,0)
 I PSOYESNO=1 D
"RTN","PSOPTC0",223,0)
 . S PSOAR(PSOFILE,PSOIEN,2)="N"
"RTN","PSOPTC0",224,0)
 . I PSOACT1="N" S PSOAR(PSOFILE,PSOIEN,2)="Y"
"RTN","PSOPTC0",225,0)
 . D FILE^DIE(,"PSOAR") K PSOAR
"RTN","PSOPTC0",226,0)
 . ;
"RTN","PSOPTC0",227,0)
 . ; Add Patient Comment History
"RTN","PSOPTC0",228,0)
 . D NOW^%DTC
"RTN","PSOPTC0",229,0)
 . S PSONOWH=%
"RTN","PSOPTC0",230,0)
 . I PSOACT1="Y" D ADDPCH(PSO55,PSOPC,PSONOWH,3)
"RTN","PSOPTC0",231,0)
 . I PSOACT1="N" D ADDPCH(PSO55,PSOPC,PSONOWH,2)
"RTN","PSOPTC0",232,0)
 ;
"RTN","PSOPTC0",233,0)
ACTX ; 
"RTN","PSOPTC0",234,0)
 ;
"RTN","PSOPTC0",235,0)
 D INIT
"RTN","PSOPTC0",236,0)
 S VALMBCK="R"
"RTN","PSOPTC0",237,0)
 ;
"RTN","PSOPTC0",238,0)
 Q
"RTN","PSOPTC0",239,0)
 ;
"RTN","PSOPTC0",240,0)
HIST ; Patient Comment History
"RTN","PSOPTC0",241,0)
 ;
"RTN","PSOPTC0",242,0)
 ; HIST provides a historical view of any Patient Comment.
"RTN","PSOPTC0",243,0)
 ; The user will be prompted to select a Patient Comment. The
"RTN","PSOPTC0",244,0)
 ; comment will be redisplayed to the user. A listing of the
"RTN","PSOPTC0",245,0)
 ; comment's history will display in reverse chronological order. 
"RTN","PSOPTC0",246,0)
 ; The values in this listing will include ADD, ACTIVATE and
"RTN","PSOPTC0",247,0)
 ; INACTIVATE. The date/time and user for each historical
"RTN","PSOPTC0",248,0)
 ; update will display.
"RTN","PSOPTC0",249,0)
 ;
"RTN","PSOPTC0",250,0)
 N DIWL,DIWR,PSO55,PSOCOM,PSODATA,PSOIEN,PSOLINE
"RTN","PSOPTC0",251,0)
 N PSONOW,PSOPC,PSOPCH,PSOY
"RTN","PSOPTC0",252,0)
 ;
"RTN","PSOPTC0",253,0)
 S PSOPC=$$SELECT(.PSOLINE)
"RTN","PSOPTC0",254,0)
 ;
"RTN","PSOPTC0",255,0)
 I PSOPC="^" S VALMBCK="R" Q
"RTN","PSOPTC0",256,0)
 ;
"RTN","PSOPTC0",257,0)
 S PSO55=PSOPTC("DFN")
"RTN","PSOPTC0",258,0)
 ;
"RTN","PSOPTC0",259,0)
 W !
"RTN","PSOPTC0",260,0)
 S PSOIEN=PSOPC_","_PSO55_","
"RTN","PSOPTC0",261,0)
 K PSODATA
"RTN","PSOPTC0",262,0)
 D GETS^DIQ(55.17,PSOIEN,".01;2;3","I","PSODATA")
"RTN","PSOPTC0",263,0)
 I $L($G(PSODATA(55.17,PSOIEN,3,"I")))>78 D
"RTN","PSOPTC0",264,0)
 . K ^UTILITY($J,"W")
"RTN","PSOPTC0",265,0)
 . S X=PSODATA(55.17,PSOIEN,3,"I"),DIWL=1,DIWR=78
"RTN","PSOPTC0",266,0)
 . D ^DIWP
"RTN","PSOPTC0",267,0)
 . F PSOY=1:1 Q:('$D(^UTILITY($J,"W",1,PSOY,0)))  D
"RTN","PSOPTC0",268,0)
 . . S PSOCOM=$G(^UTILITY($J,"W",1,PSOY,0))
"RTN","PSOPTC0",269,0)
 . . W !," "_PSOCOM
"RTN","PSOPTC0",270,0)
 . K ^UTILITY($J,"W")
"RTN","PSOPTC0",271,0)
 E  W !," "_PSODATA(55.17,PSOIEN,3,"I")
"RTN","PSOPTC0",272,0)
 W !
"RTN","PSOPTC0",273,0)
 ;
"RTN","PSOPTC0",274,0)
 S PSONOW=""
"RTN","PSOPTC0",275,0)
 F  S PSONOW=$O(^PS(55,PSO55,"PC",PSOPC,"PCH","B",PSONOW),-1) Q:PSONOW=""  D
"RTN","PSOPTC0",276,0)
 . S PSOPCH=""
"RTN","PSOPTC0",277,0)
 . S PSOPCH=$O(^PS(55,PSO55,"PC",PSOPC,"PCH","B",PSONOW,PSOPCH))
"RTN","PSOPTC0",278,0)
 . S PSOIEN=PSOPCH_","_PSOPC_","_PSO55_","
"RTN","PSOPTC0",279,0)
 . K PSODATA
"RTN","PSOPTC0",280,0)
 . D GETS^DIQ(55.174,PSOIEN,".01;1;2","E","PSODATA")
"RTN","PSOPTC0",281,0)
 . W !,$G(PSODATA(55.174,PSOIEN,2,"E"))
"RTN","PSOPTC0",282,0)
 . W ?15,$G(PSODATA(55.174,PSOIEN,.01,"E"))
"RTN","PSOPTC0",283,0)
 . W ?45,$G(PSODATA(55.174,PSOIEN,1,"E"))
"RTN","PSOPTC0",284,0)
 ;
"RTN","PSOPTC0",285,0)
 D WAIT^VALM1
"RTN","PSOPTC0",286,0)
 ;
"RTN","PSOPTC0",287,0)
 D INIT
"RTN","PSOPTC0",288,0)
 S VALMBCK="R"
"RTN","PSOPTC0",289,0)
 ;
"RTN","PSOPTC0",290,0)
 Q
"RTN","PSOPTC0",291,0)
 ;
"RTN","PSOPTC0",292,0)
SELECT(PSOLINE) ; Select Line from List View
"RTN","PSOPTC0",293,0)
 ;
"RTN","PSOPTC0",294,0)
 N DIR,DIRUT,PSOMAX,Y
"RTN","PSOPTC0",295,0)
 ;
"RTN","PSOPTC0",296,0)
 D FULL^VALM1
"RTN","PSOPTC0",297,0)
 ;
"RTN","PSOPTC0",298,0)
 I '$D(^TMP("PSOPTC0",$J)) D  Q "^"
"RTN","PSOPTC0",299,0)
 . W !!,"No Patient Comments available for selection."
"RTN","PSOPTC0",300,0)
 . D WAIT^VALM1
"RTN","PSOPTC0",301,0)
 ;
"RTN","PSOPTC0",302,0)
 S PSOMAX=$O(^TMP("PSOPTC0",$J,"IDX",""),-1)
"RTN","PSOPTC0",303,0)
 ;
"RTN","PSOPTC0",304,0)
 I PSOMAX=1 S PSOLINE=1 Q $O(^TMP("PSOPTC0",$J,"IDX",PSOLINE,""))
"RTN","PSOPTC0",305,0)
 ;
"RTN","PSOPTC0",306,0)
 W !
"RTN","PSOPTC0",307,0)
 S DIR(0)="N^1:"_PSOMAX
"RTN","PSOPTC0",308,0)
 S DIR("A")="Line"
"RTN","PSOPTC0",309,0)
 I PSOMAX=1 S DIR("B")=PSOMAX
"RTN","PSOPTC0",310,0)
 D ^DIR
"RTN","PSOPTC0",311,0)
 ;
"RTN","PSOPTC0",312,0)
 I $D(DIRUT) Q "^"
"RTN","PSOPTC0",313,0)
 S PSOLINE=Y
"RTN","PSOPTC0",314,0)
 ;
"RTN","PSOPTC0",315,0)
 Q $O(^TMP("PSOPTC0",$J,"IDX",PSOLINE,""))
"RTN","PSOPTC0",316,0)
 ;
"RTN","PSOPTC0",317,0)
HELP ;
"RTN","PSOPTC0",318,0)
 ;
"RTN","PSOPTC0",319,0)
 Q
"RTN","PSOPTC0",320,0)
 ;
"RTN","PSOPTC0",321,0)
EXIT ;
"RTN","PSOPTC0",322,0)
 ;
"RTN","PSOPTC0",323,0)
 K ^TMP("PSOPTC0",$J),PSOPTC
"RTN","PSOPTC0",324,0)
 Q
"RTN","PSOREJP1")
0^7^B202538328
"RTN","PSOREJP1",1,0)
PSOREJP1 ;BIRM/MFR - Third Party Reject Display Screen ;04/29/05
"RTN","PSOREJP1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,247,260,281,287,289,290,358,359,385,403,421,427,448,478,482**;DEC 1997;Build 44
"RTN","PSOREJP1",3,0)
 ;Reference to File 9002313.93 - BPS NCPDP REJECT CODES supported by IA 4720
"RTN","PSOREJP1",4,0)
 ;Reference to ^PS(59.7 supported by IA 694
"RTN","PSOREJP1",5,0)
 ;Reference to ^PSDRUG("AQ" supported by IA 3165
"RTN","PSOREJP1",6,0)
 ;Reference to File 9002313.25 supported by IA 5064
"RTN","PSOREJP1",7,0)
 ;Reference to BPSNCPD3 supported by IA 4560
"RTN","PSOREJP1",8,0)
 ;Reference to ^BPSVRX supported by IA 5723
"RTN","PSOREJP1",9,0)
 ;Reference to $$BBILL^BPSBUTL and $$RESUBMIT^BPSBUTL supported by IA 4719
"RTN","PSOREJP1",10,0)
 ;
"RTN","PSOREJP1",11,0)
EN(RX,REJ,CHANGE) ; Entry point
"RTN","PSOREJP1",12,0)
 ;
"RTN","PSOREJP1",13,0)
 ; - DO NOT change the IF logic below as both of them might get executed (intentional)
"RTN","PSOREJP1",14,0)
 N FILL,LASTLN,PSOTRIC,PSOCODE,PSOTCODE
"RTN","PSOREJP1",15,0)
 S FILL=+$$GET1^DIQ(52.25,REJ_","_RX,5)
"RTN","PSOREJP1",16,0)
 S PSOTRIC=$$TRIC(RX,FILL),PSOCODE=$$GET1^DIQ(52.25,REJ_","_RX,.01)
"RTN","PSOREJP1",17,0)
 S PSOTCODE=0 S:PSOCODE'=79&(PSOCODE'=88)&(PSOTRIC) PSOTCODE=1
"RTN","PSOREJP1",18,0)
 I $$CLOSED(RX,REJ) D EN^VALM("PSO REJECT DISPLAY - RESOLVED")
"RTN","PSOREJP1",19,0)
 I '$$CLOSED(RX,REJ)&(PSOTRIC) D EN^VALM("PSO REJECT TRICARE")   ;cnf, PSO*7*358, replace PSOTCODE with PSOTRIC
"RTN","PSOREJP1",20,0)
 I '$$CLOSED(RX,REJ)&('PSOTCODE)&('PSOTRIC) D EN^VALM("PSO REJECT DISPLAY")   ;cnf, PSO*7*358, add PSOTRIC check
"RTN","PSOREJP1",21,0)
 D FULL^VALM1
"RTN","PSOREJP1",22,0)
 Q
"RTN","PSOREJP1",23,0)
 ;
"RTN","PSOREJP1",24,0)
HDR ; - Builds the Header section
"RTN","PSOREJP1",25,0)
 N LINE1,LINE2,X
"RTN","PSOREJP1",26,0)
 S VALMHDR(1)=$$DVINFO^PSOREJU2(RX,FILL,1),VALMHDR(2)=$$PTINFO^PSOREJU2(RX,1)
"RTN","PSOREJP1",27,0)
 ;cnf, PSO*7*358, add REJ to parameter list for RXINFO^PSOREJP3
"RTN","PSOREJP1",28,0)
 S VALMHDR(3)=$$RXINFO^PSOREJP3(RX,FILL,1),VALMHDR(4)=$$RXINFO^PSOREJP3(RX,FILL,2,REJ)
"RTN","PSOREJP1",29,0)
 Q
"RTN","PSOREJP1",30,0)
 ;
"RTN","PSOREJP1",31,0)
TRIC(RX,RFL,PSOTRIC) ; - Return 1 for TRICARE, 2 for CHAMPVA or 0 (zero) for not TRICARE or CHAMPVA
"RTN","PSOREJP1",32,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJP1",33,0)
 S PSOTRIC="",PSOTRIC=$S(RFL=0&($$GET1^DIQ(52,RX_",",85,"I")="T"):1,$$GET1^DIQ(52.1,RFL_","_RX_",",85,"I")="T":1,RFL=0&($$GET1^DIQ(52,RX_",",85,"I")="C"):2,$$GET1^DIQ(52.1,RFL_","_RX_",",85,"I")="C":2,1:0)
"RTN","PSOREJP1",34,0)
 Q PSOTRIC
"RTN","PSOREJP1",35,0)
 ;
"RTN","PSOREJP1",36,0)
ELIGDISP(RX,RFL) ; Return either CHAMPVA or TRICARE for display
"RTN","PSOREJP1",37,0)
 ; purposes, or null if neither
"RTN","PSOREJP1",38,0)
 N PSOELIG
"RTN","PSOREJP1",39,0)
 S PSOELIG=$$TRIC(RX,RFL)
"RTN","PSOREJP1",40,0)
 Q $S(PSOELIG=1:"TRICARE",PSOELIG=2:"CHAMPVA",1:"")
"RTN","PSOREJP1",41,0)
 ;
"RTN","PSOREJP1",42,0)
ELIGTCV(RX,RFL,CAPS) ; Return either CHAMPVA, TRICARE, or Veteran/VETERAN for eligibility display (PSO*7*448)
"RTN","PSOREJP1",43,0)
 ; if CAPS=1 then return "Veteran" in all caps
"RTN","PSOREJP1",44,0)
 ; Note if the requested refill has been deleted, then the message "N/A - Fill Deleted" will be returned
"RTN","PSOREJP1",45,0)
 N PSOELIG,VET,DELMSG
"RTN","PSOREJP1",46,0)
 S DELMSG="N/A - Fill Deleted"
"RTN","PSOREJP1",47,0)
 S PSOELIG=$$TRIC(RX,RFL),VET="Veteran" I $G(CAPS) S VET="VETERAN"
"RTN","PSOREJP1",48,0)
 I RFL>0,'$D(^PSRX(RX,1,RFL,0)) S PSOELIG=3
"RTN","PSOREJP1",49,0)
 Q $S(PSOELIG=1:"TRICARE",PSOELIG=2:"CHAMPVA",PSOELIG=3:DELMSG,1:VET)
"RTN","PSOREJP1",50,0)
 ;
"RTN","PSOREJP1",51,0)
INIT ; Builds the Body section
"RTN","PSOREJP1",52,0)
 N DATA,LINE
"RTN","PSOREJP1",53,0)
 I '$D(FILL) S FILL=+$$GET1^DIQ(52.25,REJ_","_RX,5)   ; PSO*7*448 obtain fill# from 52.25 subfile if not defined
"RTN","PSOREJP1",54,0)
 I '$$CLOSED(RX,REJ) S VALM("TITLE")="Reject Information ("_$$ELIGTCV(RX,FILL)_")"
"RTN","PSOREJP1",55,0)
 I $$CLOSED(RX,REJ) S VALM("TITLE")="Reject Information (RESOLVED)"
"RTN","PSOREJP1",56,0)
 F I=1:1:$G(LASTLN) D RESTORE^VALM10(I)
"RTN","PSOREJP1",57,0)
 K ^TMP("PSOREJP1",$J) S VALMCNT=0,LINE=0
"RTN","PSOREJP1",58,0)
 D GET^PSOREJU2(RX,FILL,.DATA,REJ,1)
"RTN","PSOREJP1",59,0)
 D REJ                   ; Display the REJECT Information
"RTN","PSOREJP1",60,0)
 D OTH                   ; Display the Other Rejects Information
"RTN","PSOREJP1",61,0)
 D COM^PSOREJP3          ; Display the Comment
"RTN","PSOREJP1",62,0)
 D INS                   ; Display the Insurance Information
"RTN","PSOREJP1",63,0)
 D CLS                   ; Display the Resolution Information
"RTN","PSOREJP1",64,0)
 S VALMCNT=LINE
"RTN","PSOREJP1",65,0)
 Q
"RTN","PSOREJP1",66,0)
 ;
"RTN","PSOREJP1",67,0)
REJ ; - DUR Information
"RTN","PSOREJP1",68,0)
 N TYPE,PFLDT,TREJ,TDATA,PSOET,PSONAF,PSOCOB,PSOTXT,PSOECME S TDATA=""
"RTN","PSOREJP1",69,0)
 ;
"RTN","PSOREJP1",70,0)
 ; LH;PSO*7*448 - Display 'RESUBMISSION' where 'BACK-BILL' currently
"RTN","PSOREJP1",71,0)
 ; displays if the claim was resubmitted from the ECME User Screen.
"RTN","PSOREJP1",72,0)
 ; To facilitate this, the function $$RESUBMIT^BPSBUTL was created.
"RTN","PSOREJP1",73,0)
 ;
"RTN","PSOREJP1",74,0)
 ; Back Bill indicator - PSO*7*421
"RTN","PSOREJP1",75,0)
 S PSOTXT="",PSOCOB=$G(DATA(REJ,"COB")),PSOCOB=$S(PSOCOB="SECONDARY":2,PSOCOB="TERTIARY":3,1:1)
"RTN","PSOREJP1",76,0)
 I $$BBILL^BPSBUTL(RX,FILL,PSOCOB) S PSOTXT=" BACK-BILL"
"RTN","PSOREJP1",77,0)
 E  I $$RESUBMIT^BPSBUTL(RX,FILL,PSOCOB) S PSOTXT=" RESUBMISSION"  ; IA 4719.
"RTN","PSOREJP1",78,0)
 D SETLN("REJECT Information ("_$$ELIGTCV(RX,FILL)_") "_PSOTXT,1,1)
"RTN","PSOREJP1",79,0)
 S PSOECME=$$STATUS^PSOBPSUT(RX,FILL)
"RTN","PSOREJP1",80,0)
 I PSOECME="E PAYABLE" D
"RTN","PSOREJP1",81,0)
 . D SETLN("Reject Type    : ",,,18)
"RTN","PSOREJP1",82,0)
 . D SETLN("Reject Status  : ** E PAYABLE **",,,18)
"RTN","PSOREJP1",83,0)
 . Q
"RTN","PSOREJP1",84,0)
 E  D
"RTN","PSOREJP1",85,0)
 . S TYPE=$S($G(DATA(REJ,"CODE"))=79:"79 - REFILL TOO SOON",1:"")
"RTN","PSOREJP1",86,0)
 . I TYPE="" S TYPE=DATA(REJ,"CODE")_" - "_$E($$EXP(DATA(REJ,"CODE")),1,23)_"-"
"RTN","PSOREJP1",87,0)
 . D SETLN("Reject Type    : "_TYPE_" received on "_$$FMTE^XLFDT($G(DATA(REJ,"DATE/TIME"))),,,18)
"RTN","PSOREJP1",88,0)
 . ;cnf, PSO*7*358, if TRICARE/CHAMPVA non-billable then reset Status line
"RTN","PSOREJP1",89,0)
 . S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",90,0)
 . I PSOET D SETLN("Status         : NO CLAIM SUBMITTED")
"RTN","PSOREJP1",91,0)
 . I 'PSOET D SETLN("Reject Status  : "_$G(DATA(REJ,"STATUS"))_" - "_PSOECME,,,18)
"RTN","PSOREJP1",92,0)
 . Q
"RTN","PSOREJP1",93,0)
 S PSONAF=$$NFLDT^BPSBUTL(RX,FILL) ; IA 4719
"RTN","PSOREJP1",94,0)
 I PSONAF'="" D SETLN("Next Avail Fill: "_$$FMTE^XLFDT(PSONAF),,,18) ; PSO*7*421
"RTN","PSOREJP1",95,0)
 D SET("PAYER MESSAGE",63)
"RTN","PSOREJP1",96,0)
 D SET("REASON",63)
"RTN","PSOREJP1",97,0)
 S PFLDT=$$FMTE^XLFDT($G(DATA(REJ,"PLAN PREVIOUS FILL DATE")))
"RTN","PSOREJP1",98,0)
 D SET("DUR TEXT",63,$S(PFLDT="":1,1:0))
"RTN","PSOREJP1",99,0)
 I PFLDT'="" D SETLN("Last Fill Date : "_PFLDT_" (from payer)",,1,18)
"RTN","PSOREJP1",100,0)
 Q
"RTN","PSOREJP1",101,0)
 ;
"RTN","PSOREJP1",102,0)
OTH ; - Other Rejects Information
"RTN","PSOREJP1",103,0)
 N LST,I,RJC,J,LAST
"RTN","PSOREJP1",104,0)
 S LST=$G(DATA(REJ,"OTHER REJECTS")) I LST="" Q
"RTN","PSOREJP1",105,0)
 D SETLN()
"RTN","PSOREJP1",106,0)
 D SETLN("OTHER REJECTS",1,1)
"RTN","PSOREJP1",107,0)
 F I=1:1:$L(LST,",") S RJC=$P(LST,",",I) D
"RTN","PSOREJP1",108,0)
 . S LAST=1 F J=(I+1):1:$L(LST,",") I $P(LST,",",J)'="" S LAST=0 Q
"RTN","PSOREJP1",109,0)
 . I RJC'="" D SETLN(RJC_" - "_$$EXP(RJC),,$S(LAST:1,1:0),6)
"RTN","PSOREJP1",110,0)
 Q
"RTN","PSOREJP1",111,0)
 ;
"RTN","PSOREJP1",112,0)
INS ; - Insurance Information
"RTN","PSOREJP1",113,0)
 D SETLN()
"RTN","PSOREJP1",114,0)
 D SETLN("INSURANCE Information",1,1)
"RTN","PSOREJP1",115,0)
 N PSOINS,PSOINS1,I,PSOBINPCN
"RTN","PSOREJP1",116,0)
 S PSOINS=$G(DATA(REJ,"INSURANCE NAME"))
"RTN","PSOREJP1",117,0)
 F I=1:1:(50-($L(PSOINS)+18)) S PSOINS=PSOINS_" "
"RTN","PSOREJP1",118,0)
 S PSOINS1=$G(DATA(REJ,"COB"))
"RTN","PSOREJP1",119,0)
 I PSOINS1="SECONDARY" S PSOINS=PSOINS_"Coord. Of Benefits: "_PSOINS1
"RTN","PSOREJP1",120,0)
 D SETLN("Insurance      : "_PSOINS,,,18)
"RTN","PSOREJP1",121,0)
 D SETLN("Contact        : "_$G(DATA(REJ,"PLAN CONTACT")),,,18)
"RTN","PSOREJP1",122,0)
 S PSOBINPCN=$G(DATA(REJ,"BIN"))_"/ "_$G(DATA(REJ,"PCN"))
"RTN","PSOREJP1",123,0)
 D SETLN("BIN/ PCN       : "_PSOBINPCN,,,18)
"RTN","PSOREJP1",124,0)
 D SETLN("Group Number   : "_$E($G(DATA(REJ,"GROUP NUMBER")),1,15),,,18)
"RTN","PSOREJP1",125,0)
 D SETLN("Cardholder ID  : "_$E($G(DATA(REJ,"CARDHOLDER ID")),1,20),,1,18)
"RTN","PSOREJP1",126,0)
 Q
"RTN","PSOREJP1",127,0)
 ;
"RTN","PSOREJP1",128,0)
CLS ; - Resolution Information
"RTN","PSOREJP1",129,0)
 N X
"RTN","PSOREJP1",130,0)
 I '$$CLOSED(RX,REJ) Q
"RTN","PSOREJP1",131,0)
 D SETLN()
"RTN","PSOREJP1",132,0)
 D SETLN("RESOLUTION Information",1,1)
"RTN","PSOREJP1",133,0)
 D SETLN("Resolved By    : "_$G(DATA(REJ,"CLOSED BY")),,,18)
"RTN","PSOREJP1",134,0)
 D SETLN("Date/Time      : "_$G(DATA(REJ,"CLOSED DATE/TIME")),,,18)
"RTN","PSOREJP1",135,0)
 I $G(DATA(REJ,"CLOSE COMMENTS"))'="" D SET("CLOSE COMMENTS",63)
"RTN","PSOREJP1",136,0)
 I $G(DATA(REJ,"COD1"))'="" D SETLN("Reason for Svc : "_$$OVRX^PSOREJU1(1,$G(DATA(REJ,"COD1"))),,,18)
"RTN","PSOREJP1",137,0)
 I $G(DATA(REJ,"COD2"))'="" D SETLN("Profes. Svc    : "_$$OVRX^PSOREJU1(2,$G(DATA(REJ,"COD2"))),,,18)
"RTN","PSOREJP1",138,0)
 I $G(DATA(REJ,"COD3"))'="" D SETLN("Result of Svc  : "_$$OVRX^PSOREJU1(3,$G(DATA(REJ,"COD3"))),,,18)
"RTN","PSOREJP1",139,0)
 I $G(DATA(REJ,"CLA CODE"))'="" D
"RTN","PSOREJP1",140,0)
 . N CLAPNTR S CLAPNTR=$$GET1^DIQ(52.25,REJ_","_RX_",",24,"I")
"RTN","PSOREJP1",141,0)
 . S X=DATA(REJ,"CLA CODE")_" - "_$$GET1^DIQ(9002313.25,CLAPNTR,".02")
"RTN","PSOREJP1",142,0)
 . D SETLN("Clarific. Code : "_X,,,18)
"RTN","PSOREJP1",143,0)
 I $G(DATA(REJ,"PRIOR AUTH TYPE"))'="" D
"RTN","PSOREJP1",144,0)
 . S X=$$GET1^DIQ(52.25,REJ_","_RX,25,"I")_" - "_(DATA(REJ,"PRIOR AUTH TYPE"))
"RTN","PSOREJP1",145,0)
 . D SETLN("Prior Auth.Type: "_X,,,18),SETLN("Prior Auth. #  : "_DATA(REJ,"PRIOR AUTH NUMBER"),,,18)
"RTN","PSOREJP1",146,0)
 D SETLN("Reason         : "_$G(DATA(REJ,"CLOSE REASON")),,1,18)
"RTN","PSOREJP1",147,0)
 Q
"RTN","PSOREJP1",148,0)
 ;
"RTN","PSOREJP1",149,0)
 ;
"RTN","PSOREJP1",150,0)
SET(FIELD,L,UND) ; Sets the lines for fields that require text wrapping
"RTN","PSOREJP1",151,0)
 N TXT,T
"RTN","PSOREJP1",152,0)
 S TXT=DATA(REJ,FIELD) I $L(TXT)'>L D SETLN($$LABEL(FIELD)_TXT,,$S($G(UND):1,1:0),80-L) Q
"RTN","PSOREJP1",153,0)
 F I=1:1 Q:TXT=""  D
"RTN","PSOREJP1",154,0)
 . I I=1 D SETLN($$LABEL(FIELD)_$E(TXT,1,L),,,80-L) S TXT=$E(TXT,L+1,999) Q
"RTN","PSOREJP1",155,0)
 . S T="",$E(T,81-L)=$E(TXT,1,L) D SETLN(T,,$S($E(TXT,L+1,999)=""&$G(UND):1,1:0),80-L) S TXT=$E(TXT,L+1,999)
"RTN","PSOREJP1",156,0)
 Q
"RTN","PSOREJP1",157,0)
 ;
"RTN","PSOREJP1",158,0)
LABEL(FIELD) ; Sets the label for the field
"RTN","PSOREJP1",159,0)
 I FIELD="REASON" Q "Reason Code    : "
"RTN","PSOREJP1",160,0)
 I FIELD="PAYER MESSAGE" Q "Payer Addl Msg : "
"RTN","PSOREJP1",161,0)
 I FIELD="DUR TEXT" Q $S(+$$ISDUR^PSOREJP5(RX,REJ):"+DUR Text      : ",1:"DUR Text       : ")
"RTN","PSOREJP1",162,0)
 I FIELD="CLOSE COMMENTS" Q "Comments       : "
"RTN","PSOREJP1",163,0)
 Q ""
"RTN","PSOREJP1",164,0)
 ;
"RTN","PSOREJP1",165,0)
VIEW ; - Rx View hidden action
"RTN","PSOREJP1",166,0)
 N VALMCNT,TITLE
"RTN","PSOREJP1",167,0)
 I $G(PSOBACK) D  Q
"RTN","PSOREJP1",168,0)
 . S VALMSG="Not available through Backdoor!",VALMBCK="R"
"RTN","PSOREJP1",169,0)
 S TITLE=VALM("TITLE")
"RTN","PSOREJP1",170,0)
 ;
"RTN","PSOREJP1",171,0)
 ; - DO structure used to avoid losing variables RX,FILL,REJ,LINE,TITLE
"RTN","PSOREJP1",172,0)
 DO
"RTN","PSOREJP1",173,0)
 . N PSOVDA,DA,PS
"RTN","PSOREJP1",174,0)
 . S (PSOVDA,DA)=RX,PS="REJECT"
"RTN","PSOREJP1",175,0)
 . N RX,REJ,FILL,LINE,TITLE D DP^PSORXVW
"RTN","PSOREJP1",176,0)
 ;
"RTN","PSOREJP1",177,0)
 S VALMBCK="R",VALM("TITLE")=TITLE
"RTN","PSOREJP1",178,0)
 Q
"RTN","PSOREJP1",179,0)
 ;
"RTN","PSOREJP1",180,0)
EDT ; - Rx Edit hidden action
"RTN","PSOREJP1",181,0)
 N VALMCNT,TITLE
"RTN","PSOREJP1",182,0)
 I $G(PSOBACK) D  Q
"RTN","PSOREJP1",183,0)
 . S VALMSG="Not available through Backdoor!",VALMBCK="R"
"RTN","PSOREJP1",184,0)
 S TITLE=VALM("TITLE")
"RTN","PSOREJP1",185,0)
 ;
"RTN","PSOREJP1",186,0)
 ; - DO structure used to avoid losing variables RX,FILL,REJ,LINE,TITLE
"RTN","PSOREJP1",187,0)
 DO
"RTN","PSOREJP1",188,0)
 . N PSOSITE,ORN,PSOPAR,PSOLIST,PSOREJCT
"RTN","PSOREJP1",189,0)
 . S PSOSITE=$$RXSITE^PSOBPSUT(RX,FILL),ORN=RX
"RTN","PSOREJP1",190,0)
 . S PSOPAR=$G(^PS(59,PSOSITE,1)),PSOLIST(1)=ORN_","
"RTN","PSOREJP1",191,0)
 . ; Variable PSOREJCT is used so that EPH^PSORXEDT has the RX 'passed' by this routine
"RTN","PSOREJP1",192,0)
 . S PSOREJCT=RX_U_FILL
"RTN","PSOREJP1",193,0)
 . N RX,REJ,FILL,LINE,TITLE D EPH^PSORXEDT
"RTN","PSOREJP1",194,0)
 ;
"RTN","PSOREJP1",195,0)
 K VALMBCK I $$CLOSED(RX,REJ),$D(PSOSTFLT),PSOSTFLT="U" S CHANGE=1 Q
"RTN","PSOREJP1",196,0)
 S VALMBCK="R",VALM("TITLE")=TITLE
"RTN","PSOREJP1",197,0)
 Q
"RTN","PSOREJP1",198,0)
 ;
"RTN","PSOREJP1",199,0)
OVR ; - Override a REJECT action
"RTN","PSOREJP1",200,0)
 N PSOET
"RTN","PSOREJP1",201,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",202,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP1",203,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",204,0)
 I PSOET S VALMSG="OVR not allowed for "_$$ELIGDISP(RX,FILL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP1",205,0)
 N COD1,COD2,COD3
"RTN","PSOREJP1",206,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",207,0)
 S COD1=$$OVRCOD^PSOREJU1(1,$$GET1^DIQ(52.25,REJ_","_RX,14)) I COD1="^"!(COD1="") S VALMBCK="R" Q
"RTN","PSOREJP1",208,0)
 S COD2=$$OVRCOD^PSOREJU1(2) I COD2="^" S VALMBCK="R" Q
"RTN","PSOREJP1",209,0)
 S COD3=$$OVRCOD^PSOREJU1(3) I COD3="^" S VALMBCK="R" Q
"RTN","PSOREJP1",210,0)
 D OVRDSP^PSOREJU1(COD1_"^"_COD2_"^"_COD3)
"RTN","PSOREJP1",211,0)
 D SEND^PSOREJP3(COD1_"^"_COD2_"^"_COD3,,,PSOET)
"RTN","PSOREJP1",212,0)
 Q
"RTN","PSOREJP1",213,0)
 ;
"RTN","PSOREJP1",214,0)
RES ; - Re-submit a claim action
"RTN","PSOREJP1",215,0)
 N PSOET
"RTN","PSOREJP1",216,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",217,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP1",218,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",219,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",220,0)
 D SEND^PSOREJP3(,,,PSOET)
"RTN","PSOREJP1",221,0)
 Q
"RTN","PSOREJP1",222,0)
 ;
"RTN","PSOREJP1",223,0)
CLA ; - Submit Clarification Code
"RTN","PSOREJP1",224,0)
 N CLA,PSOET
"RTN","PSOREJP1",225,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",226,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP1",227,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",228,0)
 I PSOET S VALMSG="CLA not allowed for "_$$ELIGDISP(RX,FILL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP1",229,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",230,0)
 ; Prompt for the Submission Clarification Codes (up to three)
"RTN","PSOREJP1",231,0)
 S CLA=$$CLA^PSOREJU1() I CLA="^"!(CLA="") S VALMBCK="R" Q
"RTN","PSOREJP1",232,0)
 W ! D SEND^PSOREJP3(,CLA,,PSOET)
"RTN","PSOREJP1",233,0)
 Q
"RTN","PSOREJP1",234,0)
 ;
"RTN","PSOREJP1",235,0)
PA ; - Submit Prior Authorization
"RTN","PSOREJP1",236,0)
 N PA,PSOET
"RTN","PSOREJP1",237,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",238,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP1",239,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",240,0)
 I PSOET S VALMSG="PA not allowed for "_$$ELIGDISP(RX,FILL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP1",241,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",242,0)
 ; Prompt for Prior Auth fields
"RTN","PSOREJP1",243,0)
 S PA=$$PA^PSOREJU2() I PA="^" S VALMBCK="R" Q
"RTN","PSOREJP1",244,0)
 W ! D SEND^PSOREJP3(,,PA,PSOET)
"RTN","PSOREJP1",245,0)
 Q
"RTN","PSOREJP1",246,0)
 ;
"RTN","PSOREJP1",247,0)
MP ; - Patient Medication Profile
"RTN","PSOREJP1",248,0)
 I $G(PSOBACK) D  Q
"RTN","PSOREJP1",249,0)
 . S VALMSG="Not available through Backdoor!",VALMBCK="R"
"RTN","PSOREJP1",250,0)
 N SITE,PATIENT
"RTN","PSOREJP1",251,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",252,0)
 S SITE=+$$RXSITE^PSOBPSUT(RX,FILL) S:$G(PSOSITE) SITE=PSOSITE
"RTN","PSOREJP1",253,0)
 S PATIENT=+$$GET1^DIQ(52,RX,2,"I")
"RTN","PSOREJP1",254,0)
 D LST^PSOPMP0(SITE,PATIENT) S VALMBCK="R"
"RTN","PSOREJP1",255,0)
 Q
"RTN","PSOREJP1",256,0)
 ;
"RTN","PSOREJP1",257,0)
EXIT ;
"RTN","PSOREJP1",258,0)
 K ^TMP("PSOREJP1",$J)
"RTN","PSOREJP1",259,0)
 Q
"RTN","PSOREJP1",260,0)
 ;
"RTN","PSOREJP1",261,0)
SETLN(TEXT,REV,UND,HIG) ; Sets a line to be displayed in the Body section
"RTN","PSOREJP1",262,0)
 N X
"RTN","PSOREJP1",263,0)
 S:$G(TEXT)="" $E(TEXT,80)=""
"RTN","PSOREJP1",264,0)
 S:$L(TEXT)>80 TEXT=$E(TEXT,1,80)
"RTN","PSOREJP1",265,0)
 S LINE=LINE+1,^TMP("PSOREJP1",$J,LINE,0)=$G(TEXT)
"RTN","PSOREJP1",266,0)
 ;
"RTN","PSOREJP1",267,0)
 I LINE>$G(LASTLN) D SAVE^VALM10(LINE) S LASTLN=LINE
"RTN","PSOREJP1",268,0)
 ;
"RTN","PSOREJP1",269,0)
 I $G(REV) D  Q
"RTN","PSOREJP1",270,0)
 . D CNTRL^VALM10(LINE,1,$L(TEXT),IORVON,IOINORM)
"RTN","PSOREJP1",271,0)
 . I $G(UND) D CNTRL^VALM10(LINE,$L(TEXT)+1,80,IOUON,IOINORM)
"RTN","PSOREJP1",272,0)
 I $G(UND) D CNTRL^VALM10(LINE,1,80,IOUON,IOINORM)
"RTN","PSOREJP1",273,0)
 I $G(HIG) D
"RTN","PSOREJP1",274,0)
 . D CNTRL^VALM10(LINE,HIG,80,IOINHI_$S($G(UND):IOUON,1:""),IOINORM)
"RTN","PSOREJP1",275,0)
 Q
"RTN","PSOREJP1",276,0)
HELP ;
"RTN","PSOREJP1",277,0)
 Q
"RTN","PSOREJP1",278,0)
 ;
"RTN","PSOREJP1",279,0)
CLOSED(RX,REJ,MSG) ; Returns whether the REJECT is RESOLVED or NOT
"RTN","PSOREJP1",280,0)
 I $$GET1^DIQ(52.25,REJ_","_RX,10,"I") D:$G(MSG)  Q 1
"RTN","PSOREJP1",281,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R" W $C(7)
"RTN","PSOREJP1",282,0)
 Q 0
"RTN","PSOREJP1",283,0)
 ;
"RTN","PSOREJP1",284,0)
REOPN(RX,REJ) ; Returns whether the REJECT was RE-OPENED or NOT
"RTN","PSOREJP1",285,0)
 Q $S($$GET1^DIQ(52.25,REJ_","_RX,23)="":0,1:1)
"RTN","PSOREJP1",286,0)
 ;
"RTN","PSOREJP1",287,0)
EXP(CODE) ; - Returns the explanation field (.02) for a reject code
"RTN","PSOREJP1",288,0)
 ;  Input:  (r) CODE - .01 field (Code) value from file 9002313.93
"RTN","PSOREJP1",289,0)
 ; Output: .02 field (Explanation) value from file 9002313.93
"RTN","PSOREJP1",290,0)
 N DIC,X,Y
"RTN","PSOREJP1",291,0)
 S DIC=9002313.93,DIC(0)="Z",X=CODE D ^DIC
"RTN","PSOREJP1",292,0)
 Q $P($G(Y(0)),"^",2)
"RTN","PSOREJP1",293,0)
 ;
"RTN","PSOREJP1",294,0)
OUT(RX) ; - Supported call by outside PROTOCOLs to act on specific REJECTs
"RTN","PSOREJP1",295,0)
 N I,RFL,DATA,REJ,PSOBACK,VALMCNT,RXN
"RTN","PSOREJP1",296,0)
 I '$D(^XUSEC("PSORPH",DUZ)) D  Q
"RTN","PSOREJP1",297,0)
 . S VALMSG="PSORPH key required to use the REJ action.",VALMBCK="R"
"RTN","PSOREJP1",298,0)
 I $G(PS)="REJECT" D
"RTN","PSOREJP1",299,0)
 . S VALMSG="REJ action is not available at this point.",VALMBCK="R"
"RTN","PSOREJP1",300,0)
 S PSOBACK=1
"RTN","PSOREJP1",301,0)
 S (RFL,I)=0 F I=1:1 Q:'$D(^PSRX(RX,1,I))  S RFL=I
"RTN","PSOREJP1",302,0)
 S X=$$FIND^PSOREJUT(RX,RFL,.DATA) S REJ=$O(DATA(""))
"RTN","PSOREJP1",303,0)
 I '$G(REJ) S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOREJP1",304,0)
 D EN(RX,REJ) S VALMBCK="R"
"RTN","PSOREJP1",305,0)
 Q
"RTN","PSOREJP1",306,0)
 ;
"RTN","PSOREJP1",307,0)
SMA ;Submit multiple actions
"RTN","PSOREJP1",308,0)
 N CLA,I,OVR,OVRSTR,PA,REJIEN,DUR,RSC,DURIEN,REQ,RSUB,PSOET
"RTN","PSOREJP1",309,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",310,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",311,0)
 I PSOET S VALMSG="SMA not allowed for "_$$ELIGDISP(RX,FILL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP1",312,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",313,0)
 S DURIEN=$P($G(^PSRX(RX,"REJ",REJ,0)),U,11)
"RTN","PSOREJP1",314,0)
 D DURRESP^BPSNCPD3(DURIEN,.DUR) ; Reference to BPSNCPD3 supported by IA 4560
"RTN","PSOREJP1",315,0)
 ;
"RTN","PSOREJP1",316,0)
 ; Prompt for Prior Auth fields
"RTN","PSOREJP1",317,0)
 S PA=$$PA^PSOREJU2
"RTN","PSOREJP1",318,0)
 I PA="^" S VALMBCK="R" Q  ;User terminated or did not answer
"RTN","PSOREJP1",319,0)
 ;
"RTN","PSOREJP1",320,0)
 ; Prompt for submission clarification codes (up to three)
"RTN","PSOREJP1",321,0)
 W !
"RTN","PSOREJP1",322,0)
 S CLA=$$CLA^PSOREJU1
"RTN","PSOREJP1",323,0)
 I CLA="^" S VALMBCK="R" Q  ;User terminated or did not answer
"RTN","PSOREJP1",324,0)
 ;
"RTN","PSOREJP1",325,0)
 ; Check if DUR Overrides required - PSO*7*421
"RTN","PSOREJP1",326,0)
 S REQ=$$REQ I REQ="^" S VALMBCK="R" Q
"RTN","PSOREJP1",327,0)
 ;
"RTN","PSOREJP1",328,0)
 ; Prompt for DUR Overrides (up to 3) - option to delete default added - PSO*7*421
"RTN","PSOREJP1",329,0)
 S OVRSTR="",OVR=""
"RTN","PSOREJP1",330,0)
 I REQ S REJIEN=0 F RSUB=1:1:3 D  Q:OVR="^"!(OVR="")!(OVR="@")  S $P(OVRSTR,"~",RSUB)=OVR
"RTN","PSOREJP1",331,0)
 . I REJIEN]"" S REJIEN=$O(DUR(1,"DUR PPS",REJIEN))
"RTN","PSOREJP1",332,0)
 . S RSC="" I +REJIEN S RSC=$P($G(DUR(1,"DUR PPS",REJIEN,"REASON FOR SERVICE CODE"))," ",1)
"RTN","PSOREJP1",333,0)
 . S OVR=$$SMAOVR^PSOREJU1(RSC,RSUB)
"RTN","PSOREJP1",334,0)
 I OVR="^" S VALMBCK="R" Q  ;User exited or timed-out
"RTN","PSOREJP1",335,0)
 ;
"RTN","PSOREJP1",336,0)
 W !!,?6,"RECAP:"
"RTN","PSOREJP1",337,0)
 W !,?6,"Prior Authorization Type       : ",$P(PA,"^"),"  ",$$DSC^PSOREJU1(9002313.26,$P(PA,"^"),.02)
"RTN","PSOREJP1",338,0)
 W !,?6,"Prior Authorization Number     : ",$P(PA,"^",2)
"RTN","PSOREJP1",339,0)
 W !,?6,"Submission Clarification Code 1: ",$P(CLA,"~",1),"  ",$$DSC^PSOREJU1(9002313.25,$P(CLA,"~",1),.02)
"RTN","PSOREJP1",340,0)
 I $P(CLA,"~",2)]"" W !,?6,"Submission Clarification Code 2: ",$P(CLA,"~",2),"  ",$$DSC^PSOREJU1(9002313.25,$P(CLA,"~",2),.02)
"RTN","PSOREJP1",341,0)
 I $P(CLA,"~",3)]"" W !,?6,"Submission Clarification Code 3: ",$P(CLA,"~",3),"  ",$$DSC^PSOREJU1(9002313.25,$P(CLA,"~",3),.02)
"RTN","PSOREJP1",342,0)
 W !,?6,"Reason for Service Code 1      : ",$P($P(OVRSTR,"~",1),U,1),"  ",$$DSC^PSOREJU1(9002313.23,$P($P(OVRSTR,"~",1),U,1),1)
"RTN","PSOREJP1",343,0)
 W !,?6,"Professional Service Code 1    : ",$P($P(OVRSTR,"~",1),U,2),"  ",$$DSC^PSOREJU1(9002313.21,$P($P(OVRSTR,"~",1),U,2),1)
"RTN","PSOREJP1",344,0)
 W !,?6,"Result of Service Code 1       : ",$P($P(OVRSTR,"~",1),U,3),"  ",$$DSC^PSOREJU1(9002313.22,$P($P(OVRSTR,"~",1),U,3),1)
"RTN","PSOREJP1",345,0)
 I $P($P(OVRSTR,"~",2),U,1)]"" W !,?6,"Reason for Service Code 2      : ",$P($P(OVRSTR,"~",2),U,1),"  ",$$DSC^PSOREJU1(9002313.23,$P($P(OVRSTR,"~",2),U,1),1)
"RTN","PSOREJP1",346,0)
 I $P($P(OVRSTR,"~",2),U,2)]"" W !,?6,"Professional Service Code 2    : ",$P($P(OVRSTR,"~",2),U,2),"  ",$$DSC^PSOREJU1(9002313.21,$P($P(OVRSTR,"~",2),U,2),1)
"RTN","PSOREJP1",347,0)
 I $P($P(OVRSTR,"~",2),U,3)]"" W !,?6,"Result of Service Code 2       : ",$P($P(OVRSTR,"~",2),U,3),"  ",$$DSC^PSOREJU1(9002313.22,$P($P(OVRSTR,"~",2),U,3),1)
"RTN","PSOREJP1",348,0)
 I $P($P(OVRSTR,"~",3),U,1)]"" W !,?6,"Reason for Service Code 3      : ",$P($P(OVRSTR,"~",3),U,1),"  ",$$DSC^PSOREJU1(9002313.23,$P($P(OVRSTR,"~",3),U,1),1)
"RTN","PSOREJP1",349,0)
 I $P($P(OVRSTR,"~",3),U,2)]"" W !,?6,"Professional Service Code 3    : ",$P($P(OVRSTR,"~",3),U,2),"  ",$$DSC^PSOREJU1(9002313.21,$P($P(OVRSTR,"~",3),U,2),1)
"RTN","PSOREJP1",350,0)
 I $P($P(OVRSTR,"~",3),U,3)]"" W !,?6,"Result of Service Code 3       : ",$P($P(OVRSTR,"~",3),U,3),"  ",$$DSC^PSOREJU1(9002313.22,$P($P(OVRSTR,"~",3),U,3),1)
"RTN","PSOREJP1",351,0)
 W ! D SEND^PSOREJP3(OVRSTR,CLA,PA,PSOET)
"RTN","PSOREJP1",352,0)
 Q
"RTN","PSOREJP1",353,0)
 ;
"RTN","PSOREJP1",354,0)
VRX ; View ePharmacy Prescription - invoked from the Reject Information screen
"RTN","PSOREJP1",355,0)
 N BPSVRX
"RTN","PSOREJP1",356,0)
 D FULL^VALM1
"RTN","PSOREJP1",357,0)
 S BPSVRX("RXIEN")=$G(RX)
"RTN","PSOREJP1",358,0)
 S BPSVRX("FILL#")=$G(FILL)
"RTN","PSOREJP1",359,0)
 D ^BPSVRX    ; DBIA #5723
"RTN","PSOREJP1",360,0)
 S VALMBCK="R"
"RTN","PSOREJP1",361,0)
 Q
"RTN","PSOREJP1",362,0)
 ;
"RTN","PSOREJP1",363,0)
VER ; View ePharmacy Prescription - invoked from the Rx view hidden action of Medication Profile
"RTN","PSOREJP1",364,0)
 N BPSVRX
"RTN","PSOREJP1",365,0)
 K ^TMP("BPSVRX-PSO VIEW RX",$J)
"RTN","PSOREJP1",366,0)
 D FULL^VALM1
"RTN","PSOREJP1",367,0)
 ;
"RTN","PSOREJP1",368,0)
 ; save the current PSO Rx display array and header
"RTN","PSOREJP1",369,0)
 M ^TMP("BPSVRX-PSO VIEW RX",$J,"PSOHDR")=^TMP("PSOHDR",$J)
"RTN","PSOREJP1",370,0)
 M ^TMP("BPSVRX-PSO VIEW RX",$J,"PSOAL")=^TMP("PSOAL",$J)
"RTN","PSOREJP1",371,0)
 ;
"RTN","PSOREJP1",372,0)
 S BPSVRX("RXIEN")=$G(RXN)    ; Rx ien ptr file 52
"RTN","PSOREJP1",373,0)
 D ^BPSVRX    ; DBIA #5723
"RTN","PSOREJP1",374,0)
 ;
"RTN","PSOREJP1",375,0)
 ; restore the PSO Rx display array and header upon return
"RTN","PSOREJP1",376,0)
 I '$D(^TMP("PSOHDR",$J)) M ^TMP("PSOHDR",$J)=^TMP("BPSVRX-PSO VIEW RX",$J,"PSOHDR")
"RTN","PSOREJP1",377,0)
 I '$D(^TMP("PSOAL",$J)) M ^TMP("PSOAL",$J)=^TMP("BPSVRX-PSO VIEW RX",$J,"PSOAL")
"RTN","PSOREJP1",378,0)
 ;
"RTN","PSOREJP1",379,0)
 S VALMBCK="R"
"RTN","PSOREJP1",380,0)
 K ^TMP("BPSVRX-PSO VIEW RX",$J)
"RTN","PSOREJP1",381,0)
 Q
"RTN","PSOREJP1",382,0)
 ;
"RTN","PSOREJP1",383,0)
REQ() ;Prompt if DUR Rejects are required
"RTN","PSOREJP1",384,0)
 N DIR,DTOUT,DTOUT,DIRUT,DIROUT,X,Y
"RTN","PSOREJP1",385,0)
 S DIR("?")="Enter No if Reason Codes are not required. Enter Yes to proceed and enter up to 3 sets of override Reason Codes. To delete default Reason Codes, enter ""@""."
"RTN","PSOREJP1",386,0)
 S DIR("A")="Enter DUR codes",DIR(0)="Y",DIR("B")="YES" W ! D ^DIR
"RTN","PSOREJP1",387,0)
 I $D(DIRUT)!$D(DIROUT) Q "^" ;User exited or timed-out
"RTN","PSOREJP1",388,0)
 Q Y
"RTN","PSOREJP2")
0^2^B199801855
"RTN","PSOREJP2",1,0)
PSOREJP2 ;BIRM/MFR - Third Party Rejects View/Process ;04/28/05
"RTN","PSOREJP2",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,247,260,287,289,358,385,403,421,427,448,482**;DEC 1997;Build 44
"RTN","PSOREJP2",3,0)
 ;Reference to ^PSSLOCK supported by IA #2789
"RTN","PSOREJP2",4,0)
 ;Reference to GETDAT^BPSBUTL supported by IA #4719
"RTN","PSOREJP2",5,0)
 ;Reference to ^PS(55 supported by IA #2228
"RTN","PSOREJP2",6,0)
 ;Reference to ^DIC(36 supported by ICR #6142
"RTN","PSOREJP2",7,0)
 ;
"RTN","PSOREJP2",8,0)
 N PSORJSRT,PSOPTFLT,PSODRFLT,PSORXFLT,PSOBYFLD,PSOSTFLT,DIR,DIRUT,DUOUT,DTOUT
"RTN","PSOREJP2",9,0)
 N PSOINFLT,PSODTRNG,PSOINGRP,PSOTRITG,PSOCVATG
"RTN","PSOREJP2",10,0)
 S PSORJASC=1,PSOINGRP=0,PSOTRITG=1,PSOCVATG=1
"RTN","PSOREJP2",11,0)
 ;
"RTN","PSOREJP2",12,0)
 ; - Division/Site selection
"RTN","PSOREJP2",13,0)
 D SEL^PSOREJU1("DIVISION","^PS(59,",.PSOREJST,$$GET1^DIQ(59,+$G(PSOSITE),.01)) I $G(PSOREJST)="^" G EXIT
"RTN","PSOREJP2",14,0)
 ;
"RTN","PSOREJP2",15,0)
 ; - Date range selection
"RTN","PSOREJP2",16,0)
 W ! S PSODTRNG=$$DTRNG("T-90","T") I PSODTRNG="^" G EXIT
"RTN","PSOREJP2",17,0)
 ;
"RTN","PSOREJP2",18,0)
SEL ; - Field Selection (Patient/Drug/Rx)
"RTN","PSOREJP2",19,0)
 S DIR(0)="S^P:PATIENT;D:DRUG;R:Rx;I:INSURANCE",DIR("B")="P"
"RTN","PSOREJP2",20,0)
 S DIR("A")="By (P)atient, (D)rug, (R)x or (I)nsurance" D ^DIR I $D(DIRUT) G EXIT
"RTN","PSOREJP2",21,0)
 S PSOBYFLD=Y,DIR("B")=""
"RTN","PSOREJP2",22,0)
 ;
"RTN","PSOREJP2",23,0)
 I PSOBYFLD="P" D  I $G(PSOPTFLT)="^" G SEL
"RTN","PSOREJP2",24,0)
 . S (PSODRFLT,PSORXFLT,PSOINFLT)="ALL",PSORJSRT="DR"
"RTN","PSOREJP2",25,0)
 . D SEL^PSOREJU1("PATIENT","^DPT(",.PSOPTFLT)
"RTN","PSOREJP2",26,0)
 ;
"RTN","PSOREJP2",27,0)
 I PSOBYFLD="D" D  I $G(PSODRFLT)="^" G SEL
"RTN","PSOREJP2",28,0)
 . S (PSOPTFLT,PSORXFLT,PSOINFLT)="ALL",PSORJSRT="PA"
"RTN","PSOREJP2",29,0)
 . D SEL^PSOREJU1("DRUG","^PSDRUG(",.PSODRFLT)
"RTN","PSOREJP2",30,0)
 ;
"RTN","PSOREJP2",31,0)
 I PSOBYFLD="R" D  I $D(DUOUT)!$D(DTOUT)!'$G(PSORXFLT) G SEL
"RTN","PSOREJP2",32,0)
 . S (PSOPTFLT,PSODRFLT,PSOINFLT)="ALL",PSORJSRT="PA"
"RTN","PSOREJP2",33,0)
 . N DIC,Y,X,OK K PSOSTFLT,PSORXFLT
"RTN","PSOREJP2",34,0)
 . S DIC=52,DIC(0)="QEZA",DIC("A")="PRESCRIPTION: "
"RTN","PSOREJP2",35,0)
 . F  W ! D ^DIC D  Q:$G(OK) 
"RTN","PSOREJP2",36,0)
 . . I $D(DUOUT)!$D(DTOUT)!(X="") S OK=1 Q
"RTN","PSOREJP2",37,0)
 . . I '$O(^PSRX(+Y,"REJ",0)) D  Q
"RTN","PSOREJP2",38,0)
 . . . W !?40,"Prescription does not have rejects!",$C(7)
"RTN","PSOREJP2",39,0)
 . . S PSORXFLT=+Y,OK=1
"RTN","PSOREJP2",40,0)
 ;
"RTN","PSOREJP2",41,0)
 ; Insurance Company Lookup - ICR 6142
"RTN","PSOREJP2",42,0)
 I PSOBYFLD="I" D  I $G(PSOINFLT)="^" G SEL
"RTN","PSOREJP2",43,0)
 . S (PSOPTFLT,PSODRFLT,PSORXFLT)="ALL",PSORJSRT="PA"
"RTN","PSOREJP2",44,0)
 . D SEL^PSOREJU1("INSURANCE","^DIC(36,",.PSOINFLT)
"RTN","PSOREJP2",45,0)
 ;
"RTN","PSOREJP2",46,0)
 ; - Status Selection (UNRESOLVED or RESOLVED)
"RTN","PSOREJP2",47,0)
 I $G(PSOSTFLT)="" D  I $D(DIRUT) G EXIT
"RTN","PSOREJP2",48,0)
 . S DIR(0)="S^U:UNRESOLVED;R:RESOLVED;B:BOTH",DIR("B")="B"
"RTN","PSOREJP2",49,0)
 . S DIR("A")="(U)NRESOLVED, (R)RESOLVED or (B)OTH REJECT statuses" D ^DIR
"RTN","PSOREJP2",50,0)
 . S PSOSTFLT=Y
"RTN","PSOREJP2",51,0)
 ;
"RTN","PSOREJP2",52,0)
 D LST^PSOREJP0("VP")
"RTN","PSOREJP2",53,0)
 ;
"RTN","PSOREJP2",54,0)
EXIT Q
"RTN","PSOREJP2",55,0)
 ;
"RTN","PSOREJP2",56,0)
CLO ; - Ignore a REJECT hidden action
"RTN","PSOREJP2",57,0)
 N PSOTRIC,X,PSOET,PSOIT
"RTN","PSOREJP2",58,0)
 ;
"RTN","PSOREJP2",59,0)
 ; ESG - PSO*7*448 - Bug fix, should pull FILL from sub-file 52.25.
"RTN","PSOREJP2",60,0)
 I '$D(FILL) S FILL=+$$GET1^DIQ(52.25,REJ_","_RX,5)
"RTN","PSOREJP2",61,0)
 S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,FILL,PSOTRIC)
"RTN","PSOREJP2",62,0)
 ;
"RTN","PSOREJP2",63,0)
 ;reference to ^XUSEC( supported by IA 10076
"RTN","PSOREJP2",64,0)
 ;bld, PSO*7*358
"RTN","PSOREJP2",65,0)
 I PSOTRIC,'$D(^XUSEC("PSO TRICARE/CHAMPVA",DUZ)) S VALMSG="Action Requires <PSO TRICARE/CHAMPVA> security key",VALMBCK="R" Q
"RTN","PSOREJP2",66,0)
 ;if TRICARE or CHAMPVA and user has security key, prompt to continue or not
"RTN","PSOREJP2",67,0)
 ;
"RTN","PSOREJP2",68,0)
 ; Check for Ignore Threshold
"RTN","PSOREJP2",69,0)
 S PSOIT=$$IGNORE^PSOREJU1(RX,FILL)
"RTN","PSOREJP2",70,0)
 I $P(PSOIT,"^")=0 D  Q
"RTN","PSOREJP2",71,0)
 . S VALMBCK="R"
"RTN","PSOREJP2",72,0)
 . I $P(PSOIT,"^",2)'="" D
"RTN","PSOREJP2",73,0)
 . . W !!,"Gross Amount Due is $"_$P(PSOIT,"^",2)_". IGNORE requires EPHARMACY SITE MANAGER key."
"RTN","PSOREJP2",74,0)
 . . D WAIT^VALM1
"RTN","PSOREJP2",75,0)
 ;
"RTN","PSOREJP2",76,0)
 I PSOTRIC,'$$CONT^PSOREJU1() S VALMBCK="R" Q
"RTN","PSOREJP2",77,0)
 ;
"RTN","PSOREJP2",78,0)
 I $$CLOSED^PSOREJP1(RX,REJ) D  Q
"RTN","PSOREJP2",79,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R"
"RTN","PSOREJP2",80,0)
 N DIR,COM
"RTN","PSOREJP2",81,0)
 D FULL^VALM1
"RTN","PSOREJP2",82,0)
 I '$$SIG^PSOREJU1() S VALMBCK="R" Q
"RTN","PSOREJP2",83,0)
 W !
"RTN","PSOREJP2",84,0)
 S:PSOTRIC COM=$$TCOM^PSOREJP3(RX,FILL) S:'PSOTRIC COM=$$COM^PSOREJU1()
"RTN","PSOREJP2",85,0)
 I COM="^" S VALMBCK="R" Q
"RTN","PSOREJP2",86,0)
 W !
"RTN","PSOREJP2",87,0)
 S DIR(0)="Y",DIR("A")="     Confirm? ",DIR("B")="NO"
"RTN","PSOREJP2",88,0)
 S DIR("A",1)="     When you confirm this REJECT will be marked RESOLVED."
"RTN","PSOREJP2",89,0)
 S DIR("A",2)=" "
"RTN","PSOREJP2",90,0)
 D ^DIR I $G(Y)=0!$D(DIRUT) S VALMBCK="R" Q
"RTN","PSOREJP2",91,0)
 W ?40,"[Closing..." D CLOSE^PSOREJUT(RX,FILL,REJ,DUZ,6,COM,"","","","","",1) W "OK]",!,$C(7) H 1
"RTN","PSOREJP2",92,0)
 I $D(PSOSTFLT),PSOSTFLT'="B" S CHANGE=1
"RTN","PSOREJP2",93,0)
 ;
"RTN","PSOREJP2",94,0)
 I $$PTLBL(RX,FILL) D PRINT^PSOREJP3(RX,FILL)
"RTN","PSOREJP2",95,0)
 I PSOTRIC D
"RTN","PSOREJP2",96,0)
 .S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP2",97,0)
 .D AUDIT^PSOTRI(RX,FILL,,COM,$S(PSOET:"N",1:"R"),$S(PSOTRIC=1:"T",PSOTRIC=2:"C",1:""))
"RTN","PSOREJP2",98,0)
 ;
"RTN","PSOREJP2",99,0)
 Q
"RTN","PSOREJP2",100,0)
 ;
"RTN","PSOREJP2",101,0)
OPN ; - Re-open a Closed/Resolved Reject
"RTN","PSOREJP2",102,0)
 I '$$CLOSED^PSOREJP1(RX,REJ) D  Q
"RTN","PSOREJP2",103,0)
 . S VALMSG="This Reject is NOT marked resolved!",VALMBCK="R"
"RTN","PSOREJP2",104,0)
 ;cnf, PSO*7*358, check for discontinued and not released
"RTN","PSOREJP2",105,0)
 ;  12 - DISCONTINUED
"RTN","PSOREJP2",106,0)
 ;  14 - DISCONTINUED BY PROVIDER
"RTN","PSOREJP2",107,0)
 ;  15 - DISCONTINUED (EDIT)
"RTN","PSOREJP2",108,0)
 N DCSTAT,PSOREL
"RTN","PSOREJP2",109,0)
 S DCSTAT=$$GET1^DIQ(52,RX,100,"I")
"RTN","PSOREJP2",110,0)
 S PSOREL=0 D
"RTN","PSOREJP2",111,0)
 . I 'FILL S PSOREL=+$$GET1^DIQ(52,RX,31,"I")
"RTN","PSOREJP2",112,0)
 . I FILL S PSOREL=+$$GET1^DIQ(52.1,FILL_","_RX,17,"I")
"RTN","PSOREJP2",113,0)
 I 'PSOREL,"/12/14/15/"[("/"_DCSTAT_"/") S VALMSG="Discontinued Rx has not been released.",VALMBCK="R" Q
"RTN","PSOREJP2",114,0)
 N DIR,COM,REJDATA,NEWDATA,X,REOPEN
"RTN","PSOREJP2",115,0)
 D FULL^VALM1
"RTN","PSOREJP2",116,0)
 I '$$SIG^PSOREJU1() S VALMBCK="R" Q
"RTN","PSOREJP2",117,0)
 W !
"RTN","PSOREJP2",118,0)
 S DIR(0)="Y",DIR("A")="     Confirm",DIR("B")="NO"
"RTN","PSOREJP2",119,0)
 S DIR("A",1)="     When you confirm this REJECT will be marked UNRESOLVED."
"RTN","PSOREJP2",120,0)
 S DIR("A",2)=" "
"RTN","PSOREJP2",121,0)
 D ^DIR I $G(Y)=0!$D(DIRUT) S VALMBCK="R" Q
"RTN","PSOREJP2",122,0)
 ;
"RTN","PSOREJP2",123,0)
 W ?40,"[Re-opening..."
"RTN","PSOREJP2",124,0)
 K REJDATA D GET^PSOREJU2(RX,FILL,.REJDATA,REJ,1) D SETOPN^PSOREJU2(RX,REJ)
"RTN","PSOREJP2",125,0)
 K NEWDATA M NEWDATA=REJDATA(REJ) S NEWDATA("PHARMACIST")=DUZ
"RTN","PSOREJP2",126,0)
 S REOPEN=1 D SAVE^PSOREJUT(RX,FILL,.NEWDATA,REOPEN)
"RTN","PSOREJP2",127,0)
 I $G(NEWDATA("REJECT IEN")),$D(REJDATA(REJ,"COMMENTS")) D
"RTN","PSOREJP2",128,0)
 . S COM=0 F  S COM=$O(REJDATA(REJ,"COMMENTS",COM)) Q:'COM  D
"RTN","PSOREJP2",129,0)
 . . S X(1)=REJDATA(REJ,"COMMENTS",COM,"COMMENTS")
"RTN","PSOREJP2",130,0)
 . . S X(2)=REJDATA(REJ,"COMMENTS",COM,"DATE/TIME")
"RTN","PSOREJP2",131,0)
 . . S X(3)=REJDATA(REJ,"COMMENTS",COM,"USER")
"RTN","PSOREJP2",132,0)
 . . D SAVECOM^PSOREJP3(RX,NEWDATA("REJECT IEN"),X(1),X(2),X(3))
"RTN","PSOREJP2",133,0)
 D RETRXF^PSOREJU2(RX,FILL,0)
"RTN","PSOREJP2",134,0)
 W "OK]",!,$C(7) H 1
"RTN","PSOREJP2",135,0)
 S CHANGE=1
"RTN","PSOREJP2",136,0)
 Q
"RTN","PSOREJP2",137,0)
 ;
"RTN","PSOREJP2",138,0)
SDC ; - Suspense Date Calculation
"RTN","PSOREJP2",139,0)
 D CHG(1)
"RTN","PSOREJP2",140,0)
 Q
"RTN","PSOREJP2",141,0)
 ;
"RTN","PSOREJP2",142,0)
CSD ;CSD - Change Suspense Date action entry point
"RTN","PSOREJP2",143,0)
 D CHG(0)
"RTN","PSOREJP2",144,0)
 Q
"RTN","PSOREJP2",145,0)
 ;
"RTN","PSOREJP2",146,0)
CHG(SDC) ; - Change Suspense Date action
"RTN","PSOREJP2",147,0)
 ;Local:
"RTN","PSOREJP2",148,0)
 ;  SDC - indicates if the suspense date is being manually changed or calculated. 
"RTN","PSOREJP2",149,0)
 ;  RX  - RX IEN
"RTN","PSOREJP2",150,0)
 ;  REJ - Reject indicator
"RTN","PSOREJP2",151,0)
 ;
"RTN","PSOREJP2",152,0)
 I '$G(SDC) S SDC=0
"RTN","PSOREJP2",153,0)
 I $$CLOSED^PSOREJP1(RX,REJ) D  Q
"RTN","PSOREJP2",154,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R" W $C(7)
"RTN","PSOREJP2",155,0)
 ;
"RTN","PSOREJP2",156,0)
 N SUSDT,PSOMSG,Y,SUSRX,%DT,DA,DIE,DR,ISSDT,EXPDT,PSOMSG,CUTDT,FILDT,RFL,COB
"RTN","PSOREJP2",157,0)
 ;
"RTN","PSOREJP2",158,0)
 S RFL=+$$GET1^DIQ(52.25,REJ_","_RX,5),SUSDT=$$RXSUDT^PSOBPSUT(RX,RFL)
"RTN","PSOREJP2",159,0)
 I RFL>0 S FILDT=$$GET1^DIQ(52.1,RFL_","_RX,.01,"I")
"RTN","PSOREJP2",160,0)
 E  S FILDT=$$GET1^DIQ(52,RX,22,"I")
"RTN","PSOREJP2",161,0)
 I SUSDT="" S VALMSG="Prescription is not suspended!",VALMBCK="R" W $C(7) Q
"RTN","PSOREJP2",162,0)
 I $$RXRLDT^PSOBPSUT(RX,RFL) S VALMSG="Prescription has been released already!",VALMBCK="R" W $C(7) Q
"RTN","PSOREJP2",163,0)
 ;cnf, PSO*7*358, add PSOET logic for TRICARE/CHAMPVA non-billable
"RTN","PSOREJP2",164,0)
 S PSOET=$$PSOET^PSOREJP3(RX,RFL)
"RTN","PSOREJP2",165,0)
 I PSOET S VALMSG=$S(SDC=1:"SDC",1:"CSD")_" not allowed for "_$$ELIGDISP^PSOREJP1(RX,RFL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP2",166,0)
 ;
"RTN","PSOREJP2",167,0)
 D PSOL^PSSLOCK(RX) I '$G(PSOMSG) S VALMSG=$P(PSOMSG,"^",2),VALMBCK="R" W $C(7) Q
"RTN","PSOREJP2",168,0)
 ;
"RTN","PSOREJP2",169,0)
 S ISSDT=$$GET1^DIQ(52,RX,1,"I"),EXPDT=$$GET1^DIQ(52,RX,26,"I")
"RTN","PSOREJP2",170,0)
 S SUSRX=$O(^PS(52.5,"B",RX,0))
"RTN","PSOREJP2",171,0)
 ;
"RTN","PSOREJP2",172,0)
 D FULL^VALM1
"RTN","PSOREJP2",173,0)
 I SDC D  I SUSDT=0 D PSOUL^PSSLOCK(RX) S VALMBCK="R" Q
"RTN","PSOREJP2",174,0)
 . S COB=$$GET1^DIQ(52.25,REJ_","_RX,27,"I")
"RTN","PSOREJP2",175,0)
 . I 'COB S COB=1
"RTN","PSOREJP2",176,0)
 . S SUSDT=$$CALCSD(RX,RFL,COB)
"RTN","PSOREJP2",177,0)
 ;
"RTN","PSOREJP2",178,0)
SUDT ; Asks for the new Suspense Date
"RTN","PSOREJP2",179,0)
 N X1,X2
"RTN","PSOREJP2",180,0)
 S X1=FILDT,X2=89 D C^%DTC S CUTDT=X
"RTN","PSOREJP2",181,0)
 I SDC,SUSDT,SUSDT<DT W !,*7,"  **CALCULATED SUSPENSE DATE IS IN THE PAST:  ",$$FMTE^XLFDT(SUSDT),"**" S SUSDT=""
"RTN","PSOREJP2",182,0)
 E  S %DT("B")=$$FMTE^XLFDT(SUSDT)
"RTN","PSOREJP2",183,0)
 S %DT="EA",%DT("A")=$S(SDC:"NEW ",1:"")_"SUSPENSE DATE: "
"RTN","PSOREJP2",184,0)
 W ! D ^%DT I Y<0!($D(DTOUT)) D PSOUL^PSSLOCK(RX) S VALMBCK="R" I (SDC) W !,"ACTION NOT TAKEN!" Q
"RTN","PSOREJP2",185,0)
 I Y<ISSDT D  G SUDT
"RTN","PSOREJP2",186,0)
 . W !!?5,"Suspense Date cannot be before Issue Date: ",$$FMTE^XLFDT(ISSDT),".",$C(7)
"RTN","PSOREJP2",187,0)
 I Y>EXPDT D  G SUDT
"RTN","PSOREJP2",188,0)
 . W !!?5,"Suspense Date cannot be after Expiration Date: ",$$FMTE^XLFDT(EXPDT),".",$C(7)
"RTN","PSOREJP2",189,0)
 I Y>CUTDT D  G SUDT
"RTN","PSOREJP2",190,0)
 . W !!?5,"Suspense Date cannot be after fill date plus 90 days: "_$$FMTE^XLFDT(CUTDT),".",$C(7)
"RTN","PSOREJP2",191,0)
 S SUSDT=Y
"RTN","PSOREJP2",192,0)
 ;
"RTN","PSOREJP2",193,0)
 N DIR,DIRUT W !
"RTN","PSOREJP2",194,0)
 S DIR("A",1)="     When you confirm, this REJECT will be marked resolved. A"
"RTN","PSOREJP2",195,0)
 S DIR("A",2)="     new claim will be re-submitted to the 3rd party payer"
"RTN","PSOREJP2",196,0)
 I $$GET1^DIQ(52.5,SUSRX,3)="" D
"RTN","PSOREJP2",197,0)
 . I SUSDT>DT D
"RTN","PSOREJP2",198,0)
 . . S DIR("A",3)="     when the prescription label for this fill is printed"
"RTN","PSOREJP2",199,0)
 . . S DIR("A",4)="     from suspense on "_$$FMTE^XLFDT(SUSDT)_"."
"RTN","PSOREJP2",200,0)
 . . S DIR("A",5)=" "
"RTN","PSOREJP2",201,0)
 . . S DIR("A",6)="     Note: THE LABEL FOR THIS PRESCRIPTION FILL WILL NOT BE"
"RTN","PSOREJP2",202,0)
 . . S DIR("A",7)="           PRINTED LOCAL FROM SUSPENSE BEFORE "_$$FMTE^XLFDT(SUSDT)_"."
"RTN","PSOREJP2",203,0)
 . E  D
"RTN","PSOREJP2",204,0)
 . . S DIR("A",3)="     the next time local labels are printed from suspense."
"RTN","PSOREJP2",205,0)
 E  D
"RTN","PSOREJP2",206,0)
 . I SUSDT>DT D
"RTN","PSOREJP2",207,0)
 . . S DIR("A",3)="     when the prescription is transmitted to CMOP on "
"RTN","PSOREJP2",208,0)
 . . S DIR("A",4)="     "_$$FMTE^XLFDT(SUSDT)_"."
"RTN","PSOREJP2",209,0)
 . . S DIR("A",5)=" "
"RTN","PSOREJP2",210,0)
 . . S DIR("A",6)="     Note: THIS PRESCRIPTION FILL WILL NOT BE TRANSMITTED TO"
"RTN","PSOREJP2",211,0)
 . . S DIR("A",7)="           CMOP BEFORE "_$$FMTE^XLFDT(SUSDT)_"."
"RTN","PSOREJP2",212,0)
 . E  D
"RTN","PSOREJP2",213,0)
 . . S DIR("A",3)="     when this prescription fill is transmitted to CMOP on"
"RTN","PSOREJP2",214,0)
 . . S DIR("A",4)="     the next CMOP transmission."
"RTN","PSOREJP2",215,0)
 ;
"RTN","PSOREJP2",216,0)
 S DIR("A",$O(DIR("A",""),-1)+1)=" "
"RTN","PSOREJP2",217,0)
 S DIR(0)="Y",DIR("A")="     Confirm? ",DIR("B")="YES"
"RTN","PSOREJP2",218,0)
 D ^DIR I $G(Y)=0!$D(DIRUT) S VALMBCK="R" D PSOUL^PSSLOCK(RX) Q
"RTN","PSOREJP2",219,0)
 ;
"RTN","PSOREJP2",220,0)
 ; - Suspense/Fill Date updates
"RTN","PSOREJP2",221,0)
 I SUSDT'=$$RXSUDT^PSOBPSUT(RX,RFL) D
"RTN","PSOREJP2",222,0)
 . N DA,DIE,DR,PSOX,SFN,INDT,DEAD
"RTN","PSOREJP2",223,0)
 . S DA=SUSRX,DIE="^PS(52.5,",DR=".02///"_SUSDT D ^DIE
"RTN","PSOREJP2",224,0)
 . S SFN=SUSRX,DEAD=0,INDT=SUSDT D CHANGE^PSOSUCH1(RX,RFL)
"RTN","PSOREJP2",225,0)
 ;
"RTN","PSOREJP2",226,0)
 ; - Flagging the prescription to be re-submitted to ECME on the next CMOP/Print from Suspense
"RTN","PSOREJP2",227,0)
 D RETRXF^PSOREJU2(RX,RFL,1)
"RTN","PSOREJP2",228,0)
 W ?40,"[Closing..."
"RTN","PSOREJP2",229,0)
 D CLOSE^PSOREJUT(RX,RFL,REJ,DUZ,8,"Fill Date changed to "_$$FMTE^XLFDT(SUSDT)_". A new claim will be re-submitted on this date.")
"RTN","PSOREJP2",230,0)
 W "OK]",!,$C(7) H 1 I $D(PSOSTFLT),PSOSTFLT'="B" S CHANGE=1
"RTN","PSOREJP2",231,0)
 D PSOUL^PSSLOCK(RX)
"RTN","PSOREJP2",232,0)
 Q
"RTN","PSOREJP2",233,0)
 ;
"RTN","PSOREJP2",234,0)
PTLBL(RX,RFL) ; Conditionally prompts user with 'Print Label?' prompt.
"RTN","PSOREJP2",235,0)
 ; If User responds YES to 'Print Label' value of 1 is returned.
"RTN","PSOREJP2",236,0)
 ; If User responds NO to 'Print Label' value of 0 is returned.
"RTN","PSOREJP2",237,0)
 N CMP,LBL,PSOACT,PTLBL,REPRINT
"RTN","PSOREJP2",238,0)
 ;
"RTN","PSOREJP2",239,0)
 I $G(RFL)="" S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJP2",240,0)
 I $$FIND^PSOREJUT(RX,RFL) Q 0       ; Has OPEN/UNRESOLVED 3rd pary payer reject
"RTN","PSOREJP2",241,0)
 I $$GET1^DIQ(52,RX,100,"I") Q 0     ; Rx status not ACTIVE
"RTN","PSOREJP2",242,0)
 I $$RXRLDT^PSOBPSUT(RX,RFL) Q 0     ; Rx Released
"RTN","PSOREJP2",243,0)
 ;
"RTN","PSOREJP2",244,0)
 ; If CMOP Suspense Label printed for this Fill, don't allow reprint here
"RTN","PSOREJP2",245,0)
 S PTLBL=1
"RTN","PSOREJP2",246,0)
 S PSOACT=0
"RTN","PSOREJP2",247,0)
 F  S PSOACT=$O(^PSRX(RX,"A",PSOACT)) Q:'PSOACT  D  Q:'PTLBL
"RTN","PSOREJP2",248,0)
 . I +$$GET1^DIQ(52.3,PSOACT_","_RX,.04,"I")'=RFL Q
"RTN","PSOREJP2",249,0)
 . I $$GET1^DIQ(52.3,PSOACT_","_RX,.05,"E")["CMOP Suspense Label Printed" S PTLBL=0
"RTN","PSOREJP2",250,0)
 I 'PTLBL Q 0
"RTN","PSOREJP2",251,0)
 ;
"RTN","PSOREJP2",252,0)
 ; If there is an entry in the CMOP Event multiple, and it is for the
"RTN","PSOREJP2",253,0)
 ; current Fill, check the status.  If 0/Transmitted, 1/Dispensed, or
"RTN","PSOREJP2",254,0)
 ; 2/Retransmitted, then do not allow the label to be printed.
"RTN","PSOREJP2",255,0)
 ;
"RTN","PSOREJP2",256,0)
 S CMP=0
"RTN","PSOREJP2",257,0)
 F  S CMP=$O(^PSRX(RX,4,CMP)) Q:'CMP  D  Q:'PTLBL
"RTN","PSOREJP2",258,0)
 . I +$$GET1^DIQ(52.01,CMP_","_RX,2,"I")'=RFL Q
"RTN","PSOREJP2",259,0)
 . I "0,1,2"[$$GET1^DIQ(52.01,CMP_","_RX,3,"I") S PTLBL=0
"RTN","PSOREJP2",260,0)
 I 'PTLBL Q 0
"RTN","PSOREJP2",261,0)
 ;
"RTN","PSOREJP2",262,0)
 ; - Label already printed for Rx fill?
"RTN","PSOREJP2",263,0)
 S LBL=0
"RTN","PSOREJP2",264,0)
 F  S LBL=$O(^PSRX(RX,"L",LBL)) Q:'LBL  D  Q:'PTLBL
"RTN","PSOREJP2",265,0)
 . I +$$GET1^DIQ(52.032,LBL_","_RX,1,"I")'=RFL Q
"RTN","PSOREJP2",266,0)
 . I '$$RXRLDT^PSOBPSUT(RX,RFL),+$$GET1^DIQ(52.032,LBL_","_RX,1,"I")=RFL S REPRINT=1 Q
"RTN","PSOREJP2",267,0)
 . I $$GET1^DIQ(52.032,LBL_","_RX,4,"I") Q
"RTN","PSOREJP2",268,0)
 . I $$GET1^DIQ(52.032,LBL_","_RX,2)["INTERACTION" Q
"RTN","PSOREJP2",269,0)
 . S PTLBL=0
"RTN","PSOREJP2",270,0)
 ;
"RTN","PSOREJP2",271,0)
 I 'PTLBL Q 0
"RTN","PSOREJP2",272,0)
 ;
"RTN","PSOREJP2",273,0)
 N DIR,DIRUT,Y
"RTN","PSOREJP2",274,0)
 W !
"RTN","PSOREJP2",275,0)
 S DIR(0)="Y"
"RTN","PSOREJP2",276,0)
 S DIR("A")=$S('$G(REPRINT):"Print Label",1:"Reprint Label"),DIR("B")="YES"
"RTN","PSOREJP2",277,0)
 D ^DIR
"RTN","PSOREJP2",278,0)
 I $G(Y)=0!$D(DIRUT) S PTLBL=0
"RTN","PSOREJP2",279,0)
 ;
"RTN","PSOREJP2",280,0)
 Q PTLBL
"RTN","PSOREJP2",281,0)
 ;
"RTN","PSOREJP2",282,0)
DTRNG(BGN,END) ; Date Range Selection
"RTN","PSOREJP2",283,0)
 ;Input: (o) BGN - Default Begin Date 
"RTN","PSOREJP2",284,0)
 ;       (o) END - Default End Date 
"RTN","PSOREJP2",285,0)
 ;
"RTN","PSOREJP2",286,0)
 N %DT,DTOUT,DUOUT,DTRNG,X,Y
"RTN","PSOREJP2",287,0)
 S DTRNG=""
"RTN","PSOREJP2",288,0)
 S %DT="AEST",%DT("A")="BEGIN REJECT DATE: ",%DT("B")=$G(BGN) K:$G(BGN)="" %DT("B") D ^%DT
"RTN","PSOREJP2",289,0)
 I $G(DUOUT)!$G(DTOUT)!($G(Y)=-1) Q "^"
"RTN","PSOREJP2",290,0)
 S $P(DTRNG,U)=Y
"RTN","PSOREJP2",291,0)
 ;
"RTN","PSOREJP2",292,0)
 W ! K %DT
"RTN","PSOREJP2",293,0)
 S %DT="AEST",%DT("A")="END REJECT DATE: ",%DT("B")=$G(END),%DT(0)=Y K:$G(END)="" %DT("B") D ^%DT
"RTN","PSOREJP2",294,0)
 I $G(DUOUT)!$G(DTOUT)!($G(Y)=-1) Q "^"
"RTN","PSOREJP2",295,0)
 ;
"RTN","PSOREJP2",296,0)
 ;Define Entry
"RTN","PSOREJP2",297,0)
 S $P(DTRNG,U,2)=Y
"RTN","PSOREJP2",298,0)
 ;
"RTN","PSOREJP2",299,0)
 Q DTRNG
"RTN","PSOREJP2",300,0)
 ;
"RTN","PSOREJP2",301,0)
CALCSD(RX,FIL,COB) ;
"RTN","PSOREJP2",302,0)
 ; CALCSD - Prompt the user for Last Date of Service, Last Days Supply and
"RTN","PSOREJP2",303,0)
 ;   then calculate the suspense date based on these input.
"RTN","PSOREJP2",304,0)
 ; Input
"RTN","PSOREJP2",305,0)
 ;   RX - Prescription IEN
"RTN","PSOREJP2",306,0)
 ;   FIL - Fill Number
"RTN","PSOREJP2",307,0)
 ;   COB - Coordination of Benefits
"RTN","PSOREJP2",308,0)
 ; Return
"RTN","PSOREJP2",309,0)
 ;   The calculated suspense date  
"RTN","PSOREJP2",310,0)
 ;
"RTN","PSOREJP2",311,0)
 N DIR,X,Y,DUOUT,DTOUT,DIRUT,DIROUT,LDOS,LDSUP,LDS
"RTN","PSOREJP2",312,0)
 I '$G(RX) Q 0
"RTN","PSOREJP2",313,0)
 I $G(FIL)="" Q 0
"RTN","PSOREJP2",314,0)
 I '$G(COB) S COB=1
"RTN","PSOREJP2",315,0)
 ;
"RTN","PSOREJP2",316,0)
 D PREVRX(RX,FIL,COB,.LDOS,.LDS)   ; get the previous Rx last date of service and last days supply
"RTN","PSOREJP2",317,0)
 ; Prompt for Last DOS
"RTN","PSOREJP2",318,0)
 S DIR(0)="D",DIR("A")="LAST DATE OF SERVICE"
"RTN","PSOREJP2",319,0)
 I LDOS S DIR("B")=$$FMTE^XLFDT($G(LDOS))
"RTN","PSOREJP2",320,0)
 D ^DIR
"RTN","PSOREJP2",321,0)
 I $D(DIRUT) W !,"ACTION NOT TAKEN!" Q 0
"RTN","PSOREJP2",322,0)
 S LDOS=Y W "  ("_$$FMTE^XLFDT($G(LDOS))_")"
"RTN","PSOREJP2",323,0)
 ;
"RTN","PSOREJP2",324,0)
 ; Prompt for Last Days Supply
"RTN","PSOREJP2",325,0)
 S LDSUP=LDS
"RTN","PSOREJP2",326,0)
 K DIR
"RTN","PSOREJP2",327,0)
 S DIR(0)="N",DIR("A")="LAST DAYS SUPPLY"
"RTN","PSOREJP2",328,0)
 I LDSUP]"" S DIR("B")=+LDSUP
"RTN","PSOREJP2",329,0)
 D ^DIR
"RTN","PSOREJP2",330,0)
 I $D(DIRUT) W !,"ACTION NOT TAKEN!" Q 0
"RTN","PSOREJP2",331,0)
 ;
"RTN","PSOREJP2",332,0)
 ; Calculate the suspense date to be Last DOS plus 3/4 of the Last Days Supply
"RTN","PSOREJP2",333,0)
 ; Fractions are rounded up
"RTN","PSOREJP2",334,0)
 S LDSUP=Y*.75
"RTN","PSOREJP2",335,0)
 S:LDSUP["." LDSUP=(LDSUP+1)\1
"RTN","PSOREJP2",336,0)
 Q $$FMADD^XLFDT(LDOS,LDSUP)
"RTN","PSOREJP2",337,0)
 ;
"RTN","PSOREJP2",338,0)
PREVRX(RX,RFL,COB,LDOS,LDAYS,PREVRX) ; Gather last date of service and last days supply from previous rx
"RTN","PSOREJP2",339,0)
 ;    input:  RX  - Current RX
"RTN","PSOREJP2",340,0)
 ;            RFL - Refill
"RTN","PSOREJP2",341,0)
 ;            COB - Coordination of benefits
"RTN","PSOREJP2",342,0)
 ;   output:  LDOS - (pass by reference) Last date of service in fileman format, or ""
"RTN","PSOREJP2",343,0)
 ;            LDAYS - (pass by reference) Last days supply in numeric format, or ""
"RTN","PSOREJP2",344,0)
 ;            PREVRX - (pass by reference) Previous Rx for same drug, if any
"RTN","PSOREJP2",345,0)
 ;
"RTN","PSOREJP2",346,0)
 S (LDOS,LDAYS,PREVRX)=""
"RTN","PSOREJP2",347,0)
 I '$G(RX) G PREVRXQ
"RTN","PSOREJP2",348,0)
 I $G(RFL)="" G PREVRXQ
"RTN","PSOREJP2",349,0)
 I '$G(COB) S COB=1
"RTN","PSOREJP2",350,0)
 ;
"RTN","PSOREJP2",351,0)
 ; Original fill.  Check previous Rx's.
"RTN","PSOREJP2",352,0)
 ;
"RTN","PSOREJP2",353,0)
 I RFL=0 D
"RTN","PSOREJP2",354,0)
 . N X
"RTN","PSOREJP2",355,0)
 . S X=$$LAST120(RX,COB)   ; other Rx 120 day time window
"RTN","PSOREJP2",356,0)
 . S LDOS=$P(X,U,1)        ; last date of service (older rx)
"RTN","PSOREJP2",357,0)
 . S LDAYS=$P(X,U,2)       ; last days supply (older rx)
"RTN","PSOREJP2",358,0)
 . S PREVRX=$P(X,U,3)      ; Previous Rx, if any
"RTN","PSOREJP2",359,0)
 . Q
"RTN","PSOREJP2",360,0)
 ;
"RTN","PSOREJP2",361,0)
 ; refill - same RX. Get previus fill information
"RTN","PSOREJP2",362,0)
 I RFL>0 D
"RTN","PSOREJP2",363,0)
 . N FL
"RTN","PSOREJP2",364,0)
 . F FL=(RFL-1):-1:0 D  Q:LDOS           ; start with the previous fill (RFL-1)
"RTN","PSOREJP2",365,0)
 .. I $$STATUS^PSOBPSUT(RX,FL)="" Q      ; no ECME activity - skip
"RTN","PSOREJP2",366,0)
 .. I $$FIND^PSOREJUT(RX,FL,,,1) Q       ; unresolved reject on worklist - skip
"RTN","PSOREJP2",367,0)
 .. D GETDAT^BPSBUTL(RX,FL,COB,.LDOS,.LDAYS)    ; DBIA 4719
"RTN","PSOREJP2",368,0)
 .. Q
"RTN","PSOREJP2",369,0)
 . Q
"RTN","PSOREJP2",370,0)
 ;
"RTN","PSOREJP2",371,0)
PREVRXQ ;
"RTN","PSOREJP2",372,0)
 Q
"RTN","PSOREJP2",373,0)
 ;
"RTN","PSOREJP2",374,0)
LAST120(RX,COB) ;new tag PSO*7*421, cnf
"RTN","PSOREJP2",375,0)
 ; For the original fill, get the default DOS/Days Supply by getting
"RTN","PSOREJP2",376,0)
 ; most recent DOS from the other RXs within a time window for the same
"RTN","PSOREJP2",377,0)
 ; patient and drug and dosage Time window - Prescription has an
"RTN","PSOREJP2",378,0)
 ; expiration date that is in the future or within the last 120 days
"RTN","PSOREJP2",379,0)
 ; Input
"RTN","PSOREJP2",380,0)
 ;   RX - Prescription IEN
"RTN","PSOREJP2",381,0)
 ;  COB - coordination of benefits indicator (defaults to 1 if not passed)
"RTN","PSOREJP2",382,0)
 ; Output
"RTN","PSOREJP2",383,0)
 ;   Last Date of Service ^ Last Days Supply ^ Previous Rx
"RTN","PSOREJP2",384,0)
 ;
"RTN","PSOREJP2",385,0)
 N DOSAGE,DOSAGE1,DRUG,DRUG1,DSUP,DSUP1,EXPDT,FL
"RTN","PSOREJP2",386,0)
 N LDOS,LDS,LSTFIL,PAT,PREVFL,PREVRX,QTY,QTY1,RX0,RX1,X1,X2
"RTN","PSOREJP2",387,0)
 ;
"RTN","PSOREJP2",388,0)
 I '$G(COB) S COB=1
"RTN","PSOREJP2",389,0)
 S LDOS="",LDS="",PREVRX=""
"RTN","PSOREJP2",390,0)
 S RX0=$G(^PSRX(RX,0))  ; Main 0 node.
"RTN","PSOREJP2",391,0)
 S PAT=$P(RX0,U,2),DRUG=$P(RX0,U,6)
"RTN","PSOREJP2",392,0)
 I 'PAT!'DRUG Q "^^"
"RTN","PSOREJP2",393,0)
 S QTY=+$P(RX0,U,7),DSUP=+$P(RX0,U,8),DOSAGE=""
"RTN","PSOREJP2",394,0)
 I QTY,DSUP S DOSAGE=QTY/DSUP    ; Dosage is ratio of Qty to Days Supply.
"RTN","PSOREJP2",395,0)
 S EXPDT=$$FMADD^XLFDT(DT,-121)
"RTN","PSOREJP2",396,0)
 F  S EXPDT=$O(^PS(55,PAT,"P","A",EXPDT)) Q:'EXPDT  D  ; IA 2228.
"RTN","PSOREJP2",397,0)
 . S RX1=""
"RTN","PSOREJP2",398,0)
 . F  S RX1=$O(^PS(55,PAT,"P","A",EXPDT,RX1)) Q:'RX1  I RX'=RX1 D
"RTN","PSOREJP2",399,0)
 . . S DRUG1=$P($G(^PSRX(+RX1,0)),U,6)
"RTN","PSOREJP2",400,0)
 . . I DRUG'=DRUG1 Q     ; If not the same drug, skip this other Rx.
"RTN","PSOREJP2",401,0)
 . . ;
"RTN","PSOREJP2",402,0)
 . . S LSTFIL=$$LSTRFL^PSOBPSU1(RX1)      ; Start with last fill# of this other Rx.
"RTN","PSOREJP2",403,0)
 . . S X1="",X2=""                        ; For this other Rx, initialize the temp variables for last DOS and last days supply.
"RTN","PSOREJP2",404,0)
 . . F FL=LSTFIL:-1:0 D  Q:X1             ; Loop backwards until we find the latest valid DOS.
"RTN","PSOREJP2",405,0)
 . . . D CHECKIT(RX1,FL,COB,.X1,.X2)
"RTN","PSOREJP2",406,0)
 . . . Q
"RTN","PSOREJP2",407,0)
 . . ;
"RTN","PSOREJP2",408,0)
 . . I X1>LDOS S LDOS=X1,LDS=X2,PREVRX=RX1,PREVFL=FL
"RTN","PSOREJP2",409,0)
 . . Q
"RTN","PSOREJP2",410,0)
 . Q
"RTN","PSOREJP2",411,0)
 ;
"RTN","PSOREJP2",412,0)
 ; If a previous Rx passed all other checks, then check the dosage.  If
"RTN","PSOREJP2",413,0)
 ; the dosage is not the same, then clear out the variables and treat as
"RTN","PSOREJP2",414,0)
 ; if no previous Rx was found.
"RTN","PSOREJP2",415,0)
 I PREVRX'="" D
"RTN","PSOREJP2",416,0)
 . S QTY1=$S(PREVFL=0:+$P($G(^PSRX(PREVRX,0)),U,7),1:+$P($G(^PSRX(PREVRX,1,PREVFL,0)),U,4))
"RTN","PSOREJP2",417,0)
 . S DSUP1=$S(PREVFL=0:+$P($G(^PSRX(PREVRX,0)),U,8),1:+$P($G(^PSRX(PREVRX,1,PREVFL,0)),U,10))
"RTN","PSOREJP2",418,0)
 . S DOSAGE1=""
"RTN","PSOREJP2",419,0)
 . I QTY1,DSUP1 S DOSAGE1=QTY1/DSUP1
"RTN","PSOREJP2",420,0)
 . I DOSAGE'=DOSAGE1 S (LDOS,LDS,PREVRX)=""
"RTN","PSOREJP2",421,0)
 . Q
"RTN","PSOREJP2",422,0)
 ;
"RTN","PSOREJP2",423,0)
 I PREVRX'="" S PREVRX=$$GET1^DIQ(52,PREVRX_",",.01)  ; Pull external Rx#.
"RTN","PSOREJP2",424,0)
 Q LDOS_U_LDS_U_PREVRX
"RTN","PSOREJP2",425,0)
 ;
"RTN","PSOREJP2",426,0)
 ; MRD;PSO*7.0*448 - Added CHECKIT procedure to consolidate checks that
"RTN","PSOREJP2",427,0)
 ; were previously being done in two different procedures (PREVRX,
"RTN","PSOREJP2",428,0)
 ; LAST120).
"RTN","PSOREJP2",429,0)
 ;
"RTN","PSOREJP2",430,0)
CHECKIT(RX,FL,COB,LDOS,LDAYS)  ; Check 1 Rx/Fill for days' supply calc.
"RTN","PSOREJP2",431,0)
 ;
"RTN","PSOREJP2",432,0)
 ; Input:  (r) RX - Rx IEN (#52)
"RTN","PSOREJP2",433,0)
 ;         (o) FL - Refill#
"RTN","PSOREJP2",434,0)
 ;         (o) COB - Payer sequence
"RTN","PSOREJP2",435,0)
 ; Output: LDOS - Date of service for this Rx/Fill
"RTN","PSOREJP2",436,0)
 ;         LDAYS - Days' supply for this Rx/Fill
"RTN","PSOREJP2",437,0)
 ; The CHECKIT procedure determines whether a given Rx and Fill can be
"RTN","PSOREJP2",438,0)
 ; used in determining whether the 3/4 days' supply requirement has
"RTN","PSOREJP2",439,0)
 ; been met for another Rx/Fill.  The Rx/Fill being checked here must
"RTN","PSOREJP2",440,0)
 ; meet several criteria, including the following checked by this
"RTN","PSOREJP2",441,0)
 ; procedure:
"RTN","PSOREJP2",442,0)
 ;  - The Rx/Fill must be released.
"RTN","PSOREJP2",443,0)
 ;  - The Rx status must not be Non-Verified.
"RTN","PSOREJP2",444,0)
 ;  - The RX must not have an Expiration Date earlier than 120 days
"RTN","PSOREJP2",445,0)
 ;    before today.
"RTN","PSOREJP2",446,0)
 ;  - The Rx/Fill must have ECME activity.
"RTN","PSOREJP2",447,0)
 ;  - The Rx/Fill must not have any unresolved rejects.
"RTN","PSOREJP2",448,0)
 ;
"RTN","PSOREJP2",449,0)
 N EXPDT
"RTN","PSOREJP2",450,0)
 I '$$RXRLDT^PSOBPSUT(RX,FL) Q             ; If not released, Quit.
"RTN","PSOREJP2",451,0)
 I $$GET1^DIQ(52,RX,100,"I")=1 Q           ; If Status is NON-VERIFIED, Quit.
"RTN","PSOREJP2",452,0)
 S EXPDT=$$GET1^DIQ(52,RX,26,"I")          ; If Expiration Date of Rx is more
"RTN","PSOREJP2",453,0)
 I EXPDT,$$FMDIFF^XLFDT(DT,EXPDT)>120 Q    ;   than 120 days ago, Quit.
"RTN","PSOREJP2",454,0)
 I $$STATUS^PSOBPSUT(RX,FL)="" Q           ; If no ECME activity, Quit.
"RTN","PSOREJP2",455,0)
 I $$FIND^PSOREJUT(RX,FL,,,1) Q            ; If any unresolved rejects, Quit.
"RTN","PSOREJP2",456,0)
 ;
"RTN","PSOREJP2",457,0)
 ; Pull the Date of Service and Days' Supply for this Rx/Fill.
"RTN","PSOREJP2",458,0)
 ;
"RTN","PSOREJP2",459,0)
 D GETDAT^BPSBUTL(RX,FL,COB,.LDOS,.LDAYS)  ; IA 4719.
"RTN","PSOREJP2",460,0)
 Q
"RTN","PSOREJP2",461,0)
 ;
"RTN","PSOREJP3")
0^11^B262665295
"RTN","PSOREJP3",1,0)
PSOREJP3 ;ALB/SS - Third Party Reject Display Screen - Comments ;10/27/06
"RTN","PSOREJP3",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**260,287,289,290,358,359,385,403,421,427,448,482**;DEC 1997;Build 44
"RTN","PSOREJP3",3,0)
 ;Reference to GETDAT^BPSBUTL supported by IA 4719
"RTN","PSOREJP3",4,0)
 ;Reference to COM^BPSSCRU3 supported by IA 6214
"RTN","PSOREJP3",5,0)
 ;
"RTN","PSOREJP3",6,0)
COM ; Builds the Comments section in the Reject Information Screen.
"RTN","PSOREJP3",7,0)
 ; The following variables are assumed to exist:
"RTN","PSOREJP3",8,0)
 ;   RX - Pointer to file# 52, Prescription.
"RTN","PSOREJP3",9,0)
 ;   FILL - Pointer to the Refill sub-file of the Prescription.
"RTN","PSOREJP3",10,0)
 ;   REJ - Pointer to the Reject Info sub-file of the Prescription.
"RTN","PSOREJP3",11,0)
 ;
"RTN","PSOREJP3",12,0)
 N PSOARRAY,PSOCNT,PSOCOM,PSODATA,PSODATE,PSODATE1,PSODFN,PSOLAST,PSOPC
"RTN","PSOREJP3",13,0)
 N PSOPFLAG,PSOSTATUS,PSOSTR,PSOTEMP,PSOUSER,PSOX,PSOY,X
"RTN","PSOREJP3",14,0)
 ;
"RTN","PSOREJP3",15,0)
 ; MRD;PSO*7*448 - This patch added the ability for an OPECC to flag a
"RTN","PSOREJP3",16,0)
 ; comment on a BPS Transaction as being for pharmacy.  A comment so
"RTN","PSOREJP3",17,0)
 ; flagged will appear on the Reject Information Screen intermingled
"RTN","PSOREJP3",18,0)
 ; with any other comments on the Prescription.  All the comments will
"RTN","PSOREJP3",19,0)
 ; be sorted in reverse chronological order.
"RTN","PSOREJP3",20,0)
 ;
"RTN","PSOREJP3",21,0)
 ; COM^BPSSCRU3 populates the array PSOTEMP with all the comments from
"RTN","PSOREJP3",22,0)
 ; the BPS Transaction corresponding to the Prescription and Refill.
"RTN","PSOREJP3",23,0)
 ; Any of those comments with the Pharmacy flag set to '1' will be
"RTN","PSOREJP3",24,0)
 ; added to the array PSOARRAY.
"RTN","PSOREJP3",25,0)
 ;
"RTN","PSOREJP3",26,0)
 D COM^BPSSCRU3(RX,FILL,,.PSOTEMP)  ; IA 6214.
"RTN","PSOREJP3",27,0)
 ;
"RTN","PSOREJP3",28,0)
 S PSODATE=0
"RTN","PSOREJP3",29,0)
 F  S PSODATE=$O(PSOTEMP(PSODATE)) Q:'PSODATE  D
"RTN","PSOREJP3",30,0)
 . S PSOX=0
"RTN","PSOREJP3",31,0)
 . F  S PSOX=$O(PSOTEMP(PSODATE,PSOX)) Q:'PSOX  D
"RTN","PSOREJP3",32,0)
 . . ;
"RTN","PSOREJP3",33,0)
 . . ; If the Pharmacy flag is set, then add this comment to the
"RTN","PSOREJP3",34,0)
 . . ; array PSOARRAY to be displayed.
"RTN","PSOREJP3",35,0)
 . . ;
"RTN","PSOREJP3",36,0)
 . . S PSOPFLAG=$P(PSOTEMP(PSODATE,PSOX),U)
"RTN","PSOREJP3",37,0)
 . . I 'PSOPFLAG Q
"RTN","PSOREJP3",38,0)
 . . S PSOCOM=$P(PSOTEMP(PSODATE,PSOX),U,2)
"RTN","PSOREJP3",39,0)
 . . S PSOUSER=$P(PSOTEMP(PSODATE,PSOX),U,3)
"RTN","PSOREJP3",40,0)
 . . S PSOUSER=$$GET1^DIQ(200,PSOUSER,.01)
"RTN","PSOREJP3",41,0)
 . . S PSOY=$$FMTE^XLFDT(PSODATE)
"RTN","PSOREJP3",42,0)
 . . S PSOCOM=PSOY_" (OPECC) - "_PSOCOM_" ("_PSOUSER_")"
"RTN","PSOREJP3",43,0)
 . . S PSOY=$G(PSOARRAY(PSODATE))+1
"RTN","PSOREJP3",44,0)
 . . S PSOARRAY(PSODATE)=PSOY
"RTN","PSOREJP3",45,0)
 . . S PSOARRAY(PSODATE,PSOY)=PSOCOM
"RTN","PSOREJP3",46,0)
 . . Q
"RTN","PSOREJP3",47,0)
 . Q
"RTN","PSOREJP3",48,0)
 ;
"RTN","PSOREJP3",49,0)
 ; Pull comments from the Reject sub-file of the Prescription and
"RTN","PSOREJP3",50,0)
 ; add to the array PSOARRAY.
"RTN","PSOREJP3",51,0)
 ;
"RTN","PSOREJP3",52,0)
 S PSOX=0
"RTN","PSOREJP3",53,0)
 F  S PSOX=$O(^PSRX(RX,"REJ",REJ,"COM",PSOX)) Q:'PSOX  D
"RTN","PSOREJP3",54,0)
 . S PSODATE=$$GET1^DIQ(52.2551,PSOX_","_REJ_","_RX,.01,"E")
"RTN","PSOREJP3",55,0)
 . S PSOUSER=$$GET1^DIQ(52.2551,PSOX_","_REJ_","_RX,1)
"RTN","PSOREJP3",56,0)
 . S PSOCOM=$$GET1^DIQ(52.2551,PSOX_","_REJ_","_RX,2)
"RTN","PSOREJP3",57,0)
 . S PSOCOM=PSODATE_" - "_PSOCOM_" ("_PSOUSER_")"
"RTN","PSOREJP3",58,0)
 . S PSODATE=$$GET1^DIQ(52.2551,PSOX_","_REJ_","_RX,.01,"I")
"RTN","PSOREJP3",59,0)
 . S PSOY=$G(PSOARRAY(PSODATE))+1
"RTN","PSOREJP3",60,0)
 . S PSOARRAY(PSODATE)=PSOY
"RTN","PSOREJP3",61,0)
 . S PSOARRAY(PSODATE,PSOY)=PSOCOM
"RTN","PSOREJP3",62,0)
 . Q
"RTN","PSOREJP3",63,0)
 ;
"RTN","PSOREJP3",64,0)
 ; At this point, all of the comments to be displayed are in the array
"RTN","PSOREJP3",65,0)
 ; PSOARRAY, sorted by date/time.  If that array is empty, then Quit
"RTN","PSOREJP3",66,0)
 ; out.  Otherwise, loop through the comments backwards to display in
"RTN","PSOREJP3",67,0)
 ; reverse chronological order.
"RTN","PSOREJP3",68,0)
 ;
"RTN","PSOREJP3",69,0)
 I '$O(PSOARRAY("")) G PTC
"RTN","PSOREJP3",70,0)
 D SETLN^PSOREJP1()
"RTN","PSOREJP3",71,0)
 D SETLN^PSOREJP1("COMMENTS - REJECT",1,1)
"RTN","PSOREJP3",72,0)
 ;
"RTN","PSOREJP3",73,0)
 S PSODATE=""
"RTN","PSOREJP3",74,0)
 F  S PSODATE=$O(PSOARRAY(PSODATE),-1) Q:'PSODATE  D
"RTN","PSOREJP3",75,0)
 . S PSOX=""
"RTN","PSOREJP3",76,0)
 . F  S PSOX=$O(PSOARRAY(PSODATE,PSOX),-1) Q:'PSOX  D
"RTN","PSOREJP3",77,0)
 . . ;
"RTN","PSOREJP3",78,0)
 . . ; Use ^DIWP utility to put comment into scratch global array,
"RTN","PSOREJP3",79,0)
 . . ; with lines broken apart intelligently.
"RTN","PSOREJP3",80,0)
 . . ;
"RTN","PSOREJP3",81,0)
 . . N %,DIW,DIWF,DIWI,DIWL,DIWR,DIWT,DIWTC,DIWX,DN,I,Z
"RTN","PSOREJP3",82,0)
 . . K ^UTILITY($J,"W")
"RTN","PSOREJP3",83,0)
 . . S X=PSOARRAY(PSODATE,PSOX)
"RTN","PSOREJP3",84,0)
 . . S DIWL=1
"RTN","PSOREJP3",85,0)
 . . S DIWR=78
"RTN","PSOREJP3",86,0)
 . . D ^DIWP
"RTN","PSOREJP3",87,0)
 . . ;
"RTN","PSOREJP3",88,0)
 . . ; Loop through the scratch array and add each line to the ^TMP
"RTN","PSOREJP3",89,0)
 . . ; global to be displayed on the screen.
"RTN","PSOREJP3",90,0)
 . . ;
"RTN","PSOREJP3",91,0)
 . . S PSOLAST=0
"RTN","PSOREJP3",92,0)
 . . F PSOY=1:1 Q:('$D(^UTILITY($J,"W",1,PSOY,0)))  D
"RTN","PSOREJP3",93,0)
 . . . S PSOCOM=$G(^UTILITY($J,"W",1,PSOY,0))
"RTN","PSOREJP3",94,0)
 . . . ;
"RTN","PSOREJP3",95,0)
 . . . ; If this line is the last of this comment, and this is the
"RTN","PSOREJP3",96,0)
 . . . ; last comment, then Set PSOLAST=1 to make this line underlined
"RTN","PSOREJP3",97,0)
 . . . ; on the screen.
"RTN","PSOREJP3",98,0)
 . . . ;
"RTN","PSOREJP3",99,0)
 . . . I '$D(^UTILITY($J,"W",1,PSOY+1)),$O(PSOARRAY(PSODATE,PSOX),-1)="",$O(PSOARRAY(PSODATE),-1)="" S PSOLAST=1
"RTN","PSOREJP3",100,0)
 . . . ;
"RTN","PSOREJP3",101,0)
 . . . ; Use SETLN^PSOREJP1 to add line to ^TMP array to be displayed to screen.
"RTN","PSOREJP3",102,0)
 . . . ;
"RTN","PSOREJP3",103,0)
 . . . D SETLN^PSOREJP1($S(PSOY=1:"- ",1:"  ")_PSOCOM,0,PSOLAST,1)
"RTN","PSOREJP3",104,0)
 . . . Q
"RTN","PSOREJP3",105,0)
 . . Q
"RTN","PSOREJP3",106,0)
 . Q
"RTN","PSOREJP3",107,0)
 ;
"RTN","PSOREJP3",108,0)
PTC ; Patient Comments
"RTN","PSOREJP3",109,0)
 ;
"RTN","PSOREJP3",110,0)
 K PSOARRAY
"RTN","PSOREJP3",111,0)
 ;
"RTN","PSOREJP3",112,0)
 ; Get Patient ID - If no Patient Comments on file, Quit
"RTN","PSOREJP3",113,0)
 S PSODFN=$$GET1^DIQ(52,RX,2,"I")
"RTN","PSOREJP3",114,0)
 I '$D(^PS(55,PSODFN,"PC")) Q
"RTN","PSOREJP3",115,0)
 ;
"RTN","PSOREJP3",116,0)
 ; Loop through Patient Comments - Add ACTIVE Comments to PSOAR array
"RTN","PSOREJP3",117,0)
 S PSODATE=""
"RTN","PSOREJP3",118,0)
 S PSOCNT=0
"RTN","PSOREJP3",119,0)
 K PSOAR
"RTN","PSOREJP3",120,0)
 F  S PSODATE=$O(^PS(55,PSODFN,"PC","B",PSODATE)) Q:PSODATE=""  D
"RTN","PSOREJP3",121,0)
 . S PSOPC=""
"RTN","PSOREJP3",122,0)
 . F  S PSOPC=$O(^PS(55,PSODFN,"PC","B",PSODATE,PSOPC)) Q:PSOPC=""  D
"RTN","PSOREJP3",123,0)
 . . K PSODATA
"RTN","PSOREJP3",124,0)
 . . D GETS^DIQ(55.17,PSOPC_","_PSODFN_",",".01;1;2;3","IE","PSODATA")
"RTN","PSOREJP3",125,0)
 . . ; 
"RTN","PSOREJP3",126,0)
 . . ; Only display ACTIVE Patient Comments
"RTN","PSOREJP3",127,0)
 . . S PSOSTATUS=$G(PSODATA(55.17,PSOPC_","_PSODFN_",",2,"I"))
"RTN","PSOREJP3",128,0)
 . . I PSOSTATUS'="Y" Q
"RTN","PSOREJP3",129,0)
 . . ;
"RTN","PSOREJP3",130,0)
 . . S PSODATE1=$G(PSODATA(55.17,PSOPC_","_PSODFN_",",.01,"E"))
"RTN","PSOREJP3",131,0)
 . . S PSOUSER=$G(PSODATA(55.17,PSOPC_","_PSODFN_",",1,"E"))
"RTN","PSOREJP3",132,0)
 . . S PSOCOM=$G(PSODATA(55.17,PSOPC_","_PSODFN_",",3,"E"))
"RTN","PSOREJP3",133,0)
 . . S PSOSTR=PSODATE1_" - "_PSOCOM_" ("_PSOUSER_")"
"RTN","PSOREJP3",134,0)
 . . S PSOCNT=PSOCNT+1
"RTN","PSOREJP3",135,0)
 . . S PSOARRAY(PSOCNT)=PSOSTR
"RTN","PSOREJP3",136,0)
 ;
"RTN","PSOREJP3",137,0)
 ; If PSOAR array exists, display Active Patient Comments
"RTN","PSOREJP3",138,0)
 I $D(PSOARRAY) D
"RTN","PSOREJP3",139,0)
 . D SETLN^PSOREJP1("COMMENTS - PATIENT",1,1)
"RTN","PSOREJP3",140,0)
 . ;
"RTN","PSOREJP3",141,0)
 . ; Loop through PSOAR in reverse order to display Patient
"RTN","PSOREJP3",142,0)
 . ; Comments in reverse chronological order
"RTN","PSOREJP3",143,0)
 . S PSOCNT=""
"RTN","PSOREJP3",144,0)
 . F  S PSOCNT=$O(PSOARRAY(PSOCNT),-1) Q:PSOCNT=""  D
"RTN","PSOREJP3",145,0)
 . . ;
"RTN","PSOREJP3",146,0)
 . . ; Use ^DIWP to display Patient Comments with proper
"RTN","PSOREJP3",147,0)
 . . ; line breaking
"RTN","PSOREJP3",148,0)
 . . N %,DIW,DIWF,DIWI,DIWL,DIWR,DIWT,DIWTC,DIWX,DN,I,Z
"RTN","PSOREJP3",149,0)
 . . K ^UTILITY($J,"W")
"RTN","PSOREJP3",150,0)
 . . S X=PSOARRAY(PSOCNT)
"RTN","PSOREJP3",151,0)
 . . S DIWL=1
"RTN","PSOREJP3",152,0)
 . . S DIWR=78
"RTN","PSOREJP3",153,0)
 . . D ^DIWP
"RTN","PSOREJP3",154,0)
 . . ;
"RTN","PSOREJP3",155,0)
 . . S PSOLAST=0
"RTN","PSOREJP3",156,0)
 . . F PSOY=1:1 Q:('$D(^UTILITY($J,"W",1,PSOY,0)))  D
"RTN","PSOREJP3",157,0)
 . . . S PSOCOM=$G(^UTILITY($J,"W",1,PSOY,0))
"RTN","PSOREJP3",158,0)
 . . . ;
"RTN","PSOREJP3",159,0)
 . . . ; Looping through the array in reverse order means PSOCNT=1
"RTN","PSOREJP3",160,0)
 . . . ; will be the last comment to display. If the last line of the 
"RTN","PSOREJP3",161,0)
 . . . ; last comment is being displayed, set PSOLAST=1 to underline
"RTN","PSOREJP3",162,0)
 . . . ; the comment on the screen.
"RTN","PSOREJP3",163,0)
 . . . ;
"RTN","PSOREJP3",164,0)
 . . . I '$D(^UTILITY($J,"W",1,PSOY+1)),PSOCNT=1 S PSOLAST=1
"RTN","PSOREJP3",165,0)
 . . . ;
"RTN","PSOREJP3",166,0)
 . . . ; Use SETLN^PSOREJP1 to add line to ^TMP array to be displayed to screen.
"RTN","PSOREJP3",167,0)
 . . . ;
"RTN","PSOREJP3",168,0)
 . . . D SETLN^PSOREJP1($S(PSOY=1:"- ",1:"  ")_PSOCOM,0,PSOLAST,1)
"RTN","PSOREJP3",169,0)
 ;
"RTN","PSOREJP3",170,0)
 K ^UTILITY($J,"W")
"RTN","PSOREJP3",171,0)
 ;
"RTN","PSOREJP3",172,0)
 Q
"RTN","PSOREJP3",173,0)
 ;
"RTN","PSOREJP3",174,0)
ADDCOM ; - Add comment worklist action
"RTN","PSOREJP3",175,0)
 N DIR,PSO55,PSCOM,PSOCOMTYPE
"RTN","PSOREJP3",176,0)
 D FULL^VALM1
"RTN","PSOREJP3",177,0)
 ;
"RTN","PSOREJP3",178,0)
 S DIR(0)="S^R:Reject;P:Patient Billing"
"RTN","PSOREJP3",179,0)
 S DIR("A")="Comment Type"
"RTN","PSOREJP3",180,0)
 S DIR("?",1)="The Reject Comment only displays for the specific reject."
"RTN","PSOREJP3",181,0)
 S DIR("?")="The Patient Billing Comment displays on all rejects for the patient."
"RTN","PSOREJP3",182,0)
 D ^DIR
"RTN","PSOREJP3",183,0)
 I $D(DIRUT) S VALMBCK="R" Q
"RTN","PSOREJP3",184,0)
 S PSOCOMTYPE=Y
"RTN","PSOREJP3",185,0)
 ;
"RTN","PSOREJP3",186,0)
 I PSOCOMTYPE="P",'$D(^XUSEC("PSO EPHARMACY SITE MANAGER",DUZ)) D  S VALMBCK="R" Q
"RTN","PSOREJP3",187,0)
 . W !,"Patient Billing Comments require Pharmacy Key (PSO EPHARMACY SITE MANAGER)"
"RTN","PSOREJP3",188,0)
 . D WAIT^VALM1
"RTN","PSOREJP3",189,0)
 ;
"RTN","PSOREJP3",190,0)
 S PSCOM=$$COMMENT("Comment: ",150)
"RTN","PSOREJP3",191,0)
 ;
"RTN","PSOREJP3",192,0)
 ; Save Reject Type Comment
"RTN","PSOREJP3",193,0)
 I PSOCOMTYPE="R",$L(PSCOM)>0,PSCOM'["^" D
"RTN","PSOREJP3",194,0)
 . D SAVECOM(RX,REJ,PSCOM) ;save the comment
"RTN","PSOREJP3",195,0)
 . D INIT^PSOREJP1 ;update screen
"RTN","PSOREJP3",196,0)
 ; Save Patient Billing Type Comment
"RTN","PSOREJP3",197,0)
 I PSOCOMTYPE="P",$L(PSCOM)>0,PSCOM'["^" D
"RTN","PSOREJP3",198,0)
 . S PSO55=$$GET1^DIQ(52,RX,2,"I")
"RTN","PSOREJP3",199,0)
 . D ADDPC^PSOPTC0(PSCOM,PSO55)
"RTN","PSOREJP3",200,0)
 . D INIT^PSOREJP1
"RTN","PSOREJP3",201,0)
 S VALMBCK="R"
"RTN","PSOREJP3",202,0)
 Q 
"RTN","PSOREJP3",203,0)
 ;
"RTN","PSOREJP3",204,0)
 ;Enter a comment
"RTN","PSOREJP3",205,0)
 ;PSOTR  -prompt string
"RTN","PSOREJP3",206,0)
 ;PSMLEN -maxlen
"RTN","PSOREJP3",207,0)
 ;returns:
"RTN","PSOREJP3",208,0)
 ; "^" - if user chose to quit 
"RTN","PSOREJP3",209,0)
 ; "" - nothing entered or input has been discarded
"RTN","PSOREJP3",210,0)
 ; otherwise - comment's text
"RTN","PSOREJP3",211,0)
COMMENT(PSOTR,PSMLEN) ;*/
"RTN","PSOREJP3",212,0)
 N DIR,DTOUT,DUOUT,PSQ
"RTN","PSOREJP3",213,0)
 I '$D(PSOTR) S PSOTR="Comment "
"RTN","PSOREJP3",214,0)
 I '$D(PSMLEN) S PSMLEN=150
"RTN","PSOREJP3",215,0)
 S DIR(0)="FA^1:150"
"RTN","PSOREJP3",216,0)
 S DIR("A")=PSOTR
"RTN","PSOREJP3",217,0)
 S DIR("?")="Enter a free text comment up to 150 characters long."
"RTN","PSOREJP3",218,0)
 S PSQ=0
"RTN","PSOREJP3",219,0)
 F  D  Q:+PSQ'=0
"RTN","PSOREJP3",220,0)
 . W ! D ^DIR
"RTN","PSOREJP3",221,0)
 . I $D(DUOUT)!($D(DTOUT)) S PSQ=-1 Q
"RTN","PSOREJP3",222,0)
 . I $L(Y)'>PSMLEN S PSQ=1 Q
"RTN","PSOREJP3",223,0)
 . W !!,"Enter a free text comment up to 150 characters long.",!
"RTN","PSOREJP3",224,0)
 . S DIR("B")=$E(Y,1,PSMLEN)
"RTN","PSOREJP3",225,0)
 Q:PSQ<0 "^"
"RTN","PSOREJP3",226,0)
 Q:$L(Y)=0 ""
"RTN","PSOREJP3",227,0)
 S PSQ=$$YESNO("Confirm","YES")
"RTN","PSOREJP3",228,0)
 I PSQ=-1 Q "^"
"RTN","PSOREJP3",229,0)
 I PSQ=0 Q ""
"RTN","PSOREJP3",230,0)
 Q Y
"RTN","PSOREJP3",231,0)
 ;
"RTN","PSOREJP3",232,0)
 ; Ask
"RTN","PSOREJP3",233,0)
 ; Input:
"RTN","PSOREJP3",234,0)
 ;  PSQSTR - question
"RTN","PSOREJP3",235,0)
 ;  PSDFL - default answer
"RTN","PSOREJP3",236,0)
 ; Output: 
"RTN","PSOREJP3",237,0)
 ; 1 YES
"RTN","PSOREJP3",238,0)
 ; 0 NO
"RTN","PSOREJP3",239,0)
 ; -1 if cancelled
"RTN","PSOREJP3",240,0)
YESNO(PSQSTR,PSDFL) ; Default - YES
"RTN","PSOREJP3",241,0)
 N DIR,Y,DUOUT
"RTN","PSOREJP3",242,0)
 S DIR(0)="Y"
"RTN","PSOREJP3",243,0)
 S DIR("A")=PSQSTR
"RTN","PSOREJP3",244,0)
 S:$L($G(PSDFL)) DIR("B")=PSDFL
"RTN","PSOREJP3",245,0)
 W ! D ^DIR
"RTN","PSOREJP3",246,0)
 Q $S($G(DUOUT)!$G(DUOUT)!(Y="^"):-1,1:Y)
"RTN","PSOREJP3",247,0)
 ;
"RTN","PSOREJP3",248,0)
 ;Save comment
"RTN","PSOREJP3",249,0)
SAVECOM(PSRXIEN,PSREJIEN,PSCOMNT,DATETIME,USER) ;
"RTN","PSOREJP3",250,0)
 N PSREC,PSDA,PSERR
"RTN","PSOREJP3",251,0)
 I '$G(DATETIME) D NOW^%DTC S DATETIME=%
"RTN","PSOREJP3",252,0)
 I '$G(USER) S USER=DUZ
"RTN","PSOREJP3",253,0)
 D INSITEM(52.2551,PSRXIEN,PSREJIEN,DATETIME)
"RTN","PSOREJP3",254,0)
 S PSREC=$O(^PSRX(PSRXIEN,"REJ",PSREJIEN,"COM","B",DATETIME,0))
"RTN","PSOREJP3",255,0)
 I PSREC>0 D
"RTN","PSOREJP3",256,0)
 . S PSDA(52.2551,PSREC_","_PSREJIEN_","_PSRXIEN_",",1)=USER
"RTN","PSOREJP3",257,0)
 . S PSDA(52.2551,PSREC_","_PSREJIEN_","_PSRXIEN_",",2)=$G(PSCOMNT)
"RTN","PSOREJP3",258,0)
 . D FILE^DIE("","PSDA","PSERR")
"RTN","PSOREJP3",259,0)
 Q
"RTN","PSOREJP3",260,0)
 ;
"RTN","PSOREJP3",261,0)
 ;/**
"RTN","PSOREJP3",262,0)
 ;PSSFILE - subfile# (52.2551) for comment
"RTN","PSOREJP3",263,0)
 ;PSIEN - ien for file in which the new subfile entry will be inserted
"RTN","PSOREJP3",264,0)
 ;PSVAL01 - .01 value for the new entry
"RTN","PSOREJP3",265,0)
INSITEM(PSSFILE,PSIEN0,PSIEN1,PSVAL01) ;*/
"RTN","PSOREJP3",266,0)
 N PSSSI,PSIENS,PSFDA,PSER
"RTN","PSOREJP3",267,0)
 S PSIENS="+1,"_PSIEN1_","_PSIEN0_","
"RTN","PSOREJP3",268,0)
 S PSFDA(PSSFILE,PSIENS,.01)=PSVAL01
"RTN","PSOREJP3",269,0)
 D UPDATE^DIE("","PSFDA","PSSSI","PSER")
"RTN","PSOREJP3",270,0)
 I $D(PSER) D BMES^XPDUTL(PSER("DIERR",1,"TEXT",1))
"RTN","PSOREJP3",271,0)
 Q
"RTN","PSOREJP3",272,0)
 ;
"RTN","PSOREJP3",273,0)
PRINT(RX,RFL) ; Print Label for specific Rx/Fill
"RTN","PSOREJP3",274,0)
 I '$G(RX) Q
"RTN","PSOREJP3",275,0)
 I $G(RFL)="" Q
"RTN","PSOREJP3",276,0)
 ;
"RTN","PSOREJP3",277,0)
 ; Some of these variables are used by LBL^PSOLSET but they are newed here
"RTN","PSOREJP3",278,0)
 N PPL,PSOSITE,PSOPAR,PSOSYS,PSOBARS,PSOBAR0,PSOBAR1,PSOIOS,PSOBFLAG,PSOCLBL
"RTN","PSOREJP3",279,0)
 N PSOQUIT,PSOPIOST,PSOLTEST,PSOTLBL,PSORXT
"RTN","PSOREJP3",280,0)
 N DFN,PDUZ,RXFL,REPRINT,REJLBL,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","PSOREJP3",281,0)
 N %ZIS,IOP,POP,ZTSK,ZTRTN,ZTIO,ZTDESC,ZTSAVE,ZTDTH,VAR
"RTN","PSOREJP3",282,0)
 ;
"RTN","PSOREJP3",283,0)
 ; Set the default label printer.  We need to new it so we don't change the value that was
"RTN","PSOREJP3",284,0)
 ;   set by PSOLSET when the user first logged into OP so need to do a bit of work to new it and  
"RTN","PSOREJP3",285,0)
 ;   reset it before the call to LBL^PSOLSET.
"RTN","PSOREJP3",286,0)
 I $G(PSOLAP)]"" S PSOTLBL=PSOLAP N PSOLAP S PSOLAP=PSOTLBL,PSOCLBL=1
"RTN","PSOREJP3",287,0)
 E  N PSOLAP S PSOCLBL=""
"RTN","PSOREJP3",288,0)
 ;
"RTN","PSOREJP3",289,0)
 ; Check if a label has already been printed and set REPRINT flag.
"RTN","PSOREJP3",290,0)
 S REJLBL=0 F  S REJLBL=$O(^PSRX(RX,"L",REJLBL)) Q:'REJLBL  I +$$GET1^DIQ(52.032,REJLBL_","_RX,1,"I")=RFL S REPRINT=1 Q
"RTN","PSOREJP3",291,0)
 ;
"RTN","PSOREJP3",292,0)
 ; Define required variables
"RTN","PSOREJP3",293,0)
 S PSOSITE=+$$RXSITE^PSOBPSUT(RX,RFL),PSOPAR=$G(^PS(59,PSOSITE,1))
"RTN","PSOREJP3",294,0)
 S DFN=$$GET1^DIQ(52,RX,2,"I"),PDUZ=DUZ,PSOSYS=$G(^PS(59.7,1,40.1))
"RTN","PSOREJP3",295,0)
 S PPL=RX I RFL S RXFL(RX)=RFL
"RTN","PSOREJP3",296,0)
 ;
"RTN","PSOREJP3",297,0)
 ; Get label print device and check alignment
"RTN","PSOREJP3",298,0)
 W ! S PSOBFLAG=1 D LBL^PSOLSET I $G(PSOQUIT) Q
"RTN","PSOREJP3",299,0)
 I $G(PSOLAP)="" W $C(7),!!,"No printer defined" K DIR S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR Q
"RTN","PSOREJP3",300,0)
 ;
"RTN","PSOREJP3",301,0)
 ; Call %ZIS to get device characteristics w/o reopening the printer. 
"RTN","PSOREJP3",302,0)
 ; We need to do this to check if queuing is forced for this device
"RTN","PSOREJP3",303,0)
 ; Not checking the POP variable.  If we don't get the device here, we will fall through to the 
"RTN","PSOREJP3",304,0)
 ;   foreground process and try again
"RTN","PSOREJP3",305,0)
 S IOP=PSOLAP,%ZIS="QN" D ^%ZIS
"RTN","PSOREJP3",306,0)
 ;
"RTN","PSOREJP3",307,0)
 ; If background printer, queue the job
"RTN","PSOREJP3",308,0)
 I $D(IO("Q")) D  Q
"RTN","PSOREJP3",309,0)
 . S ZTRTN="DQ^PSOLBL",ZTDTH=$H,ZTIO=PSOLAP
"RTN","PSOREJP3",310,0)
 . F VAR="PSOSYS","DFN","PSOPAR","PDUZ","PCOMX","PSOLAP","PPL","PSOSITE","RXY","PSOSUSPR","PSOBARS","PSOBAR1","PSOBAR0","PSODELE","PSOPULL","PSTAT","PSODBQ","PSOEXREP","PSOTREP","REPRINT" S:$D(@VAR) ZTSAVE(VAR)=""
"RTN","PSOREJP3",311,0)
 . S ZTSAVE("PSORX(")="",ZTSAVE("RXRP(")="",ZTSAVE("RXPR(")="",ZTSAVE("RXRS(")="",ZTSAVE("RXFL(")="",ZTSAVE("PCOMH(")=""
"RTN","PSOREJP3",312,0)
 . S ZTDESC="OUTPATIENT PHARMACY REJECT WORKLIST LABEL PRINT"
"RTN","PSOREJP3",313,0)
 . D ^%ZISC,^%ZTLOAD
"RTN","PSOREJP3",314,0)
 . W !!,"Label ",$S('$D(ZTSK):"NOT ",1:""),"queued to print",! I '$D(ZTSK) W $C(7) K DIR S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR
"RTN","PSOREJP3",315,0)
 ;
"RTN","PSOREJP3",316,0)
 ; If we gotten this far, open the device and print the label in the foreground
"RTN","PSOREJP3",317,0)
 ; We also need to preserve the PSORX array, which gets killed by DQ^PSOLBL
"RTN","PSOREJP3",318,0)
 K %ZIS S IOP=PSOLAP D ^%ZIS
"RTN","PSOREJP3",319,0)
 I POP D ^%ZISC W $C(7),!!,"Printer is busy - NO label printed" K DIR S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR Q
"RTN","PSOREJP3",320,0)
 K PSORXT M PSORXT=PSORX
"RTN","PSOREJP3",321,0)
 D DQ^PSOLBL,^%ZISC
"RTN","PSOREJP3",322,0)
 K PSORX M PSORX=PSORXT
"RTN","PSOREJP3",323,0)
 Q
"RTN","PSOREJP3",324,0)
 ;
"RTN","PSOREJP3",325,0)
RXINFO(RX,FILL,LINE,REJ) ; Returns header displayable Rx Information
"RTN","PSOREJP3",326,0)
 N TXT,RXINFO,LBL,CMOP,DRG,PSOET
"RTN","PSOREJP3",327,0)
 I LINE=1 D
"RTN","PSOREJP3",328,0)
 . N RXDOS D GETDAT^BPSBUTL(RX,FILL,,.RXDOS) ; Get Date of Service from BPS CLAIM field 401 - PSO*7*421
"RTN","PSOREJP3",329,0)
 . S RXINFO="Rx#      : "_$$GET1^DIQ(52,RX,.01)_"/"_FILL
"RTN","PSOREJP3",330,0)
 . ;cnf, PSO*7*358, add PSOET logic for TRICARE/CHAMPVA non-billable
"RTN","PSOREJP3",331,0)
 . S PSOET=$$PSOET(RX,FILL)
"RTN","PSOREJP3",332,0)
 . S $E(RXINFO,27)="ECME#: "_$S(PSOET:"",1:$$ECMENUM^PSOBPSU2(RX,FILL))
"RTN","PSOREJP3",333,0)
 . S $E(RXINFO,49)="Date of Service: "_$S(PSOET:"",1:$$FMTE^XLFDT(RXDOS)) ; Use DOS from BPS Claims field 401 - PSO*7*421
"RTN","PSOREJP3",334,0)
 I LINE=2 D
"RTN","PSOREJP3",335,0)
 . S DRG=$$GET1^DIQ(52,RX,6,"I"),CMOP=$S($D(^PSDRUG("AQ",DRG)):1,1:0)
"RTN","PSOREJP3",336,0)
 . S RXINFO=$S(CMOP:"CMOP ",1:"")_"Drug",$E(RXINFO,10)=": "_$E($$GET1^DIQ(52,RX,6),1,43)
"RTN","PSOREJP3",337,0)
 . S $E(RXINFO,56)="NDC Code: "_$$GETNDC^PSONDCUT(RX,FILL)
"RTN","PSOREJP3",338,0)
 Q $G(RXINFO)
"RTN","PSOREJP3",339,0)
 ;
"RTN","PSOREJP3",340,0)
FILL ;Fill payable TRICARE or CHAMPVA Rx
"RTN","PSOREJP3",341,0)
 N COM,I,OPNREJ,OPNREJ2,OPNREJ3,DCSTAT,PSOREL
"RTN","PSOREJP3",342,0)
 S:'$G(PSOTRIC) PSOTRIC=$$TRIC^PSOREJP1(RX,FILL,PSOTRIC)  ;cnf, PSO*7*358, add line
"RTN","PSOREJP3",343,0)
 ;cnf, PSO*7*358, don't allow option if TRICARE/CHAMPVA and released, PSOREL is set to the release date
"RTN","PSOREJP3",344,0)
 S PSOREL=0 I PSOTRIC D
"RTN","PSOREJP3",345,0)
 . I 'FILL S PSOREL=+$$GET1^DIQ(52,RX,31,"I")
"RTN","PSOREJP3",346,0)
 . I FILL S PSOREL=+$$GET1^DIQ(52.1,FILL_","_RX,17,"I")
"RTN","PSOREJP3",347,0)
 I PSOREL S VALMSG="Released Rxs may not be filled.",VALMBCK="R" Q
"RTN","PSOREJP3",348,0)
 ;cnf, PSO*7*358, don't allow option if prescription has been discontinued
"RTN","PSOREJP3",349,0)
 ;  12 - DISCONTINUED
"RTN","PSOREJP3",350,0)
 ;  14 - DISCONTINUED BY PROVIDER
"RTN","PSOREJP3",351,0)
 ;  15 - DISCONTINUED (EDIT)
"RTN","PSOREJP3",352,0)
 S DCSTAT=$$GET1^DIQ(52,RX,100,"I")
"RTN","PSOREJP3",353,0)
 I "/12/14/15/"[("/"_DCSTAT_"/") S VALMSG="Discontinued Rxs may not be filled.",VALMBCK="R" Q
"RTN","PSOREJP3",354,0)
 D FULL^VALM1
"RTN","PSOREJP3",355,0)
 I $$CLOSED^PSOREJP1(RX,REJ) D  Q
"RTN","PSOREJP3",356,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R"
"RTN","PSOREJP3",357,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP3",358,0)
 S COM=""
"RTN","PSOREJP3",359,0)
 I 'PSOTRIC&($$STATUS^PSOBPSUT(RX,FILL)'["PAYABLE") S VALMSG="Only Rxs with an E PAYABLE status may be filled.",VALMBCK="R" Q
"RTN","PSOREJP3",360,0)
 I PSOTRIC&($$STATUS^PSOBPSUT(RX,FILL)'["PAYABLE") D FILLTR I $L($G(VALMSG)_$G(VALMBCK)) Q  ;cnf, PSO*7*358
"RTN","PSOREJP3",361,0)
 S:COM="" COM="AUTOMATICALLY CLOSED"  ;cnf, PSO*7*358, add condition
"RTN","PSOREJP3",362,0)
 S (OPNREJ,OPNREJ2,OPNREJ3)=""
"RTN","PSOREJP3",363,0)
 S OPNREJ2=0 F  S OPNREJ2=$O(^PSRX(RX,"REJ",OPNREJ2)) Q:OPNREJ2=""!(OPNREJ2'?1N.N)  S OPNREJ=OPNREJ_","_OPNREJ2
"RTN","PSOREJP3",364,0)
 S OPNREJ=$E(OPNREJ,2,999),OPNREJ2=""
"RTN","PSOREJP3",365,0)
 W !?20,"[Closing all rejections for prescription "_$$GET1^DIQ(52,RX,".01")_":"
"RTN","PSOREJP3",366,0)
 F I=1:1 S OPNREJ2=$P(OPNREJ,",",I) Q:OPNREJ2=""  D
"RTN","PSOREJP3",367,0)
 . S OPNREJ3="",OPNREJ3=$$GET1^DIQ(52.25,OPNREJ2_","_RX,".01")
"RTN","PSOREJP3",368,0)
 . W !?25,OPNREJ3_" - "_$$GET1^DIQ(9002313.93,OPNREJ3,".02")_"..."
"RTN","PSOREJP3",369,0)
 . D CLOSE^PSOREJUT(RX,FILL,OPNREJ2,DUZ,6,COM,"","","","","",1) W "OK]",!,$C(7) H 1  ; pso*7*421 Use 12th param to ignore
"RTN","PSOREJP3",370,0)
 I $$PTLBL^PSOREJP2(RX,FILL) D PRINT(RX,FILL)
"RTN","PSOREJP3",371,0)
 S CHANGE=1   ;cnf, PSO*7*358, remove S VALMBCK="R" so user goes back to selection list
"RTN","PSOREJP3",372,0)
 Q
"RTN","PSOREJP3",373,0)
 ;
"RTN","PSOREJP3",374,0)
PSOCOB(RX,FILL,REJ) ; Returns RXCOB indicator for Worklist
"RTN","PSOREJP3",375,0)
 N DATA1
"RTN","PSOREJP3",376,0)
 D GET^PSOREJU2(RX,FILL,.DATA1,REJ,1)
"RTN","PSOREJP3",377,0)
 I $G(DATA1(REJ,"COB"))="PRIMARY"  Q 1
"RTN","PSOREJP3",378,0)
 I $G(DATA1(REJ,"COB"))=""  Q 1
"RTN","PSOREJP3",379,0)
 Q 2
"RTN","PSOREJP3",380,0)
 ;
"RTN","PSOREJP3",381,0)
DC ;Discontinue TRICARE Rx
"RTN","PSOREJP3",382,0)
 N ACTION S ACTION="D"
"RTN","PSOREJP3",383,0)
 D FULL^VALM1
"RTN","PSOREJP3",384,0)
 S ACTION=$$DC^PSOREJU1(RX,ACTION)
"RTN","PSOREJP3",385,0)
 I ACTION="Q"!(ACTION="^") S VALMSG="NO ACTION TAKEN.",VALMBCK="R" Q
"RTN","PSOREJP3",386,0)
 S CHANGE=1
"RTN","PSOREJP3",387,0)
 Q
"RTN","PSOREJP3",388,0)
 ;
"RTN","PSOREJP3",389,0)
FILLTR ;TRICARE/CHAMPVA specific logic  ;cnf, PSO*7*358
"RTN","PSOREJP3",390,0)
 ;COM is not new'd so the variable can be used in FILL tag
"RTN","PSOREJP3",391,0)
 N CONT,PSOET,PSQSTR
"RTN","PSOREJP3",392,0)
 ;
"RTN","PSOREJP3",393,0)
FILLTR2 ;Use for looping if user enters ^ in required comment field  ;cnf, PSO*7*358
"RTN","PSOREJP3",394,0)
 ;
"RTN","PSOREJP3",395,0)
 ;if TRICARE/CHAMPVA, not payable, and no security key, quit
"RTN","PSOREJP3",396,0)
 ;reference to ^XUSEC( supported by IA 10076
"RTN","PSOREJP3",397,0)
 I '$D(^XUSEC("PSO TRICARE/CHAMPVA",DUZ)) S VALMSG="Action Requires <PSO TRICARE/CHAMPVA> security key",VALMBCK="R" Q
"RTN","PSOREJP3",398,0)
 ;
"RTN","PSOREJP3",399,0)
 ;if TRICARE/CHAMPVA, not payable, and user has security key, prompt to continue or not
"RTN","PSOREJP3",400,0)
 S PSQSTR="You are bypassing claims processing. Do you wish to continue"
"RTN","PSOREJP3",401,0)
 S CONT=$$YESNO(PSQSTR,"No")
"RTN","PSOREJP3",402,0)
 I (CONT=-1)!('CONT) S VALMSG="NO ACTION TAKEN.",VALMBCK="R" Q
"RTN","PSOREJP3",403,0)
 ;
"RTN","PSOREJP3",404,0)
 ;check for valid electronic signature
"RTN","PSOREJP3",405,0)
 I '$$SIG^PSOREJU1() S VALMBCK="R" Q                               ;quit if no valid electronic signature
"RTN","PSOREJP3",406,0)
 ;
"RTN","PSOREJP3",407,0)
 ;prompt user for required TRICARE/CHAMPVA Justification
"RTN","PSOREJP3",408,0)
 S COM=$$TCOM(RX,FILL) G:COM="^" FILLTR2                    ;loop back to "continue?" question if ^ entry
"RTN","PSOREJP3",409,0)
 ;
"RTN","PSOREJP3",410,0)
 ;audit log
"RTN","PSOREJP3",411,0)
 S PSOET=$$PSOET(RX,FILL)
"RTN","PSOREJP3",412,0)
 D AUDIT^PSOTRI(RX,FILL,,COM,$S(PSOET:"N",1:"R"),$S($G(PSOTRIC)=1:"T",$G(PSOTRIC)=2:"C",1:""))
"RTN","PSOREJP3",413,0)
 Q
"RTN","PSOREJP3",414,0)
 ;
"RTN","PSOREJP3",415,0)
TCOM(RX,RFL) ; - Ask for TRICARE or CHAMPVA Justification
"RTN","PSOREJP3",416,0)
 N COM,DIR,DIRUT,X
"RTN","PSOREJP3",417,0)
 W ! S DIR(0)="F^3:100" S DIR("A")=$$ELIGDISP^PSOREJP1(RX,RFL)_" Justification" D ^DIR
"RTN","PSOREJP3",418,0)
 S COM=X I $D(DIRUT) S COM="^"
"RTN","PSOREJP3",419,0)
 Q COM
"RTN","PSOREJP3",420,0)
 ;
"RTN","PSOREJP3",421,0)
PSOET(RX,FILL) ; Returns flag for TRICARE or CHAMPVA non-billable and no claim submitted
"RTN","PSOREJP3",422,0)
 ; Return 1 if rejection code is eT or eC (pseudo-reject code)
"RTN","PSOREJP3",423,0)
 ;        0 otherwise
"RTN","PSOREJP3",424,0)
 ;
"RTN","PSOREJP3",425,0)
 I '$G(RX) Q 0
"RTN","PSOREJP3",426,0)
 N X,TRIREJCD
"RTN","PSOREJP3",427,0)
 S X=0
"RTN","PSOREJP3",428,0)
 S TRIREJCD=$T(TRIREJCD+1),TRIREJCD=$P(TRIREJCD,";;",2)
"RTN","PSOREJP3",429,0)
 S X=$$FIND^PSOREJUT(RX,$G(FILL),,TRIREJCD,1) ; PSO*7*421 - Pass indicator to ignore ECME status
"RTN","PSOREJP3",430,0)
 Q X
"RTN","PSOREJP3",431,0)
 ;
"RTN","PSOREJP3",432,0)
TRIREJCD ;TRICARE or CHAMPVA Reject Code, non-billable Rx   ;cnf, PSO*7*358
"RTN","PSOREJP3",433,0)
 ;;eT,eC;;TRICARE or CHAMPVA pseudo reject codes referenced in ^PSOREJP3, ^PSOREJU4
"RTN","PSOREJP3",434,0)
 Q
"RTN","PSOREJP3",435,0)
 ;
"RTN","PSOREJP3",436,0)
SEND(OVRCOD,CLA,PA,PSOET) ; - Sends Claim to ECME and closes Reject
"RTN","PSOREJP3",437,0)
 N DIR,RESP,ALTXT,COM,SMA
"RTN","PSOREJP3",438,0)
 S DIR(0)="Y",DIR("A")="     Confirm",DIR("B")="YES"
"RTN","PSOREJP3",439,0)
 S DIR("A",1)="     When you confirm, a new claim will be submitted for"
"RTN","PSOREJP3",440,0)
 S DIR("A",2)="     the prescription and this REJECT will be marked"
"RTN","PSOREJP3",441,0)
 S DIR("A",3)="     resolved."
"RTN","PSOREJP3",442,0)
 S DIR("A",4)=" "
"RTN","PSOREJP3",443,0)
 W ! D ^DIR K DIR I $G(Y)=0!$D(DIRUT) S VALMBCK="R" Q
"RTN","PSOREJP3",444,0)
 S SMA=0 I $G(OVRCOD)]"",$G(CLA)]"",$G(PA)]"" S SMA=1
"RTN","PSOREJP3",445,0)
 S ALTXT=""
"RTN","PSOREJP3",446,0)
 I 'SMA D
"RTN","PSOREJP3",447,0)
 . S ALTXT="REJECT WORKLIST"
"RTN","PSOREJP3",448,0)
 . S:$G(OVRCOD)'="" ALTXT=ALTXT_"-DUR OVERRIDE CODES("_$TR(OVRCOD,"^","/")_")"
"RTN","PSOREJP3",449,0)
 . S:$G(CLA)]"" ALTXT=ALTXT_"-(CLARIF. CODE="_CLA_")"
"RTN","PSOREJP3",450,0)
 . S:$G(PA)]"" ALTXT=ALTXT_"-(PRIOR AUTH.="_$TR(PA,"^","/")_")"
"RTN","PSOREJP3",451,0)
 D ECMESND^PSOBPSU1(RX,FILL,,$S($G(PSOET):"RSNB",1:"ED"),$$GETNDC^PSONDCUT(RX,FILL),,,$G(OVRCOD),,.RESP,,ALTXT,$G(CLA),$G(PA),$$PSOCOB^PSOREJP3(RX,FILL,REJ))
"RTN","PSOREJP3",452,0)
 I $G(RESP) D  Q
"RTN","PSOREJP3",453,0)
 . W !!?10,"Claim could not be submitted. Please try again later!"
"RTN","PSOREJP3",454,0)
 . W !,?10,"Reason: ",$S($P(RESP,"^",2)="":"UNKNOWN",1:$P(RESP,"^",2)),$C(7) H 2
"RTN","PSOREJP3",455,0)
 ;
"RTN","PSOREJP3",456,0)
 ; Get the ePharmacy Response Pause and hang for that amount of time (default is 2 if not set)
"RTN","PSOREJP3",457,0)
 N PAUSE,IEN5286
"RTN","PSOREJP3",458,0)
 I $G(PSOSITE)="" N PSOSITE S PSOSITE=$$RXSITE^PSOBPSUT(RX,FILL)
"RTN","PSOREJP3",459,0)
 S IEN5286=$O(^PS(52.86,"B",+PSOSITE,""))
"RTN","PSOREJP3",460,0)
 S PAUSE=$$GET1^DIQ(52.86,IEN5286_",",6)
"RTN","PSOREJP3",461,0)
 I PAUSE="" S PAUSE=2
"RTN","PSOREJP3",462,0)
 I PAUSE H PAUSE
"RTN","PSOREJP3",463,0)
 ;
"RTN","PSOREJP3",464,0)
 I $$PTLBL^PSOREJP2(RX,FILL) D PRINT(RX,FILL)
"RTN","PSOREJP3",465,0)
 N PSOTRIC S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,FILL,PSOTRIC)
"RTN","PSOREJP3",466,0)
 I $$GET1^DIQ(52,RX,100,"I")=5&(PSOTRIC) D
"RTN","PSOREJP3",467,0)
 . Q:$$STATUS^PSOBPSUT(RX,FILL)'["PAYABLE"
"RTN","PSOREJP3",468,0)
 . N XXX S XXX=""
"RTN","PSOREJP3",469,0)
 . W !,"This prescription can be pulled early from suspense or the label will print"
"RTN","PSOREJP3",470,0)
 . W !,"when PRINT FROM SUSPENSE occurs.",!
"RTN","PSOREJP3",471,0)
 . R !,"Press enter to continue... ",XXX:60
"RTN","PSOREJP3",472,0)
 I $D(PSOSTFLT),PSOSTFLT'="B" S CHANGE=1
"RTN","PSOREJP3",473,0)
 Q
"RTN","PSOREJU1")
0^15^B163747187
"RTN","PSOREJU1",1,0)
PSOREJU1 ;BIRM/MFR - BPS (ECME) - Clinical Rejects Utilities (1) ;10/15/04
"RTN","PSOREJU1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,247,260,287,289,358,359,385,403,421,482**;DEC 1997;Build 44
"RTN","PSOREJU1",3,0)
 ;Reference to File 9002313.21 - BPS NCPDP PROFESSIONAL SERVICE CODE supported by IA 4712
"RTN","PSOREJU1",4,0)
 ;Reference to File 9002313.22 - BPS NCPDP RESULT OF SERVICE CODE supported by IA 4713
"RTN","PSOREJU1",5,0)
 ;Reference to File 9002313.23 - BPS NCPDP REASON FOR SERVICE CODE supported by IA 4714
"RTN","PSOREJU1",6,0)
 ;Reference to File 9002313.25 - BPS NCPDP SUBMISSION CLARIFICATION CODE supported by IA 5064
"RTN","PSOREJU1",7,0)
 ;Reference to File 9002313.26 - BPS NCPDP PRIOR AUTHORIZATION TYPE CODE supported by IA 5585 
"RTN","PSOREJU1",8,0)
 ;Reference to File 200 - NEW PERSON supported by IA 10060
"RTN","PSOREJU1",9,0)
 ;Reference to SIG^XUSESIG supported by IA 10050
"RTN","PSOREJU1",10,0)
 ;Reference to AMT^BPSBUTL supported by IA 4719
"RTN","PSOREJU1",11,0)
 ;
"RTN","PSOREJU1",12,0)
ACTION(RX,REJ,OPTS,DEF,RRR) ;
"RTN","PSOREJU1",13,0)
 ; Input:  (r) RX   - Rx IEN (#52) 
"RTN","PSOREJU1",14,0)
 ;         (r) REJ  - REJECT ID (IEN)
"RTN","PSOREJU1",15,0)
 ;         (r) OPTS - Available options ("QIDO" for QUIT/IGNORE/DISCONTINUE/OVERRIDE)
"RTN","PSOREJU1",16,0)
 ;         (o) DEF  - Default Option ("O", "I" or "Q")
"RTN","PSOREJU1",17,0)
 ;         (o) RRR - Reject Resolution Required information  Flag(0/1)^Threshold Amt^Gross Amt Due  (Default: 0)
"RTN","PSOREJU1",18,0)
 ;                   If Flag = 0, there is no Reject Resolution Required reject code.  Parameter added with PSO*421
"RTN","PSOREJU1",19,0)
 ; Output: ACTION: "I^Comments" - Ignore Reject
"RTN","PSOREJU1",20,0)
 ;                 "O^COD1^COD2^COD3" - Override with the Override codes COD1(Prof.),COD2(Reason) and COD3(Result)
"RTN","PSOREJU1",21,0)
 ;                 "D" - Discontinue
"RTN","PSOREJU1",22,0)
 ;                 "Q" - Quit
"RTN","PSOREJU1",23,0)
 ;                 "^" - Up-arrow entered or timed out
"RTN","PSOREJU1",24,0)
 ;
"RTN","PSOREJU1",25,0)
 N ACTION,COM,OVR,X,DIR,DIRUT,Y
"RTN","PSOREJU1",26,0)
 ;         
"RTN","PSOREJU1",27,0)
 I '$G(RX)!'$G(REJ) Q
"RTN","PSOREJU1",28,0)
 I '$G(PSONBILL) Q:'$D(^PSRX(RX,"REJ",REJ))
"RTN","PSOREJU1",29,0)
 ;
"RTN","PSOREJU1",30,0)
 ; - Display DUR/79 REJECT information and Reject Resolution Required REJECT information (RRR added PSO*421)
"RTN","PSOREJU1",31,0)
 D DISPLAY^PSOREJU3(RX,REJ,,RRR)
"RTN","PSOREJU1",32,0)
 ;
"RTN","PSOREJU1",33,0)
ASK K ACTION,DIR,DIRUT
"RTN","PSOREJU1",34,0)
 S DIR(0)="SO^",DIR("A")=""
"RTN","PSOREJU1",35,0)
 S:(OPTS["O") DIR(0)=DIR(0)_"O:(O)VERRIDE - RESUBMIT WITH OVERRIDE CODES;",DIR("A")=DIR("A")_"(O)verride,"
"RTN","PSOREJU1",36,0)
 S:(OPTS["I") DIR(0)=DIR(0)_"I:(I)GNORE - FILL Rx WITHOUT CLAIM SUBMISSION;",DIR("A")=DIR("A")_"(I)gnore,"
"RTN","PSOREJU1",37,0)
 S:(OPTS["D") DIR(0)=DIR(0)_"D:(D)iscontinue - DO NOT FILL PRESCRIPTION;",DIR("A")=DIR("A")_"(D)iscontinue,"
"RTN","PSOREJU1",38,0)
 S:(OPTS["Q") DIR(0)=DIR(0)_"Q:(Q)UIT - SEND TO WORKLIST (REQUIRES INTERVENTION);",DIR("A")=DIR("A")_"(Q)uit,"
"RTN","PSOREJU1",39,0)
 S $E(DIR(0),$L(DIR(0)))="",$E(DIR("A"),$L(DIR("A")))="",DIR("??")="^D HELP^PSOREJU2("""_OPTS_""")"
"RTN","PSOREJU1",40,0)
 S:$G(DEF)'="" DIR("B")=DEF D ^DIR I $D(DIRUT) W ! Q "Q"
"RTN","PSOREJU1",41,0)
 ;
"RTN","PSOREJU1",42,0)
 N PSOIT
"RTN","PSOREJU1",43,0)
 ;
"RTN","PSOREJU1",44,0)
 ; - STOP/QUIT Action
"RTN","PSOREJU1",45,0)
 S ACTION=Y I ACTION="Q" Q ACTION
"RTN","PSOREJU1",46,0)
 ;
"RTN","PSOREJU1",47,0)
 ; - IGNORE Action 
"RTN","PSOREJU1",48,0)
 K DIR,DIRUT,X
"RTN","PSOREJU1",49,0)
 ;
"RTN","PSOREJU1",50,0)
 S PSOIT=""
"RTN","PSOREJU1",51,0)
 I ACTION="I" S PSOIT=$$IGNORE(RX,RFL)
"RTN","PSOREJU1",52,0)
 I $P(PSOIT,"^")=0 D  G ASK
"RTN","PSOREJU1",53,0)
 . I $P(PSOIT,"^",2)'="" D
"RTN","PSOREJU1",54,0)
 . . W $C(7),!,"Gross Amount Due is $"_$P(PSOIT,"^",2)_". IGNORE requires EPHARMACY SITE MANAGER key.",!
"RTN","PSOREJU1",55,0)
 ;
"RTN","PSOREJU1",56,0)
 ;PSO*7.0*358, add logic for TRICARE/CHAMPVA ignore
"RTN","PSOREJU1",57,0)
 I PSOTRIC,ACTION="I",'$$CONT W $C(7),!," ACTION NOT TAKEN!",! H 1 G ASK
"RTN","PSOREJU1",58,0)
 ;
"RTN","PSOREJU1",59,0)
 I ACTION="I" S:'PSOTRIC COM=$$COM() S:PSOTRIC COM=$$TCOM^PSOREJP3(RX,RFL) G ASK:COM="^" G ASK:'$$SIG() S ACTION=ACTION_"^"_COM
"RTN","PSOREJU1",60,0)
 ;
"RTN","PSOREJU1",61,0)
 ; - OVERRIDE Action
"RTN","PSOREJU1",62,0)
 I ACTION="O" D  G ASK:OVR="^"
"RTN","PSOREJU1",63,0)
 . S OVR=$$OVR() S ACTION=ACTION_"^"_OVR
"RTN","PSOREJU1",64,0)
 ;
"RTN","PSOREJU1",65,0)
DC1 ;Discontinue
"RTN","PSOREJU1",66,0)
 I ACTION="D" S ACTION=$$DC(RX,ACTION,1) I $D(DIRUT) S ACTION="D" D DISPLAY^PSOREJU3(RX,REJ) G ASK
"RTN","PSOREJU1",67,0)
 ;
"RTN","PSOREJU1",68,0)
 Q ACTION
"RTN","PSOREJU1",69,0)
 ;
"RTN","PSOREJU1",70,0)
DC(RX,ACTION,DC1) ; - Discontinue inside and outside call
"RTN","PSOREJU1",71,0)
 ; DC1 Indicates that DIRUT needs to be returned if applicable
"RTN","PSOREJU1",72,0)
 S DC1=+$G(DC1)
"RTN","PSOREJU1",73,0)
 N RXN,MSG,REA,DA,PSCAN,RXNUM
"RTN","PSOREJU1",74,0)
 S DA=RX,RXNUM=""
"RTN","PSOREJU1",75,0)
 ; Variable PSOTRIC is used by NOOR^PSOCAN4 to determine the default for the nature of order prompt
"RTN","PSOREJU1",76,0)
 I '$D(PSOTRIC) N PSOTRIC S PSOTRIC=$$TRIC^PSOREJP1(RX)
"RTN","PSOREJU1",77,0)
 N VALMBCK,PS
"RTN","PSOREJU1",78,0)
 S VALMBCK="",PS="Discontinue"
"RTN","PSOREJU1",79,0)
 D YN^PSOCAN I VALMBCK="R" W $C(7)," ACTION NOT TAKEN!",! H 1 S PSORX("DFLG")=1,ACTION="Q" S:DC1 DIRUT=1 Q ACTION
"RTN","PSOREJU1",80,0)
 N PKIR
"RTN","PSOREJU1",81,0)
 K DIR
"RTN","PSOREJU1",82,0)
 D COM^PSOCAN1 I $D(DIRUT) W $C(7)," ACTION NOT TAKEN!",! H 1 S PSORX("DFLG")=1,ACTION="Q" Q ACTION
"RTN","PSOREJU1",83,0)
 N PSOCANRD S PSOCANRD=$P(^PSRX(DA,0),"^",4)
"RTN","PSOREJU1",84,0)
 D REQ^PSOCAN4 I $D(DIRUT) W $C(7)," ACTION NOT TAKEN!",! H 1 S PSORX("DFLG")=1,ACTION="Q" Q ACTION
"RTN","PSOREJU1",85,0)
 S REA="C",RXNUM=$P(^PSRX(DA,0),"^")
"RTN","PSOREJU1",86,0)
 S MSG="Discontinued "_$S($G(PSOFDR):" from Reject Processing Screen",1:"")
"RTN","PSOREJU1",87,0)
 S PSCAN(RXNUM)=DA_"^C"
"RTN","PSOREJU1",88,0)
 D CAN^PSOCAN
"RTN","PSOREJU1",89,0)
 ;
"RTN","PSOREJU1",90,0)
 ; DMB-12/12/2011 - Removed setting PSOQFLAG.  Also fixed $$GET1 to use internal IEN.  I am not sure
"RTN","PSOREJU1",91,0)
 ; if these next two lines are even needed. It especially seems a bit premature at this point to
"RTN","PSOREJU1",92,0)
 ; remove the RX from the label list when the Rx probably hasn't been added yet.  In addition, PSORXL
"RTN","PSOREJU1",93,0)
 ; has code to remove discontinued RXs from the label list (using the ECME^PSORXL1 call).
"RTN","PSOREJU1",94,0)
 S PSOLST(1)=52_"^"_DA_"^"_$$GET1^DIQ(52,DA,100),ORN=1
"RTN","PSOREJU1",95,0)
 N PSOCKDC S PSOCKDC=1 D ECME^PSORXL1 I '$G(PPL) S PPL=""  ;remove rx from label print
"RTN","PSOREJU1",96,0)
 Q ACTION
"RTN","PSOREJU1",97,0)
 ;
"RTN","PSOREJU1",98,0)
CONT() ;- Ask to continue for bypassing claims processing  ;PSO*7.0*358
"RTN","PSOREJU1",99,0)
 N DIR,DIRUT,Y
"RTN","PSOREJU1",100,0)
 S DIR(0)="Y",DIR("A")="You are bypassing claims processing. Do you wish to continue",DIR("B")="NO"
"RTN","PSOREJU1",101,0)
 D ^DIR I $D(DIRUT) S Y=0
"RTN","PSOREJU1",102,0)
 Q $G(Y)
"RTN","PSOREJU1",103,0)
 ;
"RTN","PSOREJU1",104,0)
SIG() ; - Get electronic signature
"RTN","PSOREJU1",105,0)
 N CODE,X,X1,Y
"RTN","PSOREJU1",106,0)
 S CODE=$P($G(^VA(200,DUZ,20)),U,4),Y=0 I '$L(CODE) D  Q Y
"RTN","PSOREJU1",107,0)
 . W $C(7),!,"You do not have an electronic signature code."
"RTN","PSOREJU1",108,0)
 . W !,"Please contact your IRM office." H 2
"RTN","PSOREJU1",109,0)
 D SIG^XUSESIG S Y=(X1'="")
"RTN","PSOREJU1",110,0)
 Q Y
"RTN","PSOREJU1",111,0)
 ;
"RTN","PSOREJU1",112,0)
COM() ; - Ask for CLOSE comments
"RTN","PSOREJU1",113,0)
 K COM,DIR,DIRUT,X
"RTN","PSOREJU1",114,0)
 W ! S DIR(0)="F^3:100" S DIR("A")="Comments" D ^DIR
"RTN","PSOREJU1",115,0)
 S COM=X I $D(DIRUT) S COM="^"
"RTN","PSOREJU1",116,0)
 Q COM
"RTN","PSOREJU1",117,0)
 ;
"RTN","PSOREJU1",118,0)
OVR() ; - Ask for OVERRIDE codes
"RTN","PSOREJU1",119,0)
 ; Called by ASK above (Reject Notification Screen)
"RTN","PSOREJU1",120,0)
 N COD1,COD2,COD3,DIR,DIRUT W !
"RTN","PSOREJU1",121,0)
 S COD1=$$OVRCOD(1,$$GET1^DIQ(52.25,REJ_","_RX,14)) I COD1="^"!(COD1="") Q "^"
"RTN","PSOREJU1",122,0)
 S COD2=$$OVRCOD(2) I COD2="^" Q COD2
"RTN","PSOREJU1",123,0)
 S COD3=$$OVRCOD(3) I COD3="^" Q COD3
"RTN","PSOREJU1",124,0)
 ;
"RTN","PSOREJU1",125,0)
 D OVRDSP^PSOREJU1(COD1_"^"_COD2_"^"_COD3) W !
"RTN","PSOREJU1",126,0)
 ;
"RTN","PSOREJU1",127,0)
 S DIR(0)="Y",DIR("A")="     Confirm? ",DIR("B")="YES"
"RTN","PSOREJU1",128,0)
 D ^DIR I $G(Y)=0!$D(DIRUT) Q "^"
"RTN","PSOREJU1",129,0)
 ;
"RTN","PSOREJU1",130,0)
 Q (COD1_"^"_COD2_"^"_COD3)
"RTN","PSOREJU1",131,0)
 ;
"RTN","PSOREJU1",132,0)
OVRDSP(LST) ; - Display the Override Codes
"RTN","PSOREJU1",133,0)
 N I W !
"RTN","PSOREJU1",134,0)
 F I=1:1:3 D
"RTN","PSOREJU1",135,0)
 . W !?5,$S(I=1:"Reason for Service Code  : ",I=2:"Professional Service Code: ",1:"Result of Service Code   : ")
"RTN","PSOREJU1",136,0)
 . W $E($$OVRX(I,$P(LST,"^",I)),1,48)
"RTN","PSOREJU1",137,0)
 Q
"RTN","PSOREJU1",138,0)
 ;
"RTN","PSOREJU1",139,0)
CLA() ; - Ask for up to 3 Clarification Codes
"RTN","PSOREJU1",140,0)
 ; Called by SMA^PSOREJP1 (SMA action) and CLA^PSOREJP1 (CLA action)
"RTN","PSOREJU1",141,0)
 N DIC,X,Y,PSOSCC,DTOUT,DUOUT,PSOQ,PSOI,I,DUP
"RTN","PSOREJU1",142,0)
 S DIC(0)="QEAM",DIC=9002313.25,PSOQ=0,PSOSCC=""
"RTN","PSOREJU1",143,0)
 F PSOI=1:1:3 Q:PSOQ  S DIC("A")="Submission Clarification Code "_PSOI_": " D CLADIC
"RTN","PSOREJU1",144,0)
 Q $S(PSOQ=1:"^",1:PSOSCC)
"RTN","PSOREJU1",145,0)
 ;
"RTN","PSOREJU1",146,0)
CLADIC ;
"RTN","PSOREJU1",147,0)
 ; DIC variables, PSOI, PSOSCC, and DUP newed and set by CLA
"RTN","PSOREJU1",148,0)
 D ^DIC
"RTN","PSOREJU1",149,0)
 I ($D(DUOUT))!($D(DTOUT)) S PSOQ=1 Q
"RTN","PSOREJU1",150,0)
 I Y=-1 S PSOQ=2 Q
"RTN","PSOREJU1",151,0)
 S DUP=0
"RTN","PSOREJU1",152,0)
 F I=1:1:PSOI I $P(PSOSCC,"~",I)=$P(Y,U,2) S DUP=1 Q
"RTN","PSOREJU1",153,0)
 I DUP=1 W "  Duplicates not allowed",! G CLADIC
"RTN","PSOREJU1",154,0)
 S $P(PSOSCC,"~",PSOI)=$P(Y,U,2)
"RTN","PSOREJU1",155,0)
 Q
"RTN","PSOREJU1",156,0)
 ;
"RTN","PSOREJU1",157,0)
HDLG(RX,RFL,CODES,FROM,OPTS,DEF) ; - REJECT Handling
"RTN","PSOREJU1",158,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOREJU1",159,0)
 ;       (o) RFL  - Refill # (Default: most recent)
"RTN","PSOREJU1",160,0)
 ;       (r) CODES - List of REJECT CODES to be handled separated by commas (default is "79,88")
"RTN","PSOREJU1",161,0)
 ;       (r) FROM  - Same values as BWHERE param. in the EN^BPSNCPDP api
"RTN","PSOREJU1",162,0)
 ;       (r) OPTS  - Available options ("IOQ" for IGNORE/OVERRIDE/QUIT)
"RTN","PSOREJU1",163,0)
 ;       (o) DEF   - Default Option ("O", "I" or "Q")
"RTN","PSOREJU1",164,0)
 ;Output: ACTION   - "O"-Override, "I"-Ignore,"Q"-Quit,"D"-Discontinue,"^"-Up-arrow entered
"RTN","PSOREJU1",165,0)
 ;       
"RTN","PSOREJU1",166,0)
 N REJDATA,NEWDATA,ACTION,REJ,RESP,RESPI,REJI,PSOTRIC,RESPREJ,REJIEN,RRR
"RTN","PSOREJU1",167,0)
 S ACTION="",RRR=0
"RTN","PSOREJU1",168,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJU1",169,0)
 ;
"RTN","PSOREJU1",170,0)
 ; Get all open/unresolved rejects
"RTN","PSOREJU1",171,0)
 I '$$FIND^PSOREJUT(RX,RFL,.REJDATA) Q ACTION
"RTN","PSOREJU1",172,0)
 ;
"RTN","PSOREJU1",173,0)
 S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOREJU1",174,0)
 ;
"RTN","PSOREJU1",175,0)
 ; Check for TRICARE/CHAMPVA open rejects, PSO*421
"RTN","PSOREJU1",176,0)
 I PSOTRIC D HDLGTC(.REJDATA,.OPTS,.DEF,.CODES,DUZ)
"RTN","PSOREJU1",177,0)
 ;
"RTN","PSOREJU1",178,0)
 ; In progress TRICARE/CHAMPVA Rx not allowed to be filled
"RTN","PSOREJU1",179,0)
 I PSOTRIC,$$STATUS^PSOBPSUT(RX,RFL)["IN PROGRESS" D TRICCHK^PSOREJU3(RX,RFL,"",FROM) Q ACTION
"RTN","PSOREJU1",180,0)
 ;
"RTN","PSOREJU1",181,0)
 ; Check for VET with open RRR rejects, PSO*421
"RTN","PSOREJU1",182,0)
 I 'PSOTRIC D HDLGRRR(.REJDATA,.OPTS,.DEF,.RRR,.CODES)
"RTN","PSOREJU1",183,0)
 ;
"RTN","PSOREJU1",184,0)
 ; Check for open rejects that match CODES
"RTN","PSOREJU1",185,0)
 I '$$FIND^PSOREJUT(RX,RFL,.REJDATA,CODES) Q ACTION
"RTN","PSOREJU1",186,0)
 ;
"RTN","PSOREJU1",187,0)
 ; Get reject for last response, if multiple responses exist.
"RTN","PSOREJU1",188,0)
 S REJ=$O(REJDATA(""))
"RTN","PSOREJU1",189,0)
 S ACTION=$$ACTION(RX,REJ,OPTS,$G(DEF),RRR)
"RTN","PSOREJU1",190,0)
 ; Loop through each REJECT IEN and perform action
"RTN","PSOREJU1",191,0)
 S REJI="" F  S REJI=$O(REJDATA(REJI)) Q:REJI=""  D
"RTN","PSOREJU1",192,0)
 . I $P(ACTION,"^")="I" D CLOSE^PSOREJUT(RX,RFL,REJI,DUZ,6,$P(ACTION,"^",2),"","","","","",1) D AUDIT^PSOTRI(RX,RFL,,$P(ACTION,"^",2),$S($$PSOET^PSOREJP3(RX,RFL):"N",1:"R"),$S(PSOTRIC=1:"T",PSOTRIC=2:"C",1:""))
"RTN","PSOREJU1",193,0)
 . I $P(ACTION,"^")="O" D CLOSE^PSOREJUT(RX,RFL,REJI,DUZ,1,,$P(ACTION,"^",2,4))
"RTN","PSOREJU1",194,0)
 . I $P(ACTION,"^")="D" D CLOSE^PSOREJUT(RX,RFL,REJI,DUZ,7,,$P(ACTION,"^",2))
"RTN","PSOREJU1",195,0)
 ; Resubmit claim if overriding
"RTN","PSOREJU1",196,0)
 I $P(ACTION,"^")="O" D
"RTN","PSOREJU1",197,0)
 . D ECMESND^PSOBPSU1(RX,RFL,,FROM,$$GETNDC^PSONDCUT(RX,RFL),,,$P(ACTION,"^",2,4),,.RESP)
"RTN","PSOREJU1",198,0)
 . I $G(RESP) D  Q
"RTN","PSOREJU1",199,0)
 . . W !!?10,"Claim could not be submitted. Please try again later!"
"RTN","PSOREJU1",200,0)
 . . W !,?10,"Reason: ",$S($P(RESP,"^",2)="":"UNKNOWN",1:$P(RESP,"^",2)),$C(7)
"RTN","PSOREJU1",201,0)
 . ; Get all open/unresolved rejects, PSO*421
"RTN","PSOREJU1",202,0)
 . K NEWDATA I $$FIND^PSOREJUT(RX,RFL,.NEWDATA) D  I ACTION="Q"!(ACTION="^") Q
"RTN","PSOREJU1",203,0)
 . . ;For TRICARE/CHAMPVA, override OPTS and DEF if necessary, PSO*421 
"RTN","PSOREJU1",204,0)
 . . I PSOTRIC D HDLGTC(.NEWDATA,.OPTS,.DEF,.CODES,DUZ)
"RTN","PSOREJU1",205,0)
 . . ;For Vet, override OPTS, DEF and set up RRR variable if necessary, PSO*421
"RTN","PSOREJU1",206,0)
 . . I 'PSOTRIC D HDLGRRR(.NEWDATA,.OPTS,.DEF,.RRR,.CODES)
"RTN","PSOREJU1",207,0)
 . . S OPTS=$TR(OPTS,"O")  ; Remove the "O" to prevent the user from picking the override option repeatedly
"RTN","PSOREJU1",208,0)
 . . I '$$FIND^PSOREJUT(RX,RFL,.NEWDATA,CODES) Q
"RTN","PSOREJU1",209,0)
 . . S ACTION=$$ACTION(RX,$O(NEWDATA("")),OPTS,$G(DEF),RRR) I ACTION="Q"!(ACTION="^") Q
"RTN","PSOREJU1",210,0)
 . . I $P(ACTION,"^")="I" D CLOSE^PSOREJUT(RX,RFL,REJ,DUZ,6,$P(ACTION,"^",2),"","","","","",1) D AUDIT^PSOTRI(RX,RFL,,$P(ACTION,"^",2),"R",$S(PSOTRIC=1:"T",PSOTRIC=2:"C",1:""))
"RTN","PSOREJU1",211,0)
 . . I $P(ACTION,"^")="O" D CLOSE^PSOREJUT(RX,RFL,REJ,DUZ,1,,$P(ACTION,"^",2,4))
"RTN","PSOREJU1",212,0)
 Q ACTION
"RTN","PSOREJU1",213,0)
 ;
"RTN","PSOREJU1",214,0)
HDLGRRR(RRRDATA,OPTS,DEF,RRR,CODES)  ; Check for VET with open RRR rejects, new tag PSO*421
"RTN","PSOREJU1",215,0)
 ; Input: (r) RRRDATA - reject array returned by $$FIND 
"RTN","PSOREJU1",216,0)
 ; (r) OPTS  - Available options ("QIDO" for QUIT/IGNORE/DISCONTINUE/OVERRIDE)
"RTN","PSOREJU1",217,0)
 ;           - possibly modified by subroutine
"RTN","PSOREJU1",218,0)
 ; (r) DEF   - Default Option ("O", "I" or "Q")
"RTN","PSOREJU1",219,0)
 ;           - possibly modified by subroutine
"RTN","PSOREJU1",220,0)
 ; (r) CODES - Open reject codes
"RTN","PSOREJU1",221,0)
 ;           - modified by subroutine
"RTN","PSOREJU1",222,0)
 ; Output:(r) RRR   - Reject Resolution Required information  Flag(0/1)^Threshold Amt^Gross Amt Due
"RTN","PSOREJU1",223,0)
 ;           - only return a value for RRR if not 79 or 88
"RTN","PSOREJU1",224,0)
 ;
"RTN","PSOREJU1",225,0)
 N REJIEN,EX7988,SAVECODES
"RTN","PSOREJU1",226,0)
 S SAVECODES=CODES
"RTN","PSOREJU1",227,0)
 S (REJIEN,CODES)="",RRR=0,EX7988=0
"RTN","PSOREJU1",228,0)
 ; Set CODES with all open RRR, 79, and 88 reject codes for RX/Fill returned from $$FIND
"RTN","PSOREJU1",229,0)
 F  S REJIEN=$O(RRRDATA(REJIEN)) Q:(REJIEN="")!EX7988  D
"RTN","PSOREJU1",230,0)
 . ;find RRR reject
"RTN","PSOREJU1",231,0)
 . I RRRDATA(REJIEN,"RRR FLAG")="YES" S RRR=1_U_RRRDATA(REJIEN,"RRR THRESHOLD AMT")_U_RRRDATA(REJIEN,"RRR GROSS AMT DUE"),CODES=RRRDATA(REJIEN,"CODE")_","_CODES Q
"RTN","PSOREJU1",232,0)
 . ; find 79 or 88 reject, if 79 or 88 is present then don't set up RRR for display on reject notification screen (EX7988=1)
"RTN","PSOREJU1",233,0)
 . I "/79/88/"[("/"_RRRDATA(REJIEN,"CODE")_"/") S RRR=0,EX7988=1
"RTN","PSOREJU1",234,0)
 I 'RRR S CODES=SAVECODES Q  ;if not RRR, don't override CODES
"RTN","PSOREJU1",235,0)
 ;Strip the last comma off CODES
"RTN","PSOREJU1",236,0)
 I $E(CODES,$L(CODES))="," S CODES=$E(CODES,1,$L(CODES)-1)
"RTN","PSOREJU1",237,0)
 ; Set action prompt. 
"RTN","PSOREJU1",238,0)
 S OPTS="IQ",DEF="Q"
"RTN","PSOREJU1",239,0)
 Q
"RTN","PSOREJU1",240,0)
 ;
"RTN","PSOREJU1",241,0)
HDLGTC(REJDATA,OPTS,DEF,CODES,DUZ) ; Check for TRICARE/CHAMPVA open rejects, new tag PSO*421
"RTN","PSOREJU1",242,0)
 ; Input: (r) REJDATA - reject array returned by $$FIND 
"RTN","PSOREJU1",243,0)
 ; (r) OPTS  - Available options ("QIDO" for QUIT/IGNORE/DISCONTINUE/OVERRIDE)
"RTN","PSOREJU1",244,0)
 ;           - possibly modified by subroutine
"RTN","PSOREJU1",245,0)
 ; (r) DEF   - Default Option ("O", "I" or "Q")
"RTN","PSOREJU1",246,0)
 ;           - possibly modified by subroutine
"RTN","PSOREJU1",247,0)
 ; (r) CODES - Open reject codes
"RTN","PSOREJU1",248,0)
 ;           - modified by subroutine
"RTN","PSOREJU1",249,0)
 ; (r) DUZ   - Internal IEN of user
"RTN","PSOREJU1",250,0)
 N REJIEN
"RTN","PSOREJU1",251,0)
 S (REJIEN,CODES)=""
"RTN","PSOREJU1",252,0)
 ; Set CODES with all open reject codes for RX/Fill returned from $$FIND
"RTN","PSOREJU1",253,0)
 F  S REJIEN=$O(REJDATA(REJIEN)) Q:REJIEN=""  S CODES=REJDATA(REJIEN,"CODE")_","_CODES
"RTN","PSOREJU1",254,0)
 ; Strip the last comma off CODES
"RTN","PSOREJU1",255,0)
 I $E(CODES,$L(CODES))="," S CODES=$E(CODES,1,$L(CODES)-1)
"RTN","PSOREJU1",256,0)
 ; Set action prompt.
"RTN","PSOREJU1",257,0)
 S OPTS=$S(CODES["88"!(CODES["79"):"ODQ",1:"DQ"),DEF="Q"
"RTN","PSOREJU1",258,0)
 ; Include the Ignore action prompt if user holds key.
"RTN","PSOREJU1",259,0)
 I $D(^XUSEC("PSO TRICARE/CHAMPVA",DUZ)) S OPTS=OPTS_"I"
"RTN","PSOREJU1",260,0)
 Q
"RTN","PSOREJU1",261,0)
 ;
"RTN","PSOREJU1",262,0)
OVRX(TYPE,CODE) ; - Returns the extended code/description of the NCPDP DUR override codes
"RTN","PSOREJU1",263,0)
 ; Input: (r) TYPE  - 1 (REASON FOR SERVICE), 2 (PROFESSIONAL SERVICE) or 3 (RESULT OF SERVICE)
"RTN","PSOREJU1",264,0)
 ;        (r) CODE  - Table IEN
"RTN","PSOREJU1",265,0)
 ; Output: "CODE - DESCRIPTION"
"RTN","PSOREJU1",266,0)
 N FILE,DIC,X,Y
"RTN","PSOREJU1",267,0)
 S FILE=9002313+$S(TYPE=1:.23,TYPE=2:.21,1:.22)
"RTN","PSOREJU1",268,0)
 S DIC=FILE,X=CODE D ^DIC
"RTN","PSOREJU1",269,0)
 I TYPE=1 Q CODE_" - "_$$GET1^DIQ(9002313.23,+Y,1)
"RTN","PSOREJU1",270,0)
 I TYPE=2 Q CODE_" - "_$$GET1^DIQ(9002313.21,+Y,1)
"RTN","PSOREJU1",271,0)
 I TYPE=3 Q CODE_" - "_$$GET1^DIQ(9002313.22,+Y,1)
"RTN","PSOREJU1",272,0)
 Q ""
"RTN","PSOREJU1",273,0)
 ;
"RTN","PSOREJU1",274,0)
 ;
"RTN","PSOREJU1",275,0)
OVRCOD(TYPE,VALUE) ; - Prompt for NCPDP Override Codes
"RTN","PSOREJU1",276,0)
 ; Called by OVR above (reject notification screen), OVR^PSOREJP1 (OVR action)
"RTN","PSOREJU1",277,0)
 N DIC,DTOUT,DUOUT,FILE,PRPT,X,Y
"RTN","PSOREJU1",278,0)
 I TYPE=1 S FILE=9002313.23,PRPT="Reason for Service Code  : "
"RTN","PSOREJU1",279,0)
 I TYPE=2 S FILE=9002313.21,PRPT="Professional Service Code: "
"RTN","PSOREJU1",280,0)
 I TYPE=3 S FILE=9002313.22,PRPT="Result of Service Code   : "
"RTN","PSOREJU1",281,0)
 S DIC=FILE,DIC(0)="AQE",DIC("A")=PRPT
"RTN","PSOREJU1",282,0)
 I $G(VALUE)'="" S DIC("B")=VALUE
"RTN","PSOREJU1",283,0)
 D ^DIC
"RTN","PSOREJU1",284,0)
 I $D(DTOUT)!$D(DUOUT) Q "^"
"RTN","PSOREJU1",285,0)
 ; At second and third prompts of the set, user entering no data is like exiting the option
"RTN","PSOREJU1",286,0)
 I TYPE'=1,Y<0 Q "^"
"RTN","PSOREJU1",287,0)
 Q $P(Y,"^",2)
"RTN","PSOREJU1",288,0)
 ; 
"RTN","PSOREJU1",289,0)
OVRCOD1(VALUE,NUM) ; - Prompt for Reason for Service Code - PSO*7*421
"RTN","PSOREJU1",290,0)
 ; Called by SMAOVR (SMA action) only
"RTN","PSOREJU1",291,0)
 N DIR,DTOUT,DTOUT,DIRUT,DIROUT,KFLAG,X,Y
"RTN","PSOREJU1",292,0)
 S DIR(0)="P^9002313.23:AOEMZ"
"RTN","PSOREJU1",293,0)
 S DIR("A")="Reason for Service Code "_NUM_"  "
"RTN","PSOREJU1",294,0)
 S DIR("B")=VALUE
"RTN","PSOREJU1",295,0)
 S DIR("PRE")="I X=""@"" S X=""^"",KFLAG=1"
"RTN","PSOREJU1",296,0)
 S KFLAG=0
"RTN","PSOREJU1",297,0)
 D ^DIR Q:KFLAG "@"
"RTN","PSOREJU1",298,0)
 I $D(DIRUT)!$D(DIROUT) Q "^"
"RTN","PSOREJU1",299,0)
 Q $P(Y,"^",2)
"RTN","PSOREJU1",300,0)
 ;
"RTN","PSOREJU1",301,0)
OVRCOD2(TYPE,VALUE,NUM) ; - Prompt for NCPDP Override Codes - PSO*7*421
"RTN","PSOREJU1",302,0)
 ; Called by SMAOVR (SMA action) only
"RTN","PSOREJU1",303,0)
 N DIC,DTOUT,DUOUT,FILE,PRPT,X,Y
"RTN","PSOREJU1",304,0)
 I TYPE=1 S FILE=9002313.23,PRPT="Reason for Service Code "_NUM_"  : "
"RTN","PSOREJU1",305,0)
 I TYPE=2 S FILE=9002313.21,PRPT="Professional Service Code "_NUM_": "
"RTN","PSOREJU1",306,0)
 I TYPE=3 S FILE=9002313.22,PRPT="Result of Service Code  "_NUM_"  : "
"RTN","PSOREJU1",307,0)
 S DIC=FILE,DIC(0)="AQE",DIC("A")=PRPT
"RTN","PSOREJU1",308,0)
 I $G(VALUE)'="" S DIC("B")=VALUE
"RTN","PSOREJU1",309,0)
 D ^DIC
"RTN","PSOREJU1",310,0)
 I $D(DTOUT)!$D(DUOUT) Q "^"
"RTN","PSOREJU1",311,0)
 ; At second and third prompts of the set, user entering no data is like exiting the option
"RTN","PSOREJU1",312,0)
 I TYPE'=1,Y<0 Q "^"
"RTN","PSOREJU1",313,0)
 Q $P(Y,"^",2)
"RTN","PSOREJU1",314,0)
 ;
"RTN","PSOREJU1",315,0)
SEL(FIELD,FILE,ARRAY,DEFAULT) ; - Provides field selection (one, multiple or ALL)
"RTN","PSOREJU1",316,0)
 N DIC,DTOUT,DUOUT,QT,Y,X
"RTN","PSOREJU1",317,0)
 W !!,"You may select a single or multiple "_FIELD_"S,"
"RTN","PSOREJU1",318,0)
 W !,"or enter ^ALL to select all "_FIELD_"S.",!
"RTN","PSOREJU1",319,0)
 K ARRAY S DIC=FILE,DIC(0)="QEZAM",DIC("A")=FIELD_": "
"RTN","PSOREJU1",320,0)
 I $G(DEFAULT)'="" S DIC("B")=DEFAULT
"RTN","PSOREJU1",321,0)
 F  D ^DIC Q:X=""  D  Q:$G(QT)
"RTN","PSOREJU1",322,0)
 . I $$UP^XLFSTR(X)="^ALL" K ARRAY S ARRAY="ALL",QT=1 Q
"RTN","PSOREJU1",323,0)
 . I $D(DTOUT)!$D(DUOUT) K ARRAY S ARRAY="^",QT=1 Q
"RTN","PSOREJU1",324,0)
 . W "   ",$P(Y,"^",2),$S($D(ARRAY(+Y)):"       (already selected)",1:"")
"RTN","PSOREJU1",325,0)
 . W ! S ARRAY(+Y)="",DIC("A")="ANOTHER ONE: " K DIC("B")
"RTN","PSOREJU1",326,0)
 I '$D(ARRAY) S ARRAY="^"
"RTN","PSOREJU1",327,0)
 Q
"RTN","PSOREJU1",328,0)
 ;
"RTN","PSOREJU1",329,0)
LMREJ(RX,RFL,MSG,BCK) ; Used by ListManager hidden actions to detect unresolved 3rd Party Rejects
"RTN","PSOREJU1",330,0)
 ;Input:  (r) RX   - Rx IEN (#52)
"RTN","PSOREJU1",331,0)
 ;        (o) RFL  - Refill # (Default: most recent)
"RTN","PSOREJU1",332,0)
 ;Output: (o) MSG  - Usually this will be used to set VALMSG variable, which should be passed in by ref.
"RTN","PSOREJU1",333,0)
 ;        (o) BCK  - This will be used to set VALMBCK variable, which should be passed in by ref.
"RTN","PSOREJU1",334,0)
 ;
"RTN","PSOREJU1",335,0)
 I '$D(^PSRX(+RX)) Q 0
"RTN","PSOREJU1",336,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJU1",337,0)
 I $$FIND^PSOREJUT(RX,RFL) D  Q 1
"RTN","PSOREJU1",338,0)
 . S MSG="NOT ALLOWED! Rx has OPEN 3rd Party Payer Reject.",BCK="R" W $C(7),$C(7)
"RTN","PSOREJU1",339,0)
 Q 0
"RTN","PSOREJU1",340,0)
 ;
"RTN","PSOREJU1",341,0)
DUP(RX,RSP,CLOSED) ; Checks if REJECT has already been logged in the PRESCRIPTION file
"RTN","PSOREJU1",342,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJU1",343,0)
 ;         (o) RSP - Response IEN
"RTN","PSOREJU1",344,0)
 ;         (o) CLOSED - If CLOSED=1 and Reject is closed, then do not count as duplicate
"RTN","PSOREJU1",345,0)
 ; Output:     DUP - 1: Already logged (duplicate) 
"RTN","PSOREJU1",346,0)
 ;                   0: Not yet logged on PRESCRIPTION file
"RTN","PSOREJU1",347,0)
 N DUP,IDX
"RTN","PSOREJU1",348,0)
 I $G(CLOSED)="" S CLOSED=0
"RTN","PSOREJU1",349,0)
 S (DUP,IDX)=0
"RTN","PSOREJU1",350,0)
 F  S IDX=$O(^PSRX(RX,"REJ",IDX)) Q:'IDX  D  Q:DUP
"RTN","PSOREJU1",351,0)
 . I +RSP=+$$GET1^DIQ(52.25,IDX_","_RX,16,"I") S DUP=1
"RTN","PSOREJU1",352,0)
 . I CLOSED=1,+$$GET1^DIQ(52.25,IDX_","_RX,9,"I")=1 S DUP=0
"RTN","PSOREJU1",353,0)
 Q DUP
"RTN","PSOREJU1",354,0)
 ;
"RTN","PSOREJU1",355,0)
OTH(CODE,LST) ; Removes the current Reject code from the list
"RTN","PSOREJU1",356,0)
 ; Input:  (r) CODE  - Current Reject Code (79 or 88)
"RTN","PSOREJU1",357,0)
 ;         (o) LST   - List of all Reject codes with response (comma separated)
"RTN","PSOREJU1",358,0)
 ; Output:     OTH   - List of OTHER Reject codes (w/out 79 or 88)
"RTN","PSOREJU1",359,0)
 ;
"RTN","PSOREJU1",360,0)
 N I,OTH
"RTN","PSOREJU1",361,0)
 F I=1:1:$L(LST,",") D
"RTN","PSOREJU1",362,0)
 . I $P(LST,",",I)]"",$P(LST,",",I)'=CODE S OTH=$G(OTH)_","_$P(LST,",",I)
"RTN","PSOREJU1",363,0)
 S $E(OTH)=""
"RTN","PSOREJU1",364,0)
 Q OTH
"RTN","PSOREJU1",365,0)
 ;
"RTN","PSOREJU1",366,0)
DAT(DAT) ; - External Date
"RTN","PSOREJU1",367,0)
 S X=$$HL7TFM^XLFDT(DAT) I X<0 Q ""
"RTN","PSOREJU1",368,0)
 Q X
"RTN","PSOREJU1",369,0)
 ;
"RTN","PSOREJU1",370,0)
CLEAN(STR) ; Remove blanks from the end of a string and replaces ";" with ","
"RTN","PSOREJU1",371,0)
 N LEN F LEN=$L(STR):-1:1 Q:$E(STR,LEN)'=" "
"RTN","PSOREJU1",372,0)
 S STR=$TR(STR,";",",")
"RTN","PSOREJU1",373,0)
 Q $E(STR,1,LEN)
"RTN","PSOREJU1",374,0)
 ;
"RTN","PSOREJU1",375,0)
DSC(FILE,VALUE,FIELD) ;Look up code descriptions
"RTN","PSOREJU1",376,0)
 N IEN
"RTN","PSOREJU1",377,0)
 I '$G(FILE)!($G(VALUE)="")!('$G(FIELD)) Q ""
"RTN","PSOREJU1",378,0)
 I '$D(^BPS(FILE)) Q ""
"RTN","PSOREJU1",379,0)
 I '$D(^BPS(FILE,"B",VALUE)) Q ""
"RTN","PSOREJU1",380,0)
 S IEN=$O(^BPS(FILE,"B",VALUE,"")) I '$D(^BPS(FILE,IEN)) Q ""
"RTN","PSOREJU1",381,0)
 Q $$GET1^DIQ(FILE,IEN,FIELD)
"RTN","PSOREJU1",382,0)
 ;
"RTN","PSOREJU1",383,0)
SMAOVR(RSC,NUM) ; - Ask for OVERRIDE codes - allows deletion of defaults - PSO*7*421
"RTN","PSOREJU1",384,0)
 ; Called by SMA^PSOREJP1 (SMA action)
"RTN","PSOREJU1",385,0)
 ;
"RTN","PSOREJU1",386,0)
 ; INPUT: RSC - Reason for Service code
"RTN","PSOREJU1",387,0)
 ;        NUM - Sequence number (1-3)
"RTN","PSOREJU1",388,0)
 ;
"RTN","PSOREJU1",389,0)
 N COD1,COD2,COD3 W !
"RTN","PSOREJU1",390,0)
 I RSC]"" S COD1=$$OVRCOD1($G(RSC),NUM) I COD1="^"!(COD1="")!(COD1="@") Q COD1
"RTN","PSOREJU1",391,0)
 I RSC']"" S COD1=$$OVRCOD2(1,$G(RSC),NUM) I COD1="^"!(COD1="") Q COD1
"RTN","PSOREJU1",392,0)
 S COD2=$$OVRCOD2(2,"",NUM) I COD2="^" Q "^"
"RTN","PSOREJU1",393,0)
 S COD3=$$OVRCOD2(3,"",NUM) I COD3="^" Q "^"
"RTN","PSOREJU1",394,0)
 Q (COD1_U_COD2_U_COD3)
"RTN","PSOREJU1",395,0)
 ;
"RTN","PSOREJU1",396,0)
IGNORE(RX,RFL) ;
"RTN","PSOREJU1",397,0)
 ; RX = Prescription IEN
"RTN","PSOREJU1",398,0)
 ; RFL = Refill
"RTN","PSOREJU1",399,0)
 ; Return value 1 = Allow IGNORE.
"RTN","PSOREJU1",400,0)
 ; Return value 0 = Don't allow IGNORE.
"RTN","PSOREJU1",401,0)
 ; Return value 0^GrossAmtDue = Don't allow. Return amt for user msg.
"RTN","PSOREJU1",402,0)
 ;
"RTN","PSOREJU1",403,0)
 N DIR,DIRUT,PSOAMT,PSODIV,PSODIVIEN,PSOIGNORE
"RTN","PSOREJU1",404,0)
 ;
"RTN","PSOREJU1",405,0)
 ; Get Gross Amount Due
"RTN","PSOREJU1",406,0)
 S PSOAMT=$$AMT^BPSBUTL(RX,RFL)  ; DBIA #4719
"RTN","PSOREJU1",407,0)
 ;
"RTN","PSOREJU1",408,0)
 ; Get Ignore Threshold Value
"RTN","PSOREJU1",409,0)
 S PSODIV=$$GET1^DIQ(52,RX,20,"I")
"RTN","PSOREJU1",410,0)
 S PSODIVIEN=$O(^PS(52.86,"B",PSODIV,""))
"RTN","PSOREJU1",411,0)
 S PSOIGNORE=$$GET1^DIQ(52.86,PSODIVIEN,7)
"RTN","PSOREJU1",412,0)
 ;
"RTN","PSOREJU1",413,0)
 ; If Ignore Threshold is NIL or Gross Amt Due < Ignore
"RTN","PSOREJU1",414,0)
 ; Threshold - Allow IGNORE. Check of security key not
"RTN","PSOREJU1",415,0)
 ; required for these conditions.
"RTN","PSOREJU1",416,0)
 I (PSOIGNORE="")!(PSOAMT<PSOIGNORE) Q 1
"RTN","PSOREJU1",417,0)
 ;
"RTN","PSOREJU1",418,0)
 ; At this point Gross Amt Due is equal to or greater
"RTN","PSOREJU1",419,0)
 ; than the Ignore Threshold. User must have required
"RTN","PSOREJU1",420,0)
 ; security key to continue.
"RTN","PSOREJU1",421,0)
 ;
"RTN","PSOREJU1",422,0)
 S PSOAMT=$J(PSOAMT*100\1/100,0,2)
"RTN","PSOREJU1",423,0)
 ;
"RTN","PSOREJU1",424,0)
 ; User does not have required security key to continue.
"RTN","PSOREJU1",425,0)
 ; Don't allow IGNORE. Return PSOAMT to be used in message
"RTN","PSOREJU1",426,0)
 ; to user.
"RTN","PSOREJU1",427,0)
 I '$D(^XUSEC("PSO EPHARMACY SITE MANAGER",DUZ)) Q 0_"^"_PSOAMT
"RTN","PSOREJU1",428,0)
 ;
"RTN","PSOREJU1",429,0)
 ; User has required security key. Prompt if OK to continue.
"RTN","PSOREJU1",430,0)
 S DIR(0)="Y"
"RTN","PSOREJU1",431,0)
 S DIR("A")="Gross Amount Due is $"_PSOAMT_". Do you want to continue (Y/N)"
"RTN","PSOREJU1",432,0)
 S DIR("B")="NO"
"RTN","PSOREJU1",433,0)
 D ^DIR
"RTN","PSOREJU1",434,0)
 I $D(DIRUT) Q 0
"RTN","PSOREJU1",435,0)
 Q Y
"RTN","PSOREJU3")
0^6^B146070419
"RTN","PSOREJU3",1,0)
PSOREJU3 ;BIRM/LJE - BPS (ECME) - Clinical Rejects Utilities (3) ;04/25/08
"RTN","PSOREJU3",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**287,290,358,359,385,421,427,448,478,513,482**;DEC 1997;Build 44
"RTN","PSOREJU3",3,0)
 ;References to 9002313.99 supported by IA 4305
"RTN","PSOREJU3",4,0)
 ;Reference to $$CLAIM^BPSBUTL supported by IA 4719
"RTN","PSOREJU3",5,0)
 ;Reference to LOG^BPSOSL supported by ICR# 6764
"RTN","PSOREJU3",6,0)
 ;Reference to IEN59^BPSOSRX supported by ICR# 4412
"RTN","PSOREJU3",7,0)
 ;
"RTN","PSOREJU3",8,0)
 Q
"RTN","PSOREJU3",9,0)
 ;
"RTN","PSOREJU3",10,0)
TRICCHK(RX,RFL,RESP,FROM,RVTX) ;check to see if Rx is non-billable or in an "In Progress" state on ECME
"RTN","PSOREJU3",11,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJU3",12,0)
 ;         (r) RFL - REFILL
"RTN","PSOREJU3",13,0)
 ;         (o) RESP - Response from $$EN^BPSNCPDP api
"RTN","PSOREJU3",14,0)
 ;   TRICCHK assumes that the calling routine has validated that the fill is TRICARE or CHAMPVA.
"RTN","PSOREJU3",15,0)
 ;
"RTN","PSOREJU3",16,0)
 ;  - \Need to be mindful of foreground and background processing.
"RTN","PSOREJU3",17,0)
 ;
"RTN","PSOREJU3",18,0)
 N ESTAT,ETOUT,NFROM,PSOBEI
"RTN","PSOREJU3",19,0)
 I '$D(FROM) S FROM=""
"RTN","PSOREJU3",20,0)
 S ESTAT=$P(RESP,"^",4)
"RTN","PSOREJU3",21,0)
 S NFROM=0
"RTN","PSOREJU3",22,0)
 I FROM="PL"!(FROM="PC") S NFROM=1
"RTN","PSOREJU3",23,0)
 Q:ESTAT["PAYABLE"!(ESTAT["REJECTED")
"RTN","PSOREJU3",24,0)
 S PSOBEI=$$ELIGDISP^PSOREJP1(RX,RFL)
"RTN","PSOREJU3",25,0)
 ;
"RTN","PSOREJU3",26,0)
 D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-TRICCHK, RESP="_RESP)  ; ICR#s 4412,6764
"RTN","PSOREJU3",27,0)
 I ESTAT["IN PROGRESS",FROM="PC" D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-Would have noted in Activity Log that Rx was left in CMOP suspense") Q  ; ICR#s 4412,6764
"RTN","PSOREJU3",28,0)
 ;
"RTN","PSOREJU3",29,0)
 I ESTAT["IN PROGRESS",FROM="RRL"!($G(RVTX)="RX RELEASE-NDC CHANGE") D  Q
"RTN","PSOREJU3",30,0)
 . I 'NFROM D
"RTN","PSOREJU3",31,0)
 . . W !!,PSOBEI_" Prescription "_$$GET1^DIQ(52,RX,".01")_" cannot be released until ECME 'IN PROGRESS'"
"RTN","PSOREJU3",32,0)
 . . W !,"status is resolved payable.",!!
"RTN","PSOREJU3",33,0)
 ;
"RTN","PSOREJU3",34,0)
 I $D(RESP) D  Q
"RTN","PSOREJU3",35,0)
 . I +RESP=6 W:'NFROM&('$G(CMOP)) !!,"Inactive ECME "_PSOBEI,!! D  Q
"RTN","PSOREJU3",36,0)
 . . S ACT="Inactive ECME "_PSOBEI D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOREJU3",37,0)
 . I +RESP=2!(+RESP=3) N PSONBILL S PSONBILL=1 D TRIC2 Q
"RTN","PSOREJU3",38,0)
 . I +RESP=4!(ESTAT["IN PROGRESS") N PSONPROG S PSONPROG=1 D TRIC2 Q
"RTN","PSOREJU3",39,0)
 Q
"RTN","PSOREJU3",40,0)
 ;
"RTN","PSOREJU3",41,0)
TRIC2 ;
"RTN","PSOREJU3",42,0)
 N ACTION,REJCOD,REJ,DIR,DIRUT,REA,DA,PSCAN,PSOTRIC,ZZZ
"RTN","PSOREJU3",43,0)
 N PSORESP,PSOIT
"RTN","PSOREJU3",44,0)
 S PSOTRIC=1,REJ=9999999999
"RTN","PSOREJU3",45,0)
 I $G(CMOP)&($G(PSONPROG)) D TACT Q 
"RTN","PSOREJU3",46,0)
 Q:$G(CMOP)
"RTN","PSOREJU3",47,0)
 I 'NFROM D DISPLAY(RX,REJ)
"RTN","PSOREJU3",48,0)
 I 'NFROM&($G(PSONPROG)) D  D SUSP Q
"RTN","PSOREJU3",49,0)
 . W !!,"This prescription will be suspended.  After the third party claim is resolved,"
"RTN","PSOREJU3",50,0)
 . W !,"it may be printed or pulled early from suspense.",!
"RTN","PSOREJU3",51,0)
 . R !!,"Press <RETURN> to continue...",ZZZ:60,!
"RTN","PSOREJU3",52,0)
 I NFROM&($G(PSONPROG)) D TACT Q
"RTN","PSOREJU3",53,0)
 Q:NFROM
"RTN","PSOREJU3",54,0)
TRIC3 ;
"RTN","PSOREJU3",55,0)
 D MSG
"RTN","PSOREJU3",56,0)
 I FROM="PL"!(FROM="PC") D SUSP Q
"RTN","PSOREJU3",57,0)
 ;cnf, PSO*7*358, add code for options
"RTN","PSOREJU3",58,0)
 N ACTION,DIR,DIRUT,OPTS,DEF,COM
"RTN","PSOREJU3",59,0)
TRIC4 S DIR(0)="SO^",DIR("A")="",OPTS="DQ",DEF="D"
"RTN","PSOREJU3",60,0)
 S PSORESP=$P($G(RESP),U,2)
"RTN","PSOREJU3",61,0)
 I PSORESP["NO ACTIVE/VALID ROI" S DEF="Q"  ;IB routine IBNCPDP1 contains this text.
"RTN","PSOREJU3",62,0)
 ;reference to ^XUSEC( supported by IA 10076
"RTN","PSOREJU3",63,0)
 I $D(^XUSEC("PSO TRICARE/CHAMPVA",DUZ)) S OPTS=OPTS_"I" ;PSO*7.0*358, if user has security key, include IGNORE in TRICARE/CHAMPVA options
"RTN","PSOREJU3",64,0)
 S:(OPTS["D") DIR(0)=DIR(0)_"D:(D)iscontinue - DO NOT FILL PRESCRIPTION;",DIR("A")=DIR("A")_"(D)iscontinue,"
"RTN","PSOREJU3",65,0)
 S:(OPTS["Q") DIR(0)=DIR(0)_"Q:(Q)UIT - SEND TO WORKLIST (REQUIRES INTERVENTION);",DIR("A")=DIR("A")_"(Q)uit,"
"RTN","PSOREJU3",66,0)
 S:(OPTS["I") DIR(0)=DIR(0)_"I:(I)GNORE - FILL Rx WITHOUT CLAIM SUBMISSION;",DIR("A")=DIR("A")_"(I)gnore,"
"RTN","PSOREJU3",67,0)
 S $E(DIR(0),$L(DIR(0)))="",$E(DIR("A"),$L(DIR("A")))="",DIR("??")="^D HELP^PSOREJU2("""_OPTS_""")"
"RTN","PSOREJU3",68,0)
 S:$G(DEF)'="" DIR("B")=DEF D ^DIR I $D(DIRUT) S Y="Q" W !
"RTN","PSOREJU3",69,0)
 ;
"RTN","PSOREJU3",70,0)
 S ACTION=Y
"RTN","PSOREJU3",71,0)
 I ACTION="D" S ACTION=$$DC^PSOREJU1(RX,ACTION)    ;cnf, PSO*7*358
"RTN","PSOREJU3",72,0)
 I ACTION="Q" D WRKLST^PSOREJU4(RX,RFL,,DUZ,DT,1,"",RESP)    ;cnf, PSO*7*358
"RTN","PSOREJU3",73,0)
 S PSOIT=""
"RTN","PSOREJU3",74,0)
 I ACTION="I" S PSOIT=$$IGNORE^PSOREJU1(RX,RFL)
"RTN","PSOREJU3",75,0)
 I $P(PSOIT,"^")=0 D  G TRIC4
"RTN","PSOREJU3",76,0)
 . I $P(PSOIT,"^",2)'="" D
"RTN","PSOREJU3",77,0)
 . . W $C(7),!,"Gross Amount Due is $"_$P(PSOIT,"^",2)_". IGNORE requires EPHARMACY SITE MANAGER key."
"RTN","PSOREJU3",78,0)
 I ACTION="I" G TRIC4:'$$CONT^PSOREJU1() S COM=$$TCOM^PSOREJP3(RX,RFL) G TRIC4:COM="^" G TRIC4:'$$SIG^PSOREJU1() D
"RTN","PSOREJU3",79,0)
 . D CLOSE^PSOREJUT(RX,RFL,REJ,DUZ,6,COM)   ;TRICARE/CHAMPVA non-billable should have only 1 reject - eT/eC
"RTN","PSOREJU3",80,0)
 . D AUDIT^PSOTRI(RX,RFL,,COM,$S($$PSOET^PSOREJP3(RX,RFL):"N",1:"R"),$P(RESP,"^",3))
"RTN","PSOREJU3",81,0)
 Q
"RTN","PSOREJU3",82,0)
 ;
"RTN","PSOREJU3",83,0)
MSG ;
"RTN","PSOREJU3",84,0)
 W !!,"This is a non-billable "_$$ELIGDISP^PSOREJP1(RX,RFL)_" prescription."    ;cnf, PSO*7*358
"RTN","PSOREJU3",85,0)
 Q
"RTN","PSOREJU3",86,0)
SUSP ;Suspense Rx due to IN PROGRESS status in ECME
"RTN","PSOREJU3",87,0)
 N DA,ACT,RX0,SD,RXS,PSOWFLG,DIK,RXN,XFLAG,RXP,DD,DO,X,Y,DIC,VALMSG,COMM,LFD,DFLG,RXCMOP
"RTN","PSOREJU3",88,0)
 N PSOQFLAG,PSORXZD,PSOQFLAG,PSOKSPPL,PSOZXPPL,PSOZXPI,RXLTOP
"RTN","PSOREJU3",89,0)
 S DA=RX D SUS^PSORXL1
"RTN","PSOREJU3",90,0)
TACT ;
"RTN","PSOREJU3",91,0)
 S ACT=$$ELIGDISP^PSOREJP1(RX,RFL)_"-Rx placed on Suspense due to"_$S($G(PSONPROG):" ECME IN PROGRESS status",$G(PSONBILL):"the Rx being Non-billable",1:"")
"RTN","PSOREJU3",92,0)
 I '$G(DUZ) N DUZ S DUZ=.5
"RTN","PSOREJU3",93,0)
 D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOREJU3",94,0)
 Q
"RTN","PSOREJU3",95,0)
 ;
"RTN","PSOREJU3",96,0)
DISPLAY(RX,REJ,KEY,RRR) ; - Displays REJECT information
"RTN","PSOREJU3",97,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJU3",98,0)
 ;         (r) REJ - REJECT ID (IEN)
"RTN","PSOREJU3",99,0)
 ;         (o) KEY - Display "Press any KEY to continue..." (1-YES/0-NO) (Default: 0)
"RTN","PSOREJU3",100,0)
 ;         (o) RRR - Reject Resolution Required information  Flag(0/1)^Threshold Amt^Gross Amt Due  (Default: 0)
"RTN","PSOREJU3",101,0)
 ;                   If Flag = 0, there is no Reject Resolution Required reject code.  Parameter added with PSO*421
"RTN","PSOREJU3",102,0)
 ;         
"RTN","PSOREJU3",103,0)
 Q:$G(NFROM)
"RTN","PSOREJU3",104,0)
 I '$G(RX)!'$G(REJ) Q
"RTN","PSOREJU3",105,0)
 I '$D(^PSRX(RX,"REJ",REJ))&('$G(PSONBILL))&('$G(PSONPROG)) Q
"RTN","PSOREJU3",106,0)
 ;
"RTN","PSOREJU3",107,0)
 N DATA,RFL,LINE,%
"RTN","PSOREJU3",108,0)
 S RFL=+$$GET1^DIQ(52.25,REJ_","_RX,5)
"RTN","PSOREJU3",109,0)
 I '$G(PSONBILL)&('$G(PSONPROG)) D GET^PSOREJU2(RX,RFL,.DATA,REJ) I '$D(DATA(REJ)) Q
"RTN","PSOREJU3",110,0)
 ;
"RTN","PSOREJU3",111,0)
 D HDR
"RTN","PSOREJU3",112,0)
 S $P(LINE,"-",74)="" W !?3,LINE
"RTN","PSOREJU3",113,0)
 W !?3,$$DVINFO(RX,RFL)
"RTN","PSOREJU3",114,0)
 W !?3,$$PTINFO^PSOREJU2(RX)
"RTN","PSOREJU3",115,0)
 W !?3,"Rx/Drug  : ",$$GET1^DIQ(52,RX,.01),"/",RFL," - ",$E($$GET1^DIQ(52,RX,6),1,20),?54
"RTN","PSOREJU3",116,0)
 W:'$G(PSONBILL)&('$G(PSONPROG)) "ECME#: ",$P($$CLAIM^BPSBUTL(RX,RFL),U,6)
"RTN","PSOREJU3",117,0)
 D TYPE G DISP2:$G(PSONBILL)!($G(PSONPROG))
"RTN","PSOREJU3",118,0)
 I $G(DATA(REJ,"PAYER MESSAGE"))'="" W !?3,"Payer Message: " D PRT^PSOREJU2("PAYER MESSAGE",18,58)
"RTN","PSOREJU3",119,0)
 I $G(DATA(REJ,"DUR TEXT"))'="" W !?3,"DUR Text     : ",DATA(REJ,"DUR TEXT")
"RTN","PSOREJU3",120,0)
 W !?3,"Insurance    : ",DATA(REJ,"INSURANCE NAME"),?50,"Contact: ",DATA(REJ,"PLAN CONTACT")
"RTN","PSOREJU3",121,0)
 W !?3,"Group Name   : ",$E(DATA(REJ,"GROUP NAME"),1,26)
"RTN","PSOREJU3",122,0)
 W ?45,"Group Number: ",$E(DATA(REJ,"GROUP NUMBER"),1,15)
"RTN","PSOREJU3",123,0)
 I $G(DATA(REJ,"CARDHOLDER ID"))'="" W !?3,"Cardholder ID: ",$E(DATA(REJ,"CARDHOLDER ID"),1,20)
"RTN","PSOREJU3",124,0)
 I DATA(REJ,"PLAN PREVIOUS FILL DATE")'="" D
"RTN","PSOREJU3",125,0)
 . W !?3,"Last Fill Dt.: ",DATA(REJ,"PLAN PREVIOUS FILL DATE")
"RTN","PSOREJU3",126,0)
 . W:DATA(REJ,"PLAN PREVIOUS FILL DATE")'="" "   (from payer)"
"RTN","PSOREJU3",127,0)
 ;
"RTN","PSOREJU3",128,0)
 N PSOAR,PSOCNT,PSOCOMMENT,PSODATA,PSODATE,PSODATE1
"RTN","PSOREJU3",129,0)
 N PSODFN,PSOPC,PSOSTATUS,PSOSTR,PSOUSER
"RTN","PSOREJU3",130,0)
 ;
"RTN","PSOREJU3",131,0)
 ; Get Patient ID
"RTN","PSOREJU3",132,0)
 S PSODFN=$$GET1^DIQ(52,RX,2,"I")
"RTN","PSOREJU3",133,0)
 ;
"RTN","PSOREJU3",134,0)
 ; Loop through Patient Comments - Add ACTIVE Comments to PSOAR array
"RTN","PSOREJU3",135,0)
 S PSODATE=""
"RTN","PSOREJU3",136,0)
 S PSOCNT=0
"RTN","PSOREJU3",137,0)
 K PSOAR
"RTN","PSOREJU3",138,0)
 F  S PSODATE=$O(^PS(55,PSODFN,"PC","B",PSODATE)) Q:PSODATE=""  D
"RTN","PSOREJU3",139,0)
 . S PSOPC=""
"RTN","PSOREJU3",140,0)
 . F  S PSOPC=$O(^PS(55,PSODFN,"PC","B",PSODATE,PSOPC)) Q:PSOPC=""  D
"RTN","PSOREJU3",141,0)
 . . K PSODATA
"RTN","PSOREJU3",142,0)
 . . D GETS^DIQ(55.17,PSOPC_","_PSODFN_",",".01;1;2;3","IE","PSODATA")
"RTN","PSOREJU3",143,0)
 . . ; 
"RTN","PSOREJU3",144,0)
 . . ; Only display ACTIVE Patient Comments
"RTN","PSOREJU3",145,0)
 . . S PSOSTATUS=$G(PSODATA(55.17,PSOPC_","_PSODFN_",",2,"I"))
"RTN","PSOREJU3",146,0)
 . . I PSOSTATUS'="Y" Q
"RTN","PSOREJU3",147,0)
 . . ;
"RTN","PSOREJU3",148,0)
 . . S PSODATE1=$G(PSODATA(55.17,PSOPC_","_PSODFN_",",.01,"E"))
"RTN","PSOREJU3",149,0)
 . . S PSOUSER=$G(PSODATA(55.17,PSOPC_","_PSODFN_",",1,"E"))
"RTN","PSOREJU3",150,0)
 . . S PSOCOMMENT=$G(PSODATA(55.17,PSOPC_","_PSODFN_",",3,"E"))
"RTN","PSOREJU3",151,0)
 . . S PSOSTR=PSODATE1_" - "_PSOCOMMENT_" ("_PSOUSER_")"
"RTN","PSOREJU3",152,0)
 . . S PSOCNT=PSOCNT+1
"RTN","PSOREJU3",153,0)
 . . S PSOAR(PSOCNT)=PSOSTR
"RTN","PSOREJU3",154,0)
 ;
"RTN","PSOREJU3",155,0)
 ; If PSOAR array exists, display Active Patient Comments
"RTN","PSOREJU3",156,0)
 I $D(PSOAR) D
"RTN","PSOREJU3",157,0)
 . W !?3,"Patient Billing Comment(s):"
"RTN","PSOREJU3",158,0)
 . ;
"RTN","PSOREJU3",159,0)
 . ; Loop through PSOAR in reverse order to display Patient
"RTN","PSOREJU3",160,0)
 . ; Comments in reverse chronological order
"RTN","PSOREJU3",161,0)
 . S PSOCNT=""
"RTN","PSOREJU3",162,0)
 . F  S PSOCNT=$O(PSOAR(PSOCNT),-1) Q:PSOCNT=""  D
"RTN","PSOREJU3",163,0)
 . . ;
"RTN","PSOREJU3",164,0)
 . . ; Use ^DIWP to display Patient Comments with proper
"RTN","PSOREJU3",165,0)
 . . ; line breaking
"RTN","PSOREJU3",166,0)
 . . N %,DIW,DIWF,DIWI,DIWL,DIWR,DIWT,DIWTC,DIWX,DN,I,Z
"RTN","PSOREJU3",167,0)
 . . K ^UTILITY($J,"W")
"RTN","PSOREJU3",168,0)
 . . S X=PSOAR(PSOCNT)
"RTN","PSOREJU3",169,0)
 . . S DIWL=1
"RTN","PSOREJU3",170,0)
 . . S DIWR=78
"RTN","PSOREJU3",171,0)
 . . D ^DIWP
"RTN","PSOREJU3",172,0)
 . . ;
"RTN","PSOREJU3",173,0)
 . . S PSOLAST=0
"RTN","PSOREJU3",174,0)
 . . F PSOY=1:1 Q:('$D(^UTILITY($J,"W",1,PSOY,0)))  D
"RTN","PSOREJU3",175,0)
 . . . S PSOCOM=$G(^UTILITY($J,"W",1,PSOY,0))
"RTN","PSOREJU3",176,0)
 . . . W !?3,PSOCOM
"RTN","PSOREJU3",177,0)
 . K ^UTILITY($J,"W")
"RTN","PSOREJU3",178,0)
 ;
"RTN","PSOREJU3",179,0)
 I $G(RRR) D   ;added with PSO*421
"RTN","PSOREJU3",180,0)
 . W !!?3,"Reject Resolution Required"
"RTN","PSOREJU3",181,0)
 . W !?3,"Gross Amount Due ($"_$J($P(RRR,U,3)*100\1/100,0,2)_") is greater than or equal to"
"RTN","PSOREJU3",182,0)
 . W !?3,"Threshold Dollar Amount ($"_$P(RRR,U,2)_")"
"RTN","PSOREJU3",183,0)
 . W !?3,"Please select Quit to resolve this reject on the Reject Worklist."
"RTN","PSOREJU3",184,0)
DISP2 ;
"RTN","PSOREJU3",185,0)
 W !?3,LINE,$C(7) I $G(KEY) W !?3,"Press <RETURN> to continue..." R %:DTIME W !
"RTN","PSOREJU3",186,0)
 Q
"RTN","PSOREJU3",187,0)
 ;
"RTN","PSOREJU3",188,0)
TYPE ;
"RTN","PSOREJU3",189,0)
 I $G(PSONBILL)!($G(PSONPROG)) D  Q
"RTN","PSOREJU3",190,0)
 . D NOW^%DTC S Y=% D DD^%DT
"RTN","PSOREJU3",191,0)
 . W !?3,"Date/Time: "_$$FMTE^XLFDT(Y)
"RTN","PSOREJU3",192,0)
 . W !?3,"Reason   : ",$S($G(PSONBILL):"Drug not billable.",$G(PSONPROG):"ECME Status is in an 'IN PROGRESS' state and cannot be filled",1:"")
"RTN","PSOREJU3",193,0)
 ;
"RTN","PSOREJU3",194,0)
 I $G(DATA(REJ,"REASON"))'="" W !?3,"Reason   : " D PRT^PSOREJU2("REASON",14,62)
"RTN","PSOREJU3",195,0)
 N RTXT,OCODE,OTXT,I
"RTN","PSOREJU3",196,0)
 S (OTXT,RTXT,OCODE)="",RTXT=$S(DATA(REJ,"CODE")=79:"REFILL TOO SOON",DATA(REJ,"CODE")=88:"DUR REJECT",1:$$EXP^PSOREJP1(DATA(REJ,"CODE")))_" ("_DATA(REJ,"CODE")_")"
"RTN","PSOREJU3",197,0)
 F I=1:1 S OCODE=$P(DATA(REJ,"OTHER REJECTS"),",",I) Q:OCODE=""   D
"RTN","PSOREJU3",198,0)
 . S OTXT=OTXT_", "_$S(OCODE=79:"REFILL TOO SOON",OCODE=88:"DUR REJECT",1:$$EXP^PSOREJP1(OCODE))_" ("_OCODE_")"
"RTN","PSOREJU3",199,0)
 S RTXT=RTXT_OTXT_".  Received on "_$$FMTE^XLFDT($G(DATA(REJ,"DATE/TIME")))_"."
"RTN","PSOREJU3",200,0)
 S OTXT=""
"RTN","PSOREJU3",201,0)
 W !?3,"Reject(s): " D WRAP(RTXT,14)
"RTN","PSOREJU3",202,0)
 Q
"RTN","PSOREJU3",203,0)
 ;
"RTN","PSOREJU3",204,0)
WRAP(PSOTXT,INDENT) ;
"RTN","PSOREJU3",205,0)
 N I,K,PSOWRAP,PSOMARG
"RTN","PSOREJU3",206,0)
 S PSOWRAP=1,PSOMARG=$S('$G(PSORM):80,$D(IOM):IOM,1:80)-(INDENT+5)
"RTN","PSOREJU3",207,0)
W1 S:$L(PSOTXT)<PSOMARG PSOWRAP(PSOWRAP)=PSOTXT I $L(PSOTXT)'<PSOMARG F I=PSOMARG:-1:0 I $E(PSOTXT,I)?1P S PSOWRAP(PSOWRAP)=$E(PSOTXT,1,I),PSOTXT=$E(PSOTXT,I+1,999),PSOWRAP=PSOWRAP+1 G W1
"RTN","PSOREJU3",208,0)
 F K=1:1:PSOWRAP W ?INDENT,PSOWRAP(K),!
"RTN","PSOREJU3",209,0)
 Q
"RTN","PSOREJU3",210,0)
 ;
"RTN","PSOREJU3",211,0)
HDR ; Display the reject notification screen header
"RTN","PSOREJU3",212,0)
 N ELDSP,TAB
"RTN","PSOREJU3",213,0)
 S ELDSP=$$ELIGTCV^PSOREJP1(RX,RFL,1)  ; returns TRICARE, CHAMPVA or VETERAN
"RTN","PSOREJU3",214,0)
 I $L(ELDSP) S ELDSP=ELDSP_" - "       ; Add the " - " for CVA/TRI only
"RTN","PSOREJU3",215,0)
 ;
"RTN","PSOREJU3",216,0)
 I $G(PSONBILL) S TAB=$S($L(ELDSP):24,1:29) W !!?TAB,"*** "_ELDSP_"NON-BILLABLE ***" Q
"RTN","PSOREJU3",217,0)
 I $G(PSONPROG) S TAB=$S($L(ELDSP):18,1:23) W !!?TAB,"*** "_ELDSP_"'IN PROGRESS' ECME status ***" Q
"RTN","PSOREJU3",218,0)
 S TAB=$S($L(ELDSP):11,1:16) W !!?TAB,"*** "_ELDSP_"REJECT RECEIVED FROM THIRD PARTY PAYER ***"
"RTN","PSOREJU3",219,0)
 Q
"RTN","PSOREJU3",220,0)
 ;
"RTN","PSOREJU3",221,0)
SUBMIT(RXIEN,RFCNT,PSOTRIC) ;called from PSOCAN2 (routine size exceeded)
"RTN","PSOREJU3",222,0)
 N SUBMITE S SUBMITE=$$SUBMIT^PSOBPSUT(RXIEN)
"RTN","PSOREJU3",223,0)
 I SUBMITE D
"RTN","PSOREJU3",224,0)
 . N ACTION
"RTN","PSOREJU3",225,0)
 . D ECMESND^PSOBPSU1(RXIEN,,,$S($O(^PSRX(RXIEN,1,0)):"RF",1:"OF"))
"RTN","PSOREJU3",226,0)
 . ; Quit if there is an unresolved TRICARE or CHAMPVA non-billable reject code, PSO*7*358
"RTN","PSOREJU3",227,0)
 . I $$PSOET^PSOREJP3(RXIEN) S ACTION="Q" Q 
"RTN","PSOREJU3",228,0)
 . I $$FIND^PSOREJUT(RXIEN) S ACTION=$$HDLG^PSOREJU1(RXIEN,,"79,88","OF","IOQ","Q")
"RTN","PSOREJU3",229,0)
 I 'SUBMITE&(PSOTRIC) D
"RTN","PSOREJU3",230,0)
 . I $$STATUS^PSOBPSUT(RXIEN,RFCNT'["PAYABLE") D TRICCHK(RXIEN,RFCNT)
"RTN","PSOREJU3",231,0)
 Q
"RTN","PSOREJU3",232,0)
 ;
"RTN","PSOREJU3",233,0)
TRISTA(RX,RFL,RESP,FROM,RVTX) ;called from suspense
"RTN","PSOREJU3",234,0)
 N ETOUT,ESTAT,TRESP,TSTAT,PSOTRIC
"RTN","PSOREJU3",235,0)
 S:'$D(RESP) RESP=""
"RTN","PSOREJU3",236,0)
 S (ESTAT,PSOTRIC)="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOREJU3",237,0)
 Q:'PSOTRIC 0
"RTN","PSOREJU3",238,0)
 S TRESP=RESP,ESTAT=$P(TRESP,"^",4) S:ESTAT="" ESTAT=$$STATUS^PSOBPSUT(RX,RFL)
"RTN","PSOREJU3",239,0)
 Q:ESTAT["E PAYABLE" 0
"RTN","PSOREJU3",240,0)
 I $$TRIAUD(RX,RFL) D  Q 0  ;if TRICARE or CHAMPVA Rx is in audit due to override or bypass, allow to print from suspense, cnf
"RTN","PSOREJU3",241,0)
 . D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-TRISTA, $$TRIAUD returned 1, $$TRISTA is Quitting with 0")  ; ICR#s 4412,6764
"RTN","PSOREJU3",242,0)
 I +RESP=2,$$BYPASS^PSOBPSU1($P(RESP,"^",3),$P(RESP,"^",2)) D  Q 0   ;if 'Bypass' RX, allow to print from suspense, cnf
"RTN","PSOREJU3",243,0)
 . D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-TRISTA, $$BYPASS returned 1, $$TRISTA is Quitting with 0")  ; ICR#s 4412,6764
"RTN","PSOREJU3",244,0)
 Q:ESTAT["E REJECTED" 1  ;rejected TRICARE or CHAMPVA is not allowed to print from suspense
"RTN","PSOREJU3",245,0)
 ;if 'in progress' (4) or not billable (2,3) don't allow to print from suspense (IA 4415 Values)
"RTN","PSOREJU3",246,0)
 I '$D(RESP)!($P(RESP,"^",1)="")!($G(RESP)="") D
"RTN","PSOREJU3",247,0)
 . S TSTAT=$$STATUS^PSOBPSUT(RX,RFL) S TRESP=$S(TSTAT["IN PROGRESS":4,TSTAT["NOT BILLABLE":2,1:0)
"RTN","PSOREJU3",248,0)
 . S $P(TRESP,"^",4)=TSTAT
"RTN","PSOREJU3",249,0)
 ;
"RTN","PSOREJU3",250,0)
 I +TRESP=2!(+TRESP=3) D  Q 1
"RTN","PSOREJU3",251,0)
 . D WRKLST^PSOREJU4(RX,RFL,"",DUZ,DT,1,"",RESP)  ;send TRICARE or CHAMPVA non billable to worklist (pseudo reject), cnf
"RTN","PSOREJU3",252,0)
 . D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-TRISTA, calling WRKLST~PSOREJU4, $$TRISTA is Quitting with 1")  ; ICR#s 4412,6764
"RTN","PSOREJU3",253,0)
 I +TRESP=4!(ESTAT["IN PROGRESS") D  Q 1
"RTN","PSOREJU3",254,0)
 . D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-TRISTA, TRESP="_TRESP_", ESTAT="_ESTAT_", $$TRISTA is Quitting with 1")  ; ICR#s 4412,6764
"RTN","PSOREJU3",255,0)
 Q 0
"RTN","PSOREJU3",256,0)
 ;
"RTN","PSOREJU3",257,0)
TRIAUD(RXIEN,RXFILL) ;is RXIEN in the TRICARE/CHAMPVA audit and no open rejects  ;cnf
"RTN","PSOREJU3",258,0)
 ; RXIEN will only be in TRICARE/CHAMPVA audit if a bypass or override has occurred and rejects are closed
"RTN","PSOREJU3",259,0)
 ; returns  0  if RXIEN is not in TRICARE/CHAMPVA audit at all or not in audit for right fill number
"RTN","PSOREJU3",260,0)
 ;             rejects must be closed for 0 to be returned
"RTN","PSOREJU3",261,0)
 ;          1  if RXIEN is in TRICARE/CHAMPVA audit for the right fill number and rejects are closed
"RTN","PSOREJU3",262,0)
 ;
"RTN","PSOREJU3",263,0)
 N X,AUDIEN,REJIEN
"RTN","PSOREJU3",264,0)
 S X=0,AUDIEN=""
"RTN","PSOREJU3",265,0)
 I '$D(^PS(52.87,"C",RXIEN)) Q X   ;RXIEN is not in the TRICARE/CHAMPVA audit
"RTN","PSOREJU3",266,0)
 ;
"RTN","PSOREJU3",267,0)
 I $G(RXFILL)="" S RXFILL=$$LSTRFL^PSOBPSU1(RXIEN)  ;Get latest fill if not passed in
"RTN","PSOREJU3",268,0)
 ;
"RTN","PSOREJU3",269,0)
 ;check audit entries for right fill number
"RTN","PSOREJU3",270,0)
 F  S AUDIEN=$O(^PS(52.87,"C",RXIEN,AUDIEN)) Q:AUDIEN=""  I RXFILL=$$GET1^DIQ(52.87,AUDIEN,2) S X=1 Q
"RTN","PSOREJU3",271,0)
 I 'X Q X
"RTN","PSOREJU3",272,0)
 ;
"RTN","PSOREJU3",273,0)
 ;make sure rejects are closed
"RTN","PSOREJU3",274,0)
 S REJIEN=0
"RTN","PSOREJU3",275,0)
 F  S REJIEN=$O(^PSRX(RXIEN,"REJ",REJIEN)) Q:'+REJIEN  D  I 'X Q   ;I 'X, then the reject is not closed
"RTN","PSOREJU3",276,0)
 . S X=$$CLOSED^PSOREJP1(RXIEN,REJIEN,0)
"RTN","PSOREJU3",277,0)
 ;
"RTN","PSOREJU3",278,0)
 Q X
"RTN","PSOREJU3",279,0)
 ;
"RTN","PSOREJU3",280,0)
ECMECHK(RX,FILL) ;
"RTN","PSOREJU3",281,0)
 ; This function returns a '1' if any of the conditions below are met:
"RTN","PSOREJU3",282,0)
 ;    - RX has an unresolved DUR or Refill Too Soon reject
"RTN","PSOREJU3",283,0)
 ;    - RX has an unresolved Reject Resolution Required (RRR) reject (only for Veteran and original fill)
"RTN","PSOREJU3",284,0)
 ;    - RX is TRICARE/CHAMPVA and has any unresolved reject
"RTN","PSOREJU3",285,0)
 ;    - RX is TRICARE/CHAMPVA and IN PROGRESS
"RTN","PSOREJU3",286,0)
 ; This is used by functions such as PPLADD^PSOSUPOE to determine if
"RTN","PSOREJU3",287,0)
 ;   a label should be printed (we do not want a label for the conditions)
"RTN","PSOREJU3",288,0)
 ;
"RTN","PSOREJU3",289,0)
 ; Incoming Parameters:
"RTN","PSOREJU3",290,0)
 ;   RX - Internal IEN of the Prescription File (required)
"RTN","PSOREJU3",291,0)
 ;   FILL - Fill Number (optional, defaults to last fill if not passed in)
"RTN","PSOREJU3",292,0)
 ; Returns:
"RTN","PSOREJU3",293,0)
 ;   0 - None of the conditions exists
"RTN","PSOREJU3",294,0)
 ;   1 - One of the conditions above is met
"RTN","PSOREJU3",295,0)
 ;
"RTN","PSOREJU3",296,0)
 I '$G(RX) Q 0
"RTN","PSOREJU3",297,0)
 I $G(FILL)="" S FILL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJU3",298,0)
 ;
"RTN","PSOREJU3",299,0)
 ; DUR or Refill Too Soon or RRR rejects
"RTN","PSOREJU3",300,0)
 I $$FIND^PSOREJUT(RX,FILL,"","79,88",,1) Q 1
"RTN","PSOREJU3",301,0)
 ;
"RTN","PSOREJU3",302,0)
 ; If not TRICARE/CHAMPVA, quit with 0 as the rest of the checks
"RTN","PSOREJU3",303,0)
 ;   are all TRICARE/CHAMPVA dependent
"RTN","PSOREJU3",304,0)
 I '$$TRIC^PSOREJP1(RX,FILL) Q 0
"RTN","PSOREJU3",305,0)
 ;
"RTN","PSOREJU3",306,0)
 ; No label for TRICARE/CHAMPVA with unresolved rejects
"RTN","PSOREJU3",307,0)
 I $$FIND^PSOREJUT(RX,FILL,,,1) Q 1   ; 5th parameter to $$FIND also finds non-billable TRI/CVA rejects
"RTN","PSOREJU3",308,0)
 ;
"RTN","PSOREJU3",309,0)
 ;No label for TRICARE/CHAMPVA claims that are IN PROGRESS
"RTN","PSOREJU3",310,0)
 I $P($$STATUS^PSOBPSUT(RX,FILL),U)="IN PROGRESS" Q 1
"RTN","PSOREJU3",311,0)
 Q 0
"RTN","PSOREJU3",312,0)
 ;
"RTN","PSOREJU3",313,0)
DVINFO(RX,RFL,LM) ; Returns header displayable Division Information
"RTN","PSOREJU3",314,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOREJU3",315,0)
 ;       (o) RFL  - Refill # (Default: most recent)
"RTN","PSOREJU3",316,0)
 ;       (o) LM   - ListManager format? (1 - Yes / 0 - No) - Default: 0
"RTN","PSOREJU3",317,0)
 N TXT,DVINFO,NCPNPI,DVIEN
"RTN","PSOREJU3",318,0)
 S DVIEN=+$$RXSITE^PSOBPSUT(RX,RFL)
"RTN","PSOREJU3",319,0)
 S DVINFO="Division : "_$$GET1^DIQ(59,DVIEN,.01)
"RTN","PSOREJU3",320,0)
 ;Display both NPI and NCPDP numbers - PSO*7.0*421
"RTN","PSOREJU3",321,0)
 S NCPNPI=$$DIVNCPDP^BPSBUTL(DVIEN)
"RTN","PSOREJU3",322,0)
 S $E(DVINFO,33)="NPI: "_$P(NCPNPI,U,2)
"RTN","PSOREJU3",323,0)
 S $E(DVINFO,$S($G(LM):59,1:52))="NCPDP: "_$P(NCPNPI,U)
"RTN","PSOREJU3",324,0)
 Q DVINFO
"RTN","PSORXED")
0^3^B83606769
"RTN","PSORXED",1,0)
PSORXED ;IHS/DSD/JCM - edit rx utility ;8/18/10 3:16pm
"RTN","PSORXED",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**2,16,21,26,56,71,125,201,246,289,298,366,385,403,421,482**;DEC 1997;Build 44
"RTN","PSORXED",3,0)
 ;External reference to ^PSXEDIT supported by DBIA 2209
"RTN","PSORXED",4,0)
 ;External reference to ^DD(52 supported by DBIA 999
"RTN","PSORXED",5,0)
 ;External reference to ^PSDRUG supported by DBIA 221
"RTN","PSORXED",6,0)
 ;External reference to ^PS(55 supported by DBIA 2228
"RTN","PSORXED",7,0)
 ;
"RTN","PSORXED",8,0)
START ;this entry point is no longer used.
"RTN","PSORXED",9,0)
 ;D INIT,LKUP G:PSORXED("QFLG") END D PARSE,EOJ G START
"RTN","PSORXED",10,0)
 ;
"RTN","PSORXED",11,0)
END D EOJ
"RTN","PSORXED",12,0)
 Q
"RTN","PSORXED",13,0)
 ;
"RTN","PSORXED",14,0)
INIT S PSORXED("QFLG")=0 Q
"RTN","PSORXED",15,0)
 ;
"RTN","PSORXED",16,0)
LKUP ; this line of code is no longer used S PSONUM="RX",PSONUM("A")="EDIT",PSOQFLG=0 D EN1^PSONUM I PSOQFLG!($Q(PSOLIST)']"") S PSORXED("QFLG")=1
"RTN","PSORXED",17,0)
 K PSOQFLG Q
"RTN","PSORXED",18,0)
 ;
"RTN","PSORXED",19,0)
PARSE F PSORXED("LIST")=1:1 Q:'$D(PSOLIST(PSORXED("LIST")))!PSORXED("QFLG")  F PSORXED("I")=1:1:$L(PSOLIST(PSORXED("LIST"))) S PSORXED("IRXN")=$P(PSOLIST(PSORXED("LIST")),",",PSORXED("I")) D:+PSORXED("IRXN") PROCESS
"RTN","PSORXED",20,0)
 Q
"RTN","PSORXED",21,0)
 ;
"RTN","PSORXED",22,0)
PROCESS S PSORXED("DFLG")=0 G:$G(^PSRX(PSORXED("IRXN"),0))']"" PROCESSX
"RTN","PSORXED",23,0)
 ;*298 Track PI and Oth Lang PI
"RTN","PSORXED",24,0)
 S PSORXED("RX0")=^PSRX(PSORXED("IRXN"),0),PSORXED("RX2")=^(2),PSORXED("RX3")=^(3),PSOSIG=$G(^PSRX(PSORXED("IRXN"),"SIG")),PSODAYS=$P(PSORXED("RX0"),"^",8),PSOPINS=$G(^PSRX(PSORXED("IRXN"),"INS")),PSOOINS=$G(^PSRX(PSORXED("IRXN"),"INSS"))
"RTN","PSORXED",25,0)
 S (I,RFED,RFDT)=0 F  S I=$O(^PSRX(PSORXED("IRXN"),1,I)) Q:'I  S RFED=I,PSORXED("RX1")=^PSRX(PSORXED("IRXN"),1,I,0),RFDT=$P(^(0),"^"),PSODAYS=$P(^(0),"^",10) S:$P(^(0),"^",17) PSONEW("PROVIDER NAME")=$P(^VA(200,$P(^(0),"^",17),0),"^")
"RTN","PSORXED",26,0)
 S PSORXST=+$P($G(^PS(53,+$P(PSORXED("RX0"),"^",3),0)),"^",7) N DA S DA=PSORXED("IRXN") D EN^PSORXPR
"RTN","PSORXED",27,0)
 D CHECK G:PSORXED("DFLG") PROCESSX
"RTN","PSORXED",28,0)
 N X S X="PSXEDIT" X ^%ZOSF("TEST") K X I $T D ^PSXEDIT I $G(PSXOUT) K PSXOUT G L1
"RTN","PSORXED",29,0)
 D DIE^PSORXED1
"RTN","PSORXED",30,0)
 ;
"RTN","PSORXED",31,0)
L1 D LOG,POST
"RTN","PSORXED",32,0)
 ;
"RTN","PSORXED",33,0)
PROCESSX Q
"RTN","PSORXED",34,0)
 ;
"RTN","PSORXED",35,0)
CHECK Q  L +^PSRX(PSORXED("IRXN")):$S(+$G(^DD("DILOCKTM"))>0:+^DD("DILOCKTM"),1:3) I '$T W $C(7),!!,"Rx Number is Locked by Another User!",! S PSORXED("DFLG")=1 H 5 Q
"RTN","PSORXED",36,0)
 I $G(^PSDRUG($P(PSORXED("RX0"),"^",6),"I"))]"",^("I")<DT D  G CHECKX
"RTN","PSORXED",37,0)
 . W !,$C(7),"This drug has been inactivated. ",! S PSORXED("DFLG")=1 Q
"RTN","PSORXED",38,0)
 K PSPOP I $G(PSODIV),$P(PSORXED("RX2"),"^",9)'=PSOSITE S PSPRXN=PSORXED("IRXN") D CHK1^PSOUTLA I $G(PSPOP)=1 S PSORXED("DFLG")=1 G CHECKX
"RTN","PSORXED",39,0)
 ;
"RTN","PSORXED",40,0)
 I $P(^PSRX(PSORXED("IRXN"),"STA"),"^")=14!($P(^("STA"),"^")=15) S PSORXED("DFLG")=1 W !!,$C(7),"Discontinued prescriptions cannot be edited.",! G CHECKX
"RTN","PSORXED",41,0)
 I $D(^PS(52.4,"B",PSORXED("IRXN"))) S PSORXED("DFLG")=1 W !!,$C(7),"Non-verified prescriptions cannot be edited.",!
"RTN","PSORXED",42,0)
 ;
"RTN","PSORXED",43,0)
CHECKX K PSPOP,DIR,DTOUT,DUOUT,Y,X Q
"RTN","PSORXED",44,0)
 ;
"RTN","PSORXED",45,0)
LOG K PSFROM S DA=PSORXED("IRXN"),(PSRX0,RX0)=PSORXED("RX0"),QTY=$P(RX0,"^",7),QTY=QTY-$P(^PSRX(DA,0),"^",7) K ZD(DA) S:'$O(^PSRX(DA,1,0)) ZD(DA)=$P(^PSRX(DA,2),"^",2)
"RTN","PSORXED",46,0)
 S COM="" F I=3,4,5:1:13,17 I $P(PSRX0,"^",I)'=$P(^PSRX(DA,0),"^",I) S PSI=$S(I=13:1,1:I),COM=COM_$P(^DD(52,PSI,0),"^")_" ("_$P(PSRX0,"^",I)_"),"
"RTN","PSORXED",47,0)
 ;
"RTN","PSORXED",48,0)
 N PSOFILDAT S PSOFILDAT=0   ; fill date edit flag
"RTN","PSORXED",49,0)
 I $P(PSORXED("RX2"),"^",2)'=$P(^PSRX(DA,2),"^",2) S COM=COM_$P(^DD(52,22,0),"^")_" ("_$P(PSORXED("RX2"),"^",2)_"),",PSOFILDAT=1     ; set flag indicating the original fill date was edited
"RTN","PSORXED",50,0)
 I $P(PSORXED("RX3"),"^",7)'=$P(^PSRX(DA,3),"^",7) S COM=COM_$P(^DD(52,12,0),"^")_" ("_$P(PSORXED("RX3"),"^",7)_"),"
"RTN","PSORXED",51,0)
 I PSOSIG'=$P($G(^PSRX(DA,"SIG")),"^") S COM=COM_$P(^DD(52,10,0),"^")_" ("_PSOSIG_"),"
"RTN","PSORXED",52,0)
 ;*298 Track PI and Oth Lang PI
"RTN","PSORXED",53,0)
 I PSOPINS'=$G(^PSRX(DA,"INS")) S COM=COM_$P(^DD(52,114,0),"^")_" ("_PSOPINS_"),"
"RTN","PSORXED",54,0)
 I PSOOINS'=$G(^PSRX(DA,"INSS")) S COM=COM_$P(^DD(52,114.1,0),"^")_" ("_PSOOINS_"),"
"RTN","PSORXED",55,0)
 I PSOTRN'=$G(^PSRX(DA,"TN")) S COM=COM_$P(^DD(52,6.5,0),"^")_" ("_PSOTRN_"),"
"RTN","PSORXED",56,0)
 D FILL
"RTN","PSORXED",57,0)
 I '$$RXRLDT^PSOBPSUT(PSORXED("IRXN"),PSOEDITF),COM="" D LBLCHK G:'PSOEDITL LOGX G LOG1
"RTN","PSORXED",58,0)
 G:COM="" LOGX K PSRX0 S X=$S($D(PSOCLC):PSOCLC,1:DUZ)
"RTN","PSORXED",59,0)
 S K=1,D1=0 F Z=0:0 S Z=$O(^PSRX(DA,"A",Z)) Q:'Z  S D1=Z,K=K+1
"RTN","PSORXED",60,0)
 S D1=D1+1 S:'($D(^PSRX(DA,"A",0))#2) ^(0)="^52.3DA^^^" S ^(0)=$P(^(0),"^",1,2)_"^"_D1_"^"_K
"RTN","PSORXED",61,0)
 ;
"RTN","PSORXED",62,0)
 ;PSO*7*366
"RTN","PSORXED",63,0)
 D NOW^%DTC S ^PSRX(DA,"A",D1,0)=%_"^E^"_$G(DUZ)_"^0^"_COM
"RTN","PSORXED",64,0)
 ;
"RTN","PSORXED",65,0)
LOG1 ;
"RTN","PSORXED",66,0)
 I QTY,$P(^PSRX(DA,2),"^",13) S ^PSDRUG($P(^PSRX(DA,0),"^",6),660.1)=$S($D(^PSDRUG(+$P(^PSRX(DA,0),"^",6),660.1)):^(660.1)+QTY,1:QTY)
"RTN","PSORXED",67,0)
 S:$P(RX0,"^",6)'=$P(^PSRX(DA,0),"^",6) ^PSDRUG(+$P(^PSRX(DA,0),"^",6),660.1)=$S($D(^PSDRUG(+$P(RX0,"^",6),660.1)):^(660.1)+$P(RX0,"^",7),1:$P(RX0,"^",7))
"RTN","PSORXED",68,0)
 S RX0=^PSRX(DA,0),RX2=^(2),J=DA,OEXDT=+$P(RX2,"^",6) D ^PSOEXDT S NEXDT=+$P(RX2,"^",6) I OEXDT'=NEXDT D
"RTN","PSORXED",69,0)
 .K ^PSRX("AG",OEXDT,DA) S ^PSRX("AG",NEXDT,DA)=""
"RTN","PSORXED",70,0)
 .S D=+$P(RX0,"^",2) K ^PS(55,D,"P","A",OEXDT,DA) S ^PS(55,D,"P","A",NEXDT,DA)=""
"RTN","PSORXED",71,0)
 K D,OEXDT,NEXDT
"RTN","PSORXED",72,0)
 ; 
"RTN","PSORXED",73,0)
 ; Do not add RX to the label list when there are:
"RTN","PSORXED",74,0)
 ;   1) Unresolved DUR/Refill Too Soon/RRR rejects
"RTN","PSORXED",75,0)
 ; But if the Fill Date was modified then bypass these checks and allow to update the label list  - PSO*7*403
"RTN","PSORXED",76,0)
 I 'PSOFILDAT,$$ECMECHK^PSOREJU3(DA,$G(PSOEDITF)) G LOGX
"RTN","PSORXED",77,0)
 ;
"RTN","PSORXED",78,0)
 I $$RXRLDT^PSOBPSUT(DA,$G(PSOEDITF)) G LOGX
"RTN","PSORXED",79,0)
 S PTLBL=1,PSOACT=0
"RTN","PSORXED",80,0)
 F  S PSOACT=$O(^PSRX(DA,"A",PSOACT)) Q:'PSOACT  D  Q:'PTLBL
"RTN","PSORXED",81,0)
 . I $$GET1^DIQ(52.3,PSOACT_","_DA,.05,"E")["CMOP Suspense Label Printed" S PTLBL=0
"RTN","PSORXED",82,0)
 I 'PTLBL G LOGX
"RTN","PSORXED",83,0)
 ;
"RTN","PSORXED",84,0)
 G:+$P(^PSRX(J,"STA"),"^") LOGX S RXFL(PSORXED("IRXN"))=$S($G(PSOEDITF):$G(PSOEDITF),1:0) I $G(PSORX("PSOL",1))']"" S PSORX("PSOL",1)=PSORXED("IRXN")_"," D SETRP G LOGX
"RTN","PSORXED",85,0)
 ;
"RTN","PSORXED",86,0)
 F PSOX1=0:0 S PSOX1=$O(PSORX("PSOL",PSOX1)) Q:'PSOX1  S PSOX2=PSOX1
"RTN","PSORXED",87,0)
 I $L(PSORX("PSOL",PSOX2))+$L(PSORXED("IRXN"))<220 D  G LOGX
"RTN","PSORXED",88,0)
 .I PSORX("PSOL",PSOX2)'[PSORXED("IRXN")_"," S PSORX("PSOL",PSOX2)=PSORX("PSOL",PSOX2)_PSORXED("IRXN")_"," D SETRP
"RTN","PSORXED",89,0)
 E  I $G(PSORX("PSOL",PSOX2+1))'[PSORXED("IRXN")_"," S PSORX("PSOL",PSOX2+1)=PSORXED("IRXN")_"," D SETRP   ;;PSO*7*246
"RTN","PSORXED",90,0)
 ;
"RTN","PSORXED",91,0)
LOGX K PSOEDITF,PSOEDITR,PSOEDITL D:$G(RFED) ^PSORXED1
"RTN","PSORXED",92,0)
 Q
"RTN","PSORXED",93,0)
 ;
"RTN","PSORXED",94,0)
POST ; D NEXT D:$G(^PSRX(PSORXED("IRXN"),"IB"))]"" COPAY K PSODAYS,PSORXST
"RTN","PSORXED",95,0)
 D NEXT D COPAY K PSODAYS,PSORXST
"RTN","PSORXED",96,0)
 Q
"RTN","PSORXED",97,0)
 ;
"RTN","PSORXED",98,0)
COPAY S DA=PSORXED("IRXN") I 'RFD,PSODAYS'=+$P(^PSRX(DA,0),"^",8) I +$G(^PSRX(DA,"IB"))!($P($G(^PSRX(DA,"PFS")),"^",2)) D CPCK G RXST
"RTN","PSORXED",99,0)
 I RFD,+$G(^PSRX(DA,1,RFD,0)),PSODAYS'=$P($G(^PSRX(DA,1,RFD,0)),"^",10) I +$G(^PSRX(DA,"IB"))!($P($G(^PSRX(DA,1,RFD,"PFS")),"^",2)) D CPCK
"RTN","PSORXED",100,0)
 ;
"RTN","PSORXED",101,0)
RXST G:PSORXST=+$P($G(^PS(53,+$P(^PSRX(DA,0),"^",3),0)),"^",7) COPAYX
"RTN","PSORXED",102,0)
 W !,$C(7),"Patient Status field for this Rx has been changed from a ",$S(PSORXST=0:"COPAYMENT ELIGIBLE",PSORXST=1:"COPAYMENT EXEMPT",1:"")
"RTN","PSORXED",103,0)
 W !,"patient status."
"RTN","PSORXED",104,0)
 W "  The copay status for this Rx will be automatically adjusted."
"RTN","PSORXED",105,0)
 W !,"If action needs to be taken to adjust charges you MUST use the"
"RTN","PSORXED",106,0)
 W !,"Reset Copay Status/Cancel Charges option."
"RTN","PSORXED",107,0)
 W ! K DIR S DIR(0)="E",DIR("A")="Press Return to continue" D ^DIR K DIR
"RTN","PSORXED",108,0)
 I +$P($G(^PS(53,+$P(^PSRX(DA,0),"^",3),0)),"^",7)=1 D  ; SET TO NO COPAY AND AUDIT CHANGE
"RTN","PSORXED",109,0)
 . I '$D(^PSRX(DA,"IB")) S ^PSRX(DA,"IB")=""
"RTN","PSORXED",110,0)
 . S $P(^PSRX(DA,"IB"),"^",1)=""
"RTN","PSORXED",111,0)
 . S PSODA=DA
"RTN","PSORXED",112,0)
 . S PSOREF=RFD
"RTN","PSORXED",113,0)
 . S PSOCOMM="Rx Patient Status Change"
"RTN","PSORXED",114,0)
 . S PSOOLD="Copay"
"RTN","PSORXED",115,0)
 . S PSONW="No Copay"
"RTN","PSORXED",116,0)
 . S PREA="R"
"RTN","PSORXED",117,0)
 . D ACTLOG^PSOCPA
"RTN","PSORXED",118,0)
 ;
"RTN","PSORXED",119,0)
COPAYX K DA,PSODAYS,PSO,PSODA,PSOFLAG,PSORXST,RFD,PSOREF,PSOCOMM,PSOOLD,PSONW
"RTN","PSORXED",120,0)
 Q
"RTN","PSORXED",121,0)
 ;
"RTN","PSORXED",122,0)
CPCK ;update COPAY
"RTN","PSORXED",123,0)
 I 'RFD,'$D(^PSRX(DA,"PFS")) G CPCK1
"RTN","PSORXED",124,0)
 I RFD,'$D(^PSRX(DA,1,RFD,"PFS")) G CPCK1
"RTN","PSORXED",125,0)
 N PSOPFS S PSOPFS=$P($S('RFD:^PSRX(DA,"PFS"),1:^PSRX(DA,1,RFD,"PFS")),"^",1,2)
"RTN","PSORXED",126,0)
 I +$G(PSOPFS)>0&('$P($G(PSOPFS),"^",2)) K PSOPFS Q
"RTN","PSORXED",127,0)
 I +$G(PSOPFS)<1 K PSOPFS
"RTN","PSORXED",128,0)
 E  S PSOPFS="1^"_PSOPFS
"RTN","PSORXED",129,0)
 ;
"RTN","PSORXED",130,0)
CPCK1 N TYPE S PSO=2,PSODA=DA,PSOFLAG=1,PSOPAR7=$G(^PS(59,PSOSITE,"IB")),TYPE=RFD D RXED^PSOCPA K TYPE
"RTN","PSORXED",131,0)
 Q
"RTN","PSORXED",132,0)
 ;
"RTN","PSORXED",133,0)
NEXT D NEXT^PSOUTIL(.PSORXED) K DIE,DR,DA S DIE="^PSRX(",DA=PSORXED("IRXN")
"RTN","PSORXED",134,0)
 S DR="101///"_$P(PSORXED("RX3"),"^")_";102///"_$P(PSORXED("RX3"),"^",2) D ^DIE K DIE,DR,DA,X,Y
"RTN","PSORXED",135,0)
 Q
"RTN","PSORXED",136,0)
 ;
"RTN","PSORXED",137,0)
EOJ K PSOSIG,PSORXED,PSOLIST,END,PSRX0,PSOPINS,PSOOINS
"RTN","PSORXED",138,0)
 D EX^PSORXED1
"RTN","PSORXED",139,0)
 Q
"RTN","PSORXED",140,0)
 ;
"RTN","PSORXED",141,0)
FILL ;
"RTN","PSORXED",142,0)
 K PSOEDITF,PSOEDITR,PSOERF
"RTN","PSORXED",143,0)
 F PSOEZ=0:0 S PSOEZ=$O(^PSRX(DA,1,PSOEZ)) Q:'PSOEZ  S:$D(^PSRX(DA,1,PSOEZ,0)) PSOERF=PSOEZ
"RTN","PSORXED",144,0)
 S PSOEDITF=$S($G(PSOERF):+$G(PSOERF),1:0)
"RTN","PSORXED",145,0)
 I PSOEDITF S PSOEDITR=$S($P($G(^PSRX(DA,1,PSOEDITF,0)),"^",18):1,1:0) G FILLX
"RTN","PSORXED",146,0)
 S PSOEDITR=$S($P($G(^PSRX(DA,2)),"^",13):1,1:0)
"RTN","PSORXED",147,0)
 ;
"RTN","PSORXED",148,0)
FILLX K PSOERF,PSOEZ
"RTN","PSORXED",149,0)
 Q
"RTN","PSORXED",150,0)
 ;
"RTN","PSORXED",151,0)
LBL ;
"RTN","PSORXED",152,0)
 S PSOEDITL=0 N PSOECMES S PSOECMES="",PSOECMES=$$STATUS^PSOBPSUT(PSORXED("IRXN"),PSOEDITF)
"RTN","PSORXED",153,0)
 I PSOTRIC D  Q:'PSOEDITL
"RTN","PSORXED",154,0)
 . I PSOECMES["IN PROGRESS"!(PSOECMES["REJECTED") S PSOEDITL=0 Q
"RTN","PSORXED",155,0)
 . I $$FIND^PSOREJUT(PSORXED("IRXN"),PSOEDITF,,,1) S PSOEDITL=0 Q
"RTN","PSORXED",156,0)
 . I ",12,14,15,"[(","_$P($G(^PSRX(PSORXED("IRXN"),"STA")),"^")_",") S PSOEDITL=0 Q
"RTN","PSORXED",157,0)
 . I COM="" S:'$G(PSOEDITF)&$G(PSOEDITR) PSOEDITL=2 Q
"RTN","PSORXED",158,0)
 Q:PSOEDITL=2&($G(PSOTRIC))&(COM="")
"RTN","PSORXED",159,0)
 I COM["PROV"!(COM["QTY")!(COM["DAYS")!(COM["MAIL")!(COM["UNIT")!(COM["FILL DATE")!(COM["REMARKS") I COM'["STATUS",COM'["CLINIC",COM'["DRUG",COM'["REFILLS",COM'["ISSUE",COM'["SIG",COM'["TRADE" D  Q
"RTN","PSORXED",160,0)
 .I $G(PSOEDITF) S PSOEDITL=1 Q
"RTN","PSORXED",161,0)
 .I '$G(PSOEDITF),'$G(PSOEDITR),PSOTRIC S PSOEDITL=2 Q
"RTN","PSORXED",162,0)
 .I '$G(PSOEDITF),$G(PSOEDITR) S PSOEDITL=2
"RTN","PSORXED",163,0)
 I '$G(PSOEDITF),$G(PSOEDITR) S PSOEDITL=2 Q
"RTN","PSORXED",164,0)
 I '$G(PSOEDITF),'$G(PSOEDITR) S PSOEDITL=0 Q
"RTN","PSORXED",165,0)
 I $G(RXRP(DA)) S PSOEDITL=1 Q
"RTN","PSORXED",166,0)
 I '$G(RXRP(DA)),$G(PSOEDITR) S PSOEDITL=2 Q
"RTN","PSORXED",167,0)
 S PSOEDITL=0
"RTN","PSORXED",168,0)
 Q
"RTN","PSORXED",169,0)
 ;
"RTN","PSORXED",170,0)
LBLCHK ;
"RTN","PSORXED",171,0)
 ; If the PSOEDITL flag is set to 1, the user will be given the QUEUE
"RTN","PSORXED",172,0)
 ; prompt; if set to 0, the QUEUE prompt is suppressed.
"RTN","PSORXED",173,0)
 ; PSORX("NOLABEL") is used to determine if the Label Prompt should
"RTN","PSORXED",174,0)
 ; be displayed to the user by calling routine.
"RTN","PSORXED",175,0)
 ;
"RTN","PSORXED",176,0)
 S PSOEDITL=0
"RTN","PSORXED",177,0)
 S PSORX("NOLABEL")=1
"RTN","PSORXED",178,0)
 ;
"RTN","PSORXED",179,0)
 I $$RXRLDT^PSOBPSUT(PSORXED("IRXN"),PSOEDITF) Q
"RTN","PSORXED",180,0)
 ;
"RTN","PSORXED",181,0)
 I $$PTLBL^PSOREJP2(PSORXED("IRXN"),PSOEDITF) D
"RTN","PSORXED",182,0)
 . S PSORX("NOLABEL")=0
"RTN","PSORXED",183,0)
 . I $D(PSORX("QFLG")) S PSOEDITL=1
"RTN","PSORXED",184,0)
 . E  D PRINT^PSOREJP3(PSORXED("IRXN"),PSOEDITF)
"RTN","PSORXED",185,0)
 Q
"RTN","PSORXED",186,0)
 ;
"RTN","PSORXED",187,0)
ASKL ;
"RTN","PSORXED",188,0)
 W ! K DIR S DIR("?",1)="You have edited a fill that has already been released. Do you want to",DIR("?",2)="include this prescription as one of the prescriptions to be acted upon",DIR("?",3)="at the label prompt."
"RTN","PSORXED",189,0)
 S DIR("?")="Enter 'Yes' to generate a reprint label request."
"RTN","PSORXED",190,0)
 S DIR(0)="Y",DIR("A")="The last fill has been released, do you want a reprint label",DIR("B")="Y" D ^DIR K DIR I Y'=1 S PSOEDITL=0 Q  ; User did not reply as "YES" - don't prompt for label device
"RTN","PSORXED",191,0)
 S PSOEDITL=1
"RTN","PSORXED",192,0)
 Q
"RTN","PSORXED",193,0)
 ;
"RTN","PSORXED",194,0)
SETRP I $P($G(^PSRX(PSORXED("IRXN"),"STA")),"^")'=5,$G(PSOEDITL)=0 S RXRP(PSORXED("IRXN"))="1^^^1",VALMSG="Label will reprint due to Edit"
"RTN","PSORXED",195,0)
 Q
"RTN","PSORXEDT")
0^4^B55389504
"RTN","PSORXEDT",1,0)
PSORXEDT ;BIR/SAB - edit rx routine ;10/21/98
"RTN","PSORXEDT",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**21,23,44,71,146,185,148,253,390,372,416,313,427,422,402,500,482**;DEC 1997;Build 44
"RTN","PSORXEDT",3,0)
 ;External Reference to ^PS(55 supported by DBIA 2228
"RTN","PSORXEDT",4,0)
 ;External reference to $$BSA^PSSDSAPI supported by DBIA 5425
"RTN","PSORXEDT",5,0)
 D:'$D(PSOPAR) ^PSOLSET I '$D(PSOPAR) G EOJ Q
"RTN","PSORXEDT",6,0)
 K PSODRUG,PSOLIST,DIR,DIRUT,DUOUT,X,Y,PSOFROM,^TMP("PSOBEDT",$J),NOPP,CLOZPST,PSOTITRX,PSOMTFLG
"RTN","PSORXEDT",7,0)
 N PSOODOSP
"RTN","PSORXEDT",8,0)
 W !! S DIR(0)="FAO^1:245",DIR("A")="Edit Rx(s) => ",DIR("?",1)="Enter Rx Number or A List of numbers Separated",DIR("?")="by Commas, e.g. 1234A,345,937002Q."
"RTN","PSORXEDT",9,0)
 D ^DIR K DIR G:$D(DIRUT) EOJ
"RTN","PSORXEDT",10,0)
 S END=$L(X,","),BAD=0
"RTN","PSORXEDT",11,0)
 F I=1:1:END S RXM=$P(X,",",I) I +RXM F J=I+1:1:END S DUP=$P(X,",",J) I DUP=RXM S $P(X,",",J)="" W !?5,$C(7),"Duplicate Rx # "_RXM_"  was found in your list, ignoring it!",! S BAD=1
"RTN","PSORXEDT",12,0)
 S PSORLST=$P(X,",") F I=2:1:END S RXM=$P(X,",",I) S:RXM'?1.N.A BAD=1 I RXM?1.N.A S PSORLST=PSORLST_","_RXM
"RTN","PSORXEDT",13,0)
 F I=1:1:$L(PSORLST) S RXM=$P(PSORLST,",",I) I +RXM F J=I+1:1:END S DUP=$P(PSORLST,",",J) I DUP=RXM S $P(PSORLST,",",J)=""
"RTN","PSORXEDT",14,0)
 ;
"RTN","PSORXEDT",15,0)
BAD I PSORLST D  I 'Y K Y G PSORXEDT
"RTN","PSORXEDT",16,0)
 .W !?15,"=> "_PSORLST
"RTN","PSORXEDT",17,0)
 .K DIR,DIRUT S DIR(0)="Y",DIR("A")="Is this OKAY ",DIR("B")="Yes"
"RTN","PSORXEDT",18,0)
 .D ^DIR K DIR
"RTN","PSORXEDT",19,0)
 .I 'Y!$D(DIRUT) K X,PSORLST,BAD
"RTN","PSORXEDT",20,0)
 K BAD I 'PSORLST K PSORLST G PSORXEDT
"RTN","PSORXEDT",21,0)
 F I=1:1:$L(PSORLST,",") S RXM=$P(PSORLST,",",I) S GOOD=$D(^PSRX("B",RXM)) D
"RTN","PSORXEDT",22,0)
 .I 'GOOD W !!?5,"Couldn't Find RX # "_RXM H 3 Q
"RTN","PSORXEDT",23,0)
 .S RXN=$O(^PSRX("B",RXM,0)) D  I $P(^PSRX(RXN,"STA"),"^")=13 W !!?5,"Rx # "_RXM_" is marked for Deletion." H 3 Q
"RTN","PSORXEDT",24,0)
 ..I $G(RXN),$P($G(^PS(55,+$P($G(^PSRX(RXN,0)),"^",2),0)),"^",6)'=2 S PSOLOUD=1 D EN^PSOHLUP(+$P($G(^PSRX(RXN,0)),"^",2)) K PSOLOUD
"RTN","PSORXEDT",25,0)
 .D LIST K GOOD
"RTN","PSORXEDT",26,0)
 K GOOD,END
"RTN","PSORXEDT",27,0)
 ;
"RTN","PSORXEDT",28,0)
EPH ; - Entry for Epharmacy Rx Edit (PSOREJP1)
"RTN","PSORXEDT",29,0)
 F PSOT1=1:1 Q:'$D(PSOLIST(PSOT1))  F PSOLST2=1:1:$L(PSOLIST(PSOT1),",") S ORN=$P(PSOLIST(PSOT1),",",PSOLST2) D:+ORN PT
"RTN","PSORXEDT",30,0)
 ;
"RTN","PSORXEDT",31,0)
 ; If variable PSOREJCT is set, the EPH entry point was called by
"RTN","PSORXEDT",32,0)
 ; EDT^PSOREJP1, which is invoked by the ED Edit Rx Action on the
"RTN","PSORXEDT",33,0)
 ; ePharmacy Reject Info Screen.  If set, PSOREJCT will be Rx IEN ^ Fill.
"RTN","PSORXEDT",34,0)
 ; If the Rx is not released, and the Status is not Suspended, and the
"RTN","PSORXEDT",35,0)
 ; PSORX("NOLABEL") flag is not set, then add this Rx to the PSORX("PSOL")
"RTN","PSORXEDT",36,0)
 ; array.  The ED Edit Rx Action sends only one RX, so add as entry 1.
"RTN","PSORXEDT",37,0)
 I $G(PSOREJCT),'$$RXRLDT^PSOBPSUT(+PSOREJCT,$P(PSOREJCT,U,2)),$$GET1^DIQ(52,+PSOREJCT_",",100,"I")'=5,'$G(PSORX("NOLABEL")) S PSORX("PSOL",1)=+PSOREJCT
"RTN","PSORXEDT",38,0)
 ;
"RTN","PSORXEDT",39,0)
 ;call to add bingo board data to file 52.11
"RTN","PSORXEDT",40,0)
 K POP,PSOLIST,TM,TM1 G:'$O(PSORX("PSOL",0)) NX
"RTN","PSORXEDT",41,0)
 D:$G(PSORX("PSOL",1))]"" ^PSORXL K PSORX G:$G(NOBG) NX
"RTN","PSORXEDT",42,0)
 ;
"RTN","PSORXEDT",43,0)
PRF G:'$P(PSOPAR,"^",8)!($G(NOPP)="H")!($G(NOPP)="S")!('$D(^TMP("PSOBEDT",$J))) BBG
"RTN","PSORXEDT",44,0)
 I $O(^TMP("PSOBEDT",$J,0)),$P(PSOPAR,"^",8) S PSOFROM="NEW",PSOION=ION K RXRS
"RTN","PSORXEDT",45,0)
 G:$D(PSOPROP)&($G(PSOPROP)'=ION) QUP
"RTN","PSORXEDT",46,0)
 I '$D(PSOPROP)!($G(PSOPROP)=ION) D  G:$G(POP)!($E(IOST)["C")!(PSOION=ION) BBG
"RTN","PSORXEDT",47,0)
 .S PSOION=ION W !,"Profiles must be sent to Printer !!",! K IOP,%ZIS,IO("Q"),POP
"RTN","PSORXEDT",48,0)
 .S %ZIS="MNQ",%ZIS("A")="Select Profile Device: " D ^%ZIS K %ZIS("A")
"RTN","PSORXEDT",49,0)
 .Q:$G(POP)!($E(IOST)["C")!(PSOION=ION)  S PSOPROP=ION
"RTN","PSORXEDT",50,0)
 ;
"RTN","PSORXEDT",51,0)
QUP S X1=DT,X2=-120 D C^%DTC S PSODTCUT=X,HOLDRPAS=$G(PSOPRPAS),PSOPRPAS=$P(PSOPAR,"^",13)
"RTN","PSORXEDT",52,0)
 F DFN=0:0 S DFN=$O(^TMP("PSOBEDT",$J,DFN)) Q:'DFN  S PPL=^TMP("PSOBEDT",$J,DFN,0) D
"RTN","PSORXEDT",53,0)
 .S ZTRTN="DQ^PSOPRF",ZTIO=PSOPROP,ZTDESC="Outpatient Pharmacy Patient Profiles",ZTDTH=$H
"RTN","PSORXEDT",54,0)
 .F G="PSOPAR","PSODTCUT","PSOPRPAS","DFN","PSOSITE","NEW1","NEW11","PSOBMST","PFIO","PPL" S:$D(@G) ZTSAVE(G)=""
"RTN","PSORXEDT",55,0)
 .D ^%ZTLOAD
"RTN","PSORXEDT",56,0)
 W:$D(ZTSK) !,"PROFILE(S) QUEUED to PRINT",!! K G,ZTSK D ^%ZISC
"RTN","PSORXEDT",57,0)
 S PSOPRPAS=$G(HOLDRPAS) K:PSOPRPAS']"" PSOPRPAS K HOLDRPAS
"RTN","PSORXEDT",58,0)
 ;
"RTN","PSORXEDT",59,0)
BBG K DFN F PSODFN=0:0 S PSODFN=$O(^TMP("PSOBEDT",$J,PSODFN)) Q:'PSODFN  I $G(^TMP("PSOBEDT",$J,PSODFN,1)),$D(DISGROUP) S TM=$P($G(^TMP("PSOBB",$J)),"^"),TM1=$P($G(^($J)),"^",2),PPL=^TMP("PSOBEDT",$J,PSODFN,0) D ^PSOBING1
"RTN","PSORXEDT",60,0)
 ;
"RTN","PSORXEDT",61,0)
NX ;
"RTN","PSORXEDT",62,0)
 K %X,%Y,ACTREF,ACTREN,D,D0,DAT,DFN,DIC,DIQ,DQ,DRG,END,FDR,PSOBEDT,TM,TM1,PSOT1,PSOLST2,NOBG,BBFLG,BINGCRT,BINGRTE,C,CC,CMOP,COM,CT,D1,DI,DREN,BBRX,PSOFROM,POP,PSORX("QFLG"),IT,PSOERR,PSOBCK,PSOBM,PPL
"RTN","PSORXEDT",63,0)
 K ^TMP("PSOBEDT",$J),^TMP("PSOBB",$J),ZTSK,NOPP,VALMSG,VALMBCK D EOJ
"RTN","PSORXEDT",64,0)
END Q
"RTN","PSORXEDT",65,0)
 ;---------------------------------------------------------
"RTN","PSORXEDT",66,0)
PT ;
"RTN","PSORXEDT",67,0)
 N PSOTXEDT,PSOTPEXT S PSOTXEDT=$P($G(^PSRX(ORN,0)),"^",2) I PSOTXEDT I $D(^PS(52.91,PSOTXEDT,0)) I '$P(^PS(52.91,PSOTXEDT,0),"^",3)!($P(^(0),"^",3)>DT) D PDIR^PSOTPCAN(PSOTXEDT) I $G(PSOTPEXT) K PSOTPEXT,PSOTXEDT D EOJ Q
"RTN","PSORXEDT",68,0)
 K PSOTXEDT,PSOTPEXT
"RTN","PSORXEDT",69,0)
 D NOW^%DTC S TM=$E(%,1,12),TM1=$P(TM,".",2) S ^TMP("PSOBB",$J)=TM_"^"_TM1
"RTN","PSORXEDT",70,0)
 S $P(PSOLST(ORN),"^",2)=ORN,(PSOBEDT)=1
"RTN","PSORXEDT",71,0)
 S (DFN,PSODFN)=+$P(^PSRX(ORN,0),"^",2),PSORX("NAME")=$P(^DPT(DFN,0),"^") I PSODFN'=$G(PSOODOSP) K PSORX("DOSING OFF") S PSOODOSP=PSODFN
"RTN","PSORXEDT",72,0)
 D ICN^PSODPT(DFN)
"RTN","PSORXEDT",73,0)
 S RX0=^PSRX(ORN,0),RX2=$G(^(2)),RX3=$G(^(3))
"RTN","PSORXEDT",74,0)
 N PSOCHK S PSOCHK=$$CHK^PSODPT(PSODFN,1,1)  ;*422
"RTN","PSORXEDT",75,0)
 I PSOCHK=-1 D EOJ Q  ;*422
"RTN","PSORXEDT",76,0)
 D:$G(DUZ("AG"))="V" COPAY^PSOPTPST ; Deals with copay
"RTN","PSORXEDT",77,0)
 K ^TMP("PSOHDR",$J),^TMP("PSOPI",$J) D ^VADPT,ADD^VADPT
"RTN","PSORXEDT",78,0)
 S ^TMP("PSOHDR",$J,1,0)=VADM(1),^TMP("PSOHDR",$J,2,0)=$P(VADM(2),"^",2)
"RTN","PSORXEDT",79,0)
 S ^TMP("PSOHDR",$J,3,0)=$P(VADM(3),"^",2)
"RTN","PSORXEDT",80,0)
 S ^TMP("PSOHDR",$J,4,0)=VADM(4),^TMP("PSOHDR",$J,5,0)=$P(VADM(5),"^",2)
"RTN","PSORXEDT",81,0)
 S POERR=1 D RE^PSODEM K POERR,VALMBCK
"RTN","PSORXEDT",82,0)
 S ^TMP("PSOHDR",$J,6,0)=$S($P(WT,"^",8):$P(WT,"^",9)_" ("_$P(WT,"^")_")",1:"_______ (______)")
"RTN","PSORXEDT",83,0)
 S ^TMP("PSOHDR",$J,7,0)=$S($P(HT,"^",8):$P(HT,"^",9)_" ("_$P(HT,"^")_")",1:"_______ (______)") K VM,WT,HT S PSOHD=7
"RTN","PSORXEDT",84,0)
 S ^TMP("PSOHDR",$J,9,0)="",^TMP("PSOHDR",$J,10,0)=""
"RTN","PSORXEDT",85,0)
 S GMRA="0^0^111" D ^GMRADPT S ^TMP("PSOHDR",$J,8,0)=+$G(GMRAL)
"RTN","PSORXEDT",86,0)
 ;
"RTN","PSORXEDT",87,0)
 ; Display CrCl/BSA - show serum creatinine if CrCl can't be calculated
"RTN","PSORXEDT",88,0)
 S PSOBSA=$$BSA^PSSDSAPI(DFN),PSOBSA=$P(PSOBSA,"^",3),PSOBSA=$S(PSOBSA'>0:"_______",1:$J(PSOBSA,4,2)) S ^TMP("PSOHDR",$J,12,0)=PSOBSA
"RTN","PSORXEDT",89,0)
 S RSLT=$$CRCL^PSOORUT2(DFN)
"RTN","PSORXEDT",90,0)
 I ($P($G(RSLT),"^",2)["Not Found")&($P($G(RSLT),"^",3)<.01) S ZDSPL="  CrCL: "_$P(RSLT,"^",2)_" (CREAT: Not Found)"
"RTN","PSORXEDT",91,0)
 I ($P($G(RSLT),"^",2)["Not Found")&($P($G(RSLT),"^",3)>.01) S ZDSPL="  CrCL: "_$P(RSLT,"^",2)_"  (CREAT: "_$P($G(RSLT),"^",3)_"mg/dL "_$P($G(RSLT),"^")_")"
"RTN","PSORXEDT",92,0)
 I ($P($G(RSLT),"^",2)>0)&($P($G(RSLT),"^",3)>.01) S ZDSPL="  CrCL: "_$P(RSLT,"^",2)_"(est.)"_" (CREAT: "_$P($G(RSLT),"^",3)_"mg/dL "_$P($G(RSLT),"^")_")"
"RTN","PSORXEDT",93,0)
 S ^TMP("PSOHDR",$J,13,0)=ZDSPL
"RTN","PSORXEDT",94,0)
 K PSOBSA,RSLT,ZDSPL
"RTN","PSORXEDT",95,0)
 ;
"RTN","PSORXEDT",96,0)
 D NOW^%DTC S TM=$E(%,1,12),TM1=$P(TM,".",2) S ^TMP("PSOBB",$J)=TM_"^"_TM1
"RTN","PSORXEDT",97,0)
 S PSOLOUD=1 D:$P($G(^PS(55,PSODFN,0)),"^",6)'=2 EN^PSOHLUP(PSODFN) K PSOLOUD
"RTN","PSORXEDT",98,0)
 S PSOX=$G(^PS(55,PSODFN,"PS")) I PSOX]"" S PSORX("PATIENT STATUS")=$P($G(^PS(53,PSOX,0)),"^")
"RTN","PSORXEDT",99,0)
 D CLEAR^VALM1
"RTN","PSORXEDT",100,0)
 S STA="ACTIVE^NON-VERIFIED^REFILL^HOLD^NON-VERIFIED^SUSPENDED^^^^^^EXPIRED^DISCONTINUED^^DISCONTINUED^DISCONTINUED^HOLD"
"RTN","PSORXEDT",101,0)
 S $P(PSOLST(ORN),"^",3)=$P(STA,"^",$P(^PSRX(ORN,"STA"),"^")+1),PSLST=ORN,ORD=1
"RTN","PSORXEDT",102,0)
 D ACT^PSOORNE2
"RTN","PSORXEDT",103,0)
 ;
"RTN","PSORXEDT",104,0)
EOJ ;
"RTN","PSORXEDT",105,0)
 K INS1,HDR,IK,INDT,LOG,NODE,ORN,P1,PSI,PSL,PSOLION,PSNP,PSOACT,PSOBM,PSOCLC,PSOCNT,PSODD,PSODFN,PSOHD,PSOJ,PSOLST,PSOOI,PSOPF,PSLST
"RTN","PSORXEDT",106,0)
 K PSOIBQS,PSORLST,PSOSD,PSOSIG,PSPRXN,PSORX0,PSORX1,PTST,REFL,RF,RFD,RIFN,RLD,RPH,RTS,RX0,RX1,RX2,RX3,RXM,RXOR,SIG,SIGOK
"RTN","PSORXEDT",107,0)
 D KVA^VADPT K SLPPL,ST,STA,^TMP("PS",$J),PSOQFLG,PSORXED,PSOEDIT,DIR,DIRUT,DUOUT,DTOUT,PSOLOUD,GMRAL,GG,FEV,ACNT
"RTN","PSORXEDT",108,0)
 D FULL^VALM1 K ^TMP("PSOAL",$J),^TMP("PSOAO",$J),^TMP("PSOSF",$J),^TMP("PSOPF",$J),^TMP("PSOPI",$J),^TMP("PSOPO",$J),^TMP("PSOHDR",$J),PAT
"RTN","PSORXEDT",109,0)
 K JJ,K,MM,PSDAYS,PSOAC,PSOAL,PSOCOU,PSOCOUU,PSONEW,PSODRUG,PSONOOR,PSRX0,QTY,REA,RFCNT,RFDT,RXDA,RXFL,RXREF,SUB,X,Z,ZII
"RTN","PSORXEDT",110,0)
 K ACOM,CRIT,DA,DDH,DGI,DGS,PSONEW3,SER,SERS,ZONE,RN,RXN,PSOX,PSOERR,ORD,PSOBCK,PSOBILL,SURX,PSORX("QFLG"),PSORX("FN"),CLOZPAT
"RTN","PSORXEDT",111,0)
 Q
"RTN","PSORXEDT",112,0)
 ;
"RTN","PSORXEDT",113,0)
LIST ;
"RTN","PSORXEDT",114,0)
 I $G(^PSRX(RXN,0))']"" W !,$C(7),"Rx data is not on file !",! G LISTX
"RTN","PSORXEDT",115,0)
 I $P(^PSRX(RXN,0),"^",15)=13 S PSVD=1 W !,$C(7),"Rx # "_RXM_" has been deleted."
"RTN","PSORXEDT",116,0)
 S RXN1=RXN,RXM1=RXM D:'$G(PSVD) LST1 W "." S RXN=RXN1,RXM=RXM1 K RXN1,RXM1
"RTN","PSORXEDT",117,0)
 F  S RXN=$O(^PSRX("B",RXM,RXN)) Q:'RXN  D
"RTN","PSORXEDT",118,0)
 .I $G(^PSRX(RXN,0))']"" Q
"RTN","PSORXEDT",119,0)
 .I $P(^PSRX(RXN,0),"^",15)=13 Q
"RTN","PSORXEDT",120,0)
 .D LST1
"RTN","PSORXEDT",121,0)
 K RXN1 G LISTX
"RTN","PSORXEDT",122,0)
 Q
"RTN","PSORXEDT",123,0)
 ;
"RTN","PSORXEDT",124,0)
LST1 I $G(PSOLIST(1))']"" S PSOLIST(1)=RXN_"," G LISTX
"RTN","PSORXEDT",125,0)
 F PSOX1=0:0 S PSOX1=$O(PSOLIST(PSOX1)) Q:'PSOX1  S PSOX2=PSOX1
"RTN","PSORXEDT",126,0)
 I $L(PSOLIST(PSOX2))+$L(RXN)<220 S:RXN_","'[PSOLIST(PSOX2) PSOLIST(PSOX2)=PSOLIST(PSOX2)_RXN_","
"RTN","PSORXEDT",127,0)
 E  S:RXN_","'[PSOLIST(PSOX2+1) PSOLIST(PSOX2+1)=RXN_","
"RTN","PSORXEDT",128,0)
 ;
"RTN","PSORXEDT",129,0)
LISTX K PSOX1,PSOX2,RXN,PSVD
"RTN","PSORXEDT",130,0)
 Q
"RTN","PSORXL1")
0^16^B54060761
"RTN","PSORXL1",1,0)
PSORXL1 ;BIR/SAB - action to be taken on prescriptions ; 7/5/12 12:04pm
"RTN","PSORXL1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**36,46,148,260,274,287,289,358,251,385,403,409,482**;DEC 1997;Build 44
"RTN","PSORXL1",3,0)
 ;External reference to $$DS^PSSDSAPI supported by DBIA 5424
"RTN","PSORXL1",4,0)
S S SPPL="",PPL1=1 S:'$G(PPL) PPL=$G(PSORX("PSOL",PPL1)) G:$G(PPL)']"" D1
"RTN","PSORXL1",5,0)
S1 F PI=1:1 Q:$P(PPL,",",PI)=""  S DA=$P(PPL,",",PI) D
"RTN","PSORXL1",6,0)
 .S PSORFD1=0 F PSOX7=0:0 S PSOX7=$O(^PSRX(DA,1,PSOX7)) Q:'$G(PSOX7)  S (PSORFD1)=PSOX7
"RTN","PSORXL1",7,0)
 .I 'PSORFD1,$$DS^PSSDSAPI,($G(^PS(52.4,DA,1))>0)&('$D(^XUSEC("PSORPH",DUZ))) S SPPL=SPPL_DA_"," Q
"RTN","PSORXL1",8,0)
 .I 'PSORFD1,$P(^PSRX(DA,"STA"),"^")=4!($D(^PSRX(DA,"DRI"))&('$D(^XUSEC("PSORPH",DUZ)))) S SPPL=SPPL_DA_"," Q
"RTN","PSORXL1",9,0)
 .I $P(^PSRX(DA,"STA"),"^")<10,$P(^("STA"),"^")'=4 D SUS Q
"RTN","PSORXL1",10,0)
 .K PSORFD1,PSOX7
"RTN","PSORXL1",11,0)
 I $G(SPPL)]"" D  K DIR S DIR(0)="E",DIR("A")="Press Return to Continue" D ^DIR K DIR,DUOUT,DTOUT,DIRUT
"RTN","PSORXL1",12,0)
 .W !!,$C(7),"Drug Interaction Rx(s) and/or Dose Warning: " F I=1:1 Q:$P(SPPL,",",I)=""  W $P(^PSRX($P(SPPL,",",I),0),"^")_", "
"RTN","PSORXL1",13,0)
 .I $G(PSOLAP)=""!($G(PSOLAP)=$G(ION)) W !,"Label device must be selected for Drug Interaction or dose warning label!"
"RTN","PSORXL1",14,0)
 .S PPL=SPPL,DG=1 N PPL1 D Q^PSORXL K DG,SPPL
"RTN","PSORXL1",15,0)
 S SUSPT="SUSPENSE" G D1
"RTN","PSORXL1",16,0)
 Q
"RTN","PSORXL1",17,0)
SUS S ACT=1,RXN=DA,RX0=^PSRX(DA,0),SD=$S($G(ZD(DA)):$E(ZD(DA),1,7),1:$P(^(3),"^")),RXS=$O(^PS(52.5,"B",DA,0)) I RXS S RXCMOP=$P($G(^PS(52.5,RXS,0)),"^",7) D  Q:$G(DFLG)!($G(PSOWFLG))
"RTN","PSORXL1",18,0)
 .;checks to see if future fill exists
"RTN","PSORXL1",19,0)
 .S PSOWFLG=0 I '$G(RXPR(DA)),$P($G(^PS(52.5,RXS,"P")),"^")=0,$P($G(^PSRX(DA,"STA")),"^")=5 D SWARN Q:$G(PSOWFLG)
"RTN","PSORXL1",20,0)
 .K PSOWFLG I $G(RXPR(DA)),'$P($G(^PS(52.5,RXS,"P")),"^") D WARN Q:$G(DFLG)
"RTN","PSORXL1",21,0)
 .S DA=RXS,DIK="^PS(52.5," D ^DIK S DA=RXN I $P($G(^PSRX(RXN,"STA")),"^")=5 S $P(^("STA"),"^")=0
"RTN","PSORXL1",22,0)
 G:$G(RXRP(DA))!($G(RXPR(DA))) LOCK
"RTN","PSORXL1",23,0)
 I $G(PSXSYS) D SUS1^PSOCMOP I $G(XFLAG)=1 K XFLAG Q
"RTN","PSORXL1",24,0)
LOCK I $P($G(^PSRX(RXN,"STA")),"^")=3 G SUSQ
"RTN","PSORXL1",25,0)
 ; The PSOSITE variable will not be set by the code that processes the CMOP release message - PSO*7*403
"RTN","PSORXL1",26,0)
 I '$G(PSOSITE) N PSOSITE S PSOSITE=$$RXSITE^PSOBPSUT(RXN,$G(RXFL(RXN)))
"RTN","PSORXL1",27,0)
 S RXP=+$G(RXPR(DA)),DIC="^PS(52.5,",DIC(0)="L",X=RXN,DIC("DR")=".02///"_SD_";.03////"_$P(^PSRX(DA,0),"^",2)_";.04///M;.05///"_RXP_";.06////"_PSOSITE_";2///0" K DD,DO D FILE^DICN D  I +Y,'$G(RXP),$G(RXRP(RXN)) S $P(^PS(52.5,+Y,0),"^",12)=1
"RTN","PSORXL1",28,0)
 .K DD,DO I +Y,$G(PSOEXREP) S $P(^PS(52.5,+Y,0),"^",12)=1
"RTN","PSORXL1",29,0)
 .I +Y S $P(^PS(52.5,+Y,0),"^",13)=$G(RXFL(RXN))
"RTN","PSORXL1",30,0)
 S $P(^PSRX(RXN,"STA"),"^")=5,LFD=$E(SD,4,5)_"-"_$E(SD,6,7)_"-"_$E(SD,2,3) D ACT
"RTN","PSORXL1",31,0)
 W !!,$S(RXP:"Partial ",1:"")_"RX# ",$P(^PSRX(RXN,0),"^")_" has been suspended until "_LFD_"."
"RTN","PSORXL1",32,0)
 S VALMSG=$S(RXP:"Partial ",1:"")_"Rx# "_$P(^PSRX(RXN,0),"^")_" Has Been Suspended Until "_LFD_"."_$S($G(RXRP(RXN))&('$G(RXP)):" (Reprint)",1:"")
"RTN","PSORXL1",33,0)
 S COMM=$S(RXP:"Partial ",1:"")_"Rx# "_$P(^PSRX(RXN,0),"^")_" Has Been Suspended Until "_LFD_"."_$S($G(RXRP(RXN))&('$G(RXP)):" (Reprint)",1:"")
"RTN","PSORXL1",34,0)
 D:'$D(^TMP("PSORXN",$J,RXN)) EN^PSOHLSN1(RXN,"SC","ZS",COMM)
"RTN","PSORXL1",35,0)
 S:$D(^TMP("PSORXN",$J,RXN)) $P(^TMP("PSORXN",$J,RXN),"^",4)=COMM
"RTN","PSORXL1",36,0)
 ;
"RTN","PSORXL1",37,0)
 ; - If not a PARTIAL, reverse ECME Claim, if necessary
"RTN","PSORXL1",38,0)
 I '$G(RXFL(RXN)) S RXFL(RXN)=$$LSTRFL^PSOBPSU1(RXN)
"RTN","PSORXL1",39,0)
 I '$G(RXP),'$G(PSONPROG) D REVERSE^PSOBPSU1(RXN,,"DC",3)  ;PSONPROG - TRICARE or CHAMPVA in progress, don't reverse
"RTN","PSORXL1",40,0)
 K COMM
"RTN","PSORXL1",41,0)
 ;
"RTN","PSORXL1",42,0)
 ;Telephone refill does not use list manager
"RTN","PSORXL1",43,0)
 K:$G(VEXPSORX)!($G(VEXANS2)]"") VALMSG ;PSO*7*409
"RTN","PSORXL1",44,0)
 ;
"RTN","PSORXL1",45,0)
SUSQ Q
"RTN","PSORXL1",46,0)
 ;PSO*7*274 always recalculate RXF
"RTN","PSORXL1",47,0)
ACT S RXF=0 F I=0:0 S I=$O(^PSRX(DA,1,I)) Q:'I  S RXF=I S:I>5 RXF=I+1
"RTN","PSORXL1",48,0)
 S IR=0 F FDA=0:0 S FDA=$O(^PSRX(DA,"A",FDA)) Q:'FDA  S IR=FDA
"RTN","PSORXL1",49,0)
 S IR=IR+1,^PSRX(DA,"A",0)="^52.3DA^"_IR_"^"_IR
"RTN","PSORXL1",50,0)
 D NOW^%DTC S ^PSRX(DA,"A",IR,0)=%_"^S^"_DUZ_"^"_RXF_"^"_$S(RXP:"Partial ",1:"")_"RX "_$S($G(RXRP(DA))&('$G(RXP)):"Reprint ",1:"")_"Placed on Suspense until "_LFD K RXF,I,FDA,DIC,DIE,DR,Y,X,%,%H,%I
"RTN","PSORXL1",51,0)
 Q
"RTN","PSORXL1",52,0)
D1 I $O(PSORX("PSOL",$G(PPL1))) S PPL1=$O(PSORX("PSOL",$G(PPL1))),PPL=PSORX("PSOL",PPL1) G S1
"RTN","PSORXL1",53,0)
 G:$D(RXRS) RXS^PSORXL
"RTN","PSORXL1",54,0)
 K LBL,PPL1,PPL,DIR,%DT,%,SD,COUNT,EXDT,L,PDUZ,REF,REPRINT,RFDATE,RFL1,RFLL,RXN,WARN,ZY,FLD,PI,ZD,ACT,X,Y,DIRUT,DUOUT,DTOUT,DIROUT,DFLG,RXPD,PSOWFLG
"RTN","PSORXL1",55,0)
 Q
"RTN","PSORXL1",56,0)
WARN W ! K DIR,DIRUT,DUOUT,DTOUT,DFLG S Y=$P(^PS(52.5,RXS,0),"^",2) X ^DD("DD") S RXPD=Y,DIR(0)="SA^S:SUSPEND;Q:QUEUE;E:EXIT"
"RTN","PSORXL1",57,0)
 S DIR("A",1)="Rx #"_$P(^PSRX(DA,0),"^")_" is suspended "_$S($G(RXCMOP)]"":"for CMOP ",1:"")_"until "_RXPD
"RTN","PSORXL1",58,0)
 I $G(RXCMOP)]"" D  G WARN1
"RTN","PSORXL1",59,0)
 .W !!,"A partial entered for this Rx cannot be suspended."
"RTN","PSORXL1",60,0)
 .W !,"You may pull this fill from suspense or print the label now.",!!
"RTN","PSORXL1",61,0)
 .S DIR("A",2)=" ",DIR("A",3)="   Do you want to Queue to print",DIR("A")="                or Exit: "
"RTN","PSORXL1",62,0)
 S DIR("A",2)=" ",DIR("A",3)="   Do you want to: Suspend Partial",DIR("A",4)="                   Queue to print",DIR("A")="                or Exit:  "
"RTN","PSORXL1",63,0)
WARN1 S DIR("B")="EXIT",DIR("?")="^D HLP^PSORXL1" D ^DIR K DIR
"RTN","PSORXL1",64,0)
 I Y="E"!($D(DIRUT))!(Y="S"&($G(RXCMOP)]"")) S DA(1)=DA,DA=RXPR(DA),DIK="^PSRX("_DA(1)_",""P""," D ^DIK S ^PSRX(DA(1),"TYPE")=0,DFLG=1 W $C(7)," Partial Removed!" Q
"RTN","PSORXL1",65,0)
 I Y="Q" S DPPL=PPL,HOLDPPL1=$G(PPL1),DPI=PI,RXLTOP=1 S PPL=$G(RXN)_"," S PSPARTXX=1 D Q^PSORXL K PSPARTXX S DFLG=1,PPL=DPPL,PI=DPI,PPL1=$G(HOLDPPL1) K HOLDPPL1,DPPL,DPPI,DPI,RXLTOP Q
"RTN","PSORXL1",66,0)
 Q
"RTN","PSORXL1",67,0)
HLP I $G(RXCMOP)']"" W !!,"If you choose to suspend this partial Rx, the current suspended fill will",!,"be replaced by the partial.  You may want to pull this fill early instead.",!
"RTN","PSORXL1",68,0)
 I $G(RXCMOP)]"" W !!,"You cannot suspend a partial when a CMOP fill is in suspense, because the partial will replace the CMOP fill in suspense."
"RTN","PSORXL1",69,0)
 W !,"If you choose to queue this partial, the label will printout on the previous",!,"selected label printer.",!
"RTN","PSORXL1",70,0)
 W !,"You may exit without printing or suspending this partial.  This will also delete",!,"the partial Rx entered."
"RTN","PSORXL1",71,0)
 Q
"RTN","PSORXL1",72,0)
SWARN ;
"RTN","PSORXL1",73,0)
 S PSORXLDA=$G(DA),PSORXZD=$P($G(^PS(52.5,RXS,0)),"^",2)
"RTN","PSORXL1",74,0)
 W $C(7),!!,"Rx "_$P($G(^PSRX(DA,0)),"^")_" is already suspended "_$S($G(RXCMOP)]"":"for CMOP ",1:"")_"until "_$E(PSORXZD,4,5)_"-"_$E(PSORXZD,6,7)_"-"_$E(PSORXZD,2,3)_"." K PSORXZD
"RTN","PSORXL1",75,0)
 W !,"By suspending this fill, the fill that is already suspended will be overwritten",!,"and a label will not print for that fill!",!
"RTN","PSORXL1",76,0)
 N PSORF,PSOTRIC D TRIC(DA)
"RTN","PSORXL1",77,0)
 I PSOTRIC,$$STATUS^PSOBPSUT(DA,PSORF)'["PAYABLE" S PSOQFLAG=1 Q
"RTN","PSORXL1",78,0)
 K DIR S DIR(0)="SA^Q:QUEUE;S:SUSPEND",DIR("B")="Q",DIR("A")="Do you want to Queue to print or Suspend Rx "_$P($G(^PSRX(DA,0)),"^")_": " D ^DIR K DIR
"RTN","PSORXL1",79,0)
 I $G(Y)="S" K RXFL(PSORXLDA) G SWARNQ
"RTN","PSORXL1",80,0)
 I $G(Y)="Q" D  G SWARNQ
"RTN","PSORXL1",81,0)
 . S PSOKSPPL=$G(PPL),PSOZXPPL=$G(PPL1),PSOZXPI=$G(PI),RXLTOP=1
"RTN","PSORXL1",82,0)
 . S PPL=$G(RXN)_"," D SWARS D Q^PSORXL S PSOWFLG=1,PPL=PSOKSPPL
"RTN","PSORXL1",83,0)
 . S PI=PSOZXPI,PPL1=PSOZXPPL K PSOKSPPL,PSOZXPPL,PSOZXPI,RXLTOP,RXFL(+$G(PSORXLDA))
"RTN","PSORXL1",84,0)
 W !!,"Nothing queued to print for Rx "_$P($G(^PSRX(PSORXLDA,0)),"^"),! S PSOWFLG=1
"RTN","PSORXL1",85,0)
SWARNQ ;
"RTN","PSORXL1",86,0)
 S DA=$G(PSORXLDA) K PSORXLDA
"RTN","PSORXL1",87,0)
 Q
"RTN","PSORXL1",88,0)
SWARS ;
"RTN","PSORXL1",89,0)
 S PSOZXFL(PSORXLDA)=+$P($G(^PS(52.5,+$G(RXS),0)),"^",13) I '$G(PSOZXFL(PSORXLDA)) K PSOZXFL Q
"RTN","PSORXL1",90,0)
 S PSOZXFPL=$P(PSOKSPPL,",",+$G(PI),99)
"RTN","PSORXL1",91,0)
 S PSOZXFPN=$L(PSOZXFPL,PPL)-1
"RTN","PSORXL1",92,0)
 I $G(PSOZXFL(PSORXLDA)),$G(PSOZXFPN) S RXFL(PSORXLDA)=$G(PSOZXFL(PSORXLDA))-$G(PSOZXFPN)
"RTN","PSORXL1",93,0)
 K PSOZXFL,PSOZXFPL,PSOZXFPN
"RTN","PSORXL1",94,0)
 Q
"RTN","PSORXL1",95,0)
TRIC(PSORX) ;
"RTN","PSORXL1",96,0)
 S PSORF=$$LSTRFL^PSOBPSU1(PSORX)
"RTN","PSORXL1",97,0)
 S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(PSORX,PSORF,.PSOTRIC)
"RTN","PSORXL1",98,0)
 Q
"RTN","PSORXL1",99,0)
ECME ; - Looks for DUR/79 REJECTS and send Mail Rx's to ECME that have not been SUSPENDED
"RTN","PSORXL1",100,0)
 N PSOI,PSOJ,PSORX,PSORF,PSOACT,BWH,PPLTMP,PSOSTA,PSOTRIC,ESTAT
"RTN","PSORXL1",101,0)
 S PPLTMP=$G(PPL)
"RTN","PSORXL1",102,0)
 F PSOI=1:1 S PSORX=+$P($G(PPLTMP),",",PSOI) Q:'PSORX  D
"RTN","PSORXL1",103,0)
 . D TRIC(PSORX) S ESTAT=$P($$STATUS^PSOBPSUT(PSORX,PSORF),"^")
"RTN","PSORXL1",104,0)
 . I $G(PSOCKDC) D  Q  ;PSOCKDC variable is set in PSORXL and is used to eliminate label print for DC'ed Rx's
"RTN","PSORXL1",105,0)
 . . S PSOSTA=$$GET1^DIQ(52,PSORX,100,"I")
"RTN","PSORXL1",106,0)
 . . I PSOSTA=12!(PSOSTA=11)!((PSOSTA=5)&(ESTAT'="")) D
"RTN","PSORXL1",107,0)
 . . . I '$G(RXPR(PSORX)),$G(PPL) D RMV(PSORX,.PPL)
"RTN","PSORXL1",108,0)
 . I $G(RXPR(PSORX)) Q
"RTN","PSORXL1",109,0)
 . S PSOACT="",BWH=$S(PSORF:"RF",1:"OF")
"RTN","PSORXL1",110,0)
 . I $$FIND^PSOREJUT(PSORX,PSORF) D  I PSOACT="Q" D RMV(PSORX,.PPL) Q
"RTN","PSORXL1",111,0)
 . . S PSOACT=$$HDLG^PSOREJU1(PSORX,PSORF,"79,88",BWH,"OIQ","Q")
"RTN","PSORXL1",112,0)
 Q 
"RTN","PSORXL1",113,0)
RMV(RX,PPL) ; Remove the Rx from the label print queue
"RTN","PSORXL1",114,0)
 N XPPL,I
"RTN","PSORXL1",115,0)
 S XPPL=PPL,PPL="" F I=1:1:$L(XPPL,",") I $P(XPPL,",",I)'="",$P(XPPL,",",I)'=RX S PPL=PPL_$P(XPPL,",",I)_","
"RTN","PSORXL1",116,0)
 I PPL="" K PPL
"RTN","PSORXL1",117,0)
 Q
"RTN","PSORXVW1")
0^18^B75490408
"RTN","PSORXVW1",1,0)
PSORXVW1 ;BIR/SAB - view prescription con't ;12/4/07 12:28pm
"RTN","PSORXVW1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**35,47,46,71,99,117,156,193,210,148,258,260,240,281,359,354,367,386,408,427,499,509,482**;DEC 1997;Build 44
"RTN","PSORXVW1",3,0)
 ;External reference to ^DD(52 supported by DBIA 999
"RTN","PSORXVW1",4,0)
 ;External reference to ^VA(200 supported by DBIA 10060
"RTN","PSORXVW1",5,0)
 ;PSO*210 add call to WORDWRAP api
"RTN","PSORXVW1",6,0)
 ;
"RTN","PSORXVW1",7,0)
 I $P($G(^PSRX(RXN,"OR1")),"^",6) D
"RTN","PSORXVW1",8,0)
 .K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=$P(^PSRX(RXN,"OR1"),"^",6) D ^DIC
"RTN","PSORXVW1",9,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="           Filled By: "_$P(Y,"^",2) K DIC,X,Y
"RTN","PSORXVW1",10,0)
 I $P($G(^PSRX(RXN,"OR1")),"^",7) D
"RTN","PSORXVW1",11,0)
 .K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=$P(^PSRX(RXN,"OR1"),"^",7) D ^DIC
"RTN","PSORXVW1",12,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="          Checked By: "_$P(Y,"^",2) K DIC,X,Y
"RTN","PSORXVW1",13,0)
 K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=$P(RX0,"^",16) D ^DIC
"RTN","PSORXVW1",14,0)
 S $P(RN," ",35)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="   Entry By: "_$P(Y,"^",2)_$E(RN,$L($P(Y,"^",2))+1,35)
"RTN","PSORXVW1",15,0)
 S Y=$P(RX2,"^") X ^DD("DD")
"RTN","PSORXVW1",16,0)
 S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"Entry Date: "_$E($P(RX2,"^"),4,5)_"/"_$E($P(RX2,"^"),6,7)_"/"_$E($P(RX2,"^"),2,3)_" "_$P(Y,"@",2) K RN
"RTN","PSORXVW1",17,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" " ;,IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSORXVW1",18,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Original Fill Released: " I $P(RX2,"^",13) S DTT=$P(RX2,"^",13) D DAT S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_DAT K DAT,DTT
"RTN","PSORXVW1",19,0)
 I $P(RX2,"^",15) S DTT=$P(RX2,"^",15) D DAT S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"(Returned to Stock "_DAT_")" K DAT,DTT
"RTN","PSORXVW1",20,0)
 S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"      Routing: "_$S($P(RX0,"^",11)="W":"Window",1:"Mail")
"RTN","PSORXVW1",21,0)
 I $G(^PSRX(DA,"H"))]"",$P(^("STA"),"^")=3 D HLD
"RTN","PSORXVW1",22,0)
 D RF,PAR,ACT,COPAY^PSORXVW2,LBL,ECME^PSOORAL1,SPMP^PSOORAL1,^PSORXVW2:$O(^PSRX(DA,4,0))
"RTN","PSORXVW1",23,0)
 Q
"RTN","PSORXVW1",24,0)
ACT ;activity log
"RTN","PSORXVW1",25,0)
 N CNT
"RTN","PSORXVW1",26,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Activity Log:"
"RTN","PSORXVW1",27,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#   Date/Time            Reason         Rx Ref         Initiator Of Activity",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSORXVW1",28,0)
 I '$O(^PSRX(DA,"A",0)) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There's NO Activity to report" Q
"RTN","PSORXVW1",29,0)
 S CNT=0
"RTN","PSORXVW1",30,0)
 F N=0:0 S N=$O(^PSRX(DA,"A",N)) Q:'N  S P1=^(N,0) D
"RTN","PSORXVW1",31,0)
 .I $P(P1,"^",2)="M" Q
"RTN","PSORXVW1",32,0)
 .S DAT=$$FMTE^XLFDT($P(P1,"^"),2)_"             "
"RTN","PSORXVW1",33,0)
 .S IEN=IEN+1,CNT=CNT+1,^TMP("PSOAL",$J,IEN,0)=CNT_"   "_$E(DAT,1,21),$P(RN," ",15)=" ",REA=$P(P1,"^",2)
"RTN","PSORXVW1",34,0)
 .S REA=$F("HUCELPRWSIVDABXGKNM",REA)-1
"RTN","PSORXVW1",35,0)
 .I REA D
"RTN","PSORXVW1",36,0)
 ..S STA=$P("HOLD^UNHOLD^DISCONTINUED^EDIT^RENEWED^PARTIAL^REINSTATE^REPRINT^SUSPENSE^RETURNED^INTERVENTION^DELETED^DRUG INTERACTION^PROCESSED^X-INTERFACE^PATIENT INSTR.^PKI/DEA^DISP COMPLETED^ECME^","^",REA)
"RTN","PSORXVW1",37,0)
 ..S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_STA_$E(RN,$L(STA)+1,15)
"RTN","PSORXVW1",38,0)
 .E  S $P(STA," ",15)=" ",^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_STA
"RTN","PSORXVW1",39,0)
 .K STA,RN S $P(RN," ",15)=" ",RF=+$P(P1,"^",4)
"RTN","PSORXVW1",40,0)
 .S RFT=$S(RF>0&(RF<6):"REFILL "_RF,RF=6:"PARTIAL",RF>6:"REFILL "_(RF-1),1:"ORIGINAL")
"RTN","PSORXVW1",41,0)
 .K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=$P(P1,"^",3) D ^DIC
"RTN","PSORXVW1",42,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_RFT_$E(RN,$L(RFT)+1,15)_$E($S(+Y:$P(Y,"^",2),1:$P(P1,"^",3)),1,24)
"RTN","PSORXVW1",43,0)
 .;S:$P(P1,"^",5)]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Comments: "_$P(P1,"^",5)
"RTN","PSORXVW1",44,0)
 .I $P(P1,"^",5)]"" N PSOACBRK,PSOACBRV D
"RTN","PSORXVW1",45,0)
 ..S PSOACBRV=$P(P1,"^",5)
"RTN","PSORXVW1",46,0)
 ..;PSO*7*240 Use fileman to format
"RTN","PSORXVW1",47,0)
 ..K ^UTILITY($J,"W") S X="Comments: "_PSOACBRV,(DIWR,DIWL)=1,DIWF="C80" D ^DIWP F I=1:1:^UTILITY($J,"W",1) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=$G(^UTILITY($J,"W",1,I,0))
"RTN","PSORXVW1",48,0)
 .I $G(^PSRX(DA,"A",N,1))]"" S IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0)," ",5)=$P(^PSRX(DA,"A",N,1),"^") I $P(^PSRX(DA,"A",N,1),"^",2)]"" S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_":"_$P(^PSRX(DA,"A",N,1),"^",2)
"RTN","PSORXVW1",49,0)
 .I $O(^PSRX(DA,"A",N,2,0)) F I=0:0 S I=$O(^PSRX(RXN,"A",N,2,I)) Q:'I  S MIG=^PSRX(RXN,"A",N,2,I,0) D
"RTN","PSORXVW1",50,0)
 ..S:MIG["Mail Tracking Info.: " IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0)," ",9)=" "
"RTN","PSORXVW1",51,0)
 ..F SG=1:1:$L(MIG) S:$L(^TMP("PSOAL",$J,IEN,0)_" "_$P(MIG," ",SG))>80 IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0)," ",9)=" " S:$P(MIG," ",SG)'="" ^TMP("PSOAL",$J,IEN,0)=$G(^TMP("PSOAL",$J,IEN,0))_" "_$P(MIG," ",SG)
"RTN","PSORXVW1",52,0)
 K MIG,SG,I,^UTILITY($J,"W"),DIWF,DIWL,DIWR
"RTN","PSORXVW1",53,0)
 Q
"RTN","PSORXVW1",54,0)
LBL ;label log
"RTN","PSORXVW1",55,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Label Log:"
"RTN","PSORXVW1",56,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#   Date        Rx Ref                    Printed By",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSORXVW1",57,0)
 I '$O(^PSRX(DA,"L",0)) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There are NO Labels printed." Q
"RTN","PSORXVW1",58,0)
 F L1=0:0 S L1=$O(^PSRX(DA,"L",L1)) Q:'L1  S LBL=^PSRX(DA,"L",L1,0),DTT=$P(^(0),"^") D DAT D
"RTN","PSORXVW1",59,0)
 . S $P(RN," ",26)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=L1_"   "_DAT_"    ",RFT=$S($P(LBL,"^",2):"REFILL "_$P(LBL,"^",2),1:"ORIGINAL"),RFT=RFT_$E(RN,$L(RFT)+1,26)
"RTN","PSORXVW1",60,0)
 . K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=$P(LBL,"^",4) D ^DIC
"RTN","PSORXVW1",61,0)
 . S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_RFT_$P(Y,"^",2),IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Comments: "_$P(LBL,"^",3)
"RTN","PSORXVW1",62,0)
 . N FDAMGDOC S FDAMGDOC=$P($G(^PSRX(DA,"L",L1,"FDA")),"^")
"RTN","PSORXVW1",63,0)
 . I FDAMGDOC'="" D
"RTN","PSORXVW1",64,0)
 . . S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="FDA Med Guide: "_$E(FDAMGDOC,1,61)
"RTN","PSORXVW1",65,0)
 . . I $L(FDAMGDOC)>61 D
"RTN","PSORXVW1",66,0)
 . . . F  Q:$E(FDAMGDOC,62,999)=""  D
"RTN","PSORXVW1",67,0)
 . . . . S FDAMGDOC=$E(FDAMGDOC,62,999),IEN=IEN+1
"RTN","PSORXVW1",68,0)
 . . . . S ^TMP("PSOAL",$J,IEN,0)=$E(FDAMGDOC,1,61)
"RTN","PSORXVW1",69,0)
 K DIC,X,Y Q
"RTN","PSORXVW1",70,0)
 ;
"RTN","PSORXVW1",71,0)
RF ;refill log
"RTN","PSORXVW1",72,0)
 N PSORFI ;*499
"RTN","PSORXVW1",73,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Refill Log:"
"RTN","PSORXVW1",74,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#  Log Date   Refill Date  Qty               Routing  Lot #       Pharmacist",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSORXVW1",75,0)
 S (RF,PL)=0 F RF=0:0 S RF=$O(^PSRX(DA,1,RF)) Q:'RF  S PL=PL+1
"RTN","PSORXVW1",76,0)
 I 'PL S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There are NO Refills For this Prescription" Q
"RTN","PSORXVW1",77,0)
 F N=0:0 S N=$O(^PSRX(DA,1,N)) Q:'N  S P1=^(N,0),PSORFI=$G(^PSRX(DA,1,N,"RF")) D
"RTN","PSORXVW1",78,0)
 .S DTT=$P(P1,"^",8)\1 D DAT S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=N_"   "_DAT_"   "
"RTN","PSORXVW1",79,0)
 .S DTT=$P(P1,"^"),$P(RN," ",10)=" " D DAT
"RTN","PSORXVW1",80,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_DAT_"     "_$P(P1,"^",4)_$E("               ",$L($P(P1,"^",4))+1,15)_"  "_$S($P(P1,"^",2)="M":"Mail",1:"Window")_" "_$P(P1,"^",6)_$E(RN,$L($P(P1,"^",6))+1,12)
"RTN","PSORXVW1",81,0)
 .K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=+$P(P1,"^",5) D ^DIC
"RTN","PSORXVW1",82,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_$E($S($P(PSORFI,"^",2)]"":$P(PSORFI,"^",2),+Y:$P(Y,"^",2),1:""),1,16) K DIC,X,Y
"RTN","PSORXVW1",83,0)
 .S PSDIV=$S(+PSORFI:+PSORFI,$D(^PS(59,+$P(P1,"^",9),0)):$P(^(0),"^",6),1:"Unknown"),IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Division: "_PSDIV_$E("        ",$L(PSDIV)+1,8)_"  "
"RTN","PSORXVW1",84,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"Dispensed: "_$S($P(P1,"^",19):$E($P(P1,"^",19),4,5)_"/"_$E($P(P1,"^",19),6,7)_"/"_$E($P(P1,"^",19),2,3),1:"")_"  "
"RTN","PSORXVW1",85,0)
 .S RTS=$S($P(P1,"^",16):" Returned to Stock: "_$E($P(P1,"^",16),4,5)_"/"_$E($P(P1,"^",16),6,7)_"/"_$E($P(P1,"^",16),2,3),1:" Released: "_$S($$RXRLDT^PSOBPSUT(DA,N):$$FMTE^XLFDT($$RXRLDT^PSOBPSUT(DA,N)\1,2),1:""))
"RTN","PSORXVW1",86,0)
 .;Always display the NDC# - PSO*427
"RTN","PSORXVW1",87,0)
 .S RTS=RTS_"  NDC: "_$$GETNDC^PSONDCUT(DA,N)
"RTN","PSORXVW1",88,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_RTS
"RTN","PSORXVW1",89,0)
 .S:$P(P1,"^",3)]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="   Remarks: "_$P(P1,"^",3)
"RTN","PSORXVW1",90,0)
 K RTS Q
"RTN","PSORXVW1",91,0)
PAR ;partial log
"RTN","PSORXVW1",92,0)
 N PSOPFI
"RTN","PSORXVW1",93,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Partial Fills:"
"RTN","PSORXVW1",94,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#   Log Date   Date     Qty              Routing    Lot #        Pharmacist",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSORXVW1",95,0)
 I '$O(^PSRX(DA,"P",0)) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There are NO Partials for this Prescription" Q
"RTN","PSORXVW1",96,0)
 S N=0 F  S N=$O(^PSRX(DA,"P",N)) Q:'N  S P1=^(N,0),DTT=$P(P1,"^",8)\1,PSOPFI=$G(^PSRX(DA,"P",N,"PF")) D DAT D
"RTN","PSORXVW1",97,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=N_"   "_DAT_"  ",QTY=$P(P1,"^",4)_$E("               ",$L($P(P1,"^",4))+1,15)
"RTN","PSORXVW1",98,0)
 .S DTT=$P(P1,"^") D DAT S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_DAT_"  "_QTY_"  "
"RTN","PSORXVW1",99,0)
 .S PSDIV=$S(+PSOPFI:+PSOPFI,$D(^PS(59,+$P(P1,"^",9),0)):$P(^(0),"^",6),1:"UNKNOWN"),PSDIV=PSDIV_$E("        ",$L(PSDIV)+1,8)  ;*499
"RTN","PSORXVW1",100,0)
 .S MW=$S($P(P1,"^",2)="M":"Mail",1:"Window"),MW=MW_$E("          ",$L(MW)+1,10)
"RTN","PSORXVW1",101,0)
 .K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=+$P(P1,"^",5) D ^DIC  ;*509 - 0;5 INSTEAD OF 0;16
"RTN","PSORXVW1",102,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_MW_"  "_$P(P1,"^",6)_$E("            ",$L($P(P1,"^",6))+1,10)_$E($S($P(PSOPFI,"^",2)]"":$P(PSOPFI,"^",2),+Y:$P(Y,"^",2),1:""),1,16)  ;*499
"RTN","PSORXVW1",103,0)
 .S RTS=$S($P(P1,"^",16):" RETURNED TO STOCK: "_$E($P(P1,"^",16),4,5)_"/"_$E($P(P1,"^",16),6,7)_"/"_$E($P(P1,"^",16),2,3),1:" RELEASED: "_$S($P(P1,"^",19):$E($P(P1,"^",19),4,5)_"/"_$E($P(P1,"^",19),6,7)_"/"_$E($P(P1,"^",19),2,3),1:""))
"RTN","PSORXVW1",104,0)
 .K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=$P(P1,"^",7) D ^DIC
"RTN","PSORXVW1",105,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Division: "_PSDIV_" "_RTS ;_"      Entry By: "_$P(Y,"^",2) K DIC,X,Y
"RTN","PSORXVW1",106,0)
 .S:$P(P1,"^",3)]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="  REMARKS: "_$P(P1,"^",3) K RTS
"RTN","PSORXVW1",107,0)
 Q
"RTN","PSORXVW1",108,0)
HLD ;hold info
"RTN","PSORXVW1",109,0)
 S DTT=$P(^PSRX(DA,"H"),"^",3) D DAT S HLDR=$$GET1^DIQ(52,DA,99)
"RTN","PSORXVW1",110,0)
 S $P(RN," ",60)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Hold Reason: "_HLDR_$E(RN,$L("Hold Reason: "_HLDR)+1,60)_"Hold Date: "_DAT
"RTN","PSORXVW1",111,0)
 I $P($G(^PSRX(DA,"H")),"^",2)]"" D
"RTN","PSORXVW1",112,0)
 . N HLDCOMM S HLDCOMM=$P(^PSRX(DA,"H"),"^",2)
"RTN","PSORXVW1",113,0)
 . S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Hold Comments: "_$E(HLDCOMM,1,65),HLDCOMM=$E(HLDCOMM,66,999)
"RTN","PSORXVW1",114,0)
 . F  Q:HLDCOMM=""  D
"RTN","PSORXVW1",115,0)
 . . S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="               "_$E(HLDCOMM,1,65),HLDCOMM=$E(HLDCOMM,66,999)
"RTN","PSORXVW1",116,0)
 K RN,DAT,DTT,HLDR
"RTN","PSORXVW1",117,0)
 Q
"RTN","PSORXVW1",118,0)
DAT S DAT="",DTT=DTT\1 Q:DTT'?7N  S DAT=$E(DTT,4,5)_"/"_$E(DTT,6,7)_"/"_$E(DTT,2,3)
"RTN","PSORXVW1",119,0)
 Q
"RTN","PSORXVW1",120,0)
INST ;formats instruction from front door
"RTN","PSORXVW1",121,0)
 I $O(^PSRX(DA,"PI",0)) D
"RTN","PSORXVW1",122,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="        Instructions:"
"RTN","PSORXVW1",123,0)
 .S T=0 F  S T=$O(^PSRX(RXN,"PI",T)) Q:'T  D                  ;PSO*210
"RTN","PSORXVW1",124,0)
 ..S MIG=^PSRX(RXN,"PI",T,0)
"RTN","PSORXVW1",125,0)
 ..D WORDWRAP^PSOUTLA2(MIG,.IEN,$NA(^TMP("PSOAL",$J)),21)
"RTN","PSORXVW1",126,0)
 K T,TY,MIG,SG
"RTN","PSORXVW1",127,0)
 Q
"RTN","PSORXVW1",128,0)
PC ;displays provider comments
"RTN","PSORXVW1",129,0)
 I $O(^PSRX(DA,"PRC",0)) D
"RTN","PSORXVW1",130,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="   Provider Comments:"
"RTN","PSORXVW1",131,0)
 .S T=0 F  S T=$O(^PSRX(RXN,"PRC",T)) Q:'T  D                 ;PSO*210
"RTN","PSORXVW1",132,0)
 ..S MIG=^PSRX(RXN,"PRC",T,0)
"RTN","PSORXVW1",133,0)
 ..D WORDWRAP^PSOUTLA2(MIG,.IEN,$NA(^TMP("PSOAL",$J)),21)
"RTN","PSORXVW1",134,0)
 K T,TY,MIG,SG
"RTN","PSORXVW1",135,0)
 Q
"RTN","PSORXVW1",136,0)
DOSE ;displays dosing instruction for both simple and complex Rxs.
"RTN","PSORXVW1",137,0)
 D DOSE^PSORXVW2
"RTN","PSORXVW1",138,0)
 Q
"RTN","PSORXVW1",139,0)
 ;
"RTN","PSORXVW1",140,0)
HLP ; Help Text for the VIEW PRESCRIPTION prompt
"RTN","PSORXVW1",141,0)
 W !," A prescription number or ECME number may be entered.  To look-up a"
"RTN","PSORXVW1",142,0)
 W !," prescription by the ECME number, please enter ""E."" followed by the ECME"
"RTN","PSORXVW1",143,0)
 W !," number with or without any leading zeros."
"RTN","PSORXVW1",144,0)
 W !!,"  Or just",!
"RTN","PSORXVW1",145,0)
 D LKP("?")
"RTN","PSORXVW1",146,0)
 Q 
"RTN","PSORXVW1",147,0)
 ;
"RTN","PSORXVW1",148,0)
LKP(INPUT) ; - Peforms Lookup on the PRESCRIPTION file
"RTN","PSORXVW1",149,0)
 N DIC,X,Y
"RTN","PSORXVW1",150,0)
 S DIC="^PSRX(",DIC(0)="QE",D="B",X=INPUT
"RTN","PSORXVW1",151,0)
 S DIC("S")="I $P($G(^(0)),""^"",2),$D(^(""STA"")),$P($G(^(""STA"")),""^"")'=13"
"RTN","PSORXVW1",152,0)
 D IX^DIC
"RTN","PSORXVW1",153,0)
 Q Y
"UP",55,55.17,-1)
55^PC
"UP",55,55.17,0)
55.17
"UP",55,55.174,-2)
55^PC
"UP",55,55.174,-1)
55.17^PCH
"UP",55,55.174,0)
55.174
"VER")
8.0^22.2
"^DD",52.86,52.86,7,0)
IGNORE THRESHOLD^NJ7,0^^3;3^K:+X'=X!(X>9999999)!(X<0)!(X?.E1"."1.N) X
"^DD",52.86,52.86,7,3)
Type a number between 0 and 9999999, 0 decimal digits.
"^DD",52.86,52.86,7,21,0)
^^9^9^3171220^
"^DD",52.86,52.86,7,21,1,0)
The value of the Ignore Threshold field is compared to the Gross Amount 
"^DD",52.86,52.86,7,21,2,0)
Due of the prescription.
"^DD",52.86,52.86,7,21,3,0)
If the Gross Amount Due is greater than or equal to the value of this 
"^DD",52.86,52.86,7,21,4,0)
field, then the user must hold the EPHARMACY SITE MANAGER security key in 
"^DD",52.86,52.86,7,21,5,0)
order to Ignore the reject.
"^DD",52.86,52.86,7,21,6,0)
If the value of this field is set to 0, then no rejects can be Ignored 
"^DD",52.86,52.86,7,21,7,0)
unless the user has the security key.
"^DD",52.86,52.86,7,21,8,0)
If the value of this field is left blank, the Gross Amount Due will not
"^DD",52.86,52.86,7,21,9,0)
be considered.
"^DD",52.86,52.86,7,"DT")
3171220
"^DD",55,55,70,0)
PATIENT COMMENT^55.17DA^^PC;0
"^DD",55,55,70,21,0)
2^.001^2^2^3170921^^^
"^DD",55,55,70,21,1,0)
This sub-file allows patient billing comments to be stored for this 
"^DD",55,55,70,21,2,0)
patient.
"^DD",55,55,70,"DT")
3170907
"^DD",55,55.17,0)
PATIENT COMMENT SUB-FIELD^^4^5
"^DD",55,55.17,0,"NM","PATIENT COMMENT")

"^DD",55,55.17,.01,0)
PATIENT COMMENT DATE^D^^0;1^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",55,55.17,.01,1,0)
^.1
"^DD",55,55.17,.01,1,1,0)
55.17^B
"^DD",55,55.17,.01,1,1,1)
S ^PS(55,DA(1),"PC","B",$E(X,1,30),DA)=""
"^DD",55,55.17,.01,1,1,2)
K ^PS(55,DA(1),"PC","B",$E(X,1,30),DA)
"^DD",55,55.17,.01,3)
(No range limit on date)
"^DD",55,55.17,.01,"DT")
3170921
"^DD",55,55.17,1,0)
USER^P200'^VA(200,^0;2^Q
"^DD",55,55.17,1,"DT")
3170906
"^DD",55,55.17,2,0)
ACTIVE^S^Y:ACTIVE;N:INACTIVE;^0;3^Q
"^DD",55,55.17,2,"DT")
3170809
"^DD",55,55.17,3,0)
COMMENT^FJ150^^0;4^K:$L(X)>150!($L(X)<1) X
"^DD",55,55.17,3,3)
Answer must be 1-150 characters in length.
"^DD",55,55.17,3,"DT")
3170809
"^DD",55,55.17,4,0)
PATIENT COMMENT HISTORY^55.174DA^^PCH;0
"^DD",55,55.17,4,21,0)
^^2^2^3170921^^
"^DD",55,55.17,4,21,1,0)
This sub-file stores all historical updates to the patient billing 
"^DD",55,55.17,4,21,2,0)
comments for this patient.
"^DD",55,55.17,4,"DT")
3170921
"^DD",55,55.174,0)
PATIENT COMMENT HISTORY SUB-FIELD^^2^3
"^DD",55,55.174,0,"NM","PATIENT COMMENT HISTORY")

"^DD",55,55.174,.01,0)
HISTORY DATE^D^^0;1^S %DT="EX" D ^%DT S X=Y K:X<1 X
"^DD",55,55.174,.01,1,0)
^.1
"^DD",55,55.174,.01,1,1,0)
55.174^B
"^DD",55,55.174,.01,1,1,1)
S ^PS(55,DA(2),"PC",DA(1),"PCH","B",$E(X,1,30),DA)=""
"^DD",55,55.174,.01,1,1,2)
K ^PS(55,DA(2),"PC",DA(1),"PCH","B",$E(X,1,30),DA)
"^DD",55,55.174,.01,3)
(No range limit on date)
"^DD",55,55.174,.01,"DT")
3170921
"^DD",55,55.174,1,0)
USER^P200'^VA(200,^0;2^Q
"^DD",55,55.174,1,"DT")
3170809
"^DD",55,55.174,2,0)
ACTIVITY^S^1:ADD;2:ACTIVATE;3:INACTIVATE;^0;3^Q
"^DD",55,55.174,2,"DT")
3170809
**END**
**END**

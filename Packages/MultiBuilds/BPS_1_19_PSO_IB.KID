KIDS Distribution saved on Nov 11, 2015@13:59:04
BPS PSO IB BUNDLE 6.0
**KIDS**:BPS PSO IB BUNDLE 6.0^IB*2.0*534^BPS*1.0*19^PSO*7.0*427^

**INSTALL NAME**
BPS PSO IB BUNDLE 6.0
"BLD",9728,0)
BPS PSO IB BUNDLE 6.0^^1^3151111^y
"BLD",9728,1,0)
^^4^4^3150227^
"BLD",9728,1,1,0)
NCPCP Continuous Maintenance Standards multi-build distribution:
"BLD",9728,1,2,0)
      BPS*1.0*19
"BLD",9728,1,3,0)
      PSO*7.0*427
"BLD",9728,1,4,0)
      IB*2.0*534
"BLD",9728,6.3)
17
"BLD",9728,10,0)
^9.63^3^3
"BLD",9728,10,1,0)
IB*2.0*534^1
"BLD",9728,10,2,0)
BPS*1.0*19^1
"BLD",9728,10,3,0)
PSO*7.0*427^1
"BLD",9728,10,"B","BPS*1.0*19",2)

"BLD",9728,10,"B","IB*2.0*534",1)

"BLD",9728,10,"B","PSO*7.0*427",3)

"BLD",9728,"KRN",0)
^9.67PA^779.2^20
"BLD",9728,"KRN",.4,0)
.4
"BLD",9728,"KRN",.401,0)
.401
"BLD",9728,"KRN",.402,0)
.402
"BLD",9728,"KRN",.403,0)
.403
"BLD",9728,"KRN",.5,0)
.5
"BLD",9728,"KRN",.84,0)
.84
"BLD",9728,"KRN",3.6,0)
3.6
"BLD",9728,"KRN",3.8,0)
3.8
"BLD",9728,"KRN",9.2,0)
9.2
"BLD",9728,"KRN",9.8,0)
9.8
"BLD",9728,"KRN",19,0)
19
"BLD",9728,"KRN",19.1,0)
19.1
"BLD",9728,"KRN",101,0)
101
"BLD",9728,"KRN",409.61,0)
409.61
"BLD",9728,"KRN",771,0)
771
"BLD",9728,"KRN",779.2,0)
779.2
"BLD",9728,"KRN",870,0)
870
"BLD",9728,"KRN",8989.51,0)
8989.51
"BLD",9728,"KRN",8989.52,0)
8989.52
"BLD",9728,"KRN",8994,0)
8994
"BLD",9728,"KRN","B",.4,.4)

"BLD",9728,"KRN","B",.401,.401)

"BLD",9728,"KRN","B",.402,.402)

"BLD",9728,"KRN","B",.403,.403)

"BLD",9728,"KRN","B",.5,.5)

"BLD",9728,"KRN","B",.84,.84)

"BLD",9728,"KRN","B",3.6,3.6)

"BLD",9728,"KRN","B",3.8,3.8)

"BLD",9728,"KRN","B",9.2,9.2)

"BLD",9728,"KRN","B",9.8,9.8)

"BLD",9728,"KRN","B",19,19)

"BLD",9728,"KRN","B",19.1,19.1)

"BLD",9728,"KRN","B",101,101)

"BLD",9728,"KRN","B",409.61,409.61)

"BLD",9728,"KRN","B",771,771)

"BLD",9728,"KRN","B",779.2,779.2)

"BLD",9728,"KRN","B",870,870)

"BLD",9728,"KRN","B",8989.51,8989.51)

"BLD",9728,"KRN","B",8989.52,8989.52)

"BLD",9728,"KRN","B",8994,8994)

"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"VER")
8.0^22.0
**INSTALL NAME**
IB*2.0*534
"BLD",9333,0)
IB*2.0*534^INTEGRATED BILLING^0^3151111^y
"BLD",9333,1,0)
^^1^1^3150715^^
"BLD",9333,1,1,0)
HAPE EDI Revenue project - NCPDP Continuous Maintenance Standards
"BLD",9333,4,0)
^9.64PA^366.14^2
"BLD",9333,4,366.14,0)
366.14
"BLD",9333,4,366.14,2,0)
^9.641^366.141^1
"BLD",9333,4,366.14,2,366.141,0)
EVENT  (sub-file)
"BLD",9333,4,366.14,2,366.141,1,0)
^9.6411^.02^1
"BLD",9333,4,366.14,2,366.141,1,.02,0)
NON-BILLABLE REASON
"BLD",9333,4,366.14,222)
y^y^p^^^^n^^n
"BLD",9333,4,366.14,224)

"BLD",9333,4,366.17,0)
366.17
"BLD",9333,4,366.17,222)
y^y^f^^n^^y^o^n
"BLD",9333,4,"APDD",366.14,366.141)

"BLD",9333,4,"APDD",366.14,366.141,.02)

"BLD",9333,4,"B",366.14,366.14)

"BLD",9333,4,"B",366.17,366.17)

"BLD",9333,6.3)
18
"BLD",9333,"INID")
^n
"BLD",9333,"INIT")
EN^IB534PST
"BLD",9333,"KRN",0)
^9.67PA^779.2^20
"BLD",9333,"KRN",.4,0)
.4
"BLD",9333,"KRN",.401,0)
.401
"BLD",9333,"KRN",.402,0)
.402
"BLD",9333,"KRN",.403,0)
.403
"BLD",9333,"KRN",.5,0)
.5
"BLD",9333,"KRN",.84,0)
.84
"BLD",9333,"KRN",3.6,0)
3.6
"BLD",9333,"KRN",3.8,0)
3.8
"BLD",9333,"KRN",9.2,0)
9.2
"BLD",9333,"KRN",9.8,0)
9.8
"BLD",9333,"KRN",9.8,"NM",0)
^9.68A^4^4
"BLD",9333,"KRN",9.8,"NM",1,0)
IBNCPEV3^^0^B30560136
"BLD",9333,"KRN",9.8,"NM",2,0)
IBNCPLOG^^0^B83304395
"BLD",9333,"KRN",9.8,"NM",3,0)
IBNCPDP1^^0^B164054794
"BLD",9333,"KRN",9.8,"NM",4,0)
IBNCPDPU^^0^B125879968
"BLD",9333,"KRN",9.8,"NM","B","IBNCPDP1",3)

"BLD",9333,"KRN",9.8,"NM","B","IBNCPDPU",4)

"BLD",9333,"KRN",9.8,"NM","B","IBNCPEV3",1)

"BLD",9333,"KRN",9.8,"NM","B","IBNCPLOG",2)

"BLD",9333,"KRN",19,0)
19
"BLD",9333,"KRN",19.1,0)
19.1
"BLD",9333,"KRN",101,0)
101
"BLD",9333,"KRN",409.61,0)
409.61
"BLD",9333,"KRN",771,0)
771
"BLD",9333,"KRN",779.2,0)
779.2
"BLD",9333,"KRN",870,0)
870
"BLD",9333,"KRN",8989.51,0)
8989.51
"BLD",9333,"KRN",8989.52,0)
8989.52
"BLD",9333,"KRN",8994,0)
8994
"BLD",9333,"KRN","B",.4,.4)

"BLD",9333,"KRN","B",.401,.401)

"BLD",9333,"KRN","B",.402,.402)

"BLD",9333,"KRN","B",.403,.403)

"BLD",9333,"KRN","B",.5,.5)

"BLD",9333,"KRN","B",.84,.84)

"BLD",9333,"KRN","B",3.6,3.6)

"BLD",9333,"KRN","B",3.8,3.8)

"BLD",9333,"KRN","B",9.2,9.2)

"BLD",9333,"KRN","B",9.8,9.8)

"BLD",9333,"KRN","B",19,19)

"BLD",9333,"KRN","B",19.1,19.1)

"BLD",9333,"KRN","B",101,101)

"BLD",9333,"KRN","B",409.61,409.61)

"BLD",9333,"KRN","B",771,771)

"BLD",9333,"KRN","B",779.2,779.2)

"BLD",9333,"KRN","B",870,870)

"BLD",9333,"KRN","B",8989.51,8989.51)

"BLD",9333,"KRN","B",8989.52,8989.52)

"BLD",9333,"KRN","B",8994,8994)

"BLD",9333,"QUES",0)
^9.62^^
"BLD",9333,"REQB",0)
^9.611^3^2
"BLD",9333,"REQB",2,0)
IB*2.0*494^2
"BLD",9333,"REQB",3,0)
IB*2.0*511^2
"BLD",9333,"REQB","B","IB*2.0*494",2)

"BLD",9333,"REQB","B","IB*2.0*511",3)

"DATA",366.17,1,0)
AGENT ORANGE
"DATA",366.17,2,0)
ALREADY BILLED UNDER PRIOR TRICARE PROCESS
"DATA",366.17,3,0)
CANNOT DETERMINE RATE TYPE
"DATA",366.17,4,0)
CANNOT FIND BILLABLE ITEM
"DATA",366.17,5,0)
CANNOT FIND ITEM POINTER
"DATA",366.17,6,0)
CANNOT FIND PRICE FOR ITEM
"DATA",366.17,7,0)
CHAMPVA INPATIENT/DISCHARGE
"DATA",366.17,8,0)
COMBAT VETERAN
"DATA",366.17,9,0)
COMPOUND DRUG
"DATA",366.17,10,0)
DRUG NOT BILLABLE
"DATA",366.17,11,0)
EXISTING IB BILL IN CT
"DATA",366.17,12,0)
HEAD/NECK CANCER
"DATA",366.17,13,0)
IONIZING RADIATION
"DATA",366.17,14,0)
MILITARY SEXUAL TRAUMA
"DATA",366.17,15,0)
MISSING NDC
"DATA",366.17,16,0)
NEEDS SC DETERMINATION
"DATA",366.17,17,0)
NO DFN
"DATA",366.17,18,0)
NO FILL NUMBER
"DATA",366.17,19,0)
NO INSURANCE ECME BILLABLE
"DATA",366.17,20,0)
NO PHARMACY COVERAGE
"DATA",366.17,21,0)
NO QUANTITY
"DATA",366.17,22,0)
NO RX IEN
"DATA",366.17,23,0)
NON-BILLABLE IN CT: 90 DAY RX FILL NOT COVERED
"DATA",366.17,24,0)
NON-BILLABLE IN CT: AGENT ORANGE
"DATA",366.17,25,0)
NON-BILLABLE IN CT: CAMP LEJEUNE TREATMENT
"DATA",366.17,26,0)
NON-BILLABLE IN CT: COMBAT VETERAN
"DATA",366.17,27,0)
NON-BILLABLE IN CT: COVERAGE CANCELED
"DATA",366.17,28,0)
NON-BILLABLE IN CT: DATE OF BIRTH MISMATCH
"DATA",366.17,29,0)
NON-BILLABLE IN CT: DRUG NOT BILLABLE
"DATA",366.17,30,0)
NON-BILLABLE IN CT: FILING TIMEFRAME NOT MET
"DATA",366.17,31,0)
NON-BILLABLE IN CT: HEAD/NECK CANCER
"DATA",366.17,32,0)
NON-BILLABLE IN CT: INPATIENT RX AUTO-REVERSAL
"DATA",366.17,33,0)
NON-BILLABLE IN CT: INVALID MULTIPLES PER DAY SUPP
"DATA",366.17,34,0)
NON-BILLABLE IN CT: INVALID NDC FROM CMOP
"DATA",366.17,35,0)
NON-BILLABLE IN CT: INVALID PRESCRIPTION ENTRY
"DATA",366.17,36,0)
NON-BILLABLE IN CT: IONIZING RADIATION
"DATA",366.17,37,0)
NON-BILLABLE IN CT: MILITARY SEXUAL TRAUMA
"DATA",366.17,38,0)
NON-BILLABLE IN CT: NO PHARMACY COVERAGE
"DATA",366.17,39,0)
NON-BILLABLE IN CT: NON COVERED DRUG PER PLAN
"DATA",366.17,40,0)
NON-BILLABLE IN CT: NOT A CONTRACTED PROVIDER
"DATA",366.17,41,0)
NON-BILLABLE IN CT: NOT INSURED
"DATA",366.17,42,0)
NON-BILLABLE IN CT: NPI/TAXONOMY ISSUES
"DATA",366.17,43,0)
NON-BILLABLE IN CT: OTHER
"DATA",366.17,44,0)
NON-BILLABLE IN CT: PRESCRIPTION DELETED
"DATA",366.17,45,0)
NON-BILLABLE IN CT: PRESCRIPTION NOT RELEASED
"DATA",366.17,46,0)
NON-BILLABLE IN CT: PROJECT 112/SHAD
"DATA",366.17,47,0)
NON-BILLABLE IN CT: REFILL TOO SOON
"DATA",366.17,48,0)
NON-BILLABLE IN CT: RX DISCOUNT CARD
"DATA",366.17,49,0)
NON-BILLABLE IN CT: RX DUR REJECT
"DATA",366.17,50,0)
NON-BILLABLE IN CT: RX MEDICARE PART D
"DATA",366.17,51,0)
NON-BILLABLE IN CT: RX PRIOR AUTH NOT OBTAINED
"DATA",366.17,52,0)
NON-BILLABLE IN CT: SC TREATMENT
"DATA",366.17,53,0)
NON-BILLABLE IN CT: SERVICE NOT COVERED
"DATA",366.17,54,0)
NON-BILLABLE IN CT: SOUTHWEST ASIA
"DATA",366.17,55,0)
NOT BILLABLE, NO ROI - NO ACTIVE ROI ON FILE
"DATA",366.17,56,0)
NOT ECME BILLABLE: BILLING PAYERSHEET DISABLED
"DATA",366.17,57,0)
NOT ECME BILLABLE: BILLING PAYERSHEET NOT FOUND
"DATA",366.17,58,0)
NOT ECME BILLABLE: CHAMPVA COVERAGE FOR A VETERAN
"DATA",366.17,59,0)
NOT ECME BILLABLE: ELIGIBILITY PAYERSHEET DISABLED
"DATA",366.17,60,0)
NOT ECME BILLABLE: ELIGIBILITY PAYERSHEET NOT FOUND
"DATA",366.17,61,0)
NOT ECME BILLABLE: HIPAA NCPDP INACTIVE
"DATA",366.17,62,0)
NOT ECME BILLABLE: NO PAYER SHEETS FOUND
"DATA",366.17,63,0)
NOT ECME BILLABLE: PAYER DEACTIVATED
"DATA",366.17,64,0)
NOT ECME BILLABLE: PAYER NOT ACTIVE, LOCAL
"DATA",366.17,65,0)
NOT ECME BILLABLE: PAYER NOT ACTIVE, NATIONAL
"DATA",366.17,66,0)
NOT ECME BILLABLE: PBM DEACTIVATED
"DATA",366.17,67,0)
NOT ECME BILLABLE: PBM NOT ACTIVE, LOCAL
"DATA",366.17,68,0)
NOT ECME BILLABLE: PBM NOT ACTIVE, NATIONAL
"DATA",366.17,69,0)
NOT ECME BILLABLE: PHARMACY PLAN NOT FOUND
"DATA",366.17,70,0)
NOT ECME BILLABLE: PLAN DEACTIVATED
"DATA",366.17,71,0)
NOT ECME BILLABLE: PLAN IS NOT ACTIVE
"DATA",366.17,72,0)
NOT ECME BILLABLE: PLAN NOT ACTIVE, LOCAL
"DATA",366.17,73,0)
NOT ECME BILLABLE: PLAN NOT ACTIVE, NATIONAL
"DATA",366.17,74,0)
NOT ECME BILLABLE: PLAN NOT FOUND
"DATA",366.17,75,0)
NOT ECME BILLABLE: PLAN NOT LINKED TO THE PAYER
"DATA",366.17,76,0)
NOT ECME BILLABLE: PROCESSOR DEACTIVATED
"DATA",366.17,77,0)
NOT ECME BILLABLE: PROCESSOR NOT ACTIVE, LOCAL
"DATA",366.17,78,0)
NOT ECME BILLABLE: PROCESSOR NOT ACTIVE, NATIONAL
"DATA",366.17,79,0)
NOT ECME BILLABLE: REVERSAL PAYERSHEET DISABLED
"DATA",366.17,80,0)
NOT ECME BILLABLE: REVERSAL PAYERSHEET NOT FOUND
"DATA",366.17,81,0)
NOT ECME BILLABLE: TRICARE COVERAGE FOR A VETERAN
"DATA",366.17,82,0)
NOT INSURED
"DATA",366.17,83,0)
NULL DEA SPECIAL HANDLING FIELD
"DATA",366.17,84,0)
PROJECT 112/SHAD
"DATA",366.17,85,0)
SC TREATMENT
"DATA",366.17,86,0)
SERVICE NOT COVERED
"DATA",366.17,87,0)
SOUTHWEST ASIA
"DATA",366.17,88,0)
TRICARE INPATIENT/DISCHARGE
"DATA",366.17,89,0)
VETERAN INPATIENT
"FIA",366.14)
IB NCPDP EVENT LOG
"FIA",366.14,0)
^IBCNR(366.14,
"FIA",366.14,0,0)
366.14D
"FIA",366.14,0,1)
y^y^p^^^^n^^n
"FIA",366.14,0,10)

"FIA",366.14,0,11)

"FIA",366.14,0,"RLRO")

"FIA",366.14,0,"VR")
2.0^IB
"FIA",366.14,366.14)
1
"FIA",366.14,366.141)
1
"FIA",366.14,366.141,.02)

"FIA",366.17)
IB NCPDP NON-BILLABLE REASONS
"FIA",366.17,0)
^IBCNR(366.17,
"FIA",366.17,0,0)
366.17
"FIA",366.17,0,1)
y^y^f^^n^^y^o^n
"FIA",366.17,0,10)

"FIA",366.17,0,11)

"FIA",366.17,0,"RLRO")

"FIA",366.17,0,"VR")
2.0^IB
"FIA",366.17,366.17)
0
"INIT")
EN^IB534PST
"IX",366.17,366.17,"B",0)
366.17^B^Lookup for the NON-BILLABLE REASON field^R^^F^IR^I^366.17^^^^^LS
"IX",366.17,366.17,"B",1)
S ^IBCNR(366.17,"B",$E(X,1,60),DA)=""
"IX",366.17,366.17,"B",2)
K ^IBCNR(366.17,"B",$E(X,1,60),DA)
"IX",366.17,366.17,"B",2.5)
K ^IBCNR(366.17,"B")
"IX",366.17,366.17,"B",11.1,0)
^.114IA^1^1
"IX",366.17,366.17,"B",11.1,1,0)
1^F^366.17^.01^60^1^F
"MBREQ")
1
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)

"PKG",200,20,"B",2,1)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321^2990406^2447
"PKG",200,22,1,"PAH",1,0)
534^3151111
"PKG",200,22,1,"PAH",1,1,0)
^^1^1^3151111
"PKG",200,22,1,"PAH",1,1,1,0)
HAPE EDI Revenue project - NCPDP Continuous Maintenance Standards
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
5
"RTN","IB534PST")
0^^B14543577
"RTN","IB534PST",1,0)
IB534PST ;ALB/DMB - Post Install for IB*2*534 ;10/21/2014
"RTN","IB534PST",2,0)
 ;;2.0;INTEGRATED BILLING;**534**;21-MAR-94;Build 18
"RTN","IB534PST",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IB534PST",4,0)
 ;
"RTN","IB534PST",5,0)
 Q
"RTN","IB534PST",6,0)
 ;
"RTN","IB534PST",7,0)
EN ; entry point
"RTN","IB534PST",8,0)
 D BMES^XPDUTL("  Starting post-install for IB*2*534")
"RTN","IB534PST",9,0)
 ;
"RTN","IB534PST",10,0)
 ; Populate the New Non-Billable Status field
"RTN","IB534PST",11,0)
 D NBJOB
"RTN","IB534PST",12,0)
 ;
"RTN","IB534PST",13,0)
 ; Completion Message
"RTN","IB534PST",14,0)
 D BMES^XPDUTL("  Finish of IB*2.0*534 post-install")
"RTN","IB534PST",15,0)
 Q
"RTN","IB534PST",16,0)
 ;
"RTN","IB534PST",17,0)
NBJOB ;
"RTN","IB534PST",18,0)
 D BMES^XPDUTL("    Queuing background job to update the Non-Billable Status field")
"RTN","IB534PST",19,0)
 D MES^XPDUTL("    A Mailman message will be sent when it finishes")
"RTN","IB534PST",20,0)
 ;
"RTN","IB534PST",21,0)
 ; Setup required variables
"RTN","IB534PST",22,0)
 S ZTRTN="NBSTATUS^IB534PST",ZTIO="",ZTDTH=$H
"RTN","IB534PST",23,0)
 S ZTDESC="Background job to update the Non-Billable Status field via IB*2*534"
"RTN","IB534PST",24,0)
 ;
"RTN","IB534PST",25,0)
 ; Task the job
"RTN","IB534PST",26,0)
 D ^%ZTLOAD
"RTN","IB534PST",27,0)
 ;
"RTN","IB534PST",28,0)
 ; Check if task was created
"RTN","IB534PST",29,0)
 I $D(ZTSK) D MES^XPDUTL("    Task #"_ZTSK_" queued")
"RTN","IB534PST",30,0)
 I '$D(ZTSK) D MES^XPDUTL("   Task not queued.  Please create a support ticket.")
"RTN","IB534PST",31,0)
 Q
"RTN","IB534PST",32,0)
 ;
"RTN","IB534PST",33,0)
NBSTATUS ;
"RTN","IB534PST",34,0)
 ; Update the New Non-Billable Status field (#.02) of IB NCPDP EVENT LOG (#366.14)
"RTN","IB534PST",35,0)
 ;
"RTN","IB534PST",36,0)
 N IEN,IEN1,X0,REASON,NBSTS,ERRCNT,SUCCNT,DIE,DA,DR,X,Y,DTOUT,DUOUT,DIC
"RTN","IB534PST",37,0)
 ;
"RTN","IB534PST",38,0)
 ; Loop through the IB NCPDP Event Log
"RTN","IB534PST",39,0)
 S ERRCNT=0,SUCCNT=0
"RTN","IB534PST",40,0)
 S IEN=0 F  S IEN=$O(^IBCNR(366.14,IEN)) Q:'IEN  D
"RTN","IB534PST",41,0)
 . S IEN1=0 F  S IEN1=$O(^IBCNR(366.14,IEN,1,IEN1)) Q:'IEN1  D
"RTN","IB534PST",42,0)
 .. S X0=$G(^IBCNR(366.14,IEN,1,IEN1,0))
"RTN","IB534PST",43,0)
 .. ;
"RTN","IB534PST",44,0)
 .. ; If not a Billable Status Check, quit
"RTN","IB534PST",45,0)
 .. I +X0'=1 Q
"RTN","IB534PST",46,0)
 .. ;
"RTN","IB534PST",47,0)
 .. ; If successful, quit
"RTN","IB534PST",48,0)
 .. I $P(X0,"^",7)'=0 Q
"RTN","IB534PST",49,0)
 .. ;
"RTN","IB534PST",50,0)
 .. ; If already populated, quit
"RTN","IB534PST",51,0)
 .. S NBSTS=$P(X0,U,2)
"RTN","IB534PST",52,0)
 .. I NBSTS]"" Q
"RTN","IB534PST",53,0)
 .. ;
"RTN","IB534PST",54,0)
 .. ; Get reason and see if it exists
"RTN","IB534PST",55,0)
 .. S REASON=$P(X0,U,8)
"RTN","IB534PST",56,0)
 .. I REASON="" Q
"RTN","IB534PST",57,0)
 .. ; 
"RTN","IB534PST",58,0)
 .. ; Convert to the proper format and see if it exists in the IB NCPDP NON-BILLABLE STATUS dictionary
"RTN","IB534PST",59,0)
 .. S REASON=$TR($E($$UP^XLFSTR(REASON),1,60),"^")
"RTN","IB534PST",60,0)
 .. I $E(REASON,$L(REASON))="." S REASON=$E(REASON,1,$L(REASON)-1)
"RTN","IB534PST",61,0)
 .. S NBSTS=$O(^IBCNR(366.17,"B",REASON,""))
"RTN","IB534PST",62,0)
 .. ;
"RTN","IB534PST",63,0)
 .. ; If it does not exist not, add to the dictionary
"RTN","IB534PST",64,0)
 .. I NBSTS="" D  I Y=-1 Q
"RTN","IB534PST",65,0)
 ... S DIC="^IBCNR(366.17,",DIC(0)="F",X=REASON
"RTN","IB534PST",66,0)
 ... D FILE^DICN
"RTN","IB534PST",67,0)
 ... I Y=-1 S ERRCNT=ERRCNT+1
"RTN","IB534PST",68,0)
 ... S NBSTS=+Y
"RTN","IB534PST",69,0)
 .. ;
"RTN","IB534PST",70,0)
 .. ; Update the file
"RTN","IB534PST",71,0)
 .. S DIE="^IBCNR(366.14,"_IEN_",1,",DA=IEN1,DA(1)=IEN,DR=".02////^S X=NBSTS"
"RTN","IB534PST",72,0)
 .. D ^DIE
"RTN","IB534PST",73,0)
 .. S SUCCNT=SUCCNT+1
"RTN","IB534PST",74,0)
 ;
"RTN","IB534PST",75,0)
 ; Send email with result
"RTN","IB534PST",76,0)
 D MAIL(SUCCNT,ERRCNT)
"RTN","IB534PST",77,0)
 Q
"RTN","IB534PST",78,0)
 ;
"RTN","IB534PST",79,0)
MAIL(SUCCNT,ERRCNT) ;
"RTN","IB534PST",80,0)
 N CNT,MSG,XMY,XMDUZ,DIFROM,XMSUB,XMTEXT
"RTN","IB534PST",81,0)
 S XMY(DUZ)=""
"RTN","IB534PST",82,0)
 S XMSUB="IB*2.0*534 Post install is complete",XMDUZ="Patch IB*2.0*534"
"RTN","IB534PST",83,0)
 S XMTEXT="MSG("
"RTN","IB534PST",84,0)
 S CNT=1,MSG(CNT)=""
"RTN","IB534PST",85,0)
 S CNT=CNT+1,MSG(CNT)="Patch IB*2.0*534 post install routine has completed."
"RTN","IB534PST",86,0)
 S CNT=CNT+1,MSG(CNT)=""
"RTN","IB534PST",87,0)
 S CNT=CNT+1,MSG(CNT)="Updated "_SUCCNT_" records in the IB NCPDP EVENT LOG."
"RTN","IB534PST",88,0)
 I ERRCNT D
"RTN","IB534PST",89,0)
 . S CNT=CNT+1,MSG(CNT)=ERRCNT_" dictionary entries were not created."
"RTN","IB534PST",90,0)
 . S CNT=CNT+1,MSG(CNT)="Create a support ticket to resolve failures."
"RTN","IB534PST",91,0)
 S CNT=CNT+1,MSG(CNT)=""
"RTN","IB534PST",92,0)
 S CNT=CNT+1,MSG(CNT)="For more information about this post install, review the patch description."
"RTN","IB534PST",93,0)
 D ^XMD
"RTN","IB534PST",94,0)
 Q
"RTN","IBNCPDP1")
0^3^B164054794
"RTN","IBNCPDP1",1,0)
IBNCPDP1 ;OAK/ELZ - IB BILLING DETERMINATION PROCESSING FOR NEW RX REQUESTS ;5/22/08
"RTN","IBNCPDP1",2,0)
 ;;2.0;INTEGRATED BILLING;**223,276,339,363,383,405,384,411,434,437,435,455,452,473,494,534**;21-MAR-94;Build 18
"RTN","IBNCPDP1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPDP1",4,0)
 ;
"RTN","IBNCPDP1",5,0)
 ; Reference to CL^SDCO21 supported by IA# 406
"RTN","IBNCPDP1",6,0)
 ; Reference to IN5^VADPT supported by IA# 10061
"RTN","IBNCPDP1",7,0)
 ; Reference to $$MWC^PSOBPSU2 supported by IA# 4970
"RTN","IBNCPDP1",8,0)
 ;
"RTN","IBNCPDP1",9,0)
RX(DFN,IBD) ; pharmacy package call, passing in IBD by ref
"RTN","IBNCPDP1",10,0)
 ; this is called by PSO for all prescriptions issued, return is
"RTN","IBNCPDP1",11,0)
 ; a response to bill ECME or not with array for billing data elements
"RTN","IBNCPDP1",12,0)
 ;
"RTN","IBNCPDP1",13,0)
 ;warning: back-billing flag:
"RTN","IBNCPDP1",14,0)
 ;if passed IBSCRES(IBRXN,IBFIL)=1
"RTN","IBNCPDP1",15,0)
 ; - then the SC Determination is just done by the IB clerk (billable)
"RTN","IBNCPDP1",16,0)
 ; - set by routine IBNCPBB
"RTN","IBNCPDP1",17,0)
 ;
"RTN","IBNCPDP1",18,0)
 ; IBD("PLAN") - is specified only if RX API is called for billing determination for 2ndary claim.
"RTN","IBNCPDP1",19,0)
 ;
"RTN","IBNCPDP1",20,0)
 ;clean up the list of non-answered SC/Env.indicators questions and INS
"RTN","IBNCPDP1",21,0)
 K IBD("SC/EI NO ANSW"),IBD("INS")
"RTN","IBNCPDP1",22,0)
 ;
"RTN","IBNCPDP1",23,0)
 N IBTRKR,IBARR,IBADT,IBRXN,IBFIL,IBTRKRN,IBRMARK,IBANY,IBX,IBT,IBINS,IBSAVE,IBPRDATA,IBDISPFEE,IBADMINFEE
"RTN","IBNCPDP1",24,0)
 N IBFEE,IBBI,IBIT,IBPRICE,IBRS,IBRT,IBTRN,IBCHG,IBRES,IBNEEDS,IBELIG,IBDEA,IBPTYP,IBACDUTY
"RTN","IBNCPDP1",25,0)
 ;
"RTN","IBNCPDP1",26,0)
 ; eligibility verification request flag - esg 9/9/10 IB*2*435
"RTN","IBNCPDP1",27,0)
 S IBELIG=($G(IBD("RX ACTION"))="ELIG")
"RTN","IBNCPDP1",28,0)
 ;
"RTN","IBNCPDP1",29,0)
 I '$G(DFN) S IBRES="0^No DFN" G RXQ
"RTN","IBNCPDP1",30,0)
 ;
"RTN","IBNCPDP1",31,0)
 S IBRES="0^Error"
"RTN","IBNCPDP1",32,0)
 S IBADT=+$G(IBD("DOS"),DT)      ; date of service (default to today)
"RTN","IBNCPDP1",33,0)
 ;
"RTN","IBNCPDP1",34,0)
 ; -- gather all active pharmacy insurance policies for patient on date of service
"RTN","IBNCPDP1",35,0)
 D RXINS^IBNCPDPU(DFN,IBADT,.IBINS)
"RTN","IBNCPDP1",36,0)
 ;
"RTN","IBNCPDP1",37,0)
 ; -- determine rate type
"RTN","IBNCPDP1",38,0)
 S IBRT=$$RT^IBNCPDPU(DFN,IBADT,.IBINS,.IBPTYP)
"RTN","IBNCPDP1",39,0)
 ;
"RTN","IBNCPDP1",40,0)
 ; If the rate type was selected by the user for manual primary or secondary claims processing, then update IBRT
"RTN","IBNCPDP1",41,0)
 I $G(IBD("RTYPE")),$G(IBD("PLAN")) D
"RTN","IBNCPDP1",42,0)
 . S $P(IBRT,U,1)=+IBD("RTYPE")                              ; overwrite the rate type ien [1]
"RTN","IBNCPDP1",43,0)
 . S $P(IBRT,U,2)=$$COSTTYP^IBNCPUT3(+IBD("RTYPE"),IBADT)    ; overwrite the basis of cost determination [2]
"RTN","IBNCPDP1",44,0)
 . I $P(IBRT,U,3)="" S $P(IBRT,U,3)=IBPTYP                   ; overwrite eligibility if null [3]
"RTN","IBNCPDP1",45,0)
 . Q
"RTN","IBNCPDP1",46,0)
 ;
"RTN","IBNCPDP1",47,0)
 ; -- Process an eligibility verification request
"RTN","IBNCPDP1",48,0)
 I IBELIG D  G RXQ
"RTN","IBNCPDP1",49,0)
 . S IBRES=1
"RTN","IBNCPDP1",50,0)
 . D SETINSUR(IBADT,IBRT,IBELIG,.IBINS,.IBD,.IBRES)
"RTN","IBNCPDP1",51,0)
 . Q
"RTN","IBNCPDP1",52,0)
 ;
"RTN","IBNCPDP1",53,0)
 ; additional data integrity checks
"RTN","IBNCPDP1",54,0)
 S IBRXN=+$G(IBD("IEN")) I 'IBRXN S IBRES="0^No Rx IEN" G RXQ
"RTN","IBNCPDP1",55,0)
 S IBFIL=+$G(IBD("FILL NUMBER"),-1) I IBFIL<0 S IBRES="0^No fill number" G RXQ
"RTN","IBNCPDP1",56,0)
 S IBD("QTY")=+$G(IBD("QTY")) I 'IBD("QTY") S IBRES="0^No Quantity" G RXQ
"RTN","IBNCPDP1",57,0)
 ;
"RTN","IBNCPDP1",58,0)
 ; -- Gather claims tracking information if it exists
"RTN","IBNCPDP1",59,0)
 S IBTRKR=$G(^IBE(350.9,1,6))
"RTN","IBNCPDP1",60,0)
 ; date can't be before parameters
"RTN","IBNCPDP1",61,0)
 S $P(IBTRKR,U)=$S('$P(IBTRKR,U,4):0,+IBTRKR&(IBADT<+IBTRKR):0,1:IBADT)
"RTN","IBNCPDP1",62,0)
 ; already in claims tracking
"RTN","IBNCPDP1",63,0)
 S IBTRKRN=+$O(^IBT(356,"ARXFL",IBRXN,IBFIL,0))
"RTN","IBNCPDP1",64,0)
 ;
"RTN","IBNCPDP1",65,0)
 ;for secondary billing - skip claim tracking functionality
"RTN","IBNCPDP1",66,0)
 G:$G(IBD("RXCOB"))>1 GETINS
"RTN","IBNCPDP1",67,0)
 ;
"RTN","IBNCPDP1",68,0)
 ; -- claims tracking info
"RTN","IBNCPDP1",69,0)
 I IBTRKRN,$$PAPERBIL^IBNCPNB(IBTRKRN) S IBRES="0^Existing IB Bill in CT",IBD("NO ECME INSURANCE")=1 G RXQ
"RTN","IBNCPDP1",70,0)
 ;
"RTN","IBNCPDP1",71,0)
 ; -- no pharmacy coverage, update ct if applicable, quit
"RTN","IBNCPDP1",72,0)
 I '$$PTCOV^IBCNSU3(DFN,IBADT,"PHARMACY",.IBANY) S IBRMARK=$S($G(IBANY):"SERVICE NOT COVERED",1:"NOT INSURED") D:$P(IBTRKR,U,4)=2 CT S IBRES="0^"_IBRMARK,IBD("NO ECME INSURANCE")=1 G RXQ
"RTN","IBNCPDP1",73,0)
 ;
"RTN","IBNCPDP1",74,0)
 ; Environmental Indicators Validation
"RTN","IBNCPDP1",75,0)
 ; Find out if the patient is Active Duty - IB*2*534
"RTN","IBNCPDP1",76,0)
 S IBACDUTY=$P(IBRT,U,3)="T"&$$ACDUTY^IBNCPDPU(DFN)
"RTN","IBNCPDP1",77,0)
 ; Retrieve indicators from file #52 and overwrite the indicators in IBD array
"RTN","IBNCPDP1",78,0)
 D GETINDIC^IBNCPUT2(+IBD("IEN"),.IBD)
"RTN","IBNCPDP1",79,0)
 ; Process patient exemptions if any and if not already resolved
"RTN","IBNCPDP1",80,0)
 S IBNEEDS=0 ;flag will be set to 1 if at least one of the questions wasn't answered
"RTN","IBNCPDP1",81,0)
 I $G(IBD("SC/EI OVR"))'=1,'IBACDUTY D
"RTN","IBNCPDP1",82,0)
 . D CL^SDCO21(DFN,IBADT,"",.IBARR)
"RTN","IBNCPDP1",83,0)
 . I $D(IBARR)>9 F IBX=2:1 S IBT=$P($T(EXEMPT+IBX),";;",2) Q:IBT=""  D:$D(IBARR(+IBT))
"RTN","IBNCPDP1",84,0)
 . . I $G(IBD($P(IBT,U,2)))=0 Q
"RTN","IBNCPDP1",85,0)
 . . I $G(IBD($P(IBT,U,2))) S IBRMARK=$P(IBT,U,3) Q
"RTN","IBNCPDP1",86,0)
 . . I '$G(IBSCRES(IBRXN,IBFIL)) S IBNEEDS=1 D
"RTN","IBNCPDP1",87,0)
 . . . S IBD("SC/EI NO ANSW")=$S($G(IBD("SC/EI NO ANSW"))="":$P(IBT,U,2),1:$G(IBD("SC/EI NO ANSW"))_","_$P(IBT,U,2))
"RTN","IBNCPDP1",88,0)
 I '$D(IBRMARK),IBNEEDS=1 S IBRMARK="NEEDS SC DETERMINATION"
"RTN","IBNCPDP1",89,0)
 I $D(IBRMARK) D CT S IBRES="0^"_IBRMARK G RXQ
"RTN","IBNCPDP1",90,0)
 ;
"RTN","IBNCPDP1",91,0)
 ;  -- check for DEA SPECIAL HDLG
"RTN","IBNCPDP1",92,0)
 S IBDEA=$$DEA^IBNCPDP($G(IBD("DEA")),.IBRMARK) I 'IBDEA S IBRES=IBDEA D CT G RXQ
"RTN","IBNCPDP1",93,0)
 ;
"RTN","IBNCPDP1",94,0)
 ; Clean-up the NEEDS SC DETERMINATION record if resolved
"RTN","IBNCPDP1",95,0)
 ; And check if it is non-billable in CT
"RTN","IBNCPDP1",96,0)
 I IBTRKRN D
"RTN","IBNCPDP1",97,0)
 . N IBNBR,IBNBRT
"RTN","IBNCPDP1",98,0)
 . S IBNBR=$P($G(^IBT(356,+IBTRKRN,0)),U,19) Q:'IBNBR
"RTN","IBNCPDP1",99,0)
 . S IBNBRT=$P($G(^IBE(356.8,IBNBR,0)),U) Q:IBNBRT=""
"RTN","IBNCPDP1",100,0)
 . ; if refill was deleted (not RX) and now the refill is re-entered
"RTN","IBNCPDP1",101,0)
 . ;use $$RXSTATUS^IBNCPRR instead of $G(^PSRX(IBRXN,"STA"))
"RTN","IBNCPDP1",102,0)
 . I IBNBRT="PRESCRIPTION DELETED",$$RXSTATUS^IBNCPRR(DFN,IBRXN)'=13 D  Q
"RTN","IBNCPDP1",103,0)
 . . N DIE,DA,DR
"RTN","IBNCPDP1",104,0)
 . . ; clean up REASON NOT BILLABLE and ADDITIONAL COMMENT
"RTN","IBNCPDP1",105,0)
 . . S DIE="^IBT(356,",DA=+IBTRKRN,DR=".19////@;1.08////@" D ^DIE
"RTN","IBNCPDP1",106,0)
 . ; Clean up NBR if released
"RTN","IBNCPDP1",107,0)
 . I IBNBRT="PRESCRIPTION NOT RELEASED" D:$G(IBD("RELEASE DATE"))  Q
"RTN","IBNCPDP1",108,0)
 . . N DIE,DA,DR
"RTN","IBNCPDP1",109,0)
 . . S DIE="^IBT(356,",DA=+IBTRKRN,DR=".19////@" D ^DIE
"RTN","IBNCPDP1",110,0)
 . ; Clean up 'Needs SC determ'
"RTN","IBNCPDP1",111,0)
 . I IBNBRT="NEEDS SC DETERMINATION" D  Q
"RTN","IBNCPDP1",112,0)
 . . N DIE,DA,DR
"RTN","IBNCPDP1",113,0)
 . . S DIE="^IBT(356,",DA=+IBTRKRN,DR=".19////@" D ^DIE
"RTN","IBNCPDP1",114,0)
 . S IBRMARK=IBNBRT
"RTN","IBNCPDP1",115,0)
 I $D(IBRMARK) S IBRES="0^Non-Billable in CT: "_IBRMARK G RXQ
"RTN","IBNCPDP1",116,0)
 ;
"RTN","IBNCPDP1",117,0)
GETINS ; -- setup insurance data for patient
"RTN","IBNCPDP1",118,0)
 ;
"RTN","IBNCPDP1",119,0)
 D SETINSUR(IBADT,IBRT,IBELIG,.IBINS,.IBD,.IBRES)       ; build IBD("INS") insurance array
"RTN","IBNCPDP1",120,0)
 I $G(IBD("NO ECME INSURANCE")) G RXQ
"RTN","IBNCPDP1",121,0)
 ;
"RTN","IBNCPDP1",122,0)
 ;for secondary billing - skip ROI functionality
"RTN","IBNCPDP1",123,0)
 G:$G(IBD("RXCOB"))>1 RATEPRIC
"RTN","IBNCPDP1",124,0)
 ;
"RTN","IBNCPDP1",125,0)
 ; -- check drug for sensitive dx special handling code and ROI on file
"RTN","IBNCPDP1",126,0)
 I IBD("DEA")["U",$D(IBD("INS",1,3)) D  G:$D(IBRMARK) RXQ
"RTN","IBNCPDP1",127,0)
 . I '$$ROI^IBNCPDR4(DFN,$G(IBD("DRUG")),+$P($G(IBD("INS",1,3)),U,5),IBADT) D  Q
"RTN","IBNCPDP1",128,0)
 .. S IBRMARK="REFUSES TO SIGN RELEASE (ROI)"
"RTN","IBNCPDP1",129,0)
 .. D CT
"RTN","IBNCPDP1",130,0)
 .. S IBRES="0^NOT BILLABLE, NO ROI - NO ACTIVE ROI ON FILE"
"RTN","IBNCPDP1",131,0)
 . D ROICLN^IBNCPDR4(IBTRKRN,IBRXN,IBFIL) K:$G(IBRMARK)="REFUSES TO SIGN RELEASE (ROI)" IBRMARK
"RTN","IBNCPDP1",132,0)
 ;
"RTN","IBNCPDP1",133,0)
RATEPRIC ;
"RTN","IBNCPDP1",134,0)
 ; determine rates/prices to use
"RTN","IBNCPDP1",135,0)
 I 'IBRT D CT S IBRES="0^Cannot determine Rate type" G RXQ
"RTN","IBNCPDP1",136,0)
 S IBBI=$$EVNTITM^IBCRU3(+IBRT,3,"PRESCRIPTION FILL",IBADT,.IBRS)
"RTN","IBNCPDP1",137,0)
 I 'IBBI,$P(IBBI,";")'="VA COST" D CT S IBRES="0^Cannot find Billable Item" G RXQ
"RTN","IBNCPDP1",138,0)
 ;
"RTN","IBNCPDP1",139,0)
 ; Check for missing NDC
"RTN","IBNCPDP1",140,0)
 I $G(IBD("NDC"))="" D CT S IBRES="0^Missing NDC" G RXQ
"RTN","IBNCPDP1",141,0)
 ;
"RTN","IBNCPDP1",142,0)
 ;1;BEDSECTION;1^
"RTN","IBNCPDP1",143,0)
 ;IBRS(1,18,5)=
"RTN","IBNCPDP1",144,0)
 S IBRS=+$O(IBRS($P(IBBI,";"),0))
"RTN","IBNCPDP1",145,0)
 S IBIT=$$ITPTR^IBCRU2($P(IBBI,";"),$S($P(IBRT,U,2)="A":$$NDC^IBNCPNB($G(IBD("NDC"))),1:"PRESCRIPTION"))
"RTN","IBNCPDP1",146,0)
 I 'IBIT,$P(IBRT,U,2)'="C" D CT S IBRES="0^Cannot find Item Pointer" G RXQ
"RTN","IBNCPDP1",147,0)
 ;8
"RTN","IBNCPDP1",148,0)
 S IBPRICE=+$$BICOST^IBCRCI(+IBRT,3,IBADT,"PRESCRIPTION FILL",+IBIT,,,$S($P(IBRT,U,2)="A":IBD("QTY"),1:1))
"RTN","IBNCPDP1",149,0)
 ;36^2991001
"RTN","IBNCPDP1",150,0)
 ;
"RTN","IBNCPDP1",151,0)
 ; return the true value of drug cost for 3rd party bill if it is zero
"RTN","IBNCPDP1",152,0)
 I IBD("COST")=0,$P($G(^DGCR(399.3,+$P(IBRT,U,1),0)),U,5) S IBD("COST")=$$RXPCT(.IBD,.BWHERE)
"RTN","IBNCPDP1",153,0)
 ;
"RTN","IBNCPDP1",154,0)
 ; get fees if any, ignore return, don't care about price, just need fees
"RTN","IBNCPDP1",155,0)
 S IBCHG=$$RATECHG^IBCRCC(+IBRS,$S($P(IBRT,U,2)'="C":1,1:IBD("QTY")*IBD("COST")),IBADT,.IBFEE)
"RTN","IBNCPDP1",156,0)
 I $P(IBRT,U,2)="C" S IBPRICE=+IBCHG
"RTN","IBNCPDP1",157,0)
 ;
"RTN","IBNCPDP1",158,0)
 S IBDISPFEE=+$P($G(IBFEE),U,1)     ; dispensing fee
"RTN","IBNCPDP1",159,0)
 S IBADMINFEE=+$P($G(IBFEE),U,2)    ; administrative fee
"RTN","IBNCPDP1",160,0)
 ;
"RTN","IBNCPDP1",161,0)
 I 'IBPRICE D CT S IBRES="0^Cannot find price for Item" G RXQ
"RTN","IBNCPDP1",162,0)
 ;
"RTN","IBNCPDP1",163,0)
 ; build pricing data string
"RTN","IBNCPDP1",164,0)
 S IBPRDATA=""
"RTN","IBNCPDP1",165,0)
 S $P(IBPRDATA,U,1)=IBDISPFEE                     ; dispensing fee
"RTN","IBNCPDP1",166,0)
 S $P(IBPRDATA,U,2)=$S($P(IBRT,U,2)="A":"01",$P(IBRT,U,2)="C":"05",1:"07")   ; basis of cost determination
"RTN","IBNCPDP1",167,0)
 S $P(IBPRDATA,U,3)=$S($P(IBRT,U,2)="C":IBD("QTY")*IBD("COST")+IBDISPFEE,$P(IBRT,U,2)="A":IBPRICE-IBDISPFEE-IBADMINFEE,1:IBPRICE)   ; basis of cost amount
"RTN","IBNCPDP1",168,0)
 S $P(IBPRDATA,U,4)=IBPRICE                       ; gross amount due
"RTN","IBNCPDP1",169,0)
 S $P(IBPRDATA,U,5)=IBADMINFEE                    ; administrative fee
"RTN","IBNCPDP1",170,0)
 S $P(IBPRDATA,U,6)=IBD("QTY")*IBD("COST")        ; ingredient cost
"RTN","IBNCPDP1",171,0)
 S $P(IBPRDATA,U,7)=IBPRICE-IBADMINFEE            ; usual & customary charge (U&C)
"RTN","IBNCPDP1",172,0)
 ;
"RTN","IBNCPDP1",173,0)
 ; store the pricing data string on each node 2 that may exist
"RTN","IBNCPDP1",174,0)
 S IBX=0 F  S IBX=$O(IBD("INS",IBX)) Q:'IBX  S IBD("INS",IBX,2)=IBPRDATA
"RTN","IBNCPDP1",175,0)
 ;
"RTN","IBNCPDP1",176,0)
 S IBRES=$S($D(IBRMARK):"0^"_IBRMARK,1:1)
"RTN","IBNCPDP1",177,0)
 I IBRES,'$G(IBD("RELEASE DATE")) S IBRMARK="PRESCRIPTION NOT RELEASED"
"RTN","IBNCPDP1",178,0)
 ;
"RTN","IBNCPDP1",179,0)
 D CT
"RTN","IBNCPDP1",180,0)
 ;
"RTN","IBNCPDP1",181,0)
RXQ ; final processing
"RTN","IBNCPDP1",182,0)
 ; set the 3rd piece of IBRES (default Vet)
"RTN","IBNCPDP1",183,0)
 S $P(IBRES,U,3)=$S($L($P($G(IBRT),U,3)):$P(IBRT,U,3),1:"V")
"RTN","IBNCPDP1",184,0)
 ;
"RTN","IBNCPDP1",185,0)
 ; possibly add entries to files 366.14 and 366.15 (not for eligibility verification requests)
"RTN","IBNCPDP1",186,0)
 I 'IBELIG D
"RTN","IBNCPDP1",187,0)
 . I IBRES D START^IBNCPDP6(IBRXN_";"_IBFIL,$P(IBRES,U,3),+IBRT)
"RTN","IBNCPDP1",188,0)
 . D LOG^IBNCPDP2("BILLABLE STATUS CHECK",IBRES)
"RTN","IBNCPDP1",189,0)
 . Q
"RTN","IBNCPDP1",190,0)
 ;
"RTN","IBNCPDP1",191,0)
 Q IBRES
"RTN","IBNCPDP1",192,0)
 ;
"RTN","IBNCPDP1",193,0)
 ;
"RTN","IBNCPDP1",194,0)
CT ; files in claims tracking
"RTN","IBNCPDP1",195,0)
 Q:$G(IBD("RXCOB"))>1  ;Claim Tracking is updated only for the primary payer (payer sequence =1)
"RTN","IBNCPDP1",196,0)
 ;If null then the payer sequence = Primary is assumed
"RTN","IBNCPDP1",197,0)
 I IBTRKR D CT^IBNCPDPU(DFN,IBRXN,IBFIL,IBADT,$G(IBRMARK))
"RTN","IBNCPDP1",198,0)
 Q
"RTN","IBNCPDP1",199,0)
 ;
"RTN","IBNCPDP1",200,0)
SETINSUR(IBADT,IBRT,IBELIG,IBINS,IBD,IBRES) ; build insurance data array
"RTN","IBNCPDP1",201,0)
 ; Input variables:
"RTN","IBNCPDP1",202,0)
 ;    IBADT - date of service/identify insurance as of this date
"RTN","IBNCPDP1",203,0)
 ;     IBRT - rate type variable - [1] rate type ien, [2] type (A/C/T), [3] eligibility (V/T/C)
"RTN","IBNCPDP1",204,0)
 ;   IBELIG - eligibility request flag (1/0)
"RTN","IBNCPDP1",205,0)
 ;    IBINS - insurance array as returned by RXINS^IBNCPDPU
"RTN","IBNCPDP1",206,0)
 ;      IBD - input/output - array entries passed in and certain array entries returned
"RTN","IBNCPDP1",207,0)
 ; Output variable:
"RTN","IBNCPDP1",208,0)
 ;    IBRES - only returned if insurance errors
"RTN","IBNCPDP1",209,0)
 ;
"RTN","IBNCPDP1",210,0)
 ; Note: if more than one insurance with the same COB then the latest insurance occurrence overrides the first one(s)
"RTN","IBNCPDP1",211,0)
 ; Example:
"RTN","IBNCPDP1",212,0)
 ; IBINS("S",1,1)=""
"RTN","IBNCPDP1",213,0)
 ; IBINS("S",1,3)="" <<--- this will be primary
"RTN","IBNCPDP1",214,0)
 ;
"RTN","IBNCPDP1",215,0)
 K IBD("INS"),IBD("NO ECME INSURANCE")
"RTN","IBNCPDP1",216,0)
 ;
"RTN","IBNCPDP1",217,0)
 N IBCNT,IBERMSG,IBRXPOL,IBT,IBX
"RTN","IBNCPDP1",218,0)
 ; IBERMSG - error message array
"RTN","IBNCPDP1",219,0)
 ; IBRXPOL - array of Rx policies found
"RTN","IBNCPDP1",220,0)
 ;
"RTN","IBNCPDP1",221,0)
 S IBX=0 F  S IBX=$O(IBINS("S",IBX)) Q:'IBX  D
"RTN","IBNCPDP1",222,0)
 . S IBT=0 F  S IBT=$O(IBINS("S",IBX,IBT)) Q:'IBT  D
"RTN","IBNCPDP1",223,0)
 .. N IBDAT,IBPL,IBINSN,IBPIEN,IBY,IBZ,IBCHNM,IBREL,IBPLNTYP
"RTN","IBNCPDP1",224,0)
 .. S IBZ=$G(IBINS(IBT,0)) Q:IBZ=""
"RTN","IBNCPDP1",225,0)
 .. S IBPL=$P(IBZ,U,18) ; plan
"RTN","IBNCPDP1",226,0)
 .. Q:'IBPL
"RTN","IBNCPDP1",227,0)
 .. Q:'$$PLCOV^IBCNSU3(IBPL,IBADT,3)           ; not a pharmacy plan
"RTN","IBNCPDP1",228,0)
 .. I $G(IBD("PLAN")) Q:IBPL'=$G(IBD("PLAN"))  ; skip other plans if we call RX API for a specific plan (IBD("PLAN"))
"RTN","IBNCPDP1",229,0)
 .. ;
"RTN","IBNCPDP1",230,0)
 .. ; at this point we have found an Rx policy.  We'll count these up later by IBX.
"RTN","IBNCPDP1",231,0)
 .. S IBRXPOL(IBX,IBT)=""
"RTN","IBNCPDP1",232,0)
 .. ;
"RTN","IBNCPDP1",233,0)
 .. S IBPLNTYP=$P($G(^IBE(355.1,+$P($G(IBINS(IBT,355.3)),U,9),0)),U,1)   ; type of plan name, insurance plan type
"RTN","IBNCPDP1",234,0)
 .. I '$G(IBD("PLAN")) I '$D(IBD("INS",IBX)),$P(IBRT,U,3)="V",(IBPLNTYP["TRICARE"!(IBPLNTYP="CHAMPVA")) S IBERMSG(IBX)=IBPLNTYP_" coverage for a Veteran" Q
"RTN","IBNCPDP1",235,0)
 .. ;
"RTN","IBNCPDP1",236,0)
 .. S IBPIEN=+$G(^IBA(355.3,+IBPL,6))
"RTN","IBNCPDP1",237,0)
 .. I 'IBPIEN S IBERMSG(IBX)="Plan not linked to the Payer" Q  ; Not linked
"RTN","IBNCPDP1",238,0)
 .. ;
"RTN","IBNCPDP1",239,0)
 .. K IBY D STCHK^IBCNRU1(IBPIEN,.IBY,IBELIG)
"RTN","IBNCPDP1",240,0)
 .. I $E($G(IBY(1)))'="A" S IBERMSG(IBX)=$$ERMSG^IBNCPNB($G(IBY(6))) Q  ; not active
"RTN","IBNCPDP1",241,0)
 .. ;
"RTN","IBNCPDP1",242,0)
 .. ; at this point we have a valid policy for this IBX
"RTN","IBNCPDP1",243,0)
 .. S IBERMSG(IBX)=""          ; no error message
"RTN","IBNCPDP1",244,0)
 .. S IBINSN=$P($G(^DIC(36,+$G(^IBA(355.3,+IBPL,0)),0)),U) ; ins name
"RTN","IBNCPDP1",245,0)
 .. S IBCHNM=$$NAME^IBCEFG1($P(IBZ,U,17))   ; standardize subscriber/cardholder name
"RTN","IBNCPDP1",246,0)
 .. S IBREL=+$P($G(IBINS(IBT,4)),U,5)       ; pointer to pharmacy relationship code file
"RTN","IBNCPDP1",247,0)
 .. ; use the #4.05 field if it exists, otherwise use the old pt relationship field #16
"RTN","IBNCPDP1",248,0)
 .. S IBREL=$S(IBREL:$$EXTERNAL^DILFD(2.312,4.05,,IBREL),1:$P(IBZ,U,16))
"RTN","IBNCPDP1",249,0)
 .. ;
"RTN","IBNCPDP1",250,0)
 .. S IBDAT=""
"RTN","IBNCPDP1",251,0)
 .. S $P(IBDAT,U,1)=IBPL       ; Plan IEN
"RTN","IBNCPDP1",252,0)
 .. S $P(IBDAT,U,2)=$G(IBY(2)) ; BIN
"RTN","IBNCPDP1",253,0)
 .. S $P(IBDAT,U,3)=$G(IBY(3)) ; PCN
"RTN","IBNCPDP1",254,0)
 .. S $P(IBDAT,U,4)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",1),0)),U) ; Payer Sheet B1 name
"RTN","IBNCPDP1",255,0)
 .. S $P(IBDAT,U,5)=$P($G(IBINS(IBT,355.3)),U,4) ; Group ID
"RTN","IBNCPDP1",256,0)
 .. S $P(IBDAT,U,6)=$P(IBZ,U,2)     ; Cardholder ID
"RTN","IBNCPDP1",257,0)
 .. S $P(IBDAT,U,7)=IBREL           ; Patient Relationship Code
"RTN","IBNCPDP1",258,0)
 .. S $P(IBDAT,U,8)=$P(IBCHNM,U,2)  ; Cardholder First Name
"RTN","IBNCPDP1",259,0)
 .. S $P(IBDAT,U,9)=$P(IBCHNM,U,1)  ; Cardholder Last Name
"RTN","IBNCPDP1",260,0)
 .. S $P(IBDAT,U,10)=$P($G(^DIC(36,+IBZ,.11)),U,5) ; State
"RTN","IBNCPDP1",261,0)
 .. S $P(IBDAT,U,11)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",2),0)),U) ; Payer Sheet B2 name
"RTN","IBNCPDP1",262,0)
 .. S $P(IBDAT,U,12)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",3),0)),U) ; Payer Sheet B3 name
"RTN","IBNCPDP1",263,0)
 .. S $P(IBDAT,U,13)=$G(IBY(4)) ; Software/Vendor Cert ID
"RTN","IBNCPDP1",264,0)
 .. S $P(IBDAT,U,14)=IBINSN ; Ins Name
"RTN","IBNCPDP1",265,0)
 .. S $P(IBDAT,U,15)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",4),0)),U) ; Payer Sheet E1 name
"RTN","IBNCPDP1",266,0)
 .. S $P(IBDAT,U,16)=+$P($G(IBY(5)),",",1)     ; Payer Sheet B1 ien
"RTN","IBNCPDP1",267,0)
 .. S $P(IBDAT,U,17)=+$P($G(IBY(5)),",",2)     ; Payer Sheet B2 ien
"RTN","IBNCPDP1",268,0)
 .. S $P(IBDAT,U,18)=+$P($G(IBY(5)),",",3)     ; Payer Sheet B3 ien
"RTN","IBNCPDP1",269,0)
 .. S $P(IBDAT,U,19)=+$P($G(IBY(5)),",",4)     ; Payer Sheet E1 ien
"RTN","IBNCPDP1",270,0)
 .. S $P(IBDAT,U,20)=$P($G(IBINS(IBT,4)),U,6)  ; Pharmacy Person Code
"RTN","IBNCPDP1",271,0)
 .. S IBD("INS",IBX,1)=IBDAT
"RTN","IBNCPDP1",272,0)
 .. ;
"RTN","IBNCPDP1",273,0)
 .. S IBDAT=""
"RTN","IBNCPDP1",274,0)
 .. S $P(IBDAT,U,1)=$P($G(IBINS(IBT,355.3)),U,3) ;group name
"RTN","IBNCPDP1",275,0)
 .. S $P(IBDAT,U,2)=$$PHONE^IBNCPDP6(+IBZ) ;ins co ph 3
"RTN","IBNCPDP1",276,0)
 .. S $P(IBDAT,U,3)=$$GET1^DIQ(366.03,IBPIEN_",",.01) ;plan ID
"RTN","IBNCPDP1",277,0)
 .. S $P(IBDAT,U,4)=$S(IBPLNTYP="TRICARE":"T",IBPLNTYP="CHAMPVA":"C",1:"V") ; plan type
"RTN","IBNCPDP1",278,0)
 .. S $P(IBDAT,U,5)=+$G(^IBA(355.3,+IBPL,0)) ; insurance co ien
"RTN","IBNCPDP1",279,0)
 .. S $P(IBDAT,U,6)=$P(IBZ,U,20) ;(#.2) COB field of the (#.3121) insurance Type multiple of the Patient file (#2)
"RTN","IBNCPDP1",280,0)
 .. S $P(IBDAT,U,7)=IBT  ; 2.312 subfile ien
"RTN","IBNCPDP1",281,0)
 .. S $P(IBDAT,U,8)=$$GET1^DIQ(366.03,IBPIEN_",",10.1) ; maximum ncpdp transactions
"RTN","IBNCPDP1",282,0)
 .. S IBD("INS",IBX,3)=IBDAT
"RTN","IBNCPDP1",283,0)
 .. Q
"RTN","IBNCPDP1",284,0)
 . Q
"RTN","IBNCPDP1",285,0)
 ;
"RTN","IBNCPDP1",286,0)
 ; Count the number of pharmacy insurance policies by IBX found up above
"RTN","IBNCPDP1",287,0)
 S IBX=0 F IBCNT=0:1 S IBX=$O(IBRXPOL(IBX)) Q:'IBX
"RTN","IBNCPDP1",288,0)
 ;
"RTN","IBNCPDP1",289,0)
 ; Determine the value of the IBX variable here.  This is basically the COB sequence# to be used.
"RTN","IBNCPDP1",290,0)
 ; If there is only 1 pharmacy policy or no pharmacy policies, then set IBX in this manner
"RTN","IBNCPDP1",291,0)
 I IBCNT'>1 D
"RTN","IBNCPDP1",292,0)
 . I $D(IBD("INS")) S IBX=+$O(IBD("INS",0))     ; use the only one in this array
"RTN","IBNCPDP1",293,0)
 . I '$D(IBD("INS")) S IBX=+$O(IBERMSG(0))      ; the only one here (or 0)
"RTN","IBNCPDP1",294,0)
 . Q
"RTN","IBNCPDP1",295,0)
 ;
"RTN","IBNCPDP1",296,0)
 ; If there are multiple pharmacy policies on file, then the COB field in the pt. policy must be used correctly
"RTN","IBNCPDP1",297,0)
 ;   and primary insurance must be at #1
"RTN","IBNCPDP1",298,0)
 I IBCNT>1 S IBX=1
"RTN","IBNCPDP1",299,0)
 ;
"RTN","IBNCPDP1",300,0)
 ; In all cases, if this variable is set, then use it
"RTN","IBNCPDP1",301,0)
 I $G(IBD("RXCOB"))>1 S IBX=$G(IBD("RXCOB"))
"RTN","IBNCPDP1",302,0)
 ;
"RTN","IBNCPDP1",303,0)
 ; Check insurance at IBX
"RTN","IBNCPDP1",304,0)
 I '$D(IBD("INS",IBX)),$G(IBERMSG(IBX))'="" S IBRES="0^Not ECME billable: "_IBERMSG(IBX),IBD("NO ECME INSURANCE")=1 G SETINX
"RTN","IBNCPDP1",305,0)
 I '$D(IBD("INS",IBX)) S IBRES="0^No Insurance ECME billable",IBD("NO ECME INSURANCE")=1
"RTN","IBNCPDP1",306,0)
SETINX ;
"RTN","IBNCPDP1",307,0)
 Q
"RTN","IBNCPDP1",308,0)
 ;
"RTN","IBNCPDP1",309,0)
RXPCT(IBD,BWHERE) ; Penny drug cost calculation
"RTN","IBNCPDP1",310,0)
 ; Input-IBD array, BWHERE
"RTN","IBNCPDP1",311,0)
 ; Output-return quotient of drug true value with 4 decimal places, or 0
"RTN","IBNCPDP1",312,0)
 N IBDIEN,IBDRX,IBNDC,IBFRM,IBDRFL,IBUNIT,IBSYN,IBQUO,IBDQUO,IBPSUF,IBPORD,IBPDISP,IBDRUG
"RTN","IBNCPDP1",313,0)
 S IBDIEN=IBD("IEN"),IBNDC=IBD("NDC"),IBDRX=IBD("DRUG"),IBDRFL=IBD("FILL NUMBER")
"RTN","IBNCPDP1",314,0)
 S IBFRM=$G(BWHERE),IBQUO=0
"RTN","IBNCPDP1",315,0)
 G:'IBDRX RXPCTQ
"RTN","IBNCPDP1",316,0)
 ; default unit price from (50-13/15)
"RTN","IBNCPDP1",317,0)
 D GETS^DIQ(50,IBDRX,".01;13;15","I","IBUNIT")
"RTN","IBNCPDP1",318,0)
 S IBPORD=$G(IBUNIT(50,IBDRX_",",13,"I"))
"RTN","IBNCPDP1",319,0)
 S IBPDISP=$G(IBUNIT(50,IBDRX_",",15,"I"))
"RTN","IBNCPDP1",320,0)
 S (IBDQUO,IBQUO)=$S(IBPORD&IBPDISP:(IBPORD/IBPDISP),1:0)
"RTN","IBNCPDP1",321,0)
 ;
"RTN","IBNCPDP1",322,0)
 ; unit price from (50.1-402/403) if NDC exists in the SYNONYM subfile
"RTN","IBNCPDP1",323,0)
 D DATA^IBRXUTL(IBDRX)
"RTN","IBNCPDP1",324,0)
 S IBSYN=0 F  S IBSYN=$O(^TMP($J,"IBDRUG",IBDRX,"SYN",IBSYN)) Q:'IBSYN  D
"RTN","IBNCPDP1",325,0)
 . I IBNDC'="",$G(^TMP($J,"IBDRUG",IBDRX,"SYN",IBSYN,2))=IBNDC D
"RTN","IBNCPDP1",326,0)
 .. S IBPSUF=IBSYN_","_IBDRX_","
"RTN","IBNCPDP1",327,0)
 .. D GETS^DIQ(50.1,IBPSUF,".01;402;403","I","IBUNIT")
"RTN","IBNCPDP1",328,0)
 .. S IBPORD=$G(IBUNIT(50.1,IBPSUF,402,"I"))
"RTN","IBNCPDP1",329,0)
 .. S IBPDISP=$G(IBUNIT(50.1,IBPSUF,403,"I"))
"RTN","IBNCPDP1",330,0)
 .. S IBQUO=$S(IBPORD&IBPDISP:(IBPORD/IBPDISP),1:0)
"RTN","IBNCPDP1",331,0)
 ;
"RTN","IBNCPDP1",332,0)
 ; API #4970 - use the default unit price for CMOP
"RTN","IBNCPDP1",333,0)
 I $$MWC^PSOBPSU2(IBDIEN,IBDRFL)="C" D
"RTN","IBNCPDP1",334,0)
 . Q:(IBFRM="PE")!(IBFRM="PP")
"RTN","IBNCPDP1",335,0)
 . S IBQUO=IBDQUO
"RTN","IBNCPDP1",336,0)
 ; set the lowest value 0.0001 with 4 decimal if less than 0.00005
"RTN","IBNCPDP1",337,0)
 I IBQUO S IBQUO=$J(IBQUO,1,4),IBQUO=$S(IBQUO>0:IBQUO,1:"0.0001")
"RTN","IBNCPDP1",338,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBNCPDP1",339,0)
RXPCTQ ;
"RTN","IBNCPDP1",340,0)
 Q IBQUO
"RTN","IBNCPDP1",341,0)
 ;
"RTN","IBNCPDP1",342,0)
EXEMPT ; exemption reasons
"RTN","IBNCPDP1",343,0)
 ; variable from SD call ^ variable from PSO ^ reason not billable
"RTN","IBNCPDP1",344,0)
 ;;1^AO^AGENT ORANGE
"RTN","IBNCPDP1",345,0)
 ;;2^IR^IONIZING RADIATION
"RTN","IBNCPDP1",346,0)
 ;;3^SC^SC TREATMENT
"RTN","IBNCPDP1",347,0)
 ;;4^SWA^SOUTHWEST ASIA
"RTN","IBNCPDP1",348,0)
 ;;5^MST^MILITARY SEXUAL TRAUMA
"RTN","IBNCPDP1",349,0)
 ;;6^HNC^HEAD/NECK CANCER
"RTN","IBNCPDP1",350,0)
 ;;7^CV^COMBAT VETERAN
"RTN","IBNCPDP1",351,0)
 ;;8^SHAD^PROJECT 112/SHAD
"RTN","IBNCPDP1",352,0)
 ;;
"RTN","IBNCPDP1",353,0)
 ;
"RTN","IBNCPDPU")
0^4^B125879968
"RTN","IBNCPDPU",1,0)
IBNCPDPU ;OAK/ELZ - UTILITIES FOR NCPDP ;5/22/08  15:24
"RTN","IBNCPDPU",2,0)
 ;;2.0;INTEGRATED BILLING;**223,276,347,383,405,384,437,435,452,511,534**;21-MAR-94;Build 18
"RTN","IBNCPDPU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPDPU",4,0)
 ;
"RTN","IBNCPDPU",5,0)
 ;Reference to ECMEACT^PSOBPSU1 supported by IA# 4702
"RTN","IBNCPDPU",6,0)
 ;Reference to $$EN^BPSNCPDP supported by IA# 4415
"RTN","IBNCPDPU",7,0)
 ;Reference to $$NABP^BPSBUTL supported by IA# 4719
"RTN","IBNCPDPU",8,0)
 ;Reference to $$CLMECME^BPSUTIL2 supported by IA# 6028
"RTN","IBNCPDPU",9,0)
 ;Reference to $$VALECME^BPSUTIL2 supported by IA# 6139
"RTN","IBNCPDPU",10,0)
 ;
"RTN","IBNCPDPU",11,0)
 ;
"RTN","IBNCPDPU",12,0)
CT(DFN,IBRXN,IBFIL,IBADT,IBRMARK) ; files in claims tracking
"RTN","IBNCPDPU",13,0)
 ; Input:
"RTN","IBNCPDPU",14,0)
 ;  DFN - Patient IEN
"RTN","IBNCPDPU",15,0)
 ;  IBRXN - Rx IEN
"RTN","IBNCPDPU",16,0)
 ;  IBFIL - Fill#
"RTN","IBNCPDPU",17,0)
 ;  IBADT - Date of Service
"RTN","IBNCPDPU",18,0)
 ;  IBRMARK - Non-billable Reason (.01 from 356.8)
"RTN","IBNCPDPU",19,0)
 ;
"RTN","IBNCPDPU",20,0)
 N DIE,DR,DA,IBRXTYP,IBEABD
"RTN","IBNCPDPU",21,0)
 ; Check that the Date of Service is current
"RTN","IBNCPDPU",22,0)
 I IBTRKRN,$G(IBADT),($G(IBADT)'=$P(^IBT(356,IBTRKRN,0),U,6)) D
"RTN","IBNCPDPU",23,0)
 . S DIE="^IBT(356,",DA=IBTRKRN,DR=".06////"_IBADT D ^DIE
"RTN","IBNCPDPU",24,0)
 I IBTRKRN D:$D(IBRMARK)  Q
"RTN","IBNCPDPU",25,0)
 . S DIE="^IBT(356,",DA=IBTRKRN,DR=".19///"_IBRMARK
"RTN","IBNCPDPU",26,0)
 . D ^DIE
"RTN","IBNCPDPU",27,0)
 ; event type pointer for rx billing
"RTN","IBNCPDPU",28,0)
 S IBRXTYP=$O(^IBE(356.6,"AC",4,0))
"RTN","IBNCPDPU",29,0)
 ; earliest auto-billing date
"RTN","IBNCPDPU",30,0)
 S IBEABD=$$EABD^IBTUTL(IBRXTYP,$$FMADD^XLFDT(IBADT,60))
"RTN","IBNCPDPU",31,0)
 ; space out earliest auto bill date
"RTN","IBNCPDPU",32,0)
 ;
"RTN","IBNCPDPU",33,0)
 ; ROI check
"RTN","IBNCPDPU",34,0)
 N IBSCROI,IBDRUG,IBDEA,IBRXDATA
"RTN","IBNCPDPU",35,0)
 S IBRXDATA=$$RXZERO^IBRXUTL(DFN,IBRXN)
"RTN","IBNCPDPU",36,0)
 S IBDRUG=$P(IBRXDATA,U,6)
"RTN","IBNCPDPU",37,0)
 D ZERO^IBRXUTL(IBDRUG)
"RTN","IBNCPDPU",38,0)
 S IBDEA=$G(^TMP($J,"IBDRUG",+IBDRUG,3))
"RTN","IBNCPDPU",39,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBNCPDPU",40,0)
 I $G(IBDEA)["U" D
"RTN","IBNCPDPU",41,0)
 . N IBINS,IBFLG,IBINSP
"RTN","IBNCPDPU",42,0)
 . D ALL^IBCNS1(DFN,"IBINS",1,IBADT,1)
"RTN","IBNCPDPU",43,0)
 . S IBINSP=$O(IBINS("S",1,99),-1) Q:IBINSP=""
"RTN","IBNCPDPU",44,0)
 . S IBFLG=$$ROI^IBNCPDR4(DFN,$G(IBDRUG),+$G(IBINS(IBINSP,"0")),$G(IBADT))
"RTN","IBNCPDPU",45,0)
 . I 'IBFLG,$G(IBRMARK)="" S IBRMARK="REFUSES TO SIGN RELEASE (ROI)"
"RTN","IBNCPDPU",46,0)
 . I 'IBFLG S IBSCROI=3
"RTN","IBNCPDPU",47,0)
 . I IBFLG S IBSCROI=2
"RTN","IBNCPDPU",48,0)
 ;
"RTN","IBNCPDPU",49,0)
 D REFILL^IBTUTL1(DFN,IBRXTYP,IBADT,IBRXN,IBFIL,$G(IBRMARK),IBEABD,$G(IBSCROI))
"RTN","IBNCPDPU",50,0)
 Q
"RTN","IBNCPDPU",51,0)
 ;
"RTN","IBNCPDPU",52,0)
 ;NDC relocated to IBNCPNB
"RTN","IBNCPDPU",53,0)
 ;
"RTN","IBNCPDPU",54,0)
FILL(X,LEN) ; Zero-fill, right justified.
"RTN","IBNCPDPU",55,0)
 N Y
"RTN","IBNCPDPU",56,0)
 S:'$G(LEN) LEN=1
"RTN","IBNCPDPU",57,0)
 S Y=$E($G(X),1,LEN)
"RTN","IBNCPDPU",58,0)
 F  Q:$L(Y)>(LEN-1)  S Y="0"_Y
"RTN","IBNCPDPU",59,0)
 Q Y
"RTN","IBNCPDPU",60,0)
 ;
"RTN","IBNCPDPU",61,0)
PLANN(DFN,IBX,IBADT) ; returns the ien in the insurance multiple for the given plan/patient provided
"RTN","IBNCPDPU",62,0)
 ;   Output:  insurance co ien^2.312 subfile ien
"RTN","IBNCPDPU",63,0)
 N IBPOL,IBY,IBR
"RTN","IBNCPDPU",64,0)
 S IBR=""
"RTN","IBNCPDPU",65,0)
 D ALL^IBCNS1(DFN,"IBPOL",1,IBADT)
"RTN","IBNCPDPU",66,0)
 S IBY=0 F  S IBY=$O(IBPOL(IBY)) Q:'IBY!IBR  I $P($G(IBPOL(IBY,0)),U,18)=IBX S IBR=$P(IBPOL(IBY,0),U,1)_U_IBY Q
"RTN","IBNCPDPU",67,0)
 Q IBR
"RTN","IBNCPDPU",68,0)
 ;
"RTN","IBNCPDPU",69,0)
PLANEPS(IBPL) ; returns the ePharmacy payer sheets for a group plan 
"RTN","IBNCPDPU",70,0)
 ; IBPL = IEN to GROUP INSURANCE PLAN file #355.3
"RTN","IBNCPDPU",71,0)
 ; Returns: Payer Sheets. (B1,B2,B3,E1) (comma separated string)
"RTN","IBNCPDPU",72,0)
 ;   Successful:   1^B1,B2,B3,E1
"RTN","IBNCPDPU",73,0)
 ;   Unsuccessful: 0
"RTN","IBNCPDPU",74,0)
 N PIEN,IBR,PLN10,B1,B2,B3,E1
"RTN","IBNCPDPU",75,0)
 S IBR=0
"RTN","IBNCPDPU",76,0)
 I '$G(IBPL) Q IBR
"RTN","IBNCPDPU",77,0)
 ; Get ePharmacy plan IEN
"RTN","IBNCPDPU",78,0)
 S PIEN=+$P($G(^IBA(355.3,IBPL,6)),U,1)
"RTN","IBNCPDPU",79,0)
 I 'PIEN Q IBR
"RTN","IBNCPDPU",80,0)
 S PLN10=$G(^IBCNR(366.03,PIEN,10))
"RTN","IBNCPDPU",81,0)
 ; check for test/production sheets
"RTN","IBNCPDPU",82,0)
 ; get the test payer sheet first.  If nil, then get the regular payer sheet
"RTN","IBNCPDPU",83,0)
 S (B1,B2,B3,E1)=""
"RTN","IBNCPDPU",84,0)
 S B1=$P(PLN10,U,11),B2=$P(PLN10,U,12),B3=$P(PLN10,U,13),E1=$P(PLN10,U,14)
"RTN","IBNCPDPU",85,0)
 I 'B1 S B1=$P(PLN10,U,7)         ; billing
"RTN","IBNCPDPU",86,0)
 I 'B2 S B2=$P(PLN10,U,8)         ; reversal
"RTN","IBNCPDPU",87,0)
 I 'B3 S B3=$P(PLN10,U,9)         ; rebill (not currently validated)
"RTN","IBNCPDPU",88,0)
 I 'E1 S E1=$P(PLN10,U,15)        ; eligibility
"RTN","IBNCPDPU",89,0)
 S IBR="1^"_B1_","_B2_","_B3_","_E1
"RTN","IBNCPDPU",90,0)
 Q IBR
"RTN","IBNCPDPU",91,0)
 ;
"RTN","IBNCPDPU",92,0)
RT(DFN,IBDT,IBINS,IBPTYP) ; returns rate type to use for bill
"RTN","IBNCPDPU",93,0)
 ; Input:
"RTN","IBNCPDPU",94,0)
 ;    DFN - patient ien
"RTN","IBNCPDPU",95,0)
 ;   IBDT - date of service
"RTN","IBNCPDPU",96,0)
 ;  IBINS - insurance array (pass by reference)
"RTN","IBNCPDPU",97,0)
 ;
"RTN","IBNCPDPU",98,0)
 ; Output:
"RTN","IBNCPDPU",99,0)
 ;  3 piece string in the following format
"RTN","IBNCPDPU",100,0)
 ;     [1] rate type ien
"RTN","IBNCPDPU",101,0)
 ;     [2] Rate Type (Tort or Awp or Cost)
"RTN","IBNCPDPU",102,0)
 ;     [3] Eligibility Basis (V=VETERAN, T=TRICARE, C=CHAMPVA)
"RTN","IBNCPDPU",103,0)
 ;
"RTN","IBNCPDPU",104,0)
 ; IBPTYP - patient type - optional output parameter (pass by reference)
"RTN","IBNCPDPU",105,0)
 ;        - this is only used by the PRO option (see IBNCPDP1)
"RTN","IBNCPDPU",106,0)
 ;        - (V=VETERAN, T=TRICARE, C=CHAMPVA)
"RTN","IBNCPDPU",107,0)
 ;        - NOT the same thing as [3] of this function
"RTN","IBNCPDPU",108,0)
 ;
"RTN","IBNCPDPU",109,0)
 N VAEL,VAERR,IBPT,IBRT,IBX,IBE,IBI,IBRET,IBRS
"RTN","IBNCPDPU",110,0)
 S IBPTYP=""
"RTN","IBNCPDPU",111,0)
 D ELIG^VADPT
"RTN","IBNCPDPU",112,0)
 ;
"RTN","IBNCPDPU",113,0)
 ; if primary elig is vet type, use reimbursable
"RTN","IBNCPDPU",114,0)
 S IBPT=$P($G(^DIC(8,+VAEL(1),0)),U,5) ; = N:NON-VETERAN;Y:VETERAN
"RTN","IBNCPDPU",115,0)
 I IBPT="Y" D  Q IBRT_U_$S($G(IBRET)="VA COST":"C^V",1:"T^V")    ; IB*2*437 modifications
"RTN","IBNCPDPU",116,0)
 . S IBRT=$O(^DGCR(399.3,"B","REIMBURSABLE INS.",0))
"RTN","IBNCPDPU",117,0)
 . S IBRT=$S(IBRT:IBRT,1:8)
"RTN","IBNCPDPU",118,0)
 . I $G(IBDT) S IBRET=$P($$EVNTITM^IBCRU3(IBRT,3,"PRESCRIPTION FILL",IBDT,.IBRS),";",1)
"RTN","IBNCPDPU",119,0)
 . Q
"RTN","IBNCPDPU",120,0)
 ;
"RTN","IBNCPDPU",121,0)
 ; ia #'s 427 & 2516 for references to ^DIC(8 and ^DIC(8.1
"RTN","IBNCPDPU",122,0)
 ;
"RTN","IBNCPDPU",123,0)
 ;  -  determine eligibilities - build the IBE array
"RTN","IBNCPDPU",124,0)
 S IBE=$P($G(^DIC(8.1,+$P($G(^DIC(8,+VAEL(1),0)),U,9),0)),U,1),IBE($S(IBE="TRICARE"!(IBE="SHARING AGREEMENT"):"T",IBE="CHAMPVA":"C",1:"O"))=""     ; primary pt eligibility
"RTN","IBNCPDPU",125,0)
 ; IB*2*452 - for CHAMPVA, CHAMPVA must be primary eligibility only - not among secondary eligibilities
"RTN","IBNCPDPU",126,0)
 S IBX=0 F  S IBX=$O(VAEL(1,IBX)) Q:'IBX  S IBE=$P($G(^DIC(8.1,+$P($G(^DIC(8,+VAEL(1,IBX),0)),U,9),0)),U,1) S IBE($S(IBE="TRICARE"!(IBE="SHARING AGREEMENT"):"T",1:"O"))=""    ; secondary pt eligibilities
"RTN","IBNCPDPU",127,0)
 ;
"RTN","IBNCPDPU",128,0)
 ; set patient type parameter
"RTN","IBNCPDPU",129,0)
 I $G(VAEL(4)) S IBPTYP="V"   ; veteran without any pt. eligibilities defined
"RTN","IBNCPDPU",130,0)
 I $D(IBE("T")) S IBPTYP="T"  ; TRICARE
"RTN","IBNCPDPU",131,0)
 I $D(IBE("C")) S IBPTYP="C"  ; CHAMPVA
"RTN","IBNCPDPU",132,0)
 ;
"RTN","IBNCPDPU",133,0)
 ;  -  determine insurance policies - build the IBI array
"RTN","IBNCPDPU",134,0)
 S IBX=0 F  S IBX=$O(IBINS(IBX)) Q:'IBX  S IBI=$P($G(^IBE(355.1,+$P($G(IBINS(IBX,355.3)),U,9),0)),U,1) S IBI($S(IBI="TRICARE":"T",IBI="CHAMPVA":"C",1:"O"))=""
"RTN","IBNCPDPU",135,0)
 ;
"RTN","IBNCPDPU",136,0)
 ;  -  if patient is only TRICARE elig and only TRICARE ins bill for TRICARE
"RTN","IBNCPDPU",137,0)
 I $D(IBE("T")),'$D(IBE("O")),'$D(IBE("C")),$D(IBI("T")),'$D(IBI("O")),'$D(IBI("C")) S IBRT=$O(^DGCR(399.3,"B","TRICARE",0)) Q:IBRT IBRT_"^C^T"
"RTN","IBNCPDPU",138,0)
 ;
"RTN","IBNCPDPU",139,0)
 ; IB*2*452 - check for CHAMPVA
"RTN","IBNCPDPU",140,0)
 I $D(IBE("C")),$D(IBI("C")) S IBRT=$O(^DGCR(399.3,"B","CHAMPVA",0)) Q:IBRT IBRT_"^C^C"
"RTN","IBNCPDPU",141,0)
 ;
"RTN","IBNCPDPU",142,0)
 Q $S($D(IBRT):IBRT,1:"0^unable to determine rate type")
"RTN","IBNCPDPU",143,0)
 ;
"RTN","IBNCPDPU",144,0)
 ;
"RTN","IBNCPDPU",145,0)
BS() ; returns the mccr utility to use
"RTN","IBNCPDPU",146,0)
 N IBX
"RTN","IBNCPDPU",147,0)
 S IBX=0 F  S IBX=$O(^DGCR(399.1,"B","PRESCRIPTION",IBX)) Q:IBX<1  I $P($G(^DGCR(399.1,+$G(IBX),0)),U,5) Q
"RTN","IBNCPDPU",148,0)
 Q IBX
"RTN","IBNCPDPU",149,0)
 ;
"RTN","IBNCPDPU",150,0)
RXBIL(IBINP,IBERR) ; Matching NCPDP payments
"RTN","IBNCPDPU",151,0)
 ; Find IB Bill by the 7 or 12 digit ECME number and the Rx fill date
"RTN","IBNCPDPU",152,0)
 ; This function is called by AR routine $$BILL^RCDPESR1 (DBIA 4435).
"RTN","IBNCPDPU",153,0)
 ;Input:
"RTN","IBNCPDPU",154,0)
 ;   IBINP("ECME") - the 7 or 12 digit ECME number (Reference Number)
"RTN","IBNCPDPU",155,0)
 ;   IBINP("FILLDT")  - the Rx fill date, YYYYMMDD or FileMan format
"RTN","IBNCPDPU",156,0)
 ;   IBINP("PNM") (optional) - the patient's last name
"RTN","IBNCPDPU",157,0)
 ;Returns:
"RTN","IBNCPDPU",158,0)
 ;   IBERR (by ref) - the error code, or null string if found
"RTN","IBNCPDPU",159,0)
 ;   RXBIL - IB Bill IEN, or 0 if not matched
"RTN","IBNCPDPU",160,0)
 N IBECME,BILLDA,IBDAT,IBPNAME,BPSDAT
"RTN","IBNCPDPU",161,0)
 S IBERR=""
"RTN","IBNCPDPU",162,0)
 S IBECME=$G(IBINP("ECME"))
"RTN","IBNCPDPU",163,0)
 I '$$VALECME^BPSUTIL2(IBECME) S IBERR="Invalid ECME number" Q 0
"RTN","IBNCPDPU",164,0)
 S IBDAT=$G(IBINP("FILLDT")) ; Rx fill date
"RTN","IBNCPDPU",165,0)
 I IBDAT?8N S IBDAT=($E(IBDAT,1,4)-1700)_$E(IBDAT,5,8) ; conv date to FM format
"RTN","IBNCPDPU",166,0)
 I IBDAT'?7N Q $$RXBILND(IBECME)  ; date is not correct or null
"RTN","IBNCPDPU",167,0)
 S IBPNAME=$G(IBINP("PNM")) ; patient's name (optional)
"RTN","IBNCPDPU",168,0)
 S BILLDA=$$ECMEMTCH(IBECME,IBDAT,IBPNAME,.IBERR)
"RTN","IBNCPDPU",169,0)
 I 'BILLDA S BPSDAT=$$CLMECME^BPSUTIL2(+IBECME,IBDAT) I $G(BPSDAT)>0,BPSDAT'=IBDAT S BILLDA=$$ECMEMTCH(IBECME,BPSDAT,IBPNAME,.IBERR)
"RTN","IBNCPDPU",170,0)
 Q +BILLDA
"RTN","IBNCPDPU",171,0)
 ;
"RTN","IBNCPDPU",172,0)
RXBILND(IBECME) ;Match the bill with no date
"RTN","IBNCPDPU",173,0)
 N IBKEY,IBBC,BILLDA,IBY,IBCUT,ECMELEN,ECMENUM
"RTN","IBNCPDPU",174,0)
 S IBCUT=$$FMADD^XLFDT(DT,-180) ; only 180 days in the past for cut-off date
"RTN","IBNCPDPU",175,0)
 ;
"RTN","IBNCPDPU",176,0)
 ; Search ECME# 7/12 digits forward looking for PRNT/TX claims   (IB*2*435)
"RTN","IBNCPDPU",177,0)
 S BILLDA=0
"RTN","IBNCPDPU",178,0)
 F ECMELEN=12,7 D  Q:BILLDA
"RTN","IBNCPDPU",179,0)
 . I $L(+IBECME)>ECMELEN Q   ; Quit if too large
"RTN","IBNCPDPU",180,0)
 . S ECMENUM=$$RJ^XLFSTR(+IBECME,ECMELEN,0)   ; build ECME#
"RTN","IBNCPDPU",181,0)
 . S IBKEY=ECMENUM_";"
"RTN","IBNCPDPU",182,0)
 . S IBBC=IBKEY_IBCUT
"RTN","IBNCPDPU",183,0)
 . F  S IBBC=$O(^DGCR(399,"AG",IBBC)) Q:IBBC'[IBKEY  D  Q:BILLDA
"RTN","IBNCPDPU",184,0)
 .. S IBY="" F  S IBY=$O(^DGCR(399,"AG",IBBC,IBY)) Q:'IBY  D  Q:BILLDA
"RTN","IBNCPDPU",185,0)
 ... I $P($G(^DGCR(399,+IBY,0)),U,13)'=4 Q  ; not PRNT/TX
"RTN","IBNCPDPU",186,0)
 ... S BILLDA=+IBY
"RTN","IBNCPDPU",187,0)
 ... Q
"RTN","IBNCPDPU",188,0)
 .. Q
"RTN","IBNCPDPU",189,0)
 . Q
"RTN","IBNCPDPU",190,0)
 ;
"RTN","IBNCPDPU",191,0)
 I BILLDA Q BILLDA
"RTN","IBNCPDPU",192,0)
 ;
"RTN","IBNCPDPU",193,0)
 ; Search ECME# 7/12 digits backwards looking for ANY claims within cut-off date  (IB*2*435)
"RTN","IBNCPDPU",194,0)
 S BILLDA=0
"RTN","IBNCPDPU",195,0)
 F ECMELEN=12,7 D  Q:BILLDA
"RTN","IBNCPDPU",196,0)
 . I $L(+IBECME)>ECMELEN Q   ; Quit if too large
"RTN","IBNCPDPU",197,0)
 . S ECMENUM=$$RJ^XLFSTR(+IBECME,ECMELEN,0)   ; build ECME#
"RTN","IBNCPDPU",198,0)
 . S IBKEY=ECMENUM_";"
"RTN","IBNCPDPU",199,0)
 . S IBBC=IBKEY_"8000000"
"RTN","IBNCPDPU",200,0)
 . F  S IBBC=$O(^DGCR(399,"AG",IBBC),-1) Q:IBBC'[IBKEY  Q:$P(IBBC,";",2)<IBCUT  D  Q:BILLDA
"RTN","IBNCPDPU",201,0)
 .. S IBY="" F  S IBY=$O(^DGCR(399,"AG",IBBC,IBY),-1) Q:IBY=""  D  Q:BILLDA
"RTN","IBNCPDPU",202,0)
 ... S BILLDA=+IBY
"RTN","IBNCPDPU",203,0)
 ... Q
"RTN","IBNCPDPU",204,0)
 .. Q
"RTN","IBNCPDPU",205,0)
 . Q
"RTN","IBNCPDPU",206,0)
 ;
"RTN","IBNCPDPU",207,0)
 Q BILLDA
"RTN","IBNCPDPU",208,0)
 ;
"RTN","IBNCPDPU",209,0)
 ;Check matching of two strings - case insensitive, no spaces etc.
"RTN","IBNCPDPU",210,0)
TXMATCH(IBTXT1,IBTXT2,IBMAX) ;
"RTN","IBNCPDPU",211,0)
 N IBTR1,IBTR2,IBT1,IBT2
"RTN","IBNCPDPU",212,0)
 ;Checking only first IBMAX characters (long names may be truncated)
"RTN","IBNCPDPU",213,0)
 S IBTR1="ABCDEFGHIJKLMNOPQRSTUVWXYZ:;"",'._()<>/\|@#$%&*-=!`~ "
"RTN","IBNCPDPU",214,0)
 S IBTR2="abcdefghijklmnopqrstuvwxyz"
"RTN","IBNCPDPU",215,0)
 S IBT1=$E($TR(IBTXT1,IBTR1,IBTR2),1,IBMAX)
"RTN","IBNCPDPU",216,0)
 S IBT2=$E($TR(IBTXT2,IBTR1,IBTR2),1,IBMAX)
"RTN","IBNCPDPU",217,0)
 Q IBT1=IBT2
"RTN","IBNCPDPU",218,0)
 ;
"RTN","IBNCPDPU",219,0)
ECMEBIL(DFN,IBADT) ; Is the pat ECME Billable (pharmacy coverage only)
"RTN","IBNCPDPU",220,0)
 ; DFN - ptr to the patient
"RTN","IBNCPDPU",221,0)
 ; IBADT  - the date
"RTN","IBNCPDPU",222,0)
 ; IBINS - insurance array returned by ALL^IBCNS1
"RTN","IBNCPDPU",223,0)
 N IBANY,IBERMSG,IBX,IBINS,IBT,IBZ,IBRES,IBCAT,IBCOV,IBPCOV
"RTN","IBNCPDPU",224,0)
 S IBRES=0 ; Not ECME Billable by default
"RTN","IBNCPDPU",225,0)
 S (IBCOV,IBPCOV)=0
"RTN","IBNCPDPU",226,0)
 ; -- look up ins with Rx
"RTN","IBNCPDPU",227,0)
 D ALL^IBCNS1(DFN,"IBINS",1,IBADT,1)
"RTN","IBNCPDPU",228,0)
 S IBERMSG="" ; Error message
"RTN","IBNCPDPU",229,0)
 S IBCAT=$O(^IBE(355.31,"B","PHARMACY",0))
"RTN","IBNCPDPU",230,0)
 S IBX=0 F  S IBX=$O(IBINS("S",IBX)) Q:'IBX  D  Q:IBRES
"RTN","IBNCPDPU",231,0)
 . S IBT=0 F  S IBT=$O(IBINS("S",IBX,IBT)) Q:'IBT  D  Q:IBRES
"RTN","IBNCPDPU",232,0)
 . . N IBZ,IBPIEN,IBY,IBPL
"RTN","IBNCPDPU",233,0)
 . . S IBZ=$G(IBINS(IBT,0))
"RTN","IBNCPDPU",234,0)
 . . S IBPL=+$P(IBZ,U,18) Q:'IBPL
"RTN","IBNCPDPU",235,0)
 . . S IBCOV=1 ; covered
"RTN","IBNCPDPU",236,0)
 . . I '$$PLCOV^IBCNSU3(IBPL,IBADT,IBCAT) Q
"RTN","IBNCPDPU",237,0)
 . . S IBPCOV=1
"RTN","IBNCPDPU",238,0)
 . . S IBPIEN=+$G(^IBA(355.3,IBPL,6))
"RTN","IBNCPDPU",239,0)
 . . I 'IBPIEN S IBERMSG="Plan not linked to the Payer" Q  ; Not linked
"RTN","IBNCPDPU",240,0)
 . . D STCHK^IBCNRU1(IBPIEN,.IBY)
"RTN","IBNCPDPU",241,0)
 . . I $E($G(IBY(1)))'="A" S:IBERMSG="" IBERMSG=$$ERMSG^IBNCPNB($P($G(IBY(6)),",")) Q
"RTN","IBNCPDPU",242,0)
 . . S IBRES=1
"RTN","IBNCPDPU",243,0)
 I 'IBCOV Q "0^Not Insured"
"RTN","IBNCPDPU",244,0)
 I 'IBPCOV Q "0^No Pharmacy Coverage"
"RTN","IBNCPDPU",245,0)
 I 'IBRES,IBERMSG'="" Q "0^"_IBERMSG
"RTN","IBNCPDPU",246,0)
 I 'IBRES Q "0^No Insurance ECME billable"
"RTN","IBNCPDPU",247,0)
 ;
"RTN","IBNCPDPU",248,0)
 Q IBRES
"RTN","IBNCPDPU",249,0)
 ;
"RTN","IBNCPDPU",250,0)
SUBMIT(IBRX,IBFIL,IBDELAY) ; Submit the Rx claim through ECME
"RTN","IBNCPDPU",251,0)
 ; IBDELAY - Delay Reason Code, passed as the 18th parameter - IB*2.0*435
"RTN","IBNCPDPU",252,0)
 ; IBRX - RX ien in file #52
"RTN","IBNCPDPU",253,0)
 ; IBFIL - Fill No (0 for orig fill)
"RTN","IBNCPDPU",254,0)
 N IBDT,IBNDC,IBX
"RTN","IBNCPDPU",255,0)
 I '$G(IBRX)!('$D(IBFIL)) Q "0^Invalid parameters."
"RTN","IBNCPDPU",256,0)
 S IBDT=$S('IBFIL:$$FILE^IBRXUTL(IBRX,22),1:$$SUBFILE^IBRXUTL(IBRX,IBFIL,52,.01))
"RTN","IBNCPDPU",257,0)
 S IBX=$$EN^BPSNCPDP(+IBRX,+IBFIL,IBDT,"BB",,,,,,,,,,,,,,+$G(IBDELAY))
"RTN","IBNCPDPU",258,0)
 I +IBX=0 D ECMEACT^PSOBPSU1(+IBRX,+IBFIL,"Claim submitted to 3rd party payer: IB BACK BILLING")
"RTN","IBNCPDPU",259,0)
 Q IBX
"RTN","IBNCPDPU",260,0)
 ;
"RTN","IBNCPDPU",261,0)
REASON(IBX,EXACT) ; Close Claim Reasons
"RTN","IBNCPDPU",262,0)
 Q $P($G(^IBE(356.8,+IBX,0)),U) ; non-billable reason
"RTN","IBNCPDPU",263,0)
 ;
"RTN","IBNCPDPU",264,0)
NABP(IBIFN) ;NABP Number
"RTN","IBNCPDPU",265,0)
 N IBY,IBTRKN,IBRX,IBFIL,IBZ,IBNABP
"RTN","IBNCPDPU",266,0)
 S IBY=+$O(^IBT(356.399,"C",IBIFN,0)) I 'IBY Q ""
"RTN","IBNCPDPU",267,0)
 S IBTRKN=$P($G(^IBT(356.399,IBY,0)),U) I 'IBTRKN Q ""
"RTN","IBNCPDPU",268,0)
 S IBZ=$G(^IBT(356,IBTRKN,0)) I IBZ="" Q ""
"RTN","IBNCPDPU",269,0)
 S IBRX=$P(IBZ,U,8)
"RTN","IBNCPDPU",270,0)
 S IBFIL=$P(IBZ,U,10)
"RTN","IBNCPDPU",271,0)
 S IBNABP=$$NABP^BPSBUTL(IBRX,IBFIL)
"RTN","IBNCPDPU",272,0)
 Q $S(IBNABP=0:"",1:IBNABP)
"RTN","IBNCPDPU",273,0)
 ;
"RTN","IBNCPDPU",274,0)
 ; Get the K-bill# from CT
"RTN","IBNCPDPU",275,0)
BILL(IBRX,IBFIL) ;
"RTN","IBNCPDPU",276,0)
 N IBTRKN,IBIFN
"RTN","IBNCPDPU",277,0)
 S IBTRKN=+$O(^IBT(356,"ARXFL",+$G(IBRX),+$G(IBFIL),""))
"RTN","IBNCPDPU",278,0)
 S IBIFN=+$P($G(^IBT(356,IBTRKN,0)),U,11)
"RTN","IBNCPDPU",279,0)
 Q $P($G(^DGCR(399,IBIFN,0)),U)
"RTN","IBNCPDPU",280,0)
 ;
"RTN","IBNCPDPU",281,0)
REJECT(IBECME,IBDATE) ; Is the e-claim rejected?
"RTN","IBNCPDPU",282,0)
 N IBTRKRN,IBY,ECMELEN
"RTN","IBNCPDPU",283,0)
 I IBECME'?1.12N Q 0
"RTN","IBNCPDPU",284,0)
 S IBTRKRN=0
"RTN","IBNCPDPU",285,0)
 F ECMELEN=12,7 D  Q:IBTRKRN
"RTN","IBNCPDPU",286,0)
 . I $L(+IBECME)>ECMELEN Q
"RTN","IBNCPDPU",287,0)
 . S IBECME=$$RJ^XLFSTR(+IBECME,ECMELEN,0)    ; build ECME# with leading zeros
"RTN","IBNCPDPU",288,0)
 . S IBTRKRN=+$O(^IBT(356,"AE",IBECME,0))
"RTN","IBNCPDPU",289,0)
 . Q
"RTN","IBNCPDPU",290,0)
 ;
"RTN","IBNCPDPU",291,0)
 I 'IBTRKRN Q 0
"RTN","IBNCPDPU",292,0)
 S IBY=$G(^IBT(356,IBTRKRN,1))
"RTN","IBNCPDPU",293,0)
 I $P(IBY,U,11)>0 Q 1  ; Rejected or closed
"RTN","IBNCPDPU",294,0)
 Q 0
"RTN","IBNCPDPU",295,0)
 ;
"RTN","IBNCPDPU",296,0)
RXINS(DFN,IBADT,IBINS) ; Return an array of pharmacy insurance policies by COB order
"RTN","IBNCPDPU",297,0)
 ;  Input:
"RTN","IBNCPDPU",298,0)
 ;      DFN - Patient ien (required)
"RTN","IBNCPDPU",299,0)
 ;    IBADT - Date of Service (fileman format, optional defaults to today)
"RTN","IBNCPDPU",300,0)
 ; Output:
"RTN","IBNCPDPU",301,0)
 ;    IBINS - Name of destination array (pass by reference)
"RTN","IBNCPDPU",302,0)
 ;
"RTN","IBNCPDPU",303,0)
 N CT,COB,IEN,IBPL
"RTN","IBNCPDPU",304,0)
 K IBINS
"RTN","IBNCPDPU",305,0)
 S DFN=+$G(DFN)
"RTN","IBNCPDPU",306,0)
 S IBADT=+$G(IBADT,DT)
"RTN","IBNCPDPU",307,0)
 D ALL^IBCNS1(DFN,"IBINS",1,IBADT,1)   ; gather all insurance policies in COB order
"RTN","IBNCPDPU",308,0)
 ;
"RTN","IBNCPDPU",309,0)
 S CT=0   ; count up Rx policies found
"RTN","IBNCPDPU",310,0)
 S COB="" F  S COB=$O(IBINS("S",COB)) Q:COB=""  S IEN=0 F  S IEN=$O(IBINS("S",COB,IEN)) Q:'IEN  D
"RTN","IBNCPDPU",311,0)
 . S IBPL=+$P($G(IBINS(IEN,0)),U,18)  ; plan ien
"RTN","IBNCPDPU",312,0)
 . I 'IBPL K IBINS(IEN),IBINS("S",COB,IEN) Q   ; no plan
"RTN","IBNCPDPU",313,0)
 . I '$$PLCOV^IBCNSU3(IBPL,IBADT,3) K IBINS(IEN),IBINS("S",COB,IEN) Q    ; not a pharmacy plan
"RTN","IBNCPDPU",314,0)
 . S CT=CT+1
"RTN","IBNCPDPU",315,0)
 . Q
"RTN","IBNCPDPU",316,0)
 ;
"RTN","IBNCPDPU",317,0)
 S IBINS=CT    ; store total number found at the top level
"RTN","IBNCPDPU",318,0)
 ;
"RTN","IBNCPDPU",319,0)
RXINSX ;
"RTN","IBNCPDPU",320,0)
 Q
"RTN","IBNCPDPU",321,0)
 ;
"RTN","IBNCPDPU",322,0)
ECMEMTCH(IBECME,IBDAT,IBPNAME,IBERR) ; Attempt ECME# look up with either 7 digit or 12 digit number  (IB*2*435)
"RTN","IBNCPDPU",323,0)
 N IBFOUND,IBMATCH,ECMELEN,IBKEY,BILLDA
"RTN","IBNCPDPU",324,0)
 S IBFOUND=0,IBMATCH=0
"RTN","IBNCPDPU",325,0)
 F ECMELEN=12,7 D  Q:IBFOUND
"RTN","IBNCPDPU",326,0)
 . I $L(+IBECME)>ECMELEN Q  ; Quit if too large
"RTN","IBNCPDPU",327,0)
 . S ECMENUM=$$RJ^XLFSTR(+IBECME,ECMELEN,0)  ; build ECME#
"RTN","IBNCPDPU",328,0)
 . S IBKEY=ECMENUM_";"_IBDAT ; The ECME Number (BC ID) for the "AG" xref
"RTN","IBNCPDPU",329,0)
 . S BILLDA=""
"RTN","IBNCPDPU",330,0)
 . ; Search Backward
"RTN","IBNCPDPU",331,0)
 . F  S BILLDA=$O(^DGCR(399,"AG",IBKEY,BILLDA),-1) Q:BILLDA=""  D  Q:IBFOUND
"RTN","IBNCPDPU",332,0)
 .. I 'BILLDA Q  ; IEN must be numeric
"RTN","IBNCPDPU",333,0)
 .. I '$D(^DGCR(399,BILLDA,0)) Q  ; Corrupted index
"RTN","IBNCPDPU",334,0)
 .. S IBMATCH=1
"RTN","IBNCPDPU",335,0)
 .. I IBPNAME'="" I '$$TXMATCH($P(IBPNAME,","),$P($G(^DPT(+$P(^DGCR(399,BILLDA,0),U,2),0)),","),8) Q  ; Patient name doesn't match
"RTN","IBNCPDPU",336,0)
 .. S IBFOUND=1
"RTN","IBNCPDPU",337,0)
 I 'BILLDA S IBERR=$S(IBMATCH:"Patient's name does not match",1:"Matching bill not found") ; not matched
"RTN","IBNCPDPU",338,0)
 Q +BILLDA
"RTN","IBNCPDPU",339,0)
 ;
"RTN","IBNCPDPU",340,0)
ACDUTY(DFN) ;
"RTN","IBNCPDPU",341,0)
 ; Check active duty status for the patient
"RTN","IBNCPDPU",342,0)
 ; Input:
"RTN","IBNCPDPU",343,0)
 ;   DFN: Patient (#2) IEN
"RTN","IBNCPDPU",344,0)
 ; Output:
"RTN","IBNCPDPU",345,0)
 ;   0: Does not have an Active Duty Status
"RTN","IBNCPDPU",346,0)
 ;   1: Has an active Duty Status
"RTN","IBNCPDPU",347,0)
 ; 
"RTN","IBNCPDPU",348,0)
 I '$G(DFN) Q 0
"RTN","IBNCPDPU",349,0)
 ; Check if Patient TYPE is ACTIVE DUTY
"RTN","IBNCPDPU",350,0)
 N VAEL
"RTN","IBNCPDPU",351,0)
 D ELIG^VADPT
"RTN","IBNCPDPU",352,0)
 I $P($G(VAEL(6)),"^",2)'="ACTIVE DUTY" Q 0
"RTN","IBNCPDPU",353,0)
 ; If the PERIOD OF SERVICE has '-ACTIVE DUTY', quit with true
"RTN","IBNCPDPU",354,0)
 I $F($P($G(VAEL(2)),"^",2),"-ACTIVE DUTY") Q 1
"RTN","IBNCPDPU",355,0)
 Q 0
"RTN","IBNCPDPU",356,0)
 ;
"RTN","IBNCPDPU",357,0)
 ;IBNCPDPU
"RTN","IBNCPEV3")
0^1^B30560136
"RTN","IBNCPEV3",1,0)
IBNCPEV3 ;ALB/DMB - ECME RXS WITH NON-BILLABLE STATUS ;5/22/08
"RTN","IBNCPEV3",2,0)
 ;;2.0;INTEGRATED BILLING;**534**;21-MAR-94;Build 18
"RTN","IBNCPEV3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPEV3",4,0)
 ;
"RTN","IBNCPEV3",5,0)
 ; ICR #6131 documents the usage of this entry point by the ECME application
"RTN","IBNCPEV3",6,0)
 ;
"RTN","IBNCPEV3",7,0)
COLLECT(BEGDT,ENDDT,MWC,RELNRL,IBDRUG,DRUGCLS,ALLRCNT,IBPHARM,IBINS,IBNBSTS,IBELIG1,IBGLTMP) ;
"RTN","IBNCPEV3",8,0)
 ; Compile the data for the new Non-Billable Status report
"RTN","IBNCPEV3",9,0)
 ; Input:
"RTN","IBNCPEV3",10,0)
 ;    BEGDT - Beginning Date
"RTN","IBNCPEV3",11,0)
 ;    ENDDT - Ending Date
"RTN","IBNCPEV3",12,0)
 ;      MWC - A:All; M:Mail; W:Window; C:CMOP Prescriptions
"RTN","IBNCPEV3",13,0)
 ;   RELNRL - 1:All; 2:Released; 3:Not Released
"RTN","IBNCPEV3",14,0)
 ;   IBDRUG - 0:All; DRUG to report on (ptr to #50)
"RTN","IBNCPEV3",15,0)
 ;  DRUGCLS - 0:All; DRUG CLASS to report on
"RTN","IBNCPEV3",16,0)
 ;  ALLRCNT - A:All; R:Most recent
"RTN","IBNCPEV3",17,0)
 ;  IBPHARM/IBPHARM(ptr) - 0:All pharmacies; 1:Array of IENs of pharmacies
"RTN","IBNCPEV3",18,0)
 ;  IBINS/IBINS(ptr) - 0:All insurances or list of file 36 IENs
"RTN","IBNCPEV3",19,0)
 ;  IBNBSTS/IBNBSTS(x) - 0:All; 1:Array of Non-Billable Status
"RTN","IBNCPEV3",20,0)
 ;  IBELIG1/IBELIG1(x) - 0:All; 1:Array of multiple eligibilities
"RTN","IBNCPEV3",21,0)
 ;  IBGLTMP - Temporary Global Storage (returned with extracted data)
"RTN","IBNCPEV3",22,0)
 ; Output:
"RTN","IBNCPEV3",23,0)
 ;    1 - Successful
"RTN","IBNCPEV3",24,0)
 ;   -1 - Unsuccessful
"RTN","IBNCPEV3",25,0)
 ;     
"RTN","IBNCPEV3",26,0)
 ; Check Parameters
"RTN","IBNCPEV3",27,0)
 I $G(IBGLTMP)="" Q -1
"RTN","IBNCPEV3",28,0)
 ;
"RTN","IBNCPEV3",29,0)
 N DATE,IEN,IEN1,X,X0,X2,X7,DIV,INS,RX,FILL,DRUG,RLDT,ELIG
"RTN","IBNCPEV3",30,0)
 N DFN,DRGCOST,STATUS
"RTN","IBNCPEV3",31,0)
 K ^TMP($J)
"RTN","IBNCPEV3",32,0)
 ;
"RTN","IBNCPEV3",33,0)
 ; Loop through the IB NCPDP Event Log for the data range
"RTN","IBNCPEV3",34,0)
 S DATE=BEGDT-.1 F  S DATE=$O(^IBCNR(366.14,"B",DATE)) Q:'DATE!(DATE>ENDDT)  D
"RTN","IBNCPEV3",35,0)
 . S IEN="" F  S IEN=$O(^IBCNR(366.14,"B",DATE,IEN)) Q:'IEN  D
"RTN","IBNCPEV3",36,0)
 .. S IEN1=0 F  S IEN1=$O(^IBCNR(366.14,IEN,1,IEN1)) Q:'IEN1  D
"RTN","IBNCPEV3",37,0)
 ... S X0=$G(^IBCNR(366.14,IEN,1,IEN1,0))
"RTN","IBNCPEV3",38,0)
 ... ;
"RTN","IBNCPEV3",39,0)
 ... ; If not a Billable Status Check, quit
"RTN","IBNCPEV3",40,0)
 ... I +X0'=1 Q
"RTN","IBNCPEV3",41,0)
 ... ;
"RTN","IBNCPEV3",42,0)
 ... ; If successful, quit
"RTN","IBNCPEV3",43,0)
 ... I $P(X0,"^",7)'=0 Q
"RTN","IBNCPEV3",44,0)
 ... ;
"RTN","IBNCPEV3",45,0)
 ... ; Check Non-Status Reason matches user input
"RTN","IBNCPEV3",46,0)
 ... I IBNBSTS=1,'$D(IBNBSTS(+$P(X0,U,2))) Q
"RTN","IBNCPEV3",47,0)
 ... ;
"RTN","IBNCPEV3",48,0)
 ... ; Check Division matches user input
"RTN","IBNCPEV3",49,0)
 ... S DIV=+$P(X0,U,9)
"RTN","IBNCPEV3",50,0)
 ... I IBPHARM=1,'$D(IBPHARM(DIV)) Q
"RTN","IBNCPEV3",51,0)
 ... ;
"RTN","IBNCPEV3",52,0)
 ... ; Check Insurance matches user input
"RTN","IBNCPEV3",53,0)
 ... S INS=$$GETINS(IEN,IEN1)
"RTN","IBNCPEV3",54,0)
 ... I IBINS'=0,'$$CHKINS(IBINS,+INS) Q
"RTN","IBNCPEV3",55,0)
 ... S INS=$P(INS,"^",2)
"RTN","IBNCPEV3",56,0)
 ... ;
"RTN","IBNCPEV3",57,0)
 ... ; Get Rx and Fill
"RTN","IBNCPEV3",58,0)
 ... S X2=$G(^IBCNR(366.14,IEN,1,IEN1,2))
"RTN","IBNCPEV3",59,0)
 ... S RX=$P(X2,U,12),FILL=$P(X2,U,3)
"RTN","IBNCPEV3",60,0)
 ... I 'RX S RX=$P(X2,U,2)
"RTN","IBNCPEV3",61,0)
 ... I 'RX Q
"RTN","IBNCPEV3",62,0)
 ... ;
"RTN","IBNCPEV3",63,0)
 ... ; Check Fill Type matches user input
"RTN","IBNCPEV3",64,0)
 ... I MWC'="A",MWC'=$$MWC^PSOBPSU2(RX,FILL) Q
"RTN","IBNCPEV3",65,0)
 ... ;
"RTN","IBNCPEV3",66,0)
 ... ; Check Drug matches user input
"RTN","IBNCPEV3",67,0)
 ... S DRUG=$$FILE^IBRXUTL(RX,6,"I")
"RTN","IBNCPEV3",68,0)
 ... I IBDRUG,IBDRUG'=DRUG Q
"RTN","IBNCPEV3",69,0)
 ... ;
"RTN","IBNCPEV3",70,0)
 ... ; Check Drug Class matches user input
"RTN","IBNCPEV3",71,0)
 ... I DRUGCLS'=0,DRUGCLS'=$$CLSNAME($$DRUGDIE(DRUG,25,"I")) Q
"RTN","IBNCPEV3",72,0)
 ... ;
"RTN","IBNCPEV3",73,0)
 ... ; Check Released matches user input
"RTN","IBNCPEV3",74,0)
 ... S RLDT=$P($$RXRLDT^PSOBPSUT(RX,FILL),".")
"RTN","IBNCPEV3",75,0)
 ... I RELNRL'=1 Q:RELNRL=2&'RLDT  Q:RELNRL=3&RLDT
"RTN","IBNCPEV3",76,0)
 ... ;
"RTN","IBNCPEV3",77,0)
 ... ; Check Eligibilities matches user input
"RTN","IBNCPEV3",78,0)
 ... S X7=$G(^IBCNR(366.14,IEN,1,IEN1,7))
"RTN","IBNCPEV3",79,0)
 ... S ELIG=$P(X7,U,5)
"RTN","IBNCPEV3",80,0)
 ... I IBELIG1=1,'$D(IBELIG1(ELIG)) Q
"RTN","IBNCPEV3",81,0)
 ... ;
"RTN","IBNCPEV3",82,0)
 ... ; Get Data
"RTN","IBNCPEV3",83,0)
 ... ;  Division, Insurance, Patient Name, SSN, Eligibility, RX, Fill
"RTN","IBNCPEV3",84,0)
 ... ;  Date, Drug Cost, Drug, Released On, Fill Type,
"RTN","IBNCPEV3",85,0)
 ... ;  Status (RX status/Released-Not released)
"RTN","IBNCPEV3",86,0)
 ... S DFN=+$P(X0,U,3)
"RTN","IBNCPEV3",87,0)
 ... S DRGCOST=$$COST(RX,FILL)
"RTN","IBNCPEV3",88,0)
 ... S STATUS=$$RXAPI1^IBNCPUT1(RX,100,"I")
"RTN","IBNCPEV3",89,0)
 ... ; If most recent, temporary Sort by RX and Fill
"RTN","IBNCPEV3",90,0)
 ... ; Else store in the global
"RTN","IBNCPEV3",91,0)
 ... I ALLRCNT="R" S ^TMP($J,"IBNCPEV3",+RX,+FILL,DATE)=DIV_U_INS_U_DFN_U_ELIG_U_DRGCOST_U_0_U_DRUG_U_RLDT_U_STATUS_U_$P(X0,U,2)
"RTN","IBNCPEV3",92,0)
 ... E  S @IBGLTMP@(DIV,INS,+DFN,DATE,+RX,+FILL)=ELIG_U_DRGCOST_U_0_U_DRUG_U_RLDT_U_STATUS_U_$P(X0,U,2)
"RTN","IBNCPEV3",93,0)
 ;
"RTN","IBNCPEV3",94,0)
 ; If most recent, get most recent record for each RX and fill and populate the array
"RTN","IBNCPEV3",95,0)
 I ALLRCNT="R" D
"RTN","IBNCPEV3",96,0)
 . S RX="" F  S RX=$O(^TMP($J,"IBNCPEV3",RX)) Q:'RX  D
"RTN","IBNCPEV3",97,0)
 .. S FILL="" F  S FILL=$O(^TMP($J,"IBNCPEV3",RX,FILL)) Q:FILL=""  D
"RTN","IBNCPEV3",98,0)
 ... S DATE=$O(^TMP($J,"IBNCPEV3",RX,FILL,""),-1)
"RTN","IBNCPEV3",99,0)
 ... S X=$G(^TMP($J,"IBNCPEV3",RX,FILL,DATE)),DIV=$P(X,U,1),INS=$P(X,U,2),DFN=$P(X,U,3)
"RTN","IBNCPEV3",100,0)
 ... S @IBGLTMP@(DIV,INS,+DFN,DATE,RX,FILL)=$P(X,U,4,10)
"RTN","IBNCPEV3",101,0)
 . ; Clean up scratch global
"RTN","IBNCPEV3",102,0)
 . K ^TMP($J,"IBNCPEV3")
"RTN","IBNCPEV3",103,0)
 Q 1
"RTN","IBNCPEV3",104,0)
 ;
"RTN","IBNCPEV3",105,0)
 ;
"RTN","IBNCPEV3",106,0)
DRUGDIE(IEN,FLD,FORMAT,IBARR) ;
"RTN","IBNCPEV3",107,0)
 ;  Return field values for Drug file 
"RTN","IBNCPEV3",108,0)
 ;  Function returns field data if one field is specified. If
"RTN","IBNCPEV3",109,0)
 ;    multiple fields, the function will return "" and the field
"RTN","IBNCPEV3",110,0)
 ;    values are returned in IBARR
"RTN","IBNCPEV3",111,0)
 ; Example: W $$DRUGDIE^IBNCPEV3(134,25,"E",.ARR)
"RTN","IBNCPEV3",112,0)
 ;  IEN - IEN of DRUG FILE #50
"RTN","IBNCPEV3",113,0)
 ;  FLD - Field Number(s) (like .01)
"RTN","IBNCPEV3",114,0)
 ;  FORMAT - Specifies internal or external value of returned field
"RTN","IBNCPEV3",115,0)
 ;         - optional, defaults to "I"
"RTN","IBNCPEV3",116,0)
 ;  IBARR - Array to return value(s). Optional. Pass by reference.
"RTN","IBNCPEV3",117,0)
 ;           See EN^DIQ documentation for variable DIQ
"RTN","IBNCPEV3",118,0)
 ;
"RTN","IBNCPEV3",119,0)
 I $G(IEN)="" Q ""
"RTN","IBNCPEV3",120,0)
 I $G(FLD)="" Q ""
"RTN","IBNCPEV3",121,0)
 I $G(FORMAT)'="E" S FORMAT="I"
"RTN","IBNCPEV3",122,0)
 N DIQ,PSSDIY,IBDIQ
"RTN","IBNCPEV3",123,0)
 S IBDIQ="IBARR",IBDIQ(0)=FORMAT
"RTN","IBNCPEV3",124,0)
 D EN^PSSDI(50,"IB",50,.FLD,.IEN,.IBDIQ)
"RTN","IBNCPEV3",125,0)
 Q $G(IBARR(50,IEN,FLD,FORMAT))
"RTN","IBNCPEV3",126,0)
 ;
"RTN","IBNCPEV3",127,0)
CLSNAME(CLASS) ;
"RTN","IBNCPEV3",128,0)
 ; Get Drug Class Name
"RTN","IBNCPEV3",129,0)
 I $G(CLASS)="" Q ""
"RTN","IBNCPEV3",130,0)
 K ^TMP($J,"IBPEV-CLASS")
"RTN","IBNCPEV3",131,0)
 N Y,IEN
"RTN","IBNCPEV3",132,0)
 S Y=""
"RTN","IBNCPEV3",133,0)
 D C^PSN50P65(CLASS,"","IBPEV-CLASS")
"RTN","IBNCPEV3",134,0)
 S IEN=$O(^TMP($J,"IBPEV-CLASS",0))
"RTN","IBNCPEV3",135,0)
 I IEN]"" S Y=$G(^TMP($J,"IBPEV-CLASS",IEN,1))
"RTN","IBNCPEV3",136,0)
 K ^TMP($J,"IBPEV-CLASS")
"RTN","IBNCPEV3",137,0)
 Q Y
"RTN","IBNCPEV3",138,0)
 ;
"RTN","IBNCPEV3",139,0)
GETINS(IEN,IEN1) ;
"RTN","IBNCPEV3",140,0)
 ;Get the Insurance from INSURANCE multiple
"RTN","IBNCPEV3",141,0)
 ;Input: IEN  = IEN of the IB NCPCP BILLING EVENT LOG
"RTN","IBNCPEV3",142,0)
 ;       IEN1 = IEN of the EVENT subfile
"RTN","IBNCPEV3",143,0)
 ;
"RTN","IBNCPEV3",144,0)
 ;Output: Insurance Company Pointer or null if not found
"RTN","IBNCPEV3",145,0)
 ;
"RTN","IBNCPEV3",146,0)
 I '$G(IEN) Q "0^UNKNOWN INSURANCE"
"RTN","IBNCPEV3",147,0)
 I '$G(IEN1) Q "0^UNKNOWN INSURANCE"
"RTN","IBNCPEV3",148,0)
 ;
"RTN","IBNCPEV3",149,0)
 ; Get Group Plan from first INSURANCE multiple entry
"RTN","IBNCPEV3",150,0)
 N IEN2,GPLAN,INS,INSNM
"RTN","IBNCPEV3",151,0)
 S IEN2=$O(^IBCNR(366.14,IEN,1,IEN1,5,0))
"RTN","IBNCPEV3",152,0)
 I 'IEN2 Q "0^UNKNOWN INSURANCE"
"RTN","IBNCPEV3",153,0)
 S GPLAN=$P($G(^IBCNR(366.14,IEN,1,IEN1,5,IEN2,0)),"^",2)
"RTN","IBNCPEV3",154,0)
 I 'GPLAN Q "0^UNKNOWN INSURANCE"
"RTN","IBNCPEV3",155,0)
 ;
"RTN","IBNCPEV3",156,0)
 ; Get Insurance Company from the Group Plan record
"RTN","IBNCPEV3",157,0)
 S INS=+$G(^IBA(355.3,GPLAN,0))
"RTN","IBNCPEV3",158,0)
 I INS=0 Q "0^UNKNOWN INSURANCE"
"RTN","IBNCPEV3",159,0)
 S INSNM=$$GET1^DIQ(36,INS,.01,"E")
"RTN","IBNCPEV3",160,0)
 I INSNM="" S INSNM="UNKNOWN INSURANCE"
"RTN","IBNCPEV3",161,0)
 Q INS_"^"_INSNM
"RTN","IBNCPEV3",162,0)
 ;
"RTN","IBNCPEV3",163,0)
CHKINS(LIST,INS) ;
"RTN","IBNCPEV3",164,0)
 ;Check if the IB NCPDP EVENT LOG has the user-entered insurance
"RTN","IBNCPEV3",165,0)
 ;Input: LIST = Semi-colon separated list of Insurances selected by the user
"RTN","IBNCPEV3",166,0)
 ;       INS  = IEN of the Insurance Company (#36) file
"RTN","IBNCPEV3",167,0)
 ;
"RTN","IBNCPEV3",168,0)
 ;Output: 1 = Match found
"RTN","IBNCPEV3",169,0)
 ;        0 = No match found
"RTN","IBNCPEV3",170,0)
 ;
"RTN","IBNCPEV3",171,0)
 I $G(LIST)="" Q 0
"RTN","IBNCPEV3",172,0)
 I '$G(INS) Q 0
"RTN","IBNCPEV3",173,0)
 ;
"RTN","IBNCPEV3",174,0)
 N I,IN1,RETV
"RTN","IBNCPEV3",175,0)
 S RETV=0
"RTN","IBNCPEV3",176,0)
 F I=2:1 S IN1=$P($G(LIST),";",I) Q:IN1=""  S RETV=$S(IN1=INS:1,1:0) Q:RETV
"RTN","IBNCPEV3",177,0)
 Q RETV
"RTN","IBNCPEV3",178,0)
 ;
"RTN","IBNCPEV3",179,0)
COST(RX,FILL) ;
"RTN","IBNCPEV3",180,0)
 ; Calculate Drug Cost for RX/Fill
"RTN","IBNCPEV3",181,0)
 ; Input:
"RTN","IBNCPEV3",182,0)
 ;   RX:   Prescription IEN
"RTN","IBNCPEV3",183,0)
 ;   FILL: Fill Number
"RTN","IBNCPEV3",184,0)
 ; Output:
"RTN","IBNCPEV3",185,0)
 ;   Drug Cost
"RTN","IBNCPEV3",186,0)
 ;
"RTN","IBNCPEV3",187,0)
 I '$G(RX) Q ""
"RTN","IBNCPEV3",188,0)
 I $G(FILL)="" Q ""
"RTN","IBNCPEV3",189,0)
 ;
"RTN","IBNCPEV3",190,0)
 N DATA,COST,QTY
"RTN","IBNCPEV3",191,0)
 I FILL=0 S COST=$$FILE^IBRXUTL(RX,17,"I"),QTY=$$FILE^IBRXUTL(RX,7,"I")
"RTN","IBNCPEV3",192,0)
 I FILL S COST=$$SUBFILE^IBRXUTL(RX,FILL,"",1.2,"I"),QTY=$$SUBFILE^IBRXUTL(RX,FILL,"",1,"I")
"RTN","IBNCPEV3",193,0)
 Q COST*QTY
"RTN","IBNCPEV3",194,0)
 ;
"RTN","IBNCPLOG")
0^2^B83304395
"RTN","IBNCPLOG",1,0)
IBNCPLOG ;BHAM ISC/SS - IB ECME EVNT REPORT ;3/5/08  14:02
"RTN","IBNCPLOG",2,0)
 ;;2.0;INTEGRATED BILLING;**342,339,363,383,411,435,452,534**;21-MAR-94;Build 18
"RTN","IBNCPLOG",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPLOG",4,0)
 ;
"RTN","IBNCPLOG",5,0)
 ;store data related to the IB calls made by ECME package in the file #366.14
"RTN","IBNCPLOG",6,0)
 ;input:
"RTN","IBNCPLOG",7,0)
 ;.IBIBD - (by reference) IBD array with parameter sent to IB by ECME
"RTN","IBNCPLOG",8,0)
 ;DFN patient's ien
"RTN","IBNCPLOG",9,0)
 ;IBPROC - type of event. i.e. content of CALL such as BILL, REJECT and so on
"RTN","IBNCPLOG",10,0)
 ;IBRESULT - (optional) result of the event processing, format: return_code^message
"RTN","IBNCPLOG",11,0)
 ;IBJOB - (optional) job, default = $J
"RTN","IBNCPLOG",12,0)
 ;IBDTTM - (optional) datetime, default = "NOW"
"RTN","IBNCPLOG",13,0)
 ;IBUSR - (optional) user ID, default = DUZ
"RTN","IBNCPLOG",14,0)
 ;output:
"RTN","IBNCPLOG",15,0)
 ;none
"RTN","IBNCPLOG",16,0)
LOG(IBIBD,DFN,IBPROC,IBRESULT,IBJOB,IBDTTM,IBUSR) ;Store the data
"RTN","IBNCPLOG",17,0)
 N NDX,Z,REF,IBDATE,IBDTIEN,IBEVNIEN,IBIBDTYP,IBRETV,IBPTR
"RTN","IBNCPLOG",18,0)
 S IBRESULT=$G(IBRESULT)
"RTN","IBNCPLOG",19,0)
 ;
"RTN","IBNCPLOG",20,0)
 I '$G(IBJOB) S IBJOB=$J
"RTN","IBNCPLOG",21,0)
 I '$G(IBDTTM) S IBDTTM=$$NOW^XLFDT()
"RTN","IBNCPLOG",22,0)
 I '$G(IBUSR) S IBUSR=+DUZ
"RTN","IBNCPLOG",23,0)
 ;
"RTN","IBNCPLOG",24,0)
 S IBDATE=DT
"RTN","IBNCPLOG",25,0)
 S IBDTIEN=+$O(^IBCNR(366.14,"B",IBDATE,0))
"RTN","IBNCPLOG",26,0)
 L +^IBCNR(366.14):30 E  Q
"RTN","IBNCPLOG",27,0)
 I IBDTIEN=0 S IBDTIEN=+$$ADDDATE(IBDATE)
"RTN","IBNCPLOG",28,0)
 ;create an event
"RTN","IBNCPLOG",29,0)
 S IBEVNIEN=$$NEWEVENT(IBDTIEN,IBPROC)
"RTN","IBNCPLOG",30,0)
 L -^IBCNR(366.14)
"RTN","IBNCPLOG",31,0)
 I IBEVNIEN=0 W !,"New event creation Error : LOG^IBNCPLOG",! Q
"RTN","IBNCPLOG",32,0)
 ;
"RTN","IBNCPLOG",33,0)
 I +$$FILLFLDS^IBNCPUT1(366.141,".03",IBEVNIEN_","_IBDTIEN,DFN) ;DFN
"RTN","IBNCPLOG",34,0)
 I +$$FILLFLDS^IBNCPUT1(366.141,".04",IBEVNIEN_","_IBDTIEN,IBJOB) ;JOB
"RTN","IBNCPLOG",35,0)
 I +$$FILLFLDS^IBNCPUT1(366.141,".05",IBEVNIEN_","_IBDTIEN,IBDTTM) ;DATETIME
"RTN","IBNCPLOG",36,0)
 I +$$FILLFLDS^IBNCPUT1(366.141,".06",IBEVNIEN_","_IBDTIEN,DUZ) ;USER
"RTN","IBNCPLOG",37,0)
 I IBRESULT'="" D
"RTN","IBNCPLOG",38,0)
 . S IBRETV=+$$FILLFLDS^IBNCPUT1(366.141,".07",IBEVNIEN_","_IBDTIEN,+IBRESULT) ;RESULT
"RTN","IBNCPLOG",39,0)
 . S IBRETV=+$$FILLFLDS^IBNCPUT1(366.141,".08",IBEVNIEN_","_IBDTIEN,$P(IBRESULT,U,2)) ;RESULT MESSAGE
"RTN","IBNCPLOG",40,0)
 . I IBPROC="BILLABLE STATUS CHECK",$P(IBRESULT,U,2)]"" D
"RTN","IBNCPLOG",41,0)
 .. S IBPTR=$$GETREAS($P(IBRESULT,U,2))
"RTN","IBNCPLOG",42,0)
 .. I IBPTR S IBRETV=+$$FILLFLDS^IBNCPUT1(366.141,".02",IBEVNIEN_","_IBDTIEN,IBPTR) ; Non-Billable Status Reason
"RTN","IBNCPLOG",43,0)
 . I $P(IBRESULT,U,3)'="" S IBRETV=+$$FILLFLDS^IBNCPUT1(366.141,"7.05",IBEVNIEN_","_IBDTIEN,$P(IBRESULT,U,3)) ; Eligibility from IB billing determination (IB*2*452)
"RTN","IBNCPLOG",44,0)
 . Q
"RTN","IBNCPLOG",45,0)
 ;
"RTN","IBNCPLOG",46,0)
 ;store IBIBD array
"RTN","IBNCPLOG",47,0)
 S IBIBDTYP=""
"RTN","IBNCPLOG",48,0)
 F  S IBIBDTYP=$O(IBIBD(IBIBDTYP)) Q:IBIBDTYP=""  D
"RTN","IBNCPLOG",49,0)
 . D IBD(IBDTIEN,IBEVNIEN,IBIBDTYP,$G(IBIBD(IBIBDTYP)),.IBIBD)
"RTN","IBNCPLOG",50,0)
 ;store "INS" node of IBIBD array
"RTN","IBNCPLOG",51,0)
 I $D(IBIBD("INS")) I $$INS(.IBIBD,IBDTIEN,IBEVNIEN)
"RTN","IBNCPLOG",52,0)
 Q
"RTN","IBNCPLOG",53,0)
 ;
"RTN","IBNCPLOG",54,0)
 ;store IBD array data
"RTN","IBNCPLOG",55,0)
 ;IBDTIEN -  ien on top [DATE] level
"RTN","IBNCPLOG",56,0)
 ;IBRECNO - ien in [EVENTS] multiple
"RTN","IBNCPLOG",57,0)
 ;IBIBDTYP - type subscript in IBD array (BILL, PAID, RESPONSE, etc)
"RTN","IBNCPLOG",58,0)
 ;IBVAL - value to store
"RTN","IBNCPLOG",59,0)
 ;IBIBD - array with data passed by reference (for efficiency)
"RTN","IBNCPLOG",60,0)
IBD(IBDTIEN,IBRECNO,IBIBDTYP,IBVAL,IBIBD) ;
"RTN","IBNCPLOG",61,0)
 N IBFLDNO
"RTN","IBNCPLOG",62,0)
 ;W !," - ",IBRECNO," ",IBIBDTYP," = ",IBVAL
"RTN","IBNCPLOG",63,0)
 ;free text like "WEBMD: PAID"
"RTN","IBNCPLOG",64,0)
 I IBIBDTYP="AUTH #" S IBFLDNO=".11",IBVAL=$E(IBVAL,1,30) G EDITIBD
"RTN","IBNCPLOG",65,0)
 ;free text like "0504597;3051229"
"RTN","IBNCPLOG",66,0)
 I IBIBDTYP="BCID" S IBFLDNO=".12" G EDITIBD
"RTN","IBNCPLOG",67,0)
 ;7 or 12 digit ECME number - identifier (stored as a text - might have leading zeroes)
"RTN","IBNCPLOG",68,0)
 I IBIBDTYP="CLAIMID" S IBFLDNO=".13" G EDITIBD
"RTN","IBNCPLOG",69,0)
 ;pointer to file #2
"RTN","IBNCPLOG",70,0)
 I IBIBDTYP="DFN" S IBFLDNO=".14" G EDITIBD
"RTN","IBNCPLOG",71,0)
 ;pointer to file #40.8
"RTN","IBNCPLOG",72,0)
 I IBIBDTYP="DIVISION" S IBFLDNO=".15" G EDITIBD
"RTN","IBNCPLOG",73,0)
 ;free text
"RTN","IBNCPLOG",74,0)
 I IBIBDTYP="RESPONSE" S IBFLDNO=".16",IBVAL=$E(IBVAL,1,20) G EDITIBD
"RTN","IBNCPLOG",75,0)
 ;free text
"RTN","IBNCPLOG",76,0)
 I IBIBDTYP="REVERSAL REASON" S IBFLDNO=".17",IBVAL=$E(IBVAL,1,40) G EDITIBD
"RTN","IBNCPLOG",77,0)
 ;1 digit number
"RTN","IBNCPLOG",78,0)
 I IBIBDTYP="RTS-DEL" S IBFLDNO=".18" G EDITIBD
"RTN","IBNCPLOG",79,0)
 ;free text
"RTN","IBNCPLOG",80,0)
 I IBIBDTYP="STATUS" S IBFLDNO=".19",IBVAL=$E(IBVAL,1,20) G EDITIBD
"RTN","IBNCPLOG",81,0)
 ;Prescription number as a text, might have alpha characters (external value, this is not IEN)
"RTN","IBNCPLOG",82,0)
 I IBIBDTYP="RX NO" S IBFLDNO=".202",IBVAL=$E(IBVAL,1,20) G EDITIBD
"RTN","IBNCPLOG",83,0)
 ;0 - original, 1,2,3,... - refill number
"RTN","IBNCPLOG",84,0)
 I IBIBDTYP="FILL NUMBER" S IBFLDNO=".203" G EDITIBD
"RTN","IBNCPLOG",85,0)
 ;internal identifier number for a DRUG
"RTN","IBNCPLOG",86,0)
 I IBIBDTYP="DRUG" S IBFLDNO=".204" G EDITIBD
"RTN","IBNCPLOG",87,0)
 I IBIBDTYP="NDC" S IBFLDNO=".205" G EDITIBD
"RTN","IBNCPLOG",88,0)
 I IBIBDTYP="DOS" S IBFLDNO=".206" G EDITIBD
"RTN","IBNCPLOG",89,0)
 I IBIBDTYP="RELEASE DATE" S IBFLDNO=".207" G EDITIBD
"RTN","IBNCPLOG",90,0)
 I IBIBDTYP="QTY" S IBFLDNO=".208" G EDITIBD
"RTN","IBNCPLOG",91,0)
 I IBIBDTYP="UNITS" S IBFLDNO=".213" G EDITIBD
"RTN","IBNCPLOG",92,0)
 I IBIBDTYP="NCPDP QTY" S IBFLDNO=".214" G EDITIBD
"RTN","IBNCPLOG",93,0)
 I IBIBDTYP="NCPDP UNITS" S IBFLDNO=".215" G EDITIBD
"RTN","IBNCPLOG",94,0)
 I IBIBDTYP="DAYS SUPPLY" S IBFLDNO=".209" G EDITIBD
"RTN","IBNCPLOG",95,0)
 I IBIBDTYP="DEA" S IBFLDNO=".21" G EDITIBD
"RTN","IBNCPLOG",96,0)
 I IBIBDTYP="FILLED BY" S IBFLDNO=".211" G EDITIBD
"RTN","IBNCPLOG",97,0)
 I IBIBDTYP="COPAY" S IBFLDNO=".311" G EDITIBD
"RTN","IBNCPLOG",98,0)
 I IBIBDTYP="ING COST PAID" S IBFLDNO=".312" G EDITIBD
"RTN","IBNCPLOG",99,0)
 I IBIBDTYP="DISP FEE PAID" S IBFLDNO=".313" G EDITIBD
"RTN","IBNCPLOG",100,0)
 I IBIBDTYP="PAT RESP" S IBFLDNO=".314" G EDITIBD
"RTN","IBNCPLOG",101,0)
 ; for environmental indicators:
"RTN","IBNCPLOG",102,0)
 ; if IBIBD("SC/EI OVR")=1 - the user overrides any answers (3)
"RTN","IBNCPLOG",103,0)
 ; if $G(IBIBD("SC/EI NO ANSW")) contains the IBIBDTYP - this question was not answered (2)
"RTN","IBNCPLOG",104,0)
 ; otherwise - use whatever in the IBVAL (0 - NO, 1 -YES)
"RTN","IBNCPLOG",105,0)
 I IBIBDTYP="AO" S IBFLDNO=".401",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",106,0)
 I IBIBDTYP="CV" S IBFLDNO=".402",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",107,0)
 I IBIBDTYP="SWA" S IBFLDNO=".403",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",108,0)
 I IBIBDTYP="IR" S IBFLDNO=".404",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",109,0)
 I IBIBDTYP="MST" S IBFLDNO=".405",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",110,0)
 I IBIBDTYP="HNC" S IBFLDNO=".406",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",111,0)
 I IBIBDTYP="SC" S IBFLDNO=".407",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",112,0)
 I IBIBDTYP="SHAD" S IBFLDNO=".408",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",113,0)
 I IBIBDTYP="BILL" S IBFLDNO=".301" G EDITIBD
"RTN","IBNCPLOG",114,0)
 I IBIBDTYP="BILLED" S IBFLDNO=".302" G EDITIBD
"RTN","IBNCPLOG",115,0)
 I IBIBDTYP="PLAN" S IBFLDNO=".303" G EDITIBD
"RTN","IBNCPLOG",116,0)
 I IBIBDTYP="COST" S IBFLDNO=".304" G EDITIBD
"RTN","IBNCPLOG",117,0)
 I IBIBDTYP="PAID" S IBFLDNO=".305" G EDITIBD
"RTN","IBNCPLOG",118,0)
 I IBIBDTYP="CLOSE COMMENT" S IBFLDNO=".306" G EDITIBD
"RTN","IBNCPLOG",119,0)
 I IBIBDTYP="REOPEN COMMENT" S IBFLDNO=".306" G EDITIBD
"RTN","IBNCPLOG",120,0)
 I IBIBDTYP="CLOSE REASON" S IBFLDNO=".307" G EDITIBD
"RTN","IBNCPLOG",121,0)
 I IBIBDTYP="DROP TO PAPER" S IBFLDNO=".308" G EDITIBD
"RTN","IBNCPLOG",122,0)
 I IBIBDTYP="RELEASE COPAY" S IBFLDNO=".309" G EDITIBD
"RTN","IBNCPLOG",123,0)
 I IBIBDTYP="USER" S IBFLDNO=".31" G EDITIBD
"RTN","IBNCPLOG",124,0)
 I IBIBDTYP="PRESCRIPTION" S IBFLDNO=".201" G EDITIBD
"RTN","IBNCPLOG",125,0)
 I IBIBDTYP="IEN" S IBFLDNO=".212" G EDITIBD
"RTN","IBNCPLOG",126,0)
 I IBIBDTYP="EPHARM" S IBFLDNO=".09" G EDITIBD
"RTN","IBNCPLOG",127,0)
 I IBIBDTYP="RXCOB" S IBFLDNO="7.01" G EDITIBD
"RTN","IBNCPLOG",128,0)
 I IBIBDTYP="PRIMARY BILL" S IBFLDNO="7.02" G EDITIBD
"RTN","IBNCPLOG",129,0)
 I IBIBDTYP="PRIOR PAYMENT" S IBFLDNO="7.03" G EDITIBD
"RTN","IBNCPLOG",130,0)
 I IBIBDTYP="RTYPE" S IBFLDNO="7.04" G EDITIBD
"RTN","IBNCPLOG",131,0)
 Q 0
"RTN","IBNCPLOG",132,0)
EDITIBD ;
"RTN","IBNCPLOG",133,0)
 Q +$$FILLFLDS^IBNCPUT1(366.141,IBFLDNO,IBRECNO_","_IBDTIEN,IBVAL)
"RTN","IBNCPLOG",134,0)
 ;------
"RTN","IBNCPLOG",135,0)
 ;to store IBD("INS") array data
"RTN","IBNCPLOG",136,0)
 ;input:
"RTN","IBNCPLOG",137,0)
 ;IBDARR - IBD array by reference
"RTN","IBNCPLOG",138,0)
 ;IBDTIEN -  ien on top [DATE] level
"RTN","IBNCPLOG",139,0)
 ;IBRECNO - ien in [EVENTS] multiple
"RTN","IBNCPLOG",140,0)
 ;output:
"RTN","IBNCPLOG",141,0)
 ; record number if success
"RTN","IBNCPLOG",142,0)
 ; 0 if failure
"RTN","IBNCPLOG",143,0)
INS(IBDARR,IBDTIEN,IBRECNO) ;
"RTN","IBNCPLOG",144,0)
 N IBSET1,IBSET2,IBSET3,IBFLDNO,IBINSNO,RECNO,IBVAL
"RTN","IBNCPLOG",145,0)
 S IBINSNO=0
"RTN","IBNCPLOG",146,0)
 ; Only create entry for first insurance found. BNT 07/07/2010
"RTN","IBNCPLOG",147,0)
 F  S IBINSNO=$O(IBDARR("INS",IBINSNO)) Q:+IBINSNO=0  D  Q:$D(RECNO)
"RTN","IBNCPLOG",148,0)
 . S IBSET1=$G(IBDARR("INS",IBINSNO,1))
"RTN","IBNCPLOG",149,0)
 . S IBSET2=$G(IBDARR("INS",IBINSNO,2))
"RTN","IBNCPLOG",150,0)
 . S IBSET3=$G(IBDARR("INS",IBINSNO,3))
"RTN","IBNCPLOG",151,0)
 . S RECNO=$$ADDINS(IBDTIEN,IBRECNO)
"RTN","IBNCPLOG",152,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.02,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,1))
"RTN","IBNCPLOG",153,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.03,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,2))
"RTN","IBNCPLOG",154,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.04,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,3))
"RTN","IBNCPLOG",155,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.05,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,4))
"RTN","IBNCPLOG",156,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.06,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,5))
"RTN","IBNCPLOG",157,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.07,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,6))
"RTN","IBNCPLOG",158,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.08,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,7))
"RTN","IBNCPLOG",159,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.09,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,20))
"RTN","IBNCPLOG",160,0)
 . ;
"RTN","IBNCPLOG",161,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.101,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,8))
"RTN","IBNCPLOG",162,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.102,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,9))
"RTN","IBNCPLOG",163,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.103,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,10))
"RTN","IBNCPLOG",164,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.104,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,11))
"RTN","IBNCPLOG",165,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.105,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,12))
"RTN","IBNCPLOG",166,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.106,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,13))
"RTN","IBNCPLOG",167,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.107,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,14))
"RTN","IBNCPLOG",168,0)
 . ;
"RTN","IBNCPLOG",169,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.201,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,1))
"RTN","IBNCPLOG",170,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.202,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,2))
"RTN","IBNCPLOG",171,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.203,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,3))
"RTN","IBNCPLOG",172,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.204,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,4))
"RTN","IBNCPLOG",173,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.205,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,5))
"RTN","IBNCPLOG",174,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.206,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,6))
"RTN","IBNCPLOG",175,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.207,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,7))
"RTN","IBNCPLOG",176,0)
 . ;
"RTN","IBNCPLOG",177,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.301,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET3,U,1))
"RTN","IBNCPLOG",178,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.302,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET3,U,2))
"RTN","IBNCPLOG",179,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.303,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET3,U,3))
"RTN","IBNCPLOG",180,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.304,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET3,U,7))
"RTN","IBNCPLOG",181,0)
 . Q
"RTN","IBNCPLOG",182,0)
 ;
"RTN","IBNCPLOG",183,0)
 Q RECNO
"RTN","IBNCPLOG",184,0)
 ;create top level entry in #366.14
"RTN","IBNCPLOG",185,0)
 ;input:
"RTN","IBNCPLOG",186,0)
 ; IBDATE - date in FileMan format
"RTN","IBNCPLOG",187,0)
 ;output
"RTN","IBNCPLOG",188,0)
 ; returns ien created
"RTN","IBNCPLOG",189,0)
ADDDATE(IBDATE) ;
"RTN","IBNCPLOG",190,0)
 N IBIEN
"RTN","IBNCPLOG",191,0)
 S IBIEN=+$O(^IBCNR(366.14,"B",IBDATE,0))
"RTN","IBNCPLOG",192,0)
 I IBIEN>0 Q IBIEN
"RTN","IBNCPLOG",193,0)
 I $$INSITEM^IBNCPUT1(366.14,"",IBDATE,"")
"RTN","IBNCPLOG",194,0)
 Q +$O(^IBCNR(366.14,"B",IBDATE,0))
"RTN","IBNCPLOG",195,0)
 ;
"RTN","IBNCPLOG",196,0)
 ;create EVENT entry in #366.14
"RTN","IBNCPLOG",197,0)
 ;input:
"RTN","IBNCPLOG",198,0)
 ;IBIEN - ien on top [DATE] level
"RTN","IBNCPLOG",199,0)
 ;EVNTTYPE event type (value for .01)
"RTN","IBNCPLOG",200,0)
 ;returns ien for the event
"RTN","IBNCPLOG",201,0)
 ;or 0 if failed
"RTN","IBNCPLOG",202,0)
NEWEVENT(IBIEN,EVNTTYPE) ;
"RTN","IBNCPLOG",203,0)
 N EVNTRECN
"RTN","IBNCPLOG",204,0)
 S EVNTRECN=$$INSITEM^IBNCPUT1(366.141,IBIEN,$$EXT2INT^IBNCPUT1(EVNTTYPE),"","")
"RTN","IBNCPLOG",205,0)
 I EVNTRECN>0 Q EVNTRECN
"RTN","IBNCPLOG",206,0)
 Q 0
"RTN","IBNCPLOG",207,0)
 ;
"RTN","IBNCPLOG",208,0)
 ;add insurance node
"RTN","IBNCPLOG",209,0)
 ;IBDTIEN - ien on top [DATE] level
"RTN","IBNCPLOG",210,0)
 ;IBEVIEN - ien in [EVENTS] multiple
"RTN","IBNCPLOG",211,0)
 ;returns :
"RTN","IBNCPLOG",212,0)
 ; new ien in INSURANCE multiple
"RTN","IBNCPLOG",213,0)
ADDINS(IBDTIEN,IBEVIEN) ;
"RTN","IBNCPLOG",214,0)
 N IBX,IBX2
"RTN","IBNCPLOG",215,0)
 F IBX=1:1:99999 I '$D(^IBCNR(366.14,IBDTIEN,1,IBEVIEN,5,IBX)) D  Q
"RTN","IBNCPLOG",216,0)
 . S IBX2=$$INSITEM^IBNCPUT1(366.1412,IBEVIEN_","_IBDTIEN,IBX,IBX)
"RTN","IBNCPLOG",217,0)
 Q +$O(^IBCNR(366.14,IBDTIEN,1,IBEVIEN,5,"B",IBX,0))
"RTN","IBNCPLOG",218,0)
 ;
"RTN","IBNCPLOG",219,0)
GETREAS(REASON) ;
"RTN","IBNCPLOG",220,0)
 ; Get the pointer of the IB NCPDP NON-BILLABLE REASON file - Create the 
"RTN","IBNCPLOG",221,0)
 ;   entry if needed.
"RTN","IBNCPLOG",222,0)
 ;
"RTN","IBNCPLOG",223,0)
 ; Input:
"RTN","IBNCPLOG",224,0)
 ;   REASON: Non-billable reason text
"RTN","IBNCPLOG",225,0)
 ; Output:
"RTN","IBNCPLOG",226,0)
 ;   IEN of the IB NCPPD NON-BILLABLE REASON file
"RTN","IBNCPLOG",227,0)
 ;
"RTN","IBNCPLOG",228,0)
 I $G(REASON)="" Q ""
"RTN","IBNCPLOG",229,0)
 N NBSTS,DIC,X,Y,DTOUT,DUOUT
"RTN","IBNCPLOG",230,0)
 ;
"RTN","IBNCPLOG",231,0)
 ; Make uppercase and less than 60 characters
"RTN","IBNCPLOG",232,0)
 S REASON=$TR($E($$UP^XLFSTR(REASON),1,60),"^")
"RTN","IBNCPLOG",233,0)
 I $E(REASON,$L(REASON))="." S REASON=$E(REASON,1,$L(REASON)-1)
"RTN","IBNCPLOG",234,0)
 ;
"RTN","IBNCPLOG",235,0)
 ; Check if it already exists.  If so, return the IEN
"RTN","IBNCPLOG",236,0)
 S NBSTS=$O(^IBCNR(366.17,"B",REASON,""))
"RTN","IBNCPLOG",237,0)
 I NBSTS Q NBSTS
"RTN","IBNCPLOG",238,0)
 ;
"RTN","IBNCPLOG",239,0)
 ; If it does not exist not, add to the dictionary
"RTN","IBNCPLOG",240,0)
 S DIC="^IBCNR(366.17,",DIC(0)="F",X=REASON
"RTN","IBNCPLOG",241,0)
 D FILE^DICN
"RTN","IBNCPLOG",242,0)
 I Y=-1 Q ""
"RTN","IBNCPLOG",243,0)
 Q +Y
"SEC","^DIC",366.17,366.17,0,"AUDIT")

"SEC","^DIC",366.17,366.17,0,"DD")

"SEC","^DIC",366.17,366.17,0,"DEL")

"SEC","^DIC",366.17,366.17,0,"LAYGO")

"SEC","^DIC",366.17,366.17,0,"RD")

"SEC","^DIC",366.17,366.17,0,"WR")

"UP",366.14,366.141,-1)
366.14^1
"UP",366.14,366.141,0)
366.141
"VER")
8.0^22.0
"^DD",366.14,366.141,.02,0)
NON-BILLABLE REASON^P366.17'^IBCNR(366.17,^0;2^Q
"^DD",366.14,366.141,.02,3)
Enter the Non-Billable Status reason for non-billable prescription
"^DD",366.14,366.141,.02,21,0)
^^4^4^3141030^
"^DD",366.14,366.141,.02,21,1,0)
This field is populated by the IB software that supports the processing 
"^DD",366.14,366.141,.02,21,2,0)
of ePharmacy Billing events for outpatient prescriptions.  It will 
"^DD",366.14,366.141,.02,21,3,0)
populated when the IB Billing Status check determines that the request is 
"^DD",366.14,366.141,.02,21,4,0)
not billable.
"^DD",366.14,366.141,.02,"DT")
3141030
"^DD",366.17,366.17,0)
FIELD^^.01^1
"^DD",366.17,366.17,0,"DDA")
N
"^DD",366.17,366.17,0,"DT")
3141030
"^DD",366.17,366.17,0,"NM","IB NCPDP NON-BILLABLE REASONS")

"^DD",366.17,366.17,0,"PT",366.141,.02)

"^DD",366.17,366.17,.01,0)
NON-BILLABLE REASON^RF^^0;1^K:$L(X)>60!($L(X)<3)!'(X'?1P.E) X
"^DD",366.17,366.17,.01,1,0)
^.1^^0
"^DD",366.17,366.17,.01,3)
Answer must be 3-60 characters in length.
"^DD",366.17,366.17,.01,21,0)
^^2^2^3141031^
"^DD",366.17,366.17,.01,21,1,0)
This is the name of the non-billable status reason that will be used to 
"^DD",366.17,366.17,.01,21,2,0)
populated the IB NCPDP EVENT LOG file.
"^DD",366.17,366.17,.01,"DT")
3141031
"^DIC",366.17,366.17,0)
IB NCPDP NON-BILLABLE REASONS^366.17
"^DIC",366.17,366.17,0,"GL")
^IBCNR(366.17,
"^DIC",366.17,366.17,"%",0)
^1.005^^
"^DIC",366.17,366.17,"%D",0)
^1.001^5^5^3150302^^
"^DIC",366.17,366.17,"%D",1,0)
This file contains the non-billable status reasons used by the IB NCPDP
"^DIC",366.17,366.17,"%D",2,0)
Billing Event Log and which are returned by the IB Billable Status Check
"^DIC",366.17,366.17,"%D",3,0)
for ePharmacy claims.
"^DIC",366.17,366.17,"%D",4,0)
 
"^DIC",366.17,366.17,"%D",5,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",366.17,"B","IB NCPDP NON-BILLABLE REASONS",366.17)

**INSTALL NAME**
BPS*1.0*19
"BLD",9334,0)
BPS*1.0*19^E CLAIMS MGMT ENGINE^0^3151111^y
"BLD",9334,1,0)
^^1^1^3141117^
"BLD",9334,1,1,0)
HAPE EDI Revenue project - NCPDP Continuous Maintenance Standards
"BLD",9334,4,0)
^9.64PA^9002313.32^11
"BLD",9334,4,9002313.02,0)
9002313.02
"BLD",9334,4,9002313.02,2,0)
^9.641^9002313.022044^3
"BLD",9334,4,9002313.02,2,9002313.02,0)
BPS CLAIMS  (File-top level)
"BLD",9334,4,9002313.02,2,9002313.02,1,0)
^9.6411^326^4
"BLD",9334,4,9002313.02,2,9002313.02,1,326,0)
PATIENT TELEPHONE NUMBER
"BLD",9334,4,9002313.02,2,9002313.02,1,2008,0)
PATIENT STREET ADDRESS LINE 1
"BLD",9334,4,9002313.02,2,9002313.02,1,2009,0)
PATIENT STREET ADDRESS LINE 2
"BLD",9334,4,9002313.02,2,9002313.02,1,2038,0)
PATIENT ID ASSOC COUNTRY CODE
"BLD",9334,4,9002313.02,2,9002313.0201,0)
TRANSACTIONS  (sub-file)
"BLD",9334,4,9002313.02,2,9002313.0201,1,0)
^9.6411^498.12^36
"BLD",9334,4,9002313.02,2,9002313.0201,1,320,0)
EMPLOYER TELEPHONE NUMBER
"BLD",9334,4,9002313.02,2,9002313.0201,1,498.12,0)
PRESCRIBER TELEPHONE NUMBER
"BLD",9334,4,9002313.02,2,9002313.0201,1,1093,0)
SERVICE PROVIDER COUNTRY CODE
"BLD",9334,4,9002313.02,2,9002313.0201,1,2013,0)
AUTH REP STREET ADDRESS LINE 1
"BLD",9334,4,9002313.02,2,9002313.0201,1,2014,0)
AUTH REP STREET ADDRESS LINE 2
"BLD",9334,4,9002313.02,2,9002313.0201,1,2015,0)
EMPLOYER STREET ADDRESS LINE 1
"BLD",9334,4,9002313.02,2,9002313.0201,1,2016,0)
EMPLOYER STREET ADDRESS LINE 2
"BLD",9334,4,9002313.02,2,9002313.0201,1,2017,0)
EMPLOYER CONTACT FIRST NAME
"BLD",9334,4,9002313.02,2,9002313.0201,1,2018,0)
EMPLOYER CONTACT LAST NAME
"BLD",9334,4,9002313.02,2,9002313.0201,1,2019,0)
EMPLOYER PHONE NUMBER EXT
"BLD",9334,4,9002313.02,2,9002313.0201,1,2020,0)
FACILITY STREET ADDRESS LINE 1
"BLD",9334,4,9002313.02,2,9002313.0201,1,2021,0)
FACILITY STREET ADDRESS LINE 2
"BLD",9334,4,9002313.02,2,9002313.0201,1,2024,0)
PAY TO STREET ADDRESS LINE 1
"BLD",9334,4,9002313.02,2,9002313.0201,1,2025,0)
PAY TO STREET ADDRESS LINE 2
"BLD",9334,4,9002313.02,2,9002313.0201,1,2026,0)
PRESCRIBER PHONE NUMBER EXT
"BLD",9334,4,9002313.02,2,9002313.0201,1,2027,0)
PRESCRIBER STREET ADDR LINE 1
"BLD",9334,4,9002313.02,2,9002313.0201,1,2028,0)
PRESCRIBER STREET ADDR LINE 2
"BLD",9334,4,9002313.02,2,9002313.0201,1,2029,0)
PURCHASER STREET ADDRESS LINE1
"BLD",9334,4,9002313.02,2,9002313.0201,1,2030,0)
PURCHASER STREET ADDRESS LINE2
"BLD",9334,4,9002313.02,2,9002313.0201,1,2031,0)
SERVICE PROV STREET ADD LINE 1
"BLD",9334,4,9002313.02,2,9002313.0201,1,2032,0)
SERVICE PROV STREET ADD LINE 2
"BLD",9334,4,9002313.02,2,9002313.0201,1,2034,0)
AUTH REP COUNTRY CODE
"BLD",9334,4,9002313.02,2,9002313.0201,1,2035,0)
EMPLOYER COUNTRY CODE
"BLD",9334,4,9002313.02,2,9002313.0201,1,2037,0)
FACILITY COUNTRY CODE
"BLD",9334,4,9002313.02,2,9002313.0201,1,2039,0)
PAY TO COUNTRY CODE
"BLD",9334,4,9002313.02,2,9002313.0201,1,2040,0)
PRES ALT ID ASSOC COUNTRY CODE
"BLD",9334,4,9002313.02,2,9002313.0201,1,2041,0)
PRES ID ASSOC COUNTRY CODE
"BLD",9334,4,9002313.02,2,9002313.0201,1,2042,0)
PRESCRIBER COUNTRY CODE
"BLD",9334,4,9002313.02,2,9002313.0201,1,2043,0)
PURCHASER ID ASSOC COUNTRY CD
"BLD",9334,4,9002313.02,2,9002313.0201,1,2044,0)
INTERMEDIARY ID COUNT
"BLD",9334,4,9002313.02,2,9002313.0201,1,2056,0)
LAST KNOWN BIN NUMBER
"BLD",9334,4,9002313.02,2,9002313.0201,1,2057,0)
LAST KNOWN PROCESSOR CNTRL NUM
"BLD",9334,4,9002313.02,2,9002313.0201,1,2058,0)
LAST KNOWN GROUP ID
"BLD",9334,4,9002313.02,2,9002313.0201,1,2059,0)
LAST KNOWN CARDHOLDER ID
"BLD",9334,4,9002313.02,2,9002313.0201,1,2060,0)
YEAR OF LAST PAID CLAIM
"BLD",9334,4,9002313.02,2,9002313.0201,1,2061,0)
MONTH OF LAST PAID CLAIM
"BLD",9334,4,9002313.02,2,9002313.022044,0)
INTERMEDIARY ID MULTIPLE  (sub-file)
"BLD",9334,4,9002313.02,2,9002313.022044,1,0)
^9.6411^^0
"BLD",9334,4,9002313.02,222)
y^y^p^^^^n^^n
"BLD",9334,4,9002313.02,224)

"BLD",9334,4,9002313.03,0)
9002313.03
"BLD",9334,4,9002313.03,2,0)
^9.641^9002313.035501^4
"BLD",9334,4,9002313.03,2,9002313.03,0)
BPS RESPONSES  (File-top level)
"BLD",9334,4,9002313.03,2,9002313.03,1,0)
^9.6411^568^1
"BLD",9334,4,9002313.03,2,9002313.03,1,568,0)
PAYER ID QUALIFIER
"BLD",9334,4,9002313.03,2,9002313.0301,0)
RESPONSES  (sub-file)
"BLD",9334,4,9002313.03,2,9002313.0301,1,0)
^9.6411^550^5
"BLD",9334,4,9002313.03,2,9002313.0301,1,550,0)
HELP DESK TELEPHONE NUMBER
"BLD",9334,4,9002313.03,2,9002313.0301,1,561,0)
PERCENTAGE SALES TAX BASIS PD
"BLD",9334,4,9002313.03,2,9002313.0301,1,2022,0)
HELP DESK TELEPHONE NUMBER EXT
"BLD",9334,4,9002313.03,2,9002313.0301,1,2033,0)
PRO SERVICE FEE CONT/REIM AMT
"BLD",9334,4,9002313.03,2,9002313.0301,1,2052,0)
RESPONSE INTERMEDIARY AUTH CNT
"BLD",9334,4,9002313.03,2,9002313.032052,0)
RESPONSE INTERMEDIARY MULTIPLE  (sub-file)
"BLD",9334,4,9002313.03,2,9002313.032052,1,0)
^9.6411^^0
"BLD",9334,4,9002313.03,2,9002313.035501,0)
OTHER PAYER ID MLTPL  (sub-file)
"BLD",9334,4,9002313.03,2,9002313.035501,1,0)
^9.6411^2023^1
"BLD",9334,4,9002313.03,2,9002313.035501,1,2023,0)
OTHER PAYER HELPDESK PHONE EXT
"BLD",9334,4,9002313.03,222)
y^y^p^^^^n^^n
"BLD",9334,4,9002313.03,224)

"BLD",9334,4,9002313.2,0)
9002313.2
"BLD",9334,4,9002313.2,222)
y^y^f^^n^^y^o^n
"BLD",9334,4,9002313.31,0)
9002313.31
"BLD",9334,4,9002313.31,2,0)
^9.641^9002313.31231^4
"BLD",9334,4,9002313.31,2,9002313.3123,0)
COB MULTIPLE  (sub-file)
"BLD",9334,4,9002313.31,2,9002313.3123,1,0)
^9.6411^.03^1
"BLD",9334,4,9002313.31,2,9002313.3123,1,.03,0)
OTHER PAYER ID QUALIFIER
"BLD",9334,4,9002313.31,2,9002313.31231,0)
OTHER PAYER AMT PAID MULTIPLE  (sub-file)
"BLD",9334,4,9002313.31,2,9002313.31231,1,0)
^9.6411^.02^1
"BLD",9334,4,9002313.31,2,9002313.31231,1,.02,0)
OTHER PAYER AMT PAID QUALIFIER
"BLD",9334,4,9002313.31,2,9002313.31234,0)
BENEFIT STAGE MULT  (sub-file)
"BLD",9334,4,9002313.31,2,9002313.31234,1,0)
^9.6411^.02^1
"BLD",9334,4,9002313.31,2,9002313.31234,1,.02,0)
BENEFIT STAGE QUALIFIER
"BLD",9334,4,9002313.31,2,9002313.3124,0)
OTHER AMT CLAIMED MULT  (sub-file)
"BLD",9334,4,9002313.31,2,9002313.3124,1,0)
^9.6411^.02^1
"BLD",9334,4,9002313.31,2,9002313.3124,1,.02,0)
OTHER AMOUNT CLAIMED QUALIFIER
"BLD",9334,4,9002313.31,222)
y^y^p^^^^n^^n
"BLD",9334,4,9002313.31,224)

"BLD",9334,4,9002313.32,0)
9002313.32
"BLD",9334,4,9002313.32,2,0)
^9.641^9002313.32^1
"BLD",9334,4,9002313.32,2,9002313.32,0)
BPS PAYER RESPONSE OVERRIDES  (File-top level)
"BLD",9334,4,9002313.32,2,9002313.32,1,0)
^9.6411^3.01^9
"BLD",9334,4,9002313.32,2,9002313.32,1,2.01,0)
PERCENTAGE SALES TAX BASIS PD
"BLD",9334,4,9002313.32,2,9002313.32,1,2.02,0)
OTHER AMOUNT PAID QUALIFIER
"BLD",9334,4,9002313.32,2,9002313.32,1,2.03,0)
PAYER ID QUALIFIER
"BLD",9334,4,9002313.32,2,9002313.32,1,2.04,0)
HELP DESK TELEPHONE NUMBER EXT
"BLD",9334,4,9002313.32,2,9002313.32,1,2.05,0)
PRO SERVICE FEE CONT/REIM AMT
"BLD",9334,4,9002313.32,2,9002313.32,1,2.06,0)
OTHER PAYER HELPDESK PHONE EXT
"BLD",9334,4,9002313.32,2,9002313.32,1,2.07,0)
RESPONSE INTERMED AUTH TYPE ID
"BLD",9334,4,9002313.32,2,9002313.32,1,2.08,0)
RESPONSE INTERMEDIARY AUTH ID
"BLD",9334,4,9002313.32,2,9002313.32,1,3.01,0)
INTERMEDIARY MESSAGE
"BLD",9334,4,9002313.32,222)
y^y^p^^^^n^^n
"BLD",9334,4,9002313.32,224)

"BLD",9334,4,9002313.57,0)
9002313.57
"BLD",9334,4,9002313.57,2,0)
^9.641^9002313.57141^2
"BLD",9334,4,9002313.57,2,9002313.5714,0)
COB OTHER PAYERS  (sub-file)
"BLD",9334,4,9002313.57,2,9002313.5714,1,0)
^9.6411^.03^1
"BLD",9334,4,9002313.57,2,9002313.5714,1,.03,0)
OTHER PAYER ID QUALIFIER
"BLD",9334,4,9002313.57,2,9002313.57141,0)
OTHER PAYER AMT PAID MULTIPLE  (sub-file)
"BLD",9334,4,9002313.57,2,9002313.57141,1,0)
^9.6411^.02^1
"BLD",9334,4,9002313.57,2,9002313.57141,1,.02,0)
OTHER PAYER AMT PAID QUALIFIER
"BLD",9334,4,9002313.57,222)
y^y^p^^^^n^^n
"BLD",9334,4,9002313.57,224)

"BLD",9334,4,9002313.59,0)
9002313.59
"BLD",9334,4,9002313.59,2,0)
^9.641^9002313.59141^2
"BLD",9334,4,9002313.59,2,9002313.5914,0)
COB OTHER PAYERS  (sub-file)
"BLD",9334,4,9002313.59,2,9002313.5914,1,0)
^9.6411^.03^1
"BLD",9334,4,9002313.59,2,9002313.5914,1,.03,0)
OTHER PAYER ID QUALIFIER
"BLD",9334,4,9002313.59,2,9002313.59141,0)
OTHER PAYER AMT PAID MULTIPLE  (sub-file)
"BLD",9334,4,9002313.59,2,9002313.59141,1,0)
^9.6411^.02^1
"BLD",9334,4,9002313.59,2,9002313.59141,1,.02,0)
OTHER PAYER AMT PAID QUALIFIER
"BLD",9334,4,9002313.59,222)
y^y^p^^^^n^^n
"BLD",9334,4,9002313.59,224)

"BLD",9334,4,9002313.77,0)
9002313.77
"BLD",9334,4,9002313.77,2,0)
^9.641^9002313.7781^2
"BLD",9334,4,9002313.77,2,9002313.778,0)
COB OTHER PAYERS  (sub-file)
"BLD",9334,4,9002313.77,2,9002313.778,1,0)
^9.6411^.03^1
"BLD",9334,4,9002313.77,2,9002313.778,1,.03,0)
OTHER PAYER ID QUALIFIER
"BLD",9334,4,9002313.77,2,9002313.7781,0)
OTHER PAYER AMT PAID MULTIPLE  (sub-file)
"BLD",9334,4,9002313.77,2,9002313.7781,1,0)
^9.6411^.02^1
"BLD",9334,4,9002313.77,2,9002313.7781,1,.02,0)
OTHER PAYER AMT PAID QUALIFIER
"BLD",9334,4,9002313.77,222)
y^y^p^^^^n^^n
"BLD",9334,4,9002313.77,224)

"BLD",9334,4,9002313.91,0)
9002313.91
"BLD",9334,4,9002313.91,222)
y^y^f^^n^^y^o^n
"BLD",9334,4,9002313.92,0)
9002313.92
"BLD",9334,4,9002313.92,2,0)
^9.641^9002313.923^2
"BLD",9334,4,9002313.92,2,9002313.9229,0)
INTERMEDIARY SEGMENT  (sub-file)
"BLD",9334,4,9002313.92,2,9002313.9229,1,0)
^9.6411^^
"BLD",9334,4,9002313.92,2,9002313.923,0)
LAST KNOWN 4RX SEGMENT  (sub-file)
"BLD",9334,4,9002313.92,2,9002313.923,1,0)
^9.6411^^
"BLD",9334,4,9002313.92,222)
y^y^p^^^^n^^n
"BLD",9334,4,9002313.92,224)

"BLD",9334,4,9002313.93,0)
9002313.93
"BLD",9334,4,9002313.93,222)
y^y^f^^n^^y^o^n
"BLD",9334,4,"APDD",9002313.02,9002313.02)

"BLD",9334,4,"APDD",9002313.02,9002313.02,326)

"BLD",9334,4,"APDD",9002313.02,9002313.02,2008)

"BLD",9334,4,"APDD",9002313.02,9002313.02,2009)

"BLD",9334,4,"APDD",9002313.02,9002313.02,2038)

"BLD",9334,4,"APDD",9002313.02,9002313.0201)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,320)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,498.12)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,1093)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2013)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2014)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2015)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2016)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2017)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2018)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2019)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2020)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2021)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2024)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2025)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2026)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2027)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2028)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2029)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2030)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2031)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2032)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2034)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2035)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2037)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2039)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2040)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2041)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2042)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2043)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2044)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2056)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2057)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2058)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2059)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2060)

"BLD",9334,4,"APDD",9002313.02,9002313.0201,2061)

"BLD",9334,4,"APDD",9002313.02,9002313.022044)

"BLD",9334,4,"APDD",9002313.03,9002313.03)

"BLD",9334,4,"APDD",9002313.03,9002313.03,568)

"BLD",9334,4,"APDD",9002313.03,9002313.0301)

"BLD",9334,4,"APDD",9002313.03,9002313.0301,550)

"BLD",9334,4,"APDD",9002313.03,9002313.0301,561)

"BLD",9334,4,"APDD",9002313.03,9002313.0301,2022)

"BLD",9334,4,"APDD",9002313.03,9002313.0301,2033)

"BLD",9334,4,"APDD",9002313.03,9002313.0301,2052)

"BLD",9334,4,"APDD",9002313.03,9002313.032052)

"BLD",9334,4,"APDD",9002313.03,9002313.035501)

"BLD",9334,4,"APDD",9002313.03,9002313.035501,2023)

"BLD",9334,4,"APDD",9002313.31,9002313.3123)

"BLD",9334,4,"APDD",9002313.31,9002313.3123,.03)

"BLD",9334,4,"APDD",9002313.31,9002313.31231)

"BLD",9334,4,"APDD",9002313.31,9002313.31231,.02)

"BLD",9334,4,"APDD",9002313.31,9002313.31234)

"BLD",9334,4,"APDD",9002313.31,9002313.31234,.02)

"BLD",9334,4,"APDD",9002313.31,9002313.3124)

"BLD",9334,4,"APDD",9002313.31,9002313.3124,.02)

"BLD",9334,4,"APDD",9002313.32,9002313.32)

"BLD",9334,4,"APDD",9002313.32,9002313.32,2.01)

"BLD",9334,4,"APDD",9002313.32,9002313.32,2.02)

"BLD",9334,4,"APDD",9002313.32,9002313.32,2.03)

"BLD",9334,4,"APDD",9002313.32,9002313.32,2.04)

"BLD",9334,4,"APDD",9002313.32,9002313.32,2.05)

"BLD",9334,4,"APDD",9002313.32,9002313.32,2.06)

"BLD",9334,4,"APDD",9002313.32,9002313.32,2.07)

"BLD",9334,4,"APDD",9002313.32,9002313.32,2.08)

"BLD",9334,4,"APDD",9002313.32,9002313.32,3.01)

"BLD",9334,4,"APDD",9002313.57,9002313.5714)

"BLD",9334,4,"APDD",9002313.57,9002313.5714,.03)

"BLD",9334,4,"APDD",9002313.57,9002313.57141)

"BLD",9334,4,"APDD",9002313.57,9002313.57141,.02)

"BLD",9334,4,"APDD",9002313.59,9002313.5914)

"BLD",9334,4,"APDD",9002313.59,9002313.5914,.03)

"BLD",9334,4,"APDD",9002313.59,9002313.59141)

"BLD",9334,4,"APDD",9002313.59,9002313.59141,.02)

"BLD",9334,4,"APDD",9002313.77,9002313.778)

"BLD",9334,4,"APDD",9002313.77,9002313.778,.03)

"BLD",9334,4,"APDD",9002313.77,9002313.7781)

"BLD",9334,4,"APDD",9002313.77,9002313.7781,.02)

"BLD",9334,4,"APDD",9002313.92,9002313.9229)

"BLD",9334,4,"APDD",9002313.92,9002313.923)

"BLD",9334,4,"B",9002313.02,9002313.02)

"BLD",9334,4,"B",9002313.03,9002313.03)

"BLD",9334,4,"B",9002313.2,9002313.2)

"BLD",9334,4,"B",9002313.31,9002313.31)

"BLD",9334,4,"B",9002313.32,9002313.32)

"BLD",9334,4,"B",9002313.57,9002313.57)

"BLD",9334,4,"B",9002313.59,9002313.59)

"BLD",9334,4,"B",9002313.77,9002313.77)

"BLD",9334,4,"B",9002313.91,9002313.91)

"BLD",9334,4,"B",9002313.92,9002313.92)

"BLD",9334,4,"B",9002313.93,9002313.93)

"BLD",9334,6.3)
18
"BLD",9334,"ABPKG")
n
"BLD",9334,"INI")
EN^BPS19PRE
"BLD",9334,"INID")
^n^n
"BLD",9334,"INIT")
EN^BPS19PST
"BLD",9334,"KRN",0)
^9.67PA^779.2^20
"BLD",9334,"KRN",.4,0)
.4
"BLD",9334,"KRN",.401,0)
.401
"BLD",9334,"KRN",.402,0)
.402
"BLD",9334,"KRN",.403,0)
.403
"BLD",9334,"KRN",.5,0)
.5
"BLD",9334,"KRN",.84,0)
.84
"BLD",9334,"KRN",3.6,0)
3.6
"BLD",9334,"KRN",3.8,0)
3.8
"BLD",9334,"KRN",9.2,0)
9.2
"BLD",9334,"KRN",9.8,0)
9.8
"BLD",9334,"KRN",9.8,"NM",0)
^9.68A^27^27
"BLD",9334,"KRN",9.8,"NM",1,0)
BPSRPT0^^0^B27167649
"BLD",9334,"KRN",9.8,"NM",2,0)
BPSRPT1^^0^B58952344
"BLD",9334,"KRN",9.8,"NM",3,0)
BPSRPT4^^0^B99407580
"BLD",9334,"KRN",9.8,"NM",4,0)
BPSRPT3^^0^B122921088
"BLD",9334,"KRN",9.8,"NM",5,0)
BPSRPT5^^0^B167824717
"BLD",9334,"KRN",9.8,"NM",6,0)
BPSRPT7^^0^B164190587
"BLD",9334,"KRN",9.8,"NM",7,0)
BPSRPT8^^0^B147944651
"BLD",9334,"KRN",9.8,"NM",8,0)
BPSUTIL2^^0^B53070606
"BLD",9334,"KRN",9.8,"NM",9,0)
BPSPRRX6^^0^B114820084
"BLD",9334,"KRN",9.8,"NM",10,0)
BPSOSCD^^0^B104589879
"BLD",9334,"KRN",9.8,"NM",11,0)
BPSPRRX3^^0^B123904591
"BLD",9334,"KRN",9.8,"NM",12,0)
BPSNCPD3^^0^B64625279
"BLD",9334,"KRN",9.8,"NM",13,0)
BPSJZPR^^0^B69333659
"BLD",9334,"KRN",9.8,"NM",14,0)
BPSRPAY^^0^B35888506
"BLD",9334,"KRN",9.8,"NM",15,0)
BPSOSH2^^0^B141967265
"BLD",9334,"KRN",9.8,"NM",16,0)
BPSECA1^^0^B14554293
"BLD",9334,"KRN",9.8,"NM",17,0)
BPSOSCF^^0^B30984367
"BLD",9334,"KRN",9.8,"NM",18,0)
BPSJHLT^^0^B56866826
"BLD",9334,"KRN",9.8,"NM",19,0)
BPSECX0^^0^B39590401
"BLD",9334,"KRN",9.8,"NM",20,0)
BPSOSCE^^0^B13028933
"BLD",9334,"KRN",9.8,"NM",21,0)
BPSOSCC^^0^B27473638
"BLD",9334,"KRN",9.8,"NM",22,0)
BPSECMPS^^0^B117919679
"BLD",9334,"KRN",9.8,"NM",23,0)
BPSTEST^^0^B147504088
"BLD",9334,"KRN",9.8,"NM",24,0)
BPSSCRCL^^0^B82378286
"BLD",9334,"KRN",9.8,"NM",25,0)
BPSNCPDP^^0^B93601523
"BLD",9334,"KRN",9.8,"NM",26,0)
BPSNCPD1^^0^B55779572
"BLD",9334,"KRN",9.8,"NM",27,0)
BPSECMP2^^0^B193647932
"BLD",9334,"KRN",9.8,"NM","B","BPSECA1",16)

"BLD",9334,"KRN",9.8,"NM","B","BPSECMP2",27)

"BLD",9334,"KRN",9.8,"NM","B","BPSECMPS",22)

"BLD",9334,"KRN",9.8,"NM","B","BPSECX0",19)

"BLD",9334,"KRN",9.8,"NM","B","BPSJHLT",18)

"BLD",9334,"KRN",9.8,"NM","B","BPSJZPR",13)

"BLD",9334,"KRN",9.8,"NM","B","BPSNCPD1",26)

"BLD",9334,"KRN",9.8,"NM","B","BPSNCPD3",12)

"BLD",9334,"KRN",9.8,"NM","B","BPSNCPDP",25)

"BLD",9334,"KRN",9.8,"NM","B","BPSOSCC",21)

"BLD",9334,"KRN",9.8,"NM","B","BPSOSCD",10)

"BLD",9334,"KRN",9.8,"NM","B","BPSOSCE",20)

"BLD",9334,"KRN",9.8,"NM","B","BPSOSCF",17)

"BLD",9334,"KRN",9.8,"NM","B","BPSOSH2",15)

"BLD",9334,"KRN",9.8,"NM","B","BPSPRRX3",11)

"BLD",9334,"KRN",9.8,"NM","B","BPSPRRX6",9)

"BLD",9334,"KRN",9.8,"NM","B","BPSRPAY",14)

"BLD",9334,"KRN",9.8,"NM","B","BPSRPT0",1)

"BLD",9334,"KRN",9.8,"NM","B","BPSRPT1",2)

"BLD",9334,"KRN",9.8,"NM","B","BPSRPT3",4)

"BLD",9334,"KRN",9.8,"NM","B","BPSRPT4",3)

"BLD",9334,"KRN",9.8,"NM","B","BPSRPT5",5)

"BLD",9334,"KRN",9.8,"NM","B","BPSRPT7",6)

"BLD",9334,"KRN",9.8,"NM","B","BPSRPT8",7)

"BLD",9334,"KRN",9.8,"NM","B","BPSSCRCL",24)

"BLD",9334,"KRN",9.8,"NM","B","BPSTEST",23)

"BLD",9334,"KRN",9.8,"NM","B","BPSUTIL2",8)

"BLD",9334,"KRN",19,0)
19
"BLD",9334,"KRN",19,"NM",0)
^9.68A^2^2
"BLD",9334,"KRN",19,"NM",1,0)
BPS RPT NON-BILLABLE REPORT^^0
"BLD",9334,"KRN",19,"NM",2,0)
BPS MENU RPT CLAIM STATUS^^2
"BLD",9334,"KRN",19,"NM","B","BPS MENU RPT CLAIM STATUS",2)

"BLD",9334,"KRN",19,"NM","B","BPS RPT NON-BILLABLE REPORT",1)

"BLD",9334,"KRN",19.1,0)
19.1
"BLD",9334,"KRN",101,0)
101
"BLD",9334,"KRN",409.61,0)
409.61
"BLD",9334,"KRN",771,0)
771
"BLD",9334,"KRN",779.2,0)
779.2
"BLD",9334,"KRN",870,0)
870
"BLD",9334,"KRN",8989.51,0)
8989.51
"BLD",9334,"KRN",8989.52,0)
8989.52
"BLD",9334,"KRN",8994,0)
8994
"BLD",9334,"KRN","B",.4,.4)

"BLD",9334,"KRN","B",.401,.401)

"BLD",9334,"KRN","B",.402,.402)

"BLD",9334,"KRN","B",.403,.403)

"BLD",9334,"KRN","B",.5,.5)

"BLD",9334,"KRN","B",.84,.84)

"BLD",9334,"KRN","B",3.6,3.6)

"BLD",9334,"KRN","B",3.8,3.8)

"BLD",9334,"KRN","B",9.2,9.2)

"BLD",9334,"KRN","B",9.8,9.8)

"BLD",9334,"KRN","B",19,19)

"BLD",9334,"KRN","B",19.1,19.1)

"BLD",9334,"KRN","B",101,101)

"BLD",9334,"KRN","B",409.61,409.61)

"BLD",9334,"KRN","B",771,771)

"BLD",9334,"KRN","B",779.2,779.2)

"BLD",9334,"KRN","B",870,870)

"BLD",9334,"KRN","B",8989.51,8989.51)

"BLD",9334,"KRN","B",8989.52,8989.52)

"BLD",9334,"KRN","B",8994,8994)

"BLD",9334,"QUES",0)
^9.62^^
"BLD",9334,"REQB",0)
^9.611^4^4
"BLD",9334,"REQB",1,0)
BPS*1.0*14^2
"BLD",9334,"REQB",2,0)
BPS*1.0*15^2
"BLD",9334,"REQB",3,0)
BPS*1.0*17^2
"BLD",9334,"REQB",4,0)
BPS*1.0*18^2
"BLD",9334,"REQB","B","BPS*1.0*14",1)

"BLD",9334,"REQB","B","BPS*1.0*15",2)

"BLD",9334,"REQB","B","BPS*1.0*17",3)

"BLD",9334,"REQB","B","BPS*1.0*18",4)

"DATA",9002313.2,1,0)
00^NOT SPECIFIED
"DATA",9002313.2,1,1,0)
^9002313.201S^1^1
"DATA",9002313.2,1,1,1,0)
51
"DATA",9002313.2,2,0)
01^DELIVERY COST
"DATA",9002313.2,2,1,0)
^9002313.201S^2^2
"DATA",9002313.2,2,1,1,0)
51
"DATA",9002313.2,2,1,2,0)
D0
"DATA",9002313.2,3,0)
02^SHIPPING COST
"DATA",9002313.2,3,1,0)
^9002313.201S^2^2
"DATA",9002313.2,3,1,1,0)
51
"DATA",9002313.2,3,1,2,0)
D0
"DATA",9002313.2,4,0)
03^POSTAGE COST
"DATA",9002313.2,4,1,0)
^9002313.201S^2^2
"DATA",9002313.2,4,1,1,0)
51
"DATA",9002313.2,4,1,2,0)
D0
"DATA",9002313.2,5,0)
04^ADMINISTRATIVE COST
"DATA",9002313.2,5,1,0)
^9002313.201S^2^2
"DATA",9002313.2,5,1,1,0)
51
"DATA",9002313.2,5,1,2,0)
D0
"DATA",9002313.2,6,0)
05^INCENTIVE
"DATA",9002313.2,6,1,0)
^9002313.201S^2^2
"DATA",9002313.2,6,1,1,0)
51
"DATA",9002313.2,6,1,2,0)
D0
"DATA",9002313.2,7,0)
06^COGNITIVE SERVICE
"DATA",9002313.2,7,1,0)
^9002313.201S^2^2
"DATA",9002313.2,7,1,1,0)
51
"DATA",9002313.2,7,1,2,0)
D0
"DATA",9002313.2,8,0)
07^DRUG BENEFIT
"DATA",9002313.2,8,1,0)
^9002313.201S^2^2
"DATA",9002313.2,8,1,1,0)
51
"DATA",9002313.2,8,1,2,0)
D0
"DATA",9002313.2,9,0)
08^SUM OF ALL REIMBURSEMENT
"DATA",9002313.2,9,1,0)
^9002313.201S^1^1
"DATA",9002313.2,9,1,1,0)
51
"DATA",9002313.2,10,0)
09^COMPOUND PREPARATION COST
"DATA",9002313.2,10,1,0)
^9002313.201S^1^1
"DATA",9002313.2,10,1,1,0)
D0
"DATA",9002313.2,11,0)
10^SALES TAX
"DATA",9002313.2,11,1,0)
^9002313.201S^1^1
"DATA",9002313.2,11,1,1,0)
D0
"DATA",9002313.2,12,0)
11^MEDICATION ADMINISTRATION
"DATA",9002313.2,12,1,0)
^9002313.201S^1^1
"DATA",9002313.2,12,1,1,0)
D0
"DATA",9002313.2,13,0)
98^COUPON
"DATA",9002313.2,13,1,0)
^9002313.201S^1^1
"DATA",9002313.2,13,1,1,0)
51
"DATA",9002313.2,14,0)
99^OTHER
"DATA",9002313.2,14,1,0)
^9002313.201S^1^1
"DATA",9002313.2,14,1,1,0)
51
"DATA",9002313.91,1,0)
101^^BIN NUMBER^N^^^^6^N
"DATA",9002313.91,1,5)
A1^6
"DATA",9002313.91,1,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,1,10,1,0)
S BPS("X")=$G(BPS("NCPDP","BIN Number"))
"DATA",9002313.91,1,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,1,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,1,25,0)
^9002313.9104^1^1^3040130^^^^
"DATA",9002313.91,1,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,1,30,0)
^9002313.9103^1^1^3040130^^^^
"DATA",9002313.91,1,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,1)=BPS("X")
"DATA",9002313.91,2,0)
102^^VERSION/RELEASE NUMBER^A/N^^^^2^A/N
"DATA",9002313.91,2,5)
A2^2
"DATA",9002313.91,2,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,2,10,1,0)
S BPS("X")=$G(BPS("NCPDP","Version"))
"DATA",9002313.91,2,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,2,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,2,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,2,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,2,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,2,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,2)=BPS("X")
"DATA",9002313.91,3,0)
103^^TRANSACTION CODE^N^^^^2^A/N
"DATA",9002313.91,3,5)
A3^2
"DATA",9002313.91,3,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,3,10,1,0)
S BPS("X")=$G(BPS("Transaction Code"))
"DATA",9002313.91,3,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,3,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,3,25,0)
^9002313.9104^1^1^3040130^^^^
"DATA",9002313.91,3,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,3,30,0)
^9002313.9103^1^1^3040130^^^^
"DATA",9002313.91,3,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,3)=BPS("X")
"DATA",9002313.91,4,0)
104^^PROCESSOR CONTROL NUMBER^A/N^^^^10^A/N
"DATA",9002313.91,4,5)
A4^10
"DATA",9002313.91,4,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,4,10,1,0)
S BPS("X")=$G(BPS("NCPDP","PCN"))
"DATA",9002313.91,4,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,4,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,4,25,0)
^9002313.9104^1^1^3040820^^^^
"DATA",9002313.91,4,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,4,30,0)
^9002313.9103^1^1^3040820^^^^
"DATA",9002313.91,4,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,4)=BPS("X")
"DATA",9002313.91,5,0)
201^^SERVICE PROVIDER ID^A/N^^^^15^A/N
"DATA",9002313.91,5,5)
B1^12
"DATA",9002313.91,5,10,0)
^^1^1^3110523^
"DATA",9002313.91,5,10,1,0)
S BPS("X")=$G(BPS("Site","NPI"))
"DATA",9002313.91,5,20,0)
^9002313.9102^1^1^3110523^
"DATA",9002313.91,5,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,5,25,0)
^^1^1^3110523^
"DATA",9002313.91,5,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,5,30,0)
^^1^1^3110523^
"DATA",9002313.91,5,30,1,0)
S $P(^BPSC(BPS(9002313.02),200),U,1)=BPS("X")
"DATA",9002313.91,6,0)
301^^GROUP ID^A/N^^^^15^A/N
"DATA",9002313.91,6,5)
C1^15
"DATA",9002313.91,6,10,0)
^9002313.9101^1^1^3101216^
"DATA",9002313.91,6,10,1,0)
S BPS("X")=$G(BPS("Insurer","Group #"))
"DATA",9002313.91,6,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,6,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,6,25,0)
^9002313.9104^1^1^3041021^^^^
"DATA",9002313.91,6,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,6,30,0)
^9002313.9103^1^1^3041021^^^^
"DATA",9002313.91,6,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,1)=BPS("X")
"DATA",9002313.91,7,0)
302^^CARDHOLDER ID^A/N^^^^20^A/N
"DATA",9002313.91,7,5)
C2^20
"DATA",9002313.91,7,10,0)
^9002313.9101^1^1^3041021
"DATA",9002313.91,7,10,1,0)
S BPS("X")=$G(BPS("Insurer","Policy #"))
"DATA",9002313.91,7,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,7,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,7,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,7,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,7,30,0)
^9002313.9103^1^1^3101004^^^
"DATA",9002313.91,7,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,2)=$TR(BPS("X")," ","")
"DATA",9002313.91,8,0)
303^^PERSON CODE^A/N^^^^3^A/N
"DATA",9002313.91,8,5)
C3^3
"DATA",9002313.91,8,10,0)
^9002313.9101^1^1^3040114
"DATA",9002313.91,8,10,1,0)
S BPS("X")=$G(BPS("Insurer","Person Code"))
"DATA",9002313.91,8,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,8,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,8,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,8,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,8,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,8,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,3)=BPS("X")
"DATA",9002313.91,9,0)
304^^DATE OF BIRTH^N^^^^8^N
"DATA",9002313.91,9,5)
C4^8
"DATA",9002313.91,9,10,0)
^9002313.9101^1^1^3040820
"DATA",9002313.91,9,10,1,0)
S BPS("X")=$G(BPS("Patient","DOB"))
"DATA",9002313.91,9,20,0)
^9002313.9102^1^1^3101029^
"DATA",9002313.91,9,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,9,25,0)
^9002313.9104^1^1^3040820^^^^
"DATA",9002313.91,9,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,9,30,0)
^9002313.9103^1^1^3101004^
"DATA",9002313.91,9,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,4)=$G(BPS("X"))
"DATA",9002313.91,10,0)
305^^PATIENT GENDER CODE^N^^^^1^N
"DATA",9002313.91,10,5)
C5^1
"DATA",9002313.91,10,10,0)
^9002313.9101^3^3^3040114
"DATA",9002313.91,10,10,1,0)
S BPS("X")=$G(BPS("Patient","Sex"))
"DATA",9002313.91,10,10,2,0)
S BPS("X")=$E(BPS("X"),1,1)
"DATA",9002313.91,10,10,3,0)
S BPS("X")=$S(BPS("X")="M":"1",BPS("X")="F":"2",1:"0")
"DATA",9002313.91,10,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,10,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,10,25,0)
^9002313.9104^1^1^3040114^^
"DATA",9002313.91,10,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,10,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,10,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,5)=BPS("X")
"DATA",9002313.91,11,0)
306^^PATIENT RELATIONSHIP CODE^N^^^^1^N
"DATA",9002313.91,11,5)
C6^1
"DATA",9002313.91,11,10,0)
^9002313.9101^1^1^3040114
"DATA",9002313.91,11,10,1,0)
S BPS("X")=$G(BPS("Insurer","Relationship"))
"DATA",9002313.91,11,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,11,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,11,25,0)
^9002313.9104^1^1^3040114^^^
"DATA",9002313.91,11,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,11,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,11,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,6)=BPS("X")
"DATA",9002313.91,12,0)
308^^OTHER COVERAGE CODE^N^^^^2^N
"DATA",9002313.91,12,5)
C8^2
"DATA",9002313.91,12,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,12,10,1,0)
S BPS("X")=$G(BPS("Patient","Other Coverage Code"))
"DATA",9002313.91,12,10,2,0)
S:'BPS("X") BPS("X")=0
"DATA",9002313.91,12,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,12,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,12,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,12,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,12,30,0)
^9002313.9103^1^1^3101115^^^
"DATA",9002313.91,12,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),300),U,8)=BPS("X")
"DATA",9002313.91,13,0)
401^^DATE OF SERVICE^N^^^^8^N
"DATA",9002313.91,13,5)
D1^8
"DATA",9002313.91,13,10,0)
^^1^1^3121128
"DATA",9002313.91,13,10,1,0)
S BPS("X")=$G(BPS("NCPDP","DOS"))
"DATA",9002313.91,13,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,13,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,13,25,0)
^9002313.9104^1^1^3040113^^^^
"DATA",9002313.91,13,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,13,30,0)
^^1^1^3121128
"DATA",9002313.91,13,30,1,0)
S $P(^BPSC(BPS(9002313.02),401),U,1)=BPS("X")
"DATA",9002313.91,14,0)
307^^PLACE OF SERVICE^A/N^^^^2^N
"DATA",9002313.91,14,5)
C7^2
"DATA",9002313.91,14,10,0)
^9002313.9101^1^1^3040820
"DATA",9002313.91,14,10,1,0)
S BPS("X")=$G(BPS("Patient","Place of Service"))
"DATA",9002313.91,14,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,14,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,14,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,14,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,14,30,0)
^9002313.9103^1^1^3100910^^^^
"DATA",9002313.91,14,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,7)=BPS("X")
"DATA",9002313.91,15,0)
309^^ELIGIBILITY CLARIFICATION CODE^N^^^^1^N
"DATA",9002313.91,15,5)
C9^1
"DATA",9002313.91,15,10,0)
^^2^2^3110727^
"DATA",9002313.91,15,10,1,0)
S BPS("X")=$G(BPS("Insurer","Eligibility Clarification Code"))
"DATA",9002313.91,15,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,15,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,15,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,15,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,15,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,15,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,15,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,9)=BPS("X")
"DATA",9002313.91,16,0)
310^^PATIENT FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,16,5)
CA^12
"DATA",9002313.91,16,10,0)
^^1^1^3101216^
"DATA",9002313.91,16,10,1,0)
S BPS("X")=$G(BPS("Patient","First Name"))
"DATA",9002313.91,16,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,16,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,16,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,16,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,16,30,0)
^9002313.9103^1^1^3101004^^^^
"DATA",9002313.91,16,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,10)=BPS("X")
"DATA",9002313.91,17,0)
311^^PATIENT LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,17,5)
CB^15
"DATA",9002313.91,17,10,0)
^^1^1^3101216^
"DATA",9002313.91,17,10,1,0)
S BPS("X")=$G(BPS("Patient","Last Name"))
"DATA",9002313.91,17,20,0)
^9002313.9102^1^1^3101004^
"DATA",9002313.91,17,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,17,25,0)
^9002313.9104^1^1^3101004^^^
"DATA",9002313.91,17,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,17,30,0)
^9002313.9103^1^1^3101004^^^
"DATA",9002313.91,17,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,11)=$G(BPS("X"))
"DATA",9002313.91,18,0)
402^^PRESCRIPTION/SERVICE REF NO^N^^^^12^N
"DATA",9002313.91,18,1)
PRESCRIPTION/SERVICE REFERENCE NUMBER
"DATA",9002313.91,18,5)
D2^7
"DATA",9002313.91,18,10,0)
^9002313.9101^1^1^3101115^^^^
"DATA",9002313.91,18,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"RX IEN"))
"DATA",9002313.91,18,20,0)
^^2^2^3121128
"DATA",9002313.91,18,20,1,0)
I $L($G(BPS("X")))>12 S BPS("X")=$E(BPS("X"),$L(BPS("X"))-11,$L(BPS("X")))
"DATA",9002313.91,18,20,2,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,18,25,0)
^9002313.9104^2^2^3101006^^^^
"DATA",9002313.91,18,25,1,0)
I $L(BPS("X"))>7 S BPS("X")=$E(BPS("X"),$L(BPS("X"))-6,$L(BPS("X")))
"DATA",9002313.91,18,25,2,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),7)
"DATA",9002313.91,18,30,0)
^9002313.9103^1^1^3101115^^^^
"DATA",9002313.91,18,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,2)=BPS("X")
"DATA",9002313.91,19,0)
403^^FILL NUMBER^N^^^^2^N
"DATA",9002313.91,19,5)
D3^2
"DATA",9002313.91,19,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,19,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Refill #"))
"DATA",9002313.91,19,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,19,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,19,25,0)
^9002313.9104^1^1^3030718^^
"DATA",9002313.91,19,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,19,30,0)
1^9002313.9103^1^1^3030718^^^
"DATA",9002313.91,19,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,3)=BPS("X")
"DATA",9002313.91,21,0)
405^^DAYS SUPPLY^N^^^^3^N
"DATA",9002313.91,21,5)
D5^3
"DATA",9002313.91,21,10,0)
^9002313.9101^1^1^3040109
"DATA",9002313.91,21,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Days Supply"))
"DATA",9002313.91,21,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,21,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,21,25,0)
^9002313.9104^1^1^3030827^^^^
"DATA",9002313.91,21,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,21,30,0)
^9002313.9103^1^1^3030827^^^^
"DATA",9002313.91,21,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,5)=BPS("X")
"DATA",9002313.91,22,0)
406^^COMPOUND CODE^N^^^^1^N
"DATA",9002313.91,22,5)
D6^407
"DATA",9002313.91,22,10,0)
^9002313.9101^2^2^3040114
"DATA",9002313.91,22,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Compound Code"))
"DATA",9002313.91,22,10,2,0)
S:BPS("X")="" BPS("X")=1
"DATA",9002313.91,22,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,22,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,22,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,22,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,22,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,22,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,6)=BPS("X")
"DATA",9002313.91,23,0)
407^^PRODUCT/SERVICE ID^A/N^^^^19^A/N
"DATA",9002313.91,23,5)
D7^19
"DATA",9002313.91,23,10,0)
^9002313.9101^2^2^3030825
"DATA",9002313.91,23,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"NDC"))
"DATA",9002313.91,23,10,2,0)
S BPS("X")=$$NDCF^BPSECFM(BPS("X"))
"DATA",9002313.91,23,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,23,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,23,25,0)
^9002313.9104^1^1^3030825^^^
"DATA",9002313.91,23,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,23,30,0)
^9002313.9103^1^1^3030825^^^^
"DATA",9002313.91,23,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,7)=BPS("X")
"DATA",9002313.91,24,0)
408^^DAW PRODUCT SELECTION CODE^N^^^^1^A/N
"DATA",9002313.91,24,1)
DISPENSE AS WRITTEN (DAW)/ PRODUCT SELECTION CODE
"DATA",9002313.91,24,5)
D8^1
"DATA",9002313.91,24,10,0)
^9002313.9101^2^2^3070205
"DATA",9002313.91,24,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"DAW"))
"DATA",9002313.91,24,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,24,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,24,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,24,25,0)
^9002313.9104^1^1^3061120^
"DATA",9002313.91,24,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,24,30,0)
^9002313.9103^1^1^3030722^
"DATA",9002313.91,24,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,8)=BPS("X")
"DATA",9002313.91,25,0)
409^^INGREDIENT COST^D^^^^8^D
"DATA",9002313.91,25,5)
D9^8
"DATA",9002313.91,25,10,0)
^^1^1^3121128
"DATA",9002313.91,25,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Ingredient Cost"))
"DATA",9002313.91,25,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,25,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,25,25,0)
^9002313.9104^1^1^3040907^^^^
"DATA",9002313.91,25,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,25,30,0)
^9002313.9103^1^1^3040907^^^^
"DATA",9002313.91,25,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,9)=BPS("X")
"DATA",9002313.91,26,0)
411^^PRESCRIBER ID^A/N^^^^15^A/N
"DATA",9002313.91,26,5)
DB^15
"DATA",9002313.91,26,10,0)
^9002313.9101^1^1^3070214
"DATA",9002313.91,26,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber NPI"))
"DATA",9002313.91,26,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,26,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,26,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,26,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,26,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,26,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,11)=BPS("X")
"DATA",9002313.91,27,0)
414^^DATE PRESCRIPTION WRITTEN^N^^^^8^N
"DATA",9002313.91,27,5)
DE^8
"DATA",9002313.91,27,10,0)
^9002313.9101^1^1^3040913
"DATA",9002313.91,27,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Date Written"))
"DATA",9002313.91,27,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,27,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,27,25,0)
^9002313.9104^1^1^3040913^^^^
"DATA",9002313.91,27,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,27,30,0)
^9002313.9103^1^1^3040913^^^^
"DATA",9002313.91,27,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,14)=BPS("X")
"DATA",9002313.91,28,0)
415^^NUMBER OF REFILLS AUTHORIZED^N^^^^2^N
"DATA",9002313.91,28,5)
DF^2
"DATA",9002313.91,28,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,28,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"# Refills"))
"DATA",9002313.91,28,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,28,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,28,25,0)
^9002313.9104^1^1^3030718^^
"DATA",9002313.91,28,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,28,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,28,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,15)=BPS("X")
"DATA",9002313.91,29,0)
419^^PRESCRIPTION ORIGIN CODE^N^^^^1^N
"DATA",9002313.91,29,5)
DJ^1
"DATA",9002313.91,29,10,0)
^9002313.9101^2^2^3030721
"DATA",9002313.91,29,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Origin Code"))
"DATA",9002313.91,29,10,2,0)
S:BPS("X")="" BPS("X")="0"
"DATA",9002313.91,29,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,29,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,29,25,0)
^9002313.9104^1^1^3030721^^^^
"DATA",9002313.91,29,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,29,30,0)
^9002313.9103^1^1^3030721^^^^
"DATA",9002313.91,29,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,19)=BPS("X")
"DATA",9002313.91,30,0)
420^^SUBMISSION CLARIFICATION CODE^N^^^^2^N
"DATA",9002313.91,30,5)
DK^2
"DATA",9002313.91,30,10,0)
^9002313.9101^1^1^3101006^^^^
"DATA",9002313.91,30,10,1,0)
; GET CODE handled by FLD420^BPSOSSG
"DATA",9002313.91,30,20,0)
^9002313.9102^1^1^3101006^^^^
"DATA",9002313.91,30,20,1,0)
; vD.0 FORMAT CODE handled by FLD420^BPSOSSG
"DATA",9002313.91,30,25,0)
^9002313.9104^1^1^3101006^^^^
"DATA",9002313.91,30,25,1,0)
; FORMAT CODE handled by FLD420^BPSOSSG
"DATA",9002313.91,30,30,0)
^9002313.9103^1^1^3101006^^^^
"DATA",9002313.91,30,30,1,0)
D FLD420^BPSOSSG
"DATA",9002313.91,31,0)
453^^ORIG PRESCR PROD/SERV ID QUAL^N^^^^2^A/N
"DATA",9002313.91,31,1)
ORIGINALLY PRESCRIBED PRODUCT/SERVICE ID QUALIFIER
"DATA",9002313.91,31,5)
EJ^2
"DATA",9002313.91,31,10,0)
^9002313.9101^1^1^3040907
"DATA",9002313.91,31,10,1,0)
S BPS("X")=""
"DATA",9002313.91,31,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,31,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,31,25,0)
^9002313.9104^1^1^3040907^^^^
"DATA",9002313.91,31,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,31,30,0)
^9002313.9103^1^1^3040907^^^
"DATA",9002313.91,31,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,3)=""
"DATA",9002313.91,33,0)
423^^BASIS OF COST DETERMINATION^A/N^^^^2^A/N
"DATA",9002313.91,33,5)
DN^2
"DATA",9002313.91,33,10,0)
^9002313.9101^1^1^3030916
"DATA",9002313.91,33,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Basis of Cost Determination"))
"DATA",9002313.91,33,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,33,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,33,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,33,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,33,30,0)
^9002313.9103^1^1^3030916^^^^
"DATA",9002313.91,33,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,23)=BPS("X")
"DATA",9002313.91,34,0)
424^^DIAGNOSIS CODE^A/N^^^^15^A/N
"DATA",9002313.91,34,5)
DO^15
"DATA",9002313.91,34,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,34,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Diagnosis Code"))
"DATA",9002313.91,34,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,34,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,34,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,34,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,34,30,0)
^9002313.9103^1^1^3030718^^
"DATA",9002313.91,34,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,24)=BPS("X")
"DATA",9002313.91,35,0)
430^^GROSS AMOUNT DUE^D^^^^8^D
"DATA",9002313.91,35,5)
DU^8
"DATA",9002313.91,35,10,0)
^9002313.9101^1^1^3030722
"DATA",9002313.91,35,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Gross Amount Due"))
"DATA",9002313.91,35,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,35,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,35,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,35,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,35,30,0)
^9002313.9103^1^1^3030722^^^^
"DATA",9002313.91,35,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,30)=BPS("X")
"DATA",9002313.91,36,0)
433^^PATIENT PAID AMOUNT^D^^^^8^D
"DATA",9002313.91,36,1)
PATIENT PAID AMOUNT SUBMITTED
"DATA",9002313.91,36,5)
DX^8
"DATA",9002313.91,36,10,0)
^^2^2^3110727^
"DATA",9002313.91,36,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Patient Paid Amount"))
"DATA",9002313.91,36,10,2,0)
S:BPS("X")="" BPS("X")="0.00"
"DATA",9002313.91,36,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,36,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,36,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,36,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,36,30,0)
^9002313.9103^1^1^3030916^^
"DATA",9002313.91,36,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),430),U,3)=BPS("X")
"DATA",9002313.91,37,0)
439^^REASON FOR SERVICE CODE^A/N^^^^2^A/N
"DATA",9002313.91,37,5)
E4^2
"DATA",9002313.91,37,10,0)
^9002313.9101^1^1^3031230
"DATA",9002313.91,37,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"DUR","DUR Conflict Code",439))
"DATA",9002313.91,37,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,37,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,37,25,0)
^9002313.9104^1^1^3031230^^
"DATA",9002313.91,37,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,37,30,0)
^9002313.9103^1^1^3101115^^^^
"DATA",9002313.91,37,30,1,0)
D FLD439^BPSOSSG
"DATA",9002313.91,38,0)
440^^PROFESSIONAL SERVICE CODE^A/N^^^^2^A/N
"DATA",9002313.91,38,5)
E5^2
"DATA",9002313.91,38,10,0)
^9002313.9101^1^1^3031230
"DATA",9002313.91,38,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"DUR","DUR Intervention Code",440))
"DATA",9002313.91,38,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,38,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,38,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,38,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,38,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,38,30,1,0)
D FLD440^BPSOSSG
"DATA",9002313.91,39,0)
441^^RESULT OF SERVICE CODE^A/N^^^^2^A/N
"DATA",9002313.91,39,5)
E6^2
"DATA",9002313.91,39,10,0)
^9002313.9101^2^2^3070214
"DATA",9002313.91,39,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"DUR","DUR Outcome Code",441))
"DATA",9002313.91,39,10,2,0)
S:BPS("X")="" BPS("X")="00"
"DATA",9002313.91,39,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,39,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,39,25,0)
^9002313.9104^1^1^3070214^^
"DATA",9002313.91,39,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,39,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,39,30,1,0)
D FLD441^BPSOSSG
"DATA",9002313.91,40,0)
442^^QUANTITY DISPENSED^N^^^^10^N
"DATA",9002313.91,40,5)
E7^10
"DATA",9002313.91,40,10,0)
^9002313.9101^1^1^3070620
"DATA",9002313.91,40,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Quantity"))*1000\1
"DATA",9002313.91,40,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,40,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,40,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,40,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,40,30,0)
^9002313.9103^1^1^3040109^^^^
"DATA",9002313.91,40,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,2)=BPS("X")
"DATA",9002313.91,42,0)
412^^DISPENSING FEE SUBMITTED^D^^^^8^D
"DATA",9002313.91,42,5)
DC^8
"DATA",9002313.91,42,10,0)
^^1^1^3121128
"DATA",9002313.91,42,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Dispensing Fee"))
"DATA",9002313.91,42,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,42,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,42,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,42,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,42,30,0)
^9002313.9103^1^1^3040907^^^^
"DATA",9002313.91,42,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,12)=BPS("X")
"DATA",9002313.91,44,0)
418^^LEVEL OF SERVICE^N^^^^2^N
"DATA",9002313.91,44,5)
DI^2
"DATA",9002313.91,44,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,44,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Level of Service"))
"DATA",9002313.91,44,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,44,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,44,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,44,25,0)
^9002313.9104^1^1^3070215^^
"DATA",9002313.91,44,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,44,30,0)
^9002313.9103^1^1^3070215^^^^
"DATA",9002313.91,44,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,18)=BPS("X")
"DATA",9002313.91,45,0)
421^^PRIMARY CARE PROVIDER ID^A/N^^^^15^A/N
"DATA",9002313.91,45,5)
DL^15
"DATA",9002313.91,45,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,45,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Primary Care Provider NPI"))
"DATA",9002313.91,45,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,45,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,45,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,45,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,45,30,0)
^9002313.9103^1^1^3041015^
"DATA",9002313.91,45,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,21)=""
"DATA",9002313.91,46,0)
426^^USUAL AND CUSTOMARY CHARGE^D^^^^8^D
"DATA",9002313.91,46,5)
DQ^8
"DATA",9002313.91,46,10,0)
^9002313.9101^1^1^3031219
"DATA",9002313.91,46,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Usual & Customary"))
"DATA",9002313.91,46,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,46,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,46,25,0)
^9002313.9104^1^1^3031219^^^^
"DATA",9002313.91,46,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,46,30,0)
^9002313.9103^1^1^3031219^^^^
"DATA",9002313.91,46,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,26)=BPS("X")
"DATA",9002313.91,47,0)
429^^SPECIAL PACKAGING INDICATOR^N^^^^1^N
"DATA",9002313.91,47,5)
DT^1
"DATA",9002313.91,47,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,47,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Unit Dose Indicator"))
"DATA",9002313.91,47,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,47,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,47,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,47,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,47,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,47,30,0)
^9002313.9103^1^1^3030823^^^
"DATA",9002313.91,47,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,29)=BPS("X")
"DATA",9002313.91,48,0)
431^^OTHER PAYOR AMOUNT^D^^^^8^D
"DATA",9002313.91,48,5)
DV^8
"DATA",9002313.91,48,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,48,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,48,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,48,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,48,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,48,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,48,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,48,30,1,0)
D SET431^BPSFLD01
"DATA",9002313.91,49,0)
438^^INCENTIVE AMOUNT SUBMITTED^D^^^^8^D
"DATA",9002313.91,49,5)
E3^8
"DATA",9002313.91,49,10,0)
^^1^1^3110505^
"DATA",9002313.91,49,10,1,0)
S BPS("X")=0
"DATA",9002313.91,49,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,49,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,49,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,49,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,49,30,0)
^9002313.9103^1^1^3040907^
"DATA",9002313.91,49,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),430),U,8)=""
"DATA",9002313.91,51,0)
443^^OTHER PAYER DATE^N^^^^8^N
"DATA",9002313.91,51,5)
E8^8
"DATA",9002313.91,51,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,51,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,51,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,51,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,51,25,0)
^9002313.9104^1^1^3040224^
"DATA",9002313.91,51,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,51,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,51,30,1,0)
D SET443^BPSFLD01
"DATA",9002313.91,52,0)
313^^CARDHOLDER LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,52,5)
CD^15
"DATA",9002313.91,52,10,0)
^^1^1^3101216^
"DATA",9002313.91,52,10,1,0)
S BPS("X")=$G(BPS("Cardholder","Last Name"))
"DATA",9002313.91,52,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,52,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,52,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,52,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,52,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,52,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,13)=BPS("X")
"DATA",9002313.91,53,0)
312^^CARDHOLDER FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,53,5)
CC^12
"DATA",9002313.91,53,10,0)
^^1^1^3101216^
"DATA",9002313.91,53,10,1,0)
S BPS("X")=$G(BPS("Cardholder","First Name"))
"DATA",9002313.91,53,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,53,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,53,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,53,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),12)
"DATA",9002313.91,53,30,0)
^9002313.9103^1^1^3101115^^^^
"DATA",9002313.91,53,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,12)=BPS("X")
"DATA",9002313.91,54,0)
322^^PATIENT STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,54,5)
CM^30
"DATA",9002313.91,54,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,54,10,1,0)
S BPS("X")=$G(BPS("Patient","Street Address"))
"DATA",9002313.91,54,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,54,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,54,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,54,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,54,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,54,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,2)=BPS("X")
"DATA",9002313.91,55,0)
323^^PATIENT CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,55,5)
CN^20
"DATA",9002313.91,55,10,0)
^9002313.9101^1^1^3030703
"DATA",9002313.91,55,10,1,0)
S BPS("X")=$G(BPS("Patient","City"))
"DATA",9002313.91,55,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,55,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,55,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,55,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),20)
"DATA",9002313.91,55,30,0)
^9002313.9103^1^1^3030703^^^^
"DATA",9002313.91,55,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,3)=BPS("X")
"DATA",9002313.91,56,0)
324^^PATIENT STATE/PROVINCE ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,56,5)
CO^2
"DATA",9002313.91,56,10,0)
^9002313.9101^1^1^3030717
"DATA",9002313.91,56,10,1,0)
S BPS("X")=$G(BPS("Patient","State"))
"DATA",9002313.91,56,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,56,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,56,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,56,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,56,30,0)
^9002313.9103^1^1^3030717^^^^
"DATA",9002313.91,56,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,4)=BPS("X")
"DATA",9002313.91,57,0)
325^^PATIENT ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,57,5)
CP^15
"DATA",9002313.91,57,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,57,10,1,0)
S BPS("X")=$G(BPS("Patient","Zip"))
"DATA",9002313.91,57,20,0)
^^2^2^3121128
"DATA",9002313.91,57,20,1,0)
S BPS("X")=$TR($G(BPS("X")),"-/._","")
"DATA",9002313.91,57,20,2,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,57,25,0)
^9002313.9104^2^2^3030718^^^^
"DATA",9002313.91,57,25,1,0)
S BPS("X")=$TR(BPS("X"),"-/._","")
"DATA",9002313.91,57,25,2,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),9)
"DATA",9002313.91,57,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,57,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,5)=BPS("X")
"DATA",9002313.91,58,0)
314^^HOME PLAN^A/N^^^^3^A/N
"DATA",9002313.91,58,5)
CE^3
"DATA",9002313.91,58,10,0)
^9002313.9101^1^1^3030823
"DATA",9002313.91,58,10,1,0)
S BPS("X")=$G(BPS("Home Plan"))
"DATA",9002313.91,58,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,58,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,58,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,58,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),3)
"DATA",9002313.91,58,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,58,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,14)=BPS("X")
"DATA",9002313.91,59,0)
315^^EMPLOYER NAME^A/N^^^^30^A/N
"DATA",9002313.91,59,5)
CF^30
"DATA",9002313.91,59,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,59,10,1,0)
D EMPL^BPSOSSG
"DATA",9002313.91,59,10,2,0)
S BPS("X")=$G(BPS("Employer","Name"))
"DATA",9002313.91,59,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,59,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,59,25,0)
^9002313.9104^1^1^3030718^^^
"DATA",9002313.91,59,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,59,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,59,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,5)=BPS("X")
"DATA",9002313.91,60,0)
316^^EMPLOYER STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,60,5)
CG^30
"DATA",9002313.91,60,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,60,10,1,0)
S BPS("X")=$G(BPS("Employer","Address"))
"DATA",9002313.91,60,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,60,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,60,25,0)
^9002313.9104^1^1^3030718^^^
"DATA",9002313.91,60,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,60,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,60,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,6)=BPS("X")
"DATA",9002313.91,61,0)
317^^EMPLOYER CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,61,5)
CH^20
"DATA",9002313.91,61,10,0)
^9002313.9101^1^1^3150112^
"DATA",9002313.91,61,10,1,0)
S BPS("X")=$G(BPS("Employer","City"))
"DATA",9002313.91,61,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,61,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,61,25,0)
^9002313.9104^1^1^3030718^^
"DATA",9002313.91,61,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),20)
"DATA",9002313.91,61,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,61,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,7)=BPS("X")
"DATA",9002313.91,62,0)
318^^EMPLOYER STATE/PROV ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,62,1)
EMPLOYER STATE/ PROVINCE ADDRESS
"DATA",9002313.91,62,5)
CI^2
"DATA",9002313.91,62,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,62,10,1,0)
S BPS("X")=$G(BPS("Employer","State"))
"DATA",9002313.91,62,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,62,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,62,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,62,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,62,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,62,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,8)=BPS("X")
"DATA",9002313.91,63,0)
319^^EMPLOYER ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,63,1)

"DATA",9002313.91,63,5)
CJ^15
"DATA",9002313.91,63,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,63,10,1,0)
S BPS("X")=$G(BPS("Employer","Zip Code"))
"DATA",9002313.91,63,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,63,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,63,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,63,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,63,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,63,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,9)=BPS("X")
"DATA",9002313.91,64,0)
327^^CARRIER ID^A/N^^^^10^A/N
"DATA",9002313.91,64,5)
CR^12
"DATA",9002313.91,64,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,64,10,1,0)
S BPS("X")=$G(BPS("Carrier ID #"))
"DATA",9002313.91,64,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,64,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,64,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,64,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),12)
"DATA",9002313.91,64,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,64,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),320),U,7)=BPS("X")
"DATA",9002313.91,67,0)
427^^PRESCRIBER LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,67,5)
DR^15
"DATA",9002313.91,67,10,0)
^9002313.9101^1^1^3110107^^
"DATA",9002313.91,67,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Last Name"))
"DATA",9002313.91,67,20,0)
^9002313.9102^1^1^3110107^
"DATA",9002313.91,67,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,67,25,0)
^9002313.9104^1^1^3110107^^
"DATA",9002313.91,67,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,67,30,0)
^9002313.9103^1^1^3110107^^^^
"DATA",9002313.91,67,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),420),U,27)=BPS("X")
"DATA",9002313.91,69,0)
434^^DATE OF INJURY^N^^^^8^N
"DATA",9002313.91,69,5)
DY^8
"DATA",9002313.91,69,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,69,10,1,0)
S BPS("X")=$G(BPS("Date of Injury"))
"DATA",9002313.91,69,10,2,0)
S BPS("X")=$$DTF1^BPSECFM(BPS("X"))
"DATA",9002313.91,69,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,69,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,69,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,69,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,69,30,0)
^9002313.9103^1^1^3010125^^
"DATA",9002313.91,69,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,34)=BPS("X")
"DATA",9002313.91,70,0)
435^^CLAIM/REFERENCE ID^A/N^^^^30^A/N
"DATA",9002313.91,70,5)
DZ^30
"DATA",9002313.91,70,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,70,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Claim/Ref ID #"))
"DATA",9002313.91,70,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,70,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,70,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,70,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,70,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,70,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,35)=BPS("X")
"DATA",9002313.91,71,0)
436^^PRODUCT/SERVICE ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,71,5)
E1^2
"DATA",9002313.91,71,10,0)
^^1^1^3121128
"DATA",9002313.91,71,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Product ID Qualifier"))
"DATA",9002313.91,71,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,71,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,71,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,71,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,71,30,0)
^9002313.9103^1^1^3040107^^^^
"DATA",9002313.91,71,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),430),U,6)=BPS("X")
"DATA",9002313.91,74,0)
498.51^^PRIOR AUTH PROCESSED DATE^A/N^^^^8^N
"DATA",9002313.91,74,5)
PR^8
"DATA",9002313.91,74,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,74,10,1,0)
S BPS("X")=""
"DATA",9002313.91,74,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,74,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,75,0)
202^^SERV PROVIDER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,75,1)
SERVICE PROVIDER ID QUALIFIER
"DATA",9002313.91,75,5)
B2^2
"DATA",9002313.91,75,10,0)
^9002313.9101^1^1^3070214
"DATA",9002313.91,75,10,1,0)
S BPS("X")="01"
"DATA",9002313.91,75,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,75,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,75,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,75,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,75,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,75,30,1,0)
S $P(^BPSC(BPS(9002313.02),200),U,2)=BPS("X") ;VA
"DATA",9002313.91,76,0)
110^^SOFTWARE VENDOR/CERT ID^A/N^^^^10^A/N
"DATA",9002313.91,76,1)
SOFTWARE VENDOR/ CERTIFICATION ID
"DATA",9002313.91,76,5)
AK^10
"DATA",9002313.91,76,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,76,10,1,0)
S BPS("X")=$G(BPS("NCPDP","Software Vendor/Cert ID"))
"DATA",9002313.91,76,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,76,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,76,25,0)
^9002313.9104^1^1^3040202^^^^
"DATA",9002313.91,76,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10) ;VA
"DATA",9002313.91,76,30,0)
^9002313.9103^1^1^3061023^
"DATA",9002313.91,76,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,10)=BPS("X")
"DATA",9002313.91,77,0)
331^^PATIENT ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,77,5)
CX^2
"DATA",9002313.91,77,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,77,10,1,0)
S BPS("X")="01"
"DATA",9002313.91,77,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,77,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,77,25,0)
^9002313.9104^1^1^3030718^^
"DATA",9002313.91,77,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,77,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,77,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,1)=BPS("X") ;VA
"DATA",9002313.91,78,0)
332^^PATIENT ID^A/N^^^^20^A/N
"DATA",9002313.91,78,5)
CY^20
"DATA",9002313.91,78,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,78,10,1,0)
S BPS("X")=$G(BPS("Patient","SSN"))
"DATA",9002313.91,78,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,78,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,78,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,78,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,78,30,0)
^9002313.9103^1^1^3040820^^^^
"DATA",9002313.91,78,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,2)=BPS("X") ;VA
"DATA",9002313.91,79,0)
326^^PATIENT TELEPHONE NUMBER^N^^^^10^N
"DATA",9002313.91,79,5)
CQ^10
"DATA",9002313.91,79,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,79,10,1,0)
S BPS("X")=$TR($G(BPS("Patient","Phone #")),"#() -_*.@")
"DATA",9002313.91,79,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,79,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,79,25,0)
^9002313.9104^1^1^3101115^
"DATA",9002313.91,79,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,79,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,79,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,6)=BPS("X")
"DATA",9002313.91,80,0)
455^^PRESCRIPTION/SERV REF NO QLFR^A/N^^^^1^A/N
"DATA",9002313.91,80,1)
PRESCRIPTION/ SERVICE REFERENCE NUMBER QUALIFIER
"DATA",9002313.91,80,5)
EM^1
"DATA",9002313.91,80,10,0)
^9002313.9101^1^1^3101008^
"DATA",9002313.91,80,10,1,0)
S BPS("X")=1
"DATA",9002313.91,80,20,0)
^9002313.9102^1^1^3101007^^
"DATA",9002313.91,80,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,80,25,0)
^9002313.9104^1^1^3101007^^^
"DATA",9002313.91,80,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,80,30,0)
^9002313.9103^1^1^3101007^^^^
"DATA",9002313.91,80,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,5)=BPS("X")
"DATA",9002313.91,81,0)
460^^QUANTITY PRESCRIBED^N^^^^10^N
"DATA",9002313.91,81,5)
ET^10
"DATA",9002313.91,81,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,81,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Quantity"))*1000\1
"DATA",9002313.91,81,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,81,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,81,25,0)
^9002313.9104^1^1^3030827^^^^
"DATA",9002313.91,81,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,81,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,81,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,10)=BPS("X")
"DATA",9002313.91,82,0)
465^^PROVIDER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,82,5)
EY^2
"DATA",9002313.91,82,10,0)
^9002313.9101^1^1^3070214
"DATA",9002313.91,82,10,1,0)
S BPS("X")="05"
"DATA",9002313.91,82,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,82,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,82,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,82,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,82,30,0)
^9002313.9103^1^1^3041015^
"DATA",9002313.91,82,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,5)=""
"DATA",9002313.91,83,0)
444^^PROVIDER ID^A/N^^^^15^A/N
"DATA",9002313.91,83,5)
E9^15
"DATA",9002313.91,83,10,0)
^9002313.9101^1^1^3070214
"DATA",9002313.91,83,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Provider NPI"))
"DATA",9002313.91,83,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,83,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,83,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,83,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,83,30,0)
^9002313.9103^1^1^3041015^
"DATA",9002313.91,83,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,4)=""
"DATA",9002313.91,84,0)
466^^PRESCRIBER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,84,5)
EZ^2
"DATA",9002313.91,84,10,0)
^^2^2^3101216^
"DATA",9002313.91,84,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber ID Qualifier"))
"DATA",9002313.91,84,10,2,0)
S:BPS("X")="" BPS("X")="01"
"DATA",9002313.91,84,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,84,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,84,25,0)
^9002313.9104^1^1^3070214^^^^
"DATA",9002313.91,84,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,84,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,84,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,6)=BPS("X")
"DATA",9002313.91,85,0)
467^^PRESCRIBER LOCATION CODE^A/N^^^^3^A/N
"DATA",9002313.91,85,5)
1E^3
"DATA",9002313.91,85,10,0)
^9002313.9101^1^1^3030721
"DATA",9002313.91,85,10,1,0)
S BPS("X")=$G(BPS("RX",1,"Prescriber Billing Location"))
"DATA",9002313.91,85,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,85,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,85,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,85,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,85,30,0)
^9002313.9103^1^1^3030721^^^^
"DATA",9002313.91,85,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,7)=BPS("X")
"DATA",9002313.91,86,0)
498^^PRESCRIBER TELEPHONE NUMBER^N^^^^10^N
"DATA",9002313.91,86,5)
PM^10
"DATA",9002313.91,86,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,86,10,1,0)
S BPS("X")=$TR($G(BPS("RX",BPS(9002313.0201),"Prescriber Phone #")),"#() -_*.@")
"DATA",9002313.91,86,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,86,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,86,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,86,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,86,30,0)
^9002313.9103^1^1^3100917^^^^
"DATA",9002313.91,86,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),498),U,12)=BPS("X")
"DATA",9002313.91,87,0)
468^^PRIMARY CARE PROVIDER ID QLFR^A/N^^^^2^A/N
"DATA",9002313.91,87,1)
PRIMARY CARE PROVIDER ID QUALIFIER
"DATA",9002313.91,87,5)
2E^2
"DATA",9002313.91,87,10,0)
^^2^2^3110727^
"DATA",9002313.91,87,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Primary Care Prov ID Qual"))
"DATA",9002313.91,87,10,2,0)
S:BPS("X")="" BPS("X")="01"
"DATA",9002313.91,87,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,87,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,87,25,0)
^9002313.9104^1^1^3070214^^^^
"DATA",9002313.91,87,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,87,30,0)
^9002313.9103^1^1^3041015^
"DATA",9002313.91,87,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,8)=""
"DATA",9002313.91,88,0)
469^^PRIM CARE PROV LOCATION CODE^N^^^^3^A/N
"DATA",9002313.91,88,5)
H5^3
"DATA",9002313.91,88,10,0)
^9002313.9101^1^1^3040114
"DATA",9002313.91,88,10,1,0)
S BPS("X")=$G(BPS("Patient","Primary Care Prov Location Code"))
"DATA",9002313.91,88,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,88,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,88,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,88,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,88,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,88,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,9)=BPS("X")
"DATA",9002313.91,89,0)
470^^PRIM CARE PROVIDER LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,89,1)
PRIMARY CARE PROVIDER LAST NAME
"DATA",9002313.91,89,5)
4E^15
"DATA",9002313.91,89,10,0)
^^1^1^3101217^
"DATA",9002313.91,89,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Primary Care Prov Last Name"))
"DATA",9002313.91,89,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,89,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,89,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,89,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,89,30,0)
^9002313.9103^1^1^3030825^^^^
"DATA",9002313.91,89,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,10)=BPS("X")
"DATA",9002313.91,91,0)
480^^OTHER AMT CLAIMED SUBMITTED^D^^^^8^D
"DATA",9002313.91,91,1)
OTHER AMOUNT CLAIMED SUBMITTED
"DATA",9002313.91,91,5)
H9^8
"DATA",9002313.91,91,10,0)
^9002313.9101^1^1^3101006^^^^
"DATA",9002313.91,91,10,1,0)
; GET CODE handled by FLD480^BPSOSSG
"DATA",9002313.91,91,20,0)
^9002313.9102^1^1^3101006^^^^
"DATA",9002313.91,91,20,1,0)
; vD.0 format code handled by FLD480^BPSOSSG
"DATA",9002313.91,91,25,0)
^9002313.9104^1^1^3101006^^^^
"DATA",9002313.91,91,25,1,0)
; format code handled by FLD480^BPSOSSG
"DATA",9002313.91,91,30,0)
^9002313.9103^1^1^3101006^^^^
"DATA",9002313.91,91,30,1,0)
D FLD480^BPSOSSG
"DATA",9002313.91,92,0)
109^^TRANSACTION COUNT^A/N^^^^1^A/N
"DATA",9002313.91,92,5)
A9^1
"DATA",9002313.91,92,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,92,10,1,0)
S BPS("X")=$G(BPS("Transaction Count"))
"DATA",9002313.91,92,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,92,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,92,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,92,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,92,30,0)
^9002313.9103^1^1^3040114^^^
"DATA",9002313.91,92,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,9)=BPS("X")
"DATA",9002313.91,93,0)
111^^SEGMENT IDENTIFICATION^A/N^^^^2^A/N
"DATA",9002313.91,93,5)
AM^2
"DATA",9002313.91,93,10,0)
^9002313.9101^1^1^3040114
"DATA",9002313.91,93,10,1,0)
S BPS("X")=""
"DATA",9002313.91,93,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,93,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,95,0)
112^^TRANSACTION RESPONSE STATUS^A/N^^^^1^A/N
"DATA",9002313.91,95,5)
AN^2
"DATA",9002313.91,95,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,95,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,95,25,0)
^9002313.9104^1^1^3040114^^
"DATA",9002313.91,95,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,95,30,0)
^9002313.9103^1^1^3040114^^
"DATA",9002313.91,95,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),110),U,2)=BPS("X")
"DATA",9002313.91,96,0)
320^^EMPLOYER TELEPHONE NUMBER^N^^^^10^N
"DATA",9002313.91,96,5)
CK^10
"DATA",9002313.91,96,10,0)
^9002313.9101^1^1^3050802
"DATA",9002313.91,96,10,1,0)
S BPS("X")=$TR($G(BPS("Employer","Phone")),"#() -_*.@")
"DATA",9002313.91,96,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,96,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,96,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,96,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),10)
"DATA",9002313.91,96,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,96,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,10)=BPS("X")
"DATA",9002313.91,97,0)
321^^EMPLOYER CONTACT NAME^A/N^^^^30^A/N
"DATA",9002313.91,97,5)
CL^30
"DATA",9002313.91,97,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,97,10,1,0)
S BPS("X")=""
"DATA",9002313.91,97,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,97,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,97,25,0)
^9002313.9104^1^1^3040224^^^
"DATA",9002313.91,97,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,97,30,0)
^9002313.9103^1^1^3040224^
"DATA",9002313.91,97,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),320),U,1)=BPS("X")
"DATA",9002313.91,98,0)
330^^ALTERNATE ID^A/N^^^^20^A/N
"DATA",9002313.91,98,5)
CW^20
"DATA",9002313.91,98,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,98,10,1,0)
S BPS("X")=""
"DATA",9002313.91,98,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,98,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,98,25,0)
^9002313.9104^1^1^3040224^^^
"DATA",9002313.91,98,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),20)
"DATA",9002313.91,98,30,0)
^9002313.9103^1^1^3040224^^
"DATA",9002313.91,98,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),320),U,10)=BPS("X")
"DATA",9002313.91,99,0)
333^^EMPLOYER ID^A/N^^^^15^A/N
"DATA",9002313.91,99,5)
CZ^15
"DATA",9002313.91,99,10,0)
^9002313.9101^1^1^3030823
"DATA",9002313.91,99,10,1,0)
S BPS("X")=""
"DATA",9002313.91,99,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,99,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,99,25,0)
^9002313.9104^1^1^3030823^
"DATA",9002313.91,99,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,99,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,99,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,3)=BPS("X")
"DATA",9002313.91,100,0)
334^^SMOKER/NONSMOKER^N^^^^1^A/N
"DATA",9002313.91,100,5)
1C^1
"DATA",9002313.91,100,10,0)
^9002313.9101^1^1^3070620
"DATA",9002313.91,100,10,1,0)
S BPS("X")=""
"DATA",9002313.91,100,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,100,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,100,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,100,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),1)
"DATA",9002313.91,100,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,100,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,4)=BPS("X")
"DATA",9002313.91,101,0)
335^^PREGNANCY INDICATOR^N^^^^1^A/N
"DATA",9002313.91,101,5)
2C^1
"DATA",9002313.91,101,10,0)
^9002313.9101^1^1^3030823
"DATA",9002313.91,101,10,1,0)
S BPS("X")=""
"DATA",9002313.91,101,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,101,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,101,25,0)
^9002313.9104^1^1^3030823^^
"DATA",9002313.91,101,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),1)
"DATA",9002313.91,101,30,0)
^9002313.9103^1^1^3030823^^
"DATA",9002313.91,101,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,5)=BPS("X")
"DATA",9002313.91,102,0)
336^^FACILITY ID^A/N^^^^10^A/N
"DATA",9002313.91,102,5)
8C^10
"DATA",9002313.91,102,10,0)
^9002313.9101^1^1^3070103
"DATA",9002313.91,102,10,1,0)
S BPS("X")=$G(BPS("Insurer","Facility ID"))
"DATA",9002313.91,102,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,102,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,102,25,0)
^9002313.9104^1^1^3030823^^
"DATA",9002313.91,102,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),10)
"DATA",9002313.91,102,30,0)
^9002313.9103^1^1^3030823^
"DATA",9002313.91,102,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,6)=BPS("X")
"DATA",9002313.91,103,0)
337^^COB/OTHER PAYMENTS COUNT^N^^^^1^N
"DATA",9002313.91,103,1)
COORDINATION OF BENEFITS/OTHER PAYMENTS COUNT
"DATA",9002313.91,103,5)
4C^1
"DATA",9002313.91,103,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,103,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,103,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,103,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,103,25,0)
^9002313.9104^1^1^3040223^^^
"DATA",9002313.91,103,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,103,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,103,30,1,0)
D SET337^BPSFLD01
"DATA",9002313.91,104,0)
338^^OTHER PAYER COVERAGE TYPE^N^^^^2^A/N
"DATA",9002313.91,104,5)
5C^2
"DATA",9002313.91,104,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,104,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,104,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,104,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,104,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,104,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,104,30,0)
^9002313.9103^1^1^3101004^
"DATA",9002313.91,104,30,1,0)
D SET338^BPSFLD01
"DATA",9002313.91,105,0)
339^^OTHER PAYER ID QUALIFIER^N^^^^2^A/N
"DATA",9002313.91,105,5)
6C^2
"DATA",9002313.91,105,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,105,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,105,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,105,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,105,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,105,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,105,30,0)
^9002313.9103^1^1^3101004^
"DATA",9002313.91,105,30,1,0)
D SET339^BPSFLD01
"DATA",9002313.91,106,0)
340^^OTHER PAYER ID^A/N^^^^10^A/N
"DATA",9002313.91,106,5)
7C^10
"DATA",9002313.91,106,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,106,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,106,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,106,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,106,25,0)
^9002313.9104^1^1^3040223^^
"DATA",9002313.91,106,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,106,30,0)
^9002313.9103^1^1^3101004^^
"DATA",9002313.91,106,30,1,0)
D SET340^BPSFLD01
"DATA",9002313.91,107,0)
341^^OTHER PAYER AMOUNT PAID COUNT^N^^^^1^N
"DATA",9002313.91,107,5)
HB^1
"DATA",9002313.91,107,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,107,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,107,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,107,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,107,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,107,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,107,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,107,30,1,0)
D SET341^BPSFLD01
"DATA",9002313.91,108,0)
342^^OTHER PAYER AMT PAID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,108,1)
OTHER PAYER AMOUNT PAID QUALIFIER
"DATA",9002313.91,108,5)
HC^2
"DATA",9002313.91,108,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,108,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,108,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,108,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,108,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,108,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,108,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,108,30,1,0)
D SET342^BPSFLD01
"DATA",9002313.91,109,0)
343^^DISPENSING STATUS^A/N^^^^1^A/N
"DATA",9002313.91,109,5)
HD^1
"DATA",9002313.91,109,10,0)
^9002313.9101^1^1^3040913
"DATA",9002313.91,109,10,1,0)
S BPS("X")=""
"DATA",9002313.91,109,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,109,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,109,25,0)
^9002313.9104^1^1^3040913^^^^
"DATA",9002313.91,109,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,109,30,0)
^9002313.9103^1^1^3070620^
"DATA",9002313.91,109,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),340),U,3)=""
"DATA",9002313.91,110,0)
344^^QTY INTENDED TO BE DISPENSED^N^^^^10^N
"DATA",9002313.91,110,1)
QUANTITY INTENDED TO BE DISPENSED
"DATA",9002313.91,110,5)
HF^10
"DATA",9002313.91,110,10,0)
^9002313.9101^1^1^3070620
"DATA",9002313.91,110,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Quantity"))*1000\1
"DATA",9002313.91,110,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,110,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,110,25,0)
^9002313.9104^1^1^3070620^
"DATA",9002313.91,110,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,110,30,0)
^9002313.9103^1^1^3070620^
"DATA",9002313.91,110,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),340),U,4)=""
"DATA",9002313.91,111,0)
345^^DAYS SUPPLY INTEND TO BE DISP^N^^^^3^N
"DATA",9002313.91,111,1)
DAYS SUPPLY INTENDED TO BE DISPENSED
"DATA",9002313.91,111,5)
HG^3
"DATA",9002313.91,111,10,0)
^9002313.9101^1^1^3030827
"DATA",9002313.91,111,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Days Supply"))*1000
"DATA",9002313.91,111,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,111,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,111,25,0)
^9002313.9104^1^1^3030827^^^
"DATA",9002313.91,111,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,111,30,0)
^9002313.9103^1^1^3070620^
"DATA",9002313.91,111,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),340),U,5)=""
"DATA",9002313.91,112,0)
346^^BASIS OF CALC - DISPENSING FEE^A/N^^^^2^A/N
"DATA",9002313.91,112,5)
HH^8
"DATA",9002313.91,112,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,112,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,112,25,0)
^^1^1^3031205^
"DATA",9002313.91,112,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,112,30,0)
^^1^1^3031205^
"DATA",9002313.91,112,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),340),U,6)=BPS("X")
"DATA",9002313.91,113,0)
347^^BASIS OF CALC - COPAY^A/N^^^^2^A/N
"DATA",9002313.91,113,5)
HJ^8
"DATA",9002313.91,113,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,113,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,113,25,0)
^9002313.9104^1^1^3040114^^^
"DATA",9002313.91,113,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,113,30,0)
^9002313.9103^1^1^3040114^^^
"DATA",9002313.91,113,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),340),U,7)=BPS("X")
"DATA",9002313.91,114,0)
348^^BASIS OF CALC - FLAT SALES TAX^A/N^^^^2^A/N
"DATA",9002313.91,114,5)
HK^8
"DATA",9002313.91,114,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,114,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,114,25,0)
^^1^1^3031205^
"DATA",9002313.91,114,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,114,30,0)
^^1^1^3031205^
"DATA",9002313.91,114,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),340),U,8)=BPS("X")
"DATA",9002313.91,115,0)
349^^BASIS OF CALC - % SALES TAX^A/N^^^^2^A/N
"DATA",9002313.91,115,5)
HM^8
"DATA",9002313.91,115,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,115,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,115,25,0)
^^1^1^3031205^
"DATA",9002313.91,115,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,115,30,0)
^^1^1^3031205^
"DATA",9002313.91,115,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),340),U,9)=BPS("X")
"DATA",9002313.91,116,0)
350^^PATIENT E-MAIL ADDRESS^A/N^^^^80^A/N
"DATA",9002313.91,116,5)
HN^80
"DATA",9002313.91,116,10,0)
^9002313.9101^1^1^3030512
"DATA",9002313.91,116,10,1,0)
S BPS("X")=$G(BPS("Patient","Patient E-Mail Address"))
"DATA",9002313.91,116,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,116,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),80)
"DATA",9002313.91,116,30,0)
^9002313.9103^1^1^3101101^^^
"DATA",9002313.91,116,30,1,0)
S $P(^BPSC(BPS(9002313.02),340),U,10)=$G(BPS("X"))
"DATA",9002313.91,117,0)
351^^OTHER PAYER-PAT RESP AMT QLFR^A/N^^^^2^A/N
"DATA",9002313.91,117,1)
OTHER PAYER-PATIENT RESPONSIBILITY AMOUNT QUALIFIER
"DATA",9002313.91,117,5)
NP^1
"DATA",9002313.91,117,10,0)
^^1^1^3101222^
"DATA",9002313.91,117,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,117,20,0)
^9002313.9102^1^1^3101220^
"DATA",9002313.91,117,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,117,30,0)
^^1^1^3101222^
"DATA",9002313.91,117,30,1,0)
D SET351^BPSFLD01
"DATA",9002313.91,118,0)
352^^OTHER PAYER-PAT RESP AMOUNT^D^^^^10^D
"DATA",9002313.91,118,1)
OTHER PAYER-PATIENT RESPONSIBILITY AMOUNT
"DATA",9002313.91,118,5)
NQ^10
"DATA",9002313.91,118,10,0)
^^1^1^3101222^
"DATA",9002313.91,118,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,118,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,118,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,118,25,0)
^9002313.9104^1^1^3031212^
"DATA",9002313.91,118,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,118,30,0)
^9002313.9103^1^1^3101222^^
"DATA",9002313.91,118,30,1,0)
D SET352^BPSFLD01
"DATA",9002313.91,119,0)
353^^OTHER PAYER-PAT RESP AMT CNT^N^^^^2^N
"DATA",9002313.91,119,1)
OTHER PAYER-PATIENT RESPONSIBILITY AMOUNT COUNT
"DATA",9002313.91,119,5)
NR^1
"DATA",9002313.91,119,10,0)
^^1^1^3101222^
"DATA",9002313.91,119,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,119,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,119,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,119,30,0)
^9002313.9103^1^1^3101222^^
"DATA",9002313.91,119,30,1,0)
D SET353^BPSFLD01
"DATA",9002313.91,120,0)
445^^ORIG PRESCRIBED PROD/SERV CODE^A/N^^^^19^A/N
"DATA",9002313.91,120,1)
ORIGINALLY PRESCRIBED PRODUCT/SERVICE CODE
"DATA",9002313.91,120,5)
EA^19
"DATA",9002313.91,120,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,120,10,1,0)
S BPS("X")=""
"DATA",9002313.91,120,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,120,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,120,25,0)
^9002313.9104^1^1^3040107^^
"DATA",9002313.91,120,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),19)
"DATA",9002313.91,120,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,120,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,5)="" 
"DATA",9002313.91,121,0)
446^^ORIGINALLY PRESCRIBED QUANTITY^N^^^^10^N
"DATA",9002313.91,121,5)
EB^10
"DATA",9002313.91,121,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,121,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Quantity"))*1000\1
"DATA",9002313.91,121,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,121,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,121,25,0)
^9002313.9104^1^1^3030828^^^^
"DATA",9002313.91,121,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,121,30,0)
^9002313.9103^1^1^3030828^^^^
"DATA",9002313.91,121,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,6)=BPS("X") ;VA
"DATA",9002313.91,122,0)
454^^SCHEDULED PRESCRIPTION ID NUM^N^^^^12^A/N
"DATA",9002313.91,122,1)
SCHEDULED PRESCRIPTION ID NUMBER
"DATA",9002313.91,122,5)
EK^12
"DATA",9002313.91,122,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,122,10,1,0)
S BPS("X")=""
"DATA",9002313.91,122,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,122,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,122,25,0)
^9002313.9104^1^1^3040224^^
"DATA",9002313.91,122,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),12)
"DATA",9002313.91,122,30,0)
^9002313.9103^1^1^3040224^^
"DATA",9002313.91,122,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,4)=BPS("X")
"DATA",9002313.91,123,0)
456^^ASSOC PRESCRIPTION/SERV REF NO^A/N^^^^12^N
"DATA",9002313.91,123,1)
ASSOCIATED PRESCRIPTION/ SERVICE REFERENCE NUMBER
"DATA",9002313.91,123,5)
EN^7
"DATA",9002313.91,123,10,0)
^9002313.9101^1^1^3030823
"DATA",9002313.91,123,10,1,0)
S BPS("X")=""
"DATA",9002313.91,123,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,123,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,123,25,0)
^9002313.9104^1^1^3030823^^
"DATA",9002313.91,123,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),7)
"DATA",9002313.91,123,30,0)
^^1^1^3110720^
"DATA",9002313.91,123,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,6)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,124,0)
457^^ASSOC PRESCRIPTION/SERV DATE^A/N^^^^8^N
"DATA",9002313.91,124,1)
ASSOCIATED PRESCRIPTION/ SERVICE DATE
"DATA",9002313.91,124,5)
EP^8
"DATA",9002313.91,124,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,124,10,1,0)
S BPS("X")=""
"DATA",9002313.91,124,20,0)
^9002313.9102^1^1^3101029^
"DATA",9002313.91,124,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,124,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,124,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,124,30,0)
^9002313.9103^1^1^3110720^^
"DATA",9002313.91,124,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,7)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,125,0)
458^^PROCEDURE MODIFIER CODE COUNT^N^^^^2^N
"DATA",9002313.91,125,5)
SE^1
"DATA",9002313.91,125,10,0)
^9002313.9101^1^1^3040819
"DATA",9002313.91,125,10,1,0)
S BPS("X")=""
"DATA",9002313.91,125,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,125,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,125,25,0)
^9002313.9104^1^1^3040819^^^^
"DATA",9002313.91,125,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),1)
"DATA",9002313.91,125,30,0)
^9002313.9103^1^1^3040819^
"DATA",9002313.91,125,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,8)=""
"DATA",9002313.91,126,0)
459^^PROCEDURE MODIFIER CODE^A/N^^^^2^A/N
"DATA",9002313.91,126,5)
ER^2
"DATA",9002313.91,126,10,0)
^9002313.9101^1^1^3040819
"DATA",9002313.91,126,10,1,0)
S BPS("X")=""
"DATA",9002313.91,126,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,126,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,126,25,0)
^9002313.9104^1^1^3040819^^^^
"DATA",9002313.91,126,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,126,30,0)
^^1^1^3110727^
"DATA",9002313.91,126,30,1,0)
; Not implemented
"DATA",9002313.91,127,0)
461^^PRIOR AUTHORIZATION TYPE CODE^N^^^^2^N
"DATA",9002313.91,127,5)
EU^2
"DATA",9002313.91,127,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,127,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Prior Auth Type"))
"DATA",9002313.91,127,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,127,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,127,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,127,25,0)
^9002313.9104^1^1^3031222^^^^
"DATA",9002313.91,127,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,127,30,0)
^9002313.9103^1^1^3031222^^^^
"DATA",9002313.91,127,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,1)=BPS("X")
"DATA",9002313.91,128,0)
462^^PRIOR AUTH NUMBER SUBMITTED^A/N^^^^11^N
"DATA",9002313.91,128,1)
PRIOR AUTHORIZATION NUMBER SUBMITTED
"DATA",9002313.91,128,5)
EV^11
"DATA",9002313.91,128,10,0)
^9002313.9101^1^1^3031222
"DATA",9002313.91,128,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Prior Auth Num Sub"))
"DATA",9002313.91,128,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,128,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,128,25,0)
^9002313.9104^1^1^3031222^^^^
"DATA",9002313.91,128,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,128,30,0)
^9002313.9103^1^1^3031222^^^^
"DATA",9002313.91,128,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,2)=BPS("X")
"DATA",9002313.91,129,0)
464^^INTERMEDIARY AUTHORIZATION ID^A/N^^^^11^A/N
"DATA",9002313.91,129,5)
EX^11
"DATA",9002313.91,129,10,0)
^^2^2^3110727^
"DATA",9002313.91,129,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Intermediary Auth ID"))
"DATA",9002313.91,129,10,2,0)
S:BPS("X")="" BPS("X")=""
"DATA",9002313.91,129,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,129,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,129,25,0)
^9002313.9104^1^1^3030823^
"DATA",9002313.91,129,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),11)
"DATA",9002313.91,129,30,0)
^9002313.9103^1^1^3030823^^^
"DATA",9002313.91,129,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,4)=BPS("X")
"DATA",9002313.91,130,0)
471^^OTHER PAYER REJECT COUNT^N^^^^2^N
"DATA",9002313.91,130,5)
5E^2
"DATA",9002313.91,130,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,130,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,130,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,130,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,130,25,0)
^9002313.9104^1^1^3040224^^
"DATA",9002313.91,130,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,130,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,130,30,1,0)
D SET471^BPSFLD01
"DATA",9002313.91,131,0)
472^^OTHER PAYER REJECT CODE^A/N^^^^3^A/N
"DATA",9002313.91,131,5)
6E^3
"DATA",9002313.91,131,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,131,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,131,20,0)
^9002313.9102^1^1^3101206^
"DATA",9002313.91,131,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,131,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,131,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,131,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,131,30,1,0)
D SET472^BPSFLD01
"DATA",9002313.91,132,0)
473^^DUR/PPS CODE COUNTER^N^^^^1^N
"DATA",9002313.91,132,5)
7E^1
"DATA",9002313.91,132,10,0)
^9002313.9101^1^1^3031230
"DATA",9002313.91,132,10,1,0)
S BPS("X")=1
"DATA",9002313.91,132,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,132,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,132,25,0)
^9002313.9104^1^1^3031230^^^^
"DATA",9002313.91,132,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,132,30,0)
^9002313.9103^1^1^3031230^^^^
"DATA",9002313.91,132,30,1,0)
D FLD473^BPSOSSG
"DATA",9002313.91,133,0)
474^^DUR/PPS LEVEL OF EFFORT^N^^^^2^N
"DATA",9002313.91,133,5)
8E^2
"DATA",9002313.91,133,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,133,10,1,0)
S BPS("X")=12
"DATA",9002313.91,133,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,133,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,133,25,0)
^9002313.9104^1^1^3030718^
"DATA",9002313.91,133,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,133,30,0)
^9002313.9103^1^1^3030718^
"DATA",9002313.91,133,30,1,0)
D FLD474^BPSOSSG
"DATA",9002313.91,134,0)
475^^DUR CO-AGENT ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,134,5)
J9^2
"DATA",9002313.91,134,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,134,10,1,0)
S BPS("X")=""
"DATA",9002313.91,134,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,134,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,134,25,0)
^9002313.9104^1^1^3030718^
"DATA",9002313.91,134,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,134,30,0)
^9002313.9103^1^1^3030718^
"DATA",9002313.91,134,30,1,0)
D FLD475^BPSOSSG
"DATA",9002313.91,135,0)
476^^DUR CO-AGENT ID^A/N^^^^19^A/N
"DATA",9002313.91,135,5)
H6^19
"DATA",9002313.91,135,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,135,10,1,0)
S BPS("X")=""
"DATA",9002313.91,135,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,135,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,135,25,0)
^9002313.9104^1^1^3040107^^^
"DATA",9002313.91,135,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,135,30,0)
^9002313.9103^1^1^3101115^^^^
"DATA",9002313.91,135,30,1,0)
D FLD476^BPSOSSG
"DATA",9002313.91,136,0)
477^^PROF SERVICE FEE SUBMITTED^D^^^^8^D
"DATA",9002313.91,136,1)
PROFESSIONAL SERVICE FEE SUBMITTED
"DATA",9002313.91,136,5)
BE^8
"DATA",9002313.91,136,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,136,10,1,0)
S BPS("X")=0
"DATA",9002313.91,136,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,136,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,136,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,136,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,136,30,0)
^9002313.9103^1^1^3030823^^
"DATA",9002313.91,136,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),470),U,7)=BPS("X")
"DATA",9002313.91,139,0)
481^^FLAT SALES TAX AMT SUBMITTED^D^^^^8^D
"DATA",9002313.91,139,1)
FLAT SALES TAX AMOUNT SUBMITTED
"DATA",9002313.91,139,5)
HA^8
"DATA",9002313.91,139,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,139,10,1,0)
S BPS("X")=0
"DATA",9002313.91,139,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,139,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,139,25,0)
^9002313.9104^1^1^3040907^^
"DATA",9002313.91,139,25,1,0)
S BPS("X")=$$DFF^BPSECFM(BPS("X"),8)
"DATA",9002313.91,139,30,0)
^9002313.9103^1^1^3100923^^^^
"DATA",9002313.91,139,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,1)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,140,0)
482^^PERCENT SALES TAX AMT SBMTTD^D^^^^8^D
"DATA",9002313.91,140,1)
PERCENTAGE SALES TAX AMOUNT SUBMITTED
"DATA",9002313.91,140,5)
GE^8
"DATA",9002313.91,140,10,0)
^9002313.9101^1^1^3050802
"DATA",9002313.91,140,10,1,0)
S BPS("X")=0
"DATA",9002313.91,140,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,140,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,140,25,0)
^9002313.9104^1^1^3040907^^^^
"DATA",9002313.91,140,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,140,30,0)
^9002313.9103^1^1^3100923^^^^
"DATA",9002313.91,140,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,2)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,141,0)
483^^PERCENT SALES TAX RATE SBMTTD^D^^^^7^D
"DATA",9002313.91,141,1)
PERCENTAGE SALES TAX RATE SUBMITTED
"DATA",9002313.91,141,5)
HE^7
"DATA",9002313.91,141,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,141,10,1,0)
S BPS("X")=+$G(BPS("Insurer","Percent Sales Tax Rate Sub"))
"DATA",9002313.91,141,20,0)
^^1^1^3121128
"DATA",9002313.91,141,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),7,4)
"DATA",9002313.91,141,25,0)
^^1^1^3121128
"DATA",9002313.91,141,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),7,4)
"DATA",9002313.91,141,30,0)
^9002313.9103^1^1^3100923^^^^
"DATA",9002313.91,141,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,3)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,142,0)
484^^PERCENT SALES TAX BASIS SBMTTD^A/N^^^^2^A/N
"DATA",9002313.91,142,1)
PERCENTAGE SALES TAX BASIS SUBMITTED
"DATA",9002313.91,142,5)
JE^2
"DATA",9002313.91,142,10,0)
^9002313.9101^1^1^3050802
"DATA",9002313.91,142,10,1,0)
S BPS("X")=""
"DATA",9002313.91,142,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,142,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,142,25,0)
^9002313.9104^1^1^3030824^
"DATA",9002313.91,142,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,142,30,0)
^9002313.9103^1^1^3100923^^^^
"DATA",9002313.91,142,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,4)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,143,0)
485^^COUPON TYPE^A/N^^^^2^A/N
"DATA",9002313.91,143,5)
KE^2
"DATA",9002313.91,143,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,143,10,1,0)
S BPS("X")=""
"DATA",9002313.91,143,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,143,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,143,25,0)
^9002313.9104^1^1^3040107^^
"DATA",9002313.91,143,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,143,30,0)
^9002313.9103^1^1^3101115^^^
"DATA",9002313.91,143,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,5)=BPS("X")
"DATA",9002313.91,144,0)
486^^COUPON NUMBER^A/N^^^^15^A/N
"DATA",9002313.91,144,5)
ME^15
"DATA",9002313.91,144,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,144,10,1,0)
S BPS("X")=""
"DATA",9002313.91,144,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,144,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,144,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,144,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,144,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,144,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,6)=BPS("X")
"DATA",9002313.91,145,0)
487^^COUPON VALUE AMOUNT^D^^^^8^D
"DATA",9002313.91,145,5)
NE^8
"DATA",9002313.91,145,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,145,10,1,0)
S BPS("X")=""
"DATA",9002313.91,145,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,145,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,145,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,145,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,145,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,145,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,7)=BPS("X")
"DATA",9002313.91,146,0)
491^^DIAGNOSIS CODE COUNT^N^^^^1^N
"DATA",9002313.91,146,5)
VE^1
"DATA",9002313.91,146,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,146,10,1,0)
S BPS("X")=""
"DATA",9002313.91,146,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,146,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,146,25,0)
^9002313.9104^1^1^3040107^^^^
"DATA",9002313.91,146,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,147,0)
492^^DIAGNOSIS CODE QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,147,5)
WE^2
"DATA",9002313.91,147,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,147,10,1,0)
S BPS("X")=""
"DATA",9002313.91,147,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,147,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,147,25,0)
^9002313.9104^1^1^3040224^^^
"DATA",9002313.91,147,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,148,0)
493^^CLINICAL INFORMATION COUNTER^N^^^^1^N
"DATA",9002313.91,148,5)
XE^1
"DATA",9002313.91,148,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,148,10,1,0)
S BPS("X")=""
"DATA",9002313.91,148,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,148,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,148,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,148,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,149,0)
498.01^^REQUEST TYPE^N^^^^1^A/N
"DATA",9002313.91,149,5)
PA^1
"DATA",9002313.91,149,10,0)
^9002313.9101^1^1^3040428
"DATA",9002313.91,149,10,1,0)
S BPS("X")=""
"DATA",9002313.91,149,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,149,20,1,0)
S BPS("X")=""
"DATA",9002313.91,149,25,0)
^9002313.9104^1^1^3040428^
"DATA",9002313.91,149,25,1,0)
S BPS("X")=""
"DATA",9002313.91,150,0)
498.02^^REQUEST PERIOD DATE-BEGIN^A/N^^^^8^N
"DATA",9002313.91,150,5)
PB^8
"DATA",9002313.91,150,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,150,10,1,0)
S BPS("X")=""
"DATA",9002313.91,150,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,150,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,151,0)
498.03^^REQUEST PERIOD DATE-END^A/N^^^^8^N
"DATA",9002313.91,151,5)
PC^8
"DATA",9002313.91,151,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,151,10,1,0)
S BPS("X")=""
"DATA",9002313.91,151,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,151,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,152,0)
498.04^^BASIS OF REQUEST^A/N^^^^2^A/N
"DATA",9002313.91,152,5)
PD^2
"DATA",9002313.91,152,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,152,10,1,0)
S BPS("X")=""
"DATA",9002313.91,152,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,152,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,153,0)
498.05^^AUTHORIZED REP FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,153,5)
PE^12
"DATA",9002313.91,153,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,153,10,1,0)
S BPS("X")=""
"DATA",9002313.91,153,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,153,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,154,0)
498.06^^AUTHORIZED REP LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,154,5)
PF^15
"DATA",9002313.91,154,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,154,10,1,0)
S BPS("X")=""
"DATA",9002313.91,154,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,154,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,155,0)
498.07^^AUTHORIZED REP STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,155,5)
PG^30
"DATA",9002313.91,155,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,155,10,1,0)
S BPS("X")=""
"DATA",9002313.91,155,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,155,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,156,0)
498.08^^AUTH REP CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,156,5)
PH^20
"DATA",9002313.91,156,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,156,10,1,0)
S BPS("X")=""
"DATA",9002313.91,156,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,156,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,157,0)
498.09^^AUTHORIZED REP STATE/PROV ADDR^A/N^^^^2^A/N
"DATA",9002313.91,157,5)
PJ^2
"DATA",9002313.91,157,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,157,10,1,0)
S BPS("X")=""
"DATA",9002313.91,157,20,0)
^9002313.9102^1^1^3101206^
"DATA",9002313.91,157,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,158,0)
498.11^^AUTHORIZED REP ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,158,1)
AUTHORIZED REPRESENTATIVE ZIP/POSTAL ZONE
"DATA",9002313.91,158,5)
PK^15
"DATA",9002313.91,158,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,158,10,1,0)
S BPS("X")=""
"DATA",9002313.91,158,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,158,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,159,0)
498.12^^PRESCRIBER TELEPHONE NUMBER^N^^^^10^N
"DATA",9002313.91,159,5)
PM^10
"DATA",9002313.91,159,10,0)
^9002313.9101^1^1^3050802
"DATA",9002313.91,159,10,1,0)
S BPS("X")=$TR($G(BPS("RX",BPS(9002313.0201),"Prescriber Phone #")),"#() -_*.@")
"DATA",9002313.91,159,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,159,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,159,25,0)
^9002313.9104^1^1^3030722^^
"DATA",9002313.91,159,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),10)
"DATA",9002313.91,159,30,0)
^9002313.9103^1^1^3030722^^
"DATA",9002313.91,159,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),498),U,12)=BPS("X")
"DATA",9002313.91,160,0)
498.13^^PRIOR AUTH SUPPORTING DOCUMENT^A/N^^^^500^A/N
"DATA",9002313.91,160,5)
PP^200
"DATA",9002313.91,160,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,160,10,1,0)
S BPS("X")=""
"DATA",9002313.91,160,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,160,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),500)
"DATA",9002313.91,161,0)
498.14^^PRIOR AUTH NUMBER-ASSIGNED^N^^^^11^N
"DATA",9002313.91,161,5)
PY^8
"DATA",9002313.91,161,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,161,10,1,0)
S BPS("X")=""
"DATA",9002313.91,161,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,161,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,162,0)
498.52^^PRIOR AUTH EFFECTIVE DATE^A/N^^^^8^N
"DATA",9002313.91,162,5)
PS^8
"DATA",9002313.91,162,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,162,10,1,0)
S BPS("X")=""
"DATA",9002313.91,162,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,162,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,163,0)
498.53^^PRIOR AUTH EXPIRATION DATE^A/N^^^^8^N
"DATA",9002313.91,163,5)
PT^8
"DATA",9002313.91,163,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,163,10,1,0)
S BPS("X")=""
"DATA",9002313.91,163,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,163,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,164,0)
498.54^^PRIOR AUTH NO REFILLS AUTH^N^^^^2^N
"DATA",9002313.91,164,5)
PW^8
"DATA",9002313.91,164,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,164,10,1,0)
S BPS("X")=""
"DATA",9002313.91,164,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,164,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,165,0)
498.55^^PRIOR AUTH QTY ACCUMULATED^N^^^^10^N
"DATA",9002313.91,165,5)
PX^8
"DATA",9002313.91,165,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,165,10,1,0)
S BPS("X")=""
"DATA",9002313.91,165,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,165,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,166,0)
498.57^^PRIOR AUTHORIZATION QUANTITY^A/N^^^^10^N
"DATA",9002313.91,166,5)
RA^3
"DATA",9002313.91,166,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,166,10,1,0)
S BPS("X")=""
"DATA",9002313.91,166,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,166,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,167,0)
498.58^^PRIOR AUTH DOLLARS AUTHORIZED^N^^^^8^D
"DATA",9002313.91,167,5)
RB^8
"DATA",9002313.91,167,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,167,10,1,0)
S BPS("X")=""
"DATA",9002313.91,167,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,167,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,168,0)
498.59^^AUTH REP CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,168,5)
PH^20
"DATA",9002313.91,168,10,0)
^9002313.9101^1^1^3030512
"DATA",9002313.91,168,10,1,0)
S BPS("X")=""
"DATA",9002313.91,168,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,168,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,169,0)
501^^HEADER RESPONSE STATUS^A/N^^^^1^A/N
"DATA",9002313.91,169,5)
F1^1
"DATA",9002313.91,169,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,169,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,169,25,0)
^9002313.9104^1^1^3040202^^^
"DATA",9002313.91,169,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,169,30,0)
^9002313.9103^1^1^3040202^^^
"DATA",9002313.91,169,30,1,0)
S $P(^BPSR(BPS(9002313.02),500),U,1)=BPS("X")
"DATA",9002313.91,170,0)
503^^AUTHORIZATION NUMBER^A/N^^^^20^A/N
"DATA",9002313.91,170,5)
F3^20
"DATA",9002313.91,170,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,170,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,170,30,0)
^^1^1^3031205^
"DATA",9002313.91,170,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,3)=BPS("X")
"DATA",9002313.91,171,0)
504^^MESSAGE^A/N^^^^200^A/N
"DATA",9002313.91,171,5)
F4^200
"DATA",9002313.91,171,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,171,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,171,25,0)
^^1^1^3031211^
"DATA",9002313.91,171,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),200)
"DATA",9002313.91,171,30,0)
^^1^1^3031211^
"DATA",9002313.91,171,30,1,0)
S $P(^BPSR(BPS(9002313.02),504),U,1)=BPS("X")
"DATA",9002313.91,172,0)
505^^PATIENT PAY AMOUNT^A/N^^^^8^D
"DATA",9002313.91,172,5)
F5^8
"DATA",9002313.91,172,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,172,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,172,25,0)
^9002313.9104^1^1^3031212^^
"DATA",9002313.91,172,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,172,30,0)
^9002313.9103^1^1^3031212^^
"DATA",9002313.91,172,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,5)=S BPS("X")
"DATA",9002313.91,173,0)
506^^INGREDIENT COST PAID^A/N^^^^8^D
"DATA",9002313.91,173,5)
F6^8
"DATA",9002313.91,173,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,173,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,173,25,0)
^9002313.9104^1^1^3031211^^
"DATA",9002313.91,173,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,173,30,0)
^9002313.9103^1^1^3031211^^
"DATA",9002313.91,173,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,6)=BPS("X")
"DATA",9002313.91,174,0)
507^^DISPENSING FEE PAID^A/N^^^^8^D
"DATA",9002313.91,174,5)
F7^8
"DATA",9002313.91,174,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,174,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,174,25,0)
^9002313.9104^1^1^3031210^^^
"DATA",9002313.91,174,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,174,30,0)
^9002313.9103^1^1^3031210^^^
"DATA",9002313.91,174,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,7)=BPS("X")
"DATA",9002313.91,175,0)
509^^TOTAL AMOUNT PAID^A/N^^^^8^D
"DATA",9002313.91,175,5)
F9^8
"DATA",9002313.91,175,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,175,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,175,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,175,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,175,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,175,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,9)
"DATA",9002313.91,176,0)
510^^REJECT COUNT^N^^^^2^N
"DATA",9002313.91,176,5)
FA^2
"DATA",9002313.91,176,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,176,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,176,25,0)
^^1^1^3031217^
"DATA",9002313.91,176,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,176,30,0)
^^1^1^3031217^
"DATA",9002313.91,176,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,10)=BPS("X")
"DATA",9002313.91,177,0)
511^^REJECT CODE^A/N^^^^3^A/N
"DATA",9002313.91,177,5)
FB^3
"DATA",9002313.91,177,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,177,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,177,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,177,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,177,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,177,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),511,DUR,0),U,1)
"DATA",9002313.91,178,0)
512^^ACCUMULATED DEDUCTIBLE AMOUNT^A/N^^^^8^D
"DATA",9002313.91,178,5)
FC^8
"DATA",9002313.91,178,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,178,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,178,25,0)
^9002313.9104^1^1^3031210^^^^
"DATA",9002313.91,178,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,178,30,0)
^9002313.9103^1^1^3031210^^^^
"DATA",9002313.91,178,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),"^",10)=BPS("X")
"DATA",9002313.91,179,0)
513^^REMAINING DEDUCTIBLE AMOUNT^A/N^^^^8^D
"DATA",9002313.91,179,5)
FD^8
"DATA",9002313.91,179,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,179,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,179,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,179,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,179,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,179,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,13)=BPS("X")
"DATA",9002313.91,180,0)
514^^REMAINING BENEFIT AMOUNT^A/N^^^^8^D
"DATA",9002313.91,180,5)
FE^8
"DATA",9002313.91,180,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,180,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,180,25,0)
^9002313.9104^1^1^3031217^^^
"DATA",9002313.91,180,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,180,30,0)
^9002313.9103^1^1^3031217^^^
"DATA",9002313.91,180,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,14)
"DATA",9002313.91,182,0)
517^^AMT APPLIED TO PERIODIC DEDUCT^D^^^^8^D
"DATA",9002313.91,182,5)
FH^8
"DATA",9002313.91,182,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,182,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,182,25,0)
^9002313.9104^1^1^3031205^^^
"DATA",9002313.91,182,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,182,30,0)
^9002313.9103^1^1^3031205^^
"DATA",9002313.91,182,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),"^",17)=BPS("X")
"DATA",9002313.91,183,0)
518^^AMOUNT OF COPAY^D^^^^8^D
"DATA",9002313.91,183,5)
FI^8
"DATA",9002313.91,183,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,183,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,183,25,0)
^^1^1^3031205^
"DATA",9002313.91,183,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,183,30,0)
^^1^1^3031205^
"DATA",9002313.91,183,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),"^",18)=BPS("X")
"DATA",9002313.91,184,0)
519^^AMT ATTRIBUTED TO PRODUCT SEL^D^^^^8^D
"DATA",9002313.91,184,5)
FJ^8
"DATA",9002313.91,184,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,184,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,184,25,0)
^^1^1^3031205^
"DATA",9002313.91,184,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,184,30,0)
^^1^1^3031205^
"DATA",9002313.91,184,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,19)=BPS("X")
"DATA",9002313.91,185,0)
520^^AMOUNT EXCEEDING PERIODIC MAX^D^^^^8^D
"DATA",9002313.91,185,5)
FK^8
"DATA",9002313.91,185,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,185,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,185,25,0)
^^1^1^3031205^
"DATA",9002313.91,185,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,185,30,0)
^^1^1^3031205^
"DATA",9002313.91,185,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,20)=BPS("X")
"DATA",9002313.91,186,0)
521^^INCENTIVE AMOUNT PAID^A/N^^^^8^D
"DATA",9002313.91,186,5)
FL^8
"DATA",9002313.91,186,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,186,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,186,25,0)
^^1^1^3031210^
"DATA",9002313.91,186,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,186,30,0)
^^1^1^3031210^
"DATA",9002313.91,186,30,1,0)
$P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,21)=BPS("X")
"DATA",9002313.91,187,0)
522^^BASIS OF REIMB DETERMINATION^N^^^^2^N
"DATA",9002313.91,187,5)
FM^2
"DATA",9002313.91,187,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,187,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,187,25,0)
^^1^1^3031205^
"DATA",9002313.91,187,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,187,30,0)
^^1^1^3031205^
"DATA",9002313.91,187,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,22)=BPS("X")
"DATA",9002313.91,188,0)
523^^AMOUNT ATTRIBUTED TO SALES TAX^D^^^^8^D
"DATA",9002313.91,188,5)
FN^8
"DATA",9002313.91,188,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,188,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,188,25,0)
^^1^1^3031205^
"DATA",9002313.91,188,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,188,30,0)
^^1^1^3031205^
"DATA",9002313.91,188,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),"^",23)=BPS("X")
"DATA",9002313.91,189,0)
524^^PLAN ID^A/N^^^^8^A/N
"DATA",9002313.91,189,5)
FO^8
"DATA",9002313.91,189,10,0)
^^1^1^3110301^
"DATA",9002313.91,189,10,1,0)
S BPS("X")=$G(BPS("Insurer","Plan ID"))
"DATA",9002313.91,189,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,189,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,189,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,189,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),8)
"DATA",9002313.91,189,30,0)
^9002313.9103^1^1^3030825^^^^
"DATA",9002313.91,189,30,1,0)
S $P(^BPSC(BPS(9002313.02),520),U,4)=BPS("X")
"DATA",9002313.91,191,0)
526^^ADDITIONAL MESSAGE INFORMATION^A/N^^^^40^A/N
"DATA",9002313.91,191,5)
FQ^200
"DATA",9002313.91,191,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,191,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,191,25,0)
^9002313.9104^1^1^3031210^^^^
"DATA",9002313.91,191,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),200)
"DATA",9002313.91,191,30,0)
^9002313.9103^1^1^3031210^^^^
"DATA",9002313.91,191,30,1,0)
S ^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),526)=BPS("X")
"DATA",9002313.91,192,0)
528^^CLINICAL SIGNIFICANCE CODE^A/N^^^^1^A/N
"DATA",9002313.91,192,5)
FS^1
"DATA",9002313.91,192,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,192,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,192,25,0)
^9002313.9104^1^1^3031210^^^^
"DATA",9002313.91,192,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,192,30,0)
^9002313.9103^1^1^3031210^^^^
"DATA",9002313.91,192,30,1,0)
S ^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),525)=$G(BPS("X"))
"DATA",9002313.91,193,0)
529^^OTHER PHARMACY INDICATOR^A/N^^^^1^N
"DATA",9002313.91,193,5)
FT^1
"DATA",9002313.91,193,10,0)
^9002313.9101^1^1^3031212
"DATA",9002313.91,193,10,1,0)
S BPS("X")=""
"DATA",9002313.91,193,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,193,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,194,0)
530^^PREVIOUS DATE OF FILL^A/N^^^^8^N
"DATA",9002313.91,194,5)
FU^8
"DATA",9002313.91,194,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,194,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,194,25,0)
^^1^1^3031216^
"DATA",9002313.91,194,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X"))
"DATA",9002313.91,194,30,0)
^^1^1^3031216^
"DATA",9002313.91,194,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,5)=BPS("X")
"DATA",9002313.91,195,0)
531^^QUANTITY OF PREVIOUS FILL^N^^^^10^N
"DATA",9002313.91,195,5)
FV^8
"DATA",9002313.91,195,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,195,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,195,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,195,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,195,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,195,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,6)=BPS("X")
"DATA",9002313.91,196,0)
532^^DATABASE INDICATOR^A/N^^^^1^A/N
"DATA",9002313.91,196,5)
FW^1
"DATA",9002313.91,196,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,196,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,196,25,0)
^9002313.9104^1^1^3031210^^^
"DATA",9002313.91,196,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,196,30,0)
^9002313.9103^1^1^3031210^^^
"DATA",9002313.91,196,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,BPS(9002313.020101),0),U,7)=BPS("X")
"DATA",9002313.91,197,0)
533^^OTHER PRESCRIBER INDICATOR^A/N^^^^1^N
"DATA",9002313.91,197,5)
FX^1
"DATA",9002313.91,197,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,197,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,197,25,0)
^^1^1^3031212^
"DATA",9002313.91,197,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,197,30,0)
^^1^1^3031212^
"DATA",9002313.91,197,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,8)=BPS("X")
"DATA",9002313.91,199,0)
544^^DUR FREE TEXT MESSAGE^A/N^^^^30^A/N
"DATA",9002313.91,199,5)
FY^30
"DATA",9002313.91,199,10,0)
^9002313.9101^1^1^3101116^
"DATA",9002313.91,199,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,199,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,199,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,199,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,199,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,9)=BPS("X")
"DATA",9002313.91,200,0)
545^^NETWORK REIMBURSEMENT ID^A/N^^^^10^A/N
"DATA",9002313.91,200,5)
2F^10
"DATA",9002313.91,200,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,200,10,1,0)
S BPS("X")=""
"DATA",9002313.91,200,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,200,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,201,0)
546^^REJECTED FLD OCCURRENCE INDCTR^A/N^^^^2^N
"DATA",9002313.91,201,5)
4F^2
"DATA",9002313.91,201,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,201,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,201,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,201,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,201,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,201,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),511,DUR,0),U,2)=BPS("X")
"DATA",9002313.91,202,0)
547^^APPROVED MESSAGE CODE COUNT^A/N^^^^1^N
"DATA",9002313.91,202,5)
5F^1
"DATA",9002313.91,202,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,202,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,202,25,0)
^^1^1^3031205^
"DATA",9002313.91,202,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,202,30,0)
^^1^1^3031205^
"DATA",9002313.91,202,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),540),U,7)=BPS("X")
"DATA",9002313.91,203,0)
548^^APPROVED MESSAGE CODE^A/N^^^^3^A/N
"DATA",9002313.91,203,5)
6F^3
"DATA",9002313.91,203,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,203,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,203,25,0)
^9002313.9104^1^1^3031210^^^
"DATA",9002313.91,203,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,203,30,0)
^9002313.9103^1^1^3031210^^^
"DATA",9002313.91,203,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),548,0),B,4)=BPS("X")
"DATA",9002313.91,204,0)
549^^HELP DESK PHONE NUMBER QUAL^A/N^^^^2^A/N
"DATA",9002313.91,204,1)
HELP DESK TELEPHONE NUMBER QUALIFER
"DATA",9002313.91,204,5)
7F^2
"DATA",9002313.91,204,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,204,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,204,25,0)
^^1^1^3031210^
"DATA",9002313.91,204,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,204,30,0)
^^1^1^3031210^
"DATA",9002313.91,204,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),540),U,9)=BPS("X")
"DATA",9002313.91,205,0)
550^^HELP DESK TELEPHONE NUMBER^A/N^^^^18^A/N
"DATA",9002313.91,205,5)
8F^18
"DATA",9002313.91,205,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,205,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,205,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,205,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),18)
"DATA",9002313.91,205,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,205,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),540),U,10)=BPS("X")
"DATA",9002313.91,206,0)
551^^PREFERRED PRODUCT COUNT^A/N^^^^1^N
"DATA",9002313.91,206,5)
9F^1
"DATA",9002313.91,206,10,0)
^9002313.9101^1^1^3031216
"DATA",9002313.91,206,10,1,0)
S BPS("X")=""
"DATA",9002313.91,206,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,206,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,207,0)
552^^PREFERRED PRODUCT ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,207,5)
AP^2
"DATA",9002313.91,207,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,207,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,207,25,0)
^^1^1^3031216^
"DATA",9002313.91,207,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,207,30,0)
^^1^1^3031216^
"DATA",9002313.91,207,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,1)=BPS("X")
"DATA",9002313.91,208,0)
553^^PREFERRED PRODUCT ID^A/N^^^^19^A/N
"DATA",9002313.91,208,5)
AR^19
"DATA",9002313.91,208,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,208,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,208,25,0)
^^1^1^3031216^
"DATA",9002313.91,208,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,208,30,0)
^^1^1^3031216^
"DATA",9002313.91,208,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,2)=BPS("X")
"DATA",9002313.91,209,0)
554^^PREFERRED PRODUCT INCENTIVE^A/N^^^^8^D
"DATA",9002313.91,209,5)
AS^8
"DATA",9002313.91,209,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,209,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,209,25,0)
^^1^1^3031216^
"DATA",9002313.91,209,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,209,30,0)
^^1^1^3031216^
"DATA",9002313.91,209,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,3)=BPS("X")
"DATA",9002313.91,210,0)
555^^PREF PRODUCT COST SHARE INCNTV^A/N^^^^8^D
"DATA",9002313.91,210,5)
AT^8
"DATA",9002313.91,210,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,210,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,210,25,0)
^9002313.9104^1^1^3031216^^
"DATA",9002313.91,210,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,210,30,0)
^9002313.9103^1^1^3031216^^
"DATA",9002313.91,210,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,4)=BPS("X")
"DATA",9002313.91,211,0)
556^^PREFERRED PRODUCT DESCRIPTION^A/N^^^^40^A/N
"DATA",9002313.91,211,5)
AU^40
"DATA",9002313.91,211,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,211,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,211,25,0)
^^1^1^3031216^
"DATA",9002313.91,211,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,211,30,0)
^^1^1^3031216^
"DATA",9002313.91,211,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,5)=BPS("X")
"DATA",9002313.91,212,0)
557^^TAX EXEMPT INDICATOR^A/N^^^^1^A/N
"DATA",9002313.91,212,5)
AV^1
"DATA",9002313.91,212,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,212,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,212,25,0)
^^1^1^3031217^
"DATA",9002313.91,212,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,212,30,0)
^^1^1^3031217^
"DATA",9002313.91,212,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),550),U,7)
"DATA",9002313.91,213,0)
558^^FLAT SALES TAX AMOUNT PAID^A/N^^^^8^D
"DATA",9002313.91,213,5)
AW^8
"DATA",9002313.91,213,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,213,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,213,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,213,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,213,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,213,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),550),U,8)=BPS("X")
"DATA",9002313.91,214,0)
559^^PERCENTAGE SALES TAX AMT PAID^A/N^^^^8^D
"DATA",9002313.91,214,5)
AX^8
"DATA",9002313.91,214,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,214,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,214,25,0)
^9002313.9104^1^1^3031212^^
"DATA",9002313.91,214,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,214,30,0)
^9002313.9103^1^1^3031212^^^
"DATA",9002313.91,214,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),550),U,9)=BPS("X")
"DATA",9002313.91,215,0)
560^^PERCENTAGE SALES TAX RATE PAID^A/N^^^^7^D
"DATA",9002313.91,215,5)
AY^8
"DATA",9002313.91,215,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,215,10,1,0)
S BPS("X")=""
"DATA",9002313.91,215,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,215,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),7)
"DATA",9002313.91,216,0)
561^^PERCENT SALES TAX BASIS PAID^A/N^^^^2^A/N
"DATA",9002313.91,216,5)
AZ^8
"DATA",9002313.91,216,10,0)
^9002313.9101^1^1^3031212
"DATA",9002313.91,216,10,1,0)
S BPS("X")=""
"DATA",9002313.91,216,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,216,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,217,0)
562^^PROFESSIONAL SERVICE FEE PAID^A/N^^^^8^D
"DATA",9002313.91,217,5)
J1^8
"DATA",9002313.91,217,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,217,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,217,25,0)
^^1^1^3031217^
"DATA",9002313.91,217,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,217,30,0)
^^1^1^3031217^
"DATA",9002313.91,217,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),560),U,2)=BPS("X")
"DATA",9002313.91,218,0)
563^^OTHER AMOUNT PAID COUNT^N^^^^1^N
"DATA",9002313.91,218,5)
J2^1
"DATA",9002313.91,218,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,218,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,218,25,0)
^^1^1^3031212^
"DATA",9002313.91,218,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,218,30,0)
^^1^1^3031212^
"DATA",9002313.91,218,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),563.01,DUR,0)),U,1)
"DATA",9002313.91,219,0)
564^^OTHER AMOUNT PAID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,219,5)
J3^2
"DATA",9002313.91,219,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,219,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,219,25,0)
^^1^1^3031212^
"DATA",9002313.91,219,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,219,30,0)
^^1^1^3031212^
"DATA",9002313.91,219,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),563.01,DUR,1),U,1)=BPS("X")
"DATA",9002313.91,220,0)
565^^OTHER AMOUNT PAID^A/N^^^^8^D
"DATA",9002313.91,220,5)
J4^8
"DATA",9002313.91,220,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,220,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,220,25,0)
^9002313.9104^1^1^3031212^^
"DATA",9002313.91,220,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,220,30,0)
^9002313.9103^1^1^3031212^^
"DATA",9002313.91,220,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),563.01,DUR,1),U,2)=BPS("X")
"DATA",9002313.91,221,0)
566^^OTHER PAYER AMOUNT RECOGNIZED^A/N^^^^8^D
"DATA",9002313.91,221,5)
J5^8
"DATA",9002313.91,221,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,221,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,221,25,0)
^^1^1^3090304^
"DATA",9002313.91,221,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,221,30,0)
^^1^1^3090304^
"DATA",9002313.91,221,30,1,0)
D SET566^BPSFLD01
"DATA",9002313.91,222,0)
567^^DUR/PPS RESPONSE CODE COUNTER^N^^^^1^N
"DATA",9002313.91,222,5)
J6^1
"DATA",9002313.91,222,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,222,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,222,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,222,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,222,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,222,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,1)=BPS("X")
"DATA",9002313.91,223,0)
568^^PAYER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,223,5)
J7^2
"DATA",9002313.91,223,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,223,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,223,25,0)
^^1^1^3031212^
"DATA",9002313.91,223,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,223,30,0)
^^1^1^3031212^
"DATA",9002313.91,223,30,1,0)
S $P(^BPSR(BPS(9002313.02),560),U,8)
"DATA",9002313.91,224,0)
569^^PAYER ID^A/N^^^^10^A/N
"DATA",9002313.91,224,5)
J8^10
"DATA",9002313.91,224,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,224,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,224,25,0)
^9002313.9104^1^1^3031212^^
"DATA",9002313.91,224,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,224,30,0)
^9002313.9103^1^1^3031212^^
"DATA",9002313.91,224,30,1,0)
S $P(^BPSR(BPS(9002313.02),560),U,9)=BPS("X")
"DATA",9002313.91,225,0)
600^^UNIT OF MEASURE^A/N^^^^2^A/N
"DATA",9002313.91,225,5)
28^2
"DATA",9002313.91,225,10,0)
^9002313.9101^1^1^3070625
"DATA",9002313.91,225,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Unit of Measure"))
"DATA",9002313.91,225,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,225,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,225,25,0)
^9002313.9104^1^1^3070620^
"DATA",9002313.91,225,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,225,30,0)
^9002313.9103^1^1^3070620^
"DATA",9002313.91,225,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),600),U,1)=""
"DATA",9002313.91,240,0)
478^^OTHER AMT CLAIMED SBMTTD COUNT^N^^^^1^N
"DATA",9002313.91,240,1)
OTHER AMOUNT CLAIMED SUBMITTED COUNT
"DATA",9002313.91,240,5)
H7^1
"DATA",9002313.91,240,10,0)
^9002313.9101^1^1^3101006^^^
"DATA",9002313.91,240,10,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,240,20,0)
^9002313.9102^1^1^3101006^^^
"DATA",9002313.91,240,20,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,240,25,0)
^9002313.9104^1^1^3101006^^
"DATA",9002313.91,240,25,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,240,30,0)
^9002313.9103^1^1^3101006^^
"DATA",9002313.91,240,30,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,241,0)
479^^OTHER AMT CLAIMED SUBM QLFR^A/N^^^^2^A/N
"DATA",9002313.91,241,1)
OTHER AMOUNT CLAIMED SUBMITTED QUALIFIER
"DATA",9002313.91,241,5)
H8^2
"DATA",9002313.91,241,10,0)
^9002313.9101^1^1^3101006^^^
"DATA",9002313.91,241,10,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,241,20,0)
^9002313.9102^1^1^3101006^^^
"DATA",9002313.91,241,20,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,241,25,0)
^9002313.9104^1^1^3101006^^
"DATA",9002313.91,241,25,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,241,30,0)
^9002313.9103^1^1^3101006^^
"DATA",9002313.91,241,30,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,242,0)
463^^INTERMEDIARY AUTH TYPE ID^N^^^^2^N
"DATA",9002313.91,242,1)
INTERMEDIARY AUTHORIZATION TYPE ID
"DATA",9002313.91,242,5)
EW^2
"DATA",9002313.91,242,10,0)
^^2^2^3110727^
"DATA",9002313.91,242,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Intermediary Auth Type ID"))
"DATA",9002313.91,242,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,242,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,242,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,242,25,0)
^9002313.9104^1^1^3030823^^^^
"DATA",9002313.91,242,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,242,30,0)
^9002313.9103^1^1^3030823^^
"DATA",9002313.91,242,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,3)=BPS("X")
"DATA",9002313.91,265,0)
451^^COMPOUND DISP UNIT FORM INDCTR^N^^^^1^N
"DATA",9002313.91,265,1)
COMPOUND DISPENSING UNIT FORM INDICATOR
"DATA",9002313.91,265,5)
EG^1
"DATA",9002313.91,265,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,265,10,1,0)
S BPS("X")=""
"DATA",9002313.91,265,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,265,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,265,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,265,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,266,0)
450^^COMPOUND DOSAGE FORM DESC CODE^A/N^^^^15^A/N
"DATA",9002313.91,266,1)
COMPOUND DOSAGE FORM DESCRIPTION CODE
"DATA",9002313.91,266,5)
EF^15
"DATA",9002313.91,266,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,266,10,1,0)
S BPS("X")=""
"DATA",9002313.91,266,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,266,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,266,25,0)
^9002313.9104^1^1^3040107^^^^
"DATA",9002313.91,266,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,266,30,0)
^9002313.9103^1^1^3040107^^^^
"DATA",9002313.91,266,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,10)=BPS("X")
"DATA",9002313.91,267,0)
490^^COMP INGRED BASIS COST DETERM^A/N^^^^2^A/N
"DATA",9002313.91,267,1)
COMPOUND INGREDIENT BASIS OF COST DETERMINATION
"DATA",9002313.91,267,5)
UE^2
"DATA",9002313.91,267,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,267,10,1,0)
S BPS("X")=""
"DATA",9002313.91,267,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,267,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,267,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,267,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,268,0)
447^^COMPOUND INGREDIENT COMP COUNT^N^^^^2^N
"DATA",9002313.91,268,1)
COMPOUND INGREDIENT COMPONENT COUNT
"DATA",9002313.91,268,5)
EC^2
"DATA",9002313.91,268,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,268,10,1,0)
S BPS("X")=""
"DATA",9002313.91,268,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,268,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,268,25,0)
^9002313.9104^1^1^3040107^^^^
"DATA",9002313.91,268,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,268,30,0)
^9002313.9103^1^1^3040107^^^^
"DATA",9002313.91,268,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,7)=BPS("X")
"DATA",9002313.91,269,0)
449^^COMPOUND INGREDIENT DRUG COST^N^^^^8^D
"DATA",9002313.91,269,5)
EE^8
"DATA",9002313.91,269,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,269,10,1,0)
S BPS("X")=""
"DATA",9002313.91,269,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,269,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,269,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,269,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,271,0)
489^^COMPOUND PRODUCT ID^A/N^^^^19^A/N
"DATA",9002313.91,271,5)
TE^19
"DATA",9002313.91,271,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,271,10,1,0)
S BPS("X")=""
"DATA",9002313.91,271,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,271,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,271,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,271,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,272,0)
488^^COMPOUND PRODUCT ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,272,5)
RE^2
"DATA",9002313.91,272,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,272,10,1,0)
S BPS("X")=""
"DATA",9002313.91,272,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,272,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,272,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,272,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,273,0)
452^^COMPOUND ROUTE OF ADMIN^N^^^^2^N
"DATA",9002313.91,273,5)
EH^2
"DATA",9002313.91,273,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,273,10,1,0)
S BPS("X")=""
"DATA",9002313.91,273,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,273,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,273,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,273,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,308,0)
448^^COMPOUND INGREDIENT QUANTITY^N^^^^10^N
"DATA",9002313.91,308,5)
ED^10
"DATA",9002313.91,308,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,308,10,1,0)
S BPS("X")=""
"DATA",9002313.91,308,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,308,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,308,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,308,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,324,0)
494^^MEASUREMENT DATE^A/N^^^^8^N
"DATA",9002313.91,324,5)
ZE^8
"DATA",9002313.91,324,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,324,10,1,0)
S BPS("X")=""
"DATA",9002313.91,324,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,324,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,324,25,0)
^9002313.9104^1^1^3040224^
"DATA",9002313.91,324,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,325,0)
496^^MEASUREMENT DIMENSION^A/N^^^^2^A/N
"DATA",9002313.91,325,5)
H2^2
"DATA",9002313.91,325,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,325,10,1,0)
S BPS("X")=""
"DATA",9002313.91,325,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,325,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,325,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,325,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,326,0)
495^^MEASUREMENT TIME^N^^^^4^N
"DATA",9002313.91,326,5)
H1^4
"DATA",9002313.91,326,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,326,10,1,0)
S BPS("X")=""
"DATA",9002313.91,326,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,326,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,326,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,326,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,327,0)
497^^MEASUREMENT UNIT^A/N^^^^2^A/N
"DATA",9002313.91,327,5)
H3^2
"DATA",9002313.91,327,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,327,10,1,0)
S BPS("X")=""
"DATA",9002313.91,327,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,327,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,327,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,327,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,328,0)
499^^MEASUREMENT VALUE^A/N^^^^15^A/N
"DATA",9002313.91,328,5)
H4^15
"DATA",9002313.91,328,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,328,10,1,0)
S BPS("X")=""
"DATA",9002313.91,328,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,328,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,328,25,0)
^9002313.9104^1^1^3040224^^^
"DATA",9002313.91,328,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,329,0)
990^^OTHER PAYER BIN NUMBER^N^^^^6^N
"DATA",9002313.91,329,5)
MG^6
"DATA",9002313.91,329,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,329,10,1,0)
S BPS("X")=""
"DATA",9002313.91,329,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,329,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,329,30,0)
^9002313.9103^1^1^3101101^
"DATA",9002313.91,329,30,1,0)
S $P(^BPSC(BPS(9002313.02),980),U,10)=""
"DATA",9002313.91,330,0)
991^^OTHER PAYER PROC CONTROL NUM^A/N^^^^10^A/N
"DATA",9002313.91,330,1)
OTHER PAYER PROCESSOR CONTROL NUMBER
"DATA",9002313.91,330,5)
MH^10
"DATA",9002313.91,330,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,330,10,1,0)
S BPS("X")=""
"DATA",9002313.91,330,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,330,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,330,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,330,30,1,0)
S $P(^BPSC(BPS(9002313.02),990),U,1)=""
"DATA",9002313.91,331,0)
356^^OTHER PAYER CARDHOLDER ID^A/N^^^^20^A/N
"DATA",9002313.91,331,5)
NU^20
"DATA",9002313.91,331,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,331,10,1,0)
S BPS("X")=""
"DATA",9002313.91,331,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,331,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,331,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,331,30,1,0)
S $P(^BPSC(BPS(9002313.02),350),U,6)=""
"DATA",9002313.91,332,0)
992^^OTHER PAYER GROUP ID^A/N^^^^15^A/N
"DATA",9002313.91,332,5)
MJ^15
"DATA",9002313.91,332,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,332,10,1,0)
S BPS("X")=""
"DATA",9002313.91,332,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,332,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,332,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,332,30,1,0)
S $P(^BPSC(BPS(9002313.02),990),U,2)=""
"DATA",9002313.91,333,0)
359^^MEDIGAP ID^A/N^^^^20^A/N
"DATA",9002313.91,333,5)
2A^20
"DATA",9002313.91,333,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,333,10,1,0)
S BPS("X")=""
"DATA",9002313.91,333,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,333,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,333,30,0)
^9002313.9103^1^1^3100923^^
"DATA",9002313.91,333,30,1,0)
S $P(^BPSC(BPS(9002313.02),350),U,9)=""
"DATA",9002313.91,334,0)
360^^MEDICAID INDICATOR^N^^^^2^A/N
"DATA",9002313.91,334,5)
2B^2
"DATA",9002313.91,334,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,334,10,1,0)
S BPS("X")=""
"DATA",9002313.91,334,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,334,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,334,30,0)
^9002313.9103^1^1^3101101^
"DATA",9002313.91,334,30,1,0)
S $P(^BPSC(BPS(9002313.02),350),U,10)=""
"DATA",9002313.91,335,0)
361^^PROVIDER ACCEPT ASSGNMT INDCTR^A/N^^^^1^A/N
"DATA",9002313.91,335,1)
PROVIDER ACCEPT ASSIGNMENT INDICATOR
"DATA",9002313.91,335,5)
2D^1
"DATA",9002313.91,335,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,335,10,1,0)
S BPS("X")="Y"
"DATA",9002313.91,335,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,335,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,335,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,335,30,1,0)
S $P(^BPSC(BPS(9002313.02),360),U,1)=$G(BPS("X"))
"DATA",9002313.91,336,0)
997^^CMS PART D DEFND QLFD FACILITY^A/N^^^^1^A/N
"DATA",9002313.91,336,1)
CMS PART D DEFINED QUALIFIED FACILITY
"DATA",9002313.91,336,5)
G2^1
"DATA",9002313.91,336,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,336,10,1,0)
S BPS("X")="N"
"DATA",9002313.91,336,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,336,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,336,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,336,30,1,0)
S $P(^BPSC(BPS(9002313.02),990),U,7)=$G(BPS("X"))
"DATA",9002313.91,337,0)
115^^MEDICAID ID NUMBER^A/N^^^^20^A/N
"DATA",9002313.91,337,5)
N5^20
"DATA",9002313.91,337,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,337,10,1,0)
S BPS("X")=""
"DATA",9002313.91,337,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,337,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,337,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,337,30,1,0)
S $P(^BPSC(BPS(9002313.02),110),U,5)=""
"DATA",9002313.91,338,0)
116^^MEDICAID AGENCY NUMBER^A/N^^^^15^A/N
"DATA",9002313.91,338,5)
N6^15
"DATA",9002313.91,338,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,338,10,1,0)
S BPS("X")=""
"DATA",9002313.91,338,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,338,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,338,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,338,30,1,0)
S $P(^BPSC(BPS(9002313.02),110),U,6)=""
"DATA",9002313.91,339,0)
384^^PATIENT RESIDENCE^N^^^^2^N
"DATA",9002313.91,339,5)
4X^2
"DATA",9002313.91,339,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,339,10,1,0)
S BPS("X")=$G(BPS("Patient","Patient Residence"))
"DATA",9002313.91,339,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,339,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,339,30,0)
^9002313.9103^1^1^3101007^^^^
"DATA",9002313.91,339,30,1,0)
S $P(^BPSC(BPS(9002313.02),380),U,4)=$G(BPS("X"))
"DATA",9002313.91,340,0)
354^^SUBMISSION CLARIF CODE COUNT^N^^^^1^N
"DATA",9002313.91,340,1)
SUBMISSION CLARIFICATION CODE COUNT
"DATA",9002313.91,340,5)
NX^2
"DATA",9002313.91,340,10,0)
^9002313.9101^1^1^3101006^^
"DATA",9002313.91,340,10,1,0)
; fields 354 & 420 handled by FLD420^BPSOSSG (see SET CODE in field 420)
"DATA",9002313.91,340,20,0)
^9002313.9102^1^1^3101006^^
"DATA",9002313.91,340,20,1,0)
; fields 354 & 420 handled by FLD420^BPSOSSG (see SET CODE in field 420)
"DATA",9002313.91,340,25,0)
^9002313.9104^1^1^3101006^^
"DATA",9002313.91,340,25,1,0)
; fields 354 & 420 handled by FLD420^BPSOSSG (see SET CODE in field 420)
"DATA",9002313.91,340,30,0)
^9002313.9103^1^1^3101006^^^^
"DATA",9002313.91,340,30,1,0)
; fields 354 & 420 handled by FLD420^BPSOSSG (see SET CODE in field 420)
"DATA",9002313.91,341,0)
357^^DELAY REASON CODE^N^^^^2^N
"DATA",9002313.91,341,5)
NV^2
"DATA",9002313.91,341,10,0)
^9002313.9101^1^1^3101007^^
"DATA",9002313.91,341,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Delay Reason Code"))
"DATA",9002313.91,341,20,0)
^9002313.9102^1^1^3101012^
"DATA",9002313.91,341,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,341,30,0)
^9002313.9103^1^1^3101007^^
"DATA",9002313.91,341,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),350),U,7)=$S($G(BPS("X"))="NV00":"",1:$G(BPS("X")))
"DATA",9002313.91,342,0)
880^^TRANSACTION REFERENCE NUMBER^A/N^^^^10^A/N
"DATA",9002313.91,342,5)
K5^10
"DATA",9002313.91,342,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,342,10,1,0)
S BPS("X")=""
"DATA",9002313.91,342,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,342,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,342,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,342,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),870),U,10)=""
"DATA",9002313.91,343,0)
391^^PATIENT ASSIGNMENT INDICATOR^A/N^^^^1^A/N
"DATA",9002313.91,343,1)
PATIENT ASSIGNMENT INDICATOR (DIRECT MEMBER REIMBURSEMENT INDICATOR)
"DATA",9002313.91,343,5)
MT^1
"DATA",9002313.91,343,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,343,10,1,0)
S BPS("X")="Y"
"DATA",9002313.91,343,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,343,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,343,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,343,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),390),U,1)=$G(BPS("X"))
"DATA",9002313.91,344,0)
995^^ROUTE OF ADMINISTRATION^A/N^^^^11^A/N
"DATA",9002313.91,344,5)
E2^1
"DATA",9002313.91,344,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,344,10,1,0)
S BPS("X")=""
"DATA",9002313.91,344,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,344,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,344,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,344,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),990),U,5)=$G(BPS("X"))
"DATA",9002313.91,345,0)
996^^COMPOUND TYPE^A/N^^^^2^A/N
"DATA",9002313.91,345,5)
G1^2
"DATA",9002313.91,345,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,345,10,1,0)
S BPS("X")=""
"DATA",9002313.91,345,20,0)
^9002313.9102^1^1^3101206^
"DATA",9002313.91,345,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,345,30,0)
^^1^1^3121128
"DATA",9002313.91,345,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),990),U,6)=""
"DATA",9002313.91,346,0)
114^^MEDICAID SUBROGATION ICN/TCN^A/N^^^^20^A/N
"DATA",9002313.91,346,1)
MEDICAID SUBROGATION INTERNAL CONTROL NUMBER/TRANSACTION CONTROL NUMBER (ICN/TCN)
"DATA",9002313.91,346,5)
N4^20
"DATA",9002313.91,346,10,0)
^9002313.9101^1^1^3101110^
"DATA",9002313.91,346,10,1,0)
S BPS("X")=""
"DATA",9002313.91,346,20,0)
^9002313.9102^1^1^3101110^
"DATA",9002313.91,346,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,346,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,346,30,1,0)
S $P(^BPSC(BPS(9002313.02),110),U,4)=""
"DATA",9002313.91,347,0)
147^^PHARMACY SERVICE TYPE^N^^^^2^N
"DATA",9002313.91,347,5)
U7^2
"DATA",9002313.91,347,10,0)
^9002313.9101^1^1^3101007^^
"DATA",9002313.91,347,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Pharmacy Service Type"))
"DATA",9002313.91,347,20,0)
^9002313.9102^1^1^3101007^^
"DATA",9002313.91,347,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,347,30,0)
^9002313.9103^1^1^3101007^^^^
"DATA",9002313.91,347,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),140),U,7)=$G(BPS("X"))
"DATA",9002313.91,348,0)
364^^PRESCRIBER FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,348,5)
2J^12
"DATA",9002313.91,348,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,348,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber First Name"))
"DATA",9002313.91,348,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,348,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,348,30,0)
^9002313.9103^1^1^3101101^^^
"DATA",9002313.91,348,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,4)=$G(BPS("X"))
"DATA",9002313.91,349,0)
365^^PRESCRIBER STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,349,5)
2K^30
"DATA",9002313.91,349,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,349,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Street Address"))
"DATA",9002313.91,349,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,349,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,349,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,349,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,5)=$G(BPS("X"))
"DATA",9002313.91,350,0)
366^^PRESCRIBER CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,350,5)
2M^20
"DATA",9002313.91,350,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,350,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber City Address"))
"DATA",9002313.91,350,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,350,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,350,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,350,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,6)=$G(BPS("X"))
"DATA",9002313.91,351,0)
367^^PRESCRIBER STATE/PROV ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,351,1)
PRESCRIBER STATE/PROVINCE ADDRESS
"DATA",9002313.91,351,5)
2N^2
"DATA",9002313.91,351,10,0)
^9002313.9101^1^1^3101029^^
"DATA",9002313.91,351,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber State/Province Address"))
"DATA",9002313.91,351,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,351,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,351,30,0)
^9002313.9103^1^1^3101101^^^
"DATA",9002313.91,351,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,7)=$G(BPS("X"))
"DATA",9002313.91,352,0)
368^^PRESCRIBER ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,352,5)
2P^2
"DATA",9002313.91,352,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,352,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Zip/Postal Zone"))
"DATA",9002313.91,352,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,352,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,352,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,352,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,8)=$G(BPS("X"))
"DATA",9002313.91,353,0)
993^^INTERNAL CONTROL NUMBER^A/N^^^^30^A/N
"DATA",9002313.91,353,5)
A7^30
"DATA",9002313.91,353,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,353,10,1,0)
S BPS("X")=""
"DATA",9002313.91,353,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,353,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,353,30,0)
^9002313.9103^1^1^3101029^
"DATA",9002313.91,353,30,1,0)
; This field currently not implemented
"DATA",9002313.91,354,0)
392^^BENEFIT STAGE COUNT^N^^^^1^N
"DATA",9002313.91,354,5)
MU^1
"DATA",9002313.91,354,10,0)
^^1^1^3110727^
"DATA",9002313.91,354,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,354,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,354,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,354,30,0)
^^1^1^3110727^
"DATA",9002313.91,354,30,1,0)
D SET392^BPSFLD01
"DATA",9002313.91,355,0)
393^^BENEFIT STAGE QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,355,5)
MV^2
"DATA",9002313.91,355,10,0)
^^1^1^3110727^
"DATA",9002313.91,355,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,355,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,355,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,355,30,0)
^^1^1^3110727^
"DATA",9002313.91,355,30,1,0)
D SET393^BPSFLD01
"DATA",9002313.91,356,0)
394^^BENEFIT STAGE AMOUNT^N^^^^8^D
"DATA",9002313.91,356,5)
MW^8
"DATA",9002313.91,356,10,0)
^^1^1^3110727^
"DATA",9002313.91,356,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,356,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,356,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,356,30,0)
^^1^1^3110727^
"DATA",9002313.91,356,30,1,0)
D SET394^BPSFLD01
"DATA",9002313.91,357,0)
117^^BILLING ENTITY TYPE INDICATOR^N^^^^2^N
"DATA",9002313.91,357,5)
TR^2
"DATA",9002313.91,357,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,357,10,1,0)
S BPS("X")=""
"DATA",9002313.91,357,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,357,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,357,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,357,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,7)=""
"DATA",9002313.91,358,0)
118^^PAY TO QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,358,5)
TS^2
"DATA",9002313.91,358,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,358,10,1,0)
S BPS("X")=""
"DATA",9002313.91,358,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,358,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,358,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,358,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,8)=""
"DATA",9002313.91,359,0)
119^^PAY TO ID^A/N^^^^15^A/N
"DATA",9002313.91,359,5)
TT^15
"DATA",9002313.91,359,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,359,10,1,0)
S BPS("X")=""
"DATA",9002313.91,359,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,359,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,359,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,359,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,9)=""
"DATA",9002313.91,360,0)
120^^PAY TO NAME^A/N^^^^20^A/N
"DATA",9002313.91,360,5)
TU^20
"DATA",9002313.91,360,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,360,10,1,0)
S BPS("X")=""
"DATA",9002313.91,360,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,360,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,360,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,360,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,10)=""
"DATA",9002313.91,361,0)
121^^PAY TO STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,361,5)
TV^30
"DATA",9002313.91,361,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,361,10,1,0)
S BPS("X")=""
"DATA",9002313.91,361,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,361,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,361,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,361,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,1)=""
"DATA",9002313.91,362,0)
122^^PAY TO CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,362,5)
TW^20
"DATA",9002313.91,362,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,362,10,1,0)
S BPS("X")=""
"DATA",9002313.91,362,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,362,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,362,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,362,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,2)=""
"DATA",9002313.91,363,0)
124^^PAY TO ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,363,5)
TY^15
"DATA",9002313.91,363,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,363,10,1,0)
S BPS("X")=""
"DATA",9002313.91,363,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,363,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,363,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,363,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,4)=""
"DATA",9002313.91,364,0)
125^^GENERIC EQUIV PROD ID QLFR^A/N^^^^2^A/N
"DATA",9002313.91,364,1)
GENERIC EQUIVALENT PRODUCT ID QUALIFIER
"DATA",9002313.91,364,5)
TZ^2
"DATA",9002313.91,364,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,364,10,1,0)
S BPS("X")=""
"DATA",9002313.91,364,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,364,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,364,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,364,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,5)=""
"DATA",9002313.91,365,0)
126^^GENERIC EQUIVALENT PRODUCT ID^A/N^^^^19^A/N
"DATA",9002313.91,365,5)
UA^19
"DATA",9002313.91,365,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,365,10,1,0)
S BPS("X")=""
"DATA",9002313.91,365,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,365,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,365,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,365,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,6)=""
"DATA",9002313.91,366,0)
113^^MEDICAID PAID AMOUNT^N^^^^8^D
"DATA",9002313.91,366,5)
N3^8
"DATA",9002313.91,366,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,366,10,1,0)
S BPS("X")=""
"DATA",9002313.91,366,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,366,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,366,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,366,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,3)=""
"DATA",9002313.91,367,0)
362^^COMPOUND INGRED MOD CODE CNT^N^^^^2^N
"DATA",9002313.91,367,1)
COMPOUND INGREDIENT MODIFIER CODE COUNT
"DATA",9002313.91,367,5)
2G^2
"DATA",9002313.91,367,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,367,10,1,0)
S BPS("X")=""
"DATA",9002313.91,367,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,367,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,367,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,367,30,1,0)
; This field currently not implemented
"DATA",9002313.91,368,0)
363^^COMPOUND INGRED MODIFIER CODE^A/N^^^^2^A/N
"DATA",9002313.91,368,1)
COMPOUND INGREDIENT MODIFIER CODE
"DATA",9002313.91,368,5)
2H^2
"DATA",9002313.91,368,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,368,10,1,0)
S BPS("X")=""
"DATA",9002313.91,368,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,368,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,368,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,368,30,1,0)
; This field currently not implemented
"DATA",9002313.91,369,0)
369^^ADDITIONAL DCMNTN TYPE ID^A/N^^^^3^A/N
"DATA",9002313.91,369,1)
ADDITIONAL DOCUMENTATION TYPE ID
"DATA",9002313.91,369,5)
2Q^3
"DATA",9002313.91,369,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,369,10,1,0)
S BPS("X")=""
"DATA",9002313.91,369,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,369,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,369,30,0)
^9002313.9103^1^1^3101206^^
"DATA",9002313.91,369,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,9)=""
"DATA",9002313.91,370,0)
370^^LENGTH OF NEED^N^^^^3^N
"DATA",9002313.91,370,5)
2R^3
"DATA",9002313.91,370,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,370,10,1,0)
S BPS("X")=""
"DATA",9002313.91,370,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,370,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,370,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,370,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,10)=""
"DATA",9002313.91,371,0)
371^^LENGTH OF NEED QUALIFIER^N^^^^2^N
"DATA",9002313.91,371,5)
2S^3
"DATA",9002313.91,371,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,371,10,1,0)
S BPS("X")=""
"DATA",9002313.91,371,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,371,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,371,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,371,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,1)=""
"DATA",9002313.91,372,0)
372^^PRESCRIBER/SUPPLIER DT SIGNED^N^^^^8^N
"DATA",9002313.91,372,1)
PRESCRIBER/SUPPLIER DATE SIGNED
"DATA",9002313.91,372,5)
2T^9
"DATA",9002313.91,372,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,372,10,1,0)
S BPS("X")=""
"DATA",9002313.91,372,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,372,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,372,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,372,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,2)=""
"DATA",9002313.91,373,0)
373^^REQUEST STATUS^A/N^^^^1^A/N
"DATA",9002313.91,373,5)
2U^1
"DATA",9002313.91,373,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,373,10,1,0)
S BPS("X")=""
"DATA",9002313.91,373,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,373,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,373,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,373,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,3)=""
"DATA",9002313.91,374,0)
374^^REQUEST PERIOD BEGIN DATE^N^^^^8^N
"DATA",9002313.91,374,5)
2V^8
"DATA",9002313.91,374,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,374,10,1,0)
S BPS("X")=""
"DATA",9002313.91,374,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,374,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,374,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,374,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,4)=""
"DATA",9002313.91,375,0)
375^^REQ PERIOD RECERT/REVISED DT^N^^^^8^N
"DATA",9002313.91,375,1)
REQUEST PERIOD RECERT/REVISED DATE
"DATA",9002313.91,375,5)
2W^8
"DATA",9002313.91,375,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,375,10,1,0)
S BPS("X")=""
"DATA",9002313.91,375,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,375,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,375,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,375,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,5)=""
"DATA",9002313.91,376,0)
376^^SUPPORTING DOCUMENTATION^A/N^^^^65^A/N
"DATA",9002313.91,376,5)
2X^65
"DATA",9002313.91,376,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,376,10,1,0)
S BPS("X")=""
"DATA",9002313.91,376,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,376,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),65)
"DATA",9002313.91,376,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,376,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,6)=""
"DATA",9002313.91,377,0)
377^^QUESTION NUMBER/LETTER COUNT^A/N^^^^2^N
"DATA",9002313.91,377,5)
2Z^65
"DATA",9002313.91,377,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,377,10,1,0)
S BPS("X")=""
"DATA",9002313.91,377,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,377,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,378,0)
378^^QUESTION NUMBER/LETTER^A/N^^^^3^A/N
"DATA",9002313.91,378,5)
4B^3
"DATA",9002313.91,378,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,378,10,1,0)
S BPS("X")=""
"DATA",9002313.91,378,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,378,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,378,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,378,30,1,0)
; This field currently not implemented
"DATA",9002313.91,379,0)
379^^QUESTION PERCENT RESPONSE^N^^^^5^N
"DATA",9002313.91,379,5)
4D^5
"DATA",9002313.91,379,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,379,10,1,0)
S BPS("X")=""
"DATA",9002313.91,379,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,379,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),5)
"DATA",9002313.91,379,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,379,30,1,0)
; This field currently not implemented
"DATA",9002313.91,380,0)
380^^QUESTION DATE RESPONSE^N^^^^8^N
"DATA",9002313.91,380,5)
4G^8
"DATA",9002313.91,380,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,380,10,1,0)
S BPS("X")=""
"DATA",9002313.91,380,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,380,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,380,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,380,30,1,0)
; This field currently not implemented
"DATA",9002313.91,381,0)
381^^QUESTION DOLLAR AMT RESPONSE^N^^^^11^D
"DATA",9002313.91,381,1)
QUESTION DOLLAR AMOUNT RESPONSE
"DATA",9002313.91,381,5)
4H^9
"DATA",9002313.91,381,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,381,10,1,0)
S BPS("X")=""
"DATA",9002313.91,381,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,381,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,381,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,381,30,1,0)
; This field currently not implemented
"DATA",9002313.91,382,0)
382^^QUESTION NUMERIC RESPONSE^N^^^^11^N
"DATA",9002313.91,382,5)
4J^11
"DATA",9002313.91,382,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,382,10,1,0)
S BPS("X")=""
"DATA",9002313.91,382,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,382,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,382,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,382,30,1,0)
; This field currently not implemented
"DATA",9002313.91,383,0)
383^^QUESTION ALPHANUMERIC RESPONSE^A/N^^^^30^A/N
"DATA",9002313.91,383,5)
4K^30
"DATA",9002313.91,383,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,383,10,1,0)
S BPS("X")=""
"DATA",9002313.91,383,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,383,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,383,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,383,30,1,0)
; This field currently not implemented
"DATA",9002313.91,384,0)
385^^FACILITY NAME^A/N^^^^30^A/N
"DATA",9002313.91,384,5)
3Q^30
"DATA",9002313.91,384,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,384,10,1,0)
S BPS("X")=""
"DATA",9002313.91,384,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,384,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,384,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,384,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,5)=""
"DATA",9002313.91,385,0)
386^^FACILITY STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,385,5)
3U^30
"DATA",9002313.91,385,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,385,10,1,0)
S BPS("X")=""
"DATA",9002313.91,385,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,385,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,385,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,385,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,6)=""
"DATA",9002313.91,386,0)
387^^FACILITY STATE/PROV ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,386,1)
FACILITY STATE/PROVINCE ADDRESS
"DATA",9002313.91,386,5)
3V^2
"DATA",9002313.91,386,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,386,10,1,0)
S BPS("X")=""
"DATA",9002313.91,386,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,386,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,386,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,386,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,7)=""
"DATA",9002313.91,387,0)
388^^FACILITY CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,387,5)
5J^20
"DATA",9002313.91,387,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,387,10,1,0)
S BPS("X")=""
"DATA",9002313.91,387,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,387,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,387,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,387,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,8)=""
"DATA",9002313.91,388,0)
389^^FACILITY ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,388,5)
6D^16
"DATA",9002313.91,388,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,388,10,1,0)
S BPS("X")=""
"DATA",9002313.91,388,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,388,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,388,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,388,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,9)=""
"DATA",9002313.91,389,0)
390^^NARRATIVE MESSAGE^A/N^^^^200^A/N
"DATA",9002313.91,389,5)
BM^200
"DATA",9002313.91,389,10,0)
^9002313.9101^1^1^3101110^
"DATA",9002313.91,389,10,1,0)
S BPS("X")=""
"DATA",9002313.91,389,20,0)
^9002313.9102^1^1^3101110^
"DATA",9002313.91,389,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),200)
"DATA",9002313.91,389,30,0)
^9002313.9103^1^1^3101110^^
"DATA",9002313.91,389,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),389),U,2)=""
"DATA",9002313.91,390,0)
130^^ADDITIONAL MESSAGE INFO COUNT^N^^^^2^N
"DATA",9002313.91,390,5)
UF^2
"DATA",9002313.91,390,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,390,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,391,0)
132^^ADDITIONAL MSG INFO QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,391,5)
UH^2
"DATA",9002313.91,391,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,391,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,392,0)
131^^ADDITIONAL MSG INFO CONTINUITY^N^^^^1^A/N
"DATA",9002313.91,392,5)
UG^2
"DATA",9002313.91,392,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,392,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,393,0)
987^^URL^A/N^^^^255^A/N
"DATA",9002313.91,393,5)
MA^255
"DATA",9002313.91,393,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,393,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,394,0)
571^^AMOUNT ATTRIB TO PROCESSOR FEE^N^^^^8^N
"DATA",9002313.91,394,5)
NZ^8
"DATA",9002313.91,394,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,394,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,395,0)
575^^PATIENT SALES TAX^N^^^^8^N
"DATA",9002313.91,395,5)
EQ^8
"DATA",9002313.91,395,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,395,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,396,0)
574^^PLAN SALES TAX AMOUNT^N^^^^8^N
"DATA",9002313.91,396,5)
2Y^8
"DATA",9002313.91,396,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,396,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,397,0)
572^^AMOUNT OF COINSURANCE^N^^^^8^N
"DATA",9002313.91,397,5)
4U^8
"DATA",9002313.91,397,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,397,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,398,0)
573^^BASIS OF CALC - COINSURANCE^A/N^^^^2^A/N
"DATA",9002313.91,398,5)
4V^2
"DATA",9002313.91,398,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,398,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,399,0)
577^^ESTIMATED GENERIC SAVINGS^N^^^^8^N
"DATA",9002313.91,399,5)
G3^8
"DATA",9002313.91,399,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,399,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,400,0)
128^^SPENDING ACCOUNT AMT REMAINING^N^^^^8^N
"DATA",9002313.91,400,5)
UC^8
"DATA",9002313.91,400,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,400,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,401,0)
129^^HEALTH PLAN-FUNDED ASSIST AMT^N^^^^8^N
"DATA",9002313.91,401,5)
UD^8
"DATA",9002313.91,401,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,401,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,402,0)
133^^AMT ATTR TO PROV NETWORK SLCTN^N^^^^8^N
"DATA",9002313.91,402,5)
UJ^8
"DATA",9002313.91,402,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,402,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,403,0)
134^^AMT ATTR TO PROD SEL BRND DRUG^N^^^^8^N
"DATA",9002313.91,403,5)
UK^8
"DATA",9002313.91,403,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,403,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,404,0)
135^^AMT ATTR NON-PREF FRMLRY SEL^N^^^^8^N
"DATA",9002313.91,404,5)
UM^8
"DATA",9002313.91,404,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,404,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,405,0)
136^^AMT ATTR TO N-PREF FRMLRY SEL^N^^^^8^N
"DATA",9002313.91,405,5)
UN^8
"DATA",9002313.91,405,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,405,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,406,0)
137^^AMOUNT ATTR TO COVERAGE GAP^N^^^^8^N
"DATA",9002313.91,406,5)
UP^8
"DATA",9002313.91,406,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,406,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,407,0)
148^^INGRED COST CNTRCTD REIMB AMT^N^^^^8^N
"DATA",9002313.91,407,5)
U8^8
"DATA",9002313.91,407,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,407,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,408,0)
149^^DISP FEE CNTRCTD REIMB AMT^N^^^^8^N
"DATA",9002313.91,408,5)
U9^8
"DATA",9002313.91,408,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,408,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,409,0)
570^^DUR ADDITIONAL TEXT^A/N^^^^100^A/N
"DATA",9002313.91,409,5)
NS^100
"DATA",9002313.91,409,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,409,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,410,0)
355^^OTHER PAYER ID COUNT^N^^^^1^N
"DATA",9002313.91,410,5)
NT^1
"DATA",9002313.91,410,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,410,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,411,0)
142^^OTHER PAYER PERSON CODE^A/N^^^^3^A/N
"DATA",9002313.91,411,5)
UV^3
"DATA",9002313.91,411,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,411,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,412,0)
127^^OTHER PAYER HELP DESK PH NUM^A/N^^^^18^A/N
"DATA",9002313.91,412,1)
OTHER PAYER HELP DESK TELEPHONE NUMBER
"DATA",9002313.91,412,5)
UB^18
"DATA",9002313.91,412,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,412,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,413,0)
143^^OTHER PAYER PATIENT REL CODE^N^^^^1^N
"DATA",9002313.91,413,5)
UW^1
"DATA",9002313.91,413,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,413,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,414,0)
144^^OTHER PAYER EFFECTIVE DATE^N^^^^8^N
"DATA",9002313.91,414,5)
UX^8
"DATA",9002313.91,414,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,414,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,415,0)
145^^OTHER PAYER TERMINATION DATE^N^^^^8^N
"DATA",9002313.91,415,5)
UY^8
"DATA",9002313.91,415,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,415,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,416,0)
139^^MEDICARE PART D COVERAGE CODE^N^^^^2^N
"DATA",9002313.91,416,5)
UR^2
"DATA",9002313.91,416,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,416,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,417,0)
138^^CMS LICS LEVEL^A/N^^^^20^A/N
"DATA",9002313.91,417,5)
UQ^20
"DATA",9002313.91,417,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,417,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,418,0)
240^^CONTRACT NUMBER^A/N^^^^8^A/N
"DATA",9002313.91,418,5)
U1^8
"DATA",9002313.91,418,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,418,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,419,0)
926^^FORMULARY ID^A/N^^^^10^A/N
"DATA",9002313.91,419,5)
FF^10
"DATA",9002313.91,419,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,419,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,420,0)
757^^BENEFIT ID^A/N^^^^15^A/N
"DATA",9002313.91,420,5)
U6^15
"DATA",9002313.91,420,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,420,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,421,0)
140^^NEXT MEDICARE PART D EFF DATE^N^^^^8^N
"DATA",9002313.91,421,5)
US^8
"DATA",9002313.91,421,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,421,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,422,0)
141^^NEXT MEDICARE PART D TERM DATE^N^^^^8^N
"DATA",9002313.91,422,5)
UT^8
"DATA",9002313.91,422,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,422,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,423,0)
123^^PAY TO STATE/PROVINCE ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,423,1)
PAY TO STATE/ PROVINCE ADDRESS
"DATA",9002313.91,423,5)
TX^2
"DATA",9002313.91,423,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,423,10,1,0)
S BPS("X")=""
"DATA",9002313.91,423,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,423,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,423,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,423,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,3)=""
"DATA",9002313.91,424,0)
579^^SERVICE PROVIDER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,424,1)
ASSOCIATED PRESCRIPTION / SERVICE PROVIDER ID QUALIFIER
"DATA",9002313.91,424,5)
XX^2
"DATA",9002313.91,424,10,0)
^^1^1^3130311^
"DATA",9002313.91,424,10,1,0)
S BPS("X")=""
"DATA",9002313.91,424,20,0)
^9002313.9102^1^1^3130311^^^^
"DATA",9002313.91,424,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,424,25,0)
^9002313.9104^1^1^3130311^^^^
"DATA",9002313.91,424,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,424,30,0)
^9002313.9103^1^1^3130311^^^
"DATA",9002313.91,424,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),570),U,9)=$G(BPS("X"))
"DATA",9002313.91,425,0)
580^^SERVICE PROVIDER ID^A/N^^^^15^A/N
"DATA",9002313.91,425,1)
ASSOCIATED PRESCRIPTION / SERVICE PROVIDER ID
"DATA",9002313.91,425,5)
XY^15
"DATA",9002313.91,425,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,425,10,1,0)
S BPS("X")=""
"DATA",9002313.91,425,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,425,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,425,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,425,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,425,30,0)
^^1^1^3130222^
"DATA",9002313.91,425,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),570),U,10)=BPS("X")
"DATA",9002313.91,426,0)
581^^SERVICE REFERENCE NUMBER QUAL^A/N^^^^2^A/N
"DATA",9002313.91,426,1)
ASSOCIATED PRESCRIPTION / SERVICE REFERENCE NUMBER QUALIFIER
"DATA",9002313.91,426,5)
XZ^2
"DATA",9002313.91,426,10,0)
^^1^1^3130222^
"DATA",9002313.91,426,10,1,0)
S BPS("X")=""
"DATA",9002313.91,426,20,0)
^^1^1^3130222^
"DATA",9002313.91,426,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,426,25,0)
^^1^1^3130222^
"DATA",9002313.91,426,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,426,30,0)
^^1^1^3130222^
"DATA",9002313.91,426,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,1)=BPS("X")
"DATA",9002313.91,427,0)
582^^SERVICE FILL NUMBER^N^^^^2^N
"DATA",9002313.91,427,1)
ASSOCIATED PRESCRIPTION SERVICE FILL NUMBER
"DATA",9002313.91,427,5)
X0^2
"DATA",9002313.91,427,10,0)
^^1^1^3130222^
"DATA",9002313.91,427,10,1,0)
S BPS("X")=""
"DATA",9002313.91,427,20,0)
^^1^1^3130222^
"DATA",9002313.91,427,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,427,25,0)
^^1^1^3130222^
"DATA",9002313.91,427,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,427,30,0)
^^1^1^3130222^
"DATA",9002313.91,427,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,2)=$G(BPS("X"))
"DATA",9002313.91,428,0)
583^^SERVICE PROVIDER NAME^A/N^^^^30^A/N
"DATA",9002313.91,428,1)
SERVICE PROVIDE NAME
"DATA",9002313.91,428,5)
YK^30
"DATA",9002313.91,428,10,0)
^^1^1^3130228^
"DATA",9002313.91,428,10,1,0)
S BPS("X")=""
"DATA",9002313.91,428,20,0)
^^1^1^3130222^
"DATA",9002313.91,428,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,428,25,0)
^^1^1^3130222^
"DATA",9002313.91,428,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,428,30,0)
^^1^1^3130222^
"DATA",9002313.91,428,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,3)=BPS("X")
"DATA",9002313.91,429,0)
584^^SERVICE PROVIDER STREET^A/N^^^^30^A/N
"DATA",9002313.91,429,1)
SERVICE PROVIDER STREET ADDRESS
"DATA",9002313.91,429,5)
YM^30
"DATA",9002313.91,429,10,0)
^^1^1^3130222^
"DATA",9002313.91,429,10,1,0)
S BPS("X")=""
"DATA",9002313.91,429,20,0)
^^1^1^3130222^
"DATA",9002313.91,429,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,429,25,0)
^^1^1^3130222^
"DATA",9002313.91,429,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,429,30,0)
^^1^1^3130222^
"DATA",9002313.91,429,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,4)=BPS("X")
"DATA",9002313.91,430,0)
585^^SERVICE PROVIDER CITY^A/N^^^^20^A/N
"DATA",9002313.91,430,1)
SERVICE PROVIDER CITY ADDRESS
"DATA",9002313.91,430,5)
YN^20
"DATA",9002313.91,430,10,0)
^9002313.9101^1^1^3130228^^
"DATA",9002313.91,430,10,1,0)
S BPS("X")=""
"DATA",9002313.91,430,20,0)
^^1^1^3130222^
"DATA",9002313.91,430,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,430,25,0)
^^1^1^3130222^
"DATA",9002313.91,430,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,430,30,0)
^^1^1^3130222^
"DATA",9002313.91,430,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,5)=BPS("X")
"DATA",9002313.91,431,0)
586^^SERVICE PROVIDE STATE/PROVINCE^A/N^^^^2^A/N
"DATA",9002313.91,431,1)
SERVICE PROVIDER STATE/PROVINCE ADDRESS
"DATA",9002313.91,431,5)
YP^2
"DATA",9002313.91,431,10,0)
^^1^1^3130222^
"DATA",9002313.91,431,10,1,0)
S BPS("X")=""
"DATA",9002313.91,431,20,0)
^^1^1^3130222^
"DATA",9002313.91,431,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,431,25,0)
^^1^1^3130222^
"DATA",9002313.91,431,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,431,30,0)
^^1^1^3130222^
"DATA",9002313.91,431,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,6)=BPS("X")
"DATA",9002313.91,432,0)
587^^SERVICE PROVIDER ZIP/POST CODE^A/N^^^^15^A/N
"DATA",9002313.91,432,1)
SERVICE PROVIDER ZIP/POSTAL CODE
"DATA",9002313.91,432,5)
YQ^15
"DATA",9002313.91,432,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,432,10,1,0)
S BPS("X")=""
"DATA",9002313.91,432,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,432,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,432,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,432,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,432,30,0)
^^1^1^3130222^
"DATA",9002313.91,432,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,7)=BPS("X")
"DATA",9002313.91,433,0)
590^^SELLER INITIALS^A/N^^^^3^A/N
"DATA",9002313.91,433,5)
YT^3
"DATA",9002313.91,433,10,0)
^^1^1^3130222^
"DATA",9002313.91,433,10,1,0)
S BPS("X")=BPS("Provider",MEDN,"Pharmacist Initials")
"DATA",9002313.91,433,20,0)
^9002313.9102^1^1^3130222^^^^
"DATA",9002313.91,433,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,433,25,0)
^9002313.9104^1^1^3130222^^^^
"DATA",9002313.91,433,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,433,30,0)
^9002313.9103^1^1^3130222^^^^
"DATA",9002313.91,433,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,10)=BPS("X")
"DATA",9002313.91,434,0)
591^^PURCHASER ID QUALIFIER^N^^^^2^N
"DATA",9002313.91,434,5)
YU^2
"DATA",9002313.91,434,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,434,10,1,0)
S BPS("X")=""
"DATA",9002313.91,434,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,434,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,434,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,434,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,434,30,0)
^^1^1^3130222^
"DATA",9002313.91,434,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,1)=BPS("X")
"DATA",9002313.91,435,0)
592^^PURCHASER ID^A/N^^^^20^A/N
"DATA",9002313.91,435,5)
YV^20
"DATA",9002313.91,435,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,435,10,1,0)
S BPS("X")=""
"DATA",9002313.91,435,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,435,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,435,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,435,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,435,30,0)
^^1^1^3130222^
"DATA",9002313.91,435,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,2)=BPS("X")
"DATA",9002313.91,436,0)
593^^PURCHASER ID STATE/PROVINCE^A/N^^^^2^A/N
"DATA",9002313.91,436,1)
PURCHASER ID ASSOCIATED STATE/PROVINCE ADDRESS
"DATA",9002313.91,436,5)
YW^2
"DATA",9002313.91,436,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,436,10,1,0)
S BPS("X")=""
"DATA",9002313.91,436,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,436,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,436,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,436,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,436,30,0)
^^1^1^3130222^
"DATA",9002313.91,436,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,3)=BPS("X")
"DATA",9002313.91,437,0)
594^^PURCHASER DATE OF BIRTH^N^^^^8^N
"DATA",9002313.91,437,5)
YX^8
"DATA",9002313.91,437,10,0)
^9002313.9101^1^1^3130228^^^
"DATA",9002313.91,437,10,1,0)
S BPS("X")=""
"DATA",9002313.91,437,20,0)
^^1^1^3130228^
"DATA",9002313.91,437,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,437,25,0)
^9002313.9104^1^1^3130228^^^
"DATA",9002313.91,437,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,437,30,0)
^9002313.9103^1^1^3130228^^
"DATA",9002313.91,437,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,4)=BPS("X")
"DATA",9002313.91,438,0)
595^^PURCHASER GENDER CODE^N^^^^1^N
"DATA",9002313.91,438,5)
YY^1
"DATA",9002313.91,438,10,0)
^^1^1^3130228^
"DATA",9002313.91,438,10,1,0)
S BPS("X")=""
"DATA",9002313.91,438,20,0)
^^1^1^3130222^
"DATA",9002313.91,438,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,438,25,0)
^^1^1^3130222^
"DATA",9002313.91,438,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,438,30,0)
^^1^1^3130222^
"DATA",9002313.91,438,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,5)=BPS("X")
"DATA",9002313.91,439,0)
596^^PURCHASER FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,439,5)
YZ^12
"DATA",9002313.91,439,10,0)
^^1^1^3130222^
"DATA",9002313.91,439,10,1,0)
S BPS("X")=""
"DATA",9002313.91,439,20,0)
^^1^1^3130222^
"DATA",9002313.91,439,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,439,25,0)
^^1^1^3130222^
"DATA",9002313.91,439,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,439,30,0)
^^1^1^3130222^
"DATA",9002313.91,439,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,6)=BPS("X")
"DATA",9002313.91,440,0)
597^^PURCHASER LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,440,5)
Y0^15
"DATA",9002313.91,440,10,0)
^9002313.9101^1^1^3130403^^
"DATA",9002313.91,440,10,1,0)
S BPS("X")=""
"DATA",9002313.91,440,20,0)
^9002313.9102^1^1^3130403^^
"DATA",9002313.91,440,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,440,25,0)
^9002313.9104^1^1^3130403^^
"DATA",9002313.91,440,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,440,30,0)
^9002313.9103^1^1^3130403^^
"DATA",9002313.91,440,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,7)=BPS("X")
"DATA",9002313.91,441,0)
598^^PURCHASER STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,441,5)
Y1^30
"DATA",9002313.91,441,10,0)
^^1^1^3130222^
"DATA",9002313.91,441,10,1,0)
S BPS("X")=""
"DATA",9002313.91,441,20,0)
^^1^1^3130222^
"DATA",9002313.91,441,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,441,25,0)
^^1^1^3130222^
"DATA",9002313.91,441,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,441,30,0)
^^1^1^3130222^
"DATA",9002313.91,441,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,8)=BPS("X")
"DATA",9002313.91,442,0)
599^^PURCHASER CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,442,5)
Y2^20
"DATA",9002313.91,442,10,0)
^^1^1^3130222^
"DATA",9002313.91,442,10,1,0)
S BPS("X")=""
"DATA",9002313.91,442,20,0)
^^1^1^3130222^
"DATA",9002313.91,442,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,442,25,0)
^^1^1^3130222^
"DATA",9002313.91,442,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,442,30,0)
^^1^1^3130222^
"DATA",9002313.91,442,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,9)=BPS("X")
"DATA",9002313.91,443,0)
675^^PURCHASER STATE/PROVINCE CODE^A/N^^^^2^A/N
"DATA",9002313.91,443,5)
Y3^2
"DATA",9002313.91,443,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,443,10,1,0)
S BPS("X")=""
"DATA",9002313.91,443,20,0)
^^1^1^3130222^
"DATA",9002313.91,443,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,443,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,443,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,443,30,0)
^^1^1^3130222^
"DATA",9002313.91,443,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,5)=BPS("X")
"DATA",9002313.91,444,0)
676^^PURCHASER ZIP/POSTAL CODE^A/N^^^^15^A/N
"DATA",9002313.91,444,5)
Y4^15
"DATA",9002313.91,444,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,444,10,1,0)
S BPS("X")=""
"DATA",9002313.91,444,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,444,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,444,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,444,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,444,30,0)
^9002313.9103^1^1^3130222^^^
"DATA",9002313.91,444,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,6)=BPS("X")
"DATA",9002313.91,445,0)
677^^PURCHASER COUNTRY CODE^A/N^^^^2^A/N
"DATA",9002313.91,445,5)
Y5^2
"DATA",9002313.91,445,10,0)
^^1^1^3130222^
"DATA",9002313.91,445,10,1,0)
S BPS("X")=""
"DATA",9002313.91,445,20,0)
^^1^1^3130222^
"DATA",9002313.91,445,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,445,25,0)
^^1^1^3130222^
"DATA",9002313.91,445,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,445,30,0)
^^1^1^3130222^
"DATA",9002313.91,445,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,7)=BPS("X")
"DATA",9002313.91,446,0)
678^^TIME OF SERVICE^N^^^^6^N
"DATA",9002313.91,446,5)
Y6^6
"DATA",9002313.91,446,10,0)
^^1^1^3130222^
"DATA",9002313.91,446,10,1,0)
S BPS("X")=BPS("Claim",MEDN,"Time of Service")
"DATA",9002313.91,446,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,446,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,446,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,446,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,446,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,446,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,8)=BPS("X")
"DATA",9002313.91,447,0)
679^^SELLER ID^A/N^^^^70^A/N
"DATA",9002313.91,447,5)
Y9^70
"DATA",9002313.91,447,10,0)
^^1^1^3130222^
"DATA",9002313.91,447,10,1,0)
S BPS("X")=BPS("Provider",MEDN,"Pharmacist ID")
"DATA",9002313.91,447,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,447,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),70)
"DATA",9002313.91,447,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,447,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),70)
"DATA",9002313.91,447,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,447,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,9)=BPS("X")
"DATA",9002313.91,448,0)
680^^SELLER ID QUALIFIER^N^^^^2^N
"DATA",9002313.91,448,5)
ZB^2
"DATA",9002313.91,448,10,0)
^^1^1^3130226^
"DATA",9002313.91,448,10,1,0)
S BPS("X")="01"
"DATA",9002313.91,448,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,448,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,448,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,448,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,448,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,448,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,10)=BPS("X")
"DATA",9002313.91,449,0)
681^^SALES TRANSACTION ID^A/N^^^^80^A/N
"DATA",9002313.91,449,5)
ZF^80
"DATA",9002313.91,449,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,449,10,1,0)
S BPS("X")=""
"DATA",9002313.91,449,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,449,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),80)
"DATA",9002313.91,449,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,449,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),80)
"DATA",9002313.91,449,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,449,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),680),U,1)=BPS("X")
"DATA",9002313.91,450,0)
A22^^PATIENT ID STATE/PROVINCE^A/N^^^^2^A/N
"DATA",9002313.91,450,1)
PATIENT ID ASSOCIATED STATE/PROVINCE ADDRESS
"DATA",9002313.91,450,5)
YR^2^1022
"DATA",9002313.91,450,10,0)
^^1^1^3130222^
"DATA",9002313.91,450,10,1,0)
S BPS("X")=""
"DATA",9002313.91,450,20,0)
^^1^1^3130222^
"DATA",9002313.91,450,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,450,25,0)
^^1^1^3130222^
"DATA",9002313.91,450,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,450,30,0)
^^1^1^3130227^
"DATA",9002313.91,450,30,1,0)
S $P(^BPSC(BPS(9002313.02),"A20"),U,2)=BPS("X")
"DATA",9002313.91,451,0)
A23^^PURCHASER RELATIONSHIP CODE^A/N^^^^2^A/N
"DATA",9002313.91,451,5)
YS^2^1023
"DATA",9002313.91,451,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,451,10,1,0)
S BPS("X")=""
"DATA",9002313.91,451,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,451,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,451,25,0)
^^1^1^3130222^
"DATA",9002313.91,451,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,451,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,451,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,3)=BPS("X")
"DATA",9002313.91,452,0)
A24^^PRESCRIBER ID STATE/PROVINCE^A/N^^^^2^A/N
"DATA",9002313.91,452,1)
PRESCRIBER ID ASSOCIATED STATE/PROVINCE CODE
"DATA",9002313.91,452,5)
ZK^2^1024
"DATA",9002313.91,452,10,0)
^^1^1^3130222^
"DATA",9002313.91,452,10,1,0)
S BPS("X")=""
"DATA",9002313.91,452,20,0)
^^1^1^3130222^
"DATA",9002313.91,452,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,452,25,0)
^^1^1^3130222^
"DATA",9002313.91,452,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,452,30,0)
^^1^1^3130222^
"DATA",9002313.91,452,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,4)=BPS("X")
"DATA",9002313.91,453,0)
A25^^PRESCRIBER ALTERNATE ID QUAL^A/N^^^^2^A/N
"DATA",9002313.91,453,1)
PRESCRIBER ALTERNATE ID QUALIFIER
"DATA",9002313.91,453,5)
ZM^2^1025
"DATA",9002313.91,453,10,0)
^^1^1^3130227^
"DATA",9002313.91,453,10,1,0)
S BPS("X")=""
"DATA",9002313.91,453,20,0)
^^1^1^3130222^
"DATA",9002313.91,453,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,453,25,0)
^^1^1^3130222^
"DATA",9002313.91,453,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,453,30,0)
^9002313.9103^1^1^3130227^^
"DATA",9002313.91,453,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,5)=BPS("X")
"DATA",9002313.91,454,0)
A26^^PRESCRIBER ALTERNATE ID^A/N^^^^15^A/N
"DATA",9002313.91,454,5)
ZP^15^1026
"DATA",9002313.91,454,10,0)
^^1^1^3130222^
"DATA",9002313.91,454,10,1,0)
S BPS("X")=""
"DATA",9002313.91,454,20,0)
^^1^1^3130222^
"DATA",9002313.91,454,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,454,25,0)
^^1^1^3130222^
"DATA",9002313.91,454,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,454,30,0)
^^1^1^3130222^
"DATA",9002313.91,454,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,6)=BPS("X")
"DATA",9002313.91,455,0)
A27^^PRESCRIBER ALTERNATE STATE^A/N^^^^2^A/N
"DATA",9002313.91,455,1)
PRESCRIBER ALTERNATE ID ASSOCIATED STATE/PROVINCE ADDRESS
"DATA",9002313.91,455,5)
ZQ^2^1027
"DATA",9002313.91,455,10,0)
^^1^1^3130222^
"DATA",9002313.91,455,10,1,0)
S BPS("X")=""
"DATA",9002313.91,455,20,0)
^^1^1^3130222^
"DATA",9002313.91,455,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,455,25,0)
^^1^1^3130222^
"DATA",9002313.91,455,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,455,30,0)
^^1^1^3130222^
"DATA",9002313.91,455,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,7)=BPS("X")
"DATA",9002313.91,456,0)
A28^^ADJUDICATED PAYMENT TYPE^N^^^^2^N
"DATA",9002313.91,456,5)
ZR^2^1028
"DATA",9002313.91,456,10,0)
^^1^1^3130222^
"DATA",9002313.91,456,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,457,0)
A29^^REPORTED PAYMENT TYPE^N^^^^2^N
"DATA",9002313.91,457,5)
ZS^2^1029
"DATA",9002313.91,457,10,0)
^^1^1^3130222^
"DATA",9002313.91,457,10,1,0)
S BPS("X")=""
"DATA",9002313.91,457,20,0)
^^1^1^3130222^
"DATA",9002313.91,457,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,457,25,0)
^^1^1^3130222^
"DATA",9002313.91,457,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,457,30,0)
^^1^1^3130222^
"DATA",9002313.91,457,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,9)=BPS("X")
"DATA",9002313.91,458,0)
A30^^RELEASED DATE^N^^^^8^N
"DATA",9002313.91,458,5)
ZT^8^1030
"DATA",9002313.91,458,10,0)
^^1^1^3130222^
"DATA",9002313.91,458,10,1,0)
S BPS("X")=""
"DATA",9002313.91,458,20,0)
^^1^1^3130222^
"DATA",9002313.91,458,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,458,25,0)
^^1^1^3130222^
"DATA",9002313.91,458,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,458,30,0)
^^1^1^3130222^
"DATA",9002313.91,458,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,10)=BPS("X")
"DATA",9002313.91,459,0)
A31^^RELEASED TIME^N^^^^6^N
"DATA",9002313.91,459,5)
ZU^6^1031
"DATA",9002313.91,459,10,0)
^^1^1^3130228^
"DATA",9002313.91,459,10,1,0)
S BPS("X")=""
"DATA",9002313.91,459,20,0)
^^1^1^3130222^
"DATA",9002313.91,459,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,459,25,0)
^^1^1^3130222^
"DATA",9002313.91,459,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,459,30,0)
^^1^1^3130222^
"DATA",9002313.91,459,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A30"),U,1)=BPS("X")
"DATA",9002313.91,460,0)
A32^^COMPOUND PREPARATION TIME^N^^^^4^N
"DATA",9002313.91,460,5)
ZW^4^1032
"DATA",9002313.91,460,10,0)
^^1^1^3130222^
"DATA",9002313.91,460,10,1,0)
S BPS("X")=""
"DATA",9002313.91,460,20,0)
^^1^1^3130222^
"DATA",9002313.91,460,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,460,25,0)
^^1^1^3130222^
"DATA",9002313.91,460,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,460,30,0)
^^1^1^3130222^
"DATA",9002313.91,460,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A30"),U,2)=BPS("X")
"DATA",9002313.91,461,0)
A43^^PATIENT COUNTRY CODE^A/N^^^^2^A/N
"DATA",9002313.91,461,5)
1K^2^1043
"DATA",9002313.91,461,10,0)
^^1^1^3130222^
"DATA",9002313.91,461,10,1,0)
S BPS("X")=""
"DATA",9002313.91,461,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,461,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,461,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,461,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,461,30,0)
^^1^1^3130227^
"DATA",9002313.91,461,30,1,0)
S $P(^BPSC(BPS(9002313.02),"A40"),U,3)=BPS("X")
"DATA",9002313.91,462,0)
A45^^VETERINARY USE INDICATOR^A/N^^^^1^A/N
"DATA",9002313.91,462,5)
1R^1^1045
"DATA",9002313.91,462,10,0)
^^1^1^3130222^
"DATA",9002313.91,462,10,1,0)
S BPS("X")=""
"DATA",9002313.91,462,20,0)
^^1^1^3130222^
"DATA",9002313.91,462,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,462,25,0)
^^1^1^3130222^
"DATA",9002313.91,462,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,462,30,0)
^^1^1^3130227^
"DATA",9002313.91,462,30,1,0)
S $P(^BPSC(BPS(9002313.02),"A40"),U,5)=BPS("X")
"DATA",9002313.91,463,0)
B04^^NEXT AVAILABLE FILL DATE^N^^^^8^N
"DATA",9002313.91,463,5)
BT^8^2004
"DATA",9002313.91,463,10,0)
^^1^1^3130222^
"DATA",9002313.91,463,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,464,0)
B08^^PATIENT STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,464,5)
7A^^2008
"DATA",9002313.91,464,10,0)
^^1^1^3150112^
"DATA",9002313.91,464,10,1,0)
S BPS("X")=$G(BPS("Patient","Street Address Line 1"))
"DATA",9002313.91,464,20,0)
^^1^1^3141223
"DATA",9002313.91,464,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,464,30,0)
^^1^1^3141223
"DATA",9002313.91,464,30,1,0)
S $P(^BPSC(BPS(9002313.02),"B00"),U,8)=BPS("X")
"DATA",9002313.91,465,0)
B09^^PATIENT STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,465,5)
7B^^2009
"DATA",9002313.91,465,10,0)
^^1^1^3150112^
"DATA",9002313.91,465,10,1,0)
S BPS("X")=$G(BPS("Patient","Street Address Line 2"))
"DATA",9002313.91,465,20,0)
^^1^1^3141223
"DATA",9002313.91,465,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,465,30,0)
^^1^1^3141223
"DATA",9002313.91,465,30,1,0)
S $P(^BPSC(BPS(9002313.02),"B00"),U,9)=BPS("X")
"DATA",9002313.91,466,0)
B38^^PATIENT ID ASSOC COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,466,1)
PATIENT ID ASSOCIATED COUNTRY CODE
"DATA",9002313.91,466,5)
1Y^^2038
"DATA",9002313.91,466,10,0)
^^1^1^3141223
"DATA",9002313.91,466,10,1,0)
S BPS("X")="US"
"DATA",9002313.91,466,20,0)
^^1^1^3141223
"DATA",9002313.91,466,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,466,30,0)
^^1^1^3141223
"DATA",9002313.91,466,30,1,0)
S $P(^BPSC(BPS(9002313.02),"B30"),U,8)=BPS("X")
"DATA",9002313.91,467,0)
B26^^PRESCRIBER PHONE NUMBER EXT^^^^^8^N
"DATA",9002313.91,467,1)
PRESCRIBER TELEPHONE NUMBER EXTENSION
"DATA",9002313.91,467,5)
7T^^2026
"DATA",9002313.91,467,10,0)
^^1^1^3141223
"DATA",9002313.91,467,10,1,0)
S BPS("X")=""
"DATA",9002313.91,467,20,0)
^^1^1^3141223
"DATA",9002313.91,467,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,467,30,0)
^^1^1^3141223
"DATA",9002313.91,467,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,6)=BPS("X")
"DATA",9002313.91,468,0)
B27^^PRESCRIBER STREET ADDR LINE 1^^^^^40^A/N
"DATA",9002313.91,468,1)
PRESCRIBER STREET ADDRESS LINE 1
"DATA",9002313.91,468,5)
7U^^2027
"DATA",9002313.91,468,10,0)
^^1^1^3150112^
"DATA",9002313.91,468,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Street Address Line 1"))
"DATA",9002313.91,468,20,0)
^^1^1^3141223
"DATA",9002313.91,468,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,468,30,0)
^^1^1^3141223
"DATA",9002313.91,468,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,7)=BPS("X")
"DATA",9002313.91,469,0)
B28^^PRESCRIBER STREET ADDR LINE 2^^^^^40^A/N
"DATA",9002313.91,469,1)
PRESCRIBER STREET ADDRESS LINE 2
"DATA",9002313.91,469,5)
7V^^2028
"DATA",9002313.91,469,10,0)
^^1^1^3150112^
"DATA",9002313.91,469,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Street Address Line 2"))
"DATA",9002313.91,469,20,0)
^^1^1^3141223
"DATA",9002313.91,469,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,469,30,0)
^^1^1^3141223
"DATA",9002313.91,469,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,8)=BPS("X")
"DATA",9002313.91,470,0)
B40^^PRES ALT ID ASSOC COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,470,1)
PRESCRIBER ALTERNATE ID ASSOCIATED COUNTRY CODE
"DATA",9002313.91,470,5)
3A^^2040
"DATA",9002313.91,470,10,0)
^^1^1^3141223
"DATA",9002313.91,470,10,1,0)
S BPS("X")=""
"DATA",9002313.91,470,20,0)
^^1^1^3141223
"DATA",9002313.91,470,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,470,30,0)
^^1^1^3141223
"DATA",9002313.91,470,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,10)=BPS("X")
"DATA",9002313.91,471,0)
B41^^PRES ID ASSOC COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,471,1)
PRESCRIBER ID ASSOCIATED COUNTRY CODE
"DATA",9002313.91,471,5)
3B^^2041
"DATA",9002313.91,471,10,0)
^9002313.9101^1^1^3150112^
"DATA",9002313.91,471,10,1,0)
S BPS("X")="US"
"DATA",9002313.91,471,20,0)
^^1^1^3141223
"DATA",9002313.91,471,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,471,30,0)
^^1^1^3141223
"DATA",9002313.91,471,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B40"),U,1)=BPS("X")
"DATA",9002313.91,472,0)
B42^^PRESCRIBER COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,472,5)
3C^^2042
"DATA",9002313.91,472,10,0)
^^1^1^3150112^
"DATA",9002313.91,472,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Country"))
"DATA",9002313.91,472,20,0)
^^1^1^3141223
"DATA",9002313.91,472,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,472,30,0)
^^1^1^3141223
"DATA",9002313.91,472,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B40"),U,2)=BPS("X")
"DATA",9002313.91,473,0)
B15^^EMPLOYER STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,473,5)
8D^^2015
"DATA",9002313.91,473,10,0)
^^1^1^3141223
"DATA",9002313.91,473,10,1,0)
S BPS("X")=""
"DATA",9002313.91,473,20,0)
^^1^1^3141223
"DATA",9002313.91,473,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,473,30,0)
^^1^1^3141223
"DATA",9002313.91,473,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,5)=BPS("X")
"DATA",9002313.91,474,0)
B16^^EMPLOYER STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,474,5)
7G^^2016
"DATA",9002313.91,474,10,0)
^^1^1^3141223
"DATA",9002313.91,474,10,1,0)
S BPS("X")=""
"DATA",9002313.91,474,20,0)
^^1^1^3141223
"DATA",9002313.91,474,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,474,30,0)
^^1^1^3141223
"DATA",9002313.91,474,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,6)=BPS("X")
"DATA",9002313.91,475,0)
B17^^EMPLOYER CONTACT FIRST NAME^^^^^35^A/N
"DATA",9002313.91,475,5)
7H^^2017
"DATA",9002313.91,475,10,0)
^^1^1^3141223
"DATA",9002313.91,475,10,1,0)
S BPS("X")=""
"DATA",9002313.91,475,20,0)
^^1^1^3141223
"DATA",9002313.91,475,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),35)
"DATA",9002313.91,475,30,0)
^^1^1^3141223
"DATA",9002313.91,475,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,7)=BPS("X")
"DATA",9002313.91,476,0)
B18^^EMPLOYER CONTACT LAST NAME^^^^^35^A/N
"DATA",9002313.91,476,5)
7J^^2018
"DATA",9002313.91,476,10,0)
^^1^1^3141223
"DATA",9002313.91,476,10,1,0)
S BPS("X")=""
"DATA",9002313.91,476,20,0)
^^1^1^3141223
"DATA",9002313.91,476,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),35)
"DATA",9002313.91,476,30,0)
^^1^1^3141223
"DATA",9002313.91,476,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,8)=BPS("X")
"DATA",9002313.91,477,0)
B19^^EMPLOYER PHONE NUMBER EXT^^^^^8^N
"DATA",9002313.91,477,1)
EMPLOYER TELEPHONE NUMBER EXTENSION
"DATA",9002313.91,477,5)
7K^^2019
"DATA",9002313.91,477,10,0)
^^1^1^3141223
"DATA",9002313.91,477,10,1,0)
S BPS("X")=""
"DATA",9002313.91,477,20,0)
^^1^1^3141223
"DATA",9002313.91,477,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,477,30,0)
^^1^1^3141223
"DATA",9002313.91,477,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,9)=BPS("X")
"DATA",9002313.91,478,0)
B24^^PAY TO STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,478,5)
7R^^2024
"DATA",9002313.91,478,10,0)
^^1^1^3141223
"DATA",9002313.91,478,10,1,0)
S BPS("X")=""
"DATA",9002313.91,478,20,0)
^^1^1^3141223
"DATA",9002313.91,478,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,478,30,0)
^^1^1^3141223
"DATA",9002313.91,478,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,4)=BPS("X")
"DATA",9002313.91,479,0)
B25^^PAY TO STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,479,5)
7S^^2025
"DATA",9002313.91,479,10,0)
^^1^1^3141223
"DATA",9002313.91,479,10,1,0)
S BPS("X")=""
"DATA",9002313.91,479,20,0)
^^1^1^3141223
"DATA",9002313.91,479,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,479,30,0)
^^1^1^3141223
"DATA",9002313.91,479,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,5)=BPS("X")
"DATA",9002313.91,480,0)
B35^^EMPLOYER COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,480,5)
1V^^2035
"DATA",9002313.91,480,10,0)
^^1^1^3141223
"DATA",9002313.91,480,10,1,0)
S BPS("X")=""
"DATA",9002313.91,480,20,0)
^^1^1^3141223
"DATA",9002313.91,480,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,480,30,0)
^^1^1^3141223
"DATA",9002313.91,480,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,5)=BPS("X")
"DATA",9002313.91,481,0)
B39^^PAY TO COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,481,5)
1Z^^2039
"DATA",9002313.91,481,10,0)
^^1^1^3141223
"DATA",9002313.91,481,10,1,0)
S BPS("X")=""
"DATA",9002313.91,481,20,0)
^^1^1^3141223
"DATA",9002313.91,481,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,481,30,0)
^^1^1^3141223
"DATA",9002313.91,481,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,9)=BPS("X")
"DATA",9002313.91,482,0)
B13^^AUTH REP STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,482,1)
AUTHORIZED REPRESENTATIVE STREET ADDRESS LINE 1
"DATA",9002313.91,482,5)
7D^^2013
"DATA",9002313.91,482,10,0)
^9002313.9101^1^1^3150112^
"DATA",9002313.91,482,10,1,0)
S BPS("X")=""
"DATA",9002313.91,482,20,0)
^9002313.9102^1^1^3150112^
"DATA",9002313.91,482,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,482,30,0)
^9002313.9103^1^1^3150112^
"DATA",9002313.91,482,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,3)=BPS("X")
"DATA",9002313.91,483,0)
B14^^AUTH REP STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,483,1)
AUTHORIZED REPRESENTATIVE STREET ADDRESS LINE 2
"DATA",9002313.91,483,5)
8B^^2014
"DATA",9002313.91,483,10,0)
^^1^1^3141223
"DATA",9002313.91,483,10,1,0)
S BPS("X")=""
"DATA",9002313.91,483,20,0)
^^1^1^3141223
"DATA",9002313.91,483,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,483,30,0)
^^1^1^3141223
"DATA",9002313.91,483,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,4)=BPS("X")
"DATA",9002313.91,484,0)
B34^^AUTH REP COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,484,1)
AUTHORIZED REPRESENTATIVE COUNTRY CODE
"DATA",9002313.91,484,5)
1U^^2034
"DATA",9002313.91,484,10,0)
^^1^1^3141223
"DATA",9002313.91,484,10,1,0)
S BPS("X")=""
"DATA",9002313.91,484,20,0)
^^1^1^3141223
"DATA",9002313.91,484,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,484,30,0)
^^1^1^3141223
"DATA",9002313.91,484,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,4)=BPS("X")
"DATA",9002313.91,485,0)
B20^^FACILITY STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,485,5)
7M^^2020
"DATA",9002313.91,485,10,0)
^^1^1^3141223
"DATA",9002313.91,485,10,1,0)
S BPS("X")=""
"DATA",9002313.91,485,20,0)
^^1^1^3141223
"DATA",9002313.91,485,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,485,30,0)
^^1^1^3141223
"DATA",9002313.91,485,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,10)=BPS("X")
"DATA",9002313.91,486,0)
B21^^FACILITY STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,486,5)
7N^^2021
"DATA",9002313.91,486,10,0)
^^1^1^3141223
"DATA",9002313.91,486,10,1,0)
S BPS("X")=""
"DATA",9002313.91,486,20,0)
^^1^1^3141223
"DATA",9002313.91,486,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,486,30,0)
^^1^1^3141223
"DATA",9002313.91,486,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,1)=BPS("X")
"DATA",9002313.91,487,0)
B37^^FACILITY COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,487,5)
1X^^2037
"DATA",9002313.91,487,10,0)
^^1^1^3141223
"DATA",9002313.91,487,10,1,0)
S BPS("X")=""
"DATA",9002313.91,487,20,0)
^^1^1^3141223
"DATA",9002313.91,487,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,487,30,0)
^^1^1^3141223
"DATA",9002313.91,487,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,7)=BPS("X")
"DATA",9002313.91,488,0)
B29^^PURCHASER STREET ADDRESS LINE1^^^^^40^A/N
"DATA",9002313.91,488,1)
PURCHASER STREET ADDRESS LINE 1
"DATA",9002313.91,488,5)
7W^^2029
"DATA",9002313.91,488,10,0)
^^1^1^3141223
"DATA",9002313.91,488,10,1,0)
S BPS("X")=""
"DATA",9002313.91,488,20,0)
^^1^1^3141223
"DATA",9002313.91,488,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,488,30,0)
^^1^1^3141223
"DATA",9002313.91,488,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,9)=BPS("X")
"DATA",9002313.91,489,0)
B30^^PURCHASER STREET ADDRESS LINE2^^^^^40^A/N
"DATA",9002313.91,489,1)
PURCHASER STREET ADDRESS LINE 2
"DATA",9002313.91,489,5)
7X^^2030
"DATA",9002313.91,489,10,0)
^^1^1^3141223
"DATA",9002313.91,489,10,1,0)
S BPS("X")=""
"DATA",9002313.91,489,20,0)
^^1^1^3141223
"DATA",9002313.91,489,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,489,30,0)
^^1^1^3141223
"DATA",9002313.91,489,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,10)=BPS("X")
"DATA",9002313.91,490,0)
B43^^PURCHASER ID ASSOC COUNTRY CD^^^^^2^A/N
"DATA",9002313.91,490,1)
PURCHASER ID ASSOCIATED COUNTRY CODE
"DATA",9002313.91,490,5)
3D^^2043
"DATA",9002313.91,490,10,0)
^^1^1^3141223
"DATA",9002313.91,490,10,1,0)
S BPS("X")=""
"DATA",9002313.91,490,20,0)
^^1^1^3141223
"DATA",9002313.91,490,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,490,30,0)
^^1^1^3141223
"DATA",9002313.91,490,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B40"),U,3)=BPS("X")
"DATA",9002313.91,491,0)
B31^^SERVICE PROV STREET ADD LINE 1^^^^^40^A/N
"DATA",9002313.91,491,1)
SERVICE PROVIDER STREET ADDRESS LINE 1
"DATA",9002313.91,491,5)
7Y^^2031
"DATA",9002313.91,491,10,0)
^^1^1^3141223
"DATA",9002313.91,491,10,1,0)
S BPS("X")=""
"DATA",9002313.91,491,20,0)
^^1^1^3141223
"DATA",9002313.91,491,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,491,30,0)
^^1^1^3141223
"DATA",9002313.91,491,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,1)=BPS("X")
"DATA",9002313.91,492,0)
B32^^SERVICE PROV STREET ADD LINE 2^^^^^40^A/N
"DATA",9002313.91,492,1)
SERVICE PROVIDER STREET ADDRESS LINE 2
"DATA",9002313.91,492,5)
7Z^^2032
"DATA",9002313.91,492,10,0)
^^1^1^3141223
"DATA",9002313.91,492,10,1,0)
S BPS("X")=""
"DATA",9002313.91,492,20,0)
^^1^1^3141223
"DATA",9002313.91,492,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,492,30,0)
^^1^1^3141223
"DATA",9002313.91,492,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,2)=BPS("X")
"DATA",9002313.91,493,0)
A93^^SERVICE PROVIDER COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,493,5)
1T^^1093
"DATA",9002313.91,493,10,0)
^^1^1^3141223
"DATA",9002313.91,493,10,1,0)
S BPS("X")=""
"DATA",9002313.91,493,20,0)
^^1^1^3141223
"DATA",9002313.91,493,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,493,30,0)
^^1^1^3141223
"DATA",9002313.91,493,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A90"),U,3)=BPS("X")
"DATA",9002313.91,494,0)
B44^^INTERMEDIARY ID COUNT^^^^^1^N
"DATA",9002313.91,494,5)
8G^^2044
"DATA",9002313.91,494,10,0)
^^1^1^3141223
"DATA",9002313.91,494,10,1,0)
S BPS("X")=""
"DATA",9002313.91,494,20,0)
^^1^1^3141223
"DATA",9002313.91,494,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,494,30,0)
^^1^1^3141223
"DATA",9002313.91,494,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B40"),U,4)=BPS("X")
"DATA",9002313.91,495,0)
B45^^INTERMEDIARY ID TYPE CODE^^^^^2^A/N
"DATA",9002313.91,495,5)
8H^^2045
"DATA",9002313.91,495,10,0)
^^1^1^3141223
"DATA",9002313.91,495,10,1,0)
S BPS("X")=""
"DATA",9002313.91,495,20,0)
^^1^1^3141223
"DATA",9002313.91,495,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,496,0)
B46^^INTERMEDIARY ID TYPE ENTITY^^^^^2^A/N
"DATA",9002313.91,496,5)
8J^^2046
"DATA",9002313.91,496,10,0)
^^1^1^3141223
"DATA",9002313.91,496,10,1,0)
S BPS("X")=""
"DATA",9002313.91,496,20,0)
^^1^1^3141223
"DATA",9002313.91,496,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,497,0)
B47^^INTERMEDIARY ID QUALIFIER^^^^^2^A/N
"DATA",9002313.91,497,5)
8K^^2047
"DATA",9002313.91,497,10,0)
^^1^1^3141223
"DATA",9002313.91,497,10,1,0)
S BPS("X")=""
"DATA",9002313.91,497,20,0)
^^1^1^3141223
"DATA",9002313.91,497,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,498,0)
B48^^INTERMEDIARY ID^^^^^20^A/N
"DATA",9002313.91,498,5)
8M^^2048
"DATA",9002313.91,498,10,0)
^^1^1^3141223
"DATA",9002313.91,498,10,1,0)
S BPS("X")=""
"DATA",9002313.91,498,20,0)
^^1^1^3141223
"DATA",9002313.91,498,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,499,0)
B49^^INTERMEDIARY ID STATE/PROV ADD^^^^^2^A/N
"DATA",9002313.91,499,1)
INTERMEDIARY ID STATE/PROVINCE ADDRESS
"DATA",9002313.91,499,5)
8N^^2049
"DATA",9002313.91,499,10,0)
^9002313.9101^1^1^3141231^
"DATA",9002313.91,499,10,1,0)
S BPS("X")=""
"DATA",9002313.91,499,20,0)
^9002313.9102^1^1^3141231^
"DATA",9002313.91,499,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,500,0)
B55^^INTERMEDIARY ID COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,500,5)
8U^^2055
"DATA",9002313.91,500,10,0)
^^1^1^3141223
"DATA",9002313.91,500,10,1,0)
S BPS("X")=""
"DATA",9002313.91,500,20,0)
^^1^1^3141223
"DATA",9002313.91,500,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,501,0)
B50^^INTERMEDIARY ID RELATION CODE^^^^^1^N
"DATA",9002313.91,501,1)
INTERMEDIARY ID RELATIONSHIP CODE
"DATA",9002313.91,501,5)
8P^^2050
"DATA",9002313.91,501,10,0)
^^1^1^3141223
"DATA",9002313.91,501,10,1,0)
S BPS("X")=""
"DATA",9002313.91,501,20,0)
^^1^1^3141223
"DATA",9002313.91,501,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,502,0)
B56^^LAST KNOWN BIN NUMBER^^^^^6^N
"DATA",9002313.91,502,5)
3E^^2056
"DATA",9002313.91,502,10,0)
^^1^1^3141223
"DATA",9002313.91,502,10,1,0)
S BPS("X")=""
"DATA",9002313.91,502,20,0)
^^1^1^3141223
"DATA",9002313.91,502,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,502,30,0)
^^1^1^3141223
"DATA",9002313.91,502,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,6)=BPS("X")
"DATA",9002313.91,503,0)
B57^^LAST KNOWN PROCESSOR CNTRL NUM^^^^^10^A/N
"DATA",9002313.91,503,1)
LAST KNOWN PROCESSOR CONTROL NUMBER
"DATA",9002313.91,503,5)
3F^^2057
"DATA",9002313.91,503,10,0)
^^1^1^3141223
"DATA",9002313.91,503,10,1,0)
S BPS("X")=""
"DATA",9002313.91,503,20,0)
^^1^1^3141223
"DATA",9002313.91,503,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,503,30,0)
^^1^1^3141223
"DATA",9002313.91,503,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,7)=BPS("X")
"DATA",9002313.91,504,0)
B58^^LAST KNOWN GROUP ID^^^^^15^A/N
"DATA",9002313.91,504,5)
3G^^2058
"DATA",9002313.91,504,10,0)
^^1^1^3141223
"DATA",9002313.91,504,10,1,0)
S BPS("X")=""
"DATA",9002313.91,504,20,0)
^^1^1^3141223
"DATA",9002313.91,504,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,504,30,0)
^^1^1^3141223
"DATA",9002313.91,504,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,8)=BPS("X")
"DATA",9002313.91,505,0)
B59^^LAST KNOWN CARDHOLDER ID^^^^^20^A/N
"DATA",9002313.91,505,5)
3H^^2059
"DATA",9002313.91,505,10,0)
^^1^1^3141223
"DATA",9002313.91,505,10,1,0)
S BPS("X")=""
"DATA",9002313.91,505,20,0)
^^1^1^3141223
"DATA",9002313.91,505,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,505,30,0)
^^1^1^3141223
"DATA",9002313.91,505,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,9)=BPS("X")
"DATA",9002313.91,506,0)
B60^^YEAR OF LAST PAID CLAIM^^^^^4^N
"DATA",9002313.91,506,5)
3J^^2060
"DATA",9002313.91,506,10,0)
^9002313.9101^1^1^3150112^
"DATA",9002313.91,506,10,1,0)
S BPS("X")=""
"DATA",9002313.91,506,20,0)
^^1^1^3150112^
"DATA",9002313.91,506,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,506,30,0)
^9002313.9103^1^1^3150112^
"DATA",9002313.91,506,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,10)=BPS("X")
"DATA",9002313.91,507,0)
B61^^MONTH OF LAST PAID CLAIM^^^^^2^N
"DATA",9002313.91,507,5)
3K^^2061
"DATA",9002313.91,507,10,0)
^^1^1^3141223
"DATA",9002313.91,507,10,1,0)
S BPS("X")=""
"DATA",9002313.91,507,20,0)
^^1^1^3141223
"DATA",9002313.91,507,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,507,30,0)
^^1^1^3141223
"DATA",9002313.91,507,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B60"),U,1)=BPS("X")
"DATA",9002313.91,508,0)
B22^^HELP DESK TELEPHONE NUMBER EXT^^^^^8^N
"DATA",9002313.91,508,1)
HELP DESK TELEPHONE NUMBER EXTENSION
"DATA",9002313.91,508,5)
7P^^2022
"DATA",9002313.91,508,10,0)
^^1^1^3141223
"DATA",9002313.91,508,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,509,0)
B33^^PRO SERVICE FEE CONT/REIM AMT^^^^^6.2^D
"DATA",9002313.91,509,1)
PROFESSIONAL SERVICE FEE CONTRACTED/REIMBURSEMENT AMOUNT
"DATA",9002313.91,509,5)
6G^^2033
"DATA",9002313.91,509,10,0)
^^1^1^3141223
"DATA",9002313.91,509,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,510,0)
B23^^OTHER PAYER HELPDESK PHONE EXT^^^^^8^N
"DATA",9002313.91,510,1)
OTHER PAYER HELP DESK TELEPHONE NUMBER EXTENSION
"DATA",9002313.91,510,5)
7Q^^2023
"DATA",9002313.91,510,10,0)
^^1^1^3141223
"DATA",9002313.91,510,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,511,0)
B52^^RESPONSE INTERMEDIARY AUTH CNT^^^^^1^N
"DATA",9002313.91,511,1)
RESPONSE INTERMEDIARY AUTHORIZATION COUNT
"DATA",9002313.91,511,5)
8R^^2052
"DATA",9002313.91,511,10,0)
^^1^1^3141223
"DATA",9002313.91,511,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,512,0)
B53^^RESPONSE INTERMED AUTH TYPE ID^^^^^2^N
"DATA",9002313.91,512,1)
RESPONSE INTERMEDIARY AUTHORIZATION TYPE ID
"DATA",9002313.91,512,5)
8S^^2053
"DATA",9002313.91,512,10,0)
^^1^1^3141223
"DATA",9002313.91,512,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,513,0)
B54^^RESPONSE INTERMEDIARY AUTH ID^^^^^20^A/N
"DATA",9002313.91,513,1)
RESPONSE INTERMEDIARY AUTHORIZATION ID
"DATA",9002313.91,513,5)
8T^^2054
"DATA",9002313.91,513,10,0)
^^1^1^3141223
"DATA",9002313.91,513,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,514,0)
B51^^INTERMEDIARY MESSAGE^^^^^200^A/N
"DATA",9002313.91,514,5)
8Q^^2051
"DATA",9002313.91,514,10,0)
^^1^1^3141223
"DATA",9002313.91,514,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.93,1,0)
01^M/I Bin Number
"DATA",9002313.93,2,0)
02^M/I Version/Release Number
"DATA",9002313.93,3,0)
03^M/I Transaction Code
"DATA",9002313.93,4,0)
04^M/I Processor Control Number
"DATA",9002313.93,5,0)
05^M/I Service Provider Number
"DATA",9002313.93,6,0)
06^M/I Group ID
"DATA",9002313.93,7,0)
07^M/I Cardholder ID
"DATA",9002313.93,8,0)
08^M/I Person Code
"DATA",9002313.93,9,0)
09^M/I Date Of Birth
"DATA",9002313.93,10,0)
10^M/I Patient Gender Code
"DATA",9002313.93,11,0)
11^M/I Patient Relationship Code
"DATA",9002313.93,12,0)
12^M/I Place of Service
"DATA",9002313.93,13,0)
13^M/I Other Coverage Code
"DATA",9002313.93,14,0)
14^M/I Eligibility Clarification Code
"DATA",9002313.93,15,0)
15^M/I Date of Service
"DATA",9002313.93,16,0)
16^M/I Prescription/Service Reference Number
"DATA",9002313.93,17,0)
17^M/I Fill Number
"DATA",9002313.93,18,0)
18^M/I Metric Quantity
"DATA",9002313.93,19,0)
19^M/I Days Supply
"DATA",9002313.93,20,0)
20^M/I Compound Code
"DATA",9002313.93,21,0)
21^M/I Product/Service ID
"DATA",9002313.93,22,0)
22^M/I Dispense As Written (DAW)/Product Selection Code
"DATA",9002313.93,23,0)
23^M/I Ingredient Cost Submitted
"DATA",9002313.93,24,0)
24^M/I SALES TAX
"DATA",9002313.93,25,0)
25^M/I Prescriber ID
"DATA",9002313.93,26,0)
26^M/I Unit Of Measure
"DATA",9002313.93,27,0)
27^Product Identifier not FDA/NSDE Listed
"DATA",9002313.93,28,0)
28^M/I Date Prescription Written
"DATA",9002313.93,29,0)
29^M/I Number Of Refills Authorized
"DATA",9002313.93,30,0)
30^Reversal request outside processor reversal window
"DATA",9002313.93,31,0)
31^No matching paid claim found for reversal request
"DATA",9002313.93,32,0)
32^M/I Level Of Service
"DATA",9002313.93,33,0)
33^M/I Prescription Origin Code
"DATA",9002313.93,34,0)
34^M/I Submission Clarification Code
"DATA",9002313.93,35,0)
35^M/I Primary Care Provider ID
"DATA",9002313.93,36,0)
36^M/I Clinic ID
"DATA",9002313.93,37,0)
37^(FUTURE USE)
"DATA",9002313.93,38,0)
38^M/I Basis Of Cost Determination
"DATA",9002313.93,39,0)
39^M/I Diagnosis Code
"DATA",9002313.93,40,0)
40^Pharmacy Not Contracted With Plan On Date Of Service
"DATA",9002313.93,41,0)
41^Submit Bill To Other Processor Or Primary Payer
"DATA",9002313.93,42,0)
42^Plan's Prescriber database indicates Prescriber ID is inactive/expired
"DATA",9002313.93,43,0)
43^Plan DB indicates the assoc DEA to submitted Prescriber ID is inactive
"DATA",9002313.93,44,0)
44^Plan's Prescriber database indicates DEA to Prescriber ID not found
"DATA",9002313.93,45,0)
45^(FUTURE USE)
"DATA",9002313.93,46,0)
46^Assoc DEA to submitted Prescriber ID doesn't allow drug DEA Schedule
"DATA",9002313.93,47,0)
47^(FUTURE USE)
"DATA",9002313.93,48,0)
48^(FUTURE USE)
"DATA",9002313.93,49,0)
49^(FUTURE USE)
"DATA",9002313.93,50,0)
50^Non-Matched Pharmacy Number
"DATA",9002313.93,51,0)
51^Non-Matched Group ID
"DATA",9002313.93,52,0)
52^Non-Matched Cardholder ID
"DATA",9002313.93,53,0)
53^Non-Matched Person Code
"DATA",9002313.93,54,0)
54^Non-Matched Product/Service ID Number
"DATA",9002313.93,55,0)
55^Non-Matched Product Package Size
"DATA",9002313.93,56,0)
56^Non-Matched Prescriber ID
"DATA",9002313.93,57,0)
57^Non-Matched PA/MC Number
"DATA",9002313.93,58,0)
58^Non-Matched Primary Prescriber
"DATA",9002313.93,59,0)
59^Non-Matched Clinic ID
"DATA",9002313.93,60,0)
60^Product/Service Not Covered For Patient Age
"DATA",9002313.93,61,0)
61^Product/Service Not Covered For Patient Gender
"DATA",9002313.93,62,0)
62^Patient/Card Holder ID Name Mismatch
"DATA",9002313.93,63,0)
63^Product/Service ID Not Covered For Institutionalized Patient
"DATA",9002313.93,64,0)
64^Claim Submitted Does Not Match Prior Authorization
"DATA",9002313.93,65,0)
65^Patient Is Not Covered
"DATA",9002313.93,66,0)
66^Patient Age Exceeds Maximum Age
"DATA",9002313.93,67,0)
67^Filled Before Coverage Effective
"DATA",9002313.93,68,0)
68^Filled After Coverage Expired
"DATA",9002313.93,69,0)
69^Filled After Coverage Terminated
"DATA",9002313.93,70,0)
70^Product/Service Not Covered - Plan/Benefit Exclusion
"DATA",9002313.93,71,0)
71^Prescriber ID Is Not Covered
"DATA",9002313.93,72,0)
72^Primary Prescriber Is Not Covered
"DATA",9002313.93,73,0)
73^Refills Are Not Covered
"DATA",9002313.93,74,0)
74^Other Carrier Payment Meets Or Exceeds Payable
"DATA",9002313.93,75,0)
75^Prior Authorization Required
"DATA",9002313.93,76,0)
76^Plan Limitations Exceeded
"DATA",9002313.93,77,0)
77^Discontinued Product/Service ID Number
"DATA",9002313.93,78,0)
78^Cost Exceeds Maximum
"DATA",9002313.93,79,0)
79^Refill Too Soon
"DATA",9002313.93,80,0)
80^Drug-Diagnosis Mismatch
"DATA",9002313.93,81,0)
81^Claim Too Old
"DATA",9002313.93,82,0)
82^Claim Is Post-Dated
"DATA",9002313.93,83,0)
83^Duplicate Paid/Captured Claim
"DATA",9002313.93,84,0)
84^Claim Has Not Been Paid/Captured
"DATA",9002313.93,85,0)
85^Claim Not Processed
"DATA",9002313.93,86,0)
86^Submit Manual Reversal
"DATA",9002313.93,87,0)
87^Reversal Not Processed
"DATA",9002313.93,88,0)
88^DUR Reject Error
"DATA",9002313.93,89,0)
89^Rejected Claim Fees Paid
"DATA",9002313.93,90,0)
90^Host Hung Up
"DATA",9002313.93,91,0)
91^Host Response Error
"DATA",9002313.93,92,0)
92^System Unavailable/Host Unavailable
"DATA",9002313.93,93,0)
93^Planned Unavailable
"DATA",9002313.93,94,0)
94^Invalid Message
"DATA",9002313.93,95,0)
95^Time Out
"DATA",9002313.93,96,0)
96^Scheduled Downtime
"DATA",9002313.93,97,0)
97^Payer Unavailable
"DATA",9002313.93,98,0)
98^Connection To Payer Is Down
"DATA",9002313.93,99,0)
99^Host Processing Error
"DATA",9002313.93,100,0)
CA^M/I Patient First Name
"DATA",9002313.93,101,0)
CB^M/I Patient Last Name
"DATA",9002313.93,102,0)
CC^M/I Cardholder First Name
"DATA",9002313.93,103,0)
CD^M/I Cardholder Last Name
"DATA",9002313.93,104,0)
CE^M/I Home Plan
"DATA",9002313.93,105,0)
CF^M/I Employer Name
"DATA",9002313.93,106,0)
CG^M/I Employer Street Address
"DATA",9002313.93,107,0)
CH^M/I Employer City Address
"DATA",9002313.93,108,0)
CI^M/I Employer State/Province Address
"DATA",9002313.93,109,0)
CJ^M/I Employer Zip Postal Zone
"DATA",9002313.93,110,0)
CK^M/I Employer Phone Number
"DATA",9002313.93,111,0)
CL^M/I Employer Contact Name
"DATA",9002313.93,112,0)
CM^M/I Patient Street Address
"DATA",9002313.93,113,0)
CN^M/I Patient City Address
"DATA",9002313.93,114,0)
CO^M/I Patient State/Province Address
"DATA",9002313.93,115,0)
CP^M/I Patient Zip/Postal Zone
"DATA",9002313.93,116,0)
CQ^M/I Patient Phone Number
"DATA",9002313.93,117,0)
CR^M/I Carrier ID
"DATA",9002313.93,118,0)
CT^Patient Social Security Number
"DATA",9002313.93,119,0)
DP^M/I DRUG TYPE OVERRIDE
"DATA",9002313.93,120,0)
DR^M/I Prescriber Last Name
"DATA",9002313.93,121,0)
DQ^M/I Usual And Customary Charge
"DATA",9002313.93,122,0)
DS^M/I Postage Amount Claimed
"DATA",9002313.93,123,0)
DT^M/I Special Packaging Indicator
"DATA",9002313.93,124,0)
DU^M/I Gross Amount Due
"DATA",9002313.93,125,0)
DV^M/I Other Payer Amount Paid
"DATA",9002313.93,126,0)
DW^M/I Basis Of Days Supply Determination
"DATA",9002313.93,127,0)
DX^M/I Patient Paid Amount Submitted
"DATA",9002313.93,128,0)
DY^M/I Date Of Injury
"DATA",9002313.93,129,0)
DZ^M/I Claim/Reference ID
"DATA",9002313.93,130,0)
E1^M/I Product/Service ID Qualifier
"DATA",9002313.93,131,0)
E2^M/I Route of Administration
"DATA",9002313.93,132,0)
E3^M/I Incentive Amount Submitted
"DATA",9002313.93,133,0)
E4^M/I Reason For Service Code
"DATA",9002313.93,134,0)
E5^M/I Professional Service Code
"DATA",9002313.93,135,0)
E6^M/I Result Of Service Code
"DATA",9002313.93,136,0)
E7^M/I Quantity Dispensed
"DATA",9002313.93,137,0)
E8^M/I Other Payer Date
"DATA",9002313.93,138,0)
M1^Patient Not Covered In This Aid Category
"DATA",9002313.93,139,0)
M2^Recipient Locked In
"DATA",9002313.93,140,0)
M3^Host PA/MC Error
"DATA",9002313.93,141,0)
M4^Prescription/Service Reference Number/Time Limit Exceeded
"DATA",9002313.93,142,0)
M5^Requires Manual Claim
"DATA",9002313.93,143,0)
M6^Host Eligibility Error
"DATA",9002313.93,144,0)
M7^Host Drug File Error
"DATA",9002313.93,145,0)
M8^Host Provider File Error
"DATA",9002313.93,146,0)
MZ^Error Overflow
"DATA",9002313.93,147,0)
1C^M/I Smoker/Non-Smoker Code
"DATA",9002313.93,148,0)
1E^M/I Prescriber Location Code
"DATA",9002313.93,149,0)
2C^M/I Pregnancy Indicator
"DATA",9002313.93,150,0)
2E^M/I Primary Care Provider ID Qualifier
"DATA",9002313.93,151,0)
3A^M/I Request Type
"DATA",9002313.93,152,0)
3B^M/I Request Period Date-Begin
"DATA",9002313.93,153,0)
3C^M/I Request Period Date-End
"DATA",9002313.93,154,0)
3D^M/I Basis Of Request
"DATA",9002313.93,155,0)
3E^M/I Authorized Representative First Name
"DATA",9002313.93,156,0)
3F^M/I Authorized Representative Last Name
"DATA",9002313.93,157,0)
3G^M/I Authorized Representative Street Address
"DATA",9002313.93,158,0)
3H^M/I Authorized Representative City Address
"DATA",9002313.93,159,0)
3J^M/I Authorized Representative State/Province Address
"DATA",9002313.93,160,0)
3K^M/I Authorized Representative Zip/Postal Zone
"DATA",9002313.93,161,0)
3M^M/I Prescriber Phone Number
"DATA",9002313.93,162,0)
3N^M/I Prior Authorized Number-Assigned
"DATA",9002313.93,163,0)
3P^M/I Authorization Number
"DATA",9002313.93,164,0)
3R^Prior Authorization Not Required
"DATA",9002313.93,165,0)
3S^M/I Prior Authorization Supporting Documentation
"DATA",9002313.93,166,0)
3T^Active Prior Auth Exists Resubmit At Expiration Of Prior Auth
"DATA",9002313.93,167,0)
3W^Prior Authorization In Process
"DATA",9002313.93,168,0)
3X^Authorization Number Not Found
"DATA",9002313.93,169,0)
3Y^Prior Authorization Denied
"DATA",9002313.93,170,0)
4C^M/I Coordination Of Benefits/Other Payments Count
"DATA",9002313.93,171,0)
4E^M/I Primary Care Provider Last Name
"DATA",9002313.93,172,0)
5C^M/I Other Payer Coverage Type
"DATA",9002313.93,173,0)
5E^M/I Other Payer Reject Count
"DATA",9002313.93,174,0)
6C^M/I Other Payer ID Qualifier
"DATA",9002313.93,175,0)
6E^M/I Other Payer Reject Code
"DATA",9002313.93,176,0)
7C^M/I Other Payer ID
"DATA",9002313.93,177,0)
7E^M/I DUR/PPS Code Counter
"DATA",9002313.93,178,0)
8C^M/I Facility ID
"DATA",9002313.93,179,0)
8E^M/I DUR/PPS Level Of Effort
"DATA",9002313.93,180,0)
AA^Patient Spenddown Not Met
"DATA",9002313.93,181,0)
AB^Date Written Is After Date Filled
"DATA",9002313.93,182,0)
AC^Product Not Covered Non-Participating Manufacturer
"DATA",9002313.93,183,0)
AD^Billing Provider Not Eligible To Bill This Claim Type
"DATA",9002313.93,184,0)
AE^QMB (Qualified Medicare Beneficiary)-Bill Medicare
"DATA",9002313.93,185,0)
AF^Patient Enrolled Under Managed Care
"DATA",9002313.93,186,0)
AG^Days Supply Limitation For Product/Service
"DATA",9002313.93,187,0)
AH^Unit Dose Packaging Only Payable For Nursing Home Recipients
"DATA",9002313.93,188,0)
AJ^Generic Drug Required
"DATA",9002313.93,189,0)
AK^M/I Software Vendor/Certification ID
"DATA",9002313.93,190,0)
AM^M/I Segment Identification
"DATA",9002313.93,191,0)
A9^M/I Transaction Count
"DATA",9002313.93,192,0)
BE^M/I Professional Service Fee Submitted
"DATA",9002313.93,193,0)
B2^M/I Service Provider ID Qualifier
"DATA",9002313.93,194,0)
CW^M/I Alternate ID
"DATA",9002313.93,195,0)
CX^M/I Patient ID Qualifier
"DATA",9002313.93,196,0)
CY^M/I Patient ID
"DATA",9002313.93,197,0)
CZ^M/I Employer ID
"DATA",9002313.93,198,0)
DC^M/I Dispensing Fee Submitted
"DATA",9002313.93,199,0)
DN^M/I Basis Of Cost Determination
"DATA",9002313.93,200,0)
EA^M/I Originally Prescribed Product/Service Code
"DATA",9002313.93,201,0)
EB^M/I Originally Prescribed Quantity
"DATA",9002313.93,202,0)
EC^M/I Compound Ingredient Component Count
"DATA",9002313.93,203,0)
ED^M/I Compound Ingredient Quantity
"DATA",9002313.93,204,0)
EE^M/I Compound Ingredient Drug Cost
"DATA",9002313.93,205,0)
EF^M/I Compound Dosage Form Description Code
"DATA",9002313.93,206,0)
EG^M/I Compound Dispensing Unit Form Indicator
"DATA",9002313.93,207,0)
EH^M/I Compound Route of Administration
"DATA",9002313.93,208,0)
EJ^M/I Originally Prescribed Product/Service ID Qualifier
"DATA",9002313.93,209,0)
EK^M/I Scheduled Prescription ID Number
"DATA",9002313.93,210,0)
EM^M/I Prescription/Service Reference Number Qualifier
"DATA",9002313.93,211,0)
EN^M/I Associated Prescription/Service Reference Number
"DATA",9002313.93,212,0)
Ep^M/I Associated Prescription/Service Date
"DATA",9002313.93,213,0)
ER^M/I Procedure Modifier Code
"DATA",9002313.93,214,0)
ET^M/I Quantity Prescribed
"DATA",9002313.93,215,0)
EU^M/I Prior Authorization Type Code
"DATA",9002313.93,216,0)
EV^M/I Prior Authorization Number Submitted
"DATA",9002313.93,217,0)
EW^M/I Intermediary Authorization Type ID
"DATA",9002313.93,218,0)
EX^M/I Intermediary Authorization ID
"DATA",9002313.93,219,0)
EY^M/I Provider ID Qualifier
"DATA",9002313.93,220,0)
EZ^M/I Prescriber ID Qualifier
"DATA",9002313.93,221,0)
E9^M/I Provider ID
"DATA",9002313.93,222,0)
FO^M/I Plan ID
"DATA",9002313.93,223,0)
GE^M/I Percentage Sales Tax Amount Submitted
"DATA",9002313.93,224,0)
HA^M/I Flat Sales Tax Amount Submitted
"DATA",9002313.93,225,0)
HB^M/I Other Payer Amount Paid Count
"DATA",9002313.93,226,0)
HC^M/I Other Payer Amount Paid Qualifier
"DATA",9002313.93,227,0)
HD^M/I Dispensing Status
"DATA",9002313.93,228,0)
HE^M/I Percentage Sales Tax Rate Submitted
"DATA",9002313.93,229,0)
HF^M/I Quantity Intended To Be Dispensed
"DATA",9002313.93,230,0)
HG^M/I Days Supply Intended To Be Dispensed
"DATA",9002313.93,231,0)
H1^M/I Measurement Time
"DATA",9002313.93,232,0)
H2^M/I Measurement Dimension
"DATA",9002313.93,233,0)
H3^M/I Measurement Unit
"DATA",9002313.93,234,0)
H4^M/I Measurement Value
"DATA",9002313.93,235,0)
H5^M/I Primary Care Provider Location Code
"DATA",9002313.93,236,0)
H6^M/I DUR Co-Agent ID
"DATA",9002313.93,237,0)
H7^M/I Other Amount Claimed Submitted Count
"DATA",9002313.93,238,0)
H8^M/I Other Amount Claimed Submitted Qualifier
"DATA",9002313.93,239,0)
H9^M/I Other Amount Claimed Submitted
"DATA",9002313.93,240,0)
JE^M/I Percentage Sales Tax Basis Submitted
"DATA",9002313.93,241,0)
J9^M/I DUR Co-Agent ID Qualifier
"DATA",9002313.93,242,0)
KE^M/I Coupon Type
"DATA",9002313.93,243,0)
ME^M/I Coupon Number
"DATA",9002313.93,244,0)
NE^M/I Coupon Value Amount
"DATA",9002313.93,245,0)
NN^Transaction Rejected At Switch Or Intermediary
"DATA",9002313.93,246,0)
PA^PA Exhausted/Not Renewable
"DATA",9002313.93,247,0)
PB^Invalid Transaction Count For This Transaction Code
"DATA",9002313.93,248,0)
PC^M/I Request Claim Segment
"DATA",9002313.93,249,0)
PD^M/I Request Clinical Segment
"DATA",9002313.93,250,0)
PE^M/I Request Coordination Of Benefits/Other Payments Segment
"DATA",9002313.93,251,0)
PF^M/I Request Compound Segment
"DATA",9002313.93,252,0)
PG^M/I Request Coupon Segment
"DATA",9002313.93,253,0)
PH^M/I Request DUR/PPS Segment
"DATA",9002313.93,254,0)
PJ^M/I Request Insurance Segment
"DATA",9002313.93,255,0)
PK^M/I Request Patient Segment
"DATA",9002313.93,256,0)
PM^M/I Request Pharmacy Provider Segment
"DATA",9002313.93,257,0)
PN^M/I Request Prescriber Segment
"DATA",9002313.93,258,0)
PP^M/I Request Pricing Segment
"DATA",9002313.93,259,0)
PR^M/I Request Prior Authorization Segment
"DATA",9002313.93,260,0)
PS^M/I Transaction Header Segment
"DATA",9002313.93,261,0)
PT^M/I Request Worker's Compensation Segment
"DATA",9002313.93,262,0)
PV^Non-Matched Associated Prescription/Service Date
"DATA",9002313.93,263,0)
PW^Employer ID Not Covered
"DATA",9002313.93,264,0)
PX^Other Payer ID Not Covered
"DATA",9002313.93,265,0)
PY^Non-Matched Unit Form/Route of Administration
"DATA",9002313.93,266,0)
PZ^Non-Matched Unit Of Measure To Product/Service ID
"DATA",9002313.93,267,0)
P1^Associated Prescription/Service Reference Number Not Found
"DATA",9002313.93,268,0)
P2^Clinical Information Counter Out Of Sequence
"DATA",9002313.93,269,0)
P3^Compound Ingredient Component Count Doesn't Match # Of Repetitions
"DATA",9002313.93,270,0)
P4^COB/Other Payments Count Does Not Match Number Of Repetitions
"DATA",9002313.93,271,0)
P5^Coupon Expired
"DATA",9002313.93,272,0)
P6^Date Of Service Prior To Date Of Birth
"DATA",9002313.93,273,0)
P7^Diagnosis Code Count Does Not Match Number Of Repetitions
"DATA",9002313.93,274,0)
P8^DUR/PPS Code Counter Out Of Sequence
"DATA",9002313.93,275,0)
P9^Field Is Non-Repeatable
"DATA",9002313.93,276,0)
RA^PA Reversal Out Of Order
"DATA",9002313.93,277,0)
RB^Multiple Partials Not Allowed
"DATA",9002313.93,278,0)
RC^Different Drug Entity Between Partial & Completion
"DATA",9002313.93,279,0)
RD^Mismatched Cardholder/Group ID-Partial To Completion
"DATA",9002313.93,280,0)
RE^M/I Compound Product ID Qualifier
"DATA",9002313.93,281,0)
RF^Improper Order Of 'Dispensing Status' Code On Partial Fill Transaction
"DATA",9002313.93,282,0)
RG^M/I Associated Rx/Service Reference # On Completion Transaction
"DATA",9002313.93,283,0)
RH^M/I Associated Prescription/Service Date On Completion Transaction
"DATA",9002313.93,284,0)
RJ^Associated Partial Fill Transaction Not On File
"DATA",9002313.93,285,0)
RK^Partial Fill Transaction Not Supported
"DATA",9002313.93,286,0)
RM^Compl Trans Not Permitted With Same 'Date Of Service' As Partial Trans
"DATA",9002313.93,287,0)
RN^Plan Limits Exceeded On Intended Partial Fill Field Limitations
"DATA",9002313.93,288,0)
RP^Out Of Sequence 'P' Reversal On Partial Fill Transaction
"DATA",9002313.93,289,0)
RS^M/I Associated Prescription/Service Date On Partial Transaction
"DATA",9002313.93,290,0)
RT^M/I Associated Prescription/Service Reference Number On Partial Trans
"DATA",9002313.93,291,0)
RU^Mandatory Elements Must Occur Before Optional Data Elements In Segment
"DATA",9002313.93,292,0)
R1^Other Amount Claimed Submitted Count Does Not Match # of Repetitions
"DATA",9002313.93,293,0)
R2^Other Payer Reject Count Does Not Match Number Of Repetitions
"DATA",9002313.93,294,0)
R3^Procedure Modifier Code Count Does Not Match Number Of Repetitions
"DATA",9002313.93,295,0)
R4^Procedure Modifier Code Invalid For Product/Service ID
"DATA",9002313.93,296,0)
R5^Product/Service ID Must Be Zero When Product/Service ID Qual Equals 06
"DATA",9002313.93,297,0)
R6^Product/Service Not Appropriate For This Location
"DATA",9002313.93,298,0)
R7^Repeating Segment Not Allowed In Same Transaction
"DATA",9002313.93,299,0)
R8^Syntax Error
"DATA",9002313.93,300,0)
R9^Value In Gross Amount Due Does Not Follow Pricing Formulae
"DATA",9002313.93,301,0)
SE^M/I Procedure Modifier Code Count
"DATA",9002313.93,302,0)
TE^Missing/Invalid Compound Product ID
"DATA",9002313.93,303,0)
UE^M/I Compound Ingredient Basis Of Cost Determination
"DATA",9002313.93,304,0)
VE^M/I Diagnosis Code Count
"DATA",9002313.93,305,0)
WE^M/I Diagnosis Code Qualifier
"DATA",9002313.93,306,0)
XE^M/I Clinical Information Counter
"DATA",9002313.93,307,0)
ZE^M/I Measurement Date
"DATA",9002313.93,308,0)
*95^The Clearinghous did not respond in time
"DATA",9002313.93,309,0)
*96^Scheduled Downtime
"DATA",9002313.93,310,0)
*97^Payor Unavailable
"DATA",9002313.93,311,0)
*98^Connection To Payer Is Down
"DATA",9002313.93,312,0)
*95^The Clearinghouse Did Not Respond In Time.
"DATA",9002313.93,313,0)
*97^Payer Unavailable
"DATA",9002313.93,314,0)
1R^Version/Release Value Not Supported
"DATA",9002313.93,315,0)
1S^Transaction Code/Type Value Not Supported
"DATA",9002313.93,316,0)
1T^PCN Must Contain Processor/Payer Assigned Value
"DATA",9002313.93,317,0)
1U^Transaction Count Does Not Match Number of Transactions
"DATA",9002313.93,318,0)
1V^Multiple Transactions Not Supported
"DATA",9002313.93,319,0)
1W^Multi-Ingredient Compound Must Be A Single Transaction
"DATA",9002313.93,320,0)
1X^Vendor Not Certified For Processor/Payer
"DATA",9002313.93,321,0)
1Y^Claim Segment Required For Adjudication
"DATA",9002313.93,322,0)
1Z^Clinical Segment Required For Adjudication
"DATA",9002313.93,323,0)
2A^M/I Medigap ID
"DATA",9002313.93,324,0)
2B^M/I Medicaid Indicator
"DATA",9002313.93,325,0)
2D^M/I Provider Accept Assignment Indicator
"DATA",9002313.93,326,0)
2G^M/I Compound Ingredient Modifier Code Count
"DATA",9002313.93,327,0)
2H^M/I Compound Ingredient Modifier Code
"DATA",9002313.93,328,0)
2J^M/I Prescriber First Name
"DATA",9002313.93,329,0)
2K^M/I Prescriber Street Address
"DATA",9002313.93,330,0)
2M^M/I Prescriber City Address
"DATA",9002313.93,331,0)
2N^M/I Prescriber State/Province Address
"DATA",9002313.93,332,0)
2P^M/I Prescriber Zip/Postal Zone
"DATA",9002313.93,333,0)
2Q^M/I Additional Documentation Type ID
"DATA",9002313.93,334,0)
2R^M/I Length of Need
"DATA",9002313.93,335,0)
2S^M/I Length of Need Qualifier
"DATA",9002313.93,336,0)
2T^M/I Prescriber/Supplier Date Signed
"DATA",9002313.93,337,0)
2U^M/I Request Status
"DATA",9002313.93,338,0)
2V^M/I Request Period Begin Date
"DATA",9002313.93,339,0)
2W^M/I Request Period Recert/Revised Date
"DATA",9002313.93,340,0)
2X^M/I Supporting Documentation
"DATA",9002313.93,341,0)
2Z^M/I Question Number/Letter Count
"DATA",9002313.93,342,0)
3Q^M/I Facility Name
"DATA",9002313.93,343,0)
3U^M/I Facility Street Address
"DATA",9002313.93,344,0)
3V^M/I Facility State/Province Address
"DATA",9002313.93,345,0)
4B^M/I Question Number/Letter
"DATA",9002313.93,346,0)
4D^M/I Question Percent Response
"DATA",9002313.93,347,0)
4G^M/I Question Date Response
"DATA",9002313.93,348,0)
4H^M/I Question Dollar Amount Response
"DATA",9002313.93,349,0)
4J^M/I Question Numeric Response
"DATA",9002313.93,350,0)
4K^M/I Question Alphanumeric Response
"DATA",9002313.93,351,0)
4M^Compound Ingredient Modifier Code Count Doesn't Match # of Repetitions
"DATA",9002313.93,352,0)
4N^Question Number/Letter Count Does Not Match Number of Repetitions
"DATA",9002313.93,353,0)
4P^Question Number/Letter Not Valid for Identified Document
"DATA",9002313.93,354,0)
4Q^Question Response Not Appropriate for Question Number/Letter
"DATA",9002313.93,355,0)
4R^Required Question Num/Letter Response for Indicated Document Missing
"DATA",9002313.93,356,0)
4S^Compound Product ID Requires a Modifier Code
"DATA",9002313.93,357,0)
4T^M/I Additional Documentation Segment
"DATA",9002313.93,358,0)
4W^Must Fill Through Specialty Pharmacy
"DATA",9002313.93,359,0)
4X^M/I Patient Residence
"DATA",9002313.93,360,0)
4Y^Patient Residence Value Not Supported
"DATA",9002313.93,361,0)
4Z^Place of Service Not Supported By Plan
"DATA",9002313.93,362,0)
5J^M/I Facility City Address
"DATA",9002313.93,363,0)
6D^M/I Facility Zip/Postal Zone
"DATA",9002313.93,364,0)
6G^COB/Other Payments Segment Required For Adjudication
"DATA",9002313.93,365,0)
6H^Coupon Segment Required For Adjudication
"DATA",9002313.93,366,0)
6J^Insurance Segment Required For Adjudication
"DATA",9002313.93,367,0)
6K^Patient Segment Required For Adjudication
"DATA",9002313.93,368,0)
6M^Pharmacy Provider Segment Required For Adjudication
"DATA",9002313.93,369,0)
6N^Prescriber Segment Required For Adjudication
"DATA",9002313.93,370,0)
6P^Pricing Segment Required For Adjudication
"DATA",9002313.93,371,0)
6Q^Prior Authorization Segment Required For Adjudication
"DATA",9002313.93,372,0)
6R^Worker's Compensation Segment Required For Adjudication
"DATA",9002313.93,373,0)
6S^Transaction Segment Required For Adjudication
"DATA",9002313.93,374,0)
6T^Compound Segment Required For Adjudication
"DATA",9002313.93,375,0)
6U^Compound Segment Incorrectly Formatted
"DATA",9002313.93,376,0)
6V^Multi-ingredient Compounds Not Supported
"DATA",9002313.93,377,0)
6W^DUR/PPS Segment Required For Adjudication
"DATA",9002313.93,378,0)
6X^DUR/PPS Segment Incorrectly Formatted
"DATA",9002313.93,379,0)
6Y^Not Authorized To Submit Electronically
"DATA",9002313.93,380,0)
6Z^Provider Not Eligible To Perform Service/Dispense Product
"DATA",9002313.93,381,0)
7A^Provider Does Not Match Authorization On File
"DATA",9002313.93,382,0)
7B^Service Provider ID Qualifier Value Not Supported For Processor/Payer
"DATA",9002313.93,383,0)
7D^Non-Matched DOB
"DATA",9002313.93,384,0)
7G^Future Date Not Allowed For DOB
"DATA",9002313.93,385,0)
7H^Non-Matched Gender Code
"DATA",9002313.93,386,0)
7J^Patient Relationship Code Value Not Supported
"DATA",9002313.93,387,0)
7K^Discrepancy Between Other Coverage Code And Other Payer Amount
"DATA",9002313.93,388,0)
7M^Discrepancy Between Other Coverage Code & Other Coverage Info On File
"DATA",9002313.93,389,0)
7N^Patient ID Qualifier Value Not Supported
"DATA",9002313.93,390,0)
7P^COB/Other Payments Count Exceeds Number of Supported Payers
"DATA",9002313.93,391,0)
7Q^Other Payer ID Qualifier Value Not Supported
"DATA",9002313.93,392,0)
7R^Other Payer Amount Paid Count Exceeds Number of Supported Groupings
"DATA",9002313.93,393,0)
7S^Other Payer Amount Paid Qualifier Value Not Supported
"DATA",9002313.93,394,0)
7T^Quantity Intended To Be Dispensed Required For Partial Fill Trans
"DATA",9002313.93,395,0)
7U^Days Supply Intended To Be Dispensed Required For Partial Fill Trans
"DATA",9002313.93,396,0)
7V^Duplicate Refills
"DATA",9002313.93,397,0)
7W^Refills Exceed allowable Refills
"DATA",9002313.93,398,0)
7X^Days Supply Exceeds Plan Limitation
"DATA",9002313.93,399,0)
7Y^Compounds Not Covered
"DATA",9002313.93,400,0)
7Z^Compound Requires Two Or More Ingredients
"DATA",9002313.93,401,0)
8A^Compound Requires At Least One Covered Ingredient
"DATA",9002313.93,402,0)
8B^Compound Segment Missing On A Compound Claim
"DATA",9002313.93,403,0)
8D^Compound Segment Present On A Non-Compound Claim
"DATA",9002313.93,404,0)
8G^Product/Service ID (407-D7) Must Be A Single Zero '0' For Compounds
"DATA",9002313.93,405,0)
8H^Product/Service Only Covered On Compound Claim
"DATA",9002313.93,406,0)
8J^Incorrect Product/Service ID For Processor/Payer
"DATA",9002313.93,407,0)
8K^DAW Code Value Not Supported
"DATA",9002313.93,408,0)
8M^Sum Of Compound Ingredient Costs Does Not Equal Ingredient Cost
"DATA",9002313.93,409,0)
8N^Future Date Prescription Written Not Allowed
"DATA",9002313.93,410,0)
8P^Date Written Different On Previous Filling
"DATA",9002313.93,411,0)
8Q^Excessive Refills Authorized
"DATA",9002313.93,412,0)
8R^Submission Clarification Code Value Not Supported
"DATA",9002313.93,413,0)
8S^Basis Of Cost Determination Value Not Supported
"DATA",9002313.93,414,0)
8T^U&C Must Be Greater Than Zero
"DATA",9002313.93,415,0)
8U^GAD Must Be Greater Than Zero
"DATA",9002313.93,416,0)
8V^Negative Dollar Amount Is Not Supported In Other Payer Amount Paid
"DATA",9002313.93,417,0)
8W^Discrepancy Between Other Coverage Code and Other Payer Amount Paid
"DATA",9002313.93,418,0)
8X^Collection From Cardholder Not Allowed
"DATA",9002313.93,419,0)
8Y^Excessive Amount Collected
"DATA",9002313.93,420,0)
8Z^Product/Service ID Qualifier Value Not Supported
"DATA",9002313.93,421,0)
9B^Reason For Service Code Value Not Supported
"DATA",9002313.93,422,0)
9C^Professional Service Code Value Not Supported
"DATA",9002313.93,423,0)
9D^Result Of Service Code Value Not Supported
"DATA",9002313.93,424,0)
9E^Quantity Does Not Match Dispensing Unit
"DATA",9002313.93,425,0)
9G^Quantity Dispensed Exceeds Maximum Allowed
"DATA",9002313.93,426,0)
9H^Quantity Not Valid For Product/Service ID Submitted
"DATA",9002313.93,427,0)
9J^Future Other Payer Date Not Allowed
"DATA",9002313.93,428,0)
9K^Compound Ingredient Component Cnt Exceeds Num Of Ingredients Supported
"DATA",9002313.93,429,0)
9M^Minimum Of Two Ingredients Required
"DATA",9002313.93,430,0)
9N^Compound Ingredient Quantity Exceeds Maximum Allowed
"DATA",9002313.93,431,0)
9P^Compound Ingredient Drug Cost Must Be Greater Than Zero
"DATA",9002313.93,432,0)
9Q^Route Of Administration Submitted Not Covered
"DATA",9002313.93,433,0)
9R^Prescription/Service Reference Number Qualifier Submitted Not Covered
"DATA",9002313.93,434,0)
9S^Future Associated Prescription/Service Date Not Allowed
"DATA",9002313.93,435,0)
9T^Prior Authorization Type Code Submitted Not Covered
"DATA",9002313.93,436,0)
9U^Provider ID Qualifier Submitted Not Covered
"DATA",9002313.93,437,0)
9V^Prescriber ID Qualifier Submitted Not Covered
"DATA",9002313.93,438,0)
9W^DUR/PPS Code Counter Exceeds Number Of Occurrences Supported
"DATA",9002313.93,439,0)
9X^Coupon Type Submitted Not Covered
"DATA",9002313.93,440,0)
9Y^Compound Product ID Qualifier Submitted Not Covered
"DATA",9002313.93,441,0)
9Z^Duplicate Product ID In Compound
"DATA",9002313.93,442,0)
AQ^M/I Facility Segment
"DATA",9002313.93,443,0)
A5^Not Covered Under Part D Law
"DATA",9002313.93,444,0)
A6^This Product/Service May Be Covered Under Medicare Part B
"DATA",9002313.93,445,0)
A7^M/I Internal Control Number
"DATA",9002313.93,446,0)
BA^Compound Basis of Cost Determination Submitted Not Covered
"DATA",9002313.93,447,0)
BB^Diagnosis Code Qualifier Submitted Not Covered
"DATA",9002313.93,448,0)
BC^Future Measurement Date Not Allowed
"DATA",9002313.93,449,0)
BD^Sender Not Authorized To Submit File Type
"DATA",9002313.93,450,0)
BF^M/I File Type
"DATA",9002313.93,451,0)
BG^Sender ID Not Certified For Processor/Payer
"DATA",9002313.93,452,0)
BH^M/I Sender ID
"DATA",9002313.93,453,0)
BJ^Transmission Type Submitted Not Supported
"DATA",9002313.93,454,0)
BK^M/I Transmission Type
"DATA",9002313.93,455,0)
BM^M/I Narrative Message
"DATA",9002313.93,456,0)
EP^M/I Associated Prescription/Service Date
"DATA",9002313.93,457,0)
G1^M/I Compound Type
"DATA",9002313.93,458,0)
G2^M/I CMS Part D Defined Qualified Facility
"DATA",9002313.93,459,0)
G4^Physician must contact plan
"DATA",9002313.93,460,0)
G5^Pharmacist must contact plan
"DATA",9002313.93,461,0)
G6^Pharmacy Not Contracted in Specialty Network
"DATA",9002313.93,462,0)
G7^Pharmacy Not Contracted in Home Infusion Network
"DATA",9002313.93,463,0)
G8^Pharmacy Not Contracted in Long Term Care Network
"DATA",9002313.93,464,0)
G9^Pharmacy Not Contracted in 90 Day Retail Network
"DATA",9002313.93,465,0)
HN^M/I Patient E-Mail Address
"DATA",9002313.93,466,0)
K5^M/I Transaction Reference Number
"DATA",9002313.93,467,0)
MG^M/I Other Payer BIN Number
"DATA",9002313.93,468,0)
MH^M/I Other Payer Processor Control Number
"DATA",9002313.93,469,0)
MJ^M/I Other Payer Group ID
"DATA",9002313.93,470,0)
MK^Non-Matched Other Payer BIN Number
"DATA",9002313.93,471,0)
MM^Non-Matched Other Payer Processor Control Number
"DATA",9002313.93,472,0)
MN^Non-Matched Other Payer Group ID
"DATA",9002313.93,473,0)
MP^Other Payer Cardholder ID Not Covered
"DATA",9002313.93,474,0)
MR^Product Not On Formulary
"DATA",9002313.93,475,0)
MS^More than 1 Cardholder Found - Narrow Search Criteria
"DATA",9002313.93,476,0)
MT^M/I Patient Assignment Indicator
"DATA",9002313.93,477,0)
MU^M/I Benefit Stage Count
"DATA",9002313.93,478,0)
MV^M/I Benefit Stage Qualifier
"DATA",9002313.93,479,0)
MW^M/I Benefit Stage Amount
"DATA",9002313.93,480,0)
MX^Benefit Stage Count Does Not Match Number Of Repetitions
"DATA",9002313.93,481,0)
NP^M/I Other Payer-Patient Responsibility Amount Qualifier
"DATA",9002313.93,482,0)
NQ^M/I Other Payer-Patient Responsibility Amount
"DATA",9002313.93,483,0)
NR^M/I Other Payer-Patient Responsibility Amount Count
"DATA",9002313.93,484,0)
NU^M/I Other Payer Cardholder ID
"DATA",9002313.93,485,0)
NV^M/I Delay Reason Code
"DATA",9002313.93,486,0)
NX^M/I Submission Clarification Code Count
"DATA",9002313.93,487,0)
N1^No patient match found
"DATA",9002313.93,488,0)
N3^M/I Medicaid Paid Amount
"DATA",9002313.93,489,0)
N4^M/I Medicaid Subrogation Internal Ctrl Number/Transaction Ctrl Number
"DATA",9002313.93,490,0)
N5^M/I Medicaid ID Number
"DATA",9002313.93,491,0)
N6^M/I Medicaid Agency Number
"DATA",9002313.93,492,0)
N7^Use Prior Authorization Code Provided During Transition Period
"DATA",9002313.93,493,0)
N8^Use Prior Authorization Code Provided For Emergency Fill
"DATA",9002313.93,494,0)
N9^Use Prior Authorization Code Provided For Level of Care Change
"DATA",9002313.93,495,0)
PQ^M/I Narrative Segment
"DATA",9002313.93,496,0)
RL^Transitional Benefit/Resubmit Claim
"DATA",9002313.93,497,0)
RV^Multiple Reversals Per Transmission Not Supported
"DATA",9002313.93,498,0)
SF^Other Payer Amount Paid Count Does Not Match Number Of Repetitions
"DATA",9002313.93,499,0)
SG^Submission Clarification Code Count Doesn't Match # of Repetitions
"DATA",9002313.93,500,0)
SH^Other Payer-Patient Resp Amount Count Doesn't Match # of Repetitions
"DATA",9002313.93,501,0)
TN^Emergency Fill/Resubmit Claim
"DATA",9002313.93,502,0)
TP^Level of Care Change/Resubmit Claim
"DATA",9002313.93,503,0)
TQ^Dosage Exceeds Product Labeling Limit
"DATA",9002313.93,504,0)
TR^M/I Billing Entity Type Indicator
"DATA",9002313.93,505,0)
TS^M/I Pay To Qualifier
"DATA",9002313.93,506,0)
TT^M/I Pay To ID
"DATA",9002313.93,507,0)
TU^M/I Pay To Name
"DATA",9002313.93,508,0)
TV^M/I Pay To Street Address
"DATA",9002313.93,509,0)
TW^M/I Pay To City Address
"DATA",9002313.93,510,0)
TX^M/I Pay to State/Province Address
"DATA",9002313.93,511,0)
TY^M/I Pay To Zip/Postal Zone
"DATA",9002313.93,512,0)
TZ^M/I Generic Equivalent Product ID Qualifier
"DATA",9002313.93,513,0)
UA^M/I Generic Equivalent Product ID
"DATA",9002313.93,514,0)
UU^DAW 0 cannot be submitted on a multi-source drug w/available generics
"DATA",9002313.93,515,0)
UZ^Other Payer Coverage Type required on reversals to downstream payers
"DATA",9002313.93,516,0)
U7^M/I Pharmacy Service Type
"DATA",9002313.93,517,0)
VA^Pay To Qualifier Value Not Supported
"DATA",9002313.93,518,0)
VB^Generic Equivalent Product ID Qualifier Value Not Supported
"DATA",9002313.93,519,0)
VC^Pharmacy Service Type Value Not Supported
"DATA",9002313.93,520,0)
VD^Eligibility Search Time Frame Exceeded
"DATA",9002313.93,521,0)
ZA^The COB/Other Payments Segment is mandatory to a downstream payer
"DATA",9002313.93,522,0)
eT^TRICARE-DRUG NON BILLABLE
"DATA",9002313.93,523,0)
MY^M/I Address Count
"DATA",9002313.93,524,0)
NA^M/I Address Qualifier
"DATA",9002313.93,525,0)
NB^M/I Client Name
"DATA",9002313.93,526,0)
NC^M/I Discontinue Date Qualifier
"DATA",9002313.93,527,0)
ND^M/I Discontinue Date
"DATA",9002313.93,528,0)
NF^M/I Easy Open Cap Indicator
"DATA",9002313.93,529,0)
NG^M/I Effective Date
"DATA",9002313.93,530,0)
NH^M/I Expiration Date
"DATA",9002313.93,531,0)
NJ^M/I File Structure Type
"DATA",9002313.93,532,0)
NK^M/I Inactive Prescription Indicator
"DATA",9002313.93,533,0)
NM^M/I Label Directions
"DATA",9002313.93,534,0)
NW^M/I Most Recent Date Filled
"DATA",9002313.93,535,0)
NY^M/I Number Of Fills To-Date
"DATA",9002313.93,536,0)
PU^M/I Number Of Fills Remaining
"DATA",9002313.93,537,0)
P0^Non-zero Value Required for Vaccine Administration
"DATA",9002313.93,538,0)
RQ^M/I Original Dispensed Date
"DATA",9002313.93,539,0)
RR^M/I Patient ID Qualifier Count
"DATA",9002313.93,540,0)
RW^M/I Prescribed Drug Description
"DATA",9002313.93,541,0)
RX^M/I Prescriber ID Count
"DATA",9002313.93,542,0)
RY^M/I Prescriber Specialty
"DATA",9002313.93,543,0)
RZ^M/I Prescriber Specialty Count
"DATA",9002313.93,544,0)
R0^Professional Service Code Required For Vaccine Incentive Fee
"DATA",9002313.93,545,0)
S0^Accumulator Month Count Does Not Match Number of Repetitions
"DATA",9002313.93,546,0)
S1^M/I Accumulator Year
"DATA",9002313.93,547,0)
S2^M/I Transaction Identifier
"DATA",9002313.93,548,0)
S3^M/I Accumulated Patient True Out Of Pocket Amount
"DATA",9002313.93,549,0)
S4^M/I Accumulated Gross Covered Drug Cost Amount
"DATA",9002313.93,550,0)
S5^M/I DateTime
"DATA",9002313.93,551,0)
S6^M/I Accumulator Month
"DATA",9002313.93,552,0)
S7^M/I Accumulator Month Count
"DATA",9002313.93,553,0)
S8^Non-Matched Transaction Identifier
"DATA",9002313.93,554,0)
S9^M/I Financial Information Reporting Transaction Header Segment
"DATA",9002313.93,555,0)
SA^M/I Quantity Dispensed To Date
"DATA",9002313.93,556,0)
SB^M/I Record Delimiter
"DATA",9002313.93,557,0)
SC^M/I Remaining Quantity
"DATA",9002313.93,558,0)
SD^M/I Sender Name
"DATA",9002313.93,559,0)
SJ^M/I Total Number Of Sending And Receiving Pharmacy Records
"DATA",9002313.93,560,0)
SK^M/I Transfer Flag
"DATA",9002313.93,561,0)
SM^M/I Transfer Type
"DATA",9002313.93,562,0)
SN^M/I Package Acquisition Cost
"DATA",9002313.93,563,0)
SP^M/I Unique Record Identifier
"DATA",9002313.93,564,0)
SQ^M/I Unique Record Identifier Qualifier
"DATA",9002313.93,565,0)
SW^Accum Patient True Out of Pocket must be equal to or greater than zero
"DATA",9002313.93,566,0)
TD^M/I Pharmacist Initials
"DATA",9002313.93,567,0)
TG^Address Count Does Not Match Number Of Repetitions
"DATA",9002313.93,568,0)
TH^Patient ID Qualifier Count Does Not Match Number Of Repetitions
"DATA",9002313.93,569,0)
TJ^Prescriber ID Count Does Not Match Number Of Repetitions
"DATA",9002313.93,570,0)
TK^Prescriber Specialty Count Does Not Match Number Of Repetitions
"DATA",9002313.93,571,0)
TM^Telephone Number Count Does Not Match Number Of Repetitions
"DATA",9002313.93,572,0)
T0^Accumulator Month Count Exceeds Number of Occurrences Supported
"DATA",9002313.93,573,0)
T1^Request Financial Segment Required For Financial Information Reporting
"DATA",9002313.93,574,0)
T2^M/I Request Reference Segment
"DATA",9002313.93,575,0)
T3^Out of Order DateTime
"DATA",9002313.93,576,0)
T4^Duplicate DateTime
"DATA",9002313.93,577,0)
U0^M/I Sending Pharmacy ID
"DATA",9002313.93,578,0)
V0^M/I Telephone Number Count
"DATA",9002313.93,579,0)
W0^M/I Telephone Number Qualifier
"DATA",9002313.93,580,0)
W5^M/I Bed
"DATA",9002313.93,581,0)
W6^M/I Facility Unit
"DATA",9002313.93,582,0)
W7^M/I Hours of Administration
"DATA",9002313.93,583,0)
W8^M/I Room
"DATA",9002313.93,584,0)
W9^Accum Gross Cov Drug Cost Amt Must Be Equal To Or Greater Than Zero
"DATA",9002313.93,585,0)
X1^Accumulated Patient True Out of Pocket exceeds maximum
"DATA",9002313.93,586,0)
X2^Accumulated Gross Covered Drug Cost exceeds maximum
"DATA",9002313.93,587,0)
X3^Out of order Accumulator Months
"DATA",9002313.93,588,0)
X4^Accumulator Year not current or prior year
"DATA",9002313.93,589,0)
X5^M/I Financial Information Reporting Request Insurance Segment
"DATA",9002313.93,590,0)
X6^M/I Request Financial Segment
"DATA",9002313.93,591,0)
X7^Financial Info Reporting Req Ins Seg Required For Financial Reporting
"DATA",9002313.93,592,0)
X8^Procedure Modifier Code Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,593,0)
X9^Diagnosis Code Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,594,0)
YA^Compound Ingredient Mod Code Cnt Exceeds Num Of Occurrences Supported
"DATA",9002313.93,595,0)
YB^Other Amt Claimed Submitted Count Exceeds Num Of Occurrences Supported
"DATA",9002313.93,596,0)
YC^Other Payer Reject Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,597,0)
YD^Other Payer-Patient Resp Amt Cnt Exceeds Num Of Occurrences Supported
"DATA",9002313.93,598,0)
YE^Submission Clarification Code Cnt Exceeds Num of Occurrences Supported
"DATA",9002313.93,599,0)
YF^Question Number/Letter Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,600,0)
YG^Benefit Stage Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,601,0)
YH^Clinical Information Counter Exceeds Number of Occurrences Supported
"DATA",9002313.93,602,0)
YJ^Medicaid Agency Number Not Supported
"DATA",9002313.93,604,0)
201^Patient Segment is not used for this Transaction Code
"DATA",9002313.93,605,0)
202^Insurance Segment is not used for this Transaction Code
"DATA",9002313.93,606,0)
203^Claim Segment is not used for this Transaction Code
"DATA",9002313.93,607,0)
204^Pharmacy Provider Segment is not used for this Transaction Code
"DATA",9002313.93,608,0)
205^Prescriber Segment is not used for this Transaction Code
"DATA",9002313.93,609,0)
206^COB/Other Payments Segment is not used for this Transaction Code
"DATA",9002313.93,610,0)
207^Workers' Compensation Segment is not used for this Transaction Code
"DATA",9002313.93,611,0)
208^DUR/PPS Segment is not used for this Transaction Code
"DATA",9002313.93,612,0)
209^Pricing Segment is not used for this Transaction Code
"DATA",9002313.93,613,0)
210^Coupon Segment is not used for this Transaction Code
"DATA",9002313.93,614,0)
211^Compound Segment is not used for this Transaction Code
"DATA",9002313.93,615,0)
212^Prior Authorization Segment is not used for this Transaction Code
"DATA",9002313.93,616,0)
213^Clinical Segment is not used for this Transaction Code
"DATA",9002313.93,617,0)
214^Additional Documentation Segment is not used for this Transaction Code
"DATA",9002313.93,618,0)
215^Facility Segment is not used for this Transaction Code
"DATA",9002313.93,619,0)
216^Narrative Segment is not used for this Transaction Code
"DATA",9002313.93,620,0)
217^Purchaser Segment is not used for this Transaction Code
"DATA",9002313.93,621,0)
218^Service Provider Segment is not used for this Transaction Code
"DATA",9002313.93,622,0)
219^Patient ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,623,0)
220^Patient ID is not used for this Transaction Code
"DATA",9002313.93,624,0)
221^Date of Birth is not used for this Transaction Code
"DATA",9002313.93,625,0)
222^Patient Gender Code is not used for this Transaction Code
"DATA",9002313.93,626,0)
223^Patient First Name is not used for this Transaction Code
"DATA",9002313.93,627,0)
224^Patient Last Name is not used for this Transaction Code
"DATA",9002313.93,628,0)
225^Patient Street Address is not used for this Transaction Code
"DATA",9002313.93,629,0)
226^Patient City Address is not used for this Transaction Code
"DATA",9002313.93,630,0)
227^Patient State/Province Address is not used for this Transaction Code
"DATA",9002313.93,631,0)
228^Patient ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,632,0)
229^Patient Phone Number is not used for this Transaction Code
"DATA",9002313.93,633,0)
230^Place of Service is not used for this Transaction Code
"DATA",9002313.93,634,0)
231^Employer ID is not used for this Transaction Code
"DATA",9002313.93,635,0)
232^Smoker/Non-Smoker Code is not used for this Transaction Code
"DATA",9002313.93,636,0)
233^Pregnancy Indicator is not used for this Transaction Code
"DATA",9002313.93,637,0)
234^Patient E-Mail Address is not used for this Transaction Code
"DATA",9002313.93,638,0)
235^Patient Residence is not used for this Transaction Code
"DATA",9002313.93,639,0)
236^Patient ID Assoc State/Province Address not used for this Trans Code
"DATA",9002313.93,640,0)
237^Cardholder First Name is not used for this Transaction Code
"DATA",9002313.93,641,0)
238^Cardholder Last Name is not used for this Transaction Code
"DATA",9002313.93,642,0)
239^Home Plan is not used for this Transaction Code
"DATA",9002313.93,643,0)
240^Plan ID is not used for this Transaction Code
"DATA",9002313.93,644,0)
241^Eligibility Clarification Code is not used for this Transaction Code
"DATA",9002313.93,645,0)
242^Group ID is not used for this Transaction Code
"DATA",9002313.93,646,0)
243^Person Code is not used for this Transaction Code
"DATA",9002313.93,647,0)
244^Patient Relationship Code is not used for this Transaction Code
"DATA",9002313.93,648,0)
245^Other Payer BIN Number is not used for this Transaction Code
"DATA",9002313.93,649,0)
246^Other Payer Processor Control Number is not used for this Trans Code
"DATA",9002313.93,650,0)
247^Other Payer Cardholder ID is not used for this Transaction Code
"DATA",9002313.93,651,0)
248^Other Payer Group ID is not used for this Transaction Code
"DATA",9002313.93,652,0)
249^Medigap ID is not used for this Transaction Code
"DATA",9002313.93,653,0)
250^Medicaid Indicator is not used for this Transaction Code
"DATA",9002313.93,654,0)
251^Provider Accept Assignment Indicator is not used for this Trans Code
"DATA",9002313.93,655,0)
252^CMS Part D Defined Qualified Facility is not used for this Trans Code
"DATA",9002313.93,656,0)
253^Medicaid ID Number is not used for this Transaction Code
"DATA",9002313.93,657,0)
254^Medicaid Agency Number is not used for this Transaction Code
"DATA",9002313.93,658,0)
255^Associated Rx/Service Reference Number is not used for this Trans Code
"DATA",9002313.93,659,0)
256^Associated Prescription/Service Date is not used for this Trans Code
"DATA",9002313.93,660,0)
257^Procedure Modifier Code Count is not used for this Transaction Code
"DATA",9002313.93,661,0)
258^Procedure Modifier Code is not used for this Transaction Code
"DATA",9002313.93,662,0)
259^Quantity Dispensed is not used for this Transaction Code
"DATA",9002313.93,663,0)
260^Fill Number is not used for this Transaction Code
"DATA",9002313.93,664,0)
261^Days Supply is not used for this Transaction Code
"DATA",9002313.93,665,0)
262^Compound Code is not used for this Transaction Code
"DATA",9002313.93,666,0)
263^DAW/Product Selection Code is not used for this Trans Code
"DATA",9002313.93,667,0)
264^Date Prescription Written is not used for this Transaction Code
"DATA",9002313.93,668,0)
265^Number of Refills Authorized is not used for this Transaction Code
"DATA",9002313.93,669,0)
266^Prescription Origin Code is not used for this Transaction Code
"DATA",9002313.93,670,0)
267^Submission Clarification Code Count is not used for this Trans Code
"DATA",9002313.93,671,0)
268^Submission Clarification Code is not used for this Transaction Code
"DATA",9002313.93,672,0)
269^Quantity Prescribed is not used for this Transaction Code
"DATA",9002313.93,673,0)
270^Other Coverage Code is not used for this Transaction Code
"DATA",9002313.93,674,0)
271^Special Packaging Indicator is not used for this Transaction Code
"DATA",9002313.93,675,0)
272^Originally Prescribed Prod/Serv ID Qual not used for this Trans Code
"DATA",9002313.93,676,0)
273^Originally Prescribed Prod/Serv Code is not used for this Trans Code
"DATA",9002313.93,677,0)
274^Originally Prescribed Quantity is not used for this Transaction Code
"DATA",9002313.93,678,0)
275^Alternate ID is not used for this Transaction Code
"DATA",9002313.93,679,0)
276^Scheduled Prescription ID Number is not used for this Transaction Code
"DATA",9002313.93,680,0)
277^Unit of Measure is not used for this Transaction Code
"DATA",9002313.93,681,0)
278^Level of Service is not used for this Transaction Code
"DATA",9002313.93,682,0)
279^Prior Authorization Type Code is not used for this Transaction Code
"DATA",9002313.93,683,0)
280^Prior Authorization Number Submitted is not used for this Trans Code
"DATA",9002313.93,684,0)
281^Intermediary Authorization Type ID is not used for this Trans Code
"DATA",9002313.93,685,0)
282^Intermediary Authorization ID is not used for this Transaction Code
"DATA",9002313.93,686,0)
283^Dispensing Status is not used for this Transaction Code
"DATA",9002313.93,687,0)
284^Quantity Intended to be Dispensed is not used for this Trans Code
"DATA",9002313.93,688,0)
285^Days Supply Intended to be Dispensed is not used for this Trans Code
"DATA",9002313.93,689,0)
286^Delay Reason Code is not used for this Transaction Code
"DATA",9002313.93,690,0)
287^Transaction Reference Number is not used for this Transaction Code
"DATA",9002313.93,691,0)
288^Patient Assignment Indicator is not used for this Trans Code
"DATA",9002313.93,692,0)
289^Route of Administration is not used for this Transaction Code
"DATA",9002313.93,693,0)
290^Compound Type is not used for this Transaction Code
"DATA",9002313.93,694,0)
291^Medicaid Subrogation ICN/TCN is not used for this Transaction Code
"DATA",9002313.93,695,0)
292^Pharmacy Service Type is not used for this Transaction Code
"DATA",9002313.93,696,0)
293^Associated Rx/Service Provider ID Qual is not used for this Trans Code
"DATA",9002313.93,697,0)
294^Associated Rx/Service Provider ID is not used for this Trans Code
"DATA",9002313.93,698,0)
295^Associated Rx/Service Ref Num Qual is not used for this Trans Code
"DATA",9002313.93,699,0)
296^Associated Rx/Service Ref Fill Number is not used for this Trans Code
"DATA",9002313.93,700,0)
297^Time of Service is not used for this Transaction Code
"DATA",9002313.93,701,0)
298^Sales Transaction ID is not used for this Transaction Code
"DATA",9002313.93,702,0)
299^Reported Payment Type is not used for this Transaction Code
"DATA",9002313.93,703,0)
300^Provider ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,704,0)
301^Provider ID is not used for this Transaction Code
"DATA",9002313.93,705,0)
302^Prescriber ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,706,0)
303^Prescriber ID is not used for this Transaction Code
"DATA",9002313.93,707,0)
304^Prescriber ID Assoc State/Prov Address not used for this Trans Code
"DATA",9002313.93,708,0)
305^Prescriber Last Name is not used for this Transaction Code
"DATA",9002313.93,709,0)
306^Prescriber Phone Number is not used for this Transaction Code
"DATA",9002313.93,710,0)
307^Primary Care Provider ID Qualifier is not used for this Trans Code
"DATA",9002313.93,711,0)
308^Primary Care Provider ID is not used for this Transaction Code
"DATA",9002313.93,712,0)
309^Primary Care Provider Last Name is not used for this Transaction Code
"DATA",9002313.93,713,0)
310^Prescriber First Name is not used for this Transaction Code
"DATA",9002313.93,714,0)
311^Prescriber Street Address is not used for this Transaction Code
"DATA",9002313.93,715,0)
312^Prescriber City Address is not used for this Transaction Code
"DATA",9002313.93,716,0)
313^Prescriber State/Province Address is not used for this Trans Code
"DATA",9002313.93,717,0)
314^Prescriber ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,718,0)
315^Prescriber Alternate ID Qualifier is not used for this Trans Code
"DATA",9002313.93,719,0)
316^Prescriber Alternate ID is not used for this Transaction Code
"DATA",9002313.93,720,0)
317^Prescriber Alt ID Assoc State/Prov Address not used for this Trans Cd
"DATA",9002313.93,721,0)
318^Other Payer ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,722,0)
319^Other Payer ID is not used for this Transaction Code
"DATA",9002313.93,723,0)
320^Other Payer Date is not used for this Transaction Code
"DATA",9002313.93,724,0)
321^Internal Control Number is not used for this Transaction Code
"DATA",9002313.93,725,0)
322^Other Payer Amount Paid Count is not used for this Transaction Code
"DATA",9002313.93,726,0)
323^Other Payer Amount Paid Qualifier is not used for this Trans Code
"DATA",9002313.93,727,0)
324^Other Payer Amount Paid is not used for this Transaction Code
"DATA",9002313.93,728,0)
325^Other Payer Reject Count is not used for this Transaction Code
"DATA",9002313.93,729,0)
326^Other Payer Reject Code is not used for this Transaction Code
"DATA",9002313.93,730,0)
327^Other Payer-Patient Resp Amount Count is not used for this Trans Code
"DATA",9002313.93,731,0)
328^Other Payer-Patient Resp Amount Qual is not used for this Trans Code
"DATA",9002313.93,732,0)
329^Other Payer-Patient Resp Amount is not used for this Trans Code
"DATA",9002313.93,733,0)
330^Benefit Stage Count is not used for this Transaction Code
"DATA",9002313.93,734,0)
331^Benefit Stage Qualifier is not used for this Transaction Code
"DATA",9002313.93,735,0)
332^Benefit Stage Amount is not used for this Transaction Code
"DATA",9002313.93,736,0)
333^Employer Name is not used for this Transaction Code
"DATA",9002313.93,737,0)
334^Employer Street Address is not used for this Transaction Code
"DATA",9002313.93,738,0)
335^Employer City Address is not used for this Transaction Code
"DATA",9002313.93,739,0)
336^Employer State/Province Address is not used for this Transaction Code
"DATA",9002313.93,740,0)
337^Employer Zip/Postal Code is not used for this Transaction Code
"DATA",9002313.93,741,0)
338^Employer Phone Number is not used for this Transaction Code
"DATA",9002313.93,742,0)
339^Employer Contact Name is not used for this Transaction Code
"DATA",9002313.93,743,0)
340^Carrier ID is not used for this Transaction Code
"DATA",9002313.93,744,0)
341^Claim/Reference ID is not used for this Transaction Code
"DATA",9002313.93,745,0)
342^Billing Entity Type Indicator is not used for this Transaction Code
"DATA",9002313.93,746,0)
343^Pay To Qualifier is not used for this Transaction Code
"DATA",9002313.93,747,0)
344^Pay To ID is not used for this Transaction Code
"DATA",9002313.93,748,0)
345^Pay To Name is not used for this Transaction Code
"DATA",9002313.93,749,0)
346^Pay To Street Address is not used for this Transaction Code
"DATA",9002313.93,750,0)
347^Pay To City Address is not used for this Transaction Code
"DATA",9002313.93,751,0)
348^Pay To State/Province Address is not used for this Transaction Code
"DATA",9002313.93,752,0)
349^Pay To ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,753,0)
350^Generic Equivalent Product ID Qual is not used for this Trans Code
"DATA",9002313.93,754,0)
351^Generic Equivalent Product ID is not used for this Transaction Code
"DATA",9002313.93,755,0)
352^DUR/PPS Code Counter is not used for this Transaction Code
"DATA",9002313.93,756,0)
353^Reason for Service Code is not used for this Transaction Code
"DATA",9002313.93,757,0)
354^Professional Service Code is not used for this Transaction Code
"DATA",9002313.93,758,0)
355^Result of Service Code is not used for this Transaction Code
"DATA",9002313.93,759,0)
356^DUR/PPS Level of Effort is not used for this Transaction Code
"DATA",9002313.93,760,0)
357^DUR Co-Agent ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,761,0)
358^DUR Co-Agent ID is not used for this Transaction Code
"DATA",9002313.93,762,0)
359^Ingredient Cost Submitted is not used for this Transaction Code
"DATA",9002313.93,763,0)
360^Dispensing Fee Submitted is not used for this Transaction Code
"DATA",9002313.93,764,0)
361^Professional Service Fee Submitted is not used for this Trans Code
"DATA",9002313.93,765,0)
362^Patient Paid Amount Submitted is not used for this Transaction Code
"DATA",9002313.93,766,0)
363^Incentive Amount Submitted is not used for this Transaction Code
"DATA",9002313.93,767,0)
364^Other Amount Claimed Submitted Count is not used for this Trans Code
"DATA",9002313.93,768,0)
365^Other Amount Claimed Submitted Qual is not used for this Trans Code
"DATA",9002313.93,769,0)
366^Other Amount Claimed Submitted is not used for this Transaction Code
"DATA",9002313.93,770,0)
367^Flat Sales Tax Amount Submitted is not used for this Transaction Code
"DATA",9002313.93,771,0)
368^Percentage Sales Tax Amount Submitted is not used for this Trans Code
"DATA",9002313.93,772,0)
369^Percentage Sales Tax Rate Submitted is not used for this Trans Code
"DATA",9002313.93,773,0)
370^Percentage Sales Tax Basis Submitted is not used for this Trans Code
"DATA",9002313.93,774,0)
371^Usual and Customary Charge is not used for this Transaction Code
"DATA",9002313.93,775,0)
372^Gross Amount Due is not used for this Transaction Code
"DATA",9002313.93,776,0)
373^Basis of Cost Determination is not used for this Transaction Code
"DATA",9002313.93,777,0)
374^Medicaid Paid Amount is not used for this Transaction Code
"DATA",9002313.93,778,0)
375^Coupon Value Amount is not used for this Transaction Code
"DATA",9002313.93,779,0)
376^Compound Ingredient Drug Cost is not used for this Transaction Code
"DATA",9002313.93,780,0)
377^Compound Ingredient Basis of Cost Determ not used for this Trans Code
"DATA",9002313.93,781,0)
378^Compound Ingredient Modifier Code Count not used for this Trans Code
"DATA",9002313.93,782,0)
379^Compound Ingredient Modifier Code is not used for this Trans Code
"DATA",9002313.93,783,0)
380^Authorized Representative First Name is not used for this Trans Code
"DATA",9002313.93,784,0)
381^Authorized Rep. Last Name is not used for this Transaction Code
"DATA",9002313.93,785,0)
382^Authorized Rep. Street Address is not used for this Transaction Code
"DATA",9002313.93,786,0)
383^Authorized Rep. City is not used for this Transaction Code
"DATA",9002313.93,787,0)
384^Authorized Rep. State/Province is not used for this Transaction Code
"DATA",9002313.93,788,0)
385^Authorized Rep. Zip/Postal Code is not used for this Transaction Code
"DATA",9002313.93,789,0)
386^Prior Authorization Number - Assigned is not used for this Trans Code
"DATA",9002313.93,790,0)
387^Authorization Number is not used for this Transaction Code
"DATA",9002313.93,791,0)
388^Prior Auth Supporting Documentation is not used for this Trans Code
"DATA",9002313.93,792,0)
389^Diagnosis Code Count is not used for this Transaction Code
"DATA",9002313.93,793,0)
390^Diagnosis Code Qualifier is not used for this Transaction Code
"DATA",9002313.93,794,0)
391^Diagnosis Code is not used for this Transaction Code
"DATA",9002313.93,795,0)
392^Clinical Information Counter is not used for this Transaction Code
"DATA",9002313.93,796,0)
393^Measurement Date is not used for this Transaction Code
"DATA",9002313.93,797,0)
394^Measurement Time is not used for this Transaction Code
"DATA",9002313.93,798,0)
395^Measurement Dimension is not used for this Transaction Code
"DATA",9002313.93,799,0)
396^Measurement Unit is not used for this Transaction Code
"DATA",9002313.93,800,0)
397^Measurement Value is not used for this Transaction Code
"DATA",9002313.93,801,0)
398^Request Period Begin Date is not used for this Transaction Code
"DATA",9002313.93,802,0)
399^Request Period Recert/Revised Date is not used for this Trans Code
"DATA",9002313.93,803,0)
400^Request Status is not used for this Transaction Code
"DATA",9002313.93,804,0)
401^Length Of Need Qualifier is not used for this Transaction Code
"DATA",9002313.93,805,0)
402^Length Of Need is not used for this Transaction Code
"DATA",9002313.93,806,0)
403^Prescriber/Supplier Date Signed is not used for this Transaction Code
"DATA",9002313.93,807,0)
404^Supporting Documentation is not used for this Transaction Code
"DATA",9002313.93,808,0)
405^Question Number/Letter Count is not used for this Transaction Code
"DATA",9002313.93,809,0)
406^Question Number/Letter is not used for this Transaction Code
"DATA",9002313.93,810,0)
407^Question Percent Response is not used for this Transaction Code
"DATA",9002313.93,811,0)
408^Question Date Response is not used for this Transaction Code
"DATA",9002313.93,812,0)
409^Question Dollar Amount Response is not used for this Transaction Code
"DATA",9002313.93,813,0)
410^Question Numeric Response is not used for this Transaction Code
"DATA",9002313.93,814,0)
411^Question Alphanumeric Response is not used for this Transaction Code
"DATA",9002313.93,815,0)
412^Facility ID is not used for this Transaction Code
"DATA",9002313.93,816,0)
413^Facility Name is not used for this Transaction Code
"DATA",9002313.93,817,0)
414^Facility Street Address is not used for this Transaction Code
"DATA",9002313.93,818,0)
415^Facility City Address is not used for this Transaction Code
"DATA",9002313.93,819,0)
416^Facility State/Province Address is not used for this Transaction Code
"DATA",9002313.93,820,0)
417^Facility ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,821,0)
418^Purchaser ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,822,0)
419^Purchaser ID is not used for this Transaction Code
"DATA",9002313.93,823,0)
420^Purchaser ID Associated State Code is not used for this Trans Code
"DATA",9002313.93,824,0)
421^Purchaser Date of Birth is not used for this Transaction Code
"DATA",9002313.93,825,0)
422^Purchaser Gender Code is not used for this Transaction Code
"DATA",9002313.93,826,0)
423^Purchaser First Name is not used for this Transaction Code
"DATA",9002313.93,827,0)
424^Purchaser Last Name is not used for this Transaction Code
"DATA",9002313.93,828,0)
425^Purchaser Street Address is not used for this Transaction Code
"DATA",9002313.93,829,0)
426^Purchaser City Address is not used for this Transaction Code
"DATA",9002313.93,830,0)
427^Purchaser State/Province Address is not used for this Transaction Code
"DATA",9002313.93,831,0)
428^Purchaser ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,832,0)
429^Purchaser Country Code is not used for this Transaction Code
"DATA",9002313.93,833,0)
430^Purchaser Relationship Code is not used for this Transaction Code
"DATA",9002313.93,834,0)
431^Released Date is not used for this Transaction Code
"DATA",9002313.93,835,0)
432^Released Time is not used for this Transaction Code
"DATA",9002313.93,836,0)
433^Service Provider Name is not used for this Transaction Code
"DATA",9002313.93,837,0)
434^Service Provider Street Address is not used for this Transaction Code
"DATA",9002313.93,838,0)
435^Service Provider City Address is not used for this Transaction Code
"DATA",9002313.93,839,0)
436^Service Prov State/Province Address is not used for this Trans Code
"DATA",9002313.93,840,0)
437^Service Provider ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,841,0)
438^Seller ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,842,0)
439^Seller ID is not used for this Transaction Code
"DATA",9002313.93,843,0)
440^Seller Initials is not used for this Transaction Code
"DATA",9002313.93,844,0)
441^Other Amount Claimed Submitted Grouping Incorrect
"DATA",9002313.93,845,0)
442^Other Payer Amount Paid Grouping Incorrect
"DATA",9002313.93,846,0)
443^Other Payer-Patient Responsibility Amount Grouping Incorrect
"DATA",9002313.93,847,0)
444^Benefit Stage Amount Grouping Incorrect
"DATA",9002313.93,848,0)
445^Diagnosis Code Grouping Incorrect
"DATA",9002313.93,849,0)
446^COB/Other Payments Segment Incorrectly Formatted
"DATA",9002313.93,850,0)
447^Additional Documentation Segment Incorrectly Formatted
"DATA",9002313.93,851,0)
448^Clinical Segment Incorrectly Formatted
"DATA",9002313.93,852,0)
449^Patient Segment Incorrectly Formatted
"DATA",9002313.93,853,0)
450^Insurance Segment Incorrectly Formatted
"DATA",9002313.93,854,0)
451^Transaction Header Segment Incorrectly Formatted
"DATA",9002313.93,855,0)
452^Claim Segment Incorrectly Formatted
"DATA",9002313.93,856,0)
453^Pharmacy Provider Segment Incorrectly Formatted
"DATA",9002313.93,857,0)
454^Prescriber Segment Incorrectly Formatted
"DATA",9002313.93,858,0)
455^Workers' Compensation Segment Incorrectly Formatted
"DATA",9002313.93,859,0)
456^Pricing Segment Incorrectly Formatted
"DATA",9002313.93,860,0)
457^Coupon Segment Incorrectly Formatted
"DATA",9002313.93,861,0)
458^Prior Authorization Segment Incorrectly Formatted
"DATA",9002313.93,862,0)
459^Facility Segment Incorrectly Formatted
"DATA",9002313.93,863,0)
460^Narrative Segment Incorrectly Formatted
"DATA",9002313.93,864,0)
461^Purchaser Segment Incorrectly Formatted
"DATA",9002313.93,865,0)
462^Service Provider Segment Incorrectly Formatted
"DATA",9002313.93,866,0)
463^Pharmacy not contracted in Assisted Living Network
"DATA",9002313.93,867,0)
464^Service Provider ID Qualifier Does Not Precede Service Provider ID
"DATA",9002313.93,868,0)
465^Patient ID Qualifier Does Not Precede Patient ID
"DATA",9002313.93,869,0)
466^Rx/Service Ref Number Qualifier Does Not Precede Rx/Service Ref Number
"DATA",9002313.93,870,0)
467^Product/Service ID Qualifier Does Not Precede Product/Service ID
"DATA",9002313.93,871,0)
468^Procedure Modifier Code Count Does Not Precede Procedure Modifier Code
"DATA",9002313.93,872,0)
469^Submission Clarification Cd Cnt Follows Submission Clarification Code
"DATA",9002313.93,873,0)
470^Orig Prscrbd Prod/Serv ID Qual Follows Orig Prscrbd Prod/Serv Code
"DATA",9002313.93,874,0)
471^Oth Amt Claimed Submitted Cnt Follows Oth Amt Claimed Amt And/Or Qual
"DATA",9002313.93,875,0)
472^Other Amt Claimed Submitted Qual Follows Other Amt Claimed Submitted
"DATA",9002313.93,876,0)
473^Provider Id Qualifier Does Not Precede Provider ID
"DATA",9002313.93,877,0)
474^Prescriber Id Qualifier Does Not Precede Prescriber ID
"DATA",9002313.93,878,0)
475^Primary Care Prov ID Qual Does Not Precede Primary Care Provider ID
"DATA",9002313.93,879,0)
476^COB/Other Payments Count Does Not Precede Other Payer Coverage Type
"DATA",9002313.93,880,0)
477^Other Payer ID Count Does Not Precede Other Payer ID Data Fields
"DATA",9002313.93,881,0)
478^Other Payer ID Qualifier Does Not Precede Other Payer ID
"DATA",9002313.93,882,0)
479^Other Payer Amt Paid Count Follows Other Payer Amt Paid And/Or Qual
"DATA",9002313.93,883,0)
480^Other Payer Amount Paid Qual Does Not Precede Other Payer Amount Paid
"DATA",9002313.93,884,0)
481^Other Payer Reject Count Does Not Precede Other Payer Reject Code
"DATA",9002313.93,885,0)
482^Oth Payer-Pat Resp Amt Cnt Follows Oth Payer-Pat Resp Amt and/or Qual
"DATA",9002313.93,886,0)
483^Other Payer-Patient Resp Amt Qual Follows Other Payer-Patient Resp Amt
"DATA",9002313.93,887,0)
484^Benefit Stage Count Does Not Precede Benefit Stage Amount and/or Qual
"DATA",9002313.93,888,0)
485^Benefit Stage Qualifier Does Not Precede Benefit Stage Amount
"DATA",9002313.93,889,0)
486^Pay To Qualifier Does Not Precede Pay To ID
"DATA",9002313.93,890,0)
487^Generic Equivalent Prod Id Qual Follows Generic Equivalent Prod Id
"DATA",9002313.93,891,0)
488^DUR/PPS Code Counter Does Not Precede DUR Data Fields
"DATA",9002313.93,892,0)
489^DUR Co-Agent ID Qualifier Does Not Precede DUR Co-Agent ID
"DATA",9002313.93,893,0)
490^Compound Ingredient Component Cnt Follows Compound Prod ID And/Or Qual
"DATA",9002313.93,894,0)
491^Compound Product ID Qualifier Does Not Precede Compound Product ID
"DATA",9002313.93,895,0)
492^Compound Ingredient Mod Code Cnt Follows Compound Ingredient Mod Code
"DATA",9002313.93,896,0)
493^Diagnosis Code Count Does Not Precede Diagnosis Code And/Or Qualifier
"DATA",9002313.93,897,0)
494^Diagnosis Code Qualifier Does Not Precede Diagnosis Code
"DATA",9002313.93,898,0)
495^Clinical Info Counter Does Not Precede Clinical Measurement data
"DATA",9002313.93,899,0)
496^Length Of Need Qualifier Does Not Precede Length Of Need
"DATA",9002313.93,900,0)
497^Question Number/Letter Count Does Not Precede Question Number/Letter
"DATA",9002313.93,901,0)
498^Accumulator Month Count Does Not Precede Accumulator Month
"DATA",9002313.93,902,0)
499^Address Count Does Not Precede Address Data Fields
"DATA",9002313.93,903,0)
500^Patient ID Qualifier Count Does Not Precede Patient ID Data Fields
"DATA",9002313.93,904,0)
501^Prescriber ID Count Does Not Precede Prescriber ID Data Fields
"DATA",9002313.93,905,0)
502^Prescriber Specialty Count Does Not Precede Prescriber Specialty
"DATA",9002313.93,906,0)
503^Telephone Number Count Does Not Precede Telephone Number Data Fields
"DATA",9002313.93,907,0)
504^Benefit Stage Qualifier Value Not Supported
"DATA",9002313.93,908,0)
505^Other Payer Coverage Type Value Not Supported
"DATA",9002313.93,909,0)
506^Prescription/Service Reference Number Qualifier Value Not Supported
"DATA",9002313.93,910,0)
507^Additional Documentation Type ID Value Not Supported
"DATA",9002313.93,911,0)
508^Authorized Representative State/Province Address Value Not Supported
"DATA",9002313.93,912,0)
509^Basis Of Request Value Not Supported
"DATA",9002313.93,913,0)
510^Billing Entity Type Indicator Value Not Supported
"DATA",9002313.93,914,0)
511^CMS Part D Defined Qualified Facility Value Not Supported
"DATA",9002313.93,915,0)
512^Compound Code Value Not Supported
"DATA",9002313.93,916,0)
513^Compound Dispensing Unit Form Indicator Value Not Supported
"DATA",9002313.93,917,0)
514^Compound Ingredient Basis of Cost Determination Value Not Supported
"DATA",9002313.93,918,0)
515^Compound Product ID Qualifier Value Not Supported
"DATA",9002313.93,919,0)
516^Compound Type Value Not Supported
"DATA",9002313.93,920,0)
517^Coupon Type Value Not Supported
"DATA",9002313.93,921,0)
518^DUR Co-Agent ID Qualifier Value Not Supported
"DATA",9002313.93,922,0)
519^DUR/PPS Level Of Effort Value Not Supported
"DATA",9002313.93,923,0)
520^Delay Reason Code Value Not Supported
"DATA",9002313.93,924,0)
521^Diagnosis Code Qualifier Value Not Supported
"DATA",9002313.93,925,0)
522^Dispensing Status Value Not Supported
"DATA",9002313.93,926,0)
523^Eligibility Clarification Code Value Not Supported
"DATA",9002313.93,927,0)
524^Employer State/Province Address Value Not Supported
"DATA",9002313.93,928,0)
525^Facility State/Province Address Value Not Supported
"DATA",9002313.93,929,0)
526^Header Response Status Value Not Supported
"DATA",9002313.93,930,0)
527^Intermediary Authorization Type ID Value Not Supported
"DATA",9002313.93,931,0)
528^Length of Need Qualifier Value Not Supported
"DATA",9002313.93,932,0)
529^Level Of Service Value Not Supported
"DATA",9002313.93,933,0)
530^Measurement Dimension Value Not Supported
"DATA",9002313.93,934,0)
531^Measurement Unit Value Not Supported
"DATA",9002313.93,935,0)
532^Medicaid Indicator Value Not Supported
"DATA",9002313.93,936,0)
533^Originally Prescribed Product/Service ID Qualifier Value Not Supported
"DATA",9002313.93,937,0)
534^Other Amount Claimed Submitted Qualifier Value Not Supported
"DATA",9002313.93,938,0)
535^Other Coverage Code Value Not Supported
"DATA",9002313.93,939,0)
536^Other Payer-Patient Responsibility Amount Qual Value Not Supported
"DATA",9002313.93,940,0)
537^Patient Assignment Indicator Value Not Supported
"DATA",9002313.93,941,0)
538^Patient Gender Code Value Not Supported
"DATA",9002313.93,942,0)
539^Patient State/Province Address Value Not Supported
"DATA",9002313.93,943,0)
540^Pay to State/Province Address Value Not Supported
"DATA",9002313.93,944,0)
541^Percentage Sales Tax Basis Submitted Value Not Supported
"DATA",9002313.93,945,0)
542^Pregnancy Indicator Value Not Supported
"DATA",9002313.93,946,0)
543^Prescriber ID Qualifier Value Not Supported
"DATA",9002313.93,947,0)
544^Prescriber State/Province Address Value Not Supported
"DATA",9002313.93,948,0)
545^Prescription Origin Code Value Not Supported
"DATA",9002313.93,949,0)
546^Primary Care Provider ID Qualifier Value Not Supported
"DATA",9002313.93,950,0)
547^Prior Authorization Type Code Value Not Supported
"DATA",9002313.93,951,0)
548^Provider Accept Assignment Indicator Value Not Supported
"DATA",9002313.93,952,0)
549^Provider ID Qualifier Value Not Supported
"DATA",9002313.93,953,0)
550^Request Status Value Not Supported
"DATA",9002313.93,954,0)
551^Request Type Value Not Supported
"DATA",9002313.93,955,0)
552^Route of Administration Value Not Supported
"DATA",9002313.93,956,0)
553^Smoker/Non-Smoker Code Value Not Supported
"DATA",9002313.93,957,0)
554^Special Packaging Indicator Value Not Supported
"DATA",9002313.93,958,0)
555^Transaction Count Value Not Supported
"DATA",9002313.93,959,0)
556^Unit Of Measure Value Not Supported
"DATA",9002313.93,960,0)
557^COB Segment Present On A Non-COB Claim
"DATA",9002313.93,961,0)
7F^Future date not allowed for Date of Birth
"DATA",9002313.93,962,0)
A1^ID Submitted is associated with a Sanctioned Prescriber
"DATA",9002313.93,963,0)
A2^ID Submitted is associated to a Deceased Prescriber
"DATA",9002313.93,964,0)
TF^M/I Technician Initials
"DATA",9002313.93,965,0)
X0^M/I Associated Prescription/Service Fill Number
"DATA",9002313.93,966,0)
XZ^M/I Associated Prescription/Service Reference Number Qualifier
"DATA",9002313.93,967,0)
Y0^M/I Purchaser Last Name
"DATA",9002313.93,968,0)
Y1^M/I Purchaser Street Address
"DATA",9002313.93,969,0)
Y2^M/I Purchaser City Address
"DATA",9002313.93,970,0)
Y3^M/I Purchaser State/Province Code
"DATA",9002313.93,971,0)
Y4^M/I Purchaser Zip/Postal Code
"DATA",9002313.93,972,0)
Y5^M/I Purchaser Country Code
"DATA",9002313.93,973,0)
Y6^M/I Time of Service
"DATA",9002313.93,974,0)
Y7^M/I Associated Prescription/Service Provider ID Qualifier
"DATA",9002313.93,975,0)
Y8^M/I Associated Prescription/Service Provider ID
"DATA",9002313.93,976,0)
Y9^M/I Seller ID
"DATA",9002313.93,977,0)
YK^M/I Service Provider Name
"DATA",9002313.93,978,0)
YM^M/I Service Provider Street Address
"DATA",9002313.93,979,0)
YN^M/I Service Provider City Address
"DATA",9002313.93,980,0)
YP^M/I Service Provider State/Province Code Address
"DATA",9002313.93,981,0)
YQ^M/I Service Provider Zip/Postal Code
"DATA",9002313.93,982,0)
YR^M/I Patient ID Associated State/Province Address
"DATA",9002313.93,983,0)
YS^M/I Purchaser Relationship Code
"DATA",9002313.93,984,0)
YT^M/I Seller Initials
"DATA",9002313.93,985,0)
YU^M/I Purchaser ID Qualifier
"DATA",9002313.93,986,0)
YV^M/I Purchaser ID
"DATA",9002313.93,987,0)
YW^M/I Purchaser ID Associated State/Province Code
"DATA",9002313.93,988,0)
YX^M/I Purchaser Date of Birth
"DATA",9002313.93,989,0)
YY^M/I Purchaser Gender Code
"DATA",9002313.93,990,0)
YZ^M/I Purchaser First Name
"DATA",9002313.93,991,0)
Z0^Purchaser Country Code Value Not Supported For Processor/Payer
"DATA",9002313.93,992,0)
Z1^Prescriber Alternate ID Qualifier Value Not Supported
"DATA",9002313.93,993,0)
Z2^M/I Purchaser Segment
"DATA",9002313.93,994,0)
Z3^Purchaser Segment Present On A Non-Controlled Sub Reporting Trans
"DATA",9002313.93,995,0)
Z4^Purchaser Segment Required On A Controlled Substance Reporting Trans
"DATA",9002313.93,996,0)
Z5^M/I Service Provider Segment
"DATA",9002313.93,997,0)
Z6^Service Prov Segment Present On A non-Controlled Sub Reporting Trans
"DATA",9002313.93,998,0)
Z7^Service Provider Segment Required On A Controlled Sub Reporting Trans
"DATA",9002313.93,999,0)
Z8^Purchaser Relationship Code Value Not Supported
"DATA",9002313.93,1000,0)
Z9^Prescriber Alternate ID Not Covered
"DATA",9002313.93,1001,0)
ZB^M/I Seller ID Qualifier
"DATA",9002313.93,1002,0)
ZC^Assoc Rx/Service Prov ID Qual Value Not Supported For Processor/Payer
"DATA",9002313.93,1003,0)
ZD^Associated Rx/Service Reference Number Qualifier Value Not Supported
"DATA",9002313.93,1004,0)
ZF^M/I Sales Transaction ID
"DATA",9002313.93,1005,0)
ZK^M/I Prescriber ID Associated State/Province Address
"DATA",9002313.93,1006,0)
ZM^M/I Prescriber Alternate ID Qualifier
"DATA",9002313.93,1007,0)
ZN^Purchaser ID Qualifier Value Not Supported For Processor/Payer
"DATA",9002313.93,1008,0)
ZP^M/I Prescriber Alternate ID
"DATA",9002313.93,1009,0)
ZQ^M/I Prescriber Alternate ID Associated State/Province Address
"DATA",9002313.93,1010,0)
ZS^M/I Reported Payment Type
"DATA",9002313.93,1011,0)
ZT^M/I Released Date
"DATA",9002313.93,1012,0)
ZU^M/I Released Time
"DATA",9002313.93,1013,0)
ZV^Reported Payment Type Value Not Supported
"DATA",9002313.93,1014,0)
ZW^M/I Compound Preparation Time
"DATA",9002313.93,1015,0)
ZX^M/I CMS Part D Contract ID
"DATA",9002313.93,1016,0)
ZY^M/I Medicare Part D Plan Benefit Package (PBP)
"DATA",9002313.93,1017,0)
ZZ^Cardholder ID submitted is inactive. New Cardholder ID on file
"DATA",9002313.93,1018,0)
eC^CHAMPVA-DRUG NON BILLABLE
"DATA",9002313.93,1019,0)
569^Provide Notice: Medicare Prescription Drug Coverage and Your Rights
"DATA",9002313.93,1020,0)
597^LTC Dispensing Type Does Not Support The Packaging Type
"DATA",9002313.93,1021,0)
558^Part D Plan cannot coordinate benefits with another Part D Plan
"DATA",9002313.93,1022,0)
559^ID Submitted is associated with a Sanctioned Pharmacy
"DATA",9002313.93,1023,0)
560^Pharmacy Not Contracted in Retail Network
"DATA",9002313.93,1024,0)
561^Pharmacy Not Contracted in Mail Order Network
"DATA",9002313.93,1025,0)
562^Pharmacy Not Contracted in Hospice Network
"DATA",9002313.93,1026,0)
563^Pharmacy Not Contracted in Veterans Administration Network
"DATA",9002313.93,1027,0)
564^Pharmacy Not Contracted in Military Network
"DATA",9002313.93,1028,0)
565^Patient Country Code Value Not Supported
"DATA",9002313.93,1029,0)
566^Patient Country Code Not Used For This Transaction
"DATA",9002313.93,1030,0)
567^M/I Veterinary Use Indicator
"DATA",9002313.93,1031,0)
568^Veterinary Use Indicator Value Not Supported
"DATA",9002313.93,1032,0)
570^Veterinary Use Indicator Not Used For This Transaction
"DATA",9002313.93,1033,0)
571^Patient ID Associated State/Province Address Value Not Supported
"DATA",9002313.93,1034,0)
572^Medigap ID Not Covered
"DATA",9002313.93,1035,0)
573^Prescriber Alt ID Assoc State/Province Address Value Not Supported
"DATA",9002313.93,1036,0)
574^Compound Ingredient Modifier Code Not Covered
"DATA",9002313.93,1037,0)
575^Purchaser State/Province Address Value Not Supported
"DATA",9002313.93,1038,0)
576^Service Provider State/Province Address Value Not Supported
"DATA",9002313.93,1039,0)
577^M/I Other Payer ID
"DATA",9002313.93,1040,0)
578^Other Payer ID Count Does Not Match Number of Repetitions
"DATA",9002313.93,1041,0)
579^Other Payer ID Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,1042,0)
580^Other Payer ID Count Grouping Incorrect
"DATA",9002313.93,1043,0)
581^Other Payer ID Count is not used for this Transaction Code
"DATA",9002313.93,1044,0)
582^M/I Fill Number
"DATA",9002313.93,1045,0)
583^Provider ID Not Covered
"DATA",9002313.93,1046,0)
584^Purchaser ID Associated State/Province Code Value Not Supported
"DATA",9002313.93,1047,0)
585^Fill Number Value Not Supported
"DATA",9002313.93,1048,0)
586^Facility ID Not Covered
"DATA",9002313.93,1049,0)
587^Carrier ID Not Covered
"DATA",9002313.93,1050,0)
588^Alternate ID Not Covered
"DATA",9002313.93,1051,0)
589^Patient ID Not Covered
"DATA",9002313.93,1052,0)
590^Compound Dosage Form Not Covered
"DATA",9002313.93,1053,0)
591^Plan ID Not Covered
"DATA",9002313.93,1054,0)
592^DUR Co-Agent ID Not Covered
"DATA",9002313.93,1055,0)
593^M/I Date of Service
"DATA",9002313.93,1056,0)
594^Pay To ID Not Covered
"DATA",9002313.93,1057,0)
595^Associated Prescription/Service Provider ID Not Covered
"DATA",9002313.93,1058,0)
596^Compound Preparation Time Not Used For This Transaction Code
"DATA",9002313.93,1059,0)
598^More Than One Patient Found
"DATA",9002313.93,1060,0)
599^Cardholder ID Matched But Last Name Did Not
"DATA",9002313.93,1061,0)
600^Coverage Outside Submitted Date Of Service
"DATA",9002313.93,1062,0)
601^Intermediary Auth Type ID Does Not Precede Intermediary Auth ID
"DATA",9002313.93,1063,0)
602^Assoc Rx/Serv Prov ID Qual Does Not Precede Assoc Rx/Service Prov ID
"DATA",9002313.93,1064,0)
603^Prescriber Alternate ID Qual Does Not Precede Prescriber Alternate ID
"DATA",9002313.93,1065,0)
604^Purchaser ID Qualifier Does Not Precede Purchaser ID
"DATA",9002313.93,1066,0)
605^Seller ID Qualifier Does Not Precede Seller ID
"DATA",9002313.93,1067,0)
606^Brand Drug/Specific Labeler Code Required
"DATA",9002313.93,1068,0)
607^Information Reporting Transaction Cannot Be Matched To A Paid Claim
"DATA",9002313.93,1069,0)
608^Step Therapy/Alt Drug Therapy Req'd Prior To Submitted Prod Serv ID
"DATA",9002313.93,1070,0)
609^COB Claim Not Required, Patient Liability Amount Submitted Was Zero
"DATA",9002313.93,1071,0)
610^Supp Claim Could Not Be Matched To A Claim Covered By Part D Plan
"DATA",9002313.93,1072,0)
611^Supp Claim Was Matched To A Claim Covered By A Benefit Oth Than Part D
"DATA",9002313.93,1073,0)
612^LTC Appropriate Dispensing Invalid Submission Clarification Code Combo
"DATA",9002313.93,1074,0)
613^Packaging Methodology Or Dispensing Frequency M/I For LTC Short Cycle
"DATA",9002313.93,1075,0)
614^Uppercase Character(s) Required
"DATA",9002313.93,1076,0)
615^Basis Of Cost Determ Value 14 Req'd When Compound Ing Qty 0, Cost>$0
"DATA",9002313.93,1077,0)
616^Submission Clarification Code 8 Req'd When Compound Ingredient Qty 0
"DATA",9002313.93,1078,0)
617^Compound Ingredient Drug Cost Cannot Be Negative Amount
"DATA",9002313.93,1079,0)
618^Submitted Prescriber's DEA Does Not Allow This Drug DEA Schedule
"DATA",9002313.93,1080,0)
619^Prescriber Type 1 NPI Required
"DATA",9002313.93,1081,0)
620^This Product/Service May Be Covered Under Medicare Part D
"DATA",9002313.93,1082,0)
621^This Medicaid Patient Is Medicare Eligible
"DATA",9002313.93,1083,0)
645^Repackaged product is not covered by the contract
"DATA",9002313.93,1084,0)
646^Pat Not Eligible Due To Non Payment Of Premium. Pat To Contact Plan
"DATA",9002313.93,1085,0)
647^Quantity Prescribed Required For CII Prescription
"DATA",9002313.93,1086,0)
648^Qty Prescribed Doesn't Match Qty Prescribed On Original CII Dispensing
"DATA",9002313.93,1087,0)
649^Cumulative Quantity For This CII Rx Number Exceeds Quantity Prescribed
"DATA",9002313.93,1088,0)
650^Fill Date Greater Than 60 Days From CII Date Rx Written (414-DE)
"DATA",9002313.93,1089,0)
1K^M/I Patient Country Code
"DATA",9002313.93,1090,0)
622^COB Claim not required, patient liability amount submitted was zero
"DATA",9002313.93,1091,0)
623^M/I Authorized Representative Country Code
"DATA",9002313.93,1092,0)
624^M/I Employer Country Code
"DATA",9002313.93,1093,0)
625^M/I Entity Country Code
"DATA",9002313.93,1094,0)
627^M/I Facility Country Code
"DATA",9002313.93,1095,0)
628^M/I Patient ID Associated Country Code
"DATA",9002313.93,1096,0)
629^M/I Pay to Country Code
"DATA",9002313.93,1097,0)
630^M/I Prescriber Alternate ID Associated Country Code
"DATA",9002313.93,1098,0)
631^M/I Prescriber ID Associated Country Code
"DATA",9002313.93,1099,0)
632^M/I Prescriber Country Code
"DATA",9002313.93,1100,0)
633^M/I Purchaser ID Associated Country Code
"DATA",9002313.93,1101,0)
634^Authorized Representative Country Code Value Not Supported
"DATA",9002313.93,1102,0)
635^M/I Employer Country Code Value Not Supported
"DATA",9002313.93,1103,0)
637^M/I Entity Country Code Value Not Supported
"DATA",9002313.93,1104,0)
638^M/I Facility Country Code Value Not Supported
"DATA",9002313.93,1105,0)
639^M/I Patient ID Associated Country Code Value Not Supported
"DATA",9002313.93,1106,0)
640^M/I Pay to Country Code Value Not Supported
"DATA",9002313.93,1107,0)
641^M/I Prescriber Alt ID Associated Country Code Value Not Supported
"DATA",9002313.93,1108,0)
642^M/I Prescriber ID Associated Country Code Value Not Supported
"DATA",9002313.93,1109,0)
643^M/I Prescriber Country Code Value Not Supported
"DATA",9002313.93,1110,0)
644^M/I Purchaser ID Associated Country Code Value Not Supported
"DATA",9002313.93,1111,0)
651^REMS: Mandatory data element(s) missing
"DATA",9002313.93,1112,0)
652^REMS: Prescriber not matched or may not be enrolled
"DATA",9002313.93,1113,0)
653^REMS: Patient not matched or may not be enrolled
"DATA",9002313.93,1114,0)
654^REMS: Pharmacy not matched or may not be enrolled
"DATA",9002313.93,1115,0)
655^REMS: Multiple patient matches
"DATA",9002313.93,1116,0)
656^REMS: Patient age not matched
"DATA",9002313.93,1117,0)
657^REMS: Patient gender not matched
"DATA",9002313.93,1118,0)
658^REMS: Pharmacy has not enrolled
"DATA",9002313.93,1119,0)
659^REMS: Pharmacy has not renewed enrollment
"DATA",9002313.93,1120,0)
660^REMS: Pharmacy has not submitted agreement form
"DATA",9002313.93,1121,0)
661^REMS: Pharmacy has been suspended due to non-compliance
"DATA",9002313.93,1122,0)
662^REMS: Prescriber has not enrolled
"DATA",9002313.93,1123,0)
663^REMS: Prescriber has not completed a knowledge assessment
"DATA",9002313.93,1124,0)
664^REMS: Prescriber has been suspended due to non-compliance
"DATA",9002313.93,1125,0)
665^REMS: Excessive days supply
"DATA",9002313.93,1126,0)
666^REMS: Insufficient days supply
"DATA",9002313.93,1127,0)
667^REMS: Excessive dosage
"DATA",9002313.93,1128,0)
668^REMS: Insufficient dosage
"DATA",9002313.93,1129,0)
669^REMS: Refills not permitted
"DATA",9002313.93,1130,0)
670^REMS: Laboratory test results not documented
"DATA",9002313.93,1131,0)
671^REMS: Laboratory test not conducted within specified
"DATA",9002313.93,1132,0)
672^REMS: Dispensing not authorized due to laboratory test results
"DATA",9002313.93,1133,0)
673^REMS: Prescriber counseling of patient not documented
"DATA",9002313.93,1134,0)
674^REMS: Prescriber has not documented safe use conditions
"DATA",9002313.93,1135,0)
675^REMS: Prescriber has not documented patient opioid tolerance
"DATA",9002313.93,1136,0)
676^REMS: Prescriber has not documented patient contraceptive use
"DATA",9002313.93,1137,0)
677^REMS: Lack of contraindicated therapy not documented
"DATA",9002313.93,1138,0)
678^REMS: Step therapy not documented
"DATA",9002313.93,1139,0)
679^REMS: Prescriber has not enrolled patient
"DATA",9002313.93,1140,0)
680^REMS: Prescriber must renew patient enrollment
"DATA",9002313.93,1141,0)
681^REMS: Patient enrollment requirements have not been met
"DATA",9002313.93,1142,0)
682^REMS: Prescriber has not submitted patient agreement
"DATA",9002313.93,1143,0)
683^REMS: Prescriber has not verified patient's reproductive potential
"DATA",9002313.93,1144,0)
684^REMS: Patient has not documented safe use conditions
"DATA",9002313.93,1145,0)
685^REMS: Patient has not documented completed education
"DATA",9002313.93,1146,0)
686^REMS: Patient has not documented contraceptive use
"DATA",9002313.93,1147,0)
687^REMS Administrator Denied
"DATA",9002313.93,1148,0)
688^REMS: Service Billing Denied
"DATA",9002313.93,1149,0)
689^PDMP Administrator Denied
"DATA",9002313.93,1150,0)
690^PDMP: Pharmacy not contracted
"DATA",9002313.93,1151,0)
691^PDMP: Pharmacy contract not renewed
"DATA",9002313.93,1152,0)
692^PDMP: M/I Patient First Name
"DATA",9002313.93,1153,0)
693^PDMP: M/I Patient Last Name
"DATA",9002313.93,1154,0)
694^PDMP: M/I Patient Street Address
"DATA",9002313.93,1155,0)
695^PDMP: M/I Patient City
"DATA",9002313.93,1156,0)
696^PDMP: M/I Patient State or Province
"DATA",9002313.93,1157,0)
697^PDMP: M/I Patient ZIP/Postal Code
"DATA",9002313.93,1158,0)
698^PDMP: M/I Prescriber ID
"DATA",9002313.93,1159,0)
699^PDMP: M/I Prescriber Last Name
"DATA",9002313.93,1160,0)
700^PDMP: M/I Patient ID
"DATA",9002313.93,1161,0)
701^PDMP: M/I Patient Date of Birth
"DATA",9002313.93,1162,0)
702^PDMP: M/I Patient Gender
"DATA",9002313.93,1163,0)
703^PDMP: M/I Prescription Origin Code
"DATA",9002313.93,1164,0)
704^PDMP: M/I Scheduled Rx Serial Number
"DATA",9002313.93,1165,0)
705^PDMP: M/I Product/Service ID
"DATA",9002313.93,1166,0)
706^PDMP: M/I Compound Code
"DATA",9002313.93,1167,0)
707^PDMP: M/I Patient Phone Number
"DATA",9002313.93,1168,0)
708^PDMP: M/I Payment Code
"DATA",9002313.93,1169,0)
769^Medicare PartD Pd claim found, Info Report Reversal/Rebill not matched
"DATA",9002313.93,1170,0)
770^Medicare Part D Pd claim not found, Info Report Reversal not processed
"DATA",9002313.93,1171,0)
771^Compound contains unidentifiable ingredient; override not allowed
"DATA",9002313.93,1172,0)
772^Compound not payable due to non-covered ingredient;no override allowed
"DATA",9002313.93,1173,0)
773^Prescriber not listed within Medicare Fee For Service enrollment file
"DATA",9002313.93,1174,0)
774^Prescriber enrollment with Medicare Fee For Service has terminated
"DATA",9002313.93,1175,0)
775^Pharmacy not listed within Medicare Fee For Service enrollment file
"DATA",9002313.93,1176,0)
776^Pharmacy enrollment with Medicare Fee For Service has terminated
"DATA",9002313.93,1177,0)
777^Plan's Prescriber data base not able to verify active state license
"DATA",9002313.93,1178,0)
A3^This Product May Be Covered Under Hospice - Medicare A
"DATA",9002313.93,1179,0)
A4^Product May Be Covered Under Medicare-B (ESRD Dialysis Facility only)
"FIA",9002313.02)
BPS CLAIMS
"FIA",9002313.02,0)
^BPSC(
"FIA",9002313.02,0,0)
9002313.02
"FIA",9002313.02,0,1)
y^y^p^^^^n^^n
"FIA",9002313.02,0,10)

"FIA",9002313.02,0,11)

"FIA",9002313.02,0,"RLRO")

"FIA",9002313.02,0,"VR")
1.0^BPS
"FIA",9002313.02,9002313.02)
1
"FIA",9002313.02,9002313.02,326)

"FIA",9002313.02,9002313.02,2008)

"FIA",9002313.02,9002313.02,2009)

"FIA",9002313.02,9002313.02,2038)

"FIA",9002313.02,9002313.0201)
1
"FIA",9002313.02,9002313.0201,320)

"FIA",9002313.02,9002313.0201,498.12)

"FIA",9002313.02,9002313.0201,1093)

"FIA",9002313.02,9002313.0201,2013)

"FIA",9002313.02,9002313.0201,2014)

"FIA",9002313.02,9002313.0201,2015)

"FIA",9002313.02,9002313.0201,2016)

"FIA",9002313.02,9002313.0201,2017)

"FIA",9002313.02,9002313.0201,2018)

"FIA",9002313.02,9002313.0201,2019)

"FIA",9002313.02,9002313.0201,2020)

"FIA",9002313.02,9002313.0201,2021)

"FIA",9002313.02,9002313.0201,2024)

"FIA",9002313.02,9002313.0201,2025)

"FIA",9002313.02,9002313.0201,2026)

"FIA",9002313.02,9002313.0201,2027)

"FIA",9002313.02,9002313.0201,2028)

"FIA",9002313.02,9002313.0201,2029)

"FIA",9002313.02,9002313.0201,2030)

"FIA",9002313.02,9002313.0201,2031)

"FIA",9002313.02,9002313.0201,2032)

"FIA",9002313.02,9002313.0201,2034)

"FIA",9002313.02,9002313.0201,2035)

"FIA",9002313.02,9002313.0201,2037)

"FIA",9002313.02,9002313.0201,2039)

"FIA",9002313.02,9002313.0201,2040)

"FIA",9002313.02,9002313.0201,2041)

"FIA",9002313.02,9002313.0201,2042)

"FIA",9002313.02,9002313.0201,2043)

"FIA",9002313.02,9002313.0201,2044)

"FIA",9002313.02,9002313.0201,2044.01)

"FIA",9002313.02,9002313.0201,2056)

"FIA",9002313.02,9002313.0201,2057)

"FIA",9002313.02,9002313.0201,2058)

"FIA",9002313.02,9002313.0201,2059)

"FIA",9002313.02,9002313.0201,2060)

"FIA",9002313.02,9002313.0201,2061)

"FIA",9002313.02,9002313.022044)
0
"FIA",9002313.03)
BPS RESPONSES
"FIA",9002313.03,0)
^BPSR(
"FIA",9002313.03,0,0)
9002313.03P
"FIA",9002313.03,0,1)
y^y^p^^^^n^^n
"FIA",9002313.03,0,10)

"FIA",9002313.03,0,11)

"FIA",9002313.03,0,"RLRO")

"FIA",9002313.03,0,"VR")
1.0^BPS
"FIA",9002313.03,9002313.03)
1
"FIA",9002313.03,9002313.03,568)

"FIA",9002313.03,9002313.0301)
1
"FIA",9002313.03,9002313.0301,550)

"FIA",9002313.03,9002313.0301,561)

"FIA",9002313.03,9002313.0301,2022)

"FIA",9002313.03,9002313.0301,2033)

"FIA",9002313.03,9002313.0301,2052)

"FIA",9002313.03,9002313.0301,2052.01)

"FIA",9002313.03,9002313.032052)
0
"FIA",9002313.03,9002313.035501)
1
"FIA",9002313.03,9002313.035501,2023)

"FIA",9002313.2)
BPS NCPDP OTHER PAYER AMT PAID QUAL
"FIA",9002313.2,0)
^BPS(9002313.2,
"FIA",9002313.2,0,0)
9002313.2I
"FIA",9002313.2,0,1)
y^y^f^^n^^y^o^n
"FIA",9002313.2,0,10)

"FIA",9002313.2,0,11)

"FIA",9002313.2,0,"RLRO")

"FIA",9002313.2,0,"VR")
1.0^BPS
"FIA",9002313.2,9002313.2)
0
"FIA",9002313.2,9002313.201)
0
"FIA",9002313.31)
BPS CERTIFICATION
"FIA",9002313.31,0)
^BPS(9002313.31,
"FIA",9002313.31,0,0)
9002313.31
"FIA",9002313.31,0,1)
y^y^p^^^^n^^n
"FIA",9002313.31,0,10)

"FIA",9002313.31,0,11)

"FIA",9002313.31,0,"RLRO")

"FIA",9002313.31,0,"VR")
1.0^BPS
"FIA",9002313.31,9002313.31)
1
"FIA",9002313.31,9002313.3123)
1
"FIA",9002313.31,9002313.3123,.03)

"FIA",9002313.31,9002313.31231)
1
"FIA",9002313.31,9002313.31231,.02)

"FIA",9002313.31,9002313.31234)
1
"FIA",9002313.31,9002313.31234,.02)

"FIA",9002313.31,9002313.3124)
1
"FIA",9002313.31,9002313.3124,.02)

"FIA",9002313.32)
BPS PAYER RESPONSE OVERRIDES
"FIA",9002313.32,0)
^BPS(9002313.32,
"FIA",9002313.32,0,0)
9002313.32
"FIA",9002313.32,0,1)
y^y^p^^^^n^^n
"FIA",9002313.32,0,10)

"FIA",9002313.32,0,11)

"FIA",9002313.32,0,"RLRO")

"FIA",9002313.32,0,"VR")
1.0^BPS
"FIA",9002313.32,9002313.32)
1
"FIA",9002313.32,9002313.32,2.01)

"FIA",9002313.32,9002313.32,2.02)

"FIA",9002313.32,9002313.32,2.03)

"FIA",9002313.32,9002313.32,2.04)

"FIA",9002313.32,9002313.32,2.05)

"FIA",9002313.32,9002313.32,2.06)

"FIA",9002313.32,9002313.32,2.07)

"FIA",9002313.32,9002313.32,2.08)

"FIA",9002313.32,9002313.32,3.01)

"FIA",9002313.57)
BPS LOG OF TRANSACTIONS
"FIA",9002313.57,0)
^BPSTL(
"FIA",9002313.57,0,0)
9002313.57
"FIA",9002313.57,0,1)
y^y^p^^^^n^^n
"FIA",9002313.57,0,10)

"FIA",9002313.57,0,11)

"FIA",9002313.57,0,"RLRO")

"FIA",9002313.57,0,"VR")
1.0^BPS
"FIA",9002313.57,9002313.57)
1
"FIA",9002313.57,9002313.5714)
1
"FIA",9002313.57,9002313.5714,.03)

"FIA",9002313.57,9002313.57141)
1
"FIA",9002313.57,9002313.57141,.02)

"FIA",9002313.59)
BPS TRANSACTION
"FIA",9002313.59,0)
^BPST(
"FIA",9002313.59,0,0)
9002313.59O
"FIA",9002313.59,0,1)
y^y^p^^^^n^^n
"FIA",9002313.59,0,10)

"FIA",9002313.59,0,11)

"FIA",9002313.59,0,"RLRO")

"FIA",9002313.59,0,"VR")
1.0^BPS
"FIA",9002313.59,9002313.59)
1
"FIA",9002313.59,9002313.5914)
1
"FIA",9002313.59,9002313.5914,.03)

"FIA",9002313.59,9002313.59141)
1
"FIA",9002313.59,9002313.59141,.02)

"FIA",9002313.77)
BPS REQUESTS
"FIA",9002313.77,0)
^BPS(9002313.77,
"FIA",9002313.77,0,0)
9002313.77
"FIA",9002313.77,0,1)
y^y^p^^^^n^^n
"FIA",9002313.77,0,10)

"FIA",9002313.77,0,11)

"FIA",9002313.77,0,"RLRO")

"FIA",9002313.77,0,"VR")
1.0^BPS
"FIA",9002313.77,9002313.77)
1
"FIA",9002313.77,9002313.778)
1
"FIA",9002313.77,9002313.778,.03)

"FIA",9002313.77,9002313.7781)
1
"FIA",9002313.77,9002313.7781,.02)

"FIA",9002313.91)
BPS NCPDP FIELD DEFS
"FIA",9002313.91,0)
^BPSF(9002313.91,
"FIA",9002313.91,0,0)
9002313.91I
"FIA",9002313.91,0,1)
y^y^f^^n^^y^o^n
"FIA",9002313.91,0,10)

"FIA",9002313.91,0,11)

"FIA",9002313.91,0,"RLRO")

"FIA",9002313.91,0,"VR")
1.0^BPS
"FIA",9002313.91,9002313.91)
0
"FIA",9002313.91,9002313.9101)
0
"FIA",9002313.91,9002313.9102)
0
"FIA",9002313.91,9002313.9103)
0
"FIA",9002313.91,9002313.9104)
0
"FIA",9002313.92)
BPS NCPDP FORMATS
"FIA",9002313.92,0)
^BPSF(9002313.92,
"FIA",9002313.92,0,0)
9002313.92
"FIA",9002313.92,0,1)
y^y^p^^^^n^^n
"FIA",9002313.92,0,10)

"FIA",9002313.92,0,11)

"FIA",9002313.92,0,"RLRO")

"FIA",9002313.92,0,"VR")
1.0^BPS
"FIA",9002313.92,9002313.92)
1
"FIA",9002313.92,9002313.92,290)

"FIA",9002313.92,9002313.92,300)

"FIA",9002313.92,9002313.9229)
0
"FIA",9002313.92,9002313.92291)
0
"FIA",9002313.92,9002313.92292)
0
"FIA",9002313.92,9002313.923)
0
"FIA",9002313.92,9002313.9231)
0
"FIA",9002313.92,9002313.9232)
0
"FIA",9002313.93)
BPS NCPDP REJECT CODES
"FIA",9002313.93,0)
^BPSF(9002313.93,
"FIA",9002313.93,0,0)
9002313.93I
"FIA",9002313.93,0,1)
y^y^f^^n^^y^o^n
"FIA",9002313.93,0,10)

"FIA",9002313.93,0,11)

"FIA",9002313.93,0,"RLRO")

"FIA",9002313.93,0,"VR")
1.0^BPS
"FIA",9002313.93,9002313.93)
0
"INI")
EN^BPS19PRE
"INIT")
EN^BPS19PST
"KRN",19,12248,-1)
2^2
"KRN",19,12248,0)
BPS MENU RPT CLAIM STATUS^Claim Results and Status^^M^66481^BPS REPORTS^^^^^^^^^^^1
"KRN",19,12248,10,0)
^19.01IP^33^33
"KRN",19,12248,10,33,0)
13853^NBS^93
"KRN",19,12248,10,33,"^")
BPS RPT NON-BILLABLE REPORT
"KRN",19,12248,"U")
CLAIM RESULTS AND STATUS
"KRN",19,13853,-1)
0^1
"KRN",19,13853,0)
BPS RPT NON-BILLABLE REPORT^Non-Billable Status Report^^R^^BPS REPORTS^^^^^^E CLAIMS MGMT ENGINE
"KRN",19,13853,1,0)
^19.06^3^3^3141030^^
"KRN",19,13853,1,1,0)
This report lists prescriptions that were submitted to ECME but were not
"KRN",19,13853,1,2,0)
able to be transmitted to the third party because the IB Billable Status
"KRN",19,13853,1,3,0)
check determined the prescription was not billable.
"KRN",19,13853,25)
EN^BPSRPT0(9)
"KRN",19,13853,"U")
NON-BILLABLE STATUS REPORT
"MBREQ")
1
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",570,-1)
1^1
"PKG",570,0)
E CLAIMS MGMT ENGINE^BPS^ELECTRONIC CLAIMS MGT
"PKG",570,20,0)
^9.402P^^
"PKG",570,22,0)
^9.49I^1^1
"PKG",570,22,1,0)
1.0^3041008^3041108^66481
"PKG",570,22,1,"PAH",1,0)
19^3151111
"PKG",570,22,1,"PAH",1,1,0)
^^1^1^3151111
"PKG",570,22,1,"PAH",1,1,1,0)
HAPE EDI Revenue project - NCPDP Continuous Maintenance Standards
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
29
"RTN","BPS19PRE")
0^^B6858890
"RTN","BPS19PRE",1,0)
BPS19PRE ;ALB/DMB - Pre-install for BPS*1.0*19 ;10/21/2014
"RTN","BPS19PRE",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**19**;JUN 2004;Build 18
"RTN","BPS19PRE",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPS19PRE",4,0)
 ;
"RTN","BPS19PRE",5,0)
 ; NCPDP Continuous Maintenance Standards - BPS*1*19 patch pre-install
"RTN","BPS19PRE",6,0)
 ;
"RTN","BPS19PRE",7,0)
 Q
"RTN","BPS19PRE",8,0)
 ;
"RTN","BPS19PRE",9,0)
EN ; Entry Point for post-install
"RTN","BPS19PRE",10,0)
 D MES^XPDUTL("  Starting pre-install for BPS*1*19")
"RTN","BPS19PRE",11,0)
 ; Update the reject code description in BPS NCPDP REJECT CODES
"RTN","BPS19PRE",12,0)
 D REJECTS
"RTN","BPS19PRE",13,0)
 ; Update the field names for BPS NCPPD FIELD DEFS
"RTN","BPS19PRE",14,0)
 D FIELDS
"RTN","BPS19PRE",15,0)
 ;
"RTN","BPS19PRE",16,0)
EX ; exit point
"RTN","BPS19PRE",17,0)
 ;
"RTN","BPS19PRE",18,0)
 D MES^XPDUTL("  Finished pre-install of BPS*1*19")
"RTN","BPS19PRE",19,0)
 Q
"RTN","BPS19PRE",20,0)
 ;
"RTN","BPS19PRE",21,0)
REJECTS ;
"RTN","BPS19PRE",22,0)
 ; Update Reject Codes with new explanations
"RTN","BPS19PRE",23,0)
 N LINE,DATA,NUM,NAME,DA,DIE,DR,CNT
"RTN","BPS19PRE",24,0)
 D MES^XPDUTL("    - Updating BPS NCPDP REJECT CODES")
"RTN","BPS19PRE",25,0)
 S CNT=0
"RTN","BPS19PRE",26,0)
 F LINE=1:1 S DATA=$P($T(NRJCT+LINE),";;",2,99) Q:DATA=""  D
"RTN","BPS19PRE",27,0)
 . S DIE=9002313.93,NUM=$P(DATA,";",1)
"RTN","BPS19PRE",28,0)
 . S DA=$O(^BPSF(DIE,"B",NUM,""))
"RTN","BPS19PRE",29,0)
 . I 'DA Q     ; quit if no IEN found for entry
"RTN","BPS19PRE",30,0)
 . S NAME=$P(DATA,";",2),DR=".02////^S X=NAME",CNT=CNT+1
"RTN","BPS19PRE",31,0)
 . D ^DIE
"RTN","BPS19PRE",32,0)
 D MES^XPDUTL("      - "_CNT_" entries updated")
"RTN","BPS19PRE",33,0)
 D MES^XPDUTL("    - Done with BPS NCPDP REJECT CODES")
"RTN","BPS19PRE",34,0)
 D MES^XPDUTL(" ")
"RTN","BPS19PRE",35,0)
 Q
"RTN","BPS19PRE",36,0)
 ;
"RTN","BPS19PRE",37,0)
NRJCT ; New reject explanations
"RTN","BPS19PRE",38,0)
 ;;27;Product Identifier not FDA/NSDE Listed
"RTN","BPS19PRE",39,0)
 ;;30;Reversal request outside processor reversal window
"RTN","BPS19PRE",40,0)
 ;;31;No matching paid claim found for reversal request
"RTN","BPS19PRE",41,0)
 ;;43;Plan DB indicates the assoc DEA to submitted Prescriber ID is inactive
"RTN","BPS19PRE",42,0)
 ;;
"RTN","BPS19PRE",43,0)
FIELDS ;
"RTN","BPS19PRE",44,0)
 ; Update Field Defs with new descriptions
"RTN","BPS19PRE",45,0)
 N LINE,DATA,NUM,NAME,DA,DIE,DR,CNT
"RTN","BPS19PRE",46,0)
 D MES^XPDUTL("    - Updating BPS NCPDP FIELD DEFS")
"RTN","BPS19PRE",47,0)
 S CNT=0
"RTN","BPS19PRE",48,0)
 F LINE=1:1 S DATA=$P($T(NFLDS+LINE),";;",2,99) Q:DATA=""  D
"RTN","BPS19PRE",49,0)
 . S NUM=$P(DATA,";",1)
"RTN","BPS19PRE",50,0)
 . S DA=$O(^BPSF(9002313.91,"B",NUM,""))
"RTN","BPS19PRE",51,0)
 . I 'DA D MES^XPDUTL("      - No IEN found for entry "_NUM) Q
"RTN","BPS19PRE",52,0)
 . S DIE=9002313.91,NAME=$P(DATA,";",2),DR=".03////^S X=NAME",CNT=CNT+1
"RTN","BPS19PRE",53,0)
 . D ^DIE
"RTN","BPS19PRE",54,0)
 D MES^XPDUTL("      - "_CNT_" entries updated")
"RTN","BPS19PRE",55,0)
 D MES^XPDUTL("    - Done with BPS NCPDP FIELD DEFS")
"RTN","BPS19PRE",56,0)
 D MES^XPDUTL(" ")
"RTN","BPS19PRE",57,0)
 Q
"RTN","BPS19PRE",58,0)
 ;
"RTN","BPS19PRE",59,0)
NFLDS ; New field names
"RTN","BPS19PRE",60,0)
 ;;124;PAY TO ZIP/POSTAL ZONE
"RTN","BPS19PRE",61,0)
 ;;320;EMPLOYER TELEPHONE NUMBER
"RTN","BPS19PRE",62,0)
 ;;326;PATIENT TELEPHONE NUMBER
"RTN","BPS19PRE",63,0)
 ;;498.12;PRESCRIBER TELEPHONE NUMBER
"RTN","BPS19PRE",64,0)
 ;;550;HELP DESK TELEPHONE NUMBER
"RTN","BPS19PRE",65,0)
 ;;
"RTN","BPS19PST")
0^^B32874086
"RTN","BPS19PST",1,0)
BPS19PST ;ALB/DMB - Post-install for BPS*1.0*19 ;10/21/2014
"RTN","BPS19PST",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**19**;JUN 2004;Build 18
"RTN","BPS19PST",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPS19PST",4,0)
 ;
"RTN","BPS19PST",5,0)
 ; NCPDP Continuous Maintenance Standards - BPS*1*19 patch post install
"RTN","BPS19PST",6,0)
 ;
"RTN","BPS19PST",7,0)
 Q
"RTN","BPS19PST",8,0)
 ;
"RTN","BPS19PST",9,0)
EN ; Entry Point for post-install
"RTN","BPS19PST",10,0)
 D MES^XPDUTL("  Starting post-install for BPS*1*19")
"RTN","BPS19PST",11,0)
 ;
"RTN","BPS19PST",12,0)
 ; Update the OTHER PAYER AMT PAID QUALIFIER field in the BPS REQUEST file
"RTN","BPS19PST",13,0)
 D REQUEST
"RTN","BPS19PST",14,0)
 ;
"RTN","BPS19PST",15,0)
 ; Delete the BPS NCPDP FIELD CODE file
"RTN","BPS19PST",16,0)
 D FLDCD
"RTN","BPS19PST",17,0)
 ;
"RTN","BPS19PST",18,0)
 ; Queue background task to update the OTHER PAYER AMT PAID QUALIFIER field in other files
"RTN","BPS19PST",19,0)
 D JOB
"RTN","BPS19PST",20,0)
 ;
"RTN","BPS19PST",21,0)
EX ; exit point
"RTN","BPS19PST",22,0)
 D BMES^XPDUTL("  Finished post-install of BPS*1*19")
"RTN","BPS19PST",23,0)
 Q
"RTN","BPS19PST",24,0)
 ;
"RTN","BPS19PST",25,0)
REQUEST ;
"RTN","BPS19PST",26,0)
 ; Loop through BPS REQUESTS and change the OTHER PAYER AMT PAID QUALIFIER from
"RTN","BPS19PST",27,0)
 ;   a set of codes to a pointer
"RTN","BPS19PST",28,0)
 N IEN,IEN1,IEN2,OIEN,CODE,CNT,SUCCNT
"RTN","BPS19PST",29,0)
 D BMES^XPDUTL("    Update BPS REQUESTS file")
"RTN","BPS19PST",30,0)
 ;
"RTN","BPS19PST",31,0)
 ; Loop through the BPS REQUESTS file
"RTN","BPS19PST",32,0)
 S CNT=0,SUCCNT=0
"RTN","BPS19PST",33,0)
 S IEN=0 F  S IEN=$O(^BPS(9002313.77,IEN)) Q:'IEN  D
"RTN","BPS19PST",34,0)
 . S CNT=CNT+1
"RTN","BPS19PST",35,0)
 . I CNT#1000=1 W "."
"RTN","BPS19PST",36,0)
 . S IEN1=0 F  S IEN1=$O(^BPS(9002313.77,IEN,8,IEN1)) Q:'IEN1  D
"RTN","BPS19PST",37,0)
 .. S IEN2=0 F  S IEN2=$O(^BPS(9002313.77,IEN,8,IEN1,1,IEN2)) Q:'IEN2  D
"RTN","BPS19PST",38,0)
 ... S CODE=$P($G(^BPS(9002313.77,IEN,8,IEN1,1,IEN2,0)),"^",2)
"RTN","BPS19PST",39,0)
 ... I CODE="" Q
"RTN","BPS19PST",40,0)
 ... I CODE=11 Q   ; This is Sales Tax that was already converted
"RTN","BPS19PST",41,0)
 ... I CODE="  " S CODE="00"  ; Not Specified (dictionary is '00', NCPDP is "  ".
"RTN","BPS19PST",42,0)
 ... S OIEN=$O(^BPS(9002313.2,"B",CODE,""))
"RTN","BPS19PST",43,0)
 ... I OIEN="" Q
"RTN","BPS19PST",44,0)
 ... S $P(^BPS(9002313.77,IEN,8,IEN1,1,IEN2,0),"^",2)=OIEN
"RTN","BPS19PST",45,0)
 ... S SUCCNT=SUCCNT+1
"RTN","BPS19PST",46,0)
 ;
"RTN","BPS19PST",47,0)
 D MES^XPDUTL("    Complete - Updated "_SUCCNT_" records.")
"RTN","BPS19PST",48,0)
 Q
"RTN","BPS19PST",49,0)
 ;
"RTN","BPS19PST",50,0)
FLDCD ;
"RTN","BPS19PST",51,0)
 ; Delete the BPS NCPDP FIELD CODE file
"RTN","BPS19PST",52,0)
 ;
"RTN","BPS19PST",53,0)
 D BMES^XPDUTL("    Delete the BPS NCPDP FIELD CODE file")
"RTN","BPS19PST",54,0)
 I '$D(^BPS(9002313.94)),'$D(^DIC(9002313.94)) D MES^XPDUTL("    Already Deleted") Q
"RTN","BPS19PST",55,0)
 N DIU
"RTN","BPS19PST",56,0)
 S DIU=9002313.94,DIU(0)="D"
"RTN","BPS19PST",57,0)
 D EN^DIU2
"RTN","BPS19PST",58,0)
 D MES^XPDUTL("    Complete")
"RTN","BPS19PST",59,0)
 Q
"RTN","BPS19PST",60,0)
 ;
"RTN","BPS19PST",61,0)
JOB ;
"RTN","BPS19PST",62,0)
 D BMES^XPDUTL("    Queuing background job to update the OTHER PAYER AMT PAID QUALIFIER field")
"RTN","BPS19PST",63,0)
 D MES^XPDUTL("    A Mailman message will be sent when it finishes")
"RTN","BPS19PST",64,0)
 ;
"RTN","BPS19PST",65,0)
 ; Setup required variables
"RTN","BPS19PST",66,0)
 N ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSK
"RTN","BPS19PST",67,0)
 S ZTRTN="UPDATE^BPS19PST",ZTIO="",ZTDTH=$H
"RTN","BPS19PST",68,0)
 S ZTDESC="Background job to update the OTHER PAYER AMT PAID QUALIFIER field via BPS*1*19"
"RTN","BPS19PST",69,0)
 ;
"RTN","BPS19PST",70,0)
 ; Task the job
"RTN","BPS19PST",71,0)
 D ^%ZTLOAD
"RTN","BPS19PST",72,0)
 ;
"RTN","BPS19PST",73,0)
 ; Check if task was created
"RTN","BPS19PST",74,0)
 I $D(ZTSK) D MES^XPDUTL("    Task #"_ZTSK_" queued")
"RTN","BPS19PST",75,0)
 I '$D(ZTSK) D MES^XPDUTL("   Task not queued.  Please create a support ticket.")
"RTN","BPS19PST",76,0)
 Q
"RTN","BPS19PST",77,0)
 ;
"RTN","BPS19PST",78,0)
UPDATE ;
"RTN","BPS19PST",79,0)
 ; Update the OTHER PAYER AMT PAID QUALIFIER in BPS Transaction, BPS Log of Transactions,
"RTN","BPS19PST",80,0)
 ;   and BPS Certification.
"RTN","BPS19PST",81,0)
 ;
"RTN","BPS19PST",82,0)
 N IEN,IEN1,IEN2,IEN3,OIEN,CODE,TRANCNT,LOGCNT,CERTCNT
"RTN","BPS19PST",83,0)
 ;
"RTN","BPS19PST",84,0)
 ; Loop through BPS TRANSACTIONs and change the OTHER PAYER AMT PAID QUALIFIER from
"RTN","BPS19PST",85,0)
 ;   a set of codes to a pointer
"RTN","BPS19PST",86,0)
 S TRANCNT=0
"RTN","BPS19PST",87,0)
 S IEN=0 F  S IEN=$O(^BPST(IEN)) Q:'IEN  D
"RTN","BPS19PST",88,0)
 . S IEN1=0 F  S IEN1=$O(^BPST(IEN,14,IEN1)) Q:'IEN1  D
"RTN","BPS19PST",89,0)
 .. S IEN2=0 F  S IEN2=$O(^BPST(IEN,14,IEN1,1,IEN2)) Q:'IEN2  D
"RTN","BPS19PST",90,0)
 ... S CODE=$P($G(^BPST(IEN,14,IEN1,1,IEN2,0)),"^",2)
"RTN","BPS19PST",91,0)
 ... I CODE="" Q
"RTN","BPS19PST",92,0)
 ... I CODE=11 Q    ; This is Sales Tax that was already converted
"RTN","BPS19PST",93,0)
 ... I CODE="  " S CODE="00"  ; Not Specified (dictionary is '00', NCPDP is "  ".
"RTN","BPS19PST",94,0)
 ... S OIEN=$O(^BPS(9002313.2,"B",CODE,""))
"RTN","BPS19PST",95,0)
 ... I OIEN="" Q
"RTN","BPS19PST",96,0)
 ... S $P(^BPST(IEN,14,IEN1,1,IEN2,0),"^",2)=OIEN
"RTN","BPS19PST",97,0)
 ... S TRANCNT=TRANCNT+1
"RTN","BPS19PST",98,0)
 ;
"RTN","BPS19PST",99,0)
 ; Loop through BPS LOG OF TRANSACTIONs and change the OTHER PAYER AMT PAID
"RTN","BPS19PST",100,0)
 ;   QUALIFIER from a set of codes to a pointer
"RTN","BPS19PST",101,0)
 S LOGCNT=0
"RTN","BPS19PST",102,0)
 S IEN=0 F  S IEN=$O(^BPSTL(IEN)) Q:'IEN  D
"RTN","BPS19PST",103,0)
 . S IEN1=0 F  S IEN1=$O(^BPSTL(IEN,14,IEN1)) Q:'IEN1  D
"RTN","BPS19PST",104,0)
 .. S IEN2=0 F  S IEN2=$O(^BPSTL(IEN,14,IEN1,1,IEN2)) Q:'IEN2  D
"RTN","BPS19PST",105,0)
 ... S CODE=$P($G(^BPSTL(IEN,14,IEN1,1,IEN2,0)),"^",2)
"RTN","BPS19PST",106,0)
 ... I CODE="" Q
"RTN","BPS19PST",107,0)
 ... I CODE=11 Q   ; This is Sales Tax that was already converted
"RTN","BPS19PST",108,0)
 ... I CODE="  " S CODE="00"  ; Not Specified (dictionary is '00', NCPDP is "  ".
"RTN","BPS19PST",109,0)
 ... S OIEN=$O(^BPS(9002313.2,"B",CODE,""))
"RTN","BPS19PST",110,0)
 ... I OIEN="" Q
"RTN","BPS19PST",111,0)
 ... S $P(^BPSTL(IEN,14,IEN1,1,IEN2,0),"^",2)=OIEN
"RTN","BPS19PST",112,0)
 ... S LOGCNT=LOGCNT+1
"RTN","BPS19PST",113,0)
 ;
"RTN","BPS19PST",114,0)
 ; Loop through BPS CERTIFICATION and change the OTHER PAYER AMT PAID QUALIFIER from
"RTN","BPS19PST",115,0)
 ;   a set of codes to a pointer
"RTN","BPS19PST",116,0)
 S CERTCNT=0
"RTN","BPS19PST",117,0)
 S IEN=0 F  S IEN=$O(^BPS(9002313.31,IEN)) Q:'IEN  D
"RTN","BPS19PST",118,0)
 . S IEN1=0 F  S IEN1=$O(^BPS(9002313.31,IEN,2,IEN1)) Q:'IEN1  D
"RTN","BPS19PST",119,0)
 .. S IEN2=0 F  S IEN2=$O(^BPS(9002313.31,IEN,2,IEN1,3,IEN2)) Q:'IEN2  D
"RTN","BPS19PST",120,0)
 ... S IEN3=0 F  S IEN3=$O(^BPS(9002313.31,IEN,2,IEN1,3,IEN2,1,IEN3)) Q:'IEN3  D
"RTN","BPS19PST",121,0)
 .... S CODE=$P($G(^BPS(9002313.31,IEN,2,IEN1,3,IEN2,1,IEN3,0)),"^",2)
"RTN","BPS19PST",122,0)
 .... I CODE="" Q
"RTN","BPS19PST",123,0)
 .... I CODE=11 Q   ; This is Sales Tax that was already converted
"RTN","BPS19PST",124,0)
 .... I CODE="  " S CODE="00"  ; Not Specified (dictionary is '00', NCPDP is "  ".
"RTN","BPS19PST",125,0)
 .... S OIEN=$O(^BPS(9002313.2,"B",CODE,""))
"RTN","BPS19PST",126,0)
 .... I OIEN="" Q
"RTN","BPS19PST",127,0)
 .... S $P(^BPS(9002313.31,IEN,2,IEN1,3,IEN2,1,IEN3,0),"^",2)=OIEN
"RTN","BPS19PST",128,0)
 .... S CERTCNT=CERTCNT+1
"RTN","BPS19PST",129,0)
 ;
"RTN","BPS19PST",130,0)
 ; Send mailman message with results
"RTN","BPS19PST",131,0)
 D MAIL(TRANCNT,LOGCNT,CERTCNT)
"RTN","BPS19PST",132,0)
 Q
"RTN","BPS19PST",133,0)
 ;
"RTN","BPS19PST",134,0)
MAIL(TRANCNT,LOGCNT,CERTCNT) ;
"RTN","BPS19PST",135,0)
 N CNT,MSG,XMY,XMDUZ,DIFROM,XMSUB,XMTEXT
"RTN","BPS19PST",136,0)
 S XMY(DUZ)=""
"RTN","BPS19PST",137,0)
 S XMSUB="BPS*1.0*19 Post install is complete",XMDUZ="Patch BPS*1.0*19"
"RTN","BPS19PST",138,0)
 S XMTEXT="MSG("
"RTN","BPS19PST",139,0)
 S CNT=1,MSG(CNT)=""
"RTN","BPS19PST",140,0)
 S CNT=CNT+1,MSG(CNT)="Patch BPS*1.0*19 post install routine has completed."
"RTN","BPS19PST",141,0)
 S CNT=CNT+1,MSG(CNT)=""
"RTN","BPS19PST",142,0)
 S CNT=CNT+1,MSG(CNT)="Updated "_TRANCNT_" records in the BPS TRANSACTION file."
"RTN","BPS19PST",143,0)
 S CNT=CNT+1,MSG(CNT)="Updated "_LOGCNT_" records in the BPS LOG OF TRANSACTIONS file."
"RTN","BPS19PST",144,0)
 S CNT=CNT+1,MSG(CNT)="Updated "_CERTCNT_" records in the BPS CERTIFICATION file."
"RTN","BPS19PST",145,0)
 S CNT=CNT+1,MSG(CNT)=""
"RTN","BPS19PST",146,0)
 S CNT=CNT+1,MSG(CNT)="For more information about this post install, review the patch description."
"RTN","BPS19PST",147,0)
 D ^XMD
"RTN","BPS19PST",148,0)
 Q
"RTN","BPSECA1")
0^16^B14554293
"RTN","BPSECA1",1,0)
BPSECA1 ;BHAM ISC/FCS/DRS/VA/DLF - Assemble formatted claim ;05/14/2004
"RTN","BPSECA1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8,10,15,19**;JUN 2004;Build 18
"RTN","BPSECA1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSECA1",4,0)
 ;
"RTN","BPSECA1",5,0)
 ;----------------------------------------------------------------------
"RTN","BPSECA1",6,0)
 ; Assemble ASCII formatted claim submission record
"RTN","BPSECA1",7,0)
 ;
"RTN","BPSECA1",8,0)
 ; Input Variables:
"RTN","BPSECA1",9,0)
 ;  CLAIMIEN - pointer into 9002313.02
"RTN","BPSECA1",10,0)
 ;  MSG - Array passed by reference - This will have the claim packet
"RTN","BPSECA1",11,0)
 ;
"RTN","BPSECA1",12,0)
 ;    5.1 had 14 claim segments (Header, Patient, Insurance, Claim
"RTN","BPSECA1",13,0)
 ;                                Pharmacy Provider, Prescriber,
"RTN","BPSECA1",14,0)
 ;                                COB, Workers Comp, DUR, Pricing,
"RTN","BPSECA1",15,0)
 ;                                Coupon, Compound, Prior Auth,
"RTN","BPSECA1",16,0)
 ;                                Clinical)
"RTN","BPSECA1",17,0)
 ;
"RTN","BPSECA1",18,0)
 ;    D.0 added 3 new request segments (Additional Documentation,
"RTN","BPSECA1",19,0)
 ;                                       Facility, Narrative)
"RTN","BPSECA1",20,0)
 ;
"RTN","BPSECA1",21,0)
 ;    D.1 - D.9 introduces Alphanumeric NCPDP numbers and new
"RTN","BPSECA1",22,0)
 ;                              Purchase and Provider segments
"RTN","BPSECA1",23,0)
 ;
"RTN","BPSECA1",24,0)
 ;    E.0 - E.6 added 2 new request segments (Intermediary, Last
"RTN","BPSECA1",25,0)
 ;                                             Known 4RX)
"RTN","BPSECA1",26,0)
 ;
"RTN","BPSECA1",27,0)
 ;    5.1/D.0 requires field identifiers and separators on all fields
"RTN","BPSECA1",28,0)
 ;        other than the header
"RTN","BPSECA1",29,0)
 ;    5.1/D.0 segment separators are required prior to each segment
"RTN","BPSECA1",30,0)
 ;        following the header
"RTN","BPSECA1",31,0)
 ;    5.1/D.0 group separators appear at the end of each
"RTN","BPSECA1",32,0)
 ;        transaction (prescription)
"RTN","BPSECA1",33,0)
 ;
"RTN","BPSECA1",34,0)
ASCII(CLAIMIEN,MSG) ;EP - from BPSOSQG
"RTN","BPSECA1",35,0)
 N IEN,RECORD,BPS,UERETVAL,DET51,WP
"RTN","BPSECA1",36,0)
 ;
"RTN","BPSECA1",37,0)
 ; Quit if no Claim IEN
"RTN","BPSECA1",38,0)
 I '$G(CLAIMIEN) Q
"RTN","BPSECA1",39,0)
 I '$D(^BPSC(CLAIMIEN,0)) Q
"RTN","BPSECA1",40,0)
 ;
"RTN","BPSECA1",41,0)
 ; Setup IEN variables (used when executing format code)
"RTN","BPSECA1",42,0)
 S IEN(9002313.02)=CLAIMIEN
"RTN","BPSECA1",43,0)
 ;
"RTN","BPSECA1",44,0)
 ; Get Payer Sheet pointer
"RTN","BPSECA1",45,0)
 S IEN(9002313.92)=$P($G(^BPSC(IEN(9002313.02),0)),U,2)
"RTN","BPSECA1",46,0)
 ;
"RTN","BPSECA1",47,0)
 ; Quit if the payer sheet pointer is missing
"RTN","BPSECA1",48,0)
 I 'IEN(9002313.92) Q
"RTN","BPSECA1",49,0)
 ;
"RTN","BPSECA1",50,0)
 ; Quit if the payer sheet does not exist
"RTN","BPSECA1",51,0)
 I '$D(^BPSF(9002313.92,+IEN(9002313.92),0)) Q
"RTN","BPSECA1",52,0)
 ;
"RTN","BPSECA1",53,0)
 ; Retrieve claim submission record (used when executing format code)
"RTN","BPSECA1",54,0)
 D GETBPS2^BPSECX0(IEN(9002313.02),.BPS)
"RTN","BPSECA1",55,0)
 ;
"RTN","BPSECA1",56,0)
 ; Assemble required claim header and optional format sections
"RTN","BPSECA1",57,0)
 S RECORD=""
"RTN","BPSECA1",58,0)
 ;
"RTN","BPSECA1",59,0)
 ; Do non-repeating claim segments
"RTN","BPSECA1",60,0)
 D XLOOP^BPSOSH2("100^110^120",.IEN,.BPS,.RECORD)
"RTN","BPSECA1",61,0)
 ;
"RTN","BPSECA1",62,0)
 ; Set list of repeating claim segments
"RTN","BPSECA1",63,0)
 S DET51="130^140^150^160^170^180^190^200^210^220^230^240^250^260^270^280^290^300"
"RTN","BPSECA1",64,0)
 ;
"RTN","BPSECA1",65,0)
 ; Loop through prescription multiple and get create repeating segments
"RTN","BPSECA1",66,0)
 S IEN(9002313.0201)=0
"RTN","BPSECA1",67,0)
 F  S IEN(9002313.0201)=$O(^BPSC(IEN(9002313.02),400,IEN(9002313.0201))) Q:'IEN(9002313.0201)  D
"RTN","BPSECA1",68,0)
 . ;
"RTN","BPSECA1",69,0)
 . ;Retrieve prescription information (used when executing format code)
"RTN","BPSECA1",70,0)
 . K BPS(9002313.0201)
"RTN","BPSECA1",71,0)
 . D GETBPS3^BPSECX0(IEN(9002313.02),IEN(9002313.0201),.BPS)
"RTN","BPSECA1",72,0)
 . ;
"RTN","BPSECA1",73,0)
 . ; Handle the DUR repeating flds
"RTN","BPSECA1",74,0)
 . D DURVALUE
"RTN","BPSECA1",75,0)
 . ;
"RTN","BPSECA1",76,0)
 . ; Handle the COB flds
"RTN","BPSECA1",77,0)
 . D COBFLDS
"RTN","BPSECA1",78,0)
 . ;
"RTN","BPSECA1",79,0)
 . ; If not eligibility verification transmission, append group separator character
"RTN","BPSECA1",80,0)
 . I $G(BPS(9002313.02,+$G(IEN(9002313.02)),103,"I"))'="E1" S RECORD=RECORD_$C(29)
"RTN","BPSECA1",81,0)
 . ;
"RTN","BPSECA1",82,0)
 . ; Assemble claim information required and optional sections
"RTN","BPSECA1",83,0)
 . D XLOOP^BPSOSH2(DET51,.IEN,.BPS,.RECORD)
"RTN","BPSECA1",84,0)
 ;
"RTN","BPSECA1",85,0)
 ; Need to store by segment due to HL7 constraints.  Had to change field, group,
"RTN","BPSECA1",86,0)
 ; and segment separators to control characters for Vitria/AAC processing as well as
"RTN","BPSECA1",87,0)
 ; shortening the length of the xmit.
"RTN","BPSECA1",88,0)
 ; DMB 11/27/2006 - If the first NNODES has $C(30), this will bomb since OREC will not 
"RTN","BPSECA1",89,0)
 ;   have a value.  Need to look into this.
"RTN","BPSECA1",90,0)
 N NNODES,INDEX,ONE,TWO,OREC
"RTN","BPSECA1",91,0)
 S NNODES=0 F  S NNODES=$O(RECORD(NNODES)) Q:NNODES=""  D
"RTN","BPSECA1",92,0)
 . I RECORD(NNODES)[$C(30) D
"RTN","BPSECA1",93,0)
 .. S ONE=$P(RECORD(NNODES),($C(30)_$C(28)),1),TWO=$P(RECORD(NNODES),($C(30)_$C(28)),2)
"RTN","BPSECA1",94,0)
 .. S RECORD(OREC)=RECORD(OREC)_ONE_$C(30)_$C(28),RECORD(NNODES)=TWO
"RTN","BPSECA1",95,0)
 . S OREC=NNODES
"RTN","BPSECA1",96,0)
 ;
"RTN","BPSECA1",97,0)
 ; Put claim packet into local array to be passed back to calling routine
"RTN","BPSECA1",98,0)
 S NNODES=""
"RTN","BPSECA1",99,0)
 S INDEX=1 F  S NNODES=$O(RECORD(NNODES)) Q:NNODES=""  D
"RTN","BPSECA1",100,0)
 . S MSG("HLS",INDEX)=RECORD(NNODES)
"RTN","BPSECA1",101,0)
 . S WP(INDEX/100+1,0)=RECORD(NNODES)
"RTN","BPSECA1",102,0)
 . S INDEX=INDEX+1
"RTN","BPSECA1",103,0)
 S MSG("HLS",0)=INDEX-1
"RTN","BPSECA1",104,0)
 ;
"RTN","BPSECA1",105,0)
 ; Store raw data into the BPS Claims record
"RTN","BPSECA1",106,0)
 D WP^DIE(9002313.02,CLAIMIEN_",",9999,"","WP")
"RTN","BPSECA1",107,0)
 Q
"RTN","BPSECA1",108,0)
 ;
"RTN","BPSECA1",109,0)
 ; DURVALUE - This subroutine will loop through the DUR/PPS repeating
"RTN","BPSECA1",110,0)
 ; fields and load their values into the BPS array for the claim
"RTN","BPSECA1",111,0)
 ; generation process
"RTN","BPSECA1",112,0)
DURVALUE ;
"RTN","BPSECA1",113,0)
 N DURCNT,DUR
"RTN","BPSECA1",114,0)
 ;
"RTN","BPSECA1",115,0)
 K BPS(9002313.1001)
"RTN","BPSECA1",116,0)
 ;
"RTN","BPSECA1",117,0)
 ; Get the number of DUR records
"RTN","BPSECA1",118,0)
 S DURCNT=$P($G(^BPSC(IEN(9002313.02),400,IEN(9002313.0201),473.01,0)),U,4)
"RTN","BPSECA1",119,0)
 ;
"RTN","BPSECA1",120,0)
 ; Loop through DURS and get the data
"RTN","BPSECA1",121,0)
 F DUR=1:1:DURCNT  D
"RTN","BPSECA1",122,0)
 . D GETBPS4^BPSECX0(IEN(9002313.02),IEN(9002313.0201),DUR,.BPS)
"RTN","BPSECA1",123,0)
 Q
"RTN","BPSECA1",124,0)
 ; COBFLDS - This subroutine will loop through the COB OTHER PAYMENTS repeating
"RTN","BPSECA1",125,0)
 ; fields and load their values into the BPS array for the claim
"RTN","BPSECA1",126,0)
 ; generation process
"RTN","BPSECA1",127,0)
COBFLDS ;
"RTN","BPSECA1",128,0)
 N BPCOBCNT,BPSCOB
"RTN","BPSECA1",129,0)
 ;
"RTN","BPSECA1",130,0)
 K BPS(9002313.0401)
"RTN","BPSECA1",131,0)
 ;
"RTN","BPSECA1",132,0)
 ; Get the number of COB records
"RTN","BPSECA1",133,0)
 S BPCOBCNT=$P($G(^BPSC(IEN(9002313.02),400,IEN(9002313.0201),337,0)),U,4)
"RTN","BPSECA1",134,0)
 ;
"RTN","BPSECA1",135,0)
 ; Loop through COB and get the data
"RTN","BPSECA1",136,0)
 F BPSCOB=1:1:BPCOBCNT  D
"RTN","BPSECA1",137,0)
 . D GETBPS5^BPSECX0(IEN(9002313.02),IEN(9002313.0201),BPSCOB,.BPS)
"RTN","BPSECA1",138,0)
 Q
"RTN","BPSECMP2")
0^27^B193647932
"RTN","BPSECMP2",1,0)
BPSECMP2 ;BHAM ISC/FCS/DRS - Parse Claim Response ;11/14/07  13:23
"RTN","BPSECMP2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,6,7,8,10,11,19**;JUN 2004;Build 18
"RTN","BPSECMP2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSECMP2",4,0)
 ;
"RTN","BPSECMP2",5,0)
 ;Reference to STORESP^IBNCPDP supported by DBIA 4299
"RTN","BPSECMP2",6,0)
 ;Reference to ^DPT supported by DBIA 10035
"RTN","BPSECMP2",7,0)
 ;Reference to $$SITE^VASITE supported by DBIA 10112
"RTN","BPSECMP2",8,0)
 ;Reference to AUDIT^PSOTRI supported by ICR 6156
"RTN","BPSECMP2",9,0)
 ;
"RTN","BPSECMP2",10,0)
 Q
"RTN","BPSECMP2",11,0)
 ; Parameters:
"RTN","BPSECMP2",12,0)
 ;    CLAIMIEN: IEN from BPS Claims
"RTN","BPSECMP2",13,0)
 ;    RESPIEN:  IEN from BPS Response
"RTN","BPSECMP2",14,0)
 ;    EVENT:    This is used by PSO to create specific events (BILL).
"RTN","BPSECMP2",15,0)
 ;    USER:     User who is creating the event.  This is required when EVENT is sent.
"RTN","BPSECMP2",16,0)
IBSEND(CLAIMIEN,RESPIEN,EVENT,USER) ;
"RTN","BPSECMP2",17,0)
 N BPSARRY,RXIEN,FILLNUM,IND,TRNDX
"RTN","BPSECMP2",18,0)
 N CLAIMNFO,RESPNFO,RXINFO,RFINFO,TRANINFO
"RTN","BPSECMP2",19,0)
 N RESPONSE,RXACT,CLREAS,BILLNUM,DFN,REQCLAIM
"RTN","BPSECMP2",20,0)
 N DIE,DA,DR,AMT,ELIG
"RTN","BPSECMP2",21,0)
 ;
"RTN","BPSECMP2",22,0)
 ; Quit if there is not a Response or Claim IEN
"RTN","BPSECMP2",23,0)
 I '$G(RESPIEN) Q
"RTN","BPSECMP2",24,0)
 I '$G(CLAIMIEN) Q
"RTN","BPSECMP2",25,0)
 ;
"RTN","BPSECMP2",26,0)
 ; Get Claims and Response Data
"RTN","BPSECMP2",27,0)
 D GETS^DIQ("9002313.02",CLAIMIEN,"103;400*;401;402;403;430","","CLAIMNFO")
"RTN","BPSECMP2",28,0)
 D GETS^DIQ("9002313.0301","1,"_RESPIEN,"112;503;505;506;507;509;518","I","RESPNFO")
"RTN","BPSECMP2",29,0)
 ;
"RTN","BPSECMP2",30,0)
 ; Get the Transaction IEN and Data
"RTN","BPSECMP2",31,0)
 S IND=$S(CLAIMNFO("9002313.02",CLAIMIEN_",","103")="B2":"AER",1:"AE")
"RTN","BPSECMP2",32,0)
 S TRNDX=$O(^BPST(IND,CLAIMIEN,""))
"RTN","BPSECMP2",33,0)
 I TRNDX="" Q
"RTN","BPSECMP2",34,0)
 D GETS^DIQ("9002313.59",TRNDX,"1.05;3;5;13;404;509;510;901.04;1201","I","TRANINFO")
"RTN","BPSECMP2",35,0)
 ;
"RTN","BPSECMP2",36,0)
 ; If Certify Mode is On, don't send to IB
"RTN","BPSECMP2",37,0)
 I $$GET1^DIQ(9002313.59902,"1,"_TRNDX_",","902.22")["MODE ON" Q
"RTN","BPSECMP2",38,0)
 ;
"RTN","BPSECMP2",39,0)
 ; Get Patient
"RTN","BPSECMP2",40,0)
 S DFN=TRANINFO("9002313.59",TRNDX_",",5,"I")
"RTN","BPSECMP2",41,0)
 ;
"RTN","BPSECMP2",42,0)
 ; Get Policy, Plan ID and Rate Type
"RTN","BPSECMP2",43,0)
 S BPSARRY("POLICY")=TRANINFO("9002313.59",TRNDX_",",1.05,"I")
"RTN","BPSECMP2",44,0)
 I $D(^BPST(TRNDX,10,1,0)) D
"RTN","BPSECMP2",45,0)
 . S BPSARRY("PLAN")=$P(^BPST(TRNDX,10,1,0),U)
"RTN","BPSECMP2",46,0)
 . S BPSARRY("RTYPE")=$P(^BPST(TRNDX,10,1,0),U,8)
"RTN","BPSECMP2",47,0)
 ;
"RTN","BPSECMP2",48,0)
 ; Store RXACT into a local variable as it is will be used a lot
"RTN","BPSECMP2",49,0)
 S RXACT=TRANINFO("9002313.59",TRNDX_",",1201,"I")
"RTN","BPSECMP2",50,0)
 ;
"RTN","BPSECMP2",51,0)
 ; Setup User data
"RTN","BPSECMP2",52,0)
 ; If event is passed in, the user should be passed in as well
"RTN","BPSECMP2",53,0)
 ; If no Event, but action is Auto-Reversal (AREV) or CMOP
"RTN","BPSECMP2",54,0)
 ;   processing (CR*/PC), use postmaster (.5)
"RTN","BPSECMP2",55,0)
 ; Else use the user from BPS Transaction
"RTN","BPSECMP2",56,0)
 I EVENT]"" S BPSARRY("USER")=USER
"RTN","BPSECMP2",57,0)
 E  I ",AREV,CRLB,CRLX,CRLR,CRRL,PC,"[(","_RXACT_",") S BPSARRY("USER")=.5
"RTN","BPSECMP2",58,0)
 E  S BPSARRY("USER")=TRANINFO("9002313.59",TRNDX_",",13,"I")
"RTN","BPSECMP2",59,0)
 ;
"RTN","BPSECMP2",60,0)
 ; Send eligibility response to IB
"RTN","BPSECMP2",61,0)
 I RXACT="ELIG" D  Q
"RTN","BPSECMP2",62,0)
 . S BPSARRY("STATUS")=RXACT
"RTN","BPSECMP2",63,0)
 . S BPSARRY("RESPIEN")=RESPIEN
"RTN","BPSECMP2",64,0)
 . S BILLNUM=$$STORESP^IBNCPDP(DFN,.BPSARRY)
"RTN","BPSECMP2",65,0)
 ;
"RTN","BPSECMP2",66,0)
 ; Determine Prescription IEN
"RTN","BPSECMP2",67,0)
 S RXIEN=$P(^BPSC(CLAIMIEN,400,1,0),"^",5)
"RTN","BPSECMP2",68,0)
 ;
"RTN","BPSECMP2",69,0)
 ; If no RX record, this was a certification test so don't send to IB
"RTN","BPSECMP2",70,0)
 I $$RXAPI1^BPSUTIL1(RXIEN,.01)="" Q
"RTN","BPSECMP2",71,0)
 ;
"RTN","BPSECMP2",72,0)
 ; Determine Payer Response
"RTN","BPSECMP2",73,0)
 ; Treat Duplicate of Accepted Reversal ("S") as accepted
"RTN","BPSECMP2",74,0)
 S RESPONSE=RESPNFO(9002313.0301,"1,"_RESPIEN_",",112,"I")
"RTN","BPSECMP2",75,0)
 S RESPONSE=$S(RESPONSE="A":"ACCEPTED",RESPONSE="C":"CAPTURED",RESPONSE="D":"DUPLICATE",RESPONSE="P":"PAYABLE",RESPONSE="R":"REJECTED",RESPONSE="S":"ACCEPTED",1:"OTHER")
"RTN","BPSECMP2",76,0)
 ;
"RTN","BPSECMP2",77,0)
 ; Get Prescription Information
"RTN","BPSECMP2",78,0)
 D RXAPI^BPSUTIL1(RXIEN,".01;4;6;7;8;16;27","RXINFO","IE")
"RTN","BPSECMP2",79,0)
 ;
"RTN","BPSECMP2",80,0)
 ; Get Refill Info if this is a refill
"RTN","BPSECMP2",81,0)
 S FILLNUM=+$E($P(TRNDX,".",2),1,4)
"RTN","BPSECMP2",82,0)
 I FILLNUM>0 D RXSUBF^BPSUTIL1(RXIEN,52,52.1,FILLNUM,".01;1;1.1;11","RFINFO","E")
"RTN","BPSECMP2",83,0)
 ;
"RTN","BPSECMP2",84,0)
 ; Date of Service
"RTN","BPSECMP2",85,0)
 S BPSARRY("DOS")=CLAIMNFO("9002313.02",CLAIMIEN_",","401")
"RTN","BPSECMP2",86,0)
 I BPSARRY("DOS") S BPSARRY("DOS")=BPSARRY("DOS")-17000000
"RTN","BPSECMP2",87,0)
 ;
"RTN","BPSECMP2",88,0)
 ; Information needed for PAID/BILLING event
"RTN","BPSECMP2",89,0)
 S BPSARRY("PAID")=0
"RTN","BPSECMP2",90,0)
 I RESPONSE="PAYABLE"!(RESPONSE="DUPLICATE") D
"RTN","BPSECMP2",91,0)
 . ; Patient Pay Amount
"RTN","BPSECMP2",92,0)
 . S AMT=$G(RESPNFO(9002313.0301,"1,"_RESPIEN_",",505,"I"))
"RTN","BPSECMP2",93,0)
 . I AMT S BPSARRY("PAT RESP")=$$DFF2EXT^BPSECFM(AMT)
"RTN","BPSECMP2",94,0)
 . ; Ingredient Cost Paid
"RTN","BPSECMP2",95,0)
 . S AMT=$G(RESPNFO(9002313.0301,"1,"_RESPIEN_",",506,"I"))
"RTN","BPSECMP2",96,0)
 . I AMT S BPSARRY("ING COST PAID")=$$DFF2EXT^BPSECFM(AMT)
"RTN","BPSECMP2",97,0)
 . ; Dispensing Fee Paid
"RTN","BPSECMP2",98,0)
 . S AMT=$G(RESPNFO(9002313.0301,"1,"_RESPIEN_",",507,"I"))
"RTN","BPSECMP2",99,0)
 . I AMT S BPSARRY("DISP FEE PAID")=$$DFF2EXT^BPSECFM(AMT)
"RTN","BPSECMP2",100,0)
 . ; Total Amount Paid
"RTN","BPSECMP2",101,0)
 . S BPSARRY("PAID")=$$DFF2EXT^BPSECFM(RESPNFO(9002313.0301,"1,"_RESPIEN_",",509,"I"))
"RTN","BPSECMP2",102,0)
 . ; Amount of Copay
"RTN","BPSECMP2",103,0)
 . S AMT=$G(RESPNFO(9002313.0301,"1,"_RESPIEN_",",518,"I"))
"RTN","BPSECMP2",104,0)
 . I AMT S BPSARRY("COPAY")=$$DFF2EXT^BPSECFM(AMT)
"RTN","BPSECMP2",105,0)
 . ;
"RTN","BPSECMP2",106,0)
 . S BPSARRY("AUTH #")=RESPNFO(9002313.0301,"1,"_RESPIEN_",",503,"I")
"RTN","BPSECMP2",107,0)
 . S BPSARRY("RX NO")=RXINFO(52,RXIEN,.01,"E")
"RTN","BPSECMP2",108,0)
 . S BPSARRY("DRUG")=$$RXAPI1^BPSUTIL1(RXIEN,6,"I")
"RTN","BPSECMP2",109,0)
 . I FILLNUM<1 S BPSARRY("DAYS SUPPLY")=RXINFO(52,RXIEN,8,"E")
"RTN","BPSECMP2",110,0)
 . E  S BPSARRY("DAYS SUPPLY")=$G(RFINFO(52.1,FILLNUM,1.1,"E"))
"RTN","BPSECMP2",111,0)
 . ; Billing Quantity and Units
"RTN","BPSECMP2",112,0)
 . S BPSARRY("QTY")=$G(TRANINFO("9002313.59",TRNDX_",",509,"I"))
"RTN","BPSECMP2",113,0)
 . S BPSARRY("UNITS")=$G(TRANINFO("9002313.59",TRNDX_",",510,"I"))
"RTN","BPSECMP2",114,0)
 . ; NCPDP Quantity and Units
"RTN","BPSECMP2",115,0)
 . S BPSARRY("NCPDP QTY")=$P(CLAIMNFO("9002313.0201","1,"_CLAIMIEN_",","442"),"E7",2)/1000
"RTN","BPSECMP2",116,0)
 . S BPSARRY("NCPDP UNITS")=$P(CLAIMNFO("9002313.0201","1,"_CLAIMIEN_",","600"),"28",2)
"RTN","BPSECMP2",117,0)
 ;
"RTN","BPSECMP2",118,0)
 ; Get primary IB bill# and prior payment amount
"RTN","BPSECMP2",119,0)
 I $D(^BPST(TRNDX,10,1,2)) D
"RTN","BPSECMP2",120,0)
 . S BPSARRY("PRIMARY BILL")=$P(^BPST(TRNDX,10,1,2),U,8)
"RTN","BPSECMP2",121,0)
 . S BPSARRY("PRIOR PAYMENT")=$P(^BPST(TRNDX,10,1,2),U,9)
"RTN","BPSECMP2",122,0)
 ;
"RTN","BPSECMP2",123,0)
 ; Setup miscellaneous values
"RTN","BPSECMP2",124,0)
 S BPSARRY("RXCOB")=$$COB59^BPSUTIL2(TRNDX)
"RTN","BPSECMP2",125,0)
 S BPSARRY("NDC")=$$GETNDC^PSONDCUT(RXIEN,FILLNUM)
"RTN","BPSECMP2",126,0)
 S BPSARRY("FILL NUMBER")=FILLNUM
"RTN","BPSECMP2",127,0)
 S BPSARRY("FILLED BY")=RXINFO(52,RXIEN,16,"I")
"RTN","BPSECMP2",128,0)
 S BPSARRY("PRESCRIPTION")=RXIEN
"RTN","BPSECMP2",129,0)
 S BPSARRY("BILLED")=$P(CLAIMNFO("9002313.0201","1,"_CLAIMIEN_",","430"),"DU",2)
"RTN","BPSECMP2",130,0)
 S BPSARRY("BILLED")=$$DFF2EXT^BPSECFM(BPSARRY("BILLED"))
"RTN","BPSECMP2",131,0)
 S BPSARRY("CLAIMID")=$P(CLAIMNFO("9002313.0201","1,"_CLAIMIEN_",","402"),"D2",2)
"RTN","BPSECMP2",132,0)
 S BPSARRY("RELEASE DATE")=$S(FILLNUM=0:$$RXAPI1^BPSUTIL1(RXIEN,31,"I"),1:$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,FILLNUM,17,"I"))
"RTN","BPSECMP2",133,0)
 S BPSARRY("RESPONSE")=RESPONSE
"RTN","BPSECMP2",134,0)
 S BPSARRY("EPHARM")=$$GET1^DIQ(9002313.59,TRNDX,1.07,"I")
"RTN","BPSECMP2",135,0)
 ;
"RTN","BPSECMP2",136,0)
 ; For reversals, get reversal reason and check for closed reason
"RTN","BPSECMP2",137,0)
 ; Call IB with Reversal Event
"RTN","BPSECMP2",138,0)
 ; If there is a close reason, call IB with CLOSE event
"RTN","BPSECMP2",139,0)
 ;    and update BPS Claim with close information
"RTN","BPSECMP2",140,0)
 I EVENT="",$$ISREVERS^BPSOSU(CLAIMIEN) D  Q
"RTN","BPSECMP2",141,0)
 . S REQCLAIM=TRANINFO("9002313.59",TRNDX_",",3,"I")
"RTN","BPSECMP2",142,0)
 . S BPSARRY("REVERSAL REASON")=TRANINFO("9002313.59",TRNDX_",",404,"I")
"RTN","BPSECMP2",143,0)
 . S BPSARRY("RTS-DEL")=0
"RTN","BPSECMP2",144,0)
 . ; Get RX action, which determine close event
"RTN","BPSECMP2",145,0)
 . I RXACT="RS" S CLREAS="PRESCRIPTION NOT RELEASED",BPSARRY("RTS-DEL")=1
"RTN","BPSECMP2",146,0)
 . I RXACT="DE" D
"RTN","BPSECMP2",147,0)
 . . S CLREAS="PRESCRIPTION DELETED",BPSARRY("RTS-DEL")=1
"RTN","BPSECMP2",148,0)
 . . ; check whether RX was in fact deleted in Pharmacy
"RTN","BPSECMP2",149,0)
 . . ; if not then the refill was deleted
"RTN","BPSECMP2",150,0)
 . . I $$RXSTATUS^BPSSCRU2(RXIEN)'=13 S BPSARRY("CLOSE COMMENT")="DELETION OF REFILL ONLY - ORIGINAL RX MAY REMAIN ACTIVE"
"RTN","BPSECMP2",151,0)
 . ; If accepted inpatient autoreversal, then close the claim
"RTN","BPSECMP2",152,0)
 . I RXACT="AREV",RESPONSE="ACCEPTED",REQCLAIM,$P($G(^BPSC(REQCLAIM,0)),U,7)=2 D
"RTN","BPSECMP2",153,0)
 .. S CLREAS="INPATIENT RX AUTO-REVERSAL",BPSARRY("CLOSE COMMENT")="INPATIENT PRESCRIPTION"
"RTN","BPSECMP2",154,0)
 .. S ELIG=TRANINFO("9002313.59",TRNDX_",",901.04,"I")
"RTN","BPSECMP2",155,0)
 .. I ELIG="T"!(ELIG="C") D AUDIT^PSOTRI(RXIEN,FILLNUM,BPSARRY("RXCOB"),$S(ELIG="T":"TRICARE",1:"CHAMPVA")_" INPATIENT AUTO-REVERSAL","I",ELIG)
"RTN","BPSECMP2",156,0)
 . I $D(CLREAS) S BPSARRY("CLOSE REASON")=$O(^IBE(356.8,"B",CLREAS,0))
"RTN","BPSECMP2",157,0)
 . ;
"RTN","BPSECMP2",158,0)
 . ; Call IB for Reversal Event
"RTN","BPSECMP2",159,0)
 . S BPSARRY("STATUS")="REVERSED",BILLNUM=$$STORESP^IBNCPDP(DFN,.BPSARRY)
"RTN","BPSECMP2",160,0)
 . ; If there is no close reason, quit
"RTN","BPSECMP2",161,0)
 . I '$D(BPSARRY("CLOSE REASON")) Q
"RTN","BPSECMP2",162,0)
 . ; Call IB for CLOSE event
"RTN","BPSECMP2",163,0)
 . ;  Note for close, user is always postmaster (.5)
"RTN","BPSECMP2",164,0)
 . S BPSARRY("STATUS")="CLOSED",BPSARRY("USER")=.5
"RTN","BPSECMP2",165,0)
 . S BILLNUM=$$STORESP^IBNCPDP(DFN,.BPSARRY)
"RTN","BPSECMP2",166,0)
 . ;
"RTN","BPSECMP2",167,0)
 . ; Populate the original claim request with the close reason
"RTN","BPSECMP2",168,0)
 . I REQCLAIM D
"RTN","BPSECMP2",169,0)
 .. S DIE="^BPSC(",DA=REQCLAIM
"RTN","BPSECMP2",170,0)
 .. S DR="901///1;902///"_$$NOW^XLFDT()_";903////.5;904///"_BPSARRY("CLOSE REASON")
"RTN","BPSECMP2",171,0)
 .. D ^DIE
"RTN","BPSECMP2",172,0)
 . ; If this is a primary claim, check and send a bulletin if the secondary claim is open or if there
"RTN","BPSECMP2",173,0)
 . ;   is a non-cancelled IB bill for the secondary claim
"RTN","BPSECMP2",174,0)
 . ; NOTE that we only want to do a bulletin for an Inpatient Auto-Reversal or an RX action.  If the code 
"RTN","BPSECMP2",175,0)
 . ;   above is modified to create other automatic close events, additional checks may need to be added
"RTN","BPSECMP2",176,0)
 . ;   before creating the bulletin.
"RTN","BPSECMP2",177,0)
 . I BPSARRY("RXCOB")=1 D BULL(RXIEN,FILLNUM,CLAIMIEN,DFN,CLREAS,BPSARRY("CLAIMID"))
"RTN","BPSECMP2",178,0)
 ;
"RTN","BPSECMP2",179,0)
 ; If we got here, then it is not a reversal
"RTN","BPSECMP2",180,0)
 ; If EVENT is set, send Submit event
"RTN","BPSECMP2",181,0)
 I EVENT="" S BPSARRY("STATUS")="SUBMITTED",BILLNUM=$$STORESP^IBNCPDP(DFN,.BPSARRY)
"RTN","BPSECMP2",182,0)
 ;
"RTN","BPSECMP2",183,0)
 ; Sent Paid (Billable) event is the claim was paid and released or EVENT is BILL
"RTN","BPSECMP2",184,0)
 ;   Note: User is always postmaster except for BackBilling (BB)
"RTN","BPSECMP2",185,0)
 I EVENT="BILL"!(RESPONSE="PAYABLE"!(RESPONSE="DUPLICATE")&(BPSARRY("RELEASE DATE")]"")) D
"RTN","BPSECMP2",186,0)
 . I RXACT'="BB" S BPSARRY("USER")=.5
"RTN","BPSECMP2",187,0)
 . ;set reject flag and store primary plan to serve secondary billing when primary claim was rejected
"RTN","BPSECMP2",188,0)
 . I BPSARRY("RXCOB")=2 I $P($$STATUS^BPSOSRX(RXIEN,FILLNUM,,,1),U)["E REJECTED" D
"RTN","BPSECMP2",189,0)
 . . N REJS
"RTN","BPSECMP2",190,0)
 . . S BPSARRY("PRIMREJ")=1,BPSARRY("PRIMPLAN")=$P(^BPST(+$$IEN59^BPSOSRX(RXIEN,FILLNUM,1),10,1,0),U)
"RTN","BPSECMP2",191,0)
 . . D DUR1^BPSNCPD3(RXIEN,FILLNUM,.REJS,"",1)
"RTN","BPSECMP2",192,0)
 . . S BPSARRY("REJ CODE LST")=$G(REJS(1,"REJ CODE LST"))
"RTN","BPSECMP2",193,0)
 . . M BPSARRY("REJ CODES")=REJS(1,"REJ CODES")
"RTN","BPSECMP2",194,0)
 . ;
"RTN","BPSECMP2",195,0)
 . S BPSARRY("STATUS")="PAID",BILLNUM=$$STORESP^IBNCPDP(DFN,.BPSARRY)
"RTN","BPSECMP2",196,0)
 Q
"RTN","BPSECMP2",197,0)
 ;
"RTN","BPSECMP2",198,0)
BULL(RX,FILL,CLAIMIEN,DFN,REASON,ECME) ;
"RTN","BPSECMP2",199,0)
 ; Create bulletin to tell OPECC to reverse/close secondary claim
"RTN","BPSECMP2",200,0)
 ; Input Parameters
"RTN","BPSECMP2",201,0)
 ;   RX - Prescription IEN (required)
"RTN","BPSECMP2",202,0)
 ;   FILL - Fill Number (required)
"RTN","BPSECMP2",203,0)
 ;   CLAIMIEN - BPS Claims IEN for the primary reversal
"RTN","BPSECMP2",204,0)
 ;   DFN - Patient IEN
"RTN","BPSECMP2",205,0)
 ;   REASON - Close Reason
"RTN","BPSECMP2",206,0)
 ;   ECME - ECME Number 
"RTN","BPSECMP2",207,0)
 ;
"RTN","BPSECMP2",208,0)
 ; Validate parameters
"RTN","BPSECMP2",209,0)
 I '$G(RX) Q
"RTN","BPSECMP2",210,0)
 I $G(FILL)="" Q
"RTN","BPSECMP2",211,0)
 ;
"RTN","BPSECMP2",212,0)
 ; Check to see a bulletin needs to be created
"RTN","BPSECMP2",213,0)
 I '$$SENDBULL(RX,FILL) Q
"RTN","BPSECMP2",214,0)
 ;
"RTN","BPSECMP2",215,0)
 N STATION,PRICLAIM,PRIBILL,SECBILL,BPSBILLS,PATNAME,SSN,DOS
"RTN","BPSECMP2",216,0)
 N BPSL,BPSX,XMSUB,XMDUZ,XMY,XMTEXT
"RTN","BPSECMP2",217,0)
 ;
"RTN","BPSECMP2",218,0)
 ; Get Station and Primary claim ID
"RTN","BPSECMP2",219,0)
 S STATION=$P($$SITE^VASITE(),U,3) ;IA 10112
"RTN","BPSECMP2",220,0)
 S PRICLAIM=$$GET1^DIQ(9002313.02,$G(CLAIMIEN)_",",.01)
"RTN","BPSECMP2",221,0)
 ;
"RTN","BPSECMP2",222,0)
 ; Get primary and secondary bill number
"RTN","BPSECMP2",223,0)
 ; If the bill exists, concatenate the Station number
"RTN","BPSECMP2",224,0)
 I $$RXBILL^IBNCPUT3(RX,FILL,"P","",.BPSBILLS)
"RTN","BPSECMP2",225,0)
 S PRIBILL=$O(BPSBILLS(""),-1) I PRIBILL S PRIBILL=STATION_"-"_$P(BPSBILLS(PRIBILL),U,1)_" "
"RTN","BPSECMP2",226,0)
 K BPSBILLS
"RTN","BPSECMP2",227,0)
 I $$RXBILL^IBNCPUT3(RX,FILL,"S","",.BPSBILLS)
"RTN","BPSECMP2",228,0)
 S SECBILL=$O(BPSBILLS(""),-1) I SECBILL S SECBILL=STATION_"-"_$P(BPSBILLS(SECBILL),U,1)_" "
"RTN","BPSECMP2",229,0)
 ;
"RTN","BPSECMP2",230,0)
 ; Get Patient Name and last four digits of the SSN - Supported by IA 10035
"RTN","BPSECMP2",231,0)
 I $G(DFN) D
"RTN","BPSECMP2",232,0)
 . S PATNAME=$P($G(^DPT(DFN,0)),U,1)
"RTN","BPSECMP2",233,0)
 . S SSN=$P($G(^DPT(DFN,0)),U,9)
"RTN","BPSECMP2",234,0)
 . S SSN=$E(SSN,$L(SSN)-3,$L(SSN))
"RTN","BPSECMP2",235,0)
 ;
"RTN","BPSECMP2",236,0)
 ; Get DOS in the correct format
"RTN","BPSECMP2",237,0)
 S DOS=$$GET1^DIQ(9002313.02,$G(CLAIMIEN)_",",401)
"RTN","BPSECMP2",238,0)
 I DOS S DOS=$E(DOS,5,6)_"/"_$E(DOS,7,8)_"/"_$E(DOS,1,4)
"RTN","BPSECMP2",239,0)
 ;
"RTN","BPSECMP2",240,0)
 ; Build Body of message
"RTN","BPSECMP2",241,0)
 S BPSL=0
"RTN","BPSECMP2",242,0)
 S BPSL=BPSL+1,BPSX(BPSL)="Primary claim "_PRIBILL_"(ECME #:"_$G(ECME)_") was closed for the following"
"RTN","BPSECMP2",243,0)
 S BPSL=BPSL+1,BPSX(BPSL)="reason: "_$G(REASON)
"RTN","BPSECMP2",244,0)
 S BPSL=BPSL+1,BPSX(BPSL)="Secondary claim "_SECBILL_"must be manually closed at this time."
"RTN","BPSECMP2",245,0)
 S BPSL=BPSL+1,BPSX(BPSL)=" "
"RTN","BPSECMP2",246,0)
 S BPSL=BPSL+1,BPSX(BPSL)="Patient Name: "_$G(PATNAME)_" ("_$G(SSN)_")"
"RTN","BPSECMP2",247,0)
 S BPSL=BPSL+1,BPSX(BPSL)="Prescription: "_$$RXAPI1^BPSUTIL1(RX,.01,"E")_" Fill: "_FILL
"RTN","BPSECMP2",248,0)
 S BPSL=BPSL+1,BPSX(BPSL)="Drug Name: "_$$RXAPI1^BPSUTIL1(RX,6,"E")
"RTN","BPSECMP2",249,0)
 S BPSL=BPSL+1,BPSX(BPSL)="Date of Service: "_DOS
"RTN","BPSECMP2",250,0)
 S BPSL=BPSL+1,BPSX(BPSL)="Primary Claim #: "_PRICLAIM
"RTN","BPSECMP2",251,0)
 S BPSL=BPSL+1,BPSX(BPSL)="Close Reason (Reason Not Billable): "_$G(REASON)
"RTN","BPSECMP2",252,0)
 S BPSL=BPSL+1,BPSX(BPSL)=" "
"RTN","BPSECMP2",253,0)
 S BPSL=BPSL+1,BPSX(BPSL)=" "
"RTN","BPSECMP2",254,0)
 S BPSL=BPSL+1,BPSX(BPSL)="Note: Depending how the secondary prescription claim was submitted,"
"RTN","BPSECMP2",255,0)
 S BPSL=BPSL+1,BPSX(BPSL)="this may require using the ECME User Screen to reverse the payable"
"RTN","BPSECMP2",256,0)
 S BPSL=BPSL+1,BPSX(BPSL)="secondary claim or using the correct VistA option to close the paper"
"RTN","BPSECMP2",257,0)
 S BPSL=BPSL+1,BPSX(BPSL)="secondary claim."
"RTN","BPSECMP2",258,0)
 S BPSL=BPSL+1,BPSX(BPSL)=" "
"RTN","BPSECMP2",259,0)
 ;
"RTN","BPSECMP2",260,0)
 ; Set variables needed by Mail routines - subject, from, to, body
"RTN","BPSECMP2",261,0)
 S XMSUB="ACTION: Close Secondary claim for ECME "_$G(ECME)
"RTN","BPSECMP2",262,0)
 S XMDUZ="BPS PACKAGE",XMY("G.BPS OPECC")="",XMTEXT="BPSX("
"RTN","BPSECMP2",263,0)
 D ^XMD
"RTN","BPSECMP2",264,0)
 Q 
"RTN","BPSECMP2",265,0)
 ;
"RTN","BPSECMP2",266,0)
SENDBULL(RX,FILL) ;
"RTN","BPSECMP2",267,0)
 ; Check if a bulletin should be created, which we want to do if:
"RTN","BPSECMP2",268,0)
 ;   > There is a non-cancelled IB bill for the secondary claim
"RTN","BPSECMP2",269,0)
 ;   > There is a open ECME secondary claim
"RTN","BPSECMP2",270,0)
 ; 
"RTN","BPSECMP2",271,0)
 ; Input Parameters
"RTN","BPSECMP2",272,0)
 ;   RX - Prescription IEN (required)
"RTN","BPSECMP2",273,0)
 ;   FILL - Fill Number (required)
"RTN","BPSECMP2",274,0)
 ; Output
"RTN","BPSECMP2",275,0)
 ;   0 - Do not create the bulletin
"RTN","BPSECMP2",276,0)
 ;   1 - Create bulletin
"RTN","BPSECMP2",277,0)
 ;
"RTN","BPSECMP2",278,0)
 ; Validate parameters
"RTN","BPSECMP2",279,0)
 I '$G(RX) Q 0
"RTN","BPSECMP2",280,0)
 I $G(FILL)="" Q 0
"RTN","BPSECMP2",281,0)
 ;
"RTN","BPSECMP2",282,0)
 ; If the secondary claim has a non-cancelled bill, create the bulletin
"RTN","BPSECMP2",283,0)
 ; This could be true even if there is not a secondary claim in ePharmacy (e.g., for a paper claim)
"RTN","BPSECMP2",284,0)
 N BPSBILLS,BILL,ACTIVE,IB
"RTN","BPSECMP2",285,0)
 I $$RXBILL^IBNCPUT3(RX,FILL,"S","",.BPSBILLS)
"RTN","BPSECMP2",286,0)
 ; Loop through the bills and set ACTIVE flag if any of the bills are not cancelled
"RTN","BPSECMP2",287,0)
 S (BILL,ACTIVE)=0 F  S BILL=$O(BPSBILLS(BILL)) Q:'BILL!ACTIVE  D
"RTN","BPSECMP2",288,0)
 . S IB=$G(BPSBILLS(BILL))
"RTN","BPSECMP2",289,0)
 . I $P(IB,U,8)'=7,($P(IB,U,2)'="CB"),($P(IB,U,2)'="CN") S ACTIVE=1
"RTN","BPSECMP2",290,0)
 I ACTIVE Q 1
"RTN","BPSECMP2",291,0)
 ;
"RTN","BPSECMP2",292,0)
 ; Do not create the bulletin if the secondary transaction or claim does not exist
"RTN","BPSECMP2",293,0)
 N IEN59SEC,CLAIM
"RTN","BPSECMP2",294,0)
 S IEN59SEC=$$IEN59^BPSOSRX(RX,FILL,2)
"RTN","BPSECMP2",295,0)
 I 'IEN59SEC Q 0
"RTN","BPSECMP2",296,0)
 S CLAIM=$P($G(^BPST(IEN59SEC,0)),U,4)
"RTN","BPSECMP2",297,0)
 I 'CLAIM Q 0
"RTN","BPSECMP2",298,0)
 I '$D(^BPSC(CLAIM)) Q 0
"RTN","BPSECMP2",299,0)
 ;
"RTN","BPSECMP2",300,0)
 ; Return 1 if the secondary claim is open, 0 if it is closed
"RTN","BPSECMP2",301,0)
 Q '$$CLOSED02^BPSSCR03(CLAIM)
"RTN","BPSECMP2",302,0)
 ;
"RTN","BPSECMP2",303,0)
DURSYNC(IEN59) ;
"RTN","BPSECMP2",304,0)
 ; Synch DURs between ECME and PSO
"RTN","BPSECMP2",305,0)
 ; Parameters:
"RTN","BPSECMP2",306,0)
 ;   IEN59 is the BPS Transaction IEN
"RTN","BPSECMP2",307,0)
 N RXIEN,RXFILL
"RTN","BPSECMP2",308,0)
 ;
"RTN","BPSECMP2",309,0)
 ; Check Parameter
"RTN","BPSECMP2",310,0)
 I IEN59="" Q
"RTN","BPSECMP2",311,0)
 ;
"RTN","BPSECMP2",312,0)
 ; Get Prescription and Fill number
"RTN","BPSECMP2",313,0)
 S RXIEN=$$GET1^DIQ(9002313.59,IEN59_",",1.11,"I")
"RTN","BPSECMP2",314,0)
 S RXFILL=$$GET1^DIQ(9002313.59902,"1,"_IEN59_",",902.17,"E")
"RTN","BPSECMP2",315,0)
 I RXIEN=""!(RXFILL="") Q
"RTN","BPSECMP2",316,0)
 ;
"RTN","BPSECMP2",317,0)
 ; Call PSO to sync reject codes
"RTN","BPSECMP2",318,0)
 D SYNC^PSOREJUT(RXIEN,RXFILL,"",$$COB59^BPSUTIL2(IEN59))
"RTN","BPSECMP2",319,0)
 Q
"RTN","BPSECMP2",320,0)
 ;
"RTN","BPSECMP2",321,0)
 ; Process Other Paid Amount Grouping from the Pricing Segment
"RTN","BPSECMP2",322,0)
 ; Note that FDATA, TRANSACT, FDAIEN, and FDAIEN03 are newed
"RTN","BPSECMP2",323,0)
 ;   and initialized by BPSECMPS
"RTN","BPSECMP2",324,0)
PROCOTH ;
"RTN","BPSECMP2",325,0)
 Q:$G(FDATA(TRANSACT,563))=""
"RTN","BPSECMP2",326,0)
 N NNDX,FILE,ROOT,FDATA3,FLDNUM
"RTN","BPSECMP2",327,0)
 S FILE="9002313.1401"
"RTN","BPSECMP2",328,0)
 S ROOT="FDATA3(9002313.1401)"
"RTN","BPSECMP2",329,0)
 S NNDX=""
"RTN","BPSECMP2",330,0)
 F  S NNDX=$O(FDATA(TRANSACT,564,NNDX)) Q:NNDX=""  D
"RTN","BPSECMP2",331,0)
 .S FLDNUM=.01 D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",NNDX,ROOT)
"RTN","BPSECMP2",332,0)
 .F FLDNUM=564,565 I $D(FDATA(TRANSACT,FLDNUM,NNDX)) D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",$G(FDATA(TRANSACT,FLDNUM,NNDX)),ROOT)
"RTN","BPSECMP2",333,0)
 D UPDATE^DIE("S","FDATA3(9002313.1401)")
"RTN","BPSECMP2",334,0)
 Q
"RTN","BPSECMP2",335,0)
 ;
"RTN","BPSECMP2",336,0)
 ; Process the Benefits Stage fields from the Pricing Segment
"RTN","BPSECMP2",337,0)
 ; Note that FDATA, TRANSACT, FDAIEN, and FDAIEN03 are newed
"RTN","BPSECMP2",338,0)
 ;   and initialized by BPSECMPS
"RTN","BPSECMP2",339,0)
PROCBEN ;
"RTN","BPSECMP2",340,0)
 Q:$G(FDATA(TRANSACT,392))=""
"RTN","BPSECMP2",341,0)
 N NNDX,FILE,ROOT,FDATA3,FLDNUM
"RTN","BPSECMP2",342,0)
 S FILE="9002313.039201"
"RTN","BPSECMP2",343,0)
 S ROOT="FDATA3(9002313.039201)"
"RTN","BPSECMP2",344,0)
 S NNDX=""
"RTN","BPSECMP2",345,0)
 F  S NNDX=$O(FDATA(TRANSACT,393,NNDX)) Q:NNDX=""  D
"RTN","BPSECMP2",346,0)
 .S FLDNUM=.01 D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",NNDX,ROOT)
"RTN","BPSECMP2",347,0)
 .F FLDNUM=393,394 I $D(FDATA(TRANSACT,FLDNUM,NNDX)) D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",$G(FDATA(TRANSACT,FLDNUM,NNDX)),ROOT)
"RTN","BPSECMP2",348,0)
 D UPDATE^DIE("S","FDATA3(9002313.039201)")
"RTN","BPSECMP2",349,0)
 Q
"RTN","BPSECMP2",350,0)
 ;
"RTN","BPSECMP2",351,0)
 ; Process the Additional Message Information Multiple from the Status Segment
"RTN","BPSECMP2",352,0)
 ; Note that FDATA, TRANSACT, FDAIEN, and FDAIEN03 are newed
"RTN","BPSECMP2",353,0)
 ;   and initialized by BPSECMPS
"RTN","BPSECMP2",354,0)
PROCADM ;
"RTN","BPSECMP2",355,0)
 N NNDX,FILE,ROOT,FDATA3,FLDNUM,FDATA03,FILE03,ROOT03
"RTN","BPSECMP2",356,0)
 S FILE="9002313.13001",ROOT="FDATA3(9002313.13001)"
"RTN","BPSECMP2",357,0)
 S FILE03="9002313.0301",ROOT03="FDATA03(9002313.0301)"
"RTN","BPSECMP2",358,0)
 S NNDX=""
"RTN","BPSECMP2",359,0)
 ; D.0 Processing: 526 is in a multiple with the group 132
"RTN","BPSECMP2",360,0)
 I $O(FDATA(TRANSACT,132,0))]"" D  Q
"RTN","BPSECMP2",361,0)
 . F  S NNDX=$O(FDATA(TRANSACT,526,NNDX)) Q:NNDX=""  D
"RTN","BPSECMP2",362,0)
 . . S FLDNUM=.01 D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",NNDX,ROOT)
"RTN","BPSECMP2",363,0)
 . . F FLDNUM=131,132,526 I $D(FDATA(TRANSACT,FLDNUM,NNDX)) D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",$G(FDATA(TRANSACT,FLDNUM,NNDX)),ROOT)
"RTN","BPSECMP2",364,0)
 . D UPDATE^DIE("S","FDATA3(9002313.13001)")
"RTN","BPSECMP2",365,0)
 ;
"RTN","BPSECMP2",366,0)
 ; 5.1 Processing: 526 is not in a group but is stored in one
"RTN","BPSECMP2",367,0)
 I $O(FDATA(TRANSACT,526,0))]"" D  Q
"RTN","BPSECMP2",368,0)
 . F  S NNDX=$O(FDATA(TRANSACT,526,NNDX)) Q:NNDX=""  D
"RTN","BPSECMP2",369,0)
 . . S FLDNUM=.01 D FDA^DILF(FILE,"+1,"_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",1,ROOT)
"RTN","BPSECMP2",370,0)
 . . S FLDNUM=132 D FDA^DILF(FILE,"+1,"_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"","01",ROOT)
"RTN","BPSECMP2",371,0)
 . . D FDA^DILF(FILE,"+1,"_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),526,"",$G(FDATA(TRANSACT,526,NNDX)),ROOT)
"RTN","BPSECMP2",372,0)
 . D UPDATE^DIE("S","FDATA3(9002313.13001)")
"RTN","BPSECMP2",373,0)
 . ; Set Additional Message Information Count field
"RTN","BPSECMP2",374,0)
 . D FDA^DILF(FILE03,"+"_TRANSACT_","_FDAIEN(TRANSACT),130,"",1,ROOT03)
"RTN","BPSECMP2",375,0)
 . D UPDATE^DIE("S","FDATA03(9002313.0301)")
"RTN","BPSECMP2",376,0)
 Q
"RTN","BPSECMP2",377,0)
 ;
"RTN","BPSECMP2",378,0)
 ; Process DUR Response Segment
"RTN","BPSECMP2",379,0)
 ; Note that FDATA, TRANSACT, FDAIEN, and FDAIEN03 are newed
"RTN","BPSECMP2",380,0)
 ;   and initialized by BPSECMPS
"RTN","BPSECMP2",381,0)
PROCDUR ;
"RTN","BPSECMP2",382,0)
 Q:$O(FDATA(TRANSACT,567,0))=""
"RTN","BPSECMP2",383,0)
 N NNDX,FILE,ROOT,FDAT1101,FLDNUM
"RTN","BPSECMP2",384,0)
 S FILE="9002313.1101"
"RTN","BPSECMP2",385,0)
 S ROOT="FDAT1101(9002313.1101)"
"RTN","BPSECMP2",386,0)
 S NNDX=""
"RTN","BPSECMP2",387,0)
 F  S NNDX=$O(FDATA(TRANSACT,567,NNDX)) Q:NNDX=""  D
"RTN","BPSECMP2",388,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,567,NNDX),ROOT)
"RTN","BPSECMP2",389,0)
 .F FLDNUM=439,528,529,530,531,532,533,544,570 I $D(FDATA(TRANSACT,FLDNUM,NNDX))  D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,FLDNUM,NNDX),ROOT)
"RTN","BPSECMP2",390,0)
 D UPDATE^DIE("S","FDAT1101(9002313.1101)")
"RTN","BPSECMP2",391,0)
 Q
"RTN","BPSECMPS")
0^22^B117919679
"RTN","BPSECMPS",1,0)
BPSECMPS ;BHAM ISC/FCS/DRS - Parse Claim Response ;3/10/08  12:31
"RTN","BPSECMPS",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2,5,6,7,10,11,15,19**;JUN 2004;Build 18
"RTN","BPSECMPS",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSECMPS",4,0)
 ;
"RTN","BPSECMPS",5,0)
 ; References to UPDATE^DIE and WP^DIE supported by DBIA 2053
"RTN","BPSECMPS",6,0)
 ; Reference to FDA^DILF  supported by DBIA 2054
"RTN","BPSECMPS",7,0)
 ;
"RTN","BPSECMPS",8,0)
PARSE(RREC,CLAIMIEN,IEN59,TRANTYPE) ;
"RTN","BPSECMPS",9,0)
 ; Parse the response from the payer and file it in the BPS Response record
"RTN","BPSECMPS",10,0)
 ; Incoming Parameters:
"RTN","BPSECMPS",11,0)
 ;   RREC - HL7 message
"RTN","BPSECMPS",12,0)
 ;   CLAIMIEN - IEN of the BPS Claim file
"RTN","BPSECMPS",13,0)
 ;   IEN59 - IEN of the BPS Transaction file
"RTN","BPSECMPS",14,0)
 ;   TRANTYPE - Transaction Type (B1-Billing Request, B2-Reversal, E1-Eligibility)
"RTN","BPSECMPS",15,0)
 ; Return value:
"RTN","BPSECMPS",16,0)
 ;   RESPIEN - IEN of the BPS Response file
"RTN","BPSECMPS",17,0)
 ;
"RTN","BPSECMPS",18,0)
 N FDAIEN,FDAIEN03,FDATA,FILE,FS,GS,ROOT,SS,TRANSACT,TRANSCNT
"RTN","BPSECMPS",19,0)
 ;
"RTN","BPSECMPS",20,0)
 ; RREC and CLAIMIEN are required
"RTN","BPSECMPS",21,0)
 Q:$G(RREC)="" 0
"RTN","BPSECMPS",22,0)
 Q:$G(CLAIMIEN)="" 0
"RTN","BPSECMPS",23,0)
 ;
"RTN","BPSECMPS",24,0)
 ;group and field separator characters
"RTN","BPSECMPS",25,0)
 S GS="\X1D\",FS="\X1C\",SS="\X1E\"
"RTN","BPSECMPS",26,0)
 S FILE="9002313.03",ROOT="FDATA(9002313.03)"
"RTN","BPSECMPS",27,0)
 D TRANSMSN  ; process transmission level data, transaction count in TRANSCNT (from PARSEH)
"RTN","BPSECMPS",28,0)
 D TRANSACT  ; process transaction level data
"RTN","BPSECMPS",29,0)
 ;
"RTN","BPSECMPS",30,0)
 ; If test system and test active, call the override routine
"RTN","BPSECMPS",31,0)
 ; IEN59 and TRANTYPE are set in BPSECMC2
"RTN","BPSECMPS",32,0)
 I $$CHECK^BPSTEST D SETOVER^BPSTEST(+$G(IEN59),$G(TRANTYPE),.FDATA)
"RTN","BPSECMPS",33,0)
 ;
"RTN","BPSECMPS",34,0)
 D UPDATE^DIE("S","FDATA(9002313.03)","FDAIEN")
"RTN","BPSECMPS",35,0)
 F TRANSACT=1:1:TRANSCNT  D
"RTN","BPSECMPS",36,0)
 .D PROCRESP
"RTN","BPSECMPS",37,0)
 .D PROCREJ
"RTN","BPSECMPS",38,0)
 .D PROCAPP
"RTN","BPSECMPS",39,0)
 .D PROCPPR
"RTN","BPSECMPS",40,0)
 .D PROCCOB
"RTN","BPSECMPS",41,0)
 .D PROCOTH^BPSECMP2
"RTN","BPSECMPS",42,0)
 .D PROCBEN^BPSECMP2
"RTN","BPSECMPS",43,0)
 .D PROCADM^BPSECMP2
"RTN","BPSECMPS",44,0)
 .D PROCDUR^BPSECMP2
"RTN","BPSECMPS",45,0)
 .D PROCINT
"RTN","BPSECMPS",46,0)
 S RESPIEN=FDAIEN(1)
"RTN","BPSECMPS",47,0)
 ; This should be called for each transaction but the IBSEND is not
"RTN","BPSECMPS",48,0)
 ;  setup correctly so currently it is only called for each claim/response
"RTN","BPSECMPS",49,0)
 ; If we ever bundle claims, we will need to fix IBSEND and move this code
"RTN","BPSECMPS",50,0)
 ;  to the FOR loop above.
"RTN","BPSECMPS",51,0)
 D IBSEND^BPSECMP2(CLAIMIEN,RESPIEN,"","")
"RTN","BPSECMPS",52,0)
 D RAW(RESPIEN,RREC)
"RTN","BPSECMPS",53,0)
 ;
"RTN","BPSECMPS",54,0)
 Q RESPIEN
"RTN","BPSECMPS",55,0)
 ;
"RTN","BPSECMPS",56,0)
TRANSMSN ;This subroutine will work through the transmission level information
"RTN","BPSECMPS",57,0)
 ;
"RTN","BPSECMPS",58,0)
 N RHEADER,RTRANM,SEG,SEGID,SEGMENT
"RTN","BPSECMPS",59,0)
 ;
"RTN","BPSECMPS",60,0)
 ;Parse response transmission level from ascii record
"RTN","BPSECMPS",61,0)
 S RTRANM=$P(RREC,GS,1)
"RTN","BPSECMPS",62,0)
 ;
"RTN","BPSECMPS",63,0)
 ; get just the header segment
"RTN","BPSECMPS",64,0)
 S RHEADER=$P(RTRANM,SS,1)    ;header- required/fixed length
"RTN","BPSECMPS",65,0)
 D PARSEH
"RTN","BPSECMPS",66,0)
 ;
"RTN","BPSECMPS",67,0)
 ; There are 2 optional segments on the transmission level - message
"RTN","BPSECMPS",68,0)
 ; and insurance.  We'll check for both and parse what we find.
"RTN","BPSECMPS",69,0)
 F SEG=2:1:3 D
"RTN","BPSECMPS",70,0)
 . S SEGMENT=$P(RTRANM,SS,SEG)
"RTN","BPSECMPS",71,0)
 . Q:SEGMENT=""
"RTN","BPSECMPS",72,0)
 . S SEGID=$P(SEGMENT,FS,2)
"RTN","BPSECMPS",73,0)
 . I $E(SEGID,1,2)="AM" D  ; segment identification
"RTN","BPSECMPS",74,0)
 .. S SEGFID=$E(SEGID,3,4)
"RTN","BPSECMPS",75,0)
 .. D:(SEGFID=20)!(SEGFID=25) PARSETM
"RTN","BPSECMPS",76,0)
 ;
"RTN","BPSECMPS",77,0)
 Q
"RTN","BPSECMPS",78,0)
 ;
"RTN","BPSECMPS",79,0)
TRANSACT ;This subroutine will work through the transaction level information
"RTN","BPSECMPS",80,0)
 ;
"RTN","BPSECMPS",81,0)
 N GRP,MEDN,RTRAN,SEG,SEGMENT
"RTN","BPSECMPS",82,0)
 S MEDN=0
"RTN","BPSECMPS",83,0)
 ;
"RTN","BPSECMPS",84,0)
 F GRP=2:1 D  Q:RTRAN=""
"RTN","BPSECMPS",85,0)
 . S RTRAN=$P(RREC,GS,GRP)     ;get the next transaction (could be 4)
"RTN","BPSECMPS",86,0)
 . Q:RTRAN=""                  ;we're done if it's empty
"RTN","BPSECMPS",87,0)
 . S MEDN=MEDN+1               ;transaction counter
"RTN","BPSECMPS",88,0)
 . ;
"RTN","BPSECMPS",89,0)
 . F SEG=2:1 D  Q:SEGMENT=""   ;break the record down by segments
"RTN","BPSECMPS",90,0)
 .. S SEGMENT=$P(RTRAN,SS,SEG) ;get the segment
"RTN","BPSECMPS",91,0)
 .. Q:SEGMENT=""
"RTN","BPSECMPS",92,0)
 .. D PARSETN                  ;get the fields
"RTN","BPSECMPS",93,0)
 Q
"RTN","BPSECMPS",94,0)
 ;
"RTN","BPSECMPS",95,0)
PARSEH ; parse the header record, required on all responses, and is fixed length
"RTN","BPSECMPS",96,0)
 ; It's the only record that is fixed length.
"RTN","BPSECMPS",97,0)
 ;
"RTN","BPSECMPS",98,0)
 D FDA^DILF(FILE,"+1",.01,"",CLAIMIEN,ROOT)  ; CLAIM ID
"RTN","BPSECMPS",99,0)
 D FDA^DILF(FILE,"+1",.02,"",$$NOWFM^BPSOSU1,ROOT)  ; DATE RESPONSE RECEIVED
"RTN","BPSECMPS",100,0)
 D FDA^DILF(FILE,"+1",102,"",$E(RHEADER,33,34),ROOT)  ; VERSION RELEASE NUMBER
"RTN","BPSECMPS",101,0)
 D FDA^DILF(FILE,"+1",103,"",$E(RHEADER,35,36),ROOT)  ; TRANSACTION CODE
"RTN","BPSECMPS",102,0)
 D FDA^DILF(FILE,"+1",109,"",$E(RHEADER,37,37),ROOT)  ; TRANSACTION COUNT
"RTN","BPSECMPS",103,0)
 S TRANSCNT=$E(RHEADER,37,37)
"RTN","BPSECMPS",104,0)
 D FDA^DILF(FILE,"+1",501,"",$E(RHEADER,38,38),ROOT)  ; response status header
"RTN","BPSECMPS",105,0)
 D FDA^DILF(FILE,"+1",202,"",$E(RHEADER,39,40),ROOT)  ; SERVICE PROVIDER ID Qualifier
"RTN","BPSECMPS",106,0)
 D FDA^DILF(FILE,"+1",201,"",$E(RHEADER,41,55),ROOT)  ; SERVICE PROVIDER ID
"RTN","BPSECMPS",107,0)
 D FDA^DILF(FILE,"+1",401,"",$E(RHEADER,56,63),ROOT)  ; DATE OF SERVICE
"RTN","BPSECMPS",108,0)
 ;
"RTN","BPSECMPS",109,0)
 Q
"RTN","BPSECMPS",110,0)
 ;
"RTN","BPSECMPS",111,0)
PARSETM ; parse the variable portions of the transmission
"RTN","BPSECMPS",112,0)
 ;
"RTN","BPSECMPS",113,0)
 N FIELD,FLDNUM,PC
"RTN","BPSECMPS",114,0)
 ;
"RTN","BPSECMPS",115,0)
 F PC=3:1 D  Q:FIELD=""        ;skip the seg id -already know its value
"RTN","BPSECMPS",116,0)
 . S FIELD=$P(SEGMENT,FS,PC)   ;piece through the record
"RTN","BPSECMPS",117,0)
 . Q:FIELD=""                  ;stop - we hit the end
"RTN","BPSECMPS",118,0)
 . S FLDNUM=$$GETNUM(FIELD)    ;get the field number used for storage
"RTN","BPSECMPS",119,0)
 . Q:FLDNUM=""                 ;shouldn't happen - but let's skip
"RTN","BPSECMPS",120,0)
 . S FIELD=$E(FIELD,3,999)
"RTN","BPSECMPS",121,0)
 . D FDA^DILF(FILE,"+1",FLDNUM,"",FIELD,ROOT)
"RTN","BPSECMPS",122,0)
 Q
"RTN","BPSECMPS",123,0)
 ;
"RTN","BPSECMPS",124,0)
PARSETN ; parse the transaction level segments
"RTN","BPSECMPS",125,0)
 ;
"RTN","BPSECMPS",126,0)
 ; Possible values of the SEGFID field:
"RTN","BPSECMPS",127,0)
 ;  21 = Response Status Segment
"RTN","BPSECMPS",128,0)
 ;  22 = Response Claim Segment
"RTN","BPSECMPS",129,0)
 ;  23 = Response Pricing Segment
"RTN","BPSECMPS",130,0)
 ;  24 = Response DUR/PPS Segment
"RTN","BPSECMPS",131,0)
 ;  26 = Response Prior Authorization Segment
"RTN","BPSECMPS",132,0)
 ;  28 = Response Coordination of Benefits/Other Payers Segment
"RTN","BPSECMPS",133,0)
 ;  36 = Response Intermediary Segment
"RTN","BPSECMPS",134,0)
 ;
"RTN","BPSECMPS",135,0)
 N CKRPT,FIELD,FLDNUM,PC,REPEAT,RPTFLD,SEGFID,SEGID,GRPCNT,GRPFLDS,VNUM
"RTN","BPSECMPS",136,0)
 ;
"RTN","BPSECMPS",137,0)
 S RPTFLD=""
"RTN","BPSECMPS",138,0)
 S SEGID=$P(SEGMENT,FS,2)  ; this should be the segment id
"RTN","BPSECMPS",139,0)
 Q:SEGID=""                ; don't process without a Seg id
"RTN","BPSECMPS",140,0)
 Q:$E(SEGID,1,2)'="AM"     ; don't know what we have - skip
"RTN","BPSECMPS",141,0)
 ;
"RTN","BPSECMPS",142,0)
 S SEGFID=$E(SEGID,3,4)    ; this should be the field ID
"RTN","BPSECMPS",143,0)
 S GRPCNT=0,GRPFLDS=""
"RTN","BPSECMPS",144,0)
 ;
"RTN","BPSECMPS",145,0)
 ; setup the repeating flds based on the segment
"RTN","BPSECMPS",146,0)
 I SEGFID=21 D                 ;status segment
"RTN","BPSECMPS",147,0)
 . S RPTFLD=",548,511,546,132,526,131,"
"RTN","BPSECMPS",148,0)
 . S GRPCNT=0
"RTN","BPSECMPS",149,0)
 . S GRPFLDS=",511,548,132,"
"RTN","BPSECMPS",150,0)
 ;
"RTN","BPSECMPS",151,0)
 I SEGFID=22 D                 ;claim segment
"RTN","BPSECMPS",152,0)
 . S RPTFLD=",552,553,554,555,556,"
"RTN","BPSECMPS",153,0)
 . S GRPCNT=0
"RTN","BPSECMPS",154,0)
 . S GRPFLDS=",552,"
"RTN","BPSECMPS",155,0)
 ;
"RTN","BPSECMPS",156,0)
 I SEGFID=23 D                ;pricing segment
"RTN","BPSECMPS",157,0)
 . S RPTFLD=",564,565,393,394,"
"RTN","BPSECMPS",158,0)
 . S GRPCNT=0
"RTN","BPSECMPS",159,0)
 . S GRPFLDS=",564,393,"
"RTN","BPSECMPS",160,0)
 ;
"RTN","BPSECMPS",161,0)
 I SEGFID=24 D                ;DUR/PPS segment
"RTN","BPSECMPS",162,0)
 . S RPTFLD=",439,528,529,530,531,532,533,544,567,570,"
"RTN","BPSECMPS",163,0)
 . S GRPCNT=0
"RTN","BPSECMPS",164,0)
 . S GRPFLDS=",567,"
"RTN","BPSECMPS",165,0)
 ;
"RTN","BPSECMPS",166,0)
 I SEGFID=28 D                ;COB/Other Payers segment
"RTN","BPSECMPS",167,0)
 . S RPTFLD=",127,142,143,144,145,338,339,340,356,991,992,B23,"
"RTN","BPSECMPS",168,0)
 . S GRPCNT=0
"RTN","BPSECMPS",169,0)
 . S GRPFLDS=",338,"
"RTN","BPSECMPS",170,0)
 ;
"RTN","BPSECMPS",171,0)
 I SEGFID=36 D                ;Intermediary segment
"RTN","BPSECMPS",172,0)
 . S RPTFLD=",B53,B54,B51,"
"RTN","BPSECMPS",173,0)
 . S GRPCNT=0
"RTN","BPSECMPS",174,0)
 . S GRPFLDS=",B53,"
"RTN","BPSECMPS",175,0)
 ;
"RTN","BPSECMPS",176,0)
 ; now let's parse out the fields
"RTN","BPSECMPS",177,0)
 ;
"RTN","BPSECMPS",178,0)
 F PC=3:1 D  Q:FIELD=""        ;skip the seg id -jump to the other flds
"RTN","BPSECMPS",179,0)
 . S FIELD=$P(SEGMENT,FS,PC)   ;piece through the record
"RTN","BPSECMPS",180,0)
 . Q:FIELD=""                  ;stop - we hit the end
"RTN","BPSECMPS",181,0)
 . S FLDNUM=$$GETNUM(FIELD)    ;get the field number used for storage
"RTN","BPSECMPS",182,0)
 . Q:FLDNUM=""                 ;shouldn't happen - but let's skip
"RTN","BPSECMPS",183,0)
 . S VNUM=FLDNUM
"RTN","BPSECMPS",184,0)
 . ;Convert to VistA field number for non-numeric NCPDP numbers - BPS*1*15
"RTN","BPSECMPS",185,0)
 . I $P(FLDNUM,".")'?3N S VNUM=$$VNUM(FLDNUM) Q:'VNUM
"RTN","BPSECMPS",186,0)
 . S REPEAT=0                  ;for this segment, let's figure
"RTN","BPSECMPS",187,0)
 . S CKRPT=","_FLDNUM_","      ;out if the field is a repeating
"RTN","BPSECMPS",188,0)
 . S:RPTFLD[CKRPT REPEAT=1     ;field
"RTN","BPSECMPS",189,0)
 . ; Increment the group counter if first field of group.
"RTN","BPSECMPS",190,0)
 . S:GRPFLDS[CKRPT GRPCNT=GRPCNT+1
"RTN","BPSECMPS",191,0)
 . ; if rptg, store with a group counter
"RTN","BPSECMPS",192,0)
 . S:REPEAT FDATA(MEDN,VNUM,GRPCNT)=$E(FIELD,3,$L(FIELD))
"RTN","BPSECMPS",193,0)
 . ; not rptg, store without counter
"RTN","BPSECMPS",194,0)
 . S:'REPEAT FDATA(MEDN,VNUM)=$E(FIELD,3,$L(FIELD))
"RTN","BPSECMPS",195,0)
 ;
"RTN","BPSECMPS",196,0)
 Q
"RTN","BPSECMPS",197,0)
 ;
"RTN","BPSECMPS",198,0)
GETNUM(FIELD) ; function, return field number for a field I
"RTN","BPSECMPS",199,0)
 ; use BPS NCPDP FIELD DEFS (#9002313.91) "D" cross ref for lookup
"RTN","BPSECMPS",200,0)
 ; field number is used to store the data in the correct field in BPS RESPONSES (#9002313.03)
"RTN","BPSECMPS",201,0)
 ;
"RTN","BPSECMPS",202,0)
 N FLDID,FLDIEN,FLDNUM
"RTN","BPSECMPS",203,0)
 S FLDID=$E(FIELD,1,2),FLDNUM=""
"RTN","BPSECMPS",204,0)
 Q:FLDID="" FLDNUM  ; FLDID = field identifier
"RTN","BPSECMPS",205,0)
 ; 
"RTN","BPSECMPS",206,0)
 S FLDIEN=$O(^BPSF(9002313.91,"D",FLDID,0))  ; ien for fld #
"RTN","BPSECMPS",207,0)
 S:FLDIEN FLDNUM=$P($G(^BPSF(9002313.91,FLDIEN,0)),U) ;fld number
"RTN","BPSECMPS",208,0)
 Q FLDNUM
"RTN","BPSECMPS",209,0)
 ;
"RTN","BPSECMPS",210,0)
VNUM(FLDNUM) ;function, returns VistA FileMan field number
"RTN","BPSECMPS",211,0)
 N FLDIEN
"RTN","BPSECMPS",212,0)
 S FLDIEN=$O(^BPSF(9002313.91,"B",FLDNUM,0)) Q:'FLDIEN ""
"RTN","BPSECMPS",213,0)
 S FLDNUM=$P($G(^BPSF(9002313.91,FLDIEN,5)),U,3) ;fld number
"RTN","BPSECMPS",214,0)
 Q FLDNUM
"RTN","BPSECMPS",215,0)
 ;
"RTN","BPSECMPS",216,0)
PROCRESP ; add data to RESPONSES SUB-FIELD (#9002313.0301)
"RTN","BPSECMPS",217,0)
 ;
"RTN","BPSECMPS",218,0)
 N FDATA03,FIELD,FILE,FLDNUM,ROOT
"RTN","BPSECMPS",219,0)
 ;
"RTN","BPSECMPS",220,0)
 S FILE=9002313.0301,ROOT="FDATA03(9002313.0301)"
"RTN","BPSECMPS",221,0)
 ; field 501 is HEADER RESPONSE STATUS, 112 is TRANSACTION RESPONSE STATUS
"RTN","BPSECMPS",222,0)
 I '$D(FDATA(TRANSACT,501)) S FDATA(TRANSACT,501)=FDATA(TRANSACT,112)
"RTN","BPSECMPS",223,0)
 I '$D(FDATA(TRANSACT,112)) S FDATA(TRANSACT,112)=FDATA(TRANSACT,501)
"RTN","BPSECMPS",224,0)
 ;
"RTN","BPSECMPS",225,0)
 S FLDNUM=".01" D FDA^DILF(FILE,"+1,"_FDAIEN(TRANSACT),FLDNUM,"",TRANSACT,ROOT)
"RTN","BPSECMPS",226,0)
 S FIELD=""
"RTN","BPSECMPS",227,0)
 F  S FIELD=$O(FDATA(TRANSACT,FIELD)) Q:FIELD=""  D   ;set all the non-repeating fields for 9002313.0301
"RTN","BPSECMPS",228,0)
 .Q:$G(FDATA(TRANSACT,FIELD))=""  ; no data to process
"RTN","BPSECMPS",229,0)
 .; field 402 is PRESCRIPTION/SERVICE REF. NO.
"RTN","BPSECMPS",230,0)
 .I FIELD=402 S FDATA(TRANSACT,FIELD)=$TR(FDATA(TRANSACT,FIELD),"\","") ;REMOVE EXTRANEOUS "\"
"RTN","BPSECMPS",231,0)
 .D FDA^DILF(FILE,"+"_TRANSACT_","_FDAIEN(TRANSACT),FIELD,"",FDATA(TRANSACT,FIELD),ROOT)
"RTN","BPSECMPS",232,0)
 ;
"RTN","BPSECMPS",233,0)
 D UPDATE^DIE("S","FDATA03(9002313.0301)","FDAIEN03")
"RTN","BPSECMPS",234,0)
 ;
"RTN","BPSECMPS",235,0)
 Q
"RTN","BPSECMPS",236,0)
 ;
"RTN","BPSECMPS",237,0)
PROCREJ ; add data to REJECT CODE SUB-FIELD (#9002313.03511)
"RTN","BPSECMPS",238,0)
 Q:$G(FDATA(TRANSACT,510))=""
"RTN","BPSECMPS",239,0)
 ;
"RTN","BPSECMPS",240,0)
 N FDAT3511,FILE,FLDNUM,NNDX,NUMREJS,ROOT,REJCODE
"RTN","BPSECMPS",241,0)
 ;
"RTN","BPSECMPS",242,0)
 S FILE="9002313.03511",ROOT="FDAT3511(9002313.03511)",NUMREJS=FDATA(TRANSACT,510),NNDX=""
"RTN","BPSECMPS",243,0)
 F  S NNDX=$O(FDATA(TRANSACT,511,NNDX)) Q:NNDX=""  D   ;set all the non-repeating fields for 9002313.03511 rejections
"RTN","BPSECMPS",244,0)
 .S REJCODE=$$TRIM^XLFSTR(FDATA(TRANSACT,511,NNDX),"R")
"RTN","BPSECMPS",245,0)
 .S REJCODE=$TR(REJCODE,"\","")  Q:REJCODE']""
"RTN","BPSECMPS",246,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",REJCODE,ROOT)
"RTN","BPSECMPS",247,0)
 D UPDATE^DIE("S","FDAT3511(9002313.03511)")
"RTN","BPSECMPS",248,0)
 ;
"RTN","BPSECMPS",249,0)
 Q
"RTN","BPSECMPS",250,0)
 ;
"RTN","BPSECMPS",251,0)
PROCAPP ; APPROVED MESSAGE CODE SUB-FIELD (#9002313.301548)
"RTN","BPSECMPS",252,0)
 Q:$O(FDATA(TRANSACT,548,0))=""
"RTN","BPSECMPS",253,0)
 ;
"RTN","BPSECMPS",254,0)
 N FDAT1548,FILE,FLDNUM,NNDX,ROOT
"RTN","BPSECMPS",255,0)
 ;
"RTN","BPSECMPS",256,0)
 S FILE="9002313.301548",ROOT="FDAT1548(9002313.301548)",NNDX=""
"RTN","BPSECMPS",257,0)
 F  S NNDX=$O(FDATA(TRANSACT,548,NNDX)) Q:NNDX=""  D
"RTN","BPSECMPS",258,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,548,NNDX),ROOT)
"RTN","BPSECMPS",259,0)
 D UPDATE^DIE("S","FDAT1548(9002313.301548)")
"RTN","BPSECMPS",260,0)
 ;
"RTN","BPSECMPS",261,0)
 Q
"RTN","BPSECMPS",262,0)
 ;
"RTN","BPSECMPS",263,0)
PROCPPR ; PREFERRED PRODUCT REPEATING SUB-FIELD (#9002313.1301)
"RTN","BPSECMPS",264,0)
 ;
"RTN","BPSECMPS",265,0)
 Q:$O(FDATA(TRANSACT,552,0))=""
"RTN","BPSECMPS",266,0)
 ;
"RTN","BPSECMPS",267,0)
 N FDAT1301,FILE,FLDNUM,NNDX,ROOT
"RTN","BPSECMPS",268,0)
 ;
"RTN","BPSECMPS",269,0)
 S FILE="9002313.1301",ROOT="FDAT1301(9002313.1301)",NNDX=""
"RTN","BPSECMPS",270,0)
 F  S NNDX=$O(FDATA(TRANSACT,552,NNDX)) Q:NNDX=""  D
"RTN","BPSECMPS",271,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",NNDX,ROOT)
"RTN","BPSECMPS",272,0)
 .F FLDNUM=552,553,554,555,556 I $D(FDATA(TRANSACT,FLDNUM,NNDX)) D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",$G(FDATA(TRANSACT,FLDNUM,NNDX)),ROOT)
"RTN","BPSECMPS",273,0)
 D UPDATE^DIE("S","FDAT1301(9002313.1301)")
"RTN","BPSECMPS",274,0)
 ;
"RTN","BPSECMPS",275,0)
 Q
"RTN","BPSECMPS",276,0)
PROCCOB ; OTHER PAYER ID MLTPL SUB-FIELD (#9002313.035501)
"RTN","BPSECMPS",277,0)
 ;
"RTN","BPSECMPS",278,0)
 Q:$O(FDATA(TRANSACT,338,0))=""
"RTN","BPSECMPS",279,0)
 ;
"RTN","BPSECMPS",280,0)
 N FDAT35501,FILE,FLDNUM,NNDX,ROOT
"RTN","BPSECMPS",281,0)
 ;
"RTN","BPSECMPS",282,0)
 S FILE="9002313.035501",ROOT="FDAT35501(9002313.035501)",NNDX=""
"RTN","BPSECMPS",283,0)
 F  S NNDX=$O(FDATA(TRANSACT,338,NNDX)) Q:NNDX=""  D
"RTN","BPSECMPS",284,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",NNDX,ROOT)
"RTN","BPSECMPS",285,0)
 .F FLDNUM=127,142,143,144,145,338,339,340,356,991,992,2023 I $D(FDATA(TRANSACT,FLDNUM,NNDX)) D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",$G(FDATA(TRANSACT,FLDNUM,NNDX)),ROOT)
"RTN","BPSECMPS",286,0)
 D UPDATE^DIE("S","FDAT35501(9002313.035501)")
"RTN","BPSECMPS",287,0)
 ;
"RTN","BPSECMPS",288,0)
 Q
"RTN","BPSECMPS",289,0)
 ;
"RTN","BPSECMPS",290,0)
PROCINT ; INTERMEDIARY REPEATING SUB-FIELD (#9002313.032052)
"RTN","BPSECMPS",291,0)
 ;
"RTN","BPSECMPS",292,0)
 Q:$O(FDATA(TRANSACT,2053,0))=""
"RTN","BPSECMPS",293,0)
 ;
"RTN","BPSECMPS",294,0)
 N FDAT032052,FILE,FLDNUM,NNDX,ROOT
"RTN","BPSECMPS",295,0)
 ;
"RTN","BPSECMPS",296,0)
 S FILE="9002313.032052",ROOT="FDAT032052(9002313.032052)",NNDX=""
"RTN","BPSECMPS",297,0)
 F  S NNDX=$O(FDATA(TRANSACT,2053,NNDX)) Q:NNDX=""  D
"RTN","BPSECMPS",298,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",NNDX,ROOT)
"RTN","BPSECMPS",299,0)
 .F FLDNUM=2053,2054,2051 I $D(FDATA(TRANSACT,FLDNUM,NNDX)) D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",$G(FDATA(TRANSACT,FLDNUM,NNDX)),ROOT)
"RTN","BPSECMPS",300,0)
 D UPDATE^DIE("S","FDAT032052(9002313.032052)")
"RTN","BPSECMPS",301,0)
 Q
"RTN","BPSECMPS",302,0)
 ;
"RTN","BPSECMPS",303,0)
RAW(RESPIEN,RREC) ; store raw data received from the payer
"RTN","BPSECMPS",304,0)
 ; pass in the response IEN (9002313.03) and the raw data to be stored.
"RTN","BPSECMPS",305,0)
 N X,CNT
"RTN","BPSECMPS",306,0)
 K ^TMP($J,"WP")
"RTN","BPSECMPS",307,0)
 S CNT=0 F X=1:79:$L(RREC) S CNT=CNT+1 S ^TMP($J,"WP",CNT,0)=$E(RREC,X,X+78)
"RTN","BPSECMPS",308,0)
 D WP^DIE(9002313.03,RESPIEN_",",9999,"K","^TMP($J,""WP"")")
"RTN","BPSECMPS",309,0)
 K ^TMP($J,"WP")
"RTN","BPSECMPS",310,0)
 Q
"RTN","BPSECMPS",311,0)
 ;
"RTN","BPSECX0")
0^19^B39590401
"RTN","BPSECX0",1,0)
BPSECX0 ;BHAM ISC/FCS/DRS/VA/DLF - Retrieve Claim submission record ;05/17/2004
"RTN","BPSECX0",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8,10,15,19**;JUN 2004;Build 18
"RTN","BPSECX0",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSECX0",4,0)
 ;
"RTN","BPSECX0",5,0)
 ; This routine is used to pull data from BPS Claims and its multiples
"RTN","BPSECX0",6,0)
 ; GETBPS2 - BPS Claims level
"RTN","BPSECX0",7,0)
 ; GETBPS3 - Transaction subfile
"RTN","BPSECX0",8,0)
 ; GETBPS4 - DUR subfile
"RTN","BPSECX0",9,0)
 ; GETBPS5 - COB subfile.  This calls GETBPS6 and GETBPS7 to get the data
"RTN","BPSECX0",10,0)
 ;           from the subfiles within COB
"RTN","BPSECX0",11,0)
 ;
"RTN","BPSECX0",12,0)
 Q
"RTN","BPSECX0",13,0)
 ;
"RTN","BPSECX0",14,0)
 ; Retrieve BPS CLAIMS data
"RTN","BPSECX0",15,0)
 ; CLAIMIEN = ien in BPS CLAIMS (#9002313.02)
"RTN","BPSECX0",16,0)
 ; BPS - Passed by reference
"RTN","BPSECX0",17,0)
 ; returns:  BPS(9002313.02,CLAIMIEN,field #,"I")  = internal format value
"RTN","BPSECX0",18,0)
GETBPS2(CLAIMIEN,BPS) ; called from BPSECA1 > BPSOSQG > BPSOSQ2
"RTN","BPSECX0",19,0)
 ;
"RTN","BPSECX0",20,0)
 Q:$G(CLAIMIEN)=""  ; must have claim IEN
"RTN","BPSECX0",21,0)
 ;
"RTN","BPSECX0",22,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",23,0)
 ;
"RTN","BPSECX0",24,0)
 S DIC=9002313.02,DR="101:899;980:997"  ; all fields from 101-899 and 990-997, skip 901-908 (used for BPS overhead)
"RTN","BPSECX0",25,0)
 S DR=DR_";1022;1043;1045" ;Get alphanumeric NCPDP fields 1022 (A22), 1043 (A23) and 1045 (A45)- BPS*1*15
"RTN","BPSECX0",26,0)
 S DR=DR_";2008;2009;2038" ;Get alphanumeric NCPDP fields 2008 (B08), 2009 (B09) and 2038 (B38) - BPS*1*19
"RTN","BPSECX0",27,0)
 S DA=CLAIMIEN,DIQ="BPS",DIQ(0)="I"  ; "I" for internal format
"RTN","BPSECX0",28,0)
 D EN^DIQ1
"RTN","BPSECX0",29,0)
 Q
"RTN","BPSECX0",30,0)
 ;
"RTN","BPSECX0",31,0)
 ;
"RTN","BPSECX0",32,0)
 ;Retrieve data in TRANSACTIONS multiple in BPS CLAIMS
"RTN","BPSECX0",33,0)
 ; CLAIMIEN = ien in BPS CLAIMS (#9002313.02)
"RTN","BPSECX0",34,0)
 ; TRXIEN = ien in TRANSACTIONS (#9002313.0201)
"RTN","BPSECX0",35,0)
 ; BPS - Passed by reference
"RTN","BPSECX0",36,0)
 ; returns: BPS(9002313.0201,TRXIEN,field #,"I") = internal format value
"RTN","BPSECX0",37,0)
GETBPS3(CLAIMIEN,TRXIEN,BPS) ;called from BPSECA1
"RTN","BPSECX0",38,0)
 ;
"RTN","BPSECX0",39,0)
 Q:$G(CLAIMIEN)=""  Q:$G(TRXIEN)=""  ; must have both
"RTN","BPSECX0",40,0)
 ;
"RTN","BPSECX0",41,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",42,0)
 ;
"RTN","BPSECX0",43,0)
 ; There are other alphanumeric fields that could be added but since they are for segments that are not
"RTN","BPSECX0",44,0)
 ;  supported by E1, B1, B3 transactions and/or not segments not used by VA.  These can be added later, if
"RTN","BPSECX0",45,0)
 ;  needed for those segments.
"RTN","BPSECX0",46,0)
 S DIC=9002313.02,DR="400",DR(9002313.0201)="113:996"  ; all TRANSACTION fields
"RTN","BPSECX0",47,0)
 S DR(9002313.0201)=DR(9002313.0201)_";1023:1032" ;Get alphanumeric NCPDP fields 1023 through 1032 - BPS*1*15
"RTN","BPSECX0",48,0)
 S DR(9002313.0201)=DR(9002313.0201)_";2026:2028;2040:2042" ;Get alphanumeric NCPDP fields 2026-2028 and 2040-2042 - BPS*1*19
"RTN","BPSECX0",49,0)
 S DA=CLAIMIEN,DA(9002313.0201)=TRXIEN  ; IEN and sub-file IEN
"RTN","BPSECX0",50,0)
 S DIQ="BPS",DIQ(0)="I"  ; "I" for internal format
"RTN","BPSECX0",51,0)
 D EN^DIQ1
"RTN","BPSECX0",52,0)
 ;
"RTN","BPSECX0",53,0)
 ; Copy Prescriber Phone Number (498.12) to field 498 as this is where BPSOSH2
"RTN","BPSECX0",54,0)
 ;   expects to find it.  This works for now but if we implement the Prior Auth
"RTN","BPSECX0",55,0)
 ;   segment (which has multiple field labelled 498), a more complete solution
"RTN","BPSECX0",56,0)
 ;   will need to be found
"RTN","BPSECX0",57,0)
 S BPS(9002313.0201,TRXIEN,498,"I")=$G(BPS(9002313.0201,TRXIEN,498.12,"I"))
"RTN","BPSECX0",58,0)
 Q
"RTN","BPSECX0",59,0)
 ;
"RTN","BPSECX0",60,0)
 ;
"RTN","BPSECX0",61,0)
 ;
"RTN","BPSECX0",62,0)
 ;Retrieve DUR/PPS multiple data
"RTN","BPSECX0",63,0)
 ; CLAIMIEN = ien in BPS CLAIMS (#9002313.02)
"RTN","BPSECX0",64,0)
 ; TRXIEN = ien in TRANSACTIONS (#9002313.0201)
"RTN","BPSECX0",65,0)
 ; CDURIEN= DUR/PPS Multiple IEN (9002313.1001)
"RTN","BPSECX0",66,0)
 ; BPS - Passed by reference
"RTN","BPSECX0",67,0)
 ; returns: BPS(9002313.1001,CDURIEN,field #,"I") = Value
"RTN","BPSECX0",68,0)
GETBPS4(CLAIMIEN,TRXIEN,CDURIEN,BPS) ;EP - from BPSECA1
"RTN","BPSECX0",69,0)
 ;
"RTN","BPSECX0",70,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",71,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",72,0)
 Q:$G(TRXIEN)=""
"RTN","BPSECX0",73,0)
 Q:$G(CDURIEN)=""
"RTN","BPSECX0",74,0)
 ;
"RTN","BPSECX0",75,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",76,0)
 S DIC=9002313.02
"RTN","BPSECX0",77,0)
 S DR="400",DR(9002313.0201)=473.01  ;fields
"RTN","BPSECX0",78,0)
 S DR(9002313.1001)=".01;439;440;441;474;475;476"  ;fields
"RTN","BPSECX0",79,0)
 S DA=CLAIMIEN,DA(9002313.0201)=TRXIEN,DA(9002313.1001)=CDURIEN
"RTN","BPSECX0",80,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",81,0)
 D EN^DIQ1
"RTN","BPSECX0",82,0)
 ;
"RTN","BPSECX0",83,0)
 Q
"RTN","BPSECX0",84,0)
 ;
"RTN","BPSECX0",85,0)
 ;
"RTN","BPSECX0",86,0)
 ;Retrieve COB OTHER PAYMENTS multiple data
"RTN","BPSECX0",87,0)
 ; CLAIMIEN = ien in BPS CLAIMS (#9002313.02)
"RTN","BPSECX0",88,0)
 ; TRXIEN = ien in TRANSACTIONS (#9002313.0201)
"RTN","BPSECX0",89,0)
 ; BPCOBIEN= ien in COB OTHER PAYMENTS (#9002313.0401)
"RTN","BPSECX0",90,0)
 ; BPS - Passed by reference
"RTN","BPSECX0",91,0)
 ; Output: BPS(9002313.0401,BPCOBIEN,field #,"I") = Value
"RTN","BPSECX0",92,0)
GETBPS5(CLAIMIEN,TRXIEN,BPCOBIEN,BPS) ;EP - from BPSECA1
"RTN","BPSECX0",93,0)
 ;
"RTN","BPSECX0",94,0)
 Q:$G(CLAIMIEN)=""  Q:$G(TRXIEN)=""  Q:$G(BPCOBIEN)=""
"RTN","BPSECX0",95,0)
 ;
"RTN","BPSECX0",96,0)
 N BPREJCT,BPSCNT,BPSPAMT,BPSOTHR,D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",97,0)
 ;
"RTN","BPSECX0",98,0)
 S DIC=9002313.02
"RTN","BPSECX0",99,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",100,0)
 S DA(9002313.0201)=TRXIEN
"RTN","BPSECX0",101,0)
 S DA(9002313.0401)=BPCOBIEN
"RTN","BPSECX0",102,0)
 S DR="400" ; field (#400) TRANSACTIONS
"RTN","BPSECX0",103,0)
 S DR(9002313.0201)=337.01  ;field (#337.01) COB OTHER PAYMENTS
"RTN","BPSECX0",104,0)
 S DR(9002313.0401)=".01;338;339;340;341;443;471;353;392"  ; fields
"RTN","BPSECX0",105,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",106,0)
 D EN^DIQ1
"RTN","BPSECX0",107,0)
 ;
"RTN","BPSECX0",108,0)
 ; Loop through PAYER AMT and get the data
"RTN","BPSECX0",109,0)
 S BPSPAMT=$P($G(^BPSC(CLAIMIEN,400,TRXIEN,337,BPCOBIEN,1,0)),U,4)
"RTN","BPSECX0",110,0)
 F BPSCNT=1:1:BPSPAMT D GETBPS6(CLAIMIEN,TRXIEN,BPCOBIEN,BPSCNT,.BPS)
"RTN","BPSECX0",111,0)
 ;
"RTN","BPSECX0",112,0)
 ; Loop through OTHER PAYER REJECT CODE multiple and get the data
"RTN","BPSECX0",113,0)
 S BPREJCT=$P($G(^BPSC(CLAIMIEN,400,TRXIEN,337,BPCOBIEN,2,0)),U,4)
"RTN","BPSECX0",114,0)
 F BPSCNT=1:1:BPREJCT D GETBPS7(CLAIMIEN,TRXIEN,BPCOBIEN,BPSCNT,.BPS)
"RTN","BPSECX0",115,0)
 ;
"RTN","BPSECX0",116,0)
 ; Loop through PAYER-PATIENT RESP and get the data
"RTN","BPSECX0",117,0)
 S BPSPAMT=$P($G(^BPSC(CLAIMIEN,400,TRXIEN,337,BPCOBIEN,3,0)),U,4)
"RTN","BPSECX0",118,0)
 F BPSCNT=1:1:BPSPAMT D GETBPS8(CLAIMIEN,TRXIEN,BPCOBIEN,BPSCNT,.BPS)
"RTN","BPSECX0",119,0)
 ;
"RTN","BPSECX0",120,0)
 ; Loop through BENEFIT STAGES and get the data
"RTN","BPSECX0",121,0)
 S BPSPAMT=$P($G(^BPSC(CLAIMIEN,400,TRXIEN,337,BPCOBIEN,4,0)),U,4)
"RTN","BPSECX0",122,0)
 F BPSCNT=1:1:BPSPAMT D GETBPS9(CLAIMIEN,TRXIEN,BPCOBIEN,BPSCNT,.BPS)
"RTN","BPSECX0",123,0)
 Q
"RTN","BPSECX0",124,0)
 ;
"RTN","BPSECX0",125,0)
 ; Other Payer Amt Paid multiple (#9002313.401342)
"RTN","BPSECX0",126,0)
GETBPS6(CLAIMIEN,TRXIEN,BPCOBIEN,BPPAYAMT,BPS) ;EP - from GETBPS5
"RTN","BPSECX0",127,0)
 ;
"RTN","BPSECX0",128,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",129,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",130,0)
 Q:$G(TRXIEN)=""
"RTN","BPSECX0",131,0)
 Q:$G(BPCOBIEN)=""
"RTN","BPSECX0",132,0)
 Q:$G(BPPAYAMT)=""
"RTN","BPSECX0",133,0)
 ;
"RTN","BPSECX0",134,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",135,0)
 S DIC=9002313.02
"RTN","BPSECX0",136,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",137,0)
 S DA(9002313.0201)=TRXIEN
"RTN","BPSECX0",138,0)
 S DA(9002313.0401)=BPCOBIEN
"RTN","BPSECX0",139,0)
 S DA(9002313.401342)=BPPAYAMT
"RTN","BPSECX0",140,0)
 S DR="400" ; field (#400) TRANSACTIONS
"RTN","BPSECX0",141,0)
 S DR(9002313.0201)=337.01  ;field (#337.01) COB OTHER PAYMENTS
"RTN","BPSECX0",142,0)
 S DR(9002313.0401)=342 ;(#342) OTHER PAYER AMT PAID MULTIPLE
"RTN","BPSECX0",143,0)
 S DR(9002313.401342)=".01;431"  ;fields
"RTN","BPSECX0",144,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",145,0)
 D EN^DIQ1
"RTN","BPSECX0",146,0)
 ;
"RTN","BPSECX0",147,0)
 Q
"RTN","BPSECX0",148,0)
 ;
"RTN","BPSECX0",149,0)
 ; Other Payer Reject Code multiple (#9002313.401472)
"RTN","BPSECX0",150,0)
GETBPS7(CLAIMIEN,TRXIEN,BPCOBIEN,BPREJCT,BPS) ;EP - from GETBPS5
"RTN","BPSECX0",151,0)
 ;
"RTN","BPSECX0",152,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",153,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",154,0)
 Q:$G(TRXIEN)=""
"RTN","BPSECX0",155,0)
 Q:$G(BPCOBIEN)=""
"RTN","BPSECX0",156,0)
 Q:$G(BPREJCT)=""
"RTN","BPSECX0",157,0)
 ;
"RTN","BPSECX0",158,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",159,0)
 ;
"RTN","BPSECX0",160,0)
 S DIC=9002313.02
"RTN","BPSECX0",161,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",162,0)
 S DA(9002313.0201)=TRXIEN
"RTN","BPSECX0",163,0)
 S DA(9002313.0401)=BPCOBIEN
"RTN","BPSECX0",164,0)
 S DA(9002313.401472)=BPREJCT
"RTN","BPSECX0",165,0)
 S DR="400" ; field (#400) TRANSACTIONS
"RTN","BPSECX0",166,0)
 S DR(9002313.0201)=337.01  ;field (#337.01) COB OTHER PAYMENTS
"RTN","BPSECX0",167,0)
 S DR(9002313.0401)=472 ;(#472) OTHER PAYER REJECT CODE MLTPL
"RTN","BPSECX0",168,0)
 S DR(9002313.401472)=".01"  ;fields
"RTN","BPSECX0",169,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",170,0)
 D EN^DIQ1
"RTN","BPSECX0",171,0)
 Q
"RTN","BPSECX0",172,0)
 ;
"RTN","BPSECX0",173,0)
 ; Other Payer-Patient Resp Amt multiple (#9002313.401353)
"RTN","BPSECX0",174,0)
GETBPS8(CLAIMIEN,TRXIEN,BPCOBIEN,BPPAYAMT,BPS) ;EP - from GETBPS5
"RTN","BPSECX0",175,0)
 ;
"RTN","BPSECX0",176,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",177,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",178,0)
 Q:$G(TRXIEN)=""
"RTN","BPSECX0",179,0)
 Q:$G(BPCOBIEN)=""
"RTN","BPSECX0",180,0)
 Q:$G(BPPAYAMT)=""
"RTN","BPSECX0",181,0)
 ;
"RTN","BPSECX0",182,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",183,0)
 S DIC=9002313.02
"RTN","BPSECX0",184,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",185,0)
 S DA(9002313.0201)=TRXIEN
"RTN","BPSECX0",186,0)
 S DA(9002313.0401)=BPCOBIEN
"RTN","BPSECX0",187,0)
 S DA(9002313.401353)=BPPAYAMT
"RTN","BPSECX0",188,0)
 S DR="400" ; field (#400) TRANSACTIONS
"RTN","BPSECX0",189,0)
 S DR(9002313.0201)=337.01  ;field (#337.01) COB OTHER PAYMENTS
"RTN","BPSECX0",190,0)
 S DR(9002313.0401)=353.01  ;field (#353.01) OTHER PAYER-PATIENT RESP MLTPL
"RTN","BPSECX0",191,0)
 S DR(9002313.401353)=".01;351;352"  ;fields
"RTN","BPSECX0",192,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",193,0)
 D EN^DIQ1
"RTN","BPSECX0",194,0)
 ;
"RTN","BPSECX0",195,0)
 ; Benefit Stages multiple (#9002313.401392)
"RTN","BPSECX0",196,0)
GETBPS9(CLAIMIEN,TRXIEN,BPCOBIEN,BPPAYAMT,BPS) ;EP - from GETBPS5
"RTN","BPSECX0",197,0)
 ;
"RTN","BPSECX0",198,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",199,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",200,0)
 Q:$G(TRXIEN)=""
"RTN","BPSECX0",201,0)
 Q:$G(BPCOBIEN)=""
"RTN","BPSECX0",202,0)
 Q:$G(BPPAYAMT)=""
"RTN","BPSECX0",203,0)
 ;
"RTN","BPSECX0",204,0)
 N D0,DA,DIC,DIQ,DIQ2,DR
"RTN","BPSECX0",205,0)
 S DIC=9002313.02
"RTN","BPSECX0",206,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",207,0)
 S DA(9002313.0201)=TRXIEN
"RTN","BPSECX0",208,0)
 S DA(9002313.0401)=BPCOBIEN
"RTN","BPSECX0",209,0)
 S DA(9002313.401392)=BPPAYAMT
"RTN","BPSECX0",210,0)
 S DR="400" ; field (#400) TRANSACTIONS
"RTN","BPSECX0",211,0)
 S DR(9002313.0201)=337.01  ;field (#337.01) COB OTHER PAYMENTS
"RTN","BPSECX0",212,0)
 S DR(9002313.0401)=392.01  ;field (#392.01) BENEFIT STAGE MLTPL
"RTN","BPSECX0",213,0)
 S DR(9002313.401392)=".01;393;394"  ;fields
"RTN","BPSECX0",214,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",215,0)
 D EN^DIQ1
"RTN","BPSECX0",216,0)
 ;
"RTN","BPSECX0",217,0)
 Q
"RTN","BPSJHLT")
0^18^B56866826
"RTN","BPSJHLT",1,0)
BPSJHLT ;BHAM ISC/LJF - HL7 Process Incoming MFN Messages ;05-NOV-2003
"RTN","BPSJHLT",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,10,15,19**;JUN 2004;Build 18
"RTN","BPSJHLT",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSJHLT",4,0)
 ;
"RTN","BPSJHLT",5,0)
 ;**Program Description**
"RTN","BPSJHLT",6,0)
 ;  This program will process incoming MFN messages and
"RTN","BPSJHLT",7,0)
 ;  update the appropriate tables
"RTN","BPSJHLT",8,0)
 ;
"RTN","BPSJHLT",9,0)
 ; Direct entry not allowed
"RTN","BPSJHLT",10,0)
 Q
"RTN","BPSJHLT",11,0)
 ;
"RTN","BPSJHLT",12,0)
PKY(PKYNM,PKYROOT,ADD) ;Lookup ien or add using PKYNM
"RTN","BPSJHLT",13,0)
 N DA,DO,DIC,DIE,DINUM,DLAYGO,DTOUT,DUOUT,Y,X
"RTN","BPSJHLT",14,0)
 I $G(PKYNM)]"",$G(PKYROOT)]"" S ADD=+$G(ADD)
"RTN","BPSJHLT",15,0)
 E  Q 0
"RTN","BPSJHLT",16,0)
 S X=PKYNM,DIC=PKYROOT
"RTN","BPSJHLT",17,0)
 I 'ADD S DIC(0)="X" D ^DIC
"RTN","BPSJHLT",18,0)
 I ADD S DIC(0)="L",DLAYGO=PKYROOT D FILE^DICN
"RTN","BPSJHLT",19,0)
 Q +Y
"RTN","BPSJHLT",20,0)
 ;
"RTN","BPSJHLT",21,0)
EN(HL) ;  Entry Point
"RTN","BPSJHLT",22,0)
 ;
"RTN","BPSJHLT",23,0)
 N BPSJACT,BPSJPKY,BPSJADT,BPSZPRER,BPSJROOT,PSIEN,APPACK
"RTN","BPSJHLT",24,0)
 N ZPRS,BPSJSEG,HCT,ERRFLAG,NAFLG,NPFLG,SEG,MSG,MCT,FLN,FILE
"RTN","BPSJHLT",25,0)
 N RBSTART,RBEND,RBCNT,ZPSNNAME,ZPRCNT,BPSETID,RCODE,MAXRX
"RTN","BPSJHLT",26,0)
 N FS,CS,PSHTVER,NCPDPVER,NCPDPCK,BPSFILE,BPSJCNT,BPSJDEVN
"RTN","BPSJHLT",27,0)
 N BPSJPROD,BPSJNAME,DIK,TCH
"RTN","BPSJHLT",28,0)
 ;
"RTN","BPSJHLT",29,0)
 S FS=$G(HL("FS")) I FS="" S FS="|"      ; field separator
"RTN","BPSJHLT",30,0)
 S CS=$E($G(HL("ECH"))) I CS="" S CS="^"  ; component separator
"RTN","BPSJHLT",31,0)
 ;
"RTN","BPSJHLT",32,0)
 K ^TMP($J,"BPSJ-RBACK"),^TMP($J,"BPSJ-ERROR")
"RTN","BPSJHLT",33,0)
 ;
"RTN","BPSJHLT",34,0)
 D INITZPRS^BPSJZPR(.ZPRS)
"RTN","BPSJHLT",35,0)
 S BPSFILE=9002313.92,BPSJROOT=$$ROOT^DILFD(BPSFILE)
"RTN","BPSJHLT",36,0)
 S RBSTART=100,RBEND=300,NCPDPCK=",51,D0,"
"RTN","BPSJHLT",37,0)
 S (ZPSNNAME,BPSJPROD,NCPDPVER,BPSJACT,BPSJADT,BPSJPKY)=""
"RTN","BPSJHLT",38,0)
 ;
"RTN","BPSJHLT",39,0)
 ; Initialize some Application Acknowledgement data
"RTN","BPSJHLT",40,0)
 D DGAPPACK^BPSJACK
"RTN","BPSJHLT",41,0)
 S APPACK("MSA",1)="AE"  ; Assume error
"RTN","BPSJHLT",42,0)
 S APPACK("MSA",2)=$G(HL("MID"))  ; Message ID
"RTN","BPSJHLT",43,0)
 S APPACK("MFA",4,1)="U" ; Set flag type of "unsuccessful event"
"RTN","BPSJHLT",44,0)
 S APPACK("MFA",6)="ST"
"RTN","BPSJHLT",45,0)
 S APPACK("MFI",6)="NE"
"RTN","BPSJHLT",46,0)
 ;
"RTN","BPSJHLT",47,0)
 ; Init encoding char array
"RTN","BPSJHLT",48,0)
 S TCH("\F\")="|",TCH("\R\")="~"
"RTN","BPSJHLT",49,0)
 S TCH("\E\")="\",TCH("\T\")="&"
"RTN","BPSJHLT",50,0)
 ;
"RTN","BPSJHLT",51,0)
 S HCT=1,(MCT,NAFLG,NPFLG,ERRFLAG,ZPRCNT,MAXRX)=0
"RTN","BPSJHLT",52,0)
 F  D  Q:'HCT  I ERRFLAG Q
"RTN","BPSJHLT",53,0)
 . K BPSJSEG S HCT=$O(^TMP($J,"BPSJHLI",HCT))
"RTN","BPSJHLT",54,0)
 . D SPAR^BPSJUTL(.HL,.BPSJSEG,HCT) S SEG=$G(BPSJSEG(1))
"RTN","BPSJHLT",55,0)
 . ;
"RTN","BPSJHLT",56,0)
 . ;                    ; payer sheet detail (multiple)
"RTN","BPSJHLT",57,0)
 . I SEG="ZPR" D  Q     ; Record #5+  (MSH is record #1)
"RTN","BPSJHLT",58,0)
 .. ;
"RTN","BPSJHLT",59,0)
 .. I ERRFLAG Q  ; Fatal Error
"RTN","BPSJHLT",60,0)
 .. S ZPRCNT=ZPRCNT+1,BPSETID=$G(BPSJSEG(2))
"RTN","BPSJHLT",61,0)
 .. ;-If not numeric equivalent the warp engines are offline, Captain
"RTN","BPSJHLT",62,0)
 .. I BPSETID'=ZPRCNT D FAKEREC(ZPRCNT)
"RTN","BPSJHLT",63,0)
 .. D EN^BPSJZPR(PSIEN,.BPSJSEG,BPSJROOT,BPSFILE)
"RTN","BPSJHLT",64,0)
 . ;
"RTN","BPSJHLT",65,0)
 . I SEG="MFI" D  Q    ; Record #2
"RTN","BPSJHLT",66,0)
 .. ;
"RTN","BPSJHLT",67,0)
 .. ;-Required Field checks
"RTN","BPSJHLT",68,0)
 .. D ERRMSG(0,"MFI","1,2,3",.BPSJSEG)
"RTN","BPSJHLT",69,0)
 .. ;
"RTN","BPSJHLT",70,0)
 .. S APPACK("MFI",1,1)=$P($G(BPSJSEG(2)),CS)
"RTN","BPSJHLT",71,0)
 .. S APPACK("MFI",1,2)=$P($G(BPSJSEG(2)),CS,2)
"RTN","BPSJHLT",72,0)
 .. I APPACK("MFI",1,1)]"",APPACK("MFI",1,2)]""
"RTN","BPSJHLT",73,0)
 .. E  D
"RTN","BPSJHLT",74,0)
 ... ; hard code these for Version 1.0 of s/w
"RTN","BPSJHLT",75,0)
 ... D FILE^DID(BPSFILE,,"NAME","BPSJNAME")
"RTN","BPSJHLT",76,0)
 ... I APPACK("MFI",1,1)="" S APPACK("MFI",1,1)=BPSFILE
"RTN","BPSJHLT",77,0)
 ... I APPACK("MFI",1,2)="" S APPACK("MFI",1,2)=$G(BPSJNAME("NAME"))
"RTN","BPSJHLT",78,0)
 ... K BPSJNAME
"RTN","BPSJHLT",79,0)
 ... ;
"RTN","BPSJHLT",80,0)
 .. S APPACK("MFI",3)=$G(BPSJSEG(4))
"RTN","BPSJHLT",81,0)
 . ;
"RTN","BPSJHLT",82,0)
 . I SEG="MFE" D  Q   ; Record #3
"RTN","BPSJHLT",83,0)
 .. ;
"RTN","BPSJHLT",84,0)
 .. ;-Required Field checks
"RTN","BPSJHLT",85,0)
 .. D ERRMSG(0,"MFE","1,2,4,5",.BPSJSEG)
"RTN","BPSJHLT",86,0)
 .. ;
"RTN","BPSJHLT",87,0)
 .. S BPSJADT=$$NOW^XLFDT()
"RTN","BPSJHLT",88,0)
 .. S (BPSJACT,APPACK("MFA",1))=$G(BPSJSEG(2))  ; Action type
"RTN","BPSJHLT",89,0)
 .. I $L(BPSJACT)=3,"^MAD^MUP^MDC^"[(U_BPSJACT_U)
"RTN","BPSJHLT",90,0)
 .. E  D ERRMSG(1,"MFE","1^INVALID EVENT CODE")
"RTN","BPSJHLT",91,0)
 .. ;
"RTN","BPSJHLT",92,0)
 .. S APPACK("MFA",2)=$G(BPSJSEG(3))       ; MFN Control ID
"RTN","BPSJHLT",93,0)
 .. ;
"RTN","BPSJHLT",94,0)
 .. ; Old/Current Sheet name
"RTN","BPSJHLT",95,0)
 .. S (BPSJPKY,APPACK("MFA",5))=$G(BPSJSEG(5))
"RTN","BPSJHLT",96,0)
 .. S APPACK("MFA",4,2)="Payer Sheet "_BPSJPKY
"RTN","BPSJHLT",97,0)
 .. S BPSJPKY=$$DECODE^BPSJZPR(BPSJPKY,.TCH)
"RTN","BPSJHLT",98,0)
 .. ;
"RTN","BPSJHLT",99,0)
 .. ;-Get ien using sheet name, if one exists
"RTN","BPSJHLT",100,0)
 .. S PSIEN=$$PKY(BPSJPKY,BPSJROOT)
"RTN","BPSJHLT",101,0)
 .. ;
"RTN","BPSJHLT",102,0)
 .. I PSIEN=0 D ERRMSG(91,"Fileman error") Q
"RTN","BPSJHLT",103,0)
 .. ;
"RTN","BPSJHLT",104,0)
 .. I PSIEN>0 D   ; Exists: save current data for rollback
"RTN","BPSJHLT",105,0)
 ... S APPACK("MFA",4,1)="P" ;Set flag type to "P"rior version
"RTN","BPSJHLT",106,0)
 ... M ^TMP($J,"BPSJ-RBACK",PSIEN)=^BPSF(9002313.92,PSIEN)
"RTN","BPSJHLT",107,0)
 ... ;-Kill appropriate existing Payer Sheet fields
"RTN","BPSJHLT",108,0)
 ... F RBCNT=RBSTART:10:RBEND K ^BPSF(9002313.92,PSIEN,RBCNT)
"RTN","BPSJHLT",109,0)
 .. ;
"RTN","BPSJHLT",110,0)
 .. ;-Create development sheet
"RTN","BPSJHLT",111,0)
 .. I PSIEN<0 S BPSJCNT=0 F  S BPSJCNT=1+BPSJCNT D  Q:PSIEN>0
"RTN","BPSJHLT",112,0)
 ... S BPSJDEVN="BPSJ-DEV-"_$J_"-"_BPSJCNT
"RTN","BPSJHLT",113,0)
 ... S PSIEN=$$PKY(BPSJDEVN,BPSJROOT)    ; see if dev sheet exists
"RTN","BPSJHLT",114,0)
 ... I PSIEN>-1 S PSIEN=0 Q
"RTN","BPSJHLT",115,0)
 ... S PSIEN=$$PKY(BPSJDEVN,BPSJROOT,1)  ; add new one
"RTN","BPSJHLT",116,0)
 .. ;
"RTN","BPSJHLT",117,0)
 .. I PSIEN=0 D ERRMSG(92,"Fileman error") Q
"RTN","BPSJHLT",118,0)
 .. ;
"RTN","BPSJHLT",119,0)
 .. ;-Flag the sheet as being in development by this process
"RTN","BPSJHLT",120,0)
 .. K DA,DIE,DR S DA=PSIEN,DIE=BPSJROOT
"RTN","BPSJHLT",121,0)
 .. S DR="1.06////1."_$J ;FOR DEVELOPMENT
"RTN","BPSJHLT",122,0)
 .. D ^DIE
"RTN","BPSJHLT",123,0)
 . ;
"RTN","BPSJHLT",124,0)
 . ;payer sheet header
"RTN","BPSJHLT",125,0)
 . I SEG="ZPS" D  Q    ; Record #4
"RTN","BPSJHLT",126,0)
 .. ;
"RTN","BPSJHLT",127,0)
 .. ;-Required Field checks
"RTN","BPSJHLT",128,0)
 .. D ERRMSG(0,"ZPS","1,2,3,4,5,6,7",.BPSJSEG)
"RTN","BPSJHLT",129,0)
 .. ;
"RTN","BPSJHLT",130,0)
 .. ;-New sheet name, production status and Payer Sheet and NCPDP versions
"RTN","BPSJHLT",131,0)
 .. S ZPSNNAME=$$DECODE^BPSJZPR($G(BPSJSEG(4)),.TCH) K TCH
"RTN","BPSJHLT",132,0)
 .. I ZPSNNAME="" S ZPSNNAME=$G(BPSJPKY)
"RTN","BPSJHLT",133,0)
 .. ;Cannot rename an existing worksheet to a different but already existing name BPS*1*10
"RTN","BPSJHLT",134,0)
 .. I ZPSNNAME]"",ZPSNNAME'=$G(BPSJPKY),$$PKY(ZPSNNAME,BPSJROOT)]"" S ^TMP($J,"BPSJ-ERROR","ZPS",3)=""
"RTN","BPSJHLT",135,0)
 .. S BPSJPROD=$G(BPSJSEG(8)) I BPSJPROD'="P" S BPSJPROD="T"
"RTN","BPSJHLT",136,0)
 .. S PSHTVER=$G(BPSJSEG(5)) I PSHTVER'=(PSHTVER\1) S ^TMP($J,"BPSJ-ERROR","ZPS",4)=""
"RTN","BPSJHLT",137,0)
 .. S NCPDPVER=$G(BPSJSEG(6)) I NCPDPVER=""!(NCPDPCK'[NCPDPVER) S ^TMP($J,"BPSJ-ERROR","ZPS",5)=""
"RTN","BPSJHLT",138,0)
 ;
"RTN","BPSJHLT",139,0)
 I '$D(^TMP($J,"BPSJ-ERROR")) D
"RTN","BPSJHLT",140,0)
 . S APPACK("MFA",4,1)="S"  ; flag success
"RTN","BPSJHLT",141,0)
 . S DR=".01////"_ZPSNNAME  ; set the name
"RTN","BPSJHLT",142,0)
 . S DA=PSIEN,DIE=BPSJROOT D ^DIE
"RTN","BPSJHLT",143,0)
 . ;
"RTN","BPSJHLT",144,0)
 . I BPSJACT="MDC" S BPSJACT=0  ;Disabled
"RTN","BPSJHLT",145,0)
 . E  D  I 'BPSJACT S BPSJACT=0
"RTN","BPSJHLT",146,0)
 .. I BPSJPROD="P" S BPSJACT=3  ;Production
"RTN","BPSJHLT",147,0)
 .. I BPSJPROD="T" S BPSJACT=2  ;Testing
"RTN","BPSJHLT",148,0)
 . S DR="1.06////"_BPSJACT,DA=PSIEN,DIE=BPSJROOT D ^DIE
"RTN","BPSJHLT",149,0)
 . ; NCPDP Version
"RTN","BPSJHLT",150,0)
 . S DR="1.02////"_NCPDPVER,DA=PSIEN,DIE=BPSJROOT D ^DIE
"RTN","BPSJHLT",151,0)
 . ; Payer Sheet Version
"RTN","BPSJHLT",152,0)
 . S DR="1.14////"_PSHTVER,DA=PSIEN,DIE=BPSJROOT D ^DIE
"RTN","BPSJHLT",153,0)
 E  I $G(PSIEN) D   ;-Roll back
"RTN","BPSJHLT",154,0)
 . ;-Remove if no prior existence
"RTN","BPSJHLT",155,0)
 . I $G(^TMP($J,"BPSJ-RBACK",PSIEN,0))="" D  Q
"RTN","BPSJHLT",156,0)
 .. S DIK=BPSJROOT,DA=PSIEN D ^DIK
"RTN","BPSJHLT",157,0)
 . ;
"RTN","BPSJHLT",158,0)
 . ; Restore old data
"RTN","BPSJHLT",159,0)
 . S ^BPSF(9002313.92,PSIEN,0)=$G(^TMP($J,"BPSJ-RBACK",PSIEN,0))
"RTN","BPSJHLT",160,0)
 . S ^BPSF(9002313.92,PSIEN,1)=$G(^TMP($J,"BPSJ-RBACK",PSIEN,1))
"RTN","BPSJHLT",161,0)
 . F RBCNT=RBSTART:10:RBEND D
"RTN","BPSJHLT",162,0)
 .. K ^BPSF(9002313.92,PSIEN,RBCNT)
"RTN","BPSJHLT",163,0)
 .. M ^BPSF(9002313.92,PSIEN,RBCNT)=^TMP($J,"BPSJ-RBACK",PSIEN,RBCNT)
"RTN","BPSJHLT",164,0)
 ;
"RTN","BPSJHLT",165,0)
 D APPACK^BPSJACK(.HL,.APPACK,PSIEN)
"RTN","BPSJHLT",166,0)
 ;
"RTN","BPSJHLT",167,0)
 K ^TMP($J,"BPSJ-RBACK"),^TMP($J,"BPSJ-ERROR")
"RTN","BPSJHLT",168,0)
 ;
"RTN","BPSJHLT",169,0)
 Q
"RTN","BPSJHLT",170,0)
 ;
"RTN","BPSJHLT",171,0)
FAKEREC(REF) ; Setup a fake Record ID (Set ID)
"RTN","BPSJHLT",172,0)
 N IX
"RTN","BPSJHLT",173,0)
 ;
"RTN","BPSJHLT",174,0)
 S REF=+$G(REF)
"RTN","BPSJHLT",175,0)
 S IX=$G(BPSJSEG(2)),BPSJSEG(2)=REF
"RTN","BPSJHLT",176,0)
 I IX="" D  Q   ; Missing
"RTN","BPSJHLT",177,0)
 . S ^TMP($J,"BPSJ-ERROR","ZPR",REF,1)="V631-1,"_REF
"RTN","BPSJHLT",178,0)
 ;
"RTN","BPSJHLT",179,0)
 I IX=+IX,IX'=0
"RTN","BPSJHLT",180,0)
 E  D  Q          ; Invalid
"RTN","BPSJHLT",181,0)
 . S ^TMP($J,"BPSJ-ERROR","ZPR",REF,1)="V631-2,"_REF
"RTN","BPSJHLT",182,0)
 ;
"RTN","BPSJHLT",183,0)
 ; We have a valid numeric to work with, but:
"RTN","BPSJHLT",184,0)
 ;
"RTN","BPSJHLT",185,0)
 ; Duplicate
"RTN","BPSJHLT",186,0)
 I $G(^TMP($J,"BPSJ-ERROR","ZPR",IX))=IX D  Q
"RTN","BPSJHLT",187,0)
 . S ^TMP($J,"BPSJ-ERROR","ZPR",REF,1)="V631-4,"_REF
"RTN","BPSJHLT",188,0)
 ;
"RTN","BPSJHLT",189,0)
 ; Out Of Sequence
"RTN","BPSJHLT",190,0)
 S ^TMP($J,"BPSJ-ERROR","ZPR",REF,1)="V631-3,"_REF
"RTN","BPSJHLT",191,0)
 S ^TMP($J,"BPSJ-ERROR","ZPR",REF)=IX
"RTN","BPSJHLT",192,0)
 ;
"RTN","BPSJHLT",193,0)
 Q
"RTN","BPSJHLT",194,0)
 ;
"RTN","BPSJHLT",195,0)
ERRMSG(SPECIAL,SEG,REQFLDS,BPSJSEG) ;
"RTN","BPSJHLT",196,0)
 N FCNT,FNO,FIELD,C
"RTN","BPSJHLT",197,0)
 S C=",",SPECIAL=+$G(SPECIAL),SEG=$G(SEG),REQFLDS=$G(REQFLDS)
"RTN","BPSJHLT",198,0)
 I 'SPECIAL D  Q
"RTN","BPSJHLT",199,0)
 . ;-Evaluate required fields for non ZPR segs
"RTN","BPSJHLT",200,0)
 . S FNO=$J(REQFLDS,C)
"RTN","BPSJHLT",201,0)
 . F FCNT=1:1:FNO S FIELD=$P(REQFLDS,C,FCNT) I FIELD D
"RTN","BPSJHLT",202,0)
 .. ;-Set flag for empty required field
"RTN","BPSJHLT",203,0)
 .. I $G(BPSJSEG(FIELD+1))="" S ^TMP($J,"BPSJ-ERROR",SEG,FIELD)=""
"RTN","BPSJHLT",204,0)
 ;
"RTN","BPSJHLT",205,0)
 ;-"Special" handler
"RTN","BPSJHLT",206,0)
 I SPECIAL=1 D  Q
"RTN","BPSJHLT",207,0)
 . ;-Set flag that field contains invalid value
"RTN","BPSJHLT",208,0)
 . S ^TMP($J,"BPSJ-ERROR",SEG,+REQFLDS)=REQFLDS
"RTN","BPSJHLT",209,0)
 ;
"RTN","BPSJHLT",210,0)
 I SPECIAL>90 S ERRFLAG=1
"RTN","BPSJHLT",211,0)
 Q
"RTN","BPSJZPR")
0^13^B69333659
"RTN","BPSJZPR",1,0)
BPSJZPR ;BHAM ISC/CMW/LJF - Process Incoming HL7 ZPR Message ;01-DEC-2003
"RTN","BPSJZPR",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,10,15,19**;JUN 2004;Build 18
"RTN","BPSJZPR",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSJZPR",4,0)
 ;
"RTN","BPSJZPR",5,0)
 ; Description:
"RTN","BPSJZPR",6,0)
 ; Process incoming HL7 ZPR Messages
"RTN","BPSJZPR",7,0)
 ; Update Payer Sheet File (9002313.92)
"RTN","BPSJZPR",8,0)
 ;
"RTN","BPSJZPR",9,0)
 Q
"RTN","BPSJZPR",10,0)
 ;
"RTN","BPSJZPR",11,0)
 ; Entry point
"RTN","BPSJZPR",12,0)
EN(BPSJEN,BPSJSEG,BPSJROOT,BPSFILE) ;
"RTN","BPSJZPR",13,0)
 ;
"RTN","BPSJZPR",14,0)
 N BPRCODE,BPSF,BPSFDIC,BPSEGID,BPORDER,BPMODE,BPNOTES,BPSETID
"RTN","BPSJZPR",15,0)
 N FLN,FLNSC,FLNPN,FLNSPEC
"RTN","BPSJZPR",16,0)
 N DIE,DIC,DLAYGO,DR,DA,DINUM
"RTN","BPSJZPR",17,0)
 N C,X,Y,NCNT,BPND
"RTN","BPSJZPR",18,0)
 ;
"RTN","BPSJZPR",19,0)
 I $G(BPSJEN),$G(BPSJROOT)]"",$G(BPSFILE)]"",$D(BPSJSEG)
"RTN","BPSJZPR",20,0)
 E  Q   ; invalid info
"RTN","BPSJZPR",21,0)
 ;
"RTN","BPSJZPR",22,0)
 S BPRCODE=$$ZPR(),DIE=$G(BPSJROOT),C=","
"RTN","BPSJZPR",23,0)
 ;
"RTN","BPSJZPR",24,0)
 I BPRCODE,BPSEGID,BPORDER
"RTN","BPSJZPR",25,0)
 E  Q
"RTN","BPSJZPR",26,0)
 ;
"RTN","BPSJZPR",27,0)
 S BPSF=DIE_BPSJEN_C_BPSEGID_",0)"
"RTN","BPSJZPR",28,0)
 I '$D(@BPSF) D
"RTN","BPSJZPR",29,0)
 . S FLNSPEC=$$GET1^DID(BPSFILE,BPSEGID,"","SPECIFIER")
"RTN","BPSJZPR",30,0)
 . S @BPSF=U_FLNSPEC_U_U
"RTN","BPSJZPR",31,0)
 ;
"RTN","BPSJZPR",32,0)
 S (X,DINUM)=BPORDER
"RTN","BPSJZPR",33,0)
 S DA(1)=BPSJEN,DIC=DIE_BPSJEN_C_BPSEGID_C
"RTN","BPSJZPR",34,0)
 S DIC(0)="L",(DIC("P"),DLAYGO)=FLN
"RTN","BPSJZPR",35,0)
 D ^DIC
"RTN","BPSJZPR",36,0)
 ;
"RTN","BPSJZPR",37,0)
 S DA=+Y
"RTN","BPSJZPR",38,0)
 S DIE=DIC
"RTN","BPSJZPR",39,0)
 S DR=".02////"_BPRCODE_";.03////"_BPMODE
"RTN","BPSJZPR",40,0)
 D ^DIE
"RTN","BPSJZPR",41,0)
 ;
"RTN","BPSJZPR",42,0)
 S BPSFDIC=DIC ; save dictionary ID
"RTN","BPSJZPR",43,0)
 ; NOTES
"RTN","BPSJZPR",44,0)
 I $D(BPSJSEG(8)) D
"RTN","BPSJZPR",45,0)
 . S DIC=BPSFDIC,DIE=BPSFDIC_BPORDER_",2,",BPSF=DIE_"0)"
"RTN","BPSJZPR",46,0)
 . I '$D(@BPSF) S @BPSF=U_FLNPN_U_U
"RTN","BPSJZPR",47,0)
 . S BPND="BPSJSEG(7,99)",NCNT=0
"RTN","BPSJZPR",48,0)
 . F  S BPND=$Q(@BPND) Q:BPND=""  I $G(@BPND)]"" D
"RTN","BPSJZPR",49,0)
 .. S DIC=BPSFDIC,DIE=BPSFDIC_BPORDER_",2,",BPSF=DIE_"0)"
"RTN","BPSJZPR",50,0)
 .. K DA S DA(4)=BPSJEN,DA(3)=BPSEGID,DA(2)=BPORDER,DA(1)=2,(NCNT,DA)=NCNT+1
"RTN","BPSJZPR",51,0)
 .. K DR S DR=".01////"_@BPND
"RTN","BPSJZPR",52,0)
 .. D ^DIE
"RTN","BPSJZPR",53,0)
 K BPSJSEG(8) ; kill 8 so $Q of 7 won't find it
"RTN","BPSJZPR",54,0)
 ;
"RTN","BPSJZPR",55,0)
 ; Special Code
"RTN","BPSJZPR",56,0)
 I $D(BPSJSEG(7)) D
"RTN","BPSJZPR",57,0)
 . S DIC=BPSFDIC,DIE=BPSFDIC_BPORDER_",1,",BPSF=DIE_"0)"
"RTN","BPSJZPR",58,0)
 . I '$D(@BPSF) S @BPSF=U_FLNSC_U_U
"RTN","BPSJZPR",59,0)
 . S BPND="BPSJSEG(6,99)",NCNT=0
"RTN","BPSJZPR",60,0)
 . F  S BPND=$Q(@BPND) Q:BPND=""  I $G(@BPND)]"" D
"RTN","BPSJZPR",61,0)
 .. S DIC=BPSFDIC,DIE=BPSFDIC_BPORDER_",1,",BPSF=DIE_"0)"
"RTN","BPSJZPR",62,0)
 .. K DA S DA(4)=BPSJEN,DA(3)=BPSEGID,DA(2)=BPORDER,DA(1)=1,(NCNT,DA)=NCNT+1
"RTN","BPSJZPR",63,0)
 .. K DR S DR=".01////"_@BPND
"RTN","BPSJZPR",64,0)
 .. D ^DIE
"RTN","BPSJZPR",65,0)
 Q
"RTN","BPSJZPR",66,0)
 ;
"RTN","BPSJZPR",67,0)
ZPR() ; Validate Fields and Initialize ZPR variables
"RTN","BPSJZPR",68,0)
 N RCODE,WDATA
"RTN","BPSJZPR",69,0)
 ;
"RTN","BPSJZPR",70,0)
 ; Reject reasons: 1=Missing ,2=Invalid
"RTN","BPSJZPR",71,0)
 ; ^TMP($J,"BPSJ-ERROR" is killed before and after it is used in BPSJHLT
"RTN","BPSJZPR",72,0)
 ;
"RTN","BPSJZPR",73,0)
 S BPSETID=$G(BPSJSEG(2))
"RTN","BPSJZPR",74,0)
 ;
"RTN","BPSJZPR",75,0)
 S BPSEGID=$G(BPSJSEG(3))
"RTN","BPSJZPR",76,0)
 I BPSEGID="" S BPSEGID=0 D
"RTN","BPSJZPR",77,0)
 . S ^TMP($J,"BPSJ-ERROR","ZPR",BPSETID,2)="V632-1,"_BPSETID
"RTN","BPSJZPR",78,0)
 E  S BPSEGID=$G(ZPRS(BPSEGID)) D
"RTN","BPSJZPR",79,0)
 . I 'BPSEGID S BPSEGID=0 D  Q
"RTN","BPSJZPR",80,0)
 .. S ^TMP($J,"BPSJ-ERROR","ZPR",BPSETID,2)="V632-2,"_BPSETID
"RTN","BPSJZPR",81,0)
 . ;
"RTN","BPSJZPR",82,0)
 . S FLN=$P(BPSEGID,U,2)
"RTN","BPSJZPR",83,0)
 . S FLNSC=$P(BPSEGID,U,3)
"RTN","BPSJZPR",84,0)
 . S FLNPN=$P(BPSEGID,U,4)
"RTN","BPSJZPR",85,0)
 . S BPSEGID=+BPSEGID
"RTN","BPSJZPR",86,0)
 ;
"RTN","BPSJZPR",87,0)
 S RCODE=$$GETPTR($$TRIM^XLFSTR($G(BPSJSEG(4))))
"RTN","BPSJZPR",88,0)
 I 'RCODE S ^TMP($J,"BPSJ-ERROR","ZPR",BPSETID,3)="V633-2,"_BPSETID
"RTN","BPSJZPR",89,0)
 I $G(BPSJSEG(4))="" S ^TMP($J,"BPSJ-ERROR","ZPR",BPSETID,3)="V633-1,"_BPSETID
"RTN","BPSJZPR",90,0)
 ;
"RTN","BPSJZPR",91,0)
 S BPORDER=$G(BPSJSEG(5))
"RTN","BPSJZPR",92,0)
 I BPORDER="" S ^TMP($J,"BPSJ-ERROR","ZPR",BPSETID,4)="V634,"_BPSETID
"RTN","BPSJZPR",93,0)
 ;
"RTN","BPSJZPR",94,0)
 S BPMODE=$G(BPSJSEG(6))
"RTN","BPSJZPR",95,0)
 ;
"RTN","BPSJZPR",96,0)
 I BPMODE'="X",BPMODE'="S" D
"RTN","BPSJZPR",97,0)
 . S ^TMP($J,"BPSJ-ERROR","ZPR",BPSETID,5)="V635,"_BPSETID
"RTN","BPSJZPR",98,0)
 ;
"RTN","BPSJZPR",99,0)
 I '$L($G(BPSJSEG(7))),$D(BPSJSEG(7))'>1 K BPSJSEG(7)
"RTN","BPSJZPR",100,0)
 E  D     ;NOTES(.BPSJSEG(7))
"RTN","BPSJZPR",101,0)
 . K WDATA M WDATA(7)=BPSJSEG(7) D NOTES(.WDATA)
"RTN","BPSJZPR",102,0)
 . K BPSJSEG(7) M BPSJSEG(7)=WDATA K WDATA
"RTN","BPSJZPR",103,0)
 ;
"RTN","BPSJZPR",104,0)
 ; flag error if processing mode="X" and no special code
"RTN","BPSJZPR",105,0)
 I BPMODE="X",'$D(BPSJSEG(7)) S ^TMP($J,"BPSJ-ERROR","ZPR",BPSETID,6)="V636,"_BPSETID
"RTN","BPSJZPR",106,0)
 ;
"RTN","BPSJZPR",107,0)
 I '$L($G(BPSJSEG(8))),$D(BPSJSEG(8))'>1 K BPSJSEG(8)
"RTN","BPSJZPR",108,0)
 E  D   ;NOTES(.BPSJSEG(8))
"RTN","BPSJZPR",109,0)
 . K WDATA M WDATA(8)=BPSJSEG(8) D NOTES(.WDATA)
"RTN","BPSJZPR",110,0)
 . K BPSJSEG(8) M BPSJSEG(8)=WDATA K WDATA
"RTN","BPSJZPR",111,0)
 ;
"RTN","BPSJZPR",112,0)
 Q RCODE
"RTN","BPSJZPR",113,0)
 ;
"RTN","BPSJZPR",114,0)
NOTES(ARRAYIN,TRCH) ; fProgrammer Notes - Special Code handler
"RTN","BPSJZPR",115,0)
 ;
"RTN","BPSJZPR",116,0)
 N II,ODAT,NODENM
"RTN","BPSJZPR",117,0)
 N ISDATA,ISDATA1,ISDATA2,ISDATA3
"RTN","BPSJZPR",118,0)
 ;
"RTN","BPSJZPR",119,0)
 I '$D(TRCH) D   ; apply standard Vista/Vitria "Free Text" de-encoding
"RTN","BPSJZPR",120,0)
 . S TRCH("\F\")="|",TRCH("\R\")="~",TRCH("\E\")="\"
"RTN","BPSJZPR",121,0)
 . S TRCH("\T\")="&",TRCH("\S\")="^"
"RTN","BPSJZPR",122,0)
 . S TRCH("\.b")=1,TRCH("\.br\")=1
"RTN","BPSJZPR",123,0)
 ;
"RTN","BPSJZPR",124,0)
 S NODENM="ARRAYIN"
"RTN","BPSJZPR",125,0)
 ;
"RTN","BPSJZPR",126,0)
 S (ODAT,ISDATA1)=""
"RTN","BPSJZPR",127,0)
 F  S NODENM=$Q(@NODENM) Q:NODENM=""  S ISDATA=@NODENM D
"RTN","BPSJZPR",128,0)
 . ; clean up partial string if any
"RTN","BPSJZPR",129,0)
 . I $L(ISDATA1) D  I '$L(ISDATA) Q
"RTN","BPSJZPR",130,0)
 .. S ISDATA1=ISDATA1_$E(ISDATA,1,10)
"RTN","BPSJZPR",131,0)
 .. S ISDATA3=$$DECODE(ISDATA1,.TRCH,.ODAT,.ISDATA2)
"RTN","BPSJZPR",132,0)
 .. S $E(ISDATA,1,10)=ISDATA2
"RTN","BPSJZPR",133,0)
 . ;
"RTN","BPSJZPR",134,0)
 . S ISDATA2=$$DECODE(ISDATA,.TRCH,.ODAT,.ISDATA1)
"RTN","BPSJZPR",135,0)
 ;
"RTN","BPSJZPR",136,0)
 S ODAT=ODAT_ISDATA1 D NWNODE(.ODAT) K ARRAYIN M ARRAYIN=ODAT
"RTN","BPSJZPR",137,0)
 Q
"RTN","BPSJZPR",138,0)
 ;
"RTN","BPSJZPR",139,0)
NWNODE(FREERAY) ; build free text array
"RTN","BPSJZPR",140,0)
 N CNT
"RTN","BPSJZPR",141,0)
 S CNT=1+$O(FREERAY(""),-1),FREERAY(CNT)=FREERAY,FREERAY=""
"RTN","BPSJZPR",142,0)
 Q
"RTN","BPSJZPR",143,0)
 ;
"RTN","BPSJZPR",144,0)
DECODE(INSTR,TCH,WDAT,INSTR1) ;
"RTN","BPSJZPR",145,0)
 ; INSTR - Input string
"RTN","BPSJZPR",146,0)
 ; TCH   - translation array
"RTN","BPSJZPR",147,0)
 ; WDAT  - Output in a Vista compliant "Free Text" array
"RTN","BPSJZPR",148,0)
 ; INSTR1 - Remainder of text when last or
"RTN","BPSJZPR",149,0)
 ;          second to last INSTR char = "\"
"RTN","BPSJZPR",150,0)
 ;Development Note:
"RTN","BPSJZPR",151,0)
 ;\.br\ - removed and new node created
"RTN","BPSJZPR",152,0)
 ;\E\.br\E\ = \.br\ - (no further translation)
"RTN","BPSJZPR",153,0)
 ;non-printable character translation not supported
"RTN","BPSJZPR",154,0)
 ;Output Array nodes will contain no more than 200 characters each
"RTN","BPSJZPR",155,0)
 ;
"RTN","BPSJZPR",156,0)
 N II,CH
"RTN","BPSJZPR",157,0)
 S INSTR1="",WDAT=$G(WDAT)
"RTN","BPSJZPR",158,0)
 F II=1:1:$L(INSTR) S CH=$E(INSTR,II) D:CH="\"  S WDAT=WDAT_CH I $L(WDAT)>199 D NWNODE(.WDAT)
"RTN","BPSJZPR",159,0)
 . ;
"RTN","BPSJZPR",160,0)
 . ;  Partial TCH string, if \.br\ (CR-LF) translation allowed
"RTN","BPSJZPR",161,0)
 . I $L($E(INSTR,II,II+2))<3,$G(TCH("\.br\")) D  Q
"RTN","BPSJZPR",162,0)
 .. S INSTR1=$E(INSTR,II,II+2),II=$L(INSTR),CH=""
"RTN","BPSJZPR",163,0)
 . ;
"RTN","BPSJZPR",164,0)
 . I '$D(TCH($E(INSTR,II,II+2))) Q     ; not one we're interested in
"RTN","BPSJZPR",165,0)
 . I +$G(TCH($E(INSTR,II,II+2))) D  Q  ; \.br\ to <CR-LF> conversion
"RTN","BPSJZPR",166,0)
 .. I (II+4)>$L(INSTR) S INSTR1=$E(INSTR,II,$L(INSTR)),II=$L(INSTR),CH="" Q
"RTN","BPSJZPR",167,0)
 .. I +$G(TCH($E(INSTR,II,II+4))) S II=II+4,CH="" D NWNODE(.WDAT)
"RTN","BPSJZPR",168,0)
 . ;
"RTN","BPSJZPR",169,0)
 . S CH=TCH($E(INSTR,II,II+2)),II=II+2  ; std conversion
"RTN","BPSJZPR",170,0)
 Q WDAT   ; Return top node of WDAT - for strings less than 200 characters
"RTN","BPSJZPR",171,0)
 ;
"RTN","BPSJZPR",172,0)
GETPTR(BPDAT) ; Get pointer into BPS NCPDP FIELD DEFS
"RTN","BPSJZPR",173,0)
 N BPSFNM,BPSFNO,BPSIX,BPSIXALT,BPSFX,BPNAMIX,BPNUMIX,BPSFNOCK
"RTN","BPSJZPR",174,0)
 ;
"RTN","BPSJZPR",175,0)
 S BPSFNM=$P($G(BPDAT),"-",2),BPSFNO=$P($G(BPDAT),"-") ; allow for alphanumeric NCPDP number - BPS*1*15
"RTN","BPSJZPR",176,0)
 I BPSFNM]"",BPSFNO]"" S (BPSIX,BPSIXALT)=0,BPSFX=BPSFNO_U_BPSFNM
"RTN","BPSJZPR",177,0)
 E  Q 0
"RTN","BPSJZPR",178,0)
 S BPNAMIX=$O(^BPSF(9002313.91,"D",BPSFNM,""))
"RTN","BPSJZPR",179,0)
 S BPNUMIX=$O(^BPSF(9002313.91,"B",BPSFNO,""))
"RTN","BPSJZPR",180,0)
 ;
"RTN","BPSJZPR",181,0)
 ;-if NAME and NUMBER point to the same IEN (but not 0)
"RTN","BPSJZPR",182,0)
 I BPNAMIX,BPNUMIX=BPNAMIX Q BPNAMIX
"RTN","BPSJZPR",183,0)
 ;
"RTN","BPSJZPR",184,0)
 ;-else might be in another node of the "D" x-ref
"RTN","BPSJZPR",185,0)
 I BPNAMIX,BPNUMIX F  D  Q:BPSIX  Q:'BPNAMIX
"RTN","BPSJZPR",186,0)
 . S BPNAMIX=$O(^BPSF(9002313.91,"D",BPSFNM,BPNAMIX))
"RTN","BPSJZPR",187,0)
 . I BPNUMIX=BPNAMIX S BPSIX=BPNAMIX
"RTN","BPSJZPR",188,0)
 ;
"RTN","BPSJZPR",189,0)
 ;-If not found, try "B" x-ref value
"RTN","BPSJZPR",190,0)
 I 'BPSIX,BPNUMIX D
"RTN","BPSJZPR",191,0)
 . I $P($G(^BPSF(9002313.91,BPNUMIX,5)),U)=BPSFNM S BPSIX=BPNUMIX Q
"RTN","BPSJZPR",192,0)
 . I 'BPSIXALT,$P($G(^BPSF(9002313.91,BPNUMIX,0)),U,1,2)=BPSFX S BPSIXALT=BPNUMIX Q
"RTN","BPSJZPR",193,0)
 . ;
"RTN","BPSJZPR",194,0)
 . ;-try additional "B" x-ref's for this NUMBER
"RTN","BPSJZPR",195,0)
 . F  D  Q:BPSIX  Q:'BPNUMIX
"RTN","BPSJZPR",196,0)
 .. S BPNUMIX=$O(^BPSF(9002313.91,"B",BPSFNO,BPNUMIX))
"RTN","BPSJZPR",197,0)
 .. I BPNUMIX D
"RTN","BPSJZPR",198,0)
 ... I $P($G(^BPSF(9002313.91,BPNUMIX,5)),U)=BPSFNM S BPSIX=BPNUMIX
"RTN","BPSJZPR",199,0)
 ... I 'BPSIXALT,$P($G(^BPSF(9002313.91,BPNUMIX,0)),U,1,2)=BPSFX S BPSIXALT=BPNUMIX
"RTN","BPSJZPR",200,0)
 ;
"RTN","BPSJZPR",201,0)
 ;-Last resort - go through all iens'
"RTN","BPSJZPR",202,0)
 I 'BPSIX S BPNUMIX=0 F  D  Q:BPSIX  Q:'BPNUMIX
"RTN","BPSJZPR",203,0)
 . S BPNUMIX=$O(^BPSF(9002313.91,BPNUMIX))
"RTN","BPSJZPR",204,0)
 . I BPNUMIX,+$G(^BPSF(9002313.91,BPNUMIX,0))[BPSFNO D
"RTN","BPSJZPR",205,0)
 .. S BPSFNOCK=+$G(^BPSF(9002313.91,BPNUMIX,0))
"RTN","BPSJZPR",206,0)
 .. ; Note: Special coding included for BPSFNO of 498 (498.nn)
"RTN","BPSJZPR",207,0)
 .. I BPSFNOCK'=BPSFNO,$P(BPSFNOCK,".")'=498 Q
"RTN","BPSJZPR",208,0)
 .. I $P($G(^BPSF(9002313.91,BPNUMIX,5)),U)=BPSFNM S BPSIX=BPNUMIX
"RTN","BPSJZPR",209,0)
 .. I 'BPSIXALT,$P($G(^BPSF(9002313.91,BPNUMIX,0)),U,1,2)=BPSFX S BPSIXALT=BPNUMIX
"RTN","BPSJZPR",210,0)
 ;
"RTN","BPSJZPR",211,0)
 Q BPSIX
"RTN","BPSJZPR",212,0)
 ;
"RTN","BPSJZPR",213,0)
INITZPRS(ZPRS) ;BPSEGID^FLN^FLNSC^FLNPN
"RTN","BPSJZPR",214,0)
 S ZPRS(0)="100^9002313.9205^9002313.92051^9002313.92052"
"RTN","BPSJZPR",215,0)
 S ZPRS(1)="110^9002313.9206^9002313.92061^9002313.92062"
"RTN","BPSJZPR",216,0)
 S ZPRS(2)="140^9002313.9209^9002313.92091^9002313.92092"
"RTN","BPSJZPR",217,0)
 S ZPRS(3)="150^9002313.921^9002313.9211^9002313.9212"
"RTN","BPSJZPR",218,0)
 S ZPRS(4)="120^9002313.9207^9002313.92071^9002313.92072"
"RTN","BPSJZPR",219,0)
 S ZPRS(5)="160^9002313.9213^9002313.92131^9002313.92132"
"RTN","BPSJZPR",220,0)
 S ZPRS(6)="170^9002313.9214^9002313.92141^9002313.92142"
"RTN","BPSJZPR",221,0)
 S ZPRS(7)="130^9002313.9208^9002313.92081^9002313.92082"
"RTN","BPSJZPR",222,0)
 S ZPRS(8)="180^9002313.9215^9002313.92151^9002313.92152"
"RTN","BPSJZPR",223,0)
 S ZPRS(9)="200^9002313.9217^9002313.92171^9002313.92172"
"RTN","BPSJZPR",224,0)
 S ZPRS(10)="210^9002313.9218^9002313.92181^9002313.92182"
"RTN","BPSJZPR",225,0)
 S ZPRS(11)="190^9002313.9216^9002313.92161^9002313.92162"
"RTN","BPSJZPR",226,0)
 S ZPRS(12)="220^9002313.9219^9002313.92191^9002313.92192"
"RTN","BPSJZPR",227,0)
 S ZPRS(13)="230^9002313.922^9002313.9221^9002313.9222"
"RTN","BPSJZPR",228,0)
 S ZPRS(14)="240^9002313.9223^9002313.92231^9002313.92232"
"RTN","BPSJZPR",229,0)
 S ZPRS(15)="250^9002313.9224^9002313.92241^9002313.92242"
"RTN","BPSJZPR",230,0)
 S ZPRS(16)="260^9002313.9225^9002313.92251^9002313.92252"
"RTN","BPSJZPR",231,0)
 ;BPS*1*15 - Purchaser and Provider segment added for D.1 - D.9 version
"RTN","BPSJZPR",232,0)
 S ZPRS(17)="270^9002313.9227^9002313.92271^9002313.92272"
"RTN","BPSJZPR",233,0)
 S ZPRS(18)="280^9002313.9228^9002313.92281^9002313.92282"
"RTN","BPSJZPR",234,0)
 ;BPS*1*19 - Intermediary and Last Known 4Rx segments added for E.0 - E.6 version
"RTN","BPSJZPR",235,0)
 S ZPRS(19)="290^9002313.9229^9002313.92291^9002313.92292"
"RTN","BPSJZPR",236,0)
 S ZPRS(37)="300^9002313.923^9002313.9231^9002313.9232"
"RTN","BPSJZPR",237,0)
 Q
"RTN","BPSNCPD1")
0^26^B55779572
"RTN","BPSNCPD1",1,0)
BPSNCPD1 ;BHAM ISC/LJE - Pharmacy API part 2 ;06/16/2004
"RTN","BPSNCPD1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,6,7,8,9,10,11,15,19**;JUN 2004;Build 18
"RTN","BPSNCPD1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSNCPD1",4,0)
 ;
"RTN","BPSNCPD1",5,0)
 ; Call to $$NCPDPQTY^PSSBPSUT supported by IA# 4992
"RTN","BPSNCPD1",6,0)
 ; Call to $$RXRLDT^PSOBPSUT supported by IA# 4701
"RTN","BPSNCPD1",7,0)
 ; Call to PSS^PSO59 supported by IA# 4827
"RTN","BPSNCPD1",8,0)
 ; Call to ^XMD supported by IA# 10070
"RTN","BPSNCPD1",9,0)
 ; Call to PRIORITY^XMXEDIT supported by IA# 2730
"RTN","BPSNCPD1",10,0)
 ;
"RTN","BPSNCPD1",11,0)
 ; Procedure STARRAY - Retrieve information for API call to IB and store in BPSARRY
"RTN","BPSNCPD1",12,0)
 ; Incoming Parameters
"RTN","BPSNCPD1",13,0)
 ;    BRXIEN - Prescription IEN
"RTN","BPSNCPD1",14,0)
 ;    BFILL  - Fill Number
"RTN","BPSNCPD1",15,0)
 ;    BWHERE - RX action
"RTN","BPSNCPD1",16,0)
 ;    BPSARRY  - Array that is built (passed by reference)
"RTN","BPSNCPD1",17,0)
 ;    BPSITE - OUTPATIENT SITE file #59 ien
"RTN","BPSNCPD1",18,0)
 ;    DOS - Date of Service
"RTN","BPSNCPD1",19,0)
 ;    BILLNDC - NDC
"RTN","BPSNCPD1",20,0)
 ; Assumed
"RTN","BPSNCPD1",21,0)
 ;    DFN - Patient IEN
"RTN","BPSNCPD1",22,0)
 ;    DUZ - User IEN
"RTN","BPSNCPD1",23,0)
STARRAY(BRXIEN,BFILL,BWHERE,BPSARRY,BPSITE,DOS,BILLNDC) ;
"RTN","BPSNCPD1",24,0)
 N DRUGIEN,BPARR,BPSARR,QTY
"RTN","BPSNCPD1",25,0)
 D RXAPI^BPSUTIL1(BRXIEN,"6;7;8;17;31","BPARR","I")
"RTN","BPSNCPD1",26,0)
 I BFILL>0 D RXSUBF^BPSUTIL1(BRXIEN,52,52.1,BFILL,"1;1.1;1.2;17","BPARR","I")
"RTN","BPSNCPD1",27,0)
 S BPSARRY("DFN")=DFN
"RTN","BPSNCPD1",28,0)
 S BPSARRY("DAYS SUPPLY")=$S(BFILL=0:$G(BPARR(52,BRXIEN,8,"I")),1:$G(BPARR(52.1,BFILL,1.1,"I")))
"RTN","BPSNCPD1",29,0)
 S BPSARRY("IEN")=BRXIEN
"RTN","BPSNCPD1",30,0)
 S BPSARRY("FILL NUMBER")=BFILL
"RTN","BPSNCPD1",31,0)
 S BPSARRY("NDC")=BILLNDC
"RTN","BPSNCPD1",32,0)
 S (BPSARRY("DRUG"),DRUGIEN)=BPARR(52,BRXIEN,6,"I")
"RTN","BPSNCPD1",33,0)
 S BPSARRY("DEA")=$$DRUGDIE^BPSUTIL1(DRUGIEN,3)
"RTN","BPSNCPD1",34,0)
 S BPSARRY("COST")=$S(BFILL=0:$G(BPARR(52,BRXIEN,17,"I")),1:$G(BPARR(52.1,BFILL,1.2,"I")))
"RTN","BPSNCPD1",35,0)
 S BPSARRY("QTY")=$S(BFILL=0:$G(BPARR(52,BRXIEN,7,"I")),1:$G(BPARR(52.1,BFILL,1,"I")))
"RTN","BPSNCPD1",36,0)
 S BPSARRY("UNITS")=$$DRUGDIE^BPSUTIL1(DRUGIEN,14.5)
"RTN","BPSNCPD1",37,0)
 ; Get the NCPDP quantity and units
"RTN","BPSNCPD1",38,0)
 S QTY=$$NCPDPQTY^PSSBPSUT(DRUGIEN,BPSARRY("QTY"))   ; DBIA# 4992
"RTN","BPSNCPD1",39,0)
 I +QTY>0 D
"RTN","BPSNCPD1",40,0)
 . S BPSARRY("NCPDP QTY")=+QTY           ; NCPDP Quantity
"RTN","BPSNCPD1",41,0)
 . S BPSARRY("NCPDP UNITS")=$P(QTY,U,2)  ; NCPDP Unit
"RTN","BPSNCPD1",42,0)
 S BPSARRY("DOS")=DOS
"RTN","BPSNCPD1",43,0)
 S BPSARRY("RELEASE DATE")=$S(BFILL=0:$G(BPARR(52,BRXIEN,31,"I")),1:$G(BPARR(52.1,BFILL,17,"I")))
"RTN","BPSNCPD1",44,0)
 S BPSARRY("SC/EI OVR")=0
"RTN","BPSNCPD1",45,0)
 ; Determine BPS PHARMACY
"RTN","BPSNCPD1",46,0)
 I $G(BPSITE)>0 S BPSARRY("EPHARM")=$$GETPHARM^BPSUTIL(BPSITE)
"RTN","BPSNCPD1",47,0)
 ;
"RTN","BPSNCPD1",48,0)
 ; Add user so that it is stored correctly in the IB Event Log
"RTN","BPSNCPD1",49,0)
 ;  Note: Auto-Reversals (AREV) and CMOP/OPAI (CR*/PC) use postmaster (.5)
"RTN","BPSNCPD1",50,0)
 I ",AREV,CRLB,CRLX,CRLR,CRRL,PC,"[(","_BWHERE_",") S BPSARRY("USER")=.5
"RTN","BPSNCPD1",51,0)
 E  S BPSARRY("USER")=DUZ
"RTN","BPSNCPD1",52,0)
 Q
"RTN","BPSNCPD1",53,0)
 ;
"RTN","BPSNCPD1",54,0)
 ; Called by BPSNCPDP to display progress of claim
"RTN","BPSNCPD1",55,0)
 ; BRXIEN = Prescription IEN
"RTN","BPSNCPD1",56,0)
 ; BFILL = Fill Number
"RTN","BPSNCPD1",57,0)
 ; REBILL = rebill flag
"RTN","BPSNCPD1",58,0)
 ; REVONLY = reversal only flag
"RTN","BPSNCPD1",59,0)
 ; BPSTART = date/time
"RTN","BPSNCPD1",60,0)
 ; BWHERE  = RX Action (see BPSNCPDP comments above for details)
"RTN","BPSNCPD1",61,0)
 ; BPREQIEN = the BPS REQUESTS (#9002313.77) IEN
"RTN","BPSNCPD1",62,0)
 ; BPSCOB = Primary/Secondary claim indicator
"RTN","BPSNCPD1",63,0)
 ; BPSELIG = Eligibility
"RTN","BPSNCPD1",64,0)
 ; IEN59 = RXIEN
"RTN","BPSNCPD1",65,0)
 ; WFLG = Write flag (1-Write Messages, 2-Do not display messages (this will still
"RTN","BPSNCPD1",66,0)
 ;                    process until the claim completes or ECME timeout is hit).
"RTN","BPSNCPD1",67,0)
 ;       
"RTN","BPSNCPD1",68,0)
STATUS(BRXIEN,BFILL,REBILL,REVONLY,BPSTART,BWHERE,BPREQIEN,BPSCOB,BPSELIG,IEN59,WFLG) ;
"RTN","BPSNCPD1",69,0)
 ; Initialization
"RTN","BPSNCPD1",70,0)
 N CERTUSER,BPSTO,END,IBSEQ,BPQ,CLMSTAT,OCLMSTAT,BPACTTYP
"RTN","BPSNCPD1",71,0)
 ;
"RTN","BPSNCPD1",72,0)
 S BPACTTYP=$$ACTTYPE^BPSOSRX5(BWHERE)
"RTN","BPSNCPD1",73,0)
 S (CLMSTAT,OCLMSTAT)=0
"RTN","BPSNCPD1",74,0)
 ;
"RTN","BPSNCPD1",75,0)
 ; Set CERTUSER to true if this user is the certifier
"RTN","BPSNCPD1",76,0)
 S CERTUSER=^BPS(9002313.99,1,"CERTIFIER")=DUZ
"RTN","BPSNCPD1",77,0)
 ;
"RTN","BPSNCPD1",78,0)
 ; Write Rebill and Status Messages
"RTN","BPSNCPD1",79,0)
 ;
"RTN","BPSNCPD1",80,0)
 I WFLG=1 W !!,"Claim Status: "
"RTN","BPSNCPD1",81,0)
 I REBILL,BPACTTYP="UC",WFLG=1 W !,"Reversing and Rebilling a previously submitted claim..." ;,!,"Reversing..."
"RTN","BPSNCPD1",82,0)
 I REBILL,BPACTTYP="U",WFLG=1 W !,"Reversing..."
"RTN","BPSNCPD1",83,0)
 ;
"RTN","BPSNCPD1",84,0)
 ; Get the ECME Timeout and set the display timeout
"RTN","BPSNCPD1",85,0)
 S BPSTO=$$GET1^DIQ(9002313.99,"1,",3.01),END=$S(CERTUSER:50,$G(BPSTO)]"":BPSTO,1:5)
"RTN","BPSNCPD1",86,0)
 ;
"RTN","BPSNCPD1",87,0)
 ; For remaining time, loop through and display status
"RTN","BPSNCPD1",88,0)
 S BPQ=0
"RTN","BPSNCPD1",89,0)
 F IBSEQ=1:1:END D  Q:BPQ=1
"RTN","BPSNCPD1",90,0)
 . H 1
"RTN","BPSNCPD1",91,0)
 . ;
"RTN","BPSNCPD1",92,0)
 . ; Get status of resubmit, last update, and claim status
"RTN","BPSNCPD1",93,0)
 . S CLMSTAT=$$STATUS^BPSOSRX(BRXIEN,BFILL,1,$G(BPREQIEN),BPSCOB)
"RTN","BPSNCPD1",94,0)
 . ;
"RTN","BPSNCPD1",95,0)
 . ; Format status message
"RTN","BPSNCPD1",96,0)
 . S CLMSTAT=$P(CLMSTAT,"^",1)_$S($P(CLMSTAT,"^",1)["IN PROGRESS":"-"_$P(CLMSTAT,"^",3),1:"")
"RTN","BPSNCPD1",97,0)
 . ;
"RTN","BPSNCPD1",98,0)
 . ;If the status has changed, display the new message
"RTN","BPSNCPD1",99,0)
 . I OCLMSTAT'=CLMSTAT W:WFLG=1 !,CLMSTAT S OCLMSTAT=CLMSTAT I CLMSTAT="E REJECTED",$G(BPSELIG)'="V",WFLG=1 D
"RTN","BPSNCPD1",100,0)
 .. N BPSRTEXT,BPSRESP,BPSPOS,X
"RTN","BPSNCPD1",101,0)
 .. S BPSRESP=$P($G(^BPST(IEN59,0)),"^",5) Q:'BPSRESP
"RTN","BPSNCPD1",102,0)
 .. S BPSPOS=+$O(^BPSR(BPSRESP,1000,":"),-1) Q:'BPSPOS
"RTN","BPSNCPD1",103,0)
 .. D REJTEXT^BPSOS03(BPSRESP,BPSPOS,.BPSRTEXT)
"RTN","BPSNCPD1",104,0)
 .. S X=0 F  S X=$O(BPSRTEXT(X)) Q:'X  W !?4,$P(BPSRTEXT(X),":")," - ",$P(BPSRTEXT(X),":",2)
"RTN","BPSNCPD1",105,0)
 . ;
"RTN","BPSNCPD1",106,0)
 . ; If the status is not IN PROGRESS, then we are done
"RTN","BPSNCPD1",107,0)
 . I CLMSTAT'["IN PROGRESS",'$D(^BPS(9002313.77,"D",BRXIEN,BFILL,BPSCOB)) S BPQ=1
"RTN","BPSNCPD1",108,0)
 I WFLG=1 W !
"RTN","BPSNCPD1",109,0)
 Q
"RTN","BPSNCPD1",110,0)
 ;
"RTN","BPSNCPD1",111,0)
BULL(RXI,RXR,SITE,DFN,PATNAME,BPST,BPSERTXT,BPSRESP,COB) ; Send a Bulletin to the OPECC
"RTN","BPSNCPD1",112,0)
 ; Input:
"RTN","BPSNCPD1",113,0)
 ;   RXI      -> IEN of the Rx
"RTN","BPSNCPD1",114,0)
 ;   RXR      -> Refill #
"RTN","BPSNCPD1",115,0)
 ;   SITE     -> Site IEN
"RTN","BPSNCPD1",116,0)
 ;   DFN      -> Patient IEN
"RTN","BPSNCPD1",117,0)
 ;   PATNAME  -> Patient name
"RTN","BPSNCPD1",118,0)
 ;   BPST     -> TRICARE/CHAMPVA indicator (T = TRICARE, C = CHAMPVA)
"RTN","BPSNCPD1",119,0)
 ;   BPSERTXT -> Claim status/error text
"RTN","BPSNCPD1",120,0)
 ;   BPSRESP  -> Response flag; used in BULL1 below to determine
"RTN","BPSNCPD1",121,0)
 ;               whether to add addition text to the message.
"RTN","BPSNCPD1",122,0)
 ;   COB      -> Coordination of Benefits indicator
"RTN","BPSNCPD1",123,0)
 ;
"RTN","BPSNCPD1",124,0)
 ; If the Rx-fill has been released, then don't send a message (esg - 12/20/12 - BPS*1*15)
"RTN","BPSNCPD1",125,0)
 I $$RXRLDT^PSOBPSUT($G(RXI),$G(RXR)) G BULLX      ; DBIA# 4701
"RTN","BPSNCPD1",126,0)
 ;
"RTN","BPSNCPD1",127,0)
 N BTXT,XMSUB,XMY,XMTEXT,XMDUZ,SSN,X,SITENM
"RTN","BPSNCPD1",128,0)
 I $G(SITE) D
"RTN","BPSNCPD1",129,0)
 . K ^TMP($J,"BPSARR")
"RTN","BPSNCPD1",130,0)
 . D PSS^PSO59(SITE,,"BPSARR")               ; DBIA# 4827
"RTN","BPSNCPD1",131,0)
 . S SITENM=$G(^TMP($J,"BPSARR",SITE,.01))
"RTN","BPSNCPD1",132,0)
 I $G(DFN) D
"RTN","BPSNCPD1",133,0)
 . S X=$P($G(^DPT(DFN,0)),U,9)
"RTN","BPSNCPD1",134,0)
 . S SSN=$E(X,$L(X)-3,$L(X))
"RTN","BPSNCPD1",135,0)
 ;
"RTN","BPSNCPD1",136,0)
 ; Need to do in the background
"RTN","BPSNCPD1",137,0)
 ;   Mailman calls CMOP which calls EN^BPSNCPDP.
"RTN","BPSNCPD1",138,0)
 ;   If BPSNCPDP* (same process) then calls mailman, it gets confused.
"RTN","BPSNCPD1",139,0)
 N ZTIO,ZTRTN,ZTDTH,ZTSAVE,ZTDESC
"RTN","BPSNCPD1",140,0)
 N %,%H,%I,X
"RTN","BPSNCPD1",141,0)
 D NOW^%DTC
"RTN","BPSNCPD1",142,0)
 S ZTIO="",ZTDTH=%,ZTDESC="IN PROGRESS BULLETIN"
"RTN","BPSNCPD1",143,0)
 S (ZTSAVE("RXR"),ZTSAVE("RXI"),ZTSAVE("BPSERTXT"))="",ZTSAVE("BPSRESP")=""
"RTN","BPSNCPD1",144,0)
 S (ZTSAVE("SITENM"),ZTSAVE("PATNAME"),ZTSAVE("SSN"),ZTSAVE("BPST"))=""
"RTN","BPSNCPD1",145,0)
 S ZTSAVE("COB")=""
"RTN","BPSNCPD1",146,0)
 S ZTRTN="BULL1^BPSNCPD1"
"RTN","BPSNCPD1",147,0)
 D ^%ZTLOAD
"RTN","BPSNCPD1",148,0)
BULLX ;
"RTN","BPSNCPD1",149,0)
 Q
"RTN","BPSNCPD1",150,0)
 ;
"RTN","BPSNCPD1",151,0)
 ;
"RTN","BPSNCPD1",152,0)
BULL1 ;
"RTN","BPSNCPD1",153,0)
 N BPSRX,BPSL,XMDUZ,XMY,BPSX,XMZ,XMSUB,BPTYPE,BPSUB,IEN59,ECMENUM
"RTN","BPSNCPD1",154,0)
 S BPSL=0,BPSRX=$$RXAPI1^BPSUTIL1(RXI,.01,"E")
"RTN","BPSNCPD1",155,0)
 S BPTYPE=$S($G(BPST)="T":"TRICARE",$G(BPST)="C":"CHAMPVA",1:"")
"RTN","BPSNCPD1",156,0)
 S ECMENUM=""
"RTN","BPSNCPD1",157,0)
 S IEN59=$$IEN59^BPSOSRX(RXI,RXR,COB)
"RTN","BPSNCPD1",158,0)
 I IEN59 S ECMENUM=$$ECMENUM^BPSSCRU2(IEN59)
"RTN","BPSNCPD1",159,0)
 S XMSUB=BPTYPE_" RX not processed for site "_$G(SITENM)
"RTN","BPSNCPD1",160,0)
 I $G(BPST)]"" D
"RTN","BPSNCPD1",161,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="Prescription "_BPSRX_" for fill number "_(+RXR)_" could not be filled because of a"
"RTN","BPSNCPD1",162,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="delay in processing the third party claim. The Rx was placed on suspense"
"RTN","BPSNCPD1",163,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="because "_BPTYPE_" Rx's may not be filled unless they have a payable third"
"RTN","BPSNCPD1",164,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="party claim."
"RTN","BPSNCPD1",165,0)
 . S BPSL=BPSL+1,BPSX(BPSL)=" "
"RTN","BPSNCPD1",166,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="Please monitor the progress of the claim.  If the claim is eventually"
"RTN","BPSNCPD1",167,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="returned as payable, the Rx label will be printed when Print from Suspense"
"RTN","BPSNCPD1",168,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="occurs or it may be Pulled Early from Suspense.  If a reject occurs, the"
"RTN","BPSNCPD1",169,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="Rx will be placed in the appropriate section of the medication profile"
"RTN","BPSNCPD1",170,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="and placed on the Pharmacy Reject Worklist."
"RTN","BPSNCPD1",171,0)
 ;
"RTN","BPSNCPD1",172,0)
 I $G(BPSERTXT)'="" S BPSL=BPSL+1,BPSX(BPSL)=BPSERTXT
"RTN","BPSNCPD1",173,0)
 S BPSL=BPSL+1,BPSX(BPSL)=" "
"RTN","BPSNCPD1",174,0)
 I $G(BPSRESP)'=4 D
"RTN","BPSNCPD1",175,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="For more information on this prescription's activity, please view the Claim Log"
"RTN","BPSNCPD1",176,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="within View ePharmacy Rx (VER)."
"RTN","BPSNCPD1",177,0)
 . S BPSL=BPSL+1,BPSX(BPSL)=" "
"RTN","BPSNCPD1",178,0)
 S BPSL=BPSL+1,BPSX(BPSL)=BPTYPE_" Patient Name: "_$G(PATNAME)_" ("_$G(SSN)_")"
"RTN","BPSNCPD1",179,0)
 S BPSL=BPSL+1,BPSX(BPSL)="Prescription: "_BPSRX_"  Fill: "_(+RXR)
"RTN","BPSNCPD1",180,0)
 S BPSL=BPSL+1,BPSX(BPSL)="ECME: "_ECMENUM
"RTN","BPSNCPD1",181,0)
 S BPSL=BPSL+1,BPSX(BPSL)="Drug Name: "_$$RXAPI1^BPSUTIL1(RXI,6,"E")
"RTN","BPSNCPD1",182,0)
 ;
"RTN","BPSNCPD1",183,0)
 S XMDUZ="BPS PACKAGE",XMTEXT="BPSX("
"RTN","BPSNCPD1",184,0)
 ;
"RTN","BPSNCPD1",185,0)
 S BPSUB=$S(BPTYPE="TRICARE":"G.BPS TRICARE",BPTYPE="CHAMPVA":"G.BPS CHAMPVA",1:"G.BPS OPECC")
"RTN","BPSNCPD1",186,0)
 S XMY(BPSUB)=""
"RTN","BPSNCPD1",187,0)
 ;
"RTN","BPSNCPD1",188,0)
 I $G(DUZ)'<1 S XMY(DUZ)=""
"RTN","BPSNCPD1",189,0)
 D ^XMD       ; IA# 10070
"RTN","BPSNCPD1",190,0)
 I $G(BPST)]"",$G(XMZ) D PRIORITY^XMXEDIT(XMZ)    ; IA# 2730
"RTN","BPSNCPD1",191,0)
 Q
"RTN","BPSNCPD3")
0^12^B64625279
"RTN","BPSNCPD3",1,0)
BPSNCPD3 ;BHAM ISC/LJE - Continuation of BPSNCPDP - DUR HANDLING ;06/16/2004
"RTN","BPSNCPD3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,6,7,8,10,11,15,19**;JUN 2004;Build 18
"RTN","BPSNCPD3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSNCPD3",4,0)
 ;
"RTN","BPSNCPD3",5,0)
 ; Due to space considerations, these comments were moved from BPSNPCPD
"RTN","BPSNCPD3",6,0)
 ;   to this routine.
"RTN","BPSNCPD3",7,0)
 ;
"RTN","BPSNCPD3",8,0)
 ; ------------------ Beginning of BPSNCPDP comments ------------------
"RTN","BPSNCPD3",9,0)
 ;Input
"RTN","BPSNCPD3",10,0)
 ; BRXIEN = Prescription IEN
"RTN","BPSNCPD3",11,0)
 ; BFILL  = Fill Number
"RTN","BPSNCPD3",12,0)
 ; DOS    = Date of Service
"RTN","BPSNCPD3",13,0)
 ; BWHERE (RX Action)
"RTN","BPSNCPD3",14,0)
 ;    AREV = Auto-Reversal
"RTN","BPSNCPD3",15,0)
 ;    BB   = Back Billing
"RTN","BPSNCPD3",16,0)
 ;    CRLB = CMOP/OPAI Release & Rebill
"RTN","BPSNCPD3",17,0)
 ;    CRLR = CMOP/OPAI Release & Reverse (successful release)
"RTN","BPSNCPD3",18,0)
 ;    CRLX = CMOP/OPAI unsuccessful release & reverse
"RTN","BPSNCPD3",19,0)
 ;    CRRL = CMOP/OPAI Release - Original claim not paid, submit another claim, no reversal
"RTN","BPSNCPD3",20,0)
 ;    DC   = Discontinue - only reverse un-released PAYABLE DC's, release date check
"RTN","BPSNCPD3",21,0)
 ;           should be in calling routine.
"RTN","BPSNCPD3",22,0)
 ;    DE   = Delete
"RTN","BPSNCPD3",23,0)
 ;    ED   = Edit (includes RX release with NDC edit)
"RTN","BPSNCPD3",24,0)
 ;    ERES = Resubmit from ECME user screen
"RTN","BPSNCPD3",25,0)
 ;    EREV = Reversal from ECME user screen
"RTN","BPSNCPD3",26,0)
 ;    HLD  = Put prescription on Hold
"RTN","BPSNCPD3",27,0)
 ;    OF   = Original Fill
"RTN","BPSNCPD3",28,0)
 ;    P2   = Original submission from PRO Option, no reversal
"RTN","BPSNCPD3",29,0)
 ;    P2S  = Resubmit from PRO Option
"RTN","BPSNCPD3",30,0)
 ;    PC   = Pull CMOPs
"RTN","BPSNCPD3",31,0)
 ;    PE   = Pull early from suspense
"RTN","BPSNCPD3",32,0)
 ;    PL   = Pull local from suspense
"RTN","BPSNCPD3",33,0)
 ;    PP   = Pull RX (PP) action from Patient Prescription Processing option
"RTN","BPSNCPD3",34,0)
 ;    RF   = Refill
"RTN","BPSNCPD3",35,0)
 ;    RN   = Renew
"RTN","BPSNCPD3",36,0)
 ;    RRL  = Release - Original claim not paid, submit another claim, no reversal
"RTN","BPSNCPD3",37,0)
 ;    RS   = Return-to-Stock
"RTN","BPSNCPD3",38,0)
 ; BILLNDC = Valid NDC# with format 5-4-2
"RTN","BPSNCPD3",39,0)
 ; REVREAS = Reversal Reason
"RTN","BPSNCPD3",40,0)
 ; DURREC  = String of up to three sets of DUR info. Sets are delimited with "~". Each set consists of three "^" pieces:
"RTN","BPSNCPD3",41,0)
 ;             Reason for Service Code
"RTN","BPSNCPD3",42,0)
 ;             Professional Service Code
"RTN","BPSNCPD3",43,0)
 ;             Result of Service Code
"RTN","BPSNCPD3",44,0)
 ; BPOVRIEN = Pointer to BPS NCPDP OVERIDE file.  This parameter will 
"RTN","BPSNCPD3",45,0)
 ;            only be passed if there are overrides entered by the
"RTN","BPSNCPD3",46,0)
 ;            user via the Resubmit with Edits (RED) option in the 
"RTN","BPSNCPD3",47,0)
 ;            user screen.
"RTN","BPSNCPD3",48,0)
 ; BPSAUTH  = Prior authorization code (Prior auth code^Prior auth number)
"RTN","BPSNCPD3",49,0)
 ; BPSCLARF = Submission Clarification Code (external value from #9002313.25), entered by
"RTN","BPSNCPD3",50,0)
 ;            pharmacist and passed by Outpatient Pharmacy to ECME to put into the claim  
"RTN","BPSNCPD3",51,0)
 ; BPCOBIND = (optional, default is Primary) for COB indicators - so when the API is called for the particular
"RTN","BPSNCPD3",52,0)
 ;            COB claim the BPSNCPDP can handle it.
"RTN","BPSNCPD3",53,0)
 ; BPJOBFLG = (optional, default is "F") B - if is called by unqueueing logic in background, F - by other (foreground) process, 
"RTN","BPSNCPD3",54,0)
 ; BPREQIEN = (optional) ien of BPS REQUEST file record, that needs to be unqueued 
"RTN","BPSNCPD3",55,0)
 ; BPSCLOSE = (optional) local array used with BWHERE="EREV" only, if the user had chosen to close the claim after reversal
"RTN","BPSNCPD3",56,0)
 ;   if claim needs to be closed then
"RTN","BPSNCPD3",57,0)
 ;   BPSCLOSE("CLOSE AFT REV")=1
"RTN","BPSNCPD3",58,0)
 ;   BPSCLOSE("CLOSE AFT REV REASON")=<#356.8 ien>
"RTN","BPSNCPD3",59,0)
 ;   BPSCLOSE("CLOSE AFT REV COMMENT")=<some text>
"RTN","BPSNCPD3",60,0)
 ; BPSPLAN  = (optional) IEN of the entry in the GROUP INSURANCE PLAN file (#355.3)
"RTN","BPSNCPD3",61,0)
 ; BPSPRDAT = (optional) local array passed by reference. Contains primary claim data needed to submit a secondary claim.
"RTN","BPSNCPD3",62,0)
 ;            Format:  BPSPRDAT(NCPDP field)
"RTN","BPSNCPD3",63,0)
 ; BPSRTYPE = (optional) rate type ( ien of the file #399.3)
"RTN","BPSNCPD3",64,0)
 ; BPSDELAY = Delay Reason Code (IEN of BPS NCPDP DELAY REASON CODE (#9002313.29), entered by the user
"RTN","BPSNCPD3",65,0)
 ;            in the Back Billing option of Claims Tracking and passed to ECME to put into the claim.
"RTN","BPSNCPD3",66,0)
 ; 
"RTN","BPSNCPD3",67,0)
 ;Output (RESPONSE^MESSAGE^ELIGIBILITY^CLAIMSTATUS^COB^RXCOB^INSURANCE)
"RTN","BPSNCPD3",68,0)
 ; RESPONSE
"RTN","BPSNCPD3",69,0)
 ;    0  Submitted through ECME
"RTN","BPSNCPD3",70,0)
 ;    1  No submission through ECME
"RTN","BPSNCPD3",71,0)
 ;    2  IB not billable
"RTN","BPSNCPD3",72,0)
 ;    3  Claim was closed, not submitted (RTS/Deletes)
"RTN","BPSNCPD3",73,0)
 ;    4  Unable to queue claim
"RTN","BPSNCPD3",74,0)
 ;    5  Incorrect information supplied to ECME
"RTN","BPSNCPD3",75,0)
 ;    6  Inactive ECME - Primarily used for TRICARE/CHAMPVA to say ok to process rx
"RTN","BPSNCPD3",76,0)
 ;    10 Reversal but no resubmit
"RTN","BPSNCPD3",77,0)
 ; MESSAGE = Message associated with the response (error/submitted)
"RTN","BPSNCPD3",78,0)
 ; ELIGIBILITY = V - Veteran, T - TRICARE, C - CHAMPVA
"RTN","BPSNCPD3",79,0)
 ; CLAIMSTATUS = claim status (null or IN PROGRESS/E PAYABLE/etc...)
"RTN","BPSNCPD3",80,0)
 ; COB  = Coordination Of Benefit indicator of the insurance as it is stored in the PATIENT file: 1-primary, 2-secondary, 3-tertiary
"RTN","BPSNCPD3",81,0)
 ; RXCOB =  the payer sequence indicator of the claim which was sent to the payer as a result of this call: 1-primary, 2-secondary)
"RTN","BPSNCPD3",82,0)
 ; INSURANCE = Name of the insurance company that was billed as a result of this call
"RTN","BPSNCPD3",83,0)
 ; 
"RTN","BPSNCPD3",84,0)
 ; ----------------- End of BPSNCPDP comments ----------------------
"RTN","BPSNCPD3",85,0)
 ;
"RTN","BPSNCPD3",86,0)
 ; ----------------- DUR1 ------------------------------------------
"RTN","BPSNCPD3",87,0)
 ; DUR1 is called by PSO to get the reject information
"RTN","BPSNCPD3",88,0)
 ;
"RTN","BPSNCPD3",89,0)
 ;
"RTN","BPSNCPD3",90,0)
 ; IA 4560 supports OP's use of this procedure
"RTN","BPSNCPD3",91,0)
 ;
"RTN","BPSNCPD3",92,0)
 ; Function call for DUR INFORMATION 
"RTN","BPSNCPD3",93,0)
 ; Parameters: BRXIEN = Prescription IEN
"RTN","BPSNCPD3",94,0)
 ;             BFILL = fill number
"RTN","BPSNCPD3",95,0)
 ;             DUR = DUR info passed back
"RTN","BPSNCPD3",96,0)
 ;             ERROR = error passed back
"RTN","BPSNCPD3",97,0)
 ;             BPRXCOB = payer sequence
"RTN","BPSNCPD3",98,0)
 ; Note:
"RTN","BPSNCPD3",99,0)
 ;    DUR("BILLED")=0 if ecme off for pharmacy or no transaction in ECME
"RTN","BPSNCPD3",100,0)
 ;    DUR(<Insurance counter>,"BILLED")=1 if billed through ecme
"RTN","BPSNCPD3",101,0)
DUR1(BRXIEN,BFILL,DUR,ERROR,BPRXCOB) ;
"RTN","BPSNCPD3",102,0)
 N SITE,IEN59,DUR1,DURIEN
"RTN","BPSNCPD3",103,0)
 I '$G(BRXIEN) S DUR("BILLED")=0 Q
"RTN","BPSNCPD3",104,0)
 I $G(BFILL)="" S DUR("BILLED")=0 Q
"RTN","BPSNCPD3",105,0)
 S BPRXCOB=+$G(BPRXCOB)
"RTN","BPSNCPD3",106,0)
 I BPRXCOB=0 S BPRXCOB=1 ;default is Primary
"RTN","BPSNCPD3",107,0)
 ;
"RTN","BPSNCPD3",108,0)
 ; Get Site info and check is ECME is turned on
"RTN","BPSNCPD3",109,0)
 ; If not, set DUR("BILLED")=0 and quit
"RTN","BPSNCPD3",110,0)
 I '$G(BFILL) S SITE=$$RXAPI1^BPSUTIL1(BRXIEN,20,"I")
"RTN","BPSNCPD3",111,0)
 I $G(BFILL) S SITE=$$RXSUBF1^BPSUTIL1(BRXIEN,52,52.1,BFILL,8,"I")
"RTN","BPSNCPD3",112,0)
 I '$$ECMEON^BPSUTIL(SITE) S DUR("BILLED")=0 Q
"RTN","BPSNCPD3",113,0)
 ;
"RTN","BPSNCPD3",114,0)
 ; Set up the Transaction IEN
"RTN","BPSNCPD3",115,0)
 S IEN59=$$IEN59^BPSOSRX(BRXIEN,BFILL,BPRXCOB)
"RTN","BPSNCPD3",116,0)
 I IEN59="" S DUR("BILLED")=0 Q
"RTN","BPSNCPD3",117,0)
 ;
"RTN","BPSNCPD3",118,0)
 ; If the transaction record does not exist, set DUR("BILLED")=0 and quit
"RTN","BPSNCPD3",119,0)
 I '$D(^BPST(IEN59)) S DUR("BILLED")=0 Q
"RTN","BPSNCPD3",120,0)
 ;
"RTN","BPSNCPD3",121,0)
 S DUR(BPRXCOB,"BILLED")=1
"RTN","BPSNCPD3",122,0)
 ;
"RTN","BPSNCPD3",123,0)
 S DUR(BPRXCOB,"ELIGBLT")=$P($G(^BPST(IEN59,9)),U,4)
"RTN","BPSNCPD3",124,0)
 ; Get Insurance Info and set into DUR array
"RTN","BPSNCPD3",125,0)
 S DUR(BPRXCOB,"INSURANCE POINTER")=$$GET1^DIQ(9002313.59902,"1,"_IEN59_",",902.33,"I") ; Insurance Company IEN
"RTN","BPSNCPD3",126,0)
 D GETS^DIQ(9002313.59902,"1,"_IEN59_",","902.05;902.06;902.24;902.25;902.26","E","DUR1","ERROR")
"RTN","BPSNCPD3",127,0)
 S DUR(BPRXCOB,"INSURANCE NAME")=$G(DUR1(9002313.59902,"1,"_IEN59_",",902.24,"E"))  ; Insurance Company Name
"RTN","BPSNCPD3",128,0)
 S DUR(BPRXCOB,"GROUP NUMBER")=$G(DUR1(9002313.59902,"1,"_IEN59_",",902.05,"E"))    ; Insurance Group Number
"RTN","BPSNCPD3",129,0)
 S DUR(BPRXCOB,"GROUP NAME")=$G(DUR1(9002313.59902,"1,"_IEN59_",",902.25,"E"))      ; Insurance Group Name
"RTN","BPSNCPD3",130,0)
 S DUR(BPRXCOB,"PLAN CONTACT")=$G(DUR1(9002313.59902,"1,"_IEN59_",",902.26,"E"))    ; Insurance Contact Number
"RTN","BPSNCPD3",131,0)
 S DUR(BPRXCOB,"CARDHOLDER ID")=$G(DUR1(9002313.59902,"1,"_IEN59_",",902.06,"E"))   ; Cardholder ID
"RTN","BPSNCPD3",132,0)
 ;
"RTN","BPSNCPD3",133,0)
 ; Get Response IEN and Data
"RTN","BPSNCPD3",134,0)
 S DURIEN="",DURIEN=$P(^BPST(IEN59,0),"^",5)
"RTN","BPSNCPD3",135,0)
 D DURRESP(DURIEN,.DUR,BPRXCOB) ; Note: In the future, we may need to get/store DURIEN for each COB
"RTN","BPSNCPD3",136,0)
 Q
"RTN","BPSNCPD3",137,0)
 ;
"RTN","BPSNCPD3",138,0)
DURRESP(DURIEN,DUR,BPRXCOB) ;
"RTN","BPSNCPD3",139,0)
 ;Input Variables:
"RTN","BPSNCPD3",140,0)
 ; DURIEN - Claim Response IEN. Pointer to the BPS RESPONSES File #9002313.03
"RTN","BPSNCPD3",141,0)
 ; BPRXCOB - (Optional) The Payer Sequence:
"RTN","BPSNCPD3",142,0)
 ;   1 - Primary (default)
"RTN","BPSNCPD3",143,0)
 ;   2 - Secondary
"RTN","BPSNCPD3",144,0)
 ;
"RTN","BPSNCPD3",145,0)
 ;Output Variables:
"RTN","BPSNCPD3",146,0)
 ; DUR - Array of DUR related information for a specific claim response in the
"RTN","BPSNCPD3",147,0)
 ;   BPS RESPONSES file in the following format (INSN is the Payer Sequence):
"RTN","BPSNCPD3",148,0)
 ;
"RTN","BPSNCPD3",149,0)
 ; DUR(INSN,"RESPONSE IEN") - Pointer to the RESPONSE file (#9002313.03) for
"RTN","BPSNCPD3",150,0)
 ;   the claim submission
"RTN","BPSNCPD3",151,0)
 ; DUR(INSN,"MESSAGE") - The Transmission level specific data, Message field 504
"RTN","BPSNCPD3",152,0)
 ; DUR(INSN,"PAYER MESSAGE") - Message returned from the payer in the Transaction
"RTN","BPSNCPD3",153,0)
 ;   level
"RTN","BPSNCPD3",154,0)
 ; DUR(INSN,"STATUS") - Status of the claim (i.e. REJECTED CLAIM, PAYABLE)
"RTN","BPSNCPD3",155,0)
 ;
"RTN","BPSNCPD3",156,0)
 ; The following four fields are redundant with the fields in the DUR PPS
"RTN","BPSNCPD3",157,0)
 ; array but are provided for backwards compatibility.
"RTN","BPSNCPD3",158,0)
 ; DUR(INSN,"REASON") - Reason for Service Code pointer to BPS NCPDP REASON FOR
"RTN","BPSNCPD3",159,0)
 ;   SERVICE CODE file (#9002313.23)
"RTN","BPSNCPD3",160,0)
 ; DUR(INSN,"PREV FILL DATE") - Plan's Previous Fill Date
"RTN","BPSNCPD3",161,0)
 ; DUR(INSN,"DUR FREE TEXT DESC") - Drug Utilization Review (DUR) description
"RTN","BPSNCPD3",162,0)
 ;   and/or claims rejection free text information from the payer
"RTN","BPSNCPD3",163,0)
 ; DUR(INSN,"DUR ADD MSG TEXT") - Drug Utilization Review (DUR) additional free
"RTN","BPSNCPD3",164,0)
 ;   text information from the payer
"RTN","BPSNCPD3",165,0)
 ;
"RTN","BPSNCPD3",166,0)
 ; The following fields are from the DUR PPS RESPONSE multiple.
"RTN","BPSNCPD3",167,0)
 ; DUR(INSN,"DUR PPS",SEQ,"DUR PPS RESPONSE") - Total number of DUR PPS
"RTN","BPSNCPD3",168,0)
 ;   responses from the payer
"RTN","BPSNCPD3",169,0)
 ; DUR(INSN,"DUR PPS",SEQ,"REASON FOR SERVICE CODE") - Code identifying the
"RTN","BPSNCPD3",170,0)
 ;   type of utilization conflict detected or the reason for the pharmacist
"RTN","BPSNCPD3",171,0)
 ;   professional service
"RTN","BPSNCPD3",172,0)
 ; DUR(INSN,"DUR PPS",SEQ,"CLINICAL SIGNIFICANCE CODE") - Code identifying
"RTN","BPSNCPD3",173,0)
 ;   the significance or severity level of a clinical event as contained
"RTN","BPSNCPD3",174,0)
 ;   in the originating data base
"RTN","BPSNCPD3",175,0)
 ; DUR(INSN,"DUR PPS",SEQ,"OTHER PHARMACY INDICATOR") - Code for the type of
"RTN","BPSNCPD3",176,0)
 ;   pharmacy dispensing the conflicting drug
"RTN","BPSNCPD3",177,0)
 ; DUR(INSN,"DUR PPS",SEQ,"PREVIOUS DATE OF FILL") - Date prescription was
"RTN","BPSNCPD3",178,0)
 ;   previously filled
"RTN","BPSNCPD3",179,0)
 ; DUR(INSN,"DUR PPS",SEQ,"QUANTITY OF PREVIOUS FILL") - Amount expressed in
"RTN","BPSNCPD3",180,0)
 ;   metric decimal units of the conflicting agent that was previously filled
"RTN","BPSNCPD3",181,0)
 ; DUR(INSN,"DUR PPS",SEQ,"DATABASE INDICATOR") - Code identifying the source
"RTN","BPSNCPD3",182,0)
 ;   of drug information used for DUR processing
"RTN","BPSNCPD3",183,0)
 ; DUR(INSN,"DUR PPS",SEQ,"OTHER PRESCRIBER INDICATOR") - Code comparing the
"RTN","BPSNCPD3",184,0)
 ;   prescriber of the current prescription to the prescriber of the previously
"RTN","BPSNCPD3",185,0)
 ;   filled conflicting prescription
"RTN","BPSNCPD3",186,0)
 ; DUR(INSN,"DUR PPS",SEQ,"DUR FREE TEXT MESSAGE") - Text that provides
"RTN","BPSNCPD3",187,0)
 ;   additional detail regarding a DUR conflict
"RTN","BPSNCPD3",188,0)
 ; DUR(INSN,"DUR PPS",SEQ,"DUR ADDITIONAL TEXT") - Descriptive information that
"RTN","BPSNCPD3",189,0)
 ;   further defines the referenced DUR alert
"RTN","BPSNCPD3",190,0)
 ; DUR(INSN,"REJ CODE LST") - List of rejection code(s) returned by the payer
"RTN","BPSNCPD3",191,0)
 ;   separated by commas (i.e. 79,14)
"RTN","BPSNCPD3",192,0)
 ; DUR(INSN,"REJ CODES",SEQ,REJ CODE) - Array of rejection code descriptions
"RTN","BPSNCPD3",193,0)
 ;   where REJ CODE correlates to DUR(INSN,"REJ CODE LST") value(s) and SEQ
"RTN","BPSNCPD3",194,0)
 ;   equals a sequential number
"RTN","BPSNCPD3",195,0)
 ;
"RTN","BPSNCPD3",196,0)
 I '$G(DURIEN) Q
"RTN","BPSNCPD3",197,0)
 S BPRXCOB=+$G(BPRXCOB)
"RTN","BPSNCPD3",198,0)
 I BPRXCOB=0 S BPRXCOB=1 ;default is Primary
"RTN","BPSNCPD3",199,0)
 N ADDMESS,I,DUR1,CLMIEN
"RTN","BPSNCPD3",200,0)
 S DUR(BPRXCOB,"RESPONSE IEN")=DURIEN
"RTN","BPSNCPD3",201,0)
 ;
"RTN","BPSNCPD3",202,0)
 ;Get BIN from claim
"RTN","BPSNCPD3",203,0)
 S CLMIEN=$$GET1^DIQ(9002313.03,DURIEN,.01,"I")
"RTN","BPSNCPD3",204,0)
 S DUR(BPRXCOB,"BIN")=$$GET1^DIQ(9002313.02,CLMIEN_",",101) ; BIN Number
"RTN","BPSNCPD3",205,0)
 ;
"RTN","BPSNCPD3",206,0)
 ; Get the Transmission specific data (Message)
"RTN","BPSNCPD3",207,0)
 S DUR(BPRXCOB,"MESSAGE")=$$GET1^DIQ(9002313.03,DURIEN_",",504,"E")
"RTN","BPSNCPD3",208,0)
 ;
"RTN","BPSNCPD3",209,0)
 ; Get the Additional Message Information from the transaction
"RTN","BPSNCPD3",210,0)
 D ADDMESS^BPSSCRLG(DURIEN,1,.ADDMESS)
"RTN","BPSNCPD3",211,0)
 M DUR(BPRXCOB,"PAYER MESSAGE")=ADDMESS
"RTN","BPSNCPD3",212,0)
 ;
"RTN","BPSNCPD3",213,0)
 ; Get the other transaction level data
"RTN","BPSNCPD3",214,0)
 D GETS^DIQ(9002313.0301,"1,"_DURIEN_",","501;567.01*","E","DUR1","ERROR")
"RTN","BPSNCPD3",215,0)
 S DUR(BPRXCOB,"STATUS")=$G(DUR1(9002313.0301,"1,"_DURIEN_",",501,"E"))                  ;Status of Response
"RTN","BPSNCPD3",216,0)
 ;
"RTN","BPSNCPD3",217,0)
 ; The following four fields are redundant with the fields in the DUR PPS 
"RTN","BPSNCPD3",218,0)
 ;   multiple but are needed for backwards compatibility with the OP code
"RTN","BPSNCPD3",219,0)
 S DUR(BPRXCOB,"REASON")=$G(DUR1(9002313.1101,"1,1,"_DURIEN_",",439,"E"))                ;Reason for Service Code
"RTN","BPSNCPD3",220,0)
 S DUR(BPRXCOB,"PREV FILL DATE")=$G(DUR1(9002313.1101,"1,1,"_DURIEN_",",530,"E"))        ;Previous Date of Fill
"RTN","BPSNCPD3",221,0)
 S DUR(BPRXCOB,"DUR FREE TEXT DESC")=$G(DUR1(9002313.1101,"1,1,"_DURIEN_",",544,"E"))    ;DUR Free Text Message from Payer
"RTN","BPSNCPD3",222,0)
 S DUR(BPRXCOB,"DUR ADD MSG TEXT")=$G(DUR1(9002313.1101,"1,1,"_DURIEN_",",570,"E"))      ;DUR Additional Message Text from Payer
"RTN","BPSNCPD3",223,0)
 ;
"RTN","BPSNCPD3",224,0)
 ; Get DUR PPS RESPONSE multiple values
"RTN","BPSNCPD3",225,0)
 S DUR(BPRXCOB,"DUR PPS RESPONSE")=""
"RTN","BPSNCPD3",226,0)
 F I=1:1 Q:'$D(DUR1(9002313.1101,I_",1,"_DURIEN_",",.01))  D
"RTN","BPSNCPD3",227,0)
 . S DUR(BPRXCOB,"DUR PPS RESPONSE")=I
"RTN","BPSNCPD3",228,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"DUR PPS RESPONSE")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",.01,"E"))
"RTN","BPSNCPD3",229,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"REASON FOR SERVICE CODE")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",439,"E"))
"RTN","BPSNCPD3",230,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"CLINICAL SIGNIFICANCE CODE")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",528,"E"))
"RTN","BPSNCPD3",231,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"OTHER PHARMACY INDICATOR")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",529,"E"))
"RTN","BPSNCPD3",232,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"PREVIOUS DATE OF FILL")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",530,"E"))
"RTN","BPSNCPD3",233,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"QUANTITY OF PREVIOUS FILL")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",531,"E"))
"RTN","BPSNCPD3",234,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"DATABASE INDICATOR")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",532,"E"))
"RTN","BPSNCPD3",235,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"OTHER PRESCRIBER INDICATOR")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",533,"E"))
"RTN","BPSNCPD3",236,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"DUR FREE TEXT MESSAGE")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",544,"E"))
"RTN","BPSNCPD3",237,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"DUR ADDITIONAL TEXT")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",570,"E"))
"RTN","BPSNCPD3",238,0)
 ;
"RTN","BPSNCPD3",239,0)
 ; Get DUR reject codes and description and store in DUR 
"RTN","BPSNCPD3",240,0)
 D GETS^DIQ(9002313.0301,"1,"_DURIEN_",","511*","I","DUR1","ERROR") ;get DUR codes and descriptions
"RTN","BPSNCPD3",241,0)
 S DUR(BPRXCOB,"REJ CODE LST")=""
"RTN","BPSNCPD3",242,0)
 F I=1:1 Q:'$D(DUR1(9002313.03511,I_",1,"_DURIEN_","))  D
"RTN","BPSNCPD3",243,0)
 . N REJX,REJN
"RTN","BPSNCPD3",244,0)
 . S REJX=$G(DUR1(9002313.03511,I_",1,"_DURIEN_",",.01,"I")) Q:REJX=""     ; external reject code
"RTN","BPSNCPD3",245,0)
 . S REJN=+$O(^BPSF(9002313.93,"B",REJX,0)) Q:'REJN                        ; internal reject code ien
"RTN","BPSNCPD3",246,0)
 . S DUR(BPRXCOB,"REJ CODES",I,REJX)=$P($G(^BPSF(9002313.93,REJN,0)),U,2)  ; reject code description
"RTN","BPSNCPD3",247,0)
 . S DUR(BPRXCOB,"REJ CODE LST")=DUR(BPRXCOB,"REJ CODE LST")_","_REJX
"RTN","BPSNCPD3",248,0)
 S DUR(BPRXCOB,"REJ CODE LST")=$E(DUR(BPRXCOB,"REJ CODE LST"),2,9999)
"RTN","BPSNCPD3",249,0)
 Q
"RTN","BPSNCPDP")
0^25^B93601523
"RTN","BPSNCPDP",1,0)
BPSNCPDP ;BHAM ISC/LJE/SS - API to submit a claim to ECME ;11/7/07  16:58
"RTN","BPSNCPDP",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,4,2,5,6,7,8,10,11,19**;JUN 2004;Build 18
"RTN","BPSNCPDP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSNCPDP",4,0)
 ;
"RTN","BPSNCPDP",5,0)
 ; Reference to $$PROD^XUPROD supported by DBIA 4440
"RTN","BPSNCPDP",6,0)
 ; Reference to $$GETNDC^PSSNDCUT supported by DBIA 4707
"RTN","BPSNCPDP",7,0)
 ; Reference to Patient file (#2) supported by DBIA 10035
"RTN","BPSNCPDP",8,0)
 ;
"RTN","BPSNCPDP",9,0)
 ; For comments regarding this API, see routine BPSNCPD3.
"RTN","BPSNCPDP",10,0)
 ;
"RTN","BPSNCPDP",11,0)
EN(BRXIEN,BFILL,DOS,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPCOBIND,BPJOBFLG,BPREQIEN,BPSCLOSE,BPSPLAN,BPSPRDAT,BPSRTYPE,BPSDELAY) ;
"RTN","BPSNCPDP",12,0)
 N BPRETV,CLMSTAT,BRX,RESPONSE,BPSCOB,IEN59,DFN,PNAME,WFLG,BPLCK,BPACTTYP,BPRET,BPSQUIT,SITE
"RTN","BPSNCPDP",13,0)
 N BPNEWCLM,OLDRESP,BPPAYABL,BPSTART,BPRESLT,BPSELIG,BP77NEW,TODAY,BPPREVRQ,BPSSTAT
"RTN","BPSNCPDP",14,0)
 ; test not ecme active
"RTN","BPSNCPDP",15,0)
 I '$$PROD^XUPROD,'$P($G(^BPS(9002313.99,1,0)),"^",3) Q "1^ECME switch is not on for the site"
"RTN","BPSNCPDP",16,0)
 ;== Set default values and other required vars
"RTN","BPSNCPDP",17,0)
 ; default is foreground ("F")
"RTN","BPSNCPDP",18,0)
 S BPJOBFLG=$S($G(BPJOBFLG)="":"F",1:$G(BPJOBFLG))
"RTN","BPSNCPDP",19,0)
 S RESPONSE="",CLMSTAT="",BP77NEW=0
"RTN","BPSNCPDP",20,0)
 S BPLCK=0 ;0 - default for "B" jobs
"RTN","BPSNCPDP",21,0)
 S REVREAS=$G(REVREAS),DURREC=$G(DURREC),BPSCLARF=$G(BPSCLARF),BPSAUTH=$G(BPSAUTH),BPOVRIEN=$G(BPOVRIEN),BPSDELAY=$G(BPSDELAY)
"RTN","BPSNCPDP",22,0)
 ; BPCOBIND will be used as a flag to indicate the following
"RTN","BPSNCPDP",23,0)
 ;    If BPCOBIND>0 then the API is called for the particular COB claim
"RTN","BPSNCPDP",24,0)
 ;    if BPCOBIND=0 then the API is called for a whole RX/RF - Outpatient Pharmacy doesn't care about COB
"RTN","BPSNCPDP",25,0)
 ;         when the pharmacy user enters, deletes or edits RX/refills
"RTN","BPSNCPDP",26,0)
 S BPCOBIND=+$G(BPCOBIND)
"RTN","BPSNCPDP",27,0)
 ;
"RTN","BPSNCPDP",28,0)
 ; BPSCOB variable will be used to store COB value (default is PRIMARY) in this function only
"RTN","BPSNCPDP",29,0)
 S BPSCOB=$S(BPCOBIND>0:BPCOBIND,1:1)
"RTN","BPSNCPDP",30,0)
 ;
"RTN","BPSNCPDP",31,0)
 ; Default is original fill
"RTN","BPSNCPDP",32,0)
 S BRXIEN=$G(BRXIEN)
"RTN","BPSNCPDP",33,0)
 I '$G(BFILL) S BFILL=0
"RTN","BPSNCPDP",34,0)
 ;
"RTN","BPSNCPDP",35,0)
 ; Get prescription number
"RTN","BPSNCPDP",36,0)
 S BRX=$$RXAPI1^BPSUTIL1(BRXIEN,.01,"I")
"RTN","BPSNCPDP",37,0)
 ;
"RTN","BPSNCPDP",38,0)
 ; Make sure fill date is not in the future or empty
"RTN","BPSNCPDP",39,0)
 S TODAY=$$DT^XLFDT
"RTN","BPSNCPDP",40,0)
 I '$G(DOS)!($G(DOS)>TODAY) S DOS=$$DOSDATE^BPSSCRRS(BRXIEN,BFILL)
"RTN","BPSNCPDP",41,0)
 ;
"RTN","BPSNCPDP",42,0)
 ; Get the NDC if it was not passed in
"RTN","BPSNCPDP",43,0)
 I $G(BILLNDC)="" S BILLNDC=$$GETNDC^PSONDCUT(BRXIEN,BFILL)
"RTN","BPSNCPDP",44,0)
 ;
"RTN","BPSNCPDP",45,0)
 ; Patient Info
"RTN","BPSNCPDP",46,0)
 S DFN=$$RXAPI1^BPSUTIL1(BRXIEN,2,"I"),PNAME=$$GET1^DIQ(2,DFN,.01)
"RTN","BPSNCPDP",47,0)
 ;
"RTN","BPSNCPDP",48,0)
 ; Check parameters and vars
"RTN","BPSNCPDP",49,0)
 S BPRETV=$$CHCKPAR^BPSOSRX8(BRXIEN,BRX,$G(BWHERE),DFN,PNAME) I +BPRETV=0 S CLMSTAT=$P(BPRETV,U,2),RESPONSE=5 G END
"RTN","BPSNCPDP",50,0)
 ;
"RTN","BPSNCPDP",51,0)
 ; Calculate IEN59
"RTN","BPSNCPDP",52,0)
 S IEN59=$$IEN59^BPSOSRX(BRXIEN,BFILL,BPSCOB) I IEN59="" S CLMSTAT="BPS Transaction IEN could not be calculated",RESPONSE=1 G END
"RTN","BPSNCPDP",53,0)
 ;
"RTN","BPSNCPDP",54,0)
 ;populate COB fields from BPS TRANSACTION to resubmit secondary claims from the User Screen
"RTN","BPSNCPDP",55,0)
 ;if $G(BPSPRDAT("NEW COB DATA"))=1 then the resubmit requested from the BPS COB PROCESS SECOND TRICARE and the user can change the data
"RTN","BPSNCPDP",56,0)
 I BPSCOB=2,$$ACTTYPE^BPSOSRX5(BWHERE)="UC",'$G(BPSPRDAT("NEW COB DATA")) N:$D(BPSRTYPE)=0 BPSRTYPE N:$D(BPSPLAN)=0 BPSPLAN N:$D(BPSPRDAT)=0 BPSPRDAT I $$SECDATA^BPSPRRX6(BRXIEN,BFILL,.BPSPLAN,.BPSPRDAT,.BPSRTYPE)=0 D  G END
"RTN","BPSNCPDP",57,0)
 . S CLMSTAT="Insufficient data to resubmit the secondary claim, use Process Secondary/TRICARE Rx to ECME option.",RESPONSE=5
"RTN","BPSNCPDP",58,0)
 ;
"RTN","BPSNCPDP",59,0)
 ; Initialize log
"RTN","BPSNCPDP",60,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Start of claim","DT")
"RTN","BPSNCPDP",61,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Job flag = "_BPJOBFLG_$S(BPJOBFLG="B":" BPS REQUEST ien = "_$G(BPREQIEN),1:""))
"RTN","BPSNCPDP",62,0)
 ;
"RTN","BPSNCPDP",63,0)
 ; Check if we need to print the messages to the screen (WFLG=1 : YES)
"RTN","BPSNCPDP",64,0)
 S WFLG=0
"RTN","BPSNCPDP",65,0)
 S:BPJOBFLG="F" WFLG=$$PRINTSCR^BPSOSRX8(BWHERE)
"RTN","BPSNCPDP",66,0)
 ;
"RTN","BPSNCPDP",67,0)
 ; Lock the Rx and Fill while putting it on the queue to prevent two jobs from being 
"RTN","BPSNCPDP",68,0)
 ;   activated at the same time.  This is only for foreground jobs.
"RTN","BPSNCPDP",69,0)
 ;   Background jobs are called from REQST99^BPSOSRX5 and the RX/RF should be already locked by this point.
"RTN","BPSNCPDP",70,0)
 I BPJOBFLG="F" D  I 'BPLCK G END
"RTN","BPSNCPDP",71,0)
 . S BPLCK=$$LOCKRF^BPSOSRX(BRXIEN,BFILL,10,$G(IEN59),$T(+0))
"RTN","BPSNCPDP",72,0)
 . I 'BPLCK S RESPONSE=4,CLMSTAT="Unable to acquire the lock needed to put the RX and fill on the queue"
"RTN","BPSNCPDP",73,0)
 ;
"RTN","BPSNCPDP",74,0)
 ; Determine the action type
"RTN","BPSNCPDP",75,0)
 ; If foreground job then can be C,U and UC actions types
"RTN","BPSNCPDP",76,0)
 S BPACTTYP=""
"RTN","BPSNCPDP",77,0)
 I BPJOBFLG="F" S BPACTTYP=$$ACTTYPE^BPSOSRX5(BWHERE)
"RTN","BPSNCPDP",78,0)
 ;if background/unqueueing job then only two action types are allowed - C and U
"RTN","BPSNCPDP",79,0)
 I BPJOBFLG="B" D  I RESPONSE=5 G END
"RTN","BPSNCPDP",80,0)
 . S BPACTTYP=$P($G(^BPS(9002313.77,+$G(BPREQIEN),1)),U,4)
"RTN","BPSNCPDP",81,0)
 . I BPACTTYP="" S RESPONSE=5,CLMSTAT="Unknown Action type in BPS REQUEST ien="_BPREQIEN
"RTN","BPSNCPDP",82,0)
 ;
"RTN","BPSNCPDP",83,0)
 ;code to handle "general" submit/reversal as opposed to processing a claim for a specific payer sequence (primary, secondary)
"RTN","BPSNCPDP",84,0)
 ;ECME and IB always know the payer sequence and always should set the proper BPCOBIND parameter
"RTN","BPSNCPDP",85,0)
 ;thus if BPCOBIND=0 then the API is called by Pharmacy. If so then the CLAIM action (not reversal) should be done for primary only.
"RTN","BPSNCPDP",86,0)
 S BPSQUIT=0
"RTN","BPSNCPDP",87,0)
 I BPCOBIND=0 D  I BPSQUIT=1 S CLMSTAT="The secondary claim needs to be reversed first.",RESPONSE=5 G END
"RTN","BPSNCPDP",88,0)
 . I BPACTTYP=""!(BPACTTYP="C") S BPCOBIND=1 Q
"RTN","BPSNCPDP",89,0)
 . ;code to handle "general" reversal
"RTN","BPSNCPDP",90,0)
 . N BPSECLM
"RTN","BPSNCPDP",91,0)
 . ;check if there is the secondary e-claim
"RTN","BPSNCPDP",92,0)
 . S BPSECLM=$$FINDECLM^BPSPRRX5(BRXIEN,BFILL,2)
"RTN","BPSNCPDP",93,0)
 . ;quit if we have secondary claim and it is payable or in progress - it needs to be reversed first
"RTN","BPSNCPDP",94,0)
 . I BPSECLM=1!(BPSECLM=3) S BPSQUIT=1
"RTN","BPSNCPDP",95,0)
 . S BPCOBIND=1
"RTN","BPSNCPDP",96,0)
 ;
"RTN","BPSNCPDP",97,0)
 ;== IF BPJOBFLG="F" THEN determine if there are any scheduled/active/in process requests for the RX/RF 
"RTN","BPSNCPDP",98,0)
 ;CHKREQST^BPSOSRX7 returns
"RTN","BPSNCPDP",99,0)
 ; negative number^message : cannot be accepted for some reason 
"RTN","BPSNCPDP",100,0)
 ; 0 : can be accepted because there are NO requests for this RX/RF, 
"RTN","BPSNCPDP",101,0)
 ;      we will create a new record in BPS REQUEST for it and ACTIVATE it.
"RTN","BPSNCPDP",102,0)
 ; 1 : there are ACTIVATED/IN PROCESS requests already for this RX/RF
"RTN","BPSNCPDP",103,0)
 S BPPREVRQ="-10^Background queuing." ;default
"RTN","BPSNCPDP",104,0)
 I BPJOBFLG="F" D  I BPPREVRQ'=0 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",105,0)
 . S BPPREVRQ=$$CHKREQST^BPSOSRX7(BRXIEN,BFILL,.BPRESLT)
"RTN","BPSNCPDP",106,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-CHKREQ^BPSOSRX7 result: "_BPPREVRQ)
"RTN","BPSNCPDP",107,0)
 . ;if error
"RTN","BPSNCPDP",108,0)
 . I BPPREVRQ<0 S RESPONSE=4,CLMSTAT=$P(BPPREVRQ,U,2) D LOG^BPSOSL(IEN59,$T(+0)_"- - Cannot be accepted because of issues with already scheduled requests")
"RTN","BPSNCPDP",109,0)
 . ;if there are prior requests for the RX/RF in the queue already then schedule additional request(s) 
"RTN","BPSNCPDP",110,0)
 . ;for the future and quit since we do not know the result of prior requests 
"RTN","BPSNCPDP",111,0)
 . I BPPREVRQ>0 D
"RTN","BPSNCPDP",112,0)
 . . D LOG^BPSOSL(IEN59,$T(+0)_"-There are requests in the queue, do not process - schedule additional request(s)")
"RTN","BPSNCPDP",113,0)
 . . I BPACTTYP="U" S BPRET=$$SCHREQ^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,DOS,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,IEN59,BPCOBIND,BPPREVRQ,"U",.BPSCLOSE,$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPDP",114,0)
 . . I BPACTTYP="UC" D
"RTN","BPSNCPDP",115,0)
 . . . S BPRET=$$SCHREQ^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,DOS,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,IEN59,BPCOBIND,BPPREVRQ,"U",$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPDP",116,0)
 . . . I +BPRET=0 S BPRET=$$SCHREQ^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,DOS,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,IEN59,BPCOBIND,BP77NEW,"C",$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPDP",117,0)
 . . I BPACTTYP="C" S BPRET=$$SCHREQ^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,DOS,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,IEN59,BPCOBIND,BPPREVRQ,"C",$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPDP",118,0)
 . . I +BPRET=0 S RESPONSE=0,CLMSTAT=$P(BPRET,U,2) D LOG^BPSOSL(IEN59,$T(+0)_"-The new request(s) scheduled. The last one for the RX/RF now is: "_(BP77NEW)) Q
"RTN","BPSNCPDP",119,0)
 . . I +BPRET>0 S RESPONSE=+BPRET,CLMSTAT=$P(BPRET,U,2) D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot create request(s)")
"RTN","BPSNCPDP",120,0)
 ;
"RTN","BPSNCPDP",121,0)
 ;== So we can continue only if either 
"RTN","BPSNCPDP",122,0)
 ;  BPJOBFLG="B" 
"RTN","BPSNCPDP",123,0)
 ;  or 
"RTN","BPSNCPDP",124,0)
 ;  BPJOBFLG="F" and BPPREVRQ=0
"RTN","BPSNCPDP",125,0)
 ;
"RTN","BPSNCPDP",126,0)
 ; If a new RX/RF - i.e. RX/RF was never processed thru ECME - process and quit
"RTN","BPSNCPDP",127,0)
 S BPNEWCLM=$S(+$G(^BPST(IEN59,0)):0,1:1)
"RTN","BPSNCPDP",128,0)
 ; get pre-existing RX/RFs status
"RTN","BPSNCPDP",129,0)
 ;S OLDRESP=$P($$STATUS^BPSOSRX(BRXIEN,BFILL,0),U,1)
"RTN","BPSNCPDP",130,0)
 S OLDRESP=$P($$STATUS^BPSOSRX(BRXIEN,BFILL,0,,BPSCOB),U,1)
"RTN","BPSNCPDP",131,0)
 ; check if the payer IS going to PAY according the last response
"RTN","BPSNCPDP",132,0)
 S BPPAYABL=$$PAYABLE^BPSOSRX5(OLDRESP)
"RTN","BPSNCPDP",133,0)
 ; set starttime
"RTN","BPSNCPDP",134,0)
 S BPSTART=$$STTM^BPSNCPD4()
"RTN","BPSNCPDP",135,0)
 ;  
"RTN","BPSNCPDP",136,0)
 ; if this is a new RX/RF
"RTN","BPSNCPDP",137,0)
 I BPNEWCLM D NEWCLAIM^BPSNCPD6 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",138,0)
 ;
"RTN","BPSNCPDP",139,0)
 ; if we do not have a status for the previous claim AND this is not a reversal request - treat it as a new claim 
"RTN","BPSNCPDP",140,0)
 I (OLDRESP=""),(BPACTTYP'="U") D NEWCLAIM^BPSNCPD6 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",141,0)
 ;
"RTN","BPSNCPDP",142,0)
 ; if we do not have a status for the pre-existing claim AND this is a reversal request - DO NOT reverse
"RTN","BPSNCPDP",143,0)
 I (OLDRESP=""),(BPACTTYP="U") D RVNEW^BPSNCPD6 G END
"RTN","BPSNCPDP",144,0)
 ;
"RTN","BPSNCPDP",145,0)
 ;== Further below - all claims with some response (i.e. OLDRESP]""=1)
"RTN","BPSNCPDP",146,0)
 ;
"RTN","BPSNCPDP",147,0)
 ; if Back Billing - impossible
"RTN","BPSNCPDP",148,0)
 I BWHERE="BB" D BB^BPSNCPD6 G END
"RTN","BPSNCPDP",149,0)
 ;
"RTN","BPSNCPDP",150,0)
 ; If returning to stock or deleting and the previous claim was not paid, then no reversal is needed
"RTN","BPSNCPDP",151,0)
 ;   so close the prescription and quit
"RTN","BPSNCPDP",152,0)
 ; Note: this is inherited "fuzzy logic" - 
"RTN","BPSNCPDP",153,0)
 ; it checks only two statuses to determine that the claim "was not paid"
"RTN","BPSNCPDP",154,0)
 I OLDRESP'["E PAYABLE",OLDRESP'["E REVERSAL REJECTED",(",RS,DE,"[(","_BWHERE_",")) D  G END
"RTN","BPSNCPDP",155,0)
 . D CLOSE2^BPSBUTL(BRXIEN,BFILL,BWHERE)
"RTN","BPSNCPDP",156,0)
 . S RESPONSE=3
"RTN","BPSNCPDP",157,0)
 . S CLMSTAT="Claim was not payable so it has been closed.  No ECME claim created."
"RTN","BPSNCPDP",158,0)
 . D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPDP",159,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPDP",160,0)
 ;
"RTN","BPSNCPDP",161,0)
 ; Reversals for Payable claims 
"RTN","BPSNCPDP",162,0)
 ; (Note: BPSCLOSE can be used in this case only)
"RTN","BPSNCPDP",163,0)
 I BPPAYABL,BPACTTYP="U" D RVPAID^BPSNCPD6 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",164,0)
 ;
"RTN","BPSNCPDP",165,0)
 ; Reversals+Resubmits for Payable claims
"RTN","BPSNCPDP",166,0)
 I BPPAYABL,BPACTTYP="UC" D RVRSPAID^BPSNCPD6 G STATUS:((RESPONSE=0)!(RESPONSE=10)),END:RESPONSE>0
"RTN","BPSNCPDP",167,0)
 ;
"RTN","BPSNCPDP",168,0)
 ; Resubmits for Payable claims - DO NOT resubmit
"RTN","BPSNCPDP",169,0)
 I BPPAYABL,BPACTTYP="C" D RSPAID^BPSNCPD6 G END
"RTN","BPSNCPDP",170,0)
 ;
"RTN","BPSNCPDP",171,0)
 ; Reversals for Non-Payable claims - DO NOT reverse
"RTN","BPSNCPDP",172,0)
 I 'BPPAYABL,BPACTTYP="U" D RVNPAID^BPSNCPD6 G END
"RTN","BPSNCPDP",173,0)
 ;
"RTN","BPSNCPDP",174,0)
 ; Resubmits AND Reversals+Resubmits for Non-Payable claims
"RTN","BPSNCPDP",175,0)
 I 'BPPAYABL,((BPACTTYP="C")!(BPACTTYP="UC")) D RVRSNPD^BPSNCPD6 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",176,0)
 ;
"RTN","BPSNCPDP",177,0)
 S RESPONSE=5,CLMSTAT="Unknown error"
"RTN","BPSNCPDP",178,0)
 G END
"RTN","BPSNCPDP",179,0)
 ;
"RTN","BPSNCPDP",180,0)
 ;== Display status
"RTN","BPSNCPDP",181,0)
STATUS ;
"RTN","BPSNCPDP",182,0)
 ;if successful scheduling or/and activation of the request then make sure the background job is running
"RTN","BPSNCPDP",183,0)
 I BPJOBFLG="F",BPLCK D UNLCKRF^BPSOSRX(BRXIEN,BFILL,$G(IEN59),$T(+0)) S BPLCK=0 ;to prevent unlocking in END
"RTN","BPSNCPDP",184,0)
 I (RESPONSE=0)!(RESPONSE=10) D LOG^BPSOSL(IEN59,$T(+0)_"-Call RUNNING^BPSOSRX") D RUNNING^BPSOSRX()
"RTN","BPSNCPDP",185,0)
 I WFLG W !!,"Processing ",$S(BPSCOB=1:"Primary claim...",BPSCOB=2:"Secondary claim...",1:"claim with Unknown Payer Sequence...")
"RTN","BPSNCPDP",186,0)
 I BPJOBFLG="F" D
"RTN","BPSNCPDP",187,0)
 . ; If the Write Flag is off and this is TRICARE/CHAMPVA, set Write Flag to 2
"RTN","BPSNCPDP",188,0)
 . ; STATUS^BPSNCPD1 will not display messages but will wait the same amount of time as if it were writing messages
"RTN","BPSNCPDP",189,0)
 . ; This needs to be done so that TRICARE/CHAMPVA claims get a chance to complete before continuing
"RTN","BPSNCPDP",190,0)
 . ; Otherwise, the claim will be IN PROGRESS, which will create the bulletin (code below) and OP/CMOP will 
"RTN","BPSNCPDP",191,0)
 . ;   not process correctly (keep on suspense queue, etc)
"RTN","BPSNCPDP",192,0)
 . I 'WFLG,$G(BPSELIG)="T"!($G(BPSELIG)="C") S WFLG=2
"RTN","BPSNCPDP",193,0)
 . I 'WFLG H 1
"RTN","BPSNCPDP",194,0)
 . E  D STATUS^BPSNCPD1(BRXIEN,BFILL,+$G(BPPAYABL),$S(BPACTTYP="U":1,1:0),BPSTART,BWHERE,$G(BP77NEW),BPSCOB,$G(BPSELIG),IEN59,WFLG)
"RTN","BPSNCPDP",195,0)
 ;
"RTN","BPSNCPDP",196,0)
 ;== Clean up and quit
"RTN","BPSNCPDP",197,0)
END ;
"RTN","BPSNCPDP",198,0)
 ; BPSELIG and other variables are established by inference in BPSNCPD6.
"RTN","BPSNCPDP",199,0)
 I BPJOBFLG="F",BPLCK D UNLCKRF^BPSOSRX(BRXIEN,BFILL,$G(IEN59),$T(+0)) S BPLCK=0
"RTN","BPSNCPDP",200,0)
 ; Get Site in case we send a Bulletin
"RTN","BPSNCPDP",201,0)
 S SITE=$$GETSITE^BPSOSRX8(BRXIEN,BFILL)
"RTN","BPSNCPDP",202,0)
 ;if foreground AND we can't schedule request for any reason AND this is not OP - send bulletin
"RTN","BPSNCPDP",203,0)
 I BPJOBFLG="F",RESPONSE=4,",AREV,BB,ERES,EREV,P2,P2S,"'[(","_BWHERE_",") D BULL^BPSNCPD1(BRXIEN,BFILL,$G(SITE),$G(DFN),$G(PNAME),"",$G(CLMSTAT),$G(RESPONSE),$G(BPSCOB))
"RTN","BPSNCPDP",204,0)
 I $G(BPSELIG)="" S BPSELIG=""
"RTN","BPSNCPDP",205,0)
 ; Send Bulletin if TRICARE or CHAMPVA is IN PROGRESS and this is not a release process
"RTN","BPSNCPDP",206,0)
 S BPSSTAT=$S($G(BRXIEN):$P($$STATUS^BPSOSRX(BRXIEN,BFILL,,,BPSCOB),U),1:"")
"RTN","BPSNCPDP",207,0)
 I BPSELIG="T"!(BPSELIG="C"),BPSSTAT="IN PROGRESS",$G(REVREAS)'="RX RELEASE-NDC CHANGE",",CRLB,CRLR,CRLX,CRRL,RRL,"'[(","_BWHERE_",") D BULL^BPSNCPD1(BRXIEN,BFILL,SITE,$G(DFN),$G(PNAME),BPSELIG,"","",$G(BPSCOB))
"RTN","BPSNCPDP",208,0)
 ;
"RTN","BPSNCPDP",209,0)
 S:'$D(RESPONSE) RESPONSE=1
"RTN","BPSNCPDP",210,0)
 K MOREDATA
"RTN","BPSNCPDP",211,0)
 I $G(IEN59) D
"RTN","BPSNCPDP",212,0)
 . N MSG
"RTN","BPSNCPDP",213,0)
 . S MSG="Foreground Process Complete-RESPONSE="_$G(RESPONSE)
"RTN","BPSNCPDP",214,0)
 . I $G(RESPONSE)'=0 S MSG=MSG_", CLMSTAT="_$G(CLMSTAT)
"RTN","BPSNCPDP",215,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-"_MSG)
"RTN","BPSNCPDP",216,0)
 Q RESPONSE_U_$G(CLMSTAT)_U_BPSELIG_U_BPSSTAT_U_$$CLMINFO^BPSUTIL2(+$G(IEN59))
"RTN","BPSNCPDP",217,0)
 ;
"RTN","BPSNCPDP",218,0)
 ;BPSNCPDP
"RTN","BPSOSCC")
0^21^B27473638
"RTN","BPSOSCC",1,0)
BPSOSCC ;BHAM ISC/FCS/DRS/DLF - Set up BPS() ;06/01/2004
"RTN","BPSOSCC",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2,5,8,10,11,19**;JUN 2004;Build 18
"RTN","BPSOSCC",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSCC",4,0)
 ;
"RTN","BPSOSCC",5,0)
 ; GETINFO - Create BPS array for non-repeating data
"RTN","BPSOSCC",6,0)
 ;    IEN59  - Pointer to BPS Transactions
"RTN","BPSOSCC",7,0)
 ;    IEN5902 - IEN for Insurance multiple of BPS Transactions
"RTN","BPSOSCC",8,0)
 ;
"RTN","BPSOSCC",9,0)
 ; BPS array is shared by all of the BPSOSC* routines, created in BPSOSCA
"RTN","BPSOSCC",10,0)
 ; VAINFO is created in BPSOSCB
"RTN","BPSOSCC",11,0)
 Q
"RTN","BPSOSCC",12,0)
 ;
"RTN","BPSOSCC",13,0)
GETINFO(IEN59,IEN5902) ; EP - BPSOSCB
"RTN","BPSOSCC",14,0)
 ; both parameters required
"RTN","BPSOSCC",15,0)
 Q:$G(IEN59)=""
"RTN","BPSOSCC",16,0)
 Q:$G(IEN5902)=""
"RTN","BPSOSCC",17,0)
 ;
"RTN","BPSOSCC",18,0)
 N BPPAYSEQ,DFN,IENS,NPI,SITE,VADM,VAPA,X
"RTN","BPSOSCC",19,0)
 ;
"RTN","BPSOSCC",20,0)
 S BPPAYSEQ=$$COB59^BPSUTIL2(IEN59)  ; COB payer sequence
"RTN","BPSOSCC",21,0)
 ; Setup IENS for transaction multiple
"RTN","BPSOSCC",22,0)
 S IENS=IEN5902_","_IEN59_","
"RTN","BPSOSCC",23,0)
 ; Site Information
"RTN","BPSOSCC",24,0)
 S SITE=$P($G(^BPST(IEN59,1)),U,4)
"RTN","BPSOSCC",25,0)
 S NPI=$$NPI^BPSNPI("Pharmacy_ID",SITE)
"RTN","BPSOSCC",26,0)
 I +NPI=-1 S NPI=""
"RTN","BPSOSCC",27,0)
 S BPS("Site","NPI")=$P(NPI,U)
"RTN","BPSOSCC",28,0)
 ;
"RTN","BPSOSCC",29,0)
 ; Get Transaction Code
"RTN","BPSOSCC",30,0)
 S BPS("Transaction Code")=$S($P($G(^BPST(IEN59,0)),U,15)="E":"E1",1:"B1")
"RTN","BPSOSCC",31,0)
 ;
"RTN","BPSOSCC",32,0)
 ; Transaction Header Data
"RTN","BPSOSCC",33,0)
 S BPS("NCPDP","IEN")=$G(VAINFO(9002313.59902,IENS,$S(BPS("Transaction Code")="E1":902.34,1:902.02),"I"))
"RTN","BPSOSCC",34,0)
 S BPS("NCPDP","BIN Number")=$G(VAINFO(9002313.59902,IENS,902.03,"I"))
"RTN","BPSOSCC",35,0)
 S BPS("NCPDP","PCN")=$G(VAINFO(9002313.59902,IENS,902.04,"I"))
"RTN","BPSOSCC",36,0)
 S BPS("NCPDP","Software Vendor/Cert ID")=$G(VAINFO(9002313.59902,IENS,902.18,"I"))
"RTN","BPSOSCC",37,0)
 I BPS("NCPDP","IEN")="" D IMPOSS^BPSOSUE("P","TI","Payer Sheet pointer missing from multiple",,1,$T(+0))
"RTN","BPSOSCC",38,0)
 I BPS("NCPDP","IEN") S BPS("NCPDP","Version")=$P($G(^BPSF(9002313.92,BPS("NCPDP","IEN"),1)),U,2)
"RTN","BPSOSCC",39,0)
 I $G(BPS("NCPDP","Version"))="" D IMPOSS^BPSOSUE("DB","TI","Payer sheet version missing.",,2,$T(+0))
"RTN","BPSOSCC",40,0)
 S BPS("NCPDP","# Meds/Claim")=$G(VAINFO(9002313.59902,IENS,902.32,"I"))
"RTN","BPSOSCC",41,0)
 I BPS("Transaction Code")="E1"!('BPS("NCPDP","# Meds/Claim")) S BPS("NCPDP","# Meds/Claim")=1
"RTN","BPSOSCC",42,0)
 S BPS("NCPDP","DOS")=$$FMTHL7^XLFDT($P($G(^BPST(IEN59,12)),U,2))
"RTN","BPSOSCC",43,0)
 ;
"RTN","BPSOSCC",44,0)
 ; Patient Data
"RTN","BPSOSCC",45,0)
 S DFN=$P(^BPST(IEN59,0),U,6)
"RTN","BPSOSCC",46,0)
 I 'DFN D IMPOSS^BPSOSUE("DB","TI","DFN",,,$T(+0))
"RTN","BPSOSCC",47,0)
 I DFN,'$D(^DPT(DFN,0)) D IMPOSS^BPSOSUE("DB","TI","^DPT(DFN)",,,$T(+0))
"RTN","BPSOSCC",48,0)
 D DEM^VADPT,ADD^VADPT
"RTN","BPSOSCC",49,0)
 S BPS("Patient","IEN")=DFN
"RTN","BPSOSCC",50,0)
 S (X,BPS("Patient","Name"))=$G(VADM(1))
"RTN","BPSOSCC",51,0)
 D NAMECOMP^XLFNAME(.X)
"RTN","BPSOSCC",52,0)
 S BPS("Patient","Last Name")=$G(X("FAMILY"))
"RTN","BPSOSCC",53,0)
 S BPS("Patient","First Name")=$G(X("GIVEN"))
"RTN","BPSOSCC",54,0)
 S BPS("Patient","Sex")=$P($G(VADM(5)),"^",1)
"RTN","BPSOSCC",55,0)
 S X=$P($G(VADM(3)),"^")  ; date of birth, FM format
"RTN","BPSOSCC",56,0)
 S BPS("Patient","DOB")=($E(X,1,3)+1700)_$E(X,4,7)
"RTN","BPSOSCC",57,0)
 S BPS("Patient","SSN")=$P($G(VADM(2)),"^",1)
"RTN","BPSOSCC",58,0)
 S BPS("Patient","State")=$P($G(VAPA(5)),"^",1)
"RTN","BPSOSCC",59,0)
 I BPS("Patient","State")'="" S BPS("Patient","State")=$P($G(^DIC(5,BPS("Patient","State"),0)),"^",2)
"RTN","BPSOSCC",60,0)
 S BPS("Patient","Street Address")=$G(VAPA(1))
"RTN","BPSOSCC",61,0)
 S BPS("Patient","Street Address Line 1")=$G(VAPA(1))
"RTN","BPSOSCC",62,0)
 S BPS("Patient","Street Address Line 2")=$G(VAPA(2))
"RTN","BPSOSCC",63,0)
 S BPS("Patient","City")=$G(VAPA(4))
"RTN","BPSOSCC",64,0)
 S BPS("Patient","Zip")=$G(VAPA(6))
"RTN","BPSOSCC",65,0)
 S BPS("Patient","Phone #")=$TR($P($G(VAPA(8)),"^",1),"()-/*# ")
"RTN","BPSOSCC",66,0)
 S BPS("Patient","Place of Service")=$S($G(BPS("NCPDP","Version"))=51:0,1:1)  ; NCPDP field 307-C7 default to 1 for vD.0
"RTN","BPSOSCC",67,0)
 S BPS("Patient","Patient Residence")=1  ; NCPDP field 384-4X, 1 for "Home"
"RTN","BPSOSCC",68,0)
 S BPS("Patient","Patient E-Mail Address")=$$GET1^DIQ(2,DFN,.133)  ; NCPDP field 350-HN
"RTN","BPSOSCC",69,0)
 ;
"RTN","BPSOSCC",70,0)
 ; Insurer Data
"RTN","BPSOSCC",71,0)
 S BPS("Insurer","IEN")=$G(VAINFO(9002313.59902,IENS,.01,"I"))
"RTN","BPSOSCC",72,0)
 S BPS("Patient","Primary Care Prov Location Code")=$G(VAINFO(9002313.59902,IENS,902.11,"I"))
"RTN","BPSOSCC",73,0)
 S BPS("Insurer","Relationship")=$G(VAINFO(9002313.59902,IENS,902.07,"I"))
"RTN","BPSOSCC",74,0)
 S:BPS("Insurer","Relationship")="" BPS("Insurer","Relationship")=0 ; if null set to unspecified
"RTN","BPSOSCC",75,0)
 S BPS("Insurer","Person Code")=$G(VAINFO(9002313.59902,IENS,902.1,"I"))
"RTN","BPSOSCC",76,0)
 ;
"RTN","BPSOSCC",77,0)
 ; If 303-C3 Person Code has no value from patient insurance policy field, then continue to 
"RTN","BPSOSCC",78,0)
 ; calculate the value based upon the 306-C6 Patient Relationship Code field
"RTN","BPSOSCC",79,0)
 I BPS("Insurer","Person Code")="" D
"RTN","BPSOSCC",80,0)
 . N REL S REL=BPS("Insurer","Relationship")
"RTN","BPSOSCC",81,0)
 . S BPS("Insurer","Person Code")=$S(REL=1:"01",REL=2:"02",REL=3:"03",1:"")
"RTN","BPSOSCC",82,0)
 . Q
"RTN","BPSOSCC",83,0)
 ;
"RTN","BPSOSCC",84,0)
 S BPS("Insurer","Plan ID")=$G(VAINFO(9002313.59902,IENS,902.24,"I"))
"RTN","BPSOSCC",85,0)
 S BPS("Insurer","Group #")=$G(VAINFO(9002313.59902,IENS,902.05,"I"))
"RTN","BPSOSCC",86,0)
 S BPS("Insurer","Policy #")=$G(VAINFO(9002313.59902,IENS,902.06,"I"))  ;CARDHOLDER ID
"RTN","BPSOSCC",87,0)
 S BPS("Insurer","Full Policy #")=BPS("Insurer","Policy #")
"RTN","BPSOSCC",88,0)
 S BPS("Insurer","Percent Sales Tax Rate Sub")=""  ; 483-HE Percentage Sales Tax Rate Submitted
"RTN","BPSOSCC",89,0)
 S BPS("Insurer","Percent Sales Tax Basis Sub")=""  ; 484-JE Percentage Sales Tax Basis Submitted
"RTN","BPSOSCC",90,0)
 S BPS("Insurer","Percentage Sales Tax Amt Sub")=0  ; 482-GE Percentage Sales Tax Amount Submitted
"RTN","BPSOSCC",91,0)
 S BPS("Insurer","Flat Sales Tax Amount Sub")=0  ; 481-HA Flat Sales Tax Amount Submitted
"RTN","BPSOSCC",92,0)
 ;
"RTN","BPSOSCC",93,0)
 ; Cardholder Data
"RTN","BPSOSCC",94,0)
 S BPS("Cardholder","First Name")=$G(VAINFO(9002313.59902,IENS,902.08,"I"))
"RTN","BPSOSCC",95,0)
 S BPS("Cardholder","Last Name")=$G(VAINFO(9002313.59902,IENS,902.09,"I"))
"RTN","BPSOSCC",96,0)
 S BPS("Home Plan")=$G(VAINFO(9002313.59902,IENS,902.11,"I"))
"RTN","BPSOSCC",97,0)
 ;
"RTN","BPSOSCC",98,0)
 ; set additional fields for secondary claim
"RTN","BPSOSCC",99,0)
 S:BPPAYSEQ>1 BPS("Patient","Other Coverage Code")=$P($G(^BPST(IEN59,12)),U,5)  ; NCPDP field 308-C8 Other Coverage Code
"RTN","BPSOSCC",100,0)
 ;
"RTN","BPSOSCC",101,0)
 Q
"RTN","BPSOSCC",102,0)
 ;
"RTN","BPSOSCD")
0^10^B104589879
"RTN","BPSOSCD",1,0)
BPSOSCD ;BHAM ISC/FCS/DRS/DLF - Set BPS() "RX" nodes for current medication ;06/01/2004
"RTN","BPSOSCD",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2,5,7,8,10,11,15,19**;JUN 2004;Build 18
"RTN","BPSOSCD",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSCD",4,0)
 ;
"RTN","BPSOSCD",5,0)
 ; reference to $$ACPHONE^IBNCPDPI supported by DBIA 4721
"RTN","BPSOSCD",6,0)
 ; reference to $$MADD^XUAF4 supported by DBIA 2171
"RTN","BPSOSCD",7,0)
 ; reference to $$GET1^DIQ(200,field) supported by DBIA 10060
"RTN","BPSOSCD",8,0)
 ; reference to $$GET1^DIQ(5,field) supported by DBIA 10056
"RTN","BPSOSCD",9,0)
 ; reference to PSS^PSO59 supported by DBIA 4827
"RTN","BPSOSCD",10,0)
 ; reference to $$SITE^VASITE supported by DBIA 10112
"RTN","BPSOSCD",11,0)
 ;
"RTN","BPSOSCD",12,0)
 Q
"RTN","BPSOSCD",13,0)
 ;
"RTN","BPSOSCD",14,0)
 ;MEDINFO, Set BPS("RX)" nodes for current medication
"RTN","BPSOSCD",15,0)
 ; Called from BPSOSCA for every transaction in the multiple
"RTN","BPSOSCD",16,0)
 ; IEN59 = IEN in BPS TRANSACTION (#9002313.59)
"RTN","BPSOSCD",17,0)
 ; IEN5902 = IEN for Insurance multiple of BPS Transactions
"RTN","BPSOSCD",18,0)
 ; MEDN = Index number of medication being processed
"RTN","BPSOSCD",19,0)
 ; BPS array shared by all of the BPSOSC* routines, created in BPSOSCA
"RTN","BPSOSCD",20,0)
 ; VAINFO created in BPSOSCB
"RTN","BPSOSCD",21,0)
MEDINFO(IEN59,IEN5902,MEDN) ;
"RTN","BPSOSCD",22,0)
 ; Verify Parameters
"RTN","BPSOSCD",23,0)
 I $G(IEN59)="" Q
"RTN","BPSOSCD",24,0)
 I $G(IEN5902)="" Q
"RTN","BPSOSCD",25,0)
 I $G(MEDN)="" Q
"RTN","BPSOSCD",26,0)
 ;
"RTN","BPSOSCD",27,0)
 N %,BPS0,DRUGIEN,IENS,J,NDC,NPI,OSITEIEN,PRICING,PROVIEN,RTN,RXI,RXIEN,RXRFIEN,VANATURE,VAOIEN,X,ADFEE
"RTN","BPSOSCD",28,0)
 ;
"RTN","BPSOSCD",29,0)
 ;RXIEN=Rx IEN, RXRFIEN=Fill Number, IENS=FileMan style IENS
"RTN","BPSOSCD",30,0)
 S BPS0=$G(^BPST(IEN59,1)),RXIEN=$P(BPS0,U,11),RXRFIEN=$P(BPS0,U,1),IENS=IEN5902_","_IEN59_","
"RTN","BPSOSCD",31,0)
 ;
"RTN","BPSOSCD",32,0)
 S RTN=$T(+0)  ; for log
"RTN","BPSOSCD",33,0)
 ; Get any user-entered overrides stored in BPS NCPDP OVERRIDES
"RTN","BPSOSCD",34,0)
 D OVERRIDE(IEN59,MEDN)
"RTN","BPSOSCD",35,0)
 ;
"RTN","BPSOSCD",36,0)
 ; Retrieve DUR values
"RTN","BPSOSCD",37,0)
 D DURVALUE(IEN59,MEDN)
"RTN","BPSOSCD",38,0)
 ;
"RTN","BPSOSCD",39,0)
 ; Build COB array for secondary claims
"RTN","BPSOSCD",40,0)
 I $$COB59^BPSUTIL2(IEN59)>1 D COB(IEN59,MEDN)
"RTN","BPSOSCD",41,0)
 ;
"RTN","BPSOSCD",42,0)
 ; Basic RX info
"RTN","BPSOSCD",43,0)
 S BPS("RX",MEDN,"IEN59")=IEN59
"RTN","BPSOSCD",44,0)
 S BPS("RX",MEDN,"RX IEN")=RXIEN
"RTN","BPSOSCD",45,0)
 S BPS("RX",MEDN,"RX Number")=RXIEN
"RTN","BPSOSCD",46,0)
 ;
"RTN","BPSOSCD",47,0)
 ; Stop if the transaction code is "E1" and there is no Prescription IEN
"RTN","BPSOSCD",48,0)
 I BPS("Transaction Code")="E1",RXIEN="" Q
"RTN","BPSOSCD",49,0)
 ;
"RTN","BPSOSCD",50,0)
 ; Get Provider Info
"RTN","BPSOSCD",51,0)
 S PROVIEN=+$$RXAPI1^BPSUTIL1(RXIEN,4,"I")
"RTN","BPSOSCD",52,0)
 S BPS("RX",MEDN,"Prescriber IEN")=PROVIEN
"RTN","BPSOSCD",53,0)
 I PROVIEN'="" D
"RTN","BPSOSCD",54,0)
 .S X=$$GET1^DIQ(200,PROVIEN,.01)
"RTN","BPSOSCD",55,0)
 .D NAMECOMP^XLFNAME(.X)
"RTN","BPSOSCD",56,0)
 .S BPS("RX",MEDN,"Prescriber Last Name")=X("FAMILY")
"RTN","BPSOSCD",57,0)
 .S BPS("RX",MEDN,"Prescriber First Name")=X("GIVEN")  ; NCPDP field 364-2J
"RTN","BPSOSCD",58,0)
 .S BPS("RX",MEDN,"Prescriber Phone #")=$$ACPHONE^IBNCPDPI ; DBIA 4721, Agent Cashier Phone Number
"RTN","BPSOSCD",59,0)
 .S BPS("RX",MEDN,"Prescriber Billing Location")=""
"RTN","BPSOSCD",60,0)
 .S NPI=$$NPI^BPSNPI("Individual_ID",+PROVIEN)
"RTN","BPSOSCD",61,0)
 .I NPI<0 S NPI=""
"RTN","BPSOSCD",62,0)
 .S BPS("RX",MEDN,"Prescriber NPI")=$P(NPI,U)
"RTN","BPSOSCD",63,0)
 .S BPS("RX",MEDN,"Primary Care Provider NPI")=$P(NPI,U)
"RTN","BPSOSCD",64,0)
 .S BPS("RX",MEDN,"Provider NPI")=$P(NPI,U)
"RTN","BPSOSCD",65,0)
 .;
"RTN","BPSOSCD",66,0)
 .S X=$$PRVADRS(IEN59,PROVIEN)  ; provide address info
"RTN","BPSOSCD",67,0)
 .S BPS("RX",MEDN,"Prescriber Street Address")=$P(X,U)_$S($P(X,U,5)]"":" ",1:"")_$P(X,U,5)  ; NCPDP field 365-2K
"RTN","BPSOSCD",68,0)
 .S BPS("RX",MEDN,"Prescriber Street Address Line 1")=$P(X,U)  ; NCPDP field B27-7U
"RTN","BPSOSCD",69,0)
 .S BPS("RX",MEDN,"Prescriber Street Address Line 2")=$P(X,U,5)  ; NCPDP field B28-8U
"RTN","BPSOSCD",70,0)
 .S BPS("RX",MEDN,"Prescriber City Address")=$P(X,U,2)  ; NCPDP field 366-2M
"RTN","BPSOSCD",71,0)
 .S BPS("RX",MEDN,"Prescriber State/Province Address")=$P(X,U,3)  ; NCPDP field 367-2N
"RTN","BPSOSCD",72,0)
 .S BPS("RX",MEDN,"Prescriber Zip/Postal Zone")=$TR($P(X,U,4)," -")  ; NCPDP field 368-2P
"RTN","BPSOSCD",73,0)
 .S BPS("RX",MEDN,"Prescriber Country")=$$COUNTRY($P(X,U,3),$P(X,U,6))    ;NCPDP field B42-3C
"RTN","BPSOSCD",74,0)
 ;
"RTN","BPSOSCD",75,0)
 ; Stop if Eligibility as we do not need any of the claim data below
"RTN","BPSOSCD",76,0)
 I BPS("Transaction Code")="E1" Q
"RTN","BPSOSCD",77,0)
 ;
"RTN","BPSOSCD",78,0)
 ; Basic Prescription Info
"RTN","BPSOSCD",79,0)
 S BPS("RX",MEDN,"Date Written")=$$RXAPI1^BPSUTIL1(RXIEN,1,"I")
"RTN","BPSOSCD",80,0)
 ; SLT - BPS*1.0*11
"RTN","BPSOSCD",81,0)
 ; if the RX Issue Date is in the future, set it to the current date
"RTN","BPSOSCD",82,0)
 I BPS("RX",MEDN,"Date Written")>DT S BPS("RX",MEDN,"Date Written")=DT
"RTN","BPSOSCD",83,0)
 S BPS("RX",MEDN,"New/Refill")=$S(RXRFIEN="":"N",1:"R")
"RTN","BPSOSCD",84,0)
 S BPS("RX",MEDN,"# Refills")=$$RXAPI1^BPSUTIL1(RXIEN,9,"I")
"RTN","BPSOSCD",85,0)
 S BPS("RX",MEDN,"Refill #")=+RXRFIEN
"RTN","BPSOSCD",86,0)
 S BPS("RX",MEDN,"Pharmacy Service Type")="01"  ; 147-U7 Pharmacy Service Type, 1=Community/Retail Pharmacy Services
"RTN","BPSOSCD",87,0)
 ;
"RTN","BPSOSCD",88,0)
 ; PreAuth and Prior Authorization
"RTN","BPSOSCD",89,0)
 ; #1.09 Prior Authorization Number, #1.15 Prior Auth Type Code
"RTN","BPSOSCD",90,0)
 S X=$G(^BPST(IEN59,1))
"RTN","BPSOSCD",91,0)
 S BPS("RX",MEDN,"Preauth #")=$P(X,U,15)_$P(X,U,9)
"RTN","BPSOSCD",92,0)
 S BPS("Claim",MEDN,"Prior Auth Type")=$P(X,U,15)
"RTN","BPSOSCD",93,0)
 S BPS("Claim",MEDN,"Prior Auth Num Sub")=$P(X,U,9)
"RTN","BPSOSCD",94,0)
 ;
"RTN","BPSOSCD",95,0)
 ; delay reason code not sent unless user specifies a code
"RTN","BPSOSCD",96,0)
 S BPS("Claim",MEDN,"Delay Reason Code")=""  ; 357-NV Delay Reason Code
"RTN","BPSOSCD",97,0)
 ;
"RTN","BPSOSCD",98,0)
 ; Calculate date/time for Time of Service 678-Y6 - BPS*1*15
"RTN","BPSOSCD",99,0)
 ; using SUBMIT REQUEST DATE TIME field #17 from earliest transmission log entry
"RTN","BPSOSCD",100,0)
 N FDTIME,IEN57 S IEN57=$O(^BPSTL("B",IEN59,0)) I IEN57 S FDTIME=$P($G(^BPSTL(IEN57,0)),U,13)
"RTN","BPSOSCD",101,0)
 ; Otherwise use current time
"RTN","BPSOSCD",102,0)
 I $G(FDTIME)="" S FDTIME=$$NOW^XLFDT
"RTN","BPSOSCD",103,0)
 ; Save time as HHMMSS
"RTN","BPSOSCD",104,0)
 S BPS("Claim",MEDN,"Time of Service")=$$LJ^XLFSTR($P(FDTIME,".",2),6,0) ; 678-Y6 Time of Service
"RTN","BPSOSCD",105,0)
 ;
"RTN","BPSOSCD",106,0)
 ; NDC = NDC number drug, try transaction 1st, if null get it from Rx/refill
"RTN","BPSOSCD",107,0)
 S BPS("RX",MEDN,"Product ID Qualifier")="03"
"RTN","BPSOSCD",108,0)
 S NDC=$P(^BPST(IEN59,1),U,2)
"RTN","BPSOSCD",109,0)
 I NDC="" S NDC=$$GETNDC^PSONDCUT(RXIEN,RXRFIEN) D LOG^BPSOSL(IEN59,RTN_"-NDC sent as "_NDC)
"RTN","BPSOSCD",110,0)
 S BPS("RX",MEDN,"NDC")=NDC
"RTN","BPSOSCD",111,0)
 ;
"RTN","BPSOSCD",112,0)
 ; Prescription Data dependent on original vs. refill
"RTN","BPSOSCD",113,0)
 D:'RXRFIEN  ; 1st fill
"RTN","BPSOSCD",114,0)
 .S BPS("RX",MEDN,"Days Supply")=$$RXAPI1^BPSUTIL1(RXIEN,8,"I")
"RTN","BPSOSCD",115,0)
 .S BPS("RX",MEDN,"DAW")=$$RXAPI1^BPSUTIL1(RXIEN,81,"I")
"RTN","BPSOSCD",116,0)
 .;Use FINISHING PERSON field as pharmacist identifier for Initials and ID - BPS*1*15 - DBIA 10112 for $$SITE
"RTN","BPSOSCD",117,0)
 .S BPS("Provider",MEDN,"Pharmacist Initials")=$$GET1^DIQ(200,+$$RXAPI1^BPSUTIL1(RXIEN,38,"I"),1)
"RTN","BPSOSCD",118,0)
 .S BPS("Provider",MEDN,"Pharmacist ID")=$P($$SITE^VASITE,U,3)_$$RJ^XLFSTR(+$$RXAPI1^BPSUTIL1(RXIEN,38,"I"),15,0)
"RTN","BPSOSCD",119,0)
 D:RXRFIEN  ; refill
"RTN","BPSOSCD",120,0)
 .S BPS("RX",MEDN,"Days Supply")=$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,RXRFIEN,1.1,"I")
"RTN","BPSOSCD",121,0)
 .S BPS("RX",MEDN,"DAW")=$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,RXRFIEN,81,"I")
"RTN","BPSOSCD",122,0)
 .;Use FILLING PERSON field as pharmacist identifier for Initials and ID - BPS*1*15 - DBIA 10112 for $$SITE
"RTN","BPSOSCD",123,0)
 .S BPS("Provider",MEDN,"Pharmacist Initials")=$$GET1^DIQ(200,+$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,RXRFIEN,19,"I"),1)
"RTN","BPSOSCD",124,0)
 .S BPS("Provider",MEDN,"Pharmacist ID")=$P($$SITE^VASITE,U,3)_$$RJ^XLFSTR(+$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,RXRFIEN,19,"I"),15,0)
"RTN","BPSOSCD",125,0)
 ;
"RTN","BPSOSCD",126,0)
 ; Origin Code, VAOIEN=PLACER ORDER # from file 52, VANATURE=NATURE OF ORDER in sub-file 100.008
"RTN","BPSOSCD",127,0)
 S VAOIEN=+$$RXAPI1^BPSUTIL1(RXIEN,39.3,"I"),VANATURE=$$GET1^DIQ(100.008,"1,"_VAOIEN_",","12")
"RTN","BPSOSCD",128,0)
 S BPS("RX",MEDN,"Origin Code")=$S(VANATURE="AUTO":2,VANATURE["ELECTRONIC":3,VANATURE="DUPLICATE":0,VANATURE["TELEPHONE":2,1:1)
"RTN","BPSOSCD",129,0)
 ;
"RTN","BPSOSCD",130,0)
 ; NCPDP field 420-DK Submission Clarification Code, default to "01" for vD.0, "00" for v5.1
"RTN","BPSOSCD",131,0)
 ;   note: this is a multiple (#9002313.02354), additional codes may be added by other routines
"RTN","BPSOSCD",132,0)
 S %=$P($G(^BPST(IEN59,12)),U,3),BPS("RX",MEDN,"Submission Clarif Code",1)=$S(%]"":%,$G(BPS("NCPDP","Version"))=51:"00",1:"01")
"RTN","BPSOSCD",133,0)
 ;
"RTN","BPSOSCD",134,0)
 ; Drug Info
"RTN","BPSOSCD",135,0)
 S DRUGIEN=$$RXAPI1^BPSUTIL1(RXIEN,6,"I")
"RTN","BPSOSCD",136,0)
 D:DRUGIEN'=""
"RTN","BPSOSCD",137,0)
 .S BPS("RX",MEDN,"Drug IEN")=DRUGIEN
"RTN","BPSOSCD",138,0)
 .S BPS("RX",MEDN,"Drug Name")=$$DRUGDIE^BPSUTIL1(DRUGIEN,.01,"E")
"RTN","BPSOSCD",139,0)
 ;
"RTN","BPSOSCD",140,0)
 ; Pricing Info
"RTN","BPSOSCD",141,0)
 S PRICING=$G(^BPST(IEN59,5))
"RTN","BPSOSCD",142,0)
 S BPS("RX",MEDN,"Quantity")=$P(PRICING,U)
"RTN","BPSOSCD",143,0)
 S BPS("RX",MEDN,"Unit Price")=$P(PRICING,U,2)
"RTN","BPSOSCD",144,0)
 S BPS("RX",MEDN,"Unit of Measure")=$P(PRICING,U,8)
"RTN","BPSOSCD",145,0)
 S BPS("RX",MEDN,"Basis of Cost Determination")=$G(VAINFO(9002313.59902,IENS,902.13,"I"))
"RTN","BPSOSCD",146,0)
 S BPS("RX",MEDN,"Usual & Customary")=$G(VAINFO(9002313.59902,IENS,902.14,"I"))
"RTN","BPSOSCD",147,0)
 S BPS("RX",MEDN,"Gross Amount Due")=$G(VAINFO(9002313.59902,IENS,902.15,"I"))
"RTN","BPSOSCD",148,0)
 S BPS("RX",MEDN,"Ingredient Cost")=$G(VAINFO(9002313.59902,IENS,902.2,"I"))
"RTN","BPSOSCD",149,0)
 S BPS("RX",MEDN,"Dispensing Fee")=$G(VAINFO(9002313.59902,IENS,902.12,"I"))
"RTN","BPSOSCD",150,0)
 S ADFEE=+$G(VAINFO(9002313.59902,IENS,902.16,"I"))
"RTN","BPSOSCD",151,0)
 I ADFEE'=0 D
"RTN","BPSOSCD",152,0)
 . S BPS("RX",MEDN,"Other Amt Qual",1)="04"
"RTN","BPSOSCD",153,0)
 . S BPS("RX",MEDN,"Other Amt Value",1)=ADFEE
"RTN","BPSOSCD",154,0)
 ;
"RTN","BPSOSCD",155,0)
 Q
"RTN","BPSOSCD",156,0)
 ;
"RTN","BPSOSCD",157,0)
 ; OVERRIDE - Retrieve OVERRIDE nodes and put into BPS array
"RTN","BPSOSCD",158,0)
 ; They will be fetched from BPS("OVERRIDE"
"RTN","BPSOSCD",159,0)
 ;   during low-level construction of the actual encoded claim packet.
"RTN","BPSOSCD",160,0)
 ; BPS("OVERRIDE",field)=value  for fields 101-401
"RTN","BPSOSCD",161,0)
 ; BPS("OVERRIDE","RX",MEDN,field) for med #N, fields 402+
"RTN","BPSOSCD",162,0)
 ; Note that if you have multiple transactions bundled, the
"RTN","BPSOSCD",163,0)
 ;   union of overrides from 101-401 apply to all; and if there's a
"RTN","BPSOSCD",164,0)
 ;   conflict, the last one overwrites the previous ones.
"RTN","BPSOSCD",165,0)
OVERRIDE(IEN59,MEDN) ;
"RTN","BPSOSCD",166,0)
 N IEN511,RETVAL
"RTN","BPSOSCD",167,0)
 S IEN511=$P(^BPST(IEN59,1),U,13) Q:'IEN511
"RTN","BPSOSCD",168,0)
 S RETVAL=$$GET511^BPSOSO2(IEN511,"BPS(""OVERRIDE"")","BPS(""OVERRIDE"",""RX"","_MEDN_")")
"RTN","BPSOSCD",169,0)
 Q
"RTN","BPSOSCD",170,0)
 ;
"RTN","BPSOSCD",171,0)
 ; DURVALUE - Will read in the DUR data from the DUR multiple
"RTN","BPSOSCD",172,0)
 ;   in BPS Transactions and store the values into BPS("RX",MEDN,DUR,....)
"RTN","BPSOSCD",173,0)
 ; NOTE - unlike most values, these fields are stored by their
"RTN","BPSOSCD",174,0)
 ;   field number.  Since they are repeating, it will ease the
"RTN","BPSOSCD",175,0)
 ;   retrieval of them, when we populate the claim.
"RTN","BPSOSCD",176,0)
DURVALUE(IEN59,MEDN) ;
"RTN","BPSOSCD",177,0)
 N DUR,DCNT,DURREC
"RTN","BPSOSCD",178,0)
 ;
"RTN","BPSOSCD",179,0)
 S (DUR,DCNT)=0
"RTN","BPSOSCD",180,0)
 F  S DCNT=$O(^BPST(IEN59,13,DCNT)) Q:'DCNT  D
"RTN","BPSOSCD",181,0)
 .S DURREC=$G(^BPST(IEN59,13,DCNT,0))
"RTN","BPSOSCD",182,0)
 .I DURREC="" Q
"RTN","BPSOSCD",183,0)
 .S DUR=DUR+1
"RTN","BPSOSCD",184,0)
 .S BPS("RX",MEDN,"DUR",DUR,473)=DUR            ;473-7E DUR/PPS Code Counter
"RTN","BPSOSCD",185,0)
 .S BPS("RX",MEDN,"DUR",DUR,439)=$P(DURREC,U,3) ;439-E4 Reason For Service Code
"RTN","BPSOSCD",186,0)
 .S BPS("RX",MEDN,"DUR",DUR,440)=$P(DURREC,U,2) ;440-E5 Professional Service Code
"RTN","BPSOSCD",187,0)
 .S BPS("RX",MEDN,"DUR",DUR,441)=$P(DURREC,U,4) ;441-E6 Result of Service Code
"RTN","BPSOSCD",188,0)
 .S BPS("RX",MEDN,"DUR",DUR,474)=""             ;474-8E DUR/PPS Level Of Effort
"RTN","BPSOSCD",189,0)
 .Q:$G(BPS("NCPDP","Version"))'=51  ; fields 475&476 not used in vD.0
"RTN","BPSOSCD",190,0)
 .S BPS("RX",MEDN,"DUR",DUR,475)=""             ;475-J9 DUR Co-Agent ID Qualifier
"RTN","BPSOSCD",191,0)
 .S BPS("RX",MEDN,"DUR",DUR,476)=""             ;476-H6 DUR Co-Agent ID
"RTN","BPSOSCD",192,0)
 ;
"RTN","BPSOSCD",193,0)
 Q
"RTN","BPSOSCD",194,0)
 ;
"RTN","BPSOSCD",195,0)
COB(IEN59,MEDN) ; process the COB fields and build the COB array
"RTN","BPSOSCD",196,0)
 ; Code for Payer-Patient Responsibility and Benefit Stages multiples
"RTN","BPSOSCD",197,0)
 ;  not implemented yet (except by certification)
"RTN","BPSOSCD",198,0)
 ;
"RTN","BPSOSCD",199,0)
 ; build array of COB secondary claim data from the BPS Transaction file - esg - 6/16/10
"RTN","BPSOSCD",200,0)
 N COBPIEN,APDIEN,REJIEN,DATA
"RTN","BPSOSCD",201,0)
 K BPS("RX",MEDN,"OTHER PAYER")
"RTN","BPSOSCD",202,0)
 ;
"RTN","BPSOSCD",203,0)
 ; Field 337-4C COB OTHER PAYMENTS COUNT (9002313.59,1204)  moved into [1] below
"RTN","BPSOSCD",204,0)
 S BPS("RX",MEDN,"OTHER PAYER",0)=$P($G(^BPST(IEN59,12)),U,4)
"RTN","BPSOSCD",205,0)
 ;
"RTN","BPSOSCD",206,0)
 S COBPIEN=0 F  S COBPIEN=$O(^BPST(IEN59,14,COBPIEN)) Q:'COBPIEN  D
"RTN","BPSOSCD",207,0)
 . ; Note that this will set pieces 1-7.  Piece 8 is reserved for
"RTN","BPSOSCD",208,0)
 . ;  Payer-Patient Responsibility Count and is set by the certification code
"RTN","BPSOSCD",209,0)
 . S BPS("RX",MEDN,"OTHER PAYER",COBPIEN,0)=$G(^BPST(IEN59,14,COBPIEN,0))
"RTN","BPSOSCD",210,0)
 . ;
"RTN","BPSOSCD",211,0)
 . ; retrieve data from other payer amount paid multiple
"RTN","BPSOSCD",212,0)
 . S APDIEN=0 F  S APDIEN=$O(^BPST(IEN59,14,COBPIEN,1,APDIEN)) Q:'APDIEN  D
"RTN","BPSOSCD",213,0)
 .. S DATA=$G(^BPST(IEN59,14,COBPIEN,1,APDIEN,0))
"RTN","BPSOSCD",214,0)
 .. S BPS("RX",MEDN,"OTHER PAYER",COBPIEN,"P",APDIEN,0)=$P(DATA,"^",1)_"^"_$$GET1^DIQ(9002313.2,$P(DATA,"^",2),.01)
"RTN","BPSOSCD",215,0)
 .. Q
"RTN","BPSOSCD",216,0)
 . ;
"RTN","BPSOSCD",217,0)
 . ; retrieve data from other payer reject multiple
"RTN","BPSOSCD",218,0)
 . S REJIEN=0 F  S REJIEN=$O(^BPST(IEN59,14,COBPIEN,2,REJIEN)) Q:'REJIEN  D
"RTN","BPSOSCD",219,0)
 .. S BPS("RX",MEDN,"OTHER PAYER",COBPIEN,"R",REJIEN,0)=$G(^BPST(IEN59,14,COBPIEN,2,REJIEN,0))
"RTN","BPSOSCD",220,0)
 Q
"RTN","BPSOSCD",221,0)
 ;
"RTN","BPSOSCD",222,0)
PRVADRS(IEN59,PRVIEN) ; site address for a provider
"RTN","BPSOSCD",223,0)
 ; returns "street address^city^st^zip"
"RTN","BPSOSCD",224,0)
 ; IEN59=BPS TRANSACTION (#9002313.59) ien
"RTN","BPSOSCD",225,0)
 ; PRVIEN=provider IEN in NEW PERSON file (#200)
"RTN","BPSOSCD",226,0)
 ;
"RTN","BPSOSCD",227,0)
 I '$G(IEN59) Q ""
"RTN","BPSOSCD",228,0)
 I '$G(PRVIEN) Q ""
"RTN","BPSOSCD",229,0)
 ;
"RTN","BPSOSCD",230,0)
 N BPSND,F,IPTR,IEN,OPSITE,PRVADDR,PRVNVA,RSLT,AD2
"RTN","BPSOSCD",231,0)
 S RSLT=""
"RTN","BPSOSCD",232,0)
 ;
"RTN","BPSOSCD",233,0)
 S PRVNVA=+$$GET1^DIQ(200,PRVIEN_",",53.91,"I")  ; NON-VA PRESCRIBER
"RTN","BPSOSCD",234,0)
 ;
"RTN","BPSOSCD",235,0)
 ; if false, it's a VA prescriber - address data found in file 4 for the VA pharmacy
"RTN","BPSOSCD",236,0)
 I 'PRVNVA D  G PRVADX
"RTN","BPSOSCD",237,0)
 .S OPSITE=$P($G(^BPST(IEN59,1)),U,4)  ; OUTPATIENT SITE ptr
"RTN","BPSOSCD",238,0)
 .Q:'OPSITE
"RTN","BPSOSCD",239,0)
 .S BPSND="BPS59" K ^TMP($J,BPSND)
"RTN","BPSOSCD",240,0)
 .D PSS^PSO59(OPSITE,"",BPSND)
"RTN","BPSOSCD",241,0)
 .S IPTR=$P($G(^TMP($J,BPSND,OPSITE,101)),U)  ; INSTITUTION ptr
"RTN","BPSOSCD",242,0)
 .S:IPTR RSLT=$$MADD^XUAF4(IPTR)_U_$$GET1^DIQ(4,IPTR_",",4.02)_U_$$GET1^DIQ(4,IPTR_",",4.04,"I")
"RTN","BPSOSCD",243,0)
 .K ^TMP($J,BPSND)
"RTN","BPSOSCD",244,0)
 ;
"RTN","BPSOSCD",245,0)
 ; Non-VA prescriber - address data found in file 200
"RTN","BPSOSCD",246,0)
 F F=.111,.112,.113,.114,.115,.116 S PRVADDR(F)=$$GET1^DIQ(200,PRVIEN_",",F)
"RTN","BPSOSCD",247,0)
 ; Get State info
"RTN","BPSOSCD",248,0)
 S PRVADDR(.115,"ABBR")="",IEN=$$GET1^DIQ(200,PRVIEN_",",.115,"I"),PRVADDR(.115,"ABBR")=$$GET1^DIQ(5,+IEN_",",1)
"RTN","BPSOSCD",249,0)
 ; Build Address Line 2
"RTN","BPSOSCD",250,0)
 S AD2=PRVADDR(.112) I PRVADDR(.113)]"" S AD2=AD2_$S(AD2]"":" ",1:"")_PRVADDR(.113)
"RTN","BPSOSCD",251,0)
 ; Build result string
"RTN","BPSOSCD",252,0)
 S RSLT=PRVADDR(.111)_U_PRVADDR(.114)_U_PRVADDR(.115,"ABBR")_U_PRVADDR(.116)_U_AD2_U_IEN
"RTN","BPSOSCD",253,0)
 ;
"RTN","BPSOSCD",254,0)
PRVADX ;
"RTN","BPSOSCD",255,0)
 Q RSLT
"RTN","BPSOSCD",256,0)
 ;
"RTN","BPSOSCD",257,0)
COUNTRY(STATE,IEN) ;
"RTN","BPSOSCD",258,0)
 ; Convert STATE abbreviation into a ISO-3166-1 country code
"RTN","BPSOSCD",259,0)
 ; Input:
"RTN","BPSOSCD",260,0)
 ;    STATE: State Abbreviation
"RTN","BPSOSCD",261,0)
 ; Output: ISO-3166-1 Country Code
"RTN","BPSOSCD",262,0)
 ;
"RTN","BPSOSCD",263,0)
 I $G(STATE)="" Q ""
"RTN","BPSOSCD",264,0)
 I '$G(IEN) Q ""
"RTN","BPSOSCD",265,0)
 I ",BC,MB,NB,NF,NS,NT,ON,PE,QC,SK,YT,CANAD,NU,"[(","_STATE_",") Q "CA" ; Canada
"RTN","BPSOSCD",266,0)
 I STATE="FG"!(STATE="EU")!(STATE="UN") Q ""  ; Foreign Country, Europe, Unknown
"RTN","BPSOSCD",267,0)
 I STATE="AS" Q "AS"  ; American Samoa
"RTN","BPSOSCD",268,0)
 I STATE="FM" Q "FM"  ; Federated States of Micronesia
"RTN","BPSOSCD",269,0)
 I STATE="GU" Q "GU"  ; Guam
"RTN","BPSOSCD",270,0)
 I STATE="MH" Q "MH"  ; Marshall Islands
"RTN","BPSOSCD",271,0)
 I STATE="MP" Q "MP"  ; Northern Mariana Islands
"RTN","BPSOSCD",272,0)
 I STATE="MX" Q "MX"  ; Mexico
"RTN","BPSOSCD",273,0)
 I STATE="PH" Q "PH"  ; Philippines
"RTN","BPSOSCD",274,0)
 I STATE="PR" Q "PR"  ; Puerto Rico
"RTN","BPSOSCD",275,0)
 I STATE="PW" Q "PW"  ; Palau
"RTN","BPSOSCD",276,0)
 I STATE="VI" Q "VI"  ; Virgin Islands
"RTN","BPSOSCD",277,0)
 I $$GET1^DIQ(5,IEN_",",2.2,"I")=1 Q "US"
"RTN","BPSOSCD",278,0)
 Q ""
"RTN","BPSOSCE")
0^20^B13028933
"RTN","BPSOSCE",1,0)
BPSOSCE ;BHAM ISC/FCS/DRS/DLF - New entry in 9002313.02 ;06/01/2004
"RTN","BPSOSCE",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,10,11,15,19**;JUN 2004;Build 18
"RTN","BPSOSCE",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSCE",4,0)
 ;
"RTN","BPSOSCE",5,0)
 ;Create an Electronic Claim Submission record
"RTN","BPSOSCE",6,0)
 ; the BPS array is shared by all of the BPSOSC* routines
"RTN","BPSOSCE",7,0)
 ; BPS is created in BPSOSCA
"RTN","BPSOSCE",8,0)
 ;
"RTN","BPSOSCE",9,0)
 Q
"RTN","BPSOSCE",10,0)
 ;
"RTN","BPSOSCE",11,0)
 ;NEWCLAIM^BPSOSCE called from BPSOSCA from BPSOSQG from BPSOSQ2
"RTN","BPSOSCE",12,0)
 ; create /update an entry in BPS CLAIMS (#9002313.02)
"RTN","BPSOSCE",13,0)
 ; then call the code that populates the entry
"RTN","BPSOSCE",14,0)
 ; START = START Medication Number
"RTN","BPSOSCE",15,0)
 ; END = END Medication Number
"RTN","BPSOSCE",16,0)
 ; TOTAL = TOTAL Medications in Claim
"RTN","BPSOSCE",17,0)
 ; process from BPS("RX",START) through BPS("RX",END)
"RTN","BPSOSCE",18,0)
NEWCLAIM(START,END,TOTAL) ; function, returns null on success, else error
"RTN","BPSOSCE",19,0)
 ;
"RTN","BPSOSCE",20,0)
 N CLAIMID,COUNT,DA,DIC,DIK,DLAYGO,ERROR,INDEX,NODE0,ROU,SEG,X,Y
"RTN","BPSOSCE",21,0)
 S ROU=$T(+0),START=+$G(START),END=+$G(END),TOTAL=+$G(TOTAL)
"RTN","BPSOSCE",22,0)
 ;
"RTN","BPSOSCE",23,0)
 ;Create new record in Claim Submission File (9002313.02)
"RTN","BPSOSCE",24,0)
 ; try for exclusive access for 1 min. before logging error
"RTN","BPSOSCE",25,0)
 F  L +^XTMP(ROU,"NEWCLAIM"):60 Q:$T  D
"RTN","BPSOSCE",26,0)
 .N A S A=$$IMPOSS^BPSOSUE("L","RTI","Single-threaded routine",,,ROU)
"RTN","BPSOSCE",27,0)
 ; Generate Claim ID
"RTN","BPSOSCE",28,0)
 S CLAIMID=$$CLAIMID^BPSECX1($G(BPS("RX",START,"IEN59")))
"RTN","BPSOSCE",29,0)
 I CLAIMID="" D
"RTN","BPSOSCE",30,0)
 .S ERROR="320^VA Claim ID not created"
"RTN","BPSOSCE",31,0)
 .D LOG(ROU_"-Failed to create Claim ID")
"RTN","BPSOSCE",32,0)
 ;
"RTN","BPSOSCE",33,0)
 ; Create claim record
"RTN","BPSOSCE",34,0)
 D:'$G(ERROR)
"RTN","BPSOSCE",35,0)
 .S DLAYGO=9002313.02,DIC="^BPSC(",DIC(0)="LXZ",X=CLAIMID
"RTN","BPSOSCE",36,0)
 .D ^DIC Q:Y>0  ; less than zero is error
"RTN","BPSOSCE",37,0)
 .S ERROR="321^Failed to create claim record"
"RTN","BPSOSCE",38,0)
 .D LOG(ROU_"-Failed to create an entry in file 9002313.02")
"RTN","BPSOSCE",39,0)
 ;
"RTN","BPSOSCE",40,0)
 L -^XTMP(ROU,"NEWCLAIM")
"RTN","BPSOSCE",41,0)
 ;
"RTN","BPSOSCE",42,0)
 Q:$G(ERROR) ERROR
"RTN","BPSOSCE",43,0)
 ;
"RTN","BPSOSCE",44,0)
 ; Update BPS and Log it
"RTN","BPSOSCE",45,0)
 S BPS(9002313.02)=+Y
"RTN","BPSOSCE",46,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSOSCE",47,0)
 D LOG(ROU_"-Created claim ID "_CLAIMID_" (IEN "_BPS(9002313.02)_")")
"RTN","BPSOSCE",48,0)
 ;
"RTN","BPSOSCE",49,0)
 ; Update zero node of the claim
"RTN","BPSOSCE",50,0)
 S NODE0=$G(^BPSC(BPS(9002313.02),0))
"RTN","BPSOSCE",51,0)
 S $P(NODE0,U,2)=$G(BPS("NCPDP","IEN")) ; Electronic Payor (Payer Sheet)
"RTN","BPSOSCE",52,0)
 S $P(NODE0,U,4)=2 ; Transmit Flag - 2 is 'Yes (Point of Sale)'
"RTN","BPSOSCE",53,0)
 S $P(NODE0,U,6)=$$NOWFM^BPSOSU1() ; Created On
"RTN","BPSOSCE",54,0)
 S ^BPSC(BPS(9002313.02),0)=NODE0
"RTN","BPSOSCE",55,0)
 ;
"RTN","BPSOSCE",56,0)
 ; Update Patient Name
"RTN","BPSOSCE",57,0)
 S $P(^BPSC(BPS(9002313.02),1),U,1)=$G(BPS("Patient","Name"))
"RTN","BPSOSCE",58,0)
 S $P(^BPSC(BPS(9002313.02),1),U,4)=$G(BPS("Insurer","IEN"))
"RTN","BPSOSCE",59,0)
 ; Update TRANSACTION field
"RTN","BPSOSCE",60,0)
 S $P(^BPSC(BPS(9002313.02),0),U,8)=$G(BPS("RX",START,"IEN59"))
"RTN","BPSOSCE",61,0)
 ;
"RTN","BPSOSCE",62,0)
 ; Count of meds in claim
"RTN","BPSOSCE",63,0)
 S BPS("Transaction Count")=TOTAL
"RTN","BPSOSCE",64,0)
 ;
"RTN","BPSOSCE",65,0)
 ; Process the 'non-multiple' segments (Header, Patient, Cardholder)
"RTN","BPSOSCE",66,0)
 F SEG=100:10:120 D XLOOP^BPSOSCF(BPS("NCPDP","IEN"),SEG)
"RTN","BPSOSCE",67,0)
 ;
"RTN","BPSOSCE",68,0)
 ; zero node for MEDICATIONS SUB-FIELD (#9002313.0201)
"RTN","BPSOSCE",69,0)
 S:'$D(^BPSC(BPS(9002313.02),400,0)) ^(0)="^9002313.0201PA^^"
"RTN","BPSOSCE",70,0)
 S COUNT=0 F INDEX=START:1:END D
"RTN","BPSOSCE",71,0)
 .; Create zero node for entry in multiple
"RTN","BPSOSCE",72,0)
 .S COUNT=COUNT+1,NODE0=""
"RTN","BPSOSCE",73,0)
 .S $P(NODE0,U)=INDEX,$P(NODE0,U,4)=$G(BPS("RX",INDEX,"Drug Name")),$P(NODE0,U,5)=$G(BPS("RX",INDEX,"RX IEN"))
"RTN","BPSOSCE",74,0)
 .S ^BPSC(BPS(9002313.02),400,INDEX,0)=NODE0
"RTN","BPSOSCE",75,0)
 .S BPS(9002313.0201)=INDEX
"RTN","BPSOSCE",76,0)
 .; Process entries in medication multiple
"RTN","BPSOSCE",77,0)
 .F SEG=130:10:300 D XLOOP^BPSOSCF(BPS("NCPDP","IEN"),SEG,INDEX) ; BPS*1*19 - add Intermediary and Last Known 4Rx segments
"RTN","BPSOSCE",78,0)
 .; Update the indices
"RTN","BPSOSCE",79,0)
 .S ^BPSC(BPS(9002313.02),400,"B",INDEX,INDEX)=""
"RTN","BPSOSCE",80,0)
 .; Update top-level node of the multiple
"RTN","BPSOSCE",81,0)
 .S NODE0=$G(^BPSC(BPS(9002313.02),400,0))
"RTN","BPSOSCE",82,0)
 .S $P(NODE0,U,3)=COUNT,$P(NODE0,U,4)=COUNT,^BPSC(BPS(9002313.02),400,0)=NODE0
"RTN","BPSOSCE",83,0)
 ;
"RTN","BPSOSCE",84,0)
 ; Cross-Reference Claim Submission Record
"RTN","BPSOSCE",85,0)
 S DIK="^BPSC(",DA=BPS(9002313.02) D IX1^DIK
"RTN","BPSOSCE",86,0)
 ;
"RTN","BPSOSCE",87,0)
 Q ""  ; Return null on success
"RTN","BPSOSCE",88,0)
 ;
"RTN","BPSOSCE",89,0)
LOG(MSG) ;log the message for all the transactions in this 9002313.02 claim
"RTN","BPSOSCE",90,0)
 N I,IEN59
"RTN","BPSOSCE",91,0)
 F I=START:1:END S IEN59=$G(BPS("RX",I,"IEN59")) D:IEN59 LOG^BPSOSL(IEN59,MSG)
"RTN","BPSOSCE",92,0)
 Q
"RTN","BPSOSCE",93,0)
 ;
"RTN","BPSOSCF")
0^17^B30984367
"RTN","BPSOSCF",1,0)
BPSOSCF ;BHAM ISC/FCS/DRS/DLF - Low-level format of .02 ;06/01/2004
"RTN","BPSOSCF",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8,10,15,19**;JUN 2004;Build 18
"RTN","BPSOSCF",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSCF",4,0)
 ;
"RTN","BPSOSCF",5,0)
 ; 100  (Transaction Header Segment)
"RTN","BPSOSCF",6,0)
 ; 110  (Patient Segment)
"RTN","BPSOSCF",7,0)
 ; 120  (Insurance Segment)
"RTN","BPSOSCF",8,0)
 ; 130  (Claim Segment)
"RTN","BPSOSCF",9,0)
 ; 140  (Pharmacy Provider Segment)
"RTN","BPSOSCF",10,0)
 ; 150  (Prescriber Segment)
"RTN","BPSOSCF",11,0)
 ; 160  (COB/Other Payments Segment)
"RTN","BPSOSCF",12,0)
 ; 170  (Worker's Compensation Segment)
"RTN","BPSOSCF",13,0)
 ; 180  (DUR/PPS Segment)
"RTN","BPSOSCF",14,0)
 ; 190  (Pricing Segment)
"RTN","BPSOSCF",15,0)
 ; 200  (Coupon Segment)
"RTN","BPSOSCF",16,0)
 ; 210  (Compound Segment)
"RTN","BPSOSCF",17,0)
 ; 220  (Prior Authorization Segment)
"RTN","BPSOSCF",18,0)
 ; 230  (Clinical Segment)
"RTN","BPSOSCF",19,0)
 ; 240  (Additional Documentation Segment)
"RTN","BPSOSCF",20,0)
 ; 250  (Facility Segment)
"RTN","BPSOSCF",21,0)
 ; 260  (Narrative Segment)
"RTN","BPSOSCF",22,0)
 ; 270  (Purchaser Segment)
"RTN","BPSOSCF",23,0)
 ; 280  (Service Provider Segment)
"RTN","BPSOSCF",24,0)
 ; 290  (Intermediary Segment)
"RTN","BPSOSCF",25,0)
 ; 300  (Last Known 4Rx Segment)
"RTN","BPSOSCF",26,0)
 ;
"RTN","BPSOSCF",27,0)
 ; FORMAT = IEN in BPS NCPDP FORMATS (#9002313.92)
"RTN","BPSOSCF",28,0)
 ; NODE = Segment Node
"RTN","BPSOSCF",29,0)
 ; MEDN = Transaction multiple in BPS Claims
"RTN","BPSOSCF",30,0)
XLOOP(FORMAT,NODE,MEDN) ; format claim record
"RTN","BPSOSCF",31,0)
 ;
"RTN","BPSOSCF",32,0)
 Q:$G(FORMAT)=""  Q:$G(NODE)=""  ; FORMAT, NODE required
"RTN","BPSOSCF",33,0)
 ;
"RTN","BPSOSCF",34,0)
 N FLAG,FLDIEN,FLDINFO,MDATA,NCPVERS,ORDER,OVERRIDE,PMODE,RECMIEN,X
"RTN","BPSOSCF",35,0)
 ; quit If the payer sheet doesn't have the segment
"RTN","BPSOSCF",36,0)
 I '$D(^BPSF(9002313.92,FORMAT,NODE,0)) Q
"RTN","BPSOSCF",37,0)
 ;
"RTN","BPSOSCF",38,0)
 ; VA doesn't do these segments
"RTN","BPSOSCF",39,0)
 I ",300,290,280,270,260,250,240,230,220,210,200,170,140,"[(","_NODE_",") Q
"RTN","BPSOSCF",40,0)
 ;
"RTN","BPSOSCF",41,0)
 ; Per NCPDP standard, eligibility doesn't support segments listed below
"RTN","BPSOSCF",42,0)
 I BPS("Transaction Code")="E1",",290,280,270,260,250,230,220,210,200,190,180,170,160,130,"[(","_NODE_",") Q
"RTN","BPSOSCF",43,0)
 ;
"RTN","BPSOSCF",44,0)
 ; For COB, if the payer sequence is primary, then quit and don't output the COB fields
"RTN","BPSOSCF",45,0)
 I NODE=160,$$COB59^BPSUTIL2(+$G(BPS("RX",BPS(9002313.0201),"IEN59")))=1 Q
"RTN","BPSOSCF",46,0)
 ;
"RTN","BPSOSCF",47,0)
 ; COB processing is handled differently
"RTN","BPSOSCF",48,0)
 I NODE=160 D COB^BPSOSHF(FORMAT,NODE,MEDN) Q
"RTN","BPSOSCF",49,0)
 ;
"RTN","BPSOSCF",50,0)
 ; DUR is handled differently since it is repeating
"RTN","BPSOSCF",51,0)
 I NODE=180 D DURPPS^BPSOSHF(FORMAT,NODE,MEDN) Q
"RTN","BPSOSCF",52,0)
 ;
"RTN","BPSOSCF",53,0)
 ; Loop through the fields in the segment
"RTN","BPSOSCF",54,0)
 S ORDER=0
"RTN","BPSOSCF",55,0)
 F  S ORDER=$O(^BPSF(9002313.92,FORMAT,NODE,"B",ORDER)) Q:'ORDER  D
"RTN","BPSOSCF",56,0)
 . ; Get the pointer to the BPS NCPDP FIELD DEFS table
"RTN","BPSOSCF",57,0)
 . S RECMIEN=$O(^BPSF(9002313.92,FORMAT,NODE,"B",ORDER,0))
"RTN","BPSOSCF",58,0)
 . I 'RECMIEN D IMPOSS^BPSOSUE("DB","TI","NODE="_NODE,"ORDER="_ORDER,2,$T(+0)) Q
"RTN","BPSOSCF",59,0)
 . S MDATA=^BPSF(9002313.92,FORMAT,NODE,RECMIEN,0),FLDIEN=$P(MDATA,U,2)
"RTN","BPSOSCF",60,0)
 .; Corrupt or erroneous format file
"RTN","BPSOSCF",61,0)
 . I 'FLDIEN Q
"RTN","BPSOSCF",62,0)
 . S FLDINFO=$G(^BPSF(9002313.91,FLDIEN,0))  ; BPS NCPDP FIELD DEFS (#9002313.91)
"RTN","BPSOSCF",63,0)
 . I FLDINFO="" D IMPOSS^BPSOSUE("DB,P","TI","FLDIEN="_FLDIEN,,"XLOOP",$T(+0)) Q
"RTN","BPSOSCF",64,0)
 .; Quit for 111-AM Segment Identification
"RTN","BPSOSCF",65,0)
 .;           478-H7 Other Amount Claimed Submitted Count
"RTN","BPSOSCF",66,0)
 .;           479-H8 Other Amount Claimed Submitted Qualifier
"RTN","BPSOSCF",67,0)
 .; 478 and 479 are handled by 480 and 111 is standard field for each segment
"RTN","BPSOSCF",68,0)
 . S X=$P(FLDINFO,U) I ",111,478,479,"[(","_X_",") Q
"RTN","BPSOSCF",69,0)
 .;
"RTN","BPSOSCF",70,0)
 .; Set override value (may not be defined so override will be null)
"RTN","BPSOSCF",71,0)
 . I $D(MEDN) S OVERRIDE=$G(BPS("OVERRIDE","RX",MEDN,FLDIEN))
"RTN","BPSOSCF",72,0)
 . E  S OVERRIDE=$G(BPS("OVERRIDE",FLDIEN))
"RTN","BPSOSCF",73,0)
 .;
"RTN","BPSOSCF",74,0)
 .; Get processing mode (S-Standard (default), X-Special Code)
"RTN","BPSOSCF",75,0)
 . S PMODE=$P(MDATA,U,3)
"RTN","BPSOSCF",76,0)
 . I PMODE="" S PMODE="S" ;default it
"RTN","BPSOSCF",77,0)
 .;
"RTN","BPSOSCF",78,0)
 .; Default FLAG and value being computed
"RTN","BPSOSCF",79,0)
 . S FLAG="GFS"
"RTN","BPSOSCF",80,0)
 . S BPS("X")=""
"RTN","BPSOSCF",81,0)
 . ;
"RTN","BPSOSCF",82,0)
 . ; If there is an override, set BPS("X") to it and
"RTN","BPSOSCF",83,0)
 . ;   only do Format and Set code
"RTN","BPSOSCF",84,0)
 . I OVERRIDE]"" S FLAG="FS",BPS("X")=OVERRIDE
"RTN","BPSOSCF",85,0)
 . ;
"RTN","BPSOSCF",86,0)
 . ; If Special Code mode is set, execute special code instead
"RTN","BPSOSCF",87,0)
 . ;   of field's Get code and change Flag to FS so Format and
"RTN","BPSOSCF",88,0)
 . ;   Set code is still done but not GET code
"RTN","BPSOSCF",89,0)
 . I PMODE="X",OVERRIDE="" D
"RTN","BPSOSCF",90,0)
 .. S FLAG="FS"
"RTN","BPSOSCF",91,0)
 .. D XSPCCODE(FORMAT,NODE,RECMIEN)
"RTN","BPSOSCF",92,0)
 . ;
"RTN","BPSOSCF",93,0)
 . ; Call XFLDCODE to do processing based on FLAG setting
"RTN","BPSOSCF",94,0)
 . D XFLDCODE(NODE,FLDIEN,FLAG)
"RTN","BPSOSCF",95,0)
 ;
"RTN","BPSOSCF",96,0)
 Q
"RTN","BPSOSCF",97,0)
 ;
"RTN","BPSOSCF",98,0)
 ;
"RTN","BPSOSCF",99,0)
 ; Execute Get, Format and/or Set MUMPS code for NCPDP Field
"RTN","BPSOSCF",100,0)
 ;
"RTN","BPSOSCF",101,0)
 ; Parameters:   NODE    -  Segment Node
"RTN","BPSOSCF",102,0)
 ;               FLDIEN  -  NCPDP Field Definitions IEN
"RTN","BPSOSCF",103,0)
 ;               FLAG    -  If variable contains:
"RTN","BPSOSCF",104,0)
 ;                          "G" - Execute Get Code
"RTN","BPSOSCF",105,0)
 ;                          "F" - Execute Format Code
"RTN","BPSOSCF",106,0)
 ;                          "S" - Execute S Code
"RTN","BPSOSCF",107,0)
 ;
"RTN","BPSOSCF",108,0)
 ;  When called by the DURPPS^BPSOSHF, DUR is also set and used
"RTN","BPSOSCF",109,0)
 ;   by the SET logic for the DUR fields.  This variable is newed
"RTN","BPSOSCF",110,0)
 ;   by the calling routine
"RTN","BPSOSCF",111,0)
XFLDCODE(NODE,FLDIEN,FLAG) ;EP
"RTN","BPSOSCF",112,0)
 ; 5.1 loops through the 10, 25, 30 nodes
"RTN","BPSOSCF",113,0)
 ;
"RTN","BPSOSCF",114,0)
 N FNODE,INDEX,MCODE,NCPVERS,X
"RTN","BPSOSCF",115,0)
 ;
"RTN","BPSOSCF",116,0)
 ; Check if record exists and FLAG variable is set correctly
"RTN","BPSOSCF",117,0)
 ; Changed from Q: to give fatal error - 10/18/2000
"RTN","BPSOSCF",118,0)
 I 'FLDIEN D IMPOSS^BPSOSUE("DB,P","TI","FLDIEN="_FLDIEN,,"XFLDCODE",$T(+0)) Q
"RTN","BPSOSCF",119,0)
 I FLAG="" D IMPOSS^BPSOSUE("DB,P","TI","FLAG null",,"XFLDCODE",$T(+0)) Q
"RTN","BPSOSCF",120,0)
 ; get NCPDP version, default to vD.0
"RTN","BPSOSCF",121,0)
 S NCPVERS=$G(BPS("NCPDP","Version")) S:NCPVERS="" NCPVERS="D0"
"RTN","BPSOSCF",122,0)
 ; Loop through GET CODE, D0 FORMAT (or FORMAT), SET CODE w-p fields and execute code
"RTN","BPSOSCF",123,0)
 F FNODE=10,20,25,30 D
"RTN","BPSOSCF",124,0)
 .I FNODE=25,NCPVERS="D0" Q  ; node 25 is FORMAT CODE for versions before D.0
"RTN","BPSOSCF",125,0)
 .I FNODE=20,NCPVERS'="D0" Q  ; node 20 is FORMAT CODE for vD.0
"RTN","BPSOSCF",126,0)
 .I FLAG'[$S(FNODE=10:"G",FNODE=25!(FNODE=20):"F",FNODE=30:"S",1:"") Q
"RTN","BPSOSCF",127,0)
 .I '$D(^BPSF(9002313.91,FLDIEN,FNODE,0)) D IMPOSS^BPSOSUE("DB","TI","FLDIEN="_FLDIEN,"FNODE="_FNODE,"XFLDCODE",$T(+0))
"RTN","BPSOSCF",128,0)
 .; Loop through the W-P field and execute each line
"RTN","BPSOSCF",129,0)
 .S INDEX=0
"RTN","BPSOSCF",130,0)
 .F  S INDEX=$O(^BPSF(9002313.91,FLDIEN,FNODE,INDEX)) Q:'INDEX  D
"RTN","BPSOSCF",131,0)
 ..; If doing SET code and if this is not the header segment, add the ID prefix
"RTN","BPSOSCF",132,0)
 ..I FNODE=30,NODE'=100 S BPS("X")=$P($G(^BPSF(9002313.91,FLDIEN,5)),U,1)_BPS("X")
"RTN","BPSOSCF",133,0)
 ..; Get the code and xecute
"RTN","BPSOSCF",134,0)
 ..S MCODE=$G(^BPSF(9002313.91,FLDIEN,FNODE,INDEX,0))
"RTN","BPSOSCF",135,0)
 ..Q:MCODE=""  Q:$E(MCODE,1)=";"  ; no M code or comment
"RTN","BPSOSCF",136,0)
 ..X MCODE
"RTN","BPSOSCF",137,0)
 ;
"RTN","BPSOSCF",138,0)
 Q
"RTN","BPSOSCF",139,0)
 ;
"RTN","BPSOSCF",140,0)
 ;
"RTN","BPSOSCF",141,0)
 ; Execute Special Code (for NCPDP Field within NCPDP Record)
"RTN","BPSOSCF",142,0)
 ; FORMAT = NCPDP Record Format IEN (9002313.92)
"RTN","BPSOSCF",143,0)
 ; NODE = Global node value (100,110,120,130,140)
"RTN","BPSOSCF",144,0)
 ; RECMIEN = Field Multiple IEN
"RTN","BPSOSCF",145,0)
XSPCCODE(FORMAT,NODE,RECMIEN) ;EP - Above and BPSOSHR
"RTN","BPSOSCF",146,0)
 ; BPS NCPDP FORMATS (#9002313.92)
"RTN","BPSOSCF",147,0)
 I '$D(^BPSF(9002313.92,FORMAT,NODE,RECMIEN,0)) D IMPOSS^BPSOSUE("DB,P","TI","no special code there to XECUTE","FORMAT="_FORMAT,"XSPCCODE",$T(+0)) Q
"RTN","BPSOSCF",148,0)
 N INDEX,MCODE
"RTN","BPSOSCF",149,0)
 S INDEX=0
"RTN","BPSOSCF",150,0)
 F  S INDEX=$O(^BPSF(9002313.92,FORMAT,NODE,RECMIEN,1,INDEX)) Q:'INDEX  D
"RTN","BPSOSCF",151,0)
 . S MCODE=$G(^BPSF(9002313.92,FORMAT,NODE,RECMIEN,1,INDEX,0))
"RTN","BPSOSCF",152,0)
 . Q:MCODE=""
"RTN","BPSOSCF",153,0)
 . Q:$E(MCODE,1)=";"
"RTN","BPSOSCF",154,0)
 . X MCODE
"RTN","BPSOSCF",155,0)
 Q
"RTN","BPSOSCF",156,0)
 ;
"RTN","BPSOSH2")
0^15^B141967265
"RTN","BPSOSH2",1,0)
BPSOSH2 ;BHAM ISC/SD/lwj/DLF - Assemble formatted claim ;06/01/2004
"RTN","BPSOSH2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8,10,15,19**;JUN 2004;Build 18
"RTN","BPSOSH2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSH2",4,0)
 ;
"RTN","BPSOSH2",5,0)
 ;    5.1 had 14 claim segments (Header, Patient, Insurance, Claim
"RTN","BPSOSH2",6,0)
 ;                                Pharmacy Provider, Prescriber,
"RTN","BPSOSH2",7,0)
 ;                                COB, Workers Comp, DUR, Pricing,
"RTN","BPSOSH2",8,0)
 ;                                Coupon, Compound, Prior Auth,
"RTN","BPSOSH2",9,0)
 ;                                Clinical)
"RTN","BPSOSH2",10,0)
 ;
"RTN","BPSOSH2",11,0)
 ;    D.0 added 3 new request segments (Additional Documentation,
"RTN","BPSOSH2",12,0)
 ;                                       Facility, Narrative)
"RTN","BPSOSH2",13,0)
 ;
"RTN","BPSOSH2",14,0)
 ;    D.1 - D.9 introduces Alphanumeric NCPDP numbers and new
"RTN","BPSOSH2",15,0)
 ;                              Purchase and Provider segments
"RTN","BPSOSH2",16,0)
 ;
"RTN","BPSOSH2",17,0)
 ;    E.0 - E.6 added 2 new request segments (Intermediary, Last
"RTN","BPSOSH2",18,0)
 ;                                             Known 4RX)
"RTN","BPSOSH2",19,0)
 ;
"RTN","BPSOSH2",20,0)
 ;    5.1/D.0 requires field identifiers and separators on all fields
"RTN","BPSOSH2",21,0)
 ;        other than the header
"RTN","BPSOSH2",22,0)
 ;    5.1/D.0 segment separators are required prior to each segment
"RTN","BPSOSH2",23,0)
 ;        following the header
"RTN","BPSOSH2",24,0)
 ;    5.1/D.0 group separators appear at the end of each
"RTN","BPSOSH2",25,0)
 ;        transaction (prescription)
"RTN","BPSOSH2",26,0)
 ;    5.1/D.0 only want to send segments that have data - a new
"RTN","BPSOSH2",27,0)
 ;        segment record will hold the data until we are sure
"RTN","BPSOSH2",28,0)
 ;        we have something to send
"RTN","BPSOSH2",29,0)
 ;
"RTN","BPSOSH2",30,0)
 ; Put together ASCII formatted record per the Payer Sheet Definition
"RTN","BPSOSH2",31,0)
 ; Input:  
"RTN","BPSOSH2",32,0)
 ;   NODES - "100^110^120" or "130^140^150^160^170^180^190^200^210^220^230^240^250^260^270^280^290^300"
"RTN","BPSOSH2",33,0)
 ; Passed by Ref:
"RTN","BPSOSH2",34,0)
 ;  .IEN - Internal Entry Number array
"RTN","BPSOSH2",35,0)
 ;  .BPS - Formatted Data Array with claim and transaction data
"RTN","BPSOSH2",36,0)
 ;  .REC - Formatted ASCII record (result)
"RTN","BPSOSH2",37,0)
 ;
"RTN","BPSOSH2",38,0)
XLOOP(NODES,IEN,BPS,REC) ;EP - from BPSECA1
"RTN","BPSOSH2",39,0)
 ;
"RTN","BPSOSH2",40,0)
 N DATAFND,FDATA,FLAG,FLDDATA,FLDID,FLDIEN,FLDNUM,INDEX,MDATA,NODE,ORDER,PMODE,RECMIEN,SEGREC
"RTN","BPSOSH2",41,0)
 N VER,TYPE
"RTN","BPSOSH2",42,0)
 ;
"RTN","BPSOSH2",43,0)
 ; Get payer sheet version and transaction type
"RTN","BPSOSH2",44,0)
 S VER=$P($G(^BPSF(9002313.92,+$G(IEN(9002313.92)),1)),U,2)
"RTN","BPSOSH2",45,0)
 S TYPE=$G(BPS(9002313.02,+$G(IEN(9002313.02)),103,"I"))
"RTN","BPSOSH2",46,0)
 ;
"RTN","BPSOSH2",47,0)
 ; Loop through the NODES variable delimited by U
"RTN","BPSOSH2",48,0)
 F INDEX=1:1:$L(NODES,U) D
"RTN","BPSOSH2",49,0)
 . S NODE=$P(NODES,U,INDEX) Q:NODE=""
"RTN","BPSOSH2",50,0)
 . ;
"RTN","BPSOSH2",51,0)
 . ; VA does not support these segments
"RTN","BPSOSH2",52,0)
 . Q:",300,290,280,270,260,250,240,230,220,210,200,170,140,"[NODE
"RTN","BPSOSH2",53,0)
 . ;
"RTN","BPSOSH2",54,0)
 . ; Quit if the payer sheet does not have the node
"RTN","BPSOSH2",55,0)
 . Q:'$D(^BPSF(9002313.92,+IEN(9002313.92),NODE,0))
"RTN","BPSOSH2",56,0)
 . ;
"RTN","BPSOSH2",57,0)
 . ; Per NCPDP standard, reversals do not support segments listed below
"RTN","BPSOSH2",58,0)
 . I TYPE="B2",",300,290,280,270,260,250,240,230,220,210,200,170,150,140,"[NODE Q
"RTN","BPSOSH2",59,0)
 . I TYPE="B2",VER=51,NODE=160 Q  ;COB segment not supported in a 51 reversal
"RTN","BPSOSH2",60,0)
 . I TYPE="B2",VER="D0",NODE=110 Q  ;Patient segment not supported in a D0 reversal
"RTN","BPSOSH2",61,0)
 . ;
"RTN","BPSOSH2",62,0)
 . ; Per NCPDP standard, eligibility does not support segments listed below
"RTN","BPSOSH2",63,0)
 . I TYPE="E1",",290,280,270,260,250,230,220,210,200,190,180,170,160,130,"[NODE Q
"RTN","BPSOSH2",64,0)
 . ;
"RTN","BPSOSH2",65,0)
 . S DATAFND=0  ; indicates if data is on the segment for us to send
"RTN","BPSOSH2",66,0)
 . S SEGREC=""  ; segment's information
"RTN","BPSOSH2",67,0)
 . ;
"RTN","BPSOSH2",68,0)
 . D:NODE=180 PROCDUR
"RTN","BPSOSH2",69,0)
 . ;
"RTN","BPSOSH2",70,0)
 . ;COB fields
"RTN","BPSOSH2",71,0)
 . D:NODE=160 PROCCOB
"RTN","BPSOSH2",72,0)
 . ;
"RTN","BPSOSH2",73,0)
 . S ORDER=""
"RTN","BPSOSH2",74,0)
 . F  D  Q:'ORDER
"RTN","BPSOSH2",75,0)
 .. ;
"RTN","BPSOSH2",76,0)
 .. Q:NODE=180  ; DUR/PPS section (repeating), already processed
"RTN","BPSOSH2",77,0)
 .. Q:NODE=160  ; COB data processed earlier
"RTN","BPSOSH2",78,0)
 .. S ORDER=$O(^BPSF(9002313.92,+IEN(9002313.92),NODE,"B",ORDER))
"RTN","BPSOSH2",79,0)
 .. Q:'ORDER
"RTN","BPSOSH2",80,0)
 .. S RECMIEN=""
"RTN","BPSOSH2",81,0)
 .. S RECMIEN=$O(^BPSF(9002313.92,+IEN(9002313.92),NODE,"B",ORDER,RECMIEN))
"RTN","BPSOSH2",82,0)
 .. Q:RECMIEN=""
"RTN","BPSOSH2",83,0)
 .. ;
"RTN","BPSOSH2",84,0)
 .. S MDATA=$G(^BPSF(9002313.92,+IEN(9002313.92),NODE,RECMIEN,0))
"RTN","BPSOSH2",85,0)
 .. Q:MDATA=""
"RTN","BPSOSH2",86,0)
 .. ;
"RTN","BPSOSH2",87,0)
 .. S FLDIEN=$P(MDATA,U,2)
"RTN","BPSOSH2",88,0)
 .. Q:FLDIEN=""
"RTN","BPSOSH2",89,0)
 .. ;
"RTN","BPSOSH2",90,0)
 .. S FDATA=$G(^BPSF(9002313.91,FLDIEN,0))
"RTN","BPSOSH2",91,0)
 .. Q:FDATA=""
"RTN","BPSOSH2",92,0)
 .. S FLDNUM=$P(FDATA,U,1)
"RTN","BPSOSH2",93,0)
 .. Q:FLDNUM=""
"RTN","BPSOSH2",94,0)
 .. ;Check for alphanumeric NCPDP numbers - BPS*1*15
"RTN","BPSOSH2",95,0)
 .. I $P(FLDNUM,".")'?3N S FLDNUM=$$VNUM^BPSECMPS(FLDNUM) Q:'FLDNUM
"RTN","BPSOSH2",96,0)
 .. ;
"RTN","BPSOSH2",97,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",98,0)
 .. ;
"RTN","BPSOSH2",99,0)
 .. ;header data
"RTN","BPSOSH2",100,0)
 .. S:NODE<130 FLDDATA=$G(BPS(9002313.02,IEN(9002313.02),FLDNUM,"I"))
"RTN","BPSOSH2",101,0)
 .. ;
"RTN","BPSOSH2",102,0)
 .. ;transaction data
"RTN","BPSOSH2",103,0)
 .. S:NODE>120 FLDDATA=$G(BPS(9002313.0201,IEN(9002313.0201),FLDNUM,"I"))
"RTN","BPSOSH2",104,0)
 .. I $TR($E(FLDDATA,3,999),"0 {}")'="" S DATAFND=1 ;BPS*1*15 - allow for zero in NCPDP ID
"RTN","BPSOSH2",105,0)
 .. ;
"RTN","BPSOSH2",106,0)
 .. ;check if this is the seg id - call this after fld chk since
"RTN","BPSOSH2",107,0)
 .. ;we don't want to send the segment if this is all there is
"RTN","BPSOSH2",108,0)
 .. I (NODE>100)&(FLDNUM=111) S FLDDATA=$$SEGID(NODE)
"RTN","BPSOSH2",109,0)
 .. ;
"RTN","BPSOSH2",110,0)
 .. ; Special code to handle the Submission Clarification Code (420),
"RTN","BPSOSH2",111,0)
 .. ; which is a repeating group in version D.0
"RTN","BPSOSH2",112,0)
 .. I FLDNUM=420 D SUBCLAR(.DATAFND,.IEN,.SEGREC) Q
"RTN","BPSOSH2",113,0)
 .. ;
"RTN","BPSOSH2",114,0)
 .. ; Special code to handle the Other Amount Claimed repeating group
"RTN","BPSOSH2",115,0)
 .. I FLDNUM=480 D OAMTCLMD(.DATAFND,.IEN,.SEGREC) Q
"RTN","BPSOSH2",116,0)
 .. I FLDNUM=479 Q  ; fields 479 & 480 handled as a pair in OAMTCLMD
"RTN","BPSOSH2",117,0)
 .. ;
"RTN","BPSOSH2",118,0)
 .. Q:FLDDATA=""   ;lje;7/23/03; don't want extra field separators when field is blank for testing for WebMD.
"RTN","BPSOSH2",119,0)
 .. ;
"RTN","BPSOSH2",120,0)
 .. S:NODE=100 SEGREC=SEGREC_FLDDATA  ;no FS on the header rec
"RTN","BPSOSH2",121,0)
 .. S:NODE>100 SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",122,0)
 ..;
"RTN","BPSOSH2",123,0)
 . I (DATAFND)&(NODE=100) S REC(NODE)=SEGREC   ;no SS when it's the header
"RTN","BPSOSH2",124,0)
 . I (DATAFND)&(NODE>100) D
"RTN","BPSOSH2",125,0)
 .. I '$D(REC(NODE)) S REC(NODE)=REC I REC[$C(29) S REC=""
"RTN","BPSOSH2",126,0)
 .. S REC(NODE)=REC(NODE)_$C(30)_SEGREC  ;SS before the seg
"RTN","BPSOSH2",127,0)
 ;
"RTN","BPSOSH2",128,0)
 Q
"RTN","BPSOSH2",129,0)
 ;
"RTN","BPSOSH2",130,0)
SEGID(ND) ; function, returns Segment ID
"RTN","BPSOSH2",131,0)
 ; Field 111 is the Segment Identifier - for each segment, other than
"RTN","BPSOSH2",132,0)
 ; the header, a unique value must be sent in this field
"RTN","BPSOSH2",133,0)
 ; to identify which segment is being sent.  This value is not stored
"RTN","BPSOSH2",134,0)
 ; in the claim - as it changes with each of the 20 segments. The
"RTN","BPSOSH2",135,0)
 ; field does appear as part of the NCPDP Format, but is simply not stored.
"RTN","BPSOSH2",136,0)
 ;    01 = Patient       02 = Pharmacy Provider    03 = Prescriber
"RTN","BPSOSH2",137,0)
 ;    04 = Insurance     05 = COB/Other Payment    06 = Workers' Comp
"RTN","BPSOSH2",138,0)
 ;    07 = Claim         08 = DUR/PPS              09 = Coupon
"RTN","BPSOSH2",139,0)
 ;    10 = Compound      11 = Pricing              12 = Prior Auth
"RTN","BPSOSH2",140,0)
 ;    13 = Clinical      14 = Additional Doc       15 = Facility
"RTN","BPSOSH2",141,0)
 ;    16 = Narrative     17 = Purchaser            18 = Service Provider
"RTN","BPSOSH2",142,0)
 ;    19 = Intermediary  37 = Last Known 4Rx
"RTN","BPSOSH2",143,0)
 ;
"RTN","BPSOSH2",144,0)
 N FLD
"RTN","BPSOSH2",145,0)
 ;
"RTN","BPSOSH2",146,0)
 S FLD=$S(ND=110:"01",ND=120:"04",ND=130:"07",ND=140:"02",ND=150:"03",ND=160:"05",ND=170:"06",ND=180:"08",ND=190:11,ND=200:"09",ND=210:10,ND=220:12,ND=230:13,ND=240:14,ND=250:15,ND=260:16,ND=270:17,ND=280:18,ND=290:19,ND=300:37,1:"00")
"RTN","BPSOSH2",147,0)
 S FLD="AM"_$$NFF^BPSECFM(FLD,2)
"RTN","BPSOSH2",148,0)
 ;
"RTN","BPSOSH2",149,0)
 Q FLD
"RTN","BPSOSH2",150,0)
 ;
"RTN","BPSOSH2",151,0)
PROCDUR ; The DUR/PPS segment can repeat itself for any given
"RTN","BPSOSH2",152,0)
 ; transaction within a claim.  This means we have to have special
"RTN","BPSOSH2",153,0)
 ; programming to handle the repeating fields.
"RTN","BPSOSH2",154,0)
 ;
"RTN","BPSOSH2",155,0)
 ; Input Data
"RTN","BPSOSH2",156,0)
 ;   BPS array - Set in BPSOSC* routines
"RTN","BPSOSH2",157,0)
 ;   IEN array - Contain IEN information for the BPS NCPDP FORMAT file
"RTN","BPSOSH2",158,0)
 ;   NODE - Multiple of the BPS NCPDP FORMAT file
"RTN","BPSOSH2",159,0)
 ; Input/Output Data
"RTN","BPSOSH2",160,0)
 ;   SEGREC - This is data for the segment being created
"RTN","BPSOSH2",161,0)
 ;   DATAFND - Flag indicating if there is legitimate data for the segment
"RTN","BPSOSH2",162,0)
 ;
"RTN","BPSOSH2",163,0)
 N FIELD,DUR,FLD,ORD,FLDIEN,FLDID,FLDDATA
"RTN","BPSOSH2",164,0)
 ;
"RTN","BPSOSH2",165,0)
 ; If there isn't any data in this segment then quit
"RTN","BPSOSH2",166,0)
 Q:'$D(BPS(9002313.1001))
"RTN","BPSOSH2",167,0)
 ;
"RTN","BPSOSH2",168,0)
 ; Second thing - create the 111 field entry as it is not repeating
"RTN","BPSOSH2",169,0)
 S FLDDATA=$$SEGID(NODE)
"RTN","BPSOSH2",170,0)
 S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",171,0)
 ;
"RTN","BPSOSH2",172,0)
 ; Next- let's look to the format to see which DUR/PPS fields are
"RTN","BPSOSH2",173,0)
 ; needed (remember - ALL fields on the DUR/PPS segment are optional)
"RTN","BPSOSH2",174,0)
 D GETFLDS^BPSOSHF(+IEN(9002313.92),NODE,.FIELD)
"RTN","BPSOSH2",175,0)
 ;
"RTN","BPSOSH2",176,0)
 ; Finally -loop through and process the fields for as many times
"RTN","BPSOSH2",177,0)
 ; as they appear
"RTN","BPSOSH2",178,0)
 S DUR=0
"RTN","BPSOSH2",179,0)
 F  S DUR=$O(BPS(9002313.1001,DUR)) Q:DUR=""  D
"RTN","BPSOSH2",180,0)
 . S ORD=0
"RTN","BPSOSH2",181,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",182,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",183,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",184,0)
 .. S:FLD=473 FLD=.01   ;473 value stored in the .01 field
"RTN","BPSOSH2",185,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",186,0)
 .. ; Transaction data
"RTN","BPSOSH2",187,0)
 .. S FLDDATA=$G(BPS(9002313.1001,DUR,FLD,"I"))
"RTN","BPSOSH2",188,0)
 .. I FLDDATA="" Q
"RTN","BPSOSH2",189,0)
 .. ;
"RTN","BPSOSH2",190,0)
 .. I FLDID'=$TR(FLDDATA,"0 {}") S DATAFND=1 ;fld chk-is the fld empty?
"RTN","BPSOSH2",191,0)
 .. ;
"RTN","BPSOSH2",192,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",193,0)
 ;
"RTN","BPSOSH2",194,0)
 Q
"RTN","BPSOSH2",195,0)
 ;
"RTN","BPSOSH2",196,0)
PROCCOB ;The COB OTHER PAYMENTS segment can repeat itself for any given
"RTN","BPSOSH2",197,0)
 ; transaction within a claim.  This means we have to have special
"RTN","BPSOSH2",198,0)
 ; programming to handle the repeating fields.
"RTN","BPSOSH2",199,0)
 ;
"RTN","BPSOSH2",200,0)
 ; Note that BPS array is set in BPSOSC* routines
"RTN","BPSOSH2",201,0)
 ;
"RTN","BPSOSH2",202,0)
 N FIELD,BPCOB,FLD,ORD
"RTN","BPSOSH2",203,0)
 ;
"RTN","BPSOSH2",204,0)
 ; If there isn't any data in this segment quit
"RTN","BPSOSH2",205,0)
 Q:'$D(BPS(9002313.0401))
"RTN","BPSOSH2",206,0)
 ;
"RTN","BPSOSH2",207,0)
 ; create the 111 field entry as it is not repeating
"RTN","BPSOSH2",208,0)
 S FLDDATA=$$SEGID(NODE)
"RTN","BPSOSH2",209,0)
 S SEGREC=SEGREC_$C(28)_FLDDATA  ; FS always proceeds fld
"RTN","BPSOSH2",210,0)
 ;
"RTN","BPSOSH2",211,0)
 ; look to the format to see which COB fields are needed 
"RTN","BPSOSH2",212,0)
 D GETFLDS^BPSOSHF(+IEN(9002313.92),NODE,.FIELD)
"RTN","BPSOSH2",213,0)
 ;
"RTN","BPSOSH2",214,0)
 ; loop through and process fields for as many times as they appear
"RTN","BPSOSH2",215,0)
 S BPCOB=0
"RTN","BPSOSH2",216,0)
 F  S BPCOB=$O(BPS(9002313.0401,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",217,0)
 . S ORD=0
"RTN","BPSOSH2",218,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",219,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",220,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",221,0)
 .. S:FLD=337 FLD=.01   ; 473-7E value stored in the .01 field
"RTN","BPSOSH2",222,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",223,0)
 .. ; Transaction data
"RTN","BPSOSH2",224,0)
 .. S FLDDATA=$G(BPS(9002313.0401,BPCOB,FLD,"I"))
"RTN","BPSOSH2",225,0)
 .. ;
"RTN","BPSOSH2",226,0)
 .. Q:FLDDATA=""
"RTN","BPSOSH2",227,0)
 .. I $TR(FLDDATA,"0 {}")="HB" Q
"RTN","BPSOSH2",228,0)
 .. I $TR(FLDDATA,"0 {}")="5E" Q
"RTN","BPSOSH2",229,0)
 ..;
"RTN","BPSOSH2",230,0)
 ..I FLDID'=$TR(FLDDATA,"0 {}") S DATAFND=1 ;fld chk-is the fld empty?
"RTN","BPSOSH2",231,0)
 ..S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",232,0)
 ..; handle repeating fields
"RTN","BPSOSH2",233,0)
 ..I FLD=471 D REJCODES ; (#471) OTHER PAYER REJECT COUNT
"RTN","BPSOSH2",234,0)
 ..I FLD=341 D AMTPAID  ; (#341) OTHER PAYER AMOUNT PAID COUNT
"RTN","BPSOSH2",235,0)
 ..I FLD=353 D PATPAID  ; (#353) OTHER PAYER-PATIENT RESPONSIBILITY COUNT
"RTN","BPSOSH2",236,0)
 ..I FLD=392 D BENSTAGE ; (#392) BENEFIT STAGE COUNT
"RTN","BPSOSH2",237,0)
 ;
"RTN","BPSOSH2",238,0)
 Q
"RTN","BPSOSH2",239,0)
 ;
"RTN","BPSOSH2",240,0)
AMTPAID ; (#342) OTHER PAYER AMT PAID QUALIFIER multiple
"RTN","BPSOSH2",241,0)
 N BPCOB,ORD,FLD,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",242,0)
 S BPCOB=0
"RTN","BPSOSH2",243,0)
 F  S BPCOB=$O(BPS(9002313.401342,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",244,0)
 . S ORD=0
"RTN","BPSOSH2",245,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",246,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",247,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",248,0)
 .. S:FLD=342 FLD=.01   ;342 value stored in the .01 field
"RTN","BPSOSH2",249,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",250,0)
 .. ; Transaction data
"RTN","BPSOSH2",251,0)
 .. S FLDDATA=$G(BPS(9002313.401342,BPCOB,FLD,"I"))
"RTN","BPSOSH2",252,0)
 .. ;
"RTN","BPSOSH2",253,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",254,0)
 .. Q:FLDDATA=""
"RTN","BPSOSH2",255,0)
 .. I FLDID'="HC",FLDID=$TR(FLDDATA," ") Q  ; blanks are ok for 342-HC, but not for 431-DV
"RTN","BPSOSH2",256,0)
 .. ;
"RTN","BPSOSH2",257,0)
 .. S DATAFND=1
"RTN","BPSOSH2",258,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",259,0)
 Q
"RTN","BPSOSH2",260,0)
 ; 
"RTN","BPSOSH2",261,0)
REJCODES ; (#472) OTHER PAYER REJECT CODE
"RTN","BPSOSH2",262,0)
 N BPCOB,ORD,FLD,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",263,0)
 S BPCOB=0
"RTN","BPSOSH2",264,0)
 F  S BPCOB=$O(BPS(9002313.401472,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",265,0)
 . S ORD=0
"RTN","BPSOSH2",266,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",267,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",268,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",269,0)
 .. S:FLD=472 FLD=.01   ;472 value stored in the .01 field
"RTN","BPSOSH2",270,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",271,0)
 .. ; Transaction data
"RTN","BPSOSH2",272,0)
 .. S FLDDATA=$G(BPS(9002313.401472,BPCOB,FLD,"I"))
"RTN","BPSOSH2",273,0)
 .. ;
"RTN","BPSOSH2",274,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",275,0)
 .. Q:FLDDATA=""
"RTN","BPSOSH2",276,0)
 .. I FLDID=$TR(FLDDATA,"0 {}") Q
"RTN","BPSOSH2",277,0)
 .. ;
"RTN","BPSOSH2",278,0)
 .. I FLDID'=$TR(FLDDATA,"0 {}") S DATAFND=1 ;fld chk-is the fld empty?
"RTN","BPSOSH2",279,0)
 .. ;
"RTN","BPSOSH2",280,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",281,0)
 Q
"RTN","BPSOSH2",282,0)
 ;
"RTN","BPSOSH2",283,0)
PATPAID ; (#353.01) OTHER PAYER-PATIENT RESPONSIBILITY multiple
"RTN","BPSOSH2",284,0)
 N BPCOB,ORD,FLD,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",285,0)
 S BPCOB=0
"RTN","BPSOSH2",286,0)
 F  S BPCOB=$O(BPS(9002313.401353,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",287,0)
 . S ORD=0
"RTN","BPSOSH2",288,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",289,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",290,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",291,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",292,0)
 .. ; Transaction data
"RTN","BPSOSH2",293,0)
 .. S FLDDATA=$G(BPS(9002313.401353,BPCOB,FLD,"I"))
"RTN","BPSOSH2",294,0)
 .. ;
"RTN","BPSOSH2",295,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",296,0)
 .. I FLDDATA=""!(FLDID=$TR(FLDDATA," ")) Q  ; Check for missing data or only field ID
"RTN","BPSOSH2",297,0)
 .. ;
"RTN","BPSOSH2",298,0)
 .. S DATAFND=1
"RTN","BPSOSH2",299,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",300,0)
 Q
"RTN","BPSOSH2",301,0)
 ;
"RTN","BPSOSH2",302,0)
BENSTAGE ; (#392.01) BENEFIT STAGE MLTPL multiple
"RTN","BPSOSH2",303,0)
 ;
"RTN","BPSOSH2",304,0)
 N BPCOB,ORD,FLD,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",305,0)
 S BPCOB=0
"RTN","BPSOSH2",306,0)
 F  S BPCOB=$O(BPS(9002313.401392,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",307,0)
 . S ORD=0
"RTN","BPSOSH2",308,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",309,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",310,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",311,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",312,0)
 .. ; Transaction data
"RTN","BPSOSH2",313,0)
 .. S FLDDATA=$G(BPS(9002313.401392,BPCOB,FLD,"I"))
"RTN","BPSOSH2",314,0)
 .. ;
"RTN","BPSOSH2",315,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",316,0)
 .. I FLDDATA=""!(FLDID=$TR(FLDDATA," ")) Q  ; Check for missing data or only field ID
"RTN","BPSOSH2",317,0)
 .. ;
"RTN","BPSOSH2",318,0)
 .. S DATAFND=1
"RTN","BPSOSH2",319,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",320,0)
 Q
"RTN","BPSOSH2",321,0)
 ;
"RTN","BPSOSH2",322,0)
SUBCLAR(DATAFND,BPSIEN,SEGREC) ;
"RTN","BPSOSH2",323,0)
 ; BPSIEN, SEGREC passed by ref., SEGREC is updated with repeating fields
"RTN","BPSOSH2",324,0)
 ; 420-DK Submission Clarification Code, a repeating group in D.0
"RTN","BPSOSH2",325,0)
 ; For 5.1, we are storing the data in the subfile even though it is a single value field in 5.1
"RTN","BPSOSH2",326,0)
 ;
"RTN","BPSOSH2",327,0)
 Q:'$G(BPSIEN(9002313.02))  ; BPS CLAIMS ien
"RTN","BPSOSH2",328,0)
 Q:'$G(BPSIEN(9002313.0201))  ; TRANSACTIONS ien (sub-file 9002313.0201)
"RTN","BPSOSH2",329,0)
 ;
"RTN","BPSOSH2",330,0)
 N BPSD0,BPSD1,BPSD2,X1,X4
"RTN","BPSOSH2",331,0)
 ;
"RTN","BPSOSH2",332,0)
 S BPSD0=BPSIEN(9002313.02),BPSD1=BPSIEN(9002313.0201),BPSD2=0
"RTN","BPSOSH2",333,0)
 ;
"RTN","BPSOSH2",334,0)
 S X4=$P($G(^BPSC(BPSD0,400,BPSD1,350)),U,4)  ; (#354) SUBM CLARIFICATION CODE COUNT
"RTN","BPSOSH2",335,0)
 ;
"RTN","BPSOSH2",336,0)
 I X4=""!($TR(X4,"0 {}")="NX") Q  ; Quit if the count is missing is only the ID
"RTN","BPSOSH2",337,0)
 ;
"RTN","BPSOSH2",338,0)
 F  S BPSD2=$O(^BPSC(BPSD0,400,BPSD1,354.01,BPSD2)) Q:'BPSD2  D
"RTN","BPSOSH2",339,0)
 .S X1=$P($G(^BPSC(BPSD0,400,BPSD1,354.01,BPSD2,1)),U,1)
"RTN","BPSOSH2",340,0)
 .I X1=""!($TR(X1," {}")="DK") Q  ; Quit if the code is missing or only the ID
"RTN","BPSOSH2",341,0)
 .S SEGREC=SEGREC_$C(28)_X1  ; FS always proceeds fld
"RTN","BPSOSH2",342,0)
 .S DATAFND=1  ; data found, result is true
"RTN","BPSOSH2",343,0)
 ;
"RTN","BPSOSH2",344,0)
 Q
"RTN","BPSOSH2",345,0)
 ;
"RTN","BPSOSH2",346,0)
OAMTCLMD(DATAFND,BPSIEN,SEGREC) ;
"RTN","BPSOSH2",347,0)
 ; BPSIEN, SEGREC passed by ref., SEGREC updated with pairs of repeating fields
"RTN","BPSOSH2",348,0)
 ; (#478.01) OTHER AMT CLAIMED MULTIPLE (sub-file 9002313.0601)
"RTN","BPSOSH2",349,0)
 ;
"RTN","BPSOSH2",350,0)
 Q:'$G(BPSIEN(9002313.02))  ; BPS CLAIMS ien
"RTN","BPSOSH2",351,0)
 Q:'$G(BPSIEN(9002313.0201))  ; TRANSACTIONS ien (sub-file 9002313.0201)
"RTN","BPSOSH2",352,0)
 ;
"RTN","BPSOSH2",353,0)
 N BPSD0,BPSD1,BPSD2,X,X2,X3
"RTN","BPSOSH2",354,0)
 ;
"RTN","BPSOSH2",355,0)
 S BPSD0=BPSIEN(9002313.02),BPSD1=BPSIEN(9002313.0201),BPSD2=0
"RTN","BPSOSH2",356,0)
 ;
"RTN","BPSOSH2",357,0)
 F  S BPSD2=$O(^BPSC(BPSD0,400,BPSD1,478.01,BPSD2)) Q:'BPSD2  D
"RTN","BPSOSH2",358,0)
 .S X=$G(^BPSC(BPSD0,400,BPSD1,478.01,BPSD2,0))
"RTN","BPSOSH2",359,0)
 .I X="" Q  ; Quit if the node is missing
"RTN","BPSOSH2",360,0)
 .S X2=$P(X,U,2)  ; (#479) OTHER AMT CLAIMED SUBMTTD QLFR
"RTN","BPSOSH2",361,0)
 .S X3=$P(X,U,3)  ; (#480) OTHER AMOUNT CLAIMED SUBMITTED
"RTN","BPSOSH2",362,0)
 .I X2=""!($TR(X2,"0 {}")="H8") Q  ; Quit if the qualifier is missing or just the ID
"RTN","BPSOSH2",363,0)
 .I X3=""!($TR(X3,"0 {}")="H9") Q  ; Quit if the amount is missing or just the ID
"RTN","BPSOSH2",364,0)
 .S SEGREC=SEGREC_$C(28)_X2_$C(28)_X3  ; FS always proceeds fld
"RTN","BPSOSH2",365,0)
 .S DATAFND=1  ; data found, result is true
"RTN","BPSOSH2",366,0)
 ;
"RTN","BPSOSH2",367,0)
 Q
"RTN","BPSOSH2",368,0)
 ;
"RTN","BPSPRRX3")
0^11^B123904591
"RTN","BPSPRRX3",1,0)
BPSPRRX3 ;ALB/SS - ePharmacy secondary billing ;16-DEC-08
"RTN","BPSPRRX3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8,10,11,19**;JUN 2004;Build 18
"RTN","BPSPRRX3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSPRRX3",4,0)
 ;
"RTN","BPSPRRX3",5,0)
 ;External reference to file 399.3 supported by IA 3822
"RTN","BPSPRRX3",6,0)
 ;External reference to $$INSUR^IBBAPI supported by IA 4419
"RTN","BPSPRRX3",7,0)
 ;External reference to $$PLANEPS^IBNCPDPU supported by IA 5572
"RTN","BPSPRRX3",8,0)
 ;
"RTN","BPSPRRX3",9,0)
PROMPTS(RX,FILL,DOS,BPSPRARR) ;
"RTN","BPSPRRX3",10,0)
 ;BPSPRARR - array to pass values determined earlier (if any) and to return user's input/corrections
"RTN","BPSPRRX3",11,0)
 ;Input:
"RTN","BPSPRRX3",12,0)
 ;  RX - Prescription IEN
"RTN","BPSPRRX3",13,0)
 ;  FILL - Fill Number
"RTN","BPSPRRX3",14,0)
 ;  DOS - Date of Service
"RTN","BPSPRRX3",15,0)
 ;  BPSPRARR - Array of data passed by reference
"RTN","BPSPRRX3",16,0)
 ;Returns 
"RTN","BPSPRRX3",17,0)
 ;   1 = the data is correct
"RTN","BPSPRRX3",18,0)
 ;  -1 = the data is not correct - Do not create the claim
"RTN","BPSPRRX3",19,0)
 ;
"RTN","BPSPRRX3",20,0)
 ; Check paramters
"RTN","BPSPRRX3",21,0)
 I '$G(RX) Q -1
"RTN","BPSPRRX3",22,0)
 I $G(FILL)="" Q -1
"RTN","BPSPRRX3",23,0)
 I '$G(DOS) Q -1
"RTN","BPSPRRX3",24,0)
 ;
"RTN","BPSPRRX3",25,0)
 ;
"RTN","BPSPRRX3",26,0)
 N BPQ,BPSQ,IEN59PR,DFN,BPSPLAN,BPX,BPSDFLT,BPSSET
"RTN","BPSPRRX3",27,0)
 N BPSPIEN,BPSSET,BPCNT,BPSRJ,BPSPAID,RETV,TOTAL
"RTN","BPSPRRX3",28,0)
 N BPRATTYP,BPSPDRJ,BPSPLNSL,BPX1,BPSFIEN,BPSPSARR,BPSPSHV
"RTN","BPSPRRX3",29,0)
 N IEN59SEC,BPSRET,BPSINS
"RTN","BPSPRRX3",30,0)
 ;
"RTN","BPSPRRX3",31,0)
 S (BPQ,BPSQ)=0
"RTN","BPSPRRX3",32,0)
 ;
"RTN","BPSPRRX3",33,0)
 ; Other Payer IEN defaults to 1 since we don't do tertiary
"RTN","BPSPRRX3",34,0)
 S BPSPIEN=1
"RTN","BPSPRRX3",35,0)
 ;
"RTN","BPSPRRX3",36,0)
 ; Get Primary BPS Transaction
"RTN","BPSPRRX3",37,0)
 S IEN59PR=$$IEN59^BPSOSRX(RX,FILL,1)
"RTN","BPSPRRX3",38,0)
 ;
"RTN","BPSPRRX3",39,0)
 ; Get/validate Patient DFN
"RTN","BPSPRRX3",40,0)
 S DFN=$P($G(^BPST(IEN59PR,0)),U,6)
"RTN","BPSPRRX3",41,0)
 I DFN="" S DFN=$$RXAPI1^BPSUTIL1(RX,2,"I")
"RTN","BPSPRRX3",42,0)
 I DFN="" Q -1
"RTN","BPSPRRX3",43,0)
 ;
"RTN","BPSPRRX3",44,0)
 ; Get patient insurances
"RTN","BPSPRRX3",45,0)
 S BPSRET=$$INSUR^IBBAPI(DFN,DOS,"E",.BPSINS,"1,7,8")
"RTN","BPSPRRX3",46,0)
 ;
"RTN","BPSPRRX3",47,0)
 ; Get the first Secondary insurance for default
"RTN","BPSPRRX3",48,0)
 S BPSPRARR("PLAN")="",BPSPRARR("INS NAME")="",(BPX,BPQ)=0
"RTN","BPSPRRX3",49,0)
 F  S BPX=$O(BPSINS("IBBAPI","INSUR",BPX)) Q:'BPX  D  Q:BPQ
"RTN","BPSPRRX3",50,0)
 . I $P(BPSINS("IBBAPI","INSUR",BPX,7),U)'=2 Q
"RTN","BPSPRRX3",51,0)
 . S BPSPRARR("PLAN")=$P(BPSINS("IBBAPI","INSUR",BPX,8),U)
"RTN","BPSPRRX3",52,0)
 . S BPSPRARR("INS NAME")=$P(BPSINS("IBBAPI","INSUR",BPX,1),U,2)
"RTN","BPSPRRX3",53,0)
 . S BPQ=1
"RTN","BPSPRRX3",54,0)
 . Q
"RTN","BPSPRRX3",55,0)
 ;
"RTN","BPSPRRX3",56,0)
 ; Get Rate Type for the Secondary Insurance
"RTN","BPSPRRX3",57,0)
 S IEN59SEC=$$IEN59^BPSOSRX(RX,FILL,2)
"RTN","BPSPRRX3",58,0)
 S BPSPRARR("RTYPE")=$$GETRTP59^BPSPRRX5(IEN59SEC)
"RTN","BPSPRRX3",59,0)
 I BPSPRARR("RTYPE")="" S BPSPRARR("RTYPE")=8
"RTN","BPSPRRX3",60,0)
 ;
"RTN","BPSPRRX3",61,0)
 ; Display current COB fields
"RTN","BPSPRRX3",62,0)
 D DISPSEC(.BPSPRARR)
"RTN","BPSPRRX3",63,0)
 ;
"RTN","BPSPRRX3",64,0)
 S BPQ=0
"RTN","BPSPRRX3",65,0)
 I $G(BPSPRARR("PLAN"))=""!($G(BPSPRARR("RTYPE"))="")!($G(BPSPRARR("308-C8"))="") S BPQ=1
"RTN","BPSPRRX3",66,0)
 I BPSQ=0 F BPX=4,5 I $P($G(BPSPRARR("OTHER PAYER",BPSPIEN,0)),U,BPX)="" S BPQ=1
"RTN","BPSPRRX3",67,0)
 I BPQ=0,'$D(BPSPRARR("OTHER PAYER",BPSPIEN,"P")),'$D(BPSPRARR("OTHER PAYER",BPSPIEN,"R")) S BPQ=1
"RTN","BPSPRRX3",68,0)
 ;
"RTN","BPSPRRX3",69,0)
 ; Prompt to continue or not
"RTN","BPSPRRX3",70,0)
 W !
"RTN","BPSPRRX3",71,0)
 I BPQ=1 W !,"Required secondary claim information is missing. Enter all required information",!
"RTN","BPSPRRX3",72,0)
 E  S BPQ=$$YESNO^BPSSCRRS("Do you want to edit this Secondary Claim Information (Y/N)","N") Q:BPQ=-1 -1 G:BPQ=0 END
"RTN","BPSPRRX3",73,0)
 ;
"RTN","BPSPRRX3",74,0)
 ; Prompt for Secondary Insurance Plan
"RTN","BPSPRRX3",75,0)
 W !
"RTN","BPSPRRX3",76,0)
 F  D  Q:BPSQ'=0
"RTN","BPSPRRX3",77,0)
 . S BPSPLAN=$$SELECTPL^BPSPRRX1(DFN,DOS,.BPSPLNSL,"SECONDARY INSURANCE POLICY",$G(BPSPRARR("PLAN")))
"RTN","BPSPRRX3",78,0)
 . I BPSPLAN=0 S BPSQ=-1 Q
"RTN","BPSPRRX3",79,0)
 . I $P(BPSPLNSL(7),U)'=2 W !,"Must select a Secondary insurance plan." Q
"RTN","BPSPRRX3",80,0)
 . S BPSPRARR("PLAN")=BPSPLAN
"RTN","BPSPRRX3",81,0)
 . S BPSPRARR("INS NAME")=$P(BPSPLNSL(1),U,2)
"RTN","BPSPRRX3",82,0)
 . S BPSPSHV=$$PAYSHTV(BPSPLAN)
"RTN","BPSPRRX3",83,0)
 . S BPSQ=1
"RTN","BPSPRRX3",84,0)
 Q:BPSQ=-1 -1
"RTN","BPSPRRX3",85,0)
 ;
"RTN","BPSPRRX3",86,0)
 ; Prompt for Rate Type and store in BPSPRARR("RTYPE")
"RTN","BPSPRRX3",87,0)
 F  S BPRATTYP=$$RATETYPE^BPSPRRX2($S($G(BPSPRARR("RTYPE"))]"":BPSPRARR("RTYPE"),1:8)) Q:BPRATTYP'=""
"RTN","BPSPRRX3",88,0)
 I BPRATTYP=-1 Q -1
"RTN","BPSPRRX3",89,0)
 S BPSPRARR("RTYPE")=BPRATTYP
"RTN","BPSPRRX3",90,0)
 ;
"RTN","BPSPRRX3",91,0)
 ; Prompt for OTHER COVERAGE CODE
"RTN","BPSPRRX3",92,0)
 I $G(BPSPRARR("308-C8"))="" S BPSPRARR("308-C8")="04"
"RTN","BPSPRRX3",93,0)
 S BPSSET="" D SET308(.BPSSET)
"RTN","BPSPRRX3",94,0)
 S RETV=$$PROMPT("SRA"_U_BPSSET,"OTHER COVERAGE CODE:  ",$G(BPSPRARR("308-C8")),"Indicate whether or not the patient has other insurance coverage")
"RTN","BPSPRRX3",95,0)
 Q:RETV<0 -1
"RTN","BPSPRRX3",96,0)
 S BPSPRARR("308-C8")=RETV
"RTN","BPSPRRX3",97,0)
 ;
"RTN","BPSPRRX3",98,0)
 ; Prompt for OTHER PAYER ID
"RTN","BPSPRRX3",99,0)
 S BPSDFLT=$P($G(BPSPRARR("OTHER PAYER",BPSPIEN,0)),U,4)
"RTN","BPSPRRX3",100,0)
 S RETV=$$PROMPT("FR"_U_"0:10:","OTHER PAYER ID",$G(BPSDFLT),"ID assigned to the payer") Q:RETV<0 -1
"RTN","BPSPRRX3",101,0)
 Q:RETV=-1 -1
"RTN","BPSPRRX3",102,0)
 S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,4)=RETV
"RTN","BPSPRRX3",103,0)
 ;
"RTN","BPSPRRX3",104,0)
 ; Prompt for OTHER PAYER DATE
"RTN","BPSPRRX3",105,0)
 S BPSDFLT=$P($G(BPSPRARR("OTHER PAYER",BPSPIEN,0)),U,5)
"RTN","BPSPRRX3",106,0)
 S RETV=$$PROMPT("DR"_U_"","OTHER PAYER DATE",$$FMTE^XLFDT($G(BPSDFLT)),"Payment or denial date of the claim submitted to the other payer. Used for coordination of benefits.")
"RTN","BPSPRRX3",107,0)
 Q:RETV=-1 -1
"RTN","BPSPRRX3",108,0)
 S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,5)=RETV
"RTN","BPSPRRX3",109,0)
 ;
"RTN","BPSPRRX3",110,0)
 ; Prompt for Paid Amount or Reject Codes
"RTN","BPSPRRX3",111,0)
 S BPSSET="PAID:PAID AMOUNTS;REJECT:REJECT CODES"
"RTN","BPSPRRX3",112,0)
 S BPSDFLT=""
"RTN","BPSPRRX3",113,0)
 I $D(BPSPRARR("OTHER PAYER",BPSPIEN,"P")) S BPSDFLT="PAID AMOUNTS"
"RTN","BPSPRRX3",114,0)
 I $D(BPSPRARR("OTHER PAYER",BPSPIEN,"R")) S BPSDFLT=$S(BPSDFLT="PAID AMOUNTS":"",1:"REJECT CODES")
"RTN","BPSPRRX3",115,0)
 S BPSPDRJ=$$PROMPT("SRA"_U_BPSSET,"Edit Paid Amounts or Reject Codes (PAID AMOUNTS/REJECT CODES):  ",BPSDFLT,"Edit the Paid Amounts or Reject Codes")
"RTN","BPSPRRX3",116,0)
 Q:BPSPDRJ=-1 -1
"RTN","BPSPRRX3",117,0)
 ;
"RTN","BPSPRRX3",118,0)
 ; Prompt to edit paid amounts
"RTN","BPSPRRX3",119,0)
 D:BPSPDRJ="PAID"
"RTN","BPSPRRX3",120,0)
 . ; Remove reject codes.
"RTN","BPSPRRX3",121,0)
 . K BPSPRARR("OTHER PAYER",BPSPIEN,"R")
"RTN","BPSPRRX3",122,0)
 . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,7)=""
"RTN","BPSPRRX3",123,0)
 . ;
"RTN","BPSPRRX3",124,0)
 . K BPSPAID
"RTN","BPSPRRX3",125,0)
 . S (BPCNT,BPX,BPQ,TOTAL)=0
"RTN","BPSPRRX3",126,0)
 . ; BPS NCPDP FIELD DEFS for field 342 codes
"RTN","BPSPRRX3",127,0)
 . S BPSSET=$$GETCDLST(BPSPSHV)
"RTN","BPSPRRX3",128,0)
 . F BPX1=0:1 S BPX=$O(BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX)) Q:'BPX  D  Q:BPQ=1
"RTN","BPSPRRX3",129,0)
 . . S BPSQUAL=$P(BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX,0),U,2)
"RTN","BPSPRRX3",130,0)
 . . S BPSQUAL=$$GET1^DIQ(9002313.2,BPSQUAL,.01)
"RTN","BPSPRRX3",131,0)
 . . S BPSAMT=$P(BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX,0),U,1)
"RTN","BPSPRRX3",132,0)
 . . S BPQ=$$ASKPAID(BPSSET,BPSQUAL,BPSAMT,.BPCNT,.BPSPAID)
"RTN","BPSPRRX3",133,0)
 . ;
"RTN","BPSPRRX3",134,0)
 . I 'BPQ F  S BPQ=$$ASKPAID(BPSSET,"","",.BPCNT,.BPSPAID) Q:BPQ=1
"RTN","BPSPRRX3",135,0)
 . ; Enter updated values into the BPSPRARR array
"RTN","BPSPRRX3",136,0)
 . K BPSPRARR("OTHER PAYER",BPSPIEN,"P")
"RTN","BPSPRRX3",137,0)
 . S BPX=0 F BPX1=0:1 S BPX=$O(BPSPAID(1,BPX)) Q:BPX=""  D
"RTN","BPSPRRX3",138,0)
 . . S BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX,0)=BPSPAID(1,BPX)
"RTN","BPSPRRX3",139,0)
 . . S TOTAL=TOTAL+BPSPAID(1,BPX)
"RTN","BPSPRRX3",140,0)
 . . ;
"RTN","BPSPRRX3",141,0)
 . ; Set the OTHER PAYER AMOUNT PAID COUNT
"RTN","BPSPRRX3",142,0)
 . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,6)=BPX1
"RTN","BPSPRRX3",143,0)
 . Q
"RTN","BPSPRRX3",144,0)
 ;
"RTN","BPSPRRX3",145,0)
 ; Edit/add reject codes
"RTN","BPSPRRX3",146,0)
 D:BPSPDRJ="REJECT"
"RTN","BPSPRRX3",147,0)
 . ; Remove paid amounts on the prior claim.
"RTN","BPSPRRX3",148,0)
 . K BPSPRARR("OTHER PAYER",BPSPIEN,"P")
"RTN","BPSPRRX3",149,0)
 . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,6)=""
"RTN","BPSPRRX3",150,0)
 . ;
"RTN","BPSPRRX3",151,0)
 . K BPSRJ
"RTN","BPSPRRX3",152,0)
 . S (BPCNT,BPX)=0
"RTN","BPSPRRX3",153,0)
 . F BPX1=0:1 S BPX=$O(BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX)) Q:'BPX  D  Q:BPCNT>4
"RTN","BPSPRRX3",154,0)
 . . S BPSDFLT=BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX,0)
"RTN","BPSPRRX3",155,0)
 . . S RETV=$$PROMPT("PO^9002313.93:AEMQ","OTHER PAYER REJECT CODE",$G(BPSDFLT),"Enter the reject code returned by the previous payer")
"RTN","BPSPRRX3",156,0)
 . . Q:RETV=-1
"RTN","BPSPRRX3",157,0)
 . . S BPCNT=BPCNT+1,BPSRJ(BPCNT)=$P(RETV,U,2)
"RTN","BPSPRRX3",158,0)
 . I BPCNT=5 W !,"Maximum of 5 OTHER PAYER REJECT CODES reached."
"RTN","BPSPRRX3",159,0)
 . I BPCNT<5 F  S RETV=$$PROMPT("PO^9002313.93:AEMQ","OTHER PAYER REJECT CODE","","Enter the reject code returned by the previous payer") Q:RETV=-1  D  Q:BPCNT>4
"RTN","BPSPRRX3",160,0)
 . . S BPCNT=BPCNT+1
"RTN","BPSPRRX3",161,0)
 . . S BPSRJ(BPCNT)=$P(RETV,U,2)
"RTN","BPSPRRX3",162,0)
 . . I BPCNT>4 W !,"Maximum of 5 OTHER PAYER REJECT CODES reached."
"RTN","BPSPRRX3",163,0)
 . K BPSPRARR("OTHER PAYER",BPSPIEN,"R")
"RTN","BPSPRRX3",164,0)
 . S BPX=0 F BPX1=0:1 S BPX=$O(BPSRJ(BPX)) Q:BPX=""  S BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX,0)=BPSRJ(BPX)
"RTN","BPSPRRX3",165,0)
 . ; Set the OTHER PAYER REJECT COUNT
"RTN","BPSPRRX3",166,0)
 . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,7)=BPX1
"RTN","BPSPRRX3",167,0)
 . Q
"RTN","BPSPRRX3",168,0)
 ;
"RTN","BPSPRRX3",169,0)
 I '$D(BPSPRARR("OTHER PAYER",BPSPIEN,"P")),'$D(BPSPRARR("OTHER PAYER",BPSPIEN,"R")) W !,"No Paid Amounts or Reject Codes entered" Q -1
"RTN","BPSPRRX3",170,0)
 ;
"RTN","BPSPRRX3",171,0)
 ; Default OTHER PAYER COVERAGE TYPE to PRIMARY
"RTN","BPSPRRX3",172,0)
 S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,2)="01"
"RTN","BPSPRRX3",173,0)
 ;
"RTN","BPSPRRX3",174,0)
 ; Default OTHER PAYER ID QUALIFIER to BIN
"RTN","BPSPRRX3",175,0)
 S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,3)="03"
"RTN","BPSPRRX3",176,0)
 ;
"RTN","BPSPRRX3",177,0)
 ; If the PRIOR PAYMENT is 0 but the user entered paid amounts, update the PRIOR PAYMENT
"RTN","BPSPRRX3",178,0)
 I +$G(BPSPRARR("PRIOR PAYMENT"))=0,$D(BPSPRARR("OTHER PAYER",BPSPIEN,"P")) D
"RTN","BPSPRRX3",179,0)
 . S BPSPRARR("PRIOR PAYMENT")=TOTAL
"RTN","BPSPRRX3",180,0)
 . I TOTAL>0 S BPSPRARR("308-C8")="02"
"RTN","BPSPRRX3",181,0)
 . E  S BPSPRARR("308-C8")="04"
"RTN","BPSPRRX3",182,0)
 ;
"RTN","BPSPRRX3",183,0)
END ;
"RTN","BPSPRRX3",184,0)
 Q 1
"RTN","BPSPRRX3",185,0)
 ;
"RTN","BPSPRRX3",186,0)
 ; 
"RTN","BPSPRRX3",187,0)
ASKPAID(BPSSET,BPSQUAL,BPSAMT,BPCNT,BPSPAID) ;
"RTN","BPSPRRX3",188,0)
 N RETV1,RETV2,BPSX,BPSPRA,BPSQ S BPSQ=0
"RTN","BPSPRRX3",189,0)
 I BPCNT>8 W !,"  Maximum of 9 OTHER PAYER AMOUNT PAID reached." Q 1
"RTN","BPSPRRX3",190,0)
ASK1 S RETV1=$$PROMPT("SOA"_U_BPSSET,"OTHER PAYER AMOUNT PAID QUALIFIER:  ",$G(BPSQUAL),"Type of payment from other sources (including coupons)")
"RTN","BPSPRRX3",191,0)
 I RETV1=-1!(RETV1="") Q 1
"RTN","BPSPRRX3",192,0)
 I RETV1="08",$D(BPSPAID(2)) W !,"  Qualifier '08' cannot be entered with other qualifiers" G ASK1
"RTN","BPSPRRX3",193,0)
 S RETV2=$$PROMPT("NO"_U_"0:999999.99:2","OTHER PAYER AMOUNT PAID",$G(BPSAMT),"Amount of any payment from other sources (including coupons)")
"RTN","BPSPRRX3",194,0)
 I RETV2=-1!(RETV2="") Q 1
"RTN","BPSPRRX3",195,0)
 ; Check for duplicate qualifiers and add Amount Paid to previous amount entered
"RTN","BPSPRRX3",196,0)
 I $D(BPSPAID(2,RETV1)) D  Q 0
"RTN","BPSPRRX3",197,0)
 . S BPSX="" F  S BPSX=$O(BPSPAID(1,BPSX)) Q:BPSX=""  D  Q:BPSQ
"RTN","BPSPRRX3",198,0)
 . . I $P(BPSPAID(1,BPSX),U,2)=RETV1 D
"RTN","BPSPRRX3",199,0)
 . . . S BPSPRA=$P(BPSPAID(1,BPSX),U),$P(BPSPAID(1,BPSX),U)=BPSPRA+RETV2,BPSQ=1
"RTN","BPSPRRX3",200,0)
 . . . W !,"  $",$FN(RETV2,",",2)," has been added to amount $",$FN(BPSPRA,",",2)," for Qualifier ",RETV1
"RTN","BPSPRRX3",201,0)
 S BPCNT=BPCNT+1
"RTN","BPSPRRX3",202,0)
 S BPSPAID(1,BPCNT)=RETV2_U_$$GETPDIEN^BPSPRRX6(RETV1)
"RTN","BPSPRRX3",203,0)
 S BPSPAID(2,RETV1)=""
"RTN","BPSPRRX3",204,0)
 I RETV1="08" Q 1
"RTN","BPSPRRX3",205,0)
 Q 0
"RTN","BPSPRRX3",206,0)
 ;
"RTN","BPSPRRX3",207,0)
DISPSEC(BPSPRARR) ;
"RTN","BPSPRRX3",208,0)
 ; Validate and Display the current secondary insurance information and prompt to edit.
"RTN","BPSPRRX3",209,0)
 ; Input:
"RTN","BPSPRRX3",210,0)
 ;   BPSPARR - Array of COB data, passed by reference
"RTN","BPSPRRX3",211,0)
 ;
"RTN","BPSPRRX3",212,0)
 N BPSPIEN,BPSCOB,BPSCOV,BPX,BPSCOV,DATA
"RTN","BPSPRRX3",213,0)
 ;
"RTN","BPSPRRX3",214,0)
 ; Other Payer IEN defaults to 1 since we don't do tertiary
"RTN","BPSPRRX3",215,0)
 S BPSPIEN=1,BPSCOB="SECONDARY"
"RTN","BPSPRRX3",216,0)
 ;
"RTN","BPSPRRX3",217,0)
 ; Get Coverage Code
"RTN","BPSPRRX3",218,0)
 S BPSCOV=$G(BPSPRARR("308-C8"))
"RTN","BPSPRRX3",219,0)
 I BPSCOV="02" S BPSCOV="02 (OTHER COVERAGE EXISTS - PAYMENT COLLECTED)"
"RTN","BPSPRRX3",220,0)
 E  I BPSCOV="03" S BPSCOV="03 (OTHER COVERAGE EXISTS - THIS CLAIM NOT COVERED)"
"RTN","BPSPRRX3",221,0)
 E  S BPSCOV="04 (OTHER COVERAGE EXISTS - PAYMENT NOT COLLECTED)"
"RTN","BPSPRRX3",222,0)
 ;
"RTN","BPSPRRX3",223,0)
 ; Write Data
"RTN","BPSPRRX3",224,0)
 W !!,"Data for Secondary Claim"
"RTN","BPSPRRX3",225,0)
 W !,"------------------------"
"RTN","BPSPRRX3",226,0)
 W !,"Insurance:  "_$G(BPSPRARR("INS NAME"))_"    COB: "_BPSCOB
"RTN","BPSPRRX3",227,0)
 W !,"Rate Type:  "_$$GET1^DIQ(399.3,$G(BPSPRARR("RTYPE"))_",",.01,,,,)
"RTN","BPSPRRX3",228,0)
 W !,"Other Coverage Code:  "_BPSCOV
"RTN","BPSPRRX3",229,0)
 W !,"Other Payer Coverage Type:  01 (PRIMARY)"
"RTN","BPSPRRX3",230,0)
 W !,"Other Payer ID Qualifier:  03 (BANK INFORMATION NUMBER (BIN))"
"RTN","BPSPRRX3",231,0)
 W !,"Other Payer ID:  "_$P($G(BPSPRARR("OTHER PAYER",BPSPIEN,0)),U,4)
"RTN","BPSPRRX3",232,0)
 W !,"Other Payer Date:  "_$$FMTE^XLFDT($P($G(BPSPRARR("OTHER PAYER",BPSPIEN,0)),U,5))
"RTN","BPSPRRX3",233,0)
 ;
"RTN","BPSPRRX3",234,0)
 ; Write Paid Amounts if previous claim if they are there
"RTN","BPSPRRX3",235,0)
 I $D(BPSPRARR("OTHER PAYER",BPSPIEN,"P")) D
"RTN","BPSPRRX3",236,0)
 . S BPX=0 F  S BPX=$O(BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX)) Q:BPX=""  D
"RTN","BPSPRRX3",237,0)
 . . S DATA=BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX,0)
"RTN","BPSPRRX3",238,0)
 . . W !,"Other Payer Paid Qualifier:  "_$$GET1^DIQ(9002313.2,$P(DATA,U,2),.01)_" ("_$$GET1^DIQ(9002313.2,$P(DATA,U,2),.02)_")"
"RTN","BPSPRRX3",239,0)
 . . W !,"Other Payer Amount Paid:  $"_$FN($P(DATA,U,1),",",2)
"RTN","BPSPRRX3",240,0)
 ;
"RTN","BPSPRRX3",241,0)
 ; Write Reject Codes if previous claims if they are there
"RTN","BPSPRRX3",242,0)
 I $D(BPSPRARR("OTHER PAYER",BPSPIEN,"R")) D
"RTN","BPSPRRX3",243,0)
 . S BPX=0 F  S BPX=$O(BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX)) Q:BPX=""  D
"RTN","BPSPRRX3",244,0)
 . . W !,"Other Payer Reject Code:  "_$$TRANREJ^BPSECFM($G(BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX,0)))
"RTN","BPSPRRX3",245,0)
 Q
"RTN","BPSPRRX3",246,0)
 ;
"RTN","BPSPRRX3",247,0)
PROMPT(ZERONODE,PRMTMSG,DFLTVAL,BPSHLP) ;
"RTN","BPSPRRX3",248,0)
 ;prompts for selection
"RTN","BPSPRRX3",249,0)
 ;returns selection
"RTN","BPSPRRX3",250,0)
 ;OR -1 when timeout and uparrow
"RTN","BPSPRRX3",251,0)
 ;
"RTN","BPSPRRX3",252,0)
 N Y,DUOUT,DTOUT,BPQUIT,DIROUT
"RTN","BPSPRRX3",253,0)
 N DIR
"RTN","BPSPRRX3",254,0)
 S DIR(0)=ZERONODE
"RTN","BPSPRRX3",255,0)
 S DIR("A")=PRMTMSG
"RTN","BPSPRRX3",256,0)
 I BPSHLP]"" S DIR("?")=BPSHLP
"RTN","BPSPRRX3",257,0)
 S:$L($G(DFLTVAL))>0 DIR("B")=DFLTVAL
"RTN","BPSPRRX3",258,0)
 D ^DIR
"RTN","BPSPRRX3",259,0)
 I (Y=-1)!$D(DIROUT)!$D(DUOUT)!$D(DTOUT) Q -1
"RTN","BPSPRRX3",260,0)
 Q Y
"RTN","BPSPRRX3",261,0)
 ;
"RTN","BPSPRRX3",262,0)
GETCDLST(VERSION) ; Returns a list of codes by field/version for use in PROMPTS
"RTN","BPSPRRX3",263,0)
 N CSUB,VSUB,ARRAY,X,BPSSET,BPSCD,BPSV,BPSOK
"RTN","BPSPRRX3",264,0)
 S VERSION=$G(VERSION)
"RTN","BPSPRRX3",265,0)
 S VERSION=$S(VERSION=5.1:51,VERSION=51:51,VERSION="D.0":"D0",VERSION="D0":"D0",1:"D0")
"RTN","BPSPRRX3",266,0)
 S BPSSET=""
"RTN","BPSPRRX3",267,0)
 S BPSCD=0 F  S BPSCD=$O(^BPS(9002313.2,BPSCD)) Q:BPSCD=""  D
"RTN","BPSPRRX3",268,0)
 . S (BPSOK,BPSV)=0 F  S BPSV=$O(^BPS(9002313.2,BPSCD,1,BPSV)) Q:BPSV=""  D  Q:BPSOK
"RTN","BPSPRRX3",269,0)
 . . I $P($G(^BPS(9002313.2,BPSCD,1,BPSV,0)),U)=VERSION S BPSOK=1
"RTN","BPSPRRX3",270,0)
 . I BPSOK S ARRAY(BPSCD)=$P(^BPS(9002313.2,BPSCD,0),U,1)_U_$P(^BPS(9002313.2,BPSCD,0),U,2)
"RTN","BPSPRRX3",271,0)
 S X=0 F  S X=$O(ARRAY(X)) Q:X=""  D
"RTN","BPSPRRX3",272,0)
 . S BPSSET=BPSSET_$P(ARRAY(X),U)_":"_$P(ARRAY(X),U,2)_";"
"RTN","BPSPRRX3",273,0)
 Q BPSSET
"RTN","BPSPRRX3",274,0)
 ;
"RTN","BPSPRRX3",275,0)
PAYSHTV(BPSPLAN) ;Get the Billing Payer Sheet version for this plan
"RTN","BPSPRRX3",276,0)
 ; BPSPLAN = IEN to GROUP INSURANCE PLAN file #355.3
"RTN","BPSPRRX3",277,0)
 N BPSPSH,BPSBPSH
"RTN","BPSPRRX3",278,0)
 ; Get Payer Sheets
"RTN","BPSPRRX3",279,0)
 S BPSPSH=$$PLANEPS^IBNCPDPU(BPSPLAN)
"RTN","BPSPRRX3",280,0)
 ; Get Billing Payer Sheet
"RTN","BPSPRRX3",281,0)
 I +BPSPSH S BPSBPSH=$P($P(BPSPSH,"^",2),",")
"RTN","BPSPRRX3",282,0)
 I $G(BPSBPSH)']"" Q ""
"RTN","BPSPRRX3",283,0)
 Q $P(^BPSF(9002313.92,BPSBPSH,1),U,2)
"RTN","BPSPRRX3",284,0)
 ;
"RTN","BPSPRRX3",285,0)
 ;because the set of codes is too long to fit the MUMPS code line - use a special code to populte set of codes
"RTN","BPSPRRX3",286,0)
SET308(BPSSET) ;
"RTN","BPSPRRX3",287,0)
 N BPX,BPZ
"RTN","BPSPRRX3",288,0)
 F BPX=2:1 S BPZ=$P($T(SET308C8+BPX),";;",2) Q:BPZ=""  D
"RTN","BPSPRRX3",289,0)
 . S BPSSET=BPSSET_$P(BPZ,U)_";"
"RTN","BPSPRRX3",290,0)
 Q
"RTN","BPSPRRX3",291,0)
 ;
"RTN","BPSPRRX3",292,0)
SET308C8 ;set of codes for 308-C8
"RTN","BPSPRRX3",293,0)
 ; set of codes
"RTN","BPSPRRX3",294,0)
 ;;00:NOT SPECIFIED BY PATIENT
"RTN","BPSPRRX3",295,0)
 ;;01:NO OTHER COVERAGE IDENTIFIED
"RTN","BPSPRRX3",296,0)
 ;;02:OTHER COVERAGE EXISTS - PAYMENT COLLECTED
"RTN","BPSPRRX3",297,0)
 ;;03:OTHER COVERAGE BILLED - CLAIM NOT COVERED
"RTN","BPSPRRX3",298,0)
 ;;04:OTHER COVERAGE EXISTS - PAYMENT NOT COLLECTED
"RTN","BPSPRRX3",299,0)
 ;;08:CLAIM IS BILLING FOR PATIENT FINANCIAL RESPONSIBILITY ONLY
"RTN","BPSPRRX3",300,0)
 ;;
"RTN","BPSPRRX3",301,0)
 ;
"RTN","BPSPRRX3",302,0)
 ;BPSPRRX3
"RTN","BPSPRRX6")
0^9^B114820084
"RTN","BPSPRRX6",1,0)
BPSPRRX6 ;ALB/SS - ePharmacy secondary billing ;12-DEC-08
"RTN","BPSPRRX6",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8,10,11,19**;JUN 2004;Build 18
"RTN","BPSPRRX6",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSPRRX6",4,0)
 ;
"RTN","BPSPRRX6",5,0)
 ;
"RTN","BPSPRRX6",6,0)
RXINFO(BPSRX) ;
"RTN","BPSPRRX6",7,0)
 ;Check if if prescription with given number exists
"RTN","BPSPRRX6",8,0)
 ;Input:
"RTN","BPSPRRX6",9,0)
 ;  BPSRX - RX#
"RTN","BPSPRRX6",10,0)
 ;Return:
"RTN","BPSPRRX6",11,0)
 ;  1st piece - ien of #52
"RTN","BPSPRRX6",12,0)
 ;  2nd piece - ien of #2
"RTN","BPSPRRX6",13,0)
 ;  -1 if "^" was entered
"RTN","BPSPRRX6",14,0)
 ;
"RTN","BPSPRRX6",15,0)
 N BPSDFN,BPS52,BPSRET
"RTN","BPSPRRX6",16,0)
 ;prompt for the patient
"RTN","BPSPRRX6",17,0)
 S BPSDFN=$$PROMPT^BPSSCRCV("P^DPT(","SELECT PATIENT")
"RTN","BPSPRRX6",18,0)
 I BPSDFN=-1 Q -1
"RTN","BPSPRRX6",19,0)
 K ^TMP($J,"BPSPRRX")
"RTN","BPSPRRX6",20,0)
 D RX^PSO52API(BPSDFN,"BPSPRRX",,BPSRX,"0")
"RTN","BPSPRRX6",21,0)
 I +$G(^TMP($J,"BPSPRRX",BPSDFN,0))=-1 D  Q 0
"RTN","BPSPRRX6",22,0)
 . W !,"Incorrect RX# or patient name entered.",!
"RTN","BPSPRRX6",23,0)
 S BPSRET=+$O(^TMP($J,"BPSPRRX",BPSDFN,0))_U_BPSDFN
"RTN","BPSPRRX6",24,0)
 K ^TMP($J,"BPSPRRX")
"RTN","BPSPRRX6",25,0)
 Q BPSRET
"RTN","BPSPRRX6",26,0)
 ;
"RTN","BPSPRRX6",27,0)
RXREFIL(BPS52,BPSDFN,BPSRXNO) ;
"RTN","BPSPRRX6",28,0)
 ; Prompt for the fill# and do the rest
"RTN","BPSPRRX6",29,0)
 ;
"RTN","BPSPRRX6",30,0)
 N BPSRF,BPSARR,BPSVAL,BPSELCTD,BPSRETV,BPORRFDT
"RTN","BPSPRRX6",31,0)
 K ^TMP($J,"BPSPRRX")
"RTN","BPSPRRX6",32,0)
 D RX^PSO52API(BPSDFN,"BPSPRRX",BPS52,,"R")
"RTN","BPSPRRX6",33,0)
 I +$G(^TMP($J,"BPSPRRX",BPSDFN,BPS52,"RF",0))=0 Q 0
"RTN","BPSPRRX6",34,0)
 S BPSRF=0
"RTN","BPSPRRX6",35,0)
 F  S BPSRF=$O(^TMP($J,"BPSPRRX",BPSDFN,BPS52,"RF",BPSRF)) Q:+BPSRF=0  D
"RTN","BPSPRRX6",36,0)
 . S BPSVAL=$G(^TMP($J,"BPSPRRX",BPSDFN,BPS52,"RF",BPSRF,.01))
"RTN","BPSPRRX6",37,0)
 . S BPSARR(BPSRF)=BPSRF_U_$P(BPSVAL,U)
"RTN","BPSPRRX6",38,0)
 ;original fill date
"RTN","BPSPRRX6",39,0)
 S BPORRFDT=$$RXFLDT^PSOBPSUT(BPS52,0)
"RTN","BPSPRRX6",40,0)
 S BPSARR(0)=0_U_BPORRFDT
"RTN","BPSPRRX6",41,0)
 F  S BPSELCTD=$$SELREFIL^BPSPRRX5(.BPSARR,"SELECT A FILL TO BILL","RX #"_BPSRXNO_" has the following fills:") Q:$P(BPSELCTD,U)'=""
"RTN","BPSPRRX6",42,0)
 I BPSELCTD<0 Q -1
"RTN","BPSPRRX6",43,0)
 Q BPSELCTD
"RTN","BPSPRRX6",44,0)
 ;
"RTN","BPSPRRX6",45,0)
SECBIL59(MOREDATA,IEN59) ;
"RTN","BPSPRRX6",46,0)
 ; Populate secondary billing fields in BPS TRANSACTION
"RTN","BPSPRRX6",47,0)
 ; MOREDATA array filed into 9002313.59
"RTN","BPSPRRX6",48,0)
 N BPTYPE,BPSTIME,BPCOB
"RTN","BPSPRRX6",49,0)
 N AMTIEN,BPIEN1,BPIEN2,BPZ5914,BPZ,BPZ1,BPZ2,OPAMT,OPAPQ,OPAYD,OPREJ,PIEN,REJIEN,BPQ
"RTN","BPSPRRX6",50,0)
 I +$G(IEN59)=0 Q
"RTN","BPSPRRX6",51,0)
 ;
"RTN","BPSPRRX6",52,0)
 I $L($G(MOREDATA("337-4C"))) I $$FILLFLDS^BPSUTIL2(9002313.59,1204,IEN59,MOREDATA("337-4C"))<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#1204) of (#9002313.59)")   ; cob other payments count
"RTN","BPSPRRX6",53,0)
 I $L($G(MOREDATA("308-C8"))) I $$FILLFLDS^BPSUTIL2(9002313.59,1205,IEN59,MOREDATA("308-C8"))<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#1205) of (#9002313.59)")   ; other coverage code
"RTN","BPSPRRX6",54,0)
 ;
"RTN","BPSPRRX6",55,0)
 ; store secondary billing related data entered by the user - esg 6/14/10
"RTN","BPSPRRX6",56,0)
 S BPQ=0
"RTN","BPSPRRX6",57,0)
 S PIEN=0 F  S PIEN=$O(MOREDATA("OTHER PAYER",PIEN)) Q:'PIEN!BPQ  D
"RTN","BPSPRRX6",58,0)
 . S OPAYD=$G(MOREDATA("OTHER PAYER",PIEN,0)) Q:OPAYD=""
"RTN","BPSPRRX6",59,0)
 . ;
"RTN","BPSPRRX6",60,0)
 . ; count up the number of multiples we have in each set
"RTN","BPSPRRX6",61,0)
 . S BPZ=0 F BPZ1=0:1 S BPZ=$O(MOREDATA("OTHER PAYER",PIEN,"P",BPZ)) Q:'BPZ
"RTN","BPSPRRX6",62,0)
 . S BPZ=0 F BPZ2=0:1 S BPZ=$O(MOREDATA("OTHER PAYER",PIEN,"R",BPZ)) Q:'BPZ
"RTN","BPSPRRX6",63,0)
 . I BPZ1,BPZ2 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot have both payments and rejects for the same OTHER PAYER.") Q
"RTN","BPSPRRX6",64,0)
 . ;
"RTN","BPSPRRX6",65,0)
 . ; add a new entry to subfile 9002313.5914
"RTN","BPSPRRX6",66,0)
 . S BPZ5914=$$INSITEM^BPSUTIL2(9002313.5914,IEN59,PIEN,PIEN,"",,0)
"RTN","BPSPRRX6",67,0)
 . I BPZ5914<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Can't create entry in COB OTHER PAYERS multiple of the BPS TRANSACTION file") Q
"RTN","BPSPRRX6",68,0)
 . ;
"RTN","BPSPRRX6",69,0)
 . ; set the rest of the pieces at this level
"RTN","BPSPRRX6",70,0)
 . I $P(OPAYD,U,2)'="" I $$FILLFLDS^BPSUTIL2(9002313.5914,.02,PIEN_","_IEN59,$P(OPAYD,U,2))<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.02) of (#9002313.5914)") Q
"RTN","BPSPRRX6",71,0)
 . I $P(OPAYD,U,3)'="" I $$FILLFLDS^BPSUTIL2(9002313.5914,.03,PIEN_","_IEN59,$P(OPAYD,U,3))<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.03) of (#9002313.5914)") Q
"RTN","BPSPRRX6",72,0)
 . I $P(OPAYD,U,4)'="" I $$FILLFLDS^BPSUTIL2(9002313.5914,.04,PIEN_","_IEN59,$P(OPAYD,U,4))<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.04) of (#9002313.5914)") Q
"RTN","BPSPRRX6",73,0)
 . I $P(OPAYD,U,5)'="" I $$FILLFLDS^BPSUTIL2(9002313.5914,.05,PIEN_","_IEN59,$P(OPAYD,U,5))<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.05) of (#9002313.5914)") Q
"RTN","BPSPRRX6",74,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.5914,.06,PIEN_","_IEN59,BPZ1)<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.06) of (#9002313.5914)") Q
"RTN","BPSPRRX6",75,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.5914,.07,PIEN_","_IEN59,BPZ2)<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.07) of (#9002313.5914)") Q
"RTN","BPSPRRX6",76,0)
 . ;
"RTN","BPSPRRX6",77,0)
 . ; now loop thru the other payer payment array
"RTN","BPSPRRX6",78,0)
 . S AMTIEN=0 F  S AMTIEN=$O(MOREDATA("OTHER PAYER",PIEN,"P",AMTIEN)) Q:'AMTIEN!BPQ  D
"RTN","BPSPRRX6",79,0)
 .. S OPAMT=$G(MOREDATA("OTHER PAYER",PIEN,"P",AMTIEN,0))
"RTN","BPSPRRX6",80,0)
 .. S OPAPQ=$P(OPAMT,U,2)   ; 342-HC other payer amt paid qualifier (ncpdp 5.1 blank is OK)
"RTN","BPSPRRX6",81,0)
 .. S OPAMT=+OPAMT          ; 431-DV other payer amt paid
"RTN","BPSPRRX6",82,0)
 .. ;
"RTN","BPSPRRX6",83,0)
 .. ; add a new entry to subfile 9002313.59141
"RTN","BPSPRRX6",84,0)
 .. S BPIEN1=$$INSITEM^BPSUTIL2(9002313.59141,PIEN_","_IEN59,OPAMT,AMTIEN,"",,0)
"RTN","BPSPRRX6",85,0)
 .. I BPIEN1<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Can't create entry in 9002313.59141 subfile") Q
"RTN","BPSPRRX6",86,0)
 .. ;
"RTN","BPSPRRX6",87,0)
 .. ; set piece 2
"RTN","BPSPRRX6",88,0)
 .. I OPAPQ'="" I $$FILLFLDS^BPSUTIL2(9002313.59141,.02,AMTIEN_","_PIEN_","_IEN59,OPAPQ)<1 D
"RTN","BPSPRRX6",89,0)
 ... S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.02) of (#9002313.59141)")
"RTN","BPSPRRX6",90,0)
 ... Q
"RTN","BPSPRRX6",91,0)
 .. Q
"RTN","BPSPRRX6",92,0)
 . ;
"RTN","BPSPRRX6",93,0)
 . ; now loop thru the other payer reject array
"RTN","BPSPRRX6",94,0)
 . S REJIEN=0 F  S REJIEN=$O(MOREDATA("OTHER PAYER",PIEN,"R",REJIEN)) Q:'REJIEN!BPQ  D
"RTN","BPSPRRX6",95,0)
 .. S OPREJ=$G(MOREDATA("OTHER PAYER",PIEN,"R",REJIEN,0)) Q:OPREJ=""  Q:$P(OPREJ,U,1)=""
"RTN","BPSPRRX6",96,0)
 .. ;
"RTN","BPSPRRX6",97,0)
 .. ; add a new entry to subfile 9002313.59142
"RTN","BPSPRRX6",98,0)
 .. S BPIEN2=$$INSITEM^BPSUTIL2(9002313.59142,PIEN_","_IEN59,$P(OPREJ,U,1),REJIEN,"",,0)
"RTN","BPSPRRX6",99,0)
 .. I BPIEN2<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Can't create entry in 9002313.59142 subfile") Q
"RTN","BPSPRRX6",100,0)
 .. Q
"RTN","BPSPRRX6",101,0)
 . Q
"RTN","BPSPRRX6",102,0)
 Q
"RTN","BPSPRRX6",103,0)
 ;
"RTN","BPSPRRX6",104,0)
SECDATA(RX,FILL,BPSPLAN,BPSPRDAT,BPSRTYPE) ;
"RTN","BPSPRRX6",105,0)
 ;Populate array elements to resubmit SECONDARY claim.  This builds the COB data using
"RTN","BPSPRRX6",106,0)
 ;  the secondary claim that was previously submitted.
"RTN","BPSPRRX6",107,0)
 ;This will be called by the PRO option (BPSPRRX, BPSPRRX5) and Resubmit with Edits (BPSRES)
"RTN","BPSPRRX6",108,0)
 ;  if it cannot build the COB claim data from the primary claim, which will only happen
"RTN","BPSPRRX6",109,0)
 ;  if the primary claim is missing (primary claim was paper).
"RTN","BPSPRRX6",110,0)
 ;This is also called by BPSNCPDP when the secondary data is missing.  I believe that this
"RTN","BPSPRRX6",111,0)
 ;  will only happen for a Resubmit (RES) from the ECME User Screen.  For this process, we
"RTN","BPSPRRX6",112,0)
 ;  also need to compile the PRIMARY BILL, insurance plan, and rate type.
"RTN","BPSPRRX6",113,0)
 ;
"RTN","BPSPRRX6",114,0)
 ;Input:
"RTN","BPSPRRX6",115,0)
 ;  RX - Prescription (#52) IEN
"RTN","BPSPRRX6",116,0)
 ;  FILL - Fill Number
"RTN","BPSPRRX6",117,0)
 ;  BPSPLAN - Plan (#355.3) IEN, by reference
"RTN","BPSPRRX6",118,0)
 ;  BPSPRDAT - Array with secondary data, by reference
"RTN","BPSPRRX6",119,0)
 ;  BPSRTYPE - Rate Type (#399.3) IEN, by reference
"RTN","BPSPRRX6",120,0)
 ;Output:
"RTN","BPSPRRX6",121,0)
 ;  1 - Success
"RTN","BPSPRRX6",122,0)
 ;  0 - Cannot populate array
"RTN","BPSPRRX6",123,0)
 ;
"RTN","BPSPRRX6",124,0)
 N IEN59SEC,BPBILL
"RTN","BPSPRRX6",125,0)
 I '$G(RX) Q 0
"RTN","BPSPRRX6",126,0)
 I $G(FILL)="" Q 0
"RTN","BPSPRRX6",127,0)
 ;
"RTN","BPSPRRX6",128,0)
 ; Get Transaction IENs for the secondary transaction
"RTN","BPSPRRX6",129,0)
 S IEN59SEC=$$IEN59^BPSOSRX(RX,FILL,2)
"RTN","BPSPRRX6",130,0)
 ;
"RTN","BPSPRRX6",131,0)
 ; Get Primary Bill for the secondary claim
"RTN","BPSPRRX6",132,0)
 S BPBILL=$$PAYBLPRI^BPSUTIL2(IEN59SEC)
"RTN","BPSPRRX6",133,0)
 I BPBILL>0 S BPSPRDAT("PRIMARY BILL")=BPBILL
"RTN","BPSPRRX6",134,0)
 ;
"RTN","BPSPRRX6",135,0)
 ; Get Plan, Rate Type, and Prior Payment from the secondary transaction
"RTN","BPSPRRX6",136,0)
 S BPSPLAN=+$P($G(^BPST(IEN59SEC,10,1,0)),U,1)
"RTN","BPSPRRX6",137,0)
 S BPSRTYPE=+$P($G(^BPST(IEN59SEC,10,1,0)),U,8)
"RTN","BPSPRRX6",138,0)
 S BPSPRDAT("PRIOR PAYMENT")=$P($G(^BPST(IEN59SEC,10,1,2)),U,9)
"RTN","BPSPRRX6",139,0)
 ;
"RTN","BPSPRRX6",140,0)
 ; Build array of COB secondary claim data from the BPS Transaction file - esg - 6/14/10
"RTN","BPSPRRX6",141,0)
 S BPSPRDAT("337-4C")=$P($G(^BPST(IEN59SEC,12)),U,4)  ;1204 cob other payments count
"RTN","BPSPRRX6",142,0)
 S BPSPRDAT("308-C8")=$P($G(^BPST(IEN59SEC,12)),U,5)  ;1205 other coverage code
"RTN","BPSPRRX6",143,0)
 ;
"RTN","BPSPRRX6",144,0)
 ; Build COB data array - esg - 6/14/10
"RTN","BPSPRRX6",145,0)
 N COBPIEN,APDIEN,REJIEN
"RTN","BPSPRRX6",146,0)
 K BPSPRDAT("OTHER PAYER")
"RTN","BPSPRRX6",147,0)
 S COBPIEN=0 F  S COBPIEN=$O(^BPST(IEN59SEC,14,COBPIEN)) Q:'COBPIEN  D
"RTN","BPSPRRX6",148,0)
 . S BPSPRDAT("OTHER PAYER",COBPIEN,0)=$G(^BPST(IEN59SEC,14,COBPIEN,0))
"RTN","BPSPRRX6",149,0)
 . ;
"RTN","BPSPRRX6",150,0)
 . ; Retrieve data from other payer amount paid multiple
"RTN","BPSPRRX6",151,0)
 . S APDIEN=0 F  S APDIEN=$O(^BPST(IEN59SEC,14,COBPIEN,1,APDIEN)) Q:'APDIEN  D
"RTN","BPSPRRX6",152,0)
 .. S BPSPRDAT("OTHER PAYER",COBPIEN,"P",APDIEN,0)=$G(^BPST(IEN59SEC,14,COBPIEN,1,APDIEN,0))
"RTN","BPSPRRX6",153,0)
 .. Q
"RTN","BPSPRRX6",154,0)
 . ;
"RTN","BPSPRRX6",155,0)
 . ; Retrieve data from other payer reject multiple
"RTN","BPSPRRX6",156,0)
 . S REJIEN=0 F  S REJIEN=$O(^BPST(IEN59SEC,14,COBPIEN,2,REJIEN)) Q:'REJIEN  D
"RTN","BPSPRRX6",157,0)
 .. S BPSPRDAT("OTHER PAYER",COBPIEN,"R",REJIEN,0)=$G(^BPST(IEN59SEC,14,COBPIEN,2,REJIEN,0))
"RTN","BPSPRRX6",158,0)
 .. Q
"RTN","BPSPRRX6",159,0)
 . Q
"RTN","BPSPRRX6",160,0)
 Q 1
"RTN","BPSPRRX6",161,0)
 ;
"RTN","BPSPRRX6",162,0)
PRIMDATA(RX,FILL,COBARRAY) ;
"RTN","BPSPRRX6",163,0)
 ; Build COB data from primary claim and response
"RTN","BPSPRRX6",164,0)
 ; This is called by PRO option (BPSPRRX, BPSPRRX5) and Resubmit with Edits (BPSRES)
"RTN","BPSPRRX6",165,0)
 ; 
"RTN","BPSPRRX6",166,0)
 ; Input:
"RTN","BPSPRRX6",167,0)
 ;   RX - Prescription IEN
"RTN","BPSPRRX6",168,0)
 ;   FILL - Fill Number
"RTN","BPSPRRX6",169,0)
 ;   COBARRAY - Array that will be build, passed by reference
"RTN","BPSPRRX6",170,0)
 ; Return:
"RTN","BPSPRRX6",171,0)
 ;   0 = Invalid data (transactions, claim, or response is missing)
"RTN","BPSPRRX6",172,0)
 ;   1 = Valid data
"RTN","BPSPRRX6",173,0)
 ;
"RTN","BPSPRRX6",174,0)
 I '$G(RX) Q 0
"RTN","BPSPRRX6",175,0)
 I $G(FILL)="" Q 0
"RTN","BPSPRRX6",176,0)
 N IEN59PR,BPSIEN,BPSCLM,BPSRESP,BPSSTAT,BIN,BPSOPDT,BPX,BPSPIEN,CNT
"RTN","BPSPRRX6",177,0)
 ;
"RTN","BPSPRRX6",178,0)
 ; Get primary transaction and check that is exists
"RTN","BPSPRRX6",179,0)
 S IEN59PR=$$IEN59^BPSOSRX(RX,FILL,1)
"RTN","BPSPRRX6",180,0)
 I '$D(^BPST(IEN59PR)) Q 0
"RTN","BPSPRRX6",181,0)
 ;
"RTN","BPSPRRX6",182,0)
 ; Get Claim and Response and make sure they both exist
"RTN","BPSPRRX6",183,0)
 S BPSCLM=+$P($G(^BPST(IEN59PR,0)),U,4)
"RTN","BPSPRRX6",184,0)
 I BPSCLM=0 Q 0
"RTN","BPSPRRX6",185,0)
 I '$D(^BPSC(BPSCLM)) Q 0
"RTN","BPSPRRX6",186,0)
 S BPSRESP=+$P($G(^BPST(IEN59PR,0)),U,5)
"RTN","BPSPRRX6",187,0)
 I BPSRESP=0 Q 0
"RTN","BPSPRRX6",188,0)
 I '$D(^BPSR(BPSRESP)) Q 0
"RTN","BPSPRRX6",189,0)
 ;
"RTN","BPSPRRX6",190,0)
 ; Get status of primary transaction
"RTN","BPSPRRX6",191,0)
 S BPSSTAT=$P($$STATUS^BPSOSRX(RX,FILL,,,1),U)
"RTN","BPSPRRX6",192,0)
 ;
"RTN","BPSPRRX6",193,0)
 ; If the primary claim is payable, get the PRIOR PAYMENT from the primary Response record
"RTN","BPSPRRX6",194,0)
 S COBARRAY("PRIOR PAYMENT")=""
"RTN","BPSPRRX6",195,0)
 I $$PAYABLE^BPSOSRX5(BPSSTAT),BPSRESP S COBARRAY("PRIOR PAYMENT")=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,9))
"RTN","BPSPRRX6",196,0)
 ;
"RTN","BPSPRRX6",197,0)
 ; Get Coverage Code
"RTN","BPSPRRX6",198,0)
 I $G(COBARRAY("PRIOR PAYMENT"))>0 S COBARRAY("308-C8")="02"
"RTN","BPSPRRX6",199,0)
 E  I BPSSTAT["E REJECTED" S COBARRAY("308-C8")="03"
"RTN","BPSPRRX6",200,0)
 E  S COBARRAY("308-C8")="04"
"RTN","BPSPRRX6",201,0)
 ;
"RTN","BPSPRRX6",202,0)
 ; Get BIN from the primary claim record
"RTN","BPSPRRX6",203,0)
 S BIN=""
"RTN","BPSPRRX6",204,0)
 I BPSCLM S BIN=$P($G(^BPSC(BPSCLM,100)),U)
"RTN","BPSPRRX6",205,0)
 ;
"RTN","BPSPRRX6",206,0)
 ; Get the Other Payer Date in internal format from the primary Response record
"RTN","BPSPRRX6",207,0)
 S BPSOPDT=""
"RTN","BPSPRRX6",208,0)
 I BPSRESP S BPSOPDT=($P($G(^BPSR(BPSRESP,0)),U,2))\1
"RTN","BPSPRRX6",209,0)
 ;
"RTN","BPSPRRX6",210,0)
 ; Default the Other Payer IEN 1 since we only do secondary
"RTN","BPSPRRX6",211,0)
 S BPSPIEN=1
"RTN","BPSPRRX6",212,0)
 S COBARRAY("337-4C")=BPSPIEN ; Other Payer Count
"RTN","BPSPRRX6",213,0)
 ;
"RTN","BPSPRRX6",214,0)
 ; Set array of Other Payer Data
"RTN","BPSPRRX6",215,0)
 K COBARRAY("OTHER PAYER")
"RTN","BPSPRRX6",216,0)
 S COBARRAY("OTHER PAYER",BPSPIEN,0)="1^01^03^"_BIN_"^"_BPSOPDT_"^0^0"
"RTN","BPSPRRX6",217,0)
 ;
"RTN","BPSPRRX6",218,0)
 ; Build Paid Amounts if previous claim was paid
"RTN","BPSPRRX6",219,0)
 I BPSSTAT["E PAYABLE",$G(COBARRAY("PRIOR PAYMENT"))]"" D
"RTN","BPSPRRX6",220,0)
 . N BPARR,BPX D GETOPAP(BPSRESP,.BPARR)
"RTN","BPSPRRX6",221,0)
 . S BPX=0 F CNT=0:1  S BPX=$O(BPARR(BPX)) Q:BPX=""  S COBARRAY("OTHER PAYER",BPSPIEN,"P",BPX,0)=BPARR(BPX)
"RTN","BPSPRRX6",222,0)
 . S $P(COBARRAY("OTHER PAYER",BPSPIEN,0),U,6)=CNT
"RTN","BPSPRRX6",223,0)
 ;
"RTN","BPSPRRX6",224,0)
 ; Build Reject Codes if previous claims was rejected
"RTN","BPSPRRX6",225,0)
 I BPSSTAT["E REJECTED" D
"RTN","BPSPRRX6",226,0)
 . N BPARR,BPX D GETRJCOD(BPSRESP,.BPARR)
"RTN","BPSPRRX6",227,0)
 . S BPX=0 F CNT=0:1  S BPX=$O(BPARR(BPX)) Q:BPX=""  S COBARRAY("OTHER PAYER",BPSPIEN,"R",BPX,0)=BPARR(BPX)
"RTN","BPSPRRX6",228,0)
 . S $P(COBARRAY("OTHER PAYER",BPSPIEN,0),U,7)=CNT
"RTN","BPSPRRX6",229,0)
 Q 1
"RTN","BPSPRRX6",230,0)
 ;
"RTN","BPSPRRX6",231,0)
GETOPAP(BPSRESP,BPSDAT) ;
"RTN","BPSPRRX6",232,0)
 ; Get the Other Payer Amount Paid values and qualifiers
"RTN","BPSPRRX6",233,0)
 ; Input:
"RTN","BPSPRRX6",234,0)
 ;   BPSRESP = IEN of BPS RESPONSE file
"RTN","BPSPRRX6",235,0)
 ;   BPSDAT(N)=Array of Paid Amount^Qualifier (passed by reference)
"RTN","BPSPRRX6",236,0)
 ;
"RTN","BPSPRRX6",237,0)
 I '$G(BPSRESP) Q
"RTN","BPSPRRX6",238,0)
 I '$D(^BPSR(BPSRESP,1000)) Q
"RTN","BPSPRRX6",239,0)
 N CNT,BPS509,BPS559,BPS558,BPS523,BPS563,BPS562,BPS521,BPSQUAL,BPSAMNT,BPSTAX,BPSOAP,BPSX
"RTN","BPSPRRX6",240,0)
 S CNT=0
"RTN","BPSPRRX6",241,0)
 ; Set up D.0 fields for COB segment
"RTN","BPSPRRX6",242,0)
 S BPS509=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,9))
"RTN","BPSPRRX6",243,0)
 ; If Total Amount Paid is a negative number, set it to zero.
"RTN","BPSPRRX6",244,0)
 ; Zero Pay amount is allowed
"RTN","BPSPRRX6",245,0)
 I BPS509<0 S BPS509=0
"RTN","BPSPRRX6",246,0)
 ;
"RTN","BPSPRRX6",247,0)
 ; Cognitive Services Qualifier/Professional Service Fee Paid
"RTN","BPSPRRX6",248,0)
 S BPS562=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,560)),U,2))
"RTN","BPSPRRX6",249,0)
 I BPS562<0 S BPS562=0
"RTN","BPSPRRX6",250,0)
 I +BPS562 S CNT=CNT+1,BPSDAT(CNT)=BPS562_U_"06"
"RTN","BPSPRRX6",251,0)
 ;
"RTN","BPSPRRX6",252,0)
 ; Incentive Qualifier/Incentive Amt Paid
"RTN","BPSPRRX6",253,0)
 S BPS521=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,21))
"RTN","BPSPRRX6",254,0)
 I BPS521<0 S BPS521=0
"RTN","BPSPRRX6",255,0)
 I +BPS521 S CNT=CNT+1,BPSDAT(CNT)=BPS521_U_"05"
"RTN","BPSPRRX6",256,0)
 ; Subtract Incentive Qualifier from Paid Amount for Drug Benefit
"RTN","BPSPRRX6",257,0)
 S BPS509=BPS509-BPS521
"RTN","BPSPRRX6",258,0)
 ;
"RTN","BPSPRRX6",259,0)
 ; Default all Tax values to zero for negative values
"RTN","BPSPRRX6",260,0)
 S BPS559=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,550)),U,9)) ; Percentage Sales Tax Paid
"RTN","BPSPRRX6",261,0)
 I BPS559<0 S BPS559=0
"RTN","BPSPRRX6",262,0)
 S BPS558=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,550)),U,8)) ; Flat Sales Tax Paid
"RTN","BPSPRRX6",263,0)
 I BPS558<0 S BPS558=0
"RTN","BPSPRRX6",264,0)
 S BPS523=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,23)) ; Amount Attributed to Sales Tax
"RTN","BPSPRRX6",265,0)
 I BPS523<0 S BPS523=0
"RTN","BPSPRRX6",266,0)
 ;
"RTN","BPSPRRX6",267,0)
 ; Sales Tax Qualifier
"RTN","BPSPRRX6",268,0)
 S BPSTAX=BPS559+BPS558-BPS523
"RTN","BPSPRRX6",269,0)
 I BPSTAX<0 S BPSTAX=0
"RTN","BPSPRRX6",270,0)
 I +BPSTAX S CNT=CNT+1,BPSDAT(CNT)=BPSTAX_U_"10"
"RTN","BPSPRRX6",271,0)
 ; Subtract Sales Tax Qualifier from Paid Amount for Drug Benefit
"RTN","BPSPRRX6",272,0)
 S BPS509=BPS509-BPSTAX
"RTN","BPSPRRX6",273,0)
 ;
"RTN","BPSPRRX6",274,0)
 ; Set OTHER AMOUNT PAID multiples
"RTN","BPSPRRX6",275,0)
 S BPS563=0 F  S BPS563=$O(^BPSR(BPSRESP,1000,1,563.01,BPS563)) Q:BPS563=""  D
"RTN","BPSPRRX6",276,0)
 . S BPSQUAL=$P($G(^BPSR(BPSRESP,1000,1,563.01,BPS563,1)),U,1)
"RTN","BPSPRRX6",277,0)
 . ; Quit if qualifier = 99 since there is no NCPDP mapping for this qualifier
"RTN","BPSPRRX6",278,0)
 . Q:BPSQUAL']""!(BPSQUAL=99)
"RTN","BPSPRRX6",279,0)
 . S BPSAMNT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,563.01,BPS563,1)),U,2))
"RTN","BPSPRRX6",280,0)
 . ; Default negative amounts to zero
"RTN","BPSPRRX6",281,0)
 . I BPSAMNT<0 S BPSAMNT=0
"RTN","BPSPRRX6",282,0)
 . I $D(BPSOAP(BPSQUAL)) S BPSOAP(BPSQUAL)=BPSOAP(BPSQUAL)+BPSAMNT
"RTN","BPSPRRX6",283,0)
 . I '$D(BPSOAP(BPSQUAL)) S BPSOAP(BPSQUAL)=BPSAMNT
"RTN","BPSPRRX6",284,0)
 . ; Subtract Amount if Qualifier is 01, 02, 03, 04, 09 or 11
"RTN","BPSPRRX6",285,0)
 . I "010203040911"[BPSQUAL S BPS509=BPS509-BPSAMNT
"RTN","BPSPRRX6",286,0)
 I $D(BPSOAP) D
"RTN","BPSPRRX6",287,0)
 . S BPSX="" F  S BPSX=$O(BPSOAP(BPSX)) Q:BPSX=""  D
"RTN","BPSPRRX6",288,0)
 . . S CNT=CNT+1,BPSDAT(CNT)=BPSOAP(BPSX)_U_$$GETPDIEN(BPSX)
"RTN","BPSPRRX6",289,0)
 ; Set Drug Benefit Qualifier
"RTN","BPSPRRX6",290,0)
 I BPS509<0 S BPS509=0
"RTN","BPSPRRX6",291,0)
 S CNT=CNT+1,BPSDAT(CNT)=BPS509_U_$$GETPDIEN("07")
"RTN","BPSPRRX6",292,0)
 Q
"RTN","BPSPRRX6",293,0)
 ;
"RTN","BPSPRRX6",294,0)
GETPDIEN(CODE) ;
"RTN","BPSPRRX6",295,0)
 ; Get the Other Payer Amount Paid Qualifier IEN for BPS NCPCP OTHER
"RTN","BPSPRRX6",296,0)
 ;   PAYER AMOUNT PAID QUAL file
"RTN","BPSPRRX6",297,0)
 I $G(CODE)="" Q ""
"RTN","BPSPRRX6",298,0)
 Q $O(^BPS(9002313.2,"B",CODE,""))
"RTN","BPSPRRX6",299,0)
 ;
"RTN","BPSPRRX6",300,0)
GETRJCOD(BPRESP,BPARR) ;
"RTN","BPSPRRX6",301,0)
 ; Get the first five reject codes w/o getting duplicates
"RTN","BPSPRRX6",302,0)
 ; Input:
"RTN","BPSPRRX6",303,0)
 ;   BPSRESP = IEN of BPS RESPONSE file
"RTN","BPSPRRX6",304,0)
 ;   BPSARR1 = Array of Reject Codes
"RTN","BPSPRRX6",305,0)
 ;
"RTN","BPSPRRX6",306,0)
 I '$G(BPRESP) Q
"RTN","BPSPRRX6",307,0)
 I '$D(^BPSR(BPRESP,1000)) Q
"RTN","BPSPRRX6",308,0)
 N BPRCNT,BPRJ,BPPOS,BPRJCOD
"RTN","BPSPRRX6",309,0)
 ;
"RTN","BPSPRRX6",310,0)
 ; Default BPPOS to the first transaction in the RESPONSE multiple
"RTN","BPSPRRX6",311,0)
 ; We only want the first five reject codes and no duplicates
"RTN","BPSPRRX6",312,0)
 S (BPRCNT,BPRJ)=0,BPPOS=1
"RTN","BPSPRRX6",313,0)
 F  S BPRJ=$O(^BPSR(BPRESP,1000,BPPOS,511,BPRJ)) Q:+BPRJ=0  D  Q:BPRCNT>4
"RTN","BPSPRRX6",314,0)
 . S BPRJCOD=$P($G(^BPSR(BPRESP,1000,BPPOS,511,BPRJ,0)),U)
"RTN","BPSPRRX6",315,0)
 . Q:$L(BPRJCOD)=0
"RTN","BPSPRRX6",316,0)
 . ; Only store if not a duplicate
"RTN","BPSPRRX6",317,0)
 . I '$D(BPARR(BPRJCOD)) S BPRCNT=BPRCNT+1,BPARR(BPRCNT)=BPRJCOD
"RTN","BPSPRRX6",318,0)
 Q
"RTN","BPSPRRX6",319,0)
 ;BPSPRRX6
"RTN","BPSRPAY")
0^14^B35888506
"RTN","BPSRPAY",1,0)
BPSRPAY ;BHAM ISC/BEE - ECME REPORTS ;11/15/07  14:13
"RTN","BPSRPAY",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,7,10,15,19**;JUN 2004;Build 18
"RTN","BPSRPAY",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPAY",4,0)
 ;
"RTN","BPSRPAY",5,0)
 Q
"RTN","BPSRPAY",6,0)
 ;
"RTN","BPSRPAY",7,0)
 ; Payer Sheet Display Report
"RTN","BPSRPAY",8,0)
 ;
"RTN","BPSRPAY",9,0)
 ;User Prompts
"RTN","BPSRPAY",10,0)
EN N BPFILE,BPIEN,BPSCR,BPQ
"RTN","BPSRPAY",11,0)
 S BPFILE=9002313.92
"RTN","BPSRPAY",12,0)
 ;
"RTN","BPSRPAY",13,0)
 ;Select Payer Sheet
"RTN","BPSRPAY",14,0)
 I $D(IOF) W @IOF
"RTN","BPSRPAY",15,0)
 W !,"Payer Sheet Detail Report",!!
"RTN","BPSRPAY",16,0)
 S BPIEN=$$BPIEN(BPFILE)
"RTN","BPSRPAY",17,0)
 ;
"RTN","BPSRPAY",18,0)
 ;Check for Valid Entry
"RTN","BPSRPAY",19,0)
 I BPIEN=-1 G EXIT
"RTN","BPSRPAY",20,0)
 ;
"RTN","BPSRPAY",21,0)
 ;Select Device
"RTN","BPSRPAY",22,0)
 I $$DEVICE=-1 G EXIT
"RTN","BPSRPAY",23,0)
 ;
"RTN","BPSRPAY",24,0)
 ;Display Data
"RTN","BPSRPAY",25,0)
 D RUN(BPFILE,BPIEN)
"RTN","BPSRPAY",26,0)
 ;
"RTN","BPSRPAY",27,0)
 ;Exit
"RTN","BPSRPAY",28,0)
EXIT Q
"RTN","BPSRPAY",29,0)
 ;
"RTN","BPSRPAY",30,0)
 ;Display the Payer Sheet Info
"RTN","BPSRPAY",31,0)
 ;
"RTN","BPSRPAY",32,0)
RUN(BPFILE,BPIEN) N BPQ
"RTN","BPSRPAY",33,0)
 D PSPRNT(BPFILE,BPIEN)
"RTN","BPSRPAY",34,0)
 Q
"RTN","BPSRPAY",35,0)
 ;
"RTN","BPSRPAY",36,0)
 ; Select a payer sheet
"RTN","BPSRPAY",37,0)
BPIEN(BPFILE) N DIC,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPAY",38,0)
 S DIC=$$ROOT^DILFD(BPFILE),DIC(0)="AEMQ"
"RTN","BPSRPAY",39,0)
 S DIC("A")="Select Payer Sheet: "
"RTN","BPSRPAY",40,0)
 D ^DIC
"RTN","BPSRPAY",41,0)
 Q +Y
"RTN","BPSRPAY",42,0)
 ;
"RTN","BPSRPAY",43,0)
 ;Select the output Device
"RTN","BPSRPAY",44,0)
DEVICE() N %ZIS,ZTSK,ZTRTN,ZTIO,ZTSAVE,ZTDESC,POP,BPQ
"RTN","BPSRPAY",45,0)
 S BPQ=0
"RTN","BPSRPAY",46,0)
 S %ZIS="QM"
"RTN","BPSRPAY",47,0)
 W ! D ^%ZIS
"RTN","BPSRPAY",48,0)
 I POP Q -1
"RTN","BPSRPAY",49,0)
 S BPSCR=$S($E($G(IOST),1,2)="C-":1,1:0)
"RTN","BPSRPAY",50,0)
 I $D(IO("Q")) D  S BPQ=-1
"RTN","BPSRPAY",51,0)
 . S ZTRTN="RUN^BPSRPAY(BPFILE,BPIEN)"
"RTN","BPSRPAY",52,0)
 . S ZTIO=ION
"RTN","BPSRPAY",53,0)
 . S ZTSAVE("*")=""
"RTN","BPSRPAY",54,0)
 . S ZTDESC="PAYER SHEET DETAIL REPORT"
"RTN","BPSRPAY",55,0)
 . D ^%ZTLOAD
"RTN","BPSRPAY",56,0)
 . W !,$S($D(ZTSK):"REQUEST QUEUED TASK="_ZTSK,1:"REQUEST CANCELLED")
"RTN","BPSRPAY",57,0)
 . D HOME^%ZIS
"RTN","BPSRPAY",58,0)
 U IO
"RTN","BPSRPAY",59,0)
 Q BPQ
"RTN","BPSRPAY",60,0)
 ;
"RTN","BPSRPAY",61,0)
 ; Payer Sheet Display
"RTN","BPSRPAY",62,0)
PSPRNT(BPFILE,EN) N BPSHDR,BPIEN,BPPAGE,BPQ,CD,L,N,N1,N2,NAME,NM,NUM,SEG,SP
"RTN","BPSRPAY",63,0)
 N SEGNM,TB,WP,X,X0,X5,ZTREQ
"RTN","BPSRPAY",64,0)
 ;
"RTN","BPSRPAY",65,0)
 ; Build List of Segment Header Names
"RTN","BPSRPAY",66,0)
 D INIT
"RTN","BPSRPAY",67,0)
 ;
"RTN","BPSRPAY",68,0)
 ; Get header information
"RTN","BPSRPAY",69,0)
 S BPIEN=EN_","
"RTN","BPSRPAY",70,0)
 D GETS^DIQ(BPFILE,EN,".01;1.02;1.06;1.14","","BPSHDR")
"RTN","BPSRPAY",71,0)
 ;
"RTN","BPSRPAY",72,0)
 ; Display Header Information
"RTN","BPSRPAY",73,0)
 S BPQ=0,BPPAGE=0,SEGNM=""
"RTN","BPSRPAY",74,0)
 D HDR
"RTN","BPSRPAY",75,0)
 ;
"RTN","BPSRPAY",76,0)
 ; Field Detail Information
"RTN","BPSRPAY",77,0)
 ; Loop through Segments
"RTN","BPSRPAY",78,0)
 S SEG=99 F  S SEG=$O(^BPSF(BPFILE,EN,SEG)) Q:+SEG=0!(SEG>300)  D  I BPQ Q
"RTN","BPSRPAY",79,0)
 . ;
"RTN","BPSRPAY",80,0)
 . ;Make sure there are entries for the segment
"RTN","BPSRPAY",81,0)
 . I $P($G(^BPSF(BPFILE,EN,SEG,0)),U,4)<1 Q
"RTN","BPSRPAY",82,0)
 . ;
"RTN","BPSRPAY",83,0)
 . ; Get and display Segment Name
"RTN","BPSRPAY",84,0)
 . S SEGNM=$G(NAME(SEG))
"RTN","BPSRPAY",85,0)
 . ; Check that we can display the Segment Name and at least one additional field
"RTN","BPSRPAY",86,0)
 . D CHKP(2) I BPQ Q
"RTN","BPSRPAY",87,0)
 . I BPPAGE=1!($Y>5) W !,?((60-$L(SEGNM)+8)/2),"*** ",SEGNM," ***"
"RTN","BPSRPAY",88,0)
 . ; Loop through the Field via the Sequence Number
"RTN","BPSRPAY",89,0)
 . S N=0 F  S N=$O(^BPSF(BPFILE,EN,SEG,"B",N)) Q:N=""  D  I BPQ Q
"RTN","BPSRPAY",90,0)
 .. S N1=0 F  S N1=$O(^BPSF(BPFILE,EN,SEG,"B",N,N1)) Q:N1=""  D  I BPQ Q
"RTN","BPSRPAY",91,0)
 ... ;
"RTN","BPSRPAY",92,0)
 ... ; Get Field Data and Format the Field Number
"RTN","BPSRPAY",93,0)
 ... S X=$G(^BPSF(BPFILE,EN,SEG,N1,0))
"RTN","BPSRPAY",94,0)
 ... S NUM=$P(X,U,2),SP=$P(X,U,3)
"RTN","BPSRPAY",95,0)
 ... I NUM S X0=$G(^BPSF(9002313.91,NUM,0)),X5=$G(^BPSF(9002313.91,NUM,5))
"RTN","BPSRPAY",96,0)
 ... E  S (X0,X5)=""
"RTN","BPSRPAY",97,0)
 ... S NUM=$P(X0,U,1)_"-"_$P(X5,U,1),NM=$P(X0,U,3)
"RTN","BPSRPAY",98,0)
 ... ;
"RTN","BPSRPAY",99,0)
 ... ; Display the field information
"RTN","BPSRPAY",100,0)
 ... D CHKP(1) I BPQ Q
"RTN","BPSRPAY",101,0)
 ... W !,N,?5,NUM,?17,NM,?71,$J(SP,9)
"RTN","BPSRPAY",102,0)
 ... ;
"RTN","BPSRPAY",103,0)
 ... ; If there is special code, display it
"RTN","BPSRPAY",104,0)
 ... I SP="X" S N2=0 F  S N2=$O(^BPSF(BPFILE,EN,SEG,N1,1,N2)) Q:N2=""  D  I BPQ Q
"RTN","BPSRPAY",105,0)
 .... S CD=$G(^BPSF(BPFILE,EN,SEG,N1,1,N2,0))
"RTN","BPSRPAY",106,0)
 .... S TB=19,L=61,WP=0
"RTN","BPSRPAY",107,0)
 .... F  D CHKP(1) Q:BPQ  W ! D  Q:CD=""
"RTN","BPSRPAY",108,0)
 ..... W:N2=1 ?5,"Special Code: "
"RTN","BPSRPAY",109,0)
 ..... W:WP=1 ?12,"<cont>"
"RTN","BPSRPAY",110,0)
 ..... W ?19,$E(CD,1,L)
"RTN","BPSRPAY",111,0)
 ..... S CD=$E(CD,L+1,200) Q:CD=""
"RTN","BPSRPAY",112,0)
 ..... S WP=1
"RTN","BPSRPAY",113,0)
 . I BPQ Q
"RTN","BPSRPAY",114,0)
 .D CHKP(1) Q:BPQ  W !
"RTN","BPSRPAY",115,0)
 I 'BPSCR W !,@IOF
"RTN","BPSRPAY",116,0)
 E  I 'BPQ D PAUSE2
"RTN","BPSRPAY",117,0)
 I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","BPSRPAY",118,0)
 D ^%ZISC
"RTN","BPSRPAY",119,0)
XPRT Q
"RTN","BPSRPAY",120,0)
 ;
"RTN","BPSRPAY",121,0)
 ;Display Report Header
"RTN","BPSRPAY",122,0)
 ;
"RTN","BPSRPAY",123,0)
HDR S BPPAGE=$G(BPPAGE)+1
"RTN","BPSRPAY",124,0)
 W @IOF
"RTN","BPSRPAY",125,0)
 W "Payer Sheet Detail Report"
"RTN","BPSRPAY",126,0)
 W ?48,"Print Date: "_$E(DT,4,5)_"/"_$E(DT,6,7)_"/"_$E(DT,2,3)
"RTN","BPSRPAY",127,0)
 W "    Page:",$J(BPPAGE,3)
"RTN","BPSRPAY",128,0)
 W !,$J("Payer Sheet Name: ",20),$G(BPSHDR(BPFILE,BPIEN,.01))
"RTN","BPSRPAY",129,0)
 W ?40,$J("Version Number: ",20),$G(BPSHDR(BPFILE,BPIEN,1.14))
"RTN","BPSRPAY",130,0)
 I BPPAGE=1 D
"RTN","BPSRPAY",131,0)
 . W !,$J("Status: ",20),$G(BPSHDR(BPFILE,BPIEN,1.06))
"RTN","BPSRPAY",132,0)
 . W ?40,$J("NCPDP Version: ",20),$G(BPSHDR(BPFILE,BPIEN,1.02))
"RTN","BPSRPAY",133,0)
 ;
"RTN","BPSRPAY",134,0)
 ; Display subheader
"RTN","BPSRPAY",135,0)
 W !!,"Seq",?5,"Field",?17,"Field Name",?71,"Proc Mode"
"RTN","BPSRPAY",136,0)
 W !,"---",?5,"-----",?17,"----------",?71,"---------"
"RTN","BPSRPAY",137,0)
 I $G(SEGNM)]"" W !,?((60-$L(SEGNM)+8)/2),"*** ",SEGNM," ***"
"RTN","BPSRPAY",138,0)
 Q
"RTN","BPSRPAY",139,0)
 ;
"RTN","BPSRPAY",140,0)
 ;Check for End of Page
"RTN","BPSRPAY",141,0)
 ;
"RTN","BPSRPAY",142,0)
 ; Input variable -> BPLINES - Number of lines from bottom
"RTN","BPSRPAY",143,0)
 ;                      CONT - 0 = New Entry, 1 = Continue Entry
"RTN","BPSRPAY",144,0)
 ;
"RTN","BPSRPAY",145,0)
CHKP(BPLINES) S BPLINES=BPLINES+1
"RTN","BPSRPAY",146,0)
 I $G(BPSCR) S BPLINES=BPLINES+3
"RTN","BPSRPAY",147,0)
 I $Y>(IOSL-BPLINES) D:$G(BPSCR) PAUSE Q:$G(BPQ) 0 D HDR Q 1
"RTN","BPSRPAY",148,0)
 Q 0
"RTN","BPSRPAY",149,0)
 ;
"RTN","BPSRPAY",150,0)
PAUSE ;
"RTN","BPSRPAY",151,0)
 N X
"RTN","BPSRPAY",152,0)
 U IO(0)
"RTN","BPSRPAY",153,0)
 R !!,"Press RETURN to continue, '^' to exit: ",X:DTIME
"RTN","BPSRPAY",154,0)
 I '$T S X="^"
"RTN","BPSRPAY",155,0)
 I X["^" S BPQ=1
"RTN","BPSRPAY",156,0)
 U IO
"RTN","BPSRPAY",157,0)
 Q
"RTN","BPSRPAY",158,0)
 ;
"RTN","BPSRPAY",159,0)
PAUSE2 ;
"RTN","BPSRPAY",160,0)
 N X
"RTN","BPSRPAY",161,0)
 U IO(0)
"RTN","BPSRPAY",162,0)
 R !,"Press RETURN to continue: ",X:DTIME
"RTN","BPSRPAY",163,0)
 U IO
"RTN","BPSRPAY",164,0)
 Q
"RTN","BPSRPAY",165,0)
 ;
"RTN","BPSRPAY",166,0)
INIT ; Create local array of segment header names
"RTN","BPSRPAY",167,0)
 S NAME(100)="Transaction Header Segment",NAME(110)="Patient Segment"
"RTN","BPSRPAY",168,0)
 S NAME(120)="Insurance Segment",NAME(130)="Claim Segment"
"RTN","BPSRPAY",169,0)
 S NAME(140)="Pharmacy Provider Segment",NAME(150)="Prescriber Segment"
"RTN","BPSRPAY",170,0)
 S NAME(160)="COB/Other Payments Segment",NAME(170)="Workers' Compensation Segment"
"RTN","BPSRPAY",171,0)
 S NAME(180)="DUR/PPS Segment",NAME(190)="Pricing Segment"
"RTN","BPSRPAY",172,0)
 S NAME(200)="Coupon Segment",NAME(210)="Compound Segment"
"RTN","BPSRPAY",173,0)
 S NAME(220)="Prior Authorization Segment",NAME(230)="Clinical Segment"
"RTN","BPSRPAY",174,0)
 S NAME(240)="Additional Documentation Segment",NAME(250)="Facility Segment"
"RTN","BPSRPAY",175,0)
 S NAME(260)="Narrative Segment"
"RTN","BPSRPAY",176,0)
 ; New segments added - BPS*1*15
"RTN","BPSRPAY",177,0)
 S NAME(270)="Purchaser Segment"
"RTN","BPSRPAY",178,0)
 S NAME(280)="Service Provider Segment"
"RTN","BPSRPAY",179,0)
 ; New segments added - BPS*1*19
"RTN","BPSRPAY",180,0)
 S NAME(290)="Intermediary Segment"
"RTN","BPSRPAY",181,0)
 S NAME(300)="Last Known 4Rx Segment"
"RTN","BPSRPAY",182,0)
 Q
"RTN","BPSRPT0")
0^1^B27167649
"RTN","BPSRPT0",1,0)
BPSRPT0 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT0",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,10,11,19**;JUN 2004;Build 18
"RTN","BPSRPT0",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT0",4,0)
 ;
"RTN","BPSRPT0",5,0)
 Q
"RTN","BPSRPT0",6,0)
 ;
"RTN","BPSRPT0",7,0)
 ; Front End for ECME Reports
"RTN","BPSRPT0",8,0)
 ; 
"RTN","BPSRPT0",9,0)
 ; Input variable: BPRTYPE -> 1 = Payable Claims
"RTN","BPSRPT0",10,0)
 ;                          2 = Rejected Claims
"RTN","BPSRPT0",11,0)
 ;                          3 = Claims Submitted, Not Yet Released
"RTN","BPSRPT0",12,0)
 ;                          4 = Reversed Claims
"RTN","BPSRPT0",13,0)
 ;                          5 = Recent Transactions
"RTN","BPSRPT0",14,0)
 ;                          6 = Totals By Date
"RTN","BPSRPT0",15,0)
 ;                          7 = Closed Claims
"RTN","BPSRPT0",16,0)
 ;                          8 = Spending Account Report
"RTN","BPSRPT0",17,0)
 ;                          9 = ECME RXs with Non-Billable Status
"RTN","BPSRPT0",18,0)
 ;                          
"RTN","BPSRPT0",19,0)
 ; Passed variables - The following local variables are passed around the BPSRPT* routines
"RTN","BPSRPT0",20,0)
 ;                    and are not passed as parameters but are assumed to be defined:
"RTN","BPSRPT0",21,0)
 ;                    BPACREJ,BPAUTREV,BPBEGDT,BPBLINE,BPCCRSN,BPDRGCL,BPDRUG,BPENDDT,BPEXCEL,
"RTN","BPSRPT0",22,0)
 ;                    BPINSINF,BPGRPLN,BPMWC,BPNOW,BPPAGE,BPPHARM,BPQ,BPQSTDRG,
"RTN","BPSRPT0",23,0)
 ;                    BPRLNRL,BPRTBCK,BPSDATA,BPSUMDET,BPRTYPE,BPNBSTS,BPALRC,BPELIG1
"RTN","BPSRPT0",24,0)
 ;                          
"RTN","BPSRPT0",25,0)
EN(BPRTYPE) N %,BPACREJ,BPAUTREV,BPBEGDT,BPCCRSN,BPDRGCL,BPDRUG,BPENDDT,BPEXCEL,BPNOW,BPPHARM,BPINSINF,BPMWC,BPQ,BPQSTDRG
"RTN","BPSRPT0",26,0)
 N BPREJCD,BPRLNRL,BPRPTNAM,BPRTBCK,BPSCR,BPSUMDET,CODE,POS,STAT,X,Y,BPINS,BPARR,BPELIG,BPOPCL
"RTN","BPSRPT0",27,0)
 N BPNBSTS,BPALRC,BPELIG1
"RTN","BPSRPT0",28,0)
 ;
"RTN","BPSRPT0",29,0)
 ;Verify that a valid report has been requested
"RTN","BPSRPT0",30,0)
 I ",1,2,3,4,5,6,7,8,9,"'[(","_$G(BPRTYPE)_",") W "<Invalid Menu Definition - Report Undefined>" H 3 Q
"RTN","BPSRPT0",31,0)
 S BPRPTNAM=$P("PAYABLE CLAIMS^REJECTED CLAIMS^SUBMIT,NOT RELEASED CLAIMS^REVERSED CLAIMS^RECENT TRANSACTIONS^TOTALS^CLOSED CLAIMS^SPENDING ACCOUNT REPORT^RXS WITH NON-BILLABLE STATUS","^",BPRTYPE)
"RTN","BPSRPT0",32,0)
 ;
"RTN","BPSRPT0",33,0)
 ;Get current Date/Time
"RTN","BPSRPT0",34,0)
 D NOW^%DTC S Y=% D DD^%DT S BPNOW=Y
"RTN","BPSRPT0",35,0)
 ;
"RTN","BPSRPT0",36,0)
 ;Prompt for ECME Pharmacy Division(s) (No Default)
"RTN","BPSRPT0",37,0)
 ;Sets up BPPHARM variable and array, BPPHARM =0 ALL or BPPHARM=1,BPPHARM(ptr) for list
"RTN","BPSRPT0",38,0)
 S X=$$SELPHARM^BPSRPT3() I X="^" G EXIT
"RTN","BPSRPT0",39,0)
 ;
"RTN","BPSRPT0",40,0)
 ;Prompt to Display Summary or Detail Format (Default to Detail)
"RTN","BPSRPT0",41,0)
 ;Returns 1 for Summary, 0 for Detail
"RTN","BPSRPT0",42,0)
 S BPSUMDET=$$SELSMDET^BPSRPT3(2) I BPSUMDET="^" G EXIT
"RTN","BPSRPT0",43,0)
 ;
"RTN","BPSRPT0",44,0)
 ;Prompt to allow selection of Multiple Insurances or All (Default to ALL)
"RTN","BPSRPT0",45,0)
 ;See description for $$INSURSEL^BPSSCRCU
"RTN","BPSRPT0",46,0)
 S BPINS=$$INSURSEL^BPSSCRCU(.BPARR,DUZ) I BPINS<1 G EXIT
"RTN","BPSRPT0",47,0)
 S BPINSINF=$S(BPARR(1.11)="I":BPARR("INS"),1:0)
"RTN","BPSRPT0",48,0)
 ;
"RTN","BPSRPT0",49,0)
 ;Prompt to Display (C)MOP or (M)ail or (W)indow or (A)LL (Default to ALL)
"RTN","BPSRPT0",50,0)
 ;Returns (A-ALL,M-Mail,W-Window,C-CMOP)
"RTN","BPSRPT0",51,0)
 S BPMWC=$$SELMWC^BPSRPT3("A") I BPMWC="^" G EXIT
"RTN","BPSRPT0",52,0)
 ;
"RTN","BPSRPT0",53,0)
 ;Prompt to Display (R)ealTime Fills or (B)ackbills or (P)RO Option or (A)LL (Default to ALL)
"RTN","BPSRPT0",54,0)
 ;Returns (1-ALL,2-RealTime Fills,3-Backbills,4-PRO Option)
"RTN","BPSRPT0",55,0)
 S BPRTBCK=1
"RTN","BPSRPT0",56,0)
 I BPRTYPE'=9 S BPRTBCK=$$SELRTBCK^BPSRPT3(1) I BPRTBCK="^" G EXIT
"RTN","BPSRPT0",57,0)
 ;
"RTN","BPSRPT0",58,0)
 ;Prompt to Display Specific (D)rug or Drug (C)lass or (A)ll (Default to ALL)
"RTN","BPSRPT0",59,0)
 ;Returns (1-ALL,2-Drug,3-Drug Class)
"RTN","BPSRPT0",60,0)
 S BPQSTDRG=$$SELDRGAL^BPSRPT3(1) I BPQSTDRG="^" Q
"RTN","BPSRPT0",61,0)
 ;
"RTN","BPSRPT0",62,0)
 ;Prompt to Select Drug (No Default)
"RTN","BPSRPT0",63,0)
 S BPDRUG=0 I BPQSTDRG=2 S BPDRUG=$$SELDRG^BPSRPT3() I BPDRUG="^" G EXIT
"RTN","BPSRPT0",64,0)
 ;
"RTN","BPSRPT0",65,0)
 ;Prompt to Select Drug Class (No Default)
"RTN","BPSRPT0",66,0)
 S BPDRGCL=0 I BPQSTDRG=3 S BPDRGCL=$$SELDRGCL^BPSRPT3() I BPDRGCL="^" G EXIT
"RTN","BPSRPT0",67,0)
 ;
"RTN","BPSRPT0",68,0)
 ;Report Specific Prompts
"RTN","BPSRPT0",69,0)
 ;
"RTN","BPSRPT0",70,0)
 ;Prompt to select Date Range
"RTN","BPSRPT0",71,0)
 ;Returns (Start Date^End Date)
"RTN","BPSRPT0",72,0)
 I (",1,2,3,4,5,6,7,8,9,")[BPRTYPE S BPBEGDT=$$SELDATE^BPSRPT3(BPRTYPE) D  I BPBEGDT="^" G EXIT
"RTN","BPSRPT0",73,0)
 .I BPBEGDT="^" Q
"RTN","BPSRPT0",74,0)
 .S BPENDDT=$P(BPBEGDT,U,2)
"RTN","BPSRPT0",75,0)
 .S BPBEGDT=$P(BPBEGDT,U)
"RTN","BPSRPT0",76,0)
 ;
"RTN","BPSRPT0",77,0)
 ;Prompt to Include (R)ELEASED or (N)OT RELEASED or (A)LL (Default to RELEASED)
"RTN","BPSRPT0",78,0)
 ;Returns (1-ALL,2-RELEASED,3-NOT RELEASED)
"RTN","BPSRPT0",79,0)
 S BPRLNRL=$S(BPRTYPE=3:3,1:1) I (",1,2,4,6,7,8,9,")[BPRTYPE S BPRLNRL=$$SELRLNRL^BPSRPT4($S(BPRTYPE=9:1,1:2)) I BPRLNRL="^" G EXIT
"RTN","BPSRPT0",80,0)
 ;
"RTN","BPSRPT0",81,0)
 ;Prompt to Include (S)pecific Reject Code or (A)LL (Default to ALL)
"RTN","BPSRPT0",82,0)
 ;Returns (0-ALL,ptr-Pointer to Selected Reject Code in #9002313.93)
"RTN","BPSRPT0",83,0)
 S BPREJCD=0 I (",2,")[BPRTYPE S BPREJCD=$$SELREJCD^BPSRPT4(0) I BPREJCD="^" G EXIT
"RTN","BPSRPT0",84,0)
 ;
"RTN","BPSRPT0",85,0)
 ;Prompt to Include Auto(R)eversed or (A)LL (Default to ALL)
"RTN","BPSRPT0",86,0)
 ;Returns (0-All,1-AutoReversed)
"RTN","BPSRPT0",87,0)
 S BPAUTREV=0 I (",4,")[BPRTYPE S BPAUTREV=$$SELAUREV^BPSRPT4(0) I BPAUTREV="^" G EXIT
"RTN","BPSRPT0",88,0)
 ;
"RTN","BPSRPT0",89,0)
 ;Prompt to Include A(C)cepted or (R)ejected or (A)LL (Default to REJECTED)
"RTN","BPSRPT0",90,0)
 ;Returns (0-All,1-Rejected,2-Accepted)
"RTN","BPSRPT0",91,0)
 S BPACREJ=0 I (",4,")[BPRTYPE S BPACREJ=$$SELACREJ^BPSRPT4(1) I BPACREJ="^" G EXIT
"RTN","BPSRPT0",92,0)
 ;
"RTN","BPSRPT0",93,0)
 ;Prompt to Include (S)pecific Close Claim Reason or (A)ll (Default to All)
"RTN","BPSRPT0",94,0)
 ;Returns (0-All,ptr-Pointer to #356.8)
"RTN","BPSRPT0",95,0)
 S BPCCRSN=0 I (",7,")[BPRTYPE S BPCCRSN=$$SELCCRSN^BPSRPT4(0) I BPCCRSN="^" G EXIT
"RTN","BPSRPT0",96,0)
 ;
"RTN","BPSRPT0",97,0)
 ;Prompt for Eligibility Indicator for payable, rejected, reversed and closed claims report
"RTN","BPSRPT0",98,0)
 ;Returns (V=VETERAN,T=TRICARE,C=CHAMPVA,0=All)
"RTN","BPSRPT0",99,0)
 S BPELIG=0 I (",1,2,4,7,")[BPRTYPE S BPELIG=$$SELELIG^BPSRPT3(1) I BPELIG="^" G EXIT
"RTN","BPSRPT0",100,0)
 ;
"RTN","BPSRPT0",101,0)
 ;Prompt for Open/Closed/All claims
"RTN","BPSRPT0",102,0)
 ;Returns (1=Closed,2=Open,0=All)
"RTN","BPSRPT0",103,0)
 S BPOPCL=0 I (",2,")[BPRTYPE S BPOPCL=$$SELOPCL^BPSRPT3(2) I BPOPCL="^" G EXIT
"RTN","BPSRPT0",104,0)
 ;
"RTN","BPSRPT0",105,0)
 ;Prompt for All or Most Recent (Non-Billable Status Report only)
"RTN","BPSRPT0",106,0)
 ;Returns A - All, R - Most Recent
"RTN","BPSRPT0",107,0)
 S BPALRC=0 I (",9,")[BPRTYPE S BPALRC=$$SELALRC^BPSRPT3() I BPALRC="^" G EXIT
"RTN","BPSRPT0",108,0)
 ;
"RTN","BPSRPT0",109,0)
 ;Prompt for multiple Eligibility Indicator for Non-Billable Status Report
"RTN","BPSRPT0",110,0)
 ;Sets up BPELIG1 variable and array, BPELIG1=0 ALL or BPELIG1=1,BPELIG1(xx) for list
"RTN","BPSRPT0",111,0)
 S BPELIG1=0 I (",9,")[BPRTYPE S BPELIG1=$$SELELIG1^BPSRPT3() I BPELIG1="^" G EXIT
"RTN","BPSRPT0",112,0)
 ;
"RTN","BPSRPT0",113,0)
 ;Prompt for Non-Billable Status (Non-Billable Status Report only)
"RTN","BPSRPT0",114,0)
 ;Sets up BPNBSTS variable and array, BPNBSTS=0 ALL or BPNBSTS=1,BPNBSTS(xx) for list
"RTN","BPSRPT0",115,0)
 S BPNBSTS=0 I (",9,")[BPRTYPE S BPNBSTS=$$SELNBSTS^BPSRPT3() I BPNBSTS="^" G EXIT
"RTN","BPSRPT0",116,0)
 ;
"RTN","BPSRPT0",117,0)
 ;Prompt for Excel Capture (Detail Only)
"RTN","BPSRPT0",118,0)
 S BPEXCEL=0 I 'BPSUMDET S BPEXCEL=$$SELEXCEL^BPSRPT4() I BPEXCEL="^" G EXIT
"RTN","BPSRPT0",119,0)
 ;
"RTN","BPSRPT0",120,0)
 ;Prompt for the Device
"RTN","BPSRPT0",121,0)
 I 'BPEXCEL D
"RTN","BPSRPT0",122,0)
 .W !!,"WARNING - THIS REPORT REQUIRES THAT A DEVICE WITH 132 COLUMN WIDTH BE USED."
"RTN","BPSRPT0",123,0)
 .W !,"IT WILL NOT DISPLAY CORRECTLY USING 80 COLUMN WIDTH DEVICES",!
"RTN","BPSRPT0",124,0)
 S BPQ=0 D DEVICE(BPRPTNAM) Q:BPQ
"RTN","BPSRPT0",125,0)
 ;
"RTN","BPSRPT0",126,0)
 ;Compile and Run the Report
"RTN","BPSRPT0",127,0)
 D RUN(BPEXCEL,BPRPTNAM,BPSUMDET)
"RTN","BPSRPT0",128,0)
 I 'BPQ D PAUSE2^BPSRPT1
"RTN","BPSRPT0",129,0)
 ;
"RTN","BPSRPT0",130,0)
EXIT Q
"RTN","BPSRPT0",131,0)
 ;
"RTN","BPSRPT0",132,0)
 ;Compile and Run the Report
"RTN","BPSRPT0",133,0)
 ;
"RTN","BPSRPT0",134,0)
RUN(BPEXCEL,BPRPTNAM,BPSUMDET) N BPPAGE,BPTMP
"RTN","BPSRPT0",135,0)
 S BPTMP=$NA(^TMP($J,"BPSRPT"))
"RTN","BPSRPT0",136,0)
 K @BPTMP
"RTN","BPSRPT0",137,0)
 S BPPAGE=0
"RTN","BPSRPT0",138,0)
 W:BPSCR&'BPEXCEL !,"Please wait...",!
"RTN","BPSRPT0",139,0)
 ;
"RTN","BPSRPT0",140,0)
 ;Compile the report
"RTN","BPSRPT0",141,0)
 Q:$$COLLECT^BPSRPT1(BPTMP)=-1
"RTN","BPSRPT0",142,0)
 U IO
"RTN","BPSRPT0",143,0)
 ;
"RTN","BPSRPT0",144,0)
 ;Display the report
"RTN","BPSRPT0",145,0)
 D REPORT^BPSRPT5(BPTMP,BPEXCEL,BPSCR,BPRPTNAM,BPSUMDET,BPPAGE)
"RTN","BPSRPT0",146,0)
 I 'BPSCR W !,@IOF
"RTN","BPSRPT0",147,0)
 K @BPTMP
"RTN","BPSRPT0",148,0)
 I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","BPSRPT0",149,0)
 D ^%ZISC
"RTN","BPSRPT0",150,0)
 Q
"RTN","BPSRPT0",151,0)
 ;
"RTN","BPSRPT0",152,0)
 ;Prompt For the Device
"RTN","BPSRPT0",153,0)
 ;
"RTN","BPSRPT0",154,0)
 ; Returns Device variables and BPSCR
"RTN","BPSRPT0",155,0)
 ;
"RTN","BPSRPT0",156,0)
DEVICE(BPRPTNAM) N %ZIS,ZTSK,ZTRTN,ZTIO,ZTDESC,ZTSAVE,POP
"RTN","BPSRPT0",157,0)
 S %ZIS="QM"
"RTN","BPSRPT0",158,0)
 D ^%ZIS
"RTN","BPSRPT0",159,0)
 I POP S BPQ=1
"RTN","BPSRPT0",160,0)
 ;
"RTN","BPSRPT0",161,0)
 ;Check for exit
"RTN","BPSRPT0",162,0)
 I $G(BPQ) G XDEV
"RTN","BPSRPT0",163,0)
 ;
"RTN","BPSRPT0",164,0)
 S BPSCR=$S($E($G(IOST),1,2)="C-":1,1:0)
"RTN","BPSRPT0",165,0)
 I $D(IO("Q")) D  S BPQ=1
"RTN","BPSRPT0",166,0)
 . S ZTRTN="RUN^BPSRPT0(BPEXCEL,BPRPTNAM,BPSUMDET)"
"RTN","BPSRPT0",167,0)
 . S ZTIO=ION
"RTN","BPSRPT0",168,0)
 . S ZTSAVE("*")=""
"RTN","BPSRPT0",169,0)
 . S ZTDESC="BPS REPORT: "_BPRPTNAM
"RTN","BPSRPT0",170,0)
 . D ^%ZTLOAD
"RTN","BPSRPT0",171,0)
 . W !,$S($D(ZTSK):"REQUEST QUEUED TASK="_ZTSK,1:"REQUEST CANCELLED")
"RTN","BPSRPT0",172,0)
 . D HOME^%ZIS
"RTN","BPSRPT0",173,0)
 U IO
"RTN","BPSRPT0",174,0)
XDEV Q
"RTN","BPSRPT1")
0^2^B58952344
"RTN","BPSRPT1",1,0)
BPSRPT1 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,10,11,19**;JUN 2004;Build 18
"RTN","BPSRPT1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT1",4,0)
 ;
"RTN","BPSRPT1",5,0)
 ; Reference to COLLECT^IBNCPEV3 supported by ICR 6131
"RTN","BPSRPT1",6,0)
 ;
"RTN","BPSRPT1",7,0)
 Q
"RTN","BPSRPT1",8,0)
 ;
"RTN","BPSRPT1",9,0)
 ; ECME Report Compile Routine - Looping/Filtering Routine
"RTN","BPSRPT1",10,0)
 ;
"RTN","BPSRPT1",11,0)
 ;  Input Variables:
"RTN","BPSRPT1",12,0)
 ;               BPRTYPE - Type of Report (1-9)
"RTN","BPSRPT1",13,0)
 ;               BPGLTMP - Temporary storage global
"RTN","BPSRPT1",14,0)
 ;  BPPHARM/BPPHARM(ptr) - Set to 0 for all pharmacies, if set to 1 array
"RTN","BPSRPT1",15,0)
 ;                         of internal pointers of selected pharmacies
"RTN","BPSRPT1",16,0)
 ;              BPSUMDET - (1) Summary or (0) Detail format
"RTN","BPSRPT1",17,0)
 ;              BPINSINF - Set to 0 for all insurances or list of file 36 IENs
"RTN","BPSRPT1",18,0)
 ;                 BPMWC - A-ALL,M-Mail,W-Window,C-CMOP Prescriptions
"RTN","BPSRPT1",19,0)
 ;               BPRTBCK - 1-ALL,2-RealTime,3-Backbill Claim Submission,4-PRO Option
"RTN","BPSRPT1",20,0)
 ;               BPRLNRL - 1-ALL,2-RELEASED,3-NOT RELEASED
"RTN","BPSRPT1",21,0)
 ;                BPDRUG - DRUG to report on (ptr to #50)
"RTN","BPSRPT1",22,0)
 ;               BPDRGCL - DRUG CLASS to report on (0 for ALL)
"RTN","BPSRPT1",23,0)
 ;               BPBEGDT - Beginning Date
"RTN","BPSRPT1",24,0)
 ;               BPENDDT - Ending Date
"RTN","BPSRPT1",25,0)
 ;               BPCCRSN - Set to 0 for all closed claim reasons or ptr to #356.8
"RTN","BPSRPT1",26,0)
 ;              BPAUTREV - 0-ALL,1-Auto Reversed
"RTN","BPSRPT1",27,0)
 ;               BPACREJ - 0-ALL,1-REJECTED,2-ACCEPTED
"RTN","BPSRPT1",28,0)
 ;               BPNBSTS - Non-Billable Status
"RTN","BPSRPT1",29,0)
 ;    BPELIG1/BPELIG1(x) - Array of multiple eligibilities
"RTN","BPSRPT1",30,0)
 ;                BPALRC - A-All or R:Most recent
"RTN","BPSRPT1",31,0)
 ;              
"RTN","BPSRPT1",32,0)
COLLECT(BPGLTMP) N BP02,BP57,BP59,BPENDDT1,BPLDT02,BPLDT57,X,Y,OK,BPIX
"RTN","BPSRPT1",33,0)
 ;
"RTN","BPSRPT1",34,0)
 ;Check Variables
"RTN","BPSRPT1",35,0)
 S OK=1
"RTN","BPSRPT1",36,0)
 S:'$G(BPBEGDT) BPBEGDT=0
"RTN","BPSRPT1",37,0)
 S:'$G(BPENDDT) BPENDDT=9999999
"RTN","BPSRPT1",38,0)
 S BPENDDT=BPENDDT+0.9
"RTN","BPSRPT1",39,0)
 I $G(BPRTYPE)=""!($G(BPGLTMP)="")!($G(BPPHARM)="")!($G(BPSUMDET)="")!($G(BPINSINF)="")!($G(BPMWC)="")!($G(BPRTBCK)="") S OK=-1 G EXIT
"RTN","BPSRPT1",40,0)
 ;
"RTN","BPSRPT1",41,0)
 ; For the Non-Billable Status report, we need to loop through the IB NCPDP EVENT LOG instead 
"RTN","BPSRPT1",42,0)
 ;   of BPS Claim/BPS Transaction data
"RTN","BPSRPT1",43,0)
 I BPRTYPE=9 Q $$COLLECT^IBNCPEV3(BPBEGDT,BPENDDT,BPMWC,BPRLNRL,BPDRUG,BPDRGCL,BPALRC,.BPPHARM,.BPINSINF,.BPNBSTS,.BPELIG1,BPGLTMP)
"RTN","BPSRPT1",44,0)
 ;
"RTN","BPSRPT1",45,0)
 ;Loop through BPS CLAIMS
"RTN","BPSRPT1",46,0)
 ;
"RTN","BPSRPT1",47,0)
 ;First look for fill/refill cross reference
"RTN","BPSRPT1",48,0)
 ;Loop through Date of Service Index in BPS CLAIMS file and find link to 
"RTN","BPSRPT1",49,0)
 ;claim in BPS TRANSACTION.  Process earliest Date of Service entry found in
"RTN","BPSRPT1",50,0)
 ;BPS TRANSACTION
"RTN","BPSRPT1",51,0)
 ;
"RTN","BPSRPT1",52,0)
 ;Choose Index to Loop through (different for Closed Claims)
"RTN","BPSRPT1",53,0)
 S BPIX="AF" S:BPRTYPE=7 BPIX="AG"
"RTN","BPSRPT1",54,0)
 ;
"RTN","BPSRPT1",55,0)
 S BPLDT02=$S(BPIX="AF":$$FM2YMD(BPBEGDT-0.00001),1:BPBEGDT) S:BPLDT02="" BPLDT02=0
"RTN","BPSRPT1",56,0)
 S BPENDDT1=$S(BPIX="AF":$$FM2YMD(BPENDDT),1:BPENDDT_".9999999999") S:BPENDDT1="" BPENDDT1=99999999
"RTN","BPSRPT1",57,0)
 F  S BPLDT02=+$O(^BPSC(BPIX,BPLDT02)) Q:BPLDT02=0!(BPLDT02>BPENDDT1)  D
"RTN","BPSRPT1",58,0)
 . S BP02=0 F  S BP02=$O(^BPSC(BPIX,BPLDT02,BP02)) Q:+BP02=0  D
"RTN","BPSRPT1",59,0)
 . . S BP59=+$O(^BPST("AE",BP02,0))
"RTN","BPSRPT1",60,0)
 . . Q:BP59=0
"RTN","BPSRPT1",61,0)
 . . I $D(@BPGLTMP@("FILE59",BP59)) Q
"RTN","BPSRPT1",62,0)
 . . S @BPGLTMP@("FILE59",BP59)=BPLDT02_"^02"
"RTN","BPSRPT1",63,0)
 . . D PROCESS(BP59)
"RTN","BPSRPT1",64,0)
 ;
"RTN","BPSRPT1",65,0)
 ;#9002313.59 has only one entry per claim with, which has a date 
"RTN","BPSRPT1",66,0)
 ;  of the latest update for the claim
"RTN","BPSRPT1",67,0)
 ;#9002313.57 has more than one entries per claim and keep all 
"RTN","BPSRPT1",68,0)
 ;  changes made the claim
"RTN","BPSRPT1",69,0)
 ;so we have to go thru #9002313.57 to find the earliest date 
"RTN","BPSRPT1",70,0)
 ;related to the claim to check it against BPBEGDT
"RTN","BPSRPT1",71,0)
 S BPLDT57=BPBEGDT-0.00001
"RTN","BPSRPT1",72,0)
 F  S BPLDT57=+$O(^BPSTL("AH",BPLDT57)) Q:BPLDT57=0!(BPLDT57>BPENDDT)  D
"RTN","BPSRPT1",73,0)
 . S BP57=0 F  S BP57=$O(^BPSTL("AH",BPLDT57,BP57)) Q:+BP57=0  D
"RTN","BPSRPT1",74,0)
 . . S BP59=+$G(^BPSTL(BP57,0))
"RTN","BPSRPT1",75,0)
 . . I $D(@BPGLTMP@("FILE59",BP59)) Q
"RTN","BPSRPT1",76,0)
 . . S @BPGLTMP@("FILE59",BP59)=BPLDT57_"^57"
"RTN","BPSRPT1",77,0)
 . . D PROCESS(BP59)
"RTN","BPSRPT1",78,0)
 ;
"RTN","BPSRPT1",79,0)
 ;Remove Portion of Scratch Global
"RTN","BPSRPT1",80,0)
EXIT K @BPGLTMP@("FILE59")
"RTN","BPSRPT1",81,0)
 Q OK
"RTN","BPSRPT1",82,0)
 ;
"RTN","BPSRPT1",83,0)
 ;Convert FB date to YYYYMMDD
"RTN","BPSRPT1",84,0)
FM2YMD(BPFMDT) N Y,Y1
"RTN","BPSRPT1",85,0)
 S Y=$E(BPFMDT,2,3),Y1=$E(BPFMDT,1,1) S Y=$S(Y1=3:"20"_Y,Y1=2:"19"_Y,1:"")
"RTN","BPSRPT1",86,0)
 Q:Y Y_$E(BPFMDT,4,7)
"RTN","BPSRPT1",87,0)
 Q ""
"RTN","BPSRPT1",88,0)
 ;
"RTN","BPSRPT1",89,0)
 ;Process each Entry
"RTN","BPSRPT1",90,0)
 ;
"RTN","BPSRPT1",91,0)
PROCESS(BP59) ;
"RTN","BPSRPT1",92,0)
 N BPBCK,BPDFN,BPREF,BPPAYBL,BPPLAN,BPREJ,BPRLSDT,BPRX,BPRXDRG,BPSTATUS,BPSEQ
"RTN","BPSRPT1",93,0)
 ;
"RTN","BPSRPT1",94,0)
 S BPSEQ=$$COB59^BPSUTIL2(BP59)
"RTN","BPSRPT1",95,0)
 ;
"RTN","BPSRPT1",96,0)
 ;Get ABSBRXI - ptr to #52
"RTN","BPSRPT1",97,0)
 S BPRX=+$P($G(^BPST(BP59,1)),U,11)
"RTN","BPSRPT1",98,0)
 ;
"RTN","BPSRPT1",99,0)
 ;Get ABSBRXR - Prescription Number IEN
"RTN","BPSRPT1",100,0)
 S BPREF=+$P($G(^BPST(BP59,1)),U)
"RTN","BPSRPT1",101,0)
 ;
"RTN","BPSRPT1",102,0)
 ;Get PATIENT - ptr to #2
"RTN","BPSRPT1",103,0)
 S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSRPT1",104,0)
 ; 
"RTN","BPSRPT1",105,0)
 ; Skip eligibility verification transactions
"RTN","BPSRPT1",106,0)
 I $P($G(^BPST(BP59,0)),U,15)="E" G XPROC
"RTN","BPSRPT1",107,0)
 ;
"RTN","BPSRPT1",108,0)
 ;Check for correct BPS Pharmacy (DIVISION)
"RTN","BPSRPT1",109,0)
 I $G(BPPHARM)=1,$$CHKPHRM(BP59)=0 G XPROC
"RTN","BPSRPT1",110,0)
 ;
"RTN","BPSRPT1",111,0)
 ;Check for Display 1-ALL,2-RELEASED,3-NOT RELEASED
"RTN","BPSRPT1",112,0)
 S BPRLSDT=$$RELEASED(BPRX,BPREF)
"RTN","BPSRPT1",113,0)
 I BPRLNRL'=1 I ((BPRLNRL=2)&(BPRLSDT=0))!((BPRLNRL=3)&(BPRLSDT)) G XPROC
"RTN","BPSRPT1",114,0)
 ;
"RTN","BPSRPT1",115,0)
 ;Get Status
"RTN","BPSRPT1",116,0)
 S BPSTATUS=$$STATUS^BPSRPT6(BPRX,BPREF,BPSEQ)
"RTN","BPSRPT1",117,0)
 ;
"RTN","BPSRPT1",118,0)
 ;if REVERSAL
"RTN","BPSRPT1",119,0)
 I BPRTYPE=4,BPSTATUS'["REVERSAL" G XPROC  ; exclude non-reversed
"RTN","BPSRPT1",120,0)
 I BPRTYPE=4,$$CLOSED02^BPSSCR03($P(^BPST(BP59,0),U,4))=1 G XPROC  ; exclude closed claims for Reversal Report
"RTN","BPSRPT1",121,0)
 ;
"RTN","BPSRPT1",122,0)
 ;if PAYABLE
"RTN","BPSRPT1",123,0)
 S BPPAYBL=BPSTATUS["PAYABLE"
"RTN","BPSRPT1",124,0)
 I BPRTYPE=1,'BPPAYBL G XPROC  ; exclude non-payable
"RTN","BPSRPT1",125,0)
 I BPRTYPE=1,BPSTATUS["REVERSAL" G XPROC  ; reversed
"RTN","BPSRPT1",126,0)
 ;
"RTN","BPSRPT1",127,0)
 ;if REJECTED
"RTN","BPSRPT1",128,0)
 S BPREJ=BPSTATUS["REJECTED"
"RTN","BPSRPT1",129,0)
 I BPRTYPE=2,BPSTATUS["REVERSAL" G XPROC ; exclude rejected reversals
"RTN","BPSRPT1",130,0)
 I BPRTYPE=2,'BPREJ G XPROC  ; exclude non-rejected
"RTN","BPSRPT1",131,0)
 ;
"RTN","BPSRPT1",132,0)
 ;if SUBMITTED NOT RELEASED exclude released ones
"RTN","BPSRPT1",133,0)
 I BPRTYPE=3,BPRLSDT'=0 G XPROC
"RTN","BPSRPT1",134,0)
 I BPRTYPE=3,'BPPAYBL G XPROC  ; exclude non-payable
"RTN","BPSRPT1",135,0)
 ;
"RTN","BPSRPT1",136,0)
 ;Auto Reverse Check
"RTN","BPSRPT1",137,0)
 I BPRTYPE=4,BPAUTREV,'$$AUTOREV(BP59) G XPROC
"RTN","BPSRPT1",138,0)
 ;
"RTN","BPSRPT1",139,0)
 ;if CLOSED
"RTN","BPSRPT1",140,0)
 I BPRTYPE=7,'$$CLSCLM(BP59) G XPROC  ;exclude open claims
"RTN","BPSRPT1",141,0)
 ;I BPRTYPE=7,BPSTATUS'["REJECTED" G XPROC  ;exclude non-rejected closed claims
"RTN","BPSRPT1",142,0)
 ;
"RTN","BPSRPT1",143,0)
 ;if Spending Account Report, check Pricing Segment for data
"RTN","BPSRPT1",144,0)
 I BPRTYPE=8,'$$PRICING^BPSRPT5(BP59) G XPROC
"RTN","BPSRPT1",145,0)
 ;
"RTN","BPSRPT1",146,0)
 ;if Recent Transactions, exclude closed claims
"RTN","BPSRPT1",147,0)
 I BPRTYPE=5,$$CLSCLM(BP59) G XPROC
"RTN","BPSRPT1",148,0)
 ;
"RTN","BPSRPT1",149,0)
 ;If Totals by Date, include only rejects and payables
"RTN","BPSRPT1",150,0)
 I BPRTYPE=6,BPSTATUS'["REJECTED",BPSTATUS'["PAYABLE" G XPROC  ; Reversed
"RTN","BPSRPT1",151,0)
 ;
"RTN","BPSRPT1",152,0)
 ;Realtime/Backbill Check
"RTN","BPSRPT1",153,0)
 S BPBCK=$$RTBCK(BP59)
"RTN","BPSRPT1",154,0)
 I BPRTBCK'=1 I ((BPRTBCK=2)&(BPBCK'=0))!((BPRTBCK=3)&(BPBCK'=1))!((BPRTBCK=4)&(BPBCK'=2)) G XPROC
"RTN","BPSRPT1",155,0)
 ;
"RTN","BPSRPT1",156,0)
 ;Check for MAIL/WINDOW/CMOP/ALL
"RTN","BPSRPT1",157,0)
 I BPMWC'="A",$$MWC^BPSRPT6(BPRX,BPREF)'=BPMWC G XPROC
"RTN","BPSRPT1",158,0)
 ;
"RTN","BPSRPT1",159,0)
 ;Check for selected insurance
"RTN","BPSRPT1",160,0)
 S BPPLAN=$$INSNAM^BPSRPT6(BP59)
"RTN","BPSRPT1",161,0)
 I BPINSINF'=0,'$$CHKINS^BPSSCRCU($P(BPPLAN,U,1),BPINSINF) G XPROC
"RTN","BPSRPT1",162,0)
 S BPPLAN=$P(BPPLAN,U,2)
"RTN","BPSRPT1",163,0)
 ;
"RTN","BPSRPT1",164,0)
 ;Check for selected drug
"RTN","BPSRPT1",165,0)
 S BPRXDRG=$$GETDRUG^BPSRPT6(BPRX)
"RTN","BPSRPT1",166,0)
 I BPRXDRG=0 G XPROC
"RTN","BPSRPT1",167,0)
 I BPDRUG,BPDRUG'=BPRXDRG G XPROC
"RTN","BPSRPT1",168,0)
 ;
"RTN","BPSRPT1",169,0)
 ;Check for selected drug classes
"RTN","BPSRPT1",170,0)
 I BPDRGCL'=0,BPDRGCL'=$$DRGCLNAM^BPSRPT6($$GETDRGCL^BPSRPT6(BPRXDRG),99) G XPROC
"RTN","BPSRPT1",171,0)
 ;
"RTN","BPSRPT1",172,0)
 ;Check for selected Close Reason
"RTN","BPSRPT1",173,0)
 I BPCCRSN,BPCCRSN'=$P($$CLRSN^BPSRPT7(BP59),U) G XPROC
"RTN","BPSRPT1",174,0)
 ;
"RTN","BPSRPT1",175,0)
 ;Check for Accepted/Rejected
"RTN","BPSRPT1",176,0)
 I BPACREJ=1,BPSTATUS'["REJECTED" G XPROC
"RTN","BPSRPT1",177,0)
 I BPACREJ=2,BPSTATUS'["ACCEPTED" G XPROC
"RTN","BPSRPT1",178,0)
 ;
"RTN","BPSRPT1",179,0)
 ;Check for Specific Reject Code
"RTN","BPSRPT1",180,0)
 I BPREJCD'=0,'$$CKREJ(BP59,BPREJCD) G XPROC
"RTN","BPSRPT1",181,0)
 ;
"RTN","BPSRPT1",182,0)
 ;Check for Eligibility Code
"RTN","BPSRPT1",183,0)
 I BPELIG'=0,BPELIG'=$$ELIGCODE^BPSSCR05(BP59) G XPROC
"RTN","BPSRPT1",184,0)
 ;
"RTN","BPSRPT1",185,0)
 ;Check Open/Closed claim
"RTN","BPSRPT1",186,0)
 I BPOPCL'=0,((BPOPCL=2)&($$CLOSED02^BPSSCR03($P(^BPST(BP59,0),U,4))=1))!((BPOPCL=1)&($$CLOSED02^BPSSCR03($P(^BPST(BP59,0),U,4))'=1)) G XPROC
"RTN","BPSRPT1",187,0)
 ;
"RTN","BPSRPT1",188,0)
 ;Save Entry for Report
"RTN","BPSRPT1",189,0)
 D SETTMP^BPSRPT2(BPGLTMP,BPDFN,BPRX,BPREF,BP59,BPBEGDT,BPENDDT,.BPPHARM,BPSUMDET,BPPLAN,BPRLSDT,BPPAYBL,BPREJ,BPRXDRG,$P(BPSTATUS,U))
"RTN","BPSRPT1",190,0)
 ;
"RTN","BPSRPT1",191,0)
XPROC Q
"RTN","BPSRPT1",192,0)
 ;
"RTN","BPSRPT1",193,0)
 ;Check if selected BPS PHARMACY
"RTN","BPSRPT1",194,0)
 ;
"RTN","BPSRPT1",195,0)
 ; Defined Variable: BPPHARM(ptr) - List of BPS Pharmacies to Report on
"RTN","BPSRPT1",196,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",197,0)
 ; 
"RTN","BPSRPT1",198,0)
 ; Returned Value -> 0 = Entry not in list of selected pharmacies
"RTN","BPSRPT1",199,0)
 ;                   1 = Entry is in list of selected pharmacies
"RTN","BPSRPT1",200,0)
CHKPHRM(BP59) N PHARM
"RTN","BPSRPT1",201,0)
 S PHARM=+$P($G(^BPST(BP59,1)),"^",7)
"RTN","BPSRPT1",202,0)
 S PHARM=$S($D(BPPHARM(PHARM)):1,1:0)
"RTN","BPSRPT1",203,0)
 Q PHARM
"RTN","BPSRPT1",204,0)
 ;
"RTN","BPSRPT1",205,0)
 ;Determine whether claim is Released or Not Released
"RTN","BPSRPT1",206,0)
 ;
"RTN","BPSRPT1",207,0)
 ; Input Variables: BPRX - ptr to PRESCRIPTION (#52)
"RTN","BPSRPT1",208,0)
 ;                 BPREF - refill # (0-No Refills,1-1st Refill, 2-2nd, ...) 
"RTN","BPSRPT1",209,0)
 ;
"RTN","BPSRPT1",210,0)
 ; Return Value ->             0 = Not Released
"RTN","BPSRPT1",211,0)
 ;                 released date = Released
"RTN","BPSRPT1",212,0)
 ;                 
"RTN","BPSRPT1",213,0)
RELEASED(BPRX,BPREF) N RDT
"RTN","BPSRPT1",214,0)
 ;
"RTN","BPSRPT1",215,0)
 I BPREF=0 S RDT=$$RXRELDT^BPSRPT6(BPRX)\1
"RTN","BPSRPT1",216,0)
 I BPREF'=0 S RDT=$$REFRELDT^BPSRPT6(BPRX,BPREF)\1
"RTN","BPSRPT1",217,0)
 Q RDT
"RTN","BPSRPT1",218,0)
 ;
"RTN","BPSRPT1",219,0)
 ;Determine if claim was Auto Reversed
"RTN","BPSRPT1",220,0)
 ;
"RTN","BPSRPT1",221,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",222,0)
 ; Return Value -> 1 = Auto Reversed
"RTN","BPSRPT1",223,0)
 ;                 0 = Not Auto Reversed
"RTN","BPSRPT1",224,0)
 ;
"RTN","BPSRPT1",225,0)
AUTOREV(BP59) N AR,BP02
"RTN","BPSRPT1",226,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT1",227,0)
 S AR=+$P($G(^BPSC(BP02,0)),U,7)
"RTN","BPSRPT1",228,0)
 Q AR
"RTN","BPSRPT1",229,0)
 ;
"RTN","BPSRPT1",230,0)
 ;Determine if claim was closed
"RTN","BPSRPT1",231,0)
 ;
"RTN","BPSRPT1",232,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",233,0)
 ; Return Value -> 1 = Closed
"RTN","BPSRPT1",234,0)
 ;                 0 = Not Closed
"RTN","BPSRPT1",235,0)
 ;                 
"RTN","BPSRPT1",236,0)
CLSCLM(BP59) N BP02,CL
"RTN","BPSRPT1",237,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT1",238,0)
 S CL=+$G(^BPSC(BP02,900))
"RTN","BPSRPT1",239,0)
 Q CL
"RTN","BPSRPT1",240,0)
 ;
"RTN","BPSRPT1",241,0)
 ;Determine whether claim is Realtime or Backbilled
"RTN","BPSRPT1",242,0)
 ;
"RTN","BPSRPT1",243,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",244,0)
 ; Return Value -> 2 = PRO Option
"RTN","BPSRPT1",245,0)
 ;                 1 = Backbilled
"RTN","BPSRPT1",246,0)
 ;                 0 = Realtime
"RTN","BPSRPT1",247,0)
RTBCK(BP59) N BB
"RTN","BPSRPT1",248,0)
 S BB=$P($G(^BPST(BP59,12)),U)
"RTN","BPSRPT1",249,0)
 S BB=$S(BB="BB":1,BB="P2":2,BB="P2S":2,1:0)
"RTN","BPSRPT1",250,0)
 Q BB
"RTN","BPSRPT1",251,0)
 ;
"RTN","BPSRPT1",252,0)
 ;Screen Pause 1
"RTN","BPSRPT1",253,0)
 ;
"RTN","BPSRPT1",254,0)
 ; Return variable - BPQ = 0 Continue
"RTN","BPSRPT1",255,0)
 ;                          2 Quit
"RTN","BPSRPT1",256,0)
PAUSE N X
"RTN","BPSRPT1",257,0)
 U IO(0) W !!,"Press RETURN to continue, '^' to exit:"
"RTN","BPSRPT1",258,0)
 R X:$G(DTIME) S:'$T X="^" S:X["^" BPQ=2
"RTN","BPSRPT1",259,0)
 U IO
"RTN","BPSRPT1",260,0)
 Q
"RTN","BPSRPT1",261,0)
 ;
"RTN","BPSRPT1",262,0)
 ;Screen Pause 2
"RTN","BPSRPT1",263,0)
 ;
"RTN","BPSRPT1",264,0)
 ; Return variable - BPQ = 0 Continue
"RTN","BPSRPT1",265,0)
 ;                         2 Quit
"RTN","BPSRPT1",266,0)
PAUSE2 N X
"RTN","BPSRPT1",267,0)
 U IO(0) W !!,"Press RETURN to continue:"
"RTN","BPSRPT1",268,0)
 R X:$G(DTIME) S:'$T X="^" S:X["^" BPQ=2
"RTN","BPSRPT1",269,0)
 U IO
"RTN","BPSRPT1",270,0)
 Q
"RTN","BPSRPT1",271,0)
 ;
"RTN","BPSRPT1",272,0)
 ;Get ECME#
"RTN","BPSRPT1",273,0)
 ;
"RTN","BPSRPT1",274,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSRPT1",275,0)
 ;output :
"RTN","BPSRPT1",276,0)
 ;ECME number from 9002313.02
"RTN","BPSRPT1",277,0)
 ; 7 or 12 digits of the prescription IEN file 52
"RTN","BPSRPT1",278,0)
 ; or 12 spaces
"RTN","BPSRPT1",279,0)
ECMENUM(BP59) ;*/
"RTN","BPSRPT1",280,0)
 Q $$ECMENUM^BPSSCRU2(BP59)
"RTN","BPSRPT1",281,0)
 ;
"RTN","BPSRPT1",282,0)
 ;Convert FM date or date.time to displayable (mm/dd/yy HH:MM) format
"RTN","BPSRPT1",283,0)
 ;
"RTN","BPSRPT1",284,0)
DATTIM(X) N DATE,BPT,BPM,BPH,BPAP
"RTN","BPSRPT1",285,0)
 S DATE=$S(X:$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3),1:"")
"RTN","BPSRPT1",286,0)
 S BPT=$P(X,".",2) S:$L(BPT)<4 BPT=BPT_$E("0000",1,4-$L(BPT))
"RTN","BPSRPT1",287,0)
 S BPH=$E(BPT,1,2),BPM=$E(BPT,3,4)
"RTN","BPSRPT1",288,0)
 S BPAP="AM" I BPH>12 S BPH=BPH-12,BPAP="PM" S:$L(BPH)<2 BPH="0"_BPH
"RTN","BPSRPT1",289,0)
 I BPT S:'BPH BPH=12 S DATE=DATE_" "_BPH_":"_BPM_BPAP
"RTN","BPSRPT1",290,0)
 Q $G(DATE)
"RTN","BPSRPT1",291,0)
 ;
"RTN","BPSRPT1",292,0)
 ;Display RT-Realtime,BB-Backbill,P2-PRO Option or " "
"RTN","BPSRPT1",293,0)
 ;
"RTN","BPSRPT1",294,0)
RTBCKNAM(BPINDEX) Q $S(BPINDEX=0:"RT",BPINDEX=1:"BB",BPINDEX=2:"P2",1:" ")
"RTN","BPSRPT1",295,0)
 ;
"RTN","BPSRPT1",296,0)
 ;See for Specific Reject Code
"RTN","BPSRPT1",297,0)
 ;
"RTN","BPSRPT1",298,0)
CKREJ(BP59,BPREJCD) N FREJ,I,REJ,X
"RTN","BPSRPT1",299,0)
 S FREJ=0
"RTN","BPSRPT1",300,0)
 S X=$$REJTEXT^BPSRPT2(BP59,.REJ)
"RTN","BPSRPT1",301,0)
 S X="" F  S X=$O(REJ(X)) Q:X=""  D  Q:FREJ=1
"RTN","BPSRPT1",302,0)
 .S REJ=$P($G(REJ(X)),":") Q:REJ=""
"RTN","BPSRPT1",303,0)
 .S I="" F  S I=$O(^BPSF(9002313.93,"B",REJ,I)) Q:I=""  I I=BPREJCD S FREJ=1
"RTN","BPSRPT1",304,0)
 Q FREJ
"RTN","BPSRPT3")
0^4^B122921088
"RTN","BPSRPT3",1,0)
BPSRPT3 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,11,14,19**;JUN 2004;Build 18
"RTN","BPSRPT3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT3",4,0)
 ;
"RTN","BPSRPT3",5,0)
 ;Reference to IB NCPCP NON-BILLABLE STATUS REASONS (#366.17) supported by ICR 6136
"RTN","BPSRPT3",6,0)
 ;
"RTN","BPSRPT3",7,0)
 Q
"RTN","BPSRPT3",8,0)
 ;
"RTN","BPSRPT3",9,0)
 ; Select the ECME Pharmacy or Pharmacies
"RTN","BPSRPT3",10,0)
 ; 
"RTN","BPSRPT3",11,0)
 ; Input Variable -> none
"RTN","BPSRPT3",12,0)
 ; Return Value ->   "" = Valid Entry or Entries Selected
"RTN","BPSRPT3",13,0)
 ;                                        ^ = Exit
"RTN","BPSRPT3",14,0)
 ;                                       
"RTN","BPSRPT3",15,0)
 ; Output Variable -> BPPHARM = 1 One or More Pharmacies Selected
"RTN","BPSRPT3",16,0)
 ;                          = 0 User Entered 'ALL'
"RTN","BPSRPT3",17,0)
 ;                            
"RTN","BPSRPT3",18,0)
 ; If BPPHARM = 1 then the BPPHARM array will be defined where:
"RTN","BPSRPT3",19,0)
 ;    BPPHARM(ptr) = ptr ^ BPS PHARMACY NAME and
"RTN","BPSRPT3",20,0)
 ;    ptr = Internal Pointer to BPS PHARMACIES file (#9002313.56)
"RTN","BPSRPT3",21,0)
 ;                    
"RTN","BPSRPT3",22,0)
SELPHARM() N DIC,DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",23,0)
 ;
"RTN","BPSRPT3",24,0)
 ;Reset BPPHARM array
"RTN","BPSRPT3",25,0)
 K BPPHARM
"RTN","BPSRPT3",26,0)
 ;
"RTN","BPSRPT3",27,0)
 ;First see if they want to enter individual divisions or ALL
"RTN","BPSRPT3",28,0)
 S DIR(0)="S^D:DIVISION;A:ALL"
"RTN","BPSRPT3",29,0)
 S DIR("A")="Select Certain Pharmacy (D)ivisions or (A)LL"
"RTN","BPSRPT3",30,0)
 S DIR("L",1)="Select one of the following:"
"RTN","BPSRPT3",31,0)
 S DIR("L",2)=""
"RTN","BPSRPT3",32,0)
 S DIR("L",3)="     D         DIVISION"
"RTN","BPSRPT3",33,0)
 S DIR("L",4)="     A         ALL"
"RTN","BPSRPT3",34,0)
 D ^DIR K DIR
"RTN","BPSRPT3",35,0)
 ;
"RTN","BPSRPT3",36,0)
 ;Check for "^" or timeout, otherwise define BPPHARM
"RTN","BPSRPT3",37,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",38,0)
 E  S BPPHARM=$S(Y="A":0,1:1)
"RTN","BPSRPT3",39,0)
 ;
"RTN","BPSRPT3",40,0)
 ;If division selected, ask prompt
"RTN","BPSRPT3",41,0)
 I $G(BPPHARM)=1 F  D  Q:Y="^"!(Y="") 
"RTN","BPSRPT3",42,0)
 .;
"RTN","BPSRPT3",43,0)
 .;Prompt for entry
"RTN","BPSRPT3",44,0)
 .K X S DIC(0)="QEAM",DIC=9002313.56,DIC("A")="Select ECME Pharmacy Division(s): "
"RTN","BPSRPT3",45,0)
 .W ! D ^DIC
"RTN","BPSRPT3",46,0)
 .;
"RTN","BPSRPT3",47,0)
 .;Check for "^" or timeout 
"RTN","BPSRPT3",48,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1) K BPPHARM S Y="^" Q
"RTN","BPSRPT3",49,0)
 .;
"RTN","BPSRPT3",50,0)
 .;Check for blank entry, quit if no previous selections
"RTN","BPSRPT3",51,0)
 .I $G(X)="" S Y=$S($D(BPPHARM)>9:"",1:"^") K:Y="^" BPPHARM Q
"RTN","BPSRPT3",52,0)
 .;
"RTN","BPSRPT3",53,0)
 .;Handle Deletes
"RTN","BPSRPT3",54,0)
 .I $D(BPPHARM(+Y)) D  Q:Y="^"  I 1
"RTN","BPSRPT3",55,0)
 ..N P
"RTN","BPSRPT3",56,0)
 ..S P=Y  ;Save Original Value
"RTN","BPSRPT3",57,0)
 ..S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_$P(P,U,2)_" from your list?"
"RTN","BPSRPT3",58,0)
 ..S DIR("B")="NO" D ^DIR
"RTN","BPSRPT3",59,0)
 ..I ($G(DUOUT)=1)!($G(DTOUT)=1) K BPPHARM S Y="^" Q
"RTN","BPSRPT3",60,0)
 ..I Y="Y" K BPPHARM(+P),BPPHARM("B",$P(P,U,2),+P)
"RTN","BPSRPT3",61,0)
 ..S Y=P  ;Restore Original Value
"RTN","BPSRPT3",62,0)
 ..K P
"RTN","BPSRPT3",63,0)
 .E  D
"RTN","BPSRPT3",64,0)
 ..;Define new entries in BPPHARM array
"RTN","BPSRPT3",65,0)
 ..S BPPHARM(+Y)=Y
"RTN","BPSRPT3",66,0)
 ..S BPPHARM("B",$P(Y,U,2),+Y)=""
"RTN","BPSRPT3",67,0)
 .;
"RTN","BPSRPT3",68,0)
 .;Display a list of selected divisions
"RTN","BPSRPT3",69,0)
 .I $D(BPPHARM)>9 D
"RTN","BPSRPT3",70,0)
 ..N X
"RTN","BPSRPT3",71,0)
 ..W !,?2,"Selected:"
"RTN","BPSRPT3",72,0)
 ..S X="" F  S X=$O(BPPHARM("B",X)) Q:X=""  W !,?10,X
"RTN","BPSRPT3",73,0)
 ..K X
"RTN","BPSRPT3",74,0)
 .Q
"RTN","BPSRPT3",75,0)
 ;
"RTN","BPSRPT3",76,0)
 K BPPHARM("B")
"RTN","BPSRPT3",77,0)
 Q Y
"RTN","BPSRPT3",78,0)
 ;
"RTN","BPSRPT3",79,0)
 ; Select to Include Eligibility of (V)ETERAN, (T)RICARE, (C)HAMPVA or (A)ll
"RTN","BPSRPT3",80,0)
 ; 
"RTN","BPSRPT3",81,0)
 ; Input Variable -> DFLT = 0 = All
"RTN","BPSRPT3",82,0)
 ;                          1 = VETERAN
"RTN","BPSRPT3",83,0)
 ;                          2 = TRICARE
"RTN","BPSRPT3",84,0)
 ;                          3 = CHAMPVA
"RTN","BPSRPT3",85,0)
 ; 
"RTN","BPSRPT3",86,0)
 ; Return Value ->  V, T, C or 0 for All
"RTN","BPSRPT3",87,0)
 ;
"RTN","BPSRPT3",88,0)
SELELIG(DFLT) N DIC,DIR,DIRUT,DUOUT,DTOUT,DIROUT,X,Y
"RTN","BPSRPT3",89,0)
 S DFLT=$S($G(DFLT)=1:"V",$G(DFLT)=2:"T",$G(DFLT)=3:"C",1:"A")
"RTN","BPSRPT3",90,0)
 S DIR(0)="S^V:VETERAN;T:TRICARE;C:CHAMPVA;A:ALL"
"RTN","BPSRPT3",91,0)
 S DIR("A")="Include Certain Eligibility Type or (A)ll",DIR("B")=DFLT
"RTN","BPSRPT3",92,0)
 D ^DIR
"RTN","BPSRPT3",93,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",94,0)
 S Y=$S(Y="A":0,1:Y)
"RTN","BPSRPT3",95,0)
 Q Y
"RTN","BPSRPT3",96,0)
 ;
"RTN","BPSRPT3",97,0)
 ; Display (S)ummary or (D)etail Format
"RTN","BPSRPT3",98,0)
 ;
"RTN","BPSRPT3",99,0)
 ; Input Variable -> DFLT = 1 Summary
"RTN","BPSRPT3",100,0)
 ;                          2 Detail
"RTN","BPSRPT3",101,0)
 ;
"RTN","BPSRPT3",102,0)
 ; Return Value ->   1 = Summary
"RTN","BPSRPT3",103,0)
 ;                   0 = Detail
"RTN","BPSRPT3",104,0)
 ;                   ^ = Exit
"RTN","BPSRPT3",105,0)
 ;
"RTN","BPSRPT3",106,0)
SELSMDET(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",107,0)
 S DFLT=$S($G(DFLT)=1:"Summary",$G(DFLT)=0:"Detail",1:"Detail")
"RTN","BPSRPT3",108,0)
 S DIR(0)="S^S:Summary;D:Detail",DIR("A")="Display (S)ummary or (D)etail Format",DIR("B")=DFLT
"RTN","BPSRPT3",109,0)
 D ^DIR
"RTN","BPSRPT3",110,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",111,0)
 S Y=$S(Y="S":1,Y="D":0,1:Y)
"RTN","BPSRPT3",112,0)
 Q Y
"RTN","BPSRPT3",113,0)
 ;
"RTN","BPSRPT3",114,0)
 ; Display (C)MOP or (M)ail or (W)indow or (A)ll
"RTN","BPSRPT3",115,0)
 ; 
"RTN","BPSRPT3",116,0)
 ;    Input Variable -> DFLT = C CMOP
"RTN","BPSRPT3",117,0)
 ;                             W Window
"RTN","BPSRPT3",118,0)
 ;                             M Mail
"RTN","BPSRPT3",119,0)
 ;                             A All
"RTN","BPSRPT3",120,0)
 ;                          
"RTN","BPSRPT3",121,0)
 ;    Return Value ->   C = CMOP
"RTN","BPSRPT3",122,0)
 ;                      W = Window
"RTN","BPSRPT3",123,0)
 ;                      M = Mail
"RTN","BPSRPT3",124,0)
 ;                      A = All
"RTN","BPSRPT3",125,0)
 ;                      ^ = Exit
"RTN","BPSRPT3",126,0)
 ; 
"RTN","BPSRPT3",127,0)
SELMWC(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",128,0)
 S DFLT=$S($G(DFLT)="C":"CMOP",$G(DFLT)="W":"Window",$G(DFLT)="M":"Mail",1:"ALL")
"RTN","BPSRPT3",129,0)
 S DIR(0)="S^C:CMOP;M:Mail;W:Window;A:ALL"
"RTN","BPSRPT3",130,0)
 S DIR("A")="Display (C)MOP or (M)ail or (W)indow or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT3",131,0)
 D ^DIR
"RTN","BPSRPT3",132,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",133,0)
 Q Y
"RTN","BPSRPT3",134,0)
 ;
"RTN","BPSRPT3",135,0)
 ; Display (R)ealTime Fills or (B)ackbills or (A)LL
"RTN","BPSRPT3",136,0)
 ;
"RTN","BPSRPT3",137,0)
 ;    Input Variable -> DFLT = 4 PRO Option
"RTN","BPSRPT3",138,0)
 ;                             3 Backbill
"RTN","BPSRPT3",139,0)
 ;                             2 Real Time Fills
"RTN","BPSRPT3",140,0)
 ;                             1 ALL
"RTN","BPSRPT3",141,0)
 ;                          
"RTN","BPSRPT3",142,0)
 ;    Return Value ->   4 = PRO Option
"RTN","BPSRPT3",143,0)
 ;                      3 = Backbill (manually)
"RTN","BPSRPT3",144,0)
 ;                      2 = Real Time Fills (automatically during FINISH)
"RTN","BPSRPT3",145,0)
 ;                      1 = ALL
"RTN","BPSRPT3",146,0)
 ;                      ^ = Exit
"RTN","BPSRPT3",147,0)
 ;
"RTN","BPSRPT3",148,0)
SELRTBCK(DFLT) N DIR,DIRUT,DTOUT,DUOUT,DIROUT,X,Y
"RTN","BPSRPT3",149,0)
 S DFLT=$S($G(DFLT)=2:"Real Time",$G(DFLT)=3:"Backbill",$G(DFLT)=4:"PRO Option",1:"ALL")
"RTN","BPSRPT3",150,0)
 S DIR(0)="S^R:Real Time Fills;B:Backbill;P:PRO Option;A:ALL"
"RTN","BPSRPT3",151,0)
 S DIR("A")="Display (R)ealTime Fills or (B)ackbills or (P)RO Option or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT3",152,0)
 D ^DIR
"RTN","BPSRPT3",153,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",154,0)
 S Y=$S(Y="A":1,Y="R":2,Y="B":3,Y="P":4,1:Y)
"RTN","BPSRPT3",155,0)
 Q Y
"RTN","BPSRPT3",156,0)
 ;
"RTN","BPSRPT3",157,0)
 ; Display Specific (D)rug or Drug (C)lass
"RTN","BPSRPT3",158,0)
 ; 
"RTN","BPSRPT3",159,0)
 ;    Input Variable -> DFLT = 3 Drug Class
"RTN","BPSRPT3",160,0)
 ;                             2 Drug
"RTN","BPSRPT3",161,0)
 ;                             1 ALL
"RTN","BPSRPT3",162,0)
 ;                          
"RTN","BPSRPT3",163,0)
 ;     Return Value ->   3 = Drug Class
"RTN","BPSRPT3",164,0)
 ;                       2 = Drug
"RTN","BPSRPT3",165,0)
 ;                       1 = ALL
"RTN","BPSRPT3",166,0)
 ;                       ^ = Exit
"RTN","BPSRPT3",167,0)
 ;                       
"RTN","BPSRPT3",168,0)
SELDRGAL(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",169,0)
 S DFLT=$S($G(DFLT)=2:"Drug",$G(DFLT)=3:"Drug Class",1:"ALL")
"RTN","BPSRPT3",170,0)
 S DIR(0)="S^D:Drug;C:Drug Class;A:ALL"
"RTN","BPSRPT3",171,0)
 S DIR("A")="Display Specific (D)rug or Drug (C)lass or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT3",172,0)
 D ^DIR
"RTN","BPSRPT3",173,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",174,0)
 S Y=$S(Y="A":1,Y="D":2,Y="C":3,1:Y)
"RTN","BPSRPT3",175,0)
 Q Y
"RTN","BPSRPT3",176,0)
 ;
"RTN","BPSRPT3",177,0)
 ; Select Drug
"RTN","BPSRPT3",178,0)
 ; 
"RTN","BPSRPT3",179,0)
 ; Input Variable -> none
"RTN","BPSRPT3",180,0)
 ; 
"RTN","BPSRPT3",181,0)
 ; Return Value -> ptr = pointer to DRUG file (#50)
"RTN","BPSRPT3",182,0)
 ;                   ^ = Exit
"RTN","BPSRPT3",183,0)
 ;                   
"RTN","BPSRPT3",184,0)
SELDRG() N DIC,DIRUT,DUOUT,X,Y
"RTN","BPSRPT3",185,0)
 ;
"RTN","BPSRPT3",186,0)
 ;Prompt for entry
"RTN","BPSRPT3",187,0)
 W ! D SELDRG^BPSRPT6
"RTN","BPSRPT3",188,0)
 ;
"RTN","BPSRPT3",189,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT3",190,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",191,0)
 ;
"RTN","BPSRPT3",192,0)
 ;Check for Valid Entry
"RTN","BPSRPT3",193,0)
 I +Y>0 S Y=+Y
"RTN","BPSRPT3",194,0)
 ;
"RTN","BPSRPT3",195,0)
 Q Y
"RTN","BPSRPT3",196,0)
 ;
"RTN","BPSRPT3",197,0)
 ; Select Drug Class
"RTN","BPSRPT3",198,0)
 ; 
"RTN","BPSRPT3",199,0)
 ; Input Variable -> none
"RTN","BPSRPT3",200,0)
 ; 
"RTN","BPSRPT3",201,0)
 ; Return Value -> ptr = pointer to VA DRUG CLASS file (#50.605)
"RTN","BPSRPT3",202,0)
 ;                   ^ = Exit
"RTN","BPSRPT3",203,0)
 ;
"RTN","BPSRPT3",204,0)
SELDRGCL() N DIC,DIRUT,DUOUT,Y
"RTN","BPSRPT3",205,0)
 ;
"RTN","BPSRPT3",206,0)
 ;Prompt for entry
"RTN","BPSRPT3",207,0)
 ;W ! D SELDRGC^BPSRPT6
"RTN","BPSRPT3",208,0)
 ;Using DIC^PSNDI per ICR 4554 - BPS*1*14 ticket 313337
"RTN","BPSRPT3",209,0)
 S DIC="50.605",DIC(0)="QEAMZ" D DIC^PSNDI(DIC,"BPS",.DIC,,,)
"RTN","BPSRPT3",210,0)
 ;
"RTN","BPSRPT3",211,0)
 ;call returns DRUG CLASS CODE, need to extract DRUG CLASSIFICATION
"RTN","BPSRPT3",212,0)
 I +$G(Y)>0 S Y=$P($G(Y(0)),"^",2) I $G(Y)="" S Y=-1
"RTN","BPSRPT3",213,0)
 ;
"RTN","BPSRPT3",214,0)
 ;If nothing was returned set Y="-1" so report knows 
"RTN","BPSRPT3",215,0)
 I $G(Y)=-1 S Y="^"
"RTN","BPSRPT3",216,0)
 ;
"RTN","BPSRPT3",217,0)
 Q Y
"RTN","BPSRPT3",218,0)
 ;
"RTN","BPSRPT3",219,0)
 ; Enter Date Range
"RTN","BPSRPT3",220,0)
 ;
"RTN","BPSRPT3",221,0)
 ; Input Variable -> TYPE = 7 CLOSE REPORT
"RTN","BPSRPT3",222,0)
 ;                          1-6 OTHER REPORTS
"RTN","BPSRPT3",223,0)
 ;
"RTN","BPSRPT3",224,0)
 ; Return Value -> P1^P2
"RTN","BPSRPT3",225,0)
 ; 
"RTN","BPSRPT3",226,0)
 ;           where P1 = From Date
"RTN","BPSRPT3",227,0)
 ;                    = ^ Exit
"RTN","BPSRPT3",228,0)
 ;                 P2 = To Date
"RTN","BPSRPT3",229,0)
 ;                    = blank for Exit
"RTN","BPSRPT3",230,0)
 ;                 
"RTN","BPSRPT3",231,0)
SELDATE(TYPE) N BPSIBDT,DIR,DIRUT,DTOUT,DUOUT,VAL,X,Y
"RTN","BPSRPT3",232,0)
 S TYPE=$S($G(TYPE)=7:"CLOSE",1:"TRANSACTION")
"RTN","BPSRPT3",233,0)
SELDATE1 S VAL="",DIR(0)="DA^:DT:EX",DIR("A")="START WITH "_TYPE_" DATE: ",DIR("B")="T-1"
"RTN","BPSRPT3",234,0)
 W ! D ^DIR
"RTN","BPSRPT3",235,0)
 ;
"RTN","BPSRPT3",236,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT3",237,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S VAL="^"
"RTN","BPSRPT3",238,0)
 ;
"RTN","BPSRPT3",239,0)
 I VAL="" D
"RTN","BPSRPT3",240,0)
 .S $P(VAL,U)=Y
"RTN","BPSRPT3",241,0)
 .S DIR(0)="DA^"_VAL_":DT:EX",DIR("A")="  GO TO "_TYPE_" DATE: ",DIR("B")="T"
"RTN","BPSRPT3",242,0)
 .D ^DIR
"RTN","BPSRPT3",243,0)
 .;
"RTN","BPSRPT3",244,0)
 .;Check for "^", timeout, or blank entry
"RTN","BPSRPT3",245,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S VAL="^" Q
"RTN","BPSRPT3",246,0)
 .;
"RTN","BPSRPT3",247,0)
 .;Define Entry
"RTN","BPSRPT3",248,0)
 .S $P(VAL,U,2)=Y
"RTN","BPSRPT3",249,0)
 ;
"RTN","BPSRPT3",250,0)
 Q VAL
"RTN","BPSRPT3",251,0)
 ;
"RTN","BPSRPT3",252,0)
 ; Select to Include Open or Closed or All claims
"RTN","BPSRPT3",253,0)
 ; 
"RTN","BPSRPT3",254,0)
 ; Input Variable -> DFLT = 0 = All
"RTN","BPSRPT3",255,0)
 ;                          1 = Closed
"RTN","BPSRPT3",256,0)
 ;                          2 = Open
"RTN","BPSRPT3",257,0)
 ; 
"RTN","BPSRPT3",258,0)
 ; Return Value -> 0 = All, 1 = Closed, 2 = Open
"RTN","BPSRPT3",259,0)
SELOPCL(DFLT) N DIC,DIR,DIRUT,DUOUT,X,Y
"RTN","BPSRPT3",260,0)
 ;
"RTN","BPSRPT3",261,0)
 S DFLT=$S($G(DFLT)=1:"C",$G(DFLT)=2:"O",1:"A")
"RTN","BPSRPT3",262,0)
 S DIR(0)="S^O:OPEN;C:CLOSED;A:ALL"
"RTN","BPSRPT3",263,0)
 S DIR("A")="Include (O)pen, (C)losed, or (A)ll Claims",DIR("B")=DFLT
"RTN","BPSRPT3",264,0)
 D ^DIR
"RTN","BPSRPT3",265,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",266,0)
 ;
"RTN","BPSRPT3",267,0)
 S Y=$S(Y="C":1,Y="O":2,1:0)
"RTN","BPSRPT3",268,0)
 Q Y
"RTN","BPSRPT3",269,0)
 ;
"RTN","BPSRPT3",270,0)
SELELIG1() ;
"RTN","BPSRPT3",271,0)
 ; Select multiple Eligibilities
"RTN","BPSRPT3",272,0)
 ; 
"RTN","BPSRPT3",273,0)
 ; Input Variable -> none
"RTN","BPSRPT3",274,0)
 ; Return Value   -> 0: All, 1: Selected Eligibilities; '^' = Exit
"RTN","BPSRPT3",275,0)
 ;                                       
"RTN","BPSRPT3",276,0)
 ; Output Variable -> BPELIG1 = 1 - One or More Pharmacies Selected
"RTN","BPSRPT3",277,0)
 ;                            = 0 - User Entered 'ALL'
"RTN","BPSRPT3",278,0)
 ;                            = "^" - User quit
"RTN","BPSRPT3",279,0)
 ;                            
"RTN","BPSRPT3",280,0)
 ; If BPELIG1 = 1 then the BPELIG1 array will be defined where:
"RTN","BPSRPT3",281,0)
 ;    BPELIG1("C")="CHAMPVA"
"RTN","BPSRPT3",282,0)
 ;    BPELIG1("T")="TRICARE"
"RTN","BPSRPT3",283,0)
 ;    BPELIG1("V")="VETERAN"
"RTN","BPSRPT3",284,0)
 ;
"RTN","BPSRPT3",285,0)
 ;
"RTN","BPSRPT3",286,0)
 ;Reset BPELIG1 array
"RTN","BPSRPT3",287,0)
 K BPELIG1
"RTN","BPSRPT3",288,0)
 N DIR,DTOUT,DUOUT,DIRUT,DIROUT,X,Y,P
"RTN","BPSRPT3",289,0)
 ;
"RTN","BPSRPT3",290,0)
 ;First see if they want to enter individual eligibilities or ALL
"RTN","BPSRPT3",291,0)
 S DIR(0)="S^E:ELIGIBILITY;A:ALL"
"RTN","BPSRPT3",292,0)
 S DIR("A")="Select Certain (E)ligibilities or (A)LL"
"RTN","BPSRPT3",293,0)
 S DIR("B")="ALL"
"RTN","BPSRPT3",294,0)
 S DIR("L",1)="Select one of the following:"
"RTN","BPSRPT3",295,0)
 S DIR("L",2)=""
"RTN","BPSRPT3",296,0)
 S DIR("L",3)="     E         ELIGIBILITY"
"RTN","BPSRPT3",297,0)
 S DIR("L",4)="     A         ALL"
"RTN","BPSRPT3",298,0)
 D ^DIR K DIR
"RTN","BPSRPT3",299,0)
 ;
"RTN","BPSRPT3",300,0)
 ;Check for "^" or timeout
"RTN","BPSRPT3",301,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",302,0)
 ;
"RTN","BPSRPT3",303,0)
 ; Set BPELIG1 and quit unless user wants to select individual eligibilities
"RTN","BPSRPT3",304,0)
 S BPELIG1=$S(Y="A":0,Y="^":"^",1:1)
"RTN","BPSRPT3",305,0)
 I BPELIG1'=1 Q BPELIG1
"RTN","BPSRPT3",306,0)
 ;
"RTN","BPSRPT3",307,0)
 ;Allow user to select multiple eligibilities
"RTN","BPSRPT3",308,0)
 F  D  Q:Y="^"!(Y="")
"RTN","BPSRPT3",309,0)
 .;
"RTN","BPSRPT3",310,0)
 .;Prompt for entry
"RTN","BPSRPT3",311,0)
 .K DIR
"RTN","BPSRPT3",312,0)
 .S DIR(0)="SO^C:CHAMPVA;T:TRICARE;V:VETERAN"
"RTN","BPSRPT3",313,0)
 .S DIR("A")="Select Eligibility"
"RTN","BPSRPT3",314,0)
 .D ^DIR
"RTN","BPSRPT3",315,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^" Q
"RTN","BPSRPT3",316,0)
 .;
"RTN","BPSRPT3",317,0)
 .;Check for blank entry, quit if no previous selections
"RTN","BPSRPT3",318,0)
 .I $G(Y)="" S Y=$S($D(BPELIG1)>9:"",1:"^") Q
"RTN","BPSRPT3",319,0)
 .;
"RTN","BPSRPT3",320,0)
 .; Add entry to array or handle duplicate entries
"RTN","BPSRPT3",321,0)
 .I '$D(BPELIG1(Y)) S BPELIG1(Y)=Y(0),BPELIG1("B",Y(0),Y)=""
"RTN","BPSRPT3",322,0)
 .E  D  I Y="^" Q
"RTN","BPSRPT3",323,0)
 ..;Already in the array, so ask whether to delete
"RTN","BPSRPT3",324,0)
 ..N P
"RTN","BPSRPT3",325,0)
 ..S P=Y_"^"_Y(0)  ;Save Original Value
"RTN","BPSRPT3",326,0)
 ..S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_$P(P,U,2)_" from your list?"
"RTN","BPSRPT3",327,0)
 ..S DIR("B")="NO"
"RTN","BPSRPT3",328,0)
 ..D ^DIR
"RTN","BPSRPT3",329,0)
 ..I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^" Q
"RTN","BPSRPT3",330,0)
 ..I Y="Y" K BPELIG1($P(P,U,1)),BPELIG1("B",$P(P,U,2),$P(P,U,1))
"RTN","BPSRPT3",331,0)
 ..S Y=P  ;Restore Original Value
"RTN","BPSRPT3",332,0)
 ..K P
"RTN","BPSRPT3",333,0)
 .;
"RTN","BPSRPT3",334,0)
 .;Display a list of selected eligibilities
"RTN","BPSRPT3",335,0)
 .I $D(BPELIG1)>9 D
"RTN","BPSRPT3",336,0)
 ..N X
"RTN","BPSRPT3",337,0)
 ..W !,?2,"Selected:"
"RTN","BPSRPT3",338,0)
 ..S X="" F  S X=$O(BPELIG1("B",X)) Q:X=""  W !,?10,X
"RTN","BPSRPT3",339,0)
 ..K X
"RTN","BPSRPT3",340,0)
 .Q
"RTN","BPSRPT3",341,0)
 ;
"RTN","BPSRPT3",342,0)
 ; Reset BPELIG1 array if user exited
"RTN","BPSRPT3",343,0)
 I Y="^" K BPELIG1 S BPELIG1="^" Q "^"
"RTN","BPSRPT3",344,0)
 ;
"RTN","BPSRPT3",345,0)
 ; Deleted 'x-ref' as we don't need to return that
"RTN","BPSRPT3",346,0)
 K BPELIG1("B")
"RTN","BPSRPT3",347,0)
 ; 
"RTN","BPSRPT3",348,0)
 Q 1
"RTN","BPSRPT3",349,0)
 ;
"RTN","BPSRPT3",350,0)
SELALRC() ; 
"RTN","BPSRPT3",351,0)
 ; Display Most (R)ecent or (A)ll
"RTN","BPSRPT3",352,0)
 ;
"RTN","BPSRPT3",353,0)
 ; Return Value ->   A: All
"RTN","BPSRPT3",354,0)
 ;                   R: Most Recent
"RTN","BPSRPT3",355,0)
 ;                   ^: Exit
"RTN","BPSRPT3",356,0)
 ;
"RTN","BPSRPT3",357,0)
 N DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","BPSRPT3",358,0)
 ;
"RTN","BPSRPT3",359,0)
 S DIR(0)="S^R:Most Recent;A:ALL"
"RTN","BPSRPT3",360,0)
 S DIR("A")="Select Most (R)ecent or (A)ll"
"RTN","BPSRPT3",361,0)
 S DIR("B")="MOST RECENT"
"RTN","BPSRPT3",362,0)
 S DIR("L",1)="Select one of the following:"
"RTN","BPSRPT3",363,0)
 S DIR("L",2)=""
"RTN","BPSRPT3",364,0)
 S DIR("L",3)="     R         Most Recent Transaction Only"
"RTN","BPSRPT3",365,0)
 S DIR("L",4)="     A         ALL Transactions (will list the Rx/Fill each time resubmitted)"
"RTN","BPSRPT3",366,0)
 D ^DIR K DIR
"RTN","BPSRPT3",367,0)
 ;
"RTN","BPSRPT3",368,0)
 ;Check for "^" or timeout, 
"RTN","BPSRPT3",369,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",370,0)
 Q Y
"RTN","BPSRPT3",371,0)
 ;
"RTN","BPSRPT3",372,0)
SELNBSTS() ; 
"RTN","BPSRPT3",373,0)
 ; Select the Non-Billable Status Reason
"RTN","BPSRPT3",374,0)
 ; 
"RTN","BPSRPT3",375,0)
 ; Input Variable -> None
"RTN","BPSRPT3",376,0)
 ; Return Value   -> 0: All, 1: Selected Non-Billable Status; '^' = Exit
"RTN","BPSRPT3",377,0)
 ;                                       
"RTN","BPSRPT3",378,0)
 ; Output Variable -> BPNBSTS = 1 - One or More Non-Billable Statuses Selected
"RTN","BPSRPT3",379,0)
 ;                            = 0 - User Entered 'ALL'
"RTN","BPSRPT3",380,0)
 ;                            = "" - User quit
"RTN","BPSRPT3",381,0)
 ;                            
"RTN","BPSRPT3",382,0)
 ; If BPNBSTS = 1 then the BPNBSTS array will be defined where:
"RTN","BPSRPT3",383,0)
 ;    BPNBSTS(Non-Billable Status IEN)=Non-Billable Status Reason
"RTN","BPSRPT3",384,0)
 ;
"RTN","BPSRPT3",385,0)
 ;Reset BPNBSTS array
"RTN","BPSRPT3",386,0)
 K BPNBSTS
"RTN","BPSRPT3",387,0)
 N DIR,DTOUT,DUOUT,DIRUT,DIROUT,X,Y,P,DIC
"RTN","BPSRPT3",388,0)
 ;
"RTN","BPSRPT3",389,0)
 ;First see if they want to enter individual eligibilities or ALL
"RTN","BPSRPT3",390,0)
 S DIR(0)="S^S:NON-BILLABLE STATUS;A:ALL"
"RTN","BPSRPT3",391,0)
 S DIR("A")="Select Certain Non-Billable (S)tatus or (A)ll"
"RTN","BPSRPT3",392,0)
 S DIR("B")="ALL"
"RTN","BPSRPT3",393,0)
 S DIR("L",1)="Select one of the following:"
"RTN","BPSRPT3",394,0)
 S DIR("L",2)=""
"RTN","BPSRPT3",395,0)
 S DIR("L",3)="     S         NON-BILLABLE STATUS"
"RTN","BPSRPT3",396,0)
 S DIR("L",4)="     A         ALL"
"RTN","BPSRPT3",397,0)
 D ^DIR K DIR
"RTN","BPSRPT3",398,0)
 ;
"RTN","BPSRPT3",399,0)
 ;Check for "^" or timeout, otherwise define BPNBSTS
"RTN","BPSRPT3",400,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",401,0)
 S BPNBSTS=$S(Y="A":0,Y="^":"^",1:1)
"RTN","BPSRPT3",402,0)
 I BPNBSTS'=1 Q BPNBSTS
"RTN","BPSRPT3",403,0)
 ;
"RTN","BPSRPT3",404,0)
 ;Allow user to select multiple non-billable statuses
"RTN","BPSRPT3",405,0)
 F  D  Q:Y="^"!(Y="")
"RTN","BPSRPT3",406,0)
 .;Prompt for entry - ICR 6136
"RTN","BPSRPT3",407,0)
 .K X
"RTN","BPSRPT3",408,0)
 .S DIC(0)="QEAM",DIC=366.17,DIC("A")="Select Non-Billable Reason: "
"RTN","BPSRPT3",409,0)
 .W ! D ^DIC
"RTN","BPSRPT3",410,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^" Q
"RTN","BPSRPT3",411,0)
 .;
"RTN","BPSRPT3",412,0)
 .;Check for blank entry, quit if no previous selections
"RTN","BPSRPT3",413,0)
 .I $G(Y)=-1 S Y=$S($D(BPNBSTS)>9:"",1:"^") Q
"RTN","BPSRPT3",414,0)
 .;
"RTN","BPSRPT3",415,0)
 .; Add entry to array or handle duplicate entries
"RTN","BPSRPT3",416,0)
 .I '$D(BPNBSTS($P(Y,U,1))) S BPNBSTS($P(Y,U,1))=$P(Y,U,2),BPNBSTS("B",$P(Y,U,2),$P(Y,U,1))=""
"RTN","BPSRPT3",417,0)
 .E  D  I Y="^" Q
"RTN","BPSRPT3",418,0)
 ..;Already in the array, so ask whether to delete
"RTN","BPSRPT3",419,0)
 ..N P
"RTN","BPSRPT3",420,0)
 ..S P=Y  ;Save Original Value
"RTN","BPSRPT3",421,0)
 ..S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_$P(P,U,2)_" from your list?"
"RTN","BPSRPT3",422,0)
 ..S DIR("B")="NO"
"RTN","BPSRPT3",423,0)
 ..D ^DIR
"RTN","BPSRPT3",424,0)
 ..I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^" Q
"RTN","BPSRPT3",425,0)
 ..I Y="Y" K BPNBSTS($P(P,U,1)),BPNBSTS("B",$P(P,U,2),$P(P,U,1))
"RTN","BPSRPT3",426,0)
 ..S Y=P  ;Restore Original Value
"RTN","BPSRPT3",427,0)
 ..K P
"RTN","BPSRPT3",428,0)
 .;
"RTN","BPSRPT3",429,0)
 .;Display a list of selected values
"RTN","BPSRPT3",430,0)
 .I $D(BPNBSTS)>9 D
"RTN","BPSRPT3",431,0)
 ..N X
"RTN","BPSRPT3",432,0)
 ..W !,?2,"Selected:"
"RTN","BPSRPT3",433,0)
 ..S X="" F  S X=$O(BPNBSTS("B",X)) Q:X=""  W !,?10,X
"RTN","BPSRPT3",434,0)
 ..K X
"RTN","BPSRPT3",435,0)
 .Q
"RTN","BPSRPT3",436,0)
 ;
"RTN","BPSRPT3",437,0)
 ; Reset BPNBSTS array if user exited
"RTN","BPSRPT3",438,0)
 I Y="^" K BPNBSTS S BPNBSTS="^" Q "^"
"RTN","BPSRPT3",439,0)
 ;
"RTN","BPSRPT3",440,0)
 ; Deleted 'x-ref' as we don't need to return that
"RTN","BPSRPT3",441,0)
 K BPNBSTS("B")
"RTN","BPSRPT3",442,0)
 ; 
"RTN","BPSRPT3",443,0)
 Q 1
"RTN","BPSRPT4")
0^3^B99407580
"RTN","BPSRPT4",1,0)
BPSRPT4 ;BHAM ISC/BEE - ECME REPORTS (CONT) ;14-FEB-05
"RTN","BPSRPT4",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,10,11,19**;JUN 2004;Build 18
"RTN","BPSRPT4",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT4",4,0)
 ;
"RTN","BPSRPT4",5,0)
 Q
"RTN","BPSRPT4",6,0)
 ;
"RTN","BPSRPT4",7,0)
 ; Include Rxs - (R)ELEASED or (N)OT RELEASED or (A)LL
"RTN","BPSRPT4",8,0)
 ;
"RTN","BPSRPT4",9,0)
 ;    Input Variable -> DFLT = 3 NOT RELEASED
"RTN","BPSRPT4",10,0)
 ;                             2 RELEASED
"RTN","BPSRPT4",11,0)
 ;                             1 ALL
"RTN","BPSRPT4",12,0)
 ;                          
"RTN","BPSRPT4",13,0)
 ;    Return Value ->   3 = NOT RELEASED
"RTN","BPSRPT4",14,0)
 ;                      2 = RELEASED
"RTN","BPSRPT4",15,0)
 ;                      1 = ALL
"RTN","BPSRPT4",16,0)
 ;                      ^ = Exit
"RTN","BPSRPT4",17,0)
 ;
"RTN","BPSRPT4",18,0)
SELRLNRL(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT4",19,0)
 S DFLT=$S($G(DFLT)=1:"ALL",$G(DFLT)=3:"NOT RELEASED",1:"RELEASED")
"RTN","BPSRPT4",20,0)
 S DIR(0)="S^R:RELEASED;N:NOT RELEASED;A:ALL"
"RTN","BPSRPT4",21,0)
 S DIR("A")="Include Rxs - (R)ELEASED or (N)OT RELEASED or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",22,0)
 D ^DIR
"RTN","BPSRPT4",23,0)
 ;
"RTN","BPSRPT4",24,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",25,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S Y="^"
"RTN","BPSRPT4",26,0)
 ;
"RTN","BPSRPT4",27,0)
 S Y=$S(Y="A":1,Y="R":2,Y="N":3,1:Y)
"RTN","BPSRPT4",28,0)
 ;
"RTN","BPSRPT4",29,0)
 Q Y
"RTN","BPSRPT4",30,0)
 ;
"RTN","BPSRPT4",31,0)
 ; Select to Include (S)pecific Reject Code or (A)ll
"RTN","BPSRPT4",32,0)
 ;
"RTN","BPSRPT4",33,0)
 ; Input Variable -> DFLT = 1 Specific Reject Code
"RTN","BPSRPT4",34,0)
 ;                          0 All Reject Codes
"RTN","BPSRPT4",35,0)
 ;                          
"RTN","BPSRPT4",36,0)
 ; Return Value ->   ptr = pointer to BPS NCPDP REJECT CODES (#9002313.93)
"RTN","BPSRPT4",37,0)
 ;                     0 = All Reject Codes
"RTN","BPSRPT4",38,0)
 ;                     ^ = Exit
"RTN","BPSRPT4",39,0)
 ;
"RTN","BPSRPT4",40,0)
SELREJCD(DFLT) N DIC,DIR,DIRUT,DUOUT,REJ,X,Y
"RTN","BPSRPT4",41,0)
 ;
"RTN","BPSRPT4",42,0)
 S DFLT=$S($G(DFLT)=1:"Specific Reject Code",1:"ALL")
"RTN","BPSRPT4",43,0)
 S DIR(0)="S^S:Specific Reject Code;A:ALL"
"RTN","BPSRPT4",44,0)
 S DIR("A")="Include (S)pecific Reject Code or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",45,0)
 D ^DIR
"RTN","BPSRPT4",46,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT4",47,0)
 S REJ=$S(Y="S":1,Y="A":0,1:Y)
"RTN","BPSRPT4",48,0)
 ;
"RTN","BPSRPT4",49,0)
 ;Check for "^" or timeout
"RTN","BPSRPT4",50,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S (REJ,Y)="^"
"RTN","BPSRPT4",51,0)
 ;
"RTN","BPSRPT4",52,0)
 ;If Specific Reject Code selected, ask prompt
"RTN","BPSRPT4",53,0)
 I $G(REJ)=1 D
"RTN","BPSRPT4",54,0)
 .;
"RTN","BPSRPT4",55,0)
 .;Prompt for entry
"RTN","BPSRPT4",56,0)
 .K X S DIC(0)="QEAM",DIC=9002313.93,DIC("A")="Select Reject Code: "
"RTN","BPSRPT4",57,0)
 .W ! D ^DIC
"RTN","BPSRPT4",58,0)
 .;
"RTN","BPSRPT4",59,0)
 .;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",60,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S (REJ,Y)="^" Q
"RTN","BPSRPT4",61,0)
 .;
"RTN","BPSRPT4",62,0)
 .;If valid entry, setup REJ
"RTN","BPSRPT4",63,0)
 .I +Y>0 S REJ=+Y
"RTN","BPSRPT4",64,0)
 ;
"RTN","BPSRPT4",65,0)
 Q REJ
"RTN","BPSRPT4",66,0)
 ;
"RTN","BPSRPT4",67,0)
 ; Include Auto(R)eversed or (A)LL
"RTN","BPSRPT4",68,0)
 ; 
"RTN","BPSRPT4",69,0)
 ;    Input Variable -> DFLT = 1 AutoReversed
"RTN","BPSRPT4",70,0)
 ;                             0 ALL
"RTN","BPSRPT4",71,0)
 ;                          
"RTN","BPSRPT4",72,0)
 ;    Return Value ->   1 = AutoReversed
"RTN","BPSRPT4",73,0)
 ;                      0 = ALL
"RTN","BPSRPT4",74,0)
 ;                      ^ = Exit
"RTN","BPSRPT4",75,0)
 ;
"RTN","BPSRPT4",76,0)
SELAUREV(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT4",77,0)
 ;
"RTN","BPSRPT4",78,0)
 S DFLT=$S($G(DFLT)=1:"AutoReversed",1:"ALL")
"RTN","BPSRPT4",79,0)
 S DIR(0)="S^R:AutoReversed;A:ALL"
"RTN","BPSRPT4",80,0)
 S DIR("A")="Include Auto(R)eversed or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",81,0)
 D ^DIR
"RTN","BPSRPT4",82,0)
 ;
"RTN","BPSRPT4",83,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",84,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S Y="^"
"RTN","BPSRPT4",85,0)
 ;
"RTN","BPSRPT4",86,0)
 S Y=$S(Y="A":0,Y="R":1,1:Y)
"RTN","BPSRPT4",87,0)
 ;
"RTN","BPSRPT4",88,0)
 Q Y
"RTN","BPSRPT4",89,0)
 ;
"RTN","BPSRPT4",90,0)
 ; Include A(C)cepted or (R)ejected or (A)LL
"RTN","BPSRPT4",91,0)
 ; 
"RTN","BPSRPT4",92,0)
 ;    Input Variable -> DFLT = 2 Accepted
"RTN","BPSRPT4",93,0)
 ;                             1 Rejected
"RTN","BPSRPT4",94,0)
 ;                             0 ALL
"RTN","BPSRPT4",95,0)
 ;                          
"RTN","BPSRPT4",96,0)
 ;    Return Value ->   2 = Accepted
"RTN","BPSRPT4",97,0)
 ;                      1 = Rejected
"RTN","BPSRPT4",98,0)
 ;                      0 = ALL
"RTN","BPSRPT4",99,0)
 ;                      ^ = Exit
"RTN","BPSRPT4",100,0)
 ;
"RTN","BPSRPT4",101,0)
SELACREJ(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT4",102,0)
 ;
"RTN","BPSRPT4",103,0)
 S DFLT=$S($G(DFLT)=2:"Accepted",$G(DFLT)=1:"Rejected",1:"ALL")
"RTN","BPSRPT4",104,0)
 S DIR(0)="S^C:Accepted;R:Rejected;A:ALL"
"RTN","BPSRPT4",105,0)
 S DIR("A")="Include A(C)cepted or (R)ejected or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",106,0)
 D ^DIR
"RTN","BPSRPT4",107,0)
 ;
"RTN","BPSRPT4",108,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",109,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S Y="^"
"RTN","BPSRPT4",110,0)
 ;
"RTN","BPSRPT4",111,0)
 S Y=$S(Y="C":2,Y="R":1,Y="A":0,1:Y)
"RTN","BPSRPT4",112,0)
 ;
"RTN","BPSRPT4",113,0)
 Q Y
"RTN","BPSRPT4",114,0)
 ;
"RTN","BPSRPT4",115,0)
 ; Select to Include (S)pecific Close Claim Reason or (A)ll
"RTN","BPSRPT4",116,0)
 ;
"RTN","BPSRPT4",117,0)
 ; Input Variable -> DFLT = 1 Specific CLAIMS TRACKING NON-BILLABLE REASONS
"RTN","BPSRPT4",118,0)
 ;                          0 All Reasons
"RTN","BPSRPT4",119,0)
 ;                          
"RTN","BPSRPT4",120,0)
 ; Return Value ->   ptr = pointer to CLAIMS TRACKING NON-BILLABLE REASONS (#356.8)
"RTN","BPSRPT4",121,0)
 ;                     0 = All Reasons
"RTN","BPSRPT4",122,0)
 ;                     ^ = Exit
"RTN","BPSRPT4",123,0)
 ;
"RTN","BPSRPT4",124,0)
SELCCRSN(DFLT) N DIC,DIR,DIRUT,DUOUT,RSN,X,Y
"RTN","BPSRPT4",125,0)
 ;
"RTN","BPSRPT4",126,0)
 S DFLT=$S($G(DFLT)=1:"Specific Close Claim Reason",1:"ALL")
"RTN","BPSRPT4",127,0)
 S DIR(0)="S^S:Specific Close Claim Reason;A:ALL"
"RTN","BPSRPT4",128,0)
 S DIR("A")="Include (S)pecific Close Claim Reason or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",129,0)
 D ^DIR
"RTN","BPSRPT4",130,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT4",131,0)
 S RSN=$S(Y="S":1,Y="A":0,1:Y)
"RTN","BPSRPT4",132,0)
 ;
"RTN","BPSRPT4",133,0)
 ;Check for "^" or timeout
"RTN","BPSRPT4",134,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S (RSN,Y)="^"
"RTN","BPSRPT4",135,0)
 ;
"RTN","BPSRPT4",136,0)
 ;If Specific Reject Code selected, ask prompt
"RTN","BPSRPT4",137,0)
 I $G(RSN)=1 D
"RTN","BPSRPT4",138,0)
 .;
"RTN","BPSRPT4",139,0)
 .;Prompt for entry
"RTN","BPSRPT4",140,0)
 .K X S DIC(0)="QEAM",DIC=356.8,DIC("A")="Select Close Claim Reason: "
"RTN","BPSRPT4",141,0)
 .W ! D ^DIC
"RTN","BPSRPT4",142,0)
 .;
"RTN","BPSRPT4",143,0)
 .;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",144,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S (RSN,Y)="^" Q
"RTN","BPSRPT4",145,0)
 .;
"RTN","BPSRPT4",146,0)
 .;If valid entry, setup RSN
"RTN","BPSRPT4",147,0)
 .I +Y>0 S RSN=+Y
"RTN","BPSRPT4",148,0)
 ;
"RTN","BPSRPT4",149,0)
 Q RSN
"RTN","BPSRPT4",150,0)
 ;
"RTN","BPSRPT4",151,0)
 ;Pull Selected BPS Pharmacies for Display
"RTN","BPSRPT4",152,0)
 ;
"RTN","BPSRPT4",153,0)
 ;  Input Variables: 
"RTN","BPSRPT4",154,0)
 ;  BPPHARM/BPPHARM(ptr) - Set to 0 for all pharmacies, if set to 1 array of internal
"RTN","BPSRPT4",155,0)
 ;                         pointers of selected pharmacies       
"RTN","BPSRPT4",156,0)
 ;                       - BPLEN = The length of the display field
"RTN","BPSRPT4",157,0)
 ;  Returned value -> List of selected BPS Pharmacies (possibly cut short)                 
"RTN","BPSRPT4",158,0)
 ; 
"RTN","BPSRPT4",159,0)
GETDIVS(BPLEN,BPPHARM) N BPDIV,BPSTR,BPQUIT
"RTN","BPSRPT4",160,0)
 I $G(BPPHARM)=0 S BPSTR="ALL"
"RTN","BPSRPT4",161,0)
 E  D
"RTN","BPSRPT4",162,0)
 .S BPDIV="",BPQUIT=0,BPSTR=""
"RTN","BPSRPT4",163,0)
 .F  S BPDIV=$O(BPPHARM(BPDIV)) Q:+BPDIV=0  D  Q:BPQUIT=1
"RTN","BPSRPT4",164,0)
 .. I $L(BPSTR_$$DIVNAME^BPSSCRDS(BPDIV))>(BPLEN-4) D  S BPQUIT=1 Q
"RTN","BPSRPT4",165,0)
 ... S BPSTR=$$LJ^BPSSCR02(BPSTR_",...",BPLEN)
"RTN","BPSRPT4",166,0)
 .. S BPSTR=BPSTR_$S(BPSTR]"":", ",1:"")_$$DIVNAME^BPSSCRDS(BPDIV)
"RTN","BPSRPT4",167,0)
 Q BPSTR
"RTN","BPSRPT4",168,0)
 ;
"RTN","BPSRPT4",169,0)
 ;Get the Reject Code
"RTN","BPSRPT4",170,0)
 ;
"RTN","BPSRPT4",171,0)
 ; Input variable -> 0 for All Reject Codes or
"RTN","BPSRPT4",172,0)
 ;                   lookup to BPS NCPDP REJECT CODES (#9002313.93)
"RTN","BPSRPT4",173,0)
 ; Returned value -> ALL or the selected Reject Code
"RTN","BPSRPT4",174,0)
 ; 
"RTN","BPSRPT4",175,0)
GETREJ(REJ) ;
"RTN","BPSRPT4",176,0)
 I REJ="0" S REJ="ALL"
"RTN","BPSRPT4",177,0)
 E  S REJ=$P($G(^BPSF(9002313.93,+REJ,0)),U,2)
"RTN","BPSRPT4",178,0)
 Q REJ
"RTN","BPSRPT4",179,0)
 ;
"RTN","BPSRPT4",180,0)
 ;Print Header 2 Line 1
"RTN","BPSRPT4",181,0)
 ;
"RTN","BPSRPT4",182,0)
 ; Input variable: BPRTYPE -> Report Type (1-7)
"RTN","BPSRPT4",183,0)
 ;
"RTN","BPSRPT4",184,0)
HEADLN1(BPRTYPE) ;
"RTN","BPSRPT4",185,0)
 I (",1,2,3,4,5,7,8,9,")[BPRTYPE W !,"PATIENT NAME",?27,"Pt.ID"
"RTN","BPSRPT4",186,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT4",187,0)
 . W ?35,"ELIG"
"RTN","BPSRPT4",188,0)
 . W ?40,"RX#"
"RTN","BPSRPT4",189,0)
 . W ?52,"REF/ECME#"
"RTN","BPSRPT4",190,0)
 . W ?73,"DATE"
"RTN","BPSRPT4",191,0)
 . W ?83,$J("$BILLED",10)
"RTN","BPSRPT4",192,0)
 . W ?102,$J("$INS RESPONSE",13)
"RTN","BPSRPT4",193,0)
 . W ?122,$J("$COLLECT",10)
"RTN","BPSRPT4",194,0)
 ;
"RTN","BPSRPT4",195,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT4",196,0)
 . W ?35,"ELIG"
"RTN","BPSRPT4",197,0)
 . W ?40,"RX#"
"RTN","BPSRPT4",198,0)
 . W ?52,"REF/ECME#"
"RTN","BPSRPT4",199,0)
 . W ?73,"DATE"
"RTN","BPSRPT4",200,0)
 . W ?83,"RELEASED ON"
"RTN","BPSRPT4",201,0)
 . W ?96,"RX INFO"
"RTN","BPSRPT4",202,0)
 . W ?114,"RX COB"
"RTN","BPSRPT4",203,0)
 . W ?121,"OPEN/CLOSED"
"RTN","BPSRPT4",204,0)
 ;
"RTN","BPSRPT4",205,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT4",206,0)
 . W ?35,"RX#"
"RTN","BPSRPT4",207,0)
 . W ?47,"REF/ECME#"
"RTN","BPSRPT4",208,0)
 . W ?68,"DATE"
"RTN","BPSRPT4",209,0)
 . W ?100,$J("$BILLED",10)
"RTN","BPSRPT4",210,0)
 . W ?119,$J("$INS RESPONSE",13)
"RTN","BPSRPT4",211,0)
 ;
"RTN","BPSRPT4",212,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT4",213,0)
 . W ?35,"RX#"
"RTN","BPSRPT4",214,0)
 . W ?47,"REF/ECME#"
"RTN","BPSRPT4",215,0)
 . W ?65,"COMPLETED"
"RTN","BPSRPT4",216,0)
 . W ?83,"TRANS TYPE"
"RTN","BPSRPT4",217,0)
 . W ?100,"PAYER RESPONSE"
"RTN","BPSRPT4",218,0)
 . W ?125,"RX COB"
"RTN","BPSRPT4",219,0)
 ;
"RTN","BPSRPT4",220,0)
 I BPRTYPE=6 D  Q
"RTN","BPSRPT4",221,0)
 . W !,?33,$J("AMOUNT",17)
"RTN","BPSRPT4",222,0)
 . W ?51,$J("RETURNED",17)
"RTN","BPSRPT4",223,0)
 . W ?69,$J("RETURNED",17)
"RTN","BPSRPT4",224,0)
 . W ?87,$J("AMOUNT",17)
"RTN","BPSRPT4",225,0)
 ;
"RTN","BPSRPT4",226,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT4",227,0)
 . W ?35,"ELIG"
"RTN","BPSRPT4",228,0)
 . W ?40,"RX#"
"RTN","BPSRPT4",229,0)
 . W ?52,"REF/ECME#"
"RTN","BPSRPT4",230,0)
 . W ?70,"RX INFO"
"RTN","BPSRPT4",231,0)
 . W ?92,"DRUG"
"RTN","BPSRPT4",232,0)
 . W ?126,"NDC"
"RTN","BPSRPT4",233,0)
 ;
"RTN","BPSRPT4",234,0)
 I (BPRTYPE=8) D  Q
"RTN","BPSRPT4",235,0)
 . W ?35,"RX#"
"RTN","BPSRPT4",236,0)
 . W ?47,"REF/ECME#"
"RTN","BPSRPT4",237,0)
 . W ?68,"DATE"
"RTN","BPSRPT4",238,0)
 . W ?78,$J("$BILLED",10)
"RTN","BPSRPT4",239,0)
 . W ?97,$J("$INS RESPONSE",13)
"RTN","BPSRPT4",240,0)
 . W ?122,$J("$COLLECT",10)
"RTN","BPSRPT4",241,0)
 ;
"RTN","BPSRPT4",242,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT4",243,0)
 . W ?35,"ELIG"
"RTN","BPSRPT4",244,0)
 . W ?40,"RX#"
"RTN","BPSRPT4",245,0)
 . W ?52,"REF"
"RTN","BPSRPT4",246,0)
 . W ?64,"DATE"
"RTN","BPSRPT4",247,0)
 . W ?84,$J("$DRUG COST",10)
"RTN","BPSRPT4",248,0)
 Q
"RTN","BPSRPT4",249,0)
 ;
"RTN","BPSRPT4",250,0)
 ;Print Header 2 Line 2
"RTN","BPSRPT4",251,0)
 ;
"RTN","BPSRPT4",252,0)
 ; Input variable: BPRTYPE -> Report Type (1-7)
"RTN","BPSRPT4",253,0)
 ; 
"RTN","BPSRPT4",254,0)
HEADLN2(BPRTYPE) ;
"RTN","BPSRPT4",255,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT4",256,0)
 . W !,?4,"DRUG"
"RTN","BPSRPT4",257,0)
 . W ?36,"NDC"
"RTN","BPSRPT4",258,0)
 . I BPRTYPE=1 W ?47,"RELEASED ON"
"RTN","BPSRPT4",259,0)
 . W ?68,"RX INFO"
"RTN","BPSRPT4",260,0)
 . I BPRTYPE=4 W ?92,"RX COB"
"RTN","BPSRPT4",261,0)
 . I BPRTYPE=1 W ?115,$J("BILL# RX COB",17)
"RTN","BPSRPT4",262,0)
 ;
"RTN","BPSRPT4",263,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT4",264,0)
 . W !,?3,"CARDHOLD.ID"
"RTN","BPSRPT4",265,0)
 . W ?31,"GROUP ID"
"RTN","BPSRPT4",266,0)
 . W ?41,$J("$BILLED",10)
"RTN","BPSRPT4",267,0)
 . W ?54,"QTY"
"RTN","BPSRPT4",268,0)
 . W ?61,"NDC#"
"RTN","BPSRPT4",269,0)
 . W ?82,"DRUG"
"RTN","BPSRPT4",270,0)
 ;
"RTN","BPSRPT4",271,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT4",272,0)
 . W !,?4,"DRUG"
"RTN","BPSRPT4",273,0)
 . W ?43,"NDC"
"RTN","BPSRPT4",274,0)
 . W ?68,"RX INFO"
"RTN","BPSRPT4",275,0)
 . W ?88,"RX COB"
"RTN","BPSRPT4",276,0)
 ;
"RTN","BPSRPT4",277,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT4",278,0)
 . W !,?4,"DRUG"
"RTN","BPSRPT4",279,0)
 . W ?32,"NDC"
"RTN","BPSRPT4",280,0)
 . W ?47,"RX INFO"
"RTN","BPSRPT4",281,0)
 . W ?69,"INSURANCE"
"RTN","BPSRPT4",282,0)
 . W ?112,"ELAP TIME IN SECONDS"
"RTN","BPSRPT4",283,0)
 ;
"RTN","BPSRPT4",284,0)
 I BPRTYPE=6 D  Q
"RTN","BPSRPT4",285,0)
 .W !,?1,"DATE"
"RTN","BPSRPT4",286,0)
 .W ?15,$J("#CLAIMS",17)
"RTN","BPSRPT4",287,0)
 .W ?33,$J("SUBMITTED",17)
"RTN","BPSRPT4",288,0)
 .W ?51,$J("REJECTED",17)
"RTN","BPSRPT4",289,0)
 .W ?69,$J("PAYABLE",17)
"RTN","BPSRPT4",290,0)
 .W ?87,$J("TO RECEIVE",17)
"RTN","BPSRPT4",291,0)
 .W ?115,$J("DIFFERENCE",17)
"RTN","BPSRPT4",292,0)
 ;
"RTN","BPSRPT4",293,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT4",294,0)
 . W !,?3,"CARDHOLD.ID"
"RTN","BPSRPT4",295,0)
 . W ?31,"GROUP ID"
"RTN","BPSRPT4",296,0)
 . W ?41,"CLOSE DATE/TIME"
"RTN","BPSRPT4",297,0)
 . W ?59,"CLOSED BY"
"RTN","BPSRPT4",298,0)
 . W ?87,"CLOSE REASON"
"RTN","BPSRPT4",299,0)
 . W ?121,"RX COB"
"RTN","BPSRPT4",300,0)
 ;
"RTN","BPSRPT4",301,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT4",302,0)
 . W !,?2,"DRUG"
"RTN","BPSRPT4",303,0)
 . W ?38,"RX INFO"
"RTN","BPSRPT4",304,0)
 . W ?54,"INS GROUP#"
"RTN","BPSRPT4",305,0)
 . W ?79,"INS GROUP NAME"
"RTN","BPSRPT4",306,0)
 . W ?121,"BILL#"
"RTN","BPSRPT4",307,0)
 ;
"RTN","BPSRPT4",308,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT4",309,0)
 . W !,?4,"DRUG"
"RTN","BPSRPT4",310,0)
 . W ?36,"NDC"
"RTN","BPSRPT4",311,0)
 . W ?47,"RELEASED ON"
"RTN","BPSRPT4",312,0)
 . W ?62,"RX INFO"
"RTN","BPSRPT4",313,0)
 . W ?75,"NON-BILLABLE STATUS"
"RTN","BPSRPT4",314,0)
 Q
"RTN","BPSRPT4",315,0)
 ;
"RTN","BPSRPT4",316,0)
 ;Print Header 2 Line 3
"RTN","BPSRPT4",317,0)
 ;
"RTN","BPSRPT4",318,0)
 ; Input variable: BPRTYPE -> Report Type (1-7)
"RTN","BPSRPT4",319,0)
 ; 
"RTN","BPSRPT4",320,0)
HEADLN3(BPTYP) ;
"RTN","BPSRPT4",321,0)
 I BPTYP=4 D  Q
"RTN","BPSRPT4",322,0)
 . W !,?6,"RELEASED ON"
"RTN","BPSRPT4",323,0)
 . W ?22,"REVERSAL METHOD/RETURN STATUS/REASON"
"RTN","BPSRPT4",324,0)
 ;
"RTN","BPSRPT4",325,0)
 I BPTYP=8 D  Q
"RTN","BPSRPT4",326,0)
 . W !,?4,"$PROVIDER NETWORK"
"RTN","BPSRPT4",327,0)
 . W ?23,"$BRAND DRUG"
"RTN","BPSRPT4",328,0)
 . W ?38,"$NON-PREF FORM"
"RTN","BPSRPT4",329,0)
 . W ?56,"$BRAND NON-PREF FORM"
"RTN","BPSRPT4",330,0)
 . W ?81,"$COVERAGE GAP"
"RTN","BPSRPT4",331,0)
 . W ?96,"$HEALTH ASST"
"RTN","BPSRPT4",332,0)
 . W ?111,"$SPEND ACCT REMAINING"
"RTN","BPSRPT4",333,0)
 Q
"RTN","BPSRPT4",334,0)
 ;
"RTN","BPSRPT4",335,0)
SELEXCEL() ; - Returns whether to capture data for Excel report.
"RTN","BPSRPT4",336,0)
 ; Output: EXCEL = 1 - YES (capture data) / 0 - NO (DO NOT capture data)
"RTN","BPSRPT4",337,0)
 ;
"RTN","BPSRPT4",338,0)
 N EXCEL,DIR,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","BPSRPT4",339,0)
 I ",1,2,3,4,"[(","_BPRTYPE_",") D
"RTN","BPSRPT4",340,0)
 . W !!,"Data fields VA Ingredient Cost, VA Dispensing Fee, Ingredient Cost Paid,",!
"RTN","BPSRPT4",341,0)
 . W "Dispensing Fee Paid and Patient Responsibility (INS) will only be included",!
"RTN","BPSRPT4",342,0)
 . W "when the report is captured for an Excel document.  All additional data fields",!
"RTN","BPSRPT4",343,0)
 . W "may not be present for all reports."
"RTN","BPSRPT4",344,0)
 S DIR(0)="Y",DIR("B")="NO",DIR("T")=DTIME W !
"RTN","BPSRPT4",345,0)
 S DIR("A")="Do you want to capture report data for an Excel document"
"RTN","BPSRPT4",346,0)
 S DIR("?")="^D HEXC^BPSRPT4"
"RTN","BPSRPT4",347,0)
 D ^DIR K DIR I $D(DIRUT)!$D(DTOUT)!$D(DUOUT)!$D(DIROUT) Q "^"
"RTN","BPSRPT4",348,0)
 K DIROUT,DTOUT,DUOUT,DIRUT
"RTN","BPSRPT4",349,0)
 S EXCEL=0 I Y S EXCEL=1
"RTN","BPSRPT4",350,0)
 ;
"RTN","BPSRPT4",351,0)
 ;Display Excel display message
"RTN","BPSRPT4",352,0)
 I EXCEL=1 D EXMSG
"RTN","BPSRPT4",353,0)
 ;
"RTN","BPSRPT4",354,0)
 Q EXCEL
"RTN","BPSRPT4",355,0)
 ;
"RTN","BPSRPT4",356,0)
HEXC ; - 'Do you want to capture data...' prompt
"RTN","BPSRPT4",357,0)
 W !!,"      Enter:  'Y'    -  To capture detail report data to transfer"
"RTN","BPSRPT4",358,0)
 W !,"                        to an Excel document"
"RTN","BPSRPT4",359,0)
 W !,"              '<CR>' -  To skip this option"
"RTN","BPSRPT4",360,0)
 W !,"              '^'    -  To quit this option"
"RTN","BPSRPT4",361,0)
 Q
"RTN","BPSRPT4",362,0)
 ;
"RTN","BPSRPT4",363,0)
 ;Display the message about capturing to an Excel file format
"RTN","BPSRPT4",364,0)
 ; 
"RTN","BPSRPT4",365,0)
EXMSG ;
"RTN","BPSRPT4",366,0)
 W !!?5,"Before continuing, please set up your terminal to capture the"
"RTN","BPSRPT4",367,0)
 W !?5,"detail report data. On some terminals, this can  be  done  by"
"RTN","BPSRPT4",368,0)
 W !?5,"clicking  on the 'Tools' menu above, then click  on  'Capture"
"RTN","BPSRPT4",369,0)
 W !?5,"Incoming  Data' to save to  Desktop. This  report  may take a"
"RTN","BPSRPT4",370,0)
 W !?5,"while to run."
"RTN","BPSRPT4",371,0)
 W !!?5,"Note: To avoid  undesired  wrapping of the data  saved to the"
"RTN","BPSRPT4",372,0)
 W !?5,"      file, please enter '0;256;999' at the 'DEVICE:' prompt.",!
"RTN","BPSRPT4",373,0)
 Q
"RTN","BPSRPT5")
0^5^B167824717
"RTN","BPSRPT5",1,0)
BPSRPT5 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT5",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8,10,11,19**;JUN 2004;Build 18
"RTN","BPSRPT5",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT5",4,0)
 ;
"RTN","BPSRPT5",5,0)
 ;Reference to IB NCPCP NON-BILLABLE STATUS REASONS (#366.17) supported by ICR 6136
"RTN","BPSRPT5",6,0)
 ;
"RTN","BPSRPT5",7,0)
 ;Routine to Display the Reports
"RTN","BPSRPT5",8,0)
 ;
"RTN","BPSRPT5",9,0)
 ;Print Report Line 1
"RTN","BPSRPT5",10,0)
WRLINE1(BPRTYPE,BPREC,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT,BPBIL,BPINS,BPCOLL,BPEXCEL,BPPSEQ) ;
"RTN","BPSRPT5",11,0)
 ;Excel Output
"RTN","BPSRPT5",12,0)
 I $G(BPEXCEL) D WRLINE1^BPSRPT8(BPRTYPE,.BPREC,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT,BPBIL,BPINS,BPCOLL,BPPSEQ) Q
"RTN","BPSRPT5",13,0)
 ;Report Output
"RTN","BPSRPT5",14,0)
 W !,$$PATNAME^BPSRPT6(BPDFN)
"RTN","BPSRPT5",15,0)
 W ?27,"("_$$SSN4^BPSRPT6(BPDFN)_")"
"RTN","BPSRPT5",16,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT5",17,0)
 . N ELGCD S ELGCD=$$ELIGCODE^BPSSCR05($P(BPX,U,3))
"RTN","BPSRPT5",18,0)
 . W ?35,$S(ELGCD="V":"VET",ELGCD="T":"TRI",ELGCD="C":"CVA",1:"UNK")
"RTN","BPSRPT5",19,0)
 . W ?40,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)
"RTN","BPSRPT5",20,0)
 . W ?52,BPREF,"/",$$ECMENUM^BPSRPT1($P(BPX,U,3))
"RTN","BPSRPT5",21,0)
 . W ?73,$$DATTIM^BPSRPT1(BPSRTDT)
"RTN","BPSRPT5",22,0)
 . W ?83,$J(BPBIL,10,2),?105,$J(BPINS,10,2),?122,$S(BPCOLL]"":$J(BPCOLL,10,2),1:"")
"RTN","BPSRPT5",23,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT5",24,0)
 . N ELGCD S ELGCD=$$ELIGCODE^BPSSCR05($P(BPX,U,3))
"RTN","BPSRPT5",25,0)
 . W ?35,$S(ELGCD="V":"VET",ELGCD="T":"TRI",ELGCD="C":"CVA",1:"UNK")
"RTN","BPSRPT5",26,0)
 . W ?40,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)
"RTN","BPSRPT5",27,0)
 . W ?52,BPREF,"/",$$ECMENUM^BPSRPT1($P(BPX,U,3))
"RTN","BPSRPT5",28,0)
 . W ?73,$$DATTIM^BPSRPT1(BPSRTDT)
"RTN","BPSRPT5",29,0)
 . W ?83,$$DATTIM^BPSRPT1(+BPX)
"RTN","BPSRPT5",30,0)
 . W ?96,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",31,0)
 . W ?99,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",32,0)
 . W ?103,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",33,0)
 . W ?105,$S($P(BPX,U):"/R",1:"/N")
"RTN","BPSRPT5",34,0)
 . W ?114,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",35,0)
 . W ?121,$S($$CLOSED02^BPSSCR03($P(^BPST($P(BPX,U,3),0),U,4))=1:"Closed",1:"Open")
"RTN","BPSRPT5",36,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT5",37,0)
 . W ?35,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)
"RTN","BPSRPT5",38,0)
 . W ?47,BPREF,"/",$$ECMENUM^BPSRPT1($P(BPX,U,3))
"RTN","BPSRPT5",39,0)
 . W ?68,$$DATTIM^BPSRPT1(BPSRTDT)
"RTN","BPSRPT5",40,0)
 . W ?100,$J(BPBIL,10,2),?122,$J(BPINS,10,2)
"RTN","BPSRPT5",41,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT5",42,0)
 . W ?35,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)
"RTN","BPSRPT5",43,0)
 . W ?47,BPREF,"/",$$ECMENUM^BPSRPT1($P(BPX,U,3))
"RTN","BPSRPT5",44,0)
 . W ?65,$$DATTIM^BPSRPT1($$TRANDT^BPSRPT2($P(BPX,U,3),1))
"RTN","BPSRPT5",45,0)
 . W ?83,$$TTYPE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)
"RTN","BPSRPT5",46,0)
 . W ?100,$$RESPONSE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)
"RTN","BPSRPT5",47,0)
 . W ?125,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",48,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT5",49,0)
 . N ELGCD S ELGCD=$$ELIGCODE^BPSSCR05($P(BPX,U,3))
"RTN","BPSRPT5",50,0)
 . W ?35,$S(ELGCD="V":"VET",ELGCD="T":"TRI",ELGCD="C":"CVA",1:"UNK")
"RTN","BPSRPT5",51,0)
 . W ?40,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)
"RTN","BPSRPT5",52,0)
 . W ?52,BPREF,"/",$$ECMENUM^BPSRPT1($P(BPX,U,3))
"RTN","BPSRPT5",53,0)
 . W ?70,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",54,0)
 . W ?73,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",55,0)
 . W ?77,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",56,0)
 . W ?79,$S($P(BPX,U):"/R",1:"/N")
"RTN","BPSRPT5",57,0)
 . W ?84,$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT5",58,0)
 . W ?92,$$DRGNAM^BPSRPT6($P(BPX,U,14),30)
"RTN","BPSRPT5",59,0)
 . W ?123,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",60,0)
 I BPRTYPE=8 D
"RTN","BPSRPT5",61,0)
 . W ?35,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)
"RTN","BPSRPT5",62,0)
 . W ?47,BPREF,"/",$$ECMENUM^BPSRPT1($P(BPX,U,3))
"RTN","BPSRPT5",63,0)
 . W ?68,$$DATTIM^BPSRPT1(BPSRTDT)
"RTN","BPSRPT5",64,0)
 . W ?78,$J(BPBIL,10,2),?100,$J(BPINS,10,2),?122,$S(BPCOLL]"":$J(BPCOLL,10,2),1:"")
"RTN","BPSRPT5",65,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT5",66,0)
 . N ELGCD S ELGCD=$P(BPX,U,1)
"RTN","BPSRPT5",67,0)
 . W ?35,$S(ELGCD="V":"VET",ELGCD="T":"TRI",ELGCD="C":"CVA",1:"UNK") ; Eligibility
"RTN","BPSRPT5",68,0)
 . W ?40,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)  ; RX and Copay indicator
"RTN","BPSRPT5",69,0)
 . W ?52,BPREF                     ; Refill
"RTN","BPSRPT5",70,0)
 . W ?64,$$DATTIM^BPSRPT1(BPSRTDT) ; Transaction Date
"RTN","BPSRPT5",71,0)
 . W ?84,$J($P(BPX,U,2),10,2)      ; Drug Cost
"RTN","BPSRPT5",72,0)
 Q
"RTN","BPSRPT5",73,0)
 ;
"RTN","BPSRPT5",74,0)
 ;Print Report Line 2
"RTN","BPSRPT5",75,0)
WRLINE2(BPRTYPE,BPREC,BPX,BPRX,BPREF,BPBIL,BPGRPLAN,BPEXCEL,BPICNT,BPPSEQ) ;
"RTN","BPSRPT5",76,0)
 ;Excel Output
"RTN","BPSRPT5",77,0)
 I $G(BPEXCEL) D WRLINE2^BPSRPT8(BPRTYPE,.BPREC,BPX,BPRX,BPREF,BPBIL,BPGRPLAN,BPPSEQ) Q
"RTN","BPSRPT5",78,0)
 ;Report Output
"RTN","BPSRPT5",79,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT5",80,0)
 . W !,?4,$$DRGNAM^BPSRPT6($P(BPX,U,14),27),?32,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",81,0)
 . I BPRTYPE=1 W ?47,$$DATTIM^BPSRPT1(+BPX)
"RTN","BPSRPT5",82,0)
 . W ?68,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",83,0)
 . W ?71,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",84,0)
 . W ?75,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",85,0)
 . W ?77,$S($P(BPX,U):"/R",1:"/N")
"RTN","BPSRPT5",86,0)
 . W ?82,$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT5",87,0)
 . I BPRTYPE=4 W ?92,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",88,0)
 . I BPRTYPE=1 W ?115,$$BILLCOB(BPRX,BPREF,BPPSEQ)
"RTN","BPSRPT5",89,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT5",90,0)
 . W !,?3,$E($$CRDHLDID^BPSRPT2(+$P(BPX,U,3)),3,23)
"RTN","BPSRPT5",91,0)
 . W ?31,$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)
"RTN","BPSRPT5",92,0)
 . W ?41,$J(BPBIL,10,2)
"RTN","BPSRPT5",93,0)
 . W ?54,$$QTY^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",94,0)
 . W ?61,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",95,0)
 . W ?82,$$DRGNAM^BPSRPT6($P(BPX,U,14),32)
"RTN","BPSRPT5",96,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT5",97,0)
 . W !,?4,$$DRGNAM^BPSRPT6($P(BPX,U,14),32)
"RTN","BPSRPT5",98,0)
 . W ?41,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",99,0)
 . W ?68,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",100,0)
 . W ?71,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",101,0)
 . W ?74,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",102,0)
 . W ?76,$S($P(BPX,U):"/R",1:"/N")
"RTN","BPSRPT5",103,0)
 . W ?81,$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT5",104,0)
 . W ?88,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",105,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT5",106,0)
 . W !,?4,$$DRGNAM^BPSRPT6($P(BPX,U,14),23)
"RTN","BPSRPT5",107,0)
 . W ?28,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",108,0)
 . W ?47,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",109,0)
 . W ?50,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",110,0)
 . W ?53,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",111,0)
 . W ?55,$S($P(BPX,U):"/R",1:"/N")
"RTN","BPSRPT5",112,0)
 . W ?60,$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT5",113,0)
 . I $P(BPGRPLAN,U,2)]"" W ?69,$E($P(BPGRPLAN,U,2),1,30)
"RTN","BPSRPT5",114,0)
 . W ?122,$J($$ELAPSE^BPSRPT6($P(BPX,U,3)),10)
"RTN","BPSRPT5",115,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT5",116,0)
 . W !,?3,$E($$CRDHLDID^BPSRPT2(+$P(BPX,U,3)),3,23)
"RTN","BPSRPT5",117,0)
 . W ?31,$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)
"RTN","BPSRPT5",118,0)
 . W ?41,$$DATTIM^BPSRPT1(+$$CLOSEDT^BPSRPT2(+$P(BPX,U,3)))
"RTN","BPSRPT5",119,0)
 . N BPCLBY S BPCLBY=$E($$CLSBY^BPSRPT6(+$P(BPX,U,3)),1,25) S:BPCLBY="" BPCLBY="BLANK"
"RTN","BPSRPT5",120,0)
 . W ?59,BPCLBY S BPCNT(BPCLBY)=$G(BPCNT(BPCLBY))+1,BPGCNT(BPCLBY)=$G(BPGCNT(BPCLBY))+1,BPICNT(BPCLBY)=$G(BPICNT(BPCLBY))+1
"RTN","BPSRPT5",121,0)
 . W ?87,$E($P($$CLRSN^BPSRPT7(+$P(BPX,U,3)),U,2),1,30)
"RTN","BPSRPT5",122,0)
 . W ?121,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",123,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT5",124,0)
 . W !,?2,$$DRGNAM^BPSRPT6($P(BPX,U,14),34)
"RTN","BPSRPT5",125,0)
 . W ?38,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",126,0)
 . W ?42,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",127,0)
 . W ?46,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",128,0)
 . W ?48,$S($P(BPX,U):"/R",1:"/N")
"RTN","BPSRPT5",129,0)
 . W ?54,$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)
"RTN","BPSRPT5",130,0)
 . W ?79,$E(BPGRPLAN,1,40)
"RTN","BPSRPT5",131,0)
 . W ?121,$$BILL^BPSRPT6(BPRX,BPREF,BPPSEQ)
"RTN","BPSRPT5",132,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT5",133,0)
 . W !,?4,$$DRGNAM^BPSRPT6($P(BPX,U,4),27) ;Drug
"RTN","BPSRPT5",134,0)
 . W ?32,$$GETNDC^BPSRPT6(BPRX,BPREF)  ;NDC
"RTN","BPSRPT5",135,0)
 . W ?47,$$DATTIM^BPSRPT1($P(BPX,U,5)) ;Release Date
"RTN","BPSRPT5",136,0)
 . W ?62,$$MWC^BPSRPT6(BPRX,BPREF)     ;Fill Location
"RTN","BPSRPT5",137,0)
 . W ?65,$$RXSTANAM^BPSSCRU2($P(BPX,U,6))  ;Status
"RTN","BPSRPT5",138,0)
 . W ?67,$S($P(BPX,U,5):"/R",1:"/N")   ;Released
"RTN","BPSRPT5",139,0)
 . W ?75,$E($$GET1^DIQ(366.17,$P(BPX,U,7),.01,"E"),1,57) ;Non-Billalble Reason - ICR 6136
"RTN","BPSRPT5",140,0)
 Q
"RTN","BPSRPT5",141,0)
 ;
"RTN","BPSRPT5",142,0)
 ;Print Report Line 3
"RTN","BPSRPT5",143,0)
WRLINE3(BPRTYPE,BPREC,BPX,BPEXCEL) N BP59,BPRICINF
"RTN","BPSRPT5",144,0)
 S BP59=+$P(BPX,U,3)
"RTN","BPSRPT5",145,0)
 ;Excel Output
"RTN","BPSRPT5",146,0)
 I $G(BPEXCEL) D WRLINE3^BPSRPT8(BPRTYPE,.BPREC,BPX) Q
"RTN","BPSRPT5",147,0)
 ;Report Output
"RTN","BPSRPT5",148,0)
 I BPRTYPE=4 D  Q
"RTN","BPSRPT5",149,0)
 . S NP=$$CHKP(1) Q:BPQ
"RTN","BPSRPT5",150,0)
 . ;Released On
"RTN","BPSRPT5",151,0)
 . W !,?6,$$DATTIM^BPSRPT1(+BPX)
"RTN","BPSRPT5",152,0)
 . ;Method
"RTN","BPSRPT5",153,0)
 . I $$AUTOREV^BPSRPT1(BP59) W ?22,"AUTO/"
"RTN","BPSRPT5",154,0)
 . E  W ?22,"REGULAR/"
"RTN","BPSRPT5",155,0)
 . ;Return Status
"RTN","BPSRPT5",156,0)
 . I $P(BPX,U,15)["ACCEPTED" W "ACCEPTED/"
"RTN","BPSRPT5",157,0)
 . E  W "REJECTED/"
"RTN","BPSRPT5",158,0)
 . ;Reason
"RTN","BPSRPT5",159,0)
 . W $$RVSRSN^BPSRPT7(+$P(BPX,U,3))
"RTN","BPSRPT5",160,0)
 ;
"RTN","BPSRPT5",161,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT5",162,0)
 . S BPRICINF=$$PRICEVAL(BP59)
"RTN","BPSRPT5",163,0)
 . W !,?4,$S($P(BPRICINF,U,3)]"":$P(BPRICINF,U,3),1:"N/A")
"RTN","BPSRPT5",164,0)
 . W ?23,$S($P(BPRICINF,U,4)]"":$P(BPRICINF,U,4),1:"N/A")
"RTN","BPSRPT5",165,0)
 . W ?38,$S($P(BPRICINF,U,5)]"":$P(BPRICINF,U,5),1:"N/A")
"RTN","BPSRPT5",166,0)
 . W ?56,$S($P(BPRICINF,U,6)]"":$P(BPRICINF,U,6),1:"N/A")
"RTN","BPSRPT5",167,0)
 . W ?81,$S($P(BPRICINF,U,7)]"":$P(BPRICINF,U,7),1:"N/A")
"RTN","BPSRPT5",168,0)
 . W ?96,$S($P(BPRICINF,U,2)]"":$P(BPRICINF,U,2),1:"N/A")
"RTN","BPSRPT5",169,0)
 . W ?111,$S($P(BPRICINF,U,1)]"":$P(BPRICINF,U,1),1:"N/A")
"RTN","BPSRPT5",170,0)
 ;
"RTN","BPSRPT5",171,0)
 Q
"RTN","BPSRPT5",172,0)
 ;
"RTN","BPSRPT5",173,0)
 ;Display the Report
"RTN","BPSRPT5",174,0)
REPORT(REF,BPEXCEL,BPSCR,BPRPTNAM,BPSUMDET,BPPAGE) ;
"RTN","BPSRPT5",175,0)
 N BPBIL,BPBLINE,BPCOLL,BPDFN,BPDIV,BPELTM,BPGELTM,BPGBIL,BPGINS,BPGCOLL,BPGCNT,BPGRPLAN,BPINS,BPLINES,BPREC,BPREF,BPRX,BPSRTDT,BPSTATUS,BPTBIL,BPTCOLL,BPTINS,BPX,BPSGTOT,NP,BPSDATA
"RTN","BPSRPT5",176,0)
 N BPPSEQ,BPBILINF,BPRICINF
"RTN","BPSRPT5",177,0)
 N BPGPRICE,BPG128,BPG129,BPG133,BPG134,BPG135,BPG136,BPG137
"RTN","BPSRPT5",178,0)
 N BPIPRICE,BPI128,BPI129,BPI133,BPI134,BPI135,BPI136,BPI137
"RTN","BPSRPT5",179,0)
 N BPTPRICE,BPT128,BPT129,BPT133,BPT134,BPT135,BPT136,BPT137
"RTN","BPSRPT5",180,0)
 I '$D(@REF) D HDR^BPSRPT7(BPRTYPE,BPRPTNAM,.BPPAGE) W !,"No data meets the criteria." G XREPORT
"RTN","BPSRPT5",181,0)
 S (BPGBIL,BPGINS,BPGCOLL,BPGCNT,BPGELTM,BPGPRICE,BPG128,BPG129,BPG133,BPG134,BPG135,BPG136,BPG137)=0
"RTN","BPSRPT5",182,0)
 S BPDIV="" F  S BPDIV=$O(@REF@(BPDIV)) Q:BPDIV=""  D  Q:BPQ
"RTN","BPSRPT5",183,0)
 .S BPGRPLAN=""
"RTN","BPSRPT5",184,0)
 .D HDR^BPSRPT7(BPRTYPE,BPRPTNAM,.BPPAGE)
"RTN","BPSRPT5",185,0)
 .N BPCNT S (BPTBIL,BPTINS,BPTCOLL,BPCNT,BPELTM,BPTPRICE,BPT128,BPT129,BPT133,BPT134,BPT135,BPT136,BPT137)=0
"RTN","BPSRPT5",186,0)
 .F  S BPGRPLAN=$O(@REF@(BPDIV,BPGRPLAN)) Q:BPGRPLAN=""  D  Q:BPQ
"RTN","BPSRPT5",187,0)
 .. I BPSUMDET=0 D WRPLAN(BPGRPLAN) Q:BPQ
"RTN","BPSRPT5",188,0)
 .. S BPBLINE=""  ;Reset Blank Line Indicator
"RTN","BPSRPT5",189,0)
 .. N BPSCLM,BPREC,BPTOT,BPIBIL,BPICNT,BPICOL,BPIINS
"RTN","BPSRPT5",190,0)
 .. S (BPIBIL,BPICNT,BPICOL,BPIINS,BPIPRICE,BPI128,BPI129,BPI133,BPI134,BPI135,BPI136,BPI137)=0
"RTN","BPSRPT5",191,0)
 .. S BPDFN="" F  S BPDFN=$O(@REF@(BPDIV,BPGRPLAN,BPDFN)) Q:BPDFN=""  D  Q:BPQ
"RTN","BPSRPT5",192,0)
 ... S BPSRTDT="" F  S BPSRTDT=$O(@REF@(BPDIV,BPGRPLAN,BPDFN,BPSRTDT)) Q:BPSRTDT=""  D  Q:BPQ
"RTN","BPSRPT5",193,0)
 .... S BPRX="" F  S BPRX=$O(@REF@(BPDIV,BPGRPLAN,BPDFN,BPSRTDT,BPRX)) Q:BPRX=""  D  Q:BPQ
"RTN","BPSRPT5",194,0)
 ..... S BPREF="" F  S BPREF=$O(@REF@(BPDIV,BPGRPLAN,BPDFN,BPSRTDT,BPRX,BPREF)) Q:BPREF=""  D  Q:BPQ
"RTN","BPSRPT5",195,0)
 ...... S BPX=@REF@(BPDIV,BPGRPLAN,BPDFN,BPSRTDT,BPRX,BPREF)
"RTN","BPSRPT5",196,0)
 ...... S BPCNT=BPCNT+1,BPGCNT=BPGCNT+1,BPICNT=BPICNT+1
"RTN","BPSRPT5",197,0)
 ...... S BPPSEQ=+$$COB59^BPSUTIL2($P(BPX,U,3))
"RTN","BPSRPT5",198,0)
 ...... I BPRTYPE=5 D
"RTN","BPSRPT5",199,0)
 ....... S BPELTM=BPELTM+$$ELAPSE^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",200,0)
 ....... S BPGELTM=BPGELTM+$$ELAPSE^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",201,0)
 ...... I BPRTYPE=9 D
"RTN","BPSRPT5",202,0)
 ....... S (BPBIL,BPINS,BPTINS,BPGINS,BPIINS,BPBILINF,BPCOLL,BPTCOLL,BPGCOLL,BPICOL)=""
"RTN","BPSRPT5",203,0)
 ....... S BPTBIL=BPTBIL+$P(BPX,U,2),BPGBIL=BPGBIL+$P(BPX,U,2),BPIBIL=BPIBIL+$P(BPX,U,2)
"RTN","BPSRPT5",204,0)
 ...... E  D
"RTN","BPSRPT5",205,0)
 ....... S BPBIL=$$BILLED^BPSRPT7($P(BPX,U,3)),BPTBIL=BPTBIL+BPBIL,BPGBIL=BPGBIL+BPBIL,BPIBIL=BPIBIL+BPBIL
"RTN","BPSRPT5",206,0)
 ....... S BPINS=$$INSPAID^BPSRPT2($P(BPX,U,3)),BPTINS=BPTINS+BPINS,BPGINS=BPGINS+BPINS,BPIINS=BPIINS+BPINS
"RTN","BPSRPT5",207,0)
 ....... S BPBILINF=$$COLLECTD^BPSRPT6(BPRX,BPREF,BPPSEQ)
"RTN","BPSRPT5",208,0)
 ....... S BPCOLL=+BPBILINF,BPTCOLL=BPTCOLL+BPCOLL,BPGCOLL=BPGCOLL+BPCOLL,BPICOL=BPICOL+BPCOLL
"RTN","BPSRPT5",209,0)
 ...... I BPRTYPE=6 D  Q
"RTN","BPSRPT5",210,0)
 ....... S BPSTATUS=$P(BPX,U,7)
"RTN","BPSRPT5",211,0)
 ....... I BPSTATUS["REJECT" S $P(BPSCLM(BPSRTDT),U,3)=$P($G(BPSCLM(BPSRTDT)),U,3)+BPBIL
"RTN","BPSRPT5",212,0)
 ....... I BPSTATUS["PAYABLE" S $P(BPSCLM(BPSRTDT),U,4)=$P($G(BPSCLM(BPSRTDT)),U,4)+BPBIL
"RTN","BPSRPT5",213,0)
 ....... S $P(BPSCLM(BPSRTDT),U,2)=$P($G(BPSCLM(BPSRTDT)),U,2)+BPBIL
"RTN","BPSRPT5",214,0)
 ....... S $P(BPSCLM(BPSRTDT),U,5)=$P($G(BPSCLM(BPSRTDT)),U,5)+BPINS
"RTN","BPSRPT5",215,0)
 ....... S $P(BPSCLM(BPSRTDT),U)=$P($G(BPSCLM(BPSRTDT)),U)+1
"RTN","BPSRPT5",216,0)
 ...... I BPRTYPE=8 D
"RTN","BPSRPT5",217,0)
 ....... ;Get Pricing Information for totals
"RTN","BPSRPT5",218,0)
 ....... S BPRICINF=$$PRICEVAL(+$P(BPX,U,3))
"RTN","BPSRPT5",219,0)
 ....... S BPI128=BPI128+$P($G(BPRICINF),U),BPI129=BPI129+$P($G(BPRICINF),U,2),BPI133=BPI133+$P($G(BPRICINF),U,3),BPI134=BPI134+$P($G(BPRICINF),U,4)
"RTN","BPSRPT5",220,0)
 ....... S BPI135=BPI135+$P($G(BPRICINF),U,5),BPI136=BPI136+$P($G(BPRICINF),U,6),BPI137=BPI137+$P($G(BPRICINF),U,7)
"RTN","BPSRPT5",221,0)
 ....... S BPT128=BPT128+$P($G(BPRICINF),U),BPT129=BPT129+$P($G(BPRICINF),U,2),BPT133=BPT133+$P($G(BPRICINF),U,3),BPT134=BPT134+$P($G(BPRICINF),U,4)
"RTN","BPSRPT5",222,0)
 ....... S BPT135=BPT135+$P($G(BPRICINF),U,5),BPT136=BPT136+$P($G(BPRICINF),U,6),BPT137=BPT137+$P($G(BPRICINF),U,7)
"RTN","BPSRPT5",223,0)
 ....... S BPG128=BPG128+$P($G(BPRICINF),U),BPG129=BPG129+$P($G(BPRICINF),U,2),BPG133=BPG133+$P($G(BPRICINF),U,3),BPG134=BPG134+$P($G(BPRICINF),U,4)
"RTN","BPSRPT5",224,0)
 ....... S BPG135=BPG135+$P($G(BPRICINF),U,5),BPG136=BPG136+$P($G(BPRICINF),U,6),BPG137=BPG137+$P($G(BPRICINF),U,7)
"RTN","BPSRPT5",225,0)
 ....... S BPIPRICE=BPI128_U_BPI129_U_BPI133_U_BPI134_U_BPI135_U_BPI136_U_BPI137
"RTN","BPSRPT5",226,0)
 ....... S BPTPRICE=BPT128_U_BPT129_U_BPT133_U_BPT134_U_BPT135_U_BPT136_U_BPT137
"RTN","BPSRPT5",227,0)
 ....... S BPGPRICE=BPG128_U_BPG129_U_BPG133_U_BPG134_U_BPG135_U_BPG136_U_BPG137
"RTN","BPSRPT5",228,0)
 ...... ;Display Detail Section
"RTN","BPSRPT5",229,0)
 ...... Q:BPSUMDET=1
"RTN","BPSRPT5",230,0)
 ...... S BPREC=""  ;Reset Excel Display Variable
"RTN","BPSRPT5",231,0)
 ...... I 'BPEXCEL,BPRTYPE=1,BPBLINE=1 S NP=$$CHKP(2) Q:BPQ  I BPBLINE=1 W !  ;Print blank line
"RTN","BPSRPT5",232,0)
 ...... S NP=$$CHKP(1) Q:BPQ  D WRLINE1(BPRTYPE,.BPREC,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT,BPBIL,BPINS,BPCOLL,BPEXCEL,BPPSEQ)
"RTN","BPSRPT5",233,0)
 ...... S NP=$$CHKP(1) Q:BPQ  D WRLINE2(BPRTYPE,.BPREC,BPX,BPRX,BPREF,BPBIL,BPGRPLAN,BPEXCEL,.BPICNT,BPPSEQ)
"RTN","BPSRPT5",234,0)
 ...... D WRLINE3(BPRTYPE,.BPREC,BPX,BPEXCEL)
"RTN","BPSRPT5",235,0)
 ...... I (",2,7,8")[BPRTYPE,'BPEXCEL D  Q:BPQ
"RTN","BPSRPT5",236,0)
 ....... D COMMENT(+$P(BPX,U,3)) Q:BPQ
"RTN","BPSRPT5",237,0)
 ....... S NP=$$CHKP(1) Q:BPQ
"RTN","BPSRPT5",238,0)
 ....... W !,?10,"Claim ID: ",$$CLAIMID^BPSRPT2(+$P(BPX,U,3))
"RTN","BPSRPT5",239,0)
 ....... N BPSARR,BPRJCNT,BPZZ S BPRJCNT=$$REJTEXT^BPSRPT2(+$P(BPX,U,3),.BPSARR)
"RTN","BPSRPT5",240,0)
 ....... F BPZZ=1:1:BPRJCNT S NP=$$CHKP(1) Q:BPQ  W !,?10,BPSARR(BPZZ) Q:BPQ
"RTN","BPSRPT5",241,0)
 ...... I 'BPEXCEL,BPRTYPE=1 S BPBLINE=1  ;Set Blank Line Display Indicator
"RTN","BPSRPT5",242,0)
 .. I BPRTYPE=6 D PTBDT^BPSRPT7(BPDIV,BPSUMDET,.BPSCLM,.BPSGTOT)
"RTN","BPSRPT5",243,0)
 .. I 'BPQ,(",1,2,3,4,7,8,9,")[BPRTYPE,'BPEXCEL S NP=$$CHKP(5) Q:BPQ  D ITOT^BPSRPT7(BPRTYPE,BPDIV,BPGRPLAN,BPIBIL,BPIINS,BPICOL,.BPICNT,BPIPRICE)
"RTN","BPSRPT5",244,0)
 .I 'BPEXCEL,'BPQ,BPRTYPE'=6 S NP=$$CHKP(5) Q:BPQ  D TOTALS^BPSRPT7(BPRTYPE,BPDIV,BPTBIL,BPTINS,BPTCOLL,.BPCNT,BPELTM,BPTPRICE)
"RTN","BPSRPT5",245,0)
 .I 'BPEXCEL,'BPQ,$O(@REF@(BPDIV))]"" D:$G(BPSCR) PAUSE^BPSRPT1 Q:BPQ
"RTN","BPSRPT5",246,0)
 ;Print Grand Totals
"RTN","BPSRPT5",247,0)
 I 'BPEXCEL D
"RTN","BPSRPT5",248,0)
 .I 'BPQ,BPRTYPE=6 D PGTOT6^BPSRPT7($G(BPSGTOT))
"RTN","BPSRPT5",249,0)
 .I 'BPQ,BPRTYPE'=6 S NP=$$CHKP(5) Q:BPQ  D PGTOT^BPSRPT7(BPRTYPE,BPGBIL,BPGINS,BPGCOLL,.BPGCNT,BPGELTM,BPGPRICE)
"RTN","BPSRPT5",250,0)
 ;
"RTN","BPSRPT5",251,0)
XREPORT Q
"RTN","BPSRPT5",252,0)
 ;
"RTN","BPSRPT5",253,0)
 ;Display Comments
"RTN","BPSRPT5",254,0)
 ;Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT5",255,0)
COMMENT(BP59) N CNODE,I,J,NP
"RTN","BPSRPT5",256,0)
 S I="" F  S I=$O(^BPST(BP59,11,"B",I),-1) Q:'I  D  Q:BPQ
"RTN","BPSRPT5",257,0)
 .S NP=$$CHKP(1) Q:BPQ
"RTN","BPSRPT5",258,0)
 .S J=$O(^BPST(BP59,11,"B",I,"")) Q:J=""
"RTN","BPSRPT5",259,0)
 .S CNODE=$G(^BPST(BP59,11,J,0))
"RTN","BPSRPT5",260,0)
 .W !,?10,$$DATTIM^BPSRPT1(+$P($P(CNODE,U),"."))," - ",$P(CNODE,U,3)
"RTN","BPSRPT5",261,0)
 Q
"RTN","BPSRPT5",262,0)
 ;
"RTN","BPSRPT5",263,0)
 ;Display the Insurance
"RTN","BPSRPT5",264,0)
 ; Input Variable -> BPSDATA -> if 0, skip page check
"RTN","BPSRPT5",265,0)
 ;                   BPEXCEL -> 1 - Print to Excel/0 Regular Display
"RTN","BPSRPT5",266,0)
WRPLAN(BPGRPLAN) N INS,NP
"RTN","BPSRPT5",267,0)
 ;
"RTN","BPSRPT5",268,0)
 I BPSUMDET'=0 Q
"RTN","BPSRPT5",269,0)
 I BPEXCEL Q
"RTN","BPSRPT5",270,0)
 ;Skip for Recent Transactions and Totals by Date Reports
"RTN","BPSRPT5",271,0)
 I BPRTYPE=5!(BPRTYPE=6) Q
"RTN","BPSRPT5",272,0)
 I $G(BPSDATA) S NP=$$CHKP(5) Q:BPQ!NP
"RTN","BPSRPT5",273,0)
 ;Get and display the Insurance Name
"RTN","BPSRPT5",274,0)
 S INS=$E(BPGRPLAN,1,90)
"RTN","BPSRPT5",275,0)
 I INS]"" D
"RTN","BPSRPT5",276,0)
 .D ULINE("-")
"RTN","BPSRPT5",277,0)
 .W !,INS
"RTN","BPSRPT5",278,0)
 .D ULINE("-")
"RTN","BPSRPT5",279,0)
 Q
"RTN","BPSRPT5",280,0)
 ;
"RTN","BPSRPT5",281,0)
 ;Check for End of Page
"RTN","BPSRPT5",282,0)
 ; Input variables -> BPLINES -> Number of lines from bottom
"RTN","BPSRPT5",283,0)
 ;                    BPEXCEL -> 1 - Print to Excel/0 Regular Display
"RTN","BPSRPT5",284,0)
 ; Output variable -> BPSDATA -> 0 -> New screen, no data displayed yet
"RTN","BPSRPT5",285,0)
 ;                               1 -> Data displayed on current screen
"RTN","BPSRPT5",286,0)
CHKP(BPLINES) Q:$G(BPEXCEL) 0
"RTN","BPSRPT5",287,0)
 S BPLINES=BPLINES+1
"RTN","BPSRPT5",288,0)
 I $G(BPSCR) S BPLINES=BPLINES+2
"RTN","BPSRPT5",289,0)
 I $G(BPSCR),'$G(BPSDATA) S BPSDATA=1 Q 0
"RTN","BPSRPT5",290,0)
 S BPSDATA=1
"RTN","BPSRPT5",291,0)
 I $Y>(IOSL-BPLINES) D:$G(BPSCR) PAUSE^BPSRPT1 Q:$G(BPQ) 0 D HDR^BPSRPT7(BPRTYPE,BPRPTNAM,.BPPAGE) Q 1
"RTN","BPSRPT5",292,0)
 Q 0
"RTN","BPSRPT5",293,0)
 ;
"RTN","BPSRPT5",294,0)
 ;Print one line of characters
"RTN","BPSRPT5",295,0)
ULINE(X) N I
"RTN","BPSRPT5",296,0)
 W ! F I=1:1:132 W $G(X,"-")
"RTN","BPSRPT5",297,0)
 Q
"RTN","BPSRPT5",298,0)
BILLCOB(BPRX,BPREF,BPPSEQ) ;
"RTN","BPSRPT5",299,0)
 N BPSBILL
"RTN","BPSRPT5",300,0)
 S BPSBILL=$$BILL^BPSRPT6(BPRX,BPREF,BPPSEQ)
"RTN","BPSRPT5",301,0)
 I BPSBILL="" Q ""
"RTN","BPSRPT5",302,0)
 Q $J(BPSBILL_"  "_$$RXCOB^BPSRPT8(BPPSEQ)_"  ",17)
"RTN","BPSRPT5",303,0)
 ;
"RTN","BPSRPT5",304,0)
PRICING(BP59) ; Check if the Spending Account Remaining field has non-zero data
"RTN","BPSRPT5",305,0)
 ; Returns: 1 if true, 0 if not
"RTN","BPSRPT5",306,0)
 N BPSRESP,BPSPOS
"RTN","BPSRPT5",307,0)
 D RESP59^BPSRPT2(BP59,.BPSRESP,.BPSPOS)
"RTN","BPSRPT5",308,0)
 Q:(BPSRESP="")!(BPSPOS="") 0
"RTN","BPSRPT5",309,0)
 I +$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,BPSPOS,120)),U,8)) Q 1
"RTN","BPSRPT5",310,0)
 Q 0
"RTN","BPSRPT5",311,0)
 ;
"RTN","BPSRPT5",312,0)
PRICEVAL(BP59) ;
"RTN","BPSRPT5",313,0)
 N BPSRESP,BPSPOS,RETV,BPS120,BPS130
"RTN","BPSRPT5",314,0)
 S RETV=0
"RTN","BPSRPT5",315,0)
 D RESP59^BPSRPT2(BP59,.BPSRESP,.BPSPOS)
"RTN","BPSRPT5",316,0)
 Q:(BPSRESP="")!(BPSPOS="") RETV
"RTN","BPSRPT5",317,0)
 S BPS120=$G(^BPSR(BPSRESP,1000,BPSPOS,120)),BPS130=$G(^BPSR(BPSRESP,1000,BPSPOS,130))
"RTN","BPSRPT5",318,0)
 S RETV=$$DFF2EXT^BPSECFM($P($G(BPS120),U,8))_U_$$DFF2EXT^BPSECFM($P($G(BPS120),U,9))_U_$$DFF2EXT^BPSECFM($P($G(BPS130),U,3))_U_$$DFF2EXT^BPSECFM($P($G(BPS130),U,4))
"RTN","BPSRPT5",319,0)
 S RETV=RETV_U_$$DFF2EXT^BPSECFM($P($G(BPS130),U,5))_U_$$DFF2EXT^BPSECFM($P($G(BPS130),U,6))_U_$$DFF2EXT^BPSECFM($P($G(BPS130),U,7))
"RTN","BPSRPT5",320,0)
 Q RETV
"RTN","BPSRPT5",321,0)
 ;
"RTN","BPSRPT7")
0^6^B164190587
"RTN","BPSRPT7",1,0)
BPSRPT7 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT7",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8,10,11,19**;JUN 2004;Build 18
"RTN","BPSRPT7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT7",4,0)
 ;
"RTN","BPSRPT7",5,0)
 Q
"RTN","BPSRPT7",6,0)
 ;
"RTN","BPSRPT7",7,0)
 ;Routine to Display the Reports (Continued)
"RTN","BPSRPT7",8,0)
 ;
"RTN","BPSRPT7",9,0)
 ; Input Variables -> BPCLM = Array of report data by date
"RTN","BPSRPT7",10,0)
 ;                   BPDIV,BPSUMDET,GTOT
"RTN","BPSRPT7",11,0)
 ; Returned Value -> Cumulative Grand Totals
"RTN","BPSRPT7",12,0)
 ; 
"RTN","BPSRPT7",13,0)
PTBDT(BPDIV,BPSUMDET,BPCLM,GTOT) N DIFF,I,NP,RDT,TOT,X
"RTN","BPSRPT7",14,0)
 ;
"RTN","BPSRPT7",15,0)
 ;Loop through compiled array and display
"RTN","BPSRPT7",16,0)
 S TOT=""
"RTN","BPSRPT7",17,0)
 S RDT="" F  S RDT=$O(BPCLM(RDT)) Q:RDT=""  D  Q:BPQ
"RTN","BPSRPT7",18,0)
 .S NP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",19,0)
 .S X=$G(BPCLM(RDT))
"RTN","BPSRPT7",20,0)
 .;
"RTN","BPSRPT7",21,0)
 .;Print Details - Report
"RTN","BPSRPT7",22,0)
 .I BPSUMDET=0,'BPEXCEL D
"RTN","BPSRPT7",23,0)
 ..W !,$$DATTIM^BPSRPT1(RDT) ;Date
"RTN","BPSRPT7",24,0)
 ..W ?15,$J(+$P(X,U),17) ;#Claims
"RTN","BPSRPT7",25,0)
 ..W ?33,$J(+$P(X,U,2),17,2)  ;Amount Submitted
"RTN","BPSRPT7",26,0)
 ..W ?51,$J(+$P(X,U,3),17,2)  ;Returned Rejected
"RTN","BPSRPT7",27,0)
 ..W ?69,$J(+$P(X,U,4),17,2)  ;Returned Payable
"RTN","BPSRPT7",28,0)
 ..W ?87,$J(+$P(X,U,5),17,2)  ;Amount to Receive
"RTN","BPSRPT7",29,0)
 ..;
"RTN","BPSRPT7",30,0)
 ..;Difference
"RTN","BPSRPT7",31,0)
 ..S DIFF=+$P(X,U,4)-$P(X,U,5)
"RTN","BPSRPT7",32,0)
 ..I DIFF<0 S DIFF="<"_$TR($J(-DIFF,15,2)," ")_">" W ?117,$J(DIFF,15)
"RTN","BPSRPT7",33,0)
 ..E  W ?116,$J(DIFF,15,2)
"RTN","BPSRPT7",34,0)
 ..;
"RTN","BPSRPT7",35,0)
 ..;Print Details - Excel
"RTN","BPSRPT7",36,0)
 .I BPSUMDET=0,BPEXCEL D
"RTN","BPSRPT7",37,0)
 ..;
"RTN","BPSRPT7",38,0)
 ..;Division
"RTN","BPSRPT7",39,0)
 ..W !,$S(BPDIV=0:"BLANK",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV),U
"RTN","BPSRPT7",40,0)
 ..W $$DATTIM^BPSRPT1(RDT),U  ;Date
"RTN","BPSRPT7",41,0)
 ..W +$P(X,U),U ;#Claims
"RTN","BPSRPT7",42,0)
 ..W $TR($J(+$P(X,U,2),17,2)," "),U  ;Amount Submitted
"RTN","BPSRPT7",43,0)
 ..W $TR($J(+$P(X,U,3),17,2)," "),U  ;Returned Rejected
"RTN","BPSRPT7",44,0)
 ..W $TR($J(+$P(X,U,4),17,2)," "),U  ;Returned Payable
"RTN","BPSRPT7",45,0)
 ..W $TR($J(+$P(X,U,5),17,2)," "),U  ;Amount to Receive
"RTN","BPSRPT7",46,0)
 ..;
"RTN","BPSRPT7",47,0)
 ..;Difference
"RTN","BPSRPT7",48,0)
 ..S DIFF=+$P(X,U,4)-$P(X,U,5)
"RTN","BPSRPT7",49,0)
 ..W $TR($J(DIFF,15,2)," ")
"RTN","BPSRPT7",50,0)
 .;
"RTN","BPSRPT7",51,0)
 .;Save Totals
"RTN","BPSRPT7",52,0)
 .F I=1:1:5 S $P(TOT,U,I)=$P(TOT,U,I)+$P(X,U,I),$P(GTOT,U,I)=$P($G(GTOT),U,I)+$P(X,U,I)
"RTN","BPSRPT7",53,0)
 ;
"RTN","BPSRPT7",54,0)
 ;Print Totals
"RTN","BPSRPT7",55,0)
 Q:BPEXCEL
"RTN","BPSRPT7",56,0)
 Q:BPQ  S NP=$$CHKP^BPSRPT5(2) Q:BPQ
"RTN","BPSRPT7",57,0)
 D ULINE^BPSRPT5("-")
"RTN","BPSRPT7",58,0)
 W !,"TOTALS"
"RTN","BPSRPT7",59,0)
 W ?15,$J(+$P(TOT,U),17)
"RTN","BPSRPT7",60,0)
 W ?33,$J(+$P(TOT,U,2),17,2)
"RTN","BPSRPT7",61,0)
 W ?51,$J(+$P(TOT,U,3),17,2)
"RTN","BPSRPT7",62,0)
 W ?69,$J(+$P(TOT,U,4),17,2)
"RTN","BPSRPT7",63,0)
 W ?87,$J(+$P(TOT,U,5),17,2)
"RTN","BPSRPT7",64,0)
 S X=$S((+$P(TOT,U,4))=0:0,1:(+$P(TOT,U,5))/(+$P(TOT,U,4)))
"RTN","BPSRPT7",65,0)
 S DIFF=+$P(TOT,U,4)-$P(TOT,U,5)
"RTN","BPSRPT7",66,0)
 I DIFF<0 S DIFF="<"_$TR($J(-DIFF,15,2)," ")_">" W ?117,$J(DIFF,15)
"RTN","BPSRPT7",67,0)
 E  W ?116,$J(DIFF,15,2)
"RTN","BPSRPT7",68,0)
 Q
"RTN","BPSRPT7",69,0)
 ;
"RTN","BPSRPT7",70,0)
 ;Print Grand Totals - Report 6
"RTN","BPSRPT7",71,0)
 ;
"RTN","BPSRPT7",72,0)
PGTOT6(GTOT) N DIFF,NP,X
"RTN","BPSRPT7",73,0)
 Q:BPQ  S NP=$$CHKP^BPSRPT5(2) Q:BPQ
"RTN","BPSRPT7",74,0)
 D ULINE^BPSRPT5("-")
"RTN","BPSRPT7",75,0)
 W !,"GRAND TOTALS"
"RTN","BPSRPT7",76,0)
 W ?15,$J(+$P(GTOT,U),17)
"RTN","BPSRPT7",77,0)
 W ?33,$J(+$P(GTOT,U,2),17,2)
"RTN","BPSRPT7",78,0)
 W ?51,$J(+$P(GTOT,U,3),17,2)
"RTN","BPSRPT7",79,0)
 W ?69,$J(+$P(GTOT,U,4),17,2)
"RTN","BPSRPT7",80,0)
 W ?87,$J(+$P(GTOT,U,5),17,2)
"RTN","BPSRPT7",81,0)
 S X=$S((+$P(GTOT,U,4))=0:0,1:(+$P(GTOT,U,5))/(+$P(GTOT,U,4)))
"RTN","BPSRPT7",82,0)
 S DIFF=+$P(GTOT,U,4)-$P(GTOT,U,5)
"RTN","BPSRPT7",83,0)
 I DIFF<0 S DIFF="<"_$TR($J(-DIFF,15,2)," ")_">" W ?117,$J(DIFF,15)
"RTN","BPSRPT7",84,0)
 E  W ?116,$J(DIFF,15,2)
"RTN","BPSRPT7",85,0)
 Q
"RTN","BPSRPT7",86,0)
 ;
"RTN","BPSRPT7",87,0)
 ;Print Grand Totals - Reports 1,2,3,4,5,7,8,9
"RTN","BPSRPT7",88,0)
 ;
"RTN","BPSRPT7",89,0)
PGTOT(BPRTYPE,BPGBIL,BPGINS,BPGCOLL,BPGCNT,BPGELTM,BPRICE) ;
"RTN","BPSRPT7",90,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT7",91,0)
 .W !!,?83,"----------",?105,"----------",?122,"----------"
"RTN","BPSRPT7",92,0)
 .W !,"GRAND TOTALS",?83,$J(BPGBIL,10,2),?105,$J(BPGINS,10,2),?122,$J(BPGCOLL,10,2)
"RTN","BPSRPT7",93,0)
 .W !,"COUNT",?83,$J(BPGCNT,10),?105,$J(BPGCNT,10),?122,$J(BPGCNT,10)
"RTN","BPSRPT7",94,0)
 .W:BPGCNT !,"MEAN",?83,$J(BPGBIL/BPGCNT,10,2),?105,$J(BPGINS/BPGCNT,10,2),?122,$J(BPGCOLL/BPGCNT,10,2)
"RTN","BPSRPT7",95,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT7",96,0)
 .W !!,?100,"----------",?122,"----------"
"RTN","BPSRPT7",97,0)
 .W !,"GRAND TOTALS",?100,$J(BPGBIL,10,2),?122,$J(BPGINS,10,2)
"RTN","BPSRPT7",98,0)
 .W !,"COUNT",?100,$J(BPGCNT,10),?122,$J(BPGCNT,10)
"RTN","BPSRPT7",99,0)
 .W:BPGCNT !,"MEAN",?100,$J(BPGBIL/BPGCNT,10,2),?122,$J(BPGINS/BPGCNT,10,2)
"RTN","BPSRPT7",100,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT7",101,0)
 .W !!,?41,"----------"
"RTN","BPSRPT7",102,0)
 .W !,"GRAND TOTALS",?41,$J(BPGBIL,10,2)
"RTN","BPSRPT7",103,0)
 .W !,"COUNT",?41,$J(BPGCNT,10)
"RTN","BPSRPT7",104,0)
 .W:BPGCNT !,"MEAN",?41,$J(BPGBIL/BPGCNT,10,2)
"RTN","BPSRPT7",105,0)
 I (BPRTYPE=5) D  Q
"RTN","BPSRPT7",106,0)
 .W !!,"GRAND TOTALS (ALL DIVISIONS)",?65,"---------------"
"RTN","BPSRPT7",107,0)
 .W !,"TOTAL CLAIMS",?65,$J(BPGCNT,15)
"RTN","BPSRPT7",108,0)
 .W !,"AVERAGE ELAPSED TIME PER CLAIM",?65,$J($S(BPGCNT=0:"0",1:(BPGELTM\BPGCNT)),15)
"RTN","BPSRPT7",109,0)
 I (BPRTYPE=7) D  Q
"RTN","BPSRPT7",110,0)
 .W !!,"GRAND TOTALS (ALL DIVISIONS) BY BILLER"
"RTN","BPSRPT7",111,0)
 .N BPBILR,BPDIV S BPDIV="ALL DIVISIONS"
"RTN","BPSRPT7",112,0)
 .S BPBILR="" F  S BPBILR=$O(BPGCNT(BPBILR)) Q:BPBILR=""  D  Q:BPQ
"RTN","BPSRPT7",113,0)
 ..S NP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",114,0)
 ..W !,?3,BPBILR,?65,$J($G(BPGCNT(BPBILR)),5)
"RTN","BPSRPT7",115,0)
 .Q:$G(BPQ)
"RTN","BPSRPT7",116,0)
 .W !,?65,"-----"
"RTN","BPSRPT7",117,0)
 .W !,"CLOSED CLAIMS GRAND TOTAL",?65,$J(BPGCNT,5)
"RTN","BPSRPT7",118,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT7",119,0)
 .W !!,?78,"----------",?100,"----------",?122,"----------"
"RTN","BPSRPT7",120,0)
 .W !,"GRAND TOTALS",?78,$J(BPGBIL,10,2),?100,$J(BPGINS,10,2),?122,$J(BPGCOLL,10,2)
"RTN","BPSRPT7",121,0)
 .W !,?4,$J($P(BPRICE,U,3),10,2),?23,$J($P(BPRICE,U,4),10,2),?38,$J($P(BPRICE,U,5),10,2),?56,$J($P(BPRICE,U,6),10,2),?81,$J($P(BPRICE,U,7),10,2),?96,$J($P(BPRICE,U,2),10,2),?111,$J($P(BPRICE,U),10,2)
"RTN","BPSRPT7",122,0)
 .W !,"COUNT",?78,$J(BPGCNT,10),?100,$J(BPGCNT,10),?122,$J(BPGCNT,10)
"RTN","BPSRPT7",123,0)
 .W !,?4,$J(BPGCNT,10),?23,$J(BPGCNT,10),?38,$J(BPGCNT,10),?56,$J(BPGCNT,10),?81,$J(BPGCNT,10),?96,$J(BPGCNT,10),?111,$J(BPGCNT,10)
"RTN","BPSRPT7",124,0)
 .W:BPGCNT !,"MEAN",?78,$J(BPGBIL/BPGCNT,10,2),?100,$J(BPGINS/BPGCNT,10,2),?122,$J(BPGCOLL/BPGCNT,10,2)
"RTN","BPSRPT7",125,0)
 .W !,?4,$J($P(BPRICE,U,3)/BPGCNT,10,2),?23,$J($P(BPRICE,U,4)/BPGCNT,10,2),?38,$J($P(BPRICE,U,5)/BPGCNT,10,2)
"RTN","BPSRPT7",126,0)
 .W ?56,$J($P(BPRICE,U,6)/BPGCNT,10,2),?81,$J($P(BPRICE,U,7)/BPGCNT,10,2),?96,$J($P(BPRICE,U,2)/BPGCNT,10,2),?111,$J($P(BPRICE,U)/BPGCNT,10,2)
"RTN","BPSRPT7",127,0)
 ;
"RTN","BPSRPT7",128,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT7",129,0)
 .W !!,?84,"----------"
"RTN","BPSRPT7",130,0)
 .W !,"GRAND TOTALS",?84,$J(BPGBIL,10,2)
"RTN","BPSRPT7",131,0)
 .W !,"COUNT",?84,$J(BPGCNT,10)
"RTN","BPSRPT7",132,0)
 .W:BPGCNT !,"MEAN",?84,$J(BPGBIL/BPGCNT,10,2)
"RTN","BPSRPT7",133,0)
 Q
"RTN","BPSRPT7",134,0)
 ;
"RTN","BPSRPT7",135,0)
 ;Print Report Insurance Subtotals
"RTN","BPSRPT7",136,0)
 ;
"RTN","BPSRPT7",137,0)
ITOT(BPRTYPE,BPDIV,BPGRPLAN,BPTBIL,BPTINS,BPTCOLL,BPCNT,BPRICE) N BPNP
"RTN","BPSRPT7",138,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT7",139,0)
 .W !!,?83,"----------",?105,"----------",?122,"----------"
"RTN","BPSRPT7",140,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?83,$J(BPTBIL,10,2),?105,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT7",141,0)
 .W !,"COUNT",?83,$J(BPCNT,10),?105,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",142,0)
 .W:BPCNT !,"MEAN",?83,$J(BPTBIL/BPCNT,10,2),?105,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT7",143,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT7",144,0)
 .W !!,?100,"----------",?122,"----------"
"RTN","BPSRPT7",145,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?100,$J(BPTBIL,10,2),?122,$J(BPTINS,10,2)
"RTN","BPSRPT7",146,0)
 .W !,"COUNT",?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",147,0)
 .W:BPCNT !,"MEAN",?100,$J(BPTBIL/BPCNT,10,2),?122,$J(BPTINS/BPCNT,10,2)
"RTN","BPSRPT7",148,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT7",149,0)
 .W !!,?41,"----------"
"RTN","BPSRPT7",150,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,22),?41,$J(BPTBIL,10,2)
"RTN","BPSRPT7",151,0)
 .W !,"COUNT",?41,$J(BPCNT,10)
"RTN","BPSRPT7",152,0)
 .W:BPCNT !,"MEAN",?41,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT7",153,0)
 I (BPRTYPE=7) D  Q
"RTN","BPSRPT7",154,0)
 .W !!,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50)
"RTN","BPSRPT7",155,0)
 .N BPBILR
"RTN","BPSRPT7",156,0)
 .S BPBILR="" F  S BPBILR=$O(BPCNT(BPBILR)) Q:BPBILR=""  D  Q:BPQ
"RTN","BPSRPT7",157,0)
 ..S BPNP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",158,0)
 ..W !,?3,BPBILR,?65,$J($G(BPCNT(BPBILR)),5)
"RTN","BPSRPT7",159,0)
 .Q:$G(BPQ)
"RTN","BPSRPT7",160,0)
 .W !,?65,"-----"
"RTN","BPSRPT7",161,0)
 .W !,"CLOSED CLAIMS SUBTOTAL",?65,$J(BPCNT,5)
"RTN","BPSRPT7",162,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT7",163,0)
 .W !!,?78,"----------",?100,"----------",?122,"----------"
"RTN","BPSRPT7",164,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?78,$J(BPTBIL,10,2),?100,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT7",165,0)
 .W !,?4,$J($P(BPRICE,U,3),10,2),?23,$J($P(BPRICE,U,4),10,2),?38,$J($P(BPRICE,U,5),10,2),?56,$J($P(BPRICE,U,6),10,2),?81,$J($P(BPRICE,U,7),10,2),?96,$J($P(BPRICE,U,2),10,2),?111,$J($P(BPRICE,U),10,2)
"RTN","BPSRPT7",166,0)
 .W !,"COUNT",?78,$J(BPCNT,10),?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",167,0)
 .W !,?4,$J(BPCNT,10),?23,$J(BPCNT,10),?38,$J(BPCNT,10),?56,$J(BPCNT,10),?81,$J(BPCNT,10),?96,$J(BPCNT,10),?111,$J(BPCNT,10)
"RTN","BPSRPT7",168,0)
 .W:BPCNT !,"MEAN",?78,$J(BPTBIL/BPCNT,10,2),?100,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT7",169,0)
 .W !,?4,$J($P(BPRICE,U,3)/BPCNT,10,2),?23,$J($P(BPRICE,U,4)/BPCNT,10,2),?38,$J($P(BPRICE,U,5)/BPCNT,10,2),?56,$J($P(BPRICE,U,6)/BPCNT,10,2),?81,$J($P(BPRICE,U,7)/BPCNT,10,2),?96,$J($P(BPRICE,U,2)/BPCNT,10,2),?111,$J($P(BPRICE,U)/BPCNT,10,2)
"RTN","BPSRPT7",170,0)
 ;
"RTN","BPSRPT7",171,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT7",172,0)
 .W !!,?84,"----------"
"RTN","BPSRPT7",173,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?84,$J(BPTBIL,10,2)
"RTN","BPSRPT7",174,0)
 .W !,"COUNT",?84,$J(BPCNT,10)
"RTN","BPSRPT7",175,0)
 .W:BPCNT !,"MEAN",?84,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT7",176,0)
 Q
"RTN","BPSRPT7",177,0)
 ;
"RTN","BPSRPT7",178,0)
 ;Get Close Reason
"RTN","BPSRPT7",179,0)
 ;
"RTN","BPSRPT7",180,0)
 ; Input Variable -> BP59 = ptr to BPS TRANSACTIONS
"RTN","BPSRPT7",181,0)
 ; Returned Value -> Claim Close Reason
"RTN","BPSRPT7",182,0)
 ;
"RTN","BPSRPT7",183,0)
CLRSN(BP59) N BP02,CIEN,CL
"RTN","BPSRPT7",184,0)
 S CL=""
"RTN","BPSRPT7",185,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT7",186,0)
 S CIEN=+$P($G(^BPSC(BP02,900)),U,4)
"RTN","BPSRPT7",187,0)
 I CIEN'=0 S CL=$$GETCLR^BPSRPT6(CIEN)
"RTN","BPSRPT7",188,0)
 Q CIEN_"^"_CL
"RTN","BPSRPT7",189,0)
 ;
"RTN","BPSRPT7",190,0)
 ;Get Reversal Reason
"RTN","BPSRPT7",191,0)
 ;
"RTN","BPSRPT7",192,0)
 ; Input Variable -> BP59 = ptr to BPS TRANSACTIONS
"RTN","BPSRPT7",193,0)
 ; Returned Value -> Claim Reversal Reason
"RTN","BPSRPT7",194,0)
 ;
"RTN","BPSRPT7",195,0)
RVSRSN(BP59) Q $P($G(^BPST(BP59,4)),U,4)
"RTN","BPSRPT7",196,0)
 ;
"RTN","BPSRPT7",197,0)
 ;Return the Billed Amount
"RTN","BPSRPT7",198,0)
 ;
"RTN","BPSRPT7",199,0)
BILLED(BP59) ;
"RTN","BPSRPT7",200,0)
 Q +$P($G(^BPST(BP59,5)),U,5)
"RTN","BPSRPT7",201,0)
 ;
"RTN","BPSRPT7",202,0)
 ;Return the Transaction Type - SUBMIT or REVERSAL
"RTN","BPSRPT7",203,0)
 ;
"RTN","BPSRPT7",204,0)
TTYPE(BPRX,BPREF,BPSEQ) N BPSTATUS,TTYPE
"RTN","BPSRPT7",205,0)
 S TTYPE="SUBMIT"
"RTN","BPSRPT7",206,0)
 S BPSTATUS=$$STATUS^BPSRPT6(BPRX,BPREF,$G(BPSEQ))
"RTN","BPSRPT7",207,0)
 I BPSTATUS["REVERSAL" S TTYPE="REVERSAL"
"RTN","BPSRPT7",208,0)
 Q TTYPE
"RTN","BPSRPT7",209,0)
 ;
"RTN","BPSRPT7",210,0)
 ;Return the payer response
"RTN","BPSRPT7",211,0)
 ;
"RTN","BPSRPT7",212,0)
RESPONSE(BPRX,BPREF,BPSEQ) Q $P($$STATUS^BPSRPT6(BPRX,BPREF,$G(BPSEQ)),U)
"RTN","BPSRPT7",213,0)
 ;
"RTN","BPSRPT7",214,0)
 ;Print Report Subtotals
"RTN","BPSRPT7",215,0)
 ;
"RTN","BPSRPT7",216,0)
TOTALS(BPRTYPE,BPDIV,BPTBIL,BPTINS,BPTCOLL,BPCNT,BPELTM,BPRICE) ;
"RTN","BPSRPT7",217,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT7",218,0)
 .W !!,?83,"----------",?105,"----------",?122,"----------"
"RTN","BPSRPT7",219,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?83,$J(BPTBIL,10,2),?105,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT7",220,0)
 .W !,"COUNT",?83,$J(BPCNT,10),?105,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",221,0)
 .W:BPCNT !,"MEAN",?83,$J(BPTBIL/BPCNT,10,2),?105,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT7",222,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT7",223,0)
 .W !!,?100,"----------",?122,"----------"
"RTN","BPSRPT7",224,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?100,$J(BPTBIL,10,2),?122,$J(BPTINS,10,2)
"RTN","BPSRPT7",225,0)
 .W !,"COUNT",?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",226,0)
 .W:BPCNT !,"MEAN",?100,$J(BPTBIL/BPCNT,10,2),?122,$J(BPTINS/BPCNT,10,2)
"RTN","BPSRPT7",227,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT7",228,0)
 .W !!,?41,"----------"
"RTN","BPSRPT7",229,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,22),?41,$J(BPTBIL,10,2)
"RTN","BPSRPT7",230,0)
 .W !,"COUNT",?41,$J(BPCNT,10)
"RTN","BPSRPT7",231,0)
 .W:BPCNT !,"MEAN",?41,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT7",232,0)
 I (BPRTYPE=5) D  Q
"RTN","BPSRPT7",233,0)
 .W !!,"SUBTOTALS for DIV: ",$E($$BPDIV(BPDIV),1,43),?65,"---------------"
"RTN","BPSRPT7",234,0)
 .W !,"TOTAL CLAIMS",?65,$J(BPCNT,15)
"RTN","BPSRPT7",235,0)
 .W !,"AVERAGE ELAPSED TIME PER CLAIM",?65,$J($S(BPCNT=0:"0",1:(BPELTM\BPCNT)),15)
"RTN","BPSRPT7",236,0)
 I (BPRTYPE=7) D  Q
"RTN","BPSRPT7",237,0)
 .W !!,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,43)
"RTN","BPSRPT7",238,0)
 .N BPBILR
"RTN","BPSRPT7",239,0)
 .S BPBILR="" F  S BPBILR=$O(BPCNT(BPBILR)) Q:BPBILR=""  D  Q:BPQ
"RTN","BPSRPT7",240,0)
 ..S NP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",241,0)
 ..W !,?3,BPBILR,?65,$J($G(BPCNT(BPBILR)),5)
"RTN","BPSRPT7",242,0)
 .Q:$G(BPQ)
"RTN","BPSRPT7",243,0)
 .W !,?65,"-----"
"RTN","BPSRPT7",244,0)
 .W !,"CLOSED CLAIMS SUBTOTAL",?65,$J(BPCNT,5)
"RTN","BPSRPT7",245,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT7",246,0)
 .W !!,?78,"----------",?100,"----------",?122,"----------"
"RTN","BPSRPT7",247,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?78,$J(BPTBIL,10,2),?100,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT7",248,0)
 .W !,?4,$J($P(BPRICE,U,3),10,2),?23,$J($P(BPRICE,U,4),10,2),?38,$J($P(BPRICE,U,5),10,2),?56,$J($P(BPRICE,U,6),10,2),?81,$J($P(BPRICE,U,7),10,2),?96,$J($P(BPRICE,U,2),10,2),?111,$J($P(BPRICE,U),10,2)
"RTN","BPSRPT7",249,0)
 .W !,"COUNT",?78,$J(BPCNT,10),?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",250,0)
 .W !,?4,$J(BPCNT,10),?23,$J(BPCNT,10),?38,$J(BPCNT,10),?56,$J(BPCNT,10),?81,$J(BPCNT,10),?96,$J(BPCNT,10),?111,$J(BPCNT,10)
"RTN","BPSRPT7",251,0)
 .W:BPCNT !,"MEAN",?78,$J(BPTBIL/BPCNT,10,2),?100,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT7",252,0)
 .W !,?4,$J($P(BPRICE,U,3)/BPCNT,10,2),?23,$J($P(BPRICE,U,4)/BPCNT,10,2),?38,$J($P(BPRICE,U,5)/BPCNT,10,2),?56,$J($P(BPRICE,U,6)/BPCNT,10,2),?81,$J($P(BPRICE,U,7)/BPCNT,10,2),?96,$J($P(BPRICE,U,2)/BPCNT,10,2),?111,$J($P(BPRICE,U)/BPCNT,10,2)
"RTN","BPSRPT7",253,0)
 ;
"RTN","BPSRPT7",254,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT7",255,0)
 .W !!,?84,"----------"
"RTN","BPSRPT7",256,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?84,$J(BPTBIL,10,2)
"RTN","BPSRPT7",257,0)
 .W !,"COUNT",?84,$J(BPCNT,10)
"RTN","BPSRPT7",258,0)
 .W:BPCNT !,"MEAN",?84,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT7",259,0)
 Q
"RTN","BPSRPT7",260,0)
 ;
"RTN","BPSRPT7",261,0)
 ;Print Report Header
"RTN","BPSRPT7",262,0)
 ; Input variables (defined in BPSRPT0) - BPPHARM,BPSUMDET,BPNOW,BPMWC,BPRTBCK,BPINSINF
"RTN","BPSRPT7",263,0)
 ;                                        BPREJCD,BPCCRSN,BPAUTREV,BPACREJ,BPQSTDRG
"RTN","BPSRPT7",264,0)
 ;                                        BPDRUG,BPDRGCL,BPRLNRL,BPSORT,BPBEGDT,BPENDDT
"RTN","BPSRPT7",265,0)
 ; Output variable - BPSDATA -> Reset to 0 to show no actual data has been printed
"RTN","BPSRPT7",266,0)
 ;                           on the screen
"RTN","BPSRPT7",267,0)
 ;                   BPPAGE -> First set in BPSRPT0
"RTN","BPSRPT7",268,0)
 ;                   BPBLINE -> Controls whether to print a blank line
"RTN","BPSRPT7",269,0)
 ;                   
"RTN","BPSRPT7",270,0)
HDR(BPRTYPE,BPRPTNAM,BPPAGE) ;
"RTN","BPSRPT7",271,0)
 ;Display Excel Header
"RTN","BPSRPT7",272,0)
 I BPEXCEL D HDR^BPSRPT8(BPRTYPE) Q
"RTN","BPSRPT7",273,0)
 ;
"RTN","BPSRPT7",274,0)
 ; Define BPPDATA - Tells whether data has been displayed for a screen
"RTN","BPSRPT7",275,0)
 S BPSDATA=0
"RTN","BPSRPT7",276,0)
 S BPBLINE=""
"RTN","BPSRPT7",277,0)
 S BPPAGE=$G(BPPAGE)+1
"RTN","BPSRPT7",278,0)
 W @IOF
"RTN","BPSRPT7",279,0)
 W "ECME "_BPRPTNAM_" "_$S(BPSUMDET=1:"SUMMARY",1:"DETAIL")_" REPORT"
"RTN","BPSRPT7",280,0)
 W ?89,"Print Date: "_$G(BPNOW)_"  Page:",$J(BPPAGE,3)
"RTN","BPSRPT7",281,0)
 W !,"DIVISION(S): ",$$GETDIVS^BPSRPT4(75,.BPPHARM)
"RTN","BPSRPT7",282,0)
 W ?89,"Fill Locations: "_$S(BPMWC="A":"C,M,W",1:BPMWC)
"RTN","BPSRPT7",283,0)
 I BPRTYPE'=9 W ?113,"Fill type: "_$S(BPRTBCK=2:"RT",BPRTBCK=3:"BB",BPRTBCK=4:"P2",1:"RT,BB,P2")
"RTN","BPSRPT7",284,0)
 W !,"Insurance: "_$S(BPINSINF=0:"ALL",1:$$BPINS(BPINSINF))
"RTN","BPSRPT7",285,0)
 I (",7,")[BPRTYPE W ?44,"Close Reason: ",$E($$GETCLR^BPSRPT6(BPCCRSN),1,26)
"RTN","BPSRPT7",286,0)
 I (",4,")[BPRTYPE W ?44,$J($S(BPAUTREV=0:"ALL",1:"AUTO"),4)," Reversals"
"RTN","BPSRPT7",287,0)
 I (",4,")[BPRTYPE W ?60,$J($S(BPACREJ=1:"REJECTED",BPACREJ=2:"ACCEPTED",1:"ALL"),8)," Returned Status"
"RTN","BPSRPT7",288,0)
 W ?87,"Drugs/Classes: "_$S(BPQSTDRG=2:$$DRGNAM^BPSRPT6(BPDRUG,30),BPQSTDRG=3:$E(BPDRGCL,1,30),1:"ALL")
"RTN","BPSRPT7",289,0)
 I (",2,")[BPRTYPE W !,"Reject Code: ",$E($$GETREJ^BPSRPT4(BPREJCD),1,28),?89,"Eligibility: ",$S(BPELIG="V":"VET",BPELIG="T":"TRI",BPELIG="C":"CVA",1:"ALL"),?111,"Open/Closed: ",$S(BPOPCL=1:"CLOSED",BPOPCL=2:"OPEN",1:"ALL")
"RTN","BPSRPT7",290,0)
 I (",1,4,7,")[BPRTYPE W !,"Eligibility: ",$S(BPELIG="V":"VET",BPELIG="T":"TRI",BPELIG="C":"CVA",1:"ALL")
"RTN","BPSRPT7",291,0)
 I (",9,")[BPRTYPE D
"RTN","BPSRPT7",292,0)
 . W !,"Eligibilities: ",$S(BPELIG1=0:"ALL",1:$$ELIG(.BPELIG1))
"RTN","BPSRPT7",293,0)
 . W !,"NON-BILLABLE STATUS: "_$S(BPNBSTS=0:"ALL",1:$$NBSTS(.BPNBSTS))
"RTN","BPSRPT7",294,0)
 W !,$S(BPRTYPE=5:"PRESCRIPTIONS",BPRLNRL=2:"RELEASED PRESCRIPTIONS",BPRLNRL=3:"PRESCRIPTIONS (NOT RELEASED)",1:"ALL PRESCRIPTIONS")
"RTN","BPSRPT7",295,0)
 W " BY "_$S(BPRTYPE=7:"CLOSE",1:"TRANSACTION")_" DATE: "
"RTN","BPSRPT7",296,0)
 W "From "_$$DATTIM^BPSRPT1(BPBEGDT)_" through "_$$DATTIM^BPSRPT1($P(BPENDDT,"."))
"RTN","BPSRPT7",297,0)
 ;
"RTN","BPSRPT7",298,0)
 D ULINE^BPSRPT5("=") Q:$G(BPQ)
"RTN","BPSRPT7",299,0)
 D HEADLN1^BPSRPT4(BPRTYPE)
"RTN","BPSRPT7",300,0)
 D HEADLN2^BPSRPT4(BPRTYPE)
"RTN","BPSRPT7",301,0)
 D HEADLN3^BPSRPT4(BPRTYPE)
"RTN","BPSRPT7",302,0)
 D ULINE^BPSRPT5("=")
"RTN","BPSRPT7",303,0)
 ;
"RTN","BPSRPT7",304,0)
 ;Print Division
"RTN","BPSRPT7",305,0)
 I $G(BPDIV)]"" D
"RTN","BPSRPT7",306,0)
 .W !,"DIVISION: ",$S(BPDIV=0:"BLANK",BPDIV="ALL DIVISIONS":"ALL DIVISIONS",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV)
"RTN","BPSRPT7",307,0)
 .I BPRTYPE=5!(BPRTYPE=6)!(BPSUMDET=1)!(BPGRPLAN="") D ULINE^BPSRPT5("-")
"RTN","BPSRPT7",308,0)
 ;
"RTN","BPSRPT7",309,0)
 ;Print Insurance If Defined
"RTN","BPSRPT7",310,0)
 I BPSUMDET=0,$G(BPGRPLAN)]"",$G(BPGRPLAN)'=0,$G(BPGRPLAN)'="~" D WRPLAN^BPSRPT5(BPGRPLAN)
"RTN","BPSRPT7",311,0)
 Q
"RTN","BPSRPT7",312,0)
 ;
"RTN","BPSRPT7",313,0)
 ;Special Division Handling
"RTN","BPSRPT7",314,0)
 ;
"RTN","BPSRPT7",315,0)
BPDIV(BPDIV) Q $S(BPDIV=0:"BLANK",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV)
"RTN","BPSRPT7",316,0)
 ;
"RTN","BPSRPT7",317,0)
 ;Get selected insurance names based on user selection
"RTN","BPSRPT7",318,0)
 ;If length is greater than 68 append "..."
"RTN","BPSRPT7",319,0)
 ;Input: BPINSINF = Semi-colon separated list of file 36 IENs
"RTN","BPSRPT7",320,0)
 ;Output: comma separated list of related file 36 names
"RTN","BPSRPT7",321,0)
BPINS(BPINSINF) ;
"RTN","BPSRPT7",322,0)
 N BPINS,BPINAME,RETV
"RTN","BPSRPT7",323,0)
 S RETV=""
"RTN","BPSRPT7",324,0)
 F I=2:1 S BPINS=$P($G(BPINSINF),";",I) Q:BPINS=""  D
"RTN","BPSRPT7",325,0)
 . S BPINAME=$$INSNM^IBNCPDPI(BPINS) Q:BPINAME=""
"RTN","BPSRPT7",326,0)
 . I RETV'="" S RETV=RETV_", "_BPINAME Q
"RTN","BPSRPT7",327,0)
 . S RETV=BPINAME
"RTN","BPSRPT7",328,0)
 I $L(RETV)>68 S RETV=$E(RETV,1,68)_"..."
"RTN","BPSRPT7",329,0)
 Q RETV
"RTN","BPSRPT7",330,0)
 ;
"RTN","BPSRPT7",331,0)
ELIG(ELIG) ;
"RTN","BPSRPT7",332,0)
 ; Display multiple eligibilities
"RTN","BPSRPT7",333,0)
 ; Input:
"RTN","BPSRPT7",334,0)
 ;   ELIG - Array of multiple eligibilities
"RTN","BPSRPT7",335,0)
 ; Output
"RTN","BPSRPT7",336,0)
 ;   Text of eligibilities
"RTN","BPSRPT7",337,0)
 ;
"RTN","BPSRPT7",338,0)
 I $D(ELIG)=0 Q ""
"RTN","BPSRPT7",339,0)
 N N,LIST
"RTN","BPSRPT7",340,0)
 S LIST=""
"RTN","BPSRPT7",341,0)
 S N="" F  S N=$O(ELIG(N)) Q:N=""  D
"RTN","BPSRPT7",342,0)
 . S LIST=LIST_$G(ELIG(N))_","
"RTN","BPSRPT7",343,0)
 Q $E(LIST,1,$L(LIST)-1)
"RTN","BPSRPT7",344,0)
 ;
"RTN","BPSRPT7",345,0)
NBSTS(NBSTS) ;
"RTN","BPSRPT7",346,0)
 ; Display multiple non-billable statuses
"RTN","BPSRPT7",347,0)
 ; Input:
"RTN","BPSRPT7",348,0)
 ;   NBSTS - Array of multiple non-billable statuses
"RTN","BPSRPT7",349,0)
 ; Output
"RTN","BPSRPT7",350,0)
 ;   Text of non-billable statuses
"RTN","BPSRPT7",351,0)
 ;
"RTN","BPSRPT7",352,0)
 I $D(NBSTS)=0 Q ""
"RTN","BPSRPT7",353,0)
 N N,LIST
"RTN","BPSRPT7",354,0)
 S LIST=""
"RTN","BPSRPT7",355,0)
 S N="" F  S N=$O(NBSTS(N)) Q:N=""  D
"RTN","BPSRPT7",356,0)
 . S LIST=LIST_$G(NBSTS(N))_","
"RTN","BPSRPT7",357,0)
 Q $E(LIST,1,$L(LIST)-1)
"RTN","BPSRPT8")
0^7^B147944651
"RTN","BPSRPT8",1,0)
BPSRPT8 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT8",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8,10,11,19**;JUN 2004;Build 18
"RTN","BPSRPT8",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT8",4,0)
 ;
"RTN","BPSRPT8",5,0)
 ;Reference to IB NCPCP NON-BILLABLE STATUS REASONS (#366.17) supported by ICR 6136
"RTN","BPSRPT8",6,0)
 ;
"RTN","BPSRPT8",7,0)
 Q
"RTN","BPSRPT8",8,0)
 ;
"RTN","BPSRPT8",9,0)
 ;Routine to Display the Reports in Excel
"RTN","BPSRPT8",10,0)
 ;
"RTN","BPSRPT8",11,0)
 ;Print Report Line 1
"RTN","BPSRPT8",12,0)
 ;
"RTN","BPSRPT8",13,0)
 ; Input Variable -> BPRTYPE,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT
"RTN","BPSRPT8",14,0)
 ;                   BPBIL,BPINS,BPCOLL
"RTN","BPSRPT8",15,0)
 ; 
"RTN","BPSRPT8",16,0)
WRLINE1(BPRTYPE,BPREC,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT,BPBIL,BPINS,BPCOLL,BPPSEQ) ;
"RTN","BPSRPT8",17,0)
 ;
"RTN","BPSRPT8",18,0)
 N BP59,BP02,BP03
"RTN","BPSRPT8",19,0)
 S BP59=$P(BPX,U,3)
"RTN","BPSRPT8",20,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT8",21,0)
 S BP03=+$P($G(^BPST(BP59,0)),U,5)
"RTN","BPSRPT8",22,0)
 ;Division
"RTN","BPSRPT8",23,0)
 S BPREC=$S(BPDIV=0:"BLANK",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV)_U
"RTN","BPSRPT8",24,0)
 ;Insurance
"RTN","BPSRPT8",25,0)
 I BPRTYPE'=5,BPRTYPE'=6 S BPREC=BPREC_$E(BPGRPLAN,1,90)_U
"RTN","BPSRPT8",26,0)
 S BPREC=BPREC_$$PATNAME^BPSRPT6(BPDFN)_U  ;Patient Name
"RTN","BPSRPT8",27,0)
 S BPREC=BPREC_"("_$$SSN4^BPSRPT6(BPDFN)_")"_U ;L4SSN
"RTN","BPSRPT8",28,0)
 ;
"RTN","BPSRPT8",29,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT8",30,0)
 . N PTRESP
"RTN","BPSRPT8",31,0)
 . S BPREC=BPREC_$$ELIGCODE^BPSSCR05($P(BPX,U,3))_U ;Eligibility
"RTN","BPSRPT8",32,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",33,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",34,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U  ;Date
"RTN","BPSRPT8",35,0)
 . S BPREC=BPREC_$$INGRCST^BPSSCRLG(BP02)_U  ;Ingredient Cost
"RTN","BPSRPT8",36,0)
 . S BPREC=BPREC_$$DISPFEE^BPSSCRLG(BP02)_U  ;Dispensing Fee
"RTN","BPSRPT8",37,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",38,0)
 . S BPREC=BPREC_$$ICPAID^BPSSCRLG(BP03)_U  ;Ingredient Cost Paid
"RTN","BPSRPT8",39,0)
 . S BPREC=BPREC_$$DFPAID^BPSSCRLG(BP03)_U  ;Dispensing Fee Paid
"RTN","BPSRPT8",40,0)
 . S PTRESP=$$PTRESP^BPSSCRLG(BP03) S BPREC=BPREC_$S('PTRESP:PTRESP,1:"-"_PTRESP)_U  ;Patient Pay Amount
"RTN","BPSRPT8",41,0)
 . S BPREC=BPREC_$TR($J(BPINS,10,2)," ")_U ;$Ins. Paid
"RTN","BPSRPT8",42,0)
 . S BPREC=BPREC_$S(BPCOLL]"":$TR($J(BPCOLL,10,2)," "),1:"")_U ;$Collected
"RTN","BPSRPT8",43,0)
 ;
"RTN","BPSRPT8",44,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT8",45,0)
 . S BPREC=BPREC_$$ELIGCODE^BPSSCR05($P(BPX,U,3))_U ;Eligibility
"RTN","BPSRPT8",46,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",47,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",48,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U ;Date
"RTN","BPSRPT8",49,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(+BPX)_U  ;Released On
"RTN","BPSRPT8",50,0)
 . ;RX INFO
"RTN","BPSRPT8",51,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",52,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U  ;Fill Type
"RTN","BPSRPT8",53,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",54,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",55,0)
 . S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U
"RTN","BPSRPT8",56,0)
 . S BPREC=BPREC_$S($$CLOSED02^BPSSCR03($P(^BPST($P(BPX,U,3),0),U,4))=1:"C",1:"O")_U ;Open/Closed
"RTN","BPSRPT8",57,0)
 ;
"RTN","BPSRPT8",58,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT8",59,0)
 . N PTRESP
"RTN","BPSRPT8",60,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",61,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",62,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U ;Date
"RTN","BPSRPT8",63,0)
 . S BPREC=BPREC_$$INGRCST^BPSSCRLG(BP02)_U  ;Ingredient Cost
"RTN","BPSRPT8",64,0)
 . S BPREC=BPREC_$$DISPFEE^BPSSCRLG(BP02)_U  ;Dispensing Fee
"RTN","BPSRPT8",65,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",66,0)
 . S BPREC=BPREC_$$ICPAID^BPSSCRLG(BP03)_U  ;Ingredient Cost Paid
"RTN","BPSRPT8",67,0)
 . S BPREC=BPREC_$$DFPAID^BPSSCRLG(BP03)_U  ;Dispensing Fee Paid
"RTN","BPSRPT8",68,0)
 . S PTRESP=$$PTRESP^BPSSCRLG(BP03) S BPREC=BPREC_$S('PTRESP:PTRESP,1:"-"_PTRESP)_U  ;Patient Pay Amount
"RTN","BPSRPT8",69,0)
 . S BPREC=BPREC_$TR($J(BPINS,10,2)," ")_U ;Insurance Response
"RTN","BPSRPT8",70,0)
 ;
"RTN","BPSRPT8",71,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT8",72,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",73,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",74,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1($$TRANDT^BPSRPT2($P(BPX,U,3),1))_U ;Completed
"RTN","BPSRPT8",75,0)
 . S BPREC=BPREC_$$TTYPE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)_U ;Trans Type
"RTN","BPSRPT8",76,0)
 . S BPREC=BPREC_$$RESPONSE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)_U ;Payer Response
"RTN","BPSRPT8",77,0)
 . S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U ;RX COB
"RTN","BPSRPT8",78,0)
 ;
"RTN","BPSRPT8",79,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT8",80,0)
 . ;RX INFO
"RTN","BPSRPT8",81,0)
 . S BPREC=BPREC_$$ELIGCODE^BPSSCR05($P(BPX,U,3))_U ;Eligibility
"RTN","BPSRPT8",82,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",83,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",84,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",85,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",86,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",87,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",88,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")_U
"RTN","BPSRPT8",89,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",90,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",91,0)
 ;
"RTN","BPSRPT8",92,0)
 I (BPRTYPE=8) D  Q
"RTN","BPSRPT8",93,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",94,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",95,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U  ;Date
"RTN","BPSRPT8",96,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",97,0)
 . S BPREC=BPREC_$TR($J(BPINS,10,2)," ")_U ;$Ins. Paid
"RTN","BPSRPT8",98,0)
 . S BPREC=BPREC_$S(BPCOLL]"":$TR($J(BPCOLL,10,2)," "),1:"")_U ;$Collected
"RTN","BPSRPT8",99,0)
 ;
"RTN","BPSRPT8",100,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT8",101,0)
 . N ELGCD S ELGCD=$P(BPX,U,1)
"RTN","BPSRPT8",102,0)
 . S BPREC=BPREC_$S(ELGCD="V":"VET",ELGCD="T":"TRI",ELGCD="C":"CVA",1:"UNK")_U
"RTN","BPSRPT8",103,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",104,0)
 . S BPREC=BPREC_BPREF_U                      ;Refill
"RTN","BPSRPT8",105,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U  ;Date
"RTN","BPSRPT8",106,0)
 . S BPREC=BPREC_$S($P(BPX,U,2)]"":$TR($J($P(BPX,U,2),10,2)," "),1:"")_U ;$Drug Cost
"RTN","BPSRPT8",107,0)
 Q
"RTN","BPSRPT8",108,0)
 ;
"RTN","BPSRPT8",109,0)
 ;Print Report Line 2
"RTN","BPSRPT8",110,0)
 ;
"RTN","BPSRPT8",111,0)
 ; Input Variable -> BPRTYPE,BPX,BPRX,BPREF,BPBIL,BPGRPLAN
"RTN","BPSRPT8",112,0)
 ; 
"RTN","BPSRPT8",113,0)
WRLINE2(BPRTYPE,BPREC,BPX,BPRX,BPREF,BPBIL,BPGRPLAN,BPPSEQ) ;
"RTN","BPSRPT8",114,0)
 N BP59,BP02
"RTN","BPSRPT8",115,0)
 S BP59=$P(BPX,U,3)
"RTN","BPSRPT8",116,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT8",117,0)
 ;
"RTN","BPSRPT8",118,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT8",119,0)
 . ;Drug, Released On
"RTN","BPSRPT8",120,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",121,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(+BPX)_U
"RTN","BPSRPT8",122,0)
 . ;RX INFO
"RTN","BPSRPT8",123,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",124,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",125,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",126,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",127,0)
 . I BPRTYPE=4 S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U
"RTN","BPSRPT8",128,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT8",129,0)
 . I BPRTYPE=1 S BPREC=BPREC_U_$$BILL^BPSRPT6(BPRX,BPREF,BPPSEQ)_U_$$RXCOB($G(BPPSEQ)) ;Bill # and RX COB
"RTN","BPSRPT8",130,0)
 ;
"RTN","BPSRPT8",131,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT8",132,0)
 . S BPREC=BPREC_$E($$CRDHLDID^BPSRPT2(+$P(BPX,U,3)),3,23)_U ;Cardholder ID
"RTN","BPSRPT8",133,0)
 . S BPREC=BPREC_$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)_U ;Group ID
"RTN","BPSRPT8",134,0)
 . S BPREC=BPREC_$$INGRCST^BPSSCRLG(BP02)_U  ;Ingredient Cost
"RTN","BPSRPT8",135,0)
 . S BPREC=BPREC_$$DISPFEE^BPSSCRLG(BP02)_U  ;Dispensing Fee
"RTN","BPSRPT8",136,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",137,0)
 . S BPREC=BPREC_$$QTY^BPSRPT6($P(BPX,U,3))_U ;Qty
"RTN","BPSRPT8",138,0)
 . S BPREC=BPREC_$$GETNDC^BPSRPT6(BPRX,BPREF)_U ;NDC#
"RTN","BPSRPT8",139,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",140,0)
 ;
"RTN","BPSRPT8",141,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT8",142,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",143,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",144,0)
 . ;RX INFO
"RTN","BPSRPT8",145,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",146,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",147,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",148,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",149,0)
 . S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U
"RTN","BPSRPT8",150,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT8",151,0)
 ;
"RTN","BPSRPT8",152,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT8",153,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",154,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",155,0)
 . ;RX INFO
"RTN","BPSRPT8",156,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",157,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",158,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",159,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",160,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")_U
"RTN","BPSRPT8",161,0)
 . I $P(BPGRPLAN,U,2)]"" S BPREC=BPREC_$E($P(BPGRPLAN,U,2),1,30) ;Insurance
"RTN","BPSRPT8",162,0)
 . S BPREC=BPREC_U_$$ELAPSE^BPSRPT6($P(BPX,U,3))  ;Elapsed Time
"RTN","BPSRPT8",163,0)
 ;
"RTN","BPSRPT8",164,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT8",165,0)
 . S BPREC=BPREC_$E($$CRDHLDID^BPSRPT2(+$P(BPX,U,3)),3,23)_U ;Cardholder ID
"RTN","BPSRPT8",166,0)
 . S BPREC=BPREC_$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)_U  ;Group ID
"RTN","BPSRPT8",167,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(+$$CLOSEDT^BPSRPT2(+$P(BPX,U,3)))_U ;Close Dt/Time
"RTN","BPSRPT8",168,0)
 . S BPREC=BPREC_$E($$CLSBY^BPSRPT6(+$P(BPX,U,3)),1,25)_U ;Close By
"RTN","BPSRPT8",169,0)
 . S BPREC=BPREC_$E($P($$CLRSN^BPSRPT7(+$P(BPX,U,3)),U,2),1,30)_U ;Close Reason
"RTN","BPSRPT8",170,0)
 ;
"RTN","BPSRPT8",171,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT8",172,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),27)_U ;Drug
"RTN","BPSRPT8",173,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_" " ;Fill Location
"RTN","BPSRPT8",174,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_" " ;Fill Type
"RTN","BPSRPT8",175,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",176,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",177,0)
 . S BPREC=BPREC_$TR($E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)," ","")_U  ;Group ID
"RTN","BPSRPT8",178,0)
 . S BPREC=BPREC_$E(BPGRPLAN,1,30)_U ;Insurance
"RTN","BPSRPT8",179,0)
 . S BPREC=BPREC_$$BILL^BPSRPT6(BPRX,BPREF,BPPSEQ)_U ;Bill#
"RTN","BPSRPT8",180,0)
 ;
"RTN","BPSRPT8",181,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT8",182,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,4),32)_U  ;Drug
"RTN","BPSRPT8",183,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U ;NDC
"RTN","BPSRPT8",184,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1($P(BPX,U,5))_U  ;Release Date
"RTN","BPSRPT8",185,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U      ;Fill Location
"RTN","BPSRPT8",186,0)
 . S BPREC=BPREC_$$RXSTANAM^BPSSCRU2($P(BPX,U,6)) ;Status
"RTN","BPSRPT8",187,0)
 . S BPREC=BPREC_$S($P(BPX,U,5):"/R",1:"/N")_U    ;RL/NR
"RTN","BPSRPT8",188,0)
 . S BPREC=BPREC_$$GET1^DIQ(366.17,$P(BPX,U,7),.01,"E")  ;Non-Billable Status Reason - ICR 6136
"RTN","BPSRPT8",189,0)
 Q
"RTN","BPSRPT8",190,0)
 ;
"RTN","BPSRPT8",191,0)
 ;Print Report Line 3
"RTN","BPSRPT8",192,0)
 ;
"RTN","BPSRPT8",193,0)
 ; Input Variable -> BPRTYPE,BPX
"RTN","BPSRPT8",194,0)
 ; 
"RTN","BPSRPT8",195,0)
WRLINE3(BPRTYPE,BPREC,BPX) N BP59,BPSARR,BPRJCNT,BPZZ,BPRICE
"RTN","BPSRPT8",196,0)
 S BP59=+$P(BPX,U,3)
"RTN","BPSRPT8",197,0)
 ;
"RTN","BPSRPT8",198,0)
 I (",2,7,")[BPRTYPE D  Q
"RTN","BPSRPT8",199,0)
 .S BPREC=BPREC_$$CLAIMID^BPSRPT2(BP59)_U ;Claim ID
"RTN","BPSRPT8",200,0)
 .S BPRJCNT=$$REJTEXT^BPSRPT2(BP59,.BPSARR)
"RTN","BPSRPT8",201,0)
 .F BPZZ=1:1:BPRJCNT S:BPZZ'=1 BPREC=BPREC_"," S BPREC=BPREC_$P(BPSARR(BPZZ),":")
"RTN","BPSRPT8",202,0)
 .;
"RTN","BPSRPT8",203,0)
 .;Write one record per reject/close code
"RTN","BPSRPT8",204,0)
 .S:+BPRJCNT=0 BPRJCNT=1
"RTN","BPSRPT8",205,0)
 .F BPZZ=1:1:BPRJCNT W !,$G(BPREC),U,$P($G(BPSARR(BPZZ)),":"),U,$P($G(BPSARR(BPZZ)),":",2)
"RTN","BPSRPT8",206,0)
 ;
"RTN","BPSRPT8",207,0)
 I BPRTYPE=4 D
"RTN","BPSRPT8",208,0)
 . ;Method
"RTN","BPSRPT8",209,0)
 . I $$AUTOREV^BPSRPT1(BP59) S BPREC=BPREC_U_"AUTO"_U
"RTN","BPSRPT8",210,0)
 . E  S BPREC=BPREC_U_"REGULAR"_U
"RTN","BPSRPT8",211,0)
 . ;Return Status
"RTN","BPSRPT8",212,0)
 . I $P(BPX,U,15)["ACCEPTED" S BPREC=BPREC_"ACCEPTED"_U
"RTN","BPSRPT8",213,0)
 . E  S BPREC=BPREC_"REJECTED"_U
"RTN","BPSRPT8",214,0)
 . ;Reason
"RTN","BPSRPT8",215,0)
 . S BPREC=BPREC_$$RVSRSN^BPSRPT7(+$P(BPX,U,3))
"RTN","BPSRPT8",216,0)
 ;
"RTN","BPSRPT8",217,0)
 I BPRTYPE=8 D
"RTN","BPSRPT8",218,0)
 . S BPRICE=$$PRICEVAL^BPSRPT5(BP59)
"RTN","BPSRPT8",219,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,3)_U
"RTN","BPSRPT8",220,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,4)_U
"RTN","BPSRPT8",221,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,5)_U
"RTN","BPSRPT8",222,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,6)_U
"RTN","BPSRPT8",223,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,7)_U
"RTN","BPSRPT8",224,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,2)_U
"RTN","BPSRPT8",225,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,1)_U
"RTN","BPSRPT8",226,0)
 ;Write the record
"RTN","BPSRPT8",227,0)
 W !,$G(BPREC)
"RTN","BPSRPT8",228,0)
 Q
"RTN","BPSRPT8",229,0)
 ;
"RTN","BPSRPT8",230,0)
 ;Print Excel Header
"RTN","BPSRPT8",231,0)
 ;
"RTN","BPSRPT8",232,0)
HDR(BPRTYPE) ;
"RTN","BPSRPT8",233,0)
 ;
"RTN","BPSRPT8",234,0)
 ;Check if header already printed
"RTN","BPSRPT8",235,0)
 I $G(BPSDATA) Q
"RTN","BPSRPT8",236,0)
 S BPSDATA=1
"RTN","BPSRPT8",237,0)
 ;
"RTN","BPSRPT8",238,0)
 ;Division
"RTN","BPSRPT8",239,0)
 W !,"DIVISION",U
"RTN","BPSRPT8",240,0)
 ;
"RTN","BPSRPT8",241,0)
 I BPRTYPE'=5,BPRTYPE'=6 W "INSURANCE",U
"RTN","BPSRPT8",242,0)
 ;
"RTN","BPSRPT8",243,0)
 I (",1,2,3,4,5,7,8,9,")[BPRTYPE W "PATIENT NAME",U,"Pt.ID",U
"RTN","BPSRPT8",244,0)
 ;
"RTN","BPSRPT8",245,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT8",246,0)
 . W "ELIGIBILITY",U
"RTN","BPSRPT8",247,0)
 . W "RX#",U
"RTN","BPSRPT8",248,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",249,0)
 . W "DATE",U
"RTN","BPSRPT8",250,0)
 . W "VA INGREDIENT COST",U
"RTN","BPSRPT8",251,0)
 . W "VA DISPENSING FEE",U
"RTN","BPSRPT8",252,0)
 . W "$BILLED",U
"RTN","BPSRPT8",253,0)
 . W "INGREDIENT COST PAID",U
"RTN","BPSRPT8",254,0)
 . W "DISPENSING FEE PAID",U
"RTN","BPSRPT8",255,0)
 . W "PATIENT RESP (INS)",U
"RTN","BPSRPT8",256,0)
 . W "$INS RESPONSE",U
"RTN","BPSRPT8",257,0)
 . W "$COLLECT",U
"RTN","BPSRPT8",258,0)
 . W "DRUG",U
"RTN","BPSRPT8",259,0)
 . W "NDC",U
"RTN","BPSRPT8",260,0)
 . W "RELEASED ON",U
"RTN","BPSRPT8",261,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",262,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",263,0)
 . W "STATUS",U
"RTN","BPSRPT8",264,0)
 . I BPRTYPE=4 W "RX COB",U
"RTN","BPSRPT8",265,0)
 . W "REJECTED"
"RTN","BPSRPT8",266,0)
 . I BPRTYPE=1 W U,"BILL#",U,"RX COB"
"RTN","BPSRPT8",267,0)
 . I BPRTYPE=4 W U,"REVERSAL METHOD",U,"RETURN STATUS",U,"REASON"
"RTN","BPSRPT8",268,0)
 ;
"RTN","BPSRPT8",269,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT8",270,0)
 . W "ELIGIBILITY",U
"RTN","BPSRPT8",271,0)
 . W "RX#",U
"RTN","BPSRPT8",272,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",273,0)
 . W "DATE",U
"RTN","BPSRPT8",274,0)
 . W "RELEASED ON",U
"RTN","BPSRPT8",275,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",276,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",277,0)
 . W "STATUS",U
"RTN","BPSRPT8",278,0)
 . W "RX COB",U
"RTN","BPSRPT8",279,0)
 . W "OPEN/CLOSED",U
"RTN","BPSRPT8",280,0)
 . W "CARDHOLD.ID",U
"RTN","BPSRPT8",281,0)
 . W "GROUP ID",U
"RTN","BPSRPT8",282,0)
 . W "VA INGREDIENT COST",U
"RTN","BPSRPT8",283,0)
 . W "VA DISPENSING FEE",U
"RTN","BPSRPT8",284,0)
 . W "$BILLED",U
"RTN","BPSRPT8",285,0)
 . W "QTY",U
"RTN","BPSRPT8",286,0)
 . W "NDC#",U
"RTN","BPSRPT8",287,0)
 . W "DRUG",U
"RTN","BPSRPT8",288,0)
 . W "CLAIM ID",U
"RTN","BPSRPT8",289,0)
 . W "REJECT CODE(S)",U
"RTN","BPSRPT8",290,0)
 . W "REJECT CODE",U
"RTN","BPSRPT8",291,0)
 . W "REJECT EXPLANATION"
"RTN","BPSRPT8",292,0)
 ;
"RTN","BPSRPT8",293,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT8",294,0)
 . W "RX#",U
"RTN","BPSRPT8",295,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",296,0)
 . W "DATE",U
"RTN","BPSRPT8",297,0)
 . W "VA INGREDIENT COST",U
"RTN","BPSRPT8",298,0)
 . W "VA DISPENSING FEE",U
"RTN","BPSRPT8",299,0)
 . W "$BILLED",U
"RTN","BPSRPT8",300,0)
 . W "INGREDIENT COST PAID",U
"RTN","BPSRPT8",301,0)
 . W "DISPENSING FEE PAID",U
"RTN","BPSRPT8",302,0)
 . W "PATIENT RESP (INS)",U
"RTN","BPSRPT8",303,0)
 . W "$INS RESPONSE",U
"RTN","BPSRPT8",304,0)
 . W "DRUG",U
"RTN","BPSRPT8",305,0)
 . W "NDC",U
"RTN","BPSRPT8",306,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",307,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",308,0)
 . W "STATUS",U
"RTN","BPSRPT8",309,0)
 . W "RX COB",U
"RTN","BPSRPT8",310,0)
 . W "REJECTED"
"RTN","BPSRPT8",311,0)
 ;
"RTN","BPSRPT8",312,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT8",313,0)
 . W "RX#",U
"RTN","BPSRPT8",314,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",315,0)
 . W "COMPLETED",U
"RTN","BPSRPT8",316,0)
 . W "TRANS TYPE",U
"RTN","BPSRPT8",317,0)
 . W "PAYER RESPONSE",U
"RTN","BPSRPT8",318,0)
 . W "RX COB",U
"RTN","BPSRPT8",319,0)
 . W "DRUG",U
"RTN","BPSRPT8",320,0)
 . W "NDC",U
"RTN","BPSRPT8",321,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",322,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",323,0)
 . W "STATUS",U
"RTN","BPSRPT8",324,0)
 . W "REJECTED",U
"RTN","BPSRPT8",325,0)
 . W "INSURANCE",U
"RTN","BPSRPT8",326,0)
 . W "ELAP TIME IN SECONDS"
"RTN","BPSRPT8",327,0)
 ;
"RTN","BPSRPT8",328,0)
 I BPRTYPE=6 D  Q
"RTN","BPSRPT8",329,0)
 .W "DATE",U
"RTN","BPSRPT8",330,0)
 .W "#CLAIMS",U
"RTN","BPSRPT8",331,0)
 .W "AMOUNT SUBMITTED",U
"RTN","BPSRPT8",332,0)
 .W "RETURNED REJECTED",U
"RTN","BPSRPT8",333,0)
 .W "RETURNED PAYABLE",U
"RTN","BPSRPT8",334,0)
 .W "AMOUNT TO RECEIVE",U
"RTN","BPSRPT8",335,0)
 .W "DIFFERENCE"
"RTN","BPSRPT8",336,0)
 ;
"RTN","BPSRPT8",337,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT8",338,0)
 . W "ELIGIBILITY",U
"RTN","BPSRPT8",339,0)
 . W "RX#",U
"RTN","BPSRPT8",340,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",341,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",342,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",343,0)
 . W "STATUS",U
"RTN","BPSRPT8",344,0)
 . W "REJECTED",U
"RTN","BPSRPT8",345,0)
 . W "DRUG",U
"RTN","BPSRPT8",346,0)
 . W "NDC",U
"RTN","BPSRPT8",347,0)
 . W "CARDHOLD.ID",U
"RTN","BPSRPT8",348,0)
 . W "GROUP ID",U
"RTN","BPSRPT8",349,0)
 . W "CLOSE DATE/TIME",U
"RTN","BPSRPT8",350,0)
 . W "CLOSED BY",U
"RTN","BPSRPT8",351,0)
 . W "CLOSE REASON",U
"RTN","BPSRPT8",352,0)
 . W "CLAIM ID",U
"RTN","BPSRPT8",353,0)
 . W "REJECT CODE(S)",U
"RTN","BPSRPT8",354,0)
 . W "REJECT CODE",U
"RTN","BPSRPT8",355,0)
 . W "REJECT EXPLANATION"
"RTN","BPSRPT8",356,0)
 ;
"RTN","BPSRPT8",357,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT8",358,0)
 . W "RX#",U
"RTN","BPSRPT8",359,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",360,0)
 . W "DATE",U
"RTN","BPSRPT8",361,0)
 . W "$BILLED",U
"RTN","BPSRPT8",362,0)
 . W "$INS RESPONSE",U
"RTN","BPSRPT8",363,0)
 . W "$COLLECT",U
"RTN","BPSRPT8",364,0)
 . W "DRUG",U
"RTN","BPSRPT8",365,0)
 . W "RX INFO",U
"RTN","BPSRPT8",366,0)
 . W "INS GROUP#",U
"RTN","BPSRPT8",367,0)
 . W "INS GROUP NAME",U
"RTN","BPSRPT8",368,0)
 . W "BILL#",U
"RTN","BPSRPT8",369,0)
 . W "$PROVIDER NETWORK",U
"RTN","BPSRPT8",370,0)
 . W "$BRAND DRUG",U
"RTN","BPSRPT8",371,0)
 . W "$NON-PREF FORM",U
"RTN","BPSRPT8",372,0)
 . W "$BRAND NON-PREF FORM",U
"RTN","BPSRPT8",373,0)
 . W "$COVERAGE GAP",U
"RTN","BPSRPT8",374,0)
 . W "$HEALTH ASST",U
"RTN","BPSRPT8",375,0)
 . W "$SPEND ACCT REMAINING",U
"RTN","BPSRPT8",376,0)
 ;
"RTN","BPSRPT8",377,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT8",378,0)
 . W "ELIGIBILITY",U
"RTN","BPSRPT8",379,0)
 . W "RX#",U
"RTN","BPSRPT8",380,0)
 . W "REF",U
"RTN","BPSRPT8",381,0)
 . W "DATE",U
"RTN","BPSRPT8",382,0)
 . W "$DRUG COST",U
"RTN","BPSRPT8",383,0)
 . W "DRUG",U
"RTN","BPSRPT8",384,0)
 . W "NDC",U
"RTN","BPSRPT8",385,0)
 . W "RELEASED ON",U
"RTN","BPSRPT8",386,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",387,0)
 . W "STATUS",U
"RTN","BPSRPT8",388,0)
 . W "NON-BILLABLE STATUS REASON"
"RTN","BPSRPT8",389,0)
 Q
"RTN","BPSRPT8",390,0)
 ;return RX COB as the 1st letter of the RX COB indicator
"RTN","BPSRPT8",391,0)
RXCOB(BPPSEQ) ;
"RTN","BPSRPT8",392,0)
 Q $S(BPPSEQ=1:"p",BPPSEQ=2:"s",1:"")
"RTN","BPSRPT8",393,0)
 ;BPSRPT8
"RTN","BPSSCRCL")
0^24^B82378286
"RTN","BPSSCRCL",1,0)
BPSSCRCL ;BHAM ISC/SS - ECME SCREEN CLOSE CLAIMS ;05-APR-05
"RTN","BPSSCRCL",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8,11,15,19**;JUN 2004;Build 18
"RTN","BPSSCRCL",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRCL",4,0)
 ;
"RTN","BPSSCRCL",5,0)
 ; Reference to FIND^PSOREJUT supported by ICR #4706
"RTN","BPSSCRCL",6,0)
 ;
"RTN","BPSSCRCL",7,0)
 Q
"RTN","BPSSCRCL",8,0)
 ;
"RTN","BPSSCRCL",9,0)
CLO ;entry point to close claims
"RTN","BPSSCRCL",10,0)
 N BPRET,BPSARR59
"RTN","BPSSCRCL",11,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSSCRCL",12,0)
 D FULL^VALM1
"RTN","BPSSCRCL",13,0)
 W !,"Enter the line numbers for the claim(s) to be closed."
"RTN","BPSSCRCL",14,0)
 S BPRET=$$ASKLINES^BPSSCRU4("Select item(s)","C",.BPSARR59,VALMAR)
"RTN","BPSSCRCL",15,0)
 I BPRET="^" S VALMBCK="R" Q
"RTN","BPSSCRCL",16,0)
 ;close claims
"RTN","BPSSCRCL",17,0)
 ;update the content of the screen
"RTN","BPSSCRCL",18,0)
 ;only if at least one claim was closed
"RTN","BPSSCRCL",19,0)
 I $$CLOSE(.BPSARR59) D REDRAW^BPSSCRUD("Updating screen for closed claims...")
"RTN","BPSSCRCL",20,0)
 E  S VALMBCK="R"
"RTN","BPSSCRCL",21,0)
 Q
"RTN","BPSSCRCL",22,0)
 ;
"RTN","BPSSCRCL",23,0)
 ;close claims
"RTN","BPSSCRCL",24,0)
 ;input:
"RTN","BPSSCRCL",25,0)
 ; BP59ARR - array with ptrs to BPS TRANSACTION FILE
"RTN","BPSSCRCL",26,0)
 ;       BP59ARR(ien59)="ien in TMP ^ number on the user screen"
"RTN","BPSSCRCL",27,0)
 ;returns:
"RTN","BPSSCRCL",28,0)
 ; BPCLTOT - number of closed claims
"RTN","BPSSCRCL",29,0)
CLOSE(BP59ARR) ;
"RTN","BPSSCRCL",30,0)
 N BPNEWARR,BPRETV,BPREJFLG,X
"RTN","BPSSCRCL",31,0)
 N BPDFN,BP59,BPIFANY,BPQ,BPCLST,BPS52,BPSRF,BPSZ,BPSECOND
"RTN","BPSSCRCL",32,0)
 N BPREAS,BPCOMM,BP90ANSW,BPRCOPAY,BPRXINFO,BPCOP,BPCLTOT,BPINS,BPINSNM,BP59FRST
"RTN","BPSSCRCL",33,0)
 S BPRETV=$$MKNEWARR^BPSSCR05(.BP59ARR,.BPNEWARR,.BPINS)
"RTN","BPSSCRCL",34,0)
 S BPQ="",BPIFANY=0,BPREJFLG=1,BPSECOND=0
"RTN","BPSSCRCL",35,0)
 S BPDFN=""
"RTN","BPSSCRCL",36,0)
 F  S BPDFN=$O(BPNEWARR(BPDFN)) Q:BPDFN=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",37,0)
 . W !!,"You've chosen to close the following prescription(s) for",!,$E($$PATNAME^BPSSCRU2(BPDFN),1,13)_" :"
"RTN","BPSSCRCL",38,0)
 . S BP59="" F  S BP59=$O(BPNEWARR(BPDFN,BP59)) Q:BP59=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",39,0)
 . . I $Y>20 D PAUSE^VALM1 W @IOF I X="^" S BPQ="^" Q
"RTN","BPSSCRCL",40,0)
 . . S BPIFANY=1,BPQ=""
"RTN","BPSSCRCL",41,0)
 . . S BPREJFLG=+$P($G(BPNEWARR(BPDFN,BP59)),U,3)
"RTN","BPSSCRCL",42,0)
 . . W !,@VALMAR@(+$G(BPNEWARR(BPDFN,BP59)),0)
"RTN","BPSSCRCL",43,0)
 . . D DISPREJ^BPSSCRU6(BP59)
"RTN","BPSSCRCL",44,0)
 . . ;can't close a closed claim. The user must reopen first.
"RTN","BPSSCRCL",45,0)
 . . I $$CLOSED02^BPSSCR03($P($G(^BPST(BP59,0)),U,4)) W !,"This claim is already closed." S BPQ="^" Q
"RTN","BPSSCRCL",46,0)
 . . ; Check for unresolved rejects - BPS*1*19
"RTN","BPSSCRCL",47,0)
 . . S BPSZ=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSSCRCL",48,0)
 . . I $$FIND^PSOREJUT($P(BPSZ,U),$P(BPSZ,U,2)) D  Q
"RTN","BPSSCRCL",49,0)
 . . . W !,"The Prescription is currently open in the pharmacist's Third Party Payer"
"RTN","BPSSCRCL",50,0)
 . . . W !,"Reject Worklist. The claim cannot be closed until action is taken by the"
"RTN","BPSSCRCL",51,0)
 . . . W !,"pharmacist."
"RTN","BPSSCRCL",52,0)
 . . . S BPQ="^"
"RTN","BPSSCRCL",53,0)
 . . ;get claim status from transaction
"RTN","BPSSCRCL",54,0)
 . . S BPCLST=$$CLAIMST^BPSSCRU3(BP59)
"RTN","BPSSCRCL",55,0)
 . . ;Is this a secondary claim?
"RTN","BPSSCRCL",56,0)
 . . I $P($G(^BPST(BP59,0)),U,14)=2 S BPSECOND=1
"RTN","BPSSCRCL",57,0)
 . . I $P($G(^BPST(BP59,0)),U,14)<2,$$PAYABLE^BPSOSRX5($P(BPCLST,U)),$$PAYBLSEC^BPSUTIL2(BP59) D  S BPQ="^" Q
"RTN","BPSSCRCL",58,0)
 . . . W !,"The claim cannot be closed if the secondary claim is payable.",!,"Please reverse the secondary claim first."
"RTN","BPSSCRCL",59,0)
 . . I BPSECOND,BPCLST'["E REJECTED",BPCLST'["E REVERSAL ACCEPTED" D  S BPQ="^" Q
"RTN","BPSSCRCL",60,0)
 . . . W !,"The CLOSE action can only be applied to an E REJECTED or E REVERSAL ACCEPTED",!,"secondary claim. This claim is ",$P(BPCLST,U),".",!,"The secondary claim is also closed when the primary claim is closed."
"RTN","BPSSCRCL",61,0)
 . . W:BPREJFLG=0 !,"Claim Neither Rejected Nor Reversed and cannot be Closed."
"RTN","BPSSCRCL",62,0)
 I +BPRETV=0 Q $$QUITCL()
"RTN","BPSSCRCL",63,0)
 I BPQ="^" Q $$QUITCL()
"RTN","BPSSCRCL",64,0)
 ;
"RTN","BPSSCRCL",65,0)
 ; check 2nd insurance, but only if closing a Primary claim.
"RTN","BPSSCRCL",66,0)
 S BPQ=""
"RTN","BPSSCRCL",67,0)
 I 'BPSECOND D
"RTN","BPSSCRCL",68,0)
 . S BPDFN="" F  S BPDFN=$O(BPINS(BPDFN)) Q:BPDFN=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",69,0)
 . . S BPINSNM="" F  S BPINSNM=$O(BPINS(BPDFN,BPINSNM)) Q:BPINSNM=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",70,0)
 . . . S BP59FRST=0
"RTN","BPSSCRCL",71,0)
 . . . S BP59=""
"RTN","BPSSCRCL",72,0)
 . . . K BPRXINFO
"RTN","BPSSCRCL",73,0)
 . . . F  S BP59=$O(BPINS(BPDFN,BPINSNM,BP59)) Q:BP59=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",74,0)
 . . . . S:BP59FRST=0 BP59FRST=BP59
"RTN","BPSSCRCL",75,0)
 . . . . S BPRXINFO(BP59)=$E($G(@VALMAR@(+$G(BP59ARR(BP59)),0)),7,99)
"RTN","BPSSCRCL",76,0)
 . . . ; Only check 2nd if the RX/Fill is released
"RTN","BPSSCRCL",77,0)
 . . . S BPSZ=$$RXREF^BPSSCRU2(BP59FRST)
"RTN","BPSSCRCL",78,0)
 . . . S BPS52=$P(BPSZ,U),BPSRF=$P(BPSZ,U,2)
"RTN","BPSSCRCL",79,0)
 . . . Q:$$RELDATE^BPSBCKJ(BPS52,BPSRF)']""
"RTN","BPSSCRCL",80,0)
 . . . ; call CH2NDINS^BPSSCRU5 only once for all claims for this patient and insurance
"RTN","BPSSCRCL",81,0)
 . . . ; you can use one BP59FRST for the group of claims here as a parameter since 
"RTN","BPSSCRCL",82,0)
 . . . ; they all are all identical from the "patient-insurance pair" point of view
"RTN","BPSSCRCL",83,0)
 . . . D:BP59FRST>0 CH2NDINS^BPSSCRU5(BP59FRST,$E($$PATNAME^BPSSCRU2(BPDFN),1,13),BPINSNM,.BPRXINFO)
"RTN","BPSSCRCL",84,0)
 ;
"RTN","BPSSCRCL",85,0)
 I BPQ="^" Q $$QUITCL()
"RTN","BPSSCRCL",86,0)
 ;
"RTN","BPSSCRCL",87,0)
 W !!,"ALL Selected Rxs will be CLOSED using the same information gathered in the",!,"following prompts.",!
"RTN","BPSSCRCL",88,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSSCRCL",89,0)
 I BPQ'=1 Q $$QUITCL() ; 
"RTN","BPSSCRCL",90,0)
 ; ask questions for all of them
"RTN","BPSSCRCL",91,0)
 W !!
"RTN","BPSSCRCL",92,0)
 I $$ASKQUEST(+$P(BPRETV,U,2),.BPREAS,.BPCOMM,.BP90ANSW,.BPRCOPAY)'=1 Q $$QUITCL()
"RTN","BPSSCRCL",93,0)
 ;
"RTN","BPSSCRCL",94,0)
 W @IOF
"RTN","BPSSCRCL",95,0)
 ;and finally close all
"RTN","BPSSCRCL",96,0)
 S BPCLTOT=0
"RTN","BPSSCRCL",97,0)
 S BPDFN="" F  S BPDFN=$O(BPNEWARR(BPDFN)) Q:BPDFN=""  D
"RTN","BPSSCRCL",98,0)
 . S BP59="" F  S BP59=$O(BPNEWARR(BPDFN,BP59)) Q:BP59=""  D
"RTN","BPSSCRCL",99,0)
 . . I $P($G(BPNEWARR(BPDFN,BP59)),U,3)=0 Q  ;can't be closed
"RTN","BPSSCRCL",100,0)
 . . S BPCOP=0
"RTN","BPSSCRCL",101,0)
 . . I +BPRCOPAY=1,$P($G(BPNEWARR(BPDFN,BP59)),U,4)=1 S BPCOP=1 ;release copay
"RTN","BPSSCRCL",102,0)
 . . I $$CLOSEIT(BP59,$P(BPREAS,U,2),BPCOMM,BP90ANSW,BPCOP)>0 D
"RTN","BPSSCRCL",103,0)
 . . . S BPCLTOT=BPCLTOT+1
"RTN","BPSSCRCL",104,0)
 ;
"RTN","BPSSCRCL",105,0)
 W !,BPCLTOT," claim",$S(BPCLTOT'=1:"s have",1:" has")," been closed.",!
"RTN","BPSSCRCL",106,0)
 D PAUSE^VALM1
"RTN","BPSSCRCL",107,0)
 Q BPCLTOT
"RTN","BPSSCRCL",108,0)
 ;
"RTN","BPSSCRCL",109,0)
QUITCL() ;
"RTN","BPSSCRCL",110,0)
 W !!,"0 claims have been closed."
"RTN","BPSSCRCL",111,0)
 D PAUSE^VALM1
"RTN","BPSSCRCL",112,0)
 Q 0
"RTN","BPSSCRCL",113,0)
 ;/**
"RTN","BPSSCRCL",114,0)
 ;Ask all necessary questions
"RTN","BPSSCRCL",115,0)
 ;Input
"RTN","BPSSCRCL",116,0)
 ; BPRELCOP - ask release copay question
"RTN","BPSSCRCL",117,0)
 ; .BPREAZ - ptr to #356.8 ^ CLOSE REASON NAME ^ ECME FLAG ^ ECME PAPER FLAG
"RTN","BPSSCRCL",118,0)
 ; .BPCOMZ - close comment (string)
"RTN","BPSSCRCL",119,0)
 ; .BP90ANSZ - "", "D"(drop to paper) or "N" (non-billable)
"RTN","BPSSCRCL",120,0)
 ; .BPRCOPAZ - 1(Yes) or 0(No) , answer to "release copay" question
"RTN","BPSSCRCL",121,0)
 ;Output:
"RTN","BPSSCRCL",122,0)
 ; 0 - cancel process
"RTN","BPSSCRCL",123,0)
 ; ^ - emergency quit (cancel process)
"RTN","BPSSCRCL",124,0)
 ; 1 - ok, can proceed
"RTN","BPSSCRCL",125,0)
ASKQUEST(BPRELCOP,BPREAZ,BPCOMZ,BP90ANSZ,BPRCOPAZ) ;*/
"RTN","BPSSCRCL",126,0)
 S BPCOMZ=""
"RTN","BPSSCRCL",127,0)
 S BP90ANSZ=""
"RTN","BPSSCRCL",128,0)
 S BPRCOPAZ=0
"RTN","BPSSCRCL",129,0)
 ;ask the user to choose the close reason from #356.8
"RTN","BPSSCRCL",130,0)
 ;using set of close reasons in IB file 356.8
"RTN","BPSSCRCL",131,0)
 S BPREAZ=$$REASON()
"RTN","BPSSCRCL",132,0)
 I BPREAZ="^" Q "^"
"RTN","BPSSCRCL",133,0)
 I ($P(BPREAZ,U,4)=1) D  ;if has ECME PAPER FLAG
"RTN","BPSSCRCL",134,0)
 . ;ask if the claim is still billable thru paper?
"RTN","BPSSCRCL",135,0)
 . S BP90ANSZ=$$PROMPT^BPSSCRCV("S^N:NON-BILLABLE;D:DROP TO PAPER","Treat as (N)on-Billable Episode or (D)rop Bill to Paper?","")
"RTN","BPSSCRCL",136,0)
 I BP90ANSZ=-1 Q "^"
"RTN","BPSSCRCL",137,0)
 S BPCOMZ=$$COMMENT("Comment ",40)
"RTN","BPSSCRCL",138,0)
 I (BPCOMZ="^") Q "^"
"RTN","BPSSCRCL",139,0)
 I $L(BPCOMZ)>0,BPCOMZ?1" "." " S BPCOMZ=""
"RTN","BPSSCRCL",140,0)
 ;check copay
"RTN","BPSSCRCL",141,0)
 ;ask "release copay?" in all NON-BILLABLE cases, i.e. except user answered "DROP TO PAPER"
"RTN","BPSSCRCL",142,0)
 ;(even in cases when he was not asked about it)
"RTN","BPSSCRCL",143,0)
 I BP90ANSZ'="D",BPRELCOP D
"RTN","BPSSCRCL",144,0)
 . ; Ask user if s/he wants to release a copay
"RTN","BPSSCRCL",145,0)
 . S BPRCOPAZ=$$YESNO^BPSSCRRS("Release Patient CoPay(Y/N)")
"RTN","BPSSCRCL",146,0)
 I BPRCOPAZ=-1 Q "^"
"RTN","BPSSCRCL",147,0)
 ;
"RTN","BPSSCRCL",148,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSSCRCL",149,0)
 I BPQ=-1 Q "^" ;quit by "^"
"RTN","BPSSCRCL",150,0)
 I BPQ'=1 Q 0 ;doesn't want to proceed
"RTN","BPSSCRCL",151,0)
 Q 1 ; answers can be used
"RTN","BPSSCRCL",152,0)
 ;
"RTN","BPSSCRCL",153,0)
 ;/**
"RTN","BPSSCRCL",154,0)
 ;ask for the close reason
"RTN","BPSSCRCL",155,0)
 ;return:
"RTN","BPSSCRCL",156,0)
 ;   ptr to #356.8 ^ CLOSE REASON NAME ^ ECME FLAG ^ ECME PAPER FLAG
"RTN","BPSSCRCL",157,0)
REASON() ;
"RTN","BPSSCRCL",158,0)
 N DIC,BPREASNM,BP3568,Y
"RTN","BPSSCRCL",159,0)
 ; - Asks for REASON for Closing
"RTN","BPSSCRCL",160,0)
 S DIC="^IBE(356.8,",DIC(0)="AEQMZ"
"RTN","BPSSCRCL",161,0)
 S DIC("S")="I $P(^(0),U,2)=1"
"RTN","BPSSCRCL",162,0)
 D ^DIC
"RTN","BPSSCRCL",163,0)
 I Y=-1 Q "^"
"RTN","BPSSCRCL",164,0)
 Q +Y_U_Y(0)
"RTN","BPSSCRCL",165,0)
 ;/**
"RTN","BPSSCRCL",166,0)
 ;enter the comment
"RTN","BPSSCRCL",167,0)
 ;BPSTR  -prompt string
"RTN","BPSSCRCL",168,0)
 ;BPMLEN -maxlen
"RTN","BPSSCRCL",169,0)
COMMENT(BPSTR,BPMLEN) ;*/
"RTN","BPSSCRCL",170,0)
 N DIR,DTOUT,DUOUT,BPQ
"RTN","BPSSCRCL",171,0)
 I '$D(BPSTR) S BPSTR="Comment "
"RTN","BPSSCRCL",172,0)
 I '$D(BPMLEN) S BPMLEN=40
"RTN","BPSSCRCL",173,0)
 S DIR(0)="FO^0:250"
"RTN","BPSSCRCL",174,0)
 S DIR("A")=BPSTR
"RTN","BPSSCRCL",175,0)
 S DIR("?",1)="This response must have no more than "_BPMLEN_" characters"
"RTN","BPSSCRCL",176,0)
 S DIR("?")="and must not contain embedded up arrow."
"RTN","BPSSCRCL",177,0)
 S BPQ=0
"RTN","BPSSCRCL",178,0)
 F  D  Q:+BPQ'=0
"RTN","BPSSCRCL",179,0)
 . D ^DIR
"RTN","BPSSCRCL",180,0)
 . I $D(DUOUT)!($D(DTOUT)) S BPQ=-1 Q
"RTN","BPSSCRCL",181,0)
 . I $L(Y)'>BPMLEN S BPQ=1 Q
"RTN","BPSSCRCL",182,0)
 . W !!,"This response must have no more than "_BPMLEN_" characters"
"RTN","BPSSCRCL",183,0)
 . W !,"and must not contain embedded uparrow.",!
"RTN","BPSSCRCL",184,0)
 . S DIR("B")=$E(Y,1,BPMLEN)
"RTN","BPSSCRCL",185,0)
 Q:BPQ<0 "^"
"RTN","BPSSCRCL",186,0)
 Q Y
"RTN","BPSSCRCL",187,0)
 ;/** 
"RTN","BPSSCRCL",188,0)
 ;close the claim
"RTN","BPSSCRCL",189,0)
 ;the approach and code partially borrowed from IHS code CLOSE^BPSOS6N
"RTN","BPSSCRCL",190,0)
 ;BPSTRA - ptr to #9002313.59
"RTN","BPSSCRCL",191,0)
 ;REASON - text name of the close reason 
"RTN","BPSSCRCL",192,0)
 ;BPSCLCM - comment 
"RTN","BPSSCRCL",193,0)
 ;BPDROP:
"RTN","BPSSCRCL",194,0)
 ;  "D" - DROP BILL TO PAPER
"RTN","BPSSCRCL",195,0)
 ;  "N" - NON-BILLABLE
"RTN","BPSSCRCL",196,0)
 ;BPRELCOP - 1 (Yes) or 0 (No) release copay or not?
"RTN","BPSSCRCL",197,0)
CLOSEIT(BPSTRA,REASON,BPSCLCM,BPDROP,BPRELCOP) ;
"RTN","BPSSCRCL",198,0)
 N BPSCLA,ERROR,DA,DR,BPLCK,DIE
"RTN","BPSSCRCL",199,0)
 S BPSCLA=$$GET1^DIQ(9002313.59,BPSTRA,3,"I")
"RTN","BPSSCRCL",200,0)
 W !,"Closing Claim ",$$GET1^DIQ(9002313.02,BPSCLA,.01),"..."
"RTN","BPSSCRCL",201,0)
 S BPLCK=0
"RTN","BPSSCRCL",202,0)
 L +^BPSC(BPSCLA):0
"RTN","BPSSCRCL",203,0)
 I $T S BPLCK=1
"RTN","BPSSCRCL",204,0)
 E  W !,"       *** CLAIM ",$$GET1^DIQ(9002313.02,BPSCLA,.01)," IN USE ***" Q 0
"RTN","BPSSCRCL",205,0)
 D CLOSE^BPSBUTL(BPSCLA,BPSTRA,REASON,$S($G(BPDROP)="D":1,1:0),BPRELCOP,BPSCLCM,.ERROR)
"RTN","BPSSCRCL",206,0)
 I $D(ERROR) W "NOT OK" D DSPERR(ERROR) D  Q 0
"RTN","BPSSCRCL",207,0)
 . I BPLCK=1 L -^BPSC(BPSCLA)
"RTN","BPSSCRCL",208,0)
 S DIE="^BPSC(",DA=BPSCLA,DR="901///1;902///"_$$NOW^XLFDT()_";903////"_DUZ_";904///"_REASON_";905////"_BPDROP D ^DIE
"RTN","BPSSCRCL",209,0)
 I BPLCK=1 L -^BPSC(BPSCLA)
"RTN","BPSSCRCL",210,0)
 H 1 W "OK"
"RTN","BPSSCRCL",211,0)
 Q 1
"RTN","BPSSCRCL",212,0)
 ;
"RTN","BPSSCRCL",213,0)
DSPERR(MSG) ; Display the ERROR message
"RTN","BPSSCRCL",214,0)
 W !,"Error: *** ",MSG," ***"
"RTN","BPSSCRCL",215,0)
 Q
"RTN","BPSSCRCL",216,0)
 ;
"RTN","BPSSCRCL",217,0)
 ;/**
"RTN","BPSSCRCL",218,0)
 ;ECME has tried to submit the claim to insurance with the name BPINSNAM
"RTN","BPSSCRCL",219,0)
 ;but the claim was rejected and now we need to determine if the patient
"RTN","BPSSCRCL",220,0)
 ;has any other insurance with pharmacy coverage that can be billed for the RX
"RTN","BPSSCRCL",221,0)
 ;Input:
"RTN","BPSSCRCL",222,0)
 ; BP59 - pointer to file #9002313.59
"RTN","BPSSCRCL",223,0)
 ; BPINSNAM - insurance that have already been used by ECME
"RTN","BPSSCRCL",224,0)
 ;Output:
"RTN","BPSSCRCL",225,0)
 ; 0 - not found
"RTN","BPSSCRCL",226,0)
 ; 1 ^ Insurance Name ^ Group Number ^ Date  of service
"RTN","BPSSCRCL",227,0)
NEXTINS(BP59,BPINSNAM) ;get insurance info by the pointer of #9002313.59
"RTN","BPSSCRCL",228,0)
 N BPDOS,BPDFN,BPZZ,BP36,BPX,BPHONE,BPY,BPINSNM
"RTN","BPSSCRCL",229,0)
 N BPPHARM,BPCOORD,BPINS,BPFOUND
"RTN","BPSSCRCL",230,0)
 S BPY=0
"RTN","BPSSCRCL",231,0)
 S BPHONE=$P($G(^BPST(BP59,10,+$G(^BPST(BP59,9)),3)),U,2)
"RTN","BPSSCRCL",232,0)
 S BPDOS=+$P($G(^BPST(BP59,12)),U,2)\1
"RTN","BPSSCRCL",233,0)
 I BPDOS=0 S BPDOS=+$P($G(^BPST(BP59,0)),U,8)\1
"RTN","BPSSCRCL",234,0)
 S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSSCRCL",235,0)
 ; call INSUR^IBBAPI to get information about:
"RTN","BPSSCRCL",236,0)
 ;1 = Insurance Company Name
"RTN","BPSSCRCL",237,0)
 ;7 = Coordination of Benefits (primary, secondary, tertiary)
"RTN","BPSSCRCL",238,0)
 ;15 = Pharmacy Coverage?
"RTN","BPSSCRCL",239,0)
 ;18 = Group Number
"RTN","BPSSCRCL",240,0)
 S BPX=$$INSUR^IBBAPI(BPDFN,BPDOS,,.BPZZ,"1,7,15,18")
"RTN","BPSSCRCL",241,0)
 S BP1="" F  S BP1=$O(BPZZ("IBBAPI","INSUR",BP1)) Q:+BP1=0  D
"RTN","BPSSCRCL",242,0)
 . ;get pharmacy coverage
"RTN","BPSSCRCL",243,0)
 . S BPPHARM=+$G(BPZZ("IBBAPI","INSUR",BP1,15))
"RTN","BPSSCRCL",244,0)
 I BPX<1 Q 0
"RTN","BPSSCRCL",245,0)
 D PROCINS(.BPZZ)
"RTN","BPSSCRCL",246,0)
 ;check pharmacy coverage
"RTN","BPSSCRCL",247,0)
 S BPFOUND=0 ;if found will be set to insurance node in the INSUR^IBBAPI array
"RTN","BPSSCRCL",248,0)
 S BPPHARM=1 ;look only at those with pharmacy coverage
"RTN","BPSSCRCL",249,0)
 S BPCOORD=0
"RTN","BPSSCRCL",250,0)
 F  S BPCOORD=+$O(BPZZ("RES",BPPHARM,BPCOORD)) Q:BPCOORD=0!(BPFOUND'=0)  D
"RTN","BPSSCRCL",251,0)
 . S BPINS=+$O(BPZZ("RES",BPPHARM,BPCOORD,0))
"RTN","BPSSCRCL",252,0)
 . I BPINS>0 I $P($G(BPZZ("IBBAPI","INSUR",BPINS,1)),U,2)'=BPINSNAM S BPFOUND=BPINS
"RTN","BPSSCRCL",253,0)
 I BPFOUND=0 Q 0
"RTN","BPSSCRCL",254,0)
 Q 1_U_$P($G(BPZZ("IBBAPI","INSUR",BPFOUND,1)),U,2)_U_$P($G(BPZZ("IBBAPI","INSUR",BPFOUND,18)),U)_U_BPDOS
"RTN","BPSSCRCL",255,0)
 ;
"RTN","BPSSCRCL",256,0)
 ;process insurances
"RTN","BPSSCRCL",257,0)
 ;input: local array returned by INSUR^IBBAPI
"RTN","BPSSCRCL",258,0)
 ;output: BPZZ("RES",pharmacy coverage,coordination,insurance element # in BPZZ array)
"RTN","BPSSCRCL",259,0)
PROCINS(BPZZ) ;
"RTN","BPSSCRCL",260,0)
 N BP1,BP2,BP0,BPPHONE,BPPHARM,BPCOORD
"RTN","BPSSCRCL",261,0)
 S BP1="" F  S BP1=$O(BPZZ("IBBAPI","INSUR",BP1)) Q:+BP1=0  D
"RTN","BPSSCRCL",262,0)
 . ;get pharmacy coverage
"RTN","BPSSCRCL",263,0)
 . S BPPHARM=+$G(BPZZ("IBBAPI","INSUR",BP1,15))
"RTN","BPSSCRCL",264,0)
 . ;get coordination of benefits
"RTN","BPSSCRCL",265,0)
 . S BPCOORD=+$G(BPZZ("IBBAPI","INSUR",BP1,7))
"RTN","BPSSCRCL",266,0)
 . ;create ^TMP to sort results by pharmacy coverage and coordination of benefits
"RTN","BPSSCRCL",267,0)
 . S BPZZ("RES",BPPHARM,BPCOORD,BP1)=""
"RTN","BPSSCRCL",268,0)
 Q
"RTN","BPSTEST")
0^23^B147504088
"RTN","BPSTEST",1,0)
BPSTEST ;OAK/ELZ - ECME TESTING TOOL ;11/15/07  09:55
"RTN","BPSTEST",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**6,7,8,10,11,15,19**;JUN 2004;Build 18
"RTN","BPSTEST",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSTEST",4,0)
 ;
"RTN","BPSTEST",5,0)
 ;
"RTN","BPSTEST",6,0)
GETOVER(KEY1,KEY2,BPSORESP,BPSWHERE,BPSTYPE,BPPAYSEQ) ;
"RTN","BPSTEST",7,0)
 ; called by BPSNCPDP to enter overrides for a particular RX
"RTN","BPSTEST",8,0)
 ; INPUT
"RTN","BPSTEST",9,0)
 ;    KEY1      - Prescription IEN/Patient IEN
"RTN","BPSTEST",10,0)
 ;    KEY2      - Fill Number/Policy Number
"RTN","BPSTEST",11,0)
 ;    BPSORESP  - Previous response when this claim was processed
"RTN","BPSTEST",12,0)
 ;    BPSWHERE  - RX Action passed into BPSNCPDP
"RTN","BPSTEST",13,0)
 ;    BPSTYPE   - R (Reversal), S (Submission), E (Eligibility)
"RTN","BPSTEST",14,0)
 ;    BPPAYSEQ  - payer sequence 1 - primary, 2 - secondary 
"RTN","BPSTEST",15,0)
 ; OUTPUT
"RTN","BPSTEST",16,0)
 ;    None - Table BPS PAYER RESPONSE OVERRIDE entry is created.
"RTN","BPSTEST",17,0)
 ;
"RTN","BPSTEST",18,0)
 N BPSTRANS,BPSTIEN,BPSSRESP,DIC,X,Y,DIR,DIK,DA
"RTN","BPSTEST",19,0)
 ;
"RTN","BPSTEST",20,0)
 ; Check if testing is enabled
"RTN","BPSTEST",21,0)
 I '$$CHECK() Q
"RTN","BPSTEST",22,0)
 ;
"RTN","BPSTEST",23,0)
 ; Option can not be run for Date of Death option as it causes errors
"RTN","BPSTEST",24,0)
 I $G(XQY0)["DG DEATH ENTRY" W !,"The testing tool can not be run from Date of Death option" Q
"RTN","BPSTEST",25,0)
 ;
"RTN","BPSTEST",26,0)
 ; Do not run for background jobs
"RTN","BPSTEST",27,0)
 I $D(ZTQUEUED)!(",AREV,CRLB,CRLR,CRLX,CRRL,PC,PL,"[(","_BPSWHERE_",")) Q
"RTN","BPSTEST",28,0)
 ;
"RTN","BPSTEST",29,0)
 ; Create Transaction Number
"RTN","BPSTEST",30,0)
 S BPSTRANS=$$IEN59^BPSOSRX(KEY1,KEY2,$S($G(BPPAYSEQ)>0:+BPPAYSEQ,1:1))
"RTN","BPSTEST",31,0)
 ;
"RTN","BPSTEST",32,0)
 ; Lookup the record in the BPS PAYER RESPONSE OVERRIDE table
"RTN","BPSTEST",33,0)
 S DIC=9002313.32,DIC(0)="",X=BPSTRANS
"RTN","BPSTEST",34,0)
 D ^DIC
"RTN","BPSTEST",35,0)
 S BPSTIEN=+Y
"RTN","BPSTEST",36,0)
 ;
"RTN","BPSTEST",37,0)
 ; Prompt if user wants to do overrides
"RTN","BPSTEST",38,0)
 W !!,"Payer Overrides are enabled at this site.  If this is production environment,"
"RTN","BPSTEST",39,0)
 W !,"do not enter overrides (enter No at the next prompt) and disable this"
"RTN","BPSTEST",40,0)
 W !,"functionality in the BPS SETUP table."
"RTN","BPSTEST",41,0)
 W !!,"Entering No at the next prompt will delete any current overrides for the"
"RTN","BPSTEST",42,0)
 W !,"request, if they exist.",!
"RTN","BPSTEST",43,0)
 S DIR(0)="SA^Y:Yes;N:No"
"RTN","BPSTEST",44,0)
 S DIR("A")="Do you want to enter overrides for this request? ",DIR("B")="NO"
"RTN","BPSTEST",45,0)
 D ^DIR
"RTN","BPSTEST",46,0)
 ;
"RTN","BPSTEST",47,0)
 ; If no, delete the transaction (if it exists) and quit
"RTN","BPSTEST",48,0)
 I Y'="Y" D:BPSTIEN'=-1  Q
"RTN","BPSTEST",49,0)
 . S DIK="^BPS(9002313.32,",DA=BPSTIEN
"RTN","BPSTEST",50,0)
 . D ^DIK
"RTN","BPSTEST",51,0)
 ;
"RTN","BPSTEST",52,0)
 ; If the record does not exist, create it
"RTN","BPSTEST",53,0)
 I BPSTIEN=-1 S BPSTIEN=$$CREATE(BPSTRANS)
"RTN","BPSTEST",54,0)
 I BPSTIEN=-1 W !,"Failed to create the BPS PAYER RESPONSE OVERRIDE record",! Q
"RTN","BPSTEST",55,0)
 ;
"RTN","BPSTEST",56,0)
 ; If BPSTYPE is 'S' (submission) and old response is 'E Payable', change BPSTYPE to 'RS'
"RTN","BPSTEST",57,0)
 I BPSTYPE="S",BPSORESP="E PAYABLE"!(BPSORESP="E DUPLICATE")!(BPSORESP="E REVERSAL REJECTED")!(BPSORESP="E REVERSAL UNSTRANDED") S BPSTYPE="RS"
"RTN","BPSTEST",58,0)
 ;
"RTN","BPSTEST",59,0)
 ; Update with the BPSTYPE
"RTN","BPSTEST",60,0)
 D FILE("^BPS(9002313.32,",BPSTIEN,.02,BPSTYPE)
"RTN","BPSTEST",61,0)
 ;
"RTN","BPSTEST",62,0)
 ; Message for RS
"RTN","BPSTEST",63,0)
 I BPSTYPE="RS" D
"RTN","BPSTEST",64,0)
 . W !!,"This submission may also have a reversal so you will be prompted for the"
"RTN","BPSTEST",65,0)
 . W !,"reversal overrides."
"RTN","BPSTEST",66,0)
 ;
"RTN","BPSTEST",67,0)
 ; If BPSTYPE is equal to 'E', then prompt for eligibility response
"RTN","BPSTEST",68,0)
 I BPSTYPE["E" D
"RTN","BPSTEST",69,0)
 . W !!,"Eligibility Questions"
"RTN","BPSTEST",70,0)
 . D PROMPT(BPSTIEN,.08,"A")
"RTN","BPSTEST",71,0)
 . N BPSRESP
"RTN","BPSTEST",72,0)
 . S BPSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.08,"I")
"RTN","BPSTEST",73,0)
 . I BPSRESP="R" D PROMPT(BPSTIEN,1,"07")
"RTN","BPSTEST",74,0)
 ;
"RTN","BPSTEST",75,0)
 ; If BPSTYPE contains 'R', then prompt for reversal response
"RTN","BPSTEST",76,0)
 I BPSTYPE["R" D
"RTN","BPSTEST",77,0)
 . W !!,"Reversal Questions"
"RTN","BPSTEST",78,0)
 . D PROMPT(BPSTIEN,.05,"A")
"RTN","BPSTEST",79,0)
 . N BPSRESP
"RTN","BPSTEST",80,0)
 . S BPSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.05,"I")
"RTN","BPSTEST",81,0)
 . I BPSRESP="R" D ENREVRJ(BPSTRANS)
"RTN","BPSTEST",82,0)
 ;
"RTN","BPSTEST",83,0)
 ; If BPSTYPE contains 'S', do submission response
"RTN","BPSTEST",84,0)
 I BPSTYPE["S" D
"RTN","BPSTEST",85,0)
 . W !!,"Submission Questions"
"RTN","BPSTEST",86,0)
 . D PROMPT(BPSTIEN,.03,"P")
"RTN","BPSTEST",87,0)
 . S BPSSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.03,"I")
"RTN","BPSTEST",88,0)
 . I BPSSRESP="P"!(BPSSRESP="D") D PROMPT(BPSTIEN,.04,40)
"RTN","BPSTEST",89,0)
 . I BPSSRESP="P"!(BPSSRESP="D") D PROMPT(BPSTIEN,.06,9)
"RTN","BPSTEST",90,0)
 . I BPSSRESP="R" D PROMPT(BPSTIEN,1,"07")
"RTN","BPSTEST",91,0)
 . ; 
"RTN","BPSTEST",92,0)
 . ; This section is for new D1-E6 fields so we can test that they are filed correctly
"RTN","BPSTEST",93,0)
 . ; At some point, these can probably be removed
"RTN","BPSTEST",94,0)
 . I BPSSRESP="P"!(BPSSRESP="D")!(BPSSRESP="R") D
"RTN","BPSTEST",95,0)
 .. ; Ask if you want to enter data for new D1-E6 fields - Quit if user says no
"RTN","BPSTEST",96,0)
 .. N DIR,DTOUT,DUOUT,DIROUT,DIRUT
"RTN","BPSTEST",97,0)
 .. S DIR(0)="YA",DIR("A")="Populate D1-E6 response fields? ",DIR("B")="No" D ^DIR
"RTN","BPSTEST",98,0)
 .. I Y'=1 Q
"RTN","BPSTEST",99,0)
 .. ; Additional overrides for D1-D9 (BPS*1*15)
"RTN","BPSTEST",100,0)
 .. D PROMPT(BPSTIEN,.09,"")
"RTN","BPSTEST",101,0)
 .. D PROMPT(BPSTIEN,.1,"")
"RTN","BPSTEST",102,0)
 .. ; Additional overrides for E0-E6 (BPS*1*19)
"RTN","BPSTEST",103,0)
 .. D PROMPT(BPSTIEN,2.01,"04")
"RTN","BPSTEST",104,0)
 .. D PROMPT(BPSTIEN,2.02,11)
"RTN","BPSTEST",105,0)
 .. D PROMPT(BPSTIEN,2.03,"01")
"RTN","BPSTEST",106,0)
 .. D PROMPT(BPSTIEN,2.04,"")
"RTN","BPSTEST",107,0)
 .. D PROMPT(BPSTIEN,2.05,"")
"RTN","BPSTEST",108,0)
 .. D PROMPT(BPSTIEN,2.06,"")
"RTN","BPSTEST",109,0)
 .. D PROMPT(BPSTIEN,2.07,"")
"RTN","BPSTEST",110,0)
 .. D PROMPT(BPSTIEN,2.08,"")
"RTN","BPSTEST",111,0)
 .. D PROMPT(BPSTIEN,3.01,"")
"RTN","BPSTEST",112,0)
 ;
"RTN","BPSTEST",113,0)
 W ! D PROMPT(BPSTIEN,.07,0)
"RTN","BPSTEST",114,0)
 Q
"RTN","BPSTEST",115,0)
 ;
"RTN","BPSTEST",116,0)
SETOVER(BPSTRANS,BPSTYPE,BPSDATA) ;
"RTN","BPSTEST",117,0)
 ; called by BPSECMPS to set the override data
"RTN","BPSTEST",118,0)
 ; Input
"RTN","BPSTEST",119,0)
 ;    BPSTRANS - Transaction IEN
"RTN","BPSTEST",120,0)
 ;    BPSTYPE  - B1 for submission, B2 for reversals
"RTN","BPSTEST",121,0)
 ; Output
"RTN","BPSTEST",122,0)
 ;    BPSDATA    - Passed by reference and updated with appropriate overrides
"RTN","BPSTEST",123,0)
 ;
"RTN","BPSTEST",124,0)
 N BPSTIEN,BPSRRESP,BPSSRESP,BPSPAID,BPSRCNT,BPSRIEN,BPSRCODE,BPSRCD,BPSCOPAY,BPSXXXX,BPSUNDEF
"RTN","BPSTEST",125,0)
 N BPSAJPAY,BPSNFLDT,BPSX
"RTN","BPSTEST",126,0)
 ;
"RTN","BPSTEST",127,0)
 ; Check the Test Flag in set in BPS SETUP
"RTN","BPSTEST",128,0)
 I '$$CHECK() Q
"RTN","BPSTEST",129,0)
 ;
"RTN","BPSTEST",130,0)
 ; Check if the Transaction Number is defined in BPS RESPONSE OVERRIDES
"RTN","BPSTEST",131,0)
 S BPSTIEN=$O(^BPS(9002313.32,"B",BPSTRANS,""))
"RTN","BPSTEST",132,0)
 I BPSTIEN="" Q
"RTN","BPSTEST",133,0)
 ;
"RTN","BPSTEST",134,0)
 ; If a eligibility, check for specific reversal overrides and set
"RTN","BPSTEST",135,0)
 I BPSTYPE="E1" D  Q
"RTN","BPSTEST",136,0)
 . S BPSRRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.08,"I")
"RTN","BPSTEST",137,0)
 . ;
"RTN","BPSTEST",138,0)
 . ; If the response is Stranded, force an <UNDEF> error
"RTN","BPSTEST",139,0)
 . I BPSRRESP="S" S BPSXXXX=BPSUNDEF
"RTN","BPSTEST",140,0)
 . I BPSRRESP]"" S BPSDATA(1,112)=BPSRRESP
"RTN","BPSTEST",141,0)
 . S BPSDATA(9002313.03,9002313.03,"+1,",501)=$S(BPSRRESP="R":"R",1:"A")
"RTN","BPSTEST",142,0)
 . ; 
"RTN","BPSTEST",143,0)
 . ; If the response is accepted, delete the reject code count and codes
"RTN","BPSTEST",144,0)
 . I BPSRRESP="A" K BPSDATA(1,510),BPSDATA(1,511)
"RTN","BPSTEST",145,0)
 . ; 
"RTN","BPSTEST",146,0)
 . ; If the response is rejected, delete the rejections returned by payers
"RTN","BPSTEST",147,0)
 . ;   and put in the ones entered by the user
"RTN","BPSTEST",148,0)
 . I BPSRRESP="R" D
"RTN","BPSTEST",149,0)
 .. K BPSDATA(1,509),BPSDATA(1,511)
"RTN","BPSTEST",150,0)
 .. S BPSRCNT=0
"RTN","BPSTEST",151,0)
 .. S BPSRIEN=0 F  S BPSRIEN=$O(^BPS(9002313.32,BPSTIEN,1,BPSRIEN)) Q:+BPSRIEN=0  D
"RTN","BPSTEST",152,0)
 ... S BPSRCODE=$P($G(^BPS(9002313.32,BPSTIEN,1,BPSRIEN,0)),"^",1)
"RTN","BPSTEST",153,0)
 ... ; Increment counter and store
"RTN","BPSTEST",154,0)
 ... I BPSRCODE]"" D
"RTN","BPSTEST",155,0)
 .... S BPSRCD=$$GET1^DIQ(9002313.93,BPSRCODE_",",.01,"E")
"RTN","BPSTEST",156,0)
 .... I BPSRCD]"" S BPSRCNT=BPSRCNT+1,BPSDATA(1,511,BPSRCNT)=BPSRCD
"RTN","BPSTEST",157,0)
 .. ; Store total number of rejections
"RTN","BPSTEST",158,0)
 .. S BPSDATA(1,510)=BPSRCNT
"RTN","BPSTEST",159,0)
 ;
"RTN","BPSTEST",160,0)
 ; If a reversal, check for specific reversal overrides and set
"RTN","BPSTEST",161,0)
 I BPSTYPE="B2" D
"RTN","BPSTEST",162,0)
 . S BPSRRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.05,"I")
"RTN","BPSTEST",163,0)
 . ;
"RTN","BPSTEST",164,0)
 . ; If the response is Stranded, force an <UNDEF> error
"RTN","BPSTEST",165,0)
 . I BPSRRESP="S" S BPSXXXX=BPSUNDEF
"RTN","BPSTEST",166,0)
 . I BPSRRESP]"" S BPSDATA(1,112)=$S(BPSRRESP="D":"S",1:BPSRRESP)
"RTN","BPSTEST",167,0)
 . S BPSDATA(9002313.03,9002313.03,"+1,",501)=$S(BPSRRESP="R":"R",1:"A")
"RTN","BPSTEST",168,0)
 . ;
"RTN","BPSTEST",169,0)
 . ; If the response is accepted or duplicate, kill the reject code count and codes
"RTN","BPSTEST",170,0)
 . I BPSRRESP="A"!(BPSRRESP="D") K BPSDATA(1,510),BPSDATA(1,511)
"RTN","BPSTEST",171,0)
 . ;
"RTN","BPSTEST",172,0)
 . ; If the response is rejected, set the reject codes
"RTN","BPSTEST",173,0)
 . I BPSRRESP="R" D SETREJ(BPSTRANS)
"RTN","BPSTEST",174,0)
 ;
"RTN","BPSTEST",175,0)
 ; If a submission, check for specific submission overrides and set
"RTN","BPSTEST",176,0)
 I BPSTYPE="B1" D
"RTN","BPSTEST",177,0)
 . ; Get submission response
"RTN","BPSTEST",178,0)
 . S BPSSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.03,"I")
"RTN","BPSTEST",179,0)
 . ;
"RTN","BPSTEST",180,0)
 . ; If the response is Stranded, force an <UNDEF> error
"RTN","BPSTEST",181,0)
 . I BPSSRESP="S" S BPSXXXX=BPSUNDEF
"RTN","BPSTEST",182,0)
 . ;
"RTN","BPSTEST",183,0)
 . ; If BPSSRESP exists, file it
"RTN","BPSTEST",184,0)
 . I BPSSRESP]"" D
"RTN","BPSTEST",185,0)
 .. S BPSDATA(1,112)=BPSSRESP
"RTN","BPSTEST",186,0)
 .. S BPSDATA(9002313.03,9002313.03,"+1,",501)=$S(BPSSRESP="R":"R",1:"A")
"RTN","BPSTEST",187,0)
 .. ; If payable or duplicate, get the BPSPAID amount and file it if it
"RTN","BPSTEST",188,0)
 .. ; exists.  Also delete any reject codes
"RTN","BPSTEST",189,0)
 .. I BPSSRESP="P"!(BPSSRESP="D") D
"RTN","BPSTEST",190,0)
 ... S BPSPAID=$$GET1^DIQ(9002313.32,BPSTIEN_",",.04,"I")
"RTN","BPSTEST",191,0)
 ... I BPSPAID]"" S BPSDATA(1,509)=$$DFF^BPSECFM(BPSPAID,8)
"RTN","BPSTEST",192,0)
 ... K BPSDATA(1,510),BPSDATA(1,511)
"RTN","BPSTEST",193,0)
 ... S BPSCOPAY=$$GET1^DIQ(9002313.32,BPSTIEN_",",.06,"I")
"RTN","BPSTEST",194,0)
 ... I BPSCOPAY]"" S BPSDATA(1,518)=$$DFF^BPSECFM(BPSCOPAY,8)
"RTN","BPSTEST",195,0)
 .. I BPSSRESP="P"!(BPSSRESP="D")!(BPSSRESP="R") D
"RTN","BPSTEST",196,0)
 ... ; D1-D9 fields (BPS*1*15)
"RTN","BPSTEST",197,0)
 ... ; Override Next Available Fill
"RTN","BPSTEST",198,0)
 ... S BPSAJPAY=$$GET1^DIQ(9002313.32,BPSTIEN_",",.1,"I")
"RTN","BPSTEST",199,0)
 ... I BPSAJPAY]"" S BPSDATA(1,1028)=$$NFF^BPSECFM(BPSAJPAY,2)
"RTN","BPSTEST",200,0)
 ... ; Adjudicated Payment Type
"RTN","BPSTEST",201,0)
 ... S BPSNFLDT=$$GET1^DIQ(9002313.32,BPSTIEN_",",.09,"I")
"RTN","BPSTEST",202,0)
 ... I BPSNFLDT]"" S BPSDATA(1,2004)=$$DTF1^BPSECFM(BPSNFLDT)
"RTN","BPSTEST",203,0)
 ... ;
"RTN","BPSTEST",204,0)
 ... ; E0-E6 overrides (BPS*1*19)
"RTN","BPSTEST",205,0)
 ... ; PERCENTAGE SALES TAX BASIS PAID
"RTN","BPSTEST",206,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.01,"I")
"RTN","BPSTEST",207,0)
 ... I BPSX]"" S BPSDATA(1,561)=BPSX
"RTN","BPSTEST",208,0)
 ... ; OTHER AMOUNT PAID QUALIFIER and associated field
"RTN","BPSTEST",209,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.02,"I")
"RTN","BPSTEST",210,0)
 ... I BPSX]"" S BPSDATA(1,564,1)=$$NFF^BPSECFM(BPSX,2),BPSDATA(1,565,1)=$$DFF^BPSECFM(5.64,8),BPSDATA(1,563)=1
"RTN","BPSTEST",211,0)
 ... ; PAYER ID QUALIFIER
"RTN","BPSTEST",212,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.03,"I")
"RTN","BPSTEST",213,0)
 ... I BPSX]"" S BPSDATA(9002313.03,9002313.03,"+1,",568)=BPSX
"RTN","BPSTEST",214,0)
 ... ; HELP DESK TELEPHONE NUMBER EXTENSION
"RTN","BPSTEST",215,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.04,"I")
"RTN","BPSTEST",216,0)
 ... I BPSX]"" S BPSDATA(1,"2022")=$$NFF^BPSECFM(BPSX,8)
"RTN","BPSTEST",217,0)
 ... ; PROFESSIONAL SERVICE FEE CONTRACTED/REIMURSEMENT AMOUNT
"RTN","BPSTEST",218,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.05,"I")
"RTN","BPSTEST",219,0)
 ... I BPSX]"" S BPSDATA(1,"2033")=$$DFF^BPSECFM(BPSX,8)
"RTN","BPSTEST",220,0)
 ... ; OTHER PAYER HELPDESK TELEPHONE EXTENSION
"RTN","BPSTEST",221,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.06,"I")
"RTN","BPSTEST",222,0)
 ... I BPSX]"" S BPSDATA(1,"2023",1)=$$NFF^BPSECFM(BPSX,8),BPSDATA(1,338,1)="01"
"RTN","BPSTEST",223,0)
 ... ; RESPONSE INTERMEDIARY AUTHORIZATION TYPE ID and associated fields
"RTN","BPSTEST",224,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.07,"I")
"RTN","BPSTEST",225,0)
 ... I BPSX]"" S BPSDATA(1,"2053",1)=$$NFF^BPSECFM(BPSX,2),BPSDATA(1,2052)=1
"RTN","BPSTEST",226,0)
 ... ; RESPONSE INTERMEDIARY AUTHORIZATION ID and associated fields
"RTN","BPSTEST",227,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.08,"I")
"RTN","BPSTEST",228,0)
 ... I BPSX]"" S BPSDATA(1,"2054",1)=$$ANFF^BPSECFM(BPSX,20),BPSDATA(1,2052)=1
"RTN","BPSTEST",229,0)
 ... ; INTERMEDIARY MESSAGE and associated fields
"RTN","BPSTEST",230,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",3.01,"I")
"RTN","BPSTEST",231,0)
 ... I BPSX]"" S BPSDATA(1,"2051",1)=$$ANFF^BPSECFM(BPSX,200),BPSDATA(1,2052)=1
"RTN","BPSTEST",232,0)
 .. ;
"RTN","BPSTEST",233,0)
 .. ; If rejected, get the rejection code and file them
"RTN","BPSTEST",234,0)
 .. ; Also, delete the BPSPAID amount
"RTN","BPSTEST",235,0)
 .. I BPSSRESP="R" D
"RTN","BPSTEST",236,0)
 ... ; Delete old rejections and BPSPAID amount
"RTN","BPSTEST",237,0)
 ... K BPSDATA(1,509),BPSDATA(1,511)
"RTN","BPSTEST",238,0)
 ... ; Loop through rejections and store
"RTN","BPSTEST",239,0)
 ... S BPSRCNT=0
"RTN","BPSTEST",240,0)
 ... S BPSRIEN=0 F  S BPSRIEN=$O(^BPS(9002313.32,BPSTIEN,1,BPSRIEN)) Q:+BPSRIEN=0  D
"RTN","BPSTEST",241,0)
 .... S BPSRCODE=$P($G(^BPS(9002313.32,BPSTIEN,1,BPSRIEN,0)),"^",1)
"RTN","BPSTEST",242,0)
 .... ; Increment counter and store
"RTN","BPSTEST",243,0)
 .... I BPSRCODE]"" D
"RTN","BPSTEST",244,0)
 ..... S BPSRCD=$$GET1^DIQ(9002313.93,BPSRCODE_",",.01,"E")
"RTN","BPSTEST",245,0)
 ..... I BPSRCD]"" S BPSRCNT=BPSRCNT+1,BPSDATA(1,511,BPSRCNT)=BPSRCD
"RTN","BPSTEST",246,0)
 ... ; Store total number of rejections
"RTN","BPSTEST",247,0)
 ... S BPSDATA(1,510)=BPSRCNT
"RTN","BPSTEST",248,0)
 Q
"RTN","BPSTEST",249,0)
 ;
"RTN","BPSTEST",250,0)
SELOVER ;
"RTN","BPSTEST",251,0)
 ; Used to create overrides for prescription that will processed in the
"RTN","BPSTEST",252,0)
 ; background (CMOP, auto-reversals).  The user is prompted for the
"RTN","BPSTEST",253,0)
 ; prescription and other information and then calls GETOVER.  It is called
"RTN","BPSTEST",254,0)
 ; by option BPS PROVIDER RESPONSE OVERRIDES
"RTN","BPSTEST",255,0)
 ;
"RTN","BPSTEST",256,0)
 ; This does not work for eligibility but we don't do them in the background 
"RTN","BPSTEST",257,0)
 ;   right now.
"RTN","BPSTEST",258,0)
 ;
"RTN","BPSTEST",259,0)
 N BPSRXIEN,BPSRXNM,BPSRXFL,BPSRFL,BPSORESP,BPSTYPE,BPSRXARR,BPSRARR,DIC,Y,DIR
"RTN","BPSTEST",260,0)
 ;
"RTN","BPSTEST",261,0)
 ; Check if test mode is on
"RTN","BPSTEST",262,0)
 I '$$CHECK() Q
"RTN","BPSTEST",263,0)
 ;
"RTN","BPSTEST",264,0)
 ; Prompt for the Prescription
"RTN","BPSTEST",265,0)
 S BPSRXIEN=$$PROMPTRX^BPSUTIL1 Q:BPSRXIEN<1
"RTN","BPSTEST",266,0)
 D RXAPI^BPSUTIL1(BPSRXIEN,".01;22","BPSRXARR","IE")
"RTN","BPSTEST",267,0)
 S BPSRXNM=$G(BPSRXARR(52,BPSRXIEN,.01,"E"))
"RTN","BPSTEST",268,0)
 ;
"RTN","BPSTEST",269,0)
 ; Prompt for Fill/Refill
"RTN","BPSTEST",270,0)
 S DIR(0)="S^0:"_$G(BPSRXARR(52,BPSRXIEN,22,"E"))
"RTN","BPSTEST",271,0)
 F BPSRFL=1:1 D RXSUBF^BPSUTIL1(BPSRXIEN,52,52.1,BPSRFL,.01,"BPSRARR","E") Q:$G(BPSRARR(52.1,BPSRFL,.01,"E"))=""  D
"RTN","BPSTEST",272,0)
 . S DIR(0)=DIR(0)_";"_BPSRFL_":"_BPSRARR(52.1,BPSRFL,.01,"E")
"RTN","BPSTEST",273,0)
 S DIR("A")="Select fill/refill for prescription "_BPSRXNM,DIR("B")=0
"RTN","BPSTEST",274,0)
 D ^DIR
"RTN","BPSTEST",275,0)
 I Y'=+Y Q
"RTN","BPSTEST",276,0)
 S BPSRXFL=Y
"RTN","BPSTEST",277,0)
 ;
"RTN","BPSTEST",278,0)
 ; Prompt for BPSTYPE
"RTN","BPSTEST",279,0)
 S DIR(0)="S^R:Reversal;RS:Resubmit with Reversal;S:Submit"
"RTN","BPSTEST",280,0)
 S DIR("A")="Enter BPSTYPE of transaction",DIR("B")="SUBMIT"
"RTN","BPSTEST",281,0)
 D ^DIR
"RTN","BPSTEST",282,0)
 I ",R,RS,S,"'[","_Y_"," Q
"RTN","BPSTEST",283,0)
 S BPSTYPE=Y
"RTN","BPSTEST",284,0)
 ;
"RTN","BPSTEST",285,0)
 ; Set up parameters
"RTN","BPSTEST",286,0)
 S BPSORESP=""
"RTN","BPSTEST",287,0)
 I BPSTYPE="RS" S BPSTYPE="S",BPSORESP="E PAYABLE"
"RTN","BPSTEST",288,0)
 ;
"RTN","BPSTEST",289,0)
 ; Call GETOVER
"RTN","BPSTEST",290,0)
 D GETOVER(BPSRXIEN,BPSRXFL,BPSORESP,"",BPSTYPE)
"RTN","BPSTEST",291,0)
 Q
"RTN","BPSTEST",292,0)
 ;
"RTN","BPSTEST",293,0)
CHECK() ;
"RTN","BPSTEST",294,0)
 ; Check if Test Mode is ON in the BPS Setup table
"RTN","BPSTEST",295,0)
 ; Also called by BPSNCPDP and BPSEMCPS
"RTN","BPSTEST",296,0)
 ;
"RTN","BPSTEST",297,0)
 ;IA#4440
"RTN","BPSTEST",298,0)
 Q $S($$PROD^XUPROD:0,1:$P($G(^BPS(9002313.99,1,0)),"^",3))
"RTN","BPSTEST",299,0)
 ;
"RTN","BPSTEST",300,0)
CREATE(BPSTRANS) ;
"RTN","BPSTEST",301,0)
 ; Create the Override record
"RTN","BPSTEST",302,0)
 ;
"RTN","BPSTEST",303,0)
 N DIC,X,Y,BPSTIEN,DA
"RTN","BPSTEST",304,0)
 S DIC=9002313.32,DIC(0)="L",X=BPSTRANS
"RTN","BPSTEST",305,0)
 D ^DIC
"RTN","BPSTEST",306,0)
 S BPSTIEN=+Y
"RTN","BPSTEST",307,0)
 Q BPSTIEN
"RTN","BPSTEST",308,0)
 ;
"RTN","BPSTEST",309,0)
FILE(DIE,DA,BPSFLD,BPSDATA) ;
"RTN","BPSTEST",310,0)
 ; File in the Override record
"RTN","BPSTEST",311,0)
 ;
"RTN","BPSTEST",312,0)
 N DR,X,Y
"RTN","BPSTEST",313,0)
 S DR=BPSFLD_"///"_BPSDATA
"RTN","BPSTEST",314,0)
 L +@(DIE_DA_")"):0 I $T D ^DIE L -@(DIE_DA_")") Q
"RTN","BPSTEST",315,0)
 W !?5,"Another user is editing this entry."
"RTN","BPSTEST",316,0)
 Q
"RTN","BPSTEST",317,0)
 ;
"RTN","BPSTEST",318,0)
PROMPT(DA,BPSFLD,BPSDFLT) ;
"RTN","BPSTEST",319,0)
 ; Prompt for a specific field and set the data
"RTN","BPSTEST",320,0)
 ;
"RTN","BPSTEST",321,0)
 N DIE,DR,DTOUT,X,Y
"RTN","BPSTEST",322,0)
 S DIE="^BPS(9002313.32,",DR=BPSFLD_"//"_BPSDFLT
"RTN","BPSTEST",323,0)
 L +@(DIE_DA_")"):0 I $T D ^DIE L -@(DIE_DA_")") Q
"RTN","BPSTEST",324,0)
 W !?5,"Another user is editing this entry."
"RTN","BPSTEST",325,0)
 Q
"RTN","BPSTEST",326,0)
 ;
"RTN","BPSTEST",327,0)
SETDELAY(BPSTRANS) ;
"RTN","BPSTEST",328,0)
 ; Input
"RTN","BPSTEST",329,0)
 ;    BPSTRANS - Transaction IEN
"RTN","BPSTEST",330,0)
 ; Check the Test Flag in set in BPS SETUP
"RTN","BPSTEST",331,0)
 I '$$CHECK() Q 0
"RTN","BPSTEST",332,0)
 N BPSDELAY,BPSTIEN,BPSTIME
"RTN","BPSTEST",333,0)
 ; Check if the Transaction Number is defined in BPS RESPONSE OVERRIDES
"RTN","BPSTEST",334,0)
 S BPSTIEN=$O(^BPS(9002313.32,"B",BPSTRANS,""))
"RTN","BPSTEST",335,0)
 I BPSTIEN="" Q 0
"RTN","BPSTEST",336,0)
 S BPSDELAY=$$GET1^DIQ(9002313.32,BPSTIEN_",",.07,"I")*60
"RTN","BPSTEST",337,0)
 I BPSDELAY'>0 Q 0
"RTN","BPSTEST",338,0)
 S BPSTIME=$$FMADD^XLFDT($$NOW^XLFDT,,,,BPSDELAY)
"RTN","BPSTEST",339,0)
 I BPSTIME>0 D  Q BPSTIME
"RTN","BPSTEST",340,0)
 . ;schedule a task to run RUNNING^BPSOSRX
"RTN","BPSTEST",341,0)
 . N ZTRTN,ZTDTH,ZTIO,ZTSK
"RTN","BPSTEST",342,0)
 . S ZTRTN="RUNECME^BPSTEST",ZTDESC="BPSTEST: ECME testing tool"
"RTN","BPSTEST",343,0)
 . S ZTDTH=$$FMADD^XLFDT($$NOW^XLFDT,,,,BPSDELAY+10),ZTIO=""
"RTN","BPSTEST",344,0)
 . D ^%ZTLOAD
"RTN","BPSTEST",345,0)
 Q 0
"RTN","BPSTEST",346,0)
 ;
"RTN","BPSTEST",347,0)
RUNECME ;
"RTN","BPSTEST",348,0)
 D RUNNING^BPSOSRX()
"RTN","BPSTEST",349,0)
 Q
"RTN","BPSTEST",350,0)
 ;get the reversal reject from the ^XTMP and set BPSDATA to override data
"RTN","BPSTEST",351,0)
SETREJ(BPSTRANS) ;
"RTN","BPSTEST",352,0)
 N BPSREJ
"RTN","BPSTEST",353,0)
 S BPSREJ=$G(^XTMP("BPSTEST",BPSTRANS))
"RTN","BPSTEST",354,0)
 I BPSREJ="" Q
"RTN","BPSTEST",355,0)
 S BPSDATA(1,511,1)=BPSREJ
"RTN","BPSTEST",356,0)
 S BPSDATA(1,510)=1
"RTN","BPSTEST",357,0)
 Q
"RTN","BPSTEST",358,0)
 ;enter a reversal reject
"RTN","BPSTEST",359,0)
ENREVRJ(BPSTRANS) ;
"RTN","BPSTEST",360,0)
 N BPRJCODE,TMSTAMP
"RTN","BPSTEST",361,0)
 S BPRJCODE=$$PROMPT^BPSSCRU4("Enter a reject code for reversal")
"RTN","BPSTEST",362,0)
 I $P(BPRJCODE,U)="" Q
"RTN","BPSTEST",363,0)
 I $P(BPRJCODE,U)=0 Q
"RTN","BPSTEST",364,0)
 N X,X1,X2
"RTN","BPSTEST",365,0)
 S X1=DT,X2=2 D C^%DTC
"RTN","BPSTEST",366,0)
 S ^XTMP("BPSTEST",0)=X_U_DT_U_"ECME TESTING TOOL, SEE BPSTEST ROUTINE"
"RTN","BPSTEST",367,0)
 S ^XTMP("BPSTEST",BPSTRANS)=$P(BPRJCODE,U)
"RTN","BPSTEST",368,0)
 Q
"RTN","BPSTEST",369,0)
 ;
"RTN","BPSUTIL2")
0^8^B53070606
"RTN","BPSUTIL2",1,0)
BPSUTIL2 ;BHAM ISC/SS - General Utility functions ;08/01/2006
"RTN","BPSUTIL2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8,10,11,17,19**;JUN 2004;Build 18
"RTN","BPSUTIL2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSUTIL2",4,0)
 ;
"RTN","BPSUTIL2",5,0)
 Q
"RTN","BPSUTIL2",6,0)
 ;
"RTN","BPSUTIL2",7,0)
 ;/**
"RTN","BPSUTIL2",8,0)
 ;Creates a new entry (or node for multiple with .01 field)
"RTN","BPSUTIL2",9,0)
 ;
"RTN","BPSUTIL2",10,0)
 ;BPFILE - file/subfile number
"RTN","BPSUTIL2",11,0)
 ;BPIEN - ien of the parent file entry in which the new subfile entry will be inserted
"RTN","BPSUTIL2",12,0)
 ;BPVAL01 - .01 value for the new entry
"RTN","BPSUTIL2",13,0)
 ;NEWRECNO -(optional) specify IEN if you want specific value
"RTN","BPSUTIL2",14,0)
 ; Note: "" then the system will assign the entry number itself.
"RTN","BPSUTIL2",15,0)
 ;BPFLGS - FLAGS parameter for UPDATE^DIE
"RTN","BPSUTIL2",16,0)
 ;LCKGL - fully specified global reference to lock
"RTN","BPSUTIL2",17,0)
 ;LCKTIME - time out for LOCK, if LOCKTIME=0 then the function will not lock the file 
"RTN","BPSUTIL2",18,0)
 ;BPNEWREC - optional, flag = if 1 then allow to create a new top level record 
"RTN","BPSUTIL2",19,0)
 ;Examples
"RTN","BPSUTIL2",20,0)
 ;top level:
"RTN","BPSUTIL2",21,0)
 ; D INSITEM(366.14,"",IBDATE,"")
"RTN","BPSUTIL2",22,0)
 ;to create with the specific ien
"RTN","BPSUTIL2",23,0)
 ; W $$INSITEM^BPSUTIL2(9002313.77,"",55555555,45555,,,,1)
"RTN","BPSUTIL2",24,0)
 ; 
"RTN","BPSUTIL2",25,0)
 ;1st level multiple:
"RTN","BPSUTIL2",26,0)
 ; subfile number = #366.141
"RTN","BPSUTIL2",27,0)
 ; parent file #366.14 entry number = 345
"RTN","BPSUTIL2",28,0)
 ; D INSITEM(366.141,345,"SUBMIT","")
"RTN","BPSUTIL2",29,0)
 ; to create multiple entry with particular entry number = 23
"RTN","BPSUTIL2",30,0)
 ; D INSITEM(366.141,345,"SUBMIT",23)
"RTN","BPSUTIL2",31,0)
 ;
"RTN","BPSUTIL2",32,0)
 ;2nd level multiple
"RTN","BPSUTIL2",33,0)
 ;parent file #366.14 entry number = 234
"RTN","BPSUTIL2",34,0)
 ;parent multiple entry number = 55
"RTN","BPSUTIL2",35,0)
 ;create multiple entry INSURANCE
"RTN","BPSUTIL2",36,0)
 ; D INSITEM(366.1412,"55,234","INS","")
"RTN","BPSUTIL2",37,0)
 ; results in :
"RTN","BPSUTIL2",38,0)
 ; ^IBCNR(366.14,234,1,55,5,0)=^366.1412PA^1^1
"RTN","BPSUTIL2",39,0)
 ; ^IBCNR(366.14,234,1,55,5,1,0)=INS
"RTN","BPSUTIL2",40,0)
 ; ^IBCNR(366.14,234,1,55,5,"B","INS",1)=
"RTN","BPSUTIL2",41,0)
 ;  (DD node for this multiple =5 ) 
"RTN","BPSUTIL2",42,0)
 ;  
"RTN","BPSUTIL2",43,0)
 ;output :
"RTN","BPSUTIL2",44,0)
 ; positive number - record # created
"RTN","BPSUTIL2",45,0)
 ; <=0 - failure
"RTN","BPSUTIL2",46,0)
 ;  See description above
"RTN","BPSUTIL2",47,0)
INSITEM(BPFILE,BPIEN,BPVAL01,NEWRECNO,BPFLGS,LCKGL,LCKTIME,BPNEWREC) ;*/
"RTN","BPSUTIL2",48,0)
 I ('$G(BPFILE)) Q "0^Invalid parameter"
"RTN","BPSUTIL2",49,0)
 I +$G(BPNEWREC)=0 I $G(NEWRECNO)>0,'$G(BPIEN) Q "0^Invalid parameter"
"RTN","BPSUTIL2",50,0)
 I $G(BPVAL01)="" Q "0^Null"
"RTN","BPSUTIL2",51,0)
 N BPLOCK S BPLOCK=0
"RTN","BPSUTIL2",52,0)
 ;I '$G(BPFILE) Q -1
"RTN","BPSUTIL2",53,0)
 ;I '$G(BPVAL01) Q -1
"RTN","BPSUTIL2",54,0)
 N BPSSI,BPIENS,BPFDA,BPERR
"RTN","BPSUTIL2",55,0)
 I '$G(NEWRECNO) N NEWRECNO S NEWRECNO=$G(NEWRECNO)
"RTN","BPSUTIL2",56,0)
 I BPIEN'="" S BPIENS="+1,"_BPIEN_"," I $L(NEWRECNO)>0 S BPSSI(1)=+NEWRECNO
"RTN","BPSUTIL2",57,0)
 I BPIEN="" S BPIENS="+1," I $L(NEWRECNO)>0 S BPSSI(1)=+NEWRECNO
"RTN","BPSUTIL2",58,0)
 S BPFDA(BPFILE,BPIENS,.01)=BPVAL01
"RTN","BPSUTIL2",59,0)
 I $L($G(LCKGL)) L +@LCKGL:(+$G(LCKTIME)) S BPLOCK=$T I 'BPLOCK Q -2  ;lock failure
"RTN","BPSUTIL2",60,0)
 D UPDATE^DIE($G(BPFLGS),"BPFDA","BPSSI","BPERR")
"RTN","BPSUTIL2",61,0)
 I BPLOCK L -@LCKGL
"RTN","BPSUTIL2",62,0)
 I $D(BPERR) D BMES^XPDUTL($G(BPERR("DIERR",1,"TEXT",1),"Update Error")) Q -1  ;D BMES^XPDUTL(BPERR("DIERR",1,"TEXT",1))
"RTN","BPSUTIL2",63,0)
 Q +$G(BPSSI(1))
"RTN","BPSUTIL2",64,0)
 ;
"RTN","BPSUTIL2",65,0)
 ;fill fields
"RTN","BPSUTIL2",66,0)
 ;Input:
"RTN","BPSUTIL2",67,0)
 ;FILENO file number
"RTN","BPSUTIL2",68,0)
 ;FLDNO field number
"RTN","BPSUTIL2",69,0)
 ;RECIEN ien string 
"RTN","BPSUTIL2",70,0)
 ;NEWVAL new value to file (internal format)
"RTN","BPSUTIL2",71,0)
 ;Output:
"RTN","BPSUTIL2",72,0)
 ;0^ NEWVAL^error if failure
"RTN","BPSUTIL2",73,0)
 ;1^ NEWVAL if success
"RTN","BPSUTIL2",74,0)
FILLFLDS(FILENO,FLDNO,RECIEN,NEWVAL) ;
"RTN","BPSUTIL2",75,0)
 I '$G(FILENO) Q "0^Invalid parameter"
"RTN","BPSUTIL2",76,0)
 I '$G(FLDNO) Q "0^Invalid parameter"
"RTN","BPSUTIL2",77,0)
 I '$G(RECIEN) Q "0^Invalid parameter"
"RTN","BPSUTIL2",78,0)
 I $G(NEWVAL)="" Q "0^Null"
"RTN","BPSUTIL2",79,0)
 N RECIENS,FDA,ERRARR
"RTN","BPSUTIL2",80,0)
 S RECIENS=RECIEN_","
"RTN","BPSUTIL2",81,0)
 S FDA(FILENO,RECIENS,FLDNO)=NEWVAL
"RTN","BPSUTIL2",82,0)
 D FILE^DIE("","FDA","ERRARR")
"RTN","BPSUTIL2",83,0)
 I $D(ERRARR) Q "0^"_NEWVAL_"^"_ERRARR("DIERR",1,"TEXT",1)
"RTN","BPSUTIL2",84,0)
 Q "1^"_NEWVAL
"RTN","BPSUTIL2",85,0)
 ;
"RTN","BPSUTIL2",86,0)
 ;API to return the GROUP INSURANCE PLAN associated with the
"RTN","BPSUTIL2",87,0)
 ;PRIMARY INSURANCE in the BPS TRANSACTION File
"RTN","BPSUTIL2",88,0)
 ;Input:
"RTN","BPSUTIL2",89,0)
 ;BPIEN59 = IEN of entry in BPS TRANSACTION File
"RTN","BPSUTIL2",90,0)
 ;Output:
"RTN","BPSUTIL2",91,0)
 ;IEN of GROUP INSURANCE PLAN file^INSURANCE COMPANY Name
"RTN","BPSUTIL2",92,0)
GETPLN59(BPIEN59) ;
"RTN","BPSUTIL2",93,0)
 N IENS,GRPNM
"RTN","BPSUTIL2",94,0)
 S IENS=+$G(^BPST(BPIEN59,9))_","_BPIEN59_","
"RTN","BPSUTIL2",95,0)
 S GRPNM=$$GET1^DIQ(9002313.59902,IENS,"PLAN ID:INSURANCE COMPANY")
"RTN","BPSUTIL2",96,0)
 Q +$G(^BPST(BPIEN59,10,+$G(^BPST(BPIEN59,9)),0))_"^"_GRPNM
"RTN","BPSUTIL2",97,0)
 ;
"RTN","BPSUTIL2",98,0)
GETPLN77(BPIEN77) ;
"RTN","BPSUTIL2",99,0)
 N BPINSIEN,BPSINSUR,BPINSDAT
"RTN","BPSUTIL2",100,0)
 I '$G(BPIEN77) Q 0
"RTN","BPSUTIL2",101,0)
 S BPINSIEN=0
"RTN","BPSUTIL2",102,0)
 ;get the USED FOR THE REQUEST=1 (active) entry in the multiple
"RTN","BPSUTIL2",103,0)
 S BPINSIEN=$O(^BPS(9002313.77,BPIEN77,5,"C",1,BPINSIEN))
"RTN","BPSUTIL2",104,0)
 I +BPINSIEN=0 Q 0
"RTN","BPSUTIL2",105,0)
 ;get BPS IBNSURER DATA pointer
"RTN","BPSUTIL2",106,0)
 S BPSINSUR=+$P($G(^BPS(9002313.77,BPIEN77,5,BPINSIEN,0)),U,3)
"RTN","BPSUTIL2",107,0)
 I BPSINSUR=0 Q 0
"RTN","BPSUTIL2",108,0)
 ;get 0th node of the BPS INSURER DATA
"RTN","BPSUTIL2",109,0)
 S BPINSDAT=$G(^BPS(9002313.78,BPSINSUR,0))
"RTN","BPSUTIL2",110,0)
 I BPINSDAT="" Q 0
"RTN","BPSUTIL2",111,0)
 Q $P(BPINSDAT,U,8)_"^"_$P(BPINSDAT,U,7)
"RTN","BPSUTIL2",112,0)
 ;
"RTN","BPSUTIL2",113,0)
GETRQST(IEN59) ; Return the BPS Request IEN for a BPS Transaction record
"RTN","BPSUTIL2",114,0)
 N BPTYPE,IEN77
"RTN","BPSUTIL2",115,0)
 I '$G(IEN59) Q ""
"RTN","BPSUTIL2",116,0)
 S BPTYPE=$$GET1^DIQ(9002313.59,IEN59,19,"I")
"RTN","BPSUTIL2",117,0)
 ; If reversal, return the Reversal Request field
"RTN","BPSUTIL2",118,0)
 I BPTYPE="U" Q $$GET1^DIQ(9002313.59,IEN59,405,"I")
"RTN","BPSUTIL2",119,0)
 ; Otherwise, return the Submission Request field
"RTN","BPSUTIL2",120,0)
 Q $$GET1^DIQ(9002313.59,IEN59,16,"I")
"RTN","BPSUTIL2",121,0)
 ;
"RTN","BPSUTIL2",122,0)
 ;Return the COB (payer sequence) by IEN of the BPS TRANSACTION file
"RTN","BPSUTIL2",123,0)
COB59(BPSIEN59) ;
"RTN","BPSUTIL2",124,0)
 ;try to get it from 9002313.59, if it was not created yet then get it from IEN itself
"RTN","BPSUTIL2",125,0)
 I '$G(BPSIEN59) Q ""
"RTN","BPSUTIL2",126,0)
 Q $S($P($G(^BPST(BPSIEN59,0)),U,14):$P(^BPST(BPSIEN59,0),U,14),1:$E($P(BPSIEN59,".",2),5,5))
"RTN","BPSUTIL2",127,0)
 ;
"RTN","BPSUTIL2",128,0)
 ;Return the plan's COB (from PATIENT file) by IEN of the BPS TRANSACTION file and entry # 
"RTN","BPSUTIL2",129,0)
PLANCOB(BPSIEN59,BPSENTRY) ;
"RTN","BPSUTIL2",130,0)
 I +$G(BPSENTRY)=0 S BPSENTRY=1 ;the first entry by default
"RTN","BPSUTIL2",131,0)
 Q $P($G(^BPST(BPSIEN59,10,BPSENTRY,3)),U,6)
"RTN","BPSUTIL2",132,0)
 ;
"RTN","BPSUTIL2",133,0)
 ;Return the IEN of BPS TRANSACTION file by IEN of BPS CLAIMS file
"RTN","BPSUTIL2",134,0)
CLAIM59(BPS02) ;
"RTN","BPSUTIL2",135,0)
 Q +$P($G(^BPSC(BPS02,0)),U,8)
"RTN","BPSUTIL2",136,0)
 ;
"RTN","BPSUTIL2",137,0)
 ;Return BPS TRANSACTIONS for associated primary and secondary claims
"RTN","BPSUTIL2",138,0)
ALLCOB59(BP59) ;
"RTN","BPSUTIL2",139,0)
 N BPSP,BPSS,BPRX,BPRXI,BPRXR
"RTN","BPSUTIL2",140,0)
 S BPRX=$$RXREF^BPSSCRU2(BP59),BPRXI=$P(BPRX,U),BPRXR=$P(BPRX,U,2)
"RTN","BPSUTIL2",141,0)
 S BPSP=$$IEN59^BPSOSRX(BPRXI,BPRXR,1),BPSS=$$IEN59^BPSOSRX(BPRXI,BPRXR,2)
"RTN","BPSUTIL2",142,0)
 I '$D(^BPST(BPSP)) S BPSP=""
"RTN","BPSUTIL2",143,0)
 I '$D(^BPST(BPSS)) S BPSS=""
"RTN","BPSUTIL2",144,0)
 Q BPSP_"^"_BPSS
"RTN","BPSUTIL2",145,0)
 ;
"RTN","BPSUTIL2",146,0)
 ;input: BPS59 - ien of the BPS TRANSACTION file
"RTN","BPSUTIL2",147,0)
 ;returns three pieces:
"RTN","BPSUTIL2",148,0)
 ;COB  = Coordination Of Benefit indicator of the insurance as it is stored in (#.2) COB field of the (#.3121) insurance Type multiple of the Patient file (#2) 
"RTN","BPSUTIL2",149,0)
 ; 1- primary, 2 -secondary, 3 -tertiary
"RTN","BPSUTIL2",150,0)
 ;RXCOB =  the payer sequence indicator of the claim which was sent to the payer as a result of this call: 1- primary, 2 -secondary, 3 -tertiary
"RTN","BPSUTIL2",151,0)
 ;INSURANCE = Name of the insurance company that was billed as a result of this call
"RTN","BPSUTIL2",152,0)
CLMINFO(BPS59) ;
"RTN","BPSUTIL2",153,0)
 N RETV
"RTN","BPSUTIL2",154,0)
 S $P(RETV,U,1)=$$PLANCOB(BPS59,1)
"RTN","BPSUTIL2",155,0)
 S $P(RETV,U,2)=$$COB59(BPS59)
"RTN","BPSUTIL2",156,0)
 S $P(RETV,U,3)=$$INSNAME^BPSSCRU6(BPS59)
"RTN","BPSUTIL2",157,0)
 Q RETV
"RTN","BPSUTIL2",158,0)
 ;
"RTN","BPSUTIL2",159,0)
 ;to determine whether the secondary claim is payable 
"RTN","BPSUTIL2",160,0)
 ; BPSRIM59 - ien of PRIMARY claim in the BPS TRANSACTION
"RTN","BPSUTIL2",161,0)
 ;returns
"RTN","BPSUTIL2",162,0)
 ; 0 - the secondary claim doesn't exist
"RTN","BPSUTIL2",163,0)
 ; 0 - the secondary claim exists and it's not payable
"RTN","BPSUTIL2",164,0)
 ; 1 - the secondary claim exists and it's payable
"RTN","BPSUTIL2",165,0)
PAYBLSEC(BPSRIM59) ;
"RTN","BPSUTIL2",166,0)
 N BRXIEN,BFILL,BPSSTAT2,BPZ
"RTN","BPSUTIL2",167,0)
 S BPZ=$$RXREF^BPSSCRU2(BPSRIM59)
"RTN","BPSUTIL2",168,0)
 S BRXIEN=+BPZ
"RTN","BPSUTIL2",169,0)
 S BFILL=+$P(BPZ,U,2)
"RTN","BPSUTIL2",170,0)
 S BPSSTAT2=$P($$STATUS^BPSOSRX(BRXIEN,BFILL,0,,2),U,1)
"RTN","BPSUTIL2",171,0)
 ; check if the payer IS going to PAY according to the last response
"RTN","BPSUTIL2",172,0)
 Q $$PAYABLE^BPSOSRX5(BPSSTAT2)
"RTN","BPSUTIL2",173,0)
 ;
"RTN","BPSUTIL2",174,0)
 ;to determine whether the primary claim is payable 
"RTN","BPSUTIL2",175,0)
 ; BPSSEC59 - ien of SECONDARY claim in the BPS TRANSACTION
"RTN","BPSUTIL2",176,0)
 ;returns
"RTN","BPSUTIL2",177,0)
 ; 0 - the primary claim doesn't exist
"RTN","BPSUTIL2",178,0)
 ; 0 - the primary claim exists and it's not payable
"RTN","BPSUTIL2",179,0)
 ; ien of 399 - the primary claim exists
"RTN","BPSUTIL2",180,0)
PAYBLPRI(BPSSEC59) ;
"RTN","BPSUTIL2",181,0)
 N BRXIEN,BFILL,BPSSTAT1,BPZ,BPZ1,BPSARR
"RTN","BPSUTIL2",182,0)
 S BPZ=$$RXREF^BPSSCRU2(BPSSEC59)
"RTN","BPSUTIL2",183,0)
 S BRXIEN=+BPZ
"RTN","BPSUTIL2",184,0)
 S BFILL=+$P(BPZ,U,2)
"RTN","BPSUTIL2",185,0)
 S BPSSTAT1=$P($$STATUS^BPSOSRX(BRXIEN,BFILL,0,,1),U,1)
"RTN","BPSUTIL2",186,0)
 ; check if the payer IS going to PAY according to the last response
"RTN","BPSUTIL2",187,0)
 I +$$PAYABLE^BPSOSRX5(BPSSTAT1)=0 Q 0
"RTN","BPSUTIL2",188,0)
 S BPZ=$$RXBILL^IBNCPUT3(BRXIEN,BFILL,"P","",.BPSARR)
"RTN","BPSUTIL2",189,0)
 I +$P(BPZ,U,2)>0 Q +$P(BPZ,U,2)       ; latest bill in AR active status
"RTN","BPSUTIL2",190,0)
 S BPZ1=+$O(BPSARR(999999999),-1)      ; latest bill in any status
"RTN","BPSUTIL2",191,0)
 I BPZ1>0 Q BPZ1
"RTN","BPSUTIL2",192,0)
 Q 0
"RTN","BPSUTIL2",193,0)
 ;
"RTN","BPSUTIL2",194,0)
 ;SLT - BPS*1.0*11
"RTN","BPSUTIL2",195,0)
LASTDOS(BP59,FMT) ;last date of service from most recent claim
"RTN","BPSUTIL2",196,0)
 ; input:
"RTN","BPSUTIL2",197,0)
 ;   BP59 -> claim/transaction
"RTN","BPSUTIL2",198,0)
 ;   FMT  -> Date format indicator (0:MM/DD; 1:Mmm dd,yyyy)
"RTN","BPSUTIL2",199,0)
 ; output:
"RTN","BPSUTIL2",200,0)
 ;   Date of Service e.g. 06/01
"RTN","BPSUTIL2",201,0)
 ;
"RTN","BPSUTIL2",202,0)
 N BPCLAIM,DOSDT,X,Y
"RTN","BPSUTIL2",203,0)
 ;
"RTN","BPSUTIL2",204,0)
 I $G(FMT)="" S FMT=0
"RTN","BPSUTIL2",205,0)
 S BPCLAIM=0,DOSDT=""
"RTN","BPSUTIL2",206,0)
 I $D(^BPST(BP59,4)) S BPCLAIM=$P(^BPST(BP59,4),U)
"RTN","BPSUTIL2",207,0)
 S:'BPCLAIM BPCLAIM=$P(^BPST(BP59,0),U,4)
"RTN","BPSUTIL2",208,0)
 I BPCLAIM]"" D
"RTN","BPSUTIL2",209,0)
 . S DOSDT=$$DOSCLM^BPSSCRLG(BPCLAIM)
"RTN","BPSUTIL2",210,0)
 . S:FMT=0 DOSDT=$P(DOSDT,"/",1,2)
"RTN","BPSUTIL2",211,0)
 . D:FMT=1
"RTN","BPSUTIL2",212,0)
 . . S X=DOSDT D ^%DT
"RTN","BPSUTIL2",213,0)
 . . I Y=-1 S DOSDT="" Q
"RTN","BPSUTIL2",214,0)
 . . D DD^%DT S DOSDT=Y
"RTN","BPSUTIL2",215,0)
 Q DOSDT
"RTN","BPSUTIL2",216,0)
 ;
"RTN","BPSUTIL2",217,0)
 ;Returns the latest Date Of Service for the FILL that matches the DOS the payer returns using 9002313.57
"RTN","BPSUTIL2",218,0)
 ;Both DOS and SUBMIT DATE from the payer are considered when matching
"RTN","BPSUTIL2",219,0)
 ;OUTPUT Variables
"RTN","BPSUTIL2",220,0)
 ; DOS - The latest DOS for the FILL that matches the date returned by the payer
"RTN","BPSUTIL2",221,0)
 ;INPUT Variables
"RTN","BPSUTIL2",222,0)
 ; ECME - ECME number (pointer to #52)
"RTN","BPSUTIL2",223,0)
 ; RCDATE - The DOS returned with the payment by the payer
"RTN","BPSUTIL2",224,0)
 ;
"RTN","BPSUTIL2",225,0)
CLMECME(ECME,RCDATE) ;
"RTN","BPSUTIL2",226,0)
 N ARY,BEFORE,BPSTL,DATE,DOS,FILL,SUBMIT
"RTN","BPSUTIL2",227,0)
 I $G(ECME)=""!($G(RCDATE)="") Q ""
"RTN","BPSUTIL2",228,0)
 S ECME=+$G(ECME),BEFORE=0,FILL=""
"RTN","BPSUTIL2",229,0)
 S BPSTL="" F  S BPSTL=$O(^BPSTL("AEC",ECME,BPSTL)) Q:BPSTL=""  D  Q:BEFORE
"RTN","BPSUTIL2",230,0)
 . I '$D(^BPSTL(BPSTL,0)) Q  ;Bad AEC entry
"RTN","BPSUTIL2",231,0)
 . S SUBMIT=$P($P($G(^BPSTL(BPSTL,0)),U,7),"."),FILL=$P($G(^BPSTL(BPSTL,1)),U,1),DOS=$P($G(^BPSTL(BPSTL,12)),U,2)
"RTN","BPSUTIL2",232,0)
 . I FILL=""!(DOS="") Q
"RTN","BPSUTIL2",233,0)
 . I RCDATE<DOS S BEFORE=1 Q  ;Quit when you get to a date that is earlier than the payment date
"RTN","BPSUTIL2",234,0)
 . S ARY("D",DOS,FILL)="",ARY("F",FILL,DOS)=""  ;Fill arrays
"RTN","BPSUTIL2",235,0)
 . I SUBMIT,SUBMIT'=DOS S ARY("D",SUBMIT,FILL)="",ARY("F",FILL,SUBMIT)=""  ;If the submit date is different than the DOS, include array entries for it
"RTN","BPSUTIL2",236,0)
 I '$D(ARY) Q ""  ;There were no entries in the array
"RTN","BPSUTIL2",237,0)
 I $D(ARY("D",RCDATE)) S FILL=$O(ARY("D",RCDATE,""),-1) ;Get the fill for the matching date
"RTN","BPSUTIL2",238,0)
 I FILL="" Q ""  ;No matching date
"RTN","BPSUTIL2",239,0)
 Q $O(ARY("F",FILL,""),-1)  ;Return the last date for the correct fill
"RTN","BPSUTIL2",240,0)
 ;
"RTN","BPSUTIL2",241,0)
VALECME(ECMENUM) ; Validates the ECME Number 
"RTN","BPSUTIL2",242,0)
 ; Input: ECMENUM - ECME Number to be validated
"RTN","BPSUTIL2",243,0)
 ;Output: 1: Valid ECME Number / 0: Invalid ECME Number
"RTN","BPSUTIL2",244,0)
 ;
"RTN","BPSUTIL2",245,0)
 N NUMVAL
"RTN","BPSUTIL2",246,0)
 S NUMVAL=+$G(ECMENUM) I 'NUMVAL!$L(NUMVAL)>12 Q 0
"RTN","BPSUTIL2",247,0)
 Q ($D(^BPSTL("AEC",NUMVAL))>0)
"SEC","^DIC",9002313.2,9002313.2,0,"AUDIT")
@
"SEC","^DIC",9002313.2,9002313.2,0,"DD")
@
"SEC","^DIC",9002313.2,9002313.2,0,"DEL")
@
"SEC","^DIC",9002313.2,9002313.2,0,"LAYGO")
@
"SEC","^DIC",9002313.2,9002313.2,0,"RD")
Pp
"SEC","^DIC",9002313.2,9002313.2,0,"WR")
@
"SEC","^DIC",9002313.91,9002313.91,0,"AUDIT")
@
"SEC","^DIC",9002313.91,9002313.91,0,"DD")
@
"SEC","^DIC",9002313.91,9002313.91,0,"DEL")
@
"SEC","^DIC",9002313.91,9002313.91,0,"LAYGO")
@
"SEC","^DIC",9002313.91,9002313.91,0,"RD")
Pp
"SEC","^DIC",9002313.91,9002313.91,0,"WR")
@
"SEC","^DIC",9002313.93,9002313.93,0,"AUDIT")
@
"SEC","^DIC",9002313.93,9002313.93,0,"DD")
@
"SEC","^DIC",9002313.93,9002313.93,0,"DEL")
@
"SEC","^DIC",9002313.93,9002313.93,0,"LAYGO")
@
"SEC","^DIC",9002313.93,9002313.93,0,"RD")
Pp
"SEC","^DIC",9002313.93,9002313.93,0,"WR")
@
"UP",9002313.02,9002313.0201,-1)
9002313.02^400
"UP",9002313.02,9002313.0201,0)
9002313.0201
"UP",9002313.02,9002313.022044,-2)
9002313.02^400
"UP",9002313.02,9002313.022044,-1)
9002313.0201^B44
"UP",9002313.02,9002313.022044,0)
9002313.022044
"UP",9002313.03,9002313.0301,-1)
9002313.03^1000
"UP",9002313.03,9002313.0301,0)
9002313.0301
"UP",9002313.03,9002313.032052,-2)
9002313.03^1000
"UP",9002313.03,9002313.032052,-1)
9002313.0301^B52
"UP",9002313.03,9002313.032052,0)
9002313.032052
"UP",9002313.03,9002313.035501,-2)
9002313.03^1000
"UP",9002313.03,9002313.035501,-1)
9002313.0301^355.01
"UP",9002313.03,9002313.035501,0)
9002313.035501
"UP",9002313.31,9002313.3123,-2)
9002313.31^2
"UP",9002313.31,9002313.3123,-1)
9002313.312^3
"UP",9002313.31,9002313.3123,0)
9002313.3123
"UP",9002313.31,9002313.31231,-3)
9002313.31^2
"UP",9002313.31,9002313.31231,-2)
9002313.312^3
"UP",9002313.31,9002313.31231,-1)
9002313.3123^1
"UP",9002313.31,9002313.31231,0)
9002313.31231
"UP",9002313.31,9002313.31234,-3)
9002313.31^2
"UP",9002313.31,9002313.31234,-2)
9002313.312^3
"UP",9002313.31,9002313.31234,-1)
9002313.3123^4
"UP",9002313.31,9002313.31234,0)
9002313.31234
"UP",9002313.31,9002313.3124,-2)
9002313.31^2
"UP",9002313.31,9002313.3124,-1)
9002313.312^4
"UP",9002313.31,9002313.3124,0)
9002313.3124
"UP",9002313.57,9002313.5714,-1)
9002313.57^14
"UP",9002313.57,9002313.5714,0)
9002313.5714
"UP",9002313.57,9002313.57141,-2)
9002313.57^14
"UP",9002313.57,9002313.57141,-1)
9002313.5714^1
"UP",9002313.57,9002313.57141,0)
9002313.57141
"UP",9002313.59,9002313.5914,-1)
9002313.59^14
"UP",9002313.59,9002313.5914,0)
9002313.5914
"UP",9002313.59,9002313.59141,-2)
9002313.59^14
"UP",9002313.59,9002313.59141,-1)
9002313.5914^1
"UP",9002313.59,9002313.59141,0)
9002313.59141
"UP",9002313.77,9002313.778,-1)
9002313.77^8
"UP",9002313.77,9002313.778,0)
9002313.778
"UP",9002313.77,9002313.7781,-2)
9002313.77^8
"UP",9002313.77,9002313.7781,-1)
9002313.778^1
"UP",9002313.77,9002313.7781,0)
9002313.7781
"UP",9002313.92,9002313.9229,-1)
9002313.92^290
"UP",9002313.92,9002313.9229,0)
9002313.9229
"UP",9002313.92,9002313.92291,-2)
9002313.92^290
"UP",9002313.92,9002313.92291,-1)
9002313.9229^1
"UP",9002313.92,9002313.92291,0)
9002313.92291
"UP",9002313.92,9002313.92292,-2)
9002313.92^290
"UP",9002313.92,9002313.92292,-1)
9002313.9229^2
"UP",9002313.92,9002313.92292,0)
9002313.92292
"UP",9002313.92,9002313.923,-1)
9002313.92^300
"UP",9002313.92,9002313.923,0)
9002313.923
"UP",9002313.92,9002313.9231,-2)
9002313.92^300
"UP",9002313.92,9002313.9231,-1)
9002313.923^1
"UP",9002313.92,9002313.9231,0)
9002313.9231
"UP",9002313.92,9002313.9232,-2)
9002313.92^300
"UP",9002313.92,9002313.9232,-1)
9002313.923^2
"UP",9002313.92,9002313.9232,0)
9002313.9232
"VER")
8.0^22.0
"^DD",9002313.02,9002313.02,326,0)
PATIENT TELEPHONE NUMBER^F^^321;6^K:$L(X)>12!($L(X)<12) X
"^DD",9002313.02,9002313.02,326,3)
Answer must be 12 characters in length
"^DD",9002313.02,9002313.02,326,21,0)
^.001^1^1^3141231^^
"^DD",9002313.02,9002313.02,326,21,1,0)
Ten-digit phone number of patient.  NCPDP standard field 326-CQ.
"^DD",9002313.02,9002313.02,326,23,0)
^.001^9^9^3141231^^
"^DD",9002313.02,9002313.02,326,23,1,0)
Format=AAAEEENNNN
"^DD",9002313.02,9002313.02,326,23,2,0)
AAA=Area Code
"^DD",9002313.02,9002313.02,326,23,3,0)
EEE=Exchange
"^DD",9002313.02,9002313.02,326,23,4,0)
NNNN=Number
"^DD",9002313.02,9002313.02,326,23,5,0)
 
"^DD",9002313.02,9002313.02,326,23,6,0)
Examples: If the phone number is (313) 555-1212, this field would 
"^DD",9002313.02,9002313.02,326,23,7,0)
reflect: 3135551212.
"^DD",9002313.02,9002313.02,326,23,8,0)
 
"^DD",9002313.02,9002313.02,326,23,9,0)
REQUEST PATIENT SEGMENT
"^DD",9002313.02,9002313.02,326,"DT")
3141231
"^DD",9002313.02,9002313.02,2008,0)
PATIENT STREET ADDRESS LINE 1^F^^B00;8^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.02,2008,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.02,2008,21,0)
^^2^2^3141223^
"^DD",9002313.02,9002313.02,2008,21,1,0)
This is used to store NCPDP field B08-7A (Patient Street Address Line 1), 
"^DD",9002313.02,9002313.02,2008,21,2,0)
which is defined as "Free-form text for address line 1 information".
"^DD",9002313.02,9002313.02,2008,"DT")
3141223
"^DD",9002313.02,9002313.02,2009,0)
PATIENT STREET ADDRESS LINE 2^F^^B00;9^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.02,2009,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.02,2009,21,0)
^^2^2^3141223^
"^DD",9002313.02,9002313.02,2009,21,1,0)
This is used to store NCPDP field B09-7B (Patient Street Address Line 2), 
"^DD",9002313.02,9002313.02,2009,21,2,0)
which is defined as "Free-form text for address line 2 information".
"^DD",9002313.02,9002313.02,2009,"DT")
3141231
"^DD",9002313.02,9002313.02,2038,0)
PATIENT ID ASSOC COUNTRY CODE^F^^B30;8^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.02,2038,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.02,2038,21,0)
^^2^2^3141231^
"^DD",9002313.02,9002313.02,2038,21,1,0)
This is used to store NCPDP field B38-1Y (Patient ID Associated Country 
"^DD",9002313.02,9002313.02,2038,21,2,0)
Code), which is defined as "Code of the country".
"^DD",9002313.02,9002313.02,2038,"DT")
3141231
"^DD",9002313.02,9002313.0201,320,0)
EMPLOYER TELEPHONE NUMBER^F^^310;10^K:$L(X)>12!($L(X)<12) X
"^DD",9002313.02,9002313.0201,320,3)
Answer must be 12 characters in length
"^DD",9002313.02,9002313.0201,320,21,0)
^.001^1^1^3141231^^
"^DD",9002313.02,9002313.0201,320,21,1,0)
Ten digit phone number of employer.  NCPDP standard field 320-CK.
"^DD",9002313.02,9002313.0201,320,23,0)
^.001^9^9^3141231^^
"^DD",9002313.02,9002313.0201,320,23,1,0)
Format=AAAEEENNNN
"^DD",9002313.02,9002313.0201,320,23,2,0)
 
"^DD",9002313.02,9002313.0201,320,23,3,0)
AAA=Area Code
"^DD",9002313.02,9002313.0201,320,23,4,0)
EEE=Exchange Code
"^DD",9002313.02,9002313.0201,320,23,5,0)
NNNN=Number
"^DD",9002313.02,9002313.0201,320,23,6,0)
 
"^DD",9002313.02,9002313.0201,320,23,7,0)
Examples: A phone number of 212-555-1212 would reflect: 2125551212.
"^DD",9002313.02,9002313.0201,320,23,8,0)
 
"^DD",9002313.02,9002313.0201,320,23,9,0)
REQUEST WORKER'S COMPENSATION SEGMENT
"^DD",9002313.02,9002313.0201,320,"DT")
3141231
"^DD",9002313.02,9002313.0201,498.12,0)
PRESCRIBER TELEPHONE NUMBER^F^^498;12^K:$L(X)>12!($L(X)<12) X
"^DD",9002313.02,9002313.0201,498.12,3)
Answer must be 12 characters in length
"^DD",9002313.02,9002313.0201,498.12,21,0)
^.001^1^1^3141231^^
"^DD",9002313.02,9002313.0201,498.12,21,1,0)
Ten digit phone number of the prescriber.  NCPDP standard field 498-PM.
"^DD",9002313.02,9002313.0201,498.12,23,0)
^.001^10^10^3141231^^
"^DD",9002313.02,9002313.0201,498.12,23,1,0)
Format=AAAEEENNNN
"^DD",9002313.02,9002313.0201,498.12,23,2,0)
 
"^DD",9002313.02,9002313.0201,498.12,23,3,0)
AAA=Area Code
"^DD",9002313.02,9002313.0201,498.12,23,4,0)
EEE=Exchange Code
"^DD",9002313.02,9002313.0201,498.12,23,5,0)
NNNN=Number
"^DD",9002313.02,9002313.0201,498.12,23,6,0)
 
"^DD",9002313.02,9002313.0201,498.12,23,7,0)
Examples: This field would reflect the telephone number of (414) 555-1212 
"^DD",9002313.02,9002313.0201,498.12,23,8,0)
as 4145551212.
"^DD",9002313.02,9002313.0201,498.12,23,9,0)
 
"^DD",9002313.02,9002313.0201,498.12,23,10,0)
REQUEST PRESCRIBER SEGMENT.
"^DD",9002313.02,9002313.0201,498.12,"DT")
3141231
"^DD",9002313.02,9002313.0201,1093,0)
SERVICE PROVIDER COUNTRY CODE^F^^A90;3^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.0201,1093,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.0201,1093,21,0)
^^2^2^3141231^
"^DD",9002313.02,9002313.0201,1093,21,1,0)
This is used to hold NCPDP file A93-IT (Service Provider Country Code), 
"^DD",9002313.02,9002313.0201,1093,21,2,0)
which is defined as "Indicates the country of the provider".
"^DD",9002313.02,9002313.0201,1093,"DT")
3141230
"^DD",9002313.02,9002313.0201,2013,0)
AUTH REP STREET ADDRESS LINE 1^F^^B11;3^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2013,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2013,21,0)
^^3^3^3141230^
"^DD",9002313.02,9002313.0201,2013,21,1,0)
This is used to store NCPDP field B13-7D (Authorized Representative 
"^DD",9002313.02,9002313.0201,2013,21,2,0)
Street Address Line 1), which is defined as "Free-form text for address 
"^DD",9002313.02,9002313.0201,2013,21,3,0)
line 1 information".
"^DD",9002313.02,9002313.0201,2013,"DT")
3141230
"^DD",9002313.02,9002313.0201,2014,0)
AUTH REP STREET ADDRESS LINE 2^F^^B11;4^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2014,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2014,21,0)
^^3^3^3141230^
"^DD",9002313.02,9002313.0201,2014,21,1,0)
This is used to store NCPDP field B14-8B (Authorized Representative 
"^DD",9002313.02,9002313.0201,2014,21,2,0)
Street Address Line 2), which is defined as "Free-form text for address 
"^DD",9002313.02,9002313.0201,2014,21,3,0)
line 2 information".
"^DD",9002313.02,9002313.0201,2014,"DT")
3141230
"^DD",9002313.02,9002313.0201,2015,0)
EMPLOYER STREET ADDRESS LINE 1^F^^B10;5^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2015,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2015,21,0)
^^2^2^3141223^
"^DD",9002313.02,9002313.0201,2015,21,1,0)
This is used to store NCPDP field B15-8D (Employer Street Address Line 
"^DD",9002313.02,9002313.0201,2015,21,2,0)
1), which is defined as "Free-form text for address line1 information".
"^DD",9002313.02,9002313.0201,2015,"DT")
3141223
"^DD",9002313.02,9002313.0201,2016,0)
EMPLOYER STREET ADDRESS LINE 2^F^^B10;6^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2016,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2016,21,0)
^^2^2^3141223^
"^DD",9002313.02,9002313.0201,2016,21,1,0)
This is used to store NCPDP field B16-7G (Employer Street Address Line 
"^DD",9002313.02,9002313.0201,2016,21,2,0)
2), which is defined as "Free-form text for address line 2 information".
"^DD",9002313.02,9002313.0201,2016,"DT")
3141223
"^DD",9002313.02,9002313.0201,2017,0)
EMPLOYER CONTACT FIRST NAME^F^^B10;7^K:$L(X)>37!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2017,3)
Answer must be 1-37 characters in length.
"^DD",9002313.02,9002313.0201,2017,21,0)
^^2^2^3141223^
"^DD",9002313.02,9002313.0201,2017,21,1,0)
This is used to store NCPDP field B17-7H (Employer Contact First Name), 
"^DD",9002313.02,9002313.0201,2017,21,2,0)
which is defined as "First name of the employer's primary contact".
"^DD",9002313.02,9002313.0201,2017,"DT")
3141223
"^DD",9002313.02,9002313.0201,2018,0)
EMPLOYER CONTACT LAST NAME^F^^B10;8^K:$L(X)>37!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2018,3)
Answer must be 1-37 characters in length.
"^DD",9002313.02,9002313.0201,2018,21,0)
^^2^2^3141223^
"^DD",9002313.02,9002313.0201,2018,21,1,0)
This is used to store NCPDP field B18-7J (Employer Contact Last Name), 
"^DD",9002313.02,9002313.0201,2018,21,2,0)
which is defined as "Last name of the employer's primary contact".
"^DD",9002313.02,9002313.0201,2018,"DT")
3141223
"^DD",9002313.02,9002313.0201,2019,0)
EMPLOYER PHONE NUMBER EXT^F^^B10;9^K:$L(X)>10!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2019,3)
Answer must be 1-10 characters in length.
"^DD",9002313.02,9002313.0201,2019,21,0)
^^2^2^3141223^
"^DD",9002313.02,9002313.0201,2019,21,1,0)
This is used to store NCPDP field B19-7K (Employer Telephone Number 
"^DD",9002313.02,9002313.0201,2019,21,2,0)
Extension), which is defined as "Extension of the telephone number".
"^DD",9002313.02,9002313.0201,2019,"DT")
3141223
"^DD",9002313.02,9002313.0201,2020,0)
FACILITY STREET ADDRESS LINE 1^F^^B11;10^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2020,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2020,21,0)
^^3^3^3141231^
"^DD",9002313.02,9002313.0201,2020,21,1,0)
This is used to store NCPDP field B20-7M (Facility Street Address Line 1),
"^DD",9002313.02,9002313.0201,2020,21,2,0)
which is defined as "Free form text for Facility address line 1 
"^DD",9002313.02,9002313.0201,2020,21,3,0)
information".
"^DD",9002313.02,9002313.0201,2020,"DT")
3141230
"^DD",9002313.02,9002313.0201,2021,0)
FACILITY STREET ADDRESS LINE 2^F^^B20;1^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2021,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2021,21,0)
^^3^3^3141231^
"^DD",9002313.02,9002313.0201,2021,21,1,0)
This is used to store NCPDP field B21-7N (Facility Street Address Line 2),
"^DD",9002313.02,9002313.0201,2021,21,2,0)
which is defined as "Free form text for Facility address line 2 
"^DD",9002313.02,9002313.0201,2021,21,3,0)
information".
"^DD",9002313.02,9002313.0201,2021,"DT")
3141230
"^DD",9002313.02,9002313.0201,2024,0)
PAY TO STREET ADDRESS LINE 1^F^^B20;4^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2024,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2024,21,0)
^^3^3^3141223^
"^DD",9002313.02,9002313.0201,2024,21,1,0)
This is used to store NCPDP field B24-7R (Pay To Street Address Line 1), 
"^DD",9002313.02,9002313.0201,2024,21,2,0)
which is defined as "Line 1 of street address of the entity to receive 
"^DD",9002313.02,9002313.0201,2024,21,3,0)
payment for claim".
"^DD",9002313.02,9002313.0201,2024,"DT")
3141223
"^DD",9002313.02,9002313.0201,2025,0)
PAY TO STREET ADDRESS LINE 2^F^^B20;5^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2025,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2025,21,0)
^^3^3^3141223^
"^DD",9002313.02,9002313.0201,2025,21,1,0)
This is used to store NCPDP field B25-7S (Pay to Street Address Line 2), 
"^DD",9002313.02,9002313.0201,2025,21,2,0)
which is defined as "Line 2 of street address of the entity to receive 
"^DD",9002313.02,9002313.0201,2025,21,3,0)
payment for claim".
"^DD",9002313.02,9002313.0201,2025,"DT")
3141223
"^DD",9002313.02,9002313.0201,2026,0)
PRESCRIBER PHONE NUMBER EXT^F^^B20;6^K:$L(X)>10!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2026,3)
Answer must be 1-10 characters in length.
"^DD",9002313.02,9002313.0201,2026,21,0)
^^2^2^3141231^
"^DD",9002313.02,9002313.0201,2026,21,1,0)
This is used to store NCPDP field B26-7T (Prescriber Telephone Number 
"^DD",9002313.02,9002313.0201,2026,21,2,0)
Extension), which is defined as "Extension of the telephone number".
"^DD",9002313.02,9002313.0201,2026,"DT")
3141223
"^DD",9002313.02,9002313.0201,2027,0)
PRESCRIBER STREET ADDR LINE 1^F^^B20;7^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2027,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2027,21,0)
^^3^3^3141231^
"^DD",9002313.02,9002313.0201,2027,21,1,0)
This is used to store NCPDP field B27-7U (Prescriber Street Address Line
"^DD",9002313.02,9002313.0201,2027,21,2,0)
1), which is defined as "Free form text for prescriber address line 1
"^DD",9002313.02,9002313.0201,2027,21,3,0)
information".
"^DD",9002313.02,9002313.0201,2027,"DT")
3141223
"^DD",9002313.02,9002313.0201,2028,0)
PRESCRIBER STREET ADDR LINE 2^F^^B20;8^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2028,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2028,21,0)
^^3^3^3141223^
"^DD",9002313.02,9002313.0201,2028,21,1,0)
This is used to store NCPDP field B28-7V (Prescriber Street Address Line 
"^DD",9002313.02,9002313.0201,2028,21,2,0)
2), which is defined as "Free form text for prescriber address line 2 
"^DD",9002313.02,9002313.0201,2028,21,3,0)
information".
"^DD",9002313.02,9002313.0201,2028,"DT")
3141223
"^DD",9002313.02,9002313.0201,2029,0)
PURCHASER STREET ADDRESS LINE1^F^^B21;9^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2029,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2029,21,0)
^^2^2^3141230^
"^DD",9002313.02,9002313.0201,2029,21,1,0)
This is used to store NCPDP field B29-7W (Purchaser Street Address Line 
"^DD",9002313.02,9002313.0201,2029,21,2,0)
1), which is defined as "Free-form text for address line 1 information".
"^DD",9002313.02,9002313.0201,2029,"DT")
3141230
"^DD",9002313.02,9002313.0201,2030,0)
PURCHASER STREET ADDRESS LINE2^F^^B21;10^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2030,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2030,21,0)
^^2^2^3141231^
"^DD",9002313.02,9002313.0201,2030,21,1,0)
This is used to store NCPDP field B30-7X (Purchaser Street Address Line 
"^DD",9002313.02,9002313.0201,2030,21,2,0)
2), which is defined as "Free-form text for address line 2 information".
"^DD",9002313.02,9002313.0201,2030,"DT")
3141230
"^DD",9002313.02,9002313.0201,2031,0)
SERVICE PROV STREET ADD LINE 1^F^^B30;1^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2031,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2031,21,0)
^^3^3^3141230^
"^DD",9002313.02,9002313.0201,2031,21,1,0)
This is used to store NCPDP field B31-7Y (Service Provider Street Address 
"^DD",9002313.02,9002313.0201,2031,21,2,0)
Line 1), which is defined as "Line 1 of the street address of the 
"^DD",9002313.02,9002313.0201,2031,21,3,0)
service provider".
"^DD",9002313.02,9002313.0201,2031,"DT")
3141230
"^DD",9002313.02,9002313.0201,2032,0)
SERVICE PROV STREET ADD LINE 2^F^^B30;2^K:$L(X)>42!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2032,3)
Answer must be 1-42 characters in length.
"^DD",9002313.02,9002313.0201,2032,21,0)
^.001^3^3^3141230^^
"^DD",9002313.02,9002313.0201,2032,21,1,0)
This is used to store NCPDP field B32-7Z (Service Provider Street Address 
"^DD",9002313.02,9002313.0201,2032,21,2,0)
Line 2), which is defined as "Line 2 of the street address of the 
"^DD",9002313.02,9002313.0201,2032,21,3,0)
service provider".
"^DD",9002313.02,9002313.0201,2032,"DT")
3141230
"^DD",9002313.02,9002313.0201,2034,0)
AUTH REP COUNTRY CODE^F^^B30;4^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2034,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.0201,2034,21,0)
^^2^2^3141230^
"^DD",9002313.02,9002313.0201,2034,21,1,0)
This is used to store NCPDP field B34-1U (Authorized Representative 
"^DD",9002313.02,9002313.0201,2034,21,2,0)
Country Code), which is defined as "Indicates the county of the pharmacy".
"^DD",9002313.02,9002313.0201,2034,"DT")
3141230
"^DD",9002313.02,9002313.0201,2035,0)
EMPLOYER COUNTRY CODE^F^^B30;5^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2035,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.0201,2035,21,0)
^^2^2^3141231^
"^DD",9002313.02,9002313.0201,2035,21,1,0)
This is used to store NCPDP field B35-1V (Employer Country Code), which is
"^DD",9002313.02,9002313.0201,2035,21,2,0)
defined as "Employer Country Code".
"^DD",9002313.02,9002313.0201,2035,"DT")
3141223
"^DD",9002313.02,9002313.0201,2037,0)
FACILITY COUNTRY CODE^F^^B30;7^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2037,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.0201,2037,21,0)
^^2^2^3141230^
"^DD",9002313.02,9002313.0201,2037,21,1,0)
This is used to store NCPDP field B37-1X (Facility Country Code), which is
"^DD",9002313.02,9002313.0201,2037,21,2,0)
defined as "Code of the country".
"^DD",9002313.02,9002313.0201,2037,"DT")
3141230
"^DD",9002313.02,9002313.0201,2039,0)
PAY TO COUNTRY CODE^F^^B30;9^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2039,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.0201,2039,21,0)
^^2^2^3141223^
"^DD",9002313.02,9002313.0201,2039,21,1,0)
This is used to store NCPDP field B39-1Z (Pay to Country Code), which is 
"^DD",9002313.02,9002313.0201,2039,21,2,0)
defined as "Code of the country".
"^DD",9002313.02,9002313.0201,2039,"DT")
3141223
"^DD",9002313.02,9002313.0201,2040,0)
PRES ALT ID ASSOC COUNTRY CODE^F^^B30;10^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2040,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.0201,2040,21,0)
^.001^2^2^3141231^^
"^DD",9002313.02,9002313.0201,2040,21,1,0)
This is used to store NCPDP field B40-3A (Prescriber Alternate ID 
"^DD",9002313.02,9002313.0201,2040,21,2,0)
Associated Country Code), which is defined as "Code of the country".
"^DD",9002313.02,9002313.0201,2040,"DT")
3141231
"^DD",9002313.02,9002313.0201,2041,0)
PRES ID ASSOC COUNTRY CODE^F^^B40;1^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2041,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.0201,2041,21,0)
^^2^2^3141231^
"^DD",9002313.02,9002313.0201,2041,21,1,0)
This is used to store NCPDP field B41-3B (Prescriber ID Associated Country
"^DD",9002313.02,9002313.0201,2041,21,2,0)
Code), which is defined as "Code of the country".                       
"^DD",9002313.02,9002313.0201,2041,"DT")
3141223
"^DD",9002313.02,9002313.0201,2042,0)
PRESCRIBER COUNTRY CODE^F^^B40;2^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2042,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.0201,2042,21,0)
^^2^2^3141231^
"^DD",9002313.02,9002313.0201,2042,21,1,0)
This is used to store NCPDP field B42-3C (Prescriber Country Code), which
"^DD",9002313.02,9002313.0201,2042,21,2,0)
is defined as "Code of the country".
"^DD",9002313.02,9002313.0201,2042,"DT")
3141223
"^DD",9002313.02,9002313.0201,2043,0)
PURCHASER ID ASSOC COUNTRY CD^F^^B40;3^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2043,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.0201,2043,21,0)
^^2^2^3141230^
"^DD",9002313.02,9002313.0201,2043,21,1,0)
This is used to store NCPDP field B43-3D (Purchaser ID Associated Country 
"^DD",9002313.02,9002313.0201,2043,21,2,0)
Code), which is defined as "Code of the country".
"^DD",9002313.02,9002313.0201,2043,"DT")
3141230
"^DD",9002313.02,9002313.0201,2044,0)
INTERMEDIARY ID COUNT^F^^B40;4^K:$L(X)>3!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2044,3)
Answer must be 1-3 characters in length.
"^DD",9002313.02,9002313.0201,2044,21,0)
^^6^6^3141231^
"^DD",9002313.02,9002313.0201,2044,21,1,0)
This is used to store NCPDP field B44-8G (Intermediary ID Count), which 
"^DD",9002313.02,9002313.0201,2044,21,2,0)
is defined as "Count of Intermediary ID Type Code (B45-8H), 
"^DD",9002313.02,9002313.0201,2044,21,3,0)
Intermediary Type Entity (B46-8J), Intermediary ID Qualifier (B47-8K), 
"^DD",9002313.02,9002313.0201,2044,21,4,0)
Intermediary ID (B48-8M), Intermediary ID State/Province Address 
"^DD",9002313.02,9002313.0201,2044,21,5,0)
(B49-8N) and Intermediary ID Relationship Code (B50-8P) occurrence".  
"^DD",9002313.02,9002313.0201,2044,21,6,0)
These other NCPDP fields are stored in the Intermediary ID multiple.
"^DD",9002313.02,9002313.0201,2044,"DT")
3141231
"^DD",9002313.02,9002313.0201,2044.01,0)
INTERMEDIARY ID MULTIPLE^9002313.022044^^B44;0
"^DD",9002313.02,9002313.0201,2044.01,21,0)
^.001^2^2^3141231^^^
"^DD",9002313.02,9002313.0201,2044.01,21,1,0)
This multiple is used to hold the NCPDP values for the Intermediary ID 
"^DD",9002313.02,9002313.0201,2044.01,21,2,0)
repeating group.
"^DD",9002313.02,9002313.0201,2056,0)
LAST KNOWN BIN NUMBER^F^^B50;6^K:$L(X)>8!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2056,3)
Answer must be 1-8 characters in length.
"^DD",9002313.02,9002313.0201,2056,21,0)
^^3^3^3141231^
"^DD",9002313.02,9002313.0201,2056,21,1,0)
This is used to store NCPDP field B56-3E (Last Known BIN Number), which is
"^DD",9002313.02,9002313.0201,2056,21,2,0)
defined as "Last known Card Issuer ID or Bank ID Number used for network
"^DD",9002313.02,9002313.0201,2056,21,3,0)
routing used on a previous claim".
"^DD",9002313.02,9002313.0201,2056,"DT")
3141230
"^DD",9002313.02,9002313.0201,2057,0)
LAST KNOWN PROCESSOR CNTRL NUM^F^^B50;7^K:$L(X)>12!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2057,3)
Answer must be 1-12 characters in length.
"^DD",9002313.02,9002313.0201,2057,21,0)
^.001^3^3^3141230^^
"^DD",9002313.02,9002313.0201,2057,21,1,0)
This is used to store NCPDP field B57-3F (Last Known Processor Control
"^DD",9002313.02,9002313.0201,2057,21,2,0)
Number), which is defined as "Last known number assigned by the processor
"^DD",9002313.02,9002313.0201,2057,21,3,0)
used on a previous claim".
"^DD",9002313.02,9002313.0201,2057,"DT")
3141230
"^DD",9002313.02,9002313.0201,2058,0)
LAST KNOWN GROUP ID^F^^B50;8^K:$L(X)>17!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2058,3)
Answer must be 1-17 characters in length.
"^DD",9002313.02,9002313.0201,2058,21,0)
^^3^3^3141230^
"^DD",9002313.02,9002313.0201,2058,21,1,0)
This is used to store NCPDP field B58-3G (Last Known Group ID), which is 
"^DD",9002313.02,9002313.0201,2058,21,2,0)
defined as "Last known ID assigned to the cardholder group or employer 
"^DD",9002313.02,9002313.0201,2058,21,3,0)
group used on a previous claim".
"^DD",9002313.02,9002313.0201,2058,"DT")
3141230
"^DD",9002313.02,9002313.0201,2059,0)
LAST KNOWN CARDHOLDER ID^F^^B50;9^K:$L(X)>22!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2059,3)
Answer must be 1-22 characters in length.
"^DD",9002313.02,9002313.0201,2059,21,0)
^^3^3^3141230^
"^DD",9002313.02,9002313.0201,2059,21,1,0)
This is used to store NCPDP field B59-3H (Last Known Cardholder ID), 
"^DD",9002313.02,9002313.0201,2059,21,2,0)
which is defined as "Last known insurance ID assigned to the cardholder 
"^DD",9002313.02,9002313.0201,2059,21,3,0)
or identification number used by the plan used on a previous claim".
"^DD",9002313.02,9002313.0201,2059,"DT")
3141230
"^DD",9002313.02,9002313.0201,2060,0)
YEAR OF LAST PAID CLAIM^F^^B50;10^K:$L(X)>6!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2060,3)
Answer must be 1-6 characters in length.
"^DD",9002313.02,9002313.0201,2060,21,0)
^^2^2^3141231^
"^DD",9002313.02,9002313.0201,2060,21,1,0)
This is used to store NCPDP field B60-3J (Year of Last Paid Claim), which 
"^DD",9002313.02,9002313.0201,2060,21,2,0)
is defined as "Identifies the year used on a previous claim".
"^DD",9002313.02,9002313.0201,2060,"DT")
3141231
"^DD",9002313.02,9002313.0201,2061,0)
MONTH OF LAST PAID CLAIM^F^^B60;1^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.0201,2061,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.0201,2061,21,0)
^^2^2^3141231^
"^DD",9002313.02,9002313.0201,2061,21,1,0)
This is used to store NCPDP field B61-3K (Month of Last Paid Claim), 
"^DD",9002313.02,9002313.0201,2061,21,2,0)
which is defined as "Identifies the month used on a previous claim".
"^DD",9002313.02,9002313.0201,2061,"DT")
3141231
"^DD",9002313.02,9002313.022044,0)
INTERMEDIARY ID MULTIPLE SUB-FIELD^^2050^8
"^DD",9002313.02,9002313.022044,0,"DT")
3141231
"^DD",9002313.02,9002313.022044,0,"IX","B",9002313.022044,.01)

"^DD",9002313.02,9002313.022044,0,"NM","INTERMEDIARY ID MULTIPLE")

"^DD",9002313.02,9002313.022044,0,"UP")
9002313.0201
"^DD",9002313.02,9002313.022044,.01,0)
INTERMEDIARY ID COUNTER^MNJ2,0^^0;1^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",9002313.02,9002313.022044,.01,1,0)
^.1
"^DD",9002313.02,9002313.022044,.01,1,1,0)
9002313.022044^B
"^DD",9002313.02,9002313.022044,.01,1,1,1)
S ^BPSC(DA(2),400,DA(1),"B44","B",$E(X,1,30),DA)=""
"^DD",9002313.02,9002313.022044,.01,1,1,2)
K ^BPSC(DA(2),400,DA(1),"B44","B",$E(X,1,30),DA)
"^DD",9002313.02,9002313.022044,.01,3)
Type a number between 1 and 99, 0 decimal digits.
"^DD",9002313.02,9002313.022044,.01,21,0)
^^1^1^3141231^
"^DD",9002313.02,9002313.022044,.01,21,1,0)
This is a sequential counter of Intermediary ID occurrences.
"^DD",9002313.02,9002313.022044,.01,"DT")
3141231
"^DD",9002313.02,9002313.022044,2045,0)
INTERMEDIARY ID TYPE CODE^F^^0;2^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.022044,2045,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.022044,2045,21,0)
^^3^3^3141231^
"^DD",9002313.02,9002313.022044,2045,21,1,0)
This is used to store NCPDP field B45-8H (Intermediary ID Type Code), 
"^DD",9002313.02,9002313.022044,2045,21,2,0)
which is defined as "Code identifying the type of Intermediary ID 
"^DD",9002313.02,9002313.022044,2045,21,3,0)
(B48-8M)".
"^DD",9002313.02,9002313.022044,2045,"DT")
3141231
"^DD",9002313.02,9002313.022044,2046,0)
INTERMEDIARY ID TYPE ENTITY^F^^0;3^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.022044,2046,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.022044,2046,21,0)
^^3^3^3141231^
"^DD",9002313.02,9002313.022044,2046,21,1,0)
This is used to store NCPDP field B46-8J (Intermediary ID Type Entity), 
"^DD",9002313.02,9002313.022044,2046,21,2,0)
which is defined as "Code Identifying the type of entity associated 
"^DD",9002313.02,9002313.022044,2046,21,3,0)
with the Intermediary ID (B48-8M)".
"^DD",9002313.02,9002313.022044,2046,"DT")
3141231
"^DD",9002313.02,9002313.022044,2047,0)
INTERMEDIARY ID QUALIFIER^F^^0;4^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.022044,2047,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.022044,2047,21,0)
^^2^2^3141231^
"^DD",9002313.02,9002313.022044,2047,21,1,0)
This is used to store NCPDP field B47-8K (Intermediary ID Qualifier),
"^DD",9002313.02,9002313.022044,2047,21,2,0)
which is defined as "Code qualifying the 'Intermediary ID' (B48-8M)".
"^DD",9002313.02,9002313.022044,2047,"DT")
3141231
"^DD",9002313.02,9002313.022044,2048,0)
INTERMEDIARY ID^F^^0;5^K:$L(X)>22!($L(X)<1) X
"^DD",9002313.02,9002313.022044,2048,3)
Answer must be 1-22 characters in length.
"^DD",9002313.02,9002313.022044,2048,21,0)
^^2^2^3141231^
"^DD",9002313.02,9002313.022044,2048,21,1,0)
This is used to store NCPDP field B48-8M (Intermediary ID), which is 
"^DD",9002313.02,9002313.022044,2048,21,2,0)
defined as "Intermediary ID assigned to the type entity".
"^DD",9002313.02,9002313.022044,2048,"DT")
3141231
"^DD",9002313.02,9002313.022044,2049,0)
INTERMEDIARY ID STATE/PROV ADD^F^^0;6^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.022044,2049,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.022044,2049,21,0)
^^5^5^3141231^
"^DD",9002313.02,9002313.022044,2049,21,1,0)
This is used to store NCPDP field B49-8N (Intermediary ID State/Province 
"^DD",9002313.02,9002313.022044,2049,21,2,0)
Address), which is defined as "The postal state code abbreviation that 
"^DD",9002313.02,9002313.022044,2049,21,3,0)
is used in conjunction with the Intermediary ID Qualifier and the 
"^DD",9002313.02,9002313.022044,2049,21,4,0)
Intermediary ID fields to identify what state the identification is 
"^DD",9002313.02,9002313.022044,2049,21,5,0)
from".
"^DD",9002313.02,9002313.022044,2049,"DT")
3141231
"^DD",9002313.02,9002313.022044,2050,0)
INTERMEDIARY ID RELATION CODE^F^^0;8^K:$L(X)>3!($L(X)<1) X
"^DD",9002313.02,9002313.022044,2050,3)
Answer must be 1-3 characters in length.
"^DD",9002313.02,9002313.022044,2050,21,0)
^^3^3^3141231^
"^DD",9002313.02,9002313.022044,2050,21,1,0)
This is used to store NCPDP field B50-8P (Intermediary ID Relationship 
"^DD",9002313.02,9002313.022044,2050,21,2,0)
Code), which is defined as "Code indicating the relationship to the 
"^DD",9002313.02,9002313.022044,2050,21,3,0)
patient".
"^DD",9002313.02,9002313.022044,2050,"DT")
3141231
"^DD",9002313.02,9002313.022044,2055,0)
INTERMEDIARY ID COUNTRY CODE^F^^0;7^K:$L(X)>4!($L(X)<1) X
"^DD",9002313.02,9002313.022044,2055,3)
Answer must be 1-4 characters in length.
"^DD",9002313.02,9002313.022044,2055,21,0)
^^3^3^3141231^
"^DD",9002313.02,9002313.022044,2055,21,1,0)
This is used to store NCPDP field B55-8U (Intermediary ID Country Code), 
"^DD",9002313.02,9002313.022044,2055,21,2,0)
which is defined as "The associated Postal country code of the 
"^DD",9002313.02,9002313.022044,2055,21,3,0)
associated Intermediary ID".
"^DD",9002313.02,9002313.022044,2055,"DT")
3141231
"^DD",9002313.03,9002313.03,568,0)
PAYER ID QUALIFIER^S^01:STANDARD UNIQUE HEALTH PLAN ID;02:HIN;03:BIN;04:NAIC;99:OTHER;^560;8^Q
"^DD",9002313.03,9002313.03,568,3)
Enter a code specifying the type of payer ID.
"^DD",9002313.03,9002313.03,568,21,0)
^.001^1^1^3150225^^^^
"^DD",9002313.03,9002313.03,568,21,1,0)
Code indicating the type of payer ID.
"^DD",9002313.03,9002313.03,568,23,0)
^.001^1^1^3150225^^^^
"^DD",9002313.03,9002313.03,568,23,1,0)
NCPDP field 568-J7.
"^DD",9002313.03,9002313.03,568,"DT")
3150225
"^DD",9002313.03,9002313.0301,550,0)
HELP DESK TELEPHONE NUMBER^F^^540;10^K:$L(X)>18!($L(X)<1) X
"^DD",9002313.03,9002313.0301,550,3)
Answer must be 1-18 characters in length.
"^DD",9002313.03,9002313.0301,550,21,0)
^^2^2^3141231^
"^DD",9002313.03,9002313.0301,550,21,1,0)
This is used to store NCPDP field 550-8F (Help Desk Telephone Number), 
"^DD",9002313.03,9002313.0301,550,21,2,0)
which is defined as "Phone number of the help desk".
"^DD",9002313.03,9002313.0301,550,"DT")
3141231
"^DD",9002313.03,9002313.0301,561,0)
PERCENTAGE SALES TAX BASIS PD^S^01:GROSS AMOUNT DUE;02:INGREDIENT COST;03:INGREDIENT COST + DISPENSING FEE;04:PROFESSIONAL SERVICE FEE;^560;1^Q
"^DD",9002313.03,9002313.0301,561,.1)
PERCENTAGE SALES TAX BASIS PAID
"^DD",9002313.03,9002313.0301,561,3)
Enter the basis for the percentage sales tax paid.
"^DD",9002313.03,9002313.0301,561,21,0)
^.001^2^2^3101014^^^
"^DD",9002313.03,9002313.0301,561,21,1,0)
This is used to store NCPDP field 561-AZ (Percentage Sales Tax Basis Paid),
"^DD",9002313.03,9002313.0301,561,21,2,0)
which is defined as "Code indicating the percentage sales tax paid basis."
"^DD",9002313.03,9002313.0301,561,23,0)
^.001^1^1^3101014^^
"^DD",9002313.03,9002313.0301,561,23,1,0)
RESPONSE PRICING SEGMENT.
"^DD",9002313.03,9002313.0301,561,"DT")
3141125
"^DD",9002313.03,9002313.0301,2022,0)
HELP DESK TELEPHONE NUMBER EXT^F^^B20;2^K:$L(X)>8!($L(X)<1) X
"^DD",9002313.03,9002313.0301,2022,3)
Answer must be 1-8 characters in length.
"^DD",9002313.03,9002313.0301,2022,21,0)
^^2^2^3141231^
"^DD",9002313.03,9002313.0301,2022,21,1,0)
This is used to store NCPDP field B22-7P (Help Desk Telephone Number 
"^DD",9002313.03,9002313.0301,2022,21,2,0)
Extension), which is defined as "Extension of the telephone number".
"^DD",9002313.03,9002313.0301,2022,"DT")
3141231
"^DD",9002313.03,9002313.0301,2033,0)
PRO SERVICE FEE CONT/REIM AMT^FO^^B30;3^K:$L(X)>8!($L(X)<6) X
"^DD",9002313.03,9002313.0301,2033,2)
S Y(0)=Y S Y="$"_$J($$DFF2EXT^BPSECFM(Y),7,2)
"^DD",9002313.03,9002313.0301,2033,2.1)
S Y="$"_$J($$DFF2EXT^BPSECFM(Y),7,2)
"^DD",9002313.03,9002313.0301,2033,3)
Answer must be 6-8 characters in length.
"^DD",9002313.03,9002313.0301,2033,21,0)
^.001^6^6^3141231^^
"^DD",9002313.03,9002313.0301,2033,21,1,0)
This is used to store NCPDP field B33-6G (Professional Service Fee 
"^DD",9002313.03,9002313.0301,2033,21,2,0)
Contracted/Reimbursement Amount), which is defined as "Informational 
"^DD",9002313.03,9002313.0301,2033,21,3,0)
field used with service billings when Other Payer-Patient 
"^DD",9002313.03,9002313.0301,2033,21,4,0)
Responsibility Amount (352-NQ) or Patient Pay Amount (505-F5) is used 
"^DD",9002313.03,9002313.0301,2033,21,5,0)
for reimbursement. Amount is equal to contracted or reimbursable amount 
"^DD",9002313.03,9002313.0301,2033,21,6,0)
for service being rendered".
"^DD",9002313.03,9002313.0301,2033,"DT")
3141231
"^DD",9002313.03,9002313.0301,2052,0)
RESPONSE INTERMEDIARY AUTH CNT^NJ2,0^^B50;2^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",9002313.03,9002313.0301,2052,3)
Type a number between 1 and 99, 0 decimal digits.
"^DD",9002313.03,9002313.0301,2052,21,0)
^^4^4^3141231^
"^DD",9002313.03,9002313.0301,2052,21,1,0)
This is used to store NCPDP field B52-8R (Response Intermediary 
"^DD",9002313.03,9002313.0301,2052,21,2,0)
Authorization Count), which is defined as "Count of Response 
"^DD",9002313.03,9002313.0301,2052,21,3,0)
Intermediary Authorization Type ID (B53-8S), Response Intermediary 
"^DD",9002313.03,9002313.0301,2052,21,4,0)
Authorization Type ID and Intermediary Message".
"^DD",9002313.03,9002313.0301,2052,"DT")
3141231
"^DD",9002313.03,9002313.0301,2052.01,0)
INTERMEDIARY MULTIPLE^9002313.032052^^B52;0
"^DD",9002313.03,9002313.0301,2052.01,21,0)
^^2^2^3150915^
"^DD",9002313.03,9002313.0301,2052.01,21,1,0)
This multiple is used to hold the NCPDP values for the Response 
"^DD",9002313.03,9002313.0301,2052.01,21,2,0)
Intermediary repeating group.
"^DD",9002313.03,9002313.0301,2052.01,"DT")
3150114
"^DD",9002313.03,9002313.032052,0)
INTERMEDIARY MULTIPLE SUB-FIELD^^2051^4
"^DD",9002313.03,9002313.032052,0,"DT")
3141231
"^DD",9002313.03,9002313.032052,0,"IX","B",9002313.032052,.01)

"^DD",9002313.03,9002313.032052,0,"NM","INTERMEDIARY MULTIPLE")

"^DD",9002313.03,9002313.032052,0,"UP")
9002313.0301
"^DD",9002313.03,9002313.032052,.01,0)
RESPONSE INTERMEDIARY COUNTER^MNJ2,0^^0;1^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",9002313.03,9002313.032052,.01,1,0)
^.1
"^DD",9002313.03,9002313.032052,.01,1,1,0)
9002313.032052^B
"^DD",9002313.03,9002313.032052,.01,1,1,1)
S ^BPSR(DA(2),1000,DA(1),"B52","B",$E(X,1,30),DA)=""
"^DD",9002313.03,9002313.032052,.01,1,1,2)
K ^BPSR(DA(2),1000,DA(1),"B52","B",$E(X,1,30),DA)
"^DD",9002313.03,9002313.032052,.01,3)
Type a number between 1 and 99, 0 decimal digits.
"^DD",9002313.03,9002313.032052,.01,21,0)
^^1^1^3141231^
"^DD",9002313.03,9002313.032052,.01,21,1,0)
This is a sequential counter of Response Intermediary occurrences
"^DD",9002313.03,9002313.032052,.01,"DT")
3141231
"^DD",9002313.03,9002313.032052,2051,0)
INTERMEDIARY MESSAGE^F^^1;1^K:$L(X)>200!($L(X)<1) X
"^DD",9002313.03,9002313.032052,2051,3)
Answer must be 1-200 characters in length.
"^DD",9002313.03,9002313.032052,2051,21,0)
^^2^2^3141231^
"^DD",9002313.03,9002313.032052,2051,21,1,0)
This is used to store NCPDP field B51-8Q (Intermediary Message), which is 
"^DD",9002313.03,9002313.032052,2051,21,2,0)
defined as "Free form message".
"^DD",9002313.03,9002313.032052,2051,"DT")
3141231
"^DD",9002313.03,9002313.032052,2053,0)
RESPONSE INTERMED AUTH TYPE ID^F^^0;2^K:$L(X)>2!($L(X)<1) X
"^DD",9002313.03,9002313.032052,2053,3)
Answer must be 1-2 characters in length.
"^DD",9002313.03,9002313.032052,2053,21,0)
^^3^3^3141231^
"^DD",9002313.03,9002313.032052,2053,21,1,0)
This is used to store NCPDP field B53-8S (Response Intermediary 
"^DD",9002313.03,9002313.032052,2053,21,2,0)
Authorization Type ID), which is defined as "Value indicating the 
"^DD",9002313.03,9002313.032052,2053,21,3,0)
authorization type from intermediary processing".
"^DD",9002313.03,9002313.032052,2053,"DT")
3141231
"^DD",9002313.03,9002313.032052,2054,0)
RESPONSE INTERMEDIARY AUTH ID^F^^0;3^K:$L(X)>20!($L(X)<1) X
"^DD",9002313.03,9002313.032052,2054,3)
Answer must be 1-20 characters in length.
"^DD",9002313.03,9002313.032052,2054,21,0)
^^3^3^3141231^
"^DD",9002313.03,9002313.032052,2054,21,1,0)
This is used to store NCPDP field B54-8T (Response Intermediary 
"^DD",9002313.03,9002313.032052,2054,21,2,0)
Authorization ID), which is defined as "Value indicating intermediary 
"^DD",9002313.03,9002313.032052,2054,21,3,0)
authorization".
"^DD",9002313.03,9002313.032052,2054,"DT")
3141231
"^DD",9002313.03,9002313.035501,2023,0)
OTHER PAYER HELPDESK PHONE EXT^F^^0;7^K:$L(X)>8!($L(X)<1) X
"^DD",9002313.03,9002313.035501,2023,3)
Answer must be 1-8 characters in length.
"^DD",9002313.03,9002313.035501,2023,21,0)
^^3^3^3141231^
"^DD",9002313.03,9002313.035501,2023,21,1,0)
This is used to store NCPDP field B23-7Q (Other Payer Help Desk Telephone 
"^DD",9002313.03,9002313.035501,2023,21,2,0)
Number Extension), which is defined as "Extension of the telephone 
"^DD",9002313.03,9002313.035501,2023,21,3,0)
number".
"^DD",9002313.03,9002313.035501,2023,"DT")
3141231
"^DD",9002313.2,9002313.2,0)
FIELD^^1^3
"^DD",9002313.2,9002313.2,0,"DDA")
N
"^DD",9002313.2,9002313.2,0,"DT")
3141126
"^DD",9002313.2,9002313.2,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",9002313.2,9002313.2,0,"IX","B",9002313.2,.01)

"^DD",9002313.2,9002313.2,0,"NM","BPS NCPDP OTHER PAYER AMT PAID QUAL")

"^DD",9002313.2,9002313.2,0,"PT",9002313.31231,.02)

"^DD",9002313.2,9002313.2,0,"PT",9002313.57141,.02)

"^DD",9002313.2,9002313.2,0,"PT",9002313.59141,.02)

"^DD",9002313.2,9002313.2,0,"PT",9002313.7781,.02)

"^DD",9002313.2,9002313.2,.01,0)
CODE^RF^^0;1^K:$L(X)>5!($L(X)<1)!'(X'?1P.E) X
"^DD",9002313.2,9002313.2,.01,1,0)
^.1
"^DD",9002313.2,9002313.2,.01,1,1,0)
9002313.2^B
"^DD",9002313.2,9002313.2,.01,1,1,1)
S ^BPS(9002313.2,"B",$E(X,1,30),DA)=""
"^DD",9002313.2,9002313.2,.01,1,1,2)
K ^BPS(9002313.2,"B",$E(X,1,30),DA)
"^DD",9002313.2,9002313.2,.01,3)
Answer must be 1-5 characters in length.
"^DD",9002313.2,9002313.2,.01,21,0)
^^1^1^3141126^
"^DD",9002313.2,9002313.2,.01,21,1,0)
This is the code that qualifies the 'Other Payer Amount Paid' (431-DV).
"^DD",9002313.2,9002313.2,.01,"DT")
3141126
"^DD",9002313.2,9002313.2,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>50!($L(X)<1) X
"^DD",9002313.2,9002313.2,.02,3)
Answer must be 1-50 characters in length.
"^DD",9002313.2,9002313.2,.02,21,0)
^^2^2^3141126^
"^DD",9002313.2,9002313.2,.02,21,1,0)
This is the description of the OTHER PAYER AMOUNT PAID QUALIFIER (e.g. 
"^DD",9002313.2,9002313.2,.02,21,2,0)
DRUG BENEFIT)
"^DD",9002313.2,9002313.2,.02,"DT")
3141126
"^DD",9002313.2,9002313.2,1,0)
NCPDP VERSION^9002313.201S^^1;0
"^DD",9002313.2,9002313.2,1,21,0)
^^2^2^3141202^
"^DD",9002313.2,9002313.2,1,21,1,0)
The NCPDP VERSION multiple identifies the specific NCPDP version related 
"^DD",9002313.2,9002313.2,1,21,2,0)
to the CODE.
"^DD",9002313.2,9002313.201,0)
NCPDP VERSION SUB-FIELD^^.01^1
"^DD",9002313.2,9002313.201,0,"DT")
3141126
"^DD",9002313.2,9002313.201,0,"IX","B",9002313.201,.01)

"^DD",9002313.2,9002313.201,0,"NM","NCPDP VERSION")

"^DD",9002313.2,9002313.201,0,"UP")
9002313.2
"^DD",9002313.2,9002313.201,.01,0)
NCPDP VERSION^MS^51:5.1;D0:D.0;^0;1^Q
"^DD",9002313.2,9002313.201,.01,1,0)
^.1
"^DD",9002313.2,9002313.201,.01,1,1,0)
9002313.201^B
"^DD",9002313.2,9002313.201,.01,1,1,1)
S ^BPS(9002313.2,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",9002313.2,9002313.201,.01,1,1,2)
K ^BPS(9002313.2,DA(1),1,"B",$E(X,1,30),DA)
"^DD",9002313.2,9002313.201,.01,3)
Select '51' for Version 5.1 or 'D0' for Version D.0
"^DD",9002313.2,9002313.201,.01,21,0)
^^3^3^3141202^
"^DD",9002313.2,9002313.201,.01,21,1,0)
NCPDP field codes may change between versions of the standard.  Refer to
"^DD",9002313.2,9002313.201,.01,21,2,0)
the NCPDP External Code List to identify versions for a specific NCPDP
"^DD",9002313.2,9002313.201,.01,21,3,0)
code.  
"^DD",9002313.2,9002313.201,.01,"DT")
3141202
"^DD",9002313.31,9002313.3123,.03,0)
OTHER PAYER ID QUALIFIER^S^01:STANDARD UNIQUE HEALTH PLAN ID;02:HEALTH INDUSTRY NUMBER (HIN);03:BANK IDENTIFICATION NUMBER (BIN);04:NAT. ASSOC. OF INS. COM. (NAIC);05:MEDICARE CARRIER NUMBER;09:COUPON;99:OTHER;^0;3^Q
"^DD",9002313.31,9002313.3123,.03,3)
Select the Other Payer ID Qualifier.
"^DD",9002313.31,9002313.3123,.03,21,0)
^^2^2^3110105^
"^DD",9002313.31,9002313.3123,.03,21,1,0)
This value will be placed in the NCPDP field 339-6C, which is the code
"^DD",9002313.31,9002313.3123,.03,21,2,0)
qualifying the 'Other Payer ID' (340-7C) field.
"^DD",9002313.31,9002313.3123,.03,"DT")
3141125
"^DD",9002313.31,9002313.31231,.02,0)
OTHER PAYER AMT PAID QUALIFIER^P9002313.2'^BPS(9002313.2,^0;2^Q
"^DD",9002313.31,9002313.31231,.02,3)
Enter the qualifier for the Other Amount Paid.
"^DD",9002313.31,9002313.31231,.02,21,0)
^^2^2^3110105^
"^DD",9002313.31,9002313.31231,.02,21,1,0)
This will go into NCPDP field 342-HC, which qualifies the payment amount
"^DD",9002313.31,9002313.31231,.02,21,2,0)
in the Other Payer Amount Paid.
"^DD",9002313.31,9002313.31231,.02,"DT")
3141126
"^DD",9002313.31,9002313.31234,.02,0)
BENEFIT STAGE QUALIFIER^S^1:DEDUCT;2:INIT BEN;3:COV GAP;4:CAT. COV;50:MA-PD PLAN;60:OLD SUPP BENEFIT;61:PART D DRUG CO-ADMIN;62:NON-QUAL DRUG CO-ADMIN;63:NON-PART D BEN UNDER MMP PLAN;70:PART D DRUG BEN;80:NON-QUAL DRUG BEN;90:OTC DRUG;^0;2^Q
"^DD",9002313.31,9002313.31234,.02,3)
Enter the code that describes the Benefit Stage Amount.
"^DD",9002313.31,9002313.31234,.02,21,0)
^^2^2^3110809^
"^DD",9002313.31,9002313.31234,.02,21,1,0)
This is used for NCPDP field 393-MV (Benefit Stage Qualifier), which is 
"^DD",9002313.31,9002313.31234,.02,21,2,0)
used to qualify the Benefit Stage Amount.
"^DD",9002313.31,9002313.31234,.02,"DT")
3141201
"^DD",9002313.31,9002313.3124,.02,0)
OTHER AMOUNT CLAIMED QUALIFIER^S^01:DELIVERY COST;02:SHIPPING COST;03:POSTAGE COST;04:ADMINISTRATIVE COST;09:COMPOUND PREP COST SUBMITTED;11:MEDICATION ADMINISTRATION;99:OTHER;^0;2^Q
"^DD",9002313.31,9002313.3124,.02,3)
Enter the code that describes the Other Amount Claimed Submitted.
"^DD",9002313.31,9002313.3124,.02,21,0)
^^3^3^3110809^
"^DD",9002313.31,9002313.3124,.02,21,1,0)
This will be used for NCPDP field 479-H8 (Other Amount Claimed Submitted 
"^DD",9002313.31,9002313.3124,.02,21,2,0)
Qualifier), which is used to describe the dollar amount in the 480-H9 
"^DD",9002313.31,9002313.3124,.02,21,3,0)
field.
"^DD",9002313.31,9002313.3124,.02,"DT")
3141125
"^DD",9002313.32,9002313.32,2.01,0)
PERCENTAGE SALES TAX BASIS PD^S^01:GROSS AMOUNT DUE;02:INGREDIENT COST;03:INGREDIENT COST + DISPENSING FEE;04:PROFESSIONAL SERVICE FEE;^2;1^Q
"^DD",9002313.32,9002313.32,2.01,3)
Enter override value for the Percentage Sales Tax Basis Paid
"^DD",9002313.32,9002313.32,2.01,21,0)
^^4^4^3150113^
"^DD",9002313.32,9002313.32,2.01,21,1,0)
This is the override value that will be used for the payer response for 
"^DD",9002313.32,9002313.32,2.01,21,2,0)
billing requests. The value will be used to populate the PERCENTAGE SALES 
"^DD",9002313.32,9002313.32,2.01,21,3,0)
TAX BASIS PD (#561) field of RESPONSES (#9002313.0301) subfile of the BPS 
"^DD",9002313.32,9002313.32,2.01,21,4,0)
RESPONSES (#9002313.03) file. This corresponds to NCPDP field 561-AZ.
"^DD",9002313.32,9002313.32,2.01,"DT")
3150113
"^DD",9002313.32,9002313.32,2.02,0)
OTHER AMOUNT PAID QUALIFIER^F^^2;2^K:$L(X)>2!($L(X)<1) X
"^DD",9002313.32,9002313.32,2.02,3)
Answer must be 1-2 characters in length.
"^DD",9002313.32,9002313.32,2.02,21,0)
^.001^4^4^3150114^^
"^DD",9002313.32,9002313.32,2.02,21,1,0)
This is the override value that will be used for the payer response for 
"^DD",9002313.32,9002313.32,2.02,21,2,0)
billing requests. The value will be used to populate the OTHER AMOUNT 
"^DD",9002313.32,9002313.32,2.02,21,3,0)
PAID QUALIFIER (#564) field of RESPONSES (#9002313.0301) subfile of the 
"^DD",9002313.32,9002313.32,2.02,21,4,0)
BPS RESPONSES (#9002313.03) file. This corresponds to NCPDP field 564-J3.
"^DD",9002313.32,9002313.32,2.02,"DT")
3150114
"^DD",9002313.32,9002313.32,2.03,0)
PAYER ID QUALIFIER^S^01:STANDARD UNIQUE HEALTH PLAN ID;02:HIN;03:BIN;04:NAIC;99:OTHER;^2;3^Q
"^DD",9002313.32,9002313.32,2.03,3)
Enter override value for the Payer ID Qualifier
"^DD",9002313.32,9002313.32,2.03,21,0)
^^4^4^3150113^
"^DD",9002313.32,9002313.32,2.03,21,1,0)
This is the override value that will be used for the payer response for 
"^DD",9002313.32,9002313.32,2.03,21,2,0)
billing requests. The value will be used to populate the PAYER ID 
"^DD",9002313.32,9002313.32,2.03,21,3,0)
QUALIFIER (#568) field of RESPONSES (#9002313.0301) subfile of the BPS 
"^DD",9002313.32,9002313.32,2.03,21,4,0)
RESPONSES (#9002313.03) file. This corresponds to NCPDP field 561-AZ.
"^DD",9002313.32,9002313.32,2.03,"DT")
3150113
"^DD",9002313.32,9002313.32,2.04,0)
HELP DESK TELEPHONE NUMBER EXT^F^^2;4^K:$L(X)>8!($L(X)<1) X
"^DD",9002313.32,9002313.32,2.04,3)
Answer must be 1-8 characters in length.
"^DD",9002313.32,9002313.32,2.04,21,0)
^^5^5^3150113^
"^DD",9002313.32,9002313.32,2.04,21,1,0)
This is the override value that will be used for the payer response for 
"^DD",9002313.32,9002313.32,2.04,21,2,0)
billing requests. The value will be used to populate the HELP DESK 
"^DD",9002313.32,9002313.32,2.04,21,3,0)
TELEPHONE NUMBER EXTENSION (#2022) field of RESPONSES (#9002313.0301) 
"^DD",9002313.32,9002313.32,2.04,21,4,0)
subfile of the BPS RESPONSES (#9002313.03) file. This corresponds to 
"^DD",9002313.32,9002313.32,2.04,21,5,0)
NCPDP field B22-7P.
"^DD",9002313.32,9002313.32,2.04,"DT")
3150113
"^DD",9002313.32,9002313.32,2.05,0)
PRO SERVICE FEE CONT/REIM AMT^NJ8,2^^2;5^S:X["$" X=$P(X,"$",2) K:X'?."-".N.1".".2N!(X>99999.99)!(X<-99999.99) X
"^DD",9002313.32,9002313.32,2.05,3)
Type a dollar amount between -99999.99 and 99999.99, 2 decimal digits.
"^DD",9002313.32,9002313.32,2.05,21,0)
^.001^4^4^3150113^^
"^DD",9002313.32,9002313.32,2.05,21,1,0)
This is the override value that will be used for the payer response for 
"^DD",9002313.32,9002313.32,2.05,21,2,0)
billing requests. The value will be used to populate the PRO SERVICE FEE 
"^DD",9002313.32,9002313.32,2.05,21,3,0)
CONT/REIM AMT (#2033) field of RESPONSES (#9002313.0301) subfile of the 
"^DD",9002313.32,9002313.32,2.05,21,4,0)
BPS RESPONSES (#9002313.03) file. This corresponds to NCPDP field B33-6G.
"^DD",9002313.32,9002313.32,2.05,"DT")
3150113
"^DD",9002313.32,9002313.32,2.06,0)
OTHER PAYER HELPDESK PHONE EXT^NJ8,0^^2;6^K:+X'=X!(X>99999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",9002313.32,9002313.32,2.06,3)
Type a number between 0 and 99999999, 0 decimal digits.
"^DD",9002313.32,9002313.32,2.06,21,0)
^^5^5^3150114^
"^DD",9002313.32,9002313.32,2.06,21,1,0)
This is the override value that will be used for the payer response for 
"^DD",9002313.32,9002313.32,2.06,21,2,0)
billing requests. The value will be used to populate the OTHER PAYER 
"^DD",9002313.32,9002313.32,2.06,21,3,0)
HELPDESK PHONE EXT (#2023) field of the OTHER PAYER ID MLTPL 
"^DD",9002313.32,9002313.32,2.06,21,4,0)
(#9002313.035501) of the RESPONSES (#9002313.0301) subfile of the BPS 
"^DD",9002313.32,9002313.32,2.06,21,5,0)
RESPONSES (#9002313.03) file. This corresponds to NCPDP field B23-7Q.
"^DD",9002313.32,9002313.32,2.06,"DT")
3150114
"^DD",9002313.32,9002313.32,2.07,0)
RESPONSE INTERMED AUTH TYPE ID^F^^2;7^K:$L(X)>2!($L(X)<1) X
"^DD",9002313.32,9002313.32,2.07,3)
Answer must be 1-2 characters in length.
"^DD",9002313.32,9002313.32,2.07,21,0)
^^5^5^3150114^
"^DD",9002313.32,9002313.32,2.07,21,1,0)
This is the override value that will be used for the payer response for 
"^DD",9002313.32,9002313.32,2.07,21,2,0)
billing requests. The value will be used to populate the RESPONSE 
"^DD",9002313.32,9002313.32,2.07,21,3,0)
INTERMEDIARY AUTH CNT (#2052) field of the INTERMEDIARY MULTIPLE 
"^DD",9002313.32,9002313.32,2.07,21,4,0)
(#9002313.032052) of the RESPONSES (#9002313.0301) subfile of the BPS 
"^DD",9002313.32,9002313.32,2.07,21,5,0)
RESPONSES (#9002313.03) file. This corresponds to NCPDP field B53-8S.
"^DD",9002313.32,9002313.32,2.07,"DT")
3150114
"^DD",9002313.32,9002313.32,2.08,0)
RESPONSE INTERMEDIARY AUTH ID^F^^2;8^K:$L(X)>20!($L(X)<1) X
"^DD",9002313.32,9002313.32,2.08,3)
Answer must be 1-20 characters in length.
"^DD",9002313.32,9002313.32,2.08,21,0)
^^5^5^3150114^
"^DD",9002313.32,9002313.32,2.08,21,1,0)
This is the override value that will be used for the payer response for 
"^DD",9002313.32,9002313.32,2.08,21,2,0)
billing requests. The value will be used to populate the RESPONSE 
"^DD",9002313.32,9002313.32,2.08,21,3,0)
INTERMEDIARY AUTH ID (#2054) field of the INTERMEDIARY MULTIPLE 
"^DD",9002313.32,9002313.32,2.08,21,4,0)
(#9002313.032052) of the RESPONSES (#9002313.0301) subfile of the BPS 
"^DD",9002313.32,9002313.32,2.08,21,5,0)
RESPONSES (#9002313.03) file. This corresponds to NCPDP field B54-8T.
"^DD",9002313.32,9002313.32,2.08,"DT")
3150114
"^DD",9002313.32,9002313.32,3.01,0)
INTERMEDIARY MESSAGE^F^^3;1^K:$L(X)>200!($L(X)<1) X
"^DD",9002313.32,9002313.32,3.01,3)
Answer must be 1-200 characters in length.
"^DD",9002313.32,9002313.32,3.01,21,0)
^^5^5^3150114^
"^DD",9002313.32,9002313.32,3.01,21,1,0)
This is the override value that will be used for the payer response for 
"^DD",9002313.32,9002313.32,3.01,21,2,0)
billing requests. The value will be used to populate the INTERMEDIARY 
"^DD",9002313.32,9002313.32,3.01,21,3,0)
MESSAGE (#2051) field of the INTERMEDIARY MULTIPLE (#9002313.032052) of 
"^DD",9002313.32,9002313.32,3.01,21,4,0)
the RESPONSES (#9002313.0301) subfile of the BPS RESPONSES (#9002313.03) 
"^DD",9002313.32,9002313.32,3.01,21,5,0)
file. This corresponds to NCPDP field B51-8Q.
"^DD",9002313.32,9002313.32,3.01,"DT")
3150114
"^DD",9002313.57,9002313.5714,.03,0)
OTHER PAYER ID QUALIFIER^S^01:STANDARD UNIQUE HEALTH PLAN ID;02:HEALTH INDUSTRY NUMBER (HIN);03:BANK INFORMATION NUMBER (BIN);04:NAT. ASSOC. OF INS. COM.(NAIC);05:MEDICARE CARRIER NUMBER;09:COUPON;99:OTHER;^0;3^Q
"^DD",9002313.57,9002313.5714,.03,3)
Select Other Payer ID Qualifier.
"^DD",9002313.57,9002313.5714,.03,21,0)
^^1^1^3100617^
"^DD",9002313.57,9002313.5714,.03,21,1,0)
NCPDP field 339-6C - Code qualifying the 'Other Payer ID' (340-7C).
"^DD",9002313.57,9002313.5714,.03,"DT")
3141125
"^DD",9002313.57,9002313.57141,.02,0)
OTHER PAYER AMT PAID QUALIFIER^P9002313.2'^BPS(9002313.2,^0;2^Q
"^DD",9002313.57,9002313.57141,.02,3)
Enter the type of Other Payer Amount Paid.
"^DD",9002313.57,9002313.57141,.02,21,0)
^^2^2^3100617^
"^DD",9002313.57,9002313.57141,.02,21,1,0)
NCPDP field 342-HC - Code qualifying the 'Other Payer Amount Paid'
"^DD",9002313.57,9002313.57141,.02,21,2,0)
(431-DV).
"^DD",9002313.57,9002313.57141,.02,"DT")
3141201
"^DD",9002313.59,9002313.5914,.03,0)
OTHER PAYER ID QUALIFIER^S^01:STANDARD UNIQUE HEALTH PLAN ID;02:HEALTH INDUSTRY NUMBER (HIN);03:BANK INFORMATION NUMBER (BIN);04:NAT. ASSOC. OF INS. COM.(NAIC);05:MEDICARE CARRIER NUMBER;09:COUPON;99:OTHER;^0;3^Q
"^DD",9002313.59,9002313.5914,.03,3)
Select Other Payer ID Qualifier.
"^DD",9002313.59,9002313.5914,.03,"DT")
3141125
"^DD",9002313.59,9002313.59141,.02,0)
OTHER PAYER AMT PAID QUALIFIER^P9002313.2'^BPS(9002313.2,^0;2^Q
"^DD",9002313.59,9002313.59141,.02,3)
Enter the type of Other Payer Amount Paid.
"^DD",9002313.59,9002313.59141,.02,21,0)
^^2^2^3100614^
"^DD",9002313.59,9002313.59141,.02,21,1,0)
NCPDP field 342-HC - Code qualifying the 'Other Payer Amount Paid'
"^DD",9002313.59,9002313.59141,.02,21,2,0)
(431-DV).
"^DD",9002313.59,9002313.59141,.02,"DT")
3141126
"^DD",9002313.77,9002313.778,.03,0)
OTHER PAYER ID QUALIFIER^S^01:STANDARD UNIQUE HEALTH PLAN ID;02:HEALTH INDUSTRY NUMBER (HIN);03:BANK INFORMATION NUMBER (BIN);04:NAT. ASSOC. OF INS. COM.(NAIC);05:MEDICARE CARRIER NUMBER;09:COUPON;99:OTHER;^0;3^Q
"^DD",9002313.77,9002313.778,.03,3)
Select Other Payer ID Qualifier.
"^DD",9002313.77,9002313.778,.03,"DT")
3141125
"^DD",9002313.77,9002313.7781,.02,0)
OTHER PAYER AMT PAID QUALIFIER^P9002313.2'^BPS(9002313.2,^0;2^Q
"^DD",9002313.77,9002313.7781,.02,3)
Enter the type of Other Payer Amount Paid.
"^DD",9002313.77,9002313.7781,.02,21,0)
^^2^2^3141126^
"^DD",9002313.77,9002313.7781,.02,21,1,0)
NCPDP field 342-HC - Code qualifying the 'Other Payer Amount Paid' 
"^DD",9002313.77,9002313.7781,.02,21,2,0)
(431-DV).                                                         
"^DD",9002313.77,9002313.7781,.02,"DT")
3141126
"^DD",9002313.91,9002313.91,0)
FIELD^^1^13
"^DD",9002313.91,9002313.91,0,"DDA")
N
"^DD",9002313.91,9002313.91,0,"DT")
3130222
"^DD",9002313.91,9002313.91,0,"ID",.03)
W "   ",$P(^(0),U,3)
"^DD",9002313.91,9002313.91,0,"IX","B",9002313.91,.01)

"^DD",9002313.91,9002313.91,0,"IX","C",9002313.91,.03)

"^DD",9002313.91,9002313.91,0,"IX","D",9002313.91,.06)

"^DD",9002313.91,9002313.91,0,"NM","BPS NCPDP FIELD DEFS")

"^DD",9002313.91,9002313.91,0,"PT",9002313.311,.01)

"^DD",9002313.91,9002313.91,0,"PT",9002313.3121,.01)

"^DD",9002313.91,9002313.91,0,"PT",9002313.5111,.01)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9205,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9206,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9207,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9208,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9209,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.921,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9213,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9214,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9215,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9216,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9217,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9218,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9219,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.922,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9223,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9224,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9225,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9227,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9228,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9229,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.923,.02)

"^DD",9002313.91,9002313.91,0,"VRPK")
BPS
"^DD",9002313.91,9002313.91,.01,0)
NCPDP FIELD NUMBER^RFX^^0;1^K:$L(X)>6!($L(X)<3) X
"^DD",9002313.91,9002313.91,.01,1,0)
^.1
"^DD",9002313.91,9002313.91,.01,1,1,0)
9002313.91^B
"^DD",9002313.91,9002313.91,.01,1,1,1)
S ^BPSF(9002313.91,"B",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,.01,1,1,2)
K ^BPSF(9002313.91,"B",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,.01,3)
Enter the NCPDP field number (either 0-997, 2 Decimal Digits or 3 Alphanumerics).
"^DD",9002313.91,9002313.91,.01,21,0)
^^1^1^3101014^
"^DD",9002313.91,9002313.91,.01,21,1,0)
This is the NCPDP field number as specified in the NCPDP data dictionary.
"^DD",9002313.91,9002313.91,.01,"DT")
3130109
"^DD",9002313.91,9002313.91,.03,0)
NAME^F^^0;3^K:$L(X)>30!($L(X)<3) X
"^DD",9002313.91,9002313.91,.03,1,0)
^.1
"^DD",9002313.91,9002313.91,.03,1,1,0)
9002313.91^C
"^DD",9002313.91,9002313.91,.03,1,1,1)
S ^BPSF(9002313.91,"C",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,.03,1,1,2)
K ^BPSF(9002313.91,"C",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,.03,1,1,"DT")
3001007
"^DD",9002313.91,9002313.91,.03,3)
Answer must be 3-30 characters in length.
"^DD",9002313.91,9002313.91,.03,21,0)
^^2^2^3071227^
"^DD",9002313.91,9002313.91,.03,21,1,0)
Descriptive name the tells what the field is within the pharmacy
"^DD",9002313.91,9002313.91,.03,21,2,0)
environment.
"^DD",9002313.91,9002313.91,.03,"DT")
3071227
"^DD",9002313.91,9002313.91,.04,0)
FORMAT^S^N:NUMERIC;A/N:ALPHA/NUMERIC;D:SIGNED NUMERIC;^0;4^Q
"^DD",9002313.91,9002313.91,.04,3)
Enter the field's format type.
"^DD",9002313.91,9002313.91,.04,21,0)
^^1^1^3071227^
"^DD",9002313.91,9002313.91,.04,21,1,0)
This is the format of the field used within the NCPDP standard.
"^DD",9002313.91,9002313.91,.04,"DT")
3071227
"^DD",9002313.91,9002313.91,.06,0)
ID^F^^5;1^K:$L(X)>2!($L(X)<2) X
"^DD",9002313.91,9002313.91,.06,1,0)
^.1
"^DD",9002313.91,9002313.91,.06,1,1,0)
9002313.91^D
"^DD",9002313.91,9002313.91,.06,1,1,1)
S ^BPSF(9002313.91,"D",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,.06,1,1,2)
K ^BPSF(9002313.91,"D",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,.06,1,1,"%D",0)
^^3^3^3020807^
"^DD",9002313.91,9002313.91,.06,1,1,"%D",1,0)
Cross reference of the 5.1 Field ID.  This cross reference will be used in
"^DD",9002313.91,9002313.91,.06,1,1,"%D",2,0)
the processing of the response as a means of translating the value to a
"^DD",9002313.91,9002313.91,.06,1,1,"%D",3,0)
field number.
"^DD",9002313.91,9002313.91,.06,1,1,"DT")
3020807
"^DD",9002313.91,9002313.91,.06,3)
Answer must be 2 characters in length.
"^DD",9002313.91,9002313.91,.06,21,0)
^^3^3^3071227^
"^DD",9002313.91,9002313.91,.06,21,1,0)
The same as the .02 field, but for specific use when creating 5.1
"^DD",9002313.91,9002313.91,.06,21,2,0)
claims.  The 5.1 fields were separated because 3.x and 5.1 claims were
"^DD",9002313.91,9002313.91,.06,21,3,0)
being submitted concurrently.  
"^DD",9002313.91,9002313.91,.06,"DT")
3071227
"^DD",9002313.91,9002313.91,.07,0)
LENGTH^NJ4,0^^5;2^K:+X'=X!(X>9999)!(X<1)!(X?.E1"."1.N) X
"^DD",9002313.91,9002313.91,.07,3)
Type a number between 1 and 9999, 0 Decimal Digits
"^DD",9002313.91,9002313.91,.07,21,0)
^^1^1^3040121^
"^DD",9002313.91,9002313.91,.07,21,1,0)
Length of the field from the 5.1 NCPDP standard.
"^DD",9002313.91,9002313.91,.07,"DT")
3071227
"^DD",9002313.91,9002313.91,.08,0)
D0 LENGTH^NJ3,0^^0;8^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",9002313.91,9002313.91,.08,3)
Enter the length of the NCPDP field per the NCPDP data dictionary (1-999).
"^DD",9002313.91,9002313.91,.08,21,0)
^^2^2^3101014^
"^DD",9002313.91,9002313.91,.08,21,1,0)
This is the NCPDP length as specified in the NCPDP Telecommunication
"^DD",9002313.91,9002313.91,.08,21,2,0)
Standard version D.0 data dictionary.
"^DD",9002313.91,9002313.91,.08,"DT")
3101014
"^DD",9002313.91,9002313.91,.09,0)
D0 FORMAT^S^N:NUMERIC;A/N:ALPHANUMERIC;D:SIGNED NUMERIC;^0;9^Q
"^DD",9002313.91,9002313.91,.09,3)
Enter the data type for the field based on the NCPDP data dictionary.
"^DD",9002313.91,9002313.91,.09,21,0)
^^2^2^3101014^
"^DD",9002313.91,9002313.91,.09,21,1,0)
This is the NCPDP data type as specified in the NCPDP Telecommunication
"^DD",9002313.91,9002313.91,.09,21,2,0)
Standard version D.0 data dictionary.
"^DD",9002313.91,9002313.91,.09,"DT")
3101014
"^DD",9002313.91,9002313.91,1,0)
VISTA FIELD NUMBER^NJ4,0^^5;3^K:+X'=X!(X>2999)!(X<1001)!(X?.E1"."1.N) X
"^DD",9002313.91,9002313.91,1,3)
Type a number between 1001 and 2999, 0 decimal digits.
"^DD",9002313.91,9002313.91,1,21,0)
^^5^5^3130424^
"^DD",9002313.91,9002313.91,1,21,1,0)
This is the VistA field number used in BPS CLAIMS file #9002313.02 and BPS
"^DD",9002313.91,9002313.91,1,21,2,0)
RESPONSES file #9002313.03. Only used for NCPDP numbers where the first 
"^DD",9002313.91,9002313.91,1,21,3,0)
piece of the NCPDP number is non-numeric.
"^DD",9002313.91,9002313.91,1,21,4,0)
 
"^DD",9002313.91,9002313.91,1,21,5,0)
For example, NCPDP field B04-BT - Next Available Fill Date.
"^DD",9002313.91,9002313.91,1,"DT")
3130424
"^DD",9002313.91,9002313.91,1.01,0)
STANDARD NCPDP FIELD NAME^F^^1;1^K:$L(X)>100!($L(X)<1) X
"^DD",9002313.91,9002313.91,1.01,3)
Enter the full NCPDP field name based on the NCPDP data dictionary (1-100 characters).
"^DD",9002313.91,9002313.91,1.01,21,0)
^^3^3^3101014^
"^DD",9002313.91,9002313.91,1.01,21,1,0)
This field is used for those NCPDP field names that were too long to fit 
"^DD",9002313.91,9002313.91,1.01,21,2,0)
in the NAME (#.03) field.  For those fields, this field will
"^DD",9002313.91,9002313.91,1.01,21,3,0)
have the full NCPDP field name.
"^DD",9002313.91,9002313.91,1.01,"DT")
3110706
"^DD",9002313.91,9002313.91,10,0)
GET CODE^9002313.9101^^10;0
"^DD",9002313.91,9002313.91,10,3)
Enter the M code to extract the data for this field.
"^DD",9002313.91,9002313.91,10,9)
@
"^DD",9002313.91,9002313.91,10,21,0)
^.001^2^2^3101001^^
"^DD",9002313.91,9002313.91,10,21,1,0)
M code that tells the BPS system where to find the 
"^DD",9002313.91,9002313.91,10,21,2,0)
particular piece of data for this field.
"^DD",9002313.91,9002313.91,10,"DT")
3071227
"^DD",9002313.91,9002313.91,20,0)
D0 FORMAT CODE^9002313.9102^^20;0
"^DD",9002313.91,9002313.91,20,9)
@
"^DD",9002313.91,9002313.91,20,21,0)
^^4^4^3101014^
"^DD",9002313.91,9002313.91,20,21,1,0)
This field holds the M code used to format the data according to the
"^DD",9002313.91,9002313.91,20,21,2,0)
specifications of the NCPDP Telecommunication Standard version D.0 data
"^DD",9002313.91,9002313.91,20,21,3,0)
dictionary.  For instance, alphanumeric fields are right-padded with
"^DD",9002313.91,9002313.91,20,21,4,0)
spaces up to the length of the specified by the NCPDP standard.
"^DD",9002313.91,9002313.91,20,"DT")
3101005
"^DD",9002313.91,9002313.91,30,0)
SET CODE^9002313.9103^^30;0
"^DD",9002313.91,9002313.91,30,3)
Enter the M code for the field's data storage.
"^DD",9002313.91,9002313.91,30,9)
@
"^DD",9002313.91,9002313.91,30,21,0)
^^1^1^3040326^
"^DD",9002313.91,9002313.91,30,21,1,0)
M code to store the data in the appropriate segment within the claim.
"^DD",9002313.91,9002313.91,30,"DT")
3071227
"^DD",9002313.91,9002313.91,40,0)
FORMAT CODE^9002313.9104^^25;0
"^DD",9002313.91,9002313.91,40,3)
Enter the M code to format the data in NCPDP format.
"^DD",9002313.91,9002313.91,40,9)
@
"^DD",9002313.91,9002313.91,40,21,0)
^^2^2^3071227^
"^DD",9002313.91,9002313.91,40,21,1,0)
M code to format the data before storing it in the claim.  5.1 was
"^DD",9002313.91,9002313.91,40,21,2,0)
separate because 3.2 and 5.1 claims were being submitted at the same time.
"^DD",9002313.91,9002313.91,40,"DT")
3071227
"^DD",9002313.91,9002313.9101,0)
GET CODE SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9101,0,"DT")
3071227
"^DD",9002313.91,9002313.9101,0,"NM","GET CODE")

"^DD",9002313.91,9002313.9101,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9101,.01,0)
GET CODE^WL^^0;1^Q
"^DD",9002313.91,9002313.9101,.01,3)
Enter the M code to extract the data for this field.
"^DD",9002313.91,9002313.9101,.01,9)
@
"^DD",9002313.91,9002313.9101,.01,"DT")
3071227
"^DD",9002313.91,9002313.9102,0)
D0 FORMAT CODE SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9102,0,"DT")
3100721
"^DD",9002313.91,9002313.9102,0,"NM","D0 FORMAT CODE")

"^DD",9002313.91,9002313.9102,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9102,.01,0)
D0 FORMAT CODE^WLx^^0;1^Q
"^DD",9002313.91,9002313.9102,.01,"DT")
3101014
"^DD",9002313.91,9002313.9103,0)
SET CODE SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9103,0,"DT")
2950420
"^DD",9002313.91,9002313.9103,0,"NM","SET CODE")

"^DD",9002313.91,9002313.9103,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9103,.01,0)
SET CODE^WL^^0;1^Q
"^DD",9002313.91,9002313.9103,.01,3)
Enter the M code for the field's data storage.
"^DD",9002313.91,9002313.9103,.01,9)
@
"^DD",9002313.91,9002313.9103,.01,"DT")
3071227
"^DD",9002313.91,9002313.9104,0)
FORMAT CODE SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9104,0,"DT")
3020724
"^DD",9002313.91,9002313.9104,0,"NM","FORMAT CODE")

"^DD",9002313.91,9002313.9104,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9104,.01,0)
FORMAT CODE^WL^^0;1^Q
"^DD",9002313.91,9002313.9104,.01,3)
Enter the M code to format the data in NCPDP format.
"^DD",9002313.91,9002313.9104,.01,9)
@
"^DD",9002313.91,9002313.9104,.01,"DT")
3071227
"^DD",9002313.92,9002313.92,290,0)
INTERMEDIARY SEGMENT^9002313.9229^^290;0
"^DD",9002313.92,9002313.92,290,21,0)
^.001^2^2^3150126^^
"^DD",9002313.92,9002313.92,290,21,1,0)
This subfile holds the fields and processing rules for the NCPCP 
"^DD",9002313.92,9002313.92,290,21,2,0)
Intermediary Segment
"^DD",9002313.92,9002313.92,300,0)
LAST KNOWN 4RX SEGMENT^9002313.923^^300;0
"^DD",9002313.92,9002313.92,300,21,0)
^.001^2^2^3150126^^
"^DD",9002313.92,9002313.92,300,21,1,0)
This subfile holds the fields and processing rules for the NCPDP Last 
"^DD",9002313.92,9002313.92,300,21,2,0)
Known 4RX segment.
"^DD",9002313.92,9002313.9229,0)
INTERMEDIARY SEGMENT SUB-FIELD^^2^5
"^DD",9002313.92,9002313.9229,0,"DT")
3150126
"^DD",9002313.92,9002313.9229,0,"IX","B",9002313.9229,.01)

"^DD",9002313.92,9002313.9229,0,"NM","INTERMEDIARY SEGMENT")

"^DD",9002313.92,9002313.9229,0,"UP")
9002313.92
"^DD",9002313.92,9002313.9229,.01,0)
INTERMEDIARY SEGMENT ORDER^MNJ4,0^^0;1^K:+X'=X!(X>9999)!(X<1)!(X?.E1"."1.N) X
"^DD",9002313.92,9002313.9229,.01,1,0)
^.1
"^DD",9002313.92,9002313.9229,.01,1,1,0)
9002313.9229^B
"^DD",9002313.92,9002313.9229,.01,1,1,1)
S ^BPSF(9002313.92,DA(1),290,"B",$E(X,1,30),DA)=""
"^DD",9002313.92,9002313.9229,.01,1,1,2)
K ^BPSF(9002313.92,DA(1),290,"B",$E(X,1,30),DA)
"^DD",9002313.92,9002313.9229,.01,3)
Type a number between 1 and 9999, 0 decimal digits.
"^DD",9002313.92,9002313.9229,.01,21,0)
^^2^2^3140915^
"^DD",9002313.92,9002313.9229,.01,21,1,0)
This field indicates the order of the NCPDP field as it will appear in 
"^DD",9002313.92,9002313.9229,.01,21,2,0)
the INTERMEDIARY segment.
"^DD",9002313.92,9002313.9229,.01,"DT")
3140915
"^DD",9002313.92,9002313.9229,.02,0)
NCPDP FIELD NUMBER^P9002313.91'^BPSF(9002313.91,^0;2^Q
"^DD",9002313.92,9002313.9229,.02,3)
Select the NCPDP field number belonging to the Intermediary Segment
"^DD",9002313.92,9002313.9229,.02,21,0)
^^1^1^3140915^
"^DD",9002313.92,9002313.9229,.02,21,1,0)
This is the NCPDP field that belongs to this segment of the payer sheet
"^DD",9002313.92,9002313.9229,.02,"DT")
3140915
"^DD",9002313.92,9002313.9229,.03,0)
PROCESSING MODE^S^D:DEFAULT;S:STANDARD;X:SPECIAL;?:UNKNOWN;^0;3^Q
"^DD",9002313.92,9002313.9229,.03,3)
Specify the mode for processing this NCPDP field.
"^DD",9002313.92,9002313.9229,.03,21,0)
^^1^1^3140915^
"^DD",9002313.92,9002313.9229,.03,21,1,0)
This is the processing mode that will be used for this field.
"^DD",9002313.92,9002313.9229,.03,"DT")
3140915
"^DD",9002313.92,9002313.9229,1,0)
SPECIAL CODE^9002313.92291^^1;0
"^DD",9002313.92,9002313.9229,1,21,0)
^^1^1^3150126^
"^DD",9002313.92,9002313.9229,1,21,1,0)
This is the special M code to be executed when the Processing Mode is 'X'.
"^DD",9002313.92,9002313.9229,2,0)
PROGRAMMING NOTES^9002313.92292^^2;0
"^DD",9002313.92,9002313.9229,2,21,0)
^^1^1^3150126^
"^DD",9002313.92,9002313.9229,2,21,1,0)
This is an optional description of the special code.
"^DD",9002313.92,9002313.92291,0)
SPECIAL CODE SUB-FIELD^^.01^1
"^DD",9002313.92,9002313.92291,0,"DT")
3150126
"^DD",9002313.92,9002313.92291,0,"NM","SPECIAL CODE")

"^DD",9002313.92,9002313.92291,0,"UP")
9002313.9229
"^DD",9002313.92,9002313.92291,.01,0)
SPECIAL CODE^WLx^^0;1^Q
"^DD",9002313.92,9002313.92291,.01,21,0)
^.001^1^1^3150126^^
"^DD",9002313.92,9002313.92291,.01,21,1,0)
This is the M code that is executed when the Processing Mode is "X".
"^DD",9002313.92,9002313.92291,.01,"DT")
3150126
"^DD",9002313.92,9002313.92292,0)
PROGRAMMING NOTES SUB-FIELD^^.01^1
"^DD",9002313.92,9002313.92292,0,"DT")
3140915
"^DD",9002313.92,9002313.92292,0,"NM","PROGRAMMING NOTES")

"^DD",9002313.92,9002313.92292,0,"UP")
9002313.9229
"^DD",9002313.92,9002313.92292,.01,0)
PROGRAMMING NOTES^WLx^^0;1
"^DD",9002313.92,9002313.92292,.01,21,0)
^.001^1^1^3150126^^^
"^DD",9002313.92,9002313.92292,.01,21,1,0)
This is an optional description of the special code.
"^DD",9002313.92,9002313.92292,.01,"DT")
3140915
"^DD",9002313.92,9002313.923,0)
LAST KNOWN 4RX SEGMENT SUB-FIELD^^2^5
"^DD",9002313.92,9002313.923,0,"DT")
3140915
"^DD",9002313.92,9002313.923,0,"IX","B",9002313.923,.01)

"^DD",9002313.92,9002313.923,0,"NM","LAST KNOWN 4RX SEGMENT")

"^DD",9002313.92,9002313.923,0,"UP")
9002313.92
"^DD",9002313.92,9002313.923,.01,0)
LAST KNOWN 4RX SEGMENT ORDER^MNJ4,0^^0;1^K:+X'=X!(X>9999)!(X<1)!(X?.E1"."1.N) X
"^DD",9002313.92,9002313.923,.01,1,0)
^.1
"^DD",9002313.92,9002313.923,.01,1,1,0)
9002313.923^B
"^DD",9002313.92,9002313.923,.01,1,1,1)
S ^BPSF(9002313.92,DA(1),300,"B",$E(X,1,30),DA)=""
"^DD",9002313.92,9002313.923,.01,1,1,2)
K ^BPSF(9002313.92,DA(1),300,"B",$E(X,1,30),DA)
"^DD",9002313.92,9002313.923,.01,3)
Type a number between 1 and 9999, 0 decimal digits.
"^DD",9002313.92,9002313.923,.01,21,0)
^^2^2^3140915^
"^DD",9002313.92,9002313.923,.01,21,1,0)
This field indicates the order of the NCPDP field as it will appear in 
"^DD",9002313.92,9002313.923,.01,21,2,0)
the LAST KNOWN 4RX segment.
"^DD",9002313.92,9002313.923,.01,"DT")
3140915
"^DD",9002313.92,9002313.923,.02,0)
NCPDP FIELD NUMBER^P9002313.91'^BPSF(9002313.91,^0;2^Q
"^DD",9002313.92,9002313.923,.02,3)
Select the NCPDP field number belonging to the Last Known 4Rx segment.
"^DD",9002313.92,9002313.923,.02,21,0)
^^1^1^3140915^
"^DD",9002313.92,9002313.923,.02,21,1,0)
This is the NCPDP field that belongs to this segment of the payer sheet.
"^DD",9002313.92,9002313.923,.02,"DT")
3140915
"^DD",9002313.92,9002313.923,.03,0)
PROCESSING MODE^S^D:DEFAULT;S:STANDARD;X:SPECIAL;?:UNKNOWN;^0;3^Q
"^DD",9002313.92,9002313.923,.03,3)
Specify the mode for processing this field.
"^DD",9002313.92,9002313.923,.03,21,0)
^^1^1^3140915^
"^DD",9002313.92,9002313.923,.03,21,1,0)
This is the processing mode that will be used for this field.
"^DD",9002313.92,9002313.923,.03,"DT")
3140915
"^DD",9002313.92,9002313.923,1,0)
SPECIAL CODE^9002313.9231^^1;0
"^DD",9002313.92,9002313.923,1,21,0)
^^1^1^3150126^
"^DD",9002313.92,9002313.923,1,21,1,0)
This is the special M code to be executed when the Processing Mode is 'X'.
"^DD",9002313.92,9002313.923,2,0)
PROGRAMMING NOTES^9002313.9232^^2;0
"^DD",9002313.92,9002313.923,2,21,0)
^^1^1^3150126^
"^DD",9002313.92,9002313.923,2,21,1,0)
This is an optional description of the special code.
"^DD",9002313.92,9002313.9231,0)
SPECIAL CODE SUB-FIELD^^.01^1
"^DD",9002313.92,9002313.9231,0,"DT")
3140915
"^DD",9002313.92,9002313.9231,0,"NM","SPECIAL CODE")

"^DD",9002313.92,9002313.9231,0,"UP")
9002313.923
"^DD",9002313.92,9002313.9231,.01,0)
SPECIAL CODE^WLx^^0;1
"^DD",9002313.92,9002313.9231,.01,21,0)
^^1^1^3140915^
"^DD",9002313.92,9002313.9231,.01,21,1,0)
This is the M code that is executed when the Processing Mode is "X".
"^DD",9002313.92,9002313.9231,.01,"DT")
3140915
"^DD",9002313.92,9002313.9232,0)
PROGRAMMING NOTES SUB-FIELD^^.01^1
"^DD",9002313.92,9002313.9232,0,"DT")
3140915
"^DD",9002313.92,9002313.9232,0,"NM","PROGRAMMING NOTES")

"^DD",9002313.92,9002313.9232,0,"UP")
9002313.923
"^DD",9002313.92,9002313.9232,.01,0)
PROGRAMMING NOTES^WLx^^0;1
"^DD",9002313.92,9002313.9232,.01,21,0)
^^1^1^3140915^
"^DD",9002313.92,9002313.9232,.01,21,1,0)
This is an optional description of the special code.
"^DD",9002313.92,9002313.9232,.01,"DT")
3140915
"^DD",9002313.93,9002313.93,0)
FIELD^^.02^2
"^DD",9002313.93,9002313.93,0,"DDA")
N
"^DD",9002313.93,9002313.93,0,"DT")
3030820
"^DD",9002313.93,9002313.93,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",9002313.93,9002313.93,0,"IX","B",9002313.93,.01)

"^DD",9002313.93,9002313.93,0,"NM","BPS NCPDP REJECT CODES")

"^DD",9002313.93,9002313.93,0,"PT",52.865,.01)

"^DD",9002313.93,9002313.93,0,"PT",52.8651,.01)

"^DD",9002313.93,9002313.93,0,"PT",9002313.321,.01)

"^DD",9002313.93,9002313.93,0,"VRPK")
BPS
"^DD",9002313.93,9002313.93,.01,0)
CODE^RF^^0;1^K:$L(X)>3!($L(X)<2) X
"^DD",9002313.93,9002313.93,.01,1,0)
^.1
"^DD",9002313.93,9002313.93,.01,1,1,0)
9002313.93^B
"^DD",9002313.93,9002313.93,.01,1,1,1)
S ^BPSF(9002313.93,"B",$E(X,1,30),DA)=""
"^DD",9002313.93,9002313.93,.01,1,1,2)
K ^BPSF(9002313.93,"B",$E(X,1,30),DA)
"^DD",9002313.93,9002313.93,.01,3)
Enter the Reject Code that is returned from the payer.
"^DD",9002313.93,9002313.93,.01,21,0)
^^2^2^3080529^
"^DD",9002313.93,9002313.93,.01,21,1,0)
Reject Code returned by the payer for the reason of the rejection.  This
"^DD",9002313.93,9002313.93,.01,21,2,0)
is based on the NCPDP standards.
"^DD",9002313.93,9002313.93,.01,"DT")
3080529
"^DD",9002313.93,9002313.93,.02,0)
EXPLANATION^F^^0;2^K:$L(X)>70!($L(X)<1) X
"^DD",9002313.93,9002313.93,.02,3)
Enter the description of the reject code.
"^DD",9002313.93,9002313.93,.02,21,0)
^^1^1^3080529^
"^DD",9002313.93,9002313.93,.02,21,1,0)
Textual explanation of the claim rejection.
"^DD",9002313.93,9002313.93,.02,"DT")
3080529
"^DIC",9002313.2,9002313.2,0)
BPS NCPDP OTHER PAYER AMT PAID QUAL^9002313.2
"^DIC",9002313.2,9002313.2,0,"GL")
^BPS(9002313.2,
"^DIC",9002313.2,9002313.2,"%",0)
^1.005^1^1
"^DIC",9002313.2,9002313.2,"%",1,0)
BPS
"^DIC",9002313.2,9002313.2,"%","B","BPS",1)

"^DIC",9002313.2,9002313.2,"%D",0)
^1.001^6^6^3150302^^
"^DIC",9002313.2,9002313.2,"%D",1,0)
This file is used to store the codes and descriptions for NCPDP field 
"^DIC",9002313.2,9002313.2,"%D",2,0)
342-HC (Other Payer Amount Paid Qualifier).  These codes are used for 
"^DIC",9002313.2,9002313.2,"%D",3,0)
secondary electronic claim transmissions to third party payers.  No local 
"^DIC",9002313.2,9002313.2,"%D",4,0)
changes should ever be made to this file.
"^DIC",9002313.2,9002313.2,"%D",5,0)
 
"^DIC",9002313.2,9002313.2,"%D",6,0)
Per VA Directive 6402, this file definition should not be modified.
"^DIC",9002313.2,"B","BPS NCPDP OTHER PAYER AMT PAID QUAL",9002313.2)

"^DIC",9002313.91,9002313.91,0)
BPS NCPDP FIELD DEFS^9002313.91
"^DIC",9002313.91,9002313.91,0,"GL")
^BPSF(9002313.91,
"^DIC",9002313.91,9002313.91,"%",0)
^1.005^^0
"^DIC",9002313.91,9002313.91,"%","B","ABSP",1)

"^DIC",9002313.91,9002313.91,"%D",0)
^1.001^4^4^3100925^^^^
"^DIC",9002313.91,9002313.91,"%D",1,0)
The NCPDP Data Dictionary Individual fields which combine into formatted 
"^DIC",9002313.91,9002313.91,"%D",2,0)
packets.
"^DIC",9002313.91,9002313.91,"%D",3,0)
 
"^DIC",9002313.91,9002313.91,"%D",4,0)
Per VHA Directive 2004-038, this file definition should not be modified.
"^DIC",9002313.91,"B","BPS NCPDP FIELD DEFS",9002313.91)

"^DIC",9002313.93,9002313.93,0)
BPS NCPDP REJECT CODES^9002313.93
"^DIC",9002313.93,9002313.93,0,"GL")
^BPSF(9002313.93,
"^DIC",9002313.93,9002313.93,"%",0)
^1.005^^0
"^DIC",9002313.93,9002313.93,"%","B","ABSP",1)

"^DIC",9002313.93,9002313.93,"%D",0)
^1.001^8^8^3100817^^
"^DIC",9002313.93,9002313.93,"%D",1,0)
NCPDP field 511-FB REJECT CODE
"^DIC",9002313.93,9002313.93,"%D",2,0)
 
"^DIC",9002313.93,9002313.93,"%D",3,0)
This file is used to store the possible NCPDP REJECT CODES, that can be 
"^DIC",9002313.93,9002313.93,"%D",4,0)
returned by the payer.  No local changes should ever be made to this
"^DIC",9002313.93,9002313.93,"%D",5,0)
file.  The data stored in this file are based on the NCPDP standards and
"^DIC",9002313.93,9002313.93,"%D",6,0)
are nationally distributed.
"^DIC",9002313.93,9002313.93,"%D",7,0)
 
"^DIC",9002313.93,9002313.93,"%D",8,0)
Per VHA Directive 2004-038, this file definition should not be modified.
"^DIC",9002313.93,"B","BPS NCPDP REJECT CODES",9002313.93)

**INSTALL NAME**
PSO*7.0*427
"BLD",9177,0)
PSO*7.0*427^OUTPATIENT PHARMACY^0^3151111^y
"BLD",9177,4,0)
^9.64PA^52.87^3
"BLD",9177,4,52,0)
52
"BLD",9177,4,52,2,0)
^9.641^52.25^1
"BLD",9177,4,52,2,52.25,0)
REJECT INFO  (sub-file)
"BLD",9177,4,52,2,52.25,1,0)
^9.6411^33^1
"BLD",9177,4,52,2,52.25,1,33,0)
INSURANCE COMPANY
"BLD",9177,4,52,222)
y^y^p^^^^n^^n
"BLD",9177,4,52,224)

"BLD",9177,4,52.86,0)
52.86
"BLD",9177,4,52.86,2,0)
^9.641^52.86^1
"BLD",9177,4,52.86,2,52.86,0)
EPHARMACY SITE PARAMETERS  (File-top level)
"BLD",9177,4,52.86,2,52.86,1,0)
^9.6411^6^1
"BLD",9177,4,52.86,2,52.86,1,6,0)
EPHARMACY RESPONSE PAUSE
"BLD",9177,4,52.86,222)
y^y^p^^^^n^^n
"BLD",9177,4,52.86,224)

"BLD",9177,4,52.87,0)
52.87
"BLD",9177,4,52.87,2,0)
^9.641^52.87^1
"BLD",9177,4,52.87,2,52.87,0)
PSO AUDIT LOG  (File-top level)
"BLD",9177,4,52.87,2,52.87,1,0)
^9.6411^17^2
"BLD",9177,4,52.87,2,52.87,1,12,0)
AUDIT TYPE
"BLD",9177,4,52.87,2,52.87,1,17,0)
JUSTIFICATION
"BLD",9177,4,52.87,222)
y^y^p^^^^n^^n
"BLD",9177,4,52.87,224)

"BLD",9177,4,"APDD",52,52.25)

"BLD",9177,4,"APDD",52,52.25,33)

"BLD",9177,4,"APDD",52.86,52.86)

"BLD",9177,4,"APDD",52.86,52.86,6)

"BLD",9177,4,"APDD",52.87,52.87)

"BLD",9177,4,"APDD",52.87,52.87,12)

"BLD",9177,4,"APDD",52.87,52.87,17)

"BLD",9177,4,"B",52,52)

"BLD",9177,4,"B",52.86,52.86)

"BLD",9177,4,"B",52.87,52.87)

"BLD",9177,6.3)
21
"BLD",9177,"ABPKG")
n
"BLD",9177,"INID")
^n
"BLD",9177,"INIT")
EN^PSO427PS
"BLD",9177,"KRN",0)
^9.67PA^779.2^20
"BLD",9177,"KRN",.4,0)
.4
"BLD",9177,"KRN",.401,0)
.401
"BLD",9177,"KRN",.402,0)
.402
"BLD",9177,"KRN",.403,0)
.403
"BLD",9177,"KRN",.5,0)
.5
"BLD",9177,"KRN",.84,0)
.84
"BLD",9177,"KRN",3.6,0)
3.6
"BLD",9177,"KRN",3.8,0)
3.8
"BLD",9177,"KRN",9.2,0)
9.2
"BLD",9177,"KRN",9.8,0)
9.8
"BLD",9177,"KRN",9.8,"NM",0)
^9.68A^30^30
"BLD",9177,"KRN",9.8,"NM",1,0)
PSODRG^^0^B79401497
"BLD",9177,"KRN",9.8,"NM",2,0)
PSOORAL2^^0^B19100790
"BLD",9177,"KRN",9.8,"NM",3,0)
PSOORED2^^0^B76930084
"BLD",9177,"KRN",9.8,"NM",4,0)
PSOOREDT^^0^B80361820
"BLD",9177,"KRN",9.8,"NM",5,0)
PSOORNE2^^0^B68332016
"BLD",9177,"KRN",9.8,"NM",6,0)
PSOORUT1^^0^B83981960
"BLD",9177,"KRN",9.8,"NM",7,0)
PSOPMP0^^0^B89661374
"BLD",9177,"KRN",9.8,"NM",8,0)
PSOPMPPF^^0^B56602734
"BLD",9177,"KRN",9.8,"NM",9,0)
PSORXVW^^0^B80713537
"BLD",9177,"KRN",9.8,"NM",10,0)
PSORXVW1^^0^B71633557
"BLD",9177,"KRN",9.8,"NM",11,0)
PSOREJP0^^0^B124398750
"BLD",9177,"KRN",9.8,"NM",12,0)
PSOREJP4^^0^B67032056
"BLD",9177,"KRN",9.8,"NM",13,0)
PSOREJP2^^0^B181854051
"BLD",9177,"KRN",9.8,"NM",14,0)
PSOREJUT^^0^B107104625
"BLD",9177,"KRN",9.8,"NM",15,0)
PSOREJU2^^0^B60756541
"BLD",9177,"KRN",9.8,"NM",16,0)
PSOREJP3^^0^B123136868
"BLD",9177,"KRN",9.8,"NM",17,0)
PSOBPSSL^^0^B90979558
"BLD",9177,"KRN",9.8,"NM",18,0)
PSOBPSSP^^0^B308796788
"BLD",9177,"KRN",9.8,"NM",19,0)
PSOBORP1^^0^B123532809
"BLD",9177,"KRN",9.8,"NM",20,0)
PSOBORP2^^0^B22525034
"BLD",9177,"KRN",9.8,"NM",21,0)
PSOBORP3^^0^B197783254
"BLD",9177,"KRN",9.8,"NM",22,0)
PSOTRI^^0^B18379619
"BLD",9177,"KRN",9.8,"NM",23,0)
PSOBPSU1^^0^B77585767
"BLD",9177,"KRN",9.8,"NM",24,0)
PSOREJU3^^0^B84746710
"BLD",9177,"KRN",9.8,"NM",25,0)
PSOREJP1^^0^B185402834
"BLD",9177,"KRN",9.8,"NM",26,0)
PSORXEDT^^0^B48455949
"BLD",9177,"KRN",9.8,"NM",27,0)
PSOSULBL^^0^B99891854
"BLD",9177,"KRN",9.8,"NM",28,0)
PSOSUPRX^^0^B53587133
"BLD",9177,"KRN",9.8,"NM",29,0)
PSOSUPAT^^0^B87781401
"BLD",9177,"KRN",9.8,"NM",30,0)
PSOSUPOE^^0^B81516585
"BLD",9177,"KRN",9.8,"NM","B","PSOBORP1",19)

"BLD",9177,"KRN",9.8,"NM","B","PSOBORP2",20)

"BLD",9177,"KRN",9.8,"NM","B","PSOBORP3",21)

"BLD",9177,"KRN",9.8,"NM","B","PSOBPSSL",17)

"BLD",9177,"KRN",9.8,"NM","B","PSOBPSSP",18)

"BLD",9177,"KRN",9.8,"NM","B","PSOBPSU1",23)

"BLD",9177,"KRN",9.8,"NM","B","PSODRG",1)

"BLD",9177,"KRN",9.8,"NM","B","PSOORAL2",2)

"BLD",9177,"KRN",9.8,"NM","B","PSOORED2",3)

"BLD",9177,"KRN",9.8,"NM","B","PSOOREDT",4)

"BLD",9177,"KRN",9.8,"NM","B","PSOORNE2",5)

"BLD",9177,"KRN",9.8,"NM","B","PSOORUT1",6)

"BLD",9177,"KRN",9.8,"NM","B","PSOPMP0",7)

"BLD",9177,"KRN",9.8,"NM","B","PSOPMPPF",8)

"BLD",9177,"KRN",9.8,"NM","B","PSOREJP0",11)

"BLD",9177,"KRN",9.8,"NM","B","PSOREJP1",25)

"BLD",9177,"KRN",9.8,"NM","B","PSOREJP2",13)

"BLD",9177,"KRN",9.8,"NM","B","PSOREJP3",16)

"BLD",9177,"KRN",9.8,"NM","B","PSOREJP4",12)

"BLD",9177,"KRN",9.8,"NM","B","PSOREJU2",15)

"BLD",9177,"KRN",9.8,"NM","B","PSOREJU3",24)

"BLD",9177,"KRN",9.8,"NM","B","PSOREJUT",14)

"BLD",9177,"KRN",9.8,"NM","B","PSORXEDT",26)

"BLD",9177,"KRN",9.8,"NM","B","PSORXVW",9)

"BLD",9177,"KRN",9.8,"NM","B","PSORXVW1",10)

"BLD",9177,"KRN",9.8,"NM","B","PSOSULBL",27)

"BLD",9177,"KRN",9.8,"NM","B","PSOSUPAT",29)

"BLD",9177,"KRN",9.8,"NM","B","PSOSUPOE",30)

"BLD",9177,"KRN",9.8,"NM","B","PSOSUPRX",28)

"BLD",9177,"KRN",9.8,"NM","B","PSOTRI",22)

"BLD",9177,"KRN",19,0)
19
"BLD",9177,"KRN",19,"NM",0)
^9.68A^^
"BLD",9177,"KRN",19.1,0)
19.1
"BLD",9177,"KRN",101,0)
101
"BLD",9177,"KRN",101,"NM",0)
^9.68A^26^26
"BLD",9177,"KRN",101,"NM",1,0)
PSO REJECT TRICARE HIDDEN MENU^^0
"BLD",9177,"KRN",101,"NM",2,0)
PSO REJECT DISPLAY HIDDEN MENU^^2
"BLD",9177,"KRN",101,"NM",3,0)
PSO REJECTS PRINT TO EXCEL^^0
"BLD",9177,"KRN",101,"NM",4,0)
PSO REJECTS HIDDEN ACTIONS #1^^2
"BLD",9177,"KRN",101,"NM",5,0)
PSO REJECT DISCONTINUE^^4^
"BLD",9177,"KRN",101,"NM",6,0)
VALM NEXT SCREEN^^4^
"BLD",9177,"KRN",101,"NM",7,0)
VALM PREVIOUS SCREEN^^4^
"BLD",9177,"KRN",101,"NM",8,0)
VALM UP ONE LINE^^4^
"BLD",9177,"KRN",101,"NM",9,0)
VALM REFRESH^^4^
"BLD",9177,"KRN",101,"NM",10,0)
VALM PRINT SCREEN^^4^
"BLD",9177,"KRN",101,"NM",11,0)
VALM PRINT LIST^^4^
"BLD",9177,"KRN",101,"NM",12,0)
VALM QUIT^^4^
"BLD",9177,"KRN",101,"NM",13,0)
VALM LAST SCREEN^^4^
"BLD",9177,"KRN",101,"NM",14,0)
VALM GOTO PAGE^^4^
"BLD",9177,"KRN",101,"NM",15,0)
PSO REJECT DISPLAY RX EDIT^^4^
"BLD",9177,"KRN",101,"NM",16,0)
PSO REJECT DISPLAY CLARIFICATION CODE^^4^
"BLD",9177,"KRN",101,"NM",17,0)
PSO REJECT DISPLAY ADD COMMENT^^4^
"BLD",9177,"KRN",101,"NM",18,0)
VALM TURN ON/OFF MENUS^^4^
"BLD",9177,"KRN",101,"NM",19,0)
PSO REJECT DISPLAY PRIOR AUTHORIZATION^^4^
"BLD",9177,"KRN",101,"NM",20,0)
VALM DOWN A LINE^^4^
"BLD",9177,"KRN",101,"NM",21,0)
VALM SEARCH LIST^^4^
"BLD",9177,"KRN",101,"NM",22,0)
PSO REJECT DISPLAY ADDITIONAL INFO^^4^
"BLD",9177,"KRN",101,"NM",23,0)
PSO REJECT DISPLAY SMA^^4^
"BLD",9177,"KRN",101,"NM",24,0)
PSO REJECT SUSPENSE DT CALC^^4^
"BLD",9177,"KRN",101,"NM",25,0)
PSO REJECT VIEW ECME RX^^4^
"BLD",9177,"KRN",101,"NM",26,0)
VALM FIRST SCREEN^^4^
"BLD",9177,"KRN",101,"NM","B","PSO REJECT DISCONTINUE",5)

"BLD",9177,"KRN",101,"NM","B","PSO REJECT DISPLAY ADD COMMENT",17)

"BLD",9177,"KRN",101,"NM","B","PSO REJECT DISPLAY ADDITIONAL INFO",22)

"BLD",9177,"KRN",101,"NM","B","PSO REJECT DISPLAY CLARIFICATION CODE",16)

"BLD",9177,"KRN",101,"NM","B","PSO REJECT DISPLAY HIDDEN MENU",2)

"BLD",9177,"KRN",101,"NM","B","PSO REJECT DISPLAY PRIOR AUTHORIZATION",19)

"BLD",9177,"KRN",101,"NM","B","PSO REJECT DISPLAY RX EDIT",15)

"BLD",9177,"KRN",101,"NM","B","PSO REJECT DISPLAY SMA",23)

"BLD",9177,"KRN",101,"NM","B","PSO REJECT SUSPENSE DT CALC",24)

"BLD",9177,"KRN",101,"NM","B","PSO REJECT TRICARE HIDDEN MENU",1)

"BLD",9177,"KRN",101,"NM","B","PSO REJECT VIEW ECME RX",25)

"BLD",9177,"KRN",101,"NM","B","PSO REJECTS HIDDEN ACTIONS #1",4)

"BLD",9177,"KRN",101,"NM","B","PSO REJECTS PRINT TO EXCEL",3)

"BLD",9177,"KRN",101,"NM","B","VALM DOWN A LINE",20)

"BLD",9177,"KRN",101,"NM","B","VALM FIRST SCREEN",26)

"BLD",9177,"KRN",101,"NM","B","VALM GOTO PAGE",14)

"BLD",9177,"KRN",101,"NM","B","VALM LAST SCREEN",13)

"BLD",9177,"KRN",101,"NM","B","VALM NEXT SCREEN",6)

"BLD",9177,"KRN",101,"NM","B","VALM PREVIOUS SCREEN",7)

"BLD",9177,"KRN",101,"NM","B","VALM PRINT LIST",11)

"BLD",9177,"KRN",101,"NM","B","VALM PRINT SCREEN",10)

"BLD",9177,"KRN",101,"NM","B","VALM QUIT",12)

"BLD",9177,"KRN",101,"NM","B","VALM REFRESH",9)

"BLD",9177,"KRN",101,"NM","B","VALM SEARCH LIST",21)

"BLD",9177,"KRN",101,"NM","B","VALM TURN ON/OFF MENUS",18)

"BLD",9177,"KRN",101,"NM","B","VALM UP ONE LINE",8)

"BLD",9177,"KRN",409.61,0)
409.61
"BLD",9177,"KRN",409.61,"NM",0)
^9.68A^1^1
"BLD",9177,"KRN",409.61,"NM",1,0)
PSO REJECT TRICARE^^0
"BLD",9177,"KRN",409.61,"NM","B","PSO REJECT TRICARE",1)

"BLD",9177,"KRN",771,0)
771
"BLD",9177,"KRN",779.2,0)
779.2
"BLD",9177,"KRN",870,0)
870
"BLD",9177,"KRN",8989.51,0)
8989.51
"BLD",9177,"KRN",8989.52,0)
8989.52
"BLD",9177,"KRN",8994,0)
8994
"BLD",9177,"KRN","B",.4,.4)

"BLD",9177,"KRN","B",.401,.401)

"BLD",9177,"KRN","B",.402,.402)

"BLD",9177,"KRN","B",.403,.403)

"BLD",9177,"KRN","B",.5,.5)

"BLD",9177,"KRN","B",.84,.84)

"BLD",9177,"KRN","B",3.6,3.6)

"BLD",9177,"KRN","B",3.8,3.8)

"BLD",9177,"KRN","B",9.2,9.2)

"BLD",9177,"KRN","B",9.8,9.8)

"BLD",9177,"KRN","B",19,19)

"BLD",9177,"KRN","B",19.1,19.1)

"BLD",9177,"KRN","B",101,101)

"BLD",9177,"KRN","B",409.61,409.61)

"BLD",9177,"KRN","B",771,771)

"BLD",9177,"KRN","B",779.2,779.2)

"BLD",9177,"KRN","B",870,870)

"BLD",9177,"KRN","B",8989.51,8989.51)

"BLD",9177,"KRN","B",8989.52,8989.52)

"BLD",9177,"KRN","B",8994,8994)

"BLD",9177,"QUES",0)
^9.62^^
"BLD",9177,"REQB",0)
^9.611^10^10
"BLD",9177,"REQB",1,0)
PSO*7.0*282^2
"BLD",9177,"REQB",2,0)
PSO*7.0*377^2
"BLD",9177,"REQB",3,0)
PSO*7.0*382^2
"BLD",9177,"REQB",4,0)
PSO*7.0*398^2
"BLD",9177,"REQB",5,0)
PSO*7.0*400^2
"BLD",9177,"REQB",6,0)
PSO*7.0*408^2
"BLD",9177,"REQB",7,0)
PSO*7.0*415^2
"BLD",9177,"REQB",8,0)
PSO*7.0*416^2
"BLD",9177,"REQB",9,0)
PSO*7.0*370^2
"BLD",9177,"REQB",10,0)
PSO*7.0*403^2
"BLD",9177,"REQB","B","PSO*7.0*282",1)

"BLD",9177,"REQB","B","PSO*7.0*370",9)

"BLD",9177,"REQB","B","PSO*7.0*377",2)

"BLD",9177,"REQB","B","PSO*7.0*382",3)

"BLD",9177,"REQB","B","PSO*7.0*398",4)

"BLD",9177,"REQB","B","PSO*7.0*400",5)

"BLD",9177,"REQB","B","PSO*7.0*403",10)

"BLD",9177,"REQB","B","PSO*7.0*408",6)

"BLD",9177,"REQB","B","PSO*7.0*415",7)

"BLD",9177,"REQB","B","PSO*7.0*416",8)

"FIA",52)
PRESCRIPTION
"FIA",52,0)
^PSRX(
"FIA",52,0,0)
52I
"FIA",52,0,1)
y^y^p^^^^n^^n
"FIA",52,0,10)

"FIA",52,0,11)

"FIA",52,0,"RLRO")

"FIA",52,0,"VR")
7.0^PSO
"FIA",52,52)
1
"FIA",52,52.25)
1
"FIA",52,52.25,33)

"FIA",52.86)
EPHARMACY SITE PARAMETERS
"FIA",52.86,0)
^PS(52.86,
"FIA",52.86,0,0)
52.86P
"FIA",52.86,0,1)
y^y^p^^^^n^^n
"FIA",52.86,0,10)

"FIA",52.86,0,11)

"FIA",52.86,0,"RLRO")

"FIA",52.86,0,"VR")
7.0^PSO
"FIA",52.86,52.86)
1
"FIA",52.86,52.86,6)

"FIA",52.87)
PSO AUDIT LOG
"FIA",52.87,0)
^PS(52.87,
"FIA",52.87,0,0)
52.87
"FIA",52.87,0,1)
y^y^p^^^^n^^n
"FIA",52.87,0,10)

"FIA",52.87,0,11)

"FIA",52.87,0,"RLRO")

"FIA",52.87,0,"VR")
7.0^PSO
"FIA",52.87,52.87)
1
"FIA",52.87,52.87,12)

"FIA",52.87,52.87,17)

"INIT")
EN^PSO427PS
"KRN",101,442,-1)
4^6
"KRN",101,442,0)
VALM NEXT SCREEN
"KRN",101,443,-1)
4^7
"KRN",101,443,0)
VALM PREVIOUS SCREEN
"KRN",101,444,-1)
4^9
"KRN",101,444,0)
VALM REFRESH
"KRN",101,445,-1)
4^13
"KRN",101,445,0)
VALM LAST SCREEN
"KRN",101,446,-1)
4^26
"KRN",101,446,0)
VALM FIRST SCREEN
"KRN",101,447,-1)
4^8
"KRN",101,447,0)
VALM UP ONE LINE
"KRN",101,448,-1)
4^20
"KRN",101,448,0)
VALM DOWN A LINE
"KRN",101,450,-1)
4^12
"KRN",101,450,0)
VALM QUIT
"KRN",101,451,-1)
4^10
"KRN",101,451,0)
VALM PRINT SCREEN
"KRN",101,452,-1)
4^11
"KRN",101,452,0)
VALM PRINT LIST
"KRN",101,454,-1)
4^18
"KRN",101,454,0)
VALM TURN ON/OFF MENUS
"KRN",101,456,-1)
4^21
"KRN",101,456,0)
VALM SEARCH LIST
"KRN",101,466,-1)
4^14
"KRN",101,466,0)
VALM GOTO PAGE
"KRN",101,4033,-1)
4^15
"KRN",101,4033,0)
PSO REJECT DISPLAY RX EDIT
"KRN",101,4117,-1)
4^17
"KRN",101,4117,0)
PSO REJECT DISPLAY ADD COMMENT
"KRN",101,4118,-1)
4^16
"KRN",101,4118,0)
PSO REJECT DISPLAY CLARIFICATION CODE
"KRN",101,4155,-1)
2^2
"KRN",101,4155,0)
PSO REJECT DISPLAY HIDDEN MENU^Reject Display Hidden Menu^^M^66481^^^^^^^
"KRN",101,4155,10,0)
^101.01PA^27^27
"KRN",101,4155,10,1,0)
442^+^10^
"KRN",101,4155,10,1,"^")
VALM NEXT SCREEN
"KRN",101,4155,10,2,0)
443^-^11^
"KRN",101,4155,10,2,"^")
VALM PREVIOUS SCREEN
"KRN",101,4155,10,3,0)
447^UP^13^
"KRN",101,4155,10,3,"^")
VALM UP ONE LINE
"KRN",101,4155,10,5,0)
444^RD^19^
"KRN",101,4155,10,5,"^")
VALM REFRESH
"KRN",101,4155,10,6,0)
451^PS^20^
"KRN",101,4155,10,6,"^")
VALM PRINT SCREEN
"KRN",101,4155,10,7,0)
452^PT^21^
"KRN",101,4155,10,7,"^")
VALM PRINT LIST
"KRN",101,4155,10,11,0)
450^QU^24^
"KRN",101,4155,10,11,"^")
VALM QUIT
"KRN",101,4155,10,12,0)
445^LS^17^
"KRN",101,4155,10,12,"^")
VALM LAST SCREEN
"KRN",101,4155,10,13,0)
446^FS^16^
"KRN",101,4155,10,13,"^")
VALM FIRST SCREEN
"KRN",101,4155,10,14,0)
466^GO^18^
"KRN",101,4155,10,14,"^")
VALM GOTO PAGE
"KRN",101,4155,10,15,0)
4033^ED^3^
"KRN",101,4155,10,15,"^")
PSO REJECT DISPLAY RX EDIT
"KRN",101,4155,10,16,0)
4118^CLA^2^
"KRN",101,4155,10,16,"^")
PSO REJECT DISPLAY CLARIFICATION CODE
"KRN",101,4155,10,17,0)
4117^COM^1^
"KRN",101,4155,10,17,"^")
PSO REJECT DISPLAY ADD COMMENT
"KRN",101,4155,10,18,0)
454^ADPL^23^
"KRN",101,4155,10,18,"^")
VALM TURN ON/OFF MENUS
"KRN",101,4155,10,19,0)
4156^PA^4^
"KRN",101,4155,10,19,"^")
PSO REJECT DISPLAY PRIOR AUTHORIZATION
"KRN",101,4155,10,20,0)
448^DN^12^
"KRN",101,4155,10,20,"^")
VALM DOWN A LINE
"KRN",101,4155,10,21,0)
456^SL^22^
"KRN",101,4155,10,21,"^")
VALM SEARCH LIST
"KRN",101,4155,10,22,0)
4422^ARI^25^
"KRN",101,4155,10,22,"^")
PSO REJECT DISPLAY ADDITIONAL INFO
"KRN",101,4155,10,24,0)
4433^SMA^5^
"KRN",101,4155,10,24,"^")
PSO REJECT DISPLAY SMA
"KRN",101,4155,10,25,0)
4432^SDC^55^
"KRN",101,4155,10,25,"^")
PSO REJECT SUSPENSE DT CALC
"KRN",101,4155,10,26,0)
4459^VER^65^
"KRN",101,4155,10,26,"^")
PSO REJECT VIEW ECME RX
"KRN",101,4155,10,27,0)
4179^DC^3.5^
"KRN",101,4155,10,27,"^")
PSO REJECT DISCONTINUE
"KRN",101,4156,-1)
4^19
"KRN",101,4156,0)
PSO REJECT DISPLAY PRIOR AUTHORIZATION
"KRN",101,4179,-1)
4^5
"KRN",101,4179,0)
PSO REJECT DISCONTINUE
"KRN",101,4180,-1)
2^4
"KRN",101,4180,0)
PSO REJECTS HIDDEN ACTIONS #1^PSO REJECTS HIDDEN ACTIONS #1^^M^66481^^^^^^^206
"KRN",101,4180,10,0)
^101.01PA^18^18
"KRN",101,4180,10,1,0)
442^+^2^
"KRN",101,4180,10,1,"^")
VALM NEXT SCREEN
"KRN",101,4180,10,2,0)
443^-^3^
"KRN",101,4180,10,2,"^")
VALM PREVIOUS SCREEN
"KRN",101,4180,10,3,0)
447^UP^4^
"KRN",101,4180,10,3,"^")
VALM UP ONE LINE
"KRN",101,4180,10,4,0)
448^DN^5^
"KRN",101,4180,10,4,"^")
VALM DOWN A LINE
"KRN",101,4180,10,5,0)
444^RD^11^
"KRN",101,4180,10,5,"^")
VALM REFRESH
"KRN",101,4180,10,6,0)
451^PS^12^
"KRN",101,4180,10,6,"^")
VALM PRINT SCREEN
"KRN",101,4180,10,7,0)
452^PT^13^
"KRN",101,4180,10,7,"^")
VALM PRINT LIST
"KRN",101,4180,10,10,0)
454^ADPL^15^
"KRN",101,4180,10,10,"^")
VALM TURN ON/OFF MENUS
"KRN",101,4180,10,11,0)
456^SL^14^
"KRN",101,4180,10,11,"^")
VALM SEARCH LIST
"KRN",101,4180,10,12,0)
450^QU^16^
"KRN",101,4180,10,12,"^")
VALM QUIT
"KRN",101,4180,10,13,0)
445^LS^9^
"KRN",101,4180,10,13,"^")
VALM LAST SCREEN
"KRN",101,4180,10,14,0)
446^FS^8^
"KRN",101,4180,10,14,"^")
VALM FIRST SCREEN
"KRN",101,4180,10,15,0)
466^GO^10^
"KRN",101,4180,10,15,"^")
VALM GOTO PAGE
"KRN",101,4180,10,18,0)
4560^PSX^14.5^
"KRN",101,4180,10,18,"^")
PSO REJECTS PRINT TO EXCEL
"KRN",101,4422,-1)
4^22
"KRN",101,4422,0)
PSO REJECT DISPLAY ADDITIONAL INFO
"KRN",101,4432,-1)
4^24
"KRN",101,4432,0)
PSO REJECT SUSPENSE DT CALC
"KRN",101,4433,-1)
4^23
"KRN",101,4433,0)
PSO REJECT DISPLAY SMA
"KRN",101,4459,-1)
4^25
"KRN",101,4459,0)
PSO REJECT VIEW ECME RX
"KRN",101,4559,-1)
0^1
"KRN",101,4559,0)
PSO REJECT TRICARE HIDDEN MENU^Reject TRICARE/CHAMPVA Hidden Menu^^M^^^^^^^^
"KRN",101,4559,1,0)
^^3^3^3141111^
"KRN",101,4559,1,1,0)
This is the hidden menu option for the Reject Information (UNRESOLVED) 
"KRN",101,4559,1,2,0)
[PSO REJECT TRICARE] ListMan screen.  This is specifically for TRICARE 
"KRN",101,4559,1,3,0)
and CHAMPVA rejects.
"KRN",101,4559,4)
26^3
"KRN",101,4559,10,0)
^101.01PA^21^21
"KRN",101,4559,10,1,0)
442^+^10^
"KRN",101,4559,10,1,"^")
VALM NEXT SCREEN
"KRN",101,4559,10,2,0)
443^-^11^
"KRN",101,4559,10,2,"^")
VALM PREVIOUS SCREEN
"KRN",101,4559,10,3,0)
447^UP^13^
"KRN",101,4559,10,3,"^")
VALM UP ONE LINE
"KRN",101,4559,10,4,0)
444^RD^19^
"KRN",101,4559,10,4,"^")
VALM REFRESH
"KRN",101,4559,10,5,0)
451^PS^20^
"KRN",101,4559,10,5,"^")
VALM PRINT SCREEN
"KRN",101,4559,10,6,0)
452^PT^21^
"KRN",101,4559,10,6,"^")
VALM PRINT LIST
"KRN",101,4559,10,7,0)
450^QU^24^
"KRN",101,4559,10,7,"^")
VALM QUIT
"KRN",101,4559,10,8,0)
445^LS^17^
"KRN",101,4559,10,8,"^")
VALM LAST SCREEN
"KRN",101,4559,10,9,0)
446^FS^16^
"KRN",101,4559,10,9,"^")
VALM FIRST SCREEN
"KRN",101,4559,10,10,0)
466^GO^18^
"KRN",101,4559,10,10,"^")
VALM GOTO PAGE
"KRN",101,4559,10,11,0)
4033^ED^3^
"KRN",101,4559,10,11,"^")
PSO REJECT DISPLAY RX EDIT
"KRN",101,4559,10,12,0)
4118^CLA^2^
"KRN",101,4559,10,12,"^")
PSO REJECT DISPLAY CLARIFICATION CODE
"KRN",101,4559,10,13,0)
4117^COM^1^
"KRN",101,4559,10,13,"^")
PSO REJECT DISPLAY ADD COMMENT
"KRN",101,4559,10,14,0)
454^ADPL^23^
"KRN",101,4559,10,14,"^")
VALM TURN ON/OFF MENUS
"KRN",101,4559,10,15,0)
4156^PA^4^
"KRN",101,4559,10,15,"^")
PSO REJECT DISPLAY PRIOR AUTHORIZATION
"KRN",101,4559,10,16,0)
448^DN^12^
"KRN",101,4559,10,16,"^")
VALM DOWN A LINE
"KRN",101,4559,10,17,0)
456^SL^22^
"KRN",101,4559,10,17,"^")
VALM SEARCH LIST
"KRN",101,4559,10,18,0)
4422^ARI^25^
"KRN",101,4559,10,18,"^")
PSO REJECT DISPLAY ADDITIONAL INFO
"KRN",101,4559,10,19,0)
4433^SMA^5^
"KRN",101,4559,10,19,"^")
PSO REJECT DISPLAY SMA
"KRN",101,4559,10,20,0)
4432^SDC^55^
"KRN",101,4559,10,20,"^")
PSO REJECT SUSPENSE DT CALC
"KRN",101,4559,10,21,0)
4459^VER^65^
"KRN",101,4559,10,21,"^")
PSO REJECT VIEW ECME RX
"KRN",101,4559,99)
63705,42057
"KRN",101,4560,-1)
0^3
"KRN",101,4560,0)
PSO REJECTS PRINT TO EXCEL^Print to Excel^^A^^^^^^^^OUTPATIENT PHARMACY
"KRN",101,4560,4)
^^^PSX
"KRN",101,4560,20)
D PRTEXCL^PSOREJP0
"KRN",101,4560,99)
63502,55113
"KRN",409.61,864,-1)
0^1
"KRN",409.61,864,0)
PSO REJECT TRICARE^1^^80^7^19^0^1^^PSO REJECT TRICARE MENU^Reject Information (TRICARE)^1^^1
"KRN",409.61,864,1)
^PSO REJECT TRICARE HIDDEN MENU
"KRN",409.61,864,"ARRAY")
 ^TMP("PSOREJP1",$J)
"KRN",409.61,864,"FNL")
D EXIT^PSOREJP1
"KRN",409.61,864,"HDR")
D HDR^PSOREJP1
"KRN",409.61,864,"HLP")
D HELP^PSOREJP1
"KRN",409.61,864,"INIT")
D INIT^PSOREJP1
"MBREQ")
1
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"PKG",206,-1)
1^1
"PKG",206,0)
OUTPATIENT PHARMACY^PSO^OUTPATIENT LABELS, PROFILE, INVENTORY, PRESCRIPTIONS
"PKG",206,20,0)
^9.402P^^
"PKG",206,22,0)
^9.49I^1^1
"PKG",206,22,1,0)
7.0^3021122^3021202^66481
"PKG",206,22,1,"PAH",1,0)
427^3151111
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
31
"RTN","PSO427PS")
0^^B15848133
"RTN","PSO427PS",1,0)
PSO427PS ;ALB/DMB - Post-install for PSO*7*427 ;10/21/2014
"RTN","PSO427PS",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**427**;DEC 1997;Build 21
"RTN","PSO427PS",3,0)
 ;
"RTN","PSO427PS",4,0)
 Q
"RTN","PSO427PS",5,0)
 ;
"RTN","PSO427PS",6,0)
EN ; Entry Point for post-install
"RTN","PSO427PS",7,0)
 D BMES^XPDUTL("  Starting post-install for PSO*7*427")
"RTN","PSO427PS",8,0)
 ;
"RTN","PSO427PS",9,0)
 ; Removed Cached protocol menus
"RTN","PSO427PS",10,0)
 D PROT("PSO REJECT DISPLAY HIDDEN MENU")
"RTN","PSO427PS",11,0)
 D PROT("PSO REJECTS HIDDEN ACTIONS #1")
"RTN","PSO427PS",12,0)
 ;
"RTN","PSO427PS",13,0)
 ; Update Insurance Pointer in REJECT INFO subfile
"RTN","PSO427PS",14,0)
 D INSJOB
"RTN","PSO427PS",15,0)
 ; 
"RTN","PSO427PS",16,0)
 ; Completion message
"RTN","PSO427PS",17,0)
 D BMES^XPDUTL("  Finished post-install for PSO*7*427")
"RTN","PSO427PS",18,0)
 Q
"RTN","PSO427PS",19,0)
 ;
"RTN","PSO427PS",20,0)
PROT(MENU) ;
"RTN","PSO427PS",21,0)
 ; Remove cached hidden menu
"RTN","PSO427PS",22,0)
 N PSOIEN,XQORM
"RTN","PSO427PS",23,0)
 S PSOIEN=$O(^ORD(101,"B",MENU,0))
"RTN","PSO427PS",24,0)
 S XQORM=PSOIEN_";ORD(101,"
"RTN","PSO427PS",25,0)
 I $D(^XUTL("XQORM",XQORM)) D
"RTN","PSO427PS",26,0)
 . D MES^XPDUTL("    Removing cached menu for "_$P(^ORD(101,PSOIEN,0),U))
"RTN","PSO427PS",27,0)
 . K ^XUTL("XQORM",XQORM)
"RTN","PSO427PS",28,0)
 Q
"RTN","PSO427PS",29,0)
 ;
"RTN","PSO427PS",30,0)
INSJOB ;
"RTN","PSO427PS",31,0)
 ; Job the process to update the Reject file
"RTN","PSO427PS",32,0)
 D BMES^XPDUTL("    Queuing background job to update the Reject mult of the Prescription file")
"RTN","PSO427PS",33,0)
 D MES^XPDUTL("    A Mailman message will be sent when it finishes")
"RTN","PSO427PS",34,0)
 ;
"RTN","PSO427PS",35,0)
 ; Setup required variables
"RTN","PSO427PS",36,0)
 S ZTRTN="INS^PSO427PS",ZTIO="",ZTDTH=$H
"RTN","PSO427PS",37,0)
 S ZTDESC="Background job to update the Prescription file via PSO*7*427"
"RTN","PSO427PS",38,0)
 ;
"RTN","PSO427PS",39,0)
 ; Task the job
"RTN","PSO427PS",40,0)
 D ^%ZTLOAD
"RTN","PSO427PS",41,0)
 ;
"RTN","PSO427PS",42,0)
 ; Check if task was created
"RTN","PSO427PS",43,0)
 I $D(ZTSK) D MES^XPDUTL("    Task #"_ZTSK_" queued")
"RTN","PSO427PS",44,0)
 I '$D(ZTSK) D MES^XPDUTL("   Task not queued.  Please create a support ticket.")
"RTN","PSO427PS",45,0)
 Q
"RTN","PSO427PS",46,0)
 ;
"RTN","PSO427PS",47,0)
INS ;
"RTN","PSO427PS",48,0)
 ; Entry Point to populate the insurance company pointer in the REJECT INFO subfile
"RTN","PSO427PS",49,0)
 N CNT,DAT,RX,RN,RSPIEN,INS,IEN57,INSNM
"RTN","PSO427PS",50,0)
 N DIE,DA,DR,DTOUT,DUOUT,DIROUT,DIRUT
"RTN","PSO427PS",51,0)
 S CNT=0
"RTN","PSO427PS",52,0)
 ; Loop through index
"RTN","PSO427PS",53,0)
 S DAT=0 F  S DAT=$O(^PSRX("REJDAT",DAT)) Q:'DAT  D
"RTN","PSO427PS",54,0)
 . S RX="" F  S RX=$O(^PSRX("REJDAT",DAT,RX)) Q:'RX  D
"RTN","PSO427PS",55,0)
 .. S RN="" F  S RN=$O(^PSRX("REJDAT",DAT,RX,RN)) Q:'RN  D
"RTN","PSO427PS",56,0)
 ... ;If already populated, quit
"RTN","PSO427PS",57,0)
 ... I $P($G(^PSRX(RX,"REJ",RN,2)),"^",9) Q
"RTN","PSO427PS",58,0)
 ... ; Get Response pointer
"RTN","PSO427PS",59,0)
 ... S RSPIEN=$P($G(^PSRX(RX,"REJ",RN,0)),"^",11)
"RTN","PSO427PS",60,0)
 ... ; If the Response pointer exists, get Log of Transaction record and Insurance Pointer from that file
"RTN","PSO427PS",61,0)
 ... S (IEN57,INS)=""
"RTN","PSO427PS",62,0)
 ... I RSPIEN D
"RTN","PSO427PS",63,0)
 .... S IEN57=$O(^BPSTL("AF",RSPIEN,""))
"RTN","PSO427PS",64,0)
 .... I IEN57 S INS=$$GET1^DIQ(9002313.57902,"1,"_IEN57_",",902.33,"I")
"RTN","PSO427PS",65,0)
 .... I INS,'$D(^DIC(36,INS,0)) S INS=""
"RTN","PSO427PS",66,0)
 ... ; If missing from the Transaction, try to match on the insurance name
"RTN","PSO427PS",67,0)
 ... ; There can only be one insurance company with the same name
"RTN","PSO427PS",68,0)
 ... I INS="" D
"RTN","PSO427PS",69,0)
 .... S INSNM=$P($G(^PSRX(RX,"REJ",RN,2)),"^",4)
"RTN","PSO427PS",70,0)
 .... I INSNM]"" S INS=$O(^DIC(36,"B",INSNM,""))
"RTN","PSO427PS",71,0)
 .... I INS,$O(^DIC(36,"B",INSNM,INS)) S INS=""
"RTN","PSO427PS",72,0)
 ... ; Quit if there is no insurance
"RTN","PSO427PS",73,0)
 ... I INS="" Q
"RTN","PSO427PS",74,0)
 ... ; Set insurance company into the field
"RTN","PSO427PS",75,0)
 ... S DIE="^PSRX("_RX_",""REJ"",",DA(1)=RX,DA=RN,DR=33_"////"_INS
"RTN","PSO427PS",76,0)
 ... D ^DIE
"RTN","PSO427PS",77,0)
 ... K DA,DR,DIE
"RTN","PSO427PS",78,0)
 ... S CNT=CNT+1
"RTN","PSO427PS",79,0)
 ;
"RTN","PSO427PS",80,0)
 ; Send email with result
"RTN","PSO427PS",81,0)
 D MAIL(CNT)
"RTN","PSO427PS",82,0)
 Q
"RTN","PSO427PS",83,0)
 ;
"RTN","PSO427PS",84,0)
MAIL(SUCCNT) ;
"RTN","PSO427PS",85,0)
 N CNT,MSG,XMY,XMDUZ,DIFROM,XMSUB,XMTEXT
"RTN","PSO427PS",86,0)
 S XMY(DUZ)=""
"RTN","PSO427PS",87,0)
 S XMSUB="PSO*7.0*427 Post install is complete",XMDUZ="Patch PSO*7.0*427"
"RTN","PSO427PS",88,0)
 S XMTEXT="MSG("
"RTN","PSO427PS",89,0)
 S CNT=1,MSG(CNT)=""
"RTN","PSO427PS",90,0)
 S CNT=CNT+1,MSG(CNT)="Patch PSO*7.0*427 post install routine has completed."
"RTN","PSO427PS",91,0)
 S CNT=CNT+1,MSG(CNT)=""
"RTN","PSO427PS",92,0)
 S CNT=CNT+1,MSG(CNT)="Updated "_SUCCNT_" records in the PRESCRIPTION file."
"RTN","PSO427PS",93,0)
 S CNT=CNT+1,MSG(CNT)=""
"RTN","PSO427PS",94,0)
 S CNT=CNT+1,MSG(CNT)="For more information about this post install, review the patch description."
"RTN","PSO427PS",95,0)
 D ^XMD
"RTN","PSO427PS",96,0)
 Q
"RTN","PSOBORP1")
0^19^B123532809
"RTN","PSOBORP1",1,0)
PSOBORP1 ;ALBANY/BLD - TRICARE-CHAMPVA BYPASS/OVERRIDE AUDIT REPORT (CONT) ;10/17/12 3:38pm
"RTN","PSOBORP1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**358,385,415,427**;DEC 1997;Build 21
"RTN","PSOBORP1",3,0)
 ;
"RTN","PSOBORP1",4,0)
 ;***********copied from routine BPSRPT3 AND BPSRPT4************
"RTN","PSOBORP1",5,0)
 ;
"RTN","PSOBORP1",6,0)
 Q
"RTN","PSOBORP1",7,0)
 ;
"RTN","PSOBORP1",8,0)
 ;
"RTN","PSOBORP1",9,0)
 ;                    
"RTN","PSOBORP1",10,0)
SELPHARM(PSOSEL) N DIC,DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","PSOBORP1",11,0)
 ;
"RTN","PSOBORP1",12,0)
 ; Select the ECME Pharmacy or Pharmacies
"RTN","PSOBORP1",13,0)
 ; 
"RTN","PSOBORP1",14,0)
 ; Input Variable -> none
"RTN","PSOBORP1",15,0)
 ; Return Value ->   "" = Valid Entry or Entries Selected
"RTN","PSOBORP1",16,0)
 ;                                        ^ = Exit
"RTN","PSOBORP1",17,0)
 ;                                       
"RTN","PSOBORP1",18,0)
 ; Output Variable -> PSOPHARM = 1 One or More Pharmacies Selected
"RTN","PSOBORP1",19,0)
 ;                          = 0 User Entered 'ALL'
"RTN","PSOBORP1",20,0)
 ;                            
"RTN","PSOBORP1",21,0)
 ; If PSOPHARM = 1 then the PSOPHARM array will be defined where:
"RTN","PSOBORP1",22,0)
 ;    PSOPHARM(ptr) = ptr ^ BPS PHARMACY NAME and
"RTN","PSOBORP1",23,0)
 ;    ptr = Internal Pointer to BPS PHARMACIES file (#9002313.56)
"RTN","PSOBORP1",24,0)
 ;
"RTN","PSOBORP1",25,0)
 ;Reset PSOPHARM array
"RTN","PSOBORP1",26,0)
 K PSOPHARM
"RTN","PSOBORP1",27,0)
 ;
"RTN","PSOBORP1",28,0)
 ;First see if they want to enter individual divisions or ALL
"RTN","PSOBORP1",29,0)
 S DIR(0)="S^D:DIVISION;A:ALL"
"RTN","PSOBORP1",30,0)
 S DIR("A")="Select Certain Pharmacy (D)ivisions or (A)LL"
"RTN","PSOBORP1",31,0)
 S DIR("L",1)="Select one of the following:"
"RTN","PSOBORP1",32,0)
 S DIR("L",2)=""
"RTN","PSOBORP1",33,0)
 S DIR("L",3)="     D         DIVISION"
"RTN","PSOBORP1",34,0)
 S DIR("L",4)="     A         ALL"
"RTN","PSOBORP1",35,0)
 D ^DIR K DIR
"RTN","PSOBORP1",36,0)
 ;
"RTN","PSOBORP1",37,0)
 ;Check for "^" or timeout, otherwise define PSOPHARM
"RTN","PSOBORP1",38,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","PSOBORP1",39,0)
 E  S (PSOSEL("DIVISION"),PSOPHARM)=Y
"RTN","PSOBORP1",40,0)
 ;If division selected, ask prompt
"RTN","PSOBORP1",41,0)
 I $G(PSOPHARM)="D" F  D  Q:Y="^"!(Y="") 
"RTN","PSOBORP1",42,0)
 .;
"RTN","PSOBORP1",43,0)
 .;Prompt for entry
"RTN","PSOBORP1",44,0)
 .K X S DIC(0)="QEAM",DIC=59,DIC("A")="Select ECME Pharmacy Division(s): "
"RTN","PSOBORP1",45,0)
 .W ! D ^DIC
"RTN","PSOBORP1",46,0)
 .;
"RTN","PSOBORP1",47,0)
 .;Check for "^" or timeout 
"RTN","PSOBORP1",48,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1) K PSOPHARM S Y="^" Q
"RTN","PSOBORP1",49,0)
 .;
"RTN","PSOBORP1",50,0)
 .;Check for blank entry, quit if no previous selections
"RTN","PSOBORP1",51,0)
 .I $G(X)="" S Y=$S($D(PSOPHARM)>9:"",1:"^") K:Y="^" PSOPHARM Q
"RTN","PSOBORP1",52,0)
 .;
"RTN","PSOBORP1",53,0)
 .;Handle Deletes
"RTN","PSOBORP1",54,0)
 .I $D(PSOPHARM(+Y)) D  Q:Y="^"  I 1
"RTN","PSOBORP1",55,0)
 ..N P
"RTN","PSOBORP1",56,0)
 ..S P=Y  ;Save Original Value
"RTN","PSOBORP1",57,0)
 ..S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_$P(P,U,2)_" from your list?"
"RTN","PSOBORP1",58,0)
 ..S DIR("B")="NO" D ^DIR
"RTN","PSOBORP1",59,0)
 ..I ($G(DUOUT)=1)!($G(DTOUT)=1) K PSOPHARM S Y="^" Q
"RTN","PSOBORP1",60,0)
 ..I Y="Y" K PSOPHARM(+P),PSOPHARM("B",$P(P,U,2),+P)
"RTN","PSOBORP1",61,0)
 ..S Y=P  ;Restore Original Value
"RTN","PSOBORP1",62,0)
 ..K P
"RTN","PSOBORP1",63,0)
 .E  D
"RTN","PSOBORP1",64,0)
 ..;Define new entries in PSOPHARM array
"RTN","PSOBORP1",65,0)
 ..S PSOPHARM(+Y)=Y
"RTN","PSOBORP1",66,0)
 ..S PSOPHARM("B",$P(Y,U,2),+Y)=""
"RTN","PSOBORP1",67,0)
 .;
"RTN","PSOBORP1",68,0)
 .;Display a list of selected divisions
"RTN","PSOBORP1",69,0)
 .I $D(PSOPHARM)>9 D
"RTN","PSOBORP1",70,0)
 ..N X
"RTN","PSOBORP1",71,0)
 ..W !,?2,"Selected:"
"RTN","PSOBORP1",72,0)
 ..S X="" F  S X=$O(PSOPHARM("B",X)) Q:X=""  W !,?10,X
"RTN","PSOBORP1",73,0)
 ..K X
"RTN","PSOBORP1",74,0)
 .Q
"RTN","PSOBORP1",75,0)
 ;
"RTN","PSOBORP1",76,0)
 K PSOPHARM("B")
"RTN","PSOBORP1",77,0)
 M PSOSEL("DIVISION")=PSOPHARM
"RTN","PSOBORP1",78,0)
 Q Y
"RTN","PSOBORP1",79,0)
 ;
"RTN","PSOBORP1",80,0)
 ;
"RTN","PSOBORP1",81,0)
 ;
"RTN","PSOBORP1",82,0)
SELSMDET(DFLT) ;
"RTN","PSOBORP1",83,0)
 ;
"RTN","PSOBORP1",84,0)
 ; Display (S)ummary or (D)etail Format
"RTN","PSOBORP1",85,0)
 ; 
"RTN","PSOBORP1",86,0)
 ; Input Variable -> DFLT = 1 Summary
"RTN","PSOBORP1",87,0)
 ;                          2 Detail
"RTN","PSOBORP1",88,0)
 ;                          
"RTN","PSOBORP1",89,0)
 ; Return Value ->   1 = Summary
"RTN","PSOBORP1",90,0)
 ;                   0 = Detail
"RTN","PSOBORP1",91,0)
 ;                   ^ = Exit
"RTN","PSOBORP1",92,0)
 ;
"RTN","PSOBORP1",93,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","PSOBORP1",94,0)
 ;
"RTN","PSOBORP1",95,0)
 S DFLT=$S($G(DFLT)=1:"Summary",$G(DFLT)=0:"Detail",1:"Detail")
"RTN","PSOBORP1",96,0)
 S DIR(0)="S^S:Summary;D:Detail",DIR("A")="Display (S)ummary or (D)etail Format",DIR("B")=DFLT
"RTN","PSOBORP1",97,0)
 D ^DIR
"RTN","PSOBORP1",98,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","PSOBORP1",99,0)
 Q Y
"RTN","PSOBORP1",100,0)
 ;
"RTN","PSOBORP1",101,0)
 ;                 
"RTN","PSOBORP1",102,0)
SELDATE(TYPE) ;select begin date
"RTN","PSOBORP1",103,0)
 ; Enter Date Range
"RTN","PSOBORP1",104,0)
 ;
"RTN","PSOBORP1",105,0)
 ; Input Variable -> TYPE = TRANSACTION
"RTN","PSOBORP1",106,0)
 ;                          
"RTN","PSOBORP1",107,0)
 ;
"RTN","PSOBORP1",108,0)
 ; Return Value -> P1^P2
"RTN","PSOBORP1",109,0)
 ; 
"RTN","PSOBORP1",110,0)
 ;           where P1 = From Date
"RTN","PSOBORP1",111,0)
 ;                    = ^ Exit
"RTN","PSOBORP1",112,0)
 ;                 P2 = To Date
"RTN","PSOBORP1",113,0)
 ;                    = blank for Exit
"RTN","PSOBORP1",114,0)
 N PSOSIBDT,DIR,DIRUT,DTOUT,DUOUT,VAL,X,Y
"RTN","PSOBORP1",115,0)
 ;
"RTN","PSOBORP1",116,0)
SELDATE1 ;
"RTN","PSOBORP1",117,0)
 N VAL
"RTN","PSOBORP1",118,0)
 S VAL="",DIR(0)="DA^:DT:EX",DIR("A")="START WITH "_TYPE_" DATE: ",DIR("B")="T-1"
"RTN","PSOBORP1",119,0)
 W ! D ^DIR
"RTN","PSOBORP1",120,0)
 ;
"RTN","PSOBORP1",121,0)
 ;Check for "^", timeout, or blank entry
"RTN","PSOBORP1",122,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S VAL="^"
"RTN","PSOBORP1",123,0)
 ;
"RTN","PSOBORP1",124,0)
 I VAL="" D
"RTN","PSOBORP1",125,0)
 .S $P(VAL,U)=Y
"RTN","PSOBORP1",126,0)
 .S DIR(0)="DA^"_VAL_":DT:EX",DIR("A")="  GO TO "_TYPE_" DATE: ",DIR("B")="T"
"RTN","PSOBORP1",127,0)
 .D ^DIR
"RTN","PSOBORP1",128,0)
 .;
"RTN","PSOBORP1",129,0)
 .;Check for "^", timeout, or blank entry
"RTN","PSOBORP1",130,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S VAL="^" Q
"RTN","PSOBORP1",131,0)
 .;
"RTN","PSOBORP1",132,0)
 .;Define Entry
"RTN","PSOBORP1",133,0)
 .S $P(VAL,U,2)=Y
"RTN","PSOBORP1",134,0)
 ;
"RTN","PSOBORP1",135,0)
 Q VAL
"RTN","PSOBORP1",136,0)
 ;
"RTN","PSOBORP1",137,0)
SELATYP(DFLT) ;
"RTN","PSOBORP1",138,0)
 ;
"RTN","PSOBORP1",139,0)
 ; Display (T)RICARE or (C)HAMPVA OR (A)LL Format
"RTN","PSOBORP1",140,0)
 ; 
"RTN","PSOBORP1",141,0)
 ; Input Variable -> DFLT = A ALL
"RTN","PSOBORP1",142,0)
 ; T TRICARE
"RTN","PSOBORP1",143,0)
 ; C CHAMPVA
"RTN","PSOBORP1",144,0)
 ; 
"RTN","PSOBORP1",145,0)
 ; Return Value -> A = ALL
"RTN","PSOBORP1",146,0)
 ; T = TRICARE
"RTN","PSOBORP1",147,0)
 ; C = CHAMPVA
"RTN","PSOBORP1",148,0)
 ; ^ = Exit
"RTN","PSOBORP1",149,0)
 ;
"RTN","PSOBORP1",150,0)
 N DIR,DIRUT,DTOUT,DUOUT,EXIT,X,Y
"RTN","PSOBORP1",151,0)
 S EXIT=0
"RTN","PSOBORP1",152,0)
 S DFLT=$S($G(DFLT)="T":"TRICARE",$G(DFLT)="C":"CHAMPVA",1:"ALL")
"RTN","PSOBORP1",153,0)
 S DIR(0)="SO^T:TRICARE;C:CHAMPVA;A:ALL",DIR("A")="Display (T)RICARE or (C)HAMPVA or (A)LL Entries",DIR("B")=DFLT
"RTN","PSOBORP1",154,0)
 D ^DIR
"RTN","PSOBORP1",155,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","PSOBORP1",156,0)
 I Y="A" K PSOSEL("ELIG_TYPE") D
"RTN","PSOBORP1",157,0)
 .S PSOSEL("ELIG_TYPE")="A"
"RTN","PSOBORP1",158,0)
 .S PSOSEL("ELIG_TYPE","T")="TRICARE"
"RTN","PSOBORP1",159,0)
 .S PSOSEL("ELIG_TYPE","C")="CHAMPVA"
"RTN","PSOBORP1",160,0)
 .S EXIT=1
"RTN","PSOBORP1",161,0)
 I EXIT Q Y
"RTN","PSOBORP1",162,0)
 I Y'="" S PSOSEL("ELIG_TYPE",Y)=$S(Y="T":"TRICARE",Y="C":"CHAMPVA",1:"ALL")
"RTN","PSOBORP1",163,0)
 Q Y
"RTN","PSOBORP1",164,0)
 ;
"RTN","PSOBORP1",165,0)
SELTCCD(PSOSEL) ;
"RTN","PSOBORP1",166,0)
 ;
"RTN","PSOBORP1",167,0)
 ; Select to Include (S)pecific Reject Code or (A)ll
"RTN","PSOBORP1",168,0)
 ;
"RTN","PSOBORP1",169,0)
 ;
"RTN","PSOBORP1",170,0)
 ;Prompt to Include (I)patient, (N)on-Billable, (R)eject, (P)artial, or A)ll: (no default)
"RTN","PSOBORP1",171,0)
 ;
"RTN","PSOBORP1",172,0)
 N DIC,DIR,DIRUT,DUOUT,EXIT,REJ,X,Y,I
"RTN","PSOBORP1",173,0)
 S EXIT=0
"RTN","PSOBORP1",174,0)
 F I=1:1:2 D  Q:Y="A"!(EXIT)
"RTN","PSOBORP1",175,0)
 .S DIR(0)="SO^I:INPATIENT;N:NON-BILLABLE;R:REJECT OVERRIDE;P:PARTIAL FILL;A:ALL"
"RTN","PSOBORP1",176,0)
 .S DIR("A")="Select one of the following: **Can select multiples - limit of 2**  "
"RTN","PSOBORP1",177,0)
 .D ^DIR
"RTN","PSOBORP1",178,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1) S EXIT=1,Y="^" Q
"RTN","PSOBORP1",179,0)
 .I Y="A" K PSOSEL("REJECT CODES") D  Q
"RTN","PSOBORP1",180,0)
 ..S PSOSEL("REJECT CODES")="A"
"RTN","PSOBORP1",181,0)
 ..S PSOSEL("REJECT CODES","I")="INPATIENT"
"RTN","PSOBORP1",182,0)
 ..S PSOSEL("REJECT CODES","N")="NON-BILLABLE"
"RTN","PSOBORP1",183,0)
 ..S PSOSEL("REJECT CODES","R")="REJECT OVERRIDE"
"RTN","PSOBORP1",184,0)
 ..S PSOSEL("REJECT CODES","P")="PARTIAL FILL"
"RTN","PSOBORP1",185,0)
 ..S EXIT=1
"RTN","PSOBORP1",186,0)
 .I Y="",$D(PSOSEL("REJECT CODES")) S EXIT=1 Q
"RTN","PSOBORP1",187,0)
 .I Y="",'$D(PSOSEL("REJECT CODES")) S EXIT=0,I=0 Q
"RTN","PSOBORP1",188,0)
 .I Y'="" S PSOSEL("REJECT CODES",Y)=$S(Y="I":"INPATIENT",Y="N":"NON-BILLABLE",Y="R":"REJECT OVERRIDE",Y="P":"PARTIAL FILL",1:"ALL")
"RTN","PSOBORP1",189,0)
 ;
"RTN","PSOBORP1",190,0)
 Q Y
"RTN","PSOBORP1",191,0)
 ;
"RTN","PSOBORP1",192,0)
SELPHMST(PSOSEL) ;
"RTN","PSOBORP1",193,0)
 ;
"RTN","PSOBORP1",194,0)
 ; Select to include (S)pecific Pharmacist or (A)ll pharmacists
"RTN","PSOBORP1",195,0)
 ;
"RTN","PSOBORP1",196,0)
 N DIR,DIRUT,DTOUT,DUOUT,VAL,X,Y
"RTN","PSOBORP1",197,0)
 K PSOPHARM,DIR
"RTN","PSOBORP1",198,0)
 ;
"RTN","PSOBORP1",199,0)
 ;First see if they want to enter individual divisions or ALL
"RTN","PSOBORP1",200,0)
 S DIR(0)="S^S:SPECIFIC PHARMACIST(S);A:ALL PHARMACISTS"
"RTN","PSOBORP1",201,0)
 S DIR("A")="Select Specific Pharmacist(s) or All Pharmacists"
"RTN","PSOBORP1",202,0)
 S DIR("B")="ALL"
"RTN","PSOBORP1",203,0)
 S DIR("L",1)="Select one of the following:"
"RTN","PSOBORP1",204,0)
 S DIR("L",2)=""
"RTN","PSOBORP1",205,0)
 S DIR("L",3)="     S         Specific Pharmacist(s)"
"RTN","PSOBORP1",206,0)
 S DIR("L",4)="     A         All Pharmacists"
"RTN","PSOBORP1",207,0)
 D ^DIR K DIR
"RTN","PSOBORP1",208,0)
 ;
"RTN","PSOBORP1",209,0)
 ;Check for "^" or timeout, otherwise define PSOPHARM 
"RTN","PSOBORP1",210,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","PSOBORP1",211,0)
 E  S (PSOSEL("PHARMACIST"),PSOPHARM)=Y
"RTN","PSOBORP1",212,0)
 ;
"RTN","PSOBORP1",213,0)
 ;If pharmacist selected, ask prompt
"RTN","PSOBORP1",214,0)
 I $G(PSOPHARM)="S" F  D  Q:Y="^"!(Y="") 
"RTN","PSOBORP1",215,0)
 .;
"RTN","PSOBORP1",216,0)
 .;Prompt for entry
"RTN","PSOBORP1",217,0)
 .K X S DIC(0)="QEAM",DIC=200,DIC("A")="Select Pharmacist: "
"RTN","PSOBORP1",218,0)
 .S DIC("S")="I $D(^XUSEC(""PSORPH"",Y))"
"RTN","PSOBORP1",219,0)
 .W ! D ^DIC
"RTN","PSOBORP1",220,0)
 .;
"RTN","PSOBORP1",221,0)
 .;Check for "^" or timeout 
"RTN","PSOBORP1",222,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1) K PSOPHARM S Y="^" Q
"RTN","PSOBORP1",223,0)
 .;
"RTN","PSOBORP1",224,0)
 .;Check for blank entry, quit if no previous selections
"RTN","PSOBORP1",225,0)
 .I $G(X)="" S Y=$S($D(PSOPHARM)>9:"",1:"^") K:Y="^" PSOPHARM Q
"RTN","PSOBORP1",226,0)
 .;
"RTN","PSOBORP1",227,0)
 .;Handle Deletes
"RTN","PSOBORP1",228,0)
 .I $D(PSOPHARM(+Y)) D  Q:Y="^"  I 1
"RTN","PSOBORP1",229,0)
 ..N P
"RTN","PSOBORP1",230,0)
 ..S P=Y  ;Save Original Value
"RTN","PSOBORP1",231,0)
 ..S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_$P(P,U,2)_" from your list?"
"RTN","PSOBORP1",232,0)
 ..S DIR("B")="NO" D ^DIR
"RTN","PSOBORP1",233,0)
 ..I ($G(DUOUT)=1)!($G(DTOUT)=1) K PSOPHARM S Y="^" Q
"RTN","PSOBORP1",234,0)
 ..I Y="Y" K PSOPHARM(+P),PSOPHARM("B",$P(P,U,2),+P)
"RTN","PSOBORP1",235,0)
 ..S Y=P  ;Restore Original Value
"RTN","PSOBORP1",236,0)
 ..K P
"RTN","PSOBORP1",237,0)
 .E  D
"RTN","PSOBORP1",238,0)
 ..;Define new entries in PSOPHARM array
"RTN","PSOBORP1",239,0)
 ..S PSOPHARM(+Y)=Y
"RTN","PSOBORP1",240,0)
 ..S PSOPHARM("B",$P(Y,U,2),+Y)=""
"RTN","PSOBORP1",241,0)
 .;
"RTN","PSOBORP1",242,0)
 .;Display a list of selected providers
"RTN","PSOBORP1",243,0)
 .I $D(PSOPHARM)>9 D
"RTN","PSOBORP1",244,0)
 ..N X
"RTN","PSOBORP1",245,0)
 ..W !,?2,"Selected:"
"RTN","PSOBORP1",246,0)
 ..S X="" F  S X=$O(PSOPHARM("B",X)) Q:X=""  W !,?10,X
"RTN","PSOBORP1",247,0)
 ..K X
"RTN","PSOBORP1",248,0)
 .Q
"RTN","PSOBORP1",249,0)
 ;
"RTN","PSOBORP1",250,0)
 K PSOPHARM("B")
"RTN","PSOBORP1",251,0)
 M PSOSEL("PHARMACIST")=PSOPHARM
"RTN","PSOBORP1",252,0)
 Q Y
"RTN","PSOBORP1",253,0)
 ;
"RTN","PSOBORP1",254,0)
SELPROV(PSOSEL) ;
"RTN","PSOBORP1",255,0)
 ;
"RTN","PSOBORP1",256,0)
 ;select to include (S)pecific Provider or (A)ll Providers
"RTN","PSOBORP1",257,0)
 ;
"RTN","PSOBORP1",258,0)
 N DIR,DIRUT,DTOUT,DUOUT,VAL,X,Y
"RTN","PSOBORP1",259,0)
 K PSOPROV
"RTN","PSOBORP1",260,0)
 ;
"RTN","PSOBORP1",261,0)
 ;First see if they want to enter individual divisions or ALL
"RTN","PSOBORP1",262,0)
 S DIR(0)="S^S:SPECIFIC PROVIDER(S);A:ALL PROVIDERS"
"RTN","PSOBORP1",263,0)
 S DIR("A")="Select Specific Provider(s) or include ALL Providers"
"RTN","PSOBORP1",264,0)
 S DIR("B")="ALL"
"RTN","PSOBORP1",265,0)
 S DIR("L",1)="Select one of the following:"
"RTN","PSOBORP1",266,0)
 S DIR("L",2)=""
"RTN","PSOBORP1",267,0)
 S DIR("L",3)="     S         Specific Provider(s)"
"RTN","PSOBORP1",268,0)
 S DIR("L",4)="     A         ALL Providers"
"RTN","PSOBORP1",269,0)
 D ^DIR K DIR
"RTN","PSOBORP1",270,0)
 ;
"RTN","PSOBORP1",271,0)
 ;Check for "^" or timeout, otherwise define PSOPROV 
"RTN","PSOBORP1",272,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","PSOBORP1",273,0)
 E  S (PSOSEL("PROVIDER"),PSOPROV)=Y
"RTN","PSOBORP1",274,0)
 ;
"RTN","PSOBORP1",275,0)
 ;If provider selected, ask prompt
"RTN","PSOBORP1",276,0)
 I $G(PSOPROV)="S" F  D  Q:Y="^"!(Y="") 
"RTN","PSOBORP1",277,0)
 .;
"RTN","PSOBORP1",278,0)
 .;Prompt for entry
"RTN","PSOBORP1",279,0)
 .K X S DIC(0)="QEAM",DIC=200,DIC("A")="Select Provider: "
"RTN","PSOBORP1",280,0)
 .S DIC("S")="I +$G(^VA(200,Y,""PS""))"
"RTN","PSOBORP1",281,0)
 .W ! D ^DIC
"RTN","PSOBORP1",282,0)
 .;
"RTN","PSOBORP1",283,0)
 .;Check for "^" or timeout 
"RTN","PSOBORP1",284,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1) K PSOPROV S Y="^" Q
"RTN","PSOBORP1",285,0)
 .;
"RTN","PSOBORP1",286,0)
 .;Check for blank entry, quit if no previous selections
"RTN","PSOBORP1",287,0)
 .I $G(X)="" S Y=$S($D(PSOPROV)>9:"",1:"^") K:Y="^" PSOPROV Q
"RTN","PSOBORP1",288,0)
 .;
"RTN","PSOBORP1",289,0)
 .;Handle Deletes
"RTN","PSOBORP1",290,0)
 .I $D(PSOPROV(+Y)) D  Q:Y="^"  I 1
"RTN","PSOBORP1",291,0)
 ..N P
"RTN","PSOBORP1",292,0)
 ..S P=Y  ;Save Original Value
"RTN","PSOBORP1",293,0)
 ..S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_$P(P,U,2)_" from your list?"
"RTN","PSOBORP1",294,0)
 ..S DIR("B")="NO" D ^DIR
"RTN","PSOBORP1",295,0)
 ..I ($G(DUOUT)=1)!($G(DTOUT)=1) K PSOPROV S Y="^" Q
"RTN","PSOBORP1",296,0)
 ..I Y="Y" K PSOPROV(+P),PSOPROV("B",$P(P,U,2),+P)
"RTN","PSOBORP1",297,0)
 ..S Y=P  ;Restore Original Value
"RTN","PSOBORP1",298,0)
 ..K P
"RTN","PSOBORP1",299,0)
 .E  D
"RTN","PSOBORP1",300,0)
 ..;Define new entries in PSOPROV array
"RTN","PSOBORP1",301,0)
 ..S PSOPROV(+Y)=Y
"RTN","PSOBORP1",302,0)
 ..S PSOPROV("B",$P(Y,U,2),+Y)=""
"RTN","PSOBORP1",303,0)
 .;
"RTN","PSOBORP1",304,0)
 .;Display a list of selected providers
"RTN","PSOBORP1",305,0)
 .I $D(PSOPROV)>9 D
"RTN","PSOBORP1",306,0)
 ..N X
"RTN","PSOBORP1",307,0)
 ..W !,?2,"Selected:"
"RTN","PSOBORP1",308,0)
 ..S X="" F  S X=$O(PSOPROV("B",X)) Q:X=""  W !,?10,X
"RTN","PSOBORP1",309,0)
 ..K X
"RTN","PSOBORP1",310,0)
 .Q
"RTN","PSOBORP1",311,0)
 ;
"RTN","PSOBORP1",312,0)
 K PSOPROV("B")
"RTN","PSOBORP1",313,0)
 M PSOSEL("PROVIDER")=PSOPROV
"RTN","PSOBORP1",314,0)
 Q Y
"RTN","PSOBORP1",315,0)
 ;
"RTN","PSOBORP1",316,0)
PSOTOTAL(PSOSEL) ;
"RTN","PSOBORP1",317,0)
 ;
"RTN","PSOBORP1",318,0)
 ;Prompt to Include Group/Subtotal Report by (R) Pharmacy or (P)rovider/Provider
"RTN","PSOBORP1",319,0)
 ;ADDED BY BLD
"RTN","PSOBORP1",320,0)
 ;Returns ()
"RTN","PSOBORP1",321,0)
 ;
"RTN","PSOBORP1",322,0)
 N Y,DUOUT,DTOUT,IBQUIT,DIROUT,DIR
"RTN","PSOBORP1",323,0)
 N PSONPI
"RTN","PSOBORP1",324,0)
 S DIR(0)="S^R:Pharmacist;P:Provider/Prescriber Name"
"RTN","PSOBORP1",325,0)
 S DIR("A")="Group/Subtotal Report by (R)Pharmacist or (P)Provider"
"RTN","PSOBORP1",326,0)
 ;S DIR("B")="PHARMACIST"
"RTN","PSOBORP1",327,0)
 D ^DIR
"RTN","PSOBORP1",328,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^" Q Y
"RTN","PSOBORP1",329,0)
 S PSONPI=Y
"RTN","PSOBORP1",330,0)
 ;
"RTN","PSOBORP1",331,0)
 Q Y
"RTN","PSOBORP1",332,0)
 ;
"RTN","PSOBORP1",333,0)
 ;
"RTN","PSOBORP1",334,0)
 ;Print Header 2 Line 1
"RTN","PSOBORP1",335,0)
 ;
"RTN","PSOBORP1",336,0)
 ; Input variable: PSORTYPE -> Report Type (1-7)
"RTN","PSOBORP1",337,0)
 ;
"RTN","PSOBORP1",338,0)
 ;
"RTN","PSOBORP1",339,0)
SELEXCEL() ; - Returns whether to capture data for Excel report.
"RTN","PSOBORP1",340,0)
 ; Output: EXCEL = 1 - YES (capture data) / 0 - NO (DO NOT capture data)
"RTN","PSOBORP1",341,0)
 ;
"RTN","PSOBORP1",342,0)
 Q:PSOSEL("SUM_DETAIL")="S"
"RTN","PSOBORP1",343,0)
 N EXCEL,DIR,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","PSOBORP1",344,0)
 ;
"RTN","PSOBORP1",345,0)
 S DIR(0)="Y",DIR("B")="NO",DIR("T")=DTIME W !
"RTN","PSOBORP1",346,0)
 S DIR("A")="Do you want to capture report data for an Excel document"
"RTN","PSOBORP1",347,0)
 S DIR("?")="^D HEXC"
"RTN","PSOBORP1",348,0)
 D ^DIR K DIR I $D(DIRUT)!$D(DTOUT)!$D(DUOUT)!$D(DIROUT) Q "^"
"RTN","PSOBORP1",349,0)
 K DIROUT,DTOUT,DUOUT,DIRUT
"RTN","PSOBORP1",350,0)
 S EXCEL=0 I Y S EXCEL=1
"RTN","PSOBORP1",351,0)
 ;
"RTN","PSOBORP1",352,0)
 ;Display Excel display message
"RTN","PSOBORP1",353,0)
 I EXCEL=1 D EXMSG
"RTN","PSOBORP1",354,0)
 ;
"RTN","PSOBORP1",355,0)
 Q EXCEL
"RTN","PSOBORP1",356,0)
 ;
"RTN","PSOBORP1",357,0)
HEXC ; - 'Do you want to capture data...' prompt
"RTN","PSOBORP1",358,0)
 W !!,"      Enter:  'Y'    -  To capture detail report data to transfer"
"RTN","PSOBORP1",359,0)
 W !,"                        to an Excel document"
"RTN","PSOBORP1",360,0)
 W !,"              '<CR>' -  To skip this option"
"RTN","PSOBORP1",361,0)
 W !,"              '^'    -  To quit this option"
"RTN","PSOBORP1",362,0)
 Q
"RTN","PSOBORP1",363,0)
 ;
"RTN","PSOBORP1",364,0)
 ;Display the message about capturing to an Excel file format
"RTN","PSOBORP1",365,0)
 ; 
"RTN","PSOBORP1",366,0)
EXMSG ;
"RTN","PSOBORP1",367,0)
 W !!?5,"Before continuing, please set up your terminal to capture the"
"RTN","PSOBORP1",368,0)
 W !?5,"detail report data. On some terminals, this can  be  done  by"
"RTN","PSOBORP1",369,0)
 W !?5,"clicking  on the 'Tools' menu above, then click  on  'Capture"
"RTN","PSOBORP1",370,0)
 W !?5,"Incoming  Data' to save to  Desktop. This  report  may take a"
"RTN","PSOBORP1",371,0)
 W !?5,"while to run."
"RTN","PSOBORP1",372,0)
 W !!?5,"Note: To avoid  undesired  wrapping of the data  saved to the"
"RTN","PSOBORP1",373,0)
 W !?5,"      file, please enter '0;256;999' at the 'DEVICE:' prompt.",!
"RTN","PSOBORP1",374,0)
 Q
"RTN","PSOBORP1",375,0)
 ;
"RTN","PSOBORP1",376,0)
 ;
"RTN","PSOBORP1",377,0)
 ;Screen Pause
"RTN","PSOBORP1",378,0)
 ;
"RTN","PSOBORP1",379,0)
PAUSE ;
"RTN","PSOBORP1",380,0)
 Q:$G(PSOSCR)'=1  S PSOUT=""
"RTN","PSOBORP1",381,0)
 W ! K DIR S DIR(0)="E",DIR("A")="Press Return to continue, '^' to exit" D ^DIR K DIR I 'Y S PSOUT=1
"RTN","PSOBORP1",382,0)
 Q
"RTN","PSOBORP2")
0^20^B22525034
"RTN","PSOBORP2",1,0)
PSOBORP2 ;ALBANY/BLD - TRICARE-CHAMPVA BYPASS/OVERRIDE AUDIT REPORT ;7/1/2010
"RTN","PSOBORP2",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**358,385,427**;DEC 1997;Build 21
"RTN","PSOBORP2",3,0)
 ;
"RTN","PSOBORP2",4,0)
 ;
"RTN","PSOBORP2",5,0)
 Q
"RTN","PSOBORP2",6,0)
 ;
"RTN","PSOBORP2",7,0)
EN(RX,RFL,RESP) ;
"RTN","PSOBORP2",8,0)
 ;entry point to insert an entry in to the TRICARE-CHAMPVA Audit Report
"RTN","PSOBORP2",9,0)
 ;       Passed In:
"RTN","PSOBORP2",10,0)
 ;       RX =   Prescription file (52) IEN
"RTN","PSOBORP2",11,0)
 ;       RFL =  Prescription refill number
"RTN","PSOBORP2",12,0)
 ;       RESP = response back from ECME billing (from ECMESND^PSOBPSU1)
"RTN","PSOBORP2",13,0)
 ;
"RTN","PSOBORP2",14,0)
 ;
"RTN","PSOBORP2",15,0)
 N REFILNBR,TRITXT
"RTN","PSOBORP2",16,0)
 S TRITXT=$P(RESP,"^",2)
"RTN","PSOBORP2",17,0)
 D AUDIT^PSOTRI(RX,RFL,,TRITXT,"N",$P(RESP,"^",3))
"RTN","PSOBORP2",18,0)
 ;
"RTN","PSOBORP2",19,0)
 Q
"RTN","PSOBORP2",20,0)
 ;
"RTN","PSOBORP2",21,0)
RUNRPT(PSOSEL) ;
"RTN","PSOBORP2",22,0)
 ;
"RTN","PSOBORP2",23,0)
 ;THE INFORMATION FOR THE TRICARE-CHAMPVA BYPASS / OVERRIDE REPORT WILL BE GATHERED BY LOOPING THROUGH 
"RTN","PSOBORP2",24,0)
 ;FILE 52.87 (PSO AUDIT LOG FILE) TO RETRIEVE THE INFORMATION BASED UPON THE FILTERING 
"RTN","PSOBORP2",25,0)
 ;REQUIREMENTS IN ROUTINE PSOBORP0.
"RTN","PSOBORP2",26,0)
 ;
"RTN","PSOBORP2",27,0)
 D EN^PSOBORP3(.PSOSEL)
"RTN","PSOBORP2",28,0)
 ;
"RTN","PSOBORP2",29,0)
 ;
"RTN","PSOBORP2",30,0)
PROCESS(PSOSEL,PSOAUD) ;this will process file 52.87, the PSO AUDIT LOG
"RTN","PSOBORP2",31,0)
 ;
"RTN","PSOBORP2",32,0)
 N ACTDT,BEGDT,ENDDT,DIVISION,ELTCTYP,ELTYPE,I,PHAMCST,PROVIDER,PSOFILL,PSOD0,PSOARRAY,PSORX,REJCODE,REJIEN,TCTYPE
"RTN","PSOBORP2",33,0)
 S BEGDT=PSOSEL("BEGIN DATE"),ENDDT=PSOSEL("END DATE")
"RTN","PSOBORP2",34,0)
 S ACTDT=BEGDT,PSOD0=0
"RTN","PSOBORP2",35,0)
 D PSOARRAY(.PSOARRAY)
"RTN","PSOBORP2",36,0)
 F  S ACTDT=$O(^PS(52.87,"E",ACTDT)) Q:ACTDT=""!(ACTDT\1>ENDDT)  D
"RTN","PSOBORP2",37,0)
 .F  S PSOD0=$O(^PS(52.87,"E",ACTDT,PSOD0)) Q:PSOD0=""  D
"RTN","PSOBORP2",38,0)
 ..;
"RTN","PSOBORP2",39,0)
 ..;quit if duplicate prescription
"RTN","PSOBORP2",40,0)
 ..S PSORX=$P(^PS(52.87,PSOD0,0),"^",2)
"RTN","PSOBORP2",41,0)
 ..S PSOFILL=$P(^PS(52.87,PSOD0,0),"^",3)
"RTN","PSOBORP2",42,0)
 ..I PSOD0'=PSOARRAY(PSORX,PSOFILL) Q
"RTN","PSOBORP2",43,0)
 ..;
"RTN","PSOBORP2",44,0)
 ..;quit if division not selected or not all
"RTN","PSOBORP2",45,0)
 ..S DIVISION=$P(^PS(52.87,PSOD0,0),"^",5)
"RTN","PSOBORP2",46,0)
 ..I PSOSEL("DIVISION")'="A" Q:'$D(PSOSEL("DIVISION",DIVISION))
"RTN","PSOBORP2",47,0)
 ..S DIVISION=$P(^PS(59,DIVISION,0),"^",1)
"RTN","PSOBORP2",48,0)
 ..;
"RTN","PSOBORP2",49,0)
 ..;quit if eligibility type not selected or not all
"RTN","PSOBORP2",50,0)
 ..S ELTYPE=$P(^PS(52.87,PSOD0,1),"^",3)
"RTN","PSOBORP2",51,0)
 ..Q:'$D(PSOSEL("ELIG_TYPE",ELTYPE))
"RTN","PSOBORP2",52,0)
 ..S ELTYPE=$S(ELTYPE="T":"TRICARE",ELTYPE="C":"CHAMPVA",1:"ALL")
"RTN","PSOBORP2",53,0)
 ..;
"RTN","PSOBORP2",54,0)
 ..;quit if audit type not selected or not all
"RTN","PSOBORP2",55,0)
 ..S TCTYPE=$P(^PS(52.87,PSOD0,1),"^",2)
"RTN","PSOBORP2",56,0)
 ..Q:'$D(PSOSEL("REJECT CODES",TCTYPE))
"RTN","PSOBORP2",57,0)
 ..S TCTYPE=$S(TCTYPE="I":"INPATIENT",TCTYPE="N":"NON-BILLABLE",TCTYPE="R":"REJECT OVERRIDE",TCTYPE="P":"PARTIAL FILL",1:"ALL")
"RTN","PSOBORP2",58,0)
 ..S ELTCTYP=ELTYPE_" "_TCTYPE
"RTN","PSOBORP2",59,0)
 ..;
"RTN","PSOBORP2",60,0)
 ..;quit if specific pharmacist not selected or not all
"RTN","PSOBORP2",61,0)
 ..S PHAMCST=$P(^PS(52.87,PSOD0,1),"^",4)
"RTN","PSOBORP2",62,0)
 ..I PHAMCST'="",PSOSEL("PHARMACIST")'="A" Q:'$D(PSOSEL("PHARMACIST",PHAMCST))
"RTN","PSOBORP2",63,0)
 ..S PHAMCST=$P(^VA(200,PHAMCST,0),"^",1)
"RTN","PSOBORP2",64,0)
 ..;
"RTN","PSOBORP2",65,0)
 ..;quit if specific provider not selected or not all
"RTN","PSOBORP2",66,0)
 ..S PROVIDER=$P(^PS(52.87,PSOD0,0),"^",6)
"RTN","PSOBORP2",67,0)
 ..I PSOSEL("PROVIDER")'="A" Q:'$D(PSOSEL("PROVIDER",PROVIDER))
"RTN","PSOBORP2",68,0)
 ..S PROVIDER=$P(^VA(200,PROVIDER,0),"^",1)
"RTN","PSOBORP2",69,0)
 ..;
"RTN","PSOBORP2",70,0)
 ..;summary report
"RTN","PSOBORP2",71,0)
 ..I PSOSEL("SUM_DETAIL")="D"!(PSOSEL("SUM_DETAIL")="S") D
"RTN","PSOBORP2",72,0)
 ...;totals by provider
"RTN","PSOBORP2",73,0)
 ...I PSOSEL("TOTALS BY")="P" D  Q
"RTN","PSOBORP2",74,0)
 ....S PSOAUD(DIVISION,ELTCTYP,PROVIDER,ACTDT,0)=^PS(52.87,PSOD0,0)
"RTN","PSOBORP2",75,0)
 ....S PSOAUD(DIVISION,ELTCTYP,PROVIDER,ACTDT,1)=^PS(52.87,PSOD0,1)
"RTN","PSOBORP2",76,0)
 ....S PSOAUD(DIVISION,ELTCTYP,PROVIDER,ACTDT,2)=^PS(52.87,PSOD0,2)
"RTN","PSOBORP2",77,0)
 ...;
"RTN","PSOBORP2",78,0)
 ...;totals by pharmacist and Division
"RTN","PSOBORP2",79,0)
 ...I PSOSEL("TOTALS BY")="R" D  Q
"RTN","PSOBORP2",80,0)
 ....S PSOAUD(DIVISION,ELTCTYP,PHAMCST,ACTDT,0)=^PS(52.87,PSOD0,0)
"RTN","PSOBORP2",81,0)
 ....S PSOAUD(DIVISION,ELTCTYP,PHAMCST,ACTDT,1)=^PS(52.87,PSOD0,1)
"RTN","PSOBORP2",82,0)
 ....S PSOAUD(DIVISION,ELTCTYP,PHAMCST,ACTDT,2)=^PS(52.87,PSOD0,2)
"RTN","PSOBORP2",83,0)
 ..;
"RTN","PSOBORP2",84,0)
 ..S REJIEN=0,REJCODE=""
"RTN","PSOBORP2",85,0)
 ..F  S REJIEN=$O(^PS(52.87,PSOD0,3,REJIEN)) Q:'REJIEN  D
"RTN","PSOBORP2",86,0)
 ...I PSOSEL("TOTALS BY")="P" S PSOAUD(DIVISION,ELTCTYP,PROVIDER,ACTDT,3,REJIEN)=^PS(52.87,PSOD0,3,REJIEN,0)
"RTN","PSOBORP2",87,0)
 ...I PSOSEL("TOTALS BY")="R" S PSOAUD(DIVISION,ELTCTYP,PHAMCST,ACTDT,3,REJIEN)=^PS(52.87,PSOD0,3,REJIEN,0)
"RTN","PSOBORP2",88,0)
 ;
"RTN","PSOBORP2",89,0)
 Q
"RTN","PSOBORP2",90,0)
 ;
"RTN","PSOBORP2",91,0)
END ;
"RTN","PSOBORP2",92,0)
 I 'PSOEXCEL W !!!!,"REPORT HAS FINISHED"
"RTN","PSOBORP2",93,0)
 K DIVRXTOT,DIVTOT,GRDRXTOT,GROUPCNT,GRDTOT,PAGE,PROV,PSODIV,PSOCNT,PSORPTNM,PSORTYPE,PSOTOTAL,TC,TCT
"RTN","PSOBORP2",94,0)
 Q
"RTN","PSOBORP2",95,0)
 ;
"RTN","PSOBORP2",96,0)
GETPARAM(PSOFLDNO,PSODUZ) ;
"RTN","PSOBORP2",97,0)
 Q $$GET^XPAR(PSODUZ_";VA(200,","PSOS USRSCR",PSOFLDNO,"I")
"RTN","PSOBORP2",98,0)
 ;
"RTN","PSOBORP2",99,0)
 ;
"RTN","PSOBORP2",100,0)
UP(PSVAR) ;converts to upper case
"RTN","PSOBORP2",101,0)
 Q $TR(PSVAR,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","PSOBORP2",102,0)
 ;
"RTN","PSOBORP2",103,0)
 ;
"RTN","PSOBORP2",104,0)
 ;will build an of array of RX's to eliminate duplicates.
"RTN","PSOBORP2",105,0)
PSOARRAY(PSOARRAY) ;
"RTN","PSOBORP2",106,0)
 N ACTDT,BEGDT,ENDDT,DIVISION,I,PHAMCST,PROVIDER,PSOD0,PSOFILL,REJCODE,TCTYPE,REJIEN,TCTYPE
"RTN","PSOBORP2",107,0)
 S BEGDT=PSOSEL("BEGIN DATE"),ENDDT=PSOSEL("END DATE")
"RTN","PSOBORP2",108,0)
 S ACTDT=BEGDT,PSOD0=0
"RTN","PSOBORP2",109,0)
 F  S ACTDT=$O(^PS(52.87,"E",ACTDT)) Q:ACTDT=""!(ACTDT\1>ENDDT)  D
"RTN","PSOBORP2",110,0)
 .F  S PSOD0=$O(^PS(52.87,"E",ACTDT,PSOD0)) Q:PSOD0=""  D
"RTN","PSOBORP2",111,0)
 ..S PSOFILL=$P(^PS(52.87,PSOD0,0),"^",3)
"RTN","PSOBORP2",112,0)
 ..S PSOARRAY($P(^PS(52.87,PSOD0,0),"^",2),PSOFILL)=PSOD0
"RTN","PSOBORP2",113,0)
 Q
"RTN","PSOBORP3")
0^21^B197783254
"RTN","PSOBORP3",1,0)
PSOBORP3 ;ALBANY/BLD - TRICARE-CHAMPVA BYPASS/OVERRIDE AUDIT REPORT ;7/1/2010
"RTN","PSOBORP3",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**358,359,385,427**;DEC 1997;Build 21
"RTN","PSOBORP3",3,0)
 ;
"RTN","PSOBORP3",4,0)
 ;Uses API 
"RTN","PSOBORP3",5,0)
 ;this routine will process the TRICARE-CHAMPVA Bypass / Override Report based on the filtering criteria in routine PSOBORP0
"RTN","PSOBORP3",6,0)
 ;
"RTN","PSOBORP3",7,0)
 ;
"RTN","PSOBORP3",8,0)
EN(PSOSEL) ;
"RTN","PSOBORP3",9,0)
 ;
"RTN","PSOBORP3",10,0)
 ;THE INFORMATION FOR THE TRICARE-CHAMPVA BYPASS / OVERRIDE REPORT WILL BE GATHERED BY LOOPING THROUGH 
"RTN","PSOBORP3",11,0)
 ;FILE 52.87 (PSO AUDIT LOG FILE) TO RETRIEVE THE INFORMATION BASED UPON THE FILTERING 
"RTN","PSOBORP3",12,0)
 ;REQUIREMENTS IN ROUTINE PSOBORP0.
"RTN","PSOBORP3",13,0)
 ;
"RTN","PSOBORP3",14,0)
 N ACTDT,AMT,BEGDT,DASH,DETSUM,ENDDT,EQUAL,HDR1,HDR2,HDR3,HDR4,HDR5,HDR6,HDR7,MEAN,PAGE,PAGENBR,RXCNT
"RTN","PSOBORP3",15,0)
 N PSONOW,RJHDR,SPACE,STAR,PSOAUD,SUBTOTAL,SUBTOT,PROVTOT,PRORXTOT
"RTN","PSOBORP3",16,0)
 D INIT
"RTN","PSOBORP3",17,0)
 D PROCESS^PSOBORP2(.PSOSEL,.PSOAUD)                           ;process file 52.87 (Audit File)
"RTN","PSOBORP3",18,0)
 W:'PSOEXCEL @IOF D HDR
"RTN","PSOBORP3",19,0)
 I PSOSEL("SUM_DETAIL")="S" D SUMMARY(.PSOSEL,.PSOAUD)
"RTN","PSOBORP3",20,0)
 I PSOSEL("SUM_DETAIL")="D" D DETAIL(.PSOSEL,.PSOAUD)
"RTN","PSOBORP3",21,0)
 ;
"RTN","PSOBORP3",22,0)
 D END^PSOBORP2
"RTN","PSOBORP3",23,0)
 Q
"RTN","PSOBORP3",24,0)
 ;
"RTN","PSOBORP3",25,0)
DETAIL(PSOSEL,PSOAUD) ;for detail report
"RTN","PSOBORP3",26,0)
 ;
"RTN","PSOBORP3",27,0)
 N PAGELOC,AMT,PROV
"RTN","PSOBORP3",28,0)
 N GRDTOTAL,DIVISION,DIVTOT,DIVRXTOT,RXCNT,GRDRXTOT,ACTDT,TCTOTAL,TCTYPE,PROVIDER,PROVTOT,PROVRXT,SUBTOT,SUBTOTAL
"RTN","PSOBORP3",29,0)
 ;
"RTN","PSOBORP3",30,0)
 I PSOEXCEL D EDETAIL(.PSOSEL,.PSOAUD) Q        ;if Excel format chosen
"RTN","PSOBORP3",31,0)
 S PAGENBR=1
"RTN","PSOBORP3",32,0)
 D DETHDR
"RTN","PSOBORP3",33,0)
 ;
"RTN","PSOBORP3",34,0)
 S (GRDTOTAL,DIVISION,DIVTOT,DIVRXTOT,RXCNT,GRDRXTOT,ACTDT,TCTOTAL,TCTYPE,PROVIDER,PROVTOT,PROVRXT,PRORXTOT,PROVTOT,SUBTOTAL)=""
"RTN","PSOBORP3",35,0)
 ;
"RTN","PSOBORP3",36,0)
 I PSOSEL("TOTALS BY")="P"!(PSOSEL("TOTALS BY")="R") D  Q
"RTN","PSOBORP3",37,0)
 .F  S DIVISION=$O(PSOAUD(DIVISION)) Q:DIVISION=""!($G(PSOUT))  D
"RTN","PSOBORP3",38,0)
 ..S (PROVTOT,PRORXTOT,DIVTOT,DIVRXTOT)=""
"RTN","PSOBORP3",39,0)
 ..I ($Y+8)>IOSL D DETHDR Q:$G(PSOUT)
"RTN","PSOBORP3",40,0)
 ..W !!,$E(DASH,1,110)
"RTN","PSOBORP3",41,0)
 ..W !,"DIVISION: ",DIVISION
"RTN","PSOBORP3",42,0)
 ..F  S TCTYPE=$O(PSOAUD(DIVISION,TCTYPE)) Q:TCTYPE=""!($G(PSOUT))  D
"RTN","PSOBORP3",43,0)
 ...S TCT=TCTYPE,(TCRXTOT,TCTOTAL)="" D TCHDR(TCT)
"RTN","PSOBORP3",44,0)
 ...F  S PROVIDER=$O(PSOAUD(DIVISION,TCTYPE,PROVIDER)) Q:PROVIDER=""!($G(PSOUT))  D
"RTN","PSOBORP3",45,0)
 ....S (PROVTOT,PRORXTOT)=""
"RTN","PSOBORP3",46,0)
 ....F  S ACTDT=$O(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT))  Q:ACTDT=""!($G(PSOUT))  D
"RTN","PSOBORP3",47,0)
 .....S PROV=PROVIDER
"RTN","PSOBORP3",48,0)
 .....S AMT=$P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,0)),"^",9)
"RTN","PSOBORP3",49,0)
 .....S PROVTOT=$FN(PROVTOT+AMT,"T",2)
"RTN","PSOBORP3",50,0)
 .....S PRORXTOT=PRORXTOT+1
"RTN","PSOBORP3",51,0)
 .....S TCTOTAL=$FN(TCTOTAL+AMT,"T",2)
"RTN","PSOBORP3",52,0)
 .....S TCRXTOT=TCRXTOT+1
"RTN","PSOBORP3",53,0)
 .....S DIVTOT=$FN(DIVTOT+AMT,"T",2)
"RTN","PSOBORP3",54,0)
 .....S DIVRXTOT=DIVRXTOT+1
"RTN","PSOBORP3",55,0)
 .....S GRDTOTAL=$FN(GRDTOTAL+AMT,"T",2)
"RTN","PSOBORP3",56,0)
 .....S GRDRXTOT=GRDRXTOT+1
"RTN","PSOBORP3",57,0)
 .....Q:$G(PSOUT)  D:($Y+8)>IOSL DETHDR Q:$G(PSOUT)  D TCDSUMP(TCT,PROV,ACTDT)             ;detail print
"RTN","PSOBORP3",58,0)
 ....Q:$G(PSOUT)  D:($Y+8)>IOSL DETHDR Q:$G(PSOUT)  D PROVTOT(TCT,PROV,PROVTOT,PRORXTOT)
"RTN","PSOBORP3",59,0)
 ...Q:$G(PSOUT)  D:($Y+8)>IOSL DETHDR Q:$G(PSOUT)  D TCTOT(TCTOTAL,TCRXTOT,TCT)
"RTN","PSOBORP3",60,0)
 ..Q:$G(PSOUT)  D:($Y+8)>IOSL DETHDR Q:$G(PSOUT)  D DIVTOTP(DIVTOT,DIVRXTOT)
"RTN","PSOBORP3",61,0)
 .Q:$G(PSOUT)  D:($Y+8)>IOSL DETHDR Q:$G(PSOUT)  D GRDTOTP(GRDTOTAL,GRDRXTOT)
"RTN","PSOBORP3",62,0)
 ;
"RTN","PSOBORP3",63,0)
 Q
"RTN","PSOBORP3",64,0)
 ;
"RTN","PSOBORP3",65,0)
EDETAIL(PSOSEL,PSOAUD) ;for detail report
"RTN","PSOBORP3",66,0)
 ;
"RTN","PSOBORP3",67,0)
 N PAGELOC,AMT
"RTN","PSOBORP3",68,0)
 N GRDTOTAL,DIVISION,DIVTOT,DIVRXTOT,RXCNT,GRDRXTOT,ACTDT,TCTOTAL,TCTYPE,PROVIDER,PROVTOT,PROVRXT,SUBTOT,SUBTOTAL,PROV
"RTN","PSOBORP3",69,0)
 ;
"RTN","PSOBORP3",70,0)
 S PAGENBR=1
"RTN","PSOBORP3",71,0)
 D DETHDR
"RTN","PSOBORP3",72,0)
 ;
"RTN","PSOBORP3",73,0)
 S (GRDTOTAL,DIVISION,DIVTOT,DIVRXTOT,RXCNT,GRDRXTOT,ACTDT,TCTOTAL,TCTYPE,PROVIDER,PROVTOT,PROVRXT,SUBTOT,SUBTOTAL)=""
"RTN","PSOBORP3",74,0)
 ;
"RTN","PSOBORP3",75,0)
 I PSOSEL("TOTALS BY")="P"!(PSOSEL("TOTALS BY")="R") D  Q
"RTN","PSOBORP3",76,0)
 .F  S DIVISION=$O(PSOAUD(DIVISION)) Q:DIVISION=""!($G(PSOUT))  D
"RTN","PSOBORP3",77,0)
 ..F  S TCTYPE=$O(PSOAUD(DIVISION,TCTYPE)) Q:TCTYPE=""!($G(PSOUT))  D
"RTN","PSOBORP3",78,0)
 ...S TCT=TCTYPE
"RTN","PSOBORP3",79,0)
 ...F  S PROVIDER=$O(PSOAUD(DIVISION,TCTYPE,PROVIDER)) Q:PROVIDER=""!($G(PSOUT))  D
"RTN","PSOBORP3",80,0)
 ....F  S ACTDT=$O(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT))  Q:ACTDT=""!($G(PSOUT))  D
"RTN","PSOBORP3",81,0)
 .....S PROV=PROVIDER
"RTN","PSOBORP3",82,0)
 .....S AMT=$P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,0)),"^",9)
"RTN","PSOBORP3",83,0)
 .....Q:$G(PSOUT)  D TCDSUMP(TCTYPE,PROV,ACTDT)             ;detail print
"RTN","PSOBORP3",84,0)
 ....Q:$G(PSOUT)
"RTN","PSOBORP3",85,0)
 ...Q:$G(PSOUT)
"RTN","PSOBORP3",86,0)
 ..Q:$G(PSOUT)
"RTN","PSOBORP3",87,0)
 .Q:$G(PSOUT)
"RTN","PSOBORP3",88,0)
 ;
"RTN","PSOBORP3",89,0)
 Q
"RTN","PSOBORP3",90,0)
 ;
"RTN","PSOBORP3",91,0)
SUMMARY(PSOSEL,PSOAUD) ;for summary report
"RTN","PSOBORP3",92,0)
 ;
"RTN","PSOBORP3",93,0)
 N AMT,ACTDT,ACTDATE,DIVISION,PROVIDER,PHAMCST,PAGELOC,PROVIDER,TCTOTAL,TCTYPE,RXTOTAL,RXCNT,GRDTOTAL,SUBTOT,MEAN
"RTN","PSOBORP3",94,0)
 ;
"RTN","PSOBORP3",95,0)
 S PAGENBR=1
"RTN","PSOBORP3",96,0)
 D SUMHDR
"RTN","PSOBORP3",97,0)
 S (GRDTOTAL,DIVISION,DIVTOT,DIVRXTOT,RXCNT,GRDRXTOT,ACTDT,TCTOTAL,TCRXTOT,TCTYPE,PROVIDER,PROVTOT,PRORXTOT,SUBTOTAL)=""
"RTN","PSOBORP3",98,0)
 ;
"RTN","PSOBORP3",99,0)
 ;subtotals by provider
"RTN","PSOBORP3",100,0)
 I PSOSEL("TOTALS BY")="P"!(PSOSEL("TOTALS BY")="R") D
"RTN","PSOBORP3",101,0)
 .F  S DIVISION=$O(PSOAUD(DIVISION)) Q:DIVISION=""!($G(PSOUT))  D
"RTN","PSOBORP3",102,0)
 ..S (PROVTOT,PRORXTOT,RXCNT,DIVTOT,DIVRXTOT)=""
"RTN","PSOBORP3",103,0)
 ..I ($Y+8)>IOSL D SUMHDR Q:$G(PSOUT)
"RTN","PSOBORP3",104,0)
 ..W !!,$E(DASH,1,110)
"RTN","PSOBORP3",105,0)
 ..W !,"DIVISION: ",DIVISION
"RTN","PSOBORP3",106,0)
 ..F  S TCTYPE=$O(PSOAUD(DIVISION,TCTYPE)) Q:TCTYPE=""!($G(PSOUT))  D
"RTN","PSOBORP3",107,0)
 ...S TCT=TCTYPE,(TCRXTOT,TCTOTAL)="" D TCHDR(TCT)
"RTN","PSOBORP3",108,0)
 ...F  S PROVIDER=$O(PSOAUD(DIVISION,TCTYPE,PROVIDER)) Q:PROVIDER=""!($G(PSOUT))  D
"RTN","PSOBORP3",109,0)
 ....S (PROVTOT,PRORXTOT)=0
"RTN","PSOBORP3",110,0)
 ....F  S ACTDT=$O(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT))  Q:ACTDT=""!($G(PSOUT))  D
"RTN","PSOBORP3",111,0)
 .....S PROV=PROVIDER
"RTN","PSOBORP3",112,0)
 .....S AMT=$P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,0)),"^",9)
"RTN","PSOBORP3",113,0)
 .....S PROVTOT=$FN(PROVTOT+AMT,"T",2)
"RTN","PSOBORP3",114,0)
 .....S PRORXTOT=PRORXTOT+1
"RTN","PSOBORP3",115,0)
 .....S TCTOTAL=$FN(TCTOTAL+AMT,"T",2)
"RTN","PSOBORP3",116,0)
 .....S TCRXTOT=TCRXTOT+1
"RTN","PSOBORP3",117,0)
 .....S DIVTOT=$FN(DIVTOT+AMT,"T",2)
"RTN","PSOBORP3",118,0)
 .....S DIVRXTOT=DIVRXTOT+1
"RTN","PSOBORP3",119,0)
 .....S GRDTOTAL=$FN(GRDTOTAL+AMT,"T",2)
"RTN","PSOBORP3",120,0)
 .....S GRDRXTOT=GRDRXTOT+1
"RTN","PSOBORP3",121,0)
 ....Q:$G(PSOUT)  D:($Y+8)>IOSL SUMHDR Q:$G(PSOUT)  D TCSSUMP(PROVTOT,PRORXTOT,TCT,PROV)             ;summary print
"RTN","PSOBORP3",122,0)
 ...Q:$G(PSOUT)  D:($Y+8)>IOSL SUMHDR Q:$G(PSOUT)  D TCTOT(TCTOTAL,TCRXTOT,TCT)
"RTN","PSOBORP3",123,0)
 ..Q:$G(PSOUT)  D:($Y+8)>IOSL SUMHDR Q:$G(PSOUT)  D DIVTOTP(DIVTOT,DIVRXTOT)
"RTN","PSOBORP3",124,0)
 .Q:$G(PSOUT)  D:($Y+8)>IOSL SUMHDR Q:$G(PSOUT)  D GRDTOTP(GRDTOTAL,GRDRXTOT)
"RTN","PSOBORP3",125,0)
 ;
"RTN","PSOBORP3",126,0)
 Q
"RTN","PSOBORP3",127,0)
 ;
"RTN","PSOBORP3",128,0)
SUMHDR ;
"RTN","PSOBORP3",129,0)
 ;this will print the header and page breaks for summary report.
"RTN","PSOBORP3",130,0)
 ;
"RTN","PSOBORP3",131,0)
 ;
"RTN","PSOBORP3",132,0)
 I PAGENBR>1 D PAUSE^PSOBORP1 Q:$G(PSOUT)  W @IOF
"RTN","PSOBORP3",133,0)
 S PAGELOC=132-($L(PAGE)+$L(PAGENBR))
"RTN","PSOBORP3",134,0)
 W !,HDR1,?PAGELOC,PAGE,PAGENBR S PAGENBR=PAGENBR+1
"RTN","PSOBORP3",135,0)
 W !,HDR2,!,HDR3,!,HDR4,!,HDR5 W !,$E(EQUAL,1,110)
"RTN","PSOBORP3",136,0)
 ;
"RTN","PSOBORP3",137,0)
 Q
"RTN","PSOBORP3",138,0)
 ;
"RTN","PSOBORP3",139,0)
DETHDR ;
"RTN","PSOBORP3",140,0)
 ;this will print the header and page breaks for the detail report
"RTN","PSOBORP3",141,0)
 ;
"RTN","PSOBORP3",142,0)
 I PAGENBR>1,PSOEXCEL Q                                       ;if Excel spreadsheet format
"RTN","PSOBORP3",143,0)
 ;
"RTN","PSOBORP3",144,0)
 I PAGENBR>1 D PAUSE^PSOBORP1 Q:$G(PSOUT)  W @IOF
"RTN","PSOBORP3",145,0)
 S PAGELOC=132-($L(PAGE)+$L(PAGENBR))
"RTN","PSOBORP3",146,0)
 I 'PSOEXCEL D
"RTN","PSOBORP3",147,0)
 .W !,HDR1,?PAGELOC,PAGE,PAGENBR S PAGENBR=PAGENBR+1
"RTN","PSOBORP3",148,0)
 .W !,HDR2,!,HDR3,!,HDR4,!,HDR5,!,$E(EQUAL,1,110),!,HDR6,!,HDR7,!,$E(EQUAL,1,110)
"RTN","PSOBORP3",149,0)
 ;
"RTN","PSOBORP3",150,0)
 I PSOEXCEL D
"RTN","PSOBORP3",151,0)
 .W !,"DIVISION"_"^"_"PT ELIG"_"^"_"TYPE"_"^"_"PROVIDER"_"^"_"BENEFICIARY NAME"_"^"_"ID"_"^"_"RX#"_"^"_"REF/ECME#"_"^"_"RX DATE"_"^"_"FILL LOC"_"^"_"STATUS"_"^"_"ACTION DATE"_"^"_"USER NAME"_"^"_"$BILLED"
"RTN","PSOBORP3",152,0)
 .W "^"_"QTY"_"^"_"NDC#"_"^"_"DRUG"_"^"_"REJECT CODE(S)"_"^"_"REJECT CODE"_"^"_"REJECT EXPLANATION"_"^"_"JUSTIFICATION"
"RTN","PSOBORP3",153,0)
 ;
"RTN","PSOBORP3",154,0)
 Q
"RTN","PSOBORP3",155,0)
 ;
"RTN","PSOBORP3",156,0)
PROVTOT(TCT,PROVIDER,PROVTOT,PROVRXT) ;prints totals by provider
"RTN","PSOBORP3",157,0)
 ;
"RTN","PSOBORP3",158,0)
 Q:PSOEXCEL                           ;if Excel spreadsheet format
"RTN","PSOBORP3",159,0)
 ; 
"RTN","PSOBORP3",160,0)
 Q:TCTYPE="TRICARE INPATIENT"!(TCTYPE="CHAMPVA INPATIENT")
"RTN","PSOBORP3",161,0)
 W !!,?10,PROV
"RTN","PSOBORP3",162,0)
 W !,?10,"SUBTOTALS",?51,PROVTOT
"RTN","PSOBORP3",163,0)
 W !,?10,"RX COUNT",?51,PROVRXT
"RTN","PSOBORP3",164,0)
 W !,?10,"MEAN",?51,$FN(PROVTOT/PROVRXT,"T",2),!
"RTN","PSOBORP3",165,0)
 S (PROVRXT,PROVTOT)=""
"RTN","PSOBORP3",166,0)
 ;
"RTN","PSOBORP3",167,0)
 Q
"RTN","PSOBORP3",168,0)
 ;
"RTN","PSOBORP3",169,0)
 ;
"RTN","PSOBORP3",170,0)
TCTOT(TCTOTAL,TCRXTOT,TCTYPE) ;
"RTN","PSOBORP3",171,0)
 ;print tctypes totals
"RTN","PSOBORP3",172,0)
 ;
"RTN","PSOBORP3",173,0)
 Q:PSOEXCEL                           ;if Excel spreadsheet format
"RTN","PSOBORP3",174,0)
 ;
"RTN","PSOBORP3",175,0)
 W !!,?5,TCTYPE
"RTN","PSOBORP3",176,0)
 W !,?5,"SUBTOTALS",?51,TCTOTAL
"RTN","PSOBORP3",177,0)
 W !,?5,"RX COUNT",?51,TCRXTOT
"RTN","PSOBORP3",178,0)
 W !,?5,"MEAN",?51,$FN(TCTOTAL/TCRXTOT,"T",2)
"RTN","PSOBORP3",179,0)
 ;
"RTN","PSOBORP3",180,0)
 ;
"RTN","PSOBORP3",181,0)
 Q
"RTN","PSOBORP3",182,0)
 ;
"RTN","PSOBORP3",183,0)
DIVTOTP(DIVTOT,DIVRXTOT) ;
"RTN","PSOBORP3",184,0)
 ;print the totals for a division
"RTN","PSOBORP3",185,0)
 ;
"RTN","PSOBORP3",186,0)
 Q:PSOEXCEL                           ;if Excel spreadsheet format
"RTN","PSOBORP3",187,0)
 ;
"RTN","PSOBORP3",188,0)
 W !!,"DIVISION ",DIVISION,?51,$E(DASH,1,13)
"RTN","PSOBORP3",189,0)
 W !,"SUBTOTALS",?51,DIVTOT
"RTN","PSOBORP3",190,0)
 W !,"RX COUNT",?51,DIVRXTOT
"RTN","PSOBORP3",191,0)
 W !,"MEAN",?51,$FN(DIVTOT/DIVRXTOT,"T",2)
"RTN","PSOBORP3",192,0)
 ;
"RTN","PSOBORP3",193,0)
 Q
"RTN","PSOBORP3",194,0)
 ;
"RTN","PSOBORP3",195,0)
GRDTOTP(GRDTOTAL,GRDRXTOT) ;
"RTN","PSOBORP3",196,0)
 ;
"RTN","PSOBORP3",197,0)
 Q:PSOEXCEL                           ;if Excel spreadsheet format
"RTN","PSOBORP3",198,0)
 ;
"RTN","PSOBORP3",199,0)
 N I
"RTN","PSOBORP3",200,0)
 ;
"RTN","PSOBORP3",201,0)
 I '$D(PSOAUD) W !!,?26,"NO INFORMATION FOUND..." Q
"RTN","PSOBORP3",202,0)
 F I=1:1:2 W !,?51,$E(DASH,1,13)
"RTN","PSOBORP3",203,0)
 W !!!,"GRAND TOTALS",?51,GRDTOTAL
"RTN","PSOBORP3",204,0)
 W !,"RX COUNT",?51,GRDRXTOT
"RTN","PSOBORP3",205,0)
 W !,"MEAN",?51,$FN(GRDTOTAL/GRDRXTOT,"T",2)
"RTN","PSOBORP3",206,0)
 W !,?51,$E(DASH,1,13)
"RTN","PSOBORP3",207,0)
 ;
"RTN","PSOBORP3",208,0)
 Q
"RTN","PSOBORP3",209,0)
 ;
"RTN","PSOBORP3",210,0)
 ;
"RTN","PSOBORP3",211,0)
TCDSUMP(TCTYPE,PROVIDER,ACTDT) ;print the summary
"RTN","PSOBORP3",212,0)
 ;
"RTN","PSOBORP3",213,0)
 N AMTBILL,DFN,NAME,ID,REFILL,RXNBR,RX,ECMENBR,RXDATE,RXINFO,RXQTY,NDCNBR,RXDRUG,VADM,USER,TRIJUST,PTELIG,REJ,RTYPE
"RTN","PSOBORP3",214,0)
 S RJHDR=$E(STAR,1,30)_$E(SPACE,1,3)_TCTYPE_$E(SPACE,1,3)_$E(STAR,1,(57-$L(TCTYPE)))
"RTN","PSOBORP3",215,0)
 S DFN=$P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,0)),"^",4)
"RTN","PSOBORP3",216,0)
 D DEM^VADPT
"RTN","PSOBORP3",217,0)
 S NAME=VADM(1)
"RTN","PSOBORP3",218,0)
 S ID=$P(VADM(2),"^",1),ID=$E(ID,$L(ID)-3,999)
"RTN","PSOBORP3",219,0)
 S RXNBR=$P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,0)),"^",2)
"RTN","PSOBORP3",220,0)
 S RX=$$GET1^DIQ(52,RXNBR,.01)
"RTN","PSOBORP3",221,0)
 S REFILL=$P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,0)),"^",3)
"RTN","PSOBORP3",222,0)
 S ECMENBR=$P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,0)),"^",10) I ECMENBR="" S ECMENBR="N/A"
"RTN","PSOBORP3",223,0)
 S ECMENBR=REFILL_"/"_ECMENBR
"RTN","PSOBORP3",224,0)
 S RXDATE=$$DATTIM($P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,1)),"^",6))
"RTN","PSOBORP3",225,0)
 S RXINFO=$$RXINFO(RXNBR)
"RTN","PSOBORP3",226,0)
 S USER=$P(^VA(200,$P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,1)),"^",4),0),"^",1)
"RTN","PSOBORP3",227,0)
 S AMTBILL=$P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,0)),"^",9)
"RTN","PSOBORP3",228,0)
 S RXQTY=$P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,0)),"^",11)
"RTN","PSOBORP3",229,0)
 S NDCNBR=$TR($P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,0)),"^",7),"-","")
"RTN","PSOBORP3",230,0)
 S RXDRUG=$E($P($G(^PSDRUG($P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,0)),"^",8),0)),"^",1),1,24)
"RTN","PSOBORP3",231,0)
 S TRIJUST=$P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,2)),"^",1)
"RTN","PSOBORP3",232,0)
 S PTELIG=$P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,1)),"^",3)
"RTN","PSOBORP3",233,0)
 S REJ=$P($G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,1)),"^",2),RTYPE=$S(REJ="I":"INPATIENT",REJ="N":"NON-BILLABLE",REJ="R":"REJECT OVERRIDE",REJ="P":"PARTIAL FILL",1:"")
"RTN","PSOBORP3",234,0)
 ;
"RTN","PSOBORP3",235,0)
 ;for standard output
"RTN","PSOBORP3",236,0)
 I 'PSOEXCEL D
"RTN","PSOBORP3",237,0)
 .W !!,$E(NAME,1,30)_"/"_ID,?36,RX,?54,ECMENBR,?72,RXDATE,?90,RXINFO
"RTN","PSOBORP3",238,0)
 .W !,?4,$$DATTIM($P(ACTDT,".",1)),?22,$E(USER,1,20),?58,$FN(AMTBILL,"T",2),?72,RXQTY,?84,NDCNBR,?103,RXDRUG
"RTN","PSOBORP3",239,0)
 .I $D(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,3)) D NCPDPRC(.PSOAUD)
"RTN","PSOBORP3",240,0)
 .;
"RTN","PSOBORP3",241,0)
 .;TRICARE justification
"RTN","PSOBORP3",242,0)
 .I $E(IOST,1,2)="C-" D
"RTN","PSOBORP3",243,0)
 ..I $L(TRIJUST)>125 W !,?4,$E(TRIJUST,1,125)_"..."
"RTN","PSOBORP3",244,0)
 ..I $L(TRIJUST)<125 W !,?4,TRIJUST
"RTN","PSOBORP3",245,0)
 ;
"RTN","PSOBORP3",246,0)
 ;if Excel format is selected
"RTN","PSOBORP3",247,0)
 I PSOEXCEL D
"RTN","PSOBORP3",248,0)
 .N REJIEN,FILE,FIELD,NCPDIEN,RJCDS,REJEXP
"RTN","PSOBORP3",249,0)
 .S REJIEN=0,FILE=9002313.93,FIELD=.02,RJCDS="",REJEXP=""
"RTN","PSOBORP3",250,0)
 .I $D(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,3)) F  S REJIEN=$O(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,3,REJIEN)) Q:'REJIEN  D
"RTN","PSOBORP3",251,0)
 ..S NCPDIEN=$G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,3,REJIEN))
"RTN","PSOBORP3",252,0)
 ..S RJCDS=$S($G(RJCDS)="":NCPDIEN,1:RJCDS_","_NCPDIEN)
"RTN","PSOBORP3",253,0)
 .I RJCDS'="",$P(RJCDS,":",1)'="eT",$P(RJCDS,":",1)'="eC" S REJEXP=$$GET1^DIQ(FILE,+$P(RJCDS,",",1),FIELD)
"RTN","PSOBORP3",254,0)
 .I RJCDS'="",$P(RJCDS,":",1)="eT" S REJEXP="TRICARE-DRUG NON BILLABLE"
"RTN","PSOBORP3",255,0)
 .I RJCDS'="",$P(RJCDS,":",1)="eC" S REJEXP="CHAMPVA-DRUG NON BILLABLE"
"RTN","PSOBORP3",256,0)
 .W !,DIVISION_"^"_PTELIG_"^"_RTYPE_"^"_PROVIDER_"^"_$E(NAME,1,30)_"^"_ID_"^"_RX_"^"_ECMENBR_"^"_RXDATE_"^"_RXINFO_"^"
"RTN","PSOBORP3",257,0)
 .W $$DATTIM($P(ACTDT,".",1))_"^"_$E(USER,1,20)_"^"_$FN(AMTBILL,"T",2)_"^"_RXQTY_"^"_NDCNBR_"^"_RXDRUG_"^"_RJCDS_"^"_$P(RJCDS,",",1)_"^"_REJEXP_"^"_TRIJUST
"RTN","PSOBORP3",258,0)
 ;
"RTN","PSOBORP3",259,0)
 Q
"RTN","PSOBORP3",260,0)
 ;
"RTN","PSOBORP3",261,0)
NCPDPRC(PSOAUD) ;
"RTN","PSOBORP3",262,0)
 ;writes the NCPD reject code
"RTN","PSOBORP3",263,0)
 ;
"RTN","PSOBORP3",264,0)
 N REJIEN,FILE,FIELD,NCPDIEN,REJTXT
"RTN","PSOBORP3",265,0)
 S REJIEN=0,FILE=9002313.93,FIELD=.02
"RTN","PSOBORP3",266,0)
 F  S REJIEN=$O(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,3,REJIEN)) Q:'REJIEN  D
"RTN","PSOBORP3",267,0)
 .S NCPDIEN=$G(PSOAUD(DIVISION,TCTYPE,PROVIDER,ACTDT,3,REJIEN))
"RTN","PSOBORP3",268,0)
 .I NCPDIEN'="eT",NCPDIEN'="eC" S REJTXT=$$GET1^DIQ(FILE,+NCPDIEN,FIELD)
"RTN","PSOBORP3",269,0)
 .I NCPDIEN="eT" S REJTXT="TRICARE-DRUG NON BILLABLE"
"RTN","PSOBORP3",270,0)
 .I NCPDIEN="eC" S REJTXT="CHAMPVA-DRUG NON BILLABLE"
"RTN","PSOBORP3",271,0)
 .I 'PSOEXCEL W !,?4,NCPDIEN_":"_REJTXT
"RTN","PSOBORP3",272,0)
 .I PSOEXCEL W !,NCPDIEN_":"_REJTXT
"RTN","PSOBORP3",273,0)
 ;
"RTN","PSOBORP3",274,0)
 Q
"RTN","PSOBORP3",275,0)
 ;
"RTN","PSOBORP3",276,0)
RXINFO(RXNBR) ;
"RTN","PSOBORP3",277,0)
 ;this will return the data needed for the RX INFO on the Audit Report.
"RTN","PSOBORP3",278,0)
 ;
"RTN","PSOBORP3",279,0)
 ;
"RTN","PSOBORP3",280,0)
 N RFL,CMOP,RXSTATUS,FILLOC,BILLTYPE,RELDATE,RELSTATUS
"RTN","PSOBORP3",281,0)
 S RFL=$$LSTRFL^PSOBPSU1(RXNBR)
"RTN","PSOBORP3",282,0)
 S BILLTYPE="**"
"RTN","PSOBORP3",283,0)
 S FILLOC=$$MWC^PSOBPSU2(RXNBR,RFL)
"RTN","PSOBORP3",284,0)
 S RXSTATUS=$$GET1^DIQ(52,RXNBR,100,"I")
"RTN","PSOBORP3",285,0)
 S RXSTATUS=$$RXSTANAM(RXSTATUS)
"RTN","PSOBORP3",286,0)
 S RELDATE=$$RXRLDT^PSOBPSUT(RXNBR,RFL)
"RTN","PSOBORP3",287,0)
 S RELSTATUS=$S(RELDATE'="":"R",1:"N")
"RTN","PSOBORP3",288,0)
 I 'PSOEXCEL Q FILLOC_" "_BILLTYPE_" "_RXSTATUS_"/"_RELSTATUS
"RTN","PSOBORP3",289,0)
 I PSOEXCEL Q FILLOC_"^"_RXSTATUS_"/"_RELSTATUS
"RTN","PSOBORP3",290,0)
 ;
"RTN","PSOBORP3",291,0)
RXSTANAM(BPRXSTAT) ;*/
"RTN","PSOBORP3",292,0)
 Q:BPRXSTAT=0 "AC"  ; ACTIVE; 
"RTN","PSOBORP3",293,0)
 Q:BPRXSTAT=1 "NV"  ; NON-VERIFIED; 
"RTN","PSOBORP3",294,0)
 Q:BPRXSTAT=3 "HL"  ; HOLD; 
"RTN","PSOBORP3",295,0)
 Q:BPRXSTAT=5 "SU"  ; SUSPENDED; 
"RTN","PSOBORP3",296,0)
 Q:BPRXSTAT=11 "EX"  ; EXPIRED; 
"RTN","PSOBORP3",297,0)
 Q:BPRXSTAT=12 "DS"  ; DISCONTINUED; 
"RTN","PSOBORP3",298,0)
 Q:BPRXSTAT=13 "DL"  ; DELETED; 
"RTN","PSOBORP3",299,0)
 Q:BPRXSTAT=14 "DS"  ; DISCONTINUED BY PROVIDER; 
"RTN","PSOBORP3",300,0)
 Q:BPRXSTAT=15 "DS"  ; DISCONTINUED (EDIT); 
"RTN","PSOBORP3",301,0)
 Q:BPRXSTAT=16 "HL"  ; PROVIDER HOLD; 
"RTN","PSOBORP3",302,0)
 Q:BPRXSTAT=-1 "??"
"RTN","PSOBORP3",303,0)
 Q ""
"RTN","PSOBORP3",304,0)
 ;
"RTN","PSOBORP3",305,0)
 ;
"RTN","PSOBORP3",306,0)
TCSSUMP(SUBTOT,RXCNT,TCTYPE,PROVIDER,PHARMCST) ;print the summary
"RTN","PSOBORP3",307,0)
 ;
"RTN","PSOBORP3",308,0)
 I TCTYPE="TRICARE INPATIENT"!(TCTYPE="CHAMPVA INPATIENT") Q
"RTN","PSOBORP3",309,0)
 S RJHDR=$E(STAR,1,30)_$E(SPACE,1,3)_TCTYPE_$E(SPACE,1,3)_$E(STAR,1,(57-$L(TCTYPE)))
"RTN","PSOBORP3",310,0)
 ;
"RTN","PSOBORP3",311,0)
 ;subtotals by provider
"RTN","PSOBORP3",312,0)
 W !!,?7,$S(PSOSEL("TOTALS BY")="P":"PROVIDER: ",1:"PHARMACIST: "),PROVIDER,?44,$E(DASH,1,13)
"RTN","PSOBORP3",313,0)
 W !,?7,"SUB-TOTALS",?51,SUBTOT
"RTN","PSOBORP3",314,0)
 W !,?7,"RX COUNT",?51,RXCNT
"RTN","PSOBORP3",315,0)
 W !,?7,"MEAN",?51,$FN(SUBTOT/RXCNT,"T",2),!
"RTN","PSOBORP3",316,0)
 ;
"RTN","PSOBORP3",317,0)
 Q
"RTN","PSOBORP3",318,0)
 ;
"RTN","PSOBORP3",319,0)
TCHDR(TCTYPE) ;print report header
"RTN","PSOBORP3",320,0)
 ;
"RTN","PSOBORP3",321,0)
 S (SUBTOT,RXCNT)=""
"RTN","PSOBORP3",322,0)
 I 'PSOEXCEL D  Q
"RTN","PSOBORP3",323,0)
 .S RJHDR=$E(STAR,1,30)_$E(SPACE,1,3)_TCTYPE_$E(SPACE,1,3)_$E(STAR,1,(57-$L(TCTYPE)))
"RTN","PSOBORP3",324,0)
 .W !!,RJHDR
"RTN","PSOBORP3",325,0)
 ;
"RTN","PSOBORP3",326,0)
 ;
"RTN","PSOBORP3",327,0)
 Q
"RTN","PSOBORP3",328,0)
 ;
"RTN","PSOBORP3",329,0)
HDR ;
"RTN","PSOBORP3",330,0)
 S HDR1="TRICARE-CHAMPVA BYPASS/OVERRIDE AUDIT REPORT -    "_DETSUM_" Print Date: "_PSONOW
"RTN","PSOBORP3",331,0)
 S HDR2="DIVISION(S): "_$$DIVISION()
"RTN","PSOBORP3",332,0)
 S HDR3="ELIGIBILITY: "_$$ELIG()
"RTN","PSOBORP3",333,0)
 S HDR4="TC TYPES: "_$$HDR4(.PSOSEL)
"RTN","PSOBORP3",334,0)
 S HDR5="ALL PRESCRIPTIONS BY AUDIT DATE: From "_BEGDT_" through "_ENDDT
"RTN","PSOBORP3",335,0)
 I PSOSEL("SUM_DETAIL")="D" D
"RTN","PSOBORP3",336,0)
 .S HDR6="BENEFICIARY NAME/ID"_$E(SPACE,1,17)_"RX#"_$E(SPACE,1,15)_"REF/ECME#"_$E(SPACE,1,9)_"RX DATE"_$E(SPACE,1,11)_"RX INFO"
"RTN","PSOBORP3",337,0)
 .S HDR7=$E(SPACE,1,4)_"ACTION DATE"_$E(SPACE,1,8)_"USER NAME"_$E(SPACE,1,26)_"$BILLED "_$E(SPACE,1,6)_"QTY"_$E(SPACE,1,9)_"NDC#"_$E(SPACE,1,15)_"DRUG"
"RTN","PSOBORP3",338,0)
 Q
"RTN","PSOBORP3",339,0)
 ;
"RTN","PSOBORP3",340,0)
HDR4(PSOSEL) ;
"RTN","PSOBORP3",341,0)
 ;
"RTN","PSOBORP3",342,0)
 N TCTYPE,RCODE
"RTN","PSOBORP3",343,0)
 S (RCODE,TCTYPE)=""
"RTN","PSOBORP3",344,0)
 F  S TCTYPE=$O(PSOSEL("REJECT CODES",TCTYPE)) Q:TCTYPE=""  D
"RTN","PSOBORP3",345,0)
 .I $G(RCODE)="" S RCODE=PSOSEL("REJECT CODES",TCTYPE)
"RTN","PSOBORP3",346,0)
 .E  S RCODE=RCODE_", "_PSOSEL("REJECT CODES",TCTYPE)
"RTN","PSOBORP3",347,0)
 ;
"RTN","PSOBORP3",348,0)
 Q RCODE
"RTN","PSOBORP3",349,0)
 ;
"RTN","PSOBORP3",350,0)
 ;
"RTN","PSOBORP3",351,0)
DIVISION() ;list of divisions for header
"RTN","PSOBORP3",352,0)
 ;
"RTN","PSOBORP3",353,0)
 N DIV,DIVISION
"RTN","PSOBORP3",354,0)
 S (DIVISION,DIV)=""
"RTN","PSOBORP3",355,0)
 I PSOSEL("DIVISION")="A" Q "ALL"
"RTN","PSOBORP3",356,0)
 F  S DIV=$O(PSOSEL("DIVISION",DIV)) Q:DIV=""  D
"RTN","PSOBORP3",357,0)
 .I DIVISION="" S DIVISION=$P(PSOSEL("DIVISION",DIV),"^",2) Q
"RTN","PSOBORP3",358,0)
 .S DIVISION=DIVISION_$P(PSOSEL("DIVISION",DIV),"^",2)
"RTN","PSOBORP3",359,0)
 Q DIVISION
"RTN","PSOBORP3",360,0)
 ;
"RTN","PSOBORP3",361,0)
 ;
"RTN","PSOBORP3",362,0)
REJECTS() ;list the reject types for the header
"RTN","PSOBORP3",363,0)
 ;
"RTN","PSOBORP3",364,0)
 N REJ,REJECTS
"RTN","PSOBORP3",365,0)
 S (REJECTS,REJ)=""
"RTN","PSOBORP3",366,0)
 F  S REJ=$O(PSOSEL("REJECT CODES",REJ)) Q:REJ=""  D
"RTN","PSOBORP3",367,0)
 .I REJECTS="" S REJECTS=$S(REJ="I":"INPATIENT",REJ="N":"NON-BILLABLE",REJ="R":"REJECT OVERRIDE",REJ="P":"PARTIAL FILL",1:"ALL")
"RTN","PSOBORP3",368,0)
 .E  S REJECTS=REJECTS_"  "_$S(REJ="I":"INPATIENT",REJ="N":"NON-BILLABLE",REJ="R":"REJECT OVERRIDE",REJ="P":"PARTIAL FILL",1:"ALL")
"RTN","PSOBORP3",369,0)
 ;
"RTN","PSOBORP3",370,0)
 Q REJECTS
"RTN","PSOBORP3",371,0)
 ;
"RTN","PSOBORP3",372,0)
 ;
"RTN","PSOBORP3",373,0)
INIT ;
"RTN","PSOBORP3",374,0)
 ;
"RTN","PSOBORP3",375,0)
 N %,Y
"RTN","PSOBORP3",376,0)
 D NOW^%DTC S Y=% D DD^%DT S PSONOW=Y
"RTN","PSOBORP3",377,0)
 S $P(SPACE," ",150)=""
"RTN","PSOBORP3",378,0)
 S $P(DASH,"-",150)=""
"RTN","PSOBORP3",379,0)
 S $P(EQUAL,"=",150)=""
"RTN","PSOBORP3",380,0)
 S $P(STAR,"*",150)=""
"RTN","PSOBORP3",381,0)
 S PAGE="PAGE: "
"RTN","PSOBORP3",382,0)
 S DETSUM=$S(PSOSEL("SUM_DETAIL")="S":"SUMMARY",1:"DETAIL")
"RTN","PSOBORP3",383,0)
 S BEGDT=$$DATTIM(PSOSEL("BEGIN DATE"))
"RTN","PSOBORP3",384,0)
 S ENDDT=$$DATTIM(PSOSEL("END DATE"))
"RTN","PSOBORP3",385,0)
 S PSOEXCEL=$G(PSOSEL("EXCEL"))
"RTN","PSOBORP3",386,0)
 K SUBTOTAL,MEAN,SUBTOT,DIVISION,PROVIDER,TCTYPE,TCTYPE,RXCNT
"RTN","PSOBORP3",387,0)
 ;
"RTN","PSOBORP3",388,0)
 Q
"RTN","PSOBORP3",389,0)
 ;
"RTN","PSOBORP3",390,0)
 ;Convert FM date or date.time to displayable (mm/dd/yy HH:MM) format
"RTN","PSOBORP3",391,0)
 ;
"RTN","PSOBORP3",392,0)
DATTIM(X) ;
"RTN","PSOBORP3",393,0)
 N DATE,BPT,BPM,BPH,BPAP
"RTN","PSOBORP3",394,0)
 S DATE=$S(X:$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3),1:"")
"RTN","PSOBORP3",395,0)
 S BPT=$P(X,".",2) S:$L(BPT)<4 BPT=BPT_$E("0000",1,4-$L(BPT))
"RTN","PSOBORP3",396,0)
 S BPH=$E(BPT,1,2),BPM=$E(BPT,3,4)
"RTN","PSOBORP3",397,0)
 S BPAP="AM" I BPH>12 S BPH=BPH-12,BPAP="PM" S:$L(BPH)<2 BPH="0"_BPH
"RTN","PSOBORP3",398,0)
 I BPT S:'BPH BPH=12 S DATE=DATE_" "_BPH_":"_BPM_BPAP
"RTN","PSOBORP3",399,0)
 Q $G(DATE)
"RTN","PSOBORP3",400,0)
 ;
"RTN","PSOBORP3",401,0)
 ;
"RTN","PSOBORP3",402,0)
ELIG() ; eligibility for header
"RTN","PSOBORP3",403,0)
 Q $S(PSOSEL("ELIG_TYPE")="T":"TRICARE",PSOSEL("ELIG_TYPE")="C":"CHAMPVA",1:"ALL")
"RTN","PSOBORP3",404,0)
 ;
"RTN","PSOBPSSL")
0^17^B90979558
"RTN","PSOBPSSL",1,0)
PSOBPSSL ;ALB/EWL - ePharmacy Site Parameters Definition ;03/20/2013
"RTN","PSOBPSSL",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**421,427**;DEC 1997;Build 21
"RTN","PSOBPSSL",3,0)
 ;
"RTN","PSOBPSSL",4,0)
 ; This routine is called from PSOBPSSP from the DP - Display Site Parameters 
"RTN","PSOBPSSL",5,0)
 ; action item.  That is the only way this routine should be entered.
"RTN","PSOBPSSL",6,0)
 ;
"RTN","PSOBPSSL",7,0)
 ; ICR Calls 
"RTN","PSOBPSSL",8,0)
 ;   ICR  Type       Description
"RTN","PSOBPSSL",9,0)
 ; -----  ---------  ---------------------------
"RTN","PSOBPSSL",10,0)
 ; n/a
"RTN","PSOBPSSL",11,0)
 ;
"RTN","PSOBPSSL",12,0)
 ; Other Calls
"RTN","PSOBPSSL",13,0)
 ; ----------------
"RTN","PSOBPSSL",14,0)
 ; DIV^PSOBPSSP
"RTN","PSOBPSSL",15,0)
 Q
"RTN","PSOBPSSL",16,0)
EN ; Entry point for PSO EPHARM PARAMS LIST List Manager screen
"RTN","PSOBPSSL",17,0)
 ;
"RTN","PSOBPSSL",18,0)
 ; PSODIV is the IEN of the initially selected division. Set by ^PSOLSET.
"RTN","PSOBPSSL",19,0)
 ;     Normally not used, only used if this routine is called directly.
"RTN","PSOBPSSL",20,0)
 ; PSODIVS is an array which will contain the divisions to be listed
"RTN","PSOBPSSL",21,0)
 ; PSODIVS will be formatted as follows:
"RTN","PSOBPSSL",22,0)
 ;     The root - PSODIVS will either be a null or contain "ALL"
"RTN","PSOBPSSL",23,0)
 ;     PSODIVS(#) - the # is the ien in file 52.86
"RTN","PSOBPSSL",24,0)
 ;          PSODIVS(#) - value --> IEN^SiteName - IEN from file 52.86
"RTN","PSOBPSSL",25,0)
 ;
"RTN","PSOBPSSL",26,0)
 N PSODIV,PSODIVS
"RTN","PSOBPSSL",27,0)
 ;
"RTN","PSOBPSSL",28,0)
 ; Launch the list manager screen
"RTN","PSOBPSSL",29,0)
 D EN^VALM("PSO EPHARM SITE PARAMS LIST")
"RTN","PSOBPSSL",30,0)
 G EXIT
"RTN","PSOBPSSL",31,0)
 ;
"RTN","PSOBPSSL",32,0)
HDR ; -- header code -- PSO EPHARM SITE PARAMS LIST
"RTN","PSOBPSSL",33,0)
 S VALMHDR(1)=$$SITES(.PSODIVS)
"RTN","PSOBPSSL",34,0)
 S VALMHDR(1)="Pharmacy Division"_$S(VALMHDR(1)[", ":"s: ",1:": ")_VALMHDR(1)
"RTN","PSOBPSSL",35,0)
 I $L(VALMHDR(1))>80 S $E(VALMHDR(1),78,999)="..."
"RTN","PSOBPSSL",36,0)
 S VALMHDR(2)="Site parameter settings for one or more Pharmacy Divisions"
"RTN","PSOBPSSL",37,0)
 Q
"RTN","PSOBPSSL",38,0)
 ;
"RTN","PSOBPSSL",39,0)
INIT ; -- init variables and list array -- PSO EPHARM SITE PARAMS LIST
"RTN","PSOBPSSL",40,0)
 ; PSODIVS is an array which will contain the divisions to be listed (see EN tag)
"RTN","PSOBPSSL",41,0)
 ; LINECT - keeps track of the line count in the display list
"RTN","PSOBPSSL",42,0)
 ; IEN - IEN of file 52.86 (Site Parameters)
"RTN","PSOBPSSL",43,0)
 ; LMARRAY - List Manager Array Name
"RTN","PSOBPSSL",44,0)
 N LMARRAY,IEN,LINECT
"RTN","PSOBPSSL",45,0)
 ;
"RTN","PSOBPSSL",46,0)
 ; Initialize the Line Counter
"RTN","PSOBPSSL",47,0)
 S LINECT=0
"RTN","PSOBPSSL",48,0)
 ;
"RTN","PSOBPSSL",49,0)
 ; Get list of sites to display
"RTN","PSOBPSSL",50,0)
 W ! D SITEPICK(.PSODIVS)
"RTN","PSOBPSSL",51,0)
 ;
"RTN","PSOBPSSL",52,0)
 ; Quit if no sites selected
"RTN","PSOBPSSL",53,0)
 I ('$D(PSODIVS))!($G(PSODIVS)="^") S VALMQUIT=1 Q
"RTN","PSOBPSSL",54,0)
 D CLEAN^VALM10
"RTN","PSOBPSSL",55,0)
 ;
"RTN","PSOBPSSL",56,0)
 ; This is the List Manager Array
"RTN","PSOBPSSL",57,0)
 S LMARRAY=$NA(^TMP("PSOBPSSL",$J)) K @LMARRAY
"RTN","PSOBPSSL",58,0)
 ;
"RTN","PSOBPSSL",59,0)
 ; Process if one or more but not "ALL" sites have been selected
"RTN","PSOBPSSL",60,0)
 I $G(PSODIVS)'="ALL" D
"RTN","PSOBPSSL",61,0)
 . S IEN=0 F  S IEN=$O(PSODIVS(IEN)) Q:'IEN  D GETDATA(IEN,LMARRAY,.LINECT)
"RTN","PSOBPSSL",62,0)
 ;
"RTN","PSOBPSSL",63,0)
 ; Process if "ALL" sites have been selected
"RTN","PSOBPSSL",64,0)
 I $G(PSODIVS)="ALL" D
"RTN","PSOBPSSL",65,0)
 . S IEN=0 F  S IEN=$O(^PS(52.86,IEN)) Q:'IEN  D GETDATA(IEN,LMARRAY,.LINECT)
"RTN","PSOBPSSL",66,0)
 S VALMCNT=LINECT
"RTN","PSOBPSSL",67,0)
 Q
"RTN","PSOBPSSL",68,0)
HELP ; -- help code -- PSO EPHARM MULTI SITE PARAMS
"RTN","PSOBPSSL",69,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","PSOBPSSL",70,0)
 Q
"RTN","PSOBPSSL",71,0)
 ;
"RTN","PSOBPSSL",72,0)
EXPND ; -- expand code
"RTN","PSOBPSSL",73,0)
 Q
"RTN","PSOBPSSL",74,0)
 ;
"RTN","PSOBPSSL",75,0)
EXIT ; -- exit code
"RTN","PSOBPSSL",76,0)
 K PSODIVS,^TMP("PSOBPSSL",$J)
"RTN","PSOBPSSL",77,0)
 Q
"RTN","PSOBPSSL",78,0)
 ;
"RTN","PSOBPSSL",79,0)
SITEPICK(DIVS) ; Get the list of sites to display
"RTN","PSOBPSSL",80,0)
 ; Cloned from SEL^PSOREJU1 with changes for Site Parameter List
"RTN","PSOBPSSL",81,0)
 ;
"RTN","PSOBPSSL",82,0)
 ; Input Parameter
"RTN","PSOBPSSL",83,0)
 ; DIVS - is passed by reference and will hold the set of divisions to process
"RTN","PSOBPSSL",84,0)
 ;
"RTN","PSOBPSSL",85,0)
 ; Local Variables
"RTN","PSOBPSSL",86,0)
 ; QT - used to control when to exit 
"RTN","PSOBPSSL",87,0)
 N QT
"RTN","PSOBPSSL",88,0)
 ;
"RTN","PSOBPSSL",89,0)
 ; Variables used by ^DIC
"RTN","PSOBPSSL",90,0)
 N DIC,DTOUT,DUOUT,Y,X
"RTN","PSOBPSSL",91,0)
 ;
"RTN","PSOBPSSL",92,0)
 ; Instructional message
"RTN","PSOBPSSL",93,0)
 W !!,"You may select a single or multiple Divisions,"
"RTN","PSOBPSSL",94,0)
 W !,"or enter ^ALL to select all Divisions.",!
"RTN","PSOBPSSL",95,0)
 ;
"RTN","PSOBPSSL",96,0)
 ; Select the divisions to display from 52.86
"RTN","PSOBPSSL",97,0)
 K DIVS S DIC="^PS(52.86,",DIC(0)="QEZAM"
"RTN","PSOBPSSL",98,0)
 S DIC("A")="Select a Division to display: "
"RTN","PSOBPSSL",99,0)
 F  D ^DIC Q:X=""  D  Q:$G(QT)
"RTN","PSOBPSSL",100,0)
 . I $$UP^XLFSTR(X)="^ALL" K DIVS S DIVS="ALL",QT=1 Q
"RTN","PSOBPSSL",101,0)
 . I $G(DTOUT)!$G(DUOUT) K DIVS S DIVS="^",QT=1 Q
"RTN","PSOBPSSL",102,0)
 . W "   ",$P(Y,"^",2),$S($D(DIVS(+Y)):"       (already selected)",1:"")
"RTN","PSOBPSSL",103,0)
 . W ! S DIVS(+Y)="",DIC("A")="ANOTHER ONE: " K DIC("B")
"RTN","PSOBPSSL",104,0)
 Q
"RTN","PSOBPSSL",105,0)
 ;
"RTN","PSOBPSSL",106,0)
SITES(DIVS) ; - Returns the list of selected Pharmacy Divisions
"RTN","PSOBPSSL",107,0)
 N SITE,SITES,NAME,PSITE S SITES=""
"RTN","PSOBPSSL",108,0)
 ; DIVS - array identifying the sites being processed.
"RTN","PSOBPSSL",109,0)
 ; SITE - individual PS site numbers IN FILE 52.86
"RTN","PSOBPSSL",110,0)
 ; NAME - division name from file 4
"RTN","PSOBPSSL",111,0)
 ; SITES - comma delimited site names
"RTN","PSOBPSSL",112,0)
 ;
"RTN","PSOBPSSL",113,0)
 ; Create a string of ^ delimited division names.
"RTN","PSOBPSSL",114,0)
 I '$D(DIVS) Q ""
"RTN","PSOBPSSL",115,0)
 I $G(DIVS)="ALL" Q "ALL"
"RTN","PSOBPSSL",116,0)
 ;
"RTN","PSOBPSSL",117,0)
 ; Create a string of ^ delimited division names.
"RTN","PSOBPSSL",118,0)
 S SITE=0,SITES="" F  S SITE=$O(DIVS(SITE)) Q:'SITE  D
"RTN","PSOBPSSL",119,0)
 . S NAME=$$GET1^DIQ(52.86,SITE_",",.01,"E")
"RTN","PSOBPSSL",120,0)
 . S DIVS(SITE)=SITE_U_NAME
"RTN","PSOBPSSL",121,0)
 . S SITES=SITES_$S(SITES]"":", ",1:"")_NAME
"RTN","PSOBPSSL",122,0)
 Q SITES
"RTN","PSOBPSSL",123,0)
 ;
"RTN","PSOBPSSL",124,0)
GETDATA(IEN,DATA,NXTLINE) ; Adds and formats data from one Pharmacy Division
"RTN","PSOBPSSL",125,0)
 ; This may be called multiple times when displaying multiple divisions
"RTN","PSOBPSSL",126,0)
 ; This is called by PSOBPSSP
"RTN","PSOBPSSL",127,0)
 ;
"RTN","PSOBPSSL",128,0)
 ; INPUT PARAMETERS
"RTN","PSOBPSSL",129,0)
 ; IEN - Site IEN from 52.86
"RTN","PSOBPSSL",130,0)
 ; DATA - List Manager Array name
"RTN","PSOBPSSL",131,0)
 ; NXTLINE - output parameter - returns line counter/number of lines in list
"RTN","PSOBPSSL",132,0)
 ;
"RTN","PSOBPSSL",133,0)
 ; check parameters
"RTN","PSOBPSSL",134,0)
 I '$G(IEN) Q 0 ; No parent division passed
"RTN","PSOBPSSL",135,0)
 I $L($G(DATA))<1 Q 0 ; No array passed to the routine
"RTN","PSOBPSSL",136,0)
 I '$D(NXTLINE) Q 0 ; No line number passed must be >= 0
"RTN","PSOBPSSL",137,0)
 ;
"RTN","PSOBPSSL",138,0)
 ; LOCAL VARIABLES
"RTN","PSOBPSSL",139,0)
 ; PSOI - IEN/LOOP CONTROL while looping through array
"RTN","PSOBPSSL",140,0)
 ; GETS - Temp array for GETS^DIQ results
"RTN","PSOBPSSL",141,0)
 ; WLSTDAYS - Days to remain on worklist
"RTN","PSOBPSSL",142,0)
 ; AUTOSEND - Auto send - yes/no
"RTN","PSOBPSSL",143,0)
 ; REJEXPL - Reject code explanations text
"RTN","PSOBPSSL",144,0)
 ; THRESHLD - Threshold amount for fill prevention reject codes
"RTN","PSOBPSSL",145,0)
 ; GETS - array for output from LIST^DIC and processed codes
"RTN","PSOBPSSL",146,0)
 ; IORVON & IORVOFF are Kernel Video Variables used for List Manager formatting
"RTN","PSOBPSSL",147,0)
 ;
"RTN","PSOBPSSL",148,0)
 N PSOI,GETS,WLSTDAYS,PAUSE,CODE,AUTOSEND,REJEXPL,THRESHLD,SITE
"RTN","PSOBPSSL",149,0)
 ;
"RTN","PSOBPSSL",150,0)
 ; Get the high level site parameters
"RTN","PSOBPSSL",151,0)
 S SITE=$$GET1^DIQ(52.86,IEN_",",.01)
"RTN","PSOBPSSL",152,0)
 ; Site header
"RTN","PSOBPSSL",153,0)
 I NXTLINE'=0 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)=""
"RTN","PSOBPSSL",154,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="Pharmacy Division: "_$G(SITE)
"RTN","PSOBPSSL",155,0)
 D CNTRL^VALM10(NXTLINE,1,80,IORVON,IORVOFF)
"RTN","PSOBPSSL",156,0)
 ;
"RTN","PSOBPSSL",157,0)
 ; Display General Parameters
"RTN","PSOBPSSL",158,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  General Parameters"
"RTN","PSOBPSSL",159,0)
 D CNTRL^VALM10(NXTLINE,3,18,IOUON,IOUOFF)
"RTN","PSOBPSSL",160,0)
 ;
"RTN","PSOBPSSL",161,0)
 ; Get the site worklist days
"RTN","PSOBPSSL",162,0)
 S WLSTDAYS=$$GET1^DIQ(52.86,IEN_",",4)
"RTN","PSOBPSSL",163,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  Reject Worklist Days: "_$G(WLSTDAYS)
"RTN","PSOBPSSL",164,0)
 ;
"RTN","PSOBPSSL",165,0)
 ; Get the ePharmacy Response Pause
"RTN","PSOBPSSL",166,0)
 S PAUSE=$$GET1^DIQ(52.86,IEN_",",6)
"RTN","PSOBPSSL",167,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  ePharmacy Response Pause: "_$G(PAUSE)
"RTN","PSOBPSSL",168,0)
 ;
"RTN","PSOBPSSL",169,0)
 ; Process the site transfer reject codes
"RTN","PSOBPSSL",170,0)
 ;
"RTN","PSOBPSSL",171,0)
 ; create header for transfer reject code section
"RTN","PSOBPSSL",172,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)=""
"RTN","PSOBPSSL",173,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  Transfer Reject Codes"
"RTN","PSOBPSSL",174,0)
 D CNTRL^VALM10(NXTLINE,3,21,IOUON,IOUOFF)
"RTN","PSOBPSSL",175,0)
 ;
"RTN","PSOBPSSL",176,0)
 ; Get the transfer reject codes
"RTN","PSOBPSSL",177,0)
 K GETS D LIST^DIC(52.8651,","_IEN_",","@;.01IE;1",,,,,,,,"GETS")
"RTN","PSOBPSSL",178,0)
 ;
"RTN","PSOBPSSL",179,0)
 ; create sub-header for transfer reject code section
"RTN","PSOBPSSL",180,0)
 I $D(GETS) D
"RTN","PSOBPSSL",181,0)
 . S NXTLINE=NXTLINE+1
"RTN","PSOBPSSL",182,0)
 . S @DATA@(NXTLINE,0)="  Code  Description                                                   Auto-Send"
"RTN","PSOBPSSL",183,0)
 . S NXTLINE=NXTLINE+1
"RTN","PSOBPSSL",184,0)
 . S @DATA@(NXTLINE,0)="  ----  ------------------------------------------------------------  ---------"
"RTN","PSOBPSSL",185,0)
 . ;
"RTN","PSOBPSSL",186,0)
 . ; Sort the output by external code
"RTN","PSOBPSSL",187,0)
 . S PSOI=0
"RTN","PSOBPSSL",188,0)
 . F  S PSOI=$O(GETS("DILIST","ID",PSOI)) Q:PSOI=""  D
"RTN","PSOBPSSL",189,0)
 . . ; Parse output from LIST^DIC and add to local array GETS as follows:
"RTN","PSOBPSSL",190,0)
 . . ;      GETS({external code})={external AUTO SEND}^{internal code}
"RTN","PSOBPSSL",191,0)
 . . S GETS(" "_GETS("DILIST","ID",PSOI,.01,"E"))=GETS("DILIST","ID",PSOI,1)_U_GETS("DILIST","ID",PSOI,.01,"I")
"RTN","PSOBPSSL",192,0)
 . . Q
"RTN","PSOBPSSL",193,0)
 . ; Kill the part of GETS no longer needed - from LIST^DIC
"RTN","PSOBPSSL",194,0)
 . K GETS("DILIST")
"RTN","PSOBPSSL",195,0)
 . ;
"RTN","PSOBPSSL",196,0)
 . ; process the transfer reject code body
"RTN","PSOBPSSL",197,0)
 . S PSOI="" F  S PSOI=$O(GETS(PSOI)) Q:PSOI=""  D
"RTN","PSOBPSSL",198,0)
 . . S CODE=PSOI,AUTOSEND=$P(GETS(PSOI),U,1)
"RTN","PSOBPSSL",199,0)
 . . ; Get reject explanation
"RTN","PSOBPSSL",200,0)
 . . S REJEXPL=$$GET1^DIQ(9002313.93,$P(GETS(PSOI),U,2)_",",.02)
"RTN","PSOBPSSL",201,0)
 . . ; Build the next list line
"RTN","PSOBPSSL",202,0)
 . . S NXTLINE=NXTLINE+1,$E(@DATA@(NXTLINE,0),3,6)=$J(CODE,4)
"RTN","PSOBPSSL",203,0)
 . . S $E(@DATA@(NXTLINE,0),9,68)=$E(REJEXPL,1,60)
"RTN","PSOBPSSL",204,0)
 . . S $E(@DATA@(NXTLINE,0),77,79)=$S(AUTOSEND="YES":"YES",1:" NO")
"RTN","PSOBPSSL",205,0)
 . Q
"RTN","PSOBPSSL",206,0)
 ;
"RTN","PSOBPSSL",207,0)
 ; process for no transfer reject codes
"RTN","PSOBPSSL",208,0)
 I '$D(GETS) S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  No transfer reject codes for this Pharmacy Division."
"RTN","PSOBPSSL",209,0)
 ;
"RTN","PSOBPSSL",210,0)
 ; Process the Reject Resolution Required Codes
"RTN","PSOBPSSL",211,0)
 ;
"RTN","PSOBPSSL",212,0)
 ; create header for the Reject Resolution Required Codes
"RTN","PSOBPSSL",213,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)=""
"RTN","PSOBPSSL",214,0)
 S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  Reject Resolution Required Codes"
"RTN","PSOBPSSL",215,0)
 D CNTRL^VALM10(NXTLINE,3,32,IOUON,IOUOFF)
"RTN","PSOBPSSL",216,0)
 ;
"RTN","PSOBPSSL",217,0)
 ; Get the transfer reject codes
"RTN","PSOBPSSL",218,0)
 K GETS D LIST^DIC(52.865,","_IEN_",","@;.01IE;.02",,,,,,,,"GETS")
"RTN","PSOBPSSL",219,0)
 ;
"RTN","PSOBPSSL",220,0)
 ; create sub-header for the Reject Resolution Required Codes
"RTN","PSOBPSSL",221,0)
 I $D(GETS) D
"RTN","PSOBPSSL",222,0)
 . S NXTLINE=NXTLINE+1
"RTN","PSOBPSSL",223,0)
 . S @DATA@(NXTLINE,0)="  Code  Description                                                   Threshold"
"RTN","PSOBPSSL",224,0)
 . S NXTLINE=NXTLINE+1
"RTN","PSOBPSSL",225,0)
 . S @DATA@(NXTLINE,0)="  ----  ------------------------------------------------------------  ---------"
"RTN","PSOBPSSL",226,0)
 . ;
"RTN","PSOBPSSL",227,0)
 . ; Sort the output by external code
"RTN","PSOBPSSL",228,0)
 . S PSOI=0
"RTN","PSOBPSSL",229,0)
 . F  S PSOI=$O(GETS("DILIST","ID",PSOI)) Q:PSOI=""  D
"RTN","PSOBPSSL",230,0)
 . . ; Parse output from LIST^DIC and add to local array GETS as follows:
"RTN","PSOBPSSL",231,0)
 . . ;      GETS({external code})={external DOLLAR THRESHOLD}^{internal code}
"RTN","PSOBPSSL",232,0)
 . . S GETS(" "_GETS("DILIST","ID",PSOI,.01,"E"))=GETS("DILIST","ID",PSOI,.02)_U_GETS("DILIST","ID",PSOI,.01,"I")
"RTN","PSOBPSSL",233,0)
 . . Q
"RTN","PSOBPSSL",234,0)
 . ; Kill the part of GETS no longer needed - from LIST^DIC
"RTN","PSOBPSSL",235,0)
 . K GETS("DILIST")
"RTN","PSOBPSSL",236,0)
 . ;
"RTN","PSOBPSSL",237,0)
 . ; process the Reject Resolution Required code body
"RTN","PSOBPSSL",238,0)
 . S PSOI="" F  S PSOI=$O(GETS(PSOI)) Q:PSOI=""  D
"RTN","PSOBPSSL",239,0)
 . . S CODE=PSOI,THRESHLD=$P(GETS(PSOI),U,1)
"RTN","PSOBPSSL",240,0)
 . . ; Get reject explanation
"RTN","PSOBPSSL",241,0)
 . . S REJEXPL=$$GET1^DIQ(9002313.93,$P(GETS(PSOI),U,2)_",",.02)
"RTN","PSOBPSSL",242,0)
 . . ;
"RTN","PSOBPSSL",243,0)
 . . ; Build the next list line
"RTN","PSOBPSSL",244,0)
 . . S NXTLINE=NXTLINE+1,$E(@DATA@(NXTLINE,0),3,6)=$J(CODE,4)
"RTN","PSOBPSSL",245,0)
 . . S $E(@DATA@(NXTLINE,0),9,68)=$E(REJEXPL,1,60)
"RTN","PSOBPSSL",246,0)
 . . S THRESHLD=+THRESHLD,THRESHLD=$J("$"_$FN(THRESHLD,",",0),10)
"RTN","PSOBPSSL",247,0)
 . . S $E(@DATA@(NXTLINE,0),70,79)=THRESHLD
"RTN","PSOBPSSL",248,0)
 . Q
"RTN","PSOBPSSL",249,0)
 ;
"RTN","PSOBPSSL",250,0)
 ; process for no Reject Resolution Required Codes
"RTN","PSOBPSSL",251,0)
 I '$D(GETS) S NXTLINE=NXTLINE+1,@DATA@(NXTLINE,0)="  No Reject Resolution Required Codes for this Pharmacy Division."
"RTN","PSOBPSSL",252,0)
 Q
"RTN","PSOBPSSL",253,0)
 ;
"RTN","PSOBPSSL",254,0)
TRCMSG ; Transfer Reject Informational Message (called by PSOBPSSP, which was too big)
"RTN","PSOBPSSL",255,0)
 W !!,"All transfer rejects will automatically be placed on the Third Party Payer"
"RTN","PSOBPSSL",256,0)
 W !,"Rejects - Worklist if the reject code is defined in the site parameter file"
"RTN","PSOBPSSL",257,0)
 W !,"and the AUTO SEND parameter is set to yes. The OPECC must manually transfer"
"RTN","PSOBPSSL",258,0)
 W !,"the reject if the reject code is defined in the site parameter file"
"RTN","PSOBPSSL",259,0)
 W !,"and the AUTO SEND parameter is set to no. (To be used when Pharmacy can"
"RTN","PSOBPSSL",260,0)
 W !,"possibly correct a locally filled Rx.)"
"RTN","PSOBPSSL",261,0)
 Q
"RTN","PSOBPSSL",262,0)
 ;
"RTN","PSOBPSSL",263,0)
RRRMSG ; Reject Resolution Required Informational Message (called by PSOBPSSP, which was too big)
"RTN","PSOBPSSL",264,0)
 W !!,"All Reject Resolution Required reject codes will automatically be placed"
"RTN","PSOBPSSL",265,0)
 W !,"on the Third Party Payer Rejects - Worklist. This parameter applies to"
"RTN","PSOBPSSL",266,0)
 W !,"rejects for original unreleased fills only. Prescriptions will not be filled"
"RTN","PSOBPSSL",267,0)
 W !,"until the rejects identified by the Reject Resolution parameter are resolved."
"RTN","PSOBPSSL",268,0)
 Q
"RTN","PSOBPSSP")
0^18^B308796788
"RTN","PSOBPSSP",1,0)
PSOBPSSP ;BIRM/LE - ePharmacy Site Parameters Definition ;04/28/08
"RTN","PSOBPSSP",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**289,385,421,427**;DEC 1997;Build 21
"RTN","PSOBPSSP",3,0)
 ;
"RTN","PSOBPSSP",4,0)
 ; Patch 421 replaced all logic in this module as the original 
"RTN","PSOBPSSP",5,0)
 ; screen has been replaced by a List Manager screen.
"RTN","PSOBPSSP",6,0)
 ;  
"RTN","PSOBPSSP",7,0)
 ; GETDATA^PSOBPSSP - Populates the List Manager Array
"RTN","PSOBPSSP",8,0)
 ; EN^PSOBPSSL - Site parameter lister
"RTN","PSOBPSSP",9,0)
 ;         
"RTN","PSOBPSSP",10,0)
EN ; - Prompt for ePharmacy Site Parameters
"RTN","PSOBPSSP",11,0)
 ;
"RTN","PSOBPSSP",12,0)
 ; PSODIV is the IEN of the initially selected division
"RTN","PSOBPSSP",13,0)
 ; PSOBPSDV is the IEN of the current ePharmacy division being edited.
"RTN","PSOBPSSP",14,0)
 ; PSOSITE & PSOPAR are populated by the call to ^PSOLSET in DIV
"RTN","PSOBPSSP",15,0)
 ;
"RTN","PSOBPSSP",16,0)
 ; LOCK THE SITE PARAMETER FILE
"RTN","PSOBPSSP",17,0)
 L +^PS(52.86,"LOCK"):0
"RTN","PSOBPSSP",18,0)
 I '$T D  Q
"RTN","PSOBPSSP",19,0)
 . W !!?2,"Sorry, another user is currently using the ePharmacy Site Parameters option."
"RTN","PSOBPSSP",20,0)
 . W !?2,"Please try again later."
"RTN","PSOBPSSP",21,0)
 . D PAUSE^VALM1
"RTN","PSOBPSSP",22,0)
 . Q
"RTN","PSOBPSSP",23,0)
 ;
"RTN","PSOBPSSP",24,0)
 N PSODIV,PSOBPSDV,PSOSITE,PSOPAR
"RTN","PSOBPSSP",25,0)
 D DIV
"RTN","PSOBPSSP",26,0)
 I '$G(PSOSITE) L -^PS(52.86,"LOCK") Q
"RTN","PSOBPSSP",27,0)
 ;
"RTN","PSOBPSSP",28,0)
 ; Informational Messages
"RTN","PSOBPSSP",29,0)
 D TRCMSG^PSOBPSSL,RRRMSG^PSOBPSSL W !
"RTN","PSOBPSSP",30,0)
 ;
"RTN","PSOBPSSP",31,0)
 D EN^VALM("PSO EPHARM SITE PARAMS")
"RTN","PSOBPSSP",32,0)
 L -^PS(52.86,"LOCK")       ; option level unlock
"RTN","PSOBPSSP",33,0)
 Q
"RTN","PSOBPSSP",34,0)
 ;
"RTN","PSOBPSSP",35,0)
HDR ; -- header code -- PSO EPHARM SITE PARAMS
"RTN","PSOBPSSP",36,0)
 S VALMHDR(1)="Pharmacy Division: "_$$GET1^DIQ(52.86,PSOBPSDV_",",.01)
"RTN","PSOBPSSP",37,0)
 Q
"RTN","PSOBPSSP",38,0)
 ;
"RTN","PSOBPSSP",39,0)
INIT ; -- init variables and list array -- PSO EPHARM SITE PARAMS
"RTN","PSOBPSSP",40,0)
 ; PSOBPSDV is the IEN of the current division being edited. (NEWed in EN)
"RTN","PSOBPSSP",41,0)
 ; Get the division number
"RTN","PSOBPSSP",42,0)
 K PSOBPSDV D GETDIV(.PSOBPSDV)
"RTN","PSOBPSSP",43,0)
 I '$D(PSOBPSDV) S VALMQUIT=1 Q
"RTN","PSOBPSSP",44,0)
 D RBUILD
"RTN","PSOBPSSP",45,0)
 Q
"RTN","PSOBPSSP",46,0)
 ;
"RTN","PSOBPSSP",47,0)
HELP ; -- help code -- PSO EPHARM SITE PARAMS
"RTN","PSOBPSSP",48,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","PSOBPSSP",49,0)
 Q
"RTN","PSOBPSSP",50,0)
 ;
"RTN","PSOBPSSP",51,0)
EXIT ; -- exit code
"RTN","PSOBPSSP",52,0)
 ;
"RTN","PSOBPSSP",53,0)
 K PSOBPSDV,PSODIV,^TMP("PSOBPSSP",$J)
"RTN","PSOBPSSP",54,0)
 Q
"RTN","PSOBPSSP",55,0)
 ;
"RTN","PSOBPSSP",56,0)
EXPND ; -- expand code
"RTN","PSOBPSSP",57,0)
 Q
"RTN","PSOBPSSP",58,0)
 ;
"RTN","PSOBPSSP",59,0)
GETDIV(DIV) ; Gets a single division.  If it does not exist, the new division is created
"RTN","PSOBPSSP",60,0)
 ; and the user is prompted for worklist days.
"RTN","PSOBPSSP",61,0)
 ; Called by INIT on entry and when Change Division action is selected
"RTN","PSOBPSSP",62,0)
 ; DIV - ePharmacy site parameter IEN - Parameters for division pointed to in .01 field
"RTN","PSOBPSSP",63,0)
 ;
"RTN","PSOBPSSP",64,0)
 N DIC,DTOUT,DUOUT,DLAYGO,X,Y ; Variables for ^DIC
"RTN","PSOBPSSP",65,0)
 S DIC("A")="Select a Pharmacy Division: " S DIC=52.86,DIC(0)="AEBQL",DLAYGO=52.86 D ^DIC
"RTN","PSOBPSSP",66,0)
 Q:($G(DTOUT))!($D(DUOUT)!(Y<0))
"RTN","PSOBPSSP",67,0)
 S DIV=$P(Y,U,1)
"RTN","PSOBPSSP",68,0)
 Q
"RTN","PSOBPSSP",69,0)
 ;
"RTN","PSOBPSSP",70,0)
BLDLIST(DIV) ; Rebuilds the List Manager array
"RTN","PSOBPSSP",71,0)
 ;
"RTN","PSOBPSSP",72,0)
 ; DIV is the IEN of the current division being edited. (NEWed in EN)
"RTN","PSOBPSSP",73,0)
 ; LINECT - keeps track of the line count in the display list
"RTN","PSOBPSSP",74,0)
 ; LMARRAY - List Manager Array Name
"RTN","PSOBPSSP",75,0)
 ;
"RTN","PSOBPSSP",76,0)
 N LMARRAY,LINECT
"RTN","PSOBPSSP",77,0)
 ;
"RTN","PSOBPSSP",78,0)
 ; Initialize the Line Counter
"RTN","PSOBPSSP",79,0)
 S LINECT=0
"RTN","PSOBPSSP",80,0)
 ;
"RTN","PSOBPSSP",81,0)
 ; This is the List Manager Array
"RTN","PSOBPSSP",82,0)
 D CLEAN^VALM10
"RTN","PSOBPSSP",83,0)
 S LMARRAY=$NA(^TMP("PSOBPSSP",$J)) K @LMARRAY
"RTN","PSOBPSSP",84,0)
 ;
"RTN","PSOBPSSP",85,0)
 ; Get the current data for the selected division
"RTN","PSOBPSSP",86,0)
 D GETDATA^PSOBPSSL(DIV,LMARRAY,.LINECT)
"RTN","PSOBPSSP",87,0)
 S VALMCNT=LINECT
"RTN","PSOBPSSP",88,0)
 Q
"RTN","PSOBPSSP",89,0)
 ;
"RTN","PSOBPSSP",90,0)
DIV ; Establish the PSO Site information - Also called by PSOBPSSL Division/Site selection
"RTN","PSOBPSSP",91,0)
 ;
"RTN","PSOBPSSP",92,0)
 ; PSOSITE and PSOPAR are set by ^PSOLSET - Declared in EN of calling routines
"RTN","PSOBPSSP",93,0)
 ;
"RTN","PSOBPSSP",94,0)
 I '$G(PSOSITE) D ^PSOLSET I '$D(PSOPAR) W $C(7),!!,"Pharmacy Division Must be Selected!",! Q
"RTN","PSOBPSSP",95,0)
 W !!
"RTN","PSOBPSSP",96,0)
 Q
"RTN","PSOBPSSP",97,0)
 ;
"RTN","PSOBPSSP",98,0)
CPYSITES(DIVS,CTR,CDIV,SCR) ; Procedure for picking sites for the copy function.
"RTN","PSOBPSSP",99,0)
 ; Cloned from SEL^PSOREJU1 with changes for Site Parameter Copy action
"RTN","PSOBPSSP",100,0)
 ; 
"RTN","PSOBPSSP",101,0)
 ; Input Parameters
"RTN","PSOBPSSP",102,0)
 ; DIVS - passed by reference and will hold the divisions to process
"RTN","PSOBPSSP",103,0)
 ; CTR - passed by reference, returns the number of divisions picked.
"RTN","PSOBPSSP",104,0)
 ; CDIV - source site parameter pharmacy division IEN (ptr to file 59).
"RTN","PSOBPSSP",105,0)
 ; SCR - Screen to prevent source division from being selected.
"RTN","PSOBPSSP",106,0)
 ;
"RTN","PSOBPSSP",107,0)
 ; Variables used by ^DIC
"RTN","PSOBPSSP",108,0)
 N DIC,DTOUT,DUOUT,Y,X
"RTN","PSOBPSSP",109,0)
 ;
"RTN","PSOBPSSP",110,0)
 ; Local Variables
"RTN","PSOBPSSP",111,0)
 ; PSOI - Pharmacy IEN from file 59
"RTN","PSOBPSSP",112,0)
 ; QT - used to control when to exit
"RTN","PSOBPSSP",113,0)
 ; CTR -counts the number of sites selected 
"RTN","PSOBPSSP",114,0)
 N PSOI,QT
"RTN","PSOBPSSP",115,0)
 ;
"RTN","PSOBPSSP",116,0)
 S (QT,CTR)=0
"RTN","PSOBPSSP",117,0)
 ;
"RTN","PSOBPSSP",118,0)
 ; Instructional message
"RTN","PSOBPSSP",119,0)
 W !,"You may select a single or multiple Pharmacy Divisions,"
"RTN","PSOBPSSP",120,0)
 W !,"or enter ^ALL to select all Pharmacy Divisions.",!
"RTN","PSOBPSSP",121,0)
 ;
"RTN","PSOBPSSP",122,0)
 ; Set up ^DIC call
"RTN","PSOBPSSP",123,0)
 K DIVS S DIC="^PS(59,",DIC(0)="QEZAM"
"RTN","PSOBPSSP",124,0)
 S DIC("A")="Select a Pharmacy Division to be overwritten: "
"RTN","PSOBPSSP",125,0)
 S DIC("S")=$G(SCR)
"RTN","PSOBPSSP",126,0)
 ; 
"RTN","PSOBPSSP",127,0)
 ; Loop through Selections
"RTN","PSOBPSSP",128,0)
 F  D ^DIC Q:X=""!QT  D  Q:QT
"RTN","PSOBPSSP",129,0)
 . ;
"RTN","PSOBPSSP",130,0)
 . ; Special processing if ^ALL was entered
"RTN","PSOBPSSP",131,0)
 . I $$UP^XLFSTR(X)="^ALL" K DIVS S CTR=0,DIVS="ALL",QT=1 D  Q
"RTN","PSOBPSSP",132,0)
 . . S PSOI=0 F  S PSOI=$O(^PS(59,PSOI)) Q:'PSOI  D:PSOI'=CDIV
"RTN","PSOBPSSP",133,0)
 . . . S CTR=CTR+1,DIVS(PSOI)=$$GET1^DIQ(59,PSOI,.01)
"RTN","PSOBPSSP",134,0)
 . ;
"RTN","PSOBPSSP",135,0)
 . ; Quit if timeout or a ^
"RTN","PSOBPSSP",136,0)
 . I $G(DTOUT)!$G(DUOUT) K DIVS S DIVS="^",QT=1 Q
"RTN","PSOBPSSP",137,0)
 . ;
"RTN","PSOBPSSP",138,0)
 . ; do not save if the source division is picked
"RTN","PSOBPSSP",139,0)
 . I +Y=CDIV W !,"The source Pharmacy Division cannot be copied to itself."
"RTN","PSOBPSSP",140,0)
 . ;
"RTN","PSOBPSSP",141,0)
 . ; Do not allow duplicate selections
"RTN","PSOBPSSP",142,0)
 . I +Y'=CDIV,$D(DIVS(+Y)) W $P(Y,U,2)_" is already selected." Q
"RTN","PSOBPSSP",143,0)
 . ;
"RTN","PSOBPSSP",144,0)
 . ; Processing for selected divisions
"RTN","PSOBPSSP",145,0)
 . S DIVS(+Y)=$P(Y,U,2),CTR=CTR+1
"RTN","PSOBPSSP",146,0)
 . ;
"RTN","PSOBPSSP",147,0)
 . ; prompt for another division
"RTN","PSOBPSSP",148,0)
 . W ! S DIC("A")="ANOTHER ONE: " K DIC("B")
"RTN","PSOBPSSP",149,0)
 . Q
"RTN","PSOBPSSP",150,0)
 ;
"RTN","PSOBPSSP",151,0)
 I '$D(DIVS) S DIVS="^"
"RTN","PSOBPSSP",152,0)
 Q
"RTN","PSOBPSSP",153,0)
 ;
"RTN","PSOBPSSP",154,0)
COPYSP ; Action for CP Copy Parameters
"RTN","PSOBPSSP",155,0)
 ; From EN
"RTN","PSOBPSSP",156,0)
 ; PSOBPSDV - source site parameter IEN of 52.86 - defined in EN
"RTN","PSOBPSSP",157,0)
 ;
"RTN","PSOBPSSP",158,0)
 ; Local Variables
"RTN","PSOBPSSP",159,0)
 ; CDIV - current site parameter division to copy to
"RTN","PSOBPSSP",160,0)
 ; CPDIV - source site parameter pharmacy division IEN (ptr to file 59)
"RTN","PSOBPSSP",161,0)
 ; CPYDIVS - array pharmacy divisions where to copy parameters
"RTN","PSOBPSSP",162,0)
 ;     NOTE: The subscripts for CPYDIVS will be the selected IENS from file 59
"RTN","PSOBPSSP",163,0)
 ; CPYFDA - FDA array used in UPDATE^DIE calls
"RTN","PSOBPSSP",164,0)
 ; CPNAME - source site parameter pharmacy division name from file 59
"RTN","PSOBPSSP",165,0)
 ; DIVCT -  holds the return value of the number so sites picked when CPYSITES is called
"RTN","PSOBPSSP",166,0)
 ; IROOT - Returns new IEN after UPDATE^DIE
"RTN","PSOBPSSP",167,0)
 ; PARAMS - local array to hold the parameters from the source site
"RTN","PSOBPSSP",168,0)
 ; PSOI & PSOJ - loop counters
"RTN","PSOBPSSP",169,0)
 N CDIV,CPDIV,CPYFDA,CPYDIVS,CPNAME,DIVCT,IROOT,PARAMS,PSOI,PSOJ
"RTN","PSOBPSSP",170,0)
 ;
"RTN","PSOBPSSP",171,0)
 ; Used by ^DIK
"RTN","PSOBPSSP",172,0)
 N DIK,DA
"RTN","PSOBPSSP",173,0)
 ;
"RTN","PSOBPSSP",174,0)
 ; Used by ^DIR
"RTN","PSOBPSSP",175,0)
 N DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","PSOBPSSP",176,0)
 ;
"RTN","PSOBPSSP",177,0)
 ; Set Full Screen mode
"RTN","PSOBPSSP",178,0)
 D FULL^VALM1
"RTN","PSOBPSSP",179,0)
 ;
"RTN","PSOBPSSP",180,0)
 ; Get the current ePharmacy Site Parameter IEN and division name
"RTN","PSOBPSSP",181,0)
 S CPDIV=$$GET1^DIQ(52.86,PSOBPSDV_",",.01,"I")
"RTN","PSOBPSSP",182,0)
 S CPNAME=$$GET1^DIQ(52.86,PSOBPSDV_",",.01,"E")
"RTN","PSOBPSSP",183,0)
 ;
"RTN","PSOBPSSP",184,0)
 ; FIRST PART OF INSTRUCTION MESSAGE
"RTN","PSOBPSSP",185,0)
 W !!,"The parameters will be copied from "_CPNAME_" Division.",!
"RTN","PSOBPSSP",186,0)
 W !,"Select the Pharmacy Division(s) to overwrite."
"RTN","PSOBPSSP",187,0)
 ;
"RTN","PSOBPSSP",188,0)
 ; Select the desired divisions where to copy parameters
"RTN","PSOBPSSP",189,0)
 ;    The screen value ("I $QS($NA(^(0)),2)'="_CPDIV) will
"RTN","PSOBPSSP",190,0)
 ;    eliminate the source division from the copy to choices
"RTN","PSOBPSSP",191,0)
 D CPYSITES(.CPYDIVS,.DIVCT,CPDIV,"I $QS($NA(^(0)),2)'="_CPDIV)
"RTN","PSOBPSSP",192,0)
 ;
"RTN","PSOBPSSP",193,0)
 ; Quit if no divisions selected
"RTN","PSOBPSSP",194,0)
 I $D(CPYDIVS)<10!(+$G(DIVCT)=0) G EXITCPY
"RTN","PSOBPSSP",195,0)
 ;
"RTN","PSOBPSSP",196,0)
 ; Are you sure code
"RTN","PSOBPSSP",197,0)
 ;
"RTN","PSOBPSSP",198,0)
 ; Get and display current pharmacy name
"RTN","PSOBPSSP",199,0)
 S CPNAME=$$GET1^DIQ(52.86,PSOBPSDV_",",.01)
"RTN","PSOBPSSP",200,0)
 W !!,"The parameters from Pharmacy Division "_CPNAME
"RTN","PSOBPSSP",201,0)
 W !,"will overwrite the parameters in Pharmacy Division"_$S(DIVCT>1:"s:",1:":")
"RTN","PSOBPSSP",202,0)
 ;
"RTN","PSOBPSSP",203,0)
 ; Loop through all the divisions returned by CPYSITES and display their names
"RTN","PSOBPSSP",204,0)
 S PSOI=0 W ! F  S PSOI=$O(CPYDIVS(PSOI)) Q:'PSOI  W !,CPYDIVS(PSOI)
"RTN","PSOBPSSP",205,0)
 ;
"RTN","PSOBPSSP",206,0)
 ; Are you sure code
"RTN","PSOBPSSP",207,0)
 W !! S DIR(0)="Y",DIR("A")="Do you want to continue",DIR("B")="NO" D ^DIR
"RTN","PSOBPSSP",208,0)
 I ('Y)!($G(DUOUT))!($G(DTOUT)) G EXITCPY
"RTN","PSOBPSSP",209,0)
 ;
"RTN","PSOBPSSP",210,0)
 ; Load the source division parameters
"RTN","PSOBPSSP",211,0)
 D GETS^DIQ(52.86,PSOBPSDV_",","**","I","PARAMS")
"RTN","PSOBPSSP",212,0)
 ; Copy the division settings (except user updated by and date/times - these are triggered)
"RTN","PSOBPSSP",213,0)
 S PSOI=0 F  S PSOI=$O(CPYDIVS(PSOI)) Q:'PSOI  D
"RTN","PSOBPSSP",214,0)
 . ;
"RTN","PSOBPSSP",215,0)
 . ; If the parameters exist for this division, delete them
"RTN","PSOBPSSP",216,0)
 . S CDIV=0,CDIV=$O(^PS(52.86,"B",PSOI,CDIV)) ; Check B index for pharmacy division
"RTN","PSOBPSSP",217,0)
 . I CDIV S DA=CDIV,DIK="^PS(52.86," D ^DIK ; Delete parameters if they exist
"RTN","PSOBPSSP",218,0)
 . ;
"RTN","PSOBPSSP",219,0)
 . ; Create the FDA and file the general parameters
"RTN","PSOBPSSP",220,0)
 . K CPYFDA
"RTN","PSOBPSSP",221,0)
 . S CPYFDA(52.86,"+1,",.01)=PSOI
"RTN","PSOBPSSP",222,0)
 . S CPYFDA(52.86,"+1,",4)=+$G(PARAMS(52.86,PSOBPSDV_",",4,"I"))
"RTN","PSOBPSSP",223,0)
 . K IROOT D UPDATE^DIE(,"CPYFDA","IROOT") S CDIV=IROOT(1)
"RTN","PSOBPSSP",224,0)
 . ;
"RTN","PSOBPSSP",225,0)
 . ; Loop through and copy the transfer reject codes
"RTN","PSOBPSSP",226,0)
 . ; Create the FDA and UPDATE the subfile 52.8651
"RTN","PSOBPSSP",227,0)
 . I $D(PARAMS(52.8651)) S PSOJ=0 F  S PSOJ=$O(PARAMS(52.8651,PSOJ)) Q:'PSOJ  D
"RTN","PSOBPSSP",228,0)
 . . K CPYFDA
"RTN","PSOBPSSP",229,0)
 . . S CPYFDA(52.8651,"+1,"_CDIV_",",.01)=PARAMS(52.8651,PSOJ,.01,"I")
"RTN","PSOBPSSP",230,0)
 . . S CPYFDA(52.8651,"+1,"_CDIV_",",1)=PARAMS(52.8651,PSOJ,1,"I")
"RTN","PSOBPSSP",231,0)
 . . D UPDATE^DIE(,"CPYFDA")
"RTN","PSOBPSSP",232,0)
 . . Q
"RTN","PSOBPSSP",233,0)
 . ;
"RTN","PSOBPSSP",234,0)
 . ; Loop through and copy the reject resolution required codes
"RTN","PSOBPSSP",235,0)
 . ; Create the FDA and UPDATE the subfile 52.865
"RTN","PSOBPSSP",236,0)
 . I $D(PARAMS(52.865)) S PSOJ="" F  S PSOJ=$O(PARAMS(52.865,PSOJ)) Q:'PSOJ  D
"RTN","PSOBPSSP",237,0)
 . . K CPYFDA
"RTN","PSOBPSSP",238,0)
 . . S CPYFDA(52.865,"+1,"_CDIV_",",.01)=PARAMS(52.865,PSOJ,.01,"I")
"RTN","PSOBPSSP",239,0)
 . . S CPYFDA(52.865,"+1,"_CDIV_",",.02)=PARAMS(52.865,PSOJ,.02,"I")
"RTN","PSOBPSSP",240,0)
 . . D UPDATE^DIE(,"CPYFDA")
"RTN","PSOBPSSP",241,0)
 . . Q
"RTN","PSOBPSSP",242,0)
 . Q
"RTN","PSOBPSSP",243,0)
EXITCPY ;
"RTN","PSOBPSSP",244,0)
 D RBUILD
"RTN","PSOBPSSP",245,0)
 Q
"RTN","PSOBPSSP",246,0)
 ;
"RTN","PSOBPSSP",247,0)
EDITALL ; Action for EA Edit All Parameters
"RTN","PSOBPSSP",248,0)
 ;
"RTN","PSOBPSSP",249,0)
 ; Local variable
"RTN","PSOBPSSP",250,0)
 ; RET - for control after return from call - if "^" then call RBUILD and quit
"RTN","PSOBPSSP",251,0)
 N RET S RET=""
"RTN","PSOBPSSP",252,0)
 ;
"RTN","PSOBPSSP",253,0)
 ; Call to General Parameter Edit
"RTN","PSOBPSSP",254,0)
 D EDITGEN(.RET)
"RTN","PSOBPSSP",255,0)
 I RET=U D RBUILD Q
"RTN","PSOBPSSP",256,0)
 ;
"RTN","PSOBPSSP",257,0)
 ; Call to Transfer Reject Code Edit
"RTN","PSOBPSSP",258,0)
 D EDITTRC(.RET)
"RTN","PSOBPSSP",259,0)
 I RET=U D RBUILD Q
"RTN","PSOBPSSP",260,0)
 ;
"RTN","PSOBPSSP",261,0)
 ; Call to Reject Resolution Required Code Edit
"RTN","PSOBPSSP",262,0)
 D EDITRRRC
"RTN","PSOBPSSP",263,0)
 ;
"RTN","PSOBPSSP",264,0)
 D RBUILD
"RTN","PSOBPSSP",265,0)
 Q
"RTN","PSOBPSSP",266,0)
 ;
"RTN","PSOBPSSP",267,0)
EDITGEN(RETURN) ; Action for EG Edit General Parameters
"RTN","PSOBPSSP",268,0)
 ;
"RTN","PSOBPSSP",269,0)
 ; Input Parameter
"RTN","PSOBPSSP",270,0)
 ; RETURN - Null if normal exit, "^" if timeout or "^" entered
"RTN","PSOBPSSP",271,0)
 ;
"RTN","PSOBPSSP",272,0)
 ; Variables used by DIE
"RTN","PSOBPSSP",273,0)
 N DIE,DA,DIC,DUOUT,DTOUT,DEF
"RTN","PSOBPSSP",274,0)
 ;
"RTN","PSOBPSSP",275,0)
 ; Set Full Screen mode
"RTN","PSOBPSSP",276,0)
 D FULL^VALM1
"RTN","PSOBPSSP",277,0)
 ;
"RTN","PSOBPSSP",278,0)
 ; Get worklist days & update the record
"RTN","PSOBPSSP",279,0)
 S DIE="^PS(52.86,",DA=PSOBPSDV,DR="4" D ^DIE
"RTN","PSOBPSSP",280,0)
 ; CHECK FOR TIMEOUT OR ^
"RTN","PSOBPSSP",281,0)
 I $G(DTOUT)!$D(Y) S RETURN="^"
"RTN","PSOBPSSP",282,0)
 ;
"RTN","PSOBPSSP",283,0)
 ; Update EPHARMACY RESPONSE PAUSE
"RTN","PSOBPSSP",284,0)
 K DTOUT,DUOUT
"RTN","PSOBPSSP",285,0)
 S DEF=$$GET1^DIQ(52.86,PSOBPSDV_",",6,"I")
"RTN","PSOBPSSP",286,0)
 I DEF="" S DEF=2
"RTN","PSOBPSSP",287,0)
 S DIE="^PS(52.86,",DA=PSOBPSDV,DR="6//"_DEF D ^DIE
"RTN","PSOBPSSP",288,0)
 ; CHECK FOR TIMEOUT OR ^
"RTN","PSOBPSSP",289,0)
 I $G(DTOUT)!$D(Y) S RETURN="^"
"RTN","PSOBPSSP",290,0)
 ;
"RTN","PSOBPSSP",291,0)
 D RBUILD
"RTN","PSOBPSSP",292,0)
 Q
"RTN","PSOBPSSP",293,0)
 ;
"RTN","PSOBPSSP",294,0)
EDITTRC(RETURN)  ; Action for ET Edit Transfer Reject Code
"RTN","PSOBPSSP",295,0)
 ;
"RTN","PSOBPSSP",296,0)
 ; Input Parameter
"RTN","PSOBPSSP",297,0)
 ; RETURN - Null if normal exit, "^" if timeout or "^" entered
"RTN","PSOBPSSP",298,0)
 ;
"RTN","PSOBPSSP",299,0)
 ; From EN
"RTN","PSOBPSSP",300,0)
 ; PSOBPSDV - current division declared in EN
"RTN","PSOBPSSP",301,0)
 ;
"RTN","PSOBPSSP",302,0)
 ; Local Variables
"RTN","PSOBPSSP",303,0)
 ; PASS1 - used to indicate first pass through edit loop for controlling reject prompt
"RTN","PSOBPSSP",304,0)
 ; QT - indicates the loop processing can quit
"RTN","PSOBPSSP",305,0)
 ;
"RTN","PSOBPSSP",306,0)
 ; Set Full Screen mode
"RTN","PSOBPSSP",307,0)
 D FULL^VALM1
"RTN","PSOBPSSP",308,0)
 ;
"RTN","PSOBPSSP",309,0)
 N QT,PASS1
"RTN","PSOBPSSP",310,0)
 S QT=0,PASS1=1
"RTN","PSOBPSSP",311,0)
 ;
"RTN","PSOBPSSP",312,0)
 ; Informational message
"RTN","PSOBPSSP",313,0)
 D TRCMSG^PSOBPSSL
"RTN","PSOBPSSP",314,0)
 ;
"RTN","PSOBPSSP",315,0)
 ; Loop through Reject Code edits
"RTN","PSOBPSSP",316,0)
 F  Q:QT  D
"RTN","PSOBPSSP",317,0)
 . ; DIE,DA,DIC,DUOUT,DTOUT,DIR,DIC,X,Y - Used by FileMan
"RTN","PSOBPSSP",318,0)
 . N DIE,DR,DA,DUOUT,DTOUT,DIR,DIC,Y,X
"RTN","PSOBPSSP",319,0)
 . ; Variables local to this loop
"RTN","PSOBPSSP",320,0)
 . ; REJCODE - External Reject code - .01 field from 9002312.93
"RTN","PSOBPSSP",321,0)
 . ; REJIEN - Reject code IEN from 9002312.93
"RTN","PSOBPSSP",322,0)
 . ; ADD - Flag indicating a new code was selected
"RTN","PSOBPSSP",323,0)
 . ; NEWCDPTR - IEN of the Reject Code in 9002313.92 when the user changed the Reject Code
"RTN","PSOBPSSP",324,0)
 . ;
"RTN","PSOBPSSP",325,0)
 . N REJCODE,REJIEN,ADD,NEWCDPTR
"RTN","PSOBPSSP",326,0)
 . ;
"RTN","PSOBPSSP",327,0)
 . ; Set up and call Lookup (^DIC)
"RTN","PSOBPSSP",328,0)
 . S DIC("A")=$S(PASS1:"",1:"ANOTHER ")_"TRANSFER REJECT CODE: ",PASS1=0
"RTN","PSOBPSSP",329,0)
 . S DIC=9002313.93
"RTN","PSOBPSSP",330,0)
 . S DIC(0)="QEAZ"
"RTN","PSOBPSSP",331,0)
 . S DIC("S")="I '$F("".79.88."","".""_$P($G(^(0)),U,1)_""."")"
"RTN","PSOBPSSP",332,0)
 . W ! D ^DIC
"RTN","PSOBPSSP",333,0)
 . ;
"RTN","PSOBPSSP",334,0)
 . ; Check responses to the lookup
"RTN","PSOBPSSP",335,0)
 . I $G(DUOUT)!($G(DTOUT)) S RETURN=U,QT=1 Q  ; user entered a ^, or timed out
"RTN","PSOBPSSP",336,0)
 . I Y'>0 S QT=1 Q  ; user entered a blank to get out
"RTN","PSOBPSSP",337,0)
 . ;
"RTN","PSOBPSSP",338,0)
 . S REJIEN=+Y,REJCODE=$P(Y,U,2)
"RTN","PSOBPSSP",339,0)
 . S ADD=0
"RTN","PSOBPSSP",340,0)
 . ;
"RTN","PSOBPSSP",341,0)
 . ; if new code, set up new node
"RTN","PSOBPSSP",342,0)
 . I '$D(^PS(52.86,PSOBPSDV,1,"B",REJIEN)) D
"RTN","PSOBPSSP",343,0)
 . . ; TRCFDA - FDA structure used by UPDATE^DIE
"RTN","PSOBPSSP",344,0)
 . . N TRCFDA
"RTN","PSOBPSSP",345,0)
 . . S ADD=1
"RTN","PSOBPSSP",346,0)
 . . ;
"RTN","PSOBPSSP",347,0)
 . . ;Set up FDA and File the data 
"RTN","PSOBPSSP",348,0)
 . . S TRCFDA(52.8651,"+1,"_PSOBPSDV_",",.01)=REJIEN
"RTN","PSOBPSSP",349,0)
 . . S TRCFDA(52.8651,"+1,"_PSOBPSDV_",",1)=0 ; Default AUTO SEND
"RTN","PSOBPSSP",350,0)
 . . D UPDATE^DIE(,"TRCFDA")
"RTN","PSOBPSSP",351,0)
 . . Q
"RTN","PSOBPSSP",352,0)
 . ;
"RTN","PSOBPSSP",353,0)
 . ; Edit the transfer reject code entry
"RTN","PSOBPSSP",354,0)
 . S DA=$O(^PS(52.86,PSOBPSDV,1,"B",REJIEN,0)) Q:'DA
"RTN","PSOBPSSP",355,0)
 . S DA(1)=PSOBPSDV
"RTN","PSOBPSSP",356,0)
 . S DIE="^PS(52.86,"_DA(1)_",1,"
"RTN","PSOBPSSP",357,0)
 . S DR=".01"
"RTN","PSOBPSSP",358,0)
 . I ADD W !!?3,"You are entering a new transfer reject code - "_REJCODE_"."
"RTN","PSOBPSSP",359,0)
 . E  W !!?3,"You are editing an existing transfer reject code - "_REJCODE_"."
"RTN","PSOBPSSP",360,0)
 . D ^DIE
"RTN","PSOBPSSP",361,0)
 . ;
"RTN","PSOBPSSP",362,0)
 . I '$G(DA) Q  ; user deleted it so we're done
"RTN","PSOBPSSP",363,0)
 . I $G(DTOUT) S RETURN=U,QT=1 Q  ; timeout - exit loop
"RTN","PSOBPSSP",364,0)
 . I $D(Y) S RETURN=U,QT=1 Q  ; user entered a ^ to exit loop
"RTN","PSOBPSSP",365,0)
 . ;
"RTN","PSOBPSSP",366,0)
 . ; If the user changed the reject code, check for duplicate OR 79/88
"RTN","PSOBPSSP",367,0)
 . ; Get the current pointer filed by DIE and compare it to the original pointer
"RTN","PSOBPSSP",368,0)
 . S DA=+$G(DA),NEWCDPTR=$P($G(^PS(52.86,PSOBPSDV,1,DA,0)),U,1)
"RTN","PSOBPSSP",369,0)
 . I NEWCDPTR'=REJIEN D
"RTN","PSOBPSSP",370,0)
 . . ; CTR - used in duplicate check. # of records with same code value
"RTN","PSOBPSSP",371,0)
 . . ; IEN - used when checking the "B" index for duplicates using $ORDER
"RTN","PSOBPSSP",372,0)
 . . N CTR,IEN
"RTN","PSOBPSSP",373,0)
 . . ; NEWCDPTR - holds the new reject code after the user changes it
"RTN","PSOBPSSP",374,0)
 . . S (CTR,IEN)=0
"RTN","PSOBPSSP",375,0)
 . . F  S IEN=$O(^PS(52.86,PSOBPSDV,1,"B",NEWCDPTR,IEN)) Q:'IEN  S CTR=CTR+1
"RTN","PSOBPSSP",376,0)
 . . I CTR>1 D  Q
"RTN","PSOBPSSP",377,0)
 . . . S DR=".01////"_REJIEN D ^DIE   ; restore the code pointer
"RTN","PSOBPSSP",378,0)
 . . . W !!?3,"You selected a duplicate reject code.  Code '"_REJCODE_"' has been restored."
"RTN","PSOBPSSP",379,0)
 . . . S NEWCDPTR=0 ; Clear the new pointer if it is no longer valid
"RTN","PSOBPSSP",380,0)
 . . . Q
"RTN","PSOBPSSP",381,0)
 . . I $$GET1^DIQ(9002313.93,NEWCDPTR_",",.01)=79 D  Q
"RTN","PSOBPSSP",382,0)
 . . . S DR=".01////"_REJIEN D ^DIE   ; restore the code pointer
"RTN","PSOBPSSP",383,0)
 . . . W !!?3,"Code '79/RTS' is not valid here.  Code '"_REJCODE_"' has been restored."
"RTN","PSOBPSSP",384,0)
 . . . S NEWCDPTR=0 ; Clear the new pointer if it is no longer valid
"RTN","PSOBPSSP",385,0)
 . . . Q
"RTN","PSOBPSSP",386,0)
 . . I $$GET1^DIQ(9002313.93,NEWCDPTR_",",.01)=88 D  Q
"RTN","PSOBPSSP",387,0)
 . . . W !!?3,"Reject code '88/DUR' is not valid here. Code '"_REJCODE_"' has been restored."
"RTN","PSOBPSSP",388,0)
 . . . S DR=".01////"_REJIEN D ^DIE   ; restore the code pointer
"RTN","PSOBPSSP",389,0)
 . . . S NEWCDPTR=0 ; Clear the new pointer if it is no longer valid
"RTN","PSOBPSSP",390,0)
 . . . Q
"RTN","PSOBPSSP",391,0)
 . . Q
"RTN","PSOBPSSP",392,0)
 . ; NEWCDPTR will be 0 if the user tried to enter an invalid or duplicate reject code
"RTN","PSOBPSSP",393,0)
 . Q:'NEWCDPTR
"RTN","PSOBPSSP",394,0)
 . ;
"RTN","PSOBPSSP",395,0)
 . ; Now edit the AUTO SAVE parameter
"RTN","PSOBPSSP",396,0)
 . S DA(1)=PSOBPSDV
"RTN","PSOBPSSP",397,0)
 . S DIE="^PS(52.86,"_DA(1)_",1,"
"RTN","PSOBPSSP",398,0)
 . S DR="1"
"RTN","PSOBPSSP",399,0)
 . D ^DIE
"RTN","PSOBPSSP",400,0)
 . ;
"RTN","PSOBPSSP",401,0)
 . I $G(DTOUT) S RETURN=U,QT=1 Q  ; timeout - exit loop
"RTN","PSOBPSSP",402,0)
 . I $D(Y) S RETURN=U,QT=1 Q  ; user entered a ^ to exit loop
"RTN","PSOBPSSP",403,0)
 . Q
"RTN","PSOBPSSP",404,0)
 . ;
"RTN","PSOBPSSP",405,0)
 S VALMBG=1
"RTN","PSOBPSSP",406,0)
 D RBUILD
"RTN","PSOBPSSP",407,0)
 Q
"RTN","PSOBPSSP",408,0)
 ;
"RTN","PSOBPSSP",409,0)
EDITRRRC(RETURN)  ; Action for ER Edit Reject Resolution Required Code
"RTN","PSOBPSSP",410,0)
 ;
"RTN","PSOBPSSP",411,0)
 ; Input Parameter
"RTN","PSOBPSSP",412,0)
 ; RETURN - Null if normal exit, "^" if timeout or "^" entered
"RTN","PSOBPSSP",413,0)
 ;
"RTN","PSOBPSSP",414,0)
 ; From EN
"RTN","PSOBPSSP",415,0)
 ; PSOBPSDV - current division declared in EN
"RTN","PSOBPSSP",416,0)
 ;
"RTN","PSOBPSSP",417,0)
 ; Local Variables
"RTN","PSOBPSSP",418,0)
 ; PASS1 - used to indicate first pass through edit loop for controlling reject prompt
"RTN","PSOBPSSP",419,0)
 ; QT - indicates the loop processing can quit
"RTN","PSOBPSSP",420,0)
 ;
"RTN","PSOBPSSP",421,0)
 ; Set Full Screen mode
"RTN","PSOBPSSP",422,0)
 D FULL^VALM1
"RTN","PSOBPSSP",423,0)
 ;
"RTN","PSOBPSSP",424,0)
 N QT,PASS1
"RTN","PSOBPSSP",425,0)
 S QT=0,PASS1=1
"RTN","PSOBPSSP",426,0)
 ;
"RTN","PSOBPSSP",427,0)
 ; Informational message
"RTN","PSOBPSSP",428,0)
 D RRRMSG^PSOBPSSL
"RTN","PSOBPSSP",429,0)
 ;
"RTN","PSOBPSSP",430,0)
 ; Loop through Reject Code edits
"RTN","PSOBPSSP",431,0)
 F  Q:QT  D
"RTN","PSOBPSSP",432,0)
 . ; DIE,DA,DIC,DUOUT,DTOUT,DIR,DIC,X,Y - Used by FileMan
"RTN","PSOBPSSP",433,0)
 . N DIE,DR,DA,DUOUT,DTOUT,DIR,DIC,Y,X
"RTN","PSOBPSSP",434,0)
 . ; Variables local to this loop
"RTN","PSOBPSSP",435,0)
 . ; REJCODE - External Reject code - .01 field from 9002312.93
"RTN","PSOBPSSP",436,0)
 . ; REJIEN - Reject code IEN from 9002312.93
"RTN","PSOBPSSP",437,0)
 . ; ADD - Flag indicating a new code was selected
"RTN","PSOBPSSP",438,0)
 . ; NEWCDPTR - IEN of the Reject Code in 9002313.92 when the user changed the Reject Code
"RTN","PSOBPSSP",439,0)
 . ;
"RTN","PSOBPSSP",440,0)
 . N REJCODE,REJIEN,ADD,NEWCDPTR
"RTN","PSOBPSSP",441,0)
 . ;
"RTN","PSOBPSSP",442,0)
 . ; Set up and call Lookup (^DIC)
"RTN","PSOBPSSP",443,0)
 . S DIC("A")=$S(PASS1:"",1:"ANOTHER ")_"REJECT RESOLUTION REQUIRED CODE: ",PASS1=0
"RTN","PSOBPSSP",444,0)
 . S DIC=9002313.93
"RTN","PSOBPSSP",445,0)
 . S DIC(0)="QEAZ"
"RTN","PSOBPSSP",446,0)
 . S DIC("S")="I '$F("".79.88."","".""_$P($G(^(0)),U,1)_""."")"
"RTN","PSOBPSSP",447,0)
 . W ! D ^DIC
"RTN","PSOBPSSP",448,0)
 . ;
"RTN","PSOBPSSP",449,0)
 . ; Check responses to the lookup
"RTN","PSOBPSSP",450,0)
 . I $G(DUOUT)!($G(DTOUT)) S RETURN=U,QT=1 Q  ; user entered a ^, or timed out
"RTN","PSOBPSSP",451,0)
 . I Y'>0 S QT=1 Q  ; user entered a blank to get out
"RTN","PSOBPSSP",452,0)
 . ;
"RTN","PSOBPSSP",453,0)
 . S REJIEN=+Y,REJCODE=$P(Y,U,2)
"RTN","PSOBPSSP",454,0)
 . S ADD=0
"RTN","PSOBPSSP",455,0)
 . ;
"RTN","PSOBPSSP",456,0)
 . ; if new code, set up new node
"RTN","PSOBPSSP",457,0)
 . I '$D(^PS(52.86,PSOBPSDV,5,"B",REJIEN)) D
"RTN","PSOBPSSP",458,0)
 . . ; RRRCFDA - FDA structure used by UPDATE^DIE
"RTN","PSOBPSSP",459,0)
 . . N RRRCFDA
"RTN","PSOBPSSP",460,0)
 . . S ADD=1
"RTN","PSOBPSSP",461,0)
 . . ;
"RTN","PSOBPSSP",462,0)
 . . ;Set up FDA and File the data 
"RTN","PSOBPSSP",463,0)
 . . S RRRCFDA(52.865,"+1,"_PSOBPSDV_",",.01)=REJIEN
"RTN","PSOBPSSP",464,0)
 . . S RRRCFDA(52.865,"+1,"_PSOBPSDV_",",.02)=0 ; Default DOLLAR THRESHOLD
"RTN","PSOBPSSP",465,0)
 . . D UPDATE^DIE(,"RRRCFDA")
"RTN","PSOBPSSP",466,0)
 . . Q
"RTN","PSOBPSSP",467,0)
 . ;
"RTN","PSOBPSSP",468,0)
 . ; Edit the transfer reject code entry
"RTN","PSOBPSSP",469,0)
 . S DA=$O(^PS(52.86,PSOBPSDV,5,"B",REJIEN,0)) Q:'DA
"RTN","PSOBPSSP",470,0)
 . S DA(1)=PSOBPSDV
"RTN","PSOBPSSP",471,0)
 . S DIE="^PS(52.86,"_DA(1)_",5,"
"RTN","PSOBPSSP",472,0)
 . S DR=".01REJECT RESOLUTION REQUIRED CODE"
"RTN","PSOBPSSP",473,0)
 . I ADD W !!?3,"You are entering a new reject resolution required code - "_REJCODE_"."
"RTN","PSOBPSSP",474,0)
 . E  W !!?3,"You are editing an existing reject resolution required code - "_REJCODE_"."
"RTN","PSOBPSSP",475,0)
 . D ^DIE
"RTN","PSOBPSSP",476,0)
 . ;
"RTN","PSOBPSSP",477,0)
 . I '$G(DA) Q  ; user deleted it so we're done
"RTN","PSOBPSSP",478,0)
 . I $G(DTOUT) S RETURN=U,QT=1 Q  ; timeout - exit loop
"RTN","PSOBPSSP",479,0)
 . I $D(Y) S RETURN=U,QT=1 Q  ; user entered a ^ to exit loop
"RTN","PSOBPSSP",480,0)
 . ;
"RTN","PSOBPSSP",481,0)
 . ; If the user changed the reject code, check for duplicate OR 79/88
"RTN","PSOBPSSP",482,0)
 . ; Get the current pointer filed by DIE and compare it to the original pointer
"RTN","PSOBPSSP",483,0)
 . S DA=+$G(DA),NEWCDPTR=$P($G(^PS(52.86,PSOBPSDV,5,DA,0)),U,1)
"RTN","PSOBPSSP",484,0)
 . I NEWCDPTR'=REJIEN D
"RTN","PSOBPSSP",485,0)
 . . ; CTR - used in duplicate check. # of records with same code value
"RTN","PSOBPSSP",486,0)
 . . ; IEN - used when checking the "B" index for duplicates using $ORDER
"RTN","PSOBPSSP",487,0)
 . . N CTR,IEN
"RTN","PSOBPSSP",488,0)
 . . ; NEWCDPTR - holds the new reject code after the user changes it
"RTN","PSOBPSSP",489,0)
 . . S (CTR,IEN)=0
"RTN","PSOBPSSP",490,0)
 . . F  S IEN=$O(^PS(52.86,PSOBPSDV,5,"B",NEWCDPTR,IEN)) Q:'IEN  S CTR=CTR+1
"RTN","PSOBPSSP",491,0)
 . . I CTR>1 D  Q
"RTN","PSOBPSSP",492,0)
 . . . S DR=".01////"_REJIEN D ^DIE   ; restore the code pointer
"RTN","PSOBPSSP",493,0)
 . . . W !!?3,"You selected a duplicate reject code.  Code '"_REJCODE_"' has been restored."
"RTN","PSOBPSSP",494,0)
 . . . S NEWCDPTR=0 ; Clear the new pointer if it is no longer valid
"RTN","PSOBPSSP",495,0)
 . . . Q
"RTN","PSOBPSSP",496,0)
 . . I $$GET1^DIQ(9002313.93,NEWCDPTR_",",.01)=79 D  Q
"RTN","PSOBPSSP",497,0)
 . . . S DR=".01////"_REJIEN D ^DIE   ; restore the code pointer
"RTN","PSOBPSSP",498,0)
 . . . W !!?3,"Code '79/RTS' is not valid here.  Code '"_REJCODE_"' has been restored."
"RTN","PSOBPSSP",499,0)
 . . . S NEWCDPTR=0 ; Clear the new pointer if it is no longer valid
"RTN","PSOBPSSP",500,0)
 . . . Q
"RTN","PSOBPSSP",501,0)
 . . I $$GET1^DIQ(9002313.93,NEWCDPTR_",",.01)=88 D  Q
"RTN","PSOBPSSP",502,0)
 . . . W !!?3,"Reject code '88/DUR' is not valid here. Code '"_REJCODE_"' has been restored."
"RTN","PSOBPSSP",503,0)
 . . . S DR=".01////"_REJIEN D ^DIE   ; restore the code pointer
"RTN","PSOBPSSP",504,0)
 . . . S NEWCDPTR=0 ; Clear the new pointer if it is no longer valid
"RTN","PSOBPSSP",505,0)
 . . . Q
"RTN","PSOBPSSP",506,0)
 . . Q
"RTN","PSOBPSSP",507,0)
 . ; NEWCDPTR will be 0 if the user tried to enter an invalid or duplicate reject code
"RTN","PSOBPSSP",508,0)
 . Q:'NEWCDPTR
"RTN","PSOBPSSP",509,0)
 . ;
"RTN","PSOBPSSP",510,0)
 . ; Now edit the DOLLAR THRESHOLD parameter
"RTN","PSOBPSSP",511,0)
 . S DA(1)=PSOBPSDV
"RTN","PSOBPSSP",512,0)
 . S DIE="^PS(52.86,"_DA(1)_",5,"
"RTN","PSOBPSSP",513,0)
 . S DR=".02"
"RTN","PSOBPSSP",514,0)
 . D ^DIE
"RTN","PSOBPSSP",515,0)
 . ; Make sure stored value is not null
"RTN","PSOBPSSP",516,0)
 . I '$G(DTOUT),$G(^PS(52.86,PSOBPSDV,5,DA,0)) D
"RTN","PSOBPSSP",517,0)
 . . S $P(^PS(52.86,PSOBPSDV,5,DA,0),U,2)=+$P(^PS(52.86,PSOBPSDV,5,DA,0),U,2)
"RTN","PSOBPSSP",518,0)
 . ;
"RTN","PSOBPSSP",519,0)
 . I $G(DTOUT) S RETURN=U,QT=1 Q  ; timeout - exit loop
"RTN","PSOBPSSP",520,0)
 . I $D(Y) S RETURN=U,QT=1 Q  ; user entered a ^ to exit loop
"RTN","PSOBPSSP",521,0)
 . Q
"RTN","PSOBPSSP",522,0)
 . ;
"RTN","PSOBPSSP",523,0)
 S VALMBG=1
"RTN","PSOBPSSP",524,0)
 D RBUILD
"RTN","PSOBPSSP",525,0)
 Q
"RTN","PSOBPSSP",526,0)
 ;
"RTN","PSOBPSSP",527,0)
CHGDIV ; Action for CD Change Division
"RTN","PSOBPSSP",528,0)
 ;
"RTN","PSOBPSSP",529,0)
 ; From EN
"RTN","PSOBPSSP",530,0)
 ; PSOBPSDV - source site parameter IEN of 52.86 - defined in EN
"RTN","PSOBPSSP",531,0)
 ;
"RTN","PSOBPSSP",532,0)
 ; Local Variable 
"RTN","PSOBPSSP",533,0)
 ; TMPDIV - used to save the current division number in case the user does not pick one
"RTN","PSOBPSSP",534,0)
 N TMPDIV
"RTN","PSOBPSSP",535,0)
 ;
"RTN","PSOBPSSP",536,0)
 ; Set Full Screen mode
"RTN","PSOBPSSP",537,0)
 D FULL^VALM1
"RTN","PSOBPSSP",538,0)
 ;
"RTN","PSOBPSSP",539,0)
 ; save current division
"RTN","PSOBPSSP",540,0)
 S TMPDIV=PSOBPSDV
"RTN","PSOBPSSP",541,0)
 ;
"RTN","PSOBPSSP",542,0)
 ; Kill the current division
"RTN","PSOBPSSP",543,0)
 K PSOBPSDV
"RTN","PSOBPSSP",544,0)
 ;
"RTN","PSOBPSSP",545,0)
 ; Get the division number to process
"RTN","PSOBPSSP",546,0)
 D GETDIV(.PSOBPSDV)
"RTN","PSOBPSSP",547,0)
 ;
"RTN","PSOBPSSP",548,0)
 ; if no division selected, restore current division
"RTN","PSOBPSSP",549,0)
 I '$D(PSOBPSDV) D  Q
"RTN","PSOBPSSP",550,0)
 . S PSOBPSDV=TMPDIV
"RTN","PSOBPSSP",551,0)
 . D RBUILD
"RTN","PSOBPSSP",552,0)
 S VALMHDR(1)="Pharmacy Division: "_$$GET1^DIQ(52.86,PSOBPSDV_",",.01)
"RTN","PSOBPSSP",553,0)
 S VALMBG=1
"RTN","PSOBPSSP",554,0)
 D RBUILD
"RTN","PSOBPSSP",555,0)
 Q
"RTN","PSOBPSSP",556,0)
 ;
"RTN","PSOBPSSP",557,0)
DIVLIST ; Action for DP Display site parameters
"RTN","PSOBPSSP",558,0)
 ;
"RTN","PSOBPSSP",559,0)
 ; Set Full Screen mode
"RTN","PSOBPSSP",560,0)
 D FULL^VALM1
"RTN","PSOBPSSP",561,0)
 ;
"RTN","PSOBPSSP",562,0)
 ; Call List Manager routine for displaying site parameters for multiple divisions
"RTN","PSOBPSSP",563,0)
 D EN^PSOBPSSL
"RTN","PSOBPSSP",564,0)
 ;
"RTN","PSOBPSSP",565,0)
 D RBUILD
"RTN","PSOBPSSP",566,0)
 Q
"RTN","PSOBPSSP",567,0)
 ;
"RTN","PSOBPSSP",568,0)
RBUILD ; rebuild the list and then exit with a refresh
"RTN","PSOBPSSP",569,0)
 ;
"RTN","PSOBPSSP",570,0)
 ; From EN
"RTN","PSOBPSSP",571,0)
 ; PSOBPSDV - source site parameter IEN of 52.86 - defined in EN
"RTN","PSOBPSSP",572,0)
 ;
"RTN","PSOBPSSP",573,0)
 ; VALMBK - List Manager variable
"RTN","PSOBPSSP",574,0)
 ;
"RTN","PSOBPSSP",575,0)
 D BLDLIST(PSOBPSDV)
"RTN","PSOBPSSP",576,0)
 ;
"RTN","PSOBPSSP",577,0)
 S VALMBCK="R"
"RTN","PSOBPSSP",578,0)
 Q
"RTN","PSOBPSU1")
0^23^B77585767
"RTN","PSOBPSU1",1,0)
PSOBPSU1 ;BIRM/MFR - BPS (ECME) Utilities 1 ;10/15/04
"RTN","PSOBPSU1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,260,281,287,303,289,290,358,359,385,403,427**;DEC 1997;Build 21
"RTN","PSOBPSU1",3,0)
 ;Reference to $$EN^BPSNCPDP supported by IA 4415 & 4304
"RTN","PSOBPSU1",4,0)
 ;References to $$NDCFMT^PSSNDCUT,$$GETNDC^PSSNDCUT supported by IA 4707
"RTN","PSOBPSU1",5,0)
 ;References to $$ECMEON^BPSUTIL,$$CMOPON^BPSUTIL supported by IA 4410
"RTN","PSOBPSU1",6,0)
 ;References to $$STORESP^IBNCPDP supported by IA 4299
"RTN","PSOBPSU1",7,0)
 ;Reference to $$CLAIM^BPSBUTL supported by IA 4719
"RTN","PSOBPSU1",8,0)
 ;
"RTN","PSOBPSU1",9,0)
ECMESND(RX,RFL,DATE,FROM,NDC,CMOP,RVTX,OVRC,CNDC,RESP,IGSW,ALTX,CLA,PA,RXCOB) ; - Sends Rx Release 
"RTN","PSOBPSU1",10,0)
 ;information to ECME/IB and updates NDC in the files 50 & 52; DBIA4304
"RTN","PSOBPSU1",11,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",12,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",13,0)
 ;       (o) DATE - Date of Service
"RTN","PSOBPSU1",14,0)
 ;       (r) FROM - Function within OP (See BWHERE param. in EN^BPSNCPDP api)
"RTN","PSOBPSU1",15,0)
 ;       (o) NDC  - NDC Number (If not passed, will be retrieved from DRUG file)
"RTN","PSOBPSU1",16,0)
 ;       (o) CMOP - CMOP Rx (1-YES/0-NO) (Default: 0)
"RTN","PSOBPSU1",17,0)
 ;       (o) RVTX - REVERSE text (e.g., RX EDIT, RX RELEASE-NDC CHANGE, etc)
"RTN","PSOBPSU1",18,0)
 ;       (o) OVRC - Three sets of 3 NCPDP override codes separated by "~".  Each piece of the set 
"RTN","PSOBPSU1",19,0)
 ;                  is delimited by an "^"
"RTN","PSOBPSU1",20,0)
 ;                  Piece 1: NCPDP Reason for Service Code for overriding DUR REJECTS
"RTN","PSOBPSU1",21,0)
 ;                  Piece 2: NCPDP Professional Service Code for overriding DUR REJECTS
"RTN","PSOBPSU1",22,0)
 ;                  Piece 3: NCPDP Result of Service Code for overriding DUR REJECTS
"RTN","PSOBPSU1",23,0)
 ;       (o) CNDC - Changed NDC? 1 - Yes / 0 - No (Default: NO)
"RTN","PSOBPSU1",24,0)
 ;       (o) IGSW - Ignore Switches (Master and CMOP)? 1 - Yes / 0 - No (Default: NO)
"RTN","PSOBPSU1",25,0)
 ;       (o) ALTX - Alternative Text to be placed in the Rx ECME Activity Log
"RTN","PSOBPSU1",26,0)
 ;       (o) CLA  - NCPDP Clarification Code(s) for overriding DUR/RTS REJECTS
"RTN","PSOBPSU1",27,0)
 ;       (o) PA   - NCPDP Prior Authorization Type and Number (separated by "^")
"RTN","PSOBPSU1",28,0)
 ;       (o) RXCOB- Payer Sequence
"RTN","PSOBPSU1",29,0)
 ;Output:    RESP - Response from $$EN^BPSNCPDP api
"RTN","PSOBPSU1",30,0)
 ;
"RTN","PSOBPSU1",31,0)
 N ACT,NDCACT,DA,PSOELIG,PSOBYPS,ACT1,SMA
"RTN","PSOBPSU1",32,0)
 I '$D(RFL) S RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",33,0)
 ; - ECME is not turned ON for the Rx's Division
"RTN","PSOBPSU1",34,0)
 I '$G(IGSW),'$$ECMEON^BPSUTIL($$RXSITE^PSOBPSUT(RX,RFL)) S RESP="-1^ECME SWITCH OFF" Q
"RTN","PSOBPSU1",35,0)
 ; - ECME CMOP is not turned ON for the Rx's Division
"RTN","PSOBPSU1",36,0)
 I '$G(IGSW),$G(CMOP),'$$CMOPON^BPSUTIL($$RXSITE^PSOBPSUT(RX,RFL)) S RESP="-1^CMOP SWITCH OFF" Q
"RTN","PSOBPSU1",37,0)
 ; - Saving the NDC to be displayed on the ECME Act Log
"RTN","PSOBPSU1",38,0)
 I $G(CNDC) D
"RTN","PSOBPSU1",39,0)
 . I $G(NDC)'="" S NDCACT=NDC Q
"RTN","PSOBPSU1",40,0)
 . S NDCACT=$$GETNDC^PSONDCUT(RX,RFL)
"RTN","PSOBPSU1",41,0)
 I $$NDCFMT^PSSNDCUT($G(NDC))="" D
"RTN","PSOBPSU1",42,0)
 . S NDC=$$GETNDC^PSSNDCUT($$GET1^DIQ(52,RX,6,"I"),$$RXSITE^PSOBPSUT(RX,RFL),+$G(CMOP))
"RTN","PSOBPSU1",43,0)
 . I $G(NDC)'="" D SAVNDC^PSONDCUT(RX,RFL,NDC,+$G(CMOP),1)
"RTN","PSOBPSU1",44,0)
 S PPDU="",PPDU=$$GPPDU^PSONDCUT(RX,RFL,NDC,,1,FROM) K PPDU
"RTN","PSOBPSU1",45,0)
 ;
"RTN","PSOBPSU1",46,0)
 ; Determine if this has multiple overrides from the SMA action of the reject worklist
"RTN","PSOBPSU1",47,0)
 S SMA=0
"RTN","PSOBPSU1",48,0)
 I $G(OVRC)]"",$G(CLA)]"" S SMA=1
"RTN","PSOBPSU1",49,0)
 I $G(OVRC)]"",$G(PA)]"" S SMA=1
"RTN","PSOBPSU1",50,0)
 I $G(CLA)]"",$G(PA)]"" S SMA=1
"RTN","PSOBPSU1",51,0)
 ;
"RTN","PSOBPSU1",52,0)
 ; - Creating ECME Act Log in file 52
"RTN","PSOBPSU1",53,0)
 S ACT="" I $$STATUS^PSOBPSUT(RX,RFL)="E PAYABLE" S ACT="Rev/Resubmit"
"RTN","PSOBPSU1",54,0)
 S ACT=ACT_" ECME:"
"RTN","PSOBPSU1",55,0)
 ;
"RTN","PSOBPSU1",56,0)
 ; - Marked any 'unresolved' REJECTS as 'resolved' (Reason: 1 - Claim re-submitted)
"RTN","PSOBPSU1",57,0)
 N CLSCOM
"RTN","PSOBPSU1",58,0)
 I 'SMA D
"RTN","PSOBPSU1",59,0)
 . I $P($G(OVRC),"~")'="" S CLSCOM="DUR Override Codes "_$TR($P(OVRC,"~"),"^","/")_" submitted."
"RTN","PSOBPSU1",60,0)
 . I $G(CLA)'="" S CLSCOM="Clarification Code(s) "_CLA_" submitted."
"RTN","PSOBPSU1",61,0)
 . I $G(PA)'="" S CLSCOM="Prior Authorization Code ("_$P(PA,"^")_"/"_$P(PA,"^",2)_") submitted."
"RTN","PSOBPSU1",62,0)
 D CLSALL^PSOREJUT(RX,RFL,DUZ,1,$G(CLSCOM),$P($G(OVRC),"~",1),$P($G(OVRC),"~",2),$P($G(OVRC),"~",3),$G(CLA),$G(PA))
"RTN","PSOBPSU1",63,0)
 ; - Call to ECME (NEWing STAT because ECME was overwriting it - Important variable for CMOP release PSXVND)
"RTN","PSOBPSU1",64,0)
 N STAT
"RTN","PSOBPSU1",65,0)
 I $G(RVTX)="",FROM="ED" S RVTX="RX EDITED"
"RTN","PSOBPSU1",66,0)
 S RESP=$$EN^BPSNCPDP(RX,RFL,$$DOS(RX,RFL,.DATE),FROM,NDC,$G(RVTX),$G(OVRC),,$G(CLA),$G(PA),$G(RXCOB))
"RTN","PSOBPSU1",67,0)
 I $$STATUS^PSOBPSUT(RX,RFL)="E PAYABLE" D SAVNDC^PSONDCUT(RX,RFL,NDC,+$G(CMOP),1,FROM)
"RTN","PSOBPSU1",68,0)
 ;
"RTN","PSOBPSU1",69,0)
 ; - Reseting the Re-transmission flag
"RTN","PSOBPSU1",70,0)
 D RETRXF^PSOREJU2(RX,RFL,0)
"RTN","PSOBPSU1",71,0)
 ; Storing eligibility flag
"RTN","PSOBPSU1",72,0)
 S PSOELIG=$P(RESP,"^",3) D:PSOELIG'="" ELIG^PSOBPSU2(RX,RFL,PSOELIG)
"RTN","PSOBPSU1",73,0)
 ;
"RTN","PSOBPSU1",74,0)
 ; Check if this is a bypass RX-claim.  If it is, write it to the Bypass-Override Report
"RTN","PSOBPSU1",75,0)
 S PSOBYPS=$$BYPASS(PSOELIG,$P(RESP,"^",2))
"RTN","PSOBPSU1",76,0)
 I PSOBYPS D EN^PSOBORP2(RX,RFL,RESP)
"RTN","PSOBPSU1",77,0)
 ;
"RTN","PSOBPSU1",78,0)
 ; If from SMA action, split message across multiple log entries
"RTN","PSOBPSU1",79,0)
 ; The last entry will be filed in the code that follows this section as we append other data
"RTN","PSOBPSU1",80,0)
 ;   to the last message.
"RTN","PSOBPSU1",81,0)
 I SMA,+RESP'=2,+RESP'=6,+RESP'=10 D
"RTN","PSOBPSU1",82,0)
 . N MSG
"RTN","PSOBPSU1",83,0)
 . ; If there are DUR overrides, create the message and file it since this will never be the last message
"RTN","PSOBPSU1",84,0)
 . I $G(OVRC)]"" D
"RTN","PSOBPSU1",85,0)
 .. S MSG=ACT_"REJECT WORKLIST-DUR OVERRIDE CODES("_$TR(OVRC,"^","/")_")"
"RTN","PSOBPSU1",86,0)
 .. D RXACT^PSOBPSU2(RX,RFL,MSG,"M",DUZ)
"RTN","PSOBPSU1",87,0)
 . ; If there are Clarification codes, create the message
"RTN","PSOBPSU1",88,0)
 . ; Only file it if we also have a Prior Auth message.
"RTN","PSOBPSU1",89,0)
 . ; Otherwise more data will be added to it and it will be filed below.
"RTN","PSOBPSU1",90,0)
 . I $G(CLA)]"" D
"RTN","PSOBPSU1",91,0)
 .. S MSG=ACT_"REJECT WORKLIST-(CLARIF. CODE="_CLA_")"
"RTN","PSOBPSU1",92,0)
 .. I $G(PA)]"" D RXACT^PSOBPSU2(RX,RFL,MSG,"M",DUZ)
"RTN","PSOBPSU1",93,0)
 . ; If there are Prior Auth overrides, create the message.
"RTN","PSOBPSU1",94,0)
 . ; More data will be added to it and it will be filed below.
"RTN","PSOBPSU1",95,0)
 . I $G(PA)]"" D
"RTN","PSOBPSU1",96,0)
 .. S ALTX="REJECT WORKLIST-(PRIOR AUTH.="_$TR(PA,"^","/")_")"
"RTN","PSOBPSU1",97,0)
 ;
"RTN","PSOBPSU1",98,0)
 ; - Logging ECME Act Log to file 52
"RTN","PSOBPSU1",99,0)
 I $G(ALTX)="" D
"RTN","PSOBPSU1",100,0)
 . N X,ROUTE S (ROUTE,X)=""
"RTN","PSOBPSU1",101,0)
 . S ROUTE=$S(FROM="RF":$$GET1^DIQ(52.1,RFL_","_RX_",",2),FROM="OF":$$GET1^DIQ(52,RX_",",11),1:"")
"RTN","PSOBPSU1",102,0)
 . S:FROM="OF" X=ROUTE_" FILL(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",103,0)
 . S:FROM="RF" X=ROUTE_" REFILL(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",104,0)
 . S:FROM="RN" X="RX RENEWED(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",105,0)
 . S:FROM="PL" X="PRINTED FROM SUSPENSE(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",106,0)
 . S:FROM="PE"!(FROM="PP") X="PULLED FROM SUSPENSE(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",107,0)
 . S:FROM="PC" X="CMOP TRANSMISSION(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",108,0)
 . S:FROM="RRL"!(FROM="CRRL") X="RELEASED RX PREVIOUSLY REVERSED"
"RTN","PSOBPSU1",109,0)
 . S:FROM="ED" X="RX EDITED"
"RTN","PSOBPSU1",110,0)
 . S:$G(RVTX)'="" X=RVTX
"RTN","PSOBPSU1",111,0)
 . I 'SMA,$G(OVRC)'="" S X="DUR OVERRIDE CODES("_$TR(OVRC,"^","/")_")"
"RTN","PSOBPSU1",112,0)
 . S:$G(CNDC) X=X_"(NDC:"_NDCACT_")" S ACT=ACT_X
"RTN","PSOBPSU1",113,0)
 . S ACT=ACT_$$STS(RX,RFL,RESP)
"RTN","PSOBPSU1",114,0)
 I $G(ALTX)'="" S ACT=ACT_ALTX_$$STS(RX,RFL,RESP)
"RTN","PSOBPSU1",115,0)
 I +RESP=2 S ACT="Not ECME Billable: "_$P(RESP,"^",2)
"RTN","PSOBPSU1",116,0)
 I +RESP=6 S ACT=$P(RESP,"^",2)
"RTN","PSOBPSU1",117,0)
 I +RESP=10 S ACT="ECME reversed/NOT re-submitted: "_$P(RESP,"^",2)
"RTN","PSOBPSU1",118,0)
 S:PSOELIG="T" ACT="TRICARE-"_ACT
"RTN","PSOBPSU1",119,0)
 S:PSOELIG="C" ACT="CHAMPVA-"_ACT
"RTN","PSOBPSU1",120,0)
 S ACT1=""
"RTN","PSOBPSU1",121,0)
 I $P(RESP,"^",6),$P(RESP,"^",7)'=""  S ACT1="-"_$S($P(RESP,"^",6)="2":"s",$P(RESP,"^",6)="3":"t",1:"p")_$P(RESP,"^",7)
"RTN","PSOBPSU1",122,0)
 S ACT=$E(ACT_ACT1,1,75)
"RTN","PSOBPSU1",123,0)
 D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOBPSU1",124,0)
 D ELOG^PSOBPSU2(RESP)  ;-Logs an ECME Act Log if Rx Qty is different than Billing Qty
"RTN","PSOBPSU1",125,0)
 ; If not a bypass RX-claim, then call TRICCHK so the user can process
"RTN","PSOBPSU1",126,0)
 I PSOELIG="T"!(PSOELIG="C"),'PSOBYPS D TRICCHK^PSOREJU3(RX,RFL,RESP,FROM,$G(RVTX))
"RTN","PSOBPSU1",127,0)
 Q
"RTN","PSOBPSU1",128,0)
 ;
"RTN","PSOBPSU1",129,0)
BYPASS(PSOELIG,REASON) ;PSO*427
"RTN","PSOBPSU1",130,0)
 ; Check if this Rx gets bypassed. Bypassed Rx show up on the TRICARE/CHAMPVA
"RTN","PSOBPSU1",131,0)
 ;   Override/Bypass Report and will not get the Reject Notification Screen.
"RTN","PSOBPSU1",132,0)
 ;
"RTN","PSOBPSU1",133,0)
 ; Input:
"RTN","PSOBPSU1",134,0)
 ;    POSELIG: Eligibility (C:CHAMPVA, T:TRICARE, V:VETERAN)
"RTN","PSOBPSU1",135,0)
 ;    REASON: Non billable reason returned by ECME
"RTN","PSOBPSU1",136,0)
 ; Output:
"RTN","PSOBPSU1",137,0)
 ;    0: Not a Bypass Rx
"RTN","PSOBPSU1",138,0)
 ;    1: Bypass Rx
"RTN","PSOBPSU1",139,0)
 ;
"RTN","PSOBPSU1",140,0)
 ; Check Parameters
"RTN","PSOBPSU1",141,0)
 I $G(PSOELIG)="" Q 0
"RTN","PSOBPSU1",142,0)
 I $G(REASON)="" Q 0
"RTN","PSOBPSU1",143,0)
 ;
"RTN","PSOBPSU1",144,0)
 ; Only TRICARE and CHAMPVA are bypassed
"RTN","PSOBPSU1",145,0)
 I PSOELIG'="T",PSOELIG'="C" Q 0
"RTN","PSOBPSU1",146,0)
 ;
"RTN","PSOBPSU1",147,0)
 ; Check for TRICARE/CHAMPVA and EI (Veteran claims would not have gotten this far)
"RTN","PSOBPSU1",148,0)
 I ",AGENT ORANGE,IONIZING RADIATION,SC TREATMENT,SOUTHWEST ASIA,MILITARY SEXUAL TRAUMA,HEAD/NECK CANCER,COMBAT VETERAN,SHAD^PROJECT 112/SHAD,"[(","_REASON_",") Q 1
"RTN","PSOBPSU1",149,0)
 Q 0
"RTN","PSOBPSU1",150,0)
 ;
"RTN","PSOBPSU1",151,0)
REVERSE(RX,RFL,FROM,RSN,RTXT,IGRL,NDC) ; - Reverse a claim and close all OPEN/UNRESOLVED Rejects
"RTN","PSOBPSU1",152,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",153,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",154,0)
 ;       (r) FROM - Function within OP (See BWHERE param. in EN^BPSNCPDP api)
"RTN","PSOBPSU1",155,0)
 ;       (o) RSN  - Close Reason (2:RX ON HOLD;4: RX RETURNED TO STOCK,5:RX DELETED,etc...)
"RTN","PSOBPSU1",156,0)
 ;       (o) RTXT - Close Reason TEXT (Usually no passed if RSN is passed)
"RTN","PSOBPSU1",157,0)
 ;       (o) IGRL - Ignore RELEASE DATE, reverse anyway  
"RTN","PSOBPSU1",158,0)
 ;       (o) NDC  - NDC number related to the reversal (Note: might be an invalid NDC)
"RTN","PSOBPSU1",159,0)
 I '$D(RFL) S RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",160,0)
 N PSOET S PSOET=$$PSOET^PSOREJP3(RX,RFL)   ;cnf, PSO*7.0*358
"RTN","PSOBPSU1",161,0)
 I 'PSOET,$$STATUS^PSOBPSUT(RX,RFL)="" Q    ;cnf, PSO*7.0*358, add PSOET check, allow reversal for TRICARE non-billable reject
"RTN","PSOBPSU1",162,0)
 N RESP,STS,ACT,STAT,DA,STATUS,NOACT,REVECME S RSN=+$G(RSN),RTXT=$G(RTXT),REVECME=1
"RTN","PSOBPSU1",163,0)
 I RTXT="",RSN D
"RTN","PSOBPSU1",164,0)
 . S:RSN=2 RTXT="RX PLACED ON HOLD" S:RSN=3 RTXT="RX SUSPENDED" S:RSN=4 RTXT="RX RETURNED TO STOCK"
"RTN","PSOBPSU1",165,0)
 . S:RSN=5 RTXT="RX DELETED" S:RSN=7 RTXT="RX DISCONTINUED" S:RSN=8 RTXT="RX EDITED"
"RTN","PSOBPSU1",166,0)
 D CLSALL^PSOREJUT(RX,RFL,DUZ,RSN,RTXT)
"RTN","PSOBPSU1",167,0)
 I '$G(IGRL),$$RXRLDT^PSOBPSUT(RX,RFL) Q
"RTN","PSOBPSU1",168,0)
 ; - Reseting the Re-transmission flag if Rx is being suspended
"RTN","PSOBPSU1",169,0)
 I RSN=3!($$GET1^DIQ(52,RX,100,"I")=5) D RETRXF^PSOREJU2(RX,RFL,1)
"RTN","PSOBPSU1",170,0)
 S STATUS=$$STATUS^PSOBPSUT(RX,RFL),NOACT=0
"RTN","PSOBPSU1",171,0)
 I STATUS'="E PAYABLE",STATUS'="IN PROGRESS",STATUS'="E REVERSAL REJECTED",STATUS'="E REVERSAL STRANDED",STATUS'="E DUPLICATE" S NOACT=1
"RTN","PSOBPSU1",172,0)
 ; Only perform ECME reversal for a released CMOP if rx/fill is Discontinued.
"RTN","PSOBPSU1",173,0)
 I FROM="DC",$$CMOP^PSOBPSUT(RX,RFL) S REVECME=0
"RTN","PSOBPSU1",174,0)
 I REVECME S RESP=$$EN^BPSNCPDP(RX,RFL,$$DOS(RX,RFL),FROM,$$GETNDC^PSONDCUT(RX,RFL),RTXT)
"RTN","PSOBPSU1",175,0)
 N PSOTRIC S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOBPSU1",176,0)
 ; - Logging ECME Act Log
"RTN","PSOBPSU1",177,0)
 I '$G(NOACT),REVECME D
"RTN","PSOBPSU1",178,0)
 . S ACT=$S(PSOTRIC=1:"TRICARE ",PSOTRIC=2:"CHAMPVA ",1:"")_"Reversal sent to ECME: "_RTXT_$S($G(NDC)'="":" ("_NDC_")",1:"")_$$STS(RX,RFL,+RESP)
"RTN","PSOBPSU1",179,0)
 . D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOBPSU1",180,0)
 Q
"RTN","PSOBPSU1",181,0)
 ;
"RTN","PSOBPSU1",182,0)
DOS(RX,RFL,DATE) ; Return the Date Of Service for ECME
"RTN","PSOBPSU1",183,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",184,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",185,0)
 ;       (o) DATE - Possible Date Of Service
"RTN","PSOBPSU1",186,0)
 ;Output:    DOS  - Actual Date Of Service
"RTN","PSOBPSU1",187,0)
 I '$D(RFL) S RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",188,0)
 ; - Retrieving RELEASE DATE from file 52 if DATE not passed in
"RTN","PSOBPSU1",189,0)
 I $G(DATE)="" S DATE=$$RXRLDT^PSOBPSUT(RX,RFL)
"RTN","PSOBPSU1",190,0)
 ; - If no date or future date, use today's date
"RTN","PSOBPSU1",191,0)
 I DATE>DT!'DATE S DATE=$$DT^XLFDT
"RTN","PSOBPSU1",192,0)
 Q (DATE\1)
"RTN","PSOBPSU1",193,0)
 ;
"RTN","PSOBPSU1",194,0)
RELEASE(RX,RFL,USR) ; - Notifies IB that the Rx was RELEASED
"RTN","PSOBPSU1",195,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",196,0)
 ;       (o) RFL  - Refill # (Default: most recent)
"RTN","PSOBPSU1",197,0)
 ;       (o) USR  - User responsible for releasing the Rx (Default: .5 - Postmaster)
"RTN","PSOBPSU1",198,0)
 N IBAR,RXAR,RFAR,PSOIBN
"RTN","PSOBPSU1",199,0)
 S:'$D(RFL) RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",200,0)
 S:'$D(USR) USR=.5
"RTN","PSOBPSU1",201,0)
 D GETS^DIQ(52,RX_",",".01;2;6;7;8;22","I","RXAR")
"RTN","PSOBPSU1",202,0)
 S DFN=+$G(RXAR(52,RX_",",2,"I"))
"RTN","PSOBPSU1",203,0)
 S IBAR("PRESCRIPTION")=RX,IBAR("RX NO")=$G(RXAR(52,RX_",",.01,"I"))
"RTN","PSOBPSU1",204,0)
 S IBAR("CLAIMID")=$P($$CLAIM^BPSBUTL(RX,RFL),U,6)
"RTN","PSOBPSU1",205,0)
 S IBAR("USER")=USR
"RTN","PSOBPSU1",206,0)
 S IBAR("DRUG")=RXAR(52,RX_",",6,"I"),IBAR("NDC")=$$GETNDC^PSONDCUT(RX,RFL)
"RTN","PSOBPSU1",207,0)
 S IBAR("FILL NUMBER")=RFL,IBAR("DOS")=$$DOS(RX,RFL),IBAR("RELEASE DATE")=$$RXRLDT^PSOBPSUT(RX,RFL)
"RTN","PSOBPSU1",208,0)
 S IBAR("QTY")=$G(RXAR(52,RX_",",7,"I")),IBAR("DAYS SUPPLY")=$G(RXAR(52,RX_",",8,"I"))
"RTN","PSOBPSU1",209,0)
 I RFL D
"RTN","PSOBPSU1",210,0)
 . D GETS^DIQ(52.1,RFL_","_RX_",",".01;1;1.1","I","RFAR")
"RTN","PSOBPSU1",211,0)
 . S IBAR("QTY")=$G(RFAR(52.1,RFL_","_RX_",",1,"I"))
"RTN","PSOBPSU1",212,0)
 . S IBAR("DAYS SUPPLY")=$G(RFAR(52.1,RFL_","_RX_",",1.1,"I"))
"RTN","PSOBPSU1",213,0)
 S IBAR("STATUS")="RELEASED"
"RTN","PSOBPSU1",214,0)
 S PSOIBN=$$STORESP^IBNCPDP(DFN,.IBAR)
"RTN","PSOBPSU1",215,0)
 Q
"RTN","PSOBPSU1",216,0)
 ;
"RTN","PSOBPSU1",217,0)
LSTRFL(RX) ;  - Returns the latest fill for the Rx
"RTN","PSOBPSU1",218,0)
 ; Input: (r) RX     - Rx IEN (#52)
"RTN","PSOBPSU1",219,0)
 ;Output:     LSTRFL - Most recent refill #
"RTN","PSOBPSU1",220,0)
 N I,LSTRFL
"RTN","PSOBPSU1",221,0)
 S (I,LSTRFL)=0 F  S I=$O(^PSRX(RX,1,I)) Q:'I  S LSTRFL=I
"RTN","PSOBPSU1",222,0)
 Q LSTRFL
"RTN","PSOBPSU1",223,0)
 ;
"RTN","PSOBPSU1",224,0)
ECMEACT(RX,RFL,COMM,USR) ; - Add an Act to the ECME Act Log (FILE 52)
"RTN","PSOBPSU1",225,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",226,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",227,0)
 ;       (r) COMM - Comments (up to 75 characters)
"RTN","PSOBPSU1",228,0)
 ;       (o) USR  - User logging the comments (Default: DUZ)
"RTN","PSOBPSU1",229,0)
 S:'$D(RFL) RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOBPSU1",230,0)
 D RXACT^PSOBPSU2(RX,RFL,COMM,"M",+$G(USR))
"RTN","PSOBPSU1",231,0)
 Q
"RTN","PSOBPSU1",232,0)
 ;
"RTN","PSOBPSU1",233,0)
STS(RX,RFL,RSP) ; Adds the Status to the ECME Act Log according to Rx/fill claim status Response
"RTN","PSOBPSU1",234,0)
 N STS
"RTN","PSOBPSU1",235,0)
 S STS=$S($$STATUS^PSOBPSUT(RX,RFL)'="IN PROGRESS"&($$STATUS^PSOBPSUT(RX,RFL)'=""):"-"_$$STATUS^PSOBPSUT(RX,RFL),1:"")
"RTN","PSOBPSU1",236,0)
 S:+RSP=1 STS="-NO SUBMISSION THROUGH ECME" S:+RSP=3 STS="-NO REVERSAL NEEDED" S:+RSP=4 STS="-NOT PROCESSED"
"RTN","PSOBPSU1",237,0)
 S:+RSP=5 STS="-SOFTWARE ERROR"_$S($P($G(RESP),"^",2)'="":" ("_$P(RESP,"^",2)_")",1:"")
"RTN","PSOBPSU1",238,0)
 I +RSP=2,$$STATUS^PSOBPSUT(RX,RFL)'="" S STS="-NOT BILLABLE:"_$S(PSOELIG="T":"TRICARE",PSOELIG="C":"CHAMPVA",1:"")_":"_$P(RSP,"^",2)
"RTN","PSOBPSU1",239,0)
 Q STS
"RTN","PSODRG")
0^1^B79401497
"RTN","PSODRG",1,0)
PSODRG ;IHS/DSD/JCM - ORDER ENTRY DRUG SELECTION ;2/16/12 12:50pm
"RTN","PSODRG",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**20,23,36,53,54,46,112,139,207,148,243,268,324,251,375,387,398,390,427**;DEC 1997;Build 21
"RTN","PSODRG",3,0)
 ;Reference ^PSDRUG supported by DBIA 221
"RTN","PSODRG",4,0)
 ;Reference ^PS(50.7 supported by DBIA 2223
"RTN","PSODRG",5,0)
 ;Reference to PSSDIN supported by DBIA 3166
"RTN","PSODRG",6,0)
 ;Reference to $$NDCFMT^PSSNDCUT supported by IA 4707
"RTN","PSODRG",7,0)
 ;Reference to OROCAPI controlled subscription supported by IA 5367
"RTN","PSODRG",8,0)
 ;Reference to $$OITM^ORX8 supported by IA 5469
"RTN","PSODRG",9,0)
 ;Reference to ^VADPT supported by IA 10061
"RTN","PSODRG",10,0)
 ;Reference to IN^PSSHRQ2 supported by DBIA 5369
"RTN","PSODRG",11,0)
 ;----------------------------------------------------------
"RTN","PSODRG",12,0)
START ;
"RTN","PSODRG",13,0)
 S (PSONEW("DFLG"),PSONEW("FIELD"),PSODRG("QFLG"))=0 K PSORX("DFLG")
"RTN","PSODRG",14,0)
 D @($S(+$G(PSOEDIT)=1&('$D(DA)):"SELECT^PSODRGN",1:"SELECT"))
"RTN","PSODRG",15,0)
 G:$G(PSORXED("DFLG")) END ; Select Drug
"RTN","PSODRG",16,0)
 I $G(PSORX("EDIT")),$G(PSOY),$G(PSODRUG("IEN"))=+PSOY D  G:$G(PSORXED("DFLG")) END
"RTN","PSODRG",17,0)
 . N NDC D NDC(+$G(PSORXED("IRXN")),0,+PSOY,.NDC) I $G(NDC)="^" S PSORXED("DFLG")=1 Q
"RTN","PSODRG",18,0)
 . I $G(NDC)'="" S (PSODRUG("NDC"),PSORXED("FLD",27))=NDC
"RTN","PSODRG",19,0)
 ;
"RTN","PSODRG",20,0)
 I $G(PSORX("EDIT"))]"",'PSONEW("FIELD") D TRADE
"RTN","PSODRG",21,0)
 G:$G(PSONEW("DFLG"))!($G(PSODRG("QFLG")))!($G(PSORXED("DFLG"))) END
"RTN","PSODRG",22,0)
 D SET ; Set various drug information
"RTN","PSODRG",23,0)
 D NFI ; Display dispense drug/orderable item text
"RTN","PSODRG",24,0)
 D:'$G(PSOEDIT) POST I $G(PSORX("DFLG")) S PSONEW("DFLG")=1 K:'$G(PSORX("EDIT")) PSORX("DFLG") ; Do any post selection action
"RTN","PSODRG",25,0)
END ;D EOJ
"RTN","PSODRG",26,0)
 Q
"RTN","PSODRG",27,0)
 ;------------------------------------------------------------
"RTN","PSODRG",28,0)
 ;
"RTN","PSODRG",29,0)
SELECT ;
"RTN","PSODRG",30,0)
 K:'$G(PSORXED) CLOZPAT
"RTN","PSODRG",31,0)
 K IT,DIC,X,Y,PSODRUG("TRADE NAME"),PSODRUG("NDC"),PSODRUG("DAW"),PSODRUG("BAD") S:$G(POERR)&($P($G(OR0),"^",9)) Y=$P(^PSDRUG($P(OR0,"^",9),0),"^")
"RTN","PSODRG",32,0)
 I $G(PSODRUG("IEN"))]"" S Y=PSODRUG("NAME"),PSONEW("OLD VAL")=PSODRUG("IEN")
"RTN","PSODRG",33,0)
 W !,"DRUG: "_$S($G(Y)]"":Y_"// ",1:"") R X:$S($D(DTIME):DTIME,1:300) I '$T S DTOUT=1
"RTN","PSODRG",34,0)
 I X="",$G(Y)]"" S:Y X=Y S:'X X=$G(PSODRUG("IEN")) S:X X="`"_X
"RTN","PSODRG",35,0)
 G:X="" SELECT
"RTN","PSODRG",36,0)
 I X?1."?" W !!,"Answer with DRUG NUMBER, or GENERIC NAME, or VA PRODUCT NAME, or",!,"NATIONAL DRUG CLASS, or SYNONYM" G SELECT
"RTN","PSODRG",37,0)
 I $G(PSORXED),X["^" S PSORXED("DFLG")=1 G SELECTX
"RTN","PSODRG",38,0)
 I X="^"!(X["^^")!($D(DTOUT)) S PSONEW("DFLG")=1 G SELECTX
"RTN","PSODRG",39,0)
 I '$G(POERR),X[U,$L(X)>1 S PSODIR("FLD")=PSONEW("FLD") D JUMP^PSODIR1 S:$G(PSODIR("FIELD")) PSONEW("FIELD")=PSODIR("FIELD") K PSODIR S PSODRG("QFLG")=1 G SELECTX
"RTN","PSODRG",40,0)
 S DIC=50,DIC(0)="EMQZVT",DIC("T")="",D="B^C^VAPN^VAC"
"RTN","PSODRG",41,0)
 S DIC("S")="I $S('$D(^PSDRUG(+Y,""I"")):1,'^(""I""):1,DT'>^(""I""):1,1:0),$S($P($G(^PSDRUG(+Y,2)),""^"",3)'[""O"":0,1:1),$D(^PSDRUG(""ASP"",+$G(^(2)),+Y))"
"RTN","PSODRG",42,0)
 D MIX^DIC1 K DIC,D
"RTN","PSODRG",43,0)
 I $D(DTOUT) S PSONEW("DFLG")=1 G SELECTX
"RTN","PSODRG",44,0)
 I $D(DUOUT) K DUOUT G SELECT
"RTN","PSODRG",45,0)
 I Y<0 G SELECT
"RTN","PSODRG",46,0)
 S:$G(PSONEW("OLD VAL"))=+Y&('$G(PSOEDIT)) PSODRG("QFLG")=1
"RTN","PSODRG",47,0)
 K PSOY S PSOY=Y,PSOY(0)=Y(0)
"RTN","PSODRG",48,0)
 I $P(PSOY(0),"^")="OTHER DRUG"!($P(PSOY(0),"^")="OUTSIDE DRUG") D TRADE
"RTN","PSODRG",49,0)
SELECTX K X,Y,DTOUT,DUOUT,PSONEW("OLD VAL")
"RTN","PSODRG",50,0)
 Q
"RTN","PSODRG",51,0)
 ;
"RTN","PSODRG",52,0)
NDC(RX,RFL,DRG,NDC) ; Editing NDC for Released Rx's or for Unresolved ECME Rejects
"RTN","PSODRG",53,0)
 S NDC=$S($G(NDC)'="":$G(NDC),1:$$GETNDC^PSONDCUT(RX,.RFL))
"RTN","PSODRG",54,0)
 ; Check if we should edit the NDC
"RTN","PSODRG",55,0)
 ; Needs to be released or have unresolved billable rejects (PSO*7*427)
"RTN","PSODRG",56,0)
 ;
"RTN","PSODRG",57,0)
 N PSOCONT S PSOCONT=0                         ; continue flag
"RTN","PSODRG",58,0)
 D  Q:'PSOCONT                                 ; get out if NDC edit not allowed
"RTN","PSODRG",59,0)
 . I $$RXRLDT^PSOBPSUT(RX,RFL) S PSOCONT=1 Q   ; Released - continue and allow edit
"RTN","PSODRG",60,0)
 . I $$FIND^PSOREJUT(RX,RFL),$$STATUS^PSOBPSUT(RX,RFL)'="" S PSOCONT=1 Q    ; unreleased w/unresolved billable rejections
"RTN","PSODRG",61,0)
 . Q
"RTN","PSODRG",62,0)
 ;
"RTN","PSODRG",63,0)
 S NDC=$S($G(NDC)'="":$G(NDC),1:$$GETNDC^PSONDCUT(RX,.RFL))
"RTN","PSODRG",64,0)
 D NDCEDT^PSONDCUT(RX,.RFL,$G(DRG),$G(PSOSITE),.NDC)
"RTN","PSODRG",65,0)
 Q
"RTN","PSODRG",66,0)
 ;
"RTN","PSODRG",67,0)
TRADE ;
"RTN","PSODRG",68,0)
 K DIR,DIC,DA,X,Y
"RTN","PSODRG",69,0)
 S DIR(0)="52,6.5" S:$G(PSOTRN)]"" DIR("B")=$G(PSOTRN) D ^DIR K DIR,DIC
"RTN","PSODRG",70,0)
 I X="@" S Y=X K DIRUT
"RTN","PSODRG",71,0)
 I $D(DIRUT) S:$D(DUOUT)!$D(DTOUT)&('$D(PSORX("EDIT"))) PSONEW("DFLG")=1 G TRADEX
"RTN","PSODRG",72,0)
 S PSODRUG("TRADE NAME")=Y
"RTN","PSODRG",73,0)
TRADEX I $G(PSORXED("DFLG")),$D(DIRUT) S PSORXED("DFLG")=1
"RTN","PSODRG",74,0)
 K DIRUT,DTOUT,DUOUT,X,Y,DA,DR,DIE
"RTN","PSODRG",75,0)
 Q
"RTN","PSODRG",76,0)
SET ;
"RTN","PSODRG",77,0)
 N STAT S PSODRUG("IEN")=+PSOY,PSODRUG("VA CLASS")=$P(PSOY(0),"^",2)
"RTN","PSODRG",78,0)
 S PSODRUG("NAME")=$P(PSOY(0),"^")
"RTN","PSODRG",79,0)
 S:+$G(^PSDRUG(+PSOY,2)) PSODRUG("OI")=+$G(^(2)),PSODRUG("OIN")=$P(^PS(50.7,+$G(^(2)),0),"^")
"RTN","PSODRG",80,0)
 S PSODRUG("NDF")=$S($G(^PSDRUG(+PSOY,"ND"))]"":+^("ND")_"A"_$P(^("ND"),"^",3),1:0)
"RTN","PSODRG",81,0)
 S PSODRUG("MAXDOSE")=$P(PSOY(0),"^",4),PSODRUG("DEA")=$P(PSOY(0),"^",3)
"RTN","PSODRG",82,0)
 S PSODRUG("CLN")=$S($D(^PSDRUG(+PSOY,"ND")):+$P(^("ND"),"^",6),1:0)
"RTN","PSODRG",83,0)
 S PSODRUG("SIG")=$P(PSOY(0),"^",5)
"RTN","PSODRG",84,0)
 I $G(PSODRUG("NDC"))="" S PSODRUG("NDC")=$$GETNDC^PSSNDCUT(+PSOY,$G(PSOSITE))
"RTN","PSODRG",85,0)
 S PSODRUG("DAW")=+$$GET1^DIQ(50,+PSOY,81)
"RTN","PSODRG",86,0)
 S PSODRUG("STKLVL")=$G(^PSDRUG(+PSOY,660.1))
"RTN","PSODRG",87,0)
 G:$G(^PSDRUG(+PSOY,660))']"" SETX
"RTN","PSODRG",88,0)
 S PSOX1=$G(^PSDRUG(+PSOY,660))
"RTN","PSODRG",89,0)
 S PSODRUG("COST")=$P($G(PSOX1),"^",6)
"RTN","PSODRG",90,0)
 S PSODRUG("UNIT")=$P($G(PSOX1),"^",8)
"RTN","PSODRG",91,0)
 S PSODRUG("EXPIRATION DATE")=$P($G(PSOX1),"^",9)
"RTN","PSODRG",92,0)
SETX K PSOX1,PSOY
"RTN","PSODRG",93,0)
 Q
"RTN","PSODRG",94,0)
NFI ;display restriction/guidelines
"RTN","PSODRG",95,0)
 D EN^PSSDIN(PSODRUG("OI"),PSODRUG("IEN")) S NFI=$$PROMPT^PSSDIN
"RTN","PSODRG",96,0)
 I NFI]"","ODY"[NFI D TD^PSONFI
"RTN","PSODRG",97,0)
 K NFI Q
"RTN","PSODRG",98,0)
POST ;order checks
"RTN","PSODRG",99,0)
 N LIST S LIST="PSOPEPS"
"RTN","PSODRG",100,0)
 K PSODOSD,^TMP("PSORXDC",$J),^TMP($J,LIST)
"RTN","PSODRG",101,0)
 K ZDGDG,ZTHER,IT,PSODLQT,PSODOSD
"RTN","PSODRG",102,0)
 S ^TMP($J,LIST,"IN","PING")="" D IN^PSSHRQ2(LIST)
"RTN","PSODRG",103,0)
 K DIR I $P(^TMP($J,LIST,"OUT",0),"^")=-1 D DATACK^PSODDPRE
"RTN","PSODRG",104,0)
 K ^TMP($J,LIST,"IN"),^TMP($J,LIST,"OUT","EXCEPTIONS")
"RTN","PSODRG",105,0)
 G:$G(PSORX("DFLG"))!($G(PSORXED("DFLG"))) POSTX
"RTN","PSODRG",106,0)
 K PSORX("INTERVENE") N STAT,SIG,PTR,NDF,VAP S PSORX("DFLG")=0
"RTN","PSODRG",107,0)
 W !! D HD^PSODDPR2():(($Y+5)'>IOSL)
"RTN","PSODRG",108,0)
 D ^PSOBUILD
"RTN","PSODRG",109,0)
 D:'$D(PSODGCK) @$S($G(COPY):"^PSOCPPRE",1:"^PSODDPRE") ; Duplicate drug check
"RTN","PSODRG",110,0)
 G:$G(PSORX("DFLG")) POSTX
"RTN","PSODRG",111,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL)
"RTN","PSODRG",112,0)
 I $P($G(^PSDRUG(PSODRUG("IEN"),"CLOZ1")),"^")="PSOCLO1" W !,"Now doing Clozapine Order checks.  Please wait...",! D CLOZ
"RTN","PSODRG",113,0)
 G:PSORX("DFLG") POSTX
"RTN","PSODRG",114,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL)
"RTN","PSODRG",115,0)
 W !,"Now doing allergy checks.  Please wait...",!
"RTN","PSODRG",116,0)
 S PSONOAL="" D ALLERGY^PSOORUT2 D:PSONOAL'="" NOALRGY K PSONOAL
"RTN","PSODRG",117,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL)
"RTN","PSODRG",118,0)
 G:PSORX("DFLG") POSTX
"RTN","PSODRG",119,0)
 I '$D(PSODGCKX) D ^PSODGAL1 K PSORX("INTERVENE")
"RTN","PSODRG",120,0)
 ;This is the allergy check for profile drugs
"RTN","PSODRG",121,0)
 I $D(PSODGCK),$D(PSOSD) D PRFLP^PSOUTL
"RTN","PSODRG",122,0)
 ;aminoglycoside
"RTN","PSODRG",123,0)
 N AOC
"RTN","PSODRG",124,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL)
"RTN","PSODRG",125,0)
 S AOC=$$AOC^OROCAPI(PSODFN,$P(PSODRUG("NDF"),"A",2)) I $P(AOC,"^",4)]"" D
"RTN","PSODRG",126,0)
 .W !!,"***Aminoglycoside Ordered***",!!
"RTN","PSODRG",127,0)
 .K ^UTILITY($J,"W") S DIWL=1,DIWR=78,DIWF="" S X=$P(AOC,"^",4) D ^DIWP
"RTN","PSODRG",128,0)
 .W !! F ZX=0:0 S ZX=$O(^UTILITY($J,"W",1,ZX)) Q:'ZX  W ?2,^UTILITY($J,"W",1,ZX,0),! D HD^PSODDPR2():(($Y+5)'>IOSL)
"RTN","PSODRG",129,0)
 .K ^UTILITY($J,"W")
"RTN","PSODRG",130,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL)
"RTN","PSODRG",131,0)
 ;dangerous meds for pat >64
"RTN","PSODRG",132,0)
 I $G(PSODRUG("OI")) D
"RTN","PSODRG",133,0)
 .N OI,OIR S OI=$$OITM^ORX8(PSODRUG("OI"),"99PSP") Q:'OI
"RTN","PSODRG",134,0)
 .S OIR=$$DOC^OROCAPI(PSODFN,OI) I $P(OIR,"^",4)]"" D
"RTN","PSODRG",135,0)
 ..D HD^PSODDPR2():(($Y+5)'>IOSL) W !!,"***Dangerous Meds for Patient >64***",!! S DFN=PSODFN D DEM^VADPT
"RTN","PSODRG",136,0)
 ..K ^UTILITY($J,"W") S DIWL=1,DIWR=78,DIWF="" S X=$P(OIR,"^",4) D ^DIWP
"RTN","PSODRG",137,0)
 ..F ZX=0:0 S ZX=$O(^UTILITY($J,"W",1,ZX)) Q:'ZX  W ?2,^UTILITY($J,"W",1,ZX,0),! D HD^PSODDPR2():(($Y+5)'>IOSL)
"RTN","PSODRG",138,0)
 ..K ^UTILITY($J,"W")
"RTN","PSODRG",139,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL)
"RTN","PSODRG",140,0)
 ;metformin lab results
"RTN","PSODRG",141,0)
 N GOC S GOC=$$GOC^OROCAPI(PSODFN,PSODRUG("NAME")) I $P(GOC,"^",4)]"" D
"RTN","PSODRG",142,0)
 .W !!,"***Metformin Lab Results***",!!
"RTN","PSODRG",143,0)
 .K ^UTILITY($J,"W") S DIWL=1,DIWR=78,DIWF="" S X=$P(GOC,"^",4) D ^DIWP
"RTN","PSODRG",144,0)
 .F ZX=0:0 S ZX=$O(^UTILITY($J,"W",1,ZX)) Q:'ZX  W ?2,^UTILITY($J,"W",1,ZX,0),! D HD^PSODDPR2():(($Y+5)'>IOSL)
"RTN","PSODRG",145,0)
 .K ^UTILITY($J,"W")
"RTN","PSODRG",146,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL)
"RTN","PSODRG",147,0)
 K DIWF,DIWL,DIWR,ZX,DFN
"RTN","PSODRG",148,0)
 I $G(PSODRUG("DEA"))["S"!($E($G(PSODRUG("VA CLASS")),1,2)="XA") D  G POSTX ;stops if drug is supply
"RTN","PSODRG",149,0)
 .W !,"Now Processing Enhanced Order Checks!  Please wait...",! H 1
"RTN","PSODRG",150,0)
 ;enhanced OC
"RTN","PSODRG",151,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL)
"RTN","PSODRG",152,0)
 W ! D @$S($G(COPY):"OBX^PSOCPPRE",1:"OBX^PSODDPRE") ; Set PSORX("DFLG")=1 if process to stop new enhanced order checks
"RTN","PSODRG",153,0)
POSTX ;
"RTN","PSODRG",154,0)
 K IT,^TMP($J,"DI"),PSORX("INTERVENE"),DA,^TMP($J,"PSODRDI"),ZDGDG,ZTHER K ^TMP($J,"DI"_PSODFN),PSZZQUIT
"RTN","PSODRG",155,0)
 Q
"RTN","PSODRG",156,0)
 ;
"RTN","PSODRG",157,0)
EOJ ;
"RTN","PSODRG",158,0)
 K PSODRG
"RTN","PSODRG",159,0)
 Q
"RTN","PSODRG",160,0)
WAIT ;
"RTN","PSODRG",161,0)
 K DIR S DIR(0)="E",DIR("?")="Press Return to continue",DIR("A")="Press Return to continue..." W !
"RTN","PSODRG",162,0)
 D ^DIR K DIRUT,DUOUT,DIR,X,Y
"RTN","PSODRG",163,0)
 Q
"RTN","PSODRG",164,0)
 ;
"RTN","PSODRG",165,0)
CLOZ ;
"RTN","PSODRG",166,0)
 S ANQRTN=$P(^PSDRUG(PSODRUG("IEN"),"CLOZ1"),"^"),ANQX=0
"RTN","PSODRG",167,0)
 S P(5)=PSODRUG("IEN"),DFN=PSODFN,X=ANQRTN
"RTN","PSODRG",168,0)
 X ^%ZOSF("TEST") I  D @("^"_ANQRTN) S:$G(ANQX) PSORX("DFLG")=1
"RTN","PSODRG",169,0)
 K P(5),ANQRTN,ANQX,X,DFN
"RTN","PSODRG",170,0)
 Q
"RTN","PSODRG",171,0)
 ;
"RTN","PSODRG",172,0)
EN(DRG) ;returns lab test identified for clozapine order checking
"RTN","PSODRG",173,0)
 K LAB I $P($G(^PSDRUG(DRG,"CLOZ1")),"^")'="PSOCLO1" S LAB("NOT")=0 Q
"RTN","PSODRG",174,0)
 I $P($G(^PSDRUG(DRG,"CLOZ1")),"^")="PSOCLO1" D
"RTN","PSODRG",175,0)
 .S (CNT,I)=0 F  S I=$O(^PSDRUG(DRG,"CLOZ2",I)) Q:'I  S CNT=$G(CNT)+1
"RTN","PSODRG",176,0)
 .I CNT'=2 S LAB("BAD TEST")=0 K CNT Q
"RTN","PSODRG",177,0)
 .K CNT F I=0:0 S I=$O(^PSDRUG(DRG,"CLOZ2",I)) Q:'I  D
"RTN","PSODRG",178,0)
 ..S LABT=$S($P(^PSDRUG(DRG,"CLOZ2",I,0),"^",4)=1:"WBC",1:"ANC"),LAB(LABT)=$P(^PSDRUG(DRG,"CLOZ2",I,0),"^")_"^"_$P(^(0),"^",3)_"^"_$P(^(0),"^",4)
"RTN","PSODRG",179,0)
 K LABT,I
"RTN","PSODRG",180,0)
 Q
"RTN","PSODRG",181,0)
NOALRGY ;
"RTN","PSODRG",182,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL)
"RTN","PSODRG",183,0)
 N DIR S DIR(0)="SA^1:YES;0:NO"
"RTN","PSODRG",184,0)
 I $D(^TMP($J,"PSOINTERVENE",+PSODFN)) D  Q
"RTN","PSODRG",185,0)
 .S DIR("A")="No Allergy Assessment - Do you want to duplicate Intervention?: ",DIR("B")="Yes"
"RTN","PSODRG",186,0)
 .D ^DIR
"RTN","PSODRG",187,0)
 .I 'Y D  Q
"RTN","PSODRG",188,0)
 ..I Y=0 D ^PSORXI Q
"RTN","PSODRG",189,0)
 ..S PSORX("DFLG")=1
"RTN","PSODRG",190,0)
 .D DUPINV^PSORXI
"RTN","PSODRG",191,0)
 W $C(7),!,"There is no allergy assessment on file for this patient."
"RTN","PSODRG",192,0)
 W !,"You will be prompted to intervene if you continue with this prescription"
"RTN","PSODRG",193,0)
 I $D(PSODGCK) W ! K DIR S DIR(0)="E",DIR("A")="Press Return to Continue..." D ^DIR K DIR
"RTN","PSODRG",194,0)
 Q:$D(PSODGCK)
"RTN","PSODRG",195,0)
 N DUOUT,DTOUT,RXIEN,RXSTA               ;*398
"RTN","PSODRG",196,0)
 S DIR("A")="Do you want to Continue?: ",DIR("B")="N" D ^DIR
"RTN","PSODRG",197,0)
 I 'Y!($D(DUOUT))!($D(DTOUT)) D  Q       ;*398 - Exit/Timeout
"RTN","PSODRG",198,0)
 .I $D(PSONV) S PSZZQUIT=1 Q
"RTN","PSODRG",199,0)
 .S PSORX("DFLG")=1
"RTN","PSODRG",200,0)
 .I '$O(PSCAN(0)) Q                      ;*398 - Array has Rx IEN
"RTN","PSODRG",201,0)
 .I $G(REA)'="R" Q                       ;*398 - Reinstate only
"RTN","PSODRG",202,0)
 .S RXIEN=+$G(PSCAN(RX)) I 'RXIEN Q      ;*398 - Get Rx IEN
"RTN","PSODRG",203,0)
 .S RXSTA=$$GET1^DIQ(52,RXIEN,100,"I")   ;*398 - Get status
"RTN","PSODRG",204,0)
 .I RXSTA=12 Q                           ;*398 - Correct status
"RTN","PSODRG",205,0)
 .S DIE="^PSRX(",DA=RXIEN,DR="100///12"  ;*398 - Discontinued
"RTN","PSODRG",206,0)
 .D ^DIE                                 ;*398 - Update Rx file
"RTN","PSODRG",207,0)
 I $D(PSONV) S PSORX("INTERVENE")=0 D EN1^PSORXI(PSONV) Q
"RTN","PSODRG",208,0)
 D ^PSORXI
"RTN","PSODRG",209,0)
 Q
"RTN","PSOORAL2")
0^2^B19100790
"RTN","PSOORAL2",1,0)
PSOORAL2 ;BHAM-ISC/SAB - build listman activity logs con't ;04/28/95
"RTN","PSOORAL2",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**258,260,386,427**;DEC 1997;Build 21
"RTN","PSOORAL2",3,0)
RF ;refill log
"RTN","PSOORAL2",4,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Refill Log:"
"RTN","PSOORAL2",5,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#  Log Date   Refill Date  Qty               Routing  Lot #       Pharmacist",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSOORAL2",6,0)
 S (RF,PL)=0 F RF=0:0 S RF=$O(^PSRX(DA,1,RF)) Q:'RF  S PL=PL+1
"RTN","PSOORAL2",7,0)
 I 'PL S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There are NO Refills For this  Prescription" Q
"RTN","PSOORAL2",8,0)
 F N=0:0 S N=$O(^PSRX(DA,1,N)) Q:'N  S P1=^(N,0) D
"RTN","PSOORAL2",9,0)
 .S DTT=$P(P1,"^",8)\1 D DAT S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=N_"   "_DAT_"   "
"RTN","PSOORAL2",10,0)
 .S DTT=$P(P1,"^"),$P(RN," ",10)=" " D DAT
"RTN","PSOORAL2",11,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_DAT_"     "_$P(P1,"^",4)_$E("               ",$L($P(P1,"^",4))+1,15)_"  "_$S($P(P1,"^",2)="M":"Mail",1:"Window")_" "_$P(P1,"^",6)_$E(RN,$L($P(P1,"^",6))+1,12)
"RTN","PSOORAL2",12,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_$E($S($D(^VA(200,+$P(P1,"^",5),0)):$P(^(0),"^"),1:""),1,16)
"RTN","PSOORAL2",13,0)
 .S PSDIV=$S($D(^PS(59,+$P(P1,"^",9),0)):$P(^(0),"^",6),1:"Unknown"),IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Division: "_PSDIV_$E("        ",$L(PSDIV)+1,8)_"  "
"RTN","PSOORAL2",14,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"Dispensed: "_$S($P(P1,"^",19):$E($P(P1,"^",19),4,5)_"/"_$E($P(P1,"^",19),6,7)_"/"_$E($P(P1,"^",19),2,3),1:"")_"  "
"RTN","PSOORAL2",15,0)
 .S RTS=$S($P(P1,"^",16):" Returned to Stock: "_$E($P(P1,"^",16),4,5)_"/"_$E($P(P1,"^",16),6,7)_"/"_$E($P(P1,"^",16),2,3),1:" Released: "_$S($$RXRLDT^PSOBPSUT(DA,N):$$FMTE^XLFDT($$RXRLDT^PSOBPSUT(DA,N)\1,2),1:""))
"RTN","PSOORAL2",16,0)
 .;
"RTN","PSOORAL2",17,0)
 .; Always display the NDC# - PSO*7*427
"RTN","PSOORAL2",18,0)
 .S RTS=RTS_"  NDC: "_$$GETNDC^PSONDCUT(DA,N)
"RTN","PSOORAL2",19,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_RTS S:$P(P1,"^",3)]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="   Remarks: "_$P(P1,"^",3)
"RTN","PSOORAL2",20,0)
 K RTS Q
"RTN","PSOORAL2",21,0)
PAR ;partial log
"RTN","PSOORAL2",22,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Partial Fills:"
"RTN","PSOORAL2",23,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#   Log Date   Date     Qty              Routing    Lot #        Pharmacist",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSOORAL2",24,0)
 I '$O(^PSRX(DA,"P",0)) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There are NO Partials for this Prescription" Q
"RTN","PSOORAL2",25,0)
 S N=0 F  S N=$O(^PSRX(DA,"P",N)) Q:'N  S P1=^(N,0),DTT=$P(P1,"^",8)\1 D DAT D
"RTN","PSOORAL2",26,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=N_"   "_DAT_"  ",QTY=$P(P1,"^",4)_$E("               ",$L($P(P1,"^",4))+1,15)
"RTN","PSOORAL2",27,0)
 .S DTT=$P(P1,"^") D DAT S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_DAT_"  "_QTY_"  "
"RTN","PSOORAL2",28,0)
 .S PSDIV=$S($D(^PS(59,+$P(P1,"^",9),0)):$P(^(0),"^",6),1:"UNKNOWN"),PSDIV=PSDIV_$E("        ",$L(PSDIV)+1,8)
"RTN","PSOORAL2",29,0)
 .S MW=$S($P(P1,"^",2)="M":"Mail",1:"Window"),MW=MW_$E("          ",$L(MW)+1,10)
"RTN","PSOORAL2",30,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_MW_"  "_$P(P1,"^",6)_$E("            ",$L($P(P1,"^",6))+1,10)_$E($S($D(^VA(200,+$P(P1,"^",5),0)):$P(^(0),"^"),1:""),1,16)
"RTN","PSOORAL2",31,0)
 .S RTS=$S($P(P1,"^",16):" RETURNED TO STOCK: "_$E($P(P1,"^",16),4,5)_"/"_$E($P(P1,"^",16),6,7)_"/"_$E($P(P1,"^",16),2,3),1:" RELEASED: "_$S($P(P1,"^",19):$E($P(P1,"^",19),4,5)_"/"_$E($P(P1,"^",19),6,7)_"/"_$E($P(P1,"^",19),2,3),1:""))
"RTN","PSOORAL2",32,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Division: "_PSDIV_" "_RTS ;_"      Entry By: "_$P(^VA(200,$P(P1,"^",7),0),"^")
"RTN","PSOORAL2",33,0)
 .S:$P(P1,"^",3)]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="  REMARKS: "_$P(P1,"^",3) K RTS
"RTN","PSOORAL2",34,0)
 Q
"RTN","PSOORAL2",35,0)
HLD ;hold info
"RTN","PSOORAL2",36,0)
 S DTT=$P(^PSRX(DA,"H"),"^",3) D DAT S HLDR=$$GET1^DIQ(52,DA,99)
"RTN","PSOORAL2",37,0)
 S $P(RN," ",60)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Hold Reason: "_HLDR_$E(RN,$L("Hold Reason: "_HLDR)+1,60)_"Hold Date: "_DAT
"RTN","PSOORAL2",38,0)
 I $P($G(^PSRX(DA,"H")),"^",2)]"" D
"RTN","PSOORAL2",39,0)
 . N HLDCOMM S HLDCOMM=$P(^PSRX(DA,"H"),"^",2)
"RTN","PSOORAL2",40,0)
 . S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Hold Comments: "_$E(HLDCOMM,1,65),HLDCOMM=$E(HLDCOMM,66,999)
"RTN","PSOORAL2",41,0)
 . F  Q:HLDCOMM=""  D
"RTN","PSOORAL2",42,0)
 . . S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="               "_$E(HLDCOMM,1,65),HLDCOMM=$E(HLDCOMM,66,999)
"RTN","PSOORAL2",43,0)
 K RN,DAT,DTT,HLDR
"RTN","PSOORAL2",44,0)
 Q
"RTN","PSOORAL2",45,0)
DAT S DAT="",DTT=DTT\1 Q:DTT'?7N  S DAT=$E(DTT,4,5)_"/"_$E(DTT,6,7)_"/"_$E(DTT,2,3)
"RTN","PSOORAL2",46,0)
 Q
"RTN","PSOORED2")
0^3^B76930084
"RTN","PSOORED2",1,0)
PSOORED2 ;ISC-BHAM/SAB - edit orders from backdoor con't ;03/06/95 10:24
"RTN","PSOORED2",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**2,51,46,78,102,114,117,133,159,148,247,260,281,289,276,358,251,385,427**;DEC 1997;Build 21
"RTN","PSOORED2",3,0)
 ;Reference to $$DIVNCPDP^BPSBUTL supported by IA 4719
"RTN","PSOORED2",4,0)
 ;Reference to $$ECMEON^BPSUTIL supported by IA 4410
"RTN","PSOORED2",5,0)
 ;called from psooredt. cmop edit checks.
"RTN","PSOORED2",6,0)
 Q
"RTN","PSOORED2",7,0)
ISDT D CHK K RF I $G(CMRL) W !,"Released by CMOP.  No editing allowed on Issue Date." D PAUSE^VALM1 K CMRL Q
"RTN","PSOORED2",8,0)
 S %DT="AEX",%DT(0)=-$P(^PSRX(DA,2),"^",2),Y=$P(RX0,"^",13) X ^DD("DD") S %DT("A")="ISSUE DATE: ",%DT("B")=Y D ^%DT I "^"[$E(X) K X,Y,%DT,DTOUT,DUOUT Q
"RTN","PSOORED2",9,0)
 G:Y=-1 ISDT S PSORXED("FLD",1)=Y
"RTN","PSOORED2",10,0)
 ;S DR="1///"_Y,DIE=52 D ^DIE
"RTN","PSOORED2",11,0)
 D KV K X,Y,%DT
"RTN","PSOORED2",12,0)
 Q
"RTN","PSOORED2",13,0)
FLDT D CHK K RF I $G(CMRL) W !,"Released by CMOP.  No editing allowed on Fill Date." D PAUSE^VALM1 K CMRL Q
"RTN","PSOORED2",14,0)
 D KV S Y=$P(^PSRX(DA,2),"^",2) X ^DD("DD") S DIR("A")="FILL DATE",DIR("B")=Y
"RTN","PSOORED2",15,0)
 S DIR(0)="D^"_$P(RX0,"^",13)_":"_$P(PSORXED("RX2"),"^",6)_":EX"
"RTN","PSOORED2",16,0)
 S DIR("?",1)="The earliest fill date allowed is determined by the Issue Date,",DIR("?",2)="the Fill Date cannot be before the Issue Date or past the Expiration Date."
"RTN","PSOORED2",17,0)
 S DIR("?")="Both the month and day are required." D ^DIR
"RTN","PSOORED2",18,0)
 I $D(DIRUT) D KV K PSORXED("FLD",22),X,Y Q
"RTN","PSOORED2",19,0)
 S PSORXED("FLD",22)=Y ;S DR="22R///"_Y,DIE=52 D ^DIE
"RTN","PSOORED2",20,0)
 K X,Y
"RTN","PSOORED2",21,0)
KV K DIR,DUOUT,DTOUT,DIRUT
"RTN","PSOORED2",22,0)
 Q
"RTN","PSOORED2",23,0)
CHK I $D(^PSRX("AR",+$P(PSORXED("RX2"),"^",13),PSORXED("IRXN"))) S CMRL=1 Q
"RTN","PSOORED2",24,0)
 F RF=0:0 S RF=$O(^PSRX(PSORXED("IRXN"),1,RF)) Q:'RF  I $D(^PSRX("AR",+$P(^PSRX(PSORXED("IRXN"),1,RF,0),"^",18),PSORXED("IRXN"))) S CMRL=1
"RTN","PSOORED2",25,0)
 Q
"RTN","PSOORED2",26,0)
CHK1 I +^PSRX(PSORXED("IRXN"),"STA")=5 D  Q:'$G(CMRL)
"RTN","PSOORED2",27,0)
 .S SURX=$O(^PS(52.5,PSORXED("IRXN"),0)) Q:'SURX  I $P(^PS(52.5,SURX,0),"^",7)']""!($P(^(0),"^",7)="Q") S CMRL=1
"RTN","PSOORED2",28,0)
 .E  S CMRL=0
"RTN","PSOORED2",29,0)
 F FEV=0:0 S FEV=$O(^PSRX(PSORXED("IRXN"),4,FEV)) Q:'FEV  I '$P(^PSRX(PSORXED("IRXN"),4,FEV,0),"^",3),$P(^(0),"^",4)<3 S CMRL=0
"RTN","PSOORED2",30,0)
 Q
"RTN","PSOORED2",31,0)
REF ;shows refill info
"RTN","PSOORED2",32,0)
 S RFN=0 F N=0:0 S N=$O(^PSRX(PSORXED("IRXN"),1,N)) Q:'N  S RFM=N,RFN=RFN+1
"RTN","PSOORED2",33,0)
 ;G:RFM=1 SRF 
"RTN","PSOORED2",34,0)
 W ! K DA,DR D KV S DIR(0)="Y",DIR("B")="No",DIR("A")="There "_$S(RFN>1:"are ",1:"is ")_RFN_" refill"_$S(RFN>1:"s.",1:".")_"  Do you want to edit"
"RTN","PSOORED2",35,0)
 D ^DIR D KV Q:'Y
"RTN","PSOORED2",36,0)
SRF W !!,"#  Log Date   Refill Date  Qty               Routing  Lot #       Pharmacist",! F I=1:1:80 W "="
"RTN","PSOORED2",37,0)
 F N=0:0 S N=$O(^PSRX(PSORXED("IRXN"),1,N)) Q:'N  S P1=^(N,0) D
"RTN","PSOORED2",38,0)
 .S DTT=$P(P1,"^",8)\1 D DAT S LOG=DAT,DTT=$P(P1,"^"),$P(RN," ",10)=" " D DAT
"RTN","PSOORED2",39,0)
 .W !,N_"  "_LOG_"   "_DAT_"      "_$P(P1,"^",4)_$E("               ",$L($P(P1,"^",4))+1,15)_"  "_$S($P(P1,"^",2)="M":"MAIL  ",1:"WINDOW")_"   "_$P(P1,"^",6)_$E(RN,$L($P(P1,"^",6))+1,12)
"RTN","PSOORED2",40,0)
 .W $E($S($D(^VA(200,+$P(P1,"^",5),0)):$P(^(0),"^"),1:""),1,16)
"RTN","PSOORED2",41,0)
 .S PSDIV=$S($D(^PS(59,+$P(P1,"^",9),0)):$P(^(0),"^",6),1:"Unknown") W !,"Division: "_PSDIV_$E("        ",$L(PSDIV)+1,8)_"  "
"RTN","PSOORED2",42,0)
 .W "Dispensed: "_$S($P(P1,"^",19):$E($P(P1,"^",19),4,5)_"/"_$E($P(P1,"^",19),6,7)_"/"_$E($P(P1,"^",19),2,3),1:"")_"  "
"RTN","PSOORED2",43,0)
 .S RTS=$S($P(P1,"^",16):" Returned to Stock: "_$E($P(P1,"^",16),4,5)_"/"_$E($P(P1,"^",16),6,7)_"/"_$E($P(P1,"^",16),2,3),1:" Released: "_$S($P(P1,"^",18):$E($P(P1,"^",18),4,5)_"/"_$E($P(P1,"^",18),6,7)_"/"_$E($P(P1,"^",18),2,3),1:""))
"RTN","PSOORED2",44,0)
 .W RTS W:$P(P1,"^",3)]"" !,"   Remarks: "_$P(P1,"^",3)
"RTN","PSOORED2",45,0)
 S DA(1)=PSORXED("IRXN") I RFN=1 S Y=RFM G RFM
"RTN","PSOORED2",46,0)
 W ! D KV S DIR("A")="Select a Refill",DIR(0)="NO^1:"_RFM_":0" D ^DIR Q:$D(DIRUT)
"RTN","PSOORED2",47,0)
RFM I '$D(^PSRX(PSORXED("IRXN"),1,Y,0)) W !,$C(7),"Invalid selection.",! G SRF
"RTN","PSOORED2",48,0)
 S CMRL=0 I $D(^PSRX("AR",+$P(^PSRX(PSORXED("IRXN"),1,Y,0),"^",18),PSORXED("IRXN"),Y)) S CMRL=1 G RFX
"RTN","PSOORED2",49,0)
 F FEV=0:0 S FEV=$O(^PSRX(PSORXED("IRXN"),4,FEV)) Q:'FEV  I $P(^PSRX(PSORXED("IRXN"),4,FEV,0),"^",3)=Y,$P(^(0),"^",4)<3 S CMRL=1
"RTN","PSOORED2",50,0)
RFX N RFL,NDC,DAW,FLDS,QUIT,CHGNDC,CHANGED
"RTN","PSOORED2",51,0)
 W ! S DA=Y,DIE="^PSRX("_DA(1)_",1,",DR=$S('CMRL:".01;1.1",1:"1.2:5;8")
"RTN","PSOORED2",52,0)
 D GETS^DIQ(52.1,DA_","_DA(1)_",",".01;1;1.1;8;11;81","I","FLDS")
"RTN","PSOORED2",53,0)
 S:$D(^PSRX(DA(1),1,DA,0)) PSORXED("RX1")=^PSRX(DA(1),1,DA,0),(RFED,RFL)=DA
"RTN","PSOORED2",54,0)
 I $G(ST)=11!($G(ST)=12)!($G(ST)=14)!($G(ST)=15),$$STATUS^PSOBPSUT(PSORXED("IRXN"),RFL)'="" S QUIT=0 D RFE Q  ;short circuit for DC'd/Expired ECME RXs
"RTN","PSOORED2",55,0)
 N PSORFILL S PSORFILL=DA   ;*276
"RTN","PSOORED2",56,0)
 D ^DIE S QUIT=$D(Y)
"RTN","PSOORED2",57,0)
 ;*276
"RTN","PSOORED2",58,0)
 I '$D(^PSRX(PSORXED("IRXN"),1,PSORFILL)),'$G(PSOSFN) D
"RTN","PSOORED2",59,0)
 .N DA,NOW,IR,FDA
"RTN","PSOORED2",60,0)
 .S DA=$G(PSORXED("IRXN")) Q:'DA
"RTN","PSOORED2",61,0)
 .S (FDA,IR)=0 F  S FDA=$O(^PSRX(DA,"A",FDA)) Q:'FDA  S IR=FDA
"RTN","PSOORED2",62,0)
 .S IR=IR+1,^PSRX(DA,"A",0)="^52.3DA^"_IR_"^"_IR
"RTN","PSOORED2",63,0)
 .D NOW^%DTC S NOW=%
"RTN","PSOORED2",64,0)
 .S ^PSRX(DA,"A",IR,0)=NOW_"^D^"_DUZ_"^"_$S(PSORFILL>0&(PSORFILL<6):PSORFILL,1:PSORFILL+1)_"^Refill deleted during Rx edit"
"RTN","PSOORED2",65,0)
 K FEV,RFN,RFM,X,Y,DR
"RTN","PSOORED2",66,0)
 I '$G(DA) D REVERSE^PSOBPSU1(PSORXED("IRXN"),RFL,"DE",5) K CMRL,RFED D:$D(PSORX("PSOL"))&($G(DI)=.01) RFD Q
"RTN","PSOORED2",67,0)
 I 'CMRL,'QUIT S DR="1;1.2:5;8" D ^DIE S QUIT=$D(Y)
"RTN","PSOORED2",68,0)
RFE I '$D(^PSRX(PSORXED("IRXN"),1,RFL)) Q
"RTN","PSOORED2",69,0)
 ;
"RTN","PSOORED2",70,0)
 I 'QUIT,$$STATUS^PSOBPSUT(PSORXED("IRXN"),RFL)'="" D
"RTN","PSOORED2",71,0)
 . D EDTDAW^PSODAWUT(PSORXED("IRXN"),RFL,.DAW) I $G(DAW)="^" Q
"RTN","PSOORED2",72,0)
 . D SAVDAW^PSODAWUT(PSORXED("IRXN"),RFL,+$G(DAW))
"RTN","PSOORED2",73,0)
 . Q
"RTN","PSOORED2",74,0)
 ;
"RTN","PSOORED2",75,0)
 ; PSO*7*427 - NDC edit checks are in NDC^PSODRG
"RTN","PSOORED2",76,0)
 I 'QUIT D
"RTN","PSOORED2",77,0)
 . S NDC=$$GETNDC^PSONDCUT(PSORXED("IRXN"),RFL)
"RTN","PSOORED2",78,0)
 . D NDC^PSODRG(PSORXED("IRXN"),RFL,,.NDC) I $G(NDC)="^"!($G(NDC)="") Q
"RTN","PSOORED2",79,0)
 . I NDC'=$$GETNDC^PSONDCUT(PSORXED("IRXN"),RFL) D
"RTN","PSOORED2",80,0)
 . . S CHGNDC=1 D RXACT^PSOBPSU2(PSORXED("IRXN"),RFL,"NDC changed from "_$$GETNDC^PSONDCUT(PSORXED("IRXN"),RFL)_" to "_NDC_".","E")
"RTN","PSOORED2",81,0)
 . D SAVNDC^PSONDCUT(PSORXED("IRXN"),RFL,NDC)
"RTN","PSOORED2",82,0)
 . Q
"RTN","PSOORED2",83,0)
 ;
"RTN","PSOORED2",84,0)
 S CHANGED=$$CHANGED(PSORXED("IRXN"),RFL,.FLDS)
"RTN","PSOORED2",85,0)
 I CHANGED D
"RTN","PSOORED2",86,0)
 . I $P(CHANGED,"^",2),'$$ECMEON^BPSUTIL($$RXSITE^PSOBPSUT(PSORXED("IRXN"),RFL)) D  Q
"RTN","PSOORED2",87,0)
 . . D REVERSE^PSOBPSU1(PSORXED("IRXN"),RFL,"DC",99,"REFILL DIVISION CHANGED",1)
"RTN","PSOORED2",88,0)
 . I $$SUBMIT^PSOBPSUT(PSORXED("IRXN"),RFL,1,1) D
"RTN","PSOORED2",89,0)
 . . N RX S RX=PSORXED("IRXN")
"RTN","PSOORED2",90,0)
 . . I '$P(CHANGED,"^",2),$$STATUS^PSOBPSUT(RX,RFL)="" Q
"RTN","PSOORED2",91,0)
 . . D ECMESND^PSOBPSU1(RX,RFL,,"ED",$$GETNDC^PSONDCUT(RX,RFL),,$S($P(CHANGED,"^",2):"REFILL DIVISION CHANGED",1:"REFILL EDITED"),,+$G(CHGNDC))
"RTN","PSOORED2",92,0)
 . . ; Quit if there is an unresolved TRICARE/CHAMPVA non-billable reject code, PSO*7*358
"RTN","PSOORED2",93,0)
 . . I $$PSOET^PSOREJP3(RX,RFL) S X="Q" Q
"RTN","PSOORED2",94,0)
 . . ;- Checking/Handling DUR/79 Rejects
"RTN","PSOORED2",95,0)
 . . I $$FIND^PSOREJUT(RX,RFL) S X=$$HDLG^PSOREJU1(RX,RFL,"79,88","ED","IOQ","Q")
"RTN","PSOORED2",96,0)
 K DIE,CMRL,DA,DR
"RTN","PSOORED2",97,0)
 Q
"RTN","PSOORED2",98,0)
CHANGED(RX,RFL,PRIOR) ; - Check if fields have changed and should for 3rd Party Claim resubmission
"RTN","PSOORED2",99,0)
 ;Input:  (r) RX    - Rx IEN
"RTN","PSOORED2",100,0)
 ;        (r) RFL   - Refill #
"RTN","PSOORED2",101,0)
 ;        (r) PRIOR - Array with fields
"RTN","PSOORED2",102,0)
 ;Output:  CHANGED  - 0 - Not changed / 1 - Refill field changed ^ Rx Division changed (1 - YES)
"RTN","PSOORED2",103,0)
 N CHANGED,SAVED
"RTN","PSOORED2",104,0)
 S CHANGED=0 D GETS^DIQ(52.1,RFL_","_RX_",",".01;1;1.1;8;11;81","I","SAVED")
"RTN","PSOORED2",105,0)
 F I=.01,1,1.1,11,81 I $G(PRIOR(52.1,RFL_","_RX_",",I,"I"))'=$G(SAVED(52.1,RFL_","_RX_",",I,"I")) S CHANGED=1 Q
"RTN","PSOORED2",106,0)
 I $$DIVNCPDP^BPSBUTL(+$G(PRIOR(52.1,RFL_","_RX_",",8,"I")))'=$$DIVNCPDP^BPSBUTL(+$G(SAVED(52.1,RFL_","_RX_",",8,"I"))) S CHANGED="1^1"
"RTN","PSOORED2",107,0)
 Q CHANGED
"RTN","PSOORED2",108,0)
 ;
"RTN","PSOORED2",109,0)
DAT S DAT="",DTT=DTT\1 Q:DTT'?7N  S DAT=$E(DTT,4,5)_"/"_$E(DTT,6,7)_"/"_$E(DTT,2,3)
"RTN","PSOORED2",110,0)
 Q
"RTN","PSOORED2",111,0)
DIE S DIE=52 D ^DIE I $D(Y) S PSORXED("DFLG")=1
"RTN","PSOORED2",112,0)
 K DIE,DR,X,Y
"RTN","PSOORED2",113,0)
 Q
"RTN","PSOORED2",114,0)
RFD ;check for deleted refill
"RTN","PSOORED2",115,0)
 M PSOZ1("PSOL")=PSORX("PSOL") N I,J,K,PSOX2,PSOX3,PSOX9 S (I,K)=0 D
"RTN","PSOORED2",116,0)
 .F  S I=$O(PSOZ1("PSOL",I)) Q:'I!(K)  S PSOX2=PSOZ1("PSOL",I) I PSOX2[(PSORXED("IRXN")_",") S PSOX9="" D
"RTN","PSOORED2",117,0)
 ..F J=1:1 S PSOX3=$P(PSOX2,",",J) Q:'PSOX3  D
"RTN","PSOORED2",118,0)
 ...I 'K,PSOX3=PSORXED("IRXN") S K=1
"RTN","PSOORED2",119,0)
 ...E  S PSOX9=PSOX9_$S('PSOX9:"",1:",")_PSOX3
"RTN","PSOORED2",120,0)
 ..I K S:PSOX9]"" PSORX("PSOL",I)=PSOX9_"," K:PSOX9="" PSORX("PSOL",I)
"RTN","PSOORED2",121,0)
 K PSOZ1("PSOL")
"RTN","PSOORED2",122,0)
 Q
"RTN","PSOORED2",123,0)
EDTDOSE ;edit med instructions fields
"RTN","PSOORED2",124,0)
 S PSOEDDOS=1 ; identifies origin of call to PSOORED3 for dosing
"RTN","PSOORED2",125,0)
 I '$O(^PSRX(PSORXED("IRXN"),6,0)) D DOSE^PSOORED5 Q
"RTN","PSOORED2",126,0)
 D ^PSOORED3
"RTN","PSOORED2",127,0)
 K PSOEDDOS
"RTN","PSOORED2",128,0)
 Q
"RTN","PSOORED2",129,0)
UPD ;updates dosing array
"RTN","PSOORED2",130,0)
 S HENT=ENT
"RTN","PSOORED2",131,0)
UPD1 I $G(PSORXED("CONJUNCTION",(HENT+1)))]"",'$D(PSORXED("DOSE",(HENT+2))) K PSORXED("CONJUNCTION",(HENT+1)) Q
"RTN","PSOORED2",132,0)
 I $G(PSORXED("CONJUNCTION",(HENT+1)))]"" S PSORXED("CONJUNCTION",HENT)=PSORXED("CONJUNCTION",(HENT+1)) D  G UPD1
"RTN","PSOORED2",133,0)
 .K PSORXED("CONJUNCTION",(HENT+1))
"RTN","PSOORED2",134,0)
 .F  Q:'$D(PSORXED("DOSE",(HENT+2)))  D
"RTN","PSOORED2",135,0)
 ..S PSORXED("DOSE",(HENT+1))=PSORXED("DOSE",(HENT+2))
"RTN","PSOORED2",136,0)
 ..S PSORXED("DOSE ORDERED",(HENT+1))=$G(PSORXED("DOSE ORDERED",(HENT+2)))
"RTN","PSOORED2",137,0)
 ..S PSORXED("UNITS",(HENT+1))=$G(PSORXED("UNITS",(HENT+2)))
"RTN","PSOORED2",138,0)
 ..S PSORXED("NOUN",(HENT+1))=$G(PSORXED("NOUN",(HENT+2)))
"RTN","PSOORED2",139,0)
 ..S PSORXED("DURATION",(HENT+1))=$G(PSORXED("DURATION",(HENT+2)))
"RTN","PSOORED2",140,0)
 ..S PSORXED("CONJUNCTION",(HENT+1))=$G(PSORXED("CONJUNCTION",(HENT+2)))
"RTN","PSOORED2",141,0)
 ..S PSORXED("ROUTE",(HENT+1))=$G(PSORXED("ROUTE",(HENT+2)))
"RTN","PSOORED2",142,0)
 ..S PSORXED("SCHEDULE",(HENT+1))=$G(PSORXED("SCHEDULE",(HENT+2)))
"RTN","PSOORED2",143,0)
 ..S PSORXED("ODOSE",(HENT+1))=$G(PSORXED("ODOSE",(HENT+2)))
"RTN","PSOORED2",144,0)
 ..S HENT=HENT+1
"RTN","PSOORED2",145,0)
 ..I $G(PSORXED("CONJUNCTION",(HENT+2)))]"" Q
"RTN","PSOORED2",146,0)
 ..K PSORXED("UNITS",(HENT+1)),PSORXED("NOUN",(HENT+1)),PSORXED("DURATION",(HENT+1)),PSORXED("CONJUNCTION",(HENT+1)),PSORXED("ROUTE",(HENT+1)),PSORXED("SCHEDULE",(HENT+1)),PSORXED("DOSE",(HENT+1)),PSORXED("DOSE ORDERED",(HENT+1))
"RTN","PSOORED2",147,0)
 ..K PSORXED("VERB",(HENT+1)),PSORXED("ODOSE",(HENT+1))
"RTN","PSOORED2",148,0)
 S PSORXED("ENT")=HENT K HENT,SENT D EN^PSOFSIG(.PSORXED)
"RTN","PSOORED2",149,0)
 Q
"RTN","PSOORED2",150,0)
UPD2 I $G(PSORXED("CONJUNCTION",(HENT+1)))]"",'$D(PSORXED("DOSE",(HENT+2))) K PSORXED("CONJUNCTION",(HENT+1)) Q
"RTN","PSOORED2",151,0)
 I $G(PSORXED("CONJUNCTION",(HENT+1)))]"" S PSORXED("CONJUNCTION",HENT)=PSORXED("CONJUNCTION",(HENT+1)) D  G UPD1
"RTN","PSOORED2",152,0)
 .K PSORXED("CONJUNCTION",(HENT+1)) I $D(PSORXED("DOSE",(HENT+2))) D
"RTN","PSOORED2",153,0)
 ..S PSORXED("DOSE",(HENT+1))=PSORXED("DOSE",(HENT+2))
"RTN","PSOORED2",154,0)
 ..S PSORXED("DOSE ORDERED",(HENT+1))=$G(PSORXED("DOSE ORDERED",(HENT+2)))
"RTN","PSOORED2",155,0)
 ..S PSORXED("UNITS",(HENT+1))=$G(PSORXED("UNITS",(HENT+2)))
"RTN","PSOORED2",156,0)
 ..S PSORXED("NOUN",(HENT+1))=$G(PSORXED("NOUN",(HENT+2)))
"RTN","PSOORED2",157,0)
 ..S PSORXED("VERB",(HENT+1))=$G(PSORXED("VERB",(HENT+2)))
"RTN","PSOORED2",158,0)
 ..S PSORXED("DURATION",(HENT+1))=$G(PSORXED("DURATION",(HENT+2)))
"RTN","PSOORED2",159,0)
 ..S PSORXED("CONJUNCTION",(HENT+1))=$G(PSORXED("CONJUNCTION",(HENT+2)))
"RTN","PSOORED2",160,0)
 ..S PSORXED("ROUTE",(HENT+1))=$G(PSORXED("ROUTE",(HENT+2)))
"RTN","PSOORED2",161,0)
 ..S PSORXED("SCHEDULE",(HENT+1))=$G(PSORXED("SCHEDULE",(HENT+2)))
"RTN","PSOORED2",162,0)
 ..S PSORXED("ODOSE",(HENT+1))=$G(PSORXED("ODOSE",(HENT+2)))
"RTN","PSOORED2",163,0)
 ..S HENT=HENT+1
"RTN","PSOORED2",164,0)
 ..I $G(PSORXED("CONJUNCTION",(HENT+1)))]"" Q
"RTN","PSOORED2",165,0)
 ..K PSORXED("UNITS",(HENT+1)),PSORXED("NOUN",(HENT+1)),PSORXED("DURATION",(HENT+1)),PSORXED("ROUTE",(HENT+1)),PSORXED("SCHEDULE",(HENT+1)),PSORXED("DOSE",(HENT+1)),PSORXED("DOSE ORDERED",(HENT+1)),PSORXED("VERB",(HENT+1))
"RTN","PSOORED2",166,0)
 ..K PSORXED("ODOSE",(HENT+1))
"RTN","PSOORED2",167,0)
 F I=0:0 S I=$O(PSORXED("DOSE",I)) Q:'I  S SENT=$G(SENT)+1
"RTN","PSOORED2",168,0)
 S PSORXED("ENT")=SENT K HENT,SENT D EN^PSOFSIG(.PSORXED)
"RTN","PSOORED2",169,0)
 Q
"RTN","PSOOREDT")
0^4^B80361820
"RTN","PSOOREDT",1,0)
PSOOREDT ;BIR/SAB - Edit orders from backdoor ;5/8/08 3:27pm
"RTN","PSOOREDT",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**4,20,27,37,57,46,78,102,104,119,143,148,260,281,304,289,298,379,377,391,313,427**;DEC 1997;Build 21
"RTN","PSOOREDT",3,0)
 ;External reference to ^PSDRUG supported by DBIA 221
"RTN","PSOOREDT",4,0)
 ;External reference to PSSLOCK supported by DBIA 2789
"RTN","PSOOREDT",5,0)
 ;External reference to ^VA(200 supported by DBIA 10060
"RTN","PSOOREDT",6,0)
SEL K PSOISLKD,PSOLOKED S PSOPLCK=$$L^PSSLOCK(PSODFN,0) I '$G(PSOPLCK) D LOCK^PSOORCPY D SVAL K PSOPLCK S VALMBCK="" Q
"RTN","PSOOREDT",7,0)
 K PSOPLCK D PSOL^PSSLOCK($P(PSOLST(ORN),"^",2)) I '$G(PSOMSG) D UL^PSSLOCK(+$G(PSODFN)) D SVALO K PSOMSG S VALMBCK="" Q
"RTN","PSOOREDT",8,0)
 K PSOMSG S PSOLOKED=1
"RTN","PSOOREDT",9,0)
 S REF=0 S:$$LSTRFL^PSOBPSU1($P(PSOLST(ORN),"^",2)) REF=1  ;*377
"RTN","PSOOREDT",10,0)
 K PSORX("DFLG"),DIR,DUOUT,DIRUT S DIR("A")="Select fields by number"
"RTN","PSOOREDT",11,0)
 S DIR(0)="LO^1:"_$S($$STATUS^PSOBPSUT($P(PSOLST(ORN),"^",2))'="":21,$G(REF):20,1:19)
"RTN","PSOOREDT",12,0)
 D ^DIR I $D(DIRUT) K DIR,DIRUT,DTOUT S VALMBCK="" D UL K PSOLOKED Q
"RTN","PSOOREDT",13,0)
EDTSEL N VALMCNT K PSOISLKD,PSORX("DFLG"),PSOOIFLG,PSOMRFLG,DIR,DIRUT,DTOUT,DTOUT,ZONE S PSOQUIT=0,(PSOEDIT,PSORXED)=1 I +Y S FST=Y D HLDHDR^PSOLMUTL D  G EX ;PSO LM SELECT MENU protocol
"RTN","PSOOREDT",14,0)
 .I '$G(PSOLOKED) S PSOPLCK=$$L^PSSLOCK(PSODFN,0) I '$G(PSOPLCK) D LOCK^PSOORCPY D SVAL K PSOPLCK S VALMBCK="",(PSOISLKD,PSODE)=1 Q
"RTN","PSOOREDT",15,0)
 .I '$G(PSOLOKED) K PSOPLCK D PSOL^PSSLOCK($P(PSOLST(ORN),"^",2)) I '$G(PSOMSG) D UL^PSSLOCK(+$G(PSODFN)) D SVALO K PSOMSG S VALMBCK="",(PSOISLKD,PSODE)=1 Q
"RTN","PSOOREDT",16,0)
 .K PSOMSG,PSOPLCK S (NEWEDT,PSOLOKED)=1 D EDT
"RTN","PSOOREDT",17,0)
 E  S VALMBCK="",PSODE=1
"RTN","PSOOREDT",18,0)
EX I $G(PSOISLKD)!($G(PSOQUIT)) D UL K PSOISLKD G EX2
"RTN","PSOOREDT",19,0)
 I '$G(PSOSIGFL),'$G(PSORXED("DFLG")) D UPDATE^PSOORED6 D LOG^PSORXED,POST^PSORXED G EX1
"RTN","PSOOREDT",20,0)
 I $G(PSOSIGFL)=1 D  Q:$G(PSORX("FN"))
"RTN","PSOOREDT",21,0)
 .N PSOTMP
"RTN","PSOOREDT",22,0)
 .S PSOTMP=$G(PSOFROM),PSOFROM="NEW"
"RTN","PSOOREDT",23,0)
 .S VALMSG="This change will create a new prescription!",NCPDPFLG=1
"RTN","PSOOREDT",24,0)
 .D EN^PSOORED1(.PSORXED)
"RTN","PSOOREDT",25,0)
 .I $G(PSORX("FN")) D  Q
"RTN","PSOOREDT",26,0)
 ..D ^PSOBUILD
"RTN","PSOOREDT",27,0)
 ..K QUIT,PSORX("DFLG"),FST,FLD,IEN,FLN,INCOM,PSOI,PSODRUG,PSOEDIT
"RTN","PSOOREDT",28,0)
 ..K PSORENW,PSOSIGFL,PSOOIFLG,PSOMRFLG,PSODIR,CHK,PSORX("SIG"),PSODE
"RTN","PSOOREDT",29,0)
 ..K PSOTRN,PSORX("EDIT"),PSORXED("FLD"),NEWEDT
"RTN","PSOOREDT",30,0)
 ..D EOJ^PSONEW
"RTN","PSOOREDT",31,0)
 ..D UL K PSOLOKED S VALMBCK="Q"
"RTN","PSOOREDT",32,0)
 .S PSOFROM=PSOTMP I PSOFROM="" K PSOFROM
"RTN","PSOOREDT",33,0)
 ;
"RTN","PSOOREDT",34,0)
EX1 I '$G(PSODE)!('$G(ZONE)) I $G(PSORENW("OIRXN")) D EN^PSOHLSN1(PSORENW("OIRXN"),"XX","","Order edited")
"RTN","PSOOREDT",35,0)
QUIT D UL K PSOLOKED D ^PSOBUILD,ACT^PSOORNE2 D:+^PSRX($P(PSOLST(ORN),"^",2),"STA")=5 EN^PSOCMOPC($P(PSOLST(ORN),"^",2))
"RTN","PSOOREDT",36,0)
 K:'$O(^PSRX($P(PSOLST(ORN),"^",2),1,0)) REF
"RTN","PSOOREDT",37,0)
EX2 S VALMBCK=$S($G(PSOQUIT):"R",$G(PSORX("FN")):"Q",$G(ZONE):"Q",1:"R")
"RTN","PSOOREDT",38,0)
 K PSORXED,FST,FLD,IEN,FLN,INCOM,PSOI,PSODRUG,PSOEDIT,PSORENW,PSOSIGFL,PSODIR,CHK,PSORX("SIG"),PSODE,PSOTRN,PSORX("DFLG"),RFED,ZONE,PSORX("EDIT"),PSOOIFLG,PSOMRFLG,SIG,QUIT,PSOQUIT
"RTN","PSOOREDT",39,0)
 K NEWEDT I $G(VALMBCK)="R" W ! D CLEAN^PSOVER1 H 2
"RTN","PSOOREDT",40,0)
 Q
"RTN","PSOOREDT",41,0)
 ;
"RTN","PSOOREDT",42,0)
EDT ; Rx Edit (Backdoor)
"RTN","PSOOREDT",43,0)
 K NCPDPFLG,PSOPKI,DEA
"RTN","PSOOREDT",44,0)
 S I=0 F  S I=$O(^PSRX($P(PSOLST(ORN),"^",2),1,I)) Q:'I  S PSORXED("RX1")=^PSRX($P(PSOLST(ORN),"^",2),1,I,0)
"RTN","PSOOREDT",45,0)
 ;*298 Track PI and Oth Lang PI
"RTN","PSOOREDT",46,0)
 S (RX0,PSORXED("RX0"))=^PSRX($P(PSOLST(ORN),"^",2),0),PSORXED("RX2")=$G(^(2)),PSORXED("RX3")=$G(^(3)),PSOSIG=$P(^("SIG"),"^"),PSOPINS=$G(^("INS")),PSOOINS=$G(^("INSS"))
"RTN","PSOOREDT",47,0)
 I '$D(PSODRUG) NEW PSOY S PSOY=$P(RX0,U,6),PSOY(0)=^PSDRUG(PSOY,0) D SET^PSODRG ; *298 moved this line from EDT+2  RX0 was not defined yet
"RTN","PSOOREDT",48,0)
 F FLD=1:1:$L(FST,",") Q:$P(FST,",",FLD)']""!($G(PSORXED("DFLG")))!($G(PSORX("DFLG")))  S FLN=+$P(FST,",",FLD) D
"RTN","PSOOREDT",49,0)
 .S PSORXED("DFLG")=0,(DA,PSORXED("IRXN"),PSORENW("OIRXN"))=$P(PSOLST(ORN),"^",2),RX0=^PSRX(PSORXED("IRXN"),0),PSOPKI=$P($G(^PSRX(PSORXED("IRXN"),"PKI")),"^") S:$G(PSOSIG)="" PSOSIG=$P(^("SIG"),"^")
"RTN","PSOOREDT",50,0)
 .;*298 Track PI and Oth Lang PI
"RTN","PSOOREDT",51,0)
 .S:$G(PSOPINS)="" PSOPINS=$G(^PSRX(DA,"INS")) S:$G(PSOOINS)="" PSOOINS=$G(^PSRX(DA,"INSS"))
"RTN","PSOOREDT",52,0)
 .I '$G(PSOSIGFL) D
"RTN","PSOOREDT",53,0)
 ..S PSOI=+^PSRX(DA,"OR1"),PSODAYS=$P(RX0,"^",8),PSORXST=+$P($G(^PS(53,$P(RX0,"^",3),0)),"^",7)
"RTN","PSOOREDT",54,0)
 ..I 'PSOI S PSOI=+^PSDRUG($P(RX0,"^",6),2),$P(^PSRX(DA,"OR1"),"^")=PSOI
"RTN","PSOOREDT",55,0)
 ..S:'$G(PSODRUG("IEN")) PSODRUG("IEN")=$P(RX0,"^",6),PSODRUG("NAME")=$P(^PSDRUG($P(RX0,"^",6),0),"^")
"RTN","PSOOREDT",56,0)
 ..S PSODRUG("OI")=PSOI
"RTN","PSOOREDT",57,0)
 .S PSORX("PROVIDER")=$P(RX0,"^",4),PSORX("PROVIDER NAME")=$P(^VA(200,$P(RX0,"^",4),0),"^"),PSOTRN=$G(^PSRX(DA,"TN"))
"RTN","PSOOREDT",58,0)
 .D:'$G(CHK) POP^PSOSIGNO(DA),CHK Q:$G(PSORXED("DFLG"))
"RTN","PSOOREDT",59,0)
 .S FDR="39.2^"_$S($P(PSOPAR,"^",3):"6",1:"")_";6.5^113^114^3^1^22R^24^8^7^9^4^11;"_$S($P(RX0,"^",11)="W"&($P(PSOPAR,"^",12)):"35;",1:"")_"^10.6^5^20^23^12^PSOCOU^RF^81"
"RTN","PSOOREDT",60,0)
 .; Titration/Maintenance Rx check
"RTN","PSOOREDT",61,0)
 .I $$REQFLDS(FST),$$TITRX^PSOUTL($P(PSOLST(ORN),"^",2))="t" D  S PSORXED("DFLG")=1 Q
"RTN","PSOOREDT",62,0)
 .. S VALMSG="Cannot edit Drug/Dose fields (Titration Rx).",VALMBCK="R" W $C(7)
"RTN","PSOOREDT",63,0)
 .D:'$G(CHK) POP^PSOSIGNO(DA),CHK Q:$G(PSORXED("DFLG"))
"RTN","PSOOREDT",64,0)
 .S FDR="39.2^"_$S($P(PSOPAR,"^",3):"6",1:"")_";6.5^113^114^3^1^22R^24^8^7^9^4^11;"_$S($P(RX0,"^",11)="W"&($P(PSOPAR,"^",12)):"35;",1:"")_"^10.6^5^20^23^12^PSOCOU^RF^81"
"RTN","PSOOREDT",65,0)
 .I $G(ST)=11!($G(ST)=12)!($G(ST)=14)!($G(ST)=15) D NDCDAWDE^PSOORED7(ST,FLN,$G(RXN)) Q
"RTN","PSOOREDT",66,0)
 .S REF=0 S:$$LSTRFL^PSOBPSU1($P(PSOLST(ORN),"^",2)) REF=1  ;*377
"RTN","PSOOREDT",67,0)
 .I FLN=20,'$G(REF) S VALMSG="There is no Refill Data to be edited." Q
"RTN","PSOOREDT",68,0)
 .S DR=$P(FDR,"^",FLN) I DR="RF" D REF^PSOORED2 Q
"RTN","PSOOREDT",69,0)
 .I DR="PSOCOU" D PSOCOU^PSOORED6 Q
"RTN","PSOOREDT",70,0)
 .; Allow edit of the NDC when the EDIT DRUG setting is off
"RTN","PSOOREDT",71,0)
 .; Other checks regarding if the NDC may be edited are found in NDC^PSODRG - PSO*7*427
"RTN","PSOOREDT",72,0)
 .I FLN=2,'$P(PSOPAR,"^",3) D  Q
"RTN","PSOOREDT",73,0)
 ..N NDC D NDC^PSODRG(RXN,0,,.NDC) I $G(NDC)="^"!($G(NDC)="") Q
"RTN","PSOOREDT",74,0)
 ..S (PSODRUG("NDC"),PSORXED("FLD",27))=NDC
"RTN","PSOOREDT",75,0)
 .I FLN'>2,'$P(PSOPAR,"^",3) S VALMSG="Check site parameters, Drug data is not editable." Q
"RTN","PSOOREDT",76,0)
 .I FLN=3 D EDTDOSE^PSOORED2,FULL^VALM1,POST^PSODRG S:$G(PSORX("DFLG")) PSOISLKD=1,PSORX("FN")=1 Q
"RTN","PSOOREDT",77,0)
 .I FLN=4 D INS^PSOORED1 Q
"RTN","PSOOREDT",78,0)
 .I FLN=1 D PSOI^PSOORED6 N PSOX S PSORXED=1,PSOX("IRXN")=$S($D(DA):DA,$D(PSORXED("IRXN")):PSORXED("IRXN"),$D(PSORENW("OIRXN")):PSORENW("OIRXN")) D:'$G(PSORXED("DFLG")) EN^PSODIAG Q
"RTN","PSOOREDT",79,0)
 .I FLN=2 D DRG^PSOORED6 N PSOX S PSORXED=1,PSOX("IRXN")=PSORXED("IRXN") D:'$G(PSORXED("DFLG")) EN^PSODIAG S:$O(^PSRX(PSORXED("IRXN"),1,0)) REF=1 Q
"RTN","PSOOREDT",80,0)
 .I FLN=12,PSOPKI W !!,"Digitally Signed Order - Provider can't be changed" D PAUSE Q
"RTN","PSOOREDT",81,0)
 .I FLN=12 D PROV Q
"RTN","PSOOREDT",82,0)
 .I FLN=6 D ISDT^PSOORED2 Q
"RTN","PSOOREDT",83,0)
 .I FLN=7 D FLDT^PSOORED2 Q
"RTN","PSOOREDT",84,0)
 .I FLN=21,$$STATUS^PSOBPSUT(RXN,0)="" S VALMSG="Invalid selection!" Q
"RTN","PSOOREDT",85,0)
 .I FLN=21 D  Q
"RTN","PSOOREDT",86,0)
 ..N DAW D EDTDAW^PSODAWUT(RXN,0,.DAW) I $G(DAW)="^" Q
"RTN","PSOOREDT",87,0)
 ..S (PSODRUG("DAW"),PSORXED("FLD",81))=DAW
"RTN","PSOOREDT",88,0)
 .I FLN=9!(FLN=10)!(FLN=11) D NOCHG^PSOORED7 Q
"RTN","PSOOREDT",89,0)
 .S DR=+DR
"RTN","PSOOREDT",90,0)
 .K DIR,DIRUT,DIROUT ;S DIE=52 D ^DIE I $D(Y) S PSORXED("DFLG")=1
"RTN","PSOOREDT",91,0)
 .K DIC,DIQ S DIC=52,DA=PSORXED("IRXN"),DIQ="PSORXED" D EN^DIQ1 K DIC,DIQ
"RTN","PSOOREDT",92,0)
 .S DIR("B")=$S($G(PSORXED("FLD",DR))]"":PSORXED("FLD",DR),1:PSORXED(52,DA,DR)),DIR(0)="52,"_DR D ^DIR
"RTN","PSOOREDT",93,0)
 .I DR=24!(DR=12) S PSORXED("FLD",DR)=X
"RTN","PSOOREDT",94,0)
 .I $D(DIRUT) K DIR,DIRUT,DUOUT,DTOUT,PSORXED(52,DA,DR),PSORXED("FLD",DR) Q
"RTN","PSOOREDT",95,0)
 .I DR'=5,X="@" W !,"Data Required!",! K DIC,DIQ,DR,DA,DIR,DIRUT,PSORXED(52,DA,DR),X,Y Q
"RTN","PSOOREDT",96,0)
 .I DR=5,X'="@" S Y=+Y
"RTN","PSOOREDT",97,0)
 .I DR=3!(DR=20)!(DR=23) S Y=+Y
"RTN","PSOOREDT",98,0)
 .S PSORXED("FLD",DR)=$S(X="@":X,1:Y) K DIR,DIRUT,DIROUT,X,Y,PSORXED(52,DA,DR)
"RTN","PSOOREDT",99,0)
 .I DR=11,PSORXED("FLD",DR)="W",$P(PSOPAR,"^",12) D
"RTN","PSOOREDT",100,0)
 ..D FIELD^DID(52,DR,"","LABEL","ZZ") S PSORXED(ZZ("LABEL"))=PSORXED("FLD",DR) K ZZ
"RTN","PSOOREDT",101,0)
 ..S DR=35,DIQ="PSORXED" D EN^DIQ1 K DIC,DIQ,DIRUT,DUOUT,DTOUT
"RTN","PSOOREDT",102,0)
 ..S:$G(PSORXED(52,DA,DR))]"" DIR("B")=PSORXED(52,DA,DR)
"RTN","PSOOREDT",103,0)
 ..S DIR(0)="52,"_(DR) D ^DIR I $D(DIRUT),X'="@" K DIR,DIRUT Q
"RTN","PSOOREDT",104,0)
 ..S PSORXED("FLD",DR)=X K DIR,DIRUT,DIROUT,X,Y,PSORXED(52,DA,DR)
"RTN","PSOOREDT",105,0)
 .I $G(PSORXED("FLD",DR))]"" D FIELD^DID(52,DR,"","LABEL","ZZ") S PSORXED(ZZ("LABEL"))=PSORXED("FLD",DR) K ZZ
"RTN","PSOOREDT",106,0)
 Q:$G(PSOSIGFL)
"RTN","PSOOREDT",107,0)
 S (RX1,I,RFD,RFDT)=0 F  S I=$O(^PSRX(PSORXED("IRXN"),1,I)) Q:'I  S RFD=I,RFDT=$P(^PSRX(PSORXED("IRXN"),1,I,0),"^"),RX1(I)=$G(RX1(I))+1
"RTN","PSOOREDT",108,0)
 Q
"RTN","PSOOREDT",109,0)
CHK S CHK=1 I $G(^PSDRUG($P(PSORXED("RX0"),"^",6),"I"))]"",^("I")<DT S VALMSG="This drug has been inactivated. ",PSORXED("DFLG")=1 Q
"RTN","PSOOREDT",110,0)
 K PSPOP I $G(PSODIV),$P(PSORXED("RX2"),"^",9)'=PSOSITE S PSPRXN=PSORXED("IRXN") D  Q:PSORXED("DFLG")
"RTN","PSOOREDT",111,0)
 .I '$P(PSOSYS,"^",2) S VALMSG="RX# "_$P(^PSRX(PSPRXN,0),"^")_" is not a valid choice. (Different Division)" S PSORXED("DFLG")=1 Q
"RTN","PSOOREDT",112,0)
 .I $P(PSOSYS,"^",3) K DIR,DUOUT,DTOUT D  K DIR,DUOUT,DTOUT Q
"RTN","PSOOREDT",113,0)
 ..W $C(7) S DIR("A",1)="",DIR("A",2)="RX# "_$P(^PSRX(PSPRXN,0),"^")_" is from another division.",DIR("A")="Continue: (Y/N)",DIR(0)="Y",DIR("?",1)="'Y' FOR YES",DIR("?")="'N' FOR NO"
"RTN","PSOOREDT",114,0)
 ..S DIR("B")="N" D ^DIR I 'Y!($D(DIRUT)) S PSORXED("DFLG")=1 W !
"RTN","PSOOREDT",115,0)
 ;
"RTN","PSOOREDT",116,0)
 I $P(^PSRX(PSORXED("IRXN"),"STA"),"^")=16 D  Q
"RTN","PSOOREDT",117,0)
 . S PSORXED("DFLG")=1 S VALMSG="Prescriptions on Provider Hold cannot be edited."
"RTN","PSOOREDT",118,0)
 ;
"RTN","PSOOREDT",119,0)
CHKX K PSPOP,DIR,DTOUT,DUOUT,Y,X Q
"RTN","PSOOREDT",120,0)
 Q
"RTN","PSOOREDT",121,0)
PROV ;select provider
"RTN","PSOOREDT",122,0)
 S PSORXED("PROVIDER")=$P(RX0,"^",4),PSORXED("PROVIDER NAME")=$P(^VA(200,$P(RX0,"^",4),0),"^")
"RTN","PSOOREDT",123,0)
 D PROV^PSODIR(.PSORXED) I PSORXED("PROVIDER")'=$P(RX0,"^",4) D
"RTN","PSOOREDT",124,0)
 .K DIR,DIRUT W ! S DIR(0)="Y",DIR("A",1)="You have changed the name of the provider entered for this Rx."
"RTN","PSOOREDT",125,0)
 .S DIR("A",2)="This edit will cause the provider's name to be update for all fills.",DIR("A")="Do you want to continue" D ^DIR
"RTN","PSOOREDT",126,0)
 .I 'Y!$D(DIRUT) K PSORX("PROVIDER"),PSORX("PROVIDER NAME"),PSORX("COSIGNING PROVIDER") Q
"RTN","PSOOREDT",127,0)
 .S PSORXED("FLD",4)=PSORXED("PROVIDER") K DIR,DIRUT,DUOUT
"RTN","PSOOREDT",128,0)
 .S PSORXED("FLD",109)=$G(PSORXED("COSIGNING PROVIDER"))
"RTN","PSOOREDT",129,0)
 Q
"RTN","PSOOREDT",130,0)
UDPROV ;update provider
"RTN","PSOOREDT",131,0)
 S $P(^PSRX(PSORXED("IRXN"),0),"^",4)=PSORXED("PROVIDER"),$P(^(3),"^",3)=$G(PSORX("COSIGNING PROVIDER"))
"RTN","PSOOREDT",132,0)
 F XTY="1","P" F I=0:0 S I=$O(^PSRX(PSORXED("IRXN"),XTY,I)) Q:'I  S $P(^PSRX(PSORXED("IRXN"),XTY,I,0),"^",17)=PSORXED("PROVIDER") S:XTY RFED=I
"RTN","PSOOREDT",133,0)
 K XTY,I
"RTN","PSOOREDT",134,0)
 Q
"RTN","PSOOREDT",135,0)
SIG ;edit medication instructions (SIG)
"RTN","PSOOREDT",136,0)
 S PSOFDR=+$P(^PSRX(PSORXED("IRXN"),"SIG"),"^",2) I PSOFDR D
"RTN","PSOOREDT",137,0)
 .F I=0:0 S I=$O(^PSRX(PSORXED("IRXN"),"SIG1",I)) Q:'I  S SIG(I)=^PSRX(PSORXED("IRXN"),"SIG1",I,0)
"RTN","PSOOREDT",138,0)
 E  S PSORX("SIG")=$P(^PSRX(PSORXED("IRXN"),"SIG"),"^")
"RTN","PSOOREDT",139,0)
 D SIG^PSODIR1(.PSORX) D:$G(PSORX("SIG"))]"" EN1^PSOSIGNO(PSORXED("IRXN"),PSORX("SIG"))
"RTN","PSOOREDT",140,0)
 I '$G(PSOSIGFL),$G(PSORX("SIG"))]"" S ^PSRX(PSORXED("IRXN"),"SIG")=PSORX("SIG") K ^PSRX(PSORXED("IRXN"),"SIG1") Q
"RTN","PSOOREDT",141,0)
 S PSOMRFLG=1
"RTN","PSOOREDT",142,0)
 Q
"RTN","PSOOREDT",143,0)
UL ;
"RTN","PSOOREDT",144,0)
 I '$G(PSOLOKED) Q
"RTN","PSOOREDT",145,0)
 D UL^PSSLOCK(PSODFN)
"RTN","PSOOREDT",146,0)
 D PSOUL^PSSLOCK($P(PSOLST(ORN),"^",2))
"RTN","PSOOREDT",147,0)
 Q
"RTN","PSOOREDT",148,0)
SVAL ;Set message for patient lock
"RTN","PSOOREDT",149,0)
 S VALMSG=$S($P($G(PSOPLCK),"^",2)'="":$P($G(PSOPLCK),"^",2)_" is working on this patient.",1:"Another person is entering orders for this patient.")
"RTN","PSOOREDT",150,0)
 Q
"RTN","PSOOREDT",151,0)
SVALO ;Set message for order lock
"RTN","PSOOREDT",152,0)
 S VALMSG=$S($P($G(PSOMSG),"^",2)'="":$P($G(PSOMSG),"^",2),1:"Another person is editing this order.")
"RTN","PSOOREDT",153,0)
 Q
"RTN","PSOOREDT",154,0)
 ;
"RTN","PSOOREDT",155,0)
PAUSE     ;
"RTN","PSOOREDT",156,0)
 N DIR,X,Y
"RTN","PSOOREDT",157,0)
 W ! S DIR(0)="E",DIR("A")="Press Return to continue" D ^DIR
"RTN","PSOOREDT",158,0)
 Q
"RTN","PSOOREDT",159,0)
REQFLDS(FIELDS) ; Checks if fields 1,2 or 3 are being edited
"RTN","PSOOREDT",160,0)
 N REQFLDS,I
"RTN","PSOOREDT",161,0)
 S REQFLDS=0
"RTN","PSOOREDT",162,0)
 F I=1:1:$L(FIELDS) I ",1,2,3,"[(","_+$P(FIELDS,",",I)_",") S REQFLDS=1 Q
"RTN","PSOOREDT",163,0)
 Q REQFLDS
"RTN","PSOORNE2")
0^5^B68332016
"RTN","PSOORNE2",1,0)
PSOORNE2 ;BIR/SAB - Display finished orders from backdoor ;9/11/06 10:24am
"RTN","PSOORNE2",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**11,21,23,27,32,37,46,84,103,117,131,146,156,210,148,222,238,264,281,289,251,379,391,313,282,427**;DEC 1997;Build 21
"RTN","PSOORNE2",3,0)
 ;^PSDRUG( -  221
"RTN","PSOORNE2",4,0)
 ;^YSCL(603.01 - 2697
"RTN","PSOORNE2",5,0)
 ;^PS(50.606 - 2174
"RTN","PSOORNE2",6,0)
 ;^PS(50.7 - 2223
"RTN","PSOORNE2",7,0)
 ;PSO*210 add call to WORDWRAP api
"RTN","PSOORNE2",8,0)
 ;$$DAWEXT^PSSDAWUT - 4708
"RTN","PSOORNE2",9,0)
 ;
"RTN","PSOORNE2",10,0)
SEL N ORN,ORD I '$G(PSOCNT) S VALMSG="This patient has no Prescriptions!" S VALMBCK="" Q
"RTN","PSOORNE2",11,0)
 D K1^PSOORNE6 S DIR("A")="Select Orders by number",DIR(0)="LO^1:"_PSOCNT D ^DIR I $D(DIRUT) D KV^PSOVER1 S VALMBCK="" Q
"RTN","PSOORNE2",12,0)
NEWSEL N ORN,ORD D K2^PSOORNE6
"RTN","PSOORNE2",13,0)
 ;*282 Correct Patient Instructions Copy
"RTN","PSOORNE2",14,0)
 I +Y S PSOOELSE=1,PSLST=Y K PSOREEDT F ORD=1:1:$L(PSLST,",") Q:$P(PSLST,",",ORD)']""  D  D UL1 K ^TMP("PSORXPO",$J),PSORXED,PSONEW,PSOPINS I $G(PSOQUIT) K PSOQUIT Q
"RTN","PSOORNE2",15,0)
 .S ORN=+$P(PSLST,",",ORD) D @$S(+PSOLST(ORN)=52:"ACT",1:"PEN^PSOORNE5")
"RTN","PSOORNE2",16,0)
 .K PSOREEDT,PSOSIGFL,PSONACT,SIGOK,PSOFDR,DRET,SIG,INS1
"RTN","PSOORNE2",17,0)
 K PRC,PHI,RTE I '$G(PSOOELSE) S VALMBCK=""
"RTN","PSOORNE2",18,0)
 K PSONACT,PSOOELSE,CLOZPAT D ^PSOBUILD,BLD^PSOORUT1,K3^PSOORNE6
"RTN","PSOORNE2",19,0)
 Q
"RTN","PSOORNE2",20,0)
 ;
"RTN","PSOORNE2",21,0)
ACT N REF,RPHKEY,PKIND K ^TMP("PSOAO",$J),PCOMX,PDA,PHI,PRC,ACOM,ANS,PSOFDR,CLOZPAT,ANQREM,DUR,DRET
"RTN","PSOORNE2",22,0)
 S RXN=$P(PSOLST(ORN),"^",2),RX0=^PSRX(RXN,0),RX2=$G(^(2)),RX3=$G(^(3)),ST=+$G(^("STA")),RXOR=$G(^("OR1")),POE=$G(^("POE")),EXDT=$S($P($G(^(2)),"^",6)>DT:1,1:0)
"RTN","PSOORNE2",23,0)
 I 'RX3 S RX3=$P(RX2,"^",2),$P(^PSRX(RXN,3),"^")=$P(RX2,"^",2)
"RTN","PSOORNE2",24,0)
 S PSODRG=+$P(RX0,"^",6),PSODRUG0=^PSDRUG(PSODRG,0),INDT=$G(^("I"))
"RTN","PSOORNE2",25,0)
 ;PSO*7*238;SET PSODRUG ARRAY ; PSOY KILLED AT END OF SET^PSODRG
"RTN","PSOORNE2",26,0)
 K PSODRUG
"RTN","PSOORNE2",27,0)
 S PSOY=PSODRG,PSOY(0)=PSODRUG0 D SET^PSODRG
"RTN","PSOORNE2",28,0)
 I 'RXOR,$P(^PSDRUG(PSODRG,2),"^") S $P(^PSRX(RXN,"OR1"),"^")=$P(^PSDRUG(PSODRG,2),"^"),RXOR=$P(^PSDRUG(PSODRG,2),"^")
"RTN","PSOORNE2",29,0)
 I $P($G(^PSDRUG(PSODRG,"CLOZ1")),"^")="PSOCLO1" D
"RTN","PSOORNE2",30,0)
 .S CLOZPAT=$O(^YSCL(603.01,"C",PSODFN,0)) Q:'CLOZPAT
"RTN","PSOORNE2",31,0)
 .;S CLOZPAT=$S($P(^YSCL(603.01,CLOZPAT,0),"^",3)="B":1,1:0)
"RTN","PSOORNE2",32,0)
 .S CLOZPAT=$P(^YSCL(603.01,CLOZPAT,0),"^",3)
"RTN","PSOORNE2",33,0)
 .S CLOZPAT=$S(CLOZPAT="M":2,CLOZPAT="B":1,1:0)
"RTN","PSOORNE2",34,0)
 S PKIND=$D(^PSRX(RXN,"PKI")),RPHKEY=$S('PKIND&($D(^XUSEC("PSORPH",DUZ))):1,PKIND&($D(^XUSEC("PSDRPH",DUZ))):1,1:0)
"RTN","PSOORNE2",35,0)
 I RPHKEY S RPH=1 D
"RTN","PSOORNE2",36,0)
 .S PSOACT=$S('ST&($G(INDT)]"")&(DT>$G(INDT)):"DHPLATC",ST=1!(ST=4):"DVE",ST=3:"DU",ST=5:"ELTD",ST=11:"ETDPCL",ST=12&EXDT:"EDCL",ST=12&'EXDT:"ECL",(ST=14!(ST=15))&'EXDT:"ECL",ST=13:"L",ST=16:"DL",1:"DHPEATCL")
"RTN","PSOORNE2",37,0)
 .D GET^PSOORNE5 S PSOACT=PSOACT_$S(ACTREN:"N",1:""),PSOACT=PSOACT_$S(ACTREF:"R",1:"")
"RTN","PSOORNE2",38,0)
 .I ST=5 S SURX=$O(^PS(52.5,"B",RXN,0)) I SURX,$P($G(^PS(52.5,SURX,0)),"^",7)="L" S PSOACT="TL" K SURX Q
"RTN","PSOORNE2",39,0)
 .S:ST'=12&('$D(^PS(50.7,+$P(RXOR,"^"),0))) PSOACT="DL",VALMSG="No Pharmacy Orderable Item !",PSONACT=1
"RTN","PSOORNE2",40,0)
 .S:ST=12&('$D(^PS(50.7,+$P(RXOR,"^"),0))) PSOACT="L",VALMSG="No Pharmacy Orderable Item !",PSONACT=1
"RTN","PSOORNE2",41,0)
 .S:ST=16 VALMSG="Rx Placed on HOLD by Provider."
"RTN","PSOORNE2",42,0)
 E  D
"RTN","PSOORNE2",43,0)
 .I ST=5 S SURX=$O(^PS(52.5,"B",RXN,0)) I SURX,$P($G(^PS(52.5,SURX,0)),"^",7)="L" S PSOACT="TL" Q
"RTN","PSOORNE2",44,0)
 .S PSOACT=$S(ST'<1&(ST'>4)!(ST>12):"",ST=12&EXDT&($P($G(PSOPAR),"^",2)):"CDPLT",1:"CPLT")
"RTN","PSOORNE2",45,0)
 .D GET^PSOORNE5 S PSOACT=PSOACT_$S(ACTREN:"N",1:""),PSOACT=PSOACT_$S(ACTREF:"R",1:"")
"RTN","PSOORNE2",46,0)
 .S:'$D(^PS(50.7,+$P(RXOR,"^"),0)) PSOACT="L",PSONACT=1,VALMSG="No Pharmacy Orderable Item !"
"RTN","PSOORNE2",47,0)
 ;K PSOLKFL D PSOL^PSSLOCK(RXN) I '$G(PSOMSG) K PSOMSG S PSOLKFL=1 S PSOACT="",VALMSG="This Order is being edited by another user."
"RTN","PSOORNE2",48,0)
 K PSOMSG S IEN=0,$P(RN," ",12)=" "
"RTN","PSOORNE2",49,0)
 D DIN^PSONFI(+RXOR,$P(RX0,"^",6))
"RTN","PSOORNE2",50,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)=$S($P($G(^PSRX(RXN,"TPB")),"^"):"            TPB Rx #: ",1:"                Rx #: ")
"RTN","PSOORNE2",51,0)
 S ^TMP("PSOAO",$J,IEN,0)=^TMP("PSOAO",$J,IEN,0)_$P(RX0,"^")_$S($G(^PSRX(RXN,"IB")):"$",1:"")_$$ECME^PSOBPSUT(RXN)_$$TITRX^PSOUTL(RXN)_$E(RN,$L($P(RX0,"^")_$S($G(^PSRX(RXN,"IB")):"$",1:"")_$$ECME^PSOBPSUT(RXN)_$$TITRX^PSOUTL(RXN))+1,12)
"RTN","PSOORNE2",52,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)=" ("_$S($P(PSOPAR,"^",3):1,1:"#")_")"_" *Orderable Item: "_$S($D(^PS(50.7,$P(+RXOR,"^"),0)):$P(^PS(50.7,$P(+RXOR,"^"),0),"^")_" "_$P(^PS(50.606,$P(^(0),"^",2),0),"^"),1:"")_NFIO
"RTN","PSOORNE2",53,0)
 S:NFIO["<DIN>" NFIO=IEN_","_($L(^TMP("PSOAO",$J,IEN,0))-4)
"RTN","PSOORNE2",54,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)=" ("_$S($P(PSOPAR,"^",3):2,1:"#")_")"_$S($D(^PSDRUG("AQ",$P(RX0,"^",6))):"       CMOP ",1:"            ")_"Drug: "_$P(^PSDRUG($P(RX0,"^",6),0),"^")_NFID
"RTN","PSOORNE2",55,0)
 S:NFID["<DIN>" NFID=IEN_","_($L(^TMP("PSOAO",$J,IEN,0))-4)
"RTN","PSOORNE2",56,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)=" "_$S('$P(PSOPAR,"^",3):"(2)",1:"   ")_"             NDC: "_$$GETNDC^PSONDCUT(RXN,0)
"RTN","PSOORNE2",57,0)
 S:$G(^PSRX(RXN,"TN"))]"" IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="          Trade Name: "_$G(^PSRX(RXN,"TN"))
"RTN","PSOORNE2",58,0)
 D DOSE^PSOORNE5
"RTN","PSOORNE2",59,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)=" (4)Pat Instructions:" D INS^PSOORNE5
"RTN","PSOORNE2",60,0)
 D PC^PSOORNE5
"RTN","PSOORNE2",61,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="                 SIG:"
"RTN","PSOORNE2",62,0)
 I '$P($G(^PSRX(RXN,"SIG")),"^",2) S SIGOK=0 D  G PTST
"RTN","PSOORNE2",63,0)
 .S X=$P($G(^PSRX(RXN,"SIG")),"^") D SIGONE^PSOHELP S SIG=$E($G(INS1),2,250)
"RTN","PSOORNE2",64,0)
 .F SG=1:1:$L(SIG) S:$L(^TMP("PSOAO",$J,IEN,0)_" "_$P(SIG," ",SG))>80 IEN=IEN+1,$P(^TMP("PSOAO",$J,IEN,0)," ",21)=" " S:$P(SIG," ",SG)'="" ^TMP("PSOAO",$J,IEN,0)=$G(^TMP("PSOAO",$J,IEN,0))_" "_$P(SIG," ",SG)
"RTN","PSOORNE2",65,0)
 S SIGOK=1
"RTN","PSOORNE2",66,0)
 F I=0:0 S I=$O(^PSRX(RXN,"SIG1",I)) Q:'I  D                  ;PSO*210
"RTN","PSOORNE2",67,0)
 . S MIG=$P(^PSRX(RXN,"SIG1",I,0),"^")
"RTN","PSOORNE2",68,0)
 . D WORDWRAP^PSOUTLA2(MIG,.IEN,$NA(^TMP("PSOAO",$J)),21)
"RTN","PSOORNE2",69,0)
 S SIGOK=1 K MIG,SG
"RTN","PSOORNE2",70,0)
PTST S $P(RN," ",25)=" ",PTST=$S($G(^PS(53,+$P(RX0,"^",3),0))]"":$P($G(^PS(53,+$P(RX0,"^",3),0)),"^"),1:""),IEN=IEN+1
"RTN","PSOORNE2",71,0)
 S ^TMP("PSOAO",$J,IEN,0)=" (5)  Patient Status: "_PTST_$E(RN,$L(PTST)+1,25)
"RTN","PSOORNE2",72,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)=" (6)      Issue Date: "_$E($P(RX0,"^",13),4,5)_"/"_$E($P(RX0,"^",13),6,7)_"/"_$E($P(RX0,"^",13),2,3)
"RTN","PSOORNE2",73,0)
 S ^TMP("PSOAO",$J,IEN,0)=^TMP("PSOAO",$J,IEN,0)_"               (7)  Fill Date: "_$E($P(RX2,"^",2),4,5)_"/"_$E($P(RX2,"^",2),6,7)_"/"_$E($P(RX2,"^",2),2,3)
"RTN","PSOORNE2",74,0)
 S ROU=$S($P(RX0,"^",11)="W":"Window",1:"Mail")
"RTN","PSOORNE2",75,0)
 S REFL=$P(RX0,"^",9),I=0 F  S I=$O(^PSRX(RXN,1,I)) Q:'I  S REFL=REFL-1,ROU=$S($P(^PSRX(RXN,1,I,0),"^",2)="W":"Window",1:"Mail")
"RTN","PSOORNE2",76,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="      Last Fill Date: "_$E($P(RX3,"^"),4,5)_"/"_$E($P(RX3,"^"),6,7)_"/"_$E($P(RX3,"^"),2,3)
"RTN","PSOORNE2",77,0)
 D CMOP^PSOORNE3
"RTN","PSOORNE2",78,0)
 S ^TMP("PSOAO",$J,IEN,0)=^TMP("PSOAO",$J,IEN,0)_" ("_ROU_$S($G(PSOCMOP)]"":", "_PSOCMOP,1:"")_")" K ROU,PSOCMOP
"RTN","PSOORNE2",79,0)
 ;*282 Correct return to stock/release display
"RTN","PSOORNE2",80,0)
 S IEN=IEN+1 D
"RTN","PSOORNE2",81,0)
 .S RLD=$S($P(RX2,"^",13):$E($P(RX2,"^",13),4,5)_"/"_$E($P(RX2,"^",13),6,7)_"/"_$E($P(RX2,"^",13),2,3),1:"")
"RTN","PSOORNE2",82,0)
 .I $O(^PSRX(RXN,1,0)) F I=0:0 S I=$O(^PSRX(RXN,1,I)) Q:'I  D
"RTN","PSOORNE2",83,0)
 ..I $P(^PSRX(RXN,1,I,0),"^",18) S RLD=$E($P(^(0),"^",18),4,5)_"/"_$E($P(^(0),"^",18),6,7)_"/"_$E($P(^(0),"^",18),2,3)
"RTN","PSOORNE2",84,0)
 .I $P(RX2,"^",15)&'$G(RLD) S ^TMP("PSOAO",$J,IEN,0)="   Returned to Stock: "_$E($P(RX2,"^",15),4,5)_"/"_$E($P(RX2,"^",15),6,7)_"/"_$E($P(RX2,"^",15),2,3)_$S($P(RX2,"^",14):" (Reprinted)",1:"")
"RTN","PSOORNE2",85,0)
 .E  S ^TMP("PSOAO",$J,IEN,0)="   Last Release Date: "_$S($G(RLD)]"":RLD,1:"        ")
"RTN","PSOORNE2",86,0)
 S ^TMP("PSOAO",$J,IEN,0)=^TMP("PSOAO",$J,IEN,0)_"               (8)      Lot #: "_$P($G(RX2),"^",4)
"RTN","PSOORNE2",87,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="             Expires: "_$E($P(RX2,"^",6),4,5)_"/"_$E($P(RX2,"^",6),6,7)_"/"_$E($P(RX2,"^",6),2,3)
"RTN","PSOORNE2",88,0)
 S ^TMP("PSOAO",$J,IEN,0)=^TMP("PSOAO",$J,IEN,0)_"                          MFG: "_$P($G(RX2),"^",8)
"RTN","PSOORNE2",89,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="(9)      Days Supply: "_$P(RX0,"^",8)_$S($L($P(RX0,"^",8))=1:" ",1:"")
"RTN","PSOORNE2",90,0)
 S ^TMP("PSOAO",$J,IEN,0)=^TMP("PSOAO",$J,IEN,0)_"                    (10)  QTY"_$S($P($G(^PSDRUG($P(RX0,"^",6),660)),"^",8)]"":" ("_$P($G(^PSDRUG($P(RX0,"^",6),660)),"^",8)_")",1:" (  )")_": "_$P(RX0,"^",7)
"RTN","PSOORNE2",91,0)
 I $P($G(^PSDRUG($P(RX0,"^",6),5)),"^")]"" D
"RTN","PSOORNE2",92,0)
 .S $P(RN," ",79)=" ",IEN=IEN+1
"RTN","PSOORNE2",93,0)
 .S ^TMP("PSOAO",$J,IEN,0)=$E(RN,$L("QTY DSP MSG: "_$P(^PSDRUG($P(RX0,"^",6),5),"^"))+1,79)_"QTY DSP MSG: "_$P(^PSDRUG($P(RX0,"^",6),5),"^") K RN
"RTN","PSOORNE2",94,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="(11)    # of Refills: "_$P(RX0,"^",9)_$S($L($P(RX0,"^",9))=1:" ",1:"")_"                          Remaining: "_REFL
"RTN","PSOORNE2",95,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="(12)        Provider: "_$S($D(^VA(200,$P(RX0,"^",4),0)):$P(^VA(200,$P(RX0,"^",4),0),"^"),1:"UNKNOWN")
"RTN","PSOORNE2",96,0)
 I +$P($G(^PSDRUG($P(RX0,"^",6),0)),"^",3)>1,+$P($G(^PSDRUG($P(RX0,"^",6),0)),"^",3)<6 D PRV^PSOORNE5
"RTN","PSOORNE2",97,0)
 I $P(RX3,"^",3) S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="        Cos-Provider: "_$P(^VA(200,$S($G(PSORX("COSIGNING PROVIDER")):PSORX("COSIGNING PROVIDER"),1:$P(RX3,"^",3)),0),"^")
"RTN","PSOORNE2",98,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="(13)         Routing: "_$S($P(RX0,"^",11)="M":"MAIL",1:"WINDOW")_"                  (14)     Copies: "_$S($P(RX0,"^",18):$P(RX0,"^",18),1:1)
"RTN","PSOORNE2",99,0)
 S:$P(RX0,"^",11)="W"&($P(PSOPAR,"^",12)) IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="    Method of Pickup: "_$G(^PSRX(RXN,"MP"))
"RTN","PSOORNE2",100,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="(15)          Clinic: "_$S($D(^SC(+$P(RX0,"^",5),0)):$P(^SC($P(RX0,"^",5),0),"^"),1:"Not on File")
"RTN","PSOORNE2",101,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="(16)        Division: "_$S($G(^PS(59,+$P(RX2,"^",9),0))]"":$P(^PS(59,$P(RX2,"^",9),0),"^")_" ("_$P(^(0),"^",6)_")",1:"UNKNOWN")
"RTN","PSOORNE2",102,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="(17)      Pharmacist: "_$S($P(RX2,"^",3):$P(^VA(200,$P(RX2,"^",3),0),"^"),1:"")
"RTN","PSOORNE2",103,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="(18)         Remarks:" D RMK^PSOORNE3
"RTN","PSOORNE2",104,0)
 S IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="(19)      Counseling: "_$S($P($G(^PSRX(RXN,"PC")),"^"):"YES",1:"NO")_"                      "_$S($P($G(^PSRX(RXN,"PC")),"^"):"Was Counseling Understood: "_$S($P($G(^PSRX(RXN,"PC")),"^",2):"YES",1:"NO"),1:"")
"RTN","PSOORNE2",105,0)
 S:$O(^PSRX(RXN,1,0)) REF=1,IEN=IEN+1,^TMP("PSOAO",$J,IEN,0)="(20)     Refill Data"
"RTN","PSOORNE2",106,0)
 I $$STATUS^PSOBPSUT(RXN,0)'="" D
"RTN","PSOORNE2",107,0)
 . N DAW S IEN=IEN+1,DAW=$$GETDAW^PSODAWUT(RXN,0)
"RTN","PSOORNE2",108,0)
 . S ^TMP("PSOAO",$J,IEN,0)="(21)        DAW Code: "_DAW_" - "_$$DAWEXT^PSSDAWUT(DAW)
"RTN","PSOORNE2",109,0)
 D DISP^PSOORNE6
"RTN","PSOORNE2",110,0)
 I $G(PSOBEDT),PSOACT["E" S PSOACT="E"
"RTN","PSOORNE2",111,0)
 I $G(PSOBEDT),PSOACT'["E" S PSOACT=""
"RTN","PSOORNE2",112,0)
 Q:$G(PSORXED)!($G(COPY))!($G(UPMI))
"RTN","PSOORNE2",113,0)
 S:$G(PSOBEDT) (PSOEDIT,PSORXED)=1
"RTN","PSOORNE2",114,0)
RENERR S PSORERR=0 D ^PSOLMLST
"RTN","PSOORNE2",115,0)
 I PSORERR=1 S:$G(PSOBEDT) (PSOEDIT,PSORXED)=1 G RENERR
"RTN","PSOORNE2",116,0)
 K DRET,SIG
"RTN","PSOORNE2",117,0)
 Q
"RTN","PSOORNE2",118,0)
UL1 ;
"RTN","PSOORNE2",119,0)
 Q
"RTN","PSOORUT1")
0^6^B83981960
"RTN","PSOORUT1",1,0)
PSOORUT1 ;BIR/SAB - Utility routine for oerr interface ;6/28/07 7:36am
"RTN","PSOORUT1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**1,14,30,46,132,148,233,274,225,305,289,251,387,385,313,427**;DEC 1997;Build 21
"RTN","PSOORUT1",3,0)
 ;External reference to ^PSDRUG supported by DBIA 221
"RTN","PSOORUT1",4,0)
 ;External reference to ^PSXOPUTL supported by DBIA 2203
"RTN","PSOORUT1",5,0)
 ;called from HD^PSOORUTL
"RTN","PSOORUT1",6,0)
REL ;removed order from hold
"RTN","PSOORUT1",7,0)
 S ACT=1,ORS=0
"RTN","PSOORUT1",8,0)
 I POERR("PSOFILNM")["S" S DA=+POERR("PSOFILNM") D  G EXIT^PSOORUTL
"RTN","PSOORUT1",9,0)
 .Q:'$D(^PS(52.41,DA,0))  Q:$P(^PS(52.41,DA,0),"^",3)="RF"
"RTN","PSOORUT1",10,0)
 .S $P(^PS(52.41,DA,0),"^",3)="NW",POERR("STAT")="OR",POERR("FILLER")=DA_"^P"
"RTN","PSOORUT1",11,0)
 .S:$G(POERR("COMM"))']"" POERR("COMM")="Order RELEASED from HOLD by OE/RR before finished." S $P(^PS(52.41,DA,4),"^")=POERR("COMM"),ORS=1
"RTN","PSOORUT1",12,0)
 S DA=POERR("PSOFILNM") I $D(^PSRX(DA,0)) S ORS=1,PSDA=DA D  G EXIT^PSOORUTL
"RTN","PSOORUT1",13,0)
 .S POERR("FILLER")=DA_"^R",POERR("STAT")="OR"
"RTN","PSOORUT1",14,0)
 .S:'$D(POERR("COMM")) POERR("COMM")="Prescription Released from HOLD by OE/RR"
"RTN","PSOORUT1",15,0)
 .I DT>$P(^PSRX(DA,2),"^",6) D
"RTN","PSOORUT1",16,0)
 ..S EXP=$P(^PSRX(DA,2),"^",6) S:$P(^PSRX(DA,"STA"),"^")<12 $P(^PSRX(DA,"STA"),"^")=11,PSOEXFLG=1 S POERR("STAT")="UR",POERR("COMM")="Medication Expired on "_$E(EXP,4,5)_"/"_$E(EXP,6,7)_"/"_$E(EXP,2,3)_".",POERR("PHARMST")="" D ECAN^PSOUTL(DA) Q
"RTN","PSOORUT1",17,0)
 .I $P(^PSRX(DA,"STA"),"^")'=16 S POERR("STAT")="UR",POERR("COMM")="Unable to Release from Hold" Q
"RTN","PSOORUT1",18,0)
 .S RXFL(DA)=0,FDT=$P(^PSRX(DA,2),"^",2)
"RTN","PSOORUT1",19,0)
 .I $O(^PSRX(DA,1,0)) F I=0:0 S I=$O(^PSRX(DA,1,I)) Q:'I  S FDT=$P(^PSRX(DA,1,I,0),"^"),RXFL(DA)=I
"RTN","PSOORUT1",20,0)
 .I FDT>DT N PSOSITEZ,ZPSOPAR6 S PSOSITEZ=$S($P($G(^PSRX(DA,2)),"^",9):$P(^(2),"^",9),1:$O(^PS(59,0))),ZPSOPAR6=$P($G(^PS(59,PSOSITEZ,1)),"^",6) I ZPSOPAR6 D  Q
"RTN","PSOORUT1",21,0)
 ..S RXXDA=DA,DA=$O(^PS(52.5,"B",RXXDA,0)) I DA S DIK="^PS(52.5," D ^DIK K DIK
"RTN","PSOORUT1",22,0)
 ..S DA=RXXDA
"RTN","PSOORUT1",23,0)
 ..S DIC="^PS(52.5,",DIC(0)="L",DLAYGO=52.5,X=RXXDA,DIC("DR")=".02///"_FDT_";.03////"_$P(^PSRX(DA,0),"^",2)_";.04///M;.05///0;.06////"_PSOSITEZ_";2///0;9///"_RXFL(DA) K DD,DO D FILE^DICN K RXFL,DD,DO
"RTN","PSOORUT1",24,0)
 ..S DA=RXXDA K RXXDA S $P(^PSRX(DA,"STA"),"^")=5,LFD=$E(FDT,4,5)_"-"_$E(FDT,6,7)_"-"_$E(FDT,2,3) D ACT1
"RTN","PSOORUT1",25,0)
 ..S PSOSUSZ=1
"RTN","PSOORUT1",26,0)
 .E  S $P(^PSRX(DA,"STA"),"^")=0
"RTN","PSOORUT1",27,0)
 .S RXF=0 F I=0:0 S I=$O(^PSRX(DA,1,I)) Q:'I  S RXF=I S:I>5 RXF=I+1
"RTN","PSOORUT1",28,0)
 .D ACT^PSOORUTL
"RTN","PSOORUT1",29,0)
 .I $$SUBMIT^PSOBPSUT(DA) D ECMESND^PSOBPSU1(DA,"","",$S('$O(^PSRX(DA,1,0)):"OF",1:"RF"))
"RTN","PSOORUT1",30,0)
 G EXIT^PSOORUTL
"RTN","PSOORUT1",31,0)
ACT1 I '$D(RXF) S RXF=0 F I=0:0 S I=$O(^PSRX(DA,1,I)) Q:'I  S RXF=I S:I>5 RXF=I+1
"RTN","PSOORUT1",32,0)
 S IR=0 F FDA=0:0 S FDA=$O(^PSRX(DA,"A",FDA)) Q:'FDA  S IR=FDA
"RTN","PSOORUT1",33,0)
 S IR=IR+1,^PSRX(DA,"A",0)="^52.3DA^"_IR_"^"_IR
"RTN","PSOORUT1",34,0)
 D NOW^%DTC S ^PSRX(DA,"A",IR,0)=%_"^S^"_POERR("USER")_"^"_RXF_"^"_"RX Placed on Suspense until "_LFD
"RTN","PSOORUT1",35,0)
 Q
"RTN","PSOORUT1",36,0)
SUS ;
"RTN","PSOORUT1",37,0)
 I $P($G(^PSRX(+$G(FILLER),"STA")),"^")=5 N PSOMSORR,PLACERXX D EN^PSOHLSN1(+$G(FILLER),"SC","ZS","")
"RTN","PSOORUT1",38,0)
 Q
"RTN","PSOORUT1",39,0)
BLD ;builds med profile for Listman
"RTN","PSOORUT1",40,0)
 K PSODCREV,^TMP("PSOPF",$J),PSOLST S:$G(PSOOPT)'=3 PSOOPT=0 I '$G(PSOSD) S ^TMP("PSOPF",$J,1,0)="This patient has no prescriptions" S PSOCNT=0,PSOPF=1 Q
"RTN","PSOORUT1",41,0)
 D EOJ,SHOW
"RTN","PSOORUT1",42,0)
EOJ ;
"RTN","PSOORUT1",43,0)
 K PSOQFLG,PSODRG,PSODATA,PSOLF
"RTN","PSOORUT1",44,0)
 Q
"RTN","PSOORUT1",45,0)
 ;-----------------------------------------------------------------
"RTN","PSOORUT1",46,0)
SHOW ;
"RTN","PSOORUT1",47,0)
 ; - ePharmacy modification to create a section for Rx with REJECTs
"RTN","PSOORUT1",48,0)
 N PSOTMP,PSOSTS,PSODRNM,I,PSORX
"RTN","PSOORUT1",49,0)
 S (PSOSTS,PSODRNM)=""
"RTN","PSOORUT1",50,0)
 F  S PSOSTS=$O(PSOSD(PSOSTS)) Q:PSOSTS=""  D
"RTN","PSOORUT1",51,0)
 . F  S PSODRNM=$O(PSOSD(PSOSTS,PSODRNM)) Q:PSODRNM=""  D
"RTN","PSOORUT1",52,0)
 . . S PSORX=+$G(PSOSD(PSOSTS,PSODRNM))
"RTN","PSOORUT1",53,0)
  . . ; PSO*7*427 - add a new section for open TRICARE/CHAMPVA/RRR rejects after the 79/88 open rejects
"RTN","PSOORUT1",54,0)
 . . I PSOSTS="ACTIVE",$$FIND^PSOREJUT(PSORX,,,"79,88") S PSOTMP(" REJECT",PSODRNM)=PSOSTS Q   ; DUR/RTS
"RTN","PSOORUT1",55,0)
 . . I PSOSTS="ACTIVE",$$TRIC^PSOREJP1(PSORX),$$FIND^PSOREJUT(PSORX,,,,1) S PSOTMP(" REJECT2",PSODRNM)=PSOSTS Q  ; TRI/CVA
"RTN","PSOORUT1",56,0)
 . . I PSOSTS="ACTIVE",'$$TRIC^PSOREJP1(PSORX),$$FIND^PSOREJUT(PSORX,,,,,1) S PSOTMP(" REJECT2",PSODRNM)=PSOSTS Q  ; RRR
"RTN","PSOORUT1",57,0)
 . . S PSOTMP(PSOSTS,PSODRNM)=PSOSTS
"RTN","PSOORUT1",58,0)
 ;
"RTN","PSOORUT1",59,0)
 S (PSOSTS,PSODRG)="",(PSOCNT,PSOQFLG,IEN)=0
"RTN","PSOORUT1",60,0)
 K RN,DL S $P(RN," ",12)=" ",$P(DL," ",40)=" "
"RTN","PSOORUT1",61,0)
 F PSCNT=0:0 S PSOSTS=$O(PSOTMP(PSOSTS)) Q:PSOSTS=""  D
"RTN","PSOORUT1",62,0)
 . D STA
"RTN","PSOORUT1",63,0)
 . F PSOCT=0:0 S PSODRG=$O(PSOTMP(PSOSTS,PSODRG)) Q:PSODRG=""  Q:PSOCNT>1000!PSOQFLG  D
"RTN","PSOORUT1",64,0)
 . . S PSOSTA=PSOTMP(PSOSTS,PSODRG)
"RTN","PSOORUT1",65,0)
 . . S PSODATA=PSOSD(PSOSTA,PSODRG) I PSOSTA="ZNONVA" D NVA Q
"RTN","PSOORUT1",66,0)
 . . S PSOCNT=PSOCNT+1 I PSOSTA="PENDING" D PEN Q
"RTN","PSOORUT1",67,0)
 . . S:'$D(^PSRX(+PSODATA,0)) PSOCNT=PSOCNT-1 D:$D(^(0)) DISPL
"RTN","PSOORUT1",68,0)
 S (VALMCNT,PSOPF)=IEN
"RTN","PSOORUT1",69,0)
SHOWX K DIRUT,DTOUT,DUOUT,DIROUT,PSODRG
"RTN","PSOORUT1",70,0)
 Q
"RTN","PSOORUT1",71,0)
 ;
"RTN","PSOORUT1",72,0)
DISPL S IEN=IEN+1 N PSOID,PSOCMOP,STATLTH,ECME,TITRX
"RTN","PSOORUT1",73,0)
 K PSOLNT,PSOQTL,PSOLSP S PSOLRX=$S($G(^PSRX(+PSODATA,"IB")):13,1:14)-$L($P(^PSRX(+PSODATA,0),"^")),$P(PSOLNT," ",PSOLRX)=" ",PSODQL=$L($P(PSODRG,"^"))+$L($P(^PSRX(+PSODATA,0),"^",7))
"RTN","PSOORUT1",74,0)
 I PSODQL<39 S $P(PSOQTL," ",(40-PSODQL))=" "
"RTN","PSOORUT1",75,0)
 E  S $P(PSOQTL," ",(52-$L($P(^PSRX(+PSODATA,0),"^",7))))=" ",$P(PSOLSP," ",(41-$L($P(PSODRG,"^"))))=" "
"RTN","PSOORUT1",76,0)
 S ECME=$$ECME^PSOBPSUT(+PSODATA) I ECME'="" S PSOLNT=$E(PSOLNT,1,$L(PSOLNT)-1)
"RTN","PSOORUT1",77,0)
 S TITRX=$$TITRX^PSOUTL(+PSODATA) I TITRX'="" S PSOLNT=$E(PSOLNT,1,$L(PSOLNT)-1)
"RTN","PSOORUT1",78,0)
 S ^TMP("PSOPF",$J,IEN,0)=$J(PSOCNT,2)_$S($L(PSOCNT)<3:" ",1:"")_$P(^PSRX(+PSODATA,0),"^")_$S($G(^PSRX(+PSODATA,"IB")):"$",1:"")_ECME_TITRX_PSOLNT_$P(PSODRG,"^")_$S(PSODQL<39:PSOQTL_$P(^PSRX(+PSODATA,0),"^",7)_" ",1:$G(PSOLSP))
"RTN","PSOORUT1",79,0)
 S STA="A^N^R^H^N^S^^^^^^E^DC^^DP^DE^HP^P^"
"RTN","PSOORUT1",80,0)
 S PSOCMOP=""
"RTN","PSOORUT1",81,0)
 I $D(^PSDRUG("AQ",$P(^PSRX(+PSODATA,0),"^",6))) S PSOCMOP=">"
"RTN","PSOORUT1",82,0)
 N X S X="PSXOPUTL" X ^%ZOSF("TEST") K X I $T D
"RTN","PSOORUT1",83,0)
 .N DA S DA=+PSODATA D ^PSXOPUTL K DA
"RTN","PSOORUT1",84,0)
 .I $G(PSXZ(PSXZ("L")))=0!($G(PSXZ(PSXZ("L")))=2) S PSOCMOP="T"
"RTN","PSOORUT1",85,0)
 .K PSXZ
"RTN","PSOORUT1",86,0)
 N PSOBADR
"RTN","PSOORUT1",87,0)
 S PSOBADR=$O(^PSRX(+PSODATA,"L",9999),-1)
"RTN","PSOORUT1",88,0)
 I PSOBADR'="" S PSOBADR=$G(^PSRX(+PSODATA,"L",PSOBADR,0)) I PSOBADR["(BAD ADDRESS)" S PSOBADR="B"
"RTN","PSOORUT1",89,0)
 I PSOBADR'="B" S PSOBADR=""
"RTN","PSOORUT1",90,0)
 S (STA,STATLTH)=$P(STA,"^",$P(PSODATA,"^",2)+1) D
"RTN","PSOORUT1",91,0)
 .I $G(^PSRX(+PSODATA,"DDSTA"))]"" S (STATLTH,STA)="DD" Q
"RTN","PSOORUT1",92,0)
 .S (STATLTH,STA)=$S($P($G(^PSRX(+PSODATA,7)),"^")=1:"DA",$P($G(^PSRX(+PSODATA,7)),"^")=2:"DF",1:STA)
"RTN","PSOORUT1",93,0)
 S STAPRT=STA_PSOCMOP_PSOBADR,STATLTH=$L(STAPRT)
"RTN","PSOORUT1",94,0)
 S ^TMP("PSOPF",$J,IEN,0)=^TMP("PSOPF",$J,IEN,0)_STAPRT_$S(STATLTH=0:"   ",STATLTH=1:"  ",STATLTH=2:" ",1:"")
"RTN","PSOORUT1",95,0)
 S PSOID=$P(^PSRX(+PSODATA,0),"^",13),PSOLF=+$G(^(3)),^TMP("PSOPF",$J,IEN,0)=^TMP("PSOPF",$J,IEN,0)_$E(PSOID,4,5)_"-"_$E(PSOID,6,7)_" "
"RTN","PSOORUT1",96,0)
 N RFLZRO,PSOLRD S PSOLRD=$P($G(^PSRX(+PSODATA,2)),"^",13)
"RTN","PSOORUT1",97,0)
 F PSOX=0:0 S PSOX=$O(^PSRX(+PSODATA,1,PSOX)) Q:'PSOX  D
"RTN","PSOORUT1",98,0)
 . S RFLZRO=$G(^PSRX(+PSODATA,1,PSOX,0))
"RTN","PSOORUT1",99,0)
 . I +RFLZRO=PSOLF,$P(RFLZRO,"^",16) S PSOLF=PSOLF_"^R"
"RTN","PSOORUT1",100,0)
 . S:$P(RFLZRO,"^",18)'="" PSOLRD=$P(RFLZRO,"^",18) I $P(RFLZRO,"^",16) S PSOLRD=PSOLRD_"^R"
"RTN","PSOORUT1",101,0)
 K PSOX
"RTN","PSOORUT1",102,0)
 I '$O(^PSRX(+PSODATA,1,0)),$P(^PSRX(+PSODATA,2),"^",15) S PSOLF=PSOLF_"^R",PSOLRD=PSOLRD_"^R"
"RTN","PSOORUT1",103,0)
 S PSOLF=$S($G(PSOLF):$E(PSOLF,4,5),1:"  ")_"-"_$S($G(PSOLF):$E(PSOLF,6,7),1:"  ")_$S($P(PSOLF,"^",2)="R":"R ",1:"  ")
"RTN","PSOORUT1",104,0)
 S PSOLRD=$S($G(PSOLRD):$E(PSOLRD,4,5),1:"  ")_"-"_$S($G(PSOLRD):$E(PSOLRD,6,7),1:"  ")_$S($P(PSOLRD,"^",2)="R":"R ",1:"  ")
"RTN","PSOORUT1",105,0)
 S ^TMP("PSOPF",$J,IEN,0)=^TMP("PSOPF",$J,IEN,0)_$S($G(PSORFG):PSOLRD,1:PSOLF)
"RTN","PSOORUT1",106,0)
 S ^TMP("PSOPF",$J,IEN,0)=^TMP("PSOPF",$J,IEN,0)_$J($P(PSODATA,"^",6),2)_" "_$J($P(PSODATA,"^",8),3)
"RTN","PSOORUT1",107,0)
 ;recently dc'd rxs
"RTN","PSOORUT1",108,0)
 I $P($G(^PSRX(+PSODATA,3)),"^",5) D  K X
"RTN","PSOORUT1",109,0)
 .S X2=$S($P(PSOPAR,"^",33):$P(PSOPAR,"^",33),1:7),X1=$P(^PSRX(+PSODATA,3),"^",5) D C^%DTC
"RTN","PSOORUT1",110,0)
 .I DT<X S PSODCREV(IEN)=IEN
"RTN","PSOORUT1",111,0)
 ;recently expired rxs
"RTN","PSOORUT1",112,0)
 I $P($G(^PSRX(+PSODATA,2)),"^",6)<DT,'$P($G(^PSRX(+PSODATA,3)),"^",5) D  K X
"RTN","PSOORUT1",113,0)
 .S X2=$S($P(PSOPAR,"^",33):$P(PSOPAR,"^",33),1:7),X1=$P(^PSRX(+PSODATA,2),"^",6) D C^%DTC
"RTN","PSOORUT1",114,0)
 .I DT<X S PSODCREV(IEN)=IEN
"RTN","PSOORUT1",115,0)
 ;
"RTN","PSOORUT1",116,0)
 I PSODQL>38 S IEN=IEN+1 S ^TMP("PSOPF",$J,IEN,0)=PSOQTL_"Qty: "_$P(^PSRX(+PSODATA,0),"^",7)
"RTN","PSOORUT1",117,0)
 K PSOLNT,PSOQTL,PSOLSP,PSOLRX,PSODQL
"RTN","PSOORUT1",118,0)
 S PSOLST(PSOCNT)="52^"_+PSODATA_"^"_PSOSTA
"RTN","PSOORUT1",119,0)
 K PSODATA,PSOLF S PSOPF=IEN
"RTN","PSOORUT1",120,0)
 Q
"RTN","PSOORUT1",121,0)
 ;
"RTN","PSOORUT1",122,0)
STA N LABEL,LINE,POS
"RTN","PSOORUT1",123,0)
 S LABEL=PSOSTS,IEN=IEN+1
"RTN","PSOORUT1",124,0)
 I PSOSTS="ZNONVA" S LABEL="Non-VA MEDS (Not dispensed by VA)"
"RTN","PSOORUT1",125,0)
 I PSOSTS=" REJECT" S LABEL="REFILL TOO SOON/DUR REJECTS (Third Party)"
"RTN","PSOORUT1",126,0)
 I PSOSTS=" REJECT2" S LABEL="OTHER REJECTS PENDING RESOLUTION"  ;PSO*7*427 added new section
"RTN","PSOORUT1",127,0)
 S POS=80-$L(LABEL)/2,$P(LINE,"-",81)="",$E(LINE,POS+1,POS+$L(LABEL))=LABEL
"RTN","PSOORUT1",128,0)
 S ^TMP("PSOPF",$J,IEN,0)=LINE
"RTN","PSOORUT1",129,0)
 Q
"RTN","PSOORUT1",130,0)
PENX S PSOLST(PSOCNT)="52.41^"_$P(PSODATA,"^",10)_"^"_PSOSTA
"RTN","PSOORUT1",131,0)
 K PSODATA,PSOLF,RN,PSOLSP,PSOQTL,PSOLNT
"RTN","PSOORUT1",132,0)
 Q
"RTN","PSOORUT1",133,0)
PEN ;
"RTN","PSOORUT1",134,0)
 N PSOQTL,PSOLNT,PSOLNTZ,PSOQTLX,PSCMOPF,SPACEZ
"RTN","PSOORUT1",135,0)
 Q:'$D(^PS(52.41,$P(PSODATA,"^",10),0))
"RTN","PSOORUT1",136,0)
 S PSCMOPF=0 I $P($G(PSODATA),"^",11),$D(^PSDRUG("AQ",$P(PSODATA,"^",11))) S PSCMOPF=1
"RTN","PSOORUT1",137,0)
 S IEN=IEN+1,^TMP("PSOPF",$J,IEN,0)=$J(PSOCNT,2)_$S($L(PSOCNT)<3:" ",1:"")_$P(PSODRG,"^")
"RTN","PSOORUT1",138,0)
 I $P($G(^PS(52.41,+$P(PSODATA,"^",10),0)),"^",23)=1 S ^TMP("PSOPF",$J,IEN,"RV")=""
"RTN","PSOORUT1",139,0)
 S PSOLNT=$L($P(PSODRG,"^")),PSOLNTZ=$L($P(PSODATA,"^",8))
"RTN","PSOORUT1",140,0)
 S $P(PSOQTLX," ",(11-PSOLNTZ))=" "
"RTN","PSOORUT1",141,0)
 S:PSOLNT<37 $P(PSOQTL," ",(37-PSOLNT))=" "
"RTN","PSOORUT1",142,0)
 I PSOLNT<38 D  G PENX
"RTN","PSOORUT1",143,0)
 .I PSOLNT=37 S PSOQTL=""
"RTN","PSOORUT1",144,0)
 .I $P(^PS(52.41,$P(PSODATA,"^",10),0),"^",3)="RF" S ^TMP("PSOPF",$J,IEN,0)=^TMP("PSOPF",$J,IEN,0)_$G(PSOQTL)_"  Refill Request   Rx #: "_$P(^PSRX($P(^PS(52.41,$P(PSODATA,"^",10),0),"^",19),0),"^") Q
"RTN","PSOORUT1",145,0)
 .S ^TMP("PSOPF",$J,IEN,0)=^TMP("PSOPF",$J,IEN,0)_$G(PSOQTL)_"  "_"QTY: "_$P(PSODATA,"^",8)_$G(PSOQTLX)_" ISDT: "_$S('$P(PSODATA,"^",9):"     ",1:$E($P(PSODATA,"^",9),4,5)_"-"_$E($P(PSODATA,"^",9),6,7))_$S($G(PSCMOPF):"> ",1:"  ")
"RTN","PSOORUT1",146,0)
 .S ^TMP("PSOPF",$J,IEN,0)=^TMP("PSOPF",$J,IEN,0)_"REF: "_$S($L($P(PSODATA,"^",6))>1:"",1:" ")_$P(PSODATA,"^",6)
"RTN","PSOORUT1",147,0)
 S IEN=IEN+1,$P(SPACEZ," ",42)=" "
"RTN","PSOORUT1",148,0)
 I $P(^PS(52.41,$P(PSODATA,"^",10),0),"^",3)="RF" S ^TMP("PSOPF",$J,IEN,0)=SPACEZ_"Refill Request   Rx #: "_$P(^PSRX($P(^PS(52.41,$P(PSODATA,"^",10),0),"^",19),0),"^") G PENX
"RTN","PSOORUT1",149,0)
 S ^TMP("PSOPF",$J,IEN,0)=SPACEZ_"QTY: "_$P(PSODATA,"^",8)_$G(PSOQTLX)_" ISDT: "_$S('$P(PSODATA,"^",9):"     ",1:$E($P(PSODATA,"^",9),4,5)_"-"_$E($P(PSODATA,"^",9),6,7))_$S($G(PSCMOPF):"> ",1:"  ")_"REF: "_$S($L($P(PSODATA,"^",6))>1:"",1:" ")
"RTN","PSOORUT1",150,0)
 S ^TMP("PSOPF",$J,IEN,0)=^TMP("PSOPF",$J,IEN,0)_$P(PSODATA,"^",6)
"RTN","PSOORUT1",151,0)
 G PENX
"RTN","PSOORUT1",152,0)
 ;
"RTN","PSOORUT1",153,0)
NVA ; Setting the Non-VA Meds on the Medication Profile Screen (ListMan)
"RTN","PSOORUT1",154,0)
 S IEN=IEN+1,^TMP("PSOPF",$J,IEN,0)="  "_$P(PSODRG,"^")_" "
"RTN","PSOORUT1",155,0)
 I ($L(^TMP("PSOPF",$J,IEN,0))+$L($P(PSODATA,"^",6))>70) S IEN=IEN+1,^TMP("PSOPF",$J,IEN,0)="    "
"RTN","PSOORUT1",156,0)
 S ^TMP("PSOPF",$J,IEN,0)=^TMP("PSOPF",$J,IEN,0)_$P(PSODATA,"^",6)_" "
"RTN","PSOORUT1",157,0)
 I ($L(^TMP("PSOPF",$J,IEN,0))+$L($P(PSODATA,"^",8))>70) S IEN=IEN+1,^TMP("PSOPF",$J,IEN,0)="    "
"RTN","PSOORUT1",158,0)
 S ^TMP("PSOPF",$J,IEN,0)=^TMP("PSOPF",$J,IEN,0)_$P(PSODATA,"^",8)
"RTN","PSOORUT1",159,0)
 I ($L(^TMP("PSOPF",$J,IEN,0))+20)>70 D  Q
"RTN","PSOORUT1",160,0)
 . S IEN=IEN+1,$P(^TMP("PSOPF",$J,IEN,0)," ",51)="Date Documented: "_$E($P(PSODATA,"^",9),4,5)_"/"_$E($P(PSODATA,"^",9),6,7)_"/"_$E($P(PSODATA,"^",9),2,3)
"RTN","PSOORUT1",161,0)
 F I=0:0 S ^TMP("PSOPF",$J,IEN,0)=^TMP("PSOPF",$J,IEN,0)_" " Q:$L(^TMP("PSOPF",$J,IEN,0))>49
"RTN","PSOORUT1",162,0)
 S ^TMP("PSOPF",$J,IEN,0)=^TMP("PSOPF",$J,IEN,0)_"Date Documented: "_$E($P(PSODATA,"^",9),4,5)_"/"_$E($P(PSODATA,"^",9),6,7)_"/"_$E($P(PSODATA,"^",9),2,3)
"RTN","PSOORUT1",163,0)
 Q
"RTN","PSOPMP0")
0^7^B89661374
"RTN","PSOPMP0",1,0)
PSOPMP0 ;BIRM/MFR - Patient Medication Profile - Listmanager ;10/28/06
"RTN","PSOPMP0",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**260,281,303,289,382,313,427**;DEC 1997;Build 21
"RTN","PSOPMP0",3,0)
 ;Reference to EN1^GMRADPT supported by IA #10099
"RTN","PSOPMP0",4,0)
 ;Reference to EN6^GMRVUTL supported by IA #1120
"RTN","PSOPMP0",5,0)
 ;Reference to ^PS(55 supported by DBIA 2228
"RTN","PSOPMP0",6,0)
 ;
"RTN","PSOPMP0",7,0)
EN ;Menu option entry point
"RTN","PSOPMP0",8,0)
 N PSOEXPDC,PSOEXDCE,PSOSRTBY,PSORDER,PSOSIGDP,PSOSTSGP,PSOSTORD,PSORDCNT,PSOSTSEQ,PSORDSEQ,PSOCHNG
"RTN","PSOPMP0",9,0)
 N GRPLN,DIC,Y,DFN,GRPLN,HIGHLN,LASTLINE,VALMCNT
"RTN","PSOPMP0",10,0)
 ;
"RTN","PSOPMP0",11,0)
 ;Division selection
"RTN","PSOPMP0",12,0)
 I '$G(PSOSITE) D ^PSOLSET I '$D(PSOPAR) W $C(7),!!,"Pharmacy Division Must be Selected!",! G EXIT
"RTN","PSOPMP0",13,0)
 ;
"RTN","PSOPMP0",14,0)
 ;Patient selection
"RTN","PSOPMP0",15,0)
 W !! S DIC=2,DIC(0)="QEAM" D ^DIC G EXIT:Y<0  S DFN=+Y
"RTN","PSOPMP0",16,0)
 S PSODFN=DFN D CHKADDR^PSOBAI(DFN,1,1)  ;bad address flag/update
"RTN","PSOPMP0",17,0)
 D LST(PSOSITE,DFN)
"RTN","PSOPMP0",18,0)
 Q
"RTN","PSOPMP0",19,0)
 ;
"RTN","PSOPMP0",20,0)
LST(SITE,PSODFN) ;ListManager entry point
"RTN","PSOPMP0",21,0)
 ; Loading Division/User preferences
"RTN","PSOPMP0",22,0)
 D LOAD^PSOPMPPF(SITE,DUZ)
"RTN","PSOPMP0",23,0)
 W !,"Please wait..."
"RTN","PSOPMP0",24,0)
 D EN^VALM("PSO PMP MAIN")
"RTN","PSOPMP0",25,0)
 D FULL^VALM1
"RTN","PSOPMP0",26,0)
 G EXIT
"RTN","PSOPMP0",27,0)
 ;
"RTN","PSOPMP0",28,0)
HDR      ;Header
"RTN","PSOPMP0",29,0)
 N LINE,POS,LINE1,LINE2,LINE3,LINE4,WT,WTDT,HT,HTDT,VADM,DFN,PNAME,DOB,SEX,X,GMRAL,ADVREA
"RTN","PSOPMP0",30,0)
 K VADM S DFN=PSODFN D DEM^VADPT
"RTN","PSOPMP0",31,0)
 S PNAME=VADM(1)
"RTN","PSOPMP0",32,0)
 S DOB=$S(+VADM(3):$P(VADM(3),"^",2)_" ("_$G(VADM(4))_")",1:"UNKNOWN")
"RTN","PSOPMP0",33,0)
 S SEX=$P(VADM(5),"^",2)
"RTN","PSOPMP0",34,0)
 S (WT,X)="",GMRVSTR="WT" D EN6^GMRVUTL I X'="" S WT=$J($P(X,"^",8)/2.2,6,2),WTDT=$$DAT^PSOPMP1($P(X,"^")\1,"/",1)
"RTN","PSOPMP0",35,0)
 S (HT,X)="",GMRVSTR="HT" D EN6^GMRVUTL I X'="" S HT=$J($P(X,"^",8)*2.54,6,2),HTDT=$$DAT^PSOPMP1($P(X,"^")\1,"/",1)
"RTN","PSOPMP0",36,0)
 S LINE1=PNAME
"RTN","PSOPMP0",37,0)
 S LINE1=$$ALLERGY^PSOPMP1(LINE1,DFN)
"RTN","PSOPMP0",38,0)
 S LINE2="  PID: "_$P(VADM(2),"^",2),$E(LINE2,50)="HEIGHT(cm): "_$S(HT'="":HT_" ("_HTDT_")",1:"NOT AVAILABLE")
"RTN","PSOPMP0",39,0)
 S LINE3="  DOB: "_DOB,$E(LINE3,50)="WEIGHT(kg): "_$S(WT'="":WT_" ("_WTDT_")",1:"NOT AVAILABLE")
"RTN","PSOPMP0",40,0)
 S LINE4="  SEX: "_SEX,$E(LINE4,43)="EXP/CANCEL CUTOFF: "_PSOEXDCE_" DAYS"
"RTN","PSOPMP0",41,0)
 ;
"RTN","PSOPMP0",42,0)
 K VALMHDR S VALMHDR(1)=LINE1,VALMHDR(2)=LINE2,VALMHDR(3)=LINE3,VALMHDR(4)=LINE4
"RTN","PSOPMP0",43,0)
 D SETHDR^PSOPMP1()
"RTN","PSOPMP0",44,0)
 Q
"RTN","PSOPMP0",45,0)
 ;
"RTN","PSOPMP0",46,0)
INIT ;Populates the Body section for ListMan
"RTN","PSOPMP0",47,0)
 K ^TMP("PSOPMP0",$J),^TMP("PSOPMPSR",$J)
"RTN","PSOPMP0",48,0)
 D SETSORT(PSOSRTBY),SETLINE
"RTN","PSOPMP0",49,0)
 S VALMSG="Select the entry # to view or ?? for more actions"
"RTN","PSOPMP0",50,0)
 Q
"RTN","PSOPMP0",51,0)
 ;
"RTN","PSOPMP0",52,0)
SETLINE ;Sets the line to be displayed in ListMan
"RTN","PSOPMP0",53,0)
 N TYPE,STS,SUB,SEQ,LINE,Z,TOTAL,I,X,X1,ORDCNT,LBL,LN,IENSUB,GROUP,GRP,QTYL
"RTN","PSOPMP0",54,0)
 I '$D(^TMP("PSOPMPSR",$J)) D  Q
"RTN","PSOPMP0",55,0)
 . F I=1:1:6 S ^TMP("PSOPMP0",$J,I,0)=""
"RTN","PSOPMP0",56,0)
 . S ^TMP("PSOPMP0",$J,7,0)="                    No prescriptions found for this patient."
"RTN","PSOPMP0",57,0)
 . S VALMCNT=1
"RTN","PSOPMP0",58,0)
 ;
"RTN","PSOPMP0",59,0)
 ;Resetting list to NORMAL video attributes
"RTN","PSOPMP0",60,0)
 F I=1:1:$G(LASTLINE) D RESTORE^VALM10(I)
"RTN","PSOPMP0",61,0)
 K GRPLN,HIGHLN
"RTN","PSOPMP0",62,0)
 ;Building the list (line by line)
"RTN","PSOPMP0",63,0)
 S (GROUP,STS,SUB)="",LINE=0 K ^TMP("PSOPMP0",$J)
"RTN","PSOPMP0",64,0)
 F  S GROUP=$O(^TMP("PSOPMPSR",$J,GROUP)) Q:GROUP=""  D
"RTN","PSOPMP0",65,0)
 . S GRP=$P(GROUP,"^")
"RTN","PSOPMP0",66,0)
 . I GRP'["R"!('PSOSTSGP&($O(^TMP("PSOPMPSR",$J,GROUP),-1)'="")) D
"RTN","PSOPMP0",67,0)
 . . D GROUP^PSOPMP1($P(GROUP,"^",2),+$G(^TMP("PSOPMPSR",$J,GROUP)),.LINE)
"RTN","PSOPMP0",68,0)
 . F  S STS=$O(^TMP("PSOPMPSR",$J,GROUP,STS)) Q:STS=""  D
"RTN","PSOPMP0",69,0)
 . . I STS'="<NULL>" D
"RTN","PSOPMP0",70,0)
 . . . D GROUP^PSOPMP1($P(STS,"^",2),+$G(^TMP("PSOPMPSR",$J,GROUP,STS)),.LINE)
"RTN","PSOPMP0",71,0)
 . . F  S SUB=$O(^TMP("PSOPMPSR",$J,GROUP,STS,SUB),$S(PSORDER="A":1,1:-1)) Q:SUB=""  D
"RTN","PSOPMP0",72,0)
 . . . S Z=$G(^TMP("PSOPMPSR",$J,GROUP,STS,SUB))
"RTN","PSOPMP0",73,0)
 . . . S X1="",SEQ=$G(SEQ)+1,X1=$J(SEQ,3)
"RTN","PSOPMP0",74,0)
 . . . S QTYL=$L($P(Z,"^",4)) S:QTYL<5 QTYL=5
"RTN","PSOPMP0",75,0)
 . . . I GRP["R"!(GRP["T")!(GRP["H") S $E(X1,5)=$P(Z,"^",2),$E(X1,19)=$E($P(Z,"^",3),1,(32-QTYL))
"RTN","PSOPMP0",76,0)
 . . . I GRP["P"!(GRP["N") S $E(X1,5)=$P(Z,"^",3)
"RTN","PSOPMP0",77,0)
 . . . I GRP["N" S $E(X1,49)="Date Documented:"
"RTN","PSOPMP0",78,0)
 . . . I GRP'["N" S $E(X1,52-QTYL)=$J($P(Z,"^",4),QTYL),$E(X1,53)=$P(Z,"^",5),$E(X1,57)=$P(Z,"^",6)
"RTN","PSOPMP0",79,0)
 . . . S $E(X1,66)=$P(Z,"^",7)
"RTN","PSOPMP0",80,0)
 . . . S $E(X1,74)=$J($P(Z,"^",8),3),$E(X1,78)=$J($P(Z,"^",9),3)
"RTN","PSOPMP0",81,0)
 . . . S LINE=LINE+1,^TMP("PSOPMP0",$J,LINE,0)=X1,HIGHLN(LINE)=""
"RTN","PSOPMP0",82,0)
 . . . S IENSUB=$S(GRP["R"!(GRP["T")!(GRP["H"):"RX",GRP["P":"PEN",1:"NVA")
"RTN","PSOPMP0",83,0)
 . . . S ^TMP("PSOPMP0",$J,SEQ,IENSUB)=$P(Z,"^")
"RTN","PSOPMP0",84,0)
 . . . I IENSUB="PEN"&($P($G(^PS(52.41,+$P(Z,"^"),0)),"^",23)=1) S ^TMP("PSOPMP0",$J,LINE,"RV")=1
"RTN","PSOPMP0",85,0)
 . . . I $G(PSOSIGDP) D SETSIG^PSOPMP1($S(GRP["R"!(GRP["T")!(GRP["H"):"R",GRP["P":"P",1:"N"),+Z,.LINE,PSODFN)
"RTN","PSOPMP0",86,0)
 ;
"RTN","PSOPMP0",87,0)
 ;Saving NORMAL video attributes to be reset later
"RTN","PSOPMP0",88,0)
 I LINE>$G(LASTLINE) D
"RTN","PSOPMP0",89,0)
 . F I=($G(LASTLINE)+1):1:LINE D SAVE^VALM10(I)
"RTN","PSOPMP0",90,0)
 . S LASTLINE=LINE
"RTN","PSOPMP0",91,0)
 D VIDEO^PSOPMP1()
"RTN","PSOPMP0",92,0)
 S VALMCNT=+$G(LINE) D RV^PSOPMP1
"RTN","PSOPMP0",93,0)
 Q
"RTN","PSOPMP0",94,0)
 ;
"RTN","PSOPMP0",95,0)
SETSORT(FIELD) ;Sets the data sorted by the FIELD specified
"RTN","PSOPMP0",96,0)
 N SEQ,RX,RXNUM,DRUG,DRNAME,QTY,STATUS,STS,ISSDT,DOCDAT,LSTFD,REFREM,DAYSUP,SIG,Z,ORD,GRPCNT,GROUP,RFRX,OI,PSOBADR,RDREJ
"RTN","PSOPMP0",97,0)
 K ^TMP("PSOPMPSR",$J)
"RTN","PSOPMP0",98,0)
 ;Loading prescription (file #55)
"RTN","PSOPMP0",99,0)
 S SEQ=0
"RTN","PSOPMP0",100,0)
 F  S SEQ=$O(^PS(55,PSODFN,"P",SEQ)) Q:'SEQ  D
"RTN","PSOPMP0",101,0)
 . S RX=+$G(^PS(55,PSODFN,"P",SEQ,0)) I 'RX!($G(^PSRX(RX,0))="") Q
"RTN","PSOPMP0",102,0)
 . I $$FILTER^PSOPMP1(RX) Q
"RTN","PSOPMP0",103,0)
 . S RXNUM=$$GET1^DIQ(52,RX,.01)
"RTN","PSOPMP0",104,0)
 . S DRUG=$$GET1^DIQ(52,RX,6,"I")
"RTN","PSOPMP0",105,0)
 . S DRNAME=$$GET1^DIQ(50,DRUG,.01)
"RTN","PSOPMP0",106,0)
 . S QTY=$$GET1^DIQ(52,RX,7)
"RTN","PSOPMP0",107,0)
 . S STATUS=$$STSINFO^PSOPMP1(RX)
"RTN","PSOPMP0",108,0)
 . S ISSDT=$$ISSDT^PSOPMP1(RX,"R")
"RTN","PSOPMP0",109,0)
 . S LSTFD=$$LSTFD^PSOPMP1(RX)
"RTN","PSOPMP0",110,0)
 . S REFREM=$$REFREM^PSOPMP1(RX)
"RTN","PSOPMP0",111,0)
 . S DAYSUP=$$GET1^DIQ(52,RX,8)
"RTN","PSOPMP0",112,0)
 . S PSOBADR=$O(^PSRX(RX,"L",9999),-1)
"RTN","PSOPMP0",113,0)
 . I PSOBADR'="" S PSOBADR=$G(^PSRX(RX,"L",PSOBADR,0)) I PSOBADR["(BAD ADDRESS)" S PSOBADR="B"
"RTN","PSOPMP0",114,0)
 . I PSOBADR'="B" S PSOBADR=""
"RTN","PSOPMP0",115,0)
 . S Z="",$P(Z,"^")=RX,$P(Z,"^",2)=RXNUM_$$COPAY^PSOPMP1(RX)_$$ECME^PSOBPSUT(RX)_$$TITRX^PSOUTL(RX),$P(Z,"^",3)=$E(DRNAME,1,30)
"RTN","PSOPMP0",116,0)
 . S $P(Z,"^",4)=QTY,$P(Z,"^",5)=$P(STATUS,"^",3)_$$CMOP^PSOPMP1(DRUG,RX)_PSOBADR,$P(Z,"^",6)=$P(ISSDT,"^",2)
"RTN","PSOPMP0",117,0)
 . S $P(Z,"^",7)=$P(LSTFD,"^",2),$P(Z,"^",8)=REFREM,$P(Z,"^",9)=DAYSUP
"RTN","PSOPMP0",118,0)
 . S SORT=$S(FIELD="RX":RXNUM_" ",FIELD="DR":DRNAME_RXNUM,FIELD="ID":+ISSDT_RXNUM_" ",FIELD="LF":+LSTFD_RXNUM_" ")
"RTN","PSOPMP0",119,0)
 . S STS="<NULL>" I $G(PSOSTSGP) S STS=$P(STATUS,"^")_"^"_$P(STATUS,"^",2)
"RTN","PSOPMP0",120,0)
 . S GROUP=$P(PSORDSEQ("R"),"^")_"R^"_$P(PSORDSEQ("R"),"^",2)
"RTN","PSOPMP0",121,0)
 . ; PSO*427 changes for RRR/TRI/CVA reject display
"RTN","PSOPMP0",122,0)
 . S RDREJ=0  ; initialize RTS/DUR reject flag to 0
"RTN","PSOPMP0",123,0)
 . I $$FIND^PSOREJUT(RX,,,"79,88") S GROUP=$P(PSORDSEQ("T"),"^")_"T^"_$P(PSORDSEQ("T"),"^",2),STS="<NULL>",RDREJ=1
"RTN","PSOPMP0",124,0)
 . ; next look for any unresolved TRI/CVA rejects  *427
"RTN","PSOPMP0",125,0)
 . I 'RDREJ,$$TRIC^PSOREJP1(RX),$$FIND^PSOREJUT(RX,,,,1) S GROUP=$P(PSORDSEQ("H"),U,1)_"H^"_$P(PSORDSEQ("H"),U,2),STS="<NULL>"
"RTN","PSOPMP0",126,0)
 . ; next look for any unresolved RRR rejects  *427
"RTN","PSOPMP0",127,0)
 . I 'RDREJ,'$$TRIC^PSOREJP1(RX),$$FIND^PSOREJUT(RX,,,,,1) S GROUP=$P(PSORDSEQ("H"),U,1)_"H^"_$P(PSORDSEQ("H"),U,2),STS="<NULL>"
"RTN","PSOPMP0",128,0)
 . S ^TMP("PSOPMPSR",$J,GROUP,STS,SORT)=Z
"RTN","PSOPMP0",129,0)
 . S GRPCNT(GROUP)=$G(GRPCNT(GROUP))+1,GRPCNT(GROUP,STS)=$G(GRPCNT(GROUP,STS))+1
"RTN","PSOPMP0",130,0)
 ;
"RTN","PSOPMP0",131,0)
 S GROUP=""
"RTN","PSOPMP0",132,0)
 F  S GROUP=$O(GRPCNT(GROUP)) Q:GROUP=""  D
"RTN","PSOPMP0",133,0)
 . S ^TMP("PSOPMPSR",$J,GROUP)=$G(GRPCNT(GROUP))
"RTN","PSOPMP0",134,0)
 . S STS="" F  S STS=$O(GRPCNT(GROUP,STS)) Q:STS=""  D
"RTN","PSOPMP0",135,0)
 . . S ^TMP("PSOPMPSR",$J,GROUP,STS)=GRPCNT(GROUP,STS)
"RTN","PSOPMP0",136,0)
 ;
"RTN","PSOPMP0",137,0)
 ;Loading pending orders (file #52.41)
"RTN","PSOPMP0",138,0)
 S ORD=0,GROUP=$P(PSORDSEQ("P"),"^")_"P^"_$P(PSORDSEQ("P"),"^",2)
"RTN","PSOPMP0",139,0)
 F  S ORD=$O(^PS(52.41,"P",PSODFN,ORD)) Q:'ORD  D
"RTN","PSOPMP0",140,0)
 . S TYPE=$$GET1^DIQ(52.41,ORD,2,"I")
"RTN","PSOPMP0",141,0)
 . I TYPE="DC"!(TYPE="DE")!(TYPE="HD") Q
"RTN","PSOPMP0",142,0)
 . S DRNAME="",DRUG=+$$GET1^DIQ(52.41,ORD,11,"I") I DRUG S DRNAME=$$GET1^DIQ(50,DRUG,.01)
"RTN","PSOPMP0",143,0)
 . I DRNAME="" D  Q:DRNAME=""
"RTN","PSOPMP0",144,0)
 . . S OI=$$GET1^DIQ(52.41,ORD,8,"I") I 'OI Q
"RTN","PSOPMP0",145,0)
 . . S DRNAME=$$GET1^DIQ(50.7,OI,.01)_" "_$$GET1^DIQ(50.7,OI,.02)
"RTN","PSOPMP0",146,0)
 . S QTY=$$GET1^DIQ(52.41,ORD,12)
"RTN","PSOPMP0",147,0)
 . S STATUS=$$GET1^DIQ(52.41,ORD,2,"I")
"RTN","PSOPMP0",148,0)
 . S ISSDT=$$ISSDT^PSOPMP1(ORD,"P")
"RTN","PSOPMP0",149,0)
 . S REFREM=$$GET1^DIQ(52.41,ORD,13)
"RTN","PSOPMP0",150,0)
 . S DAYSUP=$$GET1^DIQ(52.41,ORD,101)
"RTN","PSOPMP0",151,0)
 . S RFRX="" I STATUS="RF" S RFRX=$$GET1^DIQ(52.41,ORD,21,"I") I RFRX S RFRX=$$GET1^DIQ(52,RFRX,.01)
"RTN","PSOPMP0",152,0)
 . S Z="",$P(Z,"^")=ORD,$P(Z,"^",3)=$E(DRNAME,1,45),$P(Z,"^",4)=QTY,$P(Z,"^",5)=$E(STATUS,1,2)_$$CMOP^PSOPMP1(DRUG)
"RTN","PSOPMP0",153,0)
 . S $P(Z,"^",6)=$S(RFRX'="":"Rx#: "_RFRX,1:$P(ISSDT,"^",2)),$P(Z,"^",8)=REFREM,$P(Z,"^",9)=DAYSUP
"RTN","PSOPMP0",154,0)
 . S SORT=$S(FIELD="RX":DRNAME_ORD,FIELD="DR":DRNAME_ORD,FIELD="ID":+ISSDT_ORD,FIELD="LF":+ISSDT_ORD)
"RTN","PSOPMP0",155,0)
 . S ^TMP("PSOPMPSR",$J,GROUP,"<NULL>",SORT)=Z
"RTN","PSOPMP0",156,0)
 . S GRPCNT(GROUP)=$G(GRPCNT(GROUP))+1
"RTN","PSOPMP0",157,0)
 S:$G(GRPCNT(GROUP)) ^TMP("PSOPMPSR",$J,GROUP)=$G(GRPCNT(GROUP))
"RTN","PSOPMP0",158,0)
 ;
"RTN","PSOPMP0",159,0)
 ;Loading Non-VA Med orders (file #55, sub-file #55.05)
"RTN","PSOPMP0",160,0)
 S ORD=0,GROUP=$P(PSORDSEQ("N"),"^")_"N^"_$P(PSORDSEQ("N"),"^",2)
"RTN","PSOPMP0",161,0)
 F  S ORD=$O(^PS(55,PSODFN,"NVA",ORD)) Q:'ORD  D
"RTN","PSOPMP0",162,0)
 . I $$GET1^DIQ(55.05,ORD_","_PSODFN,5,"I") Q
"RTN","PSOPMP0",163,0)
 . S DRNAME=$$GET1^DIQ(55.05,ORD_","_PSODFN,1)
"RTN","PSOPMP0",164,0)
 . I DRNAME="" D  Q:DRNAME=""
"RTN","PSOPMP0",165,0)
 . . S OI=$$GET1^DIQ(55.05,ORD_","_PSODFN,.01,"I") I 'OI Q
"RTN","PSOPMP0",166,0)
 . . S DRNAME=$$GET1^DIQ(50.7,OI,.01)_" "_$$GET1^DIQ(50.7,OI,.02)
"RTN","PSOPMP0",167,0)
 . S DOCDAT=$P($$GET1^DIQ(55.05,ORD_","_PSODFN_",",11,"I"),".")
"RTN","PSOPMP0",168,0)
 . S Z="",$P(Z,"^")=ORD,$P(Z,"^",3)=$E(DRNAME,1,38),$P(Z,"^",7)=$$DAT^PSOPMP1(DOCDAT,"-")
"RTN","PSOPMP0",169,0)
 . S SORT=$S(FIELD="RX":DRNAME_ORD,FIELD="DR":DRNAME_ORD,FIELD="ID":DOCDAT_ORD,FIELD="LF":DOCDAT_ORD)
"RTN","PSOPMP0",170,0)
 . S ^TMP("PSOPMPSR",$J,GROUP,"<NULL>",SORT)=Z
"RTN","PSOPMP0",171,0)
 . S GRPCNT(GROUP)=$G(GRPCNT(GROUP))+1
"RTN","PSOPMP0",172,0)
 ;
"RTN","PSOPMP0",173,0)
 S:$G(GRPCNT(GROUP)) ^TMP("PSOPMPSR",$J,GROUP)=$G(GRPCNT(GROUP))
"RTN","PSOPMP0",174,0)
 Q
"RTN","PSOPMP0",175,0)
 ;
"RTN","PSOPMP0",176,0)
RX ;Sort by Rx
"RTN","PSOPMP0",177,0)
 D SORT("RX")
"RTN","PSOPMP0",178,0)
 Q
"RTN","PSOPMP0",179,0)
DR ;Sort by Drug
"RTN","PSOPMP0",180,0)
 D SORT("DR")
"RTN","PSOPMP0",181,0)
 Q
"RTN","PSOPMP0",182,0)
ID ;Sort by Issue Date
"RTN","PSOPMP0",183,0)
 D SORT("ID")
"RTN","PSOPMP0",184,0)
 Q
"RTN","PSOPMP0",185,0)
LF ;Sort by Last Fill Date
"RTN","PSOPMP0",186,0)
 D SORT("LF")
"RTN","PSOPMP0",187,0)
 Q
"RTN","PSOPMP0",188,0)
 ;
"RTN","PSOPMP0",189,0)
SORT(FIELD) ;Sort entries by FIELD
"RTN","PSOPMP0",190,0)
 I PSOSRTBY=FIELD S PSORDER=$S(PSORDER="A":"D",1:"A")
"RTN","PSOPMP0",191,0)
 E  S PSOSRTBY=FIELD,PSORDER="A"
"RTN","PSOPMP0",192,0)
 D REF
"RTN","PSOPMP0",193,0)
 Q
"RTN","PSOPMP0",194,0)
 ;
"RTN","PSOPMP0",195,0)
REF ;Screen Refresh
"RTN","PSOPMP0",196,0)
 W ?52,"Please wait..." D INIT,HDR S VALMBCK="R"
"RTN","PSOPMP0",197,0)
 Q
"RTN","PSOPMP0",198,0)
GS ;Group by Status
"RTN","PSOPMP0",199,0)
 W ?52,"Please wait..." S PSOSTSGP=$S($G(PSOSTSGP):0,1:1) D INIT,HDR S VALMBCK="R"
"RTN","PSOPMP0",200,0)
 Q
"RTN","PSOPMP0",201,0)
SIG ;Display SIG
"RTN","PSOPMP0",202,0)
 W ?52,"Please wait..." S PSOSIGDP=$S($G(PSOSIGDP):0,1:1) D INIT,HDR S VALMBCK="R"
"RTN","PSOPMP0",203,0)
 I 'PSOSIGDP S VALMBG=VALMBG\2
"RTN","PSOPMP0",204,0)
 I PSOSIGDP S VALMBG=VALMBG*2-1
"RTN","PSOPMP0",205,0)
 S:VALMBG>(VALMCNT-10) VALMBG=VALMCNT-10 S:VALMBG<1 VALMBG=1
"RTN","PSOPMP0",206,0)
 Q
"RTN","PSOPMP0",207,0)
PI ;Patient Information
"RTN","PSOPMP0",208,0)
 D EN^PSOLMPI S VALMBCK="R"
"RTN","PSOPMP0",209,0)
 Q
"RTN","PSOPMP0",210,0)
CV ;Change View
"RTN","PSOPMP0",211,0)
 D LST^PSOPMPPF(SITE,DUZ) W !?52,"Please wait..." D INIT,HDR
"RTN","PSOPMP0",212,0)
 S VALMBG=1,VALMBCK="R"
"RTN","PSOPMP0",213,0)
 Q
"RTN","PSOPMP0",214,0)
 ;
"RTN","PSOPMP0",215,0)
SEL ;Process selection of one entry
"RTN","PSOPMP0",216,0)
 N PSOSEL,TYPE,XQORM,ORD,TITLE,PSOLIS,XX
"RTN","PSOPMP0",217,0)
 S PSOLIS=$P(XQORNOD(0),"=",2) I 'PSOLIS S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOPMP0",218,0)
 F XX=1:1:$L(PSOLIS,",") Q:$P(PSOLIS,",",XX)']""  D
"RTN","PSOPMP0",219,0)
 .S PSOSEL=+$P(PSOLIS,",",XX) I 'PSOSEL S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOPMP0",220,0)
 .S TYPE=$O(^TMP("PSOPMP0",$J,PSOSEL,0)) I TYPE="" S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOPMP0",221,0)
 .S ORD=$G(^TMP("PSOPMP0",$J,PSOSEL,TYPE))
"RTN","PSOPMP0",222,0)
 .I 'ORD S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOPMP0",223,0)
 .S TITLE=VALM("TITLE")
"RTN","PSOPMP0",224,0)
 .;
"RTN","PSOPMP0",225,0)
 .;Regular prescription
"RTN","PSOPMP0",226,0)
 .I TYPE="RX" D  S VALMBCK="R" D REF
"RTN","PSOPMP0",227,0)
 .. N PSOVDA,PSOSAVE,DA,PS
"RTN","PSOPMP0",228,0)
 .. S (PSOVDA,DA)=ORD,PS="REJECTMP"
"RTN","PSOPMP0",229,0)
 .. N LINE,TITLE,PSODFN D DP^PSORXVW
"RTN","PSOPMP0",230,0)
 .;
"RTN","PSOPMP0",231,0)
 .;Pending Order
"RTN","PSOPMP0",232,0)
 .I TYPE="PEN" D  S VALMBCK="R" D REF
"RTN","PSOPMP0",233,0)
 .. N PSOACTOV,OR0
"RTN","PSOPMP0",234,0)
 .. S OR0=^PS(52.41,ORD,0),PSOACTOV=""
"RTN","PSOPMP0",235,0)
 .. N LINE,TITLE D PENHDR^PSOPMP1(PSODFN),DSPL^PSOORFI1
"RTN","PSOPMP0",236,0)
 .;
"RTN","PSOPMP0",237,0)
 .;Pending Order
"RTN","PSOPMP0",238,0)
 .I TYPE="NVA" D
"RTN","PSOPMP0",239,0)
 .. N LINE,TITLE D EN^PSONVAVW(PSODFN,ORD)
"RTN","PSOPMP0",240,0)
 .;
"RTN","PSOPMP0",241,0)
 S VALMBCK="R",VALM("TITLE")=TITLE
"RTN","PSOPMP0",242,0)
 Q
"RTN","PSOPMP0",243,0)
 ;
"RTN","PSOPMP0",244,0)
EXIT ;
"RTN","PSOPMP0",245,0)
 K ^TMP("PSOPMP0",$J),^TMP("PSOPMPSR",$J)
"RTN","PSOPMP0",246,0)
 Q
"RTN","PSOPMP0",247,0)
 ;
"RTN","PSOPMP0",248,0)
HELP Q
"RTN","PSOPMPPF")
0^8^B56602734
"RTN","PSOPMPPF",1,0)
PSOPMPPF ;BIRM/MFR - Patient Medication Profile - Preferences ;04/28/05
"RTN","PSOPMPPF",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**260,427**;DEC 1997;Build 21
"RTN","PSOPMPPF",3,0)
 ;
"RTN","PSOPMPPF",4,0)
EN ; - Menu option entry point
"RTN","PSOPMPPF",5,0)
 N PSOCHNG,PSOQUIT,DIR,DIRUT,DIROUT
"RTN","PSOPMPPF",6,0)
 I '$G(PSOSITE) D ^PSOLSET I '$D(PSOPAR) W $C(7),!!,"Pharmacy Division Must be Selected!",! Q
"RTN","PSOPMPPF",7,0)
 ;
"RTN","PSOPMPPF",8,0)
 D LOAD(PSOSITE),LST(PSOSITE)
"RTN","PSOPMPPF",9,0)
 I '$G(PSOQUIT),$G(PSOCHNG) D SAVE(PSOSITE)
"RTN","PSOPMPPF",10,0)
 ;
"RTN","PSOPMPPF",11,0)
 G END
"RTN","PSOPMPPF",12,0)
 ;
"RTN","PSOPMPPF",13,0)
LST(PSOSITE,PSOUSER) ; - Listmanager entry point
"RTN","PSOPMPPF",14,0)
 N DIR,DIRUT,DIROUT
"RTN","PSOPMPPF",15,0)
 S (PSOCHNG,PSOQUIT)=0,PSOUSER=+$G(PSOUSER) D FULL^VALM1 W !
"RTN","PSOPMPPF",16,0)
 ;
"RTN","PSOPMPPF",17,0)
 ; - Reset user/division preferences
"RTN","PSOPMPPF",18,0)
 I (PSOUSER&$D(^PS(52.85,PSOSITE,"USER",PSOUSER)))!('PSOUSER&($$GET1^DIQ(52.85,PSOSITE,1)'="")) D
"RTN","PSOPMPPF",19,0)
 . D DISPLAY(PSOSITE,PSOUSER)
"RTN","PSOPMPPF",20,0)
 . S DIR("A")="     Delete this default view? "
"RTN","PSOPMPPF",21,0)
 . S DIR(0)="YA",DIR("B")="NO" D ^DIR I $D(DIRUT)!$D(DIROUT) S PSOQUIT=1 Q
"RTN","PSOPMPPF",22,0)
 . I Y=1 D DELETE(PSOSITE,PSOUSER),LOAD(PSOSITE,PSOUSER)
"RTN","PSOPMPPF",23,0)
 . W !
"RTN","PSOPMPPF",24,0)
 E  W !,"Division: ",$$GET1^DIQ(59,PSOSITE,.01),!
"RTN","PSOPMPPF",25,0)
 I PSOQUIT Q
"RTN","PSOPMPPF",26,0)
 ;
"RTN","PSOPMPPF",27,0)
EXPDC ; - Expiration/Discontinued Cutoff Date
"RTN","PSOPMPPF",28,0)
 K DIR,DIRUT,DIROUT,SAVEX
"RTN","PSOPMPPF",29,0)
 S DIR(0)="NA^0:9999",DIR("A")="EXP/CANCEL CUTOFF: ",DIR("B")=PSOEXDCE
"RTN","PSOPMPPF",30,0)
 S DIR("?",1)="Enter the maximum number of days for an expired and/or"
"RTN","PSOPMPPF",31,0)
 S DIR("?")="discontinued prescription to be cut from the profile."
"RTN","PSOPMPPF",32,0)
 D ^DIR I $D(DIRUT)!$D(DIROUT) G @$$GOTO(X,"EXPDC")
"RTN","PSOPMPPF",33,0)
 W " DAYS" S PSOEXDCE=X,X="T"_$S(X:"-"_X,1:"") D ^%DT S PSOEXPDC=Y
"RTN","PSOPMPPF",34,0)
 D CHANGED(PSOSITE,PSOUSER,"EXPDC",PSOEXDCE)
"RTN","PSOPMPPF",35,0)
 ;
"RTN","PSOPMPPF",36,0)
SRTBY ; - Sort By 
"RTN","PSOPMPPF",37,0)
 K DIR,DIRUT,DIROUT
"RTN","PSOPMPPF",38,0)
 S DIR(0)="SA^RX:Rx#;DR:DRUG NAME;ID:ISSUE DATE;LF:LAST FILL DATE",DIR("B")=PSOSRTBY
"RTN","PSOPMPPF",39,0)
 S DIR("A")="SORT BY: " D ^DIR I $D(DIRUT)!$D(DIROUT) G @$$GOTO(X,"SRTBY")
"RTN","PSOPMPPF",40,0)
 S PSOSRTBY=Y D CHANGED(PSOSITE,PSOUSER,"SRTBY",PSOSRTBY)
"RTN","PSOPMPPF",41,0)
 ;
"RTN","PSOPMPPF",42,0)
ORDER ; - Sort Order 
"RTN","PSOPMPPF",43,0)
 K DIR,DIRUT,DIROUT
"RTN","PSOPMPPF",44,0)
 S DIR(0)="SA^A:ASCENDING;D:DESCENDING",DIR("B")=$S(PSORDER="A":"ASCENDING",1:"DESCENDING")
"RTN","PSOPMPPF",45,0)
 S DIR("A")="SORT ORDER: " D ^DIR I $D(DIRUT)!$D(DIROUT) G @$$GOTO(X,"ORDER")
"RTN","PSOPMPPF",46,0)
 S PSORDER=Y D CHANGED(PSOSITE,PSOUSER,"ORDER",PSORDER)
"RTN","PSOPMPPF",47,0)
 ;
"RTN","PSOPMPPF",48,0)
SIGDP ; - Display SIG 
"RTN","PSOPMPPF",49,0)
 K DIR,DIRUT,DIROUT
"RTN","PSOPMPPF",50,0)
 S DIR(0)="SA^ON:ON;OFF:OFF",DIR("B")=$S(PSOSIGDP=1:"ON",1:"OFF")
"RTN","PSOPMPPF",51,0)
 S DIR("A")="DISPLAY SIG: " D ^DIR I $D(DIRUT)!$D(DIROUT) G @$$GOTO(X,"SIGDP")
"RTN","PSOPMPPF",52,0)
 S Y=$S(X="ON":1,1:0),PSOSIGDP=Y D CHANGED(PSOSITE,PSOUSER,"SIGDP",PSOSIGDP)
"RTN","PSOPMPPF",53,0)
 ;
"RTN","PSOPMPPF",54,0)
STSGP ; - Group By Status 
"RTN","PSOPMPPF",55,0)
 K DIR,DIRUT,DIROUT
"RTN","PSOPMPPF",56,0)
 S DIR(0)="SA^ON:ON;OFF:OFF",DIR("B")=$S(PSOSTSGP=1:"ON",1:"OFF")
"RTN","PSOPMPPF",57,0)
 S DIR("A")="GROUP BY STATUS: " D ^DIR I $D(DIRUT)!$D(DIROUT) G @$$GOTO(X,"STSGP")
"RTN","PSOPMPPF",58,0)
 S Y=$S(X="ON":1,1:0),PSOSTSGP=Y D CHANGED(PSOSITE,PSOUSER,"STSGP",PSOSTSGP)
"RTN","PSOPMPPF",59,0)
 ;
"RTN","PSOPMPPF",60,0)
ORDCNT ; - Display Order Count 
"RTN","PSOPMPPF",61,0)
 K DIR,DIRUT,DIROUT
"RTN","PSOPMPPF",62,0)
 S DIR(0)="SA^ON:ON;OFF:OFF",DIR("B")=$S(PSORDCNT=1:"ON",1:"OFF")
"RTN","PSOPMPPF",63,0)
 S DIR("A")="DISPLAY ORDER COUNT: " D ^DIR I $D(DIRUT)!$D(DIROUT) G @$$GOTO(X,"ORDCNT")
"RTN","PSOPMPPF",64,0)
 S Y=$S(X="ON":1,1:0),PSORDCNT=Y D CHANGED(PSOSITE,PSOUSER,"ORDCNT",PSORDCNT)
"RTN","PSOPMPPF",65,0)
 ;
"RTN","PSOPMPPF",66,0)
EXIT ; Exit
"RTN","PSOPMPPF",67,0)
 ;
"RTN","PSOPMPPF",68,0)
 ; - Save view?
"RTN","PSOPMPPF",69,0)
 I $G(PSOCHNG),PSOUSER D
"RTN","PSOPMPPF",70,0)
 . W ! S DIR(0)="YA",DIR("B")="NO",DIR("A")="Save as your default View? "
"RTN","PSOPMPPF",71,0)
 . D ^DIR I $D(DIRUT)!$D(DIROUT)!(Y=0) Q
"RTN","PSOPMPPF",72,0)
 . D SAVE(PSOSITE,PSOUSER)
"RTN","PSOPMPPF",73,0)
 ;
"RTN","PSOPMPPF",74,0)
 S VALMBCK="R"
"RTN","PSOPMPPF",75,0)
 ;
"RTN","PSOPMPPF",76,0)
END Q
"RTN","PSOPMPPF",77,0)
 ;
"RTN","PSOPMPPF",78,0)
DISPLAY(SITE,USER) ; - Displays the current view
"RTN","PSOPMPPF",79,0)
 N X,Z,FLG,LN
"RTN","PSOPMPPF",80,0)
 S (X,Z,FLG)=""
"RTN","PSOPMPPF",81,0)
 I $G(USER),$D(^PS(52.85,SITE,"USER",+$G(USER))) D
"RTN","PSOPMPPF",82,0)
 . S X=$$GET1^DIQ(200,USER,.01),Z=^PS(52.85,SITE,"USER",+$G(USER),0),FLG=1
"RTN","PSOPMPPF",83,0)
 E  D
"RTN","PSOPMPPF",84,0)
 . S X=$$GET1^DIQ(59,SITE,.01),Z=$G(^PS(52.85,SITE,0))
"RTN","PSOPMPPF",85,0)
 I Z="" Q
"RTN","PSOPMPPF",86,0)
 S X=X_"'s current default view"_$S(FLG:" ("_$$GET1^DIQ(59,SITE,.01)_")",1:"")_":"
"RTN","PSOPMPPF",87,0)
 S $P(LN,"-",$L(X))="" W !?5,X,!?5,LN
"RTN","PSOPMPPF",88,0)
 W !?5,"EXP/CANCEL CUTOFF  : ",$P(Z,"^",2)," DAYS"
"RTN","PSOPMPPF",89,0)
 S X=$P(Z,"^",3) W !?5,"SORT BY            : "
"RTN","PSOPMPPF",90,0)
 W $S(X="RX":"Rx#",X="DR":"DRUG NAME",X="ID":"ISSUE DATE",X="LF":"LAST FILL DATE",1:"??")
"RTN","PSOPMPPF",91,0)
 W !?5,"SORT ORDER         : ",$S($P(Z,"^",4)="A":"ASCENDING",1:"DESCENDING")
"RTN","PSOPMPPF",92,0)
 W !?5,"DISPLAY SIG        : ",$S($P(Z,"^",5):"ON",1:"OFF")
"RTN","PSOPMPPF",93,0)
 W !?5,"GROUP BY STATUS    : ",$S($P(Z,"^",6):"ON",1:"OFF")
"RTN","PSOPMPPF",94,0)
 W !?5,"DISPLAY ORDER COUNT: ",$S($P(Z,"^",7):"ON",1:"OFF")
"RTN","PSOPMPPF",95,0)
 W !
"RTN","PSOPMPPF",96,0)
 Q 
"RTN","PSOPMPPF",97,0)
 ;
"RTN","PSOPMPPF",98,0)
GOTO(INPUT,HOME) ; - Directed up-arrow
"RTN","PSOPMPPF",99,0)
 N GOTO,TAG,TRGT
"RTN","PSOPMPPF",100,0)
 I $P(INPUT,"^",2)="" S PSOQUIT=1 Q "EXIT"
"RTN","PSOPMPPF",101,0)
 ;
"RTN","PSOPMPPF",102,0)
 S TRGT=$P(INPUT,"^",2)
"RTN","PSOPMPPF",103,0)
 S TAG("EXP/CANCEL CUTOFF")="EXPDC"
"RTN","PSOPMPPF",104,0)
 S TAG("SORT BY")="SRTBY"
"RTN","PSOPMPPF",105,0)
 S TAG("SORT ORDER")="ORDER"
"RTN","PSOPMPPF",106,0)
 S TAG("DISPLAY SIG")="SIGDP"
"RTN","PSOPMPPF",107,0)
 S TAG("GROUP BY STATUS")="STSGP"
"RTN","PSOPMPPF",108,0)
 S TAG("DISPLAY ORDER COUNT")="ORDCNT"
"RTN","PSOPMPPF",109,0)
 ;
"RTN","PSOPMPPF",110,0)
 S GOTO=HOME
"RTN","PSOPMPPF",111,0)
 S TAG="" F  S TAG=$O(TAG(TAG)) Q:TAG=""  I $E(TAG,1,$L(TRGT))=TRGT S GOTO=TAG(TAG) Q
"RTN","PSOPMPPF",112,0)
 I GOTO=HOME W "   ??",$C(7)
"RTN","PSOPMPPF",113,0)
 ;
"RTN","PSOPMPPF",114,0)
 Q GOTO
"RTN","PSOPMPPF",115,0)
 ;
"RTN","PSOPMPPF",116,0)
LOAD(SITE,USER) ; Loading Factory/Division/User preferences
"RTN","PSOPMPPF",117,0)
 ;Input : SITE     - Pointer to OUTPATIENT SITE file (#59)
"RTN","PSOPMPPF",118,0)
 ;        USER     - Pointer to NEW PSERON file (#200)
"RTN","PSOPMPPF",119,0)
 ;Output: PSOEXPDC - Expiration Cutoff Date
"RTN","PSOPMPPF",120,0)
 ;        PSOEXDCE - Expiration Cutoff Date (External)
"RTN","PSOPMPPF",121,0)
 ;        PSOSRTBY - Sort By
"RTN","PSOPMPPF",122,0)
 ;        PSORDER - Sort Order ("A":Asc,"D":Desc)
"RTN","PSOPMPPF",123,0)
 ;        PSOSIGDP - Display SIG (1:ON/0:OFF)
"RTN","PSOPMPPF",124,0)
 ;        PSORDCNT - Display Order Count (1:ON/0:OFF)
"RTN","PSOPMPPF",125,0)
 ;        PSOSTSGP - Group by Status (1:ON/0:OFF)
"RTN","PSOPMPPF",126,0)
 ;        PSOSTSEQ - Status Display Order Array
"RTN","PSOPMPPF",127,0)
 ;        PSORDSEQ - Group Display Order Array
"RTN","PSOPMPPF",128,0)
 ;
"RTN","PSOPMPPF",129,0)
 K PSOEXPDC,PSOEXDCE,PSOSRTBY,PSORDER,PSOSTSGP,PSOSIGDP,PSOSTSEQ,PSORDSEQ
"RTN","PSOPMPPF",130,0)
 ;
"RTN","PSOPMPPF",131,0)
 N X,Y,Z,TMP,STSGRP,STS,ORDGRP,GRPNAM
"RTN","PSOPMPPF",132,0)
 ;
"RTN","PSOPMPPF",133,0)
 ; - Factory Defaults
"RTN","PSOPMPPF",134,0)
 S PSOEXDCE=120,X="T-120" D ^%DT S PSOEXPDC=Y
"RTN","PSOPMPPF",135,0)
 S PSOSRTBY="DR",PSORDER="A",PSORDCNT=1,(PSOSTSGP,PSOSIGDP)=0
"RTN","PSOPMPPF",136,0)
 ; 
"RTN","PSOPMPPF",137,0)
 S PSOSTSEQ("A")="1^ACTIVE^A"             ; Active
"RTN","PSOPMPPF",138,0)
 S PSOSTSEQ("S")="1^ACTIVE^S"             ; Suspended
"RTN","PSOPMPPF",139,0)
 S PSOSTSEQ("E")="1^ACTIVE^E"             ; Expired
"RTN","PSOPMPPF",140,0)
 S PSOSTSEQ("DC")="2^DISCONTINUED^DC"     ; Discontinued
"RTN","PSOPMPPF",141,0)
 S PSOSTSEQ("DP")="2^DISCONTINUED^DP"     ; Discontinued by Provider
"RTN","PSOPMPPF",142,0)
 S PSOSTSEQ("DE")="2^DISCONTINUED^DE"     ; Discontinued on Edit
"RTN","PSOPMPPF",143,0)
 S PSOSTSEQ("H")="3^HOLD^H"               ; Hold
"RTN","PSOPMPPF",144,0)
 S PSOSTSEQ("PH")="3^HOLD^PH"             ; Provider Hold
"RTN","PSOPMPPF",145,0)
 S PSOSTSEQ("N")="4^NON-VERIFIED^N"       ; Non-Verified
"RTN","PSOPMPPF",146,0)
 ;
"RTN","PSOPMPPF",147,0)
 S PSORDSEQ("T")="1^REFILL TOO SOON/DUR REJECTS (Third Party)"
"RTN","PSOPMPPF",148,0)
 S PSORDSEQ("H")="2^OTHER REJECTS PENDING RESOLUTION"     ; added for *427
"RTN","PSOPMPPF",149,0)
 S PSORDSEQ("R")="3^CURRENT ORDERS"
"RTN","PSOPMPPF",150,0)
 S PSORDSEQ("P")="4^PENDING"
"RTN","PSOPMPPF",151,0)
 S PSORDSEQ("N")="5^NON-VA MEDS (Not dispensed by VA)"
"RTN","PSOPMPPF",152,0)
 ;
"RTN","PSOPMPPF",153,0)
 ; - User's preferences
"RTN","PSOPMPPF",154,0)
 I $G(USER),$D(^PS(52.85,SITE,"USER",USER,0)) D SET(^PS(52.85,SITE,"USER",USER,0)) Q
"RTN","PSOPMPPF",155,0)
 ;
"RTN","PSOPMPPF",156,0)
 ; - Division's preferences
"RTN","PSOPMPPF",157,0)
 I $D(^PS(52.85,SITE,0)) D SET(^PS(52.85,SITE,0)) Q
"RTN","PSOPMPPF",158,0)
 ;
"RTN","PSOPMPPF",159,0)
 Q
"RTN","PSOPMPPF",160,0)
 ;
"RTN","PSOPMPPF",161,0)
CHANGED(SITE,USER,FIELD,VALUE) ; - Sets PSOCHNG so the list can be refreshed
"RTN","PSOPMPPF",162,0)
 I $G(PSOCHNG) Q
"RTN","PSOPMPPF",163,0)
 ;
"RTN","PSOPMPPF",164,0)
 ; - Saved User's preferences
"RTN","PSOPMPPF",165,0)
 S Z=""
"RTN","PSOPMPPF",166,0)
 I '$G(USER),$P($G(^PS(52.85,SITE,0)),"^",2) S Z=^PS(52.85,SITE,0)
"RTN","PSOPMPPF",167,0)
 I $G(USER),$D(^PS(52.85,SITE,"USER",USER,0)) S Z=^PS(52.85,SITE,"USER",USER,0)
"RTN","PSOPMPPF",168,0)
 ;
"RTN","PSOPMPPF",169,0)
 I FIELD="EXPDC",VALUE'=$P(Z,"^",2) S PSOCHNG=1 Q
"RTN","PSOPMPPF",170,0)
 I FIELD="SRTBY",VALUE'=$P(Z,"^",3) S PSOCHNG=1 Q
"RTN","PSOPMPPF",171,0)
 I FIELD="ORDER",VALUE'=$P(Z,"^",4) S PSOCHNG=1 Q
"RTN","PSOPMPPF",172,0)
 I FIELD="SIGDP",VALUE'=+$P(Z,"^",5) S PSOCHNG=1 Q
"RTN","PSOPMPPF",173,0)
 I FIELD="STSGP",VALUE'=+$P(Z,"^",6) S PSOCHNG=1 Q
"RTN","PSOPMPPF",174,0)
 I FIELD="ORDCNT",VALUE'=+$P(Z,"^",7) S PSOCHNG=1 Q
"RTN","PSOPMPPF",175,0)
 ;
"RTN","PSOPMPPF",176,0)
 Q
"RTN","PSOPMPPF",177,0)
 ;
"RTN","PSOPMPPF",178,0)
 ;
"RTN","PSOPMPPF",179,0)
SET(ZNODE) ;
"RTN","PSOPMPPF",180,0)
 N X,Y
"RTN","PSOPMPPF",181,0)
 S X=+$P(ZNODE,"^",2) I X S PSOEXDCE=X,X="T-"_X D ^%DT S PSOEXPDC=Y
"RTN","PSOPMPPF",182,0)
 S X=$P(ZNODE,"^",3) I X'="" S PSOSRTBY=X
"RTN","PSOPMPPF",183,0)
 S X=$P(ZNODE,"^",4) I X'="" S PSORDER=X
"RTN","PSOPMPPF",184,0)
 S X=$P(ZNODE,"^",5) I X'="" S PSOSIGDP=X
"RTN","PSOPMPPF",185,0)
 S X=$P(ZNODE,"^",6) I X'="" S PSOSTSGP=X
"RTN","PSOPMPPF",186,0)
 S X=$P(ZNODE,"^",7) I X'="" S PSORDCNT=X
"RTN","PSOPMPPF",187,0)
 Q
"RTN","PSOPMPPF",188,0)
 ;
"RTN","PSOPMPPF",189,0)
SAVE(SITE,USER) ; - Saves preferences by Site and/or User
"RTN","PSOPMPPF",190,0)
 N DIE,DR,DA
"RTN","PSOPMPPF",191,0)
 ;
"RTN","PSOPMPPF",192,0)
 W !!,"Saving..."
"RTN","PSOPMPPF",193,0)
 ;
"RTN","PSOPMPPF",194,0)
 I '$D(^PS(52.85,SITE)) D
"RTN","PSOPMPPF",195,0)
 . N %,DIC,DR,DA,X,DINUM,DLAYGO,DD,DO
"RTN","PSOPMPPF",196,0)
 . S DIC="^PS(52.85,",(DINUM,X)=SITE,DIC(0)=""
"RTN","PSOPMPPF",197,0)
 . K DD,DO D FILE^DICN K DD,DO
"RTN","PSOPMPPF",198,0)
 ;
"RTN","PSOPMPPF",199,0)
 I $G(USER),'$D(^PS(52.85,SITE,"USER",USER,0)) D
"RTN","PSOPMPPF",200,0)
 . N %,DIC,DR,DA,X,DINUM,DLAYGO,DD,DO
"RTN","PSOPMPPF",201,0)
 . S DIC="^PS(52.85,"_SITE_",""USER"",",DA(1)=SITE,(DINUM,X)=USER,DIC(0)=""
"RTN","PSOPMPPF",202,0)
 . K DD,DO D FILE^DICN K DD,DO
"RTN","PSOPMPPF",203,0)
 ;
"RTN","PSOPMPPF",204,0)
 S DR="1///"_PSOEXDCE_";2///"_PSOSRTBY_";3///"_PSORDER
"RTN","PSOPMPPF",205,0)
 S DR=DR_";4///"_PSOSIGDP_";5///"_PSOSTSGP_";6///"_PSORDCNT
"RTN","PSOPMPPF",206,0)
 ;
"RTN","PSOPMPPF",207,0)
 I '$G(USER) S DIE="^PS(52.85,",DA=SITE
"RTN","PSOPMPPF",208,0)
 I $G(USER) S DIE="^PS(52.85,"_SITE_",""USER"",",DA(1)=SITE,DA=USER
"RTN","PSOPMPPF",209,0)
 ;
"RTN","PSOPMPPF",210,0)
 D ^DIE H 2 W "OK!"
"RTN","PSOPMPPF",211,0)
 ;
"RTN","PSOPMPPF",212,0)
 Q
"RTN","PSOPMPPF",213,0)
 ;
"RTN","PSOPMPPF",214,0)
DELETE(SITE,USER) ; - Deletes user/division preferences
"RTN","PSOPMPPF",215,0)
 N DIK,DA,DIE,DR,FLD
"RTN","PSOPMPPF",216,0)
 ;
"RTN","PSOPMPPF",217,0)
 W !!,"Deleting..."
"RTN","PSOPMPPF",218,0)
 ;
"RTN","PSOPMPPF",219,0)
 I '$G(SITE) Q
"RTN","PSOPMPPF",220,0)
 I $G(USER) S DIK="^PS(52.85,"_SITE_",""USER"",",DA(1)=SITE,DA=USER D ^DIK H 1 W "OK!" Q
"RTN","PSOPMPPF",221,0)
 I '$D(^PS(52.85,SITE,"USER")) S DIK="^PS(52.85,",DA=SITE D ^DIK H 1 W "OK!" Q
"RTN","PSOPMPPF",222,0)
 S DR="" F FLD=1:1:8 S $P(DR,";",FLD)=FLD_"///@"
"RTN","PSOPMPPF",223,0)
 S DIE="^PS(52.85,",DA=SITE D ^DIE H 1 W "OK!"
"RTN","PSOPMPPF",224,0)
 Q
"RTN","PSOREJP0")
0^11^B124398750
"RTN","PSOREJP0",1,0)
PSOREJP0 ;BIRM/MFR - Third Party Rejects Processing Screen ;04/28/05
"RTN","PSOREJP0",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,260,287,289,385,421,427**;DEC 1997;Build 21
"RTN","PSOREJP0",3,0)
 ;
"RTN","PSOREJP0",4,0)
 N PSOREJST,PSORJSRT,PSORJASC,PSOSTFLT,PSODRFLT,PSOPTFLT,PSORXFLT,PSOINFLT,PSOINGRP,PSOTRITG
"RTN","PSOREJP0",5,0)
 N INSLN,HIGHLN,LASTLN,PSOEKEY,PSOCVATG
"RTN","PSOREJP0",6,0)
 ;
"RTN","PSOREJP0",7,0)
 ; - Division/Site selection
"RTN","PSOREJP0",8,0)
 D SEL^PSOREJU1("DIVISION","^PS(59,",.PSOREJST,$$GET1^DIQ(59,+$G(PSOSITE),.01)) I $G(PSOREJST)="^" G EXIT
"RTN","PSOREJP0",9,0)
 ;
"RTN","PSOREJP0",10,0)
 ; - Initializing global variables
"RTN","PSOREJP0",11,0)
 S PSORJSRT="PA",PSORJASC=1,PSOSTFLT="U",(PSODRFLT,PSOPTFLT,PSORXFLT,PSOINFLT)="ALL"
"RTN","PSOREJP0",12,0)
 S PSOINGRP=0,PSOTRITG=1,PSOCVATG=1
"RTN","PSOREJP0",13,0)
 ;
"RTN","PSOREJP0",14,0)
 D LST("W")
"RTN","PSOREJP0",15,0)
 G EXIT
"RTN","PSOREJP0",16,0)
 ;
"RTN","PSOREJP0",17,0)
LST(PSOMENU) ; - Invokes Listmanager
"RTN","PSOREJP0",18,0)
 W !,"Please wait..."
"RTN","PSOREJP0",19,0)
 I PSOMENU="W" D EN^VALM("PSO REJECTS WORKLIST")
"RTN","PSOREJP0",20,0)
 I PSOMENU="VP" D EN^VALM("PSO REJECTS VIEW/PROCESS")
"RTN","PSOREJP0",21,0)
 D FULL^VALM1
"RTN","PSOREJP0",22,0)
 Q
"RTN","PSOREJP0",23,0)
 ;
"RTN","PSOREJP0",24,0)
HDR      ; - Header code
"RTN","PSOREJP0",25,0)
 N LINE1,LINE2,LINE3
"RTN","PSOREJP0",26,0)
 S LINE1=$$SITES() I $L(LINE1)>80 S $E(LINE1,78,999)="..."
"RTN","PSOREJP0",27,0)
 ;
"RTN","PSOREJP0",28,0)
 S LINE2="Selection : ALL "_$S(PSOSTFLT="U":"UNRESOLVED ",PSOSTFLT="R":"RESOLVED ",1:"")_"REJECTS"
"RTN","PSOREJP0",29,0)
 I $G(PSOPTFLT)'="ALL" S LINE2=LINE2_" FOR "_$$NAME("P")
"RTN","PSOREJP0",30,0)
 I $G(PSODRFLT)'="ALL" S LINE2=LINE2_" FOR "_$$NAME("D")
"RTN","PSOREJP0",31,0)
 I $G(PSOINFLT)'="ALL" S LINE2=LINE2_" FOR "_$$NAME("I")
"RTN","PSOREJP0",32,0)
 I $G(PSOINGRP) S LINE2=LINE2_" GROUPED BY INSURANCE"
"RTN","PSOREJP0",33,0)
 S VALMHDR(1)=LINE1,VALMHDR(2)=LINE2
"RTN","PSOREJP0",34,0)
 I PSOMENU="VP" D
"RTN","PSOREJP0",35,0)
 . I $G(PSORXFLT) S LINE3="Rx#       : "_$$NAME("R")
"RTN","PSOREJP0",36,0)
 . E  D
"RTN","PSOREJP0",37,0)
 . . S LINE3="Date Range: "_$$FMTE^XLFDT(+PSODTRNG,2)
"RTN","PSOREJP0",38,0)
 . . I +PSODTRNG'=$P(PSODTRNG,"^",2) S LINE3=LINE3_" THRU "_$$FMTE^XLFDT($P(PSODTRNG,"^",2),2)
"RTN","PSOREJP0",39,0)
 . S VALMHDR(3)=LINE3
"RTN","PSOREJP0",40,0)
 ;
"RTN","PSOREJP0",41,0)
 D SETHDR()
"RTN","PSOREJP0",42,0)
 Q
"RTN","PSOREJP0",43,0)
 ;
"RTN","PSOREJP0",44,0)
SETHDR() ; - Displays the Header Line
"RTN","PSOREJP0",45,0)
 N HDR,ORD
"RTN","PSOREJP0",46,0)
 ;
"RTN","PSOREJP0",47,0)
 S HDR="  #",$E(HDR,5)="Rx#",$E(HDR,18)="PATIENT(ID)",$E(HDR,43)="DRUG",$E(HDR,64)="REASON"
"RTN","PSOREJP0",48,0)
 S $E(HDR,81)="" D INSTR^VALM1(IORVON_HDR_IOINORM,1,$S(PSOMENU="W":4,1:5))
"RTN","PSOREJP0",49,0)
 S ORD=$S(PSORJASC=1:"[^]",1:"[v]")
"RTN","PSOREJP0",50,0)
 S:PSORJSRT="RX" POS=9 S:PSORJSRT="PA" POS=30 S:PSORJSRT="DR" POS=48 S:PSORJSRT="RE" POS=71
"RTN","PSOREJP0",51,0)
 D INSTR^VALM1(IOINHI_IORVON_ORD_IOINORM,POS,$S(PSOMENU="W":4,1:5))
"RTN","PSOREJP0",52,0)
 Q
"RTN","PSOREJP0",53,0)
 ;
"RTN","PSOREJP0",54,0)
INIT ; - Populates the Body section for ListMan
"RTN","PSOREJP0",55,0)
 K ^TMP("PSOREJP0",$J)
"RTN","PSOREJP0",56,0)
 D SETSORT(PSORJSRT),SETLINE
"RTN","PSOREJP0",57,0)
 S VALMSG="Select the entry # to view or ?? for more actions"
"RTN","PSOREJP0",58,0)
 Q
"RTN","PSOREJP0",59,0)
 ;
"RTN","PSOREJP0",60,0)
SETLINE ; - Sets the line to be displayed in ListMan
"RTN","PSOREJP0",61,0)
 N INS,SUB,SEQ,SORTA,LINE,Z,I,X,X1,X2
"RTN","PSOREJP0",62,0)
 I '$D(^TMP("PSOREJSR",$J)) D  Q
"RTN","PSOREJP0",63,0)
 . F I=1:1:7 S ^TMP("PSOREJP0",$J,I,0)=""
"RTN","PSOREJP0",64,0)
 . S ^TMP("PSOREJP0",$J,8,0)="               No Clinical Third Party Payer Rejects found."
"RTN","PSOREJP0",65,0)
 . S VALMCNT=1
"RTN","PSOREJP0",66,0)
 ;
"RTN","PSOREJP0",67,0)
 F I=1:1:$G(LASTLN) D RESTORE^VALM10(I)
"RTN","PSOREJP0",68,0)
 K INSLN,HIGHLN
"RTN","PSOREJP0",69,0)
 ;
"RTN","PSOREJP0",70,0)
 S (SORTA,INS,SUB)="",LINE=0 K ^TMP("PSOREJP0",$J)
"RTN","PSOREJP0",71,0)
 F  S SORTA=$O(^TMP("PSOREJSR",$J,SORTA)) Q:SORTA=""  D
"RTN","PSOREJP0",72,0)
 . F  S INS=$O(^TMP("PSOREJSR",$J,SORTA,INS)) Q:INS=""  D
"RTN","PSOREJP0",73,0)
 .. I INS'="<NULL>" D
"RTN","PSOREJP0",74,0)
 ... D GROUP(INS,.LINE)
"RTN","PSOREJP0",75,0)
 .. F  S SUB=$O(^TMP("PSOREJSR",$J,SORTA,INS,SUB),PSORJASC) Q:SUB=""  D
"RTN","PSOREJP0",76,0)
 ... S Z=$G(^TMP("PSOREJSR",$J,SORTA,INS,SUB))
"RTN","PSOREJP0",77,0)
 ... S X1="",SEQ=$G(SEQ)+1,X1=$J(SEQ,3)
"RTN","PSOREJP0",78,0)
 ... S $E(X1,5)=$P(Z,"^",3),$E(X1,18)=$P(Z,"^",4),$E(X1,43)=$P(Z,"^",5),$E(X1,64)=$P(Z,"^",6)
"RTN","PSOREJP0",79,0)
 ... S LINE=LINE+1,^TMP("PSOREJP0",$J,LINE,0)=X1,HIGHLN(LINE)=""
"RTN","PSOREJP0",80,0)
 ... S X2="",$E(X2,5)="Payer Message: "_$P(Z,"^",7)
"RTN","PSOREJP0",81,0)
 ... S LINE=LINE+1,^TMP("PSOREJP0",$J,LINE,0)=X2
"RTN","PSOREJP0",82,0)
 ... S ^TMP("PSOREJP0",$J,SEQ,"RX")=$P(Z,"^",1,2)
"RTN","PSOREJP0",83,0)
 ;
"RTN","PSOREJP0",84,0)
 I LINE>$G(LASTLN) D
"RTN","PSOREJP0",85,0)
 . F I=($G(LASTLN)+1):1:LINE D SAVE^VALM10(I)
"RTN","PSOREJP0",86,0)
 . S LASTLN=LINE
"RTN","PSOREJP0",87,0)
 ;
"RTN","PSOREJP0",88,0)
 ; - Highlighting the prescription/insurance line
"RTN","PSOREJP0",89,0)
 F LN=1:1:LINE D
"RTN","PSOREJP0",90,0)
 . I $D(HIGHLN(LN)) D  Q
"RTN","PSOREJP0",91,0)
 . . D CNTRL^VALM10(LN,1,80,IOINHI,IOINORM)
"RTN","PSOREJP0",92,0)
 . . D CNTRL^VALM10(LN,64,3,IOUON,IOINORM)
"RTN","PSOREJP0",93,0)
 . . D CNTRL^VALM10(LN,67,80,IOINHI,IOINORM)
"RTN","PSOREJP0",94,0)
 . I $D(INSLN(LN)) D
"RTN","PSOREJP0",95,0)
 . . S LBL=INSLN(LN),POS=41-($L(LBL)/2+.5\1)
"RTN","PSOREJP0",96,0)
 . . D CNTRL^VALM10(LN,1,POS-1,IOUON_IOINHI,IOINORM)
"RTN","PSOREJP0",97,0)
 . . D CNTRL^VALM10(LN,POS,$L(LBL),IORVON_IOINHI,IORVOFF_IOINORM)
"RTN","PSOREJP0",98,0)
 . . D CNTRL^VALM10(LN,POS+$L(LBL),(81-POS-$L(LBL)),IOUON_IOINHI,IOINORM)
"RTN","PSOREJP0",99,0)
 ;
"RTN","PSOREJP0",100,0)
 S VALMCNT=+$G(LINE)
"RTN","PSOREJP0",101,0)
 Q
"RTN","PSOREJP0",102,0)
 ;
"RTN","PSOREJP0",103,0)
GROUP(LBL,LINE) ; Sets an insurance delimiter line
"RTN","PSOREJP0",104,0)
 N X,POS
"RTN","PSOREJP0",105,0)
 S POS=41-($L(LBL)/2+.5\1)
"RTN","PSOREJP0",106,0)
 S X="",$P(X," ",81)="",$E(X,POS,POS-1+$L(LBL))=LBL
"RTN","PSOREJP0",107,0)
 S LINE=LINE+1,^TMP("PSOREJP0",$J,LINE,0)=X,INSLN(LINE)=LBL
"RTN","PSOREJP0",108,0)
 Q
"RTN","PSOREJP0",109,0)
 ;
"RTN","PSOREJP0",110,0)
SETSORT(FIELD) ; - Sets the data sorted by the FIELD specified
"RTN","PSOREJP0",111,0)
 N RX,REJ,STS,DAT
"RTN","PSOREJP0",112,0)
 K ^TMP("PSOREJSR",$J)
"RTN","PSOREJP0",113,0)
 ;
"RTN","PSOREJP0",114,0)
 ; - Worklist
"RTN","PSOREJP0",115,0)
 I PSOMENU="W" D
"RTN","PSOREJP0",116,0)
 . S RX=0 F  S RX=$O(^PSRX("REJSTS",0,RX)) Q:'RX  D
"RTN","PSOREJP0",117,0)
 . . S REJ=0 F  S REJ=$O(^PSRX("REJSTS",0,RX,REJ)) Q:'REJ  D
"RTN","PSOREJP0",118,0)
 . . . D SETTMP(RX,REJ,FIELD)
"RTN","PSOREJP0",119,0)
 ;
"RTN","PSOREJP0",120,0)
 ; - View/Process
"RTN","PSOREJP0",121,0)
 I PSOMENU="VP" D
"RTN","PSOREJP0",122,0)
 . I $G(PSORXFLT)'="ALL" D  Q
"RTN","PSOREJP0",123,0)
 . . S REJ=0 F  S REJ=$O(^PSRX(+PSORXFLT,"REJ",REJ)) Q:'REJ  D
"RTN","PSOREJP0",124,0)
 . . . I $$FLTSTS(+PSORXFLT,REJ) Q
"RTN","PSOREJP0",125,0)
 . . . D SETTMP(+PSORXFLT,REJ,FIELD)
"RTN","PSOREJP0",126,0)
 . S DAT=$P(PSODTRNG,"^")-0.0000001,(RX,REJ)=0
"RTN","PSOREJP0",127,0)
 . F  S DAT=$O(^PSRX("REJDAT",DAT)) Q:'DAT!(DAT>$$ENDT())  D
"RTN","PSOREJP0",128,0)
 . . F  S RX=$O(^PSRX("REJDAT",DAT,RX)) Q:'RX  D
"RTN","PSOREJP0",129,0)
 . . . I $$FILTER(RX) Q
"RTN","PSOREJP0",130,0)
 . . . F  S REJ=$O(^PSRX("REJDAT",DAT,RX,REJ)) Q:'REJ  D
"RTN","PSOREJP0",131,0)
 . . . . I $$FLTSTS(RX,REJ) Q
"RTN","PSOREJP0",132,0)
 . . . . D SETTMP(RX,REJ,FIELD)
"RTN","PSOREJP0",133,0)
 Q
"RTN","PSOREJP0",134,0)
 ;
"RTN","PSOREJP0",135,0)
SETTMP(RX,REJ,FIELD) ; - Sets ^TMP global that will be displayed in the body section
"RTN","PSOREJP0",136,0)
 N REJLST,FILL,CODE,RXNUM,PTNAME,DRNAME,MSG,REASON,MSG,X,Z,SORT,I,INS,OREJ,PSOTRIC,SORTA
"RTN","PSOREJP0",137,0)
 I $G(PSORXFLT)="ALL",$$CLOSED^PSOREJP1(RX,REJ),$$REOPN^PSOREJP1(RX,REJ) Q
"RTN","PSOREJP0",138,0)
 S FILL=+$$GET1^DIQ(52.25,REJ_","_RX,5),SORTA=1
"RTN","PSOREJP0",139,0)
 I '$$DIV(RX,FILL) Q
"RTN","PSOREJP0",140,0)
 K REJLST D GET^PSOREJU2(RX,FILL,.REJLST,,1) I '$D(REJLST) Q
"RTN","PSOREJP0",141,0)
 I $$FILTER(,REJLST(REJ,"INSURANCE POINTER")) Q
"RTN","PSOREJP0",142,0)
 S CODE=$G(REJLST(REJ,"CODE"))
"RTN","PSOREJP0",143,0)
 S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,FILL,PSOTRIC)
"RTN","PSOREJP0",144,0)
 Q:$G(PSOTRIC)=1&('$G(PSOTRITG))&(CODE'="79")&(CODE'="88")  ;show/hide non-DUR/RTS TRICARE
"RTN","PSOREJP0",145,0)
 Q:$G(PSOTRIC)=2&('$G(PSOCVATG))&(CODE'="79")&(CODE'="88")  ;show/hide non-DUR/RTS CHAMPVA
"RTN","PSOREJP0",146,0)
 S PTNAME=$$PTNAME(RX)
"RTN","PSOREJP0",147,0)
 S DRNAME=$$GET1^DIQ(52,RX,6)
"RTN","PSOREJP0",148,0)
 S RXNUM=$$GET1^DIQ(52,RX,.01)
"RTN","PSOREJP0",149,0)
 S MSG=$G(REJLST(REJ,"PAYER MESSAGE")) I $L(MSG)>60 S MSG=$E(MSG,1,58)_"..."
"RTN","PSOREJP0",150,0)
 S REASON=$S(CODE=88:"DUR:"_$G(REJLST(REJ,"REASON")),CODE=79:"79 :REFILL TOO SOON",1:CODE)
"RTN","PSOREJP0",151,0)
 I CODE'=79&(CODE'=88) S REASON=CODE_" :"_$$EXP^PSOREJP1(CODE)
"RTN","PSOREJP0",152,0)
 S Z="",$P(Z,"^")=RX,$P(Z,"^",2)=REJ,$P(Z,"^",3)=RXNUM,$P(Z,"^",4)=PTNAME
"RTN","PSOREJP0",153,0)
 S $P(Z,"^",5)=$E(DRNAME,1,20),$P(Z,"^",6)=$E(REASON,1,17),$P(Z,"^",7)=MSG
"RTN","PSOREJP0",154,0)
 S SORT=$S(FIELD="PA":PTNAME,FIELD="DR":DRNAME,FIELD="RX":RXNUM_" ",1:REASON)_RX_REJ
"RTN","PSOREJP0",155,0)
 S INS="<NULL>"
"RTN","PSOREJP0",156,0)
 I $G(PSOINGRP) S INS=REJLST(REJ,"INSURANCE NAME") S:INS="" INS="***UNKNOWN***"
"RTN","PSOREJP0",157,0)
 ;Modified code now separates Veteran RRR - PSO*7*421
"RTN","PSOREJP0",158,0)
 S:$G(PSOTRIC)&(CODE'=79)&(CODE'=88) INS=$$ELIGDISP^PSOREJP1(RX,FILL)_" - Non-DUR/RTS",SORTA=3
"RTN","PSOREJP0",159,0)
 I '$G(PSOTRIC)&(CODE'=79)&(CODE'=88) D
"RTN","PSOREJP0",160,0)
 .I $G(REJLST(REJ,"RRR FLAG"))="YES" S INS="REJECT RESOLUTION REQUIRED",SORTA=2 Q
"RTN","PSOREJP0",161,0)
 .S INS="OTHER REJECTS",SORTA=4
"RTN","PSOREJP0",162,0)
 S ^TMP("PSOREJSR",$J,SORTA,INS,SORT)=Z
"RTN","PSOREJP0",163,0)
 Q
"RTN","PSOREJP0",164,0)
 ;
"RTN","PSOREJP0",165,0)
PAT ; - Sort by Patient
"RTN","PSOREJP0",166,0)
 D SORT("PA")
"RTN","PSOREJP0",167,0)
 Q
"RTN","PSOREJP0",168,0)
DRG ; - Sort by Drug
"RTN","PSOREJP0",169,0)
 D SORT("DR")
"RTN","PSOREJP0",170,0)
 Q
"RTN","PSOREJP0",171,0)
RX ; - Sort by Rx
"RTN","PSOREJP0",172,0)
 D SORT("RX")
"RTN","PSOREJP0",173,0)
 Q
"RTN","PSOREJP0",174,0)
REA ; - Sort by Reason
"RTN","PSOREJP0",175,0)
 D SORT("RE")
"RTN","PSOREJP0",176,0)
 Q
"RTN","PSOREJP0",177,0)
SORT(FIELD) ; - Sort entries by FIELD
"RTN","PSOREJP0",178,0)
 I PSORJSRT=FIELD S PSORJASC=$S(PSORJASC=1:-1,1:1)
"RTN","PSOREJP0",179,0)
 E  S PSORJSRT=FIELD,PSORJASC=1
"RTN","PSOREJP0",180,0)
 D REF
"RTN","PSOREJP0",181,0)
 Q
"RTN","PSOREJP0",182,0)
 ;
"RTN","PSOREJP0",183,0)
REF ; - Screen Refresh
"RTN","PSOREJP0",184,0)
 W ?52,"Please wait..." D INIT S VALMBCK="R"
"RTN","PSOREJP0",185,0)
 Q
"RTN","PSOREJP0",186,0)
GI ; - Group by Insurance
"RTN","PSOREJP0",187,0)
 W ?52,"Please wait..." S PSOINGRP=$S($G(PSOINGRP):0,1:1) D INIT,HDR S VALMBCK="R"
"RTN","PSOREJP0",188,0)
 Q
"RTN","PSOREJP0",189,0)
TRICTOG ;  - Toggle TRICARE display
"RTN","PSOREJP0",190,0)
 W ?52,"Please wait..." S PSOTRITG=$S($G(PSOTRITG):0,1:1) D INIT,HDR S VALMBCK="R"
"RTN","PSOREJP0",191,0)
 Q
"RTN","PSOREJP0",192,0)
 ;
"RTN","PSOREJP0",193,0)
CVATOG ;  - Toggle CHAMPVA display
"RTN","PSOREJP0",194,0)
 W ?52,"Please wait..." S PSOCVATG=$S($G(PSOCVATG):0,1:1) D INIT,HDR S VALMBCK="R"
"RTN","PSOREJP0",195,0)
 Q
"RTN","PSOREJP0",196,0)
 ;
"RTN","PSOREJP0",197,0)
SEL ; - Process selection of one entry
"RTN","PSOREJP0",198,0)
 N PSOSEL,XQORM,Z,RX,REJ,PSOCHNG
"RTN","PSOREJP0",199,0)
 S PSOSEL=+$P($P(Y(1),"^",4),"=",2) I 'PSOSEL S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOREJP0",200,0)
 S Z=$G(^TMP("PSOREJP0",$J,PSOSEL,"RX"))
"RTN","PSOREJP0",201,0)
 S RX=$P(Z,"^"),REJ=$P(Z,"^",2) I 'RX!'REJ S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOREJP0",202,0)
 S PSOCHNG=0 D EN^PSOREJP1(RX,REJ,.PSOCHNG) I $G(PSOCHNG) D REF
"RTN","PSOREJP0",203,0)
 Q
"RTN","PSOREJP0",204,0)
 ;
"RTN","PSOREJP0",205,0)
EXIT ;
"RTN","PSOREJP0",206,0)
 K ^TMP("PSOREJP0",$J),^TMP("PSOREJSR",$J)
"RTN","PSOREJP0",207,0)
 Q
"RTN","PSOREJP0",208,0)
 ;
"RTN","PSOREJP0",209,0)
HELP Q
"RTN","PSOREJP0",210,0)
 ;
"RTN","PSOREJP0",211,0)
SITES() ; - Returns the list of sites along with their NCPDP #s
"RTN","PSOREJP0",212,0)
 N CNT,SITE,SITES,NAME
"RTN","PSOREJP0",213,0)
 I '$D(PSOREJST) Q ""
"RTN","PSOREJP0",214,0)
 I $G(PSOREJST)="ALL" Q "Divisions : ALL"
"RTN","PSOREJP0",215,0)
 S SITE=0 F  S SITE=$O(PSOREJST(SITE)) Q:'SITE  D
"RTN","PSOREJP0",216,0)
 . S NAME=$$GET1^DIQ(59,SITE,.01)
"RTN","PSOREJP0",217,0)
 . S SITES=$G(SITES)_", "_NAME
"RTN","PSOREJP0",218,0)
 S $E(SITES,1,2)="",SITES="Division"_$S($L(SITES,",")>1:"s",1:" ")_" : "_SITES
"RTN","PSOREJP0",219,0)
 Q SITES
"RTN","PSOREJP0",220,0)
 ;
"RTN","PSOREJP0",221,0)
DIV(RX,FILL) ; - Check if the Division for the Prescription/Fill was selected by the user
"RTN","PSOREJP0",222,0)
 ;
"RTN","PSOREJP0",223,0)
 I $G(PSOREJST)="ALL" Q 1
"RTN","PSOREJP0",224,0)
 I $D(PSOREJST($$RXSITE^PSOBPSUT(RX,FILL))) Q 1
"RTN","PSOREJP0",225,0)
 Q 0
"RTN","PSOREJP0",226,0)
 ;
"RTN","PSOREJP0",227,0)
PTNAME(RX) ; - Returns header displayable - Patient Name (Last 4 SSN)
"RTN","PSOREJP0",228,0)
 N DFN,VADM,PTNAME
"RTN","PSOREJP0",229,0)
 S DFN=$$GET1^DIQ(52,RX,2,"I") D DEM^VADPT
"RTN","PSOREJP0",230,0)
 S PTNAME=$E($G(VADM(1)),1,18)_"("_$P($P($G(VADM(2)),"^",2),"-",3)_")"
"RTN","PSOREJP0",231,0)
 Q PTNAME
"RTN","PSOREJP0",232,0)
 ;
"RTN","PSOREJP0",233,0)
FILTER(RX,INS) ; - Filter entries based on user's selection
"RTN","PSOREJP0",234,0)
 N FILTER
"RTN","PSOREJP0",235,0)
 S FILTER=1
"RTN","PSOREJP0",236,0)
 I $G(PSOPTFLT)'="ALL",$D(RX),'$D(PSOPTFLT($$GET1^DIQ(52,RX,2,"I"))) Q FILTER
"RTN","PSOREJP0",237,0)
 I $G(PSODRFLT)'="ALL",$D(RX),'$D(PSODRFLT($$GET1^DIQ(52,RX,6,"I"))) Q FILTER
"RTN","PSOREJP0",238,0)
 I $G(PSOINFLT)'="ALL",$D(INS),'$D(PSOINFLT(+INS)) Q FILTER
"RTN","PSOREJP0",239,0)
 Q 0
"RTN","PSOREJP0",240,0)
 ;
"RTN","PSOREJP0",241,0)
FLTSTS(RX,REJ) ; - Filter for the Reject Status  
"RTN","PSOREJP0",242,0)
 N STS
"RTN","PSOREJP0",243,0)
 S STS=$$GET1^DIQ(52.25,REJ_","_RX,9,"I")
"RTN","PSOREJP0",244,0)
 I PSOSTFLT="U",STS=1 Q 1
"RTN","PSOREJP0",245,0)
 I PSOSTFLT="R",STS=0 Q 1
"RTN","PSOREJP0",246,0)
 Q 0
"RTN","PSOREJP0",247,0)
 ;
"RTN","PSOREJP0",248,0)
NAME(TYPE) ; - Returns the name if ONE was selected or "MULTIPLE ..."
"RTN","PSOREJP0",249,0)
 N I,CNT
"RTN","PSOREJP0",250,0)
 ;
"RTN","PSOREJP0",251,0)
 I TYPE="P",$O(PSOPTFLT($O(PSOPTFLT(""))))="" Q $$GET1^DIQ(2,$O(PSOPTFLT("")),.01)
"RTN","PSOREJP0",252,0)
 I TYPE="D",$O(PSODRFLT($O(PSODRFLT(""))))="" Q $$GET1^DIQ(50,$O(PSODRFLT("")),.01)
"RTN","PSOREJP0",253,0)
 I TYPE="I",$O(PSOINFLT($O(PSOINFLT(""))))="" Q $O(PSOINFLT(""))
"RTN","PSOREJP0",254,0)
 I TYPE="R" Q $$GET1^DIQ(52,PSORXFLT,.01)
"RTN","PSOREJP0",255,0)
 Q "MULTIPLE "_$S(TYPE="P":"PATIENTS",TYPE="D":"DRUGS",1:"INSURANCE COMPANIES")
"RTN","PSOREJP0",256,0)
 ;
"RTN","PSOREJP0",257,0)
ENDT() ; Returns the upper limit for the date range
"RTN","PSOREJP0",258,0)
 N ENDT
"RTN","PSOREJP0",259,0)
 S ENDT=$P(PSODTRNG,"^",2)
"RTN","PSOREJP0",260,0)
 I '$E(ENDT,4,7) Q (ENDT+10000)
"RTN","PSOREJP0",261,0)
 I '$E(ENDT,6,7) Q (ENDT+100)
"RTN","PSOREJP0",262,0)
 I $P(ENDT,"^",2) Q (ENDT+0.0000001)
"RTN","PSOREJP0",263,0)
 Q (ENDT+.25)
"RTN","PSOREJP0",264,0)
 ;
"RTN","PSOREJP0",265,0)
PRTEXCL ;
"RTN","PSOREJP0",266,0)
 ; Protocol to Print to Excel
"RTN","PSOREJP0",267,0)
 ;
"RTN","PSOREJP0",268,0)
 ; Use full screen
"RTN","PSOREJP0",269,0)
 D FULL^VALM1
"RTN","PSOREJP0",270,0)
 ;
"RTN","PSOREJP0",271,0)
 ; Prompt to see if the user wants to print to Excel
"RTN","PSOREJP0",272,0)
 N DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","PSOREJP0",273,0)
 S DIR(0)="Y"
"RTN","PSOREJP0",274,0)
 S DIR("A")="Do you want to capture report data for an Excel document",DIR("B")="NO"
"RTN","PSOREJP0",275,0)
 D ^DIR
"RTN","PSOREJP0",276,0)
 I Y'=1 G PEXIT
"RTN","PSOREJP0",277,0)
 ;
"RTN","PSOREJP0",278,0)
 ; Display Warning Message
"RTN","PSOREJP0",279,0)
 W !!?5,"Before continuing, please set up your terminal to capture the"
"RTN","PSOREJP0",280,0)
 W !?5,"detail report data. On some terminals, this can be done by"
"RTN","PSOREJP0",281,0)
 W !?5,"clicking on the 'Tools' menu above, then click on 'Capture"
"RTN","PSOREJP0",282,0)
 W !?5,"Incoming Data' to save to Desktop"
"RTN","PSOREJP0",283,0)
 W !!?5,"Note: To avoid undesired wrapping of the data saved to the"
"RTN","PSOREJP0",284,0)
 W !?10,"file, please enter '0;256;999' at the 'DEVICE:' prompt."
"RTN","PSOREJP0",285,0)
 ;
"RTN","PSOREJP0",286,0)
 ; Prompt for device
"RTN","PSOREJP0",287,0)
 N %ZIS,ZTSK,ZTRTN,ZTIO,ZTDESC,ZTSAVE,POP,OK
"RTN","PSOREJP0",288,0)
 S OK=0
"RTN","PSOREJP0",289,0)
 F  D  I POP!OK Q
"RTN","PSOREJP0",290,0)
 . S %ZIS="QM"
"RTN","PSOREJP0",291,0)
 . D ^%ZIS
"RTN","PSOREJP0",292,0)
 . I POP Q
"RTN","PSOREJP0",293,0)
 . I '$D(IO("Q")) S OK=1 Q
"RTN","PSOREJP0",294,0)
 . I $D(IO("Q")) D
"RTN","PSOREJP0",295,0)
 .. K IO("Q")
"RTN","PSOREJP0",296,0)
 .. D HOME^%ZIS
"RTN","PSOREJP0",297,0)
 .. W !,"Sorry, the output for this action cannot be queued.  Please select a device that"
"RTN","PSOREJP0",298,0)
 .. W !,"does not requiring queuing."
"RTN","PSOREJP0",299,0)
 I POP G PEXIT
"RTN","PSOREJP0",300,0)
 ;
"RTN","PSOREJP0",301,0)
 ; If not queued, run the process directly
"RTN","PSOREJP0",302,0)
 D RUN
"RTN","PSOREJP0",303,0)
 ;
"RTN","PSOREJP0",304,0)
PEXIT ;
"RTN","PSOREJP0",305,0)
 ; Reset before going back to ListMan
"RTN","PSOREJP0",306,0)
 S VALMBCK="R"
"RTN","PSOREJP0",307,0)
 Q
"RTN","PSOREJP0",308,0)
 ;
"RTN","PSOREJP0",309,0)
 ; Run the Report
"RTN","PSOREJP0",310,0)
RUN ;
"RTN","PSOREJP0",311,0)
 N SORTA,INS,SORT,RX,REJ,FILL,PTNAME,DRNAME,RXNUM,REJLST,CODE,REASON,MSG
"RTN","PSOREJP0",312,0)
 U IO
"RTN","PSOREJP0",313,0)
 ; Write Header
"RTN","PSOREJP0",314,0)
 W !,"Section/Insurance^RX#^Patient(ID)^Drug^Reason^Payer Message"
"RTN","PSOREJP0",315,0)
 ;
"RTN","PSOREJP0",316,0)
 ; Loop through temp array and output
"RTN","PSOREJP0",317,0)
 S SORTA="" F  S SORTA=$O(^TMP("PSOREJSR",$J,SORTA)) Q:'SORTA  D
"RTN","PSOREJP0",318,0)
 . S INS="" F  S INS=$O(^TMP("PSOREJSR",$J,SORTA,INS)) Q:INS=""  D
"RTN","PSOREJP0",319,0)
 .. S SORT="" F  S SORT=$O(^TMP("PSOREJSR",$J,SORTA,INS,SORT)) Q:SORT=""  D
"RTN","PSOREJP0",320,0)
 ... W !,$S(INS'="<NULL>":INS,1:"Refill Too Soon/DUR Rejects")_U
"RTN","PSOREJP0",321,0)
 ... S RX=$P(^TMP("PSOREJSR",$J,SORTA,INS,SORT),"^",1),REJ=$P(^TMP("PSOREJSR",$J,SORTA,INS,SORT),"^",2)
"RTN","PSOREJP0",322,0)
 ... S FILL=+$$GET1^DIQ(52.25,REJ_","_RX,5)
"RTN","PSOREJP0",323,0)
 ... S PTNAME=$$PTNAME(RX)
"RTN","PSOREJP0",324,0)
 ... S DRNAME=$$GET1^DIQ(52,RX,6)
"RTN","PSOREJP0",325,0)
 ... S RXNUM=$$GET1^DIQ(52,RX,.01)
"RTN","PSOREJP0",326,0)
 ... K REJLST D GET^PSOREJU2(RX,FILL,.REJLST,,1)
"RTN","PSOREJP0",327,0)
 ... S CODE=$G(REJLST(REJ,"CODE"))
"RTN","PSOREJP0",328,0)
 ... S REASON=$S(CODE=88:"DUR:"_$G(REJLST(REJ,"REASON")),CODE=79:"79 :REFILL TOO SOON",1:CODE_" :"_$$EXP^PSOREJP1(CODE))
"RTN","PSOREJP0",329,0)
 ... S MSG=$G(REJLST(REJ,"PAYER MESSAGE"))
"RTN","PSOREJP0",330,0)
 ... W RXNUM_U_PTNAME_U_DRNAME_U_REASON_U_MSG
"RTN","PSOREJP0",331,0)
 ;
"RTN","PSOREJP0",332,0)
 ; Cleanup
"RTN","PSOREJP0",333,0)
 I $E($G(IOST),1,2)'="C-" W !,@IOF
"RTN","PSOREJP0",334,0)
 I $E($G(IOST),1,2)="C-" D
"RTN","PSOREJP0",335,0)
 . N DIR,DTOUT,DUOUT,DIROUT,DIRUT
"RTN","PSOREJP0",336,0)
 . S DIR(0)="E"
"RTN","PSOREJP0",337,0)
 . D ^DIR
"RTN","PSOREJP0",338,0)
 I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","PSOREJP0",339,0)
 D ^%ZISC
"RTN","PSOREJP0",340,0)
 Q
"RTN","PSOREJP1")
0^25^B185402834
"RTN","PSOREJP1",1,0)
PSOREJP1 ;BIRM/MFR - Third Party Reject Display Screen ;04/29/05
"RTN","PSOREJP1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,247,260,281,287,289,290,358,359,385,403,421,427**;DEC 1997;Build 21
"RTN","PSOREJP1",3,0)
 ;Reference to File 9002313.93 - BPS NCPDP REJECT CODES supported by IA 4720
"RTN","PSOREJP1",4,0)
 ;Reference to ^PS(59.7 supported by IA 694
"RTN","PSOREJP1",5,0)
 ;Reference to ^PSDRUG("AQ" supported by IA 3165
"RTN","PSOREJP1",6,0)
 ;Reference to File 9002313.25 supported by IA 5064
"RTN","PSOREJP1",7,0)
 ;Reference to BPSNCPD3 supported by IA 4560
"RTN","PSOREJP1",8,0)
 ;Reference to ^BPSVRX supported by IA 5723
"RTN","PSOREJP1",9,0)
 ;Reference to $$BBILL^BPSBUTL supported by IA 4719
"RTN","PSOREJP1",10,0)
 ;
"RTN","PSOREJP1",11,0)
EN(RX,REJ,CHANGE) ; Entry point
"RTN","PSOREJP1",12,0)
 ;
"RTN","PSOREJP1",13,0)
 ; - DO NOT change the IF logic below as both of them might get executed (intentional)
"RTN","PSOREJP1",14,0)
 N FILL,LASTLN,PSOTRIC,PSOCODE,PSOTCODE
"RTN","PSOREJP1",15,0)
 S FILL=+$$GET1^DIQ(52.25,REJ_","_RX,5)
"RTN","PSOREJP1",16,0)
 S PSOTRIC="",PSOTRIC=$$TRIC(RX,FILL,PSOTRIC),PSOCODE=$$GET1^DIQ(52.25,REJ_","_RX,.01)
"RTN","PSOREJP1",17,0)
 S PSOTCODE=0 S:PSOCODE'=79&(PSOCODE'=88)&(PSOTRIC) PSOTCODE=1
"RTN","PSOREJP1",18,0)
 I $$CLOSED(RX,REJ) D EN^VALM("PSO REJECT DISPLAY - RESOLVED")
"RTN","PSOREJP1",19,0)
 I '$$CLOSED(RX,REJ)&(PSOTRIC) D EN^VALM("PSO REJECT TRICARE")   ;cnf, PSO*7*358, replace PSOTCODE with PSOTRIC
"RTN","PSOREJP1",20,0)
 I '$$CLOSED(RX,REJ)&('PSOTCODE)&('PSOTRIC) D EN^VALM("PSO REJECT DISPLAY")   ;cnf, PSO*7*358, add PSOTRIC check
"RTN","PSOREJP1",21,0)
 D FULL^VALM1
"RTN","PSOREJP1",22,0)
 Q
"RTN","PSOREJP1",23,0)
 ;
"RTN","PSOREJP1",24,0)
HDR ; - Builds the Header section
"RTN","PSOREJP1",25,0)
 N LINE1,LINE2,X
"RTN","PSOREJP1",26,0)
 S VALMHDR(1)=$$DVINFO^PSOREJU2(RX,FILL,1),VALMHDR(2)=$$PTINFO^PSOREJU2(RX,1)
"RTN","PSOREJP1",27,0)
 ;cnf, PSO*7*358, add REJ to parameter list for RXINFO^PSOREJP3
"RTN","PSOREJP1",28,0)
 S VALMHDR(3)=$$RXINFO^PSOREJP3(RX,FILL,1),VALMHDR(4)=$$RXINFO^PSOREJP3(RX,FILL,2,REJ)
"RTN","PSOREJP1",29,0)
 Q
"RTN","PSOREJP1",30,0)
 ;
"RTN","PSOREJP1",31,0)
TRIC(RX,RFL,PSOTRIC) ; - Return 1 for TRICARE, 2 for CHAMPVA or 0 (zero) for not TRICARE or CHAMPVA
"RTN","PSOREJP1",32,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJP1",33,0)
 S PSOTRIC="",PSOTRIC=$S(RFL=0&($$GET1^DIQ(52,RX_",",85,"I")="T"):1,$$GET1^DIQ(52.1,RFL_","_RX_",",85,"I")="T":1,RFL=0&($$GET1^DIQ(52,RX_",",85,"I")="C"):2,$$GET1^DIQ(52.1,RFL_","_RX_",",85,"I")="C":2,1:0)
"RTN","PSOREJP1",34,0)
 Q PSOTRIC
"RTN","PSOREJP1",35,0)
 ;
"RTN","PSOREJP1",36,0)
ELIGDISP(RX,RFL) ; Return either CHAMPVA or TRICARE for display
"RTN","PSOREJP1",37,0)
 ; purposes, or null if neither
"RTN","PSOREJP1",38,0)
 N PSOELIG
"RTN","PSOREJP1",39,0)
 S PSOELIG=$$TRIC(RX,RFL)
"RTN","PSOREJP1",40,0)
 Q $S(PSOELIG=1:"TRICARE",PSOELIG=2:"CHAMPVA",1:"")
"RTN","PSOREJP1",41,0)
 ;
"RTN","PSOREJP1",42,0)
INIT ; Builds the Body section
"RTN","PSOREJP1",43,0)
 N DATA,LINE
"RTN","PSOREJP1",44,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJP1",45,0)
 S PSOTRIC="",PSOTRIC=$$TRIC(RX,RFL,PSOTRIC)
"RTN","PSOREJP1",46,0)
 I '$$CLOSED(RX,REJ)&(PSOTRIC) S VALM("TITLE")="Reject Information ("_$$ELIGDISP(RX,RFL)_")"
"RTN","PSOREJP1",47,0)
 F I=1:1:$G(LASTLN) D RESTORE^VALM10(I)
"RTN","PSOREJP1",48,0)
 K ^TMP("PSOREJP1",$J) S VALMCNT=0,LINE=0
"RTN","PSOREJP1",49,0)
 D GET^PSOREJU2(RX,FILL,.DATA,REJ,1)
"RTN","PSOREJP1",50,0)
 D REJ                   ; Display the REJECT Information
"RTN","PSOREJP1",51,0)
 D OTH                   ; Display the Other Rejects Information
"RTN","PSOREJP1",52,0)
 D COM^PSOREJP3          ; Display the Comment
"RTN","PSOREJP1",53,0)
 D INS                   ; Display the Insurance Information
"RTN","PSOREJP1",54,0)
 D CLS                   ; Display the Resolution Information
"RTN","PSOREJP1",55,0)
 S VALMCNT=LINE
"RTN","PSOREJP1",56,0)
 Q
"RTN","PSOREJP1",57,0)
 ;
"RTN","PSOREJP1",58,0)
REJ ; - DUR Information
"RTN","PSOREJP1",59,0)
 N TYPE,PFLDT,TREJ,TDATA,PSOTRIC,PSOET,PSONAF,BBCOB,BBTXT S TDATA=""
"RTN","PSOREJP1",60,0)
 S PSOTRIC="",PSOTRIC=$$TRIC(RX,FILL,PSOTRIC)
"RTN","PSOREJP1",61,0)
 ; Back Bill indicator - PSO*7*421
"RTN","PSOREJP1",62,0)
 S BBTXT="",BBCOB=$G(DATA(REJ,"COB")),BBCOB=$S(BBCOB="SECONDARY":2,BBCOB="TERTIARY":3,1:1)
"RTN","PSOREJP1",63,0)
 I $$BBILL^BPSBUTL(RX,FILL,BBCOB) S BBTXT=" BACK-BILL"
"RTN","PSOREJP1",64,0)
 D SETLN("REJECT Information"_$S($G(PSOTRIC)=1:" (TRICARE)",$G(PSOTRIC)=2:" (CHAMPVA)",1:"")_BBTXT,1,1)
"RTN","PSOREJP1",65,0)
 S TYPE=$S($G(DATA(REJ,"CODE"))=79:"79 - REFILL TOO SOON",1:"")
"RTN","PSOREJP1",66,0)
 I TYPE="" S TYPE=DATA(REJ,"CODE")_" - "_$E($$EXP(DATA(REJ,"CODE")),1,23)_"-"
"RTN","PSOREJP1",67,0)
 D SETLN("Reject Type    : "_TYPE_" received on "_$$FMTE^XLFDT($G(DATA(REJ,"DATE/TIME"))),,,18)
"RTN","PSOREJP1",68,0)
 ;cnf, PSO*7*358, if TRICARE/CHAMPVA non-billable then reset Status line
"RTN","PSOREJP1",69,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",70,0)
 I PSOET D SETLN("Status         : NO CLAIM SUBMITTED")
"RTN","PSOREJP1",71,0)
 I 'PSOET D SETLN("Reject Status  : "_$G(DATA(REJ,"STATUS"))_" - "_$$STATUS^PSOBPSUT(RX,FILL),,,18)
"RTN","PSOREJP1",72,0)
 S PSONAF=$$NFLDT^BPSBUTL(RX,FILL) ; IA 4719
"RTN","PSOREJP1",73,0)
 I PSONAF'="" D SETLN("Next Avail Fill: "_$$FMTE^XLFDT(PSONAF),,,18) ; PSO*7*421
"RTN","PSOREJP1",74,0)
 D SET("PAYER MESSAGE",63)
"RTN","PSOREJP1",75,0)
 D SET("REASON",63)
"RTN","PSOREJP1",76,0)
 S PFLDT=$$FMTE^XLFDT($G(DATA(REJ,"PLAN PREVIOUS FILL DATE")))
"RTN","PSOREJP1",77,0)
 D SET("DUR TEXT",63,$S(PFLDT="":1,1:0))
"RTN","PSOREJP1",78,0)
 I PFLDT'="" D SETLN("Last Fill Date : "_PFLDT_" (from payer)",,1,18)
"RTN","PSOREJP1",79,0)
 Q
"RTN","PSOREJP1",80,0)
 ;
"RTN","PSOREJP1",81,0)
OTH ; - Other Rejects Information
"RTN","PSOREJP1",82,0)
 N LST,I,RJC,J,LAST
"RTN","PSOREJP1",83,0)
 S LST=$G(DATA(REJ,"OTHER REJECTS")) I LST="" Q
"RTN","PSOREJP1",84,0)
 D SETLN()
"RTN","PSOREJP1",85,0)
 D SETLN("OTHER REJECTS",1,1)
"RTN","PSOREJP1",86,0)
 F I=1:1:$L(LST,",") S RJC=$P(LST,",",I) D
"RTN","PSOREJP1",87,0)
 . S LAST=1 F J=(I+1):1:$L(LST,",") I $P(LST,",",J)'="" S LAST=0 Q
"RTN","PSOREJP1",88,0)
 . I RJC'="" D SETLN(RJC_" - "_$$EXP(RJC),,$S(LAST:1,1:0),6)
"RTN","PSOREJP1",89,0)
 Q
"RTN","PSOREJP1",90,0)
 ;
"RTN","PSOREJP1",91,0)
INS ; - Insurance Information
"RTN","PSOREJP1",92,0)
 D SETLN()
"RTN","PSOREJP1",93,0)
 D SETLN("INSURANCE Information",1,1)
"RTN","PSOREJP1",94,0)
 N PSOINS,PSOINS1,I
"RTN","PSOREJP1",95,0)
 S PSOINS=$G(DATA(REJ,"INSURANCE NAME"))
"RTN","PSOREJP1",96,0)
 F I=1:1:(50-($L(PSOINS)+18)) S PSOINS=PSOINS_" "
"RTN","PSOREJP1",97,0)
 S PSOINS1=$G(DATA(REJ,"COB"))
"RTN","PSOREJP1",98,0)
 I PSOINS1="SECONDARY" S PSOINS=PSOINS_"Coord. Of Benefits: "_PSOINS1
"RTN","PSOREJP1",99,0)
 D SETLN("Insurance      : "_PSOINS,,,18)
"RTN","PSOREJP1",100,0)
 D SETLN("Contact        : "_$G(DATA(REJ,"PLAN CONTACT")),,,18)
"RTN","PSOREJP1",101,0)
 D SETLN("BIN            : "_$G(DATA(REJ,"BIN")),,,18)
"RTN","PSOREJP1",102,0)
 D SETLN("Group Number   : "_$G(DATA(REJ,"GROUP NUMBER")),,,18)
"RTN","PSOREJP1",103,0)
 D SETLN("Cardholder ID  : "_$G(DATA(REJ,"CARDHOLDER ID")),,1,18)
"RTN","PSOREJP1",104,0)
 Q
"RTN","PSOREJP1",105,0)
 ;
"RTN","PSOREJP1",106,0)
CLS ; - Resolution Information
"RTN","PSOREJP1",107,0)
 N X
"RTN","PSOREJP1",108,0)
 I '$$CLOSED(RX,REJ) Q
"RTN","PSOREJP1",109,0)
 D SETLN()
"RTN","PSOREJP1",110,0)
 D SETLN("RESOLUTION Information",1,1)
"RTN","PSOREJP1",111,0)
 D SETLN("Resolved By    : "_$G(DATA(REJ,"CLOSED BY")),,,18)
"RTN","PSOREJP1",112,0)
 D SETLN("Date/Time      : "_$G(DATA(REJ,"CLOSED DATE/TIME")),,,18)
"RTN","PSOREJP1",113,0)
 I $G(DATA(REJ,"CLOSE COMMENTS"))'="" D SET("CLOSE COMMENTS",63)
"RTN","PSOREJP1",114,0)
 I $G(DATA(REJ,"COD1"))'="" D SETLN("Reason for Svc : "_$$OVRX^PSOREJU1(1,$G(DATA(REJ,"COD1"))),,,18)
"RTN","PSOREJP1",115,0)
 I $G(DATA(REJ,"COD2"))'="" D SETLN("Profes. Svc    : "_$$OVRX^PSOREJU1(2,$G(DATA(REJ,"COD2"))),,,18)
"RTN","PSOREJP1",116,0)
 I $G(DATA(REJ,"COD3"))'="" D SETLN("Result of Svc  : "_$$OVRX^PSOREJU1(3,$G(DATA(REJ,"COD3"))),,,18)
"RTN","PSOREJP1",117,0)
 I $G(DATA(REJ,"CLA CODE"))'="" D
"RTN","PSOREJP1",118,0)
 . N CLAPNTR S CLAPNTR=$$GET1^DIQ(52.25,REJ_","_RX_",",24,"I")
"RTN","PSOREJP1",119,0)
 . S X=DATA(REJ,"CLA CODE")_" - "_$$GET1^DIQ(9002313.25,CLAPNTR,".02")
"RTN","PSOREJP1",120,0)
 . D SETLN("Clarific. Code : "_X,,,18)
"RTN","PSOREJP1",121,0)
 I $G(DATA(REJ,"PRIOR AUTH TYPE"))'="" D
"RTN","PSOREJP1",122,0)
 . S X=$$GET1^DIQ(52.25,REJ_","_RX,25,"I")_" - "_(DATA(REJ,"PRIOR AUTH TYPE"))
"RTN","PSOREJP1",123,0)
 . D SETLN("Prior Auth.Type: "_X,,,18),SETLN("Prior Auth. #  : "_DATA(REJ,"PRIOR AUTH NUMBER"),,,18)
"RTN","PSOREJP1",124,0)
 D SETLN("Reason         : "_$G(DATA(REJ,"CLOSE REASON")),,1,18)
"RTN","PSOREJP1",125,0)
 Q
"RTN","PSOREJP1",126,0)
 ;
"RTN","PSOREJP1",127,0)
 ;
"RTN","PSOREJP1",128,0)
SET(FIELD,L,UND) ; Sets the lines for fields that require text wrapping
"RTN","PSOREJP1",129,0)
 N TXT,T
"RTN","PSOREJP1",130,0)
 S TXT=DATA(REJ,FIELD) I $L(TXT)'>L D SETLN($$LABEL(FIELD)_TXT,,$S($G(UND):1,1:0),80-L) Q
"RTN","PSOREJP1",131,0)
 F I=1:1 Q:TXT=""  D
"RTN","PSOREJP1",132,0)
 . I I=1 D SETLN($$LABEL(FIELD)_$E(TXT,1,L),,,80-L) S TXT=$E(TXT,L+1,999) Q
"RTN","PSOREJP1",133,0)
 . S T="",$E(T,81-L)=$E(TXT,1,L) D SETLN(T,,$S($E(TXT,L+1,999)=""&$G(UND):1,1:0),80-L) S TXT=$E(TXT,L+1,999)
"RTN","PSOREJP1",134,0)
 Q
"RTN","PSOREJP1",135,0)
 ;
"RTN","PSOREJP1",136,0)
LABEL(FIELD) ; Sets the label for the field
"RTN","PSOREJP1",137,0)
 I FIELD="REASON" Q "Reason Code    : "
"RTN","PSOREJP1",138,0)
 I FIELD="PAYER MESSAGE" Q "Payer Addl Msg : "
"RTN","PSOREJP1",139,0)
 I FIELD="DUR TEXT" Q $S(+$$ISDUR^PSOREJP5(RX,REJ):"+DUR Text      : ",1:"DUR Text       : ")
"RTN","PSOREJP1",140,0)
 I FIELD="CLOSE COMMENTS" Q "Comments       : "
"RTN","PSOREJP1",141,0)
 Q ""
"RTN","PSOREJP1",142,0)
 ;
"RTN","PSOREJP1",143,0)
VIEW ; - Rx View hidden action
"RTN","PSOREJP1",144,0)
 N VALMCNT,TITLE
"RTN","PSOREJP1",145,0)
 I $G(PSOBACK) D  Q
"RTN","PSOREJP1",146,0)
 . S VALMSG="Not available through Backdoor!",VALMBCK="R"
"RTN","PSOREJP1",147,0)
 S TITLE=VALM("TITLE")
"RTN","PSOREJP1",148,0)
 ;
"RTN","PSOREJP1",149,0)
 ; - DO structure used to avoid losing variables RX,FILL,REJ,LINE,TITLE
"RTN","PSOREJP1",150,0)
 DO
"RTN","PSOREJP1",151,0)
 . N PSOVDA,DA,PS
"RTN","PSOREJP1",152,0)
 . S (PSOVDA,DA)=RX,PS="REJECT"
"RTN","PSOREJP1",153,0)
 . N RX,REJ,FILL,LINE,TITLE D DP^PSORXVW
"RTN","PSOREJP1",154,0)
 ;
"RTN","PSOREJP1",155,0)
 S VALMBCK="R",VALM("TITLE")=TITLE
"RTN","PSOREJP1",156,0)
 Q
"RTN","PSOREJP1",157,0)
 ;
"RTN","PSOREJP1",158,0)
EDT ; - Rx Edit hidden action
"RTN","PSOREJP1",159,0)
 N VALMCNT,TITLE
"RTN","PSOREJP1",160,0)
 I $G(PSOBACK) D  Q
"RTN","PSOREJP1",161,0)
 . S VALMSG="Not available through Backdoor!",VALMBCK="R"
"RTN","PSOREJP1",162,0)
 S TITLE=VALM("TITLE")
"RTN","PSOREJP1",163,0)
 ;
"RTN","PSOREJP1",164,0)
 ; - DO structure used to avoid losing variables RX,FILL,REJ,LINE,TITLE
"RTN","PSOREJP1",165,0)
 DO
"RTN","PSOREJP1",166,0)
 . N PSOSITE,ORN,PSOPAR,PSOLIST,PSOREJCT
"RTN","PSOREJP1",167,0)
 . S PSOSITE=$$RXSITE^PSOBPSUT(RX,FILL),ORN=RX
"RTN","PSOREJP1",168,0)
 . S PSOPAR=$G(^PS(59,PSOSITE,1)),PSOLIST(1)=ORN_","
"RTN","PSOREJP1",169,0)
 . ; Variable PSOREJCT is used so that EPH^PSORXEDT has the RX 'passed' by this routine
"RTN","PSOREJP1",170,0)
 . S PSOREJCT=RX_U_FILL
"RTN","PSOREJP1",171,0)
 . N RX,REJ,FILL,LINE,TITLE D EPH^PSORXEDT
"RTN","PSOREJP1",172,0)
 ;
"RTN","PSOREJP1",173,0)
 K VALMBCK I $$CLOSED(RX,REJ),$D(PSOSTFLT),PSOSTFLT="U" S CHANGE=1 Q
"RTN","PSOREJP1",174,0)
 S VALMBCK="R",VALM("TITLE")=TITLE
"RTN","PSOREJP1",175,0)
 Q
"RTN","PSOREJP1",176,0)
 ;
"RTN","PSOREJP1",177,0)
OVR ; - Override a REJECT action
"RTN","PSOREJP1",178,0)
 N PSOET
"RTN","PSOREJP1",179,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",180,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP1",181,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",182,0)
 I PSOET S VALMSG="OVR not allowed for "_$$ELIGDISP^PSOREJP1(RX,FILL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP1",183,0)
 N COD1,COD2,COD3
"RTN","PSOREJP1",184,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",185,0)
 S COD1=$$OVRCOD^PSOREJU1(1,$$GET1^DIQ(52.25,REJ_","_RX,14)) I COD1="^"!(COD1="") S VALMBCK="R" Q
"RTN","PSOREJP1",186,0)
 S COD2=$$OVRCOD^PSOREJU1(2) I COD2="^" S VALMBCK="R" Q
"RTN","PSOREJP1",187,0)
 S COD3=$$OVRCOD^PSOREJU1(3) I COD3="^" S VALMBCK="R" Q
"RTN","PSOREJP1",188,0)
 D OVRDSP^PSOREJU1(COD1_"^"_COD2_"^"_COD3)
"RTN","PSOREJP1",189,0)
 D SEND^PSOREJP3(COD1_"^"_COD2_"^"_COD3)
"RTN","PSOREJP1",190,0)
 Q
"RTN","PSOREJP1",191,0)
 ;
"RTN","PSOREJP1",192,0)
RES ; - Re-submit a claim action
"RTN","PSOREJP1",193,0)
 N PSOET
"RTN","PSOREJP1",194,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",195,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP1",196,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",197,0)
 I PSOET S VALMSG="RES not allowed for "_$$ELIGDISP^PSOREJP1(RX,FILL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP1",198,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",199,0)
 D SEND^PSOREJP3()
"RTN","PSOREJP1",200,0)
 Q
"RTN","PSOREJP1",201,0)
 ;
"RTN","PSOREJP1",202,0)
CLA ; - Submit Clarification Code
"RTN","PSOREJP1",203,0)
 N CLA,PSOET
"RTN","PSOREJP1",204,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",205,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP1",206,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",207,0)
 I PSOET S VALMSG="CLA not allowed for "_$$ELIGDISP^PSOREJP1(RX,FILL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP1",208,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",209,0)
 ; Prompt for the Submission Clarification Codes (up to three)
"RTN","PSOREJP1",210,0)
 S CLA=$$CLA^PSOREJU1() I CLA="^"!(CLA="") S VALMBCK="R" Q
"RTN","PSOREJP1",211,0)
 W ! D SEND^PSOREJP3(,CLA)
"RTN","PSOREJP1",212,0)
 Q
"RTN","PSOREJP1",213,0)
 ;
"RTN","PSOREJP1",214,0)
PA ; - Submit Prior Authorization
"RTN","PSOREJP1",215,0)
 N PA,PSOET
"RTN","PSOREJP1",216,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",217,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP1",218,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",219,0)
 I PSOET S VALMSG="PA not allowed for "_$$ELIGDISP^PSOREJP1(RX,FILL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP1",220,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",221,0)
 ; Prompt for Prior Auth fields
"RTN","PSOREJP1",222,0)
 S PA=$$PA^PSOREJU2() I PA="^" S VALMBCK="R" Q
"RTN","PSOREJP1",223,0)
 W ! D SEND^PSOREJP3(,,PA)
"RTN","PSOREJP1",224,0)
 Q
"RTN","PSOREJP1",225,0)
 ;
"RTN","PSOREJP1",226,0)
MP ; - Patient Medication Profile
"RTN","PSOREJP1",227,0)
 I $G(PSOBACK) D  Q
"RTN","PSOREJP1",228,0)
 . S VALMSG="Not available through Backdoor!",VALMBCK="R"
"RTN","PSOREJP1",229,0)
 N SITE,PATIENT
"RTN","PSOREJP1",230,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",231,0)
 S SITE=+$$RXSITE^PSOBPSUT(RX,FILL) S:$G(PSOSITE) SITE=PSOSITE
"RTN","PSOREJP1",232,0)
 S PATIENT=+$$GET1^DIQ(52,RX,2,"I")
"RTN","PSOREJP1",233,0)
 D LST^PSOPMP0(SITE,PATIENT) S VALMBCK="R"
"RTN","PSOREJP1",234,0)
 Q
"RTN","PSOREJP1",235,0)
 ;
"RTN","PSOREJP1",236,0)
EXIT ;
"RTN","PSOREJP1",237,0)
 K ^TMP("PSOREJP1",$J)
"RTN","PSOREJP1",238,0)
 Q
"RTN","PSOREJP1",239,0)
 ;
"RTN","PSOREJP1",240,0)
SETLN(TEXT,REV,UND,HIG) ; Sets a line to be displayed in the Body section
"RTN","PSOREJP1",241,0)
 N X
"RTN","PSOREJP1",242,0)
 S:$G(TEXT)="" $E(TEXT,80)=""
"RTN","PSOREJP1",243,0)
 S:$L(TEXT)>80 TEXT=$E(TEXT,1,80)
"RTN","PSOREJP1",244,0)
 S LINE=LINE+1,^TMP("PSOREJP1",$J,LINE,0)=$G(TEXT)
"RTN","PSOREJP1",245,0)
 ;
"RTN","PSOREJP1",246,0)
 I LINE>$G(LASTLN) D SAVE^VALM10(LINE) S LASTLN=LINE
"RTN","PSOREJP1",247,0)
 ;
"RTN","PSOREJP1",248,0)
 I $G(REV) D  Q
"RTN","PSOREJP1",249,0)
 . D CNTRL^VALM10(LINE,1,$L(TEXT),IORVON,IOINORM)
"RTN","PSOREJP1",250,0)
 . I $G(UND) D CNTRL^VALM10(LINE,$L(TEXT)+1,80,IOUON,IOINORM)
"RTN","PSOREJP1",251,0)
 I $G(UND) D CNTRL^VALM10(LINE,1,80,IOUON,IOINORM)
"RTN","PSOREJP1",252,0)
 I $G(HIG) D
"RTN","PSOREJP1",253,0)
 . D CNTRL^VALM10(LINE,HIG,80,IOINHI_$S($G(UND):IOUON,1:""),IOINORM)
"RTN","PSOREJP1",254,0)
 Q
"RTN","PSOREJP1",255,0)
HELP ;
"RTN","PSOREJP1",256,0)
 Q
"RTN","PSOREJP1",257,0)
 ;
"RTN","PSOREJP1",258,0)
CLOSED(RX,REJ,MSG) ; Returns whether the REJECT is RESOLVED or NOT
"RTN","PSOREJP1",259,0)
 I $$GET1^DIQ(52.25,REJ_","_RX,10,"I") D:$G(MSG)  Q 1
"RTN","PSOREJP1",260,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R" W $C(7)
"RTN","PSOREJP1",261,0)
 Q 0
"RTN","PSOREJP1",262,0)
 ;
"RTN","PSOREJP1",263,0)
REOPN(RX,REJ) ; Returns whether the REJECT was RE-OPENED or NOT
"RTN","PSOREJP1",264,0)
 Q $S($$GET1^DIQ(52.25,REJ_","_RX,23)="":0,1:1)
"RTN","PSOREJP1",265,0)
 ;
"RTN","PSOREJP1",266,0)
EXP(CODE) ; - Returns the explanation field (.02) for a reject code
"RTN","PSOREJP1",267,0)
 ;  Input:  (r) CODE - .01 field (Code) value from file 9002313.93
"RTN","PSOREJP1",268,0)
 ; Output: .02 field (Explanation) value from file 9002313.93
"RTN","PSOREJP1",269,0)
 N DIC,X,Y
"RTN","PSOREJP1",270,0)
 S DIC=9002313.93,DIC(0)="Z",X=CODE D ^DIC
"RTN","PSOREJP1",271,0)
 Q $P($G(Y(0)),"^",2)
"RTN","PSOREJP1",272,0)
 ;
"RTN","PSOREJP1",273,0)
OUT(RX) ; - Supported call by outside PROTOCOLs to act on specific REJECTs
"RTN","PSOREJP1",274,0)
 N I,RFL,DATA,REJ,PSOBACK,VALMCNT,RXN
"RTN","PSOREJP1",275,0)
 I '$D(^XUSEC("PSORPH",DUZ)) D  Q
"RTN","PSOREJP1",276,0)
 . S VALMSG="PSORPH key required to use the REJ action.",VALMBCK="R"
"RTN","PSOREJP1",277,0)
 I $G(PS)="REJECT" D
"RTN","PSOREJP1",278,0)
 . S VALMSG="REJ action is not available at this point.",VALMBCK="R"
"RTN","PSOREJP1",279,0)
 S PSOBACK=1
"RTN","PSOREJP1",280,0)
 S (RFL,I)=0 F I=1:1 Q:'$D(^PSRX(RX,1,I))  S RFL=I
"RTN","PSOREJP1",281,0)
 S X=$$FIND^PSOREJUT(RX,RFL,.DATA) S REJ=$O(DATA(""))
"RTN","PSOREJP1",282,0)
 I '$G(REJ) S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOREJP1",283,0)
 D EN(RX,REJ) S VALMBCK="R"
"RTN","PSOREJP1",284,0)
 Q
"RTN","PSOREJP1",285,0)
 ;
"RTN","PSOREJP1",286,0)
SMA ;Submit multiple actions
"RTN","PSOREJP1",287,0)
 N CLA,I,OVR,OVRSTR,PA,REJIEN,DUR,RSC,DURIEN,REQ,RSUB
"RTN","PSOREJP1",288,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",289,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",290,0)
 I PSOET S VALMSG="SMA not allowed for "_$$ELIGDISP^PSOREJP1(RX,FILL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP1",291,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",292,0)
 S DURIEN=$P($G(^PSRX(RX,"REJ",REJ,0)),U,11)
"RTN","PSOREJP1",293,0)
 D DURRESP^BPSNCPD3(DURIEN,.DUR) ; Reference to BPSNCPD3 supported by IA 4560
"RTN","PSOREJP1",294,0)
 ;
"RTN","PSOREJP1",295,0)
 ; Prompt for Prior Auth fields
"RTN","PSOREJP1",296,0)
 S PA=$$PA^PSOREJU2
"RTN","PSOREJP1",297,0)
 I PA="^" S VALMBCK="R" Q  ;User terminated or did not answer
"RTN","PSOREJP1",298,0)
 ;
"RTN","PSOREJP1",299,0)
 ; Prompt for submission clarification codes (up to three)
"RTN","PSOREJP1",300,0)
 W !
"RTN","PSOREJP1",301,0)
 S CLA=$$CLA^PSOREJU1
"RTN","PSOREJP1",302,0)
 I CLA="^" S VALMBCK="R" Q  ;User terminated or did not answer
"RTN","PSOREJP1",303,0)
 ;
"RTN","PSOREJP1",304,0)
 ; Check if DUR Overrides required - PSO*7*421
"RTN","PSOREJP1",305,0)
 S REQ=$$REQ I REQ="^" S VALMBCK="R" Q
"RTN","PSOREJP1",306,0)
 ;
"RTN","PSOREJP1",307,0)
 ; Prompt for DUR Overrides (up to 3) - option to delete default added - PSO*7*421
"RTN","PSOREJP1",308,0)
 S OVRSTR="",OVR=""
"RTN","PSOREJP1",309,0)
 I REQ S REJIEN=0 F RSUB=1:1:3 D  Q:OVR="^"!(OVR="")!(OVR="@")  S $P(OVRSTR,"~",RSUB)=OVR
"RTN","PSOREJP1",310,0)
 . I REJIEN]"" S REJIEN=$O(DUR(1,"DUR PPS",REJIEN))
"RTN","PSOREJP1",311,0)
 . S RSC="" I +REJIEN S RSC=$P($G(DUR(1,"DUR PPS",REJIEN,"REASON FOR SERVICE CODE"))," ",1)
"RTN","PSOREJP1",312,0)
 . S OVR=$$SMAOVR^PSOREJU1(RSC,RSUB)
"RTN","PSOREJP1",313,0)
 I OVR="^" S VALMBCK="R" Q  ;User exited or timed-out
"RTN","PSOREJP1",314,0)
 ;
"RTN","PSOREJP1",315,0)
 W !!,?6,"RECAP:"
"RTN","PSOREJP1",316,0)
 W !,?6,"Prior Authorization Type       : ",$P(PA,"^"),"  ",$$DSC^PSOREJU1(9002313.26,$P(PA,"^"),.02)
"RTN","PSOREJP1",317,0)
 W !,?6,"Prior Authorization Number     : ",$P(PA,"^",2)
"RTN","PSOREJP1",318,0)
 W !,?6,"Submission Clarification Code 1: ",$P(CLA,"~",1),"  ",$$DSC^PSOREJU1(9002313.25,$P(CLA,"~",1),.02)
"RTN","PSOREJP1",319,0)
 I $P(CLA,"~",2)]"" W !,?6,"Submission Clarification Code 2: ",$P(CLA,"~",2),"  ",$$DSC^PSOREJU1(9002313.25,$P(CLA,"~",2),.02)
"RTN","PSOREJP1",320,0)
 I $P(CLA,"~",3)]"" W !,?6,"Submission Clarification Code 3: ",$P(CLA,"~",3),"  ",$$DSC^PSOREJU1(9002313.25,$P(CLA,"~",3),.02)
"RTN","PSOREJP1",321,0)
 W !,?6,"Reason for Service Code 1      : ",$P($P(OVRSTR,"~",1),U,1),"  ",$$DSC^PSOREJU1(9002313.23,$P($P(OVRSTR,"~",1),U,1),1)
"RTN","PSOREJP1",322,0)
 W !,?6,"Professional Service Code 1    : ",$P($P(OVRSTR,"~",1),U,2),"  ",$$DSC^PSOREJU1(9002313.21,$P($P(OVRSTR,"~",1),U,2),1)
"RTN","PSOREJP1",323,0)
 W !,?6,"Result of Service Code 1       : ",$P($P(OVRSTR,"~",1),U,3),"  ",$$DSC^PSOREJU1(9002313.22,$P($P(OVRSTR,"~",1),U,3),1)
"RTN","PSOREJP1",324,0)
 I $P($P(OVRSTR,"~",2),U,1)]"" W !,?6,"Reason for Service Code 2      : ",$P($P(OVRSTR,"~",2),U,1),"  ",$$DSC^PSOREJU1(9002313.23,$P($P(OVRSTR,"~",2),U,1),1)
"RTN","PSOREJP1",325,0)
 I $P($P(OVRSTR,"~",2),U,2)]"" W !,?6,"Professional Service Code 2    : ",$P($P(OVRSTR,"~",2),U,2),"  ",$$DSC^PSOREJU1(9002313.21,$P($P(OVRSTR,"~",2),U,2),1)
"RTN","PSOREJP1",326,0)
 I $P($P(OVRSTR,"~",2),U,3)]"" W !,?6,"Result of Service Code 2       : ",$P($P(OVRSTR,"~",2),U,3),"  ",$$DSC^PSOREJU1(9002313.22,$P($P(OVRSTR,"~",2),U,3),1)
"RTN","PSOREJP1",327,0)
 I $P($P(OVRSTR,"~",3),U,1)]"" W !,?6,"Reason for Service Code 3      : ",$P($P(OVRSTR,"~",3),U,1),"  ",$$DSC^PSOREJU1(9002313.23,$P($P(OVRSTR,"~",3),U,1),1)
"RTN","PSOREJP1",328,0)
 I $P($P(OVRSTR,"~",3),U,2)]"" W !,?6,"Professional Service Code 3    : ",$P($P(OVRSTR,"~",3),U,2),"  ",$$DSC^PSOREJU1(9002313.21,$P($P(OVRSTR,"~",3),U,2),1)
"RTN","PSOREJP1",329,0)
 I $P($P(OVRSTR,"~",3),U,3)]"" W !,?6,"Result of Service Code 3       : ",$P($P(OVRSTR,"~",3),U,3),"  ",$$DSC^PSOREJU1(9002313.22,$P($P(OVRSTR,"~",3),U,3),1)
"RTN","PSOREJP1",330,0)
 W ! D SEND^PSOREJP3(OVRSTR,CLA,PA)
"RTN","PSOREJP1",331,0)
 Q
"RTN","PSOREJP1",332,0)
 ;
"RTN","PSOREJP1",333,0)
VRX ; View ePharmacy Prescription - invoked from the Reject Information screen
"RTN","PSOREJP1",334,0)
 N BPSVRX
"RTN","PSOREJP1",335,0)
 D FULL^VALM1
"RTN","PSOREJP1",336,0)
 S BPSVRX("RXIEN")=$G(RX)
"RTN","PSOREJP1",337,0)
 S BPSVRX("FILL#")=$G(FILL)
"RTN","PSOREJP1",338,0)
 D ^BPSVRX    ; DBIA #5723
"RTN","PSOREJP1",339,0)
 S VALMBCK="R"
"RTN","PSOREJP1",340,0)
 Q
"RTN","PSOREJP1",341,0)
 ;
"RTN","PSOREJP1",342,0)
VER ; View ePharmacy Prescription - invoked from the Rx view hidden action of Medication Profile
"RTN","PSOREJP1",343,0)
 N BPSVRX
"RTN","PSOREJP1",344,0)
 K ^TMP("BPSVRX-PSO VIEW RX",$J)
"RTN","PSOREJP1",345,0)
 D FULL^VALM1
"RTN","PSOREJP1",346,0)
 ;
"RTN","PSOREJP1",347,0)
 ; save the current PSO Rx display array and header
"RTN","PSOREJP1",348,0)
 M ^TMP("BPSVRX-PSO VIEW RX",$J,"PSOHDR")=^TMP("PSOHDR",$J)
"RTN","PSOREJP1",349,0)
 M ^TMP("BPSVRX-PSO VIEW RX",$J,"PSOAL")=^TMP("PSOAL",$J)
"RTN","PSOREJP1",350,0)
 ;
"RTN","PSOREJP1",351,0)
 S BPSVRX("RXIEN")=$G(RXN)    ; Rx ien ptr file 52
"RTN","PSOREJP1",352,0)
 D ^BPSVRX    ; DBIA #5723
"RTN","PSOREJP1",353,0)
 ;
"RTN","PSOREJP1",354,0)
 ; restore the PSO Rx display array and header upon return
"RTN","PSOREJP1",355,0)
 I '$D(^TMP("PSOHDR",$J)) M ^TMP("PSOHDR",$J)=^TMP("BPSVRX-PSO VIEW RX",$J,"PSOHDR")
"RTN","PSOREJP1",356,0)
 I '$D(^TMP("PSOAL",$J)) M ^TMP("PSOAL",$J)=^TMP("BPSVRX-PSO VIEW RX",$J,"PSOAL")
"RTN","PSOREJP1",357,0)
 ;
"RTN","PSOREJP1",358,0)
 S VALMBCK="R"
"RTN","PSOREJP1",359,0)
 K ^TMP("BPSVRX-PSO VIEW RX",$J)
"RTN","PSOREJP1",360,0)
 Q
"RTN","PSOREJP1",361,0)
 ;
"RTN","PSOREJP1",362,0)
REQ() ;Prompt if DUR Rejects are required
"RTN","PSOREJP1",363,0)
 N DIR,DTOUT,DTOUT,DIRUT,DIROUT,X,Y
"RTN","PSOREJP1",364,0)
 S DIR("?")="Enter No if Reason Codes are not required. Enter Yes to proceed and enter up to 3 sets of override Reason Codes. To delete default Reason Codes, enter ""@""."
"RTN","PSOREJP1",365,0)
 S DIR("A")="Enter DUR codes",DIR(0)="Y",DIR("B")="YES" W ! D ^DIR
"RTN","PSOREJP1",366,0)
 I $D(DIRUT)!$D(DIROUT) Q "^" ;User exited or timed-out
"RTN","PSOREJP1",367,0)
 Q Y
"RTN","PSOREJP2")
0^13^B181854051
"RTN","PSOREJP2",1,0)
PSOREJP2 ;BIRM/MFR - Third Party Rejects View/Process ;04/28/05
"RTN","PSOREJP2",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,247,260,287,289,358,385,403,421,427**;DEC 1997;Build 21
"RTN","PSOREJP2",3,0)
 ;Reference to ^PSSLOCK supported by IA #2789
"RTN","PSOREJP2",4,0)
 ;Reference to GETDAT^BPSBUTL supported by IA #4719
"RTN","PSOREJP2",5,0)
 ;Reference to ^PS(55 supported by IA #2228
"RTN","PSOREJP2",6,0)
 ;Reference to ^DIC(36 supported by ICR #6142
"RTN","PSOREJP2",7,0)
 ;
"RTN","PSOREJP2",8,0)
 N PSORJSRT,PSOPTFLT,PSODRFLT,PSORXFLT,PSOBYFLD,PSOSTFLT,DIR,DIRUT,DUOUT,DTOUT
"RTN","PSOREJP2",9,0)
 N PSOINFLT,PSODTRNG,PSOINGRP,PSOTRITG,PSOCVATG
"RTN","PSOREJP2",10,0)
 S PSORJASC=1,PSOINGRP=0,PSOTRITG=1,PSOCVATG=1
"RTN","PSOREJP2",11,0)
 ;
"RTN","PSOREJP2",12,0)
 ; - Division/Site selection
"RTN","PSOREJP2",13,0)
 D SEL^PSOREJU1("DIVISION","^PS(59,",.PSOREJST,$$GET1^DIQ(59,+$G(PSOSITE),.01)) I $G(PSOREJST)="^" G EXIT
"RTN","PSOREJP2",14,0)
 ;
"RTN","PSOREJP2",15,0)
 ; - Date range selection
"RTN","PSOREJP2",16,0)
 W ! S PSODTRNG=$$DTRNG("T-90","T") I PSODTRNG="^" G EXIT
"RTN","PSOREJP2",17,0)
 ;
"RTN","PSOREJP2",18,0)
SEL ; - Field Selection (Patient/Drug/Rx)
"RTN","PSOREJP2",19,0)
 S DIR(0)="S^P:PATIENT;D:DRUG;R:Rx;I:INSURANCE",DIR("B")="P"
"RTN","PSOREJP2",20,0)
 S DIR("A")="By (P)atient, (D)rug, (R)x or (I)nsurance" D ^DIR I $D(DIRUT) G EXIT
"RTN","PSOREJP2",21,0)
 S PSOBYFLD=Y,DIR("B")=""
"RTN","PSOREJP2",22,0)
 ;
"RTN","PSOREJP2",23,0)
 I PSOBYFLD="P" D  I $G(PSOPTFLT)="^" G SEL
"RTN","PSOREJP2",24,0)
 . S (PSODRFLT,PSORXFLT,PSOINFLT)="ALL",PSORJSRT="DR"
"RTN","PSOREJP2",25,0)
 . D SEL^PSOREJU1("PATIENT","^DPT(",.PSOPTFLT)
"RTN","PSOREJP2",26,0)
 ;
"RTN","PSOREJP2",27,0)
 I PSOBYFLD="D" D  I $G(PSODRFLT)="^" G SEL
"RTN","PSOREJP2",28,0)
 . S (PSOPTFLT,PSORXFLT,PSOINFLT)="ALL",PSORJSRT="PA"
"RTN","PSOREJP2",29,0)
 . D SEL^PSOREJU1("DRUG","^PSDRUG(",.PSODRFLT)
"RTN","PSOREJP2",30,0)
 ;
"RTN","PSOREJP2",31,0)
 I PSOBYFLD="R" D  I $D(DUOUT)!$D(DTOUT)!'$G(PSORXFLT) G SEL
"RTN","PSOREJP2",32,0)
 . S (PSOPTFLT,PSODRFLT,PSOINFLT)="ALL",PSORJSRT="PA"
"RTN","PSOREJP2",33,0)
 . N DIC,Y,X,OK K PSOSTFLT,PSORXFLT
"RTN","PSOREJP2",34,0)
 . S DIC=52,DIC(0)="QEZA",DIC("A")="PRESCRIPTION: "
"RTN","PSOREJP2",35,0)
 . F  W ! D ^DIC D  Q:$G(OK) 
"RTN","PSOREJP2",36,0)
 . . I $D(DUOUT)!$D(DTOUT)!(X="") S OK=1 Q
"RTN","PSOREJP2",37,0)
 . . I '$O(^PSRX(+Y,"REJ",0)) D  Q
"RTN","PSOREJP2",38,0)
 . . . W !?40,"Prescription does not have rejects!",$C(7)
"RTN","PSOREJP2",39,0)
 . . S PSORXFLT=+Y,OK=1
"RTN","PSOREJP2",40,0)
 ;
"RTN","PSOREJP2",41,0)
 ; Insurance Company Lookup - ICR 6142
"RTN","PSOREJP2",42,0)
 I PSOBYFLD="I" D  I $G(PSOINFLT)="^" G SEL
"RTN","PSOREJP2",43,0)
 . S (PSOPTFLT,PSODRFLT,PSORXFLT)="ALL",PSORJSRT="PA"
"RTN","PSOREJP2",44,0)
 . D SEL^PSOREJU1("INSURANCE","^DIC(36,",.PSOINFLT)
"RTN","PSOREJP2",45,0)
 ;
"RTN","PSOREJP2",46,0)
 ; - Status Selection (UNRESOLVED or RESOLVED)
"RTN","PSOREJP2",47,0)
 I $G(PSOSTFLT)="" D  I $D(DIRUT) G EXIT
"RTN","PSOREJP2",48,0)
 . S DIR(0)="S^U:UNRESOLVED;R:RESOLVED;B:BOTH",DIR("B")="B"
"RTN","PSOREJP2",49,0)
 . S DIR("A")="(U)NRESOLVED, (R)RESOLVED or (B)OTH REJECT statuses" D ^DIR
"RTN","PSOREJP2",50,0)
 . S PSOSTFLT=Y
"RTN","PSOREJP2",51,0)
 ;
"RTN","PSOREJP2",52,0)
 D LST^PSOREJP0("VP")
"RTN","PSOREJP2",53,0)
 ;
"RTN","PSOREJP2",54,0)
EXIT Q
"RTN","PSOREJP2",55,0)
 ;
"RTN","PSOREJP2",56,0)
CLO ; - Ignore a REJECT hidden action
"RTN","PSOREJP2",57,0)
 N PSOTRIC,X,PSOET
"RTN","PSOREJP2",58,0)
 ;
"RTN","PSOREJP2",59,0)
 I '$D(FILL) S FILL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJP2",60,0)
 S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,FILL,PSOTRIC)
"RTN","PSOREJP2",61,0)
 ;
"RTN","PSOREJP2",62,0)
 ;reference to ^XUSEC( supported by IA 10076
"RTN","PSOREJP2",63,0)
 ;bld, PSO*7*358
"RTN","PSOREJP2",64,0)
 I PSOTRIC,'$D(^XUSEC("PSO TRICARE/CHAMPVA",DUZ)) S VALMSG="Action Requires <PSO TRICARE/CHAMPVA> security key",VALMBCK="R" Q
"RTN","PSOREJP2",65,0)
 ;if TRICARE or CHAMPVA and user has security key, prompt to continue or not
"RTN","PSOREJP2",66,0)
 ;
"RTN","PSOREJP2",67,0)
 ;
"RTN","PSOREJP2",68,0)
 I PSOTRIC,'$$CONT^PSOREJU1() S VALMBCK="R" Q
"RTN","PSOREJP2",69,0)
 ;
"RTN","PSOREJP2",70,0)
 I $$CLOSED^PSOREJP1(RX,REJ) D  Q
"RTN","PSOREJP2",71,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R"
"RTN","PSOREJP2",72,0)
 N DIR,COM
"RTN","PSOREJP2",73,0)
 D FULL^VALM1
"RTN","PSOREJP2",74,0)
 I '$$SIG^PSOREJU1() S VALMBCK="R" Q
"RTN","PSOREJP2",75,0)
 W !
"RTN","PSOREJP2",76,0)
 S:PSOTRIC COM=$$TCOM^PSOREJP3(RX,FILL) S:'PSOTRIC COM=$$COM^PSOREJU1()
"RTN","PSOREJP2",77,0)
 I COM="^" S VALMBCK="R" Q
"RTN","PSOREJP2",78,0)
 W !
"RTN","PSOREJP2",79,0)
 S DIR(0)="Y",DIR("A")="     Confirm? ",DIR("B")="NO"
"RTN","PSOREJP2",80,0)
 S DIR("A",1)="     When you confirm this REJECT will be marked RESOLVED."
"RTN","PSOREJP2",81,0)
 S DIR("A",2)=" "
"RTN","PSOREJP2",82,0)
 D ^DIR I $G(Y)=0!$D(DIRUT) S VALMBCK="R" Q
"RTN","PSOREJP2",83,0)
 W ?40,"[Closing..." D CLOSE^PSOREJUT(RX,FILL,REJ,DUZ,6,COM,"","","","","",1) W "OK]",!,$C(7) H 1
"RTN","PSOREJP2",84,0)
 I $D(PSOSTFLT),PSOSTFLT'="B" S CHANGE=1
"RTN","PSOREJP2",85,0)
 ;
"RTN","PSOREJP2",86,0)
 I $$PTLBL(RX,FILL) D PRINT^PSOREJP3(RX,FILL)
"RTN","PSOREJP2",87,0)
 I PSOTRIC D
"RTN","PSOREJP2",88,0)
 .S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP2",89,0)
 .D AUDIT^PSOTRI(RX,FILL,,COM,$S(PSOET:"N",1:"R"),$S(PSOTRIC=1:"T",PSOTRIC=2:"C",1:""))
"RTN","PSOREJP2",90,0)
 ;
"RTN","PSOREJP2",91,0)
 Q
"RTN","PSOREJP2",92,0)
 ;
"RTN","PSOREJP2",93,0)
OPN ; - Re-open a Closed/Resolved Reject
"RTN","PSOREJP2",94,0)
 I '$$CLOSED^PSOREJP1(RX,REJ) D  Q
"RTN","PSOREJP2",95,0)
 . S VALMSG="This Reject is NOT marked resolved!",VALMBCK="R"
"RTN","PSOREJP2",96,0)
 ;cnf, PSO*7*358, check for discontinued and not released
"RTN","PSOREJP2",97,0)
 ;  12 - DISCONTINUED
"RTN","PSOREJP2",98,0)
 ;  14 - DISCONTINUED BY PROVIDER
"RTN","PSOREJP2",99,0)
 ;  15 - DISCONTINUED (EDIT)
"RTN","PSOREJP2",100,0)
 N DCSTAT,PSOREL
"RTN","PSOREJP2",101,0)
 S DCSTAT=$$GET1^DIQ(52,RX,100,"I")
"RTN","PSOREJP2",102,0)
 S PSOREL=0 D
"RTN","PSOREJP2",103,0)
 . I 'FILL S PSOREL=+$$GET1^DIQ(52,RX,31,"I")
"RTN","PSOREJP2",104,0)
 . I FILL S PSOREL=+$$GET1^DIQ(52.1,FILL_","_RX,17,"I")
"RTN","PSOREJP2",105,0)
 I 'PSOREL,"/12/14/15/"[("/"_DCSTAT_"/") S VALMSG="Discontinued Rx has not been released.",VALMBCK="R" Q
"RTN","PSOREJP2",106,0)
 N DIR,COM,REJDATA,NEWDATA,X,REOPEN
"RTN","PSOREJP2",107,0)
 D FULL^VALM1
"RTN","PSOREJP2",108,0)
 I '$$SIG^PSOREJU1() S VALMBCK="R" Q
"RTN","PSOREJP2",109,0)
 W !
"RTN","PSOREJP2",110,0)
 S DIR(0)="Y",DIR("A")="     Confirm",DIR("B")="NO"
"RTN","PSOREJP2",111,0)
 S DIR("A",1)="     When you confirm this REJECT will be marked UNRESOLVED."
"RTN","PSOREJP2",112,0)
 S DIR("A",2)=" "
"RTN","PSOREJP2",113,0)
 D ^DIR I $G(Y)=0!$D(DIRUT) S VALMBCK="R" Q
"RTN","PSOREJP2",114,0)
 ;
"RTN","PSOREJP2",115,0)
 W ?40,"[Re-opening..."
"RTN","PSOREJP2",116,0)
 K REJDATA D GET^PSOREJU2(RX,FILL,.REJDATA,REJ,1) D SETOPN^PSOREJU2(RX,REJ)
"RTN","PSOREJP2",117,0)
 K NEWDATA M NEWDATA=REJDATA(REJ) S NEWDATA("PHARMACIST")=DUZ
"RTN","PSOREJP2",118,0)
 S REOPEN=1 D SAVE^PSOREJUT(RX,FILL,.NEWDATA,REOPEN)
"RTN","PSOREJP2",119,0)
 I $G(NEWDATA("REJECT IEN")),$D(REJDATA(REJ,"COMMENTS")) D
"RTN","PSOREJP2",120,0)
 . S COM=0 F  S COM=$O(REJDATA(REJ,"COMMENTS",COM)) Q:'COM  D
"RTN","PSOREJP2",121,0)
 . . S X(1)=REJDATA(REJ,"COMMENTS",COM,"COMMENTS")
"RTN","PSOREJP2",122,0)
 . . S X(2)=REJDATA(REJ,"COMMENTS",COM,"DATE/TIME")
"RTN","PSOREJP2",123,0)
 . . S X(3)=REJDATA(REJ,"COMMENTS",COM,"USER")
"RTN","PSOREJP2",124,0)
 . . D SAVECOM^PSOREJP3(RX,NEWDATA("REJECT IEN"),X(1),X(2),X(3))
"RTN","PSOREJP2",125,0)
 D RETRXF^PSOREJU2(RX,FILL,0)
"RTN","PSOREJP2",126,0)
 W "OK]",!,$C(7) H 1
"RTN","PSOREJP2",127,0)
 S CHANGE=1
"RTN","PSOREJP2",128,0)
 Q
"RTN","PSOREJP2",129,0)
 ;
"RTN","PSOREJP2",130,0)
SDC ; - Suspense Date Calculation
"RTN","PSOREJP2",131,0)
 D CHG(1)
"RTN","PSOREJP2",132,0)
 Q
"RTN","PSOREJP2",133,0)
 ;
"RTN","PSOREJP2",134,0)
CSD ;CSD - Change Suspense Date action entry point
"RTN","PSOREJP2",135,0)
 D CHG(0)
"RTN","PSOREJP2",136,0)
 Q
"RTN","PSOREJP2",137,0)
 ;
"RTN","PSOREJP2",138,0)
CHG(SDC) ; - Change Suspense Date action
"RTN","PSOREJP2",139,0)
 ;Local:
"RTN","PSOREJP2",140,0)
 ;  SDC - indicates if the suspense date is being manually changed or calculated. 
"RTN","PSOREJP2",141,0)
 ;  RX  - RX IEN
"RTN","PSOREJP2",142,0)
 ;  REJ - Reject indicator
"RTN","PSOREJP2",143,0)
 ;
"RTN","PSOREJP2",144,0)
 I '$G(SDC) S SDC=0
"RTN","PSOREJP2",145,0)
 I $$CLOSED^PSOREJP1(RX,REJ) D  Q
"RTN","PSOREJP2",146,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R" W $C(7)
"RTN","PSOREJP2",147,0)
 ;
"RTN","PSOREJP2",148,0)
 N SUSDT,PSOMSG,Y,SUSRX,%DT,DA,DIE,DR,ISSDT,EXPDT,PSOMSG,CUTDT,FILDT,RFL,COB
"RTN","PSOREJP2",149,0)
 ;
"RTN","PSOREJP2",150,0)
 S RFL=+$$GET1^DIQ(52.25,REJ_","_RX,5),SUSDT=$$RXSUDT^PSOBPSUT(RX,RFL)
"RTN","PSOREJP2",151,0)
 I RFL>0 S FILDT=$$GET1^DIQ(52.1,RFL_","_RX,.01,"I")
"RTN","PSOREJP2",152,0)
 E  S FILDT=$$GET1^DIQ(52,RX,22,"I")
"RTN","PSOREJP2",153,0)
 I SUSDT="" S VALMSG="Prescription is not suspended!",VALMBCK="R" W $C(7) Q
"RTN","PSOREJP2",154,0)
 I $$RXRLDT^PSOBPSUT(RX,RFL) S VALMSG="Prescription has been released already!",VALMBCK="R" W $C(7) Q
"RTN","PSOREJP2",155,0)
 ;cnf, PSO*7*358, add PSOET logic for TRICARE/CHAMPVA non-billable
"RTN","PSOREJP2",156,0)
 S PSOET=$$PSOET^PSOREJP3(RX,RFL)
"RTN","PSOREJP2",157,0)
 I PSOET S VALMSG=$S(SDC=1:"SDC",1:"CSD")_" not allowed for "_$$ELIGDISP^PSOREJP1(RX,RFL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP2",158,0)
 ;
"RTN","PSOREJP2",159,0)
 D PSOL^PSSLOCK(RX) I '$G(PSOMSG) S VALMSG=$P(PSOMSG,"^",2),VALMBCK="R" W $C(7) Q
"RTN","PSOREJP2",160,0)
 ;
"RTN","PSOREJP2",161,0)
 S ISSDT=$$GET1^DIQ(52,RX,1,"I"),EXPDT=$$GET1^DIQ(52,RX,26,"I")
"RTN","PSOREJP2",162,0)
 S SUSRX=$O(^PS(52.5,"B",RX,0))
"RTN","PSOREJP2",163,0)
 ;
"RTN","PSOREJP2",164,0)
 D FULL^VALM1
"RTN","PSOREJP2",165,0)
 I SDC D  I SUSDT=0 D PSOUL^PSSLOCK(RX) S VALMBCK="R" Q
"RTN","PSOREJP2",166,0)
 . S COB=$$GET1^DIQ(52.25,REJ_","_RX,27,"I")
"RTN","PSOREJP2",167,0)
 . I 'COB S COB=1
"RTN","PSOREJP2",168,0)
 . S SUSDT=$$CALCSD(RX,RFL,COB)
"RTN","PSOREJP2",169,0)
 ;
"RTN","PSOREJP2",170,0)
SUDT ; Asks for the new Suspense Date
"RTN","PSOREJP2",171,0)
 N X1,X2
"RTN","PSOREJP2",172,0)
 S X1=FILDT,X2=89 D C^%DTC S CUTDT=X
"RTN","PSOREJP2",173,0)
 S %DT("B")=$$FMTE^XLFDT(SUSDT),%DT="EA",%DT("A")=$S(SDC:"NEW ",1:"")_"SUSPENSE DATE: "
"RTN","PSOREJP2",174,0)
 W ! D ^%DT I Y<0!($D(DTOUT)) D PSOUL^PSSLOCK(RX) S VALMBCK="R" I (SDC) W !,"ACTION NOT TAKEN!" Q
"RTN","PSOREJP2",175,0)
 I Y<ISSDT D  G SUDT
"RTN","PSOREJP2",176,0)
 . W !!?5,"Suspense Date cannot be before Issue Date: ",$$FMTE^XLFDT(ISSDT),".",$C(7)
"RTN","PSOREJP2",177,0)
 I Y>EXPDT D  G SUDT
"RTN","PSOREJP2",178,0)
 . W !!?5,"Suspense Date cannot be after Expiration Date: ",$$FMTE^XLFDT(EXPDT),".",$C(7)
"RTN","PSOREJP2",179,0)
 I Y>CUTDT D  G SUDT
"RTN","PSOREJP2",180,0)
 . W !!?5,"Suspense Date cannot be after fill date plus 90 days: "_$$FMTE^XLFDT(CUTDT),".",$C(7)
"RTN","PSOREJP2",181,0)
 S SUSDT=Y
"RTN","PSOREJP2",182,0)
 ;
"RTN","PSOREJP2",183,0)
 N DIR,DIRUT W !
"RTN","PSOREJP2",184,0)
 S DIR("A",1)="     When you confirm, this REJECT will be marked resolved. A"
"RTN","PSOREJP2",185,0)
 S DIR("A",2)="     new claim will be re-submitted to the 3rd party payer"
"RTN","PSOREJP2",186,0)
 I $$GET1^DIQ(52.5,SUSRX,3)="" D
"RTN","PSOREJP2",187,0)
 . I SUSDT>DT D
"RTN","PSOREJP2",188,0)
 . . S DIR("A",3)="     when the prescription label for this fill is printed"
"RTN","PSOREJP2",189,0)
 . . S DIR("A",4)="     from suspense on "_$$FMTE^XLFDT(SUSDT)_"."
"RTN","PSOREJP2",190,0)
 . . S DIR("A",5)=" "
"RTN","PSOREJP2",191,0)
 . . S DIR("A",6)="     Note: THE LABEL FOR THIS PRESCRIPTION FILL WILL NOT BE"
"RTN","PSOREJP2",192,0)
 . . S DIR("A",7)="           PRINTED LOCAL FROM SUSPENSE BEFORE "_$$FMTE^XLFDT(SUSDT)_"."
"RTN","PSOREJP2",193,0)
 . E  D
"RTN","PSOREJP2",194,0)
 . . S DIR("A",3)="     the next time local labels are printed from suspense."
"RTN","PSOREJP2",195,0)
 E  D
"RTN","PSOREJP2",196,0)
 . I SUSDT>DT D
"RTN","PSOREJP2",197,0)
 . . S DIR("A",3)="     when the prescription is transmitted to CMOP on "
"RTN","PSOREJP2",198,0)
 . . S DIR("A",4)="     "_$$FMTE^XLFDT(SUSDT)_"."
"RTN","PSOREJP2",199,0)
 . . S DIR("A",5)=" "
"RTN","PSOREJP2",200,0)
 . . S DIR("A",6)="     Note: THIS PRESCRIPTION FILL WILL NOT BE TRANSMITTED TO"
"RTN","PSOREJP2",201,0)
 . . S DIR("A",7)="           CMOP BEFORE "_$$FMTE^XLFDT(SUSDT)_"."
"RTN","PSOREJP2",202,0)
 . E  D
"RTN","PSOREJP2",203,0)
 . . S DIR("A",3)="     when this prescription fill is transmitted to CMOP on"
"RTN","PSOREJP2",204,0)
 . . S DIR("A",4)="     the next CMOP transmission."
"RTN","PSOREJP2",205,0)
    ;
"RTN","PSOREJP2",206,0)
 S DIR("A",$O(DIR("A",""),-1)+1)=" "
"RTN","PSOREJP2",207,0)
 S DIR(0)="Y",DIR("A")="     Confirm? ",DIR("B")="YES"
"RTN","PSOREJP2",208,0)
 D ^DIR I $G(Y)=0!$D(DIRUT) S VALMBCK="R" D PSOUL^PSSLOCK(RX) Q
"RTN","PSOREJP2",209,0)
 ;
"RTN","PSOREJP2",210,0)
 ; - Suspense/Fill Date updates
"RTN","PSOREJP2",211,0)
 I SUSDT'=$$RXSUDT^PSOBPSUT(RX,RFL) D
"RTN","PSOREJP2",212,0)
 . N DA,DIE,DR,PSOX,SFN,INDT,DEAD
"RTN","PSOREJP2",213,0)
 . S DA=SUSRX,DIE="^PS(52.5,",DR=".02///"_SUSDT D ^DIE
"RTN","PSOREJP2",214,0)
 . S SFN=SUSRX,DEAD=0,INDT=SUSDT D CHANGE^PSOSUCH1(RX,RFL)
"RTN","PSOREJP2",215,0)
 ;
"RTN","PSOREJP2",216,0)
 ; - Flagging the prescription to be re-submitted to ECME on the next CMOP/Print from Suspense
"RTN","PSOREJP2",217,0)
 D RETRXF^PSOREJU2(RX,RFL,1)
"RTN","PSOREJP2",218,0)
 W ?40,"[Closing..."
"RTN","PSOREJP2",219,0)
 D CLOSE^PSOREJUT(RX,RFL,REJ,DUZ,8,"Fill Date changed to "_$$FMTE^XLFDT(SUSDT)_". A new claim will be re-submitted on this date.")
"RTN","PSOREJP2",220,0)
 W "OK]",!,$C(7) H 1 I $D(PSOSTFLT),PSOSTFLT'="B" S CHANGE=1
"RTN","PSOREJP2",221,0)
 D PSOUL^PSSLOCK(RX)
"RTN","PSOREJP2",222,0)
 Q
"RTN","PSOREJP2",223,0)
 ;
"RTN","PSOREJP2",224,0)
PTLBL(RX,RFL) ; Returns whether the user should be prompted for 'Print Label?' or not
"RTN","PSOREJP2",225,0)
 N PTLBL,CMP,LBL,REPRINT
"RTN","PSOREJP2",226,0)
 N PSOTRIC S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,.PSOTRIC)
"RTN","PSOREJP2",227,0)
 I $$FIND^PSOREJUT(RX,RFL) Q 0       ; Has OPEN/UNRESOLVED 3rd pary payer reject
"RTN","PSOREJP2",228,0)
 I $$GET1^DIQ(52,RX,100,"I") Q 0     ; Rx status not ACTIVE
"RTN","PSOREJP2",229,0)
 I $$RXRLDT^PSOBPSUT(RX,RFL),'PSOTRIC Q 0     ; Rx Released
"RTN","PSOREJP2",230,0)
 ; - CMOP Rx fill?
"RTN","PSOREJP2",231,0)
 S PTLBL=1,CMP=0
"RTN","PSOREJP2",232,0)
 F  S CMP=$O(^PSRX(RX,4,CMP)) Q:'CMP  D  Q:'PTLBL
"RTN","PSOREJP2",233,0)
 . I +$$GET1^DIQ(52.01,CMP_","_RX,2,"I")=RFL S PTLBL=0
"RTN","PSOREJP2",234,0)
 I 'PTLBL Q 0
"RTN","PSOREJP2",235,0)
 ; - Label already printed for Rx fill?
"RTN","PSOREJP2",236,0)
 S LBL=0
"RTN","PSOREJP2",237,0)
 F  S LBL=$O(^PSRX(RX,"L",LBL)) Q:'LBL  D  Q:'PTLBL
"RTN","PSOREJP2",238,0)
 . I +$$GET1^DIQ(52.032,LBL_","_RX,1,"I")'=RFL Q
"RTN","PSOREJP2",239,0)
 . I $G(PSOTRIC)&($$RXRLDT^PSOBPSUT(RX,RFL)) S REPRINT=1 Q
"RTN","PSOREJP2",240,0)
 . I $$GET1^DIQ(52.032,LBL_","_RX,4,"I") Q
"RTN","PSOREJP2",241,0)
 . I $$GET1^DIQ(52.032,LBL_","_RX,2)["INTERACTION" Q
"RTN","PSOREJP2",242,0)
 . S PTLBL=0
"RTN","PSOREJP2",243,0)
 ;
"RTN","PSOREJP2",244,0)
 I PTLBL D
"RTN","PSOREJP2",245,0)
 . N DIR,DIRUT,Y
"RTN","PSOREJP2",246,0)
 . W ! S DIR(0)="Y",DIR("A")=$S('$G(REPRINT):"Print Label",1:"Reprint Label"),DIR("B")="YES"
"RTN","PSOREJP2",247,0)
 . D ^DIR I $G(Y)=0!$D(DIRUT) S PTLBL=0 Q
"RTN","PSOREJP2",248,0)
 ;
"RTN","PSOREJP2",249,0)
 Q PTLBL
"RTN","PSOREJP2",250,0)
 ;
"RTN","PSOREJP2",251,0)
DTRNG(BGN,END) ; Date Range Selection
"RTN","PSOREJP2",252,0)
 ;Input: (o) BGN - Default Begin Date 
"RTN","PSOREJP2",253,0)
 ;       (o) END - Default End Date 
"RTN","PSOREJP2",254,0)
 ;
"RTN","PSOREJP2",255,0)
 N %DT,DTOUT,DUOUT,DTRNG,X,Y
"RTN","PSOREJP2",256,0)
 S DTRNG=""
"RTN","PSOREJP2",257,0)
 S %DT="AEST",%DT("A")="BEGIN REJECT DATE: ",%DT("B")=$G(BGN) K:$G(BGN)="" %DT("B") D ^%DT
"RTN","PSOREJP2",258,0)
 I $G(DUOUT)!$G(DTOUT)!($G(Y)=-1) Q "^"
"RTN","PSOREJP2",259,0)
 S $P(DTRNG,U)=Y
"RTN","PSOREJP2",260,0)
 ;
"RTN","PSOREJP2",261,0)
 W ! K %DT
"RTN","PSOREJP2",262,0)
 S %DT="AEST",%DT("A")="END REJECT DATE: ",%DT("B")=$G(END),%DT(0)=Y K:$G(END)="" %DT("B") D ^%DT
"RTN","PSOREJP2",263,0)
 I $G(DUOUT)!$G(DTOUT)!($G(Y)=-1) Q "^"
"RTN","PSOREJP2",264,0)
 ;
"RTN","PSOREJP2",265,0)
 ;Define Entry
"RTN","PSOREJP2",266,0)
 S $P(DTRNG,U,2)=Y
"RTN","PSOREJP2",267,0)
 ;
"RTN","PSOREJP2",268,0)
 Q DTRNG
"RTN","PSOREJP2",269,0)
 ;
"RTN","PSOREJP2",270,0)
CALCSD(RX,FIL,COB) ;
"RTN","PSOREJP2",271,0)
 ; CALCSD - Prompt the user for Last Date of Service, Last Days Supply and
"RTN","PSOREJP2",272,0)
 ;   then calculate the suspense date based on these input.
"RTN","PSOREJP2",273,0)
 ; Input
"RTN","PSOREJP2",274,0)
 ;   RX - Prescription IEN
"RTN","PSOREJP2",275,0)
 ;   FIL - Fill Number
"RTN","PSOREJP2",276,0)
 ;   COB - Coordination of Benefits
"RTN","PSOREJP2",277,0)
 ; Return
"RTN","PSOREJP2",278,0)
 ;   The calculated suspense date  
"RTN","PSOREJP2",279,0)
 ;
"RTN","PSOREJP2",280,0)
 N DIR,X,Y,DUOUT,DTOUT,DIRUT,DIROUT,LDOS,LDSUP,LDS
"RTN","PSOREJP2",281,0)
 I '$G(RX) Q 0
"RTN","PSOREJP2",282,0)
 I $G(FIL)="" Q 0
"RTN","PSOREJP2",283,0)
 I '$G(COB) S COB=1
"RTN","PSOREJP2",284,0)
 ;
"RTN","PSOREJP2",285,0)
 D PREVRX(RX,FIL,COB,.LDOS,.LDS,1)   ; get the previous Rx last date of service and last days supply
"RTN","PSOREJP2",286,0)
 ; Added a parameter at end (1) to identfy that this is not a suspense related call
"RTN","PSOREJP2",287,0)
 ; Prompt for Last DOS
"RTN","PSOREJP2",288,0)
 S DIR(0)="D",DIR("A")="LAST DATE OF SERVICE"
"RTN","PSOREJP2",289,0)
 I LDOS S DIR("B")=$$FMTE^XLFDT($G(LDOS))
"RTN","PSOREJP2",290,0)
 D ^DIR
"RTN","PSOREJP2",291,0)
 I $D(DIRUT) W !,"ACTION NOT TAKEN!" Q 0
"RTN","PSOREJP2",292,0)
 S LDOS=Y W "  ("_$$FMTE^XLFDT($G(LDOS))_")"
"RTN","PSOREJP2",293,0)
 ;
"RTN","PSOREJP2",294,0)
 ; Prompt for Last Days Supply
"RTN","PSOREJP2",295,0)
 S LDSUP=LDS
"RTN","PSOREJP2",296,0)
 K DIR
"RTN","PSOREJP2",297,0)
 S DIR(0)="N",DIR("A")="LAST DAYS SUPPLY"
"RTN","PSOREJP2",298,0)
 I LDSUP]"" S DIR("B")=+LDSUP
"RTN","PSOREJP2",299,0)
 D ^DIR
"RTN","PSOREJP2",300,0)
 I $D(DIRUT) W !,"ACTION NOT TAKEN!" Q 0
"RTN","PSOREJP2",301,0)
 ;
"RTN","PSOREJP2",302,0)
 ; Calculate the suspense date to be Last DOS plus 3/4 of the Last Days Supply
"RTN","PSOREJP2",303,0)
 ; Fractions are rounded up
"RTN","PSOREJP2",304,0)
 S LDSUP=Y*.75
"RTN","PSOREJP2",305,0)
 S:LDSUP["." LDSUP=(LDSUP+1)\1
"RTN","PSOREJP2",306,0)
 Q $$FMADD^XLFDT(LDOS,LDSUP)
"RTN","PSOREJP2",307,0)
 ;
"RTN","PSOREJP2",308,0)
PREVRX(RX,RFL,COB,LDOS,LDAYS,NONSUS) ; Gather last date of service and last days supply from previous rx
"RTN","PSOREJP2",309,0)
 ;    input:  RX  - Current RX
"RTN","PSOREJP2",310,0)
 ;            RFL - Refill
"RTN","PSOREJP2",311,0)
 ;            COB - Coordination of benefits
"RTN","PSOREJP2",312,0)
 ;            NONSUS - Not suspense processing
"RTN","PSOREJP2",313,0)
 ;   output:  LDOS - (pass by reference). Last date of service in fileman format, or ""
"RTN","PSOREJP2",314,0)
 ;            LDAYS - (pass by reference). Last days supply in numeric format, or ""
"RTN","PSOREJP2",315,0)
 ;
"RTN","PSOREJP2",316,0)
 S (LDOS,LDAYS)=""
"RTN","PSOREJP2",317,0)
 I '$G(RX) G PREVRXQ
"RTN","PSOREJP2",318,0)
 I $G(RFL)="" G PREVRXQ
"RTN","PSOREJP2",319,0)
 I '$G(COB) S COB=1
"RTN","PSOREJP2",320,0)
 S NONSUS=+$G(NONSUS) ; Non-suspense processing flag
"RTN","PSOREJP2",321,0)
 ;
"RTN","PSOREJP2",322,0)
 I RFL=0 D
"RTN","PSOREJP2",323,0)
 . N X,Y
"RTN","PSOREJP2",324,0)
 . I NONSUS D
"RTN","PSOREJP2",325,0)
 . . S X=$$LAST120(RX,COB)   ; other Rx 120 day time window
"RTN","PSOREJP2",326,0)
 . . S LDOS=$P(X,U,1)        ; last date of service (older rx)
"RTN","PSOREJP2",327,0)
 . . S LDAYS=$P(X,U,2)       ; last days supply (older rx)
"RTN","PSOREJP2",328,0)
 . . Q
"RTN","PSOREJP2",329,0)
 . S Y=$$LASTRN(RX,COB)    ; check for a renewed prescription
"RTN","PSOREJP2",330,0)
 . I $P(Y,U,1)'>LDOS Q     ; if DOS from old Rx is earlier than LDOS, then quit
"RTN","PSOREJP2",331,0)
 . S LDOS=$P(Y,U,1)        ; last date of service (renewal)
"RTN","PSOREJP2",332,0)
 . S LDAYS=$P(Y,U,2)       ; last day supply (renewal)
"RTN","PSOREJP2",333,0)
 . Q
"RTN","PSOREJP2",334,0)
 ;
"RTN","PSOREJP2",335,0)
 ; refill - same RX. Get previous fill information
"RTN","PSOREJP2",336,0)
 I RFL>0 D
"RTN","PSOREJP2",337,0)
 . N FL
"RTN","PSOREJP2",338,0)
 . F FL=(RFL-1):-1:0 D  Q:LDOS           ; start with the previous fill (RFL-1)
"RTN","PSOREJP2",339,0)
 .. I $$STATUS^PSOBPSUT(RX,FL)="" Q      ; no ECME activity - skip
"RTN","PSOREJP2",340,0)
 .. I $$FIND^PSOREJUT(RX,FL,,,1) Q       ; unresolved reject on worklist - skip
"RTN","PSOREJP2",341,0)
 .. D GETDAT^BPSBUTL(RX,FL,COB,.LDOS,.LDAYS)    ; DBIA 4719
"RTN","PSOREJP2",342,0)
 .. Q
"RTN","PSOREJP2",343,0)
 . Q
"RTN","PSOREJP2",344,0)
 ;
"RTN","PSOREJP2",345,0)
PREVRXQ ;
"RTN","PSOREJP2",346,0)
 Q
"RTN","PSOREJP2",347,0)
 ;
"RTN","PSOREJP2",348,0)
LAST120(RX,COB) ;new tag PSO*7*421, cnf
"RTN","PSOREJP2",349,0)
 ; For the original fill, get the default DOS/Days Supply by getting most recent DOS from
"RTN","PSOREJP2",350,0)
 ;   the other RXs within a time window for the same patient and drug and dosage
"RTN","PSOREJP2",351,0)
 ;   Time window - Prescription has an expiration date that is in the future or within the last 120 days
"RTN","PSOREJP2",352,0)
 ; Reference to ^PS(55 supported by IA #2228
"RTN","PSOREJP2",353,0)
 ; Input
"RTN","PSOREJP2",354,0)
 ;   RX - Prescription IEN
"RTN","PSOREJP2",355,0)
 ;  COB - coordination of benefits indicator (defaults to 1 if not passed)
"RTN","PSOREJP2",356,0)
 ; Output
"RTN","PSOREJP2",357,0)
 ;   Last Date of Service ^ Last Days Supply
"RTN","PSOREJP2",358,0)
 ;
"RTN","PSOREJP2",359,0)
 N LDOS,LDS,PAT,DRUG,EXPDT,RX1,DRUG1,FL,X1,X2,RX0,QTY,DSUP,DOSAGE,QTY1,DSUP1,DOSAGE1
"RTN","PSOREJP2",360,0)
 I '$G(COB) S COB=1
"RTN","PSOREJP2",361,0)
 S LDOS="",LDS=""
"RTN","PSOREJP2",362,0)
 S RX0=$G(^PSRX(RX,0))  ; main 0 node
"RTN","PSOREJP2",363,0)
 S PAT=$P(RX0,U,2),DRUG=$P(RX0,U,6),QTY=+$P(RX0,U,7),DSUP=+$P(RX0,U,8),DOSAGE=""
"RTN","PSOREJP2",364,0)
 I 'PAT!'DRUG Q LDOS_U_LDS
"RTN","PSOREJP2",365,0)
 I QTY,DSUP S DOSAGE=QTY/DSUP    ; ratio of Qty to Days supply
"RTN","PSOREJP2",366,0)
 S EXPDT=$$FMADD^XLFDT(DT,-121)
"RTN","PSOREJP2",367,0)
 F  S EXPDT=$O(^PS(55,PAT,"P","A",EXPDT)) Q:'EXPDT  D
"RTN","PSOREJP2",368,0)
 . S RX1="" F  S RX1=$O(^PS(55,PAT,"P","A",EXPDT,RX1)) Q:'RX1  I RX'=RX1 D
"RTN","PSOREJP2",369,0)
 .. S DRUG1=$P($G(^PSRX(+RX1,0)),U,6)
"RTN","PSOREJP2",370,0)
 .. I DRUG'=DRUG1 Q     ; not the same drug
"RTN","PSOREJP2",371,0)
 .. S FL=$$LSTRFL^PSOBPSU1(RX1),X1="",X2=""
"RTN","PSOREJP2",372,0)
 .. S QTY1=$S(FL=0:+$P($G(^PSRX(RX1,0)),U,7),1:+$P($G(^PSRX(RX1,1,FL,0)),U,4))    ; Quantity of other Rx
"RTN","PSOREJP2",373,0)
 .. S DSUP1=$S(FL=0:+$P($G(^PSRX(RX1,0)),U,8),1:+$P($G(^PSRX(RX1,1,FL,0)),U,10))  ; Days supply of other Rx
"RTN","PSOREJP2",374,0)
 .. S DOSAGE1=""
"RTN","PSOREJP2",375,0)
 .. I QTY1,DSUP1 S DOSAGE1=QTY1/DSUP1     ; ratio of Qty to Days Supply for other Rx
"RTN","PSOREJP2",376,0)
 .. I DOSAGE'=DOSAGE1 Q                   ; dosage must be a match also
"RTN","PSOREJP2",377,0)
 .. ;
"RTN","PSOREJP2",378,0)
 .. I $$STATUS^PSOBPSUT(RX1,FL)="" Q      ; no ECME activity - skip
"RTN","PSOREJP2",379,0)
 .. I $$FIND^PSOREJUT(RX1,FL,,,1) Q       ; unresolved reject on worklist - skip
"RTN","PSOREJP2",380,0)
 .. D GETDAT^BPSBUTL(RX1,FL,COB,.X1,.X2)  ;IA #4719
"RTN","PSOREJP2",381,0)
 .. I X1>LDOS S LDOS=X1,LDS=X2
"RTN","PSOREJP2",382,0)
 Q LDOS_U_LDS
"RTN","PSOREJP2",383,0)
 ;
"RTN","PSOREJP2",384,0)
LASTRN(RX,COB) ;new tag PSO*7*421, cnf
"RTN","PSOREJP2",385,0)
 ; For a renew, get the default DOS and Days Supply from the earlier fill number of the previous prescription
"RTN","PSOREJP2",386,0)
 N RX1,FL,LDOS,LDS,LSTFIL
"RTN","PSOREJP2",387,0)
 I '$G(COB) S COB=1
"RTN","PSOREJP2",388,0)
 S LDOS="",LDS=""
"RTN","PSOREJP2",389,0)
 S RX1=$$GET1^DIQ(52,RX,39.4,"I")      ; 39.4 - previous order, rxien renewed from
"RTN","PSOREJP2",390,0)
 I 'RX1 G LASTRNX                      ; not a renewed prescription
"RTN","PSOREJP2",391,0)
 S LSTFIL=$$LSTRFL^PSOBPSU1(RX1)       ; start with last fill#
"RTN","PSOREJP2",392,0)
 F FL=LSTFIL:-1:0 D  Q:LDOS            ; loop backwards until we find the last date of service
"RTN","PSOREJP2",393,0)
 . I $$STATUS^PSOBPSUT(RX1,FL)="" Q    ; no ECME activity - skip
"RTN","PSOREJP2",394,0)
 . I $$FIND^PSOREJUT(RX1,FL,,,1) Q     ; unresolved reject on worklist - skip
"RTN","PSOREJP2",395,0)
 . D GETDAT^BPSBUTL(RX1,FL,COB,.LDOS,.LDS)   ; IA #4719
"RTN","PSOREJP2",396,0)
 . Q
"RTN","PSOREJP2",397,0)
 ;
"RTN","PSOREJP2",398,0)
LASTRNX ;
"RTN","PSOREJP2",399,0)
 Q LDOS_U_LDS
"RTN","PSOREJP2",400,0)
 ;
"RTN","PSOREJP3")
0^16^B123136868
"RTN","PSOREJP3",1,0)
PSOREJP3 ;ALB/SS - Third Party Reject Display Screen - Comments ;10/27/06
"RTN","PSOREJP3",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**260,287,289,290,358,359,385,403,421,427**;DEC 1997;Build 21
"RTN","PSOREJP3",3,0)
 ;Reference to GETDAT^BPSBUTL supported by IA 4719
"RTN","PSOREJP3",4,0)
 ;
"RTN","PSOREJP3",5,0)
COM ; Builds the Comments section in the Reject Display Screen
"RTN","PSOREJP3",6,0)
 I +$O(^PSRX(RX,"REJ",REJ,"COM",0))=0 Q
"RTN","PSOREJP3",7,0)
 D SETLN^PSOREJP1()
"RTN","PSOREJP3",8,0)
 D SETLN^PSOREJP1("COMMENTS",1,1)
"RTN","PSOREJP3",9,0)
 N DIWL,DIWR,LNCNT,MAXLN,PSL
"RTN","PSOREJP3",10,0)
 N I,X,PSI,Y,LAST,PSOCOM,TXTLN
"RTN","PSOREJP3",11,0)
 S PSI=999999
"RTN","PSOREJP3",12,0)
 F  S PSI=$O(^PSRX(RX,"REJ",REJ,"COM",PSI),-1) Q:+PSI=0  D
"RTN","PSOREJP3",13,0)
 . S PSCOM=$$GET1^DIQ(52.2551,PSI_","_REJ_","_RX,.01)_" - "
"RTN","PSOREJP3",14,0)
 . S PSCOM=PSCOM_$$GET1^DIQ(52.2551,PSI_","_REJ_","_RX,2)
"RTN","PSOREJP3",15,0)
 . S PSCOM=PSCOM_" ("_$$GET1^DIQ(52.2551,PSI_","_REJ_","_RX,1)_")"
"RTN","PSOREJP3",16,0)
 . ;display comment
"RTN","PSOREJP3",17,0)
 . K ^UTILITY($J,"W") S X=PSCOM,DIWL=1,DIWR=78 D ^DIWP
"RTN","PSOREJP3",18,0)
 . F PSL=1:1 Q:('$D(^UTILITY($J,"W",1,PSL,0)))  D
"RTN","PSOREJP3",19,0)
 . . S LAST=0 I '$D(^UTILITY($J,"W",1,PSL+1)),'$O(^PSRX(RX,"REJ",REJ,"COM",PSI),-1) S LAST=1
"RTN","PSOREJP3",20,0)
 . . S TXTLN=$G(^UTILITY($J,"W",1,PSL,0))
"RTN","PSOREJP3",21,0)
 . . D SETLN^PSOREJP1($S(PSL=1:"- ",1:"  ")_TXTLN,0,$S(LAST:1,1:0),1)
"RTN","PSOREJP3",22,0)
 K ^UTILITY($J,"W")
"RTN","PSOREJP3",23,0)
 Q
"RTN","PSOREJP3",24,0)
 ;
"RTN","PSOREJP3",25,0)
ADDCOM ; - Add comment worklist action
"RTN","PSOREJP3",26,0)
 N PSCOM
"RTN","PSOREJP3",27,0)
 D FULL^VALM1
"RTN","PSOREJP3",28,0)
 S PSCOM=$$COMMENT("Comment: ",150)
"RTN","PSOREJP3",29,0)
 I $L(PSCOM)>0,PSCOM'["^" D
"RTN","PSOREJP3",30,0)
 . D SAVECOM(RX,REJ,PSCOM) ;save the comment
"RTN","PSOREJP3",31,0)
 . D INIT^PSOREJP1 ;update screen
"RTN","PSOREJP3",32,0)
 S VALMBCK="R"
"RTN","PSOREJP3",33,0)
 Q
"RTN","PSOREJP3",34,0)
 ;
"RTN","PSOREJP3",35,0)
 ;Enter a comment
"RTN","PSOREJP3",36,0)
 ;PSOTR  -prompt string
"RTN","PSOREJP3",37,0)
 ;PSMLEN -maxlen
"RTN","PSOREJP3",38,0)
 ;returns:
"RTN","PSOREJP3",39,0)
 ; "^" - if user chose to quit 
"RTN","PSOREJP3",40,0)
 ; "" - nothing entered or input has been discarded
"RTN","PSOREJP3",41,0)
 ; otherwise - comment's text
"RTN","PSOREJP3",42,0)
COMMENT(PSOTR,PSMLEN) ;*/
"RTN","PSOREJP3",43,0)
 N DIR,DTOUT,DUOUT,PSQ
"RTN","PSOREJP3",44,0)
 I '$D(PSOTR) S PSOTR="Comment "
"RTN","PSOREJP3",45,0)
 I '$D(PSMLEN) S PSMLEN=150
"RTN","PSOREJP3",46,0)
 S DIR(0)="FA^1:150"
"RTN","PSOREJP3",47,0)
 S DIR("A")=PSOTR
"RTN","PSOREJP3",48,0)
 S DIR("?")="Enter a free text comment up to 150 characters long."
"RTN","PSOREJP3",49,0)
 S PSQ=0
"RTN","PSOREJP3",50,0)
 F  D  Q:+PSQ'=0
"RTN","PSOREJP3",51,0)
 . W ! D ^DIR
"RTN","PSOREJP3",52,0)
 . I $D(DUOUT)!($D(DTOUT)) S PSQ=-1 Q
"RTN","PSOREJP3",53,0)
 . I $L(Y)'>PSMLEN S PSQ=1 Q
"RTN","PSOREJP3",54,0)
 . W !!,"Enter a free text comment up to 150 characters long.",!
"RTN","PSOREJP3",55,0)
 . S DIR("B")=$E(Y,1,PSMLEN)
"RTN","PSOREJP3",56,0)
 Q:PSQ<0 "^"
"RTN","PSOREJP3",57,0)
 Q:$L(Y)=0 ""
"RTN","PSOREJP3",58,0)
 S PSQ=$$YESNO("Confirm","YES")
"RTN","PSOREJP3",59,0)
 I PSQ=-1 Q "^"
"RTN","PSOREJP3",60,0)
 I PSQ=0 Q ""
"RTN","PSOREJP3",61,0)
 Q Y
"RTN","PSOREJP3",62,0)
 ;
"RTN","PSOREJP3",63,0)
 ; Ask
"RTN","PSOREJP3",64,0)
 ; Input:
"RTN","PSOREJP3",65,0)
 ;  PSQSTR - question
"RTN","PSOREJP3",66,0)
 ;  PSDFL - default answer
"RTN","PSOREJP3",67,0)
 ; Output: 
"RTN","PSOREJP3",68,0)
 ; 1 YES
"RTN","PSOREJP3",69,0)
 ; 0 NO
"RTN","PSOREJP3",70,0)
 ; -1 if cancelled
"RTN","PSOREJP3",71,0)
YESNO(PSQSTR,PSDFL) ; Default - YES
"RTN","PSOREJP3",72,0)
 N DIR,Y,DUOUT
"RTN","PSOREJP3",73,0)
 S DIR(0)="Y"
"RTN","PSOREJP3",74,0)
 S DIR("A")=PSQSTR
"RTN","PSOREJP3",75,0)
 S:$L($G(PSDFL)) DIR("B")=PSDFL
"RTN","PSOREJP3",76,0)
 W ! D ^DIR
"RTN","PSOREJP3",77,0)
 Q $S($G(DUOUT)!$G(DUOUT)!(Y="^"):-1,1:Y)
"RTN","PSOREJP3",78,0)
 ;
"RTN","PSOREJP3",79,0)
 ;Save comment
"RTN","PSOREJP3",80,0)
SAVECOM(PSRXIEN,PSREJIEN,PSCOMNT,DATETIME,USER) ;
"RTN","PSOREJP3",81,0)
 N PSREC,PSDA,PSERR
"RTN","PSOREJP3",82,0)
 I '$G(DATETIME) D NOW^%DTC S DATETIME=%
"RTN","PSOREJP3",83,0)
 I '$G(USER) S USER=DUZ
"RTN","PSOREJP3",84,0)
 D INSITEM(52.2551,PSRXIEN,PSREJIEN,DATETIME)
"RTN","PSOREJP3",85,0)
 S PSREC=$O(^PSRX(PSRXIEN,"REJ",PSREJIEN,"COM","B",DATETIME,0))
"RTN","PSOREJP3",86,0)
 I PSREC>0 D
"RTN","PSOREJP3",87,0)
 . S PSDA(52.2551,PSREC_","_PSREJIEN_","_PSRXIEN_",",1)=USER
"RTN","PSOREJP3",88,0)
 . S PSDA(52.2551,PSREC_","_PSREJIEN_","_PSRXIEN_",",2)=$G(PSCOMNT)
"RTN","PSOREJP3",89,0)
 . D FILE^DIE("","PSDA","PSERR")
"RTN","PSOREJP3",90,0)
 Q
"RTN","PSOREJP3",91,0)
 ;
"RTN","PSOREJP3",92,0)
 ;/**
"RTN","PSOREJP3",93,0)
 ;PSSFILE - subfile# (52.2551) for comment
"RTN","PSOREJP3",94,0)
 ;PSIEN - ien for file in which the new subfile entry will be inserted
"RTN","PSOREJP3",95,0)
 ;PSVAL01 - .01 value for the new entry
"RTN","PSOREJP3",96,0)
INSITEM(PSSFILE,PSIEN0,PSIEN1,PSVAL01) ;*/
"RTN","PSOREJP3",97,0)
 N PSSSI,PSIENS,PSFDA,PSER
"RTN","PSOREJP3",98,0)
 S PSIENS="+1,"_PSIEN1_","_PSIEN0_","
"RTN","PSOREJP3",99,0)
 S PSFDA(PSSFILE,PSIENS,.01)=PSVAL01
"RTN","PSOREJP3",100,0)
 D UPDATE^DIE("","PSFDA","PSSSI","PSER")
"RTN","PSOREJP3",101,0)
 I $D(PSER) D BMES^XPDUTL(PSER("DIERR",1,"TEXT",1))
"RTN","PSOREJP3",102,0)
 Q
"RTN","PSOREJP3",103,0)
 ;
"RTN","PSOREJP3",104,0)
PRINT(RX,RFL) ; Print Label for specific Rx/Fill
"RTN","PSOREJP3",105,0)
 I '$G(RX) Q
"RTN","PSOREJP3",106,0)
 I $G(RFL)="" Q
"RTN","PSOREJP3",107,0)
 ;
"RTN","PSOREJP3",108,0)
 ; Some of these variables are used by LBL^PSOLSET but they are newed here
"RTN","PSOREJP3",109,0)
 N PPL,PSOSITE,PSOPAR,PSOSYS,PSOBARS,PSOBAR0,PSOBAR1,PSOIOS,PSOBFLAG,PSOCLBL
"RTN","PSOREJP3",110,0)
 N PSOQUIT,PSOPIOST,PSOLTEST,PSOTLBL,PSORXT
"RTN","PSOREJP3",111,0)
 N DFN,PDUZ,RXFL,REPRINT,REJLBL,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","PSOREJP3",112,0)
 N %ZIS,IOP,POP,ZTSK,ZTRTN,ZTIO,ZTDESC,ZTSAVE,ZTDTH,VAR
"RTN","PSOREJP3",113,0)
 ;
"RTN","PSOREJP3",114,0)
 ; Set the default label printer.  We need to new it so we don't change the value that was
"RTN","PSOREJP3",115,0)
 ;   set by PSOLSET when the user first logged into OP so need to do a bit of work to new it and  
"RTN","PSOREJP3",116,0)
 ;   reset it before the call to LBL^PSOLSET.
"RTN","PSOREJP3",117,0)
 I $G(PSOLAP)]"" S PSOTLBL=PSOLAP N PSOLAP S PSOLAP=PSOTLBL,PSOCLBL=1
"RTN","PSOREJP3",118,0)
 E  N PSOLAP S PSOCLBL=""
"RTN","PSOREJP3",119,0)
 ;
"RTN","PSOREJP3",120,0)
 ; Check if a label has already been printed and set REPRINT flag.
"RTN","PSOREJP3",121,0)
 S REJLBL=0 F  S REJLBL=$O(^PSRX(RX,"L",REJLBL)) Q:'REJLBL  I +$$GET1^DIQ(52.032,REJLBL_","_RX,1,"I")=RFL S REPRINT=1 Q
"RTN","PSOREJP3",122,0)
 ;
"RTN","PSOREJP3",123,0)
 ; Define required variables
"RTN","PSOREJP3",124,0)
 S PSOSITE=+$$RXSITE^PSOBPSUT(RX,RFL),PSOPAR=$G(^PS(59,PSOSITE,1))
"RTN","PSOREJP3",125,0)
 S DFN=$$GET1^DIQ(52,RX,2,"I"),PDUZ=DUZ,PSOSYS=$G(^PS(59.7,1,40.1))
"RTN","PSOREJP3",126,0)
 S PPL=RX I RFL S RXFL(RX)=RFL
"RTN","PSOREJP3",127,0)
 ;
"RTN","PSOREJP3",128,0)
 ; Get label print device and check alignment
"RTN","PSOREJP3",129,0)
 W ! S PSOBFLAG=1 D LBL^PSOLSET I $G(PSOQUIT) Q
"RTN","PSOREJP3",130,0)
 I $G(PSOLAP)="" W $C(7),!!,"No printer defined" K DIR S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR Q
"RTN","PSOREJP3",131,0)
 ;
"RTN","PSOREJP3",132,0)
 ; Call %ZIS to get device characteristics w/o reopening the printer. 
"RTN","PSOREJP3",133,0)
 ; We need to do this to check if queuing is forced for this device
"RTN","PSOREJP3",134,0)
 ; Not checking the POP variable.  If we don't get the device here, we will fall through to the 
"RTN","PSOREJP3",135,0)
 ;   foreground process and try again
"RTN","PSOREJP3",136,0)
 S IOP=PSOLAP,%ZIS="QN" D ^%ZIS
"RTN","PSOREJP3",137,0)
 ;
"RTN","PSOREJP3",138,0)
 ; If background printer, queue the job
"RTN","PSOREJP3",139,0)
 I $D(IO("Q")) D  Q
"RTN","PSOREJP3",140,0)
 . S ZTRTN="DQ^PSOLBL",ZTDTH=$H,ZTIO=PSOLAP
"RTN","PSOREJP3",141,0)
 . F VAR="PSOSYS","DFN","PSOPAR","PDUZ","PCOMX","PSOLAP","PPL","PSOSITE","RXY","PSOSUSPR","PSOBARS","PSOBAR1","PSOBAR0","PSODELE","PSOPULL","PSTAT","PSODBQ","PSOEXREP","PSOTREP","REPRINT" S:$D(@VAR) ZTSAVE(VAR)=""
"RTN","PSOREJP3",142,0)
 . S ZTSAVE("PSORX(")="",ZTSAVE("RXRP(")="",ZTSAVE("RXPR(")="",ZTSAVE("RXRS(")="",ZTSAVE("RXFL(")="",ZTSAVE("PCOMH(")=""
"RTN","PSOREJP3",143,0)
 . S ZTDESC="OUTPATIENT PHARMACY REJECT WORKLIST LABEL PRINT"
"RTN","PSOREJP3",144,0)
 . D ^%ZISC,^%ZTLOAD
"RTN","PSOREJP3",145,0)
 . W !!,"Label ",$S('$D(ZTSK):"NOT ",1:""),"queued to print",! I '$D(ZTSK) W $C(7) K DIR S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR
"RTN","PSOREJP3",146,0)
 ;
"RTN","PSOREJP3",147,0)
 ; If we gotten this far, open the device and print the label in the foreground
"RTN","PSOREJP3",148,0)
 ; We also need to preserve the PSORX array, which gets killed by DQ^PSOLBL
"RTN","PSOREJP3",149,0)
 K %ZIS S IOP=PSOLAP D ^%ZIS
"RTN","PSOREJP3",150,0)
 I POP D ^%ZISC W $C(7),!!,"Printer is busy - NO label printed" K DIR S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR Q
"RTN","PSOREJP3",151,0)
 K PSORXT M PSORXT=PSORX
"RTN","PSOREJP3",152,0)
 D DQ^PSOLBL,^%ZISC
"RTN","PSOREJP3",153,0)
 K PSORX M PSORX=PSORXT
"RTN","PSOREJP3",154,0)
 Q
"RTN","PSOREJP3",155,0)
 ;
"RTN","PSOREJP3",156,0)
RXINFO(RX,FILL,LINE,REJ) ; Returns header displayable Rx Information
"RTN","PSOREJP3",157,0)
 N TXT,RXINFO,LBL,CMOP,DRG,PSOET
"RTN","PSOREJP3",158,0)
 I LINE=1 D
"RTN","PSOREJP3",159,0)
 . N RXDOS D GETDAT^BPSBUTL(RX,FILL,,.RXDOS) ; Get Date of Service from BPS CLAIM field 401 - PSO*7*421
"RTN","PSOREJP3",160,0)
 . S RXINFO="Rx#      : "_$$GET1^DIQ(52,RX,.01)_"/"_FILL
"RTN","PSOREJP3",161,0)
 . ;cnf, PSO*7*358, add PSOET logic for TRICARE/CHAMPVA non-billable
"RTN","PSOREJP3",162,0)
 . S PSOET=$$PSOET(RX,FILL)
"RTN","PSOREJP3",163,0)
 . S $E(RXINFO,27)="ECME#: "_$S(PSOET:"",1:$$ECMENUM^PSOBPSU2(RX,FILL))
"RTN","PSOREJP3",164,0)
 . S $E(RXINFO,49)="Date of Service: "_$S(PSOET:"",1:$$FMTE^XLFDT(RXDOS)) ; Use DOS from BPS Claims field 401 - PSO*7*421
"RTN","PSOREJP3",165,0)
 I LINE=2 D
"RTN","PSOREJP3",166,0)
 . S DRG=$$GET1^DIQ(52,RX,6,"I"),CMOP=$S($D(^PSDRUG("AQ",DRG)):1,1:0)
"RTN","PSOREJP3",167,0)
 . S RXINFO=$S(CMOP:"CMOP ",1:"")_"Drug",$E(RXINFO,10)=": "_$E($$GET1^DIQ(52,RX,6),1,43)
"RTN","PSOREJP3",168,0)
 . S $E(RXINFO,56)="NDC Code: "_$$GETNDC^PSONDCUT(RX,FILL)
"RTN","PSOREJP3",169,0)
 Q $G(RXINFO)
"RTN","PSOREJP3",170,0)
 ;
"RTN","PSOREJP3",171,0)
FILL ;Fill payable TRICARE or CHAMPVA Rx
"RTN","PSOREJP3",172,0)
 N COM,OPNREJ,OPNREJ2,OPNREJ3,DCSTAT,PSOREL
"RTN","PSOREJP3",173,0)
 S:'$G(PSOTRIC) PSOTRIC=$$TRIC^PSOREJP1(RX,FILL,PSOTRIC)  ;cnf, PSO*7*358, add line
"RTN","PSOREJP3",174,0)
 ;cnf, PSO*7*358, don't allow option if TRICARE/CHAMPVA and released, PSOREL is set to the release date
"RTN","PSOREJP3",175,0)
 S PSOREL=0 I PSOTRIC D
"RTN","PSOREJP3",176,0)
 . I 'FILL S PSOREL=+$$GET1^DIQ(52,RX,31,"I")
"RTN","PSOREJP3",177,0)
 . I FILL S PSOREL=+$$GET1^DIQ(52.1,FILL_","_RX,17,"I")
"RTN","PSOREJP3",178,0)
 I PSOREL S VALMSG="Released Rxs may not be filled.",VALMBCK="R" Q
"RTN","PSOREJP3",179,0)
 ;cnf, PSO*7*358, don't allow option if prescription has been discontinued
"RTN","PSOREJP3",180,0)
 ;  12 - DISCONTINUED
"RTN","PSOREJP3",181,0)
 ;  14 - DISCONTINUED BY PROVIDER
"RTN","PSOREJP3",182,0)
 ;  15 - DISCONTINUED (EDIT)
"RTN","PSOREJP3",183,0)
 S DCSTAT=$$GET1^DIQ(52,RX,100,"I")
"RTN","PSOREJP3",184,0)
 I "/12/14/15/"[("/"_DCSTAT_"/") S VALMSG="Discontinued Rxs may not be filled.",VALMBCK="R" Q
"RTN","PSOREJP3",185,0)
 D FULL^VALM1
"RTN","PSOREJP3",186,0)
 I $$CLOSED^PSOREJP1(RX,REJ) D  Q
"RTN","PSOREJP3",187,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R"
"RTN","PSOREJP3",188,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP3",189,0)
 S COM=""
"RTN","PSOREJP3",190,0)
 I 'PSOTRIC&($$STATUS^PSOBPSUT(RX,FILL)'["PAYABLE") S VALMSG="Only Rxs with an E PAYABLE status may be filled.",VALMBCK="R" Q
"RTN","PSOREJP3",191,0)
 I PSOTRIC&($$STATUS^PSOBPSUT(RX,FILL)'["PAYABLE") D FILLTR I $L($G(VALMSG)_$G(VALMBCK)) Q  ;cnf, PSO*7*358
"RTN","PSOREJP3",192,0)
 S:COM="" COM="AUTOMATICALLY CLOSED"  ;cnf, PSO*7*358, add condition
"RTN","PSOREJP3",193,0)
 S (OPNREJ,OPNREJ2,OPNREJ3)=""
"RTN","PSOREJP3",194,0)
 S OPNREJ2=0 F  S OPNREJ2=$O(^PSRX(RX,"REJ",OPNREJ2)) Q:OPNREJ2=""!(OPNREJ2'?1N.N)  S OPNREJ=OPNREJ_","_OPNREJ2
"RTN","PSOREJP3",195,0)
 S OPNREJ=$E(OPNREJ,2,999),OPNREJ2=""
"RTN","PSOREJP3",196,0)
 W !?20,"[Closing all rejections for prescription "_$$GET1^DIQ(52,RX,".01")_":"
"RTN","PSOREJP3",197,0)
 F I=1:1 S OPNREJ2=$P(OPNREJ,",",I) Q:OPNREJ2=""  D
"RTN","PSOREJP3",198,0)
 . S OPNREJ3="",OPNREJ3=$$GET1^DIQ(52.25,OPNREJ2_","_RX,".01")
"RTN","PSOREJP3",199,0)
 . W !?25,OPNREJ3_" - "_$$GET1^DIQ(9002313.93,OPNREJ3,".02")_"..."
"RTN","PSOREJP3",200,0)
 . D CLOSE^PSOREJUT(RX,FILL,OPNREJ2,DUZ,6,COM,"","","","","",1) W "OK]",!,$C(7) H 1  ; pso*7*421 Use 12th param to ignore
"RTN","PSOREJP3",201,0)
 I $$PTLBL^PSOREJP2(RX,FILL) D PRINT(RX,FILL)
"RTN","PSOREJP3",202,0)
 S CHANGE=1   ;cnf, PSO*7*358, remove S VALMBCK="R" so user goes back to selection list
"RTN","PSOREJP3",203,0)
 Q
"RTN","PSOREJP3",204,0)
 ;
"RTN","PSOREJP3",205,0)
PSOCOB(RX,FILL,REJ) ; Returns RXCOB indicator for Worklist
"RTN","PSOREJP3",206,0)
 N DATA1
"RTN","PSOREJP3",207,0)
 D GET^PSOREJU2(RX,FILL,.DATA1,REJ,1)
"RTN","PSOREJP3",208,0)
 I $G(DATA1(REJ,"COB"))="PRIMARY"  Q 1
"RTN","PSOREJP3",209,0)
 I $G(DATA1(REJ,"COB"))=""  Q 1
"RTN","PSOREJP3",210,0)
 Q 2
"RTN","PSOREJP3",211,0)
 ;
"RTN","PSOREJP3",212,0)
DC ;Discontinue TRICARE Rx
"RTN","PSOREJP3",213,0)
 N ACTION S ACTION="D"
"RTN","PSOREJP3",214,0)
 D FULL^VALM1
"RTN","PSOREJP3",215,0)
 S ACTION=$$DC^PSOREJU1(RX,ACTION)
"RTN","PSOREJP3",216,0)
 I ACTION="Q"!(ACTION="^") S VALMSG="NO ACTION TAKEN.",VALMBCK="R" Q
"RTN","PSOREJP3",217,0)
 S CHANGE=1
"RTN","PSOREJP3",218,0)
 Q
"RTN","PSOREJP3",219,0)
 ;
"RTN","PSOREJP3",220,0)
FILLTR ;TRICARE/CHAMPVA specific logic  ;cnf, PSO*7*358
"RTN","PSOREJP3",221,0)
 ;COM is not new'd so the variable can be used in FILL tag
"RTN","PSOREJP3",222,0)
 N CONT,PSOET,PSQSTR
"RTN","PSOREJP3",223,0)
 ;
"RTN","PSOREJP3",224,0)
FILLTR2 ;Use for looping if user enters ^ in required comment field  ;cnf, PSO*7*358
"RTN","PSOREJP3",225,0)
 ;
"RTN","PSOREJP3",226,0)
 ;if TRICARE/CHAMPVA, not payable, and no security key, quit
"RTN","PSOREJP3",227,0)
 ;reference to ^XUSEC( supported by IA 10076
"RTN","PSOREJP3",228,0)
 I '$D(^XUSEC("PSO TRICARE/CHAMPVA",DUZ)) S VALMSG="Action Requires <PSO TRICARE/CHAMPVA> security key",VALMBCK="R" Q
"RTN","PSOREJP3",229,0)
 ;
"RTN","PSOREJP3",230,0)
 ;if TRICARE/CHAMPVA, not payable, and user has security key, prompt to continue or not
"RTN","PSOREJP3",231,0)
 S PSQSTR="You are bypassing claims processing. Do you wish to continue"
"RTN","PSOREJP3",232,0)
 S CONT=$$YESNO(PSQSTR,"No")
"RTN","PSOREJP3",233,0)
 I (CONT=-1)!('CONT) S VALMSG="NO ACTION TAKEN.",VALMBCK="R" Q
"RTN","PSOREJP3",234,0)
 ;
"RTN","PSOREJP3",235,0)
 ;check for valid electronic signature
"RTN","PSOREJP3",236,0)
 I '$$SIG^PSOREJU1() S VALMBCK="R" Q                               ;quit if no valid electronic signature
"RTN","PSOREJP3",237,0)
 ;
"RTN","PSOREJP3",238,0)
 ;prompt user for required TRICARE/CHAMPVA Justification
"RTN","PSOREJP3",239,0)
 S COM=$$TCOM(RX,FILL) G:COM="^" FILLTR2                    ;loop back to "continue?" question if ^ entry
"RTN","PSOREJP3",240,0)
 ;
"RTN","PSOREJP3",241,0)
 ;audit log
"RTN","PSOREJP3",242,0)
 S PSOET=$$PSOET(RX,FILL)
"RTN","PSOREJP3",243,0)
 D AUDIT^PSOTRI(RX,FILL,,COM,$S(PSOET:"N",1:"R"),$S($G(PSOTRIC)=1:"T",$G(PSOTRIC)=2:"C",1:""))
"RTN","PSOREJP3",244,0)
 Q
"RTN","PSOREJP3",245,0)
 ;
"RTN","PSOREJP3",246,0)
TCOM(RX,RFL) ; - Ask for TRICARE or CHAMPVA Justification
"RTN","PSOREJP3",247,0)
 N COM,DIR,DIRUT,X
"RTN","PSOREJP3",248,0)
 W ! S DIR(0)="F^3:100" S DIR("A")=$$ELIGDISP^PSOREJP1(RX,RFL)_" Justification" D ^DIR
"RTN","PSOREJP3",249,0)
 S COM=X I $D(DIRUT) S COM="^"
"RTN","PSOREJP3",250,0)
 Q COM
"RTN","PSOREJP3",251,0)
 ;
"RTN","PSOREJP3",252,0)
PSOET(RX,FILL) ; Returns flag for TRICARE or CHAMPVA non-billable and no claim submitted
"RTN","PSOREJP3",253,0)
 ; Return 1 if rejection code is eT or eC (pseudo-reject code)
"RTN","PSOREJP3",254,0)
 ;        0 otherwise
"RTN","PSOREJP3",255,0)
 ;
"RTN","PSOREJP3",256,0)
 I '$G(RX) Q 0
"RTN","PSOREJP3",257,0)
 N X,TRIREJCD
"RTN","PSOREJP3",258,0)
 S X=0
"RTN","PSOREJP3",259,0)
 S TRIREJCD=$T(TRIREJCD+1),TRIREJCD=$P(TRIREJCD,";;",2)
"RTN","PSOREJP3",260,0)
 S X=$$FIND^PSOREJUT(RX,$G(FILL),,TRIREJCD,1) ; PSO*7*421 - Pass indicator to ignore ECME status
"RTN","PSOREJP3",261,0)
 Q X
"RTN","PSOREJP3",262,0)
 ;
"RTN","PSOREJP3",263,0)
TRIREJCD ;TRICARE or CHAMPVA Reject Code, non-billable Rx   ;cnf, PSO*7*358
"RTN","PSOREJP3",264,0)
 ;;eT,eC;;TRICARE or CHAMPVA pseudo reject codes referenced in ^PSOREJP3, ^PSOREJU4
"RTN","PSOREJP3",265,0)
 Q
"RTN","PSOREJP3",266,0)
 ;
"RTN","PSOREJP3",267,0)
SEND(OVRCOD,CLA,PA) ; - Sends Claim to ECME and closes Reject
"RTN","PSOREJP3",268,0)
 N DIR,RESP,ALTXT,COM,SMA
"RTN","PSOREJP3",269,0)
 S DIR(0)="Y",DIR("A")="     Confirm",DIR("B")="YES"
"RTN","PSOREJP3",270,0)
 S DIR("A",1)="     When you confirm, a new claim will be submitted for"
"RTN","PSOREJP3",271,0)
 S DIR("A",2)="     the prescription and this REJECT will be marked"
"RTN","PSOREJP3",272,0)
 S DIR("A",3)="     resolved."
"RTN","PSOREJP3",273,0)
 S DIR("A",4)=" "
"RTN","PSOREJP3",274,0)
 W ! D ^DIR I $G(Y)=0!$D(DIRUT) S VALMBCK="R" Q
"RTN","PSOREJP3",275,0)
 S SMA=0 I $G(OVRCOD)]"",$G(CLA)]"",$G(PA)]"" S SMA=1
"RTN","PSOREJP3",276,0)
 S ALTXT=""
"RTN","PSOREJP3",277,0)
 I 'SMA D
"RTN","PSOREJP3",278,0)
 . S ALTXT="REJECT WORKLIST"
"RTN","PSOREJP3",279,0)
 . S:$G(OVRCOD)'="" ALTXT=ALTXT_"-DUR OVERRIDE CODES("_$TR(OVRCOD,"^","/")_")"
"RTN","PSOREJP3",280,0)
 . S:$G(CLA)]"" ALTXT=ALTXT_"-(CLARIF. CODE="_CLA_")"
"RTN","PSOREJP3",281,0)
 . S:$G(PA)]"" ALTXT=ALTXT_"-(PRIOR AUTH.="_$TR(PA,"^","/")_")"
"RTN","PSOREJP3",282,0)
 D ECMESND^PSOBPSU1(RX,FILL,,"ED",$$GETNDC^PSONDCUT(RX,FILL),,,$G(OVRCOD),,.RESP,,ALTXT,$G(CLA),$G(PA),$$PSOCOB^PSOREJP3(RX,FILL,REJ))
"RTN","PSOREJP3",283,0)
 I $G(RESP) D  Q
"RTN","PSOREJP3",284,0)
 . W !!?10,"Claim could not be submitted. Please try again later!"
"RTN","PSOREJP3",285,0)
 . W !,?10,"Reason: ",$S($P(RESP,"^",2)="":"UNKNOWN",1:$P(RESP,"^",2)),$C(7) H 2
"RTN","PSOREJP3",286,0)
 ;
"RTN","PSOREJP3",287,0)
 ; Get the ePharmacy Response Pause and hang for that amount of time (default is 2 if not set)
"RTN","PSOREJP3",288,0)
 N PAUSE,IEN5286
"RTN","PSOREJP3",289,0)
 I $G(PSOSITE)="" N PSOSITE S PSOSITE=$$RXSITE^PSOBPSUT(RX,FILL)
"RTN","PSOREJP3",290,0)
 S IEN5286=$O(^PS(52.86,"B",+PSOSITE,""))
"RTN","PSOREJP3",291,0)
 S PAUSE=$$GET1^DIQ(52.86,IEN5286_",",6)
"RTN","PSOREJP3",292,0)
 I PAUSE="" S PAUSE=2
"RTN","PSOREJP3",293,0)
 I PAUSE H PAUSE
"RTN","PSOREJP3",294,0)
 ;
"RTN","PSOREJP3",295,0)
 I $$PTLBL^PSOREJP2(RX,FILL) D PRINT(RX,FILL)
"RTN","PSOREJP3",296,0)
 N PSOTRIC S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,FILL,PSOTRIC)
"RTN","PSOREJP3",297,0)
 I $$GET1^DIQ(52,RX,100,"I")=5&(PSOTRIC) D
"RTN","PSOREJP3",298,0)
 . Q:$$STATUS^PSOBPSUT(RX,FILL)'["PAYABLE"
"RTN","PSOREJP3",299,0)
 . N XXX S XXX=""
"RTN","PSOREJP3",300,0)
 . W !,"This prescription can be pulled early from suspense or the label will print"
"RTN","PSOREJP3",301,0)
 . W !,"when PRINT FROM SUSPENSE occurs.",!
"RTN","PSOREJP3",302,0)
 . R !,"Press enter to continue... ",XXX:60
"RTN","PSOREJP3",303,0)
 I $D(PSOSTFLT),PSOSTFLT'="B" S CHANGE=1
"RTN","PSOREJP3",304,0)
 Q
"RTN","PSOREJP4")
0^12^B67032056
"RTN","PSOREJP4",1,0)
PSOREJP4 ;BP/CMF - Pharmacy Rejects List Mail message ;06/26/08 
"RTN","PSOREJP4",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**289,427**;DEC 1997;Build 21
"RTN","PSOREJP4",3,0)
 ;; use of ^VADPT supported by IA#10061
"RTN","PSOREJP4",4,0)
 ;@author  - Chris Flegel
"RTN","PSOREJP4",5,0)
 ;@date    - August 18, 2008
"RTN","PSOREJP4",6,0)
 ;@version - 1.0
"RTN","PSOREJP4",7,0)
 Q
"RTN","PSOREJP4",8,0)
EN ; entry point for background option
"RTN","PSOREJP4",9,0)
 N RESULT,C
"RTN","PSOREJP4",10,0)
 S RESULT=0
"RTN","PSOREJP4",11,0)
 D BEGIN
"RTN","PSOREJP4",12,0)
 I +$$LOAD() D SORT S RESULT=$$MAIL()
"RTN","PSOREJP4",13,0)
 D END
"RTN","PSOREJP4",14,0)
 Q
"RTN","PSOREJP4",15,0)
 ;;
"RTN","PSOREJP4",16,0)
BEGIN ;
"RTN","PSOREJP4",17,0)
 K ^TMP($J,"PSOREJP4")
"RTN","PSOREJP4",18,0)
 Q
"RTN","PSOREJP4",19,0)
 ;;
"RTN","PSOREJP4",20,0)
END ;
"RTN","PSOREJP4",21,0)
 K ^TMP($J,"PSOREJP4")
"RTN","PSOREJP4",22,0)
 Q
"RTN","PSOREJP4",23,0)
 ;;
"RTN","PSOREJP4",24,0)
BUFDATE(DIVISION) ;
"RTN","PSOREJP4",25,0)
 Q:'$G(DIVISION) ""
"RTN","PSOREJP4",26,0)
 N RXDIVBUF,CUTDT
"RTN","PSOREJP4",27,0)
 D:'$D(^TMP($J,"PSOREJP4","DIVISION",DIVISION))
"RTN","PSOREJP4",28,0)
 .S RXDIVBUF=$$GET1^DIQ(52.86,DIVISION,4)
"RTN","PSOREJP4",29,0)
 .S ^TMP($J,"PSOREJP4","DIVISION",DIVISION)=RXDIVBUF
"RTN","PSOREJP4",30,0)
 S RXDIVBUF=+^TMP($J,"PSOREJP4","DIVISION",DIVISION)
"RTN","PSOREJP4",31,0)
 S RXDIVBUF=$S(RXDIVBUF=""!(RXDIVBUF<1):5,1:RXDIVBUF)
"RTN","PSOREJP4",32,0)
 S X1=DT,X2=-RXDIVBUF D C^%DTC S CUTDT=X
"RTN","PSOREJP4",33,0)
 Q CUTDT
"RTN","PSOREJP4",34,0)
 ;
"RTN","PSOREJP4",35,0)
LOAD() ;;
"RTN","PSOREJP4",36,0)
 N RXIEN,REJECT,BUFDATE,REJDATE,COMDATE,DIVISION,COUNT,RXSTAT,RXDIV
"RTN","PSOREJP4",37,0)
 S COUNT=0
"RTN","PSOREJP4",38,0)
 S RXIEN=0
"RTN","PSOREJP4",39,0)
 F  S RXIEN=$O(^PSRX("REJSTS",0,RXIEN)) Q:'RXIEN  D
"RTN","PSOREJP4",40,0)
 .S REJECT=0
"RTN","PSOREJP4",41,0)
 .F  S REJECT=$O(^PSRX("REJSTS",0,RXIEN,REJECT)) Q:'REJECT  D
"RTN","PSOREJP4",42,0)
 ..S RXSTAT=$$GET1^DIQ(52,RXIEN,100,"I") Q:",10,12,13,14,15,"[(","_RXSTAT_",")  ;quit unless active
"RTN","PSOREJP4",43,0)
 ..S RXDIV=$$GET1^DIQ(52,RXIEN,20,"I"),DIVISION="",DIVISION=$O(^PS(52.86,"B",RXDIV,DIVISION))
"RTN","PSOREJP4",44,0)
 ..Q:'DIVISION
"RTN","PSOREJP4",45,0)
 ..S BUFDATE=$$BUFDATE(DIVISION)
"RTN","PSOREJP4",46,0)
 ..S REJDATE=$P(^PSRX(RXIEN,"REJ",REJECT,0),U,2),REJDATE=$P(REJDATE,".")
"RTN","PSOREJP4",47,0)
 ..Q:REJDATE>BUFDATE  ;;quit if reject date is newer than the cutoff date
"RTN","PSOREJP4",48,0)
 ..S COMDATE=""
"RTN","PSOREJP4",49,0)
 ..I $D(^PSRX(RXIEN,"REJ",REJECT,"COM")) S COMDATE=$O(^PSRX(RXIEN,"REJ",REJECT,"COM","B",COMDATE),-1),COMDATE=$P(COMDATE,".")  ;Get the last comments date
"RTN","PSOREJP4",50,0)
 ..;S COMDATE=$O(^PSRX(RXIEN,"REJ",REJECT,"COM","B",BUFDATE))
"RTN","PSOREJP4",51,0)
 ..Q:COMDATE>BUFDATE  ;don't put on the list if comment was defined after cutoff date
"RTN","PSOREJP4",52,0)
 ..S ^TMP($J,"PSOREJP4",DIVISION,RXIEN,REJECT)=RXSTAT
"RTN","PSOREJP4",53,0)
 ..S COUNT=COUNT+1
"RTN","PSOREJP4",54,0)
 Q COUNT
"RTN","PSOREJP4",55,0)
 ;;
"RTN","PSOREJP4",56,0)
SORT ;;
"RTN","PSOREJP4",57,0)
 N DIVISION,RXIEN,RX,DRUGNAME,PATNAME,PATSSN,PATLAST4,REJECT,DFN,RXSTAT
"RTN","PSOREJP4",58,0)
 N ENTRYNUM,SORT,OUT,I,J,LINE,II,COMM1,COMM2,SORTA,PSOTRIC,CODE
"RTN","PSOREJP4",59,0)
 K ^UTILITY($J,"W")
"RTN","PSOREJP4",60,0)
 S (DIVISION,ENTRYNUM)=0
"RTN","PSOREJP4",61,0)
 F  S DIVISION=$O(^TMP($J,"PSOREJP4",DIVISION)) Q:+DIVISION=0  D
"RTN","PSOREJP4",62,0)
 .S RXIEN=0
"RTN","PSOREJP4",63,0)
 .F  S RXIEN=$O(^TMP($J,"PSOREJP4",DIVISION,RXIEN)) Q:+RXIEN=0  D
"RTN","PSOREJP4",64,0)
 ..S REJECT=0
"RTN","PSOREJP4",65,0)
 ..F  S REJECT=$O(^TMP($J,"PSOREJP4",DIVISION,RXIEN,REJECT)) Q:'REJECT  D
"RTN","PSOREJP4",66,0)
 ...S DFN=$$GET1^DIQ(52,RXIEN,2,"I")
"RTN","PSOREJP4",67,0)
 ...S RXSTAT=$$GET1^DIQ(52,RXIEN,100)
"RTN","PSOREJP4",68,0)
 ...N VA,VADM,VAERR,SORT,OUT
"RTN","PSOREJP4",69,0)
 ...N RXIENS,REJIENS,REFIENS,RXNUM,RXFILL,I
"RTN","PSOREJP4",70,0)
 ...N FILLDATE,REJDATE,DETCDATE,RSNCODE,RSNTEXT
"RTN","PSOREJP4",71,0)
 ...D DEM^VADPT
"RTN","PSOREJP4",72,0)
 ...Q:+$G(VAERR)
"RTN","PSOREJP4",73,0)
 ...S PATNAME=VADM(1)
"RTN","PSOREJP4",74,0)
 ...S PATSSN=VA("PID")
"RTN","PSOREJP4",75,0)
 ...S PATLAST4=VA("BID")
"RTN","PSOREJP4",76,0)
 ...S SORT=PATNAME_U_PATSSN_U
"RTN","PSOREJP4",77,0)
 ...S RXNUM=$$GET1^DIQ(52,RXIEN,.01)
"RTN","PSOREJP4",78,0)
 ...S REJIENS=REJECT_","_RXIEN_","
"RTN","PSOREJP4",79,0)
 ...S RXFILL=$$GET1^DIQ(52.25,REJIENS,5)
"RTN","PSOREJP4",80,0)
 ...S SORT=SORT_RXNUM_U_(999-RXFILL)_U_(999-REJECT)
"RTN","PSOREJP4",81,0)
 ...S OUT=""
"RTN","PSOREJP4",82,0)
 ...S OUT=OUT_$$LJ^XLFSTR(RXNUM_"/"_RXFILL,13)
"RTN","PSOREJP4",83,0)
 ...S PATNAME=$E(PATNAME,1,12)_"("_PATLAST4_")"
"RTN","PSOREJP4",84,0)
 ...S PATNAME=$E(PATNAME,1,18)
"RTN","PSOREJP4",85,0)
 ...S OUT=OUT_$$LJ^XLFSTR(PATNAME,20)
"RTN","PSOREJP4",86,0)
 ...S DRUGNAME=$$GET1^DIQ(52,RXIEN,6)
"RTN","PSOREJP4",87,0)
 ...S DRUGNAME=$E(DRUGNAME,1,22)
"RTN","PSOREJP4",88,0)
 ...S OUT=OUT_$$LJ^XLFSTR(DRUGNAME,24)
"RTN","PSOREJP4",89,0)
 ...S REFIENS=RXFILL_","_RXIEN_","
"RTN","PSOREJP4",90,0)
 ...S FILLDATE=$S(RXFILL=0:$$GET1^DIQ(52,RXIEN,22,"I"),1:$$GET1^DIQ(52.1,REFIENS,.01,"I"))
"RTN","PSOREJP4",91,0)
 ...S FILLDATE=$$FMTE^XLFDT(FILLDATE,2)
"RTN","PSOREJP4",92,0)
 ...S OUT=OUT_$$LJ^XLFSTR(FILLDATE,10)
"RTN","PSOREJP4",93,0)
 ...S DETCDATE=$P($$GET1^DIQ(52.25,REJIENS,1,"I"),".")
"RTN","PSOREJP4",94,0)
 ...S DETCDATE=$$FMTE^XLFDT(DETCDATE,2)
"RTN","PSOREJP4",95,0)
 ...S OUT=OUT_$$LJ^XLFSTR(DETCDATE,8)
"RTN","PSOREJP4",96,0)
 ...S PSOTRIC=$$TRIC^PSOREJP1(RXIEN,RXFILL)
"RTN","PSOREJP4",97,0)
 ...S CODE=$$GET1^DIQ(52.25,REJIENS,.01)
"RTN","PSOREJP4",98,0)
 ...S SORTA=1
"RTN","PSOREJP4",99,0)
 ...I CODE'=79,CODE'=88 D
"RTN","PSOREJP4",100,0)
 ....I PSOTRIC=2 S SORTA="3^CHAMPVA - Non-DUR/RTS"
"RTN","PSOREJP4",101,0)
 ....I PSOTRIC=1 S SORTA="4^TRICARE - Non-DUR/RTS"
"RTN","PSOREJP4",102,0)
 ....I 'PSOTRIC D
"RTN","PSOREJP4",103,0)
 .....I $$GET1^DIQ(52.25,REJIENS,30,"I")=1 S SORTA="2^REJECT RESOLUTION REQUIRED" Q
"RTN","PSOREJP4",104,0)
 .....S SORTA="5^OTHER REJECTS"
"RTN","PSOREJP4",105,0)
 ...S ^TMP($J,"PSOREJP4",DIVISION,"SORT",SORTA,SORT,0)=RXIEN_U_REJECT
"RTN","PSOREJP4",106,0)
 ...S ^TMP($J,"PSOREJP4",DIVISION,"SORT",SORTA,SORT,1)=OUT
"RTN","PSOREJP4",107,0)
 ...S OUT="     Rx Status: "_RXSTAT
"RTN","PSOREJP4",108,0)
 ...S ^TMP($J,"PSOREJP4",DIVISION,"SORT",SORTA,SORT,2)=OUT
"RTN","PSOREJP4",109,0)
 ...S RSNCODE=$$GET1^DIQ(52.25,REJIENS,.01)
"RTN","PSOREJP4",110,0)
 ...S OUT="     Reason:  "_RSNCODE
"RTN","PSOREJP4",111,0)
 ...S RSNCODE=$$FIND1^DIC(9002313.93,,,RSNCODE)
"RTN","PSOREJP4",112,0)
 ...S RSNTEXT=$$GET1^DIQ(9002313.93,RSNCODE_",",.02,"E")
"RTN","PSOREJP4",113,0)
 ...S ^TMP($J,"PSOREJP4",DIVISION,"SORT",SORTA,SORT,3)=OUT_" :"_RSNTEXT
"RTN","PSOREJP4",114,0)
 ...S LINE=3
"RTN","PSOREJP4",115,0)
 ...D:$D(^PSRX(RXIEN,"REJ",REJECT,"COM"))
"RTN","PSOREJP4",116,0)
 ....N DIWL,DIWR,X
"RTN","PSOREJP4",117,0)
 ....S LINE=LINE+1,COMM1=1
"RTN","PSOREJP4",118,0)
 ....S II=0
"RTN","PSOREJP4",119,0)
 ....F  S II=$O(^PSRX(RXIEN,"REJ",REJECT,"COM",II)) Q:'II  D
"RTN","PSOREJP4",120,0)
 .....N COMIENS,COMDATE,COMUSER,COMTEXT,TXT
"RTN","PSOREJP4",121,0)
 .....S DIWL=1,DIWR=60
"RTN","PSOREJP4",122,0)
 .....K ^UTILITY($J,"W")
"RTN","PSOREJP4",123,0)
 .....S COMIENS=II_","_REJECT_","_RXIEN_","
"RTN","PSOREJP4",124,0)
 .....S COMDATE=$$GET1^DIQ(52.2551,COMIENS,.01)
"RTN","PSOREJP4",125,0)
 .....S X=COMDATE
"RTN","PSOREJP4",126,0)
 .....S COMTEXT=$$GET1^DIQ(52.2551,COMIENS,2)
"RTN","PSOREJP4",127,0)
 .....S X=X_" - "_COMTEXT
"RTN","PSOREJP4",128,0)
 .....S COMUSER=$$GET1^DIQ(52.2551,COMIENS,1)
"RTN","PSOREJP4",129,0)
 .....S X=X_" ("_COMUSER_")"
"RTN","PSOREJP4",130,0)
 .....D ^DIWP
"RTN","PSOREJP4",131,0)
 .....S COMM2=0
"RTN","PSOREJP4",132,0)
 .....F J=1:1 Q:'$D(^UTILITY($J,"W",1,J,0))  D
"RTN","PSOREJP4",133,0)
 ......S TXT=^UTILITY($J,"W",1,J,0),COMM2=COMM2+1
"RTN","PSOREJP4",134,0)
 ......I COMM1=1 S OUT="   COMMENTS: -"_TXT
"RTN","PSOREJP4",135,0)
 ......E  S OUT="             "_$S(COMM2=1:"-",1:"")_TXT
"RTN","PSOREJP4",136,0)
 ......S ^TMP($J,"PSOREJP4",DIVISION,"SORT",SORTA,SORT,LINE)=OUT
"RTN","PSOREJP4",137,0)
 ......S LINE=LINE+1,(COMM2,COMM1)=COMM1+1
"RTN","PSOREJP4",138,0)
 .....K ^UTILITY($J,"W")
"RTN","PSOREJP4",139,0)
 ...S ^TMP($J,"PSOREJP4",DIVISION,"SORT",SORTA,SORT,LINE+1)=""
"RTN","PSOREJP4",140,0)
 ;derive entry number for message
"RTN","PSOREJP4",141,0)
 S DIVISION=0
"RTN","PSOREJP4",142,0)
 F  S DIVISION=$O(^TMP($J,"PSOREJP4",DIVISION)) Q:+DIVISION=0  D
"RTN","PSOREJP4",143,0)
 .S ENTRYNUM=0
"RTN","PSOREJP4",144,0)
 .S SORTA=""
"RTN","PSOREJP4",145,0)
 .F  S SORTA=$O(^TMP($J,"PSOREJP4",DIVISION,"SORT",SORTA)) Q:SORTA=""  D
"RTN","PSOREJP4",146,0)
 ..S SORT=""
"RTN","PSOREJP4",147,0)
 ..F  S SORT=$O(^TMP($J,"PSOREJP4",DIVISION,"SORT",SORTA,SORT)) Q:SORT']""  D
"RTN","PSOREJP4",148,0)
 ...S ENTRYNUM=ENTRYNUM+1
"RTN","PSOREJP4",149,0)
 ...S OUT=^TMP($J,"PSOREJP4",DIVISION,"SORT",SORTA,SORT,1)
"RTN","PSOREJP4",150,0)
 ...S ^TMP($J,"PSOREJP4",DIVISION,"SORT",SORTA,SORT,1)=$$RJ^XLFSTR(ENTRYNUM,3)_" "_OUT
"RTN","PSOREJP4",151,0)
 ;;
"RTN","PSOREJP4",152,0)
MAIL() ;;
"RTN","PSOREJP4",153,0)
 N DIVISION,RESULT,COUNT,REJECT,I,SORT,COUNT
"RTN","PSOREJP4",154,0)
 S (DIVISION,RESULT)=0
"RTN","PSOREJP4",155,0)
 F  S DIVISION=$O(^TMP($J,"PSOREJP4",DIVISION)) Q:+DIVISION=0  D
"RTN","PSOREJP4",156,0)
 .N XMSUB,XMDUZ,XMTEXT,XMY
"RTN","PSOREJP4",157,0)
 .S XMSUB="ePharmacy - OPEN/UNRESOLVED REJECTS LIST for "_$$GET1^DIQ(52.86,DIVISION,.01)
"RTN","PSOREJP4",158,0)
 .S XMDUZ="OUTPATIENT PHARMACY PACKAGE"
"RTN","PSOREJP4",159,0)
 .S XMTEXT="^TMP($J,""PSOREJP4"",""MESSAGE"","
"RTN","PSOREJP4",160,0)
 .S XMY("G.PSO REJECTS BACKGROUND MESSAGE")=""
"RTN","PSOREJP4",161,0)
 .K ^TMP($J,"PSOREJP4","MESSAGE")
"RTN","PSOREJP4",162,0)
 .S ^TMP($J,"PSOREJP4","MESSAGE",1)="No action has been taken within the past "_^TMP($J,"PSOREJP4","DIVISION",DIVISION)_" days to resolve the rejects"
"RTN","PSOREJP4",163,0)
 .S ^TMP($J,"PSOREJP4","MESSAGE",2)="listed in this message.  They will continue to show on the Third Party"
"RTN","PSOREJP4",164,0)
 .S ^TMP($J,"PSOREJP4","MESSAGE",3)="Payer Rejects - Worklist until acted upon. Please use the Third Party Payer"
"RTN","PSOREJP4",165,0)
 .S ^TMP($J,"PSOREJP4","MESSAGE",4)="Rejects - Worklist option to resolve the rejection or add a comment to the"
"RTN","PSOREJP4",166,0)
 .S ^TMP($J,"PSOREJP4","MESSAGE",5)="rejection."
"RTN","PSOREJP4",167,0)
 .S ^TMP($J,"PSOREJP4","MESSAGE",6)=""
"RTN","PSOREJP4",168,0)
 .S ^TMP($J,"PSOREJP4","MESSAGE",7)="Prescriptions will not be filled for Unresolved DUR, RTS, RRR, TRICARE and"
"RTN","PSOREJP4",169,0)
 .S ^TMP($J,"PSOREJP4","MESSAGE",8)="CHAMPVA rejects."
"RTN","PSOREJP4",170,0)
 .S ^TMP($J,"PSOREJP4","MESSAGE",9)=""
"RTN","PSOREJP4",171,0)
 .S ^TMP($J,"PSOREJP4","MESSAGE",10)="                                                             FILL      REJECT"
"RTN","PSOREJP4",172,0)
 .S ^TMP($J,"PSOREJP4","MESSAGE",11)="  # RX/FILL      PATIENT(ID)         DRUG                    DATE      DATE"
"RTN","PSOREJP4",173,0)
 .S ^TMP($J,"PSOREJP4","MESSAGE",12)="------------------------------------------------------------------------------"
"RTN","PSOREJP4",174,0)
 .S COUNT=13
"RTN","PSOREJP4",175,0)
 .S SORTA=""
"RTN","PSOREJP4",176,0)
 .F  S SORTA=$O(^TMP($J,"PSOREJP4",DIVISION,"SORT",SORTA)) Q:SORTA=""  D 
"RTN","PSOREJP4",177,0)
 ..I SORTA'=1 D
"RTN","PSOREJP4",178,0)
 ...N X,POS,LBL
"RTN","PSOREJP4",179,0)
 ...S LBL=$P(SORTA,"^",2)
"RTN","PSOREJP4",180,0)
 ...S POS=41-($L(LBL)/2+.5\1)
"RTN","PSOREJP4",181,0)
 ...S X="",$P(X," ",42)="",$E(X,POS,POS-1+$L(LBL))=LBL
"RTN","PSOREJP4",182,0)
 ...S COUNT=COUNT+1,^TMP($J,"PSOREJP4","MESSAGE",COUNT)=X
"RTN","PSOREJP4",183,0)
 ..S SORT=""
"RTN","PSOREJP4",184,0)
 ..F  S SORT=$O(^TMP($J,"PSOREJP4",DIVISION,"SORT",SORTA,SORT)) Q:SORT']""  D
"RTN","PSOREJP4",185,0)
 ...S I=0
"RTN","PSOREJP4",186,0)
 ...F  S I=$O(^TMP($J,"PSOREJP4",DIVISION,"SORT",SORTA,SORT,I)) Q:'I  S COUNT=COUNT+1,^TMP($J,"PSOREJP4","MESSAGE",COUNT)=^(I) D
"RTN","PSOREJP4",187,0)
 .D ^XMD
"RTN","PSOREJP4",188,0)
 .S:+$G(XMZ) RESULT=XMZ
"RTN","PSOREJP4",189,0)
 Q RESULT
"RTN","PSOREJU2")
0^15^B60756541
"RTN","PSOREJU2",1,0)
PSOREJU2 ;BIRM/MFR - BPS (ECME) - Clinical Rejects Utilities (1) ;10/15/04
"RTN","PSOREJU2",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,260,287,341,290,358,359,385,403,421,427**;DEC 1997;Build 21
"RTN","PSOREJU2",3,0)
 ;Reference to $$DIVNCPDP^BPSBUTL supported by IA 4719
"RTN","PSOREJU2",4,0)
 ;Reference to File 9002313.23 - BPS NCPDP REASON FOR SERVICE CODE supported by IA 4714
"RTN","PSOREJU2",5,0)
 ;
"RTN","PSOREJU2",6,0)
GET(RX,RFL,REJDATA,REJID,OKCL,CODE,RRRFLG) ; get reject data from subfile 52.25
"RTN","PSOREJU2",7,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJU2",8,0)
 ;         (o) RFL - Refill # (Default: most recent)
"RTN","PSOREJU2",9,0)
 ;         (r) REJDATA(REJECT IEN,FIELD) - Array where these Reject fields will be returned:
"RTN","PSOREJU2",10,0)
 ;                       "BIN" - Payer BIN number
"RTN","PSOREJU2",11,0)
 ;                       "CODE" - Reject Code (79 or 88)
"RTN","PSOREJU2",12,0)
 ;                       "DATE/TIME" - DATE/TIME Reject was detected
"RTN","PSOREJU2",13,0)
 ;                       "PAYER MESSAGE" - Message returned by the payer
"RTN","PSOREJU2",14,0)
 ;                       "REASON" - Reject Reason description (from payer)
"RTN","PSOREJU2",15,0)
 ;                       "INSURANCE NAME" - Patient's Insurance Company Name
"RTN","PSOREJU2",16,0)
 ;                       "INSURANCE POINTER" - Patient Insurance Company Pointer
"RTN","PSOREJU2",17,0)
 ;                       "COB" - Coordination of Benefits
"RTN","PSOREJU2",18,0)
 ;                       "GROUP NAME" - Patient's Insurance Group Name
"RTN","PSOREJU2",19,0)
 ;                       "GROUP NUMBER" - Patient's Insurance Group Number
"RTN","PSOREJU2",20,0)
 ;                       "CARDHOLDER ID" - Patient's Insurance Cardholder ID
"RTN","PSOREJU2",21,0)
 ;                       "PLAN CONTACT" - Plan's Contact (eg., "1-800-...")
"RTN","PSOREJU2",22,0)
 ;                       "PLAN PREVIOUS FILL DATE" - Last time Rx was paid by payer
"RTN","PSOREJU2",23,0)
 ;                       "STATUS" - REJECTS status ("OPEN/UNRESOLVED" or "CLOSED/RESOLVED")
"RTN","PSOREJU2",24,0)
 ;                       "DUR TEXT" - Payer's DUR description
"RTN","PSOREJU2",25,0)
 ;                       "DUR ADD MSG TEXT" - Payer's DUR additional description
"RTN","PSOREJU2",26,0)
 ;                       "OTHER REJECTS" - Other Rejects on the same response
"RTN","PSOREJU2",27,0)
 ;                       "REASON SVC CODE" - Reason for Service Code
"RTN","PSOREJU2",28,0)
 ;                  If REJECT is closed, the following fields will be returned:
"RTN","PSOREJU2",29,0)
 ;                       "CLA CODE" - Clarification Code submitted
"RTN","PSOREJU2",30,0)
 ;                       "PRIOR AUTH TYPE" - Prior Authorization Type
"RTN","PSOREJU2",31,0)
 ;                       "PRIOR AUTH NUMBER" - Prior Authorization Type
"RTN","PSOREJU2",32,0)
 ;                       "CLOSED DATE/TIME" - DATE/TIME Reject was closed
"RTN","PSOREJU2",33,0)
 ;                       "CLOSED BY" - Name of the user responsible for closing Reject
"RTN","PSOREJU2",34,0)
 ;                       "CLOSE REASON" - Reason for closing Reject (text)
"RTN","PSOREJU2",35,0)
 ;                       "CLOSE COMMENTS" - User entered comments at close
"RTN","PSOREJU2",36,0)
 ;         (o) REJID - REJECT IEN in the PRESCRIPTION file for retrieve this REJECT
"RTN","PSOREJU2",37,0)
 ;         (o) OKCL - If set to 1, CLOSED REJECTs will also be returned
"RTN","PSOREJU2",38,0)
 ;         (o) CODE - Only REJECTs with this CODE should be returned
"RTN","PSOREJU2",39,0)
 ;         (o) RRRFLG - If set to 1 with CODE present, also return Reject Resolution Required REJECTs
"RTN","PSOREJU2",40,0)
 ;                      If set to 1 and CODE not passed, then only return RRR REJECTs
"RTN","PSOREJU2",41,0)
 ;
"RTN","PSOREJU2",42,0)
 N REJS,ARRAY,REJFLD,IDX,COM,Z
"RTN","PSOREJU2",43,0)
 ;
"RTN","PSOREJU2",44,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJU2",45,0)
 ;
"RTN","PSOREJU2",46,0)
 K REJDATA
"RTN","PSOREJU2",47,0)
 I '$O(^PSRX(RX,"REJ",0)) Q
"RTN","PSOREJU2",48,0)
 ;
"RTN","PSOREJU2",49,0)
 K REJS S RFL=+$G(RFL)
"RTN","PSOREJU2",50,0)
 I $G(REJID) D
"RTN","PSOREJU2",51,0)
 . I +$P($G(^PSRX(RX,"REJ",REJID,0)),"^",4)'=RFL Q
"RTN","PSOREJU2",52,0)
 . I '$G(OKCL),$P($G(^PSRX(RX,"REJ",REJID,0)),"^",5) Q
"RTN","PSOREJU2",53,0)
 . S REJS(REJID)=""
"RTN","PSOREJU2",54,0)
 E  D
"RTN","PSOREJU2",55,0)
 . S IDX=999
"RTN","PSOREJU2",56,0)
 . F  S IDX=$O(^PSRX(RX,"REJ",IDX),-1) Q:'IDX  D
"RTN","PSOREJU2",57,0)
 . . I +$P($G(^PSRX(RX,"REJ",IDX,0)),"^",4)'=RFL Q
"RTN","PSOREJU2",58,0)
 . . I '$G(OKCL),$P($G(^PSRX(RX,"REJ",IDX,0)),"^",5) Q
"RTN","PSOREJU2",59,0)
 . . S REJS(IDX)=""
"RTN","PSOREJU2",60,0)
 I '$D(REJS) Q
"RTN","PSOREJU2",61,0)
 ;
"RTN","PSOREJU2",62,0)
 S IDX=0
"RTN","PSOREJU2",63,0)
 F  S IDX=$O(REJS(IDX)) Q:'IDX  D
"RTN","PSOREJU2",64,0)
 . N SKIP
"RTN","PSOREJU2",65,0)
 . K ARRAY D GETS^DIQ(52.25,IDX_","_RX_",","*","","ARRAY")
"RTN","PSOREJU2",66,0)
 . K REJFLD M REJFLD=ARRAY(52.25,IDX_","_RX_",")
"RTN","PSOREJU2",67,0)
 . ;
"RTN","PSOREJU2",68,0)
 . ; check CODE and RRRFLG to see if we want this reject data
"RTN","PSOREJU2",69,0)
 . S SKIP=0    ; default is to include it
"RTN","PSOREJU2",70,0)
 . I $G(CODE)'="",REJFLD(.01)'=CODE S SKIP=1               ; CODE exists and doesn't match this reject
"RTN","PSOREJU2",71,0)
 . I SKIP,$G(RRRFLG),$G(REJFLD(30))="YES" S SKIP=0         ;  but include these if RRRFLG is true and this is an RRR reject
"RTN","PSOREJU2",72,0)
 . I $G(CODE)="",$G(RRRFLG),$G(REJFLD(30))'="YES" S SKIP=1 ; want only RRR rejects in this case
"RTN","PSOREJU2",73,0)
 . I SKIP Q    ; get out if we're skipping this one
"RTN","PSOREJU2",74,0)
 . ;
"RTN","PSOREJU2",75,0)
 . S REJDATA(IDX,"CODE")=$G(REJFLD(.01))
"RTN","PSOREJU2",76,0)
 . S REJDATA(IDX,"DATE/TIME")=$G(REJFLD(1))
"RTN","PSOREJU2",77,0)
 . S REJDATA(IDX,"PAYER MESSAGE")=$G(REJFLD(2))
"RTN","PSOREJU2",78,0)
 . S REJDATA(IDX,"REASON")=$G(REJFLD(3))
"RTN","PSOREJU2",79,0)
 . S REJDATA(IDX,"PHARMACIST")=$G(REJFLD(4))
"RTN","PSOREJU2",80,0)
 . S REJDATA(IDX,"INSURANCE NAME")=$G(REJFLD(20))
"RTN","PSOREJU2",81,0)
 . S REJDATA(IDX,"INSURANCE POINTER")=$G(REJFLD(33))  ;PSO*427
"RTN","PSOREJU2",82,0)
 . S REJDATA(IDX,"COB")=$G(REJFLD(27))
"RTN","PSOREJU2",83,0)
 . S REJDATA(IDX,"GROUP NAME")=$G(REJFLD(6))
"RTN","PSOREJU2",84,0)
 . S REJDATA(IDX,"GROUP NUMBER")=$G(REJFLD(21))
"RTN","PSOREJU2",85,0)
 . S REJDATA(IDX,"BIN")=$G(REJFLD(29))
"RTN","PSOREJU2",86,0)
 . S REJDATA(IDX,"CARDHOLDER ID")=$G(REJFLD(22))
"RTN","PSOREJU2",87,0)
 . S REJDATA(IDX,"PLAN CONTACT")=$G(REJFLD(7))
"RTN","PSOREJU2",88,0)
 . S REJDATA(IDX,"PLAN PREVIOUS FILL DATE")=$G(REJFLD(8))
"RTN","PSOREJU2",89,0)
 . S REJDATA(IDX,"STATUS")=$G(REJFLD(9))
"RTN","PSOREJU2",90,0)
 . S REJDATA(IDX,"OTHER REJECTS")=$G(REJFLD(17))
"RTN","PSOREJU2",91,0)
 . S REJDATA(IDX,"DUR TEXT")=$G(REJFLD(18))
"RTN","PSOREJU2",92,0)
 . S REJDATA(IDX,"DUR ADD MSG TEXT")=$G(REJFLD(28))
"RTN","PSOREJU2",93,0)
 . S REJDATA(IDX,"REASON SVC CODE")=$G(REJFLD(14))
"RTN","PSOREJU2",94,0)
 . S REJDATA(IDX,"RESPONSE IEN")=$G(REJFLD(16))
"RTN","PSOREJU2",95,0)
 . S REJDATA(IDX,"RRR FLAG")=$G(REJFLD(30))  ;PSO*421
"RTN","PSOREJU2",96,0)
 . S REJDATA(IDX,"RRR THRESHOLD AMT")=$G(REJFLD(31))  ;PSO*421
"RTN","PSOREJU2",97,0)
 . S REJDATA(IDX,"RRR GROSS AMT DUE")=$G(REJFLD(32))  ;PSO*421
"RTN","PSOREJU2",98,0)
 . I '$G(OKCL) Q
"RTN","PSOREJU2",99,0)
 . S REJDATA(IDX,"CLOSED DATE/TIME")=$G(REJFLD(10))
"RTN","PSOREJU2",100,0)
 . S REJDATA(IDX,"CLOSED BY")=$G(REJFLD(11))
"RTN","PSOREJU2",101,0)
 . S REJDATA(IDX,"CLOSE REASON")=$G(REJFLD(12))
"RTN","PSOREJU2",102,0)
 . S REJDATA(IDX,"CLOSE COMMENTS")=$G(REJFLD(13))
"RTN","PSOREJU2",103,0)
 . S REJDATA(IDX,"COD1")=$G(REJFLD(14))
"RTN","PSOREJU2",104,0)
 . S REJDATA(IDX,"COD2")=$G(REJFLD(15))
"RTN","PSOREJU2",105,0)
 . S REJDATA(IDX,"COD3")=$G(REJFLD(19))
"RTN","PSOREJU2",106,0)
 . S REJDATA(IDX,"CLA CODE")=$G(REJFLD(24))
"RTN","PSOREJU2",107,0)
 . S REJDATA(IDX,"PRIOR AUTH TYPE")=$G(REJFLD(25))
"RTN","PSOREJU2",108,0)
 . S REJDATA(IDX,"PRIOR AUTH NUMBER")=$G(REJFLD(26))
"RTN","PSOREJU2",109,0)
 . S COM=0 F  S COM=$O(^PSRX(RX,"REJ",IDX,"COM",COM)) Q:'COM  D
"RTN","PSOREJU2",110,0)
 . . S Z=^PSRX(RX,"REJ",IDX,"COM",COM,0)
"RTN","PSOREJU2",111,0)
 . . S REJDATA(IDX,"COMMENTS",COM,"DATE/TIME")=$P(Z,"^")
"RTN","PSOREJU2",112,0)
 . . S REJDATA(IDX,"COMMENTS",COM,"USER")=$P(Z,"^",2)
"RTN","PSOREJU2",113,0)
 . . S REJDATA(IDX,"COMMENTS",COM,"COMMENTS")=$P(Z,"^",3)
"RTN","PSOREJU2",114,0)
 Q
"RTN","PSOREJU2",115,0)
 ;
"RTN","PSOREJU2",116,0)
HELP(OPTS) ; Display the Help Text for the DUR handling options (OVERRIDE/IGNORE/STOP/QUIT)
"RTN","PSOREJU2",117,0)
 ;
"RTN","PSOREJU2",118,0)
 I OPTS["O" D
"RTN","PSOREJU2",119,0)
 . W !?1,"(O)verride - This option will provide the prompts for the code sets needed to"
"RTN","PSOREJU2",120,0)
 . W !?1,"             override this reject and get a payable 3rd party claim. Before"
"RTN","PSOREJU2",121,0)
 . W !?1,"             you select this option, you may need to call the 3rd party payer"
"RTN","PSOREJU2",122,0)
 . W !?1,"             to determine which code sets are needed to override a particular"
"RTN","PSOREJU2",123,0)
 . W !?1,"             reject. Once the proper override is accepted the label will print"
"RTN","PSOREJU2",124,0)
 . W !?1,"             and the prescription can be filled."
"RTN","PSOREJU2",125,0)
 ;
"RTN","PSOREJU2",126,0)
 I OPTS["I" D
"RTN","PSOREJU2",127,0)
 . W !?1,"(I)gnore   - Choosing Ignore will by-pass 3rd party processing and will allow"
"RTN","PSOREJU2",128,0)
 . W !?1,"             you to print a label and fill the prescription. This essentially"
"RTN","PSOREJU2",129,0)
 . W !?1,"             ignores the clinical safety issues suggested by the 3rd party"
"RTN","PSOREJU2",130,0)
 . W !?1,"             payer and will NOT result in a payable claim."
"RTN","PSOREJU2",131,0)
 ;           
"RTN","PSOREJU2",132,0)
 I OPTS["Q" D
"RTN","PSOREJU2",133,0)
 . W !?1,"(Q)uit     - Choosing Quit will postpone the processing of this prescription"
"RTN","PSOREJU2",134,0)
 . W !?1,"             until this 3rd party reject is resolved. A label will not be"
"RTN","PSOREJU2",135,0)
 . W !?1,"             printed for this prescription and it can not be filled/dispensed"
"RTN","PSOREJU2",136,0)
 . W !?1,"             until this reject is resolved. Rejects can be resolved through"
"RTN","PSOREJU2",137,0)
 . W !?1,"             the Worklist option under the ePharmacy menu."
"RTN","PSOREJU2",138,0)
 Q
"RTN","PSOREJU2",139,0)
 ;
"RTN","PSOREJU2",140,0)
DVINFO(RX,RFL,LM) ; Returns header displayable Division Information
"RTN","PSOREJU2",141,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOREJU2",142,0)
 ;       (o) RFL  - Refill # (Default: most recent)
"RTN","PSOREJU2",143,0)
 ;       (o) LM   - ListManager format? (1 - Yes / 0 - No) - Default: 0
"RTN","PSOREJU2",144,0)
 N TXT,DVINFO,NCPNPI,DVIEN
"RTN","PSOREJU2",145,0)
 S DVIEN=+$$RXSITE^PSOBPSUT(RX,RFL)
"RTN","PSOREJU2",146,0)
 S DVINFO="Division : "_$$GET1^DIQ(59,DVIEN,.01)
"RTN","PSOREJU2",147,0)
 ;Display both NPI and NCPDP numbers - PSO*7.0*421
"RTN","PSOREJU2",148,0)
 S NCPNPI=$$DIVNCPDP^BPSBUTL(DVIEN)
"RTN","PSOREJU2",149,0)
 S $E(DVINFO,33)="NPI: "_$P(NCPNPI,U,2)
"RTN","PSOREJU2",150,0)
 S $E(DVINFO,$S($G(LM):59,1:52))="NCPDP: "_$P(NCPNPI,U)
"RTN","PSOREJU2",151,0)
 Q DVINFO
"RTN","PSOREJU2",152,0)
 ;
"RTN","PSOREJU2",153,0)
PTINFO(RX,LM) ; Returns header displayable Patient Information
"RTN","PSOREJU2",154,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOREJU2",155,0)
 ;       (o) LM   - ListManager format? (1 - Yes / 0 - No) - Default: 0
"RTN","PSOREJU2",156,0)
 N DFN,VADM,PTINFO,SSN4
"RTN","PSOREJU2",157,0)
 S DFN=$$GET1^DIQ(52,RX,2,"I") D DEM^VADPT S SSN4=$P($G(VADM(2)),"^",2)
"RTN","PSOREJU2",158,0)
 S PTINFO="Patient  : "_$E($G(VADM(1)),1,$S($G(LM):24,1:20))_"("_$E(SSN4,$L(SSN4)-3,$L(SSN4))_")"
"RTN","PSOREJU2",159,0)
 S PTINFO=PTINFO_"  Sex: "_$P($G(VADM(5)),"^")
"RTN","PSOREJU2",160,0)
 S $E(PTINFO,$S($G(LM):61,1:54))="DOB: "_$P($G(VADM(3)),"^",2)_"("_$P($G(VADM(4)),"^")_")"
"RTN","PSOREJU2",161,0)
 Q PTINFO
"RTN","PSOREJU2",162,0)
 ;
"RTN","PSOREJU2",163,0)
RETRXF(RX,RFL,ONOFF) ; - Set/Reset the Re-transmission flag
"RTN","PSOREJU2",164,0)
 ;Input: (r) RX    - Rx IEN (#52)
"RTN","PSOREJU2",165,0)
 ;       (r) RFL   - Refill IEN (#52.1)
"RTN","PSOREJU2",166,0)
 ;       (o) ONOFF - Turn flag ON or OFF (1 - ON / 0 - OFF) (Default: OFF) 
"RTN","PSOREJU2",167,0)
 I RFL>0,'$D(^PSRX(RX,1,RFL,0)) QUIT
"RTN","PSOREJU2",168,0)
 N DA,DIE,DR
"RTN","PSOREJU2",169,0)
 S DR="82///"_$S($G(ONOFF):"YES",1:"@")
"RTN","PSOREJU2",170,0)
 I 'RFL S DA=RX,DIE="^PSRX("
"RTN","PSOREJU2",171,0)
 I RFL S DA(1)=RX,DA=RFL,DIE="^PSRX("_RX_",1,"
"RTN","PSOREJU2",172,0)
 D ^DIE
"RTN","PSOREJU2",173,0)
 Q
"RTN","PSOREJU2",174,0)
 ;
"RTN","PSOREJU2",175,0)
REASON(TXT) ; Extracts the Reason for service code from the REASON text field
"RTN","PSOREJU2",176,0)
 ; Input: (r) TXT  - Reason text (e.g., NN Reason for Service Code Text)
"RTN","PSOREJU2",177,0)
 ;Output:   REASON - NN (if on valid and on file (#9002313.23), null otherwise)
"RTN","PSOREJU2",178,0)
 N REASON,DIC,X,Y
"RTN","PSOREJU2",179,0)
 S REASON=$P(TXT," ") I $L(REASON)'=2 Q ""
"RTN","PSOREJU2",180,0)
 S DIC=9002313.23,X=REASON D ^DIC I Y<0 Q ""
"RTN","PSOREJU2",181,0)
 Q REASON
"RTN","PSOREJU2",182,0)
 ;
"RTN","PSOREJU2",183,0)
SETOPN(RX,REJ) ; - Set the Reject RE-OPENED flag to YES
"RTN","PSOREJU2",184,0)
 ;Input: (r) RX    - Rx IEN (#52)
"RTN","PSOREJU2",185,0)
 ;       (r) REJ   - Reject IEN (#52.25)
"RTN","PSOREJU2",186,0)
 ;       
"RTN","PSOREJU2",187,0)
 I '$D(^PSRX(RX,"REJ",REJ)) Q
"RTN","PSOREJU2",188,0)
 N DIE,DA,DR
"RTN","PSOREJU2",189,0)
 S DIE="^PSRX("_RX_",""REJ"",",DA(1)=RX,DA=REJ,DR="23///YES" D ^DIE
"RTN","PSOREJU2",190,0)
 Q
"RTN","PSOREJU2",191,0)
 ;
"RTN","PSOREJU2",192,0)
PRT(FIELD,P,L) ; Sets the lines for fields that require text wrapping
"RTN","PSOREJU2",193,0)
 ;Input: FIELD - Subscript name from the DATA(REJ,FIELD) array
"RTN","PSOREJU2",194,0)
 ;         P   - Position where the content should be printed
"RTN","PSOREJU2",195,0)
 ;         L   - Lenght of the text on each line
"RTN","PSOREJU2",196,0)
 N TXT,I
"RTN","PSOREJU2",197,0)
 S TXT=DATA(REJ,FIELD) I $L(TXT)'>L W ?P,TXT Q
"RTN","PSOREJU2",198,0)
 F I=1:1 Q:TXT=""  D
"RTN","PSOREJU2",199,0)
 . I I=1 W ?P,$E(TXT,1,L),! S TXT=$E(TXT,L+1,999) Q
"RTN","PSOREJU2",200,0)
 . W ?P,$E(TXT,1,L) S TXT=$E(TXT,L+1,999) W:TXT'="" !
"RTN","PSOREJU2",201,0)
 Q
"RTN","PSOREJU2",202,0)
 ;
"RTN","PSOREJU2",203,0)
PA() ; - Ask for Prior Authorization Type and Number
"RTN","PSOREJU2",204,0)
 ; Called by PA^PSOREJP1 (PA acton) and SMA^PSOREJP1 (SMA action)
"RTN","PSOREJU2",205,0)
 ;
"RTN","PSOREJU2",206,0)
 ;Output:(PAT^PAN) PAT - Prior Authorization Type
"RTN","PSOREJU2",207,0)
 ;                 (See DD File #9002313.26 for possible values)
"RTN","PSOREJU2",208,0)
 ;                 PAN - Prior Authorization Number (11 digits)
"RTN","PSOREJU2",209,0)
 ;        
"RTN","PSOREJU2",210,0)
 N DIC,DIR,DIROUT,DIRUT,DTOUT,DUOUT,PAN,PAT,X,Y
"RTN","PSOREJU2",211,0)
 S DIC("B")=0
"RTN","PSOREJU2",212,0)
 S DIC(0)="QEAM",DIC=9002313.26,DIC("A")="Prior Authorization Type: "
"RTN","PSOREJU2",213,0)
 D ^DIC
"RTN","PSOREJU2",214,0)
 I ($D(DUOUT))!($D(DTOUT))!(Y=-1) Q "^"  ;Check for "^" or timeout
"RTN","PSOREJU2",215,0)
 S PAT=$P(Y,U,2)
"RTN","PSOREJU2",216,0)
 ;
"RTN","PSOREJU2",217,0)
 K DIR,DIC,X,Y
"RTN","PSOREJU2",218,0)
 S DIR(0)="52.25,26",DIR("A")="Prior Authorization Number"
"RTN","PSOREJU2",219,0)
 S DIR("?")="^D PANHLP^PSOREJU2",DIR("??")=""
"RTN","PSOREJU2",220,0)
 D ^DIR I (Y["^")!$D(DTOUT) Q "^"
"RTN","PSOREJU2",221,0)
 S PAN=Y
"RTN","PSOREJU2",222,0)
 Q (PAT_"^"_PAN)
"RTN","PSOREJU2",223,0)
 ;
"RTN","PSOREJU2",224,0)
PANHLP ; Prior Authorization Number Help
"RTN","PSOREJU2",225,0)
 W "OR you may leave it blank if the claim does not require a number."
"RTN","PSOREJU2",226,0)
 Q
"RTN","PSOREJU3")
0^24^B84746710
"RTN","PSOREJU3",1,0)
PSOREJU3 ;BIRM/LJE - BPS (ECME) - Clinical Rejects Utilities (3) ;04/25/08
"RTN","PSOREJU3",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**287,290,358,359,385,421,427**;DEC 1997;Build 21
"RTN","PSOREJU3",3,0)
 ;References to 9002313.99 supported by IA 4305
"RTN","PSOREJU3",4,0)
 ;Reference to $$CLAIM^BPSBUTL supported by IA 4719
"RTN","PSOREJU3",5,0)
 ;
"RTN","PSOREJU3",6,0)
 Q
"RTN","PSOREJU3",7,0)
 ;
"RTN","PSOREJU3",8,0)
TRICCHK(RX,RFL,RESP,FROM,RVTX) ;check to see if Rx is non-billable or in an "In Progress" state on ECME
"RTN","PSOREJU3",9,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJU3",10,0)
 ;         (r) RFL - REFILL
"RTN","PSOREJU3",11,0)
 ;         (o) RESP - Response from $$EN^BPSNCPDP api
"RTN","PSOREJU3",12,0)
 ;   TRICCHK assumes that the calling routine has validated that the fill is TRICARE or CHAMPVA.
"RTN","PSOREJU3",13,0)
 ;
"RTN","PSOREJU3",14,0)
 ;  - \Need to be mindful of foreground and background processing.
"RTN","PSOREJU3",15,0)
 ;
"RTN","PSOREJU3",16,0)
 N ETOUT,ESTAT,PSOBEI
"RTN","PSOREJU3",17,0)
 S:'$D(FROM) FROM="" S ESTAT="",ESTAT=$P(RESP,"^",4),NFROM=0 I FROM="PL"!(FROM="PC") S NFROM=1
"RTN","PSOREJU3",18,0)
 Q:ESTAT["PAYABLE"!(ESTAT["REJECTED")
"RTN","PSOREJU3",19,0)
 S PSOBEI=$$ELIGDISP^PSOREJP1(RX,RFL)
"RTN","PSOREJU3",20,0)
 I ESTAT["IN PROGRESS",FROM="RRL"!($G(RVTX)="RX RELEASE-NDC CHANGE") D  Q
"RTN","PSOREJU3",21,0)
 . I 'NFROM D
"RTN","PSOREJU3",22,0)
 . . W !!,PSOBEI_" Prescription "_$$GET1^DIQ(52,RX,".01")_" cannot be released until ECME 'IN PROGRESS'"
"RTN","PSOREJU3",23,0)
 . . W !,"status is resolved payable.",!!
"RTN","PSOREJU3",24,0)
 ;
"RTN","PSOREJU3",25,0)
 I $D(RESP) D  Q
"RTN","PSOREJU3",26,0)
 . I +RESP=6 W:'NFROM&('$G(CMOP)) !!,"Inactive ECME "_PSOBEI,!! D  Q
"RTN","PSOREJU3",27,0)
 . . S ACT="Inactive ECME "_PSOBEI D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOREJU3",28,0)
 . I +RESP=2!(+RESP=3) N PSONBILL S PSONBILL=1 D TRIC2 Q
"RTN","PSOREJU3",29,0)
 . I +RESP=4!(ESTAT["IN PROGRESS") N PSONPROG S PSONPROG=1 D TRIC2 Q
"RTN","PSOREJU3",30,0)
 Q
"RTN","PSOREJU3",31,0)
 ;
"RTN","PSOREJU3",32,0)
TRIC2 ;
"RTN","PSOREJU3",33,0)
 N ACTION,REJCOD,REJ,DIR,DIRUT,REA,DA,PSCAN,PSOTRIC,ZZZ
"RTN","PSOREJU3",34,0)
 S PSOTRIC=1,REJ=9999999999
"RTN","PSOREJU3",35,0)
 I $G(CMOP)&($G(PSONPROG)) D TACT Q 
"RTN","PSOREJU3",36,0)
 Q:$G(CMOP)
"RTN","PSOREJU3",37,0)
 I 'NFROM D DISPLAY(RX,REJ)
"RTN","PSOREJU3",38,0)
 I 'NFROM&($G(PSONPROG)) D  D SUSP Q
"RTN","PSOREJU3",39,0)
 . W !!,"This prescription will be suspended.  After the third party claim is resolved,"
"RTN","PSOREJU3",40,0)
 . W !,"it may be printed or pulled early from suspense.",!
"RTN","PSOREJU3",41,0)
 . R !!,"Press <RETURN> to continue...",ZZZ:60,!
"RTN","PSOREJU3",42,0)
 I NFROM&($G(PSONPROG)) D TACT Q
"RTN","PSOREJU3",43,0)
 Q:NFROM
"RTN","PSOREJU3",44,0)
TRIC3 ;
"RTN","PSOREJU3",45,0)
 D MSG
"RTN","PSOREJU3",46,0)
 I FROM="PL"!(FROM="PC") D SUSP Q
"RTN","PSOREJU3",47,0)
 ;cnf, PSO*7*358, add code for options
"RTN","PSOREJU3",48,0)
 N ACTION,DIR,DIRUT,OPTS,DEF,COM
"RTN","PSOREJU3",49,0)
TRIC4 S DIR(0)="SO^",DIR("A")="",OPTS="DQ",DEF="D"
"RTN","PSOREJU3",50,0)
 ;reference to ^XUSEC( supported by IA 10076
"RTN","PSOREJU3",51,0)
 I $D(^XUSEC("PSO TRICARE/CHAMPVA",DUZ)) S OPTS=OPTS_"I" ;PSO*7.0*358, if user has security key, include IGNORE in TRICARE/CHAMPVA options
"RTN","PSOREJU3",52,0)
 S:(OPTS["D") DIR(0)=DIR(0)_"D:(D)iscontinue - DO NOT FILL PRESCRIPTION;",DIR("A")=DIR("A")_"(D)iscontinue,"
"RTN","PSOREJU3",53,0)
 S:(OPTS["Q") DIR(0)=DIR(0)_"Q:(Q)UIT - SEND TO WORKLIST (REQUIRES INTERVENTION);",DIR("A")=DIR("A")_"(Q)uit,"
"RTN","PSOREJU3",54,0)
 S:(OPTS["I") DIR(0)=DIR(0)_"I:(I)GNORE - FILL Rx WITHOUT CLAIM SUBMISSION;",DIR("A")=DIR("A")_"(I)gnore,"
"RTN","PSOREJU3",55,0)
 S $E(DIR(0),$L(DIR(0)))="",$E(DIR("A"),$L(DIR("A")))="",DIR("??")="^D HELP^PSOREJU2("""_OPTS_""")"
"RTN","PSOREJU3",56,0)
 S:$G(DEF)'="" DIR("B")=DEF D ^DIR I $D(DIRUT) S Y="Q" W !
"RTN","PSOREJU3",57,0)
 ;
"RTN","PSOREJU3",58,0)
 S ACTION=Y
"RTN","PSOREJU3",59,0)
 I ACTION="D" S ACTION=$$DC^PSOREJU1(RX,ACTION)    ;cnf, PSO*7*358
"RTN","PSOREJU3",60,0)
 I ACTION="Q" D WRKLST^PSOREJU4(RX,RFL,,DUZ,DT,1,"",RESP)    ;cnf, PSO*7*358
"RTN","PSOREJU3",61,0)
 I ACTION="I" G TRIC4:'$$CONT^PSOREJU1() S COM=$$TCOM^PSOREJP3(RX,RFL) G TRIC4:COM="^" G TRIC4:'$$SIG^PSOREJU1() D
"RTN","PSOREJU3",62,0)
 . D CLOSE^PSOREJUT(RX,RFL,REJ,DUZ,6,COM)   ;TRICARE/CHAMPVA non-billable should have only 1 reject - eT/eC
"RTN","PSOREJU3",63,0)
 . D AUDIT^PSOTRI(RX,RFL,,COM,$S($$PSOET^PSOREJP3(RX,RFL):"N",1:"R"),$P(RESP,"^",3))
"RTN","PSOREJU3",64,0)
 Q
"RTN","PSOREJU3",65,0)
 ;
"RTN","PSOREJU3",66,0)
MSG ;
"RTN","PSOREJU3",67,0)
 W !!,"This is a non-billable "_$$ELIGDISP^PSOREJP1(RX,RFL)_" prescription."    ;cnf, PSO*7*358
"RTN","PSOREJU3",68,0)
 Q
"RTN","PSOREJU3",69,0)
SUSP ;Suspense Rx due to IN PROGRESS status in ECME
"RTN","PSOREJU3",70,0)
 N DA,ACT,RX0,SD,RXS,PSOWFLG,DIK,RXN,XFLAG,RXP,DD,DO,X,Y,DIC,VALMSG,COMM,LFD,DFLG,RXCMOP
"RTN","PSOREJU3",71,0)
 N PSOQFLAG,PSORXZD,PSOQFLAG,PSOKSPPL,PSOZXPPL,PSOZXPI,RXLTOP
"RTN","PSOREJU3",72,0)
 S DA=RX D SUS^PSORXL1
"RTN","PSOREJU3",73,0)
TACT ;
"RTN","PSOREJU3",74,0)
 S ACT=$$ELIGDISP^PSOREJP1(RX,RFL)_"-Rx placed on Suspense due to"_$S($G(PSONPROG):" ECME IN PROGRESS status",$G(PSONBILL):"the Rx being Non-billable",1:"")
"RTN","PSOREJU3",75,0)
 I '$G(DUZ) N DUZ S DUZ=.5
"RTN","PSOREJU3",76,0)
 D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOREJU3",77,0)
 Q
"RTN","PSOREJU3",78,0)
 ;
"RTN","PSOREJU3",79,0)
DISPLAY(RX,REJ,KEY,RRR) ; - Displays REJECT information
"RTN","PSOREJU3",80,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJU3",81,0)
 ;         (r) REJ - REJECT ID (IEN)
"RTN","PSOREJU3",82,0)
 ;         (o) KEY - Display "Press any KEY to continue..." (1-YES/0-NO) (Default: 0)
"RTN","PSOREJU3",83,0)
 ;         (o) RRR - Reject Resolution Required information  Flag(0/1)^Threshold Amt^Gross Amt Due  (Default: 0)
"RTN","PSOREJU3",84,0)
 ;                   If Flag = 0, there is no Reject Resolution Required reject code.  Parameter added with PSO*421
"RTN","PSOREJU3",85,0)
 ;         
"RTN","PSOREJU3",86,0)
 Q:$G(NFROM)
"RTN","PSOREJU3",87,0)
 I '$G(RX)!'$G(REJ) Q
"RTN","PSOREJU3",88,0)
 I '$D(^PSRX(RX,"REJ",REJ))&('$G(PSONBILL))&('$G(PSONPROG)) Q
"RTN","PSOREJU3",89,0)
 ;
"RTN","PSOREJU3",90,0)
 N DATA,RFL,LINE,%
"RTN","PSOREJU3",91,0)
 S RFL=+$$GET1^DIQ(52.25,REJ_","_RX,5)
"RTN","PSOREJU3",92,0)
 I '$G(PSONBILL)&('$G(PSONPROG)) D GET^PSOREJU2(RX,RFL,.DATA,REJ) I '$D(DATA(REJ)) Q
"RTN","PSOREJU3",93,0)
 ;
"RTN","PSOREJU3",94,0)
 D HDR
"RTN","PSOREJU3",95,0)
 S $P(LINE,"-",74)="" W !?3,LINE
"RTN","PSOREJU3",96,0)
 W !?3,$$DVINFO^PSOREJU2(RX,RFL)
"RTN","PSOREJU3",97,0)
 W !?3,$$PTINFO^PSOREJU2(RX)
"RTN","PSOREJU3",98,0)
 W !?3,"Rx/Drug  : ",$$GET1^DIQ(52,RX,.01),"/",RFL," - ",$E($$GET1^DIQ(52,RX,6),1,20),?54
"RTN","PSOREJU3",99,0)
 W:'$G(PSONBILL)&('$G(PSONPROG)) "ECME#: ",$P($$CLAIM^BPSBUTL(RX,RFL),U,6)
"RTN","PSOREJU3",100,0)
 D TYPE G DISP2:$G(PSONBILL)!($G(PSONPROG))
"RTN","PSOREJU3",101,0)
 I $G(DATA(REJ,"PAYER MESSAGE"))'="" W !?3,"Payer Message: " D PRT^PSOREJU2("PAYER MESSAGE",18,58)
"RTN","PSOREJU3",102,0)
 I $G(DATA(REJ,"DUR TEXT"))'="" W !?3,"DUR Text     : ",DATA(REJ,"DUR TEXT")
"RTN","PSOREJU3",103,0)
 W !?3,"Insurance    : ",DATA(REJ,"INSURANCE NAME"),?50,"Contact: ",DATA(REJ,"PLAN CONTACT")
"RTN","PSOREJU3",104,0)
 W !?3,"Group Name   : ",DATA(REJ,"GROUP NAME"),?45,"Group Number: ",DATA(REJ,"GROUP NUMBER")
"RTN","PSOREJU3",105,0)
 I $G(DATA(REJ,"CARDHOLDER ID"))'="" W !?3,"Cardholder ID: ",DATA(REJ,"CARDHOLDER ID")
"RTN","PSOREJU3",106,0)
 I DATA(REJ,"PLAN PREVIOUS FILL DATE")'="" D
"RTN","PSOREJU3",107,0)
 . W !?3,"Last Fill Dt.: ",DATA(REJ,"PLAN PREVIOUS FILL DATE")
"RTN","PSOREJU3",108,0)
 . W:DATA(REJ,"PLAN PREVIOUS FILL DATE")'="" "   (from payer)"
"RTN","PSOREJU3",109,0)
 I $G(RRR) D   ;added with PSO*421
"RTN","PSOREJU3",110,0)
 . W !!?3,"Reject Resolution Required"
"RTN","PSOREJU3",111,0)
 . W !?3,"Gross Amount Due ($"_$J($P(RRR,U,3)*100\1/100,0,2)_") is greater than or equal to"
"RTN","PSOREJU3",112,0)
 . W !?3,"Threshold Dollar Amount ($"_$P(RRR,U,2)_")"
"RTN","PSOREJU3",113,0)
 . W !?3,"Please select Quit to resolve this reject on the Reject Worklist."
"RTN","PSOREJU3",114,0)
DISP2 ;
"RTN","PSOREJU3",115,0)
 W !?3,LINE,$C(7) I $G(KEY) W !?3,"Press <RETURN> to continue..." R %:DTIME W !
"RTN","PSOREJU3",116,0)
 Q
"RTN","PSOREJU3",117,0)
 ;
"RTN","PSOREJU3",118,0)
TYPE ;
"RTN","PSOREJU3",119,0)
 I $G(PSONBILL)!($G(PSONPROG)) D  Q
"RTN","PSOREJU3",120,0)
 . D NOW^%DTC S Y=% D DD^%DT
"RTN","PSOREJU3",121,0)
 . W !?3,"Date/Time: "_$$FMTE^XLFDT(Y)
"RTN","PSOREJU3",122,0)
 . W !?3,"Reason   : ",$S($G(PSONBILL):"Drug not billable.",$G(PSONPROG):"ECME Status is in an 'IN PROGRESS' state and cannot be filled",1:"")
"RTN","PSOREJU3",123,0)
 ;
"RTN","PSOREJU3",124,0)
 I $G(DATA(REJ,"REASON"))'="" W !?3,"Reason   : " D PRT^PSOREJU2("REASON",14,62)
"RTN","PSOREJU3",125,0)
 N RTXT,OCODE,OTXT,I
"RTN","PSOREJU3",126,0)
 S (OTXT,RTXT,OCODE)="",RTXT=$S(DATA(REJ,"CODE")=79:"REFILL TOO SOON",DATA(REJ,"CODE")=88:"DUR REJECT",1:$$EXP^PSOREJP1(DATA(REJ,"CODE")))_" ("_DATA(REJ,"CODE")_")"
"RTN","PSOREJU3",127,0)
 F I=1:1 S OCODE=$P(DATA(REJ,"OTHER REJECTS"),",",I) Q:OCODE=""   D
"RTN","PSOREJU3",128,0)
 . S OTXT=OTXT_", "_$S(OCODE=79:"REFILL TOO SOON",OCODE=88:"DUR REJECT",1:$$EXP^PSOREJP1(OCODE))_" ("_OCODE_")"
"RTN","PSOREJU3",129,0)
 S RTXT=RTXT_OTXT_".  Received on "_$$FMTE^XLFDT($G(DATA(REJ,"DATE/TIME")))_"."
"RTN","PSOREJU3",130,0)
 S OTXT=""
"RTN","PSOREJU3",131,0)
 W !?3,"Reject(s): " D WRAP(RTXT,14)
"RTN","PSOREJU3",132,0)
 Q
"RTN","PSOREJU3",133,0)
 ;
"RTN","PSOREJU3",134,0)
WRAP(PSOTXT,INDENT) ;
"RTN","PSOREJU3",135,0)
 N I,K,PSOWRAP,PSOMARG
"RTN","PSOREJU3",136,0)
 S PSOWRAP=1,PSOMARG=$S('$G(PSORM):80,$D(IOM):IOM,1:80)-(INDENT+5)
"RTN","PSOREJU3",137,0)
W1 S:$L(PSOTXT)<PSOMARG PSOWRAP(PSOWRAP)=PSOTXT I $L(PSOTXT)'<PSOMARG F I=PSOMARG:-1:0 I $E(PSOTXT,I)?1P S PSOWRAP(PSOWRAP)=$E(PSOTXT,1,I),PSOTXT=$E(PSOTXT,I+1,999),PSOWRAP=PSOWRAP+1 G W1
"RTN","PSOREJU3",138,0)
 F K=1:1:PSOWRAP W ?INDENT,PSOWRAP(K),!
"RTN","PSOREJU3",139,0)
 Q
"RTN","PSOREJU3",140,0)
 ;
"RTN","PSOREJU3",141,0)
HDR ; Display the reject notification screen header
"RTN","PSOREJU3",142,0)
 N ELDSP,TAB
"RTN","PSOREJU3",143,0)
 S ELDSP=$$ELIGDISP^PSOREJP1(RX,RFL)   ; returns CHAMPVA or TRICARE or "" (Veteran)
"RTN","PSOREJU3",144,0)
 I $L(ELDSP) S ELDSP=ELDSP_" - "       ; Add the " - " for CVA/TRI only
"RTN","PSOREJU3",145,0)
 ;
"RTN","PSOREJU3",146,0)
 I $G(PSONBILL) S TAB=$S($L(ELDSP):24,1:29) W !!?TAB,"*** "_ELDSP_"NON-BILLABLE ***" Q
"RTN","PSOREJU3",147,0)
 I $G(PSONPROG) S TAB=$S($L(ELDSP):18,1:23) W !!?TAB,"*** "_ELDSP_"'IN PROGRESS' ECME status ***" Q
"RTN","PSOREJU3",148,0)
 S TAB=$S($L(ELDSP):11,1:16) W !!?TAB,"*** "_ELDSP_"REJECT RECEIVED FROM THIRD PARTY PAYER ***"
"RTN","PSOREJU3",149,0)
 Q
"RTN","PSOREJU3",150,0)
 ;
"RTN","PSOREJU3",151,0)
SUBMIT(RXIEN,RFCNT,PSOTRIC) ;called from PSOCAN2 (routine size exceeded)
"RTN","PSOREJU3",152,0)
 N SUBMITE S SUBMITE=$$SUBMIT^PSOBPSUT(RXIEN)
"RTN","PSOREJU3",153,0)
 I SUBMITE D
"RTN","PSOREJU3",154,0)
 . N ACTION
"RTN","PSOREJU3",155,0)
 . D ECMESND^PSOBPSU1(RXIEN,,,$S($O(^PSRX(RXIEN,1,0)):"RF",1:"OF"))
"RTN","PSOREJU3",156,0)
 . ; Quit if there is an unresolved TRICARE or CHAMPVA non-billable reject code, PSO*7*358
"RTN","PSOREJU3",157,0)
 . I $$PSOET^PSOREJP3(RXIEN) S ACTION="Q" Q 
"RTN","PSOREJU3",158,0)
 . I $$FIND^PSOREJUT(RXIEN) S ACTION=$$HDLG^PSOREJU1(RXIEN,,"79,88","OF","IOQ","Q")
"RTN","PSOREJU3",159,0)
 I 'SUBMITE&(PSOTRIC) D
"RTN","PSOREJU3",160,0)
 . I $$STATUS^PSOBPSUT(RXIEN,RFCNT'["PAYABLE") D TRICCHK(RXIEN,RFCNT)
"RTN","PSOREJU3",161,0)
 Q
"RTN","PSOREJU3",162,0)
 ;
"RTN","PSOREJU3",163,0)
TRISTA(RX,RFL,RESP,FROM,RVTX) ;called from suspense
"RTN","PSOREJU3",164,0)
 N ETOUT,ESTAT,TRESP,TSTAT,PSOTRIC
"RTN","PSOREJU3",165,0)
 S:'$D(RESP) RESP=""
"RTN","PSOREJU3",166,0)
 S (ESTAT,PSOTRIC)="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOREJU3",167,0)
 Q:'PSOTRIC 0
"RTN","PSOREJU3",168,0)
 S TRESP=RESP,ESTAT=$P(TRESP,"^",4) S:ESTAT="" ESTAT=$$STATUS^PSOBPSUT(RX,RFL)
"RTN","PSOREJU3",169,0)
 Q:ESTAT["E PAYABLE" 0
"RTN","PSOREJU3",170,0)
 I $$TRIAUD(RX,RFL) Q 0  ;if TRICARE or CHAMPVA Rx is in audit due to override or bypass, allow to print from suspense, cnf
"RTN","PSOREJU3",171,0)
 I +RESP=2,$$BYPASS^PSOBPSU1($P(RESP,"^",3),$P(RESP,"^",2)) Q 0   ;if 'Bypass' RX, allow to print from suspense, cnf 
"RTN","PSOREJU3",172,0)
 Q:ESTAT["E REJECTED" 1  ;rejected TRICARE or CHAMPVA is not allowed to print from suspense
"RTN","PSOREJU3",173,0)
 ;if 'in progress' (4) or not billable (2,3) don't allow to print from suspense (IA 4415 Values)
"RTN","PSOREJU3",174,0)
 I '$D(RESP)!($P(RESP,"^",1)="")!($G(RESP)="") D
"RTN","PSOREJU3",175,0)
 . S TSTAT=$$STATUS^PSOBPSUT(RX,RFL) S TRESP=$S(TSTAT["IN PROGRESS":4,TSTAT["NOT BILLABLE":2,1:0)
"RTN","PSOREJU3",176,0)
 . S $P(TRESP,"^",4)=TSTAT
"RTN","PSOREJU3",177,0)
 ;
"RTN","PSOREJU3",178,0)
 I +TRESP=2!(+TRESP=3) D WRKLST^PSOREJU4(RX,RFL,"",DUZ,DT,1,"",RESP) Q 1  ;send TRICARE or CHAMPVA non billable to worklist (pseudo reject), cnf
"RTN","PSOREJU3",179,0)
 I +TRESP=4!(ESTAT["IN PROGRESS") Q 1
"RTN","PSOREJU3",180,0)
 Q 0
"RTN","PSOREJU3",181,0)
 ;
"RTN","PSOREJU3",182,0)
TRIAUD(RXIEN,RXFILL) ;is RXIEN in the TRICARE/CHAMPVA audit and no open rejects  ;cnf
"RTN","PSOREJU3",183,0)
 ; RXIEN will only be in TRICARE/CHAMPVA audit if a bypass or override has occurred and rejects are closed
"RTN","PSOREJU3",184,0)
 ; returns  0  if RXIEN is not in TRICARE/CHAMPVA audit at all or not in audit for right fill number
"RTN","PSOREJU3",185,0)
 ;             rejects must be closed for 0 to be returned
"RTN","PSOREJU3",186,0)
 ;          1  if RXIEN is in TRICARE/CHAMPVA audit for the right fill number and rejects are closed
"RTN","PSOREJU3",187,0)
 ;
"RTN","PSOREJU3",188,0)
 N X,AUDIEN,REJIEN
"RTN","PSOREJU3",189,0)
 S X=0,AUDIEN=""
"RTN","PSOREJU3",190,0)
 I '$D(^PS(52.87,"C",RXIEN)) Q X   ;RXIEN is not in the TRICARE/CHAMPVA audit
"RTN","PSOREJU3",191,0)
 ;
"RTN","PSOREJU3",192,0)
 I $G(RXFILL)="" S RXFILL=$$LSTRFL^PSOBPSU1(RXIEN)  ;Get latest fill if not passed in
"RTN","PSOREJU3",193,0)
 ;
"RTN","PSOREJU3",194,0)
 ;check audit entries for right fill number
"RTN","PSOREJU3",195,0)
 F  S AUDIEN=$O(^PS(52.87,"C",RXIEN,AUDIEN)) Q:AUDIEN=""  I RXFILL=$$GET1^DIQ(52.87,AUDIEN,2) S X=1 Q
"RTN","PSOREJU3",196,0)
 I 'X Q X
"RTN","PSOREJU3",197,0)
 ;
"RTN","PSOREJU3",198,0)
 ;make sure rejects are closed
"RTN","PSOREJU3",199,0)
 S REJIEN=0
"RTN","PSOREJU3",200,0)
 F  S REJIEN=$O(^PSRX(RXIEN,"REJ",REJIEN)) Q:'+REJIEN  D  I 'X Q   ;I 'X, then the reject is not closed
"RTN","PSOREJU3",201,0)
 . S X=$$CLOSED^PSOREJP1(RXIEN,REJIEN,0)
"RTN","PSOREJU3",202,0)
 ;
"RTN","PSOREJU3",203,0)
 Q X
"RTN","PSOREJU3",204,0)
 ;
"RTN","PSOREJU3",205,0)
ECMECHK(RX,FILL) ;
"RTN","PSOREJU3",206,0)
 ; This function returns a '1' if any of the conditions below are met:
"RTN","PSOREJU3",207,0)
 ;    - RX has an unresolved DUR or Refill Too Soon reject
"RTN","PSOREJU3",208,0)
 ;    - RX has an unresolved Reject Resolution Required (RRR) reject (only for Veteran and original fill)
"RTN","PSOREJU3",209,0)
 ;    - RX is TRICARE/CHAMPVA and has any unresolved reject
"RTN","PSOREJU3",210,0)
 ;    - RX is TRICARE/CHAMPVA and IN PROGRESS
"RTN","PSOREJU3",211,0)
 ; This is used by functions such as PPLADD^PSOSUPOE to determine if
"RTN","PSOREJU3",212,0)
 ;   a label should be printed (we do not want a label for the conditions)
"RTN","PSOREJU3",213,0)
 ;
"RTN","PSOREJU3",214,0)
 ; Incoming Parameters:
"RTN","PSOREJU3",215,0)
 ;   RX - Internal IEN of the Prescription File (required)
"RTN","PSOREJU3",216,0)
 ;   FILL - Fill Number (optional, defaults to last fill if not passed in)
"RTN","PSOREJU3",217,0)
 ; Returns:
"RTN","PSOREJU3",218,0)
 ;   0 - None of the conditions exists
"RTN","PSOREJU3",219,0)
 ;   1 - One of the conditions above is met
"RTN","PSOREJU3",220,0)
 ;
"RTN","PSOREJU3",221,0)
 I '$G(RX) Q 0
"RTN","PSOREJU3",222,0)
 I $G(FILL)="" S FILL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJU3",223,0)
 ;
"RTN","PSOREJU3",224,0)
 ; DUR or Refill Too Soon or RRR rejects
"RTN","PSOREJU3",225,0)
 I $$FIND^PSOREJUT(RX,FILL,"","79,88",,1) Q 1
"RTN","PSOREJU3",226,0)
 ;
"RTN","PSOREJU3",227,0)
 ; If not TRICARE/CHAMPVA, quit with 0 as the rest of the checks
"RTN","PSOREJU3",228,0)
 ;   are all TRICARE/CHAMPVA dependent
"RTN","PSOREJU3",229,0)
 I '$$TRIC^PSOREJP1(RX,FILL) Q 0
"RTN","PSOREJU3",230,0)
 ;
"RTN","PSOREJU3",231,0)
 ; No label for TRICARE/CHAMPVA with unresolved rejects
"RTN","PSOREJU3",232,0)
 I $$FIND^PSOREJUT(RX,FILL,,,1) Q 1   ; 5th parameter to $$FIND also finds non-billable TRI/CVA rejects
"RTN","PSOREJU3",233,0)
 ;
"RTN","PSOREJU3",234,0)
 ;No label for TRICARE/CHAMPVA claims that are IN PROGRESS
"RTN","PSOREJU3",235,0)
 I $P($$STATUS^PSOBPSUT(RX,FILL),U)="IN PROGRESS" Q 1
"RTN","PSOREJU3",236,0)
 Q 0
"RTN","PSOREJUT")
0^14^B107104625
"RTN","PSOREJUT",1,0)
PSOREJUT ;BIRM/MFR - BPS (ECME) - Clinical Rejects Utilities ;06/07/05
"RTN","PSOREJUT",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,247,260,287,289,290,358,359,385,403,421,427**;DEC 1997;Build 21
"RTN","PSOREJUT",3,0)
 ;Reference to DUR1^BPSNCPD3 supported by IA 4560
"RTN","PSOREJUT",4,0)
 ;Reference to $$ADDCOMM^BPSBUTL supported by IA 4719
"RTN","PSOREJUT",5,0)
 ;
"RTN","PSOREJUT",6,0)
SAVE(RX,RFL,REJ,REOPEN) ; - Saves DUR Information in the file 52
"RTN","PSOREJUT",7,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJUT",8,0)
 ;         (o) RFL - Refill # (Default: most recent)
"RTN","PSOREJUT",9,0)
 ;         (o) REOPEN - value of 1 means claim being reopened; null or no value passed means reopen claim functionality not being used
"RTN","PSOREJUT",10,0)
 ;         (r) REJ - Array containing information about the REJECT on the following subscripts:
"RTN","PSOREJUT",11,0)
 ;                   "BIN" - BIN Number
"RTN","PSOREJUT",12,0)
 ;                   "CODE"   - Reject Code (79 or 88)
"RTN","PSOREJUT",13,0)
 ;                   "DATE/TIME"   - Date/Time Reject Detected
"RTN","PSOREJUT",14,0)
 ;                   "PAYER MESSAGE" - Message returned by Payer (up to 140 chars long)
"RTN","PSOREJUT",15,0)
 ;                   "REASON" - Reject Reason (up to 100 chars long)
"RTN","PSOREJUT",16,0)
 ;                   "DUR TEXT" - Payer's DUR description
"RTN","PSOREJUT",17,0)
 ;                   "DUR ADD MSG TEXT" - Payer's DUR additional message text description
"RTN","PSOREJUT",18,0)
 ;                   "INSURANCE NAME" - Patient's Insurance Company Name
"RTN","PSOREJUT",19,0)
 ;                   "INSURANCE POINTER" - Patient's Insurance Company IEN
"RTN","PSOREJUT",20,0)
 ;                   "GROUP NAME" - Patient's Insurance Group Name
"RTN","PSOREJUT",21,0)
 ;                   "GROUP NUMBER" - Patient's Insurance Group Number
"RTN","PSOREJUT",22,0)
 ;                   "CARDHOLDER ID" - Patient's Insurance Cardholder ID
"RTN","PSOREJUT",23,0)
 ;                   "COB" - Coordination of Benefits
"RTN","PSOREJUT",24,0)
 ;                   "PLAN CONTACT" - Patient's Insurance Plan Contact (1-800)
"RTN","PSOREJUT",25,0)
 ;                   "PREVIOUS FILL" - Plan's Previous Fill Date
"RTN","PSOREJUT",26,0)
 ;                   "OTHER REJECTS" - Other Rejects with same Response
"RTN","PSOREJUT",27,0)
 ;                   "PHARMACIST" - Pharmacist DUZ
"RTN","PSOREJUT",28,0)
 ;                   "RESPONSE IEN" - Pointer to the RESPONSE file in ECME
"RTN","PSOREJUT",29,0)
 ;                   "REASON SVC CODE" - Reason for Service Code (pointer to BPS NCPDP REASON FOR SERVICE CODE)
"RTN","PSOREJUT",30,0)
 ;                   "RE-OPENED" - Re-Open Flag
"RTN","PSOREJUT",31,0)
 ;                   "RRR FLAG" - Reject Resolution Required indicator
"RTN","PSOREJUT",32,0)
 ;                   "RRR THRESHOLD AMT" - Reject Resolution Required Dollar Threshold
"RTN","PSOREJUT",33,0)
 ;                   "RRR GROSS AMT DUE" - Reject Resolution Required Gross Amount Due
"RTN","PSOREJUT",34,0)
 ;Output: REJ("REJECT IEN")
"RTN","PSOREJUT",35,0)
 N %,DIC,DR,DA,X,DINUM,DD,DO,DLAYGO,ERR
"RTN","PSOREJUT",36,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJUT",37,0)
 I '$G(PSODIV) S PSODIV=$$RXSITE^PSOBPSUT(RX,RFL)
"RTN","PSOREJUT",38,0)
 S REJ("BIN")=$E($G(REJ("BIN")),1,6)
"RTN","PSOREJUT",39,0)
 S REJ("CODE")=$G(REJ("CODE"))
"RTN","PSOREJUT",40,0)
 ;Ignore this additional Check if reject is Reject Resolution Required reject - PSO*7*421
"RTN","PSOREJUT",41,0)
 I '$G(REJ("RRR FLAG")),REJ("CODE")'=79&(REJ("CODE")'=88)&('$G(PSOTRIC))&('$G(REOPEN)) S ERR=$$EVAL^PSOREJU4(PSODIV,REJ("CODE"),$G(OPECC)) Q:'+ERR
"RTN","PSOREJUT",42,0)
 S REJ("PAYER MESSAGE")=$E($G(REJ("PAYER MESSAGE")),1,140),REJ("REASON")=$E($G(REJ("REASON")),1,100)
"RTN","PSOREJUT",43,0)
 S REJ("DUR TEXT")=$E($G(REJ("DUR TEXT")),1,100),REJ("DUR ADD MSG TEXT")=$E($G(REJ("DUR ADD MSG TEXT")),1,100),REJ("GROUP NAME")=$E($G(REJ("GROUP NAME")),1,30)
"RTN","PSOREJUT",44,0)
 S REJ("INSURANCE NAME")=$E($G(REJ("INSURANCE NAME")),1,30),REJ("PLAN CONTACT")=$E($G(REJ("PLAN CONTACT")),1,30)
"RTN","PSOREJUT",45,0)
 S REJ("GROUP NUMBER")=$E($G(REJ("GROUP NUMBER")),1,30),REJ("OTHER REJECTS")=$E($G(REJ("OTHER REJECTS")),1,15)
"RTN","PSOREJUT",46,0)
 S REJ("CARDHOLDER ID")=$E($G(REJ("CARDHOLDER ID")),1,20),REJ("COB")=$G(REJ("COB"))
"RTN","PSOREJUT",47,0)
 I $G(REJ("DATE/TIME"))="" D NOW^%DTC S REJ("DATE/TIME")=%
"RTN","PSOREJUT",48,0)
 S DIC="^PSRX("_RX_",""REJ"",",DA(1)=RX,DIC(0)=""
"RTN","PSOREJUT",49,0)
 S X=$G(REJ("CODE")),DINUM=$O(^PSRX(RX,"REJ",9999),-1)+1
"RTN","PSOREJUT",50,0)
 S DIC("DR")="1///"_$G(REJ("DATE/TIME"))_";2///"_REJ("PAYER MESSAGE")_";3///"_REJ("REASON")_";4////"_$G(REJ("PHARMACIST"))_";5///"_RFL
"RTN","PSOREJUT",51,0)
 S DIC("DR")=DIC("DR")_";6///"_REJ("GROUP NAME")_";7///"_REJ("PLAN CONTACT")_";8///"_$G(REJ("PREVIOUS FILL"))
"RTN","PSOREJUT",52,0)
 S DIC("DR")=DIC("DR")_";9///0;14///"_$G(REJ("REASON SVC CODE"))_";16///"_$G(REJ("RESPONSE IEN"))
"RTN","PSOREJUT",53,0)
 S DIC("DR")=DIC("DR")_";17///"_$G(REJ("OTHER REJECTS"))_";18///"_REJ("DUR TEXT")_";20///"_REJ("INSURANCE NAME")
"RTN","PSOREJUT",54,0)
 S DIC("DR")=DIC("DR")_";21///"_REJ("GROUP NUMBER")_";22///"_REJ("CARDHOLDER ID")_";23///"_$G(REJ("RE-OPENED"))
"RTN","PSOREJUT",55,0)
 S DIC("DR")=DIC("DR")_";27///"_REJ("COB")
"RTN","PSOREJUT",56,0)
 S DIC("DR")=DIC("DR")_";28///"_REJ("DUR ADD MSG TEXT")
"RTN","PSOREJUT",57,0)
 S DIC("DR")=DIC("DR")_";29///"_REJ("BIN")
"RTN","PSOREJUT",58,0)
 ;Update Reject Resolution Required fields - PSO*7*421
"RTN","PSOREJUT",59,0)
 I $G(REJ("RRR FLAG")) D
"RTN","PSOREJUT",60,0)
 .S DIC("DR")=DIC("DR")_";30///"_REJ("RRR FLAG")
"RTN","PSOREJUT",61,0)
 .S DIC("DR")=DIC("DR")_";31///"_REJ("RRR THRESHOLD AMT")
"RTN","PSOREJUT",62,0)
 .S DIC("DR")=DIC("DR")_";32///"_REJ("RRR GROSS AMT DUE")
"RTN","PSOREJUT",63,0)
 S DIC("DR")=DIC("DR")_";33///"_REJ("INSURANCE POINTER")
"RTN","PSOREJUT",64,0)
 F  L +^PSRX(RX):5 Q:$T  H 15
"RTN","PSOREJUT",65,0)
 K DD,DO D FILE^DICN K DD,DO S REJ("REJECT IEN")=+Y
"RTN","PSOREJUT",66,0)
 S REJ("OVERRIDE MSG")=$G(DATA("OVERRIDE MSG"))
"RTN","PSOREJUT",67,0)
 ;Comments use POSTMASTER as user for auto transfers - PSO*7*421
"RTN","PSOREJUT",68,0)
 I REJ("OVERRIDE MSG")'="" D
"RTN","PSOREJUT",69,0)
 .N ORIGIN S ORIGIN=$G(DUZ)
"RTN","PSOREJUT",70,0)
 .S:REJ("OVERRIDE MSG")["Automatically transferred" ORIGIN=.5
"RTN","PSOREJUT",71,0)
 .D SAVECOM^PSOREJP3(RX,REJ("REJECT IEN"),REJ("OVERRIDE MSG"),$G(REJ("DATE/TIME")),ORIGIN)
"RTN","PSOREJUT",72,0)
 .;Insert comment for Transfer and RRR Rejects - PSO*7*421
"RTN","PSOREJUT",73,0)
 .I REJ("OVERRIDE MSG")["Automatically transferred" D
"RTN","PSOREJUT",74,0)
 ..N X,TXT
"RTN","PSOREJUT",75,0)
 ..S TXT="Auto Send to Pharmacy Worklist due to Transfer Reject Code"
"RTN","PSOREJUT",76,0)
 ..I $G(REJ("RRR FLAG")) S TXT="Auto Send to Pharmacy Worklist due to Reject Resolution Required Code"
"RTN","PSOREJUT",77,0)
 ..I $G(PSOTRIC) S TXT="Auto Send to Pharmacy Worklist & OPECC - CVA/TRI"
"RTN","PSOREJUT",78,0)
 ..S X=$$ADDCOMM^BPSBUTL(RX,RFL,TXT,1) ; IA 4719
"RTN","PSOREJUT",79,0)
 L -^PSRX(RX)
"RTN","PSOREJUT",80,0)
 Q
"RTN","PSOREJUT",81,0)
 ; 
"RTN","PSOREJUT",82,0)
CLSALL(RX,RFL,USR,REA,COM,COD1,COD2,COD3,CLA,PA) ; Close/Resolve All Rejects
"RTN","PSOREJUT",83,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOREJUT",84,0)
 ;       (o) RFL  - Refill # (Default: most recent)
"RTN","PSOREJUT",85,0)
 ;       (o) USR  - User DUZ responsible for closing all rejects
"RTN","PSOREJUT",86,0)
 ;       (r) REA  - Close REASON code
"RTN","PSOREJUT",87,0)
 ;       (o) COM  - Close COMMENTS
"RTN","PSOREJUT",88,0)
 ;       (o) COD1 - First set of DUR overrides (Reason Code^Professional Code^Result Code)
"RTN","PSOREJUT",89,0)
 ;       (o) COD2 - Second set of DUR overrides (Reason Code^Professional Code^Result Code)
"RTN","PSOREJUT",90,0)
 ;       (o) COD3 - Third set of DUR overrides (Reason Code^Professional Code^Result Code)
"RTN","PSOREJUT",91,0)
 ;       (o) CLA  - NCPDP Clarification Code for overriding RTS and DUR REJECTS
"RTN","PSOREJUT",92,0)
 ;       (o) PA   - NCPDP Prior Authorization Type and Number (separated by "^")
"RTN","PSOREJUT",93,0)
 N REJ,REJDATA,DIE,DR,DA
"RTN","PSOREJUT",94,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJUT",95,0)
 ; - Closing OPEN/UNRESOLVED rejects
"RTN","PSOREJUT",96,0)
 I $$FIND(RX,RFL,.REJDATA,,1) D
"RTN","PSOREJUT",97,0)
 . S REJ="" F  S REJ=$O(REJDATA(REJ)) Q:'REJ  D
"RTN","PSOREJUT",98,0)
 . . D CLOSE(RX,RFL,REJ,USR,REA,$G(COM),$G(COD1),$G(COD2),$G(COD3),$G(CLA),$G(PA))
"RTN","PSOREJUT",99,0)
 Q
"RTN","PSOREJUT",100,0)
 ;
"RTN","PSOREJUT",101,0)
CLOSE(RX,RFL,REJ,USR,REA,COM,COD1,COD2,COD3,CLA,PA,IGNR) ; - Mark a DUR/REFILL TOO SOON reject RESOLVED
"RTN","PSOREJUT",102,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJUT",103,0)
 ;         (o) RFL - Refill # (Default: most recent)
"RTN","PSOREJUT",104,0)
 ;         (r) REJ - REJECT ID (IEN)
"RTN","PSOREJUT",105,0)
 ;         (o) USR - User (file #200 IEN) responsible for closing the REJECT
"RTN","PSOREJUT",106,0)
 ;         (r) REA - Reason for closing the REJECT  (52.25,12):
"RTN","PSOREJUT",107,0)
 ;                       1:CLAIM RE-SUBMITTED
"RTN","PSOREJUT",108,0)
 ;                       2:RX ON HOLD
"RTN","PSOREJUT",109,0)
 ;                       3:RX SUSPENDED
"RTN","PSOREJUT",110,0)
 ;                       4:RX RETURNED TO STOCK
"RTN","PSOREJUT",111,0)
 ;                       5:RX DELETED
"RTN","PSOREJUT",112,0)
 ;                       6:IGNORED - NO RESUBMISSION
"RTN","PSOREJUT",113,0)
 ;                       7:RX DISCONTINUED
"RTN","PSOREJUT",114,0)
 ;                       8:RX EDITED
"RTN","PSOREJUT",115,0)
 ;                      99:OTHER
"RTN","PSOREJUT",116,0)
 ;         (o) COM  - Close comments manually entered by the user
"RTN","PSOREJUT",117,0)
 ;         (o) COD1 - First set of DUR overrides (Reason Code^Professional Code^Result Code)
"RTN","PSOREJUT",118,0)
 ;         (o) COD2 - Second set of DUR overrides (Reason Code^Professional Code^Result Code)
"RTN","PSOREJUT",119,0)
 ;         (o) COD3 - Third set of DUR overrides (Reason Code^Professional Code^Result Code)
"RTN","PSOREJUT",120,0)
 ;         (o) CLA  - NCPDP Clarification Code for overriding RTS and DUR REJECTS
"RTN","PSOREJUT",121,0)
 ;         (o) PA   - NCPDP Prior Authorization Type and Number (separated by "^")
"RTN","PSOREJUT",122,0)
 ;         (o) IGNR - Ignore Flag; 1=IGNORE, 0=NOT IGNORE
"RTN","PSOREJUT",123,0)
 ;
"RTN","PSOREJUT",124,0)
 I '$G(RX)!'$G(REJ) Q
"RTN","PSOREJUT",125,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJUT",126,0)
 I '$D(^PSRX(RX,"REJ",REJ)) Q
"RTN","PSOREJUT",127,0)
 I $$GET1^DIQ(52.25,REJ_","_RX,5)'=+$G(RFL) Q
"RTN","PSOREJUT",128,0)
 S:'$G(REA) REA=99 S COM=$TR($G(COM),";^",",,")
"RTN","PSOREJUT",129,0)
 N DQ,DA,DIE,DR,X,Y,REJCOM,I,SMACOM,SMA
"RTN","PSOREJUT",130,0)
 D NOW^%DTC
"RTN","PSOREJUT",131,0)
 S REJCOM="AUTOMATICALLY CLOSED" I REA'=1 S REJCOM=COM
"RTN","PSOREJUT",132,0)
 S DA(1)=RX,DA=REJ,DIE="^PSRX("_RX_",""REJ"","
"RTN","PSOREJUT",133,0)
 S DR="9///1;10///"_%_";11////"_$G(USR)_";12///"_REA_";13///"_REJCOM_";14///"_$P($G(COD1),"^")_";15///"_$P($G(COD1),"^",2)
"RTN","PSOREJUT",134,0)
 S DR=DR_";19///"_$P($G(COD1),"^",3)_";24///"_$G(CLA)_";25///"_$P($G(PA),"^")_";26///"_$P($G(PA),"^",2)
"RTN","PSOREJUT",135,0)
 D ^DIE
"RTN","PSOREJUT",136,0)
 ; Quit if this is a "eT" (non-billable TRICARE) or "eC" (non-billable CHAMPVA)
"RTN","PSOREJUT",137,0)
 Q:$$PSOET^PSOREJP3(RX,RFL)
"RTN","PSOREJUT",138,0)
 ;
"RTN","PSOREJUT",139,0)
 ; Add comment to the ECME User Screen
"RTN","PSOREJUT",140,0)
 ; First check if this is has more than one override value from the SMA action of the reject worklist
"RTN","PSOREJUT",141,0)
 ; If it is, we will need to enter multiple comments
"RTN","PSOREJUT",142,0)
 S SMA=0
"RTN","PSOREJUT",143,0)
 I $G(COD1)]"",$G(CLA)]"" S SMA=1
"RTN","PSOREJUT",144,0)
 I $G(COD1)]"",$G(PA)]"" S SMA=1
"RTN","PSOREJUT",145,0)
 I $G(CLA)]"",$G(PA)]"" S SMA=1
"RTN","PSOREJUT",146,0)
 I SMA D  Q
"RTN","PSOREJUT",147,0)
 . I $G(COD1)]"" D
"RTN","PSOREJUT",148,0)
 .. S SMACOM=$TR("DUR Override Codes "_$G(COD1)_"~"_$G(COD2)_"~"_$G(COD3)_" submitted.","^","/")
"RTN","PSOREJUT",149,0)
 .. S X=$$ADDCOMM^BPSBUTL(RX,RFL,SMACOM)
"RTN","PSOREJUT",150,0)
 . I $G(CLA)]"" D
"RTN","PSOREJUT",151,0)
 .. S SMACOM="Clarification Code(s) "_CLA_" submitted."
"RTN","PSOREJUT",152,0)
 .. S X=$$ADDCOMM^BPSBUTL(RX,RFL,SMACOM)
"RTN","PSOREJUT",153,0)
 . I $G(PA)]"" D
"RTN","PSOREJUT",154,0)
 .. S SMACOM="Prior Authorization Code ("_$P(PA,"^")_"/"_$P(PA,"^",2)_") submitted."
"RTN","PSOREJUT",155,0)
 .. S X=$$ADDCOMM^BPSBUTL(RX,RFL,SMACOM)
"RTN","PSOREJUT",156,0)
 . S SMACOM="Multiple actions taken to resolve. See comments for details."
"RTN","PSOREJUT",157,0)
 . S X=$$ADDCOMM^BPSBUTL(RX,RFL,SMACOM)
"RTN","PSOREJUT",158,0)
 ;
"RTN","PSOREJUT",159,0)
 ; If not SMA, fall through to here and enter one comment
"RTN","PSOREJUT",160,0)
 ; If IGNR flag is set, add that to the comment string before sending
"RTN","PSOREJUT",161,0)
 S X=$$ADDCOMM^BPSBUTL(RX,RFL,$S($G(IGNR):"IGNORED - ",1:"")_COM)
"RTN","PSOREJUT",162,0)
 Q
"RTN","PSOREJUT",163,0)
 ;
"RTN","PSOREJUT",164,0)
FIND(RX,RFL,REJDATA,CODE,BESC,RRRFLG) ; - Returns whether a Rx/fill contains UNRESOLVED rejects
"RTN","PSOREJUT",165,0)
 ; Input: (r) RX - Rx IEN (#52) 
"RTN","PSOREJUT",166,0)
 ; (o) RFL - Refill # (If not passed, look original and all refills)
"RTN","PSOREJUT",167,0)
 ; (o) CODE - Can be null, a specific Reject Code(s) to be checked or multiple codes separated by comma's
"RTN","PSOREJUT",168,0)
 ; (o) BESC - Bypass ECME Status Check (default behavior is to do the check); pass 1 to skip the check below
"RTN","PSOREJUT",169,0)
 ;            We need to skip this check when looking for non-ECME billable rejects (eT or eC for example)
"RTN","PSOREJUT",170,0)
 ; (o) RRRFLG - Pass a 1 in this parameter to also look for any unresolved Reject Resolution Required (RRR)
"RTN","PSOREJUT",171,0)
 ;              rejects when CODE is also passed.  If CODE is not passed in, then pass a 1 here to ONLY look for
"RTN","PSOREJUT",172,0)
 ;              unresolved RRR rejects.
"RTN","PSOREJUT",173,0)
 ;              The default here is 0 if not passed.
"RTN","PSOREJUT",174,0)
 ;
"RTN","PSOREJUT",175,0)
 ; Output: 1 - Rx contains unresolved Rejects
"RTN","PSOREJUT",176,0)
 ;         0 - Rx does not contain unresolved Rejects
"RTN","PSOREJUT",177,0)
 ;  .REJDATA - Array containing the Reject(s) data (see GET^PSOREJU2 for fields documentation)
"RTN","PSOREJUT",178,0)
 ;
"RTN","PSOREJUT",179,0)
 N RCODE,I,REJS
"RTN","PSOREJUT",180,0)
 S REJS=0,RCODE=""
"RTN","PSOREJUT",181,0)
 K REJDATA
"RTN","PSOREJUT",182,0)
 I '$G(BESC),$G(RFL),$$STATUS^PSOBPSUT(RX,RFL)="" Q 0
"RTN","PSOREJUT",183,0)
 I $G(CODE)]"",CODE["," S REJS=$$MULTI^PSOREJU4(RX,$G(RFL),.REJDATA,$G(CODE),REJS,+$G(RRRFLG)) G FEND
"RTN","PSOREJUT",184,0)
 S REJS=$$SINGLE^PSOREJU4(RX,$G(RFL),.REJDATA,$G(CODE),REJS,+$G(RRRFLG))
"RTN","PSOREJUT",185,0)
FEND ;
"RTN","PSOREJUT",186,0)
 Q $S(REJS:1,1:0)
"RTN","PSOREJUT",187,0)
 ;
"RTN","PSOREJUT",188,0)
SYNC(RX,RFL,USR,RXCOB) ;
"RTN","PSOREJUT",189,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJUT",190,0)
 ;         (o) RFL - Refill # (Default: most recent)
"RTN","PSOREJUT",191,0)
 ;         (o) USR - User using the system when this routine is called
"RTN","PSOREJUT",192,0)
 ;         (o) RXCOB - Coordination of Benefits code
"RTN","PSOREJUT",193,0)
 I '$G(RXCOB) S RXCOB=1
"RTN","PSOREJUT",194,0)
 N REJ,REJS,REJLST,I,IDX,CODE,DATA,TXT,PSOTRIC,ERR,PSODIV,OPECC,OVREJ,ESH
"RTN","PSOREJUT",195,0)
 N REJRRR,RRRVAL ; PSO*7*421
"RTN","PSOREJUT",196,0)
 L +^PSRX("REJ",RX):0 Q:'$T
"RTN","PSOREJUT",197,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJUT",198,0)
 S PSODIV=$$RXSITE^PSOBPSUT(RX,RFL)
"RTN","PSOREJUT",199,0)
 D DUR1^BPSNCPD3(RX,RFL,.REJ,"",RXCOB)
"RTN","PSOREJUT",200,0)
 S PSOTRIC="" S:$G(REJ(1,"ELIGBLT"))="T" PSOTRIC=1 S:$G(REJ(1,"ELIGBLT"))="C" PSOTRIC=2 S:PSOTRIC="" PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,.PSOTRIC)
"RTN","PSOREJUT",201,0)
 K REJS S (OPECC,IDX,ERR)=""
"RTN","PSOREJUT",202,0)
 F  S IDX=$O(REJ(IDX)) Q:IDX=""  S TXT=$G(REJ(IDX,"REJ CODE LST")) D
"RTN","PSOREJUT",203,0)
 . F I=1:1:$L(TXT,",") S CODE=$P(TXT,",",I),OVREJ="" D
"RTN","PSOREJUT",204,0)
 . . I CODE="" Q
"RTN","PSOREJUT",205,0)
 . . I ",M6,M8,99,NN,"[(","_CODE_",") S ESH="",ESH=$$DUR^PSOBPSU2(RX,RFL) Q:'ESH&('PSOTRIC)
"RTN","PSOREJUT",206,0)
 . . ;Additional check for Reject Resolution Required included - PSO*7*421
"RTN","PSOREJUT",207,0)
 . . I CODE'="79"&(CODE'="88")&('$G(PSOTRIC)) S ERR=$$EVAL^PSOREJU4(PSODIV,CODE,OPECC,RX,RFL,RXCOB,.RRRVAL) Q:'+ERR
"RTN","PSOREJUT",208,0)
 . . I +$G(ERR) S OVREJ=1 S:+$G(RRRVAL) REJRRR(IDX)=RRRVAL
"RTN","PSOREJUT",209,0)
 . . I $$DUP^PSOREJU1(RX,+$$CLEAN^PSOREJU1($G(REJ(IDX,"RESPONSE IEN")))) Q
"RTN","PSOREJUT",210,0)
 . . S REJS(IDX,CODE)=OVREJ
"RTN","PSOREJUT",211,0)
 I '$D(REJS) L -^PSRX("REJ",RX) Q
"RTN","PSOREJUT",212,0)
SYNC2 ;
"RTN","PSOREJUT",213,0)
 S (IDX,CODE)="" F  S IDX=$O(REJS(IDX)) Q:IDX=""  D
"RTN","PSOREJUT",214,0)
 . F  S CODE=$O(REJS(IDX,CODE)) Q:CODE=""  K DATA D
"RTN","PSOREJUT",215,0)
 . . ;Additional check for Reject Resolution Required - PSO*7*421
"RTN","PSOREJUT",216,0)
 . . I 'OPECC&(CODE'[79)&(CODE'[88) D
"RTN","PSOREJUT",217,0)
 . . .I '+$G(REJRRR(IDX)) S DATA("OVERRIDE MSG")="Automatically transferred due to override for reject code." Q
"RTN","PSOREJUT",218,0)
 . . .;Reject Resolution Required fields
"RTN","PSOREJUT",219,0)
 . . .S DATA("RRR FLAG")=1
"RTN","PSOREJUT",220,0)
 . . .S DATA("RRR GROSS AMT DUE")=$P(REJRRR(IDX),U,2)
"RTN","PSOREJUT",221,0)
 . . .S DATA("RRR THRESHOLD AMT")=$P(REJRRR(IDX),U,3)
"RTN","PSOREJUT",222,0)
 . . .S DATA("OVERRIDE MSG")="Automatically transferred due to Reject Resolution Required reject code"
"RTN","PSOREJUT",223,0)
 . . I OPECC&(CODE'[79)&(CODE'[88) S DATA("OVERRIDE MSG")="Transferred by "_$S(CODE["eT":"",CODE["eC":"",1:"OPECC.")   ;cnf,PSO*7.0*358
"RTN","PSOREJUT",224,0)
 . . I $D(COMMTXT) S:COMMTXT'="" DATA("OVERRIDE MSG")=DATA("OVERRIDE MSG")_" "_$$CLEAN^PSOREJU1($P(COMMTXT,":",2))
"RTN","PSOREJUT",225,0)
 . . S DATA("DUR TEXT")=$$CLEAN^PSOREJU1($G(REJ(IDX,"DUR FREE TEXT DESC")))
"RTN","PSOREJUT",226,0)
 . . S DATA("DUR ADD MSG TEXT")=$$CLEAN^PSOREJU1($G(REJ(IDX,"DUR ADD MSG TEXT")))
"RTN","PSOREJUT",227,0)
 . . ; In NCPDP D0, the Payer Additional Message is a repeating field and we want to display as much of the
"RTN","PSOREJUT",228,0)
 . . ;   data on the reject information screen as possible so we put the messages together up to the field
"RTN","PSOREJUT",229,0)
 . . ;   length of 140
"RTN","PSOREJUT",230,0)
 . . N CNT,MSG
"RTN","PSOREJUT",231,0)
 . . S CNT="",DATA("PAYER MESSAGE")=""
"RTN","PSOREJUT",232,0)
 . . F  S CNT=$O(REJ(IDX,"PAYER MESSAGE",CNT)) Q:CNT=""!($L(DATA("PAYER MESSAGE"))>140)  D
"RTN","PSOREJUT",233,0)
 . . . S MSG=$$CLEAN^PSOREJU1(REJ(IDX,"PAYER MESSAGE",CNT))
"RTN","PSOREJUT",234,0)
 . . . I MSG]"" S DATA("PAYER MESSAGE")=DATA("PAYER MESSAGE")_MSG_"  "
"RTN","PSOREJUT",235,0)
 . . ; Call CLEAN again to strip the extra trailing spaces we might have added
"RTN","PSOREJUT",236,0)
 . . S DATA("PAYER MESSAGE")=$$CLEAN^PSOREJU1(DATA("PAYER MESSAGE"))
"RTN","PSOREJUT",237,0)
 . . S DATA("CODE")=CODE,DATA("REASON")=$$CLEAN^PSOREJU1($G(REJ(IDX,"REASON")))
"RTN","PSOREJUT",238,0)
 . . S DATA("PHARMACIST")=$G(USR),DATA("INSURANCE NAME")=$$CLEAN^PSOREJU1($G(REJ(IDX,"INSURANCE NAME")))
"RTN","PSOREJUT",239,0)
 . . S DATA("INSURANCE POINTER")=$$CLEAN^PSOREJU1($G(REJ(IDX,"INSURANCE POINTER")))
"RTN","PSOREJUT",240,0)
 . . S DATA("GROUP NAME")=$$CLEAN^PSOREJU1($G(REJ(IDX,"GROUP NAME"))),DATA("GROUP NUMBER")=$$CLEAN^PSOREJU1($G(REJ(IDX,"GROUP NUMBER")))
"RTN","PSOREJUT",241,0)
 . . S DATA("CARDHOLDER ID")=$$CLEAN^PSOREJU1($G(REJ(IDX,"CARDHOLDER ID"))),DATA("PLAN CONTACT")=$$CLEAN^PSOREJU1($G(REJ(IDX,"PLAN CONTACT")))
"RTN","PSOREJUT",242,0)
 . . S DATA("PREVIOUS FILL")=$$CLEAN^PSOREJU1($$DAT^PSOREJU1($G(REJ(IDX,"PREVIOUS FILL DATE"))))
"RTN","PSOREJUT",243,0)
 . . S DATA("OTHER REJECTS")=$$CLEAN^PSOREJU1($$OTH^PSOREJU1(CODE,$G(REJ(IDX,"REJ CODE LST"))))
"RTN","PSOREJUT",244,0)
 . . S DATA("RESPONSE IEN")=+$$CLEAN^PSOREJU1($G(REJ(IDX,"RESPONSE IEN")))
"RTN","PSOREJUT",245,0)
 . . S DATA("REASON SVC CODE")=$$REASON^PSOREJU2($G(REJ(IDX,"REASON"))),DATA("COB")=IDX
"RTN","PSOREJUT",246,0)
 . . S DATA("MESSAGE")=$$CLEAN^PSOREJU1($G(REJ(IDX,"MESSAGE")))
"RTN","PSOREJUT",247,0)
 . . S DATA("DUR RESPONSE DATA")=$$CLEAN^PSOREJU1($G(REJ(IDX,"DUR RESPONSE DATA")))
"RTN","PSOREJUT",248,0)
 . . S DATA("BIN")=$$CLEAN^PSOREJU1($G(REJ(IDX,"BIN")))
"RTN","PSOREJUT",249,0)
 . . D SAVE(RX,RFL,.DATA)
"RTN","PSOREJUT",250,0)
 L -^PSRX("REJ",RX)
"RTN","PSOREJUT",251,0)
 Q
"RTN","PSORXEDT")
0^26^B48455949
"RTN","PSORXEDT",1,0)
PSORXEDT ;BIR/SAB - edit rx routine ;10/21/98
"RTN","PSORXEDT",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**21,23,44,71,146,185,148,253,390,372,416,313,427**;DEC 1997;Build 21
"RTN","PSORXEDT",3,0)
 ;Ref. ^PS(55 supp. IA 2228
"RTN","PSORXEDT",4,0)
 ;External reference to $$BSA^PSSDSAPI supported by DBIA 5425
"RTN","PSORXEDT",5,0)
 D:'$D(PSOPAR) ^PSOLSET I '$D(PSOPAR) G EOJ Q
"RTN","PSORXEDT",6,0)
 K PSODRUG,PSOLIST,DIR,DIRUT,DUOUT,X,Y,PSOFROM,^TMP("PSOBEDT",$J),NOPP,CLOZPST,PSOTITRX,PSOMTFLG
"RTN","PSORXEDT",7,0)
 N PSOODOSP
"RTN","PSORXEDT",8,0)
 W !! S DIR(0)="FAO^1:245",DIR("A")="Edit Rx(s) => ",DIR("?",1)="Enter Rx Number or A List of numbers Separated",DIR("?")="by Commas, e.g. 1234A,345,937002Q."
"RTN","PSORXEDT",9,0)
 D ^DIR K DIR G:$D(DIRUT) EOJ
"RTN","PSORXEDT",10,0)
 S END=$L(X,","),BAD=0
"RTN","PSORXEDT",11,0)
 F I=1:1:END S RXM=$P(X,",",I) I +RXM F J=I+1:1:END S DUP=$P(X,",",J) I DUP=RXM S $P(X,",",J)="" W !?5,$C(7),"Duplicate Rx # "_RXM_"  was found in your list, ignoring it!",! S BAD=1
"RTN","PSORXEDT",12,0)
 S PSORLST=$P(X,",") F I=2:1:END S RXM=$P(X,",",I) S:RXM'?1.N.A BAD=1 I RXM?1.N.A S PSORLST=PSORLST_","_RXM
"RTN","PSORXEDT",13,0)
 F I=1:1:$L(PSORLST) S RXM=$P(PSORLST,",",I) I +RXM F J=I+1:1:END S DUP=$P(PSORLST,",",J) I DUP=RXM S $P(PSORLST,",",J)=""
"RTN","PSORXEDT",14,0)
BAD I PSORLST D  I 'Y K Y G PSORXEDT
"RTN","PSORXEDT",15,0)
 .W !?15,"=> "_PSORLST
"RTN","PSORXEDT",16,0)
 .K DIR,DIRUT S DIR(0)="Y",DIR("A")="Is this OKAY ",DIR("B")="Yes"
"RTN","PSORXEDT",17,0)
 .D ^DIR K DIR
"RTN","PSORXEDT",18,0)
 .I 'Y!$D(DIRUT) K X,PSORLST,BAD
"RTN","PSORXEDT",19,0)
 K BAD I 'PSORLST K PSORLST G PSORXEDT
"RTN","PSORXEDT",20,0)
 F I=1:1:$L(PSORLST,",") S RXM=$P(PSORLST,",",I) S GOOD=$D(^PSRX("B",RXM)) D
"RTN","PSORXEDT",21,0)
 .I 'GOOD W !!?5,"Couldn't Find RX # "_RXM H 3 Q
"RTN","PSORXEDT",22,0)
 .S RXN=$O(^PSRX("B",RXM,0)) D  I $P(^PSRX(RXN,"STA"),"^")=13 W !!?5,"Rx # "_RXM_" is marked for Deletion." H 3 Q
"RTN","PSORXEDT",23,0)
 ..I $G(RXN),$P($G(^PS(55,+$P($G(^PSRX(RXN,0)),"^",2),0)),"^",6)'=2 S PSOLOUD=1 D EN^PSOHLUP(+$P($G(^PSRX(RXN,0)),"^",2)) K PSOLOUD
"RTN","PSORXEDT",24,0)
 .D LIST K GOOD
"RTN","PSORXEDT",25,0)
 K GOOD,END
"RTN","PSORXEDT",26,0)
EPH ; - Entry for Epharmacy Rx Edit (PSOREJP1)
"RTN","PSORXEDT",27,0)
 F PSOT1=1:1 Q:'$D(PSOLIST(PSOT1))  F PSOLST2=1:1:$L(PSOLIST(PSOT1),",") S ORN=$P(PSOLIST(PSOT1),",",PSOLST2) D:+ORN PT
"RTN","PSORXEDT",28,0)
 ;
"RTN","PSORXEDT",29,0)
 ; If variable PSOREJCT is set, this means the EPH entry point was called by the EDIT action in the ePharmacy
"RTN","PSORXEDT",30,0)
 ;   Reject Info Screen. The variable will hold the RX IEN. If the Fill Date is the current date or in the
"RTN","PSORXEDT",31,0)
 ;   future (whether it has been edited or not) and the RX is not already suspended, put the Rx on the list
"RTN","PSORXEDT",32,0)
 ;   to get the QUEUE prompt. Since the EDIT action only sends one RX, we can just set the array and not
"RTN","PSORXEDT",33,0)
 ;   worry about appending to an exiting list.
"RTN","PSORXEDT",34,0)
 I $G(PSOREJCT),$$RXFLDT^PSOBPSUT(+PSOREJCT,$P(PSOREJCT,U,2))'<$$DT^XLFDT,$$GET1^DIQ(52,+PSOREJCT_",",100,"I")'=5 S PSORX("PSOL",1)=+PSOREJCT
"RTN","PSORXEDT",35,0)
 ;call to add bingo board data to file 52.11
"RTN","PSORXEDT",36,0)
 K POP,PSOLIST,TM,TM1 G:'$O(PSORX("PSOL",0)) NX
"RTN","PSORXEDT",37,0)
 D:$G(PSORX("PSOL",1))]"" ^PSORXL K PSORX G:$G(NOBG) NX
"RTN","PSORXEDT",38,0)
PRF G:'$P(PSOPAR,"^",8)!($G(NOPP)="H")!($G(NOPP)="S")!('$D(^TMP("PSOBEDT",$J))) BBG
"RTN","PSORXEDT",39,0)
 I $O(^TMP("PSOBEDT",$J,0)),$P(PSOPAR,"^",8) S PSOFROM="NEW",PSOION=ION K RXRS
"RTN","PSORXEDT",40,0)
 G:$D(PSOPROP)&($G(PSOPROP)'=ION) QUP
"RTN","PSORXEDT",41,0)
 I '$D(PSOPROP)!($G(PSOPROP)=ION) D  G:$G(POP)!($E(IOST)["C")!(PSOION=ION) BBG
"RTN","PSORXEDT",42,0)
 .S PSOION=ION W !,"Profiles must be sent to Printer !!",! K IOP,%ZIS,IO("Q"),POP
"RTN","PSORXEDT",43,0)
 .S %ZIS="MNQ",%ZIS("A")="Select Profile Device: " D ^%ZIS K %ZIS("A")
"RTN","PSORXEDT",44,0)
 .Q:$G(POP)!($E(IOST)["C")!(PSOION=ION)  S PSOPROP=ION
"RTN","PSORXEDT",45,0)
QUP S X1=DT,X2=-120 D C^%DTC S PSODTCUT=X,HOLDRPAS=$G(PSOPRPAS),PSOPRPAS=$P(PSOPAR,"^",13)
"RTN","PSORXEDT",46,0)
 F DFN=0:0 S DFN=$O(^TMP("PSOBEDT",$J,DFN)) Q:'DFN  S PPL=^TMP("PSOBEDT",$J,DFN,0) D
"RTN","PSORXEDT",47,0)
 .S ZTRTN="DQ^PSOPRF",ZTIO=PSOPROP,ZTDESC="Outpatient Pharmacy Patient Profiles",ZTDTH=$H
"RTN","PSORXEDT",48,0)
 .F G="PSOPAR","PSODTCUT","PSOPRPAS","DFN","PSOSITE","NEW1","NEW11","PSOBMST","PFIO","PPL" S:$D(@G) ZTSAVE(G)=""
"RTN","PSORXEDT",49,0)
 .D ^%ZTLOAD
"RTN","PSORXEDT",50,0)
 W:$D(ZTSK) !,"PROFILE(S) QUEUED to PRINT",!! K G,ZTSK D ^%ZISC
"RTN","PSORXEDT",51,0)
 S PSOPRPAS=$G(HOLDRPAS) K:PSOPRPAS']"" PSOPRPAS K HOLDRPAS
"RTN","PSORXEDT",52,0)
BBG K DFN F PSODFN=0:0 S PSODFN=$O(^TMP("PSOBEDT",$J,PSODFN)) Q:'PSODFN  I $G(^TMP("PSOBEDT",$J,PSODFN,1)),$D(DISGROUP) S TM=$P($G(^TMP("PSOBB",$J)),"^"),TM1=$P($G(^($J)),"^",2),PPL=^TMP("PSOBEDT",$J,PSODFN,0) D ^PSOBING1
"RTN","PSORXEDT",53,0)
NX ;
"RTN","PSORXEDT",54,0)
 K %X,%Y,ACTREF,ACTREN,D,D0,DAT,DFN,DIC,DIQ,DQ,DRG,END,FDR,PSOBEDT,TM,TM1,PSOT1,PSOLST2,NOBG,BBFLG,BINGCRT,BINGRTE,C,CC,CMOP,COM,CT,D1,DI,DREN,BBRX,PSOFROM,POP,PSORX("QFLG"),IT,PSOERR,PSOBCK,PSOBM,PPL
"RTN","PSORXEDT",55,0)
 K ^TMP("PSOBEDT",$J),^TMP("PSOBB",$J),ZTSK,NOPP,VALMSG,VALMBCK D EOJ
"RTN","PSORXEDT",56,0)
END Q
"RTN","PSORXEDT",57,0)
 ;---------------------------------------------------------
"RTN","PSORXEDT",58,0)
PT ;
"RTN","PSORXEDT",59,0)
 N PSOTXEDT,PSOTPEXT S PSOTXEDT=$P($G(^PSRX(ORN,0)),"^",2) I PSOTXEDT I $D(^PS(52.91,PSOTXEDT,0)) I '$P(^PS(52.91,PSOTXEDT,0),"^",3)!($P(^(0),"^",3)>DT) D PDIR^PSOTPCAN(PSOTXEDT) I $G(PSOTPEXT) K PSOTPEXT,PSOTXEDT D EOJ Q
"RTN","PSORXEDT",60,0)
 K PSOTXEDT,PSOTPEXT
"RTN","PSORXEDT",61,0)
 D NOW^%DTC S TM=$E(%,1,12),TM1=$P(TM,".",2) S ^TMP("PSOBB",$J)=TM_"^"_TM1
"RTN","PSORXEDT",62,0)
 S $P(PSOLST(ORN),"^",2)=ORN,(PSOBEDT)=1
"RTN","PSORXEDT",63,0)
 S (DFN,PSODFN)=+$P(^PSRX(ORN,0),"^",2),PSORX("NAME")=$P(^DPT(DFN,0),"^") I PSODFN'=$G(PSOODOSP) K PSORX("DOSING OFF") S PSOODOSP=PSODFN
"RTN","PSORXEDT",64,0)
 D ICN^PSODPT(DFN)
"RTN","PSORXEDT",65,0)
 S RX0=^PSRX(ORN,0),RX2=$G(^(2)),RX3=$G(^(3))
"RTN","PSORXEDT",66,0)
 D:$G(DUZ("AG"))="V" COPAY^PSOPTPST ; Deals with copay
"RTN","PSORXEDT",67,0)
 K ^TMP("PSOHDR",$J),^TMP("PSOPI",$J) D ^VADPT,ADD^VADPT
"RTN","PSORXEDT",68,0)
 S ^TMP("PSOHDR",$J,1,0)=VADM(1),^TMP("PSOHDR",$J,2,0)=$P(VADM(2),"^",2)
"RTN","PSORXEDT",69,0)
 S ^TMP("PSOHDR",$J,3,0)=$P(VADM(3),"^",2)
"RTN","PSORXEDT",70,0)
 S ^TMP("PSOHDR",$J,4,0)=VADM(4),^TMP("PSOHDR",$J,5,0)=$P(VADM(5),"^",2)
"RTN","PSORXEDT",71,0)
 S POERR=1 D RE^PSODEM K POERR,VALMBCK
"RTN","PSORXEDT",72,0)
 S ^TMP("PSOHDR",$J,6,0)=$S($P(WT,"^",8):$P(WT,"^",9)_" ("_$P(WT,"^")_")",1:"_______ (______)")
"RTN","PSORXEDT",73,0)
 S ^TMP("PSOHDR",$J,7,0)=$S($P(HT,"^",8):$P(HT,"^",9)_" ("_$P(HT,"^")_")",1:"_______ (______)") K VM,WT,HT S PSOHD=7
"RTN","PSORXEDT",74,0)
 S ^TMP("PSOHDR",$J,9,0)="",^TMP("PSOHDR",$J,10,0)=""
"RTN","PSORXEDT",75,0)
 S GMRA="0^0^111" D ^GMRADPT S ^TMP("PSOHDR",$J,8,0)=+$G(GMRAL)
"RTN","PSORXEDT",76,0)
 S PSOBSA=$$BSA^PSSDSAPI(DFN),PSOBSA=$P(PSOBSA,"^",3),PSOBSA=$S(PSOBSA'>0:"_______",1:$J(PSOBSA,4,2)) S ^TMP("PSOHDR",$J,12,0)=PSOBSA
"RTN","PSORXEDT",77,0)
 S RSLT=$$CRCL^PSOORUT2(DFN)
"RTN","PSORXEDT",78,0)
 I $P(RSLT,"^",2)["Not Found" S ZDSPL=" CrCL: "_$P(RSLT,"^",2)
"RTN","PSORXEDT",79,0)
 E  S ZDSPL=" CrCL: "_$P($G(RSLT),"^",2)_"(est.) "_"(CREAT:"_$P($G(RSLT),"^",3)_"mg/dL "_$P($G(RSLT),"^")_")"
"RTN","PSORXEDT",80,0)
 S ^TMP("PSOHDR",$J,13,0)=ZDSPL
"RTN","PSORXEDT",81,0)
 K PSOBSA,RSLT,ZDSPL
"RTN","PSORXEDT",82,0)
 D NOW^%DTC S TM=$E(%,1,12),TM1=$P(TM,".",2) S ^TMP("PSOBB",$J)=TM_"^"_TM1
"RTN","PSORXEDT",83,0)
 S PSOLOUD=1 D:$P($G(^PS(55,PSODFN,0)),"^",6)'=2 EN^PSOHLUP(PSODFN) K PSOLOUD
"RTN","PSORXEDT",84,0)
 S PSOX=$G(^PS(55,PSODFN,"PS")) I PSOX]"" S PSORX("PATIENT STATUS")=$P($G(^PS(53,PSOX,0)),"^")
"RTN","PSORXEDT",85,0)
 D CLEAR^VALM1
"RTN","PSORXEDT",86,0)
 S STA="ACTIVE^NON-VERIFIED^REFILL^HOLD^NON-VERIFIED^SUSPENDED^^^^^^EXPIRED^DISCONTINUED^^DISCONTINUED^DISCONTINUED^HOLD"
"RTN","PSORXEDT",87,0)
 S $P(PSOLST(ORN),"^",3)=$P(STA,"^",$P(^PSRX(ORN,"STA"),"^")+1),PSLST=ORN,ORD=1
"RTN","PSORXEDT",88,0)
 D ACT^PSOORNE2
"RTN","PSORXEDT",89,0)
EOJ ;
"RTN","PSORXEDT",90,0)
 K INS1,HDR,IK,INDT,LOG,NODE,ORN,P1,PSI,PSL,PSOLION,PSNP,PSOACT,PSOBM,PSOCLC,PSOCNT,PSODD,PSODFN,PSOHD,PSOJ,PSOLST,PSOOI,PSOPF,PSLST
"RTN","PSORXEDT",91,0)
 K PSOIBQS,PSORLST,PSOSD,PSOSIG,PSPRXN,PSORX0,PSORX1,PTST,REFL,RF,RFD,RIFN,RLD,RPH,RTS,RX0,RX1,RX2,RX3,RXM,RXOR,SIG,SIGOK
"RTN","PSORXEDT",92,0)
 D KVA^VADPT K SLPPL,ST,STA,^TMP("PS",$J),PSOQFLG,PSORXED,PSOEDIT,DIR,DIRUT,DUOUT,DTOUT,PSOLOUD,GMRAL,GG,FEV,ACNT
"RTN","PSORXEDT",93,0)
 D FULL^VALM1 K ^TMP("PSOAL",$J),^TMP("PSOAO",$J),^TMP("PSOSF",$J),^TMP("PSOPF",$J),^TMP("PSOPI",$J),^TMP("PSOPO",$J),^TMP("PSOHDR",$J),PAT
"RTN","PSORXEDT",94,0)
 K JJ,K,MM,PSDAYS,PSOAC,PSOAL,PSOCOU,PSOCOUU,PSONEW,PSODRUG,PSONOOR,PSRX0,QTY,REA,RFCNT,RFDT,RXDA,RXFL,RXREF,SUB,X,Z,ZII
"RTN","PSORXEDT",95,0)
 K ACOM,CRIT,DA,DDH,DGI,DGS,PSONEW3,SER,SERS,ZONE,RN,RXN,PSOX,PSOERR,ORD,PSOBCK,PSOBILL,SURX,PSORX("QFLG"),PSORX("FN"),CLOZPAT
"RTN","PSORXEDT",96,0)
 Q
"RTN","PSORXEDT",97,0)
LIST ;
"RTN","PSORXEDT",98,0)
 I $G(^PSRX(RXN,0))']"" W !,$C(7),"Rx data is not on file !",! G LISTX
"RTN","PSORXEDT",99,0)
 I $P(^PSRX(RXN,0),"^",15)=13 S PSVD=1 W !,$C(7),"Rx # "_RXM_" has been deleted."
"RTN","PSORXEDT",100,0)
 S RXN1=RXN,RXM1=RXM D:'$G(PSVD) LST1 W "." S RXN=RXN1,RXM=RXM1 K RXN1,RXM1
"RTN","PSORXEDT",101,0)
 F  S RXN=$O(^PSRX("B",RXM,RXN)) Q:'RXN  D
"RTN","PSORXEDT",102,0)
 .I $G(^PSRX(RXN,0))']"" Q
"RTN","PSORXEDT",103,0)
 .I $P(^PSRX(RXN,0),"^",15)=13 Q
"RTN","PSORXEDT",104,0)
 .D LST1
"RTN","PSORXEDT",105,0)
 K RXN1 G LISTX
"RTN","PSORXEDT",106,0)
 Q
"RTN","PSORXEDT",107,0)
LST1 I $G(PSOLIST(1))']"" S PSOLIST(1)=RXN_"," G LISTX
"RTN","PSORXEDT",108,0)
 F PSOX1=0:0 S PSOX1=$O(PSOLIST(PSOX1)) Q:'PSOX1  S PSOX2=PSOX1
"RTN","PSORXEDT",109,0)
 I $L(PSOLIST(PSOX2))+$L(RXN)<220 S:RXN_","'[PSOLIST(PSOX2) PSOLIST(PSOX2)=PSOLIST(PSOX2)_RXN_","
"RTN","PSORXEDT",110,0)
 E  S:RXN_","'[PSOLIST(PSOX2+1) PSOLIST(PSOX2+1)=RXN_","
"RTN","PSORXEDT",111,0)
LISTX K PSOX1,PSOX2,RXN,PSVD
"RTN","PSORXEDT",112,0)
 Q
"RTN","PSORXVW")
0^9^B80713537
"RTN","PSORXVW",1,0)
PSORXVW ;BHAM ISC/SAB - listman view of a prescription ;6/7/12 7:00pm
"RTN","PSORXVW",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**14,35,46,96,103,88,117,131,146,156,185,210,148,233,260,264,281,359,385,400,391,313,427**;DEC 1997;Build 21
"RTN","PSORXVW",3,0)
 ;External reference to File ^PS(55 supported by DBIA 2228
"RTN","PSORXVW",4,0)
 ;External reference to ^PS(50.7 supported by DBIA 2223
"RTN","PSORXVW",5,0)
 ;External reference ^PSDRUG( supported by DBIA 221
"RTN","PSORXVW",6,0)
 ;External reference to ^VA(200 supported by DBIA 10060
"RTN","PSORXVW",7,0)
 ;External reference to ^SC supported by DBIA 10040
"RTN","PSORXVW",8,0)
 ;External reference to ^DPT supported by DBIA 10035
"RTN","PSORXVW",9,0)
 ;External reference to ^PS(50.606 supported by DBIA 2174
"RTN","PSORXVW",10,0)
 ;External reference to GMRADPT supported by DBIA 10099
"RTN","PSORXVW",11,0)
 ;External reference to $$BADADR^DGUTL3 supported by DBIA 4080
"RTN","PSORXVW",12,0)
 ;
"RTN","PSORXVW",13,0)
 S PS="VIEW"
"RTN","PSORXVW",14,0)
A1 ; - Prescription prompt
"RTN","PSORXVW",15,0)
 S DIR(0)="FAO^1:30",DIR("A")=PS_" PRESCRIPTION: ",(DIR("?"),DIR("??"))="^D HLP^PSORXVW1"
"RTN","PSORXVW",16,0)
 W ! D ^DIR I X=""!$D(DIRUT) K:$G(PS)="VIEW" DA K PS G KILL
"RTN","PSORXVW",17,0)
 S X=$$UP^XLFSTR(X),QUIT=0
"RTN","PSORXVW",18,0)
 I $E(X,1,2)'="E." S (DA,PSOVDA)=+$$LKP^PSORXVW1(X) I DA<0 G A1
"RTN","PSORXVW",19,0)
 I $E(X,1,2)="E." D  I QUIT G A1   ; esg 12/7/10 - ECME# lookup - PSO*7*359
"RTN","PSORXVW",20,0)
 .S (DA,PSOVDA)=+$$RXNUM^PSOBPSU2($E(X,3,$L(X))) I DA<0 W " ??",$C(7) S QUIT=1
"RTN","PSORXVW",21,0)
 ;
"RTN","PSORXVW",22,0)
 ; pso*7*385 - esg - Routine BPSRVX is calling this routine here at entry point DP in order to capture the
"RTN","PSORXVW",23,0)
 ; scratch global data for the View ECME Rx option.  Special variable BPSVRX=1 in this case.
"RTN","PSORXVW",24,0)
DP ; DBIA #4711 entry point from ECME
"RTN","PSORXVW",25,0)
 ;
"RTN","PSORXVW",26,0)
 S (PSODFN,DFN)=+$P(^PSRX(DA,0),"^",2) S PSOLOUD=1 D:$P($G(^PS(55,PSODFN,0)),"^",6)'=2 EN^PSOHLUP(PSODFN) K PSOLOUD
"RTN","PSORXVW",27,0)
 D ICN^PSODPT(PSODFN)
"RTN","PSORXVW",28,0)
 K ^TMP("PSOHDR",$J) D ^VADPT,ADD^VADPT
"RTN","PSORXVW",29,0)
 S ^TMP("PSOHDR",$J,1,0)=VADM(1)
"RTN","PSORXVW",30,0)
 N PSOBADR,PSOTEMP
"RTN","PSORXVW",31,0)
 S PSOBADR=$$BADADR^DGUTL3(DFN) I PSOBADR S PSOTEMP=$$CHKTEMP^PSOBAI(DFN) D
"RTN","PSORXVW",32,0)
 .S ^TMP("PSOHDR",$J,1,0)=^TMP("PSOHDR",$J,1,0)_" ** BAD ADDRESS INDICATED-("_$S(PSOBADR=1:"UNDELIVERABLE",PSOBADR=2:"HOMELESS",1:"OTHER")_")"_$S(PSOTEMP:" Active Temporary Address",1:"")
"RTN","PSORXVW",33,0)
 S ^TMP("PSOHDR",$J,2,0)=$P(VADM(2),"^",2)
"RTN","PSORXVW",34,0)
 S ^TMP("PSOHDR",$J,3,0)=$P(VADM(3),"^",2),^TMP("PSOHDR",$J,4,0)=VADM(4),^TMP("PSOHDR",$J,5,0)=$P(VADM(5),"^",2)
"RTN","PSORXVW",35,0)
 S POERR=1 D RE^PSODEM K PSOERR
"RTN","PSORXVW",36,0)
 S ^TMP("PSOHDR",$J,6,0)=$S(+$P(WT,"^",8):$P(WT,"^",9)_" ("_$P(WT,"^")_")",1:"_______ (______)")
"RTN","PSORXVW",37,0)
 S ^TMP("PSOHDR",$J,7,0)=$S($P(HT,"^",8):$P(HT,"^",9)_" ("_$P(HT,"^")_")",1:"_______ (______)") K VM,WT,HT S PSOHD=7
"RTN","PSORXVW",38,0)
 S GMRA="0^0^111" D EN1^GMRADPT S ^TMP("PSOHDR",$J,8,0)=+$G(GMRAL)
"RTN","PSORXVW",39,0)
 D DEM^VADPT I +VADM(6) D
"RTN","PSORXVW",40,0)
 .S SSN=$P(^DPT(PSODFN,0),"^",9) W !,$C(7),?10,$P(^DPT(PSODFN,0),"^")_" ("_$E(SSN,1,3)_"-"_$E(SSN,4,5)_"-"_$E(SSN,6,9)_") DIED "_$P(VADM(6),"^",2),!
"RTN","PSORXVW",41,0)
 .W "All Active Medications will be Autocanceled!",! H 2 S PSODEATH=1
"RTN","PSORXVW",42,0)
 .S ACOM="Date of Death "_$P(VADM(6),"^",2)_".",ZTRTN="CAN^PSOCAN3",ZTDESC="Outpatient Pharmacy Autocancel Due to Death of Patient",ZTSAVE("ACOM")="",ZTSAVE("PSODFN")="",ZTSAVE("PSODEATH")=""
"RTN","PSORXVW",43,0)
 .S ZTIO="",PSOCLC=DUZ,ZTSAVE("PSOCLC")="",ZTDTH=$H D ^%ZTLOAD K ACOM,ZTSK,PSODEATH
"RTN","PSORXVW",44,0)
 K ^TMP("PSOAL",$J),PCOMX,PDA,PHI,PRC,ACOM,ANS
"RTN","PSORXVW",45,0)
 S (DA,RXN)=PSOVDA K PSOVDA S RX0=^PSRX(RXN,0),RX2=$G(^(2)),RX3=$G(^(3)),ST=+$G(^("STA")),RXOR=$G(^("OR1"))
"RTN","PSORXVW",46,0)
 I 'RXOR,$P(^PSDRUG($P(RX0,"^",6),2),"^") S $P(^PSRX(RXN,"OR1"),"^")=$P(^PSDRUG($P(RX0,"^",6),2),"^"),RXOR=$P(^PSDRUG($P(RX0,"^",6),2),"^")
"RTN","PSORXVW",47,0)
 S IEN=0,$P(RN," ",12)=" "
"RTN","PSORXVW",48,0)
 N APPND,ECME,TITR
"RTN","PSORXVW",49,0)
 S APPND=$S($G(^PSRX(RXN,"IB")):"$",1:"")
"RTN","PSORXVW",50,0)
 S ECME=$$ECME^PSOBPSUT(RXN)  ; Returns "" (non-ECME), or "e" (ECME)
"RTN","PSORXVW",51,0)
 S TITR=$$TITRX^PSOUTL(RXN)  ; Returns "" (non-Titration), "m" (Maintenance) or "t" (titration)
"RTN","PSORXVW",52,0)
 S APPND=APPND_ECME_TITR
"RTN","PSORXVW",53,0)
 I ECME'="" S APPND=APPND_"  (ECME#: "_$$ECMENUM^PSOBPSU2(RXN)_")"
"RTN","PSORXVW",54,0)
 I TITR'="" S APPND=APPND_"  ("_$S(TITR="t":"Titration",1:"Maintenance")_")"
"RTN","PSORXVW",55,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=$S($P($G(^PSRX(RXN,"TPB")),"^"):"            TPB Rx #: ",1:"                Rx #: ")_$P(RX0,"^")_APPND_$E(RN,$L($P(RX0,"^")_APPND)+1,12)
"RTN","PSORXVW",56,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="      Orderable Item: "_$S($D(^PS(50.7,$P(+RXOR,"^"),0)):$P(^PS(50.7,$P(+RXOR,"^"),0),"^")_" "_$P(^PS(50.606,$P(^(0),"^",2),0),"^"),1:"No Pharmacy Orderable Item")
"RTN","PSORXVW",57,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=$S($D(^PSDRUG("AQ",$P(RX0,"^",6))):"           CMOP ",1:"                ")_"Drug: "_$P(^PSDRUG($P(RX0,"^",6),0),"^")
"RTN","PSORXVW",58,0)
 S:$G(^PSRX(RXN,"TN"))]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="          Trade Name: "_$G(^PSRX(RXN,"TN"))
"RTN","PSORXVW",59,0)
 ; Always display the NDC# - PSO*7*427
"RTN","PSORXVW",60,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="                 NDC: "_$$GETNDC^PSONDCUT(RXN,0)
"RTN","PSORXVW",61,0)
 D DOSE^PSORXVW1
"RTN","PSORXVW",62,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Patient Instructions:" I $O(^PSRX(RXN,"INS1",0)) D
"RTN","PSORXVW",63,0)
 . F I=0:0 S I=$O(^PSRX(RXN,"INS1",I)) Q:'I  D
"RTN","PSORXVW",64,0)
 .. S MIG=^PSRX(RXN,"INS1",I,0)
"RTN","PSORXVW",65,0)
 .. D WORDWRAP^PSOUTLA2(MIG,.IEN,$NA(^TMP("PSOAL",$J)),21)
"RTN","PSORXVW",66,0)
 K MIG,SG
"RTN","PSORXVW",67,0)
 I $P($G(^PS(55,PSODFN,"LAN")),"^") S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="  Other Pat. Instruc: "_$S($G(^PSRX(RXN,"INSS"))]"":^PSRX(RXN,"INSS"),1:"")
"RTN","PSORXVW",68,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="                 SIG:"
"RTN","PSORXVW",69,0)
 I '$P($G(^PSRX(RXN,"SIG")),"^",2) D  G PTST
"RTN","PSORXVW",70,0)
 . S X=$P($G(^PSRX(RXN,"SIG")),"^") D SIGONE^PSOHELP S SIG=$E($G(INS1),2,250)
"RTN","PSORXVW",71,0)
 . D WORDWRAP^PSOUTLA2(SIG,.IEN,$NA(^TMP("PSOAL",$J)),21)
"RTN","PSORXVW",72,0)
 S SIGOK=1
"RTN","PSORXVW",73,0)
 F I=0:0 S I=$O(^PSRX(RXN,"SIG1",I)) Q:'I  D
"RTN","PSORXVW",74,0)
 . S MIG=^PSRX(RXN,"SIG1",I,0)
"RTN","PSORXVW",75,0)
 . D WORDWRAP^PSOUTLA2(MIG,.IEN,$NA(^TMP("PSOAL",$J)),21)
"RTN","PSORXVW",76,0)
 S SIGOK=1 K MIG,SG
"RTN","PSORXVW",77,0)
PTST S $P(RN," ",25)=" ",PTST=$S($G(^PS(53,+$P(RX0,"^",3),0))]"":$P($G(^PS(53,+$P(RX0,"^",3),0)),"^"),1:""),IEN=IEN+1
"RTN","PSORXVW",78,0)
 S ^TMP("PSOAL",$J,IEN,0)="      Patient Status: "_PTST_$E(RN,$L(PTST)+1,25)
"RTN","PSORXVW",79,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="          Issue Date: "_$E($P(RX0,"^",13),4,5)_"/"_$E($P(RX0,"^",13),6,7)_"/"_$E($P(RX0,"^",13),2,3)
"RTN","PSORXVW",80,0)
 S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"                 Fill Date: "_$E($P(RX2,"^",2),4,5)_"/"_$E($P(RX2,"^",2),6,7)_"/"_$E($P(RX2,"^",2),2,3)
"RTN","PSORXVW",81,0)
 S ROU=$S($P(RX0,"^",11)="W":"Window",1:"Mail")
"RTN","PSORXVW",82,0)
 S REFL=$P(RX0,"^",9),I=0 F  S I=$O(^PSRX(RXN,1,I)) Q:'I  S REFL=REFL-1,ROU=$S($P(^PSRX(RXN,1,I,0),"^",2)="W":"Window",1:"Mail")
"RTN","PSORXVW",83,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="      Last Fill Date: "_$E($P(RX3,"^"),4,5)_"/"_$E($P(RX3,"^"),6,7)_"/"_$E($P(RX3,"^"),2,3)
"RTN","PSORXVW",84,0)
 D CMOP^PSOORNE3 S DA=RXN
"RTN","PSORXVW",85,0)
 S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_" ("_ROU_$S($G(PSOCMOP)]"":", "_PSOCMOP,1:"")_")" K ROU,PSOCMOP
"RTN","PSORXVW",86,0)
 S IEN=IEN+1 I $P(RX2,"^",15) S ^TMP("PSOAL",$J,IEN,0)="   Returned to Stock: "_$E($P(RX2,"^",15),4,5)_"/"_$E($P(RX2,"^",15),6,7)_"/"_$E($P(RX2,"^",15),2,3)
"RTN","PSORXVW",87,0)
 E  S ^TMP("PSOAL",$J,IEN,0)="   Last Release Date: " D
"RTN","PSORXVW",88,0)
 .S RLD=$S($P(RX2,"^",13):$E($P(RX2,"^",13),4,5)_"/"_$E($P(RX2,"^",13),6,7)_"/"_$E($P(RX2,"^",13),2,3),1:"")
"RTN","PSORXVW",89,0)
 .I $O(^PSRX(RXN,1,0)) F I=0:0 S I=$O(^PSRX(RXN,1,I)) Q:'I  D
"RTN","PSORXVW",90,0)
 ..I $P(^PSRX(RXN,1,I,0),"^",18) S RLD=$E($P(^(0),"^",18),4,5)_"/"_$E($P(^(0),"^",18),6,7)_"/"_$E($P(^(0),"^",18),2,3)
"RTN","PSORXVW",91,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_$S($G(RLD)]"":RLD,1:"        ")
"RTN","PSORXVW",92,0)
 S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"                     Lot #: "_$P(RX2,"^",4)
"RTN","PSORXVW",93,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="             Expires: "_$E($P(RX2,"^",6),4,5)_"/"_$E($P(RX2,"^",6),6,7)_"/"_$E($P(RX2,"^",6),2,3)
"RTN","PSORXVW",94,0)
 S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"                       MFG: "_$P($G(RX2),"^",8)
"RTN","PSORXVW",95,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="         Days Supply: "_$P(RX0,"^",8)_$S($L($P(RX0,"^",8))=1:" ",1:"")
"RTN","PSORXVW",96,0)
 S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"                        QTY"_$S($P($G(^PSDRUG($P(RX0,"^",6),660)),"^",8)]"":" ("_$P($G(^PSDRUG($P(RX0,"^",6),660)),"^",8)_")",1:" (  )")_": "_$P(RX0,"^",7)
"RTN","PSORXVW",97,0)
 I $P($G(^PSDRUG($P(RX0,"^",6),5)),"^")]"" D
"RTN","PSORXVW",98,0)
 .S $P(RN," ",79)=" ",IEN=IEN+1
"RTN","PSORXVW",99,0)
 .S ^TMP("PSOAL",$J,IEN,0)=$E(RN,$L("QTY DSP MSG: "_$P(^PSDRUG($P(RX0,"^",6),5),"^"))+1,79)_"QTY DSP MSG: "_$P(^PSDRUG($P(RX0,"^",6),5),"^") K RN
"RTN","PSORXVW",100,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="        # of Refills: "_$P(RX0,"^",9)_$S($L($P(RX0,"^",9))=1:" ",1:"")_"                       Remaining: "_REFL
"RTN","PSORXVW",101,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="            Provider: "_$S($D(^VA(200,$P(RX0,"^",4),0)):$P(^VA(200,$P(RX0,"^",4),0),"^"),1:"UNKNOWN")
"RTN","PSORXVW",102,0)
 N DEAV S DEAV=+$P($G(^PSDRUG(+$P(RX0,"^",6),0)),"^",3) I DEAV>1,DEAV<6 D PRV K DEAV
"RTN","PSORXVW",103,0)
 I $P(RX3,"^",3) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="        Cos-Provider: "_$P(^VA(200,$P(RX3,"^",3),0),"^")
"RTN","PSORXVW",104,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="             Routing: "_$S($P(RX0,"^",11)="W":"Window",1:"Mail")
"RTN","PSORXVW",105,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="              Copies: "_$S($P(RX0,"^",18):$P(RX0,"^",18),1:1)
"RTN","PSORXVW",106,0)
 S:$P(RX0,"^",11)="W" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="    Method of Pickup: "_$G(^PSRX(RXN,"MP"))
"RTN","PSORXVW",107,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="              Clinic: "_$S($D(^SC(+$P(RX0,"^",5),0)):$P(^SC($P(RX0,"^",5),0),"^"),1:"Not on File")
"RTN","PSORXVW",108,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="            Division: "_$P(^PS(59,$P(RX2,"^",9),0),"^")_" ("_$P(^(0),"^",6)_")"
"RTN","PSORXVW",109,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="          Pharmacist: "_$S($P(RX2,"^",3):$P(^VA(200,$P(RX2,"^",3),0),"^"),1:"")
"RTN","PSORXVW",110,0)
 S:$P(RX2,"^",10)&('$G(PSOCOPY)) IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="         Verified By: "_$P(^VA(200,$P(RX2,"^",10),0),"^")
"RTN","PSORXVW",111,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="  Patient Counseling: "_$S($P($G(^PSRX(RXN,"PC")),"^"):"YES",1:"NO")_"                      "_$S($P($G(^PSRX(RXN,"PC")),"^"):"Was Counseling Understood: "_$S($P($G(^PSRX(RXN,"PC")),"^",2):"YES",1:"NO"),1:"")
"RTN","PSORXVW",112,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="             Remarks: "_$P(RX3,"^",7)
"RTN","PSORXVW",113,0)
 D PC^PSORXVW1
"RTN","PSORXVW",114,0)
 I $P($G(^PSRX(DA,"OR1")),"^",5) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="         Finished By: "_$P(^VA(200,$P(^PSRX(DA,"OR1"),"^",5),0),"^")
"RTN","PSORXVW",115,0)
 D ^PSORXVW1 S PSOAL=IEN K IEN,ACT,LBL,LOG
"RTN","PSORXVW",116,0)
 I ST<12,$P(RX2,"^",6)<DT S ST=11
"RTN","PSORXVW",117,0)
 S VALM("TITLE")="Rx View "_"("_$P("Error^Active^Non-Verified^Refill^Hold^Non-Verified^Suspended^^^^^Done^Expired^Discontinued^Deleted^Discontinued^Discontinued (Edit)^Provider Hold^","^",ST+2)_")"
"RTN","PSORXVW",118,0)
 S:$P($G(^PSRX(DA,"PKI")),"^") VALMSG="Digitally Signed Order"
"RTN","PSORXVW",119,0)
 ;
"RTN","PSORXVW",120,0)
 ; pso*7*385 - esg - if being called by the BPSVRX routine, call HDR^PSOLMUTL to build the VALMHDR array and then Quit
"RTN","PSORXVW",121,0)
 I $G(BPSVRX) D HDR^PSOLMUTL Q
"RTN","PSORXVW",122,0)
 ;
"RTN","PSORXVW",123,0)
 D EN^PSOORAL,KILL I $G(PS)="VIEW" G PSORXVW
"RTN","PSORXVW",124,0)
 K:$G(PS)="VIEW" DA K PS
"RTN","PSORXVW",125,0)
 Q
"RTN","PSORXVW",126,0)
 ;
"RTN","PSORXVW",127,0)
KILL K ^TMP("PSOAL",$J),PSOAL,IEN,^TMP("PSOHDR",$J) I $G(PS)="VIEW" K DA
"RTN","PSORXVW",128,0)
 K ST,RFL,RFLL,RFL1,ST,II,J,N,PHYS,L1,DIRUT,PSDIV,PSEXDT,MED,M1,FFX,DTT,DAT,RX0,RX2,R3,RTN,SIG,STA,P1,PL,P0,Z0,Z1,EXDT,IFN,DIR,DUOUT,DTOUT,PSOELSE
"RTN","PSORXVW",129,0)
 K LBL,I,RFDATE,%H,%I,RN,RFT,%,%I,DFN,GMRA,GMRAL,HDR,POERR,PTST,REFL,RF,RLD,RX3
"RTN","PSORXVW",130,0)
 K RXN,RXOR,SG,VA,VADM,VAERR,VALMBCK,VAPA,X,DIC,REA,ZD,PSOHD,PSOBCK,PSODFN,QUIT
"RTN","PSORXVW",131,0)
 Q
"RTN","PSORXVW",132,0)
 ;
"RTN","PSORXVW",133,0)
PRV       ;
"RTN","PSORXVW",134,0)
 N DETN,DEA,LBL,VADD,SPC,ORN S ORN=$P(^PSRX(RXN,"OR1"),"^",2)
"RTN","PSORXVW",135,0)
 S DEA=$$DEA^XUSER(0,$P(RX0,"^",4))
"RTN","PSORXVW",136,0)
 S LBL=$S(DEA["-":"  VA#: ",1:" DEA#: ")
"RTN","PSORXVW",137,0)
 S $P(SPC," ",(28-$L(DEA)))=" "
"RTN","PSORXVW",138,0)
 I $$DETOX^PSSOPKI($P(RX0,"^",6)) S DETN=$$DETOX^XUSER($P(RX0,"^",4))
"RTN","PSORXVW",139,0)
 I (DEA'="")!($G(DETN)'="") S IEN=IEN+1,$E(^TMP("PSOAL",$J,IEN,0),16)=LBL_DEA_$S($G(DETN)]"":SPC_"DETOX#: "_$G(DETN),1:"")
"RTN","PSORXVW",140,0)
 D PRVAD^PSOPKIV2
"RTN","PSORXVW",141,0)
 I $G(VADD(1))]"" D
"RTN","PSORXVW",142,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="        Site Address: "_VADD(1)
"RTN","PSORXVW",143,0)
 .S:VADD(2)]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="                      "_VADD(2) S:VADD(3)]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="                      "_VADD(3)
"RTN","PSORXVW",144,0)
 Q
"RTN","PSORXVW",145,0)
 ;
"RTN","PSORXVW1")
0^10^B71633557
"RTN","PSORXVW1",1,0)
PSORXVW1 ;BIR/SAB - view prescription con't ;12/4/07 12:28pm
"RTN","PSORXVW1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**35,47,46,71,99,117,156,193,210,148,258,260,240,281,359,354,367,386,408,427**;DEC 1997;Build 21
"RTN","PSORXVW1",3,0)
 ;External reference to ^DD(52 supported by DBIA 999
"RTN","PSORXVW1",4,0)
 ;External reference to ^VA(200 supported by DBIA 10060
"RTN","PSORXVW1",5,0)
 ;PSO*210 add call to WORDWRAP api
"RTN","PSORXVW1",6,0)
 ;
"RTN","PSORXVW1",7,0)
 I $P($G(^PSRX(RXN,"OR1")),"^",6) D
"RTN","PSORXVW1",8,0)
 .K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=$P(^PSRX(RXN,"OR1"),"^",6) D ^DIC
"RTN","PSORXVW1",9,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="           Filled By: "_$P(Y,"^",2) K DIC,X,Y
"RTN","PSORXVW1",10,0)
 I $P($G(^PSRX(RXN,"OR1")),"^",7) D
"RTN","PSORXVW1",11,0)
 .K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=$P(^PSRX(RXN,"OR1"),"^",7) D ^DIC
"RTN","PSORXVW1",12,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="          Checked By: "_$P(Y,"^",2) K DIC,X,Y
"RTN","PSORXVW1",13,0)
 K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=$P(RX0,"^",16) D ^DIC
"RTN","PSORXVW1",14,0)
 S $P(RN," ",35)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="   Entry By: "_$P(Y,"^",2)_$E(RN,$L($P(Y,"^",2))+1,35)
"RTN","PSORXVW1",15,0)
 S Y=$P(RX2,"^") X ^DD("DD")
"RTN","PSORXVW1",16,0)
 S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"Entry Date: "_$E($P(RX2,"^"),4,5)_"/"_$E($P(RX2,"^"),6,7)_"/"_$E($P(RX2,"^"),2,3)_" "_$P(Y,"@",2) K RN
"RTN","PSORXVW1",17,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" " ;,IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSORXVW1",18,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Original Fill Released: " I $P(RX2,"^",13) S DTT=$P(RX2,"^",13) D DAT S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_DAT K DAT,DTT
"RTN","PSORXVW1",19,0)
 I $P(RX2,"^",15) S DTT=$P(RX2,"^",15) D DAT S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"(Returned to Stock "_DAT_")" K DAT,DTT
"RTN","PSORXVW1",20,0)
 S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"      Routing: "_$S($P(RX0,"^",11)="W":"Window",1:"Mail")
"RTN","PSORXVW1",21,0)
 I $G(^PSRX(DA,"H"))]"",$P(^("STA"),"^")=3 D HLD
"RTN","PSORXVW1",22,0)
 D RF,PAR,ACT,COPAY^PSORXVW2,LBL,ECME^PSOORAL1,SPMP^PSOORAL1,^PSORXVW2:$O(^PSRX(DA,4,0))
"RTN","PSORXVW1",23,0)
 Q
"RTN","PSORXVW1",24,0)
ACT ;activity log
"RTN","PSORXVW1",25,0)
 N CNT
"RTN","PSORXVW1",26,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Activity Log:"
"RTN","PSORXVW1",27,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#   Date        Reason         Rx Ref         Initiator Of Activity",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSORXVW1",28,0)
 I '$O(^PSRX(DA,"A",0)) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There's NO Activity to report" Q
"RTN","PSORXVW1",29,0)
 S CNT=0
"RTN","PSORXVW1",30,0)
 F N=0:0 S N=$O(^PSRX(DA,"A",N)) Q:'N  S P1=^(N,0),DTT=P1\1 D DAT D
"RTN","PSORXVW1",31,0)
 .I $P(P1,"^",2)="M" Q
"RTN","PSORXVW1",32,0)
 .S IEN=IEN+1,CNT=CNT+1,^TMP("PSOAL",$J,IEN,0)=CNT_"   "_DAT_"    ",$P(RN," ",15)=" ",REA=$P(P1,"^",2)
"RTN","PSORXVW1",33,0)
 .S REA=$F("HUCELPRWSIVDABXGKNM",REA)-1
"RTN","PSORXVW1",34,0)
 .I REA D
"RTN","PSORXVW1",35,0)
 ..S STA=$P("HOLD^UNHOLD^DISCONTINUED^EDIT^RENEWED^PARTIAL^REINSTATE^REPRINT^SUSPENSE^RETURNED^INTERVENTION^DELETED^DRUG INTERACTION^PROCESSED^X-INTERFACE^PATIENT INSTR.^PKI/DEA^DISP COMPLETED^ECME^","^",REA)
"RTN","PSORXVW1",36,0)
 ..S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_STA_$E(RN,$L(STA)+1,15)
"RTN","PSORXVW1",37,0)
 .E  S $P(STA," ",15)=" ",^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_STA
"RTN","PSORXVW1",38,0)
 .K STA,RN S $P(RN," ",15)=" ",RF=+$P(P1,"^",4)
"RTN","PSORXVW1",39,0)
 .S RFT=$S(RF>0&(RF<6):"REFILL "_RF,RF=6:"PARTIAL",RF>6:"REFILL "_(RF-1),1:"ORIGINAL")
"RTN","PSORXVW1",40,0)
 .K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=$P(P1,"^",3) D ^DIC
"RTN","PSORXVW1",41,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_RFT_$E(RN,$L(RFT)+1,15)_$S(+Y:$P(Y,"^",2),1:$P(P1,"^",3))
"RTN","PSORXVW1",42,0)
 .;S:$P(P1,"^",5)]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Comments: "_$P(P1,"^",5)
"RTN","PSORXVW1",43,0)
 .I $P(P1,"^",5)]"" N PSOACBRK,PSOACBRV D
"RTN","PSORXVW1",44,0)
 ..S PSOACBRV=$P(P1,"^",5)
"RTN","PSORXVW1",45,0)
 ..;PSO*7*240 Use fileman to format
"RTN","PSORXVW1",46,0)
 ..K ^UTILITY($J,"W") S X="Comments: "_PSOACBRV,(DIWR,DIWL)=1,DIWF="C80" D ^DIWP F I=1:1:^UTILITY($J,"W",1) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=$G(^UTILITY($J,"W",1,I,0))
"RTN","PSORXVW1",47,0)
 .I $G(^PSRX(DA,"A",N,1))]"" S IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0)," ",5)=$P(^PSRX(DA,"A",N,1),"^") I $P(^PSRX(DA,"A",N,1),"^",2)]"" S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_":"_$P(^PSRX(DA,"A",N,1),"^",2)
"RTN","PSORXVW1",48,0)
 .I $O(^PSRX(DA,"A",N,2,0)) F I=0:0 S I=$O(^PSRX(RXN,"A",N,2,I)) Q:'I  S MIG=^PSRX(RXN,"A",N,2,I,0) D
"RTN","PSORXVW1",49,0)
 ..S:MIG["Mail Tracking Info.: " IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0)," ",9)=" "
"RTN","PSORXVW1",50,0)
 ..F SG=1:1:$L(MIG) S:$L(^TMP("PSOAL",$J,IEN,0)_" "_$P(MIG," ",SG))>80 IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0)," ",9)=" " S:$P(MIG," ",SG)'="" ^TMP("PSOAL",$J,IEN,0)=$G(^TMP("PSOAL",$J,IEN,0))_" "_$P(MIG," ",SG)
"RTN","PSORXVW1",51,0)
 K MIG,SG,I,^UTILITY($J,"W"),DIWF,DIWL,DIWR
"RTN","PSORXVW1",52,0)
 Q
"RTN","PSORXVW1",53,0)
LBL ;label log
"RTN","PSORXVW1",54,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Label Log:"
"RTN","PSORXVW1",55,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#   Date        Rx Ref                    Printed By",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSORXVW1",56,0)
 I '$O(^PSRX(DA,"L",0)) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There are NO Labels printed." Q
"RTN","PSORXVW1",57,0)
 F L1=0:0 S L1=$O(^PSRX(DA,"L",L1)) Q:'L1  S LBL=^PSRX(DA,"L",L1,0),DTT=$P(^(0),"^") D DAT D
"RTN","PSORXVW1",58,0)
 . S $P(RN," ",26)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=L1_"   "_DAT_"    ",RFT=$S($P(LBL,"^",2):"REFILL "_$P(LBL,"^",2),1:"ORIGINAL"),RFT=RFT_$E(RN,$L(RFT)+1,26)
"RTN","PSORXVW1",59,0)
 . K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=$P(LBL,"^",4) D ^DIC
"RTN","PSORXVW1",60,0)
 . S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_RFT_$P(Y,"^",2),IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Comments: "_$P(LBL,"^",3)
"RTN","PSORXVW1",61,0)
 . N FDAMGDOC S FDAMGDOC=$P($G(^PSRX(DA,"L",L1,"FDA")),"^")
"RTN","PSORXVW1",62,0)
 . I FDAMGDOC'="" D
"RTN","PSORXVW1",63,0)
 . . S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="FDA Med Guide: "_$E(FDAMGDOC,1,61)
"RTN","PSORXVW1",64,0)
 . . I $L(FDAMGDOC)>61 D
"RTN","PSORXVW1",65,0)
 . . . F  Q:$E(FDAMGDOC,62,999)=""  D
"RTN","PSORXVW1",66,0)
 . . . . S FDAMGDOC=$E(FDAMGDOC,62,999),IEN=IEN+1
"RTN","PSORXVW1",67,0)
 . . . . S ^TMP("PSOAL",$J,IEN,0)=$E(FDAMGDOC,1,61)
"RTN","PSORXVW1",68,0)
 K DIC,X,Y Q
"RTN","PSORXVW1",69,0)
 ;
"RTN","PSORXVW1",70,0)
RF ;refill log
"RTN","PSORXVW1",71,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Refill Log:"
"RTN","PSORXVW1",72,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#  Log Date   Refill Date  Qty               Routing  Lot #       Pharmacist",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSORXVW1",73,0)
 S (RF,PL)=0 F RF=0:0 S RF=$O(^PSRX(DA,1,RF)) Q:'RF  S PL=PL+1
"RTN","PSORXVW1",74,0)
 I 'PL S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There are NO Refills For this  Prescription" Q
"RTN","PSORXVW1",75,0)
 F N=0:0 S N=$O(^PSRX(DA,1,N)) Q:'N  S P1=^(N,0) D
"RTN","PSORXVW1",76,0)
 .S DTT=$P(P1,"^",8)\1 D DAT S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=N_"   "_DAT_"   "
"RTN","PSORXVW1",77,0)
 .S DTT=$P(P1,"^"),$P(RN," ",10)=" " D DAT
"RTN","PSORXVW1",78,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_DAT_"     "_$P(P1,"^",4)_$E("               ",$L($P(P1,"^",4))+1,15)_"  "_$S($P(P1,"^",2)="M":"Mail",1:"Window")_" "_$P(P1,"^",6)_$E(RN,$L($P(P1,"^",6))+1,12)
"RTN","PSORXVW1",79,0)
 .K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=+$P(P1,"^",5) D ^DIC
"RTN","PSORXVW1",80,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_$E($S(+Y:$P(Y,"^",2),1:""),1,16) K DIC,X,Y
"RTN","PSORXVW1",81,0)
 .S PSDIV=$S($D(^PS(59,+$P(P1,"^",9),0)):$P(^(0),"^",6),1:"Unknown"),IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Division: "_PSDIV_$E("        ",$L(PSDIV)+1,8)_"  "
"RTN","PSORXVW1",82,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_"Dispensed: "_$S($P(P1,"^",19):$E($P(P1,"^",19),4,5)_"/"_$E($P(P1,"^",19),6,7)_"/"_$E($P(P1,"^",19),2,3),1:"")_"  "
"RTN","PSORXVW1",83,0)
 .S RTS=$S($P(P1,"^",16):" Returned to Stock: "_$E($P(P1,"^",16),4,5)_"/"_$E($P(P1,"^",16),6,7)_"/"_$E($P(P1,"^",16),2,3),1:" Released: "_$S($$RXRLDT^PSOBPSUT(DA,N):$$FMTE^XLFDT($$RXRLDT^PSOBPSUT(DA,N)\1,2),1:""))
"RTN","PSORXVW1",84,0)
 .;Always display the NDC# - PSO*427
"RTN","PSORXVW1",85,0)
 .S RTS=RTS_"  NDC: "_$$GETNDC^PSONDCUT(DA,N)
"RTN","PSORXVW1",86,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_RTS
"RTN","PSORXVW1",87,0)
 .S:$P(P1,"^",3)]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="   Remarks: "_$P(P1,"^",3)
"RTN","PSORXVW1",88,0)
 K RTS Q
"RTN","PSORXVW1",89,0)
PAR ;partial log
"RTN","PSORXVW1",90,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Partial Fills:"
"RTN","PSORXVW1",91,0)
 S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="#   Log Date   Date     Qty              Routing    Lot #        Pharmacist",IEN=IEN+1,$P(^TMP("PSOAL",$J,IEN,0),"=",79)="="
"RTN","PSORXVW1",92,0)
 I '$O(^PSRX(DA,"P",0)) S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="There are NO Partials for this Prescription" Q
"RTN","PSORXVW1",93,0)
 S N=0 F  S N=$O(^PSRX(DA,"P",N)) Q:'N  S P1=^(N,0),DTT=$P(P1,"^",8)\1 D DAT D
"RTN","PSORXVW1",94,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)=N_"   "_DAT_"  ",QTY=$P(P1,"^",4)_$E("               ",$L($P(P1,"^",4))+1,15)
"RTN","PSORXVW1",95,0)
 .S DTT=$P(P1,"^") D DAT S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_DAT_"  "_QTY_"  "
"RTN","PSORXVW1",96,0)
 .S PSDIV=$S($D(^PS(59,+$P(P1,"^",9),0)):$P(^(0),"^",6),1:"UNKNOWN"),PSDIV=PSDIV_$E("        ",$L(PSDIV)+1,8)
"RTN","PSORXVW1",97,0)
 .S MW=$S($P(P1,"^",2)="M":"Mail",1:"Window"),MW=MW_$E("          ",$L(MW)+1,10)
"RTN","PSORXVW1",98,0)
 .K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=+$P(P1,"^",16) D ^DIC
"RTN","PSORXVW1",99,0)
 .S ^TMP("PSOAL",$J,IEN,0)=^TMP("PSOAL",$J,IEN,0)_MW_"  "_$P(P1,"^",6)_$E("            ",$L($P(P1,"^",6))+1,10)_$E($S(+Y:$P(Y,"^",2),1:""),1,16)
"RTN","PSORXVW1",100,0)
 .S RTS=$S($P(P1,"^",16):" RETURNED TO STOCK: "_$E($P(P1,"^",16),4,5)_"/"_$E($P(P1,"^",16),6,7)_"/"_$E($P(P1,"^",16),2,3),1:" RELEASED: "_$S($P(P1,"^",19):$E($P(P1,"^",19),4,5)_"/"_$E($P(P1,"^",19),6,7)_"/"_$E($P(P1,"^",19),2,3),1:""))
"RTN","PSORXVW1",101,0)
 .K DIC,X,Y S DIC="^VA(200,",DIC(0)="N,Z",X=$P(P1,"^",7) D ^DIC
"RTN","PSORXVW1",102,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Division: "_PSDIV_" "_RTS ;_"      Entry By: "_$P(Y,"^",2) K DIC,X,Y
"RTN","PSORXVW1",103,0)
 .S:$P(P1,"^",3)]"" IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="  REMARKS: "_$P(P1,"^",3) K RTS
"RTN","PSORXVW1",104,0)
 Q
"RTN","PSORXVW1",105,0)
HLD ;hold info
"RTN","PSORXVW1",106,0)
 S DTT=$P(^PSRX(DA,"H"),"^",3) D DAT S HLDR=$$GET1^DIQ(52,DA,99)
"RTN","PSORXVW1",107,0)
 S $P(RN," ",60)=" ",IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Hold Reason: "_HLDR_$E(RN,$L("Hold Reason: "_HLDR)+1,60)_"Hold Date: "_DAT
"RTN","PSORXVW1",108,0)
 I $P($G(^PSRX(DA,"H")),"^",2)]"" D
"RTN","PSORXVW1",109,0)
 . N HLDCOMM S HLDCOMM=$P(^PSRX(DA,"H"),"^",2)
"RTN","PSORXVW1",110,0)
 . S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="Hold Comments: "_$E(HLDCOMM,1,65),HLDCOMM=$E(HLDCOMM,66,999)
"RTN","PSORXVW1",111,0)
 . F  Q:HLDCOMM=""  D
"RTN","PSORXVW1",112,0)
 . . S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="               "_$E(HLDCOMM,1,65),HLDCOMM=$E(HLDCOMM,66,999)
"RTN","PSORXVW1",113,0)
 K RN,DAT,DTT,HLDR
"RTN","PSORXVW1",114,0)
 Q
"RTN","PSORXVW1",115,0)
DAT S DAT="",DTT=DTT\1 Q:DTT'?7N  S DAT=$E(DTT,4,5)_"/"_$E(DTT,6,7)_"/"_$E(DTT,2,3)
"RTN","PSORXVW1",116,0)
 Q
"RTN","PSORXVW1",117,0)
INST ;formats instruction from front door
"RTN","PSORXVW1",118,0)
 I $O(^PSRX(DA,"PI",0)) D
"RTN","PSORXVW1",119,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="        Instructions:"
"RTN","PSORXVW1",120,0)
 .S T=0 F  S T=$O(^PSRX(RXN,"PI",T)) Q:'T  D                  ;PSO*210
"RTN","PSORXVW1",121,0)
 ..S MIG=^PSRX(RXN,"PI",T,0)
"RTN","PSORXVW1",122,0)
 ..D WORDWRAP^PSOUTLA2(MIG,.IEN,$NA(^TMP("PSOAL",$J)),21)
"RTN","PSORXVW1",123,0)
 K T,TY,MIG,SG
"RTN","PSORXVW1",124,0)
 Q
"RTN","PSORXVW1",125,0)
PC ;displays provider comments
"RTN","PSORXVW1",126,0)
 I $O(^PSRX(DA,"PRC",0)) D
"RTN","PSORXVW1",127,0)
 .S IEN=IEN+1,^TMP("PSOAL",$J,IEN,0)="   Provider Comments:"
"RTN","PSORXVW1",128,0)
 .S T=0 F  S T=$O(^PSRX(RXN,"PRC",T)) Q:'T  D                 ;PSO*210
"RTN","PSORXVW1",129,0)
 ..S MIG=^PSRX(RXN,"PRC",T,0)
"RTN","PSORXVW1",130,0)
 ..D WORDWRAP^PSOUTLA2(MIG,.IEN,$NA(^TMP("PSOAL",$J)),21)
"RTN","PSORXVW1",131,0)
 K T,TY,MIG,SG
"RTN","PSORXVW1",132,0)
 Q
"RTN","PSORXVW1",133,0)
DOSE ;displays dosing instruction for both simple and complex Rxs.
"RTN","PSORXVW1",134,0)
 D DOSE^PSORXVW2
"RTN","PSORXVW1",135,0)
 Q
"RTN","PSORXVW1",136,0)
 ;
"RTN","PSORXVW1",137,0)
HLP ; Help Text for the VIEW PRESCRIPTION prompt
"RTN","PSORXVW1",138,0)
 W !," A prescription number or ECME number may be entered.  To look-up a"
"RTN","PSORXVW1",139,0)
 W !," prescription by the ECME number, please enter ""E."" followed by the ECME"
"RTN","PSORXVW1",140,0)
 W !," number with or without any leading zeros."
"RTN","PSORXVW1",141,0)
 W !!,"  Or just",!
"RTN","PSORXVW1",142,0)
 D LKP("?")
"RTN","PSORXVW1",143,0)
 Q 
"RTN","PSORXVW1",144,0)
 ;
"RTN","PSORXVW1",145,0)
LKP(INPUT) ; - Peforms Lookup on the PRESCRIPTION file
"RTN","PSORXVW1",146,0)
 N DIC,X,Y
"RTN","PSORXVW1",147,0)
 S DIC="^PSRX(",DIC(0)="QE",D="B",X=INPUT
"RTN","PSORXVW1",148,0)
 S DIC("S")="I $P($G(^(0)),""^"",2),$D(^(""STA"")),$P($G(^(""STA"")),""^"")'=13"
"RTN","PSORXVW1",149,0)
 D IX^DIC
"RTN","PSORXVW1",150,0)
 Q Y
"RTN","PSOSULBL")
0^27^B99891854
"RTN","PSOSULBL",1,0)
PSOSULBL ;BHAM ISC/RTR,SAB - Print Suspended labels ;4/8/93
"RTN","PSOSULBL",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**139,173,174,148,200,260,264,287,289,290,354,421,370,427**;DEC 1997;Build 21
"RTN","PSOSULBL",3,0)
 ;External reference ^PS(55 supported by DBIA 2228
"RTN","PSOSULBL",4,0)
 ;Reference to SAVNDC^PSSNDCUT supported by IA 4707
"RTN","PSOSULBL",5,0)
 ;Reference ^PSDRUG( supported by DBIA 221
"RTN","PSOSULBL",6,0)
 K PDUZ,REPRINT G ^PSOSULB1
"RTN","PSOSULBL",7,0)
BEG ;
"RTN","PSOSULBL",8,0)
 K PSORUNIN,PSORETRY N BPSCNT
"RTN","PSOSULBL",9,0)
 S PSORUNIN="^XTMP(""PSOSUSP"")"     ; global lock fix by patch 290
"RTN","PSOSULBL",10,0)
 L +@PSORUNIN:10 I '$T D
"RTN","PSOSULBL",11,0)
 . F PSORETRY=1:1:120 L +@PSORUNIN:60 I $T Q  ;wait Max of 2 hrs before continue
"RTN","PSOSULBL",12,0)
 . Q
"RTN","PSOSULBL",13,0)
 K ^UTILITY($J,"PSOPRO"),^TMP("PSOSBAI",$J) S PSOSEQ=1 F DFN=0:0 S DFN=$O(^PS(52.5,"AC",DFN)) Q:'DFN  D  D:'PSRT PID^VADPT6 D CHKDEAD D:'DEAD&($G(PSOSFLAG)) PRT
"RTN","PSOSULBL",14,0)
 .S PSOSFLAG=0 F ZZ=0:0 S ZZ=$O(^PS(52.5,"AC",DFN,ZZ)) Q:'ZZ!$G(PSOSFLAG)  I ZZ'>PRTDT S PSOSFLAG=1
"RTN","PSOSULBL",15,0)
 D PPL
"RTN","PSOSULBL",16,0)
 D:$D(^UTILITY($J,"PSOPRO"))&($P(PSOPAR,"^",8)) PROF
"RTN","PSOSULBL",17,0)
 G EXIT
"RTN","PSOSULBL",18,0)
PRT F SDT=0:0 S SDT=$O(^PS(52.5,"AC",DFN,SDT)) D:SDT CHK Q:'SDT
"RTN","PSOSULBL",19,0)
 Q
"RTN","PSOSULBL",20,0)
EXIT ;
"RTN","PSOSULBL",21,0)
 I $D(^TMP("PSOSBAI",$J)) D CHKMAIL
"RTN","PSOSULBL",22,0)
 K ^TMP($J),^TMP("PSOSBAI",$J)
"RTN","PSOSULBL",23,0)
 I $D(PSORUNIN) L -@PSORUNIN
"RTN","PSOSULBL",24,0)
 D ^%ZISC
"RTN","PSOSULBL",25,0)
 K %,%ZIS,CNT,COM,DA,DEAD,DFN,DIRUT,DTTM,G,HDPPL,JJ,JJJ,JJJJ,PDUZ,IOP,ORD,PFIOQ,PSLION,PSRT,POP,PRF,PRTDT,PSLIO,PSNP,PSODBQ,PSOSEQ,PSOSFLAG,PSOSU,PSOTIME,PSOOUT,PSOPRFLG,PSOSEQ,PSOSUSPR,PSSPND,PST,PTL,PPLHLD,PSFNIEN,ZTSK
"RTN","PSOSULBL",26,0)
 K PSOBADDR,PSORUNIN,PSORETRY,PSRTONE,PSSRT,PSUSDEA,RF,RFCNT,RX,RXDFN,SDT,SFN,SREC,STOP,SUSPT,VADM,VAPA,X,X1,X2,XAK,XDATE,Y,Z,ZZ,WWW,PSDDDATE,SINRX,RXPR,RXPR1,GGGG,XXX,ZII,ZTDESC,ZTRTN,ZTSAVE,RRRR,RXRP,RXRP1,RXFL,SPR S:$D(ZTQUEUED) ZTREQ="@" Q
"RTN","PSOSULBL",27,0)
CHK I SDT'>XDATE D TMP Q
"RTN","PSOSULBL",28,0)
 Q
"RTN","PSOSULBL",29,0)
TMP F SFN=0:0 S SFN=$O(^PS(52.5,"AC",DFN,SDT,SFN)) Q:'SFN  D
"RTN","PSOSULBL",30,0)
 . I '$D(^PS(52.5,SFN,0))!'$D(^DPT(+DFN,0)) Q
"RTN","PSOSULBL",31,0)
 . N RXSITE,PRINTED,PSDFN,RXSTS,RXIEN,RXFILL,PARTIAL,RXEXPDT,RESP,DSHLD,ESTATUS
"RTN","PSOSULBL",32,0)
 . S RXIEN=+$$GET1^DIQ(52.5,SFN,.01,"I"),RXDFN=$$GET1^DIQ(52,RXIEN,2,"I")
"RTN","PSOSULBL",33,0)
 . S RXSTS=$$GET1^DIQ(52,RXIEN,100,"I"),RXSITE=+$$GET1^DIQ(52.5,SFN,.06,"I"),PRINTED=+$$GET1^DIQ(52.5,SFN,2,"I")
"RTN","PSOSULBL",34,0)
 . S PARTIAL=+$$GET1^DIQ(52.5,SFN,.05,"I"),RXEXPDT=$$GET1^DIQ(52,RXIEN,26,"I")
"RTN","PSOSULBL",35,0)
 . S RXFILL=$$GET1^DIQ(52.5,SFN,9,"I") I RXFILL="" S RXFILL=$$LSTRFL^PSOBPSU1(RXIEN)
"RTN","PSOSULBL",36,0)
 . I RXSITE=$G(PSOSITE),'PRINTED,RXDFN=DFN,RXSTS<9 D
"RTN","PSOSULBL",37,0)
 . . I PARTIAL,'$D(^PSRX(RXIEN,"P",PARTIAL)) Q
"RTN","PSOSULBL",38,0)
 . . ; If already printed and the REPRINT flag is not set, remove from queue and quit
"RTN","PSOSULBL",39,0)
 . . I $$PRINTED(SFN,RXIEN,RXFILL)=1 D REMOVE(SFN,RXIEN,RXFILL,.5,"","") Q 
"RTN","PSOSULBL",40,0)
 . . I RXEXPDT<DT,RXSTS<11 D  Q
"RTN","PSOSULBL",41,0)
 . . . N RXREC S RXREC=RXIEN D EX^PSOSUTL
"RTN","PSOSULBL",42,0)
 . . . K DIE,DA S DIE=52,DA=RXIEN,DR="100///11" D ^DIE K DIE,DA
"RTN","PSOSULBL",43,0)
 . . . K DIK,DA S DA=SFN,DIK="^PS(52.5," D ^DIK K DIK,DA
"RTN","PSOSULBL",44,0)
 . . S PSOBADDR=0 D CHKBAI I PSOBADDR Q
"RTN","PSOSULBL",45,0)
 . . I PSRT="D" D
"RTN","PSOSULBL",46,0)
 . . . S PSSRT=$S($G(PSRTONE)="I":VA("PID"),1:$P(^DPT(DFN,0),"^")_$P(^(0),"^",9))
"RTN","PSOSULBL",47,0)
 . . . S PSUSDEA=$P($G(^PS(52.5,SFN,0)),"^",10)
"RTN","PSOSULBL",48,0)
 . . . S SRT=$S(PSUSDEA["A"!(PSUSDEA["C"):"A-"_PSSRT,PSUSDEA["S":"S-"_PSSRT,1:"Z-"_PSSRT)
"RTN","PSOSULBL",49,0)
 . . I PSRT'="D" D
"RTN","PSOSULBL",50,0)
 . . . S SRT=$S(PSRT:$P(^DPT(DFN,0),"^")_$P(^(0),"^",9),1:VA("PID"))
"RTN","PSOSULBL",51,0)
 . . ; - If not partial fill, sending Rx to ECME for 3rd Party billing
"RTN","PSOSULBL",52,0)
 . . I 'PARTIAL,$$RETRX^PSOBPSUT(RXIEN,RXFILL),SDT>DT Q
"RTN","PSOSULBL",53,0)
 . . S ESTATUS=$$STATUS^PSOBPSUT(RXIEN,RXFILL)
"RTN","PSOSULBL",54,0)
 . . I 'PARTIAL,ESTATUS'="",ESTATUS'["PAYABLE",'$$ECMESTAT^PSOBPSU2(RXIEN,RXFILL) Q  ;check for existing epharmacy reject codes
"RTN","PSOSULBL",55,0)
 . . I 'PARTIAL,RXFILL>0,$$STATUS^PSOBPSUT(RXIEN,RXFILL-1)'="" S DSHLD=$$DSH^PSOSULB1(SFN) Q:'DSHLD  ;epharmacy-3/4 days supply (refill)
"RTN","PSOSULBL",56,0)
 . . I 'PARTIAL,RXFILL=0 S DSHLD=$$DSH^PSOSULB1(SFN) Q:'DSHLD  ;epharmacy-3/4 days supply (original fill)
"RTN","PSOSULBL",57,0)
 . . I 'PARTIAL,$$FIND^PSOREJUT(RXIEN,RXFILL,,"79,88",,1) Q  ;check for DUR/RTS/RRR (again as it is done in ECMESTAT above)
"RTN","PSOSULBL",58,0)
 . . I 'PARTIAL,($$RETRX^PSOBPSUT(RXIEN,RXFILL)!$$ECMEST2^PSOBPSU2(RXIEN,RXFILL)) D  Q:$$TRISTA^PSOREJU3(RXIEN,RXFILL,.RESP,"PL")
"RTN","PSOSULBL",59,0)
 . . . D ECMESND^PSOBPSU1(RXIEN,RXFILL,,"PL",,,,,,.RESP)
"RTN","PSOSULBL",60,0)
 . . . I $D(RESP),'RESP S BPSCNT=$G(BPSCNT)+1
"RTN","PSOSULBL",61,0)
 . . S ^TMP($J,SRT,SFN)=RXIEN
"RTN","PSOSULBL",62,0)
 Q
"RTN","PSOSULBL",63,0)
PPL ; Wait some time before printing so response from 3rd party payers can be received
"RTN","PSOSULBL",64,0)
 I $G(BPSCNT)>0 H 60+$S((BPSCNT*15)>7200:7200,1:(BPSCNT*15))
"RTN","PSOSULBL",65,0)
 K PPL,PPL1 S ORD="" F  S ORD=$O(^TMP($J,ORD)) Q:ORD=""  D PPL1
"RTN","PSOSULBL",66,0)
 Q
"RTN","PSOSULBL",67,0)
PPL1 ; Printing Labels
"RTN","PSOSULBL",68,0)
 N PARTIAL,REPRINT,REFILL,Z,QUIT,ESTAT
"RTN","PSOSULBL",69,0)
 S (PSOPRFLG,SUSPT)=1 S:$D(PSOPROP) PFIO=PSOPROP
"RTN","PSOSULBL",70,0)
 S:'$D(PDUZ) PDUZ=DUZ K RXPR,RXPR1,PPL
"RTN","PSOSULBL",71,0)
 F SFN=0:0 S SFN=$O(^TMP($J,ORD,SFN)) Q:'SFN  D
"RTN","PSOSULBL",72,0)
 .I '$D(^PS(52.5,SFN,0)) Q
"RTN","PSOSULBL",73,0)
 .S Z=$G(^PS(52.5,SFN,0)),SINRX=+$P(Z,"^"),REFILL=+$P(Z,"^",13)
"RTN","PSOSULBL",74,0)
 .S PARTIAL=$P(Z,"^",5),REPRINT=$P(Z,"^",12)
"RTN","PSOSULBL",75,0)
 .; - Screening out OPEN/UNRESOLVED Rejects (3rd Party Payer) 
"RTN","PSOSULBL",76,0)
 .S QUIT=0
"RTN","PSOSULBL",77,0)
 .I 'PARTIAL,'REPRINT D  I QUIT Q
"RTN","PSOSULBL",78,0)
 ..I $$FIND^PSOREJUT(SINRX,REFILL,,"79,88",,1) S QUIT=1 Q
"RTN","PSOSULBL",79,0)
 ..S ESTAT=$$STATUS^PSOBPSUT(SINRX,REFILL)
"RTN","PSOSULBL",80,0)
 ..I ESTAT'="E PAYABLE",'$$ECMESTAT^PSOBPSU2(SINRX,REFILL) S QUIT=1 Q  ;host reject
"RTN","PSOSULBL",81,0)
 ..I ESTAT="E PAYABLE" D
"RTN","PSOSULBL",82,0)
 ...D SAVNDC^PSSNDCUT(+$$GET1^DIQ(52,SINRX,6,"I"),$$RXSITE^PSOBPSUT(SINRX,REFILL),$$GETNDC^PSONDCUT(SINRX,REFILL))
"RTN","PSOSULBL",83,0)
 .; 
"RTN","PSOSULBL",84,0)
 .I $L($G(PPL))<240 D
"RTN","PSOSULBL",85,0)
 ..S PPL=$P(^TMP($J,ORD,SFN),"^")_","_$G(PPL),RXPR(SINRX)=$P(^PS(52.5,SFN,0),"^",5)
"RTN","PSOSULBL",86,0)
 ..S:$P(^PS(52.5,SFN,0),"^",12) RXRP(SINRX)=1
"RTN","PSOSULBL",87,0)
 .E  D
"RTN","PSOSULBL",88,0)
 ..S PPL1=$P(^TMP($J,ORD,SFN),"^")_","_$G(PPL1),RXPR1(SINRX)=$P(^PS(52.5,SFN,0),"^",5)
"RTN","PSOSULBL",89,0)
 ..S:$P(^PS(52.5,SFN,0),"^",12) RXRP1(SINRX)=1
"RTN","PSOSULBL",90,0)
 .S DFN=$P(^PS(52.5,SFN,0),"^",3)
"RTN","PSOSULBL",91,0)
 .I $P(PSOPAR,"^",8),'$D(^PSRX($P(^PS(52.5,SFN,0),"^"),1)),'$G(RXPR(SINRX)),'$G(RXPR1(SINRX)) S PSOPRFLG=0
"RTN","PSOSULBL",92,0)
 S PSNP=$S($P(PSOPAR,"^",8):1,1:0)
"RTN","PSOSULBL",93,0)
 I $G(PPL) D
"RTN","PSOSULBL",94,0)
 .S PPLHLD=$G(PPL1),HDPPL=PPL K PPL1 S (PSODBQ,PSOSUSPR)=1
"RTN","PSOSULBL",95,0)
 .F GGGG=0:0 S GGGG=$O(RXPR(GGGG)) Q:'GGGG  K:'$G(RXPR(GGGG)) RXPR(GGGG)
"RTN","PSOSULBL",96,0)
 I $G(PPL) S ZTIO=$G(PSLION) D DQ^PSOLBL,SEQ D:'$G(PSOPRFLG) 
"RTN","PSOSULBL",97,0)
 .I $G(PSOPROP)'=$G(PSLION) S ^UTILITY($J,"PSOPRO",DFN)="" Q
"RTN","PSOSULBL",98,0)
 .D DQ^PSOPRFSS
"RTN","PSOSULBL",99,0)
 I $G(PPLHLD) K RXPR S (PPL,HDPPL)=PPLHLD,(PSODBQ,PSOSUSPR)=1,PSNP=0 S:'$D(PDUZ) PDUZ=DUZ F XXX=0:0 S XXX=$O(RXPR1(XXX)) Q:'XXX  S:$G(RXPR1(XXX)) RXPR(XXX)=RXPR1(XXX)
"RTN","PSOSULBL",100,0)
 I $G(PPLHLD) F RRRR=0:0 S RRRR=$O(RXRP1(RRRR)) Q:'RRRR  S:$D(RXRP1(RRRR)) RXRP(RRRR)=1
"RTN","PSOSULBL",101,0)
 I $G(PPLHLD) S ZTIO=$G(PSLION) D DQ^PSOLBL,SEQ D:'$G(PSOPRFLG)
"RTN","PSOSULBL",102,0)
 .I $G(PSOPROP)'=$G(PSLION) S ^UTILITY($J,"PSOPRO",DFN)="" Q
"RTN","PSOSULBL",103,0)
 .D DQ^PSOPRFSS
"RTN","PSOSULBL",104,0)
 K PPL,PPL1,PPLHLD,RXPR,RXPR1,RXFL Q
"RTN","PSOSULBL",105,0)
SEQ ;
"RTN","PSOSULBL",106,0)
 S SQCOUNT=0 F JJJ=1:1:$L(HDPPL) S:$E(HDPPL,JJJ)="," SQCOUNT=SQCOUNT+1
"RTN","PSOSULBL",107,0)
 F JJJJ=1:1:SQCOUNT S PSFNIEN=$P(HDPPL,",",JJJJ) D:PSFNIEN
"RTN","PSOSULBL",108,0)
 .S PSFNIEN=$O(^PS(52.5,"B",PSFNIEN,0)) I PSFNIEN D
"RTN","PSOSULBL",109,0)
 ..S $P(^PS(52.5,PSFNIEN,0),"^",11)=PSOSEQ,PSOSEQ=PSOSEQ+1 S:$P(^PS(52.5,PSFNIEN,0),"^",8)&($P(^(0),"^",9))&($P(^(0),"^",6)) ^PS(52.5,"AS",$P(^PS(52.5,PSFNIEN,0),"^",8),$P(^(0),"^",9),$P(^(0),"^",6),$P(^(0),"^",11),PSFNIEN)=""
"RTN","PSOSULBL",110,0)
 Q
"RTN","PSOSULBL",111,0)
CHKDEAD D DEM^VADPT I VADM(1)="" S DEAD=0 Q
"RTN","PSOSULBL",112,0)
 I VADM(6)="" S DEAD=0 Q
"RTN","PSOSULBL",113,0)
 S PSDDDATE=$P(VADM(6),"^",2) F WWW=0:0 S WWW=$O(^PS(55,DFN,"P",WWW)) Q:'WWW  I $D(^PS(55,DFN,"P",WWW,0)),$P($G(^(0)),"^") S (DA,RXREC)=$P(^(0),"^") S SFN=$O(^PS(52.5,"B",RXREC,0)) I SFN,$D(^PS(52.5,SFN,0)) S RX=$P(^(0),"^") D DEAD
"RTN","PSOSULBL",114,0)
 Q
"RTN","PSOSULBL",115,0)
DEAD S $P(^PSRX(RX,"STA"),"^")=12,COM="Died ("_$G(PSDDDATE)_")",DA(1)=RX
"RTN","PSOSULBL",116,0)
 S DEAD=1 D ARECD^PSOSUTL S DIK="^PS(52.5,",DA=SFN D ^DIK K DIK
"RTN","PSOSULBL",117,0)
 Q
"RTN","PSOSULBL",118,0)
PROF ;
"RTN","PSOSULBL",119,0)
 S ZTRTN="PRPROF^PSOSULBL",ZTDESC="PRINT PROFILES FROM SUSPENSE",ZTDTH=$H,ZTIO=PSOPROP
"RTN","PSOSULBL",120,0)
 S ZTSAVE("^UTILITY($J,""PSOPRO"",")="",ZTSAVE("PSOPAR")="",ZTSAVE("PSODTCUT")="",ZTSAVE("PSOSITE")="",ZTSAVE("PSOPRPAS")="" D ^%ZTLOAD Q
"RTN","PSOSULBL",121,0)
PRPROF ;
"RTN","PSOSULBL",122,0)
 F LLL=0:0 S LLL=$O(^UTILITY($J,"PSOPRO",LLL)) Q:'LLL  I $D(^DPT(LLL,0)) S DFN=LLL D DQ^PSOPRFSS
"RTN","PSOSULBL",123,0)
 K PSOPAR,PSODTCUT,PSOSITE,PSOPRPAS,LLL,DFN,^UTILITY($J,"PSOPRO") D ^%ZISC S:$D(ZTQUEUED) ZTREQ="@"
"RTN","PSOSULBL",124,0)
 Q
"RTN","PSOSULBL",125,0)
 ;
"RTN","PSOSULBL",126,0)
CHKBAI ; IF BAD ADDRESS INDICATOR, NO ACTIVE TEMPORARY ADDRESS AND ROUTING OF MAIL, DO NOT SEND TO OPAI AND/OR DO NOT PRINT LABEL
"RTN","PSOSULBL",127,0)
 N PSOBADR,ACTSEQ,XX,PSOFIRST,ACTTYPE
"RTN","PSOSULBL",128,0)
 I '$G(RXFILL),$P(^PSRX(RXIEN,0),"^",11)="W" Q
"RTN","PSOSULBL",129,0)
 I $P($G(^PSRX(RXIEN,1,RXFILL,0)),"^",2)="W" Q
"RTN","PSOSULBL",130,0)
 S ACTTYPE="BAD ADDRESS INDICATOR"
"RTN","PSOSULBL",131,0)
 S PSOBADR=$$CHKRX^PSOBAI(RXIEN)
"RTN","PSOSULBL",132,0)
 ; GOOD PERMANENT OR TEMPORARY ADDRESS - CHECK FOR DO NOT MAIL
"RTN","PSOSULBL",133,0)
 I PSOBADR,'$P(PSOBADR,"^",2) D SETTMP(ACTTYPE) Q
"RTN","PSOSULBL",134,0)
 S NOMAIL=0 D NOMAIL I NOMAIL Q
"RTN","PSOSULBL",135,0)
 D FOREIGN
"RTN","PSOSULBL",136,0)
 Q
"RTN","PSOSULBL",137,0)
 ;
"RTN","PSOSULBL",138,0)
SETTMP(ACTTYPE) ;
"RTN","PSOSULBL",139,0)
 N ACTSEQ,XX,PSOFIRST,ZZ
"RTN","PSOSULBL",140,0)
 S PSOFIRST=1
"RTN","PSOSULBL",141,0)
 S PSOBADDR=1
"RTN","PSOSULBL",142,0)
 S ACTSEQ=0 F  S ACTSEQ=$O(^PSRX(RXIEN,"A",ACTSEQ)) Q:ACTSEQ=""  D
"RTN","PSOSULBL",143,0)
 .S XX=$G(^PSRX(RXIEN,"A",ACTSEQ,0)) I $P(XX,"^",2)="S" S ZZ=$P(XX,"^",4),ZZ=$S(ZZ<6:ZZ,1:ZZ-1) I ZZ=RXFILL,$P(XX,"^",5)["due to "_ACTTYPE S PSOFIRST=0 Q
"RTN","PSOSULBL",144,0)
 I PSOFIRST D
"RTN","PSOSULBL",145,0)
 .S ^TMP("PSOSBAI",$J,RXIEN,+RXFILL)=ACTTYPE
"RTN","PSOSULBL",146,0)
 .D ACT(ACTTYPE)
"RTN","PSOSULBL",147,0)
 Q
"RTN","PSOSULBL",148,0)
 ;
"RTN","PSOSULBL",149,0)
NOMAIL ; SEE IF FILE 55 STATUS IS DO NOT MAIL
"RTN","PSOSULBL",150,0)
 N ACTTYPE,DFN,MAILST,MAILEXP
"RTN","PSOSULBL",151,0)
 S ACTTYPE="DO NOT MAIL"
"RTN","PSOSULBL",152,0)
 S DFN=+$P($G(^PSRX(RXIEN,0)),"^",2),MAILST=$P($G(^PS(55,DFN,0)),"^",3) I MAILST'=2 Q
"RTN","PSOSULBL",153,0)
 S MAILEXP=$P(^PS(55,DFN,0),"^",5)
"RTN","PSOSULBL",154,0)
 I MAILEXP=""!(MAILEXP>DT) D SETTMP(ACTTYPE)
"RTN","PSOSULBL",155,0)
 Q
"RTN","PSOSULBL",156,0)
 ;
"RTN","PSOSULBL",157,0)
FOREIGN ;
"RTN","PSOSULBL",158,0)
 N DFN,PSOFORGN
"RTN","PSOSULBL",159,0)
 S DFN=$$GET1^DIQ(52,RXIEN,2,"I")  ;*370
"RTN","PSOSULBL",160,0)
 D ADD^VADPT
"RTN","PSOSULBL",161,0)
 S PSOFORGN=$P($G(VAPA(25)),"^",2) I PSOFORGN'="" D  ; *370
"RTN","PSOSULBL",162,0)
 . N PSON,PSOFOREN S PSOFOREN=1
"RTN","PSOSULBL",163,0)
 . S PSON=$$GET1^DIQ(59,PSOSITE,.01)
"RTN","PSOSULBL",164,0)
 . I PSON'["MANILA",PSOFORGN["UNITED STATES" S PSOFOREN=0
"RTN","PSOSULBL",165,0)
 . I PSON["MANILA",PSOFORGN["PHILIPPINES" S PSOFOREN=0
"RTN","PSOSULBL",166,0)
 . S PSOFORGN=PSOFOREN
"RTN","PSOSULBL",167,0)
 I PSOFORGN D SETTMP("FOREIGN ADDRESS")
"RTN","PSOSULBL",168,0)
 Q
"RTN","PSOSULBL",169,0)
 ;
"RTN","PSOSULBL",170,0)
CHKMAIL ; SEE IF MAILMAN MESSAGE SHOULD BE SENT FOR BAI/MAIL ROUTING
"RTN","PSOSULBL",171,0)
 N RXIEN,RXFILL,ACTSEQ,XX,DFN,SSN,NAME,ACTTYPE,ZZ
"RTN","PSOSULBL",172,0)
 K ^TMP("PSOSM",$J)
"RTN","PSOSULBL",173,0)
 S RXIEN=0 F  S RXIEN=$O(^TMP("PSOSBAI",$J,RXIEN)) Q:'RXIEN  D
"RTN","PSOSULBL",174,0)
 .S RXFILL="" F  S RXFILL=$O(^TMP("PSOSBAI",$J,RXIEN,RXFILL)) Q:RXFILL=""  D
"RTN","PSOSULBL",175,0)
 ..S ACTTYPE=^TMP("PSOSBAI",$J,RXIEN,RXFILL)
"RTN","PSOSULBL",176,0)
 ..S ACTSEQ=0 F  S ACTSEQ=$O(^PSRX(RXIEN,"A",ACTSEQ)) Q:ACTSEQ=""  D
"RTN","PSOSULBL",177,0)
 ...S XX=$G(^PSRX(RXIEN,"A",ACTSEQ,0)) I $P(XX,"^",2)="S" S ZZ=$P(XX,"^",4),ZZ=$S(ZZ<6:ZZ,1:ZZ-1) I ZZ=RXFILL,$P(XX,"^",5)["due to "_ACTTYPE Q
"RTN","PSOSULBL",178,0)
 ...S DFN=$P(^PSRX(RXIEN,0),"^",2),NAME=$P(^DPT(DFN,0),"^"),SSN=$P(^(0),"^",9) I SSN="" S SSN=0
"RTN","PSOSULBL",179,0)
 ...S ^TMP("PSOSM",$J,NAME,SSN,RXIEN,RXFILL)=ACTTYPE
"RTN","PSOSULBL",180,0)
 I $D(^TMP("PSOSM",$J)) D BAIMAIL^PSOSULB1
"RTN","PSOSULBL",181,0)
 K ^TMP("PSOSM",$J)
"RTN","PSOSULBL",182,0)
 Q
"RTN","PSOSULBL",183,0)
 ;
"RTN","PSOSULBL",184,0)
ACT(ACTTYPE) ;adds activity info for rx not printed from suspense/not sent to OPAI
"RTN","PSOSULBL",185,0)
 N NOW,IR,FDA
"RTN","PSOSULBL",186,0)
 D NOW^%DTC S NOW=%
"RTN","PSOSULBL",187,0)
 S IR=0 F FDA=0:0 S FDA=$O(^PSRX(RXIEN,"A",FDA)) Q:'FDA  S IR=FDA
"RTN","PSOSULBL",188,0)
 S IR=IR+1,^PSRX(RXIEN,"A",0)="^52.3DA^"_IR_"^"_IR
"RTN","PSOSULBL",189,0)
 S ^PSRX(RXIEN,"A",IR,0)=NOW_"^"_"S"_"^"_DUZ_"^"_$S(+RXFILL>5:RXFILL+1,1:+RXFILL)_"^"_"RX not printed from suspense due to "_ACTTYPE
"RTN","PSOSULBL",190,0)
 K PSUS,RXF,I,FDA,DIC,DIE,DR,Y,X,%,%I,%H,RSDT
"RTN","PSOSULBL",191,0)
 Q
"RTN","PSOSULBL",192,0)
 ;
"RTN","PSOSULBL",193,0)
PRINTED(SFN,RX,RFL) ;
"RTN","PSOSULBL",194,0)
 ; Check if a label log indicates that a label has already been printed
"RTN","PSOSULBL",195,0)
 ; Input Parameters
"RTN","PSOSULBL",196,0)
 ;    SFN - IEN of RX Suspense file (#52.5)
"RTN","PSOSULBL",197,0)
 ;    RX  - IEN of Prescription file (#50)
"RTN","PSOSULBL",198,0)
 ;    RFL - Refill number
"RTN","PSOSULBL",199,0)
 ; Output
"RTN","PSOSULBL",200,0)
 ;     0 - Label not printed
"RTN","PSOSULBL",201,0)
 ;     1 - Label already printed
"RTN","PSOSULBL",202,0)
 ;     2 - Label already printed and reprint flag is set
"RTN","PSOSULBL",203,0)
 ;
"RTN","PSOSULBL",204,0)
 ; Check parameters
"RTN","PSOSULBL",205,0)
 I '$G(SFN) Q 0
"RTN","PSOSULBL",206,0)
 I '$G(RX) Q 0
"RTN","PSOSULBL",207,0)
 I $G(RFL)="" S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOSULBL",208,0)
 ;
"RTN","PSOSULBL",209,0)
 N LBL,PTLBL
"RTN","PSOSULBL",210,0)
 ; Check label log
"RTN","PSOSULBL",211,0)
 S LBL=0,PTLBL=0
"RTN","PSOSULBL",212,0)
 F  S LBL=$O(^PSRX(RX,"L",LBL)) Q:'LBL  D  Q:PTLBL
"RTN","PSOSULBL",213,0)
 . I +$$GET1^DIQ(52.032,LBL_","_RX,1,"I")'=RFL Q
"RTN","PSOSULBL",214,0)
 . I $$GET1^DIQ(52.032,LBL_","_RX,4,"I") Q    ; Warning Label printed
"RTN","PSOSULBL",215,0)
 . I $$GET1^DIQ(52.032,LBL_","_RX,2)["INTERACTION" Q  ; Comment contains "Interaction"
"RTN","PSOSULBL",216,0)
 . S PTLBL=1
"RTN","PSOSULBL",217,0)
 ; If the label log indicates a label was printed and the REPRINT flag is set, change the output to 2
"RTN","PSOSULBL",218,0)
 I PTLBL=1,$$GET1^DIQ(52.5,SFN_",",8,"I") S PTLBL=2
"RTN","PSOSULBL",219,0)
 ; 
"RTN","PSOSULBL",220,0)
 Q PTLBL
"RTN","PSOSULBL",221,0)
 ;
"RTN","PSOSULBL",222,0)
REMOVE(SFN,RX,RFL,USR,DSP,PRTFLG) ;
"RTN","PSOSULBL",223,0)
 ; Remove the RX from the RX Suspense queue (#52.5)
"RTN","PSOSULBL",224,0)
 ; Input Parameters
"RTN","PSOSULBL",225,0)
 ;    SFN - IEN of RX Suspense file (#52.5)
"RTN","PSOSULBL",226,0)
 ;    RX  - IEN of Prescription file (#52)
"RTN","PSOSULBL",227,0)
 ;    RFL - Refill number
"RTN","PSOSULBL",228,0)
 ;    USR - User to enter into the Activity Log
"RTN","PSOSULBL",229,0)
 ;    DSP - Display message
"RTN","PSOSULBL",230,0)
 ;    PRTFLG - 1:Printed,2:Printed and Reprint Flag
"RTN","PSOSULBL",231,0)
 ;
"RTN","PSOSULBL",232,0)
 ; If Reprint flag and display flags are on, display message and quit
"RTN","PSOSULBL",233,0)
 I $G(PRTFLG)=2,$G(DSP)  W !,"Reprint Flag is on.  Prescription left on suspense." H 1 Q
"RTN","PSOSULBL",234,0)
 ;
"RTN","PSOSULBL",235,0)
 ; Check parameters
"RTN","PSOSULBL",236,0)
 I '$G(SFN) Q
"RTN","PSOSULBL",237,0)
 I '$D(^PS(52.5,SFN,0)) Q
"RTN","PSOSULBL",238,0)
 I '$G(RX) Q
"RTN","PSOSULBL",239,0)
 I '$D(^PSRX(RX,0)) Q
"RTN","PSOSULBL",240,0)
 I $G(RFL)="" S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOSULBL",241,0)
 ;
"RTN","PSOSULBL",242,0)
 N DIK,DA,DIE,DR,DTOUT
"RTN","PSOSULBL",243,0)
 ;
"RTN","PSOSULBL",244,0)
 ; Remove from the suspense queue
"RTN","PSOSULBL",245,0)
 S DIK="^PS(52.5,",DA=SFN D ^DIK
"RTN","PSOSULBL",246,0)
 ;
"RTN","PSOSULBL",247,0)
 ; Update status in the PRESCRIPTION file
"RTN","PSOSULBL",248,0)
 K DIE,DA
"RTN","PSOSULBL",249,0)
 S DIE=52,DA=RX,DR="100///0" D ^DIE
"RTN","PSOSULBL",250,0)
 ; 
"RTN","PSOSULBL",251,0)
 ; Update the Activity Log
"RTN","PSOSULBL",252,0)
 I '$D(USR) S USR=DUZ
"RTN","PSOSULBL",253,0)
 I '$D(^VA(200,+USR,0)) S USR=DUZ
"RTN","PSOSULBL",254,0)
 N X,DIC,DA,DD,DO,DR,DINUM,Y,DLAYGO
"RTN","PSOSULBL",255,0)
 S DA(1)=RX,DIC="^PSRX("_RX_",""A"",",DLAYGO=52.3,DIC(0)="L",X=$$NOW^XLFDT()
"RTN","PSOSULBL",256,0)
 S DIC("DR")=".02///S;.03////"_USR_";.04///"_$S(RFL>5:RFL+1,1:RFL)_";.05///Rx removed from suspense due to previous label print"
"RTN","PSOSULBL",257,0)
 D FILE^DICN
"RTN","PSOSULBL",258,0)
 I $G(DSP) W !,"Prescription has been removed from suspense." H 1
"RTN","PSOSULBL",259,0)
 Q
"RTN","PSOSUPAT")
0^29^B87781401
"RTN","PSOSUPAT",1,0)
PSOSUPAT ;BIR/RTR - Pull all Rx's from suspense for a patient ;03/01/96
"RTN","PSOSUPAT",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**8,130,185,427**;DEC 1997;Build 21
"RTN","PSOSUPAT",3,0)
 ;External reference to ^PS(55 supported by DBIA 2228
"RTN","PSOSUPAT",4,0)
 ;External reference to ^PSSLOCK supported by DBIA 2789
"RTN","PSOSUPAT",5,0)
PAT N PSOALRX,PSOALRXS
"RTN","PSOSUPAT",6,0)
 S POP=0 K RXP,RXRR,RXFL,RXRP,RXPR,ASKED,BC,DELCNT,WARN,PSOAL,PSOPROFL,PSOQFLAG,PSOPULL,PSOWIN,PSOWINEN,PPLHOLD,PPLHOLDX
"RTN","PSOSUPAT",7,0)
 W ! S DIR("A")="Are you entering the patient name or barcode",DIR(0)="SBO^P:Patient Name;B:Barcode"
"RTN","PSOSUPAT",8,0)
 S DIR("?")="Enter P if you are going to enter the patient name. Enter B if you are going to enter or wand the barcode."
"RTN","PSOSUPAT",9,0)
 D ^DIR K DIR G:$D(DIRUT) ^PSOSUPRX S BC=Y D NOW^%DTC S TM=$E(%,1,12),TM1=$P(TM,".",2)
"RTN","PSOSUPAT",10,0)
BC S (OUT,POP)=0 I BC="B" W ! S DIR("A")="Enter/wand barcode",DIR(0)="FO^5:20",DIR("?")="Enter or wand a prescription barcode for the patient you wish to pull all Rx's for" D ^DIR K DIR G:$G(DIRUT) PAT S BCNUM=Y D
"RTN","PSOSUPAT",11,0)
 .D PSOINST Q:OUT  S RX=$P(BCNUM,"-",2) D:$D(^PSRX(RX,0))
"RTN","PSOSUPAT",12,0)
 ..S (DFN,PSODFN)=$P(^PSRX(RX,0),"^",2) W " ",$P($G(^DPT(DFN,0)),"^")
"RTN","PSOSUPAT",13,0)
 ..D ICN^PSODPT(DFN)
"RTN","PSOSUPAT",14,0)
 .I '$D(^PSRX(RX,0)) W !,$C(7),"NO PRESCRIPTION RECORD FOR THIS BARCODE." S OUT=1
"RTN","PSOSUPAT",15,0)
 G:OUT BC
"RTN","PSOSUPAT",16,0)
NAM I BC="P" W ! S DIC(0)="AEMZQ",DIC="^DPT(",DIC("S")="I $D(^PS(52.5,""AC"",+Y))!($D(^PS(52.5,""AG"",+Y)))" D ^DIC K DIC G:$D(DTOUT)!($D(DUOUT))!(Y<0) PAT S (DFN,PSODFN)=+Y
"RTN","PSOSUPAT",17,0)
 S PSOLOUD=1 D:$P($G(^PS(55,PSODFN,0)),"^",6)'=2 EN^PSOHLUP(PSODFN) K PSOLOUD
"RTN","PSOSUPAT",18,0)
 ;
"RTN","PSOSUPAT",19,0)
 ; PSO*7*427 - DMB - 7/24/2015 - Remove call to QUES^PSOSUPRX so that a ECME reject would not cause the entire process to abort.  TEST/BEG still checks
"RTN","PSOSUPAT",20,0)
 ;   for valid data, labels already printed, and locks but does not build PPLHOLD/arrays nor does it call QUES^PSOSPRX. If there still valid Rx's
"RTN","PSOSUPAT",21,0)
 ;   to process, then ask Routing, Pickup Method and whether to Pull the Rx's.  After that, we call ECME (but only quit for each
"RTN","PSOSUPAT",22,0)
 ;   RX if it fails), then add to PPLHOLD/arrays, and update the Routing/Pickup Method for RX SUSPENSE and the RX.
"RTN","PSOSUPAT",23,0)
 S (ASKED,DELCNT,WARN)=0
"RTN","PSOSUPAT",24,0)
 F CBD=0:0 S CBD=$O(^PS(55,DFN,"P",CBD)) Q:CBD'>0  D TEST
"RTN","PSOSUPAT",25,0)
 I $G(PSOQFLAG) G EXIT
"RTN","PSOSUPAT",26,0)
 ;
"RTN","PSOSUPAT",27,0)
 ; After the TEST/BEG checks, check if there are any prescription left to process
"RTN","PSOSUPAT",28,0)
 I '$D(PSOALRXS) W !!,"There are no prescriptions left to process - exiting!" D PAUSE G EXIT
"RTN","PSOSUPAT",29,0)
 ;
"RTN","PSOSUPAT",30,0)
 ; Get Routing
"RTN","PSOSUPAT",31,0)
 W !
"RTN","PSOSUPAT",32,0)
 K DIR,DTOUT S DIR("A")="Select routing for Rx(s)",DIR(0)="S^M:MAIL;W:WINDOW",DIR("B")="WINDOW" D ^DIR S MW=Y
"RTN","PSOSUPAT",33,0)
 I Y["^"!($D(DTOUT)) W !!,"Nothing pulled from suspense!" D PAUSE G EXIT
"RTN","PSOSUPAT",34,0)
 I MW="W" S SUSROUTE=1
"RTN","PSOSUPAT",35,0)
 ;
"RTN","PSOSUPAT",36,0)
 ; If Routing is Window and site paramter to ask Method of Pickup, then get Method of Pickup
"RTN","PSOSUPAT",37,0)
 I MW="W",$P(PSOPAR,"^",12) K DIR,DTOUT,DUOUT S DIR(0)="52,35" D ^DIR S PSOWIN=1,PSOWINEN=Y I $G(DTOUT)!$G(DUOUT) W !!,"Nothing pulled from suspense!" D PAUSE G EXIT
"RTN","PSOSUPAT",38,0)
 ;
"RTN","PSOSUPAT",39,0)
 ; Ask to Pull Rx's
"RTN","PSOSUPAT",40,0)
 W !!
"RTN","PSOSUPAT",41,0)
 K DIR
"RTN","PSOSUPAT",42,0)
 S DIR("A")="Pull Rx(s) and delete from suspense",DIR("B")="Y",DIR(0)="Y"
"RTN","PSOSUPAT",43,0)
 S DIR("?",1)="Enter Yes to pull selected Rx(s) from suspense. Since Rx(s) pulled early from",DIR("?",2)="suspense are not associated with a printed batch, these Rx(s) cannot be"
"RTN","PSOSUPAT",44,0)
 S DIR("?",3)="reprinted from suspense using the 'Reprint batches from Suspense' option.",DIR("?")="Therefore, any Rx(s) pulled early from suspense will be deleted from suspense."
"RTN","PSOSUPAT",45,0)
 D ^DIR
"RTN","PSOSUPAT",46,0)
 I Y'=1 W $C(7),!!,"Nothing pulled from suspense!" D PAUSE G EXIT
"RTN","PSOSUPAT",47,0)
 ;
"RTN","PSOSUPAT",48,0)
 ; Loop through the remaining Rx and process
"RTN","PSOSUPAT",49,0)
 S RXREC="" F  S RXREC=$O(PSOALRXS(RXREC)) Q:RXREC=""  D
"RTN","PSOSUPAT",50,0)
 . ; Resubmit to ECME if needed and check results
"RTN","PSOSUPAT",51,0)
 . N RFL S RFL=$P(PSOALRXS(RXREC),U,1) I RFL="" S RFL=$$LSTRFL^PSOBPSU1(RXREC)
"RTN","PSOSUPAT",52,0)
 . D ECMESND^PSOBPSU1(RXREC,RFL,,"PE")
"RTN","PSOSUPAT",53,0)
 . I $$PSOET^PSOREJP3(RXREC,RFL) Q  ; Quit if there is an unresolved TRICARE/CHAMPVA non-billable reject code
"RTN","PSOSUPAT",54,0)
 . N PSOTRIC S PSOTRIC=$$TRIC^PSOREJP1(RXREC,RFL)
"RTN","PSOSUPAT",55,0)
 . I $$FIND^PSOREJUT(RXREC,RFL),$$HDLG^PSOREJU1(RXREC,RFL,"79,88","PE","IOQ","I")="Q" Q
"RTN","PSOSUPAT",56,0)
 . I $P($G(^PSRX(RXREC,"STA")),"^")=12 Q  ;No label if discontinued via Reject Notification screen
"RTN","PSOSUPAT",57,0)
 . ;
"RTN","PSOSUPAT",58,0)
 . ; Put on queue to be printed
"RTN","PSOSUPAT",59,0)
 . S SFN=$P(PSOALRXS(RXREC),U,2)
"RTN","PSOSUPAT",60,0)
 . S DA=$P(^PS(52.5,SFN,0),"^"),RXPR(DA)=+$P(^(0),"^",5),RXFL(DA)=$P($G(^(0)),"^",13)
"RTN","PSOSUPAT",61,0)
 . I $L($G(PPLHOLD))<240 S PPLHOLD=$S($G(PPLHOLD)="":$P(^PS(52.5,SFN,0),"^"),1:$G(PPLHOLD)_","_+^PS(52.5,SFN,0)) S:$P(^PS(52.5,SFN,0),"^",12) RXRP(DA)=1
"RTN","PSOSUPAT",62,0)
 . I $L($G(PPLHOLD))'<240 S PPLHOLDX=$S($G(PPLHOLDX)="":$P(^PS(52.5,SFN,0),"^"),1:$G(PPLHOLDX)_","_+^PS(52.5,SFN,0)) S:$G(RXPR(DA)) RXPR1(DA)=DA_"^"_RXPR(DA) S:$P(^PS(52.5,SFN,0),"^",12) RXRP1(DA)=1 K RXPR(DA)
"RTN","PSOSUPAT",63,0)
 . I '$D(^PSRX(RXREC,1)),'$G(RXPR(RXREC)),'$G(RXPR1(RXREC)) S PSOPROFL=1
"RTN","PSOSUPAT",64,0)
 . ;
"RTN","PSOSUPAT",65,0)
 . ; Save off old Routing/Method of Pickup values
"RTN","PSOSUPAT",66,0)
 . S PSOGET="M" D GETMW^PSOSUPOE
"RTN","PSOSUPAT",67,0)
 . S RXRR(RXREC)=$S($P(^PS(52.5,SFN,0),"^",4)="W":"W",1:"M")_"^"_$P($G(^PSRX(RXREC,"MP")),"^")_"^"_$G(PSOGETF)_"^"_$G(PSOGETFN)_"^"_$S($G(PSOGET)="W":"W",1:"M")
"RTN","PSOSUPAT",68,0)
 . ;
"RTN","PSOSUPAT",69,0)
 . ; Update Routing and Method of Pickup
"RTN","PSOSUPAT",70,0)
 . S $P(^PS(52.5,SFN,0),"^",4)=MW
"RTN","PSOSUPAT",71,0)
 . D MAIL
"RTN","PSOSUPAT",72,0)
 ;
"RTN","PSOSUPAT",73,0)
 ;S HOLDPROF=$G(PSOPROFL) K PSOPROFL
"RTN","PSOSUPAT",74,0)
 ;I $D(PSOPART) S (PSOPULL,PSODBQ)=1 F RR=0:0 S RR=$O(PSOPART(RR)) Q:'RR  S PDUZ=DUZ,PPL=RR,RXP=PSOPART(RR) D Q^PSORXL
"RTN","PSOSUPAT",75,0)
 ;S PSOPROFL=HOLDPROF I $D(ZTSK),'$G(PPLHOLD) W !!,"LABEL(S) ARE QUEUED TO PRINT",!
"RTN","PSOSUPAT",76,0)
 F GGGG=0:0 S GGGG=$O(RXPR(GGGG)) Q:'GGGG  K:'$G(RXPR(GGGG)) RXPR(GGGG)
"RTN","PSOSUPAT",77,0)
 K RXP,PPL S PDUZ=DUZ,PSONOPRT=1
"RTN","PSOSUPAT",78,0)
 I $G(PPLHOLD)'="" S PPL=PPLHOLD S:$G(SUSROUTE) BBRX(1)=PPL S HOLDPPL=PPL,PSOPULL=1,PSODBQ=1,RXLTOP=1 D WIND^PSOSUPRX D Q^PSORXL I '$G(PSOQFLAG) W !!,"LABEL(S) ARE QUEUED TO PRINT",! S PPL=$P(HOLDPPL,",") D PRF D:'$G(PSOQFLAG)  S PSOQFLAG=0
"RTN","PSOSUPAT",79,0)
 .I $P(PSOPAR,"^",8),$G(PSOPROFL) W !!,"PROFILE(S) ARE QUEUED TO PRINT"
"RTN","PSOSUPAT",80,0)
 ;call to bingo board
"RTN","PSOSUPAT",81,0)
 I $G(PPLHOLDX),'$G(PSOQGLAG),$G(SUSROUTE) S BBRX(2)=PPLHOLDX
"RTN","PSOSUPAT",82,0)
 D:$G(BINGRTE)&($D(DISGROUP))&('$G(PSOQFLAG)) ^PSOBING1 K BINGRTE,BBRX
"RTN","PSOSUPAT",83,0)
 I $G(PPLHOLDX),'$G(PSOQFLAG) D  S PDUZ=DUZ,PPL=PPLHOLDX,PSNP=0,(PSODBQ,PSOPULL)=1 D Q^PSORXL
"RTN","PSOSUPAT",84,0)
 .F XXX=0:0 S XXX=$O(RXPR1(XXX)) Q:'XXX  S RXPR(XXX)=$P(RXPR1(XXX),"^",2)
"RTN","PSOSUPAT",85,0)
 .F WWWW=0:0 S WWWW=$O(RXRP1(WWWW)) Q:'WWWW  S:$D(RXRP1(WWWW)) RXRP(WWWW)=1
"RTN","PSOSUPAT",86,0)
 I $G(PSOQFLAG) D RESET
"RTN","PSOSUPAT",87,0)
EXIT K ACT,BCNUM,CBD,CNT,COM,DA,DEAD,DEL,DELCNT,DFN,DIRUT,DR,DTOUT,DUOUT,DTTM,GG,HOLD,HOLDPPL,OUT,PSOPULL,PSOWIN,PSOWINEN,PSODBQ,PPLHOLD,PPLHOLDX,HOLDPROF,RR,ZZZZ,PSDNAME,PSDDDATE,ZTSK,WWWW,RXRP,RXRP1,PSONOPRT,RXFL,RXRR
"RTN","PSOSUPAT",88,0)
 S PSOALRX="" F  S PSOALRX=$O(PSOALRXS(PSOALRX)) Q:PSOALRX=""  D PSOUL^PSSLOCK(PSOALRX)
"RTN","PSOSUPAT",89,0)
 K MW,PDUZ,PPL,PRF,PSPOP,PSOPROFL,RF,RFCNT,RX,RXPR,RXPR1,RXREC,SFN,GGGG,STOP,SUB,VADM,WARN,X,Y,Y(0),%,%W,%Y,%Y1,RXLTOP,PSOGET,PSOGETF,PSOGETFN
"RTN","PSOSUPAT",90,0)
 Q
"RTN","PSOSUPAT",91,0)
 ;
"RTN","PSOSUPAT",92,0)
TEST I $D(^PS(55,DFN,"P",CBD,0)) S RXREC=+^(0) I +$P($G(^PSRX(RXREC,"STA")),"^")=5,$D(^PS(52.5,"B",RXREC)) S SFN=+$O(^(RXREC,0)) Q:SFN'>0!($G(PSOQFLAG))!('$D(^PS(52.5,SFN,0)))  S PSPOP=0 D:$G(PSODIV) DIV I 'PSPOP D CHKDEAD Q:DEAD  D BEG
"RTN","PSOSUPAT",93,0)
 Q
"RTN","PSOSUPAT",94,0)
 ;
"RTN","PSOSUPAT",95,0)
CHKDEAD D DEM^VADPT S PSDNAME=$G(VADM(1)) I VADM(1)="" W !?10,"PATIENT NAME UNKNOWN" S DEAD=0 Q
"RTN","PSOSUPAT",96,0)
 I VADM(6)="" S DEAD=0 Q
"RTN","PSOSUPAT",97,0)
 S PSDDDATE=$P(VADM(6),"^",2) F ZZZZ=0:0 S ZZZZ=$O(^PS(55,DFN,"P",ZZZZ)) Q:'ZZZZ  I $D(^PS(55,DFN,"P",ZZZZ,0)),$P($G(^(0)),"^") S (DA,RXREC)=$P(^(0),"^") I $O(^PS(52.5,"B",DA,0)) D DEAD
"RTN","PSOSUPAT",98,0)
 Q
"RTN","PSOSUPAT",99,0)
 ;
"RTN","PSOSUPAT",100,0)
DEAD S HOLD=DA,REA="C",COM="Died ("_$G(PSDDDATE)_")",DA=RXREC,DEAD=1 D CAN^PSOCAN W:'$G(WARN) !!,?10,$G(PSDNAME)," DIED ",$G(PSDDDATE) S WARN=1,DA=HOLD K HOLD,REA
"RTN","PSOSUPAT",101,0)
 Q
"RTN","PSOSUPAT",102,0)
 ;
"RTN","PSOSUPAT",103,0)
DIV I $D(^PS(52.5,SFN,0)),$D(^PSRX(+$P(^PS(52.5,SFN,0),"^"),2)),$P(^PS(52.5,SFN,0),"^",6)'=$G(PSOSITE) S RXREC=+$P(^PS(52.5,SFN,0),"^") D CKDIV
"RTN","PSOSUPAT",104,0)
 Q
"RTN","PSOSUPAT",105,0)
 ;
"RTN","PSOSUPAT",106,0)
CKDIV I '$P($G(PSOSYS),"^",2) W !!?10,$C(7),"Rx # ",$P(^PSRX(RXREC,0),"^")," is not a valid choice. (Different Division)" S PSPOP=1 Q
"RTN","PSOSUPAT",107,0)
 I $P($G(PSOSYS),"^",3) W !!?10,$C(7) S DIR("A")="Rx # "_$P(^PSRX(RXREC,0),"^")_" is from another division.  Continue",DIR(0)="Y",DIR("B")="Y" D ^DIR K DIR I $G(DIRUT)!('Y) S PSPOP=1
"RTN","PSOSUPAT",108,0)
 Q
"RTN","PSOSUPAT",109,0)
 ;
"RTN","PSOSUPAT",110,0)
BEG I $P($G(^PSRX(RXREC,2)),"^",6)<DT,$P($G(^("STA")),"^")<11 D  S DIE=52,DA=RXREC,DR="100///"_11 D ^DIE S DA=SFN,DIK="^PS(52.5," D ^DIK K DIE,DA,DIK W !!,"Rx #"_$P(^PSRX(RXREC,0),"^")_" has expired!" D PAUSE Q
"RTN","PSOSUPAT",111,0)
 .D EX^PSOSUTL
"RTN","PSOSUPAT",112,0)
 I '$D(^PS(52.5,SFN,0)) K PSOAL Q
"RTN","PSOSUPAT",113,0)
 I +$G(^PS(52.5,SFN,"P")) W !!,$C(7),">>> Rx #",$P(^PSRX(+$P(^(0),"^"),0),"^")_" has already been printed from suspense.",!,?5,"Use the reprint routine under the rx option to produce a label." D PAUSE Q
"RTN","PSOSUPAT",114,0)
 ; PSO*7*427 - 7/24/2015
"RTN","PSOSUPAT",115,0)
 ; Check if Label Log indicates a label was already printed. If it does, ask the user if they still
"RTN","PSOSUPAT",116,0)
 ; want to print. If they don't, remove from Suspense queue, then quit.
"RTN","PSOSUPAT",117,0)
 N PRNTED,REFILL
"RTN","PSOSUPAT",118,0)
 S REFILL=$P($G(^PS(52.5,SFN,0)),"^",13)
"RTN","PSOSUPAT",119,0)
 S PRNTED=$$PRINTED^PSOSULBL(SFN,RXREC,REFILL)
"RTN","PSOSUPAT",120,0)
 I PRNTED N CONT S CONT=$$PRTQUES^PSOSUPRX(RXREC,REFILL) I CONT'=1 D  Q
"RTN","PSOSUPAT",121,0)
 . I CONT=0 D REMOVE^PSOSULBL(SFN,RXREC,REFILL,DUZ,1,PRNTED)
"RTN","PSOSUPAT",122,0)
 . I CONT=-1 W !,"This prescription will not be pulled but will be left on suspense." D PAUSE
"RTN","PSOSUPAT",123,0)
 ;
"RTN","PSOSUPAT",124,0)
 S PSOALRX=$P($G(^PS(52.5,SFN,0)),"^") I 'PSOALRX Q
"RTN","PSOSUPAT",125,0)
 ;
"RTN","PSOSUPAT",126,0)
 ; Check if we can lock the order
"RTN","PSOSUPAT",127,0)
 D PSOL^PSSLOCK(PSOALRX) I '$G(PSOMSG) D  D PAUSE K PSOMSG,PSOALRX Q
"RTN","PSOSUPAT",128,0)
 .I $P($G(PSOMSG),"^",2)'="" W !!,"Rx: "_$P($G(^PSRX(PSOALRX,0)),"^")_" cannot be pulled from suspense.",!,$P($G(PSOMSG),"^",2),! Q
"RTN","PSOSUPAT",129,0)
 .W !!,"Another person is editing Rx "_$P($G(^PSRX(PSOALRX,0)),"^"),!,"It cannot be pulled from suspense.",!
"RTN","PSOSUPAT",130,0)
 ;
"RTN","PSOSUPAT",131,0)
 ; Set array for Rx's that can still be processed
"RTN","PSOSUPAT",132,0)
 S PSOALRXS(PSOALRX)=REFILL_"^"_SFN
"RTN","PSOSUPAT",133,0)
 K PSOMSG,PSOALRX
"RTN","PSOSUPAT",134,0)
 Q
"RTN","PSOSUPAT",135,0)
 ;
"RTN","PSOSUPAT",136,0)
PRF I $P(PSOPAR,"^",8),'$D(PRF(DFN)),$G(PSOPROFL) S HOLD=DFN D ^PSOPRF S DFN=HOLD,PRF(DFN)=""
"RTN","PSOSUPAT",137,0)
 Q
"RTN","PSOSUPAT",138,0)
 ;
"RTN","PSOSUPAT",139,0)
PSOINST I '$D(^PSRX(+$P(Y,"-",2),0)) W !!,$C(7),"Non-existent prescription" S OUT=1 Q
"RTN","PSOSUPAT",140,0)
 I $P(Y,"-")'=PSOINST W !!,$C(7),"The prescription is not from this institution." S OUT=1 Q
"RTN","PSOSUPAT",141,0)
 Q
"RTN","PSOSUPAT",142,0)
 ;
"RTN","PSOSUPAT",143,0)
 ; Populate RX Suspense and RX with new Routing Code and Pickup Method
"RTN","PSOSUPAT",144,0)
MAIL I $D(PSOWINEN),$G(PSOWIN) S ^PSRX(RXREC,"MP")=$S(PSOWINEN'="":PSOWINEN,1:"")
"RTN","PSOSUPAT",145,0)
MAILS I $G(RXPR(RXREC)) S DA(1)=RXREC,DA=RXPR(RXREC),DIE="^PSRX("_DA(1)_",""P"",",DR=".02///"_MW D ^DIE K DIE Q
"RTN","PSOSUPAT",146,0)
 I $G(RXPR1(RXREC)) S DA(1)=RXREC,DA=$P(RXPR1(RXREC),U,2),DIE="^PSRX("_DA(1)_",""P"",",DR=".02///"_MW D ^DIE K DIE Q
"RTN","PSOSUPAT",147,0)
 S RFCNT=0 F RR=0:0 S RR=$O(^PSRX(RXREC,1,RR)) Q:'RR  S RFCNT=RR
"RTN","PSOSUPAT",148,0)
 I 'RFCNT S DA=RXREC,DIE=52,DR="11///"_MW D ^DIE
"RTN","PSOSUPAT",149,0)
 I RFCNT S DA(1)=RXREC,DA=RFCNT,DIE="^PSRX("_DA(1)_",1,",DR="2///"_MW D ^DIE
"RTN","PSOSUPAT",150,0)
 K DIE,RFCNT,RR
"RTN","PSOSUPAT",151,0)
 Q
"RTN","PSOSUPAT",152,0)
 ;
"RTN","PSOSUPAT",153,0)
RESET ;
"RTN","PSOSUPAT",154,0)
 ; Reset Mail/Window value for all prescriptions in the RXRR array
"RTN","PSOSUPAT",155,0)
 N PRSDA
"RTN","PSOSUPAT",156,0)
 F PRSDA=0:0 S PRSDA=$O(RXRR(PRSDA)) Q:'PRSDA  D RESETRX(PRSDA)
"RTN","PSOSUPAT",157,0)
 Q
"RTN","PSOSUPAT",158,0)
 ;
"RTN","PSOSUPAT",159,0)
RESETRX(RX) ;
"RTN","PSOSUPAT",160,0)
 ; Reset fields in RX Suspense and Prescription files
"RTN","PSOSUPAT",161,0)
 ; Input:
"RTN","PSOSUPAT",162,0)
 ;   RX: Prescription IEN
"RTN","PSOSUPAT",163,0)
 ;
"RTN","PSOSUPAT",164,0)
 I '$G(RX) Q
"RTN","PSOSUPAT",165,0)
 N SFN,PRMW,PRMP,PRFILL,PRFILLN,PRPSRX,DIE,DA,DR,DTOUT
"RTN","PSOSUPAT",166,0)
 S SFN=$O(^PS(52.5,"B",RX,0))
"RTN","PSOSUPAT",167,0)
 I 'SFN Q
"RTN","PSOSUPAT",168,0)
 I '$D(^PS(52.5,SFN,0)) Q
"RTN","PSOSUPAT",169,0)
 S PRMW=$S($P($G(RXRR(RX)),"^")="":"M",1:$P($G(RXRR(RX)),"^")),PRMP=$P($G(RXRR(RX)),"^",2)
"RTN","PSOSUPAT",170,0)
 S PRFILL=$P($G(RXRR(RX)),"^",3),PRFILLN=$P($G(RXRR(RX)),"^",4)
"RTN","PSOSUPAT",171,0)
 S PRPSRX=$S($P($G(RXRR(RX)),"^",5)="":"M",1:$P($G(RXRR(RX)),"^",5))
"RTN","PSOSUPAT",172,0)
 I PRMW'="" S $P(^PS(52.5,SFN,0),"^",4)=PRMW D
"RTN","PSOSUPAT",173,0)
 .I PRFILL="P" D  Q
"RTN","PSOSUPAT",174,0)
 ..I $D(^PSRX(RX,"P",+$G(PRFILLN),0)) S $P(^PSRX(RX,"P",+$G(PRFILLN),0),"^",2)=$G(PRPSRX),$P(^PSRX(RX,"MP"),"^")=PRMP
"RTN","PSOSUPAT",175,0)
 .I PRFILL="R",$G(PRFILLN) S DA(1)=RX,DA=PRFILLN,DIE="^PSRX("_DA(1)_",1,",DR="2////"_PRPSRX D ^DIE K DIE
"RTN","PSOSUPAT",176,0)
 .I PRFILL="O" S DA=RX,DIE="^PSRX(",DR="11////"_PRPSRX D ^DIE K DIE
"RTN","PSOSUPAT",177,0)
 .S $P(^PSRX(RX,"MP"),"^")=PRMP
"RTN","PSOSUPAT",178,0)
 Q
"RTN","PSOSUPAT",179,0)
 ;
"RTN","PSOSUPAT",180,0)
PAUSE ;
"RTN","PSOSUPAT",181,0)
 W ! K DIR S DIR(0)="E",DIR("A")="Press Return to continue" D ^DIR K DIR
"RTN","PSOSUPAT",182,0)
 Q
"RTN","PSOSUPOE")
0^30^B81516585
"RTN","PSOSUPOE",1,0)
PSOSUPOE ;BIR/RTR - Suspense pull via Listman ;3/1/96
"RTN","PSOSUPOE",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**8,21,27,34,130,148,281,287,289,358,385,403,427**;DEC 1997;Build 21
"RTN","PSOSUPOE",3,0)
 ;External references PSOL and PSOUL^PSSLOCK supported by DBIA 2789
"RTN","PSOSUPOE",4,0)
SEL I '$G(PSOCNT) S VALMSG="This patient has no Prescriptions!" S VALMBCK="" Q
"RTN","PSOSUPOE",5,0)
 N PSOGETF,PSOGET,PSOGETFN,ORD,ORN,MW,PDUZ,PSLST,PSOSQ,PSOSQRTE,PSOSQMTH,PSPOP,PSOX1,PSOX2,RXLTOP,RXREC,SFN,SORD,SORN,VALMCNT
"RTN","PSOSUPOE",6,0)
 K DIR,DUOUT,DTOUT S DIR("A")="Select Orders by number",DIR(0)="LO^1:"_PSOCNT D ^DIR K DIR I $D(DTOUT)!($D(DUOUT))!('Y) S VALMSG="Nothing pulled from suspense!",VALMBCK="" Q
"RTN","PSOSUPOE",7,0)
 S PSLST=Y
"RTN","PSOSUPOE",8,0)
SELQ D FULL^VALM1
"RTN","PSOSUPOE",9,0)
 K DIR S DIR("A")="Select routing for Rx(s)",DIR(0)="S^M:MAIL;W:WINDOW",DIR("B")="WINDOW" D ^DIR K DIR I Y["^"!($D(DTOUT))!($D(DUOUT)) G END
"RTN","PSOSUPOE",10,0)
 S PSOSQRTE=Y I $G(PSOSQRTE)="W",$P(PSOPAR,"^",12) K DIR S DIR(0)="FO^2:60",DIR("A")="METHOD OF PICK-UP" D ^DIR S PSOSQMTH=$G(Y) K DIR I Y["^"!($D(DTOUT))!($D(DUOUT)) G END
"RTN","PSOSUPOE",11,0)
 W ! K DIR S DIR(0)="Y",DIR("A")="Pull Rx(s) and delete from suspense",DIR("B")="YES" D  D ^DIR K DIR I Y'=1 G END
"RTN","PSOSUPOE",12,0)
 .S DIR("?",1)="Enter Yes to pull selected Rx(s) from suspense. Since(Rx(s) pulled early from",DIR("?",2)="suspense are not associated with a printed batch, these Rx(s) cannot be"
"RTN","PSOSUPOE",13,0)
 .S DIR("?",3)="reprinted from suspense using the 'Reprint batches from suspense' option.",DIR("?")="Therefore, any Rx(s) pulled early from suspense will be deleted from suspense."
"RTN","PSOSUPOE",14,0)
 Q:$G(PULLONE)
"RTN","PSOSUPOE",15,0)
 F SORD=1:1:$L(PSLST,",") Q:$P(PSLST,",",SORD)']""  S SORN=$P(PSLST,",",SORD) D:+PSOLST(SORN)=52 BEG
"RTN","PSOSUPOE",16,0)
 S VALMBCK="R"
"RTN","PSOSUPOE",17,0)
 I '$G(PSOSQ) S VALMSG="No Rx's pulled from suspense!"
"RTN","PSOSUPOE",18,0)
 Q
"RTN","PSOSUPOE",19,0)
BEG ;
"RTN","PSOSUPOE",20,0)
 S RXREC=$P(PSOLST(SORN),"^",2)
"RTN","PSOSUPOE",21,0)
BEGQ Q:'$D(^PSRX(+$G(RXREC),0))
"RTN","PSOSUPOE",22,0)
 D PSOL^PSSLOCK(RXREC) I '$G(PSOMSG) W !!,$S($P($G(PSOMSG),"^",2)'="":$P($G(PSOMSG),"^",2),1:"Another person is editing Rx "_$P($G(^PSRX(RXREC,0)),"^")),! K PSOMSG D DIR Q
"RTN","PSOSUPOE",23,0)
 K PSOMSG I $P($G(^PSRX(RXREC,"STA")),"^")'=5 W !!,"Rx# ",$P(^PSRX(RXREC,0),"^")," is not on Suspense!" D DIR,ULRX Q
"RTN","PSOSUPOE",24,0)
 S SFN=$O(^PS(52.5,"B",RXREC,0)) I 'SFN D DIR,ULRX Q
"RTN","PSOSUPOE",25,0)
 S PDUZ=DUZ I +$G(^PS(52.5,SFN,"P")) W !,">>> Rx #",$P(^PSRX(+$P(^(0),"^"),0),"^")," ALREADY PRINTED FROM SUSPENSE.",!,?5,"USE THE REPRINT OPTION TO REPRINT LABEL." D DIR,ULRX Q
"RTN","PSOSUPOE",26,0)
 I +$P($G(^PSRX(RXREC,2)),"^",6)<DT,+$P($G(^("STA")),"^")<11 D  S DIE=52,DA=RXREC,DR="100///11" D ^DIE S DA=SFN,DIK="^PS(52.5," D ^DIK K DIE,DA,DIK W !,"Rx # "_$P(^PSRX(RXREC,0),"^")_" has expired!" D DIR,ULRX Q
"RTN","PSOSUPOE",27,0)
 .N PSCOU,AAA,VVV,QQQ,PSOPRT,PSOEXPI D EX^PSOSUTL
"RTN","PSOSUPOE",28,0)
 I $D(RXRP(RXREC)) W !!,"A reprint has already been requested for Rx # ",$P($G(^PSRX(RXREC,0)),"^") D DIR,ULRX Q
"RTN","PSOSUPOE",29,0)
 I $D(RXPR(RXREC)) W !!,"A partial has already been requested for Rx # ",$P($G(^PSRX(RXREC,0)),"^") D DIR,ULRX Q
"RTN","PSOSUPOE",30,0)
 S PSPOP=0 I $G(PSODIV),$P($G(^PS(52.5,SFN,0)),"^",6)'=$G(PSOSITE) D CKDIV I $G(PSPOP) D DIR,ULRX Q
"RTN","PSOSUPOE",31,0)
 ;
"RTN","PSOSUPOE",32,0)
 ; PSO*427-Check if Label Log indicates a label was already printed.
"RTN","PSOSUPOE",33,0)
 N PRNTED,RFL
"RTN","PSOSUPOE",34,0)
 S RFL=$P($G(^PS(52.5,SFN,0)),"^",13)
"RTN","PSOSUPOE",35,0)
 S PRNTED=$$PRINTED^PSOSULBL(SFN,RXREC,RFL)
"RTN","PSOSUPOE",36,0)
 ; PSO*427-If previously printed, ask user whether to continue.  If NO (0), remove from suspense.  If NO (0) or exit (-1), unlock and quit
"RTN","PSOSUPOE",37,0)
 I PRNTED N CONT S CONT=$$PRTQUES^PSOSUPRX(RXREC,RFL) I CONT'=1 D  Q
"RTN","PSOSUPOE",38,0)
 . I CONT=0 D REMOVE^PSOSULBL(SFN,RXREC,RFL,DUZ,1,PRNTED)
"RTN","PSOSUPOE",39,0)
 . I CONT=-1 W !,"This prescription will not be pulled but will be left on suspense."
"RTN","PSOSUPOE",40,0)
 . D DIR,ULRX
"RTN","PSOSUPOE",41,0)
 ;
"RTN","PSOSUPOE",42,0)
 ; Submitting Rx to ECME for 3rd Party Billing and checking the outcome
"RTN","PSOSUPOE",43,0)
 ; If there are unresolved DUR, Refill Too Soon, or TRICARE/CHAMPVA rejects, we will not add the RX to the
"RTN","PSOSUPOE",44,0)
 ;   list of RXs that are pulled from suspense
"RTN","PSOSUPOE",45,0)
 ; We also need to quit if the user discontinued from the reject notification screen as the RX Suspense record
"RTN","PSOSUPOE",46,0)
 ;   is deleted by a discontinue
"RTN","PSOSUPOE",47,0)
 N ACTION S ACTION=""
"RTN","PSOSUPOE",48,0)
 I '$D(RXPR(RXREC)) D  I ACTION="Q"!(ACTION="D") D ULRX Q
"RTN","PSOSUPOE",49,0)
 . N RFL S RFL=$G(RXFL(RXREC)) I RFL="" S RFL=$$LSTRFL^PSOBPSU1(RXREC)
"RTN","PSOSUPOE",50,0)
 . D ECMESND^PSOBPSU1(RXREC,RFL,,"PP")
"RTN","PSOSUPOE",51,0)
 . ; Quit if there is an unresolved TRICARE/CHAMPVA non-billable reject code, PSO*7*358
"RTN","PSOSUPOE",52,0)
 . I $$PSOET^PSOREJP3(RXREC,RFL) S ACTION="Q" W !!,"Pull early cannot be done for non-billable TRICARE/CHAMPVA Rx on the worklist" D DIR Q
"RTN","PSOSUPOE",53,0)
 . ; Check for unresolved rejects
"RTN","PSOSUPOE",54,0)
 . I $$FIND^PSOREJUT(RXREC,RFL) S ACTION=$$HDLG^PSOREJU1(RXREC,RFL,"79,88","PP","IOQ","Q")
"RTN","PSOSUPOE",55,0)
 . ; Check for TRICARE/CHAMPVA that are not complete
"RTN","PSOSUPOE",56,0)
 . I $$TRIC^PSOREJP1(RXREC,RFL),$P($$STATUS^PSOBPSUT(RXREC,RFL),U)="IN PROGRESS" S ACTION="Q" W !!,"Pull early cannot be done for IN PROGRESS TRICARE/CHAMPVA Rx" D DIR Q
"RTN","PSOSUPOE",57,0)
 ;
"RTN","PSOSUPOE",58,0)
 S:$P(^PS(52.5,SFN,0),"^",5) RXPR(RXREC)=$P(^(0),"^",5) S:$P(^PS(52.5,SFN,0),"^",12) RXRP(RXREC)=1
"RTN","PSOSUPOE",59,0)
 S RXFL(RXREC)=$P($G(^PS(52.5,SFN,0)),"^",13),RXRS(RXREC)=$G(PSODFN),RXLTOP=1
"RTN","PSOSUPOE",60,0)
 S RXRS(RXREC)=$G(RXRS(RXREC))_"^"_$S($P($G(^PS(52.5,SFN,0)),"^",4)="W":"W",1:"M")_"^"_$P($G(^PSRX(RXREC,"MP")),"^") S PSOGET="M" D GETMW
"RTN","PSOSUPOE",61,0)
 S RXRS(RXREC)=$G(RXRS(RXREC))_"^"_$G(PSOGETF)_"^"_$G(PSOGETFN)_"^"_$S($G(PSOGET)="W":"W",1:"M")
"RTN","PSOSUPOE",62,0)
 S $P(^PS(52.5,SFN,0),"^",4)=$G(PSOSQRTE) S MW=$G(PSOSQRTE) N RR,RFCNT D MAILS^PSOSUPAT I $D(PSOSQMTH) S $P(^PSRX(RXREC,"MP"),"^")=$G(PSOSQMTH)
"RTN","PSOSUPOE",63,0)
 S PSOSQ=1
"RTN","PSOSUPOE",64,0)
 ;
"RTN","PSOSUPOE",65,0)
 D ULRX K PSOGET,PSOGETF
"RTN","PSOSUPOE",66,0)
 Q
"RTN","PSOSUPOE",67,0)
WIND ;
"RTN","PSOSUPOE",68,0)
 N RRT,RRTT,XXXX,JJJJ,PSINTRX,RTETEST,PSOPSO,SSSS
"RTN","PSOSUPOE",69,0)
 S PBINGRTE=0,PSINTRX=RXREC
"RTN","PSOSUPOE",70,0)
 I $G(RXPR(RXREC)) S RTETEST=$P($G(^PSRX(RXREC,"P",RXPR(PSINTRX),0)),"^",2) S:RTETEST="W" PBINGRTE=1 Q
"RTN","PSOSUPOE",71,0)
 S PSOPSO=0 F SSSS=0:0 S SSSS=$O(^PSRX(PSINTRX,1,SSSS)) Q:'SSSS  S PSOPSO=SSSS
"RTN","PSOSUPOE",72,0)
 I 'PSOPSO S RTETEST=$P($G(^PSRX(PSINTRX,0)),"^",11) S:RTETEST="W" PBINGRTE=1 Q
"RTN","PSOSUPOE",73,0)
 I PSOPSO S RTETEST=$P($G(^PSRX(PSINTRX,1,PSOPSO,0)),"^",2) S:RTETEST="W" PBINGRTE=1 Q
"RTN","PSOSUPOE",74,0)
 Q
"RTN","PSOSUPOE",75,0)
DIR ;
"RTN","PSOSUPOE",76,0)
 W ! K DIR S DIR(0)="E",DIR("A")="Press Return to Continue" D ^DIR K DIR Q
"RTN","PSOSUPOE",77,0)
END S VALMSG="Nothing pulled from suspense!",VALMBCK="R" S:$G(PULLONE)=1 PULLONE=2 Q
"RTN","PSOSUPOE",78,0)
ADD ;Add Rx to SPSORX array
"RTN","PSOSUPOE",79,0)
 I $G(SPSORX("PSOL",1))']"" S SPSORX("PSOL",1)=RXREC_"," Q
"RTN","PSOSUPOE",80,0)
 F PSOX1=0:0 S PSOX1=$O(SPSORX("PSOL",PSOX1)) Q:'PSOX1  S PSOX2=PSOX1
"RTN","PSOSUPOE",81,0)
 I $L(SPSORX("PSOL",PSOX2))+$L(RXREC)<220 S SPSORX("PSOL",PSOX2)=SPSORX("PSOL",PSOX2)_RXREC_"," Q
"RTN","PSOSUPOE",82,0)
 S SPSORX("PSOL",PSOX2+1)=RXREC_","
"RTN","PSOSUPOE",83,0)
 Q
"RTN","PSOSUPOE",84,0)
BBADD ;
"RTN","PSOSUPOE",85,0)
 N PSOX1,PSOX2
"RTN","PSOSUPOE",86,0)
 I $G(BBRX(1))']"" S BBRX(1)=RXREC_"," Q
"RTN","PSOSUPOE",87,0)
 F PSOX1=0:0 S PSOX1=$O(BBRX(PSOX1)) Q:'PSOX1  S PSOX2=PSOX1
"RTN","PSOSUPOE",88,0)
 I $L(BBRX(PSOX2))+$L(RXREC)<220 S BBRX(PSOX2)=BBRX(PSOX2)_RXREC_"," Q
"RTN","PSOSUPOE",89,0)
 S BBRX(PSOX2+1)=RXREC_","
"RTN","PSOSUPOE",90,0)
 Q
"RTN","PSOSUPOE",91,0)
PPLADD ;
"RTN","PSOSUPOE",92,0)
 ; This function will move entries from the RXRS array (which has RXs that were pulled
"RTN","PSOSUPOE",93,0)
 ; from supense via the PP action on the Medication profile) to the list of RXs that
"RTN","PSOSUPOE",94,0)
 ; will get a label (PPL variable and possible PSORX array).
"RTN","PSOSUPOE",95,0)
 ;
"RTN","PSOSUPOE",96,0)
 ; Note that arrays RXRS and PSORX and variable PPL are pre-existing
"RTN","PSOSUPOE",97,0)
 ;
"RTN","PSOSUPOE",98,0)
 N SZZ,SPSOX1,SPSOX2,LSFN
"RTN","PSOSUPOE",99,0)
 I $G(PPL)'="",$E(PPL,$L(PPL))'="," S PPL=PPL_","
"RTN","PSOSUPOE",100,0)
 ;
"RTN","PSOSUPOE",101,0)
 ; Loop through entries in the RXRS array and process
"RTN","PSOSUPOE",102,0)
 S SZZ=0 F  S SZZ=$O(RXRS(SZZ)) Q:'SZZ  D
"RTN","PSOSUPOE",103,0)
 .;
"RTN","PSOSUPOE",104,0)
 .; Check if label already printed per the RX SUSPENSE file
"RTN","PSOSUPOE",105,0)
 .S LSFN=$O(^PS(52.5,"B",SZZ,0))
"RTN","PSOSUPOE",106,0)
 .Q:'$G(LSFN)
"RTN","PSOSUPOE",107,0)
 .Q:$G(^PS(52.5,LSFN,"P"))
"RTN","PSOSUPOE",108,0)
 .;
"RTN","PSOSUPOE",109,0)
 .; The following function checks for ECME conditions where we do not want a label
"RTN","PSOSUPOE",110,0)
 .; This is probably redundant as the RXRS array entry should not have been created if any of these
"RTN","PSOSUPOE",111,0)
 .;   conditions existed but things might have changed after the entry was created
"RTN","PSOSUPOE",112,0)
 .I $$ECMECHK^PSOREJU3(SZZ) Q
"RTN","PSOSUPOE",113,0)
 .;
"RTN","PSOSUPOE",114,0)
 .; Add to list of RXs that should get a label
"RTN","PSOSUPOE",115,0)
 .I $G(PPL)="" S PPL=SZZ_"," Q
"RTN","PSOSUPOE",116,0)
 .I $L(PPL)+$L(SZZ)<220 S PPL=PPL_SZZ_"," Q
"RTN","PSOSUPOE",117,0)
 .I $G(PSORX("PSOL",2))']"" S PSORX("PSOL",2)=SZZ_"," Q
"RTN","PSOSUPOE",118,0)
 .F SPSOX1=1:0 S SPSOX1=$O(PSORX("PSOL",SPSOX1)) Q:'SPSOX1  S SPSOX2=SPSOX1
"RTN","PSOSUPOE",119,0)
 .I $L(PSORX("PSOL",SPSOX2))+$L(SZZ)<220 S PSORX("PSOL",SPSOX2)=PSORX("PSOL",SPSOX2)_SZZ_"," Q
"RTN","PSOSUPOE",120,0)
 .S PSORX("PSOL",SPSOX2+1)=SZZ_","
"RTN","PSOSUPOE",121,0)
 Q
"RTN","PSOSUPOE",122,0)
CKDIV ;
"RTN","PSOSUPOE",123,0)
 I '$P($G(PSOSYS),"^",2) W !!?10,"Rx # ",$P(^PSRX(RXREC,0),"^")," is not a valid choice (Different Division)" S PSPOP=1 Q
"RTN","PSOSUPOE",124,0)
 I $P($G(PSOSYS),"^",3) W !!?10 K DIR S DIR("A")="Rx # "_$P(^PSRX(RXREC,0),"^")_" is from another division. OK to Pull",DIR(0)="Y",DIR("B")="YES" D ^DIR K DIR I $G(DIRUT)!('Y) S PSPOP=1
"RTN","PSOSUPOE",125,0)
 Q
"RTN","PSOSUPOE",126,0)
SELONE ;Pull one Rx through Listman
"RTN","PSOSUPOE",127,0)
 I $G(PSOBEDT) W $C(7),$C(7) S VALMSG="Invalid Action at this time !",VALMBCK="" Q
"RTN","PSOSUPOE",128,0)
 N ORD,MW,PDUZ,PSLST,PSOSQ,PSOSQRTE,PSOSQMTH,PSPOP,PSOX1,PSOX2,PULLONE,RXLTOP,RXREC,SFN,SORD,SORN,VALMCNT
"RTN","PSOSUPOE",129,0)
 S PULLONE=1
"RTN","PSOSUPOE",130,0)
 I +PSOLST(ORN)'=52 S VALMBCK="" Q
"RTN","PSOSUPOE",131,0)
 I +PSOLST(ORN)=52,$P($G(^PSRX($P(PSOLST(ORN),"^",2),"STA")),"^")'=5 S VALMSG="Rx is not on Suspense!",VALMBCK="" Q
"RTN","PSOSUPOE",132,0)
 I +PSOLST(ORN)=52,$D(RXRS($P(PSOLST(ORN),"^",2))) S VALMSG="Pull early has already been requested!",VALMBCK="" Q
"RTN","PSOSUPOE",133,0)
 N EHOLDQ,ESIEN,ERXIEN S ERXIEN=$P(PSOLST(ORN),"^",2),ESIEN="",ESIEN=$O(^PS(52.5,"B",ERXIEN,ESIEN))
"RTN","PSOSUPOE",134,0)
 I $G(ESIEN),$$GET1^DIQ(52.5,ESIEN,10)'="" D EHOLD Q:$G(EHOLDQ)
"RTN","PSOSUPOE",135,0)
 K EHOLDQ,ESIEN,ERXIEN
"RTN","PSOSUPOE",136,0)
 D SELQ I $G(PULLONE)=2 S VALMSG="Rx# "_$P($G(^PSRX($P(PSOLST(ORN),"^",2),0)),"^")_" not pulled from suspense!" Q
"RTN","PSOSUPOE",137,0)
 I +PSOLST(ORN)=52 S RXREC=$P(PSOLST(ORN),"^",2)
"RTN","PSOSUPOE",138,0)
 D BEGQ S VALMSG="Rx# "_$P($G(^PSRX(+$G(RXREC),0)),"^")_$S($G(PSOSQ):" pulled",1:" not pulled")_" from Suspense!"
"RTN","PSOSUPOE",139,0)
 S VALMBCK="R"
"RTN","PSOSUPOE",140,0)
 Q
"RTN","PSOSUPOE",141,0)
RESET ;
"RTN","PSOSUPOE",142,0)
 N RSDA,RXMW,RXMP,RXSP,RXR,DA,RXPSRX,RXFILL,RXFILLN
"RTN","PSOSUPOE",143,0)
 F RSDA=0:0 S RSDA=$O(RXRS(RSDA)) Q:'RSDA  D
"RTN","PSOSUPOE",144,0)
 .S RXSP=$O(^PS(52.5,"B",RSDA,0)) Q:'RXSP
"RTN","PSOSUPOE",145,0)
 .Q:'$D(^PS(52.5,RXSP,0))
"RTN","PSOSUPOE",146,0)
 .S RXMW=$S($P($G(RXRS(RSDA)),"^",2)="":"M",1:$P($G(RXRS(RSDA)),"^",2)),RXMP=$P($G(RXRS(RSDA)),"^",3),RXFILL=$P($G(RXRS(RSDA)),"^",4),RXFILLN=$P($G(RXRS(RSDA)),"^",5),RXPSRX=$S($P($G(RXRS(RSDA)),"^",6)="":"M",1:$P($G(RXRS(RSDA)),"^",6))
"RTN","PSOSUPOE",147,0)
 .I RXMW'="" S $P(^PS(52.5,RXSP,0),"^",4)=RXMW D
"RTN","PSOSUPOE",148,0)
 ..I RXFILL="P" D  Q
"RTN","PSOSUPOE",149,0)
 ...I $D(^PSRX(RSDA,"P",+$G(RXFILLN),0)) S $P(^PSRX(RSDA,"P",+$G(RXFILLN),0),"^",2)=$G(RXPSRX),$P(^PSRX(RSDA,"MP"),"^")=RXMP
"RTN","PSOSUPOE",150,0)
 ..I RXFILL="R",$G(RXFILLN) S DA(1)=RSDA,DA=RXFILLN,DIE="^PSRX("_DA(1)_",1,",DR="2////"_RXPSRX D ^DIE K DIE
"RTN","PSOSUPOE",151,0)
 ..I RXFILL="O" S DA=RSDA,DIE="^PSRX(",DR="11////"_RXPSRX D ^DIE K DIE
"RTN","PSOSUPOE",152,0)
 ..S $P(^PSRX(RSDA,"MP"),"^")=RXMP
"RTN","PSOSUPOE",153,0)
 Q
"RTN","PSOSUPOE",154,0)
GETMW ;
"RTN","PSOSUPOE",155,0)
 N GETPAR,GETRX,GETCNT
"RTN","PSOSUPOE",156,0)
 S PSOGETF="O",PSOGETFN=""
"RTN","PSOSUPOE",157,0)
 S GETPAR=$P($G(^PS(52.5,SFN,0)),"^",5)
"RTN","PSOSUPOE",158,0)
 I GETPAR S PSOGET=$P($G(^PSRX(RXREC,"P",GETPAR,0)),"^",2),PSOGETF="P",PSOGETFN=GETPAR Q
"RTN","PSOSUPOE",159,0)
 I '$O(^PSRX(RXREC,1,0)) S PSOGET=$P($G(^PSRX(RXREC,0)),"^",11) Q
"RTN","PSOSUPOE",160,0)
 S GETRX=0 F GETCNT=0:0 S GETCNT=$O(^PSRX(RXREC,1,GETCNT)) Q:'GETCNT  S GETRX=GETCNT
"RTN","PSOSUPOE",161,0)
 S PSOGET=$P($G(^PSRX(RXREC,1,+$G(GETRX),0)),"^",2),PSOGETF="R",PSOGETFN=+$G(GETRX)
"RTN","PSOSUPOE",162,0)
 Q
"RTN","PSOSUPOE",163,0)
ULRX ;
"RTN","PSOSUPOE",164,0)
 I '$G(RXREC) Q
"RTN","PSOSUPOE",165,0)
 D PSOUL^PSSLOCK(RXREC)
"RTN","PSOSUPOE",166,0)
 Q
"RTN","PSOSUPOE",167,0)
EHOLD ;
"RTN","PSOSUPOE",168,0)
 Q:'$G(ERXIEN)
"RTN","PSOSUPOE",169,0)
 Q:$$GET1^DIQ(52,ERXIEN,86)=""
"RTN","PSOSUPOE",170,0)
 D FULL^VALM1
"RTN","PSOSUPOE",171,0)
 W !,"This is an ePharmacy billable fill which is Suspended until "_$$GET1^DIQ(52.5,ESIEN,10)_", based"
"RTN","PSOSUPOE",172,0)
 W !,"on the 3/4 Days rule.",!
"RTN","PSOSUPOE",173,0)
 K DIR S EHOLDQ=0,DIR(0)="YA",DIR("A")="Do you wish to continue? "
"RTN","PSOSUPOE",174,0)
 D ^DIR I $D(DIRUT)!('Y) S EHOLDQ=1 K DIR
"RTN","PSOSUPOE",175,0)
 S VALMSG="No action taken.",VALMBCK="R"
"RTN","PSOSUPOE",176,0)
 Q
"RTN","PSOSUPOE",177,0)
 ;
"RTN","PSOSUPRX")
0^28^B53587133
"RTN","PSOSUPRX",1,0)
PSOSUPRX ;BIR/RTR - Suspense pull early ;3/1/96
"RTN","PSOSUPRX",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**8,36,130,185,148,287,358,385,427**;DEC 1997;Build 21
"RTN","PSOSUPRX",3,0)
 ;External reference to ^PS(55 supported by DBIA 2228
"RTN","PSOSUPRX",4,0)
 ;External reference to ^PSSLOCK supported by DBIA 2789
"RTN","PSOSUPRX",5,0)
ST N PSOPLLRX D:'$D(PSOPAR) ^PSOLSET G:'$D(PSOPAR) ST
"RTN","PSOSUPRX",6,0)
 N SUSROUTE,BBRX S SUSPT=1,PSLION=$G(PSOLAP),PSOQFLAG=0 W !! S DIR("A")="Print a specific Rx # or all Rx's for a patient",DIR(0)="SBO^S:SPECIFIC RX;A:ALL RXs FOR A PATIENT"
"RTN","PSOSUPRX",7,0)
 S DIR("?",1)="Enter 'S' to print a suspended prescription label early.",DIR("?")="Enter 'A' to print all prescription suspense labels for a patient."
"RTN","PSOSUPRX",8,0)
 D ^DIR K DIR S SA=Y G:$G(DIRUT)!(Y<0) EXIT I SA="A" D ^PSOSUPAT G EXIT
"RTN","PSOSUPRX",9,0)
LU D NOW^%DTC S TM=$E(%,1,12),TM1=$P(TM,".",2) ;setup start time for bingo
"RTN","PSOSUPRX",10,0)
 K SUSROUTE,BBRX,RXP,RXFL,RXRP,RXPR,RXRR
"RTN","PSOSUPRX",11,0)
 K PSOPROFL,PSOE,RXP1,RXPR,PRF,PSOWIN,PSOWINEN S MW="" W ! S DIR("A")="Select SUSPENDED Rx #: ",DIR(0)="FOA",DIR("?")="Enter the Rx # or wand the barcode. For a list of suspense prescriptions, type '??'",DIR("??")="^D LIST^PSOSUPRX"
"RTN","PSOSUPRX",12,0)
 S POP=0 D ^DIR K DIR G:$D(DIRUT)!('Y) ST S OUT=0 D:Y["-" PSOINST^PSOSUPAT G:OUT LU
"RTN","PSOSUPRX",13,0)
 S:Y'["-" X=Y S:Y["-" Y=$P(Y,"-",2),X=$P(^PSRX(+Y,0),"^") K Y G:$G(X)="" ST K DIC W ! D  S DIC="^PS(52.5,",DIC(0)="ZQE" D ^DIC K DIC,PSOSPINT W ! G:$D(DTOUT)!($D(DUOUT)) ST G LU:Y<0 S RXREC=+Y(0),SFN=+Y
"RTN","PSOSUPRX",14,0)
 .S PSOSPINT=X S DIC("S")="I $D(^PSRX(+$P(^PS(52.5,+Y,0),""^""),0)),$P($G(^(""STA"")),""^"")=5,$P($G(^(0)),""^"")=PSOSPINT"
"RTN","PSOSUPRX",15,0)
 S PSOPLLRX=$G(RXREC) I PSOPLLRX D PSOL^PSSLOCK(PSOPLLRX) I '$G(PSOMSG) D  K DIR S DIR(0)="E",DIR("A")="Press Return to continue" D ^DIR K DIR K PSOMSG,PSOPLLRX,X,Y G LU
"RTN","PSOSUPRX",16,0)
 .I $P($G(PSOMSG),"^",2)'="" W !,$P($G(PSOMSG),"^",2),! Q
"RTN","PSOSUPRX",17,0)
 .W !,"Another person is editing this order.",!
"RTN","PSOSUPRX",18,0)
 K PSOMSG
"RTN","PSOSUPRX",19,0)
 S PSOLOUD=1 D:$P($G(^PS(55,$P(Y(0),"^",3),0)),"^",6)'=2 EN^PSOHLUP($P(Y(0),"^",3)) K PSOLOUD
"RTN","PSOSUPRX",20,0)
 I $G(PSODIV),$P($G(^PS(52.5,SFN,0)),"^",6)'=$G(PSOSITE) S PSPOP=0,PSOSAV=Y,PSOSAVO=Y(0) D CKDIV^PSOSUPAT S Y=PSOSAV,Y(0)=PSOSAVO K PSOSAV,PSOSAVO,PSOPRFLG D:PSPOP UNLK G:PSPOP LU
"RTN","PSOSUPRX",21,0)
 D CHKDEAD W:DEAD !!,?10,$G(PSDNAME)," DIED ",$G(PSDDDATE) D:'DEAD BEG D:$G(PSOQFLAG) RESET^PSOSUPAT K PSOQFLAG,PSOPULL D UNLK G LU
"RTN","PSOSUPRX",22,0)
EXIT K ASKED,CBD,CNT,COM,DA,DEAD,DEL,DFN,DIRUT,DR,DTOUT,DUOUT,HOLDDFN,HDSFN,JJ,MW,OLD,OUT,PDUZ,PSODFN,TM,TM1,RXLTOP,RXRR,PSOGET,PSOGETF,PSOGETFN
"RTN","PSOSUPRX",23,0)
 K PPL,PSOPULL,PSOWIN,PSOWINEN,PRF,PSODBQ,PSPOP,PSOQFLAG,PSOPROFL,RF,RFCNT,RX,RXP1,RXPR,RXREC,SA,SFN,STOP,SUSPT,VADM,ZTSK,RXFL
"RTN","PSOSUPRX",24,0)
 K X,Y,Z,PSOPRFLG,PSDDDATE,PSDNAME,ZZZZ,RXRP Q
"RTN","PSOSUPRX",25,0)
CHKDEAD S (DFN,PSODFN)=+$P(Y(0),"^",3) D DEM^VADPT S PSDNAME=$G(VADM(1)) I VADM(1)="" W !?10,"PATIENT UNKNOWN" S DEAD=0 Q
"RTN","PSOSUPRX",26,0)
 I VADM(6)="" S DEAD=0 Q
"RTN","PSOSUPRX",27,0)
 S PSDDDATE=$P(VADM(6),"^",2),(PDUZ,PSOCLC)=DUZ F ZZZZ=0:0 S ZZZZ=$O(^PS(55,DFN,"P",ZZZZ)) Q:'ZZZZ  I $D(^PS(55,DFN,"P",ZZZZ,0)),$P($G(^(0)),"^") S (DA,RXREC)=$P(^(0),"^") I $O(^PS(52.5,"B",DA,0)) D DEAD
"RTN","PSOSUPRX",28,0)
 Q
"RTN","PSOSUPRX",29,0)
DEAD S HOLD=DA,REA="C",COM="Died ("_$G(PSDDDATE)_")",DA=RXREC,DEAD=1 D CAN^PSOCAN S DA=HOLD K HOLD,REA Q
"RTN","PSOSUPRX",30,0)
BEG S PDUZ=DUZ I +$G(^PS(52.5,SFN,"P")) W !,">>> Rx #",$P(^PSRX(+$P(^(0),"^"),0),"^")," ALREADY PRINTED FROM SUSPENSE.",!,?5,"USE THE REPRINT OPTION TO REPRINT LABEL.",! Q
"RTN","PSOSUPRX",31,0)
 I +$P($G(^PSRX(RXREC,2)),"^",6)<DT,+$P($G(^("STA")),"^")<11 D  S DIE=52,DA=RXREC,DR="100///"_11 D ^DIE S DA=SFN,DIK="^PS(52.5," D ^DIK K DIE,DA,DIK W !,"Rx # "_$P(^PSRX(RXREC,0),"^")_" has expired!" F PSOE=1:1:3 W "." H 1
"RTN","PSOSUPRX",32,0)
 .D EX^PSOSUTL
"RTN","PSOSUPRX",33,0)
 I '$D(^PS(52.5,SFN,0)) K PSOE Q
"RTN","PSOSUPRX",34,0)
 ; 
"RTN","PSOSUPRX",35,0)
 ; PSO*7*427 - 7/24/2015
"RTN","PSOSUPRX",36,0)
 ; Check if Label Log indicates a label was already printed. If it does, ask the user if they still
"RTN","PSOSUPRX",37,0)
 ; want to print. If they don't, remove from Suspense queue, then quit.
"RTN","PSOSUPRX",38,0)
 N PRNTED,REFILL
"RTN","PSOSUPRX",39,0)
 S REFILL=$P($G(^PS(52.5,SFN,0)),"^",13)
"RTN","PSOSUPRX",40,0)
 S PRNTED=$$PRINTED^PSOSULBL(SFN,RXREC,REFILL)
"RTN","PSOSUPRX",41,0)
 I PRNTED N CONT S CONT=$$PRTQUES(RXREC,REFILL) I CONT'=1 D  Q
"RTN","PSOSUPRX",42,0)
 . I CONT=0 D REMOVE^PSOSULBL(SFN,RXREC,REFILL,DUZ,1,PRNTED)
"RTN","PSOSUPRX",43,0)
 . I CONT=-1 W !,"This prescription will not be pulled but will be left on suspense."
"RTN","PSOSUPRX",44,0)
 ;
"RTN","PSOSUPRX",45,0)
 D ICN^PSODPT(+$P(^PSRX(RXREC,0),"^",2))
"RTN","PSOSUPRX",46,0)
 S RXFL(RXREC)=$P($G(^PS(52.5,SFN,0)),"^",13)
"RTN","PSOSUPRX",47,0)
 S HDSFN=SFN,(PPL,DA)=RXREC S:$P(^PS(52.5,SFN,0),"^",5) (RXP1,RXPR(RXREC))=$P(^(0),"^",5)
"RTN","PSOSUPRX",48,0)
 S:$P(^PS(52.5,SFN,0),"^",12) RXRP(RXREC)=1 D QUES Q:$G(PSOQFLAG)
"RTN","PSOSUPRX",49,0)
 S (PSOPULL,PSODBQ,PSONOPRT)=1,RXLTOP=1 D WIND D Q^PSORXL S PPL=RXREC
"RTN","PSOSUPRX",50,0)
 I '$G(PSOQFLAG) W !!,"LABEL QUEUED TO PRINT",! K RX
"RTN","PSOSUPRX",51,0)
 I '$G(PSOQFLAG) D PRF D:'$G(PSOQFLAG)  S PSOQFLAG=0
"RTN","PSOSUPRX",52,0)
 .S:'$G(PSOPROFL) PSOPRFLG=1 W:$G(PSOPROFL) !!,"PROFILE QUEUED TO PRINT"
"RTN","PSOSUPRX",53,0)
 K PSONOPRT,RXPR,RXP1
"RTN","PSOSUPRX",54,0)
 S PPL=RXREC
"RTN","PSOSUPRX",55,0)
 ;call to bingo board
"RTN","PSOSUPRX",56,0)
 S:$G(SUSROUTE) BBRX(1)=PPL
"RTN","PSOSUPRX",57,0)
 D:$G(BINGRTE)&($D(DISGROUP))&('$G(PSOQFLAG)) ^PSOBING1 K BINGRTE,BBRX
"RTN","PSOSUPRX",58,0)
 Q
"RTN","PSOSUPRX",59,0)
 ; PSO*427-DMB-7/27/2015. PSOSUPAT (Pull Early for all Rx for a patient) used to call QUES. Because of that, the code below
"RTN","PSOSUPRX",60,0)
 ; had checks to make sure that Routing, Method of P/U, and Pull Rx question was only asked for the first Rx.  Now that PSOSUPAT
"RTN","PSOSUPRX",61,0)
 ; no longer calls QUES, those checks/variables were removed.
"RTN","PSOSUPRX",62,0)
QUES ;
"RTN","PSOSUPRX",63,0)
 ; Ask Routing, method of pickup, and whether to continue. Also update RX and RX Suspense records with new values. Save off old
"RTN","PSOSUPRX",64,0)
 ; values in case we need to reset them later.
"RTN","PSOSUPRX",65,0)
 W ! K DIR S DIR("A")="Select routing for Rx(s)",DIR(0)="S^M:MAIL;W:WINDOW",DIR("B")="WINDOW" D ^DIR K DIR S MW=Y I Y["^"!($D(DTOUT)) W !!?5,"Nothing pulled from suspense!",! S PSOQFLAG=1 Q
"RTN","PSOSUPRX",66,0)
 S PSOGET="M" D GETMW^PSOSUPOE S RXRR(RXREC)=$S($P(^PS(52.5,SFN,0),"^",4)="W":"W",1:"M")_"^"_$P($G(^PSRX(RXREC,"MP")),"^")_"^"_$G(PSOGETF)_"^"_$G(PSOGETFN)_"^"_$S($G(PSOGET)="W":"W",1:"M")
"RTN","PSOSUPRX",67,0)
 S:$G(MW)="W" SUSROUTE=1 S $P(^PS(52.5,SFN,0),"^",4)=$G(MW) D:$G(MW)="W"  Q:$G(PSOQFLAG)  D MAIL^PSOSUPAT
"RTN","PSOSUPRX",68,0)
 .I $P(PSOPAR,"^",12) S DA=RXREC,DIE="^PSRX(",DR=35 D ^DIE S:$D(Y)!($D(DTOUT)) PSOQFLAG=1 Q:$G(PSOQFLAG)  S PSOWIN=1,PSOWINEN=$P($G(^PSRX(RXREC,"MP")),"^") Q
"RTN","PSOSUPRX",69,0)
 W !! S DIR("A")="Pull Rx(s) and delete from suspense",DIR("B")="Y",DIR(0)="Y" D  D ^DIR K DIR I Y'=1 W $C(7),!!?5,"Nothing pulled from suspense!",! S PSOQFLAG=1 Q
"RTN","PSOSUPRX",70,0)
 .S DIR("?",1)="Enter Yes to pull selected Rx(s) from suspense. Since Rx(s) pulled early from",DIR("?",2)="suspense are not associated with a printed batch, these Rx(s) cannot be"
"RTN","PSOSUPRX",71,0)
 .S DIR("?",3)="reprinted from suspense using the 'Reprint batches from Suspense' option.",DIR("?")="Therefore, any Rx(s) pulled early from suspense will be deleted from suspense."
"RTN","PSOSUPRX",72,0)
 S HDSFN=SFN
"RTN","PSOSUPRX",73,0)
 ;
"RTN","PSOSUPRX",74,0)
 ; - Submitting Rx to ECME for 3rd Party Billing
"RTN","PSOSUPRX",75,0)
 N RFL S RFL=RXFL(RXREC) I RFL="" S RFL=$$LSTRFL^PSOBPSU1(RXREC)
"RTN","PSOSUPRX",76,0)
 D ECMESND^PSOBPSU1(RXREC,RFL,,"PE")
"RTN","PSOSUPRX",77,0)
 ; Quit if there is an unresolved TRICARE/CHAMPVA non-billable reject code, PSO*7*358
"RTN","PSOSUPRX",78,0)
 I $$PSOET^PSOREJP3(RXREC,RFL) S PSOQFLAG=1 Q
"RTN","PSOSUPRX",79,0)
 N PSOTRIC S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RXREC,RFL,.PSOTRIC)
"RTN","PSOSUPRX",80,0)
 I $$FIND^PSOREJUT(RXREC,RFL),$$HDLG^PSOREJU1(RXREC,RFL,"79,88","PE","IOQ","I")="Q" S PSOQFLAG=1 Q
"RTN","PSOSUPRX",81,0)
 I $P($G(^PSRX(RXREC,"STA")),"^")=12 S PSOQFLAG=1 Q  ;No label if discontinued via Reject Notification screen
"RTN","PSOSUPRX",82,0)
 ;
"RTN","PSOSUPRX",83,0)
 Q
"RTN","PSOSUPRX",84,0)
PRF S:'$D(DFN) DFN=+$P(^PS(52.5,SFN,0),"^",3) I $P(PSOPAR,"^",8),'$D(^PSRX(RXREC,1)),'$D(PRF(DFN)),'$G(RXP1) S PSOPROFL=1,HOLDDFN=DFN D ^PSOPRF S DFN=HOLDDFN K HOLDDFN S PRF(DFN)=""
"RTN","PSOSUPRX",85,0)
 Q
"RTN","PSOSUPRX",86,0)
LIST S X="?",DIC("S")="I $D(^PSRX(+$P(^PS(52.5,+Y,0),""^""),0)),$P($G(^(""STA"")),""^"")=5",DIC="^PS(52.5,",DIC(0)="ZQ" D ^DIC K DIC W ! Q:Y<0!($D(DTOUT))  Q
"RTN","PSOSUPRX",87,0)
NEXT S PSOX("IRXN")=RX D NEXT^PSOUTIL(.PSOX) S NEXT=$P(PSOX("RX3"),"^",2)
"RTN","PSOSUPRX",88,0)
 S DA=RX,DIE=52,DR="102///"_NEXT D ^DIE K DIE Q:$D(DTOUT)!($D(DUOUT))
"RTN","PSOSUPRX",89,0)
 K NEXT,PSOX Q
"RTN","PSOSUPRX",90,0)
WIND ;
"RTN","PSOSUPRX",91,0)
 N RRT,RRTT,XXXX,JJJJ,PSINTRX,RTETEST,PSOPSO,SSSS
"RTN","PSOSUPRX",92,0)
 S BINGRTE=0
"RTN","PSOSUPRX",93,0)
 S RRT=1 F XXXX=1:1:$L(PPL) S RRTT=$E(PPL,XXXX) I RRTT="," S RRT=RRT+1
"RTN","PSOSUPRX",94,0)
 F JJJJ=1:1:RRT Q:$G(BINGRTE)  S PSINTRX=$P(PPL,",",JJJJ) I $D(^PSRX(+PSINTRX,0)) D
"RTN","PSOSUPRX",95,0)
 .I $G(RXPR(PSINTRX)) S RTETEST=$P($G(^PSRX(PSINTRX,"P",RXPR(PSINTRX),0)),"^",2) S:RTETEST="W" BINGRTE=1 Q
"RTN","PSOSUPRX",96,0)
 .S PSOPSO=0 F SSSS=0:0 S SSSS=$O(^PSRX(PSINTRX,1,SSSS)) Q:'SSSS  S PSOPSO=SSSS
"RTN","PSOSUPRX",97,0)
 .I 'PSOPSO S RTETEST=$P($G(^PSRX(PSINTRX,0)),"^",11) S:RTETEST="W" BINGRTE=1 Q
"RTN","PSOSUPRX",98,0)
 .I PSOPSO S RTETEST=$P($G(^PSRX(PSINTRX,1,PSOPSO,0)),"^",2) S:RTETEST="W" BINGRTE=1 Q
"RTN","PSOSUPRX",99,0)
 Q
"RTN","PSOSUPRX",100,0)
UNLK ;Unlock prescription
"RTN","PSOSUPRX",101,0)
 Q:'$G(PSOPLLRX)
"RTN","PSOSUPRX",102,0)
 D PSOUL^PSSLOCK(PSOPLLRX)
"RTN","PSOSUPRX",103,0)
 K PSOPLLRX
"RTN","PSOSUPRX",104,0)
 Q
"RTN","PSOSUPRX",105,0)
 ;
"RTN","PSOSUPRX",106,0)
PRTQUES(RX,RFL) ;
"RTN","PSOSUPRX",107,0)
 ; Prompt if the user wants to continue when a label has been printed already
"RTN","PSOSUPRX",108,0)
 ; Input:
"RTN","PSOSUPRX",109,0)
 ;   RX  - Prescription (#52) file IEN
"RTN","PSOSUPRX",110,0)
 ;   RFL - Fill Number
"RTN","PSOSUPRX",111,0)
 ; Output:
"RTN","PSOSUPRX",112,0)
 ;   0 - Do not continue (user said No)
"RTN","PSOSUPRX",113,0)
 ;   1 - Continue (user said Yes)
"RTN","PSOSUPRX",114,0)
 ;  -1 - Up-arrow, time-out, invalid parameter or any other non-YES/NO response
"RTN","PSOSUPRX",115,0)
 ;
"RTN","PSOSUPRX",116,0)
 I '$G(RX) Q -1
"RTN","PSOSUPRX",117,0)
 I $G(RFL)="" S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOSUPRX",118,0)
 ;
"RTN","PSOSUPRX",119,0)
 N DIR,Y,DIRUT,DTOUT,DIRUT,DIROUT
"RTN","PSOSUPRX",120,0)
 W !!,"Label for Rx#",$P($G(^PSRX(RX,0)),"^")," Fill#",RFL," has already been printed"
"RTN","PSOSUPRX",121,0)
 S DIR(0)="Y",DIR("A")="Do you want to continue",DIR("B")="No"
"RTN","PSOSUPRX",122,0)
 D ^DIR
"RTN","PSOSUPRX",123,0)
 I Y=0 Q 0
"RTN","PSOSUPRX",124,0)
 I Y=1 Q 1
"RTN","PSOSUPRX",125,0)
 Q -1
"RTN","PSOTRI")
0^22^B18379619
"RTN","PSOTRI",1,0)
PSOTRI ;BIRM/BNT - OP TRICARE/CHAMPVA Audit Log Utilities ;07/21/2010
"RTN","PSOTRI",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**358,385,427**;DEC 1997;Build 21
"RTN","PSOTRI",3,0)
 ;
"RTN","PSOTRI",4,0)
 ; Reference to DUR1^BPSNCPD3 supported by IA 4560
"RTN","PSOTRI",5,0)
 ;
"RTN","PSOTRI",6,0)
 Q
"RTN","PSOTRI",7,0)
 ;
"RTN","PSOTRI",8,0)
 ;
"RTN","PSOTRI",9,0)
AUDIT(RX,RFL,RXCOB,JST,AUD,ELIG) ;
"RTN","PSOTRI",10,0)
 ; Main entry to create a new record in the PSO AUDIT LOG file #52.87
"RTN","PSOTRI",11,0)
 ; Note that AUDIT^PSOTRI is called by ECME (BPSECMP2) - ICR 6156
"RTN","PSOTRI",12,0)
 ; INPUT: RX    (r) = Prescription IEN
"RTN","PSOTRI",13,0)
 ;        RFL   (o) = Prescription Fill # (Default is original zero fill)
"RTN","PSOTRI",14,0)
 ;        RXCOB (o) = Coordination of Benefits
"RTN","PSOTRI",15,0)
 ;                   1 = Primary (Default)
"RTN","PSOTRI",16,0)
 ;                   2 = Secondary
"RTN","PSOTRI",17,0)
 ;        JST   (o) = Justification text
"RTN","PSOTRI",18,0)
 ;        AUD   (r) = Audit Type
"RTN","PSOTRI",19,0)
 ;                   R = NCPDP REJECT - Associated with an Override audit action
"RTN","PSOTRI",20,0)
 ;                   N = NON BILLABLE - Associated with an Override audit action
"RTN","PSOTRI",21,0)
 ;                   I = INPATIENT - Associated with a Bypass audit action
"RTN","PSOTRI",22,0)
 ;                   P = PARTIAL FILL
"RTN","PSOTRI",23,0)
 ;        ELIG  (r) = Eligibility Type
"RTN","PSOTRI",24,0)
 ;                   T = TRICARE
"RTN","PSOTRI",25,0)
 ;                   C = CHAMPVA
"RTN","PSOTRI",26,0)
 ; RETURN: Successful Audit entry will return the IEN of the new entry in file 52.87
"RTN","PSOTRI",27,0)
 ;         Unsuccessful Audit entry will return "0^Error Description"
"RTN","PSOTRI",28,0)
 ;
"RTN","PSOTRI",29,0)
 N PSOTRIC,PSODIV,RXFLDS,RFLFLDS,RXECME,PSOFDA,FN,SFN,PSOIEN,PSOIENS,PSOUSER,PSOTC,PSOET
"RTN","PSOTRI",30,0)
 N I,PSOAIEN,PSOREJ,DFN,PSODOA,PSODOS,PSOERR,PSOX,PSOY,RXARR,RFLARR,PSOPHRM,PSOQTY
"RTN","PSOTRI",31,0)
 Q:'$D(^PSRX(RX,0)) "0^Prescription does not exist"
"RTN","PSOTRI",32,0)
 ; Verify refill exists
"RTN","PSOTRI",33,0)
 I RFL=""!RFL<0 S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOTRI",34,0)
 ;
"RTN","PSOTRI",35,0)
 ; Not original fill
"RTN","PSOTRI",36,0)
 I RFL Q:'$D(^PSRX(RX,1,RFL)) "0^Refill "_RFL_" does not exist"
"RTN","PSOTRI",37,0)
 ;
"RTN","PSOTRI",38,0)
 ; Verify RX is for a TRICARE or CHAMPVA patient
"RTN","PSOTRI",39,0)
 S (PSOTRIC,PSOTC)="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOTRI",40,0)
 Q:'PSOTRIC "0^Not a TRICARE or CHAMPVA RX"
"RTN","PSOTRI",41,0)
 ;
"RTN","PSOTRI",42,0)
 ; Verify Audit Type
"RTN","PSOTRI",43,0)
 I ("/R/N/I/P/")'[("/"_AUD_"/") Q "0^Invalid Audit Type "_AUD
"RTN","PSOTRI",44,0)
 ;
"RTN","PSOTRI",45,0)
 ; Verify Eligibility Type
"RTN","PSOTRI",46,0)
 I ("/T/C/")'[("/"_ELIG_"/") Q "0^Invalid Eligibility Type "_ELIG
"RTN","PSOTRI",47,0)
 ;
"RTN","PSOTRI",48,0)
 ; Coordination of Benefits (default is Primary)
"RTN","PSOTRI",49,0)
 S RXCOB=+$G(RXCOB) I RXCOB=0 S RXCOB=1
"RTN","PSOTRI",50,0)
 ; Audit File and Reject subfile
"RTN","PSOTRI",51,0)
 S FN=52.87,SFN=52.8713
"RTN","PSOTRI",52,0)
 ;
"RTN","PSOTRI",53,0)
 ; Fields for original fill:
"RTN","PSOTRI",54,0)
 ; PROVIDER;NDC;DRUG NAME;QUANTITY;PATIENT;PATIENT STATUS;PHARMACIST;UNIT PRICE OF DRUG
"RTN","PSOTRI",55,0)
 S RXFLDS="4;27;6;7;2;3;23;17"
"RTN","PSOTRI",56,0)
 ; Fields for refills
"RTN","PSOTRI",57,0)
 ; PROVIDER;NDC;QUANTITY;PHARMACIST
"RTN","PSOTRI",58,0)
 S RFLFLDS="15;11;1;4"
"RTN","PSOTRI",59,0)
 ;
"RTN","PSOTRI",60,0)
 ; Get data from RX
"RTN","PSOTRI",61,0)
 D GETS^DIQ(52,RX,RXFLDS,"I","RXARR")
"RTN","PSOTRI",62,0)
 ; Get data from Refill
"RTN","PSOTRI",63,0)
 I RFL D GETS^DIQ(52.1,RFL_","_RX,RFLFLDS,"I","RFLARR")
"RTN","PSOTRI",64,0)
 ; Get Division
"RTN","PSOTRI",65,0)
 S PSODIV=$$RXSITE^PSOBPSUT(RX,RFL)
"RTN","PSOTRI",66,0)
 ; ECME Number, if exists
"RTN","PSOTRI",67,0)
 S RXECME=$$ECMENUM^PSOBPSU2(RX,RFL)
"RTN","PSOTRI",68,0)
 ; Date of Action is NOW
"RTN","PSOTRI",69,0)
 S PSODOA=$$NOW^XLFDT()
"RTN","PSOTRI",70,0)
 ; Date of Service
"RTN","PSOTRI",71,0)
 S PSODOS=$$DOS^PSOBPSU1(RX,RFL)
"RTN","PSOTRI",72,0)
 ; User (If null OR Audit Type is Inpatient OR bypass-type reject, set to POSTMASTER)
"RTN","PSOTRI",73,0)
 S PSOUSER=DUZ
"RTN","PSOTRI",74,0)
 I (PSOUSER="")!(AUD="I")!$$BYPASS^PSOBPSU1(ELIG,JST) S PSOUSER=.5
"RTN","PSOTRI",75,0)
 ; Quantity
"RTN","PSOTRI",76,0)
 S PSOQTY=$S(RFL>0:$G(RFLARR(52.1,RFL_","_RX_",",1,"I")),1:$G(RXARR(52,RX_",",7,"I")))
"RTN","PSOTRI",77,0)
 ;
"RTN","PSOTRI",78,0)
 ; Set up FDA array
"RTN","PSOTRI",79,0)
 S PSOIEN="+1,"
"RTN","PSOTRI",80,0)
 S PSOAIEN=$P($G(^PS(52.87,0)),U,3)+1
"RTN","PSOTRI",81,0)
 ; AUDIT ID field
"RTN","PSOTRI",82,0)
 S PSOFDA(FN,PSOIEN,.01)=PSOAIEN
"RTN","PSOTRI",83,0)
 ; PRESCRIPTION field
"RTN","PSOTRI",84,0)
 S PSOFDA(FN,PSOIEN,1)=RX
"RTN","PSOTRI",85,0)
 ; FILL field
"RTN","PSOTRI",86,0)
 S PSOFDA(FN,PSOIEN,2)=RFL
"RTN","PSOTRI",87,0)
 ; PATIENT field
"RTN","PSOTRI",88,0)
 S PSOFDA(FN,PSOIEN,3)=$G(RXARR(52,RX_",",2,"I"))
"RTN","PSOTRI",89,0)
 ; DIVISOIN field
"RTN","PSOTRI",90,0)
 S PSOFDA(FN,PSOIEN,4)=PSODIV
"RTN","PSOTRI",91,0)
 ; PROVIDER field
"RTN","PSOTRI",92,0)
 S PSOFDA(FN,PSOIEN,5)=$S(RFL>0:$G(RFLARR(52.1,RFL_","_RX_",",15,"I")),1:$G(RXARR(52,RX_",",4,"I")))
"RTN","PSOTRI",93,0)
 ; NDC field
"RTN","PSOTRI",94,0)
 S PSOFDA(FN,PSOIEN,6)=$S(RFL>0:$G(RFLARR(52.1,RFL_","_RX_",",11,"I")),1:$G(RXARR(52,RX_",",27,"I")))
"RTN","PSOTRI",95,0)
 ; DRUG field
"RTN","PSOTRI",96,0)
 S PSOFDA(FN,PSOIEN,7)=$G(RXARR(52,RX_",",6,"I"))
"RTN","PSOTRI",97,0)
 ; BILL COST field (This needs to be verified)
"RTN","PSOTRI",98,0)
 S PSOFDA(FN,PSOIEN,8)=$G(RXARR(52,RX_",",17,"I"))*PSOQTY+8
"RTN","PSOTRI",99,0)
 ; ECME NUMBER field
"RTN","PSOTRI",100,0)
 S PSOFDA(FN,PSOIEN,9)=RXECME
"RTN","PSOTRI",101,0)
 ; QTY field
"RTN","PSOTRI",102,0)
 S PSOFDA(FN,PSOIEN,10)=PSOQTY
"RTN","PSOTRI",103,0)
 ; PATIENT STATUS field
"RTN","PSOTRI",104,0)
 S PSOFDA(FN,PSOIEN,11)=$G(RXARR(52,RX_",",3,"I"))
"RTN","PSOTRI",105,0)
 ; AUDIT TYPE field
"RTN","PSOTRI",106,0)
 S PSOFDA(FN,PSOIEN,12)=AUD
"RTN","PSOTRI",107,0)
 ; USER field
"RTN","PSOTRI",108,0)
 S PSOFDA(FN,PSOIEN,14)=PSOUSER
"RTN","PSOTRI",109,0)
 ; DATE OF ACTION field
"RTN","PSOTRI",110,0)
 S PSOFDA(FN,PSOIEN,15)=PSODOA
"RTN","PSOTRI",111,0)
 ; DATE OF SERVICE field
"RTN","PSOTRI",112,0)
 S PSOFDA(FN,PSOIEN,16)=PSODOS
"RTN","PSOTRI",113,0)
 ; TRICARE JUSTIFICATION field
"RTN","PSOTRI",114,0)
 S PSOFDA(FN,PSOIEN,17)=JST
"RTN","PSOTRI",115,0)
 ; Eligibility Code
"RTN","PSOTRI",116,0)
 S PSOFDA(FN,PSOIEN,18)=ELIG
"RTN","PSOTRI",117,0)
 D DUR1^BPSNCPD3(RX,RFL,.PSOREJ,.PSOERR,RXCOB)
"RTN","PSOTRI",118,0)
 S PSOET=$$PSOET^PSOREJP3(RX,RFL)    ;check to see if eT or eC is the reject code as no ecme claim.
"RTN","PSOTRI",119,0)
 I PSOET S PSOTC=$S(PSOTRIC=1:"eT",PSOTRIC=2:"eC",1:"")
"RTN","PSOTRI",120,0)
 I PSOTC]"",'$D(PSOREJ(RXCOB,"REJ CODES")) S PSOREJ(RXCOB,"REJ CODES",1,PSOTC)="",PSOREJ(RXCOB,"REJ CODE LST")=PSOTC
"RTN","PSOTRI",121,0)
 I $G(PSOREJ(RXCOB,"REJ CODE LST"))]"" D
"RTN","PSOTRI",122,0)
 . S PSOX="",PSOY=1 F I=1:1 S PSOX=$O(PSOREJ(RXCOB,"REJ CODES",I,0)) Q:PSOX=""  D
"RTN","PSOTRI",123,0)
 . . S PSOY=PSOY+1,PSOIENS=PSOY_","_PSOIEN
"RTN","PSOTRI",124,0)
 . . S PSOFDA(SFN,"+"_PSOIENS,.01)=PSOX
"RTN","PSOTRI",125,0)
 ;
"RTN","PSOTRI",126,0)
 D UPDATE^DIE("","PSOFDA","","PSOERR")
"RTN","PSOTRI",127,0)
 I $D(PSOERR("DIERR")) D BMES^XPDUTL(PSOERR("DIERR",1,"TEXT",1))
"RTN","PSOTRI",128,0)
 Q
"UP",52,52.25,-1)
52^REJ
"UP",52,52.25,0)
52.25
"VER")
8.0^22.0
"^DD",52,52.25,33,0)
INSURANCE COMPANY^NJ12,0^^2;9^K:+X'=X!(X>999999999999)!(X<1)!(X?.E1"."1.N) X
"^DD",52,52.25,33,3)
Type a number between 1 and 999999999999, 0 decimal digits.
"^DD",52,52.25,33,21,0)
^^3^3^3140915^
"^DD",52,52.25,33,21,1,0)
This is the IEN of the INSURANCE COMPANY (#36) file.  It is a 'soft' 
"^DD",52,52.25,33,21,2,0)
pointer as Insurance companies may be deleted if there are no bills 
"^DD",52,52.25,33,21,3,0)
assigned to them.
"^DD",52,52.25,33,"DT")
3141209
"^DD",52.86,52.86,6,0)
EPHARMACY RESPONSE PAUSE^NJ1,0^^3;2^K:+X'=X!(X>3)!(X<0)!(X?.E1"."1.N) X
"^DD",52.86,52.86,6,3)
Type a number between 0 and 3, 0 decimal digits.
"^DD",52.86,52.86,6,21,0)
^^3^3^3141209^
"^DD",52.86,52.86,6,21,1,0)
This field contains the number of seconds the claim status message will 
"^DD",52.86,52.86,6,21,2,0)
be displayed on the screen after the transmission message. The number
"^DD",52.86,52.86,6,21,3,0)
of seconds to delay may be from 0 to 3 with the default of 2 seconds.
"^DD",52.86,52.86,6,"DT")
3141209
"^DD",52.87,52.87,12,0)
AUDIT TYPE^S^R:NCPDP REJECT;N:NON BILLABLE;I:INPATIENT;P:PARTIAL FILL;^1;2^Q
"^DD",52.87,52.87,12,3)
Choose the Audit Type associated with the audit event.
"^DD",52.87,52.87,12,21,0)
^.001^2^2^3150122^^^
"^DD",52.87,52.87,12,21,1,0)
This is the type of audit associated with a TRICARE/CHAMPVA Bypass or 
"^DD",52.87,52.87,12,21,2,0)
Override event. 
"^DD",52.87,52.87,12,"DT")
3150122
"^DD",52.87,52.87,17,0)
JUSTIFICATION^F^^2;1^K:$L(X)>250!($L(X)<1) X
"^DD",52.87,52.87,17,3)
Answer must be 1-250 characters in length.
"^DD",52.87,52.87,17,21,0)
^^7^7^3150127^
"^DD",52.87,52.87,17,21,1,0)
This is used to hold the free-text explanation why the TRICARE or CHAMPVA
"^DD",52.87,52.87,17,21,2,0)
prescription was bypassed or overridden. For partial fills, the reason is
"^DD",52.87,52.87,17,21,3,0)
hard-coded to [TRICARE or CHAMPVA] "Partial Fill". For 'Inpatient Meds
"^DD",52.87,52.87,17,21,4,0)
(Bypass)',the justification is hard-coded to [TRICARE or CHAMPVA]
"^DD",52.87,52.87,17,21,5,0)
"INPATIENT/DISCHARGE" or [TRICARE or CHAMPVA] "INPATIENT AUTO-REVERSAL".
"^DD",52.87,52.87,17,21,6,0)
Overrides (TRICARE/CHAMPVA rejects and TRICARE/CHAMPVA non-billables) come
"^DD",52.87,52.87,17,21,7,0)
from user entry.
"^DD",52.87,52.87,17,"DT")
3110801
**END**
**END**

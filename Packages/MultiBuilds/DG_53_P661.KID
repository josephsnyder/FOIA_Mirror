KIDS Distribution saved on Aug 23, 2010@14:03:16
FIX MT/CT INVALID LINKS
**KIDS**:DG*5.3*661^EAS*1.0*86^

**INSTALL NAME**
DG*5.3*661
"BLD",5499,0)
DG*5.3*661^REGISTRATION^0^3100823^y
"BLD",5499,4,0)
^9.64PA^^
"BLD",5499,6.3)
5
"BLD",5499,"ABPKG")
n
"BLD",5499,"INID")
^n
"BLD",5499,"INIT")
EN^DG53661P
"BLD",5499,"KRN",0)
^9.67PA^8989.52^19
"BLD",5499,"KRN",.4,0)
.4
"BLD",5499,"KRN",.401,0)
.401
"BLD",5499,"KRN",.402,0)
.402
"BLD",5499,"KRN",.403,0)
.403
"BLD",5499,"KRN",.5,0)
.5
"BLD",5499,"KRN",.84,0)
.84
"BLD",5499,"KRN",3.6,0)
3.6
"BLD",5499,"KRN",3.8,0)
3.8
"BLD",5499,"KRN",9.2,0)
9.2
"BLD",5499,"KRN",9.8,0)
9.8
"BLD",5499,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",5499,"KRN",9.8,"NM",1,0)
DGMTA^^0^B41969113
"BLD",5499,"KRN",9.8,"NM",2,0)
DG53661P^^0^B19780943
"BLD",5499,"KRN",9.8,"NM","B","DG53661P",2)

"BLD",5499,"KRN",9.8,"NM","B","DGMTA",1)

"BLD",5499,"KRN",19,0)
19
"BLD",5499,"KRN",19.1,0)
19.1
"BLD",5499,"KRN",101,0)
101
"BLD",5499,"KRN",409.61,0)
409.61
"BLD",5499,"KRN",771,0)
771
"BLD",5499,"KRN",870,0)
870
"BLD",5499,"KRN",8989.51,0)
8989.51
"BLD",5499,"KRN",8989.52,0)
8989.52
"BLD",5499,"KRN",8994,0)
8994
"BLD",5499,"KRN","B",.4,.4)

"BLD",5499,"KRN","B",.401,.401)

"BLD",5499,"KRN","B",.402,.402)

"BLD",5499,"KRN","B",.403,.403)

"BLD",5499,"KRN","B",.5,.5)

"BLD",5499,"KRN","B",.84,.84)

"BLD",5499,"KRN","B",3.6,3.6)

"BLD",5499,"KRN","B",3.8,3.8)

"BLD",5499,"KRN","B",9.2,9.2)

"BLD",5499,"KRN","B",9.8,9.8)

"BLD",5499,"KRN","B",19,19)

"BLD",5499,"KRN","B",19.1,19.1)

"BLD",5499,"KRN","B",101,101)

"BLD",5499,"KRN","B",409.61,409.61)

"BLD",5499,"KRN","B",771,771)

"BLD",5499,"KRN","B",870,870)

"BLD",5499,"KRN","B",8989.51,8989.51)

"BLD",5499,"KRN","B",8989.52,8989.52)

"BLD",5499,"KRN","B",8994,8994)

"BLD",5499,"QUES",0)
^9.62^^
"BLD",5499,"REQB",0)
^9.611^1^1
"BLD",5499,"REQB",1,0)
DG*5.3*688^2
"BLD",5499,"REQB","B","DG*5.3*688",1)

"INIT")
EN^DG53661P
"MBREQ")
0
"PKG",5,-1)
1^1
"PKG",5,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",5,20,0)
^9.402P^^
"PKG",5,22,0)
^9.49I^1^1
"PKG",5,22,1,0)
5.3^2930813
"PKG",5,22,1,"PAH",1,0)
661^3100823^123456800
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","DG53661P")
0^2^B19780943
"RTN","DG53661P",1,0)
DG53661P ; ALB/TK,LBD - DG*5.3*661 POST INSTALL CONVERSION ROUTINE ; 5/18/10 1:11pm
"RTN","DG53661P",2,0)
 ;;5.3;Registration;**661**;Aug 13, 1993;Build 5
"RTN","DG53661P",3,0)
 ;
"RTN","DG53661P",4,0)
EN ; Entry point for post installation routine DG*5.3*661
"RTN","DG53661P",5,0)
 N NAMSPC,ZTDESC,ZTDTH,ZTRTN,ZTSK
"RTN","DG53661P",6,0)
 S NAMSPC=$$NAMSPC
"RTN","DG53661P",7,0)
 S ZTRTN="CTLINKS^DG53661P("""_NAMSPC_""")"
"RTN","DG53661P",8,0)
 S ZTDESC="DG*5.3*661 Cleanup Invalid MT/CT Links"
"RTN","DG53661P",9,0)
 S ZTIO="",ZTDTH=$$NOW^XLFDT
"RTN","DG53661P",10,0)
 D ^%ZTLOAD
"RTN","DG53661P",11,0)
 D BMES^XPDUTL("Cleanup Invalid MT/CT Links Process started - task #"_$G(ZTSK))
"RTN","DG53661P",12,0)
 Q
"RTN","DG53661P",13,0)
 ;
"RTN","DG53661P",14,0)
CTLINKS(NAMSPC) ; entry for clearing invalid Rx copay test links
"RTN","DG53661P",15,0)
 N CT,CT1,DA,DFN,DIE,DR,IVM,IVMCT,IVMNOW,X,Y,Z
"RTN","DG53661P",16,0)
 I '$D(^XTMP(NAMSPC)) D
"RTN","DG53661P",17,0)
 . S ^XTMP(NAMSPC,0)=$$FMADD^XLFDT(DT,180)_U_DT_U_"CLEAN UP INVALID MEANS TEST/COPAY TEST LINKS",^XTMP(NAMSPC,"PARAMS")=""
"RTN","DG53661P",18,0)
 S Z=$G(^XTMP(NAMSPC,"PARAMS"))
"RTN","DG53661P",19,0)
 I $P(Z,U,4)="RUNNING" D  Q
"RTN","DG53661P",20,0)
 . S ^XTMP(NAMSPC,"RUNNING",$$NOW^XLFDT)="UPDATE ALREADY RUNNING"
"RTN","DG53661P",21,0)
 . D BULL(NAMSPC,,,,"RUNNING")
"RTN","DG53661P",22,0)
 I $P(Z,U,4)="DONE" D  Q
"RTN","DG53661P",23,0)
 . S ^XTMP(NAMSPC,"RUNNING",$$NOW^XLFDT)="UPDATE ALREADY COMPLETE"
"RTN","DG53661P",24,0)
 . D BULL(NAMSPC,,,,"DONE")
"RTN","DG53661P",25,0)
 S $P(^XTMP(NAMSPC,"PARAMS"),U,4)="RUNNING"
"RTN","DG53661P",26,0)
 S IVMNOW=$$NOW^XLFDT,^XTMP(NAMSPC,"RUNNING",IVMNOW)="",^XTMP(NAMSPC,"RUNNING",IVMNOW,+$G(ZTSK))=""
"RTN","DG53661P",27,0)
 S CT=+Z,IVM=+$P(Z,U,2),CT1=+$P(Z,U,3)
"RTN","DG53661P",28,0)
 F  S IVM=$O(^DGMT(408.31,IVM)) Q:'IVM  D
"RTN","DG53661P",29,0)
 . S IVMCT=$P($G(^DGMT(408.31,IVM,2)),U,6) Q:$$STOP(CT1)  S CT1=CT1+1,$P(^XTMP(NAMSPC,"PARAMS"),U,2,3)=IVM_U_CT1
"RTN","DG53661P",30,0)
 . S DFN=+$P($G(^DGMT(408.31,IVM,0)),U,2)
"RTN","DG53661P",31,0)
 . I IVMCT D  ; Check for copay test for same income year as means test
"RTN","DG53661P",32,0)
 .. ; OK if years match
"RTN","DG53661P",33,0)
 .. I $$YR(IVM)=$$YR(IVMCT) Q
"RTN","DG53661P",34,0)
 .. ; Delete link to income test in a different income year
"RTN","DG53661P",35,0)
 .. S DA=IVM,DIE="^DGMT(408.31,",DR="2.06///@"
"RTN","DG53661P",36,0)
 .. D ^DIE
"RTN","DG53661P",37,0)
 .. S CT=CT+1,$P(^XTMP(NAMSPC,"PARAMS"),U,1)=CT
"RTN","DG53661P",38,0)
 .. S ^XTMP(NAMSPC,"LINK_DELETED",IVM,IVMCT)=""
"RTN","DG53661P",39,0)
 S $P(^XTMP(NAMSPC,"PARAMS"),U,4)=$S('$G(ZTSTOP):"DONE",1:"STOPPED"),^XTMP(NAMSPC,"RUNNING",IVMNOW)=$$NOW^XLFDT
"RTN","DG53661P",40,0)
 D BULL(NAMSPC,CT,CT1,IVMNOW,'$G(ZTSTOP))
"RTN","DG53661P",41,0)
 Q
"RTN","DG53661P",42,0)
 ;
"RTN","DG53661P",43,0)
BULL(NAMSPC,CHANGED,READ,WHEN,DONE) ; Send bulletin
"RTN","DG53661P",44,0)
 N LN,TMP,XMDUZ,XMSUB,XMTEXT,XMY
"RTN","DG53661P",45,0)
 S XMY(DUZ)="",XMY("G.DGEN ELIGIBILITY ALERT")="",XMDUZ=.5,XMTEXT="TMP("""_NAMSPC_""","
"RTN","DG53661P",46,0)
 ; Set up copay test 'links' deleted bulletin
"RTN","DG53661P",47,0)
 S XMSUB=NAMSPC_": COPAY TEST LINK CLEANUP - SUMMARY REPORT"
"RTN","DG53661P",48,0)
 S LN=1
"RTN","DG53661P",49,0)
 S TMP(NAMSPC,LN)=""
"RTN","DG53661P",50,0)
 S LN=LN+1
"RTN","DG53661P",51,0)
 S TMP(NAMSPC,LN)="COPAY TEST INVALID LINK UPDATE RESULTS"
"RTN","DG53661P",52,0)
 S LN=LN+1
"RTN","DG53661P",53,0)
 S TMP(NAMSPC,LN)="--------------------------------------"
"RTN","DG53661P",54,0)
 S LN=LN+1
"RTN","DG53661P",55,0)
 S TMP(NAMSPC,LN)=""
"RTN","DG53661P",56,0)
 I DONE="RUNNING" D  Q
"RTN","DG53661P",57,0)
 . S LN=LN+1
"RTN","DG53661P",58,0)
 . S TMP(NAMSPC,LN)="Sorry, a copay test link clean up is already running."
"RTN","DG53661P",59,0)
 . S LN=LN+1
"RTN","DG53661P",60,0)
 . S TMP(NAMSPC,LN)=""
"RTN","DG53661P",61,0)
 . D ^XMD
"RTN","DG53661P",62,0)
 I DONE="DONE" D  Q
"RTN","DG53661P",63,0)
 . S LN=LN+1
"RTN","DG53661P",64,0)
 . S TMP(NAMSPC,LN)="Sorry, the copay test link clean up has already completed."
"RTN","DG53661P",65,0)
 . S LN=LN+1
"RTN","DG53661P",66,0)
 . S TMP(NAMSPC,LN)=""
"RTN","DG53661P",67,0)
 . D ^XMD
"RTN","DG53661P",68,0)
 S LN=LN+1
"RTN","DG53661P",69,0)
 S TMP(NAMSPC,LN)="The cleanup has "_$S(DONE:"run to completion",1:"finished a partial run")_".  Here are the results"_$S(DONE:"",1:" to date")_":"
"RTN","DG53661P",70,0)
 S LN=LN+1
"RTN","DG53661P",71,0)
 S TMP(NAMSPC,LN)=""
"RTN","DG53661P",72,0)
 S LN=LN+1
"RTN","DG53661P",73,0)
 S TMP(NAMSPC,LN)="  Start Date/Time: "_$$FMTE^XLFDT(WHEN)
"RTN","DG53661P",74,0)
 S LN=LN+1
"RTN","DG53661P",75,0)
 S TMP(NAMSPC,LN)="    End Date/Time: "_$$FMTE^XLFDT($G(^XTMP(NAMSPC,"RUNNING",WHEN)))
"RTN","DG53661P",76,0)
 S LN=LN+1
"RTN","DG53661P",77,0)
 S TMP(NAMSPC,LN)=""
"RTN","DG53661P",78,0)
 S LN=LN+1
"RTN","DG53661P",79,0)
 S TMP(NAMSPC,LN)="Current Counts: "
"RTN","DG53661P",80,0)
 S LN=LN+1
"RTN","DG53661P",81,0)
 S TMP(NAMSPC,LN)="  Total File #408.31 Records Processed: "_READ
"RTN","DG53661P",82,0)
 S LN=LN+1
"RTN","DG53661P",83,0)
 S TMP(NAMSPC,LN)="                 Total Links Corrected: "_CHANGED
"RTN","DG53661P",84,0)
 S LN=LN+1
"RTN","DG53661P",85,0)
 S TMP(NAMSPC,LN)=""
"RTN","DG53661P",86,0)
 S LN=LN+1
"RTN","DG53661P",87,0)
 S TMP(NAMSPC,LN)="Cleaned up records are referenced in ^XTMP("""_NAMSPC_""",""LINK_DELETED"" global"
"RTN","DG53661P",88,0)
 S LN=LN+1
"RTN","DG53661P",89,0)
 S TMP(NAMSPC,LN)=""
"RTN","DG53661P",90,0)
 D ^XMD
"RTN","DG53661P",91,0)
 Q
"RTN","DG53661P",92,0)
 ;
"RTN","DG53661P",93,0)
YR(IVM) ; Return year of the means test
"RTN","DG53661P",94,0)
 Q $E($P($G(^DGMT(408.31,+IVM,0)),U),1,3)
"RTN","DG53661P",95,0)
 ;
"RTN","DG53661P",96,0)
STOP(CT1) ; Check if asked to stop
"RTN","DG53661P",97,0)
 ; Only check if tasked and every 6000 records read
"RTN","DG53661P",98,0)
 Q:$S('$G(ZTSK):1,1:CT1#6000) 0
"RTN","DG53661P",99,0)
 N X
"RTN","DG53661P",100,0)
 S X=$$S^%ZTLOAD
"RTN","DG53661P",101,0)
 I X S ZTSTOP=1
"RTN","DG53661P",102,0)
 Q $G(ZTSTOP)
"RTN","DG53661P",103,0)
 ;
"RTN","DG53661P",104,0)
NAMSPC() ; 
"RTN","DG53661P",105,0)
 Q "DG53661"
"RTN","DG53661P",106,0)
 ;
"RTN","DG53661P",107,0)
CTSTART ; Restart copay test invalid link
"RTN","DG53661P",108,0)
 N NAMSPC,ZTDESC,ZTDTH,ZTRTN,ZTSK
"RTN","DG53661P",109,0)
 S NAMSPC=$$NAMSPC,$P(^XTMP(NAMSPC,"PARAMS"),U,4)=""
"RTN","DG53661P",110,0)
 S ZTRTN="CTLINKS^DG53661P("_NAMSPC_")"
"RTN","DG53661P",111,0)
 S ZTDESC="DG*5.3*661 Cleanup Invalid MT/CT Links Process Restart"
"RTN","DG53661P",112,0)
 S ZTIO="",ZTDTH=$$NOW^XLFDT
"RTN","DG53661P",113,0)
 D ^%ZTLOAD
"RTN","DG53661P",114,0)
 W !,"TASK # IS: ",$G(ZTSK)
"RTN","DG53661P",115,0)
 Q
"RTN","DG53661P",116,0)
 ;
"RTN","DGMTA")
0^1^B41969113
"RTN","DGMTA",1,0)
DGMTA ;ALB/RMO/CAW/LD/SCG/AEG/PHH - Add a New Means Test ; 2/24/10 2:58pm
"RTN","DGMTA",2,0)
 ;;5.3;Registration;**33,45,137,166,177,182,290,344,332,433,458,535,612,564,688,661**;Aug 13, 1993;Build 5
"RTN","DGMTA",3,0)
 ;
"RTN","DGMTA",4,0)
EN ;Entry point to add a new means test
"RTN","DGMTA",5,0)
 N DGMDOD S DGMDOD=""
"RTN","DGMTA",6,0)
 S DGADDF=1
"RTN","DGMTA",7,0)
 I $D(DGMTDFN)#2 D UNLOCK^DGMTUTL(DGMTDFN) K DGMTDFN
"RTN","DGMTA",8,0)
 S DIC="^DPT(",DIC(0)="AEMQ" W ! D ^DIC K DIC G Q:Y<0 S (DFN,DGMTDFN)=+Y
"RTN","DGMTA",9,0)
 I $P($G(^DPT(DFN,.35)),U)'="" S DGMDOD=$P(^DPT(DFN,.35),U)
"RTN","DGMTA",10,0)
 I $G(DGMDOD) W !,"Patient died on: ",$$FMTE^XLFDT(DGMDOD,"1D") Q
"RTN","DGMTA",11,0)
 ;
"RTN","DGMTA",12,0)
 ; check if income test in progress
"RTN","DGMTA",13,0)
 D CKUPLOAD^IVMCUPL(DFN)
"RTN","DGMTA",14,0)
 ;
"RTN","DGMTA",15,0)
 ; obtain lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",16,0)
 I $$LOCK^DGMTUTL(DFN)
"RTN","DGMTA",17,0)
 ;
"RTN","DGMTA",18,0)
 I DGMTYPT=1 N DGDOM1 D EN^DGMTR I 'DGREQF,'$G(DGDOM1) W !,*7,"A means test can only be added for patients who require one.",! K DGDOM1 G EN
"RTN","DGMTA",19,0)
 ;
"RTN","DGMTA",20,0)
 N FUTMT S FUTMT=$$FUT^DGMTU(DFN,"",DGMTYPT) I FUTMT D FTST G EN
"RTN","DGMTA",21,0)
 ;
"RTN","DGMTA",22,0)
 ;if a test was auto-completed, DGADDF gets set to 0
"RTN","DGMTA",23,0)
 I 'DGADDF W !!,*7,"A means test already exists and is in effect" G EN
"RTN","DGMTA",24,0)
 ;
"RTN","DGMTA",25,0)
 K:DGMTYPT=1 DGDOM1
"RTN","DGMTA",26,0)
 I DGMTYPT=2 D EN^DGMTCOR I 'DGMTCOR S I=$P($T(WHY+DGWRT),";",3,99) W !!,*7,"A copay exemption test can only be added for applicable veterans.",!,I G EN
"RTN","DGMTA",27,0)
 S DGLDT=$$LST^DGMTU(DFN,"",DGMTYPT),DGLD=$P(DGLDT,U,2),DGLDYR=$E(DGLD,1,3)_"1231"
"RTN","DGMTA",28,0)
 ;
"RTN","DGMTA",29,0)
DT S %DT("A")="DATE OF TEST: ",%DT="AEX",%DT(0)="-NOW",%DT("B")="NOW" W ! D ^%DT K %DT G Q:Y<0 S DGMTDT=Y
"RTN","DGMTA",30,0)
 I DGMTDT<$S(DGMTYPT=1:2860701,1:2921029) W !?3,*7,"The date of test cannot be before "_$S(DGMTYPT=1:"7/1/1986.",1:"10/29/1992.") G DT
"RTN","DGMTA",31,0)
 I DGLD,DGMTDT<DGLD W !?3,*7,"The date of test cannot be before the last date of test on " S Y=DGLD X ^DD("DD") W Y,"." G DT
"RTN","DGMTA",32,0)
 I DGLD S X1=DGMTDT,X2=DGLD D ^%DTC I X<365,DGMTDT'>DGLDYR D  G EN
"RTN","DGMTA",33,0)
 .W !?3,*7,"An annual date of test already exists on " S Y=DGLD X ^DD("DD") W Y,"."
"RTN","DGMTA",34,0)
 .S DGTTYP=$S(DGMTYPT=1:"Means ",1:"Copay Exemption ")
"RTN","DGMTA",35,0)
 .W !,$S($P($G(^DG(408.34,+$P($G(^DGMT(408.31,+DGLDT,0)),U,23),0)),U)="VAMC":"   Use the 'Edit an Existing "_DGTTYP_"Test' Option.",1:"   Use the 'View a Past Means Test' Option.")
"RTN","DGMTA",36,0)
 ;
"RTN","DGMTA",37,0)
 ;Means Test cannot be added for patient on a DOM ward on date of test
"RTN","DGMTA",38,0)
 I DGMTYPT=2 G PRINT
"RTN","DGMTA",39,0)
 N VAINDT,VADMVT,DGDOM,DGDOM1
"RTN","DGMTA",40,0)
 S VAINDT=DGMTDT
"RTN","DGMTA",41,0)
 D DOM1^DGMTR I $G(DGDOM1) D  K VAINDT,VADMVT,DGDOM,DGDOM1 G EN
"RTN","DGMTA",42,0)
 .W !,*7,"A Means Test cannot be added for patients on a DOM ward on date of test.",!
"RTN","DGMTA",43,0)
 K VAINDT,VADMVT,DGDOM,DGDOM1
"RTN","DGMTA",44,0)
 ;
"RTN","DGMTA",45,0)
 ;A warning message is displayed if last means test for patient is
"RTN","DGMTA",46,0)
 ;from a prior year and has a status of required.  The user is given
"RTN","DGMTA",47,0)
 ;the option to continue or stop adding a new means test.
"RTN","DGMTA",48,0)
 N %
"RTN","DGMTA",49,0)
 I DGLD,DGMTDT>DGLDYR,$P(DGLDT,"^",4)="R" D  Q:%=-1  I %=2 K % G EN
"RTN","DGMTA",50,0)
 .W !?3,*7,"WARNING - last means test on " S Y=DGLD X ^DD("DD") W Y," has a status of required."
"RTN","DGMTA",51,0)
DT2 .W !?3,"Do you still want to continue adding new test"
"RTN","DGMTA",52,0)
 .S %=2 D YN^DICN
"RTN","DGMTA",53,0)
 .I %=0 W !?3,"Answer 'Y'es to continue adding new test." G DT2
"RTN","DGMTA",54,0)
 .Q 
"RTN","DGMTA",55,0)
 K %
"RTN","DGMTA",56,0)
 ;
"RTN","DGMTA",57,0)
PRINT I "^P^A^C^G^"[(U_$P(DGLDT,U,4)_U) S %=1 W !,"Do you wish to print the prior means test" D YN^DICN G:%=-1 Q I %Y["?" W !!,"This will print the prior means test information.",! G PRINT
"RTN","DGMTA",58,0)
 I $G(%)=1 S DGX=DGMTDT,DGMTDT=DGLD,DGMTI=+DGLDT,DGOPT="" D DEV^DGMTP,CLOSE^DGUTQ S DGMTDT=DGX K DGX
"RTN","DGMTA",59,0)
 D ADD G EN:DGMTI<0
"RTN","DGMTA",60,0)
 S DGMTACT="ADD",DGMTROU="EN^DGMTA" G EN^DGMTSC
"RTN","DGMTA",61,0)
 ;
"RTN","DGMTA",62,0)
Q K DA,DFN,DGADDF,DGBL,DGFL,DGFLD,DGIRO,DGLD,DGLDT,DGLDYR,DGMTACT,DGMTCOR,DGMTDT,DGMTI,DGMTROU,DGREQF,DGTTYP,DGMTYPT,DGVI,DGVO,X,X1,X2,Y
"RTN","DGMTA",63,0)
 ;
"RTN","DGMTA",64,0)
 ; release lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",65,0)
 I $D(DGMTDFN)#2 D UNLOCK^DGMTUTL(DGMTDFN) K DGMTDFN
"RTN","DGMTA",66,0)
 Q
"RTN","DGMTA",67,0)
 ;
"RTN","DGMTA",68,0)
ADD ;Add means test
"RTN","DGMTA",69,0)
 ; Input  -- DFN     Patient IEN
"RTN","DGMTA",70,0)
 ;           DGMTDT  Date
"RTN","DGMTA",71,0)
 ;           DGMTYPT Type of Test 1=MT 2=COPAY 4=LTC
"RTN","DGMTA",72,0)
 ; Output -- DGMTI   Annual Means/Copay/LTC Test IEN
"RTN","DGMTA",73,0)
 N DA,DD,DIC,DIK,DINUM,DLAYGO,DO,DS,X,D0,DGSITE,CONVRT,CURIEN,LINK,DGLNKMT
"RTN","DGMTA",74,0)
 ;
"RTN","DGMTA",75,0)
 ; obtain lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",76,0)
 I $$LOCK^DGMTUTL(DFN) E  Q
"RTN","DGMTA",77,0)
 ;
"RTN","DGMTA",78,0)
 ; Check for Linked test and don't lose the link.
"RTN","DGMTA",79,0)
 S LINK="",DGLNKMT=$$LST^DGMTU(DFN,DGMTDT,DGMTYPT),CURIEN=+DGLNKMT
"RTN","DGMTA",80,0)
 I CURIEN D
"RTN","DGMTA",81,0)
 . ;Don't link test if it's in a different year (DG*5.3*661)
"RTN","DGMTA",82,0)
 . I $E($P(DGLNKMT,U,2),1,3)'=$E(DGMTDT,1,3) Q
"RTN","DGMTA",83,0)
 . S LINK=$P($G(^DGMT(408.31,CURIEN,2)),U,6)
"RTN","DGMTA",84,0)
 ;
"RTN","DGMTA",85,0)
 S DGSITE=$$GETSITE^DGMTU4(.DUZ)
"RTN","DGMTA",86,0)
 S X=DGMTDT,(DIC,DIK)="^DGMT(408.31,",DIC(0)="L",DLAYGO=408.31
"RTN","DGMTA",87,0)
 ;
"RTN","DGMTA",88,0)
 ;Look for existing IAI records and convert (if necessary)
"RTN","DGMTA",89,0)
 D ALL^DGMTU21(DFN,"VSD",DT,"IPR") ;ALL only returns IAI from last IY
"RTN","DGMTA",90,0)
 I $D(DGINC) DO
"RTN","DGMTA",91,0)
 . D ISCNVRT^DGMTUTL(.DGINC)
"RTN","DGMTA",92,0)
 ;
"RTN","DGMTA",93,0)
 ; The DIC("DR") string is built in this specific order so that
"RTN","DGMTA",94,0)
 ; all triggers and "M" x-refs fire correctly.  Should not be
"RTN","DGMTA",95,0)
 ; modified without an in-depth review of DD of file #408.31.
"RTN","DGMTA",96,0)
 ;
"RTN","DGMTA",97,0)
 I DGMTYPT=2 D
"RTN","DGMTA",98,0)
 .S DIC("DR")="2////"_(DGMTYPT'=4)_";2.05////"_DGSITE_";2.06////"_LINK
"RTN","DGMTA",99,0)
 .S DIC("DR")=DIC("DR")_";.02////"_DFN_";.019////"_DGMTYPT_";.23////1"
"RTN","DGMTA",100,0)
 E  D
"RTN","DGMTA",101,0)
 .S DIC("DR")="2////"_(DGMTYPT'=4)_";2.05////"_DGSITE_";2.06////"_LINK
"RTN","DGMTA",102,0)
 .S DIC("DR")=DIC("DR")_";.019////"_DGMTYPT_";.02////"_DFN_";.23////1"
"RTN","DGMTA",103,0)
 K DD,DO
"RTN","DGMTA",104,0)
 D FILE^DICN S DGMTI=+Y
"RTN","DGMTA",105,0)
 ;
"RTN","DGMTA",106,0)
 ; Check for another test in the current year and convert IAI records if needed
"RTN","DGMTA",107,0)
 ; Send new test date (as test that have) into VRCHKUP
"RTN","DGMTA",108,0)
 I $D(TYPE),((+TYPE=1)!(TYPE=4)) S CONVRT=$$VRCHKUP^DGMTU2(DGMTYPT,TYPE,DGMTDT)
"RTN","DGMTA",109,0)
 I $D(TYPE),((+TYPE'=1)&(TYPE'=4)) S CONVRT=$$VRCHKUP^DGMTU2(DGMTYPT,,DGMTDT)
"RTN","DGMTA",110,0)
 I '$D(TYPE) S CONVRT=$$VRCHKUP^DGMTU2(DGMTYPT,,DGMTDT)
"RTN","DGMTA",111,0)
 N DGERR,DGMTRT
"RTN","DGMTA",112,0)
 S DGMTRT(408.31,DGMTI_",",2.11)=1
"RTN","DGMTA",113,0)
 S DGERR=""
"RTN","DGMTA",114,0)
 D FILE^DIE("","DGMTRT",DGERR)
"RTN","DGMTA",115,0)
 ; release lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",116,0)
 D UNLOCK^DGMTUTL(DFN)
"RTN","DGMTA",117,0)
 ;
"RTN","DGMTA",118,0)
ADDQ Q
"RTN","DGMTA",119,0)
 ;
"RTN","DGMTA",120,0)
FTST ; Build message for future tests that are added to the system, but
"RTN","DGMTA",121,0)
 ; were not performed by the VAMC trying to add a new MT.
"RTN","DGMTA",122,0)
 N SITE,DGMTYPT,DGTTYP,SRC,SCT
"RTN","DGMTA",123,0)
 S SCT=$P(^DGMT(408.31,+FUTMT,2),U,5),SITE=$$INST^DGENU()
"RTN","DGMTA",124,0)
 S DGMTYPT=$P(^DGMT(408.31,+FUTMT,0),U,19)
"RTN","DGMTA",125,0)
 S DGTTYP=$S(DGMTYPT=1:"Means ",1:"Copay Exemption ")
"RTN","DGMTA",126,0)
 W !?3,*7,"A future test already exists on "
"RTN","DGMTA",127,0)
 S Y=$P(FUTMT,U,2) X ^DD("DD") W Y,"."
"RTN","DGMTA",128,0)
 ; This site performed the MT
"RTN","DGMTA",129,0)
 I SITE=SCT D
"RTN","DGMTA",130,0)
 .W !?3,"Use the 'Edit an Existing "_DGTTYP_"Test' Option."
"RTN","DGMTA",131,0)
 ;
"RTN","DGMTA",132,0)
 ; The MT was added by another VAMC
"RTN","DGMTA",133,0)
 I SITE'=SCT D
"RTN","DGMTA",134,0)
 .S SRC=$P(FUTMT,U,5)
"RTN","DGMTA",135,0)
 .I SCT W !?3,"The "_DGTTYP_"Test was conducted at Site: ",SCT
"RTN","DGMTA",136,0)
 .W !?3,"Please contact "
"RTN","DGMTA",137,0)
 .W $S($D(^DIC(4,+SCT,0)):$P(^DIC(4,+SCT,0),U),SRC=2:"IVM",SRC=3:"the HEC",1:"the site")
"RTN","DGMTA",138,0)
 .W ",",!?3,"if it is necessary to edit the test."
"RTN","DGMTA",139,0)
 Q
"RTN","DGMTA",140,0)
WHY ;Why Copay Test cannot be added
"RTN","DGMTA",141,0)
 ;;Patient is not a veteran.
"RTN","DGMTA",142,0)
 ;;Patient does not have a Primary Eligibility Code.
"RTN","DGMTA",143,0)
 ;;Patient is Service Connected 50-100%.
"RTN","DGMTA",144,0)
 ;;Means Test options must be used instead of Copay options.
"RTN","DGMTA",145,0)
 ;;Patient is receiving Aid and Attendance, automatically exempted.
"RTN","DGMTA",146,0)
 ;;Patient is receiving Housebound Benefits, automatically exempted.
"RTN","DGMTA",147,0)
 ;;Patient is receiving a VA Pension, automatically exempted.
"RTN","DGMTA",148,0)
 ;;Patient is in a DOM ward, automatically exempted.
"RTN","DGMTA",149,0)
 ;;Patient is an inpatient, automatically exempted.
"RTN","DGMTA",150,0)
 ;;Patient was a POW, automatically exempted.
"RTN","DGMTA",151,0)
 ;;Patient is Unemployable, automatically exempted.
"VER")
8.0^22.0
**INSTALL NAME**
EAS*1.0*86
"BLD",7491,0)
EAS*1.0*86^ENROLLMENT APPLICATION SYSTEM^0^3100823^y
"BLD",7491,1,0)
^^1^1^3100316^^^
"BLD",7491,1,1,0)
 
"BLD",7491,4,0)
^9.64PA^^
"BLD",7491,6.3)
4
"BLD",7491,"ABPKG")
n
"BLD",7491,"INIT")

"BLD",7491,"KRN",0)
^9.67PA^779.2^20
"BLD",7491,"KRN",.4,0)
.4
"BLD",7491,"KRN",.4,"NM",0)
^9.68A^^
"BLD",7491,"KRN",.401,0)
.401
"BLD",7491,"KRN",.402,0)
.402
"BLD",7491,"KRN",.403,0)
.403
"BLD",7491,"KRN",.5,0)
.5
"BLD",7491,"KRN",.84,0)
.84
"BLD",7491,"KRN",3.6,0)
3.6
"BLD",7491,"KRN",3.8,0)
3.8
"BLD",7491,"KRN",9.2,0)
9.2
"BLD",7491,"KRN",9.8,0)
9.8
"BLD",7491,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",7491,"KRN",9.8,"NM",1,0)
EASUM1^^0^B29901786
"BLD",7491,"KRN",9.8,"NM",2,0)
EASPREC7^^0^B65699293
"BLD",7491,"KRN",9.8,"NM","B","EASPREC7",2)

"BLD",7491,"KRN",9.8,"NM","B","EASUM1",1)

"BLD",7491,"KRN",19,0)
19
"BLD",7491,"KRN",19.1,0)
19.1
"BLD",7491,"KRN",101,0)
101
"BLD",7491,"KRN",409.61,0)
409.61
"BLD",7491,"KRN",771,0)
771
"BLD",7491,"KRN",779.2,0)
779.2
"BLD",7491,"KRN",870,0)
870
"BLD",7491,"KRN",8989.51,0)
8989.51
"BLD",7491,"KRN",8989.52,0)
8989.52
"BLD",7491,"KRN",8994,0)
8994
"BLD",7491,"KRN","B",.4,.4)

"BLD",7491,"KRN","B",.401,.401)

"BLD",7491,"KRN","B",.402,.402)

"BLD",7491,"KRN","B",.403,.403)

"BLD",7491,"KRN","B",.5,.5)

"BLD",7491,"KRN","B",.84,.84)

"BLD",7491,"KRN","B",3.6,3.6)

"BLD",7491,"KRN","B",3.8,3.8)

"BLD",7491,"KRN","B",9.2,9.2)

"BLD",7491,"KRN","B",9.8,9.8)

"BLD",7491,"KRN","B",19,19)

"BLD",7491,"KRN","B",19.1,19.1)

"BLD",7491,"KRN","B",101,101)

"BLD",7491,"KRN","B",409.61,409.61)

"BLD",7491,"KRN","B",771,771)

"BLD",7491,"KRN","B",779.2,779.2)

"BLD",7491,"KRN","B",870,870)

"BLD",7491,"KRN","B",8989.51,8989.51)

"BLD",7491,"KRN","B",8989.52,8989.52)

"BLD",7491,"KRN","B",8994,8994)

"BLD",7491,"QUES",0)
^9.62^^
"BLD",7491,"REQB",0)
^9.611^1^1
"BLD",7491,"REQB",1,0)
EAS*1.0*42^2
"BLD",7491,"REQB","B","EAS*1.0*42",1)

"MBREQ")
0
"PKG",552,-1)
1^1
"PKG",552,0)
ENROLLMENT APPLICATION SYSTEM^EAS^ENROLLMENT
"PKG",552,20,0)
^9.402P^1^1
"PKG",552,20,1,0)
2^^EASXDR
"PKG",552,20,1,1)
 
"PKG",552,20,"B",2,1)

"PKG",552,22,0)
^9.49I^1^1
"PKG",552,22,1,0)
1.0^3010315^3010410^66481
"PKG",552,22,1,"PAH",1,0)
86^3100823^123456800
"PKG",552,22,1,"PAH",1,1,0)
^^1^1^3100823
"PKG",552,22,1,"PAH",1,1,1,0)
 
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","EASPREC7")
0^2^B65699293
"RTN","EASPREC7",1,0)
EASPREC7 ;ALB/SEK,RTK,GN - ROUTINE TO PROCESS INCOMING (Z06 EVENT TYPE) HL7 MESSAGES ; 6/16/04 9:28am
"RTN","EASPREC7",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**23,30,35,52,42,86**;21-OCT-94;Build 4
"RTN","EASPREC7",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","EASPREC7",4,0)
 ;
"RTN","EASPREC7",5,0)
 ;** Warning **  currently only one ZMT seg per Z06 can be processed.
"RTN","EASPREC7",6,0)
 ;
"RTN","EASPREC7",7,0)
 ;EAS*1*52 call PARSEZMT within tag ZMT to define all ZMT variables
"RTN","EASPREC7",8,0)
 ;EAS*1*42 add RX Copay Testing Upload and Delete to this routine.
"RTN","EASPREC7",9,0)
 ;         - added DGMTYPT and passed down thru all calls that need.
"RTN","EASPREC7",10,0)
 ;         o DGMTYPT = 1 (Means Test, MT)
"RTN","EASPREC7",11,0)
 ;         o DGMTYPT = 2 (RX Copay Test, CT)
"RTN","EASPREC7",12,0)
 ;
"RTN","EASPREC7",13,0)
 ; This routine will process (validate) batch ORU Means Test(event type
"RTN","EASPREC7",14,0)
 ; Z06) HL7 messages received from the IVM center.  Format of batch:
"RTN","EASPREC7",15,0)
 ;       BHS
"RTN","EASPREC7",16,0)
 ;       {MSH
"RTN","EASPREC7",17,0)
 ;        PID
"RTN","EASPREC7",18,0)
 ;        ZIC
"RTN","EASPREC7",19,0)
 ;        ZIR
"RTN","EASPREC7",20,0)
 ;        {ZDP
"RTN","EASPREC7",21,0)
 ;         ZIC
"RTN","EASPREC7",22,0)
 ;         ZIR
"RTN","EASPREC7",23,0)
 ;        }
"RTN","EASPREC7",24,0)
 ;        ZMT
"RTN","EASPREC7",25,0)
 ;        ZIV
"RTN","EASPREC7",26,0)
 ;       }
"RTN","EASPREC7",27,0)
 ;       BTS
"RTN","EASPREC7",28,0)
 ;
"RTN","EASPREC7",29,0)
EN ; entry point to validate Means Test messages 
"RTN","EASPREC7",30,0)
 ;
"RTN","EASPREC7",31,0)
 N DEPFLG,EDB,CANCFLG,CASEFLG,SEGSTR,SEGMENTS,MISSING,ERRFLG,Z06COM
"RTN","EASPREC7",32,0)
 N IVM2,IVM3,IVM7,IVM8,IVM10,IVM12,IVM17,IVM18,IVM20,IVM25,IVM26,IVMIY
"RTN","EASPREC7",33,0)
 N IVMDA,IVMPAT,IVMMTSTS,MTFND,UPMTS,MTDATE,TYPE,EASMTDT,EASZ06,EXPIRED
"RTN","EASPREC7",34,0)
 N IVM5,EASZ06D,DGMTYPT
"RTN","EASPREC7",35,0)
 S SEGSTR="00000000000"      ;One byte for each segment in message
"RTN","EASPREC7",36,0)
 S SEGMENTS="BHS,MSH,PID,ZIC,ZIR,ZDP,ZIC,ZIR,ZMT,ZIV,BTS"
"RTN","EASPREC7",37,0)
 S EDB="EDB-EAS"
"RTN","EASPREC7",38,0)
 S Z06COM="Z06 MT via Edb"
"RTN","EASPREC7",39,0)
 S (CASEFLG,DEPFLG,ERRFLG,HLERR,IVMDA,IVMFLGC,MTFND,UPMTS)=0
"RTN","EASPREC7",40,0)
EN1 F  S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)) Q:'IVMDA  D  I $D(HLERR) D ACK^IVMPREC S ERRFLG=1 Q 
"RTN","EASPREC7",41,0)
 .K HLERR
"RTN","EASPREC7",42,0)
 .D GET
"RTN","EASPREC7",43,0)
 .D @IVMSEG1                            ;process each segment type
"RTN","EASPREC7",44,0)
 Q:ERRFLG                               ;Error detected do not continue
"RTN","EASPREC7",45,0)
 S MISSING=$F(SEGSTR,0)                 ;Ensure all required segments
"RTN","EASPREC7",46,0)
 I MISSING D  I $D(HLERR) D ACK^IVMPREC,CLEANUP Q
"RTN","EASPREC7",47,0)
 . S TYPE=$S(MISSING=3!(MISSING=4):"Veteran's",MISSING>4&(MISSING<8):"Spouse's",1:"")
"RTN","EASPREC7",48,0)
 . S HLERR="Missing "_TYPE_" "_$P(SEGMENTS,",",(MISSING-1))_" Segment"
"RTN","EASPREC7",49,0)
 D PROCESS
"RTN","EASPREC7",50,0)
 I $D(HLERR) D ACK^IVMPREC
"RTN","EASPREC7",51,0)
 ;
"RTN","EASPREC7",52,0)
 ; cleanup
"RTN","EASPREC7",53,0)
CLEANUP K DGLY,DGMTP,IVMDAP,IVMDAS,IVMDAZ,IVMDGLY,CANCFLG,IVMFLGC,IVMMT31
"RTN","EASPREC7",54,0)
 K IVMMTDT,IVMMTIEN,IVMSEG,IVMSEG1,IVMSTAT,IVMTEXT,XMSUB,HLERR,CLOSFLG
"RTN","EASPREC7",55,0)
 K IVMZ10,IVMDAV,ZIVSEG,ZMTSEG
"RTN","EASPREC7",56,0)
 Q
"RTN","EASPREC7",57,0)
 ;
"RTN","EASPREC7",58,0)
 ;Dependent upon type of Z06 sent perform the following;
"RTN","EASPREC7",59,0)
 ;IVM Case Status:
"RTN","EASPREC7",60,0)
 ;  Value of 1 = Create/Update Z06 MT/CT, Close Case & Mark REASON CODE
"RTN","EASPREC7",61,0)
 ;               as 'Converted'
"RTN","EASPREC7",62,0)
 ;  Value of 0 = Cancel Z06 MT/CT and Mark REASON CODE as 'Not Convert'
"RTN","EASPREC7",63,0)
 ;
"RTN","EASPREC7",64,0)
 ; If Z06 MT/CT and IVM Case Status is 1 and Z06 MT/CT doesn't exist then
"RTN","EASPREC7",65,0)
 ;   Create new Z06 MT/CT (new Z06 MT/CT becomes primary and existing
"RTN","EASPREC7",66,0)
 ;     MT/CT becomes non-primary)
"RTN","EASPREC7",67,0)
 ;   Assign REASON CODE of 'Converted' in #301.5
"RTN","EASPREC7",68,0)
 ; If Z06 MT/CT already exists then
"RTN","EASPREC7",69,0)
 ;   If IVM Case Status is 0 Then
"RTN","EASPREC7",70,0)
 ;     Delete Z06 MT/CT for income year and return old MT/CT to primary
"RTN","EASPREC7",71,0)
 ;    Change REASON CODE from 'Converted' to 'Not Converted' in #301.5
"RTN","EASPREC7",72,0)
 ;   If IVM Case Status is 1 Then
"RTN","EASPREC7",73,0)
 ;     Update MT/CT Z06 and Close/Convert Case
"RTN","EASPREC7",74,0)
 ; Else  (Z06 MT/CT, IVM Case Status=0 and Z06 MT/CT does not exist)
"RTN","EASPREC7",75,0)
 ;   Send back 'AE' to Edb indicating MT/CT Z06 not available for 
"RTN","EASPREC7",76,0)
 ;   cancellation
"RTN","EASPREC7",77,0)
 ;
"RTN","EASPREC7",78,0)
PROCESS N DIC,%,%H,%I,IVMDATE
"RTN","EASPREC7",79,0)
 D NOW^%DTC
"RTN","EASPREC7",80,0)
 S IVMDATE=%
"RTN","EASPREC7",81,0)
 I '$D(ZMTSEG) S HLERR="ZMT Segment is Missing" Q
"RTN","EASPREC7",82,0)
 S EASZ06=1,EXPIRED=0
"RTN","EASPREC7",83,0)
 S:DGMTYPT=2 IVMCEB=$P($$RXST^IBARXEU(DFN),"^",2)    ;prev RX sts
"RTN","EASPREC7",84,0)
 I $G(IVMMTIEN)="" D  ; Find any primary for the same year/test type
"RTN","EASPREC7",85,0)
 . S CURMT=$$LST^DGMTU(DFN,IVMMTDT,DGMTYPT)
"RTN","EASPREC7",86,0)
 . I $E($P(CURMT,U,2),1,3)'=$E(IVMMTDT,1,3) Q  ;TMK
"RTN","EASPREC7",87,0)
 . S IVMMTIEN=$P(CURMT,"^",1)
"RTN","EASPREC7",88,0)
 . S IVMMTDT=$P(CURMT,"^",2)
"RTN","EASPREC7",89,0)
 . S IVMMTSTS=$P(CURMT,"^",3)
"RTN","EASPREC7",90,0)
 I $G(IVMMTIEN)]"" D                   ;dgmtp is event driver variable
"RTN","EASPREC7",91,0)
 . S (IVMMT31,DGMTP)=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","EASPREC7",92,0)
 ;
"RTN","EASPREC7",93,0)
 ; Main loop to process the IVM income test just received.
"RTN","EASPREC7",94,0)
 ;
"RTN","EASPREC7",95,0)
 ; No previous 408.31 test on file
"RTN","EASPREC7",96,0)
 I 'MTFND D  Q
"RTN","EASPREC7",97,0)
 . I CASEFLG D                                ;Case=1 Close/Converted
"RTN","EASPREC7",98,0)
 . . ;change old MT/CT to non-primary
"RTN","EASPREC7",99,0)
 . . I $G(IVMMTIEN)>0 D
"RTN","EASPREC7",100,0)
 . . . S DA=IVMMTIEN,DIE="^DGMT(408.31,",DR="2////0;"
"RTN","EASPREC7",101,0)
 . . . D ^DIE K DA,DIE,DR
"RTN","EASPREC7",102,0)
 . . ;
"RTN","EASPREC7",103,0)
 . . S IVMMTDT=EASMTDT
"RTN","EASPREC7",104,0)
 . . D ^EASUM1                                ;Create New Z06 MT/CT
"RTN","EASPREC7",105,0)
 . . I $G(IVMMTDT)="" S IVMMTDT=EASMTDT
"RTN","EASPREC7",106,0)
 . . I $$EXPIRED^EASPTRN1(DFN,$G(IVMMTDT)) D
"RTN","EASPREC7",107,0)
 . . . S EXPIRED=1,IVMZ10="UPLOAD IN PROGRESS"
"RTN","EASPREC7",108,0)
 . . D CLOSE^EASPTRN1(IVMIY,DFN,1,6)          ;Close Case/Converted
"RTN","EASPREC7",109,0)
 . ;
"RTN","EASPREC7",110,0)
 . I 'CASEFLG D  Q
"RTN","EASPREC7",111,0)
 . . S:DGMTYPT=1 HLERR="Existing Z06 MT not found"
"RTN","EASPREC7",112,0)
 . . S:DGMTYPT=2 HLERR="Existing Z06 CT not found"
"RTN","EASPREC7",113,0)
 ;
"RTN","EASPREC7",114,0)
 ; Previous 408.31 test on file
"RTN","EASPREC7",115,0)
 I MTFND D
"RTN","EASPREC7",116,0)
 . I 'CASEFLG D                             ;Case=0 Close/Not Convert
"RTN","EASPREC7",117,0)
 . . ; Check to see if MT/CT Z06 exists prior to trying to delete
"RTN","EASPREC7",118,0)
 . . ; If NOT defined then send an AE back to Edb
"RTN","EASPREC7",119,0)
 . . I 'UPMTS D  Q                          ;Existing Z06 not found
"RTN","EASPREC7",120,0)
 . . . S:DGMTYPT=1 HLERR="Existing Z06 MT not found"
"RTN","EASPREC7",121,0)
 . . . S:DGMTYPT=2 HLERR="Existing Z06 CT not found"
"RTN","EASPREC7",122,0)
 . . I UPMTS D  Q
"RTN","EASPREC7",123,0)
 . . . N CURMT,IVMMTI,IVMDFN,DGCAT
"RTN","EASPREC7",124,0)
 . . . S IVMDFN=DFN                         ;Save off DFN
"RTN","EASPREC7",125,0)
 . . . I $$EXPIRED^EASPTRN1(DFN,$G(IVMMTDT)) D
"RTN","EASPREC7",126,0)
 . . . . S EXPIRED=1,IVMZ10="UPLOAD IN PROGRESS"
"RTN","EASPREC7",127,0)
 . . . S DGCAT=$P($G(^DG(408.32,IVM3,0)),"^",1),IVM5=""
"RTN","EASPREC7",128,0)
 . . . S EASZ06D=1                          ;Set del flag for IB event
"RTN","EASPREC7",129,0)
 . . . D ^EASUM7                            ;Delete Z06 MT/CT
"RTN","EASPREC7",130,0)
 . . . S DFN=IVMDFN
"RTN","EASPREC7",131,0)
 . . . I $G(IVMMTDT)="" S IVMMTDT=EASMTDT
"RTN","EASPREC7",132,0)
 . . . D CLOSE^EASPTRN1(IVMIY,DFN,1,7)      ;Close Case/Not Converted
"RTN","EASPREC7",133,0)
 . ;
"RTN","EASPREC7",134,0)
 . I CASEFLG D                              ;Case=1 Close/Converted
"RTN","EASPREC7",135,0)
 . . Q:$G(IVMMTIEN)<1
"RTN","EASPREC7",136,0)
 . . S DA=IVMMTIEN,DIE="^DGMT(408.31,"
"RTN","EASPREC7",137,0)
 . . S DR=".03////^S X=IVM3;.12////^S X=IVM8;.07////^S X=IVM10;"
"RTN","EASPREC7",138,0)
 . . S DR=DR_".09////^S X=IVM25;.11////^S X=IVM7;.18////^S X=IVM12;"
"RTN","EASPREC7",139,0)
 . . S DR=DR_".23////^S X=IVM18;.25////^S X=IVM20;"
"RTN","EASPREC7",140,0)
 . . S DR=DR_"2.02////^S X=IVMDATE;2.03////^S X=IVM26"
"RTN","EASPREC7",141,0)
 . . D ^DIE K DA,DIE,DR                     ;Update existing Z06
"RTN","EASPREC7",142,0)
 . . I $G(IVMMTDT)="" S IVMMTDT=EASMTDT
"RTN","EASPREC7",143,0)
 . . I $$EXPIRED^EASPTRN1(DFN,$G(IVMMTDT)) D
"RTN","EASPREC7",144,0)
 . . . S EXPIRED=1,IVMZ10="UPLOAD IN PROGRESS"
"RTN","EASPREC7",145,0)
 . . D CLOSE^EASPTRN1(IVMIY,DFN,1,6)        ;Close Case/Converted
"RTN","EASPREC7",146,0)
 . . S DGCAT=$P($G(^DG(408.32,IVM3,0)),"^",1),IVM5=""
"RTN","EASPREC7",147,0)
 . . D MTBULL^EASUM7,MAIL^IVMUFNC()         ;Send Bulletin
"RTN","EASPREC7",148,0)
 Q
"RTN","EASPREC7",149,0)
 ;
"RTN","EASPREC7",150,0)
MSH S (HLMID,MSGID)=$P(IVMSEG,HLFS,10)         ;Message control id from MSH
"RTN","EASPREC7",151,0)
 Q
"RTN","EASPREC7",152,0)
PID S DFN=$P($P(IVMSEG,HLFS,4),$E(HLECH))
"RTN","EASPREC7",153,0)
 I ('DFN!(DFN'=+DFN)!('$D(^DPT(+DFN,0)))) D  Q
"RTN","EASPREC7",154,0)
 . S HLERR="Invalid DFN"
"RTN","EASPREC7",155,0)
 I $P(IVMSEG,HLFS,20)'=$P(^DPT(DFN,0),"^",9) D  Q
"RTN","EASPREC7",156,0)
 . S HLERR="Couldn't match IVM SSN with DHCP SSN"
"RTN","EASPREC7",157,0)
 S IVMDAP=IVMDA                  ;Save IVMDA for veteran PID segment
"RTN","EASPREC7",158,0)
 Q
"RTN","EASPREC7",159,0)
ZIC I 'DEPFLG S IVMDGLY=$P(IVMSEG,"^",3)           ;Income year
"RTN","EASPREC7",160,0)
 Q
"RTN","EASPREC7",161,0)
ZIR Q
"RTN","EASPREC7",162,0)
ZDP S DEPFLG=1
"RTN","EASPREC7",163,0)
 Q
"RTN","EASPREC7",164,0)
 ;Get primary means test
"RTN","EASPREC7",165,0)
 ; IVMMTDT - means test date
"RTN","EASPREC7",166,0)
 ; DGLY - income year
"RTN","EASPREC7",167,0)
 ; If Means Test not in DHCP, don't upload IVM Means Test 
"RTN","EASPREC7",168,0)
 ;
"RTN","EASPREC7",169,0)
ZMT N IVMIEN,MTCODE                                             ;EAS*1*42
"RTN","EASPREC7",170,0)
 S IVMDAZ=IVMDA,ZMTSEG=IVMSEG            ;ZMT segment ivmda
"RTN","EASPREC7",171,0)
 D PARSEZMT(ZMTSEG)                      ;Retrieve ZMT Values
"RTN","EASPREC7",172,0)
 ;Means test date from ZMT segment
"RTN","EASPREC7",173,0)
 S (EASMTDT,IVMMTDT)=$$FMDATE^HLFNC($P(IVMSEG,HLFS,3))
"RTN","EASPREC7",174,0)
 S DGMTYPT=$G(IVM17)                     ;int type of test
"RTN","EASPREC7",175,0)
 S:DGMTYPT="" DGMTYPT=1                  ;insure type defined
"RTN","EASPREC7",176,0)
 S DGLY=$$LYR^DGMTSCU1(IVMMTDT)          ;Get means test to be updated
"RTN","EASPREC7",177,0)
 S MTDATE=-IVMMTDT
"RTN","EASPREC7",178,0)
 S IVMIEN=""
"RTN","EASPREC7",179,0)
 S MTFND=0
"RTN","EASPREC7",180,0)
 F  S IVMIEN=$O(^DGMT(408.31,"AID",DGMTYPT,DFN,MTDATE,IVMIEN)) Q:MTFND!(IVMIEN="")  D
"RTN","EASPREC7",181,0)
 . S IVMMTIEN=IVMIEN
"RTN","EASPREC7",182,0)
 . ; match to MT Z06 from Edb
"RTN","EASPREC7",183,0)
 . S MTCODE=$P($G(^DGMT(408.31,IVMIEN,0)),"^",3)
"RTN","EASPREC7",184,0)
 . I (MTCODE=6)!(MTCODE=16)!(MTCODE=8) D    ;Previous Converted MT/CT?
"RTN","EASPREC7",185,0)
 . . S UPMTS=IVMIEN
"RTN","EASPREC7",186,0)
 . . S MTFND=1
"RTN","EASPREC7",187,0)
 Q
"RTN","EASPREC7",188,0)
ZIV S IVMDAV=IVMDA,ZIVSEG=IVMSEG
"RTN","EASPREC7",189,0)
 S IVMIY=$P(IVMSEG,HLFS,3)
"RTN","EASPREC7",190,0)
 S IVMIY=$$FMDATE^HLFNC(IVMIY)
"RTN","EASPREC7",191,0)
 I $E(IVMIY,4,7)'="0000"!($E(IVMIY,1,3)<292) D  Q
"RTN","EASPREC7",192,0)
 . S HLERR="Invalid Income Year"
"RTN","EASPREC7",193,0)
 I "01"'[$P(IVMSEG,HLFS,9) D  Q
"RTN","EASPREC7",194,0)
 . S HLERR="Case Status not 0 or 1"
"RTN","EASPREC7",195,0)
 I $P(IVMSEG,HLFS,9)=1 S CASEFLG=1         ;Close/Convert Case Flag
"RTN","EASPREC7",196,0)
 I $P(IVMSEG,HLFS,9)=0 S CASEFLG=0         ;Delete/Not Converted MT Flag
"RTN","EASPREC7",197,0)
BHS Q
"RTN","EASPREC7",198,0)
BTS Q
"RTN","EASPREC7",199,0)
 ;
"RTN","EASPREC7",200,0)
GET ; get HL7 segment from ^TMP
"RTN","EASPREC7",201,0)
 ;S IVMDA=$O(^TMP($J,IVMRTN,+IVMDA))
"RTN","EASPREC7",202,0)
 S IVMSEG=$G(^TMP($J,IVMRTN,+IVMDA,0))
"RTN","EASPREC7",203,0)
 S IVMSEG1=$E(IVMSEG,1,3)
"RTN","EASPREC7",204,0)
 S $E(SEGSTR,IVMDA)=1
"RTN","EASPREC7",205,0)
 Q
"RTN","EASPREC7",206,0)
 ;
"RTN","EASPREC7",207,0)
 ;Parse ZMT Segment for MT Data
"RTN","EASPREC7",208,0)
 ;
"RTN","EASPREC7",209,0)
PARSEZMT(ZSEG) S IVM2=$$FMDATE^HLFNC($P(ZSEG,"^",3))  ;Means Test Date
"RTN","EASPREC7",210,0)
 S IVM3=$O(^DG(408.32,"C",$P(ZSEG,"^",4),""))   ;Means Test Status 
"RTN","EASPREC7",211,0)
 S IVM7=$S($P(ZSEG,"^",8)="Y":1,1:0)            ;Agrees To Deductible
"RTN","EASPREC7",212,0)
 S IVM8=$P(ZSEG,"^",9)                          ;Threshold A
"RTN","EASPREC7",213,0)
 S IVM10=$$FMDATE^HLFNC($P(ZSEG,"^",11))        ;Date/Time Completed
"RTN","EASPREC7",214,0)
 S IVM12=$P(ZSEG,"^",13)                        ;Number of Dependents
"RTN","EASPREC7",215,0)
 S IVM17=$P(ZSEG,"^",18)                        ;Type of Test
"RTN","EASPREC7",216,0)
 S IVM18=$P(ZSEG,"^",19)                        ;Source of Test
"RTN","EASPREC7",217,0)
 S IVM20=$$FMDATE^HLFNC($P(ZSEG,"^",21))        ;IVM Verified MT
"RTN","EASPREC7",218,0)
 S IVM25=$$FMDATE^HLFNC($P(ZSEG,"^",26))        ;D/T Last Changed
"RTN","EASPREC7",219,0)
 S IVM26=$O(^DG(408.32,"C",$P(ZSEG,"^",27),"")) ;Test Determined Status
"RTN","EASPREC7",220,0)
 Q
"RTN","EASUM1")
0^1^B29901786
"RTN","EASUM1",1,0)
EASUM1 ;ALB/SEK,GN - IVM MEANS/COPAY TEST UPLOAD DRIVER ; 7/6/04 1:23pm
"RTN","EASUM1",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**23,30,35,42,86**;21-OCT-94;Build 4
"RTN","EASUM1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","EASUM1",4,0)
 ;
"RTN","EASUM1",5,0)
 ;EAS*1*42 add RX Copay to Z06 Upload/Delete
"RTN","EASUM1",6,0)
 ;
"RTN","EASUM1",7,0)
EN ; this routine will call routines to upload means tests sent by the IVM
"RTN","EASUM1",8,0)
 ; Center in HL7 segments.  the required sequence of these segments were
"RTN","EASUM1",9,0)
 ; validated in the calling routine IVMPREC7.  this routine will call
"RTN","EASUM1",10,0)
 ; IVMUCHK to ensure that the data is consistent with DHCP means test
"RTN","EASUM1",11,0)
 ; file and software requirements.
"RTN","EASUM1",12,0)
 ;
"RTN","EASUM1",13,0)
 ; entries will be added/modified in the following means test and
"RTN","EASUM1",14,0)
 ; patient files:
"RTN","EASUM1",15,0)
 ;
"RTN","EASUM1",16,0)
 ;       PATIENT RELATION (#408.12)
"RTN","EASUM1",17,0)
 ;       INCOME PERSON (#408.13)
"RTN","EASUM1",18,0)
 ;       INDIVIDUAL ANNUAL INCOME (#408.21)
"RTN","EASUM1",19,0)
 ;       INCOME RELATION (#408.22)
"RTN","EASUM1",20,0)
 ;       ANNUAL MEANS TEST (#408.31)
"RTN","EASUM1",21,0)
 ;       MEANS TEST CHANGES (#408.41)
"RTN","EASUM1",22,0)
 ;       PATIENT (#2)
"RTN","EASUM1",23,0)
 ;
"RTN","EASUM1",24,0)
 ; current year is date of means test.
"RTN","EASUM1",25,0)
 ; income year is calendar year before date of means test.
"RTN","EASUM1",26,0)
 ; meant test status is based on income year data.
"RTN","EASUM1",27,0)
 ;
"RTN","EASUM1",28,0)
 ; IVMDAP is pointer to the PID HL7 segment in file #772
"RTN","EASUM1",29,0)
 ; IVMDAZ is pointer to the ZMT segment
"RTN","EASUM1",30,0)
 ;
"RTN","EASUM1",31,0)
 S:'$D(DUZ) DUZ=.5 ; if no DUZ set to postmaster
"RTN","EASUM1",32,0)
 ;
"RTN","EASUM1",33,0)
 ; get copay exemption status (IVMCEB) and means test status (IVMMTB)
"RTN","EASUM1",34,0)
 ; before upload
"RTN","EASUM1",35,0)
 S IVMCEB=$P($$RXST^IBARXEU(DFN),"^",2)
"RTN","EASUM1",36,0)
 S IVMMTB=$P($$LST^DGMTU(DFN),"^",3)
"RTN","EASUM1",37,0)
 ;
"RTN","EASUM1",38,0)
 ; subscript of array IVMAR is ien of 408.12 transmitted by IVM Center
"RTN","EASUM1",39,0)
 ; or created by upload.
"RTN","EASUM1",40,0)
 ;K IVMAR
"RTN","EASUM1",41,0)
 ;S IVMX=$$EN^IVMUCHK() I IVMX]"" S HLERR=IVMX K IVMX Q  ; error found in MT data
"RTN","EASUM1",42,0)
 ;
"RTN","EASUM1",43,0)
ADD ; add new annual means test file (408.31) stub
"RTN","EASUM1",44,0)
 ; input   DGMTDT (.01) dt of test
"RTN","EASUM1",45,0)
 ;         DFN (.02) Patient IEN
"RTN","EASUM1",46,0)
 ;         DGMTYPT (.19) type of test (1-means test, 2-Rx Copay test)
"RTN","EASUM1",47,0)
 ; output  DGMTI annual means test IEN
"RTN","EASUM1",48,0)
 S DGMTDT=IVMMTDT
"RTN","EASUM1",49,0)
 D ADD^DGMTA
"RTN","EASUM1",50,0)
 I $G(IVMMTIEN)="" S IVMMTIEN=$G(DGMTI) ;Set IEN if only MT on file is Z06 MT
"RTN","EASUM1",51,0)
 ;
"RTN","EASUM1",52,0)
 ;Create new Z06 IVM Means Test
"RTN","EASUM1",53,0)
 ; Make STUB MT primary, add comment that it was created by Edb
"RTN","EASUM1",54,0)
 S DGCOM="Z06 MT via Edb"
"RTN","EASUM1",55,0)
 D PARSEZMT^EASPREC7(ZMTSEG)              ;Parse ZMT Segment for MT Data
"RTN","EASUM1",56,0)
 I $$EXPIRED^EASPTRN1(DFN,$G(IVM2)) S DGENUPLD="ENROLLMENT/ELIGIBILITY UPLOAD IN PROGRESS"    ;If MT expired then do not update Enrollment record
"RTN","EASUM1",57,0)
 S DA=DGMTI,DIE="^DGMT(408.31,"
"RTN","EASUM1",58,0)
 S DR=".03////^S X=IVM3;.12////^S X=IVM8;.07////^S X=IVM10;.09////^S X=IVM25;.11////^S X=IVM7;.18////^S X=IVM12;.23////^S X=IVM18;.25////^S X=IVM20;2////1;2.02////^S X=IVMDATE;2.03////^S X=IVM26;50///^S X=DGCOM"
"RTN","EASUM1",59,0)
 ;
"RTN","EASUM1",60,0)
 ; Linking logic for MT & CT, conditionally set link field 2.06 
"RTN","EASUM1",61,0)
 ;   Link the CT to MT (if MT found), or MT to CT (if CT found)
"RTN","EASUM1",62,0)
 ;   don't link tests older than Oct. 1999 or not same Year
"RTN","EASUM1",63,0)
 N LNKDAT,LNKMT,LNKDTE,LNKCAT,CURIEN
"RTN","EASUM1",64,0)
 S CURIEN=DGMTI,LNKMT=""
"RTN","EASUM1",65,0)
 S LNKDAT=$$LST^DGMTU(DFN,DGMTDT,$S(DGMTYPT=1:2,1:1)),DGMTI=CURIEN
"RTN","EASUM1",66,0)
 S:LNKDAT LNKMT=+LNKDAT,LNKDTE=$P(LNKDAT,"^",2),LNKCAT=$P(LNKDAT,"^",4)
"RTN","EASUM1",67,0)
 ; set LNKMT off if either of two scenarios below
"RTN","EASUM1",68,0)
 I LNKMT D
"RTN","EASUM1",69,0)
 . I $E(LNKDTE,1,3)'=$E(DGMTDT,1,3) S LNKMT="@" Q
"RTN","EASUM1",70,0)
 . I DGMTDT<2991001 S LNKMT="" Q
"RTN","EASUM1",71,0)
 S:LNKMT'="" DR=DR_";2.06////^S X=LNKMT"
"RTN","EASUM1",72,0)
 ;
"RTN","EASUM1",73,0)
 D ^DIE K DA,DIE,DR                            ;update new 408.31 test
"RTN","EASUM1",74,0)
 ;
"RTN","EASUM1",75,0)
 ; Update other 408.31 related Test, Link field, if link scenario true
"RTN","EASUM1",76,0)
 I LNKMT S DA=LNKMT,DIE="^DGMT(408.31,",DR="2.06////^S X=CURIEN" D ^DIE K DA,DIE,DR
"RTN","EASUM1",77,0)
 ;
"RTN","EASUM1",78,0)
 ;Variables needed for Bulletins
"RTN","EASUM1",79,0)
 ;
"RTN","EASUM1",80,0)
 S DGCAT=$P($G(^DG(408.32,IVM3,0)),"^",1)
"RTN","EASUM1",81,0)
 I '$D(IVM5) S IVM5=""
"RTN","EASUM1",82,0)
 ;
"RTN","EASUM1",83,0)
 D GETREL^DGMTU11(DFN,"V",DGLY,IVMMTIEN)
"RTN","EASUM1",84,0)
 I EASZ06 S (IVMMT31,DGMTP)=$G(^DGMT(408.31,IVMMTIEN,0)) ;dgmtp is event driver variable
"RTN","EASUM1",85,0)
 D COMPLETE
"RTN","EASUM1",86,0)
 Q
"RTN","EASUM1",87,0)
 ;
"RTN","EASUM1",88,0)
 ; add dependent(s) to income person file (408.13)
"RTN","EASUM1",89,0)
 ;
"RTN","EASUM1",90,0)
 ; add spouse if not in 408.13
"RTN","EASUM1",91,0)
 S IVMSPCHV="S" ; spouse/child/vet indicator
"RTN","EASUM1",92,0)
 S IVMDA1=IVMDAP+3 D GET ; spouse ZDP segment
"RTN","EASUM1",93,0)
 D INPIEN^IVMUM2
"RTN","EASUM1",94,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",95,0)
 ;
"RTN","EASUM1",96,0)
 I IVMFLG5 G ADDCHILD ; entry not added - goto add children
"RTN","EASUM1",97,0)
 ;
"RTN","EASUM1",98,0)
 ; add entry to patient relation file (408.12)
"RTN","EASUM1",99,0)
 D EN^IVMUM3
"RTN","EASUM1",100,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",101,0)
 ;
"RTN","EASUM1",102,0)
ADDS21 ; add spouse entry to individual annual income file (408.21)
"RTN","EASUM1",103,0)
 S IVMDA1=IVMDAP+4 D GET ; spouse ZIC segment
"RTN","EASUM1",104,0)
 D EN^IVMUM4
"RTN","EASUM1",105,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",106,0)
 ;
"RTN","EASUM1",107,0)
 ; add spouse entry to income relation file (408.22)
"RTN","EASUM1",108,0)
 S IVMDA1=IVMDAP+5 D GET ; spouse ZIR segment
"RTN","EASUM1",109,0)
 D EN^IVMUM5
"RTN","EASUM1",110,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",111,0)
 ;
"RTN","EASUM1",112,0)
ADDCHILD ; add children if not in 408.13
"RTN","EASUM1",113,0)
 S IVMSPCHV="C" ; spouse/child/vet indicator
"RTN","EASUM1",114,0)
 I 'IVMFLGC G ADDV21 ; no dependent children 
"RTN","EASUM1",115,0)
 S IVMCTR2=5
"RTN","EASUM1",116,0)
 F IVMCTR3=1:1:IVMFLGC D  Q:$D(IVMFERR)
"RTN","EASUM1",117,0)
 .S IVMCTR2=IVMCTR2+1
"RTN","EASUM1",118,0)
 .S IVMDA1=IVMDAP+IVMCTR2 D GET ; child ZDP segment
"RTN","EASUM1",119,0)
 .D INPIEN^IVMUM2
"RTN","EASUM1",120,0)
 .Q:$D(IVMFERR)
"RTN","EASUM1",121,0)
 .;
"RTN","EASUM1",122,0)
 .; add child entry to patient relation file (408.12)
"RTN","EASUM1",123,0)
 .D EN^IVMUM3
"RTN","EASUM1",124,0)
 .Q:$D(IVMFERR)
"RTN","EASUM1",125,0)
 .;
"RTN","EASUM1",126,0)
ADDC21 .; add child entry to individual annual income file (408.21)
"RTN","EASUM1",127,0)
 .S IVMCTR2=IVMCTR2+1
"RTN","EASUM1",128,0)
 .S IVMDA1=IVMDAP+IVMCTR2 D GET ; child ZIC segment
"RTN","EASUM1",129,0)
 .D EN^IVMUM4
"RTN","EASUM1",130,0)
 .Q:$D(IVMFERR)
"RTN","EASUM1",131,0)
 .;
"RTN","EASUM1",132,0)
 .; add entry to income relation file (408.22)
"RTN","EASUM1",133,0)
 .S IVMCTR2=IVMCTR2+1
"RTN","EASUM1",134,0)
 .S IVMDA1=IVMDAP+IVMCTR2 D GET ; child ZIR segment
"RTN","EASUM1",135,0)
 .D EN^IVMUM5
"RTN","EASUM1",136,0)
 .Q:$D(IVMFERR)
"RTN","EASUM1",137,0)
 .Q
"RTN","EASUM1",138,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",139,0)
 ;
"RTN","EASUM1",140,0)
ADDV21 ; add vet entry to individual annual income file (408.21)
"RTN","EASUM1",141,0)
 ; get vet patient relation ien
"RTN","EASUM1",142,0)
 S DGPRI=+$G(DGREL("V"))
"RTN","EASUM1",143,0)
 S IVMDA1=IVMDAP+1 D GET ; vet ZIC segment
"RTN","EASUM1",144,0)
 S IVMSPCHV="V" ; spouse/child/vet indicator
"RTN","EASUM1",145,0)
 D EN^IVMUM4
"RTN","EASUM1",146,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",147,0)
 S DGVINI=DGINI ; vet individual annual income ien
"RTN","EASUM1",148,0)
 ;
"RTN","EASUM1",149,0)
 ; add vet entry to income relation file (408.22)
"RTN","EASUM1",150,0)
 S IVMDA1=IVMDAP+2 D GET ; vet ZIR segment
"RTN","EASUM1",151,0)
 D EN^IVMUM5
"RTN","EASUM1",152,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",153,0)
 S DGVIRI=DGIRI ; vet income relation ien
"RTN","EASUM1",154,0)
 ;
"RTN","EASUM1",155,0)
COMPLETE ; complete means test
"RTN","EASUM1",156,0)
 ;
"RTN","EASUM1",157,0)
 ;D EN^IVMUM6
"RTN","EASUM1",158,0)
 ;Call Means Test Event Driver to complete processing
"RTN","EASUM1",159,0)
 ;
"RTN","EASUM1",160,0)
 S DGMTACT="UPL"
"RTN","EASUM1",161,0)
 D AFTER^DGMTEVT
"RTN","EASUM1",162,0)
 S DGMTINF=1                                    ;Non-Interactive Flag
"RTN","EASUM1",163,0)
 D EN^DGMTEVT
"RTN","EASUM1",164,0)
 D MTBULL^EASUM7,MAIL^IVMUFNC()               ;Build Mail Message
"RTN","EASUM1",165,0)
 ;
"RTN","EASUM1",166,0)
 ; cleanup                                  ;EAS*1*42   remove Dgmtypt
"RTN","EASUM1",167,0)
 K DGINI,DGIRI,DGLY,DGMTDT,DGPRI,DGREL,DGVINI,DGVIRI,DGENUPLD
"RTN","EASUM1",168,0)
 K DGCAT,IVMAR,IVMCEB,IVMCTR2,IVMCTR3,IVMDA1,IVMDAP,IVMFERR
"RTN","EASUM1",169,0)
 K IVMFLG2,IVMFLG5,IVMFLGC,IVMMTB,IVMPRN
"RTN","EASUM1",170,0)
 K IVMRELN,IVMRELO,IVMSEG,IVMSPCHV,IVMX
"RTN","EASUM1",171,0)
 Q
"RTN","EASUM1",172,0)
 ; 
"RTN","EASUM1",173,0)
GET ; get HL7 segment from ^HL
"RTN","EASUM1",174,0)
 S IVMSEG=$P($G(^TMP($J,IVMRTN,IVMDA1,0)),"^",2,999)
"RTN","EASUM1",175,0)
 Q
"VER")
8.0^22.0
**END**
**END**

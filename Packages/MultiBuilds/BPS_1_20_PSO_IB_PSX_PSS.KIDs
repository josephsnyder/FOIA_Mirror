KIDS Distribution saved on Apr 21, 2016@14:11:03
BPS PSO IB PSX PSS BUNDLE 9.0
**KIDS**:BPS PSO IB PSX PSS BUNDLE 9.0^BPS*1.0*20^PSO*7.0*448^IB*2.0*550^PSX*2.0*79^PSS*1.0*192^

**INSTALL NAME**
BPS PSO IB PSX PSS BUNDLE 9.0
"BLD",9538,0)
BPS PSO IB PSX PSS BUNDLE 9.0^^1^3160421^y
"BLD",9538,1,0)
^^1^1^3150605^
"BLD",9538,1,1,0)
MCCF ePharmacy Compliance Phase 3 (FY15)
"BLD",9538,6.3)
27
"BLD",9538,10,0)
^9.63^5^5
"BLD",9538,10,1,0)
BPS*1.0*20^1
"BLD",9538,10,2,0)
PSO*7.0*448^1
"BLD",9538,10,3,0)
IB*2.0*550^1
"BLD",9538,10,4,0)
PSX*2.0*79^1
"BLD",9538,10,5,0)
PSS*1.0*192^1
"BLD",9538,10,"B","BPS*1.0*20",1)

"BLD",9538,10,"B","IB*2.0*550",3)

"BLD",9538,10,"B","PSO*7.0*448",2)

"BLD",9538,10,"B","PSS*1.0*192",5)

"BLD",9538,10,"B","PSX*2.0*79",4)

"BLD",9538,"KRN",0)
^9.67PA^779.2^20
"BLD",9538,"KRN",.4,0)
.4
"BLD",9538,"KRN",.401,0)
.401
"BLD",9538,"KRN",.402,0)
.402
"BLD",9538,"KRN",.403,0)
.403
"BLD",9538,"KRN",.5,0)
.5
"BLD",9538,"KRN",.84,0)
.84
"BLD",9538,"KRN",3.6,0)
3.6
"BLD",9538,"KRN",3.8,0)
3.8
"BLD",9538,"KRN",9.2,0)
9.2
"BLD",9538,"KRN",9.8,0)
9.8
"BLD",9538,"KRN",19,0)
19
"BLD",9538,"KRN",19.1,0)
19.1
"BLD",9538,"KRN",101,0)
101
"BLD",9538,"KRN",409.61,0)
409.61
"BLD",9538,"KRN",771,0)
771
"BLD",9538,"KRN",779.2,0)
779.2
"BLD",9538,"KRN",870,0)
870
"BLD",9538,"KRN",8989.51,0)
8989.51
"BLD",9538,"KRN",8989.52,0)
8989.52
"BLD",9538,"KRN",8994,0)
8994
"BLD",9538,"KRN","B",.4,.4)

"BLD",9538,"KRN","B",.401,.401)

"BLD",9538,"KRN","B",.402,.402)

"BLD",9538,"KRN","B",.403,.403)

"BLD",9538,"KRN","B",.5,.5)

"BLD",9538,"KRN","B",.84,.84)

"BLD",9538,"KRN","B",3.6,3.6)

"BLD",9538,"KRN","B",3.8,3.8)

"BLD",9538,"KRN","B",9.2,9.2)

"BLD",9538,"KRN","B",9.8,9.8)

"BLD",9538,"KRN","B",19,19)

"BLD",9538,"KRN","B",19.1,19.1)

"BLD",9538,"KRN","B",101,101)

"BLD",9538,"KRN","B",409.61,409.61)

"BLD",9538,"KRN","B",771,771)

"BLD",9538,"KRN","B",779.2,779.2)

"BLD",9538,"KRN","B",870,870)

"BLD",9538,"KRN","B",8989.51,8989.51)

"BLD",9538,"KRN","B",8989.52,8989.52)

"BLD",9538,"KRN","B",8994,8994)

"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"VER")
8.0^22.0
**INSTALL NAME**
BPS*1.0*20
"BLD",9499,0)
BPS*1.0*20^E CLAIMS MGMT ENGINE^0^3160421^y
"BLD",9499,1,0)
^^1^1^3151019^
"BLD",9499,1,1,0)
MCCF ePharmacy Compliance Phase 3
"BLD",9499,4,0)
^9.64PA^9002313.25^7
"BLD",9499,4,9002313.03,0)
9002313.03
"BLD",9499,4,9002313.03,2,0)
^9.641^9002313.0301^3
"BLD",9499,4,9002313.03,2,9002313.0301,0)
RESPONSES  (sub-file)
"BLD",9499,4,9002313.03,2,9002313.0301,1,0)
^9.6411^2090^2
"BLD",9499,4,9002313.03,2,9002313.0301,1,2087,0)
QUAN LIMIT PER SPC TM PD COUNT
"BLD",9499,4,9002313.03,2,9002313.0301,1,2090,0)
DAYS SUP LIM PER SPC TM PD CNT
"BLD",9499,4,9002313.03,2,9002313.032087,0)
QUAN LIMIT TIME PERIOD MLTPL  (sub-file)
"BLD",9499,4,9002313.03,2,9002313.032087,1,0)
^9.6411^^
"BLD",9499,4,9002313.03,2,9002313.032091,0)
DAYS SUPPLY LIM TM PD MULTIPLE  (sub-file)
"BLD",9499,4,9002313.03,2,9002313.032091,1,0)
^9.6411^^
"BLD",9499,4,9002313.03,222)
y^n^p^^^^n^^n
"BLD",9499,4,9002313.03,224)

"BLD",9499,4,9002313.25,0)
9002313.25
"BLD",9499,4,9002313.25,222)
y^y^f^^n^^y^o^n
"BLD",9499,4,9002313.32,0)
9002313.32
"BLD",9499,4,9002313.32,2,0)
^9.641^9002313.32^1
"BLD",9499,4,9002313.32,2,9002313.32,0)
BPS PAYER RESPONSE OVERRIDES  (File-top level)
"BLD",9499,4,9002313.32,2,9002313.32,1,0)
^9.6411^.18^9
"BLD",9499,4,9002313.32,2,9002313.32,1,.1,0)
ADJUDICATED PAYMENT TYPE
"BLD",9499,4,9002313.32,2,9002313.32,1,.11,0)
QUAN LIMIT PER SPC TIME PERIOD
"BLD",9499,4,9002313.32,2,9002313.32,1,.12,0)
QUANTITY LIMIT TIME PERIOD
"BLD",9499,4,9002313.32,2,9002313.32,1,.13,0)
DAYS SUP LIM PER SPC TM PERIOD
"BLD",9499,4,9002313.32,2,9002313.32,1,.14,0)
DAYS SUPPLY LIMIT TIME PERIOD
"BLD",9499,4,9002313.32,2,9002313.32,1,.15,0)
INGREDIENT COST PAID
"BLD",9499,4,9002313.32,2,9002313.32,1,.16,0)
DISPENSING FEE PAID
"BLD",9499,4,9002313.32,2,9002313.32,1,.17,0)
REMAINING DEDUCTIBLE AMOUNT
"BLD",9499,4,9002313.32,2,9002313.32,1,.18,0)
AMT APPLIED TO PERIODIC DEDUCT
"BLD",9499,4,9002313.32,222)
y^n^p^^^^n^^n
"BLD",9499,4,9002313.32,224)

"BLD",9499,4,9002313.57,0)
9002313.57
"BLD",9499,4,9002313.57,2,0)
^9.641^9002313.57111^2
"BLD",9499,4,9002313.57,2,9002313.57,0)
BPS LOG OF TRANSACTIONS  (File-top level)
"BLD",9499,4,9002313.57,2,9002313.57,1,0)
^9.6411^308^9
"BLD",9499,4,9002313.57,2,9002313.57,1,19,0)
TRANSACTION TYPE
"BLD",9499,4,9002313.57,2,9002313.57,1,301,0)
NON-BILLABLE REASON
"BLD",9499,4,9002313.57,2,9002313.57,1,302,0)
NON-BILLABLE CLOSED
"BLD",9499,4,9002313.57,2,9002313.57,1,303,0)
NON-BILLABLE DATE CLOSED
"BLD",9499,4,9002313.57,2,9002313.57,1,304,0)
NON-BILLABLE CLOSED BY
"BLD",9499,4,9002313.57,2,9002313.57,1,305,0)
NON-BILLABLE CLOSED COMMENT
"BLD",9499,4,9002313.57,2,9002313.57,1,306,0)
NON-BILLABLE DATE RE-OPENED
"BLD",9499,4,9002313.57,2,9002313.57,1,307,0)
NON-BILLABLE RE-OPENED BY
"BLD",9499,4,9002313.57,2,9002313.57,1,308,0)
NON-BILLABLE RE-OPENED COMMENT
"BLD",9499,4,9002313.57,2,9002313.57111,0)
COMMENT MULTIPLE  (sub-file)
"BLD",9499,4,9002313.57,2,9002313.57111,1,0)
^9.6411^.04^1
"BLD",9499,4,9002313.57,2,9002313.57111,1,.04,0)
PHARMACY
"BLD",9499,4,9002313.57,222)
y^n^p^^^^n^^n
"BLD",9499,4,9002313.57,224)

"BLD",9499,4,9002313.59,0)
9002313.59
"BLD",9499,4,9002313.59,2,0)
^9.641^9002313.59^2
"BLD",9499,4,9002313.59,2,9002313.59,0)
BPS TRANSACTION  (File-top level)
"BLD",9499,4,9002313.59,2,9002313.59,1,0)
^9.6411^308^9
"BLD",9499,4,9002313.59,2,9002313.59,1,19,0)
TRANSACTION TYPE
"BLD",9499,4,9002313.59,2,9002313.59,1,301,0)
NON-BILLABLE REASON
"BLD",9499,4,9002313.59,2,9002313.59,1,302,0)
NON-BILLABLE CLOSED
"BLD",9499,4,9002313.59,2,9002313.59,1,303,0)
NON-BILLABLE DATE CLOSED
"BLD",9499,4,9002313.59,2,9002313.59,1,304,0)
NON-BILLABLE CLOSED BY
"BLD",9499,4,9002313.59,2,9002313.59,1,305,0)
NON-BILLABLE CLOSED COMMENT
"BLD",9499,4,9002313.59,2,9002313.59,1,306,0)
NON-BILLABLE DATE RE-OPENED
"BLD",9499,4,9002313.59,2,9002313.59,1,307,0)
NON-BILLABLE RE-OPENED BY
"BLD",9499,4,9002313.59,2,9002313.59,1,308,0)
NON-BILLABLE RE-OPENED COMMENT
"BLD",9499,4,9002313.59,2,9002313.59111,0)
COMMENT MULTIPLE  (sub-file)
"BLD",9499,4,9002313.59,2,9002313.59111,1,0)
^9.6411^.04^1
"BLD",9499,4,9002313.59,2,9002313.59111,1,.04,0)
PHARMACY
"BLD",9499,4,9002313.59,222)
y^n^p^^^^n^^n
"BLD",9499,4,9002313.59,224)

"BLD",9499,4,9002313.91,0)
9002313.91
"BLD",9499,4,9002313.91,222)
y^y^f^^n^^y^o^n
"BLD",9499,4,9002313.93,0)
9002313.93
"BLD",9499,4,9002313.93,222)
y^y^f^^n^^y^o^n
"BLD",9499,4,"APDD",9002313.03,9002313.0301)

"BLD",9499,4,"APDD",9002313.03,9002313.0301,2087)

"BLD",9499,4,"APDD",9002313.03,9002313.0301,2090)

"BLD",9499,4,"APDD",9002313.03,9002313.032087)

"BLD",9499,4,"APDD",9002313.03,9002313.032091)

"BLD",9499,4,"APDD",9002313.32,9002313.32)

"BLD",9499,4,"APDD",9002313.32,9002313.32,.1)

"BLD",9499,4,"APDD",9002313.32,9002313.32,.11)

"BLD",9499,4,"APDD",9002313.32,9002313.32,.12)

"BLD",9499,4,"APDD",9002313.32,9002313.32,.13)

"BLD",9499,4,"APDD",9002313.32,9002313.32,.14)

"BLD",9499,4,"APDD",9002313.32,9002313.32,.15)

"BLD",9499,4,"APDD",9002313.32,9002313.32,.16)

"BLD",9499,4,"APDD",9002313.32,9002313.32,.17)

"BLD",9499,4,"APDD",9002313.32,9002313.32,.18)

"BLD",9499,4,"APDD",9002313.57,9002313.57)

"BLD",9499,4,"APDD",9002313.57,9002313.57,19)

"BLD",9499,4,"APDD",9002313.57,9002313.57,301)

"BLD",9499,4,"APDD",9002313.57,9002313.57,302)

"BLD",9499,4,"APDD",9002313.57,9002313.57,303)

"BLD",9499,4,"APDD",9002313.57,9002313.57,304)

"BLD",9499,4,"APDD",9002313.57,9002313.57,305)

"BLD",9499,4,"APDD",9002313.57,9002313.57,306)

"BLD",9499,4,"APDD",9002313.57,9002313.57,307)

"BLD",9499,4,"APDD",9002313.57,9002313.57,308)

"BLD",9499,4,"APDD",9002313.57,9002313.57111)

"BLD",9499,4,"APDD",9002313.57,9002313.57111,.04)

"BLD",9499,4,"APDD",9002313.59,9002313.59)

"BLD",9499,4,"APDD",9002313.59,9002313.59,19)

"BLD",9499,4,"APDD",9002313.59,9002313.59,301)

"BLD",9499,4,"APDD",9002313.59,9002313.59,302)

"BLD",9499,4,"APDD",9002313.59,9002313.59,303)

"BLD",9499,4,"APDD",9002313.59,9002313.59,304)

"BLD",9499,4,"APDD",9002313.59,9002313.59,305)

"BLD",9499,4,"APDD",9002313.59,9002313.59,306)

"BLD",9499,4,"APDD",9002313.59,9002313.59,307)

"BLD",9499,4,"APDD",9002313.59,9002313.59,308)

"BLD",9499,4,"APDD",9002313.59,9002313.59111)

"BLD",9499,4,"APDD",9002313.59,9002313.59111,.04)

"BLD",9499,4,"B",9002313.03,9002313.03)

"BLD",9499,4,"B",9002313.25,9002313.25)

"BLD",9499,4,"B",9002313.32,9002313.32)

"BLD",9499,4,"B",9002313.57,9002313.57)

"BLD",9499,4,"B",9002313.59,9002313.59)

"BLD",9499,4,"B",9002313.91,9002313.91)

"BLD",9499,4,"B",9002313.93,9002313.93)

"BLD",9499,6.3)
27
"BLD",9499,"ABPKG")
n
"BLD",9499,"INI")
EN^BPS20PRE
"BLD",9499,"INID")
^y^y
"BLD",9499,"INIT")
POST^BPS20PST
"BLD",9499,"KRN",0)
^9.67PA^779.2^20
"BLD",9499,"KRN",.4,0)
.4
"BLD",9499,"KRN",.401,0)
.401
"BLD",9499,"KRN",.402,0)
.402
"BLD",9499,"KRN",.403,0)
.403
"BLD",9499,"KRN",.5,0)
.5
"BLD",9499,"KRN",.84,0)
.84
"BLD",9499,"KRN",3.6,0)
3.6
"BLD",9499,"KRN",3.8,0)
3.8
"BLD",9499,"KRN",9.2,0)
9.2
"BLD",9499,"KRN",9.8,0)
9.8
"BLD",9499,"KRN",9.8,"NM",0)
^9.68A^59^59
"BLD",9499,"KRN",9.8,"NM",1,0)
BPSSCR03^^0^B67802855
"BLD",9499,"KRN",9.8,"NM",2,0)
BPSSCRU2^^0^B51790246
"BLD",9499,"KRN",9.8,"NM",3,0)
BPSSCRCV^^0^B55540510
"BLD",9499,"KRN",9.8,"NM",4,0)
BPSCMT01^^0^B22342250
"BLD",9499,"KRN",9.8,"NM",5,0)
BPSSCRU3^^0^B43064796
"BLD",9499,"KRN",9.8,"NM",6,0)
BPSSCRSL^^0^B14919740
"BLD",9499,"KRN",9.8,"NM",7,0)
BPSSCR01^^0^B17496726
"BLD",9499,"KRN",9.8,"NM",8,0)
BPSSCR04^^0^B54656509
"BLD",9499,"KRN",9.8,"NM",9,0)
BPSNCPD2^^0^B91792201
"BLD",9499,"KRN",9.8,"NM",10,0)
BPSOSIZ^^0^B18104655
"BLD",9499,"KRN",9.8,"NM",11,0)
BPSOSIY^^0^B74487088
"BLD",9499,"KRN",9.8,"NM",12,0)
BPSRPT9^^0^B113826199
"BLD",9499,"KRN",9.8,"NM",13,0)
BPSRPT9A^^0^B99973308
"BLD",9499,"KRN",9.8,"NM",14,0)
BPSOSU^^0^B43285498
"BLD",9499,"KRN",9.8,"NM",15,0)
BPSREOP1^^0^B57917968
"BLD",9499,"KRN",9.8,"NM",16,0)
BPSJACK^^0^B32888755
"BLD",9499,"KRN",9.8,"NM",17,0)
BPSJVAL1^^0^B14575875
"BLD",9499,"KRN",9.8,"NM",18,0)
BPSRPT8^^0^B149255320
"BLD",9499,"KRN",9.8,"NM",19,0)
BPSSCRU6^^0^B19836949
"BLD",9499,"KRN",9.8,"NM",20,0)
BPSOSRX^^0^B40932013
"BLD",9499,"KRN",9.8,"NM",21,0)
BPSOSUC^^0^B10039062
"BLD",9499,"KRN",9.8,"NM",22,0)
BPSNCPDP^^0^B97543196
"BLD",9499,"KRN",9.8,"NM",23,0)
BPSOSRX8^^0^B22384839
"BLD",9499,"KRN",9.8,"NM",24,0)
BPSSCRRV^^0^B43226039
"BLD",9499,"KRN",9.8,"NM",25,0)
BPSSCRCL^^0^B86678930
"BLD",9499,"KRN",9.8,"NM",26,0)
BPSSCRLG^^0^B253455016
"BLD",9499,"KRN",9.8,"NM",27,0)
BPSWRKLS^^0^B32047440
"BLD",9499,"KRN",9.8,"NM",28,0)
BPSRES^^0^B159042443
"BLD",9499,"KRN",9.8,"NM",29,0)
BPSRSRLC^^0^B2880037
"BLD",9499,"KRN",9.8,"NM",30,0)
BPSSCRRS^^0^B80029514
"BLD",9499,"KRN",9.8,"NM",31,0)
BPSNCPD3^^0^B65718099
"BLD",9499,"KRN",9.8,"NM",32,0)
BPSOSRX5^^0^B43227076
"BLD",9499,"KRN",9.8,"NM",33,0)
BPSNCPD5^^0^B76247724
"BLD",9499,"KRN",9.8,"NM",34,0)
BPSNCPD6^^0^B30082238
"BLD",9499,"KRN",9.8,"NM",35,0)
BPSOSRB^^0^B39920456
"BLD",9499,"KRN",9.8,"NM",36,0)
BPSTEST^^0^B213983196
"BLD",9499,"KRN",9.8,"NM",37,0)
BPSOS03^^0^B15562725
"BLD",9499,"KRN",9.8,"NM",38,0)
BPSJHLI^^0^B4405994
"BLD",9499,"KRN",9.8,"NM",39,0)
BPSJHLT^^0^B84683560
"BLD",9499,"KRN",9.8,"NM",40,0)
BPSSCRRJ^^0^B126798258
"BLD",9499,"KRN",9.8,"NM",41,0)
BPSECMPS^^0^B148784399
"BLD",9499,"KRN",9.8,"NM",42,0)
BPSUTIL^^0^B13282594
"BLD",9499,"KRN",9.8,"NM",43,0)
BPSBUTL^^0^B120426085
"BLD",9499,"KRN",9.8,"NM",44,0)
BPSOSH2^^0^B140036379
"BLD",9499,"KRN",9.8,"NM",45,0)
BPSOSSG^^0^B30642361
"BLD",9499,"KRN",9.8,"NM",46,0)
BPSECA8^^0^B25111830
"BLD",9499,"KRN",9.8,"NM",47,0)
BPSOSCD^^0^B104057958
"BLD",9499,"KRN",9.8,"NM",48,0)
BPSSCRN0^^0^B8359563
"BLD",9499,"KRN",9.8,"NM",49,0)
BPSOPR^^0^B53670373
"BLD",9499,"KRN",9.8,"NM",50,0)
BPSOPR2^^0^B114125532
"BLD",9499,"KRN",9.8,"NM",51,0)
BPSOPR3^^0^B63864385
"BLD",9499,"KRN",9.8,"NM",52,0)
BPSRPT0^^0^B27167649
"BLD",9499,"KRN",9.8,"NM",53,0)
BPSRPT1^^0^B64732997
"BLD",9499,"KRN",9.8,"NM",54,0)
BPSRPT3^^0^B124301535
"BLD",9499,"KRN",9.8,"NM",55,0)
BPSRPT7^^0^B164643275
"BLD",9499,"KRN",9.8,"NM",56,0)
BPSPSOU1^^0^B14671447
"BLD",9499,"KRN",9.8,"NM",57,0)
BPSJAREG^^0^B11748725
"BLD",9499,"KRN",9.8,"NM",58,0)
BPSJPREG^^0^B20911223
"BLD",9499,"KRN",9.8,"NM",59,0)
BPSPRRX5^^0^B82229263
"BLD",9499,"KRN",9.8,"NM","B","BPSBUTL",43)

"BLD",9499,"KRN",9.8,"NM","B","BPSCMT01",4)

"BLD",9499,"KRN",9.8,"NM","B","BPSECA8",46)

"BLD",9499,"KRN",9.8,"NM","B","BPSECMPS",41)

"BLD",9499,"KRN",9.8,"NM","B","BPSJACK",16)

"BLD",9499,"KRN",9.8,"NM","B","BPSJAREG",57)

"BLD",9499,"KRN",9.8,"NM","B","BPSJHLI",38)

"BLD",9499,"KRN",9.8,"NM","B","BPSJHLT",39)

"BLD",9499,"KRN",9.8,"NM","B","BPSJPREG",58)

"BLD",9499,"KRN",9.8,"NM","B","BPSJVAL1",17)

"BLD",9499,"KRN",9.8,"NM","B","BPSNCPD2",9)

"BLD",9499,"KRN",9.8,"NM","B","BPSNCPD3",31)

"BLD",9499,"KRN",9.8,"NM","B","BPSNCPD5",33)

"BLD",9499,"KRN",9.8,"NM","B","BPSNCPD6",34)

"BLD",9499,"KRN",9.8,"NM","B","BPSNCPDP",22)

"BLD",9499,"KRN",9.8,"NM","B","BPSOPR",49)

"BLD",9499,"KRN",9.8,"NM","B","BPSOPR2",50)

"BLD",9499,"KRN",9.8,"NM","B","BPSOPR3",51)

"BLD",9499,"KRN",9.8,"NM","B","BPSOS03",37)

"BLD",9499,"KRN",9.8,"NM","B","BPSOSCD",47)

"BLD",9499,"KRN",9.8,"NM","B","BPSOSH2",44)

"BLD",9499,"KRN",9.8,"NM","B","BPSOSIY",11)

"BLD",9499,"KRN",9.8,"NM","B","BPSOSIZ",10)

"BLD",9499,"KRN",9.8,"NM","B","BPSOSRB",35)

"BLD",9499,"KRN",9.8,"NM","B","BPSOSRX",20)

"BLD",9499,"KRN",9.8,"NM","B","BPSOSRX5",32)

"BLD",9499,"KRN",9.8,"NM","B","BPSOSRX8",23)

"BLD",9499,"KRN",9.8,"NM","B","BPSOSSG",45)

"BLD",9499,"KRN",9.8,"NM","B","BPSOSU",14)

"BLD",9499,"KRN",9.8,"NM","B","BPSOSUC",21)

"BLD",9499,"KRN",9.8,"NM","B","BPSPRRX5",59)

"BLD",9499,"KRN",9.8,"NM","B","BPSPSOU1",56)

"BLD",9499,"KRN",9.8,"NM","B","BPSREOP1",15)

"BLD",9499,"KRN",9.8,"NM","B","BPSRES",28)

"BLD",9499,"KRN",9.8,"NM","B","BPSRPT0",52)

"BLD",9499,"KRN",9.8,"NM","B","BPSRPT1",53)

"BLD",9499,"KRN",9.8,"NM","B","BPSRPT3",54)

"BLD",9499,"KRN",9.8,"NM","B","BPSRPT7",55)

"BLD",9499,"KRN",9.8,"NM","B","BPSRPT8",18)

"BLD",9499,"KRN",9.8,"NM","B","BPSRPT9",12)

"BLD",9499,"KRN",9.8,"NM","B","BPSRPT9A",13)

"BLD",9499,"KRN",9.8,"NM","B","BPSRSRLC",29)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCR01",7)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCR03",1)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCR04",8)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCRCL",25)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCRCV",3)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCRLG",26)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCRN0",48)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCRRJ",40)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCRRS",30)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCRRV",24)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCRSL",6)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCRU2",2)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCRU3",5)

"BLD",9499,"KRN",9.8,"NM","B","BPSSCRU6",19)

"BLD",9499,"KRN",9.8,"NM","B","BPSTEST",36)

"BLD",9499,"KRN",9.8,"NM","B","BPSUTIL",42)

"BLD",9499,"KRN",9.8,"NM","B","BPSWRKLS",27)

"BLD",9499,"KRN",19,0)
19
"BLD",9499,"KRN",19,"NM",0)
^9.68A^2^2
"BLD",9499,"KRN",19,"NM",1,0)
BPS OPECC PRODUCTIVITY REPORT^^0
"BLD",9499,"KRN",19,"NM",2,0)
BPS MENU RPT OTHER^^2
"BLD",9499,"KRN",19,"NM","B","BPS MENU RPT OTHER",2)

"BLD",9499,"KRN",19,"NM","B","BPS OPECC PRODUCTIVITY REPORT",1)

"BLD",9499,"KRN",19.1,0)
19.1
"BLD",9499,"KRN",19.1,"NM",0)
^9.68A^1^1
"BLD",9499,"KRN",19.1,"NM",1,0)
BPS SUPERVISOR^^0
"BLD",9499,"KRN",19.1,"NM","B","BPS SUPERVISOR",1)

"BLD",9499,"KRN",101,0)
101
"BLD",9499,"KRN",101,"NM",0)
^9.68A^14^13
"BLD",9499,"KRN",101,"NM",1,0)
BPS PRTCL CMT ADD^^0
"BLD",9499,"KRN",101,"NM",2,0)
BPS PRTCL CMT ADD PHARM^^0
"BLD",9499,"KRN",101,"NM",3,0)
BPS PRTCL CMT MENU^^0
"BLD",9499,"KRN",101,"NM",4,0)
BPS PRTCL USRSCR RESUB NO REVERSE^^0
"BLD",9499,"KRN",101,"NM",5,0)
BPS PRTCL USRSCR HIDDEN ACTIONS^^2
"BLD",9499,"KRN",101,"NM",6,0)
BPS OPECC REJECT MENU^^0
"BLD",9499,"KRN",101,"NM",7,0)
BPS OPECC REJECT VIEW ECME RX^^0
"BLD",9499,"KRN",101,"NM",8,0)
BPS OPECC REJECT INFO VIEW RX^^0
"BLD",9499,"KRN",101,"NM",9,0)
BPS OPECC REJECT INFO MEDICATION PROFILE^^0
"BLD",9499,"KRN",101,"NM",10,0)
BPS OPECC REJECT INFO PATIENT INFORMATION^^0
"BLD",9499,"KRN",101,"NM",11,0)
BPS PRTCL USRSCR OPECC REJECT INFORMATION^^0
"BLD",9499,"KRN",101,"NM",13,0)
BPS PRTCL USRSCR OPEN/CLOSE NON-BILLABLE ENTRY^^0
"BLD",9499,"KRN",101,"NM",14,0)
BPS PRTCL CMT EXIT^^0
"BLD",9499,"KRN",101,"NM","B","BPS OPECC REJECT INFO MEDICATION PROFILE",9)

"BLD",9499,"KRN",101,"NM","B","BPS OPECC REJECT INFO PATIENT INFORMATION",10)

"BLD",9499,"KRN",101,"NM","B","BPS OPECC REJECT INFO VIEW RX",8)

"BLD",9499,"KRN",101,"NM","B","BPS OPECC REJECT MENU",6)

"BLD",9499,"KRN",101,"NM","B","BPS OPECC REJECT VIEW ECME RX",7)

"BLD",9499,"KRN",101,"NM","B","BPS PRTCL CMT ADD",1)

"BLD",9499,"KRN",101,"NM","B","BPS PRTCL CMT ADD PHARM",2)

"BLD",9499,"KRN",101,"NM","B","BPS PRTCL CMT EXIT",14)

"BLD",9499,"KRN",101,"NM","B","BPS PRTCL CMT MENU",3)

"BLD",9499,"KRN",101,"NM","B","BPS PRTCL USRSCR HIDDEN ACTIONS",5)

"BLD",9499,"KRN",101,"NM","B","BPS PRTCL USRSCR OPECC REJECT INFORMATION",11)

"BLD",9499,"KRN",101,"NM","B","BPS PRTCL USRSCR OPEN/CLOSE NON-BILLABLE ENTRY",13)

"BLD",9499,"KRN",101,"NM","B","BPS PRTCL USRSCR RESUB NO REVERSE",4)

"BLD",9499,"KRN",409.61,0)
409.61
"BLD",9499,"KRN",409.61,"NM",0)
^9.68A^2^2
"BLD",9499,"KRN",409.61,"NM",1,0)
BPS OPECC REJECT INFORMATION^^0
"BLD",9499,"KRN",409.61,"NM",2,0)
BPS LSTMN ECME USRSCR^^0
"BLD",9499,"KRN",409.61,"NM","B","BPS LSTMN ECME USRSCR",2)

"BLD",9499,"KRN",409.61,"NM","B","BPS OPECC REJECT INFORMATION",1)

"BLD",9499,"KRN",771,0)
771
"BLD",9499,"KRN",771,"NM",0)
^9.68A^^
"BLD",9499,"KRN",779.2,0)
779.2
"BLD",9499,"KRN",870,0)
870
"BLD",9499,"KRN",8989.51,0)
8989.51
"BLD",9499,"KRN",8989.52,0)
8989.52
"BLD",9499,"KRN",8994,0)
8994
"BLD",9499,"KRN","B",.4,.4)

"BLD",9499,"KRN","B",.401,.401)

"BLD",9499,"KRN","B",.402,.402)

"BLD",9499,"KRN","B",.403,.403)

"BLD",9499,"KRN","B",.5,.5)

"BLD",9499,"KRN","B",.84,.84)

"BLD",9499,"KRN","B",3.6,3.6)

"BLD",9499,"KRN","B",3.8,3.8)

"BLD",9499,"KRN","B",9.2,9.2)

"BLD",9499,"KRN","B",9.8,9.8)

"BLD",9499,"KRN","B",19,19)

"BLD",9499,"KRN","B",19.1,19.1)

"BLD",9499,"KRN","B",101,101)

"BLD",9499,"KRN","B",409.61,409.61)

"BLD",9499,"KRN","B",771,771)

"BLD",9499,"KRN","B",779.2,779.2)

"BLD",9499,"KRN","B",870,870)

"BLD",9499,"KRN","B",8989.51,8989.51)

"BLD",9499,"KRN","B",8989.52,8989.52)

"BLD",9499,"KRN","B",8994,8994)

"BLD",9499,"QUES",0)
^9.62^^
"BLD",9499,"REQB",0)
^9.611^3^2
"BLD",9499,"REQB",2,0)
BPS*1.0*18^2
"BLD",9499,"REQB",3,0)
BPS*1.0*19^2
"BLD",9499,"REQB","B","BPS*1.0*18",2)

"BLD",9499,"REQB","B","BPS*1.0*19",3)

"DATA",9002313.25,1,0)
0^ZZ DO NOT USE - NOT SPECIFIED, DEFAULT
"DATA",9002313.25,2,0)
1^NO OVERRIDE
"DATA",9002313.25,3,0)
2^OTHER OVERRIDE
"DATA",9002313.25,4,0)
3^VACATION SUPPLY
"DATA",9002313.25,5,0)
4^LOST PRESCRIPTION
"DATA",9002313.25,6,0)
5^THERAPY CHANGE
"DATA",9002313.25,7,0)
6^STARTER DOSE
"DATA",9002313.25,8,0)
7^MEDICALLY NECESSARY
"DATA",9002313.25,9,0)
8^PROCESS COMPOUND FOR APPROVED INGREDIENTS
"DATA",9002313.25,10,0)
9^ENCOUNTERS
"DATA",9002313.25,11,0)
99^OTHER
"DATA",9002313.25,12,0)
10^MEETS PLAN LIMITATIONS
"DATA",9002313.25,13,0)
11^CERTIFICATION ON FILE
"DATA",9002313.25,14,0)
12^DME REPLACEMENT INDICATOR
"DATA",9002313.25,15,0)
13^PAYER-RECOGNIZED EMERGENCY/DISASTER ASSISTANCE REQUEST
"DATA",9002313.25,16,0)
14^LONG TERM CARE LEAVE OF ABSENCE
"DATA",9002313.25,17,0)
15^LONG TERM CARE REPLACEMENT MEDICATION
"DATA",9002313.25,18,0)
16^LONG TERM CARE EMERGENCY BOX (KIT) OR AUTOMATED DISPENSING MACHINE
"DATA",9002313.25,19,0)
17^LONG TERM CARE EMERGENCY SUPPLY REMAINDER
"DATA",9002313.25,20,0)
18^LONG TERM CARE PATIENT ADMIT/READMIT INDICATOR
"DATA",9002313.25,21,0)
19^SPLIT BILLING
"DATA",9002313.25,22,0)
21^LTC DISPENSING: 14 DAYS OR LESS NOT APPLICABLE
"DATA",9002313.25,23,0)
22^LTC DISPENSING: 7 DAYS
"DATA",9002313.25,24,0)
23^LTC DISPENSING: 4 DAYS
"DATA",9002313.25,25,0)
24^LTC DISPENSING: 3 DAYS
"DATA",9002313.25,26,0)
25^LTC DISPENSING: 2 DAYS
"DATA",9002313.25,27,0)
26^LTC DISPENSING: 1 DAY
"DATA",9002313.25,28,0)
27^LTC DISPENSING: 4-3 DAYS
"DATA",9002313.25,29,0)
28^LTC DISPENSING: 2-2-3 DAYS
"DATA",9002313.25,30,0)
29^LTC DISPENSING: DAILY AND 3-DAY WEEKEND
"DATA",9002313.25,31,0)
30^LTC DISPENSING: PER SHIFT DISPENSING 
"DATA",9002313.25,32,0)
31^LTC DISPENSING: PER MED PASS DISPENSING
"DATA",9002313.25,33,0)
32^LTC DISPENSING: PRN ON DEMAND
"DATA",9002313.25,34,0)
33^LTC DISPENSING: 7 DAY OR LESS CYCLE NOT OTHERWISE REPRESENTED
"DATA",9002313.25,35,0)
34^LTC DISPENSING: 14 DAYS DISPENSING
"DATA",9002313.25,36,0)
35^LTC DISPENSING: 8-14 DAY DISPENSING METHOD NOT LISTED
"DATA",9002313.25,37,0)
36^LTC DISPENSING: DISPENSED OUTSIDE SHORT CYCLE
"DATA",9002313.25,38,0)
20^SECTION 340B OF THE PUBLIC HEALTH ACT OF 1992
"DATA",9002313.25,39,0)
42^PRESCRIBER ID VALID - PRESCRIBING REQUIREMENTS VALIDATED
"DATA",9002313.25,40,0)
43^PRESCRIBER'S DEA ACTIVE W/DEA AUTHORIZED PRESCRIPTIVE RIGHT
"DATA",9002313.25,41,0)
44^ZZ DO NOT USE - ASSOCIATED PRESCRIBER DEA RECENTLY LICENSED OR RE-ACTIVATED
"DATA",9002313.25,42,0)
45^PRESCRIBER'S DEA VALID HOSP DEA W/SUFFIX-HAS PRESCRIPTIVE AUTH DRUG DEA SCHEDULE
"DATA",9002313.25,43,0)
46^PRESCRIBER'S DEA HAS PRESCRIPTIVE AUTHORITY FOR THIS DRUG DEA SCHEDULE
"DATA",9002313.25,44,0)
47^SHORTENED DAYS SUPPLY FILL
"DATA",9002313.25,45,0)
48^FILL SUBSEQUENT TO A SHORTENED DAYS SUPPLY FILL
"DATA",9002313.25,46,0)
49^PRESCRIBER DOES NOT CURRENTLY HAVE AN ACTIVE TYPE 1 NPI
"DATA",9002313.25,47,0)
52^PRESCRIBER'S STATE LICENSE WITH PRESCRIPTIVE AUTHORITY HAS BEEN VALIDATED
"DATA",9002313.91,1,0)
101^^BIN NUMBER^N^^^^6^N
"DATA",9002313.91,1,5)
A1^6
"DATA",9002313.91,1,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,1,10,1,0)
S BPS("X")=$G(BPS("NCPDP","BIN Number"))
"DATA",9002313.91,1,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,1,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,1,25,0)
^9002313.9104^1^1^3040130^^^^
"DATA",9002313.91,1,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,1,30,0)
^9002313.9103^1^1^3040130^^^^
"DATA",9002313.91,1,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,1)=BPS("X")
"DATA",9002313.91,2,0)
102^^VERSION/RELEASE NUMBER^A/N^^^^2^A/N
"DATA",9002313.91,2,5)
A2^2
"DATA",9002313.91,2,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,2,10,1,0)
S BPS("X")=$G(BPS("NCPDP","Version"))
"DATA",9002313.91,2,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,2,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,2,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,2,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,2,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,2,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,2)=BPS("X")
"DATA",9002313.91,3,0)
103^^TRANSACTION CODE^N^^^^2^A/N
"DATA",9002313.91,3,5)
A3^2
"DATA",9002313.91,3,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,3,10,1,0)
S BPS("X")=$G(BPS("Transaction Code"))
"DATA",9002313.91,3,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,3,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,3,25,0)
^9002313.9104^1^1^3040130^^^^
"DATA",9002313.91,3,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,3,30,0)
^9002313.9103^1^1^3040130^^^^
"DATA",9002313.91,3,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,3)=BPS("X")
"DATA",9002313.91,4,0)
104^^PROCESSOR CONTROL NUMBER^A/N^^^^10^A/N
"DATA",9002313.91,4,5)
A4^10
"DATA",9002313.91,4,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,4,10,1,0)
S BPS("X")=$G(BPS("NCPDP","PCN"))
"DATA",9002313.91,4,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,4,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,4,25,0)
^9002313.9104^1^1^3040820^^^^
"DATA",9002313.91,4,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,4,30,0)
^9002313.9103^1^1^3040820^^^^
"DATA",9002313.91,4,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,4)=BPS("X")
"DATA",9002313.91,5,0)
201^^SERVICE PROVIDER ID^A/N^^^^15^A/N
"DATA",9002313.91,5,5)
B1^12
"DATA",9002313.91,5,10,0)
^^1^1^3110523^
"DATA",9002313.91,5,10,1,0)
S BPS("X")=$G(BPS("Site","NPI"))
"DATA",9002313.91,5,20,0)
^9002313.9102^1^1^3110523^
"DATA",9002313.91,5,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,5,25,0)
^^1^1^3110523^
"DATA",9002313.91,5,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,5,30,0)
^^1^1^3110523^
"DATA",9002313.91,5,30,1,0)
S $P(^BPSC(BPS(9002313.02),200),U,1)=BPS("X")
"DATA",9002313.91,6,0)
301^^GROUP ID^A/N^^^^15^A/N
"DATA",9002313.91,6,5)
C1^15
"DATA",9002313.91,6,10,0)
^9002313.9101^1^1^3101216^
"DATA",9002313.91,6,10,1,0)
S BPS("X")=$G(BPS("Insurer","Group #"))
"DATA",9002313.91,6,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,6,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,6,25,0)
^9002313.9104^1^1^3041021^^^^
"DATA",9002313.91,6,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,6,30,0)
^9002313.9103^1^1^3041021^^^^
"DATA",9002313.91,6,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,1)=BPS("X")
"DATA",9002313.91,7,0)
302^^CARDHOLDER ID^A/N^^^^20^A/N
"DATA",9002313.91,7,5)
C2^20
"DATA",9002313.91,7,10,0)
^9002313.9101^1^1^3041021
"DATA",9002313.91,7,10,1,0)
S BPS("X")=$G(BPS("Insurer","Policy #"))
"DATA",9002313.91,7,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,7,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,7,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,7,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,7,30,0)
^9002313.9103^1^1^3101004^^^
"DATA",9002313.91,7,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,2)=$TR(BPS("X")," ","")
"DATA",9002313.91,8,0)
303^^PERSON CODE^A/N^^^^3^A/N
"DATA",9002313.91,8,5)
C3^3
"DATA",9002313.91,8,10,0)
^9002313.9101^1^1^3040114
"DATA",9002313.91,8,10,1,0)
S BPS("X")=$G(BPS("Insurer","Person Code"))
"DATA",9002313.91,8,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,8,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,8,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,8,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,8,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,8,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,3)=BPS("X")
"DATA",9002313.91,9,0)
304^^DATE OF BIRTH^N^^^^8^N
"DATA",9002313.91,9,5)
C4^8
"DATA",9002313.91,9,10,0)
^9002313.9101^1^1^3040820
"DATA",9002313.91,9,10,1,0)
S BPS("X")=$G(BPS("Patient","DOB"))
"DATA",9002313.91,9,20,0)
^9002313.9102^1^1^3101029^
"DATA",9002313.91,9,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,9,25,0)
^9002313.9104^1^1^3040820^^^^
"DATA",9002313.91,9,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,9,30,0)
^9002313.9103^1^1^3101004^
"DATA",9002313.91,9,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,4)=$G(BPS("X"))
"DATA",9002313.91,10,0)
305^^PATIENT GENDER CODE^N^^^^1^N
"DATA",9002313.91,10,5)
C5^1
"DATA",9002313.91,10,10,0)
^9002313.9101^3^3^3040114
"DATA",9002313.91,10,10,1,0)
S BPS("X")=$G(BPS("Patient","Sex"))
"DATA",9002313.91,10,10,2,0)
S BPS("X")=$E(BPS("X"),1,1)
"DATA",9002313.91,10,10,3,0)
S BPS("X")=$S(BPS("X")="M":"1",BPS("X")="F":"2",1:"0")
"DATA",9002313.91,10,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,10,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,10,25,0)
^9002313.9104^1^1^3040114^^
"DATA",9002313.91,10,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,10,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,10,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,5)=BPS("X")
"DATA",9002313.91,11,0)
306^^PATIENT RELATIONSHIP CODE^N^^^^1^N
"DATA",9002313.91,11,5)
C6^1
"DATA",9002313.91,11,10,0)
^9002313.9101^1^1^3040114
"DATA",9002313.91,11,10,1,0)
S BPS("X")=$G(BPS("Insurer","Relationship"))
"DATA",9002313.91,11,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,11,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,11,25,0)
^9002313.9104^1^1^3040114^^^
"DATA",9002313.91,11,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,11,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,11,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,6)=BPS("X")
"DATA",9002313.91,12,0)
308^^OTHER COVERAGE CODE^N^^^^2^N
"DATA",9002313.91,12,5)
C8^2
"DATA",9002313.91,12,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,12,10,1,0)
S BPS("X")=$G(BPS("Patient","Other Coverage Code"))
"DATA",9002313.91,12,10,2,0)
S:'BPS("X") BPS("X")=0
"DATA",9002313.91,12,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,12,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,12,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,12,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,12,30,0)
^9002313.9103^1^1^3101115^^^
"DATA",9002313.91,12,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),300),U,8)=BPS("X")
"DATA",9002313.91,13,0)
401^^DATE OF SERVICE^N^^^^8^N
"DATA",9002313.91,13,5)
D1^8
"DATA",9002313.91,13,10,0)
^^1^1^3121128
"DATA",9002313.91,13,10,1,0)
S BPS("X")=$G(BPS("NCPDP","DOS"))
"DATA",9002313.91,13,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,13,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,13,25,0)
^9002313.9104^1^1^3040113^^^^
"DATA",9002313.91,13,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,13,30,0)
^^1^1^3121128
"DATA",9002313.91,13,30,1,0)
S $P(^BPSC(BPS(9002313.02),401),U,1)=BPS("X")
"DATA",9002313.91,14,0)
307^^PLACE OF SERVICE^A/N^^^^2^N
"DATA",9002313.91,14,5)
C7^2
"DATA",9002313.91,14,10,0)
^9002313.9101^1^1^3040820
"DATA",9002313.91,14,10,1,0)
S BPS("X")=$G(BPS("Patient","Place of Service"))
"DATA",9002313.91,14,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,14,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,14,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,14,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,14,30,0)
^9002313.9103^1^1^3100910^^^^
"DATA",9002313.91,14,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,7)=BPS("X")
"DATA",9002313.91,15,0)
309^^ELIGIBILITY CLARIFICATION CODE^N^^^^1^N
"DATA",9002313.91,15,5)
C9^1
"DATA",9002313.91,15,10,0)
^^2^2^3110727^
"DATA",9002313.91,15,10,1,0)
S BPS("X")=$G(BPS("Insurer","Eligibility Clarification Code"))
"DATA",9002313.91,15,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,15,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,15,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,15,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,15,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,15,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,15,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,9)=BPS("X")
"DATA",9002313.91,16,0)
310^^PATIENT FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,16,5)
CA^12
"DATA",9002313.91,16,10,0)
^^1^1^3101216^
"DATA",9002313.91,16,10,1,0)
S BPS("X")=$G(BPS("Patient","First Name"))
"DATA",9002313.91,16,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,16,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,16,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,16,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,16,30,0)
^9002313.9103^1^1^3101004^^^^
"DATA",9002313.91,16,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,10)=BPS("X")
"DATA",9002313.91,17,0)
311^^PATIENT LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,17,5)
CB^15
"DATA",9002313.91,17,10,0)
^^1^1^3101216^
"DATA",9002313.91,17,10,1,0)
S BPS("X")=$G(BPS("Patient","Last Name"))
"DATA",9002313.91,17,20,0)
^9002313.9102^1^1^3101004^
"DATA",9002313.91,17,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,17,25,0)
^9002313.9104^1^1^3101004^^^
"DATA",9002313.91,17,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,17,30,0)
^9002313.9103^1^1^3101004^^^
"DATA",9002313.91,17,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,11)=$G(BPS("X"))
"DATA",9002313.91,18,0)
402^^PRESCRIPTION/SERVICE REF NO^N^^^^12^N
"DATA",9002313.91,18,1)
PRESCRIPTION/SERVICE REFERENCE NUMBER
"DATA",9002313.91,18,5)
D2^7
"DATA",9002313.91,18,10,0)
^9002313.9101^1^1^3101115^^^^
"DATA",9002313.91,18,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"RX IEN"))
"DATA",9002313.91,18,20,0)
^^2^2^3121128
"DATA",9002313.91,18,20,1,0)
I $L($G(BPS("X")))>12 S BPS("X")=$E(BPS("X"),$L(BPS("X"))-11,$L(BPS("X")))
"DATA",9002313.91,18,20,2,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,18,25,0)
^9002313.9104^2^2^3101006^^^^
"DATA",9002313.91,18,25,1,0)
I $L(BPS("X"))>7 S BPS("X")=$E(BPS("X"),$L(BPS("X"))-6,$L(BPS("X")))
"DATA",9002313.91,18,25,2,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),7)
"DATA",9002313.91,18,30,0)
^9002313.9103^1^1^3101115^^^^
"DATA",9002313.91,18,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,2)=BPS("X")
"DATA",9002313.91,19,0)
403^^FILL NUMBER^N^^^^2^N
"DATA",9002313.91,19,5)
D3^2
"DATA",9002313.91,19,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,19,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Refill #"))
"DATA",9002313.91,19,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,19,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,19,25,0)
^9002313.9104^1^1^3030718^^
"DATA",9002313.91,19,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,19,30,0)
1^9002313.9103^1^1^3030718^^^
"DATA",9002313.91,19,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,3)=BPS("X")
"DATA",9002313.91,20,0)
B08^^PATIENT STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,20,5)
7A^^2008
"DATA",9002313.91,20,10,0)
^^1^1^3150112^
"DATA",9002313.91,20,10,1,0)
S BPS("X")=$G(BPS("Patient","Street Address Line 1"))
"DATA",9002313.91,20,20,0)
^^1^1^3141223
"DATA",9002313.91,20,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,20,30,0)
^^1^1^3141223
"DATA",9002313.91,20,30,1,0)
S $P(^BPSC(BPS(9002313.02),"B00"),U,8)=BPS("X")
"DATA",9002313.91,21,0)
405^^DAYS SUPPLY^N^^^^3^N
"DATA",9002313.91,21,5)
D5^3
"DATA",9002313.91,21,10,0)
^9002313.9101^1^1^3040109
"DATA",9002313.91,21,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Days Supply"))
"DATA",9002313.91,21,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,21,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,21,25,0)
^9002313.9104^1^1^3030827^^^^
"DATA",9002313.91,21,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,21,30,0)
^9002313.9103^1^1^3030827^^^^
"DATA",9002313.91,21,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,5)=BPS("X")
"DATA",9002313.91,22,0)
406^^COMPOUND CODE^N^^^^1^N
"DATA",9002313.91,22,5)
D6^407
"DATA",9002313.91,22,10,0)
^9002313.9101^2^2^3040114
"DATA",9002313.91,22,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Compound Code"))
"DATA",9002313.91,22,10,2,0)
S:BPS("X")="" BPS("X")=1
"DATA",9002313.91,22,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,22,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,22,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,22,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,22,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,22,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,6)=BPS("X")
"DATA",9002313.91,23,0)
407^^PRODUCT/SERVICE ID^A/N^^^^19^A/N
"DATA",9002313.91,23,5)
D7^19
"DATA",9002313.91,23,10,0)
^9002313.9101^2^2^3030825
"DATA",9002313.91,23,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"NDC"))
"DATA",9002313.91,23,10,2,0)
S BPS("X")=$$NDCF^BPSECFM(BPS("X"))
"DATA",9002313.91,23,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,23,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,23,25,0)
^9002313.9104^1^1^3030825^^^
"DATA",9002313.91,23,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,23,30,0)
^9002313.9103^1^1^3030825^^^^
"DATA",9002313.91,23,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,7)=BPS("X")
"DATA",9002313.91,24,0)
408^^DAW PRODUCT SELECTION CODE^N^^^^1^A/N
"DATA",9002313.91,24,1)
DISPENSE AS WRITTEN (DAW)/ PRODUCT SELECTION CODE
"DATA",9002313.91,24,5)
D8^1
"DATA",9002313.91,24,10,0)
^9002313.9101^2^2^3070205
"DATA",9002313.91,24,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"DAW"))
"DATA",9002313.91,24,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,24,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,24,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,24,25,0)
^9002313.9104^1^1^3061120^
"DATA",9002313.91,24,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,24,30,0)
^9002313.9103^1^1^3030722^
"DATA",9002313.91,24,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,8)=BPS("X")
"DATA",9002313.91,25,0)
409^^INGREDIENT COST^D^^^^8^D
"DATA",9002313.91,25,5)
D9^8
"DATA",9002313.91,25,10,0)
^^1^1^3121128
"DATA",9002313.91,25,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Ingredient Cost"))
"DATA",9002313.91,25,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,25,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,25,25,0)
^9002313.9104^1^1^3040907^^^^
"DATA",9002313.91,25,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,25,30,0)
^9002313.9103^1^1^3040907^^^^
"DATA",9002313.91,25,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,9)=BPS("X")
"DATA",9002313.91,26,0)
411^^PRESCRIBER ID^A/N^^^^15^A/N
"DATA",9002313.91,26,5)
DB^15
"DATA",9002313.91,26,10,0)
^9002313.9101^1^1^3070214
"DATA",9002313.91,26,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber NPI"))
"DATA",9002313.91,26,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,26,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,26,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,26,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,26,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,26,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,11)=BPS("X")
"DATA",9002313.91,27,0)
414^^DATE PRESCRIPTION WRITTEN^N^^^^8^N
"DATA",9002313.91,27,5)
DE^8
"DATA",9002313.91,27,10,0)
^9002313.9101^1^1^3040913
"DATA",9002313.91,27,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Date Written"))
"DATA",9002313.91,27,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,27,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,27,25,0)
^9002313.9104^1^1^3040913^^^^
"DATA",9002313.91,27,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,27,30,0)
^9002313.9103^1^1^3040913^^^^
"DATA",9002313.91,27,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,14)=BPS("X")
"DATA",9002313.91,28,0)
415^^NUMBER OF REFILLS AUTHORIZED^N^^^^2^N
"DATA",9002313.91,28,5)
DF^2
"DATA",9002313.91,28,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,28,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"# Refills"))
"DATA",9002313.91,28,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,28,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,28,25,0)
^9002313.9104^1^1^3030718^^
"DATA",9002313.91,28,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,28,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,28,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,15)=BPS("X")
"DATA",9002313.91,29,0)
419^^PRESCRIPTION ORIGIN CODE^N^^^^1^N
"DATA",9002313.91,29,5)
DJ^1
"DATA",9002313.91,29,10,0)
^9002313.9101^2^2^3030721
"DATA",9002313.91,29,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Origin Code"))
"DATA",9002313.91,29,10,2,0)
S:BPS("X")="" BPS("X")="0"
"DATA",9002313.91,29,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,29,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,29,25,0)
^9002313.9104^1^1^3030721^^^^
"DATA",9002313.91,29,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,29,30,0)
^9002313.9103^1^1^3030721^^^^
"DATA",9002313.91,29,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,19)=BPS("X")
"DATA",9002313.91,30,0)
420^^SUBMISSION CLARIFICATION CODE^N^^^^2^N
"DATA",9002313.91,30,5)
DK^2
"DATA",9002313.91,30,10,0)
^9002313.9101^1^1^3101006^^^^
"DATA",9002313.91,30,10,1,0)
; GET CODE handled by FLD420^BPSOSSG
"DATA",9002313.91,30,20,0)
^9002313.9102^1^1^3101006^^^^
"DATA",9002313.91,30,20,1,0)
; vD.0 FORMAT CODE handled by FLD420^BPSOSSG
"DATA",9002313.91,30,25,0)
^9002313.9104^1^1^3101006^^^^
"DATA",9002313.91,30,25,1,0)
; FORMAT CODE handled by FLD420^BPSOSSG
"DATA",9002313.91,30,30,0)
^9002313.9103^1^1^3101006^^^^
"DATA",9002313.91,30,30,1,0)
D FLD420^BPSOSSG
"DATA",9002313.91,31,0)
453^^ORIG PRESCR PROD/SERV ID QUAL^N^^^^2^A/N
"DATA",9002313.91,31,1)
ORIGINALLY PRESCRIBED PRODUCT/SERVICE ID QUALIFIER
"DATA",9002313.91,31,5)
EJ^2
"DATA",9002313.91,31,10,0)
^9002313.9101^1^1^3040907
"DATA",9002313.91,31,10,1,0)
S BPS("X")=""
"DATA",9002313.91,31,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,31,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,31,25,0)
^9002313.9104^1^1^3040907^^^^
"DATA",9002313.91,31,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,31,30,0)
^9002313.9103^1^1^3040907^^^
"DATA",9002313.91,31,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,3)=""
"DATA",9002313.91,32,0)
B09^^PATIENT STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,32,5)
7B^^2009
"DATA",9002313.91,32,10,0)
^^1^1^3150112^
"DATA",9002313.91,32,10,1,0)
S BPS("X")=$G(BPS("Patient","Street Address Line 2"))
"DATA",9002313.91,32,20,0)
^^1^1^3141223
"DATA",9002313.91,32,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,32,30,0)
^^1^1^3141223
"DATA",9002313.91,32,30,1,0)
S $P(^BPSC(BPS(9002313.02),"B00"),U,9)=BPS("X")
"DATA",9002313.91,33,0)
423^^BASIS OF COST DETERMINATION^A/N^^^^2^A/N
"DATA",9002313.91,33,5)
DN^2
"DATA",9002313.91,33,10,0)
^9002313.9101^1^1^3030916
"DATA",9002313.91,33,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Basis of Cost Determination"))
"DATA",9002313.91,33,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,33,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,33,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,33,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,33,30,0)
^9002313.9103^1^1^3030916^^^^
"DATA",9002313.91,33,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,23)=BPS("X")
"DATA",9002313.91,34,0)
424^^DIAGNOSIS CODE^A/N^^^^15^A/N
"DATA",9002313.91,34,5)
DO^15
"DATA",9002313.91,34,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,34,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Diagnosis Code"))
"DATA",9002313.91,34,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,34,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,34,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,34,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,34,30,0)
^9002313.9103^1^1^3030718^^
"DATA",9002313.91,34,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,24)=BPS("X")
"DATA",9002313.91,35,0)
430^^GROSS AMOUNT DUE^D^^^^8^D
"DATA",9002313.91,35,5)
DU^8
"DATA",9002313.91,35,10,0)
^9002313.9101^1^1^3030722
"DATA",9002313.91,35,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Gross Amount Due"))
"DATA",9002313.91,35,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,35,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,35,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,35,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,35,30,0)
^9002313.9103^1^1^3030722^^^^
"DATA",9002313.91,35,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,30)=BPS("X")
"DATA",9002313.91,36,0)
433^^PATIENT PAID AMOUNT^D^^^^8^D
"DATA",9002313.91,36,1)
PATIENT PAID AMOUNT SUBMITTED
"DATA",9002313.91,36,5)
DX^8
"DATA",9002313.91,36,10,0)
^^2^2^3110727^
"DATA",9002313.91,36,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Patient Paid Amount"))
"DATA",9002313.91,36,10,2,0)
S:BPS("X")="" BPS("X")="0.00"
"DATA",9002313.91,36,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,36,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,36,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,36,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,36,30,0)
^9002313.9103^1^1^3030916^^
"DATA",9002313.91,36,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),430),U,3)=BPS("X")
"DATA",9002313.91,37,0)
439^^REASON FOR SERVICE CODE^A/N^^^^2^A/N
"DATA",9002313.91,37,5)
E4^2
"DATA",9002313.91,37,10,0)
^9002313.9101^1^1^3031230
"DATA",9002313.91,37,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"DUR","DUR Conflict Code",439))
"DATA",9002313.91,37,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,37,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,37,25,0)
^9002313.9104^1^1^3031230^^
"DATA",9002313.91,37,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,37,30,0)
^9002313.9103^1^1^3101115^^^^
"DATA",9002313.91,37,30,1,0)
D FLD439^BPSOSSG
"DATA",9002313.91,38,0)
440^^PROFESSIONAL SERVICE CODE^A/N^^^^2^A/N
"DATA",9002313.91,38,5)
E5^2
"DATA",9002313.91,38,10,0)
^9002313.9101^1^1^3031230
"DATA",9002313.91,38,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"DUR","DUR Intervention Code",440))
"DATA",9002313.91,38,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,38,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,38,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,38,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,38,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,38,30,1,0)
D FLD440^BPSOSSG
"DATA",9002313.91,39,0)
441^^RESULT OF SERVICE CODE^A/N^^^^2^A/N
"DATA",9002313.91,39,5)
E6^2
"DATA",9002313.91,39,10,0)
^9002313.9101^2^2^3070214
"DATA",9002313.91,39,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"DUR","DUR Outcome Code",441))
"DATA",9002313.91,39,10,2,0)
S:BPS("X")="" BPS("X")="00"
"DATA",9002313.91,39,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,39,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,39,25,0)
^9002313.9104^1^1^3070214^^
"DATA",9002313.91,39,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,39,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,39,30,1,0)
D FLD441^BPSOSSG
"DATA",9002313.91,40,0)
442^^QUANTITY DISPENSED^N^^^^10^N
"DATA",9002313.91,40,5)
E7^10
"DATA",9002313.91,40,10,0)
^9002313.9101^1^1^3070620
"DATA",9002313.91,40,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Quantity"))*1000\1
"DATA",9002313.91,40,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,40,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,40,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,40,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,40,30,0)
^9002313.9103^1^1^3040109^^^^
"DATA",9002313.91,40,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,2)=BPS("X")
"DATA",9002313.91,41,0)
B38^^PATIENT ID ASSOC COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,41,1)
PATIENT ID ASSOCIATED COUNTRY CODE
"DATA",9002313.91,41,5)
1Y^^2038
"DATA",9002313.91,41,10,0)
^^1^1^3141223
"DATA",9002313.91,41,10,1,0)
S BPS("X")="US"
"DATA",9002313.91,41,20,0)
^^1^1^3141223
"DATA",9002313.91,41,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,41,30,0)
^^1^1^3141223
"DATA",9002313.91,41,30,1,0)
S $P(^BPSC(BPS(9002313.02),"B30"),U,8)=BPS("X")
"DATA",9002313.91,42,0)
412^^DISPENSING FEE SUBMITTED^D^^^^8^D
"DATA",9002313.91,42,5)
DC^8
"DATA",9002313.91,42,10,0)
^^1^1^3121128
"DATA",9002313.91,42,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Dispensing Fee"))
"DATA",9002313.91,42,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,42,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,42,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,42,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,42,30,0)
^9002313.9103^1^1^3040907^^^^
"DATA",9002313.91,42,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,12)=BPS("X")
"DATA",9002313.91,43,0)
B26^^PRESCRIBER PHONE NUMBER EXT^^^^^8^N
"DATA",9002313.91,43,1)
PRESCRIBER TELEPHONE NUMBER EXTENSION
"DATA",9002313.91,43,5)
7T^^2026
"DATA",9002313.91,43,10,0)
^^1^1^3141223
"DATA",9002313.91,43,10,1,0)
S BPS("X")=""
"DATA",9002313.91,43,20,0)
^^1^1^3141223
"DATA",9002313.91,43,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,43,30,0)
^^1^1^3141223
"DATA",9002313.91,43,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,6)=BPS("X")
"DATA",9002313.91,44,0)
418^^LEVEL OF SERVICE^N^^^^2^N
"DATA",9002313.91,44,5)
DI^2
"DATA",9002313.91,44,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,44,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Level of Service"))
"DATA",9002313.91,44,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,44,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,44,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,44,25,0)
^9002313.9104^1^1^3070215^^
"DATA",9002313.91,44,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,44,30,0)
^9002313.9103^1^1^3070215^^^^
"DATA",9002313.91,44,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,18)=BPS("X")
"DATA",9002313.91,45,0)
421^^PRIMARY CARE PROVIDER ID^A/N^^^^15^A/N
"DATA",9002313.91,45,5)
DL^15
"DATA",9002313.91,45,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,45,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Primary Care Provider NPI"))
"DATA",9002313.91,45,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,45,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,45,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,45,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,45,30,0)
^9002313.9103^1^1^3041015^
"DATA",9002313.91,45,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,21)=""
"DATA",9002313.91,46,0)
426^^USUAL AND CUSTOMARY CHARGE^D^^^^8^D
"DATA",9002313.91,46,5)
DQ^8
"DATA",9002313.91,46,10,0)
^9002313.9101^1^1^3031219
"DATA",9002313.91,46,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Usual & Customary"))
"DATA",9002313.91,46,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,46,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,46,25,0)
^9002313.9104^1^1^3031219^^^^
"DATA",9002313.91,46,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,46,30,0)
^9002313.9103^1^1^3031219^^^^
"DATA",9002313.91,46,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,26)=BPS("X")
"DATA",9002313.91,47,0)
429^^SPECIAL PACKAGING INDICATOR^N^^^^1^N
"DATA",9002313.91,47,5)
DT^1
"DATA",9002313.91,47,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,47,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Unit Dose Indicator"))
"DATA",9002313.91,47,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,47,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,47,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,47,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,47,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,47,30,0)
^9002313.9103^1^1^3030823^^^
"DATA",9002313.91,47,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,29)=BPS("X")
"DATA",9002313.91,48,0)
431^^OTHER PAYOR AMOUNT^D^^^^8^D
"DATA",9002313.91,48,5)
DV^8
"DATA",9002313.91,48,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,48,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,48,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,48,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,48,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,48,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,48,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,48,30,1,0)
D SET431^BPSFLD01
"DATA",9002313.91,49,0)
438^^INCENTIVE AMOUNT SUBMITTED^D^^^^8^D
"DATA",9002313.91,49,5)
E3^8
"DATA",9002313.91,49,10,0)
^^1^1^3110505^
"DATA",9002313.91,49,10,1,0)
S BPS("X")=0
"DATA",9002313.91,49,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,49,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,49,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,49,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,49,30,0)
^9002313.9103^1^1^3040907^
"DATA",9002313.91,49,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),430),U,8)=""
"DATA",9002313.91,50,0)
B27^^PRESCRIBER STREET ADDR LINE 1^^^^^40^A/N
"DATA",9002313.91,50,1)
PRESCRIBER STREET ADDRESS LINE 1
"DATA",9002313.91,50,5)
7U^^2027
"DATA",9002313.91,50,10,0)
^^1^1^3150112^
"DATA",9002313.91,50,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Street Address Line 1"))
"DATA",9002313.91,50,20,0)
^^1^1^3141223
"DATA",9002313.91,50,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,50,30,0)
^^1^1^3141223
"DATA",9002313.91,50,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,7)=BPS("X")
"DATA",9002313.91,51,0)
443^^OTHER PAYER DATE^N^^^^8^N
"DATA",9002313.91,51,5)
E8^8
"DATA",9002313.91,51,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,51,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,51,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,51,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,51,25,0)
^9002313.9104^1^1^3040224^
"DATA",9002313.91,51,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,51,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,51,30,1,0)
D SET443^BPSFLD01
"DATA",9002313.91,52,0)
313^^CARDHOLDER LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,52,5)
CD^15
"DATA",9002313.91,52,10,0)
^^1^1^3101216^
"DATA",9002313.91,52,10,1,0)
S BPS("X")=$G(BPS("Cardholder","Last Name"))
"DATA",9002313.91,52,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,52,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,52,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,52,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,52,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,52,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,13)=BPS("X")
"DATA",9002313.91,53,0)
312^^CARDHOLDER FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,53,5)
CC^12
"DATA",9002313.91,53,10,0)
^^1^1^3101216^
"DATA",9002313.91,53,10,1,0)
S BPS("X")=$G(BPS("Cardholder","First Name"))
"DATA",9002313.91,53,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,53,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,53,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,53,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),12)
"DATA",9002313.91,53,30,0)
^9002313.9103^1^1^3101115^^^^
"DATA",9002313.91,53,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,12)=BPS("X")
"DATA",9002313.91,54,0)
322^^PATIENT STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,54,5)
CM^30
"DATA",9002313.91,54,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,54,10,1,0)
S BPS("X")=$G(BPS("Patient","Street Address"))
"DATA",9002313.91,54,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,54,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,54,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,54,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,54,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,54,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,2)=BPS("X")
"DATA",9002313.91,55,0)
323^^PATIENT CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,55,5)
CN^20
"DATA",9002313.91,55,10,0)
^9002313.9101^1^1^3030703
"DATA",9002313.91,55,10,1,0)
S BPS("X")=$G(BPS("Patient","City"))
"DATA",9002313.91,55,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,55,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,55,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,55,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),20)
"DATA",9002313.91,55,30,0)
^9002313.9103^1^1^3030703^^^^
"DATA",9002313.91,55,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,3)=BPS("X")
"DATA",9002313.91,56,0)
324^^PATIENT STATE/PROVINCE ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,56,5)
CO^2
"DATA",9002313.91,56,10,0)
^9002313.9101^1^1^3030717
"DATA",9002313.91,56,10,1,0)
S BPS("X")=$G(BPS("Patient","State"))
"DATA",9002313.91,56,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,56,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,56,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,56,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,56,30,0)
^9002313.9103^1^1^3030717^^^^
"DATA",9002313.91,56,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,4)=BPS("X")
"DATA",9002313.91,57,0)
325^^PATIENT ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,57,5)
CP^15
"DATA",9002313.91,57,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,57,10,1,0)
S BPS("X")=$G(BPS("Patient","Zip"))
"DATA",9002313.91,57,20,0)
^^2^2^3121128
"DATA",9002313.91,57,20,1,0)
S BPS("X")=$TR($G(BPS("X")),"-/._","")
"DATA",9002313.91,57,20,2,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,57,25,0)
^9002313.9104^2^2^3030718^^^^
"DATA",9002313.91,57,25,1,0)
S BPS("X")=$TR(BPS("X"),"-/._","")
"DATA",9002313.91,57,25,2,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),9)
"DATA",9002313.91,57,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,57,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,5)=BPS("X")
"DATA",9002313.91,58,0)
314^^HOME PLAN^A/N^^^^3^A/N
"DATA",9002313.91,58,5)
CE^3
"DATA",9002313.91,58,10,0)
^9002313.9101^1^1^3030823
"DATA",9002313.91,58,10,1,0)
S BPS("X")=$G(BPS("Home Plan"))
"DATA",9002313.91,58,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,58,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,58,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,58,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),3)
"DATA",9002313.91,58,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,58,30,1,0)
S $P(^BPSC(BPS(9002313.02),300),U,14)=BPS("X")
"DATA",9002313.91,59,0)
315^^EMPLOYER NAME^A/N^^^^30^A/N
"DATA",9002313.91,59,5)
CF^30
"DATA",9002313.91,59,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,59,10,1,0)
D EMPL^BPSOSSG
"DATA",9002313.91,59,10,2,0)
S BPS("X")=$G(BPS("Employer","Name"))
"DATA",9002313.91,59,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,59,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,59,25,0)
^9002313.9104^1^1^3030718^^^
"DATA",9002313.91,59,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,59,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,59,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,5)=BPS("X")
"DATA",9002313.91,60,0)
316^^EMPLOYER STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,60,5)
CG^30
"DATA",9002313.91,60,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,60,10,1,0)
S BPS("X")=$G(BPS("Employer","Address"))
"DATA",9002313.91,60,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,60,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,60,25,0)
^9002313.9104^1^1^3030718^^^
"DATA",9002313.91,60,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,60,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,60,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,6)=BPS("X")
"DATA",9002313.91,61,0)
317^^EMPLOYER CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,61,5)
CH^20
"DATA",9002313.91,61,10,0)
^9002313.9101^1^1^3150112^
"DATA",9002313.91,61,10,1,0)
S BPS("X")=$G(BPS("Employer","City"))
"DATA",9002313.91,61,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,61,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,61,25,0)
^9002313.9104^1^1^3030718^^
"DATA",9002313.91,61,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),20)
"DATA",9002313.91,61,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,61,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,7)=BPS("X")
"DATA",9002313.91,62,0)
318^^EMPLOYER STATE/PROV ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,62,1)
EMPLOYER STATE/ PROVINCE ADDRESS
"DATA",9002313.91,62,5)
CI^2
"DATA",9002313.91,62,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,62,10,1,0)
S BPS("X")=$G(BPS("Employer","State"))
"DATA",9002313.91,62,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,62,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,62,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,62,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,62,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,62,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,8)=BPS("X")
"DATA",9002313.91,63,0)
319^^EMPLOYER ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,63,5)
CJ^15
"DATA",9002313.91,63,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,63,10,1,0)
S BPS("X")=$G(BPS("Employer","Zip Code"))
"DATA",9002313.91,63,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,63,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,63,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,63,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,63,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,63,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,9)=BPS("X")
"DATA",9002313.91,64,0)
327^^CARRIER ID^A/N^^^^10^A/N
"DATA",9002313.91,64,5)
CR^12
"DATA",9002313.91,64,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,64,10,1,0)
S BPS("X")=$G(BPS("Carrier ID #"))
"DATA",9002313.91,64,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,64,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,64,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,64,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),12)
"DATA",9002313.91,64,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,64,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),320),U,7)=BPS("X")
"DATA",9002313.91,65,0)
B28^^PRESCRIBER STREET ADDR LINE 2^^^^^40^A/N
"DATA",9002313.91,65,1)
PRESCRIBER STREET ADDRESS LINE 2
"DATA",9002313.91,65,5)
7V^^2028
"DATA",9002313.91,65,10,0)
^^1^1^3150112^
"DATA",9002313.91,65,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Street Address Line 2"))
"DATA",9002313.91,65,20,0)
^^1^1^3141223
"DATA",9002313.91,65,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,65,30,0)
^^1^1^3141223
"DATA",9002313.91,65,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,8)=BPS("X")
"DATA",9002313.91,67,0)
427^^PRESCRIBER LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,67,5)
DR^15
"DATA",9002313.91,67,10,0)
^9002313.9101^1^1^3110107^^
"DATA",9002313.91,67,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Last Name"))
"DATA",9002313.91,67,20,0)
^9002313.9102^1^1^3110107^
"DATA",9002313.91,67,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,67,25,0)
^9002313.9104^1^1^3110107^^
"DATA",9002313.91,67,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,67,30,0)
^9002313.9103^1^1^3110107^^^^
"DATA",9002313.91,67,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),420),U,27)=BPS("X")
"DATA",9002313.91,69,0)
434^^DATE OF INJURY^N^^^^8^N
"DATA",9002313.91,69,5)
DY^8
"DATA",9002313.91,69,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,69,10,1,0)
S BPS("X")=$G(BPS("Date of Injury"))
"DATA",9002313.91,69,10,2,0)
S BPS("X")=$$DTF1^BPSECFM(BPS("X"))
"DATA",9002313.91,69,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,69,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,69,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,69,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,69,30,0)
^9002313.9103^1^1^3010125^^
"DATA",9002313.91,69,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,34)=BPS("X")
"DATA",9002313.91,70,0)
435^^CLAIM/REFERENCE ID^A/N^^^^30^A/N
"DATA",9002313.91,70,5)
DZ^30
"DATA",9002313.91,70,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,70,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Claim/Ref ID #"))
"DATA",9002313.91,70,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,70,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,70,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,70,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,70,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,70,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,35)=BPS("X")
"DATA",9002313.91,71,0)
436^^PRODUCT/SERVICE ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,71,5)
E1^2
"DATA",9002313.91,71,10,0)
^^1^1^3121128
"DATA",9002313.91,71,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Product ID Qualifier"))
"DATA",9002313.91,71,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,71,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,71,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,71,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,71,30,0)
^9002313.9103^1^1^3040107^^^^
"DATA",9002313.91,71,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),430),U,6)=BPS("X")
"DATA",9002313.91,74,0)
498.51^^PRIOR AUTH PROCESSED DATE^A/N^^^^8^N
"DATA",9002313.91,74,5)
PR^8
"DATA",9002313.91,74,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,74,10,1,0)
S BPS("X")=""
"DATA",9002313.91,74,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,74,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,75,0)
202^^SERV PROVIDER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,75,1)
SERVICE PROVIDER ID QUALIFIER
"DATA",9002313.91,75,5)
B2^2
"DATA",9002313.91,75,10,0)
^9002313.9101^1^1^3070214
"DATA",9002313.91,75,10,1,0)
S BPS("X")="01"
"DATA",9002313.91,75,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,75,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,75,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,75,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,75,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,75,30,1,0)
S $P(^BPSC(BPS(9002313.02),200),U,2)=BPS("X") ;VA
"DATA",9002313.91,76,0)
110^^SOFTWARE VENDOR/CERT ID^A/N^^^^10^A/N
"DATA",9002313.91,76,1)
SOFTWARE VENDOR/ CERTIFICATION ID
"DATA",9002313.91,76,5)
AK^10
"DATA",9002313.91,76,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,76,10,1,0)
S BPS("X")=$G(BPS("NCPDP","Software Vendor/Cert ID"))
"DATA",9002313.91,76,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,76,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,76,25,0)
^9002313.9104^1^1^3040202^^^^
"DATA",9002313.91,76,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10) ;VA
"DATA",9002313.91,76,30,0)
^9002313.9103^1^1^3061023^
"DATA",9002313.91,76,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,10)=BPS("X")
"DATA",9002313.91,77,0)
331^^PATIENT ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,77,5)
CX^2
"DATA",9002313.91,77,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,77,10,1,0)
S BPS("X")="01"
"DATA",9002313.91,77,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,77,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,77,25,0)
^9002313.9104^1^1^3030718^^
"DATA",9002313.91,77,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,77,30,0)
^9002313.9103^1^1^3030718^^^^
"DATA",9002313.91,77,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,1)=BPS("X") ;VA
"DATA",9002313.91,78,0)
332^^PATIENT ID^A/N^^^^20^A/N
"DATA",9002313.91,78,5)
CY^20
"DATA",9002313.91,78,10,0)
^9002313.9101^1^1^3061023
"DATA",9002313.91,78,10,1,0)
S BPS("X")=$G(BPS("Patient","SSN"))
"DATA",9002313.91,78,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,78,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,78,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,78,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,78,30,0)
^9002313.9103^1^1^3040820^^^^
"DATA",9002313.91,78,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,2)=BPS("X") ;VA
"DATA",9002313.91,79,0)
326^^PATIENT TELEPHONE NUMBER^N^^^^10^N
"DATA",9002313.91,79,5)
CQ^10
"DATA",9002313.91,79,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,79,10,1,0)
S BPS("X")=$TR($G(BPS("Patient","Phone #")),"#() -_*.@")
"DATA",9002313.91,79,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,79,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,79,25,0)
^9002313.9104^1^1^3101115^
"DATA",9002313.91,79,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,79,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,79,30,1,0)
S $P(^BPSC(BPS(9002313.02),321),U,6)=BPS("X")
"DATA",9002313.91,80,0)
455^^PRESCRIPTION/SERV REF NO QLFR^A/N^^^^1^A/N
"DATA",9002313.91,80,1)
PRESCRIPTION/ SERVICE REFERENCE NUMBER QUALIFIER
"DATA",9002313.91,80,5)
EM^1
"DATA",9002313.91,80,10,0)
^9002313.9101^1^1^3101008^
"DATA",9002313.91,80,10,1,0)
S BPS("X")=1
"DATA",9002313.91,80,20,0)
^9002313.9102^1^1^3101007^^
"DATA",9002313.91,80,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,80,25,0)
^9002313.9104^1^1^3101007^^^
"DATA",9002313.91,80,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,80,30,0)
^9002313.9103^1^1^3101007^^^^
"DATA",9002313.91,80,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,5)=BPS("X")
"DATA",9002313.91,81,0)
460^^QUANTITY PRESCRIBED^N^^^^10^N
"DATA",9002313.91,81,5)
ET^10
"DATA",9002313.91,81,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,81,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Quantity"))*1000\1
"DATA",9002313.91,81,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,81,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,81,25,0)
^9002313.9104^1^1^3030827^^^^
"DATA",9002313.91,81,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,81,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,81,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,10)=BPS("X")
"DATA",9002313.91,82,0)
465^^PROVIDER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,82,5)
EY^2
"DATA",9002313.91,82,10,0)
^9002313.9101^1^1^3070214
"DATA",9002313.91,82,10,1,0)
S BPS("X")="05"
"DATA",9002313.91,82,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,82,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,82,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,82,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,82,30,0)
^9002313.9103^1^1^3041015^
"DATA",9002313.91,82,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,5)=""
"DATA",9002313.91,83,0)
444^^PROVIDER ID^A/N^^^^15^A/N
"DATA",9002313.91,83,5)
E9^15
"DATA",9002313.91,83,10,0)
^9002313.9101^1^1^3070214
"DATA",9002313.91,83,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Provider NPI"))
"DATA",9002313.91,83,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,83,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,83,25,0)
^9002313.9104^1^1^3070214^
"DATA",9002313.91,83,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,83,30,0)
^9002313.9103^1^1^3041015^
"DATA",9002313.91,83,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,4)=""
"DATA",9002313.91,84,0)
466^^PRESCRIBER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,84,5)
EZ^2
"DATA",9002313.91,84,10,0)
^^2^2^3101216^
"DATA",9002313.91,84,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber ID Qualifier"))
"DATA",9002313.91,84,10,2,0)
S:BPS("X")="" BPS("X")="01"
"DATA",9002313.91,84,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,84,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,84,25,0)
^9002313.9104^1^1^3070214^^^^
"DATA",9002313.91,84,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,84,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,84,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,6)=BPS("X")
"DATA",9002313.91,85,0)
467^^PRESCRIBER LOCATION CODE^A/N^^^^3^A/N
"DATA",9002313.91,85,5)
1E^3
"DATA",9002313.91,85,10,0)
^9002313.9101^1^1^3030721
"DATA",9002313.91,85,10,1,0)
S BPS("X")=$G(BPS("RX",1,"Prescriber Billing Location"))
"DATA",9002313.91,85,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,85,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,85,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,85,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,85,30,0)
^9002313.9103^1^1^3030721^^^^
"DATA",9002313.91,85,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,7)=BPS("X")
"DATA",9002313.91,86,0)
498^^PRESCRIBER TELEPHONE NUMBER^N^^^^10^N
"DATA",9002313.91,86,5)
PM^10
"DATA",9002313.91,86,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,86,10,1,0)
S BPS("X")=$TR($G(BPS("RX",BPS(9002313.0201),"Prescriber Phone #")),"#() -_*.@")
"DATA",9002313.91,86,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,86,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,86,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,86,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,86,30,0)
^9002313.9103^1^1^3100917^^^^
"DATA",9002313.91,86,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),498),U,12)=BPS("X")
"DATA",9002313.91,87,0)
468^^PRIMARY CARE PROVIDER ID QLFR^A/N^^^^2^A/N
"DATA",9002313.91,87,1)
PRIMARY CARE PROVIDER ID QUALIFIER
"DATA",9002313.91,87,5)
2E^2
"DATA",9002313.91,87,10,0)
^^2^2^3110727^
"DATA",9002313.91,87,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Primary Care Prov ID Qual"))
"DATA",9002313.91,87,10,2,0)
S:BPS("X")="" BPS("X")="01"
"DATA",9002313.91,87,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,87,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,87,25,0)
^9002313.9104^1^1^3070214^^^^
"DATA",9002313.91,87,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,87,30,0)
^9002313.9103^1^1^3041015^
"DATA",9002313.91,87,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,8)=""
"DATA",9002313.91,88,0)
469^^PRIM CARE PROV LOCATION CODE^N^^^^3^A/N
"DATA",9002313.91,88,5)
H5^3
"DATA",9002313.91,88,10,0)
^9002313.9101^1^1^3040114
"DATA",9002313.91,88,10,1,0)
S BPS("X")=$G(BPS("Patient","Primary Care Prov Location Code"))
"DATA",9002313.91,88,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,88,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,88,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,88,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,88,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,88,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,9)=BPS("X")
"DATA",9002313.91,89,0)
470^^PRIM CARE PROVIDER LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,89,1)
PRIMARY CARE PROVIDER LAST NAME
"DATA",9002313.91,89,5)
4E^15
"DATA",9002313.91,89,10,0)
^^1^1^3101217^
"DATA",9002313.91,89,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Primary Care Prov Last Name"))
"DATA",9002313.91,89,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,89,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,89,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,89,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),15)
"DATA",9002313.91,89,30,0)
^9002313.9103^1^1^3030825^^^^
"DATA",9002313.91,89,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,10)=BPS("X")
"DATA",9002313.91,91,0)
480^^OTHER AMT CLAIMED SUBMITTED^D^^^^8^D
"DATA",9002313.91,91,1)
OTHER AMOUNT CLAIMED SUBMITTED
"DATA",9002313.91,91,5)
H9^8
"DATA",9002313.91,91,10,0)
^9002313.9101^1^1^3101006^^^^
"DATA",9002313.91,91,10,1,0)
; GET CODE handled by FLD480^BPSOSSG
"DATA",9002313.91,91,20,0)
^9002313.9102^1^1^3101006^^^^
"DATA",9002313.91,91,20,1,0)
; vD.0 format code handled by FLD480^BPSOSSG
"DATA",9002313.91,91,25,0)
^9002313.9104^1^1^3101006^^^^
"DATA",9002313.91,91,25,1,0)
; format code handled by FLD480^BPSOSSG
"DATA",9002313.91,91,30,0)
^9002313.9103^1^1^3101006^^^^
"DATA",9002313.91,91,30,1,0)
D FLD480^BPSOSSG
"DATA",9002313.91,92,0)
109^^TRANSACTION COUNT^A/N^^^^1^A/N
"DATA",9002313.91,92,5)
A9^1
"DATA",9002313.91,92,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,92,10,1,0)
S BPS("X")=$G(BPS("Transaction Count"))
"DATA",9002313.91,92,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,92,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,92,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,92,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,92,30,0)
^9002313.9103^1^1^3040114^^^
"DATA",9002313.91,92,30,1,0)
S $P(^BPSC(BPS(9002313.02),100),U,9)=BPS("X")
"DATA",9002313.91,93,0)
111^^SEGMENT IDENTIFICATION^A/N^^^^2^A/N
"DATA",9002313.91,93,5)
AM^2
"DATA",9002313.91,93,10,0)
^9002313.9101^1^1^3040114
"DATA",9002313.91,93,10,1,0)
S BPS("X")=""
"DATA",9002313.91,93,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,93,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,95,0)
112^^TRANSACTION RESPONSE STATUS^A/N^^^^1^A/N
"DATA",9002313.91,95,5)
AN^2
"DATA",9002313.91,95,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,95,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,95,25,0)
^9002313.9104^1^1^3040114^^
"DATA",9002313.91,95,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,95,30,0)
^9002313.9103^1^1^3040114^^
"DATA",9002313.91,95,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),110),U,2)=BPS("X")
"DATA",9002313.91,96,0)
320^^EMPLOYER TELEPHONE NUMBER^N^^^^10^N
"DATA",9002313.91,96,5)
CK^10
"DATA",9002313.91,96,10,0)
^9002313.9101^1^1^3050802
"DATA",9002313.91,96,10,1,0)
S BPS("X")=$TR($G(BPS("Employer","Phone")),"#() -_*.@")
"DATA",9002313.91,96,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,96,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,96,25,0)
^9002313.9104^1^1^3061121^
"DATA",9002313.91,96,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),10)
"DATA",9002313.91,96,30,0)
^9002313.9103^1^1^3061120^
"DATA",9002313.91,96,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),310),U,10)=BPS("X")
"DATA",9002313.91,97,0)
321^^EMPLOYER CONTACT NAME^A/N^^^^30^A/N
"DATA",9002313.91,97,5)
CL^30
"DATA",9002313.91,97,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,97,10,1,0)
S BPS("X")=""
"DATA",9002313.91,97,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,97,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,97,25,0)
^9002313.9104^1^1^3040224^^^
"DATA",9002313.91,97,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),30)
"DATA",9002313.91,97,30,0)
^9002313.9103^1^1^3040224^
"DATA",9002313.91,97,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),320),U,1)=BPS("X")
"DATA",9002313.91,98,0)
330^^ALTERNATE ID^A/N^^^^20^A/N
"DATA",9002313.91,98,5)
CW^20
"DATA",9002313.91,98,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,98,10,1,0)
S BPS("X")=""
"DATA",9002313.91,98,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,98,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,98,25,0)
^9002313.9104^1^1^3040224^^^
"DATA",9002313.91,98,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),20)
"DATA",9002313.91,98,30,0)
^9002313.9103^1^1^3040224^^
"DATA",9002313.91,98,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),320),U,10)=BPS("X")
"DATA",9002313.91,99,0)
333^^EMPLOYER ID^A/N^^^^15^A/N
"DATA",9002313.91,99,5)
CZ^15
"DATA",9002313.91,99,10,0)
^9002313.9101^1^1^3030823
"DATA",9002313.91,99,10,1,0)
S BPS("X")=""
"DATA",9002313.91,99,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,99,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,99,25,0)
^9002313.9104^1^1^3030823^
"DATA",9002313.91,99,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,99,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,99,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,3)=BPS("X")
"DATA",9002313.91,100,0)
334^^SMOKER/NONSMOKER^N^^^^1^A/N
"DATA",9002313.91,100,5)
1C^1
"DATA",9002313.91,100,10,0)
^9002313.9101^1^1^3070620
"DATA",9002313.91,100,10,1,0)
S BPS("X")=""
"DATA",9002313.91,100,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,100,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,100,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,100,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),1)
"DATA",9002313.91,100,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,100,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,4)=BPS("X")
"DATA",9002313.91,101,0)
335^^PREGNANCY INDICATOR^N^^^^1^A/N
"DATA",9002313.91,101,5)
2C^1
"DATA",9002313.91,101,10,0)
^9002313.9101^1^1^3030823
"DATA",9002313.91,101,10,1,0)
S BPS("X")=""
"DATA",9002313.91,101,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,101,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,101,25,0)
^9002313.9104^1^1^3030823^^
"DATA",9002313.91,101,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),1)
"DATA",9002313.91,101,30,0)
^9002313.9103^1^1^3030823^^
"DATA",9002313.91,101,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,5)=BPS("X")
"DATA",9002313.91,102,0)
336^^FACILITY ID^A/N^^^^10^A/N
"DATA",9002313.91,102,5)
8C^10
"DATA",9002313.91,102,10,0)
^9002313.9101^1^1^3070103
"DATA",9002313.91,102,10,1,0)
S BPS("X")=$G(BPS("Insurer","Facility ID"))
"DATA",9002313.91,102,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,102,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,102,25,0)
^9002313.9104^1^1^3030823^^
"DATA",9002313.91,102,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),10)
"DATA",9002313.91,102,30,0)
^9002313.9103^1^1^3030823^
"DATA",9002313.91,102,30,1,0)
S $P(^BPSC(BPS(9002313.02),330),U,6)=BPS("X")
"DATA",9002313.91,103,0)
337^^COB/OTHER PAYMENTS COUNT^N^^^^1^N
"DATA",9002313.91,103,1)
COORDINATION OF BENEFITS/OTHER PAYMENTS COUNT
"DATA",9002313.91,103,5)
4C^1
"DATA",9002313.91,103,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,103,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,103,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,103,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,103,25,0)
^9002313.9104^1^1^3040223^^^
"DATA",9002313.91,103,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,103,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,103,30,1,0)
D SET337^BPSFLD01
"DATA",9002313.91,104,0)
338^^OTHER PAYER COVERAGE TYPE^N^^^^2^A/N
"DATA",9002313.91,104,5)
5C^2
"DATA",9002313.91,104,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,104,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,104,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,104,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,104,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,104,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,104,30,0)
^9002313.9103^1^1^3101004^
"DATA",9002313.91,104,30,1,0)
D SET338^BPSFLD01
"DATA",9002313.91,105,0)
339^^OTHER PAYER ID QUALIFIER^N^^^^2^A/N
"DATA",9002313.91,105,5)
6C^2
"DATA",9002313.91,105,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,105,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,105,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,105,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,105,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,105,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,105,30,0)
^9002313.9103^1^1^3101004^
"DATA",9002313.91,105,30,1,0)
D SET339^BPSFLD01
"DATA",9002313.91,106,0)
340^^OTHER PAYER ID^A/N^^^^10^A/N
"DATA",9002313.91,106,5)
7C^10
"DATA",9002313.91,106,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,106,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,106,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,106,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,106,25,0)
^9002313.9104^1^1^3040223^^
"DATA",9002313.91,106,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,106,30,0)
^9002313.9103^1^1^3101004^^
"DATA",9002313.91,106,30,1,0)
D SET340^BPSFLD01
"DATA",9002313.91,107,0)
341^^OTHER PAYER AMOUNT PAID COUNT^N^^^^1^N
"DATA",9002313.91,107,5)
HB^1
"DATA",9002313.91,107,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,107,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,107,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,107,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,107,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,107,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,107,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,107,30,1,0)
D SET341^BPSFLD01
"DATA",9002313.91,108,0)
342^^OTHER PAYER AMT PAID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,108,1)
OTHER PAYER AMOUNT PAID QUALIFIER
"DATA",9002313.91,108,5)
HC^2
"DATA",9002313.91,108,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,108,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,108,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,108,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,108,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,108,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,108,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,108,30,1,0)
D SET342^BPSFLD01
"DATA",9002313.91,109,0)
343^^DISPENSING STATUS^A/N^^^^1^A/N
"DATA",9002313.91,109,5)
HD^1
"DATA",9002313.91,109,10,0)
^9002313.9101^1^1^3040913
"DATA",9002313.91,109,10,1,0)
S BPS("X")=""
"DATA",9002313.91,109,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,109,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,109,25,0)
^9002313.9104^1^1^3040913^^^^
"DATA",9002313.91,109,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,109,30,0)
^9002313.9103^1^1^3070620^
"DATA",9002313.91,109,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),340),U,3)=""
"DATA",9002313.91,110,0)
344^^QTY INTENDED TO BE DISPENSED^N^^^^10^N
"DATA",9002313.91,110,1)
QUANTITY INTENDED TO BE DISPENSED
"DATA",9002313.91,110,5)
HF^10
"DATA",9002313.91,110,10,0)
^9002313.9101^1^1^3070620
"DATA",9002313.91,110,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Quantity"))*1000\1
"DATA",9002313.91,110,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,110,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,110,25,0)
^9002313.9104^1^1^3070620^
"DATA",9002313.91,110,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,110,30,0)
^9002313.9103^1^1^3070620^
"DATA",9002313.91,110,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),340),U,4)=""
"DATA",9002313.91,111,0)
345^^DAYS SUPPLY INTEND TO BE DISP^N^^^^3^N
"DATA",9002313.91,111,1)
DAYS SUPPLY INTENDED TO BE DISPENSED
"DATA",9002313.91,111,5)
HG^3
"DATA",9002313.91,111,10,0)
^9002313.9101^1^1^3030827
"DATA",9002313.91,111,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Days Supply"))*1000
"DATA",9002313.91,111,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,111,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,111,25,0)
^9002313.9104^1^1^3030827^^^
"DATA",9002313.91,111,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,111,30,0)
^9002313.9103^1^1^3070620^
"DATA",9002313.91,111,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),340),U,5)=""
"DATA",9002313.91,112,0)
346^^BASIS OF CALC - DISPENSING FEE^A/N^^^^2^A/N
"DATA",9002313.91,112,5)
HH^8
"DATA",9002313.91,112,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,112,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,112,25,0)
^^1^1^3031205^
"DATA",9002313.91,112,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,112,30,0)
^^1^1^3031205^
"DATA",9002313.91,112,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),340),U,6)=BPS("X")
"DATA",9002313.91,113,0)
347^^BASIS OF CALC - COPAY^A/N^^^^2^A/N
"DATA",9002313.91,113,5)
HJ^8
"DATA",9002313.91,113,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,113,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,113,25,0)
^9002313.9104^1^1^3040114^^^
"DATA",9002313.91,113,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,113,30,0)
^9002313.9103^1^1^3040114^^^
"DATA",9002313.91,113,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),340),U,7)=BPS("X")
"DATA",9002313.91,114,0)
348^^BASIS OF CALC - FLAT SALES TAX^A/N^^^^2^A/N
"DATA",9002313.91,114,5)
HK^8
"DATA",9002313.91,114,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,114,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,114,25,0)
^^1^1^3031205^
"DATA",9002313.91,114,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,114,30,0)
^^1^1^3031205^
"DATA",9002313.91,114,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),340),U,8)=BPS("X")
"DATA",9002313.91,115,0)
349^^BASIS OF CALC - % SALES TAX^A/N^^^^2^A/N
"DATA",9002313.91,115,5)
HM^8
"DATA",9002313.91,115,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,115,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,115,25,0)
^^1^1^3031205^
"DATA",9002313.91,115,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,115,30,0)
^^1^1^3031205^
"DATA",9002313.91,115,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),340),U,9)=BPS("X")
"DATA",9002313.91,116,0)
350^^PATIENT E-MAIL ADDRESS^A/N^^^^80^A/N
"DATA",9002313.91,116,5)
HN^80
"DATA",9002313.91,116,10,0)
^9002313.9101^1^1^3030512
"DATA",9002313.91,116,10,1,0)
S BPS("X")=$G(BPS("Patient","Patient E-Mail Address"))
"DATA",9002313.91,116,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,116,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),80)
"DATA",9002313.91,116,30,0)
^9002313.9103^1^1^3101101^^^
"DATA",9002313.91,116,30,1,0)
S $P(^BPSC(BPS(9002313.02),340),U,10)=$G(BPS("X"))
"DATA",9002313.91,117,0)
351^^OTHER PAYER-PAT RESP AMT QLFR^A/N^^^^2^A/N
"DATA",9002313.91,117,1)
OTHER PAYER-PATIENT RESPONSIBILITY AMOUNT QUALIFIER
"DATA",9002313.91,117,5)
NP^1
"DATA",9002313.91,117,10,0)
^^1^1^3101222^
"DATA",9002313.91,117,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,117,20,0)
^9002313.9102^1^1^3101220^
"DATA",9002313.91,117,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,117,30,0)
^^1^1^3101222^
"DATA",9002313.91,117,30,1,0)
D SET351^BPSFLD01
"DATA",9002313.91,118,0)
352^^OTHER PAYER-PAT RESP AMOUNT^D^^^^10^D
"DATA",9002313.91,118,1)
OTHER PAYER-PATIENT RESPONSIBILITY AMOUNT
"DATA",9002313.91,118,5)
NQ^10
"DATA",9002313.91,118,10,0)
^^1^1^3101222^
"DATA",9002313.91,118,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,118,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,118,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,118,25,0)
^9002313.9104^1^1^3031212^
"DATA",9002313.91,118,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,118,30,0)
^9002313.9103^1^1^3101222^^
"DATA",9002313.91,118,30,1,0)
D SET352^BPSFLD01
"DATA",9002313.91,119,0)
353^^OTHER PAYER-PAT RESP AMT CNT^N^^^^2^N
"DATA",9002313.91,119,1)
OTHER PAYER-PATIENT RESPONSIBILITY AMOUNT COUNT
"DATA",9002313.91,119,5)
NR^1
"DATA",9002313.91,119,10,0)
^^1^1^3101222^
"DATA",9002313.91,119,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,119,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,119,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,119,30,0)
^9002313.9103^1^1^3101222^^
"DATA",9002313.91,119,30,1,0)
D SET353^BPSFLD01
"DATA",9002313.91,120,0)
445^^ORIG PRESCRIBED PROD/SERV CODE^A/N^^^^19^A/N
"DATA",9002313.91,120,1)
ORIGINALLY PRESCRIBED PRODUCT/SERVICE CODE
"DATA",9002313.91,120,5)
EA^19
"DATA",9002313.91,120,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,120,10,1,0)
S BPS("X")=""
"DATA",9002313.91,120,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,120,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,120,25,0)
^9002313.9104^1^1^3040107^^
"DATA",9002313.91,120,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),19)
"DATA",9002313.91,120,30,0)
^9002313.9103^1^1^3101115^
"DATA",9002313.91,120,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,5)="" 
"DATA",9002313.91,121,0)
446^^ORIGINALLY PRESCRIBED QUANTITY^N^^^^10^N
"DATA",9002313.91,121,5)
EB^10
"DATA",9002313.91,121,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,121,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Quantity"))*1000\1
"DATA",9002313.91,121,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,121,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,121,25,0)
^9002313.9104^1^1^3030828^^^^
"DATA",9002313.91,121,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,121,30,0)
^9002313.9103^1^1^3030828^^^^
"DATA",9002313.91,121,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,6)=BPS("X") ;VA
"DATA",9002313.91,122,0)
454^^SCHEDULED PRESCRIPTION ID NUM^N^^^^12^A/N
"DATA",9002313.91,122,1)
SCHEDULED PRESCRIPTION ID NUMBER
"DATA",9002313.91,122,5)
EK^12
"DATA",9002313.91,122,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,122,10,1,0)
S BPS("X")=""
"DATA",9002313.91,122,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,122,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,122,25,0)
^9002313.9104^1^1^3040224^^
"DATA",9002313.91,122,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),12)
"DATA",9002313.91,122,30,0)
^9002313.9103^1^1^3040224^^
"DATA",9002313.91,122,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,4)=BPS("X")
"DATA",9002313.91,123,0)
456^^ASSOC PRESCRIPTION/SERV REF NO^A/N^^^^12^N
"DATA",9002313.91,123,1)
ASSOCIATED PRESCRIPTION/ SERVICE REFERENCE NUMBER
"DATA",9002313.91,123,5)
EN^7
"DATA",9002313.91,123,10,0)
^9002313.9101^1^1^3030823
"DATA",9002313.91,123,10,1,0)
S BPS("X")=""
"DATA",9002313.91,123,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,123,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,123,25,0)
^9002313.9104^1^1^3030823^^
"DATA",9002313.91,123,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),7)
"DATA",9002313.91,123,30,0)
^^1^1^3110720^
"DATA",9002313.91,123,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,6)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,124,0)
457^^ASSOC PRESCRIPTION/SERV DATE^A/N^^^^8^N
"DATA",9002313.91,124,1)
ASSOCIATED PRESCRIPTION/ SERVICE DATE
"DATA",9002313.91,124,5)
EP^8
"DATA",9002313.91,124,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,124,10,1,0)
S BPS("X")=""
"DATA",9002313.91,124,20,0)
^9002313.9102^1^1^3101029^
"DATA",9002313.91,124,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,124,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,124,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,124,30,0)
^9002313.9103^1^1^3110720^^
"DATA",9002313.91,124,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,7)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,125,0)
458^^PROCEDURE MODIFIER CODE COUNT^N^^^^2^N
"DATA",9002313.91,125,5)
SE^1
"DATA",9002313.91,125,10,0)
^9002313.9101^1^1^3040819
"DATA",9002313.91,125,10,1,0)
S BPS("X")=""
"DATA",9002313.91,125,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,125,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,125,25,0)
^9002313.9104^1^1^3040819^^^^
"DATA",9002313.91,125,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),1)
"DATA",9002313.91,125,30,0)
^9002313.9103^1^1^3040819^
"DATA",9002313.91,125,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),450),U,8)=""
"DATA",9002313.91,126,0)
459^^PROCEDURE MODIFIER CODE^A/N^^^^2^A/N
"DATA",9002313.91,126,5)
ER^2
"DATA",9002313.91,126,10,0)
^9002313.9101^1^1^3040819
"DATA",9002313.91,126,10,1,0)
S BPS("X")=""
"DATA",9002313.91,126,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,126,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,126,25,0)
^9002313.9104^1^1^3040819^^^^
"DATA",9002313.91,126,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,126,30,0)
^^1^1^3110727^
"DATA",9002313.91,126,30,1,0)
; Not implemented
"DATA",9002313.91,127,0)
461^^PRIOR AUTHORIZATION TYPE CODE^N^^^^2^N
"DATA",9002313.91,127,5)
EU^2
"DATA",9002313.91,127,10,0)
^9002313.9101^2^2^3101115^
"DATA",9002313.91,127,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Prior Auth Type"))
"DATA",9002313.91,127,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,127,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,127,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,127,25,0)
^9002313.9104^1^1^3031222^^^^
"DATA",9002313.91,127,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,127,30,0)
^9002313.9103^1^1^3031222^^^^
"DATA",9002313.91,127,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,1)=BPS("X")
"DATA",9002313.91,128,0)
462^^PRIOR AUTH NUMBER SUBMITTED^A/N^^^^11^N
"DATA",9002313.91,128,1)
PRIOR AUTHORIZATION NUMBER SUBMITTED
"DATA",9002313.91,128,5)
EV^11
"DATA",9002313.91,128,10,0)
^9002313.9101^1^1^3031222
"DATA",9002313.91,128,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Prior Auth Num Sub"))
"DATA",9002313.91,128,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,128,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,128,25,0)
^9002313.9104^1^1^3031222^^^^
"DATA",9002313.91,128,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,128,30,0)
^9002313.9103^1^1^3031222^^^^
"DATA",9002313.91,128,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,2)=BPS("X")
"DATA",9002313.91,129,0)
464^^INTERMEDIARY AUTHORIZATION ID^A/N^^^^11^A/N
"DATA",9002313.91,129,5)
EX^11
"DATA",9002313.91,129,10,0)
^^2^2^3110727^
"DATA",9002313.91,129,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Intermediary Auth ID"))
"DATA",9002313.91,129,10,2,0)
S:BPS("X")="" BPS("X")=""
"DATA",9002313.91,129,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,129,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,129,25,0)
^9002313.9104^1^1^3030823^
"DATA",9002313.91,129,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),11)
"DATA",9002313.91,129,30,0)
^9002313.9103^1^1^3030823^^^
"DATA",9002313.91,129,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,4)=BPS("X")
"DATA",9002313.91,130,0)
471^^OTHER PAYER REJECT COUNT^N^^^^2^N
"DATA",9002313.91,130,5)
5E^2
"DATA",9002313.91,130,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,130,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,130,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,130,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,130,25,0)
^9002313.9104^1^1^3040224^^
"DATA",9002313.91,130,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,130,30,0)
^9002313.9103^1^1^3100824
"DATA",9002313.91,130,30,1,0)
D SET471^BPSFLD01
"DATA",9002313.91,131,0)
472^^OTHER PAYER REJECT CODE^A/N^^^^3^A/N
"DATA",9002313.91,131,5)
6E^3
"DATA",9002313.91,131,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,131,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,131,20,0)
^9002313.9102^1^1^3101206^
"DATA",9002313.91,131,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,131,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,131,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,131,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,131,30,1,0)
D SET472^BPSFLD01
"DATA",9002313.91,132,0)
473^^DUR/PPS CODE COUNTER^N^^^^1^N
"DATA",9002313.91,132,5)
7E^1
"DATA",9002313.91,132,10,0)
^9002313.9101^1^1^3031230
"DATA",9002313.91,132,10,1,0)
S BPS("X")=1
"DATA",9002313.91,132,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,132,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,132,25,0)
^9002313.9104^1^1^3031230^^^^
"DATA",9002313.91,132,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,132,30,0)
^9002313.9103^1^1^3031230^^^^
"DATA",9002313.91,132,30,1,0)
D FLD473^BPSOSSG
"DATA",9002313.91,133,0)
474^^DUR/PPS LEVEL OF EFFORT^N^^^^2^N
"DATA",9002313.91,133,5)
8E^2
"DATA",9002313.91,133,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,133,10,1,0)
S BPS("X")=12
"DATA",9002313.91,133,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,133,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,133,25,0)
^9002313.9104^1^1^3030718^
"DATA",9002313.91,133,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,133,30,0)
^9002313.9103^1^1^3030718^
"DATA",9002313.91,133,30,1,0)
D FLD474^BPSOSSG
"DATA",9002313.91,134,0)
475^^DUR CO-AGENT ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,134,5)
J9^2
"DATA",9002313.91,134,10,0)
^9002313.9101^1^1^3030718
"DATA",9002313.91,134,10,1,0)
S BPS("X")=""
"DATA",9002313.91,134,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,134,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,134,25,0)
^9002313.9104^1^1^3030718^
"DATA",9002313.91,134,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,134,30,0)
^9002313.9103^1^1^3030718^
"DATA",9002313.91,134,30,1,0)
D FLD475^BPSOSSG
"DATA",9002313.91,135,0)
476^^DUR CO-AGENT ID^A/N^^^^19^A/N
"DATA",9002313.91,135,5)
H6^19
"DATA",9002313.91,135,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,135,10,1,0)
S BPS("X")=""
"DATA",9002313.91,135,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,135,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,135,25,0)
^9002313.9104^1^1^3040107^^^
"DATA",9002313.91,135,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,135,30,0)
^9002313.9103^1^1^3101115^^^^
"DATA",9002313.91,135,30,1,0)
D FLD476^BPSOSSG
"DATA",9002313.91,136,0)
477^^PROF SERVICE FEE SUBMITTED^D^^^^8^D
"DATA",9002313.91,136,1)
PROFESSIONAL SERVICE FEE SUBMITTED
"DATA",9002313.91,136,5)
BE^8
"DATA",9002313.91,136,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,136,10,1,0)
S BPS("X")=0
"DATA",9002313.91,136,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,136,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,136,25,0)
^9002313.9104^1^1^3101029^
"DATA",9002313.91,136,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,136,30,0)
^9002313.9103^1^1^3030823^^
"DATA",9002313.91,136,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),470),U,7)=BPS("X")
"DATA",9002313.91,139,0)
481^^FLAT SALES TAX AMT SUBMITTED^D^^^^8^D
"DATA",9002313.91,139,1)
FLAT SALES TAX AMOUNT SUBMITTED
"DATA",9002313.91,139,5)
HA^8
"DATA",9002313.91,139,10,0)
^9002313.9101^1^1^3100916
"DATA",9002313.91,139,10,1,0)
S BPS("X")=0
"DATA",9002313.91,139,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,139,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,139,25,0)
^9002313.9104^1^1^3040907^^
"DATA",9002313.91,139,25,1,0)
S BPS("X")=$$DFF^BPSECFM(BPS("X"),8)
"DATA",9002313.91,139,30,0)
^9002313.9103^1^1^3100923^^^^
"DATA",9002313.91,139,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,1)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,140,0)
482^^PERCENT SALES TAX AMT SBMTTD^D^^^^8^D
"DATA",9002313.91,140,1)
PERCENTAGE SALES TAX AMOUNT SUBMITTED
"DATA",9002313.91,140,5)
GE^8
"DATA",9002313.91,140,10,0)
^9002313.9101^1^1^3050802
"DATA",9002313.91,140,10,1,0)
S BPS("X")=0
"DATA",9002313.91,140,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,140,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,140,25,0)
^9002313.9104^1^1^3040907^^^^
"DATA",9002313.91,140,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,140,30,0)
^9002313.9103^1^1^3100923^^^^
"DATA",9002313.91,140,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,2)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,141,0)
483^^PERCENT SALES TAX RATE SBMTTD^D^^^^7^D
"DATA",9002313.91,141,1)
PERCENTAGE SALES TAX RATE SUBMITTED
"DATA",9002313.91,141,5)
HE^7
"DATA",9002313.91,141,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,141,10,1,0)
S BPS("X")=+$G(BPS("Insurer","Percent Sales Tax Rate Sub"))
"DATA",9002313.91,141,20,0)
^^1^1^3121128
"DATA",9002313.91,141,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),7,4)
"DATA",9002313.91,141,25,0)
^^1^1^3121128
"DATA",9002313.91,141,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),7,4)
"DATA",9002313.91,141,30,0)
^9002313.9103^1^1^3100923^^^^
"DATA",9002313.91,141,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,3)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,142,0)
484^^PERCENT SALES TAX BASIS SBMTTD^A/N^^^^2^A/N
"DATA",9002313.91,142,1)
PERCENTAGE SALES TAX BASIS SUBMITTED
"DATA",9002313.91,142,5)
JE^2
"DATA",9002313.91,142,10,0)
^9002313.9101^1^1^3050802
"DATA",9002313.91,142,10,1,0)
S BPS("X")=""
"DATA",9002313.91,142,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,142,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,142,25,0)
^9002313.9104^1^1^3030824^
"DATA",9002313.91,142,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),2)
"DATA",9002313.91,142,30,0)
^9002313.9103^1^1^3100923^^^^
"DATA",9002313.91,142,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,4)=$S($G(BPS("NCPDP","Version"))=51:BPS("X"),1:"")
"DATA",9002313.91,143,0)
485^^COUPON TYPE^A/N^^^^2^A/N
"DATA",9002313.91,143,5)
KE^2
"DATA",9002313.91,143,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,143,10,1,0)
S BPS("X")=""
"DATA",9002313.91,143,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,143,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,143,25,0)
^9002313.9104^1^1^3040107^^
"DATA",9002313.91,143,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,143,30,0)
^9002313.9103^1^1^3101115^^^
"DATA",9002313.91,143,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,5)=BPS("X")
"DATA",9002313.91,144,0)
486^^COUPON NUMBER^A/N^^^^15^A/N
"DATA",9002313.91,144,5)
ME^15
"DATA",9002313.91,144,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,144,10,1,0)
S BPS("X")=""
"DATA",9002313.91,144,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,144,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,144,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,144,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,144,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,144,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,6)=BPS("X")
"DATA",9002313.91,145,0)
487^^COUPON VALUE AMOUNT^D^^^^8^D
"DATA",9002313.91,145,5)
NE^8
"DATA",9002313.91,145,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,145,10,1,0)
S BPS("X")=""
"DATA",9002313.91,145,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,145,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,145,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,145,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,145,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,145,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),480),U,7)=BPS("X")
"DATA",9002313.91,146,0)
491^^DIAGNOSIS CODE COUNT^N^^^^1^N
"DATA",9002313.91,146,5)
VE^1
"DATA",9002313.91,146,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,146,10,1,0)
S BPS("X")=""
"DATA",9002313.91,146,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,146,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,146,25,0)
^9002313.9104^1^1^3040107^^^^
"DATA",9002313.91,146,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,147,0)
492^^DIAGNOSIS CODE QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,147,5)
WE^2
"DATA",9002313.91,147,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,147,10,1,0)
S BPS("X")=""
"DATA",9002313.91,147,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,147,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,147,25,0)
^9002313.9104^1^1^3040224^^^
"DATA",9002313.91,147,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,148,0)
493^^CLINICAL INFORMATION COUNTER^N^^^^1^N
"DATA",9002313.91,148,5)
XE^1
"DATA",9002313.91,148,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,148,10,1,0)
S BPS("X")=""
"DATA",9002313.91,148,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,148,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,148,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,148,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,149,0)
498.01^^REQUEST TYPE^N^^^^1^A/N
"DATA",9002313.91,149,5)
PA^1
"DATA",9002313.91,149,10,0)
^9002313.9101^1^1^3040428
"DATA",9002313.91,149,10,1,0)
S BPS("X")=""
"DATA",9002313.91,149,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,149,20,1,0)
S BPS("X")=""
"DATA",9002313.91,149,25,0)
^9002313.9104^1^1^3040428^
"DATA",9002313.91,149,25,1,0)
S BPS("X")=""
"DATA",9002313.91,150,0)
498.02^^REQUEST PERIOD DATE-BEGIN^A/N^^^^8^N
"DATA",9002313.91,150,5)
PB^8
"DATA",9002313.91,150,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,150,10,1,0)
S BPS("X")=""
"DATA",9002313.91,150,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,150,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,151,0)
498.03^^REQUEST PERIOD DATE-END^A/N^^^^8^N
"DATA",9002313.91,151,5)
PC^8
"DATA",9002313.91,151,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,151,10,1,0)
S BPS("X")=""
"DATA",9002313.91,151,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,151,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,152,0)
498.04^^BASIS OF REQUEST^A/N^^^^2^A/N
"DATA",9002313.91,152,5)
PD^2
"DATA",9002313.91,152,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,152,10,1,0)
S BPS("X")=""
"DATA",9002313.91,152,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,152,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,153,0)
498.05^^AUTHORIZED REP FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,153,5)
PE^12
"DATA",9002313.91,153,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,153,10,1,0)
S BPS("X")=""
"DATA",9002313.91,153,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,153,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,154,0)
498.06^^AUTHORIZED REP LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,154,5)
PF^15
"DATA",9002313.91,154,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,154,10,1,0)
S BPS("X")=""
"DATA",9002313.91,154,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,154,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,155,0)
498.07^^AUTHORIZED REP STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,155,5)
PG^30
"DATA",9002313.91,155,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,155,10,1,0)
S BPS("X")=""
"DATA",9002313.91,155,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,155,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,156,0)
498.08^^AUTH REP CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,156,5)
PH^20
"DATA",9002313.91,156,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,156,10,1,0)
S BPS("X")=""
"DATA",9002313.91,156,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,156,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,157,0)
498.09^^AUTHORIZED REP STATE/PROV ADDR^A/N^^^^2^A/N
"DATA",9002313.91,157,5)
PJ^2
"DATA",9002313.91,157,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,157,10,1,0)
S BPS("X")=""
"DATA",9002313.91,157,20,0)
^9002313.9102^1^1^3101206^
"DATA",9002313.91,157,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,158,0)
498.11^^AUTHORIZED REP ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,158,1)
AUTHORIZED REPRESENTATIVE ZIP/POSTAL ZONE
"DATA",9002313.91,158,5)
PK^15
"DATA",9002313.91,158,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,158,10,1,0)
S BPS("X")=""
"DATA",9002313.91,158,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,158,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,159,0)
498.12^^PRESCRIBER TELEPHONE NUMBER^N^^^^10^N
"DATA",9002313.91,159,5)
PM^10
"DATA",9002313.91,159,10,0)
^9002313.9101^1^1^3050802
"DATA",9002313.91,159,10,1,0)
S BPS("X")=$TR($G(BPS("RX",BPS(9002313.0201),"Prescriber Phone #")),"#() -_*.@")
"DATA",9002313.91,159,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,159,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,159,25,0)
^9002313.9104^1^1^3030722^^
"DATA",9002313.91,159,25,1,0)
S BPS("X")=$$NFF^BPSECFM(BPS("X"),10)
"DATA",9002313.91,159,30,0)
^9002313.9103^1^1^3030722^^
"DATA",9002313.91,159,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),498),U,12)=BPS("X")
"DATA",9002313.91,160,0)
498.13^^PRIOR AUTH SUPPORTING DOCUMENT^A/N^^^^500^A/N
"DATA",9002313.91,160,5)
PP^200
"DATA",9002313.91,160,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,160,10,1,0)
S BPS("X")=""
"DATA",9002313.91,160,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,160,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),500)
"DATA",9002313.91,161,0)
498.14^^PRIOR AUTH NUMBER-ASSIGNED^N^^^^11^N
"DATA",9002313.91,161,5)
PY^8
"DATA",9002313.91,161,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,161,10,1,0)
S BPS("X")=""
"DATA",9002313.91,161,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,161,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,162,0)
498.52^^PRIOR AUTH EFFECTIVE DATE^A/N^^^^8^N
"DATA",9002313.91,162,5)
PS^8
"DATA",9002313.91,162,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,162,10,1,0)
S BPS("X")=""
"DATA",9002313.91,162,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,162,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,163,0)
498.53^^PRIOR AUTH EXPIRATION DATE^A/N^^^^8^N
"DATA",9002313.91,163,5)
PT^8
"DATA",9002313.91,163,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,163,10,1,0)
S BPS("X")=""
"DATA",9002313.91,163,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,163,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,164,0)
498.54^^PRIOR AUTH NO REFILLS AUTH^N^^^^2^N
"DATA",9002313.91,164,5)
PW^8
"DATA",9002313.91,164,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,164,10,1,0)
S BPS("X")=""
"DATA",9002313.91,164,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,164,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,165,0)
498.55^^PRIOR AUTH QTY ACCUMULATED^N^^^^10^N
"DATA",9002313.91,165,5)
PX^8
"DATA",9002313.91,165,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,165,10,1,0)
S BPS("X")=""
"DATA",9002313.91,165,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,165,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,166,0)
498.57^^PRIOR AUTHORIZATION QUANTITY^A/N^^^^10^N
"DATA",9002313.91,166,5)
RA^3
"DATA",9002313.91,166,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,166,10,1,0)
S BPS("X")=""
"DATA",9002313.91,166,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,166,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,167,0)
498.58^^PRIOR AUTH DOLLARS AUTHORIZED^N^^^^8^D
"DATA",9002313.91,167,5)
RB^8
"DATA",9002313.91,167,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,167,10,1,0)
S BPS("X")=""
"DATA",9002313.91,167,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,167,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,168,0)
498.59^^AUTH REP CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,168,5)
PH^20
"DATA",9002313.91,168,10,0)
^9002313.9101^1^1^3030512
"DATA",9002313.91,168,10,1,0)
S BPS("X")=""
"DATA",9002313.91,168,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,168,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,169,0)
501^^HEADER RESPONSE STATUS^A/N^^^^1^A/N
"DATA",9002313.91,169,5)
F1^1
"DATA",9002313.91,169,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,169,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,169,25,0)
^9002313.9104^1^1^3040202^^^
"DATA",9002313.91,169,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,169,30,0)
^9002313.9103^1^1^3040202^^^
"DATA",9002313.91,169,30,1,0)
S $P(^BPSR(BPS(9002313.02),500),U,1)=BPS("X")
"DATA",9002313.91,170,0)
503^^AUTHORIZATION NUMBER^A/N^^^^20^A/N
"DATA",9002313.91,170,5)
F3^20
"DATA",9002313.91,170,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,170,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,170,30,0)
^^1^1^3031205^
"DATA",9002313.91,170,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,3)=BPS("X")
"DATA",9002313.91,171,0)
504^^MESSAGE^A/N^^^^200^A/N
"DATA",9002313.91,171,5)
F4^200
"DATA",9002313.91,171,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,171,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,171,25,0)
^^1^1^3031211^
"DATA",9002313.91,171,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),200)
"DATA",9002313.91,171,30,0)
^^1^1^3031211^
"DATA",9002313.91,171,30,1,0)
S $P(^BPSR(BPS(9002313.02),504),U,1)=BPS("X")
"DATA",9002313.91,172,0)
505^^PATIENT PAY AMOUNT^A/N^^^^8^D
"DATA",9002313.91,172,5)
F5^8
"DATA",9002313.91,172,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,172,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,172,25,0)
^9002313.9104^1^1^3031212^^
"DATA",9002313.91,172,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,172,30,0)
^9002313.9103^1^1^3031212^^
"DATA",9002313.91,172,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,5)=S BPS("X")
"DATA",9002313.91,173,0)
506^^INGREDIENT COST PAID^A/N^^^^8^D
"DATA",9002313.91,173,5)
F6^8
"DATA",9002313.91,173,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,173,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,173,25,0)
^9002313.9104^1^1^3031211^^
"DATA",9002313.91,173,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,173,30,0)
^9002313.9103^1^1^3031211^^
"DATA",9002313.91,173,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,6)=BPS("X")
"DATA",9002313.91,174,0)
507^^DISPENSING FEE PAID^A/N^^^^8^D
"DATA",9002313.91,174,5)
F7^8
"DATA",9002313.91,174,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,174,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,174,25,0)
^9002313.9104^1^1^3031210^^^
"DATA",9002313.91,174,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,174,30,0)
^9002313.9103^1^1^3031210^^^
"DATA",9002313.91,174,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,7)=BPS("X")
"DATA",9002313.91,175,0)
509^^TOTAL AMOUNT PAID^A/N^^^^8^D
"DATA",9002313.91,175,5)
F9^8
"DATA",9002313.91,175,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,175,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,175,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,175,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,175,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,175,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,9)
"DATA",9002313.91,176,0)
510^^REJECT COUNT^N^^^^2^N
"DATA",9002313.91,176,5)
FA^2
"DATA",9002313.91,176,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,176,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,176,25,0)
^^1^1^3031217^
"DATA",9002313.91,176,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,176,30,0)
^^1^1^3031217^
"DATA",9002313.91,176,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,10)=BPS("X")
"DATA",9002313.91,177,0)
511^^REJECT CODE^A/N^^^^3^A/N
"DATA",9002313.91,177,5)
FB^3
"DATA",9002313.91,177,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,177,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,177,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,177,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,177,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,177,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),511,DUR,0),U,1)
"DATA",9002313.91,178,0)
512^^ACCUMULATED DEDUCTIBLE AMOUNT^A/N^^^^8^D
"DATA",9002313.91,178,5)
FC^8
"DATA",9002313.91,178,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,178,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,178,25,0)
^9002313.9104^1^1^3031210^^^^
"DATA",9002313.91,178,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,178,30,0)
^9002313.9103^1^1^3031210^^^^
"DATA",9002313.91,178,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),"^",10)=BPS("X")
"DATA",9002313.91,179,0)
513^^REMAINING DEDUCTIBLE AMOUNT^A/N^^^^8^D
"DATA",9002313.91,179,5)
FD^8
"DATA",9002313.91,179,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,179,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,179,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,179,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,179,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,179,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,13)=BPS("X")
"DATA",9002313.91,180,0)
514^^REMAINING BENEFIT AMOUNT^A/N^^^^8^D
"DATA",9002313.91,180,5)
FE^8
"DATA",9002313.91,180,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,180,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,180,25,0)
^9002313.9104^1^1^3031217^^^
"DATA",9002313.91,180,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,180,30,0)
^9002313.9103^1^1^3031217^^^
"DATA",9002313.91,180,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,14)
"DATA",9002313.91,182,0)
517^^AMT APPLIED TO PERIODIC DEDUCT^D^^^^8^D
"DATA",9002313.91,182,5)
FH^8
"DATA",9002313.91,182,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,182,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,182,25,0)
^9002313.9104^1^1^3031205^^^
"DATA",9002313.91,182,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,182,30,0)
^9002313.9103^1^1^3031205^^
"DATA",9002313.91,182,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),"^",17)=BPS("X")
"DATA",9002313.91,183,0)
518^^AMOUNT OF COPAY^D^^^^8^D
"DATA",9002313.91,183,5)
FI^8
"DATA",9002313.91,183,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,183,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,183,25,0)
^^1^1^3031205^
"DATA",9002313.91,183,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,183,30,0)
^^1^1^3031205^
"DATA",9002313.91,183,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),"^",18)=BPS("X")
"DATA",9002313.91,184,0)
519^^AMT ATTRIBUTED TO PRODUCT SEL^D^^^^8^D
"DATA",9002313.91,184,5)
FJ^8
"DATA",9002313.91,184,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,184,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,184,25,0)
^^1^1^3031205^
"DATA",9002313.91,184,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,184,30,0)
^^1^1^3031205^
"DATA",9002313.91,184,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,19)=BPS("X")
"DATA",9002313.91,185,0)
520^^AMOUNT EXCEEDING PERIODIC MAX^D^^^^8^D
"DATA",9002313.91,185,5)
FK^8
"DATA",9002313.91,185,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,185,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,185,25,0)
^^1^1^3031205^
"DATA",9002313.91,185,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,185,30,0)
^^1^1^3031205^
"DATA",9002313.91,185,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,20)=BPS("X")
"DATA",9002313.91,186,0)
521^^INCENTIVE AMOUNT PAID^A/N^^^^8^D
"DATA",9002313.91,186,5)
FL^8
"DATA",9002313.91,186,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,186,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,186,25,0)
^^1^1^3031210^
"DATA",9002313.91,186,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,186,30,0)
^^1^1^3031210^
"DATA",9002313.91,186,30,1,0)
$P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,21)=BPS("X")
"DATA",9002313.91,187,0)
522^^BASIS OF REIMB DETERMINATION^N^^^^2^N
"DATA",9002313.91,187,5)
FM^2
"DATA",9002313.91,187,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,187,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,187,25,0)
^^1^1^3031205^
"DATA",9002313.91,187,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,187,30,0)
^^1^1^3031205^
"DATA",9002313.91,187,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),U,22)=BPS("X")
"DATA",9002313.91,188,0)
523^^AMOUNT ATTRIBUTED TO SALES TAX^D^^^^8^D
"DATA",9002313.91,188,5)
FN^8
"DATA",9002313.91,188,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,188,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,188,25,0)
^^1^1^3031205^
"DATA",9002313.91,188,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,188,30,0)
^^1^1^3031205^
"DATA",9002313.91,188,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),500),"^",23)=BPS("X")
"DATA",9002313.91,189,0)
524^^PLAN ID^A/N^^^^8^A/N
"DATA",9002313.91,189,5)
FO^8
"DATA",9002313.91,189,10,0)
^^1^1^3110301^
"DATA",9002313.91,189,10,1,0)
S BPS("X")=$G(BPS("Insurer","Plan ID"))
"DATA",9002313.91,189,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,189,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,189,25,0)
^9002313.9104^1^1^3061122^
"DATA",9002313.91,189,25,1,0)
S BPS("X")=$$ANFF^BPSECFM(BPS("X"),8)
"DATA",9002313.91,189,30,0)
^9002313.9103^1^1^3030825^^^^
"DATA",9002313.91,189,30,1,0)
S $P(^BPSC(BPS(9002313.02),520),U,4)=BPS("X")
"DATA",9002313.91,191,0)
526^^ADDITIONAL MESSAGE INFORMATION^A/N^^^^40^A/N
"DATA",9002313.91,191,5)
FQ^200
"DATA",9002313.91,191,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,191,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,191,25,0)
^9002313.9104^1^1^3031210^^^^
"DATA",9002313.91,191,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),200)
"DATA",9002313.91,191,30,0)
^9002313.9103^1^1^3031210^^^^
"DATA",9002313.91,191,30,1,0)
S ^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),526)=BPS("X")
"DATA",9002313.91,192,0)
528^^CLINICAL SIGNIFICANCE CODE^A/N^^^^1^A/N
"DATA",9002313.91,192,5)
FS^1
"DATA",9002313.91,192,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,192,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,192,25,0)
^9002313.9104^1^1^3031210^^^^
"DATA",9002313.91,192,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,192,30,0)
^9002313.9103^1^1^3031210^^^^
"DATA",9002313.91,192,30,1,0)
S ^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),525)=$G(BPS("X"))
"DATA",9002313.91,193,0)
529^^OTHER PHARMACY INDICATOR^A/N^^^^1^N
"DATA",9002313.91,193,5)
FT^1
"DATA",9002313.91,193,10,0)
^9002313.9101^1^1^3031212
"DATA",9002313.91,193,10,1,0)
S BPS("X")=""
"DATA",9002313.91,193,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,193,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,194,0)
530^^PREVIOUS DATE OF FILL^A/N^^^^8^N
"DATA",9002313.91,194,5)
FU^8
"DATA",9002313.91,194,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,194,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,194,25,0)
^^1^1^3031216^
"DATA",9002313.91,194,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X"))
"DATA",9002313.91,194,30,0)
^^1^1^3031216^
"DATA",9002313.91,194,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,5)=BPS("X")
"DATA",9002313.91,195,0)
531^^QUANTITY OF PREVIOUS FILL^N^^^^10^N
"DATA",9002313.91,195,5)
FV^8
"DATA",9002313.91,195,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,195,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,195,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,195,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,195,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,195,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,6)=BPS("X")
"DATA",9002313.91,196,0)
532^^DATABASE INDICATOR^A/N^^^^1^A/N
"DATA",9002313.91,196,5)
FW^1
"DATA",9002313.91,196,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,196,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,196,25,0)
^9002313.9104^1^1^3031210^^^
"DATA",9002313.91,196,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,196,30,0)
^9002313.9103^1^1^3031210^^^
"DATA",9002313.91,196,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,BPS(9002313.020101),0),U,7)=BPS("X")
"DATA",9002313.91,197,0)
533^^OTHER PRESCRIBER INDICATOR^A/N^^^^1^N
"DATA",9002313.91,197,5)
FX^1
"DATA",9002313.91,197,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,197,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,197,25,0)
^^1^1^3031212^
"DATA",9002313.91,197,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,197,30,0)
^^1^1^3031212^
"DATA",9002313.91,197,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,8)=BPS("X")
"DATA",9002313.91,199,0)
544^^DUR FREE TEXT MESSAGE^A/N^^^^30^A/N
"DATA",9002313.91,199,5)
FY^30
"DATA",9002313.91,199,10,0)
^9002313.9101^1^1^3101116^
"DATA",9002313.91,199,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,199,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,199,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,199,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,199,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,9)=BPS("X")
"DATA",9002313.91,200,0)
545^^NETWORK REIMBURSEMENT ID^A/N^^^^10^A/N
"DATA",9002313.91,200,5)
2F^10
"DATA",9002313.91,200,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,200,10,1,0)
S BPS("X")=""
"DATA",9002313.91,200,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,200,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,201,0)
546^^REJECTED FLD OCCURRENCE INDCTR^A/N^^^^2^N
"DATA",9002313.91,201,5)
4F^2
"DATA",9002313.91,201,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,201,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,201,25,0)
^9002313.9104^1^1^3031217^^
"DATA",9002313.91,201,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,201,30,0)
^9002313.9103^1^1^3031217^^
"DATA",9002313.91,201,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),511,DUR,0),U,2)=BPS("X")
"DATA",9002313.91,202,0)
547^^APPROVED MESSAGE CODE COUNT^A/N^^^^1^N
"DATA",9002313.91,202,5)
5F^1
"DATA",9002313.91,202,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,202,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,202,25,0)
^^1^1^3031205^
"DATA",9002313.91,202,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,202,30,0)
^^1^1^3031205^
"DATA",9002313.91,202,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),540),U,7)=BPS("X")
"DATA",9002313.91,203,0)
548^^APPROVED MESSAGE CODE^A/N^^^^3^A/N
"DATA",9002313.91,203,5)
6F^3
"DATA",9002313.91,203,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,203,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,203,25,0)
^9002313.9104^1^1^3031210^^^
"DATA",9002313.91,203,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,203,30,0)
^9002313.9103^1^1^3031210^^^
"DATA",9002313.91,203,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),548,0),B,4)=BPS("X")
"DATA",9002313.91,204,0)
549^^HELP DESK PHONE NUMBER QUAL^A/N^^^^2^A/N
"DATA",9002313.91,204,1)
HELP DESK TELEPHONE NUMBER QUALIFER
"DATA",9002313.91,204,5)
7F^2
"DATA",9002313.91,204,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,204,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,204,25,0)
^^1^1^3031210^
"DATA",9002313.91,204,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,204,30,0)
^^1^1^3031210^
"DATA",9002313.91,204,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),540),U,9)=BPS("X")
"DATA",9002313.91,205,0)
550^^HELP DESK TELEPHONE NUMBER^A/N^^^^18^A/N
"DATA",9002313.91,205,5)
8F^18
"DATA",9002313.91,205,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,205,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,205,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,205,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),18)
"DATA",9002313.91,205,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,205,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),540),U,10)=BPS("X")
"DATA",9002313.91,206,0)
551^^PREFERRED PRODUCT COUNT^A/N^^^^1^N
"DATA",9002313.91,206,5)
9F^1
"DATA",9002313.91,206,10,0)
^9002313.9101^1^1^3031216
"DATA",9002313.91,206,10,1,0)
S BPS("X")=""
"DATA",9002313.91,206,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,206,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,207,0)
552^^PREFERRED PRODUCT ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,207,5)
AP^2
"DATA",9002313.91,207,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,207,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,207,25,0)
^^1^1^3031216^
"DATA",9002313.91,207,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,207,30,0)
^^1^1^3031216^
"DATA",9002313.91,207,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,1)=BPS("X")
"DATA",9002313.91,208,0)
553^^PREFERRED PRODUCT ID^A/N^^^^19^A/N
"DATA",9002313.91,208,5)
AR^19
"DATA",9002313.91,208,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,208,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,208,25,0)
^^1^1^3031216^
"DATA",9002313.91,208,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,208,30,0)
^^1^1^3031216^
"DATA",9002313.91,208,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,2)=BPS("X")
"DATA",9002313.91,209,0)
554^^PREFERRED PRODUCT INCENTIVE^A/N^^^^8^D
"DATA",9002313.91,209,5)
AS^8
"DATA",9002313.91,209,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,209,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,209,25,0)
^^1^1^3031216^
"DATA",9002313.91,209,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,209,30,0)
^^1^1^3031216^
"DATA",9002313.91,209,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,3)=BPS("X")
"DATA",9002313.91,210,0)
555^^PREF PRODUCT COST SHARE INCNTV^A/N^^^^8^D
"DATA",9002313.91,210,5)
AT^8
"DATA",9002313.91,210,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,210,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,210,25,0)
^9002313.9104^1^1^3031216^^
"DATA",9002313.91,210,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,210,30,0)
^9002313.9103^1^1^3031216^^
"DATA",9002313.91,210,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,4)=BPS("X")
"DATA",9002313.91,211,0)
556^^PREFERRED PRODUCT DESCRIPTION^A/N^^^^40^A/N
"DATA",9002313.91,211,5)
AU^40
"DATA",9002313.91,211,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,211,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,211,25,0)
^^1^1^3031216^
"DATA",9002313.91,211,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,211,30,0)
^^1^1^3031216^
"DATA",9002313.91,211,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),551.01,DUR,1),U,5)=BPS("X")
"DATA",9002313.91,212,0)
557^^TAX EXEMPT INDICATOR^A/N^^^^1^A/N
"DATA",9002313.91,212,5)
AV^1
"DATA",9002313.91,212,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,212,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,212,25,0)
^^1^1^3031217^
"DATA",9002313.91,212,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,212,30,0)
^^1^1^3031217^
"DATA",9002313.91,212,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),550),U,7)
"DATA",9002313.91,213,0)
558^^FLAT SALES TAX AMOUNT PAID^A/N^^^^8^D
"DATA",9002313.91,213,5)
AW^8
"DATA",9002313.91,213,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,213,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,213,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,213,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,213,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,213,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),550),U,8)=BPS("X")
"DATA",9002313.91,214,0)
559^^PERCENTAGE SALES TAX AMT PAID^A/N^^^^8^D
"DATA",9002313.91,214,5)
AX^8
"DATA",9002313.91,214,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,214,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,214,25,0)
^9002313.9104^1^1^3031212^^
"DATA",9002313.91,214,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,214,30,0)
^9002313.9103^1^1^3031212^^^
"DATA",9002313.91,214,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),550),U,9)=BPS("X")
"DATA",9002313.91,215,0)
560^^PERCENTAGE SALES TAX RATE PAID^A/N^^^^7^D
"DATA",9002313.91,215,5)
AY^8
"DATA",9002313.91,215,10,0)
^9002313.9101^1^1^3040223
"DATA",9002313.91,215,10,1,0)
S BPS("X")=""
"DATA",9002313.91,215,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,215,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),7)
"DATA",9002313.91,216,0)
561^^PERCENT SALES TAX BASIS PAID^A/N^^^^2^A/N
"DATA",9002313.91,216,5)
AZ^8
"DATA",9002313.91,216,10,0)
^9002313.9101^1^1^3031212
"DATA",9002313.91,216,10,1,0)
S BPS("X")=""
"DATA",9002313.91,216,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,216,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,217,0)
562^^PROFESSIONAL SERVICE FEE PAID^A/N^^^^8^D
"DATA",9002313.91,217,5)
J1^8
"DATA",9002313.91,217,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,217,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,217,25,0)
^^1^1^3031217^
"DATA",9002313.91,217,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,217,30,0)
^^1^1^3031217^
"DATA",9002313.91,217,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),560),U,2)=BPS("X")
"DATA",9002313.91,218,0)
563^^OTHER AMOUNT PAID COUNT^N^^^^1^N
"DATA",9002313.91,218,5)
J2^1
"DATA",9002313.91,218,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,218,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,218,25,0)
^^1^1^3031212^
"DATA",9002313.91,218,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,218,30,0)
^^1^1^3031212^
"DATA",9002313.91,218,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),563.01,DUR,0)),U,1)
"DATA",9002313.91,219,0)
564^^OTHER AMOUNT PAID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,219,5)
J3^2
"DATA",9002313.91,219,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,219,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,219,25,0)
^^1^1^3031212^
"DATA",9002313.91,219,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,219,30,0)
^^1^1^3031212^
"DATA",9002313.91,219,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),563.01,DUR,1),U,1)=BPS("X")
"DATA",9002313.91,220,0)
565^^OTHER AMOUNT PAID^A/N^^^^8^D
"DATA",9002313.91,220,5)
J4^8
"DATA",9002313.91,220,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,220,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,220,25,0)
^9002313.9104^1^1^3031212^^
"DATA",9002313.91,220,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,220,30,0)
^9002313.9103^1^1^3031212^^
"DATA",9002313.91,220,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),563.01,DUR,1),U,2)=BPS("X")
"DATA",9002313.91,221,0)
566^^OTHER PAYER AMOUNT RECOGNIZED^A/N^^^^8^D
"DATA",9002313.91,221,5)
J5^8
"DATA",9002313.91,221,10,0)
^9002313.9101^1^1^3101115^^
"DATA",9002313.91,221,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,221,25,0)
^^1^1^3090304^
"DATA",9002313.91,221,25,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,221,30,0)
^^1^1^3090304^
"DATA",9002313.91,221,30,1,0)
D SET566^BPSFLD01
"DATA",9002313.91,222,0)
567^^DUR/PPS RESPONSE CODE COUNTER^N^^^^1^N
"DATA",9002313.91,222,5)
J6^1
"DATA",9002313.91,222,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,222,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,222,25,0)
^9002313.9104^1^1^3031210^^
"DATA",9002313.91,222,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,222,30,0)
^9002313.9103^1^1^3031210^^
"DATA",9002313.91,222,30,1,0)
S $P(^BPSR(BPS(9002313.02),1000,BPS(9002313.0201),567.01,DUR,0),U,1)=BPS("X")
"DATA",9002313.91,223,0)
568^^PAYER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,223,5)
J7^2
"DATA",9002313.91,223,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,223,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,223,25,0)
^^1^1^3031212^
"DATA",9002313.91,223,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,223,30,0)
^^1^1^3031212^
"DATA",9002313.91,223,30,1,0)
S $P(^BPSR(BPS(9002313.02),560),U,8)
"DATA",9002313.91,224,0)
569^^PAYER ID^A/N^^^^10^A/N
"DATA",9002313.91,224,5)
J8^10
"DATA",9002313.91,224,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,224,10,1,0)
;This is Response-only field which does not use the GET FORMAT or SET code
"DATA",9002313.91,224,25,0)
^9002313.9104^1^1^3031212^^
"DATA",9002313.91,224,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,224,30,0)
^9002313.9103^1^1^3031212^^
"DATA",9002313.91,224,30,1,0)
S $P(^BPSR(BPS(9002313.02),560),U,9)=BPS("X")
"DATA",9002313.91,225,0)
600^^UNIT OF MEASURE^A/N^^^^2^A/N
"DATA",9002313.91,225,5)
28^2
"DATA",9002313.91,225,10,0)
^9002313.9101^1^1^3070625
"DATA",9002313.91,225,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Unit of Measure"))
"DATA",9002313.91,225,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,225,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,225,25,0)
^9002313.9104^1^1^3070620^
"DATA",9002313.91,225,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,225,30,0)
^9002313.9103^1^1^3070620^
"DATA",9002313.91,225,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),600),U,1)=""
"DATA",9002313.91,240,0)
478^^OTHER AMT CLAIMED SBMTTD COUNT^N^^^^1^N
"DATA",9002313.91,240,1)
OTHER AMOUNT CLAIMED SUBMITTED COUNT
"DATA",9002313.91,240,5)
H7^1
"DATA",9002313.91,240,10,0)
^9002313.9101^1^1^3101006^^^
"DATA",9002313.91,240,10,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,240,20,0)
^9002313.9102^1^1^3101006^^^
"DATA",9002313.91,240,20,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,240,25,0)
^9002313.9104^1^1^3101006^^
"DATA",9002313.91,240,25,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,240,30,0)
^9002313.9103^1^1^3101006^^
"DATA",9002313.91,240,30,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,241,0)
479^^OTHER AMT CLAIMED SUBM QLFR^A/N^^^^2^A/N
"DATA",9002313.91,241,1)
OTHER AMOUNT CLAIMED SUBMITTED QUALIFIER
"DATA",9002313.91,241,5)
H8^2
"DATA",9002313.91,241,10,0)
^9002313.9101^1^1^3101006^^^
"DATA",9002313.91,241,10,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,241,20,0)
^9002313.9102^1^1^3101006^^^
"DATA",9002313.91,241,20,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,241,25,0)
^9002313.9104^1^1^3101006^^
"DATA",9002313.91,241,25,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,241,30,0)
^9002313.9103^1^1^3101006^^
"DATA",9002313.91,241,30,1,0)
; fields 478, 479, 480 handled by FLD480^BPSOSSG (see SET CODE in field 480)
"DATA",9002313.91,242,0)
463^^INTERMEDIARY AUTH TYPE ID^N^^^^2^N
"DATA",9002313.91,242,1)
INTERMEDIARY AUTHORIZATION TYPE ID
"DATA",9002313.91,242,5)
EW^2
"DATA",9002313.91,242,10,0)
^^2^2^3110727^
"DATA",9002313.91,242,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Intermediary Auth Type ID"))
"DATA",9002313.91,242,10,2,0)
S:BPS("X")="" BPS("X")=0
"DATA",9002313.91,242,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,242,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,242,25,0)
^9002313.9104^1^1^3030823^^^^
"DATA",9002313.91,242,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,242,30,0)
^9002313.9103^1^1^3030823^^
"DATA",9002313.91,242,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,3)=BPS("X")
"DATA",9002313.91,265,0)
451^^COMPOUND DISP UNIT FORM INDCTR^N^^^^1^N
"DATA",9002313.91,265,1)
COMPOUND DISPENSING UNIT FORM INDICATOR
"DATA",9002313.91,265,5)
EG^1
"DATA",9002313.91,265,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,265,10,1,0)
S BPS("X")=""
"DATA",9002313.91,265,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,265,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,265,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,265,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,266,0)
450^^COMPOUND DOSAGE FORM DESC CODE^A/N^^^^15^A/N
"DATA",9002313.91,266,1)
COMPOUND DOSAGE FORM DESCRIPTION CODE
"DATA",9002313.91,266,5)
EF^15
"DATA",9002313.91,266,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,266,10,1,0)
S BPS("X")=""
"DATA",9002313.91,266,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,266,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,266,25,0)
^9002313.9104^1^1^3040107^^^^
"DATA",9002313.91,266,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,266,30,0)
^9002313.9103^1^1^3040107^^^^
"DATA",9002313.91,266,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,10)=BPS("X")
"DATA",9002313.91,267,0)
490^^COMP INGRED BASIS COST DETERM^A/N^^^^2^A/N
"DATA",9002313.91,267,1)
COMPOUND INGREDIENT BASIS OF COST DETERMINATION
"DATA",9002313.91,267,5)
UE^2
"DATA",9002313.91,267,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,267,10,1,0)
S BPS("X")=""
"DATA",9002313.91,267,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,267,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,267,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,267,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,268,0)
447^^COMPOUND INGREDIENT COMP COUNT^N^^^^2^N
"DATA",9002313.91,268,1)
COMPOUND INGREDIENT COMPONENT COUNT
"DATA",9002313.91,268,5)
EC^2
"DATA",9002313.91,268,10,0)
^9002313.9101^1^1^3101115^
"DATA",9002313.91,268,10,1,0)
S BPS("X")=""
"DATA",9002313.91,268,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,268,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,268,25,0)
^9002313.9104^1^1^3040107^^^^
"DATA",9002313.91,268,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,268,30,0)
^9002313.9103^1^1^3040107^^^^
"DATA",9002313.91,268,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,7)=BPS("X")
"DATA",9002313.91,269,0)
449^^COMPOUND INGREDIENT DRUG COST^N^^^^8^D
"DATA",9002313.91,269,5)
EE^8
"DATA",9002313.91,269,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,269,10,1,0)
S BPS("X")=""
"DATA",9002313.91,269,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,269,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,269,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,269,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,271,0)
489^^COMPOUND PRODUCT ID^A/N^^^^19^A/N
"DATA",9002313.91,271,5)
TE^19
"DATA",9002313.91,271,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,271,10,1,0)
S BPS("X")=""
"DATA",9002313.91,271,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,271,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,271,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,271,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,272,0)
488^^COMPOUND PRODUCT ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,272,5)
RE^2
"DATA",9002313.91,272,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,272,10,1,0)
S BPS("X")=""
"DATA",9002313.91,272,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,272,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,272,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,272,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,273,0)
452^^COMPOUND ROUTE OF ADMIN^N^^^^2^N
"DATA",9002313.91,273,5)
EH^2
"DATA",9002313.91,273,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,273,10,1,0)
S BPS("X")=""
"DATA",9002313.91,273,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,273,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,273,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,273,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,308,0)
448^^COMPOUND INGREDIENT QUANTITY^N^^^^10^N
"DATA",9002313.91,308,5)
ED^10
"DATA",9002313.91,308,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,308,10,1,0)
S BPS("X")=""
"DATA",9002313.91,308,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,308,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,308,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,308,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,324,0)
494^^MEASUREMENT DATE^A/N^^^^8^N
"DATA",9002313.91,324,5)
ZE^8
"DATA",9002313.91,324,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,324,10,1,0)
S BPS("X")=""
"DATA",9002313.91,324,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,324,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,324,25,0)
^9002313.9104^1^1^3040224^
"DATA",9002313.91,324,25,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,325,0)
496^^MEASUREMENT DIMENSION^A/N^^^^2^A/N
"DATA",9002313.91,325,5)
H2^2
"DATA",9002313.91,325,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,325,10,1,0)
S BPS("X")=""
"DATA",9002313.91,325,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,325,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,325,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,325,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,326,0)
495^^MEASUREMENT TIME^N^^^^4^N
"DATA",9002313.91,326,5)
H1^4
"DATA",9002313.91,326,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,326,10,1,0)
S BPS("X")=""
"DATA",9002313.91,326,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,326,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,326,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,326,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,327,0)
497^^MEASUREMENT UNIT^A/N^^^^2^A/N
"DATA",9002313.91,327,5)
H3^2
"DATA",9002313.91,327,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,327,10,1,0)
S BPS("X")=""
"DATA",9002313.91,327,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,327,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,327,25,0)
^9002313.9104^1^1^3040224^^^^
"DATA",9002313.91,327,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,328,0)
499^^MEASUREMENT VALUE^A/N^^^^15^A/N
"DATA",9002313.91,328,5)
H4^15
"DATA",9002313.91,328,10,0)
^9002313.9101^1^1^3040224
"DATA",9002313.91,328,10,1,0)
S BPS("X")=""
"DATA",9002313.91,328,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,328,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,328,25,0)
^9002313.9104^1^1^3040224^^^
"DATA",9002313.91,328,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,329,0)
990^^OTHER PAYER BIN NUMBER^N^^^^6^N
"DATA",9002313.91,329,5)
MG^6
"DATA",9002313.91,329,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,329,10,1,0)
S BPS("X")=""
"DATA",9002313.91,329,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,329,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,329,30,0)
^9002313.9103^1^1^3101101^
"DATA",9002313.91,329,30,1,0)
S $P(^BPSC(BPS(9002313.02),980),U,10)=""
"DATA",9002313.91,330,0)
991^^OTHER PAYER PROC CONTROL NUM^A/N^^^^10^A/N
"DATA",9002313.91,330,1)
OTHER PAYER PROCESSOR CONTROL NUMBER
"DATA",9002313.91,330,5)
MH^10
"DATA",9002313.91,330,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,330,10,1,0)
S BPS("X")=""
"DATA",9002313.91,330,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,330,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,330,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,330,30,1,0)
S $P(^BPSC(BPS(9002313.02),990),U,1)=""
"DATA",9002313.91,331,0)
356^^OTHER PAYER CARDHOLDER ID^A/N^^^^20^A/N
"DATA",9002313.91,331,5)
NU^20
"DATA",9002313.91,331,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,331,10,1,0)
S BPS("X")=""
"DATA",9002313.91,331,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,331,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,331,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,331,30,1,0)
S $P(^BPSC(BPS(9002313.02),350),U,6)=""
"DATA",9002313.91,332,0)
992^^OTHER PAYER GROUP ID^A/N^^^^15^A/N
"DATA",9002313.91,332,5)
MJ^15
"DATA",9002313.91,332,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,332,10,1,0)
S BPS("X")=""
"DATA",9002313.91,332,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,332,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,332,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,332,30,1,0)
S $P(^BPSC(BPS(9002313.02),990),U,2)=""
"DATA",9002313.91,333,0)
359^^MEDIGAP ID^A/N^^^^20^A/N
"DATA",9002313.91,333,5)
2A^20
"DATA",9002313.91,333,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,333,10,1,0)
S BPS("X")=""
"DATA",9002313.91,333,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,333,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,333,30,0)
^9002313.9103^1^1^3100923^^
"DATA",9002313.91,333,30,1,0)
S $P(^BPSC(BPS(9002313.02),350),U,9)=""
"DATA",9002313.91,334,0)
360^^MEDICAID INDICATOR^N^^^^2^A/N
"DATA",9002313.91,334,5)
2B^2
"DATA",9002313.91,334,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,334,10,1,0)
S BPS("X")=""
"DATA",9002313.91,334,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,334,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,334,30,0)
^9002313.9103^1^1^3101101^
"DATA",9002313.91,334,30,1,0)
S $P(^BPSC(BPS(9002313.02),350),U,10)=""
"DATA",9002313.91,335,0)
361^^PROVIDER ACCEPT ASSGNMT INDCTR^A/N^^^^1^A/N
"DATA",9002313.91,335,1)
PROVIDER ACCEPT ASSIGNMENT INDICATOR
"DATA",9002313.91,335,5)
2D^1
"DATA",9002313.91,335,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,335,10,1,0)
S BPS("X")="Y"
"DATA",9002313.91,335,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,335,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,335,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,335,30,1,0)
S $P(^BPSC(BPS(9002313.02),360),U,1)=$G(BPS("X"))
"DATA",9002313.91,336,0)
997^^CMS PART D DEFND QLFD FACILITY^A/N^^^^1^A/N
"DATA",9002313.91,336,1)
CMS PART D DEFINED QUALIFIED FACILITY
"DATA",9002313.91,336,5)
G2^1
"DATA",9002313.91,336,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,336,10,1,0)
S BPS("X")="N"
"DATA",9002313.91,336,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,336,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,336,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,336,30,1,0)
S $P(^BPSC(BPS(9002313.02),990),U,7)=$G(BPS("X"))
"DATA",9002313.91,337,0)
115^^MEDICAID ID NUMBER^A/N^^^^20^A/N
"DATA",9002313.91,337,5)
N5^20
"DATA",9002313.91,337,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,337,10,1,0)
S BPS("X")=""
"DATA",9002313.91,337,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,337,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,337,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,337,30,1,0)
S $P(^BPSC(BPS(9002313.02),110),U,5)=""
"DATA",9002313.91,338,0)
116^^MEDICAID AGENCY NUMBER^A/N^^^^15^A/N
"DATA",9002313.91,338,5)
N6^15
"DATA",9002313.91,338,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,338,10,1,0)
S BPS("X")=""
"DATA",9002313.91,338,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,338,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,338,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,338,30,1,0)
S $P(^BPSC(BPS(9002313.02),110),U,6)=""
"DATA",9002313.91,339,0)
384^^PATIENT RESIDENCE^N^^^^2^N
"DATA",9002313.91,339,5)
4X^2
"DATA",9002313.91,339,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,339,10,1,0)
S BPS("X")=$G(BPS("Patient","Patient Residence"))
"DATA",9002313.91,339,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,339,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,339,30,0)
^9002313.9103^1^1^3101007^^^^
"DATA",9002313.91,339,30,1,0)
S $P(^BPSC(BPS(9002313.02),380),U,4)=$G(BPS("X"))
"DATA",9002313.91,340,0)
354^^SUBMISSION CLARIF CODE COUNT^N^^^^1^N
"DATA",9002313.91,340,1)
SUBMISSION CLARIFICATION CODE COUNT
"DATA",9002313.91,340,5)
NX^2
"DATA",9002313.91,340,10,0)
^9002313.9101^1^1^3101006^^
"DATA",9002313.91,340,10,1,0)
; fields 354 & 420 handled by FLD420^BPSOSSG (see SET CODE in field 420)
"DATA",9002313.91,340,20,0)
^9002313.9102^1^1^3101006^^
"DATA",9002313.91,340,20,1,0)
; fields 354 & 420 handled by FLD420^BPSOSSG (see SET CODE in field 420)
"DATA",9002313.91,340,25,0)
^9002313.9104^1^1^3101006^^
"DATA",9002313.91,340,25,1,0)
; fields 354 & 420 handled by FLD420^BPSOSSG (see SET CODE in field 420)
"DATA",9002313.91,340,30,0)
^9002313.9103^1^1^3101006^^^^
"DATA",9002313.91,340,30,1,0)
; fields 354 & 420 handled by FLD420^BPSOSSG (see SET CODE in field 420)
"DATA",9002313.91,341,0)
357^^DELAY REASON CODE^N^^^^2^N
"DATA",9002313.91,341,5)
NV^2
"DATA",9002313.91,341,10,0)
^9002313.9101^1^1^3101007^^
"DATA",9002313.91,341,10,1,0)
S BPS("X")=$G(BPS("Claim",BPS(9002313.0201),"Delay Reason Code"))
"DATA",9002313.91,341,20,0)
^9002313.9102^1^1^3101012^
"DATA",9002313.91,341,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,341,30,0)
^9002313.9103^1^1^3101007^^
"DATA",9002313.91,341,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),350),U,7)=$S($G(BPS("X"))="NV00":"",1:$G(BPS("X")))
"DATA",9002313.91,342,0)
880^^TRANSACTION REFERENCE NUMBER^A/N^^^^10^A/N
"DATA",9002313.91,342,5)
K5^10
"DATA",9002313.91,342,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,342,10,1,0)
S BPS("X")=""
"DATA",9002313.91,342,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,342,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,342,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,342,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),870),U,10)=""
"DATA",9002313.91,343,0)
391^^PATIENT ASSIGNMENT INDICATOR^A/N^^^^1^A/N
"DATA",9002313.91,343,1)
PATIENT ASSIGNMENT INDICATOR (DIRECT MEMBER REIMBURSEMENT INDICATOR)
"DATA",9002313.91,343,5)
MT^1
"DATA",9002313.91,343,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,343,10,1,0)
S BPS("X")="Y"
"DATA",9002313.91,343,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,343,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,343,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,343,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),390),U,1)=$G(BPS("X"))
"DATA",9002313.91,344,0)
995^^ROUTE OF ADMINISTRATION^A/N^^^^11^A/N
"DATA",9002313.91,344,5)
E2^1
"DATA",9002313.91,344,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,344,10,1,0)
S BPS("X")=""
"DATA",9002313.91,344,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,344,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,344,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,344,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),990),U,5)=$G(BPS("X"))
"DATA",9002313.91,345,0)
996^^COMPOUND TYPE^A/N^^^^2^A/N
"DATA",9002313.91,345,5)
G1^2
"DATA",9002313.91,345,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,345,10,1,0)
S BPS("X")=""
"DATA",9002313.91,345,20,0)
^9002313.9102^1^1^3101206^
"DATA",9002313.91,345,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,345,30,0)
^^1^1^3121128
"DATA",9002313.91,345,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),990),U,6)=""
"DATA",9002313.91,346,0)
114^^MEDICAID SUBROGATION ICN/TCN^A/N^^^^20^A/N
"DATA",9002313.91,346,1)
MEDICAID SUBROGATION INTERNAL CONTROL NUMBER/TRANSACTION CONTROL NUMBER (ICN/TCN)
"DATA",9002313.91,346,5)
N4^20
"DATA",9002313.91,346,10,0)
^9002313.9101^1^1^3101110^
"DATA",9002313.91,346,10,1,0)
S BPS("X")=""
"DATA",9002313.91,346,20,0)
^9002313.9102^1^1^3101110^
"DATA",9002313.91,346,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,346,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,346,30,1,0)
S $P(^BPSC(BPS(9002313.02),110),U,4)=""
"DATA",9002313.91,347,0)
147^^PHARMACY SERVICE TYPE^N^^^^2^N
"DATA",9002313.91,347,5)
U7^2
"DATA",9002313.91,347,10,0)
^9002313.9101^1^1^3101007^^
"DATA",9002313.91,347,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Pharmacy Service Type"))
"DATA",9002313.91,347,20,0)
^9002313.9102^1^1^3101007^^
"DATA",9002313.91,347,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,347,30,0)
^9002313.9103^1^1^3101007^^^^
"DATA",9002313.91,347,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),140),U,7)=$G(BPS("X"))
"DATA",9002313.91,348,0)
364^^PRESCRIBER FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,348,5)
2J^12
"DATA",9002313.91,348,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,348,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber First Name"))
"DATA",9002313.91,348,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,348,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,348,30,0)
^9002313.9103^1^1^3101101^^^
"DATA",9002313.91,348,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,4)=$G(BPS("X"))
"DATA",9002313.91,349,0)
365^^PRESCRIBER STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,349,5)
2K^30
"DATA",9002313.91,349,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,349,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Street Address"))
"DATA",9002313.91,349,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,349,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,349,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,349,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,5)=$G(BPS("X"))
"DATA",9002313.91,350,0)
366^^PRESCRIBER CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,350,5)
2M^20
"DATA",9002313.91,350,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,350,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber City Address"))
"DATA",9002313.91,350,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,350,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,350,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,350,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,6)=$G(BPS("X"))
"DATA",9002313.91,351,0)
367^^PRESCRIBER STATE/PROV ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,351,1)
PRESCRIBER STATE/PROVINCE ADDRESS
"DATA",9002313.91,351,5)
2N^2
"DATA",9002313.91,351,10,0)
^9002313.9101^1^1^3101029^^
"DATA",9002313.91,351,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber State/Province Address"))
"DATA",9002313.91,351,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,351,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,351,30,0)
^9002313.9103^1^1^3101101^^^
"DATA",9002313.91,351,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,7)=$G(BPS("X"))
"DATA",9002313.91,352,0)
368^^PRESCRIBER ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,352,5)
2P^2
"DATA",9002313.91,352,10,0)
^9002313.9101^1^1^3101029^
"DATA",9002313.91,352,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Zip/Postal Zone"))
"DATA",9002313.91,352,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,352,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,352,30,0)
^9002313.9103^1^1^3101101^^
"DATA",9002313.91,352,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,8)=$G(BPS("X"))
"DATA",9002313.91,353,0)
993^^INTERNAL CONTROL NUMBER^A/N^^^^30^A/N
"DATA",9002313.91,353,5)
A7^30
"DATA",9002313.91,353,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,353,10,1,0)
S BPS("X")=""
"DATA",9002313.91,353,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,353,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,353,30,0)
^9002313.9103^1^1^3101029^
"DATA",9002313.91,353,30,1,0)
; This field currently not implemented
"DATA",9002313.91,354,0)
392^^BENEFIT STAGE COUNT^N^^^^1^N
"DATA",9002313.91,354,5)
MU^1
"DATA",9002313.91,354,10,0)
^^1^1^3110727^
"DATA",9002313.91,354,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,354,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,354,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,354,30,0)
^^1^1^3110727^
"DATA",9002313.91,354,30,1,0)
D SET392^BPSFLD01
"DATA",9002313.91,355,0)
393^^BENEFIT STAGE QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,355,5)
MV^2
"DATA",9002313.91,355,10,0)
^^1^1^3110727^
"DATA",9002313.91,355,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,355,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,355,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,355,30,0)
^^1^1^3110727^
"DATA",9002313.91,355,30,1,0)
D SET393^BPSFLD01
"DATA",9002313.91,356,0)
394^^BENEFIT STAGE AMOUNT^N^^^^8^D
"DATA",9002313.91,356,5)
MW^8
"DATA",9002313.91,356,10,0)
^^1^1^3110727^
"DATA",9002313.91,356,10,1,0)
;GET code for this COB field is executed in COB^BPSOSHF
"DATA",9002313.91,356,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,356,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,356,30,0)
^^1^1^3110727^
"DATA",9002313.91,356,30,1,0)
D SET394^BPSFLD01
"DATA",9002313.91,357,0)
117^^BILLING ENTITY TYPE INDICATOR^N^^^^2^N
"DATA",9002313.91,357,5)
TR^2
"DATA",9002313.91,357,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,357,10,1,0)
S BPS("X")=""
"DATA",9002313.91,357,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,357,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,357,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,357,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,7)=""
"DATA",9002313.91,358,0)
118^^PAY TO QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,358,5)
TS^2
"DATA",9002313.91,358,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,358,10,1,0)
S BPS("X")=""
"DATA",9002313.91,358,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,358,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,358,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,358,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,8)=""
"DATA",9002313.91,359,0)
119^^PAY TO ID^A/N^^^^15^A/N
"DATA",9002313.91,359,5)
TT^15
"DATA",9002313.91,359,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,359,10,1,0)
S BPS("X")=""
"DATA",9002313.91,359,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,359,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,359,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,359,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,9)=""
"DATA",9002313.91,360,0)
120^^PAY TO NAME^A/N^^^^20^A/N
"DATA",9002313.91,360,5)
TU^20
"DATA",9002313.91,360,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,360,10,1,0)
S BPS("X")=""
"DATA",9002313.91,360,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,360,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,360,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,360,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,10)=""
"DATA",9002313.91,361,0)
121^^PAY TO STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,361,5)
TV^30
"DATA",9002313.91,361,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,361,10,1,0)
S BPS("X")=""
"DATA",9002313.91,361,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,361,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,361,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,361,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,1)=""
"DATA",9002313.91,362,0)
122^^PAY TO CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,362,5)
TW^20
"DATA",9002313.91,362,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,362,10,1,0)
S BPS("X")=""
"DATA",9002313.91,362,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,362,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,362,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,362,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,2)=""
"DATA",9002313.91,363,0)
124^^PAY TO ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,363,5)
TY^15
"DATA",9002313.91,363,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,363,10,1,0)
S BPS("X")=""
"DATA",9002313.91,363,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,363,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,363,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,363,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,4)=""
"DATA",9002313.91,364,0)
125^^GENERIC EQUIV PROD ID QLFR^A/N^^^^2^A/N
"DATA",9002313.91,364,1)
GENERIC EQUIVALENT PRODUCT ID QUALIFIER
"DATA",9002313.91,364,5)
TZ^2
"DATA",9002313.91,364,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,364,10,1,0)
S BPS("X")=""
"DATA",9002313.91,364,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,364,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,364,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,364,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,5)=""
"DATA",9002313.91,365,0)
126^^GENERIC EQUIVALENT PRODUCT ID^A/N^^^^19^A/N
"DATA",9002313.91,365,5)
UA^19
"DATA",9002313.91,365,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,365,10,1,0)
S BPS("X")=""
"DATA",9002313.91,365,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,365,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),19)
"DATA",9002313.91,365,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,365,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,6)=""
"DATA",9002313.91,366,0)
113^^MEDICAID PAID AMOUNT^N^^^^8^D
"DATA",9002313.91,366,5)
N3^8
"DATA",9002313.91,366,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,366,10,1,0)
S BPS("X")=""
"DATA",9002313.91,366,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,366,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,366,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,366,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),110),U,3)=""
"DATA",9002313.91,367,0)
362^^COMPOUND INGRED MOD CODE CNT^N^^^^2^N
"DATA",9002313.91,367,1)
COMPOUND INGREDIENT MODIFIER CODE COUNT
"DATA",9002313.91,367,5)
2G^2
"DATA",9002313.91,367,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,367,10,1,0)
S BPS("X")=""
"DATA",9002313.91,367,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,367,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,367,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,367,30,1,0)
; This field currently not implemented
"DATA",9002313.91,368,0)
363^^COMPOUND INGRED MODIFIER CODE^A/N^^^^2^A/N
"DATA",9002313.91,368,1)
COMPOUND INGREDIENT MODIFIER CODE
"DATA",9002313.91,368,5)
2H^2
"DATA",9002313.91,368,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,368,10,1,0)
S BPS("X")=""
"DATA",9002313.91,368,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,368,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,368,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,368,30,1,0)
; This field currently not implemented
"DATA",9002313.91,369,0)
369^^ADDITIONAL DCMNTN TYPE ID^A/N^^^^3^A/N
"DATA",9002313.91,369,1)
ADDITIONAL DOCUMENTATION TYPE ID
"DATA",9002313.91,369,5)
2Q^3
"DATA",9002313.91,369,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,369,10,1,0)
S BPS("X")=""
"DATA",9002313.91,369,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,369,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,369,30,0)
^9002313.9103^1^1^3101206^^
"DATA",9002313.91,369,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,9)=""
"DATA",9002313.91,370,0)
370^^LENGTH OF NEED^N^^^^3^N
"DATA",9002313.91,370,5)
2R^3
"DATA",9002313.91,370,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,370,10,1,0)
S BPS("X")=""
"DATA",9002313.91,370,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,370,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,370,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,370,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),360),U,10)=""
"DATA",9002313.91,371,0)
371^^LENGTH OF NEED QUALIFIER^N^^^^2^N
"DATA",9002313.91,371,5)
2S^3
"DATA",9002313.91,371,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,371,10,1,0)
S BPS("X")=""
"DATA",9002313.91,371,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,371,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,371,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,371,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,1)=""
"DATA",9002313.91,372,0)
372^^PRESCRIBER/SUPPLIER DT SIGNED^N^^^^8^N
"DATA",9002313.91,372,1)
PRESCRIBER/SUPPLIER DATE SIGNED
"DATA",9002313.91,372,5)
2T^9
"DATA",9002313.91,372,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,372,10,1,0)
S BPS("X")=""
"DATA",9002313.91,372,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,372,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,372,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,372,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,2)=""
"DATA",9002313.91,373,0)
373^^REQUEST STATUS^A/N^^^^1^A/N
"DATA",9002313.91,373,5)
2U^1
"DATA",9002313.91,373,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,373,10,1,0)
S BPS("X")=""
"DATA",9002313.91,373,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,373,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,373,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,373,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,3)=""
"DATA",9002313.91,374,0)
374^^REQUEST PERIOD BEGIN DATE^N^^^^8^N
"DATA",9002313.91,374,5)
2V^8
"DATA",9002313.91,374,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,374,10,1,0)
S BPS("X")=""
"DATA",9002313.91,374,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,374,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,374,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,374,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,4)=""
"DATA",9002313.91,375,0)
375^^REQ PERIOD RECERT/REVISED DT^N^^^^8^N
"DATA",9002313.91,375,1)
REQUEST PERIOD RECERT/REVISED DATE
"DATA",9002313.91,375,5)
2W^8
"DATA",9002313.91,375,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,375,10,1,0)
S BPS("X")=""
"DATA",9002313.91,375,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,375,20,1,0)
S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")))
"DATA",9002313.91,375,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,375,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,5)=""
"DATA",9002313.91,376,0)
376^^SUPPORTING DOCUMENTATION^A/N^^^^65^A/N
"DATA",9002313.91,376,5)
2X^65
"DATA",9002313.91,376,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,376,10,1,0)
S BPS("X")=""
"DATA",9002313.91,376,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,376,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),65)
"DATA",9002313.91,376,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,376,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),370),U,6)=""
"DATA",9002313.91,377,0)
377^^QUESTION NUMBER/LETTER COUNT^A/N^^^^2^N
"DATA",9002313.91,377,5)
2Z^65
"DATA",9002313.91,377,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,377,10,1,0)
S BPS("X")=""
"DATA",9002313.91,377,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,377,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,378,0)
378^^QUESTION NUMBER/LETTER^A/N^^^^3^A/N
"DATA",9002313.91,378,5)
4B^3
"DATA",9002313.91,378,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,378,10,1,0)
S BPS("X")=""
"DATA",9002313.91,378,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,378,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,378,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,378,30,1,0)
; This field currently not implemented
"DATA",9002313.91,379,0)
379^^QUESTION PERCENT RESPONSE^N^^^^5^N
"DATA",9002313.91,379,5)
4D^5
"DATA",9002313.91,379,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,379,10,1,0)
S BPS("X")=""
"DATA",9002313.91,379,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,379,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),5)
"DATA",9002313.91,379,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,379,30,1,0)
; This field currently not implemented
"DATA",9002313.91,380,0)
380^^QUESTION DATE RESPONSE^N^^^^8^N
"DATA",9002313.91,380,5)
4G^8
"DATA",9002313.91,380,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,380,10,1,0)
S BPS("X")=""
"DATA",9002313.91,380,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,380,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,380,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,380,30,1,0)
; This field currently not implemented
"DATA",9002313.91,381,0)
381^^QUESTION DOLLAR AMT RESPONSE^N^^^^11^D
"DATA",9002313.91,381,1)
QUESTION DOLLAR AMOUNT RESPONSE
"DATA",9002313.91,381,5)
4H^9
"DATA",9002313.91,381,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,381,10,1,0)
S BPS("X")=""
"DATA",9002313.91,381,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,381,20,1,0)
S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,381,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,381,30,1,0)
; This field currently not implemented
"DATA",9002313.91,382,0)
382^^QUESTION NUMERIC RESPONSE^N^^^^11^N
"DATA",9002313.91,382,5)
4J^11
"DATA",9002313.91,382,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,382,10,1,0)
S BPS("X")=""
"DATA",9002313.91,382,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,382,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),11)
"DATA",9002313.91,382,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,382,30,1,0)
; This field currently not implemented
"DATA",9002313.91,383,0)
383^^QUESTION ALPHANUMERIC RESPONSE^A/N^^^^30^A/N
"DATA",9002313.91,383,5)
4K^30
"DATA",9002313.91,383,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,383,10,1,0)
S BPS("X")=""
"DATA",9002313.91,383,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,383,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,383,30,0)
^9002313.9103^1^1^3101206^
"DATA",9002313.91,383,30,1,0)
; This field currently not implemented
"DATA",9002313.91,384,0)
385^^FACILITY NAME^A/N^^^^30^A/N
"DATA",9002313.91,384,5)
3Q^30
"DATA",9002313.91,384,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,384,10,1,0)
S BPS("X")=""
"DATA",9002313.91,384,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,384,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,384,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,384,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,5)=""
"DATA",9002313.91,385,0)
386^^FACILITY STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,385,5)
3U^30
"DATA",9002313.91,385,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,385,10,1,0)
S BPS("X")=""
"DATA",9002313.91,385,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,385,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,385,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,385,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,6)=""
"DATA",9002313.91,386,0)
387^^FACILITY STATE/PROV ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,386,1)
FACILITY STATE/PROVINCE ADDRESS
"DATA",9002313.91,386,5)
3V^2
"DATA",9002313.91,386,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,386,10,1,0)
S BPS("X")=""
"DATA",9002313.91,386,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,386,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,386,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,386,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,7)=""
"DATA",9002313.91,387,0)
388^^FACILITY CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,387,5)
5J^20
"DATA",9002313.91,387,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,387,10,1,0)
S BPS("X")=""
"DATA",9002313.91,387,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,387,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,387,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,387,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,8)=""
"DATA",9002313.91,388,0)
389^^FACILITY ZIP/POSTAL ZONE^A/N^^^^15^A/N
"DATA",9002313.91,388,5)
6D^16
"DATA",9002313.91,388,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,388,10,1,0)
S BPS("X")=""
"DATA",9002313.91,388,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,388,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,388,30,0)
^9002313.9103^1^1^3100925^
"DATA",9002313.91,388,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),380),U,9)=""
"DATA",9002313.91,389,0)
390^^NARRATIVE MESSAGE^A/N^^^^200^A/N
"DATA",9002313.91,389,5)
BM^200
"DATA",9002313.91,389,10,0)
^9002313.9101^1^1^3101110^
"DATA",9002313.91,389,10,1,0)
S BPS("X")=""
"DATA",9002313.91,389,20,0)
^9002313.9102^1^1^3101110^
"DATA",9002313.91,389,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),200)
"DATA",9002313.91,389,30,0)
^9002313.9103^1^1^3101110^^
"DATA",9002313.91,389,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),389),U,2)=""
"DATA",9002313.91,390,0)
130^^ADDITIONAL MESSAGE INFO COUNT^N^^^^2^N
"DATA",9002313.91,390,5)
UF^2
"DATA",9002313.91,390,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,390,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,391,0)
132^^ADDITIONAL MSG INFO QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,391,5)
UH^2
"DATA",9002313.91,391,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,391,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,392,0)
131^^ADDITIONAL MSG INFO CONTINUITY^N^^^^1^A/N
"DATA",9002313.91,392,5)
UG^2
"DATA",9002313.91,392,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,392,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,393,0)
987^^URL^A/N^^^^255^A/N
"DATA",9002313.91,393,5)
MA^255
"DATA",9002313.91,393,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,393,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,394,0)
571^^AMOUNT ATTRIB TO PROCESSOR FEE^N^^^^8^N
"DATA",9002313.91,394,5)
NZ^8
"DATA",9002313.91,394,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,394,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,395,0)
575^^PATIENT SALES TAX^N^^^^8^N
"DATA",9002313.91,395,5)
EQ^8
"DATA",9002313.91,395,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,395,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,396,0)
574^^PLAN SALES TAX AMOUNT^N^^^^8^N
"DATA",9002313.91,396,5)
2Y^8
"DATA",9002313.91,396,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,396,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,397,0)
572^^AMOUNT OF COINSURANCE^N^^^^8^N
"DATA",9002313.91,397,5)
4U^8
"DATA",9002313.91,397,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,397,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,398,0)
573^^BASIS OF CALC - COINSURANCE^A/N^^^^2^A/N
"DATA",9002313.91,398,5)
4V^2
"DATA",9002313.91,398,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,398,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,399,0)
577^^ESTIMATED GENERIC SAVINGS^N^^^^8^N
"DATA",9002313.91,399,5)
G3^8
"DATA",9002313.91,399,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,399,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,400,0)
128^^SPENDING ACCOUNT AMT REMAINING^N^^^^8^N
"DATA",9002313.91,400,5)
UC^8
"DATA",9002313.91,400,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,400,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,401,0)
129^^HEALTH PLAN-FUNDED ASSIST AMT^N^^^^8^N
"DATA",9002313.91,401,5)
UD^8
"DATA",9002313.91,401,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,401,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,402,0)
133^^AMT ATTR TO PROV NETWORK SLCTN^N^^^^8^N
"DATA",9002313.91,402,5)
UJ^8
"DATA",9002313.91,402,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,402,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,403,0)
134^^AMT ATTR TO PROD SEL BRND DRUG^N^^^^8^N
"DATA",9002313.91,403,5)
UK^8
"DATA",9002313.91,403,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,403,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,404,0)
135^^AMT ATTR NON-PREF FRMLRY SEL^N^^^^8^N
"DATA",9002313.91,404,5)
UM^8
"DATA",9002313.91,404,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,404,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,405,0)
136^^AMT ATTR TO N-PREF FRMLRY SEL^N^^^^8^N
"DATA",9002313.91,405,5)
UN^8
"DATA",9002313.91,405,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,405,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,406,0)
137^^AMOUNT ATTR TO COVERAGE GAP^N^^^^8^N
"DATA",9002313.91,406,5)
UP^8
"DATA",9002313.91,406,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,406,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,407,0)
148^^INGRED COST CNTRCTD REIMB AMT^N^^^^8^N
"DATA",9002313.91,407,5)
U8^8
"DATA",9002313.91,407,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,407,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,408,0)
149^^DISP FEE CNTRCTD REIMB AMT^N^^^^8^N
"DATA",9002313.91,408,5)
U9^8
"DATA",9002313.91,408,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,408,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,409,0)
570^^DUR ADDITIONAL TEXT^A/N^^^^100^A/N
"DATA",9002313.91,409,5)
NS^100
"DATA",9002313.91,409,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,409,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,410,0)
355^^OTHER PAYER ID COUNT^N^^^^1^N
"DATA",9002313.91,410,5)
NT^1
"DATA",9002313.91,410,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,410,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,411,0)
142^^OTHER PAYER PERSON CODE^A/N^^^^3^A/N
"DATA",9002313.91,411,5)
UV^3
"DATA",9002313.91,411,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,411,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,412,0)
127^^OTHER PAYER HELP DESK PH NUM^A/N^^^^18^A/N
"DATA",9002313.91,412,1)
OTHER PAYER HELP DESK TELEPHONE NUMBER
"DATA",9002313.91,412,5)
UB^18
"DATA",9002313.91,412,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,412,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,413,0)
143^^OTHER PAYER PATIENT REL CODE^N^^^^1^N
"DATA",9002313.91,413,5)
UW^1
"DATA",9002313.91,413,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,413,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,414,0)
144^^OTHER PAYER EFFECTIVE DATE^N^^^^8^N
"DATA",9002313.91,414,5)
UX^8
"DATA",9002313.91,414,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,414,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,415,0)
145^^OTHER PAYER TERMINATION DATE^N^^^^8^N
"DATA",9002313.91,415,5)
UY^8
"DATA",9002313.91,415,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,415,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,416,0)
139^^MEDICARE PART D COVERAGE CODE^N^^^^2^N
"DATA",9002313.91,416,5)
UR^2
"DATA",9002313.91,416,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,416,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,417,0)
138^^CMS LICS LEVEL^A/N^^^^20^A/N
"DATA",9002313.91,417,5)
UQ^20
"DATA",9002313.91,417,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,417,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,418,0)
240^^CONTRACT NUMBER^A/N^^^^8^A/N
"DATA",9002313.91,418,5)
U1^8
"DATA",9002313.91,418,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,418,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,419,0)
926^^FORMULARY ID^A/N^^^^10^A/N
"DATA",9002313.91,419,5)
FF^10
"DATA",9002313.91,419,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,419,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,420,0)
757^^BENEFIT ID^A/N^^^^15^A/N
"DATA",9002313.91,420,5)
U6^15
"DATA",9002313.91,420,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,420,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,421,0)
140^^NEXT MEDICARE PART D EFF DATE^N^^^^8^N
"DATA",9002313.91,421,5)
US^8
"DATA",9002313.91,421,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,421,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,422,0)
141^^NEXT MEDICARE PART D TERM DATE^N^^^^8^N
"DATA",9002313.91,422,5)
UT^8
"DATA",9002313.91,422,10,0)
^9002313.9101^1^1^3101206^
"DATA",9002313.91,422,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,423,0)
123^^PAY TO STATE/PROVINCE ADDRESS^A/N^^^^2^A/N
"DATA",9002313.91,423,1)
PAY TO STATE/ PROVINCE ADDRESS
"DATA",9002313.91,423,5)
TX^2
"DATA",9002313.91,423,10,0)
^9002313.9101^1^1^3101101
"DATA",9002313.91,423,10,1,0)
S BPS("X")=""
"DATA",9002313.91,423,20,0)
^9002313.9102^1^1^3101101
"DATA",9002313.91,423,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,423,30,0)
^9002313.9103^1^1^3100924^
"DATA",9002313.91,423,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),120),U,3)=""
"DATA",9002313.91,424,0)
579^^SERVICE PROVIDER ID QUALIFIER^A/N^^^^2^A/N
"DATA",9002313.91,424,1)
ASSOCIATED PRESCRIPTION / SERVICE PROVIDER ID QUALIFIER
"DATA",9002313.91,424,5)
XX^2
"DATA",9002313.91,424,10,0)
^^1^1^3130311^
"DATA",9002313.91,424,10,1,0)
S BPS("X")=""
"DATA",9002313.91,424,20,0)
^9002313.9102^1^1^3130311^^^^
"DATA",9002313.91,424,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,424,25,0)
^9002313.9104^1^1^3130311^^^^
"DATA",9002313.91,424,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,424,30,0)
^9002313.9103^1^1^3130311^^^
"DATA",9002313.91,424,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),570),U,9)=$G(BPS("X"))
"DATA",9002313.91,425,0)
580^^SERVICE PROVIDER ID^A/N^^^^15^A/N
"DATA",9002313.91,425,1)
ASSOCIATED PRESCRIPTION / SERVICE PROVIDER ID
"DATA",9002313.91,425,5)
XY^15
"DATA",9002313.91,425,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,425,10,1,0)
S BPS("X")=""
"DATA",9002313.91,425,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,425,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,425,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,425,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,425,30,0)
^^1^1^3130222^
"DATA",9002313.91,425,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),570),U,10)=BPS("X")
"DATA",9002313.91,426,0)
581^^SERVICE REFERENCE NUMBER QUAL^A/N^^^^2^A/N
"DATA",9002313.91,426,1)
ASSOCIATED PRESCRIPTION / SERVICE REFERENCE NUMBER QUALIFIER
"DATA",9002313.91,426,5)
XZ^2
"DATA",9002313.91,426,10,0)
^^1^1^3130222^
"DATA",9002313.91,426,10,1,0)
S BPS("X")=""
"DATA",9002313.91,426,20,0)
^^1^1^3130222^
"DATA",9002313.91,426,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,426,25,0)
^^1^1^3130222^
"DATA",9002313.91,426,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,426,30,0)
^^1^1^3130222^
"DATA",9002313.91,426,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,1)=BPS("X")
"DATA",9002313.91,427,0)
582^^SERVICE FILL NUMBER^N^^^^2^N
"DATA",9002313.91,427,1)
ASSOCIATED PRESCRIPTION SERVICE FILL NUMBER
"DATA",9002313.91,427,5)
X0^2
"DATA",9002313.91,427,10,0)
^^1^1^3130222^
"DATA",9002313.91,427,10,1,0)
S BPS("X")=""
"DATA",9002313.91,427,20,0)
^^1^1^3130222^
"DATA",9002313.91,427,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,427,25,0)
^^1^1^3130222^
"DATA",9002313.91,427,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,427,30,0)
^^1^1^3130222^
"DATA",9002313.91,427,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,2)=$G(BPS("X"))
"DATA",9002313.91,428,0)
583^^SERVICE PROVIDER NAME^A/N^^^^30^A/N
"DATA",9002313.91,428,1)
SERVICE PROVIDE NAME
"DATA",9002313.91,428,5)
YK^30
"DATA",9002313.91,428,10,0)
^^1^1^3130228^
"DATA",9002313.91,428,10,1,0)
S BPS("X")=""
"DATA",9002313.91,428,20,0)
^^1^1^3130222^
"DATA",9002313.91,428,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,428,25,0)
^^1^1^3130222^
"DATA",9002313.91,428,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,428,30,0)
^^1^1^3130222^
"DATA",9002313.91,428,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,3)=BPS("X")
"DATA",9002313.91,429,0)
584^^SERVICE PROVIDER STREET^A/N^^^^30^A/N
"DATA",9002313.91,429,1)
SERVICE PROVIDER STREET ADDRESS
"DATA",9002313.91,429,5)
YM^30
"DATA",9002313.91,429,10,0)
^^1^1^3130222^
"DATA",9002313.91,429,10,1,0)
S BPS("X")=""
"DATA",9002313.91,429,20,0)
^^1^1^3130222^
"DATA",9002313.91,429,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,429,25,0)
^^1^1^3130222^
"DATA",9002313.91,429,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,429,30,0)
^^1^1^3130222^
"DATA",9002313.91,429,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,4)=BPS("X")
"DATA",9002313.91,430,0)
585^^SERVICE PROVIDER CITY^A/N^^^^20^A/N
"DATA",9002313.91,430,1)
SERVICE PROVIDER CITY ADDRESS
"DATA",9002313.91,430,5)
YN^20
"DATA",9002313.91,430,10,0)
^9002313.9101^1^1^3130228^^
"DATA",9002313.91,430,10,1,0)
S BPS("X")=""
"DATA",9002313.91,430,20,0)
^^1^1^3130222^
"DATA",9002313.91,430,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,430,25,0)
^^1^1^3130222^
"DATA",9002313.91,430,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,430,30,0)
^^1^1^3130222^
"DATA",9002313.91,430,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,5)=BPS("X")
"DATA",9002313.91,431,0)
586^^SERVICE PROVIDE STATE/PROVINCE^A/N^^^^2^A/N
"DATA",9002313.91,431,1)
SERVICE PROVIDER STATE/PROVINCE ADDRESS
"DATA",9002313.91,431,5)
YP^2
"DATA",9002313.91,431,10,0)
^^1^1^3130222^
"DATA",9002313.91,431,10,1,0)
S BPS("X")=""
"DATA",9002313.91,431,20,0)
^^1^1^3130222^
"DATA",9002313.91,431,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,431,25,0)
^^1^1^3130222^
"DATA",9002313.91,431,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,431,30,0)
^^1^1^3130222^
"DATA",9002313.91,431,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,6)=BPS("X")
"DATA",9002313.91,432,0)
587^^SERVICE PROVIDER ZIP/POST CODE^A/N^^^^15^A/N
"DATA",9002313.91,432,1)
SERVICE PROVIDER ZIP/POSTAL CODE
"DATA",9002313.91,432,5)
YQ^15
"DATA",9002313.91,432,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,432,10,1,0)
S BPS("X")=""
"DATA",9002313.91,432,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,432,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,432,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,432,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,432,30,0)
^^1^1^3130222^
"DATA",9002313.91,432,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,7)=BPS("X")
"DATA",9002313.91,433,0)
590^^SELLER INITIALS^A/N^^^^3^A/N
"DATA",9002313.91,433,1)
SELLER INITIALS
"DATA",9002313.91,433,5)
YT^3
"DATA",9002313.91,433,10,0)
^^1^1^3130222^
"DATA",9002313.91,433,10,1,0)
S BPS("X")=BPS("Provider",MEDN,"Pharmacist Initials")
"DATA",9002313.91,433,20,0)
^9002313.9102^1^1^3130222^^^^
"DATA",9002313.91,433,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,433,25,0)
^9002313.9104^1^1^3130222^^^^
"DATA",9002313.91,433,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3)
"DATA",9002313.91,433,30,0)
^9002313.9103^1^1^3130222^^^^
"DATA",9002313.91,433,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),580),U,10)=BPS("X")
"DATA",9002313.91,434,0)
591^^PURCHASER ID QUALIFIER^N^^^^2^N
"DATA",9002313.91,434,1)
PURCHASER ID QUALIFIER
"DATA",9002313.91,434,5)
YU^2
"DATA",9002313.91,434,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,434,10,1,0)
S BPS("X")=""
"DATA",9002313.91,434,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,434,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,434,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,434,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,434,30,0)
^^1^1^3130222^
"DATA",9002313.91,434,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,1)=BPS("X")
"DATA",9002313.91,435,0)
592^^PURCHASER ID^A/N^^^^20^A/N
"DATA",9002313.91,435,1)
PURCHASER ID
"DATA",9002313.91,435,5)
YV^20
"DATA",9002313.91,435,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,435,10,1,0)
S BPS("X")=""
"DATA",9002313.91,435,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,435,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,435,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,435,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,435,30,0)
^^1^1^3130222^
"DATA",9002313.91,435,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,2)=BPS("X")
"DATA",9002313.91,436,0)
593^^PURCHASER ID STATE/PROVINCE^A/N^^^^2^A/N
"DATA",9002313.91,436,1)
PURCHASER ID ASSOCIATED STATE/PROVINCE ADDRESS
"DATA",9002313.91,436,5)
YW^2
"DATA",9002313.91,436,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,436,10,1,0)
S BPS("X")=""
"DATA",9002313.91,436,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,436,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,436,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,436,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,436,30,0)
^^1^1^3130222^
"DATA",9002313.91,436,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,3)=BPS("X")
"DATA",9002313.91,437,0)
594^^PURCHASER DATE OF BIRTH^N^^^^8^N
"DATA",9002313.91,437,1)
PURCHASER DATE OF BIRTH
"DATA",9002313.91,437,5)
YX^8
"DATA",9002313.91,437,10,0)
^9002313.9101^1^1^3130228^^^
"DATA",9002313.91,437,10,1,0)
S BPS("X")=""
"DATA",9002313.91,437,20,0)
^^1^1^3130228^
"DATA",9002313.91,437,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,437,25,0)
^9002313.9104^1^1^3130228^^^
"DATA",9002313.91,437,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,437,30,0)
^9002313.9103^1^1^3130228^^
"DATA",9002313.91,437,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,4)=BPS("X")
"DATA",9002313.91,438,0)
595^^PURCHASER GENDER CODE^N^^^^1^N
"DATA",9002313.91,438,1)
PURCHASER GENDER CODE
"DATA",9002313.91,438,5)
YY^1
"DATA",9002313.91,438,10,0)
^^1^1^3130228^
"DATA",9002313.91,438,10,1,0)
S BPS("X")=""
"DATA",9002313.91,438,20,0)
^^1^1^3130222^
"DATA",9002313.91,438,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,438,25,0)
^^1^1^3130222^
"DATA",9002313.91,438,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,438,30,0)
^^1^1^3130222^
"DATA",9002313.91,438,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,5)=BPS("X")
"DATA",9002313.91,439,0)
596^^PURCHASER FIRST NAME^A/N^^^^12^A/N
"DATA",9002313.91,439,1)
PURCHASER FIRST NAME
"DATA",9002313.91,439,5)
YZ^12
"DATA",9002313.91,439,10,0)
^^1^1^3130222^
"DATA",9002313.91,439,10,1,0)
S BPS("X")=""
"DATA",9002313.91,439,20,0)
^^1^1^3130222^
"DATA",9002313.91,439,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,439,25,0)
^^1^1^3130222^
"DATA",9002313.91,439,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,439,30,0)
^^1^1^3130222^
"DATA",9002313.91,439,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,6)=BPS("X")
"DATA",9002313.91,440,0)
597^^PURCHASER LAST NAME^A/N^^^^15^A/N
"DATA",9002313.91,440,1)
PURCHASER LAST NAME
"DATA",9002313.91,440,5)
Y0^15
"DATA",9002313.91,440,10,0)
^9002313.9101^1^1^3130403^^
"DATA",9002313.91,440,10,1,0)
S BPS("X")=""
"DATA",9002313.91,440,20,0)
^9002313.9102^1^1^3130403^^
"DATA",9002313.91,440,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,440,25,0)
^9002313.9104^1^1^3130403^^
"DATA",9002313.91,440,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,440,30,0)
^9002313.9103^1^1^3130403^^
"DATA",9002313.91,440,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,7)=BPS("X")
"DATA",9002313.91,441,0)
598^^PURCHASER STREET ADDRESS^A/N^^^^30^A/N
"DATA",9002313.91,441,1)
PURCHASER STREET ADDRESS
"DATA",9002313.91,441,5)
Y1^30
"DATA",9002313.91,441,10,0)
^^1^1^3130222^
"DATA",9002313.91,441,10,1,0)
S BPS("X")=""
"DATA",9002313.91,441,20,0)
^^1^1^3130222^
"DATA",9002313.91,441,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,441,25,0)
^^1^1^3130222^
"DATA",9002313.91,441,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),30)
"DATA",9002313.91,441,30,0)
^^1^1^3130222^
"DATA",9002313.91,441,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,8)=BPS("X")
"DATA",9002313.91,442,0)
599^^PURCHASER CITY ADDRESS^A/N^^^^20^A/N
"DATA",9002313.91,442,1)
PURCHASER CITY ADDRESS
"DATA",9002313.91,442,5)
Y2^20
"DATA",9002313.91,442,10,0)
^^1^1^3130222^
"DATA",9002313.91,442,10,1,0)
S BPS("X")=""
"DATA",9002313.91,442,20,0)
^^1^1^3130222^
"DATA",9002313.91,442,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,442,25,0)
^^1^1^3130222^
"DATA",9002313.91,442,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,442,30,0)
^^1^1^3130222^
"DATA",9002313.91,442,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),590),U,9)=BPS("X")
"DATA",9002313.91,443,0)
675^^PURCHASER STATE/PROVINCE CODE^A/N^^^^2^A/N
"DATA",9002313.91,443,1)
PURCHASER ADDRESS STATE/PROVINCE CODE
"DATA",9002313.91,443,5)
Y3^2
"DATA",9002313.91,443,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,443,10,1,0)
S BPS("X")=""
"DATA",9002313.91,443,20,0)
^^1^1^3130222^
"DATA",9002313.91,443,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,443,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,443,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,443,30,0)
^^1^1^3130222^
"DATA",9002313.91,443,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,5)=BPS("X")
"DATA",9002313.91,444,0)
676^^PURCHASER ZIP/POSTAL CODE^A/N^^^^15^A/N
"DATA",9002313.91,444,1)
PURCHASER ZIP/POSTAL CODE
"DATA",9002313.91,444,5)
Y4^15
"DATA",9002313.91,444,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,444,10,1,0)
S BPS("X")=""
"DATA",9002313.91,444,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,444,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,444,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,444,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,444,30,0)
^9002313.9103^1^1^3130222^^^
"DATA",9002313.91,444,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,6)=BPS("X")
"DATA",9002313.91,445,0)
677^^PURCHASER COUNTRY CODE^A/N^^^^2^A/N
"DATA",9002313.91,445,1)
PURCHASER COUNTRY CODE
"DATA",9002313.91,445,5)
Y5^2
"DATA",9002313.91,445,10,0)
^^1^1^3130222^
"DATA",9002313.91,445,10,1,0)
S BPS("X")=""
"DATA",9002313.91,445,20,0)
^^1^1^3130222^
"DATA",9002313.91,445,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,445,25,0)
^^1^1^3130222^
"DATA",9002313.91,445,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,445,30,0)
^^1^1^3130222^
"DATA",9002313.91,445,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,7)=BPS("X")
"DATA",9002313.91,446,0)
678^^TIME OF SERVICE^N^^^^6^N
"DATA",9002313.91,446,1)
TIME OF SERVICE
"DATA",9002313.91,446,5)
Y6^6
"DATA",9002313.91,446,10,0)
^^1^1^3130222^
"DATA",9002313.91,446,10,1,0)
S BPS("X")=BPS("Claim",MEDN,"Time of Service")
"DATA",9002313.91,446,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,446,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,446,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,446,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,446,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,446,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,8)=BPS("X")
"DATA",9002313.91,447,0)
679^^SELLER ID^A/N^^^^70^A/N
"DATA",9002313.91,447,1)
SELLER ID
"DATA",9002313.91,447,5)
Y9^70
"DATA",9002313.91,447,10,0)
^^1^1^3130222^
"DATA",9002313.91,447,10,1,0)
S BPS("X")=BPS("Provider",MEDN,"Pharmacist ID")
"DATA",9002313.91,447,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,447,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),70)
"DATA",9002313.91,447,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,447,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),70)
"DATA",9002313.91,447,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,447,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,9)=BPS("X")
"DATA",9002313.91,448,0)
680^^SELLER ID QUALIFIER^N^^^^2^N
"DATA",9002313.91,448,1)
SELLER ID QUALIFIER
"DATA",9002313.91,448,5)
ZB^2
"DATA",9002313.91,448,10,0)
^^1^1^3130226^
"DATA",9002313.91,448,10,1,0)
S BPS("X")="01"
"DATA",9002313.91,448,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,448,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,448,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,448,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,448,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,448,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),670),U,10)=BPS("X")
"DATA",9002313.91,449,0)
681^^SALES TRANSACTION ID^A/N^^^^80^A/N
"DATA",9002313.91,449,1)
SALES TRANSACTION ID
"DATA",9002313.91,449,5)
ZF^80
"DATA",9002313.91,449,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,449,10,1,0)
S BPS("X")=""
"DATA",9002313.91,449,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,449,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),80)
"DATA",9002313.91,449,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,449,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),80)
"DATA",9002313.91,449,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,449,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),680),U,1)=BPS("X")
"DATA",9002313.91,450,0)
A22^^PATIENT ID STATE/PROVINCE^A/N^^^^2^A/N
"DATA",9002313.91,450,1)
PATIENT ID ASSOCIATED STATE/PROVINCE ADDRESS
"DATA",9002313.91,450,5)
YR^2^1022
"DATA",9002313.91,450,10,0)
^^1^1^3130222^
"DATA",9002313.91,450,10,1,0)
S BPS("X")=""
"DATA",9002313.91,450,20,0)
^^1^1^3130222^
"DATA",9002313.91,450,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,450,25,0)
^^1^1^3130222^
"DATA",9002313.91,450,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,450,30,0)
^^1^1^3130227^
"DATA",9002313.91,450,30,1,0)
S $P(^BPSC(BPS(9002313.02),"A20"),U,2)=BPS("X")
"DATA",9002313.91,451,0)
A23^^PURCHASER RELATIONSHIP CODE^A/N^^^^2^A/N
"DATA",9002313.91,451,1)
PURCHASER RELATIONSHIP CODE
"DATA",9002313.91,451,5)
YS^2^1023
"DATA",9002313.91,451,10,0)
^9002313.9101^1^1^3130222^^
"DATA",9002313.91,451,10,1,0)
S BPS("X")=""
"DATA",9002313.91,451,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,451,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,451,25,0)
^^1^1^3130222^
"DATA",9002313.91,451,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,451,30,0)
^9002313.9103^1^1^3130222^^
"DATA",9002313.91,451,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,3)=BPS("X")
"DATA",9002313.91,452,0)
A24^^PRESCRIBER ID STATE/PROVINCE^A/N^^^^2^A/N
"DATA",9002313.91,452,1)
PRESCRIBER ID ASSOCIATED STATE/PROVINCE CODE
"DATA",9002313.91,452,5)
ZK^2^1024
"DATA",9002313.91,452,10,0)
^^1^1^3130222^
"DATA",9002313.91,452,10,1,0)
S BPS("X")=""
"DATA",9002313.91,452,20,0)
^^1^1^3130222^
"DATA",9002313.91,452,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,452,25,0)
^^1^1^3130222^
"DATA",9002313.91,452,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,452,30,0)
^^1^1^3130222^
"DATA",9002313.91,452,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,4)=BPS("X")
"DATA",9002313.91,453,0)
A25^^PRESCRIBER ALTERNATE ID QUAL^A/N^^^^2^A/N
"DATA",9002313.91,453,1)
PRESCRIBER ALTERNATE ID QUALIFIER
"DATA",9002313.91,453,5)
ZM^2^1025
"DATA",9002313.91,453,10,0)
^^1^1^3130227^
"DATA",9002313.91,453,10,1,0)
S BPS("X")=""
"DATA",9002313.91,453,20,0)
^^1^1^3130222^
"DATA",9002313.91,453,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,453,25,0)
^^1^1^3130222^
"DATA",9002313.91,453,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,453,30,0)
^9002313.9103^1^1^3130227^^
"DATA",9002313.91,453,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,5)=BPS("X")
"DATA",9002313.91,454,0)
A26^^PRESCRIBER ALTERNATE ID^A/N^^^^15^A/N
"DATA",9002313.91,454,1)
PRESCRIBER ALTERNATE ID
"DATA",9002313.91,454,5)
ZP^15^1026
"DATA",9002313.91,454,10,0)
^^1^1^3130222^
"DATA",9002313.91,454,10,1,0)
S BPS("X")=""
"DATA",9002313.91,454,20,0)
^^1^1^3130222^
"DATA",9002313.91,454,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,454,25,0)
^^1^1^3130222^
"DATA",9002313.91,454,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,454,30,0)
^^1^1^3130222^
"DATA",9002313.91,454,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,6)=BPS("X")
"DATA",9002313.91,455,0)
A27^^PRESCRIBER ALTERNATE STATE^A/N^^^^2^A/N
"DATA",9002313.91,455,1)
PRESCRIBER ALTERNATE ID ASSOCIATED STATE/PROVINCE ADDRESS
"DATA",9002313.91,455,5)
ZQ^2^1027
"DATA",9002313.91,455,10,0)
^^1^1^3130222^
"DATA",9002313.91,455,10,1,0)
S BPS("X")=""
"DATA",9002313.91,455,20,0)
^^1^1^3130222^
"DATA",9002313.91,455,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,455,25,0)
^^1^1^3130222^
"DATA",9002313.91,455,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,455,30,0)
^^1^1^3130222^
"DATA",9002313.91,455,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,7)=BPS("X")
"DATA",9002313.91,456,0)
A28^^ADJUDICATED PAYMENT TYPE^N^^^^2^N
"DATA",9002313.91,456,1)
ADJUDICATED PAYMENT TYPE
"DATA",9002313.91,456,5)
ZR^2^1028
"DATA",9002313.91,456,10,0)
^^1^1^3130222^
"DATA",9002313.91,456,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,457,0)
A29^^REPORTED PAYMENT TYPE^N^^^^2^N
"DATA",9002313.91,457,1)
REPORTED PAYMENT TYPE
"DATA",9002313.91,457,5)
ZS^2^1029
"DATA",9002313.91,457,10,0)
^^1^1^3130222^
"DATA",9002313.91,457,10,1,0)
S BPS("X")=""
"DATA",9002313.91,457,20,0)
^^1^1^3130222^
"DATA",9002313.91,457,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,457,25,0)
^^1^1^3130222^
"DATA",9002313.91,457,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,457,30,0)
^^1^1^3130222^
"DATA",9002313.91,457,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,9)=BPS("X")
"DATA",9002313.91,458,0)
A30^^RELEASED DATE^N^^^^8^N
"DATA",9002313.91,458,1)
RELEASED DATE
"DATA",9002313.91,458,5)
ZT^8^1030
"DATA",9002313.91,458,10,0)
^^1^1^3130222^
"DATA",9002313.91,458,10,1,0)
S BPS("X")=""
"DATA",9002313.91,458,20,0)
^^1^1^3130222^
"DATA",9002313.91,458,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,458,25,0)
^^1^1^3130222^
"DATA",9002313.91,458,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,458,30,0)
^^1^1^3130222^
"DATA",9002313.91,458,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A20"),U,10)=BPS("X")
"DATA",9002313.91,459,0)
A31^^RELEASED TIME^N^^^^6^N
"DATA",9002313.91,459,1)
RELEASED TIME
"DATA",9002313.91,459,5)
ZU^6^1031
"DATA",9002313.91,459,10,0)
^^1^1^3130228^
"DATA",9002313.91,459,10,1,0)
S BPS("X")=""
"DATA",9002313.91,459,20,0)
^^1^1^3130222^
"DATA",9002313.91,459,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,459,25,0)
^^1^1^3130222^
"DATA",9002313.91,459,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),6)
"DATA",9002313.91,459,30,0)
^^1^1^3130222^
"DATA",9002313.91,459,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A30"),U,1)=BPS("X")
"DATA",9002313.91,460,0)
A32^^COMPOUND PREPARATION TIME^N^^^^4^N
"DATA",9002313.91,460,1)
COMPOUND PREPARATION TIME
"DATA",9002313.91,460,5)
ZW^4^1032
"DATA",9002313.91,460,10,0)
^^1^1^3130222^
"DATA",9002313.91,460,10,1,0)
S BPS("X")=""
"DATA",9002313.91,460,20,0)
^^1^1^3130222^
"DATA",9002313.91,460,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,460,25,0)
^^1^1^3130222^
"DATA",9002313.91,460,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,460,30,0)
^^1^1^3130222^
"DATA",9002313.91,460,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A30"),U,2)=BPS("X")
"DATA",9002313.91,461,0)
A43^^PATIENT COUNTRY CODE^A/N^^^^2^A/N
"DATA",9002313.91,461,1)
PATIENT COUNTRY CODE
"DATA",9002313.91,461,5)
1K^2^1043
"DATA",9002313.91,461,10,0)
^^1^1^3130222^
"DATA",9002313.91,461,10,1,0)
S BPS("X")=""
"DATA",9002313.91,461,20,0)
^9002313.9102^1^1^3130222^^
"DATA",9002313.91,461,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,461,25,0)
^9002313.9104^1^1^3130222^^
"DATA",9002313.91,461,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,461,30,0)
^^1^1^3130227^
"DATA",9002313.91,461,30,1,0)
S $P(^BPSC(BPS(9002313.02),"A40"),U,3)=BPS("X")
"DATA",9002313.91,462,0)
A45^^VETERINARY USE INDICATOR^A/N^^^^1^A/N
"DATA",9002313.91,462,1)
VETERINARY USE INDICATOR
"DATA",9002313.91,462,5)
1R^1^1045
"DATA",9002313.91,462,10,0)
^^1^1^3130222^
"DATA",9002313.91,462,10,1,0)
S BPS("X")=""
"DATA",9002313.91,462,20,0)
^^1^1^3130222^
"DATA",9002313.91,462,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,462,25,0)
^^1^1^3130222^
"DATA",9002313.91,462,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,462,30,0)
^^1^1^3130227^
"DATA",9002313.91,462,30,1,0)
S $P(^BPSC(BPS(9002313.02),"A40"),U,5)=BPS("X")
"DATA",9002313.91,463,0)
B04^^NEXT AVAILABLE FILL DATE^N^^^^8^N
"DATA",9002313.91,463,1)
NEXT AVAILABLE FILL DATE
"DATA",9002313.91,463,5)
BT^8^2004
"DATA",9002313.91,463,10,0)
^^1^1^3130222^
"DATA",9002313.91,463,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,464,0)
B87^^QUAN LIMIT PER SPC TM PD COUNT^^^^^1^N
"DATA",9002313.91,464,1)
QUANTITY LIMIT PER SPECIFIC TIME PERIOD COUNT
"DATA",9002313.91,464,5)
3P^^2087
"DATA",9002313.91,464,10,0)
^9002313.9101^1^1^3150915^^
"DATA",9002313.91,464,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,465,0)
B88^^QUAN LIMIT PER SPC TIME PERIOD^^^^^10^N
"DATA",9002313.91,465,1)
QUANTITY LIMIT PER SPECIFIC TIME PERIOD
"DATA",9002313.91,465,5)
3R^^2088
"DATA",9002313.91,465,10,0)
^^1^1^3150915^
"DATA",9002313.91,465,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,466,0)
B89^^QUANTITY LIMIT TIME PERIOD^^^^^5^N
"DATA",9002313.91,466,1)
QUANTITY LIMIT TIME PERIOD
"DATA",9002313.91,466,5)
3S^^2089
"DATA",9002313.91,466,10,0)
^^1^1^3150915^
"DATA",9002313.91,466,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,467,0)
B90^^DAYS SUP LIM PER SPC TM PD CNT^^^^^1^N
"DATA",9002313.91,467,1)
DAYS SUPPLY LIMIT PER SPECIFIC TIME PERIOD COUNT
"DATA",9002313.91,467,5)
3T^^2090
"DATA",9002313.91,467,10,0)
^^1^1^3150915^
"DATA",9002313.91,467,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,468,0)
B91^^DAYS SUP LIM PER SPC TM PERIOD^^^^^3^N
"DATA",9002313.91,468,1)
DAYS SUPPLY LIMIT PER SPECIFIC TIME PERIOD
"DATA",9002313.91,468,5)
3W^^2091
"DATA",9002313.91,468,10,0)
^^1^1^3150915^
"DATA",9002313.91,468,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,469,0)
B92^^DAYS SUPPLY LIMIT TIME PERIOD^^^^^5^N
"DATA",9002313.91,469,1)
DAYS SUPPLY LIMIT TIME PERIOD
"DATA",9002313.91,469,5)
3X^^2092
"DATA",9002313.91,469,10,0)
^^1^1^3150915^
"DATA",9002313.91,469,10,1,0)
; This is a response-only field which does not use the GET, FORMAT, or SET code
"DATA",9002313.91,470,0)
B40^^PRES ALT ID ASSOC COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,470,1)
PRESCRIBER ALTERNATE ID ASSOCIATED COUNTRY CODE
"DATA",9002313.91,470,5)
3A^^2040
"DATA",9002313.91,470,10,0)
^^1^1^3141223
"DATA",9002313.91,470,10,1,0)
S BPS("X")=""
"DATA",9002313.91,470,20,0)
^^1^1^3141223
"DATA",9002313.91,470,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,470,30,0)
^^1^1^3141223
"DATA",9002313.91,470,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,10)=BPS("X")
"DATA",9002313.91,471,0)
B41^^PRES ID ASSOC COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,471,1)
PRESCRIBER ID ASSOCIATED COUNTRY CODE
"DATA",9002313.91,471,5)
3B^^2041
"DATA",9002313.91,471,10,0)
^9002313.9101^1^1^3150112^
"DATA",9002313.91,471,10,1,0)
S BPS("X")="US"
"DATA",9002313.91,471,20,0)
^^1^1^3141223
"DATA",9002313.91,471,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,471,30,0)
^^1^1^3141223
"DATA",9002313.91,471,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B40"),U,1)=BPS("X")
"DATA",9002313.91,472,0)
B42^^PRESCRIBER COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,472,5)
3C^^2042
"DATA",9002313.91,472,10,0)
^^1^1^3150112^
"DATA",9002313.91,472,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber Country"))
"DATA",9002313.91,472,20,0)
^^1^1^3141223
"DATA",9002313.91,472,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,472,30,0)
^^1^1^3141223
"DATA",9002313.91,472,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B40"),U,2)=BPS("X")
"DATA",9002313.91,473,0)
B15^^EMPLOYER STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,473,5)
8D^^2015
"DATA",9002313.91,473,10,0)
^^1^1^3141223
"DATA",9002313.91,473,10,1,0)
S BPS("X")=""
"DATA",9002313.91,473,20,0)
^^1^1^3141223
"DATA",9002313.91,473,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,473,30,0)
^^1^1^3141223
"DATA",9002313.91,473,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,5)=BPS("X")
"DATA",9002313.91,474,0)
B16^^EMPLOYER STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,474,5)
7G^^2016
"DATA",9002313.91,474,10,0)
^^1^1^3141223
"DATA",9002313.91,474,10,1,0)
S BPS("X")=""
"DATA",9002313.91,474,20,0)
^^1^1^3141223
"DATA",9002313.91,474,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,474,30,0)
^^1^1^3141223
"DATA",9002313.91,474,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,6)=BPS("X")
"DATA",9002313.91,475,0)
B17^^EMPLOYER CONTACT FIRST NAME^^^^^35^A/N
"DATA",9002313.91,475,5)
7H^^2017
"DATA",9002313.91,475,10,0)
^^1^1^3141223
"DATA",9002313.91,475,10,1,0)
S BPS("X")=""
"DATA",9002313.91,475,20,0)
^^1^1^3141223
"DATA",9002313.91,475,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),35)
"DATA",9002313.91,475,30,0)
^^1^1^3141223
"DATA",9002313.91,475,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,7)=BPS("X")
"DATA",9002313.91,476,0)
B18^^EMPLOYER CONTACT LAST NAME^^^^^35^A/N
"DATA",9002313.91,476,5)
7J^^2018
"DATA",9002313.91,476,10,0)
^^1^1^3141223
"DATA",9002313.91,476,10,1,0)
S BPS("X")=""
"DATA",9002313.91,476,20,0)
^^1^1^3141223
"DATA",9002313.91,476,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),35)
"DATA",9002313.91,476,30,0)
^^1^1^3141223
"DATA",9002313.91,476,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,8)=BPS("X")
"DATA",9002313.91,477,0)
B19^^EMPLOYER PHONE NUMBER EXT^^^^^8^N
"DATA",9002313.91,477,1)
EMPLOYER TELEPHONE NUMBER EXTENSION
"DATA",9002313.91,477,5)
7K^^2019
"DATA",9002313.91,477,10,0)
^^1^1^3141223
"DATA",9002313.91,477,10,1,0)
S BPS("X")=""
"DATA",9002313.91,477,20,0)
^^1^1^3141223
"DATA",9002313.91,477,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),8)
"DATA",9002313.91,477,30,0)
^^1^1^3141223
"DATA",9002313.91,477,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,9)=BPS("X")
"DATA",9002313.91,478,0)
B24^^PAY TO STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,478,5)
7R^^2024
"DATA",9002313.91,478,10,0)
^^1^1^3141223
"DATA",9002313.91,478,10,1,0)
S BPS("X")=""
"DATA",9002313.91,478,20,0)
^^1^1^3141223
"DATA",9002313.91,478,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,478,30,0)
^^1^1^3141223
"DATA",9002313.91,478,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,4)=BPS("X")
"DATA",9002313.91,479,0)
B25^^PAY TO STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,479,5)
7S^^2025
"DATA",9002313.91,479,10,0)
^^1^1^3141223
"DATA",9002313.91,479,10,1,0)
S BPS("X")=""
"DATA",9002313.91,479,20,0)
^^1^1^3141223
"DATA",9002313.91,479,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,479,30,0)
^^1^1^3141223
"DATA",9002313.91,479,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,5)=BPS("X")
"DATA",9002313.91,480,0)
B35^^EMPLOYER COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,480,5)
1V^^2035
"DATA",9002313.91,480,10,0)
^^1^1^3141223
"DATA",9002313.91,480,10,1,0)
S BPS("X")=""
"DATA",9002313.91,480,20,0)
^^1^1^3141223
"DATA",9002313.91,480,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,480,30,0)
^^1^1^3141223
"DATA",9002313.91,480,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,5)=BPS("X")
"DATA",9002313.91,481,0)
B39^^PAY TO COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,481,5)
1Z^^2039
"DATA",9002313.91,481,10,0)
^^1^1^3141223
"DATA",9002313.91,481,10,1,0)
S BPS("X")=""
"DATA",9002313.91,481,20,0)
^^1^1^3141223
"DATA",9002313.91,481,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,481,30,0)
^^1^1^3141223
"DATA",9002313.91,481,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,9)=BPS("X")
"DATA",9002313.91,482,0)
B13^^AUTH REP STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,482,1)
AUTHORIZED REPRESENTATIVE STREET ADDRESS LINE 1
"DATA",9002313.91,482,5)
7D^^2013
"DATA",9002313.91,482,10,0)
^9002313.9101^1^1^3150112^
"DATA",9002313.91,482,10,1,0)
S BPS("X")=""
"DATA",9002313.91,482,20,0)
^9002313.9102^1^1^3150112^
"DATA",9002313.91,482,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,482,30,0)
^9002313.9103^1^1^3150112^
"DATA",9002313.91,482,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,3)=BPS("X")
"DATA",9002313.91,483,0)
B14^^AUTH REP STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,483,1)
AUTHORIZED REPRESENTATIVE STREET ADDRESS LINE 2
"DATA",9002313.91,483,5)
8B^^2014
"DATA",9002313.91,483,10,0)
^^1^1^3141223
"DATA",9002313.91,483,10,1,0)
S BPS("X")=""
"DATA",9002313.91,483,20,0)
^^1^1^3141223
"DATA",9002313.91,483,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,483,30,0)
^^1^1^3141223
"DATA",9002313.91,483,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,4)=BPS("X")
"DATA",9002313.91,484,0)
B34^^AUTH REP COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,484,1)
AUTHORIZED REPRESENTATIVE COUNTRY CODE
"DATA",9002313.91,484,5)
1U^^2034
"DATA",9002313.91,484,10,0)
^^1^1^3141223
"DATA",9002313.91,484,10,1,0)
S BPS("X")=""
"DATA",9002313.91,484,20,0)
^^1^1^3141223
"DATA",9002313.91,484,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,484,30,0)
^^1^1^3141223
"DATA",9002313.91,484,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,4)=BPS("X")
"DATA",9002313.91,485,0)
B20^^FACILITY STREET ADDRESS LINE 1^^^^^40^A/N
"DATA",9002313.91,485,5)
7M^^2020
"DATA",9002313.91,485,10,0)
^^1^1^3141223
"DATA",9002313.91,485,10,1,0)
S BPS("X")=""
"DATA",9002313.91,485,20,0)
^^1^1^3141223
"DATA",9002313.91,485,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,485,30,0)
^^1^1^3141223
"DATA",9002313.91,485,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B10"),U,10)=BPS("X")
"DATA",9002313.91,486,0)
B21^^FACILITY STREET ADDRESS LINE 2^^^^^40^A/N
"DATA",9002313.91,486,5)
7N^^2021
"DATA",9002313.91,486,10,0)
^^1^1^3141223
"DATA",9002313.91,486,10,1,0)
S BPS("X")=""
"DATA",9002313.91,486,20,0)
^^1^1^3141223
"DATA",9002313.91,486,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,486,30,0)
^^1^1^3141223
"DATA",9002313.91,486,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,1)=BPS("X")
"DATA",9002313.91,487,0)
B37^^FACILITY COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,487,5)
1X^^2037
"DATA",9002313.91,487,10,0)
^^1^1^3141223
"DATA",9002313.91,487,10,1,0)
S BPS("X")=""
"DATA",9002313.91,487,20,0)
^^1^1^3141223
"DATA",9002313.91,487,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,487,30,0)
^^1^1^3141223
"DATA",9002313.91,487,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,7)=BPS("X")
"DATA",9002313.91,488,0)
B29^^PURCHASER STREET ADDRESS LINE1^^^^^40^A/N
"DATA",9002313.91,488,1)
PURCHASER STREET ADDRESS LINE 1
"DATA",9002313.91,488,5)
7W^^2029
"DATA",9002313.91,488,10,0)
^^1^1^3141223
"DATA",9002313.91,488,10,1,0)
S BPS("X")=""
"DATA",9002313.91,488,20,0)
^^1^1^3141223
"DATA",9002313.91,488,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,488,30,0)
^^1^1^3141223
"DATA",9002313.91,488,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,9)=BPS("X")
"DATA",9002313.91,489,0)
B30^^PURCHASER STREET ADDRESS LINE2^^^^^40^A/N
"DATA",9002313.91,489,1)
PURCHASER STREET ADDRESS LINE 2
"DATA",9002313.91,489,5)
7X^^2030
"DATA",9002313.91,489,10,0)
^^1^1^3141223
"DATA",9002313.91,489,10,1,0)
S BPS("X")=""
"DATA",9002313.91,489,20,0)
^^1^1^3141223
"DATA",9002313.91,489,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,489,30,0)
^^1^1^3141223
"DATA",9002313.91,489,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B20"),U,10)=BPS("X")
"DATA",9002313.91,490,0)
B43^^PURCHASER ID ASSOC COUNTRY CD^^^^^2^A/N
"DATA",9002313.91,490,1)
PURCHASER ID ASSOCIATED COUNTRY CODE
"DATA",9002313.91,490,5)
3D^^2043
"DATA",9002313.91,490,10,0)
^^1^1^3141223
"DATA",9002313.91,490,10,1,0)
S BPS("X")=""
"DATA",9002313.91,490,20,0)
^^1^1^3141223
"DATA",9002313.91,490,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,490,30,0)
^^1^1^3141223
"DATA",9002313.91,490,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B40"),U,3)=BPS("X")
"DATA",9002313.91,491,0)
B31^^SERVICE PROV STREET ADD LINE 1^^^^^40^A/N
"DATA",9002313.91,491,1)
SERVICE PROVIDER STREET ADDRESS LINE 1
"DATA",9002313.91,491,5)
7Y^^2031
"DATA",9002313.91,491,10,0)
^^1^1^3141223
"DATA",9002313.91,491,10,1,0)
S BPS("X")=""
"DATA",9002313.91,491,20,0)
^^1^1^3141223
"DATA",9002313.91,491,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,491,30,0)
^^1^1^3141223
"DATA",9002313.91,491,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,1)=BPS("X")
"DATA",9002313.91,492,0)
B32^^SERVICE PROV STREET ADD LINE 2^^^^^40^A/N
"DATA",9002313.91,492,1)
SERVICE PROVIDER STREET ADDRESS LINE 2
"DATA",9002313.91,492,5)
7Z^^2032
"DATA",9002313.91,492,10,0)
^^1^1^3141223
"DATA",9002313.91,492,10,1,0)
S BPS("X")=""
"DATA",9002313.91,492,20,0)
^^1^1^3141223
"DATA",9002313.91,492,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),40)
"DATA",9002313.91,492,30,0)
^^1^1^3141223
"DATA",9002313.91,492,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B30"),U,2)=BPS("X")
"DATA",9002313.91,493,0)
A93^^SERVICE PROVIDER COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,493,5)
1T^^1093
"DATA",9002313.91,493,10,0)
^^1^1^3141223
"DATA",9002313.91,493,10,1,0)
S BPS("X")=""
"DATA",9002313.91,493,20,0)
^^1^1^3141223
"DATA",9002313.91,493,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,493,30,0)
^^1^1^3141223
"DATA",9002313.91,493,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"A90"),U,3)=BPS("X")
"DATA",9002313.91,494,0)
B44^^INTERMEDIARY ID COUNT^^^^^1^N
"DATA",9002313.91,494,5)
8G^^2044
"DATA",9002313.91,494,10,0)
^^1^1^3141223
"DATA",9002313.91,494,10,1,0)
S BPS("X")=""
"DATA",9002313.91,494,20,0)
^^1^1^3141223
"DATA",9002313.91,494,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,494,30,0)
^^1^1^3141223
"DATA",9002313.91,494,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B40"),U,4)=BPS("X")
"DATA",9002313.91,495,0)
B45^^INTERMEDIARY ID TYPE CODE^^^^^2^A/N
"DATA",9002313.91,495,5)
8H^^2045
"DATA",9002313.91,495,10,0)
^^1^1^3141223
"DATA",9002313.91,495,10,1,0)
S BPS("X")=""
"DATA",9002313.91,495,20,0)
^^1^1^3141223
"DATA",9002313.91,495,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,496,0)
B46^^INTERMEDIARY ID TYPE ENTITY^^^^^2^A/N
"DATA",9002313.91,496,5)
8J^^2046
"DATA",9002313.91,496,10,0)
^^1^1^3141223
"DATA",9002313.91,496,10,1,0)
S BPS("X")=""
"DATA",9002313.91,496,20,0)
^^1^1^3141223
"DATA",9002313.91,496,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,497,0)
B47^^INTERMEDIARY ID QUALIFIER^^^^^2^A/N
"DATA",9002313.91,497,5)
8K^^2047
"DATA",9002313.91,497,10,0)
^^1^1^3141223
"DATA",9002313.91,497,10,1,0)
S BPS("X")=""
"DATA",9002313.91,497,20,0)
^^1^1^3141223
"DATA",9002313.91,497,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,498,0)
B48^^INTERMEDIARY ID^^^^^20^A/N
"DATA",9002313.91,498,5)
8M^^2048
"DATA",9002313.91,498,10,0)
^^1^1^3141223
"DATA",9002313.91,498,10,1,0)
S BPS("X")=""
"DATA",9002313.91,498,20,0)
^^1^1^3141223
"DATA",9002313.91,498,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,499,0)
B49^^INTERMEDIARY ID STATE/PROV ADD^^^^^2^A/N
"DATA",9002313.91,499,1)
INTERMEDIARY ID STATE/PROVINCE ADDRESS
"DATA",9002313.91,499,5)
8N^^2049
"DATA",9002313.91,499,10,0)
^9002313.9101^1^1^3141231^
"DATA",9002313.91,499,10,1,0)
S BPS("X")=""
"DATA",9002313.91,499,20,0)
^9002313.9102^1^1^3141231^
"DATA",9002313.91,499,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,500,0)
B55^^INTERMEDIARY ID COUNTRY CODE^^^^^2^A/N
"DATA",9002313.91,500,5)
8U^^2055
"DATA",9002313.91,500,10,0)
^^1^1^3141223
"DATA",9002313.91,500,10,1,0)
S BPS("X")=""
"DATA",9002313.91,500,20,0)
^^1^1^3141223
"DATA",9002313.91,500,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,501,0)
B50^^INTERMEDIARY ID RELATION CODE^^^^^1^N
"DATA",9002313.91,501,1)
INTERMEDIARY ID RELATIONSHIP CODE
"DATA",9002313.91,501,5)
8P^^2050
"DATA",9002313.91,501,10,0)
^^1^1^3141223
"DATA",9002313.91,501,10,1,0)
S BPS("X")=""
"DATA",9002313.91,501,20,0)
^^1^1^3141223
"DATA",9002313.91,501,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,502,0)
B56^^LAST KNOWN BIN NUMBER^^^^^6^N
"DATA",9002313.91,502,5)
3E^^2056
"DATA",9002313.91,502,10,0)
^^1^1^3141223
"DATA",9002313.91,502,10,1,0)
S BPS("X")=""
"DATA",9002313.91,502,20,0)
^^1^1^3141223
"DATA",9002313.91,502,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,502,30,0)
^^1^1^3141223
"DATA",9002313.91,502,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,6)=BPS("X")
"DATA",9002313.91,503,0)
B57^^LAST KNOWN PROCESSOR CNTRL NUM^^^^^10^A/N
"DATA",9002313.91,503,1)
LAST KNOWN PROCESSOR CONTROL NUMBER
"DATA",9002313.91,503,5)
3F^^2057
"DATA",9002313.91,503,10,0)
^^1^1^3141223
"DATA",9002313.91,503,10,1,0)
S BPS("X")=""
"DATA",9002313.91,503,20,0)
^^1^1^3141223
"DATA",9002313.91,503,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,503,30,0)
^^1^1^3141223
"DATA",9002313.91,503,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,7)=BPS("X")
"DATA",9002313.91,504,0)
B58^^LAST KNOWN GROUP ID^^^^^15^A/N
"DATA",9002313.91,504,5)
3G^^2058
"DATA",9002313.91,504,10,0)
^^1^1^3141223
"DATA",9002313.91,504,10,1,0)
S BPS("X")=""
"DATA",9002313.91,504,20,0)
^^1^1^3141223
"DATA",9002313.91,504,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,504,30,0)
^^1^1^3141223
"DATA",9002313.91,504,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,8)=BPS("X")
"DATA",9002313.91,505,0)
B59^^LAST KNOWN CARDHOLDER ID^^^^^20^A/N
"DATA",9002313.91,505,5)
3H^^2059
"DATA",9002313.91,505,10,0)
^^1^1^3141223
"DATA",9002313.91,505,10,1,0)
S BPS("X")=""
"DATA",9002313.91,505,20,0)
^^1^1^3141223
"DATA",9002313.91,505,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),20)
"DATA",9002313.91,505,30,0)
^^1^1^3141223
"DATA",9002313.91,505,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,9)=BPS("X")
"DATA",9002313.91,506,0)
B60^^YEAR OF LAST PAID CLAIM^^^^^4^N
"DATA",9002313.91,506,5)
3J^^2060
"DATA",9002313.91,506,10,0)
^9002313.9101^1^1^3150112^
"DATA",9002313.91,506,10,1,0)
S BPS("X")=""
"DATA",9002313.91,506,20,0)
^^1^1^3150112^
"DATA",9002313.91,506,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),4)
"DATA",9002313.91,506,30,0)
^9002313.9103^1^1^3150112^
"DATA",9002313.91,506,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B50"),U,10)=BPS("X")
"DATA",9002313.91,507,0)
B61^^MONTH OF LAST PAID CLAIM^^^^^2^N
"DATA",9002313.91,507,5)
3K^^2061
"DATA",9002313.91,507,10,0)
^^1^1^3141223
"DATA",9002313.91,507,10,1,0)
S BPS("X")=""
"DATA",9002313.91,507,20,0)
^^1^1^3141223
"DATA",9002313.91,507,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,507,30,0)
^^1^1^3141223
"DATA",9002313.91,507,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),"B60"),U,1)=BPS("X")
"DATA",9002313.91,508,0)
B22^^HELP DESK TELEPHONE NUMBER EXT^^^^^8^N
"DATA",9002313.91,508,1)
HELP DESK TELEPHONE NUMBER EXTENSION
"DATA",9002313.91,508,5)
7P^^2022
"DATA",9002313.91,508,10,0)
^^1^1^3141223
"DATA",9002313.91,508,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,509,0)
B33^^PRO SERVICE FEE CONT/REIM AMT^^^^^6.2^D
"DATA",9002313.91,509,1)
PROFESSIONAL SERVICE FEE CONTRACTED/REIMBURSEMENT AMOUNT
"DATA",9002313.91,509,5)
6G^^2033
"DATA",9002313.91,509,10,0)
^^1^1^3141223
"DATA",9002313.91,509,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,510,0)
B23^^OTHER PAYER HELPDESK PHONE EXT^^^^^8^N
"DATA",9002313.91,510,1)
OTHER PAYER HELP DESK TELEPHONE NUMBER EXTENSION
"DATA",9002313.91,510,5)
7Q^^2023
"DATA",9002313.91,510,10,0)
^^1^1^3141223
"DATA",9002313.91,510,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,511,0)
B52^^RESPONSE INTERMEDIARY AUTH CNT^^^^^1^N
"DATA",9002313.91,511,1)
RESPONSE INTERMEDIARY AUTHORIZATION COUNT
"DATA",9002313.91,511,5)
8R^^2052
"DATA",9002313.91,511,10,0)
^^1^1^3141223
"DATA",9002313.91,511,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,512,0)
B53^^RESPONSE INTERMED AUTH TYPE ID^^^^^2^N
"DATA",9002313.91,512,1)
RESPONSE INTERMEDIARY AUTHORIZATION TYPE ID
"DATA",9002313.91,512,5)
8S^^2053
"DATA",9002313.91,512,10,0)
^^1^1^3141223
"DATA",9002313.91,512,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,513,0)
B54^^RESPONSE INTERMEDIARY AUTH ID^^^^^20^A/N
"DATA",9002313.91,513,1)
RESPONSE INTERMEDIARY AUTHORIZATION ID
"DATA",9002313.91,513,5)
8T^^2054
"DATA",9002313.91,513,10,0)
^^1^1^3141223
"DATA",9002313.91,513,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.91,514,0)
B51^^INTERMEDIARY MESSAGE^^^^^200^A/N
"DATA",9002313.91,514,5)
8Q^^2051
"DATA",9002313.91,514,10,0)
^^1^1^3141223
"DATA",9002313.91,514,10,1,0)
; THIS IS A RESPONSE-ONLY FIELD WHICH DOES NOT USE THE GET, FORMAT, OR SET CODE
"DATA",9002313.93,1,0)
01^M/I Bin Number
"DATA",9002313.93,2,0)
02^M/I Version/Release Number
"DATA",9002313.93,3,0)
03^M/I Transaction Code
"DATA",9002313.93,4,0)
04^M/I Processor Control Number
"DATA",9002313.93,5,0)
05^M/I Service Provider Number
"DATA",9002313.93,6,0)
06^M/I Group ID
"DATA",9002313.93,7,0)
07^M/I Cardholder ID
"DATA",9002313.93,8,0)
08^M/I Person Code
"DATA",9002313.93,9,0)
09^M/I Date Of Birth
"DATA",9002313.93,10,0)
10^M/I Patient Gender Code
"DATA",9002313.93,11,0)
11^M/I Patient Relationship Code
"DATA",9002313.93,12,0)
12^M/I Place of Service
"DATA",9002313.93,13,0)
13^M/I Other Coverage Code
"DATA",9002313.93,14,0)
14^M/I Eligibility Clarification Code
"DATA",9002313.93,15,0)
15^M/I Date of Service
"DATA",9002313.93,16,0)
16^M/I Prescription/Service Reference Number
"DATA",9002313.93,17,0)
17^M/I Fill Number
"DATA",9002313.93,18,0)
18^M/I Metric Quantity
"DATA",9002313.93,19,0)
19^M/I Days Supply
"DATA",9002313.93,20,0)
20^M/I Compound Code
"DATA",9002313.93,21,0)
21^M/I Product/Service ID
"DATA",9002313.93,22,0)
22^M/I Dispense As Written (DAW)/Product Selection Code
"DATA",9002313.93,23,0)
23^M/I Ingredient Cost Submitted
"DATA",9002313.93,24,0)
24^M/I SALES TAX
"DATA",9002313.93,25,0)
25^M/I Prescriber ID
"DATA",9002313.93,26,0)
26^M/I Unit Of Measure
"DATA",9002313.93,27,0)
27^Product Identifier not FDA/NSDE Listed
"DATA",9002313.93,28,0)
28^M/I Date Prescription Written
"DATA",9002313.93,29,0)
29^M/I Number Of Refills Authorized
"DATA",9002313.93,30,0)
30^Reversal request outside processor reversal window
"DATA",9002313.93,31,0)
31^No matching paid claim found for reversal request
"DATA",9002313.93,32,0)
32^M/I Level Of Service
"DATA",9002313.93,33,0)
33^M/I Prescription Origin Code
"DATA",9002313.93,34,0)
34^M/I Submission Clarification Code
"DATA",9002313.93,35,0)
35^M/I Primary Care Provider ID
"DATA",9002313.93,36,0)
36^M/I Clinic ID
"DATA",9002313.93,37,0)
37^(FUTURE USE)
"DATA",9002313.93,38,0)
38^M/I Basis Of Cost Determination
"DATA",9002313.93,39,0)
39^M/I Diagnosis Code
"DATA",9002313.93,40,0)
40^Pharmacy Not Contracted With Plan On Date Of Service
"DATA",9002313.93,41,0)
41^Submit Bill To Other Processor Or Primary Payer
"DATA",9002313.93,42,0)
42^Plan's Prescriber database indicates Prescriber ID is inactive/expired
"DATA",9002313.93,43,0)
43^Plan DB indicates the assoc DEA to submitted Prescriber ID is inactive
"DATA",9002313.93,44,0)
44^Plan's Prescriber database indicates DEA to Prescriber ID not found
"DATA",9002313.93,45,0)
45^(FUTURE USE)
"DATA",9002313.93,46,0)
46^Assoc DEA to submitted Prescriber ID doesn't allow drug DEA Schedule
"DATA",9002313.93,47,0)
47^(FUTURE USE)
"DATA",9002313.93,48,0)
48^(FUTURE USE)
"DATA",9002313.93,49,0)
49^(FUTURE USE)
"DATA",9002313.93,50,0)
50^Non-Matched Pharmacy Number
"DATA",9002313.93,51,0)
51^Non-Matched Group ID
"DATA",9002313.93,52,0)
52^Non-Matched Cardholder ID
"DATA",9002313.93,53,0)
53^Non-Matched Person Code
"DATA",9002313.93,54,0)
54^Non-Matched Product/Service ID Number
"DATA",9002313.93,55,0)
55^Non-Matched Product Package Size
"DATA",9002313.93,56,0)
56^Non-Matched Prescriber ID
"DATA",9002313.93,57,0)
57^Non-Matched PA/MC Number
"DATA",9002313.93,58,0)
58^Non-Matched Primary Prescriber
"DATA",9002313.93,59,0)
59^Non-Matched Clinic ID
"DATA",9002313.93,60,0)
60^Product/Service Not Covered For Patient Age
"DATA",9002313.93,61,0)
61^Product/Service Not Covered For Patient Gender
"DATA",9002313.93,62,0)
62^Patient/Card Holder ID Name Mismatch
"DATA",9002313.93,63,0)
63^Product/Service ID Not Covered For Institutionalized Patient
"DATA",9002313.93,64,0)
64^Claim Submitted Does Not Match Prior Authorization
"DATA",9002313.93,65,0)
65^Patient Is Not Covered
"DATA",9002313.93,66,0)
66^Patient Age Exceeds Maximum Age
"DATA",9002313.93,67,0)
67^Filled Before Coverage Effective
"DATA",9002313.93,68,0)
68^Filled After Coverage Expired
"DATA",9002313.93,69,0)
69^Filled After Coverage Terminated
"DATA",9002313.93,70,0)
70^Product/Service Not Covered - Plan/Benefit Exclusion
"DATA",9002313.93,71,0)
71^Prescriber ID Is Not Covered
"DATA",9002313.93,72,0)
72^Primary Prescriber Is Not Covered
"DATA",9002313.93,73,0)
73^Refills Are Not Covered
"DATA",9002313.93,74,0)
74^Other Carrier Payment Meets Or Exceeds Payable
"DATA",9002313.93,75,0)
75^Prior Authorization Required
"DATA",9002313.93,76,0)
76^Plan Limitations Exceeded
"DATA",9002313.93,77,0)
77^Discontinued Product/Service ID Number
"DATA",9002313.93,78,0)
78^Cost Exceeds Maximum
"DATA",9002313.93,79,0)
79^Refill Too Soon
"DATA",9002313.93,80,0)
80^Drug-Diagnosis Mismatch
"DATA",9002313.93,81,0)
81^Claim Too Old
"DATA",9002313.93,82,0)
82^Claim Is Post-Dated
"DATA",9002313.93,83,0)
83^Duplicate Paid/Captured Claim
"DATA",9002313.93,84,0)
84^Claim Has Not Been Paid/Captured
"DATA",9002313.93,85,0)
85^Claim Not Processed
"DATA",9002313.93,86,0)
86^Submit Manual Reversal
"DATA",9002313.93,87,0)
87^Reversal Not Processed
"DATA",9002313.93,88,0)
88^DUR Reject Error
"DATA",9002313.93,89,0)
89^Rejected Claim Fees Paid
"DATA",9002313.93,90,0)
90^Host Hung Up
"DATA",9002313.93,91,0)
91^Host Response Error
"DATA",9002313.93,92,0)
92^System Unavailable/Host Unavailable
"DATA",9002313.93,93,0)
93^Planned Unavailable
"DATA",9002313.93,94,0)
94^Invalid Message
"DATA",9002313.93,95,0)
95^Time Out
"DATA",9002313.93,96,0)
96^Scheduled Downtime
"DATA",9002313.93,97,0)
97^Payer Unavailable
"DATA",9002313.93,98,0)
98^Connection To Payer Is Down
"DATA",9002313.93,99,0)
99^Host Processing Error
"DATA",9002313.93,100,0)
CA^M/I Patient First Name
"DATA",9002313.93,101,0)
CB^M/I Patient Last Name
"DATA",9002313.93,102,0)
CC^M/I Cardholder First Name
"DATA",9002313.93,103,0)
CD^M/I Cardholder Last Name
"DATA",9002313.93,104,0)
CE^M/I Home Plan
"DATA",9002313.93,105,0)
CF^M/I Employer Name
"DATA",9002313.93,106,0)
CG^M/I Employer Street Address
"DATA",9002313.93,107,0)
CH^M/I Employer City Address
"DATA",9002313.93,108,0)
CI^M/I Employer State/Province Address
"DATA",9002313.93,109,0)
CJ^M/I Employer Zip Postal Zone
"DATA",9002313.93,110,0)
CK^M/I Employer Phone Number
"DATA",9002313.93,111,0)
CL^M/I Employer Contact Name
"DATA",9002313.93,112,0)
CM^M/I Patient Street Address
"DATA",9002313.93,113,0)
CN^M/I Patient City Address
"DATA",9002313.93,114,0)
CO^M/I Patient State/Province Address
"DATA",9002313.93,115,0)
CP^M/I Patient Zip/Postal Zone
"DATA",9002313.93,116,0)
CQ^M/I Patient Phone Number
"DATA",9002313.93,117,0)
CR^M/I Carrier ID
"DATA",9002313.93,118,0)
CT^Patient Social Security Number
"DATA",9002313.93,119,0)
DP^M/I DRUG TYPE OVERRIDE
"DATA",9002313.93,120,0)
DR^M/I Prescriber Last Name
"DATA",9002313.93,121,0)
DQ^M/I Usual And Customary Charge
"DATA",9002313.93,122,0)
DS^M/I Postage Amount Claimed
"DATA",9002313.93,123,0)
DT^M/I Special Packaging Indicator
"DATA",9002313.93,124,0)
DU^M/I Gross Amount Due
"DATA",9002313.93,125,0)
DV^M/I Other Payer Amount Paid
"DATA",9002313.93,126,0)
DW^M/I Basis Of Days Supply Determination
"DATA",9002313.93,127,0)
DX^M/I Patient Paid Amount Submitted
"DATA",9002313.93,128,0)
DY^M/I Date Of Injury
"DATA",9002313.93,129,0)
DZ^M/I Claim/Reference ID
"DATA",9002313.93,130,0)
E1^M/I Product/Service ID Qualifier
"DATA",9002313.93,131,0)
E2^M/I Route of Administration
"DATA",9002313.93,132,0)
E3^M/I Incentive Amount Submitted
"DATA",9002313.93,133,0)
E4^M/I Reason For Service Code
"DATA",9002313.93,134,0)
E5^M/I Professional Service Code
"DATA",9002313.93,135,0)
E6^M/I Result Of Service Code
"DATA",9002313.93,136,0)
E7^M/I Quantity Dispensed
"DATA",9002313.93,137,0)
E8^M/I Other Payer Date
"DATA",9002313.93,138,0)
M1^Patient Not Covered In This Aid Category
"DATA",9002313.93,139,0)
M2^Recipient Locked In
"DATA",9002313.93,140,0)
M3^Host PA/MC Error
"DATA",9002313.93,141,0)
M4^Prescription/Service Reference Number/Time Limit Exceeded
"DATA",9002313.93,142,0)
M5^Requires Manual Claim
"DATA",9002313.93,143,0)
M6^Host Eligibility Error
"DATA",9002313.93,144,0)
M7^Host Drug File Error
"DATA",9002313.93,145,0)
M8^Host Provider File Error
"DATA",9002313.93,146,0)
MZ^Error Overflow
"DATA",9002313.93,147,0)
1C^M/I Smoker/Non-Smoker Code
"DATA",9002313.93,148,0)
1E^M/I Prescriber Location Code
"DATA",9002313.93,149,0)
2C^M/I Pregnancy Indicator
"DATA",9002313.93,150,0)
2E^M/I Primary Care Provider ID Qualifier
"DATA",9002313.93,151,0)
3A^M/I Request Type
"DATA",9002313.93,152,0)
3B^M/I Request Period Date-Begin
"DATA",9002313.93,153,0)
3C^M/I Request Period Date-End
"DATA",9002313.93,154,0)
3D^M/I Basis Of Request
"DATA",9002313.93,155,0)
3E^M/I Authorized Representative First Name
"DATA",9002313.93,156,0)
3F^M/I Authorized Representative Last Name
"DATA",9002313.93,157,0)
3G^M/I Authorized Representative Street Address
"DATA",9002313.93,158,0)
3H^M/I Authorized Representative City Address
"DATA",9002313.93,159,0)
3J^M/I Authorized Representative State/Province Address
"DATA",9002313.93,160,0)
3K^M/I Authorized Representative Zip/Postal Zone
"DATA",9002313.93,161,0)
3M^M/I Prescriber Phone Number
"DATA",9002313.93,162,0)
3N^M/I Prior Authorized Number-Assigned
"DATA",9002313.93,163,0)
3P^M/I Authorization Number
"DATA",9002313.93,164,0)
3R^Prior Authorization Not Required
"DATA",9002313.93,165,0)
3S^M/I Prior Authorization Supporting Documentation
"DATA",9002313.93,166,0)
3T^Active Prior Auth Exists Resubmit At Expiration Of Prior Auth
"DATA",9002313.93,167,0)
3W^Prior Authorization In Process
"DATA",9002313.93,168,0)
3X^Authorization Number Not Found
"DATA",9002313.93,169,0)
3Y^Prior Authorization Denied
"DATA",9002313.93,170,0)
4C^M/I Coordination Of Benefits/Other Payments Count
"DATA",9002313.93,171,0)
4E^M/I Primary Care Provider Last Name
"DATA",9002313.93,172,0)
5C^M/I Other Payer Coverage Type
"DATA",9002313.93,173,0)
5E^M/I Other Payer Reject Count
"DATA",9002313.93,174,0)
6C^M/I Other Payer ID Qualifier
"DATA",9002313.93,175,0)
6E^M/I Other Payer Reject Code
"DATA",9002313.93,176,0)
7C^M/I Other Payer ID
"DATA",9002313.93,177,0)
7E^M/I DUR/PPS Code Counter
"DATA",9002313.93,178,0)
8C^M/I Facility ID
"DATA",9002313.93,179,0)
8E^M/I DUR/PPS Level Of Effort
"DATA",9002313.93,180,0)
AA^Patient Spenddown Not Met
"DATA",9002313.93,181,0)
AB^Date Written Is After Date Filled
"DATA",9002313.93,182,0)
AC^Product Not Covered Non-Participating Manufacturer
"DATA",9002313.93,183,0)
AD^Billing Provider Not Eligible To Bill This Claim Type
"DATA",9002313.93,184,0)
AE^QMB (Qualified Medicare Beneficiary)-Bill Medicare
"DATA",9002313.93,185,0)
AF^Patient Enrolled Under Managed Care
"DATA",9002313.93,186,0)
AG^Days Supply Limitation For Product/Service
"DATA",9002313.93,187,0)
AH^Unit Dose Packaging Only Payable For Nursing Home Recipients
"DATA",9002313.93,188,0)
AJ^Generic Drug Required
"DATA",9002313.93,189,0)
AK^M/I Software Vendor/Certification ID
"DATA",9002313.93,190,0)
AM^M/I Segment Identification
"DATA",9002313.93,191,0)
A9^M/I Transaction Count
"DATA",9002313.93,192,0)
BE^M/I Professional Service Fee Submitted
"DATA",9002313.93,193,0)
B2^M/I Service Provider ID Qualifier
"DATA",9002313.93,194,0)
CW^M/I Alternate ID
"DATA",9002313.93,195,0)
CX^M/I Patient ID Qualifier
"DATA",9002313.93,196,0)
CY^M/I Patient ID
"DATA",9002313.93,197,0)
CZ^M/I Employer ID
"DATA",9002313.93,198,0)
DC^M/I Dispensing Fee Submitted
"DATA",9002313.93,199,0)
DN^M/I Basis Of Cost Determination
"DATA",9002313.93,200,0)
EA^M/I Originally Prescribed Product/Service Code
"DATA",9002313.93,201,0)
EB^M/I Originally Prescribed Quantity
"DATA",9002313.93,202,0)
EC^M/I Compound Ingredient Component Count
"DATA",9002313.93,203,0)
ED^M/I Compound Ingredient Quantity
"DATA",9002313.93,204,0)
EE^M/I Compound Ingredient Drug Cost
"DATA",9002313.93,205,0)
EF^M/I Compound Dosage Form Description Code
"DATA",9002313.93,206,0)
EG^M/I Compound Dispensing Unit Form Indicator
"DATA",9002313.93,207,0)
EH^M/I Compound Route of Administration
"DATA",9002313.93,208,0)
EJ^M/I Originally Prescribed Product/Service ID Qualifier
"DATA",9002313.93,209,0)
EK^M/I Scheduled Prescription ID Number
"DATA",9002313.93,210,0)
EM^M/I Prescription/Service Reference Number Qualifier
"DATA",9002313.93,211,0)
EN^M/I Associated Prescription/Service Reference Number
"DATA",9002313.93,212,0)
Ep^M/I Associated Prescription/Service Date
"DATA",9002313.93,213,0)
ER^M/I Procedure Modifier Code
"DATA",9002313.93,214,0)
ET^M/I Quantity Prescribed
"DATA",9002313.93,215,0)
EU^M/I Prior Authorization Type Code
"DATA",9002313.93,216,0)
EV^M/I Prior Authorization Number Submitted
"DATA",9002313.93,217,0)
EW^M/I Intermediary Authorization Type ID
"DATA",9002313.93,218,0)
EX^M/I Intermediary Authorization ID
"DATA",9002313.93,219,0)
EY^M/I Provider ID Qualifier
"DATA",9002313.93,220,0)
EZ^M/I Prescriber ID Qualifier
"DATA",9002313.93,221,0)
E9^M/I Provider ID
"DATA",9002313.93,222,0)
FO^M/I Plan ID
"DATA",9002313.93,223,0)
GE^M/I Percentage Sales Tax Amount Submitted
"DATA",9002313.93,224,0)
HA^M/I Flat Sales Tax Amount Submitted
"DATA",9002313.93,225,0)
HB^M/I Other Payer Amount Paid Count
"DATA",9002313.93,226,0)
HC^M/I Other Payer Amount Paid Qualifier
"DATA",9002313.93,227,0)
HD^M/I Dispensing Status
"DATA",9002313.93,228,0)
HE^M/I Percentage Sales Tax Rate Submitted
"DATA",9002313.93,229,0)
HF^M/I Quantity Intended To Be Dispensed
"DATA",9002313.93,230,0)
HG^M/I Days Supply Intended To Be Dispensed
"DATA",9002313.93,231,0)
H1^M/I Measurement Time
"DATA",9002313.93,232,0)
H2^M/I Measurement Dimension
"DATA",9002313.93,233,0)
H3^M/I Measurement Unit
"DATA",9002313.93,234,0)
H4^M/I Measurement Value
"DATA",9002313.93,235,0)
H5^M/I Primary Care Provider Location Code
"DATA",9002313.93,236,0)
H6^M/I DUR Co-Agent ID
"DATA",9002313.93,237,0)
H7^M/I Other Amount Claimed Submitted Count
"DATA",9002313.93,238,0)
H8^M/I Other Amount Claimed Submitted Qualifier
"DATA",9002313.93,239,0)
H9^M/I Other Amount Claimed Submitted
"DATA",9002313.93,240,0)
JE^M/I Percentage Sales Tax Basis Submitted
"DATA",9002313.93,241,0)
J9^M/I DUR Co-Agent ID Qualifier
"DATA",9002313.93,242,0)
KE^M/I Coupon Type
"DATA",9002313.93,243,0)
ME^M/I Coupon Number
"DATA",9002313.93,244,0)
NE^M/I Coupon Value Amount
"DATA",9002313.93,245,0)
NN^Transaction Rejected At Switch Or Intermediary
"DATA",9002313.93,246,0)
PA^PA Exhausted/Not Renewable
"DATA",9002313.93,247,0)
PB^Invalid Transaction Count For This Transaction Code
"DATA",9002313.93,248,0)
PC^M/I Request Claim Segment
"DATA",9002313.93,249,0)
PD^M/I Request Clinical Segment
"DATA",9002313.93,250,0)
PE^M/I Request Coordination Of Benefits/Other Payments Segment
"DATA",9002313.93,251,0)
PF^M/I Request Compound Segment
"DATA",9002313.93,252,0)
PG^M/I Request Coupon Segment
"DATA",9002313.93,253,0)
PH^M/I Request DUR/PPS Segment
"DATA",9002313.93,254,0)
PJ^M/I Request Insurance Segment
"DATA",9002313.93,255,0)
PK^M/I Request Patient Segment
"DATA",9002313.93,256,0)
PM^M/I Request Pharmacy Provider Segment
"DATA",9002313.93,257,0)
PN^M/I Request Prescriber Segment
"DATA",9002313.93,258,0)
PP^M/I Request Pricing Segment
"DATA",9002313.93,259,0)
PR^M/I Request Prior Authorization Segment
"DATA",9002313.93,260,0)
PS^M/I Transaction Header Segment
"DATA",9002313.93,261,0)
PT^M/I Request Worker's Compensation Segment
"DATA",9002313.93,262,0)
PV^Non-Matched Associated Prescription/Service Date
"DATA",9002313.93,263,0)
PW^Employer ID Not Covered
"DATA",9002313.93,264,0)
PX^Other Payer ID Not Covered
"DATA",9002313.93,265,0)
PY^Non-Matched Unit Form/Route of Administration
"DATA",9002313.93,266,0)
PZ^Non-Matched Unit Of Measure To Product/Service ID
"DATA",9002313.93,267,0)
P1^Associated Prescription/Service Reference Number Not Found
"DATA",9002313.93,268,0)
P2^Clinical Information Counter Out Of Sequence
"DATA",9002313.93,269,0)
P3^Compound Ingredient Component Count Doesn't Match # Of Repetitions
"DATA",9002313.93,270,0)
P4^COB/Other Payments Count Does Not Match Number Of Repetitions
"DATA",9002313.93,271,0)
P5^Coupon Expired
"DATA",9002313.93,272,0)
P6^Date Of Service Prior To Date Of Birth
"DATA",9002313.93,273,0)
P7^Diagnosis Code Count Does Not Match Number Of Repetitions
"DATA",9002313.93,274,0)
P8^DUR/PPS Code Counter Out Of Sequence
"DATA",9002313.93,275,0)
P9^Field Is Non-Repeatable
"DATA",9002313.93,276,0)
RA^PA Reversal Out Of Order
"DATA",9002313.93,277,0)
RB^Multiple Partials Not Allowed
"DATA",9002313.93,278,0)
RC^Different Drug Entity Between Partial & Completion
"DATA",9002313.93,279,0)
RD^Mismatched Cardholder/Group ID-Partial To Completion
"DATA",9002313.93,280,0)
RE^M/I Compound Product ID Qualifier
"DATA",9002313.93,281,0)
RF^Improper Order Of 'Dispensing Status' Code On Partial Fill Transaction
"DATA",9002313.93,282,0)
RG^M/I Associated Rx/Service Reference # On Completion Transaction
"DATA",9002313.93,283,0)
RH^M/I Associated Prescription/Service Date On Completion Transaction
"DATA",9002313.93,284,0)
RJ^Associated Partial Fill Transaction Not On File
"DATA",9002313.93,285,0)
RK^Partial Fill Transaction Not Supported
"DATA",9002313.93,286,0)
RM^Compl Trans Not Permitted With Same 'Date Of Service' As Partial Trans
"DATA",9002313.93,287,0)
RN^Plan Limits Exceeded On Intended Partial Fill Field Limitations
"DATA",9002313.93,288,0)
RP^Out Of Sequence 'P' Reversal On Partial Fill Transaction
"DATA",9002313.93,289,0)
RS^M/I Associated Prescription/Service Date On Partial Transaction
"DATA",9002313.93,290,0)
RT^M/I Associated Prescription/Service Reference Number On Partial Trans
"DATA",9002313.93,291,0)
RU^Mandatory Elements Must Occur Before Optional Data Elements In Segment
"DATA",9002313.93,292,0)
R1^Other Amount Claimed Submitted Count Does Not Match # of Repetitions
"DATA",9002313.93,293,0)
R2^Other Payer Reject Count Does Not Match Number Of Repetitions
"DATA",9002313.93,294,0)
R3^Procedure Modifier Code Count Does Not Match Number Of Repetitions
"DATA",9002313.93,295,0)
R4^Procedure Modifier Code Invalid For Product/Service ID
"DATA",9002313.93,296,0)
R5^Product/Service ID Must Be Zero When Product/Service ID Qual Equals 06
"DATA",9002313.93,297,0)
R6^Product/Service Not Appropriate For This Location
"DATA",9002313.93,298,0)
R7^Repeating Segment Not Allowed In Same Transaction
"DATA",9002313.93,299,0)
R8^Syntax Error
"DATA",9002313.93,300,0)
R9^Value In Gross Amount Due Does Not Follow Pricing Formulae
"DATA",9002313.93,301,0)
SE^M/I Procedure Modifier Code Count
"DATA",9002313.93,302,0)
TE^Missing/Invalid Compound Product ID
"DATA",9002313.93,303,0)
UE^M/I Compound Ingredient Basis Of Cost Determination
"DATA",9002313.93,304,0)
VE^M/I Diagnosis Code Count
"DATA",9002313.93,305,0)
WE^M/I Diagnosis Code Qualifier
"DATA",9002313.93,306,0)
XE^M/I Clinical Information Counter
"DATA",9002313.93,307,0)
ZE^M/I Measurement Date
"DATA",9002313.93,308,0)
*95^The Clearinghous did not respond in time
"DATA",9002313.93,309,0)
*96^Scheduled Downtime
"DATA",9002313.93,310,0)
*97^Payor Unavailable
"DATA",9002313.93,311,0)
*98^Connection To Payer Is Down
"DATA",9002313.93,312,0)
*95^The Clearinghouse Did Not Respond In Time.
"DATA",9002313.93,313,0)
*97^Payer Unavailable
"DATA",9002313.93,314,0)
1R^Version/Release Value Not Supported
"DATA",9002313.93,315,0)
1S^Transaction Code/Type Value Not Supported
"DATA",9002313.93,316,0)
1T^PCN Must Contain Processor/Payer Assigned Value
"DATA",9002313.93,317,0)
1U^Transaction Count Does Not Match Number of Transactions
"DATA",9002313.93,318,0)
1V^Multiple Transactions Not Supported
"DATA",9002313.93,319,0)
1W^Multi-Ingredient Compound Must Be A Single Transaction
"DATA",9002313.93,320,0)
1X^Vendor Not Certified For Processor/Payer
"DATA",9002313.93,321,0)
1Y^Claim Segment Required For Adjudication
"DATA",9002313.93,322,0)
1Z^Clinical Segment Required For Adjudication
"DATA",9002313.93,323,0)
2A^M/I Medigap ID
"DATA",9002313.93,324,0)
2B^M/I Medicaid Indicator
"DATA",9002313.93,325,0)
2D^M/I Provider Accept Assignment Indicator
"DATA",9002313.93,326,0)
2G^M/I Compound Ingredient Modifier Code Count
"DATA",9002313.93,327,0)
2H^M/I Compound Ingredient Modifier Code
"DATA",9002313.93,328,0)
2J^M/I Prescriber First Name
"DATA",9002313.93,329,0)
2K^M/I Prescriber Street Address
"DATA",9002313.93,330,0)
2M^M/I Prescriber City Address
"DATA",9002313.93,331,0)
2N^M/I Prescriber State/Province Address
"DATA",9002313.93,332,0)
2P^M/I Prescriber Zip/Postal Zone
"DATA",9002313.93,333,0)
2Q^M/I Additional Documentation Type ID
"DATA",9002313.93,334,0)
2R^M/I Length of Need
"DATA",9002313.93,335,0)
2S^M/I Length of Need Qualifier
"DATA",9002313.93,336,0)
2T^M/I Prescriber/Supplier Date Signed
"DATA",9002313.93,337,0)
2U^M/I Request Status
"DATA",9002313.93,338,0)
2V^M/I Request Period Begin Date
"DATA",9002313.93,339,0)
2W^M/I Request Period Recert/Revised Date
"DATA",9002313.93,340,0)
2X^M/I Supporting Documentation
"DATA",9002313.93,341,0)
2Z^M/I Question Number/Letter Count
"DATA",9002313.93,342,0)
3Q^M/I Facility Name
"DATA",9002313.93,343,0)
3U^M/I Facility Street Address
"DATA",9002313.93,344,0)
3V^M/I Facility State/Province Address
"DATA",9002313.93,345,0)
4B^M/I Question Number/Letter
"DATA",9002313.93,346,0)
4D^M/I Question Percent Response
"DATA",9002313.93,347,0)
4G^M/I Question Date Response
"DATA",9002313.93,348,0)
4H^M/I Question Dollar Amount Response
"DATA",9002313.93,349,0)
4J^M/I Question Numeric Response
"DATA",9002313.93,350,0)
4K^M/I Question Alphanumeric Response
"DATA",9002313.93,351,0)
4M^Compound Ingredient Modifier Code Count Doesn't Match # of Repetitions
"DATA",9002313.93,352,0)
4N^Question Number/Letter Count Does Not Match Number of Repetitions
"DATA",9002313.93,353,0)
4P^Question Number/Letter Not Valid for Identified Document
"DATA",9002313.93,354,0)
4Q^Question Response Not Appropriate for Question Number/Letter
"DATA",9002313.93,355,0)
4R^Required Question Num/Letter Response for Indicated Document Missing
"DATA",9002313.93,356,0)
4S^Compound Product ID Requires a Modifier Code
"DATA",9002313.93,357,0)
4T^M/I Additional Documentation Segment
"DATA",9002313.93,358,0)
4W^Must Fill Through Specialty Pharmacy
"DATA",9002313.93,359,0)
4X^M/I Patient Residence
"DATA",9002313.93,360,0)
4Y^Patient Residence Value Not Supported
"DATA",9002313.93,361,0)
4Z^Place of Service Not Supported By Plan
"DATA",9002313.93,362,0)
5J^M/I Facility City Address
"DATA",9002313.93,363,0)
6D^M/I Facility Zip/Postal Zone
"DATA",9002313.93,364,0)
6G^COB/Other Payments Segment Required For Adjudication
"DATA",9002313.93,365,0)
6H^Coupon Segment Required For Adjudication
"DATA",9002313.93,366,0)
6J^Insurance Segment Required For Adjudication
"DATA",9002313.93,367,0)
6K^Patient Segment Required For Adjudication
"DATA",9002313.93,368,0)
6M^Pharmacy Provider Segment Required For Adjudication
"DATA",9002313.93,369,0)
6N^Prescriber Segment Required For Adjudication
"DATA",9002313.93,370,0)
6P^Pricing Segment Required For Adjudication
"DATA",9002313.93,371,0)
6Q^Prior Authorization Segment Required For Adjudication
"DATA",9002313.93,372,0)
6R^Worker's Compensation Segment Required For Adjudication
"DATA",9002313.93,373,0)
6S^Transaction Segment Required For Adjudication
"DATA",9002313.93,374,0)
6T^Compound Segment Required For Adjudication
"DATA",9002313.93,375,0)
6U^Compound Segment Incorrectly Formatted
"DATA",9002313.93,376,0)
6V^Multi-ingredient Compounds Not Supported
"DATA",9002313.93,377,0)
6W^DUR/PPS Segment Required For Adjudication
"DATA",9002313.93,378,0)
6X^DUR/PPS Segment Incorrectly Formatted
"DATA",9002313.93,379,0)
6Y^Not Authorized To Submit Electronically
"DATA",9002313.93,380,0)
6Z^Provider Not Eligible To Perform Service/Dispense Product
"DATA",9002313.93,381,0)
7A^Provider Does Not Match Authorization On File
"DATA",9002313.93,382,0)
7B^Service Provider ID Qualifier Value Not Supported For Processor/Payer
"DATA",9002313.93,383,0)
7D^Non-Matched DOB
"DATA",9002313.93,384,0)
7G^Future Date Not Allowed For DOB
"DATA",9002313.93,385,0)
7H^Non-Matched Gender Code
"DATA",9002313.93,386,0)
7J^Patient Relationship Code Value Not Supported
"DATA",9002313.93,387,0)
7K^Discrepancy Between Other Coverage Code And Other Payer Amount
"DATA",9002313.93,388,0)
7M^Discrepancy Between Other Coverage Code & Other Coverage Info On File
"DATA",9002313.93,389,0)
7N^Patient ID Qualifier Value Not Supported
"DATA",9002313.93,390,0)
7P^COB/Other Payments Count Exceeds Number of Supported Payers
"DATA",9002313.93,391,0)
7Q^Other Payer ID Qualifier Value Not Supported
"DATA",9002313.93,392,0)
7R^Other Payer Amount Paid Count Exceeds Number of Supported Groupings
"DATA",9002313.93,393,0)
7S^Other Payer Amount Paid Qualifier Value Not Supported
"DATA",9002313.93,394,0)
7T^Quantity Intended To Be Dispensed Required For Partial Fill Trans
"DATA",9002313.93,395,0)
7U^Days Supply Intended To Be Dispensed Required For Partial Fill Trans
"DATA",9002313.93,396,0)
7V^Duplicate Refills
"DATA",9002313.93,397,0)
7W^Refills Exceed allowable Refills
"DATA",9002313.93,398,0)
7X^Days Supply Exceeds Plan Limitation
"DATA",9002313.93,399,0)
7Y^Compounds Not Covered
"DATA",9002313.93,400,0)
7Z^Compound Requires Two Or More Ingredients
"DATA",9002313.93,401,0)
8A^Compound Requires At Least One Covered Ingredient
"DATA",9002313.93,402,0)
8B^Compound Segment Missing On A Compound Claim
"DATA",9002313.93,403,0)
8D^Compound Segment Present On A Non-Compound Claim
"DATA",9002313.93,404,0)
8G^Product/Service ID (407-D7) Must Be A Single Zero '0' For Compounds
"DATA",9002313.93,405,0)
8H^Product/Service Only Covered On Compound Claim
"DATA",9002313.93,406,0)
8J^Incorrect Product/Service ID For Processor/Payer
"DATA",9002313.93,407,0)
8K^DAW Code Value Not Supported
"DATA",9002313.93,408,0)
8M^Sum Of Compound Ingredient Costs Does Not Equal Ingredient Cost
"DATA",9002313.93,409,0)
8N^Future Date Prescription Written Not Allowed
"DATA",9002313.93,410,0)
8P^Date Written Different On Previous Filling
"DATA",9002313.93,411,0)
8Q^Excessive Refills Authorized
"DATA",9002313.93,412,0)
8R^Submission Clarification Code Value Not Supported
"DATA",9002313.93,413,0)
8S^Basis Of Cost Determination Value Not Supported
"DATA",9002313.93,414,0)
8T^U&C Must Be Greater Than Zero
"DATA",9002313.93,415,0)
8U^GAD Must Be Greater Than Zero
"DATA",9002313.93,416,0)
8V^Negative Dollar Amount Is Not Supported In Other Payer Amount Paid
"DATA",9002313.93,417,0)
8W^Discrepancy Between Other Coverage Code and Other Payer Amount Paid
"DATA",9002313.93,418,0)
8X^Collection From Cardholder Not Allowed
"DATA",9002313.93,419,0)
8Y^Excessive Amount Collected
"DATA",9002313.93,420,0)
8Z^Product/Service ID Qualifier Value Not Supported
"DATA",9002313.93,421,0)
9B^Reason For Service Code Value Not Supported
"DATA",9002313.93,422,0)
9C^Professional Service Code Value Not Supported
"DATA",9002313.93,423,0)
9D^Result Of Service Code Value Not Supported
"DATA",9002313.93,424,0)
9E^Quantity Does Not Match Dispensing Unit
"DATA",9002313.93,425,0)
9G^Quantity Dispensed Exceeds Maximum Allowed
"DATA",9002313.93,426,0)
9H^Quantity Not Valid For Product/Service ID Submitted
"DATA",9002313.93,427,0)
9J^Future Other Payer Date Not Allowed
"DATA",9002313.93,428,0)
9K^Compound Ingredient Component Cnt Exceeds Num Of Ingredients Supported
"DATA",9002313.93,429,0)
9M^Minimum Of Two Ingredients Required
"DATA",9002313.93,430,0)
9N^Compound Ingredient Quantity Exceeds Maximum Allowed
"DATA",9002313.93,431,0)
9P^Compound Ingredient Drug Cost Must Be Greater Than Zero
"DATA",9002313.93,432,0)
9Q^Route Of Administration Submitted Not Covered
"DATA",9002313.93,433,0)
9R^Prescription/Service Reference Number Qualifier Submitted Not Covered
"DATA",9002313.93,434,0)
9S^Future Associated Prescription/Service Date Not Allowed
"DATA",9002313.93,435,0)
9T^Prior Authorization Type Code Submitted Not Covered
"DATA",9002313.93,436,0)
9U^Provider ID Qualifier Submitted Not Covered
"DATA",9002313.93,437,0)
9V^Prescriber ID Qualifier Submitted Not Covered
"DATA",9002313.93,438,0)
9W^DUR/PPS Code Counter Exceeds Number Of Occurrences Supported
"DATA",9002313.93,439,0)
9X^Coupon Type Submitted Not Covered
"DATA",9002313.93,440,0)
9Y^Compound Product ID Qualifier Submitted Not Covered
"DATA",9002313.93,441,0)
9Z^Duplicate Product ID In Compound
"DATA",9002313.93,442,0)
AQ^M/I Facility Segment
"DATA",9002313.93,443,0)
A5^Not Covered Under Part D Law
"DATA",9002313.93,444,0)
A6^This Product/Service May Be Covered Under Medicare Part B
"DATA",9002313.93,445,0)
A7^M/I Internal Control Number
"DATA",9002313.93,446,0)
BA^Compound Basis of Cost Determination Submitted Not Covered
"DATA",9002313.93,447,0)
BB^Diagnosis Code Qualifier Submitted Not Covered
"DATA",9002313.93,448,0)
BC^Future Measurement Date Not Allowed
"DATA",9002313.93,449,0)
BD^Sender Not Authorized To Submit File Type
"DATA",9002313.93,450,0)
BF^M/I File Type
"DATA",9002313.93,451,0)
BG^Sender ID Not Certified For Processor/Payer
"DATA",9002313.93,452,0)
BH^M/I Sender ID
"DATA",9002313.93,453,0)
BJ^Transmission Type Submitted Not Supported
"DATA",9002313.93,454,0)
BK^M/I Transmission Type
"DATA",9002313.93,455,0)
BM^M/I Narrative Message
"DATA",9002313.93,456,0)
EP^M/I Associated Prescription/Service Date
"DATA",9002313.93,457,0)
G1^M/I Compound Type
"DATA",9002313.93,458,0)
G2^M/I CMS Part D Defined Qualified Facility
"DATA",9002313.93,459,0)
G4^Physician must contact plan
"DATA",9002313.93,460,0)
G5^Pharmacist must contact plan
"DATA",9002313.93,461,0)
G6^Pharmacy Not Contracted in Specialty Network
"DATA",9002313.93,462,0)
G7^Pharmacy Not Contracted in Home Infusion Network
"DATA",9002313.93,463,0)
G8^Pharmacy Not Contracted in Long Term Care Network
"DATA",9002313.93,464,0)
G9^Pharmacy Not Contracted in 90 Day Retail Network
"DATA",9002313.93,465,0)
HN^M/I Patient E-Mail Address
"DATA",9002313.93,466,0)
K5^M/I Transaction Reference Number
"DATA",9002313.93,467,0)
MG^M/I Other Payer BIN Number
"DATA",9002313.93,468,0)
MH^M/I Other Payer Processor Control Number
"DATA",9002313.93,469,0)
MJ^M/I Other Payer Group ID
"DATA",9002313.93,470,0)
MK^Non-Matched Other Payer BIN Number
"DATA",9002313.93,471,0)
MM^Non-Matched Other Payer Processor Control Number
"DATA",9002313.93,472,0)
MN^Non-Matched Other Payer Group ID
"DATA",9002313.93,473,0)
MP^Other Payer Cardholder ID Not Covered
"DATA",9002313.93,474,0)
MR^Product Not On Formulary
"DATA",9002313.93,475,0)
MS^More than 1 Cardholder Found - Narrow Search Criteria
"DATA",9002313.93,476,0)
MT^M/I Patient Assignment Indicator
"DATA",9002313.93,477,0)
MU^M/I Benefit Stage Count
"DATA",9002313.93,478,0)
MV^M/I Benefit Stage Qualifier
"DATA",9002313.93,479,0)
MW^M/I Benefit Stage Amount
"DATA",9002313.93,480,0)
MX^Benefit Stage Count Does Not Match Number Of Repetitions
"DATA",9002313.93,481,0)
NP^M/I Other Payer-Patient Responsibility Amount Qualifier
"DATA",9002313.93,482,0)
NQ^M/I Other Payer-Patient Responsibility Amount
"DATA",9002313.93,483,0)
NR^M/I Other Payer-Patient Responsibility Amount Count
"DATA",9002313.93,484,0)
NU^M/I Other Payer Cardholder ID
"DATA",9002313.93,485,0)
NV^M/I Delay Reason Code
"DATA",9002313.93,486,0)
NX^M/I Submission Clarification Code Count
"DATA",9002313.93,487,0)
N1^No patient match found
"DATA",9002313.93,488,0)
N3^M/I Medicaid Paid Amount
"DATA",9002313.93,489,0)
N4^M/I Medicaid Subrogation Internal Ctrl Number/Transaction Ctrl Number
"DATA",9002313.93,490,0)
N5^M/I Medicaid ID Number
"DATA",9002313.93,491,0)
N6^M/I Medicaid Agency Number
"DATA",9002313.93,492,0)
N7^Use Prior Authorization Code Provided During Transition Period
"DATA",9002313.93,493,0)
N8^Use Prior Authorization Code Provided For Emergency Fill
"DATA",9002313.93,494,0)
N9^Use Prior Authorization Code Provided For Level of Care Change
"DATA",9002313.93,495,0)
PQ^M/I Narrative Segment
"DATA",9002313.93,496,0)
RL^Transitional Benefit/Resubmit Claim
"DATA",9002313.93,497,0)
RV^Multiple Reversals Per Transmission Not Supported
"DATA",9002313.93,498,0)
SF^Other Payer Amount Paid Count Does Not Match Number Of Repetitions
"DATA",9002313.93,499,0)
SG^Submission Clarification Code Count Doesn't Match # of Repetitions
"DATA",9002313.93,500,0)
SH^Other Payer-Patient Resp Amount Count Doesn't Match # of Repetitions
"DATA",9002313.93,501,0)
TN^Emergency Fill/Resubmit Claim
"DATA",9002313.93,502,0)
TP^Level of Care Change/Resubmit Claim
"DATA",9002313.93,503,0)
TQ^Dosage Exceeds Product Labeling Limit
"DATA",9002313.93,504,0)
TR^M/I Billing Entity Type Indicator
"DATA",9002313.93,505,0)
TS^M/I Pay To Qualifier
"DATA",9002313.93,506,0)
TT^M/I Pay To ID
"DATA",9002313.93,507,0)
TU^M/I Pay To Name
"DATA",9002313.93,508,0)
TV^M/I Pay To Street Address
"DATA",9002313.93,509,0)
TW^M/I Pay To City Address
"DATA",9002313.93,510,0)
TX^M/I Pay to State/Province Address
"DATA",9002313.93,511,0)
TY^M/I Pay To Zip/Postal Zone
"DATA",9002313.93,512,0)
TZ^M/I Generic Equivalent Product ID Qualifier
"DATA",9002313.93,513,0)
UA^M/I Generic Equivalent Product ID
"DATA",9002313.93,514,0)
UU^DAW 0 cannot be submitted on a multi-source drug w/available generics
"DATA",9002313.93,515,0)
UZ^Other Payer Coverage Type required on reversals to downstream payers
"DATA",9002313.93,516,0)
U7^M/I Pharmacy Service Type
"DATA",9002313.93,517,0)
VA^Pay To Qualifier Value Not Supported
"DATA",9002313.93,518,0)
VB^Generic Equivalent Product ID Qualifier Value Not Supported
"DATA",9002313.93,519,0)
VC^Pharmacy Service Type Value Not Supported
"DATA",9002313.93,520,0)
VD^Eligibility Search Time Frame Exceeded
"DATA",9002313.93,521,0)
ZA^The COB/Other Payments Segment is mandatory to a downstream payer
"DATA",9002313.93,522,0)
eT^TRICARE-DRUG NON BILLABLE
"DATA",9002313.93,524,0)
MY^M/I Address Count
"DATA",9002313.93,525,0)
NA^M/I Address Qualifier
"DATA",9002313.93,526,0)
NB^M/I Client Name
"DATA",9002313.93,527,0)
NC^M/I Discontinue Date Qualifier
"DATA",9002313.93,528,0)
ND^M/I Discontinue Date
"DATA",9002313.93,529,0)
NF^M/I Easy Open Cap Indicator
"DATA",9002313.93,530,0)
NG^M/I Effective Date
"DATA",9002313.93,531,0)
NH^M/I Expiration Date
"DATA",9002313.93,532,0)
NJ^M/I File Structure Type
"DATA",9002313.93,533,0)
NK^M/I Inactive Prescription Indicator
"DATA",9002313.93,534,0)
NM^M/I Label Directions
"DATA",9002313.93,535,0)
NW^M/I Most Recent Date Filled
"DATA",9002313.93,536,0)
NY^M/I Number Of Fills To-Date
"DATA",9002313.93,537,0)
PU^M/I Number Of Fills Remaining
"DATA",9002313.93,538,0)
P0^Non-zero Value Required for Vaccine Administration
"DATA",9002313.93,539,0)
RQ^M/I Original Dispensed Date
"DATA",9002313.93,540,0)
RR^M/I Patient ID Qualifier Count
"DATA",9002313.93,541,0)
RW^M/I Prescribed Drug Description
"DATA",9002313.93,542,0)
RX^M/I Prescriber ID Count
"DATA",9002313.93,543,0)
RY^M/I Prescriber Specialty
"DATA",9002313.93,544,0)
RZ^M/I Prescriber Specialty Count
"DATA",9002313.93,545,0)
R0^Professional Serv Cd of 'MA' req'd for Vaccine Incentive Fee Submitted
"DATA",9002313.93,546,0)
S0^Accumulator Month Count Does Not Match Number of Repetitions
"DATA",9002313.93,547,0)
S1^M/I Accumulator Year
"DATA",9002313.93,548,0)
S2^M/I Transaction Identifier
"DATA",9002313.93,549,0)
S3^M/I Accumulated Patient True Out Of Pocket Amount
"DATA",9002313.93,550,0)
S4^M/I Accumulated Gross Covered Drug Cost Amount
"DATA",9002313.93,551,0)
S5^M/I DateTime
"DATA",9002313.93,552,0)
S6^M/I Accumulator Month
"DATA",9002313.93,553,0)
S7^M/I Accumulator Month Count
"DATA",9002313.93,554,0)
S8^Non-Matched Transaction Identifier
"DATA",9002313.93,555,0)
S9^M/I Financial Information Reporting Transaction Header Segment
"DATA",9002313.93,556,0)
SA^M/I Quantity Dispensed To Date
"DATA",9002313.93,557,0)
SB^M/I Record Delimiter
"DATA",9002313.93,558,0)
SC^M/I Remaining Quantity
"DATA",9002313.93,559,0)
SD^M/I Sender Name
"DATA",9002313.93,560,0)
SJ^M/I Total Number Of Sending And Receiving Pharmacy Records
"DATA",9002313.93,561,0)
SK^M/I Transfer Flag
"DATA",9002313.93,562,0)
SM^M/I Transfer Type
"DATA",9002313.93,563,0)
SN^M/I Package Acquisition Cost
"DATA",9002313.93,564,0)
SP^M/I Unique Record Identifier
"DATA",9002313.93,565,0)
SQ^M/I Unique Record Identifier Qualifier
"DATA",9002313.93,566,0)
SW^Accum Patient True Out of Pocket must be equal to or greater than zero
"DATA",9002313.93,567,0)
TD^M/I Pharmacist Initials
"DATA",9002313.93,568,0)
TG^Address Count Does Not Match Number Of Repetitions
"DATA",9002313.93,569,0)
TH^Patient ID Qualifier Count Does Not Match Number Of Repetitions
"DATA",9002313.93,570,0)
TJ^Prescriber ID Count Does Not Match Number Of Repetitions
"DATA",9002313.93,571,0)
TK^Prescriber Specialty Count Does Not Match Number Of Repetitions
"DATA",9002313.93,572,0)
TM^Telephone Number Count Does Not Match Number Of Repetitions
"DATA",9002313.93,573,0)
T0^Accumulator Month Count Exceeds Number of Occurrences Supported
"DATA",9002313.93,574,0)
T1^Request Financial Segment Required For Financial Information Reporting
"DATA",9002313.93,575,0)
T2^M/I Request Reference Segment
"DATA",9002313.93,576,0)
T3^Out of Order DateTime
"DATA",9002313.93,577,0)
T4^Duplicate DateTime
"DATA",9002313.93,578,0)
U0^M/I Sending Pharmacy ID
"DATA",9002313.93,579,0)
V0^M/I Telephone Number Count
"DATA",9002313.93,580,0)
W0^M/I Telephone Number Qualifier
"DATA",9002313.93,581,0)
W5^M/I Bed
"DATA",9002313.93,582,0)
W6^M/I Facility Unit
"DATA",9002313.93,583,0)
W7^M/I Hours of Administration
"DATA",9002313.93,584,0)
W8^M/I Room
"DATA",9002313.93,585,0)
W9^Accum Gross Cov Drug Cost Amt Must Be Equal To Or Greater Than Zero
"DATA",9002313.93,586,0)
X1^Accumulated Patient True Out of Pocket exceeds maximum
"DATA",9002313.93,587,0)
X2^Accumulated Gross Covered Drug Cost exceeds maximum
"DATA",9002313.93,588,0)
X3^Out of order Accumulator Months
"DATA",9002313.93,589,0)
X4^Accumulator Year not current or prior year
"DATA",9002313.93,590,0)
X5^M/I Financial Information Reporting Request Insurance Segment
"DATA",9002313.93,591,0)
X6^M/I Request Financial Segment
"DATA",9002313.93,592,0)
X7^Financial Info Reporting Req Ins Seg Required For Financial Reporting
"DATA",9002313.93,593,0)
X8^Procedure Modifier Code Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,594,0)
X9^Diagnosis Code Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,595,0)
YA^Compound Ingredient Mod Code Cnt Exceeds Num Of Occurrences Supported
"DATA",9002313.93,596,0)
YB^Other Amt Claimed Submitted Count Exceeds Num Of Occurrences Supported
"DATA",9002313.93,597,0)
YC^Other Payer Reject Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,598,0)
YD^Other Payer-Patient Resp Amt Cnt Exceeds Num Of Occurrences Supported
"DATA",9002313.93,599,0)
YE^Submission Clarification Code Cnt Exceeds Num of Occurrences Supported
"DATA",9002313.93,600,0)
YF^Question Number/Letter Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,601,0)
YG^Benefit Stage Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,602,0)
YH^Clinical Information Counter Exceeds Number of Occurrences Supported
"DATA",9002313.93,603,0)
YJ^Medicaid Agency Number Not Supported
"DATA",9002313.93,604,0)
201^Patient Segment is not used for this Transaction Code
"DATA",9002313.93,605,0)
202^Insurance Segment is not used for this Transaction Code
"DATA",9002313.93,606,0)
203^Claim Segment is not used for this Transaction Code
"DATA",9002313.93,607,0)
204^Pharmacy Provider Segment is not used for this Transaction Code
"DATA",9002313.93,608,0)
205^Prescriber Segment is not used for this Transaction Code
"DATA",9002313.93,609,0)
206^COB/Other Payments Segment is not used for this Transaction Code
"DATA",9002313.93,610,0)
207^Workers' Compensation Segment is not used for this Transaction Code
"DATA",9002313.93,611,0)
208^DUR/PPS Segment is not used for this Transaction Code
"DATA",9002313.93,612,0)
209^Pricing Segment is not used for this Transaction Code
"DATA",9002313.93,613,0)
210^Coupon Segment is not used for this Transaction Code
"DATA",9002313.93,614,0)
211^Compound Segment is not used for this Transaction Code
"DATA",9002313.93,615,0)
212^Prior Authorization Segment is not used for this Transaction Code
"DATA",9002313.93,616,0)
213^Clinical Segment is not used for this Transaction Code
"DATA",9002313.93,617,0)
214^Additional Documentation Segment is not used for this Transaction Code
"DATA",9002313.93,618,0)
215^Facility Segment is not used for this Transaction Code
"DATA",9002313.93,619,0)
216^Narrative Segment is not used for this Transaction Code
"DATA",9002313.93,620,0)
217^Purchaser Segment is not used for this Transaction Code
"DATA",9002313.93,621,0)
218^Service Provider Segment is not used for this Transaction Code
"DATA",9002313.93,622,0)
219^Patient ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,623,0)
220^Patient ID is not used for this Transaction Code
"DATA",9002313.93,624,0)
221^Date of Birth is not used for this Transaction Code
"DATA",9002313.93,625,0)
222^Patient Gender Code is not used for this Transaction Code
"DATA",9002313.93,626,0)
223^Patient First Name is not used for this Transaction Code
"DATA",9002313.93,627,0)
224^Patient Last Name is not used for this Transaction Code
"DATA",9002313.93,628,0)
225^Patient Street Address is not used for this Transaction Code
"DATA",9002313.93,629,0)
226^Patient City Address is not used for this Transaction Code
"DATA",9002313.93,630,0)
227^Patient State/Province Address is not used for this Transaction Code
"DATA",9002313.93,631,0)
228^Patient ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,632,0)
229^Patient Phone Number is not used for this Transaction Code
"DATA",9002313.93,633,0)
230^Place of Service is not used for this Transaction Code
"DATA",9002313.93,634,0)
231^Employer ID is not used for this Transaction Code
"DATA",9002313.93,635,0)
232^Smoker/Non-Smoker Code is not used for this Transaction Code
"DATA",9002313.93,636,0)
233^Pregnancy Indicator is not used for this Transaction Code
"DATA",9002313.93,637,0)
234^Patient E-Mail Address is not used for this Transaction Code
"DATA",9002313.93,638,0)
235^Patient Residence is not used for this Transaction Code
"DATA",9002313.93,639,0)
236^Patient ID Assoc State/Province Address not used for this Trans Code
"DATA",9002313.93,640,0)
237^Cardholder First Name is not used for this Transaction Code
"DATA",9002313.93,641,0)
238^Cardholder Last Name is not used for this Transaction Code
"DATA",9002313.93,642,0)
239^Home Plan is not used for this Transaction Code
"DATA",9002313.93,643,0)
240^Plan ID is not used for this Transaction Code
"DATA",9002313.93,644,0)
241^Eligibility Clarification Code is not used for this Transaction Code
"DATA",9002313.93,645,0)
242^Group ID is not used for this Transaction Code
"DATA",9002313.93,646,0)
243^Person Code is not used for this Transaction Code
"DATA",9002313.93,647,0)
244^Patient Relationship Code is not used for this Transaction Code
"DATA",9002313.93,648,0)
245^Other Payer BIN Number is not used for this Transaction Code
"DATA",9002313.93,649,0)
246^Other Payer Processor Control Number is not used for this Trans Code
"DATA",9002313.93,650,0)
247^Other Payer Cardholder ID is not used for this Transaction Code
"DATA",9002313.93,651,0)
248^Other Payer Group ID is not used for this Transaction Code
"DATA",9002313.93,652,0)
249^Medigap ID is not used for this Transaction Code
"DATA",9002313.93,653,0)
250^Medicaid Indicator is not used for this Transaction Code
"DATA",9002313.93,654,0)
251^Provider Accept Assignment Indicator is not used for this Trans Code
"DATA",9002313.93,655,0)
252^CMS Part D Defined Qualified Facility is not used for this Trans Code
"DATA",9002313.93,656,0)
253^Medicaid ID Number is not used for this Transaction Code
"DATA",9002313.93,657,0)
254^Medicaid Agency Number is not used for this Transaction Code
"DATA",9002313.93,658,0)
255^Associated Rx/Service Reference Number is not used for this Trans Code
"DATA",9002313.93,659,0)
256^Associated Prescription/Service Date is not used for this Trans Code
"DATA",9002313.93,660,0)
257^Procedure Modifier Code Count is not used for this Transaction Code
"DATA",9002313.93,661,0)
258^Procedure Modifier Code is not used for this Transaction Code
"DATA",9002313.93,662,0)
259^Quantity Dispensed is not used for this Transaction Code
"DATA",9002313.93,663,0)
260^Fill Number is not used for this Transaction Code
"DATA",9002313.93,664,0)
261^Days Supply is not used for this Transaction Code
"DATA",9002313.93,665,0)
262^Compound Code is not used for this Transaction Code
"DATA",9002313.93,666,0)
263^DAW/Product Selection Code is not used for this Trans Code
"DATA",9002313.93,667,0)
264^Date Prescription Written is not used for this Transaction Code
"DATA",9002313.93,668,0)
265^Number of Refills Authorized is not used for this Transaction Code
"DATA",9002313.93,669,0)
266^Prescription Origin Code is not used for this Transaction Code
"DATA",9002313.93,670,0)
267^Submission Clarification Code Count is not used for this Trans Code
"DATA",9002313.93,671,0)
268^Submission Clarification Code is not used for this Transaction Code
"DATA",9002313.93,672,0)
269^Quantity Prescribed is not used for this Transaction Code
"DATA",9002313.93,673,0)
270^Other Coverage Code is not used for this Transaction Code
"DATA",9002313.93,674,0)
271^Special Packaging Indicator is not used for this Transaction Code
"DATA",9002313.93,675,0)
272^Originally Prescribed Prod/Serv ID Qual not used for this Trans Code
"DATA",9002313.93,676,0)
273^Originally Prescribed Prod/Serv Code is not used for this Trans Code
"DATA",9002313.93,677,0)
274^Originally Prescribed Quantity is not used for this Transaction Code
"DATA",9002313.93,678,0)
275^Alternate ID is not used for this Transaction Code
"DATA",9002313.93,679,0)
276^Scheduled Prescription ID Number is not used for this Transaction Code
"DATA",9002313.93,680,0)
277^Unit of Measure is not used for this Transaction Code
"DATA",9002313.93,681,0)
278^Level of Service is not used for this Transaction Code
"DATA",9002313.93,682,0)
279^Prior Authorization Type Code is not used for this Transaction Code
"DATA",9002313.93,683,0)
280^Prior Authorization Number Submitted is not used for this Trans Code
"DATA",9002313.93,684,0)
281^Intermediary Authorization Type ID is not used for this Trans Code
"DATA",9002313.93,685,0)
282^Intermediary Authorization ID is not used for this Transaction Code
"DATA",9002313.93,686,0)
283^Dispensing Status is not used for this Transaction Code
"DATA",9002313.93,687,0)
284^Quantity Intended to be Dispensed is not used for this Trans Code
"DATA",9002313.93,688,0)
285^Days Supply Intended to be Dispensed is not used for this Trans Code
"DATA",9002313.93,689,0)
286^Delay Reason Code is not used for this Transaction Code
"DATA",9002313.93,690,0)
287^Transaction Reference Number is not used for this Transaction Code
"DATA",9002313.93,691,0)
288^Patient Assignment Indicator is not used for this Trans Code
"DATA",9002313.93,692,0)
289^Route of Administration is not used for this Transaction Code
"DATA",9002313.93,693,0)
290^Compound Type is not used for this Transaction Code
"DATA",9002313.93,694,0)
291^Medicaid Subrogation ICN/TCN is not used for this Transaction Code
"DATA",9002313.93,695,0)
292^Pharmacy Service Type is not used for this Transaction Code
"DATA",9002313.93,696,0)
293^Associated Rx/Service Provider ID Qual is not used for this Trans Code
"DATA",9002313.93,697,0)
294^Associated Rx/Service Provider ID is not used for this Trans Code
"DATA",9002313.93,698,0)
295^Associated Rx/Service Ref Num Qual is not used for this Trans Code
"DATA",9002313.93,699,0)
296^Associated Rx/Service Ref Fill Number is not used for this Trans Code
"DATA",9002313.93,700,0)
297^Time of Service is not used for this Transaction Code
"DATA",9002313.93,701,0)
298^Sales Transaction ID is not used for this Transaction Code
"DATA",9002313.93,702,0)
299^Reported Payment Type is not used for this Transaction Code
"DATA",9002313.93,703,0)
300^Provider ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,704,0)
301^Provider ID is not used for this Transaction Code
"DATA",9002313.93,705,0)
302^Prescriber ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,706,0)
303^Prescriber ID is not used for this Transaction Code
"DATA",9002313.93,707,0)
304^Prescriber ID Assoc State/Prov Address not used for this Trans Code
"DATA",9002313.93,708,0)
305^Prescriber Last Name is not used for this Transaction Code
"DATA",9002313.93,709,0)
306^Prescriber Phone Number is not used for this Transaction Code
"DATA",9002313.93,710,0)
307^Primary Care Provider ID Qualifier is not used for this Trans Code
"DATA",9002313.93,711,0)
308^Primary Care Provider ID is not used for this Transaction Code
"DATA",9002313.93,712,0)
309^Primary Care Provider Last Name is not used for this Transaction Code
"DATA",9002313.93,713,0)
310^Prescriber First Name is not used for this Transaction Code
"DATA",9002313.93,714,0)
311^Prescriber Street Address is not used for this Transaction Code
"DATA",9002313.93,715,0)
312^Prescriber City Address is not used for this Transaction Code
"DATA",9002313.93,716,0)
313^Prescriber State/Province Address is not used for this Trans Code
"DATA",9002313.93,717,0)
314^Prescriber ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,718,0)
315^Prescriber Alternate ID Qualifier is not used for this Trans Code
"DATA",9002313.93,719,0)
316^Prescriber Alternate ID is not used for this Transaction Code
"DATA",9002313.93,720,0)
317^Prescriber Alt ID Assoc State/Prov Address not used for this Trans Cd
"DATA",9002313.93,721,0)
318^Other Payer ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,722,0)
319^Other Payer ID is not used for this Transaction Code
"DATA",9002313.93,723,0)
320^Other Payer Date is not used for this Transaction Code
"DATA",9002313.93,724,0)
321^Internal Control Number is not used for this Transaction Code
"DATA",9002313.93,725,0)
322^Other Payer Amount Paid Count is not used for this Transaction Code
"DATA",9002313.93,726,0)
323^Other Payer Amount Paid Qualifier is not used for this Trans Code
"DATA",9002313.93,727,0)
324^Other Payer Amount Paid is not used for this Transaction Code
"DATA",9002313.93,728,0)
325^Other Payer Reject Count is not used for this Transaction Code
"DATA",9002313.93,729,0)
326^Other Payer Reject Code is not used for this Transaction Code
"DATA",9002313.93,730,0)
327^Other Payer-Patient Resp Amount Count is not used for this Trans Code
"DATA",9002313.93,731,0)
328^Other Payer-Patient Resp Amount Qual is not used for this Trans Code
"DATA",9002313.93,732,0)
329^Other Payer-Patient Resp Amount is not used for this Trans Code
"DATA",9002313.93,733,0)
330^Benefit Stage Count is not used for this Transaction Code
"DATA",9002313.93,734,0)
331^Benefit Stage Qualifier is not used for this Transaction Code
"DATA",9002313.93,735,0)
332^Benefit Stage Amount is not used for this Transaction Code
"DATA",9002313.93,736,0)
333^Employer Name is not used for this Transaction Code
"DATA",9002313.93,737,0)
334^Employer Street Address is not used for this Transaction Code
"DATA",9002313.93,738,0)
335^Employer City Address is not used for this Transaction Code
"DATA",9002313.93,739,0)
336^Employer State/Province Address is not used for this Transaction Code
"DATA",9002313.93,740,0)
337^Employer Zip/Postal Code is not used for this Transaction Code
"DATA",9002313.93,741,0)
338^Employer Phone Number is not used for this Transaction Code
"DATA",9002313.93,742,0)
339^Employer Contact Name is not used for this Transaction Code
"DATA",9002313.93,743,0)
340^Carrier ID is not used for this Transaction Code
"DATA",9002313.93,744,0)
341^Claim/Reference ID is not used for this Transaction Code
"DATA",9002313.93,745,0)
342^Billing Entity Type Indicator is not used for this Transaction Code
"DATA",9002313.93,746,0)
343^Pay To Qualifier is not used for this Transaction Code
"DATA",9002313.93,747,0)
344^Pay To ID is not used for this Transaction Code
"DATA",9002313.93,748,0)
345^Pay To Name is not used for this Transaction Code
"DATA",9002313.93,749,0)
346^Pay To Street Address is not used for this Transaction Code
"DATA",9002313.93,750,0)
347^Pay To City Address is not used for this Transaction Code
"DATA",9002313.93,751,0)
348^Pay To State/Province Address is not used for this Transaction Code
"DATA",9002313.93,752,0)
349^Pay To ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,753,0)
350^Generic Equivalent Product ID Qual is not used for this Trans Code
"DATA",9002313.93,754,0)
351^Generic Equivalent Product ID is not used for this Transaction Code
"DATA",9002313.93,755,0)
352^DUR/PPS Code Counter is not used for this Transaction Code
"DATA",9002313.93,756,0)
353^Reason for Service Code is not used for this Transaction Code
"DATA",9002313.93,757,0)
354^Professional Service Code is not used for this Transaction Code
"DATA",9002313.93,758,0)
355^Result of Service Code is not used for this Transaction Code
"DATA",9002313.93,759,0)
356^DUR/PPS Level of Effort is not used for this Transaction Code
"DATA",9002313.93,760,0)
357^DUR Co-Agent ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,761,0)
358^DUR Co-Agent ID is not used for this Transaction Code
"DATA",9002313.93,762,0)
359^Ingredient Cost Submitted is not used for this Transaction Code
"DATA",9002313.93,763,0)
360^Dispensing Fee Submitted is not used for this Transaction Code
"DATA",9002313.93,764,0)
361^Professional Service Fee Submitted is not used for this Trans Code
"DATA",9002313.93,765,0)
362^Patient Paid Amount Submitted is not used for this Transaction Code
"DATA",9002313.93,766,0)
363^Incentive Amount Submitted is not used for this Transaction Code
"DATA",9002313.93,767,0)
364^Other Amount Claimed Submitted Count is not used for this Trans Code
"DATA",9002313.93,768,0)
365^Other Amount Claimed Submitted Qual is not used for this Trans Code
"DATA",9002313.93,769,0)
366^Other Amount Claimed Submitted is not used for this Transaction Code
"DATA",9002313.93,770,0)
367^Flat Sales Tax Amount Submitted is not used for this Transaction Code
"DATA",9002313.93,771,0)
368^Percentage Sales Tax Amount Submitted is not used for this Trans Code
"DATA",9002313.93,772,0)
369^Percentage Sales Tax Rate Submitted is not used for this Trans Code
"DATA",9002313.93,773,0)
370^Percentage Sales Tax Basis Submitted is not used for this Trans Code
"DATA",9002313.93,774,0)
371^Usual and Customary Charge is not used for this Transaction Code
"DATA",9002313.93,775,0)
372^Gross Amount Due is not used for this Transaction Code
"DATA",9002313.93,776,0)
373^Basis of Cost Determination is not used for this Transaction Code
"DATA",9002313.93,777,0)
374^Medicaid Paid Amount is not used for this Transaction Code
"DATA",9002313.93,778,0)
375^Coupon Value Amount is not used for this Transaction Code
"DATA",9002313.93,779,0)
376^Compound Ingredient Drug Cost is not used for this Transaction Code
"DATA",9002313.93,780,0)
377^Compound Ingredient Basis of Cost Determ not used for this Trans Code
"DATA",9002313.93,781,0)
378^Compound Ingredient Modifier Code Count not used for this Trans Code
"DATA",9002313.93,782,0)
379^Compound Ingredient Modifier Code is not used for this Trans Code
"DATA",9002313.93,783,0)
380^Authorized Representative First Name is not used for this Trans Code
"DATA",9002313.93,784,0)
381^Authorized Rep. Last Name is not used for this Transaction Code
"DATA",9002313.93,785,0)
382^Authorized Rep. Street Address is not used for this Transaction Code
"DATA",9002313.93,786,0)
383^Authorized Rep. City is not used for this Transaction Code
"DATA",9002313.93,787,0)
384^Authorized Rep. State/Province is not used for this Transaction Code
"DATA",9002313.93,788,0)
385^Authorized Rep. Zip/Postal Code is not used for this Transaction Code
"DATA",9002313.93,789,0)
386^Prior Authorization Number - Assigned is not used for this Trans Code
"DATA",9002313.93,790,0)
387^Authorization Number is not used for this Transaction Code
"DATA",9002313.93,791,0)
388^Prior Auth Supporting Documentation is not used for this Trans Code
"DATA",9002313.93,792,0)
389^Diagnosis Code Count is not used for this Transaction Code
"DATA",9002313.93,793,0)
390^Diagnosis Code Qualifier is not used for this Transaction Code
"DATA",9002313.93,794,0)
391^Diagnosis Code is not used for this Transaction Code
"DATA",9002313.93,795,0)
392^Clinical Information Counter is not used for this Transaction Code
"DATA",9002313.93,796,0)
393^Measurement Date is not used for this Transaction Code
"DATA",9002313.93,797,0)
394^Measurement Time is not used for this Transaction Code
"DATA",9002313.93,798,0)
395^Measurement Dimension is not used for this Transaction Code
"DATA",9002313.93,799,0)
396^Measurement Unit is not used for this Transaction Code
"DATA",9002313.93,800,0)
397^Measurement Value is not used for this Transaction Code
"DATA",9002313.93,801,0)
398^Request Period Begin Date is not used for this Transaction Code
"DATA",9002313.93,802,0)
399^Request Period Recert/Revised Date is not used for this Trans Code
"DATA",9002313.93,803,0)
400^Request Status is not used for this Transaction Code
"DATA",9002313.93,804,0)
401^Length Of Need Qualifier is not used for this Transaction Code
"DATA",9002313.93,805,0)
402^Length Of Need is not used for this Transaction Code
"DATA",9002313.93,806,0)
403^Prescriber/Supplier Date Signed is not used for this Transaction Code
"DATA",9002313.93,807,0)
404^Supporting Documentation is not used for this Transaction Code
"DATA",9002313.93,808,0)
405^Question Number/Letter Count is not used for this Transaction Code
"DATA",9002313.93,809,0)
406^Question Number/Letter is not used for this Transaction Code
"DATA",9002313.93,810,0)
407^Question Percent Response is not used for this Transaction Code
"DATA",9002313.93,811,0)
408^Question Date Response is not used for this Transaction Code
"DATA",9002313.93,812,0)
409^Question Dollar Amount Response is not used for this Transaction Code
"DATA",9002313.93,813,0)
410^Question Numeric Response is not used for this Transaction Code
"DATA",9002313.93,814,0)
411^Question Alphanumeric Response is not used for this Transaction Code
"DATA",9002313.93,815,0)
412^Facility ID is not used for this Transaction Code
"DATA",9002313.93,816,0)
413^Facility Name is not used for this Transaction Code
"DATA",9002313.93,817,0)
414^Facility Street Address is not used for this Transaction Code
"DATA",9002313.93,818,0)
415^Facility City Address is not used for this Transaction Code
"DATA",9002313.93,819,0)
416^Facility State/Province Address is not used for this Transaction Code
"DATA",9002313.93,820,0)
417^Facility ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,821,0)
418^Purchaser ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,822,0)
419^Purchaser ID is not used for this Transaction Code
"DATA",9002313.93,823,0)
420^Purchaser ID Associated State Code is not used for this Trans Code
"DATA",9002313.93,824,0)
421^Purchaser Date of Birth is not used for this Transaction Code
"DATA",9002313.93,825,0)
422^Purchaser Gender Code is not used for this Transaction Code
"DATA",9002313.93,826,0)
423^Purchaser First Name is not used for this Transaction Code
"DATA",9002313.93,827,0)
424^Purchaser Last Name is not used for this Transaction Code
"DATA",9002313.93,828,0)
425^Purchaser Street Address is not used for this Transaction Code
"DATA",9002313.93,829,0)
426^Purchaser City Address is not used for this Transaction Code
"DATA",9002313.93,830,0)
427^Purchaser State/Province Address is not used for this Transaction Code
"DATA",9002313.93,831,0)
428^Purchaser ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,832,0)
429^Purchaser Country Code is not used for this Transaction Code
"DATA",9002313.93,833,0)
430^Purchaser Relationship Code is not used for this Transaction Code
"DATA",9002313.93,834,0)
431^Released Date is not used for this Transaction Code
"DATA",9002313.93,835,0)
432^Released Time is not used for this Transaction Code
"DATA",9002313.93,836,0)
433^Service Provider Name is not used for this Transaction Code
"DATA",9002313.93,837,0)
434^Service Provider Street Address is not used for this Transaction Code
"DATA",9002313.93,838,0)
435^Service Provider City Address is not used for this Transaction Code
"DATA",9002313.93,839,0)
436^Service Prov State/Province Address is not used for this Trans Code
"DATA",9002313.93,840,0)
437^Service Provider ZIP/Postal Zone is not used for this Transaction Code
"DATA",9002313.93,841,0)
438^Seller ID Qualifier is not used for this Transaction Code
"DATA",9002313.93,842,0)
439^Seller ID is not used for this Transaction Code
"DATA",9002313.93,843,0)
440^Seller Initials is not used for this Transaction Code
"DATA",9002313.93,844,0)
441^Other Amount Claimed Submitted Grouping Incorrect
"DATA",9002313.93,845,0)
442^Other Payer Amount Paid Grouping Incorrect
"DATA",9002313.93,846,0)
443^Other Payer-Patient Responsibility Amount Grouping Incorrect
"DATA",9002313.93,847,0)
444^Benefit Stage Amount Grouping Incorrect
"DATA",9002313.93,848,0)
445^Diagnosis Code Grouping Incorrect
"DATA",9002313.93,849,0)
446^COB/Other Payments Segment Incorrectly Formatted
"DATA",9002313.93,850,0)
447^Additional Documentation Segment Incorrectly Formatted
"DATA",9002313.93,851,0)
448^Clinical Segment Incorrectly Formatted
"DATA",9002313.93,852,0)
449^Patient Segment Incorrectly Formatted
"DATA",9002313.93,853,0)
450^Insurance Segment Incorrectly Formatted
"DATA",9002313.93,854,0)
451^Transaction Header Segment Incorrectly Formatted
"DATA",9002313.93,855,0)
452^Claim Segment Incorrectly Formatted
"DATA",9002313.93,856,0)
453^Pharmacy Provider Segment Incorrectly Formatted
"DATA",9002313.93,857,0)
454^Prescriber Segment Incorrectly Formatted
"DATA",9002313.93,858,0)
455^Workers' Compensation Segment Incorrectly Formatted
"DATA",9002313.93,859,0)
456^Pricing Segment Incorrectly Formatted
"DATA",9002313.93,860,0)
457^Coupon Segment Incorrectly Formatted
"DATA",9002313.93,861,0)
458^Prior Authorization Segment Incorrectly Formatted
"DATA",9002313.93,862,0)
459^Facility Segment Incorrectly Formatted
"DATA",9002313.93,863,0)
460^Narrative Segment Incorrectly Formatted
"DATA",9002313.93,864,0)
461^Purchaser Segment Incorrectly Formatted
"DATA",9002313.93,865,0)
462^Service Provider Segment Incorrectly Formatted
"DATA",9002313.93,866,0)
463^Pharmacy not contracted in Assisted Living Network
"DATA",9002313.93,867,0)
464^Service Provider ID Qualifier Does Not Precede Service Provider ID
"DATA",9002313.93,868,0)
465^Patient ID Qualifier Does Not Precede Patient ID
"DATA",9002313.93,869,0)
466^Rx/Service Ref Number Qualifier Does Not Precede Rx/Service Ref Number
"DATA",9002313.93,870,0)
467^Product/Service ID Qualifier Does Not Precede Product/Service ID
"DATA",9002313.93,871,0)
468^Procedure Modifier Code Count Does Not Precede Procedure Modifier Code
"DATA",9002313.93,872,0)
469^Submission Clarification Cd Cnt Follows Submission Clarification Code
"DATA",9002313.93,873,0)
470^Orig Prscrbd Prod/Serv ID Qual Follows Orig Prscrbd Prod/Serv Code
"DATA",9002313.93,874,0)
471^Oth Amt Claimed Submitted Cnt Follows Oth Amt Claimed Amt And/Or Qual
"DATA",9002313.93,875,0)
472^Other Amt Claimed Submitted Qual Follows Other Amt Claimed Submitted
"DATA",9002313.93,876,0)
473^Provider Id Qualifier Does Not Precede Provider ID
"DATA",9002313.93,877,0)
474^Prescriber Id Qualifier Does Not Precede Prescriber ID
"DATA",9002313.93,878,0)
475^Primary Care Prov ID Qual Does Not Precede Primary Care Provider ID
"DATA",9002313.93,879,0)
476^COB/Other Payments Count Does Not Precede Other Payer Coverage Type
"DATA",9002313.93,880,0)
477^Other Payer ID Count Does Not Precede Other Payer ID Data Fields
"DATA",9002313.93,881,0)
478^Other Payer ID Qualifier Does Not Precede Other Payer ID
"DATA",9002313.93,882,0)
479^Other Payer Amt Paid Count Follows Other Payer Amt Paid And/Or Qual
"DATA",9002313.93,883,0)
480^Other Payer Amount Paid Qual Does Not Precede Other Payer Amount Paid
"DATA",9002313.93,884,0)
481^Other Payer Reject Count Does Not Precede Other Payer Reject Code
"DATA",9002313.93,885,0)
482^Oth Payer-Pat Resp Amt Cnt Follows Oth Payer-Pat Resp Amt and/or Qual
"DATA",9002313.93,886,0)
483^Other Payer-Patient Resp Amt Qual Follows Other Payer-Patient Resp Amt
"DATA",9002313.93,887,0)
484^Benefit Stage Count Does Not Precede Benefit Stage Amount and/or Qual
"DATA",9002313.93,888,0)
485^Benefit Stage Qualifier Does Not Precede Benefit Stage Amount
"DATA",9002313.93,889,0)
486^Pay To Qualifier Does Not Precede Pay To ID
"DATA",9002313.93,890,0)
487^Generic Equivalent Prod Id Qual Follows Generic Equivalent Prod Id
"DATA",9002313.93,891,0)
488^DUR/PPS Code Counter Does Not Precede DUR Data Fields
"DATA",9002313.93,892,0)
489^DUR Co-Agent ID Qualifier Does Not Precede DUR Co-Agent ID
"DATA",9002313.93,893,0)
490^Compound Ingredient Component Cnt Follows Compound Prod ID And/Or Qual
"DATA",9002313.93,894,0)
491^Compound Product ID Qualifier Does Not Precede Compound Product ID
"DATA",9002313.93,895,0)
492^Compound Ingredient Mod Code Cnt Follows Compound Ingredient Mod Code
"DATA",9002313.93,896,0)
493^Diagnosis Code Count Does Not Precede Diagnosis Code And/Or Qualifier
"DATA",9002313.93,897,0)
494^Diagnosis Code Qualifier Does Not Precede Diagnosis Code
"DATA",9002313.93,898,0)
495^Clinical Info Counter Does Not Precede Clinical Measurement data
"DATA",9002313.93,899,0)
496^Length Of Need Qualifier Does Not Precede Length Of Need
"DATA",9002313.93,900,0)
497^Question Number/Letter Count Does Not Precede Question Number/Letter
"DATA",9002313.93,901,0)
498^Accumulator Month Count Does Not Precede Accumulator Month
"DATA",9002313.93,902,0)
499^Address Count Does Not Precede Address Data Fields
"DATA",9002313.93,903,0)
500^Patient ID Qualifier Count Does Not Precede Patient ID Data Fields
"DATA",9002313.93,904,0)
501^Prescriber ID Count Does Not Precede Prescriber ID Data Fields
"DATA",9002313.93,905,0)
502^Prescriber Specialty Count Does Not Precede Prescriber Specialty
"DATA",9002313.93,906,0)
503^Telephone Number Count Does Not Precede Telephone Number Data Fields
"DATA",9002313.93,907,0)
504^Benefit Stage Qualifier Value Not Supported
"DATA",9002313.93,908,0)
505^Other Payer Coverage Type Value Not Supported
"DATA",9002313.93,909,0)
506^Prescription/Service Reference Number Qualifier Value Not Supported
"DATA",9002313.93,910,0)
507^Additional Documentation Type ID Value Not Supported
"DATA",9002313.93,911,0)
508^Authorized Representative State/Province Address Value Not Supported
"DATA",9002313.93,912,0)
509^Basis Of Request Value Not Supported
"DATA",9002313.93,913,0)
510^Billing Entity Type Indicator Value Not Supported
"DATA",9002313.93,914,0)
511^CMS Part D Defined Qualified Facility Value Not Supported
"DATA",9002313.93,915,0)
512^Compound Code Value Not Supported
"DATA",9002313.93,916,0)
513^Compound Dispensing Unit Form Indicator Value Not Supported
"DATA",9002313.93,917,0)
514^Compound Ingredient Basis of Cost Determination Value Not Supported
"DATA",9002313.93,918,0)
515^Compound Product ID Qualifier Value Not Supported
"DATA",9002313.93,919,0)
516^Compound Type Value Not Supported
"DATA",9002313.93,920,0)
517^Coupon Type Value Not Supported
"DATA",9002313.93,921,0)
518^DUR Co-Agent ID Qualifier Value Not Supported
"DATA",9002313.93,922,0)
519^DUR/PPS Level Of Effort Value Not Supported
"DATA",9002313.93,923,0)
520^Delay Reason Code Value Not Supported
"DATA",9002313.93,924,0)
521^Diagnosis Code Qualifier Value Not Supported
"DATA",9002313.93,925,0)
522^Dispensing Status Value Not Supported
"DATA",9002313.93,926,0)
523^Eligibility Clarification Code Value Not Supported
"DATA",9002313.93,927,0)
524^Employer State/Province Address Value Not Supported
"DATA",9002313.93,928,0)
525^Facility State/Province Address Value Not Supported
"DATA",9002313.93,929,0)
526^Header Response Status Value Not Supported
"DATA",9002313.93,930,0)
527^Intermediary Authorization Type ID Value Not Supported
"DATA",9002313.93,931,0)
528^Length of Need Qualifier Value Not Supported
"DATA",9002313.93,932,0)
529^Level Of Service Value Not Supported
"DATA",9002313.93,933,0)
530^Measurement Dimension Value Not Supported
"DATA",9002313.93,934,0)
531^Measurement Unit Value Not Supported
"DATA",9002313.93,935,0)
532^Medicaid Indicator Value Not Supported
"DATA",9002313.93,936,0)
533^Originally Prescribed Product/Service ID Qualifier Value Not Supported
"DATA",9002313.93,937,0)
534^Other Amount Claimed Submitted Qualifier Value Not Supported
"DATA",9002313.93,938,0)
535^Other Coverage Code Value Not Supported
"DATA",9002313.93,939,0)
536^Other Payer-Patient Responsibility Amount Qual Value Not Supported
"DATA",9002313.93,940,0)
537^Patient Assignment Indicator Value Not Supported
"DATA",9002313.93,941,0)
538^Patient Gender Code Value Not Supported
"DATA",9002313.93,942,0)
539^Patient State/Province Address Value Not Supported
"DATA",9002313.93,943,0)
540^Pay to State/Province Address Value Not Supported
"DATA",9002313.93,944,0)
541^Percentage Sales Tax Basis Submitted Value Not Supported
"DATA",9002313.93,945,0)
542^Pregnancy Indicator Value Not Supported
"DATA",9002313.93,946,0)
543^Prescriber ID Qualifier Value Not Supported
"DATA",9002313.93,947,0)
544^Prescriber State/Province Address Value Not Supported
"DATA",9002313.93,948,0)
545^Prescription Origin Code Value Not Supported
"DATA",9002313.93,949,0)
546^Primary Care Provider ID Qualifier Value Not Supported
"DATA",9002313.93,950,0)
547^Prior Authorization Type Code Value Not Supported
"DATA",9002313.93,951,0)
548^Provider Accept Assignment Indicator Value Not Supported
"DATA",9002313.93,952,0)
549^Provider ID Qualifier Value Not Supported
"DATA",9002313.93,953,0)
550^Request Status Value Not Supported
"DATA",9002313.93,954,0)
551^Request Type Value Not Supported
"DATA",9002313.93,955,0)
552^Route of Administration Value Not Supported
"DATA",9002313.93,956,0)
553^Smoker/Non-Smoker Code Value Not Supported
"DATA",9002313.93,957,0)
554^Special Packaging Indicator Value Not Supported
"DATA",9002313.93,958,0)
555^Transaction Count Value Not Supported
"DATA",9002313.93,959,0)
556^Unit Of Measure Value Not Supported
"DATA",9002313.93,960,0)
557^COB Segment Present On A Non-COB Claim
"DATA",9002313.93,961,0)
7F^Future date not allowed for Date of Birth
"DATA",9002313.93,962,0)
A1^ID Submitted is associated with a Sanctioned Prescriber
"DATA",9002313.93,963,0)
A2^ID Submitted is associated to a Deceased Prescriber
"DATA",9002313.93,964,0)
TF^M/I Technician Initials
"DATA",9002313.93,965,0)
X0^M/I Associated Prescription/Service Fill Number
"DATA",9002313.93,966,0)
XZ^M/I Associated Prescription/Service Reference Number Qualifier
"DATA",9002313.93,967,0)
Y0^M/I Purchaser Last Name
"DATA",9002313.93,968,0)
Y1^M/I Purchaser Street Address
"DATA",9002313.93,969,0)
Y2^M/I Purchaser City Address
"DATA",9002313.93,970,0)
Y3^M/I Purchaser State/Province Code
"DATA",9002313.93,971,0)
Y4^M/I Purchaser Zip/Postal Code
"DATA",9002313.93,972,0)
Y5^M/I Purchaser Country Code
"DATA",9002313.93,973,0)
Y6^M/I Time of Service
"DATA",9002313.93,974,0)
Y7^M/I Associated Prescription/Service Provider ID Qualifier
"DATA",9002313.93,975,0)
Y8^M/I Associated Prescription/Service Provider ID
"DATA",9002313.93,976,0)
Y9^M/I Seller ID
"DATA",9002313.93,977,0)
YK^M/I Service Provider Name
"DATA",9002313.93,978,0)
YM^M/I Service Provider Street Address
"DATA",9002313.93,979,0)
YN^M/I Service Provider City Address
"DATA",9002313.93,980,0)
YP^M/I Service Provider State/Province Code Address
"DATA",9002313.93,981,0)
YQ^M/I Service Provider Zip/Postal Code
"DATA",9002313.93,982,0)
YR^M/I Patient ID Associated State/Province Address
"DATA",9002313.93,983,0)
YS^M/I Purchaser Relationship Code
"DATA",9002313.93,984,0)
YT^M/I Seller Initials
"DATA",9002313.93,985,0)
YU^M/I Purchaser ID Qualifier
"DATA",9002313.93,986,0)
YV^M/I Purchaser ID
"DATA",9002313.93,987,0)
YW^M/I Purchaser ID Associated State/Province Code
"DATA",9002313.93,988,0)
YX^M/I Purchaser Date of Birth
"DATA",9002313.93,989,0)
YY^M/I Purchaser Gender Code
"DATA",9002313.93,990,0)
YZ^M/I Purchaser First Name
"DATA",9002313.93,991,0)
Z0^Purchaser Country Code Value Not Supported For Processor/Payer
"DATA",9002313.93,992,0)
Z1^Prescriber Alternate ID Qualifier Value Not Supported
"DATA",9002313.93,993,0)
Z2^M/I Purchaser Segment
"DATA",9002313.93,994,0)
Z3^Purchaser Segment Present On A Non-Controlled Sub Reporting Trans
"DATA",9002313.93,995,0)
Z4^Purchaser Segment Required On A Controlled Substance Reporting Trans
"DATA",9002313.93,996,0)
Z5^M/I Service Provider Segment
"DATA",9002313.93,997,0)
Z6^Service Prov Segment Present On A non-Controlled Sub Reporting Trans
"DATA",9002313.93,998,0)
Z7^Service Provider Segment Required On A Controlled Sub Reporting Trans
"DATA",9002313.93,999,0)
Z8^Purchaser Relationship Code Value Not Supported
"DATA",9002313.93,1000,0)
Z9^Prescriber Alternate ID Not Covered
"DATA",9002313.93,1001,0)
ZB^M/I Seller ID Qualifier
"DATA",9002313.93,1002,0)
ZC^Assoc Rx/Service Prov ID Qual Value Not Supported For Processor/Payer
"DATA",9002313.93,1003,0)
ZD^Associated Rx/Service Reference Number Qualifier Value Not Supported
"DATA",9002313.93,1004,0)
ZF^M/I Sales Transaction ID
"DATA",9002313.93,1005,0)
ZK^M/I Prescriber ID Associated State/Province Address
"DATA",9002313.93,1006,0)
ZM^M/I Prescriber Alternate ID Qualifier
"DATA",9002313.93,1007,0)
ZN^Purchaser ID Qualifier Value Not Supported For Processor/Payer
"DATA",9002313.93,1008,0)
ZP^M/I Prescriber Alternate ID
"DATA",9002313.93,1009,0)
ZQ^M/I Prescriber Alternate ID Associated State/Province Address
"DATA",9002313.93,1010,0)
ZS^M/I Reported Payment Type
"DATA",9002313.93,1011,0)
ZT^M/I Released Date
"DATA",9002313.93,1012,0)
ZU^M/I Released Time
"DATA",9002313.93,1013,0)
ZV^Reported Payment Type Value Not Supported
"DATA",9002313.93,1014,0)
ZW^M/I Compound Preparation Time
"DATA",9002313.93,1015,0)
ZX^M/I CMS Part D Contract ID
"DATA",9002313.93,1016,0)
ZY^M/I Medicare Part D Plan Benefit Package (PBP)
"DATA",9002313.93,1017,0)
ZZ^Cardholder ID submitted is inactive. New Cardholder ID on file
"DATA",9002313.93,1018,0)
eC^CHAMPVA-DRUG NON BILLABLE
"DATA",9002313.93,1019,0)
569^Provide Notice: Medicare Prescription Drug Coverage and Your Rights
"DATA",9002313.93,1020,0)
597^LTC Dispensing Type Does Not Support The Packaging Type
"DATA",9002313.93,1021,0)
558^Part D Plan cannot coordinate benefits with another Part D Plan
"DATA",9002313.93,1022,0)
559^ID Submitted is associated with a Sanctioned Pharmacy
"DATA",9002313.93,1023,0)
560^Pharmacy Not Contracted in Retail Network
"DATA",9002313.93,1024,0)
561^Pharmacy Not Contracted in Mail Order Network
"DATA",9002313.93,1025,0)
562^Pharmacy Not Contracted in Hospice Network
"DATA",9002313.93,1026,0)
563^Pharmacy Not Contracted in Veterans Administration Network
"DATA",9002313.93,1027,0)
564^Pharmacy Not Contracted in Military Network
"DATA",9002313.93,1028,0)
565^Patient Country Code Value Not Supported
"DATA",9002313.93,1029,0)
566^Patient Country Code Not Used For This Transaction
"DATA",9002313.93,1030,0)
567^M/I Veterinary Use Indicator
"DATA",9002313.93,1031,0)
568^Veterinary Use Indicator Value Not Supported
"DATA",9002313.93,1032,0)
570^Veterinary Use Indicator Not Used For This Transaction
"DATA",9002313.93,1033,0)
571^Patient ID Associated State/Province Address Value Not Supported
"DATA",9002313.93,1034,0)
572^Medigap ID Not Covered
"DATA",9002313.93,1035,0)
573^Prescriber Alt ID Assoc State/Province Address Value Not Supported
"DATA",9002313.93,1036,0)
574^Compound Ingredient Modifier Code Not Covered
"DATA",9002313.93,1037,0)
575^Purchaser State/Province Address Value Not Supported
"DATA",9002313.93,1038,0)
576^Service Provider State/Province Address Value Not Supported
"DATA",9002313.93,1039,0)
577^M/I Other Payer ID
"DATA",9002313.93,1040,0)
578^Other Payer ID Count Does Not Match Number of Repetitions
"DATA",9002313.93,1041,0)
579^Other Payer ID Count Exceeds Number Of Occurrences Supported
"DATA",9002313.93,1042,0)
580^Other Payer ID Count Grouping Incorrect
"DATA",9002313.93,1043,0)
581^Other Payer ID Count is not used for this Transaction Code
"DATA",9002313.93,1044,0)
582^M/I Fill Number
"DATA",9002313.93,1045,0)
583^Provider ID Not Covered
"DATA",9002313.93,1046,0)
584^Purchaser ID Associated State/Province Code Value Not Supported
"DATA",9002313.93,1047,0)
585^Fill Number Value Not Supported
"DATA",9002313.93,1048,0)
586^Facility ID Not Covered
"DATA",9002313.93,1049,0)
587^Carrier ID Not Covered
"DATA",9002313.93,1050,0)
588^Alternate ID Not Covered
"DATA",9002313.93,1051,0)
589^Patient ID Not Covered
"DATA",9002313.93,1052,0)
590^Compound Dosage Form Not Covered
"DATA",9002313.93,1053,0)
591^Plan ID Not Covered
"DATA",9002313.93,1054,0)
592^DUR Co-Agent ID Not Covered
"DATA",9002313.93,1055,0)
593^M/I Date of Service
"DATA",9002313.93,1056,0)
594^Pay To ID Not Covered
"DATA",9002313.93,1057,0)
595^Associated Prescription/Service Provider ID Not Covered
"DATA",9002313.93,1058,0)
596^Compound Preparation Time Not Used For This Transaction Code
"DATA",9002313.93,1059,0)
598^More Than One Patient Found
"DATA",9002313.93,1060,0)
599^Cardholder ID Matched But Last Name Did Not
"DATA",9002313.93,1061,0)
600^Coverage Outside Submitted Date Of Service
"DATA",9002313.93,1062,0)
601^Intermediary Auth Type ID Does Not Precede Intermediary Auth ID
"DATA",9002313.93,1063,0)
602^Assoc Rx/Serv Prov ID Qual Does Not Precede Assoc Rx/Service Prov ID
"DATA",9002313.93,1064,0)
603^Prescriber Alternate ID Qual Does Not Precede Prescriber Alternate ID
"DATA",9002313.93,1065,0)
604^Purchaser ID Qualifier Does Not Precede Purchaser ID
"DATA",9002313.93,1066,0)
605^Seller ID Qualifier Does Not Precede Seller ID
"DATA",9002313.93,1067,0)
606^Brand Drug/Specific Labeler Code Required
"DATA",9002313.93,1068,0)
607^Info Reporting (N1/N3) Trans Cannot Be Matched To A Claim (B1/B3)
"DATA",9002313.93,1069,0)
608^Step Therapy/Alt Drug Therapy Req'd Prior To Submitted Prod Serv ID
"DATA",9002313.93,1070,0)
609^COB Claim Not Required, Patient Liability Amount Submitted Was Zero
"DATA",9002313.93,1071,0)
610^Info Reporting Trans Matched to Reversed/Rejected Claim Under Part D
"DATA",9002313.93,1072,0)
611^Supp Claim Was Matched To A Claim Covered By A Benefit Oth Than Part D
"DATA",9002313.93,1073,0)
612^LTC Appropriate Dispensing Invalid Submission Clarification Code Combo
"DATA",9002313.93,1074,0)
613^Packaging Methodology Or Dispensing Frequency M/I For LTC Short Cycle
"DATA",9002313.93,1075,0)
614^Uppercase Character(s) Required
"DATA",9002313.93,1076,0)
615^Basis Of Cost Determ Value 14 Req'd When Compound Ing Qty 0, Cost>$0
"DATA",9002313.93,1077,0)
616^Submission Clarification Code 8 Req'd When Compound Ingredient Qty 0
"DATA",9002313.93,1078,0)
617^Compound Ingredient Drug Cost Cannot Be Negative Amount
"DATA",9002313.93,1079,0)
618^Submitted Prescriber's DEA Does Not Allow This Drug DEA Schedule
"DATA",9002313.93,1080,0)
619^Prescriber Type 1 NPI Required
"DATA",9002313.93,1081,0)
620^This Product/Service May Be Covered Under Medicare Part D
"DATA",9002313.93,1082,0)
621^This Medicaid Patient Is Medicare Eligible
"DATA",9002313.93,1083,0)
645^Repackaged product is not covered by the contract
"DATA",9002313.93,1084,0)
646^Pat Not Eligible Due To Non Payment Of Premium. Pat To Contact Plan
"DATA",9002313.93,1085,0)
647^Quantity Prescribed Required For CII Prescription
"DATA",9002313.93,1086,0)
648^Qty Prescribed Doesn't Match Qty Prescribed On Original CII Dispensing
"DATA",9002313.93,1087,0)
649^Cumulative Quantity For This CII Rx Number Exceeds Quantity Prescribed
"DATA",9002313.93,1088,0)
650^Fill Date Greater Than 60 Days From CII Date Rx Written (414-DE)
"DATA",9002313.93,1089,0)
1K^M/I Patient Country Code
"DATA",9002313.93,1090,0)
622^COB Claim not required, patient liability amount submitted was zero
"DATA",9002313.93,1091,0)
623^M/I Authorized Representative Country Code
"DATA",9002313.93,1092,0)
624^M/I Employer Country Code
"DATA",9002313.93,1093,0)
625^M/I Entity Country Code
"DATA",9002313.93,1094,0)
627^M/I Facility Country Code
"DATA",9002313.93,1095,0)
628^M/I Patient ID Associated Country Code
"DATA",9002313.93,1096,0)
629^M/I Pay to Country Code
"DATA",9002313.93,1097,0)
630^M/I Prescriber Alternate ID Associated Country Code
"DATA",9002313.93,1098,0)
631^M/I Prescriber ID Associated Country Code
"DATA",9002313.93,1099,0)
632^M/I Prescriber Country Code
"DATA",9002313.93,1100,0)
633^M/I Purchaser ID Associated Country Code
"DATA",9002313.93,1101,0)
634^Authorized Representative Country Code Value Not Supported
"DATA",9002313.93,1102,0)
635^M/I Employer Country Code Value Not Supported
"DATA",9002313.93,1103,0)
637^M/I Entity Country Code Value Not Supported
"DATA",9002313.93,1104,0)
638^M/I Facility Country Code Value Not Supported
"DATA",9002313.93,1105,0)
639^M/I Patient ID Associated Country Code Value Not Supported
"DATA",9002313.93,1106,0)
640^M/I Pay to Country Code Value Not Supported
"DATA",9002313.93,1107,0)
641^M/I Prescriber Alt ID Associated Country Code Value Not Supported
"DATA",9002313.93,1108,0)
642^M/I Prescriber ID Associated Country Code Value Not Supported
"DATA",9002313.93,1109,0)
643^M/I Prescriber Country Code Value Not Supported
"DATA",9002313.93,1110,0)
644^M/I Purchaser ID Associated Country Code Value Not Supported
"DATA",9002313.93,1111,0)
651^REMS: Mandatory data element(s) missing
"DATA",9002313.93,1112,0)
652^REMS: Prescriber not matched or may not be enrolled
"DATA",9002313.93,1113,0)
653^REMS: Patient not matched or may not be enrolled
"DATA",9002313.93,1114,0)
654^REMS: Pharmacy not matched or may not be enrolled
"DATA",9002313.93,1115,0)
655^REMS: Multiple patient matches
"DATA",9002313.93,1116,0)
656^REMS: Patient age not matched
"DATA",9002313.93,1117,0)
657^REMS: Patient gender not matched
"DATA",9002313.93,1118,0)
658^REMS: Pharmacy has not enrolled
"DATA",9002313.93,1119,0)
659^REMS: Pharmacy has not renewed enrollment
"DATA",9002313.93,1120,0)
660^REMS: Pharmacy has not submitted agreement form
"DATA",9002313.93,1121,0)
661^REMS: Pharmacy has been suspended due to non-compliance
"DATA",9002313.93,1122,0)
662^REMS: Prescriber has not enrolled
"DATA",9002313.93,1123,0)
663^REMS: Prescriber has not completed a knowledge assessment
"DATA",9002313.93,1124,0)
664^REMS: Prescriber has been suspended due to non-compliance
"DATA",9002313.93,1125,0)
665^REMS: Excessive days supply
"DATA",9002313.93,1126,0)
666^REMS: Insufficient days supply
"DATA",9002313.93,1127,0)
667^REMS: Excessive dosage
"DATA",9002313.93,1128,0)
668^REMS: Insufficient dosage
"DATA",9002313.93,1129,0)
669^REMS: Refills not permitted
"DATA",9002313.93,1130,0)
670^REMS: Laboratory test results not documented
"DATA",9002313.93,1131,0)
671^REMS: Laboratory test not conducted within specified time period
"DATA",9002313.93,1132,0)
672^REMS: Dispensing not authorized due to laboratory test results
"DATA",9002313.93,1133,0)
673^REMS: Prescriber counseling of patient not documented
"DATA",9002313.93,1134,0)
674^REMS: Prescriber has not documented safe use conditions
"DATA",9002313.93,1135,0)
675^REMS: Prescriber has not documented patient opioid tolerance
"DATA",9002313.93,1136,0)
676^REMS: Prescriber has not documented patient contraceptive use
"DATA",9002313.93,1137,0)
677^REMS: Lack of contraindicated therapy not documented
"DATA",9002313.93,1138,0)
678^REMS: Step therapy not documented
"DATA",9002313.93,1139,0)
679^REMS: Prescriber has not enrolled patient
"DATA",9002313.93,1140,0)
680^REMS: Prescriber must renew patient enrollment
"DATA",9002313.93,1141,0)
681^REMS: Patient enrollment requirements have not been met
"DATA",9002313.93,1142,0)
682^REMS: Prescriber has not submitted patient agreement
"DATA",9002313.93,1143,0)
683^REMS: Prescriber has not verified patient's reproductive potential
"DATA",9002313.93,1144,0)
684^REMS: Patient has not documented safe use conditions
"DATA",9002313.93,1145,0)
685^REMS: Patient has not documented completed education
"DATA",9002313.93,1146,0)
686^REMS: Patient has not documented contraceptive use
"DATA",9002313.93,1147,0)
687^REMS Administrator Denied
"DATA",9002313.93,1148,0)
688^REMS: Service Billing Denied
"DATA",9002313.93,1149,0)
689^PDMP Administrator Denied
"DATA",9002313.93,1150,0)
690^PDMP: Pharmacy not contracted
"DATA",9002313.93,1151,0)
691^PDMP: Pharmacy contract not renewed
"DATA",9002313.93,1152,0)
692^PDMP: M/I Patient First Name
"DATA",9002313.93,1153,0)
693^PDMP: M/I Patient Last Name
"DATA",9002313.93,1154,0)
694^PDMP: M/I Patient Street Address
"DATA",9002313.93,1155,0)
695^PDMP: M/I Patient City
"DATA",9002313.93,1156,0)
696^PDMP: M/I Patient State or Province
"DATA",9002313.93,1157,0)
697^PDMP: M/I Patient ZIP/Postal Code
"DATA",9002313.93,1158,0)
698^PDMP: M/I Prescriber ID
"DATA",9002313.93,1159,0)
699^PDMP: M/I Prescriber Last Name
"DATA",9002313.93,1160,0)
700^PDMP: M/I Patient ID
"DATA",9002313.93,1161,0)
701^PDMP: M/I Patient Date of Birth
"DATA",9002313.93,1162,0)
702^PDMP: M/I Patient Gender
"DATA",9002313.93,1163,0)
703^PDMP: M/I Prescription Origin Code
"DATA",9002313.93,1164,0)
704^PDMP: M/I Scheduled Rx Serial Number
"DATA",9002313.93,1165,0)
705^PDMP: M/I Product/Service ID
"DATA",9002313.93,1166,0)
706^PDMP: M/I Compound Code
"DATA",9002313.93,1167,0)
707^PDMP: M/I Patient Phone Number
"DATA",9002313.93,1168,0)
708^PDMP: M/I Payment Code
"DATA",9002313.93,1169,0)
709^M/I Record Type
"DATA",9002313.93,1170,0)
710^Date Received After Requested Response Date
"DATA",9002313.93,1171,0)
711^M/I Transmission Date
"DATA",9002313.93,1172,0)
712^M/I Sending Entity Identifier
"DATA",9002313.93,1173,0)
713^M/I Receiver ID
"DATA",9002313.93,1174,0)
714^M/I Transmission File Type
"DATA",9002313.93,1175,0)
715^M/I Transmission Type
"DATA",9002313.93,1176,0)
716^Transmission File Type Not Supported
"DATA",9002313.93,1177,0)
717^M/I Submission Number
"DATA",9002313.93,1178,0)
718^M/I Audit Request Type
"DATA",9002313.93,1179,0)
719^Audit Request Type Not Supported
"DATA",9002313.93,1180,0)
720^M/I Service Provider Chain Code
"DATA",9002313.93,1181,0)
721^M/I Entity Name
"DATA",9002313.93,1182,0)
722^M/I Entity Contact First Name
"DATA",9002313.93,1183,0)
723^M/I Entity Contact Last Name
"DATA",9002313.93,1184,0)
724^M/I Entity Address Line 1
"DATA",9002313.93,1185,0)
725^M/I Entity Address Line 2
"DATA",9002313.93,1186,0)
726^M/I Entity City
"DATA",9002313.93,1187,0)
727^M/I Entity State/Province Address
"DATA",9002313.93,1188,0)
728^M/I Entity Zip/Postal Code
"DATA",9002313.93,1189,0)
729^M/I Entity Fax Number
"DATA",9002313.93,1190,0)
730^M/I Entity Email
"DATA",9002313.93,1191,0)
731^Header Response Status Not Supported for this Transmission File Type
"DATA",9002313.93,1192,0)
732^Reject Code Not Supported for this Transmission File Type
"DATA",9002313.93,1193,0)
733^M/I Claim Sequence Number
"DATA",9002313.93,1194,0)
734^M/I Audit Control Identification
"DATA",9002313.93,1195,0)
735^M/I Audit Range Qualifier
"DATA",9002313.93,1196,0)
736^Audit Range Qualifier Not Supported for this Audit Request Type
"DATA",9002313.93,1197,0)
737^M/I Audit Range Start
"DATA",9002313.93,1198,0)
738^Audit Range Start Not Supported for this Audit Request Type
"DATA",9002313.93,1199,0)
739^M/I Audit Range End
"DATA",9002313.93,1200,0)
740^Audit Range End Not Supported for this Audit Request Type
"DATA",9002313.93,1201,0)
741^Exceeds Range Start Limitations
"DATA",9002313.93,1202,0)
742^Exceeds Range End Limitations
"DATA",9002313.93,1203,0)
743^M/I Requested Response Date
"DATA",9002313.93,1204,0)
744^Response Date Requires Rescheduling
"DATA",9002313.93,1205,0)
745^M/I Estimated Arrival Time Description
"DATA",9002313.93,1206,0)
746^Estimated Arrival Time Requires Rescheduling
"DATA",9002313.93,1207,0)
747^M/I Audit Sponsor
"DATA",9002313.93,1208,0)
748^Non-Matched Processor Control Number
"DATA",9002313.93,1209,0)
749^M/I Audit Element Type 1
"DATA",9002313.93,1210,0)
750^M/I Audit Element Type 2
"DATA",9002313.93,1211,0)
751^M/I Audit Element Type 3
"DATA",9002313.93,1212,0)
752^M/I Audit Element Type 4
"DATA",9002313.93,1213,0)
753^M/I Audit Element Type 5
"DATA",9002313.93,1214,0)
754^Audit Element Type not allowable per State Regulation
"DATA",9002313.93,1215,0)
755^Audit Element Type not required for dispensing
"DATA",9002313.93,1216,0)
756^M/I Audit Element Response Type 1
"DATA",9002313.93,1217,0)
757^M/I Audit Element Response Type 2
"DATA",9002313.93,1218,0)
758^M/I Audit Element Response Type 3
"DATA",9002313.93,1219,0)
759^M/I Audit Element Response Type 4
"DATA",9002313.93,1220,0)
760^M/I Audit Element Response Type 5
"DATA",9002313.93,1221,0)
761^M/I Discrepancy Code 1
"DATA",9002313.93,1222,0)
762^M/I Discrepancy Code 2
"DATA",9002313.93,1223,0)
763^M/I Discrepancy Code 3
"DATA",9002313.93,1224,0)
764^M/I Discrepancy Message
"DATA",9002313.93,1225,0)
765^M/I Discrepancy Amount
"DATA",9002313.93,1226,0)
766^Discrepancy Amount in excess of Claimed Amount
"DATA",9002313.93,1227,0)
767^M/I Record Count
"DATA",9002313.93,1228,0)
768^Pharmacy Location has closed
"DATA",9002313.93,1229,0)
769^Medicare PartD Pd claim found, Info Report Reversal/Rebill not matched
"DATA",9002313.93,1230,0)
770^Medicare Part D Pd claim not found, Info Report Reversal not processed
"DATA",9002313.93,1231,0)
771^Compound contains unidentifiable ingredient; SCC override not allowed
"DATA",9002313.93,1232,0)
772^Compound not payable due to non-covered ingredient;no override allowed
"DATA",9002313.93,1233,0)
773^Prescriber Is Not Listed On Medicare Enrollment File
"DATA",9002313.93,1234,0)
774^Prescriber Medicare Enrollment Period Is Outside Of Claim Date Of Serv
"DATA",9002313.93,1235,0)
775^Pharmacy not listed within Medicare Fee For Service enrollment file
"DATA",9002313.93,1236,0)
776^Pharmacy enrollment with Medicare Fee For Service has terminated
"DATA",9002313.93,1237,0)
777^Plan's Prescriber data base not able to verify active state license
"DATA",9002313.93,1238,0)
778^Invalid Transmission File Type
"DATA",9002313.93,1239,0)
779^Invalid Document Reference Number
"DATA",9002313.93,1240,0)
780^M/I Transmission Time
"DATA",9002313.93,1241,0)
781^Corrupted Transmission Control Number
"DATA",9002313.93,1242,0)
782^M/I Sender ID
"DATA",9002313.93,1243,0)
783^M/I Receiver ID
"DATA",9002313.93,1244,0)
784^M/I File Type
"DATA",9002313.93,1245,0)
785^M/I Submission Number
"DATA",9002313.93,1246,0)
786^M/I Transmission Date
"DATA",9002313.93,1247,0)
787^M/I Accumulator Balance Count
"DATA",9002313.93,1248,0)
788^M/I Accumulator Network Indicator
"DATA",9002313.93,1249,0)
789^M/I Accumulator Action Code
"DATA",9002313.93,1250,0)
790^M/I Benefit Type
"DATA",9002313.93,1251,0)
791^M/I In Network Status
"DATA",9002313.93,1252,0)
792^Duplicate Record
"DATA",9002313.93,1253,0)
793^Retry Limit Exceeded
"DATA",9002313.93,1254,0)
794^Deductible Over Accumulated
"DATA",9002313.93,1255,0)
795^Out Of Pocked Over Accumulated
"DATA",9002313.93,1256,0)
796^Maximum Benefit Amount (CAP) Over Accumulated
"DATA",9002313.93,1257,0)
797^Corrupted Transmission Control Number
"DATA",9002313.93,1258,0)
798^SA Over Accumulated
"DATA",9002313.93,1259,0)
799^LTC Over Accumulated
"DATA",9002313.93,1260,0)
800^RXC Over Accumulated
"DATA",9002313.93,1261,0)
801^M/I Total Amount Paid
"DATA",9002313.93,1262,0)
802^M/I Amount of Copay
"DATA",9002313.93,1263,0)
803^M/I Patient Pay Amount
"DATA",9002313.93,1264,0)
804^M/I Amount Attributed to Product Selection/Brand
"DATA",9002313.93,1265,0)
805^M/I Amount Attributed to Sales Tax
"DATA",9002313.93,1266,0)
806^M/I Amount Attributed to Process Fee
"DATA",9002313.93,1267,0)
807^M/I Invoiced Amount
"DATA",9002313.93,1268,0)
808^M/I Penalty Amount
"DATA",9002313.93,1269,0)
809^Mismatched Original Authorization
"DATA",9002313.93,1270,0)
810^M/I Partner Eligibility Data
"DATA",9002313.93,1271,0)
811^Partner Eligibility Mismatch
"DATA",9002313.93,1272,0)
812^M/I Record Length
"DATA",9002313.93,1273,0)
813^M/I Action Code
"DATA",9002313.93,1274,0)
814^Not Supported Accumulator Action Code
"DATA",9002313.93,1275,0)
815^Balance Mismatch
"DATA",9002313.93,1276,0)
816^Pharmacy Benefit Exclusion, May Be Covered Under Pt's Medical Benefit
"DATA",9002313.93,1277,0)
817^Pharmacy Benefit Exclusion, Covered Under Patient's Medical Benefit
"DATA",9002313.93,1278,0)
818^Medication Administration Not Covered, Plan Benefit Exclusion
"DATA",9002313.93,1279,0)
819^Plan Enrollment File Indicates Medicare As Primary Coverage
"DATA",9002313.93,1280,0)
820^Info Reporting Trans mtchd to Rev/Rej Clm not Submitted Part D BIN PCN
"DATA",9002313.93,1281,0)
821^Info Reporting Trans Mtchd to Pd Clm Not Submitted Part D BIN PCN
"DATA",9002313.93,1282,0)
822^Drug Unrelated To The Terminal Illness &/Or Rel Cond. No Hospice Cov
"DATA",9002313.93,1283,0)
823^Drug Is Benef Liability-Not Cov By Hospice. Hosp Non-Form. Chk Oth Cov
"DATA",9002313.93,1284,0)
824^Multi-transaction transmission not allowed in current NCPDP standard
"DATA",9002313.93,1285,0)
825^Claim Date Of Service Is Outside Of Product's FDA/NSDE Marketing Dates
"DATA",9002313.93,1286,0)
826^Prescriber NPI Submitted Not Found Within Processor's NPI File
"DATA",9002313.93,1287,0)
827^Pharm Serv Prov Is Temp Suspnded From Processing Clms By Payer/Process
"DATA",9002313.93,1288,0)
828^Plan/Beneficiary Case Management Restriction In Place
"DATA",9002313.93,1289,0)
829^Clm Not Cov Due To Failure To Meet Part D Prescriber NPI Requirements
"DATA",9002313.93,1290,0)
830^Workers' Comp Or P&C Adjuster Auth Required-Pt Must Contact Adjuster
"DATA",9002313.93,1291,0)
A3^This Product May Be Covered Under Hospice - Medicare A
"DATA",9002313.93,1292,0)
A4^Prod May Be Covered Under Medicare-B Bndld Pymt ESRD Dialysis Facility
"FIA",9002313.03)
BPS RESPONSES
"FIA",9002313.03,0)
^BPSR(
"FIA",9002313.03,0,0)
9002313.03P
"FIA",9002313.03,0,1)
y^n^p^^^^n^^n
"FIA",9002313.03,0,10)

"FIA",9002313.03,0,11)

"FIA",9002313.03,0,"RLRO")

"FIA",9002313.03,0,"VR")
1.0^BPS
"FIA",9002313.03,9002313.03)
1
"FIA",9002313.03,9002313.0301)
1
"FIA",9002313.03,9002313.0301,2087)

"FIA",9002313.03,9002313.0301,2087.01)

"FIA",9002313.03,9002313.0301,2090)

"FIA",9002313.03,9002313.0301,2090.01)

"FIA",9002313.03,9002313.032087)
0
"FIA",9002313.03,9002313.032091)
0
"FIA",9002313.25)
BPS NCPDP CLARIFICATION CODES
"FIA",9002313.25,0)
^BPS(9002313.25,
"FIA",9002313.25,0,0)
9002313.25I
"FIA",9002313.25,0,1)
y^y^f^^n^^y^o^n
"FIA",9002313.25,0,10)

"FIA",9002313.25,0,11)

"FIA",9002313.25,0,"RLRO")

"FIA",9002313.25,0,"VR")
1.0^BPS
"FIA",9002313.25,9002313.25)
0
"FIA",9002313.32)
BPS PAYER RESPONSE OVERRIDES
"FIA",9002313.32,0)
^BPS(9002313.32,
"FIA",9002313.32,0,0)
9002313.32
"FIA",9002313.32,0,1)
y^n^p^^^^n^^n
"FIA",9002313.32,0,10)

"FIA",9002313.32,0,11)

"FIA",9002313.32,0,"RLRO")

"FIA",9002313.32,0,"VR")
1.0^BPS
"FIA",9002313.32,9002313.32)
1
"FIA",9002313.32,9002313.32,.1)

"FIA",9002313.32,9002313.32,.11)

"FIA",9002313.32,9002313.32,.12)

"FIA",9002313.32,9002313.32,.13)

"FIA",9002313.32,9002313.32,.14)

"FIA",9002313.32,9002313.32,.15)

"FIA",9002313.32,9002313.32,.16)

"FIA",9002313.32,9002313.32,.17)

"FIA",9002313.32,9002313.32,.18)

"FIA",9002313.57)
BPS LOG OF TRANSACTIONS
"FIA",9002313.57,0)
^BPSTL(
"FIA",9002313.57,0,0)
9002313.57
"FIA",9002313.57,0,1)
y^n^p^^^^n^^n
"FIA",9002313.57,0,10)

"FIA",9002313.57,0,11)

"FIA",9002313.57,0,"RLRO")

"FIA",9002313.57,0,"VR")
1.0^BPS
"FIA",9002313.57,9002313.57)
1
"FIA",9002313.57,9002313.57,19)

"FIA",9002313.57,9002313.57,301)

"FIA",9002313.57,9002313.57,302)

"FIA",9002313.57,9002313.57,303)

"FIA",9002313.57,9002313.57,304)

"FIA",9002313.57,9002313.57,305)

"FIA",9002313.57,9002313.57,306)

"FIA",9002313.57,9002313.57,307)

"FIA",9002313.57,9002313.57,308)

"FIA",9002313.57,9002313.57111)
1
"FIA",9002313.57,9002313.57111,.04)

"FIA",9002313.59)
BPS TRANSACTION
"FIA",9002313.59,0)
^BPST(
"FIA",9002313.59,0,0)
9002313.59O
"FIA",9002313.59,0,1)
y^n^p^^^^n^^n
"FIA",9002313.59,0,10)

"FIA",9002313.59,0,11)

"FIA",9002313.59,0,"RLRO")

"FIA",9002313.59,0,"VR")
1.0^BPS
"FIA",9002313.59,9002313.59)
1
"FIA",9002313.59,9002313.59,19)

"FIA",9002313.59,9002313.59,301)

"FIA",9002313.59,9002313.59,302)

"FIA",9002313.59,9002313.59,303)

"FIA",9002313.59,9002313.59,304)

"FIA",9002313.59,9002313.59,305)

"FIA",9002313.59,9002313.59,306)

"FIA",9002313.59,9002313.59,307)

"FIA",9002313.59,9002313.59,308)

"FIA",9002313.59,9002313.59111)
1
"FIA",9002313.59,9002313.59111,.04)

"FIA",9002313.91)
BPS NCPDP FIELD DEFS
"FIA",9002313.91,0)
^BPSF(9002313.91,
"FIA",9002313.91,0,0)
9002313.91I
"FIA",9002313.91,0,1)
y^y^f^^n^^y^o^n
"FIA",9002313.91,0,10)

"FIA",9002313.91,0,11)

"FIA",9002313.91,0,"RLRO")

"FIA",9002313.91,0,"VR")
1.0^BPS
"FIA",9002313.91,9002313.91)
0
"FIA",9002313.91,9002313.9101)
0
"FIA",9002313.91,9002313.9102)
0
"FIA",9002313.91,9002313.9103)
0
"FIA",9002313.91,9002313.9104)
0
"FIA",9002313.93)
BPS NCPDP REJECT CODES
"FIA",9002313.93,0)
^BPSF(9002313.93,
"FIA",9002313.93,0,0)
9002313.93I
"FIA",9002313.93,0,1)
y^y^f^^n^^y^o^n
"FIA",9002313.93,0,10)

"FIA",9002313.93,0,11)

"FIA",9002313.93,0,"RLRO")

"FIA",9002313.93,0,"VR")
1.0^BPS
"FIA",9002313.93,9002313.93)
0
"INI")
EN^BPS20PRE
"INIT")
POST^BPS20PST
"KRN",19,12259,-1)
2^2
"KRN",19,12259,0)
BPS MENU RPT OTHER^Other Reports^^M^66481^BPS REPORTS^^^^^^^^^^^1
"KRN",19,12259,10,0)
^19.01IP^9^9
"KRN",19,12259,10,9,0)
13884^OPR
"KRN",19,12259,10,9,"^")
BPS OPECC PRODUCTIVITY REPORT
"KRN",19,12259,"U")
OTHER REPORTS
"KRN",19,13884,-1)
0^1
"KRN",19,13884,0)
BPS OPECC PRODUCTIVITY REPORT^OPECC Productivity Report^^R^^BPS SUPERVISOR^^^^^^E CLAIMS MGMT ENGINE
"KRN",19,13884,1,0)
^^3^3^3150922^
"KRN",19,13884,1,1,0)
This option shall display information for the claim, by transaction date, 
"KRN",19,13884,1,2,0)
with the option for a summary, detail, or Excel format.  It will require 
"KRN",19,13884,1,3,0)
a new security key named BPS SUPERVISOR.
"KRN",19,13884,25)
EN^BPSOPR
"KRN",19,13884,"U")
OPECC PRODUCTIVITY REPORT
"KRN",19.1,632,-1)
0^1
"KRN",19.1,632,0)
BPS SUPERVISOR^OPECC Productivity Report Key
"KRN",19.1,632,1,0)
^^2^2^3150922^
"KRN",19.1,632,1,1,0)
Users with this key will be allowed access to the BPS OPECC PRODUCTIVITY 
"KRN",19.1,632,1,2,0)
REPORT option.
"KRN",101,3851,-1)
0^3
"KRN",101,3851,0)
BPS PRTCL CMT MENU^menu protocol for comments^^M^^^^^^^^
"KRN",101,3851,4)
39^4
"KRN",101,3851,10,0)
^101.01PA^3^3
"KRN",101,3851,10,1,0)
3852^O^1^
"KRN",101,3851,10,1,"^")
BPS PRTCL CMT ADD
"KRN",101,3851,10,2,0)
3853^EX^3^
"KRN",101,3851,10,2,"^")
BPS PRTCL CMT EXIT
"KRN",101,3851,10,3,0)
4663^P^2^
"KRN",101,3851,10,3,"^")
BPS PRTCL CMT ADD PHARM
"KRN",101,3851,26)
DO SHOW^VALM
"KRN",101,3851,28)
Select action: 
"KRN",101,3851,99)
63782,42468
"KRN",101,3852,-1)
0^1
"KRN",101,3852,0)
BPS PRTCL CMT ADD^Add OPECC Comment^^A^^^^^^^^
"KRN",101,3852,20)
D ADD^BPSCMT01
"KRN",101,3852,99)
63683,47578
"KRN",101,3853,-1)
0^14
"KRN",101,3853,0)
BPS PRTCL CMT EXIT^Exit^^A^^^^^^^^
"KRN",101,3853,99)
60429,35970
"KRN",101,4005,-1)
2^5
"KRN",101,4005,0)
BPS PRTCL USRSCR HIDDEN ACTIONS^ECME User Screen Hidden Actions^^M^66481^^^^^^^
"KRN",101,4005,10,0)
^101.01PA^36^35
"KRN",101,4005,10,31,0)
4705^RER^60^
"KRN",101,4005,10,31,"^")
BPS PRTCL USRSCR RESUB NO REVERSE
"KRN",101,4005,10,32,0)
4708^REJ^45^
"KRN",101,4005,10,32,"^")
BPS PRTCL USRSCR OPECC REJECT INFORMATION
"KRN",101,4005,10,33,0)
4715^OCN^36^
"KRN",101,4005,10,33,"^")
BPS PRTCL USRSCR OPEN/CLOSE NON-BILLABLE ENTRY
"KRN",101,4663,-1)
0^2
"KRN",101,4663,0)
BPS PRTCL CMT ADD PHARM^Add Pharmacy/OPECC Comment^^A^^^^^^^^
"KRN",101,4663,20)
D ADDP^BPSCMT01
"KRN",101,4663,99)
63683,46373
"KRN",101,4705,-1)
0^4
"KRN",101,4705,0)
BPS PRTCL USRSCR RESUB NO REVERSE^Resubmit Claim w/o Reversal^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,4705,1,0)
^^4^4^3150825^
"KRN",101,4705,1,1,0)
List Manager action protocol to allow the ECME user screen user to be 
"KRN",101,4705,1,2,0)
able to resubmit an ECME claim without doing a reversal no matter what 
"KRN",101,4705,1,3,0)
the previous ECME claim status happens to be.  This action is used to 
"KRN",101,4705,1,4,0)
help get claims back into sync with payers.
"KRN",101,4705,20)
D RESNRV^BPSSCRRS
"KRN",101,4705,99)
63789,48865
"KRN",101,4708,-1)
0^11
"KRN",101,4708,0)
BPS PRTCL USRSCR OPECC REJECT INFORMATION^OPECC Reject Information^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,4708,1,0)
^^3^3^3150902^
"KRN",101,4708,1,1,0)
This action protocol allows the OPECC on the ECME User Screen to go into 
"KRN",101,4708,1,2,0)
the Reject Information details using a version of the pharmacy Reject 
"KRN",101,4708,1,3,0)
Information Screen.
"KRN",101,4708,20)
D EN^BPSSCRRJ
"KRN",101,4708,99)
63797,43693
"KRN",101,4709,-1)
0^6
"KRN",101,4709,0)
BPS OPECC REJECT MENU^OPECC Reject Information Display Menu^^M^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,4709,1,0)
^101.06^1^1^3151228^^^^
"KRN",101,4709,1,1,0)
This is the parent menu protocol for the OPECC Reject Information screen.
"KRN",101,4709,4)
40^4
"KRN",101,4709,10,0)
^101.01PA^8^4
"KRN",101,4709,10,5,0)
4710^VER^20^^^View ePharmacy Rx
"KRN",101,4709,10,5,"^")
BPS OPECC REJECT VIEW ECME RX
"KRN",101,4709,10,6,0)
4712^VW^10^^^View Rx
"KRN",101,4709,10,6,"^")
BPS OPECC REJECT INFO VIEW RX
"KRN",101,4709,10,7,0)
4714^MP^40^^^Medication Profile
"KRN",101,4709,10,7,"^")
BPS OPECC REJECT INFO MEDICATION PROFILE
"KRN",101,4709,10,8,0)
4713^PI^30^^^Patient Information
"KRN",101,4709,10,8,"^")
BPS OPECC REJECT INFO PATIENT INFORMATION
"KRN",101,4709,26)
D SHOW^VALM
"KRN",101,4709,28)
Select: 
"KRN",101,4709,99)
63914,59372
"KRN",101,4710,-1)
0^7
"KRN",101,4710,0)
BPS OPECC REJECT VIEW ECME RX^View ePharmacy Rx^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,4710,1,0)
^^2^2^3150902^
"KRN",101,4710,1,1,0)
This is the action protocol from the BPS OPECC REJECT INFORMATION screen 
"KRN",101,4710,1,2,0)
to view the ePharmacy prescription data.
"KRN",101,4710,4)
^^^VER
"KRN",101,4710,20)
D VER^BPSSCRRJ
"KRN",101,4710,99)
63797,60604
"KRN",101,4712,-1)
0^8
"KRN",101,4712,0)
BPS OPECC REJECT INFO VIEW RX^View Rx^^A^^^^^^^^
"KRN",101,4712,20)
D VIEW^BPSSCRRJ
"KRN",101,4712,99)
63806,58022
"KRN",101,4713,-1)
0^10
"KRN",101,4713,0)
BPS OPECC REJECT INFO PATIENT INFORMATION^Patient Information^^A^^^^^^^^
"KRN",101,4713,1,0)
^^3^3^3150914^
"KRN",101,4713,1,1,0)
This is the action protocol to get from the ECME OPECC Reject Information 
"KRN",101,4713,1,2,0)
screen to the Patient Information screen.  Variable parameters RXIEN and 
"KRN",101,4713,1,3,0)
RXFIL are common variables to routine BPSSCRRJ.
"KRN",101,4713,20)
D PI^BPSSCRRJ(RXIEN,RXFIL)
"KRN",101,4713,99)
63809,55627
"KRN",101,4714,-1)
0^9
"KRN",101,4714,0)
BPS OPECC REJECT INFO MEDICATION PROFILE^Medication Profile^^A^^^^^^^^
"KRN",101,4714,1,0)
^^3^3^3150914^
"KRN",101,4714,1,1,0)
This is the action protocol to get from the ECME OPECC Reject Information 
"KRN",101,4714,1,2,0)
screen to the Medication Profile screen.  Variable parameters RXIEN and
"KRN",101,4714,1,3,0)
RXFIL are common variables to routine BPSSCRRJ.
"KRN",101,4714,20)
D MP^BPSSCRRJ(RXIEN,RXFIL)
"KRN",101,4714,99)
63809,55784
"KRN",101,4715,-1)
0^13
"KRN",101,4715,0)
BPS PRTCL USRSCR OPEN/CLOSE NON-BILLABLE ENTRY^Open/Close Non-Billable Entry^^A^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",101,4715,1,0)
^^3^3^3150921^
"KRN",101,4715,1,1,0)
This is the action protocol on the ECME user screen which allows the user 
"KRN",101,4715,1,2,0)
to open or close a non-billable entry.  This is a toggle action in that 
"KRN",101,4715,1,3,0)
this action can open a closed entry, and it can close an open entry.
"KRN",101,4715,20)
D OC^BPSSCRN0
"KRN",101,4715,99)
63816,57695
"KRN",409.61,795,-1)
0^2
"KRN",409.61,795,0)
BPS LSTMN ECME USRSCR^1^^80^6^19^0^1^LM template for User Screen^BPS PRTCL ECME USRSCR^PHARMACY ECME^1^^1
"KRN",409.61,795,1)
^BPS PRTCL USRSCR HIDDEN ACTIONS
"KRN",409.61,795,"ARRAY")
 ^TMP("BPSSCR",$J,"VALM")
"KRN",409.61,795,"COL",0)
^409.621^2^2
"KRN",409.61,795,"COL",1,0)
CAPTION^5^76^PATIENT/DRUG/COMMENTS   INSURANCE/NDC/DOS/RX#/ECME#     STATUS/LOC/TYP/RXINF^^0
"KRN",409.61,795,"COL",2,0)
LINENO^1^5^##
"KRN",409.61,795,"COL","AIDENT",0,1)

"KRN",409.61,795,"COL","B","CAPTION",1)

"KRN",409.61,795,"COL","B","LINENO",2)

"KRN",409.61,795,"FNL")
D EXIT^BPSSCR
"KRN",409.61,795,"HDR")
D HDR^BPSSCR
"KRN",409.61,795,"HLP")
D HELP^BPSSCR
"KRN",409.61,795,"INIT")
D INIT^BPSSCR
"KRN",409.61,942,-1)
0^1
"KRN",409.61,942,0)
BPS OPECC REJECT INFORMATION^1^^80^7^20^1^1^^BPS OPECC REJECT MENU^OPECC Reject Information^1^^1
"KRN",409.61,942,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,942,"ARRAY")
 ^TMP("BPSSCRRJ",$J)
"KRN",409.61,942,"FNL")
D EXIT^BPSSCRRJ
"KRN",409.61,942,"HDR")
D HDR^BPSSCRRJ
"KRN",409.61,942,"HLP")
D HELP^BPSSCRRJ
"KRN",409.61,942,"INIT")
D INIT^BPSSCRRJ
"MBREQ")
1
"ORD",3,19.1)
19.1;3;;;KEY^XPDTA1;KEYF1^XPDIA1;KEYE1^XPDIA1;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",570,-1)
1^1
"PKG",570,0)
E CLAIMS MGMT ENGINE^BPS^ELECTRONIC CLAIMS MGT
"PKG",570,20,0)
^9.402P^^
"PKG",570,22,0)
^9.49I^1^1
"PKG",570,22,1,0)
1.0^3041008^3041108^66481
"PKG",570,22,1,"PAH",1,0)
20^3160421
"PKG",570,22,1,"PAH",1,1,0)
^^1^1^3160421
"PKG",570,22,1,"PAH",1,1,1,0)
MCCF ePharmacy Compliance Phase 3
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
61
"RTN","BPS20PRE")
0^^B9993195
"RTN","BPS20PRE",1,0)
BPS20PRE ;ALB/ESG - Pre-install routine for BPS*1*20 ;10/19/2015
"RTN","BPS20PRE",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**20**;JUN 2004;Build 27
"RTN","BPS20PRE",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPS20PRE",4,0)
 ;
"RTN","BPS20PRE",5,0)
 ; ePharmacy Compliance Phase 3 - BPS*1*20 patch pre-install
"RTN","BPS20PRE",6,0)
 ;
"RTN","BPS20PRE",7,0)
 Q
"RTN","BPS20PRE",8,0)
 ;
"RTN","BPS20PRE",9,0)
EN ; Entry Point for post-install
"RTN","BPS20PRE",10,0)
 D MES^XPDUTL("  Starting pre-install for BPS*1*20")
"RTN","BPS20PRE",11,0)
 ;
"RTN","BPS20PRE",12,0)
 ; Update the reject code description in BPS NCPDP REJECT CODES
"RTN","BPS20PRE",13,0)
 D REJECTS
"RTN","BPS20PRE",14,0)
 ;
"RTN","BPS20PRE",15,0)
 ; Update the submission clarification codes in file 9002313.25
"RTN","BPS20PRE",16,0)
 D SUBCL
"RTN","BPS20PRE",17,0)
 ;
"RTN","BPS20PRE",18,0)
EX ; exit point
"RTN","BPS20PRE",19,0)
 ;
"RTN","BPS20PRE",20,0)
 D MES^XPDUTL("  Finished pre-install of BPS*1*20")
"RTN","BPS20PRE",21,0)
 Q
"RTN","BPS20PRE",22,0)
 ;
"RTN","BPS20PRE",23,0)
REJECTS ;
"RTN","BPS20PRE",24,0)
 ; Update Reject Codes with new explanations
"RTN","BPS20PRE",25,0)
 N LINE,DATA,NUM,NAME,DA,DIE,DR,CNT
"RTN","BPS20PRE",26,0)
 D MES^XPDUTL("    - Updating BPS NCPDP REJECT CODES")
"RTN","BPS20PRE",27,0)
 S CNT=0
"RTN","BPS20PRE",28,0)
 F LINE=1:1 S DATA=$P($T(NRJCT+LINE),";;",2,99) Q:DATA=""  D
"RTN","BPS20PRE",29,0)
 . S DIE=9002313.93,NUM=$P(DATA,";",1)
"RTN","BPS20PRE",30,0)
 . S DA=$O(^BPSF(DIE,"B",NUM,""))
"RTN","BPS20PRE",31,0)
 . I 'DA Q     ; quit if no IEN found for entry
"RTN","BPS20PRE",32,0)
 . S NAME=$P(DATA,";",2,99),DR=".02////^S X=NAME",CNT=CNT+1
"RTN","BPS20PRE",33,0)
 . D ^DIE
"RTN","BPS20PRE",34,0)
 . Q
"RTN","BPS20PRE",35,0)
 D MES^XPDUTL("      - "_CNT_" entries updated")
"RTN","BPS20PRE",36,0)
 D MES^XPDUTL("    - Done with BPS NCPDP REJECT CODES")
"RTN","BPS20PRE",37,0)
 D MES^XPDUTL(" ")
"RTN","BPS20PRE",38,0)
 Q
"RTN","BPS20PRE",39,0)
 ;
"RTN","BPS20PRE",40,0)
NRJCT ; New reject code descriptions
"RTN","BPS20PRE",41,0)
 ;;607;Info Reporting (N1/N3) Trans Cannot Be Matched To A Claim (B1/B3)
"RTN","BPS20PRE",42,0)
 ;;610;Info Reporting Trans Matched to Reversed/Rejected Claim Under Part D
"RTN","BPS20PRE",43,0)
 ;;671;REMS: Laboratory test not conducted within specified time period
"RTN","BPS20PRE",44,0)
 ;;771;Compound contains unidentifiable ingredient; SCC override not allowed
"RTN","BPS20PRE",45,0)
 ;;773;Prescriber Is Not Listed On Medicare Enrollment File
"RTN","BPS20PRE",46,0)
 ;;774;Prescriber Medicare Enrollment Period Is Outside Of Claim Date Of Serv
"RTN","BPS20PRE",47,0)
 ;;A4;Prod May Be Covered Under Medicare-B Bndld Pymt ESRD Dialysis Facility
"RTN","BPS20PRE",48,0)
 ;;R0;Professional Serv Cd of 'MA' req'd for Vaccine Incentive Fee Submitted
"RTN","BPS20PRE",49,0)
 ;;
"RTN","BPS20PRE",50,0)
 ;
"RTN","BPS20PRE",51,0)
SUBCL ; update submission clarification codes - the .02 field is an identifier field
"RTN","BPS20PRE",52,0)
 ; so must be changed in this pre-install routine
"RTN","BPS20PRE",53,0)
 ;
"RTN","BPS20PRE",54,0)
 N LINE,DATA,NUM,NAME,DA,DIE,DR,CNT
"RTN","BPS20PRE",55,0)
 D MES^XPDUTL("    - Updating BPS NCPDP CLARIFICATION CODES")
"RTN","BPS20PRE",56,0)
 S CNT=0
"RTN","BPS20PRE",57,0)
 F LINE=1:1 S DATA=$P($T(NSCCDT+LINE),";;",2,99) Q:DATA=""  D
"RTN","BPS20PRE",58,0)
 . S DIE=9002313.25,NUM=$P(DATA,";",1)
"RTN","BPS20PRE",59,0)
 . S DA=$O(^BPS(DIE,"B",NUM,""))
"RTN","BPS20PRE",60,0)
 . I 'DA Q     ; quit if no IEN found for entry
"RTN","BPS20PRE",61,0)
 . S NAME=$P(DATA,";",2,99),DR=".02////^S X=NAME",CNT=CNT+1
"RTN","BPS20PRE",62,0)
 . D ^DIE
"RTN","BPS20PRE",63,0)
 . Q
"RTN","BPS20PRE",64,0)
 D MES^XPDUTL("      - "_CNT_" entries updated")
"RTN","BPS20PRE",65,0)
 D MES^XPDUTL("    - Done with BPS NCPDP CLARIFICATION CODES")
"RTN","BPS20PRE",66,0)
 D MES^XPDUTL(" ")
"RTN","BPS20PRE",67,0)
 Q
"RTN","BPS20PRE",68,0)
 ;
"RTN","BPS20PRE",69,0)
NSCCDT ; updated text for NCPDP submission clarification codes
"RTN","BPS20PRE",70,0)
 ;;0;ZZ DO NOT USE - NOT SPECIFIED, DEFAULT
"RTN","BPS20PRE",71,0)
 ;;44;ZZ DO NOT USE - ASSOCIATED PRESCRIBER DEA RECENTLY LICENSED OR RE-ACTIVATED
"RTN","BPS20PRE",72,0)
 ;;
"RTN","BPS20PRE",73,0)
 ;
"RTN","BPS20PST")
0^^B54584565
"RTN","BPS20PST",1,0)
BPS20PST ;ALB/ESG - Post-install for BPS*1.0*20 ;08/26/2015
"RTN","BPS20PST",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**20**;JUN 2004;Build 27
"RTN","BPS20PST",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPS20PST",4,0)
 ;
"RTN","BPS20PST",5,0)
 ; MCCF ePharmacy Compliance Phase 3 - BPS*1*20 patch post install
"RTN","BPS20PST",6,0)
 ;
"RTN","BPS20PST",7,0)
 Q
"RTN","BPS20PST",8,0)
 ;
"RTN","BPS20PST",9,0)
POST ; Entry Point for post-install
"RTN","BPS20PST",10,0)
 ;
"RTN","BPS20PST",11,0)
 D BMES^XPDUTL("  Starting post-install of BPS*1*20")
"RTN","BPS20PST",12,0)
 N XPDIDTOT
"RTN","BPS20PST",13,0)
 S XPDIDTOT=7
"RTN","BPS20PST",14,0)
 D MENU(1)          ; 1. remove the cached hidden menu protocol for the ECME User Screen
"RTN","BPS20PST",15,0)
 D UPDPRTCL(2)      ; 2. update the protocols on the ECME user screen
"RTN","BPS20PST",16,0)
 D DNSBPS(3)        ; 3. delete the IP address & enter the DNS Domain in BPS NCPDP link
"RTN","BPS20PST",17,0)
 D DNSEPH(4)        ; 4. delete the IP address & enter the DNS Domain in EPHARM OUT link
"RTN","BPS20PST",18,0)
 D VERSION(5)       ; 5. update the Vitria interface version and do the registration
"RTN","BPS20PST",19,0)
 D TRICARE(6)       ; 6. rename the BPS COB RPT TRICARE CLAIMS option
"RTN","BPS20PST",20,0)
 D COBMNE(7)        ; 7. rename the TRI mnemonic in BPS COB MENU option
"RTN","BPS20PST",21,0)
 ;
"RTN","BPS20PST",22,0)
EX ; exit point
"RTN","BPS20PST",23,0)
 ;
"RTN","BPS20PST",24,0)
 D BMES^XPDUTL("  Finished post-install of BPS*1*20")
"RTN","BPS20PST",25,0)
 Q
"RTN","BPS20PST",26,0)
 ;
"RTN","BPS20PST",27,0)
MENU(BPSXPD) ; remove the cached hidden menu protocol
"RTN","BPS20PST",28,0)
 N BPSORD,XQORM
"RTN","BPS20PST",29,0)
 D BMES^XPDUTL(" STEP "_BPSXPD_" of "_XPDIDTOT)
"RTN","BPS20PST",30,0)
 D MES^XPDUTL("-------------")
"RTN","BPS20PST",31,0)
 D MES^XPDUTL("Removing the cached hidden parent menu for the ECME User Screen ... ")
"RTN","BPS20PST",32,0)
 ;
"RTN","BPS20PST",33,0)
 S BPSORD=$O(^ORD(101,"B","BPS PRTCL USRSCR HIDDEN ACTIONS",0))
"RTN","BPS20PST",34,0)
 S XQORM=BPSORD_";ORD(101,"
"RTN","BPS20PST",35,0)
 K ^XUTL("XQORM",XQORM)
"RTN","BPS20PST",36,0)
 ;
"RTN","BPS20PST",37,0)
MENUX ;
"RTN","BPS20PST",38,0)
 D MES^XPDUTL(" Done.")
"RTN","BPS20PST",39,0)
 D UPDATE^XPDID(BPSXPD)
"RTN","BPS20PST",40,0)
 Q
"RTN","BPS20PST",41,0)
 ;
"RTN","BPS20PST",42,0)
UPDPRTCL(BPSXPD) ; Update protocols
"RTN","BPS20PST",43,0)
 N BPSDELP,BPSADDP,X,BPSDATA,BPSPUPD
"RTN","BPS20PST",44,0)
 D BMES^XPDUTL(" STEP "_BPSXPD_" of "_XPDIDTOT)
"RTN","BPS20PST",45,0)
 D MES^XPDUTL("-------------")
"RTN","BPS20PST",46,0)
 D MES^XPDUTL("Updating actions on the ECME User Screen ... ")
"RTN","BPS20PST",47,0)
 ;
"RTN","BPS20PST",48,0)
 S BPSDELP(1)="BPS PRTCL ECME USRSCR^BPS PRTCL USRSCR CONTINUOUS"
"RTN","BPS20PST",49,0)
 S BPSDELP(2)="BPS PRTCL ECME USRSCR^BPS PRTCL USRSCR UPDATE"
"RTN","BPS20PST",50,0)
 S BPSDELP(3)="BPS PRTCL ECME USRSCR^BPS PRTCL USRSCR CLAIM LOG"
"RTN","BPS20PST",51,0)
 S BPSDELP(4)="BPS PRTCL ECME USRSCR^BPS PRTCL USRSCR EXIT"
"RTN","BPS20PST",52,0)
 S BPSDELP(5)="BPS PRTCL USRSCR HIDDEN ACTIONS^BPS PRTCL USRSCR VIEW ECME RX"
"RTN","BPS20PST",53,0)
 ;
"RTN","BPS20PST",54,0)
 S BPSADDP(1)="BPS PRTCL ECME USRSCR^BPS PRTCL USRSCR CHANGE VIEW^CV^11"
"RTN","BPS20PST",55,0)
 S BPSADDP(2)="BPS PRTCL ECME USRSCR^BPS PRTCL USRSCR SORTLIST^SO^12"
"RTN","BPS20PST",56,0)
 S BPSADDP(3)="BPS PRTCL ECME USRSCR^BPS PRTCL USRSCR COMMENT^CMT^13"
"RTN","BPS20PST",57,0)
 S BPSADDP(4)="BPS PRTCL ECME USRSCR^BPS PRTCL USRSCR REVERSE^REV^21"
"RTN","BPS20PST",58,0)
 S BPSADDP(5)="BPS PRTCL ECME USRSCR^BPS PRTCL USRSCR RESUBMIT^RES^22"
"RTN","BPS20PST",59,0)
 S BPSADDP(6)="BPS PRTCL ECME USRSCR^BPS PRTCL USRSCR CLOSE^CLO^23"
"RTN","BPS20PST",60,0)
 S BPSADDP(7)="BPS PRTCL ECME USRSCR^BPS PRTCL USRSCR RESEARCH MENU^FR^31"
"RTN","BPS20PST",61,0)
 S BPSADDP(8)="BPS PRTCL ECME USRSCR^BPS PRTCL USRSCR VIEW ECME RX^VER^32"
"RTN","BPS20PST",62,0)
 S BPSADDP(9)="BPS PRTCL ECME USRSCR^BPS PRTCL USRSCR PHARM WRKLST^WRK^33"
"RTN","BPS20PST",63,0)
 S BPSADDP(10)="BPS PRTCL USRSCR HIDDEN ACTIONS^BPS PRTCL USRSCR UPDATE^UD"
"RTN","BPS20PST",64,0)
 S BPSADDP(11)="BPS PRTCL USRSCR HIDDEN ACTIONS^BPS PRTCL USRSCR CLAIM LOG^LOG"
"RTN","BPS20PST",65,0)
 S BPSADDP(12)="BPS PRTCL USRSCR HIDDEN ACTIONS^BPS PRTCL USRSCR EXIT^EX"
"RTN","BPS20PST",66,0)
 ;
"RTN","BPS20PST",67,0)
 I '+$$LKPROT^XPDPROT("BPS PRTCL ECME USRSCR") G UPDPRTX
"RTN","BPS20PST",68,0)
 I '+$$LKPROT^XPDPROT("BPS PRTCL USRSCR HIDDEN ACTIONS") G UPDPRTX
"RTN","BPS20PST",69,0)
 ;
"RTN","BPS20PST",70,0)
 ; Delete protocols
"RTN","BPS20PST",71,0)
 F X=1:1:5 D
"RTN","BPS20PST",72,0)
 .S BPSDATA=BPSDELP(X)
"RTN","BPS20PST",73,0)
 .Q:'+$$LKPROT^XPDPROT($P(BPSDATA,"^",2))
"RTN","BPS20PST",74,0)
 .S BPSPUPD=$$DELETE^XPDPROT($P(BPSDATA,"^"),$P(BPSDATA,"^",2))
"RTN","BPS20PST",75,0)
 .I 'BPSPUPD D  Q
"RTN","BPS20PST",76,0)
 ..D MES^XPDUTL($P(BPSDATA,"^",2)_" protocol already deleted from "_$P(BPSDATA,"^")_".")
"RTN","BPS20PST",77,0)
 ;
"RTN","BPS20PST",78,0)
 ; Add protocols
"RTN","BPS20PST",79,0)
 F X=1:1:12 D
"RTN","BPS20PST",80,0)
 .S BPSDATA=BPSADDP(X)
"RTN","BPS20PST",81,0)
 .Q:'+$$LKPROT^XPDPROT($P(BPSDATA,"^",2))
"RTN","BPS20PST",82,0)
 .S BPSPUPD=$$ADD^XPDPROT($P(BPSDATA,"^"),$P(BPSDATA,"^",2),$P(BPSDATA,"^",3),$S($P(BPSDATA,"^",4)'="":$P(BPSDATA,"^",4),1:""))
"RTN","BPS20PST",83,0)
 .I 'BPSPUPD D  Q
"RTN","BPS20PST",84,0)
 ..D MES^XPDUTL("  Unable to add "_$P(BPSDATA,"^",2)_" protocol to "_$P(BPSDATA,"^")_".")
"RTN","BPS20PST",85,0)
 ;
"RTN","BPS20PST",86,0)
UPDPRTX ;
"RTN","BPS20PST",87,0)
 D MES^XPDUTL(" Done.")
"RTN","BPS20PST",88,0)
 D UPDATE^XPDID(BPSXPD)
"RTN","BPS20PST",89,0)
 Q
"RTN","BPS20PST",90,0)
TRICARE(BPSXPD) ; Rename BPS COB RPT TRICARE CLAIMS option
"RTN","BPS20PST",91,0)
 N BPSOLDNM,BPSNEWNM,BPSIEN19,DR,DIE,DA
"RTN","BPS20PST",92,0)
 D BMES^XPDUTL(" STEP "_BPSXPD_" of "_XPDIDTOT)
"RTN","BPS20PST",93,0)
 D MES^XPDUTL("-------------")
"RTN","BPS20PST",94,0)
 D MES^XPDUTL("Renaming BPS COB RPT TRICARE CLAIMS option ... ")
"RTN","BPS20PST",95,0)
 ;
"RTN","BPS20PST",96,0)
 S BPSOLDNM="BPS COB RPT TRICARE CLAIMS"
"RTN","BPS20PST",97,0)
 S BPSNEWNM="BPS POTENTIAL CLAIMS RPT DUAL"
"RTN","BPS20PST",98,0)
 S BPSIEN19=+$$LKOPT^XPDMENU(BPSOLDNM)
"RTN","BPS20PST",99,0)
 I 'BPSIEN19 D MES^XPDUTL(BPSOLDNM_" has already been renamed.") G TRICX
"RTN","BPS20PST",100,0)
 ;
"RTN","BPS20PST",101,0)
 D RENAME^XPDMENU(BPSOLDNM,BPSNEWNM)
"RTN","BPS20PST",102,0)
 S BPSIEN19=+$$LKOPT^XPDMENU(BPSNEWNM)
"RTN","BPS20PST",103,0)
 I BPSIEN19 D
"RTN","BPS20PST",104,0)
 .S DR="1///Potential Claims Report for Dual Eligible"
"RTN","BPS20PST",105,0)
 .S DIE="^DIC(19,",DA=BPSIEN19
"RTN","BPS20PST",106,0)
 .D ^DIE
"RTN","BPS20PST",107,0)
 ;
"RTN","BPS20PST",108,0)
TRICX ;
"RTN","BPS20PST",109,0)
 D MES^XPDUTL(" Done.")
"RTN","BPS20PST",110,0)
 D UPDATE^XPDID(BPSXPD)
"RTN","BPS20PST",111,0)
 Q
"RTN","BPS20PST",112,0)
 ;
"RTN","BPS20PST",113,0)
COBMNE(BPSXPD) ; Rename mnemonic in BPS COB MENU option
"RTN","BPS20PST",114,0)
 N BPSOPT,BPSIEN19,BPSITEM,DR,DIE,DA
"RTN","BPS20PST",115,0)
 D BMES^XPDUTL(" STEP "_BPSXPD_" of "_XPDIDTOT)
"RTN","BPS20PST",116,0)
 D MES^XPDUTL("-------------")
"RTN","BPS20PST",117,0)
 D MES^XPDUTL("Renaming mnemonic in BPS COB MENU option ... ")
"RTN","BPS20PST",118,0)
 ;
"RTN","BPS20PST",119,0)
 S BPSOPT="BPS COB MENU"
"RTN","BPS20PST",120,0)
 S BPSIEN19=+$$LKOPT^XPDMENU(BPSOPT)
"RTN","BPS20PST",121,0)
 I 'BPSIEN19 D MES^XPDUTL(BPSOPT_" option not found.") G COBMNEX
"RTN","BPS20PST",122,0)
 S BPSITEM=+$O(^DIC(19,BPSIEN19,10,"C","PCR",0))
"RTN","BPS20PST",123,0)
 I BPSITEM D MES^XPDUTL(BPSOPT_" has already been renamed.") G COBMNEX
"RTN","BPS20PST",124,0)
 ;
"RTN","BPS20PST",125,0)
 S BPSITEM=+$O(^DIC(19,BPSIEN19,10,"C","TRI",0))
"RTN","BPS20PST",126,0)
 I BPSITEM D
"RTN","BPS20PST",127,0)
 .S DR="2///PCR"
"RTN","BPS20PST",128,0)
 .S DIE="^DIC(19,"_BPSIEN19_",10,",DA(1)=BPSIEN19,DA=BPSITEM
"RTN","BPS20PST",129,0)
 .D ^DIE
"RTN","BPS20PST",130,0)
 ;
"RTN","BPS20PST",131,0)
COBMNEX ;
"RTN","BPS20PST",132,0)
 D MES^XPDUTL(" Done.")
"RTN","BPS20PST",133,0)
 D UPDATE^XPDID(BPSXPD)
"RTN","BPS20PST",134,0)
 Q
"RTN","BPS20PST",135,0)
 ;
"RTN","BPS20PST",136,0)
DNSBPS(BPSXPD) ; Delete the TCP/IP ADDRESS if it exists in the BPS NCPDP
"RTN","BPS20PST",137,0)
 ; logical link & enter the FSC DNS DOMAIN in File #870
"RTN","BPS20PST",138,0)
 N DA,DIE,DLAYGO,DR,X,Y
"RTN","BPS20PST",139,0)
 D BMES^XPDUTL(" STEP "_BPSXPD_" of "_XPDIDTOT)
"RTN","BPS20PST",140,0)
 D MES^XPDUTL("-------------")
"RTN","BPS20PST",141,0)
 D MES^XPDUTL("Deleting the TCP/IP ADDRESS and entering the Financial Services Center")
"RTN","BPS20PST",142,0)
 D MES^XPDUTL("DNS DOMAIN in the 'BPS NCPDP' link of the HL LOGICAL LINK File #870...")
"RTN","BPS20PST",143,0)
 ;
"RTN","BPS20PST",144,0)
 S IBPRD=$S($$PROD^XUPROD(1)=1:"P",1:"T")
"RTN","BPS20PST",145,0)
 S DIC="^HLCS(870,",DLAYGO=870,DIC(0)="LS",X="BPS NCPDP" D ^DIC
"RTN","BPS20PST",146,0)
 ;
"RTN","BPS20PST",147,0)
 ; For Test environments use the FSC TEST domain
"RTN","BPS20PST",148,0)
 I IBPRD="T",Y'=-1 D
"RTN","BPS20PST",149,0)
 . S DIE=DIC,DA=+Y,DR=".08///EPHARMACY.VITRIA-EDI-TEST.domain.ext;400.01///@"
"RTN","BPS20PST",150,0)
 . K DIC D ^DIE
"RTN","BPS20PST",151,0)
 ;
"RTN","BPS20PST",152,0)
 ; For Production environments, use the FSC PRD domain
"RTN","BPS20PST",153,0)
 I IBPRD="P",Y'=-1 D
"RTN","BPS20PST",154,0)
 . S DIE=DIC,DA=+Y,DR=".08///EPHARMACY.VITRIA-EDI.domain.ext;400.01///@"
"RTN","BPS20PST",155,0)
 . K DIC D ^DIE
"RTN","BPS20PST",156,0)
 ;
"RTN","BPS20PST",157,0)
DNSX ;
"RTN","BPS20PST",158,0)
 D MES^XPDUTL(" Done.")
"RTN","BPS20PST",159,0)
 D UPDATE^XPDID(BPSXPD)
"RTN","BPS20PST",160,0)
 Q
"RTN","BPS20PST",161,0)
 ;
"RTN","BPS20PST",162,0)
DNSEPH(BPSXPD) ; Delete the TCP/IP ADDRESS if it exists in the EPHARM OUT 
"RTN","BPS20PST",163,0)
 ; logical link & enter the FSC DNS DOMAIN in File #870
"RTN","BPS20PST",164,0)
 N DA,DIE,DLAYGO,DR,X,Y
"RTN","BPS20PST",165,0)
 D BMES^XPDUTL(" STEP "_BPSXPD_" of "_XPDIDTOT)
"RTN","BPS20PST",166,0)
 D MES^XPDUTL("-------------")
"RTN","BPS20PST",167,0)
 D MES^XPDUTL("Deleting the TCP/IP ADDRESS and entering the Financial Services Center")
"RTN","BPS20PST",168,0)
 D MES^XPDUTL("DNS DOMAIN in the 'EPHARM OUT' link of the HL LOGICAL LINK File #870...")
"RTN","BPS20PST",169,0)
 S IBPRD=$S($$PROD^XUPROD(1)=1:"P",1:"T")
"RTN","BPS20PST",170,0)
 S DIC="^HLCS(870,",DLAYGO=870,DIC(0)="LS",X="EPHARM OUT" D ^DIC
"RTN","BPS20PST",171,0)
 ;
"RTN","BPS20PST",172,0)
 ; For Test environments use the FSC TEST domain
"RTN","BPS20PST",173,0)
 I IBPRD="T",Y'=-1 D
"RTN","BPS20PST",174,0)
 . S DIE=DIC,DA=+Y,DR=".08///EPHARMACY.VITRIA-EDI-TEST.domain.ext;400.01///@"
"RTN","BPS20PST",175,0)
 . K DIC D ^DIE
"RTN","BPS20PST",176,0)
 ;
"RTN","BPS20PST",177,0)
 ; For Production environments, use the FSC PRD domain
"RTN","BPS20PST",178,0)
 I IBPRD="P",Y'=-1 D
"RTN","BPS20PST",179,0)
 . S DIE=DIC,DA=+Y,DR=".08///EPHARMACY.VITRIA-EDI.domain.ext;400.01///@"
"RTN","BPS20PST",180,0)
 . K DIC D ^DIE
"RTN","BPS20PST",181,0)
 ;
"RTN","BPS20PST",182,0)
EPHX ;
"RTN","BPS20PST",183,0)
 D MES^XPDUTL(" Done.")
"RTN","BPS20PST",184,0)
 D UPDATE^XPDID(BPSXPD)
"RTN","BPS20PST",185,0)
 Q
"RTN","BPS20PST",186,0)
 ;
"RTN","BPS20PST",187,0)
VERSION(BPSXPD) ; Update Vitria Interface Version and do automatic registration
"RTN","BPS20PST",188,0)
 N DR,DIE,DA
"RTN","BPS20PST",189,0)
 D BMES^XPDUTL(" STEP "_BPSXPD_" of "_XPDIDTOT)
"RTN","BPS20PST",190,0)
 D MES^XPDUTL("-------------")
"RTN","BPS20PST",191,0)
 D MES^XPDUTL("Updating the Vitria ePharmacy Interface Version ... ")
"RTN","BPS20PST",192,0)
 ;
"RTN","BPS20PST",193,0)
 I $$GET1^DIQ(9002313.99,1,6003)'<5 D MES^XPDUTL("Vitria Interface version has already been updated.") G VERX
"RTN","BPS20PST",194,0)
 ;
"RTN","BPS20PST",195,0)
 S DR="6003///5"                  ; update to version 5 with BPS*1*20
"RTN","BPS20PST",196,0)
 S DIE="^BPS(9002313.99,",DA=1
"RTN","BPS20PST",197,0)
 D ^DIE
"RTN","BPS20PST",198,0)
 D TASKMAN^BPSJAREG               ; perform registration with AITC
"RTN","BPS20PST",199,0)
VERX ;
"RTN","BPS20PST",200,0)
 D MES^XPDUTL(" Done.")
"RTN","BPS20PST",201,0)
 D UPDATE^XPDID(BPSXPD)
"RTN","BPS20PST",202,0)
 Q
"RTN","BPSBUTL")
0^43^B120426085
"RTN","BPSBUTL",1,0)
BPSBUTL ;BHAM ISC/MFR/VA/DLF - IB Communication Utilities ;06/01/2004
"RTN","BPSBUTL",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2,5,7,8,9,10,11,15,20**;JUN 2004;Build 27
"RTN","BPSBUTL",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSBUTL",4,0)
 ;Reference to STORESP^IBNCPDP supported by DBIA 4299
"RTN","BPSBUTL",5,0)
 Q
"RTN","BPSBUTL",6,0)
 ;
"RTN","BPSBUTL",7,0)
 ;CLAIM - pointer to #9002313.02
"RTN","BPSBUTL",8,0)
 ;TRNDX - ptr to #9002313.59
"RTN","BPSBUTL",9,0)
 ;REASON -  text name of the close reason
"RTN","BPSBUTL",10,0)
 ;PAPER - 1=drop to paper
"RTN","BPSBUTL",11,0)
 ;RELCOP - 1 (Yes) or 0 (No) release copay or not?
"RTN","BPSBUTL",12,0)
 ;COMMENT - comment
"RTN","BPSBUTL",13,0)
 ;ERROR - array by reference for error details
"RTN","BPSBUTL",14,0)
 ;
"RTN","BPSBUTL",15,0)
CLOSE(CLAIM,TRNDX,REASON,PAPER,RELCOP,COMMENT,ERROR) ; Send IB an update on the CLAIM status for a Closed Claim
"RTN","BPSBUTL",16,0)
 N DFN,BPSARRY,BILLNUM,CLAIMNFO,FILLNUM,RXIEN,TRANINFO
"RTN","BPSBUTL",17,0)
 ;
"RTN","BPSBUTL",18,0)
 ; - Data gathering
"RTN","BPSBUTL",19,0)
 D GETS^DIQ("9002313.59",TRNDX,"1.11;9","I","TRANINFO")
"RTN","BPSBUTL",20,0)
 S RXIEN=TRANINFO(9002313.59,TRNDX_",",1.11,"I")
"RTN","BPSBUTL",21,0)
 I $$RXAPI1^BPSUTIL1(RXIEN,.01)="" S ERROR="Prescription not found." Q
"RTN","BPSBUTL",22,0)
 S BPSARRY("FILL NUMBER")=TRANINFO(9002313.59,TRNDX_",",9,"I")
"RTN","BPSBUTL",23,0)
 D GETS^DIQ("9002313.02",CLAIM,"400*;401;402;403;426","","CLAIMNFO")
"RTN","BPSBUTL",24,0)
 S BPSARRY("DOS")=$G(CLAIMNFO("9002313.02",CLAIM_",","401"))
"RTN","BPSBUTL",25,0)
 I BPSARRY("DOS") S BPSARRY("DOS")=BPSARRY("DOS")-17000000
"RTN","BPSBUTL",26,0)
 S FILLNUM=+BPSARRY("FILL NUMBER")
"RTN","BPSBUTL",27,0)
 S DFN=$$RXAPI1^BPSUTIL1(RXIEN,2,"I")
"RTN","BPSBUTL",28,0)
 S BPSARRY("FILLED BY")=$$RXAPI1^BPSUTIL1(RXIEN,16,"I")
"RTN","BPSBUTL",29,0)
 S BPSARRY("PRESCRIPTION")=RXIEN
"RTN","BPSBUTL",30,0)
 S BPSARRY("BILLED")=$$DFF2EXT^BPSECFM($P(CLAIMNFO("9002313.0201","1,"_CLAIM_",","426"),"DQ",2))
"RTN","BPSBUTL",31,0)
 S BPSARRY("CLAIMID")=$P(CLAIMNFO("9002313.0201","1,"_CLAIM_",","402"),"D2",2)
"RTN","BPSBUTL",32,0)
 S BPSARRY("PLAN")=$P(^BPST(TRNDX,10,1,0),"^")
"RTN","BPSBUTL",33,0)
 S BPSARRY("STATUS")="CLOSED"
"RTN","BPSBUTL",34,0)
 S BPSARRY("PAID")=0
"RTN","BPSBUTL",35,0)
 S BPSARRY("RELEASE DATE")=$S(FILLNUM=0:$$RXAPI1^BPSUTIL1(RXIEN,31,"I"),1:$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,FILLNUM,17,"I"))
"RTN","BPSBUTL",36,0)
 S BPSARRY("USER")=DUZ
"RTN","BPSBUTL",37,0)
 S BPSARRY("EPHARM")=$$GET1^DIQ(9002313.59,TRNDX,1.07,"I")
"RTN","BPSBUTL",38,0)
 S BPSARRY("RXCOB")=$$COB59^BPSUTIL2(TRNDX)
"RTN","BPSBUTL",39,0)
 I REASON'="" D
"RTN","BPSBUTL",40,0)
 . S BPSARRY("CLOSE REASON")=$O(^IBE(356.8,"B",REASON,0))
"RTN","BPSBUTL",41,0)
 . S BPSARRY("DROP TO PAPER")=+$G(PAPER)
"RTN","BPSBUTL",42,0)
 . S BPSARRY("RELEASE COPAY")=+$G(RELCOP)
"RTN","BPSBUTL",43,0)
 I $G(COMMENT)]"" S BPSARRY("CLOSE COMMENT")=COMMENT
"RTN","BPSBUTL",44,0)
 ;
"RTN","BPSBUTL",45,0)
 ; If dropped to Paper, increment the counter in BPS Statistics
"RTN","BPSBUTL",46,0)
 I BPSARRY("DROP TO PAPER")=1 D INCSTAT^BPSOSUD("R",8)
"RTN","BPSBUTL",47,0)
 ;
"RTN","BPSBUTL",48,0)
 ; Call IB
"RTN","BPSBUTL",49,0)
 S BILLNUM=$$STORESP^IBNCPDP(DFN,.BPSARRY)
"RTN","BPSBUTL",50,0)
 Q
"RTN","BPSBUTL",51,0)
 ; Send IB an update on the CLAIM status for a restocked or deleted prescription
"RTN","BPSBUTL",52,0)
CLOSE2(RXIEN,BFILL,BWHERE) ;
"RTN","BPSBUTL",53,0)
 N IEN59,BPSARRY,DFN,BILLNUM,FILL,REASON
"RTN","BPSBUTL",54,0)
 N CLAIMNFO
"RTN","BPSBUTL",55,0)
 N DIE,DA,DR
"RTN","BPSBUTL",56,0)
 ;
"RTN","BPSBUTL",57,0)
 ; Check parameters
"RTN","BPSBUTL",58,0)
 I '$G(RXIEN) S ERROR="No prescription parameter" Q
"RTN","BPSBUTL",59,0)
 I $G(BFILL)="" S ERROR="No fill parameter" Q
"RTN","BPSBUTL",60,0)
 I $G(BWHERE)="" S ERROR="No RX Action parameter" Q
"RTN","BPSBUTL",61,0)
 ;
"RTN","BPSBUTL",62,0)
 I $$RXAPI1^BPSUTIL1(RXIEN,.01)="" S ERROR="Prescription not found." Q
"RTN","BPSBUTL",63,0)
 I ",DE,RS,"'[(","_BWHERE_",") S ERROR="Invalid BWHERE parameter" Q
"RTN","BPSBUTL",64,0)
 ;
"RTN","BPSBUTL",65,0)
 ; Calculate the transaction IEN and see that it exists
"RTN","BPSBUTL",66,0)
 S IEN59=$$IEN59^BPSOSRX(RXIEN,BFILL,1)
"RTN","BPSBUTL",67,0)
 I '$D(^BPST(IEN59,0)) Q
"RTN","BPSBUTL",68,0)
 ;
"RTN","BPSBUTL",69,0)
 ; Get claim data
"RTN","BPSBUTL",70,0)
 S CLAIM=$P(^BPST(IEN59,0),"^",4)
"RTN","BPSBUTL",71,0)
 I 'CLAIM S ERROR="Claim not found in BPS Transaction" Q
"RTN","BPSBUTL",72,0)
 D GETS^DIQ("9002313.02",CLAIM,"400*;401;402;426","","CLAIMNFO")
"RTN","BPSBUTL",73,0)
 S BPSARRY("FILL NUMBER")=+BFILL
"RTN","BPSBUTL",74,0)
 S BPSARRY("DOS")=$G(CLAIMNFO("9002313.02",CLAIM_",","401"))
"RTN","BPSBUTL",75,0)
 I BPSARRY("DOS") S BPSARRY("DOS")=BPSARRY("DOS")-17000000
"RTN","BPSBUTL",76,0)
 ;
"RTN","BPSBUTL",77,0)
 ; Get prescription data
"RTN","BPSBUTL",78,0)
 S FILLNUM=BPSARRY("FILL NUMBER")
"RTN","BPSBUTL",79,0)
 S DFN=$$RXAPI1^BPSUTIL1(RXIEN,2,"I")
"RTN","BPSBUTL",80,0)
 S BPSARRY("FILLED BY")=$$RXAPI1^BPSUTIL1(RXIEN,16,"I")
"RTN","BPSBUTL",81,0)
 S BPSARRY("PRESCRIPTION")=RXIEN
"RTN","BPSBUTL",82,0)
 S BPSARRY("BILLED")=$$DFF2EXT^BPSECFM($P(CLAIMNFO("9002313.0201","1,"_CLAIM_",","426"),"DQ",2))
"RTN","BPSBUTL",83,0)
 S BPSARRY("CLAIMID")=$P(CLAIMNFO("9002313.0201","1,"_CLAIM_",","402"),"D2",2)
"RTN","BPSBUTL",84,0)
 S BPSARRY("PLAN")=$P(^BPST(IEN59,10,1,0),"^")
"RTN","BPSBUTL",85,0)
 S BPSARRY("STATUS")="CLOSED"
"RTN","BPSBUTL",86,0)
 S BPSARRY("PAID")=0
"RTN","BPSBUTL",87,0)
 S BPSARRY("RELEASE DATE")=$S(FILLNUM=0:$$RXAPI1^BPSUTIL1(RXIEN,31,"I"),1:$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,FILLNUM,17,"I"))
"RTN","BPSBUTL",88,0)
 S BPSARRY("USER")=.5
"RTN","BPSBUTL",89,0)
 S BPSARRY("EPHARM")=$$GET1^DIQ(9002313.59,IEN59,1.07,"I")
"RTN","BPSBUTL",90,0)
 S BPSARRY("RXCOB")=$$COB59^BPSUTIL2(IEN59)
"RTN","BPSBUTL",91,0)
 ;
"RTN","BPSBUTL",92,0)
 ; Determine the reversal reason based on the BWHERE value
"RTN","BPSBUTL",93,0)
 I BWHERE="RS" S REASON="PRESCRIPTION NOT RELEASED"
"RTN","BPSBUTL",94,0)
 I BWHERE="DE" S REASON="PRESCRIPTION DELETED"
"RTN","BPSBUTL",95,0)
 I REASON]"" S BPSARRY("CLOSE REASON")=$O(^IBE(356.8,"B",REASON,0))
"RTN","BPSBUTL",96,0)
 ;
"RTN","BPSBUTL",97,0)
 ;if a refill was deleted while RX is still active (not deleted) then send DELETION OF REFILL comment for CT record
"RTN","BPSBUTL",98,0)
 I BWHERE="DE",$$RXSTATUS^BPSSCRU2(RXIEN)'=13 S BPSARRY("CLOSE COMMENT")="DELETION OF REFILL ONLY - ORIGINAL RX MAY REMAIN ACTIVE"
"RTN","BPSBUTL",99,0)
 ;
"RTN","BPSBUTL",100,0)
 ;
"RTN","BPSBUTL",101,0)
 ; Update IB
"RTN","BPSBUTL",102,0)
 S BILLNUM=$$STORESP^IBNCPDP(DFN,.BPSARRY)
"RTN","BPSBUTL",103,0)
 ;
"RTN","BPSBUTL",104,0)
 ; Update the claim file that the claim is closed and the reason why.
"RTN","BPSBUTL",105,0)
 S DIE="^BPSC(",DA=CLAIM
"RTN","BPSBUTL",106,0)
 S DR="901///1;902///"_$$NOW^XLFDT()_";903////.5;904///"_BPSARRY("CLOSE REASON")
"RTN","BPSBUTL",107,0)
 D ^DIE
"RTN","BPSBUTL",108,0)
 ;
"RTN","BPSBUTL",109,0)
 ; If this is a primary claim, check and send a bulletin if the secondary claim is open or if there
"RTN","BPSBUTL",110,0)
 ;   is a non-cancelled IB bill for the secondary claim
"RTN","BPSBUTL",111,0)
 I BPSARRY("RXCOB")=1 D BULL^BPSECMP2(RXIEN,BFILL,CLAIM,DFN,REASON,BPSARRY("CLAIMID"))
"RTN","BPSBUTL",112,0)
 Q
"RTN","BPSBUTL",113,0)
 ;
"RTN","BPSBUTL",114,0)
 ; Function to return Transaction, claim, and response IENs
"RTN","BPSBUTL",115,0)
 ; Parameters:
"RTN","BPSBUTL",116,0)
 ;    RXI: Prescription IEN
"RTN","BPSBUTL",117,0)
 ;    RXR: Fill Number
"RTN","BPSBUTL",118,0)
 ;    COB: COB Indicator
"RTN","BPSBUTL",119,0)
 ; Returns:
"RTN","BPSBUTL",120,0)
 ;    IEN59^Claim IEN^Response IEN^Reversal Claim IEN^Reversal Response IEN^Prescription/Service Ref Number from BPS CLAIMS file
"RTN","BPSBUTL",121,0)
CLAIM(RXI,RXR,COB) ;
"RTN","BPSBUTL",122,0)
 N IEN59,CLAIMIEN,RESPIEN,REVCLAIM,REVRESP,ECMENUM
"RTN","BPSBUTL",123,0)
 I '$G(RXI) Q ""
"RTN","BPSBUTL",124,0)
 ; Note that IEN59 will treat RXR="" as the original fill (0)
"RTN","BPSBUTL",125,0)
 ;   and COB="" as primary (1)
"RTN","BPSBUTL",126,0)
 S IEN59=$$IEN59^BPSOSRX(RXI,$G(RXR),$G(COB))
"RTN","BPSBUTL",127,0)
 I '$D(^BPST(IEN59,0)) Q ""
"RTN","BPSBUTL",128,0)
 S CLAIMIEN=$P(^BPST(IEN59,0),"^",4),RESPIEN=$P(^BPST(IEN59,0),"^",5)
"RTN","BPSBUTL",129,0)
 S REVCLAIM=$P($G(^BPST(IEN59,4)),"^",1),REVRESP=$P($G(^BPST(IEN59,4)),"^",2)
"RTN","BPSBUTL",130,0)
 S ECMENUM=$$ECMENUM^BPSSCRU2(IEN59)
"RTN","BPSBUTL",131,0)
 Q IEN59_U_CLAIMIEN_U_RESPIEN_U_REVCLAIM_U_REVRESP_U_ECMENUM
"RTN","BPSBUTL",132,0)
 ;
"RTN","BPSBUTL",133,0)
 ; NABP - Return the value in the Service Provider ID (201-B1) field
"RTN","BPSBUTL",134,0)
 ;   of the claim.  Note that as of the NPI release (BPS*1*2), this
"RTN","BPSBUTL",135,0)
 ;   API may return NPI instead of NABP/NCPDP
"RTN","BPSBUTL",136,0)
NABP(RXP,BFILL) ;
"RTN","BPSBUTL",137,0)
 I '$G(RXP) Q ""
"RTN","BPSBUTL",138,0)
 I $G(BFILL)="" S BFILL=0
"RTN","BPSBUTL",139,0)
 N BPSTIEN,BPSCIEN,DFILL,NABP
"RTN","BPSBUTL",140,0)
 S DFILL=$E($TR($J("",4-$L(BFILL))," ","0")_BFILL,1,4)
"RTN","BPSBUTL",141,0)
 S BPSTIEN=RXP_"."_DFILL_"1"
"RTN","BPSBUTL",142,0)
 I 'BPSTIEN Q ""
"RTN","BPSBUTL",143,0)
 S BPSCIEN=$P($G(^BPST(BPSTIEN,0)),U,4)
"RTN","BPSBUTL",144,0)
 I 'BPSCIEN Q ""
"RTN","BPSBUTL",145,0)
 S NABP=$P($G(^BPSC(BPSCIEN,200)),U)
"RTN","BPSBUTL",146,0)
 Q NABP
"RTN","BPSBUTL",147,0)
 ;
"RTN","BPSBUTL",148,0)
 ; DIVNCPDP - For a specific outpatient site, return the NPI & NCPDP.
"RTN","BPSBUTL",149,0)
 ; Note that the procedure name is misleading but when originally
"RTN","BPSBUTL",150,0)
 ;   coded, this procedure only returned NCPDP.
"RTN","BPSBUTL",151,0)
 ;
"RTN","BPSBUTL",152,0)
 ; Input
"RTN","BPSBUTL",153,0)
 ;   BPSDIV - Outpatient Site (#59)
"RTN","BPSBUTL",154,0)
 ; Output
"RTN","BPSBUTL",155,0)
 ;   "" - No BPSDIV passed in
"RTN","BPSBUTL",156,0)
 ;   NCPDP and NPI separated by a caret
"RTN","BPSBUTL",157,0)
DIVNCPDP(BPSDIV) ;
"RTN","BPSBUTL",158,0)
 N BPSPHARM,NPI,NCPDP
"RTN","BPSBUTL",159,0)
 I '$G(BPSDIV) Q "^"
"RTN","BPSBUTL",160,0)
 ;
"RTN","BPSBUTL",161,0)
 ; Get the NCPDP
"RTN","BPSBUTL",162,0)
 S NCPDP=""
"RTN","BPSBUTL",163,0)
 S BPSPHARM=$$GETPHARM^BPSUTIL(BPSDIV)
"RTN","BPSBUTL",164,0)
 I BPSPHARM S NCPDP=$$GET1^DIQ(9002313.56,BPSPHARM_",",.02)
"RTN","BPSBUTL",165,0)
 ;
"RTN","BPSBUTL",166,0)
 ; Get the NPI and validate it
"RTN","BPSBUTL",167,0)
 S NPI=+$$NPI^BPSNPI("Pharmacy_ID",BPSDIV)
"RTN","BPSBUTL",168,0)
 I NPI=-1 S NPI=""
"RTN","BPSBUTL",169,0)
 ;
"RTN","BPSBUTL",170,0)
 Q NCPDP_"^"_NPI
"RTN","BPSBUTL",171,0)
 ;
"RTN","BPSBUTL",172,0)
 ;ADDCOMM - Add a comment to a ECME claim
"RTN","BPSBUTL",173,0)
 ;Input:
"RTN","BPSBUTL",174,0)
 ; BPRX - ien in file #52 
"RTN","BPSBUTL",175,0)
 ; BPREF - refill number (0,1,2,...)
"RTN","BPSBUTL",176,0)
 ; BPRCMNT - comment text
"RTN","BPSBUTL",177,0)
 ;Output:
"RTN","BPSBUTL",178,0)
 ;  1 - okay
"RTN","BPSBUTL",179,0)
 ; -1 - failed
"RTN","BPSBUTL",180,0)
ADDCOMM(BPRX,BPREF,BPRCMNT,BPBKG) ;
"RTN","BPSBUTL",181,0)
 ;
"RTN","BPSBUTL",182,0)
 ;BPRX    (required) - Prescription IEN
"RTN","BPSBUTL",183,0)
 ;BPREF   (optional) - Refill number
"RTN","BPSBUTL",184,0)
 ;BPRCMNT (required) - Comment text
"RTN","BPSBUTL",185,0)
 ;BPBKG   (optional) - Value 1 indicates process is running in background - BPS*1*15
"RTN","BPSBUTL",186,0)
 ;
"RTN","BPSBUTL",187,0)
 N IEN59,BPNOW,BPREC,BPDA,BPERR
"RTN","BPSBUTL",188,0)
 ; Check parameters
"RTN","BPSBUTL",189,0)
 I '$G(BPRX) Q -1
"RTN","BPSBUTL",190,0)
 I $G(BPRCMNT)="" Q -1
"RTN","BPSBUTL",191,0)
 ; Get BPS Transaction number, if needed, and check for existance
"RTN","BPSBUTL",192,0)
 S IEN59=$$IEN59^BPSOSRX(BPRX,$G(BPREF),1)
"RTN","BPSBUTL",193,0)
 I IEN59="" Q -1
"RTN","BPSBUTL",194,0)
 I '$D(^BPST(IEN59)) Q -1
"RTN","BPSBUTL",195,0)
 ; Lock record and quit if you cannot get the lock
"RTN","BPSBUTL",196,0)
 L +^BPST(9002313.59111,+IEN59):10
"RTN","BPSBUTL",197,0)
 I '$T Q -1
"RTN","BPSBUTL",198,0)
 ; Create record and file data
"RTN","BPSBUTL",199,0)
 S BPNOW=$$NOW^XLFDT
"RTN","BPSBUTL",200,0)
 D INSITEM^BPSCMT01(9002313.59111,+IEN59,BPNOW)
"RTN","BPSBUTL",201,0)
 S BPREC=$O(^BPST(IEN59,11,"B",BPNOW,99999999),-1)
"RTN","BPSBUTL",202,0)
 I BPREC>0 D
"RTN","BPSBUTL",203,0)
 .;If BPBKG is passed this is a background process and user is POSTMASTER - BPS*1*15
"RTN","BPSBUTL",204,0)
 . S BPDA(9002313.59111,BPREC_","_IEN59_",",.02)=$S($G(BPBKG):.5,1:+$G(DUZ))
"RTN","BPSBUTL",205,0)
 . S BPDA(9002313.59111,BPREC_","_IEN59_",",.03)=$E($G(BPRCMNT),1,63)
"RTN","BPSBUTL",206,0)
 . D FILE^DIE("","BPDA","BPERR")
"RTN","BPSBUTL",207,0)
 L -^BPST(9002313.59111,+IEN59)
"RTN","BPSBUTL",208,0)
 ; Quit with result
"RTN","BPSBUTL",209,0)
 I BPREC>0,'$D(BPERR) Q 1
"RTN","BPSBUTL",210,0)
 Q -1
"RTN","BPSBUTL",211,0)
 ;
"RTN","BPSBUTL",212,0)
 ;REOPEN - Reopen closed claim
"RTN","BPSBUTL",213,0)
 ;Input:
"RTN","BPSBUTL",214,0)
 ; BP59 - ien in BPS TRANSACTION file
"RTN","BPSBUTL",215,0)
 ; BP02 - ien in BPS CLAIMS file
"RTN","BPSBUTL",216,0)
 ; BPREOPDT - reopen date/time 
"RTN","BPSBUTL",217,0)
 ; BPDUZ - user DUZ (#200 ien)
"RTN","BPSBUTL",218,0)
 ; BPCOMM - reopen comment text
"RTN","BPSBUTL",219,0)
 ;Output:
"RTN","BPSBUTL",220,0)
 ; 0^message_error - error
"RTN","BPSBUTL",221,0)
 ; 1 - success
"RTN","BPSBUTL",222,0)
REOPEN(BP59,BP02,BPREOPDT,BPDUZ,BPCOMM) ;
"RTN","BPSBUTL",223,0)
 N RECIENS,BPDA,ERRARR,BPREFNO,BPRXIEN,BPZ,BPSARRY,BPDFN,BPRETVAL,BPZ1
"RTN","BPSBUTL",224,0)
 S BPDFN=$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSBUTL",225,0)
 S BPREFNO=$P($G(^BPST(BP59,1)),U)
"RTN","BPSBUTL",226,0)
 I BPREFNO="" Q "0^Null Fill Number"
"RTN","BPSBUTL",227,0)
 S BPRXIEN=$P($G(^BPST(BP59,1)),U,11)
"RTN","BPSBUTL",228,0)
 I BPRXIEN="" Q "0^Null RX ien Number"
"RTN","BPSBUTL",229,0)
 ;in VA there is only one med/claim but in some cases it can different than "1"
"RTN","BPSBUTL",230,0)
 ;so take the latest one
"RTN","BPSBUTL",231,0)
 S BPZ=$O(^BPSC(BP02,400,9999999),-1)
"RTN","BPSBUTL",232,0)
 I BPRXIEN="" Q "0^Database Error"
"RTN","BPSBUTL",233,0)
 ;============
"RTN","BPSBUTL",234,0)
 ;Now update ECME database
"RTN","BPSBUTL",235,0)
 S BPRETVAL=$$UPDREOP^BPSREOP1(BP02,0,BPREOPDT,BPDUZ,BPCOMM)
"RTN","BPSBUTL",236,0)
 I +BPRETVAL=0 D  Q BPRETVAL
"RTN","BPSBUTL",237,0)
 . ;try to reverse it in case it was done partially
"RTN","BPSBUTL",238,0)
 . I $$UPDREOP^BPSREOP1(BP02,1,"@",+BPDUZ,"@")
"RTN","BPSBUTL",239,0)
 ;============
"RTN","BPSBUTL",240,0)
 ;Now call IB API for "REOPEN" event
"RTN","BPSBUTL",241,0)
 S BPSARRY("STATUS")="REOPEN"
"RTN","BPSBUTL",242,0)
 S BPSARRY("DOS")=$P($G(^BPSC(BP02,401)),U)
"RTN","BPSBUTL",243,0)
 I BPSARRY("DOS") S BPSARRY("DOS")=BPSARRY("DOS")-17000000
"RTN","BPSBUTL",244,0)
 S BPSARRY("FILL NUMBER")=BPREFNO
"RTN","BPSBUTL",245,0)
 S BPSARRY("PRESCRIPTION")=BPRXIEN
"RTN","BPSBUTL",246,0)
 S BPSARRY("CLAIMID")=$$CONVCLID^BPSSCRU6($P($G(^BPSC(BP02,400,+BPZ,400)),U,2))
"RTN","BPSBUTL",247,0)
 S BPSARRY("DRUG")=$$DRUGIEN^BPSSCRU6(BPRXIEN,BPDFN)
"RTN","BPSBUTL",248,0)
 S BPSARRY("PLAN")=$P($G(^BPST(BP59,10,1,0)),"^")
"RTN","BPSBUTL",249,0)
 S BPSARRY("USER")=BPDUZ
"RTN","BPSBUTL",250,0)
 S BPSARRY("REOPEN COMMENT")=BPCOMM
"RTN","BPSBUTL",251,0)
 S BPSARRY("EPHARM")=$$GET1^DIQ(9002313.59,BP59,1.07,"I")
"RTN","BPSBUTL",252,0)
 S BPSARRY("RXCOB")=$$COB59^BPSUTIL2(BP59)
"RTN","BPSBUTL",253,0)
 S BPRETVAL=$$STORESP^IBNCPDP(BPDFN,.BPSARRY)
"RTN","BPSBUTL",254,0)
 ;if successful
"RTN","BPSBUTL",255,0)
 I +BPRETVAL>0 Q "1^ReOpening Claim: "_$P($G(^BPSC(BP02,0)),U)_" ... OK"
"RTN","BPSBUTL",256,0)
 ;===========
"RTN","BPSBUTL",257,0)
 ;if it was unsuccessful
"RTN","BPSBUTL",258,0)
 ;reverse ECME database (keep the user who made the attempt)
"RTN","BPSBUTL",259,0)
 I $$UPDREOP^BPSREOP1(BP02,1,"@",+BPDUZ,"@")
"RTN","BPSBUTL",260,0)
 ;return IB error message
"RTN","BPSBUTL",261,0)
 Q BPRETVAL
"RTN","BPSBUTL",262,0)
 ;
"RTN","BPSBUTL",263,0)
GETDAT(RX,FIL,COB,LDOS,LDSUP) ;Returns Last Date of Service and Last Days Supply
"RTN","BPSBUTL",264,0)
 ;Input:
"RTN","BPSBUTL",265,0)
 ;  RX (req)  --> RX IEN
"RTN","BPSBUTL",266,0)
 ;  FIL (req) --> Fill number
"RTN","BPSBUTL",267,0)
 ;  COB (opt) --> Coordination of Benifits indicator; default is 1
"RTN","BPSBUTL",268,0)
 ;Output:
"RTN","BPSBUTL",269,0)
 ;  LDOS  --> Last Date of Service
"RTN","BPSBUTL",270,0)
 ;  LDSUP --> Last Days Supply
"RTN","BPSBUTL",271,0)
 ;
"RTN","BPSBUTL",272,0)
 Q:'($G(RX))!($G(FIL)="")
"RTN","BPSBUTL",273,0)
 S:'$G(COB) COB=1
"RTN","BPSBUTL",274,0)
 N IEN59,IEN02,STAT,IEN57
"RTN","BPSBUTL",275,0)
 S IEN02=""
"RTN","BPSBUTL",276,0)
 S IEN59=$$IEN59^BPSOSRX(RX,FIL,COB)
"RTN","BPSBUTL",277,0)
 S STAT=$P($G(^BPST(IEN59,0)),U,2)
"RTN","BPSBUTL",278,0)
 I STAT=99 S IEN02=$P($G(^BPST(IEN59,0)),U,4)
"RTN","BPSBUTL",279,0)
 I IEN02="" D
"RTN","BPSBUTL",280,0)
 . S IEN57=""
"RTN","BPSBUTL",281,0)
 . F  S IEN57=$O(^BPSTL("B",IEN59,IEN57),-1) Q:IEN57=""!(IEN02)  D
"RTN","BPSBUTL",282,0)
 .. S STAT=$P($G(^BPSTL(IEN57,0)),U,2)
"RTN","BPSBUTL",283,0)
 .. I STAT=99 S IEN02=$P($G(^BPSTL(IEN57,0)),U,4)
"RTN","BPSBUTL",284,0)
 I 'IEN02 S (LDOS,LDSUP)="" Q
"RTN","BPSBUTL",285,0)
 S LDOS=$$GET1^DIQ(9002313.02,IEN02,401,"E")  ;LAST DATE OF SERVICE
"RTN","BPSBUTL",286,0)
 I LDOS S LDOS=LDOS-17000000    ;CONVERT DATE TO FILEMAN FORMAT
"RTN","BPSBUTL",287,0)
 S LDSUP=$$GET1^DIQ(9002313.0201,"1,"_IEN02,405,"I")  ;LAST DAYS SUPPLY
"RTN","BPSBUTL",288,0)
 I LDSUP'="" S LDSUP=+$E(LDSUP,3,99)      ; remove the "D5" NCPDP field ID  (bps*1*15)
"RTN","BPSBUTL",289,0)
 Q
"RTN","BPSBUTL",290,0)
 ;
"RTN","BPSBUTL",291,0)
NFLDT(RX,FIL,COB) ;Returns Next Avail Fill Date (B04-BT) from ECME - BPS*1.0*15
"RTN","BPSBUTL",292,0)
 ;Input:                                                                
"RTN","BPSBUTL",293,0)
 ;  RX (req)  --> RX IEN                                                
"RTN","BPSBUTL",294,0)
 ;  FIL (req) --> Fill number                                           
"RTN","BPSBUTL",295,0)
 ;  COB (opt) --> Coordination of Benefits indicator; default is 1      
"RTN","BPSBUTL",296,0)
 ;Output:
"RTN","BPSBUTL",297,0)
 ;  NFLDT --> Next Avail Fill Date                                          
"RTN","BPSBUTL",298,0)
 Q:'$G(RX)!($G(FIL)="") ""
"RTN","BPSBUTL",299,0)
 S:'$G(COB) COB=1
"RTN","BPSBUTL",300,0)
 N IEN59,IEN02,STAT,NFLDT,IEN03
"RTN","BPSBUTL",301,0)
 S IEN02=""
"RTN","BPSBUTL",302,0)
 S IEN59=$$IEN59^BPSOSRX(RX,FIL,COB)
"RTN","BPSBUTL",303,0)
 S IEN03=+$P($G(^BPST(IEN59,0)),U,5),NFLDT=""
"RTN","BPSBUTL",304,0)
 S:IEN03 NFLDT=$$GET1^DIQ(9002313.0301,"1,"_IEN03,2004,"I") ;NEXT FILL DATE
"RTN","BPSBUTL",305,0)
 S:NFLDT NFLDT=NFLDT-17000000 ;CONVERT DATE TO FILEMAN FORMAT
"RTN","BPSBUTL",306,0)
 Q NFLDT
"RTN","BPSBUTL",307,0)
 ;
"RTN","BPSBUTL",308,0)
BBILL(RX,RFILL,COB) ;Return Back Bill Indicator for Pharmacy - BPS*1.0*15
"RTN","BPSBUTL",309,0)
 N IEN59,RXACT
"RTN","BPSBUTL",310,0)
 ;Return 0 if no RXI value input 
"RTN","BPSBUTL",311,0)
 I '$G(RX) Q 0
"RTN","BPSBUTL",312,0)
 ; Note that $$IEN59 will treat RFILL="" as the original fill (0)
"RTN","BPSBUTL",313,0)
 S IEN59=$$IEN59^BPSOSRX(RX,$G(RFILL),$G(COB))
"RTN","BPSBUTL",314,0)
 ;No transaction found return 0
"RTN","BPSBUTL",315,0)
 I '$D(^BPST(IEN59,0)) Q 0
"RTN","BPSBUTL",316,0)
 ;Determine if RX ACTION (field #1201) is Back Bill
"RTN","BPSBUTL",317,0)
 S RXACT=$P($G(^BPST(IEN59,12)),U)
"RTN","BPSBUTL",318,0)
 ;Back Bill code not found return 0
"RTN","BPSBUTL",319,0)
 I RXACT'="BB",RXACT'="P2",RXACT'="P2S" Q 0
"RTN","BPSBUTL",320,0)
 ;Otherwise return Back Bill indicator
"RTN","BPSBUTL",321,0)
 Q 1
"RTN","BPSBUTL",322,0)
 ;
"RTN","BPSBUTL",323,0)
AMT(RX,FIL,COB) ; Return Gross Amount Due - BPS*1*15
"RTN","BPSBUTL",324,0)
 ;  RX - rx ien
"RTN","BPSBUTL",325,0)
 ; FIL - fill#, defaults to original fill if not passed in
"RTN","BPSBUTL",326,0)
 ; COB - cob payer sequence, defaults to 1 if not passed in
"RTN","BPSBUTL",327,0)
 ;
"RTN","BPSBUTL",328,0)
 N AMT,IEN59,QN
"RTN","BPSBUTL",329,0)
 S AMT=""
"RTN","BPSBUTL",330,0)
 I '$G(RX) G AMTX
"RTN","BPSBUTL",331,0)
 S IEN59=$$IEN59^BPSOSRX(RX,$G(FIL),$G(COB))  ; ien to BPS Transaction file
"RTN","BPSBUTL",332,0)
 I '$D(^BPST(IEN59,0)) G AMTX                 ; make sure it exists
"RTN","BPSBUTL",333,0)
 S QN=+$O(^BPST(IEN59,10,0)) I 'QN G AMTX     ; get 9002313.59902 subfile ien
"RTN","BPSBUTL",334,0)
 S AMT=+$P($G(^BPST(IEN59,10,QN,2)),U,4)      ; gross amount due, field 902.15
"RTN","BPSBUTL",335,0)
AMTX ;
"RTN","BPSBUTL",336,0)
 Q AMT
"RTN","BPSBUTL",337,0)
 ;
"RTN","BPSBUTL",338,0)
ELIG(RX,FIL,COB) ; Veteran Eligibility - BPS*1*15
"RTN","BPSBUTL",339,0)
 ; RX  - rx ien
"RTN","BPSBUTL",340,0)
 ; FIL - fill#, defaults to original fill if not passed in
"RTN","BPSBUTL",341,0)
 ; COB - cob payer sequence, defaults to 1 if not passed in
"RTN","BPSBUTL",342,0)
 ;
"RTN","BPSBUTL",343,0)
 Q:'$G(RX) ""
"RTN","BPSBUTL",344,0)
 ; ien to BPS Transaction file
"RTN","BPSBUTL",345,0)
 N IEN59 S IEN59=$$IEN59^BPSOSRX(RX,$G(FIL),$G(COB)) Q:'IEN59 ""
"RTN","BPSBUTL",346,0)
 Q:'$D(^BPST(IEN59,0)) ""
"RTN","BPSBUTL",347,0)
 ; ELIGIBILITY field 901.04
"RTN","BPSBUTL",348,0)
 Q $P($G(^BPST(IEN59,9)),U,4)
"RTN","BPSBUTL",349,0)
 ;
"RTN","BPSBUTL",350,0)
GETBAMT(RXIEN,FILL,COB)  ; Retrieve the billed amount
"RTN","BPSBUTL",351,0)
 ; RXIEN = Prescription ien (required)
"RTN","BPSBUTL",352,0)
 ; FILL# = Fill Number (optional, defaults to latest fill)
"RTN","BPSBUTL",353,0)
 ; COB = Coordination of Benefits (optional, defaults to 1)
"RTN","BPSBUTL",354,0)
 N X,BAMT,CLAIMIEN
"RTN","BPSBUTL",355,0)
 S X=$$CLAIM(RXIEN,$G(FILL),$G(COB))
"RTN","BPSBUTL",356,0)
 S CLAIMIEN=$P(X,U,2)
"RTN","BPSBUTL",357,0)
 S BAMT=$$TOTPRICE^BPSSCRLG(CLAIMIEN)
"RTN","BPSBUTL",358,0)
 Q BAMT
"RTN","BPSBUTL",359,0)
 ;
"RTN","BPSBUTL",360,0)
RESUBMIT(RX,REFILL,COB) ; Return Resubmit indicator for Pharmacy - BPS*1*20.
"RTN","BPSBUTL",361,0)
 N BPSIEN59,BPSRXACT
"RTN","BPSBUTL",362,0)
 I '$G(RX) Q 0
"RTN","BPSBUTL",363,0)
 ;
"RTN","BPSBUTL",364,0)
 ; Determine BPS Transaction number.  If none, Quit with '0'.
"RTN","BPSBUTL",365,0)
 ;
"RTN","BPSBUTL",366,0)
 S BPSIEN59=$$IEN59^BPSOSRX(RX,$G(REFILL),$G(COB))
"RTN","BPSBUTL",367,0)
 I 'BPSIEN59 Q 0
"RTN","BPSBUTL",368,0)
 I '$D(^BPST(BPSIEN59,0)) Q 0
"RTN","BPSBUTL",369,0)
 ;
"RTN","BPSBUTL",370,0)
 ; Pull the RX Action from the BPS Transaction.  If it's not one that
"RTN","BPSBUTL",371,0)
 ; indicates resubmission from the ECME User Screen, then Quit with
"RTN","BPSBUTL",372,0)
 ; '0'.  Otherwise, Quit with '1'.
"RTN","BPSBUTL",373,0)
 ;
"RTN","BPSBUTL",374,0)
 S BPSRXACT=$$GET1^DIQ(9002313.59,BPSIEN59_",",1201)
"RTN","BPSBUTL",375,0)
 I ",ERES,ERWV,ERNB,"'[(","_BPSRXACT_",") Q 0
"RTN","BPSBUTL",376,0)
 Q 1
"RTN","BPSBUTL",377,0)
 ;
"RTN","BPSBUTL",378,0)
GETCOB(RXIEN,FILL) ; Retrieve the COB payer sequence for usage by PSO
"RTN","BPSBUTL",379,0)
 ;   Input:  RXIEN and FILL (both are required)
"RTN","BPSBUTL",380,0)
 ;  Output:  Function value will be one of the following
"RTN","BPSBUTL",381,0)
 ;           ""  (if the prescription fill cannot be found in BPS Transaction)
"RTN","BPSBUTL",382,0)
 ;           -1  (when there are multiple COB's/payers found in BPS Transaction)
"RTN","BPSBUTL",383,0)
 ;           Otherwise,
"RTN","BPSBUTL",384,0)
 ;           COB#^BPS Transaction IEN
"RTN","BPSBUTL",385,0)
 N RET,PRI59,SEC59
"RTN","BPSBUTL",386,0)
 S RET=""
"RTN","BPSBUTL",387,0)
 I '$G(RXIEN) G GETCOBX
"RTN","BPSBUTL",388,0)
 I $G(FILL)="" G GETCOBX
"RTN","BPSBUTL",389,0)
 ;
"RTN","BPSBUTL",390,0)
 S PRI59=+$$IEN59^BPSOSRX(RXIEN,FILL,1)   ; possible primary BPS transaction ien
"RTN","BPSBUTL",391,0)
 S SEC59=+$$IEN59^BPSOSRX(RXIEN,FILL,2)   ; possible secondary BPS transaction ien
"RTN","BPSBUTL",392,0)
 ;
"RTN","BPSBUTL",393,0)
 I $D(^BPST(PRI59)),$D(^BPST(SEC59)) S RET=-1 G GETCOBX   ; both payers exist, get out
"RTN","BPSBUTL",394,0)
 I $D(^BPST(PRI59)) S RET=1_U_PRI59 G GETCOBX
"RTN","BPSBUTL",395,0)
 I $D(^BPST(SEC59)) S RET=2_U_SEC59 G GETCOBX
"RTN","BPSBUTL",396,0)
 ;
"RTN","BPSBUTL",397,0)
GETCOBX ;
"RTN","BPSBUTL",398,0)
 Q RET
"RTN","BPSBUTL",399,0)
 ;
"RTN","BPSCMT01")
0^4^B22342250
"RTN","BPSCMT01",1,0)
BPSCMT01 ;BHAM ISC/SS - ECME ADD/VIEW COMMENTS ;05-APR-05
"RTN","BPSCMT01",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,20**;JUN 2004;Build 27
"RTN","BPSCMT01",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSCMT01",4,0)
 ;USER SCREEN
"RTN","BPSCMT01",5,0)
 Q
"RTN","BPSCMT01",6,0)
 ;
"RTN","BPSCMT01",7,0)
ADDP ;entry point for Add Pharmacy option in Add/View screen
"RTN","BPSCMT01",8,0)
 N BPSCMTRX
"RTN","BPSCMT01",9,0)
 S BPSCMTRX=1
"RTN","BPSCMT01",10,0)
 ;
"RTN","BPSCMT01",11,0)
ADD ;entry point for Add option in Add/View screen
"RTN","BPSCMT01",12,0)
 ;full screen mode
"RTN","BPSCMT01",13,0)
 D FULL^VALM1
"RTN","BPSCMT01",14,0)
 D ADDCMT
"RTN","BPSCMT01",15,0)
 S VALMBCK="R"
"RTN","BPSCMT01",16,0)
 Q
"RTN","BPSCMT01",17,0)
 ;make element for the patient
"RTN","BPSCMT01",18,0)
 ;BPLINE - line number in LM ARRAY (by ref)
"RTN","BPSCMT01",19,0)
 ;BPTMP - VALMAR (TMP global for LM)
"RTN","BPSCMT01",20,0)
 ;BPDFN - patient's DFN
"RTN","BPSCMT01",21,0)
 ;BPSINSUR - ;patient's insurance ien^name^phone
"RTN","BPSCMT01",22,0)
 ;BPLMIND - passed by ref - current patient(/insurance) index ( to make 1, 2,etc)
"RTN","BPSCMT01",23,0)
 ;BPDRIND - passed by ref - current claim level index ( to make .1, .2, .10,... .20,... )
"RTN","BPSCMT01",24,0)
 ;BPPREV - to store previous data to update patient summary line
"RTN","BPSCMT01",25,0)
MKPATELM(BPLINE,BPTMP,BPDFN,BPSINSUR,BPLMIND,BPDRIND,BPPREV) ;*/
"RTN","BPSCMT01",26,0)
 N BPSSTR,BPLNS,BPSTAT
"RTN","BPSCMT01",27,0)
 ;PATIENT SUMMARY level
"RTN","BPSCMT01",28,0)
 ;-------- first process previous patient & insurance group
"RTN","BPSCMT01",29,0)
 ;determine patient summary statuses for the previous "patient" group
"RTN","BPSCMT01",30,0)
 ;update the record for previous patient summary after we went thru all his claims
"RTN","BPSCMT01",31,0)
 I BPLMIND>0,+BPPREV=BPLMIND D UPDPREV(BPTMP,BPLMIND,BPPREV)
"RTN","BPSCMT01",32,0)
 ;process new "patient & insurance" group ------------------
"RTN","BPSCMT01",33,0)
 S BPDRIND=0
"RTN","BPSCMT01",34,0)
 S BPLMIND=(BPLMIND\1)+1
"RTN","BPSCMT01",35,0)
 ;save the all necessary data for the patient & insurance to use as previous for STAT4PAT later on
"RTN","BPSCMT01",36,0)
 S BPPREV=BPLMIND_U_BPLINE_U_BPDFN_U_$$PATINF^BPSSCR02(BPDFN,BPSINSUR)_U_(+BPSINSUR)
"RTN","BPSCMT01",37,0)
 S BPSSTR=$$LJ^BPSSCR02(BPLMIND,4)_$P(BPPREV,U,4)
"RTN","BPSCMT01",38,0)
 D SAVEARR^BPSSCR02(BPTMP,BPLMIND,BPDRIND,BPDFN,0,BPLINE,BPSSTR,+BPSINSUR)
"RTN","BPSCMT01",39,0)
 S BPLINE=BPLINE+1
"RTN","BPSCMT01",40,0)
 Q
"RTN","BPSCMT01",41,0)
 ;
"RTN","BPSCMT01",42,0)
 ;/**
"RTN","BPSCMT01",43,0)
 ;update patient summary info in LM array
"RTN","BPSCMT01",44,0)
UPDPREV(BPTMP,BPLMIND,BPPREV) ;
"RTN","BPSCMT01",45,0)
 N BPSSTR
"RTN","BPSCMT01",46,0)
 ;update the record for previous patient summary after we went thru all his claims
"RTN","BPSCMT01",47,0)
 S BPSSTR=$$LJ^BPSSCR02(BPLMIND,4)_$P(BPPREV,U,4)_" "_$$STAT4PAT^BPSSCR02(BPLMIND)
"RTN","BPSCMT01",48,0)
 D SAVEARR^BPSSCR02(BPTMP,BPLMIND,0,+$P(BPPREV,U,3),0,+$P(BPPREV,U,2),BPSSTR,+$P(BPPREV,U,5))
"RTN","BPSCMT01",49,0)
 Q
"RTN","BPSCMT01",50,0)
 ;/**
"RTN","BPSCMT01",51,0)
 ;make array element for a claim
"RTN","BPSCMT01",52,0)
 ;BPLINE - line number in LM ARRAY (by ref)
"RTN","BPSCMT01",53,0)
 ;BPTMP - VALMAR (TMP global for LM)
"RTN","BPSCMT01",54,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSCMT01",55,0)
 ;BPDFN - patient's DFN
"RTN","BPSCMT01",56,0)
 ;BPSINSUR - ;patient's insurance ien
"RTN","BPSCMT01",57,0)
 ;BPLMIND - passed by ref - current patient(/insurance) index ( to make 1, 2,etc)
"RTN","BPSCMT01",58,0)
 ;BPDRIND - passed by ref - current claim level index ( to make .1, .2, .10,... .20,... )
"RTN","BPSCMT01",59,0)
 ;BPPREV - to store previous data to update patient summary line
"RTN","BPSCMT01",60,0)
MKCLMELM(BPLINE,BPTMP,BP59,BPDFN,BPSINSUR,BPLMIND,BPDRIND,BPPREV) ;*/
"RTN","BPSCMT01",61,0)
 N BPSSTR,BPLNS,BPSTAT
"RTN","BPSCMT01",62,0)
 ;CLAIMS level
"RTN","BPSCMT01",63,0)
 I +$O(@BPTMP@("LMIND",BPLMIND,BPDRIND,BPDFN,0))'=BP59 D
"RTN","BPSCMT01",64,0)
 . S BPDRIND=BPDRIND+1
"RTN","BPSCMT01",65,0)
 . S BPSSTR="  "_$$LJ^BPSSCR02(+$P(BPLMIND,".")_"."_BPDRIND,5)_" "_$$CLAIMINF^BPSSCR02(BP59)
"RTN","BPSCMT01",66,0)
 . D SAVEARR^BPSSCR02(BPTMP,BPLMIND,BPDRIND,BPDFN,BP59,BPLINE,BPSSTR,BPSINSUR)
"RTN","BPSCMT01",67,0)
 . S BPLINE=BPLINE+1
"RTN","BPSCMT01",68,0)
 . N BPARR,X
"RTN","BPSCMT01",69,0)
 . ;use ADDINF^BPSSCR03 to get comments
"RTN","BPSCMT01",70,0)
 . S BPLNS=$$ADDINF^BPSSCR03(BP59,.BPARR,74,"C")
"RTN","BPSCMT01",71,0)
 . F X=1:1:BPLNS D
"RTN","BPSCMT01",72,0)
 . . I $G(BPARR(X))="" Q
"RTN","BPSCMT01",73,0)
 . . D SAVEARR^BPSSCR02(BPTMP,BPLMIND,BPDRIND,BPDFN,BP59,BPLINE,"      "_BPARR(X),BPSINSUR)
"RTN","BPSCMT01",74,0)
 . . S BPLINE=BPLINE+1
"RTN","BPSCMT01",75,0)
 Q
"RTN","BPSCMT01",76,0)
 ;/**
"RTN","BPSCMT01",77,0)
 ;input:
"RTN","BPSCMT01",78,0)
 ; BPDFLT1 - default selection (optional)
"RTN","BPSCMT01",79,0)
 ;add comment
"RTN","BPSCMT01",80,0)
 ;the user can select
"RTN","BPSCMT01",81,0)
 ; a patient - comment will be added to all claims
"RTN","BPSCMT01",82,0)
 ; a claim - comment will be added only to this claim
"RTN","BPSCMT01",83,0)
ADDCMT ;*/
"RTN","BPSCMT01",84,0)
 N BPRET,BPSEL,BP59ARR,BPRCMNT,BP59,BPNOW,BPLCK,BPREC,BPDFLT1
"RTN","BPSCMT01",85,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSCMT01",86,0)
 D FULL^VALM1
"RTN","BPSCMT01",87,0)
 ;select an item
"RTN","BPSCMT01",88,0)
 W !,"Enter the line number for which you wish to Add comments."
"RTN","BPSCMT01",89,0)
 S BPDFLT1=$G(^TMP("BPSCMT",$J,"VALM","SELLN"))
"RTN","BPSCMT01",90,0)
 S BPDFLT1=$P(BPDFLT1,U,6)_"."_$P(BPDFLT1,U,7)
"RTN","BPSCMT01",91,0)
 S BPSEL=$$ASKLINE^BPSSCRU4("Select item","PC","Please select Patient Line to add a comment to all RXs or a SINGLE RXs",$G(BPDFLT1))
"RTN","BPSCMT01",92,0)
 I BPSEL<1 S VALMBCK="R" Q
"RTN","BPSCMT01",93,0)
 ;if single claim
"RTN","BPSCMT01",94,0)
 I $P(BPSEL,U,7)>0 S BP59ARR(+$P(BPSEL,U,4))=""
"RTN","BPSCMT01",95,0)
 E  D MKPATARR^BPSCMT(VALMAR,+$P(BPSEL,U,6),.BP59ARR)
"RTN","BPSCMT01",96,0)
 S BPRCMNT=$$COMMENT^BPSSCRCL("Enter Comment",60)
"RTN","BPSCMT01",97,0)
 I (BPRCMNT="^")!($L(BPRCMNT)=0)!(BPRCMNT?1" "." ") Q
"RTN","BPSCMT01",98,0)
 S BP59=0
"RTN","BPSCMT01",99,0)
 F  S BP59=$O(BP59ARR(BP59)) Q:+BP59=0  D
"RTN","BPSCMT01",100,0)
 . N BPDA,BPERR,%
"RTN","BPSCMT01",101,0)
 . D NOW^%DTC
"RTN","BPSCMT01",102,0)
 . S BPNOW=%
"RTN","BPSCMT01",103,0)
 . L +^BPST(9002313.59111,+BP59):10
"RTN","BPSCMT01",104,0)
 . S BPLCK=$T
"RTN","BPSCMT01",105,0)
 . I 'BPLCK Q  ;quit
"RTN","BPSCMT01",106,0)
 . D INSITEM(9002313.59111,+BP59,BPNOW)
"RTN","BPSCMT01",107,0)
 . S BPREC=$O(^BPST(BP59,11,"B",BPNOW,0))
"RTN","BPSCMT01",108,0)
 . I BPREC>0 D
"RTN","BPSCMT01",109,0)
 . . S BPDA(9002313.59111,BPREC_","_BP59_",",.02)=+$G(DUZ)
"RTN","BPSCMT01",110,0)
 . . S BPDA(9002313.59111,BPREC_","_BP59_",",.03)=$G(BPRCMNT)
"RTN","BPSCMT01",111,0)
 . . I +$G(BPSCMTRX)=1 S BPDA(9002313.59111,BPREC_","_BP59_",",.04)=1
"RTN","BPSCMT01",112,0)
 . . D FILE^DIE("","BPDA","BPERR")
"RTN","BPSCMT01",113,0)
 . I BPLCK L -^BPST(9002313.59111,+BP59)
"RTN","BPSCMT01",114,0)
 D REDRWCMT^BPSCMT ;update the content of the screen and display it
"RTN","BPSCMT01",115,0)
 S ^TMP("BPSSCR",$J,"VALM","UPDATE")=1
"RTN","BPSCMT01",116,0)
 Q
"RTN","BPSCMT01",117,0)
 ;
"RTN","BPSCMT01",118,0)
 ;/**
"RTN","BPSCMT01",119,0)
 ;BPSFILE - subfile# (9002313.59111) for comment
"RTN","BPSCMT01",120,0)
 ;BPIEN - ien for file in which the new subfile entry will be inserted
"RTN","BPSCMT01",121,0)
 ;BPVAL01 - .01 value for the new entry
"RTN","BPSCMT01",122,0)
INSITEM(BPSFILE,BPIEN,BPVAL01) ;*/
"RTN","BPSCMT01",123,0)
 N BPSSI,BPIENS,BPFDA,BPER
"RTN","BPSCMT01",124,0)
 S BPIENS="+1,"_BPIEN_","
"RTN","BPSCMT01",125,0)
 S BPFDA(BPSFILE,BPIENS,.01)=BPVAL01
"RTN","BPSCMT01",126,0)
 D UPDATE^DIE("","BPFDA","BPSSI","BPER")
"RTN","BPSCMT01",127,0)
 I $D(BPER) D BMES^XPDUTL(BPER("DIERR",1,"TEXT",1))
"RTN","BPSCMT01",128,0)
 Q
"RTN","BPSCMT01",129,0)
 ;
"RTN","BPSCMT01",130,0)
 ;Function to return username data from NEW PERSON file VA(200)
"RTN","BPSCMT01",131,0)
 ; Parameter
"RTN","BPSCMT01",132,0)
 ;  BPSDUZ - IEN of NEW PERSON file
"RTN","BPSCMT01",133,0)
 ;  
"RTN","BPSCMT01",134,0)
 ; Returns
"RTN","BPSCMT01",135,0)
 ;  Username in format of Lastname, Firstname MI
"RTN","BPSCMT01",136,0)
USERNAM(BPSDUZ) ; Return username from NEW PERSON file
"RTN","BPSCMT01",137,0)
 N BPSNMI,BPSNMO
"RTN","BPSCMT01",138,0)
 I '$G(BPSDUZ) Q ""
"RTN","BPSCMT01",139,0)
 S BPSNMI=$$VA200NM^BPSJUTL(+BPSDUZ,"")
"RTN","BPSCMT01",140,0)
 I $G(BPSNMI)="" Q ""
"RTN","BPSCMT01",141,0)
 Q:$P(BPSNMI,U)="" ""
"RTN","BPSCMT01",142,0)
 S BPSNMO=$P(BPSNMI,U)
"RTN","BPSCMT01",143,0)
 Q:$P(BPSNMI,U,2)="" BPSNMO
"RTN","BPSCMT01",144,0)
 S BPSNMO=BPSNMO_", "_$P(BPSNMI,U,2)
"RTN","BPSCMT01",145,0)
 Q:$P(BPSNMI,U,3)="" BPSNMO
"RTN","BPSCMT01",146,0)
 S BPSNMO=BPSNMO_" "_$E($P(BPSNMI,U,3),1)
"RTN","BPSCMT01",147,0)
 Q BPSNMO
"RTN","BPSECA8")
0^46^B25111830
"RTN","BPSECA8",1,0)
BPSECA8 ;BHAM ISC/FCS/DRS/VA/DLF - construct a claim reversal ;05/17/04
"RTN","BPSECA8",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,10,12,11,15,20**;JUN 2004;Build 27
"RTN","BPSECA8",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSECA8",4,0)
 ;
"RTN","BPSECA8",5,0)
 ;External reference to $$PLANEPS^IBNCPDPU supported by IA 5572
"RTN","BPSECA8",6,0)
 ;
"RTN","BPSECA8",7,0)
 Q
"RTN","BPSECA8",8,0)
 ;
"RTN","BPSECA8",9,0)
REVERSE(IEN59) ;
"RTN","BPSECA8",10,0)
 ; Function to build a Reversal claim by copying selected data from the Billing
"RTN","BPSECA8",11,0)
 ;   Request into the new Reversal Claim record
"RTN","BPSECA8",12,0)
 ;
"RTN","BPSECA8",13,0)
 ; Input Parameter
"RTN","BPSECA8",14,0)
 ;   IEN59 - Transaction number
"RTN","BPSECA8",15,0)
 ; Returns
"RTN","BPSECA8",16,0)
 ;   REVIEN (0 if unsuccessful or IEN of the Reversal Claim)
"RTN","BPSECA8",17,0)
 ;
"RTN","BPSECA8",18,0)
 Q:$G(IEN59)="" 0  ; required
"RTN","BPSECA8",19,0)
 ;
"RTN","BPSECA8",20,0)
 N BPS,BPSFORM,C,CLAIM,CLAIMIEN,DA,DIC,DIE,DIQ,DLAYGO,DR,I,L,POS,REVIEN,RXMULT,TMP,UERETVAL
"RTN","BPSECA8",21,0)
 N VERSION,FLD402,X,Y,COB,REC,FN,FDA,MSG,IENS,PLAN,PLANSHT,TRANSHT,SHEETSRC,IEN5902
"RTN","BPSECA8",22,0)
 ;
"RTN","BPSECA8",23,0)
 S CLAIM=9002313.02,RXMULT=9002313.0201
"RTN","BPSECA8",24,0)
 ;
"RTN","BPSECA8",25,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSECA8",26,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Gathering claim information")
"RTN","BPSECA8",27,0)
 ;
"RTN","BPSECA8",28,0)
 ; Get Claim and multiple POS
"RTN","BPSECA8",29,0)
 S CLAIMIEN=$P(^BPST(IEN59,0),U,4)
"RTN","BPSECA8",30,0)
 I CLAIMIEN="" Q 0
"RTN","BPSECA8",31,0)
 S POS=$O(^BPSC(CLAIMIEN,400,0))
"RTN","BPSECA8",32,0)
 I POS="" Q 0
"RTN","BPSECA8",33,0)
 ;
"RTN","BPSECA8",34,0)
 ; Get the reversal payer sheets from the Pharmacy Plan and the BPS Transaction
"RTN","BPSECA8",35,0)
 S (BPSFORM,PLANSHT,SHEETSRC)=""
"RTN","BPSECA8",36,0)
 S IEN5902=$$GET1^DIQ(9002313.59,IEN59,901,"I")
"RTN","BPSECA8",37,0)
 I 'IEN5902 S IEN5902=1
"RTN","BPSECA8",38,0)
 S PLAN=$$GET1^DIQ(9002313.59902,IEN5902_","_IEN59_",",".01","I")
"RTN","BPSECA8",39,0)
 I PLAN S PLANSHT=$P($P($$PLANEPS^IBNCPDPU(PLAN),U,2),",",2),BPSFORM=PLANSHT,SHEETSRC="plan" ; IA5572
"RTN","BPSECA8",40,0)
 S TRANSHT=$$GET1^DIQ(9002313.59902,IEN5902_","_IEN59_",","902.19","I")
"RTN","BPSECA8",41,0)
 ;
"RTN","BPSECA8",42,0)
 ; If the reversal payer sheet is missing from the pharmacy plan or is disabled, use the
"RTN","BPSECA8",43,0)
 ;   reversal payer sheet from the transaction record
"RTN","BPSECA8",44,0)
 I 'PLANSHT!($$GET1^DIQ(9002313.92,+PLANSHT_",",1.06,"I")=0) S BPSFORM=TRANSHT,SHEETSRC="transaction"
"RTN","BPSECA8",45,0)
 ;
"RTN","BPSECA8",46,0)
 ; If still no reversal payer sheet, log an error and quit.
"RTN","BPSECA8",47,0)
 I 'BPSFORM D LOG^BPSOSL(IEN59,$T(+0)_"-No Reversal Payer Sheet found") Q 0
"RTN","BPSECA8",48,0)
 ;
"RTN","BPSECA8",49,0)
 ; Log the payer sheet and the source
"RTN","BPSECA8",50,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Reversal payer sheet "_$$GET1^DIQ(9002313.92,BPSFORM_",",.01,"E")_" ("_BPSFORM_") came from the "_SHEETSRC)
"RTN","BPSECA8",51,0)
 ;
"RTN","BPSECA8",52,0)
 ; If the payer sheet is different than what is currently stored in the BPS Transaction, update the BPS Transaction
"RTN","BPSECA8",53,0)
 I BPSFORM'=TRANSHT D
"RTN","BPSECA8",54,0)
 . N DIE,DA,DR,DTOUT
"RTN","BPSECA8",55,0)
 . S DIE="^BPST("_IEN59_",10,",DA(1)=IEN59,DA=IEN5902,DR="902.19////^S X=BPSFORM"
"RTN","BPSECA8",56,0)
 . D ^DIE
"RTN","BPSECA8",57,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Transaction updated with reversal payer sheet "_BPSFORM)
"RTN","BPSECA8",58,0)
 ;
"RTN","BPSECA8",59,0)
 ; Get payer sheet version
"RTN","BPSECA8",60,0)
 S VERSION=$P(^BPSF(9002313.92,BPSFORM,1),"^",2)
"RTN","BPSECA8",61,0)
 I VERSION="" S VERSION="D0"
"RTN","BPSECA8",62,0)
 ;
"RTN","BPSECA8",63,0)
 ; Get data from original claim request
"RTN","BPSECA8",64,0)
 S DR="**",DIQ="TMP",DIQ(0)="I"
"RTN","BPSECA8",65,0)
 D GETS^DIQ(CLAIM,CLAIMIEN,DR,DIQ(0),DIQ)
"RTN","BPSECA8",66,0)
 ;
"RTN","BPSECA8",67,0)
 ; Update CLAIMIEN to match CLAIMIEN format in TMP
"RTN","BPSECA8",68,0)
 S CLAIMIEN=CLAIMIEN_","
"RTN","BPSECA8",69,0)
 ;
"RTN","BPSECA8",70,0)
 ; Execute special code in reversal payer sheets
"RTN","BPSECA8",71,0)
 D REFORM^BPSOSHR(BPSFORM,CLAIMIEN,POS)
"RTN","BPSECA8",72,0)
 ;
"RTN","BPSECA8",73,0)
 ; Create a new claim record and use function to get the Claim ID
"RTN","BPSECA8",74,0)
R2 S DIC=CLAIM,DIC(0)="LX",DLAYGO=CLAIM
"RTN","BPSECA8",75,0)
 S X=$$CLAIMID^BPSECX1(IEN59)
"RTN","BPSECA8",76,0)
 I X="" Q 0
"RTN","BPSECA8",77,0)
 D ^DIC
"RTN","BPSECA8",78,0)
 S REVIEN=+Y
"RTN","BPSECA8",79,0)
 I REVIEN<1 Q 0
"RTN","BPSECA8",80,0)
 ;
"RTN","BPSECA8",81,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSECA8",82,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Created claim ID "_X_" ("_REVIEN_")")
"RTN","BPSECA8",83,0)
 ;
"RTN","BPSECA8",84,0)
 ; Create a new transaction multiple for the claim
"RTN","BPSECA8",85,0)
R4 S DIC="^BPSC("_REVIEN_",400,",DIC(0)="LX"
"RTN","BPSECA8",86,0)
 S DIC("P")=$P(^DD(CLAIM,400,0),U,2)
"RTN","BPSECA8",87,0)
 S DA(1)=REVIEN,DLAYGO=RXMULT,X=1
"RTN","BPSECA8",88,0)
 D ^DIC
"RTN","BPSECA8",89,0)
 I +Y'=1 D  G:UERETVAL R4
"RTN","BPSECA8",90,0)
 . S UERETVAL=$$IMPOSS^BPSOSUE("FM,P",,"call to ^DIC","for multiple",,$T(+0))
"RTN","BPSECA8",91,0)
 ;
"RTN","BPSECA8",92,0)
 ; Update claim with new values
"RTN","BPSECA8",93,0)
 S DIE=CLAIM,DA=REVIEN,DR="",C=0
"RTN","BPSECA8",94,0)
 F I=.03,.04,1.01,1.04,101,104,110,201,202,301,302,304,305,310,311,331,332,359,401 D
"RTN","BPSECA8",95,0)
 .S C=C+1,$P(DR,";",C)=I_"////"_$G(TMP(CLAIM,CLAIMIEN,I,"I"))
"RTN","BPSECA8",96,0)
 ;
"RTN","BPSECA8",97,0)
 ; Update claim with new A22, A43 and A45 values but only if these fields were on original B1 Payer Sheet- BPS*1*15
"RTN","BPSECA8",98,0)
 F I=1022,1043,1045 D
"RTN","BPSECA8",99,0)
 .I $G(TMP(CLAIM,CLAIMIEN,I,"I"))]"" S C=C+1,$P(DR,";",C)=I_"////"_TMP(CLAIM,CLAIMIEN,I,"I")
"RTN","BPSECA8",100,0)
 ;
"RTN","BPSECA8",101,0)
 ; Add fields that do not come from the claim
"RTN","BPSECA8",102,0)
 ;   Payer sheet is the reversal sheet, Created On is current date/time
"RTN","BPSECA8",103,0)
 ;   Transaction Code is B2 and Transaction Count is 1
"RTN","BPSECA8",104,0)
 S DR=DR_";.02////"_BPSFORM_";.06////"_$$NOWFM^BPSOSU1_";102////"_VERSION_";103////B2;109////1"
"RTN","BPSECA8",105,0)
 D ^DIE
"RTN","BPSECA8",106,0)
 ;
"RTN","BPSECA8",107,0)
 ; Convert the 402-D2 (Prescription/Service Ref Number) to the proper length
"RTN","BPSECA8",108,0)
 S FLD402=$G(TMP(RXMULT,POS_","_CLAIMIEN,402,"I")),L=11
"RTN","BPSECA8",109,0)
 S TMP(RXMULT,POS_","_CLAIMIEN,402,"I")=$E(FLD402,1,2)_$E($E(FLD402,3,99)+1000000000000,13-L,13)
"RTN","BPSECA8",110,0)
 ;
"RTN","BPSECA8",111,0)
 ; Update transaction multiple with values
"RTN","BPSECA8",112,0)
 S DIE="^BPSC("_REVIEN_",400,",DA(1)=REVIEN,DA=1,DR="",C=0
"RTN","BPSECA8",113,0)
 F I=.04,.05,147,308,337,402,403,407,418,430,436,438,455 D
"RTN","BPSECA8",114,0)
 .S C=C+1,$P(DR,";",C)=I_"////"_$G(TMP(RXMULT,POS_","_CLAIMIEN,I,"I"))
"RTN","BPSECA8",115,0)
 D ^DIE
"RTN","BPSECA8",116,0)
 ;
"RTN","BPSECA8",117,0)
 ; Update transaction multiple with new D.1 through D.9 values but only if these fields were on the original B1 Payer Sheet- BPS*1*15
"RTN","BPSECA8",118,0)
 S DIE="^BPSC("_REVIEN_",400,",DA(1)=REVIEN,DA=1,DR="",C=0
"RTN","BPSECA8",119,0)
 F I=579:1:681,1023:1:1027,1029:1:1032 D
"RTN","BPSECA8",120,0)
 .I $G(TMP(RXMULT,POS_","_CLAIMIEN,I,"I"))]"" S C=C+1,$P(DR,";",C)=I_"////"_TMP(RXMULT,POS_","_CLAIMIEN,I,"I")
"RTN","BPSECA8",121,0)
 D ^DIE
"RTN","BPSECA8",122,0)
 ;
"RTN","BPSECA8",123,0)
 ; Create COB multiple if it exists in the claim record
"RTN","BPSECA8",124,0)
 S COB=0
"RTN","BPSECA8",125,0)
 F  S COB=$O(^BPSC(+CLAIMIEN,400,POS,337,COB)) Q:'COB  D
"RTN","BPSECA8",126,0)
 . S REC=$G(^BPSC(+CLAIMIEN,400,POS,337,COB,0))
"RTN","BPSECA8",127,0)
 . I $P(REC,U,1)=""!($P(REC,U,2)="") Q
"RTN","BPSECA8",128,0)
 . K FDA,MSG,IENS
"RTN","BPSECA8",129,0)
 . S FN=9002313.0401,IENS="+1,"_POS_","_REVIEN_",",IENS(1)=COB
"RTN","BPSECA8",130,0)
 . S FDA(FN,IENS,.01)=$P(REC,U,1)
"RTN","BPSECA8",131,0)
 . S FDA(FN,IENS,338)=$P(REC,U,2)
"RTN","BPSECA8",132,0)
 . D UPDATE^DIE("","FDA","IENS","MSG")
"RTN","BPSECA8",133,0)
 . I $D(MSG) D
"RTN","BPSECA8",134,0)
 .. D LOG^BPSOSL(IEN59,$T(+0)_"-COB fields did not file, COB="_COB)
"RTN","BPSECA8",135,0)
 .. D LOG^BPSOSL(IEN59,"REC="_REC)
"RTN","BPSECA8",136,0)
 .. D LOG^BPSOSL(IEN59,"MSG Array:")
"RTN","BPSECA8",137,0)
 .. D LOGARRAY^BPSOSL(IEN59,"MSG")
"RTN","BPSECA8",138,0)
 .. D LOG^BPSOSL(IEN59,"IENS Array:")
"RTN","BPSECA8",139,0)
 .. D LOGARRAY^BPSOSL(IEN59,"IENS")
"RTN","BPSECA8",140,0)
 .. D LOG^BPSOSL(IEN59,"FDA Array:")
"RTN","BPSECA8",141,0)
 .. D LOGARRAY^BPSOSL(IEN59,"FDA")
"RTN","BPSECA8",142,0)
 ;
"RTN","BPSECA8",143,0)
 Q REVIEN
"RTN","BPSECA8",144,0)
 ;
"RTN","BPSECMPS")
0^41^B148784399
"RTN","BPSECMPS",1,0)
BPSECMPS ;BHAM ISC/FCS/DRS - Parse Claim Response ;3/10/08  12:31
"RTN","BPSECMPS",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2,5,6,7,10,11,15,19,20**;JUN 2004;Build 27
"RTN","BPSECMPS",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSECMPS",4,0)
 ;
"RTN","BPSECMPS",5,0)
 ; References to UPDATE^DIE and WP^DIE supported by DBIA 2053
"RTN","BPSECMPS",6,0)
 ; Reference to FDA^DILF  supported by DBIA 2054
"RTN","BPSECMPS",7,0)
 ;
"RTN","BPSECMPS",8,0)
PARSE(RREC,CLAIMIEN,IEN59,TRANTYPE) ;
"RTN","BPSECMPS",9,0)
 ; Parse the response from the payer and file it in the BPS Response record
"RTN","BPSECMPS",10,0)
 ; Incoming Parameters:
"RTN","BPSECMPS",11,0)
 ;   RREC - HL7 message
"RTN","BPSECMPS",12,0)
 ;   CLAIMIEN - IEN of the BPS Claim file
"RTN","BPSECMPS",13,0)
 ;   IEN59 - IEN of the BPS Transaction file
"RTN","BPSECMPS",14,0)
 ;   TRANTYPE - Transaction Type (B1-Billing Request, B2-Reversal, E1-Eligibility)
"RTN","BPSECMPS",15,0)
 ; Return value:
"RTN","BPSECMPS",16,0)
 ;   RESPIEN - IEN of the BPS Response file
"RTN","BPSECMPS",17,0)
 ;
"RTN","BPSECMPS",18,0)
 N FDAIEN,FDAIEN03,FDATA,FILE,FS,GS,ROOT,SS,TRANSACT,TRANSCNT
"RTN","BPSECMPS",19,0)
 ;
"RTN","BPSECMPS",20,0)
 ; RREC and CLAIMIEN are required
"RTN","BPSECMPS",21,0)
 Q:$G(RREC)="" 0
"RTN","BPSECMPS",22,0)
 Q:$G(CLAIMIEN)="" 0
"RTN","BPSECMPS",23,0)
 ;
"RTN","BPSECMPS",24,0)
 ;group and field separator characters
"RTN","BPSECMPS",25,0)
 S GS="\X1D\",FS="\X1C\",SS="\X1E\"
"RTN","BPSECMPS",26,0)
 S FILE="9002313.03",ROOT="FDATA(9002313.03)"
"RTN","BPSECMPS",27,0)
 D TRANSMSN  ; process transmission level data, transaction count in TRANSCNT (from PARSEH)
"RTN","BPSECMPS",28,0)
 D TRANSACT  ; process transaction level data
"RTN","BPSECMPS",29,0)
 ;
"RTN","BPSECMPS",30,0)
 ; If test system and test active, call the override routine
"RTN","BPSECMPS",31,0)
 ; IEN59 and TRANTYPE are set in BPSECMC2
"RTN","BPSECMPS",32,0)
 I $$CHECK^BPSTEST D SETOVER^BPSTEST(+$G(IEN59),$G(TRANTYPE),.FDATA)
"RTN","BPSECMPS",33,0)
 ;
"RTN","BPSECMPS",34,0)
 D UPDATE^DIE("S","FDATA(9002313.03)","FDAIEN")
"RTN","BPSECMPS",35,0)
 F TRANSACT=1:1:TRANSCNT  D
"RTN","BPSECMPS",36,0)
 .D PROCRESP
"RTN","BPSECMPS",37,0)
 .D PROCREJ
"RTN","BPSECMPS",38,0)
 .D PROCAPP
"RTN","BPSECMPS",39,0)
 .D PROCPPR
"RTN","BPSECMPS",40,0)
 .D PROCCOB
"RTN","BPSECMPS",41,0)
 .D PROCOTH^BPSECMP2
"RTN","BPSECMPS",42,0)
 .D PROCBEN^BPSECMP2
"RTN","BPSECMPS",43,0)
 .D PROCADM^BPSECMP2
"RTN","BPSECMPS",44,0)
 .D PROCDUR^BPSECMP2
"RTN","BPSECMPS",45,0)
 .D PROCINT
"RTN","BPSECMPS",46,0)
 .D PROCQLIM    ; process Quantity limit time period multiple
"RTN","BPSECMPS",47,0)
 .D PROCDSLM    ; process Days Supply limit time period multiple
"RTN","BPSECMPS",48,0)
 .Q
"RTN","BPSECMPS",49,0)
 ;
"RTN","BPSECMPS",50,0)
 S RESPIEN=FDAIEN(1)
"RTN","BPSECMPS",51,0)
 ; This should be called for each transaction but the IBSEND is not
"RTN","BPSECMPS",52,0)
 ;  setup correctly so currently it is only called for each claim/response
"RTN","BPSECMPS",53,0)
 ; If we ever bundle claims, we will need to fix IBSEND and move this code
"RTN","BPSECMPS",54,0)
 ;  to the FOR loop above.
"RTN","BPSECMPS",55,0)
 D IBSEND^BPSECMP2(CLAIMIEN,RESPIEN,"","")
"RTN","BPSECMPS",56,0)
 D RAW(RESPIEN,RREC)
"RTN","BPSECMPS",57,0)
 ;
"RTN","BPSECMPS",58,0)
 Q RESPIEN
"RTN","BPSECMPS",59,0)
 ;
"RTN","BPSECMPS",60,0)
TRANSMSN ;This subroutine will work through the transmission level information
"RTN","BPSECMPS",61,0)
 ;
"RTN","BPSECMPS",62,0)
 N RHEADER,RTRANM,SEG,SEGID,SEGMENT
"RTN","BPSECMPS",63,0)
 ;
"RTN","BPSECMPS",64,0)
 ;Parse response transmission level from ascii record
"RTN","BPSECMPS",65,0)
 S RTRANM=$P(RREC,GS,1)
"RTN","BPSECMPS",66,0)
 ;
"RTN","BPSECMPS",67,0)
 ; get just the header segment
"RTN","BPSECMPS",68,0)
 S RHEADER=$P(RTRANM,SS,1)    ;header- required/fixed length
"RTN","BPSECMPS",69,0)
 D PARSEH
"RTN","BPSECMPS",70,0)
 ;
"RTN","BPSECMPS",71,0)
 ; There are 2 optional segments on the transmission level - message
"RTN","BPSECMPS",72,0)
 ; and insurance.  We'll check for both and parse what we find.
"RTN","BPSECMPS",73,0)
 F SEG=2:1:3 D
"RTN","BPSECMPS",74,0)
 . S SEGMENT=$P(RTRANM,SS,SEG)
"RTN","BPSECMPS",75,0)
 . Q:SEGMENT=""
"RTN","BPSECMPS",76,0)
 . S SEGID=$P(SEGMENT,FS,2)
"RTN","BPSECMPS",77,0)
 . I $E(SEGID,1,2)="AM" D  ; segment identification
"RTN","BPSECMPS",78,0)
 .. S SEGFID=$E(SEGID,3,4)
"RTN","BPSECMPS",79,0)
 .. D:(SEGFID=20)!(SEGFID=25) PARSETM
"RTN","BPSECMPS",80,0)
 ;
"RTN","BPSECMPS",81,0)
 Q
"RTN","BPSECMPS",82,0)
 ;
"RTN","BPSECMPS",83,0)
TRANSACT ;This subroutine will work through the transaction level information
"RTN","BPSECMPS",84,0)
 ;
"RTN","BPSECMPS",85,0)
 N GRP,MEDN,RTRAN,SEG,SEGMENT
"RTN","BPSECMPS",86,0)
 S MEDN=0
"RTN","BPSECMPS",87,0)
 ;
"RTN","BPSECMPS",88,0)
 F GRP=2:1 D  Q:RTRAN=""
"RTN","BPSECMPS",89,0)
 . S RTRAN=$P(RREC,GS,GRP)     ;get the next transaction (could be 4)
"RTN","BPSECMPS",90,0)
 . Q:RTRAN=""                  ;we're done if it's empty
"RTN","BPSECMPS",91,0)
 . S MEDN=MEDN+1               ;transaction counter
"RTN","BPSECMPS",92,0)
 . ;
"RTN","BPSECMPS",93,0)
 . F SEG=2:1 D  Q:SEGMENT=""   ;break the record down by segments
"RTN","BPSECMPS",94,0)
 .. S SEGMENT=$P(RTRAN,SS,SEG) ;get the segment
"RTN","BPSECMPS",95,0)
 .. Q:SEGMENT=""
"RTN","BPSECMPS",96,0)
 .. D PARSETN                  ;get the fields
"RTN","BPSECMPS",97,0)
 Q
"RTN","BPSECMPS",98,0)
 ;
"RTN","BPSECMPS",99,0)
PARSEH ; parse the header record, required on all responses, and is fixed length
"RTN","BPSECMPS",100,0)
 ; It's the only record that is fixed length.
"RTN","BPSECMPS",101,0)
 ;
"RTN","BPSECMPS",102,0)
 D FDA^DILF(FILE,"+1",.01,"",CLAIMIEN,ROOT)  ; CLAIM ID
"RTN","BPSECMPS",103,0)
 D FDA^DILF(FILE,"+1",.02,"",$$NOWFM^BPSOSU1,ROOT)  ; DATE RESPONSE RECEIVED
"RTN","BPSECMPS",104,0)
 D FDA^DILF(FILE,"+1",102,"",$E(RHEADER,33,34),ROOT)  ; VERSION RELEASE NUMBER
"RTN","BPSECMPS",105,0)
 D FDA^DILF(FILE,"+1",103,"",$E(RHEADER,35,36),ROOT)  ; TRANSACTION CODE
"RTN","BPSECMPS",106,0)
 D FDA^DILF(FILE,"+1",109,"",$E(RHEADER,37,37),ROOT)  ; TRANSACTION COUNT
"RTN","BPSECMPS",107,0)
 S TRANSCNT=$E(RHEADER,37,37)
"RTN","BPSECMPS",108,0)
 D FDA^DILF(FILE,"+1",501,"",$E(RHEADER,38,38),ROOT)  ; response status header
"RTN","BPSECMPS",109,0)
 D FDA^DILF(FILE,"+1",202,"",$E(RHEADER,39,40),ROOT)  ; SERVICE PROVIDER ID Qualifier
"RTN","BPSECMPS",110,0)
 D FDA^DILF(FILE,"+1",201,"",$E(RHEADER,41,55),ROOT)  ; SERVICE PROVIDER ID
"RTN","BPSECMPS",111,0)
 D FDA^DILF(FILE,"+1",401,"",$E(RHEADER,56,63),ROOT)  ; DATE OF SERVICE
"RTN","BPSECMPS",112,0)
 ;
"RTN","BPSECMPS",113,0)
 Q
"RTN","BPSECMPS",114,0)
 ;
"RTN","BPSECMPS",115,0)
PARSETM ; parse the variable portions of the transmission
"RTN","BPSECMPS",116,0)
 ;
"RTN","BPSECMPS",117,0)
 N FIELD,FLDNUM,PC
"RTN","BPSECMPS",118,0)
 ;
"RTN","BPSECMPS",119,0)
 F PC=3:1 D  Q:FIELD=""        ;skip the seg id -already know its value
"RTN","BPSECMPS",120,0)
 . S FIELD=$P(SEGMENT,FS,PC)   ;piece through the record
"RTN","BPSECMPS",121,0)
 . Q:FIELD=""                  ;stop - we hit the end
"RTN","BPSECMPS",122,0)
 . S FLDNUM=$$GETNUM(FIELD)    ;get the field number used for storage
"RTN","BPSECMPS",123,0)
 . Q:FLDNUM=""                 ;shouldn't happen - but let's skip
"RTN","BPSECMPS",124,0)
 . S FIELD=$E(FIELD,3,999)
"RTN","BPSECMPS",125,0)
 . D FDA^DILF(FILE,"+1",FLDNUM,"",FIELD,ROOT)
"RTN","BPSECMPS",126,0)
 Q
"RTN","BPSECMPS",127,0)
 ;
"RTN","BPSECMPS",128,0)
PARSETN ; parse the transaction level segments
"RTN","BPSECMPS",129,0)
 ;
"RTN","BPSECMPS",130,0)
 ; Possible values of the SEGFID field:
"RTN","BPSECMPS",131,0)
 ;  21 = Response Status Segment
"RTN","BPSECMPS",132,0)
 ;  22 = Response Claim Segment
"RTN","BPSECMPS",133,0)
 ;  23 = Response Pricing Segment
"RTN","BPSECMPS",134,0)
 ;  24 = Response DUR/PPS Segment
"RTN","BPSECMPS",135,0)
 ;  26 = Response Prior Authorization Segment
"RTN","BPSECMPS",136,0)
 ;  28 = Response Coordination of Benefits/Other Payers Segment
"RTN","BPSECMPS",137,0)
 ;  36 = Response Intermediary Segment
"RTN","BPSECMPS",138,0)
 ;
"RTN","BPSECMPS",139,0)
 N CKRPT,FIELD,FLDNUM,PC,REPEAT,RPTFLD,SEGFID,SEGID,GRPCNT,GRPFLDS,VNUM
"RTN","BPSECMPS",140,0)
 ;
"RTN","BPSECMPS",141,0)
 S RPTFLD=""
"RTN","BPSECMPS",142,0)
 S SEGID=$P(SEGMENT,FS,2)  ; this should be the segment id
"RTN","BPSECMPS",143,0)
 Q:SEGID=""                ; don't process without a Seg id
"RTN","BPSECMPS",144,0)
 Q:$E(SEGID,1,2)'="AM"     ; don't know what we have - skip
"RTN","BPSECMPS",145,0)
 ;
"RTN","BPSECMPS",146,0)
 S SEGFID=$E(SEGID,3,4)    ; this should be the field ID
"RTN","BPSECMPS",147,0)
 S GRPCNT=0,GRPFLDS=""
"RTN","BPSECMPS",148,0)
 ;
"RTN","BPSECMPS",149,0)
 ; setup the repeating flds based on the segment
"RTN","BPSECMPS",150,0)
 I SEGFID=21 D                 ;status segment
"RTN","BPSECMPS",151,0)
 . S RPTFLD=",548,511,546,132,526,131,"
"RTN","BPSECMPS",152,0)
 . S GRPCNT=0
"RTN","BPSECMPS",153,0)
 . S GRPFLDS=",511,548,132,"
"RTN","BPSECMPS",154,0)
 ;
"RTN","BPSECMPS",155,0)
 I SEGFID=22 D                 ;claim segment
"RTN","BPSECMPS",156,0)
 . S RPTFLD=",552,553,554,555,556,B88,B89,B91,B92,"
"RTN","BPSECMPS",157,0)
 . S GRPCNT=0
"RTN","BPSECMPS",158,0)
 . S GRPFLDS=",552,B88,B91,"
"RTN","BPSECMPS",159,0)
 ;
"RTN","BPSECMPS",160,0)
 I SEGFID=23 D                ;pricing segment
"RTN","BPSECMPS",161,0)
 . S RPTFLD=",564,565,393,394,"
"RTN","BPSECMPS",162,0)
 . S GRPCNT=0
"RTN","BPSECMPS",163,0)
 . S GRPFLDS=",564,393,"
"RTN","BPSECMPS",164,0)
 ;
"RTN","BPSECMPS",165,0)
 I SEGFID=24 D                ;DUR/PPS segment
"RTN","BPSECMPS",166,0)
 . S RPTFLD=",439,528,529,530,531,532,533,544,567,570,"
"RTN","BPSECMPS",167,0)
 . S GRPCNT=0
"RTN","BPSECMPS",168,0)
 . S GRPFLDS=",567,"
"RTN","BPSECMPS",169,0)
 ;
"RTN","BPSECMPS",170,0)
 I SEGFID=28 D                ;COB/Other Payers segment
"RTN","BPSECMPS",171,0)
 . S RPTFLD=",127,142,143,144,145,338,339,340,356,991,992,B23,"
"RTN","BPSECMPS",172,0)
 . S GRPCNT=0
"RTN","BPSECMPS",173,0)
 . S GRPFLDS=",338,"
"RTN","BPSECMPS",174,0)
 ;
"RTN","BPSECMPS",175,0)
 I SEGFID=36 D                ;Intermediary segment
"RTN","BPSECMPS",176,0)
 . S RPTFLD=",B53,B54,B51,"
"RTN","BPSECMPS",177,0)
 . S GRPCNT=0
"RTN","BPSECMPS",178,0)
 . S GRPFLDS=",B53,"
"RTN","BPSECMPS",179,0)
 ;
"RTN","BPSECMPS",180,0)
 ; now let's parse out the fields
"RTN","BPSECMPS",181,0)
 ;
"RTN","BPSECMPS",182,0)
 F PC=3:1 D  Q:FIELD=""        ;skip the seg id -jump to the other flds
"RTN","BPSECMPS",183,0)
 . S FIELD=$P(SEGMENT,FS,PC)   ;piece through the record
"RTN","BPSECMPS",184,0)
 . Q:FIELD=""                  ;stop - we hit the end
"RTN","BPSECMPS",185,0)
 . S FLDNUM=$$GETNUM(FIELD)    ;get the field number used for storage
"RTN","BPSECMPS",186,0)
 . Q:FLDNUM=""                 ;shouldn't happen - but let's skip
"RTN","BPSECMPS",187,0)
 . S VNUM=FLDNUM
"RTN","BPSECMPS",188,0)
 . ;Convert to VistA field number for non-numeric NCPDP numbers - BPS*1*15
"RTN","BPSECMPS",189,0)
 . I $P(FLDNUM,".")'?3N S VNUM=$$VNUM(FLDNUM) Q:'VNUM
"RTN","BPSECMPS",190,0)
 . S REPEAT=0                  ;for this segment, let's figure
"RTN","BPSECMPS",191,0)
 . S CKRPT=","_FLDNUM_","      ;out if the field is a repeating
"RTN","BPSECMPS",192,0)
 . S:RPTFLD[CKRPT REPEAT=1     ;field
"RTN","BPSECMPS",193,0)
 . ; Increment the group counter if first field of group.
"RTN","BPSECMPS",194,0)
 . S:GRPFLDS[CKRPT GRPCNT=GRPCNT+1
"RTN","BPSECMPS",195,0)
 . ; if rptg, store with a group counter
"RTN","BPSECMPS",196,0)
 . S:REPEAT FDATA(MEDN,VNUM,GRPCNT)=$E(FIELD,3,$L(FIELD))
"RTN","BPSECMPS",197,0)
 . ; not rptg, store without counter
"RTN","BPSECMPS",198,0)
 . S:'REPEAT FDATA(MEDN,VNUM)=$E(FIELD,3,$L(FIELD))
"RTN","BPSECMPS",199,0)
 ;
"RTN","BPSECMPS",200,0)
 Q
"RTN","BPSECMPS",201,0)
 ;
"RTN","BPSECMPS",202,0)
GETNUM(FIELD) ; function, return field number for a field I
"RTN","BPSECMPS",203,0)
 ; use BPS NCPDP FIELD DEFS (#9002313.91) "D" cross ref for lookup
"RTN","BPSECMPS",204,0)
 ; field number is used to store the data in the correct field in BPS RESPONSES (#9002313.03)
"RTN","BPSECMPS",205,0)
 ;
"RTN","BPSECMPS",206,0)
 N FLDID,FLDIEN,FLDNUM
"RTN","BPSECMPS",207,0)
 S FLDID=$E(FIELD,1,2),FLDNUM=""
"RTN","BPSECMPS",208,0)
 Q:FLDID="" FLDNUM  ; FLDID = field identifier
"RTN","BPSECMPS",209,0)
 ; 
"RTN","BPSECMPS",210,0)
 S FLDIEN=$O(^BPSF(9002313.91,"D",FLDID,0))  ; ien for fld #
"RTN","BPSECMPS",211,0)
 S:FLDIEN FLDNUM=$P($G(^BPSF(9002313.91,FLDIEN,0)),U) ;fld number
"RTN","BPSECMPS",212,0)
 Q FLDNUM
"RTN","BPSECMPS",213,0)
 ;
"RTN","BPSECMPS",214,0)
VNUM(FLDNUM) ;function, returns VistA FileMan field number
"RTN","BPSECMPS",215,0)
 N FLDIEN
"RTN","BPSECMPS",216,0)
 S FLDIEN=$O(^BPSF(9002313.91,"B",FLDNUM,0)) Q:'FLDIEN ""
"RTN","BPSECMPS",217,0)
 S FLDNUM=$P($G(^BPSF(9002313.91,FLDIEN,5)),U,3) ;fld number
"RTN","BPSECMPS",218,0)
 Q FLDNUM
"RTN","BPSECMPS",219,0)
 ;
"RTN","BPSECMPS",220,0)
PROCRESP ; add data to RESPONSES SUB-FIELD (#9002313.0301)
"RTN","BPSECMPS",221,0)
 ;
"RTN","BPSECMPS",222,0)
 N FDATA03,FIELD,FILE,FLDNUM,ROOT
"RTN","BPSECMPS",223,0)
 ;
"RTN","BPSECMPS",224,0)
 S FILE=9002313.0301,ROOT="FDATA03(9002313.0301)"
"RTN","BPSECMPS",225,0)
 ; field 501 is HEADER RESPONSE STATUS, 112 is TRANSACTION RESPONSE STATUS
"RTN","BPSECMPS",226,0)
 I '$D(FDATA(TRANSACT,501)) S FDATA(TRANSACT,501)=FDATA(TRANSACT,112)
"RTN","BPSECMPS",227,0)
 I '$D(FDATA(TRANSACT,112)) S FDATA(TRANSACT,112)=FDATA(TRANSACT,501)
"RTN","BPSECMPS",228,0)
 ;
"RTN","BPSECMPS",229,0)
 S FLDNUM=".01" D FDA^DILF(FILE,"+1,"_FDAIEN(TRANSACT),FLDNUM,"",TRANSACT,ROOT)
"RTN","BPSECMPS",230,0)
 S FIELD=""
"RTN","BPSECMPS",231,0)
 F  S FIELD=$O(FDATA(TRANSACT,FIELD)) Q:FIELD=""  D   ;set all the non-repeating fields for 9002313.0301
"RTN","BPSECMPS",232,0)
 .Q:$G(FDATA(TRANSACT,FIELD))=""  ; no data to process
"RTN","BPSECMPS",233,0)
 .; field 402 is PRESCRIPTION/SERVICE REF. NO.
"RTN","BPSECMPS",234,0)
 .I FIELD=402 S FDATA(TRANSACT,FIELD)=$TR(FDATA(TRANSACT,FIELD),"\","") ;REMOVE EXTRANEOUS "\"
"RTN","BPSECMPS",235,0)
 .D FDA^DILF(FILE,"+"_TRANSACT_","_FDAIEN(TRANSACT),FIELD,"",FDATA(TRANSACT,FIELD),ROOT)
"RTN","BPSECMPS",236,0)
 ;
"RTN","BPSECMPS",237,0)
 D UPDATE^DIE("S","FDATA03(9002313.0301)","FDAIEN03")
"RTN","BPSECMPS",238,0)
 ;
"RTN","BPSECMPS",239,0)
 Q
"RTN","BPSECMPS",240,0)
 ;
"RTN","BPSECMPS",241,0)
PROCREJ ; add data to REJECT CODE SUB-FIELD (#9002313.03511)
"RTN","BPSECMPS",242,0)
 Q:$G(FDATA(TRANSACT,510))=""
"RTN","BPSECMPS",243,0)
 ;
"RTN","BPSECMPS",244,0)
 N FDAT3511,FILE,FLDNUM,NNDX,NUMREJS,ROOT,REJCODE
"RTN","BPSECMPS",245,0)
 ;
"RTN","BPSECMPS",246,0)
 S FILE="9002313.03511",ROOT="FDAT3511(9002313.03511)",NUMREJS=FDATA(TRANSACT,510),NNDX=""
"RTN","BPSECMPS",247,0)
 F  S NNDX=$O(FDATA(TRANSACT,511,NNDX)) Q:NNDX=""  D   ;set all the non-repeating fields for 9002313.03511 rejections
"RTN","BPSECMPS",248,0)
 .S REJCODE=$$TRIM^XLFSTR(FDATA(TRANSACT,511,NNDX),"R")
"RTN","BPSECMPS",249,0)
 .S REJCODE=$TR(REJCODE,"\","")  Q:REJCODE']""
"RTN","BPSECMPS",250,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",REJCODE,ROOT)
"RTN","BPSECMPS",251,0)
 D UPDATE^DIE("S","FDAT3511(9002313.03511)")
"RTN","BPSECMPS",252,0)
 ;
"RTN","BPSECMPS",253,0)
 Q
"RTN","BPSECMPS",254,0)
 ;
"RTN","BPSECMPS",255,0)
PROCAPP ; APPROVED MESSAGE CODE SUB-FIELD (#9002313.301548)
"RTN","BPSECMPS",256,0)
 Q:$O(FDATA(TRANSACT,548,0))=""
"RTN","BPSECMPS",257,0)
 ;
"RTN","BPSECMPS",258,0)
 N FDAT1548,FILE,FLDNUM,NNDX,ROOT
"RTN","BPSECMPS",259,0)
 ;
"RTN","BPSECMPS",260,0)
 S FILE="9002313.301548",ROOT="FDAT1548(9002313.301548)",NNDX=""
"RTN","BPSECMPS",261,0)
 F  S NNDX=$O(FDATA(TRANSACT,548,NNDX)) Q:NNDX=""  D
"RTN","BPSECMPS",262,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,548,NNDX),ROOT)
"RTN","BPSECMPS",263,0)
 D UPDATE^DIE("S","FDAT1548(9002313.301548)")
"RTN","BPSECMPS",264,0)
 ;
"RTN","BPSECMPS",265,0)
 Q
"RTN","BPSECMPS",266,0)
 ;
"RTN","BPSECMPS",267,0)
PROCPPR ; PREFERRED PRODUCT REPEATING SUB-FIELD (#9002313.1301)
"RTN","BPSECMPS",268,0)
 ;
"RTN","BPSECMPS",269,0)
 Q:$O(FDATA(TRANSACT,552,0))=""
"RTN","BPSECMPS",270,0)
 ;
"RTN","BPSECMPS",271,0)
 N FDAT1301,FILE,FLDNUM,NNDX,ROOT
"RTN","BPSECMPS",272,0)
 ;
"RTN","BPSECMPS",273,0)
 S FILE="9002313.1301",ROOT="FDAT1301(9002313.1301)",NNDX=""
"RTN","BPSECMPS",274,0)
 F  S NNDX=$O(FDATA(TRANSACT,552,NNDX)) Q:NNDX=""  D
"RTN","BPSECMPS",275,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",NNDX,ROOT)
"RTN","BPSECMPS",276,0)
 .F FLDNUM=552,553,554,555,556 I $D(FDATA(TRANSACT,FLDNUM,NNDX)) D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",$G(FDATA(TRANSACT,FLDNUM,NNDX)),ROOT)
"RTN","BPSECMPS",277,0)
 D UPDATE^DIE("S","FDAT1301(9002313.1301)")
"RTN","BPSECMPS",278,0)
 ;
"RTN","BPSECMPS",279,0)
 Q
"RTN","BPSECMPS",280,0)
PROCCOB ; OTHER PAYER ID MLTPL SUB-FIELD (#9002313.035501)
"RTN","BPSECMPS",281,0)
 ;
"RTN","BPSECMPS",282,0)
 Q:$O(FDATA(TRANSACT,338,0))=""
"RTN","BPSECMPS",283,0)
 ;
"RTN","BPSECMPS",284,0)
 N FDAT35501,FILE,FLDNUM,NNDX,ROOT
"RTN","BPSECMPS",285,0)
 ;
"RTN","BPSECMPS",286,0)
 S FILE="9002313.035501",ROOT="FDAT35501(9002313.035501)",NNDX=""
"RTN","BPSECMPS",287,0)
 F  S NNDX=$O(FDATA(TRANSACT,338,NNDX)) Q:NNDX=""  D
"RTN","BPSECMPS",288,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",NNDX,ROOT)
"RTN","BPSECMPS",289,0)
 .F FLDNUM=127,142,143,144,145,338,339,340,356,991,992,2023 I $D(FDATA(TRANSACT,FLDNUM,NNDX)) D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",$G(FDATA(TRANSACT,FLDNUM,NNDX)),ROOT)
"RTN","BPSECMPS",290,0)
 D UPDATE^DIE("S","FDAT35501(9002313.035501)")
"RTN","BPSECMPS",291,0)
 ;
"RTN","BPSECMPS",292,0)
 Q
"RTN","BPSECMPS",293,0)
 ;
"RTN","BPSECMPS",294,0)
PROCINT ; INTERMEDIARY REPEATING SUB-FIELD (#9002313.032052)
"RTN","BPSECMPS",295,0)
 ;
"RTN","BPSECMPS",296,0)
 Q:$O(FDATA(TRANSACT,2053,0))=""
"RTN","BPSECMPS",297,0)
 ;
"RTN","BPSECMPS",298,0)
 N FDAT032052,FILE,FLDNUM,NNDX,ROOT
"RTN","BPSECMPS",299,0)
 ;
"RTN","BPSECMPS",300,0)
 S FILE="9002313.032052",ROOT="FDAT032052(9002313.032052)",NNDX=""
"RTN","BPSECMPS",301,0)
 F  S NNDX=$O(FDATA(TRANSACT,2053,NNDX)) Q:NNDX=""  D
"RTN","BPSECMPS",302,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",NNDX,ROOT)
"RTN","BPSECMPS",303,0)
 .F FLDNUM=2053,2054,2051 I $D(FDATA(TRANSACT,FLDNUM,NNDX)) D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",$G(FDATA(TRANSACT,FLDNUM,NNDX)),ROOT)
"RTN","BPSECMPS",304,0)
 D UPDATE^DIE("S","FDAT032052(9002313.032052)")
"RTN","BPSECMPS",305,0)
 Q
"RTN","BPSECMPS",306,0)
 ;
"RTN","BPSECMPS",307,0)
PROCQLIM ; QUANTITY LIMIT PER SPECIFIC TIME PERIOD REPEATING SUB-FIELD (# 9002313.032087)
"RTN","BPSECMPS",308,0)
 ;
"RTN","BPSECMPS",309,0)
 I '$G(FDATA(TRANSACT,2087)) Q      ; if the counter field isn't there, then get out
"RTN","BPSECMPS",310,0)
 ;
"RTN","BPSECMPS",311,0)
 N FDAT032087,FILE,FLDNUM,NNDX,ROOT
"RTN","BPSECMPS",312,0)
 ;
"RTN","BPSECMPS",313,0)
 S FILE="9002313.032087",ROOT="FDAT032087(9002313.032087)",NNDX=""
"RTN","BPSECMPS",314,0)
 F  S NNDX=$O(FDATA(TRANSACT,2088,NNDX)) Q:NNDX=""  D
"RTN","BPSECMPS",315,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",NNDX,ROOT)
"RTN","BPSECMPS",316,0)
 .F FLDNUM=2088,2089 I $D(FDATA(TRANSACT,FLDNUM,NNDX)) D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",$G(FDATA(TRANSACT,FLDNUM,NNDX)),ROOT)
"RTN","BPSECMPS",317,0)
 D UPDATE^DIE("S","FDAT032087(9002313.032087)")
"RTN","BPSECMPS",318,0)
 Q
"RTN","BPSECMPS",319,0)
 ;
"RTN","BPSECMPS",320,0)
PROCDSLM ; DAYS SUPPLY LIMIT PER SPECIFIC TIME PERIOD REPEATING SUB-FIELD (# 9002313.032091)
"RTN","BPSECMPS",321,0)
 ;
"RTN","BPSECMPS",322,0)
 I '$G(FDATA(TRANSACT,2090)) Q       ; if the counter field isn't there, then get out
"RTN","BPSECMPS",323,0)
 ;
"RTN","BPSECMPS",324,0)
 N FDAT032091,FILE,FLDNUM,NNDX,ROOT
"RTN","BPSECMPS",325,0)
 ;
"RTN","BPSECMPS",326,0)
 S FILE="9002313.032091",ROOT="FDAT032091(9002313.032091)",NNDX=""
"RTN","BPSECMPS",327,0)
 F  S NNDX=$O(FDATA(TRANSACT,2091,NNDX)) Q:NNDX=""  D
"RTN","BPSECMPS",328,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",NNDX,ROOT)
"RTN","BPSECMPS",329,0)
 .F FLDNUM=2091,2092 I $D(FDATA(TRANSACT,FLDNUM,NNDX)) D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",$G(FDATA(TRANSACT,FLDNUM,NNDX)),ROOT)
"RTN","BPSECMPS",330,0)
 D UPDATE^DIE("S","FDAT032091(9002313.032091)")
"RTN","BPSECMPS",331,0)
 Q
"RTN","BPSECMPS",332,0)
 ;
"RTN","BPSECMPS",333,0)
RAW(RESPIEN,RREC) ; store raw data received from the payer
"RTN","BPSECMPS",334,0)
 ; pass in the response IEN (9002313.03) and the raw data to be stored.
"RTN","BPSECMPS",335,0)
 N X,CNT
"RTN","BPSECMPS",336,0)
 K ^TMP($J,"WP")
"RTN","BPSECMPS",337,0)
 S CNT=0 F X=1:79:$L(RREC) S CNT=CNT+1 S ^TMP($J,"WP",CNT,0)=$E(RREC,X,X+78)
"RTN","BPSECMPS",338,0)
 D WP^DIE(9002313.03,RESPIEN_",",9999,"K","^TMP($J,""WP"")")
"RTN","BPSECMPS",339,0)
 K ^TMP($J,"WP")
"RTN","BPSECMPS",340,0)
 Q
"RTN","BPSECMPS",341,0)
 ;
"RTN","BPSJACK")
0^16^B32888755
"RTN","BPSJACK",1,0)
BPSJACK ;BHAM ISC/LJF - HL7 Acknowledgement Messages ;3/13/08  16:08
"RTN","BPSJACK",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2,5,7,20**;JUN 2004;Build 27
"RTN","BPSJACK",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSJACK",4,0)
 ;
"RTN","BPSJACK",5,0)
 ; This routine examines an Acknowledgement Message. If the message is
"RTN","BPSJACK",6,0)
 ; the E-PHARM Application Acknowledgement Message, and it is "AA",
"RTN","BPSJACK",7,0)
 ; it kicks off the Pharmacy Registration Messages.
"RTN","BPSJACK",8,0)
 ; If the message flags an error, then error notification is processed.
"RTN","BPSJACK",9,0)
 ;
"RTN","BPSJACK",10,0)
EN(HL) N ACK,AREG,BPSJSEG,ERR,HCT,SEG
"RTN","BPSJACK",11,0)
 N MFI,MFIIX,MSGCTLID,MSGID,MSGIX,MSH
"RTN","BPSJACK",12,0)
 ;
"RTN","BPSJACK",13,0)
 I '$D(HL) Q
"RTN","BPSJACK",14,0)
 ;
"RTN","BPSJACK",15,0)
 S (AREG,HCT,MFIIX,MSGCTLID,MSGID,MSGIX)=0,(ACK,MFI,MSH)=""
"RTN","BPSJACK",16,0)
 S ERR("MSA")=""
"RTN","BPSJACK",17,0)
 ;  Loop through the message and find each segment for processing
"RTN","BPSJACK",18,0)
 F  S HCT=$O(^TMP($J,"BPSJHLI",HCT)) Q:HCT=""  D
"RTN","BPSJACK",19,0)
 . K BPSJSEG D SPAR^BPSJUTL(.HL,.BPSJSEG,HCT) S SEG=$G(BPSJSEG(1))
"RTN","BPSJACK",20,0)
 . ;
"RTN","BPSJACK",21,0)
 . I SEG="MSH" D  Q
"RTN","BPSJACK",22,0)
 . . S MSGCTLID=$G(BPSJSEG(10))    ; get the message control id
"RTN","BPSJACK",23,0)
 . ;
"RTN","BPSJACK",24,0)
 . I SEG="MSA" D  Q  ; MSA seg looks like this -> MSA|AA|509133482
"RTN","BPSJACK",25,0)
 . . S ACK=$G(BPSJSEG(2)),MSGID=$G(BPSJSEG(3)) K ERR("MSA")
"RTN","BPSJACK",26,0)
 . ;
"RTN","BPSJACK",27,0)
 . I SEG="MFI",ACK="AA",$P($G(BPSJSEG(2)),$E($G(HL("ECH"))))="Facility Table" S AREG=1
"RTN","BPSJACK",28,0)
 . ;
"RTN","BPSJACK",29,0)
 . ;GET NPI
"RTN","BPSJACK",30,0)
 . I SEG="MFI",ACK="AA",$P($G(BPSJSEG(2)),$E($G(HL("ECH"))))="Pharmacy Table" D
"RTN","BPSJACK",31,0)
 . . I '$G(MSGID) Q
"RTN","BPSJACK",32,0)
 . . N BPSJNPI,BPSJPIX,BPSJNDT,BPSJ,HLMAID,HLID
"RTN","BPSJACK",33,0)
 . . ; back track AA/ACK to message sent out to find NPI sent out
"RTN","BPSJACK",34,0)
 . . S HLMAID=$O(^HLMA("C",MSGID,"")) I '$G(HLMAID) Q
"RTN","BPSJACK",35,0)
 . . S HLID=$P(^HLMA(HLMAID,0),U) I '$G(HLID) Q
"RTN","BPSJACK",36,0)
 . . S BPSJNPI=$P($G(^HL(772,HLID,"IN",22,0)),"|") I '$G(BPSJNPI) Q
"RTN","BPSJACK",37,0)
 . . S BPSJ=$G(^XTMP("BPSJ","NPI",BPSJNPI)) I 'BPSJ Q
"RTN","BPSJACK",38,0)
 . . S BPSJPIX=$P(BPSJ,U),BPSJNDT=$P(BPSJ,U,2)
"RTN","BPSJACK",39,0)
 . . N DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJACK",40,0)
 . . S DA=BPSJPIX,DIE=$$ROOT^DILFD(9002313.56)
"RTN","BPSJACK",41,0)
 . . S DR="41.01////"_BPSJNPI_";41.02////"_BPSJNDT D ^DIE
"RTN","BPSJACK",42,0)
 . . K ^XTMP("BPSJ","NPI",BPSJNPI)
"RTN","BPSJACK",43,0)
 . ;
"RTN","BPSJACK",44,0)
 . I SEG="MFA",ACK="AE" S ERR("MFA",U_$G(BPSJSEG(5)))="" Q
"RTN","BPSJACK",45,0)
 ;
"RTN","BPSJACK",46,0)
 ; Pharmacy Registrations
"RTN","BPSJACK",47,0)
 I AREG S AREG=0 D
"RTN","BPSJACK",48,0)
 . S $P(^BPS(9002313.99,1,0),"^",7)=$$NOW^XLFDT
"RTN","BPSJACK",49,0)
 . F  S AREG=$O(^BPS(9002313.56,AREG)) Q:'AREG  D REG^BPSJPREG(AREG)
"RTN","BPSJACK",50,0)
 ;
"RTN","BPSJACK",51,0)
 I $D(ERR) D ERRORM D MSG^BPSJUTL(.ERR,"BPSJACK")
"RTN","BPSJACK",52,0)
 Q
"RTN","BPSJACK",53,0)
 ;
"RTN","BPSJACK",54,0)
ERRORM ; Error message setup
"RTN","BPSJACK",55,0)
 N ERRT
"RTN","BPSJACK",56,0)
 ;
"RTN","BPSJACK",57,0)
 S ERR(1)="Error(s) indicated for HL7 Application Acknowledge Message ID: "_$G(MSGCTLID)
"RTN","BPSJACK",58,0)
 I $D(ERR("MSA")) S ERR(2)="Error:NO MSA - No MSA segment found."
"RTN","BPSJACK",59,0)
 I $D(ERR("MFA")) S ERRT="" F  S ERRT=$O(ERR("MFA",ERRT)) Q:ERRT=""  D
"RTN","BPSJACK",60,0)
 . I ERRT["NC100" S ERR(100)="Error:NC100 - Invalid OP Interface version." Q
"RTN","BPSJACK",61,0)
 . I ERRT["NC300" S ERR(300)="Error:NC300 - OP pharmacy not registered.  Failed to update Pharmacy information." Q
"RTN","BPSJACK",62,0)
 . I ERRT["NC301" S ERR(301)="Error:NC301 - Unable to update Pharmacy information due to outpatient pharmacy registration has invalid OP interface version." Q
"RTN","BPSJACK",63,0)
 . S ERR(399)="Error:"_ERRT_" - Unknown error."
"RTN","BPSJACK",64,0)
 K ERR("MFA"),ERR("MSA")
"RTN","BPSJACK",65,0)
 ;
"RTN","BPSJACK",66,0)
 Q
"RTN","BPSJACK",67,0)
 ;
"RTN","BPSJACK",68,0)
APPACK(HL,APPACK,PSIEN) ; Application Acknowledgement for Payer Sheets
"RTN","BPSJACK",69,0)
 N MGRP,MSG,MCT,BPSGENR
"RTN","BPSJACK",70,0)
 N TLN,FS,FS2,FS3,CS
"RTN","BPSJACK",71,0)
 ;
"RTN","BPSJACK",72,0)
 K ^TMP("HLA",$J)
"RTN","BPSJACK",73,0)
 ;
"RTN","BPSJACK",74,0)
 ;-Set up HL7
"RTN","BPSJACK",75,0)
 D INIT^HLFNC2("BPSJ REGISTER",.HL)
"RTN","BPSJACK",76,0)
 ;
"RTN","BPSJACK",77,0)
 D DGAPPACK  ; Dollar G the APPACK variable (bullet proofing)
"RTN","BPSJACK",78,0)
 ;
"RTN","BPSJACK",79,0)
 S FS=$G(HL("FS")) I FS="" S FS="|"      ; field separator
"RTN","BPSJACK",80,0)
 S CS=$E($G(HL("ECH"))) I CS="" S CS="^"  ; component separator
"RTN","BPSJACK",81,0)
 ;
"RTN","BPSJACK",82,0)
 S MCT=0,FS2=FS_FS,FS3=FS_FS_FS
"RTN","BPSJACK",83,0)
 ;
"RTN","BPSJACK",84,0)
 ;-MSA SEG
"RTN","BPSJACK",85,0)
 I APPACK("MFA",4,1)="S" S ^TMP("HLA",$J,1)="MSA"_FS_"AA"_FS_APPACK("MSA",2)
"RTN","BPSJACK",86,0)
 E  S ^TMP("HLA",$J,1)="MSA"_FS_"AE"_FS_APPACK("MSA",2)
"RTN","BPSJACK",87,0)
 ;
"RTN","BPSJACK",88,0)
 ;-MFI SEG
"RTN","BPSJACK",89,0)
 S TLN="MFI"_FS_APPACK("MFI",1,1)_CS_APPACK("MFI",1,2)_FS2
"RTN","BPSJACK",90,0)
 S ^TMP("HLA",$J,2)=TLN_APPACK("MFI",3)_FS3_APPACK("MFI",6)
"RTN","BPSJACK",91,0)
 ;
"RTN","BPSJACK",92,0)
 ;-MFA SEG(S)
"RTN","BPSJACK",93,0)
 I APPACK("MFA",4,1)="S" D  S ^TMP("HLA",$J,3)=TLN
"RTN","BPSJACK",94,0)
 . S TLN="MFA"_FS_APPACK("MFA",1)_FS_APPACK("MFA",2)_FS2
"RTN","BPSJACK",95,0)
 . S TLN=TLN_APPACK("MFA",4,1)_CS_APPACK("MFA",4,2)_FS
"RTN","BPSJACK",96,0)
 . S TLN=TLN_APPACK("MFA",5)_FS_APPACK("MFA",6)
"RTN","BPSJACK",97,0)
 E  D MFASEGS
"RTN","BPSJACK",98,0)
 ;
"RTN","BPSJACK",99,0)
 D GENACK^HLMA1($G(HL("EID")),$G(HL("HLMTIENS")),$G(HL("EIDS")),"GM",1,.BPSGENR)
"RTN","BPSJACK",100,0)
 ;
"RTN","BPSJACK",101,0)
 K ^TMP("HLA",$J)
"RTN","BPSJACK",102,0)
 Q
"RTN","BPSJACK",103,0)
 ;
"RTN","BPSJACK",104,0)
MFASEGS ; Set up the MFA segs for Reject message
"RTN","BPSJACK",105,0)
 N MFAP1,MFAP2,MFACNTR,FIELD,RECORD,ZPRERR
"RTN","BPSJACK",106,0)
 ;
"RTN","BPSJACK",107,0)
 S MFAP1="MFA"_FS_APPACK("MFA",1)_FS_APPACK("MFA",2)
"RTN","BPSJACK",108,0)
 S MFAP1=MFAP1_FS2_APPACK("MFA",4,1)_CS
"RTN","BPSJACK",109,0)
 S MFAP2=FS_APPACK("MFA",5)_FS_APPACK("MFA",6)
"RTN","BPSJACK",110,0)
 S MFACNTR=2
"RTN","BPSJACK",111,0)
 ;
"RTN","BPSJACK",112,0)
 I $D(^TMP($J,"BPSJ-ERROR","MFI")) S FIELD="" D
"RTN","BPSJACK",113,0)
 . F  S FIELD=$O(^TMP($J,"BPSJ-ERROR","MFI",FIELD)) Q:'FIELD  D
"RTN","BPSJACK",114,0)
 .. S MFACNTR=MFACNTR+1
"RTN","BPSJACK",115,0)
 .. S ^TMP("HLA",$J,MFACNTR)=MFAP1_"V60"_FIELD_MFAP2
"RTN","BPSJACK",116,0)
 ;
"RTN","BPSJACK",117,0)
 I $D(^TMP($J,"BPSJ-ERROR","MFE")) S FIELD="" D
"RTN","BPSJACK",118,0)
 . F  S FIELD=$O(^TMP($J,"BPSJ-ERROR","MFE",FIELD)) Q:'FIELD  D
"RTN","BPSJACK",119,0)
 .. S MFACNTR=MFACNTR+1
"RTN","BPSJACK",120,0)
 .. S ^TMP("HLA",$J,MFACNTR)=MFAP1_"V61"_FIELD_MFAP2
"RTN","BPSJACK",121,0)
 ;
"RTN","BPSJACK",122,0)
 I $D(^TMP($J,"BPSJ-ERROR","ZPS")) S FIELD="" D
"RTN","BPSJACK",123,0)
 . F  S FIELD=$O(^TMP($J,"BPSJ-ERROR","ZPS",FIELD)) Q:'FIELD  D
"RTN","BPSJACK",124,0)
 .. S MFACNTR=MFACNTR+1
"RTN","BPSJACK",125,0)
 .. S ^TMP("HLA",$J,MFACNTR)=MFAP1_"V62"_FIELD_MFAP2
"RTN","BPSJACK",126,0)
 ;
"RTN","BPSJACK",127,0)
 I $D(^TMP($J,"BPSJ-ERROR","ZPR")) S RECORD="" D
"RTN","BPSJACK",128,0)
 . F  S RECORD=$O(^TMP($J,"BPSJ-ERROR","ZPR",RECORD)),FIELD="" Q:'RECORD  D
"RTN","BPSJACK",129,0)
 .. F  S FIELD=$O(^TMP($J,"BPSJ-ERROR","ZPR",RECORD,FIELD)) Q:'FIELD  D
"RTN","BPSJACK",130,0)
 ... S ZPRERR=$G(^TMP($J,"BPSJ-ERROR","ZPR",RECORD,FIELD))
"RTN","BPSJACK",131,0)
 ... S MFACNTR=MFACNTR+1,^TMP("HLA",$J,MFACNTR)=MFAP1_ZPRERR_MFAP2
"RTN","BPSJACK",132,0)
 ;
"RTN","BPSJACK",133,0)
 Q
"RTN","BPSJACK",134,0)
DGAPPACK ; $G the APPACK var
"RTN","BPSJACK",135,0)
 S APPACK("MFA",1)=$G(APPACK("MFA",1))
"RTN","BPSJACK",136,0)
 S APPACK("MFA",2)=$G(APPACK("MFA",2))
"RTN","BPSJACK",137,0)
 S APPACK("MFA",3)=$G(APPACK("MFA",3))
"RTN","BPSJACK",138,0)
 S APPACK("MFA",4,1)=$G(APPACK("MFA",4,1))
"RTN","BPSJACK",139,0)
 S APPACK("MFA",4,2)=$G(APPACK("MFA",4,2))
"RTN","BPSJACK",140,0)
 S APPACK("MFA",5)=$G(APPACK("MFA",5))
"RTN","BPSJACK",141,0)
 S APPACK("MFA",6)=$G(APPACK("MFA",6))
"RTN","BPSJACK",142,0)
 S APPACK("MFI",1,1)=$G(APPACK("MFI",1,1))
"RTN","BPSJACK",143,0)
 S APPACK("MFI",1,2)=$G(APPACK("MFI",1,2))
"RTN","BPSJACK",144,0)
 S APPACK("MFI",3)=$G(APPACK("MFI",3))
"RTN","BPSJACK",145,0)
 S APPACK("MFI",6)=$G(APPACK("MFI",6))
"RTN","BPSJACK",146,0)
 S APPACK("MSA",1)=$G(APPACK("MSA",1))
"RTN","BPSJACK",147,0)
 S APPACK("MSA",2)=$G(APPACK("MSA",2))
"RTN","BPSJACK",148,0)
 Q
"RTN","BPSJAREG")
0^57^B11748725
"RTN","BPSJAREG",1,0)
BPSJAREG ;BHAM ISC/LJF - HL7 Application Registration MFN Message ;03/07/08  13:26
"RTN","BPSJAREG",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2,5,7,20**;JUN 2004;Build 27
"RTN","BPSJAREG",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSJAREG",4,0)
 ;
"RTN","BPSJAREG",5,0)
 ;  This program will process the outgoing registration MFN message
"RTN","BPSJAREG",6,0)
 ;
"RTN","BPSJAREG",7,0)
 ;  Variables
"RTN","BPSJAREG",8,0)
 ; HL      = HL7 parameters
"RTN","BPSJAREG",9,0)
 ; HL7DTG  = Date time in HL7 format
"RTN","BPSJAREG",10,0)
 ; HLECH   = HL7 Encoding Characters
"RTN","BPSJAREG",11,0)
 ; HLEID   = HL7 Link id
"RTN","BPSJAREG",12,0)
 ; HLFS    = HL7 Field separator
"RTN","BPSJAREG",13,0)
 ; HLLNK   = HL7 E-Pharm Link
"RTN","BPSJAREG",14,0)
 ; HLRESET = HL7 generate results
"RTN","BPSJAREG",15,0)
 ; DNS     = DNS Domain 
"RTN","BPSJAREG",16,0)
 ; IPP     = IP Port
"RTN","BPSJAREG",17,0)
 ; MCT     = Message Count
"RTN","BPSJAREG",18,0)
 ; MGRP    = E-Mail message group
"RTN","BPSJAREG",19,0)
 ; MSG     = Message
"RTN","BPSJAREG",20,0)
 ;
"RTN","BPSJAREG",21,0)
 ;
"RTN","BPSJAREG",22,0)
BPSJVAL(BPSJVAL) ; Validation entry point - HL7 message processing prevented
"RTN","BPSJAREG",23,0)
 ;
"RTN","BPSJAREG",24,0)
TASKMAN ; Entry point for taskman to run this routine
"RTN","BPSJAREG",25,0)
 ;
"RTN","BPSJAREG",26,0)
 N DA,HL,HL7DTG,HLECH,HLEID,HLFS,HLLNK,HLRESET,HLPRO
"RTN","BPSJAREG",27,0)
 N IPP,DNS
"RTN","BPSJAREG",28,0)
 N MGRP,MSG,MCT,BPSJARES,BPVALFN,DA
"RTN","BPSJAREG",29,0)
 ;
"RTN","BPSJAREG",30,0)
 S MCT=0,BPSJVAL=+$G(BPSJVAL)
"RTN","BPSJAREG",31,0)
 K ^TMP("HLS",$J)
"RTN","BPSJAREG",32,0)
 ;
"RTN","BPSJAREG",33,0)
 S BPVALFN=9002313.99,DA=1
"RTN","BPSJAREG",34,0)
 ;
"RTN","BPSJAREG",35,0)
 ;  Get Link data from HL7 table
"RTN","BPSJAREG",36,0)
 S HLPRO="BPSJ REGISTER",(DNS,IPP)="" ; BPS*20
"RTN","BPSJAREG",37,0)
 S HLLNK=$$FIND1^DIC(870,"",,"EPHARM OUT","B")
"RTN","BPSJAREG",38,0)
 I HLLNK S DNS=$$GET1^DIQ(870,HLLNK_",",.08),IPP=$$GET1^DIQ(870,HLLNK_",",400.02) ; BPS*20
"RTN","BPSJAREG",39,0)
 ;
"RTN","BPSJAREG",40,0)
 ;  Error if any missing data
"RTN","BPSJAREG",41,0)
 I DNS=""!(IPP="") S MCT=MCT+1,MSG(MCT)="DNS Domain Address or TCP/IP Port is not defined in file #870." ; BPS*20 
"RTN","BPSJAREG",42,0)
 I MCT,'BPSJVAL D MSG^BPSJUTL(.MSG,"BPSJAREG") Q
"RTN","BPSJAREG",43,0)
 ;
"RTN","BPSJAREG",44,0)
 ;  Initialize the HL7
"RTN","BPSJAREG",45,0)
 D INIT^HLFNC2(HLPRO,.HL)
"RTN","BPSJAREG",46,0)
 I $G(HL) S MCT=MCT+1,MSG(MCT)="HL7 initialization failed.",MCT=MCT+1,MSG(MCT)=HL Q
"RTN","BPSJAREG",47,0)
 S HLFS=$G(HL("FS")) I HLFS="" S HLFS="|"
"RTN","BPSJAREG",48,0)
 S HLECH=$E($G(HL("ECH")),1) I HLECH="" S HLECH="^"
"RTN","BPSJAREG",49,0)
 S HL("SITE")=$$SITE^VASITE,HL("SAF")=$P(HL("SITE"),U,2,3)
"RTN","BPSJAREG",50,0)
 S HL("EPPORT")=IPP,HLEID=$$HLP^BPSJUTL(HLPRO)
"RTN","BPSJAREG",51,0)
 ;
"RTN","BPSJAREG",52,0)
 ;Get fileman date/time, ensuring seconds are included: 3031029.135636
"RTN","BPSJAREG",53,0)
 S HL7DTG=$E($$HTFM^XLFDT($H)_"000000",1,14)
"RTN","BPSJAREG",54,0)
 ;Set HL7 Date/Time format: 20031029135636-0400
"RTN","BPSJAREG",55,0)
 S HL7DTG=$$FMTHL7^XLFDT(HL7DTG)
"RTN","BPSJAREG",56,0)
 ;
"RTN","BPSJAREG",57,0)
 ;   Set the MFI segment
"RTN","BPSJAREG",58,0)
 S ^TMP("HLS",$J,1)="MFI"_HLFS_"Facility Table"_HLFS_HLFS_"UPD"_HLFS
"RTN","BPSJAREG",59,0)
 S ^TMP("HLS",$J,1)=^TMP("HLS",$J,1)_HL7DTG_HLFS_HL7DTG_HLFS_"NE"
"RTN","BPSJAREG",60,0)
 ;
"RTN","BPSJAREG",61,0)
 ;  Set the MFE segment
"RTN","BPSJAREG",62,0)
 S ^TMP("HLS",$J,2)="MFE"_HLFS_"MUP"_HLFS_HLFS_HL7DTG_HLFS
"RTN","BPSJAREG",63,0)
 S ^TMP("HLS",$J,2)=^TMP("HLS",$J,2)_$P(HL("SITE"),"^",3)_HLFS_"ST"
"RTN","BPSJAREG",64,0)
 ;
"RTN","BPSJAREG",65,0)
 ; Set the ZQR segment
"RTN","BPSJAREG",66,0)
 S ^TMP("HLS",$J,3)=$$EN^BPSJZQR(.HL)
"RTN","BPSJAREG",67,0)
 ;
"RTN","BPSJAREG",68,0)
 S BPSJARES=$$VAL1^BPSJVAL(BPSJVAL)   ; 0 = ok,
"RTN","BPSJAREG",69,0)
 I BPSJVAL=3 G FINI   ; Just checking to see if data valid.
"RTN","BPSJAREG",70,0)
 ;
"RTN","BPSJAREG",71,0)
 ;-Check if msg valid.
"RTN","BPSJAREG",72,0)
 I 'BPSJARES D  G FINI
"RTN","BPSJAREG",73,0)
 . N BPSHLRS
"RTN","BPSJAREG",74,0)
 . D GENERATE^HLMA(HLEID,"GM",1,.BPSHLRS,"")
"RTN","BPSJAREG",75,0)
 . I $P($G(BPSHLRS),U,2)]"" D  Q
"RTN","BPSJAREG",76,0)
 .. I BPSJVAL D  Q   ; Interactive: show no success
"RTN","BPSJAREG",77,0)
 ... W !!,"ECME Application Registration HL7 Message not created: "_BPSHLRS
"RTN","BPSJAREG",78,0)
 .. S MCT=MCT+1,MSG(MCT)="ECME Application Registration HL7 Message not created."
"RTN","BPSJAREG",79,0)
 .. S MCT=MCT+1,MSG(MCT)=BPSHLRS
"RTN","BPSJAREG",80,0)
 .. D MSG^BPSJUTL(.MSG,"ECME Application Registration")
"RTN","BPSJAREG",81,0)
 . I BPSJVAL D    ;Interactive: show success
"RTN","BPSJAREG",82,0)
 .. W !!,"ECME Application Registration HL7 Message successfully created."
"RTN","BPSJAREG",83,0)
 . S $P(^BPS(9002313.99,1,0),"^",4)=$$NOW^XLFDT
"RTN","BPSJAREG",84,0)
 ;
"RTN","BPSJAREG",85,0)
FINI ; Clean up
"RTN","BPSJAREG",86,0)
 K ^TMP("HLS",$J)
"RTN","BPSJAREG",87,0)
 Q
"RTN","BPSJHLI")
0^38^B4405994
"RTN","BPSJHLI",1,0)
BPSJHLI ;BHAM ISC/LJF - Incoming HL7 E-PHARM messages ;21-NOV-2003
"RTN","BPSJHLI",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,20**;JUN 2004;Build 27
"RTN","BPSJHLI",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSJHLI",4,0)
 ;
"RTN","BPSJHLI",5,0)
 ;**Program Description**
"RTN","BPSJHLI",6,0)
 ;  This program processes incoming HL7 message.
"RTN","BPSJHLI",7,0)
 ;
"RTN","BPSJHLI",8,0)
EN ;  Starting point - put message into a TMP global
"RTN","BPSJHLI",9,0)
 N SEGCNT,CNT,SEGMT,EVENT,MSG,MCT,FSHLI
"RTN","BPSJHLI",10,0)
 N HCT,ERRFLAG,BPSJSEG,BPSFILE1,BPSFLN1,IDUZ,APP,HLECH,HLFS,HLQ,SEG
"RTN","BPSJHLI",11,0)
 ;
"RTN","BPSJHLI",12,0)
 K ^TMP($J,"BPSJHLI") S MCT=0
"RTN","BPSJHLI",13,0)
 F SEGCNT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","BPSJHLI",14,0)
 . S CNT=0,^TMP($J,"BPSJHLI",SEGCNT,CNT)=HLNODE
"RTN","BPSJHLI",15,0)
 . F  S CNT=$O(HLNODE(CNT)) Q:'CNT  D
"RTN","BPSJHLI",16,0)
 .. S ^TMP($J,"BPSJHLI",SEGCNT,CNT)=HLNODE(CNT)
"RTN","BPSJHLI",17,0)
 ;
"RTN","BPSJHLI",18,0)
 ; Check MSH seg
"RTN","BPSJHLI",19,0)
 S SEGMT=$G(^TMP($J,"BPSJHLI",1,0))
"RTN","BPSJHLI",20,0)
 S FSHLI=$G(HL("FS")) I FSHLI="" S (FS,FSHLI)=$E(SEGMT,4)
"RTN","BPSJHLI",21,0)
 ;
"RTN","BPSJHLI",22,0)
 I $E(SEGMT,1,3)'="MSH" D  D MSG^BPSJUTL(.MSG,"BPSJHLI") G EXIT
"RTN","BPSJHLI",23,0)
 . S MCT=MCT+1,MSG(MCT)="MSH Segment is not the first segment found"
"RTN","BPSJHLI",24,0)
 ;
"RTN","BPSJHLI",25,0)
 S EVENT=$P(SEGMT,FSHLI,9)
"RTN","BPSJHLI",26,0)
 ;
"RTN","BPSJHLI",27,0)
 S HLECH=$$GET1^DIQ(771,$$GET1^DIQ(101,$G(HL("EID")),770.1,"I"),101)
"RTN","BPSJHLI",28,0)
 I HLECH="" S HLECH=$G(HL("ECH"))
"RTN","BPSJHLI",29,0)
 S HLFS=$G(HL("FS"),"|"),HLQ=$G(HL("Q"),""),HCT=1,ERRFLAG=0,APP=""
"RTN","BPSJHLI",30,0)
 F  D  Q:'HCT  I ERRFLAG Q
"RTN","BPSJHLI",31,0)
 . K BPSJSEG S HCT=$O(^TMP($J,"BPSJHLI",HCT))
"RTN","BPSJHLI",32,0)
 . D SPAR^BPSJUTL(.HL,.BPSJSEG,HCT) S SEG=$G(BPSJSEG(1))
"RTN","BPSJHLI",33,0)
 . ;
"RTN","BPSJHLI",34,0)
 . I SEG="MFI" D  Q
"RTN","BPSJHLI",35,0)
 .. S BPSFILE1=$G(BPSJSEG(2))
"RTN","BPSJHLI",36,0)
 .. S BPSFLN1=$P(BPSFILE1,"^")
"RTN","BPSJHLI",37,0)
 .. I ",366.01,366.02,366.03,"[(","_BPSFLN1_",") D  Q
"RTN","BPSJHLI",38,0)
 ... S APP="TABLE"
"RTN","BPSJHLI",39,0)
 ... ;
"RTN","BPSJHLI",40,0)
 ... ; Set non-human user to POSTMASTER
"RTN","BPSJHLI",41,0)
 ... S IDUZ=.5
"RTN","BPSJHLI",42,0)
 ;
"RTN","BPSJHLI",43,0)
 I EVENT="MFK^M01",APP="TABLE" G EXIT
"RTN","BPSJHLI",44,0)
 ;
"RTN","BPSJHLI",45,0)
 ;  Acknowledgement Processing
"RTN","BPSJHLI",46,0)
 I EVENT="MFK^M01" D EN^BPSJACK(.HL) G EXIT
"RTN","BPSJHLI",47,0)
 ;
"RTN","BPSJHLI",48,0)
 ;  Table Update Processing for Payer Sheets
"RTN","BPSJHLI",49,0)
 I EVENT="MFN^M01" D
"RTN","BPSJHLI",50,0)
 . S HL("HLMTIENS")=$G(HLMTIENS)
"RTN","BPSJHLI",51,0)
 . D EN^BPSJHLT(.HL)
"RTN","BPSJHLI",52,0)
 ;
"RTN","BPSJHLI",53,0)
EXIT ;
"RTN","BPSJHLI",54,0)
 K ^TMP($J,"BPSJHLI"),SEGCNT,CNT,HL,HLREC,HLNEXT,HLNODE
"RTN","BPSJHLI",55,0)
 Q
"RTN","BPSJHLT")
0^39^B84683560
"RTN","BPSJHLT",1,0)
BPSJHLT ;BHAM ISC/LJF - HL7 Process Incoming MFN Messages ;05-NOV-2003
"RTN","BPSJHLT",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,10,15,19,20**;JUN 2004;Build 27
"RTN","BPSJHLT",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSJHLT",4,0)
 ;
"RTN","BPSJHLT",5,0)
 ; Use of ERR^IBCNRHLU, HLT^IBCNRHLU, and MFK^IBCNRHLU supported by IA #6250
"RTN","BPSJHLT",6,0)
 ;
"RTN","BPSJHLT",7,0)
 ;**Program Description**
"RTN","BPSJHLT",8,0)
 ;  This program will process incoming MFN messages and
"RTN","BPSJHLT",9,0)
 ;  update the appropriate tables
"RTN","BPSJHLT",10,0)
 ;
"RTN","BPSJHLT",11,0)
 ; Direct entry not allowed
"RTN","BPSJHLT",12,0)
 Q
"RTN","BPSJHLT",13,0)
 ;
"RTN","BPSJHLT",14,0)
PKY(PKYNM,PKYROOT,ADD) ;Lookup ien or add using PKYNM
"RTN","BPSJHLT",15,0)
 N DA,DO,DIC,DIE,DINUM,DLAYGO,DTOUT,DUOUT,Y,X
"RTN","BPSJHLT",16,0)
 I $G(PKYNM)]"",$G(PKYROOT)]"" S ADD=+$G(ADD)
"RTN","BPSJHLT",17,0)
 E  Q 0
"RTN","BPSJHLT",18,0)
 S X=PKYNM,DIC=PKYROOT
"RTN","BPSJHLT",19,0)
 I 'ADD S DIC(0)="X" D ^DIC
"RTN","BPSJHLT",20,0)
 I ADD S DIC(0)="L",DLAYGO=PKYROOT D FILE^DICN
"RTN","BPSJHLT",21,0)
 Q +Y
"RTN","BPSJHLT",22,0)
 ;
"RTN","BPSJHLT",23,0)
EN(HL) ;  Entry Point
"RTN","BPSJHLT",24,0)
 ;
"RTN","BPSJHLT",25,0)
 N BPSJACT,BPSJPKY,BPSJADT,BPSZPRER,BPSJROOT,PSIEN,APPACK
"RTN","BPSJHLT",26,0)
 N ZPRS,BPSJSEG,HCT,ERRFLAG,NAFLG,NPFLG,SEG,MSG,MCT,FLN,FILE
"RTN","BPSJHLT",27,0)
 N RBSTART,RBEND,RBCNT,ZPSNNAME,ZPRCNT,BPSETID,RCODE,MAXRX
"RTN","BPSJHLT",28,0)
 N FS,CS,PSHTVER,NCPDPVER,NCPDPCK,BPSFILE,BPSJCNT,BPSJDEVN
"RTN","BPSJHLT",29,0)
 N BPSJPROD,BPSJNAME,DIK,TCH
"RTN","BPSJHLT",30,0)
 N AIEN,APIEN,D0,D,IEN,IBCNACT,DATAMFK,C,CMIEN,DATA,IBSEG
"RTN","BPSJHLT",31,0)
 N DATAAP,DATABPS,DATACM,DATE,EPHARM,FIELDNO,FILENO,DI,I,MGRP
"RTN","BPSJHLT",32,0)
 ;
"RTN","BPSJHLT",33,0)
 S FS=$G(HL("FS")) I FS="" S FS="|"      ; field separator
"RTN","BPSJHLT",34,0)
 S CS=$E($G(HL("ECH"))) I CS="" S CS="^"  ; component separator
"RTN","BPSJHLT",35,0)
 ;
"RTN","BPSJHLT",36,0)
 K ^TMP($J,"BPSJ-RBACK"),^TMP($J,"BPSJ-ERROR")
"RTN","BPSJHLT",37,0)
 ;
"RTN","BPSJHLT",38,0)
 D INITZPRS^BPSJZPR(.ZPRS)
"RTN","BPSJHLT",39,0)
 S BPSFILE=9002313.92,BPSJROOT=$$ROOT^DILFD(BPSFILE)
"RTN","BPSJHLT",40,0)
 S RBSTART=100,RBEND=300,NCPDPCK=",51,D0,"
"RTN","BPSJHLT",41,0)
 S (ZPSNNAME,BPSJPROD,NCPDPVER,PSHTVER,BPSJACT,BPSJADT,BPSJPKY)=""
"RTN","BPSJHLT",42,0)
 ;
"RTN","BPSJHLT",43,0)
 ; Initialize some Application Acknowledgement data
"RTN","BPSJHLT",44,0)
 D DGAPPACK^BPSJACK
"RTN","BPSJHLT",45,0)
 S APPACK("MSA",1)="AE"  ; Assume error
"RTN","BPSJHLT",46,0)
 S APPACK("MSA",2)=$G(HL("MID"))  ; Message ID
"RTN","BPSJHLT",47,0)
 S APPACK("MFA",4,1)="U" ; Set flag type of "unsuccessful event"
"RTN","BPSJHLT",48,0)
 S APPACK("MFA",6)="ST"
"RTN","BPSJHLT",49,0)
 S APPACK("MFI",6)="NE"
"RTN","BPSJHLT",50,0)
 ;
"RTN","BPSJHLT",51,0)
 ; Init encoding char array
"RTN","BPSJHLT",52,0)
 S TCH("\F\")="|",TCH("\R\")="~"
"RTN","BPSJHLT",53,0)
 S TCH("\E\")="\",TCH("\T\")="&"
"RTN","BPSJHLT",54,0)
 ;
"RTN","BPSJHLT",55,0)
 ; Variables BPSFLN1 and BPSFILE1 are defined in the calling routine
"RTN","BPSJHLT",56,0)
 ; BPSJHLI.  Variables FLN and FILE are used externally in subsequent
"RTN","BPSJHLT",57,0)
 ; IBCNR* routines during segment processing.
"RTN","BPSJHLT",58,0)
 I APP="TABLE" S FLN=BPSFLN1,FILE=BPSFILE1
"RTN","BPSJHLT",59,0)
 ;
"RTN","BPSJHLT",60,0)
 S HCT=1,(MCT,NAFLG,NPFLG,ERRFLAG,ZPRCNT,MAXRX)=0
"RTN","BPSJHLT",61,0)
 F  D  Q:'HCT  I ERRFLAG Q
"RTN","BPSJHLT",62,0)
 . K BPSJSEG S HCT=$O(^TMP($J,"BPSJHLI",HCT))
"RTN","BPSJHLT",63,0)
 . D SPAR^BPSJUTL(.HL,.BPSJSEG,HCT) S SEG=$G(BPSJSEG(1))
"RTN","BPSJHLT",64,0)
 . ;
"RTN","BPSJHLT",65,0)
 . ;                    ; payer sheet detail (multiple)
"RTN","BPSJHLT",66,0)
 . I SEG="ZPR" D  Q     ; Record #5+  (MSH is record #1)
"RTN","BPSJHLT",67,0)
 .. ;
"RTN","BPSJHLT",68,0)
 .. I ERRFLAG Q  ; Fatal Error
"RTN","BPSJHLT",69,0)
 .. S ZPRCNT=ZPRCNT+1,BPSETID=$G(BPSJSEG(2))
"RTN","BPSJHLT",70,0)
 .. ;-If not numeric equivalent the warp engines are offline, Captain
"RTN","BPSJHLT",71,0)
 .. I BPSETID'=ZPRCNT D FAKEREC(ZPRCNT)
"RTN","BPSJHLT",72,0)
 .. D EN^BPSJZPR(PSIEN,.BPSJSEG,BPSJROOT,BPSFILE)
"RTN","BPSJHLT",73,0)
 . ;
"RTN","BPSJHLT",74,0)
 . I SEG="MFI" D  Q    ; Record #2
"RTN","BPSJHLT",75,0)
 .. ;
"RTN","BPSJHLT",76,0)
 .. I APP="TABLE" D  Q
"RTN","BPSJHLT",77,0)
 ... K IBSEG M IBSEG=BPSJSEG
"RTN","BPSJHLT",78,0)
 ... ;
"RTN","BPSJHLT",79,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","BPSJHLT",80,0)
 ... ; Master File Identifier
"RTN","BPSJHLT",81,0)
 ... S DATAMFK("MFI-1")=$G(BPSJSEG(2))
"RTN","BPSJHLT",82,0)
 ... ;
"RTN","BPSJHLT",83,0)
 ... ; File-Level Event Code
"RTN","BPSJHLT",84,0)
 ... S DATAMFK("MFI-3")=$G(BPSJSEG(4))
"RTN","BPSJHLT",85,0)
 .. ;
"RTN","BPSJHLT",86,0)
 .. ;-Required Field checks
"RTN","BPSJHLT",87,0)
 .. D ERRMSG(0,"MFI","1,2,3",.BPSJSEG)
"RTN","BPSJHLT",88,0)
 .. ;
"RTN","BPSJHLT",89,0)
 .. S APPACK("MFI",1,1)=$P($G(BPSJSEG(2)),CS)
"RTN","BPSJHLT",90,0)
 .. S APPACK("MFI",1,2)=$P($G(BPSJSEG(2)),CS,2)
"RTN","BPSJHLT",91,0)
 .. I APPACK("MFI",1,1)]"",APPACK("MFI",1,2)]""
"RTN","BPSJHLT",92,0)
 .. E  D
"RTN","BPSJHLT",93,0)
 ... ; hard code these for Version 1.0 of s/w
"RTN","BPSJHLT",94,0)
 ... D FILE^DID(BPSFILE,,"NAME","BPSJNAME")
"RTN","BPSJHLT",95,0)
 ... I APPACK("MFI",1,1)="" S APPACK("MFI",1,1)=BPSFILE
"RTN","BPSJHLT",96,0)
 ... I APPACK("MFI",1,2)="" S APPACK("MFI",1,2)=$G(BPSJNAME("NAME"))
"RTN","BPSJHLT",97,0)
 ... K BPSJNAME
"RTN","BPSJHLT",98,0)
 ... ;
"RTN","BPSJHLT",99,0)
 .. S APPACK("MFI",3)=$G(BPSJSEG(4))
"RTN","BPSJHLT",100,0)
 . ;
"RTN","BPSJHLT",101,0)
 . I SEG="MFE" D  Q   ; Record #3
"RTN","BPSJHLT",102,0)
 .. ;
"RTN","BPSJHLT",103,0)
 .. I APP="TABLE" D  Q
"RTN","BPSJHLT",104,0)
 ... K IBSEG M IBSEG=BPSJSEG
"RTN","BPSJHLT",105,0)
 ... I BPSFLN1="" S ERRFLAG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","BPSJHLT",106,0)
 ... I '$$VFILE^DILFD(BPSFLN1) S ERRFLAG=1,MSG(1)="File "_BPSFLN1_" not found in the Data Dictionary" Q
"RTN","BPSJHLT",107,0)
 ... ;
"RTN","BPSJHLT",108,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","BPSJHLT",109,0)
 ... ; Record-Level Event Code
"RTN","BPSJHLT",110,0)
 ... S DATAMFK("MFE-1")=$G(BPSJSEG(2))
"RTN","BPSJHLT",111,0)
 ... ;
"RTN","BPSJHLT",112,0)
 ... ; Primary Key Value
"RTN","BPSJHLT",113,0)
 ... S DATAMFK("MFE-4")=$G(BPSJSEG(5))
"RTN","BPSJHLT",114,0)
 ... ;
"RTN","BPSJHLT",115,0)
 ... ; Primary Key Value Type
"RTN","BPSJHLT",116,0)
 ... S DATAMFK("MFE-5")=$G(BPSJSEG(6))
"RTN","BPSJHLT",117,0)
 ... ;
"RTN","BPSJHLT",118,0)
 ... ;Transfer control to IB for ePharmacy IB Table updates
"RTN","BPSJHLT",119,0)
 ... D HLT^IBCNRHLU   ; IA# 6250
"RTN","BPSJHLT",120,0)
 .. ;
"RTN","BPSJHLT",121,0)
 .. ;-Required Field checks
"RTN","BPSJHLT",122,0)
 .. D ERRMSG(0,"MFE","1,2,4,5",.BPSJSEG)
"RTN","BPSJHLT",123,0)
 .. ;
"RTN","BPSJHLT",124,0)
 .. S BPSJADT=$$NOW^XLFDT()
"RTN","BPSJHLT",125,0)
 .. S (BPSJACT,APPACK("MFA",1))=$G(BPSJSEG(2))  ; Action type
"RTN","BPSJHLT",126,0)
 .. I $L(BPSJACT)=3,"^MAD^MUP^MDC^"[(U_BPSJACT_U)
"RTN","BPSJHLT",127,0)
 .. E  D ERRMSG(1,"MFE","1^INVALID EVENT CODE")
"RTN","BPSJHLT",128,0)
 .. ;
"RTN","BPSJHLT",129,0)
 .. S APPACK("MFA",2)=$G(BPSJSEG(3))       ; MFN Control ID
"RTN","BPSJHLT",130,0)
 .. ;
"RTN","BPSJHLT",131,0)
 .. ; Old/Current Sheet name
"RTN","BPSJHLT",132,0)
 .. S (BPSJPKY,APPACK("MFA",5))=$G(BPSJSEG(5))
"RTN","BPSJHLT",133,0)
 .. S APPACK("MFA",4,2)="Payer Sheet "_BPSJPKY
"RTN","BPSJHLT",134,0)
 .. S BPSJPKY=$$DECODE^BPSJZPR(BPSJPKY,.TCH)
"RTN","BPSJHLT",135,0)
 .. ;
"RTN","BPSJHLT",136,0)
 .. ;-Get ien using sheet name, if one exists
"RTN","BPSJHLT",137,0)
 .. S PSIEN=$$PKY(BPSJPKY,BPSJROOT)
"RTN","BPSJHLT",138,0)
 .. ;
"RTN","BPSJHLT",139,0)
 .. I PSIEN=0 D ERRMSG(91,"Fileman error") Q
"RTN","BPSJHLT",140,0)
 .. ;
"RTN","BPSJHLT",141,0)
 .. I PSIEN>0 D   ; Exists: save current data for rollback
"RTN","BPSJHLT",142,0)
 ... S APPACK("MFA",4,1)="P" ;Set flag type to "P"rior version
"RTN","BPSJHLT",143,0)
 ... M ^TMP($J,"BPSJ-RBACK",PSIEN)=^BPSF(9002313.92,PSIEN)
"RTN","BPSJHLT",144,0)
 ... ;-Kill appropriate existing Payer Sheet fields
"RTN","BPSJHLT",145,0)
 ... F RBCNT=RBSTART:10:RBEND K ^BPSF(9002313.92,PSIEN,RBCNT)
"RTN","BPSJHLT",146,0)
 .. ;
"RTN","BPSJHLT",147,0)
 .. ;-Create development sheet
"RTN","BPSJHLT",148,0)
 .. I PSIEN<0 S BPSJCNT=0 F  S BPSJCNT=1+BPSJCNT D  Q:PSIEN>0
"RTN","BPSJHLT",149,0)
 ... S BPSJDEVN="BPSJ-DEV-"_$J_"-"_BPSJCNT
"RTN","BPSJHLT",150,0)
 ... S PSIEN=$$PKY(BPSJDEVN,BPSJROOT)    ; see if dev sheet exists
"RTN","BPSJHLT",151,0)
 ... I PSIEN>-1 S PSIEN=0 Q
"RTN","BPSJHLT",152,0)
 ... S PSIEN=$$PKY(BPSJDEVN,BPSJROOT,1)  ; add new one
"RTN","BPSJHLT",153,0)
 .. ;
"RTN","BPSJHLT",154,0)
 .. I PSIEN=0 D ERRMSG(92,"Fileman error") Q
"RTN","BPSJHLT",155,0)
 .. ;
"RTN","BPSJHLT",156,0)
 .. ;-Flag the sheet as being in development by this process
"RTN","BPSJHLT",157,0)
 .. K DA,DIE,DR S DA=PSIEN,DIE=BPSJROOT
"RTN","BPSJHLT",158,0)
 .. S DR="1.06////1."_$J ;FOR DEVELOPMENT
"RTN","BPSJHLT",159,0)
 .. D ^DIE
"RTN","BPSJHLT",160,0)
 . ;
"RTN","BPSJHLT",161,0)
 . I APP="TABLE" D  Q
"RTN","BPSJHLT",162,0)
 .. Q:'HCT
"RTN","BPSJHLT",163,0)
 .. K IBSEG M IBSEG=BPSJSEG
"RTN","BPSJHLT",164,0)
 .. ; Transfer control on other segments
"RTN","BPSJHLT",165,0)
 .. I ",ZCM,ZP0,ZPB,ZPL,ZPP,ZPT,"[(","_SEG_",") D HLT^IBCNRHLU   ; IA# 6250
"RTN","BPSJHLT",166,0)
 . ;
"RTN","BPSJHLT",167,0)
 . ;payer sheet header
"RTN","BPSJHLT",168,0)
 . I SEG="ZPS" D  Q    ; Record #4
"RTN","BPSJHLT",169,0)
 .. ;
"RTN","BPSJHLT",170,0)
 .. ;-Required Field checks
"RTN","BPSJHLT",171,0)
 .. D ERRMSG(0,"ZPS","1,2,3,4,5,6,7",.BPSJSEG)
"RTN","BPSJHLT",172,0)
 .. ;
"RTN","BPSJHLT",173,0)
 .. ;-New sheet name, production status and Payer Sheet and NCPDP versions
"RTN","BPSJHLT",174,0)
 .. S ZPSNNAME=$$DECODE^BPSJZPR($G(BPSJSEG(4)),.TCH) K TCH
"RTN","BPSJHLT",175,0)
 .. I ZPSNNAME="" S ZPSNNAME=$G(BPSJPKY)
"RTN","BPSJHLT",176,0)
 .. ;Cannot rename an existing worksheet to a different but already existing name BPS*1*10
"RTN","BPSJHLT",177,0)
 .. I ZPSNNAME]"",ZPSNNAME'=$G(BPSJPKY),$$PKY(ZPSNNAME,BPSJROOT)]"" S ^TMP($J,"BPSJ-ERROR","ZPS",3)=""
"RTN","BPSJHLT",178,0)
 .. S BPSJPROD=$G(BPSJSEG(8)) I BPSJPROD'="P" S BPSJPROD="T"
"RTN","BPSJHLT",179,0)
 .. S PSHTVER=$G(BPSJSEG(5)) I PSHTVER'=(PSHTVER\1) S ^TMP($J,"BPSJ-ERROR","ZPS",4)=""
"RTN","BPSJHLT",180,0)
 .. S NCPDPVER=$G(BPSJSEG(6)) I NCPDPVER=""!(NCPDPCK'[NCPDPVER) S ^TMP($J,"BPSJ-ERROR","ZPS",5)=""
"RTN","BPSJHLT",181,0)
 ;
"RTN","BPSJHLT",182,0)
 I APP="TABLE" D  Q
"RTN","BPSJHLT",183,0)
 . I ERRFLAG D ERR^IBCNRHLU K ERRFLAG   ; IA# 6250
"RTN","BPSJHLT",184,0)
 . ;
"RTN","BPSJHLT",185,0)
 . ; Send MFK Message (Application Acknowledgement)
"RTN","BPSJHLT",186,0)
 . I HL("APAT")="AL",$G(EPHARM) D MFK^IBCNRHLU   ; IA# 6250
"RTN","BPSJHLT",187,0)
 . ;
"RTN","BPSJHLT",188,0)
 . K ^TMP($J,"BPSJ-RBACK"),^TMP($J,"BPSJ-ERROR")
"RTN","BPSJHLT",189,0)
 ;
"RTN","BPSJHLT",190,0)
 I '$D(^TMP($J,"BPSJ-ERROR")) D
"RTN","BPSJHLT",191,0)
 . S APPACK("MFA",4,1)="S"  ; flag success
"RTN","BPSJHLT",192,0)
 . S DR=".01////"_ZPSNNAME  ; set the name
"RTN","BPSJHLT",193,0)
 . S DA=PSIEN,DIE=BPSJROOT D ^DIE
"RTN","BPSJHLT",194,0)
 . ;
"RTN","BPSJHLT",195,0)
 . I BPSJACT="MDC" S BPSJACT=0  ;Disabled
"RTN","BPSJHLT",196,0)
 . E  D  I 'BPSJACT S BPSJACT=0
"RTN","BPSJHLT",197,0)
 .. I BPSJPROD="P" S BPSJACT=3  ;Production
"RTN","BPSJHLT",198,0)
 .. I BPSJPROD="T" S BPSJACT=2  ;Testing
"RTN","BPSJHLT",199,0)
 . S DR="1.06////"_BPSJACT,DA=PSIEN,DIE=BPSJROOT D ^DIE
"RTN","BPSJHLT",200,0)
 . ; NCPDP Version
"RTN","BPSJHLT",201,0)
 . S DR="1.02////"_NCPDPVER,DA=PSIEN,DIE=BPSJROOT D ^DIE
"RTN","BPSJHLT",202,0)
 . ; Payer Sheet Version
"RTN","BPSJHLT",203,0)
 . S DR="1.14////"_PSHTVER,DA=PSIEN,DIE=BPSJROOT D ^DIE
"RTN","BPSJHLT",204,0)
 E  I $G(PSIEN) D   ;-Roll back
"RTN","BPSJHLT",205,0)
 . ;-Remove if no prior existence
"RTN","BPSJHLT",206,0)
 . I $G(^TMP($J,"BPSJ-RBACK",PSIEN,0))="" D  Q
"RTN","BPSJHLT",207,0)
 .. S DIK=BPSJROOT,DA=PSIEN D ^DIK
"RTN","BPSJHLT",208,0)
 . ;
"RTN","BPSJHLT",209,0)
 . ; Restore old data
"RTN","BPSJHLT",210,0)
 . S ^BPSF(9002313.92,PSIEN,0)=$G(^TMP($J,"BPSJ-RBACK",PSIEN,0))
"RTN","BPSJHLT",211,0)
 . S ^BPSF(9002313.92,PSIEN,1)=$G(^TMP($J,"BPSJ-RBACK",PSIEN,1))
"RTN","BPSJHLT",212,0)
 . F RBCNT=RBSTART:10:RBEND D
"RTN","BPSJHLT",213,0)
 .. K ^BPSF(9002313.92,PSIEN,RBCNT)
"RTN","BPSJHLT",214,0)
 .. M ^BPSF(9002313.92,PSIEN,RBCNT)=^TMP($J,"BPSJ-RBACK",PSIEN,RBCNT)
"RTN","BPSJHLT",215,0)
 ;
"RTN","BPSJHLT",216,0)
 D APPACK^BPSJACK(.HL,.APPACK,PSIEN)
"RTN","BPSJHLT",217,0)
 ;
"RTN","BPSJHLT",218,0)
 K ^TMP($J,"BPSJ-RBACK"),^TMP($J,"BPSJ-ERROR")
"RTN","BPSJHLT",219,0)
 ;
"RTN","BPSJHLT",220,0)
 Q
"RTN","BPSJHLT",221,0)
 ;
"RTN","BPSJHLT",222,0)
FAKEREC(REF) ; Setup a fake Record ID (Set ID)
"RTN","BPSJHLT",223,0)
 N IX
"RTN","BPSJHLT",224,0)
 ;
"RTN","BPSJHLT",225,0)
 S REF=+$G(REF)
"RTN","BPSJHLT",226,0)
 S IX=$G(BPSJSEG(2)),BPSJSEG(2)=REF
"RTN","BPSJHLT",227,0)
 I IX="" D  Q   ; Missing
"RTN","BPSJHLT",228,0)
 . S ^TMP($J,"BPSJ-ERROR","ZPR",REF,1)="V631-1,"_REF
"RTN","BPSJHLT",229,0)
 ;
"RTN","BPSJHLT",230,0)
 I IX=+IX,IX'=0
"RTN","BPSJHLT",231,0)
 E  D  Q          ; Invalid
"RTN","BPSJHLT",232,0)
 . S ^TMP($J,"BPSJ-ERROR","ZPR",REF,1)="V631-2,"_REF
"RTN","BPSJHLT",233,0)
 ;
"RTN","BPSJHLT",234,0)
 ; We have a valid numeric to work with, but:
"RTN","BPSJHLT",235,0)
 ;
"RTN","BPSJHLT",236,0)
 ; Duplicate
"RTN","BPSJHLT",237,0)
 I $G(^TMP($J,"BPSJ-ERROR","ZPR",IX))=IX D  Q
"RTN","BPSJHLT",238,0)
 . S ^TMP($J,"BPSJ-ERROR","ZPR",REF,1)="V631-4,"_REF
"RTN","BPSJHLT",239,0)
 ;
"RTN","BPSJHLT",240,0)
 ; Out Of Sequence
"RTN","BPSJHLT",241,0)
 S ^TMP($J,"BPSJ-ERROR","ZPR",REF,1)="V631-3,"_REF
"RTN","BPSJHLT",242,0)
 S ^TMP($J,"BPSJ-ERROR","ZPR",REF)=IX
"RTN","BPSJHLT",243,0)
 ;
"RTN","BPSJHLT",244,0)
 Q
"RTN","BPSJHLT",245,0)
 ;
"RTN","BPSJHLT",246,0)
ERRMSG(SPECIAL,SEG,REQFLDS,BPSJSEG) ;
"RTN","BPSJHLT",247,0)
 N FCNT,FNO,FIELD,C
"RTN","BPSJHLT",248,0)
 S C=",",SPECIAL=+$G(SPECIAL),SEG=$G(SEG),REQFLDS=$G(REQFLDS)
"RTN","BPSJHLT",249,0)
 I 'SPECIAL D  Q
"RTN","BPSJHLT",250,0)
 . ;-Evaluate required fields for non ZPR segs
"RTN","BPSJHLT",251,0)
 . S FNO=$J(REQFLDS,C)
"RTN","BPSJHLT",252,0)
 . F FCNT=1:1:FNO S FIELD=$P(REQFLDS,C,FCNT) I FIELD D
"RTN","BPSJHLT",253,0)
 .. ;-Set flag for empty required field
"RTN","BPSJHLT",254,0)
 .. I $G(BPSJSEG(FIELD+1))="" S ^TMP($J,"BPSJ-ERROR",SEG,FIELD)=""
"RTN","BPSJHLT",255,0)
 ;
"RTN","BPSJHLT",256,0)
 ;-"Special" handler
"RTN","BPSJHLT",257,0)
 I SPECIAL=1 D  Q
"RTN","BPSJHLT",258,0)
 . ;-Set flag that field contains invalid value
"RTN","BPSJHLT",259,0)
 . S ^TMP($J,"BPSJ-ERROR",SEG,+REQFLDS)=REQFLDS
"RTN","BPSJHLT",260,0)
 ;
"RTN","BPSJHLT",261,0)
 I SPECIAL>90 S ERRFLAG=1
"RTN","BPSJHLT",262,0)
 Q
"RTN","BPSJPREG")
0^58^B20911223
"RTN","BPSJPREG",1,0)
BPSJPREG ;BHAM ISC/LJF - HL7 Registration MFN Message ;6/12/08  15:38
"RTN","BPSJPREG",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2,5,7,20**;JUN 2004;Build 27
"RTN","BPSJPREG",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSJPREG",4,0)
 ;
"RTN","BPSJPREG",5,0)
 ;**Program Description**
"RTN","BPSJPREG",6,0)
 ;  This program will process the outgoing registration MFN message
"RTN","BPSJPREG",7,0)
 ;
"RTN","BPSJPREG",8,0)
 ;  Variable
"RTN","BPSJPREG",9,0)
 ; HL      = HL7 parameters
"RTN","BPSJPREG",10,0)
 ; HL7DTG  = Date time in HL7 format
"RTN","BPSJPREG",11,0)
 ; HLECH   = HL7 Encoding Characters
"RTN","BPSJPREG",12,0)
 ; HLEID   = HL7 Link id
"RTN","BPSJPREG",13,0)
 ; HLFS    = HL7 Field separator
"RTN","BPSJPREG",14,0)
 ; HLLNK   = HL7 E-Pharm Link
"RTN","BPSJPREG",15,0)
 ; HLRESET = HL7 generate results
"RTN","BPSJPREG",16,0)
 ; DNS     = DNS Domain Address
"RTN","BPSJPREG",17,0)
 ; IPP     = IP Port
"RTN","BPSJPREG",18,0)
 ; MCT     = Message Count
"RTN","BPSJPREG",19,0)
 ; MGRP    = E-Mail message group
"RTN","BPSJPREG",20,0)
 ; MSG     = Message
"RTN","BPSJPREG",21,0)
 ;
"RTN","BPSJPREG",22,0)
 ; Don't allow direct execution
"RTN","BPSJPREG",23,0)
 ;
"RTN","BPSJPREG",24,0)
 W !!!,"DIRECT ENTRY NOT ALLOWED",!!!
"RTN","BPSJPREG",25,0)
 Q
"RTN","BPSJPREG",26,0)
 ;
"RTN","BPSJPREG",27,0)
REG(PHARMIX,BPSJVAL) ;  Registration message for when a site installs
"RTN","BPSJPREG",28,0)
 ;
"RTN","BPSJPREG",29,0)
 N HL,HL7DTG,HLECH,HLEID,HLFS,HLLNK,HLPRO,BPSHLRS,IPP,NPKEY,NCPDP
"RTN","BPSJPREG",30,0)
 N MGRP,MCT,MSG,TAXID,ZRPSEG,BPSJVAL2,BPSJPRES,BPSZ,DNS
"RTN","BPSJPREG",31,0)
 ;
"RTN","BPSJPREG",32,0)
 S (MCT,TAXID)=0,BPSJVAL=$G(BPSJVAL)
"RTN","BPSJPREG",33,0)
 ;
"RTN","BPSJPREG",34,0)
 I '$G(PHARMIX) Q
"RTN","BPSJPREG",35,0)
 K ^TMP("HLS",$J)
"RTN","BPSJPREG",36,0)
 ;
"RTN","BPSJPREG",37,0)
 ; only send Active or recently made inactive pharmacies, no reason to send
"RTN","BPSJPREG",38,0)
 ; inactive ones over and over
"RTN","BPSJPREG",39,0)
 S BPSZ=$G(^BPS(9002313.56,PHARMIX,0))
"RTN","BPSJPREG",40,0)
 I 'BPSJVAL,'$P(BPSZ,"^",10),'$P(BPSZ,"^",4) Q
"RTN","BPSJPREG",41,0)
 ;
"RTN","BPSJPREG",42,0)
 ; NPI Processing
"RTN","BPSJPREG",43,0)
 ; Get DropDeadDate and Date/Time Last Change
"RTN","BPSJPREG",44,0)
 N BPSJAPI,BPSJNPI,BPSJNDT,BPSJOP,BPSJOPS,BPSJDDD,NPKEY
"RTN","BPSJPREG",45,0)
 S BPSJDDD=$$NPIREQ^BPSNPI(DT)
"RTN","BPSJPREG",46,0)
 N NOW,%,%H,%I,X D NOW^%DTC S BPSJNDT=%
"RTN","BPSJPREG",47,0)
 ; Get OP site for pharmacy and NPIAPI
"RTN","BPSJPREG",48,0)
 S BPSJOP=0,BPSJAPI=""
"RTN","BPSJPREG",49,0)
 F  S BPSJOP=$O(^BPS(9002313.56,PHARMIX,"OPSITE",BPSJOP)) Q:'BPSJOP  D  I BPSJAPI'="" Q
"RTN","BPSJPREG",50,0)
 . S BPSJOPS=$G(^BPS(9002313.56,PHARMIX,"OPSITE",BPSJOP,0))
"RTN","BPSJPREG",51,0)
 . S BPSJAPI=$$NPI^BPSNPI("Pharmacy_ID",BPSJOPS)
"RTN","BPSJPREG",52,0)
 . I $P(BPSJAPI,U,1)=-1 S BPSJAPI="" Q
"RTN","BPSJPREG",53,0)
 . I $P(BPSJAPI,U)>0 S BPSJAPI=$P(BPSJAPI,U)
"RTN","BPSJPREG",54,0)
 ; Check for existing NPI
"RTN","BPSJPREG",55,0)
 S BPSJNPI=$P($G(^BPS(9002313.56,PHARMIX,"NPI")),U)
"RTN","BPSJPREG",56,0)
 I 'BPSJAPI,BPSJNPI,BPSJVAL<2 D
"RTN","BPSJPREG",57,0)
 . N DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJPREG",58,0)
 . S DA=PHARMIX,DIE=$$ROOT^DILFD(9002313.56)
"RTN","BPSJPREG",59,0)
 . S DR="41.01///@;41.02///@" D ^DIE
"RTN","BPSJPREG",60,0)
 I BPSJAPI,BPSJVAL<2 D
"RTN","BPSJPREG",61,0)
 . S ^XTMP("BPSJ",0)=(BPSJNDT+7)_U_BPSJNDT_U_"BPS NPI HL7 DATA"
"RTN","BPSJPREG",62,0)
 . S ^XTMP("BPSJ","NPI",BPSJAPI)=PHARMIX_U_BPSJNDT
"RTN","BPSJPREG",63,0)
 ;
"RTN","BPSJPREG",64,0)
 ; Get Link data from HL7 table
"RTN","BPSJPREG",65,0)
 S HLPRO="BPSJ REGISTER",(DNS,IPP)="" ; BPS*20
"RTN","BPSJPREG",66,0)
 S HLLNK=$$FIND1^DIC(870,"",,"EPHARM OUT","B")
"RTN","BPSJPREG",67,0)
 I HLLNK S DNS=$$GET1^DIQ(870,HLLNK_",",.08),IPP=$$GET1^DIQ(870,HLLNK_",",400.02) ; BPS*20
"RTN","BPSJPREG",68,0)
 ;
"RTN","BPSJPREG",69,0)
 ; Error if any missing data
"RTN","BPSJPREG",70,0)
 I DNS=""!(IPP="") S MCT=MCT+1,MSG(MCT)="DNS Domain Address or TCP/IP Port is not defined in file #870." ; BPS*20
"RTN","BPSJPREG",71,0)
 ;
"RTN","BPSJPREG",72,0)
 ;  Initialize the HL7
"RTN","BPSJPREG",73,0)
 D INIT^HLFNC2(HLPRO,.HL)
"RTN","BPSJPREG",74,0)
 S HLFS=$G(HL("FS")) I HLFS="" S HLFS="|"
"RTN","BPSJPREG",75,0)
 S HLECH=$E($G(HL("ECH"),1)) I HLECH="" S HLECH="^"
"RTN","BPSJPREG",76,0)
 S HL("EPPORT")=IPP,HLEID=$$HLP^BPSJUTL(HLPRO)
"RTN","BPSJPREG",77,0)
 ;
"RTN","BPSJPREG",78,0)
 ;Get fileman date/time, ensuring seconds are included: 3031029.135636
"RTN","BPSJPREG",79,0)
 S HL7DTG=$E($$HTFM^XLFDT($H)_"000000",1,14)
"RTN","BPSJPREG",80,0)
 ;Set HL7 Date/Time format: 20031029135636-0400
"RTN","BPSJPREG",81,0)
 S HL7DTG=$$FMTHL7^XLFDT(HL7DTG)
"RTN","BPSJPREG",82,0)
 ;
"RTN","BPSJPREG",83,0)
 ;  Set the ZRP Segment
"RTN","BPSJPREG",84,0)
 D EN^BPSJZRP(.HL,PHARMIX,.ZRPSEG,BPSJAPI,.NCPDP)
"RTN","BPSJPREG",85,0)
 M ^TMP("HLS",$J,3)=ZRPSEG K ZRPSEG
"RTN","BPSJPREG",86,0)
 ;
"RTN","BPSJPREG",87,0)
 ;  Set the MFE segment
"RTN","BPSJPREG",88,0)
 N BPSMFE S BPSMFE="MUP"
"RTN","BPSJPREG",89,0)
 S NPKEY=$$NPKEY^BPSNPI(NCPDP,BPSJNPI,BPSJAPI)
"RTN","BPSJPREG",90,0)
 I NPKEY D
"RTN","BPSJPREG",91,0)
 . I '$$BPSACTV^BPSUTIL(PHARMIX) S BPSMFE="MDC"
"RTN","BPSJPREG",92,0)
 . S ^TMP("HLS",$J,2)="MFE"_HLFS_BPSMFE_HLFS_HLFS_HL7DTG
"RTN","BPSJPREG",93,0)
 . S ^TMP("HLS",$J,2)=^TMP("HLS",$J,2)_HLFS_NPKEY_HLFS_"ST"
"RTN","BPSJPREG",94,0)
 ;
"RTN","BPSJPREG",95,0)
 ;   Set the MFI segment
"RTN","BPSJPREG",96,0)
 S ^TMP("HLS",$J,1)="MFI"_HLFS_"Pharmacy Table"_HLFS_HLFS_"UPD"_HLFS
"RTN","BPSJPREG",97,0)
 S ^TMP("HLS",$J,1)=^TMP("HLS",$J,1)_HL7DTG_HLFS_HL7DTG_HLFS_"NE"
"RTN","BPSJPREG",98,0)
 ;
"RTN","BPSJPREG",99,0)
 S BPSJPRES=$$VAL2^BPSJVAL(BPSJVAL,BPSJDDD)  ; 0 = ok
"RTN","BPSJPREG",100,0)
 I BPSJVAL=3 G FINI   ; Just checking to see if data valid.
"RTN","BPSJPREG",101,0)
 ;
"RTN","BPSJPREG",102,0)
 ;-Check if msg valid.
"RTN","BPSJPREG",103,0)
 I 'BPSJPRES D  G FINI
"RTN","BPSJPREG",104,0)
 . N BPSHLRS
"RTN","BPSJPREG",105,0)
 . D GENERATE^HLMA(HLEID,"GM",1,.BPSHLRS,"")
"RTN","BPSJPREG",106,0)
 . I $P($G(BPSHLRS),U,2)]"" D  Q
"RTN","BPSJPREG",107,0)
 .. I BPSJVAL D  Q   ; Interactive: show no success
"RTN","BPSJPREG",108,0)
 ... W !!,"ECME Pharmacy Registration HL7 Message not created: "_BPSHLRS
"RTN","BPSJPREG",109,0)
 ... W !," PHARMIX: "_PHARMIX_""
"RTN","BPSJPREG",110,0)
 .. S MCT=MCT+1,MSG(MCT)="ECME Pharmacy Registration HL7 Message not created. (PHARMIX: "_PHARMIX_")"
"RTN","BPSJPREG",111,0)
 .. S MCT=MCT+1,MSG(MCT)=BPSHLRS
"RTN","BPSJPREG",112,0)
 .. D MSG^BPSJUTL(.MSG,"ECME Pharmacy Registration")
"RTN","BPSJPREG",113,0)
 . ; update last status sent
"RTN","BPSJPREG",114,0)
 . S $P(^BPS(9002313.56,PHARMIX,0),"^",4)=$P(^BPS(9002313.56,PHARMIX,0),"^",10)
"RTN","BPSJPREG",115,0)
 . I BPSJVAL D    ;Interactive: show success
"RTN","BPSJPREG",116,0)
 .. W !!,"ECME Pharmacy Registration HL7 Message was created successfully."
"RTN","BPSJPREG",117,0)
 ;
"RTN","BPSJPREG",118,0)
 ;
"RTN","BPSJPREG",119,0)
FINI ; Clean up
"RTN","BPSJPREG",120,0)
 K ^TMP("HLS",$J)
"RTN","BPSJPREG",121,0)
 Q
"RTN","BPSJVAL1")
0^17^B14575875
"RTN","BPSJVAL1",1,0)
BPSJVAL1 ;BHAM ISC/LJF - Pharmacy Application Validation ;3/5/08  11:17
"RTN","BPSJVAL1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,20**;JUN 2004;Build 27
"RTN","BPSJVAL1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSJVAL1",4,0)
 ;
"RTN","BPSJVAL1",5,0)
 N BPSJVAL1,VERBOSE
"RTN","BPSJVAL1",6,0)
 W !!!,"SITE REGISTRATION VALIDATION.",!
"RTN","BPSJVAL1",7,0)
 D BPSJVAL^BPSJAREG(2)
"RTN","BPSJVAL1",8,0)
 W !!!!
"RTN","BPSJVAL1",9,0)
 ;
"RTN","BPSJVAL1",10,0)
 Q
"RTN","BPSJVAL1",11,0)
 ;
"RTN","BPSJVAL1",12,0)
VALIDATE ; Validate ZQR Data
"RTN","BPSJVAL1",13,0)
 ;
"RTN","BPSJVAL1",14,0)
 N SEG,SEGIX,ZQR,RIX,PIX,PIXL,SEGDAT,ZNOTE,ZMAX
"RTN","BPSJVAL1",15,0)
 N HL7EOIEN,HL7EODNS
"RTN","BPSJVAL1",16,0)
 N HL7EDOM,HL7PDOM,HL7OPORT,HL7PORT,CMA
"RTN","BPSJVAL1",17,0)
 ;
"RTN","BPSJVAL1",18,0)
 ; Constants
"RTN","BPSJVAL1",19,0)
 S HL7PORT=5105,ZMAX=8,CMA=","
"RTN","BPSJVAL1",20,0)
 S HL7PDOM=$S($$PROD^XUPROD:"EPHARMACY.VITRIA-EDI.domain.ext",1:"EPHARMACY.VITRIA-EDI-TEST.domain.ext")
"RTN","BPSJVAL1",21,0)
 ;
"RTN","BPSJVAL1",22,0)
 S RETCODE=+$G(RETCODE)
"RTN","BPSJVAL1",23,0)
 S ZQR="",RIX=0
"RTN","BPSJVAL1",24,0)
 ;
"RTN","BPSJVAL1",25,0)
 S HL7EOIEN=$$FIND1^DIC(870,"",,"EPHARM OUT","B")_CMA   ;EPHARM OUT
"RTN","BPSJVAL1",26,0)
 ;
"RTN","BPSJVAL1",27,0)
 ; Vitria Mailman Domain name
"RTN","BPSJVAL1",28,0)
 S HL7EDOM=$$GET1^DIQ(870,HL7EOIEN,.03)   ;EPHARM OUT
"RTN","BPSJVAL1",29,0)
 I HL7EDOM=HL7PDOM S ZNOTE="   DOMAIN NAME - Required - VALID: "_HL7PDOM
"RTN","BPSJVAL1",30,0)
 E  D
"RTN","BPSJVAL1",31,0)
 . I HL7EDOM="" S ZNOTE="** DOMAIN NAME - Required - INVALID" S RETCODE=.3 Q
"RTN","BPSJVAL1",32,0)
 . S ZNOTE=" * WARNING: EXPECTED DOMAIN NAME: "_HL7PDOM_"                            CURRENT DOMAIN NAME: "_HL7EDOM
"RTN","BPSJVAL1",33,0)
 S RETCODE(.3)=ZNOTE
"RTN","BPSJVAL1",34,0)
 I +$G(VERBOSE) W !,RETCODE(.3)
"RTN","BPSJVAL1",35,0)
 ;
"RTN","BPSJVAL1",36,0)
 ; Get DNS address
"RTN","BPSJVAL1",37,0)
 S HL7EODNS=$$GET1^DIQ(870,HL7EOIEN,.08)   ;EPHARM OUT
"RTN","BPSJVAL1",38,0)
 I HL7EODNS=HL7PDOM S ZNOTE="   DNS ADDRESS - Required - VALID: "_HL7EODNS
"RTN","BPSJVAL1",39,0)
 E  D
"RTN","BPSJVAL1",40,0)
 . I HL7EODNS="" S ZNOTE="** DNS ADDRESS FOR ""EPHARM OUT"" is missing **",RETCODE=.7 Q
"RTN","BPSJVAL1",41,0)
 . S ZNOTE=" * WARNING: DNS ADDRESS = "_HL7EODNS_".  EXPECTED DNS ADDRESS = "_HL7PDOM_" *"
"RTN","BPSJVAL1",42,0)
 S RETCODE(.7)=ZNOTE
"RTN","BPSJVAL1",43,0)
 I +$G(VERBOSE) W !,RETCODE(.7)
"RTN","BPSJVAL1",44,0)
 ;
"RTN","BPSJVAL1",45,0)
 ; Get Outgoing Port
"RTN","BPSJVAL1",46,0)
 S HL7OPORT=$$GET1^DIQ(870,HL7EOIEN,400.02)   ;EPHARM OUT
"RTN","BPSJVAL1",47,0)
 I HL7OPORT,HL7OPORT=HL7PORT S ZNOTE="   ""EPHARM OUT"" PORT NUMBER - Required - VALID: "_HL7OPORT
"RTN","BPSJVAL1",48,0)
 E  D
"RTN","BPSJVAL1",49,0)
 . S ZNOTE=" * WARNING: EXPECTED ""EPHARM OUT"" PORT NUMBER: "_HL7PORT
"RTN","BPSJVAL1",50,0)
 . S ZNOTE=ZNOTE_"                                         CURRENT "
"RTN","BPSJVAL1",51,0)
 . S ZNOTE=ZNOTE_"""EPHARM OUT"" PORT NUMBER: "_HL7OPORT
"RTN","BPSJVAL1",52,0)
 . I 'HL7OPORT S ZNOTE="** ""EPHARM OUT"" PORT NUMBER - Required - INVALID",RETCODE=.9 Q
"RTN","BPSJVAL1",53,0)
 S RETCODE(.9)=ZNOTE
"RTN","BPSJVAL1",54,0)
 I +$G(VERBOSE) W !,RETCODE(.9)
"RTN","BPSJVAL1",55,0)
 ;
"RTN","BPSJVAL1",56,0)
 F SEGIX=3:1 S SEG=$G(^TMP("HLS",$J,SEGIX)),PIX=0 Q:SEG=""  D
"RTN","BPSJVAL1",57,0)
 . I $E(SEG,1,3)="ZQR" S ZQR=$E(SEG,4) S $E(SEG,1,4)=""
"RTN","BPSJVAL1",58,0)
 . I ZQR="" Q
"RTN","BPSJVAL1",59,0)
 . S PIXL=$L(SEG,ZQR)
"RTN","BPSJVAL1",60,0)
 . F  S RIX=RIX+1,PIX=PIX+1 Q:RIX>ZMAX  D
"RTN","BPSJVAL1",61,0)
 .. S RETCODE(RIX)=$P(SEG,ZQR,PIX) D @RIX
"RTN","BPSJVAL1",62,0)
 .. ; RIX 4 - EPHARM IN Port - no longer required nor validated
"RTN","BPSJVAL1",63,0)
 .. I +$G(VERBOSE),$L($G(RETCODE(RIX))),RIX'=4 W !,RETCODE(RIX) Q
"RTN","BPSJVAL1",64,0)
 ;
"RTN","BPSJVAL1",65,0)
 Q
"RTN","BPSJVAL1",66,0)
 ; NS=Not Supported, R=Required, RE=Required or empty, C=Conditional
"RTN","BPSJVAL1",67,0)
 ; CE=Conditional or empty, O=Optional,
"RTN","BPSJVAL1",68,0)
 ;
"RTN","BPSJVAL1",69,0)
1 ; Set ID - NS
"RTN","BPSJVAL1",70,0)
 Q
"RTN","BPSJVAL1",71,0)
2 ; Site Number - R
"RTN","BPSJVAL1",72,0)
 S ZNOTE="   SITE NUMBER - Required - VALID: "_RETCODE(RIX)
"RTN","BPSJVAL1",73,0)
 I RETCODE(RIX)="" S ZNOTE="** SITE NUMBER - Required - INVALID",RETCODE=2
"RTN","BPSJVAL1",74,0)
 S RETCODE(RIX)=ZNOTE
"RTN","BPSJVAL1",75,0)
 Q
"RTN","BPSJVAL1",76,0)
3 ; Interface Version - R
"RTN","BPSJVAL1",77,0)
 ;     Must equal 2 or greater for this validation version
"RTN","BPSJVAL1",78,0)
 S ZNOTE="   INTERFACE VERSION - Required - VALID: "
"RTN","BPSJVAL1",79,0)
 I RETCODE(RIX)<2 S ZNOTE="** INTERFACE VERSION - Required - INVALID: ",RETCODE=3
"RTN","BPSJVAL1",80,0)
 S RETCODE(RIX)=ZNOTE_RETCODE(RIX)
"RTN","BPSJVAL1",81,0)
 Q
"RTN","BPSJVAL1",82,0)
4 ; EPHARM IN port - NS
"RTN","BPSJVAL1",83,0)
 Q
"RTN","BPSJVAL1",84,0)
5 ; Contact Name
"RTN","BPSJVAL1",85,0)
 S RETCODE(RIX)="   CONTACT NAME - VALID: "_$$FMNAME^HLFNC(RETCODE(RIX))
"RTN","BPSJVAL1",86,0)
 Q
"RTN","BPSJVAL1",87,0)
6 ; Contact Means
"RTN","BPSJVAL1",88,0)
 S RETCODE(RIX)="   CONTACT MEANS - VALID: "_$P($TR(RETCODE(RIX),"^"," "),"~")
"RTN","BPSJVAL1",89,0)
 Q
"RTN","BPSJVAL1",90,0)
7 ; Alternate Contact NAME
"RTN","BPSJVAL1",91,0)
 S RETCODE(RIX)="   ALTERNATE CONTACT NAME - VALID: "_$$FMNAME^HLFNC(RETCODE(RIX))
"RTN","BPSJVAL1",92,0)
 Q
"RTN","BPSJVAL1",93,0)
8 ; Alternate Contact Means
"RTN","BPSJVAL1",94,0)
 S RETCODE(RIX)="   ALTERNATE CONTACT MEANS - VALID: "_$P($TR(RETCODE(RIX),"^"," "),"~")
"RTN","BPSJVAL1",95,0)
 Q
"RTN","BPSNCPD2")
0^9^B91792201
"RTN","BPSNCPD2",1,0)
BPSNCPD2 ;BHAM ISC/LJE - Continuation of BPSNCPDP (IB Billing Determination) ;11/7/07  16:01
"RTN","BPSNCPD2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,6,7,8,10,11,20**;JUN 2004;Build 27
"RTN","BPSNCPD2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSNCPD2",4,0)
 ;
"RTN","BPSNCPD2",5,0)
 ;External reference $$RX^IBNCPDP supported by DBIA 4299
"RTN","BPSNCPD2",6,0)
 ;
"RTN","BPSNCPD2",7,0)
 ; EN - Call IB Billing Determination.  If good to go, update MOREDATA array
"RTN","BPSNCPD2",8,0)
 ; Notes about variables
"RTN","BPSNCPD2",9,0)
 ;Input:
"RTN","BPSNCPD2",10,0)
 ;   DFN - PATIENT file #2 ien
"RTN","BPSNCPD2",11,0)
 ;   BWHERE - Where the code is called from and what needs to be done
"RTN","BPSNCPD2",12,0)
 ;   MOREDATA - Initialized by BPSNCPDP and more data is added here.
"RTN","BPSNCPD2",13,0)
 ;              Should be passed by reference.
"RTN","BPSNCPD2",14,0)
 ;   BPSARRY  - Created by STARRAY^BPSNCPD1 and used for IB Determination
"RTN","BPSNCPD2",15,0)
 ;   IB - Returned to calling routine. Should be passed by reference.
"RTN","BPSNCPD2",16,0)
 ;        1 = Billable
"RTN","BPSNCPD2",17,0)
 ;        0 or 2 - Not Billable
"RTN","BPSNCPD2",18,0)
 ;
"RTN","BPSNCPD2",19,0)
 ; Variable used/needed but not passed in as a parameter
"RTN","BPSNCPD2",20,0)
 ;   CERTIEN - BPS Certification IEN - Not passed but newed/set in BPSNCPDP
"RTN","BPSNCPD2",21,0)
 ;   BPJOBFLG - Not passed in but newed/set in BPSNCPCP
"RTN","BPSNCPD2",22,0)
 ;
"RTN","BPSNCPD2",23,0)
EN(DFN,BWHERE,MOREDATA,BPSARRY,IB) ;
"RTN","BPSNCPD2",24,0)
 I '$G(CERTIEN) D
"RTN","BPSNCPD2",25,0)
 . ;
"RTN","BPSNCPD2",26,0)
 . ;For NCPDP IB call to see if we need to 3rd Party Bill and if so, get insurance/payer sheet info
"RTN","BPSNCPD2",27,0)
 . S MOREDATA("BILL")=$$RX^IBNCPDP(DFN,.BPSARRY)  ;IB CALL
"RTN","BPSNCPD2",28,0)
 . Q:'$D(MOREDATA("BILL"))
"RTN","BPSNCPD2",29,0)
 . ;
"RTN","BPSNCPD2",30,0)
 . ; If calling program is the ECME user screen and we can't bill because of NEEDS SC DETERMINATION
"RTN","BPSNCPD2",31,0)
 . ; or EI, then prompt the user to see if they want to bill
"RTN","BPSNCPD2",32,0)
 . I $F(".ERES.ERWV.ERNB.","."_BWHERE_"."),$P(MOREDATA("BILL"),U,1)=0,$G(BPSARRY("SC/EI NO ANSW"))]"",$G(BPJOBFLG)'="B" D
"RTN","BPSNCPD2",33,0)
 .. N DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT,I,BPEISC
"RTN","BPSNCPD2",34,0)
 .. F I=1:1:$L($G(BPSARRY("SC/EI NO ANSW")),",") S BPEISC=$P($G(BPSARRY("SC/EI NO ANSW")),",",I) I BPEISC]"" D
"RTN","BPSNCPD2",35,0)
 ... W !,"The prescription is potentially ",BPEISC,"-related and needs ",BPEISC," determination."
"RTN","BPSNCPD2",36,0)
 ... W !,"Prescriptions related to ",BPEISC," cannot be billed to Third Party Insurance.",!
"RTN","BPSNCPD2",37,0)
 .. S DIR(0)="Y",DIR("A")="Are you sure you want to bill this prescription"
"RTN","BPSNCPD2",38,0)
 .. S DIR("B")="NO"
"RTN","BPSNCPD2",39,0)
 .. S DIR("?")="If you want to bill this prescription, enter 'Yes' - otherwise, enter 'No'"
"RTN","BPSNCPD2",40,0)
 .. W ! D ^DIR K DIR
"RTN","BPSNCPD2",41,0)
 .. I '+Y Q
"RTN","BPSNCPD2",42,0)
 .. S BPSARRY("SC/EI OVR")=1
"RTN","BPSNCPD2",43,0)
 .. S MOREDATA("BILL")=$$RX^IBNCPDP(DFN,.BPSARRY)  ;Call IB again
"RTN","BPSNCPD2",44,0)
 . ;
"RTN","BPSNCPD2",45,0)
 . ; Quit if no response from IB call
"RTN","BPSNCPD2",46,0)
 . Q:'$D(MOREDATA("BILL"))
"RTN","BPSNCPD2",47,0)
 . ;
"RTN","BPSNCPD2",48,0)
 . S MOREDATA("ELIG")=$P(MOREDATA("BILL"),U,3)     ; patient eligibility V, T, or C
"RTN","BPSNCPD2",49,0)
 . ;
"RTN","BPSNCPD2",50,0)
 . S IB=1         ; assume it is billable for now
"RTN","BPSNCPD2",51,0)
 . ;
"RTN","BPSNCPD2",52,0)
 . M MOREDATA("IBDATA")=BPSARRY("INS")       ; insurance array nodes from IB billing determination
"RTN","BPSNCPD2",53,0)
 . ;
"RTN","BPSNCPD2",54,0)
 . ; Clean up the "IBDATA" array nodes as necessary
"RTN","BPSNCPD2",55,0)
 . ; The code below checks if Sequence #1 is missing and move the next number down if needed.
"RTN","BPSNCPD2",56,0)
 . ; This can happen when the COB indicator in IB has multiple insurances assigned as secondary but none are
"RTN","BPSNCPD2",57,0)
 . ; assigned as primary
"RTN","BPSNCPD2",58,0)
 . I '$D(MOREDATA("IBDATA",1)) D
"RTN","BPSNCPD2",59,0)
 .. N WW
"RTN","BPSNCPD2",60,0)
 .. S WW=$O(MOREDATA("IBDATA",""))
"RTN","BPSNCPD2",61,0)
 .. I WW'="" M MOREDATA("IBDATA",1)=MOREDATA("IBDATA",WW) K MOREDATA("IBDATA",WW)
"RTN","BPSNCPD2",62,0)
 .. Q
"RTN","BPSNCPD2",63,0)
 . ;
"RTN","BPSNCPD2",64,0)
 . S MOREDATA("PATIENT")=$G(DFN)
"RTN","BPSNCPD2",65,0)
 . S MOREDATA("RX")=$G(BPSARRY("IEN"))
"RTN","BPSNCPD2",66,0)
 . S $P(MOREDATA("BPSDATA",1),U,1)=$G(BPSARRY("NCPDP QTY"))
"RTN","BPSNCPD2",67,0)
 . S $P(MOREDATA("BPSDATA",1),U,2)=$G(BPSARRY("COST"))
"RTN","BPSNCPD2",68,0)
 . S $P(MOREDATA("BPSDATA",1),U,3)=$G(BPSARRY("NDC"))
"RTN","BPSNCPD2",69,0)
 . S $P(MOREDATA("BPSDATA",1),U,4)=$G(BPSARRY("FILL NUMBER"))
"RTN","BPSNCPD2",70,0)
 . S $P(MOREDATA("BPSDATA",1),U,5)=""  ; Certification Mode
"RTN","BPSNCPD2",71,0)
 . S $P(MOREDATA("BPSDATA",1),U,6)=""  ; Certification IEN
"RTN","BPSNCPD2",72,0)
 . S $P(MOREDATA("BPSDATA",1),U,7)=$G(BPSARRY("NCPDP UNITS"))
"RTN","BPSNCPD2",73,0)
 . S $P(MOREDATA("BPSDATA",1),U,8)=$G(BPSARRY("QTY"))    ; Billing Quantity
"RTN","BPSNCPD2",74,0)
 . S $P(MOREDATA("BPSDATA",1),U,9)=$G(BPSARRY("UNITS"))  ; Billing Units
"RTN","BPSNCPD2",75,0)
 . ;
"RTN","BPSNCPD2",76,0)
 . ; now check IB billing determination results and set variable IB
"RTN","BPSNCPD2",77,0)
 . I $P(MOREDATA("BILL"),U,1)=0 S IB=2           ;IB says not to bill
"RTN","BPSNCPD2",78,0)
 . ;
"RTN","BPSNCPD2",79,0)
 . ; bps*1*20 - file TRI/CVA Non-Billable entries into BPS Transaction
"RTN","BPSNCPD2",80,0)
 . I IB=2,MOREDATA("ELIG")="T"!(MOREDATA("ELIG")="C") D BPTCNB(.MOREDATA,.BPSARRY)
"RTN","BPSNCPD2",81,0)
 . Q
"RTN","BPSNCPD2",82,0)
 ;
"RTN","BPSNCPD2",83,0)
 ; If certification mode on and no IB result (somewhat redundant since IB is not called
"RTN","BPSNCPD2",84,0)
 ;   for certification), get data from BPS Certification table
"RTN","BPSNCPD2",85,0)
 I $G(CERTIEN),'$G(IB) D
"RTN","BPSNCPD2",86,0)
 . N NODE,FLD,NFLD,CERTARY
"RTN","BPSNCPD2",87,0)
 . S MOREDATA("IBDATA",1,1)="",MOREDATA("IBDATA",1,2)=""
"RTN","BPSNCPD2",88,0)
 . S MOREDATA("IBDATA",1,3)="",MOREDATA("BPSDATA",1)=""
"RTN","BPSNCPD2",89,0)
 . S MOREDATA("BILL")="1^^V",IB=1
"RTN","BPSNCPD2",90,0)
 . S MOREDATA("PATIENT")=$$GET1^DIQ(9002313.31,CERTIEN,903,"I")  ;Patient from certification record
"RTN","BPSNCPD2",91,0)
 . I 'MOREDATA("PATIENT") S MOREDATA("PATIENT")=$G(DFN) ; Patient
"RTN","BPSNCPD2",92,0)
 . S MOREDATA("RX")=$G(BPSARRY("IEN")) ; RX
"RTN","BPSNCPD2",93,0)
 . S MOREDATA("ELIG")="V"    ; Eligibility
"RTN","BPSNCPD2",94,0)
 . S $P(MOREDATA("BPSDATA",1),U,5)=1   ;Certify Mode
"RTN","BPSNCPD2",95,0)
 . S $P(MOREDATA("BPSDATA",1),U,6)=CERTIEN  ;Cert IEN
"RTN","BPSNCPD2",96,0)
 . S $P(MOREDATA("BPSDATA",1),U,8)=""  ; Billing Quantity
"RTN","BPSNCPD2",97,0)
 . S $P(MOREDATA("BPSDATA",1),U,9)=""  ; Billing Units
"RTN","BPSNCPD2",98,0)
 . S $P(MOREDATA("IBDATA",1,1),U,1)=1  ;Plan IEN
"RTN","BPSNCPD2",99,0)
 . S $P(MOREDATA("IBDATA",1,1),U,4)=$$GET1^DIQ(9002313.31,CERTIEN,.04,"E")  ;Billing Payer Sheet Name
"RTN","BPSNCPD2",100,0)
 . S $P(MOREDATA("IBDATA",1,1),U,10)="01"  ;Home State Plan
"RTN","BPSNCPD2",101,0)
 . S $P(MOREDATA("IBDATA",1,1),U,11)=$$GET1^DIQ(9002313.31,CERTIEN,.05,"E") ;Reversal Payer Sheet Name
"RTN","BPSNCPD2",102,0)
 . S $P(MOREDATA("IBDATA",1,1),U,12)=""  ;Rebill Payer Sheet Name
"RTN","BPSNCPD2",103,0)
 . S $P(MOREDATA("IBDATA",1,1),U,14)=""  ;Plan Name
"RTN","BPSNCPD2",104,0)
 . S $P(MOREDATA("IBDATA",1,1),U,15)=$$GET1^DIQ(9002313.31,CERTIEN,.08,"E") ;Eligibility Payer Sheet Name
"RTN","BPSNCPD2",105,0)
 . S $P(MOREDATA("IBDATA",1,1),U,16)=$$GET1^DIQ(9002313.31,CERTIEN,.04,"I") ;Billing Payer Sheet IEN
"RTN","BPSNCPD2",106,0)
 . S $P(MOREDATA("IBDATA",1,1),U,17)=$$GET1^DIQ(9002313.31,CERTIEN,.05,"I") ;Reversal Payer Sheet IEN
"RTN","BPSNCPD2",107,0)
 . S $P(MOREDATA("IBDATA",1,1),U,18)=""  ; Rebill Payer Sheet IEN
"RTN","BPSNCPD2",108,0)
 . S $P(MOREDATA("IBDATA",1,1),U,19)=$$GET1^DIQ(9002313.31,CERTIEN,.08,"I") ;Eligibility Payer Sheet IEN
"RTN","BPSNCPD2",109,0)
 . S $P(MOREDATA("IBDATA",1,2),U,5)=0    ;Admin Fee
"RTN","BPSNCPD2",110,0)
 . S $P(MOREDATA("IBDATA",1,3),U,1)=""   ;Group Name
"RTN","BPSNCPD2",111,0)
 . S $P(MOREDATA("IBDATA",1,3),U,2)=""   ;Insurance Company Phone Number
"RTN","BPSNCPD2",112,0)
 . S $P(MOREDATA("IBDATA",1,3),U,3)="T00010"   ;Plan ID
"RTN","BPSNCPD2",113,0)
 . S $P(MOREDATA("IBDATA",1,3),U,4)="V"   ;Plan Type
"RTN","BPSNCPD2",114,0)
 . S $P(MOREDATA("IBDATA",1,3),U,5)=""   ;Insurance Company IEN
"RTN","BPSNCPD2",115,0)
 . S $P(MOREDATA("IBDATA",1,3),U,6)=$$GET1^DIQ(9002313.31,CERTIEN,.07,"I") ;COB Indicator
"RTN","BPSNCPD2",116,0)
 . I $P(MOREDATA("IBDATA",1,3),U,6)="" S $P(MOREDATA("IBDATA",1,3),U,6)=1
"RTN","BPSNCPD2",117,0)
 . S $P(MOREDATA("IBDATA",1,3),U,7)=1    ;Policy Number (needed for eligibility transmissions)
"RTN","BPSNCPD2",118,0)
 . S $P(MOREDATA("IBDATA",1,3),U,8)=1    ;Maximum Transactions
"RTN","BPSNCPD2",119,0)
 . ;
"RTN","BPSNCPD2",120,0)
 . ;Get data from non-multiple fields and add to MOREDATA
"RTN","BPSNCPD2",121,0)
 . K CERTARY D GETS^DIQ(9002313.31,CERTIEN_",","1*","","CERTARY")
"RTN","BPSNCPD2",122,0)
 . S NODE="" F  S NODE=$O(CERTARY(9002313.311,NODE)) Q:NODE=""  D
"RTN","BPSNCPD2",123,0)
 .. S FLD="" F  S FLD=$O(CERTARY(9002313.311,NODE,FLD)) Q:FLD=""  D
"RTN","BPSNCPD2",124,0)
 ... I FLD=.01 S NFLD=CERTARY(9002313.311,NODE,FLD) D
"RTN","BPSNCPD2",125,0)
 .... I NFLD=101 S $P(MOREDATA("IBDATA",1,1),U,2)=CERTARY(9002313.311,NODE,.02) ;BIN
"RTN","BPSNCPD2",126,0)
 .... I NFLD=104 S $P(MOREDATA("IBDATA",1,1),U,3)=CERTARY(9002313.311,NODE,.02)  ;PCN
"RTN","BPSNCPD2",127,0)
 .... I NFLD=110 S $P(MOREDATA("IBDATA",1,1),U,13)=CERTARY(9002313.311,NODE,.02)  ;Certification ID
"RTN","BPSNCPD2",128,0)
 . ;
"RTN","BPSNCPD2",129,0)
 . ;Get data from multiple fields and add to MOREDATA
"RTN","BPSNCPD2",130,0)
 . K CERTARY D GETS^DIQ(9002313.31,CERTIEN_",","2*","","CERTARY")
"RTN","BPSNCPD2",131,0)
 . S NODE="" F  S NODE=$O(CERTARY(9002313.3121,NODE)) Q:NODE=""  D
"RTN","BPSNCPD2",132,0)
 ..  S FLD="" F  S FLD=$O(CERTARY(9002313.3121,NODE,FLD)) Q:FLD=""  D
"RTN","BPSNCPD2",133,0)
 ... I FLD=.01 S NFLD=CERTARY(9002313.3121,NODE,FLD) D
"RTN","BPSNCPD2",134,0)
 .... I NFLD=301 S $P(MOREDATA("IBDATA",1,1),U,5)=CERTARY(9002313.3121,NODE,.02)  ;Group ID
"RTN","BPSNCPD2",135,0)
 .... I NFLD=302 S $P(MOREDATA("IBDATA",1,1),U,6)=CERTARY(9002313.3121,NODE,.02)  ;Cardholder ID
"RTN","BPSNCPD2",136,0)
 .... I NFLD=306 S $P(MOREDATA("IBDATA",1,1),U,7)=CERTARY(9002313.3121,NODE,.02)  ;Patient Rel Code
"RTN","BPSNCPD2",137,0)
 .... I NFLD=312 S $P(MOREDATA("IBDATA",1,1),U,8)=CERTARY(9002313.3121,NODE,.02)  ;Cardholder First Name
"RTN","BPSNCPD2",138,0)
 .... I NFLD=313 S $P(MOREDATA("IBDATA",1,1),U,9)=CERTARY(9002313.3121,NODE,.02)  ;Cardholder Last Name
"RTN","BPSNCPD2",139,0)
 .... I NFLD=412 S $P(MOREDATA("IBDATA",1,2),U,1)=CERTARY(9002313.3121,NODE,.02)  ;Dispensing Fee
"RTN","BPSNCPD2",140,0)
 .... I NFLD=423 S $P(MOREDATA("IBDATA",1,2),U,2)=CERTARY(9002313.3121,NODE,.02)  ;Basis of Cost Determination
"RTN","BPSNCPD2",141,0)
 .... I NFLD=426 S $P(MOREDATA("IBDATA",1,2),U,3)=CERTARY(9002313.3121,NODE,.02)  ;Usual & Customary - Base Price
"RTN","BPSNCPD2",142,0)
 .... I NFLD=430 S $P(MOREDATA("IBDATA",1,2),U,4)=CERTARY(9002313.3121,NODE,.02)  ;Gross Amt Due
"RTN","BPSNCPD2",143,0)
 .... I NFLD=442 S $P(MOREDATA("BPSDATA",1),U,1)=CERTARY(9002313.3121,NODE,.02)   ;Quantity Dispensed
"RTN","BPSNCPD2",144,0)
 .... I NFLD=409 S $P(MOREDATA("BPSDATA",1),U,2)=CERTARY(9002313.3121,NODE,.02)   ;Unit Cost
"RTN","BPSNCPD2",145,0)
 .... I NFLD=407 S $P(MOREDATA("BPSDATA",1),U,3)=CERTARY(9002313.3121,NODE,.02)   ;NDC
"RTN","BPSNCPD2",146,0)
 .... I NFLD=403 S $P(MOREDATA("BPSDATA",1),U,4)=+CERTARY(9002313.3121,NODE,.02)  ;Fill #
"RTN","BPSNCPD2",147,0)
 .... I NFLD=600 S $P(MOREDATA("BPSDATA",1),U,7)=CERTARY(9002313.3121,NODE,.02)   ;Unit of Measure
"RTN","BPSNCPD2",148,0)
 . ;
"RTN","BPSNCPD2",149,0)
 . ; If Gross Amt Due is missing, use Usual and Customary
"RTN","BPSNCPD2",150,0)
 . I $P(MOREDATA("IBDATA",1,2),U,4)="" S $P(MOREDATA("IBDATA",1,2),U,4)=$P(MOREDATA("IBDATA",1,2),U,3)
"RTN","BPSNCPD2",151,0)
 . Q
"RTN","BPSNCPD2",152,0)
 ;
"RTN","BPSNCPD2",153,0)
 ; Uppercase the IBDATA
"RTN","BPSNCPD2",154,0)
 S MOREDATA("IBDATA",1,1)=$$UP^XLFSTR($G(MOREDATA("IBDATA",1,1)))
"RTN","BPSNCPD2",155,0)
 S MOREDATA("IBDATA",1,2)=$$UP^XLFSTR($G(MOREDATA("IBDATA",1,2)))
"RTN","BPSNCPD2",156,0)
 S MOREDATA("BPSDATA",1)=$$UP^XLFSTR($G(MOREDATA("BPSDATA",1)))
"RTN","BPSNCPD2",157,0)
 ;
"RTN","BPSNCPD2",158,0)
 Q
"RTN","BPSNCPD2",159,0)
 ;
"RTN","BPSNCPD2",160,0)
BPTCNB(MOREDATA,BPSARRY) ; Add TRICARE/CHAMPVA non-billable entry to BPS Transaction - BPS*1*20
"RTN","BPSNCPD2",161,0)
 ;
"RTN","BPSNCPD2",162,0)
 N BPSELD,IEN59,RXIEN,FILL,COB
"RTN","BPSNCPD2",163,0)
 ;
"RTN","BPSNCPD2",164,0)
 ; Uppercase the IBDATA before going further
"RTN","BPSNCPD2",165,0)
 S MOREDATA("IBDATA",1,1)=$$UP^XLFSTR($G(MOREDATA("IBDATA",1,1)))
"RTN","BPSNCPD2",166,0)
 S MOREDATA("IBDATA",1,2)=$$UP^XLFSTR($G(MOREDATA("IBDATA",1,2)))
"RTN","BPSNCPD2",167,0)
 S MOREDATA("BPSDATA",1)=$$UP^XLFSTR($G(MOREDATA("BPSDATA",1)))
"RTN","BPSNCPD2",168,0)
 ;
"RTN","BPSNCPD2",169,0)
 S BPSELD=$S(MOREDATA("ELIG")="T":"TRICARE",MOREDATA("ELIG")="C":"CHAMPVA",1:"UNKNOWN")
"RTN","BPSNCPD2",170,0)
 S MOREDATA("REQ TYPE")="N"                                       ; TRICARE/CHAMPVA non-billable entry
"RTN","BPSNCPD2",171,0)
 S MOREDATA("SUBMIT TIME")=$$NOW^XLFDT                            ; submit time is right now
"RTN","BPSNCPD2",172,0)
 S MOREDATA("PAYER SEQUENCE")=$G(BPSARRY("RXCOB"))                ; payer sequence/COB
"RTN","BPSNCPD2",173,0)
 S MOREDATA("POLICY")=$P($G(MOREDATA("IBDATA",1,3)),U,7)          ; 2.312 policy# ien
"RTN","BPSNCPD2",174,0)
 S MOREDATA("NON-BILLABLE REASON")=$P($G(MOREDATA("BILL")),U,2)   ; reason not billable
"RTN","BPSNCPD2",175,0)
 S MOREDATA("NON-BILLABLE CLOSED")=0                              ; open by default when it is created
"RTN","BPSNCPD2",176,0)
 ;
"RTN","BPSNCPD2",177,0)
 S RXIEN=$G(MOREDATA("RX"))
"RTN","BPSNCPD2",178,0)
 S FILL=$G(BPSARRY("FILL NUMBER"))
"RTN","BPSNCPD2",179,0)
 S COB=$G(BPSARRY("RXCOB"))
"RTN","BPSNCPD2",180,0)
 S IEN59=$$IEN59^BPSOSRX(RXIEN,FILL,COB)
"RTN","BPSNCPD2",181,0)
 I 'IEN59 G BPTCNBX
"RTN","BPSNCPD2",182,0)
 ;
"RTN","BPSNCPD2",183,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Start of Adding BPS Transaction for Non-Billable Entry")
"RTN","BPSNCPD2",184,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Patient Eligibility is "_BPSELD)
"RTN","BPSNCPD2",185,0)
 ;
"RTN","BPSNCPD2",186,0)
 D EN^BPSOSIZ(IEN59,.MOREDATA,"",1)    ; adds the entry to 9002313.59
"RTN","BPSNCPD2",187,0)
 ;
"RTN","BPSNCPD2",188,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Validating the BPS Transaction for Non-Billable Entry")
"RTN","BPSNCPD2",189,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Contents of ^BPST("_IEN59_"):")
"RTN","BPSNCPD2",190,0)
 D LOG59^BPSOSQA(IEN59)
"RTN","BPSNCPD2",191,0)
 ;
"RTN","BPSNCPD2",192,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-End of Adding BPS Transaction for Non-Billable Entry")
"RTN","BPSNCPD2",193,0)
 ;
"RTN","BPSNCPD2",194,0)
 ; Update the status of this newly created BPS Transaction to be 99 so it gets filed in BPS Log of Transactions also
"RTN","BPSNCPD2",195,0)
 D SETSTAT^BPSOSU(IEN59,99)   ; for non-billable entries
"RTN","BPSNCPD2",196,0)
 ;
"RTN","BPSNCPD2",197,0)
BPTCNBX ;
"RTN","BPSNCPD2",198,0)
 Q
"RTN","BPSNCPD2",199,0)
 ;
"RTN","BPSNCPD3")
0^31^B65718099
"RTN","BPSNCPD3",1,0)
BPSNCPD3 ;BHAM ISC/LJE - Continuation of BPSNCPDP - DUR HANDLING ;06/16/2004
"RTN","BPSNCPD3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,6,7,8,10,11,15,19,20**;JUN 2004;Build 27
"RTN","BPSNCPD3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSNCPD3",4,0)
 ;
"RTN","BPSNCPD3",5,0)
 ; Due to space considerations, these comments were moved from BPSNPCPD
"RTN","BPSNCPD3",6,0)
 ;   to this routine.
"RTN","BPSNCPD3",7,0)
 ;
"RTN","BPSNCPD3",8,0)
 ; ------------------ Beginning of BPSNCPDP comments ------------------
"RTN","BPSNCPD3",9,0)
 ;Input
"RTN","BPSNCPD3",10,0)
 ; BRXIEN = Prescription IEN
"RTN","BPSNCPD3",11,0)
 ; BFILL  = Fill Number
"RTN","BPSNCPD3",12,0)
 ; DOS    = Date of Service
"RTN","BPSNCPD3",13,0)
 ; BWHERE (RX Action)
"RTN","BPSNCPD3",14,0)
 ;    AREV = Auto-Reversal
"RTN","BPSNCPD3",15,0)
 ;    BB   = Back Billing
"RTN","BPSNCPD3",16,0)
 ;    CRLB = CMOP/OPAI Release & Rebill
"RTN","BPSNCPD3",17,0)
 ;    CRLR = CMOP/OPAI Release & Reverse (successful release)
"RTN","BPSNCPD3",18,0)
 ;    CRLX = CMOP/OPAI unsuccessful release & reverse
"RTN","BPSNCPD3",19,0)
 ;    CRRL = CMOP/OPAI Release - Original claim not paid, submit another claim, no reversal
"RTN","BPSNCPD3",20,0)
 ;    DC   = Discontinue - only reverse un-released PAYABLE DC's, release date check
"RTN","BPSNCPD3",21,0)
 ;           should be in calling routine.
"RTN","BPSNCPD3",22,0)
 ;    DE   = Delete
"RTN","BPSNCPD3",23,0)
 ;    ED   = Edit (includes RX release with NDC edit)
"RTN","BPSNCPD3",24,0)
 ;    ERES = Resubmit from ECME user screen
"RTN","BPSNCPD3",25,0)
 ;    ERWV = Resubmit Without Reversal from ECME user screen (BPS*1*20)
"RTN","BPSNCPD3",26,0)
 ;    ERNB = Resubmit of a TRI/CVA non-billable entry from the ECME user screen (BPS*1*20)
"RTN","BPSNCPD3",27,0)
 ;    EREV = Reversal from ECME user screen
"RTN","BPSNCPD3",28,0)
 ;    HLD  = Put prescription on Hold
"RTN","BPSNCPD3",29,0)
 ;    OREV = Reversal from Outpatient Pharmacy edit screen (BPS*1*20)
"RTN","BPSNCPD3",30,0)
 ;    RSNB = Resubmit Non-Billable TRICARE & CHAMPVA from PSO Reject Info Screen (BPS*1*20)
"RTN","BPSNCPD3",31,0)
 ;    OF   = Original Fill
"RTN","BPSNCPD3",32,0)
 ;    P2   = Original submission from PRO Option, no reversal
"RTN","BPSNCPD3",33,0)
 ;    P2S  = Resubmit from PRO Option
"RTN","BPSNCPD3",34,0)
 ;    PC   = Pull CMOPs
"RTN","BPSNCPD3",35,0)
 ;    PE   = Pull early from suspense
"RTN","BPSNCPD3",36,0)
 ;    PL   = Pull local from suspense
"RTN","BPSNCPD3",37,0)
 ;    PP   = Pull RX (PP) action from Patient Prescription Processing option
"RTN","BPSNCPD3",38,0)
 ;    RF   = Refill
"RTN","BPSNCPD3",39,0)
 ;    RN   = Renew
"RTN","BPSNCPD3",40,0)
 ;    RRL  = Release - Original claim not paid, submit another claim, no reversal
"RTN","BPSNCPD3",41,0)
 ;    RS   = Return-to-Stock
"RTN","BPSNCPD3",42,0)
 ; BILLNDC = Valid NDC# with format 5-4-2
"RTN","BPSNCPD3",43,0)
 ; REVREAS = Reversal Reason
"RTN","BPSNCPD3",44,0)
 ; DURREC  = String of up to three sets of DUR info. Sets are delimited with "~". Each set consists of three "^" pieces:
"RTN","BPSNCPD3",45,0)
 ;             Reason for Service Code
"RTN","BPSNCPD3",46,0)
 ;             Professional Service Code
"RTN","BPSNCPD3",47,0)
 ;             Result of Service Code
"RTN","BPSNCPD3",48,0)
 ; BPOVRIEN = Pointer to BPS NCPDP OVERIDE file.  This parameter will 
"RTN","BPSNCPD3",49,0)
 ;            only be passed if there are overrides entered by the
"RTN","BPSNCPD3",50,0)
 ;            user via the Resubmit with Edits (RED) option in the 
"RTN","BPSNCPD3",51,0)
 ;            user screen.
"RTN","BPSNCPD3",52,0)
 ; BPSAUTH  = Prior authorization code (Prior auth code^Prior auth number)
"RTN","BPSNCPD3",53,0)
 ; BPSCLARF = Submission Clarification Code (external value from #9002313.25), entered by
"RTN","BPSNCPD3",54,0)
 ;            pharmacist and passed by Outpatient Pharmacy to ECME to put into the claim  
"RTN","BPSNCPD3",55,0)
 ; BPCOBIND = (optional, default is Primary) for COB indicators - so when the API is called for the particular
"RTN","BPSNCPD3",56,0)
 ;            COB claim the BPSNCPDP can handle it.
"RTN","BPSNCPD3",57,0)
 ; BPJOBFLG = (optional, default is "F") B - if is called by unqueueing logic in background, F - by other (foreground) process, 
"RTN","BPSNCPD3",58,0)
 ; BPREQIEN = (optional) ien of BPS REQUEST file record, that needs to be unqueued 
"RTN","BPSNCPD3",59,0)
 ; BPSCLOSE = (optional) local array used with BWHERE="EREV" only, if the user had chosen to close the claim after reversal
"RTN","BPSNCPD3",60,0)
 ;   if claim needs to be closed then
"RTN","BPSNCPD3",61,0)
 ;   BPSCLOSE("CLOSE AFT REV")=1
"RTN","BPSNCPD3",62,0)
 ;   BPSCLOSE("CLOSE AFT REV REASON")=<#356.8 ien>
"RTN","BPSNCPD3",63,0)
 ;   BPSCLOSE("CLOSE AFT REV COMMENT")=<some text>
"RTN","BPSNCPD3",64,0)
 ; BPSPLAN  = (optional) IEN of the entry in the GROUP INSURANCE PLAN file (#355.3)
"RTN","BPSNCPD3",65,0)
 ; BPSPRDAT = (optional) local array passed by reference. Contains primary claim data needed to submit a secondary claim.
"RTN","BPSNCPD3",66,0)
 ;            Format:  BPSPRDAT(NCPDP field)
"RTN","BPSNCPD3",67,0)
 ; BPSRTYPE = (optional) rate type ( ien of the file #399.3)
"RTN","BPSNCPD3",68,0)
 ; BPSDELAY = Delay Reason Code (IEN of BPS NCPDP DELAY REASON CODE (#9002313.29), entered by the user
"RTN","BPSNCPD3",69,0)
 ;            in the Back Billing option of Claims Tracking and passed to ECME to put into the claim.
"RTN","BPSNCPD3",70,0)
 ; 
"RTN","BPSNCPD3",71,0)
 ;Output (RESPONSE^MESSAGE^ELIGIBILITY^CLAIMSTATUS^COB^RXCOB^INSURANCE)
"RTN","BPSNCPD3",72,0)
 ; RESPONSE
"RTN","BPSNCPD3",73,0)
 ;    0  Submitted through ECME
"RTN","BPSNCPD3",74,0)
 ;    1  No submission through ECME
"RTN","BPSNCPD3",75,0)
 ;    2  IB not billable
"RTN","BPSNCPD3",76,0)
 ;    3  Claim was closed, not submitted (RTS/Deletes)
"RTN","BPSNCPD3",77,0)
 ;    4  Unable to queue claim
"RTN","BPSNCPD3",78,0)
 ;    5  Incorrect information supplied to ECME
"RTN","BPSNCPD3",79,0)
 ;    6  Inactive ECME - Primarily used for TRICARE/CHAMPVA to say ok to process rx
"RTN","BPSNCPD3",80,0)
 ;    10 Reversal but no resubmit
"RTN","BPSNCPD3",81,0)
 ; MESSAGE = Message associated with the response (error/submitted)
"RTN","BPSNCPD3",82,0)
 ; ELIGIBILITY = V - Veteran, T - TRICARE, C - CHAMPVA
"RTN","BPSNCPD3",83,0)
 ; CLAIMSTATUS = claim status (null or IN PROGRESS/E PAYABLE/etc...)
"RTN","BPSNCPD3",84,0)
 ; COB  = Coordination Of Benefit indicator of the insurance as it is stored in the PATIENT file: 1-primary, 2-secondary, 3-tertiary
"RTN","BPSNCPD3",85,0)
 ; RXCOB =  the payer sequence indicator of the claim which was sent to the payer as a result of this call: 1-primary, 2-secondary)
"RTN","BPSNCPD3",86,0)
 ; INSURANCE = Name of the insurance company that was billed as a result of this call
"RTN","BPSNCPD3",87,0)
 ; 
"RTN","BPSNCPD3",88,0)
 ; ----------------- End of BPSNCPDP comments ----------------------
"RTN","BPSNCPD3",89,0)
 ;
"RTN","BPSNCPD3",90,0)
 ; ----------------- DUR1 ------------------------------------------
"RTN","BPSNCPD3",91,0)
 ; DUR1 is called by PSO to get the reject information
"RTN","BPSNCPD3",92,0)
 ;
"RTN","BPSNCPD3",93,0)
 ;
"RTN","BPSNCPD3",94,0)
 ; IA 4560 supports OP's use of this procedure
"RTN","BPSNCPD3",95,0)
 ;
"RTN","BPSNCPD3",96,0)
 ; Function call for DUR INFORMATION 
"RTN","BPSNCPD3",97,0)
 ; Parameters: BRXIEN = Prescription IEN
"RTN","BPSNCPD3",98,0)
 ;             BFILL = fill number
"RTN","BPSNCPD3",99,0)
 ;             DUR = DUR info passed back
"RTN","BPSNCPD3",100,0)
 ;             ERROR = error passed back
"RTN","BPSNCPD3",101,0)
 ;             BPRXCOB = payer sequence
"RTN","BPSNCPD3",102,0)
 ; Note:
"RTN","BPSNCPD3",103,0)
 ;    DUR("BILLED")=0 if ecme off for pharmacy or no transaction in ECME
"RTN","BPSNCPD3",104,0)
 ;    DUR(<Insurance counter>,"BILLED")=1 if billed through ecme
"RTN","BPSNCPD3",105,0)
DUR1(BRXIEN,BFILL,DUR,ERROR,BPRXCOB) ;
"RTN","BPSNCPD3",106,0)
 N SITE,IEN59,DUR1,DURIEN
"RTN","BPSNCPD3",107,0)
 I '$G(BRXIEN) S DUR("BILLED")=0 Q
"RTN","BPSNCPD3",108,0)
 I $G(BFILL)="" S DUR("BILLED")=0 Q
"RTN","BPSNCPD3",109,0)
 S BPRXCOB=+$G(BPRXCOB)
"RTN","BPSNCPD3",110,0)
 I BPRXCOB=0 S BPRXCOB=1 ;default is Primary
"RTN","BPSNCPD3",111,0)
 ;
"RTN","BPSNCPD3",112,0)
 ; Get Site info and check is ECME is turned on
"RTN","BPSNCPD3",113,0)
 ; If not, set DUR("BILLED")=0 and quit
"RTN","BPSNCPD3",114,0)
 I '$G(BFILL) S SITE=$$RXAPI1^BPSUTIL1(BRXIEN,20,"I")
"RTN","BPSNCPD3",115,0)
 I $G(BFILL) S SITE=$$RXSUBF1^BPSUTIL1(BRXIEN,52,52.1,BFILL,8,"I")
"RTN","BPSNCPD3",116,0)
 I '$$ECMEON^BPSUTIL(SITE) S DUR("BILLED")=0 Q
"RTN","BPSNCPD3",117,0)
 ;
"RTN","BPSNCPD3",118,0)
 ; Set up the Transaction IEN
"RTN","BPSNCPD3",119,0)
 S IEN59=$$IEN59^BPSOSRX(BRXIEN,BFILL,BPRXCOB)
"RTN","BPSNCPD3",120,0)
 I IEN59="" S DUR("BILLED")=0 Q
"RTN","BPSNCPD3",121,0)
 ;
"RTN","BPSNCPD3",122,0)
 ; If the transaction record does not exist, set DUR("BILLED")=0 and quit
"RTN","BPSNCPD3",123,0)
 I '$D(^BPST(IEN59)) S DUR("BILLED")=0 Q
"RTN","BPSNCPD3",124,0)
 ;
"RTN","BPSNCPD3",125,0)
 S DUR(BPRXCOB,"BILLED")=1
"RTN","BPSNCPD3",126,0)
 ;
"RTN","BPSNCPD3",127,0)
 S DUR(BPRXCOB,"ELIGBLT")=$P($G(^BPST(IEN59,9)),U,4)
"RTN","BPSNCPD3",128,0)
 ; Get Insurance Info and set into DUR array
"RTN","BPSNCPD3",129,0)
 S DUR(BPRXCOB,"INSURANCE POINTER")=$$GET1^DIQ(9002313.59902,"1,"_IEN59_",",902.33,"I") ; Insurance Company IEN
"RTN","BPSNCPD3",130,0)
 D GETS^DIQ(9002313.59902,"1,"_IEN59_",","902.05;902.06;902.24;902.25;902.26","E","DUR1","ERROR")
"RTN","BPSNCPD3",131,0)
 S DUR(BPRXCOB,"INSURANCE NAME")=$G(DUR1(9002313.59902,"1,"_IEN59_",",902.24,"E"))  ; Insurance Company Name
"RTN","BPSNCPD3",132,0)
 S DUR(BPRXCOB,"GROUP NUMBER")=$G(DUR1(9002313.59902,"1,"_IEN59_",",902.05,"E"))    ; Insurance Group Number
"RTN","BPSNCPD3",133,0)
 S DUR(BPRXCOB,"GROUP NAME")=$G(DUR1(9002313.59902,"1,"_IEN59_",",902.25,"E"))      ; Insurance Group Name
"RTN","BPSNCPD3",134,0)
 S DUR(BPRXCOB,"PLAN CONTACT")=$G(DUR1(9002313.59902,"1,"_IEN59_",",902.26,"E"))    ; Insurance Contact Number
"RTN","BPSNCPD3",135,0)
 S DUR(BPRXCOB,"CARDHOLDER ID")=$G(DUR1(9002313.59902,"1,"_IEN59_",",902.06,"E"))   ; Cardholder ID
"RTN","BPSNCPD3",136,0)
 ;
"RTN","BPSNCPD3",137,0)
 ; Get Response IEN and Data
"RTN","BPSNCPD3",138,0)
 S DURIEN="",DURIEN=$P(^BPST(IEN59,0),"^",5)
"RTN","BPSNCPD3",139,0)
 D DURRESP(DURIEN,.DUR,BPRXCOB) ; Note: In the future, we may need to get/store DURIEN for each COB
"RTN","BPSNCPD3",140,0)
 Q
"RTN","BPSNCPD3",141,0)
 ;
"RTN","BPSNCPD3",142,0)
DURRESP(DURIEN,DUR,BPRXCOB) ;
"RTN","BPSNCPD3",143,0)
 ;Input Variables:
"RTN","BPSNCPD3",144,0)
 ; DURIEN - Claim Response IEN. Pointer to the BPS RESPONSES File #9002313.03
"RTN","BPSNCPD3",145,0)
 ; BPRXCOB - (Optional) The Payer Sequence:
"RTN","BPSNCPD3",146,0)
 ;   1 - Primary (default)
"RTN","BPSNCPD3",147,0)
 ;   2 - Secondary
"RTN","BPSNCPD3",148,0)
 ;
"RTN","BPSNCPD3",149,0)
 ;Output Variables:
"RTN","BPSNCPD3",150,0)
 ; DUR - Array of DUR related information for a specific claim response in the
"RTN","BPSNCPD3",151,0)
 ;   BPS RESPONSES file in the following format (INSN is the Payer Sequence):
"RTN","BPSNCPD3",152,0)
 ;
"RTN","BPSNCPD3",153,0)
 ; DUR(INSN,"RESPONSE IEN") - Pointer to the RESPONSE file (#9002313.03) for
"RTN","BPSNCPD3",154,0)
 ;   the claim submission
"RTN","BPSNCPD3",155,0)
 ; DUR(INSN,"MESSAGE") - The Transmission level specific data, Message field 504
"RTN","BPSNCPD3",156,0)
 ; DUR(INSN,"PAYER MESSAGE") - Message returned from the payer in the Transaction
"RTN","BPSNCPD3",157,0)
 ;   level
"RTN","BPSNCPD3",158,0)
 ; DUR(INSN,"STATUS") - Status of the claim (i.e. REJECTED CLAIM, PAYABLE)
"RTN","BPSNCPD3",159,0)
 ;
"RTN","BPSNCPD3",160,0)
 ; The following four fields are redundant with the fields in the DUR PPS
"RTN","BPSNCPD3",161,0)
 ; array but are provided for backwards compatibility.
"RTN","BPSNCPD3",162,0)
 ; DUR(INSN,"REASON") - Reason for Service Code pointer to BPS NCPDP REASON FOR
"RTN","BPSNCPD3",163,0)
 ;   SERVICE CODE file (#9002313.23)
"RTN","BPSNCPD3",164,0)
 ; DUR(INSN,"PREV FILL DATE") - Plan's Previous Fill Date
"RTN","BPSNCPD3",165,0)
 ; DUR(INSN,"DUR FREE TEXT DESC") - Drug Utilization Review (DUR) description
"RTN","BPSNCPD3",166,0)
 ;   and/or claims rejection free text information from the payer
"RTN","BPSNCPD3",167,0)
 ; DUR(INSN,"DUR ADD MSG TEXT") - Drug Utilization Review (DUR) additional free
"RTN","BPSNCPD3",168,0)
 ;   text information from the payer
"RTN","BPSNCPD3",169,0)
 ;
"RTN","BPSNCPD3",170,0)
 ; The following fields are from the DUR PPS RESPONSE multiple.
"RTN","BPSNCPD3",171,0)
 ; DUR(INSN,"DUR PPS",SEQ,"DUR PPS RESPONSE") - Total number of DUR PPS
"RTN","BPSNCPD3",172,0)
 ;   responses from the payer
"RTN","BPSNCPD3",173,0)
 ; DUR(INSN,"DUR PPS",SEQ,"REASON FOR SERVICE CODE") - Code identifying the
"RTN","BPSNCPD3",174,0)
 ;   type of utilization conflict detected or the reason for the pharmacist
"RTN","BPSNCPD3",175,0)
 ;   professional service
"RTN","BPSNCPD3",176,0)
 ; DUR(INSN,"DUR PPS",SEQ,"CLINICAL SIGNIFICANCE CODE") - Code identifying
"RTN","BPSNCPD3",177,0)
 ;   the significance or severity level of a clinical event as contained
"RTN","BPSNCPD3",178,0)
 ;   in the originating data base
"RTN","BPSNCPD3",179,0)
 ; DUR(INSN,"DUR PPS",SEQ,"OTHER PHARMACY INDICATOR") - Code for the type of
"RTN","BPSNCPD3",180,0)
 ;   pharmacy dispensing the conflicting drug
"RTN","BPSNCPD3",181,0)
 ; DUR(INSN,"DUR PPS",SEQ,"PREVIOUS DATE OF FILL") - Date prescription was
"RTN","BPSNCPD3",182,0)
 ;   previously filled
"RTN","BPSNCPD3",183,0)
 ; DUR(INSN,"DUR PPS",SEQ,"QUANTITY OF PREVIOUS FILL") - Amount expressed in
"RTN","BPSNCPD3",184,0)
 ;   metric decimal units of the conflicting agent that was previously filled
"RTN","BPSNCPD3",185,0)
 ; DUR(INSN,"DUR PPS",SEQ,"DATABASE INDICATOR") - Code identifying the source
"RTN","BPSNCPD3",186,0)
 ;   of drug information used for DUR processing
"RTN","BPSNCPD3",187,0)
 ; DUR(INSN,"DUR PPS",SEQ,"OTHER PRESCRIBER INDICATOR") - Code comparing the
"RTN","BPSNCPD3",188,0)
 ;   prescriber of the current prescription to the prescriber of the previously
"RTN","BPSNCPD3",189,0)
 ;   filled conflicting prescription
"RTN","BPSNCPD3",190,0)
 ; DUR(INSN,"DUR PPS",SEQ,"DUR FREE TEXT MESSAGE") - Text that provides
"RTN","BPSNCPD3",191,0)
 ;   additional detail regarding a DUR conflict
"RTN","BPSNCPD3",192,0)
 ; DUR(INSN,"DUR PPS",SEQ,"DUR ADDITIONAL TEXT") - Descriptive information that
"RTN","BPSNCPD3",193,0)
 ;   further defines the referenced DUR alert
"RTN","BPSNCPD3",194,0)
 ; DUR(INSN,"REJ CODE LST") - List of rejection code(s) returned by the payer
"RTN","BPSNCPD3",195,0)
 ;   separated by commas (i.e. 79,14)
"RTN","BPSNCPD3",196,0)
 ; DUR(INSN,"REJ CODES",SEQ,REJ CODE) - Array of rejection code descriptions
"RTN","BPSNCPD3",197,0)
 ;   where REJ CODE correlates to DUR(INSN,"REJ CODE LST") value(s) and SEQ
"RTN","BPSNCPD3",198,0)
 ;   equals a sequential number
"RTN","BPSNCPD3",199,0)
 ;
"RTN","BPSNCPD3",200,0)
 I '$G(DURIEN) Q
"RTN","BPSNCPD3",201,0)
 S BPRXCOB=+$G(BPRXCOB)
"RTN","BPSNCPD3",202,0)
 I BPRXCOB=0 S BPRXCOB=1 ;default is Primary
"RTN","BPSNCPD3",203,0)
 N ADDMESS,I,DUR1,CLMIEN
"RTN","BPSNCPD3",204,0)
 S DUR(BPRXCOB,"RESPONSE IEN")=DURIEN
"RTN","BPSNCPD3",205,0)
 ;
"RTN","BPSNCPD3",206,0)
 ;Get BIN from claim
"RTN","BPSNCPD3",207,0)
 S CLMIEN=$$GET1^DIQ(9002313.03,DURIEN,.01,"I")
"RTN","BPSNCPD3",208,0)
 S DUR(BPRXCOB,"BIN")=$$GET1^DIQ(9002313.02,CLMIEN_",",101) ; BIN Number
"RTN","BPSNCPD3",209,0)
 ;
"RTN","BPSNCPD3",210,0)
 ; Get the Transmission specific data (Message)
"RTN","BPSNCPD3",211,0)
 S DUR(BPRXCOB,"MESSAGE")=$$GET1^DIQ(9002313.03,DURIEN_",",504,"E")
"RTN","BPSNCPD3",212,0)
 ;
"RTN","BPSNCPD3",213,0)
 ; Get the Additional Message Information from the transaction
"RTN","BPSNCPD3",214,0)
 D ADDMESS^BPSSCRLG(DURIEN,1,.ADDMESS)
"RTN","BPSNCPD3",215,0)
 M DUR(BPRXCOB,"PAYER MESSAGE")=ADDMESS
"RTN","BPSNCPD3",216,0)
 ;
"RTN","BPSNCPD3",217,0)
 ; Get the other transaction level data
"RTN","BPSNCPD3",218,0)
 D GETS^DIQ(9002313.0301,"1,"_DURIEN_",","501;567.01*","E","DUR1","ERROR")
"RTN","BPSNCPD3",219,0)
 S DUR(BPRXCOB,"STATUS")=$G(DUR1(9002313.0301,"1,"_DURIEN_",",501,"E"))                  ;Status of Response
"RTN","BPSNCPD3",220,0)
 ;
"RTN","BPSNCPD3",221,0)
 ; The following four fields are redundant with the fields in the DUR PPS 
"RTN","BPSNCPD3",222,0)
 ;   multiple but are needed for backwards compatibility with the OP code
"RTN","BPSNCPD3",223,0)
 S DUR(BPRXCOB,"REASON")=$G(DUR1(9002313.1101,"1,1,"_DURIEN_",",439,"E"))                ;Reason for Service Code
"RTN","BPSNCPD3",224,0)
 S DUR(BPRXCOB,"PREV FILL DATE")=$G(DUR1(9002313.1101,"1,1,"_DURIEN_",",530,"E"))        ;Previous Date of Fill
"RTN","BPSNCPD3",225,0)
 S DUR(BPRXCOB,"DUR FREE TEXT DESC")=$G(DUR1(9002313.1101,"1,1,"_DURIEN_",",544,"E"))    ;DUR Free Text Message from Payer
"RTN","BPSNCPD3",226,0)
 S DUR(BPRXCOB,"DUR ADD MSG TEXT")=$G(DUR1(9002313.1101,"1,1,"_DURIEN_",",570,"E"))      ;DUR Additional Message Text from Payer
"RTN","BPSNCPD3",227,0)
 ;
"RTN","BPSNCPD3",228,0)
 ; Get DUR PPS RESPONSE multiple values
"RTN","BPSNCPD3",229,0)
 S DUR(BPRXCOB,"DUR PPS RESPONSE")=""
"RTN","BPSNCPD3",230,0)
 F I=1:1 Q:'$D(DUR1(9002313.1101,I_",1,"_DURIEN_",",.01))  D
"RTN","BPSNCPD3",231,0)
 . S DUR(BPRXCOB,"DUR PPS RESPONSE")=I
"RTN","BPSNCPD3",232,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"DUR PPS RESPONSE")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",.01,"E"))
"RTN","BPSNCPD3",233,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"REASON FOR SERVICE CODE")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",439,"E"))
"RTN","BPSNCPD3",234,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"CLINICAL SIGNIFICANCE CODE")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",528,"E"))
"RTN","BPSNCPD3",235,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"OTHER PHARMACY INDICATOR")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",529,"E"))
"RTN","BPSNCPD3",236,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"PREVIOUS DATE OF FILL")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",530,"E"))
"RTN","BPSNCPD3",237,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"QUANTITY OF PREVIOUS FILL")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",531,"E"))
"RTN","BPSNCPD3",238,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"DATABASE INDICATOR")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",532,"E"))
"RTN","BPSNCPD3",239,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"OTHER PRESCRIBER INDICATOR")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",533,"E"))
"RTN","BPSNCPD3",240,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"DUR FREE TEXT MESSAGE")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",544,"E"))
"RTN","BPSNCPD3",241,0)
 . S DUR(BPRXCOB,"DUR PPS",I,"DUR ADDITIONAL TEXT")=$G(DUR1(9002313.1101,I_",1,"_DURIEN_",",570,"E"))
"RTN","BPSNCPD3",242,0)
 ;
"RTN","BPSNCPD3",243,0)
 ; Get DUR reject codes and description and store in DUR 
"RTN","BPSNCPD3",244,0)
 D GETS^DIQ(9002313.0301,"1,"_DURIEN_",","511*","I","DUR1","ERROR") ;get DUR codes and descriptions
"RTN","BPSNCPD3",245,0)
 S DUR(BPRXCOB,"REJ CODE LST")=""
"RTN","BPSNCPD3",246,0)
 F I=1:1 Q:'$D(DUR1(9002313.03511,I_",1,"_DURIEN_","))  D
"RTN","BPSNCPD3",247,0)
 . N REJX,REJN
"RTN","BPSNCPD3",248,0)
 . S REJX=$G(DUR1(9002313.03511,I_",1,"_DURIEN_",",.01,"I")) Q:REJX=""     ; external reject code
"RTN","BPSNCPD3",249,0)
 . S REJN=+$O(^BPSF(9002313.93,"B",REJX,0)) Q:'REJN                        ; internal reject code ien
"RTN","BPSNCPD3",250,0)
 . S DUR(BPRXCOB,"REJ CODES",I,REJX)=$P($G(^BPSF(9002313.93,REJN,0)),U,2)  ; reject code description
"RTN","BPSNCPD3",251,0)
 . S DUR(BPRXCOB,"REJ CODE LST")=DUR(BPRXCOB,"REJ CODE LST")_","_REJX
"RTN","BPSNCPD3",252,0)
 S DUR(BPRXCOB,"REJ CODE LST")=$E(DUR(BPRXCOB,"REJ CODE LST"),2,9999)
"RTN","BPSNCPD3",253,0)
 Q
"RTN","BPSNCPD5")
0^33^B76247724
"RTN","BPSNCPD5",1,0)
BPSNCPD5 ;ALB/SS - Pharmacy API part 5 ;10-JAN-08
"RTN","BPSNCPD5",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8,10,11,20**;JUN 2004;Build 27
"RTN","BPSNCPD5",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSNCPD5",4,0)
 ;
"RTN","BPSNCPD5",5,0)
 ;schedule a reversal for the future
"RTN","BPSNCPD5",6,0)
 ; BPNEWREQ - By ref to return new BPS REQUEST ien
"RTN","BPSNCPD5",7,0)
 ; BRXIEN - IEN of Prescription file (#52)
"RTN","BPSNCPD5",8,0)
 ; BFILL - Fill no
"RTN","BPSNCPD5",9,0)
 ; DOS - Date of service
"RTN","BPSNCPD5",10,0)
 ; BWHERE - See comments at the top of BPSNCPD3
"RTN","BPSNCPD5",11,0)
 ; BILLNDC 
"RTN","BPSNCPD5",12,0)
 ; REVREAS
"RTN","BPSNCPD5",13,0)
 ; DURREC
"RTN","BPSNCPD5",14,0)
 ; BPOVRIEN
"RTN","BPSNCPD5",15,0)
 ; BPSCLARF
"RTN","BPSNCPD5",16,0)
 ; BPSAUTH
"RTN","BPSNCPD5",17,0)
 ; IEN59
"RTN","BPSNCPD5",18,0)
 ; BPCOBIND
"RTN","BPSNCPD5",19,0)
 ; BPREVREQ - ien of the previous BPS REQUEST
"RTN","BPSNCPD5",20,0)
 ; BPACTTYP - U - unclaim(reversal request), UC - reversal+resubmit, C - claim request
"RTN","BPSNCPD5",21,0)
 ; BPSCLS - BPSCLOSE parameter of EN^BPSNCPDP
"RTN","BPSNCPD5",22,0)
 ;returns:
"RTN","BPSNCPD5",23,0)
 ; RESPONSE code^CLAMSTAT message^D(display message)^number of seconds to hang^IEN of the new request
"RTN","BPSNCPD5",24,0)
 ; RESPONSE code = 0 - Submitted through ECME
"RTN","BPSNCPD5",25,0)
 ; see EN^BPSNCPD4 for other RESPONSE values;
"RTN","BPSNCPD5",26,0)
SCHREQ(BPNEWREQ,BRXIEN,BFILL,DOS,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,IEN59,BPCOBIND,BPREVREQ,BPACTTYP,BPSCLS,BPSRTYPE,BPSPLAN,BPSPRDAT) ;
"RTN","BPSNCPD5",27,0)
 N RESP,RESPONSE,MOREDATA,BPRETV
"RTN","BPSNCPD5",28,0)
 N BPUSRMSG
"RTN","BPSNCPD5",29,0)
 ;populate MOREDATA with basic data
"RTN","BPSNCPD5",30,0)
 D BASICMOR^BPSOSRX8(BWHERE,DOS,"",REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,.MOREDATA)
"RTN","BPSNCPD5",31,0)
 I BPCOBIND=2 D MORE4SEC^BPSPRRX2(.MOREDATA,.BPSPRDAT) S MOREDATA("RTYPE")=$G(BPSRTYPE)
"RTN","BPSNCPD5",32,0)
 ; if the user has chosen to close the claim after reversal
"RTN","BPSNCPD5",33,0)
 ; BPSCLS contains the value of the BPSCLOSE parameter of EN^BPSNCPDP
"RTN","BPSNCPD5",34,0)
 I $G(BPSCLS("CLOSE AFT REV"))=1 M MOREDATA=BPSCLS
"RTN","BPSNCPD5",35,0)
 ; 
"RTN","BPSNCPD5",36,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSNCPD5",37,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Before Submit of Reversal")
"RTN","BPSNCPD5",38,0)
 S BPSTART=$$STTM^BPSNCPD4()
"RTN","BPSNCPD5",39,0)
 ;schedule a request
"RTN","BPSNCPD5",40,0)
 S BPRETV=$$REQST^BPSOSRX(BPACTTYP,BRXIEN,BFILL,.MOREDATA,BPCOBIND,IEN59,$G(BILLNDC),1)
"RTN","BPSNCPD5",41,0)
 S BPNEWREQ=+$P(BPRETV,U,2)
"RTN","BPSNCPD5",42,0)
 ;if error
"RTN","BPSNCPD5",43,0)
 I +BPRETV=0 D  Q $$RSPCLMS^BPSOSRX8(BPACTTYP,4,.MOREDATA)
"RTN","BPSNCPD5",44,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Create request error: "_$P(BPRETV,U,2)_". Claim Will Not Be submitted.")
"RTN","BPSNCPD5",45,0)
 . L -^BPST
"RTN","BPSNCPD5",46,0)
 ;if ok
"RTN","BPSNCPD5",47,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-BPS REQUEST: "_BPNEWREQ_" has been created")
"RTN","BPSNCPD5",48,0)
 ;determine the last request
"RTN","BPSNCPD5",49,0)
 I +$$NXTREQST^BPSOSRX6(BPREVREQ,BPNEWREQ)=0 D  Q $$RSPCLMS^BPSOSRX8("C",4,.MOREDATA)
"RTN","BPSNCPD5",50,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot make "_BPNEWREQ_"as a NEXT REQUEST in "_BPREVREQ)
"RTN","BPSNCPD5",51,0)
 Q $$RSPCLMS^BPSOSRX8(BPACTTYP,0,.MOREDATA)_U_BPNEWREQ
"RTN","BPSNCPD5",52,0)
 ;
"RTN","BPSNCPD5",53,0)
 ;====== Schedule a reversal
"RTN","BPSNCPD5",54,0)
 ;BPSCLS - BPSCLOSE parameter of EN^BPSNCPDP
"RTN","BPSNCPD5",55,0)
REVERSAL(BPNEWREQ,BRXIEN,BFILL,OLDRESP,DOS,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,IEN59,BPCOBIND,BPJOBFLG,BPACTTYP,BPSTART,BPREQIEN,BPSCLS,BPSRTYPE,BPSPRDAT) ;
"RTN","BPSNCPD5",56,0)
 N RESP,RESPONSE,MOREDATA,BPRETV
"RTN","BPSNCPD5",57,0)
 ;populate MOREDATA with basic data
"RTN","BPSNCPD5",58,0)
 D BASICMOR^BPSOSRX8(BWHERE,DOS,"",REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,.MOREDATA)
"RTN","BPSNCPD5",59,0)
 I BPCOBIND=2 D MORE4SEC^BPSPRRX2(.MOREDATA,.BPSPRDAT) S MOREDATA("RTYPE")=$G(BPSRTYPE)
"RTN","BPSNCPD5",60,0)
 ; if the user has chosen to close the claim after reversal
"RTN","BPSNCPD5",61,0)
 ; BPSCLS contains the value of the BPSCLOSE parameter of EN^BPSNCPDP
"RTN","BPSNCPD5",62,0)
 I $G(BPSCLS("CLOSE AFT REV"))=1 M MOREDATA=BPSCLS
"RTN","BPSNCPD5",63,0)
 ;
"RTN","BPSNCPD5",64,0)
 ; Do a reversal for the appropriate actions
"RTN","BPSNCPD5",65,0)
 ; If override flag is set, prompt for override values - TEST ONLY
"RTN","BPSNCPD5",66,0)
 ;
"RTN","BPSNCPD5",67,0)
 I $$CHECK^BPSTEST D GETOVER^BPSTEST(BRXIEN,BFILL,OLDRESP,BWHERE,"R",BPCOBIND)
"RTN","BPSNCPD5",68,0)
 ;
"RTN","BPSNCPD5",69,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSNCPD5",70,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Before Submit of Reversal")
"RTN","BPSNCPD5",71,0)
 S BPSTART=$$STTM^BPSNCPD4()
"RTN","BPSNCPD5",72,0)
 ;if background job
"RTN","BPSNCPD5",73,0)
 I BPJOBFLG="B" S BPRETV=$$ACTIVATE^BPSNCPD4(BPREQIEN,"U") Q $$RSPCLMS^BPSOSRX8(BPACTTYP,+BPRETV,.MOREDATA)_U_$P(BPRETV,U,2)
"RTN","BPSNCPD5",74,0)
 ;if foreground job then schedule an UNCLAIM request
"RTN","BPSNCPD5",75,0)
 S BPRETV=$$REQST^BPSOSRX("U",BRXIEN,BFILL,.MOREDATA,BPCOBIND,IEN59,$G(BILLNDC))
"RTN","BPSNCPD5",76,0)
 S BPNEWREQ=+$P(BPRETV,U,2)
"RTN","BPSNCPD5",77,0)
 ;if error
"RTN","BPSNCPD5",78,0)
 I +BPRETV=0 D  Q $$RSPCLMS^BPSOSRX8(BPACTTYP,4,.MOREDATA)
"RTN","BPSNCPD5",79,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Create request error: "_$P(BPRETV,U,2)_". Claim Will Not Be submitted.")
"RTN","BPSNCPD5",80,0)
 . L -^BPST
"RTN","BPSNCPD5",81,0)
 ;if ok
"RTN","BPSNCPD5",82,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-BPS REQUEST: "_BPNEWREQ_" has been created")
"RTN","BPSNCPD5",83,0)
 ;activate the scheduled request
"RTN","BPSNCPD5",84,0)
 S BPRETV=$$ACTIVATE^BPSNCPD4(BPNEWREQ,"U")
"RTN","BPSNCPD5",85,0)
 Q $$RSPCLMS^BPSOSRX8(BPACTTYP,+BPRETV,.MOREDATA)_U_BPNEWREQ
"RTN","BPSNCPD5",86,0)
 ;
"RTN","BPSNCPD5",87,0)
 ;====== Process a brand new RX/RF, which never was processed by ECME yet
"RTN","BPSNCPD5",88,0)
 ;returns:
"RTN","BPSNCPD5",89,0)
 ; 0 - Submitted through ECME
"RTN","BPSNCPD5",90,0)
 ; or 
"RTN","BPSNCPD5",91,0)
 ; RESPONSE code^CLAMSTAT^D(display message)^number of seconds to hang^additional info
"RTN","BPSNCPD5",92,0)
 ; see EN^BPSNCPD1 for RESPONSE values
"RTN","BPSNCPD5",93,0)
NEWCLM(BPNEWREQ,BRXIEN,BFILL,DOS,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,BPCOBIND,BPJOBFLG,IEN59,BPACTTYP,DFN,BPSTART,BPREQIEN,BPSELIG,BPSRTYPE,BPSPLAN,BPSPRDAT) ;
"RTN","BPSNCPD5",94,0)
 N BPSITE,BPECMOFF,BPSARRY,MOREDATA,IB,BPRETV,BPZRET,BPCLMST,CERTIEN,BPRESP
"RTN","BPSNCPD5",95,0)
 I BPJOBFLG'="F",BPJOBFLG'="B" D LOG^BPSOSL(IEN59,$T(+0)_"-Job Flag missing") Q "5^Job Flag missing"  ;RESPONSE^CLMSTAT
"RTN","BPSNCPD5",96,0)
 S BPCLMST=""
"RTN","BPSNCPD5",97,0)
 I BPACTTYP'="C" Q "1^Prescription not previously billed through ECME. Cannot Reverse claim.^D^2"
"RTN","BPSNCPD5",98,0)
 S BPSITE=+$$GETSITE^BPSOSRX8(BRXIEN,BFILL)
"RTN","BPSNCPD5",99,0)
 ;check ECME availability
"RTN","BPSNCPD5",100,0)
 S BPECMOFF=$$ECMESITE^BPSOSRX5(BPSITE) I +BPECMOFF=1 Q BPECMOFF
"RTN","BPSNCPD5",101,0)
 ;populate MOREDATA with basic data
"RTN","BPSNCPD5",102,0)
 D BASICMOR^BPSOSRX8(BWHERE,DOS,BPSITE,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,.MOREDATA)
"RTN","BPSNCPD5",103,0)
 I BPCOBIND=2 D MORE4SEC^BPSPRRX2(.MOREDATA,.BPSPRDAT) S MOREDATA("RTYPE")=$G(BPSRTYPE)
"RTN","BPSNCPD5",104,0)
 I $G(BPSRTYPE)'="" S MOREDATA("RTYPE")=$G(BPSRTYPE)
"RTN","BPSNCPD5",105,0)
 ;Certification Testing - Sets CERTIEN which is used in BILLABLE
"RTN","BPSNCPD5",106,0)
 S BPRESP=$$CERTTEST^BPSNCPD4(.CERTIEN) I +BPRESP=1 Q BPRESP
"RTN","BPSNCPD5",107,0)
 ;Populate BPSARRY
"RTN","BPSNCPD5",108,0)
 D STARRAY^BPSNCPD1(BRXIEN,BFILL,BWHERE,.BPSARRY,BPSITE,DOS,BILLNDC)
"RTN","BPSNCPD5",109,0)
 S BPSARRY("RXCOB")=BPCOBIND
"RTN","BPSNCPD5",110,0)
 S BPSARRY("PLAN")=$G(BPSPLAN),BPSARRY("RTYPE")=$G(BPSRTYPE) ;for secondary and TRICARE/dual eligibility billing, to be used by RX^IBNCPDP
"RTN","BPSNCPD5",111,0)
 ;Billing determination
"RTN","BPSNCPD5",112,0)
 S IB=$$BILLABLE^BPSNCPD4(DFN,BWHERE,.MOREDATA,.BPSARRY,CERTIEN,.BPSELIG)
"RTN","BPSNCPD5",113,0)
 ;if non-billable or no response from IB
"RTN","BPSNCPD5",114,0)
 I +IB'=1 Q $P(IB,U,2,5)_"^D^"
"RTN","BPSNCPD5",115,0)
 ;check IB data
"RTN","BPSNCPD5",116,0)
 S BPRETV=$$IBDATAOK^BPSOSRX8(.MOREDATA,$G(BPSARRY("NO ECME INSURANCE"))) I BPRETV>0 Q BPRETV
"RTN","BPSNCPD5",117,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSNCPD5",118,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Before submit of claim")
"RTN","BPSNCPD5",119,0)
 S BPSTART=$$STTM^BPSNCPD4()
"RTN","BPSNCPD5",120,0)
 ;if background job
"RTN","BPSNCPD5",121,0)
 I BPJOBFLG="B",+$G(BPREQIEN)=0 D  Q "5^BPS REQUEST IEN missing"  ;should never happen
"RTN","BPSNCPD5",122,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-BPS REQUEST IEN missing for background job. Claim cannot be processed.")
"RTN","BPSNCPD5",123,0)
 I BPJOBFLG="B" D  Q $$RSPCLMS^BPSOSRX8(BPACTTYP,+BPRETV,.MOREDATA)_U_BPREQIEN
"RTN","BPSNCPD5",124,0)
 . ;Update IB data
"RTN","BPSNCPD5",125,0)
 . D UPDINSDT^BPSOSRX7(BPREQIEN,.MOREDATA,IEN59) ;
"RTN","BPSNCPD5",126,0)
 . S BPRETV=$$ACTIVATE^BPSNCPD4(BPREQIEN,"C")
"RTN","BPSNCPD5",127,0)
 ;if foreground job then schedule a CLAIM request
"RTN","BPSNCPD5",128,0)
 ;
"RTN","BPSNCPD5",129,0)
 ; If override flag is set, prompt for override values - TEST ONLY
"RTN","BPSNCPD5",130,0)
 I $$CHECK^BPSTEST D GETOVER^BPSTEST(BRXIEN,BFILL,"",BWHERE,"S",BPCOBIND)
"RTN","BPSNCPD5",131,0)
 ;
"RTN","BPSNCPD5",132,0)
 S BPRETV=$$REQST^BPSOSRX("C",BRXIEN,BFILL,.MOREDATA,BPCOBIND,IEN59,$G(BILLNDC))
"RTN","BPSNCPD5",133,0)
 S BPNEWREQ=+$P(BPRETV,U,2)
"RTN","BPSNCPD5",134,0)
 ;if error
"RTN","BPSNCPD5",135,0)
 I +BPRETV=0 D  Q $$RSPCLMS^BPSOSRX8(BPACTTYP,4,.MOREDATA,$P(BPRETV,U,2))
"RTN","BPSNCPD5",136,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Create request error: "_$P(BPRETV,U,2)_". Claim Will Not Be submitted.")
"RTN","BPSNCPD5",137,0)
 ;if ok
"RTN","BPSNCPD5",138,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-BPS REQUEST: "_BPNEWREQ_" has been created")
"RTN","BPSNCPD5",139,0)
 ;activate the scheduled request
"RTN","BPSNCPD5",140,0)
 S BPRETV=$$ACTIVATE^BPSNCPD4(BPNEWREQ,"C")
"RTN","BPSNCPD5",141,0)
 Q $$RSPCLMS^BPSOSRX8(BPACTTYP,+BPRETV,.MOREDATA)_U_BPNEWREQ
"RTN","BPSNCPD5",142,0)
 ;
"RTN","BPSNCPD5",143,0)
 ;Process RX/RF resubmit OR reversal+resubmit for non-payables
"RTN","BPSNCPD5",144,0)
 ;  also process RX/RF resubmit WITHOUT a Reversal no matter the payable status of the claim (bps*1*20)
"RTN","BPSNCPD5",145,0)
 ;returns:
"RTN","BPSNCPD5",146,0)
 ; 0 - Submitted through ECME
"RTN","BPSNCPD5",147,0)
 ; or 
"RTN","BPSNCPD5",148,0)
 ; RESPONSE code^CLAMSTAT^D(display message)^number of seconds to hang^additional info
"RTN","BPSNCPD5",149,0)
 ; see EN^BPSNCPDP for RESPONSE values
"RTN","BPSNCPD5",150,0)
REVRESNP(BPNEWREQ,BRXIEN,BFILL,DOS,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,BPCOBIND,BPJOBFLG,IEN59,BPACTTYP,DFN,BPSTART,BPREQIEN,OLDRESP,BPSELIG,BPSRTYPE,BPSPLAN,BPSPRDAT) ;
"RTN","BPSNCPD5",151,0)
 N BPSITE,BPECMOFF,BPSARRY,MOREDATA,IB,BPRETV,BPZRET,BPCLMST,CERTIEN,BPRESP
"RTN","BPSNCPD5",152,0)
 I BPJOBFLG'="F",BPJOBFLG'="B" D LOG^BPSOSL(IEN59,$T(+0)_"-Job Flag missing") Q "5^Job Flag missing"  ;RESPONSE^CLMSTAT
"RTN","BPSNCPD5",153,0)
 S BPCLMST=""
"RTN","BPSNCPD5",154,0)
 I BPACTTYP="U" Q "1^Prescription is not payable. Cannot Reverse claim.^D^2"
"RTN","BPSNCPD5",155,0)
 S BPSITE=+$$GETSITE^BPSOSRX8(BRXIEN,BFILL)
"RTN","BPSNCPD5",156,0)
 ;check ECME availability
"RTN","BPSNCPD5",157,0)
 S BPECMOFF=$$ECMESITE^BPSOSRX5(BPSITE) I +BPECMOFF=1 Q BPECMOFF
"RTN","BPSNCPD5",158,0)
 ;
"RTN","BPSNCPD5",159,0)
 ;populate MOREDATA with basic data
"RTN","BPSNCPD5",160,0)
 D BASICMOR^BPSOSRX8(BWHERE,DOS,BPSITE,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,.MOREDATA)
"RTN","BPSNCPD5",161,0)
 I BPCOBIND=2 D MORE4SEC^BPSPRRX2(.MOREDATA,.BPSPRDAT) S MOREDATA("RTYPE")=$G(BPSRTYPE)
"RTN","BPSNCPD5",162,0)
 I $G(BPSRTYPE)'="" S MOREDATA("RTYPE")=$G(BPSRTYPE)
"RTN","BPSNCPD5",163,0)
 ;Certification Testing - Sets CERTIEN which is used in BILLABLE
"RTN","BPSNCPD5",164,0)
 S BPRESP=$$CERTTEST^BPSNCPD4(.CERTIEN) I +BPRESP=1 Q BPRESP
"RTN","BPSNCPD5",165,0)
 ;Populate BPSARRY
"RTN","BPSNCPD5",166,0)
 D STARRAY^BPSNCPD1(BRXIEN,BFILL,BWHERE,.BPSARRY,BPSITE,DOS,BILLNDC)
"RTN","BPSNCPD5",167,0)
 S BPSARRY("RXCOB")=BPCOBIND
"RTN","BPSNCPD5",168,0)
 S BPSARRY("PLAN")=$G(BPSPLAN),BPSARRY("RTYPE")=$G(BPSRTYPE) ;for secondary and TRICARE/dual eligibility billing, to be used by RX^IBNCPDP
"RTN","BPSNCPD5",169,0)
 ;set BPSARRY("SC/EI OVR") flag for scheduled requests
"RTN","BPSNCPD5",170,0)
 I $G(BPJOBFLG)="B",$G(BPREQIEN) S BPSARRY("SC/EI OVR")=$P($G(^BPS(9002313.77,+$G(BPREQIEN),2)),U,9)
"RTN","BPSNCPD5",171,0)
 ;Billing determination
"RTN","BPSNCPD5",172,0)
 S IB=$$BILLABLE^BPSNCPD4(DFN,BWHERE,.MOREDATA,.BPSARRY,CERTIEN,.BPSELIG)
"RTN","BPSNCPD5",173,0)
 ;if non-billable or no response from IB
"RTN","BPSNCPD5",174,0)
 I +IB'=1 Q $P(IB,U,2,5)_"^D^"
"RTN","BPSNCPD5",175,0)
 ;check IB data
"RTN","BPSNCPD5",176,0)
 S BPRETV=$$IBDATAOK^BPSOSRX8(.MOREDATA,$G(BPSARRY("NO ECME INSURANCE"))) I BPRETV>0 Q BPRETV
"RTN","BPSNCPD5",177,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSNCPD5",178,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Before submit of claim")
"RTN","BPSNCPD5",179,0)
 S BPSTART=$$STTM^BPSNCPD4()
"RTN","BPSNCPD5",180,0)
 ;if background job
"RTN","BPSNCPD5",181,0)
 I BPJOBFLG="B" D  Q $$RSPCLMS^BPSOSRX8(BPACTTYP,+BPRETV,.MOREDATA)_U_$P(BPRETV,U,2)
"RTN","BPSNCPD5",182,0)
 . ;Update IB data
"RTN","BPSNCPD5",183,0)
 . D UPDINSDT^BPSOSRX7(BPREQIEN,.MOREDATA,IEN59) ;
"RTN","BPSNCPD5",184,0)
 . S BPRETV=$$ACTIVATE^BPSNCPD4(BPREQIEN,"C")
"RTN","BPSNCPD5",185,0)
 ;if foreground job then schedule a CLAIM request
"RTN","BPSNCPD5",186,0)
 ;
"RTN","BPSNCPD5",187,0)
 ; If override flag is set, prompt for override values - TEST ONLY
"RTN","BPSNCPD5",188,0)
 I $$CHECK^BPSTEST D GETOVER^BPSTEST(BRXIEN,BFILL,OLDRESP,BWHERE,"S",BPCOBIND)
"RTN","BPSNCPD5",189,0)
 ;
"RTN","BPSNCPD5",190,0)
 S BPRETV=$$REQST^BPSOSRX("C",BRXIEN,BFILL,.MOREDATA,BPCOBIND,IEN59,$G(BILLNDC))
"RTN","BPSNCPD5",191,0)
 S BPNEWREQ=+$P(BPRETV,U,2)
"RTN","BPSNCPD5",192,0)
 ;if error
"RTN","BPSNCPD5",193,0)
 I +BPRETV=0 D  Q $$RSPCLMS^BPSOSRX8(BPACTTYP,4,.MOREDATA,$P(BPRETV,U,2))
"RTN","BPSNCPD5",194,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Create request error: "_$P(BPRETV,U,2)_". Claim Will Not Be submitted.")
"RTN","BPSNCPD5",195,0)
 ;if ok
"RTN","BPSNCPD5",196,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-BPS REQUEST: "_BPNEWREQ_" has been created")
"RTN","BPSNCPD5",197,0)
 ;activate the scheduled request
"RTN","BPSNCPD5",198,0)
 S BPRETV=$$ACTIVATE^BPSNCPD4(BPNEWREQ,"C")
"RTN","BPSNCPD5",199,0)
 Q $$RSPCLMS^BPSOSRX8(BPACTTYP,+BPRETV,.MOREDATA)_U_BPNEWREQ
"RTN","BPSNCPD5",200,0)
 ;
"RTN","BPSNCPD6")
0^34^B30082238
"RTN","BPSNCPD6",1,0)
BPSNCPD6 ;ALB/SS - Pharmacy API part 6 ;10-JAN-08
"RTN","BPSNCPD6",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8,10,11,20**;JUN 2004;Build 27
"RTN","BPSNCPD6",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSNCPD6",4,0)
 ;
"RTN","BPSNCPD6",5,0)
 ;All of the entry points in this routine except LOOK77 were 
"RTN","BPSNCPD6",6,0)
 ; created from code that was copied from BPSNCPDP because BPSNCPDP 
"RTN","BPSNCPD6",7,0)
 ; was too big.  The variables are newed in BPSNCPDP and returned back
"RTN","BPSNCPD6",8,0)
 ; to BPSNCPDP
"RTN","BPSNCPD6",9,0)
 ;== New Claim 
"RTN","BPSNCPD6",10,0)
NEWCLAIM ;
"RTN","BPSNCPD6",11,0)
 S BPRETV=$$NEWCLM^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,DOS,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,BPCOBIND,BPJOBFLG,IEN59,BPACTTYP,DFN,.BPSTART,$G(BPREQIEN),.BPSELIG,$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPD6",12,0)
 S RESPONSE=+BPRETV
"RTN","BPSNCPD6",13,0)
 ;to make LOG backward compatible
"RTN","BPSNCPD6",14,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-After Submit of Claim.  Return Value: "_$S(RESPONSE=0:1,1:0))
"RTN","BPSNCPD6",15,0)
 S CLMSTAT=$P(BPRETV,U,2)
"RTN","BPSNCPD6",16,0)
 D DISPL^BPSNCPD4(WFLG,BPRETV,$G(BPSELIG))
"RTN","BPSNCPD6",17,0)
 I RESPONSE=0 Q
"RTN","BPSNCPD6",18,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",19,0)
 Q
"RTN","BPSNCPD6",20,0)
 ;
"RTN","BPSNCPD6",21,0)
 ;== Reversals for Payable claims
"RTN","BPSNCPD6",22,0)
 ;(Note: BPSCLOSE parameter of EN^BPSNCPDP can be used in this case)
"RTN","BPSNCPD6",23,0)
RVPAID ;
"RTN","BPSNCPD6",24,0)
 S BPRETV=$$REVERSAL^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,OLDRESP,DOS,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,IEN59,BPCOBIND,BPJOBFLG,BPACTTYP,.BPSTART,$G(BPREQIEN),.BPSCLOSE,$G(BPSRTYPE),.BPSPRDAT)
"RTN","BPSNCPD6",25,0)
 S RESPONSE=+BPRETV
"RTN","BPSNCPD6",26,0)
 ;to make LOG backward compatible
"RTN","BPSNCPD6",27,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-After Submit of Reversal. Return Value: "_$S(RESPONSE=0:1,1:0))
"RTN","BPSNCPD6",28,0)
 S CLMSTAT=$P(BPRETV,U,2)
"RTN","BPSNCPD6",29,0)
 I BWHERE'="EREV" D DISPL^BPSNCPD4(WFLG,BPRETV,$G(BPSELIG))
"RTN","BPSNCPD6",30,0)
 I RESPONSE=0 Q
"RTN","BPSNCPD6",31,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",32,0)
 Q
"RTN","BPSNCPD6",33,0)
 ;
"RTN","BPSNCPD6",34,0)
 ;== Reversals+Resubmits for Payable claims
"RTN","BPSNCPD6",35,0)
RVRSPAID ;
"RTN","BPSNCPD6",36,0)
 S BPRETV=$$REVRESUB^BPSNCPD4(.BP77NEW,BRXIEN,BFILL,DOS,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,BPCOBIND,BPJOBFLG,IEN59,DFN,.BPSTART,$G(BPREQIEN),OLDRESP,.BPSELIG,$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPD6",37,0)
 S RESPONSE=+BPRETV
"RTN","BPSNCPD6",38,0)
 ;if "Reversal only not resubmit" - display a message for the user
"RTN","BPSNCPD6",39,0)
 I RESPONSE=10 D DISPL^BPSNCPD4(WFLG,"10^Claim Will Be Reversed But Will Not Be Resubmitted^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",40,0)
 ;to make LOG backward compatible
"RTN","BPSNCPD6",41,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-After Submit of Reversal. Return Value: "_$S(RESPONSE=0:1,1:0))
"RTN","BPSNCPD6",42,0)
 D DISPL^BPSNCPD4(WFLG,BPRETV,$G(BPSELIG))
"RTN","BPSNCPD6",43,0)
 I RESPONSE=10 S CLMSTAT=$P(BPRETV,U,5) Q
"RTN","BPSNCPD6",44,0)
 S CLMSTAT=$P(BPRETV,U,2)
"RTN","BPSNCPD6",45,0)
 I RESPONSE=0 Q
"RTN","BPSNCPD6",46,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",47,0)
 Q
"RTN","BPSNCPD6",48,0)
 ;
"RTN","BPSNCPD6",49,0)
 ;== Resubmits for Payable claims - DO NOT resubmit
"RTN","BPSNCPD6",50,0)
RSPAID ;
"RTN","BPSNCPD6",51,0)
 S RESPONSE=1
"RTN","BPSNCPD6",52,0)
 ; Message varies depending the the previous response
"RTN","BPSNCPD6",53,0)
 ; Reversal Accepted would not get here so this must be rejected, stranded, or other
"RTN","BPSNCPD6",54,0)
 I OLDRESP["REVERSAL" S CLMSTAT="Can not resubmit a rejected or stranded reversal"
"RTN","BPSNCPD6",55,0)
 E  S CLMSTAT="Previously billed through ECME: "_OLDRESP
"RTN","BPSNCPD6",56,0)
 D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",57,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",58,0)
 Q
"RTN","BPSNCPD6",59,0)
 ;== Reversals for Non-Payable claims - DO NOT reverse
"RTN","BPSNCPD6",60,0)
RVNPAID ;
"RTN","BPSNCPD6",61,0)
 ;if this is return to stock OR delete - close the claim
"RTN","BPSNCPD6",62,0)
 I ",RS,DE,"[(","_BWHERE_",") D  Q
"RTN","BPSNCPD6",63,0)
 . D CLOSE2^BPSBUTL(BRXIEN,BFILL,BWHERE)
"RTN","BPSNCPD6",64,0)
 . S RESPONSE=3
"RTN","BPSNCPD6",65,0)
 . S CLMSTAT="Claim was not payable so it has been closed.  No ECME claim created."
"RTN","BPSNCPD6",66,0)
 . D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",67,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",68,0)
 S RESPONSE=1
"RTN","BPSNCPD6",69,0)
 S CLMSTAT="Claim has status "_OLDRESP_".  Not reversed."
"RTN","BPSNCPD6",70,0)
 D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",71,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",72,0)
 Q
"RTN","BPSNCPD6",73,0)
 ;
"RTN","BPSNCPD6",74,0)
 ;== Resubmits AND Reversals+Resubmits for Non-Payable claims
"RTN","BPSNCPD6",75,0)
 ;==  Also used for Resubmits without Reversals no matter the claim status (BPS*1*20)
"RTN","BPSNCPD6",76,0)
RVRSNPD ;
"RTN","BPSNCPD6",77,0)
 ; resubmit a claim
"RTN","BPSNCPD6",78,0)
 S BPRETV=$$REVRESNP^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,DOS,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,BPCOBIND,BPJOBFLG,IEN59,BPACTTYP,DFN,.BPSTART,$G(BPREQIEN),OLDRESP,.BPSELIG,$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPD6",79,0)
 S RESPONSE=+BPRETV
"RTN","BPSNCPD6",80,0)
 ;to make LOG backward compatible
"RTN","BPSNCPD6",81,0)
 I BWHERE'="ERWV" D LOG^BPSOSL(IEN59,$T(+0)_"-After Submit of Reversal. Return Value: "_$S(RESPONSE=0:1,1:0))
"RTN","BPSNCPD6",82,0)
 I BWHERE="ERWV" D LOG^BPSOSL(IEN59,$T(+0)_"-After Submit of Claim w/o Reversal. Return Value: "_$S(RESPONSE=0:1,1:0))
"RTN","BPSNCPD6",83,0)
 S CLMSTAT=$P(BPRETV,U,2)
"RTN","BPSNCPD6",84,0)
 D DISPL^BPSNCPD4(WFLG,BPRETV,$G(BPSELIG))
"RTN","BPSNCPD6",85,0)
 I RESPONSE=0 Q
"RTN","BPSNCPD6",86,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",87,0)
 Q
"RTN","BPSNCPD6",88,0)
 ;
"RTN","BPSNCPD6",89,0)
 ; if Back Billing
"RTN","BPSNCPD6",90,0)
BB ;
"RTN","BPSNCPD6",91,0)
 S RESPONSE=1
"RTN","BPSNCPD6",92,0)
 S CLMSTAT="Previously billed through ECME: "_OLDRESP
"RTN","BPSNCPD6",93,0)
 D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",94,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",95,0)
 Q
"RTN","BPSNCPD6",96,0)
 ;
"RTN","BPSNCPD6",97,0)
 ; if we do not have a status for pre-existing claim AND this is a reversal request - DO NOT reverse
"RTN","BPSNCPD6",98,0)
RVNEW ;
"RTN","BPSNCPD6",99,0)
 S RESPONSE=1
"RTN","BPSNCPD6",100,0)
 S CLMSTAT="Prescription not previously billed through ECME.  Cannot Reverse claim."
"RTN","BPSNCPD6",101,0)
 D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",102,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",103,0)
 Q
"RTN","BPSNCPD6",104,0)
 ;
"RTN","BPSNCPD6",105,0)
 ; This was meant to called by BPSSCR04 to collect requests for the User Screen that don't have BPS TRANSACTION records 
"RTN","BPSNCPD6",106,0)
 ; However, it is currently not called.  This is still here in case, it is needed in the future.  The call that should
"RTN","BPSNCPD6",107,0)
 ; be used is D LOOK77^BPSNCPD6(BPBDT,BPEDT,BPTMP1)
"RTN","BPSNCPD6",108,0)
LOOK77(BPBEGDT,BPENDDT,BPTMP) ;
"RTN","BPSNCPD6",109,0)
 N BPLDT77,BP77,BP59,BPRXRF
"RTN","BPSNCPD6",110,0)
 S BPLDT77=BPBEGDT-0.00001
"RTN","BPSNCPD6",111,0)
 F  S BPLDT77=+$O(^BPS(9002313.77,"E",BPLDT77)) Q:BPLDT77=0!(BPLDT77>BPENDDT)  D
"RTN","BPSNCPD6",112,0)
 . S BP77=0 F  S BP77=$O(^BPS(9002313.77,"E",BPLDT77,BP77)) Q:+BP77=0  D
"RTN","BPSNCPD6",113,0)
 . . S BPRXRF=$P($G(^BPS(9002313.77,BP77,0)),U,1,2)
"RTN","BPSNCPD6",114,0)
 . . S BP59=$$IEN59^BPSOSRX(+BPRXRF,$P(BPRXRF,U,2)) ;calculate BPS TRANSACTION ien (even if it doesn't exist yet)
"RTN","BPSNCPD6",115,0)
 . . I $D(@BPTMP@(BP59)) Q  ;don't create an entry if the claim is already there
"RTN","BPSNCPD6",116,0)
 . . S @BPTMP@(BP59)=(BPLDT77\1)_"^77-"
"RTN","BPSNCPD6",117,0)
 Q
"RTN","BPSNCPD6",118,0)
 ;
"RTN","BPSNCPDP")
0^22^B97543196
"RTN","BPSNCPDP",1,0)
BPSNCPDP ;BHAM ISC/LJE/SS - API to submit a claim to ECME ;11/7/07  16:58
"RTN","BPSNCPDP",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,4,2,5,6,7,8,10,11,19,20**;JUN 2004;Build 27
"RTN","BPSNCPDP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSNCPDP",4,0)
 ;
"RTN","BPSNCPDP",5,0)
 ; Reference to $$PROD^XUPROD supported by DBIA 4440
"RTN","BPSNCPDP",6,0)
 ; Reference to $$GETNDC^PSSNDCUT supported by DBIA 4707
"RTN","BPSNCPDP",7,0)
 ; Reference to Patient file (#2) supported by DBIA 10035
"RTN","BPSNCPDP",8,0)
 ;
"RTN","BPSNCPDP",9,0)
 ; For comments regarding this API, see routine BPSNCPD3.
"RTN","BPSNCPDP",10,0)
 ;
"RTN","BPSNCPDP",11,0)
EN(BRXIEN,BFILL,DOS,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPCOBIND,BPJOBFLG,BPREQIEN,BPSCLOSE,BPSPLAN,BPSPRDAT,BPSRTYPE,BPSDELAY) ;
"RTN","BPSNCPDP",12,0)
 N BPRETV,CLMSTAT,BRX,RESPONSE,BPSCOB,IEN59,DFN,PNAME,WFLG,BPLCK,BPACTTYP,BPRET,BPSQUIT,SITE
"RTN","BPSNCPDP",13,0)
 N BPNEWCLM,OLDRESP,BPPAYABL,BPSTART,BPRESLT,BPSELIG,BP77NEW,TODAY,BPPREVRQ,BPSSTAT
"RTN","BPSNCPDP",14,0)
 ; test not ecme active
"RTN","BPSNCPDP",15,0)
 I '$$PROD^XUPROD,'$P($G(^BPS(9002313.99,1,0)),"^",3) Q "1^ECME switch is not on for the site"
"RTN","BPSNCPDP",16,0)
 ;== Set default values and other required vars
"RTN","BPSNCPDP",17,0)
 ; default is foreground ("F")
"RTN","BPSNCPDP",18,0)
 S BPJOBFLG=$S($G(BPJOBFLG)="":"F",1:$G(BPJOBFLG))
"RTN","BPSNCPDP",19,0)
 S RESPONSE="",CLMSTAT="",BP77NEW=0
"RTN","BPSNCPDP",20,0)
 S BPLCK=0 ;0 - default for "B" jobs
"RTN","BPSNCPDP",21,0)
 S REVREAS=$G(REVREAS),DURREC=$G(DURREC),BPSCLARF=$G(BPSCLARF),BPSAUTH=$G(BPSAUTH),BPOVRIEN=$G(BPOVRIEN),BPSDELAY=$G(BPSDELAY)
"RTN","BPSNCPDP",22,0)
 ; BPCOBIND will be used as a flag to indicate the following
"RTN","BPSNCPDP",23,0)
 ;    If BPCOBIND>0 then the API is called for the particular COB claim
"RTN","BPSNCPDP",24,0)
 ;    if BPCOBIND=0 then the API is called for a whole RX/RF - Outpatient Pharmacy doesn't care about COB
"RTN","BPSNCPDP",25,0)
 ;         when the pharmacy user enters, deletes or edits RX/refills
"RTN","BPSNCPDP",26,0)
 S BPCOBIND=+$G(BPCOBIND)
"RTN","BPSNCPDP",27,0)
 ;
"RTN","BPSNCPDP",28,0)
 ; BPSCOB variable will be used to store COB value (default is PRIMARY) in this function only
"RTN","BPSNCPDP",29,0)
 S BPSCOB=$S(BPCOBIND>0:BPCOBIND,1:1)
"RTN","BPSNCPDP",30,0)
 ;
"RTN","BPSNCPDP",31,0)
 ; Remove semi-colons from reversal reason BPS*1*20
"RTN","BPSNCPDP",32,0)
 S REVREAS=$TR(REVREAS,";","-")
"RTN","BPSNCPDP",33,0)
 ;
"RTN","BPSNCPDP",34,0)
 ; Default is original fill
"RTN","BPSNCPDP",35,0)
 S BRXIEN=$G(BRXIEN)
"RTN","BPSNCPDP",36,0)
 I '$G(BFILL) S BFILL=0
"RTN","BPSNCPDP",37,0)
 ;
"RTN","BPSNCPDP",38,0)
 ; Get prescription number
"RTN","BPSNCPDP",39,0)
 S BRX=$$RXAPI1^BPSUTIL1(BRXIEN,.01,"I")
"RTN","BPSNCPDP",40,0)
 ;
"RTN","BPSNCPDP",41,0)
 ; Make sure fill date is not in the future or empty
"RTN","BPSNCPDP",42,0)
 S TODAY=$$DT^XLFDT
"RTN","BPSNCPDP",43,0)
 I '$G(DOS)!($G(DOS)>TODAY) S DOS=$$DOSDATE^BPSSCRRS(BRXIEN,BFILL)
"RTN","BPSNCPDP",44,0)
 ;
"RTN","BPSNCPDP",45,0)
 ; Get the NDC if it was not passed in
"RTN","BPSNCPDP",46,0)
 I $G(BILLNDC)="" S BILLNDC=$$GETNDC^PSONDCUT(BRXIEN,BFILL)
"RTN","BPSNCPDP",47,0)
 ;
"RTN","BPSNCPDP",48,0)
 ; Patient Info
"RTN","BPSNCPDP",49,0)
 S DFN=$$RXAPI1^BPSUTIL1(BRXIEN,2,"I"),PNAME=$$GET1^DIQ(2,DFN,.01)
"RTN","BPSNCPDP",50,0)
 ;
"RTN","BPSNCPDP",51,0)
 ; Check parameters and vars
"RTN","BPSNCPDP",52,0)
 S BPRETV=$$CHCKPAR^BPSOSRX8(BRXIEN,BRX,$G(BWHERE),DFN,PNAME) I +BPRETV=0 S CLMSTAT=$P(BPRETV,U,2),RESPONSE=5 G END
"RTN","BPSNCPDP",53,0)
 ;
"RTN","BPSNCPDP",54,0)
 ; Calculate IEN59
"RTN","BPSNCPDP",55,0)
 S IEN59=$$IEN59^BPSOSRX(BRXIEN,BFILL,BPSCOB) I IEN59="" S CLMSTAT="BPS Transaction IEN could not be calculated",RESPONSE=1 G END
"RTN","BPSNCPDP",56,0)
 ;
"RTN","BPSNCPDP",57,0)
 ;populate COB fields from BPS TRANSACTION to resubmit secondary claims from the User Screen
"RTN","BPSNCPDP",58,0)
 ;if $G(BPSPRDAT("NEW COB DATA"))=1 then the resubmit requested from the BPS COB PROCESS SECOND TRICARE and the user can change the data
"RTN","BPSNCPDP",59,0)
 I BPSCOB=2,$$ACTTYPE^BPSOSRX5(BWHERE)="UC",'$G(BPSPRDAT("NEW COB DATA")) N:$D(BPSRTYPE)=0 BPSRTYPE N:$D(BPSPLAN)=0 BPSPLAN N:$D(BPSPRDAT)=0 BPSPRDAT I $$SECDATA^BPSPRRX6(BRXIEN,BFILL,.BPSPLAN,.BPSPRDAT,.BPSRTYPE)=0 D  G END
"RTN","BPSNCPDP",60,0)
 . S CLMSTAT="Insufficient data to resubmit the secondary claim, use Process Secondary/TRICARE Rx to ECME option.",RESPONSE=5
"RTN","BPSNCPDP",61,0)
 ;
"RTN","BPSNCPDP",62,0)
 ; Initialize log
"RTN","BPSNCPDP",63,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Start of claim","DT")
"RTN","BPSNCPDP",64,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Job flag = "_BPJOBFLG_$S(BPJOBFLG="B":" BPS REQUEST ien = "_$G(BPREQIEN),1:""))
"RTN","BPSNCPDP",65,0)
 ;
"RTN","BPSNCPDP",66,0)
 ; Check if we need to print the messages to the screen (WFLG=1 : YES)
"RTN","BPSNCPDP",67,0)
 S WFLG=0
"RTN","BPSNCPDP",68,0)
 S:BPJOBFLG="F" WFLG=$$PRINTSCR^BPSOSRX8(BWHERE)
"RTN","BPSNCPDP",69,0)
 ;
"RTN","BPSNCPDP",70,0)
 ; Lock the Rx and Fill while putting it on the queue to prevent two jobs from being 
"RTN","BPSNCPDP",71,0)
 ;   activated at the same time.  This is only for foreground jobs.
"RTN","BPSNCPDP",72,0)
 ;   Background jobs are called from REQST99^BPSOSRX5 and the RX/RF should be already locked by this point.
"RTN","BPSNCPDP",73,0)
 I BPJOBFLG="F" D  I 'BPLCK G END
"RTN","BPSNCPDP",74,0)
 . S BPLCK=$$LOCKRF^BPSOSRX(BRXIEN,BFILL,10,$G(IEN59),$T(+0))
"RTN","BPSNCPDP",75,0)
 . I 'BPLCK S RESPONSE=4,CLMSTAT="Unable to acquire the lock needed to put the RX and fill on the queue"
"RTN","BPSNCPDP",76,0)
 ;
"RTN","BPSNCPDP",77,0)
 ; Determine the action type
"RTN","BPSNCPDP",78,0)
 ; If foreground job then can be C,U and UC actions types
"RTN","BPSNCPDP",79,0)
 S BPACTTYP=""
"RTN","BPSNCPDP",80,0)
 I BPJOBFLG="F" S BPACTTYP=$$ACTTYPE^BPSOSRX5(BWHERE)
"RTN","BPSNCPDP",81,0)
 ;if background/unqueueing job then only two action types are allowed - C and U
"RTN","BPSNCPDP",82,0)
 I BPJOBFLG="B" D  I RESPONSE=5 G END
"RTN","BPSNCPDP",83,0)
 . S BPACTTYP=$P($G(^BPS(9002313.77,+$G(BPREQIEN),1)),U,4)
"RTN","BPSNCPDP",84,0)
 . I BPACTTYP="" S RESPONSE=5,CLMSTAT="Unknown Action type in BPS REQUEST ien="_BPREQIEN
"RTN","BPSNCPDP",85,0)
 ;
"RTN","BPSNCPDP",86,0)
 ;code to handle "general" submit/reversal as opposed to processing a claim for a specific payer sequence (primary, secondary)
"RTN","BPSNCPDP",87,0)
 ;ECME and IB always know the payer sequence and always should set the proper BPCOBIND parameter
"RTN","BPSNCPDP",88,0)
 ;thus if BPCOBIND=0 then the API is called by Pharmacy. If so then the CLAIM action (not reversal) should be done for primary only.
"RTN","BPSNCPDP",89,0)
 S BPSQUIT=0
"RTN","BPSNCPDP",90,0)
 I BPCOBIND=0 D  I BPSQUIT=1 S CLMSTAT="The secondary claim needs to be reversed first.",RESPONSE=5 G END
"RTN","BPSNCPDP",91,0)
 . I BPACTTYP=""!(BPACTTYP="C") S BPCOBIND=1 Q
"RTN","BPSNCPDP",92,0)
 . ;code to handle "general" reversal
"RTN","BPSNCPDP",93,0)
 . N BPSECLM
"RTN","BPSNCPDP",94,0)
 . ;check if there is the secondary e-claim
"RTN","BPSNCPDP",95,0)
 . S BPSECLM=$$FINDECLM^BPSPRRX5(BRXIEN,BFILL,2)
"RTN","BPSNCPDP",96,0)
 . ;quit if we have secondary claim and it is payable or in progress - it needs to be reversed first
"RTN","BPSNCPDP",97,0)
 . I BPSECLM=1!(BPSECLM=3) S BPSQUIT=1
"RTN","BPSNCPDP",98,0)
 . S BPCOBIND=1
"RTN","BPSNCPDP",99,0)
 ;
"RTN","BPSNCPDP",100,0)
 ;== IF BPJOBFLG="F" THEN determine if there are any scheduled/active/in process requests for the RX/RF 
"RTN","BPSNCPDP",101,0)
 ;CHKREQST^BPSOSRX7 returns
"RTN","BPSNCPDP",102,0)
 ; negative number^message : cannot be accepted for some reason 
"RTN","BPSNCPDP",103,0)
 ; 0 : can be accepted because there are NO requests for this RX/RF, 
"RTN","BPSNCPDP",104,0)
 ;      we will create a new record in BPS REQUEST for it and ACTIVATE it.
"RTN","BPSNCPDP",105,0)
 ; 1 : there are ACTIVATED/IN PROCESS requests already for this RX/RF
"RTN","BPSNCPDP",106,0)
 S BPPREVRQ="-10^Background queuing." ;default
"RTN","BPSNCPDP",107,0)
 I BPJOBFLG="F" D  I BPPREVRQ'=0 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",108,0)
 . S BPPREVRQ=$$CHKREQST^BPSOSRX7(BRXIEN,BFILL,.BPRESLT)
"RTN","BPSNCPDP",109,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-CHKREQ^BPSOSRX7 result: "_BPPREVRQ)
"RTN","BPSNCPDP",110,0)
 . ;if error
"RTN","BPSNCPDP",111,0)
 . I BPPREVRQ<0 S RESPONSE=4,CLMSTAT=$P(BPPREVRQ,U,2) D LOG^BPSOSL(IEN59,$T(+0)_"- - Cannot be accepted because of issues with already scheduled requests")
"RTN","BPSNCPDP",112,0)
 . ;if there are prior requests for the RX/RF in the queue already then schedule additional request(s) 
"RTN","BPSNCPDP",113,0)
 . ;for the future and quit since we do not know the result of prior requests 
"RTN","BPSNCPDP",114,0)
 . I BPPREVRQ>0 D
"RTN","BPSNCPDP",115,0)
 . . D LOG^BPSOSL(IEN59,$T(+0)_"-There are requests in the queue, do not process - schedule additional request(s)")
"RTN","BPSNCPDP",116,0)
 . . I BPACTTYP="U" S BPRET=$$SCHREQ^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,DOS,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,IEN59,BPCOBIND,BPPREVRQ,"U",.BPSCLOSE,$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPDP",117,0)
 . . I BPACTTYP="UC" D
"RTN","BPSNCPDP",118,0)
 . . . S BPRET=$$SCHREQ^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,DOS,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,IEN59,BPCOBIND,BPPREVRQ,"U",.BPSCLOSE,$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPDP",119,0)
 . . . I +BPRET=0 S BPRET=$$SCHREQ^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,DOS,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,IEN59,BPCOBIND,BP77NEW,"C",.BPSCLOSE,$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPDP",120,0)
 . . I BPACTTYP="C" S BPRET=$$SCHREQ^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,DOS,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,IEN59,BPCOBIND,BPPREVRQ,"C",.BPSCLOSE,$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPDP",121,0)
 . . I +BPRET=0 S RESPONSE=0,CLMSTAT=$P(BPRET,U,2) D LOG^BPSOSL(IEN59,$T(+0)_"-The new request(s) scheduled. The last one for the RX/RF now is: "_(BP77NEW)) Q
"RTN","BPSNCPDP",122,0)
 . . I +BPRET>0 S RESPONSE=+BPRET,CLMSTAT=$P(BPRET,U,2) D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot create request(s)")
"RTN","BPSNCPDP",123,0)
 ;
"RTN","BPSNCPDP",124,0)
 ;== So we can continue only if either 
"RTN","BPSNCPDP",125,0)
 ;  BPJOBFLG="B" 
"RTN","BPSNCPDP",126,0)
 ;  or 
"RTN","BPSNCPDP",127,0)
 ;  BPJOBFLG="F" and BPPREVRQ=0
"RTN","BPSNCPDP",128,0)
 ;
"RTN","BPSNCPDP",129,0)
 ; If a new RX/RF - i.e. RX/RF was never processed thru ECME - process and quit
"RTN","BPSNCPDP",130,0)
 S BPNEWCLM=$S(+$G(^BPST(IEN59,0)):0,1:1)
"RTN","BPSNCPDP",131,0)
 ; get pre-existing RX/RFs status
"RTN","BPSNCPDP",132,0)
 S OLDRESP=$P($$STATUS^BPSOSRX(BRXIEN,BFILL,0,,BPSCOB),U,1)
"RTN","BPSNCPDP",133,0)
 ; check if the payer IS going to PAY according the last response
"RTN","BPSNCPDP",134,0)
 S BPPAYABL=$$PAYABLE^BPSOSRX5(OLDRESP)
"RTN","BPSNCPDP",135,0)
 ; set starttime
"RTN","BPSNCPDP",136,0)
 S BPSTART=$$STTM^BPSNCPD4()
"RTN","BPSNCPDP",137,0)
 ;  
"RTN","BPSNCPDP",138,0)
 ; if this is a new RX/RF
"RTN","BPSNCPDP",139,0)
 I BPNEWCLM D NEWCLAIM^BPSNCPD6 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",140,0)
 ;
"RTN","BPSNCPDP",141,0)
 ; if we do not have a status for the previous claim AND this is not a reversal request - treat it as a new claim
"RTN","BPSNCPDP",142,0)
 ; this will be the case when resubmitting a non-billable entry (bps*1*20)
"RTN","BPSNCPDP",143,0)
 I (OLDRESP=""),(BPACTTYP'="U") D NEWCLAIM^BPSNCPD6 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",144,0)
 ;
"RTN","BPSNCPDP",145,0)
 ; if we do not have a status for the pre-existing claim AND this is a reversal request - DO NOT reverse
"RTN","BPSNCPDP",146,0)
 I (OLDRESP=""),(BPACTTYP="U") D RVNEW^BPSNCPD6 G END
"RTN","BPSNCPDP",147,0)
 ;
"RTN","BPSNCPDP",148,0)
 ;== Further below - all claims with some response (i.e. OLDRESP]""=1)
"RTN","BPSNCPDP",149,0)
 ;
"RTN","BPSNCPDP",150,0)
 ; if Back Billing - impossible
"RTN","BPSNCPDP",151,0)
 I BWHERE="BB" D BB^BPSNCPD6 G END
"RTN","BPSNCPDP",152,0)
 ;
"RTN","BPSNCPDP",153,0)
 ; If returning to stock or deleting and the previous claim was not paid, then no reversal is needed
"RTN","BPSNCPDP",154,0)
 ;   so close the prescription and quit
"RTN","BPSNCPDP",155,0)
 ; Note: this is inherited "fuzzy logic" - 
"RTN","BPSNCPDP",156,0)
 ; it checks only two statuses to determine that the claim "was not paid"
"RTN","BPSNCPDP",157,0)
 I OLDRESP'["E PAYABLE",OLDRESP'["E REVERSAL REJECTED",(",RS,DE,"[(","_BWHERE_",")) D  G END
"RTN","BPSNCPDP",158,0)
 . D CLOSE2^BPSBUTL(BRXIEN,BFILL,BWHERE)
"RTN","BPSNCPDP",159,0)
 . S RESPONSE=3
"RTN","BPSNCPDP",160,0)
 . S CLMSTAT="Claim was not payable so it has been closed.  No ECME claim created."
"RTN","BPSNCPDP",161,0)
 . D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPDP",162,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPDP",163,0)
 ;
"RTN","BPSNCPDP",164,0)
 ; Reversals for Payable claims 
"RTN","BPSNCPDP",165,0)
 ; (Note: BPSCLOSE can be used in this case only)
"RTN","BPSNCPDP",166,0)
 I BPPAYABL,BPACTTYP="U" D RVPAID^BPSNCPD6 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",167,0)
 ;
"RTN","BPSNCPDP",168,0)
 ; Resubmits without doing a Reversal - special hidden action on ECME User Screen (BPS*1*20)
"RTN","BPSNCPDP",169,0)
 I BWHERE="ERWV" D RVRSNPD^BPSNCPD6 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",170,0)
 ;
"RTN","BPSNCPDP",171,0)
 ; Reversals+Resubmits for Payable claims
"RTN","BPSNCPDP",172,0)
 I BPPAYABL,BPACTTYP="UC" D RVRSPAID^BPSNCPD6 G STATUS:((RESPONSE=0)!(RESPONSE=10)),END:RESPONSE>0
"RTN","BPSNCPDP",173,0)
 ;
"RTN","BPSNCPDP",174,0)
 ; Resubmits for Payable claims - DO NOT resubmit
"RTN","BPSNCPDP",175,0)
 I BPPAYABL,BPACTTYP="C" D RSPAID^BPSNCPD6 G END
"RTN","BPSNCPDP",176,0)
 ;
"RTN","BPSNCPDP",177,0)
 ; Reversals for Non-Payable claims - DO NOT reverse
"RTN","BPSNCPDP",178,0)
 I 'BPPAYABL,BPACTTYP="U" D RVNPAID^BPSNCPD6 G END
"RTN","BPSNCPDP",179,0)
 ;
"RTN","BPSNCPDP",180,0)
 ; Resubmits AND Reversals+Resubmits for Non-Payable claims
"RTN","BPSNCPDP",181,0)
 I 'BPPAYABL,((BPACTTYP="C")!(BPACTTYP="UC")) D RVRSNPD^BPSNCPD6 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",182,0)
 ;
"RTN","BPSNCPDP",183,0)
 S RESPONSE=5,CLMSTAT="Unknown error"
"RTN","BPSNCPDP",184,0)
 G END
"RTN","BPSNCPDP",185,0)
 ;
"RTN","BPSNCPDP",186,0)
 ;== Display status
"RTN","BPSNCPDP",187,0)
STATUS ;
"RTN","BPSNCPDP",188,0)
 ;if successful scheduling or/and activation of the request then make sure the background job is running
"RTN","BPSNCPDP",189,0)
 I BPJOBFLG="F",BPLCK D UNLCKRF^BPSOSRX(BRXIEN,BFILL,$G(IEN59),$T(+0)) S BPLCK=0 ;to prevent unlocking in END
"RTN","BPSNCPDP",190,0)
 I (RESPONSE=0)!(RESPONSE=10) D LOG^BPSOSL(IEN59,$T(+0)_"-Call RUNNING^BPSOSRX") D RUNNING^BPSOSRX()
"RTN","BPSNCPDP",191,0)
 I WFLG W !!,"Processing ",$S(BPSCOB=1:"Primary claim...",BPSCOB=2:"Secondary claim...",1:"claim with Unknown Payer Sequence...")
"RTN","BPSNCPDP",192,0)
 I BPJOBFLG="F" D
"RTN","BPSNCPDP",193,0)
 . ; If the Write Flag is off and this is TRICARE/CHAMPVA, set Write Flag to 2
"RTN","BPSNCPDP",194,0)
 . ; STATUS^BPSNCPD1 will not display messages but will wait the same amount of time as if it were writing messages
"RTN","BPSNCPDP",195,0)
 . ; This needs to be done so that TRICARE/CHAMPVA claims get a chance to complete before continuing
"RTN","BPSNCPDP",196,0)
 . ; Otherwise, the claim will be IN PROGRESS, which will create the bulletin (code below) and OP/CMOP will 
"RTN","BPSNCPDP",197,0)
 . ;   not process correctly (keep on suspense queue, etc)
"RTN","BPSNCPDP",198,0)
 . I 'WFLG,$G(BPSELIG)="T"!($G(BPSELIG)="C") S WFLG=2
"RTN","BPSNCPDP",199,0)
 . I 'WFLG H 1
"RTN","BPSNCPDP",200,0)
 . E  D STATUS^BPSNCPD1(BRXIEN,BFILL,+$G(BPPAYABL),$S(BPACTTYP="U":1,1:0),BPSTART,BWHERE,$G(BP77NEW),BPSCOB,$G(BPSELIG),IEN59,WFLG)
"RTN","BPSNCPDP",201,0)
 ;
"RTN","BPSNCPDP",202,0)
 ;== Clean up and quit
"RTN","BPSNCPDP",203,0)
END ;
"RTN","BPSNCPDP",204,0)
 ; BPSELIG and other variables are established by inference in BPSNCPD6.
"RTN","BPSNCPDP",205,0)
 I BPJOBFLG="F",BPLCK D UNLCKRF^BPSOSRX(BRXIEN,BFILL,$G(IEN59),$T(+0)) S BPLCK=0
"RTN","BPSNCPDP",206,0)
 ; Get Site in case we send a Bulletin
"RTN","BPSNCPDP",207,0)
 S SITE=$$GETSITE^BPSOSRX8(BRXIEN,BFILL)
"RTN","BPSNCPDP",208,0)
 ;if foreground AND we can't schedule request for any reason AND this is not OP - send bulletin
"RTN","BPSNCPDP",209,0)
 I BPJOBFLG="F",RESPONSE=4,",AREV,BB,ERES,ERWV,ERNB,EREV,P2,P2S,"'[(","_BWHERE_",") D BULL^BPSNCPD1(BRXIEN,BFILL,$G(SITE),$G(DFN),$G(PNAME),"",$G(CLMSTAT),$G(RESPONSE),$G(BPSCOB))
"RTN","BPSNCPDP",210,0)
 I $G(BPSELIG)="" S BPSELIG=""
"RTN","BPSNCPDP",211,0)
 ; Send Bulletin if TRICARE or CHAMPVA is IN PROGRESS and this is not a release process
"RTN","BPSNCPDP",212,0)
 S BPSSTAT=$S($G(BRXIEN):$P($$STATUS^BPSOSRX(BRXIEN,BFILL,,,BPSCOB),U),1:"")
"RTN","BPSNCPDP",213,0)
 I BPSELIG="T"!(BPSELIG="C"),BPSSTAT="IN PROGRESS",$G(REVREAS)'="RX RELEASE-NDC CHANGE",",CRLB,CRLR,CRLX,CRRL,RRL,"'[(","_BWHERE_",") D BULL^BPSNCPD1(BRXIEN,BFILL,SITE,$G(DFN),$G(PNAME),BPSELIG,"","",$G(BPSCOB))
"RTN","BPSNCPDP",214,0)
 ;
"RTN","BPSNCPDP",215,0)
 S:'$D(RESPONSE) RESPONSE=1
"RTN","BPSNCPDP",216,0)
 K MOREDATA
"RTN","BPSNCPDP",217,0)
 I $G(IEN59) D
"RTN","BPSNCPDP",218,0)
 . N MSG
"RTN","BPSNCPDP",219,0)
 . S MSG="Foreground Process Complete-RESPONSE="_$G(RESPONSE)
"RTN","BPSNCPDP",220,0)
 . I $G(RESPONSE)'=0 S MSG=MSG_", CLMSTAT="_$G(CLMSTAT)
"RTN","BPSNCPDP",221,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-"_MSG)
"RTN","BPSNCPDP",222,0)
 Q RESPONSE_U_$G(CLMSTAT)_U_BPSELIG_U_BPSSTAT_U_$$CLMINFO^BPSUTIL2(+$G(IEN59))
"RTN","BPSNCPDP",223,0)
 ;
"RTN","BPSNCPDP",224,0)
 ;BPSNCPDP
"RTN","BPSOPR")
0^49^B53670373
"RTN","BPSOPR",1,0)
BPSOPR ;ALB/PHH - OPECC Productivity Report ;9/21/2015
"RTN","BPSOPR",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**20**;JUN 2004;Build 27
"RTN","BPSOPR",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOPR",4,0)
 ;
"RTN","BPSOPR",5,0)
 Q
"RTN","BPSOPR",6,0)
 ;
"RTN","BPSOPR",7,0)
EN ; Main report entry point
"RTN","BPSOPR",8,0)
 N BPGLTMP,BPNOW,X,BPPHARM,BPELIG,BPUSER,BPBEGDT,BPENDDT,BPSUMDET
"RTN","BPSOPR",9,0)
 N BPSSORD,BPEXCEL
"RTN","BPSOPR",10,0)
 ;
"RTN","BPSOPR",11,0)
 W @IOF,!,"OPECC Productivity Report",!!
"RTN","BPSOPR",12,0)
 ;
"RTN","BPSOPR",13,0)
 S BPGLTMP=$NA(^TMP($J,"BPSOPR"))
"RTN","BPSOPR",14,0)
 ;
"RTN","BPSOPR",15,0)
 ; Get current Date/Time
"RTN","BPSOPR",16,0)
 S BPNOW=$$FMTE^XLFDT($$NOW^XLFDT)
"RTN","BPSOPR",17,0)
 ;
"RTN","BPSOPR",18,0)
 ; Prompt for ECME Pharmacy Division(s)
"RTN","BPSOPR",19,0)
 ; Sets up BPPHARM variable and array where BPPHARM=0 for ALL
"RTN","BPSOPR",20,0)
 ; or BPPHARM=1 and BPPHARM(IEN) = IEN^NAME for list.
"RTN","BPSOPR",21,0)
 S X=$$SELPHARM(.BPPHARM)
"RTN","BPSOPR",22,0)
 I X="^" Q
"RTN","BPSOPR",23,0)
 ;
"RTN","BPSOPR",24,0)
 ; Prompt for Eligibility Type(s)
"RTN","BPSOPR",25,0)
 ; Sets up BPELIG variable and array where BPELIG=0 for ALL
"RTN","BPSOPR",26,0)
 ; or BPELIG=1 and BPELIG(IEN) = IEN^NAME for list.
"RTN","BPSOPR",27,0)
 S X=$$SELELIG(.BPELIG)
"RTN","BPSOPR",28,0)
 I X="^" Q
"RTN","BPSOPR",29,0)
 ;
"RTN","BPSOPR",30,0)
 ; Prompt for ECME User(s)
"RTN","BPSOPR",31,0)
 ; Sets up BPUSER variable and array where BPUSER=0 for ALL
"RTN","BPSOPR",32,0)
 ; or BPUSER=1 and BPUSER(IEN) = IEN^NAME for list.
"RTN","BPSOPR",33,0)
 S X=$$SELUSER(.BPUSER)
"RTN","BPSOPR",34,0)
 I X="^" Q
"RTN","BPSOPR",35,0)
 ;
"RTN","BPSOPR",36,0)
 ; Prompt to select Date Range
"RTN","BPSOPR",37,0)
 ; Returns (Start Date^End Date)
"RTN","BPSOPR",38,0)
 S BPBEGDT=$$SELDATE^BPSRPT3(1)
"RTN","BPSOPR",39,0)
 I BPBEGDT="^" Q
"RTN","BPSOPR",40,0)
 S BPENDDT=$P(BPBEGDT,U,2)
"RTN","BPSOPR",41,0)
 S BPBEGDT=$P(BPBEGDT,U)
"RTN","BPSOPR",42,0)
 ;
"RTN","BPSOPR",43,0)
 ; Prompt to Display Summary or Detail Format (Default to Detail)
"RTN","BPSOPR",44,0)
 ; Set to 1 for Summary, 0 for Detail
"RTN","BPSOPR",45,0)
 S BPSUMDET=$$SELSMDET^BPSRPT3(2)
"RTN","BPSOPR",46,0)
 I BPSUMDET="^" Q
"RTN","BPSOPR",47,0)
 ;
"RTN","BPSOPR",48,0)
 ; Prompt for Sort Order
"RTN","BPSOPR",49,0)
 ; Set to 1 for User Name, 0 for Division
"RTN","BPSOPR",50,0)
 S BPSSORD=$$SELSORT(1)
"RTN","BPSOPR",51,0)
 I BPSSORD="^" Q
"RTN","BPSOPR",52,0)
 ;
"RTN","BPSOPR",53,0)
 ; Prompt for Excel Capture
"RTN","BPSOPR",54,0)
 ; Set to 1 for YES (capture data), 0 for NO (DO NOT capture data)
"RTN","BPSOPR",55,0)
 S BPEXCEL=0
"RTN","BPSOPR",56,0)
 I 'BPSUMDET S BPEXCEL=$$SELEXCEL I BPEXCEL="^" Q
"RTN","BPSOPR",57,0)
 ;
"RTN","BPSOPR",58,0)
 ; Device selection
"RTN","BPSOPR",59,0)
 I '$$DEVICE() Q
"RTN","BPSOPR",60,0)
 ;
"RTN","BPSOPR",61,0)
 Q
"RTN","BPSOPR",62,0)
 ;
"RTN","BPSOPR",63,0)
SELSORT(DFLT) ; Select Sort Order
"RTN","BPSOPR",64,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSOPR",65,0)
 ;
"RTN","BPSOPR",66,0)
 S DFLT=$S($G(DFLT)=1:"User Name",$G(DFLT)=0:"Division",1:"User Name")
"RTN","BPSOPR",67,0)
 S DIR(0)="S^D:Division;U:User Name",DIR("A")="Sort:  (D/U)",DIR("B")=DFLT
"RTN","BPSOPR",68,0)
 ;
"RTN","BPSOPR",69,0)
 W !!,"Enter a code from the list to indicate the sort order."
"RTN","BPSOPR",70,0)
 D ^DIR
"RTN","BPSOPR",71,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSOPR",72,0)
 S Y=$S(Y="U":1,Y="D":0,1:Y)
"RTN","BPSOPR",73,0)
 Q Y
"RTN","BPSOPR",74,0)
 ;
"RTN","BPSOPR",75,0)
SELEXCEL() ; Select whether to capture data for Excel report.
"RTN","BPSOPR",76,0)
 N BPEXCEL,DIR,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","BPSOPR",77,0)
 ;
"RTN","BPSOPR",78,0)
 S BPEXCEL=0
"RTN","BPSOPR",79,0)
 S DIR(0)="Y",DIR("B")="NO",DIR("T")=DTIME W !
"RTN","BPSOPR",80,0)
 S DIR("A")="Do you want to capture report data for an Excel document"
"RTN","BPSOPR",81,0)
 S DIR("?")="^D HEXC^BPSRPT4"
"RTN","BPSOPR",82,0)
 ;
"RTN","BPSOPR",83,0)
 D ^DIR
"RTN","BPSOPR",84,0)
 K DIR
"RTN","BPSOPR",85,0)
 I $D(DIRUT)!$D(DTOUT)!$D(DUOUT)!$D(DIROUT) Q "^"
"RTN","BPSOPR",86,0)
 I Y S BPEXCEL=1
"RTN","BPSOPR",87,0)
 ;
"RTN","BPSOPR",88,0)
 ;Display Excel display message
"RTN","BPSOPR",89,0)
 I BPEXCEL=1 D
"RTN","BPSOPR",90,0)
 .W !!?5,"Before continuing, please set up your terminal to capture the"
"RTN","BPSOPR",91,0)
 .W !?5,"detail report data and save the detail report data in a text file"
"RTN","BPSOPR",92,0)
 .W !?5,"to a local drive. This report may take a while to run."
"RTN","BPSOPR",93,0)
 .W !!?5,"Note: To avoid undesired wrapping of the data saved to the file,"
"RTN","BPSOPR",94,0)
 .W !?5,"      please enter '0;256;99999' at the 'DEVICE:' prompt.",!
"RTN","BPSOPR",95,0)
 ;
"RTN","BPSOPR",96,0)
 Q BPEXCEL
"RTN","BPSOPR",97,0)
 ;
"RTN","BPSOPR",98,0)
DEVICE() ; Device Selection
"RTN","BPSOPR",99,0)
 N ZTRTN,ZTDESC,ZTSAVE,POP,RET,ZTSK,DIR,X,Y
"RTN","BPSOPR",100,0)
 S RET=1
"RTN","BPSOPR",101,0)
 ;
"RTN","BPSOPR",102,0)
 I 'BPEXCEL D
"RTN","BPSOPR",103,0)
 .W !!,"WARNING - THIS REPORT REQUIRES THAT A DEVICE WITH 132 COLUMN WIDTH BE USED."
"RTN","BPSOPR",104,0)
 .W !,"IT WILL NOT DISPLAY CORRECTLY USING 80 COLUMN WIDTH DEVICES",!
"RTN","BPSOPR",105,0)
 ;
"RTN","BPSOPR",106,0)
 S ZTRTN="COMPILE^BPSOPR2"
"RTN","BPSOPR",107,0)
 S ZTDESC="OPECC Productivity Report"
"RTN","BPSOPR",108,0)
 S ZTSAVE("BPGLTMP")=""
"RTN","BPSOPR",109,0)
 S ZTSAVE("BPPHARM")=""
"RTN","BPSOPR",110,0)
 S ZTSAVE("BPELIG")=""
"RTN","BPSOPR",111,0)
 S ZTSAVE("BPUSER")=""
"RTN","BPSOPR",112,0)
 S ZTSAVE("BPBEGDT")=""
"RTN","BPSOPR",113,0)
 S ZTSAVE("BPENDDT")=""
"RTN","BPSOPR",114,0)
 S ZTSAVE("BPSUMDET")=""
"RTN","BPSOPR",115,0)
 S ZTSAVE("BPSSORD")=""
"RTN","BPSOPR",116,0)
 S ZTSAVE("BPEXCEL")=""
"RTN","BPSOPR",117,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE,"QM",1)
"RTN","BPSOPR",118,0)
 I POP S RET=0
"RTN","BPSOPR",119,0)
 I $G(ZTSK) W !!,"Report compilation has started with task# ",ZTSK,".",! S DIR(0)="E" D ^DIR
"RTN","BPSOPR",120,0)
 Q RET
"RTN","BPSOPR",121,0)
 ;
"RTN","BPSOPR",122,0)
SELPHARM(BPPHARM) ; Select Pharmacies
"RTN","BPSOPR",123,0)
 N DIR,BPSFPTR,BPSPTX,X
"RTN","BPSOPR",124,0)
 ;
"RTN","BPSOPR",125,0)
 S DIR(0)="S^D:DIVISION;A:ALL"
"RTN","BPSOPR",126,0)
 S DIR("A")="Select Certain Pharmacy (D)ivisions or (A)LL"
"RTN","BPSOPR",127,0)
 S DIR("B")="A"
"RTN","BPSOPR",128,0)
 S DIR("L",1)="Select one of the following:"
"RTN","BPSOPR",129,0)
 S DIR("L",2)=""
"RTN","BPSOPR",130,0)
 S DIR("L",3)="     D         DIVISION"
"RTN","BPSOPR",131,0)
 S DIR("L",4)="     A         ALL"
"RTN","BPSOPR",132,0)
 S BPSFPTR=9002313.56
"RTN","BPSOPR",133,0)
 S BPSPTX="Select ECME Pharmacy Division(s): "
"RTN","BPSOPR",134,0)
 ;
"RTN","BPSOPR",135,0)
 S X=$$SELMULTI(.DIR,.BPPHARM,BPSFPTR,BPSPTX)
"RTN","BPSOPR",136,0)
 Q X
"RTN","BPSOPR",137,0)
 ;
"RTN","BPSOPR",138,0)
SELELIG(BPELIG) ;Select Eligibility Types
"RTN","BPSOPR",139,0)
 N DIR,X
"RTN","BPSOPR",140,0)
 ;
"RTN","BPSOPR",141,0)
 S DIR(0)="SO^V:VETERAN;T:TRICARE;C:CHAMPVA;A:ALL"
"RTN","BPSOPR",142,0)
 S DIR("A")="Include Certain Eligibility Type or (A)ll"
"RTN","BPSOPR",143,0)
 S DIR("B")="A"
"RTN","BPSOPR",144,0)
 ;
"RTN","BPSOPR",145,0)
 S X=$$SELMULTI(.DIR,.BPELIG)
"RTN","BPSOPR",146,0)
 Q X
"RTN","BPSOPR",147,0)
 ;
"RTN","BPSOPR",148,0)
SELUSER(BPUSER) ; Select Users
"RTN","BPSOPR",149,0)
 N DIR,BPSFPTR,BPSPTX,X
"RTN","BPSOPR",150,0)
 ;
"RTN","BPSOPR",151,0)
 S DIR(0)="S^U:USER;A:ALL"
"RTN","BPSOPR",152,0)
 S DIR("A")="Display ECME (U)ser or (A)LL"
"RTN","BPSOPR",153,0)
 S DIR("B")="A"
"RTN","BPSOPR",154,0)
 S BPSFPTR=200
"RTN","BPSOPR",155,0)
 S BPSPTX="Select ECME User(s): "
"RTN","BPSOPR",156,0)
 ;
"RTN","BPSOPR",157,0)
 S X=$$SELMULTI(.DIR,.BPUSER,BPSFPTR,BPSPTX)
"RTN","BPSOPR",158,0)
 Q X
"RTN","BPSOPR",159,0)
 ;
"RTN","BPSOPR",160,0)
SELMULTI(BPSDIR,BPSVAR,BPSFPTR,BPSPTX) ;
"RTN","BPSOPR",161,0)
 ; Input Variable -> BPSDIR - DIR array
"RTN","BPSOPR",162,0)
 ;                   BPSVAR - Variable array
"RTN","BPSOPR",163,0)
 ;                   BPSFPTR - File pointer (optional)
"RTN","BPSOPR",164,0)
 ;                   BPSPTX - Prompt text for DIC("A") (optional)
"RTN","BPSOPR",165,0)
 ; Return Value ->   "" = Valid Entry or Entries Selected
"RTN","BPSOPR",166,0)
 ;                   ^ = Exit
"RTN","BPSOPR",167,0)
 ;                                       
"RTN","BPSOPR",168,0)
 ; Output Variable -> BPSVAR = 1 One or more items selected
"RTN","BPSOPR",169,0)
 ;                           = 0 User entered 'ALL'
"RTN","BPSOPR",170,0)
 ;                            
"RTN","BPSOPR",171,0)
 ; If BPSVAR = 1 then the BPSVAR array will be defined where:
"RTN","BPSOPR",172,0)
 ;    BPSVAR(ptr) = ptr ^ NAME and
"RTN","BPSOPR",173,0)
 ;    ptr = Internal pointer to file passed in
"RTN","BPSOPR",174,0)
 ;                    
"RTN","BPSOPR",175,0)
 N BPDELFLG,DIR,DIC,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSOPR",176,0)
 ;
"RTN","BPSOPR",177,0)
 S BPSFPTR=$G(BPSFPTR,"")
"RTN","BPSOPR",178,0)
 S BPSPTX=$G(BPSPTX,"")
"RTN","BPSOPR",179,0)
 ;
"RTN","BPSOPR",180,0)
 ;First see if they want to enter individual items or ALL
"RTN","BPSOPR",181,0)
 S BPDELFLG=0   ;Only used for DIR.  Not used for DIC.
"RTN","BPSOPR",182,0)
 M DIR=BPSDIR
"RTN","BPSOPR",183,0)
 D ^DIR
"RTN","BPSOPR",184,0)
 K DIR
"RTN","BPSOPR",185,0)
 ;
"RTN","BPSOPR",186,0)
 ;Check for "^" or timeout, otherwise define BPSVAR
"RTN","BPSOPR",187,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSOPR",188,0)
 E  S BPSVAR=$S(Y="A":0,1:1)
"RTN","BPSOPR",189,0)
 ;
"RTN","BPSOPR",190,0)
 ;If item selected, ask prompt
"RTN","BPSOPR",191,0)
 I $G(BPSVAR)=1 F  D  Q:Y="^"!(Y="") 
"RTN","BPSOPR",192,0)
 .;
"RTN","BPSOPR",193,0)
 .;Prompt for entry
"RTN","BPSOPR",194,0)
 .I BPSFPTR'="" D
"RTN","BPSOPR",195,0)
 ..K X
"RTN","BPSOPR",196,0)
 ..S DIC(0)="QEAM",DIC=BPSFPTR,DIC("A")=BPSPTX
"RTN","BPSOPR",197,0)
 ..W !
"RTN","BPSOPR",198,0)
 ..D ^DIC
"RTN","BPSOPR",199,0)
 .;
"RTN","BPSOPR",200,0)
 .I BPSFPTR="" D
"RTN","BPSOPR",201,0)
 ..I 'BPDELFLG D
"RTN","BPSOPR",202,0)
 ...S BPSVAR(Y)=Y_"^"_Y(0)
"RTN","BPSOPR",203,0)
 ...S BPSVAR("B",Y(0),Y)=""
"RTN","BPSOPR",204,0)
 ..K DIR
"RTN","BPSOPR",205,0)
 ..M DIR=BPSDIR
"RTN","BPSOPR",206,0)
 ..K DIR("B")
"RTN","BPSOPR",207,0)
 ..D ^DIR
"RTN","BPSOPR",208,0)
 .;
"RTN","BPSOPR",209,0)
 .;Check for "^" or timeout
"RTN","BPSOPR",210,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1) K BPSVAR S Y="^" Q
"RTN","BPSOPR",211,0)
 .;
"RTN","BPSOPR",212,0)
 .;Check for blank entry, quit if no previous selections
"RTN","BPSOPR",213,0)
 .I $G(X)="" S Y=$S($D(BPSVAR)>9:"",1:"^") K:Y="^" BPSVAR Q
"RTN","BPSOPR",214,0)
 .;
"RTN","BPSOPR",215,0)
 .;Handle deletes
"RTN","BPSOPR",216,0)
 .I BPSFPTR'="" D
"RTN","BPSOPR",217,0)
 ..I $D(BPSVAR(+Y)) D  Q:Y="^"  I 1
"RTN","BPSOPR",218,0)
 ...N P
"RTN","BPSOPR",219,0)
 ...S P=Y  ;Save Original Value
"RTN","BPSOPR",220,0)
 ...S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_$P(P,U,2)_" from your list?"
"RTN","BPSOPR",221,0)
 ...S DIR("B")="NO" D ^DIR
"RTN","BPSOPR",222,0)
 ...I ($G(DUOUT)=1)!($G(DTOUT)=1) K BPSVAR S Y="^" Q
"RTN","BPSOPR",223,0)
 ...I Y="Y" K BPSVAR(+P),BPSVAR("B",$P(P,U,2),+P)
"RTN","BPSOPR",224,0)
 ...S Y=P  ;Restore Original Value
"RTN","BPSOPR",225,0)
 ...K P
"RTN","BPSOPR",226,0)
 ..E  D
"RTN","BPSOPR",227,0)
 ...;Define new entries in BPSVAR array
"RTN","BPSOPR",228,0)
 ...S BPSVAR(+Y)=Y
"RTN","BPSOPR",229,0)
 ...S BPSVAR("B",$P(Y,U,2),+Y)=""
"RTN","BPSOPR",230,0)
 .;
"RTN","BPSOPR",231,0)
 .I BPSFPTR="" D
"RTN","BPSOPR",232,0)
 ..I $D(BPSVAR(Y)) D  Q:Y="^"  I 1
"RTN","BPSOPR",233,0)
 ...N P
"RTN","BPSOPR",234,0)
 ...S P=Y,P(0)=Y(0)  ;Save Original Value
"RTN","BPSOPR",235,0)
 ...S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_P(0)_" from your list?"
"RTN","BPSOPR",236,0)
 ...S DIR("B")="NO" D ^DIR
"RTN","BPSOPR",237,0)
 ...I ($G(DUOUT)=1)!($G(DTOUT)=1) K BPSVAR S Y="^" Q
"RTN","BPSOPR",238,0)
 ...S BPDELFLG=0
"RTN","BPSOPR",239,0)
 ...I Y="Y" S BPDELFLG=1 K BPSVAR(P),BPSVAR("B",P(0),P)
"RTN","BPSOPR",240,0)
 ...S Y=P,Y(0)=P(0)  ;Restore Original Value
"RTN","BPSOPR",241,0)
 ...K P
"RTN","BPSOPR",242,0)
 ..E  D
"RTN","BPSOPR",243,0)
 ...;Define new entries in BPSVAR array
"RTN","BPSOPR",244,0)
 ...S BPSVAR(Y)=Y_"^"_Y(0)
"RTN","BPSOPR",245,0)
 ...S BPSVAR("B",Y(0),Y)=""
"RTN","BPSOPR",246,0)
 .;
"RTN","BPSOPR",247,0)
 .;Display a list of selected items
"RTN","BPSOPR",248,0)
 .I $D(BPSVAR)>9 D
"RTN","BPSOPR",249,0)
 ..N X
"RTN","BPSOPR",250,0)
 ..W !,?2,"Selected:"
"RTN","BPSOPR",251,0)
 ..S X=""
"RTN","BPSOPR",252,0)
 ..F  S X=$O(BPSVAR("B",X)) Q:X=""  D
"RTN","BPSOPR",253,0)
 ...W !,?10,X
"RTN","BPSOPR",254,0)
 ..K X
"RTN","BPSOPR",255,0)
 ;
"RTN","BPSOPR",256,0)
 K BPSVAR("B")
"RTN","BPSOPR",257,0)
 I $G(BPSVAR)=1,$G(BPSVAR("A"))="A^ALL" K BPSVAR S BPSVAR=0
"RTN","BPSOPR",258,0)
 Q Y
"RTN","BPSOPR",259,0)
 ;
"RTN","BPSOPR2")
0^50^B114125532
"RTN","BPSOPR2",1,0)
BPSOPR2 ;ALB/PHH - OPECC Productivity Report Compiler ;9/21/2015
"RTN","BPSOPR2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**20**;JUN 2004;Build 27
"RTN","BPSOPR2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOPR2",4,0)
 ;
"RTN","BPSOPR2",5,0)
 Q
"RTN","BPSOPR2",6,0)
 ;
"RTN","BPSOPR2",7,0)
COMPILE ; Entry point for the compile to build the scratch global
"RTN","BPSOPR2",8,0)
 ; This may be a background task if the job is queued.
"RTN","BPSOPR2",9,0)
 ;
"RTN","BPSOPR2",10,0)
 D FIND
"RTN","BPSOPR2",11,0)
 D SORT
"RTN","BPSOPR2",12,0)
 D BUILD
"RTN","BPSOPR2",13,0)
 ;
"RTN","BPSOPR2",14,0)
 D PRINT^BPSOPR3                  ; print report
"RTN","BPSOPR2",15,0)
 D ^%ZISC                         ; close the device
"RTN","BPSOPR2",16,0)
 K @BPGLTMP                       ; kill scratch
"RTN","BPSOPR2",17,0)
 I $D(ZTQUEUED) S ZTREQ="@"       ; purge the task
"RTN","BPSOPR2",18,0)
 Q
"RTN","BPSOPR2",19,0)
 ;
"RTN","BPSOPR2",20,0)
BUILD ; Build report
"RTN","BPSOPR2",21,0)
 N BPSSHDR,BPSIDX,S1,S2,BPSRXFC,DATA,BPSDIV,BPSTRDT,BPSUSER,BPSLINE
"RTN","BPSOPR2",22,0)
 ;
"RTN","BPSOPR2",23,0)
 D SUBINIT(.BPSSHDR)
"RTN","BPSOPR2",24,0)
 ;
"RTN","BPSOPR2",25,0)
 S BPSIDX=1
"RTN","BPSOPR2",26,0)
 ;
"RTN","BPSOPR2",27,0)
 ; Export the report to Excel
"RTN","BPSOPR2",28,0)
 I BPEXCEL D
"RTN","BPSOPR2",29,0)
 .; Data is as follows:
"RTN","BPSOPR2",30,0)
 .; DIVISION^USER^CURRENT STATUS^#TRANS IN DT RANGE^#TRANS TOTAL^ELIG^RX#^REF^ECME#^COB^DOS^TRANS DATE^PAID AMT
"RTN","BPSOPR2",31,0)
 .;
"RTN","BPSOPR2",32,0)
 .S S1=""
"RTN","BPSOPR2",33,0)
 .F  S S1=$O(@BPGLTMP@("SORT",S1)) Q:S1=""  D
"RTN","BPSOPR2",34,0)
 ..S S2=0
"RTN","BPSOPR2",35,0)
 ..F  S S2=$O(@BPGLTMP@("SORT",S1,S2)) Q:'S2  D
"RTN","BPSOPR2",36,0)
 ...S BPSRXFC=""
"RTN","BPSOPR2",37,0)
 ...F  S BPSRXFC=$O(@BPGLTMP@("SORT",S1,S2,BPSRXFC)) Q:BPSRXFC=""  D
"RTN","BPSOPR2",38,0)
 ....S DATA=@BPGLTMP@("SORT",S1,S2,BPSRXFC)
"RTN","BPSOPR2",39,0)
 ....S BPSDIV=$P(DATA,U,9),BPSTRDT=$P(DATA,U,11),BPSUSER=$P(DATA,U,10)
"RTN","BPSOPR2",40,0)
 ....S BPSLINE=BPSDIV_"^"
"RTN","BPSOPR2",41,0)
 ....S BPSLINE=BPSLINE_BPSUSER_"^"
"RTN","BPSOPR2",42,0)
 ....S BPSLINE=BPSLINE_$P(DATA,U)_"^"
"RTN","BPSOPR2",43,0)
 ....S BPSLINE=BPSLINE_+$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV,BPSUSER)),"^",13)_"^"
"RTN","BPSOPR2",44,0)
 ....S BPSLINE=BPSLINE_+$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV)),"^")_"^"
"RTN","BPSOPR2",45,0)
 ....S BPSLINE=BPSLINE_$S($P(DATA,U,2)="V":"VET",$P(DATA,U,2)="T":"TRI",$P(DATA,U,2)="C":"CVA",1:"")_"^"
"RTN","BPSOPR2",46,0)
 ....S BPSLINE=BPSLINE_$P(DATA,U,3)_"^"
"RTN","BPSOPR2",47,0)
 ....S BPSLINE=BPSLINE_$P(DATA,U,4)_"^"
"RTN","BPSOPR2",48,0)
 ....S BPSLINE=BPSLINE_$P(DATA,U,7)_"^"
"RTN","BPSOPR2",49,0)
 ....S BPSLINE=BPSLINE_$S($P(DATA,U,8)=1:"P",$P(DATA,U,8)=2:"S",$P(DATA,U,8)=3:"T",1:"")_"^"
"RTN","BPSOPR2",50,0)
 ....S BPSLINE=BPSLINE_$P(DATA,U,5)_"^"
"RTN","BPSOPR2",51,0)
 ....S BPSLINE=BPSLINE_$$DATTIM^BPSRPT1((BPSTRDT\1))_"^"
"RTN","BPSOPR2",52,0)
 ....I $P(DATA,U)'="NON-BILLABLE" D
"RTN","BPSOPR2",53,0)
 .....S BPSLINE=BPSLINE_$S($P(DATA,U,6)="":"0.00",1:$P(DATA,U,6))
"RTN","BPSOPR2",54,0)
 ....S @BPGLTMP@("REPORT",BPSIDX)=BPSLINE,BPSIDX=BPSIDX+1
"RTN","BPSOPR2",55,0)
 ;
"RTN","BPSOPR2",56,0)
 I 'BPEXCEL D
"RTN","BPSOPR2",57,0)
 .S S1=""
"RTN","BPSOPR2",58,0)
 .F  S S1=$O(@BPGLTMP@("SORT",S1)) Q:S1=""  D
"RTN","BPSOPR2",59,0)
 ..S BPSLINE=$S(BPSSORD=1:"USER NAME: "_S1,1:"DIVISION: "_S1)
"RTN","BPSOPR2",60,0)
 ..S @BPGLTMP@("REPORT",BPSIDX)=BPSLINE,BPSIDX=BPSIDX+1
"RTN","BPSOPR2",61,0)
 ..S BPSLINE=""
"RTN","BPSOPR2",62,0)
 ..D ADDCHAR^BPSOPR3(.BPSLINE,"-",129)
"RTN","BPSOPR2",63,0)
 ..S @BPGLTMP@("REPORT",BPSIDX)=BPSLINE,BPSIDX=BPSIDX+1
"RTN","BPSOPR2",64,0)
 ..S S2=0
"RTN","BPSOPR2",65,0)
 ..F  S S2=$O(@BPGLTMP@("SORT",S1,S2)) Q:'S2  D
"RTN","BPSOPR2",66,0)
 ...S BPSRXFC=""
"RTN","BPSOPR2",67,0)
 ...F  S BPSRXFC=$O(@BPGLTMP@("SORT",S1,S2,BPSRXFC)) Q:BPSRXFC=""  D
"RTN","BPSOPR2",68,0)
 ....S DATA=@BPGLTMP@("SORT",S1,S2,BPSRXFC)
"RTN","BPSOPR2",69,0)
 ....S BPSDIV=$P(DATA,U,9),BPSTRDT=$P(DATA,U,11),BPSUSER=$P(DATA,U,10)
"RTN","BPSOPR2",70,0)
 ....;
"RTN","BPSOPR2",71,0)
 ....; Print details
"RTN","BPSOPR2",72,0)
 ....I BPSUMDET=0 D
"RTN","BPSOPR2",73,0)
 .....S BPSLINE=$E(BPSUSER,1,15)
"RTN","BPSOPR2",74,0)
 .....D ADDCHAR^BPSOPR3(.BPSLINE," ",17-$L(BPSLINE))
"RTN","BPSOPR2",75,0)
 .....S BPSLINE=BPSLINE_$E($P(DATA,U),1,19)
"RTN","BPSOPR2",76,0)
 .....D ADDCHAR^BPSOPR3(.BPSLINE," ",37-$L(BPSLINE))
"RTN","BPSOPR2",77,0)
 .....D ADDCHAR^BPSOPR3(.BPSLINE," ",4-$L(+$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV,BPSUSER)),"^",13)))
"RTN","BPSOPR2",78,0)
 .....S BPSLINE=BPSLINE_+$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV,BPSUSER)),"^",13)
"RTN","BPSOPR2",79,0)
 .....D ADDCHAR^BPSOPR3(.BPSLINE," ",6-$L(+$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV)),"^")))
"RTN","BPSOPR2",80,0)
 .....S BPSLINE=BPSLINE_+$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV)),"^")
"RTN","BPSOPR2",81,0)
 .....D ADDCHAR^BPSOPR3(.BPSLINE," ",7)
"RTN","BPSOPR2",82,0)
 .....S BPSLINE=BPSLINE_$S($P(DATA,U,2)="V":"VET",$P(DATA,U,2)="T":"TRI",$P(DATA,U,2)="C":"CVA",1:"   ")
"RTN","BPSOPR2",83,0)
 .....D ADDCHAR^BPSOPR3(.BPSLINE," ",2)
"RTN","BPSOPR2",84,0)
 .....S BPSLINE=BPSLINE_$P(DATA,U,3)
"RTN","BPSOPR2",85,0)
 .....D ADDCHAR^BPSOPR3(.BPSLINE," ",71-$L(BPSLINE))
"RTN","BPSOPR2",86,0)
 .....S BPSLINE=BPSLINE_$P(DATA,U,4)_"/"
"RTN","BPSOPR2",87,0)
 .....S BPSLINE=BPSLINE_$P(DATA,U,7)_"   "
"RTN","BPSOPR2",88,0)
 .....D ADDCHAR^BPSOPR3(.BPSLINE," ",12-$L($P(DATA,U,7)))
"RTN","BPSOPR2",89,0)
 .....S BPSLINE=BPSLINE_$S($P(DATA,U,8)=1:"P",$P(DATA,U,8)=2:"S",$P(DATA,U,8)=3:"T",1:" ")
"RTN","BPSOPR2",90,0)
 .....D ADDCHAR^BPSOPR3(.BPSLINE," ",3)
"RTN","BPSOPR2",91,0)
 .....S BPSLINE=BPSLINE_$P(DATA,U,5)_"   "
"RTN","BPSOPR2",92,0)
 .....D ADDCHAR^BPSOPR3(.BPSLINE," ",9-$L($P(DATA,U,5)))
"RTN","BPSOPR2",93,0)
 .....S BPSLINE=BPSLINE_$$DATTIM^BPSRPT1((BPSTRDT\1))_" "
"RTN","BPSOPR2",94,0)
 .....I $P(DATA,U)'="NON-BILLABLE" D
"RTN","BPSOPR2",95,0)
 ......D ADDCHAR^BPSOPR3(.BPSLINE," ",15-$L($S($P(DATA,U,6)="":"0.00",1:$P(DATA,U,6))))
"RTN","BPSOPR2",96,0)
 ......S BPSLINE=BPSLINE_$S($P(DATA,U,6)="":"0.00",1:$P(DATA,U,6))
"RTN","BPSOPR2",97,0)
 .....S @BPGLTMP@("REPORT",BPSIDX)=BPSLINE,BPSIDX=BPSIDX+1
"RTN","BPSOPR2",98,0)
 ..;
"RTN","BPSOPR2",99,0)
 ..; Print subtotals
"RTN","BPSOPR2",100,0)
 ..D PRTSGHDR(.BPSSHDR,.BPSIDX,S1)
"RTN","BPSOPR2",101,0)
 ..I BPSSORD=0 D PRTSGTOT(.BPSIDX,S1)
"RTN","BPSOPR2",102,0)
 ..I BPSSORD=1 D PRTSGTOT(.BPSIDX,"",S1)
"RTN","BPSOPR2",103,0)
 ..S DATA=""
"RTN","BPSOPR2",104,0)
 ..D ADDCHAR^BPSOPR3(.DATA," ",129)
"RTN","BPSOPR2",105,0)
 ..S @BPGLTMP@("REPORT",BPSIDX)=DATA,BPSIDX=BPSIDX+1
"RTN","BPSOPR2",106,0)
 ..S DATA=""
"RTN","BPSOPR2",107,0)
 ..D ADDCHAR^BPSOPR3(.DATA," ",129)
"RTN","BPSOPR2",108,0)
 ..S @BPGLTMP@("REPORT",BPSIDX)=DATA,BPSIDX=BPSIDX+1
"RTN","BPSOPR2",109,0)
 ..S DATA=""
"RTN","BPSOPR2",110,0)
 ..D ADDCHAR^BPSOPR3(.DATA,"-",129)
"RTN","BPSOPR2",111,0)
 ..S @BPGLTMP@("REPORT",BPSIDX)=DATA,BPSIDX=BPSIDX+1
"RTN","BPSOPR2",112,0)
 .;
"RTN","BPSOPR2",113,0)
 .I '$D(@BPGLTMP@("REPORT"))!(BPSIDX=1) Q
"RTN","BPSOPR2",114,0)
 .S DATA=""
"RTN","BPSOPR2",115,0)
 .D ADDCHAR^BPSOPR3(.DATA,"-",129)
"RTN","BPSOPR2",116,0)
 .I @BPGLTMP@("REPORT",BPSIDX-1)=DATA D
"RTN","BPSOPR2",117,0)
 ..K @BPGLTMP@("REPORT",BPSIDX-1) S BPSIDX=BPSIDX-1
"RTN","BPSOPR2",118,0)
 ..K @BPGLTMP@("REPORT",BPSIDX-1) S BPSIDX=BPSIDX-1
"RTN","BPSOPR2",119,0)
 ..K @BPGLTMP@("REPORT",BPSIDX-1) S BPSIDX=BPSIDX-1
"RTN","BPSOPR2",120,0)
 .;
"RTN","BPSOPR2",121,0)
 .; Print summary
"RTN","BPSOPR2",122,0)
 .D PRTSGHDR(.BPSSHDR,.BPSIDX)
"RTN","BPSOPR2",123,0)
 .D PRTSGTOT(.BPSIDX)
"RTN","BPSOPR2",124,0)
 ;
"RTN","BPSOPR2",125,0)
 I '$D(@BPGLTMP@("REPORT"))!(BPSIDX=1) D
"RTN","BPSOPR2",126,0)
 .S @BPGLTMP@("REPORT",BPSIDX)="No data available for date range."
"RTN","BPSOPR2",127,0)
 Q
"RTN","BPSOPR2",128,0)
 ;
"RTN","BPSOPR2",129,0)
PRTSGTOT(BPSIDX,BPSDIV,BPSUSER) ; Print grand/subtotals
"RTN","BPSOPR2",130,0)
 N X,BPSUSRNM,BPSDIV1
"RTN","BPSOPR2",131,0)
 ;
"RTN","BPSOPR2",132,0)
 Q:BPSIDX=""
"RTN","BPSOPR2",133,0)
 S BPSDIV=$G(BPSDIV,"")
"RTN","BPSOPR2",134,0)
 S BPSUSER=$G(BPSUSER,"")
"RTN","BPSOPR2",135,0)
 ;
"RTN","BPSOPR2",136,0)
 I BPSUSER="",BPUSER=1 D
"RTN","BPSOPR2",137,0)
 .S X=0
"RTN","BPSOPR2",138,0)
 .F  S X=$O(BPUSER(X)) Q:'X  S BPSUSRNM($P(BPUSER(X),U,2))=""
"RTN","BPSOPR2",139,0)
 .;
"RTN","BPSOPR2",140,0)
 .S BPSUSER=""
"RTN","BPSOPR2",141,0)
 .F  S BPSUSER=$O(BPSUSRNM(BPSUSER)) Q:BPSUSER=""  D
"RTN","BPSOPR2",142,0)
 ..D PRTUTOT(.BPSIDX,BPSDIV,BPSUSER)
"RTN","BPSOPR2",143,0)
 ;
"RTN","BPSOPR2",144,0)
 I BPSUSER="",BPUSER=0 D
"RTN","BPSOPR2",145,0)
 .S BPSDIV1=""
"RTN","BPSOPR2",146,0)
 .F  S BPSDIV1=$O(@BPGLTMP@("USRTOT",BPSDIV1)) Q:BPSDIV1=""  D
"RTN","BPSOPR2",147,0)
 ..S BPSUSER=""
"RTN","BPSOPR2",148,0)
 ..F  S BPSUSER=$O(@BPGLTMP@("USRTOT",BPSDIV1,BPSUSER)) Q:BPSUSER=""  D
"RTN","BPSOPR2",149,0)
 ...S BPSUSRNM(BPSUSER)=""
"RTN","BPSOPR2",150,0)
 .;
"RTN","BPSOPR2",151,0)
 .S BPSUSER=""
"RTN","BPSOPR2",152,0)
 .F  S BPSUSER=$O(BPSUSRNM(BPSUSER)) Q:BPSUSER=""  D
"RTN","BPSOPR2",153,0)
 ..D PRTUTOT(.BPSIDX,BPSDIV,BPSUSER)
"RTN","BPSOPR2",154,0)
 ;
"RTN","BPSOPR2",155,0)
 I BPSUSER'="" D
"RTN","BPSOPR2",156,0)
 .D PRTUTOT(.BPSIDX,BPSDIV,BPSUSER)
"RTN","BPSOPR2",157,0)
 Q
"RTN","BPSOPR2",158,0)
 ;
"RTN","BPSOPR2",159,0)
PRTUTOT(BPSIDX,BPSDIV,BPSUSER) ; Print user totals
"RTN","BPSOPR2",160,0)
 N BPSPYNR,BPSPYREJ,BPSTAMT,BPSTTRN,BPSDIV1,BPSLINE
"RTN","BPSOPR2",161,0)
 ;
"RTN","BPSOPR2",162,0)
 Q:BPSIDX=""
"RTN","BPSOPR2",163,0)
 S BPSDIV=$G(BPSDIV,"")
"RTN","BPSOPR2",164,0)
 Q:BPSUSER=""
"RTN","BPSOPR2",165,0)
 ;
"RTN","BPSOPR2",166,0)
 S (BPSPYNR,BPSPYREJ,BPSTAMT,BPSTTRN)=0
"RTN","BPSOPR2",167,0)
 I BPSDIV'="" D
"RTN","BPSOPR2",168,0)
 .S BPSPYNR=+$P($G(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER)),"^",2)
"RTN","BPSOPR2",169,0)
 .S BPSPYREJ=+$P($G(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER)),"^",3)
"RTN","BPSOPR2",170,0)
 .S BPSTAMT=+$P($G(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER)),"^")
"RTN","BPSOPR2",171,0)
 I BPSDIV="" D
"RTN","BPSOPR2",172,0)
 .S BPSDIV1=""
"RTN","BPSOPR2",173,0)
 .F  S BPSDIV1=$O(@BPGLTMP@("USRTOT",BPSDIV1)) Q:BPSDIV1=""  D
"RTN","BPSOPR2",174,0)
 ..Q:'$D(@BPGLTMP@("USRTOT",BPSDIV1,BPSUSER))
"RTN","BPSOPR2",175,0)
 ..S BPSPYNR=BPSPYNR+$P($G(@BPGLTMP@("USRTOT",BPSDIV1,BPSUSER)),"^",2)
"RTN","BPSOPR2",176,0)
 ..S BPSPYREJ=BPSPYREJ+$P($G(@BPGLTMP@("USRTOT",BPSDIV1,BPSUSER)),"^",3)
"RTN","BPSOPR2",177,0)
 ..S BPSTAMT=BPSTAMT+(+$P($G(@BPGLTMP@("USRTOT",BPSDIV1,BPSUSER)),"^"))
"RTN","BPSOPR2",178,0)
 S BPSTTRN=$$TOTTRN(BPSDIV,BPSUSER)
"RTN","BPSOPR2",179,0)
 ;
"RTN","BPSOPR2",180,0)
 S BPSLINE=$E(BPSUSER,1,15)
"RTN","BPSOPR2",181,0)
 D ADDCHAR^BPSOPR3(.BPSLINE," ",17-$L(BPSLINE))
"RTN","BPSOPR2",182,0)
 S BPSLINE=BPSLINE_BPSPYREJ
"RTN","BPSOPR2",183,0)
 D ADDCHAR^BPSOPR3(.BPSLINE," ",41-$L(BPSLINE))
"RTN","BPSOPR2",184,0)
 S BPSLINE=BPSLINE_BPSPYNR
"RTN","BPSOPR2",185,0)
 D ADDCHAR^BPSOPR3(.BPSLINE," ",69-$L(BPSLINE))
"RTN","BPSOPR2",186,0)
 D ADDCHAR^BPSOPR3(.BPSLINE," ",5-$L(BPSTTRN))
"RTN","BPSOPR2",187,0)
 S BPSLINE=BPSLINE_BPSTTRN
"RTN","BPSOPR2",188,0)
 D ADDCHAR^BPSOPR3(.BPSLINE," ",89-$L(BPSLINE))
"RTN","BPSOPR2",189,0)
 S BPSTAMT=$J(BPSTAMT,7,2)
"RTN","BPSOPR2",190,0)
 D ADDCHAR^BPSOPR3(.BPSLINE," ",15-$L(BPSTAMT))
"RTN","BPSOPR2",191,0)
 S BPSLINE=BPSLINE_BPSTAMT
"RTN","BPSOPR2",192,0)
 ;
"RTN","BPSOPR2",193,0)
 I BPSDIV'="",'$D(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER)) Q
"RTN","BPSOPR2",194,0)
 S @BPGLTMP@("REPORT",BPSIDX)=BPSLINE,BPSIDX=BPSIDX+1
"RTN","BPSOPR2",195,0)
 Q
"RTN","BPSOPR2",196,0)
 ;
"RTN","BPSOPR2",197,0)
TOTTRN(BPSDIV,BPSUSER) ; Get total transactions for a user
"RTN","BPSOPR2",198,0)
 N BPSCNT,BPSTRDT,BPSRXFC,BPSDIV1
"RTN","BPSOPR2",199,0)
 ;
"RTN","BPSOPR2",200,0)
 S BPSDIV=$G(BPSDIV,"")
"RTN","BPSOPR2",201,0)
 Q:BPSUSER=""
"RTN","BPSOPR2",202,0)
 ;
"RTN","BPSOPR2",203,0)
 S BPSCNT=0
"RTN","BPSOPR2",204,0)
 I BPSDIV'="" D
"RTN","BPSOPR2",205,0)
 .S BPSRXFC=""
"RTN","BPSOPR2",206,0)
 .F  S BPSRXFC=$O(@BPGLTMP@("DATA",BPSRXFC)) Q:BPSRXFC=""  D
"RTN","BPSOPR2",207,0)
 ..S BPSCNT=BPSCNT+(+$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV,BPSUSER)),"^",13))
"RTN","BPSOPR2",208,0)
 I BPSDIV="" D
"RTN","BPSOPR2",209,0)
 .S BPSRXFC=""
"RTN","BPSOPR2",210,0)
 .F  S BPSRXFC=$O(@BPGLTMP@("DATA",BPSRXFC)) Q:BPSRXFC=""  D
"RTN","BPSOPR2",211,0)
 ..S BPSDIV1=""
"RTN","BPSOPR2",212,0)
 ..F  S BPSDIV1=$O(@BPGLTMP@("DATA",BPSRXFC,BPSDIV1)) Q:BPSDIV1=""  D
"RTN","BPSOPR2",213,0)
 ...Q:'$D(@BPGLTMP@("DATA",BPSRXFC,BPSDIV1,BPSUSER))
"RTN","BPSOPR2",214,0)
 ...S BPSCNT=BPSCNT+(+$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV1,BPSUSER)),"^",13))
"RTN","BPSOPR2",215,0)
 Q BPSCNT
"RTN","BPSOPR2",216,0)
 ;
"RTN","BPSOPR2",217,0)
PRTSGHDR(BPSSHDR,BPSIDX,BPSSGHTX) ; Print subtotals/grand header
"RTN","BPSOPR2",218,0)
 N BPSLINE,BPSCNT
"RTN","BPSOPR2",219,0)
 ;
"RTN","BPSOPR2",220,0)
 S BPSSGHTX=$G(BPSSGHTX,"")
"RTN","BPSOPR2",221,0)
 S BPSSHDR(2)=$S(BPSSGHTX="":"GRAND TOTAL",1:"SUBTOTALS FOR "_BPSSGHTX)
"RTN","BPSOPR2",222,0)
 ;
"RTN","BPSOPR2",223,0)
 F BPSCNT=1:1:4 D
"RTN","BPSOPR2",224,0)
 .S BPSLINE=BPSSHDR(BPSCNT)
"RTN","BPSOPR2",225,0)
 .S @BPGLTMP@("REPORT",BPSIDX)=BPSLINE,BPSIDX=BPSIDX+1
"RTN","BPSOPR2",226,0)
 Q
"RTN","BPSOPR2",227,0)
 ;
"RTN","BPSOPR2",228,0)
SUBINIT(BPSSHDR) ; Set up subtotals header
"RTN","BPSOPR2",229,0)
 S BPSSHDR(1)=""
"RTN","BPSOPR2",230,0)
 S BPSSHDR(3)="                REJECTED AND           NOT REJECTED AND PAYABLE"
"RTN","BPSOPR2",231,0)
 S BPSSHDR(4)="USER            RESOLVED TO PAYABLE    (POSSIBLE BACK-BILL)            TRANS IN DT RANGE     AMOUNT PAID"
"RTN","BPSOPR2",232,0)
 Q
"RTN","BPSOPR2",233,0)
 ;
"RTN","BPSOPR2",234,0)
FIND ; Find records
"RTN","BPSOPR2",235,0)
 N BPLDT57,BP57
"RTN","BPSOPR2",236,0)
 K @BPGLTMP
"RTN","BPSOPR2",237,0)
 ;
"RTN","BPSOPR2",238,0)
 I 'BPEXCEL,'$D(ZTQUEUED) U 0 W !!,"Compiling OPECC Productivity Report.  Please wait ... ",! U IO
"RTN","BPSOPR2",239,0)
 ;
"RTN","BPSOPR2",240,0)
 ; Check Variables
"RTN","BPSOPR2",241,0)
 S:'$G(BPBEGDT) BPBEGDT=0
"RTN","BPSOPR2",242,0)
 S:'$G(BPENDDT) BPENDDT=9999999
"RTN","BPSOPR2",243,0)
 S BPENDDT=BPENDDT+0.9
"RTN","BPSOPR2",244,0)
 ;
"RTN","BPSOPR2",245,0)
 ; Loop through BPS LOG OF TRANSACTIONS file #9002313.57
"RTN","BPSOPR2",246,0)
 S BPLDT57=BPBEGDT-0.00001
"RTN","BPSOPR2",247,0)
 F  S BPLDT57=+$O(^BPSTL("AH",BPLDT57)) Q:BPLDT57=0!(BPLDT57>BPENDDT)  D
"RTN","BPSOPR2",248,0)
 .S BP57=0
"RTN","BPSOPR2",249,0)
 .F  S BP57=$O(^BPSTL("AH",BPLDT57,BP57)) Q:'BP57  D PROCESS^BPSOPR3(BP57)
"RTN","BPSOPR2",250,0)
 Q
"RTN","BPSOPR2",251,0)
 ;
"RTN","BPSOPR2",252,0)
CALCREJ(BPSDIV,BPSUSER,BPRX,BPREF,BPSCOB) ; Calculate reject counts
"RTN","BPSOPR2",253,0)
 ; Returns 1 if reject found, otherwise returns 0
"RTN","BPSOPR2",254,0)
 N BP57,BPSRCNT
"RTN","BPSOPR2",255,0)
 ;
"RTN","BPSOPR2",256,0)
 S (BP57,BPSRCNT)=0
"RTN","BPSOPR2",257,0)
 F  S BP57=$O(^BPSTL("AEC",BPRX,BP57)) Q:'BP57!(BPSRCNT)  D
"RTN","BPSOPR2",258,0)
 .I BPSUSER'=$P($G(^VA(200,+$P($G(^BPSTL(BP57,0)),U,10),0)),U) Q
"RTN","BPSOPR2",259,0)
 .I BPSDIV'=$P($G(^BPS(9002313.56,+$P($G(^BPSTL(BP57,1)),U,7),0)),U) Q
"RTN","BPSOPR2",260,0)
 .I BPREF'=+$P($G(^BPSTL(BP57,1)),U) Q
"RTN","BPSOPR2",261,0)
 .I BPSCOB'=$P($G(^BPSTL(BP57,0)),U,14) Q
"RTN","BPSOPR2",262,0)
 .I $G(^BPSTL(BP57,2))'["Rejected" Q
"RTN","BPSOPR2",263,0)
 .S BPSRCNT=1
"RTN","BPSOPR2",264,0)
 Q BPSRCNT
"RTN","BPSOPR2",265,0)
 ;
"RTN","BPSOPR2",266,0)
ECMENUM(BP57) ; ECME number
"RTN","BPSOPR2",267,0)
 ; Returns ECME number from 9002313.02 as:
"RTN","BPSOPR2",268,0)
 ; 7 or 12 digits of the prescription IEN file 52
"RTN","BPSOPR2",269,0)
 ; or 12 spaces
"RTN","BPSOPR2",270,0)
 N BPST0,PC,PF,BPST4,PR,X
"RTN","BPSOPR2",271,0)
 ;
"RTN","BPSOPR2",272,0)
 S BPST0=$G(^BPSTL(BP57,0)),PC=$P(BPST0,U,4),PF=$P(BPST0,U,9)
"RTN","BPSOPR2",273,0)
 S BPST4=$G(^BPSTL(BP57,4)),PR=$P(BPST4,U,1)
"RTN","BPSOPR2",274,0)
 I PR]"" S PC=PR ;This is a reversal
"RTN","BPSOPR2",275,0)
 I PC=""!(PF="") Q $$FORMAT^BPSSCRU2("",12," ",1)
"RTN","BPSOPR2",276,0)
 S X=$P($G(^BPSC(PC,400,PF,400)),U,2)
"RTN","BPSOPR2",277,0)
 I X="" Q $$FORMAT^BPSSCRU2(X,12," ",1)
"RTN","BPSOPR2",278,0)
 Q $E(X,3,14)
"RTN","BPSOPR2",279,0)
 ;
"RTN","BPSOPR2",280,0)
GETRXFCI(BPSDIV,BPRX,BPREF,BPSCOB) ; Get general RXFC info
"RTN","BPSOPR2",281,0)
 ; Returns: paid amount ^ total transactions ^ IEN of 57 ^ transaction
"RTN","BPSOPR2",282,0)
 ;          type of last matching BP57 found
"RTN","BPSOPR2",283,0)
 ;
"RTN","BPSOPR2",284,0)
 N BPRETVAL,BP57,BPSPAMT,BPSTOTTN,BPSEC,BPSTRTYP
"RTN","BPSOPR2",285,0)
 ;
"RTN","BPSOPR2",286,0)
 S BPRETVAL="0^0^0^",(BP57,BPSPAMT,BPSTOTTN)=0,(BPSEC,BPSTRTYP)=""
"RTN","BPSOPR2",287,0)
 F  S BP57=$O(^BPSTL("AEC",BPRX,BP57)) Q:'BP57  D
"RTN","BPSOPR2",288,0)
 .Q:BPSDIV'=$P($G(^BPS(9002313.56,+$P($G(^BPSTL(BP57,1)),U,7),0)),U)
"RTN","BPSOPR2",289,0)
 .Q:BPREF'=+$P($G(^BPSTL(BP57,1)),U)
"RTN","BPSOPR2",290,0)
 .Q:BPSCOB'=$P($G(^BPSTL(BP57,0)),U,14)
"RTN","BPSOPR2",291,0)
 .Q:$P($G(^BPSTL(BP57,0)),U,15)="E"
"RTN","BPSOPR2",292,0)
 .I '$F(".BB.ERES.ERWV.ERNB.EREV.P2.P2S.","."_$P($G(^BPSTL(BP57,12)),U,1)_".") Q
"RTN","BPSOPR2",293,0)
 .Q:$P($G(^BPSTL(BP57,0)),U,8)=""
"RTN","BPSOPR2",294,0)
 .S BPSEC=$P($G(^BPSTL(BP57,9)),U,4)
"RTN","BPSOPR2",295,0)
 .Q:BPSEC=""
"RTN","BPSOPR2",296,0)
 .I BPELIG=1,'$D(BPELIG(BPSEC)) Q
"RTN","BPSOPR2",297,0)
 .S BPSPAMT=$$TOTAMNT^BPSSCRLG(+$P($G(^BPSTL(BP57,0)),U,5))
"RTN","BPSOPR2",298,0)
 .S BPSTOTTN=BPSTOTTN+1
"RTN","BPSOPR2",299,0)
 .S BPSTRTYP=$P($G(^BPSTL(BP57,0)),U,15)
"RTN","BPSOPR2",300,0)
 .S BPRETVAL=BPSPAMT_"^"_BPSTOTTN_"^"_BP57_"^"_BPSTRTYP
"RTN","BPSOPR2",301,0)
 Q BPRETVAL
"RTN","BPSOPR2",302,0)
 ;
"RTN","BPSOPR2",303,0)
SORT ; Sort report based on divison or user
"RTN","BPSOPR2",304,0)
 N BPSRXFC,BPSDIV,BPSUSER,DATA,S1,S2,S3
"RTN","BPSOPR2",305,0)
 ;
"RTN","BPSOPR2",306,0)
 S BPSRXFC=""
"RTN","BPSOPR2",307,0)
 F  S BPSRXFC=$O(@BPGLTMP@("DATA",BPSRXFC)) Q:BPSRXFC=""  D
"RTN","BPSOPR2",308,0)
 .S BPSDIV=""
"RTN","BPSOPR2",309,0)
 .F  S BPSDIV=$O(@BPGLTMP@("DATA",BPSRXFC,BPSDIV)) Q:BPSDIV=""  D
"RTN","BPSOPR2",310,0)
 ..S BPSUSER=""
"RTN","BPSOPR2",311,0)
 ..F  S BPSUSER=$O(@BPGLTMP@("DATA",BPSRXFC,BPSDIV,BPSUSER)) Q:BPSUSER=""  D
"RTN","BPSOPR2",312,0)
 ...S DATA=@BPGLTMP@("DATA",BPSRXFC,BPSDIV,BPSUSER)
"RTN","BPSOPR2",313,0)
 ...S S1=$S(BPSSORD=1:$P(DATA,"^",10),1:$P(DATA,"^",9))
"RTN","BPSOPR2",314,0)
 ...S S2=$P(DATA,"^",11)
"RTN","BPSOPR2",315,0)
 ...S S3=BPSRXFC
"RTN","BPSOPR2",316,0)
 ...S @BPGLTMP@("SORT",S1,S2,S3)=DATA
"RTN","BPSOPR2",317,0)
 Q
"RTN","BPSOPR2",318,0)
 ;
"RTN","BPSOPR3")
0^51^B63864385
"RTN","BPSOPR3",1,0)
BPSOPR3 ;ALB/PHH - OPECC Productivity Report Print ;9/21/2015
"RTN","BPSOPR3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**20**;JUN 2004;Build 27
"RTN","BPSOPR3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOPR3",4,0)
 ;
"RTN","BPSOPR3",5,0)
 Q
"RTN","BPSOPR3",6,0)
 ;
"RTN","BPSOPR3",7,0)
PRINT ; Entry point for printing the report
"RTN","BPSOPR3",8,0)
 N BPSPG,BPSHDR,BPSIDX,BPSQUIT,DIR,DIRUT,DUOUT,DTOUT
"RTN","BPSOPR3",9,0)
 ;
"RTN","BPSOPR3",10,0)
 S BPSPG=1
"RTN","BPSOPR3",11,0)
 ;
"RTN","BPSOPR3",12,0)
 I 'BPEXCEL D
"RTN","BPSOPR3",13,0)
 .D HDRINIT(.BPSHDR)
"RTN","BPSOPR3",14,0)
 .D HDR(.BPSHDR,BPSPG)
"RTN","BPSOPR3",15,0)
 ;
"RTN","BPSOPR3",16,0)
 ; User chose to export the report to Excel
"RTN","BPSOPR3",17,0)
 I BPEXCEL D
"RTN","BPSOPR3",18,0)
 .W !,"DIVISION^USER^CURRENT STATUS^#TRANS IN DT RANGE^#TRANS TOTAL^ELIG^RX#^REF^ECME#^COB^DOS^TRANS DATE^PAID AMT"
"RTN","BPSOPR3",19,0)
 ;
"RTN","BPSOPR3",20,0)
 S (BPSIDX,BPSQUIT)=0
"RTN","BPSOPR3",21,0)
 F  S BPSIDX=$O(@BPGLTMP@("REPORT",BPSIDX)) Q:'BPSIDX!(BPSQUIT)  D
"RTN","BPSOPR3",22,0)
 .W !,@BPGLTMP@("REPORT",BPSIDX)
"RTN","BPSOPR3",23,0)
 .Q:BPEXCEL
"RTN","BPSOPR3",24,0)
 .I $Y>(IOSL-3) D
"RTN","BPSOPR3",25,0)
 ..I $E(IOST,1,2)="C-" D
"RTN","BPSOPR3",26,0)
 ...W !
"RTN","BPSOPR3",27,0)
 ...S DIR(0)="E"
"RTN","BPSOPR3",28,0)
 ...D ^DIR
"RTN","BPSOPR3",29,0)
 ...K DIR
"RTN","BPSOPR3",30,0)
 ...I $D(DIRUT)!($D(DUOUT)) S BPSQUIT=1 K DIRUT,DTOUT,DUOUT
"RTN","BPSOPR3",31,0)
 ..Q:BPSQUIT
"RTN","BPSOPR3",32,0)
 ..S BPSPG=BPSPG+1
"RTN","BPSOPR3",33,0)
 ..D HDR(.BPSHDR,BPSPG)
"RTN","BPSOPR3",34,0)
 ;
"RTN","BPSOPR3",35,0)
 I 'BPEXCEL W !!?5,"*** End of Report ***"
"RTN","BPSOPR3",36,0)
 W !
"RTN","BPSOPR3",37,0)
 I '$D(ZTQUEUED) U 0 S DIR(0)="E" D ^DIR K DIR U IO
"RTN","BPSOPR3",38,0)
 Q
"RTN","BPSOPR3",39,0)
 ;
"RTN","BPSOPR3",40,0)
HDR(BPSHDR,BPSPG) ; Print header
"RTN","BPSOPR3",41,0)
 N BPSOHDR1,BPSTMP,X
"RTN","BPSOPR3",42,0)
 ;
"RTN","BPSOPR3",43,0)
 S (BPSOHDR1,BPSTMP)=BPSHDR(1)
"RTN","BPSOPR3",44,0)
 D ADDCHAR(.BPSTMP," ",3-$L(BPSPG))
"RTN","BPSOPR3",45,0)
 S BPSTMP=BPSTMP_BPSPG
"RTN","BPSOPR3",46,0)
 S BPSHDR(1)=BPSTMP
"RTN","BPSOPR3",47,0)
 ;
"RTN","BPSOPR3",48,0)
 W @IOF
"RTN","BPSOPR3",49,0)
 F X=1:1:9 W !,BPSHDR(X)
"RTN","BPSOPR3",50,0)
 ;
"RTN","BPSOPR3",51,0)
 S BPSHDR(1)=BPSOHDR1
"RTN","BPSOPR3",52,0)
 Q
"RTN","BPSOPR3",53,0)
 ;
"RTN","BPSOPR3",54,0)
HDRINIT(BPSHDR) ; Setup header
"RTN","BPSOPR3",55,0)
 N BPSRPTNM,BPSDTTM,HDR1,HDR2,X,BPSDIVNM,HDR3,HDR4,BPSUSRNM,HDR6,HDR7
"RTN","BPSOPR3",56,0)
 ;
"RTN","BPSOPR3",57,0)
 S BPSRPTNM="OPECC PRODUCTIVITY "_$S(BPSUMDET=1:"SUMMARY ",1:"DETAIL ")_"REPORT"
"RTN","BPSOPR3",58,0)
 S BPSDTTM=$$HTE^XLFDT($H)
"RTN","BPSOPR3",59,0)
 S HDR1=BPSRPTNM
"RTN","BPSOPR3",60,0)
 D ADDCHAR(.HDR1," ",$S(BPSUMDET=1:53,1:54))
"RTN","BPSOPR3",61,0)
 S HDR1=HDR1_"Print Date: "_BPSDTTM
"RTN","BPSOPR3",62,0)
 D ADDCHAR(.HDR1," ",121-$L(HDR1))
"RTN","BPSOPR3",63,0)
 S HDR1=HDR1_"Page:"
"RTN","BPSOPR3",64,0)
 S BPSHDR(1)=HDR1
"RTN","BPSOPR3",65,0)
 ;
"RTN","BPSOPR3",66,0)
 S HDR2="DIVISION(S): "
"RTN","BPSOPR3",67,0)
 I BPPHARM=0 S HDR2=HDR2_"ALL"
"RTN","BPSOPR3",68,0)
 I BPPHARM=1 D
"RTN","BPSOPR3",69,0)
 .S X=0
"RTN","BPSOPR3",70,0)
 .F  S X=$O(BPPHARM(X)) Q:'X  S BPSDIVNM($P(BPPHARM(X),U,2))=""
"RTN","BPSOPR3",71,0)
 .S X=""
"RTN","BPSOPR3",72,0)
 .F  S X=$O(BPSDIVNM(X)) Q:X=""  D
"RTN","BPSOPR3",73,0)
 ..S HDR2=HDR2_X_", "
"RTN","BPSOPR3",74,0)
 .S HDR2=$E(HDR2,1,$L(HDR2)-2)
"RTN","BPSOPR3",75,0)
 S BPSHDR(2)=$E(HDR2,1,129)
"RTN","BPSOPR3",76,0)
 ;
"RTN","BPSOPR3",77,0)
 S HDR3="ELIGIBILITY: "
"RTN","BPSOPR3",78,0)
 I BPELIG=0 S HDR3=HDR3_"ALL"
"RTN","BPSOPR3",79,0)
 I BPELIG=1 D
"RTN","BPSOPR3",80,0)
 .S X=""
"RTN","BPSOPR3",81,0)
 .F  S X=$O(BPELIG(X)) Q:X=""  D
"RTN","BPSOPR3",82,0)
 ..S HDR3=HDR3_$S(X="V":"VETERAN",X="T":"TRICARE",X="C":"CHAMPVA",1:"")_", "
"RTN","BPSOPR3",83,0)
 .S HDR3=$E(HDR3,1,$L(HDR3)-2)
"RTN","BPSOPR3",84,0)
 S BPSHDR(3)=HDR3
"RTN","BPSOPR3",85,0)
 ;
"RTN","BPSOPR3",86,0)
 S HDR4="USERS: "
"RTN","BPSOPR3",87,0)
 I BPUSER=0 S HDR4=HDR4_"ALL"
"RTN","BPSOPR3",88,0)
 I BPUSER=1 D
"RTN","BPSOPR3",89,0)
 .S X=0
"RTN","BPSOPR3",90,0)
 .F  S X=$O(BPUSER(X)) Q:'X  S BPSUSRNM($P(BPUSER(X),U,2))=""
"RTN","BPSOPR3",91,0)
 .S X=""
"RTN","BPSOPR3",92,0)
 .F  S X=$O(BPSUSRNM(X)) Q:X=""  D
"RTN","BPSOPR3",93,0)
 ..S HDR4=HDR4_X_", "
"RTN","BPSOPR3",94,0)
 .S HDR4=$E(HDR4,1,$L(HDR4)-2)
"RTN","BPSOPR3",95,0)
 S BPSHDR(4)=$E(HDR4,1,129)
"RTN","BPSOPR3",96,0)
 ;
"RTN","BPSOPR3",97,0)
 S BPSHDR(5)="ALL PRESCRIPTIONS BY TRANSACTION DATE: From "_$$FMTE^XLFDT(BPBEGDT,2)_" through "_$$FMTE^XLFDT(BPENDDT\1,2)
"RTN","BPSOPR3",98,0)
 ;
"RTN","BPSOPR3",99,0)
 S HDR6=""
"RTN","BPSOPR3",100,0)
 D ADDCHAR(.HDR6,"=",129)
"RTN","BPSOPR3",101,0)
 S BPSHDR(6)=HDR6
"RTN","BPSOPR3",102,0)
 ;
"RTN","BPSOPR3",103,0)
 S HDR7=""
"RTN","BPSOPR3",104,0)
 D ADDCHAR(.HDR7," ",17)
"RTN","BPSOPR3",105,0)
 S HDR7=HDR7_"CURRENT           # TRANSACTIONS"
"RTN","BPSOPR3",106,0)
 S BPSHDR(7)=HDR7
"RTN","BPSOPR3",107,0)
 ;
"RTN","BPSOPR3",108,0)
 S BPSHDR(8)="USER             STATUS            DT RANGE  TOTAL    ELIG RX#         REF/ECME#       COB    DOS      TRANS DATE       PAID AMT"
"RTN","BPSOPR3",109,0)
 ;
"RTN","BPSOPR3",110,0)
 S BPSHDR(9)=HDR6
"RTN","BPSOPR3",111,0)
 Q
"RTN","BPSOPR3",112,0)
 ;
"RTN","BPSOPR3",113,0)
ADDCHAR(BPSTXSTR,BPSCHAR,BPSCNT) ; Add characters to string
"RTN","BPSOPR3",114,0)
 N X
"RTN","BPSOPR3",115,0)
 Q:BPSCNT<1
"RTN","BPSOPR3",116,0)
 F X=1:1:BPSCNT S BPSTXSTR=BPSTXSTR_BPSCHAR
"RTN","BPSOPR3",117,0)
 Q
"RTN","BPSOPR3",118,0)
 ;
"RTN","BPSOPR3",119,0)
PROCESS(BP57) ; Process each Entry
"RTN","BPSOPR3",120,0)
 N BPSCOB,BPRX,BPREF,BPSRXFC,BPSTRTYP,BPSDIV,BPSTATUS,BPSECME,BPSDOS
"RTN","BPSOPR3",121,0)
 N BPSTRDT,BPSEC,BPSUSER,BPSPAMT,BPSRXFCI,BPSPRVST,BPSPRVAM,BPSPRVUT,BPSRJFND
"RTN","BPSOPR3",122,0)
 ;
"RTN","BPSOPR3",123,0)
 ; Get COB
"RTN","BPSOPR3",124,0)
 S BPSCOB=$S($P($G(^BPSTL(BP57,0)),U,14):$P(^BPSTL(BP57,0),U,14),1:$E($P($P($G(^BPSTL(BP57,0)),U),".",2),5,5))
"RTN","BPSOPR3",125,0)
 ;
"RTN","BPSOPR3",126,0)
 ; Get RX#
"RTN","BPSOPR3",127,0)
 S BPRX=+$P($G(^BPSTL(BP57,1)),U,11)
"RTN","BPSOPR3",128,0)
 ;
"RTN","BPSOPR3",129,0)
 ; Get REF - FILL NUMBER field #9 in 9002313.57
"RTN","BPSOPR3",130,0)
 S BPREF=+$P($G(^BPSTL(BP57,1)),U)
"RTN","BPSOPR3",131,0)
 ;
"RTN","BPSOPR3",132,0)
 ; Unique ID for RX#-Fill#-COB to separate display line/counters
"RTN","BPSOPR3",133,0)
 S BPSRXFC=BPRX_"-"_BPREF_"-"_BPSCOB
"RTN","BPSOPR3",134,0)
 ;
"RTN","BPSOPR3",135,0)
 ; Get Transaction Type
"RTN","BPSOPR3",136,0)
 S BPSTRTYP=$P($G(^BPSTL(BP57,0)),U,15)
"RTN","BPSOPR3",137,0)
 ; Skip eligibility verification transactions
"RTN","BPSOPR3",138,0)
 I BPSTRTYP="E" Q
"RTN","BPSOPR3",139,0)
 ;
"RTN","BPSOPR3",140,0)
 ; Limit report to the following RX ACTION field #1201 values
"RTN","BPSOPR3",141,0)
 I '$F(".BB.ERES.ERWV.ERNB.EREV.P2.P2S.","."_$P($G(^BPSTL(BP57,12)),U,1)_".") Q
"RTN","BPSOPR3",142,0)
 ;
"RTN","BPSOPR3",143,0)
 ; Check for correct BPS Pharmacy (DIVISION)
"RTN","BPSOPR3",144,0)
 S BPSDIV=+$P($G(^BPSTL(BP57,1)),U,7)
"RTN","BPSOPR3",145,0)
 I BPPHARM=1,'$D(BPPHARM(BPSDIV)) Q
"RTN","BPSOPR3",146,0)
 S BPSDIV=$$GET1^DIQ(9002313.56,BPSDIV,.01)
"RTN","BPSOPR3",147,0)
 I BPSDIV="" Q
"RTN","BPSOPR3",148,0)
 ;
"RTN","BPSOPR3",149,0)
 ; Get Status
"RTN","BPSOPR3",150,0)
 S BPSTATUS=$P($P($$STATUS^BPSOSRX(BPRX,BPREF,0,,BPSCOB),U),"E ",2)
"RTN","BPSOPR3",151,0)
 ;
"RTN","BPSOPR3",152,0)
 ; Get ECME
"RTN","BPSOPR3",153,0)
 S BPSECME=$$ECMENUM^BPSOPR2(BP57)
"RTN","BPSOPR3",154,0)
 ;
"RTN","BPSOPR3",155,0)
 ; Get Date of Service
"RTN","BPSOPR3",156,0)
 S BPSDOS=$$DATTIM^BPSRPT1(+$P($G(^BPSTL(BP57,12)),U,2))
"RTN","BPSOPR3",157,0)
 ;
"RTN","BPSOPR3",158,0)
 ; Get Trans Date
"RTN","BPSOPR3",159,0)
 S BPSTRDT=$P($G(^BPSTL(BP57,0)),U,8)
"RTN","BPSOPR3",160,0)
 I BPSTRDT="" Q
"RTN","BPSOPR3",161,0)
 ;
"RTN","BPSOPR3",162,0)
 ; Check for Eligibility Code
"RTN","BPSOPR3",163,0)
 S BPSEC=$P($G(^BPSTL(BP57,9)),U,4)
"RTN","BPSOPR3",164,0)
 I BPSEC="" Q
"RTN","BPSOPR3",165,0)
 I BPELIG=1,'$D(BPELIG(BPSEC)) Q
"RTN","BPSOPR3",166,0)
 ;
"RTN","BPSOPR3",167,0)
 ; Update general RXFC info
"RTN","BPSOPR3",168,0)
 S $P(@BPGLTMP@("DATA",BPSRXFC,BPSDIV),"^")=+$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV)),"^")+1
"RTN","BPSOPR3",169,0)
 I BPSTATUS'="" S $P(@BPGLTMP@("DATA",BPSRXFC,BPSDIV),"^",3)=BPSTATUS
"RTN","BPSOPR3",170,0)
 ;
"RTN","BPSOPR3",171,0)
 ; Get User
"RTN","BPSOPR3",172,0)
 S BPSUSER=+$P($G(^BPSTL(BP57,0)),U,10)
"RTN","BPSOPR3",173,0)
 I BPUSER=1,'$D(BPUSER(BPSUSER)),'$D(@BPGLTMP@("DATA",BPSRXFC,BPSDIV)) Q
"RTN","BPSOPR3",174,0)
 S BPSUSER=$$GET1^DIQ(200,BPSUSER,.01)
"RTN","BPSOPR3",175,0)
 I BPSUSER="" Q
"RTN","BPSOPR3",176,0)
 ;
"RTN","BPSOPR3",177,0)
 ; Get Paid Amount
"RTN","BPSOPR3",178,0)
 S BPSPAMT=$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV)),"^",4),BPSRXFCI=""
"RTN","BPSOPR3",179,0)
 I BPSPAMT="" D
"RTN","BPSOPR3",180,0)
 .S BPSRXFCI=$$GETRXFCI^BPSOPR2(BPSDIV,BPRX,BPREF,BPSCOB)
"RTN","BPSOPR3",181,0)
 .S $P(@BPGLTMP@("DATA",BPSRXFC,BPSDIV),"^",2)=$P(BPSRXFCI,"^",3)
"RTN","BPSOPR3",182,0)
 .S $P(@BPGLTMP@("DATA",BPSRXFC,BPSDIV),"^",4)=$S($P(BPSRXFCI,"^")="":0,1:$P(BPSRXFCI,"^"))
"RTN","BPSOPR3",183,0)
 .S $P(@BPGLTMP@("DATA",BPSRXFC,BPSDIV),"^",6)=$P(BPSRXFCI,"^",2)
"RTN","BPSOPR3",184,0)
 .I $P(BPSRXFCI,"^",4)="N",$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV)),"^",3)="" S $P(@BPGLTMP@("DATA",BPSRXFC,BPSDIV),"^",3)="NON-BILLABLE"
"RTN","BPSOPR3",185,0)
 .S BPSPAMT=$P(BPSRXFCI,"^")
"RTN","BPSOPR3",186,0)
 I BPSPAMT=0 S BPSPAMT=""
"RTN","BPSOPR3",187,0)
 ;
"RTN","BPSOPR3",188,0)
 ; Set variables for Non-Billable entries
"RTN","BPSOPR3",189,0)
 I BPSTATUS="",$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV)),"^",3)="NON-BILLABLE" S BPSTRTYP="N"
"RTN","BPSOPR3",190,0)
 I BPSTRTYP="N" S (BPSECME,BPSDOS,BPSPAMT)="",BPSTATUS="NON-BILLABLE"
"RTN","BPSOPR3",191,0)
 ;
"RTN","BPSOPR3",192,0)
 ; Update RXFC info for specific division/user
"RTN","BPSOPR3",193,0)
 I BPUSER=0!(BPUSER=1&($D(BPUSER(+$P($G(^BPSTL(BP57,0)),U,10))))) D
"RTN","BPSOPR3",194,0)
 .S BPSPRVST=$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV,BPSUSER)),"^")
"RTN","BPSOPR3",195,0)
 .S BPSPRVAM=+$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV,BPSUSER)),"^",6)
"RTN","BPSOPR3",196,0)
 .S BPSPRVUT=+$P($G(@BPGLTMP@("DATA",BPSRXFC,BPSDIV,BPSUSER)),"^",13)+1
"RTN","BPSOPR3",197,0)
 .S @BPGLTMP@("DATA",BPSRXFC,BPSDIV,BPSUSER)=BPSTATUS_"^"_BPSEC_"^"_$$GET1^DIQ(52,BPRX,.01)_"^"_BPREF_"^"_BPSDOS_"^"_BPSPAMT_"^"_BPSECME_"^"_BPSCOB_"^"_BPSDIV_"^"_BPSUSER_"^"_BPSTRDT_"^"_BP57
"RTN","BPSOPR3",198,0)
 .S $P(@BPGLTMP@("DATA",BPSRXFC,BPSDIV,BPSUSER),"^",13)=BPSPRVUT
"RTN","BPSOPR3",199,0)
 .S $P(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER),"^",4)=+$P($G(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER)),"^",4)+1
"RTN","BPSOPR3",200,0)
 .S $P(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER),"^")=+$P($G(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER)),"^")-(+BPSPRVAM)+(+BPSPAMT)
"RTN","BPSOPR3",201,0)
 .;
"RTN","BPSOPR3",202,0)
 .; Update count totals for Rejects found
"RTN","BPSOPR3",203,0)
 .I BPSTATUS["PAYABLE"!(BPSTATUS["NON-BILLABLE") D
"RTN","BPSOPR3",204,0)
 ..S BPSRJFND=$P(@BPGLTMP@("DATA",BPSRXFC,BPSDIV),"^",5)
"RTN","BPSOPR3",205,0)
 ..I BPSRJFND="" D
"RTN","BPSOPR3",206,0)
 ...S BPSRJFND=$$CALCREJ^BPSOPR2(BPSDIV,BPSUSER,BPRX,BPREF,BPSCOB)
"RTN","BPSOPR3",207,0)
 ...S $P(@BPGLTMP@("DATA",BPSRXFC,BPSDIV),"^",5)=BPSRJFND
"RTN","BPSOPR3",208,0)
 ..I BPSTATUS["PAYABLE" D
"RTN","BPSOPR3",209,0)
 ...Q:BPSPRVST["PAYABLE"
"RTN","BPSOPR3",210,0)
 ...I BPSRJFND D  Q
"RTN","BPSOPR3",211,0)
 ....S $P(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER),"^",3)=+($P(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER),"^",3))+1
"RTN","BPSOPR3",212,0)
 ...S $P(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER),"^",2)=+($P(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER),"^",2))+1
"RTN","BPSOPR3",213,0)
 ..I BPSTATUS["NON-BILLABLE",BPSPRVST["PAYABLE" D
"RTN","BPSOPR3",214,0)
 ...I BPSRJFND D  Q
"RTN","BPSOPR3",215,0)
 ....S $P(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER),"^",3)=+($P(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER),"^",3))-1
"RTN","BPSOPR3",216,0)
 ...S $P(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER),"^",2)=+($P(@BPGLTMP@("USRTOT",BPSDIV,BPSUSER),"^",2))-1
"RTN","BPSOPR3",217,0)
 Q
"RTN","BPSOPR3",218,0)
 ;
"RTN","BPSOS03")
0^37^B15562725
"RTN","BPSOS03",1,0)
BPSOS03 ;BHAM ISC/FCS/DRS - 9002313.03 utilities ;06/01/2004
"RTN","BPSOS03",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,10,20**;JUN 2004;Build 27
"RTN","BPSOS03",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOS03",4,0)
 ;
"RTN","BPSOS03",5,0)
 Q
"RTN","BPSOS03",6,0)
 ; General utilities for retrieval from 9002313.03, Claim Response
"RTN","BPSOS03",7,0)
 ; $$INSPAID is used by BPSOSQL
"RTN","BPSOS03",8,0)
INSPAID(N) ;EP - from BPSOSQL -  total amount paid by insurer
"RTN","BPSOS03",9,0)
 N RX,TOT,X S (TOT,RX)=0
"RTN","BPSOS03",10,0)
 F  S RX=$O(^BPSR(N,1000,RX)) Q:'RX  D
"RTN","BPSOS03",11,0)
 . ; Try Gross Amount Due, and if that's zero, Usual and Customary
"RTN","BPSOS03",12,0)
 . S X=$$INSPAID1(N,RX)
"RTN","BPSOS03",13,0)
 . S TOT=TOT+X
"RTN","BPSOS03",14,0)
 Q TOT
"RTN","BPSOS03",15,0)
INSPAID1(N,RX) ;EP -
"RTN","BPSOS03",16,0)
 N X S X=$$509(N,RX) Q X
"RTN","BPSOS03",17,0)
NETPAID1(N,RX) ; EP - computed field in 9002313.57 and 9002313.59
"RTN","BPSOS03",18,0)
 N X S X=$$509(N,RX) ; X = (#509) Total Amount Paid
"RTN","BPSOS03",19,0)
 N SUB S SUB=1 ; Do we need to subtract (#505) Patient Pay Amount?
"RTN","BPSOS03",20,0)
 N IEN02,INS,FMT S IEN02=$P(^BPSR(RESP,0),U)
"RTN","BPSOS03",21,0)
 I IEN02 D
"RTN","BPSOS03",22,0)
 . S INS=$P($G(^BPSC(IEN02,0)),U,2) Q:'INS    ;IHS/SD/lwj 9/11/02
"RTN","BPSOS03",23,0)
 . S FMT=INS
"RTN","BPSOS03",24,0)
 . N X S X=$P(^BPSF(9002313.92,FMT,1),U,10)
"RTN","BPSOS03",25,0)
 . I X S SUB=0 ; Total paid means total paid by insurance
"RTN","BPSOS03",26,0)
 I SUB S X=X-$$505(N,RX)
"RTN","BPSOS03",27,0)
 I X<0,SUB D  ; apparently this format is supposed to be excl.
"RTN","BPSOS03",28,0)
 . Q:'$G(FMT)
"RTN","BPSOS03",29,0)
 . S $P(^BPSF(9002313.92,FMT,1),U,10)=1
"RTN","BPSOS03",30,0)
 . S X=X+$$505(N,RX) ;*1.26*1*
"RTN","BPSOS03",31,0)
 Q X
"RTN","BPSOS03",32,0)
REJTEXT(RESP,POS,ARR) ; EP - fills array (passed by ref)
"RTN","BPSOS03",33,0)
 K ARR
"RTN","BPSOS03",34,0)
 N A,I,X,R S (A,I)=0
"RTN","BPSOS03",35,0)
 F  S A=$O(^BPSR(RESP,1000,POS,511,A)) Q:'A  D
"RTN","BPSOS03",36,0)
 . S R=$P(^BPSR(RESP,1000,POS,511,A,0),U)
"RTN","BPSOS03",37,0)
 . Q:R=""
"RTN","BPSOS03",38,0)
 . N S S S=$O(^BPSF(9002313.93,"B",R,0))
"RTN","BPSOS03",39,0)
 . I S S X=$TR($G(^BPSF(9002313.93,S,0)),U,":")
"RTN","BPSOS03",40,0)
 . E  S X=R_" unrecognized reject code"
"RTN","BPSOS03",41,0)
 . S I=I+1,ARR(I)=X
"RTN","BPSOS03",42,0)
 Q
"RTN","BPSOS03",43,0)
MESSAGE(RESP,POS,N) ; EP - get additional message from response
"RTN","BPSOS03",44,0)
 I '$G(RESP) Q ""
"RTN","BPSOS03",45,0)
 I '$G(POS) S POS=1
"RTN","BPSOS03",46,0)
 I $G(N)=1 Q $P($G(^BPSR(RESP,504)),U)
"RTN","BPSOS03",47,0)
 I $G(N)=2 N MSG S MSG="" D  Q MSG
"RTN","BPSOS03",48,0)
 . N ADDMESS,N
"RTN","BPSOS03",49,0)
 . D ADDMESS^BPSSCRLG(RESP,POS,.ADDMESS)
"RTN","BPSOS03",50,0)
 . S N="" F  S N=$O(ADDMESS(N)) Q:'N  S MSG=MSG_$S(N=1:"",1:"~")_ADDMESS(N)
"RTN","BPSOS03",51,0)
 Q $$MESSAGE(RESP,POS,1)_$$MESSAGE(RESP,POS,2)
"RTN","BPSOS03",52,0)
 ;
"RTN","BPSOS03",53,0)
DFF2EXT(X) Q $$DFF2EXT^BPSECFM(X)
"RTN","BPSOS03",54,0)
505(M,N) Q $$500(M,N,5) ; Patient Pay Amount
"RTN","BPSOS03",55,0)
506(M,N) Q $$500(M,N,6) ; Ingredient Cost Paid
"RTN","BPSOS03",56,0)
507(M,N) Q $$500(M,N,7) ; Dispensing Fee Paid
"RTN","BPSOS03",57,0)
508(M,N) Q $$500(M,N,8) ; Sales Tax Paid
"RTN","BPSOS03",58,0)
509(M,N) Q $$500(M,N,9) ; Total Amount Paid
"RTN","BPSOS03",59,0)
512(M,N) Q $$500(M,N,12) ; Accumulated Deductible Amount
"RTN","BPSOS03",60,0)
513(M,N) Q $$500(M,N,13) ; Remaining Deductible Amount
"RTN","BPSOS03",61,0)
514(M,N) Q $$500(M,N,14) ; Remaining Benefit Amount
"RTN","BPSOS03",62,0)
517(M,N) Q $$500(M,N,17) ; Amt Applied to Periodic Deduct
"RTN","BPSOS03",63,0)
518(M,N) Q $$500(M,N,18) ; Amount of Copay/CoInsurance
"RTN","BPSOS03",64,0)
519(M,N) Q $$500(M,N,19) ; Amt Attrib to Prod Selection
"RTN","BPSOS03",65,0)
520(M,N) Q $$500(M,N,20) ; Amt Exceed Per Benefit Max
"RTN","BPSOS03",66,0)
521(M,N) Q $$500(M,N,21) ; Incentive Fee Paid
"RTN","BPSOS03",67,0)
523(M,N) Q $$500(M,N,23) ; Amount Attributed to Sales Tax
"RTN","BPSOS03",68,0)
500(M,N,J) ; field #500+J signed numeric
"RTN","BPSOS03",69,0)
 Q:'M!'N ""
"RTN","BPSOS03",70,0)
 N X S X=$P($G(^BPSR(M,1000,N,500)),U,J)
"RTN","BPSOS03",71,0)
 I $E(X,1,2)?2U S X=$E(X,3,$L(X))
"RTN","BPSOS03",72,0)
 S X=$$DFF2EXT(X)
"RTN","BPSOS03",73,0)
 Q X
"RTN","BPSOS03",74,0)
 ;
"RTN","BPSOS03",75,0)
RESPONSE(BPSRX,BPSFILL,BPSCOB) ; Pull fields from response.
"RTN","BPSOS03",76,0)
 ; MRD;BPS*1.0*20 - Created this API to display additional information
"RTN","BPSOS03",77,0)
 ; to the user when an RRR is successfully resubmitted.
"RTN","BPSOS03",78,0)
 ; Input: (r) BPSRX   - Rx IEN (#52)
"RTN","BPSOS03",79,0)
 ;        (o) BPSFILL - Refill#
"RTN","BPSOS03",80,0)
 ;        (o) BPSCOB  - Payer Sequence
"RTN","BPSOS03",81,0)
 ; Output: [1] Total Amount Paid, file# 9002313.0301, field #509
"RTN","BPSOS03",82,0)
 ;         [2] Ingredient Cost Paid, field #506
"RTN","BPSOS03",83,0)
 ;         [3] Amount of Copay/Coinsurance, field #518
"RTN","BPSOS03",84,0)
 ;         [4] Dispensing Fee Paid, field #507
"RTN","BPSOS03",85,0)
 ;         [5] Amount Applied to Periodic Deductible, field #517
"RTN","BPSOS03",86,0)
 ;         [6] Remaining Deductible Amount, field #513
"RTN","BPSOS03",87,0)
 ;
"RTN","BPSOS03",88,0)
 N BPSPOS,BPSRESP,BPSTRAN,BPSX
"RTN","BPSOS03",89,0)
 ;
"RTN","BPSOS03",90,0)
 I '$G(BPSRX) Q ""             ; If no Rx passed in, Quit with "".
"RTN","BPSOS03",91,0)
 I $G(BPSFILL)="" S BPSFILL=0  ; Default Fill to 0 if none.
"RTN","BPSOS03",92,0)
 I '$G(BPSCOB) S BPSCOB=1      ; Default COB to 1/primary if none.
"RTN","BPSOS03",93,0)
 ;
"RTN","BPSOS03",94,0)
 ; Use $$CLAIM^BPSBUTL to determine the BPS Transaction and BPS Response
"RTN","BPSOS03",95,0)
 ; based on the Rx, Fill, COB.
"RTN","BPSOS03",96,0)
 ;
"RTN","BPSOS03",97,0)
 S BPSX=$$CLAIM^BPSBUTL(BPSRX,BPSFILL,BPSCOB)
"RTN","BPSOS03",98,0)
 S BPSTRAN=$P(BPSX,U,1)  ; BPS Transaction.
"RTN","BPSOS03",99,0)
 S BPSRESP=$P(BPSX,U,3)  ; BPS Response.
"RTN","BPSOS03",100,0)
 I BPSTRAN=""!(BPSRESP="") Q ""
"RTN","BPSOS03",101,0)
 ;
"RTN","BPSOS03",102,0)
 ; Pull the field Position in Claim from the BPS Transaction file.
"RTN","BPSOS03",103,0)
 ;
"RTN","BPSOS03",104,0)
 S BPSPOS=$$GET1^DIQ(9002313.59,BPSTRAN,14)
"RTN","BPSOS03",105,0)
 I '$G(BPSPOS) S BPSPOS=1
"RTN","BPSOS03",106,0)
 ;
"RTN","BPSOS03",107,0)
 S BPSX=$$509(BPSRESP,BPSPOS)_"^"_$$506(BPSRESP,BPSPOS)
"RTN","BPSOS03",108,0)
 S BPSX=BPSX_"^"_$$518(BPSRESP,BPSPOS)_"^"_$$507(BPSRESP,BPSPOS)
"RTN","BPSOS03",109,0)
 S BPSX=BPSX_"^"_$$517(BPSRESP,BPSPOS)_"^"_$$513(BPSRESP,BPSPOS)
"RTN","BPSOS03",110,0)
 ;
"RTN","BPSOS03",111,0)
 Q BPSX
"RTN","BPSOS03",112,0)
 ;
"RTN","BPSOSCD")
0^47^B104057958
"RTN","BPSOSCD",1,0)
BPSOSCD ;BHAM ISC/FCS/DRS/DLF - Set BPS() "RX" nodes for current medication ;06/01/2004
"RTN","BPSOSCD",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2,5,7,8,10,11,15,19,20**;JUN 2004;Build 27
"RTN","BPSOSCD",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSCD",4,0)
 ;
"RTN","BPSOSCD",5,0)
 ; reference to $$ACPHONE^IBNCPDPI supported by DBIA 4721
"RTN","BPSOSCD",6,0)
 ; reference to $$MADD^XUAF4 supported by DBIA 2171
"RTN","BPSOSCD",7,0)
 ; reference to $$GET1^DIQ(200,field) supported by DBIA 10060
"RTN","BPSOSCD",8,0)
 ; reference to $$GET1^DIQ(5,field) supported by DBIA 10056
"RTN","BPSOSCD",9,0)
 ; reference to PSS^PSO59 supported by DBIA 4827
"RTN","BPSOSCD",10,0)
 ; reference to $$SITE^VASITE supported by DBIA 10112
"RTN","BPSOSCD",11,0)
 ;
"RTN","BPSOSCD",12,0)
 Q
"RTN","BPSOSCD",13,0)
 ;
"RTN","BPSOSCD",14,0)
 ;MEDINFO, Set BPS("RX)" nodes for current medication
"RTN","BPSOSCD",15,0)
 ; Called from BPSOSCA for every transaction in the multiple
"RTN","BPSOSCD",16,0)
 ; IEN59 = IEN in BPS TRANSACTION (#9002313.59)
"RTN","BPSOSCD",17,0)
 ; IEN5902 = IEN for Insurance multiple of BPS Transactions
"RTN","BPSOSCD",18,0)
 ; MEDN = Index number of medication being processed
"RTN","BPSOSCD",19,0)
 ; BPS array shared by all of the BPSOSC* routines, created in BPSOSCA
"RTN","BPSOSCD",20,0)
 ; VAINFO created in BPSOSCB
"RTN","BPSOSCD",21,0)
MEDINFO(IEN59,IEN5902,MEDN) ;
"RTN","BPSOSCD",22,0)
 ; Verify Parameters
"RTN","BPSOSCD",23,0)
 I $G(IEN59)="" Q
"RTN","BPSOSCD",24,0)
 I $G(IEN5902)="" Q
"RTN","BPSOSCD",25,0)
 I $G(MEDN)="" Q
"RTN","BPSOSCD",26,0)
 ;
"RTN","BPSOSCD",27,0)
 N %,BPS0,DRUGIEN,IENS,J,NDC,NPI,OSITEIEN,PRICING,PROVIEN,RTN,RXI,RXIEN,RXRFIEN,VANATURE,VAOIEN,X,ADFEE
"RTN","BPSOSCD",28,0)
 ;
"RTN","BPSOSCD",29,0)
 ;RXIEN=Rx IEN, RXRFIEN=Fill Number, IENS=FileMan style IENS
"RTN","BPSOSCD",30,0)
 S BPS0=$G(^BPST(IEN59,1)),RXIEN=$P(BPS0,U,11),RXRFIEN=$P(BPS0,U,1),IENS=IEN5902_","_IEN59_","
"RTN","BPSOSCD",31,0)
 ;
"RTN","BPSOSCD",32,0)
 S RTN=$T(+0)  ; for log
"RTN","BPSOSCD",33,0)
 ; Get any user-entered overrides stored in BPS NCPDP OVERRIDES
"RTN","BPSOSCD",34,0)
 D OVERRIDE(IEN59,MEDN)
"RTN","BPSOSCD",35,0)
 ;
"RTN","BPSOSCD",36,0)
 ; Retrieve DUR values
"RTN","BPSOSCD",37,0)
 D DURVALUE(IEN59,MEDN)
"RTN","BPSOSCD",38,0)
 ;
"RTN","BPSOSCD",39,0)
 ; Build COB array for secondary claims
"RTN","BPSOSCD",40,0)
 I $$COB59^BPSUTIL2(IEN59)>1 D COB(IEN59,MEDN)
"RTN","BPSOSCD",41,0)
 ;
"RTN","BPSOSCD",42,0)
 ; Basic RX info
"RTN","BPSOSCD",43,0)
 S BPS("RX",MEDN,"IEN59")=IEN59
"RTN","BPSOSCD",44,0)
 S BPS("RX",MEDN,"RX IEN")=RXIEN
"RTN","BPSOSCD",45,0)
 S BPS("RX",MEDN,"RX Number")=RXIEN
"RTN","BPSOSCD",46,0)
 ;
"RTN","BPSOSCD",47,0)
 ; Stop if the transaction code is "E1" and there is no Prescription IEN
"RTN","BPSOSCD",48,0)
 I BPS("Transaction Code")="E1",RXIEN="" Q
"RTN","BPSOSCD",49,0)
 ;
"RTN","BPSOSCD",50,0)
 ; Get Provider Info
"RTN","BPSOSCD",51,0)
 S PROVIEN=+$$RXAPI1^BPSUTIL1(RXIEN,4,"I")
"RTN","BPSOSCD",52,0)
 S BPS("RX",MEDN,"Prescriber IEN")=PROVIEN
"RTN","BPSOSCD",53,0)
 I PROVIEN'="" D
"RTN","BPSOSCD",54,0)
 .S X=$$GET1^DIQ(200,PROVIEN,.01)
"RTN","BPSOSCD",55,0)
 .D NAMECOMP^XLFNAME(.X)
"RTN","BPSOSCD",56,0)
 .S BPS("RX",MEDN,"Prescriber Last Name")=X("FAMILY")
"RTN","BPSOSCD",57,0)
 .S BPS("RX",MEDN,"Prescriber First Name")=X("GIVEN")  ; NCPDP field 364-2J
"RTN","BPSOSCD",58,0)
 .S BPS("RX",MEDN,"Prescriber Phone #")=$$ACPHONE^IBNCPDPI ; DBIA 4721, Agent Cashier Phone Number
"RTN","BPSOSCD",59,0)
 .S BPS("RX",MEDN,"Prescriber Billing Location")=""
"RTN","BPSOSCD",60,0)
 .S NPI=$$NPI^BPSNPI("Individual_ID",+PROVIEN)
"RTN","BPSOSCD",61,0)
 .I NPI<0 S NPI=""
"RTN","BPSOSCD",62,0)
 .S BPS("RX",MEDN,"Prescriber NPI")=$P(NPI,U)
"RTN","BPSOSCD",63,0)
 .S BPS("RX",MEDN,"Primary Care Provider NPI")=$P(NPI,U)
"RTN","BPSOSCD",64,0)
 .S BPS("RX",MEDN,"Provider NPI")=$P(NPI,U)
"RTN","BPSOSCD",65,0)
 .;
"RTN","BPSOSCD",66,0)
 .S X=$$PRVADRS(IEN59,PROVIEN)  ; provide address info
"RTN","BPSOSCD",67,0)
 .S BPS("RX",MEDN,"Prescriber Street Address")=$P(X,U)_$S($P(X,U,5)]"":" ",1:"")_$P(X,U,5)  ; NCPDP field 365-2K
"RTN","BPSOSCD",68,0)
 .S BPS("RX",MEDN,"Prescriber Street Address Line 1")=$P(X,U)  ; NCPDP field B27-7U
"RTN","BPSOSCD",69,0)
 .S BPS("RX",MEDN,"Prescriber Street Address Line 2")=$P(X,U,5)  ; NCPDP field B28-8U
"RTN","BPSOSCD",70,0)
 .S BPS("RX",MEDN,"Prescriber City Address")=$P(X,U,2)  ; NCPDP field 366-2M
"RTN","BPSOSCD",71,0)
 .S BPS("RX",MEDN,"Prescriber State/Province Address")=$P(X,U,3)  ; NCPDP field 367-2N
"RTN","BPSOSCD",72,0)
 .S BPS("RX",MEDN,"Prescriber Zip/Postal Zone")=$TR($P(X,U,4)," -")  ; NCPDP field 368-2P
"RTN","BPSOSCD",73,0)
 .S BPS("RX",MEDN,"Prescriber Country")=$$COUNTRY($P(X,U,3),$P(X,U,6))    ;NCPDP field B42-3C
"RTN","BPSOSCD",74,0)
 ;
"RTN","BPSOSCD",75,0)
 ; Stop if Eligibility as we do not need any of the claim data below
"RTN","BPSOSCD",76,0)
 I BPS("Transaction Code")="E1" Q
"RTN","BPSOSCD",77,0)
 ;
"RTN","BPSOSCD",78,0)
 ; Basic Prescription Info
"RTN","BPSOSCD",79,0)
 S BPS("RX",MEDN,"Date Written")=$$RXAPI1^BPSUTIL1(RXIEN,1,"I")
"RTN","BPSOSCD",80,0)
 ; SLT - BPS*1.0*11
"RTN","BPSOSCD",81,0)
 ; if the RX Issue Date is in the future, set it to the current date
"RTN","BPSOSCD",82,0)
 I BPS("RX",MEDN,"Date Written")>DT S BPS("RX",MEDN,"Date Written")=DT
"RTN","BPSOSCD",83,0)
 S BPS("RX",MEDN,"New/Refill")=$S(RXRFIEN="":"N",1:"R")
"RTN","BPSOSCD",84,0)
 S BPS("RX",MEDN,"# Refills")=$$RXAPI1^BPSUTIL1(RXIEN,9,"I")
"RTN","BPSOSCD",85,0)
 S BPS("RX",MEDN,"Refill #")=+RXRFIEN
"RTN","BPSOSCD",86,0)
 S BPS("RX",MEDN,"Pharmacy Service Type")="01"  ; 147-U7 Pharmacy Service Type, 1=Community/Retail Pharmacy Services
"RTN","BPSOSCD",87,0)
 ;
"RTN","BPSOSCD",88,0)
 ; PreAuth and Prior Authorization
"RTN","BPSOSCD",89,0)
 ; #1.09 Prior Authorization Number, #1.15 Prior Auth Type Code
"RTN","BPSOSCD",90,0)
 S X=$G(^BPST(IEN59,1))
"RTN","BPSOSCD",91,0)
 S BPS("RX",MEDN,"Preauth #")=$P(X,U,15)_$P(X,U,9)
"RTN","BPSOSCD",92,0)
 S BPS("Claim",MEDN,"Prior Auth Type")=$P(X,U,15)
"RTN","BPSOSCD",93,0)
 S BPS("Claim",MEDN,"Prior Auth Num Sub")=$P(X,U,9)
"RTN","BPSOSCD",94,0)
 ;
"RTN","BPSOSCD",95,0)
 ; delay reason code not sent unless user specifies a code
"RTN","BPSOSCD",96,0)
 S BPS("Claim",MEDN,"Delay Reason Code")=""  ; 357-NV Delay Reason Code
"RTN","BPSOSCD",97,0)
 ;
"RTN","BPSOSCD",98,0)
 ; Calculate date/time for Time of Service 678-Y6 - BPS*1*15
"RTN","BPSOSCD",99,0)
 ; using SUBMIT REQUEST DATE TIME field #17 from earliest transmission log entry
"RTN","BPSOSCD",100,0)
 N FDTIME,IEN57 S IEN57=$O(^BPSTL("B",IEN59,0)) I IEN57 S FDTIME=$P($G(^BPSTL(IEN57,0)),U,13)
"RTN","BPSOSCD",101,0)
 ; Otherwise use current time
"RTN","BPSOSCD",102,0)
 I $G(FDTIME)="" S FDTIME=$$NOW^XLFDT
"RTN","BPSOSCD",103,0)
 ; Save time as HHMMSS
"RTN","BPSOSCD",104,0)
 S BPS("Claim",MEDN,"Time of Service")=$$LJ^XLFSTR($P(FDTIME,".",2),6,0) ; 678-Y6 Time of Service
"RTN","BPSOSCD",105,0)
 ;
"RTN","BPSOSCD",106,0)
 ; NDC = NDC number drug, try transaction 1st, if null get it from Rx/refill
"RTN","BPSOSCD",107,0)
 S BPS("RX",MEDN,"Product ID Qualifier")="03"
"RTN","BPSOSCD",108,0)
 S NDC=$P(^BPST(IEN59,1),U,2)
"RTN","BPSOSCD",109,0)
 I NDC="" S NDC=$$GETNDC^PSONDCUT(RXIEN,RXRFIEN) D LOG^BPSOSL(IEN59,RTN_"-NDC sent as "_NDC)
"RTN","BPSOSCD",110,0)
 S BPS("RX",MEDN,"NDC")=NDC
"RTN","BPSOSCD",111,0)
 ;
"RTN","BPSOSCD",112,0)
 ; Prescription Data dependent on original vs. refill
"RTN","BPSOSCD",113,0)
 D:'RXRFIEN  ; 1st fill
"RTN","BPSOSCD",114,0)
 .S BPS("RX",MEDN,"Days Supply")=$$RXAPI1^BPSUTIL1(RXIEN,8,"I")
"RTN","BPSOSCD",115,0)
 .S BPS("RX",MEDN,"DAW")=$$RXAPI1^BPSUTIL1(RXIEN,81,"I")
"RTN","BPSOSCD",116,0)
 .;Use FINISHING PERSON field as pharmacist identifier for Initials and ID - BPS*1*15 - DBIA 10112 for $$SITE
"RTN","BPSOSCD",117,0)
 .S BPS("Provider",MEDN,"Pharmacist Initials")=$$GET1^DIQ(200,+$$RXAPI1^BPSUTIL1(RXIEN,38,"I"),1)
"RTN","BPSOSCD",118,0)
 .S BPS("Provider",MEDN,"Pharmacist ID")=$P($$SITE^VASITE,U,3)_$$RJ^XLFSTR(+$$RXAPI1^BPSUTIL1(RXIEN,38,"I"),15,0)
"RTN","BPSOSCD",119,0)
 D:RXRFIEN  ; refill
"RTN","BPSOSCD",120,0)
 .S BPS("RX",MEDN,"Days Supply")=$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,RXRFIEN,1.1,"I")
"RTN","BPSOSCD",121,0)
 .S BPS("RX",MEDN,"DAW")=$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,RXRFIEN,81,"I")
"RTN","BPSOSCD",122,0)
 .;Use FILLING PERSON field as pharmacist identifier for Initials and ID - BPS*1*15 - DBIA 10112 for $$SITE
"RTN","BPSOSCD",123,0)
 .S BPS("Provider",MEDN,"Pharmacist Initials")=$$GET1^DIQ(200,+$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,RXRFIEN,19,"I"),1)
"RTN","BPSOSCD",124,0)
 .S BPS("Provider",MEDN,"Pharmacist ID")=$P($$SITE^VASITE,U,3)_$$RJ^XLFSTR(+$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,RXRFIEN,19,"I"),15,0)
"RTN","BPSOSCD",125,0)
 ;
"RTN","BPSOSCD",126,0)
 ; Origin Code, VAOIEN=PLACER ORDER # from file 52, VANATURE=NATURE OF ORDER in sub-file 100.008
"RTN","BPSOSCD",127,0)
 S VAOIEN=+$$RXAPI1^BPSUTIL1(RXIEN,39.3,"I"),VANATURE=$$GET1^DIQ(100.008,"1,"_VAOIEN_",","12")
"RTN","BPSOSCD",128,0)
 S BPS("RX",MEDN,"Origin Code")=$S(VANATURE="AUTO":2,VANATURE["ELECTRONIC":3,VANATURE="DUPLICATE":0,VANATURE["TELEPHONE":2,1:1)
"RTN","BPSOSCD",129,0)
 ;
"RTN","BPSOSCD",130,0)
 ; NCPDP field 420-DK Submission Clarification Code, default to "01" for vD.0
"RTN","BPSOSCD",131,0)
 ;   note: this is a multiple (#9002313.02354), additional codes may be added by other routines
"RTN","BPSOSCD",132,0)
 S %=$P($G(^BPST(IEN59,12)),U,3),BPS("RX",MEDN,"Submission Clarif Code",1)=$S(%]"":%,1:"01")
"RTN","BPSOSCD",133,0)
 ;
"RTN","BPSOSCD",134,0)
 ; Drug Info
"RTN","BPSOSCD",135,0)
 S DRUGIEN=$$RXAPI1^BPSUTIL1(RXIEN,6,"I")
"RTN","BPSOSCD",136,0)
 D:DRUGIEN'=""
"RTN","BPSOSCD",137,0)
 .S BPS("RX",MEDN,"Drug IEN")=DRUGIEN
"RTN","BPSOSCD",138,0)
 .S BPS("RX",MEDN,"Drug Name")=$$DRUGDIE^BPSUTIL1(DRUGIEN,.01,"E")
"RTN","BPSOSCD",139,0)
 ;
"RTN","BPSOSCD",140,0)
 ; Pricing Info
"RTN","BPSOSCD",141,0)
 S PRICING=$G(^BPST(IEN59,5))
"RTN","BPSOSCD",142,0)
 S BPS("RX",MEDN,"Quantity")=$P(PRICING,U)
"RTN","BPSOSCD",143,0)
 S BPS("RX",MEDN,"Unit Price")=$P(PRICING,U,2)
"RTN","BPSOSCD",144,0)
 S BPS("RX",MEDN,"Unit of Measure")=$P(PRICING,U,8)
"RTN","BPSOSCD",145,0)
 S BPS("RX",MEDN,"Basis of Cost Determination")=$G(VAINFO(9002313.59902,IENS,902.13,"I"))
"RTN","BPSOSCD",146,0)
 S BPS("RX",MEDN,"Usual & Customary")=$G(VAINFO(9002313.59902,IENS,902.14,"I"))
"RTN","BPSOSCD",147,0)
 S BPS("RX",MEDN,"Gross Amount Due")=$G(VAINFO(9002313.59902,IENS,902.15,"I"))
"RTN","BPSOSCD",148,0)
 S BPS("RX",MEDN,"Ingredient Cost")=$G(VAINFO(9002313.59902,IENS,902.2,"I"))
"RTN","BPSOSCD",149,0)
 S BPS("RX",MEDN,"Dispensing Fee")=$G(VAINFO(9002313.59902,IENS,902.12,"I"))
"RTN","BPSOSCD",150,0)
 S ADFEE=+$G(VAINFO(9002313.59902,IENS,902.16,"I"))
"RTN","BPSOSCD",151,0)
 I ADFEE'=0 D
"RTN","BPSOSCD",152,0)
 . S BPS("RX",MEDN,"Other Amt Qual",1)="04"
"RTN","BPSOSCD",153,0)
 . S BPS("RX",MEDN,"Other Amt Value",1)=ADFEE
"RTN","BPSOSCD",154,0)
 ;
"RTN","BPSOSCD",155,0)
 Q
"RTN","BPSOSCD",156,0)
 ;
"RTN","BPSOSCD",157,0)
 ; OVERRIDE - Retrieve OVERRIDE nodes and put into BPS array
"RTN","BPSOSCD",158,0)
 ; They will be fetched from BPS("OVERRIDE"
"RTN","BPSOSCD",159,0)
 ;   during low-level construction of the actual encoded claim packet.
"RTN","BPSOSCD",160,0)
 ; BPS("OVERRIDE",field)=value  for fields 101-401
"RTN","BPSOSCD",161,0)
 ; BPS("OVERRIDE","RX",MEDN,field) for med #N, fields 402+
"RTN","BPSOSCD",162,0)
 ; Note that if you have multiple transactions bundled, the
"RTN","BPSOSCD",163,0)
 ;   union of overrides from 101-401 apply to all; and if there's a
"RTN","BPSOSCD",164,0)
 ;   conflict, the last one overwrites the previous ones.
"RTN","BPSOSCD",165,0)
OVERRIDE(IEN59,MEDN) ;
"RTN","BPSOSCD",166,0)
 N IEN511,RETVAL
"RTN","BPSOSCD",167,0)
 S IEN511=$P(^BPST(IEN59,1),U,13) Q:'IEN511
"RTN","BPSOSCD",168,0)
 S RETVAL=$$GET511^BPSOSO2(IEN511,"BPS(""OVERRIDE"")","BPS(""OVERRIDE"",""RX"","_MEDN_")")
"RTN","BPSOSCD",169,0)
 Q
"RTN","BPSOSCD",170,0)
 ;
"RTN","BPSOSCD",171,0)
 ; DURVALUE - Will read in the DUR data from the DUR multiple
"RTN","BPSOSCD",172,0)
 ;   in BPS Transactions and store the values into BPS("RX",MEDN,DUR,....)
"RTN","BPSOSCD",173,0)
 ; NOTE - unlike most values, these fields are stored by their
"RTN","BPSOSCD",174,0)
 ;   field number.  Since they are repeating, it will ease the
"RTN","BPSOSCD",175,0)
 ;   retrieval of them, when we populate the claim.
"RTN","BPSOSCD",176,0)
DURVALUE(IEN59,MEDN) ;
"RTN","BPSOSCD",177,0)
 N DUR,DCNT,DURREC
"RTN","BPSOSCD",178,0)
 ;
"RTN","BPSOSCD",179,0)
 S (DUR,DCNT)=0
"RTN","BPSOSCD",180,0)
 F  S DCNT=$O(^BPST(IEN59,13,DCNT)) Q:'DCNT  D
"RTN","BPSOSCD",181,0)
 .S DURREC=$G(^BPST(IEN59,13,DCNT,0))
"RTN","BPSOSCD",182,0)
 .I DURREC="" Q
"RTN","BPSOSCD",183,0)
 .S DUR=DUR+1
"RTN","BPSOSCD",184,0)
 .S BPS("RX",MEDN,"DUR",DUR,473)=DUR            ;473-7E DUR/PPS Code Counter
"RTN","BPSOSCD",185,0)
 .S BPS("RX",MEDN,"DUR",DUR,439)=$P(DURREC,U,3) ;439-E4 Reason For Service Code
"RTN","BPSOSCD",186,0)
 .S BPS("RX",MEDN,"DUR",DUR,440)=$P(DURREC,U,2) ;440-E5 Professional Service Code
"RTN","BPSOSCD",187,0)
 .S BPS("RX",MEDN,"DUR",DUR,441)=$P(DURREC,U,4) ;441-E6 Result of Service Code
"RTN","BPSOSCD",188,0)
 .S BPS("RX",MEDN,"DUR",DUR,474)=""             ;474-8E DUR/PPS Level Of Effort
"RTN","BPSOSCD",189,0)
 .Q:$G(BPS("NCPDP","Version"))'=51  ; fields 475&476 not used in vD.0
"RTN","BPSOSCD",190,0)
 .S BPS("RX",MEDN,"DUR",DUR,475)=""             ;475-J9 DUR Co-Agent ID Qualifier
"RTN","BPSOSCD",191,0)
 .S BPS("RX",MEDN,"DUR",DUR,476)=""             ;476-H6 DUR Co-Agent ID
"RTN","BPSOSCD",192,0)
 ;
"RTN","BPSOSCD",193,0)
 Q
"RTN","BPSOSCD",194,0)
 ;
"RTN","BPSOSCD",195,0)
COB(IEN59,MEDN) ; process the COB fields and build the COB array
"RTN","BPSOSCD",196,0)
 ; Code for Payer-Patient Responsibility and Benefit Stages multiples
"RTN","BPSOSCD",197,0)
 ;  not implemented yet (except by certification)
"RTN","BPSOSCD",198,0)
 ;
"RTN","BPSOSCD",199,0)
 ; build array of COB secondary claim data from the BPS Transaction file - esg - 6/16/10
"RTN","BPSOSCD",200,0)
 N COBPIEN,APDIEN,REJIEN,DATA
"RTN","BPSOSCD",201,0)
 K BPS("RX",MEDN,"OTHER PAYER")
"RTN","BPSOSCD",202,0)
 ;
"RTN","BPSOSCD",203,0)
 ; Field 337-4C COB OTHER PAYMENTS COUNT (9002313.59,1204)  moved into [1] below
"RTN","BPSOSCD",204,0)
 S BPS("RX",MEDN,"OTHER PAYER",0)=$P($G(^BPST(IEN59,12)),U,4)
"RTN","BPSOSCD",205,0)
 ;
"RTN","BPSOSCD",206,0)
 S COBPIEN=0 F  S COBPIEN=$O(^BPST(IEN59,14,COBPIEN)) Q:'COBPIEN  D
"RTN","BPSOSCD",207,0)
 . ; Note that this will set pieces 1-7.  Piece 8 is reserved for
"RTN","BPSOSCD",208,0)
 . ;  Payer-Patient Responsibility Count and is set by the certification code
"RTN","BPSOSCD",209,0)
 . S BPS("RX",MEDN,"OTHER PAYER",COBPIEN,0)=$G(^BPST(IEN59,14,COBPIEN,0))
"RTN","BPSOSCD",210,0)
 . ;
"RTN","BPSOSCD",211,0)
 . ; retrieve data from other payer amount paid multiple
"RTN","BPSOSCD",212,0)
 . S APDIEN=0 F  S APDIEN=$O(^BPST(IEN59,14,COBPIEN,1,APDIEN)) Q:'APDIEN  D
"RTN","BPSOSCD",213,0)
 .. S DATA=$G(^BPST(IEN59,14,COBPIEN,1,APDIEN,0))
"RTN","BPSOSCD",214,0)
 .. S BPS("RX",MEDN,"OTHER PAYER",COBPIEN,"P",APDIEN,0)=$P(DATA,"^",1)_"^"_$$GET1^DIQ(9002313.2,$P(DATA,"^",2),.01)
"RTN","BPSOSCD",215,0)
 .. Q
"RTN","BPSOSCD",216,0)
 . ;
"RTN","BPSOSCD",217,0)
 . ; retrieve data from other payer reject multiple
"RTN","BPSOSCD",218,0)
 . S REJIEN=0 F  S REJIEN=$O(^BPST(IEN59,14,COBPIEN,2,REJIEN)) Q:'REJIEN  D
"RTN","BPSOSCD",219,0)
 .. S BPS("RX",MEDN,"OTHER PAYER",COBPIEN,"R",REJIEN,0)=$G(^BPST(IEN59,14,COBPIEN,2,REJIEN,0))
"RTN","BPSOSCD",220,0)
 Q
"RTN","BPSOSCD",221,0)
 ;
"RTN","BPSOSCD",222,0)
PRVADRS(IEN59,PRVIEN) ; site address for a provider
"RTN","BPSOSCD",223,0)
 ; returns "street address^city^st^zip"
"RTN","BPSOSCD",224,0)
 ; IEN59=BPS TRANSACTION (#9002313.59) ien
"RTN","BPSOSCD",225,0)
 ; PRVIEN=provider IEN in NEW PERSON file (#200)
"RTN","BPSOSCD",226,0)
 ;
"RTN","BPSOSCD",227,0)
 I '$G(IEN59) Q ""
"RTN","BPSOSCD",228,0)
 I '$G(PRVIEN) Q ""
"RTN","BPSOSCD",229,0)
 ;
"RTN","BPSOSCD",230,0)
 N BPSND,F,IPTR,IEN,OPSITE,PRVADDR,PRVNVA,RSLT,AD2
"RTN","BPSOSCD",231,0)
 S RSLT=""
"RTN","BPSOSCD",232,0)
 ;
"RTN","BPSOSCD",233,0)
 S PRVNVA=+$$GET1^DIQ(200,PRVIEN_",",53.91,"I")  ; NON-VA PRESCRIBER
"RTN","BPSOSCD",234,0)
 ;
"RTN","BPSOSCD",235,0)
 ; if false, it's a VA prescriber - address data found in file 4 for the VA pharmacy
"RTN","BPSOSCD",236,0)
 I 'PRVNVA D  G PRVADX
"RTN","BPSOSCD",237,0)
 .S OPSITE=$P($G(^BPST(IEN59,1)),U,4)  ; OUTPATIENT SITE ptr
"RTN","BPSOSCD",238,0)
 .Q:'OPSITE
"RTN","BPSOSCD",239,0)
 .S BPSND="BPS59" K ^TMP($J,BPSND)
"RTN","BPSOSCD",240,0)
 .D PSS^PSO59(OPSITE,"",BPSND)
"RTN","BPSOSCD",241,0)
 .S IPTR=$P($G(^TMP($J,BPSND,OPSITE,101)),U)  ; INSTITUTION ptr
"RTN","BPSOSCD",242,0)
 .S:IPTR RSLT=$$MADD^XUAF4(IPTR)_U_$$GET1^DIQ(4,IPTR_",",4.02)_U_$$GET1^DIQ(4,IPTR_",",4.04,"I")
"RTN","BPSOSCD",243,0)
 .K ^TMP($J,BPSND)
"RTN","BPSOSCD",244,0)
 ;
"RTN","BPSOSCD",245,0)
 ; Non-VA prescriber - address data found in file 200
"RTN","BPSOSCD",246,0)
 F F=.111,.112,.113,.114,.115,.116 S PRVADDR(F)=$$GET1^DIQ(200,PRVIEN_",",F)
"RTN","BPSOSCD",247,0)
 ; Get State info
"RTN","BPSOSCD",248,0)
 S PRVADDR(.115,"ABBR")="",IEN=$$GET1^DIQ(200,PRVIEN_",",.115,"I"),PRVADDR(.115,"ABBR")=$$GET1^DIQ(5,+IEN_",",1)
"RTN","BPSOSCD",249,0)
 ; Build Address Line 2
"RTN","BPSOSCD",250,0)
 S AD2=PRVADDR(.112) I PRVADDR(.113)]"" S AD2=AD2_$S(AD2]"":" ",1:"")_PRVADDR(.113)
"RTN","BPSOSCD",251,0)
 ; Build result string
"RTN","BPSOSCD",252,0)
 S RSLT=PRVADDR(.111)_U_PRVADDR(.114)_U_PRVADDR(.115,"ABBR")_U_PRVADDR(.116)_U_AD2_U_IEN
"RTN","BPSOSCD",253,0)
 ;
"RTN","BPSOSCD",254,0)
PRVADX ;
"RTN","BPSOSCD",255,0)
 Q RSLT
"RTN","BPSOSCD",256,0)
 ;
"RTN","BPSOSCD",257,0)
COUNTRY(STATE,IEN) ;
"RTN","BPSOSCD",258,0)
 ; Convert STATE abbreviation into a ISO-3166-1 country code
"RTN","BPSOSCD",259,0)
 ; Input:
"RTN","BPSOSCD",260,0)
 ;    STATE: State Abbreviation
"RTN","BPSOSCD",261,0)
 ; Output: ISO-3166-1 Country Code
"RTN","BPSOSCD",262,0)
 ;
"RTN","BPSOSCD",263,0)
 I $G(STATE)="" Q ""
"RTN","BPSOSCD",264,0)
 I '$G(IEN) Q ""
"RTN","BPSOSCD",265,0)
 I ",BC,MB,NB,NF,NS,NT,ON,PE,QC,SK,YT,CANAD,NU,"[(","_STATE_",") Q "CA" ; Canada
"RTN","BPSOSCD",266,0)
 I STATE="FG"!(STATE="EU")!(STATE="UN") Q ""  ; Foreign Country, Europe, Unknown
"RTN","BPSOSCD",267,0)
 I STATE="AS" Q "AS"  ; American Samoa
"RTN","BPSOSCD",268,0)
 I STATE="FM" Q "FM"  ; Federated States of Micronesia
"RTN","BPSOSCD",269,0)
 I STATE="GU" Q "GU"  ; Guam
"RTN","BPSOSCD",270,0)
 I STATE="MH" Q "MH"  ; Marshall Islands
"RTN","BPSOSCD",271,0)
 I STATE="MP" Q "MP"  ; Northern Mariana Islands
"RTN","BPSOSCD",272,0)
 I STATE="MX" Q "MX"  ; Mexico
"RTN","BPSOSCD",273,0)
 I STATE="PH" Q "PH"  ; Philippines
"RTN","BPSOSCD",274,0)
 I STATE="PR" Q "PR"  ; Puerto Rico
"RTN","BPSOSCD",275,0)
 I STATE="PW" Q "PW"  ; Palau
"RTN","BPSOSCD",276,0)
 I STATE="VI" Q "VI"  ; Virgin Islands
"RTN","BPSOSCD",277,0)
 I $$GET1^DIQ(5,IEN_",",2.2,"I")=1 Q "US"
"RTN","BPSOSCD",278,0)
 Q ""
"RTN","BPSOSH2")
0^44^B140036379
"RTN","BPSOSH2",1,0)
BPSOSH2 ;BHAM ISC/SD/lwj/DLF - Assemble formatted claim ;06/01/2004
"RTN","BPSOSH2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8,10,15,19,20**;JUN 2004;Build 27
"RTN","BPSOSH2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSH2",4,0)
 ;
"RTN","BPSOSH2",5,0)
 ;    5.1 had 14 claim segments (Header, Patient, Insurance, Claim
"RTN","BPSOSH2",6,0)
 ;                                Pharmacy Provider, Prescriber,
"RTN","BPSOSH2",7,0)
 ;                                COB, Workers Comp, DUR, Pricing,
"RTN","BPSOSH2",8,0)
 ;                                Coupon, Compound, Prior Auth,
"RTN","BPSOSH2",9,0)
 ;                                Clinical)
"RTN","BPSOSH2",10,0)
 ;
"RTN","BPSOSH2",11,0)
 ;    D.0 added 3 new request segments (Additional Documentation,
"RTN","BPSOSH2",12,0)
 ;                                       Facility, Narrative)
"RTN","BPSOSH2",13,0)
 ;
"RTN","BPSOSH2",14,0)
 ;    D.1 - D.9 introduces Alphanumeric NCPDP numbers and new
"RTN","BPSOSH2",15,0)
 ;                              Purchase and Provider segments
"RTN","BPSOSH2",16,0)
 ;
"RTN","BPSOSH2",17,0)
 ;    E.0 - E.6 added 2 new request segments (Intermediary, Last
"RTN","BPSOSH2",18,0)
 ;                                             Known 4RX)
"RTN","BPSOSH2",19,0)
 ;
"RTN","BPSOSH2",20,0)
 ;    5.1/D.0 requires field identifiers and separators on all fields
"RTN","BPSOSH2",21,0)
 ;        other than the header
"RTN","BPSOSH2",22,0)
 ;    5.1/D.0 segment separators are required prior to each segment
"RTN","BPSOSH2",23,0)
 ;        following the header
"RTN","BPSOSH2",24,0)
 ;    5.1/D.0 group separators appear at the end of each
"RTN","BPSOSH2",25,0)
 ;        transaction (prescription)
"RTN","BPSOSH2",26,0)
 ;    5.1/D.0 only want to send segments that have data - a new
"RTN","BPSOSH2",27,0)
 ;        segment record will hold the data until we are sure
"RTN","BPSOSH2",28,0)
 ;        we have something to send
"RTN","BPSOSH2",29,0)
 ;
"RTN","BPSOSH2",30,0)
 ; Put together ASCII formatted record per the Payer Sheet Definition
"RTN","BPSOSH2",31,0)
 ; Input:  
"RTN","BPSOSH2",32,0)
 ;   NODES - "100^110^120" or "130^140^150^160^170^180^190^200^210^220^230^240^250^260^270^280^290^300"
"RTN","BPSOSH2",33,0)
 ; Passed by Ref:
"RTN","BPSOSH2",34,0)
 ;  .IEN - Internal Entry Number array
"RTN","BPSOSH2",35,0)
 ;  .BPS - Formatted Data Array with claim and transaction data
"RTN","BPSOSH2",36,0)
 ;  .REC - Formatted ASCII record (result)
"RTN","BPSOSH2",37,0)
 ;
"RTN","BPSOSH2",38,0)
XLOOP(NODES,IEN,BPS,REC) ;EP - from BPSECA1
"RTN","BPSOSH2",39,0)
 ;
"RTN","BPSOSH2",40,0)
 N DATAFND,FDATA,FLAG,FLDDATA,FLDID,FLDIEN,FLDNUM,INDEX,MDATA,NODE,ORDER,PMODE,RECMIEN,SEGREC
"RTN","BPSOSH2",41,0)
 N VER,TYPE
"RTN","BPSOSH2",42,0)
 ;
"RTN","BPSOSH2",43,0)
 ; Get payer sheet version and transaction type
"RTN","BPSOSH2",44,0)
 S VER=$P($G(^BPSF(9002313.92,+$G(IEN(9002313.92)),1)),U,2)
"RTN","BPSOSH2",45,0)
 S TYPE=$G(BPS(9002313.02,+$G(IEN(9002313.02)),103,"I"))
"RTN","BPSOSH2",46,0)
 ;
"RTN","BPSOSH2",47,0)
 ; Loop through the NODES variable delimited by U
"RTN","BPSOSH2",48,0)
 F INDEX=1:1:$L(NODES,U) D
"RTN","BPSOSH2",49,0)
 . S NODE=$P(NODES,U,INDEX) Q:NODE=""
"RTN","BPSOSH2",50,0)
 . ;
"RTN","BPSOSH2",51,0)
 . ; VA does not support these segments
"RTN","BPSOSH2",52,0)
 . Q:",300,290,280,270,260,250,240,230,220,210,200,170,140,"[NODE
"RTN","BPSOSH2",53,0)
 . ;
"RTN","BPSOSH2",54,0)
 . ; Quit if the payer sheet does not have the node
"RTN","BPSOSH2",55,0)
 . Q:'$D(^BPSF(9002313.92,+IEN(9002313.92),NODE,0))
"RTN","BPSOSH2",56,0)
 . ;
"RTN","BPSOSH2",57,0)
 . ; Per NCPDP standard, reversals do not support segments listed below
"RTN","BPSOSH2",58,0)
 . I TYPE="B2",",300,290,280,270,260,250,240,230,220,210,200,170,150,140,"[NODE Q
"RTN","BPSOSH2",59,0)
 . I TYPE="B2",VER="D0",NODE=110 Q  ;Patient segment not supported in a D0 reversal
"RTN","BPSOSH2",60,0)
 . ;
"RTN","BPSOSH2",61,0)
 . ; Per NCPDP standard, eligibility does not support segments listed below
"RTN","BPSOSH2",62,0)
 . I TYPE="E1",",290,280,270,260,250,230,220,210,200,190,180,170,160,130,"[NODE Q
"RTN","BPSOSH2",63,0)
 . ;
"RTN","BPSOSH2",64,0)
 . S DATAFND=0  ; indicates if data is on the segment for us to send
"RTN","BPSOSH2",65,0)
 . S SEGREC=""  ; segment's information
"RTN","BPSOSH2",66,0)
 . ;
"RTN","BPSOSH2",67,0)
 . D:NODE=180 PROCDUR
"RTN","BPSOSH2",68,0)
 . ;
"RTN","BPSOSH2",69,0)
 . ;COB fields
"RTN","BPSOSH2",70,0)
 . D:NODE=160 PROCCOB
"RTN","BPSOSH2",71,0)
 . ;
"RTN","BPSOSH2",72,0)
 . S ORDER=""
"RTN","BPSOSH2",73,0)
 . F  D  Q:'ORDER
"RTN","BPSOSH2",74,0)
 .. ;
"RTN","BPSOSH2",75,0)
 .. Q:NODE=180  ; DUR/PPS section (repeating), already processed
"RTN","BPSOSH2",76,0)
 .. Q:NODE=160  ; COB data processed earlier
"RTN","BPSOSH2",77,0)
 .. S ORDER=$O(^BPSF(9002313.92,+IEN(9002313.92),NODE,"B",ORDER))
"RTN","BPSOSH2",78,0)
 .. Q:'ORDER
"RTN","BPSOSH2",79,0)
 .. S RECMIEN=""
"RTN","BPSOSH2",80,0)
 .. S RECMIEN=$O(^BPSF(9002313.92,+IEN(9002313.92),NODE,"B",ORDER,RECMIEN))
"RTN","BPSOSH2",81,0)
 .. Q:RECMIEN=""
"RTN","BPSOSH2",82,0)
 .. ;
"RTN","BPSOSH2",83,0)
 .. S MDATA=$G(^BPSF(9002313.92,+IEN(9002313.92),NODE,RECMIEN,0))
"RTN","BPSOSH2",84,0)
 .. Q:MDATA=""
"RTN","BPSOSH2",85,0)
 .. ;
"RTN","BPSOSH2",86,0)
 .. S FLDIEN=$P(MDATA,U,2)
"RTN","BPSOSH2",87,0)
 .. Q:FLDIEN=""
"RTN","BPSOSH2",88,0)
 .. ;
"RTN","BPSOSH2",89,0)
 .. S FDATA=$G(^BPSF(9002313.91,FLDIEN,0))
"RTN","BPSOSH2",90,0)
 .. Q:FDATA=""
"RTN","BPSOSH2",91,0)
 .. S FLDNUM=$P(FDATA,U,1)
"RTN","BPSOSH2",92,0)
 .. Q:FLDNUM=""
"RTN","BPSOSH2",93,0)
 .. ;Check for alphanumeric NCPDP numbers - BPS*1*15
"RTN","BPSOSH2",94,0)
 .. I $P(FLDNUM,".")'?3N S FLDNUM=$$VNUM^BPSECMPS(FLDNUM) Q:'FLDNUM
"RTN","BPSOSH2",95,0)
 .. ;
"RTN","BPSOSH2",96,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",97,0)
 .. ;
"RTN","BPSOSH2",98,0)
 .. ;header data
"RTN","BPSOSH2",99,0)
 .. S:NODE<130 FLDDATA=$G(BPS(9002313.02,IEN(9002313.02),FLDNUM,"I"))
"RTN","BPSOSH2",100,0)
 .. ;
"RTN","BPSOSH2",101,0)
 .. ;transaction data
"RTN","BPSOSH2",102,0)
 .. S:NODE>120 FLDDATA=$G(BPS(9002313.0201,IEN(9002313.0201),FLDNUM,"I"))
"RTN","BPSOSH2",103,0)
 .. I $TR($E(FLDDATA,3,999),"0 {}")'="" S DATAFND=1 ;BPS*1*15 - allow for zero in NCPDP ID
"RTN","BPSOSH2",104,0)
 .. ;
"RTN","BPSOSH2",105,0)
 .. ;check if this is the seg id - call this after fld chk since
"RTN","BPSOSH2",106,0)
 .. ;we don't want to send the segment if this is all there is
"RTN","BPSOSH2",107,0)
 .. I (NODE>100)&(FLDNUM=111) S FLDDATA=$$SEGID(NODE)
"RTN","BPSOSH2",108,0)
 .. ;
"RTN","BPSOSH2",109,0)
 .. ; Special code to handle the Submission Clarification Code (420) repeating group
"RTN","BPSOSH2",110,0)
 .. I FLDNUM=420 D SUBCLAR(.DATAFND,.IEN,.SEGREC) Q
"RTN","BPSOSH2",111,0)
 .. ;
"RTN","BPSOSH2",112,0)
 .. ; Special code to handle the Other Amount Claimed repeating group
"RTN","BPSOSH2",113,0)
 .. I FLDNUM=480 D OAMTCLMD(.DATAFND,.IEN,.SEGREC) Q
"RTN","BPSOSH2",114,0)
 .. I FLDNUM=479 Q  ; fields 479 & 480 handled as a pair in OAMTCLMD
"RTN","BPSOSH2",115,0)
 .. ;
"RTN","BPSOSH2",116,0)
 .. Q:FLDDATA=""   ;lje;7/23/03; don't want extra field separators when field is blank for testing for WebMD.
"RTN","BPSOSH2",117,0)
 .. ;
"RTN","BPSOSH2",118,0)
 .. S:NODE=100 SEGREC=SEGREC_FLDDATA  ;no FS on the header rec
"RTN","BPSOSH2",119,0)
 .. S:NODE>100 SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",120,0)
 ..;
"RTN","BPSOSH2",121,0)
 . I (DATAFND)&(NODE=100) S REC(NODE)=SEGREC   ;no SS when it's the header
"RTN","BPSOSH2",122,0)
 . I (DATAFND)&(NODE>100) D
"RTN","BPSOSH2",123,0)
 .. I '$D(REC(NODE)) S REC(NODE)=REC I REC[$C(29) S REC=""
"RTN","BPSOSH2",124,0)
 .. S REC(NODE)=REC(NODE)_$C(30)_SEGREC  ;SS before the seg
"RTN","BPSOSH2",125,0)
 ;
"RTN","BPSOSH2",126,0)
 Q
"RTN","BPSOSH2",127,0)
 ;
"RTN","BPSOSH2",128,0)
SEGID(ND) ; function, returns Segment ID
"RTN","BPSOSH2",129,0)
 ; Field 111 is the Segment Identifier - for each segment, other than
"RTN","BPSOSH2",130,0)
 ; the header, a unique value must be sent in this field
"RTN","BPSOSH2",131,0)
 ; to identify which segment is being sent.  This value is not stored
"RTN","BPSOSH2",132,0)
 ; in the claim - as it changes with each of the 20 segments. The
"RTN","BPSOSH2",133,0)
 ; field does appear as part of the NCPDP Format, but is simply not stored.
"RTN","BPSOSH2",134,0)
 ;    01 = Patient       02 = Pharmacy Provider    03 = Prescriber
"RTN","BPSOSH2",135,0)
 ;    04 = Insurance     05 = COB/Other Payment    06 = Workers' Comp
"RTN","BPSOSH2",136,0)
 ;    07 = Claim         08 = DUR/PPS              09 = Coupon
"RTN","BPSOSH2",137,0)
 ;    10 = Compound      11 = Pricing              12 = Prior Auth
"RTN","BPSOSH2",138,0)
 ;    13 = Clinical      14 = Additional Doc       15 = Facility
"RTN","BPSOSH2",139,0)
 ;    16 = Narrative     17 = Purchaser            18 = Service Provider
"RTN","BPSOSH2",140,0)
 ;    19 = Intermediary  37 = Last Known 4Rx
"RTN","BPSOSH2",141,0)
 ;
"RTN","BPSOSH2",142,0)
 N FLD
"RTN","BPSOSH2",143,0)
 ;
"RTN","BPSOSH2",144,0)
 S FLD=$S(ND=110:"01",ND=120:"04",ND=130:"07",ND=140:"02",ND=150:"03",ND=160:"05",ND=170:"06",ND=180:"08",ND=190:11,ND=200:"09",ND=210:10,ND=220:12,ND=230:13,ND=240:14,ND=250:15,ND=260:16,ND=270:17,ND=280:18,ND=290:19,ND=300:37,1:"00")
"RTN","BPSOSH2",145,0)
 S FLD="AM"_$$NFF^BPSECFM(FLD,2)
"RTN","BPSOSH2",146,0)
 ;
"RTN","BPSOSH2",147,0)
 Q FLD
"RTN","BPSOSH2",148,0)
 ;
"RTN","BPSOSH2",149,0)
PROCDUR ; The DUR/PPS segment can repeat itself for any given
"RTN","BPSOSH2",150,0)
 ; transaction within a claim.  This means we have to have special
"RTN","BPSOSH2",151,0)
 ; programming to handle the repeating fields.
"RTN","BPSOSH2",152,0)
 ;
"RTN","BPSOSH2",153,0)
 ; Input Data
"RTN","BPSOSH2",154,0)
 ;   BPS array - Set in BPSOSC* routines
"RTN","BPSOSH2",155,0)
 ;   IEN array - Contain IEN information for the BPS NCPDP FORMAT file
"RTN","BPSOSH2",156,0)
 ;   NODE - Multiple of the BPS NCPDP FORMAT file
"RTN","BPSOSH2",157,0)
 ; Input/Output Data
"RTN","BPSOSH2",158,0)
 ;   SEGREC - This is data for the segment being created
"RTN","BPSOSH2",159,0)
 ;   DATAFND - Flag indicating if there is legitimate data for the segment
"RTN","BPSOSH2",160,0)
 ;
"RTN","BPSOSH2",161,0)
 N FIELD,DUR,FLD,ORD,FLDIEN,FLDID,FLDDATA
"RTN","BPSOSH2",162,0)
 ;
"RTN","BPSOSH2",163,0)
 ; If there isn't any data in this segment then quit
"RTN","BPSOSH2",164,0)
 Q:'$D(BPS(9002313.1001))
"RTN","BPSOSH2",165,0)
 ;
"RTN","BPSOSH2",166,0)
 ; Second thing - create the 111 field entry as it is not repeating
"RTN","BPSOSH2",167,0)
 S FLDDATA=$$SEGID(NODE)
"RTN","BPSOSH2",168,0)
 S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",169,0)
 ;
"RTN","BPSOSH2",170,0)
 ; Next- let's look to the format to see which DUR/PPS fields are
"RTN","BPSOSH2",171,0)
 ; needed (remember - ALL fields on the DUR/PPS segment are optional)
"RTN","BPSOSH2",172,0)
 D GETFLDS^BPSOSHF(+IEN(9002313.92),NODE,.FIELD)
"RTN","BPSOSH2",173,0)
 ;
"RTN","BPSOSH2",174,0)
 ; Finally -loop through and process the fields for as many times
"RTN","BPSOSH2",175,0)
 ; as they appear
"RTN","BPSOSH2",176,0)
 S DUR=0
"RTN","BPSOSH2",177,0)
 F  S DUR=$O(BPS(9002313.1001,DUR)) Q:DUR=""  D
"RTN","BPSOSH2",178,0)
 . S ORD=0
"RTN","BPSOSH2",179,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",180,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",181,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",182,0)
 .. S:FLD=473 FLD=.01   ;473 value stored in the .01 field
"RTN","BPSOSH2",183,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",184,0)
 .. ; Transaction data
"RTN","BPSOSH2",185,0)
 .. S FLDDATA=$G(BPS(9002313.1001,DUR,FLD,"I"))
"RTN","BPSOSH2",186,0)
 .. I FLDDATA="" Q
"RTN","BPSOSH2",187,0)
 .. ;
"RTN","BPSOSH2",188,0)
 .. I FLDID'=$TR(FLDDATA,"0 {}") S DATAFND=1 ;fld chk-is the fld empty?
"RTN","BPSOSH2",189,0)
 .. ;
"RTN","BPSOSH2",190,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",191,0)
 ;
"RTN","BPSOSH2",192,0)
 Q
"RTN","BPSOSH2",193,0)
 ;
"RTN","BPSOSH2",194,0)
PROCCOB ;The COB OTHER PAYMENTS segment can repeat itself for any given
"RTN","BPSOSH2",195,0)
 ; transaction within a claim.  This means we have to have special
"RTN","BPSOSH2",196,0)
 ; programming to handle the repeating fields.
"RTN","BPSOSH2",197,0)
 ;
"RTN","BPSOSH2",198,0)
 ; Note that BPS array is set in BPSOSC* routines
"RTN","BPSOSH2",199,0)
 ;
"RTN","BPSOSH2",200,0)
 N FIELD,BPCOB,FLD,ORD
"RTN","BPSOSH2",201,0)
 ;
"RTN","BPSOSH2",202,0)
 ; If there isn't any data in this segment quit
"RTN","BPSOSH2",203,0)
 Q:'$D(BPS(9002313.0401))
"RTN","BPSOSH2",204,0)
 ;
"RTN","BPSOSH2",205,0)
 ; create the 111 field entry as it is not repeating
"RTN","BPSOSH2",206,0)
 S FLDDATA=$$SEGID(NODE)
"RTN","BPSOSH2",207,0)
 S SEGREC=SEGREC_$C(28)_FLDDATA  ; FS always proceeds fld
"RTN","BPSOSH2",208,0)
 ;
"RTN","BPSOSH2",209,0)
 ; look to the format to see which COB fields are needed 
"RTN","BPSOSH2",210,0)
 D GETFLDS^BPSOSHF(+IEN(9002313.92),NODE,.FIELD)
"RTN","BPSOSH2",211,0)
 ;
"RTN","BPSOSH2",212,0)
 ; loop through and process fields for as many times as they appear
"RTN","BPSOSH2",213,0)
 S BPCOB=0
"RTN","BPSOSH2",214,0)
 F  S BPCOB=$O(BPS(9002313.0401,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",215,0)
 . S ORD=0
"RTN","BPSOSH2",216,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",217,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",218,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",219,0)
 .. S:FLD=337 FLD=.01   ; 473-7E value stored in the .01 field
"RTN","BPSOSH2",220,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",221,0)
 .. ; Transaction data
"RTN","BPSOSH2",222,0)
 .. S FLDDATA=$G(BPS(9002313.0401,BPCOB,FLD,"I"))
"RTN","BPSOSH2",223,0)
 .. ;
"RTN","BPSOSH2",224,0)
 .. Q:FLDDATA=""
"RTN","BPSOSH2",225,0)
 .. I $TR(FLDDATA,"0 {}")="HB" Q
"RTN","BPSOSH2",226,0)
 .. I $TR(FLDDATA,"0 {}")="5E" Q
"RTN","BPSOSH2",227,0)
 ..;
"RTN","BPSOSH2",228,0)
 ..I FLDID'=$TR(FLDDATA,"0 {}") S DATAFND=1 ;fld chk-is the fld empty?
"RTN","BPSOSH2",229,0)
 ..S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",230,0)
 ..; handle repeating fields
"RTN","BPSOSH2",231,0)
 ..I FLD=471 D REJCODES ; (#471) OTHER PAYER REJECT COUNT
"RTN","BPSOSH2",232,0)
 ..I FLD=341 D AMTPAID  ; (#341) OTHER PAYER AMOUNT PAID COUNT
"RTN","BPSOSH2",233,0)
 ..I FLD=353 D PATPAID  ; (#353) OTHER PAYER-PATIENT RESPONSIBILITY COUNT
"RTN","BPSOSH2",234,0)
 ..I FLD=392 D BENSTAGE ; (#392) BENEFIT STAGE COUNT
"RTN","BPSOSH2",235,0)
 ;
"RTN","BPSOSH2",236,0)
 Q
"RTN","BPSOSH2",237,0)
 ;
"RTN","BPSOSH2",238,0)
AMTPAID ; (#342) OTHER PAYER AMT PAID QUALIFIER multiple
"RTN","BPSOSH2",239,0)
 N BPCOB,ORD,FLD,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",240,0)
 S BPCOB=0
"RTN","BPSOSH2",241,0)
 F  S BPCOB=$O(BPS(9002313.401342,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",242,0)
 . S ORD=0
"RTN","BPSOSH2",243,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",244,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",245,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",246,0)
 .. S:FLD=342 FLD=.01   ;342 value stored in the .01 field
"RTN","BPSOSH2",247,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",248,0)
 .. ; Transaction data
"RTN","BPSOSH2",249,0)
 .. S FLDDATA=$G(BPS(9002313.401342,BPCOB,FLD,"I"))
"RTN","BPSOSH2",250,0)
 .. ;
"RTN","BPSOSH2",251,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",252,0)
 .. Q:FLDDATA=""
"RTN","BPSOSH2",253,0)
 .. I FLDID'="HC",FLDID=$TR(FLDDATA," ") Q  ; blanks are ok for 342-HC, but not for 431-DV
"RTN","BPSOSH2",254,0)
 .. ;
"RTN","BPSOSH2",255,0)
 .. S DATAFND=1
"RTN","BPSOSH2",256,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",257,0)
 Q
"RTN","BPSOSH2",258,0)
 ; 
"RTN","BPSOSH2",259,0)
REJCODES ; (#472) OTHER PAYER REJECT CODE
"RTN","BPSOSH2",260,0)
 N BPCOB,ORD,FLD,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",261,0)
 S BPCOB=0
"RTN","BPSOSH2",262,0)
 F  S BPCOB=$O(BPS(9002313.401472,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",263,0)
 . S ORD=0
"RTN","BPSOSH2",264,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",265,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",266,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",267,0)
 .. S:FLD=472 FLD=.01   ;472 value stored in the .01 field
"RTN","BPSOSH2",268,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",269,0)
 .. ; Transaction data
"RTN","BPSOSH2",270,0)
 .. S FLDDATA=$G(BPS(9002313.401472,BPCOB,FLD,"I"))
"RTN","BPSOSH2",271,0)
 .. ;
"RTN","BPSOSH2",272,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",273,0)
 .. Q:FLDDATA=""
"RTN","BPSOSH2",274,0)
 .. I FLDID=$TR(FLDDATA,"0 {}") Q
"RTN","BPSOSH2",275,0)
 .. ;
"RTN","BPSOSH2",276,0)
 .. I FLDID'=$TR(FLDDATA,"0 {}") S DATAFND=1 ;fld chk-is the fld empty?
"RTN","BPSOSH2",277,0)
 .. ;
"RTN","BPSOSH2",278,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",279,0)
 Q
"RTN","BPSOSH2",280,0)
 ;
"RTN","BPSOSH2",281,0)
PATPAID ; (#353.01) OTHER PAYER-PATIENT RESPONSIBILITY multiple
"RTN","BPSOSH2",282,0)
 N BPCOB,ORD,FLD,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",283,0)
 S BPCOB=0
"RTN","BPSOSH2",284,0)
 F  S BPCOB=$O(BPS(9002313.401353,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",285,0)
 . S ORD=0
"RTN","BPSOSH2",286,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",287,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",288,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",289,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",290,0)
 .. ; Transaction data
"RTN","BPSOSH2",291,0)
 .. S FLDDATA=$G(BPS(9002313.401353,BPCOB,FLD,"I"))
"RTN","BPSOSH2",292,0)
 .. ;
"RTN","BPSOSH2",293,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",294,0)
 .. I FLDDATA=""!(FLDID=$TR(FLDDATA," ")) Q  ; Check for missing data or only field ID
"RTN","BPSOSH2",295,0)
 .. ;
"RTN","BPSOSH2",296,0)
 .. S DATAFND=1
"RTN","BPSOSH2",297,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",298,0)
 Q
"RTN","BPSOSH2",299,0)
 ;
"RTN","BPSOSH2",300,0)
BENSTAGE ; (#392.01) BENEFIT STAGE MLTPL multiple
"RTN","BPSOSH2",301,0)
 ;
"RTN","BPSOSH2",302,0)
 N BPCOB,ORD,FLD,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",303,0)
 S BPCOB=0
"RTN","BPSOSH2",304,0)
 F  S BPCOB=$O(BPS(9002313.401392,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",305,0)
 . S ORD=0
"RTN","BPSOSH2",306,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",307,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",308,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",309,0)
 .. S FLDID=$P($G(^BPSF(9002313.91,FLDIEN,5)),U)  ; BPS NCPDP FIELD DEFS, (#.06) ID
"RTN","BPSOSH2",310,0)
 .. ; Transaction data
"RTN","BPSOSH2",311,0)
 .. S FLDDATA=$G(BPS(9002313.401392,BPCOB,FLD,"I"))
"RTN","BPSOSH2",312,0)
 .. ;
"RTN","BPSOSH2",313,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",314,0)
 .. I FLDDATA=""!(FLDID=$TR(FLDDATA," ")) Q  ; Check for missing data or only field ID
"RTN","BPSOSH2",315,0)
 .. ;
"RTN","BPSOSH2",316,0)
 .. S DATAFND=1
"RTN","BPSOSH2",317,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",318,0)
 Q
"RTN","BPSOSH2",319,0)
 ;
"RTN","BPSOSH2",320,0)
SUBCLAR(DATAFND,BPSIEN,SEGREC) ;
"RTN","BPSOSH2",321,0)
 ; BPSIEN, SEGREC passed by ref., SEGREC is updated with repeating fields
"RTN","BPSOSH2",322,0)
 ; 420-DK Submission Clarification Code, a repeating group
"RTN","BPSOSH2",323,0)
 ;
"RTN","BPSOSH2",324,0)
 Q:'$G(BPSIEN(9002313.02))  ; BPS CLAIMS ien
"RTN","BPSOSH2",325,0)
 Q:'$G(BPSIEN(9002313.0201))  ; TRANSACTIONS ien (sub-file 9002313.0201)
"RTN","BPSOSH2",326,0)
 ;
"RTN","BPSOSH2",327,0)
 N BPSD0,BPSD1,BPSD2,X1,X4
"RTN","BPSOSH2",328,0)
 ;
"RTN","BPSOSH2",329,0)
 S BPSD0=BPSIEN(9002313.02),BPSD1=BPSIEN(9002313.0201),BPSD2=0
"RTN","BPSOSH2",330,0)
 ;
"RTN","BPSOSH2",331,0)
 S X4=$P($G(^BPSC(BPSD0,400,BPSD1,350)),U,4)  ; (#354) SUBM CLARIFICATION CODE COUNT
"RTN","BPSOSH2",332,0)
 ;
"RTN","BPSOSH2",333,0)
 I X4=""!($TR(X4,"0 {}")="NX") Q  ; Quit if the count is missing is only the ID
"RTN","BPSOSH2",334,0)
 ;
"RTN","BPSOSH2",335,0)
 F  S BPSD2=$O(^BPSC(BPSD0,400,BPSD1,354.01,BPSD2)) Q:'BPSD2  D
"RTN","BPSOSH2",336,0)
 .S X1=$P($G(^BPSC(BPSD0,400,BPSD1,354.01,BPSD2,1)),U,1)
"RTN","BPSOSH2",337,0)
 .I X1=""!($TR(X1," {}")="DK") Q  ; Quit if the code is missing or only the ID
"RTN","BPSOSH2",338,0)
 .S SEGREC=SEGREC_$C(28)_X1  ; FS always proceeds fld
"RTN","BPSOSH2",339,0)
 .S DATAFND=1  ; data found, result is true
"RTN","BPSOSH2",340,0)
 ;
"RTN","BPSOSH2",341,0)
 Q
"RTN","BPSOSH2",342,0)
 ;
"RTN","BPSOSH2",343,0)
OAMTCLMD(DATAFND,BPSIEN,SEGREC) ;
"RTN","BPSOSH2",344,0)
 ; BPSIEN, SEGREC passed by ref., SEGREC updated with pairs of repeating fields
"RTN","BPSOSH2",345,0)
 ; (#478.01) OTHER AMT CLAIMED MULTIPLE (sub-file 9002313.0601)
"RTN","BPSOSH2",346,0)
 ;
"RTN","BPSOSH2",347,0)
 Q:'$G(BPSIEN(9002313.02))  ; BPS CLAIMS ien
"RTN","BPSOSH2",348,0)
 Q:'$G(BPSIEN(9002313.0201))  ; TRANSACTIONS ien (sub-file 9002313.0201)
"RTN","BPSOSH2",349,0)
 ;
"RTN","BPSOSH2",350,0)
 N BPSD0,BPSD1,BPSD2,X,X2,X3
"RTN","BPSOSH2",351,0)
 ;
"RTN","BPSOSH2",352,0)
 S BPSD0=BPSIEN(9002313.02),BPSD1=BPSIEN(9002313.0201),BPSD2=0
"RTN","BPSOSH2",353,0)
 ;
"RTN","BPSOSH2",354,0)
 F  S BPSD2=$O(^BPSC(BPSD0,400,BPSD1,478.01,BPSD2)) Q:'BPSD2  D
"RTN","BPSOSH2",355,0)
 .S X=$G(^BPSC(BPSD0,400,BPSD1,478.01,BPSD2,0))
"RTN","BPSOSH2",356,0)
 .I X="" Q  ; Quit if the node is missing
"RTN","BPSOSH2",357,0)
 .S X2=$P(X,U,2)  ; (#479) OTHER AMT CLAIMED SUBMTTD QLFR
"RTN","BPSOSH2",358,0)
 .S X3=$P(X,U,3)  ; (#480) OTHER AMOUNT CLAIMED SUBMITTED
"RTN","BPSOSH2",359,0)
 .I X2=""!($TR(X2,"0 {}")="H8") Q  ; Quit if the qualifier is missing or just the ID
"RTN","BPSOSH2",360,0)
 .I X3=""!($TR(X3,"0 {}")="H9") Q  ; Quit if the amount is missing or just the ID
"RTN","BPSOSH2",361,0)
 .S SEGREC=SEGREC_$C(28)_X2_$C(28)_X3  ; FS always proceeds fld
"RTN","BPSOSH2",362,0)
 .S DATAFND=1  ; data found, result is true
"RTN","BPSOSH2",363,0)
 ;
"RTN","BPSOSH2",364,0)
 Q
"RTN","BPSOSH2",365,0)
 ;
"RTN","BPSOSIY")
0^11^B74487088
"RTN","BPSOSIY",1,0)
BPSOSIY ;BHAM ISC/FCS/DRS/DLF - Updating BPS Transaction record ;11/7/07  17:29
"RTN","BPSOSIY",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,6,7,8,10,11,20**;JUN 2004;Build 27
"RTN","BPSOSIY",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSIY",4,0)
 Q
"RTN","BPSOSIY",5,0)
 ;
"RTN","BPSOSIY",6,0)
 ; INIT - Update BPS Transaction
"RTN","BPSOSIY",7,0)
 ; Input
"RTN","BPSOSIY",8,0)
 ;   IEN59 - BPS Transaction
"RTN","BPSOSIY",9,0)
 ;   MOREDATA is not passed but assumed to exist
"RTN","BPSOSIY",10,0)
 ;   BP77 - BPS REQUEST ien
"RTN","BPSOSIY",11,0)
 ;   BPSNB - Flag indicating a Non-Billable Entry
"RTN","BPSOSIY",12,0)
 ; Returns
"RTN","BPSOSIY",13,0)
 ;   ERROR - 0 or error number
"RTN","BPSOSIY",14,0)
INIT(IEN59,BP77,BPSNB) ;EP - from BPSOSIZ
"RTN","BPSOSIY",15,0)
 N BPCOB,BPSTIME
"RTN","BPSOSIY",16,0)
 S BPSNB=+$G(BPSNB)
"RTN","BPSOSIY",17,0)
 ;
"RTN","BPSOSIY",18,0)
 ; Update the BPS Request with the Transaction IEN
"RTN","BPSOSIY",19,0)
 I $G(BP77)>0 D UPD7759^BPSOSRX4(BP77,IEN59)
"RTN","BPSOSIY",20,0)
 ;
"RTN","BPSOSIY",21,0)
 ; Initialize variables
"RTN","BPSOSIY",22,0)
 N FDA,MSG,FN,IENS,REC,B1,X1,X2,X3,ERROR,SEQ,X4
"RTN","BPSOSIY",23,0)
 N DIV,RXI,RXR
"RTN","BPSOSIY",24,0)
 S FN=9002313.59,REC=IEN59_",",ERROR=0
"RTN","BPSOSIY",25,0)
 ;
"RTN","BPSOSIY",26,0)
 ; Change status to 0% (Waiting to Start), which will reset START TIME,
"RTN","BPSOSIY",27,0)
 ;   and then to 10% (Building transaction)
"RTN","BPSOSIY",28,0)
 D SETSTAT^BPSOSU(IEN59,0)
"RTN","BPSOSIY",29,0)
 D SETSTAT^BPSOSU(IEN59,10)
"RTN","BPSOSIY",30,0)
 ;
"RTN","BPSOSIY",31,0)
 ; Get the Outpatient Site
"RTN","BPSOSIY",32,0)
 S DIV=MOREDATA("DIVISION")
"RTN","BPSOSIY",33,0)
 I 'DIV,MOREDATA("REQ TYPE")="C" S RXI=$P(IEN59,".",1),RXR=+$E($P(IEN59,".",2),1,4),DIV=$$GETDIV^BPSOSQC(RXI,RXR)
"RTN","BPSOSIY",34,0)
 ;
"RTN","BPSOSIY",35,0)
 ; If there are Prior Auth or Sub Clar Code override, create override
"RTN","BPSOSIY",36,0)
 ;   record.  Note that setting of MOREDATA("BPOVRIEN") in this routine
"RTN","BPSOSIY",37,0)
 ;   will not conflict with prior setting of this value of BPOVRIEN
"RTN","BPSOSIY",38,0)
 ;   since BPOVRIEN and BPSAUTH/BPSCLARF are mutually exclusive
"RTN","BPSOSIY",39,0)
 I $G(MOREDATA("BPSAUTH"))]""!($G(MOREDATA("BPSCLARF"))]"")!($G(MOREDATA("BPSDELAY"))]"") S MOREDATA("BPOVRIEN")=$$OVERRIDE(IEN59)
"RTN","BPSOSIY",40,0)
 ;
"RTN","BPSOSIY",41,0)
 ; Set BPSDATA into local variable
"RTN","BPSOSIY",42,0)
 S B1=$G(MOREDATA("BPSDATA",1))
"RTN","BPSOSIY",43,0)
 ;
"RTN","BPSOSIY",44,0)
 ; Get first record from MOREDATA("IBDATA") as there are some
"RTN","BPSOSIY",45,0)
 ;   non-multiple fields that need it
"RTN","BPSOSIY",46,0)
 S X2="",SEQ=$O(MOREDATA("IBDATA",""))
"RTN","BPSOSIY",47,0)
 I SEQ S X2=$G(MOREDATA("IBDATA",SEQ,2))
"RTN","BPSOSIY",48,0)
 ;
"RTN","BPSOSIY",49,0)
 ; Set non-multiple fields
"RTN","BPSOSIY",50,0)
 S FDA(FN,REC,1.05)=$G(MOREDATA("POLICY"))  ; Policy Number
"RTN","BPSOSIY",51,0)
 S FDA(FN,REC,1.07)=$$GETPHARM^BPSUTIL(DIV) ;BPS Pharmacy
"RTN","BPSOSIY",52,0)
 S FDA(FN,REC,1.08)=1   ;PINS piece
"RTN","BPSOSIY",53,0)
 S FDA(FN,REC,1.11)=$G(MOREDATA("RX"))  ;Prescription
"RTN","BPSOSIY",54,0)
 I $P($G(^BPST(IEN59,1)),U,12)=1 S FDA(FN,REC,1.12)=2 ;Resubmit after reversal
"RTN","BPSOSIY",55,0)
 S FDA(FN,REC,1.13)=$G(MOREDATA("BPOVRIEN"))  ;NCPDP Overrides
"RTN","BPSOSIY",56,0)
 S FDA(FN,REC,5)=$G(MOREDATA("PATIENT")) ;Patient
"RTN","BPSOSIY",57,0)
 I '$P($G(^BPST(IEN59,1)),U,12) S FDA(FN,REC,6)=$G(MOREDATA("SUBMIT TIME")) ;Submit Date/Time
"RTN","BPSOSIY",58,0)
 S FDA(FN,REC,9)=$P(B1,U,4)   ;Fill
"RTN","BPSOSIY",59,0)
 S FDA(FN,REC,10)=$P(B1,U,3)  ;NDC
"RTN","BPSOSIY",60,0)
 S FDA(FN,REC,11)=DIV ;Outpatient Site
"RTN","BPSOSIY",61,0)
 S FDA(FN,REC,13)=$G(MOREDATA("USER"))           ;User
"RTN","BPSOSIY",62,0)
 S FDA(FN,REC,16)=$G(MOREDATA("REQ IEN"))        ;Request IEN
"RTN","BPSOSIY",63,0)
 S FDA(FN,REC,17)=$G(MOREDATA("REQ DTTM"))       ;Request Date/Time
"RTN","BPSOSIY",64,0)
 S FDA(FN,REC,18)=$G(MOREDATA("PAYER SEQUENCE")) ;COB Indicator
"RTN","BPSOSIY",65,0)
 S FDA(FN,REC,19)=$G(MOREDATA("REQ TYPE"))       ;Transaction Type
"RTN","BPSOSIY",66,0)
 I BPSNB S FDA(FN,REC,301)=$G(MOREDATA("NON-BILLABLE REASON"))   ;Non-Billable reason text from IB
"RTN","BPSOSIY",67,0)
 I BPSNB S FDA(FN,REC,302)=$G(MOREDATA("NON-BILLABLE CLOSED"))   ;Non-Billable closed flag
"RTN","BPSOSIY",68,0)
 S FDA(FN,REC,501)=$P(B1,U,1) ;Drug/Billing Quantity
"RTN","BPSOSIY",69,0)
 S FDA(FN,REC,502)=$P(B1,U,2) ;Unit Price
"RTN","BPSOSIY",70,0)
 S FDA(FN,REC,504)=$P(X2,U,1) ;Dispense Fee
"RTN","BPSOSIY",71,0)
 S FDA(FN,REC,505)=$P(X2,U,4) ;Total Price
"RTN","BPSOSIY",72,0)
 S FDA(FN,REC,507)=$P(X2,U,5) ;Administrative Fee
"RTN","BPSOSIY",73,0)
 S FDA(FN,REC,508)=$E($P(B1,U,7),1,2) ;Dispense Unit
"RTN","BPSOSIY",74,0)
 S FDA(FN,REC,509)=$P(B1,U,8) ;Billing Quantity
"RTN","BPSOSIY",75,0)
 S FDA(FN,REC,510)=$P(B1,U,9) ;Billing Unit
"RTN","BPSOSIY",76,0)
 S FDA(FN,REC,901)=1          ;Current VA Insurer
"RTN","BPSOSIY",77,0)
 S FDA(FN,REC,1201)=$G(MOREDATA("RX ACTION")) ;RX Action
"RTN","BPSOSIY",78,0)
 S FDA(FN,REC,1202)=$G(MOREDATA("DATE OF SERVICE")) ;Date of Service
"RTN","BPSOSIY",79,0)
 S FDA(FN,REC,901.04)=$G(MOREDATA("ELIG")) ;Eligibility info returned from billing determination
"RTN","BPSOSIY",80,0)
 ;
"RTN","BPSOSIY",81,0)
 ; File secondary billing fields
"RTN","BPSOSIY",82,0)
 I $$COB59^BPSUTIL2(IEN59)=2 D SECBIL59^BPSPRRX6(.MOREDATA,IEN59)
"RTN","BPSOSIY",83,0)
 ; File non-multiple fields - Record is already defined
"RTN","BPSOSIY",84,0)
 D FILE^DIE("","FDA","MSG")
"RTN","BPSOSIY",85,0)
 I $D(MSG) D  Q ERROR
"RTN","BPSOSIY",86,0)
 . S ERROR=12
"RTN","BPSOSIY",87,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Non-multiple fields did not file")
"RTN","BPSOSIY",88,0)
 . D LOG^BPSOSL(IEN59,"MSG Array:")
"RTN","BPSOSIY",89,0)
 . D LOGARRAY^BPSOSL(IEN59,"MSG")
"RTN","BPSOSIY",90,0)
 . D LOG^BPSOSL(IEN59,"FDA Array:")
"RTN","BPSOSIY",91,0)
 . D LOGARRAY^BPSOSL(IEN59,"FDA")
"RTN","BPSOSIY",92,0)
 ;
"RTN","BPSOSIY",93,0)
 ; Build Multiple
"RTN","BPSOSIY",94,0)
 S SEQ=""
"RTN","BPSOSIY",95,0)
 F  S SEQ=$O(MOREDATA("IBDATA",SEQ)) Q:SEQ=""  D  I ERROR Q
"RTN","BPSOSIY",96,0)
 . K FDA,MSG,IENS
"RTN","BPSOSIY",97,0)
 . S FN=9002313.59902,IENS="+1,"_REC,IENS(1)=SEQ
"RTN","BPSOSIY",98,0)
 . S X1=$G(MOREDATA("IBDATA",SEQ,1)),X2=$G(MOREDATA("IBDATA",SEQ,2)),X3=$G(MOREDATA("IBDATA",SEQ,3)),X4=$G(MOREDATA("IBDATA",SEQ,4))
"RTN","BPSOSIY",99,0)
 . ;
"RTN","BPSOSIY",100,0)
 . ; Update fields
"RTN","BPSOSIY",101,0)
 . S FDA(FN,IENS,.01)=$P(X1,U,1)    ;Plan ID
"RTN","BPSOSIY",102,0)
 . S FDA(FN,IENS,902.02)=$P(X1,U,16) ;B1 Payer Sheet (Billing Request)
"RTN","BPSOSIY",103,0)
 . S FDA(FN,IENS,902.03)=$P(X1,U,2) ;BIN
"RTN","BPSOSIY",104,0)
 . S FDA(FN,IENS,902.04)=$P(X1,U,3) ;PCN
"RTN","BPSOSIY",105,0)
 . S FDA(FN,IENS,902.05)=$P(X1,U,5) ;Group ID
"RTN","BPSOSIY",106,0)
 . S FDA(FN,IENS,902.06)=$P(X1,U,6) ;Cardholder ID
"RTN","BPSOSIY",107,0)
 . S FDA(FN,IENS,902.07)=$P(X1,U,7) ;Patient Relationship Code
"RTN","BPSOSIY",108,0)
 . S FDA(FN,IENS,902.08)=$P($P(X1,U,8)," ") ;Cardholder First Name
"RTN","BPSOSIY",109,0)
 . S FDA(FN,IENS,902.09)=$P(X1,U,9)  ;Cardholder Last Name
"RTN","BPSOSIY",110,0)
 . S FDA(FN,IENS,902.1)=$P(X1,U,20)  ;Person Code
"RTN","BPSOSIY",111,0)
 . S FDA(FN,IENS,902.11)=$P(X1,U,10) ;Home Plan State
"RTN","BPSOSIY",112,0)
 . S FDA(FN,IENS,902.12)=$P(X2,U,1)  ;Dispense Fee
"RTN","BPSOSIY",113,0)
 . S FDA(FN,IENS,902.13)=$P(X2,U,2)  ;Basis of Cost Determination
"RTN","BPSOSIY",114,0)
 . S FDA(FN,IENS,902.14)=$P(X2,U,7)  ;Usual & Customary Charge
"RTN","BPSOSIY",115,0)
 . S FDA(FN,IENS,902.15)=$P(X2,U,4)  ;Gross Amt Due
"RTN","BPSOSIY",116,0)
 . S FDA(FN,IENS,902.16)=$P(X2,U,5)  ;Administrative Fee
"RTN","BPSOSIY",117,0)
 . S FDA(FN,IENS,902.17)=$P(B1,U,4)  ;Fill Number
"RTN","BPSOSIY",118,0)
 . S FDA(FN,IENS,902.18)=$P(X1,U,13) ;Software/Vendor Cert ID
"RTN","BPSOSIY",119,0)
 . S FDA(FN,IENS,902.19)=$P(X1,U,17) ;B2 Payer Sheet (Reversal)
"RTN","BPSOSIY",120,0)
 . S FDA(FN,IENS,902.2)=$P(X2,U,6)   ;Ingredient Cost
"RTN","BPSOSIY",121,0)
 . S FDA(FN,IENS,902.21)=$P(X1,U,18) ;B3 Payer Sheet (Rebill)
"RTN","BPSOSIY",122,0)
 . S FDA(FN,IENS,902.22)=$P(B1,U,5)  ;Certify Mode
"RTN","BPSOSIY",123,0)
 . S FDA(FN,IENS,902.23)=$P(B1,U,6)  ;Certification IEN
"RTN","BPSOSIY",124,0)
 . S FDA(FN,IENS,902.24)=$P(X1,U,14) ;Plan Name
"RTN","BPSOSIY",125,0)
 . S FDA(FN,IENS,902.25)=$P(X3,U,1)  ;Group Name
"RTN","BPSOSIY",126,0)
 . S FDA(FN,IENS,902.26)=$P(X3,U,2)  ;Insurance Co Phone #
"RTN","BPSOSIY",127,0)
 . S FDA(FN,IENS,902.27)=$P(X3,U,3)  ;Pharmacy Plan ID
"RTN","BPSOSIY",128,0)
 . S FDA(FN,IENS,902.28)=$P(X3,U,4)  ;Eligibility
"RTN","BPSOSIY",129,0)
 . S FDA(FN,IENS,902.32)=$P(X3,U,6)  ;COB Indicator
"RTN","BPSOSIY",130,0)
 . S FDA(FN,IENS,902.33)=$P(X3,U,5)  ;Insurance Co IEN
"RTN","BPSOSIY",131,0)
 . S FDA(FN,IENS,902.34)=$P(X1,U,19) ;E1 Payer Sheet (Eligibility)
"RTN","BPSOSIY",132,0)
 . S FDA(FN,IENS,902.35)=$P(X3,U,7)  ;Policy Number
"RTN","BPSOSIY",133,0)
 . S FDA(FN,IENS,902.36)=$P(X3,U,8)  ;Max Transactions/Transmission
"RTN","BPSOSIY",134,0)
 . ;the following fields are used only for secondary billing and for primary Tricare billing
"RTN","BPSOSIY",135,0)
 . ;in both cases only entry = 1 in the multiple will be created EVEN if the sequence is 2 (for secondary)
"RTN","BPSOSIY",136,0)
 . ;Note: actually only the entry = 1 is used for primary billing as well, others are never used
"RTN","BPSOSIY",137,0)
 . I SEQ=1 D
"RTN","BPSOSIY",138,0)
 . . S FDA(FN,IENS,902.29)=$G(MOREDATA("RTYPE"))  ;Rate Type
"RTN","BPSOSIY",139,0)
 . . S FDA(FN,IENS,902.3)=$G(MOREDATA("PRIMARY BILL"))  ;Primary bill ien
"RTN","BPSOSIY",140,0)
 . . S FDA(FN,IENS,902.31)=$G(MOREDATA("PRIOR PAYMENT"))  ;Prior payment amount
"RTN","BPSOSIY",141,0)
 . ;
"RTN","BPSOSIY",142,0)
 . ; File the data
"RTN","BPSOSIY",143,0)
 . D UPDATE^DIE("","FDA","IENS","MSG")
"RTN","BPSOSIY",144,0)
 . I $D(MSG) D
"RTN","BPSOSIY",145,0)
 .. S ERROR=13
"RTN","BPSOSIY",146,0)
 .. D LOG^BPSOSL(IEN59,$T(+0)_"-Multiple fields did not file, SEQ="_SEQ)
"RTN","BPSOSIY",147,0)
 .. D LOG^BPSOSL(IEN59,"MSG Array:")
"RTN","BPSOSIY",148,0)
 .. D LOGARRAY^BPSOSL(IEN59,"MSG")
"RTN","BPSOSIY",149,0)
 .. D LOG^BPSOSL(IEN59,"IENS Array:")
"RTN","BPSOSIY",150,0)
 .. D LOGARRAY^BPSOSL(IEN59,"IENS")
"RTN","BPSOSIY",151,0)
 .. D LOG^BPSOSL(IEN59,"FDA Array:")
"RTN","BPSOSIY",152,0)
 .. D LOGARRAY^BPSOSL(IEN59,"FDA")
"RTN","BPSOSIY",153,0)
 ;
"RTN","BPSOSIY",154,0)
 ; Quit if there was an error filing the Insurance multiple
"RTN","BPSOSIY",155,0)
 I ERROR Q ERROR
"RTN","BPSOSIY",156,0)
 ;
"RTN","BPSOSIY",157,0)
 ; Store DUR multiple if it exists
"RTN","BPSOSIY",158,0)
 N DUR,DURREC
"RTN","BPSOSIY",159,0)
 S FN=9002313.5913,DUR=0
"RTN","BPSOSIY",160,0)
 F  S DUR=$O(MOREDATA("DUR",DUR)) Q:DUR=""  D  I ERROR Q
"RTN","BPSOSIY",161,0)
 . K FDA,MSG,IENS
"RTN","BPSOSIY",162,0)
 . S DURREC=$G(MOREDATA("DUR",DUR,0))
"RTN","BPSOSIY",163,0)
 . S IENS="+1,"_REC,IENS(1)=DUR
"RTN","BPSOSIY",164,0)
 . S FDA(FN,IENS,.01)=DUR  ; DUR Counter
"RTN","BPSOSIY",165,0)
 . S FDA(FN,IENS,1)=$P(DURREC,U,2)    ; DUR Professional Service Code
"RTN","BPSOSIY",166,0)
 . S FDA(FN,IENS,2)=$P(DURREC,U,1)    ; DUR Reason for Service Code
"RTN","BPSOSIY",167,0)
 . S FDA(FN,IENS,3)=$P(DURREC,U,3)    ; DUR Result of Service Code
"RTN","BPSOSIY",168,0)
 . D UPDATE^DIE("","FDA","IENS","MSG")
"RTN","BPSOSIY",169,0)
 . I $D(MSG) D
"RTN","BPSOSIY",170,0)
 .. S ERROR=15
"RTN","BPSOSIY",171,0)
 .. D LOG^BPSOSL(IEN59,$T(+0)_"-DUR fields did not file, DUR="_DUR)
"RTN","BPSOSIY",172,0)
 .. D LOG^BPSOSL(IEN59,"DURREC="_DURREC)
"RTN","BPSOSIY",173,0)
 .. D LOG^BPSOSL(IEN59,"MSG Array:")
"RTN","BPSOSIY",174,0)
 .. D LOGARRAY^BPSOSL(IEN59,"MSG")
"RTN","BPSOSIY",175,0)
 .. D LOG^BPSOSL(IEN59,"IENS Array:")
"RTN","BPSOSIY",176,0)
 .. D LOGARRAY^BPSOSL(IEN59,"IENS")
"RTN","BPSOSIY",177,0)
 .. D LOG^BPSOSL(IEN59,"FDA Array:")
"RTN","BPSOSIY",178,0)
 .. D LOGARRAY^BPSOSL(IEN59,"FDA")
"RTN","BPSOSIY",179,0)
 ;
"RTN","BPSOSIY",180,0)
 Q ERROR
"RTN","BPSOSIY",181,0)
 ;
"RTN","BPSOSIY",182,0)
 ; OVERRIDE - Function to create override record
"RTN","BPSOSIY",183,0)
OVERRIDE(IEN59) ;
"RTN","BPSOSIY",184,0)
 ;Save values into BPS NCPDP OVERRIDES (#9002313.511)
"RTN","BPSOSIY",185,0)
 N BPSFDA,BPSFLD,BPOVRIEN,BPSMSG,BPSQ,BPSVALUE
"RTN","BPSOSIY",186,0)
 ;
"RTN","BPSOSIY",187,0)
 ; Set Name (.01) to transaction number
"RTN","BPSOSIY",188,0)
 S BPSFDA(9002313.511,"+1,",.01)=IEN59
"RTN","BPSOSIY",189,0)
 ;
"RTN","BPSOSIY",190,0)
 ; Set Created On (.02) to current date/time
"RTN","BPSOSIY",191,0)
 S BPSFDA(9002313.511,"+1,",.02)=$$NOW^BPSOSRX()
"RTN","BPSOSIY",192,0)
 ;
"RTN","BPSOSIY",193,0)
 ; Submission Clarification Code
"RTN","BPSOSIY",194,0)
 I $G(MOREDATA("BPSCLARF"))]"" D
"RTN","BPSOSIY",195,0)
 . S BPSFLD=$O(^BPSF(9002313.91,"B",420,""))
"RTN","BPSOSIY",196,0)
 . I BPSFLD]"" S BPSFDA(9002313.5111,"+2,+1,",.01)=BPSFLD,BPSFDA(9002313.5111,"+2,+1,",.02)=$E(MOREDATA("BPSCLARF"),1,8)
"RTN","BPSOSIY",197,0)
 ;
"RTN","BPSOSIY",198,0)
 ; Prior Auth Fields (Code and Number)
"RTN","BPSOSIY",199,0)
 I $G(MOREDATA("BPSAUTH"))]"" D
"RTN","BPSOSIY",200,0)
 . S BPSFLD=$O(^BPSF(9002313.91,"B",461,""))
"RTN","BPSOSIY",201,0)
 . I BPSFLD]"" S BPSFDA(9002313.5111,"+3,+1,",.01)=BPSFLD,BPSFDA(9002313.5111,"+3,+1,",.02)=$E($P(MOREDATA("BPSAUTH"),U,1),1,2)
"RTN","BPSOSIY",202,0)
 . S BPSFLD=$O(^BPSF(9002313.91,"B",462,""))
"RTN","BPSOSIY",203,0)
 . I BPSFLD]"" S BPSFDA(9002313.5111,"+4,+1,",.01)=BPSFLD,BPSFDA(9002313.5111,"+4,+1,",.02)=$E($P(MOREDATA("BPSAUTH"),U,2),1,11)
"RTN","BPSOSIY",204,0)
 ;
"RTN","BPSOSIY",205,0)
 ; Delay Reason Code - This is the IEN of the database
"RTN","BPSOSIY",206,0)
 I $G(MOREDATA("BPSDELAY"))]"" D
"RTN","BPSOSIY",207,0)
 . S BPSVALUE=$P($G(^BPS(9002313.29,MOREDATA("BPSDELAY"),0)),U,1)
"RTN","BPSOSIY",208,0)
 . I BPSVALUE="" Q
"RTN","BPSOSIY",209,0)
 . S BPSFLD=$O(^BPSF(9002313.91,"B",357,""))
"RTN","BPSOSIY",210,0)
 . I BPSFLD]"" S BPSFDA(9002313.5111,"+5,+1,",.01)=BPSFLD,BPSFDA(9002313.5111,"+5,+1,",.02)=$E(MOREDATA("BPSDELAY"),1,2)
"RTN","BPSOSIY",211,0)
 ;
"RTN","BPSOSIY",212,0)
 ; Create the record
"RTN","BPSOSIY",213,0)
 D UPDATE^DIE("","BPSFDA","BPOVRIEN","BPSMSG")
"RTN","BPSOSIY",214,0)
 ;
"RTN","BPSOSIY",215,0)
 I $G(BPOVRIEN(1))]"" S BPSQ=BPOVRIEN(1)
"RTN","BPSOSIY",216,0)
 E  S BPSQ=""
"RTN","BPSOSIY",217,0)
 Q BPSQ
"RTN","BPSOSIZ")
0^10^B18104655
"RTN","BPSOSIZ",1,0)
BPSOSIZ ;BHAM ISC/FCS/DRS/DLF - Filing BPS Transaction ;06/01/2004
"RTN","BPSOSIZ",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,10,20**;JUN 2004;Build 27
"RTN","BPSOSIZ",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSIZ",4,0)
 ;
"RTN","BPSOSIZ",5,0)
 Q
"RTN","BPSOSIZ",6,0)
 ;
"RTN","BPSOSIZ",7,0)
 ; EN - Create and/or update BPS Transaction
"RTN","BPSOSIZ",8,0)
 ; Input
"RTN","BPSOSIZ",9,0)
 ;   IEN59    - BPS Transaction number
"RTN","BPSOSIZ",10,0)
 ;   MOREDATA - Array of data created by BPSNCPD*
"RTN","BPSOSIZ",11,0)
 ;   BP77 - BPS REQUEST file ien
"RTN","BPSOSIZ",12,0)
 ;   BPSNB - (optional) Flag to indicate if this is a non-billable entry being added
"RTN","BPSOSIZ",13,0)
EN(IEN59,MOREDATA,BP77,BPSNB) ;EP - BPSOSRB
"RTN","BPSOSIZ",14,0)
 ; Initialize variables
"RTN","BPSOSIZ",15,0)
 N EXISTS,ERROR,X
"RTN","BPSOSIZ",16,0)
 S ERROR=0,BPSNB=+$G(BPSNB)
"RTN","BPSOSIZ",17,0)
 I BPSNB S BP77=""   ; for non-billable entries, we skip BPS requests processing
"RTN","BPSOSIZ",18,0)
 ;
"RTN","BPSOSIZ",19,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Building Transaction")
"RTN","BPSOSIZ",20,0)
 I BPSNB D LOG^BPSOSL(IEN59,$T(+0)_"-Start of Building Transaction for Non-Billable Entry")
"RTN","BPSOSIZ",21,0)
 ;
"RTN","BPSOSIZ",22,0)
 ; Lock the transaction
"RTN","BPSOSIZ",23,0)
 I '$$LOCK59(IEN59) D ERROR(BP77,IEN59,"Could not lock the BPS Transaction") Q
"RTN","BPSOSIZ",24,0)
 ;
"RTN","BPSOSIZ",25,0)
 ; Make sure that the record is not already IN PROGRESS
"RTN","BPSOSIZ",26,0)
 S X=+$$STATUS59^BPSOSRX(IEN59)
"RTN","BPSOSIZ",27,0)
 I X'=0,X'=31,X'=99 D ERROR(BP77,IEN59,"STATUS is "_X) Q
"RTN","BPSOSIZ",28,0)
 ;
"RTN","BPSOSIZ",29,0)
 ; Check if the BPS Transaction exists
"RTN","BPSOSIZ",30,0)
 S EXISTS=$$EXIST59(IEN59)
"RTN","BPSOSIZ",31,0)
 ;
"RTN","BPSOSIZ",32,0)
 ; If the record exists, delete all but the essential fields
"RTN","BPSOSIZ",33,0)
 I EXISTS D CLEAR59(IEN59)
"RTN","BPSOSIZ",34,0)
 ;
"RTN","BPSOSIZ",35,0)
 ; If the record does not exist, create new record and validate the IEN
"RTN","BPSOSIZ",36,0)
 I 'EXISTS S X=$$NEW59(IEN59) I X'=IEN59 D ERROR(BP77,IEN59,"NEW59 returned "_X) Q
"RTN","BPSOSIZ",37,0)
 ;
"RTN","BPSOSIZ",38,0)
 ; Update the fields.  If error is returned, log to the BPS Transaction, which
"RTN","BPSOSIZ",39,0)
 ;   we know exists at this point
"RTN","BPSOSIZ",40,0)
 S ERROR=$$INIT^BPSOSIY(IEN59,BP77,BPSNB) ;MOREDATA is passed in background, BPSNB added with patch 20
"RTN","BPSOSIZ",41,0)
 I ERROR D  Q
"RTN","BPSOSIZ",42,0)
 . D ERROR^BPSOSU($T(+0),IEN59,ERROR,"BPS Transaction not updated")
"RTN","BPSOSIZ",43,0)
 . I BPSNB D LOG^BPSOSL(IEN59,$T(+0)_"-Error BPS Transaction not updated for Non-Billable Entry- ERROR="_ERROR_".")
"RTN","BPSOSIZ",44,0)
 . D UNLOCK59(IEN59)
"RTN","BPSOSIZ",45,0)
 . Q
"RTN","BPSOSIZ",46,0)
 ;
"RTN","BPSOSIZ",47,0)
 ; Validate the transaction
"RTN","BPSOSIZ",48,0)
 I 'BPSNB D ONE59^BPSOSQA(IEN59)    ; don't perform this for Non-Billable entries ('BPSNB)
"RTN","BPSOSIZ",49,0)
 ;
"RTN","BPSOSIZ",50,0)
 ; Unlock the transaction
"RTN","BPSOSIZ",51,0)
 D UNLOCK59(IEN59)
"RTN","BPSOSIZ",52,0)
 Q
"RTN","BPSOSIZ",53,0)
 ;
"RTN","BPSOSIZ",54,0)
 ; LOCK59 - Lock Transaction
"RTN","BPSOSIZ",55,0)
LOCK59(IEN59) ;
"RTN","BPSOSIZ",56,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Lock BPS Transaction")
"RTN","BPSOSIZ",57,0)
 L +^BPST(IEN59):5
"RTN","BPSOSIZ",58,0)
 Q $T
"RTN","BPSOSIZ",59,0)
 ;
"RTN","BPSOSIZ",60,0)
 ; UNLOCK59 - Unlock record
"RTN","BPSOSIZ",61,0)
UNLOCK59(IEN59) ;
"RTN","BPSOSIZ",62,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Unlock BPS Transaction")
"RTN","BPSOSIZ",63,0)
 L -^BPST(IEN59)
"RTN","BPSOSIZ",64,0)
 Q
"RTN","BPSOSIZ",65,0)
 ;
"RTN","BPSOSIZ",66,0)
 ; EXISTS - See if the BPS Transaction already exists
"RTN","BPSOSIZ",67,0)
EXIST59(IEN59) ;
"RTN","BPSOSIZ",68,0)
 N X
"RTN","BPSOSIZ",69,0)
 S X=$$FIND1^DIC(9002313.59,,"QX","`"_IEN59)
"RTN","BPSOSIZ",70,0)
 Q $S(X>0:X,X=0:0)
"RTN","BPSOSIZ",71,0)
 ;
"RTN","BPSOSIZ",72,0)
 ; NEW59 - Create a new BPS Transaction record
"RTN","BPSOSIZ",73,0)
 ; IEN59 - BPS TRANSACTION ien
"RTN","BPSOSIZ",74,0)
NEW59(IEN59) ;
"RTN","BPSOSIZ",75,0)
 ; Initialize variables
"RTN","BPSOSIZ",76,0)
 N FDA,IEN,MSG,FN,BPSTIME,BPCOB
"RTN","BPSOSIZ",77,0)
 ;
"RTN","BPSOSIZ",78,0)
 ; The .01 node and IEN should be the transaction number
"RTN","BPSOSIZ",79,0)
 S FN=9002313.59
"RTN","BPSOSIZ",80,0)
 S (IEN(1),FDA(FN,"+1,",.01))=IEN59
"RTN","BPSOSIZ",81,0)
 ;
"RTN","BPSOSIZ",82,0)
 ; Create the new BPS Transaction record
"RTN","BPSOSIZ",83,0)
 D UPDATE^DIE("","FDA","IEN","MSG")
"RTN","BPSOSIZ",84,0)
 I $D(MSG) Q 0
"RTN","BPSOSIZ",85,0)
 Q IEN(1)
"RTN","BPSOSIZ",86,0)
 ;
"RTN","BPSOSIZ",87,0)
 ; CLEAR59 - If it exists, clear out the old values
"RTN","BPSOSIZ",88,0)
CLEAR59(IEN59) ;
"RTN","BPSOSIZ",89,0)
 ; Deletes all values except for fields:
"RTN","BPSOSIZ",90,0)
 ;   Entry # (.01)
"RTN","BPSOSIZ",91,0)
 ;   Resubmit after reversal (1.12)
"RTN","BPSOSIZ",92,0)
 ;   Result Text (202)
"RTN","BPSOSIZ",93,0)
 ;   Comments (111 multiple)
"RTN","BPSOSIZ",94,0)
 ; If reverse/resubmit, then also do not clear fields:
"RTN","BPSOSIZ",95,0)
 ;   Status (1)
"RTN","BPSOSIZ",96,0)
 ;   Submit Date/Time (6)
"RTN","BPSOSIZ",97,0)
 ;   Last Update (7)
"RTN","BPSOSIZ",98,0)
 ;   Start Date (15)
"RTN","BPSOSIZ",99,0)
 ;
"RTN","BPSOSIZ",100,0)
 ; Initialize variables
"RTN","BPSOSIZ",101,0)
 N FN,FDA,MSG,FIELD,SKIP,ENTRY
"RTN","BPSOSIZ",102,0)
 S FN=9002313.59
"RTN","BPSOSIZ",103,0)
 ;
"RTN","BPSOSIZ",104,0)
 ; Set up fields that we do not want to delete
"RTN","BPSOSIZ",105,0)
 S SKIP(1.12)="",SKIP(202)=""
"RTN","BPSOSIZ",106,0)
 I $G(MOREDATA("REVERSE THEN RESUBMIT"))=1 S SKIP(1)="",SKIP(6)="",SKIP(7)="",SKIP(15)=""
"RTN","BPSOSIZ",107,0)
 ;
"RTN","BPSOSIZ",108,0)
 ; Start with field .01 so it will not be deleted
"RTN","BPSOSIZ",109,0)
 ; Place 'non-skip' fields in FDA to be deleted
"RTN","BPSOSIZ",110,0)
 S FIELD=.01
"RTN","BPSOSIZ",111,0)
 F  S FIELD=$O(^DD(FN,FIELD)) Q:'FIELD  I '$D(SKIP(FIELD)) S FDA(FN,IEN59_",",FIELD)=""
"RTN","BPSOSIZ",112,0)
 ;
"RTN","BPSOSIZ",113,0)
 ; Delete Insurance multiple
"RTN","BPSOSIZ",114,0)
 S FN=9002313.59902,ENTRY=0
"RTN","BPSOSIZ",115,0)
 F  S ENTRY=$O(^BPST(IEN59,10,ENTRY)) Q:ENTRY="B"!(ENTRY="")  D
"RTN","BPSOSIZ",116,0)
 . S FDA(FN,ENTRY_","_IEN59_",",.01)=""
"RTN","BPSOSIZ",117,0)
 ;
"RTN","BPSOSIZ",118,0)
 ; Delete DUR multiple
"RTN","BPSOSIZ",119,0)
 S FN=9002313.5913,ENTRY=0
"RTN","BPSOSIZ",120,0)
 F  S ENTRY=$O(^BPST(IEN59,13,ENTRY)) Q:+ENTRY=0  D
"RTN","BPSOSIZ",121,0)
 . S FDA(FN,ENTRY_","_IEN59_",",.01)=""
"RTN","BPSOSIZ",122,0)
 ;
"RTN","BPSOSIZ",123,0)
 ; Delete COB OTHER PAYERS multiple
"RTN","BPSOSIZ",124,0)
 S FN=9002313.5914,ENTRY=0
"RTN","BPSOSIZ",125,0)
 F  S ENTRY=$O(^BPST(IEN59,14,ENTRY)) Q:'ENTRY  D
"RTN","BPSOSIZ",126,0)
 . S FDA(FN,ENTRY_","_IEN59_",",.01)=""
"RTN","BPSOSIZ",127,0)
 ;
"RTN","BPSOSIZ",128,0)
 ; Fileman call to do the delete
"RTN","BPSOSIZ",129,0)
 D FILE^DIE("","FDA","MSG")
"RTN","BPSOSIZ",130,0)
 ;
"RTN","BPSOSIZ",131,0)
 ; Update Result Text File with 'PREVIOUSLY['
"RTN","BPSOSIZ",132,0)
 D PREVISLY(IEN59) ; for result text field 202
"RTN","BPSOSIZ",133,0)
 Q
"RTN","BPSOSIZ",134,0)
 ;
"RTN","BPSOSIZ",135,0)
 ; PREVISLY - Add semicolon in between the result text
"RTN","BPSOSIZ",136,0)
PREVISLY(IEN59) ;EP - BPSOSRB, BPSOSU
"RTN","BPSOSIZ",137,0)
 N X
"RTN","BPSOSIZ",138,0)
 S X=$$GET1^DIQ(9002313.59,IEN59,202)
"RTN","BPSOSIZ",139,0)
 I X="" Q
"RTN","BPSOSIZ",140,0)
 S X=$E(";"_X,1,200)
"RTN","BPSOSIZ",141,0)
 N FN,FDA,MSG
"RTN","BPSOSIZ",142,0)
 S FDA(9002313.59,IEN59_",",202)=X
"RTN","BPSOSIZ",143,0)
 D FILE^DIE("","FDA","MSG")
"RTN","BPSOSIZ",144,0)
 Q
"RTN","BPSOSIZ",145,0)
 ;
"RTN","BPSOSIZ",146,0)
 ; ERROR - Log an error to the log
"RTN","BPSOSIZ",147,0)
ERROR(BP77,IEN59,ERROR) ;
"RTN","BPSOSIZ",148,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Calling BPSOSRB to handle error")
"RTN","BPSOSIZ",149,0)
 I $G(BPSNB) D LOG^BPSOSL(IEN59,$T(+0)_"-Error with Non-Billable Entry: "_ERROR)
"RTN","BPSOSIZ",150,0)
 D ERROR^BPSOSRB(BP77,IEN59,ERROR)
"RTN","BPSOSIZ",151,0)
 D UNLOCK59(IEN59)
"RTN","BPSOSIZ",152,0)
 Q
"RTN","BPSOSRB")
0^35^B39920456
"RTN","BPSOSRB",1,0)
BPSOSRB ;BHAM ISC/FCS/DRS/FLS - Process claim on processing queue ;06/01/2004
"RTN","BPSOSRB",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,10,11,20**;JUN 2004;Build 27
"RTN","BPSOSRB",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSRB",4,0)
 ;
"RTN","BPSOSRB",5,0)
 Q
"RTN","BPSOSRB",6,0)
BACKGR ;
"RTN","BPSOSRB",7,0)
 I '$$LOCKNOW^BPSOSRX("BACKGROUND") Q
"RTN","BPSOSRB",8,0)
 N TYPE,KEY1,KEY2,IEN59,IEN59PR,BPNOW,BPUNTIL
"RTN","BPSOSRB",9,0)
 N BPIEN77,BPLCKRX,BPQ,BPCOBIND,GRPLAN
"RTN","BPSOSRB",10,0)
 S BPNOW=$$NOW^BPSOSRX()
"RTN","BPSOSRB",11,0)
 ;go through all ACTIVATED
"RTN","BPSOSRB",12,0)
 S KEY1="" F  S KEY1=$O(^BPS(9002313.77,"AC",1,KEY1)) Q:KEY1=""  D
"RTN","BPSOSRB",13,0)
 . S KEY2="" F  S KEY2=$O(^BPS(9002313.77,"AC",1,KEY1,KEY2)) Q:KEY2=""  D
"RTN","BPSOSRB",14,0)
 . . S IEN59PR=+$$IEN59^BPSOSRX(KEY1,KEY2,0)
"RTN","BPSOSRB",15,0)
 . . S BPLCKRX=$$LOCKRF^BPSOSRX(KEY1,KEY2,10,IEN59PR,$T(+0)) I BPLCKRX=0 D  Q
"RTN","BPSOSRB",16,0)
 . . . D LOG^BPSOSL(IEN59PR,$T(+0)_"-Failed to $$LOCKRF^BPSOSRX.  Will retry later.")
"RTN","BPSOSRB",17,0)
 . . S BPQ=0
"RTN","BPSOSRB",18,0)
 . . S BPIEN77="" F  S BPIEN77=$O(^BPS(9002313.77,"AC",1,KEY1,KEY2,BPIEN77)) Q:(+BPIEN77=0)!(BPQ=1)  D
"RTN","BPSOSRB",19,0)
 . . . ;check DONT PROCESS UNTIL field #.08 and if it is greater than NOW then DO NOT process it
"RTN","BPSOSRB",20,0)
 . . . S BPUNTIL=+$P($G(^BPS(9002313.77,BPIEN77,0)),U,8) I BPUNTIL>BPNOW S BPQ=1 Q  ;D LOG^BPSOSL(IEN59,$T(+0)_"-The request cannot be processed until."_BPUNTIL_" Will retry later.") Q
"RTN","BPSOSRB",21,0)
 . . . ;check if PROCESS FLAG is IN PROCESS - if the earlier record for this RX refill is in progress - 
"RTN","BPSOSRB",22,0)
 . . . ;we should not process the next operation queued - go to the next refill (BPQ=1)
"RTN","BPSOSRB",23,0)
 . . . I $P($G(^BPS(9002313.77,BPIEN77,0)),U,4)=2 S BPQ=1 D  Q
"RTN","BPSOSRB",24,0)
 . . . . D LOG^BPSOSL(IEN59,$T(+0)_"-Status is 'IN PROCESS'.  Will retry later.")
"RTN","BPSOSRB",25,0)
 . . . S BPCOBIND=$P(^BPS(9002313.77,BPIEN77,0),U,3)
"RTN","BPSOSRB",26,0)
 . . . S IEN59=$$IEN59^BPSOSRX(KEY1,KEY2,BPCOBIND)
"RTN","BPSOSRB",27,0)
 . . . ; Removed code to check Insurer Asleep
"RTN","BPSOSRB",28,0)
 . . . S TYPE=$P($G(^BPS(9002313.77,+BPIEN77,1)),U,4),TYPE=$S(TYPE="C":"CLAIM",TYPE="U":"UNCLAIM",TYPE="E":"ELIGIBILITY",1:"UNKNW")
"RTN","BPSOSRB",29,0)
 . . . I TYPE="UNKNW" D ERROR(+BPIEN77,IEN59,"Request Type is unknown. Cannot be processed.") Q
"RTN","BPSOSRB",30,0)
 . . . D LOG^BPSOSL(IEN59,$T(+0)_"-Processing the Activated request "_BPIEN77)
"RTN","BPSOSRB",31,0)
 . . . D LOG^BPSOSL(IEN59,$T(+0)_"-Dequeuing.  Type is "_TYPE)
"RTN","BPSOSRB",32,0)
 . . . ; if this is ACTIVATED then make it IN PROCESS (see SETPRFLG below)
"RTN","BPSOSRB",33,0)
 . . . N TIME,MOREDATA
"RTN","BPSOSRB",34,0)
 . . . S TIME=$P($G(^BPS(9002313.77,+BPIEN77,6)),U,1) ; time requested
"RTN","BPSOSRB",35,0)
 . . . D READMORE^BPSOSRX4(BPIEN77,.MOREDATA)
"RTN","BPSOSRB",36,0)
 . . . ;now it is IN PROCESS - i.e. goes to BACKGR1 (as K ^XTMP("BPS-PROC",TYPE,KEY1,KEY2 in old logic) 
"RTN","BPSOSRB",37,0)
 . . . I +$$INPROCES^BPSOSRX4(BPIEN77)=0 D ERROR(+BPIEN77,IEN59,"Cannot change the PROCESS FLAG to IN PROCESS. Cannot be processed.") Q
"RTN","BPSOSRB",38,0)
 . . . D LOG^BPSOSL(IEN59,$T(+0)_"-The request "_BPIEN77_" has been changed to IN PROCESS")
"RTN","BPSOSRB",39,0)
 . . . I +$$BACKGR1(TYPE,KEY1,KEY2,TIME,.MOREDATA,IEN59,+BPIEN77)=0 Q
"RTN","BPSOSRB",40,0)
 . . . S BPQ=1 ; This will skip requests with the same keys as the one just processed
"RTN","BPSOSRB",41,0)
 . . I BPLCKRX D UNLCKRF^BPSOSRX(KEY1,KEY2,IEN59PR,$T(+0))
"RTN","BPSOSRB",42,0)
 D UNLOCK^BPSOSRX("BACKGROUND")
"RTN","BPSOSRB",43,0)
 Q
"RTN","BPSOSRB",44,0)
 ;
"RTN","BPSOSRB",45,0)
 ;
"RTN","BPSOSRB",46,0)
 ; BACKGR1 - Further processing of the claim
"RTN","BPSOSRB",47,0)
 ; Besides the parameter below, IEN59 also needs to be defined
"RTN","BPSOSRB",48,0)
 ; TYPE - "CLAIM", "UNCLAIM", or "ELIGIBILITY"
"RTN","BPSOSRB",49,0)
 ; KEY1 - First key of the request
"RTN","BPSOSRB",50,0)
 ; KEY2 - Second key of the request
"RTN","BPSOSRB",51,0)
 ; TIME - time requested
"RTN","BPSOSRB",52,0)
 ; MOREDATA - array with claim data
"RTN","BPSOSRB",53,0)
 ; IEN59 - BPS TRANSACTION ien
"RTN","BPSOSRB",54,0)
 ; BPS77 - BPS REQUEST file ien
"RTN","BPSOSRB",55,0)
BACKGR1(TYPE,KEY1,KEY2,TIME,MOREDATA,IEN59,BPS77) ;
"RTN","BPSOSRB",56,0)
 ; Resolve multiple requests
"RTN","BPSOSRB",57,0)
 N SKIP,SKIPREAS,BPCOBIND,RESULT,PAYABLE
"RTN","BPSOSRB",58,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Processing request "_BPS77_" with keys "_KEY1_", "_KEY2_" and type "_TYPE)
"RTN","BPSOSRB",59,0)
 S SKIP=0
"RTN","BPSOSRB",60,0)
 S BPCOBIND=$$COB59^BPSUTIL2(IEN59)
"RTN","BPSOSRB",61,0)
 S RESULT=$P($$STATUS^BPSOSRX(KEY1,KEY2,0,,BPCOBIND),U)
"RTN","BPSOSRB",62,0)
 S PAYABLE=$$PAYABLE^BPSOSRX5(RESULT)
"RTN","BPSOSRB",63,0)
 I TYPE="CLAIM" D
"RTN","BPSOSRB",64,0)
 . I $$RXDEL^BPSOS(KEY1,KEY2) S SKIP=1,SKIPREAS="Prescription is marked as DELETED or CANCELLED in Outpatient Pharmacy" Q
"RTN","BPSOSRB",65,0)
 . ;
"RTN","BPSOSRB",66,0)
 . ; Allow resubmit w/o reversal to proceed no matter the claim status (bps*1*20)
"RTN","BPSOSRB",67,0)
 . I $P($G(^BPS(9002313.77,BPS77,1)),U,1)="ERWV" Q
"RTN","BPSOSRB",68,0)
 . ;
"RTN","BPSOSRB",69,0)
 . I PAYABLE S SKIP=1,SKIPREAS="Prescription is currently paid.  Previous Result is "_RESULT Q
"RTN","BPSOSRB",70,0)
 ;
"RTN","BPSOSRB",71,0)
 I TYPE="UNCLAIM",'PAYABLE S SKIP=1,SKIPREAS="Cannot reverse - previous result was "_RESULT
"RTN","BPSOSRB",72,0)
 ;
"RTN","BPSOSRB",73,0)
 ; If the SKIP flag message is set, handle error and quit
"RTN","BPSOSRB",74,0)
 I SKIP D ERROR(BPS77,IEN59,SKIPREAS) Q 0
"RTN","BPSOSRB",75,0)
 ;
"RTN","BPSOSRB",76,0)
 ; Submit claim
"RTN","BPSOSRB",77,0)
 S MOREDATA("SUBMIT TIME")=TIME
"RTN","BPSOSRB",78,0)
 ;
"RTN","BPSOSRB",79,0)
 ; If reversal, execute reversal code and quit
"RTN","BPSOSRB",80,0)
 I TYPE="UNCLAIM" D REVERSE(IEN59,.MOREDATA,$G(BPS77)) Q 1
"RTN","BPSOSRB",81,0)
 ;
"RTN","BPSOSRB",82,0)
 ; Claims and Eligibility will fall through to here
"RTN","BPSOSRB",83,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Initiating Claim")
"RTN","BPSOSRB",84,0)
 D EN^BPSOSIZ(IEN59,.MOREDATA,$G(BPS77))
"RTN","BPSOSRB",85,0)
 Q 1
"RTN","BPSOSRB",86,0)
 ;
"RTN","BPSOSRB",87,0)
 ; Error handling - If a record can not be processed, then it needs to be
"RTN","BPSOSRB",88,0)
 ; inactivated and the next request activated
"RTN","BPSOSRB",89,0)
 ; 
"RTN","BPSOSRB",90,0)
 ; This is also called by ERROR^BPSOSIZ
"RTN","BPSOSRB",91,0)
ERROR(BPS77,IEN59,ERROR) ;
"RTN","BPSOSRB",92,0)
 I '$G(BPS77) Q
"RTN","BPSOSRB",93,0)
 I $G(ERROR)="" S ERROR="Unknown"
"RTN","BPSOSRB",94,0)
 N BPNXT77,BPRETV
"RTN","BPSOSRB",95,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Skipping "_BPS77_" because of ERROR: "_ERROR)
"RTN","BPSOSRB",96,0)
 ;
"RTN","BPSOSRB",97,0)
 ; Inactivate the current request
"RTN","BPSOSRB",98,0)
 S BPRETV=$$INACTIVE^BPSOSRX4(BPS77,ERROR)
"RTN","BPSOSRB",99,0)
 I 'BPRETV D LOG^BPSOSL(IEN59,$T(+0)_"-Could not inactivate the request: "_BPRETV) Q
"RTN","BPSOSRB",100,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Request is inactivated")
"RTN","BPSOSRB",101,0)
 ;
"RTN","BPSOSRB",102,0)
 ; See if there is a next request linked to this one
"RTN","BPSOSRB",103,0)
 ; If there is, activate it
"RTN","BPSOSRB",104,0)
 S BPNXT77=+$$GETNXREQ^BPSOSRX6(BPS77,0,0,$G(IEN59))
"RTN","BPSOSRB",105,0)
 I BPNXT77 D
"RTN","BPSOSRB",106,0)
 . S BPRETV=$$ACTIVATE^BPSOSRX4(BPNXT77)
"RTN","BPSOSRB",107,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-The next request "_BPNXT77_" has "_$S('BPRETV:"not ",1:"")_"been activated")
"RTN","BPSOSRB",108,0)
 Q
"RTN","BPSOSRB",109,0)
 ;
"RTN","BPSOSRB",110,0)
 ; Process the reversal
"RTN","BPSOSRB",111,0)
REVERSE(IEN59,MOREDATA,BP77) ;
"RTN","BPSOSRB",112,0)
 N MSG,RETVAL,REV
"RTN","BPSOSRB",113,0)
 ;
"RTN","BPSOSRB",114,0)
 ; Update BPS REQUEST with the BPS TRANSACTION IEN
"RTN","BPSOSRB",115,0)
 I $G(BP77)>0 D UPD7759^BPSOSRX4(BP77,IEN59)
"RTN","BPSOSRB",116,0)
 ;
"RTN","BPSOSRB",117,0)
 ; Log Reversal or Reversal/Resubmit message.
"RTN","BPSOSRB",118,0)
 ; Note that the reversal/resubmit message is needed
"RTN","BPSOSRB",119,0)
 ;   for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSOSRB",120,0)
 S MSG=$T(+0)_"-Initiating Reversal"
"RTN","BPSOSRB",121,0)
 D LOG^BPSOSL(IEN59,MSG)
"RTN","BPSOSRB",122,0)
 ;
"RTN","BPSOSRB",123,0)
 ; Change status to 0% (Waiting to Start), which will reset START TIME,
"RTN","BPSOSRB",124,0)
 ;   and then to 10% (Building transaction)
"RTN","BPSOSRB",125,0)
 D SETSTAT^BPSOSU(IEN59,0)
"RTN","BPSOSRB",126,0)
 D SETSTAT^BPSOSU(IEN59,10)
"RTN","BPSOSRB",127,0)
 ;
"RTN","BPSOSRB",128,0)
 ; Update specific fields of the BPS Transaction record - Submit Date (#6),
"RTN","BPSOSRB",129,0)
 ;   User (#13), Request Type (#19), Reversal Claim (#401), Reversal Response (#402),
"RTN","BPSOSRB",130,0)
 ;   Reversal Reason (#404), Reversal Request (#405), Reversal Request Date and Time (#406),
"RTN","BPSOSRB",131,0)
 ;   and RX Action (#1201)
"RTN","BPSOSRB",132,0)
 N DIE,DR,DA
"RTN","BPSOSRB",133,0)
 S DIE=9002313.59,DA=IEN59
"RTN","BPSOSRB",134,0)
 S DR="6////"_$G(MOREDATA("SUBMIT TIME"))_";13////"_$G(MOREDATA("USER"))
"RTN","BPSOSRB",135,0)
 S DR=DR_";404////"_$G(MOREDATA("REVERSAL REASON"))_";1201////"_$G(MOREDATA("RX ACTION"))
"RTN","BPSOSRB",136,0)
 S DR=DR_";19////"_$G(MOREDATA("REQ TYPE"))_";405////"_$G(MOREDATA("REQ IEN"))
"RTN","BPSOSRB",137,0)
 S DR=DR_";406////"_MOREDATA("REQ DTTM")_";401////@;402////@"
"RTN","BPSOSRB",138,0)
 ;
"RTN","BPSOSRB",139,0)
 D ^DIE
"RTN","BPSOSRB",140,0)
 ;
"RTN","BPSOSRB",141,0)
 ; Store the Payer Sequence in the log
"RTN","BPSOSRB",142,0)
 N BPSCOB
"RTN","BPSOSRB",143,0)
 S BPSCOB=$$COB59^BPSUTIL2(IEN59),BPSCOB=$S(BPSCOB=2:"-Secondary",BPSCOB=3:"-Tertiary",1:"-Primary"),BPSCOB=BPSCOB_" Insurance"
"RTN","BPSOSRB",144,0)
 D LOG^BPSOSL(IEN59,$T(+0)_BPSCOB)
"RTN","BPSOSRB",145,0)
 ;
"RTN","BPSOSRB",146,0)
 ; Store contents of BPST in the Log
"RTN","BPSOSRB",147,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Contents of ^BPST("_IEN59_") :")
"RTN","BPSOSRB",148,0)
 D LOG59^BPSOSQA(IEN59) ; Log contents of 9002313.59
"RTN","BPSOSRB",149,0)
 ;
"RTN","BPSOSRB",150,0)
 ; Add semi-colon to result text
"RTN","BPSOSRB",151,0)
 D PREVISLY^BPSOSIZ(IEN59)
"RTN","BPSOSRB",152,0)
 ;
"RTN","BPSOSRB",153,0)
 ; Construct reversal claim
"RTN","BPSOSRB",154,0)
 ;   If no reversal claim is returned, log error and quit.
"RTN","BPSOSRB",155,0)
 S REV=$$REVERSE^BPSECA8(IEN59)
"RTN","BPSOSRB",156,0)
 I REV=0 D  Q
"RTN","BPSOSRB",157,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Reversal claim not created for "_IEN59)
"RTN","BPSOSRB",158,0)
 . D ERROR^BPSOSU($T(+0),IEN59,100,"Reversal Claim not created")
"RTN","BPSOSRB",159,0)
 ;
"RTN","BPSOSRB",160,0)
 ; Update Reversal Field in the transaction
"RTN","BPSOSRB",161,0)
 S DIE=9002313.59,DA=IEN59,DR="401////"_REV
"RTN","BPSOSRB",162,0)
 D ^DIE
"RTN","BPSOSRB",163,0)
 ;
"RTN","BPSOSRB",164,0)
 ; Update Log
"RTN","BPSOSRB",165,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Reversal claim "_$P(^BPSC(REV,0),U)_" ("_REV_")")
"RTN","BPSOSRB",166,0)
 ;
"RTN","BPSOSRB",167,0)
 ; Update status to 30% (Building the claim)
"RTN","BPSOSRB",168,0)
 D SETSTAT^BPSOSU(IEN59,30)
"RTN","BPSOSRB",169,0)
 ;
"RTN","BPSOSRB",170,0)
 ; Fire off task to get this on the HL7 queue
"RTN","BPSOSRB",171,0)
 D TASK^BPSOSQA
"RTN","BPSOSRB",172,0)
 Q
"RTN","BPSOSRX")
0^20^B40932013
"RTN","BPSOSRX",1,0)
BPSOSRX ;BHAM ISC/FCS/DRS/FLS - callable from RPMS pharm ;06/01/2004
"RTN","BPSOSRX",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,10,20**;JUN 2004;Build 27
"RTN","BPSOSRX",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSRX",4,0)
 ;
"RTN","BPSOSRX",5,0)
 ; There are three callable entry points:
"RTN","BPSOSRX",6,0)
 ; $$REQST^BPSOSRX     Schedule request
"RTN","BPSOSRX",7,0)
 ; $$STATUS^BPSOSRX    Inquire about a request's status
"RTN","BPSOSRX",8,0)
 ;
"RTN","BPSOSRX",9,0)
 ; reference to ^%ZTLOAD supported by DBIA 10063
"RTN","BPSOSRX",10,0)
 ; reference to NOW^%DTC supported by DBIA 10000
"RTN","BPSOSRX",11,0)
 ; reference to ^%DT supported by DBIA 10003
"RTN","BPSOSRX",12,0)
 ;
"RTN","BPSOSRX",13,0)
 Q
"RTN","BPSOSRX",14,0)
 ;
"RTN","BPSOSRX",15,0)
 ; Schedule request
"RTN","BPSOSRX",16,0)
 ; Process all requests - Billing requests (CLAIM), Reversal (UNCLAIM)
"RTN","BPSOSRX",17,0)
 ;                        and Eligibility verification requests
"RTN","BPSOSRX",18,0)
 ;
"RTN","BPSOSRX",19,0)
 ; Input: see MKRQST^BPSOSRX3
"RTN","BPSOSRX",20,0)
 ; Return values:
"RTN","BPSOSRX",21,0)
 ;  1^BPS REQUEST ien = accepted for processing
"RTN","BPSOSRX",22,0)
 ;  0^reason = failure (should never happen)
"RTN","BPSOSRX",23,0)
REQST(BPREQTYP,KEY1,KEY2,MOREDATA,BPCOBIND,IEN59,BILLNDC,BPSKIP) ;
"RTN","BPSOSRX",24,0)
 N BPRETV,BPIEN77,BPIENS78
"RTN","BPSOSRX",25,0)
 S BPSKIP=+$G(BPSKIP)
"RTN","BPSOSRX",26,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"- Start creating request")
"RTN","BPSOSRX",27,0)
 S BPRETV=$$MKINSUR^BPSOSRX2(KEY1,KEY2,.MOREDATA,.BPIENS78)
"RTN","BPSOSRX",28,0)
 I +BPRETV=0 Q BPRETV
"RTN","BPSOSRX",29,0)
 ;create BPS REQUEST records for primary insurer only and populate its IBDATA multiple with the iens of BPS INSURER DATA
"RTN","BPSOSRX",30,0)
 S BPRETV=$$MKRQST^BPSOSRX3(BPREQTYP,KEY1,KEY2,.MOREDATA,.BPIENS78,BPCOBIND,$G(BILLNDC),BPSKIP)
"RTN","BPSOSRX",31,0)
 Q BPRETV
"RTN","BPSOSRX",32,0)
 ;
"RTN","BPSOSRX",33,0)
 ; $$STATUS(KEY1,KEY2,QUE,BPRQIEN) - Returns the Status of the request
"RTN","BPSOSRX",34,0)
 ; Input
"RTN","BPSOSRX",35,0)
 ;   KEY1 - First key of the request
"RTN","BPSOSRX",36,0)
 ;   KEY2 - Second key of the request
"RTN","BPSOSRX",37,0)
 ;   QUE (optional):  0 - Do not check if a request is on the queue 
"RTN","BPSOSRX",38,0)
 ;         1/null - Check if a request is on the queue
"RTN","BPSOSRX",39,0)
 ;   BPRQIEN (optional) -  the BPS REQUESTS (#9002313.77) IEN
"RTN","BPSOSRX",40,0)
 ;   BPCOB (optional)-the payer sequence (1- Primary, 2 Secondary), if null then 1 (primary) is assumed
"RTN","BPSOSRX",41,0)
 ;
"RTN","BPSOSRX",42,0)
 ; Returns
"RTN","BPSOSRX",43,0)
 ;    RESULT^LAST UPDATE DATE/TIME^DESCRIPTION^STATUS %
"RTN","BPSOSRX",44,0)
 ;    Returns null if there's no ECME record of this request
"RTN","BPSOSRX",45,0)
 ;
"RTN","BPSOSRX",46,0)
 ;    RESULT is either:
"RTN","BPSOSRX",47,0)
 ;      1. IN PROGRESS for incomplete requests
"RTN","BPSOSRX",48,0)
 ;      2. Final status for complete requests.  See comments for
"RTN","BPSOSRX",49,0)
 ;         BPSOSUC for complete list of possible statuses.
"RTN","BPSOSRX",50,0)
 ;      3. SCHEDULED for scheduled (not ACTIVATED yet) requests
"RTN","BPSOSRX",51,0)
 ;         
"RTN","BPSOSRX",52,0)
 ;    LAST UPDATE DATE/TIME is the Fileman date and time of the
"RTN","BPSOSRX",53,0)
 ;         last update to the status of this request.
"RTN","BPSOSRX",54,0)
 ;         
"RTN","BPSOSRX",55,0)
 ;    DESCRIPTION is either:
"RTN","BPSOSRX",56,0)
 ;      1. Incomplete requests will be the status (i.e., Waiting to Start,
"RTN","BPSOSRX",57,0)
 ;         Transmitting)
"RTN","BPSOSRX",58,0)
 ;      2. Completed requests will have the reason that the ECME process
"RTN","BPSOSRX",59,0)
 ;         was aborted if the result is  E OTHER.  Otherwise, it will
"RTN","BPSOSRX",60,0)
 ;         be similar to the RESULT
"RTN","BPSOSRX",61,0)
 ;         
"RTN","BPSOSRX",62,0)
 ;    STATUS % is the completion percentage.  Note that 99 is considered
"RTN","BPSOSRX",63,0)
 ;         complete.
"RTN","BPSOSRX",64,0)
 ;         
"RTN","BPSOSRX",65,0)
 ;    
"RTN","BPSOSRX",66,0)
STATUS(KEY1,KEY2,QUE,BPRQIEN,BPCOB) ;
"RTN","BPSOSRX",67,0)
 ; Setup needed variables
"RTN","BPSOSRX",68,0)
 N IEN59,SDT,SUBDT,BP59REQ,BPTRTYP,BP59ZERO,BP59REQ
"RTN","BPSOSRX",69,0)
 I '$G(KEY1) Q ""
"RTN","BPSOSRX",70,0)
 I $G(KEY2)="" Q ""
"RTN","BPSOSRX",71,0)
 I $G(QUE)="" S QUE=1
"RTN","BPSOSRX",72,0)
 ;
"RTN","BPSOSRX",73,0)
 ;if BPRQIEN then it is called from BPSNCPD1 to display progress to the user. So we need to check queue anyway
"RTN","BPSOSRX",74,0)
 I $G(BPRQIEN)>0 S QUE=1
"RTN","BPSOSRX",75,0)
 ;
"RTN","BPSOSRX",76,0)
 ;default COB = primary
"RTN","BPSOSRX",77,0)
 I +$G(BPCOB)=0 S BPCOB=1
"RTN","BPSOSRX",78,0)
 ;
"RTN","BPSOSRX",79,0)
 ;get IEN of BPS TRANSACTION
"RTN","BPSOSRX",80,0)
 S IEN59=$$IEN59(KEY1,KEY2,BPCOB)
"RTN","BPSOSRX",81,0)
 ;
"RTN","BPSOSRX",82,0)
 ;read zeroth node of the BPS TRANSACTION record
"RTN","BPSOSRX",83,0)
 S BP59ZERO=$G(^BPST(IEN59,0))
"RTN","BPSOSRX",84,0)
 ;
"RTN","BPSOSRX",85,0)
 ; check for TRI/CVA non-billable entry. Status is "" for these BPS Transaction entries.  BPS*1*20.
"RTN","BPSOSRX",86,0)
 I $$NB^BPSSCR03(IEN59) Q ""
"RTN","BPSOSRX",87,0)
 ;
"RTN","BPSOSRX",88,0)
 ;if doesn't have BPS TRANSACTION record AND doesn't have any BPS REQUEST records then
"RTN","BPSOSRX",89,0)
 ;this is an old request OR it is not e-billable - so use the old logic,
"RTN","BPSOSRX",90,0)
 ;which was used before COB patch, so this is for primary claims only.
"RTN","BPSOSRX",91,0)
 I BPCOB=1 I $G(BPRQIEN)="" I BP59ZERO="" I '$D(^BPS(9002313.77,"D",KEY1,KEY2,BPCOB)) Q $$OLDSTAT^BPSOSRX6(KEY1,KEY2,$G(QUE))
"RTN","BPSOSRX",92,0)
 ;
"RTN","BPSOSRX",93,0)
 ;if doesn't have BPS TRANSACTION record (not created yet) AND has BPS REQUEST record(s)
"RTN","BPSOSRX",94,0)
 I BP59ZERO="" Q $$QUESTAT(KEY1,KEY2,BPCOB)
"RTN","BPSOSRX",95,0)
 ;
"RTN","BPSOSRX",96,0)
 ;get transaction type
"RTN","BPSOSRX",97,0)
 S BPTRTYP=$P(BP59ZERO,U,15)
"RTN","BPSOSRX",98,0)
 ;if Transaction type is not defined then this is an OLD request so use the old logic
"RTN","BPSOSRX",99,0)
 ;which was used before COB patch, so this is for primary claims only.
"RTN","BPSOSRX",100,0)
 I BPCOB=1 I $G(BPRQIEN)="" I BPTRTYP="" Q $$OLDSTAT^BPSOSRX6(KEY1,KEY2,$G(QUE))
"RTN","BPSOSRX",101,0)
 ;
"RTN","BPSOSRX",102,0)
 ;get the current BPS REQUEST
"RTN","BPSOSRX",103,0)
 S BP59REQ=$$GETRQST^BPSUTIL2(IEN59)
"RTN","BPSOSRX",104,0)
 I $G(BP59REQ)="" Q $$QUESTAT(KEY1,KEY2,BPCOB)
"RTN","BPSOSRX",105,0)
 ;
"RTN","BPSOSRX",106,0)
 ;get request date/time
"RTN","BPSOSRX",107,0)
 S SDT=$P($G(^BPS(9002313.77,+$G(BP59REQ),6)),U,1) ;REQUEST DATE AND TIME
"RTN","BPSOSRX",108,0)
 ;
"RTN","BPSOSRX",109,0)
 ; Loop: Get data, quit if times and status match (no change during gather)
"RTN","BPSOSRX",110,0)
 N A,C,T1,T2,S1,S2
"RTN","BPSOSRX",111,0)
 F  D  I T1=T2,S1=S2 Q
"RTN","BPSOSRX",112,0)
 . S T1=$$LASTUP59^BPSOSRX(IEN59)
"RTN","BPSOSRX",113,0)
 . S S1=$$STATUS59^BPSOSRX(IEN59)
"RTN","BPSOSRX",114,0)
 . I S1=99 D  ; completed
"RTN","BPSOSRX",115,0)
 . . S A=$$CATEG^BPSOSUC(IEN59)
"RTN","BPSOSRX",116,0)
 . . S C=$$RESTXT59^BPSOSRX(IEN59)
"RTN","BPSOSRX",117,0)
 . I S1'=99 D
"RTN","BPSOSRX",118,0)
 . . S A="IN PROGRESS"
"RTN","BPSOSRX",119,0)
 . . S C=$$STATI^BPSOSU($S(S1="":10,1:S1))
"RTN","BPSOSRX",120,0)
 . S T2=$$LASTUP59^BPSOSRX(IEN59)
"RTN","BPSOSRX",121,0)
 . S S2=$$STATUS59^BPSOSRX(IEN59)
"RTN","BPSOSRX",122,0)
 ;
"RTN","BPSOSRX",123,0)
 ; If the queue parameter is set and the submit date from the queue
"RTN","BPSOSRX",124,0)
 ;   follows the SUBMIT DATE/LAST UPDATE date from BPS TRANSACTION 
"RTN","BPSOSRX",125,0)
 ;   or the request is still on the queue, then change the response
"RTN","BPSOSRX",126,0)
 ;   to IN PROGRESS^Submit Date^WAITING TO START
"RTN","BPSOSRX",127,0)
 S SUBDT=$$SUBMIT59^BPSOSRX(IEN59)
"RTN","BPSOSRX",128,0)
 I SUBDT="" S SUBDT=T1
"RTN","BPSOSRX",129,0)
 ;
"RTN","BPSOSRX",130,0)
 ;if we need to check the queue
"RTN","BPSOSRX",131,0)
 I $G(QUE),$$QUETIME(KEY1,KEY2,BPCOB,1)>SUBDT S A="IN PROGRESS",T1=SDT,S1=-1,C=$$STATI^BPSOSU(0)
"RTN","BPSOSRX",132,0)
 I $G(QUE),$$QUETIME(KEY1,KEY2,BPCOB,0)>SUBDT S A="IN PROGRESS",T1=SDT,S1=-1,C=$$STATI^BPSOSU(0)
"RTN","BPSOSRX",133,0)
 I $G(QUE),$$QUETIME(KEY1,KEY2,BPCOB,2)>SUBDT S A="IN PROGRESS",T1=SDT,S1=-1,C=$$STATI^BPSOSU(0) ;To check IN PROCESS
"RTN","BPSOSRX",134,0)
 ;
"RTN","BPSOSRX",135,0)
 ; Return results
"RTN","BPSOSRX",136,0)
 Q A_U_T1_U_$E(C,1,255-$L(A)-$L(T1)-2)_U_S1
"RTN","BPSOSRX",137,0)
 ;
"RTN","BPSOSRX",138,0)
 ;the most current queue status as text
"RTN","BPSOSRX",139,0)
QUESTAT(KEY1,KEY2,BPCOB) ;
"RTN","BPSOSRX",140,0)
 I $D(^BPS(9002313.77,"D",KEY1,KEY2,BPCOB,2)) Q "IN PROGRESS"_U_$$QUETIME(KEY1,KEY2,BPCOB,2)_U_$$STATI^BPSOSU(-96)_U_-1
"RTN","BPSOSRX",141,0)
 I $D(^BPS(9002313.77,"D",KEY1,KEY2,BPCOB,1)) Q "IN PROGRESS"_U_$$QUETIME(KEY1,KEY2,BPCOB,1)_U_$$STATI^BPSOSU(0)_U_-1
"RTN","BPSOSRX",142,0)
 I $D(^BPS(9002313.77,"D",KEY1,KEY2,BPCOB,0)) Q "IN PROGRESS"_U_$$QUETIME(KEY1,KEY2,BPCOB,0)_U_$$STATI^BPSOSU(-99)_U_-1
"RTN","BPSOSRX",143,0)
 ;if PROCESS FLAG=3,4,5 return null
"RTN","BPSOSRX",144,0)
 Q ""
"RTN","BPSOSRX",145,0)
 ;
"RTN","BPSOSRX",146,0)
 ;the most current queue status as process flag
"RTN","BPSOSRX",147,0)
QUECUR(KEY1,KEY2,BPCOB) ;
"RTN","BPSOSRX",148,0)
 I $D(^BPS(9002313.77,"D",KEY1,KEY2,BPCOB,3)) Q 3
"RTN","BPSOSRX",149,0)
 I $D(^BPS(9002313.77,"D",KEY1,KEY2,BPCOB,2)) Q 2
"RTN","BPSOSRX",150,0)
 I $D(^BPS(9002313.77,"D",KEY1,KEY2,BPCOB,1)) Q 1
"RTN","BPSOSRX",151,0)
 I $D(^BPS(9002313.77,"D",KEY1,KEY2,BPCOB,0)) Q 0
"RTN","BPSOSRX",152,0)
 ;if PROCESS FLAG=3,4,5 return null
"RTN","BPSOSRX",153,0)
 Q ""
"RTN","BPSOSRX",154,0)
 ;
"RTN","BPSOSRX",155,0)
 ;the most current queue status as process flag
"RTN","BPSOSRX",156,0)
QUETIME(KEY1,KEY2,BPCOB,BPROCFL) ;
"RTN","BPSOSRX",157,0)
 N BP77
"RTN","BPSOSRX",158,0)
 S BP77=$O(^BPS(9002313.77,"D",KEY1,KEY2,BPCOB,BPROCFL,0))
"RTN","BPSOSRX",159,0)
 I BP77>0 Q $P($G(^BPS(9002313.77,+BP77,6)),U,1) ;REQUEST DATE AND TIME
"RTN","BPSOSRX",160,0)
 Q ""
"RTN","BPSOSRX",161,0)
 ;
"RTN","BPSOSRX",162,0)
NOW() N %,%H,%I,X D NOW^%DTC Q %
"RTN","BPSOSRX",163,0)
 ;
"RTN","BPSOSRX",164,0)
 ; RESTXT59 - Return first semi-colon piece of the Result Text (202) field
"RTN","BPSOSRX",165,0)
 ;    from BPS Transaction
"RTN","BPSOSRX",166,0)
RESTXT59(IEN59) ;
"RTN","BPSOSRX",167,0)
 I '$G(IEN59) Q ""
"RTN","BPSOSRX",168,0)
 Q $P($P($G(^BPST(IEN59,2)),U,2,99),";",1)
"RTN","BPSOSRX",169,0)
 ;
"RTN","BPSOSRX",170,0)
 ; LASTUP59 - Return last update date/time from BPS Transactions
"RTN","BPSOSRX",171,0)
LASTUP59(IEN59) ;
"RTN","BPSOSRX",172,0)
 I '$G(IEN59) Q ""
"RTN","BPSOSRX",173,0)
 Q $P($G(^BPST(IEN59,0)),U,8)
"RTN","BPSOSRX",174,0)
 ;
"RTN","BPSOSRX",175,0)
 ; STATUS59 returns STATUS field from BPS Transaction
"RTN","BPSOSRX",176,0)
 ; Note: 99 means complete
"RTN","BPSOSRX",177,0)
STATUS59(IEN59) ;
"RTN","BPSOSRX",178,0)
 I '$G(IEN59) Q ""
"RTN","BPSOSRX",179,0)
 Q $P($G(^BPST(IEN59,0)),U,2)
"RTN","BPSOSRX",180,0)
 ;
"RTN","BPSOSRX",181,0)
 ; SUBMIT59 - Return Submit date/time from BPS Transactions (#6) SUBMIT DATE/TIME
"RTN","BPSOSRX",182,0)
SUBMIT59(IEN59) ;
"RTN","BPSOSRX",183,0)
 I '$G(IEN59) Q ""
"RTN","BPSOSRX",184,0)
 Q $P($G(^BPST(IEN59,0)),U,7)
"RTN","BPSOSRX",185,0)
 ;
"RTN","BPSOSRX",186,0)
 ; Utilities
"RTN","BPSOSRX",187,0)
 ;
"RTN","BPSOSRX",188,0)
 ;  LOCKING:  Just one user of this routine at a time.
"RTN","BPSOSRX",189,0)
 ;  X = "SUBMIT" to interlock the request submission
"RTN","BPSOSRX",190,0)
 ;  X = "BACKGROUND" to interlock the background job
"RTN","BPSOSRX",191,0)
LOCK(X,TIMEOUT) ;EP - BPSOSRB
"RTN","BPSOSRX",192,0)
 I $G(TIMEOUT)="" S TIMEOUT=0
"RTN","BPSOSRX",193,0)
 L +^XTMP("BPS-PROC",X):TIMEOUT
"RTN","BPSOSRX",194,0)
 Q $T
"RTN","BPSOSRX",195,0)
 ;
"RTN","BPSOSRX",196,0)
LOCKNOW(X) ;EP - BPSOSRB
"RTN","BPSOSRX",197,0)
 L +^XTMP("BPS-PROC",X):0
"RTN","BPSOSRX",198,0)
 Q $T
"RTN","BPSOSRX",199,0)
 ;
"RTN","BPSOSRX",200,0)
UNLOCK(X) ;EP - BPSOSRB
"RTN","BPSOSRX",201,0)
 L -^XTMP("BPS-PROC",X)
"RTN","BPSOSRX",202,0)
 Q
"RTN","BPSOSRX",203,0)
 ;
"RTN","BPSOSRX",204,0)
RUNNING() ;
"RTN","BPSOSRX",205,0)
 I '$$LOCKNOW("BACKGROUND") Q  ; it is running; don't start another
"RTN","BPSOSRX",206,0)
 D UNLOCK("BACKGROUND") ; it's not running; release our probing lock
"RTN","BPSOSRX",207,0)
 D TASK
"RTN","BPSOSRX",208,0)
 Q
"RTN","BPSOSRX",209,0)
 ;
"RTN","BPSOSRX",210,0)
 ;KEY1 - Either Prescription IEN (#52) or PATIENT IEN (#2)
"RTN","BPSOSRX",211,0)
 ;KEY2 - Either Fill # or Policy Number
"RTN","BPSOSRX",212,0)
 ;       For Policy Number, the value passed in should be 9000 plus
"RTN","BPSOSRX",213,0)
 ;       the policy number
"RTN","BPSOSRX",214,0)
 ;BPCOBIND - COB indicator
"RTN","BPSOSRX",215,0)
IEN59(KEY1,KEY2,BPCOBIND) ;EP - from BPSOS, BPSOSRB
"RTN","BPSOSRX",216,0)
 I '$G(KEY1) Q ""
"RTN","BPSOSRX",217,0)
 I '$G(KEY2) S KEY2=0 ;If no KEY2, assume RX/Fill and default to Original Fill
"RTN","BPSOSRX",218,0)
 I +$G(BPCOBIND)=0 S BPCOBIND=1 ;default is primary
"RTN","BPSOSRX",219,0)
 I BPCOBIND>3!(BPCOBIND<1) Q ""
"RTN","BPSOSRX",220,0)
 Q KEY1_"."_$TR($J(KEY2,4)," ","0")_+BPCOBIND
"RTN","BPSOSRX",221,0)
 ;
"RTN","BPSOSRX",222,0)
 ;
"RTN","BPSOSRX",223,0)
 ; The background job
"RTN","BPSOSRX",224,0)
TASK N X,Y,%DT
"RTN","BPSOSRX",225,0)
 S X="N",%DT="ST"
"RTN","BPSOSRX",226,0)
 D ^%DT,TASKAT(Y)
"RTN","BPSOSRX",227,0)
 Q
"RTN","BPSOSRX",228,0)
 ;
"RTN","BPSOSRX",229,0)
TASKAT(ZTDTH) ;
"RTN","BPSOSRX",230,0)
 N ZTIO S ZTIO="" ; no device
"RTN","BPSOSRX",231,0)
 N ZTRTN S ZTRTN="BACKGR^BPSOSRB"
"RTN","BPSOSRX",232,0)
 D ^%ZTLOAD
"RTN","BPSOSRX",233,0)
 Q
"RTN","BPSOSRX",234,0)
 ;
"RTN","BPSOSRX",235,0)
 ;Lock key pair  - So two (or more) requests cannot be processed simultaneously
"RTN","BPSOSRX",236,0)
LOCKRF(KEY1,KEY2,BPTIMOUT,IEN59,BPSRC) ;EP - BPSOSRB
"RTN","BPSOSRX",237,0)
 N BPRET
"RTN","BPSOSRX",238,0)
 L +^XTMP("BPSOSRX-RX/REF",KEY1,KEY2):+$G(BPTIMOUT)
"RTN","BPSOSRX",239,0)
 S BPRET=$T
"RTN","BPSOSRX",240,0)
 Q BPRET
"RTN","BPSOSRX",241,0)
 ;
"RTN","BPSOSRX",242,0)
 ;UnLock key pair
"RTN","BPSOSRX",243,0)
UNLCKRF(KEY1,KEY2,IEN59,BPSRC) ;EP - BPSOSRB
"RTN","BPSOSRX",244,0)
 L -^XTMP("BPSOSRX-RX/REF",KEY1,KEY2)
"RTN","BPSOSRX",245,0)
 ;I $G(IEN59)>0 D LOG^BPSOSL(IEN59,$G(BPSRC)_"-Unlock keys: "_KEY1_"/"_KEY2)
"RTN","BPSOSRX",246,0)
 Q
"RTN","BPSOSRX",247,0)
 ;BPSOSRX
"RTN","BPSOSRX5")
0^32^B43227076
"RTN","BPSOSRX5",1,0)
BPSOSRX5 ;ALB/SS - ECME REQUESTS ;10-JAN-08
"RTN","BPSOSRX5",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8,10,11,20**;JUN 2004;Build 27
"RTN","BPSOSRX5",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSRX5",4,0)
 ;
"RTN","BPSOSRX5",5,0)
 ;check if according the last response the payer IS going to PAY
"RTN","BPSOSRX5",6,0)
 ;(Note: reversals can be done only on previously payable claims, if reversal failed then the claim stays PAYABLE)
"RTN","BPSOSRX5",7,0)
PAYABLE(BPRESP) ;
"RTN","BPSOSRX5",8,0)
 Q ",E PAYABLE,E DUPLICATE,E REVERSAL REJECTED,E REVERSAL OTHER,E REVERSAL UNSTRANDED,"[(","_BPRESP_",")
"RTN","BPSOSRX5",9,0)
 ;
"RTN","BPSOSRX5",10,0)
 ;Action type
"RTN","BPSOSRX5",11,0)
ACTTYPE(BWHR) ;
"RTN","BPSOSRX5",12,0)
 Q:",AREV,CRLR,CRLX,DC,DE,EREV,HLD,OREV,RS,"[(","_BWHR_",") "U"  ;UNCLAIM (reversal)
"RTN","BPSOSRX5",13,0)
 Q:",CRLB,ED,ERES,P2S,"[(","_BWHR_",") "UC"  ;UNCLAIM (reversal) + CLAIM (resubmit)
"RTN","BPSOSRX5",14,0)
 Q:",BB,CRRL,ERWV,ERNB,OF,PC,PE,PL,PP,RF,RN,RRL,RSNB,P2,"[(","_BWHR_",") "C"  ;CLAIM (the very first submit OR resubmit only)
"RTN","BPSOSRX5",15,0)
 Q:BWHR="ELIG" "E"
"RTN","BPSOSRX5",16,0)
 Q ""  ;unknown
"RTN","BPSOSRX5",17,0)
 ;
"RTN","BPSOSRX5",18,0)
 ;Check ECME availability at the site
"RTN","BPSOSRX5",19,0)
 ;return :
"RTN","BPSOSRX5",20,0)
 ; 1^CLMSTAT -off
"RTN","BPSOSRX5",21,0)
 ; null -on
"RTN","BPSOSRX5",22,0)
ECMESITE(SITE) ;
"RTN","BPSOSRX5",23,0)
 I '$G(SITE) Q "1^No Site Information"
"RTN","BPSOSRX5",24,0)
 I '$$ECMEON^BPSUTIL(SITE) Q "1^ECME switch is not on for the site"
"RTN","BPSOSRX5",25,0)
 Q ""
"RTN","BPSOSRX5",26,0)
 ;
"RTN","BPSOSRX5",27,0)
 ; This is called by STATUS99^BPSOSU when the status of the current claim becomes 99%.
"RTN","BPSOSRX5",28,0)
 ; The purpose is to decide what to with the new next request in the chain
"RTN","BPSOSRX5",29,0)
 ;
"RTN","BPSOSRX5",30,0)
 ; Example:
"RTN","BPSOSRX5",31,0)
 ;  If this request (Request A) is the last one in the chain and we just received a new request
"RTN","BPSOSRX5",32,0)
 ;   (Request B) for the same keys, then Request B needs to be activated after Request A has been completed.  Who will do this?
"RTN","BPSOSRX5",33,0)
 ;  Situation 1:
"RTN","BPSOSRX5",34,0)
 ;    If this code REQST99^BPSOSRX5 gets the lock first then it will not be able to activate Request B (because we
"RTN","BPSOSRX5",35,0)
 ;    don't have it in the NEXT REQUEST field). So Request A will be completed and when the REQST^BPSOSRX code gets
"RTN","BPSOSRX5",36,0)
 ;    the lock it will find Request A marked as completed and will not populate the NEXT REQUEST field of Request A.
"RTN","BPSOSRX5",37,0)
 ;    Instead it will just activate Request B.
"RTN","BPSOSRX5",38,0)
 ;  Situation 2:
"RTN","BPSOSRX5",39,0)
 ;    If the REQST^BPSOSRX code gets the lock first then it will check the status of the Request A and since it is
"RTN","BPSOSRX5",40,0)
 ;    still "IN PROCESS", then it will populate the NEXT REQUEST field of the Request 1 with ien of Request 2, and
"RTN","BPSOSRX5",41,0)
 ;    then release the lock.  Then when the REQST99^BPSOSRX5 gets the lock it checks the NEXT REQUEST field and
"RTN","BPSOSRX5",42,0)
 ;    activate the request 2
"RTN","BPSOSRX5",43,0)
 ;
"RTN","BPSOSRX5",44,0)
 ;Input:
"RTN","BPSOSRX5",45,0)
 ;IEN59 - BPS TRANSACTION IEN
"RTN","BPSOSRX5",46,0)
 ;BPCLMST - claim status
"RTN","BPSOSRX5",47,0)
 ;     For Billing Requests (type= C):
"RTN","BPSOSRX5",48,0)
 ;       E PAYABLE, E CAPTURED, E DUPLICATE, E REJECTED, E OTHER, and
"RTN","BPSOSRX5",49,0)
 ;       E UNSTRANDED
"RTN","BPSOSRX5",50,0)
 ;
"RTN","BPSOSRX5",51,0)
 ;     For Reversals (type=U):
"RTN","BPSOSRX5",52,0)
 ;       E REVERSAL ACCEPTED, E REVERSAL REJECTED, E REVERSAL OTHER, and
"RTN","BPSOSRX5",53,0)
 ;       E REVERSAL UNSTRANDED
"RTN","BPSOSRX5",54,0)
 ;
"RTN","BPSOSRX5",55,0)
 ;     For Eligibility (type=E):
"RTN","BPSOSRX5",56,0)
 ;       E ELIGIBILITY ACCEPTED, E ELIGIBILITY REJECTED, E ELIGIBILITY OTHER, and
"RTN","BPSOSRX5",57,0)
 ;       E ELIGIBILITY UNSTRANDED
"RTN","BPSOSRX5",58,0)
 ;
"RTN","BPSOSRX5",59,0)
 ;Output:
"RTN","BPSOSRX5",60,0)
 ; return 0 if there is no next request
"RTN","BPSOSRX5",61,0)
 ; otherwise - return IEN of next BPS REQUEST
"RTN","BPSOSRX5",62,0)
REQST99(IEN59,BPCLMST) ;
"RTN","BPSOSRX5",63,0)
 N BP77,KEY1,KEY2,BPRETV,BPTYPE,RESAFTRV,BPPAYSEQ,BPTYPNXT,BPFLG
"RTN","BPSOSRX5",64,0)
 N DOS,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,BPCOBIND,BPDUR
"RTN","BPSOSRX5",65,0)
 S RESAFTRV=0
"RTN","BPSOSRX5",66,0)
 I '$G(IEN59) D LOG^BPSOSL(IEN59,$T(+0)_"-Transaction IEN not passed in") Q 0
"RTN","BPSOSRX5",67,0)
 S BPCLMST=$G(BPCLMST)
"RTN","BPSOSRX5",68,0)
 ;
"RTN","BPSOSRX5",69,0)
 ; Get Keys to the request file
"RTN","BPSOSRX5",70,0)
 S BP77=$$GETRQST^BPSUTIL2(IEN59)
"RTN","BPSOSRX5",71,0)
 I 'BP77 D LOG^BPSOSL(IEN59,$T(+0)_"-BPS Request Pointer not found") Q 0
"RTN","BPSOSRX5",72,0)
 S KEY1=$P($G(^BPS(9002313.77,BP77,0)),U,1)
"RTN","BPSOSRX5",73,0)
 S KEY2=$P($G(^BPS(9002313.77,BP77,0)),U,2)
"RTN","BPSOSRX5",74,0)
 I 'KEY1!(KEY2="") D LOG^BPSOSL(IEN59,$T(+0)_"-Request keys not found for "_BP77) Q 0
"RTN","BPSOSRX5",75,0)
 ;
"RTN","BPSOSRX5",76,0)
 ; Get lock
"RTN","BPSOSRX5",77,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Attempting to lock request with keys "_KEY1_", "_KEY2)
"RTN","BPSOSRX5",78,0)
 S BPRETV=$$LOCKRF^BPSOSRX(KEY1,KEY2,10,IEN59,$T(+0))
"RTN","BPSOSRX5",79,0)
 I 'BPRETV D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot lock keys in REQST99") Q 0
"RTN","BPSOSRX5",80,0)
 ;
"RTN","BPSOSRX5",81,0)
 ; Mark this request as completed
"RTN","BPSOSRX5",82,0)
 N BPNXT77
"RTN","BPSOSRX5",83,0)
 S BPRETV=$$COMPLETD^BPSOSRX4(BP77) I +BPRETV=0 D  Q 0
"RTN","BPSOSRX5",84,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot change the PROCESS FLAG to COMPLETED: "_$P(BPRETV,U,2))
"RTN","BPSOSRX5",85,0)
 . D UNLCKRF^BPSOSRX(KEY1,KEY2,IEN59,$T(+0))
"RTN","BPSOSRX5",86,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-The request "_BP77_" has been changed to COMPLETED ("_+$P($G(^BPS(9002313.77,BP77,0)),U,4)_")")
"RTN","BPSOSRX5",87,0)
 ;
"RTN","BPSOSRX5",88,0)
 ; Get the request type and get the next request in the list
"RTN","BPSOSRX5",89,0)
 ; For eligibility, do not deleted duplicate request.
"RTN","BPSOSRX5",90,0)
 ; For others, do delete duplicate request
"RTN","BPSOSRX5",91,0)
 S BPTYPE=$P($G(^BPS(9002313.77,BP77,1)),U,4)
"RTN","BPSOSRX5",92,0)
 S BPFLG=$S(BPTYPE="E":0,1:1)
"RTN","BPSOSRX5",93,0)
 S BPNXT77=+$$GETNXREQ^BPSOSRX6(BP77,BPFLG,BPFLG,IEN59)
"RTN","BPSOSRX5",94,0)
 ;
"RTN","BPSOSRX5",95,0)
 ; If this was reversal (UNCLAIM), the next request is "CLAIM", 
"RTN","BPSOSRX5",96,0)
 ;   and the RX action is = resubmit (ERES), then this is a submit after reversal
"RTN","BPSOSRX5",97,0)
 I BPTYPE="U",$P($G(^BPS(9002313.77,+BPNXT77,1)),U,4)="C",$P($G(^BPS(9002313.77,+BPNXT77,1)),U,1)="ERES" S RESAFTRV=1
"RTN","BPSOSRX5",98,0)
 I RESAFTRV=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Reverse then Resubmit attempt")
"RTN","BPSOSRX5",99,0)
 ;
"RTN","BPSOSRX5",100,0)
 S BPPAYSEQ=$$COB59^BPSUTIL2(IEN59) ;payer sequence
"RTN","BPSOSRX5",101,0)
 ;
"RTN","BPSOSRX5",102,0)
 ; If not eligibility and the current request failed, then cancel and delete all subsequent requests and quit
"RTN","BPSOSRX5",103,0)
 I BPTYPE'="E",$$SUCCESS^BPSOSRX7(BPTYPE,BPCLMST)=0 D  Q 0
"RTN","BPSOSRX5",104,0)
 . ; If secondary claim was rejected with certain reject codes - send it to Pharmacy worklist
"RTN","BPSOSRX5",105,0)
 . ; DMB-Not sure if this is valid.  Call from BPSOSQL to DURSYNC should have sent these already.
"RTN","BPSOSRX5",106,0)
 . I BPTYPE="C",BPPAYSEQ=2 I $$SENDREJ^BPSWRKLS(KEY1,KEY2,IEN59,BPPAYSEQ)
"RTN","BPSOSRX5",107,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Current request failed with "_BPCLMST_" - removing this and all sequential requests")
"RTN","BPSOSRX5",108,0)
 . I RESAFTRV=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot do Reverse then Resubmit attempt - Reversal status: "_BPCLMST)
"RTN","BPSOSRX5",109,0)
 . D DELALLRQ^BPSOSRX7(BP77,IEN59)
"RTN","BPSOSRX5",110,0)
 . D UNLCKRF^BPSOSRX(KEY1,KEY2,IEN59,$T(+0))
"RTN","BPSOSRX5",111,0)
 ;
"RTN","BPSOSRX5",112,0)
 ; If there is no "next request" for the RX/refill - delete the completed request and quit with 0
"RTN","BPSOSRX5",113,0)
 I BPNXT77=0 D  Q 0
"RTN","BPSOSRX5",114,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-There is no NEXT REQUEST.  Deleting the current request")
"RTN","BPSOSRX5",115,0)
 . D DELREQST^BPSOSRX4(BP77,IEN59)
"RTN","BPSOSRX5",116,0)
 . D UNLCKRF^BPSOSRX(KEY1,KEY2,IEN59,$T(+0))
"RTN","BPSOSRX5",117,0)
 ;
"RTN","BPSOSRX5",118,0)
 ; If there is a NEXT REQUEST
"RTN","BPSOSRX5",119,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-The NEXT "_$P($G(^BPS(9002313.77,+BPNXT77,1)),U,4)_"-type REQUEST is "_BPNXT77)
"RTN","BPSOSRX5",120,0)
 ;
"RTN","BPSOSRX5",121,0)
 S BPTYPNXT=$P($G(^BPS(9002313.77,+BPNXT77,1)),U,4) ;action type of the next request
"RTN","BPSOSRX5",122,0)
 ;
"RTN","BPSOSRX5",123,0)
 ; If eligibility, activate the next request
"RTN","BPSOSRX5",124,0)
 I BPTYPE="E" S BPRETV=$$ACTIVATE^BPSNCPD4(BPNXT77,"E") G END
"RTN","BPSOSRX5",125,0)
 ;
"RTN","BPSOSRX5",126,0)
 ; If secondary claim AND action type ="C", don't redo billing determination again, just activate
"RTN","BPSOSRX5",127,0)
 I BPPAYSEQ>1,BPTYPNXT="C" S BPRETV=$$ACTIVATE^BPSNCPD4(BPNXT77,"C") G END
"RTN","BPSOSRX5",128,0)
 ;
"RTN","BPSOSRX5",129,0)
 I RESAFTRV=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Now resubmit")
"RTN","BPSOSRX5",130,0)
 S DOS=+$P($G(^BPS(9002313.77,BPNXT77,2)),U)
"RTN","BPSOSRX5",131,0)
 S BWHERE=$P($G(^BPS(9002313.77,BPNXT77,1)),U)
"RTN","BPSOSRX5",132,0)
 S BILLNDC=$P($G(^BPS(9002313.77,BPNXT77,2)),U,6) ;if we do not send it then BPSNCPDP will get the latest NDC
"RTN","BPSOSRX5",133,0)
 S REVREAS=$P($G(^BPS(9002313.77,BPNXT77,2)),U,2)
"RTN","BPSOSRX5",134,0)
 S DURREC=""
"RTN","BPSOSRX5",135,0)
 S BPDUR=$O(^BPS(9002313.77,BPNXT77,3,"")) I BPDUR S DURREC=^BPS(9002313.77,BPNXT77,3,BPDUR,0)
"RTN","BPSOSRX5",136,0)
 S BPOVRIEN=$P($G(^BPS(9002313.77,BPNXT77,2)),U,4)
"RTN","BPSOSRX5",137,0)
 S BPSCLARF=$P($G(^BPS(9002313.77,BPNXT77,2)),U,5)
"RTN","BPSOSRX5",138,0)
 S BPSAUTH=$P($G(^BPS(9002313.77,BPNXT77,2)),U,7) I BPSAUTH'="" S BPSAUTH=BPSAUTH_U_$P($G(^BPS(9002313.77,BPNXT77,2)),U,8)
"RTN","BPSOSRX5",139,0)
 S BPCOBIND=+$P($G(^BPS(9002313.77,BPNXT77,0)),U,3)
"RTN","BPSOSRX5",140,0)
 S BPSDELAY=$P($G(^BPS(9002313.77,BPNXT77,2)),U,10)
"RTN","BPSOSRX5",141,0)
 ; Call ECME engine in "B" (background) mode to:
"RTN","BPSOSRX5",142,0)
 ;   Perform checks if necessary,
"RTN","BPSOSRX5",143,0)
 ;   Update billing info if this is a CLAIM
"RTN","BPSOSRX5",144,0)
 ;   Activate the request
"RTN","BPSOSRX5",145,0)
 S BPRETV=$$EN^BPSNCPDP(KEY1,KEY2,DOS,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPCOBIND,"B",BPNXT77,"","","","",BPSDELAY)
"RTN","BPSOSRX5",146,0)
 ; Code falls through to here but is also called above
"RTN","BPSOSRX5",147,0)
END ;
"RTN","BPSOSRX5",148,0)
 ; If unsuccessful, deactivate all subsequent request and quit
"RTN","BPSOSRX5",149,0)
 I +BPRETV'=0 D  Q 0
"RTN","BPSOSRX5",150,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot activate the next request: "_$P(BPRETV,U,2))
"RTN","BPSOSRX5",151,0)
 . D DELALLRQ^BPSOSRX7(BP77,IEN59)
"RTN","BPSOSRX5",152,0)
 . D UNLCKRF^BPSOSRX(KEY1,KEY2,IEN59,$T(+0))
"RTN","BPSOSRX5",153,0)
 ; If was successful, do the next steps:
"RTN","BPSOSRX5",154,0)
 ;   Log an entry
"RTN","BPSOSRX5",155,0)
 ;   Delete the completed request
"RTN","BPSOSRX5",156,0)
 ;   Run background process, if neeeded 
"RTN","BPSOSRX5",157,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-The NEXT "_$P($G(^BPS(9002313.77,+BPNXT77,1)),U,4)_"-type REQUEST "_BPNXT77_" has been activated")
"RTN","BPSOSRX5",158,0)
 D DELREQST^BPSOSRX4(BP77,IEN59)
"RTN","BPSOSRX5",159,0)
 D UNLCKRF^BPSOSRX(KEY1,KEY2,IEN59,$T(+0))
"RTN","BPSOSRX5",160,0)
 ; Run background process to pick up the activated request for secondary claim (for primary only - it is done when we call EN^BPSNCPDP above)
"RTN","BPSOSRX5",161,0)
 I BPTYPNXT="E"!(BPPAYSEQ>1&(BPTYPNXT="C")) D RUNNING^BPSOSRX()
"RTN","BPSOSRX5",162,0)
 Q BPNXT77
"RTN","BPSOSRX5",163,0)
 ;BPSOSRX5
"RTN","BPSOSRX8")
0^23^B22384839
"RTN","BPSOSRX8",1,0)
BPSOSRX8 ;ALB/SS - ECME REQUESTS ;10-JAN-08
"RTN","BPSOSRX8",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,10,11,20**;JUN 2004;Build 27
"RTN","BPSOSRX8",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSRX8",4,0)
 ;
"RTN","BPSOSRX8",5,0)
 ;check parameters for EN^BPSNCPDP
"RTN","BPSOSRX8",6,0)
 ;BRXIEN - Rx ien
"RTN","BPSOSRX8",7,0)
 ;BRX - rx refil no
"RTN","BPSOSRX8",8,0)
 ;BWHERE - RX action
"RTN","BPSOSRX8",9,0)
 ;DFN - patient's ien
"RTN","BPSOSRX8",10,0)
 ;PNAME - patient name
"RTN","BPSOSRX8",11,0)
 ;return 
"RTN","BPSOSRX8",12,0)
 ;1 - passed
"RTN","BPSOSRX8",13,0)
 ;0^message - failed
"RTN","BPSOSRX8",14,0)
CHCKPAR(BRXIEN,BRX,BWHERE,DFN,PNAME) ;
"RTN","BPSOSRX8",15,0)
 I '$G(BRXIEN) Q "0^Prescription IEN parameter missing"
"RTN","BPSOSRX8",16,0)
 I $G(BWHERE)="" Q "0^RX Action parameter missing"
"RTN","BPSOSRX8",17,0)
 I $G(BRX)="" Q "0^Prescription does not exist"
"RTN","BPSOSRX8",18,0)
 I $G(DFN)="" Q "0^Patient's IEN does not exist"
"RTN","BPSOSRX8",19,0)
 I $G(PNAME)="" Q "0^Patient name missing"
"RTN","BPSOSRX8",20,0)
 Q 1
"RTN","BPSOSRX8",21,0)
 ;
"RTN","BPSOSRX8",22,0)
 ;===== check if we need to print the messages to the screen =======
"RTN","BPSOSRX8",23,0)
PRINTSCR(BWHER) ;
"RTN","BPSOSRX8",24,0)
 I ",AREV,CRLB,CRLR,CRLX,CRRL,PC,PL,"[(","_BWHER_",") Q 0
"RTN","BPSOSRX8",25,0)
 Q 1  ;print messages to the screen
"RTN","BPSOSRX8",26,0)
 ;check if any IB DATA is missing
"RTN","BPSOSRX8",27,0)
 ;returns 
"RTN","BPSOSRX8",28,0)
 ; 0 - passed
"RTN","BPSOSRX8",29,0)
 ; or 
"RTN","BPSOSRX8",30,0)
 ; RESPONSE code^CLMSTAT message^D(display message)^number of seconds to hang if display 
"RTN","BPSOSRX8",31,0)
IBDATAOK(MOREDATA,BPSARRY) ;
"RTN","BPSOSRX8",32,0)
 N BPRESP S BPRESP=2
"RTN","BPSOSRX8",33,0)
 I $G(BPSARRY("NO ECME INSURANCE")) S BPRESP=6
"RTN","BPSOSRX8",34,0)
 ; Check for missing data (Will IB billing determination catch this?)
"RTN","BPSOSRX8",35,0)
 I $D(MOREDATA("IBDATA",1,1)),$P(MOREDATA("IBDATA",1,1),"^",1)="" Q BPRESP_U_"Information missing from IB data.^D^2"
"RTN","BPSOSRX8",36,0)
 ; Check for missing/invalid payer sheets (I think IB billing determination will catch this)
"RTN","BPSOSRX8",37,0)
 I $P($G(MOREDATA("IBDATA",1,1)),"^",4)="" Q BPRESP_U_"Invalid/missing payer sheet from IB data.^D^2"
"RTN","BPSOSRX8",38,0)
 ; Check if IB says to bill
"RTN","BPSOSRX8",39,0)
 I '$G(MOREDATA("BILL")) Q BPRESP_U_"Flagged by IB to not 3rd Party Insurance bill through ECME.^D^2"
"RTN","BPSOSRX8",40,0)
 Q 0
"RTN","BPSOSRX8",41,0)
 ;Get Site
"RTN","BPSOSRX8",42,0)
GETSITE(BRXIEN,BFILL) ;
"RTN","BPSOSRX8",43,0)
 I '$G(BRXIEN) Q ""
"RTN","BPSOSRX8",44,0)
 I '$G(BFILL) Q $$RXAPI1^BPSUTIL1(BRXIEN,20,"I")
"RTN","BPSOSRX8",45,0)
 Q $$RXSUBF1^BPSUTIL1(BRXIEN,52,52.1,+BFILL,8,"I")
"RTN","BPSOSRX8",46,0)
 ;
"RTN","BPSOSRX8",47,0)
 ; Store general information/parameters into MOREDATA
"RTN","BPSOSRX8",48,0)
 ; In instances where duz is null set it equal to .5 (postmaster)
"RTN","BPSOSRX8",49,0)
BASICMOR(BWHERE,DOS,BPSITE,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPSDELAY,MOREDATA) ;
"RTN","BPSOSRX8",50,0)
 N I
"RTN","BPSOSRX8",51,0)
 S MOREDATA("USER")=$S('DUZ:.5,1:DUZ)
"RTN","BPSOSRX8",52,0)
 S MOREDATA("RX ACTION")=$G(BWHERE)
"RTN","BPSOSRX8",53,0)
 S MOREDATA("DATE OF SERVICE")=$P($G(DOS),".",1)
"RTN","BPSOSRX8",54,0)
 S MOREDATA("REVERSAL REASON")=$S($G(REVREAS)="":"UNKNOWN",1:$E($G(REVREAS),1,40))
"RTN","BPSOSRX8",55,0)
 S MOREDATA("DIVISION")=$G(BPSITE)
"RTN","BPSOSRX8",56,0)
 I $G(DURREC)]"" F I=1:1:3 I $P(DURREC,"~",I)]""  S MOREDATA("DUR",I,0)=$P(DURREC,"~",I)
"RTN","BPSOSRX8",57,0)
 I $G(BPOVRIEN)]"" S MOREDATA("BPOVRIEN")=BPOVRIEN
"RTN","BPSOSRX8",58,0)
 I $G(BPSCLARF)]"" S MOREDATA("BPSCLARF")=BPSCLARF
"RTN","BPSOSRX8",59,0)
 I $TR($G(BPSAUTH),"^")]"" S MOREDATA("BPSAUTH")=BPSAUTH
"RTN","BPSOSRX8",60,0)
 I $G(BPSDELAY)]"" S MOREDATA("BPSDELAY")=BPSDELAY
"RTN","BPSOSRX8",61,0)
 Q
"RTN","BPSOSRX8",62,0)
 ;====== Prepare ret. value
"RTN","BPSOSRX8",63,0)
 ;return RESPONSE ^ CLMSTAT ^ Display= D ^ seconds to HANG
"RTN","BPSOSRX8",64,0)
RSPCLMS(BPREQTYP,RESPONSE,MOREDATA,BPADDINF) ;
"RTN","BPSOSRX8",65,0)
 N ELIG
"RTN","BPSOSRX8",66,0)
 S ELIG=$G(MOREDATA("ELIG"))
"RTN","BPSOSRX8",67,0)
 I BPREQTYP="C",RESPONSE=0 Q RESPONSE_U_$S(ELIG="T":"TRICARE ",ELIG="C":"CHAMPVA ",ELIG="V":"Veteran ",1:"")_"Prescription "_BRX_$S(ELIG="T":"",ELIG="C":"",1:" successfully")_" submitted to ECME for claim generation.^D^"
"RTN","BPSOSRX8",68,0)
 I BPREQTYP="C",RESPONSE>0 Q RESPONSE_U_"No claim submission made: "_$S($G(BPADDINF)'="":BPADDINF,1:"Unable to queue claim submission.")_"^D"
"RTN","BPSOSRX8",69,0)
 I BPREQTYP="U",RESPONSE=0 Q RESPONSE_U_"Reversing prescription "_BRX_".^D^2"
"RTN","BPSOSRX8",70,0)
 I BPREQTYP="U",RESPONSE>0 Q RESPONSE_U_"No claim submission made.  Unable to queue reversal.^D^2"
"RTN","BPSOSRX8",71,0)
 I BPREQTYP="UC",RESPONSE=10 Q RESPONSE_U_$S(ELIG="T":"TRICARE ",ELIG="C":"CHAMPVA ",ELIG="V":"Veteran ",1:"")_"Prescription "_BRX_$S(ELIG="T":"",ELIG="C":"",1:" successfully")_" submitted to ECME for claim reversal.^D^"
"RTN","BPSOSRX8",72,0)
 I BPREQTYP="UC",RESPONSE=0 Q RESPONSE_U_$S(ELIG="T":"TRICARE ",ELIG="C":"CHAMPVA ",ELIG="V":"Veteran ",1:"")_"Prescription "_BRX_$S(ELIG="T":"",ELIG="C":"",1:" successfully")_" submitted to ECME for claim generation.^D^"
"RTN","BPSOSRX8",73,0)
 I BPREQTYP="UC",RESPONSE>0,RESPONSE'=10 Q RESPONSE_U_"No claim submission made: "_$S($G(BPADDINF)'="":BPADDINF,1:"Unable to queue claim submission.")_"^D"
"RTN","BPSOSRX8",74,0)
 Q ""
"RTN","BPSOSSG")
0^45^B30642361
"RTN","BPSOSSG",1,0)
BPSOSSG ;BHAM ISC/SD/lwj/FLS - Special gets for formats ;06/01/2004
"RTN","BPSOSSG",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,10,11,20**;JUN 2004;Build 27
"RTN","BPSOSSG",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSSG",4,0)
 ;
"RTN","BPSOSSG",5,0)
 Q
"RTN","BPSOSSG",6,0)
 ;
"RTN","BPSOSSG",7,0)
FLD420 ; Submission Clarification Code
"RTN","BPSOSSG",8,0)
 ; place fields 354 and 420 into BPS CLAIMS
"RTN","BPSOSSG",9,0)
 ; called by SET CODE in BPS NCPDPD FIELD DEFS for field 420
"RTN","BPSOSSG",10,0)
 ;
"RTN","BPSOSSG",11,0)
 Q:'$G(BPS(9002313.0201))  ; must have entry IEN
"RTN","BPSOSSG",12,0)
 ;
"RTN","BPSOSSG",13,0)
 N BPSCNTR,CNT,FDA,MSG,FLDIEN,SCC,I
"RTN","BPSOSSG",14,0)
 K BPS(9002313.0354)  ; results from UPDATE^DIE
"RTN","BPSOSSG",15,0)
 S FLDIEN=$O(^BPSF(9002313.91,"B",420,""))  ;Get IEN for field 420 from NCPDP BPS FIELD DEFS
"RTN","BPSOSSG",16,0)
 ; Are there overrides?
"RTN","BPSOSSG",17,0)
 I $G(FLDIEN),$D(BPS("OVERRIDE","RX",BPS(9002313.0201),FLDIEN)) D
"RTN","BPSOSSG",18,0)
 . K BPS("RX",BPS(9002313.0201),"Submission Clarif Code")
"RTN","BPSOSSG",19,0)
 . S SCC=BPS("OVERRIDE","RX",BPS(9002313.0201),FLDIEN)
"RTN","BPSOSSG",20,0)
 . F I=1:1:3 S BPS("RX",BPS(9002313.0201),"Submission Clarif Code",I)=$P(SCC,"~",I)
"RTN","BPSOSSG",21,0)
 Q:'$O(BPS("RX",BPS(9002313.0201),"Submission Clarif Code",0))  ; no values found
"RTN","BPSOSSG",22,0)
 S (CNT,BPSCNTR)=0
"RTN","BPSOSSG",23,0)
 F  S CNT=$O(BPS("RX",BPS(9002313.0201),"Submission Clarif Code",CNT)) Q:'CNT  D
"RTN","BPSOSSG",24,0)
 .I BPS("RX",BPS(9002313.0201),"Submission Clarif Code",CNT)="" Q
"RTN","BPSOSSG",25,0)
 .S BPSCNTR=BPSCNTR+1  ; ien for (#354.01) SUBMISSION CLARIFICATION MLTPL
"RTN","BPSOSSG",26,0)
 .S FDA(9002313.02354,"+"_BPSCNTR_","_BPS(9002313.0201)_","_BPS(9002313.02)_",",.01)=BPSCNTR
"RTN","BPSOSSG",27,0)
 .; 420-DK Submission Clarification Code
"RTN","BPSOSSG",28,0)
 .S FDA(9002313.02354,"+"_BPSCNTR_","_BPS(9002313.0201)_","_BPS(9002313.02)_",",420)="DK"_$$NFF^BPSECFM(BPS("RX",BPS(9002313.0201),"Submission Clarif Code",CNT),2)
"RTN","BPSOSSG",29,0)
 ;
"RTN","BPSOSSG",30,0)
 I BPSCNTR D UPDATE^DIE("","FDA","BPS(9002313.0354)","MSG")
"RTN","BPSOSSG",31,0)
 I $D(MSG) D  Q  ; if error, log it and quit
"RTN","BPSOSSG",32,0)
 .D LOG2CLM^BPSOSL(BPS(9002313.02),$T(+0)_"-Failed to update NCPDP field 420")
"RTN","BPSOSSG",33,0)
 .D LOGARAY2^BPSOSL(BPS(9002313.02),"MSG")
"RTN","BPSOSSG",34,0)
 ;
"RTN","BPSOSSG",35,0)
 ; 354-NX Submission Clarification Code Count
"RTN","BPSOSSG",36,0)
 I BPSCNTR S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),350),U,4)="NX"_$$NFF^BPSECFM(BPSCNTR,1)
"RTN","BPSOSSG",37,0)
 ;
"RTN","BPSOSSG",38,0)
 Q
"RTN","BPSOSSG",39,0)
 ;
"RTN","BPSOSSG",40,0)
FLD439 ;Reason for service code
"RTN","BPSOSSG",41,0)
 ;Called by SET logic in BPS NCPDP Field DEFS for field 439
"RTN","BPSOSSG",42,0)
 ;DUR is newed/set in BPSOSHF
"RTN","BPSOSSG",43,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),473.01,DUR,0),U,2)=BPS("X")
"RTN","BPSOSSG",44,0)
 Q
"RTN","BPSOSSG",45,0)
 ;
"RTN","BPSOSSG",46,0)
FLD440 ;Professional Service Code
"RTN","BPSOSSG",47,0)
 ;Called by set logic in BPS NCPDP Field DEFS for field 440
"RTN","BPSOSSG",48,0)
 ;DUR is newed/set in BPSOSHF
"RTN","BPSOSSG",49,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),473.01,DUR,0),U,3)=BPS("X")
"RTN","BPSOSSG",50,0)
 Q
"RTN","BPSOSSG",51,0)
 ;
"RTN","BPSOSSG",52,0)
FLD441 ;Result of Service Code
"RTN","BPSOSSG",53,0)
 ;Called by SET logic in BPS NCPDP Field DEFS for field 441
"RTN","BPSOSSG",54,0)
 ;DUR is newed/set in BPSOSHF
"RTN","BPSOSSG",55,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),473.01,DUR,0),U,4)=BPS("X")
"RTN","BPSOSSG",56,0)
 Q
"RTN","BPSOSSG",57,0)
 ;
"RTN","BPSOSSG",58,0)
FLD473 ;DUR/PPS code counter - called from SET logic in BPS NCPDP Field Defs
"RTN","BPSOSSG",59,0)
 ;DUR is newed/set in BPSOSHF
"RTN","BPSOSSG",60,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),473.01,DUR,0),U,1)=BPS("X")
"RTN","BPSOSSG",61,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),473.01,"B",BPS("X"),DUR)=""
"RTN","BPSOSSG",62,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),473.01,0)="^9002313.1001A^"_DUR_"^"_DUR
"RTN","BPSOSSG",63,0)
 Q
"RTN","BPSOSSG",64,0)
 ;
"RTN","BPSOSSG",65,0)
FLD474 ;DUR/PPS level of effort - called from set logic in BPS NCPDP Field
"RTN","BPSOSSG",66,0)
 ;DUR is newed/set in BPSOSHF
"RTN","BPSOSSG",67,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),473.01,DUR,0),U,5)=BPS("X")
"RTN","BPSOSSG",68,0)
 Q
"RTN","BPSOSSG",69,0)
 ;
"RTN","BPSOSSG",70,0)
FLD475 ;DUR Co-agent ID Qualifier - called from set logic in BPS NCPDP Field
"RTN","BPSOSSG",71,0)
 ;DUR is newed/set in BPSOSHF
"RTN","BPSOSSG",72,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),473.01,DUR,0),U,6)=""
"RTN","BPSOSSG",73,0)
 Q
"RTN","BPSOSSG",74,0)
 ;
"RTN","BPSOSSG",75,0)
FLD476 ;DUR Co-agent ID - called from set logic in BPS NCPDP Field
"RTN","BPSOSSG",76,0)
 ;DUR is newed/set in BPSOSHF
"RTN","BPSOSSG",77,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),473.01,DUR,0),U,7)=""
"RTN","BPSOSSG",78,0)
 Q
"RTN","BPSOSSG",79,0)
 ;
"RTN","BPSOSSG",80,0)
FLD480 ; Other Amount Claimed Submitted field
"RTN","BPSOSSG",81,0)
 ; Called by set logic in BPS NCPDP Field DEFS for field 480
"RTN","BPSOSSG",82,0)
 ; Sets fields 478, 479, and 480 into BPS Claims
"RTN","BPSOSSG",83,0)
 ;   478-H7 Other Amount Claimed Count
"RTN","BPSOSSG",84,0)
 ;   479-H8 Other Amount Claimed Submitted Qualifier
"RTN","BPSOSSG",85,0)
 ;   480-H9 Other Amount Claimed Submitted
"RTN","BPSOSSG",86,0)
 ;
"RTN","BPSOSSG",87,0)
 Q:'$G(BPS(9002313.02))    ; must have BPS Claims IEN
"RTN","BPSOSSG",88,0)
 Q:'$G(BPS(9002313.0201))  ; must have Transaction subfile IEN
"RTN","BPSOSSG",89,0)
 Q:'$O(BPS("RX",BPS(9002313.0201),"Other Amt Value",0))  ; nothing to do
"RTN","BPSOSSG",90,0)
 ;
"RTN","BPSOSSG",91,0)
 N BPSCNTR,CNT,FDA,MSG
"RTN","BPSOSSG",92,0)
 K BPS(9002313.0601)  ; results from UPDATE^DIE
"RTN","BPSOSSG",93,0)
 S (CNT,BPSCNTR)=0
"RTN","BPSOSSG",94,0)
 F  S CNT=$O(BPS("RX",BPS(9002313.0201),"Other Amt Value",CNT)) Q:'CNT  D
"RTN","BPSOSSG",95,0)
 . I +BPS("RX",BPS(9002313.0201),"Other Amt Value",CNT)=0 Q
"RTN","BPSOSSG",96,0)
 . S BPSCNTR=BPSCNTR+1  ; ien for "PRICING REPEATING FIELDS SUB-FIELD^^480^3"
"RTN","BPSOSSG",97,0)
 . S FDA(9002313.0601,"+"_BPSCNTR_","_BPS(9002313.0201)_","_BPS(9002313.02)_",",.01)=BPSCNTR
"RTN","BPSOSSG",98,0)
 . S FDA(9002313.0601,"+"_BPSCNTR_","_BPS(9002313.0201)_","_BPS(9002313.02)_",",479)="H8"_$$ANFF^BPSECFM($G(BPS("RX",BPS(9002313.0201),"Other Amt Qual",CNT)),2)
"RTN","BPSOSSG",99,0)
 . S FDA(9002313.0601,"+"_BPSCNTR_","_BPS(9002313.0201)_","_BPS(9002313.02)_",",480)="H9"_$$DFF^BPSECFM($G(BPS("RX",BPS(9002313.0201),"Other Amt Value",CNT)),8)
"RTN","BPSOSSG",100,0)
 ;
"RTN","BPSOSSG",101,0)
 I BPSCNTR D UPDATE^DIE("","FDA","BPS(9002313.0601)","MSG")
"RTN","BPSOSSG",102,0)
 I $D(MSG) D  Q
"RTN","BPSOSSG",103,0)
 . D LOG2CLM^BPSOSL(BPS(9002313.02),$T(+0)_"-Failed to update NCPDP field 480 and/or 479")
"RTN","BPSOSSG",104,0)
 . D LOGARAY2^BPSOSL(BPS(9002313.02),"MSG")
"RTN","BPSOSSG",105,0)
 ; 478-H7 Other Amount Claimed Submitted Count
"RTN","BPSOSSG",106,0)
 I BPSCNTR S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),470),U,8)="H7"_$$NFF^BPSECFM(BPSCNTR,1)
"RTN","BPSOSSG",107,0)
 ;
"RTN","BPSOSSG",108,0)
 Q
"RTN","BPSOSSG",109,0)
 ;
"RTN","BPSOSSG",110,0)
EMPL ;Get employer info
"RTN","BPSOSSG",111,0)
 ; This by GET logic in BPS NCPDP Field Defs for field 315 (Employer Name)
"RTN","BPSOSSG",112,0)
 ; DMB 11/13/2006 - It makes some sense to only set these fields if
"RTN","BPSOSSG",113,0)
 ;   they exist on the payer sheet.  However, it assumes that the
"RTN","BPSOSSG",114,0)
 ;   employer name field will always be before the other fields and
"RTN","BPSOSSG",115,0)
 ;   that the other fields will not exist without the Employer Name
"RTN","BPSOSSG",116,0)
 ;   field.  For now, leave this be as these fields are on the
"RTN","BPSOSSG",117,0)
 ;   Worker's Comp segment, which we do not do.  We may want to evaluate
"RTN","BPSOSSG",118,0)
 ;   if we were to ever add the Worker's Comp segment
"RTN","BPSOSSG",119,0)
 Q:'$G(BPS("Patient","IEN"))
"RTN","BPSOSSG",120,0)
 D GETS^DIQ(2,BPS("Patient","IEN"),".3111;.3112;.3113;.3115;.3116;.3117;.3118;.3119","","EMPL")
"RTN","BPSOSSG",121,0)
 S BPS("Employer","Name")=EMPL(2,BPS("Patient","IEN")_",",.3111)
"RTN","BPSOSSG",122,0)
 S:EMPL(2,BPS("Patient","IEN")_",",.3111)=""&(EMPL(2,BPS("Patient","IEN")_",",.3112)'="") BPS("Employer","Name")=EMPL(2,BPS("Patient","IEN")_",",.3112)
"RTN","BPSOSSG",123,0)
 S BPS("Employer","Address")=EMPL(2,BPS("Patient","IEN")_",",.3113)
"RTN","BPSOSSG",124,0)
 S BPS("Employer","City")=EMPL(2,BPS("Patient","IEN")_",",.3116)
"RTN","BPSOSSG",125,0)
 S BPS("Employer","State")=EMPL(2,BPS("Patient","IEN")_",",.3117)
"RTN","BPSOSSG",126,0)
 I BPS("Employer","State")'="" D
"RTN","BPSOSSG",127,0)
 . S STATEIEN="",STATEIEN=$O(^DIC(5,"B",BPS("Employer","State"),STATEIEN)),BPS("Employer","State")=$P($G(^DIC(5,STATEIEN,0)),"^",2)
"RTN","BPSOSSG",128,0)
 S BPS("Employer","Zip Code")=EMPL(2,BPS("Patient","IEN")_",",.3118)
"RTN","BPSOSSG",129,0)
 S BPS("Employer","Phone")=EMPL(2,BPS("Patient","IEN")_",",.3119)
"RTN","BPSOSSG",130,0)
 K EMPL,STATEIEN
"RTN","BPSOSSG",131,0)
 Q
"RTN","BPSOSSG",132,0)
 ;
"RTN","BPSOSU")
0^14^B43285498
"RTN","BPSOSU",1,0)
BPSOSU ;BHAM ISC/FCS/DRS/FLS - Common utilities ;06/01/2004
"RTN","BPSOSU",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2,5,7,10,20**;JUN 2004;Build 27
"RTN","BPSOSU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSU",4,0)
 Q
"RTN","BPSOSU",5,0)
 ; Common utilities called a lot.
"RTN","BPSOSU",6,0)
 ;
"RTN","BPSOSU",7,0)
 ; SETSTAT - set status field for ^BPST(IEN59,
"RTN","BPSOSU",8,0)
 ; Input:
"RTN","BPSOSU",9,0)
 ;   IEN59   - BPS Transaction
"RTN","BPSOSU",10,0)
 ;   STATUS  - Value to set into BPS Transaction
"RTN","BPSOSU",11,0)
SETSTAT(IEN59,STATUS) ; EP - from many places
"RTN","BPSOSU",12,0)
 ;
"RTN","BPSOSU",13,0)
 ; Lock the record - something is very wrong if you can't get the lock
"RTN","BPSOSU",14,0)
 F  L +^BPST(IEN59):300 Q:$T  Q:'$$IMPOSS^BPSOSUE("L","RTI","LOCK +^BPST",,"SETSTAT",$T(+0))
"RTN","BPSOSU",15,0)
 N DIE,DA,DR,X
"RTN","BPSOSU",16,0)
 S DIE=9002313.59,DA=IEN59,DR="1///"_STATUS_";7///NOW" ; Status and Last Update
"RTN","BPSOSU",17,0)
 I STATUS=0 S DR=DR_";15///NOW" ; If Status is 0, init START TIME
"RTN","BPSOSU",18,0)
 D ^DIE
"RTN","BPSOSU",19,0)
 ;
"RTN","BPSOSU",20,0)
 ; Verify that there no other statuses in the X-ref
"RTN","BPSOSU",21,0)
 S X=""
"RTN","BPSOSU",22,0)
 F  S X=$O(^BPST("AD",X)) Q:X=""  D
"RTN","BPSOSU",23,0)
 . I X'=STATUS K ^BPST("AD",X,IEN59)
"RTN","BPSOSU",24,0)
 I STATUS=99 D STATUS99(IEN59)
"RTN","BPSOSU",25,0)
 L -^BPST(IEN59)
"RTN","BPSOSU",26,0)
 Q
"RTN","BPSOSU",27,0)
 ;
"RTN","BPSOSU",28,0)
 ; STATUS99 - Special activity when a claim reaches status 99
"RTN","BPSOSU",29,0)
 ; Input:
"RTN","BPSOSU",30,0)
 ;   IEN59 - BPS Transaction IEN
"RTN","BPSOSU",31,0)
STATUS99(IEN59) ;
"RTN","BPSOSU",32,0)
 N IEN77,BPS57,CLMSTAT,BPNXTREQ,BPSCLNOD,BPTYPE
"RTN","BPSOSU",33,0)
 ;
"RTN","BPSOSU",34,0)
 ; check and process non-billable entries - BPS*1*20
"RTN","BPSOSU",35,0)
 I $P($G(^BPST(IEN59,0)),U,15)="N" D  Q
"RTN","BPSOSU",36,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-BPS Transaction non-billable entry has reached a status of 99%")
"RTN","BPSOSU",37,0)
 . S BPS57=$$NEW57(IEN59)       ; copy it over into BPS Log of Transaction file
"RTN","BPSOSU",38,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Created BPS Log of Transaction record for non-billable entry: "_BPS57)
"RTN","BPSOSU",39,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-BPS Transaction Non-Billable Entry Complete")
"RTN","BPSOSU",40,0)
 . Q
"RTN","BPSOSU",41,0)
 ;
"RTN","BPSOSU",42,0)
 ; Get the current request
"RTN","BPSOSU",43,0)
 S IEN77=+$$GETRQST^BPSUTIL2(IEN59)
"RTN","BPSOSU",44,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Claim of the request "_IEN77_" has reached 99%")
"RTN","BPSOSU",45,0)
 ;
"RTN","BPSOSU",46,0)
 ; Create a copy in the BPS Log of Transaction
"RTN","BPSOSU",47,0)
 S BPS57=$$NEW57(IEN59)
"RTN","BPSOSU",48,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Created BPS Log of Transaction record "_BPS57)
"RTN","BPSOSU",49,0)
 ;
"RTN","BPSOSU",50,0)
 ; This data is needed when closing the claim later but needs to be 
"RTN","BPSOSU",51,0)
 ;   read now since $$REQST99^BPSOSRX5 will delete the request as part
"RTN","BPSOSU",52,0)
 ;   of its processing
"RTN","BPSOSU",53,0)
 S BPSCLNOD=$G(^BPS(9002313.77,IEN77,7))
"RTN","BPSOSU",54,0)
 S BPTYPE=$P($G(^BPS(9002313.77,IEN77,1)),U,4)
"RTN","BPSOSU",55,0)
 ;
"RTN","BPSOSU",56,0)
 ; Get status of the claim
"RTN","BPSOSU",57,0)
 S CLMSTAT=$$CATEG^BPSOSUC(IEN59)
"RTN","BPSOSU",58,0)
 S BPNXTREQ=$$REQST99^BPSOSRX5(IEN59,CLMSTAT)
"RTN","BPSOSU",59,0)
 ;
"RTN","BPSOSU",60,0)
 ; Check if the BPS Claim should be closed
"RTN","BPSOSU",61,0)
 I +BPSCLNOD=1,$P(BPSCLNOD,U,2)>0 D
"RTN","BPSOSU",62,0)
 . N BPSCLA,BPLCK,BPDROP,ERROR,DA,DR,DIE
"RTN","BPSOSU",63,0)
 . I $$SUCCESS^BPSOSRX7(BPTYPE,CLMSTAT)=0 Q
"RTN","BPSOSU",64,0)
 . I BPNXTREQ>0 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot close after reversal due to sequential requests in the queue") Q
"RTN","BPSOSU",65,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Closing the claim after accepted reversal")
"RTN","BPSOSU",66,0)
 . S BPSCLA=$$GET1^DIQ(9002313.59,IEN59,3,"I"),BPLCK=0,BPDROP="N"
"RTN","BPSOSU",67,0)
 . L +^BPSC(BPSCLA):0 I '$T D  Q
"RTN","BPSOSU",68,0)
 . . D LOG^BPSOSL(IEN59,$T(+0)_"-Unable to close claim. Could not lock BPS CLAIMS file.") Q
"RTN","BPSOSU",69,0)
 . D CLOSE^BPSBUTL(BPSCLA,IEN59,$P(^IBE(356.8,$P(BPSCLNOD,U,2),0),U),0,1,$P(BPSCLNOD,U,3),.ERROR)
"RTN","BPSOSU",70,0)
 . I $D(ERROR) D  Q
"RTN","BPSOSU",71,0)
 . . D LOG^BPSOSL(IEN59,$T(+0)_"Unable to close Bill in IB. "_ERROR)
"RTN","BPSOSU",72,0)
 . . L -^BPSC(BPSCLA)
"RTN","BPSOSU",73,0)
 . S DIE="^BPSC(",DA=BPSCLA,DR="901///1;902///"_$$NOW^XLFDT()_";903////"_DUZ_";904///"_$P(BPSCLNOD,U,2)_";905////"_BPDROP D ^DIE
"RTN","BPSOSU",74,0)
 . L -^BPSC(BPSCLA)
"RTN","BPSOSU",75,0)
 . Q
"RTN","BPSOSU",76,0)
 ;
"RTN","BPSOSU",77,0)
 ;
"RTN","BPSOSU",78,0)
 ; If claims completed normally, log its completion.
"RTN","BPSOSU",79,0)
 ; Do not log error'ed or stranded claims as we don't want to show these in the
"RTN","BPSOSU",80,0)
 ;   turn-around stats
"RTN","BPSOSU",81,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSOSU",82,0)
 I CLMSTAT'["E OTHER",CLMSTAT'["E UNSTRANDED",CLMSTAT'["E REVERSAL UNSTRANDED" D LOG^BPSOSL(IEN59,$T(+0)_"-Claim Complete")
"RTN","BPSOSU",83,0)
 Q
"RTN","BPSOSU",84,0)
 ;
"RTN","BPSOSU",85,0)
 ; NEW57 - Copy the BPS Transaction into BPS Log of Transaction
"RTN","BPSOSU",86,0)
 ;  Input
"RTN","BPSOSU",87,0)
 ;    IEN59 - BPS Transaction
"RTN","BPSOSU",88,0)
 ;  Returns
"RTN","BPSOSU",89,0)
 ;    BPS Log of Transaction IEN
"RTN","BPSOSU",90,0)
NEW57(IEN59) ;
"RTN","BPSOSU",91,0)
 F  L +^BPSTL:300 Q:$T  Q:'$$IMPOSS^BPSOSUE("L","RTI","LOCK ^BPSTL",,"NEW57",$T(+0))
"RTN","BPSOSU",92,0)
 ;
"RTN","BPSOSU",93,0)
 ; Get next record number in BPS Log of Transactions
"RTN","BPSOSU",94,0)
NEW57A N N,C
"RTN","BPSOSU",95,0)
 S N=$P(^BPSTL(0),U,3)+1
"RTN","BPSOSU",96,0)
 S C=$P(^BPSTL(0),U,4)+1
"RTN","BPSOSU",97,0)
 S $P(^BPSTL(0),U,3,4)=N_U_C
"RTN","BPSOSU",98,0)
 I $D(^BPSTL(N)) G NEW57A ; should never happen
"RTN","BPSOSU",99,0)
 L -^BPSTL
"RTN","BPSOSU",100,0)
 ;
"RTN","BPSOSU",101,0)
 ; Merge BPS Transaction into Log of Transactions
"RTN","BPSOSU",102,0)
 M ^BPSTL(N)=^BPST(IEN59)
"RTN","BPSOSU",103,0)
 ;
"RTN","BPSOSU",104,0)
 ; Build fileman indices
"RTN","BPSOSU",105,0)
 D
"RTN","BPSOSU",106,0)
 . N DIK,DA S DIK="^BPSTL(",DA=N N N D IX1^DIK
"RTN","BPSOSU",107,0)
 ;
"RTN","BPSOSU",108,0)
 ; Quit with the new record number
"RTN","BPSOSU",109,0)
 Q N
"RTN","BPSOSU",110,0)
 ;
"RTN","BPSOSU",111,0)
 ; ISREVES - Is this a reversal claim
"RTN","BPSOSU",112,0)
 ; Input
"RTN","BPSOSU",113,0)
 ;   CLAIMIEN - Pointer to BPS Claims
"RTN","BPSOSU",114,0)
 ;
"RTN","BPSOSU",115,0)
 ; Return Value
"RTN","BPSOSU",116,0)
 ;   1 - Reversal claim
"RTN","BPSOSU",117,0)
 ;   0 - Not a reversal claim
"RTN","BPSOSU",118,0)
ISREVERS(CLAIM) ;
"RTN","BPSOSU",119,0)
 Q $P($G(^BPSC(CLAIM,100)),"^",3)="B2"
"RTN","BPSOSU",120,0)
 ;
"RTN","BPSOSU",121,0)
 ; SETCSTAT - Set the status for every transaction associated with
"RTN","BPSOSU",122,0)
 ;   this claim
"RTN","BPSOSU",123,0)
SETCSTAT(CLAIM,STATUS) ;
"RTN","BPSOSU",124,0)
 N IEN59,INDEX
"RTN","BPSOSU",125,0)
 ;
"RTN","BPSOSU",126,0)
 ; Determine correct index
"RTN","BPSOSU",127,0)
 I $$ISREVERS(CLAIM) S INDEX="AER"
"RTN","BPSOSU",128,0)
 E  S INDEX="AE"
"RTN","BPSOSU",129,0)
 ;
"RTN","BPSOSU",130,0)
 ; Loop through the transactions and set the status
"RTN","BPSOSU",131,0)
 S IEN59=""
"RTN","BPSOSU",132,0)
 F  S IEN59=$O(^BPST(INDEX,CLAIM,IEN59)) Q:IEN59=""  D SETSTAT(IEN59,STATUS)
"RTN","BPSOSU",133,0)
 Q
"RTN","BPSOSU",134,0)
 ;
"RTN","BPSOSU",135,0)
 ; ERROR - Handle any errors
"RTN","BPSOSU",136,0)
 ;   Log them into BPS Transactions
"RTN","BPSOSU",137,0)
 ;   Change status to 99
"RTN","BPSOSU",138,0)
 ;   Update the LOG
"RTN","BPSOSU",139,0)
 ;   Increment the statistics
"RTN","BPSOSU",140,0)
 ;   We should be okay for the resubmit flag since the STATUS
"RTN","BPSOSU",141,0)
 ;     will be E OTHER instead of E REVERSAL ACCEPTED
"RTN","BPSOSU",142,0)
 ; Input
"RTN","BPSOSU",143,0)
 ;   RTN     - Routine reporting the error
"RTN","BPSOSU",144,0)
 ;   IEN59   - BPS Transaction
"RTN","BPSOSU",145,0)
 ;   ERROR   - Error Number (goes in RESULT CODE)
"RTN","BPSOSU",146,0)
 ;   ERRTEXT - Error Text (goes in RESULT TEXT)
"RTN","BPSOSU",147,0)
 ;
"RTN","BPSOSU",148,0)
 ; To prevent conflicts, set the error number to the first digit of
"RTN","BPSOSU",149,0)
 ;   Status and a unique number for the status.
"RTN","BPSOSU",150,0)
ERROR(RTN,IEN59,ERROR,ERRTEXT) ;
"RTN","BPSOSU",151,0)
 ;
"RTN","BPSOSU",152,0)
 ; Check parameters
"RTN","BPSOSU",153,0)
 I '$G(IEN59) Q
"RTN","BPSOSU",154,0)
 I '$G(ERROR) S ERROR=0
"RTN","BPSOSU",155,0)
 I $G(ERRTEXT)="" S ERRTEXT="ERROR - see LOG"
"RTN","BPSOSU",156,0)
 ;
"RTN","BPSOSU",157,0)
 ; Set Error and Error Text in BPS Transaction
"RTN","BPSOSU",158,0)
 D SETRESU(IEN59,ERROR,ERRTEXT)
"RTN","BPSOSU",159,0)
 ;
"RTN","BPSOSU",160,0)
 ; Log Message
"RTN","BPSOSU",161,0)
 D LOG^BPSOSL(IEN59,RTN_" returned error - "_ERRTEXT)
"RTN","BPSOSU",162,0)
 ;
"RTN","BPSOSU",163,0)
 ; Update unbillable count in stats
"RTN","BPSOSU",164,0)
 D INCSTAT^BPSOSUD("R",1)
"RTN","BPSOSU",165,0)
 ;
"RTN","BPSOSU",166,0)
 ; Update Status to complete
"RTN","BPSOSU",167,0)
 D SETSTAT(IEN59,99)
"RTN","BPSOSU",168,0)
 Q
"RTN","BPSOSU",169,0)
 ;
"RTN","BPSOSU",170,0)
 ; SETRESU - Set Result into ^BPST(IEN59,2)
"RTN","BPSOSU",171,0)
 ; Input
"RTN","BPSOSU",172,0)
 ;   IEN59 - BPS Transaction IEN
"RTN","BPSOSU",173,0)
 ;   RESULT - Result Code
"RTN","BPSOSU",174,0)
 ;   TEXT   - Result Text.  Semi-colons (";") should not in the text data as
"RTN","BPSOSU",175,0)
 ;            this is used as a separator between current and previous text
"RTN","BPSOSU",176,0)
 ;            messages.  If there is a semi-colon, it is converted to a dash.
"RTN","BPSOSU",177,0)
SETRESU(IEN59,RESULT,TEXT) ;
"RTN","BPSOSU",178,0)
 ;
"RTN","BPSOSU",179,0)
 ; First, store the Result Code
"RTN","BPSOSU",180,0)
 S $P(^BPST(IEN59,2),U)=$G(RESULT)
"RTN","BPSOSU",181,0)
 ;
"RTN","BPSOSU",182,0)
 ; Second, store the Result Text
"RTN","BPSOSU",183,0)
 ; Considerations:
"RTN","BPSOSU",184,0)
 ;   Convert any semi-colons to dashes
"RTN","BPSOSU",185,0)
 ;   Add semi-colon delimiter if needed
"RTN","BPSOSU",186,0)
 ;   Truncate data if needed
"RTN","BPSOSU",187,0)
 I $G(TEXT)]"" D
"RTN","BPSOSU",188,0)
 . N X
"RTN","BPSOSU",189,0)
 . S TEXT=$TR(TEXT,";","-")
"RTN","BPSOSU",190,0)
 . S X=$P(^BPST(IEN59,2),U,2,99)
"RTN","BPSOSU",191,0)
 . I X]"",$E(X)'=";" S X=";"_X
"RTN","BPSOSU",192,0)
 . S X=$E(TEXT_X,1,255-$L(RESULT)-1)
"RTN","BPSOSU",193,0)
 . S $P(^BPST(IEN59,2),U,2)=X
"RTN","BPSOSU",194,0)
 Q
"RTN","BPSOSU",195,0)
 ;
"RTN","BPSOSU",196,0)
 ; SETCRESU - set the result code for every transaction assoc'd with
"RTN","BPSOSU",197,0)
 ;   this claim.  Note that this will only work for billing requests (B1)
"RTN","BPSOSU",198,0)
 ; Input
"RTN","BPSOSU",199,0)
 ;   CLAIMIEN - BPS Claim IEN
"RTN","BPSOSU",200,0)
 ;   RESULT   - Result Code
"RTN","BPSOSU",201,0)
 ;   TEXT     - Result Text
"RTN","BPSOSU",202,0)
SETCRESU(CLAIM,RESULT,TEXT) ;
"RTN","BPSOSU",203,0)
 N IEN59
"RTN","BPSOSU",204,0)
 S IEN59=""
"RTN","BPSOSU",205,0)
 F  S IEN59=$O(^BPST("AE",CLAIM,IEN59)) Q:IEN59=""  D SETRESU(IEN59,RESULT,$G(TEXT))
"RTN","BPSOSU",206,0)
 Q
"RTN","BPSOSU",207,0)
 ;
"RTN","BPSOSU",208,0)
 ; STATI(X) gives a text version of what status code X means.
"RTN","BPSOSU",209,0)
 ;   For effeciency, put more common ones at the top.
"RTN","BPSOSU",210,0)
 ; Also note that you should check the display on the stats screen if you
"RTN","BPSOSU",211,0)
 ;   modify any of these.
"RTN","BPSOSU",212,0)
STATI(X) ;
"RTN","BPSOSU",213,0)
 I X=99 Q "Done"
"RTN","BPSOSU",214,0)
 I X=60 Q "Transmitting"
"RTN","BPSOSU",215,0)
 I X=0 Q "Waiting to start"
"RTN","BPSOSU",216,0)
 I X=40 Q "Building the HL7 packet"
"RTN","BPSOSU",217,0)
 I X=70 Q "Parsing response"
"RTN","BPSOSU",218,0)
 I X=30 Q "Building the claim"
"RTN","BPSOSU",219,0)
 I X=10 Q "Building the transaction"
"RTN","BPSOSU",220,0)
 I X=90 Q "Processing response"
"RTN","BPSOSU",221,0)
 I X=98 Q "Resubmitting" ; Used only by STATUS^BPSOSRX (Not stored in BPS Transactions)
"RTN","BPSOSU",222,0)
 I X=50 Q "Preparing for transmit"
"RTN","BPSOSU",223,0)
 I X=31 Q "Wait for retry (insurer asleep)"
"RTN","BPSOSU",224,0)
 I X=80 Q "Waiting to process response"
"RTN","BPSOSU",225,0)
 I X=-99 Q "Waiting for activation (scheduled)" ; Used only by STATUS^BPSOSRX (Not stored in BPS Transactions)
"RTN","BPSOSU",226,0)
 I X=-98 Q "Cancelled" ; Used only by STATUS^BPSOSRX (Not stored in BPS Transactions)
"RTN","BPSOSU",227,0)
 I X=-97 Q "Inactive" ; Used only by STATUS^BPSOSRX (Not stored in BPS Transactions)
"RTN","BPSOSU",228,0)
 I X=-96 Q "Processing request" ; Used only by STATUS^BPSOSRX (Not stored in BPS Transactions)
"RTN","BPSOSU",229,0)
 Q "?"_X_"?"
"RTN","BPSOSUC")
0^21^B10039062
"RTN","BPSOSUC",1,0)
BPSOSUC ;BHAM ISC/FCS/DRS/FLS - ECME utilities ;06/01/2004
"RTN","BPSOSUC",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,10,11,14,20**;JUN 2004;Build 27
"RTN","BPSOSUC",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSOSUC",4,0)
 Q
"RTN","BPSOSUC",5,0)
 ; CATEG returns the status of a Transaction or Log of Transaction
"RTN","BPSOSUC",6,0)
 ;   entry.  It is used mainly by STATUS^BPSOSRX but is also
"RTN","BPSOSUC",7,0)
 ;   called by some other routines as well as computed fields of BPS Log
"RTN","BPSOSUC",8,0)
 ;   of Transactions and BPS Tranasctions
"RTN","BPSOSUC",9,0)
CATEG(N,WANTREV) ;
"RTN","BPSOSUC",10,0)
 ; N - If decimal, IEN from BPS Transaction
"RTN","BPSOSUC",11,0)
 ;   - If integer, IEN from BPS Log of Transactions
"RTN","BPSOSUC",12,0)
 ; $G(WANTREV) = true if you care about reversals
"RTN","BPSOSUC",13,0)
 ;      (that's the default if lookup is on IEN59)
"RTN","BPSOSUC",14,0)
 ; $G(WANTREV) = false if you want to ignore reversals
"RTN","BPSOSUC",15,0)
 ;      (that's the default if lookup is on IEN57)
"RTN","BPSOSUC",16,0)
 ;
"RTN","BPSOSUC",17,0)
 ; Many routines rely on these exact return values; do not change them:
"RTN","BPSOSUC",18,0)
 ; Return values:
"RTN","BPSOSUC",19,0)
 ;     For all submissions:
"RTN","BPSOSUC",20,0)
 ;       CORRUPT - Should never happen
"RTN","BPSOSUC",21,0)
 ;
"RTN","BPSOSUC",22,0)
 ;     For Billing Requests:
"RTN","BPSOSUC",23,0)
 ;       E PAYABLE, E CAPTURED, E DUPLICATE, E REJECTED, E OTHER, and
"RTN","BPSOSUC",24,0)
 ;       E UNSTRANDED
"RTN","BPSOSUC",25,0)
 ;
"RTN","BPSOSUC",26,0)
 ;     For Reversals:
"RTN","BPSOSUC",27,0)
 ;       E REVERSAL ACCEPTED, E REVERSAL REJECTED, E REVERSAL OTHER, and
"RTN","BPSOSUC",28,0)
 ;       E REVERSAL UNSTRANDED
"RTN","BPSOSUC",29,0)
 ;
"RTN","BPSOSUC",30,0)
 ;     For Eligibility:
"RTN","BPSOSUC",31,0)
 ;       E ELIGIBILITY ACCEPTED, E ELIGIBILITY REJECTED, E ELIGIBILITY OTHER, and
"RTN","BPSOSUC",32,0)
 ;       E ELIGIBILITY UNSTRANDED
"RTN","BPSOSUC",33,0)
 ;
"RTN","BPSOSUC",34,0)
 ;     For Non-Billable Entries:
"RTN","BPSOSUC",35,0)
 ;       ""
"RTN","BPSOSUC",36,0)
 ;
"RTN","BPSOSUC",37,0)
 I N<1 Q "" ; Should not happen
"RTN","BPSOSUC",38,0)
 N FILENUM,RETVAL,CLAIM,RESP,X,RESP500,TRANTYPE,STAT,DISYS
"RTN","BPSOSUC",39,0)
 S FILENUM=$S(N[".":9002313.59,1:9002313.57)
"RTN","BPSOSUC",40,0)
 I '$D(WANTREV) S WANTREV=$S(FILENUM=9002313.57:0,FILENUM=9002313.59:1)
"RTN","BPSOSUC",41,0)
 I '$$GET1^DIQ(FILENUM,N_",",.01) Q "CORRUPT"
"RTN","BPSOSUC",42,0)
 S CLAIM=$$GET1^DIQ(FILENUM,N_",",3,"I")
"RTN","BPSOSUC",43,0)
 S RESP=$$GET1^DIQ(FILENUM,N_",",4,"I")
"RTN","BPSOSUC",44,0)
 S TRANTYPE=$$GET1^DIQ(FILENUM,N_",",19,"I")
"RTN","BPSOSUC",45,0)
 ;
"RTN","BPSOSUC",46,0)
 I TRANTYPE="N" Q ""    ; BPS*1*20.  quit with "" for TRI/CVA non-billable entries
"RTN","BPSOSUC",47,0)
 ;
"RTN","BPSOSUC",48,0)
 S STAT=$$GET1^DIQ(FILENUM,N_",",202,"I")
"RTN","BPSOSUC",49,0)
 ; Stranded statuses
"RTN","BPSOSUC",50,0)
 I $P(STAT,";")="E REVERSAL UNSTRANDED" Q "E REVERSAL UNSTRANDED"
"RTN","BPSOSUC",51,0)
 I $P(STAT,";")="E UNSTRANDED" Q "E UNSTRANDED"
"RTN","BPSOSUC",52,0)
 I $P(STAT,";")="E ELIGIBILITY UNSTRANDED" Q "E ELIGIBILITY UNSTRANDED"
"RTN","BPSOSUC",53,0)
 ; Eligibility Statuses
"RTN","BPSOSUC",54,0)
 I TRANTYPE="E" D  Q RETVAL
"RTN","BPSOSUC",55,0)
 . I 'CLAIM!'RESP S RETVAL="E ELIGIBILITY OTHER" Q
"RTN","BPSOSUC",56,0)
 . S RESP500=$$RESP500^BPSOSQ4(RESP,"I")
"RTN","BPSOSUC",57,0)
 . S X=$$RESP1000^BPSOSQ4(RESP,1,"I")
"RTN","BPSOSUC",58,0)
 . S RETVAL="E ELIGIBILITY "
"RTN","BPSOSUC",59,0)
 . I RESP500="R"!(X="R") S RETVAL=RETVAL_"REJECTED" Q
"RTN","BPSOSUC",60,0)
 . I RESP500="A",X="A" S RETVAL=RETVAL_"ACCEPTED" Q
"RTN","BPSOSUC",61,0)
 . S RETVAL=RETVAL_"OTHER"
"RTN","BPSOSUC",62,0)
 ; During a reversal/resubmit, you may get the next line between the reversal and
"RTN","BPSOSUC",63,0)
 ;   and the resubmit
"RTN","BPSOSUC",64,0)
 I 'CLAIM S RETVAL="E OTHER" Q RETVAL
"RTN","BPSOSUC",65,0)
 I WANTREV,TRANTYPE="U" D  Q RETVAL
"RTN","BPSOSUC",66,0)
 . S RESP=$$GET1^DIQ(FILENUM,N_",",402,"I")
"RTN","BPSOSUC",67,0)
 . S RETVAL="E REVERSAL "
"RTN","BPSOSUC",68,0)
 . I 'RESP S RETVAL=RETVAL_"OTHER" Q
"RTN","BPSOSUC",69,0)
 . S RESP500=$$RESP500^BPSOSQ4(RESP,"I")
"RTN","BPSOSUC",70,0)
 . S X=$$RESP1000^BPSOSQ4(RESP,1,"I")
"RTN","BPSOSUC",71,0)
 . I RESP500="R"!(X="R") S RETVAL=RETVAL_"REJECTED" Q
"RTN","BPSOSUC",72,0)
 . ; Treat Duplicate of Accepted Reversal ("S") as Accepted
"RTN","BPSOSUC",73,0)
 . I RESP500="A",X="A"!(X="S") S RETVAL=RETVAL_"ACCEPTED" Q
"RTN","BPSOSUC",74,0)
 . S RETVAL=RETVAL_"OTHER"
"RTN","BPSOSUC",75,0)
 ; Response not received yet
"RTN","BPSOSUC",76,0)
 I 'RESP S RETVAL="E OTHER" Q RETVAL
"RTN","BPSOSUC",77,0)
 S RESP500=$$RESP500^BPSOSQ4(RESP,"I")
"RTN","BPSOSUC",78,0)
 N POS S POS=$$GET1^DIQ(FILENUM,N_",",14)
"RTN","BPSOSUC",79,0)
 ;if POS comes back null set equal to 1 - BPS*14 ticket 367742 RRA
"RTN","BPSOSUC",80,0)
 S:'POS POS=1
"RTN","BPSOSUC",81,0)
 S X=$$RESP1000^BPSOSQ4(RESP,POS,"I")
"RTN","BPSOSUC",82,0)
 I X="P"!(X="DP") Q "E PAYABLE"
"RTN","BPSOSUC",83,0)
 I X="D" Q "E DUPLICATE" ; SHOULD NEVER HAPPEN as of 02/06/2001
"RTN","BPSOSUC",84,0)
 I X="R" Q "E REJECTED"
"RTN","BPSOSUC",85,0)
 I X="C"!(X="DC") Q "E CAPTURED"
"RTN","BPSOSUC",86,0)
 ; 1000 indefinite, fall back to 500
"RTN","BPSOSUC",87,0)
 I RESP500="R" Q "E REJECTED"
"RTN","BPSOSUC",88,0)
 Q "E OTHER" ; corrupt?
"RTN","BPSPRRX5")
0^59^B82229263
"RTN","BPSPRRX5",1,0)
BPSPRRX5 ;ALB/SS - ePharmacy secondary billing ;12-DEC-08
"RTN","BPSPRRX5",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8,10,11,20**;JUN 2004;Build 27
"RTN","BPSPRRX5",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSPRRX5",4,0)
 ;
"RTN","BPSPRRX5",5,0)
 ;
"RTN","BPSPRRX5",6,0)
 ;select refill by fill date
"RTN","BPSPRRX5",7,0)
SELREFIL(BPSARR,BPSPRMPT,BPSMESS) ;
"RTN","BPSPRRX5",8,0)
 N BPSSTR,BPSCNT,DIR,X,Y
"RTN","BPSPRRX5",9,0)
 S BPX=""
"RTN","BPSPRRX5",10,0)
 S BPSCNT=0
"RTN","BPSPRRX5",11,0)
 S DIR("A")=BPSPRMPT
"RTN","BPSPRRX5",12,0)
 S DIR("L",1)=$G(BPSMESS)
"RTN","BPSPRRX5",13,0)
 S DIR("L",2)=""
"RTN","BPSPRRX5",14,0)
 S DIR("L",3)="   Fill   Date"
"RTN","BPSPRRX5",15,0)
 S DIR("L",4)="   ====   =========="
"RTN","BPSPRRX5",16,0)
 F  S BPX=$O(BPSARR(BPX)) Q:BPX=""  D
"RTN","BPSPRRX5",17,0)
 . S BPSCNT=BPSCNT+1
"RTN","BPSPRRX5",18,0)
 . S $P(BPSSTR,";",BPSCNT)=BPX_":"_$$FMTE^XLFDT($P($G(BPSARR(BPX)),U,2),"5Z")
"RTN","BPSPRRX5",19,0)
 . S DIR("L",BPSCNT+4)="   "_BPX_"      "_$$FMTE^XLFDT($P($G(BPSARR(BPX)),U,2),"5Z")
"RTN","BPSPRRX5",20,0)
 S DIR("L")="  "
"RTN","BPSPRRX5",21,0)
 S DIR(0)="SO^"_BPSSTR
"RTN","BPSPRRX5",22,0)
 D ^DIR
"RTN","BPSPRRX5",23,0)
 I X="^" Q "-1^"
"RTN","BPSPRRX5",24,0)
 I X="" Q ""
"RTN","BPSPRRX5",25,0)
 Q BPSARR(+Y)
"RTN","BPSPRRX5",26,0)
 ;
"RTN","BPSPRRX5",27,0)
 ;check if there is any e-claim for this RX/refill
"RTN","BPSPRRX5",28,0)
 ;BPSRXIEN-ien of file# 52
"RTN","BPSPRRX5",29,0)
 ;BPSREF-refill #
"RTN","BPSPRRX5",30,0)
 ;BPCOBIND - payer sequence (1 -primary, 2- secondary)
"RTN","BPSPRRX5",31,0)
 ;Return value "CODE ^ IEN59  ^ ECME STATUS ^ "
"RTN","BPSPRRX5",32,0)
 ;where
"RTN","BPSPRRX5",33,0)
 ;CODE is one of the following:
"RTN","BPSPRRX5",34,0)
 ;0-not found OR the entry found in BPS TRANSACTION is a non-billable entry
"RTN","BPSPRRX5",35,0)
 ;1-payable
"RTN","BPSPRRX5",36,0)
 ;2-not payable (rejected/reversed) 
"RTN","BPSPRRX5",37,0)
 ;3-in progress (including scheduled requests)
"RTN","BPSPRRX5",38,0)
 ;IEN59 is ien of the BPS TRANSACTION 
"RTN","BPSPRRX5",39,0)
 ;ECME STATUS is the ECME claims status text like "E PAYABLE"
"RTN","BPSPRRX5",40,0)
 ;
"RTN","BPSPRRX5",41,0)
FINDECLM(BPSRXIEN,BPSREF,BPCOBIND) ;
"RTN","BPSPRRX5",42,0)
 N BPS59,BPSSTAT,BPPAYBLE
"RTN","BPSPRRX5",43,0)
 S BPS59=+$$IEN59^BPSOSRX(BPSRXIEN,BPSREF,BPCOBIND)
"RTN","BPSPRRX5",44,0)
 I +$G(^BPST(BPS59,0))=0 Q 0
"RTN","BPSPRRX5",45,0)
 I $$NB^BPSSCR03(BPS59) Q 0_U_BPS59_U     ; BPS*1*20 - non-billable entries return code 0 here
"RTN","BPSPRRX5",46,0)
 S BPSSTAT=$P($$STATUS^BPSOSRX(BPSRXIEN,BPSREF,,,BPCOBIND),U)
"RTN","BPSPRRX5",47,0)
 S BPPAYBLE=$$PAYABLE^BPSOSRX5(BPSSTAT)
"RTN","BPSPRRX5",48,0)
 I BPSSTAT["IN PROGRESS" Q 3_U_BPS59_U_BPSSTAT
"RTN","BPSPRRX5",49,0)
 I BPPAYBLE=1 Q 1_U_BPS59_U_BPSSTAT
"RTN","BPSPRRX5",50,0)
 I BPPAYBLE=0 Q 2_U_BPS59_U_BPSSTAT
"RTN","BPSPRRX5",51,0)
 Q 0
"RTN","BPSPRRX5",52,0)
 ;
"RTN","BPSPRRX5",53,0)
 ;Display e-claim details
"RTN","BPSPRRX5",54,0)
 ;BPSIEN59-ien of the #9002313.59 BPS TRANSACTION file
"RTN","BPSPRRX5",55,0)
DISPECLM(BP59) ;
"RTN","BPSPRRX5",56,0)
 W !,"Drug name     NDC           DOS   RX#         FILL/ECME#     TYPE      STATUS"
"RTN","BPSPRRX5",57,0)
 W !,"==============================================================================="
"RTN","BPSPRRX5",58,0)
 W !,$$CLMINFO(BP59)
"RTN","BPSPRRX5",59,0)
 Q
"RTN","BPSPRRX5",60,0)
 ;
"RTN","BPSPRRX5",61,0)
CLMINFO(BP59) ;
"RTN","BPSPRRX5",62,0)
 N BPX,BPX1,BPCOB,BPSSTAT,BPPAYBLE,DOSDT
"RTN","BPSPRRX5",63,0)
 S BPCOB=$$COB59^BPSUTIL2(BP59)
"RTN","BPSPRRX5",64,0)
 S BPX1=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSPRRX5",65,0)
 S BPX=$$LJ^BPSSCR02($$DRGNAME^BPSSCRU2(BP59),12)_"  "_$$LJ^BPSSCR02($$NDC^BPSSCRU2(+BPX1,+$P(BPX1,U,2)),13)_" "
"RTN","BPSPRRX5",66,0)
 ;
"RTN","BPSPRRX5",67,0)
 ;SLT - BPS*1.0*11
"RTN","BPSPRRX5",68,0)
 S DOSDT=$$LASTDOS^BPSUTIL2(BP59,0)
"RTN","BPSPRRX5",69,0)
 ;
"RTN","BPSPRRX5",70,0)
 S BPX=BPX_$$LJ^BPSSCR02(DOSDT,5)_" "
"RTN","BPSPRRX5",71,0)
 S BPX=BPX_$$LJ^BPSSCR02($$RXNUM^BPSSCRU2(+BPX1),11)_" "_+$P(BPX1,U,2)_"/"
"RTN","BPSPRRX5",72,0)
 S BPX=BPX_$$LJ^BPSSCR02($$ECMENUM^BPSSCRU2(BP59),12)_" "_$$MWCNAME^BPSSCRU2($$GETMWC^BPSSCRU2(BP59))_" "
"RTN","BPSPRRX5",73,0)
 S BPX=BPX_$$RTBB^BPSSCRU2(BP59)_" "_$$RXST^BPSSCRU2(BP59)_"/"_$$RL^BPSSCRU2(BP59)
"RTN","BPSPRRX5",74,0)
 S BPSSTAT=$P($$STATUS^BPSOSRX(+BPX1,+$P(BPX1,U,2),,,BPCOB),U)
"RTN","BPSPRRX5",75,0)
 S BPPAYBLE=$$PAYABLE^BPSOSRX5(BPSSTAT)
"RTN","BPSPRRX5",76,0)
 I BPPAYBLE Q BPX_" PAYABLE"
"RTN","BPSPRRX5",77,0)
 I BPSSTAT["IN PROGRESS" Q BPX_" IN PROGRESS"
"RTN","BPSPRRX5",78,0)
 I BPSSTAT["E REVERSAL ACCEPTED" Q BPX_" REVERSED"
"RTN","BPSPRRX5",79,0)
 I BPSSTAT["E REJECTED" Q BPX_" REJECTED"
"RTN","BPSPRRX5",80,0)
 Q BPX_" OTHER"
"RTN","BPSPRRX5",81,0)
 ;
"RTN","BPSPRRX5",82,0)
 ;get the plan (#355.3) from the BPS TRANSACTION file record
"RTN","BPSPRRX5",83,0)
GETPL59(BP59) ;
"RTN","BPSPRRX5",84,0)
 Q $P($G(^BPST(BP59,10,+$P($G(^BPST(BP59,9)),U,1),0)),U)
"RTN","BPSPRRX5",85,0)
 ;
"RTN","BPSPRRX5",86,0)
 ;get the RATE TYPE (#399.3) from the BPS TRANSACTION file record
"RTN","BPSPRRX5",87,0)
GETRTP59(BP59) ;
"RTN","BPSPRRX5",88,0)
 Q $P($G(^BPST(BP59,10,+$P($G(^BPST(BP59,9)),U,1),0)),U,8)
"RTN","BPSPRRX5",89,0)
 ;
"RTN","BPSPRRX5",90,0)
 ;get the primary bill (#399) from the BPS TRANSACTION file record
"RTN","BPSPRRX5",91,0)
GETBIL59(BP59) ;
"RTN","BPSPRRX5",92,0)
 Q $P($G(^BPST(BP59,10,+$P($G(^BPST(BP59,9)),U,1),2)),U,8)
"RTN","BPSPRRX5",93,0)
 ;
"RTN","BPSPRRX5",94,0)
SELCOB(BPSPRMPT,BPSMESS) ;
"RTN","BPSPRRX5",95,0)
 N DIR,X,Y
"RTN","BPSPRRX5",96,0)
 S DIR("A")=BPSPRMPT
"RTN","BPSPRRX5",97,0)
 S DIR(0)="SO^1:PRIMARY;2:SECONDARY"
"RTN","BPSPRRX5",98,0)
 S DIR("L",1)=BPSMESS
"RTN","BPSPRRX5",99,0)
 S DIR("L",2)=""
"RTN","BPSPRRX5",100,0)
 S DIR("L",3)="   1  PRIMARY"
"RTN","BPSPRRX5",101,0)
 S DIR("L",4)="   2  SECONDARY"
"RTN","BPSPRRX5",102,0)
 S DIR("L")=" "
"RTN","BPSPRRX5",103,0)
 D ^DIR
"RTN","BPSPRRX5",104,0)
 I X="^" Q "-1^"
"RTN","BPSPRRX5",105,0)
 Q +Y
"RTN","BPSPRRX5",106,0)
 ;
"RTN","BPSPRRX5",107,0)
SECNOPRM(BPSRX,BPSRF,BPSDOS,BPSDFN,BPDISPPR) ;
"RTN","BPSPRRX5",108,0)
 ;Submit a secondary claim if there is no primary claim
"RTN","BPSPRRX5",109,0)
 ;Input:
"RTN","BPSPRRX5",110,0)
 ;  BPSRX - Prescription IEN
"RTN","BPSPRRX5",111,0)
 ;  BPSRF - Fill Number
"RTN","BPSPRRX5",112,0)
 ;  BPSDOS - Date of Service
"RTN","BPSPRRX5",113,0)
 ;  BPSDRN - Patient IEN
"RTN","BPSPRRX5",114,0)
 ;  BPDISPPR - display bill information for
"RTN","BPSPRRX5",115,0)
 ;    "1"   - primary 
"RTN","BPSPRRX5",116,0)
 ;    "2"   - secondary
"RTN","BPSPRRX5",117,0)
 ;    "1,2" - both
"RTN","BPSPRRX5",118,0)
 ;
"RTN","BPSPRRX5",119,0)
 ;Return Value:
"RTN","BPSPRRX5",120,0)
 ;  Either the response from EN^BPSNCPDP or an error condition listed below
"RTN","BPSPRRX5",121,0)
 ;     -100^Action cancelled
"RTN","BPSPRRX5",122,0)
 ;     -101^Existing e-claim
"RTN","BPSPRRX5",123,0)
 ;     -102^Claim in progress
"RTN","BPSPRRX5",124,0)
 ;     -103^Invalid or wrong bill#
"RTN","BPSPRRX5",125,0)
 ;     -104^Existing rejected/reversed e-claim
"RTN","BPSPRRX5",126,0)
 ;     -105^The same group plan selected
"RTN","BPSPRRX5",127,0)
 ;     -106^The primary insurer needs to be billed first.
"RTN","BPSPRRX5",128,0)
 ;     -107^Existing active bill
"RTN","BPSPRRX5",129,0)
 ;
"RTN","BPSPRRX5",130,0)
 N BPSBINFO,BPSRXCOB,BPSINIEN,BPPAYSEQ,BPSECLM,BP2NDBIL,BPSRET,BPSQ,BPY,BPYDEF
"RTN","BPSPRRX5",131,0)
 N BPSPLNSL,BPSECOND,BPSWHERE,BPSPLAN,BPSPL59,BPRTTP59,BPSARR,BPRESUBM
"RTN","BPSPRRX5",132,0)
 ; 
"RTN","BPSPRRX5",133,0)
 ;Default = original submission
"RTN","BPSPRRX5",134,0)
 S BPRESUBM=0
"RTN","BPSPRRX5",135,0)
 ;
"RTN","BPSPRRX5",136,0)
 ; Check if there is the secondary claim
"RTN","BPSPRRX5",137,0)
 S BPSECLM=$$FINDECLM^BPSPRRX5(BPSRX,BPSRF,2)
"RTN","BPSPRRX5",138,0)
 I +BPSECLM=3 Q "-102^Claim in progress"
"RTN","BPSPRRX5",139,0)
 I +BPSECLM=1 Q "-109^Existing PAYABLE e-claim. Please reverse it before resubmitting."
"RTN","BPSPRRX5",140,0)
 S BPSQ=0
"RTN","BPSPRRX5",141,0)
 I +BPSECLM=2 D  Q:BPSQ=1 "-100^Action cancelled"
"RTN","BPSPRRX5",142,0)
 . D DISPECLM^BPSPRRX5(+$P(BPSECLM,U,2))
"RTN","BPSPRRX5",143,0)
 . W !!,"There is an existing rejected/reversed secondary e-claim(s) for the RX/refill."
"RTN","BPSPRRX5",144,0)
 . I $$YESNO^BPSSCRRS("Do you want to submit a new secondary claim(Y/N)","N")=1 S BPRESUBM=1
"RTN","BPSPRRX5",145,0)
 . I BPRESUBM'=1 S BPSQ=1
"RTN","BPSPRRX5",146,0)
 ;
"RTN","BPSPRRX5",147,0)
 ; Check for active secondary bill(s)
"RTN","BPSPRRX5",148,0)
 D  Q:+$P(BP2NDBIL,U,2)>0 "-107^Existing active secondary bill"
"RTN","BPSPRRX5",149,0)
 . N BPSARR,BPS399,BPSCNT
"RTN","BPSPRRX5",150,0)
 . ;check for the existing secondary bill
"RTN","BPSPRRX5",151,0)
 . S BP2NDBIL=$$RXBILL^IBNCPUT3(BPSRX,BPSRF,"S","",.BPSARR)
"RTN","BPSPRRX5",152,0)
 . I +BP2NDBIL=0 Q  ;not found
"RTN","BPSPRRX5",153,0)
 . S BPS399=0
"RTN","BPSPRRX5",154,0)
 . S BPSCNT=0
"RTN","BPSPRRX5",155,0)
 . F  S BPS399=$O(BPSARR(BPS399)) Q:+BPS399=0  D
"RTN","BPSPRRX5",156,0)
 . . N BPPSEQ
"RTN","BPSPRRX5",157,0)
 . . S BPSCNT=BPSCNT+1
"RTN","BPSPRRX5",158,0)
 . . I $G(BPDISPPR)[2 D
"RTN","BPSPRRX5",159,0)
 . . . W:BPSCNT=1 !!,"Secondary bill(s) found:"
"RTN","BPSPRRX5",160,0)
 . . . S BPSRET=$P(BPSARR(BPS399),U,5)
"RTN","BPSPRRX5",161,0)
 . . . S BPPSEQ=$S($P(BPSRET,U)="S":"Secondary",$P(BPSRET,U)="T":"Tertiary",$P(BPSRET,U)="P":"Primary",1:"Unknown")
"RTN","BPSPRRX5",162,0)
 . . . D DISPBILL^BPSPRRX2(BPPSEQ,$P(BPSARR(BPS399),U,4),$P(BPSARR(BPS399),U,1),$P(BPSARR(BPS399),U,2),BPSRX,BPSRF,$P(BPSARR(BPS399),U,3),(BPSCNT=1))
"RTN","BPSPRRX5",163,0)
 . W !
"RTN","BPSPRRX5",164,0)
 ;
"RTN","BPSPRRX5",165,0)
 ; Check for ePharmacy secondary ins policy
"RTN","BPSPRRX5",166,0)
 S BPYDEF="N"
"RTN","BPSPRRX5",167,0)
 I '$$SECINSCK^BPSPRRX(BPSDFN,BPSDOS) D
"RTN","BPSPRRX5",168,0)
 . S BPYDEF="Y"
"RTN","BPSPRRX5",169,0)
 . W !!,"Unable to find a secondary insurance policy which is e-Pharmacy billable."
"RTN","BPSPRRX5",170,0)
 . W !,"You must correct this in order to continue.",!
"RTN","BPSPRRX5",171,0)
 . Q
"RTN","BPSPRRX5",172,0)
 ;
"RTN","BPSPRRX5",173,0)
 ; Ask the user if he wants to jump to the BCN PATIENT INSURANCE option
"RTN","BPSPRRX5",174,0)
 S BPY=$$YESNO^BPSSCRRS("DO YOU WISH TO ADD/EDIT INSURANCE COMPANY DATA FOR THIS PATIENT?(Y/N)",BPYDEF)
"RTN","BPSPRRX5",175,0)
 I BPY=1 D EN1^IBNCPDPI(BPSDFN)
"RTN","BPSPRRX5",176,0)
 I BPY=-1 Q "-100^Action cancelled"
"RTN","BPSPRRX5",177,0)
 ;
"RTN","BPSPRRX5",178,0)
 ; Check for ePharmacy secondary ins policy (after possible edit)
"RTN","BPSPRRX5",179,0)
 I '$$SECINSCK^BPSPRRX(BPSDFN,BPSDOS) Q "-115^No Secondary e-Pharmacy Insurance Policy."
"RTN","BPSPRRX5",180,0)
 ;
"RTN","BPSPRRX5",181,0)
 ; Get data from the primary claim, if it exists
"RTN","BPSPRRX5",182,0)
 S BPSRET=$$PRIMDATA^BPSPRRX6(BPSRX,BPSRF,.BPSECOND)
"RTN","BPSPRRX5",183,0)
 ;
"RTN","BPSPRRX5",184,0)
 ; If the primary claim data is missing and this is a resubmit, get data from the most recent
"RTN","BPSPRRX5",185,0)
 ;   secondary claim
"RTN","BPSPRRX5",186,0)
 I 'BPSRET,BPRESUBM=1,$$SECDATA^BPSPRRX6(BPSRX,BPSRF,.BPSPL59,.BPSECOND,.BPRTTP59)
"RTN","BPSPRRX5",187,0)
 ;
"RTN","BPSPRRX5",188,0)
 ; No primary bill
"RTN","BPSPRRX5",189,0)
 S BPSECOND("PRIMARY BILL")=""
"RTN","BPSPRRX5",190,0)
 ;
"RTN","BPSPRRX5",191,0)
 ; Display the data and allow the user to edit
"RTN","BPSPRRX5",192,0)
 I $$PROMPTS^BPSPRRX3(BPSRX,BPSRF,BPSDOS,.BPSECOND)=-1 Q "-100^Action cancelled"
"RTN","BPSPRRX5",193,0)
 ;
"RTN","BPSPRRX5",194,0)
 ; Continue?
"RTN","BPSPRRX5",195,0)
 W !
"RTN","BPSPRRX5",196,0)
 I $$YESNO^BPSSCRRS("SUBMIT CLAIM TO "_$G(BPSECOND("INS NAME"))_" ?(Y/N)","Y")'=1 Q "-100^Action cancelled"
"RTN","BPSPRRX5",197,0)
 ;
"RTN","BPSPRRX5",198,0)
 ; Set the flag that indicates to BPSNCPDP that it should not recompile the data from BPS Transactions
"RTN","BPSPRRX5",199,0)
 S BPSECOND("NEW COB DATA")=1
"RTN","BPSPRRX5",200,0)
 ;
"RTN","BPSPRRX5",201,0)
 ; Set BWHERE dependent on resubmit or not
"RTN","BPSPRRX5",202,0)
 I BPRESUBM=0 S BPSWHERE="P2"
"RTN","BPSPRRX5",203,0)
 I BPRESUBM=1 S BPSWHERE="P2S"
"RTN","BPSPRRX5",204,0)
 ;
"RTN","BPSPRRX5",205,0)
 ; Submit the claim
"RTN","BPSPRRX5",206,0)
 S BPSRET=$$SUBMCLM^BPSPRRX2(BPSRX,BPSRF,BPSDOS,BPSWHERE,2,BPSECOND("PLAN"),.BPSECOND,BPSECOND("RTYPE"))
"RTN","BPSPRRX5",207,0)
 I +BPSRET=4 W !!,$P(BPSRET,U,2),!
"RTN","BPSPRRX5",208,0)
 Q BPSRET
"RTN","BPSPRRX5",209,0)
 ;
"RTN","BPSPRRX5",210,0)
GETOPPRA(BPSRESP,BPARR) ; get the Other Payer-Patient Responsibility Amount/Qualifier pairs from the Primary payer response
"RTN","BPSPRRX5",211,0)
 ; BPS*1*20
"RTN","BPSPRRX5",212,0)
 ;  Input:  BPSRESP - response file ien
"RTN","BPSPRRX5",213,0)
 ; Output:  array BPARR (pass by reference)
"RTN","BPSPRRX5",214,0)
 ;          BPARR = count of amount/qualifier pairs
"RTN","BPSPRRX5",215,0)
 ;          BPARR(#) = AMOUNT ^ QUALIFIER
"RTN","BPSPRRX5",216,0)
 ;
"RTN","BPSPRRX5",217,0)
 ; This subroutine will gather specific dollar amounts from the response file and build the appropriate
"RTN","BPSPRRX5",218,0)
 ; amount/qualifier pairs.
"RTN","BPSPRRX5",219,0)
 ;   352-NQ   Other Payer-Patient Responsibility Amount
"RTN","BPSPRRX5",220,0)
 ;   351-NP   Other Payer-Patient Responsibility Amount Qualifier (see the ECL for valid qualifiers)
"RTN","BPSPRRX5",221,0)
 ;
"RTN","BPSPRRX5",222,0)
 N AMT
"RTN","BPSPRRX5",223,0)
 K BPARR
"RTN","BPSPRRX5",224,0)
 S BPARR=0
"RTN","BPSPRRX5",225,0)
 I '$G(BPSRESP) G GETPPX
"RTN","BPSPRRX5",226,0)
 I '$D(^BPSR(BPSRESP,1000)) G GETPPX
"RTN","BPSPRRX5",227,0)
 ;
"RTN","BPSPRRX5",228,0)
 ; First check for patient pay amount (505-F5)  Qualifier 06.
"RTN","BPSPRRX5",229,0)
 ; Per NCPDP implementation standard, when this exists, this is the only Other Payer-Pt Resp Amount pair. Count=1.
"RTN","BPSPRRX5",230,0)
 S AMT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,5))
"RTN","BPSPRRX5",231,0)
 I AMT S BPARR=BPARR+1,BPARR(BPARR)=AMT_U_"06" G GETPPX     ; get out here if 505-F5 Qualifier 06 exists, we're done.
"RTN","BPSPRRX5",232,0)
 ;
"RTN","BPSPRRX5",233,0)
 S AMT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,17))   ; 517-FH   Qualifier 01
"RTN","BPSPRRX5",234,0)
 I AMT S BPARR=BPARR+1,BPARR(BPARR)=AMT_U_"01"
"RTN","BPSPRRX5",235,0)
 S AMT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,130)),U,4))    ; 134-UK   Qualifier 02
"RTN","BPSPRRX5",236,0)
 I AMT S BPARR=BPARR+1,BPARR(BPARR)=AMT_U_"02"
"RTN","BPSPRRX5",237,0)
 S AMT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,23))   ; 523-FN   Qualifier 03
"RTN","BPSPRRX5",238,0)
 I AMT S BPARR=BPARR+1,BPARR(BPARR)=AMT_U_"03"
"RTN","BPSPRRX5",239,0)
 S AMT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,20))   ; 520-FK   Qualifier 04
"RTN","BPSPRRX5",240,0)
 I AMT S BPARR=BPARR+1,BPARR(BPARR)=AMT_U_"04"
"RTN","BPSPRRX5",241,0)
 S AMT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,18))   ; 518-FI   Qualifier 05
"RTN","BPSPRRX5",242,0)
 I AMT S BPARR=BPARR+1,BPARR(BPARR)=AMT_U_"05"
"RTN","BPSPRRX5",243,0)
 S AMT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,570)),U,2))    ; 572-4U   Qualifier 07
"RTN","BPSPRRX5",244,0)
 I AMT S BPARR=BPARR+1,BPARR(BPARR)=AMT_U_"07"
"RTN","BPSPRRX5",245,0)
 S AMT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,130)),U,5))    ; 135-UM   Qualifier 08
"RTN","BPSPRRX5",246,0)
 I AMT S BPARR=BPARR+1,BPARR(BPARR)=AMT_U_"08"
"RTN","BPSPRRX5",247,0)
 S AMT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,120)),U,9))    ; 129-UD   Qualifier 09
"RTN","BPSPRRX5",248,0)
 I AMT S BPARR=BPARR+1,BPARR(BPARR)=AMT_U_"09"
"RTN","BPSPRRX5",249,0)
 S AMT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,130)),U,3))    ; 133-UJ   Qualifier 10
"RTN","BPSPRRX5",250,0)
 I AMT S BPARR=BPARR+1,BPARR(BPARR)=AMT_U_"10"
"RTN","BPSPRRX5",251,0)
 S AMT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,130)),U,6))    ; 136-UN   Qualifier 11
"RTN","BPSPRRX5",252,0)
 I AMT S BPARR=BPARR+1,BPARR(BPARR)=AMT_U_"11"
"RTN","BPSPRRX5",253,0)
 S AMT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,130)),U,7))    ; 137-UP   Qualifier 12
"RTN","BPSPRRX5",254,0)
 I AMT S BPARR=BPARR+1,BPARR(BPARR)=AMT_U_"12"
"RTN","BPSPRRX5",255,0)
 S AMT=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,570)),U,1))    ; 571-NZ   Qualifier 13
"RTN","BPSPRRX5",256,0)
 I AMT S BPARR=BPARR+1,BPARR(BPARR)=AMT_U_"13"
"RTN","BPSPRRX5",257,0)
 ;
"RTN","BPSPRRX5",258,0)
GETPPX ;
"RTN","BPSPRRX5",259,0)
 Q
"RTN","BPSPRRX5",260,0)
 ;
"RTN","BPSPRRX5",261,0)
 ;BPSPRRX5
"RTN","BPSPSOU1")
0^56^B14671447
"RTN","BPSPSOU1",1,0)
BPSPSOU1 ;ALB/CFS - ECME VALIDATIONS FOR REVERSE AND RESUBMIT CALLED FROM OUTPATIENT PHARMACY ;15-OCT-05
"RTN","BPSPSOU1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**20**;JUN 2004;Build 27
"RTN","BPSPSOU1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSPSOU1",4,0)
 ; Reference to $$LSTRFL^PSOBPSU1 supported by IA #4702.
"RTN","BPSPSOU1",5,0)
 ;
"RTN","BPSPSOU1",6,0)
 Q
"RTN","BPSPSOU1",7,0)
 ;
"RTN","BPSPSOU1",8,0)
VAL(RXIEN,FILL,PSOELIG,ACTION,COB,REVREAS) ;
"RTN","BPSPSOU1",9,0)
 ;   Input:
"RTN","BPSPSOU1",10,0)
 ;      RXIEN   = Prescription ien
"RTN","BPSPSOU1",11,0)
 ;      FILL    = FILL #
"RTN","BPSPSOU1",12,0)
 ;      PSOELIG = TRICARE or CHAMPVA
"RTN","BPSPSOU1",13,0)
 ;      ACTION  = "REV" - Reverse or "RES" - Resubmit
"RTN","BPSPSOU1",14,0)
 ;
"RTN","BPSPSOU1",15,0)
 ;   Output:
"RTN","BPSPSOU1",16,0)
 ;      COB     = Coordination of Benefits
"RTN","BPSPSOU1",17,0)
 ;      REVREAS = Reverse Reason
"RTN","BPSPSOU1",18,0)
 ;
"RTN","BPSPSOU1",19,0)
 ;   Function Return Values:
"RTN","BPSPSOU1",20,0)
 ;      0       = Failed validation
"RTN","BPSPSOU1",21,0)
 ;      1       = Passed validation
"RTN","BPSPSOU1",22,0)
 ;
"RTN","BPSPSOU1",23,0)
 ; This functions does validation checks for Reversing and Resubmitting a claim
"RTN","BPSPSOU1",24,0)
 ; called from the Prescription Edit screen hidden actions in Outpatient Pharmacy.
"RTN","BPSPSOU1",25,0)
 ;
"RTN","BPSPSOU1",26,0)
 N BPINPROG,BPSTATS,BPSTIEN,BPSYN,DFN,PATNAME,VADM
"RTN","BPSPSOU1",27,0)
 I '$G(RXIEN) Q 0
"RTN","BPSPSOU1",28,0)
 I '$D(FILL) S FILL=$$LSTRFL^PSOBPSU1(RXIEN)  ; Most recent fill. DBIA #4702.
"RTN","BPSPSOU1",29,0)
 S PSOELIG=$G(PSOELIG)
"RTN","BPSPSOU1",30,0)
 I ACTION'="REV",ACTION'="RES" Q 0
"RTN","BPSPSOU1",31,0)
 S BPINPROG=0
"RTN","BPSPSOU1",32,0)
 S COB=$$GETCOB^BPSBUTL(RXIEN,FILL),BPSTIEN=$P(COB,U,2),COB=$P(COB,U)
"RTN","BPSPSOU1",33,0)
 I COB="" D  D PAUSE^VALM1 Q 0
"RTN","BPSPSOU1",34,0)
 . W !!,"Claim not found. Cannot "_$S(ACTION="REV":"Reverse.",1:"Resubmit.")
"RTN","BPSPSOU1",35,0)
 I COB=-1 W !!,"Primary and Secondary claims exist. Please contact OPECC." D PAUSE^VALM1 Q 0
"RTN","BPSPSOU1",36,0)
 S DFN=$P(^BPST(BPSTIEN,0),U,6)
"RTN","BPSPSOU1",37,0)
 D DEM^VADPT S PATNAME=VADM(1)
"RTN","BPSPSOU1",38,0)
 I $$NB^BPSSCR03(BPSTIEN) D  D PAUSE^VALM1 Q 0
"RTN","BPSPSOU1",39,0)
 . W !!,$S(ACTION="REV":"REVERSE",1:"RESUBMIT")_" not allowed for "_PSOELIG_" Non-Billable claim."
"RTN","BPSPSOU1",40,0)
 I $$CLOSED02^BPSSCR03($P($G(^BPST(BPSTIEN,0)),U,4)) D  D PAUSE^VALM1 Q 0
"RTN","BPSPSOU1",41,0)
 . W !!,"The claim is Closed and cannot be "_$S(ACTION="REV":"Reversed.",1:"Resubmitted.")
"RTN","BPSPSOU1",42,0)
 . W !," Please reopen the claim and try again."
"RTN","BPSPSOU1",43,0)
 S BPSTATS=$P($$CLAIMST^BPSSCRU3(BPSTIEN),U)
"RTN","BPSPSOU1",44,0)
 I (BPSTATS="IN PROGRESS")!(BPSTATS="SCHEDULED") S BPINPROG=1
"RTN","BPSPSOU1",45,0)
 I BPINPROG=0,ACTION="REV",'$$PAYABLE^BPSOSRX5(BPSTATS) D  D PAUSE^VALM1 Q 0
"RTN","BPSPSOU1",46,0)
 . W !!,"The claim is NOT Payable and cannot be Reversed."
"RTN","BPSPSOU1",47,0)
 S BPSYN=1
"RTN","BPSPSOU1",48,0)
 I BPINPROG=1 D  S BPSYN=$$YESNO("Do you want to proceed?(Y/N)") I BPSYN<1 Q 0
"RTN","BPSPSOU1",49,0)
 . W !!,"The claim you've chosen to "_$S(ACTION="REV":"REVERSE",1:"RESUBMIT")_" for "_$E(PATNAME,1,13)_" is in progress."
"RTN","BPSPSOU1",50,0)
 . W !,"The "_$S(ACTION="REV":"reversal",1:"resubmittal")_" request will be scheduled and processed after the previous"
"RTN","BPSPSOU1",51,0)
 . W !,"request(s) are completed. Please be aware that the result of the "_$S(ACTION="REV":"reversal",1:"resubmittal")
"RTN","BPSPSOU1",52,0)
 . W !,"depends on the payer's response to the prior incomplete requests."
"RTN","BPSPSOU1",53,0)
 I BPINPROG=0!(BPSYN) D
"RTN","BPSPSOU1",54,0)
 . W !!,"You've chosen to "_$S(ACTION="REV":"REVERSE",1:"RESUBMIT")_" the following prescription for "_$E(PATNAME,1,13)_"."
"RTN","BPSPSOU1",55,0)
 I ACTION="REV" D
"RTN","BPSPSOU1",56,0)
 . W !,"Please provide the reason or enter ^ to abandon the reversal."
"RTN","BPSPSOU1",57,0)
 . F  S REVREAS=$$COMMENT^BPSSCRCL("Enter REQUIRED REVERSAL REASON",60) Q:REVREAS="^"  Q:($L(REVREAS)>0)&(REVREAS'="^")&('(REVREAS?1" "." "))
"RTN","BPSPSOU1",58,0)
 I $G(REVREAS)["^" W !!,"The claim was NOT reversed!" D PAUSE^VALM1 Q 0
"RTN","BPSPSOU1",59,0)
 S BPSYN=$$YESNO("Are you sure?(Y/N)")
"RTN","BPSPSOU1",60,0)
 I BPSYN<1 Q 0
"RTN","BPSPSOU1",61,0)
 Q 1
"RTN","BPSPSOU1",62,0)
 ;
"RTN","BPSPSOU1",63,0)
YESNO(PSOSTR,PSOFL) ; Default - YES
"RTN","BPSPSOU1",64,0)
 N DIR,Y,DUOUT
"RTN","BPSPSOU1",65,0)
 S DIR(0)="Y"
"RTN","BPSPSOU1",66,0)
 S DIR("A")=PSOSTR
"RTN","BPSPSOU1",67,0)
 S:$L($G(PSOFL)) DIR("B")=PSOFL
"RTN","BPSPSOU1",68,0)
 D ^DIR
"RTN","BPSPSOU1",69,0)
 Q $S($G(DUOUT)!$G(DUOUT)!(Y="^"):-1,1:Y)
"RTN","BPSPSOU1",70,0)
 ;
"RTN","BPSREOP1")
0^15^B57917968
"RTN","BPSREOP1",1,0)
BPSREOP1 ;BHAM ISC/SS - REOPEN CLOSED CLAIMS ;03/07/08  14:54
"RTN","BPSREOP1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**3,7,10,11,20**;JUN 2004;Build 27
"RTN","BPSREOP1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSREOP1",4,0)
 ;Reopen closed claims
"RTN","BPSREOP1",5,0)
 ;
"RTN","BPSREOP1",6,0)
 ;create an ^TMP for the list manager
"RTN","BPSREOP1",7,0)
 ;
"RTN","BPSREOP1",8,0)
COLLECT(BPDFN,BPSTRT,BPEND) ;
"RTN","BPSREOP1",9,0)
 D CLEAN^VALM10
"RTN","BPSREOP1",10,0)
 N LINE
"RTN","BPSREOP1",11,0)
 N BPIEN02,BPIEN59
"RTN","BPSREOP1",12,0)
 S LINE=1
"RTN","BPSREOP1",13,0)
 S BPIEN59=0
"RTN","BPSREOP1",14,0)
 F  S BPIEN59=$O(^BPST("AC",BPDFN,BPIEN59)) Q:+BPIEN59=0  D
"RTN","BPSREOP1",15,0)
 . I $P($G(^BPST(BPIEN59,12)),U,2)<BPSTRT Q
"RTN","BPSREOP1",16,0)
 . I $P($G(^BPST(BPIEN59,12)),U,2)>BPEND Q
"RTN","BPSREOP1",17,0)
 . ; Don't display deleted prescriptions
"RTN","BPSREOP1",18,0)
 . I $$RXDEL^BPSOS($P(^BPST(BPIEN59,1),U,11),$P(^BPST(BPIEN59,1),U,1)) Q
"RTN","BPSREOP1",19,0)
 . S BPIEN02=+$P($G(^BPST(BPIEN59,0)),U,4)
"RTN","BPSREOP1",20,0)
 . ;if the is no BPS CLAIMS - error
"RTN","BPSREOP1",21,0)
 . Q:BPIEN02=0
"RTN","BPSREOP1",22,0)
 . ;if NOT closed
"RTN","BPSREOP1",23,0)
 . I +$P($G(^BPSC(BPIEN02,900)),U)=0 Q
"RTN","BPSREOP1",24,0)
 . D SET^VALM10(LINE,$$LJ^BPSSCR02(LINE,6)_$$CLAIMINF(BPIEN59),BPIEN59)
"RTN","BPSREOP1",25,0)
 . S LINE=LINE+1
"RTN","BPSREOP1",26,0)
 S VALMCNT=LINE-1 ;"of PAGE" fix - VALMCNT should be EXACT number of lines on the screen
"RTN","BPSREOP1",27,0)
 Q
"RTN","BPSREOP1",28,0)
 ;claim info for list manager screen
"RTN","BPSREOP1",29,0)
CLAIMINF(BP59) ;*/
"RTN","BPSREOP1",30,0)
 Q $$CLAIMINF^BPSSCR02(BP59)
"RTN","BPSREOP1",31,0)
 ;
"RTN","BPSREOP1",32,0)
 ;patient info for header
"RTN","BPSREOP1",33,0)
PATINF(BPDFN) ;*/
"RTN","BPSREOP1",34,0)
 N X
"RTN","BPSREOP1",35,0)
 S X=$E($$PATNAME(BPDFN),1,22)_" "_$$SSN4^BPSSCRU2(BPDFN)
"RTN","BPSREOP1",36,0)
 Q $$LJ^BPSSCR02(X,29) ;name
"RTN","BPSREOP1",37,0)
 ;
"RTN","BPSREOP1",38,0)
 ;------------ patient's name
"RTN","BPSREOP1",39,0)
PATNAME(BPDFN) ;
"RTN","BPSREOP1",40,0)
 Q $E($P($G(^DPT(BPDFN,0)),U),1,30)
"RTN","BPSREOP1",41,0)
 ;
"RTN","BPSREOP1",42,0)
 ;/**
"RTN","BPSREOP1",43,0)
 ;ECME User Screen Reopen Closed Claim Hidden Action (ROC)
"RTN","BPSREOP1",44,0)
 ;**/
"RTN","BPSREOP1",45,0)
EUSCREOP ;
"RTN","BPSREOP1",46,0)
 N BPREOP,BP59,BPDFN,BPDISP,BPCNT,BPI,BPJ,BPCOMM,BPRETV,BPIEN02,BPSRXNUM
"RTN","BPSREOP1",47,0)
 ; Check for BPS MANAGER security key
"RTN","BPSREOP1",48,0)
 I '$D(^XUSEC("BPS MANAGER",DUZ)) D  Q
"RTN","BPSREOP1",49,0)
 . W !,"You must hold the BPS MANAGER Security Key to access the",!,"Reopen Closed Claims option."
"RTN","BPSREOP1",50,0)
 . S VALMBCK="R"
"RTN","BPSREOP1",51,0)
 . D PAUSE^VALM1
"RTN","BPSREOP1",52,0)
 S (BP59,BPCNT,BPI,BPJ)=0
"RTN","BPSREOP1",53,0)
 I '$D(@(VALMAR)) G REOP
"RTN","BPSREOP1",54,0)
 D FULL^VALM1
"RTN","BPSREOP1",55,0)
 ; Select the claim(s) to reopen
"RTN","BPSREOP1",56,0)
 W !,"Enter the line number for the claim you want to reopen."
"RTN","BPSREOP1",57,0)
 I $$ASKLINES^BPSSCRU4("","C",.BPREOP,VALMAR) D
"RTN","BPSREOP1",58,0)
 . ; Build array to display to user
"RTN","BPSREOP1",59,0)
 . F  S BP59=$O(BPREOP(BP59)) Q:BP59=""  D
"RTN","BPSREOP1",60,0)
 . . S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSREOP1",61,0)
 . . S BPCNT=BPCNT+1
"RTN","BPSREOP1",62,0)
 . . I '$D(BPDISP(BPDFN)) S BPDISP(BPDFN,BPCNT)=$$LJ^BPSSCR02($$PATNAME(BPDFN)_" :",50),BPCNT=BPCNT+1
"RTN","BPSREOP1",63,0)
 . . S BPDISP(BPDFN,BPCNT)=@VALMAR@($P(BPREOP(BP59),U,1),0)
"RTN","BPSREOP1",64,0)
 . . ;
"RTN","BPSREOP1",65,0)
 . . ; check for non-billable entry
"RTN","BPSREOP1",66,0)
 . . I $$NB^BPSSCR03(BP59) D  Q
"RTN","BPSREOP1",67,0)
 . . . S BPCNT=BPCNT+1
"RTN","BPSREOP1",68,0)
 . . . S BPDISP(BPDFN,BPCNT)="Entry is NON BILLABLE.  There is no claim to reopen."
"RTN","BPSREOP1",69,0)
 . . . K BPREOP(BP59)
"RTN","BPSREOP1",70,0)
 . . . Q
"RTN","BPSREOP1",71,0)
 . . ;
"RTN","BPSREOP1",72,0)
 . . ; Make sure this claim is closed
"RTN","BPSREOP1",73,0)
 . . I '$$CLOSED02^BPSSCR03($P($G(^BPST(BP59,0)),U,4)) D
"RTN","BPSREOP1",74,0)
 . . . S BPCNT=BPCNT+1
"RTN","BPSREOP1",75,0)
 . . . S BPDISP(BPDFN,BPCNT)="Claim NOT closed and cannot be reopened."
"RTN","BPSREOP1",76,0)
 . . . K BPREOP(BP59)
"RTN","BPSREOP1",77,0)
 . . ; Make sure the Prescription isn't deleted
"RTN","BPSREOP1",78,0)
 . . I $$RXDEL^BPSOS($P(^BPST(BP59,1),U,11),$P(^BPST(BP59,1),U,1)) D
"RTN","BPSREOP1",79,0)
 . . . S BPCNT=BPCNT+1
"RTN","BPSREOP1",80,0)
 . . . S BPDISP(BPDFN,BPCNT)="The prescription has been marked DELETED and cannot be reopened."
"RTN","BPSREOP1",81,0)
 . . . K BPREOP(BP59)
"RTN","BPSREOP1",82,0)
 . ; Display the selected claims from the display array
"RTN","BPSREOP1",83,0)
 . W !!,"You've chosen to reopen the following prescriptions(s) for"
"RTN","BPSREOP1",84,0)
 . F  S BPI=$O(BPDISP(BPI)) Q:BPI=""  D
"RTN","BPSREOP1",85,0)
 . . F  S BPJ=$O(BPDISP(BPI,BPJ)) Q:BPJ=""  D
"RTN","BPSREOP1",86,0)
 . . . W !,BPDISP(BPI,BPJ)
"RTN","BPSREOP1",87,0)
 . . Q
"RTN","BPSREOP1",88,0)
 . Q
"RTN","BPSREOP1",89,0)
 ; If there are any closed claims selected, verify if the users still wants to reopen
"RTN","BPSREOP1",90,0)
 I $D(BPREOP) D
"RTN","BPSREOP1",91,0)
 . W !!,"All Selected Rxs will be reopened using the same information gathered in the",!,"following prompts.",!!
"RTN","BPSREOP1",92,0)
 . I $$YESNO^BPSSCRRS("Are you sure?(Y/N)")=1 D
"RTN","BPSREOP1",93,0)
 . . ; Get the Reopen Comments to be stored in the BPS CLAIMS file
"RTN","BPSREOP1",94,0)
 . . S BPCOMM=$$PROMPT("REOPEN COMMENTS","","F",1,40)
"RTN","BPSREOP1",95,0)
 . . Q:BPCOMM["^"
"RTN","BPSREOP1",96,0)
 . . ; Do we REALLY want to reopen the claims?
"RTN","BPSREOP1",97,0)
 . . I $$YESNO^BPSSCRRS("ARE YOU SURE YOU WANT TO RE-OPEN THIS CLAIM? (Y/N)","No")=1 D
"RTN","BPSREOP1",98,0)
 . . . S (BPCNT,BP59)=0
"RTN","BPSREOP1",99,0)
 . . . ; Loop through all selected claims and reopen them one at a time
"RTN","BPSREOP1",100,0)
 . . . ; using the same comments
"RTN","BPSREOP1",101,0)
 . . . F  S BP59=$O(BPREOP(BP59)) Q:BP59=""  D
"RTN","BPSREOP1",102,0)
 . . . . S BPIEN02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSREOP1",103,0)
 . . . . S BPRETV=$$REOPEN^BPSBUTL(BP59,BPIEN02,$$NOW^XLFDT,+DUZ,BPCOMM)
"RTN","BPSREOP1",104,0)
 . . . . W !,$P(BPRETV,U,2)
"RTN","BPSREOP1",105,0)
 . . . . I +BPRETV S BPCNT=BPCNT+1
"RTN","BPSREOP1",106,0)
 . . . . Q
"RTN","BPSREOP1",107,0)
 . . . I BPCNT>1 W !!,BPCNT_" claims have been reopened.",! Q
"RTN","BPSREOP1",108,0)
 . . . I BPCNT=1 W !!,"1 claim has been reopened.",! Q
"RTN","BPSREOP1",109,0)
 . . . I BPCNT=0 W !!,"Unable to reopen claim" Q
"RTN","BPSREOP1",110,0)
 I '$D(BPREOP) S VALMBCK="R" D PAUSE^VALM1 Q
"RTN","BPSREOP1",111,0)
 D PAUSE^VALM1
"RTN","BPSREOP1",112,0)
 D REDRAW^BPSSCRUD("Updating screen for reopened claims...")
"RTN","BPSREOP1",113,0)
 Q
"RTN","BPSREOP1",114,0)
 ;
"RTN","BPSREOP1",115,0)
SELECT ;
"RTN","BPSREOP1",116,0)
 I VALMCNT<1 D  Q
"RTN","BPSREOP1",117,0)
 . W !,"No claims to select." D PAUSE^VALM1 S VALMBCK="R"
"RTN","BPSREOP1",118,0)
 N BP59,BPQ
"RTN","BPSREOP1",119,0)
 D FULL^VALM1
"RTN","BPSREOP1",120,0)
 S BP59=0
"RTN","BPSREOP1",121,0)
 S BPQ=0
"RTN","BPSREOP1",122,0)
 F  S BPLINE=$$PROMPT("Select item","","A") D  Q:BPQ
"RTN","BPSREOP1",123,0)
 . I BPLINE="^" S BPQ=1 Q
"RTN","BPSREOP1",124,0)
 . I '(BPLINE?1N.N) W !,"Please select a SINGLE Rx Line Item." Q
"RTN","BPSREOP1",125,0)
 . S BP59=+$$GET59(+BPLINE) I BP59>0 S BPQ=1 Q
"RTN","BPSREOP1",126,0)
 . W !,"Please select a VALID Rx Line Item."
"RTN","BPSREOP1",127,0)
 I BPLINE="^" S VALMBCK="R" Q
"RTN","BPSREOP1",128,0)
 I BP59=0 S VALMBCK="R" W !,"Invalid selection." D PAUSE^VALM1 Q
"RTN","BPSREOP1",129,0)
 I $$SELCLAIM(BP59)<1 S VALMBCK="R" Q
"RTN","BPSREOP1",130,0)
 ;D RE^VALM4
"RTN","BPSREOP1",131,0)
 D REDRAW
"RTN","BPSREOP1",132,0)
 S VALMBCK="R"
"RTN","BPSREOP1",133,0)
 Q
"RTN","BPSREOP1",134,0)
 ;
"RTN","BPSREOP1",135,0)
GET59(BPLINE) ;
"RTN","BPSREOP1",136,0)
 Q +$O(^TMP("BPSREOP",$J,"VALM","IDX",BPLINE,0))
"RTN","BPSREOP1",137,0)
 ;
"RTN","BPSREOP1",138,0)
 ;display selected claim information
"RTN","BPSREOP1",139,0)
SELCLAIM(BP59) ;
"RTN","BPSREOP1",140,0)
 D FULL^VALM1
"RTN","BPSREOP1",141,0)
 W @IOF
"RTN","BPSREOP1",142,0)
 N BPX,BPX1,BPDFN,BPIEN02,BPCLDATA,BPCOMM,BPRETV,BPQ
"RTN","BPSREOP1",143,0)
 S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSREOP1",144,0)
 S BPX1=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSREOP1",145,0)
 W !,?1,$$LJ^BPSSCR02("PATIENT NAME: "_$$PATNAME(BPDFN),30)
"RTN","BPSREOP1",146,0)
 W ?33,$$LJ^BPSSCR02("RX#: "_$$RXNUM^BPSSCRU2(+BPX1)_" "_$P(BPX1,U,2),22)
"RTN","BPSREOP1",147,0)
 W ?57,$$LJ^BPSSCR02("DRUG: "_$$DRGNAME^BPSSCRU2(BP59),22)
"RTN","BPSREOP1",148,0)
 ;ien in BPS CLAIMS
"RTN","BPSREOP1",149,0)
 S BPIEN02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSREOP1",150,0)
 I BPIEN02=0 W !,"BPS CLAIMS file error!" D PAUSE^VALM1 Q -1
"RTN","BPSREOP1",151,0)
 ;Close info
"RTN","BPSREOP1",152,0)
 S BPCLDATA=$G(^BPSC(BPIEN02,900))
"RTN","BPSREOP1",153,0)
 ;if the is no BPS CLAIMS - error
"RTN","BPSREOP1",154,0)
 W !,?3,"CLOSED  ",$$FORMDATE^BPSSCRU6(+$P($G(^BPSC(BPIEN02,900)),U,2),2)
"RTN","BPSREOP1",155,0)
 W !,?4,"ECME#: "_$$ECMENUM^BPSSCRU2(BP59)_", DOS: "_$$LASTDOS^BPSUTIL2(BP59,1)
"RTN","BPSREOP1",156,0)
 W ", RELEASE DATE: "_$$FORMDATE^BPSSCRU6($$RELDATE^BPSSCRU6(+BPX1,+$P(BPX1,U,2)),2)
"RTN","BPSREOP1",157,0)
 W !,?4,"PLAN: ",$$PLANNAME^BPSSCRU6(BP59)," INSURANCE: ",$$INSNAME^BPSSCRU6(BP59)
"RTN","BPSREOP1",158,0)
 W !,?4,"CLOSE REASON: ",$$CLREASON^BPSSCRU6(+$P(BPCLDATA,U,4))
"RTN","BPSREOP1",159,0)
 W !,?4,"DROP TO PAPER: ",$S(+$P(BPCLDATA,U,5)=1:"YES",1:"NO")
"RTN","BPSREOP1",160,0)
 W !,?4,"CLOSE USER: ",$P($G(^VA(200,+$P(BPCLDATA,U,3),0)),U)
"RTN","BPSREOP1",161,0)
 W !!,"You have selected the CLOSED electronic claim listed above.",!
"RTN","BPSREOP1",162,0)
 S BPCOMM=$$PROMPT("REOPEN COMMENTS","","F",1,40)
"RTN","BPSREOP1",163,0)
 Q:BPCOMM["^" 0
"RTN","BPSREOP1",164,0)
 S BPQ=$$YESNO^BPSSCRRS("ARE YOU SURE YOU WANT TO RE-OPEN THIS CLAIM? (Y/N)","No")
"RTN","BPSREOP1",165,0)
 Q:BPQ<1 0
"RTN","BPSREOP1",166,0)
 S BPRETV=$$REOPEN^BPSBUTL(BP59,BPIEN02,$$NOW^XLFDT,+DUZ,BPCOMM)
"RTN","BPSREOP1",167,0)
 W !,$P(BPRETV,U,2),!
"RTN","BPSREOP1",168,0)
 W !,"1 claim has been reopened.",!
"RTN","BPSREOP1",169,0)
 D PAUSE^VALM1
"RTN","BPSREOP1",170,0)
 Q 1
"RTN","BPSREOP1",171,0)
 ;
"RTN","BPSREOP1",172,0)
REDRAW ;
"RTN","BPSREOP1",173,0)
 N BPARR
"RTN","BPSREOP1",174,0)
 D CLEAN^VALM10
"RTN","BPSREOP1",175,0)
 D COLLECT^BPSREOP1(BPDFN,BPSTRT,BPEND)
"RTN","BPSREOP1",176,0)
 S VALMBCK="R"
"RTN","BPSREOP1",177,0)
 Q
"RTN","BPSREOP1",178,0)
 ;input:
"RTN","BPSREOP1",179,0)
 ;BPSPROM - prompt text
"RTN","BPSREOP1",180,0)
 ;BPSDFVL - default value (optional)
"RTN","BPSREOP1",181,0)
 ;BPMODE - N- to enter numbers, F - free text, A - free text w/o limitations
"RTN","BPSREOP1",182,0)
 ;returns:
"RTN","BPSREOP1",183,0)
 ; "response"
"RTN","BPSREOP1",184,0)
 ; or "^" for quit
"RTN","BPSREOP1",185,0)
PROMPT(BPSPROM,BPSDFVL,BPMODE,MINLEN,MAXLEN) ;
"RTN","BPSREOP1",186,0)
 N IR,X,Y,DIRUT,DIR
"RTN","BPSREOP1",187,0)
 I BPMODE="N" S DIR(0)="N^::2"
"RTN","BPSREOP1",188,0)
 I BPMODE="A" S DIR(0)="F^::2"
"RTN","BPSREOP1",189,0)
 I BPMODE="F" S DIR(0)="F^"_MINLEN_":"_MAXLEN_":2^K:(X?1"" ""."" "") X"
"RTN","BPSREOP1",190,0)
 S DIR("A")=BPSPROM
"RTN","BPSREOP1",191,0)
 I $L($G(BPSDFVL))>0 S DIR("B")=$G(BPSDFVL)
"RTN","BPSREOP1",192,0)
 D ^DIR I $D(DIRUT) Q "^"
"RTN","BPSREOP1",193,0)
 I Y["^" Q "^"
"RTN","BPSREOP1",194,0)
 Q Y
"RTN","BPSREOP1",195,0)
 ;
"RTN","BPSREOP1",196,0)
 ;Update reopen record in BPS CLAIM
"RTN","BPSREOP1",197,0)
 ;Input:
"RTN","BPSREOP1",198,0)
 ; BP02 - ien in BPS CLAIMS file
"RTN","BPSREOP1",199,0)
 ; BPCLOSED - value for CLOSED field
"RTN","BPSREOP1",200,0)
 ; BPREOPDT - reopen date/time
"RTN","BPSREOP1",201,0)
 ; BPDUZ - user DUZ (#200 ien)
"RTN","BPSREOP1",202,0)
 ; BPCOMM - reopen comment text
"RTN","BPSREOP1",203,0)
 ;Output:
"RTN","BPSREOP1",204,0)
 ; 0^message_error - error
"RTN","BPSREOP1",205,0)
 ; 1 - success
"RTN","BPSREOP1",206,0)
UPDREOP(BP02,BPCLOSED,BPREOPDT,BPDUZ,BPCOMM) ;
"RTN","BPSREOP1",207,0)
 ;Now update ECME database
"RTN","BPSREOP1",208,0)
 N RECIENS,BPDA,BPLCK,ERRARR
"RTN","BPSREOP1",209,0)
 S RECIENS=BP02_","
"RTN","BPSREOP1",210,0)
 S BPDA(9002313.02,RECIENS,901)=BPCLOSED ;CLOSED = "NO"
"RTN","BPSREOP1",211,0)
 S BPDA(9002313.02,RECIENS,906)=BPREOPDT ;reopen date/time
"RTN","BPSREOP1",212,0)
 S BPDA(9002313.02,RECIENS,907)=+BPDUZ ;user
"RTN","BPSREOP1",213,0)
 S BPDA(9002313.02,RECIENS,908)=BPCOMM ;comment
"RTN","BPSREOP1",214,0)
 L +^BPST(9002313.02,+BP02):10
"RTN","BPSREOP1",215,0)
 S BPLCK=$T
"RTN","BPSREOP1",216,0)
 I 'BPLCK Q "0^Locked record"  ;quit
"RTN","BPSREOP1",217,0)
 D FILE^DIE("","BPDA","ERRARR")
"RTN","BPSREOP1",218,0)
 I BPLCK L -^BPST(9002313.02,+BP02)
"RTN","BPSREOP1",219,0)
 I $D(ERRARR) Q "0^"_ERRARR("DIERR",1,"TEXT",1)
"RTN","BPSREOP1",220,0)
 Q 1
"RTN","BPSREOP1",221,0)
 ;
"RTN","BPSREOP1",222,0)
 ; Reopen Closed Claim displayed in ECME User Screen
"RTN","BPSREOP1",223,0)
REOP ;
"RTN","BPSREOP1",224,0)
 Q
"RTN","BPSRES")
0^28^B159042443
"RTN","BPSRES",1,0)
BPSRES ;BHAM ISC/BEE - ECME SCREEN RESUBMIT W/EDITS ;3/12/08  14:01
"RTN","BPSRES",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**3,5,7,8,10,11,20**;JUN 2004;Build 27
"RTN","BPSRES",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRES",4,0)
 ;
"RTN","BPSRES",5,0)
 ; Reference to $$RXRLDT^PSOBPSUT supported by DBIA 4701
"RTN","BPSRES",6,0)
 ; Reference to $$RXFLDT^PSOBPSUT supported by DBIA 4701
"RTN","BPSRES",7,0)
 ;
"RTN","BPSRES",8,0)
 ;ECME Resubmit w/EDITS Protocol (Hidden) - Called by [BPS USER SCREEN]
"RTN","BPSRES",9,0)
 ;
"RTN","BPSRES",10,0)
RESED N BPSEL
"RTN","BPSRES",11,0)
 ;
"RTN","BPSRES",12,0)
 I '$D(@(VALMAR)) G XRESED
"RTN","BPSRES",13,0)
 D FULL^VALM1
"RTN","BPSRES",14,0)
 ;
"RTN","BPSRES",15,0)
 ;Select the claim to resubmit
"RTN","BPSRES",16,0)
 W !,"Enter the line number for the claim to be resubmitted."
"RTN","BPSRES",17,0)
 S BPSEL=$$ASKLINE("Select item","Please select a SINGLE claim only when using the Resubmit w/EDITS action option.")
"RTN","BPSRES",18,0)
 I BPSEL<1 S VALMBCK="R" G XRESED
"RTN","BPSRES",19,0)
 ;
"RTN","BPSRES",20,0)
 ;Attempt to resubmit the claim, update the content of the screen, and display
"RTN","BPSRES",21,0)
 ;only if claim submitted successfully
"RTN","BPSRES",22,0)
 I $$DOSELCTD(BPSEL) D REDRAW^BPSSCRUD("Updating screen for resubmitted claim...")
"RTN","BPSRES",23,0)
 E  S VALMBCK="R"
"RTN","BPSRES",24,0)
 ;
"RTN","BPSRES",25,0)
XRESED Q
"RTN","BPSRES",26,0)
 ;
"RTN","BPSRES",27,0)
 ;Attempt to Edit and Resubmit Selected Claim
"RTN","BPSRES",28,0)
 ;
"RTN","BPSRES",29,0)
 ;   Input Value -> BPRXI - Entry with ptr to BPS TRANSACTION file
"RTN","BPSRES",30,0)
 ;
"RTN","BPSRES",31,0)
 ;  Return Value -> 0 - Claim was not resubmitted
"RTN","BPSRES",32,0)
 ;                  1 - Claim was resubmitted
"RTN","BPSRES",33,0)
 ;
"RTN","BPSRES",34,0)
DOSELCTD(BPRXI) ;
"RTN","BPSRES",35,0)
 N BP02,BP59,BPBILL,BPCLTOT,BPDFN,BPDOSDT,BPOVRIEN,BPQ,BPRXIEN,BPRXR,BPSTATUS,BPUPDFLG
"RTN","BPSRES",36,0)
 N BPCOB,BPSURE,BPPTRES,BPPHSRV,BPDLYRS,COBDATA,BPPRIOPN,BPSPCLS
"RTN","BPSRES",37,0)
 S (BPQ)=""
"RTN","BPSRES",38,0)
 S (BPCLTOT,BPUPDFLG)=0
"RTN","BPSRES",39,0)
 ;
"RTN","BPSRES",40,0)
 ;Pull BPS TRANSACTION/BPS CLAIMS entries
"RTN","BPSRES",41,0)
 S BP59=$P(BPRXI,U,4) I BP59="" W !!,"No Initial Claim Submission Found - Data Elements are NOT Editable for Re-Submission",! G XRES
"RTN","BPSRES",42,0)
 ;
"RTN","BPSRES",43,0)
 ; check for non-billable entry
"RTN","BPSRES",44,0)
 I $$NB^BPSSCR03(BP59) W !!,"Entry is NON BILLABLE.  There is no claim to edit or resubmit.",! G XRES
"RTN","BPSRES",45,0)
 ;
"RTN","BPSRES",46,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4) I 'BP02 W !!,"No Initial Claim Submission Found - Data Elements are NOT Editable for Re-Submission",! G XRES
"RTN","BPSRES",47,0)
 ;
"RTN","BPSRES",48,0)
 ;Write Form Feed
"RTN","BPSRES",49,0)
 W @IOF
"RTN","BPSRES",50,0)
 ;
"RTN","BPSRES",51,0)
 ;Display selected claim and ask to submit
"RTN","BPSRES",52,0)
 S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSRES",53,0)
 W !,"You've chosen to RESUBMIT the following prescription for "_$E($$PATNAME^BPSSCRU2(BPDFN),1,13)
"RTN","BPSRES",54,0)
 W !,@VALMAR@(+$P(BPRXI,U,5),0)
"RTN","BPSRES",55,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSRES",56,0)
 I BPQ'=1 S BPQ="^" G XRES
"RTN","BPSRES",57,0)
 ;
"RTN","BPSRES",58,0)
 ;Check to make sure claim can be Resubmitted w/EDITS
"RTN","BPSRES",59,0)
 S BPRXIEN=$P(BP59,".")
"RTN","BPSRES",60,0)
 S BPRXR=+$E($P(BP59,".",2),1,4)
"RTN","BPSRES",61,0)
 I $$RXDEL^BPSOS($P(BP59,".",1),+$E($P(BP59,".",2),1,4)) W !!,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"cannot be Resubmitted w/EDITS because it has been deleted in Pharmacy.",! G XRES
"RTN","BPSRES",62,0)
 S BPSTATUS=$P($$CLAIMST^BPSSCRU3(BP59),U)
"RTN","BPSRES",63,0)
 I BPSTATUS["IN PROGRESS" W !!,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"is still In Progress and cannot be Resubmitted w/EDITS",! G XRES
"RTN","BPSRES",64,0)
 I BPSTATUS'["E REJECTED" W !!,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"is NOT Rejected and cannot be Resubmitted w/EDITS",! G XRES
"RTN","BPSRES",65,0)
 I $P($G(^BPST(BP59,0)),U,14)<2,$$PAYABLE^BPSOSRX5(BPSTATUS),$$PAYBLSEC^BPSUTIL2(BP59) D  G XRES
"RTN","BPSRES",66,0)
 . W !,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"cannot be Resubmitted if the secondary claim is payable.",!,"Please reverse the secondary claim first."
"RTN","BPSRES",67,0)
 ;
"RTN","BPSRES",68,0)
 ;Can't resubmit a closed claim. The user must reopen first.
"RTN","BPSRES",69,0)
 I $$CLOSED^BPSSCRU1(BP59) W !!,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"is Closed and cannot be Resubmitted w/EDITS.",! G XRES
"RTN","BPSRES",70,0)
 ;
"RTN","BPSRES",71,0)
 S BPCOB=$$COB59^BPSUTIL2(BP59)
"RTN","BPSRES",72,0)
 ;If this is a secondary, make sure Primary is either Payable or Closed.
"RTN","BPSRES",73,0)
 S BPPRIOPN=0 I BPCOB=2 D  G XRES:BPPRIOPN=1
"RTN","BPSRES",74,0)
 . ;Get Primary claim status
"RTN","BPSRES",75,0)
 . S BPSPCLS=$$FINDECLM^BPSPRRX5(BPRXIEN,BPRXR,1)
"RTN","BPSRES",76,0)
 . I $P(BPSPCLS,U)>1 D
"RTN","BPSRES",77,0)
 .. Q:$$CLOSED^BPSSCRU1($P(BPSPCLS,U,2))
"RTN","BPSRES",78,0)
 .. W !,"The secondary claim cannot be Resubmitted unless the primary is either payable",!,"or closed. Please resubmit or close the primary claim first."
"RTN","BPSRES",79,0)
 .. S BPPRIOPN=1
"RTN","BPSRES",80,0)
 ;Retrieve DOS
"RTN","BPSRES",81,0)
 S BPDOSDT=$$DOSDATE^BPSSCRRS(BPRXIEN,BPRXR)
"RTN","BPSRES",82,0)
 ;
"RTN","BPSRES",83,0)
 ;Prompt for EDIT Information
"RTN","BPSRES",84,0)
 S BPOVRIEN=$$PROMPTS(BP59,BP02,BPRXIEN,BPRXR,BPCOB,.BPDOSDT,.COBDATA) I BPOVRIEN=-1 G XRES
"RTN","BPSRES",85,0)
 ;
"RTN","BPSRES",86,0)
 ; Submit the claim
"RTN","BPSRES",87,0)
 S BPBILL=$$EN^BPSNCPDP(BPRXIEN,BPRXR,BPDOSDT,"ERES","","ECME RESUBMIT","",BPOVRIEN,"","",BPCOB,"F","","",$G(COBDATA("PLAN")),.COBDATA,$G(COBDATA("RTYPE")))
"RTN","BPSRES",88,0)
 ;
"RTN","BPSRES",89,0)
 ;Print Return Value Message
"RTN","BPSRES",90,0)
 W !!
"RTN","BPSRES",91,0)
 W:+BPBILL>0 $S(+BPBILL=10:"Reversal but no Resubmit:",1:"Not Processed:"),!,"  "
"RTN","BPSRES",92,0)
 ;
"RTN","BPSRES",93,0)
 ;Change Return Message for SC/EI
"RTN","BPSRES",94,0)
 S:$P(BPBILL,U,2)="NEEDS SC DETERMINATION" $P(BPBILL,U,2)="NEEDS SC/EI DETERMINATION"
"RTN","BPSRES",95,0)
 W $P(BPBILL,U,2)
"RTN","BPSRES",96,0)
 ;
"RTN","BPSRES",97,0)
 ;0 Prescription/Fill successfully submitted to ECME
"RTN","BPSRES",98,0)
 ;1 ECME did not submit prescription/fill
"RTN","BPSRES",99,0)
 ;2 IB says prescription/fill is not ECME billable or the data returned from IB is not valid
"RTN","BPSRES",100,0)
 ;3 ECME closed the claim but did not submit it to the payer
"RTN","BPSRES",101,0)
 ;4 Unable to queue the ECME claim
"RTN","BPSRES",102,0)
 ;5 Invalid input
"RTN","BPSRES",103,0)
 ;10 Reversal Processed But Claim Was Not Resubmitted
"RTN","BPSRES",104,0)
 ;
"RTN","BPSRES",105,0)
 I +BPBILL=0 D
"RTN","BPSRES",106,0)
 . D ECMEACT^PSOBPSU1(+BPRXIEN,+BPRXR,"Claim resubmitted to 3rd party payer: ECME USER's SCREEN-"_$S(BPCOB=1:"p",BPCOB=2:"s",1:"")_$$INSNAME^BPSSCRU6(BP59))
"RTN","BPSRES",107,0)
 . S BPUPDFLG=1,BPCLTOT=1
"RTN","BPSRES",108,0)
XRES I BPCLTOT W !,BPCLTOT," claim",$S(BPCLTOT'=1:"s have",1:" has")," been resubmitted.",!
"RTN","BPSRES",109,0)
 D PAUSE^VALM1
"RTN","BPSRES",110,0)
 Q BPUPDFLG
"RTN","BPSRES",111,0)
 ;
"RTN","BPSRES",112,0)
XRES2 I BPCLTOT W !,BPCLTOT," claim",$S(BPCLTOT'=1:"s have",1:" has")," been resubmitted.",!
"RTN","BPSRES",113,0)
 Q BPUPDFLG
"RTN","BPSRES",114,0)
 ;Enter EDIT information for claim
"RTN","BPSRES",115,0)
 ;
"RTN","BPSRES",116,0)
 ;  Input Values -> BP59 - The BPS TRANSACTION entry
"RTN","BPSRES",117,0)
 ;                  BP02 - The BPS CLAIMS entry
"RTN","BPSRES",118,0)
 ;                  BPRXIEN - Prescription IEN (#52)
"RTN","BPSRES",119,0)
 ;                  BPRXR - Fill Number
"RTN","BPSRES",120,0)
 ;                  BPCOB - (optional) payer sequence (1-primary, 2 -secondary)
"RTN","BPSRES",121,0)
 ;                  BPDOSDT - Date of Service, passed by reference 
"RTN","BPSRES",122,0)
 ;                  BPSECOND - Array, passed by reference, of COB data
"RTN","BPSRES",123,0)
 ;  Output Value -> BPQ  - -1 - The user chose to quit
"RTN","BPSRES",124,0)
 ;                         "" - The user completed the EDITS
"RTN","BPSRES",125,0)
PROMPTS(BP59,BP02,BPRXIEN,BPRXR,BPCOB,BPSDOSDT,BPSECOND) ;
"RTN","BPSRES",126,0)
 N %,BP300,BP35401,BPCLCD1,BPCLCD2,BPCLCD3,BPFDA,BPFLD,BPOVRIEN,BPMED,BPMSG,BPPSNCD
"RTN","BPSRES",127,0)
 N BPPREAUT,BPPRETYP,BPQ,BPRELCD,DIC,DIR,DIROUT,DTOUT,DUOUT,X,Y,DIRUT,DUP
"RTN","BPSRES",128,0)
 ;
"RTN","BPSRES",129,0)
 S BPQ=""
"RTN","BPSRES",130,0)
 I +$G(BPCOB)=0 S BPCOB=1
"RTN","BPSRES",131,0)
 ;Pull Information from Claim
"RTN","BPSRES",132,0)
 S BP300=$G(^BPSC(BP02,300))
"RTN","BPSRES",133,0)
 S BPRELCD=$TR($E($P(BP300,U,6),3,99)," ")
"RTN","BPSRES",134,0)
 S BPPSNCD=$TR($E($P(BP300,U,3),3,99)," ")
"RTN","BPSRES",135,0)
 S (BPPRETYP,BPPREAUT,BPDLYRS,BPPHSRV)=""
"RTN","BPSRES",136,0)
 S BPMED=0 F  S BPMED=$O(^BPSC(BP02,400,BPMED)) Q:'BPMED  D  I BPPREAUT]"" Q
"RTN","BPSRES",137,0)
 . N BP460 S BP460=$G(^BPSC(BP02,400,BPMED,460))
"RTN","BPSRES",138,0)
 . S:BPPREAUT="" BPPREAUT=$TR($E($P(BP460,U,2),3,99)," "),BPPRETYP=$TR($E($P(BP460,U),3,99)," ")
"RTN","BPSRES",139,0)
 . S:BPDLYRS="" BPDLYRS=$TR($E($P($G(^BPSC(BP02,400,BPMED,350)),U,7),3,99)," ") I BPDLYRS]"" S BPDLYRS=+BPDLYRS
"RTN","BPSRES",140,0)
 . S:BPPHSRV="" BPPHSRV=$TR($E($P($G(^BPSC(BP02,400,BPMED,140)),U,7),3,99)," ")
"RTN","BPSRES",141,0)
 . F BP35401=1:1:3 S @("BPCLCD"_BP35401)=$TR($E($P($G(^BPSC(BP02,400,BPMED,354.01,BP35401,1)),U),3,99)," ")
"RTN","BPSRES",142,0)
 . S BPCLCD1=+BPCLCD1 I BPCLCD1=0 S BPCLCD1=1
"RTN","BPSRES",143,0)
 S BPPTRES=$TR($E($P($G(^BPSC(BP02,380)),U,4),3,99)," ") I BPPTRES="" S BPPTRES=1
"RTN","BPSRES",144,0)
 S:BPPHSRV="" BPPHSRV=1
"RTN","BPSRES",145,0)
 ;
"RTN","BPSRES",146,0)
 ;Relationship Code
"RTN","BPSRES",147,0)
 N X,DIC,Y
"RTN","BPSRES",148,0)
 S DIC("B")=BPRELCD
"RTN","BPSRES",149,0)
 S DIC(0)="QEAM",DIC=9002313.19,DIC("A")="Pharmacy Relationship Code: "
"RTN","BPSRES",150,0)
 D ^DIC
"RTN","BPSRES",151,0)
 ;Check for "^" or timeout
"RTN","BPSRES",152,0)
 I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",153,0)
 S BPRELCD=$P(Y,U,2)
"RTN","BPSRES",154,0)
 K X,DIC,Y
"RTN","BPSRES",155,0)
 ;
"RTN","BPSRES",156,0)
 ;Person Code
"RTN","BPSRES",157,0)
 K DIR("?") S DIR(0)="FO^1:3",DIR("A")="Pharmacy Person Code",DIR("?")="Enter the Specific Person Code Assigned to the Patient by the Payer"
"RTN","BPSRES",158,0)
 S DIR("B")=BPPSNCD
"RTN","BPSRES",159,0)
 D ^DIR
"RTN","BPSRES",160,0)
 I $D(DTOUT)!$D(DUOUT) S BPQ=-1 G XPROMPTS
"RTN","BPSRES",161,0)
 S BPPSNCD=Y
"RTN","BPSRES",162,0)
 ;
"RTN","BPSRES",163,0)
 ;Pre-Authorization
"RTN","BPSRES",164,0)
 K DIR("?") S DIR(0)="FO^1:11",DIR("A")="Prior Authorization Number",DIR("?")="Enter the Number Submitted by the Provider to Identify the Prior Authorization"
"RTN","BPSRES",165,0)
 S DIR("B")=BPPREAUT
"RTN","BPSRES",166,0)
 D ^DIR
"RTN","BPSRES",167,0)
 I $D(DTOUT)!$D(DUOUT) S BPQ=-1 G XPROMPTS
"RTN","BPSRES",168,0)
 S BPPREAUT=Y
"RTN","BPSRES",169,0)
 ;
"RTN","BPSRES",170,0)
 ;Prior-Authorization Type Code
"RTN","BPSRES",171,0)
 N X,DIC,Y
"RTN","BPSRES",172,0)
 S DIC("B")=+BPPRETYP
"RTN","BPSRES",173,0)
 S DIC(0)="QEAM",DIC=9002313.26,DIC("A")="Prior Authorization Type Code: "
"RTN","BPSRES",174,0)
 D ^DIC
"RTN","BPSRES",175,0)
 ;Check for "^" or timeout
"RTN","BPSRES",176,0)
 I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",177,0)
 S BPPRETYP=$P(Y,U,2)
"RTN","BPSRES",178,0)
 K X,DIC,Y
"RTN","BPSRES",179,0)
 ;
"RTN","BPSRES",180,0)
 ;Submission Clarification Code 1
"RTN","BPSRES",181,0)
 S DIC("B")=BPCLCD1
"RTN","BPSRES",182,0)
 S DIC(0)="QEAM",DIC=9002313.25,DIC("A")="Submission Clarification Code 1: "
"RTN","BPSRES",183,0)
 D ^DIC
"RTN","BPSRES",184,0)
 ;Check for "^" or timeout
"RTN","BPSRES",185,0)
 I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",186,0)
 S BPCLCD1=$P(Y,U,2)
"RTN","BPSRES",187,0)
 K X,DIC,Y
"RTN","BPSRES",188,0)
 ;
"RTN","BPSRES",189,0)
 ;Submission Clarification Code 2
"RTN","BPSRES",190,0)
 I +BPCLCD2 S BPCLCD2=+BPCLCD2 S DIC("B")=BPCLCD2
"RTN","BPSRES",191,0)
 S DIC(0)="QEAM",DIC=9002313.25,DIC("A")="Submission Clarification Code 2: ",DUP=0
"RTN","BPSRES",192,0)
 F  D  Q:BPQ=-1  Q:'DUP
"RTN","BPSRES",193,0)
 . D ^DIC
"RTN","BPSRES",194,0)
 . ;Check for "^" or timeout
"RTN","BPSRES",195,0)
 . I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y Q
"RTN","BPSRES",196,0)
 . S BPCLCD2=$P(Y,U,2)
"RTN","BPSRES",197,0)
 . S DUP=0 I BPCLCD2=BPCLCD1 S BPCLCD2="" W !,"  Duplicates not allowed" S DUP=1
"RTN","BPSRES",198,0)
 K X,DIC,Y
"RTN","BPSRES",199,0)
 I BPQ=-1 G XPROMPTS
"RTN","BPSRES",200,0)
 ;
"RTN","BPSRES",201,0)
 ;Submission Clarification Code 3
"RTN","BPSRES",202,0)
 I BPCLCD2'="" D  I BPQ=-1 G XPROMPTS
"RTN","BPSRES",203,0)
 . I +BPCLCD3 S BPCLCD3=+BPCLCD3 S DIC("B")=BPCLCD3
"RTN","BPSRES",204,0)
 . S DIC(0)="QEAM",DIC=9002313.25,DIC("A")="Submission Clarification Code 3: ",DUP=0
"RTN","BPSRES",205,0)
 . F  D  Q:'DUP  I BPQ=-1 Q
"RTN","BPSRES",206,0)
 .. D ^DIC
"RTN","BPSRES",207,0)
 .. ;Check for "^" or timeout
"RTN","BPSRES",208,0)
 .. I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y Q
"RTN","BPSRES",209,0)
 .. S BPCLCD3=$P(Y,U,2)
"RTN","BPSRES",210,0)
 .. S DUP=0 I BPCLCD3=BPCLCD1!(BPCLCD3=BPCLCD2) S BPCLCD3="" W !,"  Duplicates not allowed" S DUP=1
"RTN","BPSRES",211,0)
 . K X,DIC,Y
"RTN","BPSRES",212,0)
 ;
"RTN","BPSRES",213,0)
 I $$RELDATE^BPSBCKJ(+BPRXIEN,+BPRXR)]"" S BPDOSDT=$$EDITDT(1,BPRXIEN,BPRXR,BP02) I BPDOSDT="^" S BPQ=-1 G XPROMPTS
"RTN","BPSRES",214,0)
 ;
"RTN","BPSRES",215,0)
 ;Patient Residence Code
"RTN","BPSRES",216,0)
 N X,DIC,Y
"RTN","BPSRES",217,0)
 S DIC("B")=+BPPTRES
"RTN","BPSRES",218,0)
 S DIC(0)="QEAM",DIC=9002313.27,DIC("A")="Patient Residence Code: "
"RTN","BPSRES",219,0)
 D ^DIC
"RTN","BPSRES",220,0)
 ;Check for "^" or timeout
"RTN","BPSRES",221,0)
 I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",222,0)
 S BPPTRES=$P(Y,U,2)
"RTN","BPSRES",223,0)
 K X,DIC,Y
"RTN","BPSRES",224,0)
 ;
"RTN","BPSRES",225,0)
 ;Pharmacy Service Type Code
"RTN","BPSRES",226,0)
 N X,DIC,Y
"RTN","BPSRES",227,0)
 S DIC("B")=+BPPHSRV
"RTN","BPSRES",228,0)
 S DIC(0)="QEAM",DIC=9002313.28,DIC("A")="Pharmacy Service Type Code: "
"RTN","BPSRES",229,0)
 D ^DIC
"RTN","BPSRES",230,0)
 ;Check for "^" or timeout
"RTN","BPSRES",231,0)
 I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",232,0)
 S BPPHSRV=$P(Y,U,2)
"RTN","BPSRES",233,0)
 K X,DIC,Y
"RTN","BPSRES",234,0)
 ;
"RTN","BPSRES",235,0)
 ;Delay Reason Code
"RTN","BPSRES",236,0)
 N X,DIC,Y
"RTN","BPSRES",237,0)
 S DIC("B")=BPDLYRS
"RTN","BPSRES",238,0)
 S DIC(0)="QEAM",DIC=9002313.29,DIC("A")="Delay Reason Code: "
"RTN","BPSRES",239,0)
 D ^DIC
"RTN","BPSRES",240,0)
 ;Check for "^" or timeout
"RTN","BPSRES",241,0)
 I ($D(DUOUT))!($D(DTOUT)) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",242,0)
 S BPDLYRS=$P(Y,U,2)
"RTN","BPSRES",243,0)
 K X,DIC,Y
"RTN","BPSRES",244,0)
 ;
"RTN","BPSRES",245,0)
 ; If secondary claim, setup secondary data and allow user to edit
"RTN","BPSRES",246,0)
 ; Get data from the primary claim, if it exists
"RTN","BPSRES",247,0)
 I BPCOB=2 D  I BPQ=-1 G XPROMPTS
"RTN","BPSRES",248,0)
 . N BPSPL59,BPRTTP59
"RTN","BPSRES",249,0)
 . S BPRET=$$PRIMDATA^BPSPRRX6(BPRXIEN,BPRXR,.BPSECOND)
"RTN","BPSRES",250,0)
 . ; If the primary claim data is missing, get data from the most recent secondary claim
"RTN","BPSRES",251,0)
 . I 'BPRET,$$SECDATA^BPSPRRX6(BPRXIEN,BPRXR,.BPSPL59,.BPSECOND,.BPRTTP59)
"RTN","BPSRES",252,0)
 . ; The PRIMARY BILL element is set by $$SECDATA.  If SECDATA is not called, this element will be 
"RTN","BPSRES",253,0)
 . ;   missing and we will need to create it
"RTN","BPSRES",254,0)
 . I '$D(BPSECOND("PRIMARY BILL")) D
"RTN","BPSRES",255,0)
 .. N BPBILL
"RTN","BPSRES",256,0)
 .. S BPBILL=$$PAYBLPRI^BPSUTIL2(BP59)
"RTN","BPSRES",257,0)
 .. I BPBILL>0 S BPSECOND("PRIMARY BILL")=BPBILL
"RTN","BPSRES",258,0)
 . ; Set flag telling BPSNCPDP not to recompile the data from the BPS Transaction and the secondary claim
"RTN","BPSRES",259,0)
 . S BPSECOND("NEW COB DATA")=1
"RTN","BPSRES",260,0)
 . ; $$PROMPTS displays the data and allows the user edit the data.
"RTN","BPSRES",261,0)
 . S BPQ=$$PROMPTS^BPSPRRX3(BPRXIEN,BPRXR,BPDOSDT,.BPSECOND)
"RTN","BPSRES",262,0)
 ;
"RTN","BPSRES",263,0)
 ;Ask to proceed
"RTN","BPSRES",264,0)
 W ! S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)") I BPQ'=1 S BPQ=-1 G XPROMPTS
"RTN","BPSRES",265,0)
 S BPQ=1
"RTN","BPSRES",266,0)
 ;
"RTN","BPSRES",267,0)
 ;Save into BPS NCPDP OVERRIDES (#9002313.511)
"RTN","BPSRES",268,0)
 S BPFDA(9002313.511,"+1,",.01)=BP59
"RTN","BPSRES",269,0)
 D NOW^%DTC
"RTN","BPSRES",270,0)
 S BPFDA(9002313.511,"+1,",.02)=%
"RTN","BPSRES",271,0)
 S BPFLD=$O(^BPSF(9002313.91,"B",303,"")) I BPFLD]"" S BPFDA(9002313.5111,"+2,+1,",.01)=BPFLD,BPFDA(9002313.5111,"+2,+1,",.02)=BPPSNCD
"RTN","BPSRES",272,0)
 S BPFLD=$O(^BPSF(9002313.91,"B",306,"")) I BPFLD]"" S BPFDA(9002313.5111,"+3,+1,",.01)=BPFLD,BPFDA(9002313.5111,"+3,+1,",.02)=BPRELCD
"RTN","BPSRES",273,0)
 S BPFLD=$O(^BPSF(9002313.91,"B",462,"")) I BPFLD]"" S BPFDA(9002313.5111,"+4,+1,",.01)=BPFLD,BPFDA(9002313.5111,"+4,+1,",.02)=BPPREAUT
"RTN","BPSRES",274,0)
 S BPFLD=$O(^BPSF(9002313.91,"B",461,"")) I BPFLD]"" S BPFDA(9002313.5111,"+5,+1,",.01)=BPFLD,BPFDA(9002313.5111,"+5,+1,",.02)=BPPRETYP
"RTN","BPSRES",275,0)
 S BPFLD=$O(^BPSF(9002313.91,"B",420,"")) I BPFLD]"" S BPFDA(9002313.5111,"+6,+1,",.01)=BPFLD,BPFDA(9002313.5111,"+6,+1,",.02)=BPCLCD1_"~"_$G(BPCLCD2)_"~"_$G(BPCLCD3)
"RTN","BPSRES",276,0)
 S BPFLD=$O(^BPSF(9002313.91,"B",384,"")) I BPFLD]"" S BPFDA(9002313.5111,"+7,+1,",.01)=BPFLD,BPFDA(9002313.5111,"+7,+1,",.02)=BPPTRES
"RTN","BPSRES",277,0)
 S BPFLD=$O(^BPSF(9002313.91,"B",147,"")) I BPFLD]"" S BPFDA(9002313.5111,"+8,+1,",.01)=BPFLD,BPFDA(9002313.5111,"+8,+1,",.02)=BPPHSRV
"RTN","BPSRES",278,0)
 S BPFLD=$O(^BPSF(9002313.91,"B",357,"")) I BPFLD]"" S BPFDA(9002313.5111,"+9,+1,",.01)=BPFLD,BPFDA(9002313.5111,"+9,+1,",.02)=BPDLYRS
"RTN","BPSRES",279,0)
 D UPDATE^DIE("","BPFDA","BPOVRIEN","BPMSG")
"RTN","BPSRES",280,0)
 ;
"RTN","BPSRES",281,0)
 I $D(BPMSG("DIERR")) W !!,"Could Not Save Override information into BPS NCPDP OVERRIDES FILES",! S BPQ=-1 G XPROMPTS
"RTN","BPSRES",282,0)
 ;
"RTN","BPSRES",283,0)
XPROMPTS ;
"RTN","BPSRES",284,0)
 S BPOVRIEN=$S(BPQ=-1:BPQ,$G(BPOVRIEN(1))]"":BPOVRIEN(1),1:-1)
"RTN","BPSRES",285,0)
 Q BPOVRIEN
"RTN","BPSRES",286,0)
 ;
"RTN","BPSRES",287,0)
 ;Prompt User for Claim to Resubmit (w/EDITS)
"RTN","BPSRES",288,0)
 ;
"RTN","BPSRES",289,0)
 ; Input values ->  BPROMPT - prompt string
"RTN","BPSRES",290,0)
 ;                 BPERRMES - the message to display when the user tries
"RTN","BPSRES",291,0)
 ;                           to make multi line selection (optional)
"RTN","BPSRES",292,0)
 ;                  Piece
"RTN","BPSRES",293,0)
 ;output values ->      1 - 1 = okay, <0 = errors, 0 = quit
"RTN","BPSRES",294,0)
 ;                      2 - patient ien #2
"RTN","BPSRES",295,0)
 ;                      3 - insurance ien #36
"RTN","BPSRES",296,0)
 ;                      4 - ptr to #9002313.59
"RTN","BPSRES",297,0)
 ;                      5 - 1st line for index(es) in LM "VALM" array
"RTN","BPSRES",298,0)
 ;                      6 - patient's index
"RTN","BPSRES",299,0)
 ;                      7 - claim's index
"RTN","BPSRES",300,0)
ASKLINE(BPROMPT,BPERRMES) ;
"RTN","BPSRES",301,0)
 N BPRET,BPCNT
"RTN","BPSRES",302,0)
 S BPRET="",BPCNT=0
"RTN","BPSRES",303,0)
 F  S BPRET=$$SELLINE^BPSSCRU4(BPROMPT,"C",VALMAR,"") Q:BPRET'<0  D
"RTN","BPSRES",304,0)
 . ;
"RTN","BPSRES",305,0)
 . I BPCNT<1 S BPCNT=BPCNT+1 W !
"RTN","BPSRES",306,0)
 . E  S BPCNT=0 D RE^VALM4
"RTN","BPSRES",307,0)
 . I BPRET=-1 W "Invalid line number" ; (invalid Patient summary line)"
"RTN","BPSRES",308,0)
 . I BPRET=-8 W $S($G(BPERRMES)]"":BPERRMES,1:" Invalid line number")
"RTN","BPSRES",309,0)
 . I BPRET=-4 W "Invalid line number" ; (invalid RX line)"
"RTN","BPSRES",310,0)
 . I BPRET=-2 W "Please select Patient's summary line."
"RTN","BPSRES",311,0)
 . I BPRET=-3 W "Please specify RX line."
"RTN","BPSRES",312,0)
 . I ",-1,-8,-4,-2,-3,"'[(","_BPRET_",") W "Incorrect format." ; Corrupted array (",BPRET,")"
"RTN","BPSRES",313,0)
 Q BPRET
"RTN","BPSRES",314,0)
 ;
"RTN","BPSRES",315,0)
EDITDT(DFLT,BPRXIEN,BPRXR,BP02) ;Prompt User to choose correct Date of Service
"RTN","BPSRES",316,0)
 ;
"RTN","BPSRES",317,0)
 ; Input value ->  DFLT - The data to use as the default value. If no default
"RTN","BPSRES",318,0)
 ;                        is provided, Current Date of Service will be used.
"RTN","BPSRES",319,0)
 ;
"RTN","BPSRES",320,0)
 ;                        1 - Current Date of Service
"RTN","BPSRES",321,0)
 ;                        2 - Fill Date
"RTN","BPSRES",322,0)
 ;                        3 - Release Date
"RTN","BPSRES",323,0)
 ;
"RTN","BPSRES",324,0)
 ;              BPRXIEN - Pointer to the PRESCRIPTION file (#52)
"RTN","BPSRES",325,0)
 ;                BPRXR - Refill number for prescription
"RTN","BPSRES",326,0)
 ;                 BP02 - Pointer to the BPS CLAIMS file (#9002313.02)
"RTN","BPSRES",327,0)
 ;
"RTN","BPSRES",328,0)
 ; Output value -> Selected Date of Service in FileMan format
"RTN","BPSRES",329,0)
 ;
"RTN","BPSRES",330,0)
 ; Reference to $$RXRLDT^PSOBPSUT supported by DBIA 4701
"RTN","BPSRES",331,0)
 ; Reference to $$RXFLDT^PSOBPSUT supported by DBIA 4701
"RTN","BPSRES",332,0)
 ;
"RTN","BPSRES",333,0)
 N BPRLS,BPFIL,BPCUR,DIR,DIRUT,DIROUT,DTOUT,DUOUT,OPT,TMP,X,Y
"RTN","BPSRES",334,0)
 S BPRLS=$$RXRLDT^PSOBPSUT(BPRXIEN,BPRXR)\1 ;release date
"RTN","BPSRES",335,0)
 S BPFIL=$$RXFLDT^PSOBPSUT(BPRXIEN,BPRXR)\1 ;fill date
"RTN","BPSRES",336,0)
 S BPCUR=$$HL7TFM^XLFDT($$GET1^DIQ(9002313.02,BP02,401)) ;current date of service
"RTN","BPSRES",337,0)
 S DFLT=$G(DFLT),DIR("B")=1,DIR("A")="Date of Service"
"RTN","BPSRES",338,0)
 I DFLT=2,BPFIL]"" S DIR("B")=2
"RTN","BPSRES",339,0)
 I DFLT=3,BPRLS]"" S DIR("B")=3
"RTN","BPSRES",340,0)
 S OPT=1,DIR(0)="S^"_OPT_":"_$$FMTE^XLFDT(BPCUR,"5D")_" Current Date of Service",TMP(OPT)=BPCUR
"RTN","BPSRES",341,0)
 I BPFIL'>DT,BPFIL<BPRLS S OPT=OPT+1,DIR(0)=DIR(0)_";"_OPT_":"_$$FMTE^XLFDT(BPFIL,"5D")_" Fill Date",TMP(OPT)=BPFIL
"RTN","BPSRES",342,0)
 I BPRLS'>DT S OPT=OPT+1,DIR(0)=DIR(0)_";"_OPT_":"_$$FMTE^XLFDT(BPRLS,"5D")_" Release Date",TMP(OPT)=BPRLS
"RTN","BPSRES",343,0)
 D ^DIR
"RTN","BPSRES",344,0)
 I $D(DIRUT) S Y="^" Q Y
"RTN","BPSRES",345,0)
 Q TMP(Y)
"RTN","BPSRPT0")
0^52^B27167649
"RTN","BPSRPT0",1,0)
BPSRPT0 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT0",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,10,11,19,20**;JUN 2004;Build 27
"RTN","BPSRPT0",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT0",4,0)
 ;
"RTN","BPSRPT0",5,0)
 Q
"RTN","BPSRPT0",6,0)
 ;
"RTN","BPSRPT0",7,0)
 ; Front End for ECME Reports
"RTN","BPSRPT0",8,0)
 ; 
"RTN","BPSRPT0",9,0)
 ; Input variable: BPRTYPE -> 1 = Payable Claims
"RTN","BPSRPT0",10,0)
 ;                          2 = Rejected Claims
"RTN","BPSRPT0",11,0)
 ;                          3 = Claims Submitted, Not Yet Released
"RTN","BPSRPT0",12,0)
 ;                          4 = Reversed Claims
"RTN","BPSRPT0",13,0)
 ;                          5 = Recent Transactions
"RTN","BPSRPT0",14,0)
 ;                          6 = Totals By Date
"RTN","BPSRPT0",15,0)
 ;                          7 = Closed Claims
"RTN","BPSRPT0",16,0)
 ;                          8 = Spending Account Report
"RTN","BPSRPT0",17,0)
 ;                          9 = ECME RXs with Non-Billable Status
"RTN","BPSRPT0",18,0)
 ;                          
"RTN","BPSRPT0",19,0)
 ; Passed variables - The following local variables are passed around the BPSRPT* routines
"RTN","BPSRPT0",20,0)
 ;                    and are not passed as parameters but are assumed to be defined:
"RTN","BPSRPT0",21,0)
 ;                    BPACREJ,BPAUTREV,BPBEGDT,BPBLINE,BPCCRSN,BPDRGCL,BPDRUG,BPENDDT,BPEXCEL,
"RTN","BPSRPT0",22,0)
 ;                    BPINSINF,BPGRPLN,BPMWC,BPNOW,BPPAGE,BPPHARM,BPQ,BPQSTDRG,
"RTN","BPSRPT0",23,0)
 ;                    BPRLNRL,BPRTBCK,BPSDATA,BPSUMDET,BPRTYPE,BPNBSTS,BPALRC,BPELIG1
"RTN","BPSRPT0",24,0)
 ;                          
"RTN","BPSRPT0",25,0)
EN(BPRTYPE) N %,BPACREJ,BPAUTREV,BPBEGDT,BPCCRSN,BPDRGCL,BPDRUG,BPENDDT,BPEXCEL,BPNOW,BPPHARM,BPINSINF,BPMWC,BPQ,BPQSTDRG
"RTN","BPSRPT0",26,0)
 N BPREJCD,BPRLNRL,BPRPTNAM,BPRTBCK,BPSCR,BPSUMDET,CODE,POS,STAT,X,Y,BPINS,BPARR,BPELIG,BPOPCL
"RTN","BPSRPT0",27,0)
 N BPNBSTS,BPALRC,BPELIG1
"RTN","BPSRPT0",28,0)
 ;
"RTN","BPSRPT0",29,0)
 ;Verify that a valid report has been requested
"RTN","BPSRPT0",30,0)
 I ",1,2,3,4,5,6,7,8,9,"'[(","_$G(BPRTYPE)_",") W "<Invalid Menu Definition - Report Undefined>" H 3 Q
"RTN","BPSRPT0",31,0)
 S BPRPTNAM=$P("PAYABLE CLAIMS^REJECTED CLAIMS^SUBMIT,NOT RELEASED CLAIMS^REVERSED CLAIMS^RECENT TRANSACTIONS^TOTALS^CLOSED CLAIMS^SPENDING ACCOUNT REPORT^RXS WITH NON-BILLABLE STATUS","^",BPRTYPE)
"RTN","BPSRPT0",32,0)
 ;
"RTN","BPSRPT0",33,0)
 ;Get current Date/Time
"RTN","BPSRPT0",34,0)
 D NOW^%DTC S Y=% D DD^%DT S BPNOW=Y
"RTN","BPSRPT0",35,0)
 ;
"RTN","BPSRPT0",36,0)
 ;Prompt for ECME Pharmacy Division(s) (No Default)
"RTN","BPSRPT0",37,0)
 ;Sets up BPPHARM variable and array, BPPHARM =0 ALL or BPPHARM=1,BPPHARM(ptr) for list
"RTN","BPSRPT0",38,0)
 S X=$$SELPHARM^BPSRPT3() I X="^" G EXIT
"RTN","BPSRPT0",39,0)
 ;
"RTN","BPSRPT0",40,0)
 ;Prompt to Display Summary or Detail Format (Default to Detail)
"RTN","BPSRPT0",41,0)
 ;Returns 1 for Summary, 0 for Detail
"RTN","BPSRPT0",42,0)
 S BPSUMDET=$$SELSMDET^BPSRPT3(2) I BPSUMDET="^" G EXIT
"RTN","BPSRPT0",43,0)
 ;
"RTN","BPSRPT0",44,0)
 ;Prompt to allow selection of Multiple Insurances or All (Default to ALL)
"RTN","BPSRPT0",45,0)
 ;See description for $$INSURSEL^BPSSCRCU
"RTN","BPSRPT0",46,0)
 S BPINS=$$INSURSEL^BPSSCRCU(.BPARR,DUZ) I BPINS<1 G EXIT
"RTN","BPSRPT0",47,0)
 S BPINSINF=$S(BPARR(1.11)="I":BPARR("INS"),1:0)
"RTN","BPSRPT0",48,0)
 ;
"RTN","BPSRPT0",49,0)
 ;Prompt to Display (C)MOP or (M)ail or (W)indow or (A)LL (Default to ALL)
"RTN","BPSRPT0",50,0)
 ;Returns (A-ALL,M-Mail,W-Window,C-CMOP)
"RTN","BPSRPT0",51,0)
 S BPMWC=$$SELMWC^BPSRPT3("A") I BPMWC="^" G EXIT
"RTN","BPSRPT0",52,0)
 ;
"RTN","BPSRPT0",53,0)
 ;Prompt to Display (R)ealTime Fills or (B)ackbills or (P)RO Option or Re(S)ubmission or (A)LL (Default to ALL)
"RTN","BPSRPT0",54,0)
 ;Returns (1-ALL,2-RealTime Fills,3-Backbills,4-PRO Option,5-Resubmission)
"RTN","BPSRPT0",55,0)
 S BPRTBCK=1
"RTN","BPSRPT0",56,0)
 I BPRTYPE'=9 S BPRTBCK=$$SELRTBCK^BPSRPT3(1) I BPRTBCK="^" G EXIT
"RTN","BPSRPT0",57,0)
 ;
"RTN","BPSRPT0",58,0)
 ;Prompt to Display Specific (D)rug or Drug (C)lass or (A)ll (Default to ALL)
"RTN","BPSRPT0",59,0)
 ;Returns (1-ALL,2-Drug,3-Drug Class)
"RTN","BPSRPT0",60,0)
 S BPQSTDRG=$$SELDRGAL^BPSRPT3(1) I BPQSTDRG="^" Q
"RTN","BPSRPT0",61,0)
 ;
"RTN","BPSRPT0",62,0)
 ;Prompt to Select Drug (No Default)
"RTN","BPSRPT0",63,0)
 S BPDRUG=0 I BPQSTDRG=2 S BPDRUG=$$SELDRG^BPSRPT3() I BPDRUG="^" G EXIT
"RTN","BPSRPT0",64,0)
 ;
"RTN","BPSRPT0",65,0)
 ;Prompt to Select Drug Class (No Default)
"RTN","BPSRPT0",66,0)
 S BPDRGCL=0 I BPQSTDRG=3 S BPDRGCL=$$SELDRGCL^BPSRPT3() I BPDRGCL="^" G EXIT
"RTN","BPSRPT0",67,0)
 ;
"RTN","BPSRPT0",68,0)
 ;Report Specific Prompts
"RTN","BPSRPT0",69,0)
 ;
"RTN","BPSRPT0",70,0)
 ;Prompt to select Date Range
"RTN","BPSRPT0",71,0)
 ;Returns (Start Date^End Date)
"RTN","BPSRPT0",72,0)
 I (",1,2,3,4,5,6,7,8,9,")[BPRTYPE S BPBEGDT=$$SELDATE^BPSRPT3(BPRTYPE) D  I BPBEGDT="^" G EXIT
"RTN","BPSRPT0",73,0)
 .I BPBEGDT="^" Q
"RTN","BPSRPT0",74,0)
 .S BPENDDT=$P(BPBEGDT,U,2)
"RTN","BPSRPT0",75,0)
 .S BPBEGDT=$P(BPBEGDT,U)
"RTN","BPSRPT0",76,0)
 ;
"RTN","BPSRPT0",77,0)
 ;Prompt to Include (R)ELEASED or (N)OT RELEASED or (A)LL (Default to RELEASED)
"RTN","BPSRPT0",78,0)
 ;Returns (1-ALL,2-RELEASED,3-NOT RELEASED)
"RTN","BPSRPT0",79,0)
 S BPRLNRL=$S(BPRTYPE=3:3,1:1) I (",1,2,4,6,7,8,9,")[BPRTYPE S BPRLNRL=$$SELRLNRL^BPSRPT4($S(BPRTYPE=9:1,1:2)) I BPRLNRL="^" G EXIT
"RTN","BPSRPT0",80,0)
 ;
"RTN","BPSRPT0",81,0)
 ;Prompt to Include (S)pecific Reject Code or (A)LL (Default to ALL)
"RTN","BPSRPT0",82,0)
 ;Returns (0-ALL,ptr-Pointer to Selected Reject Code in #9002313.93)
"RTN","BPSRPT0",83,0)
 S BPREJCD=0 I (",2,")[BPRTYPE S BPREJCD=$$SELREJCD^BPSRPT4(0) I BPREJCD="^" G EXIT
"RTN","BPSRPT0",84,0)
 ;
"RTN","BPSRPT0",85,0)
 ;Prompt to Include Auto(R)eversed or (A)LL (Default to ALL)
"RTN","BPSRPT0",86,0)
 ;Returns (0-All,1-AutoReversed)
"RTN","BPSRPT0",87,0)
 S BPAUTREV=0 I (",4,")[BPRTYPE S BPAUTREV=$$SELAUREV^BPSRPT4(0) I BPAUTREV="^" G EXIT
"RTN","BPSRPT0",88,0)
 ;
"RTN","BPSRPT0",89,0)
 ;Prompt to Include A(C)cepted or (R)ejected or (A)LL (Default to REJECTED)
"RTN","BPSRPT0",90,0)
 ;Returns (0-All,1-Rejected,2-Accepted)
"RTN","BPSRPT0",91,0)
 S BPACREJ=0 I (",4,")[BPRTYPE S BPACREJ=$$SELACREJ^BPSRPT4(1) I BPACREJ="^" G EXIT
"RTN","BPSRPT0",92,0)
 ;
"RTN","BPSRPT0",93,0)
 ;Prompt to Include (S)pecific Close Claim Reason or (A)ll (Default to All)
"RTN","BPSRPT0",94,0)
 ;Returns (0-All,ptr-Pointer to #356.8)
"RTN","BPSRPT0",95,0)
 S BPCCRSN=0 I (",7,")[BPRTYPE S BPCCRSN=$$SELCCRSN^BPSRPT4(0) I BPCCRSN="^" G EXIT
"RTN","BPSRPT0",96,0)
 ;
"RTN","BPSRPT0",97,0)
 ;Prompt for Eligibility Indicator for payable, rejected, reversed and closed claims report
"RTN","BPSRPT0",98,0)
 ;Returns (V=VETERAN,T=TRICARE,C=CHAMPVA,0=All)
"RTN","BPSRPT0",99,0)
 S BPELIG=0 I (",1,2,4,7,")[BPRTYPE S BPELIG=$$SELELIG^BPSRPT3(1) I BPELIG="^" G EXIT
"RTN","BPSRPT0",100,0)
 ;
"RTN","BPSRPT0",101,0)
 ;Prompt for Open/Closed/All claims
"RTN","BPSRPT0",102,0)
 ;Returns (1=Closed,2=Open,0=All)
"RTN","BPSRPT0",103,0)
 S BPOPCL=0 I (",2,")[BPRTYPE S BPOPCL=$$SELOPCL^BPSRPT3(2) I BPOPCL="^" G EXIT
"RTN","BPSRPT0",104,0)
 ;
"RTN","BPSRPT0",105,0)
 ;Prompt for All or Most Recent (Non-Billable Status Report only)
"RTN","BPSRPT0",106,0)
 ;Returns A - All, R - Most Recent
"RTN","BPSRPT0",107,0)
 S BPALRC=0 I (",9,")[BPRTYPE S BPALRC=$$SELALRC^BPSRPT3() I BPALRC="^" G EXIT
"RTN","BPSRPT0",108,0)
 ;
"RTN","BPSRPT0",109,0)
 ;Prompt for multiple Eligibility Indicator for Non-Billable Status Report
"RTN","BPSRPT0",110,0)
 ;Sets up BPELIG1 variable and array, BPELIG1=0 ALL or BPELIG1=1,BPELIG1(xx) for list
"RTN","BPSRPT0",111,0)
 S BPELIG1=0 I (",9,")[BPRTYPE S BPELIG1=$$SELELIG1^BPSRPT3() I BPELIG1="^" G EXIT
"RTN","BPSRPT0",112,0)
 ;
"RTN","BPSRPT0",113,0)
 ;Prompt for Non-Billable Status (Non-Billable Status Report only)
"RTN","BPSRPT0",114,0)
 ;Sets up BPNBSTS variable and array, BPNBSTS=0 ALL or BPNBSTS=1,BPNBSTS(xx) for list
"RTN","BPSRPT0",115,0)
 S BPNBSTS=0 I (",9,")[BPRTYPE S BPNBSTS=$$SELNBSTS^BPSRPT3() I BPNBSTS="^" G EXIT
"RTN","BPSRPT0",116,0)
 ;
"RTN","BPSRPT0",117,0)
 ;Prompt for Excel Capture (Detail Only)
"RTN","BPSRPT0",118,0)
 S BPEXCEL=0 I 'BPSUMDET S BPEXCEL=$$SELEXCEL^BPSRPT4() I BPEXCEL="^" G EXIT
"RTN","BPSRPT0",119,0)
 ;
"RTN","BPSRPT0",120,0)
 ;Prompt for the Device
"RTN","BPSRPT0",121,0)
 I 'BPEXCEL D
"RTN","BPSRPT0",122,0)
 .W !!,"WARNING - THIS REPORT REQUIRES THAT A DEVICE WITH 132 COLUMN WIDTH BE USED."
"RTN","BPSRPT0",123,0)
 .W !,"IT WILL NOT DISPLAY CORRECTLY USING 80 COLUMN WIDTH DEVICES",!
"RTN","BPSRPT0",124,0)
 S BPQ=0 D DEVICE(BPRPTNAM) Q:BPQ
"RTN","BPSRPT0",125,0)
 ;
"RTN","BPSRPT0",126,0)
 ;Compile and Run the Report
"RTN","BPSRPT0",127,0)
 D RUN(BPEXCEL,BPRPTNAM,BPSUMDET)
"RTN","BPSRPT0",128,0)
 I 'BPQ D PAUSE2^BPSRPT1
"RTN","BPSRPT0",129,0)
 ;
"RTN","BPSRPT0",130,0)
EXIT Q
"RTN","BPSRPT0",131,0)
 ;
"RTN","BPSRPT0",132,0)
 ;Compile and Run the Report
"RTN","BPSRPT0",133,0)
 ;
"RTN","BPSRPT0",134,0)
RUN(BPEXCEL,BPRPTNAM,BPSUMDET) N BPPAGE,BPTMP
"RTN","BPSRPT0",135,0)
 S BPTMP=$NA(^TMP($J,"BPSRPT"))
"RTN","BPSRPT0",136,0)
 K @BPTMP
"RTN","BPSRPT0",137,0)
 S BPPAGE=0
"RTN","BPSRPT0",138,0)
 W:BPSCR&'BPEXCEL !,"Please wait...",!
"RTN","BPSRPT0",139,0)
 ;
"RTN","BPSRPT0",140,0)
 ;Compile the report
"RTN","BPSRPT0",141,0)
 Q:$$COLLECT^BPSRPT1(BPTMP)=-1
"RTN","BPSRPT0",142,0)
 U IO
"RTN","BPSRPT0",143,0)
 ;
"RTN","BPSRPT0",144,0)
 ;Display the report
"RTN","BPSRPT0",145,0)
 D REPORT^BPSRPT5(BPTMP,BPEXCEL,BPSCR,BPRPTNAM,BPSUMDET,BPPAGE)
"RTN","BPSRPT0",146,0)
 I 'BPSCR W !,@IOF
"RTN","BPSRPT0",147,0)
 K @BPTMP
"RTN","BPSRPT0",148,0)
 I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","BPSRPT0",149,0)
 D ^%ZISC
"RTN","BPSRPT0",150,0)
 Q
"RTN","BPSRPT0",151,0)
 ;
"RTN","BPSRPT0",152,0)
 ;Prompt For the Device
"RTN","BPSRPT0",153,0)
 ;
"RTN","BPSRPT0",154,0)
 ; Returns Device variables and BPSCR
"RTN","BPSRPT0",155,0)
 ;
"RTN","BPSRPT0",156,0)
DEVICE(BPRPTNAM) N %ZIS,ZTSK,ZTRTN,ZTIO,ZTDESC,ZTSAVE,POP
"RTN","BPSRPT0",157,0)
 S %ZIS="QM"
"RTN","BPSRPT0",158,0)
 D ^%ZIS
"RTN","BPSRPT0",159,0)
 I POP S BPQ=1
"RTN","BPSRPT0",160,0)
 ;
"RTN","BPSRPT0",161,0)
 ;Check for exit
"RTN","BPSRPT0",162,0)
 I $G(BPQ) G XDEV
"RTN","BPSRPT0",163,0)
 ;
"RTN","BPSRPT0",164,0)
 S BPSCR=$S($E($G(IOST),1,2)="C-":1,1:0)
"RTN","BPSRPT0",165,0)
 I $D(IO("Q")) D  S BPQ=1
"RTN","BPSRPT0",166,0)
 . S ZTRTN="RUN^BPSRPT0(BPEXCEL,BPRPTNAM,BPSUMDET)"
"RTN","BPSRPT0",167,0)
 . S ZTIO=ION
"RTN","BPSRPT0",168,0)
 . S ZTSAVE("*")=""
"RTN","BPSRPT0",169,0)
 . S ZTDESC="BPS REPORT: "_BPRPTNAM
"RTN","BPSRPT0",170,0)
 . D ^%ZTLOAD
"RTN","BPSRPT0",171,0)
 . W !,$S($D(ZTSK):"REQUEST QUEUED TASK="_ZTSK,1:"REQUEST CANCELLED")
"RTN","BPSRPT0",172,0)
 . D HOME^%ZIS
"RTN","BPSRPT0",173,0)
 U IO
"RTN","BPSRPT0",174,0)
XDEV Q
"RTN","BPSRPT1")
0^53^B64732997
"RTN","BPSRPT1",1,0)
BPSRPT1 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,10,11,19,20**;JUN 2004;Build 27
"RTN","BPSRPT1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT1",4,0)
 ;
"RTN","BPSRPT1",5,0)
 ; Reference to COLLECT^IBNCPEV3 supported by ICR 6131
"RTN","BPSRPT1",6,0)
 ;
"RTN","BPSRPT1",7,0)
 Q
"RTN","BPSRPT1",8,0)
 ;
"RTN","BPSRPT1",9,0)
 ; ECME Report Compile Routine - Looping/Filtering Routine
"RTN","BPSRPT1",10,0)
 ;
"RTN","BPSRPT1",11,0)
 ;  Input Variables:
"RTN","BPSRPT1",12,0)
 ;               BPRTYPE - Type of Report (1-9)
"RTN","BPSRPT1",13,0)
 ;               BPGLTMP - Temporary storage global
"RTN","BPSRPT1",14,0)
 ;  BPPHARM/BPPHARM(ptr) - Set to 0 for all pharmacies, if set to 1 array
"RTN","BPSRPT1",15,0)
 ;                         of internal pointers of selected pharmacies
"RTN","BPSRPT1",16,0)
 ;              BPSUMDET - (1) Summary or (0) Detail format
"RTN","BPSRPT1",17,0)
 ;              BPINSINF - Set to 0 for all insurances or list of file 36 IENs
"RTN","BPSRPT1",18,0)
 ;                 BPMWC - A-ALL,M-Mail,W-Window,C-CMOP Prescriptions
"RTN","BPSRPT1",19,0)
 ;               BPRTBCK - 1-ALL,2-RealTime,3-Backbill Claim Submission,4-PRO Option,5-Resubmission
"RTN","BPSRPT1",20,0)
 ;               BPRLNRL - 1-ALL,2-RELEASED,3-NOT RELEASED
"RTN","BPSRPT1",21,0)
 ;                BPDRUG - DRUG to report on (ptr to #50)
"RTN","BPSRPT1",22,0)
 ;               BPDRGCL - DRUG CLASS to report on (0 for ALL)
"RTN","BPSRPT1",23,0)
 ;               BPBEGDT - Beginning Date
"RTN","BPSRPT1",24,0)
 ;               BPENDDT - Ending Date
"RTN","BPSRPT1",25,0)
 ;               BPCCRSN - Set to 0 for all closed claim reasons or ptr to #356.8
"RTN","BPSRPT1",26,0)
 ;              BPAUTREV - 0-ALL,1-Auto Reversed
"RTN","BPSRPT1",27,0)
 ;               BPACREJ - 0-ALL,1-REJECTED,2-ACCEPTED
"RTN","BPSRPT1",28,0)
 ;               BPNBSTS - Non-Billable Status
"RTN","BPSRPT1",29,0)
 ;    BPELIG1/BPELIG1(x) - Array of multiple eligibilities
"RTN","BPSRPT1",30,0)
 ;                BPALRC - A-All or R:Most recent
"RTN","BPSRPT1",31,0)
 ;              
"RTN","BPSRPT1",32,0)
COLLECT(BPGLTMP) N BP02,BP57,BP59,BPENDDT1,BPLDT02,BPLDT57,X,Y,OK,BPIX
"RTN","BPSRPT1",33,0)
 ;
"RTN","BPSRPT1",34,0)
 ;Check Variables
"RTN","BPSRPT1",35,0)
 S OK=1
"RTN","BPSRPT1",36,0)
 S:'$G(BPBEGDT) BPBEGDT=0
"RTN","BPSRPT1",37,0)
 S:'$G(BPENDDT) BPENDDT=9999999
"RTN","BPSRPT1",38,0)
 S BPENDDT=BPENDDT+0.9
"RTN","BPSRPT1",39,0)
 I $G(BPRTYPE)=""!($G(BPGLTMP)="")!($G(BPPHARM)="")!($G(BPSUMDET)="")!($G(BPINSINF)="")!($G(BPMWC)="")!($G(BPRTBCK)="") S OK=-1 G EXIT
"RTN","BPSRPT1",40,0)
 ;
"RTN","BPSRPT1",41,0)
 ; For the Non-Billable Status report, we need to loop through the IB NCPDP EVENT LOG instead 
"RTN","BPSRPT1",42,0)
 ;   of BPS Claim/BPS Transaction data
"RTN","BPSRPT1",43,0)
 I BPRTYPE=9 Q $$COLLECT^IBNCPEV3(BPBEGDT,BPENDDT,BPMWC,BPRLNRL,BPDRUG,BPDRGCL,BPALRC,.BPPHARM,.BPINSINF,.BPNBSTS,.BPELIG1,BPGLTMP)
"RTN","BPSRPT1",44,0)
 ;
"RTN","BPSRPT1",45,0)
 ;Loop through BPS CLAIMS
"RTN","BPSRPT1",46,0)
 ;
"RTN","BPSRPT1",47,0)
 ;First look for fill/refill cross reference
"RTN","BPSRPT1",48,0)
 ;Loop through Date of Service Index in BPS CLAIMS file and find link to 
"RTN","BPSRPT1",49,0)
 ;claim in BPS TRANSACTION.  Process earliest Date of Service entry found in
"RTN","BPSRPT1",50,0)
 ;BPS TRANSACTION
"RTN","BPSRPT1",51,0)
 ;
"RTN","BPSRPT1",52,0)
 ;Choose Index to Loop through (different for Closed Claims)
"RTN","BPSRPT1",53,0)
 S BPIX="AF" S:BPRTYPE=7 BPIX="AG"
"RTN","BPSRPT1",54,0)
 ;
"RTN","BPSRPT1",55,0)
 S BPLDT02=$S(BPIX="AF":$$FM2YMD(BPBEGDT-0.00001),1:BPBEGDT) S:BPLDT02="" BPLDT02=0
"RTN","BPSRPT1",56,0)
 S BPENDDT1=$S(BPIX="AF":$$FM2YMD(BPENDDT),1:BPENDDT_".9999999999") S:BPENDDT1="" BPENDDT1=99999999
"RTN","BPSRPT1",57,0)
 F  S BPLDT02=+$O(^BPSC(BPIX,BPLDT02)) Q:BPLDT02=0!(BPLDT02>BPENDDT1)  D
"RTN","BPSRPT1",58,0)
 . S BP02=0 F  S BP02=$O(^BPSC(BPIX,BPLDT02,BP02)) Q:+BP02=0  D
"RTN","BPSRPT1",59,0)
 . . S BP59=+$O(^BPST("AE",BP02,0))
"RTN","BPSRPT1",60,0)
 . . Q:BP59=0
"RTN","BPSRPT1",61,0)
 . . I $D(@BPGLTMP@("FILE59",BP59)) Q
"RTN","BPSRPT1",62,0)
 . . S @BPGLTMP@("FILE59",BP59)=BPLDT02_"^02"
"RTN","BPSRPT1",63,0)
 . . D PROCESS(BP59)
"RTN","BPSRPT1",64,0)
 ;
"RTN","BPSRPT1",65,0)
 ;#9002313.59 has only one entry per claim with, which has a date 
"RTN","BPSRPT1",66,0)
 ;  of the latest update for the claim
"RTN","BPSRPT1",67,0)
 ;#9002313.57 has more than one entries per claim and keep all 
"RTN","BPSRPT1",68,0)
 ;  changes made the claim
"RTN","BPSRPT1",69,0)
 ;so we have to go thru #9002313.57 to find the earliest date 
"RTN","BPSRPT1",70,0)
 ;related to the claim to check it against BPBEGDT
"RTN","BPSRPT1",71,0)
 S BPLDT57=BPBEGDT-0.00001
"RTN","BPSRPT1",72,0)
 F  S BPLDT57=+$O(^BPSTL("AH",BPLDT57)) Q:BPLDT57=0!(BPLDT57>BPENDDT)  D
"RTN","BPSRPT1",73,0)
 . S BP57=0 F  S BP57=$O(^BPSTL("AH",BPLDT57,BP57)) Q:+BP57=0  D
"RTN","BPSRPT1",74,0)
 . . S BP59=+$G(^BPSTL(BP57,0))
"RTN","BPSRPT1",75,0)
 . . I $D(@BPGLTMP@("FILE59",BP59)) Q
"RTN","BPSRPT1",76,0)
 . . S @BPGLTMP@("FILE59",BP59)=BPLDT57_"^57"
"RTN","BPSRPT1",77,0)
 . . D PROCESS(BP59)
"RTN","BPSRPT1",78,0)
 ;
"RTN","BPSRPT1",79,0)
 ;Remove Portion of Scratch Global
"RTN","BPSRPT1",80,0)
EXIT K @BPGLTMP@("FILE59")
"RTN","BPSRPT1",81,0)
 Q OK
"RTN","BPSRPT1",82,0)
 ;
"RTN","BPSRPT1",83,0)
 ;Convert FB date to YYYYMMDD
"RTN","BPSRPT1",84,0)
FM2YMD(BPFMDT) N Y,Y1
"RTN","BPSRPT1",85,0)
 S Y=$E(BPFMDT,2,3),Y1=$E(BPFMDT,1,1) S Y=$S(Y1=3:"20"_Y,Y1=2:"19"_Y,1:"")
"RTN","BPSRPT1",86,0)
 Q:Y Y_$E(BPFMDT,4,7)
"RTN","BPSRPT1",87,0)
 Q ""
"RTN","BPSRPT1",88,0)
 ;
"RTN","BPSRPT1",89,0)
 ;Process each Entry
"RTN","BPSRPT1",90,0)
 ;
"RTN","BPSRPT1",91,0)
PROCESS(BP59) ;
"RTN","BPSRPT1",92,0)
 N BPBCK,BPDFN,BPREF,BPPAYBL,BPPLAN,BPREJ,BPRLSDT,BPRX,BPRXDRG,BPSTATUS,BPSEQ,BPSTOP
"RTN","BPSRPT1",93,0)
 ;
"RTN","BPSRPT1",94,0)
 S BPSEQ=$$COB59^BPSUTIL2(BP59)
"RTN","BPSRPT1",95,0)
 ;
"RTN","BPSRPT1",96,0)
 ;Get ABSBRXI - ptr to #52
"RTN","BPSRPT1",97,0)
 S BPRX=+$P($G(^BPST(BP59,1)),U,11)
"RTN","BPSRPT1",98,0)
 ;
"RTN","BPSRPT1",99,0)
 ;Get ABSBRXR - Prescription Number IEN
"RTN","BPSRPT1",100,0)
 S BPREF=+$P($G(^BPST(BP59,1)),U)
"RTN","BPSRPT1",101,0)
 ;
"RTN","BPSRPT1",102,0)
 ;Get PATIENT - ptr to #2
"RTN","BPSRPT1",103,0)
 S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSRPT1",104,0)
 ; 
"RTN","BPSRPT1",105,0)
 ; Skip eligibility verification transactions
"RTN","BPSRPT1",106,0)
 I $P($G(^BPST(BP59,0)),U,15)="E" G XPROC
"RTN","BPSRPT1",107,0)
 ;
"RTN","BPSRPT1",108,0)
 ;Check for correct BPS Pharmacy (DIVISION)
"RTN","BPSRPT1",109,0)
 I $G(BPPHARM)=1,$$CHKPHRM(BP59)=0 G XPROC
"RTN","BPSRPT1",110,0)
 ;
"RTN","BPSRPT1",111,0)
 ;Check for Display 1-ALL,2-RELEASED,3-NOT RELEASED
"RTN","BPSRPT1",112,0)
 S BPRLSDT=$$RELEASED(BPRX,BPREF)
"RTN","BPSRPT1",113,0)
 I BPRLNRL'=1 I ((BPRLNRL=2)&(BPRLSDT=0))!((BPRLNRL=3)&(BPRLSDT)) G XPROC
"RTN","BPSRPT1",114,0)
 ;
"RTN","BPSRPT1",115,0)
 ;Get Status
"RTN","BPSRPT1",116,0)
 S BPSTATUS=$$STATUS^BPSRPT6(BPRX,BPREF,BPSEQ)
"RTN","BPSRPT1",117,0)
 ;
"RTN","BPSRPT1",118,0)
 ;if REVERSAL
"RTN","BPSRPT1",119,0)
 I BPRTYPE=4,BPSTATUS'["REVERSAL" G XPROC  ; exclude non-reversed
"RTN","BPSRPT1",120,0)
 I BPRTYPE=4,$$CLOSED02^BPSSCR03($P(^BPST(BP59,0),U,4))=1 G XPROC  ; exclude closed claims for Reversal Report
"RTN","BPSRPT1",121,0)
 ;
"RTN","BPSRPT1",122,0)
 ;if PAYABLE
"RTN","BPSRPT1",123,0)
 S BPPAYBL=BPSTATUS["PAYABLE"
"RTN","BPSRPT1",124,0)
 I BPRTYPE=1,'BPPAYBL G XPROC  ; exclude non-payable
"RTN","BPSRPT1",125,0)
 I BPRTYPE=1,BPSTATUS["REVERSAL" G XPROC  ; reversed
"RTN","BPSRPT1",126,0)
 ;
"RTN","BPSRPT1",127,0)
 ;if REJECTED
"RTN","BPSRPT1",128,0)
 S BPREJ=BPSTATUS["REJECTED"
"RTN","BPSRPT1",129,0)
 I BPRTYPE=2,BPSTATUS["REVERSAL" G XPROC ; exclude rejected reversals
"RTN","BPSRPT1",130,0)
 I BPRTYPE=2,'BPREJ G XPROC  ; exclude non-rejected
"RTN","BPSRPT1",131,0)
 ;
"RTN","BPSRPT1",132,0)
 ;if SUBMITTED NOT RELEASED exclude released ones
"RTN","BPSRPT1",133,0)
 I BPRTYPE=3,BPRLSDT'=0 G XPROC
"RTN","BPSRPT1",134,0)
 I BPRTYPE=3,'BPPAYBL G XPROC  ; exclude non-payable
"RTN","BPSRPT1",135,0)
 ;
"RTN","BPSRPT1",136,0)
 ;Auto Reverse Check
"RTN","BPSRPT1",137,0)
 I BPRTYPE=4,BPAUTREV,'$$AUTOREV(BP59) G XPROC
"RTN","BPSRPT1",138,0)
 ;
"RTN","BPSRPT1",139,0)
 ;if CLOSED
"RTN","BPSRPT1",140,0)
 I BPRTYPE=7,'$$CLSCLM(BP59) G XPROC  ;exclude open claims
"RTN","BPSRPT1",141,0)
 ;I BPRTYPE=7,BPSTATUS'["REJECTED" G XPROC  ;exclude non-rejected closed claims
"RTN","BPSRPT1",142,0)
 ;
"RTN","BPSRPT1",143,0)
 ;if Spending Account Report, check Pricing Segment for data
"RTN","BPSRPT1",144,0)
 I BPRTYPE=8,'$$PRICING^BPSRPT5(BP59) G XPROC
"RTN","BPSRPT1",145,0)
 ;
"RTN","BPSRPT1",146,0)
 ;if Recent Transactions, exclude closed claims
"RTN","BPSRPT1",147,0)
 I BPRTYPE=5,$$CLSCLM(BP59) G XPROC
"RTN","BPSRPT1",148,0)
 ;
"RTN","BPSRPT1",149,0)
 ;If Totals by Date, include only rejects and payables
"RTN","BPSRPT1",150,0)
 I BPRTYPE=6,BPSTATUS'["REJECTED",BPSTATUS'["PAYABLE" G XPROC  ; Reversed
"RTN","BPSRPT1",151,0)
 ;
"RTN","BPSRPT1",152,0)
 ;Realtime/Backbill/PRO Option/Resubmission Check
"RTN","BPSRPT1",153,0)
 S BPBCK=$$RTBCK(BP59)    ; BPBCK=1 Backbill / BPBCK=2 PRO / BPBCK=5 Resub / BPBCK=0 Realtime
"RTN","BPSRPT1",154,0)
 ;
"RTN","BPSRPT1",155,0)
 ; If user doesn't want all transmission types (BPRTBCK'=1), then figure out if this transaction is OK 
"RTN","BPSRPT1",156,0)
 S BPSTOP=0
"RTN","BPSRPT1",157,0)
 I BPRTBCK'=1 D  I BPSTOP G XPROC
"RTN","BPSRPT1",158,0)
 . I BPRTBCK=2,BPBCK'=0 S BPSTOP=1 Q    ; Realtime check
"RTN","BPSRPT1",159,0)
 . I BPRTBCK=3,BPBCK'=1 S BPSTOP=1 Q    ; Backbill check
"RTN","BPSRPT1",160,0)
 . I BPRTBCK=4,BPBCK'=2 S BPSTOP=1 Q    ; PRO option check
"RTN","BPSRPT1",161,0)
 . I BPRTBCK=5,BPBCK'=5 S BPSTOP=1 Q    ; Resubmission check
"RTN","BPSRPT1",162,0)
 . Q
"RTN","BPSRPT1",163,0)
 ;
"RTN","BPSRPT1",164,0)
 ;Check for MAIL/WINDOW/CMOP/ALL
"RTN","BPSRPT1",165,0)
 I BPMWC'="A",$$MWC^BPSRPT6(BPRX,BPREF)'=BPMWC G XPROC
"RTN","BPSRPT1",166,0)
 ;
"RTN","BPSRPT1",167,0)
 ;Check for selected insurance
"RTN","BPSRPT1",168,0)
 S BPPLAN=$$INSNAM^BPSRPT6(BP59)
"RTN","BPSRPT1",169,0)
 I BPINSINF'=0,'$$CHKINS^BPSSCRCU($P(BPPLAN,U,1),BPINSINF) G XPROC
"RTN","BPSRPT1",170,0)
 S BPPLAN=$P(BPPLAN,U,2)
"RTN","BPSRPT1",171,0)
 ;
"RTN","BPSRPT1",172,0)
 ;Check for selected drug
"RTN","BPSRPT1",173,0)
 S BPRXDRG=$$GETDRUG^BPSRPT6(BPRX)
"RTN","BPSRPT1",174,0)
 I BPRXDRG=0 G XPROC
"RTN","BPSRPT1",175,0)
 I BPDRUG,BPDRUG'=BPRXDRG G XPROC
"RTN","BPSRPT1",176,0)
 ;
"RTN","BPSRPT1",177,0)
 ;Check for selected drug classes
"RTN","BPSRPT1",178,0)
 I BPDRGCL'=0,BPDRGCL'=$$DRGCLNAM^BPSRPT6($$GETDRGCL^BPSRPT6(BPRXDRG),99) G XPROC
"RTN","BPSRPT1",179,0)
 ;
"RTN","BPSRPT1",180,0)
 ;Check for selected Close Reason
"RTN","BPSRPT1",181,0)
 I BPCCRSN,BPCCRSN'=$P($$CLRSN^BPSRPT7(BP59),U) G XPROC
"RTN","BPSRPT1",182,0)
 ;
"RTN","BPSRPT1",183,0)
 ;Check for Accepted/Rejected
"RTN","BPSRPT1",184,0)
 I BPACREJ=1,BPSTATUS'["REJECTED" G XPROC
"RTN","BPSRPT1",185,0)
 I BPACREJ=2,BPSTATUS'["ACCEPTED" G XPROC
"RTN","BPSRPT1",186,0)
 ;
"RTN","BPSRPT1",187,0)
 ;Check for Specific Reject Code
"RTN","BPSRPT1",188,0)
 I BPREJCD'=0,'$$CKREJ(BP59,BPREJCD) G XPROC
"RTN","BPSRPT1",189,0)
 ;
"RTN","BPSRPT1",190,0)
 ;Check for Eligibility Code
"RTN","BPSRPT1",191,0)
 I BPELIG'=0,BPELIG'=$$ELIGCODE^BPSSCR05(BP59) G XPROC
"RTN","BPSRPT1",192,0)
 ;
"RTN","BPSRPT1",193,0)
 ;Check Open/Closed claim
"RTN","BPSRPT1",194,0)
 I BPOPCL'=0,((BPOPCL=2)&($$CLOSED02^BPSSCR03($P(^BPST(BP59,0),U,4))=1))!((BPOPCL=1)&($$CLOSED02^BPSSCR03($P(^BPST(BP59,0),U,4))'=1)) G XPROC
"RTN","BPSRPT1",195,0)
 ;
"RTN","BPSRPT1",196,0)
 ;Save Entry for Report
"RTN","BPSRPT1",197,0)
 D SETTMP^BPSRPT2(BPGLTMP,BPDFN,BPRX,BPREF,BP59,BPBEGDT,BPENDDT,.BPPHARM,BPSUMDET,BPPLAN,BPRLSDT,BPPAYBL,BPREJ,BPRXDRG,$P(BPSTATUS,U))
"RTN","BPSRPT1",198,0)
 ;
"RTN","BPSRPT1",199,0)
XPROC Q
"RTN","BPSRPT1",200,0)
 ;
"RTN","BPSRPT1",201,0)
 ;Check if selected BPS PHARMACY
"RTN","BPSRPT1",202,0)
 ;
"RTN","BPSRPT1",203,0)
 ; Defined Variable: BPPHARM(ptr) - List of BPS Pharmacies to Report on
"RTN","BPSRPT1",204,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",205,0)
 ; 
"RTN","BPSRPT1",206,0)
 ; Returned Value -> 0 = Entry not in list of selected pharmacies
"RTN","BPSRPT1",207,0)
 ;                   1 = Entry is in list of selected pharmacies
"RTN","BPSRPT1",208,0)
CHKPHRM(BP59) N PHARM
"RTN","BPSRPT1",209,0)
 S PHARM=+$P($G(^BPST(BP59,1)),"^",7)
"RTN","BPSRPT1",210,0)
 S PHARM=$S($D(BPPHARM(PHARM)):1,1:0)
"RTN","BPSRPT1",211,0)
 Q PHARM
"RTN","BPSRPT1",212,0)
 ;
"RTN","BPSRPT1",213,0)
 ;Determine whether claim is Released or Not Released
"RTN","BPSRPT1",214,0)
 ;
"RTN","BPSRPT1",215,0)
 ; Input Variables: BPRX - ptr to PRESCRIPTION (#52)
"RTN","BPSRPT1",216,0)
 ;                 BPREF - refill # (0-No Refills,1-1st Refill, 2-2nd, ...) 
"RTN","BPSRPT1",217,0)
 ;
"RTN","BPSRPT1",218,0)
 ; Return Value ->             0 = Not Released
"RTN","BPSRPT1",219,0)
 ;                 released date = Released
"RTN","BPSRPT1",220,0)
 ;                 
"RTN","BPSRPT1",221,0)
RELEASED(BPRX,BPREF) N RDT
"RTN","BPSRPT1",222,0)
 ;
"RTN","BPSRPT1",223,0)
 I BPREF=0 S RDT=$$RXRELDT^BPSRPT6(BPRX)\1
"RTN","BPSRPT1",224,0)
 I BPREF'=0 S RDT=$$REFRELDT^BPSRPT6(BPRX,BPREF)\1
"RTN","BPSRPT1",225,0)
 Q RDT
"RTN","BPSRPT1",226,0)
 ;
"RTN","BPSRPT1",227,0)
 ;Determine if claim was Auto Reversed
"RTN","BPSRPT1",228,0)
 ;
"RTN","BPSRPT1",229,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",230,0)
 ; Return Value -> 1 = Auto Reversed
"RTN","BPSRPT1",231,0)
 ;                 0 = Not Auto Reversed
"RTN","BPSRPT1",232,0)
 ;
"RTN","BPSRPT1",233,0)
AUTOREV(BP59) N AR,BP02
"RTN","BPSRPT1",234,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT1",235,0)
 S AR=+$P($G(^BPSC(BP02,0)),U,7)
"RTN","BPSRPT1",236,0)
 Q AR
"RTN","BPSRPT1",237,0)
 ;
"RTN","BPSRPT1",238,0)
 ;Determine if claim was closed
"RTN","BPSRPT1",239,0)
 ;
"RTN","BPSRPT1",240,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",241,0)
 ; Return Value -> 1 = Closed
"RTN","BPSRPT1",242,0)
 ;                 0 = Not Closed
"RTN","BPSRPT1",243,0)
 ;                 
"RTN","BPSRPT1",244,0)
CLSCLM(BP59) N BP02,CL
"RTN","BPSRPT1",245,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT1",246,0)
 S CL=+$G(^BPSC(BP02,900))
"RTN","BPSRPT1",247,0)
 Q CL
"RTN","BPSRPT1",248,0)
 ;
"RTN","BPSRPT1",249,0)
 ;Determine whether claim is Realtime or Backbilled or PRO Option or Resubmission
"RTN","BPSRPT1",250,0)
 ;
"RTN","BPSRPT1",251,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",252,0)
 ; Return Value -> 5 = Resubmission
"RTN","BPSRPT1",253,0)
 ;                 2 = PRO Option
"RTN","BPSRPT1",254,0)
 ;                 1 = Backbilled
"RTN","BPSRPT1",255,0)
 ;                 0 = Realtime
"RTN","BPSRPT1",256,0)
RTBCK(BP59) N BB
"RTN","BPSRPT1",257,0)
 S BB=$P($G(^BPST(BP59,12)),U,1)
"RTN","BPSRPT1",258,0)
 S BB=$S(BB="BB":1,BB="P2":2,BB="P2S":2,BB="ERES":5,BB="ERWV":5,BB="ERNB":5,1:0)
"RTN","BPSRPT1",259,0)
 Q BB
"RTN","BPSRPT1",260,0)
 ;
"RTN","BPSRPT1",261,0)
 ;Screen Pause 1
"RTN","BPSRPT1",262,0)
 ;
"RTN","BPSRPT1",263,0)
 ; Return variable - BPQ = 0 Continue
"RTN","BPSRPT1",264,0)
 ;                          2 Quit
"RTN","BPSRPT1",265,0)
PAUSE N X
"RTN","BPSRPT1",266,0)
 U IO(0) W !!,"Press RETURN to continue, '^' to exit:"
"RTN","BPSRPT1",267,0)
 R X:$G(DTIME) S:'$T X="^" S:X["^" BPQ=2
"RTN","BPSRPT1",268,0)
 U IO
"RTN","BPSRPT1",269,0)
 Q
"RTN","BPSRPT1",270,0)
 ;
"RTN","BPSRPT1",271,0)
 ;Screen Pause 2
"RTN","BPSRPT1",272,0)
 ;
"RTN","BPSRPT1",273,0)
 ; Return variable - BPQ = 0 Continue
"RTN","BPSRPT1",274,0)
 ;                         2 Quit
"RTN","BPSRPT1",275,0)
PAUSE2 N X
"RTN","BPSRPT1",276,0)
 U IO(0) W !!,"Press RETURN to continue:"
"RTN","BPSRPT1",277,0)
 R X:$G(DTIME) S:'$T X="^" S:X["^" BPQ=2
"RTN","BPSRPT1",278,0)
 U IO
"RTN","BPSRPT1",279,0)
 Q
"RTN","BPSRPT1",280,0)
 ;
"RTN","BPSRPT1",281,0)
 ;Get ECME#
"RTN","BPSRPT1",282,0)
 ;
"RTN","BPSRPT1",283,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSRPT1",284,0)
 ;output :
"RTN","BPSRPT1",285,0)
 ;ECME number from 9002313.02
"RTN","BPSRPT1",286,0)
 ; 7 or 12 digits of the prescription IEN file 52
"RTN","BPSRPT1",287,0)
 ; or 12 spaces
"RTN","BPSRPT1",288,0)
ECMENUM(BP59) ;*/
"RTN","BPSRPT1",289,0)
 Q $$ECMENUM^BPSSCRU2(BP59)
"RTN","BPSRPT1",290,0)
 ;
"RTN","BPSRPT1",291,0)
 ;Convert FM date or date.time to displayable (mm/dd/yy HH:MM) format
"RTN","BPSRPT1",292,0)
 ;
"RTN","BPSRPT1",293,0)
DATTIM(X) N DATE,BPT,BPM,BPH,BPAP
"RTN","BPSRPT1",294,0)
 S DATE=$S(X:$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3),1:"")
"RTN","BPSRPT1",295,0)
 S BPT=$P(X,".",2) S:$L(BPT)<4 BPT=BPT_$E("0000",1,4-$L(BPT))
"RTN","BPSRPT1",296,0)
 S BPH=$E(BPT,1,2),BPM=$E(BPT,3,4)
"RTN","BPSRPT1",297,0)
 S BPAP="AM" I BPH>12 S BPH=BPH-12,BPAP="PM" S:$L(BPH)<2 BPH="0"_BPH
"RTN","BPSRPT1",298,0)
 I BPT S:'BPH BPH=12 S DATE=DATE_" "_BPH_":"_BPM_BPAP
"RTN","BPSRPT1",299,0)
 Q $G(DATE)
"RTN","BPSRPT1",300,0)
 ;
"RTN","BPSRPT1",301,0)
 ;Display RT-Realtime,BB-Backbill,P2-PRO Option, RS-Resubmission or " "
"RTN","BPSRPT1",302,0)
 ;
"RTN","BPSRPT1",303,0)
RTBCKNAM(BPINDEX) Q $S(BPINDEX=0:"RT",BPINDEX=1:"BB",BPINDEX=2:"P2",BPINDEX=5:"RS",1:" ")
"RTN","BPSRPT1",304,0)
 ;
"RTN","BPSRPT1",305,0)
 ;See for Specific Reject Code
"RTN","BPSRPT1",306,0)
 ;
"RTN","BPSRPT1",307,0)
CKREJ(BP59,BPREJCD) N FREJ,I,REJ,X
"RTN","BPSRPT1",308,0)
 S FREJ=0
"RTN","BPSRPT1",309,0)
 S X=$$REJTEXT^BPSRPT2(BP59,.REJ)
"RTN","BPSRPT1",310,0)
 S X="" F  S X=$O(REJ(X)) Q:X=""  D  Q:FREJ=1
"RTN","BPSRPT1",311,0)
 .S REJ=$P($G(REJ(X)),":") Q:REJ=""
"RTN","BPSRPT1",312,0)
 .S I="" F  S I=$O(^BPSF(9002313.93,"B",REJ,I)) Q:I=""  I I=BPREJCD S FREJ=1
"RTN","BPSRPT1",313,0)
 Q FREJ
"RTN","BPSRPT3")
0^54^B124301535
"RTN","BPSRPT3",1,0)
BPSRPT3 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,11,14,19,20**;JUN 2004;Build 27
"RTN","BPSRPT3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT3",4,0)
 ;
"RTN","BPSRPT3",5,0)
 ;Reference to IB NCPCP NON-BILLABLE STATUS REASONS (#366.17) supported by ICR 6136
"RTN","BPSRPT3",6,0)
 ;
"RTN","BPSRPT3",7,0)
 Q
"RTN","BPSRPT3",8,0)
 ;
"RTN","BPSRPT3",9,0)
 ; Select the ECME Pharmacy or Pharmacies
"RTN","BPSRPT3",10,0)
 ; 
"RTN","BPSRPT3",11,0)
 ; Input Variable -> none
"RTN","BPSRPT3",12,0)
 ; Return Value ->   "" = Valid Entry or Entries Selected
"RTN","BPSRPT3",13,0)
 ;                                        ^ = Exit
"RTN","BPSRPT3",14,0)
 ;                                       
"RTN","BPSRPT3",15,0)
 ; Output Variable -> BPPHARM = 1 One or More Pharmacies Selected
"RTN","BPSRPT3",16,0)
 ;                          = 0 User Entered 'ALL'
"RTN","BPSRPT3",17,0)
 ;                            
"RTN","BPSRPT3",18,0)
 ; If BPPHARM = 1 then the BPPHARM array will be defined where:
"RTN","BPSRPT3",19,0)
 ;    BPPHARM(ptr) = ptr ^ BPS PHARMACY NAME and
"RTN","BPSRPT3",20,0)
 ;    ptr = Internal Pointer to BPS PHARMACIES file (#9002313.56)
"RTN","BPSRPT3",21,0)
 ;                    
"RTN","BPSRPT3",22,0)
SELPHARM() N DIC,DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",23,0)
 ;
"RTN","BPSRPT3",24,0)
 ;Reset BPPHARM array
"RTN","BPSRPT3",25,0)
 K BPPHARM
"RTN","BPSRPT3",26,0)
 ;
"RTN","BPSRPT3",27,0)
 ;First see if they want to enter individual divisions or ALL
"RTN","BPSRPT3",28,0)
 S DIR(0)="S^D:DIVISION;A:ALL"
"RTN","BPSRPT3",29,0)
 S DIR("A")="Select Certain Pharmacy (D)ivisions or (A)LL"
"RTN","BPSRPT3",30,0)
 S DIR("L",1)="Select one of the following:"
"RTN","BPSRPT3",31,0)
 S DIR("L",2)=""
"RTN","BPSRPT3",32,0)
 S DIR("L",3)="     D         DIVISION"
"RTN","BPSRPT3",33,0)
 S DIR("L",4)="     A         ALL"
"RTN","BPSRPT3",34,0)
 D ^DIR K DIR
"RTN","BPSRPT3",35,0)
 ;
"RTN","BPSRPT3",36,0)
 ;Check for "^" or timeout, otherwise define BPPHARM
"RTN","BPSRPT3",37,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",38,0)
 E  S BPPHARM=$S(Y="A":0,1:1)
"RTN","BPSRPT3",39,0)
 ;
"RTN","BPSRPT3",40,0)
 ;If division selected, ask prompt
"RTN","BPSRPT3",41,0)
 I $G(BPPHARM)=1 F  D  Q:Y="^"!(Y="") 
"RTN","BPSRPT3",42,0)
 .;
"RTN","BPSRPT3",43,0)
 .;Prompt for entry
"RTN","BPSRPT3",44,0)
 .K X S DIC(0)="QEAM",DIC=9002313.56,DIC("A")="Select ECME Pharmacy Division(s): "
"RTN","BPSRPT3",45,0)
 .W ! D ^DIC
"RTN","BPSRPT3",46,0)
 .;
"RTN","BPSRPT3",47,0)
 .;Check for "^" or timeout 
"RTN","BPSRPT3",48,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1) K BPPHARM S Y="^" Q
"RTN","BPSRPT3",49,0)
 .;
"RTN","BPSRPT3",50,0)
 .;Check for blank entry, quit if no previous selections
"RTN","BPSRPT3",51,0)
 .I $G(X)="" S Y=$S($D(BPPHARM)>9:"",1:"^") K:Y="^" BPPHARM Q
"RTN","BPSRPT3",52,0)
 .;
"RTN","BPSRPT3",53,0)
 .;Handle Deletes
"RTN","BPSRPT3",54,0)
 .I $D(BPPHARM(+Y)) D  Q:Y="^"  I 1
"RTN","BPSRPT3",55,0)
 ..N P
"RTN","BPSRPT3",56,0)
 ..S P=Y  ;Save Original Value
"RTN","BPSRPT3",57,0)
 ..S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_$P(P,U,2)_" from your list?"
"RTN","BPSRPT3",58,0)
 ..S DIR("B")="NO" D ^DIR
"RTN","BPSRPT3",59,0)
 ..I ($G(DUOUT)=1)!($G(DTOUT)=1) K BPPHARM S Y="^" Q
"RTN","BPSRPT3",60,0)
 ..I Y="Y" K BPPHARM(+P),BPPHARM("B",$P(P,U,2),+P)
"RTN","BPSRPT3",61,0)
 ..S Y=P  ;Restore Original Value
"RTN","BPSRPT3",62,0)
 ..K P
"RTN","BPSRPT3",63,0)
 .E  D
"RTN","BPSRPT3",64,0)
 ..;Define new entries in BPPHARM array
"RTN","BPSRPT3",65,0)
 ..S BPPHARM(+Y)=Y
"RTN","BPSRPT3",66,0)
 ..S BPPHARM("B",$P(Y,U,2),+Y)=""
"RTN","BPSRPT3",67,0)
 .;
"RTN","BPSRPT3",68,0)
 .;Display a list of selected divisions
"RTN","BPSRPT3",69,0)
 .I $D(BPPHARM)>9 D
"RTN","BPSRPT3",70,0)
 ..N X
"RTN","BPSRPT3",71,0)
 ..W !,?2,"Selected:"
"RTN","BPSRPT3",72,0)
 ..S X="" F  S X=$O(BPPHARM("B",X)) Q:X=""  W !,?10,X
"RTN","BPSRPT3",73,0)
 ..K X
"RTN","BPSRPT3",74,0)
 .Q
"RTN","BPSRPT3",75,0)
 ;
"RTN","BPSRPT3",76,0)
 K BPPHARM("B")
"RTN","BPSRPT3",77,0)
 Q Y
"RTN","BPSRPT3",78,0)
 ;
"RTN","BPSRPT3",79,0)
 ; Select to Include Eligibility of (V)ETERAN, (T)RICARE, (C)HAMPVA or (A)ll
"RTN","BPSRPT3",80,0)
 ; 
"RTN","BPSRPT3",81,0)
 ; Input Variable -> DFLT = 0 = All
"RTN","BPSRPT3",82,0)
 ;                          1 = VETERAN
"RTN","BPSRPT3",83,0)
 ;                          2 = TRICARE
"RTN","BPSRPT3",84,0)
 ;                          3 = CHAMPVA
"RTN","BPSRPT3",85,0)
 ; 
"RTN","BPSRPT3",86,0)
 ; Return Value ->  V, T, C or 0 for All
"RTN","BPSRPT3",87,0)
 ;
"RTN","BPSRPT3",88,0)
SELELIG(DFLT) N DIC,DIR,DIRUT,DUOUT,DTOUT,DIROUT,X,Y
"RTN","BPSRPT3",89,0)
 S DFLT=$S($G(DFLT)=1:"V",$G(DFLT)=2:"T",$G(DFLT)=3:"C",1:"A")
"RTN","BPSRPT3",90,0)
 S DIR(0)="S^V:VETERAN;T:TRICARE;C:CHAMPVA;A:ALL"
"RTN","BPSRPT3",91,0)
 S DIR("A")="Include Certain Eligibility Type or (A)ll",DIR("B")=DFLT
"RTN","BPSRPT3",92,0)
 D ^DIR
"RTN","BPSRPT3",93,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",94,0)
 S Y=$S(Y="A":0,1:Y)
"RTN","BPSRPT3",95,0)
 Q Y
"RTN","BPSRPT3",96,0)
 ;
"RTN","BPSRPT3",97,0)
 ; Display (S)ummary or (D)etail Format
"RTN","BPSRPT3",98,0)
 ;
"RTN","BPSRPT3",99,0)
 ; Input Variable -> DFLT = 1 Summary
"RTN","BPSRPT3",100,0)
 ;                          2 Detail
"RTN","BPSRPT3",101,0)
 ;
"RTN","BPSRPT3",102,0)
 ; Return Value ->   1 = Summary
"RTN","BPSRPT3",103,0)
 ;                   0 = Detail
"RTN","BPSRPT3",104,0)
 ;                   ^ = Exit
"RTN","BPSRPT3",105,0)
 ;
"RTN","BPSRPT3",106,0)
SELSMDET(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",107,0)
 S DFLT=$S($G(DFLT)=1:"Summary",$G(DFLT)=0:"Detail",1:"Detail")
"RTN","BPSRPT3",108,0)
 S DIR(0)="S^S:Summary;D:Detail",DIR("A")="Display (S)ummary or (D)etail Format",DIR("B")=DFLT
"RTN","BPSRPT3",109,0)
 D ^DIR
"RTN","BPSRPT3",110,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",111,0)
 S Y=$S(Y="S":1,Y="D":0,1:Y)
"RTN","BPSRPT3",112,0)
 Q Y
"RTN","BPSRPT3",113,0)
 ;
"RTN","BPSRPT3",114,0)
 ; Display (C)MOP or (M)ail or (W)indow or (A)ll
"RTN","BPSRPT3",115,0)
 ; 
"RTN","BPSRPT3",116,0)
 ;    Input Variable -> DFLT = C CMOP
"RTN","BPSRPT3",117,0)
 ;                             W Window
"RTN","BPSRPT3",118,0)
 ;                             M Mail
"RTN","BPSRPT3",119,0)
 ;                             A All
"RTN","BPSRPT3",120,0)
 ;                          
"RTN","BPSRPT3",121,0)
 ;    Return Value ->   C = CMOP
"RTN","BPSRPT3",122,0)
 ;                      W = Window
"RTN","BPSRPT3",123,0)
 ;                      M = Mail
"RTN","BPSRPT3",124,0)
 ;                      A = All
"RTN","BPSRPT3",125,0)
 ;                      ^ = Exit
"RTN","BPSRPT3",126,0)
 ; 
"RTN","BPSRPT3",127,0)
SELMWC(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",128,0)
 S DFLT=$S($G(DFLT)="C":"CMOP",$G(DFLT)="W":"Window",$G(DFLT)="M":"Mail",1:"ALL")
"RTN","BPSRPT3",129,0)
 S DIR(0)="S^C:CMOP;M:Mail;W:Window;A:ALL"
"RTN","BPSRPT3",130,0)
 S DIR("A")="Display (C)MOP or (M)ail or (W)indow or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT3",131,0)
 D ^DIR
"RTN","BPSRPT3",132,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",133,0)
 Q Y
"RTN","BPSRPT3",134,0)
 ;
"RTN","BPSRPT3",135,0)
 ; Display (R)ealTime Fills or (B)ackbills or (P)RO option or Re(S)ubmission or (A)LL
"RTN","BPSRPT3",136,0)
 ;
"RTN","BPSRPT3",137,0)
 ;    Input Variable -> DFLT = 5 Resubmission
"RTN","BPSRPT3",138,0)
 ;                             4 PRO Option
"RTN","BPSRPT3",139,0)
 ;                             3 Backbill
"RTN","BPSRPT3",140,0)
 ;                             2 Real Time Fills
"RTN","BPSRPT3",141,0)
 ;                             1 ALL
"RTN","BPSRPT3",142,0)
 ;                          
"RTN","BPSRPT3",143,0)
 ;    Return Value ->   5 = Resubmision
"RTN","BPSRPT3",144,0)
 ;                      4 = PRO Option
"RTN","BPSRPT3",145,0)
 ;                      3 = Backbill (manually)
"RTN","BPSRPT3",146,0)
 ;                      2 = Real Time Fills (automatically during FINISH)
"RTN","BPSRPT3",147,0)
 ;                      1 = ALL
"RTN","BPSRPT3",148,0)
 ;                      ^ = Exit
"RTN","BPSRPT3",149,0)
 ;
"RTN","BPSRPT3",150,0)
SELRTBCK(DFLT) N DIR,DIRUT,DTOUT,DUOUT,DIROUT,X,Y
"RTN","BPSRPT3",151,0)
 S DFLT=$S($G(DFLT)=2:"Real Time",$G(DFLT)=3:"Backbill",$G(DFLT)=4:"PRO Option",$G(DFLT)=5:"Resubmission",1:"A")
"RTN","BPSRPT3",152,0)
 S DIR(0)="S^R:Real Time Fills;B:Backbill;P:PRO Option;S:ReSubmission;A:ALL"
"RTN","BPSRPT3",153,0)
 S DIR("A")="Display (R)ealTime, (B)ackbills, (P)RO Option, Re(S)ubmission or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT3",154,0)
 D ^DIR
"RTN","BPSRPT3",155,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",156,0)
 S Y=$S(Y="A":1,Y="R":2,Y="B":3,Y="P":4,Y="S":5,1:Y)
"RTN","BPSRPT3",157,0)
 Q Y
"RTN","BPSRPT3",158,0)
 ;
"RTN","BPSRPT3",159,0)
 ; Display Specific (D)rug or Drug (C)lass
"RTN","BPSRPT3",160,0)
 ; 
"RTN","BPSRPT3",161,0)
 ;    Input Variable -> DFLT = 3 Drug Class
"RTN","BPSRPT3",162,0)
 ;                             2 Drug
"RTN","BPSRPT3",163,0)
 ;                             1 ALL
"RTN","BPSRPT3",164,0)
 ;                          
"RTN","BPSRPT3",165,0)
 ;     Return Value ->   3 = Drug Class
"RTN","BPSRPT3",166,0)
 ;                       2 = Drug
"RTN","BPSRPT3",167,0)
 ;                       1 = ALL
"RTN","BPSRPT3",168,0)
 ;                       ^ = Exit
"RTN","BPSRPT3",169,0)
 ;                       
"RTN","BPSRPT3",170,0)
SELDRGAL(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT3",171,0)
 S DFLT=$S($G(DFLT)=2:"Drug",$G(DFLT)=3:"Drug Class",1:"ALL")
"RTN","BPSRPT3",172,0)
 S DIR(0)="S^D:Drug;C:Drug Class;A:ALL"
"RTN","BPSRPT3",173,0)
 S DIR("A")="Display Specific (D)rug or Drug (C)lass or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT3",174,0)
 D ^DIR
"RTN","BPSRPT3",175,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",176,0)
 S Y=$S(Y="A":1,Y="D":2,Y="C":3,1:Y)
"RTN","BPSRPT3",177,0)
 Q Y
"RTN","BPSRPT3",178,0)
 ;
"RTN","BPSRPT3",179,0)
 ; Select Drug
"RTN","BPSRPT3",180,0)
 ; 
"RTN","BPSRPT3",181,0)
 ; Input Variable -> none
"RTN","BPSRPT3",182,0)
 ; 
"RTN","BPSRPT3",183,0)
 ; Return Value -> ptr = pointer to DRUG file (#50)
"RTN","BPSRPT3",184,0)
 ;                   ^ = Exit
"RTN","BPSRPT3",185,0)
 ;                   
"RTN","BPSRPT3",186,0)
SELDRG() N DIC,DIRUT,DUOUT,X,Y
"RTN","BPSRPT3",187,0)
 ;
"RTN","BPSRPT3",188,0)
 ;Prompt for entry
"RTN","BPSRPT3",189,0)
 W ! D SELDRG^BPSRPT6
"RTN","BPSRPT3",190,0)
 ;
"RTN","BPSRPT3",191,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT3",192,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",193,0)
 ;
"RTN","BPSRPT3",194,0)
 ;Check for Valid Entry
"RTN","BPSRPT3",195,0)
 I +Y>0 S Y=+Y
"RTN","BPSRPT3",196,0)
 ;
"RTN","BPSRPT3",197,0)
 Q Y
"RTN","BPSRPT3",198,0)
 ;
"RTN","BPSRPT3",199,0)
 ; Select Drug Class
"RTN","BPSRPT3",200,0)
 ; 
"RTN","BPSRPT3",201,0)
 ; Input Variable -> none
"RTN","BPSRPT3",202,0)
 ; 
"RTN","BPSRPT3",203,0)
 ; Return Value -> ptr = pointer to VA DRUG CLASS file (#50.605)
"RTN","BPSRPT3",204,0)
 ;                   ^ = Exit
"RTN","BPSRPT3",205,0)
 ;
"RTN","BPSRPT3",206,0)
SELDRGCL() N DIC,DIRUT,DUOUT,Y
"RTN","BPSRPT3",207,0)
 ;
"RTN","BPSRPT3",208,0)
 ;Prompt for entry
"RTN","BPSRPT3",209,0)
 ;Using DIC^PSNDI per ICR 4554 - BPS*1*14 ticket 313337
"RTN","BPSRPT3",210,0)
 S DIC="50.605",DIC(0)="QEAMZ" D DIC^PSNDI(DIC,"BPS",.DIC,,,)
"RTN","BPSRPT3",211,0)
 ;
"RTN","BPSRPT3",212,0)
 ;call returns DRUG CLASS CODE, need to extract DRUG CLASSIFICATION
"RTN","BPSRPT3",213,0)
 I +$G(Y)>0 S Y=$P($G(Y(0)),"^",2) I $G(Y)="" S Y=-1
"RTN","BPSRPT3",214,0)
 ;
"RTN","BPSRPT3",215,0)
 ;If nothing was returned set Y="-1" so report knows 
"RTN","BPSRPT3",216,0)
 I $G(Y)=-1 S Y="^"
"RTN","BPSRPT3",217,0)
 ;
"RTN","BPSRPT3",218,0)
 Q Y
"RTN","BPSRPT3",219,0)
 ;
"RTN","BPSRPT3",220,0)
 ; Enter Date Range
"RTN","BPSRPT3",221,0)
 ;
"RTN","BPSRPT3",222,0)
 ; Input Variable -> TYPE = 7 CLOSE REPORT
"RTN","BPSRPT3",223,0)
 ;                          1-6 OTHER REPORTS
"RTN","BPSRPT3",224,0)
 ;
"RTN","BPSRPT3",225,0)
 ; Return Value -> P1^P2
"RTN","BPSRPT3",226,0)
 ; 
"RTN","BPSRPT3",227,0)
 ;           where P1 = From Date
"RTN","BPSRPT3",228,0)
 ;                    = ^ Exit
"RTN","BPSRPT3",229,0)
 ;                 P2 = To Date
"RTN","BPSRPT3",230,0)
 ;                    = blank for Exit
"RTN","BPSRPT3",231,0)
 ;                 
"RTN","BPSRPT3",232,0)
SELDATE(TYPE) N BPSIBDT,DIR,DIRUT,DTOUT,DUOUT,VAL,X,Y
"RTN","BPSRPT3",233,0)
 S TYPE=$S($G(TYPE)=7:"CLOSE",1:"TRANSACTION")
"RTN","BPSRPT3",234,0)
SELDATE1 S VAL="",DIR(0)="DA^:DT:EX",DIR("A")="START WITH "_TYPE_" DATE: ",DIR("B")="T-1"
"RTN","BPSRPT3",235,0)
 W ! D ^DIR
"RTN","BPSRPT3",236,0)
 ;
"RTN","BPSRPT3",237,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT3",238,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S VAL="^"
"RTN","BPSRPT3",239,0)
 ;
"RTN","BPSRPT3",240,0)
 I VAL="" D
"RTN","BPSRPT3",241,0)
 .S $P(VAL,U)=Y
"RTN","BPSRPT3",242,0)
 .S DIR(0)="DA^"_VAL_":DT:EX",DIR("A")="  GO TO "_TYPE_" DATE: ",DIR("B")="T"
"RTN","BPSRPT3",243,0)
 .D ^DIR
"RTN","BPSRPT3",244,0)
 .;
"RTN","BPSRPT3",245,0)
 .;Check for "^", timeout, or blank entry
"RTN","BPSRPT3",246,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S VAL="^" Q
"RTN","BPSRPT3",247,0)
 .;
"RTN","BPSRPT3",248,0)
 .;Define Entry
"RTN","BPSRPT3",249,0)
 .S $P(VAL,U,2)=Y
"RTN","BPSRPT3",250,0)
 ;
"RTN","BPSRPT3",251,0)
 Q VAL
"RTN","BPSRPT3",252,0)
 ;
"RTN","BPSRPT3",253,0)
 ; Select to Include Open or Closed or All claims
"RTN","BPSRPT3",254,0)
 ; 
"RTN","BPSRPT3",255,0)
 ; Input Variable -> DFLT = 0 = All
"RTN","BPSRPT3",256,0)
 ;                          1 = Closed
"RTN","BPSRPT3",257,0)
 ;                          2 = Open
"RTN","BPSRPT3",258,0)
 ; 
"RTN","BPSRPT3",259,0)
 ; Return Value -> 0 = All, 1 = Closed, 2 = Open
"RTN","BPSRPT3",260,0)
SELOPCL(DFLT) N DIC,DIR,DIRUT,DUOUT,X,Y
"RTN","BPSRPT3",261,0)
 ;
"RTN","BPSRPT3",262,0)
 S DFLT=$S($G(DFLT)=1:"C",$G(DFLT)=2:"O",1:"A")
"RTN","BPSRPT3",263,0)
 S DIR(0)="S^O:OPEN;C:CLOSED;A:ALL"
"RTN","BPSRPT3",264,0)
 S DIR("A")="Include (O)pen, (C)losed, or (A)ll Claims",DIR("B")=DFLT
"RTN","BPSRPT3",265,0)
 D ^DIR
"RTN","BPSRPT3",266,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",267,0)
 ;
"RTN","BPSRPT3",268,0)
 S Y=$S(Y="C":1,Y="O":2,1:0)
"RTN","BPSRPT3",269,0)
 Q Y
"RTN","BPSRPT3",270,0)
 ;
"RTN","BPSRPT3",271,0)
SELELIG1() ;
"RTN","BPSRPT3",272,0)
 ; Select multiple Eligibilities
"RTN","BPSRPT3",273,0)
 ; 
"RTN","BPSRPT3",274,0)
 ; Input Variable -> none
"RTN","BPSRPT3",275,0)
 ; Return Value   -> 0: All, 1: Selected Eligibilities; '^' = Exit
"RTN","BPSRPT3",276,0)
 ;                                       
"RTN","BPSRPT3",277,0)
 ; Output Variable -> BPELIG1 = 1 - One or More Pharmacies Selected
"RTN","BPSRPT3",278,0)
 ;                            = 0 - User Entered 'ALL'
"RTN","BPSRPT3",279,0)
 ;                            = "^" - User quit
"RTN","BPSRPT3",280,0)
 ;                            
"RTN","BPSRPT3",281,0)
 ; If BPELIG1 = 1 then the BPELIG1 array will be defined where:
"RTN","BPSRPT3",282,0)
 ;    BPELIG1("C")="CHAMPVA"
"RTN","BPSRPT3",283,0)
 ;    BPELIG1("T")="TRICARE"
"RTN","BPSRPT3",284,0)
 ;    BPELIG1("V")="VETERAN"
"RTN","BPSRPT3",285,0)
 ;
"RTN","BPSRPT3",286,0)
 ;
"RTN","BPSRPT3",287,0)
 ;Reset BPELIG1 array
"RTN","BPSRPT3",288,0)
 K BPELIG1
"RTN","BPSRPT3",289,0)
 N DIR,DTOUT,DUOUT,DIRUT,DIROUT,X,Y,P
"RTN","BPSRPT3",290,0)
 ;
"RTN","BPSRPT3",291,0)
 ;First see if they want to enter individual eligibilities or ALL
"RTN","BPSRPT3",292,0)
 S DIR(0)="S^E:ELIGIBILITY;A:ALL"
"RTN","BPSRPT3",293,0)
 S DIR("A")="Select Certain (E)ligibilities or (A)LL"
"RTN","BPSRPT3",294,0)
 S DIR("B")="ALL"
"RTN","BPSRPT3",295,0)
 S DIR("L",1)="Select one of the following:"
"RTN","BPSRPT3",296,0)
 S DIR("L",2)=""
"RTN","BPSRPT3",297,0)
 S DIR("L",3)="     E         ELIGIBILITY"
"RTN","BPSRPT3",298,0)
 S DIR("L",4)="     A         ALL"
"RTN","BPSRPT3",299,0)
 D ^DIR K DIR
"RTN","BPSRPT3",300,0)
 ;
"RTN","BPSRPT3",301,0)
 ;Check for "^" or timeout
"RTN","BPSRPT3",302,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",303,0)
 ;
"RTN","BPSRPT3",304,0)
 ; Set BPELIG1 and quit unless user wants to select individual eligibilities
"RTN","BPSRPT3",305,0)
 S BPELIG1=$S(Y="A":0,Y="^":"^",1:1)
"RTN","BPSRPT3",306,0)
 I BPELIG1'=1 Q BPELIG1
"RTN","BPSRPT3",307,0)
 ;
"RTN","BPSRPT3",308,0)
 ;Allow user to select multiple eligibilities
"RTN","BPSRPT3",309,0)
 F  D  Q:Y="^"!(Y="")
"RTN","BPSRPT3",310,0)
 .;
"RTN","BPSRPT3",311,0)
 .;Prompt for entry
"RTN","BPSRPT3",312,0)
 .K DIR
"RTN","BPSRPT3",313,0)
 .S DIR(0)="SO^C:CHAMPVA;T:TRICARE;V:VETERAN"
"RTN","BPSRPT3",314,0)
 .S DIR("A")="Select Eligibility"
"RTN","BPSRPT3",315,0)
 .D ^DIR
"RTN","BPSRPT3",316,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^" Q
"RTN","BPSRPT3",317,0)
 .;
"RTN","BPSRPT3",318,0)
 .;Check for blank entry, quit if no previous selections
"RTN","BPSRPT3",319,0)
 .I $G(Y)="" S Y=$S($D(BPELIG1)>9:"",1:"^") Q
"RTN","BPSRPT3",320,0)
 .;
"RTN","BPSRPT3",321,0)
 .; Add entry to array or handle duplicate entries
"RTN","BPSRPT3",322,0)
 .I '$D(BPELIG1(Y)) S BPELIG1(Y)=Y(0),BPELIG1("B",Y(0),Y)=""
"RTN","BPSRPT3",323,0)
 .E  D  I Y="^" Q
"RTN","BPSRPT3",324,0)
 ..;Already in the array, so ask whether to delete
"RTN","BPSRPT3",325,0)
 ..N P
"RTN","BPSRPT3",326,0)
 ..S P=Y_"^"_Y(0)  ;Save Original Value
"RTN","BPSRPT3",327,0)
 ..S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_$P(P,U,2)_" from your list?"
"RTN","BPSRPT3",328,0)
 ..S DIR("B")="NO"
"RTN","BPSRPT3",329,0)
 ..D ^DIR
"RTN","BPSRPT3",330,0)
 ..I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^" Q
"RTN","BPSRPT3",331,0)
 ..I Y="Y" K BPELIG1($P(P,U,1)),BPELIG1("B",$P(P,U,2),$P(P,U,1))
"RTN","BPSRPT3",332,0)
 ..S Y=P  ;Restore Original Value
"RTN","BPSRPT3",333,0)
 ..K P
"RTN","BPSRPT3",334,0)
 .;
"RTN","BPSRPT3",335,0)
 .;Display a list of selected eligibilities
"RTN","BPSRPT3",336,0)
 .I $D(BPELIG1)>9 D
"RTN","BPSRPT3",337,0)
 ..N X
"RTN","BPSRPT3",338,0)
 ..W !,?2,"Selected:"
"RTN","BPSRPT3",339,0)
 ..S X="" F  S X=$O(BPELIG1("B",X)) Q:X=""  W !,?10,X
"RTN","BPSRPT3",340,0)
 ..K X
"RTN","BPSRPT3",341,0)
 .Q
"RTN","BPSRPT3",342,0)
 ;
"RTN","BPSRPT3",343,0)
 ; Reset BPELIG1 array if user exited
"RTN","BPSRPT3",344,0)
 I Y="^" K BPELIG1 S BPELIG1="^" Q "^"
"RTN","BPSRPT3",345,0)
 ;
"RTN","BPSRPT3",346,0)
 ; Deleted 'x-ref' as we don't need to return that
"RTN","BPSRPT3",347,0)
 K BPELIG1("B")
"RTN","BPSRPT3",348,0)
 ; 
"RTN","BPSRPT3",349,0)
 Q 1
"RTN","BPSRPT3",350,0)
 ;
"RTN","BPSRPT3",351,0)
SELALRC() ; 
"RTN","BPSRPT3",352,0)
 ; Display Most (R)ecent or (A)ll
"RTN","BPSRPT3",353,0)
 ;
"RTN","BPSRPT3",354,0)
 ; Return Value ->   A: All
"RTN","BPSRPT3",355,0)
 ;                   R: Most Recent
"RTN","BPSRPT3",356,0)
 ;                   ^: Exit
"RTN","BPSRPT3",357,0)
 ;
"RTN","BPSRPT3",358,0)
 N DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","BPSRPT3",359,0)
 ;
"RTN","BPSRPT3",360,0)
 S DIR(0)="S^R:Most Recent;A:ALL"
"RTN","BPSRPT3",361,0)
 S DIR("A")="Select Most (R)ecent or (A)ll"
"RTN","BPSRPT3",362,0)
 S DIR("B")="MOST RECENT"
"RTN","BPSRPT3",363,0)
 S DIR("L",1)="Select one of the following:"
"RTN","BPSRPT3",364,0)
 S DIR("L",2)=""
"RTN","BPSRPT3",365,0)
 S DIR("L",3)="     R         Most Recent Transaction Only"
"RTN","BPSRPT3",366,0)
 S DIR("L",4)="     A         ALL Transactions (will list the Rx/Fill each time resubmitted)"
"RTN","BPSRPT3",367,0)
 D ^DIR K DIR
"RTN","BPSRPT3",368,0)
 ;
"RTN","BPSRPT3",369,0)
 ;Check for "^" or timeout, 
"RTN","BPSRPT3",370,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",371,0)
 Q Y
"RTN","BPSRPT3",372,0)
 ;
"RTN","BPSRPT3",373,0)
SELNBSTS() ; 
"RTN","BPSRPT3",374,0)
 ; Select the Non-Billable Status Reason
"RTN","BPSRPT3",375,0)
 ; 
"RTN","BPSRPT3",376,0)
 ; Input Variable -> None
"RTN","BPSRPT3",377,0)
 ; Return Value   -> 0: All, 1: Selected Non-Billable Status; '^' = Exit
"RTN","BPSRPT3",378,0)
 ;                                       
"RTN","BPSRPT3",379,0)
 ; Output Variable -> BPNBSTS = 1 - One or More Non-Billable Statuses Selected
"RTN","BPSRPT3",380,0)
 ;                            = 0 - User Entered 'ALL'
"RTN","BPSRPT3",381,0)
 ;                            = "" - User quit
"RTN","BPSRPT3",382,0)
 ;                            
"RTN","BPSRPT3",383,0)
 ; If BPNBSTS = 1 then the BPNBSTS array will be defined where:
"RTN","BPSRPT3",384,0)
 ;    BPNBSTS(Non-Billable Status IEN)=Non-Billable Status Reason
"RTN","BPSRPT3",385,0)
 ;
"RTN","BPSRPT3",386,0)
 ;Reset BPNBSTS array
"RTN","BPSRPT3",387,0)
 K BPNBSTS
"RTN","BPSRPT3",388,0)
 N DIR,DTOUT,DUOUT,DIRUT,DIROUT,X,Y,P,DIC
"RTN","BPSRPT3",389,0)
 ;
"RTN","BPSRPT3",390,0)
 ;First see if they want to enter individual eligibilities or ALL
"RTN","BPSRPT3",391,0)
 S DIR(0)="S^S:NON-BILLABLE STATUS;A:ALL"
"RTN","BPSRPT3",392,0)
 S DIR("A")="Select Certain Non-Billable (S)tatus or (A)ll"
"RTN","BPSRPT3",393,0)
 S DIR("B")="ALL"
"RTN","BPSRPT3",394,0)
 S DIR("L",1)="Select one of the following:"
"RTN","BPSRPT3",395,0)
 S DIR("L",2)=""
"RTN","BPSRPT3",396,0)
 S DIR("L",3)="     S         NON-BILLABLE STATUS"
"RTN","BPSRPT3",397,0)
 S DIR("L",4)="     A         ALL"
"RTN","BPSRPT3",398,0)
 D ^DIR K DIR
"RTN","BPSRPT3",399,0)
 ;
"RTN","BPSRPT3",400,0)
 ;Check for "^" or timeout, otherwise define BPNBSTS
"RTN","BPSRPT3",401,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT3",402,0)
 S BPNBSTS=$S(Y="A":0,Y="^":"^",1:1)
"RTN","BPSRPT3",403,0)
 I BPNBSTS'=1 Q BPNBSTS
"RTN","BPSRPT3",404,0)
 ;
"RTN","BPSRPT3",405,0)
 ;Allow user to select multiple non-billable statuses
"RTN","BPSRPT3",406,0)
 F  D  Q:Y="^"!(Y="")
"RTN","BPSRPT3",407,0)
 .;Prompt for entry - ICR 6136
"RTN","BPSRPT3",408,0)
 .K X
"RTN","BPSRPT3",409,0)
 .S DIC(0)="QEAM",DIC=366.17,DIC("A")="Select Non-Billable Reason: "
"RTN","BPSRPT3",410,0)
 .W ! D ^DIC
"RTN","BPSRPT3",411,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^" Q
"RTN","BPSRPT3",412,0)
 .;
"RTN","BPSRPT3",413,0)
 .;Check for blank entry, quit if no previous selections
"RTN","BPSRPT3",414,0)
 .I $G(Y)=-1 S Y=$S($D(BPNBSTS)>9:"",1:"^") Q
"RTN","BPSRPT3",415,0)
 .;
"RTN","BPSRPT3",416,0)
 .; Add entry to array or handle duplicate entries
"RTN","BPSRPT3",417,0)
 .I '$D(BPNBSTS($P(Y,U,1))) S BPNBSTS($P(Y,U,1))=$P(Y,U,2),BPNBSTS("B",$P(Y,U,2),$P(Y,U,1))=""
"RTN","BPSRPT3",418,0)
 .E  D  I Y="^" Q
"RTN","BPSRPT3",419,0)
 ..;Already in the array, so ask whether to delete
"RTN","BPSRPT3",420,0)
 ..N P
"RTN","BPSRPT3",421,0)
 ..S P=Y  ;Save Original Value
"RTN","BPSRPT3",422,0)
 ..S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_$P(P,U,2)_" from your list?"
"RTN","BPSRPT3",423,0)
 ..S DIR("B")="NO"
"RTN","BPSRPT3",424,0)
 ..D ^DIR
"RTN","BPSRPT3",425,0)
 ..I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^" Q
"RTN","BPSRPT3",426,0)
 ..I Y="Y" K BPNBSTS($P(P,U,1)),BPNBSTS("B",$P(P,U,2),$P(P,U,1))
"RTN","BPSRPT3",427,0)
 ..S Y=P  ;Restore Original Value
"RTN","BPSRPT3",428,0)
 ..K P
"RTN","BPSRPT3",429,0)
 .;
"RTN","BPSRPT3",430,0)
 .;Display a list of selected values
"RTN","BPSRPT3",431,0)
 .I $D(BPNBSTS)>9 D
"RTN","BPSRPT3",432,0)
 ..N X
"RTN","BPSRPT3",433,0)
 ..W !,?2,"Selected:"
"RTN","BPSRPT3",434,0)
 ..S X="" F  S X=$O(BPNBSTS("B",X)) Q:X=""  W !,?10,X
"RTN","BPSRPT3",435,0)
 ..K X
"RTN","BPSRPT3",436,0)
 .Q
"RTN","BPSRPT3",437,0)
 ;
"RTN","BPSRPT3",438,0)
 ; Reset BPNBSTS array if user exited
"RTN","BPSRPT3",439,0)
 I Y="^" K BPNBSTS S BPNBSTS="^" Q "^"
"RTN","BPSRPT3",440,0)
 ;
"RTN","BPSRPT3",441,0)
 ; Deleted 'x-ref' as we don't need to return that
"RTN","BPSRPT3",442,0)
 K BPNBSTS("B")
"RTN","BPSRPT3",443,0)
 ; 
"RTN","BPSRPT3",444,0)
 Q 1
"RTN","BPSRPT7")
0^55^B164643275
"RTN","BPSRPT7",1,0)
BPSRPT7 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT7",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8,10,11,19,20**;JUN 2004;Build 27
"RTN","BPSRPT7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT7",4,0)
 ;
"RTN","BPSRPT7",5,0)
 Q
"RTN","BPSRPT7",6,0)
 ;
"RTN","BPSRPT7",7,0)
 ;Routine to Display the Reports (Continued)
"RTN","BPSRPT7",8,0)
 ;
"RTN","BPSRPT7",9,0)
 ; Input Variables -> BPCLM = Array of report data by date
"RTN","BPSRPT7",10,0)
 ;                   BPDIV,BPSUMDET,GTOT
"RTN","BPSRPT7",11,0)
 ; Returned Value -> Cumulative Grand Totals
"RTN","BPSRPT7",12,0)
 ; 
"RTN","BPSRPT7",13,0)
PTBDT(BPDIV,BPSUMDET,BPCLM,GTOT) N DIFF,I,NP,RDT,TOT,X
"RTN","BPSRPT7",14,0)
 ;
"RTN","BPSRPT7",15,0)
 ;Loop through compiled array and display
"RTN","BPSRPT7",16,0)
 S TOT=""
"RTN","BPSRPT7",17,0)
 S RDT="" F  S RDT=$O(BPCLM(RDT)) Q:RDT=""  D  Q:BPQ
"RTN","BPSRPT7",18,0)
 .S NP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",19,0)
 .S X=$G(BPCLM(RDT))
"RTN","BPSRPT7",20,0)
 .;
"RTN","BPSRPT7",21,0)
 .;Print Details - Report
"RTN","BPSRPT7",22,0)
 .I BPSUMDET=0,'BPEXCEL D
"RTN","BPSRPT7",23,0)
 ..W !,$$DATTIM^BPSRPT1(RDT) ;Date
"RTN","BPSRPT7",24,0)
 ..W ?15,$J(+$P(X,U),17) ;#Claims
"RTN","BPSRPT7",25,0)
 ..W ?33,$J(+$P(X,U,2),17,2)  ;Amount Submitted
"RTN","BPSRPT7",26,0)
 ..W ?51,$J(+$P(X,U,3),17,2)  ;Returned Rejected
"RTN","BPSRPT7",27,0)
 ..W ?69,$J(+$P(X,U,4),17,2)  ;Returned Payable
"RTN","BPSRPT7",28,0)
 ..W ?87,$J(+$P(X,U,5),17,2)  ;Amount to Receive
"RTN","BPSRPT7",29,0)
 ..;
"RTN","BPSRPT7",30,0)
 ..;Difference
"RTN","BPSRPT7",31,0)
 ..S DIFF=+$P(X,U,4)-$P(X,U,5)
"RTN","BPSRPT7",32,0)
 ..I DIFF<0 S DIFF="<"_$TR($J(-DIFF,15,2)," ")_">" W ?117,$J(DIFF,15)
"RTN","BPSRPT7",33,0)
 ..E  W ?116,$J(DIFF,15,2)
"RTN","BPSRPT7",34,0)
 ..;
"RTN","BPSRPT7",35,0)
 ..;Print Details - Excel
"RTN","BPSRPT7",36,0)
 .I BPSUMDET=0,BPEXCEL D
"RTN","BPSRPT7",37,0)
 ..;
"RTN","BPSRPT7",38,0)
 ..;Division
"RTN","BPSRPT7",39,0)
 ..W !,$S(BPDIV=0:"BLANK",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV),U
"RTN","BPSRPT7",40,0)
 ..W $$DATTIM^BPSRPT1(RDT),U  ;Date
"RTN","BPSRPT7",41,0)
 ..W +$P(X,U),U ;#Claims
"RTN","BPSRPT7",42,0)
 ..W $TR($J(+$P(X,U,2),17,2)," "),U  ;Amount Submitted
"RTN","BPSRPT7",43,0)
 ..W $TR($J(+$P(X,U,3),17,2)," "),U  ;Returned Rejected
"RTN","BPSRPT7",44,0)
 ..W $TR($J(+$P(X,U,4),17,2)," "),U  ;Returned Payable
"RTN","BPSRPT7",45,0)
 ..W $TR($J(+$P(X,U,5),17,2)," "),U  ;Amount to Receive
"RTN","BPSRPT7",46,0)
 ..;
"RTN","BPSRPT7",47,0)
 ..;Difference
"RTN","BPSRPT7",48,0)
 ..S DIFF=+$P(X,U,4)-$P(X,U,5)
"RTN","BPSRPT7",49,0)
 ..W $TR($J(DIFF,15,2)," ")
"RTN","BPSRPT7",50,0)
 .;
"RTN","BPSRPT7",51,0)
 .;Save Totals
"RTN","BPSRPT7",52,0)
 .F I=1:1:5 S $P(TOT,U,I)=$P(TOT,U,I)+$P(X,U,I),$P(GTOT,U,I)=$P($G(GTOT),U,I)+$P(X,U,I)
"RTN","BPSRPT7",53,0)
 ;
"RTN","BPSRPT7",54,0)
 ;Print Totals
"RTN","BPSRPT7",55,0)
 Q:BPEXCEL
"RTN","BPSRPT7",56,0)
 Q:BPQ  S NP=$$CHKP^BPSRPT5(2) Q:BPQ
"RTN","BPSRPT7",57,0)
 D ULINE^BPSRPT5("-")
"RTN","BPSRPT7",58,0)
 W !,"TOTALS"
"RTN","BPSRPT7",59,0)
 W ?15,$J(+$P(TOT,U),17)
"RTN","BPSRPT7",60,0)
 W ?33,$J(+$P(TOT,U,2),17,2)
"RTN","BPSRPT7",61,0)
 W ?51,$J(+$P(TOT,U,3),17,2)
"RTN","BPSRPT7",62,0)
 W ?69,$J(+$P(TOT,U,4),17,2)
"RTN","BPSRPT7",63,0)
 W ?87,$J(+$P(TOT,U,5),17,2)
"RTN","BPSRPT7",64,0)
 S X=$S((+$P(TOT,U,4))=0:0,1:(+$P(TOT,U,5))/(+$P(TOT,U,4)))
"RTN","BPSRPT7",65,0)
 S DIFF=+$P(TOT,U,4)-$P(TOT,U,5)
"RTN","BPSRPT7",66,0)
 I DIFF<0 S DIFF="<"_$TR($J(-DIFF,15,2)," ")_">" W ?117,$J(DIFF,15)
"RTN","BPSRPT7",67,0)
 E  W ?116,$J(DIFF,15,2)
"RTN","BPSRPT7",68,0)
 Q
"RTN","BPSRPT7",69,0)
 ;
"RTN","BPSRPT7",70,0)
 ;Print Grand Totals - Report 6
"RTN","BPSRPT7",71,0)
 ;
"RTN","BPSRPT7",72,0)
PGTOT6(GTOT) N DIFF,NP,X
"RTN","BPSRPT7",73,0)
 Q:BPQ  S NP=$$CHKP^BPSRPT5(2) Q:BPQ
"RTN","BPSRPT7",74,0)
 D ULINE^BPSRPT5("-")
"RTN","BPSRPT7",75,0)
 W !,"GRAND TOTALS"
"RTN","BPSRPT7",76,0)
 W ?15,$J(+$P(GTOT,U),17)
"RTN","BPSRPT7",77,0)
 W ?33,$J(+$P(GTOT,U,2),17,2)
"RTN","BPSRPT7",78,0)
 W ?51,$J(+$P(GTOT,U,3),17,2)
"RTN","BPSRPT7",79,0)
 W ?69,$J(+$P(GTOT,U,4),17,2)
"RTN","BPSRPT7",80,0)
 W ?87,$J(+$P(GTOT,U,5),17,2)
"RTN","BPSRPT7",81,0)
 S X=$S((+$P(GTOT,U,4))=0:0,1:(+$P(GTOT,U,5))/(+$P(GTOT,U,4)))
"RTN","BPSRPT7",82,0)
 S DIFF=+$P(GTOT,U,4)-$P(GTOT,U,5)
"RTN","BPSRPT7",83,0)
 I DIFF<0 S DIFF="<"_$TR($J(-DIFF,15,2)," ")_">" W ?117,$J(DIFF,15)
"RTN","BPSRPT7",84,0)
 E  W ?116,$J(DIFF,15,2)
"RTN","BPSRPT7",85,0)
 Q
"RTN","BPSRPT7",86,0)
 ;
"RTN","BPSRPT7",87,0)
 ;Print Grand Totals - Reports 1,2,3,4,5,7,8,9
"RTN","BPSRPT7",88,0)
 ;
"RTN","BPSRPT7",89,0)
PGTOT(BPRTYPE,BPGBIL,BPGINS,BPGCOLL,BPGCNT,BPGELTM,BPRICE) ;
"RTN","BPSRPT7",90,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT7",91,0)
 .W !!,?83,"----------",?105,"----------",?122,"----------"
"RTN","BPSRPT7",92,0)
 .W !,"GRAND TOTALS",?83,$J(BPGBIL,10,2),?105,$J(BPGINS,10,2),?122,$J(BPGCOLL,10,2)
"RTN","BPSRPT7",93,0)
 .W !,"COUNT",?83,$J(BPGCNT,10),?105,$J(BPGCNT,10),?122,$J(BPGCNT,10)
"RTN","BPSRPT7",94,0)
 .W:BPGCNT !,"MEAN",?83,$J(BPGBIL/BPGCNT,10,2),?105,$J(BPGINS/BPGCNT,10,2),?122,$J(BPGCOLL/BPGCNT,10,2)
"RTN","BPSRPT7",95,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT7",96,0)
 .W !!,?100,"----------",?122,"----------"
"RTN","BPSRPT7",97,0)
 .W !,"GRAND TOTALS",?100,$J(BPGBIL,10,2),?122,$J(BPGINS,10,2)
"RTN","BPSRPT7",98,0)
 .W !,"COUNT",?100,$J(BPGCNT,10),?122,$J(BPGCNT,10)
"RTN","BPSRPT7",99,0)
 .W:BPGCNT !,"MEAN",?100,$J(BPGBIL/BPGCNT,10,2),?122,$J(BPGINS/BPGCNT,10,2)
"RTN","BPSRPT7",100,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT7",101,0)
 .W !!,?41,"----------"
"RTN","BPSRPT7",102,0)
 .W !,"GRAND TOTALS",?41,$J(BPGBIL,10,2)
"RTN","BPSRPT7",103,0)
 .W !,"COUNT",?41,$J(BPGCNT,10)
"RTN","BPSRPT7",104,0)
 .W:BPGCNT !,"MEAN",?41,$J(BPGBIL/BPGCNT,10,2)
"RTN","BPSRPT7",105,0)
 I (BPRTYPE=5) D  Q
"RTN","BPSRPT7",106,0)
 .W !!,"GRAND TOTALS (ALL DIVISIONS)",?65,"---------------"
"RTN","BPSRPT7",107,0)
 .W !,"TOTAL CLAIMS",?65,$J(BPGCNT,15)
"RTN","BPSRPT7",108,0)
 .W !,"AVERAGE ELAPSED TIME PER CLAIM",?65,$J($S(BPGCNT=0:"0",1:(BPGELTM\BPGCNT)),15)
"RTN","BPSRPT7",109,0)
 I (BPRTYPE=7) D  Q
"RTN","BPSRPT7",110,0)
 .W !!,"GRAND TOTALS (ALL DIVISIONS) BY BILLER"
"RTN","BPSRPT7",111,0)
 .N BPBILR,BPDIV S BPDIV="ALL DIVISIONS"
"RTN","BPSRPT7",112,0)
 .S BPBILR="" F  S BPBILR=$O(BPGCNT(BPBILR)) Q:BPBILR=""  D  Q:BPQ
"RTN","BPSRPT7",113,0)
 ..S NP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",114,0)
 ..W !,?3,BPBILR,?65,$J($G(BPGCNT(BPBILR)),5)
"RTN","BPSRPT7",115,0)
 .Q:$G(BPQ)
"RTN","BPSRPT7",116,0)
 .W !,?65,"-----"
"RTN","BPSRPT7",117,0)
 .W !,"CLOSED CLAIMS GRAND TOTAL",?65,$J(BPGCNT,5)
"RTN","BPSRPT7",118,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT7",119,0)
 .W !!,?78,"----------",?100,"----------",?122,"----------"
"RTN","BPSRPT7",120,0)
 .W !,"GRAND TOTALS",?78,$J(BPGBIL,10,2),?100,$J(BPGINS,10,2),?122,$J(BPGCOLL,10,2)
"RTN","BPSRPT7",121,0)
 .W !,?4,$J($P(BPRICE,U,3),10,2),?23,$J($P(BPRICE,U,4),10,2),?38,$J($P(BPRICE,U,5),10,2),?56,$J($P(BPRICE,U,6),10,2),?81,$J($P(BPRICE,U,7),10,2),?96,$J($P(BPRICE,U,2),10,2),?111,$J($P(BPRICE,U),10,2)
"RTN","BPSRPT7",122,0)
 .W !,"COUNT",?78,$J(BPGCNT,10),?100,$J(BPGCNT,10),?122,$J(BPGCNT,10)
"RTN","BPSRPT7",123,0)
 .W !,?4,$J(BPGCNT,10),?23,$J(BPGCNT,10),?38,$J(BPGCNT,10),?56,$J(BPGCNT,10),?81,$J(BPGCNT,10),?96,$J(BPGCNT,10),?111,$J(BPGCNT,10)
"RTN","BPSRPT7",124,0)
 .W:BPGCNT !,"MEAN",?78,$J(BPGBIL/BPGCNT,10,2),?100,$J(BPGINS/BPGCNT,10,2),?122,$J(BPGCOLL/BPGCNT,10,2)
"RTN","BPSRPT7",125,0)
 .W !,?4,$J($P(BPRICE,U,3)/BPGCNT,10,2),?23,$J($P(BPRICE,U,4)/BPGCNT,10,2),?38,$J($P(BPRICE,U,5)/BPGCNT,10,2)
"RTN","BPSRPT7",126,0)
 .W ?56,$J($P(BPRICE,U,6)/BPGCNT,10,2),?81,$J($P(BPRICE,U,7)/BPGCNT,10,2),?96,$J($P(BPRICE,U,2)/BPGCNT,10,2),?111,$J($P(BPRICE,U)/BPGCNT,10,2)
"RTN","BPSRPT7",127,0)
 ;
"RTN","BPSRPT7",128,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT7",129,0)
 .W !!,?84,"----------"
"RTN","BPSRPT7",130,0)
 .W !,"GRAND TOTALS",?84,$J(BPGBIL,10,2)
"RTN","BPSRPT7",131,0)
 .W !,"COUNT",?84,$J(BPGCNT,10)
"RTN","BPSRPT7",132,0)
 .W:BPGCNT !,"MEAN",?84,$J(BPGBIL/BPGCNT,10,2)
"RTN","BPSRPT7",133,0)
 Q
"RTN","BPSRPT7",134,0)
 ;
"RTN","BPSRPT7",135,0)
 ;Print Report Insurance Subtotals
"RTN","BPSRPT7",136,0)
 ;
"RTN","BPSRPT7",137,0)
ITOT(BPRTYPE,BPDIV,BPGRPLAN,BPTBIL,BPTINS,BPTCOLL,BPCNT,BPRICE) N BPNP
"RTN","BPSRPT7",138,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT7",139,0)
 .W !!,?83,"----------",?105,"----------",?122,"----------"
"RTN","BPSRPT7",140,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?83,$J(BPTBIL,10,2),?105,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT7",141,0)
 .W !,"COUNT",?83,$J(BPCNT,10),?105,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",142,0)
 .W:BPCNT !,"MEAN",?83,$J(BPTBIL/BPCNT,10,2),?105,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT7",143,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT7",144,0)
 .W !!,?100,"----------",?122,"----------"
"RTN","BPSRPT7",145,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?100,$J(BPTBIL,10,2),?122,$J(BPTINS,10,2)
"RTN","BPSRPT7",146,0)
 .W !,"COUNT",?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",147,0)
 .W:BPCNT !,"MEAN",?100,$J(BPTBIL/BPCNT,10,2),?122,$J(BPTINS/BPCNT,10,2)
"RTN","BPSRPT7",148,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT7",149,0)
 .W !!,?41,"----------"
"RTN","BPSRPT7",150,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,22),?41,$J(BPTBIL,10,2)
"RTN","BPSRPT7",151,0)
 .W !,"COUNT",?41,$J(BPCNT,10)
"RTN","BPSRPT7",152,0)
 .W:BPCNT !,"MEAN",?41,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT7",153,0)
 I (BPRTYPE=7) D  Q
"RTN","BPSRPT7",154,0)
 .W !!,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50)
"RTN","BPSRPT7",155,0)
 .N BPBILR
"RTN","BPSRPT7",156,0)
 .S BPBILR="" F  S BPBILR=$O(BPCNT(BPBILR)) Q:BPBILR=""  D  Q:BPQ
"RTN","BPSRPT7",157,0)
 ..S BPNP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",158,0)
 ..W !,?3,BPBILR,?65,$J($G(BPCNT(BPBILR)),5)
"RTN","BPSRPT7",159,0)
 .Q:$G(BPQ)
"RTN","BPSRPT7",160,0)
 .W !,?65,"-----"
"RTN","BPSRPT7",161,0)
 .W !,"CLOSED CLAIMS SUBTOTAL",?65,$J(BPCNT,5)
"RTN","BPSRPT7",162,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT7",163,0)
 .W !!,?78,"----------",?100,"----------",?122,"----------"
"RTN","BPSRPT7",164,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?78,$J(BPTBIL,10,2),?100,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT7",165,0)
 .W !,?4,$J($P(BPRICE,U,3),10,2),?23,$J($P(BPRICE,U,4),10,2),?38,$J($P(BPRICE,U,5),10,2),?56,$J($P(BPRICE,U,6),10,2),?81,$J($P(BPRICE,U,7),10,2),?96,$J($P(BPRICE,U,2),10,2),?111,$J($P(BPRICE,U),10,2)
"RTN","BPSRPT7",166,0)
 .W !,"COUNT",?78,$J(BPCNT,10),?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",167,0)
 .W !,?4,$J(BPCNT,10),?23,$J(BPCNT,10),?38,$J(BPCNT,10),?56,$J(BPCNT,10),?81,$J(BPCNT,10),?96,$J(BPCNT,10),?111,$J(BPCNT,10)
"RTN","BPSRPT7",168,0)
 .W:BPCNT !,"MEAN",?78,$J(BPTBIL/BPCNT,10,2),?100,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT7",169,0)
 .W !,?4,$J($P(BPRICE,U,3)/BPCNT,10,2),?23,$J($P(BPRICE,U,4)/BPCNT,10,2),?38,$J($P(BPRICE,U,5)/BPCNT,10,2),?56,$J($P(BPRICE,U,6)/BPCNT,10,2),?81,$J($P(BPRICE,U,7)/BPCNT,10,2),?96,$J($P(BPRICE,U,2)/BPCNT,10,2),?111,$J($P(BPRICE,U)/BPCNT,10,2)
"RTN","BPSRPT7",170,0)
 ;
"RTN","BPSRPT7",171,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT7",172,0)
 .W !!,?84,"----------"
"RTN","BPSRPT7",173,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?84,$J(BPTBIL,10,2)
"RTN","BPSRPT7",174,0)
 .W !,"COUNT",?84,$J(BPCNT,10)
"RTN","BPSRPT7",175,0)
 .W:BPCNT !,"MEAN",?84,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT7",176,0)
 Q
"RTN","BPSRPT7",177,0)
 ;
"RTN","BPSRPT7",178,0)
 ;Get Close Reason
"RTN","BPSRPT7",179,0)
 ;
"RTN","BPSRPT7",180,0)
 ; Input Variable -> BP59 = ptr to BPS TRANSACTIONS
"RTN","BPSRPT7",181,0)
 ; Returned Value -> Claim Close Reason
"RTN","BPSRPT7",182,0)
 ;
"RTN","BPSRPT7",183,0)
CLRSN(BP59) N BP02,CIEN,CL
"RTN","BPSRPT7",184,0)
 S CL=""
"RTN","BPSRPT7",185,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT7",186,0)
 S CIEN=+$P($G(^BPSC(BP02,900)),U,4)
"RTN","BPSRPT7",187,0)
 I CIEN'=0 S CL=$$GETCLR^BPSRPT6(CIEN)
"RTN","BPSRPT7",188,0)
 Q CIEN_"^"_CL
"RTN","BPSRPT7",189,0)
 ;
"RTN","BPSRPT7",190,0)
 ;Get Reversal Reason
"RTN","BPSRPT7",191,0)
 ;
"RTN","BPSRPT7",192,0)
 ; Input Variable -> BP59 = ptr to BPS TRANSACTIONS
"RTN","BPSRPT7",193,0)
 ; Returned Value -> Claim Reversal Reason
"RTN","BPSRPT7",194,0)
 ;
"RTN","BPSRPT7",195,0)
RVSRSN(BP59) Q $P($G(^BPST(BP59,4)),U,4)
"RTN","BPSRPT7",196,0)
 ;
"RTN","BPSRPT7",197,0)
 ;Return the Billed Amount
"RTN","BPSRPT7",198,0)
 ;
"RTN","BPSRPT7",199,0)
BILLED(BP59) ;
"RTN","BPSRPT7",200,0)
 Q +$P($G(^BPST(BP59,5)),U,5)
"RTN","BPSRPT7",201,0)
 ;
"RTN","BPSRPT7",202,0)
 ;Return the Transaction Type - SUBMIT or REVERSAL
"RTN","BPSRPT7",203,0)
 ;
"RTN","BPSRPT7",204,0)
TTYPE(BPRX,BPREF,BPSEQ) N BPSTATUS,TTYPE
"RTN","BPSRPT7",205,0)
 S TTYPE="SUBMIT"
"RTN","BPSRPT7",206,0)
 S BPSTATUS=$$STATUS^BPSRPT6(BPRX,BPREF,$G(BPSEQ))
"RTN","BPSRPT7",207,0)
 I BPSTATUS["REVERSAL" S TTYPE="REVERSAL"
"RTN","BPSRPT7",208,0)
 Q TTYPE
"RTN","BPSRPT7",209,0)
 ;
"RTN","BPSRPT7",210,0)
 ;Return the payer response
"RTN","BPSRPT7",211,0)
 ;
"RTN","BPSRPT7",212,0)
RESPONSE(BPRX,BPREF,BPSEQ) Q $P($$STATUS^BPSRPT6(BPRX,BPREF,$G(BPSEQ)),U)
"RTN","BPSRPT7",213,0)
 ;
"RTN","BPSRPT7",214,0)
 ;Print Report Subtotals
"RTN","BPSRPT7",215,0)
 ;
"RTN","BPSRPT7",216,0)
TOTALS(BPRTYPE,BPDIV,BPTBIL,BPTINS,BPTCOLL,BPCNT,BPELTM,BPRICE) ;
"RTN","BPSRPT7",217,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT7",218,0)
 .W !!,?83,"----------",?105,"----------",?122,"----------"
"RTN","BPSRPT7",219,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?83,$J(BPTBIL,10,2),?105,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT7",220,0)
 .W !,"COUNT",?83,$J(BPCNT,10),?105,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",221,0)
 .W:BPCNT !,"MEAN",?83,$J(BPTBIL/BPCNT,10,2),?105,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT7",222,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT7",223,0)
 .W !!,?100,"----------",?122,"----------"
"RTN","BPSRPT7",224,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?100,$J(BPTBIL,10,2),?122,$J(BPTINS,10,2)
"RTN","BPSRPT7",225,0)
 .W !,"COUNT",?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",226,0)
 .W:BPCNT !,"MEAN",?100,$J(BPTBIL/BPCNT,10,2),?122,$J(BPTINS/BPCNT,10,2)
"RTN","BPSRPT7",227,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT7",228,0)
 .W !!,?41,"----------"
"RTN","BPSRPT7",229,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,22),?41,$J(BPTBIL,10,2)
"RTN","BPSRPT7",230,0)
 .W !,"COUNT",?41,$J(BPCNT,10)
"RTN","BPSRPT7",231,0)
 .W:BPCNT !,"MEAN",?41,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT7",232,0)
 I (BPRTYPE=5) D  Q
"RTN","BPSRPT7",233,0)
 .W !!,"SUBTOTALS for DIV: ",$E($$BPDIV(BPDIV),1,43),?65,"---------------"
"RTN","BPSRPT7",234,0)
 .W !,"TOTAL CLAIMS",?65,$J(BPCNT,15)
"RTN","BPSRPT7",235,0)
 .W !,"AVERAGE ELAPSED TIME PER CLAIM",?65,$J($S(BPCNT=0:"0",1:(BPELTM\BPCNT)),15)
"RTN","BPSRPT7",236,0)
 I (BPRTYPE=7) D  Q
"RTN","BPSRPT7",237,0)
 .W !!,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,43)
"RTN","BPSRPT7",238,0)
 .N BPBILR
"RTN","BPSRPT7",239,0)
 .S BPBILR="" F  S BPBILR=$O(BPCNT(BPBILR)) Q:BPBILR=""  D  Q:BPQ
"RTN","BPSRPT7",240,0)
 ..S NP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",241,0)
 ..W !,?3,BPBILR,?65,$J($G(BPCNT(BPBILR)),5)
"RTN","BPSRPT7",242,0)
 .Q:$G(BPQ)
"RTN","BPSRPT7",243,0)
 .W !,?65,"-----"
"RTN","BPSRPT7",244,0)
 .W !,"CLOSED CLAIMS SUBTOTAL",?65,$J(BPCNT,5)
"RTN","BPSRPT7",245,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT7",246,0)
 .W !!,?78,"----------",?100,"----------",?122,"----------"
"RTN","BPSRPT7",247,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?78,$J(BPTBIL,10,2),?100,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT7",248,0)
 .W !,?4,$J($P(BPRICE,U,3),10,2),?23,$J($P(BPRICE,U,4),10,2),?38,$J($P(BPRICE,U,5),10,2),?56,$J($P(BPRICE,U,6),10,2),?81,$J($P(BPRICE,U,7),10,2),?96,$J($P(BPRICE,U,2),10,2),?111,$J($P(BPRICE,U),10,2)
"RTN","BPSRPT7",249,0)
 .W !,"COUNT",?78,$J(BPCNT,10),?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",250,0)
 .W !,?4,$J(BPCNT,10),?23,$J(BPCNT,10),?38,$J(BPCNT,10),?56,$J(BPCNT,10),?81,$J(BPCNT,10),?96,$J(BPCNT,10),?111,$J(BPCNT,10)
"RTN","BPSRPT7",251,0)
 .W:BPCNT !,"MEAN",?78,$J(BPTBIL/BPCNT,10,2),?100,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT7",252,0)
 .W !,?4,$J($P(BPRICE,U,3)/BPCNT,10,2),?23,$J($P(BPRICE,U,4)/BPCNT,10,2),?38,$J($P(BPRICE,U,5)/BPCNT,10,2),?56,$J($P(BPRICE,U,6)/BPCNT,10,2),?81,$J($P(BPRICE,U,7)/BPCNT,10,2),?96,$J($P(BPRICE,U,2)/BPCNT,10,2),?111,$J($P(BPRICE,U)/BPCNT,10,2)
"RTN","BPSRPT7",253,0)
 ;
"RTN","BPSRPT7",254,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT7",255,0)
 .W !!,?84,"----------"
"RTN","BPSRPT7",256,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?84,$J(BPTBIL,10,2)
"RTN","BPSRPT7",257,0)
 .W !,"COUNT",?84,$J(BPCNT,10)
"RTN","BPSRPT7",258,0)
 .W:BPCNT !,"MEAN",?84,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT7",259,0)
 Q
"RTN","BPSRPT7",260,0)
 ;
"RTN","BPSRPT7",261,0)
 ;Print Report Header
"RTN","BPSRPT7",262,0)
 ; Input variables (defined in BPSRPT0) - BPPHARM,BPSUMDET,BPNOW,BPMWC,BPRTBCK,BPINSINF
"RTN","BPSRPT7",263,0)
 ;                                        BPREJCD,BPCCRSN,BPAUTREV,BPACREJ,BPQSTDRG
"RTN","BPSRPT7",264,0)
 ;                                        BPDRUG,BPDRGCL,BPRLNRL,BPSORT,BPBEGDT,BPENDDT
"RTN","BPSRPT7",265,0)
 ; Output variable - BPSDATA -> Reset to 0 to show no actual data has been printed
"RTN","BPSRPT7",266,0)
 ;                           on the screen
"RTN","BPSRPT7",267,0)
 ;                   BPPAGE -> First set in BPSRPT0
"RTN","BPSRPT7",268,0)
 ;                   BPBLINE -> Controls whether to print a blank line
"RTN","BPSRPT7",269,0)
 ;                   
"RTN","BPSRPT7",270,0)
HDR(BPRTYPE,BPRPTNAM,BPPAGE) ;
"RTN","BPSRPT7",271,0)
 ;Display Excel Header
"RTN","BPSRPT7",272,0)
 I BPEXCEL D HDR^BPSRPT8(BPRTYPE) Q
"RTN","BPSRPT7",273,0)
 ;
"RTN","BPSRPT7",274,0)
 ; Define BPPDATA - Tells whether data has been displayed for a screen
"RTN","BPSRPT7",275,0)
 S BPSDATA=0
"RTN","BPSRPT7",276,0)
 S BPBLINE=""
"RTN","BPSRPT7",277,0)
 S BPPAGE=$G(BPPAGE)+1
"RTN","BPSRPT7",278,0)
 W @IOF
"RTN","BPSRPT7",279,0)
 W "ECME "_BPRPTNAM_" "_$S(BPSUMDET=1:"SUMMARY",1:"DETAIL")_" REPORT"
"RTN","BPSRPT7",280,0)
 W ?89,"Print Date: "_$G(BPNOW)_"  Page:",$J(BPPAGE,3)
"RTN","BPSRPT7",281,0)
 W !,"DIVISION(S): ",$$GETDIVS^BPSRPT4(72,.BPPHARM)
"RTN","BPSRPT7",282,0)
 W ?86,"Fill Locations: "_$S(BPMWC="A":"C,M,W",1:BPMWC)
"RTN","BPSRPT7",283,0)
 I BPRTYPE'=9 W ?110,"Fill type: "_$S(BPRTBCK=2:"RT",BPRTBCK=3:"BB",BPRTBCK=4:"P2",BPRTBCK=5:"RS",1:"RT,BB,P2,RS")
"RTN","BPSRPT7",284,0)
 W !,"Insurance: "_$S(BPINSINF=0:"ALL",1:$$BPINS(BPINSINF))
"RTN","BPSRPT7",285,0)
 I (",7,")[BPRTYPE W ?44,"Close Reason: ",$E($$GETCLR^BPSRPT6(BPCCRSN),1,26)
"RTN","BPSRPT7",286,0)
 I (",4,")[BPRTYPE W ?44,$J($S(BPAUTREV=0:"ALL",1:"AUTO"),4)," Reversals"
"RTN","BPSRPT7",287,0)
 I (",4,")[BPRTYPE W ?60,$J($S(BPACREJ=1:"REJECTED",BPACREJ=2:"ACCEPTED",1:"ALL"),8)," Returned Status"
"RTN","BPSRPT7",288,0)
 W ?87,"Drugs/Classes: "_$S(BPQSTDRG=2:$$DRGNAM^BPSRPT6(BPDRUG,30),BPQSTDRG=3:$E(BPDRGCL,1,30),1:"ALL")
"RTN","BPSRPT7",289,0)
 I (",2,")[BPRTYPE W !,"Reject Code: ",$E($$GETREJ^BPSRPT4(BPREJCD),1,28),?89,"Eligibility: ",$S(BPELIG="V":"VET",BPELIG="T":"TRI",BPELIG="C":"CVA",1:"ALL"),?111,"Open/Closed: ",$S(BPOPCL=1:"CLOSED",BPOPCL=2:"OPEN",1:"ALL")
"RTN","BPSRPT7",290,0)
 I (",1,4,7,")[BPRTYPE W !,"Eligibility: ",$S(BPELIG="V":"VET",BPELIG="T":"TRI",BPELIG="C":"CVA",1:"ALL")
"RTN","BPSRPT7",291,0)
 I (",9,")[BPRTYPE D
"RTN","BPSRPT7",292,0)
 . W !,"Eligibilities: ",$S(BPELIG1=0:"ALL",1:$$ELIG(.BPELIG1))
"RTN","BPSRPT7",293,0)
 . W !,"NON-BILLABLE STATUS: "_$S(BPNBSTS=0:"ALL",1:$$NBSTS(.BPNBSTS))
"RTN","BPSRPT7",294,0)
 W !,$S(BPRTYPE=5:"PRESCRIPTIONS",BPRLNRL=2:"RELEASED PRESCRIPTIONS",BPRLNRL=3:"PRESCRIPTIONS (NOT RELEASED)",1:"ALL PRESCRIPTIONS")
"RTN","BPSRPT7",295,0)
 W " BY "_$S(BPRTYPE=7:"CLOSE",1:"TRANSACTION")_" DATE: "
"RTN","BPSRPT7",296,0)
 W "From "_$$DATTIM^BPSRPT1(BPBEGDT)_" through "_$$DATTIM^BPSRPT1($P(BPENDDT,"."))
"RTN","BPSRPT7",297,0)
 ;
"RTN","BPSRPT7",298,0)
 D ULINE^BPSRPT5("=") Q:$G(BPQ)
"RTN","BPSRPT7",299,0)
 D HEADLN1^BPSRPT4(BPRTYPE)
"RTN","BPSRPT7",300,0)
 D HEADLN2^BPSRPT4(BPRTYPE)
"RTN","BPSRPT7",301,0)
 D HEADLN3^BPSRPT4(BPRTYPE)
"RTN","BPSRPT7",302,0)
 D ULINE^BPSRPT5("=")
"RTN","BPSRPT7",303,0)
 ;
"RTN","BPSRPT7",304,0)
 ;Print Division
"RTN","BPSRPT7",305,0)
 I $G(BPDIV)]"" D
"RTN","BPSRPT7",306,0)
 .W !,"DIVISION: ",$S(BPDIV=0:"BLANK",BPDIV="ALL DIVISIONS":"ALL DIVISIONS",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV)
"RTN","BPSRPT7",307,0)
 .I BPRTYPE=5!(BPRTYPE=6)!(BPSUMDET=1)!(BPGRPLAN="") D ULINE^BPSRPT5("-")
"RTN","BPSRPT7",308,0)
 ;
"RTN","BPSRPT7",309,0)
 ;Print Insurance If Defined
"RTN","BPSRPT7",310,0)
 I BPSUMDET=0,$G(BPGRPLAN)]"",$G(BPGRPLAN)'=0,$G(BPGRPLAN)'="~" D WRPLAN^BPSRPT5(BPGRPLAN)
"RTN","BPSRPT7",311,0)
 Q
"RTN","BPSRPT7",312,0)
 ;
"RTN","BPSRPT7",313,0)
 ;Special Division Handling
"RTN","BPSRPT7",314,0)
 ;
"RTN","BPSRPT7",315,0)
BPDIV(BPDIV) Q $S(BPDIV=0:"BLANK",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV)
"RTN","BPSRPT7",316,0)
 ;
"RTN","BPSRPT7",317,0)
 ;Get selected insurance names based on user selection
"RTN","BPSRPT7",318,0)
 ;If length is greater than 68 append "..."
"RTN","BPSRPT7",319,0)
 ;Input: BPINSINF = Semi-colon separated list of file 36 IENs
"RTN","BPSRPT7",320,0)
 ;Output: comma separated list of related file 36 names
"RTN","BPSRPT7",321,0)
BPINS(BPINSINF) ;
"RTN","BPSRPT7",322,0)
 N BPINS,BPINAME,RETV
"RTN","BPSRPT7",323,0)
 S RETV=""
"RTN","BPSRPT7",324,0)
 F I=2:1 S BPINS=$P($G(BPINSINF),";",I) Q:BPINS=""  D
"RTN","BPSRPT7",325,0)
 . S BPINAME=$$INSNM^IBNCPDPI(BPINS) Q:BPINAME=""
"RTN","BPSRPT7",326,0)
 . I RETV'="" S RETV=RETV_", "_BPINAME Q
"RTN","BPSRPT7",327,0)
 . S RETV=BPINAME
"RTN","BPSRPT7",328,0)
 I $L(RETV)>68 S RETV=$E(RETV,1,68)_"..."
"RTN","BPSRPT7",329,0)
 Q RETV
"RTN","BPSRPT7",330,0)
 ;
"RTN","BPSRPT7",331,0)
ELIG(ELIG) ;
"RTN","BPSRPT7",332,0)
 ; Display multiple eligibilities
"RTN","BPSRPT7",333,0)
 ; Input:
"RTN","BPSRPT7",334,0)
 ;   ELIG - Array of multiple eligibilities
"RTN","BPSRPT7",335,0)
 ; Output
"RTN","BPSRPT7",336,0)
 ;   Text of eligibilities
"RTN","BPSRPT7",337,0)
 ;
"RTN","BPSRPT7",338,0)
 I $D(ELIG)=0 Q ""
"RTN","BPSRPT7",339,0)
 N N,LIST
"RTN","BPSRPT7",340,0)
 S LIST=""
"RTN","BPSRPT7",341,0)
 S N="" F  S N=$O(ELIG(N)) Q:N=""  D
"RTN","BPSRPT7",342,0)
 . S LIST=LIST_$G(ELIG(N))_","
"RTN","BPSRPT7",343,0)
 Q $E(LIST,1,$L(LIST)-1)
"RTN","BPSRPT7",344,0)
 ;
"RTN","BPSRPT7",345,0)
NBSTS(NBSTS) ;
"RTN","BPSRPT7",346,0)
 ; Display multiple non-billable statuses
"RTN","BPSRPT7",347,0)
 ; Input:
"RTN","BPSRPT7",348,0)
 ;   NBSTS - Array of multiple non-billable statuses
"RTN","BPSRPT7",349,0)
 ; Output
"RTN","BPSRPT7",350,0)
 ;   Text of non-billable statuses
"RTN","BPSRPT7",351,0)
 ;
"RTN","BPSRPT7",352,0)
 I $D(NBSTS)=0 Q ""
"RTN","BPSRPT7",353,0)
 N N,LIST
"RTN","BPSRPT7",354,0)
 S LIST=""
"RTN","BPSRPT7",355,0)
 S N="" F  S N=$O(NBSTS(N)) Q:N=""  D
"RTN","BPSRPT7",356,0)
 . S LIST=LIST_$G(NBSTS(N))_","
"RTN","BPSRPT7",357,0)
 Q $E(LIST,1,$L(LIST)-1)
"RTN","BPSRPT8")
0^18^B149255320
"RTN","BPSRPT8",1,0)
BPSRPT8 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT8",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8,10,11,19,20**;JUN 2004;Build 27
"RTN","BPSRPT8",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT8",4,0)
 ;
"RTN","BPSRPT8",5,0)
 ;Reference to IB NCPCP NON-BILLABLE STATUS REASONS (#366.17) supported by ICR 6136
"RTN","BPSRPT8",6,0)
 ;
"RTN","BPSRPT8",7,0)
 Q
"RTN","BPSRPT8",8,0)
 ;
"RTN","BPSRPT8",9,0)
 ;Routine to Display the Reports in Excel
"RTN","BPSRPT8",10,0)
 ;
"RTN","BPSRPT8",11,0)
 ;Print Report Line 1
"RTN","BPSRPT8",12,0)
 ;
"RTN","BPSRPT8",13,0)
 ; Input Variable -> BPRTYPE,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT
"RTN","BPSRPT8",14,0)
 ;                   BPBIL,BPINS,BPCOLL
"RTN","BPSRPT8",15,0)
 ; 
"RTN","BPSRPT8",16,0)
WRLINE1(BPRTYPE,BPREC,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT,BPBIL,BPINS,BPCOLL,BPPSEQ) ;
"RTN","BPSRPT8",17,0)
 ;
"RTN","BPSRPT8",18,0)
 N BP59,BP02,BP03
"RTN","BPSRPT8",19,0)
 S BP59=$P(BPX,U,3)
"RTN","BPSRPT8",20,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT8",21,0)
 S BP03=+$P($G(^BPST(BP59,0)),U,5)
"RTN","BPSRPT8",22,0)
 ;Division
"RTN","BPSRPT8",23,0)
 S BPREC=$S(BPDIV=0:"BLANK",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV)_U
"RTN","BPSRPT8",24,0)
 ;Insurance
"RTN","BPSRPT8",25,0)
 I BPRTYPE'=5,BPRTYPE'=6 S BPREC=BPREC_$E(BPGRPLAN,1,90)_U
"RTN","BPSRPT8",26,0)
 S BPREC=BPREC_$$PATNAME^BPSRPT6(BPDFN)_U  ;Patient Name
"RTN","BPSRPT8",27,0)
 S BPREC=BPREC_"("_$$SSN4^BPSRPT6(BPDFN)_")"_U ;L4SSN
"RTN","BPSRPT8",28,0)
 ;
"RTN","BPSRPT8",29,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT8",30,0)
 . N PTRESP
"RTN","BPSRPT8",31,0)
 . S BPREC=BPREC_$$ELIGCODE^BPSSCR05($P(BPX,U,3))_U ;Eligibility
"RTN","BPSRPT8",32,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",33,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",34,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U  ;Date
"RTN","BPSRPT8",35,0)
 . S BPREC=BPREC_$$INGRCST^BPSSCRLG(BP02)_U  ;Ingredient Cost
"RTN","BPSRPT8",36,0)
 . S BPREC=BPREC_$$DISPFEE^BPSSCRLG(BP02)_U  ;Dispensing Fee
"RTN","BPSRPT8",37,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",38,0)
 . S BPREC=BPREC_$$ICPAID^BPSSCRLG(BP03)_U  ;Ingredient Cost Paid
"RTN","BPSRPT8",39,0)
 . S BPREC=BPREC_$$DFPAID^BPSSCRLG(BP03)_U  ;Dispensing Fee Paid
"RTN","BPSRPT8",40,0)
 . S PTRESP=$$PTRESP^BPSSCRLG(BP03) S BPREC=BPREC_$S('PTRESP:PTRESP,1:"-"_PTRESP)_U  ;Patient Pay Amount
"RTN","BPSRPT8",41,0)
 . S BPREC=BPREC_$TR($J(BPINS,10,2)," ")_U ;$Ins. Paid
"RTN","BPSRPT8",42,0)
 . S BPREC=BPREC_$S(BPCOLL]"":$TR($J(BPCOLL,10,2)," "),1:"")_U ;$Collected
"RTN","BPSRPT8",43,0)
 ;
"RTN","BPSRPT8",44,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT8",45,0)
 . S BPREC=BPREC_$$ELIGCODE^BPSSCR05($P(BPX,U,3))_U ;Eligibility
"RTN","BPSRPT8",46,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",47,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",48,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U ;Date
"RTN","BPSRPT8",49,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(+BPX)_U  ;Released On
"RTN","BPSRPT8",50,0)
 . ;RX INFO
"RTN","BPSRPT8",51,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",52,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U  ;Fill Type
"RTN","BPSRPT8",53,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",54,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",55,0)
 . S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U
"RTN","BPSRPT8",56,0)
 . S BPREC=BPREC_$S($$CLOSED02^BPSSCR03($P(^BPST($P(BPX,U,3),0),U,4))=1:"C",1:"O")_U ;Open/Closed
"RTN","BPSRPT8",57,0)
 ;
"RTN","BPSRPT8",58,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT8",59,0)
 . N PTRESP
"RTN","BPSRPT8",60,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",61,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",62,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U ;Date
"RTN","BPSRPT8",63,0)
 . S BPREC=BPREC_$$INGRCST^BPSSCRLG(BP02)_U  ;Ingredient Cost
"RTN","BPSRPT8",64,0)
 . S BPREC=BPREC_$$DISPFEE^BPSSCRLG(BP02)_U  ;Dispensing Fee
"RTN","BPSRPT8",65,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",66,0)
 . S BPREC=BPREC_$$ICPAID^BPSSCRLG(BP03)_U  ;Ingredient Cost Paid
"RTN","BPSRPT8",67,0)
 . S BPREC=BPREC_$$DFPAID^BPSSCRLG(BP03)_U  ;Dispensing Fee Paid
"RTN","BPSRPT8",68,0)
 . S PTRESP=$$PTRESP^BPSSCRLG(BP03) S BPREC=BPREC_$S('PTRESP:PTRESP,1:"-"_PTRESP)_U  ;Patient Pay Amount
"RTN","BPSRPT8",69,0)
 . S BPREC=BPREC_$TR($J(BPINS,10,2)," ")_U ;Insurance Response
"RTN","BPSRPT8",70,0)
 ;
"RTN","BPSRPT8",71,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT8",72,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",73,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",74,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1($$TRANDT^BPSRPT2($P(BPX,U,3),1))_U ;Completed
"RTN","BPSRPT8",75,0)
 . S BPREC=BPREC_$$TTYPE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)_U ;Trans Type
"RTN","BPSRPT8",76,0)
 . S BPREC=BPREC_$$RESPONSE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)_U ;Payer Response
"RTN","BPSRPT8",77,0)
 . S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U ;RX COB
"RTN","BPSRPT8",78,0)
 ;
"RTN","BPSRPT8",79,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT8",80,0)
 . ;RX INFO
"RTN","BPSRPT8",81,0)
 . S BPREC=BPREC_$$ELIGCODE^BPSSCR05($P(BPX,U,3))_U ;Eligibility
"RTN","BPSRPT8",82,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",83,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",84,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",85,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",86,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",87,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",88,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")_U
"RTN","BPSRPT8",89,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",90,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",91,0)
 ;
"RTN","BPSRPT8",92,0)
 I (BPRTYPE=8) D  Q
"RTN","BPSRPT8",93,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",94,0)
 . S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",95,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U  ;Date
"RTN","BPSRPT8",96,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",97,0)
 . S BPREC=BPREC_$TR($J(BPINS,10,2)," ")_U ;$Ins. Paid
"RTN","BPSRPT8",98,0)
 . S BPREC=BPREC_$S(BPCOLL]"":$TR($J(BPCOLL,10,2)," "),1:"")_U ;$Collected
"RTN","BPSRPT8",99,0)
 ;
"RTN","BPSRPT8",100,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT8",101,0)
 . N ELGCD S ELGCD=$P(BPX,U,1)
"RTN","BPSRPT8",102,0)
 . S BPREC=BPREC_$S(ELGCD="V":"VET",ELGCD="T":"TRI",ELGCD="C":"CVA",1:"UNK")_U
"RTN","BPSRPT8",103,0)
 . S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",104,0)
 . S BPREC=BPREC_BPREF_U                      ;Refill
"RTN","BPSRPT8",105,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U  ;Date
"RTN","BPSRPT8",106,0)
 . S BPREC=BPREC_$S($P(BPX,U,2)]"":$TR($J($P(BPX,U,2),10,2)," "),1:"")_U ;$Drug Cost
"RTN","BPSRPT8",107,0)
 Q
"RTN","BPSRPT8",108,0)
 ;
"RTN","BPSRPT8",109,0)
 ;Print Report Line 2
"RTN","BPSRPT8",110,0)
 ;
"RTN","BPSRPT8",111,0)
 ; Input Variable -> BPRTYPE,BPX,BPRX,BPREF,BPBIL,BPGRPLAN
"RTN","BPSRPT8",112,0)
 ; 
"RTN","BPSRPT8",113,0)
WRLINE2(BPRTYPE,BPREC,BPX,BPRX,BPREF,BPBIL,BPGRPLAN,BPPSEQ) ;
"RTN","BPSRPT8",114,0)
 N BP59,BP02
"RTN","BPSRPT8",115,0)
 S BP59=$P(BPX,U,3)
"RTN","BPSRPT8",116,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT8",117,0)
 ;
"RTN","BPSRPT8",118,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT8",119,0)
 . ;Drug, Released On
"RTN","BPSRPT8",120,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",121,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(+BPX)_U
"RTN","BPSRPT8",122,0)
 . ;RX INFO
"RTN","BPSRPT8",123,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",124,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",125,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",126,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",127,0)
 . I BPRTYPE=4 S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U
"RTN","BPSRPT8",128,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT8",129,0)
 . I BPRTYPE=1 S BPREC=BPREC_U_$$BILL^BPSRPT6(BPRX,BPREF,BPPSEQ)_U_$$RXCOB($G(BPPSEQ)) ;Bill # and RX COB
"RTN","BPSRPT8",130,0)
 ;
"RTN","BPSRPT8",131,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT8",132,0)
 . S BPREC=BPREC_$E($$CRDHLDID^BPSRPT2(+$P(BPX,U,3)),3,23)_U ;Cardholder ID
"RTN","BPSRPT8",133,0)
 . S BPREC=BPREC_$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)_U ;Group ID
"RTN","BPSRPT8",134,0)
 . S BPREC=BPREC_$$INGRCST^BPSSCRLG(BP02)_U  ;Ingredient Cost
"RTN","BPSRPT8",135,0)
 . S BPREC=BPREC_$$DISPFEE^BPSSCRLG(BP02)_U  ;Dispensing Fee
"RTN","BPSRPT8",136,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",137,0)
 . S BPREC=BPREC_$$QTY^BPSRPT6($P(BPX,U,3))_U ;Qty
"RTN","BPSRPT8",138,0)
 . S BPREC=BPREC_$$GETNDC^BPSRPT6(BPRX,BPREF)_U ;NDC#
"RTN","BPSRPT8",139,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",140,0)
 ;
"RTN","BPSRPT8",141,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT8",142,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",143,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",144,0)
 . ;RX INFO
"RTN","BPSRPT8",145,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",146,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",147,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",148,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",149,0)
 . S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U
"RTN","BPSRPT8",150,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT8",151,0)
 ;
"RTN","BPSRPT8",152,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT8",153,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",154,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",155,0)
 . ;RX INFO
"RTN","BPSRPT8",156,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",157,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",158,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",159,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",160,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")_U
"RTN","BPSRPT8",161,0)
 . I $P(BPGRPLAN,U,2)]"" S BPREC=BPREC_$E($P(BPGRPLAN,U,2),1,30) ;Insurance
"RTN","BPSRPT8",162,0)
 . S BPREC=BPREC_U_$$ELAPSE^BPSRPT6($P(BPX,U,3))  ;Elapsed Time
"RTN","BPSRPT8",163,0)
 ;
"RTN","BPSRPT8",164,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT8",165,0)
 . S BPREC=BPREC_$E($$CRDHLDID^BPSRPT2(+$P(BPX,U,3)),3,23)_U ;Cardholder ID
"RTN","BPSRPT8",166,0)
 . S BPREC=BPREC_$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)_U  ;Group ID
"RTN","BPSRPT8",167,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",168,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(+$$CLOSEDT^BPSRPT2(+$P(BPX,U,3)))_U ;Close Dt/Time
"RTN","BPSRPT8",169,0)
 . S BPREC=BPREC_$E($$CLSBY^BPSRPT6(+$P(BPX,U,3)),1,25)_U ;Close By
"RTN","BPSRPT8",170,0)
 . S BPREC=BPREC_$E($P($$CLRSN^BPSRPT7(+$P(BPX,U,3)),U,2),1,30)_U ;Close Reason
"RTN","BPSRPT8",171,0)
 ;
"RTN","BPSRPT8",172,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT8",173,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),27)_U ;Drug
"RTN","BPSRPT8",174,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_" " ;Fill Location
"RTN","BPSRPT8",175,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_" " ;Fill Type
"RTN","BPSRPT8",176,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",177,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/R",1:"/N")_U ;RL/NR
"RTN","BPSRPT8",178,0)
 . S BPREC=BPREC_$TR($E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)," ","")_U  ;Group ID
"RTN","BPSRPT8",179,0)
 . S BPREC=BPREC_$E(BPGRPLAN,1,30)_U ;Insurance
"RTN","BPSRPT8",180,0)
 . S BPREC=BPREC_$$BILL^BPSRPT6(BPRX,BPREF,BPPSEQ)_U ;Bill#
"RTN","BPSRPT8",181,0)
 ;
"RTN","BPSRPT8",182,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT8",183,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,4),32)_U  ;Drug
"RTN","BPSRPT8",184,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U ;NDC
"RTN","BPSRPT8",185,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1($P(BPX,U,5))_U  ;Release Date
"RTN","BPSRPT8",186,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U      ;Fill Location
"RTN","BPSRPT8",187,0)
 . S BPREC=BPREC_$$RXSTANAM^BPSSCRU2($P(BPX,U,6)) ;Status
"RTN","BPSRPT8",188,0)
 . S BPREC=BPREC_$S($P(BPX,U,5):"/R",1:"/N")_U    ;RL/NR
"RTN","BPSRPT8",189,0)
 . S BPREC=BPREC_$$GET1^DIQ(366.17,$P(BPX,U,7),.01,"E")  ;Non-Billable Status Reason - ICR 6136
"RTN","BPSRPT8",190,0)
 Q
"RTN","BPSRPT8",191,0)
 ;
"RTN","BPSRPT8",192,0)
 ;Print Report Line 3
"RTN","BPSRPT8",193,0)
 ;
"RTN","BPSRPT8",194,0)
 ; Input Variable -> BPRTYPE,BPX
"RTN","BPSRPT8",195,0)
 ; 
"RTN","BPSRPT8",196,0)
WRLINE3(BPRTYPE,BPREC,BPX) N BP59,BPSARR,BPRJCNT,BPZZ,BPRICE
"RTN","BPSRPT8",197,0)
 S BP59=+$P(BPX,U,3)
"RTN","BPSRPT8",198,0)
 ;
"RTN","BPSRPT8",199,0)
 I (",2,7,")[BPRTYPE D  Q
"RTN","BPSRPT8",200,0)
 .S BPREC=BPREC_$$CLAIMID^BPSRPT2(BP59)_U ;Claim ID
"RTN","BPSRPT8",201,0)
 .S BPRJCNT=$$REJTEXT^BPSRPT2(BP59,.BPSARR)
"RTN","BPSRPT8",202,0)
 .F BPZZ=1:1:BPRJCNT S:BPZZ'=1 BPREC=BPREC_"," S BPREC=BPREC_$P(BPSARR(BPZZ),":")
"RTN","BPSRPT8",203,0)
 .;
"RTN","BPSRPT8",204,0)
 .;Write one record per reject/close code
"RTN","BPSRPT8",205,0)
 .S:+BPRJCNT=0 BPRJCNT=1
"RTN","BPSRPT8",206,0)
 .F BPZZ=1:1:BPRJCNT W !,$G(BPREC),U,$P($G(BPSARR(BPZZ)),":"),U,$P($G(BPSARR(BPZZ)),":",2)
"RTN","BPSRPT8",207,0)
 ;
"RTN","BPSRPT8",208,0)
 I BPRTYPE=4 D
"RTN","BPSRPT8",209,0)
 . ;Method
"RTN","BPSRPT8",210,0)
 . I $$AUTOREV^BPSRPT1(BP59) S BPREC=BPREC_U_"AUTO"_U
"RTN","BPSRPT8",211,0)
 . E  S BPREC=BPREC_U_"REGULAR"_U
"RTN","BPSRPT8",212,0)
 . ;Return Status
"RTN","BPSRPT8",213,0)
 . I $P(BPX,U,15)["ACCEPTED" S BPREC=BPREC_"ACCEPTED"_U
"RTN","BPSRPT8",214,0)
 . E  S BPREC=BPREC_"REJECTED"_U
"RTN","BPSRPT8",215,0)
 . ;Reason
"RTN","BPSRPT8",216,0)
 . S BPREC=BPREC_$$RVSRSN^BPSRPT7(+$P(BPX,U,3))
"RTN","BPSRPT8",217,0)
 ;
"RTN","BPSRPT8",218,0)
 I BPRTYPE=8 D
"RTN","BPSRPT8",219,0)
 . S BPRICE=$$PRICEVAL^BPSRPT5(BP59)
"RTN","BPSRPT8",220,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,3)_U
"RTN","BPSRPT8",221,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,4)_U
"RTN","BPSRPT8",222,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,5)_U
"RTN","BPSRPT8",223,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,6)_U
"RTN","BPSRPT8",224,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,7)_U
"RTN","BPSRPT8",225,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,2)_U
"RTN","BPSRPT8",226,0)
 . S BPREC=BPREC_$P($G(BPRICE),U,1)_U
"RTN","BPSRPT8",227,0)
 ;Write the record
"RTN","BPSRPT8",228,0)
 W !,$G(BPREC)
"RTN","BPSRPT8",229,0)
 Q
"RTN","BPSRPT8",230,0)
 ;
"RTN","BPSRPT8",231,0)
 ;Print Excel Header
"RTN","BPSRPT8",232,0)
 ;
"RTN","BPSRPT8",233,0)
HDR(BPRTYPE) ;
"RTN","BPSRPT8",234,0)
 ;
"RTN","BPSRPT8",235,0)
 ;Check if header already printed
"RTN","BPSRPT8",236,0)
 I $G(BPSDATA) Q
"RTN","BPSRPT8",237,0)
 S BPSDATA=1
"RTN","BPSRPT8",238,0)
 ;
"RTN","BPSRPT8",239,0)
 ;Division
"RTN","BPSRPT8",240,0)
 W !,"DIVISION",U
"RTN","BPSRPT8",241,0)
 ;
"RTN","BPSRPT8",242,0)
 I BPRTYPE'=5,BPRTYPE'=6 W "INSURANCE",U
"RTN","BPSRPT8",243,0)
 ;
"RTN","BPSRPT8",244,0)
 I (",1,2,3,4,5,7,8,9,")[BPRTYPE W "PATIENT NAME",U,"Pt.ID",U
"RTN","BPSRPT8",245,0)
 ;
"RTN","BPSRPT8",246,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT8",247,0)
 . W "ELIGIBILITY",U
"RTN","BPSRPT8",248,0)
 . W "RX#",U
"RTN","BPSRPT8",249,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",250,0)
 . W "DATE",U
"RTN","BPSRPT8",251,0)
 . W "VA INGREDIENT COST",U
"RTN","BPSRPT8",252,0)
 . W "VA DISPENSING FEE",U
"RTN","BPSRPT8",253,0)
 . W "$BILLED",U
"RTN","BPSRPT8",254,0)
 . W "INGREDIENT COST PAID",U
"RTN","BPSRPT8",255,0)
 . W "DISPENSING FEE PAID",U
"RTN","BPSRPT8",256,0)
 . W "PATIENT RESP (INS)",U
"RTN","BPSRPT8",257,0)
 . W "$INS RESPONSE",U
"RTN","BPSRPT8",258,0)
 . W "$COLLECT",U
"RTN","BPSRPT8",259,0)
 . W "DRUG",U
"RTN","BPSRPT8",260,0)
 . W "NDC",U
"RTN","BPSRPT8",261,0)
 . W "RELEASED ON",U
"RTN","BPSRPT8",262,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",263,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",264,0)
 . W "STATUS",U
"RTN","BPSRPT8",265,0)
 . I BPRTYPE=4 W "RX COB",U
"RTN","BPSRPT8",266,0)
 . W "REJECTED"
"RTN","BPSRPT8",267,0)
 . I BPRTYPE=1 W U,"BILL#",U,"RX COB"
"RTN","BPSRPT8",268,0)
 . I BPRTYPE=4 W U,"REVERSAL METHOD",U,"RETURN STATUS",U,"REASON"
"RTN","BPSRPT8",269,0)
 ;
"RTN","BPSRPT8",270,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT8",271,0)
 . W "ELIGIBILITY",U
"RTN","BPSRPT8",272,0)
 . W "RX#",U
"RTN","BPSRPT8",273,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",274,0)
 . W "DATE",U
"RTN","BPSRPT8",275,0)
 . W "RELEASED ON",U
"RTN","BPSRPT8",276,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",277,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",278,0)
 . W "STATUS",U
"RTN","BPSRPT8",279,0)
 . W "RX COB",U
"RTN","BPSRPT8",280,0)
 . W "OPEN/CLOSED",U
"RTN","BPSRPT8",281,0)
 . W "CARDHOLD.ID",U
"RTN","BPSRPT8",282,0)
 . W "GROUP ID",U
"RTN","BPSRPT8",283,0)
 . W "VA INGREDIENT COST",U
"RTN","BPSRPT8",284,0)
 . W "VA DISPENSING FEE",U
"RTN","BPSRPT8",285,0)
 . W "$BILLED",U
"RTN","BPSRPT8",286,0)
 . W "QTY",U
"RTN","BPSRPT8",287,0)
 . W "NDC#",U
"RTN","BPSRPT8",288,0)
 . W "DRUG",U
"RTN","BPSRPT8",289,0)
 . W "CLAIM ID",U
"RTN","BPSRPT8",290,0)
 . W "REJECT CODE(S)",U
"RTN","BPSRPT8",291,0)
 . W "REJECT CODE",U
"RTN","BPSRPT8",292,0)
 . W "REJECT EXPLANATION"
"RTN","BPSRPT8",293,0)
 ;
"RTN","BPSRPT8",294,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT8",295,0)
 . W "RX#",U
"RTN","BPSRPT8",296,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",297,0)
 . W "DATE",U
"RTN","BPSRPT8",298,0)
 . W "VA INGREDIENT COST",U
"RTN","BPSRPT8",299,0)
 . W "VA DISPENSING FEE",U
"RTN","BPSRPT8",300,0)
 . W "$BILLED",U
"RTN","BPSRPT8",301,0)
 . W "INGREDIENT COST PAID",U
"RTN","BPSRPT8",302,0)
 . W "DISPENSING FEE PAID",U
"RTN","BPSRPT8",303,0)
 . W "PATIENT RESP (INS)",U
"RTN","BPSRPT8",304,0)
 . W "$INS RESPONSE",U
"RTN","BPSRPT8",305,0)
 . W "DRUG",U
"RTN","BPSRPT8",306,0)
 . W "NDC",U
"RTN","BPSRPT8",307,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",308,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",309,0)
 . W "STATUS",U
"RTN","BPSRPT8",310,0)
 . W "RX COB",U
"RTN","BPSRPT8",311,0)
 . W "REJECTED"
"RTN","BPSRPT8",312,0)
 ;
"RTN","BPSRPT8",313,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT8",314,0)
 . W "RX#",U
"RTN","BPSRPT8",315,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",316,0)
 . W "COMPLETED",U
"RTN","BPSRPT8",317,0)
 . W "TRANS TYPE",U
"RTN","BPSRPT8",318,0)
 . W "PAYER RESPONSE",U
"RTN","BPSRPT8",319,0)
 . W "RX COB",U
"RTN","BPSRPT8",320,0)
 . W "DRUG",U
"RTN","BPSRPT8",321,0)
 . W "NDC",U
"RTN","BPSRPT8",322,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",323,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",324,0)
 . W "STATUS",U
"RTN","BPSRPT8",325,0)
 . W "REJECTED",U
"RTN","BPSRPT8",326,0)
 . W "INSURANCE",U
"RTN","BPSRPT8",327,0)
 . W "ELAP TIME IN SECONDS"
"RTN","BPSRPT8",328,0)
 ;
"RTN","BPSRPT8",329,0)
 I BPRTYPE=6 D  Q
"RTN","BPSRPT8",330,0)
 .W "DATE",U
"RTN","BPSRPT8",331,0)
 .W "#CLAIMS",U
"RTN","BPSRPT8",332,0)
 .W "AMOUNT SUBMITTED",U
"RTN","BPSRPT8",333,0)
 .W "RETURNED REJECTED",U
"RTN","BPSRPT8",334,0)
 .W "RETURNED PAYABLE",U
"RTN","BPSRPT8",335,0)
 .W "AMOUNT TO RECEIVE",U
"RTN","BPSRPT8",336,0)
 .W "DIFFERENCE"
"RTN","BPSRPT8",337,0)
 ;
"RTN","BPSRPT8",338,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT8",339,0)
 . W "ELIGIBILITY",U
"RTN","BPSRPT8",340,0)
 . W "RX#",U
"RTN","BPSRPT8",341,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",342,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",343,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",344,0)
 . W "STATUS",U
"RTN","BPSRPT8",345,0)
 . W "REJECTED",U
"RTN","BPSRPT8",346,0)
 . W "DRUG",U
"RTN","BPSRPT8",347,0)
 . W "NDC",U
"RTN","BPSRPT8",348,0)
 . W "CARDHOLD.ID",U
"RTN","BPSRPT8",349,0)
 . W "GROUP ID",U
"RTN","BPSRPT8",350,0)
 . W "$BILLED",U
"RTN","BPSRPT8",351,0)
 . W "CLOSE DATE/TIME",U
"RTN","BPSRPT8",352,0)
 . W "CLOSED BY",U
"RTN","BPSRPT8",353,0)
 . W "CLOSE REASON",U
"RTN","BPSRPT8",354,0)
 . W "CLAIM ID",U
"RTN","BPSRPT8",355,0)
 . W "REJECT CODE(S)",U
"RTN","BPSRPT8",356,0)
 . W "REJECT CODE",U
"RTN","BPSRPT8",357,0)
 . W "REJECT EXPLANATION"
"RTN","BPSRPT8",358,0)
 ;
"RTN","BPSRPT8",359,0)
 I BPRTYPE=8 D  Q
"RTN","BPSRPT8",360,0)
 . W "RX#",U
"RTN","BPSRPT8",361,0)
 . W "REF/ECME#",U
"RTN","BPSRPT8",362,0)
 . W "DATE",U
"RTN","BPSRPT8",363,0)
 . W "$BILLED",U
"RTN","BPSRPT8",364,0)
 . W "$INS RESPONSE",U
"RTN","BPSRPT8",365,0)
 . W "$COLLECT",U
"RTN","BPSRPT8",366,0)
 . W "DRUG",U
"RTN","BPSRPT8",367,0)
 . W "RX INFO",U
"RTN","BPSRPT8",368,0)
 . W "INS GROUP#",U
"RTN","BPSRPT8",369,0)
 . W "INS GROUP NAME",U
"RTN","BPSRPT8",370,0)
 . W "BILL#",U
"RTN","BPSRPT8",371,0)
 . W "$PROVIDER NETWORK",U
"RTN","BPSRPT8",372,0)
 . W "$BRAND DRUG",U
"RTN","BPSRPT8",373,0)
 . W "$NON-PREF FORM",U
"RTN","BPSRPT8",374,0)
 . W "$BRAND NON-PREF FORM",U
"RTN","BPSRPT8",375,0)
 . W "$COVERAGE GAP",U
"RTN","BPSRPT8",376,0)
 . W "$HEALTH ASST",U
"RTN","BPSRPT8",377,0)
 . W "$SPEND ACCT REMAINING",U
"RTN","BPSRPT8",378,0)
 ;
"RTN","BPSRPT8",379,0)
 I BPRTYPE=9 D  Q
"RTN","BPSRPT8",380,0)
 . W "ELIGIBILITY",U
"RTN","BPSRPT8",381,0)
 . W "RX#",U
"RTN","BPSRPT8",382,0)
 . W "REF",U
"RTN","BPSRPT8",383,0)
 . W "DATE",U
"RTN","BPSRPT8",384,0)
 . W "$DRUG COST",U
"RTN","BPSRPT8",385,0)
 . W "DRUG",U
"RTN","BPSRPT8",386,0)
 . W "NDC",U
"RTN","BPSRPT8",387,0)
 . W "RELEASED ON",U
"RTN","BPSRPT8",388,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",389,0)
 . W "STATUS",U
"RTN","BPSRPT8",390,0)
 . W "NON-BILLABLE STATUS REASON"
"RTN","BPSRPT8",391,0)
 Q
"RTN","BPSRPT8",392,0)
 ;return RX COB as the 1st letter of the RX COB indicator
"RTN","BPSRPT8",393,0)
RXCOB(BPPSEQ) ;
"RTN","BPSRPT8",394,0)
 Q $S(BPPSEQ=1:"p",BPPSEQ=2:"s",1:"")
"RTN","BPSRPT8",395,0)
 ;BPSRPT8
"RTN","BPSRPT9")
0^12^B113826199
"RTN","BPSRPT9",1,0)
BPSRPT9 ;BHAM ISC/BNT - ECME REPORTS ;19-SEPT-08
"RTN","BPSRPT9",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8,18,20**;01-JUN-04;Build 27
"RTN","BPSRPT9",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT9",4,0)
 ;
"RTN","BPSRPT9",5,0)
 Q
"RTN","BPSRPT9",6,0)
 ; Front End for Potential Secondary and Dual Eligible Claims Reports
"RTN","BPSRPT9",7,0)
 ; Input variable: BPRTYPE -> 8 = Potential Dual Eligible
"RTN","BPSRPT9",8,0)
 ;                            9 = Potential Secondary
"RTN","BPSRPT9",9,0)
 ;
"RTN","BPSRPT9",10,0)
 ; Passed variables - The following local variables are passed around the BPSRPT* routines
"RTN","BPSRPT9",11,0)
 ;                    and are not passed as parameters but are assumed to be defined:
"RTN","BPSRPT9",12,0)
 ;                    BPACREJ,BPAUTREV,BPBEGDT,BPBLINE,BPCCRSN,BPDRGCL,BPDRUG,BPENDDT,BPEXCEL,
"RTN","BPSRPT9",13,0)
 ;                    BPINSINF,BPGRPLN,BPMWC,BPNOW,BPPAGE,BPPHARM,BPQ,BPQSTDRG,
"RTN","BPSRPT9",14,0)
 ;                    BPRLNRL,BPRTBCK,BPSDATA,BPSUMDET,BPRTYPE
"RTN","BPSRPT9",15,0)
 ;
"RTN","BPSRPT9",16,0)
EN(BPRTYPE) ;
"RTN","BPSRPT9",17,0)
 N BPREJCD,BPRLNRL,BPRPTNAM,BPRTBCK,BPSCR,BPSUMDET,CODE,POS,STAT,X,Y,BPINS,BPARR
"RTN","BPSRPT9",18,0)
 N BPSORT,BPCRON,BPSEL,BPS1,BPS2,BPS3,BPS4,BPS5,BPDT,BPPHARM,BPDIVS,BPELIG1
"RTN","BPSRPT9",19,0)
 ;
"RTN","BPSRPT9",20,0)
 ;Verify that a valid report has been requested
"RTN","BPSRPT9",21,0)
 I ",8,9,"'[(","_$G(BPRTYPE)_",") D EN^DDIOL("<Invalid Menu Definition - Report Undefined>") H 3 Q
"RTN","BPSRPT9",22,0)
 ;
"RTN","BPSRPT9",23,0)
 D EN^DDIOL("SELECTION CRITERIA","","!")
"RTN","BPSRPT9",24,0)
 ;Prompt for ECME Pharmacy Division(s) (No Default)
"RTN","BPSRPT9",25,0)
 ;Sets up BPPHARM variable and array, BPPHARM =0 ALL or BPPHARM=1,BPPHARM(ptr) for list
"RTN","BPSRPT9",26,0)
 S X=$$SELPHARM^BPSRPT3() I X="^" Q
"RTN","BPSRPT9",27,0)
 ;
"RTN","BPSRPT9",28,0)
 I BPRTYPE=8 S X=$$SELELIG(.BPELIG1) I X="^" Q
"RTN","BPSRPT9",29,0)
 ;
"RTN","BPSRPT9",30,0)
 ;Prompt to select Date Range
"RTN","BPSRPT9",31,0)
 ;Returns (Start Date^End Date)
"RTN","BPSRPT9",32,0)
 S BPDT=$$SELDATE() I BPDT="^" Q
"RTN","BPSRPT9",33,0)
 ;
"RTN","BPSRPT9",34,0)
 ;Get sort criteria
"RTN","BPSRPT9",35,0)
 I $$GETSORT(BPRTYPE)=-1 Q
"RTN","BPSRPT9",36,0)
 ;
"RTN","BPSRPT9",37,0)
 D DEV("RUN^BPSRPT9",BPRTYPE)
"RTN","BPSRPT9",38,0)
 Q
"RTN","BPSRPT9",39,0)
 ;
"RTN","BPSRPT9",40,0)
RUN ; Process Report - runs in the background or foreground
"RTN","BPSRPT9",41,0)
 N BPRPTARR
"RTN","BPSRPT9",42,0)
 I BPRTYPE=9 D GETSEC^BPSRPT9A(BPDT,.BPRPTARR)  ; Collect Potential Secondary Rx Claims data
"RTN","BPSRPT9",43,0)
 I BPRTYPE=8 D GETTRI^BPSRPT9A(BPDT,.BPRPTARR)  ; Collect Potential Dual Eligible Claims data
"RTN","BPSRPT9",44,0)
 ;
"RTN","BPSRPT9",45,0)
 U IO
"RTN","BPSRPT9",46,0)
 I BPRTYPE=8 D PRNTTRI(.BPRPTARR)
"RTN","BPSRPT9",47,0)
 I BPRTYPE=9 D PRNTSEC(.BPRPTARR)
"RTN","BPSRPT9",48,0)
 ;
"RTN","BPSRPT9",49,0)
 D ^%ZISC    ; close the device
"RTN","BPSRPT9",50,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","BPSRPT9",51,0)
 Q
"RTN","BPSRPT9",52,0)
 ;
"RTN","BPSRPT9",53,0)
 ; Print Dual Eligible Report
"RTN","BPSRPT9",54,0)
PRNTTRI(BPARR) ;
"RTN","BPSRPT9",55,0)
 N BPG,BPQUIT,CNT,RX,FILL,FILLDT,PATNAME,COB,ELIG,PAYER,INSC,PSRT,PSRTID,SSRT,TSRT,DATA
"RTN","BPSRPT9",56,0)
 N SSRTTYP,TSRTTYP
"RTN","BPSRPT9",57,0)
 S SSRTTYP=$P($P(BPSORT,U,2),":")
"RTN","BPSRPT9",58,0)
 S TSRTTYP=$P($P(BPSORT,U,3),":")
"RTN","BPSRPT9",59,0)
 S (BPG,BPQUIT,CNT)=0
"RTN","BPSRPT9",60,0)
 ;
"RTN","BPSRPT9",61,0)
 ; if no data found, display header and message and then get out
"RTN","BPSRPT9",62,0)
 I '$D(BPARR) D  Q
"RTN","BPSRPT9",63,0)
 . D HDR(BPRTYPE)
"RTN","BPSRPT9",64,0)
 . W !!?5,"No potential claims available for date range"
"RTN","BPSRPT9",65,0)
 . Q
"RTN","BPSRPT9",66,0)
 ;
"RTN","BPSRPT9",67,0)
 S PSRT=-DT-1
"RTN","BPSRPT9",68,0)
 D HDR(BPRTYPE)
"RTN","BPSRPT9",69,0)
 F  S PSRT=$O(BPARR(PSRT)) Q:PSRT=""  D  Q:BPQUIT
"RTN","BPSRPT9",70,0)
 . S PSRTID=$S($P($P(BPSORT,U),":")="N":"Patient Name: ",$P($P(BPSORT,U),":")="P":"Payer: ",$P($P(BPSORT,U),":")="S":"Date of Service: ",$P($P(BPSORT,U),":")="O":"Payer Sequence: ",$P($P(BPSORT,U),":")="E":"Patient Eligibility: ",1:"Division: ")
"RTN","BPSRPT9",71,0)
 . I PSRT'=0 W !!,PSRTID,$S($P($P(BPSORT,U),":")="S":$$FMTE^XLFDT($$ABS^XLFMTH(PSRT),"2D"),1:PSRT)
"RTN","BPSRPT9",72,0)
 . S SSRT=-DT-1 F  S SSRT=$O(BPARR(PSRT,SSRT)) Q:SSRT=""  D  Q:BPQUIT
"RTN","BPSRPT9",73,0)
 . . I SSRTTYP="D" W !,"   Division: ",SSRT
"RTN","BPSRPT9",74,0)
 . . S TSRT=-DT-1 F  S TSRT=$O(BPARR(PSRT,SSRT,TSRT)) Q:TSRT=""  D  Q:BPQUIT
"RTN","BPSRPT9",75,0)
 . . . I TSRTTYP="D" W !,"   Division: ",TSRT
"RTN","BPSRPT9",76,0)
 . . . S CNT=0 F  S CNT=$O(BPARR(PSRT,SSRT,TSRT,CNT)) Q:CNT=""  D  Q:BPQUIT
"RTN","BPSRPT9",77,0)
 . . . . S DATA=BPARR(PSRT,SSRT,TSRT,CNT)
"RTN","BPSRPT9",78,0)
 . . . . S RX=$P(DATA,U,2),FILL=$P(DATA,U,3),FILLDT=$P(DATA,U,4),PATNAME=$P(DATA,U,5)
"RTN","BPSRPT9",79,0)
 . . . . S INSC=0 F  S INSC=$O(BPARR(PSRT,SSRT,TSRT,CNT,"INS",INSC)) Q:INSC=""  D
"RTN","BPSRPT9",80,0)
 . . . . . S COB=$S(INSC=1:"p",INSC=2:"s",1:"t")
"RTN","BPSRPT9",81,0)
 . . . . . S ELIG=$P(BPARR(PSRT,SSRT,TSRT,CNT,"ELIG"),U)
"RTN","BPSRPT9",82,0)
 . . . . . ; BPS*1*18:  Modify ePharmacy Screens/Reports to Include the Validated HPID/OEID
"RTN","BPSRPT9",83,0)
 . . . . . S PAYER=$E($P(BPARR(PSRT,SSRT,TSRT,CNT,"INS",INSC),U)_"-"_$P(BPARR(PSRT,SSRT,TSRT,CNT,"INS",INSC),U,2),1,16)
"RTN","BPSRPT9",84,0)
 . . . . . I $Y>(IOSL-4) D HDR(BPRTYPE) Q:BPQUIT
"RTN","BPSRPT9",85,0)
 . . . . . ; BPS*1*18:  Modify ePharmacy Screens/Reports to Include the Validated HPID/OEID
"RTN","BPSRPT9",86,0)
 . . . . . W !,RX,?10,FILL,?13,FILLDT,?22,$E(PATNAME,1,15),?38,$P(DATA,U,6),?44,COB,?47,ELIG,?52,PAYER,?69,$P(BPARR(PSRT,SSRT,TSRT,CNT,"INS",INSC),U,3)
"RTN","BPSRPT9",87,0)
 . . . . . S ELIG=$S($P(BPARR(PSRT,SSRT,TSRT,CNT,"ELIG"),U,2)]"":$P(BPARR(PSRT,SSRT,TSRT,CNT,"ELIG"),U,2),1:"")
"RTN","BPSRPT9",88,0)
 . . . . . ; BPS*1*18:  Modify ePharmacy Screens/Reports to Include the Validated HPID/OEID
"RTN","BPSRPT9",89,0)
 . . . . . I ELIG]"" W !,?47,ELIG
"RTN","BPSRPT9",90,0)
 Q
"RTN","BPSRPT9",91,0)
 ;
"RTN","BPSRPT9",92,0)
 ; Print Secondary Report
"RTN","BPSRPT9",93,0)
PRNTSEC(BPARR) ;
"RTN","BPSRPT9",94,0)
 N BPG,BPQUIT,CNT,INSC,PAYER,PSRT,PSRTID,SSRT,TSRT,DATA,INSDATA,LGFLG1,LGFLG2
"RTN","BPSRPT9",95,0)
 N SSRTTYP,TSRTTYP
"RTN","BPSRPT9",96,0)
 S SSRTTYP=$P($P(BPSORT,U,2),":")
"RTN","BPSRPT9",97,0)
 S TSRTTYP=$P($P(BPSORT,U,3),":")
"RTN","BPSRPT9",98,0)
 S (BPG,BPQUIT)=0
"RTN","BPSRPT9",99,0)
 ;
"RTN","BPSRPT9",100,0)
 ; if no data found, display header and message and then get out
"RTN","BPSRPT9",101,0)
 I '$D(BPARR) D  Q
"RTN","BPSRPT9",102,0)
 . D HDR(BPRTYPE)
"RTN","BPSRPT9",103,0)
 . W !!?5,"No potential secondary Rx claims available for date range"
"RTN","BPSRPT9",104,0)
 . Q
"RTN","BPSRPT9",105,0)
 ;
"RTN","BPSRPT9",106,0)
 S PSRT=-DT-1
"RTN","BPSRPT9",107,0)
 D HDR(BPRTYPE)
"RTN","BPSRPT9",108,0)
 F  S PSRT=$O(BPARR(PSRT)) Q:PSRT=""  D  Q:BPQUIT
"RTN","BPSRPT9",109,0)
 . S PSRTID=$S($P($P(BPSORT,U),":")="N":"Patient Name: ",$P($P(BPSORT,U),":")="P":"Payer: ",$P($P(BPSORT,U),":")="S":"Date of Service: ",$P($P(BPSORT,U),":")="O":"Payer Sequence: ",1:"Division: ")
"RTN","BPSRPT9",110,0)
 . I PSRT'=0 W !!,PSRTID,$S($P($P(BPSORT,U),":")="S":$$FMTE^XLFDT($$ABS^XLFMTH(PSRT),"2D"),1:PSRT)
"RTN","BPSRPT9",111,0)
 . S SSRT=-DT-1 F  S SSRT=$O(BPARR(PSRT,SSRT)) Q:SSRT=""  D  Q:BPQUIT
"RTN","BPSRPT9",112,0)
 . . I SSRTTYP="D" W !,"   Division: ",SSRT
"RTN","BPSRPT9",113,0)
 . . S TSRT=-DT-1 F  S TSRT=$O(BPARR(PSRT,SSRT,TSRT)) Q:TSRT=""  D  Q:BPQUIT
"RTN","BPSRPT9",114,0)
 . . . I TSRTTYP="D" W !,"   Division: ",TSRT
"RTN","BPSRPT9",115,0)
 . . . S CNT=0 F  S CNT=$O(BPARR(PSRT,SSRT,TSRT,CNT)) Q:CNT=""  D  Q:BPQUIT
"RTN","BPSRPT9",116,0)
 . . . . S DATA=$G(BPARR(PSRT,SSRT,TSRT,CNT))
"RTN","BPSRPT9",117,0)
 . . . . I $Y>(IOSL-4) D HDR(BPRTYPE) Q:BPQUIT
"RTN","BPSRPT9",118,0)
 . . . . ; BPS*1*18:  Modify ePharmacy Screens/Reports to Include the Validated HPID/OEID
"RTN","BPSRPT9",119,0)
 . . . . I DATA]"" W !,$P(DATA,U,2),?11,$P(DATA,U,3),?21,$P(DATA,U,4),?26,$E($P(DATA,U,6),1,10),?37,$P(DATA,U,9),?43,$P(DATA,U,7),?46,$P(DATA,U,5),?55,$E($P(DATA,U,8),1,13),?69,$P(DATA,U,10)
"RTN","BPSRPT9",120,0)
 . . . . ;
"RTN","BPSRPT9",121,0)
 . . . . ; If the bill# contains "(P)" it is a primary ECME reject, flag it for the legend
"RTN","BPSRPT9",122,0)
 . . . . I $P(DATA,U,2)["(P)" S LGFLG1=1
"RTN","BPSRPT9",123,0)
 . . . . S INSC=0 F  S INSC=$O(BPARR(PSRT,SSRT,TSRT,CNT,INSC)) Q:INSC=""  D  Q:BPQUIT
"RTN","BPSRPT9",124,0)
 . . . . . S INSDATA=BPARR(PSRT,SSRT,TSRT,CNT,INSC)
"RTN","BPSRPT9",125,0)
 . . . . . I $Y>(IOSL-4) D HDR(BPRTYPE) Q:BPQUIT
"RTN","BPSRPT9",126,0)
 . . . . . ; BPS*1*18:  Modify ePharmacy Screens/Reports to Include the Validated HPID/OEID
"RTN","BPSRPT9",127,0)
 . . . . . W !,?43,$P(INSDATA,U),?55,$E($P(INSDATA,U,2),1,13),?69,$P(INSDATA,U,3)
"RTN","BPSRPT9",128,0)
 . . . . . I $P(INSDATA,U,1)["-" S LGFLG2=1
"RTN","BPSRPT9",129,0)
 ;
"RTN","BPSRPT9",130,0)
 Q:BPQUIT
"RTN","BPSRPT9",131,0)
 I '$G(LGFLG1),'$G(LGFLG2) Q
"RTN","BPSRPT9",132,0)
 ; display the legend at the end of the report
"RTN","BPSRPT9",133,0)
 I $Y>(IOSL-4) D HDR(BPRTYPE) Q:BPQUIT
"RTN","BPSRPT9",134,0)
 W !
"RTN","BPSRPT9",135,0)
 I $G(LGFLG1) W !,"Bill# ""(P) Rej"" indicates a rejected/closed primary ECME claim"
"RTN","BPSRPT9",136,0)
 I $G(LGFLG2) W !,"COB ""-"" indicates a blank COB field in the pt. ins. policy"
"RTN","BPSRPT9",137,0)
 Q
"RTN","BPSRPT9",138,0)
 ;
"RTN","BPSRPT9",139,0)
 ; Prompt for sort order
"RTN","BPSRPT9",140,0)
GETSORT(BPRTYPE) N DIR,DIRUT,DTOUT,DUOUT,X,Y,BPS1,BPS2,BPS3,BPS4,BPS5,BPSEL
"RTN","BPSRPT9",141,0)
 ;
"RTN","BPSRPT9",142,0)
 S BPSORT="^^",BPCRON=1
"RTN","BPSRPT9",143,0)
 S BPS1="N:Patient Name;",BPS2="P:Payer;",BPS3="S:Date Of Service;",BPS4="D:Division;"
"RTN","BPSRPT9",144,0)
 I BPRTYPE=8 S BPS5="E:Patient Eligibility;"
"RTN","BPSRPT9",145,0)
 ;
"RTN","BPSRPT9",146,0)
 D EN^DDIOL("SORT CRITERIA","","!")
"RTN","BPSRPT9",147,0)
 S BPSEL=BPS1_BPS2_BPS3_BPS4
"RTN","BPSRPT9",148,0)
 I BPRTYPE=8 S BPSEL=BPSEL_BPS5
"RTN","BPSRPT9",149,0)
 ;Set Primary Sort
"RTN","BPSRPT9",150,0)
 S DIR(0)="SB^"_BPSEL
"RTN","BPSRPT9",151,0)
 S DIR("?")="Enter a code from the list to indicate the Primary sort order."
"RTN","BPSRPT9",152,0)
 S DIR("A")="Primary Sort"
"RTN","BPSRPT9",153,0)
 S DIR("B")="Division"
"RTN","BPSRPT9",154,0)
 D ^DIR K DIR
"RTN","BPSRPT9",155,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) Q -1
"RTN","BPSRPT9",156,0)
 I BPRTYPE=9 S $P(BPSORT,U)=$S(Y=$P(BPS1,":"):BPS1,Y=$P(BPS2,":"):BPS2,Y=$P(BPS3,":"):BPS3,1:BPS4)
"RTN","BPSRPT9",157,0)
 I BPRTYPE=8 S $P(BPSORT,U)=$S(Y=$P(BPS1,":"):BPS1,Y=$P(BPS2,":"):BPS2,Y=$P(BPS3,":"):BPS3,Y=$P(BPS4,":"):BPS4,1:BPS5)
"RTN","BPSRPT9",158,0)
 I Y="S" S BPCRON=$$ASKCRON() I BPCRON="^" Q -1
"RTN","BPSRPT9",159,0)
 ;
"RTN","BPSRPT9",160,0)
 ;Get Secondary Sort
"RTN","BPSRPT9",161,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT9",162,0)
 S BPSEL=$$SRTORD($P($P(BPSORT,U),":"))
"RTN","BPSRPT9",163,0)
 S DIR(0)="SOB^"_BPSEL
"RTN","BPSRPT9",164,0)
 S DIR("?")="Enter a code from the list to indicate the Secondary sort order."
"RTN","BPSRPT9",165,0)
 S DIR("A")="Secondary Sort"
"RTN","BPSRPT9",166,0)
 D ^DIR K DIR
"RTN","BPSRPT9",167,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) Q -1
"RTN","BPSRPT9",168,0)
 I BPRTYPE=9 S $P(BPSORT,U,2)=$S(Y=$P(BPS1,":"):BPS1,Y=$P(BPS2,":"):BPS2,Y=$P(BPS3,":"):BPS3,1:BPS4)
"RTN","BPSRPT9",169,0)
 I BPRTYPE=8 S $P(BPSORT,U,2)=$S(Y=$P(BPS1,":"):BPS1,Y=$P(BPS2,":"):BPS2,Y=$P(BPS3,":"):BPS3,Y=$P(BPS4,":"):BPS4,1:BPS5)
"RTN","BPSRPT9",170,0)
 I Y="S" S BPCRON=$$ASKCRON() I BPCRON="^" Q -1
"RTN","BPSRPT9",171,0)
 ;
"RTN","BPSRPT9",172,0)
 ;Get Tertiary Sort
"RTN","BPSRPT9",173,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT9",174,0)
 S BPSEL=$$SRTORD($P($P(BPSORT,U,2),":"))
"RTN","BPSRPT9",175,0)
 S DIR(0)="SOB^"_BPSEL
"RTN","BPSRPT9",176,0)
 S DIR("A")="Tertiary Sort"
"RTN","BPSRPT9",177,0)
 S DIR("?")="Enter a code from the list to indicate the Tertiary sort order."
"RTN","BPSRPT9",178,0)
 D ^DIR K DIR
"RTN","BPSRPT9",179,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) Q -1
"RTN","BPSRPT9",180,0)
 I BPRTYPE=9 S $P(BPSORT,U,3)=$S(Y=$P(BPS1,":"):BPS1,Y=$P(BPS2,":"):BPS2,Y=$P(BPS3,":"):BPS3,1:BPS4)
"RTN","BPSRPT9",181,0)
 I BPRTYPE=8 S $P(BPSORT,U,3)=$S(Y=$P(BPS1,":"):BPS1,Y=$P(BPS2,":"):BPS2,Y=$P(BPS3,":"):BPS3,Y=$P(BPS4,":"):BPS4,1:BPS5)
"RTN","BPSRPT9",182,0)
 I Y="S" S BPCRON=$$ASKCRON() I BPCRON="^" Q -1
"RTN","BPSRPT9",183,0)
 Q 0
"RTN","BPSRPT9",184,0)
 ;
"RTN","BPSRPT9",185,0)
 ;Ask if Date should be displayed in chronological order
"RTN","BPSRPT9",186,0)
ASKCRON() ;
"RTN","BPSRPT9",187,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT9",188,0)
 S DIR(0)="Y"
"RTN","BPSRPT9",189,0)
 S DIR("A")="     Display oldest date first"
"RTN","BPSRPT9",190,0)
 S DIR("B")="YES"
"RTN","BPSRPT9",191,0)
 D ^DIR K DIR
"RTN","BPSRPT9",192,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($D(DIRUT)) Q "^"
"RTN","BPSRPT9",193,0)
 Q Y
"RTN","BPSRPT9",194,0)
 ;
"RTN","BPSRPT9",195,0)
 ;Handle the sort order display
"RTN","BPSRPT9",196,0)
SRTORD(Y) ;
"RTN","BPSRPT9",197,0)
 I Y="N" S BPS1=""
"RTN","BPSRPT9",198,0)
 I Y="P" S BPS2=""
"RTN","BPSRPT9",199,0)
 I Y="S" S BPS3=""
"RTN","BPSRPT9",200,0)
 I Y="D" S BPS4=""
"RTN","BPSRPT9",201,0)
 I BPRTYPE=8,Y="E" S BPS5=""
"RTN","BPSRPT9",202,0)
 S BPSEL=BPS1_BPS2_BPS3_BPS4
"RTN","BPSRPT9",203,0)
 I BPRTYPE=8 S BPSEL=BPSEL_BPS5
"RTN","BPSRPT9",204,0)
 Q BPSEL
"RTN","BPSRPT9",205,0)
 ;
"RTN","BPSRPT9",206,0)
 ; Enter Date Range
"RTN","BPSRPT9",207,0)
 ;
"RTN","BPSRPT9",208,0)
 ; Return Value -> P1^P2
"RTN","BPSRPT9",209,0)
 ; 
"RTN","BPSRPT9",210,0)
 ;           where P1 = Earliest Date
"RTN","BPSRPT9",211,0)
 ;                    = ^ Exit
"RTN","BPSRPT9",212,0)
 ;                 P2 = Latest Date
"RTN","BPSRPT9",213,0)
 ;                    = blank for Exit
"RTN","BPSRPT9",214,0)
SELDATE() ;
"RTN","BPSRPT9",215,0)
 N BPSIBDT,DIR,DIRUT,DTOUT,DUOUT,VAL,X,Y
"RTN","BPSRPT9",216,0)
 S VAL="",DIR(0)="DA^:DT:EX",DIR("A")="EARLIEST DATE: "
"RTN","BPSRPT9",217,0)
 W ! D ^DIR
"RTN","BPSRPT9",218,0)
 ;
"RTN","BPSRPT9",219,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT9",220,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S VAL="^"
"RTN","BPSRPT9",221,0)
 ;
"RTN","BPSRPT9",222,0)
 I VAL="" D
"RTN","BPSRPT9",223,0)
 .S $P(VAL,U)=Y
"RTN","BPSRPT9",224,0)
 .S DIR(0)="DA^"_VAL_":DT:EX",DIR("A")="  LATEST DATE: ",DIR("B")="T"
"RTN","BPSRPT9",225,0)
 .D ^DIR
"RTN","BPSRPT9",226,0)
 .;
"RTN","BPSRPT9",227,0)
 .;Check for "^", timeout, or blank entry
"RTN","BPSRPT9",228,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S VAL="^" Q
"RTN","BPSRPT9",229,0)
 .;
"RTN","BPSRPT9",230,0)
 .;Define Entry
"RTN","BPSRPT9",231,0)
 .S $P(VAL,U,2)=Y
"RTN","BPSRPT9",232,0)
 ;
"RTN","BPSRPT9",233,0)
 Q VAL
"RTN","BPSRPT9",234,0)
 ;
"RTN","BPSRPT9",235,0)
 ;
"RTN","BPSRPT9",236,0)
 ;Device Selection
"RTN","BPSRPT9",237,0)
 ;Input: BPR = Routine
"RTN","BPSRPT9",238,0)
 ;       BPRTYPE = Report Type used to identify Task name
"RTN","BPSRPT9",239,0)
DEV(BPR,BPRTYPE) ;
"RTN","BPSRPT9",240,0)
 N %ZIS,ZTSK,ZTSAVE,POP,ZTRTN,ZTDESC
"RTN","BPSRPT9",241,0)
 S %ZIS="MQ" D ^%ZIS Q:POP
"RTN","BPSRPT9",242,0)
 I $D(IO("Q")) D  Q
"RTN","BPSRPT9",243,0)
 . S ZTRTN=BPR,ZTDESC=$$RPTNAME(BPRTYPE),ZTSAVE("BP*")=""
"RTN","BPSRPT9",244,0)
 . D ^%ZTLOAD,HOME^%ZIS K IO("Q") W !,"QUEUED TASK #",ZTSK
"RTN","BPSRPT9",245,0)
 D @BPR
"RTN","BPSRPT9",246,0)
 Q
"RTN","BPSRPT9",247,0)
 ;
"RTN","BPSRPT9",248,0)
RPTNAME(BPRTYPE) ;
"RTN","BPSRPT9",249,0)
 ;Verify that a valid report has been requested
"RTN","BPSRPT9",250,0)
 Q $S(BPRTYPE=8:"Potential Claims Report for Dual Eligible",BPRTYPE=9:"Potential Secondary Rx Claims Report",1:"")
"RTN","BPSRPT9",251,0)
 ;
"RTN","BPSRPT9",252,0)
 ;Print the report Header
"RTN","BPSRPT9",253,0)
 ;Input: BPRTYPE = Report Type
"RTN","BPSRPT9",254,0)
HDR(BPRTYPE) ;
"RTN","BPSRPT9",255,0)
 ; BPG is assumed for page #
"RTN","BPSRPT9",256,0)
 Q:BPQUIT
"RTN","BPSRPT9",257,0)
 N DIR,X,Y,BPDIV
"RTN","BPSRPT9",258,0)
 I $E(IOST,1,2)="C-",BPG S DIR(0)="E" D ^DIR K DIR I $D(DIRUT)!($D(DUOUT)) S BPQUIT=1 K DIRUT,DTOUT,DUOUT Q
"RTN","BPSRPT9",259,0)
 S BPG=BPG+1
"RTN","BPSRPT9",260,0)
 W @IOF
"RTN","BPSRPT9",261,0)
 F X=1:1:IOM W "="
"RTN","BPSRPT9",262,0)
 W $$RPTNAME(BPRTYPE),"     ",$$FMTE^XLFDT($P(BPDT,U),"2D")," - ",$$FMTE^XLFDT($P(BPDT,U,2),"2D"),?IOM-10," Page: ",BPG
"RTN","BPSRPT9",263,0)
 W !,"Selected Divisions: "
"RTN","BPSRPT9",264,0)
 I 'BPPHARM W "ALL"
"RTN","BPSRPT9",265,0)
 I BPPHARM S X=0 F  S X=$O(BPPHARM(X)) Q:X=""  W $P(BPPHARM(X),U,2),"; "
"RTN","BPSRPT9",266,0)
 I BPRTYPE=8 D
"RTN","BPSRPT9",267,0)
 .W !,"Selected Patient Eligibility: "
"RTN","BPSRPT9",268,0)
 .I BPELIG1=0 W "ALL" Q
"RTN","BPSRPT9",269,0)
 .I $D(BPELIG1("C")) W "CHAMPVA"
"RTN","BPSRPT9",270,0)
 .I $D(BPELIG1("C")),$D(BPELIG1("T")) W "; "
"RTN","BPSRPT9",271,0)
 .I $D(BPELIG1("T")) W "TRICARE"
"RTN","BPSRPT9",272,0)
 W !,"Sorted By: "_$P($P(BPSORT,U),":",2)_" "_$P($P(BPSORT,U,2),":",2)_" "_$P($P(BPSORT,U,3),":",2)
"RTN","BPSRPT9",273,0)
 ; BPS*1*18:  Modify ePharmacy Screens/Reports to Include the Validated HPID/OEID
"RTN","BPSRPT9",274,0)
 W !,"'*' indicates the HPID/OEID failed validation checks"
"RTN","BPSRPT9",275,0)
 ; Write header for Potential Secondary Claims Rpt
"RTN","BPSRPT9",276,0)
 I BPRTYPE=9 D
"RTN","BPSRPT9",277,0)
 . ; BPS*1*18:  Modify ePharmacy Screens/Reports to Include the Validated HPID/OEID
"RTN","BPSRPT9",278,0)
 . W !,"Bill#",?11,"RX#",?21,"Fill",?26,"Patient",?36,"PatID",?42,"COB",?46,"Date",?55,"Payers",?69,"HPID/OEID",!
"RTN","BPSRPT9",279,0)
 ; Write header for Potential Dual Eligible Claims Rpt
"RTN","BPSRPT9",280,0)
 I BPRTYPE=8 D
"RTN","BPSRPT9",281,0)
 . ; BPS*1*18:  Modify ePharmacy Screens/Reports to Include the Validated HPID/OEID
"RTN","BPSRPT9",282,0)
 . W !,"RX#",?9,"Fill",?14,"Date",?22,"Patient",?37,"PatID",?43,"COB",?47,"Elig",?53,"Payers",?69,"HPID/OEID",!
"RTN","BPSRPT9",283,0)
 F X=1:1:IOM W "-"
"RTN","BPSRPT9",284,0)
 Q
"RTN","BPSRPT9",285,0)
 ;
"RTN","BPSRPT9",286,0)
SELELIG(BPELIG1) ;Select Eligibility Types
"RTN","BPSRPT9",287,0)
 N DIR,X
"RTN","BPSRPT9",288,0)
 ;
"RTN","BPSRPT9",289,0)
 S DIR(0)="SO^T:TRICARE;C:CHAMPVA;A:ALL"
"RTN","BPSRPT9",290,0)
 S DIR("A")="Display (T)RICARE or (C)HAMPVA or (A)LL Entries"
"RTN","BPSRPT9",291,0)
 S DIR("B")="A"
"RTN","BPSRPT9",292,0)
 ;
"RTN","BPSRPT9",293,0)
 S X=$$SELMULTI^BPSOPR(.DIR,.BPELIG1)
"RTN","BPSRPT9",294,0)
 Q X
"RTN","BPSRPT9",295,0)
 ;
"RTN","BPSRPT9A")
0^13^B99973308
"RTN","BPSRPT9A",1,0)
BPSRPT9A ;BHAM ISC/BNT - ECME REPORTS UTILITIES ;19-SEPT-08
"RTN","BPSRPT9A",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8,9,18,20**;01-JUN-04;Build 27
"RTN","BPSRPT9A",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRPT9A",4,0)
 ;
"RTN","BPSRPT9A",5,0)
 ; Use of COLLECT^IBOSRX supported by IA 5361
"RTN","BPSRPT9A",6,0)
 ; Use of $$INSUR^IBBAPI supported by IA 4419
"RTN","BPSRPT9A",7,0)
 ; Use of $$RNB^IBNCPDPI supported by IA 4729
"RTN","BPSRPT9A",8,0)
 ; Use of $$BILINF^IBNCPUT3 supported by IA 5355
"RTN","BPSRPT9A",9,0)
 ; Use of  $$HPD^IBCNHUT1 supported by IA #6061
"RTN","BPSRPT9A",10,0)
 ; Use of $$BILLABLE^IBNCPDP supported by IA #6243
"RTN","BPSRPT9A",11,0)
 Q
"RTN","BPSRPT9A",12,0)
 ;
"RTN","BPSRPT9A",13,0)
 ; Collect the Potential Secondary Rx Claims Report data
"RTN","BPSRPT9A",14,0)
GETSEC(BPDT,BPARR) ;
"RTN","BPSRPT9A",15,0)
 N CNT,IBARR S CNT=0
"RTN","BPSRPT9A",16,0)
 N BPSX,BPSY
"RTN","BPSRPT9A",17,0)
 N BPS56 S BPS56=0
"RTN","BPSRPT9A",18,0)
 I '$D(ZTQUEUED),$E(IOST,1,2)="C-" W !!,"Collecting Potential Secondary data ..."
"RTN","BPSRPT9A",19,0)
 K ^TMP("BPSRPT9A",$J)
"RTN","BPSRPT9A",20,0)
 D COLLECT^IBOSRX($P(BPDT,U),$P(BPDT,U,2))   ; get IB claim data (DBIA 5361)
"RTN","BPSRPT9A",21,0)
 D GATHER($P(BPDT,U,1),$P(BPDT,U,2))         ; get ECME claim data - esg 7/6/10
"RTN","BPSRPT9A",22,0)
 I '$D(^TMP("BPSRPT9A",$J)) Q
"RTN","BPSRPT9A",23,0)
 F  S CNT=$O(^TMP("BPSRPT9A",$J,CNT)) Q:CNT=""  D
"RTN","BPSRPT9A",24,0)
 . N DATA,RXI,RXN,RXF,DOS,BILL,DFN,PATNAME,BPDIV,INSC,X,COB,PINS,BP59S,BP59P,IBIFN,TOTCHG,BAL,BPSRESP,BPSPAID,BPSINFO,BPSRET
"RTN","BPSRPT9A",25,0)
 . S DATA=$G(^TMP("BPSRPT9A",$J,CNT))
"RTN","BPSRPT9A",26,0)
 . S RXI=$P(DATA,U,1),RXN=$P(DATA,U,2),RXF=$P(DATA,U,3),BILL=$P(DATA,U,4),DFN=$P(DATA,U,5),DOS=$P(DATA,U,6),PINS=$P(DATA,U,7)
"RTN","BPSRPT9A",27,0)
 . S IBIFN=$P(DATA,U,8),TOTCHG=$P(DATA,U,9)
"RTN","BPSRPT9A",28,0)
 . Q:(RXI="")!(RXN="")!(RXF="")!(BILL="")!(DFN="")!(DOS="")!(PINS="")
"RTN","BPSRPT9A",29,0)
 . S PATNAME=$$GET1^DIQ(2,DFN,.01)
"RTN","BPSRPT9A",30,0)
 . ;
"RTN","BPSRPT9A",31,0)
 . ; Drop the claim off this report if the Secondary claim is closed in ECME
"RTN","BPSRPT9A",32,0)
 . ; esg - 7/6/10
"RTN","BPSRPT9A",33,0)
 . S BP59S=+$$IEN59^BPSOSRX(RXI,RXF,2)  ; possible ien to file 9002313.59 for the secondary claim
"RTN","BPSRPT9A",34,0)
 . I $$CLOSED02^BPSSCR03(+$P($G(^BPST(BP59S,0)),U,4)) Q
"RTN","BPSRPT9A",35,0)
 . ;
"RTN","BPSRPT9A",36,0)
 . ; Drop the claim off this report if the Secondary claim is Payable
"RTN","BPSRPT9A",37,0)
 . ; bnt - 7/14/10
"RTN","BPSRPT9A",38,0)
 . S BP59P=+$$IEN59^BPSOSRX(RXI,RXF,1)  ; possible ien to file 9002313.59 for the primary claim
"RTN","BPSRPT9A",39,0)
 . I $$PAYBLSEC^BPSUTIL2(BP59P) Q
"RTN","BPSRPT9A",40,0)
 . ;
"RTN","BPSRPT9A",41,0)
 . ; Drop the claim off this report if the primary payer paid the full amount
"RTN","BPSRPT9A",42,0)
 . ; esg - 8/3/10
"RTN","BPSRPT9A",43,0)
 . I IBIFN,TOTCHG D  I BAL'>0 Q    ; check balance due on entries with payable primary claims
"RTN","BPSRPT9A",44,0)
 .. S BPSRESP=+$P($G(^BPST(BP59P,0)),U,5)  ; response file ien
"RTN","BPSRPT9A",45,0)
 .. S BPSPAID=0
"RTN","BPSRPT9A",46,0)
 .. I BPSRESP S BPSPAID=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,9))   ; paid amt
"RTN","BPSRPT9A",47,0)
 .. S BAL=TOTCHG-BPSPAID    ; balance due:  total charges - primary payer paid amt
"RTN","BPSRPT9A",48,0)
 .. Q
"RTN","BPSRPT9A",49,0)
 . ;
"RTN","BPSRPT9A",50,0)
 . S BPDIV=$$GETDIV^BPSOSQC(RXI,RXF) Q:'BPDIV  ;Outpatient Site #59 ien
"RTN","BPSRPT9A",51,0)
 . S BPS56=+$O(^BPS(9002313.56,"C",BPDIV,0)) Q:'BPS56  ;BPS PHARMACIES #9002313.56 ien
"RTN","BPSRPT9A",52,0)
 . ;filter divisions
"RTN","BPSRPT9A",53,0)
 . I BPPHARM=1,'$D(BPPHARM(BPS56)) Q
"RTN","BPSRPT9A",54,0)
 . S BPDIV(BPDIV)=$$DIVNAME^BPSSCRDS(BPS56)
"RTN","BPSRPT9A",55,0)
 . ;
"RTN","BPSRPT9A",56,0)
 . S PSRT=$S($P($P(BPSORT,U,1),":")="N":PATNAME,$P($P(BPSORT,U,1),":")="P":PINS,$P($P(BPSORT,U,1),":")="S":$S('BPCRON:-DOS,1:DOS),1:BPDIV(BPDIV))
"RTN","BPSRPT9A",57,0)
 . S SSRT=$S($P($P(BPSORT,U,2),":")="N":PATNAME,$P($P(BPSORT,U,2),":")="P":PINS,$P($P(BPSORT,U,2),":")="S":$S('BPCRON:-DOS,1:DOS),$P($P(BPSORT,U,2),":")="D":BPDIV(BPDIV),1:0)
"RTN","BPSRPT9A",58,0)
 . S TSRT=$S($P($P(BPSORT,U,3),":")="N":PATNAME,$P($P(BPSORT,U,3),":")="P":PINS,$P($P(BPSORT,U,3),":")="S":$S('BPCRON:-DOS,1:DOS),$P($P(BPSORT,U,3),":")="D":BPDIV(BPDIV),1:0)
"RTN","BPSRPT9A",59,0)
 . Q:((SSRT="")!(PSRT="")!(TSRT=""))
"RTN","BPSRPT9A",60,0)
 . ; BPS*1*18:  Modify ePharmacy Screens/Reports to Include the Validated HPID/OEID - IB ICR #6061 (get ins ien using IB ICR#5355)
"RTN","BPSRPT9A",61,0)
 . S BPSRET=$$BILINF^IBNCPUT3(IBIFN,.BPSINFO)
"RTN","BPSRPT9A",62,0)
 . S BPARR(PSRT,SSRT,TSRT,CNT)=BPDIV(BPDIV)_U_BILL_U_RXN_U_RXF_U_$$FMTE^XLFDT(DOS,"2D")_U_PATNAME_U_"p"_U_PINS_U_$$SSN4^BPSRPT6(DFN)_U_$$HPD^IBCNHUT1($G(BPSINFO("INS IEN")),1)
"RTN","BPSRPT9A",63,0)
 . S (X,INSC)=0
"RTN","BPSRPT9A",64,0)
 . F  S X=$O(^TMP("BPSRPT9A",$J,CNT,X)) Q:X=""  D
"RTN","BPSRPT9A",65,0)
 . . S BPSX=$G(^TMP("BPSRPT9A",$J,CNT,X,7))
"RTN","BPSRPT9A",66,0)
 . . S COB=$S($P(BPSX,U)=1:"p",$P(BPSX,U)=2:"s",$P(BPSX,U)=3:"t",1:"-")
"RTN","BPSRPT9A",67,0)
 . . S BPSY=$P($G(^TMP("BPSRPT9A",$J,CNT,X,1)),U,2)
"RTN","BPSRPT9A",68,0)
 . . Q:BPSY[PINS
"RTN","BPSRPT9A",69,0)
 . . ; BPS*1*18:  Modify ePharmacy Screens/Reports to Include the Validated HPID/OEID - IB ICR #6061
"RTN","BPSRPT9A",70,0)
 . . S BPARR(PSRT,SSRT,TSRT,CNT,X)=COB_U_BPSY_U_$$HPD^IBCNHUT1($P($G(^TMP("BPSRPT9A",$J,CNT,X,1)),U),1)
"RTN","BPSRPT9A",71,0)
 K ^TMP("BPSRPT9A",$J)
"RTN","BPSRPT9A",72,0)
 Q
"RTN","BPSRPT9A",73,0)
 ;
"RTN","BPSRPT9A",74,0)
 ; Collect the Potential Claims Report for Dual Eligible
"RTN","BPSRPT9A",75,0)
 ; Build array with report data
"RTN","BPSRPT9A",76,0)
 ; BPARR(n)=DIVISION NAME^RX#^FILL^FILL DATE^PATIENT NAME
"RTN","BPSRPT9A",77,0)
 ; BPARR(n,"INS",1)=PRIMARY INS NAME^PRIMARY INS ADDRESS
"RTN","BPSRPT9A",78,0)
 ; BPARR(n,"INS",2)=SECONDARY INS NAME^SECONDARY INS ADDRESS
"RTN","BPSRPT9A",79,0)
 ; BPARR(n,"ELIG")=ELIG 1^ELIG 2^...
"RTN","BPSRPT9A",80,0)
GETTRI(BPDT,BPARR) ;
"RTN","BPSRPT9A",81,0)
 N RXI,RXN,RXF,RXFDT,LIST,RXLIST,BPQUIT,CNT,BPSFLDN,BPHPD,RXELIG
"RTN","BPSRPT9A",82,0)
 S REF=$NA(^TMP($J,"BPSRPT9","AD"))
"RTN","BPSRPT9A",83,0)
 S BPSFLDN=".01;2;6"
"RTN","BPSRPT9A",84,0)
 K @REF
"RTN","BPSRPT9A",85,0)
 S (RXFDT,BPDRUG,CNT)=0,LIST="BPSRPT9"
"RTN","BPSRPT9A",86,0)
 I '$D(ZTQUEUED),$E(IOST,1,2)="C-" W !!,"Collecting Dual Eligible data ..."
"RTN","BPSRPT9A",87,0)
 D REF^PSO52EX($P(BPDT,U),$P(BPDT,U,2),LIST)
"RTN","BPSRPT9A",88,0)
 I '$D(@REF) Q
"RTN","BPSRPT9A",89,0)
 F  S RXFDT=$O(@REF@(RXFDT)) Q:RXFDT=""  D
"RTN","BPSRPT9A",90,0)
 . S RXI=0 F  S RXI=$O(@REF@(RXFDT,RXI)) Q:RXI=""  D
"RTN","BPSRPT9A",91,0)
 . . S RXF=-1 F  S RXF=$O(@REF@(RXFDT,RXI,RXF)) Q:RXF=""  D
"RTN","BPSRPT9A",92,0)
 . . . N BPELIG,VAEL,BPDRUG,BPIE,DFN,ARR,BPDIV,PSRT,SSRT,TSRT,BPS56,PSC,SSC,TSC
"RTN","BPSRPT9A",93,0)
 . . . S (BPQUIT,BPDIV,BPS56)=0
"RTN","BPSRPT9A",94,0)
 . . . ; Check Pharmacy Division against selected Divisions
"RTN","BPSRPT9A",95,0)
 . . . S BPDIV=$$GETDIV^BPSOSQC(RXI,RXF) Q:'BPDIV  ;Outpatient Site #59 ien
"RTN","BPSRPT9A",96,0)
 . . . S BPS56=+$O(^BPS(9002313.56,"C",BPDIV,0)) Q:'BPS56  ;BPS PHARMACIES #9002313.56 ien
"RTN","BPSRPT9A",97,0)
 . . . ;filter divisions
"RTN","BPSRPT9A",98,0)
 . . . I BPPHARM=1,'$D(BPPHARM(BPS56)) Q
"RTN","BPSRPT9A",99,0)
 . . . D RXAPI^BPSUTIL1(RXI,BPSFLDN,"ARR","IE")
"RTN","BPSRPT9A",100,0)
 . . . S DFN=ARR(52,RXI,2,"I") Q:'DFN
"RTN","BPSRPT9A",101,0)
 . . . D ELIG^VADPT
"RTN","BPSRPT9A",102,0)
 . . . ; Check for TRICARE, SHARING AGREEMENT, or CHAMPVA
"RTN","BPSRPT9A",103,0)
 . . . S BPELIG=$P(VAEL(1),U,2)
"RTN","BPSRPT9A",104,0)
 . . . S BPQUIT=$S(BPELIG="TRICARE":0,BPELIG="SHARING AGREEMENT":0,BPELIG="CHAMPVA":0,1:1)
"RTN","BPSRPT9A",105,0)
 . . . S BPELIG(1)=$E(BPELIG,1,4)
"RTN","BPSRPT9A",106,0)
 . . . S X=-1 F  S X=$O(VAEL(1,X)) Q:X=""  D
"RTN","BPSRPT9A",107,0)
 . . . . S BPELIG=$P(VAEL(1,X),U,2)
"RTN","BPSRPT9A",108,0)
 . . . . S BPQUIT=$S(BPELIG="TRICARE":0,BPELIG="SHARING AGREEMENT":0,BPELIG="CHAMPVA":0,1:1)
"RTN","BPSRPT9A",109,0)
 . . . . S BPELIG(1)=BPELIG(1)_U_$E(BPELIG,1,4)
"RTN","BPSRPT9A",110,0)
 . . . Q:$S(BPELIG(1)["TRIC":0,BPELIG(1)["SHAR":0,BPELIG(1)["CHAM":0,1:1)
"RTN","BPSRPT9A",111,0)
 . . . S BPDRUG=ARR(52,RXI,6,"I") Q:'BPDRUG
"RTN","BPSRPT9A",112,0)
 . . . ;
"RTN","BPSRPT9A",113,0)
 . . . ; exclude drugs that are exempt from billing - BPS*1*20 - use the IB billable API
"RTN","BPSRPT9A",114,0)
 . . . I RXF S RXELIG=$$REFAPI1^BPSUTIL1(RXI,RXF,85,"I")    ; 52.1,85 billing eligibility indicator
"RTN","BPSRPT9A",115,0)
 . . . I 'RXF S RXELIG=$$RXAPI1^BPSUTIL1(RXI,85,"I")        ;   52,85 billing eligibility indicator
"RTN","BPSRPT9A",116,0)
 . . . I '$$BILLABLE^IBNCPDP(BPDRUG,RXELIG) Q               ; drug is non-billable - IA# 6243
"RTN","BPSRPT9A",117,0)
 . . . ;
"RTN","BPSRPT9A",118,0)
 . . . ; exclude Rx if it is non-billable - esg 8/4/10
"RTN","BPSRPT9A",119,0)
 . . . I +$$RNB^IBNCPDPI(RXI,RXF) Q
"RTN","BPSRPT9A",120,0)
 . . . ;
"RTN","BPSRPT9A",121,0)
 . . . ; exclude Rx if it is not released - esg 8/5/10
"RTN","BPSRPT9A",122,0)
 . . . I '$$RELDATE^BPSBCKJ(RXI,RXF) Q
"RTN","BPSRPT9A",123,0)
 . . . ;
"RTN","BPSRPT9A",124,0)
 . . . ; exclude Rx if Inpatient and non-billable at time of Release
"RTN","BPSRPT9A",125,0)
 . . . I $$INP(RXI,RXF) Q
"RTN","BPSRPT9A",126,0)
 . . . ;
"RTN","BPSRPT9A",127,0)
 . . . ; Make sure not already ECME billed
"RTN","BPSRPT9A",128,0)
 . . . Q:$$STATUS^BPSOSRX(RXI,RXF)'=""
"RTN","BPSRPT9A",129,0)
 . . . ; Check for TRICARE and CHAMPVA type insurance group
"RTN","BPSRPT9A",130,0)
 . . . N BPIBA,X,BPOK,BPINS,I
"RTN","BPSRPT9A",131,0)
 . . . I '$$INSUR^IBBAPI(DFN,RXFDT,"P",.BPIBA,"*") Q
"RTN","BPSRPT9A",132,0)
 . . . S (X,BPOK)=0 F I=1:1 S X=$O(BPIBA("IBBAPI","INSUR",X)) Q:X=""  D
"RTN","BPSRPT9A",133,0)
 . . . . I $D(BPELIG1("T"))!(BPELIG1=0),$P(BPIBA("IBBAPI","INSUR",X,21),U,2)="TRICARE" S BPOK=1
"RTN","BPSRPT9A",134,0)
 . . . . I $D(BPELIG1("C"))!(BPELIG1=0),$P(BPIBA("IBBAPI","INSUR",X,21),U,2)="CHAMPVA" S BPOK=1
"RTN","BPSRPT9A",135,0)
 . . . . N BPCOB S BPCOB=$P(BPIBA("IBBAPI","INSUR",X,7),U) S:BPCOB="" BPCOB=1
"RTN","BPSRPT9A",136,0)
 . . . . ; BPS*1*18:  Modify ePharmacy Screens/Reports to Include the Validated HPID/OEID - IB ICR #6061
"RTN","BPSRPT9A",137,0)
 . . . . S BPINS(DFN,BPCOB)=$P(BPIBA("IBBAPI","INSUR",X,1),U,2)_U_BPIBA("IBBAPI","INSUR",X,2)_U_$$HPD^IBCNHUT1($P(BPIBA("IBBAPI","INSUR",X,1),U),1)
"RTN","BPSRPT9A",138,0)
 . . . Q:'BPOK
"RTN","BPSRPT9A",139,0)
 . . . ; Build the return array since all filters have passed
"RTN","BPSRPT9A",140,0)
 . . . S CNT=CNT+1,BPDIV(BPDIV)=$$DIVNAME^BPSSCRDS(BPS56)
"RTN","BPSRPT9A",141,0)
 . . . ;
"RTN","BPSRPT9A",142,0)
 . . . S PSC=$P($P(BPSORT,U,1),":",1)    ; primary sort choice
"RTN","BPSRPT9A",143,0)
 . . . S SSC=$P($P(BPSORT,U,2),":",1)    ; secondary sort choice
"RTN","BPSRPT9A",144,0)
 . . . S TSC=$P($P(BPSORT,U,3),":",1)    ; tertiary sort choice
"RTN","BPSRPT9A",145,0)
 . . . ;
"RTN","BPSRPT9A",146,0)
 . . . ; primary sort value
"RTN","BPSRPT9A",147,0)
 . . . S PSRT=$S(PSC="N":$E(ARR(52,RXI,2,"E"),1,20),PSC="P":$P($G(BPINS(DFN,+$O(BPINS(DFN,0)))),U),PSC="S":$S('BPCRON:-RXFDT,1:RXFDT),PSC="E":BPELIG(1),1:BPDIV(BPDIV))
"RTN","BPSRPT9A",148,0)
 . . . ;
"RTN","BPSRPT9A",149,0)
 . . . ; secondary sort value
"RTN","BPSRPT9A",150,0)
 . . . S SSRT=$S(SSC="N":$E(ARR(52,RXI,2,"E"),1,20),SSC="P":$P($G(BPINS(DFN,+$O(BPINS(DFN,0)))),U),SSC="S":$S('BPCRON:-RXFDT,1:RXFDT),SSC="D":BPDIV(BPDIV),SSC="E":BPELIG(1),1:0)
"RTN","BPSRPT9A",151,0)
 . . . ;
"RTN","BPSRPT9A",152,0)
 . . . ; tertiary sort value
"RTN","BPSRPT9A",153,0)
 . . . S TSRT=$S(TSC="N":$E(ARR(52,RXI,2,"E"),1,20),TSC="P":$P($G(BPINS(DFN,+$O(BPINS(DFN,0)))),U),TSC="S":$S('BPCRON:-RXFDT,1:RXFDT),TSC="D":BPDIV(BPDIV),TSC="E":BPELIG(1),1:0)
"RTN","BPSRPT9A",154,0)
 . . . ;
"RTN","BPSRPT9A",155,0)
 . . . Q:((SSRT="")!(PSRT="")!(TSRT=""))
"RTN","BPSRPT9A",156,0)
 . . . S BPARR(PSRT,SSRT,TSRT,CNT)=BPDIV(BPDIV)_U_ARR(52,RXI,.01,"E")_U_RXF_U_$$FMTE^XLFDT(RXFDT,"2D")_U_$E(ARR(52,RXI,2,"E"),1,20)_U_$$SSN4^BPSRPT6(DFN)
"RTN","BPSRPT9A",157,0)
 . . . I $D(BPINS(DFN,1)) S BPARR(PSRT,SSRT,TSRT,CNT,"INS",1)=BPINS(DFN,1)
"RTN","BPSRPT9A",158,0)
 . . . I $D(BPINS(DFN,2)) S BPARR(PSRT,SSRT,TSRT,CNT,"INS",2)=BPINS(DFN,2)
"RTN","BPSRPT9A",159,0)
 . . . S BPARR(PSRT,SSRT,TSRT,CNT,"ELIG")=BPELIG(1)
"RTN","BPSRPT9A",160,0)
 K @REF,REF
"RTN","BPSRPT9A",161,0)
 I $D(BPARR) S BPARR(0)=CNT
"RTN","BPSRPT9A",162,0)
 Q
"RTN","BPSRPT9A",163,0)
 ;
"RTN","BPSRPT9A",164,0)
GATHER(SDT,EDT) ; Gather cases where we have closed ECME primary claims and available secondary insurance
"RTN","BPSRPT9A",165,0)
 ; Input: SDT - FileMan start date
"RTN","BPSRPT9A",166,0)
 ;        EDT - FileMan end date
"RTN","BPSRPT9A",167,0)
 ;
"RTN","BPSRPT9A",168,0)
 N SDTYMD,EDTYMD,BPDOS,BP02,BP59,BPST0,BPST1,DFN,BPDTFD,RXIEN,RXFIL,IBINS,IBRET,BPRX,BPSPINS,CNT
"RTN","BPSRPT9A",169,0)
 S SDTYMD=$$FM2YMD^BPSSCR04(SDT) I 'SDTYMD S SDTYMD=0          ; start date in YMD format
"RTN","BPSRPT9A",170,0)
 S EDTYMD=$$FM2YMD^BPSSCR04(EDT) I 'EDTYMD S EDTYMD=99999999   ; end date in YMD format
"RTN","BPSRPT9A",171,0)
 S BPDOS=$O(^BPSC("AF",SDTYMD),-1) F  S BPDOS=$O(^BPSC("AF",BPDOS)) Q:'BPDOS!(BPDOS>EDTYMD)  D
"RTN","BPSRPT9A",172,0)
 . S BP02=0 F  S BP02=$O(^BPSC("AF",BPDOS,BP02)) Q:'BP02  D
"RTN","BPSRPT9A",173,0)
 .. S BP59=+$O(^BPST("AE",BP02,0)) Q:'BP59
"RTN","BPSRPT9A",174,0)
 .. S BPST0=$G(^BPST(BP59,0))
"RTN","BPSRPT9A",175,0)
 .. S BPST1=$G(^BPST(BP59,1))
"RTN","BPSRPT9A",176,0)
 .. I $P(BPST0,U,14)'=1 Q               ; looking for primary claims
"RTN","BPSRPT9A",177,0)
 .. I '$$CLOSED02^BPSSCR03(BP02) Q      ; looking for closed claims
"RTN","BPSRPT9A",178,0)
 .. S DFN=+$P(BPST0,U,6)
"RTN","BPSRPT9A",179,0)
 .. S BPDTFD=$$YMD2FM^BPSSCR04(BPDOS)   ; FM date of service
"RTN","BPSRPT9A",180,0)
 .. ;
"RTN","BPSRPT9A",181,0)
 .. ; make sure the Rx is released
"RTN","BPSRPT9A",182,0)
 .. S RXIEN=+$P(BPST1,U,11)
"RTN","BPSRPT9A",183,0)
 .. S RXFIL=+$P(BPST1,U,1)
"RTN","BPSRPT9A",184,0)
 .. I '$$RELDATE^BPSBCKJ(RXIEN,RXFIL) Q
"RTN","BPSRPT9A",185,0)
 .. ;
"RTN","BPSRPT9A",186,0)
 .. ; check insurances for this patient on this date
"RTN","BPSRPT9A",187,0)
 .. K IBINS
"RTN","BPSRPT9A",188,0)
 .. S IBRET=$$INSUR^IBBAPI(DFN,BPDTFD,"P",.IBINS,"1,2,7")
"RTN","BPSRPT9A",189,0)
 .. I '$D(IBINS("IBBAPI","INSUR",2)) Q   ; do not have at least 2 Rx policies so get out
"RTN","BPSRPT9A",190,0)
 .. ;
"RTN","BPSRPT9A",191,0)
 .. ; save this entry in the scratch global
"RTN","BPSRPT9A",192,0)
 .. S BPRX=$$RXAPI1^BPSUTIL1(RXIEN,.01,"I")    ; ext Rx#
"RTN","BPSRPT9A",193,0)
 .. S BPSPINS=$$INSNAME^BPSSCRU6(BP59)         ; ins co name
"RTN","BPSRPT9A",194,0)
 .. S CNT=$O(^TMP("BPSRPT9A",$J,""),-1)+1
"RTN","BPSRPT9A",195,0)
 .. S ^TMP("BPSRPT9A",$J,CNT)=RXIEN_U_BPRX_U_RXFIL_U_"(P) Rej"_U_DFN_U_BPDTFD_U_BPSPINS_U_0_U_0
"RTN","BPSRPT9A",196,0)
 .. M ^TMP("BPSRPT9A",$J,CNT)=IBINS("IBBAPI","INSUR")
"RTN","BPSRPT9A",197,0)
 .. Q
"RTN","BPSRPT9A",198,0)
 . Q
"RTN","BPSRPT9A",199,0)
GATHERX ;
"RTN","BPSRPT9A",200,0)
 Q
"RTN","BPSRPT9A",201,0)
 ;
"RTN","BPSRPT9A",202,0)
INP(BPRXN,BPRFL) ; Is this an inpatient, NON-BILLABLE Rx as of the Release Date?
"RTN","BPSRPT9A",203,0)
 N INP,VAHOW,VAROOT,BPRXIN,VAIP,BPRXREL,BPMW
"RTN","BPSRPT9A",204,0)
 S INP=0
"RTN","BPSRPT9A",205,0)
 ;
"RTN","BPSRPT9A",206,0)
 S VAROOT="BPRXIN"
"RTN","BPSRPT9A",207,0)
 S BPRXREL=$$RELDATE^BPSBCKJ(BPRXN,BPRFL)\1     ; release date
"RTN","BPSRPT9A",208,0)
 I 'BPRXREL S BPRXREL=DT
"RTN","BPSRPT9A",209,0)
 S VAIP("D")=BPRXREL         ; if pt was an inpatient at any time during this day
"RTN","BPSRPT9A",210,0)
 D IN5^VADPT                 ; DBIA 10061 - inpatient episode API
"RTN","BPSRPT9A",211,0)
 I '$G(BPRXIN(1)) G INPX     ; not an inpatient on this day
"RTN","BPSRPT9A",212,0)
 ;
"RTN","BPSRPT9A",213,0)
 ; check Rx release date = discharge date. This is billable so get out (esg 9/13/10)
"RTN","BPSRPT9A",214,0)
 I BPRXREL=(+$G(BPRXIN(17,1))\1) G INPX
"RTN","BPSRPT9A",215,0)
 ;
"RTN","BPSRPT9A",216,0)
 ; if Rx/fill is MAIL, then this is billable so get out (esg 9/13/10)
"RTN","BPSRPT9A",217,0)
 I BPRFL S BPMW=$$REFAPI1^BPSUTIL1(BPRXN,BPRFL,2,"I")   ; 52.1,2 MAIL/WINDOW field
"RTN","BPSRPT9A",218,0)
 I 'BPRFL S BPMW=$$RXAPI1^BPSUTIL1(BPRXN,11,"I")        ; 52,11 MAIL/WINDOW field
"RTN","BPSRPT9A",219,0)
 I BPMW="M" G INPX
"RTN","BPSRPT9A",220,0)
 ;
"RTN","BPSRPT9A",221,0)
 ; inpatient and non-billable
"RTN","BPSRPT9A",222,0)
 S INP=1
"RTN","BPSRPT9A",223,0)
INPX ;
"RTN","BPSRPT9A",224,0)
 Q INP
"RTN","BPSRPT9A",225,0)
 ;
"RTN","BPSRSRLC")
0^29^B2880037
"RTN","BPSRSRLC",1,0)
BPSRSRLC ;BHAM ISC/SS - ECME RESEARCH SCREEN RELEASE COPAY ;05-APR-05
"RTN","BPSRSRLC",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,20**;JUN 2004;Build 27
"RTN","BPSRSRLC",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSRSRLC",4,0)
 Q
"RTN","BPSRSRLC",5,0)
 ;
"RTN","BPSRSRLC",6,0)
RH ;
"RTN","BPSRSRLC",7,0)
 N BPRET,BPSEL,DFN,BPRXRF
"RTN","BPSRSRLC",8,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSRSRLC",9,0)
 D FULL^VALM1
"RTN","BPSRSRLC",10,0)
 W !,"Please select a SINGLE Patient Line item or a SINGLE Rx Line item when accessing Release Copay from Hold."
"RTN","BPSRSRLC",11,0)
 S BPSEL=$$ASKLINE^BPSSCRU4("Select item","PC","Please select a SINGLE Patient Line item or a SINGLE Rx Line item")
"RTN","BPSRSRLC",12,0)
 I BPSEL<1 S VALMBCK="R" Q
"RTN","BPSRSRLC",13,0)
 S DFN=+$P(BPSEL,U,2)
"RTN","BPSRSRLC",14,0)
 I DFN=0 S VALMBCK="R" Q
"RTN","BPSRSRLC",15,0)
 I +$P(BPSEL,U,7)>0 D
"RTN","BPSRSRLC",16,0)
 . ;RX was selected
"RTN","BPSRSRLC",17,0)
 . I $$NB^BPSSCR03(+$P(BPSEL,U,4)) W !!,"This patient does not have any charges 'on hold.'",! D PAUSE^VALM1 Q
"RTN","BPSRSRLC",18,0)
 . S BPRXRF=$$RXREF^BPSSCRU2(+$P(BPSEL,U,4))
"RTN","BPSRSRLC",19,0)
 . I BPRXRF'>0 Q
"RTN","BPSRSRLC",20,0)
 . D RELH^IBNCPDPR(DFN,+$P(BPRXRF,U),+$P(BPRXRF,U,2),"C")
"RTN","BPSRSRLC",21,0)
 I +$P(BPSEL,U,7)=0 D
"RTN","BPSRSRLC",22,0)
 . ;patient was selected
"RTN","BPSRSRLC",23,0)
 . D RELH^IBNCPDPR(DFN,0,0,"P")
"RTN","BPSRSRLC",24,0)
 D QUIT
"RTN","BPSRSRLC",25,0)
 Q
"RTN","BPSRSRLC",26,0)
 ;
"RTN","BPSRSRLC",27,0)
QUIT ;
"RTN","BPSRSRLC",28,0)
 S VALMBCK="R"
"RTN","BPSRSRLC",29,0)
 Q
"RTN","BPSRSRLC",30,0)
 ;
"RTN","BPSSCR01")
0^7^B17496726
"RTN","BPSSCR01",1,0)
BPSSCR01 ;BHAM ISC/SS - USER SCREEN ;10-MAR-2005
"RTN","BPSSCR01",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,11,20**;JUN 2004;Build 27
"RTN","BPSSCR01",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCR01",4,0)
 ;USER SCREEN
"RTN","BPSSCR01",5,0)
 Q
"RTN","BPSSCR01",6,0)
 ;User Screen header
"RTN","BPSSCR01",7,0)
 ;input:
"RTN","BPSSCR01",8,0)
 ; BPSLN - line of the header
"RTN","BPSSCR01",9,0)
 ;output:
"RTN","BPSSCR01",10,0)
 ; text string for the header
"RTN","BPSSCR01",11,0)
HDR(BPSLN) ; -- header code
"RTN","BPSSCR01",12,0)
 N BPARR,BPX,BPXSL
"RTN","BPSSCR01",13,0)
 Q:'$D(@VALMAR@("VIEWPARAMS"))
"RTN","BPSSCR01",14,0)
 D RESTVIEW(.BPARR)
"RTN","BPSSCR01",15,0)
 I BPSLN=1 Q "SELECTED DIVISION(S): "_$$GETVDIVS(.BPARR,58)
"RTN","BPSSCR01",16,0)
 I BPSLN=2 Q $$GETVDETS(.BPARR)
"RTN","BPSSCR01",17,0)
 I BPSLN=3 D  Q $$LINE^BPSSCRU3(80-$L(BPX)," ")_BPX
"RTN","BPSSCR01",18,0)
 . S BPXSL=$$SORTTYPE^BPSSCRSL($G(BPARR(1.12)))
"RTN","BPSSCR01",19,0)
 . I BPXSL="" S BPXSL="Transaction date by default"
"RTN","BPSSCR01",20,0)
 . S BPX="Sorted by: "_BPXSL
"RTN","BPSSCR01",21,0)
 Q ""
"RTN","BPSSCR01",22,0)
 ;/**
"RTN","BPSSCR01",23,0)
 ;get current view details
"RTN","BPSSCR01",24,0)
GETVDETS(BPARR) ;*/
"RTN","BPSSCR01",25,0)
 N BPSTR
"RTN","BPSSCR01",26,0)
 I $G(BPARR(1.01))="A" S BPSTR=$$LJ^BPSSCR02("Transmitted by ALL users",31)
"RTN","BPSSCR01",27,0)
 E  S BPSTR=$$LJ^BPSSCR02("Transmitted by "_$$GETUSRNM^BPSSCRU1($G(BPARR(1.16))),31)
"RTN","BPSSCR01",28,0)
 S BPSTR=BPSTR_$$LJ^BPSSCR02(" Activity Date Range: within the past "_$G(BPARR(1.05))_$S($G(BPARR(1.04))="H":" hour(s)",1:" day(s)"),49)
"RTN","BPSSCR01",29,0)
 Q BPSTR
"RTN","BPSSCR01",30,0)
 ;
"RTN","BPSSCR01",31,0)
 ;/**
"RTN","BPSSCR01",32,0)
 ;get divisions selected
"RTN","BPSSCR01",33,0)
GETVDIVS(BPARRAY,BPMLEN) ;*/
"RTN","BPSSCR01",34,0)
 I $G(BPARRAY(1.13))="A" Q "ALL"
"RTN","BPSSCR01",35,0)
 N BPDIV,BPCNT,BPSTR,BPQUIT
"RTN","BPSSCR01",36,0)
 S BPQUIT=0,BPSTR=""
"RTN","BPSSCR01",37,0)
 F BPCNT=1:1:20 S BPDIV=$P($G(BPARRAY("DIVS")),";",BPCNT+1) Q:+BPDIV=0  D  Q:BPQUIT=1
"RTN","BPSSCR01",38,0)
 . I $L(BPSTR_$$DIVNAME^BPSSCRDS(BPDIV))>(BPMLEN-4) D  S BPQUIT=1 Q
"RTN","BPSSCR01",39,0)
 . . S BPSTR=$$LJ^BPSSCR02(BPSTR_",...",BPMLEN)
"RTN","BPSSCR01",40,0)
 . S BPSTR=BPSTR_$S(BPCNT>1:", ",1:"")_$$DIVNAME^BPSSCRDS(BPDIV)
"RTN","BPSSCR01",41,0)
 Q BPSTR
"RTN","BPSSCR01",42,0)
 ;/**
"RTN","BPSSCR01",43,0)
 ;input:
"RTN","BPSSCR01",44,0)
 ; BPARR - local array to store user profile info
"RTN","BPSSCR01",45,0)
 ;returns:
"RTN","BPSSCR01",46,0)
 ; the last number in LM ARRAY
"RTN","BPSSCR01",47,0)
INIT() ; -- init variables and list array*/
"RTN","BPSSCR01",48,0)
 N BPLN,BPLM,BP59,BPSORT,BPTMPGL,BPRET
"RTN","BPSSCR01",49,0)
 N BPARR
"RTN","BPSSCR01",50,0)
 ;get user's ien in BPS PRFILE file
"RTN","BPSSCR01",51,0)
 ;if array is not defined then read information from file, 
"RTN","BPSSCR01",52,0)
 ;otherwise use current info from the array, because the user
"RTN","BPSSCR01",53,0)
 ;may specify criteria in array without saving it in file for
"RTN","BPSSCR01",54,0)
 ;the temporary use
"RTN","BPSSCR01",55,0)
 I '$D(@VALMAR@("VIEWPARAMS")) D
"RTN","BPSSCR01",56,0)
 . D READPROF^BPSSCRSL(.BPARR,+DUZ)
"RTN","BPSSCR01",57,0)
 . D SAVEVIEW(.BPARR)
"RTN","BPSSCR01",58,0)
 E  D RESTVIEW(.BPARR)
"RTN","BPSSCR01",59,0)
 ;get date/time range
"RTN","BPSSCR01",60,0)
 I $$GETDT^BPSSCRU1(.BPARR)=0 Q
"RTN","BPSSCR01",61,0)
 S BPTMPGL=$NA(^TMP($J,"BPSSCR"))
"RTN","BPSSCR01",62,0)
 K @BPTMPGL,@VALMAR
"RTN","BPSSCR01",63,0)
 D COLLECT^BPSSCR04(BPTMPGL,.BPARR)
"RTN","BPSSCR01",64,0)
 D SAVEVIEW(.BPARR)
"RTN","BPSSCR01",65,0)
 S BPRET=$$LMARRAY(BPTMPGL,.BPARR)
"RTN","BPSSCR01",66,0)
 K @BPTMPGL
"RTN","BPSSCR01",67,0)
 S:BPRET>1 BPRET=BPRET-1
"RTN","BPSSCR01",68,0)
 Q BPRET
"RTN","BPSSCR01",69,0)
 ;
"RTN","BPSSCR01",70,0)
 ;/**
"RTN","BPSSCR01",71,0)
 ;make elements for List Manager array
"RTN","BPSSCR01",72,0)
 ;input:
"RTN","BPSSCR01",73,0)
 ;BPTMPGL - TMP global to store selected claims
"RTN","BPSSCR01",74,0)
 ;BPARR - local array to store user profile info
"RTN","BPSSCR01",75,0)
 ;returns:
"RTN","BPSSCR01",76,0)
 ; the last number in LM ARRAY
"RTN","BPSSCR01",77,0)
 ;indexing (example):
"RTN","BPSSCR01",78,0)
 ;S ^TMP("BPSSCR",$J,"VALM",1,0)="2   BUMSTEAD,CHARLE 5444 WEBMD"
"RTN","BPSSCR01",79,0)
 ;S ^TMP("BPSSCR",$J,"VALM",2,0)="    2.1  CEFACLOR 500MG CAP"
"RTN","BPSSCR01",80,0)
 ;S ^TMP("BPSSCR",$J,"VALM",3,0)="    2.2  AMPICILLIN 250MG CAP"
"RTN","BPSSCR01",81,0)
 ;S ^TMP("BPSSCR",$J,"VALM","LMIND",2,437272,7008776.00001,0)=""
"RTN","BPSSCR01",82,0)
 ;S ^TMP("BPSSCR",$J,"VALM","LMIND",2.1,437272,7008778.00011,1)=""
"RTN","BPSSCR01",83,0)
 ;S ^TMP("BPSSCR",$J,"VALM","LMIND",2.2,437272,7009457.00001,2)=""
"RTN","BPSSCR01",84,0)
LMARRAY(BPTMPGL,BPARR) ;*/
"RTN","BPSSCR01",85,0)
 N BPSRTVAL,BP59,BPSORT,BPLN,BPLM,BPSTR1,BPCLM,BPPREV
"RTN","BPSSCR01",86,0)
 S BPLM=0 ;patient_AND_insurance level counter
"RTN","BPSSCR01",87,0)
 S BPCLM=0 ;claim level counter 
"RTN","BPSSCR01",88,0)
 S BP59=0
"RTN","BPSSCR01",89,0)
 S BPLN=1 ;line counter for List manager array to display on the screen
"RTN","BPSSCR01",90,0)
 S BPPREV=0 ;to store data from previous patient group
"RTN","BPSSCR01",91,0)
 ;sort type:
"RTN","BPSSCR01",92,0)
 ;'T' FOR TRANSACTION DATE
"RTN","BPSSCR01",93,0)
 ;'D' FOR DIVISION (ECME pharmacy)
"RTN","BPSSCR01",94,0)
 ;'I' FOR INSURANCE
"RTN","BPSSCR01",95,0)
 ;'C' FOR REJECT CODE 
"RTN","BPSSCR01",96,0)
 ;'P' FOR PATIENT NAME
"RTN","BPSSCR01",97,0)
 ;'N' FOR DRUG NAME
"RTN","BPSSCR01",98,0)
 ;'B' FOR BILL TYPE (BB/P2/RT/RS)
"RTN","BPSSCR01",99,0)
 ;'L' FOR FILL LOCATION (Windows/Mail/CMOP) 
"RTN","BPSSCR01",100,0)
 ;'R' FOR RELEASED/NON-RELEASED RX
"RTN","BPSSCR01",101,0)
 ;'A' FOR ACTIVE/DISCONTINUED RX
"RTN","BPSSCR01",102,0)
 S BPSORT=$G(BPARR(1.12))
"RTN","BPSSCR01",103,0)
 S:BPSORT="" BPSORT="T" ;default
"RTN","BPSSCR01",104,0)
 S BPSRTVAL="" ;a value that "makes" an order, can be a string
"RTN","BPSSCR01",105,0)
 F  S BPSRTVAL=$O(@BPTMPGL@("SORT",BPSORT,BPSRTVAL)) Q:BPSRTVAL=""  D
"RTN","BPSSCR01",106,0)
 . I BPSORT="D" D
"RTN","BPSSCR01",107,0)
 . . S BPSTR1="---- Division: "_$$DIVNAME^BPSSCRDS(+$P(BPSRTVAL,U,2))_" "
"RTN","BPSSCR01",108,0)
 . . D SET^VALM10(BPLN,BPSTR1_$$LINE^BPSSCRU3(79-$L(BPSTR1),"-"),0)
"RTN","BPSSCR01",109,0)
 . . S BPLN=BPLN+1
"RTN","BPSSCR01",110,0)
 . I BPSORT="C" D
"RTN","BPSSCR01",111,0)
 . . S BPSTR1=$E("---- Reject code: "_$$GETRJNAM^BPSSCRU3(BPSRTVAL)_" ",1,79)
"RTN","BPSSCR01",112,0)
 . . D SET^VALM10(BPLN,BPSTR1_$$LINE^BPSSCRU3(79-$L(BPSTR1),"-"),0)
"RTN","BPSSCR01",113,0)
 . . S BPLN=BPLN+1
"RTN","BPSSCR01",114,0)
 . S BP59=0
"RTN","BPSSCR01",115,0)
 . F  S BP59=+$O(@BPTMPGL@("SORT",BPSORT,BPSRTVAL,BP59)) Q:+BP59=0  D
"RTN","BPSSCR01",116,0)
 . . I BP59'=0 D MKARRELM^BPSSCR02(.BPLN,VALMAR,BP59,.BPLM,.BPCLM,.BPPREV)
"RTN","BPSSCR01",117,0)
 D UPDPREV^BPSSCR02(VALMAR,BPLM,BPPREV)
"RTN","BPSSCR01",118,0)
 Q BPLN
"RTN","BPSSCR01",119,0)
 ;
"RTN","BPSSCR01",120,0)
HELP ; -- help code
"RTN","BPSSCR01",121,0)
 N X S X="?" D DISP^XQORM1 W !!
"RTN","BPSSCR01",122,0)
 Q
"RTN","BPSSCR01",123,0)
 ;
"RTN","BPSSCR01",124,0)
EXIT ; -- exit code
"RTN","BPSSCR01",125,0)
 Q
"RTN","BPSSCR01",126,0)
 ;
"RTN","BPSSCR01",127,0)
EXPND ; -- expand code
"RTN","BPSSCR01",128,0)
 Q
"RTN","BPSSCR01",129,0)
 ;/**
"RTN","BPSSCR01",130,0)
 ;store current view params in VALMAR("VIEWPARAMS") TMP global array
"RTN","BPSSCR01",131,0)
 ;to display in the header
"RTN","BPSSCR01",132,0)
 ;input: 
"RTN","BPSSCR01",133,0)
 ; BPARR - array with user profile info to store
"RTN","BPSSCR01",134,0)
SAVEVIEW(BPARR) ;        S @VALMAR@("VIEWPARAMS",BPLMIND,BPDFN,BP59,BPLINE)=""
"RTN","BPSSCR01",135,0)
 Q:'$D(BPARR)
"RTN","BPSSCR01",136,0)
 M @VALMAR@("VIEWPARAMS")=BPARR
"RTN","BPSSCR01",137,0)
 Q
"RTN","BPSSCR01",138,0)
 ;
"RTN","BPSSCR01",139,0)
 ;/**
"RTN","BPSSCR01",140,0)
 ;restore current view params from VALMAR("VIEWPARAMS") TMP global array
"RTN","BPSSCR01",141,0)
 ;input: 
"RTN","BPSSCR01",142,0)
 ; BPARR - array with user profile info to store
"RTN","BPSSCR01",143,0)
RESTVIEW(BPARR) ;        S @VALMAR@("VIEWPARAMS",BPLMIND,BPDFN,BP59,BPLINE)=""
"RTN","BPSSCR01",144,0)
 Q:'$D(@VALMAR@("VIEWPARAMS"))
"RTN","BPSSCR01",145,0)
 M BPARR=@VALMAR@("VIEWPARAMS")
"RTN","BPSSCR01",146,0)
 Q
"RTN","BPSSCR01",147,0)
 ;
"RTN","BPSSCR03")
0^1^B67802855
"RTN","BPSSCR03",1,0)
BPSSCR03 ;BHAM ISC/SS - ECME USR SCREEN UTILITIES ;05-APR-05
"RTN","BPSSCR03",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,10,11,20**;JUN 2004;Build 27
"RTN","BPSSCR03",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCR03",4,0)
 Q
"RTN","BPSSCR03",5,0)
 ;/**
"RTN","BPSSCR03",6,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSSCR03",7,0)
 ; BPARR to return formatted info via ref
"RTN","BPSSCR03",8,0)
 ; BPMLEM - max len for each line
"RTN","BPSSCR03",9,0)
 ; BPMODE - mode
"RTN","BPSSCR03",10,0)
 ;   R -regular for main screen, will show only latest comment
"RTN","BPSSCR03",11,0)
 ;   C - comment mode - show all comments
"RTN","BPSSCR03",12,0)
ADDINF(BP59,BPARR,BPMLEN,BPMODE) ;to return additional information about the claim*/
"RTN","BPSSCR03",13,0)
 N BPX,BPN,BPTXT1,BPTXT2,BPTXT3,BPTXT4,BPX1,BPN2,BPSTATUS,BPSCOBA,BP59X,I
"RTN","BPSSCR03",14,0)
 S BPN=0,(BPTXT1,BPTXT2,BPTXT3,BPTXT4,BPX1)=""
"RTN","BPSSCR03",15,0)
 I BPMODE="R" D
"RTN","BPSSCR03",16,0)
 . S BPX=$$COMMENT^BPSSCRU3(BP59)
"RTN","BPSSCR03",17,0)
 . I $L(BPX)>0 S BPN=BPN+1,BPARR(BPN)=$P(BPX,U)
"RTN","BPSSCR03",18,0)
 . I $P(BPX,U,2)]"" S BPN=BPN+1,BPARR(BPN)="("_$P(BPX,U,2)_")"
"RTN","BPSSCR03",19,0)
 E  D
"RTN","BPSSCR03",20,0)
 . N BPCMNT,BPX1 S BPCMNT=99999999
"RTN","BPSSCR03",21,0)
 . F  S BPCMNT=$O(^BPST(BP59,11,BPCMNT),-1) Q:+BPCMNT=0  D
"RTN","BPSSCR03",22,0)
 . . S BPX1=$G(^BPST(BP59,11,BPCMNT,0))
"RTN","BPSSCR03",23,0)
 . . I BPX1="" Q
"RTN","BPSSCR03",24,0)
 . . S BPX=$$DATTIM^BPSSCRU3($P(BPX1,U,1)\1)_$S(+$P(BPX1,U,4):" (Pharm)",1:"")_" - "_$P(BPX1,U,3)
"RTN","BPSSCR03",25,0)
 . . I $L(BPX)>0 S BPN=BPN+1,BPARR(BPN)=BPX
"RTN","BPSSCR03",26,0)
 . . I +$P(BPX1,U,2)]"" D
"RTN","BPSSCR03",27,0)
 . . . S BPX=$$USERNAM^BPSCMT01(+$P(BPX1,U,2))
"RTN","BPSSCR03",28,0)
 . . . I BPX'="" S BPX="("_BPX_")",BPN=BPN+1,BPARR(BPN)=BPX
"RTN","BPSSCR03",29,0)
 S BPX=$$CLAIMST^BPSSCRU3(BP59)
"RTN","BPSSCR03",30,0)
 S BPSTATUS=$P(BPX,U)
"RTN","BPSSCR03",31,0)
 ; Show status for this BPS Transaction
"RTN","BPSSCR03",32,0)
 S BPTXT1=$$COBCLST^BPSSCRU6(BP59)
"RTN","BPSSCR03",33,0)
 ; Append status for associated claim, if one exists
"RTN","BPSSCR03",34,0)
 S BPSCOBA=$$ALLCOB59^BPSUTIL2(BP59)
"RTN","BPSSCR03",35,0)
 F I=1:1 S BP59X=$P(BPSCOBA,U,I) Q:BP59X=""  D
"RTN","BPSSCR03",36,0)
 . Q:BP59X=BP59
"RTN","BPSSCR03",37,0)
 . S BPTXT1=BPTXT1_" ("_$$COBCLST^BPSSCRU6(BP59X)_")"
"RTN","BPSSCR03",38,0)
 ;
"RTN","BPSSCR03",39,0)
 ; build the TRI/CVA non-billable reject/reason lines  (bps*1*20)
"RTN","BPSSCR03",40,0)
 I $$NB(BP59) D
"RTN","BPSSCR03",41,0)
 . I $L(BPTXT1)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT1   ; store the current line
"RTN","BPSSCR03",42,0)
 . S BPTXT1=""
"RTN","BPSSCR03",43,0)
 . S BPN=BPN+1,BPARR(BPN)=$$EREJTXT(BP59)         ; store the eT/eC non-billable reject/reason line
"RTN","BPSSCR03",44,0)
 . Q
"RTN","BPSSCR03",45,0)
 ;
"RTN","BPSSCR03",46,0)
 I (BPSTATUS["E REJECTED")!(BPSTATUS["E REVERSAL REJECTED") D
"RTN","BPSSCR03",47,0)
 . I $L(BPTXT1)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT1
"RTN","BPSSCR03",48,0)
 . S BPTXT1=""
"RTN","BPSSCR03",49,0)
 . S BPN2=BPN
"RTN","BPSSCR03",50,0)
 . D GETRJCOD^BPSSCRU3(BP59,.BPARR,.BPN,74,"")
"RTN","BPSSCR03",51,0)
 . D WRAPLN2^BPSSCRU5(.BPN,.BPARR,$$GETMESS^BPSSCRU3(504,BP59),74,"",0)
"RTN","BPSSCR03",52,0)
 . D WRAPLN2^BPSSCRU5(.BPN,.BPARR,$$GETMESS^BPSSCRU3(526,BP59),74,"",0)
"RTN","BPSSCR03",53,0)
 ;
"RTN","BPSSCR03",54,0)
 I (BPSTATUS["E OTHER")!(BPSTATUS["IN PROGRESS")!(BPSTATUS["E UNSTRANDED")!(BPSTATUS["E CAPTURED")!(BPSTATUS["E REVERSAL OTHER")!(BPSTATUS["E REVERSAL UNSTRANDED") D
"RTN","BPSSCR03",55,0)
 . I (BPSTATUS["E OTHER")!(BPSTATUS["E REVERSAL OTHER")!(BPSTATUS["IN PROGRESS") S BPX1=$P(BPX,U,3) I BPTXT1=BPX1 S BPX1=""
"RTN","BPSSCR03",56,0)
 . S:BPX1="" BPX1=$$GETMESS^BPSSCRU3(504,BP59)
"RTN","BPSSCR03",57,0)
 . I $L(BPX1)>0 S BPTXT1=BPTXT1_"- "_$TR(BPX1,"]","")
"RTN","BPSSCR03",58,0)
 ;
"RTN","BPSSCR03",59,0)
 S BPTXT2=$E(BPTXT1,1,BPMLEN)
"RTN","BPSSCR03",60,0)
 S BPTXT3=$E(BPTXT1,BPMLEN+1,2*BPMLEN)
"RTN","BPSSCR03",61,0)
 S BPTXT4=$E(BPTXT1,(2*BPMLEN)+1,3*BPMLEN)
"RTN","BPSSCR03",62,0)
 I $L(BPTXT2)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT2
"RTN","BPSSCR03",63,0)
 I $L(BPTXT3)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT3
"RTN","BPSSCR03",64,0)
 I $L(BPTXT4)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT4
"RTN","BPSSCR03",65,0)
 Q BPN
"RTN","BPSSCR03",66,0)
 ;
"RTN","BPSSCR03",67,0)
CLMINF(BP59) ;ptr to #9002313.59
"RTN","BPSSCR03",68,0)
 W !,"Claim info. Press a key"
"RTN","BPSSCR03",69,0)
 D PAUSE^VALM1
"RTN","BPSSCR03",70,0)
 Q
"RTN","BPSSCR03",71,0)
 ;
"RTN","BPSSCR03",72,0)
EREJTXT(BP59) ; return the eT/eC line for non-billable entry
"RTN","BPSSCR03",73,0)
 N ELIG,BPX2
"RTN","BPSSCR03",74,0)
 S BPX2=""
"RTN","BPSSCR03",75,0)
 S ELIG=$$GET1^DIQ(9002313.59,BP59,901.04)
"RTN","BPSSCR03",76,0)
 I '$F(".T.C.","."_$E(ELIG,1)_".") G EREJTX            ; must be TRI/CVA eligibility for non-billable
"RTN","BPSSCR03",77,0)
 S BPX2="e"_$E(ELIG,1)_":"_ELIG_"-RX NOT BILLABLE ("_$P($G(^BPST(BP59,3)),U,1)_")"   ; build eT / eC line
"RTN","BPSSCR03",78,0)
EREJTX ;
"RTN","BPSSCR03",79,0)
 Q BPX2
"RTN","BPSSCR03",80,0)
 ;
"RTN","BPSSCR03",81,0)
COMM(BP59) ;ptr to #9002313.59
"RTN","BPSSCR03",82,0)
 W !,"the latest comment. Press a key"
"RTN","BPSSCR03",83,0)
 D PAUSE^VALM1
"RTN","BPSSCR03",84,0)
 Q
"RTN","BPSSCR03",85,0)
 ;
"RTN","BPSSCR03",86,0)
RESP(BP59) ;Payer Response Information
"RTN","BPSSCR03",87,0)
 W !,"payer Response Information. Press a key"
"RTN","BPSSCR03",88,0)
 D PAUSE^VALM1
"RTN","BPSSCR03",89,0)
 Q
"RTN","BPSSCR03",90,0)
 ;
"RTN","BPSSCR03",91,0)
 ;/**
"RTN","BPSSCR03",92,0)
 ;Checks if the claim is closed and sets the "/Closed" indicator at the end of the text
"RTN","BPSSCR03",93,0)
 ;BP59 - pointer to file #9002313.59
"RTN","BPSSCR03",94,0)
 ;BPTXT - Current status text to be displayed
"RTN","BPSSCR03",95,0)
 ;return:
"RTN","BPSSCR03",96,0)
 ;if the claim is not closed, BPTXT is returned. If it is closed BPTXT_"/Closed " is returned
"RTN","BPSSCR03",97,0)
CLMCLSTX(BP59,BPTXT) ;*/
"RTN","BPSSCR03",98,0)
 Q $S($$CLOSED02($P($G(^BPST(BP59,0)),U,4)):BPTXT_"/Closed ",1:BPTXT)
"RTN","BPSSCR03",99,0)
 ;
"RTN","BPSSCR03",100,0)
 ;/**
"RTN","BPSSCR03",101,0)
 ;Checks if the CLAIM for specific Transaction is CLOSED?
"RTN","BPSSCR03",102,0)
 ;BPCLAIM - ptr to #9002313.02
"RTN","BPSSCR03",103,0)
 ;see also CLOSED^BPSSCRU1
"RTN","BPSSCR03",104,0)
CLOSED02(BPCLAIM) ;*/
"RTN","BPSSCR03",105,0)
 I +$G(BPCLAIM)=0 Q 0
"RTN","BPSSCR03",106,0)
 ; get closed status
"RTN","BPSSCR03",107,0)
 Q +$P($G(^BPSC(BPCLAIM,900)),U)=1
"RTN","BPSSCR03",108,0)
 ;
"RTN","BPSSCR03",109,0)
 ;return:
"RTN","BPSSCR03",110,0)
 ; 1 - okay. matches criteria
"RTN","BPSSCR03",111,0)
 ; 0-  not okay, doesn't match criteria
"RTN","BPSSCR03",112,0)
FILTER(BP59,BPARR) ;
"RTN","BPSSCR03",113,0)
 N BPST0,BPST1,BPRXREF,BPRX52,BPREFNUM,BPRTBB
"RTN","BPSSCR03",114,0)
 N BPRET
"RTN","BPSSCR03",115,0)
 S BPRET=1 ;1 - okay by default
"RTN","BPSSCR03",116,0)
 S BPST0=$G(^BPST(BP59,0))
"RTN","BPSSCR03",117,0)
 S BPST1=$G(^BPST(BP59,1))
"RTN","BPSSCR03",118,0)
 ; Do not display eligibility verification requests
"RTN","BPSSCR03",119,0)
 I $P(BPST0,U,15)="E" Q 0
"RTN","BPSSCR03",120,0)
 S BPRXREF=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSSCR03",121,0)
 S BPRX52=+$P(BPRXREF,U) ;ptr to #52
"RTN","BPSSCR03",122,0)
 S BPREFNUM=$P(BPRXREF,U,2) ;refill #
"RTN","BPSSCR03",123,0)
 ;
"RTN","BPSSCR03",124,0)
 ;Check for Open Claim
"RTN","BPSSCR03",125,0)
 I '$$NB(BP59),$G(BPARR(2.02))="O",$$CLOSED02(+$P(BPST0,U,4)) Q 0    ; n/a for non-billables
"RTN","BPSSCR03",126,0)
 ;Check for Closed Claim
"RTN","BPSSCR03",127,0)
 I '$$NB(BP59),$G(BPARR(2.02))="C",'$$CLOSED02(+$P(BPST0,U,4)) Q 0   ; n/a for non-billables
"RTN","BPSSCR03",128,0)
 ;
"RTN","BPSSCR03",129,0)
 I $G(BPARR(1.19))="O",$$NBCL(BP59) Q 0     ; non-billable entry - Open entries only
"RTN","BPSSCR03",130,0)
 I $G(BPARR(1.19))="C",$$NBOP(BP59) Q 0     ; non-billable entry - Closed entries only
"RTN","BPSSCR03",131,0)
 ;
"RTN","BPSSCR03",132,0)
 ;Eligibility Indicator
"RTN","BPSSCR03",133,0)
 I '$$FLTELIG^BPSSCR05(BP59,.BPARR) Q 0
"RTN","BPSSCR03",134,0)
 ;
"RTN","BPSSCR03",135,0)
 ;Submission type
"RTN","BPSSCR03",136,0)
 I '$$NB(BP59),'$$FLTSUBTP^BPSSCR05(BP59,.BPARR) Q 0      ; n/a for non-billables
"RTN","BPSSCR03",137,0)
 ;
"RTN","BPSSCR03",138,0)
 ;user
"RTN","BPSSCR03",139,0)
 I $G(BPARR(1.01))="U",$$FLTUSR(BPST0,.BPARR)=0 Q 0
"RTN","BPSSCR03",140,0)
 ;
"RTN","BPSSCR03",141,0)
 ;patient
"RTN","BPSSCR03",142,0)
 I $G(BPARR(1.02))="P",$$FLTPAT(BPST0,.BPARR)=0 Q 0
"RTN","BPSSCR03",143,0)
 ;
"RTN","BPSSCR03",144,0)
 ;RX
"RTN","BPSSCR03",145,0)
 I $G(BPARR(1.03))="R",$$FLTRX(BPST1,.BPARR)=0 Q 0
"RTN","BPSSCR03",146,0)
 ;
"RTN","BPSSCR03",147,0)
 ;only rejected
"RTN","BPSSCR03",148,0)
 I '$$NB(BP59),$G(BPARR(1.06))="R",$$REJECTED^BPSSCR02(BP59)=0 Q 0    ; n/a for non-billables
"RTN","BPSSCR03",149,0)
 ;only payable
"RTN","BPSSCR03",150,0)
 I '$$NB(BP59),$G(BPARR(1.06))="P",$$PAYABLE^BPSSCR02(BP59)=0 Q 0     ; n/a for non-billables
"RTN","BPSSCR03",151,0)
 ;only unstranded
"RTN","BPSSCR03",152,0)
 I '$$NB(BP59),$G(BPARR(1.06))="U",$$UNSTRAND^BPSSCR02(BP59)=0 Q 0    ; n/a for non-billables
"RTN","BPSSCR03",153,0)
 ;
"RTN","BPSSCR03",154,0)
 ;released
"RTN","BPSSCR03",155,0)
 I $G(BPARR(1.07))="R",$$RL^BPSSCRU2(BP59)'="R" Q 0
"RTN","BPSSCR03",156,0)
 ;non released
"RTN","BPSSCR03",157,0)
 I $G(BPARR(1.07))="N",$$RL^BPSSCRU2(BP59)="R" Q 0
"RTN","BPSSCR03",158,0)
 ;
"RTN","BPSSCR03",159,0)
 ;window/cmop/mail
"RTN","BPSSCR03",160,0)
 I $G(BPARR(1.08))'="A",$$ISMWC(BPRX52,BPREFNUM,$G(BPARR(1.08)))=0 Q 0
"RTN","BPSSCR03",161,0)
 ;
"RTN","BPSSCR03",162,0)
 ; filter checks for fill type
"RTN","BPSSCR03",163,0)
 S BPRTBB=$$RTBB^BPSSCRU2(BP59) I BPRTBB="**" S BPRTBB="RT"
"RTN","BPSSCR03",164,0)
 I $G(BPARR(1.09))="B",BPRTBB'="BB" Q 0     ; filter for back billing
"RTN","BPSSCR03",165,0)
 I $G(BPARR(1.09))="P",BPRTBB'="P2" Q 0     ; filter for PRO Option
"RTN","BPSSCR03",166,0)
 I $G(BPARR(1.09))="S",BPRTBB'="RS" Q 0     ; filter for ECME user screen resubmits (BPS*1*20)
"RTN","BPSSCR03",167,0)
 I $G(BPARR(1.09))="R",BPRTBB'="RT" Q 0     ; filter for real time
"RTN","BPSSCR03",168,0)
 ;
"RTN","BPSSCR03",169,0)
 ;if only rejected and only specific rejected codes should be displayed
"RTN","BPSSCR03",170,0)
 I $G(BPARR(1.06))="R",$G(BPARR(1.1))="R",$$FLTREJ(BP59,.BPARR)=0 Q 0
"RTN","BPSSCR03",171,0)
 ;
"RTN","BPSSCR03",172,0)
 ;insurance
"RTN","BPSSCR03",173,0)
 I '$$FLTINS^BPSSCR05(BP59,.BPARR) Q 0
"RTN","BPSSCR03",174,0)
 ;
"RTN","BPSSCR03",175,0)
 ;divisions - ECME pharmacies
"RTN","BPSSCR03",176,0)
 I $G(BPARR(1.13))="D",BPARR("DIVS")'[(";"_$P(BPST1,U,7)_";") Q 0
"RTN","BPSSCR03",177,0)
 Q 1
"RTN","BPSSCR03",178,0)
 ;
"RTN","BPSSCR03",179,0)
 ;check user filter
"RTN","BPSSCR03",180,0)
 ;input:
"RTN","BPSSCR03",181,0)
 ;BPST0 - zero node of #9002313.59
"RTN","BPSSCR03",182,0)
 ;BPARR array with user's preferences
"RTN","BPSSCR03",183,0)
 ;returns :
"RTN","BPSSCR03",184,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",185,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",186,0)
FLTUSR(BPST0,BPARR) ;
"RTN","BPSSCR03",187,0)
 I $L($G(BPARR(1.16)))=0 Q 0
"RTN","BPSSCR03",188,0)
 I $P(BPST0,U,10)'=$G(BPARR(1.16)) Q 0
"RTN","BPSSCR03",189,0)
 Q 1
"RTN","BPSSCR03",190,0)
 ;check patient filter
"RTN","BPSSCR03",191,0)
 ;input:
"RTN","BPSSCR03",192,0)
 ;BPST0 - zero node of #9002313.59
"RTN","BPSSCR03",193,0)
 ;BPARR array with user's preferences
"RTN","BPSSCR03",194,0)
 ;returns :
"RTN","BPSSCR03",195,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",196,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",197,0)
FLTPAT(BPST0,BPARR) ;
"RTN","BPSSCR03",198,0)
 I $L($G(BPARR(1.17)))=0 Q 0
"RTN","BPSSCR03",199,0)
 I $P(BPST0,U,6)'=$G(BPARR(1.17)) Q 0
"RTN","BPSSCR03",200,0)
 Q 1
"RTN","BPSSCR03",201,0)
 ;check RX filter
"RTN","BPSSCR03",202,0)
 ;input:
"RTN","BPSSCR03",203,0)
 ;BPST1 - 1st node of #9002313.59
"RTN","BPSSCR03",204,0)
 ;BPARR array with user's preferences
"RTN","BPSSCR03",205,0)
 ;returns :
"RTN","BPSSCR03",206,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",207,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",208,0)
FLTRX(BPST1,BPARR) ;
"RTN","BPSSCR03",209,0)
 I $L($G(BPARR(1.18)))=0 Q 0
"RTN","BPSSCR03",210,0)
 I $P(BPST1,U,11)'=$G(BPARR(1.18)) Q 0
"RTN","BPSSCR03",211,0)
 Q 1
"RTN","BPSSCR03",212,0)
 ;input:
"RTN","BPSSCR03",213,0)
 ;BP59 - zero node of #9002313.59
"RTN","BPSSCR03",214,0)
 ;BPARR array with user's preferences
"RTN","BPSSCR03",215,0)
 ;returns :
"RTN","BPSSCR03",216,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",217,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",218,0)
FLTREJ(BP59,BPARR) ;
"RTN","BPSSCR03",219,0)
 N BPRCODES
"RTN","BPSSCR03",220,0)
 N BPRJCD
"RTN","BPSSCR03",221,0)
 S BPRJCD=$P($G(^BPSF(9002313.93,+$G(BPARR(1.15)),0)),U)
"RTN","BPSSCR03",222,0)
 I $L(BPRJCD)=0 Q 0
"RTN","BPSSCR03",223,0)
 D REJCODES^BPSSCRU3(BP59,.BPRCODES,1)    ; bps*1*20 include possible non-billable pseudo-reject codes too
"RTN","BPSSCR03",224,0)
 I $D(BPRCODES(BPRJCD)) Q 1
"RTN","BPSSCR03",225,0)
 Q 0
"RTN","BPSSCR03",226,0)
 ;
"RTN","BPSSCR03",227,0)
 ;check W(indow)/C(mop)/M(ail)
"RTN","BPSSCR03",228,0)
 ;input:
"RTN","BPSSCR03",229,0)
 ;BPRX52 - ptr to #52
"RTN","BPSSCR03",230,0)
 ;BPREFNUM - refill #
"RTN","BPSSCR03",231,0)
 ;BPMWC - given value from CMOP/MAIL/WINDOW instance 1.08 of BPS USRSCR parameters
"RTN","BPSSCR03",232,0)
 ;returns :
"RTN","BPSSCR03",233,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",234,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",235,0)
ISMWC(BPRX52,BPREFNUM,BPMWC) ;
"RTN","BPSSCR03",236,0)
 I $$MWCNAME^BPSSCRU2($$MWC^BPSSCRU2(BPRX52,BPREFNUM))=BPMWC Q 1
"RTN","BPSSCR03",237,0)
 Q 0
"RTN","BPSSCR03",238,0)
 ;
"RTN","BPSSCR03",239,0)
FILTRALL(BPTMP1,BPTMP2,BPARR) ;
"RTN","BPSSCR03",240,0)
 N BP59
"RTN","BPSSCR03",241,0)
 S BP59=0
"RTN","BPSSCR03",242,0)
 F  S BP59=+$O(@BPTMP1@(BP59)) Q:+BP59=0  D
"RTN","BPSSCR03",243,0)
 . I $$FILTER(BP59,.BPARR) S @BPTMP2@(BP59)=""
"RTN","BPSSCR03",244,0)
 Q
"RTN","BPSSCR03",245,0)
 ;
"RTN","BPSSCR03",246,0)
 ;go thru all FILE59 entries and run SETTRDFN for each of them
"RTN","BPSSCR03",247,0)
 ;
"RTN","BPSSCR03",248,0)
TRDFNALL(BPTMP) ;
"RTN","BPSSCR03",249,0)
 N BP59
"RTN","BPSSCR03",250,0)
 S BP59=0
"RTN","BPSSCR03",251,0)
 F  S BP59=+$O(@BPTMP@("FILE59",BP59)) Q:+BP59=0  D
"RTN","BPSSCR03",252,0)
 . D SETTRDFN(BPTMP,BP59)
"RTN","BPSSCR03",253,0)
 Q
"RTN","BPSSCR03",254,0)
 ;
"RTN","BPSSCR03",255,0)
 ;sorting for "TRANSACTION DATE" type is
"RTN","BPSSCR03",256,0)
 ;actually sorting by patients , but patient should be sorted not in alphabetical order:
"RTN","BPSSCR03",257,0)
 ;the first patient is the one which has the most recent transaction and so on
"RTN","BPSSCR03",258,0)
 ;BPTMP - TMP global
"RTN","BPSSCR03",259,0)
 ;BP59 - ptr to #9002313.59
"RTN","BPSSCR03",260,0)
SETTRDFN(BPTMP,BP59) ;
"RTN","BPSSCR03",261,0)
 ;the following stores the latest transaction date of the claims, which
"RTN","BPSSCR03",262,0)
 ;was found for this particular combination of patient and insurance
"RTN","BPSSCR03",263,0)
 ;@BPTMP@("DFN-TRDT",BPDFN,BPINSUR)=BPTRDT
"RTN","BPSSCR03",264,0)
 ;the following stores the latest transaction date BPTRDT,patient BPDFN and
"RTN","BPSSCR03",265,0)
 ;insurance BPINSUR to provide a proper order
"RTN","BPSSCR03",266,0)
 ;@BPTMP@("TRDTDFN",BPTRDT,BPDFN,BPINSUR)=""
"RTN","BPSSCR03",267,0)
 N BPZERO,BPTRDT,BPDFN,BPPREV,BPINSUR
"RTN","BPSSCR03",268,0)
 S BPZERO=$G(^BPST(BP59,0)) ;
"RTN","BPSSCR03",269,0)
 S BPTRDT=-$P(BPZERO,U,8) ;"transaction" date
"RTN","BPSSCR03",270,0)
 S BPDFN=+$P(BPZERO,U,6) ;patient ptr to #2
"RTN","BPSSCR03",271,0)
 S BPINSUR=+$$GETINSUR^BPSSCRU2(BP59) ;insurance ien
"RTN","BPSSCR03",272,0)
 ;in the beginning we don't have any "DFN-TRDT" and "TRDTDFN"
"RTN","BPSSCR03",273,0)
 ;so create them and quit
"RTN","BPSSCR03",274,0)
 I '$D(@BPTMP@("DFN-TRDT",BPDFN,BPINSUR)) D  Q
"RTN","BPSSCR03",275,0)
 . S @BPTMP@("DFN-TRDT",BPDFN,BPINSUR)=BPTRDT
"RTN","BPSSCR03",276,0)
 . S @BPTMP@("TRDTDFN",BPTRDT,BPDFN,BPINSUR)=""
"RTN","BPSSCR03",277,0)
 ;if we already have them then get the latest into BPPREV
"RTN","BPSSCR03",278,0)
 S BPPREV=+$G(@BPTMP@("DFN-TRDT",BPDFN,BPINSUR))
"RTN","BPSSCR03",279,0)
 ;and compare it against the BPTRDT for this BP59
"RTN","BPSSCR03",280,0)
 ;if the BPTRDT is greater then replace the values in "DFN-TRDT"
"RTN","BPSSCR03",281,0)
 ;and "TRDTDFN"
"RTN","BPSSCR03",282,0)
 I BPTRDT<BPPREV D
"RTN","BPSSCR03",283,0)
 . S @BPTMP@("TRDTDFN",BPTRDT,BPDFN,BPINSUR)=""
"RTN","BPSSCR03",284,0)
 . S @BPTMP@("DFN-TRDT",BPDFN,BPINSUR)=BPTRDT
"RTN","BPSSCR03",285,0)
 . K @BPTMP@("TRDTDFN",BPPREV,BPDFN,BPINSUR)
"RTN","BPSSCR03",286,0)
 Q
"RTN","BPSSCR03",287,0)
 ;
"RTN","BPSSCR03",288,0)
NB(BP59) ; Is this BPS Transaction a TRI/CVA non-billable entry?
"RTN","BPSSCR03",289,0)
 I $P($G(^BPST(+$G(BP59),0)),U,15)="N" Q 1    ; yep
"RTN","BPSSCR03",290,0)
 Q 0                                          ; nope
"RTN","BPSSCR03",291,0)
 ;
"RTN","BPSSCR03",292,0)
NBCL(BP59) ; Is this BPS Transaction a Closed TRI/CVA non-billable entry?
"RTN","BPSSCR03",293,0)
 I $$NB(+$G(BP59)),$P($G(^BPST(+$G(BP59),3)),U,2) Q 1    ; yep
"RTN","BPSSCR03",294,0)
 Q 0                                                     ; nope
"RTN","BPSSCR03",295,0)
 ;
"RTN","BPSSCR03",296,0)
NBOP(BP59) ; Is this BPS Transaction an Open TRI/CVA non-billable entry?
"RTN","BPSSCR03",297,0)
 I $$NB(+$G(BP59)),'$P($G(^BPST(+$G(BP59),3)),U,2) Q 1   ; yep
"RTN","BPSSCR03",298,0)
 Q 0                                                     ; nope
"RTN","BPSSCR03",299,0)
 ;
"RTN","BPSSCR04")
0^8^B54656509
"RTN","BPSSCR04",1,0)
BPSSCR04 ;BHAM ISC/SS - USER SCREEN ;14-FEB-05
"RTN","BPSSCR04",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,11,20**;JUN 2004;Build 27
"RTN","BPSSCR04",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCR04",4,0)
 ;USER SCREEN
"RTN","BPSSCR04",5,0)
 Q
"RTN","BPSSCR04",6,0)
 ;input:
"RTN","BPSSCR04",7,0)
 ;BPTMP - TMP global to store data (example : $NA(^TMP($J,"BPSSCR")))
"RTN","BPSSCR04",8,0)
 ;BPARR - array with user profile information
"RTN","BPSSCR04",9,0)
COLLECT(BPTMP,BPARR) ;
"RTN","BPSSCR04",10,0)
 N BPBDT,BPEDT,BPSORT
"RTN","BPSSCR04",11,0)
 S BPBDT=BPARR("BDT") ;start date
"RTN","BPSSCR04",12,0)
 S BPEDT=BPARR("EDT") ;end date
"RTN","BPSSCR04",13,0)
 ;sort type - see SORTIT()
"RTN","BPSSCR04",14,0)
 S BPSORT=$G(BPARR(1.12))
"RTN","BPSSCR04",15,0)
 S:BPSORT="" BPSORT="T" ;default
"RTN","BPSSCR04",16,0)
 ;kill TMP
"RTN","BPSSCR04",17,0)
 ;look for  claims in 3 files
"RTN","BPSSCR04",18,0)
 ;temporary TMP file
"RTN","BPSSCR04",19,0)
 N BPTMP1 S BPTMP1=$NA(@BPTMP@("PRE59"))
"RTN","BPSSCR04",20,0)
 N BPTMP2 S BPTMP2=$NA(@BPTMP@("FILE59"))
"RTN","BPSSCR04",21,0)
 K @BPTMP1
"RTN","BPSSCR04",22,0)
 K @BPTMP2
"RTN","BPSSCR04",23,0)
 ;
"RTN","BPSSCR04",24,0)
 D LOOK02(BPBDT,BPEDT,BPTMP1,BPSORT)
"RTN","BPSSCR04",25,0)
 D LOOK57(BPBDT,BPEDT,BPTMP1,BPSORT)
"RTN","BPSSCR04",26,0)
 D LOOK59(BPBDT,BPEDT,BPTMP1,BPSORT)
"RTN","BPSSCR04",27,0)
 ;remove all claims that don't match filter criteria
"RTN","BPSSCR04",28,0)
 D FILTRALL^BPSSCR03(BPTMP1,BPTMP2,.BPARR)
"RTN","BPSSCR04",29,0)
 ;preliminary sorting for "T" sorting type
"RTN","BPSSCR04",30,0)
 I BPSORT="T" D TRDFNALL^BPSSCR03(BPTMP)
"RTN","BPSSCR04",31,0)
 ;final sorting 
"RTN","BPSSCR04",32,0)
 D SORTIT(BPTMP,BPSORT)
"RTN","BPSSCR04",33,0)
 K @BPTMP1
"RTN","BPSSCR04",34,0)
 K @BPTMP2
"RTN","BPSSCR04",35,0)
 Q
"RTN","BPSSCR04",36,0)
 ;Input:
"RTN","BPSSCR04",37,0)
 ;BPTMP - TMP global to store data (example : $NA(^TMP($J,"BPSSCR")))
"RTN","BPSSCR04",38,0)
 ;BPSORT:
"RTN","BPSSCR04",39,0)
 ;'T' FOR TRANSACTION DATE
"RTN","BPSSCR04",40,0)
 ;'D' FOR DIVISION (ECME pharmacy)
"RTN","BPSSCR04",41,0)
 ;'I' FOR INSURANCE
"RTN","BPSSCR04",42,0)
 ;'C' FOR REJECT CODE 
"RTN","BPSSCR04",43,0)
 ;'P' FOR PATIENT NAME
"RTN","BPSSCR04",44,0)
 ;'N' FOR DRUG NAME
"RTN","BPSSCR04",45,0)
 ;'B' FOR BILL TYPE (BB/P2/RT/RS)
"RTN","BPSSCR04",46,0)
 ;'L' FOR FILL LOCATION (Windows/Mail/CMOP) 
"RTN","BPSSCR04",47,0)
 ;'R' FOR RELEASED/NON-RELEASED RX
"RTN","BPSSCR04",48,0)
 ;'A' FOR ACTIVE/DISCONTINUED RX
"RTN","BPSSCR04",49,0)
 ;sort it and prepare the TMP for the user screen
"RTN","BPSSCR04",50,0)
SORTIT(BPTMP,BPSORT) ;*/
"RTN","BPSSCR04",51,0)
 ;S BP59=+$G(^TMP($J,"BPSSCR","SRT",BPSRT))
"RTN","BPSSCR04",52,0)
 ;BPSORT:
"RTN","BPSSCR04",53,0)
 ;TRANSACTION DATE - the last time when the record 
"RTN","BPSSCR04",54,0)
 ;in the file #9002313.59 -- BPS TRANSACTION FILE has been updated
"RTN","BPSSCR04",55,0)
 ;F   S X=$O(@BPTMP@("SRT",BPSRT))
"RTN","BPSSCR04",56,0)
 K @BPTMP@("SORT")
"RTN","BPSSCR04",57,0)
 N BPSRTVAL,BPTRDT,BP59,BPDFN,BPIEN,BPIENNM
"RTN","BPSSCR04",58,0)
 S BP59=0
"RTN","BPSSCR04",59,0)
 ;by transaction date -- sort by the patient/insurance combinations,
"RTN","BPSSCR04",60,0)
 ;which might have more than one claims. 
"RTN","BPSSCR04",61,0)
 ;- the first on the top will be the one which has the claim(s) with the 
"RTN","BPSSCR04",62,0)
 ;  most recent date (other claims in this group can have any other date)
"RTN","BPSSCR04",63,0)
 I BPSORT="T" D
"RTN","BPSSCR04",64,0)
 . D MKPATINS(BPTMP) ;1st step
"RTN","BPSSCR04",65,0)
 . D MKTRSORT(BPTMP) ;2nd step
"RTN","BPSSCR04",66,0)
 ;by patient name (and his/her insurances)
"RTN","BPSSCR04",67,0)
 I BPSORT="P" D
"RTN","BPSSCR04",68,0)
 . D MKNAMINS(BPTMP) ;1st step
"RTN","BPSSCR04",69,0)
 . D MKPTSORT(BPTMP) ;2nd step
"RTN","BPSSCR04",70,0)
 ;by insurance
"RTN","BPSSCR04",71,0)
 ;(the name will be shortened up to 10 chars and its 
"RTN","BPSSCR04",72,0)
 ;IEN is added to make the string unique) 
"RTN","BPSSCR04",73,0)
 I BPSORT="I" D
"RTN","BPSSCR04",74,0)
 . F  S BP59=$O(@BPTMP@("FILE59",BP59)) Q:+BP59=0  D
"RTN","BPSSCR04",75,0)
 . . S BPIEN=$$GETINSUR^BPSSCRU2(+BP59)
"RTN","BPSSCR04",76,0)
 . . S BPIENNM=$S(+BPIEN>0:$E($P(BPIEN,U,2),1,10)_U_(+BPIEN),1:"0")
"RTN","BPSSCR04",77,0)
 . . D SETSORT(BPTMP,BPSORT,BPIENNM,BP59)
"RTN","BPSSCR04",78,0)
 ;by division
"RTN","BPSSCR04",79,0)
 ;(the name will be shortened up to 10 chars and its 
"RTN","BPSSCR04",80,0)
 ;IEN is added to make the string unique) 
"RTN","BPSSCR04",81,0)
 I BPSORT="D" D
"RTN","BPSSCR04",82,0)
 . F  S BP59=$O(@BPTMP@("FILE59",BP59)) Q:+BP59=0  D
"RTN","BPSSCR04",83,0)
 . . S BPIEN=+$$DIVIS^BPSSCRU2(+BP59)
"RTN","BPSSCR04",84,0)
 . . S BPIENNM=$S(BPIEN>0:$E($$DIVNAME^BPSSCRDS(BPIEN),1,10)_U_(BPIEN),1:"0")
"RTN","BPSSCR04",85,0)
 . . D SETSORT(BPTMP,BPSORT,BPIENNM,BP59)
"RTN","BPSSCR04",86,0)
 ;by reject code
"RTN","BPSSCR04",87,0)
 ;the same claim can be listed more than once (under different reject code
"RTN","BPSSCR04",88,0)
 ;sections) because each claim may have more than one reject code.
"RTN","BPSSCR04",89,0)
 I BPSORT="C" D
"RTN","BPSSCR04",90,0)
 . F  S BP59=$O(@BPTMP@("FILE59",BP59)) Q:+BP59=0  D
"RTN","BPSSCR04",91,0)
 . . N BPRJCDS,BPRJ
"RTN","BPSSCR04",92,0)
 . . D REJCODES^BPSSCRU3(+BP59,.BPRJCDS,1)    ; BPS*1*20 - also include possible non-billable pseudo-reject codes
"RTN","BPSSCR04",93,0)
 . . S BPRJ=""
"RTN","BPSSCR04",94,0)
 . . F  S BPRJ=$O(BPRJCDS(BPRJ)) Q:BPRJ=""  D
"RTN","BPSSCR04",95,0)
 . . . D SETSORT(BPTMP,BPSORT,BPRJ,BP59)
"RTN","BPSSCR04",96,0)
 ;by drug names 
"RTN","BPSSCR04",97,0)
 ;(the name will be shortened upto 10 chars and its 
"RTN","BPSSCR04",98,0)
 ;IEN is added to make the string unique) 
"RTN","BPSSCR04",99,0)
 I BPSORT="N" D
"RTN","BPSSCR04",100,0)
 . F  S BP59=$O(@BPTMP@("FILE59",BP59)) Q:+BP59=0  D
"RTN","BPSSCR04",101,0)
 . . S BPIEN=+$$GETDRG59^BPSSCRU2(+BP59)
"RTN","BPSSCR04",102,0)
 . . S BPIENNM=$S(BPIEN>0:$E($$DRGNAM^BPSSCRU2(BPIEN),1,10)_U_(BPIEN),1:"0")
"RTN","BPSSCR04",103,0)
 . . D SETSORT(BPTMP,BPSORT,BPIENNM,BP59)
"RTN","BPSSCR04",104,0)
 ;by claim origination type (BB-backbilling, RT-realtime, P2-PRO option, RS-ECME user screen resubmission)
"RTN","BPSSCR04",105,0)
 I BPSORT="B" D
"RTN","BPSSCR04",106,0)
 . F  S BP59=$O(@BPTMP@("FILE59",BP59)) Q:+BP59=0  D
"RTN","BPSSCR04",107,0)
 . . D SETSORT(BPTMP,BPSORT,$$RTBB^BPSSCRU2(+BP59),BP59)
"RTN","BPSSCR04",108,0)
 ;by filling location 
"RTN","BPSSCR04",109,0)
 ;M-MAIL/W-WINDOW/C-CMOP
"RTN","BPSSCR04",110,0)
 I BPSORT="L" D
"RTN","BPSSCR04",111,0)
 . F  S BP59=$O(@BPTMP@("FILE59",BP59)) Q:+BP59=0  D
"RTN","BPSSCR04",112,0)
 . . D SETSORT(BPTMP,BPSORT,$$MWCNAME^BPSSCRU2($$GETMWC^BPSSCRU2(+BP59)),BP59)
"RTN","BPSSCR04",113,0)
 ;by released (1) /non released (0)
"RTN","BPSSCR04",114,0)
 I BPSORT="R" D
"RTN","BPSSCR04",115,0)
 . F  S BP59=$O(@BPTMP@("FILE59",BP59)) Q:+BP59=0  D
"RTN","BPSSCR04",116,0)
 . . D SETSORT(BPTMP,BPSORT,$$ISRXREL^BPSSCRU2(+BP59),BP59)
"RTN","BPSSCR04",117,0)
 ;by status of the fill ACT-active/DIS-discontinued/SUS-suspended/etc
"RTN","BPSSCR04",118,0)
 I BPSORT="A" D
"RTN","BPSSCR04",119,0)
 . F  S BP59=$O(@BPTMP@("FILE59",BP59)) Q:+BP59=0  D
"RTN","BPSSCR04",120,0)
 . . D SETSORT(BPTMP,BPSORT,$$RXST^BPSSCRU2(+BP59),BP59)
"RTN","BPSSCR04",121,0)
 ;
"RTN","BPSSCR04",122,0)
 ;K @BPTMP@("FILE59")
"RTN","BPSSCR04",123,0)
 Q
"RTN","BPSSCR04",124,0)
 ;set SORT node
"RTN","BPSSCR04",125,0)
SETSORT(BPTMP,BPSORT,BPSRTVAL,BP59) ;*/
"RTN","BPSSCR04",126,0)
 S:$L(BPSRTVAL)>0 @BPTMP@("SORT",BPSORT,BPSRTVAL,BP59)=""
"RTN","BPSSCR04",127,0)
 Q
"RTN","BPSSCR04",128,0)
 ;first look at ^BPSC (#9002313.02) for fill/refill x-ref
"RTN","BPSSCR04",129,0)
 ; since #9002313.57 is not created at the time of refill
"RTN","BPSSCR04",130,0)
 ; and since #9002313.59 has the last update date, which can be any kind of date (released/reversal/etc)
"RTN","BPSSCR04",131,0)
 ;BPBEGDT - start date
"RTN","BPSSCR04",132,0)
 ;BPENDDT - end date
"RTN","BPSSCR04",133,0)
 ;BPTMP - tmp global for items found
"RTN","BPSSCR04",134,0)
 ;BPSORT - sort type (see COLLECT^BPSSCR04)
"RTN","BPSSCR04",135,0)
LOOK02(BPBEGDT,BPENDDT,BPTMP,BPSORT) ;
"RTN","BPSSCR04",136,0)
 N BP02,BPENDDT1,BPLDT02,BP59
"RTN","BPSSCR04",137,0)
 S BP59=0
"RTN","BPSSCR04",138,0)
 S BPLDT02=$$FM2YMD(BPBEGDT-0.00001)
"RTN","BPSSCR04",139,0)
 S BPENDDT1=$$FM2YMD(BPENDDT)
"RTN","BPSSCR04",140,0)
 I BPLDT02="" S BPLDT02=0
"RTN","BPSSCR04",141,0)
 I BPENDDT1="" S BPENDDT1=99999999
"RTN","BPSSCR04",142,0)
 F  S BPLDT02=+$O(^BPSC("AF",BPLDT02)) Q:BPLDT02=0!(BPLDT02>BPENDDT1)  D
"RTN","BPSSCR04",143,0)
 . S BP02=0 F  S BP02=$O(^BPSC("AF",BPLDT02,BP02)) Q:+BP02=0  D
"RTN","BPSSCR04",144,0)
 . . S BP59=+$O(^BPST("AE",BP02,0))
"RTN","BPSSCR04",145,0)
 . . Q:BP59=0
"RTN","BPSSCR04",146,0)
 . . I $D(@BPTMP@(BP59)) Q
"RTN","BPSSCR04",147,0)
 . . S @BPTMP@(BP59)=$$YMD2FM(BPLDT02)_"^02"
"RTN","BPSSCR04",148,0)
 Q
"RTN","BPSSCR04",149,0)
 ; finds claims in  #9002313.57 for given date frame
"RTN","BPSSCR04",150,0)
 ;#9002313.59 has only one entry per claim with, which has a date 
"RTN","BPSSCR04",151,0)
 ;  of the latest update for the claim
"RTN","BPSSCR04",152,0)
 ;#9002313.57 has more than one entries per claim and keep all 
"RTN","BPSSCR04",153,0)
 ;  changes made the claim
"RTN","BPSSCR04",154,0)
 ;so we have to go thru #9002313.57 to find the earliest date 
"RTN","BPSSCR04",155,0)
 ;related to the claim to check it against BPBEGDT
"RTN","BPSSCR04",156,0)
 ;BPBEGDT - start date
"RTN","BPSSCR04",157,0)
 ;BPENDDT - end date
"RTN","BPSSCR04",158,0)
 ;BPTMP - tmp global for items found
"RTN","BPSSCR04",159,0)
 ;BPSORT - sort type (see COLLECT^BPSSCR04)
"RTN","BPSSCR04",160,0)
LOOK57(BPBEGDT,BPENDDT,BPTMP,BPSORT) ;
"RTN","BPSSCR04",161,0)
 N BPLDT57,BP57,BP59
"RTN","BPSSCR04",162,0)
 S BPLDT57=BPBEGDT-0.00001
"RTN","BPSSCR04",163,0)
 F  S BPLDT57=+$O(^BPSTL("AH",BPLDT57)) Q:BPLDT57=0!(BPLDT57>BPENDDT)  D
"RTN","BPSSCR04",164,0)
 . S BP57=0 F  S BP57=$O(^BPSTL("AH",BPLDT57,BP57)) Q:+BP57=0  D
"RTN","BPSSCR04",165,0)
 . . S BP59=+$G(^BPSTL(BP57,0))
"RTN","BPSSCR04",166,0)
 . . I $D(@BPTMP@(BP59)) Q  ;don't create an entry if the claim is already there
"RTN","BPSSCR04",167,0)
 . . S @BPTMP@(BP59)=(BPLDT57\1)_"^57-"
"RTN","BPSSCR04",168,0)
 Q
"RTN","BPSSCR04",169,0)
 ; finds claims in  #9002313.59 for given date frame
"RTN","BPSSCR04",170,0)
 ;#9002313.59 has only one entry per claim with, which has a date 
"RTN","BPSSCR04",171,0)
 ;  of the latest update for the claim
"RTN","BPSSCR04",172,0)
 ;#9002313.57 has more than one entries per claim and keep all 
"RTN","BPSSCR04",173,0)
 ;  changes made the claim
"RTN","BPSSCR04",174,0)
 ;so we have to go thru #9002313.57 to find the earliest date 
"RTN","BPSSCR04",175,0)
 ;related to the claim to check it against BPBEGDT
"RTN","BPSSCR04",176,0)
 ;BPBEGDT - start date
"RTN","BPSSCR04",177,0)
 ;BPENDDT - end date
"RTN","BPSSCR04",178,0)
 ;BPTMP - tmp global for items found
"RTN","BPSSCR04",179,0)
 ;BPSORT - sort type (see COLLECT^BPSSCR04)
"RTN","BPSSCR04",180,0)
LOOK59(BPBEGDT,BPENDDT,BPTMP,BPSORT) ;
"RTN","BPSSCR04",181,0)
 N BPLDT59,BP59
"RTN","BPSSCR04",182,0)
 S BPLDT59=BPBEGDT-0.00001
"RTN","BPSSCR04",183,0)
 F  S BPLDT59=+$O(^BPST("AH",BPLDT59)) Q:BPLDT59=0!(BPLDT59>BPENDDT)  D
"RTN","BPSSCR04",184,0)
 . S BP59=0 F  S BP59=$O(^BPST("AH",BPLDT59,BP59)) Q:+BP59=0  D
"RTN","BPSSCR04",185,0)
 . . I $D(@BPTMP@(BP59)) Q  ;don't create an entry if the claim is already there
"RTN","BPSSCR04",186,0)
 . . S @BPTMP@(BP59)=(BPLDT59\1)_"^59-"
"RTN","BPSSCR04",187,0)
 Q
"RTN","BPSSCR04",188,0)
 ;
"RTN","BPSSCR04",189,0)
YMD2FM(BPYMD) ;convert YYYYDDMM to FM date
"RTN","BPSSCR04",190,0)
 Q (($E(BPYMD,1,4))-1700)_$E(BPYMD,5,8)
"RTN","BPSSCR04",191,0)
 ;
"RTN","BPSSCR04",192,0)
FM2YMD(BPFMDT) ;convert FM date to YYYYMMDD
"RTN","BPSSCR04",193,0)
 N Y,Y1
"RTN","BPSSCR04",194,0)
 S Y=$E(BPFMDT,2,3),Y1=$E(BPFMDT,1,1) S Y=$S(Y1=3:"20"_Y,Y1=2:"19"_Y,1:"")
"RTN","BPSSCR04",195,0)
 Q:Y Y_$E(BPFMDT,4,7)
"RTN","BPSSCR04",196,0)
 Q ""
"RTN","BPSSCR04",197,0)
 ;make PATIENT -INSURANCE intermediate SORTING
"RTN","BPSSCR04",198,0)
 ;global for transaction and patient sortings (1st pass)
"RTN","BPSSCR04",199,0)
 ;example:
"RTN","BPSSCR04",200,0)
 ;@BPTMP@("SORT","PI",BPDFN,BPINS,BP59)=""
"RTN","BPSSCR04",201,0)
MKPATINS(BPTMP) ;
"RTN","BPSSCR04",202,0)
 N BPSRTVAL,BPTRDT,BP59,BPDFN,BPINS
"RTN","BPSSCR04",203,0)
 S BP59=0
"RTN","BPSSCR04",204,0)
 F  S BP59=+$O(@BPTMP@("FILE59",BP59)) Q:+BP59=0  D
"RTN","BPSSCR04",205,0)
 . S BPDFN=+$$GETPATID^BPSSCRU2(BP59)
"RTN","BPSSCR04",206,0)
 . Q:BPDFN=0
"RTN","BPSSCR04",207,0)
 . S BPINS=+$$GETINSUR^BPSSCRU2(BP59)
"RTN","BPSSCR04",208,0)
 . S @BPTMP@("SORT","PI",BPDFN,BPINS,BP59)=""
"RTN","BPSSCR04",209,0)
 Q
"RTN","BPSSCR04",210,0)
 ;make PATIENT NAME -INSURANCE intermediate SORTING
"RTN","BPSSCR04",211,0)
 ;global for transaction and patient sortings (1st pass)
"RTN","BPSSCR04",212,0)
 ;example:
"RTN","BPSSCR04",213,0)
 ;@BPTMP@("SORT","PNI",BPDFN,BPINS,BP59)=""
"RTN","BPSSCR04",214,0)
MKNAMINS(BPTMP) ;
"RTN","BPSSCR04",215,0)
 N BPSRTVAL,BPTRDT,BP59,BPDFN,BPINS
"RTN","BPSSCR04",216,0)
 S BP59=0
"RTN","BPSSCR04",217,0)
 F  S BP59=+$O(@BPTMP@("FILE59",BP59)) Q:+BP59=0  D
"RTN","BPSSCR04",218,0)
 . S BPDFN=+$$GETPATID^BPSSCRU2(BP59)
"RTN","BPSSCR04",219,0)
 . Q:BPDFN=0
"RTN","BPSSCR04",220,0)
 . S BPINS=+$$GETINSUR^BPSSCRU2(BP59)
"RTN","BPSSCR04",221,0)
 . S @BPTMP@("SORT","PNI",$E($$PATNAME^BPSSCRU2(BPDFN),1,20)_BPDFN,BPINS,BP59)=""
"RTN","BPSSCR04",222,0)
 Q
"RTN","BPSSCR04",223,0)
 ;Transaction type sorting - the 2nd pass
"RTN","BPSSCR04",224,0)
 ;is called after MKPATINS
"RTN","BPSSCR04",225,0)
MKTRSORT(BPTMP) ;
"RTN","BPSSCR04",226,0)
 N BPSRTVAL,BPTRDT,BP59,BPDFN,BPINS
"RTN","BPSSCR04",227,0)
 S BPTRDT=-99999999,BPSRTVAL=0
"RTN","BPSSCR04",228,0)
 F  S BPTRDT=$O(@BPTMP@("TRDTDFN",BPTRDT)) Q:+BPTRDT=0  D
"RTN","BPSSCR04",229,0)
 . S BPDFN=0
"RTN","BPSSCR04",230,0)
 . F  S BPDFN=$O(@BPTMP@("TRDTDFN",BPTRDT,BPDFN)) Q:+BPDFN=0  D
"RTN","BPSSCR04",231,0)
 . . S BPINS=""
"RTN","BPSSCR04",232,0)
 . . F  S BPINS=$O(@BPTMP@("TRDTDFN",BPTRDT,BPDFN,BPINS)) Q:BPINS=""  D
"RTN","BPSSCR04",233,0)
 . . . S BPSRTVAL=BPSRTVAL+1,BPINS=+BPINS
"RTN","BPSSCR04",234,0)
 . . . S BP59=0
"RTN","BPSSCR04",235,0)
 . . . F  S BP59=$O(@BPTMP@("SORT","PI",BPDFN,BPINS,BP59)) Q:+BP59=0  D
"RTN","BPSSCR04",236,0)
 . . . . D SETSORT(BPTMP,"T",BPSRTVAL,BP59)
"RTN","BPSSCR04",237,0)
 Q
"RTN","BPSSCR04",238,0)
 ;Patient type sorting - the 2nd pass
"RTN","BPSSCR04",239,0)
 ;is called after MKPATINS
"RTN","BPSSCR04",240,0)
MKPTSORT(BPTMP) ;
"RTN","BPSSCR04",241,0)
 N BPSRTVAL,BPTRDT,BP59,BPPATNAM,BPINS
"RTN","BPSSCR04",242,0)
 S BPPATNAM="",BPSRTVAL=0
"RTN","BPSSCR04",243,0)
 F  S BPPATNAM=$O(@BPTMP@("SORT","PNI",BPPATNAM)) Q:BPPATNAM=""  D
"RTN","BPSSCR04",244,0)
 . S BPINS="" ;"" to handle claims without insurance (corrupted data)
"RTN","BPSSCR04",245,0)
 . F  S BPINS=$O(@BPTMP@("SORT","PNI",BPPATNAM,BPINS)) Q:BPINS=""  D
"RTN","BPSSCR04",246,0)
 . . S BPSRTVAL=BPSRTVAL+1,BPINS=+BPINS
"RTN","BPSSCR04",247,0)
 . . S BP59=0
"RTN","BPSSCR04",248,0)
 . . F  S BP59=$O(@BPTMP@("SORT","PNI",BPPATNAM,BPINS,BP59)) Q:+BP59=0  D
"RTN","BPSSCR04",249,0)
 . . . D SETSORT(BPTMP,"P",BPSRTVAL,BP59)
"RTN","BPSSCR04",250,0)
 Q
"RTN","BPSSCR04",251,0)
 ;
"RTN","BPSSCRCL")
0^25^B86678930
"RTN","BPSSCRCL",1,0)
BPSSCRCL ;BHAM ISC/SS - ECME SCREEN CLOSE CLAIMS ;05-APR-05
"RTN","BPSSCRCL",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8,11,15,19,20**;JUN 2004;Build 27
"RTN","BPSSCRCL",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRCL",4,0)
 ;
"RTN","BPSSCRCL",5,0)
 ; Reference to FIND^PSOREJUT supported by ICR #4706
"RTN","BPSSCRCL",6,0)
 ;
"RTN","BPSSCRCL",7,0)
 Q
"RTN","BPSSCRCL",8,0)
 ;
"RTN","BPSSCRCL",9,0)
CLO ;entry point to close claims
"RTN","BPSSCRCL",10,0)
 N BPRET,BPSARR59
"RTN","BPSSCRCL",11,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSSCRCL",12,0)
 D FULL^VALM1
"RTN","BPSSCRCL",13,0)
 W !,"Enter the line numbers for the claim(s) to be closed."
"RTN","BPSSCRCL",14,0)
 S BPRET=$$ASKLINES^BPSSCRU4("Select item(s)","C",.BPSARR59,VALMAR)
"RTN","BPSSCRCL",15,0)
 I BPRET="^" S VALMBCK="R" Q
"RTN","BPSSCRCL",16,0)
 ;close claims
"RTN","BPSSCRCL",17,0)
 ;update the content of the screen
"RTN","BPSSCRCL",18,0)
 ;only if at least one claim was closed
"RTN","BPSSCRCL",19,0)
 I $$CLOSE(.BPSARR59) D REDRAW^BPSSCRUD("Updating screen for closed claims...")
"RTN","BPSSCRCL",20,0)
 E  S VALMBCK="R"
"RTN","BPSSCRCL",21,0)
 Q
"RTN","BPSSCRCL",22,0)
 ;
"RTN","BPSSCRCL",23,0)
 ;close claims
"RTN","BPSSCRCL",24,0)
 ;input:
"RTN","BPSSCRCL",25,0)
 ; BP59ARR - array with ptrs to BPS TRANSACTION FILE
"RTN","BPSSCRCL",26,0)
 ;       BP59ARR(ien59)="ien in TMP ^ number on the user screen"
"RTN","BPSSCRCL",27,0)
 ;returns:
"RTN","BPSSCRCL",28,0)
 ; BPCLTOT - number of closed claims
"RTN","BPSSCRCL",29,0)
CLOSE(BP59ARR) ;
"RTN","BPSSCRCL",30,0)
 N BPNEWARR,BPRETV,BPREJFLG,X
"RTN","BPSSCRCL",31,0)
 N BPDFN,BP59,BPIFANY,BPQ,BPCLST,BPS52,BPSRF,BPSZ,BPSECOND
"RTN","BPSSCRCL",32,0)
 N BPREAS,BPCOMM,BP90ANSW,BPRCOPAY,BPRXINFO,BPCOP,BPCLTOT,BPINS,BPINSNM,BP59FRST
"RTN","BPSSCRCL",33,0)
 S BPRETV=$$MKNEWARR^BPSSCR05(.BP59ARR,.BPNEWARR,.BPINS)
"RTN","BPSSCRCL",34,0)
 S BPQ="",BPIFANY=0,BPREJFLG=1,BPSECOND=0
"RTN","BPSSCRCL",35,0)
 S BPDFN=""
"RTN","BPSSCRCL",36,0)
 F  S BPDFN=$O(BPNEWARR(BPDFN)) Q:BPDFN=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",37,0)
 . W !!,"You've chosen to close the following prescription(s) for",!,$E($$PATNAME^BPSSCRU2(BPDFN),1,13)_" :"
"RTN","BPSSCRCL",38,0)
 . S BP59="" F  S BP59=$O(BPNEWARR(BPDFN,BP59)) Q:BP59=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",39,0)
 . . I $Y>20 D PAUSE^VALM1 W @IOF I X="^" S BPQ="^" Q
"RTN","BPSSCRCL",40,0)
 . . S BPIFANY=1,BPQ=""
"RTN","BPSSCRCL",41,0)
 . . S BPREJFLG=+$P($G(BPNEWARR(BPDFN,BP59)),U,3)
"RTN","BPSSCRCL",42,0)
 . . W !,@VALMAR@(+$G(BPNEWARR(BPDFN,BP59)),0)
"RTN","BPSSCRCL",43,0)
 . . D DISPREJ^BPSSCRU6(BP59)
"RTN","BPSSCRCL",44,0)
 . . ;
"RTN","BPSSCRCL",45,0)
 . . ; don't allow the selection of non-billable entries here
"RTN","BPSSCRCL",46,0)
 . . I $$NB^BPSSCR03(BP59) D  S BPQ="^" Q
"RTN","BPSSCRCL",47,0)
 . . . W !?6,$$EREJTXT^BPSSCR03(BP59)
"RTN","BPSSCRCL",48,0)
 . . . W !,"Entry is NON BILLABLE.  There is no claim to close."
"RTN","BPSSCRCL",49,0)
 . . . Q
"RTN","BPSSCRCL",50,0)
 . . ;
"RTN","BPSSCRCL",51,0)
 . . ;can't close a closed claim. The user must reopen first.
"RTN","BPSSCRCL",52,0)
 . . I $$CLOSED02^BPSSCR03($P($G(^BPST(BP59,0)),U,4)) W !,"This claim is already closed." S BPQ="^" Q
"RTN","BPSSCRCL",53,0)
 . . ; Check for unresolved rejects - BPS*1*19
"RTN","BPSSCRCL",54,0)
 . . S BPSZ=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSSCRCL",55,0)
 . . I $$FIND^PSOREJUT($P(BPSZ,U),$P(BPSZ,U,2)) D  Q
"RTN","BPSSCRCL",56,0)
 . . . W !,"The Prescription is currently open in the pharmacist's Third Party Payer"
"RTN","BPSSCRCL",57,0)
 . . . W !,"Reject Worklist. The claim cannot be closed until action is taken by the"
"RTN","BPSSCRCL",58,0)
 . . . W !,"pharmacist."
"RTN","BPSSCRCL",59,0)
 . . . S BPQ="^"
"RTN","BPSSCRCL",60,0)
 . . ;get claim status from transaction
"RTN","BPSSCRCL",61,0)
 . . S BPCLST=$$CLAIMST^BPSSCRU3(BP59)
"RTN","BPSSCRCL",62,0)
 . . ;Is this a secondary claim?
"RTN","BPSSCRCL",63,0)
 . . I $P($G(^BPST(BP59,0)),U,14)=2 S BPSECOND=1
"RTN","BPSSCRCL",64,0)
 . . I $P($G(^BPST(BP59,0)),U,14)<2,$$PAYABLE^BPSOSRX5($P(BPCLST,U)),$$PAYBLSEC^BPSUTIL2(BP59) D  S BPQ="^" Q
"RTN","BPSSCRCL",65,0)
 . . . W !,"The claim cannot be closed if the secondary claim is payable.",!,"Please reverse the secondary claim first."
"RTN","BPSSCRCL",66,0)
 . . I BPSECOND,BPCLST'["E REJECTED",BPCLST'["E REVERSAL ACCEPTED" D  S BPQ="^" Q
"RTN","BPSSCRCL",67,0)
 . . . W !,"The CLOSE action can only be applied to an E REJECTED or E REVERSAL ACCEPTED",!,"secondary claim. This claim is ",$P(BPCLST,U),".",!,"The secondary claim is also closed when the primary claim is closed."
"RTN","BPSSCRCL",68,0)
 . . W:BPREJFLG=0 !,"Claim Neither Rejected Nor Reversed and cannot be Closed."
"RTN","BPSSCRCL",69,0)
 I +BPRETV=0 Q $$QUITCL()
"RTN","BPSSCRCL",70,0)
 I BPQ="^" Q $$QUITCL()
"RTN","BPSSCRCL",71,0)
 ;
"RTN","BPSSCRCL",72,0)
 ; check 2nd insurance, but only if closing a Primary claim.
"RTN","BPSSCRCL",73,0)
 S BPQ=""
"RTN","BPSSCRCL",74,0)
 I 'BPSECOND D
"RTN","BPSSCRCL",75,0)
 . S BPDFN="" F  S BPDFN=$O(BPINS(BPDFN)) Q:BPDFN=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",76,0)
 . . S BPINSNM="" F  S BPINSNM=$O(BPINS(BPDFN,BPINSNM)) Q:BPINSNM=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",77,0)
 . . . S BP59FRST=0
"RTN","BPSSCRCL",78,0)
 . . . S BP59=""
"RTN","BPSSCRCL",79,0)
 . . . K BPRXINFO
"RTN","BPSSCRCL",80,0)
 . . . F  S BP59=$O(BPINS(BPDFN,BPINSNM,BP59)) Q:BP59=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",81,0)
 . . . . S:BP59FRST=0 BP59FRST=BP59
"RTN","BPSSCRCL",82,0)
 . . . . S BPRXINFO(BP59)=$E($G(@VALMAR@(+$G(BP59ARR(BP59)),0)),7,99)
"RTN","BPSSCRCL",83,0)
 . . . ; Only check 2nd if the RX/Fill is released
"RTN","BPSSCRCL",84,0)
 . . . S BPSZ=$$RXREF^BPSSCRU2(BP59FRST)
"RTN","BPSSCRCL",85,0)
 . . . S BPS52=$P(BPSZ,U),BPSRF=$P(BPSZ,U,2)
"RTN","BPSSCRCL",86,0)
 . . . Q:$$RELDATE^BPSBCKJ(BPS52,BPSRF)']""
"RTN","BPSSCRCL",87,0)
 . . . ; call CH2NDINS^BPSSCRU5 only once for all claims for this patient and insurance
"RTN","BPSSCRCL",88,0)
 . . . ; you can use one BP59FRST for the group of claims here as a parameter since 
"RTN","BPSSCRCL",89,0)
 . . . ; they all are all identical from the "patient-insurance pair" point of view
"RTN","BPSSCRCL",90,0)
 . . . D:BP59FRST>0 CH2NDINS^BPSSCRU5(BP59FRST,$E($$PATNAME^BPSSCRU2(BPDFN),1,13),BPINSNM,.BPRXINFO)
"RTN","BPSSCRCL",91,0)
 ;
"RTN","BPSSCRCL",92,0)
 I BPQ="^" Q $$QUITCL()
"RTN","BPSSCRCL",93,0)
 ;
"RTN","BPSSCRCL",94,0)
 W !!,"ALL Selected Rxs will be CLOSED using the same information gathered in the",!,"following prompts.",!
"RTN","BPSSCRCL",95,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSSCRCL",96,0)
 I BPQ'=1 Q $$QUITCL() ; 
"RTN","BPSSCRCL",97,0)
 ; ask questions for all of them
"RTN","BPSSCRCL",98,0)
 W !!
"RTN","BPSSCRCL",99,0)
 I $$ASKQUEST(+$P(BPRETV,U,2),.BPREAS,.BPCOMM,.BP90ANSW,.BPRCOPAY)'=1 Q $$QUITCL()
"RTN","BPSSCRCL",100,0)
 ;
"RTN","BPSSCRCL",101,0)
 W @IOF
"RTN","BPSSCRCL",102,0)
 ;and finally close all
"RTN","BPSSCRCL",103,0)
 S BPCLTOT=0
"RTN","BPSSCRCL",104,0)
 S BPDFN="" F  S BPDFN=$O(BPNEWARR(BPDFN)) Q:BPDFN=""  D
"RTN","BPSSCRCL",105,0)
 . S BP59="" F  S BP59=$O(BPNEWARR(BPDFN,BP59)) Q:BP59=""  D
"RTN","BPSSCRCL",106,0)
 . . I $P($G(BPNEWARR(BPDFN,BP59)),U,3)=0 Q  ;can't be closed
"RTN","BPSSCRCL",107,0)
 . . S BPCOP=0
"RTN","BPSSCRCL",108,0)
 . . I +BPRCOPAY=1,$P($G(BPNEWARR(BPDFN,BP59)),U,4)=1 S BPCOP=1 ;release copay
"RTN","BPSSCRCL",109,0)
 . . I $$CLOSEIT(BP59,$P(BPREAS,U,2),BPCOMM,BP90ANSW,BPCOP)>0 D
"RTN","BPSSCRCL",110,0)
 . . . S BPCLTOT=BPCLTOT+1
"RTN","BPSSCRCL",111,0)
 ;
"RTN","BPSSCRCL",112,0)
 W !,BPCLTOT," claim",$S(BPCLTOT'=1:"s have",1:" has")," been closed.",!
"RTN","BPSSCRCL",113,0)
 D PAUSE^VALM1
"RTN","BPSSCRCL",114,0)
 Q BPCLTOT
"RTN","BPSSCRCL",115,0)
 ;
"RTN","BPSSCRCL",116,0)
QUITCL() ;
"RTN","BPSSCRCL",117,0)
 W !!,"0 claims have been closed."
"RTN","BPSSCRCL",118,0)
 D PAUSE^VALM1
"RTN","BPSSCRCL",119,0)
 Q 0
"RTN","BPSSCRCL",120,0)
 ;/**
"RTN","BPSSCRCL",121,0)
 ;Ask all necessary questions
"RTN","BPSSCRCL",122,0)
 ;Input
"RTN","BPSSCRCL",123,0)
 ; BPRELCOP - ask release copay question
"RTN","BPSSCRCL",124,0)
 ; .BPREAZ - ptr to #356.8 ^ CLOSE REASON NAME ^ ECME FLAG ^ ECME PAPER FLAG
"RTN","BPSSCRCL",125,0)
 ; .BPCOMZ - close comment (string)
"RTN","BPSSCRCL",126,0)
 ; .BP90ANSZ - "", "D"(drop to paper) or "N" (non-billable)
"RTN","BPSSCRCL",127,0)
 ; .BPRCOPAZ - 1(Yes) or 0(No) , answer to "release copay" question
"RTN","BPSSCRCL",128,0)
 ;Output:
"RTN","BPSSCRCL",129,0)
 ; 0 - cancel process
"RTN","BPSSCRCL",130,0)
 ; ^ - emergency quit (cancel process)
"RTN","BPSSCRCL",131,0)
 ; 1 - ok, can proceed
"RTN","BPSSCRCL",132,0)
ASKQUEST(BPRELCOP,BPREAZ,BPCOMZ,BP90ANSZ,BPRCOPAZ) ;*/
"RTN","BPSSCRCL",133,0)
 S BPCOMZ=""
"RTN","BPSSCRCL",134,0)
 S BP90ANSZ=""
"RTN","BPSSCRCL",135,0)
 S BPRCOPAZ=0
"RTN","BPSSCRCL",136,0)
 ;ask the user to choose the close reason from #356.8
"RTN","BPSSCRCL",137,0)
 ;using set of close reasons in IB file 356.8
"RTN","BPSSCRCL",138,0)
 S BPREAZ=$$REASON()
"RTN","BPSSCRCL",139,0)
 I BPREAZ="^" Q "^"
"RTN","BPSSCRCL",140,0)
 I ($P(BPREAZ,U,4)=1) D  ;if has ECME PAPER FLAG
"RTN","BPSSCRCL",141,0)
 . ;ask if the claim is still billable thru paper?
"RTN","BPSSCRCL",142,0)
 . S BP90ANSZ=$$PROMPT^BPSSCRCV("S^N:NON-BILLABLE;D:DROP TO PAPER","Treat as (N)on-Billable Episode or (D)rop Bill to Paper?","")
"RTN","BPSSCRCL",143,0)
 I BP90ANSZ=-1 Q "^"
"RTN","BPSSCRCL",144,0)
 S BPCOMZ=$$COMMENT("Comment ",40)
"RTN","BPSSCRCL",145,0)
 I (BPCOMZ="^") Q "^"
"RTN","BPSSCRCL",146,0)
 I $L(BPCOMZ)>0,BPCOMZ?1" "." " S BPCOMZ=""
"RTN","BPSSCRCL",147,0)
 ;check copay
"RTN","BPSSCRCL",148,0)
 ;ask "release copay?" in all NON-BILLABLE cases, i.e. except user answered "DROP TO PAPER"
"RTN","BPSSCRCL",149,0)
 ;(even in cases when he was not asked about it)
"RTN","BPSSCRCL",150,0)
 I BP90ANSZ'="D",BPRELCOP D
"RTN","BPSSCRCL",151,0)
 . ; Ask user if s/he wants to release a copay
"RTN","BPSSCRCL",152,0)
 . S BPRCOPAZ=$$YESNO^BPSSCRRS("Release Patient CoPay(Y/N)")
"RTN","BPSSCRCL",153,0)
 I BPRCOPAZ=-1 Q "^"
"RTN","BPSSCRCL",154,0)
 ;
"RTN","BPSSCRCL",155,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSSCRCL",156,0)
 I BPQ=-1 Q "^" ;quit by "^"
"RTN","BPSSCRCL",157,0)
 I BPQ'=1 Q 0 ;doesn't want to proceed
"RTN","BPSSCRCL",158,0)
 Q 1 ; answers can be used
"RTN","BPSSCRCL",159,0)
 ;
"RTN","BPSSCRCL",160,0)
 ;/**
"RTN","BPSSCRCL",161,0)
 ;ask for the close reason
"RTN","BPSSCRCL",162,0)
 ;return:
"RTN","BPSSCRCL",163,0)
 ;   ptr to #356.8 ^ CLOSE REASON NAME ^ ECME FLAG ^ ECME PAPER FLAG
"RTN","BPSSCRCL",164,0)
REASON() ;
"RTN","BPSSCRCL",165,0)
 N DIC,BPREASNM,BP3568,Y
"RTN","BPSSCRCL",166,0)
 ; - Asks for REASON for Closing
"RTN","BPSSCRCL",167,0)
 S DIC="^IBE(356.8,",DIC(0)="AEQMZ"
"RTN","BPSSCRCL",168,0)
 S DIC("S")="I $P(^(0),U,2)=1"
"RTN","BPSSCRCL",169,0)
 D ^DIC
"RTN","BPSSCRCL",170,0)
 I Y=-1 Q "^"
"RTN","BPSSCRCL",171,0)
 Q +Y_U_Y(0)
"RTN","BPSSCRCL",172,0)
 ;/**
"RTN","BPSSCRCL",173,0)
 ;enter the comment
"RTN","BPSSCRCL",174,0)
 ;BPSTR  -prompt string
"RTN","BPSSCRCL",175,0)
 ;BPMLEN -maxlen
"RTN","BPSSCRCL",176,0)
COMMENT(BPSTR,BPMLEN) ;*/
"RTN","BPSSCRCL",177,0)
 N DIR,DTOUT,DUOUT,BPQ
"RTN","BPSSCRCL",178,0)
 I '$D(BPSTR) S BPSTR="Comment "
"RTN","BPSSCRCL",179,0)
 I '$D(BPMLEN) S BPMLEN=40
"RTN","BPSSCRCL",180,0)
 S DIR(0)="FO^0:250"
"RTN","BPSSCRCL",181,0)
 S DIR("A")=BPSTR
"RTN","BPSSCRCL",182,0)
 S DIR("?",1)="This response must have no more than "_BPMLEN_" characters"
"RTN","BPSSCRCL",183,0)
 S DIR("?")="and must not contain embedded up arrow."
"RTN","BPSSCRCL",184,0)
 S BPQ=0
"RTN","BPSSCRCL",185,0)
 F  D  Q:+BPQ'=0
"RTN","BPSSCRCL",186,0)
 . D ^DIR
"RTN","BPSSCRCL",187,0)
 . I $D(DUOUT)!($D(DTOUT)) S BPQ=-1 Q
"RTN","BPSSCRCL",188,0)
 . I $L(Y)'>BPMLEN S BPQ=1 Q
"RTN","BPSSCRCL",189,0)
 . W !!,"This response must have no more than "_BPMLEN_" characters"
"RTN","BPSSCRCL",190,0)
 . W !,"and must not contain embedded uparrow.",!
"RTN","BPSSCRCL",191,0)
 . S DIR("B")=$E(Y,1,BPMLEN)
"RTN","BPSSCRCL",192,0)
 Q:BPQ<0 "^"
"RTN","BPSSCRCL",193,0)
 Q Y
"RTN","BPSSCRCL",194,0)
 ;/** 
"RTN","BPSSCRCL",195,0)
 ;close the claim
"RTN","BPSSCRCL",196,0)
 ;the approach and code partially borrowed from IHS code CLOSE^BPSOS6N
"RTN","BPSSCRCL",197,0)
 ;BPSTRA - ptr to #9002313.59
"RTN","BPSSCRCL",198,0)
 ;REASON - text name of the close reason 
"RTN","BPSSCRCL",199,0)
 ;BPSCLCM - comment 
"RTN","BPSSCRCL",200,0)
 ;BPDROP:
"RTN","BPSSCRCL",201,0)
 ;  "D" - DROP BILL TO PAPER
"RTN","BPSSCRCL",202,0)
 ;  "N" - NON-BILLABLE
"RTN","BPSSCRCL",203,0)
 ;BPRELCOP - 1 (Yes) or 0 (No) release copay or not?
"RTN","BPSSCRCL",204,0)
CLOSEIT(BPSTRA,REASON,BPSCLCM,BPDROP,BPRELCOP) ;
"RTN","BPSSCRCL",205,0)
 N BPSCLA,ERROR,DA,DR,BPLCK,DIE
"RTN","BPSSCRCL",206,0)
 S BPSCLA=$$GET1^DIQ(9002313.59,BPSTRA,3,"I")
"RTN","BPSSCRCL",207,0)
 W !,"Closing Claim ",$$GET1^DIQ(9002313.02,BPSCLA,.01),"..."
"RTN","BPSSCRCL",208,0)
 S BPLCK=0
"RTN","BPSSCRCL",209,0)
 L +^BPSC(BPSCLA):0
"RTN","BPSSCRCL",210,0)
 I $T S BPLCK=1
"RTN","BPSSCRCL",211,0)
 E  W !,"       *** CLAIM ",$$GET1^DIQ(9002313.02,BPSCLA,.01)," IN USE ***" Q 0
"RTN","BPSSCRCL",212,0)
 D CLOSE^BPSBUTL(BPSCLA,BPSTRA,REASON,$S($G(BPDROP)="D":1,1:0),BPRELCOP,BPSCLCM,.ERROR)
"RTN","BPSSCRCL",213,0)
 I $D(ERROR) W "NOT OK" D DSPERR(ERROR) D  Q 0
"RTN","BPSSCRCL",214,0)
 . I BPLCK=1 L -^BPSC(BPSCLA)
"RTN","BPSSCRCL",215,0)
 S DIE="^BPSC(",DA=BPSCLA,DR="901///1;902///"_$$NOW^XLFDT()_";903////"_DUZ_";904///"_REASON_";905////"_BPDROP D ^DIE
"RTN","BPSSCRCL",216,0)
 I BPLCK=1 L -^BPSC(BPSCLA)
"RTN","BPSSCRCL",217,0)
 H 1 W "OK"
"RTN","BPSSCRCL",218,0)
 Q 1
"RTN","BPSSCRCL",219,0)
 ;
"RTN","BPSSCRCL",220,0)
DSPERR(MSG) ; Display the ERROR message
"RTN","BPSSCRCL",221,0)
 W !,"Error: *** ",MSG," ***"
"RTN","BPSSCRCL",222,0)
 Q
"RTN","BPSSCRCL",223,0)
 ;
"RTN","BPSSCRCL",224,0)
 ;/**
"RTN","BPSSCRCL",225,0)
 ;ECME has tried to submit the claim to insurance with the name BPINSNAM
"RTN","BPSSCRCL",226,0)
 ;but the claim was rejected and now we need to determine if the patient
"RTN","BPSSCRCL",227,0)
 ;has any other insurance with pharmacy coverage that can be billed for the RX
"RTN","BPSSCRCL",228,0)
 ;Input:
"RTN","BPSSCRCL",229,0)
 ; BP59 - pointer to file #9002313.59
"RTN","BPSSCRCL",230,0)
 ; BPINSNAM - insurance that have already been used by ECME
"RTN","BPSSCRCL",231,0)
 ;Output:
"RTN","BPSSCRCL",232,0)
 ; 0 - not found
"RTN","BPSSCRCL",233,0)
 ; 1 ^ Insurance Name ^ Group Number ^ Date  of service
"RTN","BPSSCRCL",234,0)
NEXTINS(BP59,BPINSNAM) ;get insurance info by the pointer of #9002313.59
"RTN","BPSSCRCL",235,0)
 N BPDOS,BPDFN,BPZZ,BP36,BPX,BPHONE,BPY,BPINSNM
"RTN","BPSSCRCL",236,0)
 N BPPHARM,BPCOORD,BPINS,BPFOUND
"RTN","BPSSCRCL",237,0)
 S BPY=0
"RTN","BPSSCRCL",238,0)
 S BPHONE=$P($G(^BPST(BP59,10,+$G(^BPST(BP59,9)),3)),U,2)
"RTN","BPSSCRCL",239,0)
 S BPDOS=+$P($G(^BPST(BP59,12)),U,2)\1
"RTN","BPSSCRCL",240,0)
 I BPDOS=0 S BPDOS=+$P($G(^BPST(BP59,0)),U,8)\1
"RTN","BPSSCRCL",241,0)
 S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSSCRCL",242,0)
 ; call INSUR^IBBAPI to get information about:
"RTN","BPSSCRCL",243,0)
 ;1 = Insurance Company Name
"RTN","BPSSCRCL",244,0)
 ;7 = Coordination of Benefits (primary, secondary, tertiary)
"RTN","BPSSCRCL",245,0)
 ;15 = Pharmacy Coverage?
"RTN","BPSSCRCL",246,0)
 ;18 = Group Number
"RTN","BPSSCRCL",247,0)
 S BPX=$$INSUR^IBBAPI(BPDFN,BPDOS,,.BPZZ,"1,7,15,18")
"RTN","BPSSCRCL",248,0)
 S BP1="" F  S BP1=$O(BPZZ("IBBAPI","INSUR",BP1)) Q:+BP1=0  D
"RTN","BPSSCRCL",249,0)
 . ;get pharmacy coverage
"RTN","BPSSCRCL",250,0)
 . S BPPHARM=+$G(BPZZ("IBBAPI","INSUR",BP1,15))
"RTN","BPSSCRCL",251,0)
 I BPX<1 Q 0
"RTN","BPSSCRCL",252,0)
 D PROCINS(.BPZZ)
"RTN","BPSSCRCL",253,0)
 ;check pharmacy coverage
"RTN","BPSSCRCL",254,0)
 S BPFOUND=0 ;if found will be set to insurance node in the INSUR^IBBAPI array
"RTN","BPSSCRCL",255,0)
 S BPPHARM=1 ;look only at those with pharmacy coverage
"RTN","BPSSCRCL",256,0)
 S BPCOORD=0
"RTN","BPSSCRCL",257,0)
 F  S BPCOORD=+$O(BPZZ("RES",BPPHARM,BPCOORD)) Q:BPCOORD=0!(BPFOUND'=0)  D
"RTN","BPSSCRCL",258,0)
 . S BPINS=+$O(BPZZ("RES",BPPHARM,BPCOORD,0))
"RTN","BPSSCRCL",259,0)
 . I BPINS>0 I $P($G(BPZZ("IBBAPI","INSUR",BPINS,1)),U,2)'=BPINSNAM S BPFOUND=BPINS
"RTN","BPSSCRCL",260,0)
 I BPFOUND=0 Q 0
"RTN","BPSSCRCL",261,0)
 Q 1_U_$P($G(BPZZ("IBBAPI","INSUR",BPFOUND,1)),U,2)_U_$P($G(BPZZ("IBBAPI","INSUR",BPFOUND,18)),U)_U_BPDOS
"RTN","BPSSCRCL",262,0)
 ;
"RTN","BPSSCRCL",263,0)
 ;process insurances
"RTN","BPSSCRCL",264,0)
 ;input: local array returned by INSUR^IBBAPI
"RTN","BPSSCRCL",265,0)
 ;output: BPZZ("RES",pharmacy coverage,coordination,insurance element # in BPZZ array)
"RTN","BPSSCRCL",266,0)
PROCINS(BPZZ) ;
"RTN","BPSSCRCL",267,0)
 N BP1,BP2,BP0,BPPHONE,BPPHARM,BPCOORD
"RTN","BPSSCRCL",268,0)
 S BP1="" F  S BP1=$O(BPZZ("IBBAPI","INSUR",BP1)) Q:+BP1=0  D
"RTN","BPSSCRCL",269,0)
 . ;get pharmacy coverage
"RTN","BPSSCRCL",270,0)
 . S BPPHARM=+$G(BPZZ("IBBAPI","INSUR",BP1,15))
"RTN","BPSSCRCL",271,0)
 . ;get coordination of benefits
"RTN","BPSSCRCL",272,0)
 . S BPCOORD=+$G(BPZZ("IBBAPI","INSUR",BP1,7))
"RTN","BPSSCRCL",273,0)
 . ;create ^TMP to sort results by pharmacy coverage and coordination of benefits
"RTN","BPSSCRCL",274,0)
 . S BPZZ("RES",BPPHARM,BPCOORD,BP1)=""
"RTN","BPSSCRCL",275,0)
 Q
"RTN","BPSSCRCV")
0^3^B55540510
"RTN","BPSSCRCV",1,0)
BPSSCRCV ;BHAM ISC/SS - ECME SCREEN CHANGE VIEW ;05-APR-05
"RTN","BPSSCRCV",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,11,14,20**;JUN 2004;Build 27
"RTN","BPSSCRCV",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRCV",4,0)
 ;USER SCREEN
"RTN","BPSSCRCV",5,0)
 Q
"RTN","BPSSCRCV",6,0)
 ;****
"RTN","BPSSCRCV",7,0)
 ;This software is using PARAMETER TOOLS (see XT*7.3*26) to store user's settings:
"RTN","BPSSCRCV",8,0)
 ;PARAMETER DEFINITION NAME="BPS USRSCR" (file #8989.51, IA# 2263)
"RTN","BPSSCRCV",9,0)
 ;ENTITY is "USR" , i.e. IEN in ^VA(200  -- see definition for "BPS USRSCR"
"RTN","BPSSCRCV",10,0)
 ;INSTANCEs are as follows:
"RTN","BPSSCRCV",11,0)
 ;1.01 ONE/ALL USERS --'U' ONE USER, 'A' ALL; Display claims for ONE or ALL users 
"RTN","BPSSCRCV",12,0)
 ;1.02 ONE/ALL PATIENTS --'P' FOR ONE PATIENT; 'A' FOR ALL; Display claims for ONE/ALL PATIENTS 
"RTN","BPSSCRCV",13,0)
 ;1.03 ONE/ALL RX --'R' FOR ONE RX; 'A' FOR ALL; Display claims for ONE or ALL RX 
"RTN","BPSSCRCV",14,0)
 ;1.04 HOURS/DAYS -- 'D' FOR DAYS; 'H' FOR HOURS; Use HOURS or DAYS to specify timeframe 
"RTN","BPSSCRCV",15,0)
 ;1.05 TIMEFRAME -- NUMBER Depends on the value of the field "USR SCR HOURS/DAYS" this field will
"RTN","BPSSCRCV",16,0)
 ;store the default number of HOURS from NOW or DAYS from TODAY to select claims to display 
"RTN","BPSSCRCV",17,0)
 ;1.06 REJECTED/PAYABLE --'R' FOR REJECTS; 'P' FOR PAYABLES; 'U' FOR UNSTRANDED; 'A' FOR ALL; Display Rejects or Payables or Unstranded or ALL claims 
"RTN","BPSSCRCV",18,0)
 ;1.07 RELEASED/NOT RELEASED --'R' FOR RELEASED; 'N' FOR NON-RELEASED; 'A' FOR ALL; Display Released Rxs or Non-Released Rxs or ALL 
"RTN","BPSSCRCV",19,0)
 ;1.08 CMOP/MAIL/WINDOW --'C' FOR CMOP; 'M' FOR MAIL;'W' FOR WINDOW;'A' FOR ALL; Display CMOP or Mail or Window or ALL Rxs 
"RTN","BPSSCRCV",20,0)
 ;1.09 REALTIME/BACKBILL --'R' FOR REALTIME; 'B' FOR BACKBILLS; 'P' FOR PRO Option; 'S' FOR ECME User Screen Resubmits;
"RTN","BPSSCRCV",21,0)
 ;      'A' FOR ALL; Display RealTime, Backbills, PRO Option, Resubmission, or ALL
"RTN","BPSSCRCV",22,0)
 ;1.1 REJECT CODE/ALL --'R' FOR REJECT CODE; 'A' FOR ALL; Display Specific Reject Code or ALL Reject
"RTN","BPSSCRCV",23,0)
 ;Codes 0 means ALL Reject Codes otherwise - Reject Code value 
"RTN","BPSSCRCV",24,0)
 ;1.11 SPECIFIC/ALL INSURANCES --'I' FOR SPECIFIC INSURANCE(S);'A' FOR ALL; Display Specific Insurance Company(s) or All null - ALL otherwise - pointer to INSURANCE COMPANY file #36 
"RTN","BPSSCRCV",25,0)
 ;1.12 SORT LIST --'T' FOR TRANSACTION DATE;'D' FOR DIVISION; 'I' FOR INSURANCE; 'C' FOR REJECT CODE; 
"RTN","BPSSCRCV",26,0)
 ;'P' FOR PATIENT NAME -- 'N' FOR DRUG NAME; 'B' FOR BILL TYPE (BB/P2/RT/RS); 'L' FOR FILL LOCATION;
"RTN","BPSSCRCV",27,0)
 ;'R' FOR RELEASED/NON-RELEASED -- 'A' FOR ACTIVE/DISCONTINUED; the field used to sort claims in the list 
"RTN","BPSSCRCV",28,0)
 ;1.13 ALL ECME PHARMACY DIVISIONS --'D' FOR DIVISION; 'A' FOR ALL; 
"RTN","BPSSCRCV",29,0)
 ;1.14 SELECTED INSURANCE -- Single, or multiple, insurance(s) to select claims for the User Screen, to store INSURANCE COMPANY pointer (#36) 
"RTN","BPSSCRCV",30,0)
 ;1.15 SELECTED REJECTED CODE --POINTER TO BPS NCPDP REJECT CODES FILE (#9002313.93) Reject code selected by the user to filter claims.
"RTN","BPSSCRCV",31,0)
 ;1.16 SELECTED USER -- POINTER TO NEW PERSON FILE (#200) Selected user for the user screen 
"RTN","BPSSCRCV",32,0)
 ;1.17 SELECTED PATIENT -- POINTER TO PATIENT FILE (#2) Selected patient for the User Screen 
"RTN","BPSSCRCV",33,0)
 ;1.18 SELECTED RX -- POINTER TO PRESCRIPTION FILE (#52) Selected RX 
"RTN","BPSSCRCV",34,0)
 ;1.19 NON-BILLABLE TRI/CVA ENTRIES OPEN/CLOSED/ALL -- 'O' Open; 'C' Closed; 'A' All
"RTN","BPSSCRCV",35,0)
 ;2    ECME PHARMACY DIVISION -- the list of POINTERs TO BPS PHARMACIES FILE (#9002313.56) separated by ";"
"RTN","BPSSCRCV",36,0)
 ;should start and end with ";", example: ";4;5;"
"RTN","BPSSCRCV",37,0)
 ;2.01 ELIGIBILITY TYPE --'V' FOR VETERAN;'T' FOR TRICARE;'C' FOR CHAMPVA;'A' FOR ALL; Display claims for specific Eligibility Type or ALL (BNT BPS*1.0*7)
"RTN","BPSSCRCV",38,0)
 ;2.02 OPEN/CLOSED/ALL --'O' OPEN CLAIMS;'C' CLOSED CLAIMS;'A' FOR ALL; Display Open, Closed, or ALL claims (BNT BPS*1.0*7)
"RTN","BPSSCRCV",39,0)
 ;2.03 SUBMISSION TYPE --'B' BILLING REQUESTS;'R' REVERSALS;'A' FOR ALL; Display specific submission type claims or ALL (BNT BPS*1.0*7)
"RTN","BPSSCRCV",40,0)
 ;2.04 INSURANCES -- List of POINTERs to the INSURANCE COMPANY FILE (#36) separated by ";"
"RTN","BPSSCRCV",41,0)
 ;should start and end with ";", example: ";4;5;"
"RTN","BPSSCRCV",42,0)
 ;NOTE: use D ^XPAREDIT to add/edit values
"RTN","BPSSCRCV",43,0)
 ;
"RTN","BPSSCRCV",44,0)
 ;*****
"RTN","BPSSCRCV",45,0)
 ;
"RTN","BPSSCRCV",46,0)
CV ;
"RTN","BPSSCRCV",47,0)
 D FULL^VALM1
"RTN","BPSSCRCV",48,0)
 W @IOF
"RTN","BPSSCRCV",49,0)
 K BPARR
"RTN","BPSSCRCV",50,0)
 I +$G(DUZ)=0 D ERRMSG^BPSSCRCV("Unknown User") Q
"RTN","BPSSCRCV",51,0)
 N BPDUZ7
"RTN","BPSSCRCV",52,0)
 S BPDUZ7=+DUZ
"RTN","BPSSCRCV",53,0)
 ;always get current profile from the file
"RTN","BPSSCRCV",54,0)
 D READPROF^BPSSCRSL(.BPARR,BPDUZ7)
"RTN","BPSSCRCV",55,0)
 D SAVEVIEW^BPSSCR01(.BPARR)
"RTN","BPSSCRCV",56,0)
 ;edit current profile
"RTN","BPSSCRCV",57,0)
 D EDITPROF(.BPARR,.BPDUZ7)
"RTN","BPSSCRCV",58,0)
 ;ask user if need to save everything in USR PROFILE file 
"RTN","BPSSCRCV",59,0)
 ;(except SORT LIST field)
"RTN","BPSSCRCV",60,0)
 N BPSRT S BPSRT=BPARR(1.12)
"RTN","BPSSCRCV",61,0)
 K BPARR(1.12)
"RTN","BPSSCRCV",62,0)
 D ENDEDIT^BPSSCRSL(.BPARR,+BPDUZ7)
"RTN","BPSSCRCV",63,0)
 S BPARR(1.12)=BPSRT
"RTN","BPSSCRCV",64,0)
 D SAVEVIEW^BPSSCR01(.BPARR)
"RTN","BPSSCRCV",65,0)
 S VALMBG=1
"RTN","BPSSCRCV",66,0)
 D REDRAW^BPSSCRUD("Updating screen...")
"RTN","BPSSCRCV",67,0)
 Q
"RTN","BPSSCRCV",68,0)
 ;edit user profile for CHANGE VIEW
"RTN","BPSSCRCV",69,0)
EDITPROF(BPARR,BPDUZ7) ;
"RTN","BPSSCRCV",70,0)
 I +$G(DUZ)=0 D ERRMSG("Unknown User") Q
"RTN","BPSSCRCV",71,0)
 N BP1,BPTF,BPQ,BPINP
"RTN","BPSSCRCV",72,0)
 N BPRET
"RTN","BPSSCRCV",73,0)
 N DIR,DR,DIE,DA
"RTN","BPSSCRCV",74,0)
 ;get ONE/ALL USERS?
"RTN","BPSSCRCV",75,0)
 ;EDITFLD(FILENO,FLDNO,RECIEN,CODESET,PRMTMSG,DFLTCODE)  ;
"RTN","BPSSCRCV",76,0)
 S BPRET=$$DS^BPSSCRDS(.BPARR,+BPDUZ7) ;get divisions
"RTN","BPSSCRCV",77,0)
 Q:BPRET=-2  ;quit due to timeout or ^
"RTN","BPSSCRCV",78,0)
 Q:$$EDITFLD(2.01,+BPDUZ7,"S^V:VETERAN;T:TRICARE;C:CHAMPVA;A:ALL","Select Certain Eligibility Type or (A)ll","V",.BPARR)=-1
"RTN","BPSSCRCV",79,0)
 S BPQ=0 F  D  Q:BPQ'=0
"RTN","BPSSCRCV",80,0)
 . S BPINP=$$EDITFLD(1.01,+BPDUZ7,"S^U:ONE USER;A:ALL","Display One ECME (U)ser or (A)LL","ALL",.BPARR)
"RTN","BPSSCRCV",81,0)
 . S:BPINP=-1 BPQ=-1 S:$P(BPINP,U,2)="A" BPQ=1 I BPQ'=0 Q
"RTN","BPSSCRCV",82,0)
 . S BPINP=$$EDITFLD(1.16,+BPDUZ7,"P^VA(200,","Select User","",.BPARR)
"RTN","BPSSCRCV",83,0)
 . S:BPINP=-1 BPQ=-1 S:$P(BPINP,U,2)'="" BPQ=1 I BPQ'=0 Q
"RTN","BPSSCRCV",84,0)
 Q:BPQ=-1  ;quit due to timeout or ^
"RTN","BPSSCRCV",85,0)
 S BPQ=0 F  D  Q:BPQ'=0
"RTN","BPSSCRCV",86,0)
 . S BPINP=$$EDITFLD(1.02,+BPDUZ7,"S^P:ONE PATIENT;A:ALL","Display One (P)atient or (A)LL","ALL",.BPARR)
"RTN","BPSSCRCV",87,0)
 . S:BPINP=-1 BPQ=-1 S:$P(BPINP,U,2)="A" BPQ=1 I BPQ'=0 Q
"RTN","BPSSCRCV",88,0)
 . S BPINP=$$EDITFLD(1.17,+BPDUZ7,"P^DPT(","Select Patient","",.BPARR)
"RTN","BPSSCRCV",89,0)
 . S:BPINP=-1 BPQ=-1 S:$P(BPINP,U,2)'="" BPQ=1 I BPQ'=0 Q
"RTN","BPSSCRCV",90,0)
 Q:BPQ=-1  ;quit due to timeout or ^
"RTN","BPSSCRCV",91,0)
 S BPQ=0 F  D  Q:BPQ'=0
"RTN","BPSSCRCV",92,0)
 . S BPINP=$$EDITFLD(1.03,+BPDUZ7,"S^R:ONE RX;A:ALL","Display One (R)x or (A)LL","ALL",.BPARR)
"RTN","BPSSCRCV",93,0)
 . S:BPINP=-1 BPQ=-1 S:$P(BPINP,U,2)="A" BPQ=1 I BPQ'=0 Q
"RTN","BPSSCRCV",94,0)
 . S BPINP=$$EDITRX^BPSSCRPR(1.18,+BPDUZ7,"Select RX","",.BPARR)
"RTN","BPSSCRCV",95,0)
 . S:BPINP=-1 BPQ=-1 S:$P(BPINP,U,2)'="" BPQ=1 I BPQ'=0 Q
"RTN","BPSSCRCV",96,0)
 Q:BPQ=-1  ;quit due to timeout or ^
"RTN","BPSSCRCV",97,0)
 S BPINP=$$EDITFLD(1.04,+BPDUZ7,"S^D:DAYS;H:HOURS","Activity Timeframe (H)ours or (D)ays","DAYS",.BPARR)
"RTN","BPSSCRCV",98,0)
 I BPINP=-1 Q  ;quit due to timeout or ^
"RTN","BPSSCRCV",99,0)
 S BPTF=$P(BPINP,U,2)
"RTN","BPSSCRCV",100,0)
 Q:$$EDITFLD(1.05,+BPDUZ7,"N^1:999:0","Activity Timeframe Value",$S(BPTF="H":24,1:7),.BPARR)=-1
"RTN","BPSSCRCV",101,0)
 Q:$$EDITFLD(2.02,+BPDUZ7,"S^O:OPEN CLAIMS;C:CLOSED CLAIMS;A:ALL","Select Open/Closed or All Claims","O",.BPARR)=-1
"RTN","BPSSCRCV",102,0)
 Q:$$EDITFLD(1.19,+BPDUZ7,"S^O:Open Non-Billable Entries;C:Closed Non-Billable Entries;A:ALL","Display (O)pen or (C)losed or (A)ll Non-Billable Entries","A",.BPARR)=-1
"RTN","BPSSCRCV",103,0)
 Q:$$EDITFLD(2.03,+BPDUZ7,"S^B:BILLING REQUESTS;R:REVERSALS;A:ALL","Select Submission Type","A",.BPARR)=-1
"RTN","BPSSCRCV",104,0)
 Q:$$EDITFLD(1.06,+BPDUZ7,"S^R:REJECTS;P:PAYABLES;U:UNSTRANDED;A:ALL","Display (R)ejects or (P)ayables or (U)nstranded or (A)LL","REJECTS",.BPARR)=-1
"RTN","BPSSCRCV",105,0)
 Q:$$EDITFLD(1.07,+BPDUZ7,"S^R:RELEASED;N:NON-RELEASED;A:ALL","Display (R)eleased Rxs or (N)on-Released Rxs or (A)LL","RELEASED",.BPARR)=-1
"RTN","BPSSCRCV",106,0)
 Q:$$EDITFLD(1.08,+BPDUZ7,"S^C:CMOP;M:MAIL;W:WINDOW;A:ALL","Display (C)MOP or (M)ail or (W)indow or (A)LL","ALL",.BPARR)=-1
"RTN","BPSSCRCV",107,0)
 Q:$$EDITFLD(1.09,+BPDUZ7,"S^R:REALTIME;B:BACKBILLS;P:PRO OPTION;S:RESUBMISSION;A:ALL","Display (R)ealTime, (B)ackbills, (P)RO Option, Re(S)ubmission or (A)LL","ALL",.BPARR)=-1
"RTN","BPSSCRCV",108,0)
 S BPQ=0 F  D  Q:BPQ'=0
"RTN","BPSSCRCV",109,0)
 . S BPINP=$$EDITFLD(1.1,+BPDUZ7,"S^R:REJECT CODE;A:ALL","Display Specific (R)eject Code or (A)LL","ALL",.BPARR)
"RTN","BPSSCRCV",110,0)
 . S:BPINP=-1 BPQ=-1 S:$P(BPINP,U,2)="A" BPQ=1 I BPQ'=0 Q
"RTN","BPSSCRCV",111,0)
 . S BPINP=$$EDITFLD(1.15,+BPDUZ7,"P^BPSF(9002313.93,","Select Reject Code","",.BPARR)
"RTN","BPSSCRCV",112,0)
 . S:BPINP=-1 BPQ=-1 S:$P(BPINP,U,2)'="" BPQ=1 I BPQ'=0 Q
"RTN","BPSSCRCV",113,0)
 Q:BPQ=-1  ;quit due to timeout or ^
"RTN","BPSSCRCV",114,0)
 Q:$$INSURSEL^BPSSCRCU(.BPARR,+BPDUZ7)=-1
"RTN","BPSSCRCV",115,0)
 Q
"RTN","BPSSCRCV",116,0)
 ;
"RTN","BPSSCRCV",117,0)
ERRMSG(BPMSG) ;
"RTN","BPSSCRCV",118,0)
 W !,"***",BPMSG,"***",!
"RTN","BPSSCRCV",119,0)
 D PAUSE^VALM1
"RTN","BPSSCRCV",120,0)
 Q
"RTN","BPSSCRCV",121,0)
 ;/**
"RTN","BPSSCRCV",122,0)
 ;FLDNO - PARAMETERS INSTANCE
"RTN","BPSSCRCV",123,0)
 ;RECIEN - User DUZ
"RTN","BPSSCRCV",124,0)
 ;DIR0 - like DIR(0) node for ^DIR - i.e. field type, etc
"RTN","BPSSCRCV",125,0)
 ;PRMTMSG - user prompt
"RTN","BPSSCRCV",126,0)
 ;DFLTVAL - pass the default value for the case if there is no value in database
"RTN","BPSSCRCV",127,0)
 ;BPARRAY - array to store and change values in profile
"RTN","BPSSCRCV",128,0)
 ;returns:
"RTN","BPSSCRCV",129,0)
 ;as return value:
"RTN","BPSSCRCV",130,0)
 ; "1^value" - if selected
"RTN","BPSSCRCV",131,0)
 ; "-1" if timeout or uparrow
"RTN","BPSSCRCV",132,0)
 ;via BPARRAY
"RTN","BPSSCRCV",133,0)
 ; BPARRAY(filedno)=value
"RTN","BPSSCRCV",134,0)
EDITFLD(FLDNO,RECIEN,DIR0,PRMTMSG,DFLTVAL,BPARRAY) ;*/
"RTN","BPSSCRCV",135,0)
 N DIR,RETV,RETARR
"RTN","BPSSCRCV",136,0)
 N RECIENS,FDA,LCK,ERRARR
"RTN","BPSSCRCV",137,0)
 S RETV=$$GETPARAM^BPSSCRSL(FLDNO,RECIEN)
"RTN","BPSSCRCV",138,0)
 I FLDNO=1.17 S RETV=$P($G(^DPT(+RETV,0)),U)
"RTN","BPSSCRCV",139,0)
 ;Use the External Code from File #9002313.93 as the default value to display to user.
"RTN","BPSSCRCV",140,0)
 I FLDNO=1.15 S RETV=$P($G(^BPSF(9002313.93,+RETV,0)),U)
"RTN","BPSSCRCV",141,0)
 ;if data then use it, otherwise use data from parameter
"RTN","BPSSCRCV",142,0)
 I $L($G(RETV))>0 S DFLTVAL=RETV E  S DFLTVAL=$G(DFLTVAL)
"RTN","BPSSCRCV",143,0)
 ;prompt the user
"RTN","BPSSCRCV",144,0)
 S RETV=$$PROMPT(DIR0,PRMTMSG,DFLTVAL)
"RTN","BPSSCRCV",145,0)
 Q:RETV<0 -1
"RTN","BPSSCRCV",146,0)
 ;save it in the database
"RTN","BPSSCRCV",147,0)
 S BPARRAY(FLDNO)=RETV
"RTN","BPSSCRCV",148,0)
 Q "1^"_RETV
"RTN","BPSSCRCV",149,0)
 ;
"RTN","BPSSCRCV",150,0)
 ;
"RTN","BPSSCRCV",151,0)
FILEIT(FILENO,FLDNO,RECIEN,NEWVAL) ;
"RTN","BPSSCRCV",152,0)
 N RECIENS
"RTN","BPSSCRCV",153,0)
 S RECIENS=RECIEN_","
"RTN","BPSSCRCV",154,0)
 S FDA(FILENO,RECIENS,FLDNO)=NEWVAL
"RTN","BPSSCRCV",155,0)
 L +^BPS(FILENO,RECIEN,1):10 S LCK=$T I 'LCK Q "0^"_NEWVAL_"^LOCKED"  ;quit
"RTN","BPSSCRCV",156,0)
 D FILE^DIE("","FDA","ERRARR")
"RTN","BPSSCRCV",157,0)
 I LCK L -^BPS(FILENO,RECIEN,1)
"RTN","BPSSCRCV",158,0)
 I $D(ERRARR) Q "0^"_NEWVAL_"^"_ERRARR("DIERR",1,"TEXT",1)
"RTN","BPSSCRCV",159,0)
 Q "1^"_NEWVAL
"RTN","BPSSCRCV",160,0)
 ;
"RTN","BPSSCRCV",161,0)
 ;prompts for selection
"RTN","BPSSCRCV",162,0)
 ;returns selection
"RTN","BPSSCRCV",163,0)
 ;OR -1 when timeout and uparrow
"RTN","BPSSCRCV",164,0)
PROMPT(ZERONODE,PRMTMSG,DFLTVAL) ;
"RTN","BPSSCRCV",165,0)
 N Y,DUOUT,DTOUT,BPQUIT,DIROUT
"RTN","BPSSCRCV",166,0)
 S BPQUIT=0
"RTN","BPSSCRCV",167,0)
 I $E(ZERONODE,1,1)="P" D
"RTN","BPSSCRCV",168,0)
 . N DIC
"RTN","BPSSCRCV",169,0)
 . S DIC="^"_$P(ZERONODE,U,2)
"RTN","BPSSCRCV",170,0)
 . S DIC(0)="AEMNQ"
"RTN","BPSSCRCV",171,0)
 . S:$L($G(DFLTVAL))>0 DIC("B")=DFLTVAL
"RTN","BPSSCRCV",172,0)
 . S DIC("A")=PRMTMSG_": "
"RTN","BPSSCRCV",173,0)
 . D ^DIC
"RTN","BPSSCRCV",174,0)
 . I (Y=-1)!$D(DUOUT)!$D(DTOUT) S BPQUIT=1
"RTN","BPSSCRCV",175,0)
 E  D
"RTN","BPSSCRCV",176,0)
 . N DIR
"RTN","BPSSCRCV",177,0)
 . S DIR(0)=ZERONODE
"RTN","BPSSCRCV",178,0)
 . S DIR("A")=PRMTMSG
"RTN","BPSSCRCV",179,0)
 . S:$L($G(DFLTVAL))>0 DIR("B")=DFLTVAL
"RTN","BPSSCRCV",180,0)
 . ;
"RTN","BPSSCRCV",181,0)
 . ; display some extra text for FLDNO=1.19   (BPS*1*20)
"RTN","BPSSCRCV",182,0)
 . I $G(FLDNO)=1.19 D
"RTN","BPSSCRCV",183,0)
 .. S DIR("A",1)="    Please note this question only applies to"
"RTN","BPSSCRCV",184,0)
 .. S DIR("A",2)="    TRICARE or CHAMPVA Non-Billable Entries."
"RTN","BPSSCRCV",185,0)
 .. S DIR("A",3)=" "
"RTN","BPSSCRCV",186,0)
 .. Q
"RTN","BPSSCRCV",187,0)
 . ;
"RTN","BPSSCRCV",188,0)
 . D ^DIR
"RTN","BPSSCRCV",189,0)
 . I (Y=-1)!$D(DIROUT)!$D(DUOUT)!$D(DTOUT) S BPQUIT=1
"RTN","BPSSCRCV",190,0)
 I BPQUIT=1 Q -1
"RTN","BPSSCRCV",191,0)
 Q $P(Y,U)
"RTN","BPSSCRCV",192,0)
 ;
"RTN","BPSSCRCV",193,0)
GETFLD(FILENO,FLDNO,RECIEN) ;
"RTN","BPSSCRCV",194,0)
 N RETV,RETARR
"RTN","BPSSCRCV",195,0)
 N RECIENS
"RTN","BPSSCRCV",196,0)
 S RECIENS=RECIEN_","
"RTN","BPSSCRCV",197,0)
 ; first try to get the value from file
"RTN","BPSSCRCV",198,0)
 D GETS^DIQ(FILENO,RECIENS,FLDNO,"E","RETARR")
"RTN","BPSSCRCV",199,0)
 S RETV=$G(RETARR(FILENO,RECIENS,FLDNO,"E"))
"RTN","BPSSCRCV",200,0)
 Q $G(RETV)
"RTN","BPSSCRCV",201,0)
 ;
"RTN","BPSSCRCV",202,0)
 ;save all profile array to file
"RTN","BPSSCRCV",203,0)
 ;BPARRAY - arrays with pointers to 9002313.56
"RTN","BPSSCRCV",204,0)
 ;BPDUZ7 - DUZ
"RTN","BPSSCRCV",205,0)
FILEALL(BPARRAY,BPDUZ7) ;
"RTN","BPSSCRCV",206,0)
 ;BPS*14 - RRA changed API, because previously it was re-writing Division
"RTN","BPSSCRCV",207,0)
 ;and Insurance parameter regardless if it was modified and had a value
"RTN","BPSSCRCV",208,0)
 ;ticket 337299
"RTN","BPSSCRCV",209,0)
 N BPFLD,BP2
"RTN","BPSSCRCV",210,0)
 S BPFLD=0
"RTN","BPSSCRCV",211,0)
 F  S BPFLD=$O(BPARRAY(BPFLD)) Q:$G(BPFLD)=""  D
"RTN","BPSSCRCV",212,0)
 . I BPFLD="DIVS" I $$SAVEPAR^BPSSCRSL(2,BPDUZ7,$G(BPARRAY("DIVS")))
"RTN","BPSSCRCV",213,0)
 . I BPFLD="INS" I $$SAVEPAR^BPSSCRSL(2.04,BPDUZ7,$G(BPARRAY("INS")))
"RTN","BPSSCRCV",214,0)
 . Q:+BPFLD=0  I $$SAVEPAR^BPSSCRSL(BPFLD,+BPDUZ7,$G(BPARRAY(BPFLD)))
"RTN","BPSSCRCV",215,0)
 ;I $$SAVEPAR^BPSSCRSL(2,BPDUZ7,$G(BPARRAY("DIVS")))
"RTN","BPSSCRCV",216,0)
 ;I $$SAVEPAR^BPSSCRSL(2.04,BPDUZ7,$G(BPARRAY("INS")))
"RTN","BPSSCRCV",217,0)
 Q
"RTN","BPSSCRLG")
0^26^B253455016
"RTN","BPSSCRLG",1,0)
BPSSCRLG ;BHAM ISC/SS - ECME LOGINFO ;05-APR-05
"RTN","BPSSCRLG",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,10,11,15,18,20**;JUN 2004;Build 27
"RTN","BPSSCRLG",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRLG",4,0)
 ;
"RTN","BPSSCRLG",5,0)
 Q
"RTN","BPSSCRLG",6,0)
 ;
"RTN","BPSSCRLG",7,0)
EN ; -- main entry point for BPS LSTMN LOG
"RTN","BPSSCRLG",8,0)
 D EN^VALM("BPS LSTMN LOG")
"RTN","BPSSCRLG",9,0)
 Q 
"RTN","BPSSCRLG",10,0)
 ;
"RTN","BPSSCRLG",11,0)
HDR ; -- header code
"RTN","BPSSCRLG",12,0)
 S VALMHDR(1)="Claim Log information"
"RTN","BPSSCRLG",13,0)
 S VALMHDR(2)=""
"RTN","BPSSCRLG",14,0)
 Q
"RTN","BPSSCRLG",15,0)
 ;
"RTN","BPSSCRLG",16,0)
INIT ; -- init variables and list array
"RTN","BPSSCRLG",17,0)
 N BPSELCLM,LINE
"RTN","BPSSCRLG",18,0)
 S BPSELCLM=$G(@VALMAR@("SELLN"))
"RTN","BPSSCRLG",19,0)
 ;  piece 2: patient ien #2
"RTN","BPSSCRLG",20,0)
 ;  piece 3: insurance ien #36
"RTN","BPSSCRLG",21,0)
 ;  piece 4: ptr to #9002313.59
"RTN","BPSSCRLG",22,0)
 S LINE=1
"RTN","BPSSCRLG",23,0)
 S VALMCNT=$$PREPINFO(.LINE,$P(BPSELCLM,U,2),$P(BPSELCLM,U,3),$P(BPSELCLM,U,4))
"RTN","BPSSCRLG",24,0)
 S:VALMCNT>1 VALMCNT=VALMCNT-1
"RTN","BPSSCRLG",25,0)
 Q
"RTN","BPSSCRLG",26,0)
 ;
"RTN","BPSSCRLG",27,0)
HELP ; -- help code
"RTN","BPSSCRLG",28,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","BPSSCRLG",29,0)
 K X
"RTN","BPSSCRLG",30,0)
 Q
"RTN","BPSSCRLG",31,0)
 ;
"RTN","BPSSCRLG",32,0)
EXIT ; -- exit code
"RTN","BPSSCRLG",33,0)
 Q
"RTN","BPSSCRLG",34,0)
 ;
"RTN","BPSSCRLG",35,0)
EXPND ; -- expand code
"RTN","BPSSCRLG",36,0)
 Q
"RTN","BPSSCRLG",37,0)
 ;
"RTN","BPSSCRLG",38,0)
 ;
"RTN","BPSSCRLG",39,0)
LOG ;entry point for LOG menu option
"RTN","BPSSCRLG",40,0)
 N BPRET,BPSEL,BP59,BPVLM
"RTN","BPSSCRLG",41,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSSCRLG",42,0)
 D FULL^VALM1
"RTN","BPSSCRLG",43,0)
 W !,"Enter the line number for which you wish to print claim logs."
"RTN","BPSSCRLG",44,0)
 S BPSEL=$$ASKLINE^BPSSCRU4("Select item","C","Please select SINGLE Rx Line.")
"RTN","BPSSCRLG",45,0)
 I BPSEL<1 S VALMBCK="R" Q
"RTN","BPSSCRLG",46,0)
 ;
"RTN","BPSSCRLG",47,0)
 S BP59=$P(BPSEL,U,4)
"RTN","BPSSCRLG",48,0)
 S BPVLM=+$P(BPSEL,U,5)    ; 1st line for indexes in the LM display array
"RTN","BPSSCRLG",49,0)
 ;
"RTN","BPSSCRLG",50,0)
 ; check for non-billable entry for claim LOG display
"RTN","BPSSCRLG",51,0)
 I $$NB^BPSSCR03(BP59) D  S VALMBCK="R" Q
"RTN","BPSSCRLG",52,0)
 . W !!,$G(@VALMAR@(BPVLM,0))       ; LM display array
"RTN","BPSSCRLG",53,0)
 . W !?6,$$EREJTXT^BPSSCR03(BP59)   ; eT/eC non-billable reason line
"RTN","BPSSCRLG",54,0)
 . W !,"Entry is NON BILLABLE.  There is no Claim Log to display."
"RTN","BPSSCRLG",55,0)
 . D PAUSE^VALM1
"RTN","BPSSCRLG",56,0)
 . Q
"RTN","BPSSCRLG",57,0)
 ;
"RTN","BPSSCRLG",58,0)
 D SAVESEL(BPSEL,VALMAR)
"RTN","BPSSCRLG",59,0)
 D EN
"RTN","BPSSCRLG",60,0)
 S VALMBCK="R"
"RTN","BPSSCRLG",61,0)
 Q
"RTN","BPSSCRLG",62,0)
 ;
"RTN","BPSSCRLG",63,0)
 ;save for ListManager
"RTN","BPSSCRLG",64,0)
 ;BPSEL - selected line
"RTN","BPSSCRLG",65,0)
 ;BPVALMR - parent VALMAR 
"RTN","BPSSCRLG",66,0)
SAVESEL(BPSEL,BPVALMR) ;
"RTN","BPSSCRLG",67,0)
 D CLEANIT
"RTN","BPSSCRLG",68,0)
 S ^TMP("BPSLOG",$J,"VALM","SELLN")=BPSEL
"RTN","BPSSCRLG",69,0)
 S ^TMP("BPSLOG",$J,"VALM","PARENT")=BPVALMR
"RTN","BPSSCRLG",70,0)
 M ^TMP("BPSLOG",$J,"VALM","VIEWPARAMS")=@BPVALMR@("VIEWPARAMS")
"RTN","BPSSCRLG",71,0)
 Q
"RTN","BPSSCRLG",72,0)
 ;
"RTN","BPSSCRLG",73,0)
CLEANIT ;
"RTN","BPSSCRLG",74,0)
 K ^TMP("BPSLOG",$J,"VALM")
"RTN","BPSSCRLG",75,0)
 Q
"RTN","BPSSCRLG",76,0)
 ;input:
"RTN","BPSSCRLG",77,0)
 ; BPDFN: patient ien #2
"RTN","BPSSCRLG",78,0)
 ; BP36: insurance ien #36
"RTN","BPSSCRLG",79,0)
 ; BP59: ptr to #9002313.59
"RTN","BPSSCRLG",80,0)
 ; returns # of lines
"RTN","BPSSCRLG",81,0)
PREPINFO(BPLN,BPDFN,BP36,BP59) ;
"RTN","BPSSCRLG",82,0)
 N BPSECME
"RTN","BPSSCRLG",83,0)
 I '$G(BP59) Q 0
"RTN","BPSSCRLG",84,0)
 I '$G(BP36) Q 0
"RTN","BPSSCRLG",85,0)
 I '$G(BPDFN) Q 0
"RTN","BPSSCRLG",86,0)
 N BPSCRLNS S BPSCRLNS=17 ;(see "BPS LSTMN LOG" LM template: Bottom=21, Top = 4, 21-4=17)
"RTN","BPSSCRLG",87,0)
 N BPX,BPRXIEN,BPRXN,BPREF,BP1,BPLSTCLM,BPLSTRSP,BPDAT59,BPUSR,BPSTRT,BPHIST,BPQ
"RTN","BPSSCRLG",88,0)
 N BPDT,BPLN0,BPCNT,DFN,VADM
"RTN","BPSSCRLG",89,0)
 S DFN=BPDFN D DEM^VADPT
"RTN","BPSSCRLG",90,0)
 S BP1=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSSCRLG",91,0)
 S BPRXIEN=$P(BP1,U,1)
"RTN","BPSSCRLG",92,0)
 S BPRXN=$$RXNUM^BPSSCRU2(+BPRXIEN)
"RTN","BPSSCRLG",93,0)
 S BPREF=$P(BP1,U,2)
"RTN","BPSSCRLG",94,0)
 S BPDAT59(0)=$G(^BPST(BP59,0))
"RTN","BPSSCRLG",95,0)
 ;create history
"RTN","BPSSCRLG",96,0)
 D MKHIST^BPSSCRU5(BP59,.BPHIST)
"RTN","BPSSCRLG",97,0)
 ;
"RTN","BPSSCRLG",98,0)
 S BPLN0=BPLN
"RTN","BPSSCRLG",99,0)
 D SETLINE(.BPLN,"Pharmacy ECME Log")
"RTN","BPSSCRLG",100,0)
 D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",101,0)
 S BPX=$$RJ^BPSSCR02("Rx #: ",20)_BPRXN_"/"_BPREF
"RTN","BPSSCRLG",102,0)
 S BPSECME=$$ECMENUM^BPSSCRU2(BP59)
"RTN","BPSSCRLG",103,0)
 S BPX=BPX_$$RJ^BPSSCR02("ECME #: ",20)_BPSECME
"RTN","BPSSCRLG",104,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",105,0)
 S BPX=$$RJ^BPSSCR02("Drug: ",20)_$$DRGNAM^BPSSCRU2($$GETDRG59^BPSSCRU2(BP59))
"RTN","BPSSCRLG",106,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",107,0)
 S BPX=$$RJ^BPSSCR02("Patient: ",20)
"RTN","BPSSCRLG",108,0)
 S BPX=BPX_$$LJ^BPSSCR02($$PATNAME^BPSSCRU2(BPDFN)_" "_$$SSN4^BPSSCRU2(BPDFN),25)
"RTN","BPSSCRLG",109,0)
 S BPX=BPX_$$LJ^BPSSCR02("Sex: "_$P($G(VADM(5)),"^",1),10)
"RTN","BPSSCRLG",110,0)
 S BPX=BPX_$$LJ^BPSSCR02("DOB: "_$P($G(VADM(3)),"^",2)_"("_$G(VADM(4))_")",20)
"RTN","BPSSCRLG",111,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",112,0)
 S BPX=$$RJ^BPSSCR02("Transaction Number: ",20)
"RTN","BPSSCRLG",113,0)
 S BPX=BPX_$P($G(^BPST(BP59,0)),U,1)
"RTN","BPSSCRLG",114,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",115,0)
 S BPX=$$RJ^BPSSCR02("Last Submitted: ",20)
"RTN","BPSSCRLG",116,0)
 S BPSTRT=$P(BPDAT59(0),U,11) ;@# need to check with analyst if this is a START DATE
"RTN","BPSSCRLG",117,0)
 I BPSTRT]"" S BPX=BPX_$$DATETIME^BPSSCRU5(BPSTRT)
"RTN","BPSSCRLG",118,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",119,0)
 S BPX=$$RJ^BPSSCR02("Last Submitted By: ",20)
"RTN","BPSSCRLG",120,0)
 S BPUSR=$P(BPDAT59(0),U,10)
"RTN","BPSSCRLG",121,0)
 I BPUSR]"" S BPX=BPX_$$GETUSRNM^BPSSCRU1(BPUSR)
"RTN","BPSSCRLG",122,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",123,0)
 ;
"RTN","BPSSCRLG",124,0)
 ;latest claim
"RTN","BPSSCRLG",125,0)
 S BP1=+$O(BPHIST("C",99999999),-1)
"RTN","BPSSCRLG",126,0)
 I BP1=0 D SETLINE(.BPLN,""),SETLINE(.BPLN,"------ No electronic claims ------") Q BPLN
"RTN","BPSSCRLG",127,0)
 S BP1=+$O(BPHIST("C",BP1,0))
"RTN","BPSSCRLG",128,0)
 S BPX=$$RJ^BPSSCR02("Last VA Claim #: ",20)_$P($G(^BPSC(+BP1,0)),U,1)
"RTN","BPSSCRLG",129,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",130,0)
 F BPCNT=BPLN:1:BPLN0+BPSCRLNS D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",131,0)
 ;process history
"RTN","BPSSCRLG",132,0)
 N BPTYPE,BPIEN,BPIENRS
"RTN","BPSSCRLG",133,0)
 S BPDT=99999999
"RTN","BPSSCRLG",134,0)
 F  S BPDT=$O(BPHIST("C",BPDT),-1) Q:+BPDT=0  D
"RTN","BPSSCRLG",135,0)
 . S BPIEN=+$O(BPHIST("C",BPDT,0)) Q:BPIEN=""
"RTN","BPSSCRLG",136,0)
 . D DISPCLM(.BPLN,BP59,BPIEN,+BPHIST("C",BPDT,BPIEN),$P(BPHIST("C",BPDT,BPIEN),U,2),BPDT)
"RTN","BPSSCRLG",137,0)
 . S BPIENRS=0
"RTN","BPSSCRLG",138,0)
 . F  S BPIENRS=$O(BPHIST("C",BPDT,BPIEN,"R",BPIENRS)) Q:+BPIENRS=0  D
"RTN","BPSSCRLG",139,0)
 . . D DISPRSP(.BPLN,BP59,BPIENRS,+BPHIST("C",BPDT,BPIEN,"R",BPIENRS),$P(BPHIST("C",BPDT,BPIEN,"R",BPIENRS),U,2),BPDT)
"RTN","BPSSCRLG",140,0)
 . . D DISPPYR(.BPLN,BPIENRS)
"RTN","BPSSCRLG",141,0)
 Q BPLN
"RTN","BPSSCRLG",142,0)
 ;
"RTN","BPSSCRLG",143,0)
 ;increments BPLINE
"RTN","BPSSCRLG",144,0)
SETLINE(BPLINE,BPSTR) ;
"RTN","BPSSCRLG",145,0)
 D SET^VALM10(BPLINE,BPSTR)
"RTN","BPSSCRLG",146,0)
 S BPLINE=BPLINE+1
"RTN","BPSSCRLG",147,0)
 Q
"RTN","BPSSCRLG",148,0)
 ;display claim record
"RTN","BPSSCRLG",149,0)
DISPCLM(BPLN,BP59,BPIEN02,BP57,BPSTYPE,BPSDTALT) ;
"RTN","BPSSCRLG",150,0)
 N BPSCRLNS S BPSCRLNS=17 ;(see "BPS LSTMN LOG" LM template: Bottom=21, Top = 4, 21-4=17)
"RTN","BPSSCRLG",151,0)
 N BPX,BPLN0,BPCNT,BPSTR1,BPSTYP2,BPNFLDT
"RTN","BPSSCRLG",152,0)
 S BPLN0=BPLN
"RTN","BPSSCRLG",153,0)
 S BPSTYP2=$S(BPSTYPE="C":"CLAIM REQUEST",BPSTYPE="R":"REVERSAL",1:"")
"RTN","BPSSCRLG",154,0)
 S BPSTR1="Transmission Information ("_BPSTYP2_")(#"_BPIEN02_")"
"RTN","BPSSCRLG",155,0)
 D SETLINE(.BPLN,BPSTR1_$$LINE^BPSSCRU3(79-$L(BPSTR1),"-"))
"RTN","BPSSCRLG",156,0)
 D SETLINE(.BPLN,"Created on: "_$$CREATEDT(BPIEN02,BPSDTALT))
"RTN","BPSSCRLG",157,0)
 D SETLINE(.BPLN,"VA Claim ID: "_$P($G(^BPSC(+BPIEN02,0)),U,1))
"RTN","BPSSCRLG",158,0)
 D SETLINE(.BPLN,"Submitted By: "_$$SUBMTBY(BP57))
"RTN","BPSSCRLG",159,0)
 D SETLINE(.BPLN,"Transaction Type: "_$$TRTYPE^BPSSCRU5($$TRCODE(BPIEN02)))
"RTN","BPSSCRLG",160,0)
 D SETLINE(.BPLN,"Date of Service: "_$$DOSCLM(BPIEN02))
"RTN","BPSSCRLG",161,0)
 ;Display Next Available Fill Date - BPS*1.0*15
"RTN","BPSSCRLG",162,0)
 S BPNFLDT=$$NFLDT^BPSBUTL(BPRXIEN,BPREF,$$RXCOB57(BP57))
"RTN","BPSSCRLG",163,0)
 D:BPNFLDT SETLINE(.BPLN,"Next Available Fill Date: "_$$FMTE^XLFDT(BPNFLDT,"2ZM"))
"RTN","BPSSCRLG",164,0)
 D SETLINE(.BPLN,"NDC Code: "_$$LNDC^BPSSCRU5(BPIEN02))
"RTN","BPSSCRLG",165,0)
 D SETLINE(.BPLN,"NCPDP Qty: "_$$QTY(BPIEN02)_" "_$$UNITS(BPIEN02))
"RTN","BPSSCRLG",166,0)
 D SETLINE(.BPLN,"Days Supply: "_$$DAYSSUPL(BPIEN02))
"RTN","BPSSCRLG",167,0)
 D SETLINE(.BPLN,"Division: "_$$DIV(BP57))
"RTN","BPSSCRLG",168,0)
 D SETLINE(.BPLN,"NPI#: "_$$NPI(BPIEN02))
"RTN","BPSSCRLG",169,0)
 D SETLINE(.BPLN,"ECME Pharmacy: "_$$DIVNAME^BPSSCRDS($$LDIV(BP57)))
"RTN","BPSSCRLG",170,0)
 S BPX="Billed Qty: "_$$BILLQTY(BP57)_" "_$$BILLUNT(BP57)
"RTN","BPSSCRLG",171,0)
 S BPX=BPX_"     Unit Cost: "_$$UNTPRICE(BP57)
"RTN","BPSSCRLG",172,0)
 S BPX=BPX_"     Gross Amt Due: "_$$TOTPRICE(BPIEN02)
"RTN","BPSSCRLG",173,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",174,0)
 S BPX="Ingredient Cost: "_$$INGRCST(BPIEN02)
"RTN","BPSSCRLG",175,0)
 S BPX=BPX_"     Dispensing Fee: "_$$DISPFEE(BPIEN02)
"RTN","BPSSCRLG",176,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",177,0)
 S BPX="U&C Charge: "_$$UCCHRG(BPIEN02)
"RTN","BPSSCRLG",178,0)
 S BPX=BPX_"     Admin Fee: "_$$ADMNFEE(BPIEN02)
"RTN","BPSSCRLG",179,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",180,0)
 D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",181,0)
 D SETLINE(.BPLN,"Insurance Name: "_$$INSUR57(BP57))
"RTN","BPSSCRLG",182,0)
 D SETLINE(.BPLN,"Group Name: "_$$GRPNM(BPIEN02))
"RTN","BPSSCRLG",183,0)
 D SETLINE(.BPLN,"Rx Coordination of Benefits: "_$$RXCOB57(BP57))
"RTN","BPSSCRLG",184,0)
 D SETLINE(.BPLN,"Pharmacy Plan ID: "_$$PHPLANID(BP57))
"RTN","BPSSCRLG",185,0)
 D SETLINE(.BPLN,"BIN: "_$$BIN(BPIEN02))
"RTN","BPSSCRLG",186,0)
 D SETLINE(.BPLN,"PCN: "_$$PCN(BPIEN02))
"RTN","BPSSCRLG",187,0)
 D SETLINE(.BPLN,"NCPDP Version: "_$$GETVER(BPIEN02))
"RTN","BPSSCRLG",188,0)
 D SETLINE(.BPLN,"Group ID: "_$$GRPID(BPIEN02))
"RTN","BPSSCRLG",189,0)
 D SETLINE(.BPLN,"Cardholder ID: "_$$CRDHLDID(BPIEN02))
"RTN","BPSSCRLG",190,0)
 D SETLINE(.BPLN,"Patient Relationship Code: "_$$PATRELSH(BPIEN02))
"RTN","BPSSCRLG",191,0)
 D SETLINE(.BPLN,"Cardholder First Name: "_$$CRDHLDFN(BPIEN02,BP57))
"RTN","BPSSCRLG",192,0)
 D SETLINE(.BPLN,"Cardholder Last Name: "_$$CRDHLDLN(BPIEN02,BP57))
"RTN","BPSSCRLG",193,0)
 F BPCNT=BPLN:1:BPLN0+BPSCRLNS D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",194,0)
 S BPLN0=BPLN
"RTN","BPSSCRLG",195,0)
 D SETLINE(.BPLN,"Billing Request Payer Sheet: "_$$B1PYRIEN^BPSSCRU5(BP57))
"RTN","BPSSCRLG",196,0)
 D SETLINE(.BPLN,"Reversal Payer Sheet: "_$$B2PYRIEN^BPSSCRU5(BP57))
"RTN","BPSSCRLG",197,0)
 D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",198,0)
 Q
"RTN","BPSSCRLG",199,0)
 ;Submitted By User
"RTN","BPSSCRLG",200,0)
SUBMTBY(BP57) ;
"RTN","BPSSCRLG",201,0)
 N BPIEN,BPUSR
"RTN","BPSSCRLG",202,0)
 S BPIEN=$P($G(^BPSTL(BP57,0)),U,10)
"RTN","BPSSCRLG",203,0)
 S BPUSR=$$GETUSRNM^BPSSCRU1(BPIEN)
"RTN","BPSSCRLG",204,0)
 Q $S(BPUSR']"":"UNKNOWN",1:BPUSR)
"RTN","BPSSCRLG",205,0)
 ;Date of service
"RTN","BPSSCRLG",206,0)
DOSCLM(BPIEN02) ;
"RTN","BPSSCRLG",207,0)
 N BPDT
"RTN","BPSSCRLG",208,0)
 S BPDT=$P($G(^BPSC(BPIEN02,401)),U,1)\1
"RTN","BPSSCRLG",209,0)
 Q $E(BPDT,5,6)_"/"_$E(BPDT,7,8)_"/"_$E(BPDT,1,4)
"RTN","BPSSCRLG",210,0)
 ;Create date 
"RTN","BPSSCRLG",211,0)
CREATEDT(BPIEN02,BPSDTALT) ;
"RTN","BPSSCRLG",212,0)
 N BPSDT
"RTN","BPSSCRLG",213,0)
 S BPSDT=+$P($G(^BPSC(BPIEN02,0)),U,6)
"RTN","BPSSCRLG",214,0)
 Q $$DATETIME^BPSSCRU5($S(BPSDT>0:BPSDT,1:BPSDTALT))
"RTN","BPSSCRLG",215,0)
 ;Plan ID
"RTN","BPSSCRLG",216,0)
PLANID(BP57) ;
"RTN","BPSSCRLG",217,0)
 Q $P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),0)),U,1)
"RTN","BPSSCRLG",218,0)
CERTMOD(BP57) ;
"RTN","BPSSCRLG",219,0)
 Q $P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),0)),U,5)
"RTN","BPSSCRLG",220,0)
 ;Software Vendor/Cert ID
"RTN","BPSSCRLG",221,0)
CERTIEN(BP57) ;
"RTN","BPSSCRLG",222,0)
 Q $P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),0)),U,6)
"RTN","BPSSCRLG",223,0)
 ;Division
"RTN","BPSSCRLG",224,0)
DIV(BP57) ;
"RTN","BPSSCRLG",225,0)
 Q $$GET1^DIQ(9002313.57,BP57_",",11)
"RTN","BPSSCRLG",226,0)
 ;NPI
"RTN","BPSSCRLG",227,0)
NPI(BPIEN02) ;
"RTN","BPSSCRLG",228,0)
 Q $$GET1^DIQ(9002313.02,BPIEN02_",",201)
"RTN","BPSSCRLG",229,0)
 ;group ID
"RTN","BPSSCRLG",230,0)
GRPID(BPIEN02) ;
"RTN","BPSSCRLG",231,0)
 Q $E($P($G(^BPSC(BPIEN02,300)),U,1),3,99)
"RTN","BPSSCRLG",232,0)
 ;Group Name
"RTN","BPSSCRLG",233,0)
GRPNM(BPSIEN02) ;
"RTN","BPSSCRLG",234,0)
 N BPSGPN
"RTN","BPSSCRLG",235,0)
 S BPSGPN=$P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),3)),U,1)
"RTN","BPSSCRLG",236,0)
 Q BPSGPN
"RTN","BPSSCRLG",237,0)
 ;Cardholder ID
"RTN","BPSSCRLG",238,0)
CRDHLDID(BPIEN02) ;
"RTN","BPSSCRLG",239,0)
 Q $E($P($G(^BPSC(BPIEN02,300)),U,2),3,99)
"RTN","BPSSCRLG",240,0)
 ;Cardholder First name
"RTN","BPSSCRLG",241,0)
CRDHLDFN(BPIEN02,BP57) ;
"RTN","BPSSCRLG",242,0)
 N Y
"RTN","BPSSCRLG",243,0)
 S Y=$E($P($G(^BPSC(BPIEN02,300)),U,12),3,99)
"RTN","BPSSCRLG",244,0)
 I $L(Y)=0 S Y=$P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),1)),U,6)
"RTN","BPSSCRLG",245,0)
 Q Y
"RTN","BPSSCRLG",246,0)
 ;Cardholder Last Name
"RTN","BPSSCRLG",247,0)
CRDHLDLN(BPIEN02,BP57) ;
"RTN","BPSSCRLG",248,0)
 N Y
"RTN","BPSSCRLG",249,0)
 S Y=$E($P($G(^BPSC(BPIEN02,300)),U,13),3,99)
"RTN","BPSSCRLG",250,0)
 I $L(Y)=0 S Y=$P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),1)),U,7)
"RTN","BPSSCRLG",251,0)
 Q Y
"RTN","BPSSCRLG",252,0)
 ;Patient Relationship Code
"RTN","BPSSCRLG",253,0)
PATRELSH(BPIEN02) ;
"RTN","BPSSCRLG",254,0)
 N Y
"RTN","BPSSCRLG",255,0)
 S Y=$E($P($G(^BPSC(BPIEN02,300)),U,6),3,99)
"RTN","BPSSCRLG",256,0)
 Q $S(Y=0:"NOT SPECIFIED",Y=1:"CARDHOLDER",Y=2:"SPOUSE",Y=3:"CHILD",Y=4:"OTHER",1:Y)
"RTN","BPSSCRLG",257,0)
PCN(BPIEN02) ;
"RTN","BPSSCRLG",258,0)
 Q $P($G(^BPSC(BPIEN02,100)),U,4)
"RTN","BPSSCRLG",259,0)
 ; Get the Payer Sheet Version Number.
"RTN","BPSSCRLG",260,0)
GETVER(BPIEN02) ;
"RTN","BPSSCRLG",261,0)
 N BPSVER
"RTN","BPSSCRLG",262,0)
 S BPSVER=$P($G(^BPSC(BPIEN02,100)),U,2)
"RTN","BPSSCRLG",263,0)
 I $G(BPSVER)]"" S BPSVER=$E(BPSVER,1)_"."_$E(BPSVER,2,99)
"RTN","BPSSCRLG",264,0)
 Q BPSVER
"RTN","BPSSCRLG",265,0)
BIN(BPIEN02) ;
"RTN","BPSSCRLG",266,0)
 Q $P($G(^BPSC(BPIEN02,100)),U,1)
"RTN","BPSSCRLG",267,0)
 ;insurance name by 9002313.57 pointer
"RTN","BPSSCRLG",268,0)
INSUR57(BPIEN57) ;
"RTN","BPSSCRLG",269,0)
 N BPINSN
"RTN","BPSSCRLG",270,0)
 S BPINSN=+$G(^BPSTL(BPIEN57,9))
"RTN","BPSSCRLG",271,0)
 Q $P($G(^BPSTL(BPIEN57,10,BPINSN,0)),U,7)
"RTN","BPSSCRLG",272,0)
 ;
"RTN","BPSSCRLG",273,0)
PHPLANID(BPIEN57) ; Get the Pharmacy Plan ID from the BPS Log of Transactions file
"RTN","BPSSCRLG",274,0)
 ; Input - BPSIEN57: IEN from the BPS Log of Transactions file.
"RTN","BPSSCRLG",275,0)
 I '$G(BPIEN57) Q ""
"RTN","BPSSCRLG",276,0)
 N BPINSN
"RTN","BPSSCRLG",277,0)
 S BPINSN=+$G(^BPSTL(BPIEN57,9))
"RTN","BPSSCRLG",278,0)
 Q $P($G(^BPSTL(BPIEN57,10,BPINSN,3)),U,3)
"RTN","BPSSCRLG",279,0)
 ;
"RTN","BPSSCRLG",280,0)
QTY(BPIEN02) ;
"RTN","BPSSCRLG",281,0)
 Q $E($P($G(^BPSC(BPIEN02,400,1,440)),U,2),3,99)/1000
"RTN","BPSSCRLG",282,0)
 ;NCPDP Units
"RTN","BPSSCRLG",283,0)
UNITS(BPIEN02) ;
"RTN","BPSSCRLG",284,0)
 I $G(BPIEN02)="" Q "(  )"
"RTN","BPSSCRLG",285,0)
 N X
"RTN","BPSSCRLG",286,0)
 S X=$E($P($G(^BPSC(BPIEN02,400,1,600)),U,1),3,99)
"RTN","BPSSCRLG",287,0)
 Q $S(X="":"(  )",1:"("_X_")")
"RTN","BPSSCRLG",288,0)
UNTPRICE(BPIEN57) ;
"RTN","BPSSCRLG",289,0)
 I $G(BPIEN57)="" Q ""
"RTN","BPSSCRLG",290,0)
 Q +$P($G(^BPSTL(BPIEN57,5)),U,2)
"RTN","BPSSCRLG",291,0)
TOTPRICE(BPIEN02) ;
"RTN","BPSSCRLG",292,0)
 I $G(BPIEN02)="" Q ""
"RTN","BPSSCRLG",293,0)
 N X
"RTN","BPSSCRLG",294,0)
 S X=$E($P($G(^BPSC(BPIEN02,400,1,400)),U,30),3,99)
"RTN","BPSSCRLG",295,0)
 Q $S(X="":X,1:$$DFF2EXT^BPSECFM(X))
"RTN","BPSSCRLG",296,0)
BILLQTY(BPIEN57) ;
"RTN","BPSSCRLG",297,0)
 Q $P($G(^BPSTL(BPIEN57,5)),U,9)
"RTN","BPSSCRLG",298,0)
BILLUNT(BPIEN57) ;
"RTN","BPSSCRLG",299,0)
 I $G(BPIEN57)="" Q "(  )"
"RTN","BPSSCRLG",300,0)
 N X
"RTN","BPSSCRLG",301,0)
 S X=$P($G(^BPSTL(BPIEN57,5)),U,10)
"RTN","BPSSCRLG",302,0)
 Q $S(X="":"(  )",1:"("_X_")")
"RTN","BPSSCRLG",303,0)
 ;Ingredient Cost
"RTN","BPSSCRLG",304,0)
INGRCST(BPIEN02) ;
"RTN","BPSSCRLG",305,0)
 I $G(BPIEN02)="" Q ""
"RTN","BPSSCRLG",306,0)
 N X
"RTN","BPSSCRLG",307,0)
 S X=$E($P($G(^BPSC(BPIEN02,400,1,400)),U,9),3,99)
"RTN","BPSSCRLG",308,0)
 Q $S(X="":X,1:$$DFF2EXT^BPSECFM(X))
"RTN","BPSSCRLG",309,0)
 ;Dispensing Fee Submitted
"RTN","BPSSCRLG",310,0)
DISPFEE(BPIEN02) ;
"RTN","BPSSCRLG",311,0)
 I $G(BPIEN02)="" Q ""
"RTN","BPSSCRLG",312,0)
 N X
"RTN","BPSSCRLG",313,0)
 S X=$E($P($G(^BPSC(BPIEN02,400,1,400)),U,12),3,99)
"RTN","BPSSCRLG",314,0)
 Q $S(X="":X,1:$$DFF2EXT^BPSECFM(X))
"RTN","BPSSCRLG",315,0)
 ;U&C Charge
"RTN","BPSSCRLG",316,0)
UCCHRG(BPIEN02) ;
"RTN","BPSSCRLG",317,0)
 I $G(BPIEN02)="" Q ""
"RTN","BPSSCRLG",318,0)
 N X
"RTN","BPSSCRLG",319,0)
 S X=$E($P($G(^BPSC(BPIEN02,400,1,400)),U,26),3,99)
"RTN","BPSSCRLG",320,0)
 Q $S(X="":X,1:$$DFF2EXT^BPSECFM(X))
"RTN","BPSSCRLG",321,0)
 ;Admin Fee
"RTN","BPSSCRLG",322,0)
ADMNFEE(BPIEN02) ;
"RTN","BPSSCRLG",323,0)
 I $G(BPIEN02)="" Q ""
"RTN","BPSSCRLG",324,0)
 N CNT,X,AF
"RTN","BPSSCRLG",325,0)
 S AF="",CNT=0 F  S CNT=$O(^BPSC(BPIEN02,400,1,478.01,CNT)) Q:'CNT  D
"RTN","BPSSCRLG",326,0)
 . S X=$G(^BPSC(BPIEN02,400,1,478.01,CNT,0))
"RTN","BPSSCRLG",327,0)
 . I +$E($P(X,U,2),3,4)=4 S AF=AF+$$DFF2EXT^BPSECFM($E($P(X,U,3),3,10))
"RTN","BPSSCRLG",328,0)
 Q $S(AF="":AF,1:$J(AF,0,2))
"RTN","BPSSCRLG",329,0)
 ;get ECME pharmacy division ptr for LOG
"RTN","BPSSCRLG",330,0)
LDIV(BPIEN57) ;
"RTN","BPSSCRLG",331,0)
 Q +$P($G(^BPSTL(BPIEN57,1)),U,7)
"RTN","BPSSCRLG",332,0)
 ;transaction code
"RTN","BPSSCRLG",333,0)
TRCODE(BPIEN02) ;
"RTN","BPSSCRLG",334,0)
 Q $P($G(^BPSC(BPIEN02,100)),U,3)
"RTN","BPSSCRLG",335,0)
 ;days supply
"RTN","BPSSCRLG",336,0)
DAYSSUPL(BPIEN02) ;
"RTN","BPSSCRLG",337,0)
 ;format D5NNN -> NNN
"RTN","BPSSCRLG",338,0)
 Q +$E($P($G(^BPSC(BPIEN02,400,1,400)),U,5),3,99)
"RTN","BPSSCRLG",339,0)
 ;
"RTN","BPSSCRLG",340,0)
 ;display response record
"RTN","BPSSCRLG",341,0)
DISPRSP(BPLN,BP59,BPIEN03,BP57,BPSTYPE,BPSDTALT) ;
"RTN","BPSSCRLG",342,0)
 N BPSCRLNS S BPSCRLNS=17 ;(see "BPS LSTMN LOG" LM template: Bottom=21, Top = 4, 21-4=17)
"RTN","BPSSCRLG",343,0)
 N BPX,BPLN0,BPCNT,BPRJCDS,BPRJ,BPSTR1,BPSTYP2,BDUR,BMSG,PTRESP
"RTN","BPSSCRLG",344,0)
 S BPLN0=BPLN
"RTN","BPSSCRLG",345,0)
 S BPSTYP2=$S(BPSTYPE="C":"CLAIM REQUEST",BPSTYPE="R":"REVERSAL",1:"")
"RTN","BPSSCRLG",346,0)
 S BPSTR1="Response Information  ("_BPSTYP2_")(#"_BPIEN03_")"
"RTN","BPSSCRLG",347,0)
 D SETLINE(.BPLN,BPSTR1_$$LINE^BPSSCRU3(79-$L(BPSTR1),"-"))
"RTN","BPSSCRLG",348,0)
 D SETLINE(.BPLN,"Response Received: "_$$RESPREC(BPIEN03,BPSDTALT))
"RTN","BPSSCRLG",349,0)
 D SETLINE(.BPLN,"Date of Service: "_$$DOSRSP(BPIEN03))
"RTN","BPSSCRLG",350,0)
 D SETLINE(.BPLN,"Transaction Response Status: "_$$RESPSTAT^BPSSCRU5(BPIEN03))
"RTN","BPSSCRLG",351,0)
 D SETLINE(.BPLN,"Total Amount Paid: $"_$$TOTAMNT(BPIEN03))
"RTN","BPSSCRLG",352,0)
 D SETLINE(.BPLN,"Ingredient Cost Paid: $"_$$ICPAID(BPIEN03)_"   Dispensing Fee Paid: $"_$$DFPAID(BPIEN03))
"RTN","BPSSCRLG",353,0)
 S PTRESP=$$PTRESP(BPIEN03) S PTRESP=$S(PTRESP="":"$",PTRESP="0.00":"$0",1:"($"_PTRESP_")")
"RTN","BPSSCRLG",354,0)
 D SETLINE(.BPLN,"Patient Resp (INS): "_PTRESP)
"RTN","BPSSCRLG",355,0)
 D SETLINE(.BPLN,"Reject code(s): ")
"RTN","BPSSCRLG",356,0)
 D REJCODES^BPSSCRU5(BPIEN03,.BPRJCDS)
"RTN","BPSSCRLG",357,0)
 S BPRJ=""
"RTN","BPSSCRLG",358,0)
 F  S BPRJ=$O(BPRJCDS(BPRJ)) Q:BPRJ=""  D
"RTN","BPSSCRLG",359,0)
 . D SETLINE(.BPLN," "_$$GETRJNAM^BPSSCRU3(BPRJ))
"RTN","BPSSCRLG",360,0)
 D WRAPLN^BPSSCRU5(.BPLN,$$MESSAGE(BPIEN03),76,"Payer Message: ",5)
"RTN","BPSSCRLG",361,0)
 D ADDMESS(BPIEN03,1,.BPADDMSG)
"RTN","BPSSCRLG",362,0)
 S BMSG="" F  S BMSG=$O(BPADDMSG(BMSG)) Q:BMSG=""  D
"RTN","BPSSCRLG",363,0)
 . D WRAPLN^BPSSCRU5(.BPLN,BPADDMSG(BMSG),76,$S(BMSG=1:"Payer Additional Message: ",1:"     "),5)
"RTN","BPSSCRLG",364,0)
 D SETLINE(.BPLN,"Reason for Service Code: "_$$DURREAS(BPIEN03))
"RTN","BPSSCRLG",365,0)
 D SETLINE(.BPLN,"DUR Text: "_$$DURTEXT(BPIEN03))
"RTN","BPSSCRLG",366,0)
 D WRAPLN^BPSSCRU5(.BPLN,$$DURADD(BPIEN03),76,"DUR Additional Text: ",5)
"RTN","BPSSCRLG",367,0)
 ; BPS*1*18:  Print Claim Log [BPS PRTCL USRSCR CLAIM LOG] (when included in the incoming response)
"RTN","BPSSCRLG",368,0)
 D SETLINE(.BPLN,"HPID/OEID: "_$$HPID(BPIEN03,BP57))
"RTN","BPSSCRLG",369,0)
 F BPCNT=1:1:2 D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",370,0)
 Q
"RTN","BPSSCRLG",371,0)
 ;
"RTN","BPSSCRLG",372,0)
RESPREC(BPIEN03,BPSDTALT) ;
"RTN","BPSSCRLG",373,0)
 N BPSDT
"RTN","BPSSCRLG",374,0)
 S BPSDT=+$P($G(^BPSR(BPIEN03,0)),U,2)
"RTN","BPSSCRLG",375,0)
 Q $$DATETIME^BPSSCRU5($S(BPSDT>0:BPSDT,1:BPSDTALT))
"RTN","BPSSCRLG",376,0)
 ;
"RTN","BPSSCRLG",377,0)
DOSRSP(BPIEN03) ;
"RTN","BPSSCRLG",378,0)
 N BPDT
"RTN","BPSSCRLG",379,0)
 S BPDT=$P($G(^BPSR(BPIEN03,400)),U,1)\1
"RTN","BPSSCRLG",380,0)
 Q $E(BPDT,5,6)_"/"_$E(BPDT,7,8)_"/"_$E(BPDT,1,4)
"RTN","BPSSCRLG",381,0)
 ;
"RTN","BPSSCRLG",382,0)
TOTAMNT(BPIEN03) ;
"RTN","BPSSCRLG",383,0)
 I $G(BPIEN03)="" Q ""
"RTN","BPSSCRLG",384,0)
 N X
"RTN","BPSSCRLG",385,0)
 S X=$P($G(^BPSR(BPIEN03,1000,1,500)),U,9)
"RTN","BPSSCRLG",386,0)
 Q $S(X="":X,1:$$DFF2EXT^BPSECFM(X))
"RTN","BPSSCRLG",387,0)
 ;
"RTN","BPSSCRLG",388,0)
ICPAID(BPIEN03) ;Ingredient Cost Paid
"RTN","BPSSCRLG",389,0)
 I $G(BPIEN03)="" Q ""
"RTN","BPSSCRLG",390,0)
 N X
"RTN","BPSSCRLG",391,0)
 S X=$P($G(^BPSR(BPIEN03,1000,1,500)),U,6)
"RTN","BPSSCRLG",392,0)
 Q $S(X="":X,1:$$DFF2EXT^BPSECFM(X))
"RTN","BPSSCRLG",393,0)
 ;
"RTN","BPSSCRLG",394,0)
DFPAID(BPIEN03) ;Dispensing Fee Paid
"RTN","BPSSCRLG",395,0)
 I $G(BPIEN03)="" Q ""
"RTN","BPSSCRLG",396,0)
 N X
"RTN","BPSSCRLG",397,0)
 S X=$P($G(^BPSR(BPIEN03,1000,1,500)),U,7)
"RTN","BPSSCRLG",398,0)
 Q $S(X="":X,1:$$DFF2EXT^BPSECFM(X))
"RTN","BPSSCRLG",399,0)
 ;
"RTN","BPSSCRLG",400,0)
PTRESP(BPIEN03) ;Patient Responsibility
"RTN","BPSSCRLG",401,0)
 I $G(BPIEN03)="" Q ""
"RTN","BPSSCRLG",402,0)
 N X
"RTN","BPSSCRLG",403,0)
 S X=$P($G(^BPSR(BPIEN03,1000,1,500)),U,5)
"RTN","BPSSCRLG",404,0)
 Q $S(X="":X,1:$$DFF2EXT^BPSECFM(X))
"RTN","BPSSCRLG",405,0)
 ;
"RTN","BPSSCRLG",406,0)
MESSAGE(BPIEN03) ;
"RTN","BPSSCRLG",407,0)
 Q $P($G(^BPSR(BPIEN03,504)),U)
"RTN","BPSSCRLG",408,0)
 ;
"RTN","BPSSCRLG",409,0)
ADDMESS(BPIEN03,POS,BPADDMSG) ;
"RTN","BPSSCRLG",410,0)
 N ADM,X,QUA,TXT,CON,BPMTMP,L,NEXT
"RTN","BPSSCRLG",411,0)
 K BPMTMP,BPADDMSG
"RTN","BPSSCRLG",412,0)
 I '$G(BPIEN03) Q
"RTN","BPSSCRLG",413,0)
 I '$G(POS) S POS=1
"RTN","BPSSCRLG",414,0)
 S (ADM,L)=0 F  S ADM=$O(^BPSR(BPIEN03,1000,POS,130.01,ADM)) Q:'ADM  D
"RTN","BPSSCRLG",415,0)
 . S X=$G(^BPSR(BPIEN03,1000,POS,130.01,ADM,0))
"RTN","BPSSCRLG",416,0)
 . S TXT=$P($G(^BPSR(BPIEN03,1000,POS,130.01,ADM,1)),U,1)
"RTN","BPSSCRLG",417,0)
 . S QUA=$P(X,U,3),CON=$P(X,U,2)
"RTN","BPSSCRLG",418,0)
 . ; This should not happen, but if the qualifier is null, set it 
"RTN","BPSSCRLG",419,0)
 . ;  to "Z"_concatenated with a unique number so that it follows the
"RTN","BPSSCRLG",420,0)
 . ;  other qualifiers.  Per the D0 standard, qualifiers can be 1-9 and
"RTN","BPSSCRLG",421,0)
 . ;  A-Z.  ECL limits this to 1-9 but an future ECL may extend this.
"RTN","BPSSCRLG",422,0)
 . I QUA="" S L=L+1,QUA="Z"_L
"RTN","BPSSCRLG",423,0)
 . S BPMTMP(QUA)=CON_U_TXT
"RTN","BPSSCRLG",424,0)
 I '$D(BPMTMP) Q
"RTN","BPSSCRLG",425,0)
 S L=0,(QUA,NEXT)="" F  S QUA=$O(BPMTMP(QUA)) Q:QUA=""  D
"RTN","BPSSCRLG",426,0)
 . S CON=$P(BPMTMP(QUA),U,1),TXT=$P(BPMTMP(QUA),U,2)
"RTN","BPSSCRLG",427,0)
 . I NEXT="+" S BPADDMSG(L)=BPADDMSG(L)_TXT,NEXT=CON Q
"RTN","BPSSCRLG",428,0)
 . S L=L+1,BPADDMSG(L)=TXT,NEXT=CON
"RTN","BPSSCRLG",429,0)
 Q
"RTN","BPSSCRLG",430,0)
 ;
"RTN","BPSSCRLG",431,0)
DURTEXT(BPIEN03) ;
"RTN","BPSSCRLG",432,0)
 ; DUR FREE TEXT MESSAGE from first instance of DUR PPS RESPONSE
"RTN","BPSSCRLG",433,0)
 Q $P($G(^BPSR(BPIEN03,1000,1,567.01,1,0)),U,9)
"RTN","BPSSCRLG",434,0)
 ;
"RTN","BPSSCRLG",435,0)
DURREAS(BPIEN03) ;
"RTN","BPSSCRLG",436,0)
 ; REASON FOR SERVICE CODE from first instance of DUR PPS RESPONSE
"RTN","BPSSCRLG",437,0)
 Q $$GET1^DIQ(9002313.1101,"1,1,"_BPIEN03_",",439)
"RTN","BPSSCRLG",438,0)
 ;
"RTN","BPSSCRLG",439,0)
DURADD(BPIEN03) ;
"RTN","BPSSCRLG",440,0)
 ; DUR ADDITIONAL TEXT from first instance of DUR PPS RESPONSE
"RTN","BPSSCRLG",441,0)
 Q $P($G(^BPSR(BPIEN03,1000,1,567.01,1,1)),U)
"RTN","BPSSCRLG",442,0)
 ;
"RTN","BPSSCRLG",443,0)
 ;Payer HPID from response  ***BPS*1*18 IB ICR #6061
"RTN","BPSSCRLG",444,0)
HPID(BPIEN03,BP57) ;
"RTN","BPSSCRLG",445,0)
 N BPHPD
"RTN","BPSSCRLG",446,0)
 Q:$P($G(^BPSR(BPIEN03,560)),U,8)'="01" ""
"RTN","BPSSCRLG",447,0)
 S BPHPD=$P($G(^BPSR(BPIEN03,560)),U,9)
"RTN","BPSSCRLG",448,0)
 ; 6/25/14 no validation of HPID for this screen
"RTN","BPSSCRLG",449,0)
 ;S:BPHPD'="" BPHPD=BPHPD_$P($$HOD^IBCNHUT1(BPHPD,BP57),U,3)
"RTN","BPSSCRLG",450,0)
 Q BPHPD
"RTN","BPSSCRLG",451,0)
 ;
"RTN","BPSSCRLG",452,0)
RXCOB57(BPIEN57) ;
"RTN","BPSSCRLG",453,0)
 N BPCOB
"RTN","BPSSCRLG",454,0)
 S BPCOB=+$P($G(^BPSTL(BPIEN57,0)),U,14)
"RTN","BPSSCRLG",455,0)
 Q $S(BPCOB=2:"SECONDARY",BPCOB=3:"TERTIARY",1:"PRIMARY")
"RTN","BPSSCRLG",456,0)
 ;
"RTN","BPSSCRLG",457,0)
 ;Display other payer(s)
"RTN","BPSSCRLG",458,0)
DISPPYR(BPLN,BPIEN03) ;
"RTN","BPSSCRLG",459,0)
 N PYR,PYRDATA,BPSTR1
"RTN","BPSSCRLG",460,0)
 S PYR=0 F  S PYR=$O(^BPSR(BPIEN03,1000,1,355.01,PYR)) Q:'PYR  D
"RTN","BPSSCRLG",461,0)
 . S PYRDATA=^BPSR(BPIEN03,1000,1,355.01,PYR,1)
"RTN","BPSSCRLG",462,0)
 . S BPSTR1="Other Payer Information ("_PYR_")(#"_BPIEN03_")"
"RTN","BPSSCRLG",463,0)
 . D SETLINE(.BPLN,BPSTR1_$$LINE^BPSSCRU3(79-$L(BPSTR1),"-"))
"RTN","BPSSCRLG",464,0)
 . D SETLINE(.BPLN,"Other Payer ID Count: "_$$PYRIDCNT(BPIEN03,PYR))
"RTN","BPSSCRLG",465,0)
 . D SETLINE(.BPLN,"Other Payer ID: "_$P(PYRDATA,U,3))
"RTN","BPSSCRLG",466,0)
 . D SETLINE(.BPLN,"Other Payer Coverage Type: "_$P(PYRDATA,U,1))
"RTN","BPSSCRLG",467,0)
 . D SETLINE(.BPLN,"Other Payer ID Qualifier: "_$P(PYRDATA,U,2))
"RTN","BPSSCRLG",468,0)
 . D SETLINE(.BPLN,"Other Payer Help Desk Phone Number: "_$P(PYRDATA,U,8))
"RTN","BPSSCRLG",469,0)
 . D SETLINE(.BPLN,"Other Payer Processor Control Number: "_$P(PYRDATA,U,4))
"RTN","BPSSCRLG",470,0)
 . D SETLINE(.BPLN,"Other Payer Effective Date: "_$P(PYRDATA,U,10))
"RTN","BPSSCRLG",471,0)
 . D SETLINE(.BPLN,"Other Payer Termination Date: "_$P(PYRDATA,U,11))
"RTN","BPSSCRLG",472,0)
 . D SETLINE(.BPLN,"Other Payer Person Code: "_$P(PYRDATA,U,7))
"RTN","BPSSCRLG",473,0)
 . D SETLINE(.BPLN,"Other Payer Patient Relationship Code: "_$P(PYRDATA,U,9))
"RTN","BPSSCRLG",474,0)
 . D SETLINE(.BPLN,"Other Payer Cardholder ID: "_$P(PYRDATA,U,5))
"RTN","BPSSCRLG",475,0)
 . D SETLINE(.BPLN,"Other Payer Group ID: "_$P(PYRDATA,U,6))
"RTN","BPSSCRLG",476,0)
 Q
"RTN","BPSSCRLG",477,0)
 ;
"RTN","BPSSCRLG",478,0)
PYRIDCNT(BPIEN03,PYR) ;
"RTN","BPSSCRLG",479,0)
 Q $P($G(^BPSR(BPIEN03,1000,1,355.01,PYR,0)),U)
"RTN","BPSSCRN0")
0^48^B8359563
"RTN","BPSSCRN0",1,0)
BPSSCRN0 ;ALB/ESG - ECME user screen open/close non-billable entry ;21-SEP-2015
"RTN","BPSSCRN0",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**20**;JUN 2004;Build 27
"RTN","BPSSCRN0",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRN0",4,0)
 ;
"RTN","BPSSCRN0",5,0)
OC ; entry point for open/close non-billable entry action
"RTN","BPSSCRN0",6,0)
 N BPRET,BP59,CLTOOP,JJ1,JJ2,JJ3,DFN,BPSSCRLN,BLN,COMMENT,BPQ,DIE,DA,DR,X,Y
"RTN","BPSSCRN0",7,0)
 D FULL^VALM1
"RTN","BPSSCRN0",8,0)
 W "Open/Close Non-Billable Entry",!,"Enter the line number for the entry to be opened or closed."
"RTN","BPSSCRN0",9,0)
 S BPRET=$$ASKLINE^BPSSCRU4("Select item","C","Please select a single Rx line.")
"RTN","BPSSCRN0",10,0)
 I BPRET<1 G OCX
"RTN","BPSSCRN0",11,0)
 S BP59=$P(BPRET,U,4)
"RTN","BPSSCRN0",12,0)
 I '$$NB^BPSSCR03(BP59) W !!,"The selected entry must be a Non-Billable entry. Please try again." D PAUSE^VALM1 G OCX
"RTN","BPSSCRN0",13,0)
 ;
"RTN","BPSSCRN0",14,0)
 I $$NBCL^BPSSCR03(BP59) S CLTOOP=1,JJ1="OPEN",JJ2="OPENED",JJ3="Opening"    ; Closed entry to be re-opened
"RTN","BPSSCRN0",15,0)
 E  S CLTOOP=0,JJ1="CLOSE",JJ2="CLOSED",JJ3="Closing"                        ; Open entry to be closed
"RTN","BPSSCRN0",16,0)
 ;
"RTN","BPSSCRN0",17,0)
 S DFN=+$P(BPRET,U,2) I 'DFN W !!,"Patient isn't valid for this entry." D PAUSE^VALM1 G OCX
"RTN","BPSSCRN0",18,0)
 S BPSSCRLN=$P(BPRET,U,5)       ; starting line# for the ListMan display array
"RTN","BPSSCRN0",19,0)
 ;
"RTN","BPSSCRN0",20,0)
 W !!,"You've chosen to ",JJ1," the following entry for"
"RTN","BPSSCRN0",21,0)
 W !,$P($G(^DPT(DFN,0)),U,1)," :"
"RTN","BPSSCRN0",22,0)
 S BLN=BPSSCRLN-1
"RTN","BPSSCRN0",23,0)
 F  S BLN=$O(^TMP("BPSSCR",$J,"VALM","IDX",BLN)) Q:'BLN  Q:'$D(^TMP("BPSSCR",$J,"VALM","IDX",BLN,BP59))  D
"RTN","BPSSCRN0",24,0)
 . W !,$G(^TMP("BPSSCR",$J,"VALM",BLN,0))
"RTN","BPSSCRN0",25,0)
 . Q
"RTN","BPSSCRN0",26,0)
 W !!,"The Selected Entry will be ",JJ2,".",!
"RTN","BPSSCRN0",27,0)
 ;
"RTN","BPSSCRN0",28,0)
COMQ ; capture the free text comments
"RTN","BPSSCRN0",29,0)
 S COMMENT=$$COMMENT^BPSSCRCL("Comment ",40)
"RTN","BPSSCRN0",30,0)
 I COMMENT=U W !!,"No changes made." D PAUSE^VALM1 G OCX
"RTN","BPSSCRN0",31,0)
 S COMMENT=$$TRIM^XLFSTR(COMMENT)     ; remove leading or trailing spaces
"RTN","BPSSCRN0",32,0)
 I '$L(COMMENT) W $C(7),!,"This is a required response. Enter '^' to exit" G COMQ
"RTN","BPSSCRN0",33,0)
 ;
"RTN","BPSSCRN0",34,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure? (Y/N)")
"RTN","BPSSCRN0",35,0)
 I BPQ'=1 W !!,"No changes made." D PAUSE^VALM1 G OCX
"RTN","BPSSCRN0",36,0)
 ;
"RTN","BPSSCRN0",37,0)
 ; time to file
"RTN","BPSSCRN0",38,0)
 w !!,JJ3," Entry"
"RTN","BPSSCRN0",39,0)
 S DIE=9002313.59
"RTN","BPSSCRN0",40,0)
 S DA=BP59
"RTN","BPSSCRN0",41,0)
 I CLTOOP S DR="302////0;306////"_$$NOW^XLFDT_";307////^S X=DUZ;308////^S X=COMMENT"     ; re-opening entry
"RTN","BPSSCRN0",42,0)
 I 'CLTOOP S DR="302////1;303////"_$$NOW^XLFDT_";304////^S X=DUZ;305////^S X=COMMENT"    ; closing entry
"RTN","BPSSCRN0",43,0)
 D ^DIE
"RTN","BPSSCRN0",44,0)
 D PAUSE^VALM1
"RTN","BPSSCRN0",45,0)
 D REDRAW^BPSSCRUD("Updating screen ...")
"RTN","BPSSCRN0",46,0)
 ;
"RTN","BPSSCRN0",47,0)
OCX ;
"RTN","BPSSCRN0",48,0)
 S VALMBCK="R"
"RTN","BPSSCRN0",49,0)
 Q
"RTN","BPSSCRN0",50,0)
 ;
"RTN","BPSSCRRJ")
0^40^B126798258
"RTN","BPSSCRRJ",1,0)
BPSSCRRJ ;ALB/ESG - ECME OPECC Reject Information ;02-SEP-2015
"RTN","BPSSCRRJ",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**20**;JUN 2004;Build 27
"RTN","BPSSCRRJ",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRRJ",4,0)
 ;
"RTN","BPSSCRRJ",5,0)
 ; ICR# 4701 for call to $$RXSITE^PSOBPSUT
"RTN","BPSSCRRJ",6,0)
 ; ICR# 4705 for call to $$GETNDC^PSONDCUT
"RTN","BPSSCRRJ",7,0)
 ; ICR# 4711 for call to DP^PSORXVW
"RTN","BPSSCRRJ",8,0)
 ; ICR# 6227 for call to REJCOM^PSOREJU4
"RTN","BPSSCRRJ",9,0)
 ; ICR# 6228 for call to MP^PSOREJU4 and PI^PSOREJU4
"RTN","BPSSCRRJ",10,0)
 ;
"RTN","BPSSCRRJ",11,0)
 Q
"RTN","BPSSCRRJ",12,0)
 ;
"RTN","BPSSCRRJ",13,0)
EN ; -- main entry point for BPS OPECC REJECT INFORMATION
"RTN","BPSSCRRJ",14,0)
 N BPSEL,DFN,PSODFN,BPINSIEN,BPORI59,RXREF,RXIEN,RXFIL,LINE,VALMHDR,RX,FILL
"RTN","BPSSCRRJ",15,0)
 W "OPECC Reject Information"
"RTN","BPSSCRRJ",16,0)
 D FULL^VALM1
"RTN","BPSSCRRJ",17,0)
 S BPSEL=$$ASKLINE^BPSSCRU4("Select item","C","Please select a single Rx line.")
"RTN","BPSSCRRJ",18,0)
 I BPSEL<1 G ENX
"RTN","BPSSCRRJ",19,0)
 S (DFN,PSODFN)=+$P(BPSEL,U,2)              ; patient DFN
"RTN","BPSSCRRJ",20,0)
 S BPINSIEN=+$P(BPSEL,U,3)                  ; insurance ien
"RTN","BPSSCRRJ",21,0)
 S BPORI59=$P(BPSEL,U,4) I 'BPORI59 G ENX   ; BPS Transaction ien
"RTN","BPSSCRRJ",22,0)
 S RXREF=$$RXREF^BPSSCRU2(BPORI59)
"RTN","BPSSCRRJ",23,0)
 S RXIEN=$P(RXREF,U,1) I 'RXIEN G ENX       ; prescription ien
"RTN","BPSSCRRJ",24,0)
 S RXFIL=$P(RXREF,U,2)                      ; fill#
"RTN","BPSSCRRJ",25,0)
 ;
"RTN","BPSSCRRJ",26,0)
 ; the claim must either be rejected or non-billable to be eligible for this action
"RTN","BPSSCRRJ",27,0)
 I '$$REJECTED^BPSSCR02(BPORI59),'$$NB^BPSSCR03(BPORI59) D  G ENX
"RTN","BPSSCRRJ",28,0)
 . W !!,"This claim is not a valid selection for the OPECC Reject Information screen."
"RTN","BPSSCRRJ",29,0)
 . W !,"This screen is for either rejected claims or non-billable claims."
"RTN","BPSSCRRJ",30,0)
 . D PAUSE^VALM1
"RTN","BPSSCRRJ",31,0)
 . Q
"RTN","BPSSCRRJ",32,0)
 ;
"RTN","BPSSCRRJ",33,0)
 D EN^VALM("BPS OPECC REJECT INFORMATION")
"RTN","BPSSCRRJ",34,0)
ENX ;
"RTN","BPSSCRRJ",35,0)
 S VALMBCK="R"
"RTN","BPSSCRRJ",36,0)
 Q
"RTN","BPSSCRRJ",37,0)
 ;
"RTN","BPSSCRRJ",38,0)
 ;
"RTN","BPSSCRRJ",39,0)
INIT ; -- init variables and list array
"RTN","BPSSCRRJ",40,0)
 ;
"RTN","BPSSCRRJ",41,0)
 K ^TMP("BPSSCRRJ",$J),^TMP("PSOPI",$J)
"RTN","BPSSCRRJ",42,0)
 S LINE=0,VALMCNT=0
"RTN","BPSSCRRJ",43,0)
 S (DFN,PSODFN)=+$P($G(^BPST(BPORI59,0)),U,6)
"RTN","BPSSCRRJ",44,0)
 ;
"RTN","BPSSCRRJ",45,0)
 D REJ          ; main reject information
"RTN","BPSSCRRJ",46,0)
 D BPSCOM       ; ecme opecc comments
"RTN","BPSSCRRJ",47,0)
 D PSOCOM       ; pso pharmacist comments
"RTN","BPSSCRRJ",48,0)
 D INS          ; insurance information
"RTN","BPSSCRRJ",49,0)
 ;
"RTN","BPSSCRRJ",50,0)
INITX ;
"RTN","BPSSCRRJ",51,0)
 Q
"RTN","BPSSCRRJ",52,0)
 ;
"RTN","BPSSCRRJ",53,0)
REJ ; main reject information data capture and display
"RTN","BPSSCRRJ",54,0)
 ;
"RTN","BPSSCRRJ",55,0)
 N BBTXT,RXCOB,ELIG,STATUS,RESPIEN,BPPOS,BPRJ,BPN,RSPREC,Z,DG,CODE,DESC,BPSNAF,BPPMSG,BPARR,PREFIX,TXTLN,BPADDMSG,PAMSG,TX
"RTN","BPSSCRRJ",56,0)
 S BBTXT=""
"RTN","BPSSCRRJ",57,0)
 S RXCOB=+$P($G(^BPST(BPORI59,0)),U,14) I 'RXCOB S RXCOB=1
"RTN","BPSSCRRJ",58,0)
 I $$BBILL^BPSBUTL(RXIEN,RXFIL,RXCOB) S BBTXT=" BACK-BILL"
"RTN","BPSSCRRJ",59,0)
 E  I $$RESUBMIT^BPSBUTL(RXIEN,RXFIL,RXCOB) S BBTXT=" RESUBMISSION"
"RTN","BPSSCRRJ",60,0)
 S ELIG=$P($G(^BPST(BPORI59,9)),U,4)
"RTN","BPSSCRRJ",61,0)
 S ELIG=$S(ELIG="C":"CHAMPVA",ELIG="T":"TRICARE",1:"Veteran")
"RTN","BPSSCRRJ",62,0)
 D SETLN("REJECT Information ("_ELIG_") "_BBTXT,1,1)
"RTN","BPSSCRRJ",63,0)
 ;
"RTN","BPSSCRRJ",64,0)
 ; for non-billable entries display some custom information and get out
"RTN","BPSSCRRJ",65,0)
 ; most of this section will not work for non-billables because there is no ECME claim or response
"RTN","BPSSCRRJ",66,0)
 I $$NB^BPSSCR03(BPORI59) D  G REJX
"RTN","BPSSCRRJ",67,0)
 . D SETLN("Current ECME Status: N/A for Non-Billable Entry")
"RTN","BPSSCRRJ",68,0)
 . D SETLN($$EREJTXT^BPSSCR03(BPORI59))
"RTN","BPSSCRRJ",69,0)
 . Q
"RTN","BPSSCRRJ",70,0)
 ;
"RTN","BPSSCRRJ",71,0)
 ; the rest of this procedure is for a normal rejected claim/response
"RTN","BPSSCRRJ",72,0)
 ;
"RTN","BPSSCRRJ",73,0)
 S STATUS=$P($$STATUS^BPSOSRX(RXIEN,RXFIL,,,RXCOB),U,1)
"RTN","BPSSCRRJ",74,0)
 D SETLN("Current ECME Status: "_STATUS)
"RTN","BPSSCRRJ",75,0)
 ;
"RTN","BPSSCRRJ",76,0)
 I '$$GRESPPOS^BPSSCRU3(BPORI59,.RESPIEN,.BPPOS) D  G INITX
"RTN","BPSSCRRJ",77,0)
 . D SETLN("No ECME Response information can be found.")
"RTN","BPSSCRRJ",78,0)
 . Q
"RTN","BPSSCRRJ",79,0)
 ;
"RTN","BPSSCRRJ",80,0)
 I '$G(RESPIEN) D  G INITX
"RTN","BPSSCRRJ",81,0)
 . D SETLN("SYSTEM ERROR: No ECME Response information can be found.")
"RTN","BPSSCRRJ",82,0)
 . Q
"RTN","BPSSCRRJ",83,0)
 ;
"RTN","BPSSCRRJ",84,0)
 ; get the number of rejects on file and the reject codes/descriptions
"RTN","BPSSCRRJ",85,0)
 K BPRJ S BPN=0
"RTN","BPSSCRRJ",86,0)
 D GETRJCOD^BPSSCRU3(BPORI59,.BPRJ,.BPN,74,"")
"RTN","BPSSCRRJ",87,0)
 I BPN D      ; if there are rejects
"RTN","BPSSCRRJ",88,0)
 . S RSPREC=$P($G(^BPSR(RESPIEN,0)),U,2)     ; date/time response received
"RTN","BPSSCRRJ",89,0)
 . D SETLN("Reject"_$S(BPN>1:"s",1:"")_" received from Payer on "_$$FMTE^XLFDT(RSPREC,"5ZPS")_"."),SETLN(" ")
"RTN","BPSSCRRJ",90,0)
 . D SETLN(" Code   Description")
"RTN","BPSSCRRJ",91,0)
 . S Z=0 F  S Z=$O(BPRJ(Z)) Q:'Z  D
"RTN","BPSSCRRJ",92,0)
 .. S DG=$G(BPRJ(Z)),CODE=$P(DG,":",1),DESC=$P(DG,":",2,99)
"RTN","BPSSCRRJ",93,0)
 .. D SETLN($J(CODE,5)_" - "_DESC)
"RTN","BPSSCRRJ",94,0)
 .. Q
"RTN","BPSSCRRJ",95,0)
 . D SETLN(" ")
"RTN","BPSSCRRJ",96,0)
 . Q
"RTN","BPSSCRRJ",97,0)
 I 'BPN D SETLN("No Reject Information was found."),SETLN(" ")
"RTN","BPSSCRRJ",98,0)
 ;
"RTN","BPSSCRRJ",99,0)
 ; get and display next available fill date from the response file
"RTN","BPSSCRRJ",100,0)
 S BPSNAF=$$NFLDT^BPSBUTL(RXIEN,RXFIL,RXCOB)
"RTN","BPSSCRRJ",101,0)
 I BPSNAF'="" D SETLN("Next Avail Fill: "_$$FMTE^XLFDT(BPSNAF,"5DZ"))
"RTN","BPSSCRRJ",102,0)
 ;
"RTN","BPSSCRRJ",103,0)
 ; get and display payer message (504-F4)
"RTN","BPSSCRRJ",104,0)
 S BPPMSG=$$MESSAGE^BPSSCRLG(RESPIEN)    ; payer message (504-F4)
"RTN","BPSSCRRJ",105,0)
 D WRAPTXT(BPPMSG,62,.BPARR)
"RTN","BPSSCRRJ",106,0)
 S BPN=0 F  S BPN=$O(BPARR(BPN)) Q:'BPN  D
"RTN","BPSSCRRJ",107,0)
 . S PREFIX=$S(BPN=1:"Payer Message  :",1:"")
"RTN","BPSSCRRJ",108,0)
 . S TXTLN=$$LJ^XLFSTR(PREFIX,17)_$G(BPARR(BPN,0))
"RTN","BPSSCRRJ",109,0)
 . D SETLN(TXTLN)
"RTN","BPSSCRRJ",110,0)
 . Q
"RTN","BPSSCRRJ",111,0)
 ;
"RTN","BPSSCRRJ",112,0)
 ; get and display payer additional message (526-FQ)
"RTN","BPSSCRRJ",113,0)
 K BPADDMSG
"RTN","BPSSCRRJ",114,0)
 D ADDMESS^BPSSCRLG(RESPIEN,1,.BPADDMSG)
"RTN","BPSSCRRJ",115,0)
 S PAMSG=""
"RTN","BPSSCRRJ",116,0)
 S BPN=0 F  S BPN=$O(BPADDMSG(BPN)) Q:'BPN  S TX=$G(BPADDMSG(BPN)),PAMSG=$S(PAMSG="":TX,1:PAMSG_" "_TX)
"RTN","BPSSCRRJ",117,0)
 D WRAPTXT(PAMSG,62,.BPARR)
"RTN","BPSSCRRJ",118,0)
 S BPN=0 F  S BPN=$O(BPARR(BPN)) Q:'BPN  D
"RTN","BPSSCRRJ",119,0)
 . S PREFIX=$S(BPN=1:"Payer Addl Msg :",1:"")
"RTN","BPSSCRRJ",120,0)
 . S TXTLN=$$LJ^XLFSTR(PREFIX,17)_$G(BPARR(BPN,0))
"RTN","BPSSCRRJ",121,0)
 . D SETLN(TXTLN)
"RTN","BPSSCRRJ",122,0)
 . Q
"RTN","BPSSCRRJ",123,0)
 ;
"RTN","BPSSCRRJ",124,0)
REJX ;
"RTN","BPSSCRRJ",125,0)
 D SETLN(" "),SETLN(" ")
"RTN","BPSSCRRJ",126,0)
 Q
"RTN","BPSSCRRJ",127,0)
 ;
"RTN","BPSSCRRJ",128,0)
BPSCOM ; display full opecc comments here
"RTN","BPSSCRRJ",129,0)
 N CMTDT,ZN,CDAT,CDATE,CUSER,RXFLG,TXT,CTXT,L,TXTLN
"RTN","BPSSCRRJ",130,0)
 D SETLN("OPECC COMMENTS",1,1)
"RTN","BPSSCRRJ",131,0)
 ;
"RTN","BPSSCRRJ",132,0)
 I '$O(^BPST(BPORI59,11,0)) D SETLN("  There are no comments found for this section.") G BPSCOMX
"RTN","BPSSCRRJ",133,0)
 ;
"RTN","BPSSCRRJ",134,0)
 S CMTDT=" " F  S CMTDT=$O(^BPST(BPORI59,11,"B",CMTDT),-1) Q:'CMTDT  S ZN=" " F  S ZN=$O(^BPST(BPORI59,11,"B",CMTDT,ZN),-1) Q:'ZN  D
"RTN","BPSSCRRJ",135,0)
 . S CDAT=$G(^BPST(BPORI59,11,ZN,0))
"RTN","BPSSCRRJ",136,0)
 . S CDATE=$$FMTE^XLFDT(CMTDT,"2ZMP")               ; external date/time of comment
"RTN","BPSSCRRJ",137,0)
 . S CUSER=$P($G(^VA(200,+$P(CDAT,U,2),0)),U,1)     ; user name who entered comment
"RTN","BPSSCRRJ",138,0)
 . S RXFLG=$S($P(CDAT,U,4):" (Pharm)",1:"")         ; flag that says if opecc comment should be displayed on PSO RI screen
"RTN","BPSSCRRJ",139,0)
 . S TXT=CDATE_RXFLG_" - "_$P(CDAT,U,3)_" ("_CUSER_")"
"RTN","BPSSCRRJ",140,0)
 . D WRAPTXT(TXT,76,.CTXT)
"RTN","BPSSCRRJ",141,0)
 . S L=0 F  S L=$O(CTXT(L)) Q:'L  D
"RTN","BPSSCRRJ",142,0)
 .. S TXTLN=$S(L=1:"- ",1:"   ")_$G(CTXT(L,0))
"RTN","BPSSCRRJ",143,0)
 .. D SETLN(TXTLN)
"RTN","BPSSCRRJ",144,0)
 .. Q
"RTN","BPSSCRRJ",145,0)
 . Q
"RTN","BPSSCRRJ",146,0)
 ;
"RTN","BPSSCRRJ",147,0)
BPSCOMX ;
"RTN","BPSSCRRJ",148,0)
 D SETLN(" "),SETLN(" ")
"RTN","BPSSCRRJ",149,0)
 Q
"RTN","BPSSCRRJ",150,0)
 ;
"RTN","BPSSCRRJ",151,0)
PSOCOM ; display the PSO comments from the pharmacist
"RTN","BPSSCRRJ",152,0)
 N RXCOB,COM,REJ,NUMREJ,REJIEN,REJDESC,COMDT,Z1,CDAT,CDATE,CUSER,TXT,CTXT,L,TXTLN
"RTN","BPSSCRRJ",153,0)
 ;
"RTN","BPSSCRRJ",154,0)
 S RXCOB=+$P($G(^BPST(BPORI59,0)),U,14) I 'RXCOB S RXCOB=1
"RTN","BPSSCRRJ",155,0)
 D REJCOM^PSOREJU4(RXIEN,RXFIL,RXCOB,.COM)     ; build the PSO comments array for this Rx/fill/cob (ICR# 6227)
"RTN","BPSSCRRJ",156,0)
 ;
"RTN","BPSSCRRJ",157,0)
 D SETLN("PHARMACIST COMMENTS",1,1)
"RTN","BPSSCRRJ",158,0)
 ;
"RTN","BPSSCRRJ",159,0)
 S REJ="" F NUMREJ=0:1 S REJ=$O(COM(REJ)) Q:REJ=""     ; count the number of reject codes that have PSO comments
"RTN","BPSSCRRJ",160,0)
 I 'NUMREJ D SETLN("  There are no comments found for this section.") G PSOCOMX
"RTN","BPSSCRRJ",161,0)
 ;
"RTN","BPSSCRRJ",162,0)
 S REJ="" F  S REJ=$O(COM(REJ)) Q:REJ=""  D
"RTN","BPSSCRRJ",163,0)
 . ;
"RTN","BPSSCRRJ",164,0)
 . ; if there are 2 or more reject codes that have comments, then display the reject code/description here
"RTN","BPSSCRRJ",165,0)
 . I NUMREJ>1 D
"RTN","BPSSCRRJ",166,0)
 .. S REJIEN=+$O(^BPSF(9002313.93,"B",REJ,""),-1)      ; reject code internal IEN
"RTN","BPSSCRRJ",167,0)
 .. S REJDESC=$P($G(^BPSF(9002313.93,REJIEN,0)),U,2)   ; reject description
"RTN","BPSSCRRJ",168,0)
 .. D SETLN(REJ_" - "_REJDESC)
"RTN","BPSSCRRJ",169,0)
 .. Q
"RTN","BPSSCRRJ",170,0)
 . ;
"RTN","BPSSCRRJ",171,0)
 . S COMDT=" " F  S COMDT=$O(COM(REJ,COMDT),-1) Q:'COMDT  S Z1=" " F  S Z1=$O(COM(REJ,COMDT,Z1),-1) Q:'Z1  D
"RTN","BPSSCRRJ",172,0)
 .. S CDAT=$G(COM(REJ,COMDT,Z1))
"RTN","BPSSCRRJ",173,0)
 .. S CDATE=$$FMTE^XLFDT($P(CDAT,U,1),"2ZMP")
"RTN","BPSSCRRJ",174,0)
 .. S CUSER=$P($G(^VA(200,+$P(CDAT,U,2),0)),U,1)
"RTN","BPSSCRRJ",175,0)
 .. S TXT=CDATE_" - "_$P(CDAT,U,3)_" ("_CUSER_")"
"RTN","BPSSCRRJ",176,0)
 .. D WRAPTXT(TXT,76,.CTXT)
"RTN","BPSSCRRJ",177,0)
 .. S L=0 F  S L=$O(CTXT(L)) Q:'L  D
"RTN","BPSSCRRJ",178,0)
 ... S TXTLN=$S(L=1:"- ",1:"   ")_$G(CTXT(L,0))
"RTN","BPSSCRRJ",179,0)
 ... D SETLN(TXTLN)
"RTN","BPSSCRRJ",180,0)
 ... Q
"RTN","BPSSCRRJ",181,0)
 .. Q
"RTN","BPSSCRRJ",182,0)
 . ;
"RTN","BPSSCRRJ",183,0)
 . ; if there are more reject codes, display a blank line here before the next reject code
"RTN","BPSSCRRJ",184,0)
 . I $O(COM(REJ))'="" D SETLN(" ")
"RTN","BPSSCRRJ",185,0)
 . Q
"RTN","BPSSCRRJ",186,0)
 ;
"RTN","BPSSCRRJ",187,0)
PSOCOMX ;
"RTN","BPSSCRRJ",188,0)
 D SETLN(" "),SETLN(" ")
"RTN","BPSSCRRJ",189,0)
 Q
"RTN","BPSSCRRJ",190,0)
 ;
"RTN","BPSSCRRJ",191,0)
INS ; gather and show insurance information
"RTN","BPSSCRRJ",192,0)
 N BPSINS,IENS,INSNAME,RXCOB,BPSPOL,BPSEFDT
"RTN","BPSSCRRJ",193,0)
 S BPSINS=+$$GET1^DIQ(9002313.59,BPORI59,901,"I") I 'BPSINS S BPSINS=1
"RTN","BPSSCRRJ",194,0)
 S IENS=BPSINS_","_BPORI59_","
"RTN","BPSSCRRJ",195,0)
 S RXCOB=+$P($G(^BPST(BPORI59,0)),U,14) I 'RXCOB S RXCOB=1
"RTN","BPSSCRRJ",196,0)
 ;
"RTN","BPSSCRRJ",197,0)
 S INSNAME=$$LJ^XLFSTR($$GET1^DIQ(9002313.59902,IENS,902.24),32)
"RTN","BPSSCRRJ",198,0)
 I RXCOB=2 S INSNAME=INSNAME_"Coord. Of Benefits: SECONDARY"
"RTN","BPSSCRRJ",199,0)
 S BPSPOL=+$$GET1^DIQ(9002313.59902,IENS,902.35,"I")                ; pt insurance 2.312 subfile ien
"RTN","BPSSCRRJ",200,0)
 S BPSEFDT=$S(BPSPOL:+$P($G(^DPT(DFN,.312,BPSPOL,0)),U,8)\1,1:"")   ; policy effective date
"RTN","BPSSCRRJ",201,0)
 I BPSEFDT S BPSEFDT=$$FMTE^XLFDT(BPSEFDT,"5DZ")                    ; external policy effective date
"RTN","BPSSCRRJ",202,0)
 ;
"RTN","BPSSCRRJ",203,0)
 D SETLN("INSURANCE Information",1,1)
"RTN","BPSSCRRJ",204,0)
 D SETLN("Insurance      : "_INSNAME)
"RTN","BPSSCRRJ",205,0)
 D SETLN("Contact        : "_$$GET1^DIQ(9002313.59902,IENS,902.26))
"RTN","BPSSCRRJ",206,0)
 D SETLN("BIN            : "_$$GET1^DIQ(9002313.59902,IENS,902.03))
"RTN","BPSSCRRJ",207,0)
 D SETLN("PCN            : "_$$GET1^DIQ(9002313.59902,IENS,902.04))
"RTN","BPSSCRRJ",208,0)
 D SETLN("Group Number   : "_$$GET1^DIQ(9002313.59902,IENS,902.05))
"RTN","BPSSCRRJ",209,0)
 D SETLN("Cardholder ID  : "_$$GET1^DIQ(9002313.59902,IENS,902.06))
"RTN","BPSSCRRJ",210,0)
 D SETLN("Effective Date : "_BPSEFDT)
"RTN","BPSSCRRJ",211,0)
 ;
"RTN","BPSSCRRJ",212,0)
INSX ;
"RTN","BPSSCRRJ",213,0)
 D SETLN(" "),SETLN(" ")
"RTN","BPSSCRRJ",214,0)
 Q
"RTN","BPSSCRRJ",215,0)
 ;
"RTN","BPSSCRRJ",216,0)
WRAPTXT(X,DIWR,RET) ; wrap text in variable X with right margin DIWR, return in array RET
"RTN","BPSSCRRJ",217,0)
 N %,DIW,DIWF,DIWI,DIWL,DIWT,DIWTC,DIWX,DN,I,Z
"RTN","BPSSCRRJ",218,0)
 K ^UTILITY($J,"W"),RET
"RTN","BPSSCRRJ",219,0)
 S DIWL=1
"RTN","BPSSCRRJ",220,0)
 D ^DIWP
"RTN","BPSSCRRJ",221,0)
 M RET=^UTILITY($J,"W",1)
"RTN","BPSSCRRJ",222,0)
 K ^UTILITY($J,"W")
"RTN","BPSSCRRJ",223,0)
WRAPX ;
"RTN","BPSSCRRJ",224,0)
 Q
"RTN","BPSSCRRJ",225,0)
 ;
"RTN","BPSSCRRJ",226,0)
HELP ; -- help code
"RTN","BPSSCRRJ",227,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","BPSSCRRJ",228,0)
 Q
"RTN","BPSSCRRJ",229,0)
 ;
"RTN","BPSSCRRJ",230,0)
EXIT ; -- exit code
"RTN","BPSSCRRJ",231,0)
 K ^TMP("BPSSCRRJ",$J),^TMP("PSOPI",$J)
"RTN","BPSSCRRJ",232,0)
 Q
"RTN","BPSSCRRJ",233,0)
 ;
"RTN","BPSSCRRJ",234,0)
SETLN(TEXT,REV,UND,HIG) ; set a line into the ListMan array
"RTN","BPSSCRRJ",235,0)
 I $G(TEXT)="" S TEXT=" "
"RTN","BPSSCRRJ",236,0)
 I $L(TEXT)>80 S TEXT=$E(TEXT,1,80)
"RTN","BPSSCRRJ",237,0)
 S LINE=LINE+1
"RTN","BPSSCRRJ",238,0)
 D SET^VALM10(LINE,TEXT)
"RTN","BPSSCRRJ",239,0)
 S VALMCNT=LINE
"RTN","BPSSCRRJ",240,0)
 ;
"RTN","BPSSCRRJ",241,0)
 I $G(REV) D  G SETLNX
"RTN","BPSSCRRJ",242,0)
 . D CNTRL^VALM10(LINE,1,$L(TEXT),IORVON,IOINORM)
"RTN","BPSSCRRJ",243,0)
 . I $G(UND) D CNTRL^VALM10(LINE,$L(TEXT)+1,80,IOUON,IOINORM)
"RTN","BPSSCRRJ",244,0)
 . Q
"RTN","BPSSCRRJ",245,0)
 ;
"RTN","BPSSCRRJ",246,0)
 I $G(UND) D CNTRL^VALM10(LINE,1,80,IOUON,IOINORM)
"RTN","BPSSCRRJ",247,0)
 ;
"RTN","BPSSCRRJ",248,0)
 I $G(HIG) D CNTRL^VALM10(LINE,HIG,80,IOINHI_$S($G(UND):IOUON,1:""),IOINORM)
"RTN","BPSSCRRJ",249,0)
 ;
"RTN","BPSSCRRJ",250,0)
SETLNX ;
"RTN","BPSSCRRJ",251,0)
 Q
"RTN","BPSSCRRJ",252,0)
 ;
"RTN","BPSSCRRJ",253,0)
HDR ; -- header code
"RTN","BPSSCRRJ",254,0)
 S VALMHDR(1)=$$DVINFO(RXIEN,RXFIL)          ; division, npi, ncpdp data
"RTN","BPSSCRRJ",255,0)
 S VALMHDR(2)=$$PTINFO(RXIEN)                ; Patient data
"RTN","BPSSCRRJ",256,0)
 S VALMHDR(3)=$$RXINFO1(RXIEN,RXFIL)         ; Rx data part 1
"RTN","BPSSCRRJ",257,0)
 S VALMHDR(4)=$$RXINFO2(RXIEN,RXFIL)         ; Rx data part 2
"RTN","BPSSCRRJ",258,0)
 Q
"RTN","BPSSCRRJ",259,0)
 ;
"RTN","BPSSCRRJ",260,0)
DVINFO(RX,RFL) ; header division data
"RTN","BPSSCRRJ",261,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","BPSSCRRJ",262,0)
 ;       (o) RFL  - Refill #
"RTN","BPSSCRRJ",263,0)
 N DVIEN,DVINFO,NCPNPI
"RTN","BPSSCRRJ",264,0)
 S DVINFO="Division : "_$$GET1^DIQ(9002313.59,BPORI59,11)     ; Pharmacy Division name from BPS Transaction
"RTN","BPSSCRRJ",265,0)
 ;Display both NPI and NCPDP numbers
"RTN","BPSSCRRJ",266,0)
 S DVIEN=+$$RXSITE^PSOBPSUT(RX,RFL)                           ; ICR# 4701
"RTN","BPSSCRRJ",267,0)
 S NCPNPI=$$DIVNCPDP^BPSBUTL(DVIEN)
"RTN","BPSSCRRJ",268,0)
 S $E(DVINFO,33)="NPI: "_$P(NCPNPI,U,2)
"RTN","BPSSCRRJ",269,0)
 S $E(DVINFO,59)="NCPDP: "_$P(NCPNPI,U,1)
"RTN","BPSSCRRJ",270,0)
 Q DVINFO
"RTN","BPSSCRRJ",271,0)
 ;
"RTN","BPSSCRRJ",272,0)
PTINFO(RX) ; header patient data
"RTN","BPSSCRRJ",273,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","BPSSCRRJ",274,0)
 N DFN,VADM,PTINFO,SSN4
"RTN","BPSSCRRJ",275,0)
 S DFN=+$P($G(^BPST(BPORI59,0)),U,6)
"RTN","BPSSCRRJ",276,0)
 D DEM^VADPT S SSN4=$P($G(VADM(2)),U,2)
"RTN","BPSSCRRJ",277,0)
 S PTINFO="Patient  : "_$E($G(VADM(1)),1,24)_"("_$E(SSN4,$L(SSN4)-3,$L(SSN4))_")"
"RTN","BPSSCRRJ",278,0)
 S PTINFO=PTINFO_"  Sex: "_$P($G(VADM(5)),U,1)
"RTN","BPSSCRRJ",279,0)
 S $E(PTINFO,61)="DOB: "_$P($G(VADM(3)),U,2)_"("_$P($G(VADM(4)),U,1)_")"
"RTN","BPSSCRRJ",280,0)
 Q PTINFO
"RTN","BPSSCRRJ",281,0)
 ;
"RTN","BPSSCRRJ",282,0)
RXINFO1(RX,FILL) ; header Rx data part 1
"RTN","BPSSCRRJ",283,0)
 N RXINFO,RXDOS,PSOET
"RTN","BPSSCRRJ",284,0)
 D GETDAT^BPSBUTL(RX,FILL,,.RXDOS) ; Get Date of Service from BPS CLAIM field 401
"RTN","BPSSCRRJ",285,0)
 S RXINFO="Rx#      : "_$$RXNUM^BPSSCRU2(RX)_"/"_FILL
"RTN","BPSSCRRJ",286,0)
 S PSOET=$$NB^BPSSCR03(BPORI59)         ; TRI/CVA non-billable entry
"RTN","BPSSCRRJ",287,0)
 S $E(RXINFO,27)="ECME#: "_$S(PSOET:"",1:$P($$CLAIM^BPSBUTL(RX,FILL),U,6))
"RTN","BPSSCRRJ",288,0)
 S $E(RXINFO,49)="Date of Service: "_$S(PSOET:"",1:$$FMTE^XLFDT(RXDOS)) ; Use DOS from BPS Claims field 401
"RTN","BPSSCRRJ",289,0)
 Q RXINFO
"RTN","BPSSCRRJ",290,0)
 ;
"RTN","BPSSCRRJ",291,0)
RXINFO2(RX,FILL) ; header Rx data part 2
"RTN","BPSSCRRJ",292,0)
 N RXINFO,DRG,CMOP
"RTN","BPSSCRRJ",293,0)
 S DRG=+$$RXAPI1^BPSUTIL1(RX,6,"I")                         ; drug ien
"RTN","BPSSCRRJ",294,0)
 S CMOP=$$DRUGDIE^BPSUTIL1(DRG,213,"I")                     ; cmop dispense field in the Drug file (0/1)
"RTN","BPSSCRRJ",295,0)
 S RXINFO=$S(CMOP:"CMOP ",1:"")_"Drug"
"RTN","BPSSCRRJ",296,0)
 S $E(RXINFO,10)=": "_$E($$RXAPI1^BPSUTIL1(RX,6),1,43)      ; drug name
"RTN","BPSSCRRJ",297,0)
 ;
"RTN","BPSSCRRJ",298,0)
 S $E(RXINFO,56)="NDC Code: "_$$GETNDC^PSONDCUT(RX,FILL)    ; ICR# 4705
"RTN","BPSSCRRJ",299,0)
 Q RXINFO
"RTN","BPSSCRRJ",300,0)
 ;
"RTN","BPSSCRRJ",301,0)
VER ; selection of View ePharmacy Rx from the BPS OPECC reject information screen
"RTN","BPSSCRRJ",302,0)
 N BPSVRX
"RTN","BPSSCRRJ",303,0)
 D FULL^VALM1
"RTN","BPSSCRRJ",304,0)
 S BPSVRX("RXIEN")=$G(RXIEN)
"RTN","BPSSCRRJ",305,0)
 S BPSVRX("FILL#")=$G(RXFIL)
"RTN","BPSSCRRJ",306,0)
 D ^BPSVRX
"RTN","BPSSCRRJ",307,0)
VERX ;
"RTN","BPSSCRRJ",308,0)
 S VALMBCK="R"
"RTN","BPSSCRRJ",309,0)
 Q
"RTN","BPSSCRRJ",310,0)
 ;
"RTN","BPSSCRRJ",311,0)
VIEW ; action for View Rx on the BPS OPECC reject information screen
"RTN","BPSSCRRJ",312,0)
 N VALMCNT,LINE,VALMHDR,TITLE,PSOVDA,DA,PS,DFN,PSODFN
"RTN","BPSSCRRJ",313,0)
 S TITLE=VALM("TITLE")
"RTN","BPSSCRRJ",314,0)
 S (PSOVDA,DA)=RXIEN,PS="REJECT"
"RTN","BPSSCRRJ",315,0)
 ;
"RTN","BPSSCRRJ",316,0)
 ; - DO structure used to avoid losing key variables in this routine
"RTN","BPSSCRRJ",317,0)
 D
"RTN","BPSSCRRJ",318,0)
 . N RXIEN,RXFIL,BPORI59,TITLE
"RTN","BPSSCRRJ",319,0)
 . D DP^PSORXVW                ; ICR# 4711
"RTN","BPSSCRRJ",320,0)
 . Q
"RTN","BPSSCRRJ",321,0)
 ;
"RTN","BPSSCRRJ",322,0)
 S VALMBCK="R",VALM("TITLE")=TITLE
"RTN","BPSSCRRJ",323,0)
 Q
"RTN","BPSSCRRJ",324,0)
 ;
"RTN","BPSSCRRJ",325,0)
MP(RXIEN,RXFIL) ; entry point for Medication Profile action on OPECC reject information screen
"RTN","BPSSCRRJ",326,0)
 N VALMCNT,LINE,VALMHDR,DFN,PSODFN,BPORI59
"RTN","BPSSCRRJ",327,0)
 D MP^PSOREJU4(RXIEN,RXFIL)     ; ICR# 6228
"RTN","BPSSCRRJ",328,0)
 S VALMBCK="R"
"RTN","BPSSCRRJ",329,0)
 Q
"RTN","BPSSCRRJ",330,0)
 ;
"RTN","BPSSCRRJ",331,0)
PI(RXIEN,RXFIL) ; entry point for Patient Information action on OPECC reject information screen
"RTN","BPSSCRRJ",332,0)
 N VALMCNT,LINE,VALMHDR,DFN,PSODFN,BPORI59
"RTN","BPSSCRRJ",333,0)
 D PI^PSOREJU4(RXIEN,RXFIL)     ; ICR# 6228
"RTN","BPSSCRRJ",334,0)
 S VALMBCK="R"
"RTN","BPSSCRRJ",335,0)
 Q
"RTN","BPSSCRRJ",336,0)
 ;
"RTN","BPSSCRRS")
0^30^B80029514
"RTN","BPSSCRRS",1,0)
BPSSCRRS ;BHAM ISC/SS - ECME SCREEN RESUBMIT ;05-APR-05
"RTN","BPSSCRRS",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8,10,11,20**;JUN 2004;Build 27
"RTN","BPSSCRRS",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRRS",4,0)
 Q
"RTN","BPSSCRRS",5,0)
 ;IA 4702
"RTN","BPSSCRRS",6,0)
 ;IA 5355 for call to $$RXBILL^IBNCPUT3
"RTN","BPSSCRRS",7,0)
 ;
"RTN","BPSSCRRS",8,0)
RES ;
"RTN","BPSSCRRS",9,0)
 N BPRET,BPSARR59
"RTN","BPSSCRRS",10,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSSCRRS",11,0)
 D FULL^VALM1
"RTN","BPSSCRRS",12,0)
 W !,"Enter the line numbers for the claim(s) to be resubmitted."
"RTN","BPSSCRRS",13,0)
 S BPRET=$$ASKLINES^BPSSCRU4("Select item(s)","C",.BPSARR59,VALMAR)
"RTN","BPSSCRRS",14,0)
 I BPRET="^" S VALMBCK="R" Q
"RTN","BPSSCRRS",15,0)
 ;go thru all selected claims and try to resubmit them separately
"RTN","BPSSCRRS",16,0)
 ;update the content of the screen and display it
"RTN","BPSSCRRS",17,0)
 ;only if at least one claim was submitted successfully
"RTN","BPSSCRRS",18,0)
 I $$RESUBMIT(.BPSARR59) D REDRAW^BPSSCRUD("Updating screen for resubmitted claims...")
"RTN","BPSSCRRS",19,0)
 E  S VALMBCK="R"
"RTN","BPSSCRRS",20,0)
 Q
"RTN","BPSSCRRS",21,0)
 ;
"RTN","BPSSCRRS",22,0)
RESNRV ; entry point for action protocol for Resubmit Claim Without Reversal (BPS*1*20)
"RTN","BPSSCRRS",23,0)
 ; special variable BPRSNRV=1 when doing a resubmit w/o reversal.  The Resubmit will be done without
"RTN","BPSSCRRS",24,0)
 ; regard to current claim status
"RTN","BPSSCRRS",25,0)
 ;
"RTN","BPSSCRRS",26,0)
 N BPRET,BPSARR59,BPRSNRV
"RTN","BPSSCRRS",27,0)
 S BPRSNRV=1
"RTN","BPSSCRRS",28,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSSCRRS",29,0)
 D FULL^VALM1
"RTN","BPSSCRRS",30,0)
 W "Resubmit Claim w/o Reversal"
"RTN","BPSSCRRS",31,0)
 W !!?4,"Note: This action will resubmit claims without performing a reversal."
"RTN","BPSSCRRS",32,0)
 W !!?10,"This action should be used in instances where the payer shows the"
"RTN","BPSSCRRS",33,0)
 W !?10,"claim was reversed and VistA shows a payable claim. This action will"
"RTN","BPSSCRRS",34,0)
 W !?10,"NOT submit a reversal regardless of the current VistA claim status."
"RTN","BPSSCRRS",35,0)
 W !!,"Enter the line numbers for the claim(s) to be resubmitted w/o reversal."
"RTN","BPSSCRRS",36,0)
 S BPRET=$$ASKLINES^BPSSCRU4("Select item(s)","C",.BPSARR59,VALMAR)
"RTN","BPSSCRRS",37,0)
 I BPRET="^" S VALMBCK="R" Q
"RTN","BPSSCRRS",38,0)
 ;go thru all selected claims and try to resubmit them separately
"RTN","BPSSCRRS",39,0)
 ;update the content of the screen and display it
"RTN","BPSSCRRS",40,0)
 ;only if at least one claim was submitted successfully
"RTN","BPSSCRRS",41,0)
 I $$RESUBMIT(.BPSARR59,BPRSNRV) D REDRAW^BPSSCRUD("Updating screen for resubmitted claims...")
"RTN","BPSSCRRS",42,0)
 E  S VALMBCK="R"
"RTN","BPSSCRRS",43,0)
 Q
"RTN","BPSSCRRS",44,0)
 ;
"RTN","BPSSCRRS",45,0)
 ;/**
"RTN","BPSSCRRS",46,0)
 ;go thru all selected claims and try to resubmit them separately
"RTN","BPSSCRRS",47,0)
 ;input:
"RTN","BPSSCRRS",48,0)
 ; RXI - array with ptrs to BPS TRANSACTION file (see ASKLINES^BPSSCRU4)
"RTN","BPSSCRRS",49,0)
 ; BPRSNRV - optional flag indicating if resubmit action is a normal resubmit (default) or a resubmit w/o reversal
"RTN","BPSSCRRS",50,0)
 ;         - BPRSNRV=0  for normal resubmit (default)
"RTN","BPSSCRRS",51,0)
 ;         - BPRSNRV=1  for resubmit without a reversal
"RTN","BPSSCRRS",52,0)
 ;returns 
"RTN","BPSSCRRS",53,0)
 ; 0 - if no claims were resubmitted 
"RTN","BPSSCRRS",54,0)
 ; 1 - if at least one claim was resubmitted 
"RTN","BPSSCRRS",55,0)
RESUBMIT(RXI,BPRSNRV) ;*/
"RTN","BPSSCRRS",56,0)
 N BPRVRSED ;was successfully reversed
"RTN","BPSSCRRS",57,0)
 N BPRVNEED ;needs reversal
"RTN","BPSSCRRS",58,0)
 N BPRVWAIT ;cycles of waiting 
"RTN","BPSSCRRS",59,0)
 N BPRVRSNT ;reversal has been sent
"RTN","BPSSCRRS",60,0)
 N WHERE,DOSDATE,BILLNUM,RXIEN,RXR,BPDFN
"RTN","BPSSCRRS",61,0)
 N BP59
"RTN","BPSSCRRS",62,0)
 N UPDATFLG,BPCLTOT,BPCLTOTR,BPSRSWHR,BPSRSRRS
"RTN","BPSSCRRS",63,0)
 N BPQ,BPSCONT
"RTN","BPSSCRRS",64,0)
 N BPSTATUS,BPSCOB,BPSPCLS,BPPRIOPN
"RTN","BPSSCRRS",65,0)
 N REVCOUNT S REVCOUNT=0
"RTN","BPSSCRRS",66,0)
 N BPIFANY S BPIFANY=0
"RTN","BPSSCRRS",67,0)
 N BPINPROG S BPINPROG=0
"RTN","BPSSCRRS",68,0)
 S BPCLTOT=0 ;total for resubmitted
"RTN","BPSSCRRS",69,0)
 S BPCLTOTR=0 ;total for reversed, not resubmitted
"RTN","BPSSCRRS",70,0)
 S UPDATFLG=0
"RTN","BPSSCRRS",71,0)
 S BPRSNRV=+$G(BPRSNRV)     ; resubmit without reversal flag
"RTN","BPSSCRRS",72,0)
 S BP59="",BPQ=""
"RTN","BPSSCRRS",73,0)
 F  S BP59=$O(RXI(BP59)) Q:BP59=""  D  Q:BPQ="^"
"RTN","BPSSCRRS",74,0)
 . I BPIFANY=0 W @IOF
"RTN","BPSSCRRS",75,0)
 . S BPIFANY=1,BPQ=""
"RTN","BPSSCRRS",76,0)
 . S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSSCRRS",77,0)
 . I 'BPRSNRV W !,"You've chosen to RESUBMIT the following prescription for "_$E($$PATNAME^BPSSCRU2(BPDFN),1,13)
"RTN","BPSSCRRS",78,0)
 . I BPRSNRV W !,"You've chosen to RESUBMIT W/O REVERSAL the following Rx for "_$E($$PATNAME^BPSSCRU2(BPDFN),1,13)
"RTN","BPSSCRRS",79,0)
 . W !,@VALMAR@(+$G(RXI(BP59)),0)
"RTN","BPSSCRRS",80,0)
 . S (BPRVNEED,BPRVRSED,BPRVWAIT,BPRVRSNT)=0
"RTN","BPSSCRRS",81,0)
 . S BPQ=$$YESNO("Are you sure?(Y/N)")
"RTN","BPSSCRRS",82,0)
 . I BPQ=-1 S BPQ="^" Q
"RTN","BPSSCRRS",83,0)
 . I BPQ'=1 Q
"RTN","BPSSCRRS",84,0)
 . ;
"RTN","BPSSCRRS",85,0)
 . ; check for non-billable entry with the RER action (not allowed.  need to use regular RES)
"RTN","BPSSCRRS",86,0)
 . I $$NB^BPSSCR03(BP59),BPRSNRV D  Q
"RTN","BPSSCRRS",87,0)
 .. W !!,">> Cannot Resubmit w/o Reversal ",!,$G(@VALMAR@(+$G(RXI(BP59)),0))
"RTN","BPSSCRRS",88,0)
 .. W !," because this is a NON BILLABLE entry. Please use the RES action instead.",!
"RTN","BPSSCRRS",89,0)
 .. Q
"RTN","BPSSCRRS",90,0)
 . ;
"RTN","BPSSCRRS",91,0)
 . S RXIEN=$P(BP59,".")
"RTN","BPSSCRRS",92,0)
 . S RXR=+$E($P(BP59,".",2),1,4)
"RTN","BPSSCRRS",93,0)
 . I BPRVNEED=1&(BPRVRSED'=1) Q  ;cannot be resubmitted
"RTN","BPSSCRRS",94,0)
 . ;
"RTN","BPSSCRRS",95,0)
 . I $$RXDEL^BPSOS(+RXIEN,RXR) W !!,">> Cannot Reverse or Resubmit ",!,@VALMAR@(+$G(RXI(BP59)),0),!," because it has been deleted in Pharmacy.",! Q
"RTN","BPSSCRRS",96,0)
 . ;
"RTN","BPSSCRRS",97,0)
 . ;can't resubmit a closed claim. The user must reopen first.
"RTN","BPSSCRRS",98,0)
 . I $$CLOSED^BPSSCRU1(BP59) D  Q
"RTN","BPSSCRRS",99,0)
 . . W !!,">> Cannot Resubmit ",!,$G(@VALMAR@(+$G(RXI(BP59)),0)),!," because the claim is Closed. Reopen the claim and try again.",! Q
"RTN","BPSSCRRS",100,0)
 . ;
"RTN","BPSSCRRS",101,0)
 . S BPSTATUS=$P($$CLAIMST^BPSSCRU3(BP59),U)
"RTN","BPSSCRRS",102,0)
 . S BPSCOB=$$COB59^BPSUTIL2(BP59) ;get COB for the BPS TRANSACTION IEN
"RTN","BPSSCRRS",103,0)
 . ;
"RTN","BPSSCRRS",104,0)
 . ; check to see if any non-cancelled K# bills exist when doing a Resubmit w/o Reversal - BPS*1*20
"RTN","BPSSCRRS",105,0)
 . I BPRSNRV D  I 'BPSCONT Q
"RTN","BPSSCRRS",106,0)
 .. S BPSCONT=1                ; continue flag
"RTN","BPSSCRRS",107,0)
 .. N BPG,BPSIB,IBIFN,IB
"RTN","BPSSCRRS",108,0)
 .. S BPG=$$RXBILL^IBNCPUT3(RXIEN,RXR,$S(BPSCOB=1:"P",BPSCOB=2:"S",1:"T"),"",.BPSIB)     ; DBIA# 5355
"RTN","BPSSCRRS",109,0)
 .. S IBIFN=0 F  S IBIFN=$O(BPSIB(IBIFN)) Q:'IBIFN  D
"RTN","BPSSCRRS",110,0)
 ... S IB=$G(BPSIB(IBIFN))
"RTN","BPSSCRRS",111,0)
 ... I $P(IB,U,2)="CB"!($P(IB,U,2)="CN") Q    ; cancelled bill in AR, these are OK so quit here
"RTN","BPSSCRRS",112,0)
 ... S BPSCONT=0                              ; can't continue any longer, report on bill(s) found
"RTN","BPSSCRRS",113,0)
 ... W !!?4,"Rx# ",$$RXNUM^BPSSCRU2(RXIEN)," was previously billed."
"RTN","BPSSCRRS",114,0)
 ... W !?4,"Please review bill# ",$P(IB,U,1)," to determine if it should be cancelled."
"RTN","BPSSCRRS",115,0)
 ... W !?4,"The claim cannot be resubmitted without a reversal to ECME unless the"
"RTN","BPSSCRRS",116,0)
 ... W !?4,"existing bill is cancelled."
"RTN","BPSSCRRS",117,0)
 ... W !!?4,"Cannot submit to ECME using Resubmit Claim w/o Reversal.",!
"RTN","BPSSCRRS",118,0)
 ... Q
"RTN","BPSSCRRS",119,0)
 .. Q
"RTN","BPSSCRRS",120,0)
 . ;
"RTN","BPSSCRRS",121,0)
 . I BPSCOB<2,$$PAYABLE^BPSOSRX5(BPSTATUS),BPINPROG=0,$$PAYBLSEC^BPSUTIL2(BP59) D  S BPQ=$$PAUSE^BPSSCRRV() Q
"RTN","BPSSCRRS",122,0)
 . . W !,"The claim: ",!,$G(@VALMAR@(+$G(RXI(BP59)),0)),!,"cannot be Resubmitted if the secondary claim is payable.",!,"Please reverse the secondary claim first."
"RTN","BPSSCRRS",123,0)
 . ;
"RTN","BPSSCRRS",124,0)
 . ;If this is a secondary, make sure Primary is either Payable or Closed.
"RTN","BPSSCRRS",125,0)
 . S BPPRIOPN=0 I BPSCOB=2 D  Q:BPPRIOPN=1
"RTN","BPSSCRRS",126,0)
 . . ;Get Primary claim status
"RTN","BPSSCRRS",127,0)
 . . S BPSPCLS=$$FINDECLM^BPSPRRX5(RXIEN,RXR,1)
"RTN","BPSSCRRS",128,0)
 . . I $P(BPSPCLS,U)>1 D
"RTN","BPSSCRRS",129,0)
 . . . Q:$$CLOSED^BPSSCRU1($P(BPSPCLS,U,2))
"RTN","BPSSCRRS",130,0)
 . . . W !,"The secondary claim cannot be Resubmitted unless the primary is either payable",!,"or closed. Please resubmit or close the primary claim first."
"RTN","BPSSCRRS",131,0)
 . . . S BPPRIOPN=1
"RTN","BPSSCRRS",132,0)
 . ;
"RTN","BPSSCRRS",133,0)
 . I (BPSTATUS="IN PROGRESS")!(BPSTATUS="SCHEDULED") S BPINPROG=1
"RTN","BPSSCRRS",134,0)
 . I BPINPROG=1 D  I $$YESNO^BPSSCRRS("Do you want to proceed?(Y/N)")=0 S BPQ="^" Q
"RTN","BPSSCRRS",135,0)
 . . W !,"The claim is in progress. The request will be scheduled and processed after"
"RTN","BPSSCRRS",136,0)
 . . W !,"the previous request(s) are completed. Please be aware that the result of "
"RTN","BPSSCRRS",137,0)
 . . W !,"the resubmit depends on the payer's response to the prior incomplete requests."
"RTN","BPSSCRRS",138,0)
 . ;
"RTN","BPSSCRRS",139,0)
 . S DOSDATE=$$DOSDATE(RXIEN,RXR)
"RTN","BPSSCRRS",140,0)
 . ;
"RTN","BPSSCRRS",141,0)
 . ; set the ECME BWHERE value and the correct reversal reason value
"RTN","BPSSCRRS",142,0)
 . I BPRSNRV S BPSRSWHR="ERWV",BPSRSRRS=""
"RTN","BPSSCRRS",143,0)
 . I 'BPRSNRV,$$NB^BPSSCR03(BP59) S BPSRSWHR="ERNB",BPSRSRRS=""
"RTN","BPSSCRRS",144,0)
 . I 'BPRSNRV,'$$NB^BPSSCR03(BP59) S BPSRSWHR="ERES",BPSRSRRS="ECME RESUBMIT"
"RTN","BPSSCRRS",145,0)
 . ;
"RTN","BPSSCRRS",146,0)
 . S BILLNUM=$$EN^BPSNCPDP(RXIEN,RXR,DOSDATE,BPSRSWHR,"",BPSRSRRS,,,,,BPSCOB)
"RTN","BPSSCRRS",147,0)
 . ;
"RTN","BPSSCRRS",148,0)
 . ;print return value message
"RTN","BPSSCRRS",149,0)
 . W !!
"RTN","BPSSCRRS",150,0)
 . W:+BILLNUM>0 $S(+BILLNUM=10:"Reversal but no Resubmit:",1:"Not Processed:"),!,"  "
"RTN","BPSSCRRS",151,0)
 . ;Change Return Message for SC/EI
"RTN","BPSSCRRS",152,0)
 . S:$P(BILLNUM,U,2)="NEEDS SC DETERMINATION" $P(BILLNUM,U,2)="NEEDS SC/EI DETERMINATION"
"RTN","BPSSCRRS",153,0)
 . W $P(BILLNUM,U,2)
"RTN","BPSSCRRS",154,0)
 . ;0 Prescription/Fill successfully submitted to ECME for claims processing
"RTN","BPSSCRRS",155,0)
 . ;1 ECME did not submit prescription/fill
"RTN","BPSSCRRS",156,0)
 . ;2 IB says prescription/fill is not ECME billable or the data returned from IB is not valid
"RTN","BPSSCRRS",157,0)
 . ;3 ECME closed the claim but did not submit it to the payer
"RTN","BPSSCRRS",158,0)
 . ;4 Unable to queue the ECME claim
"RTN","BPSSCRRS",159,0)
 . ;5 Invalid input
"RTN","BPSSCRRS",160,0)
 . ;10 Reversal but no resubmit
"RTN","BPSSCRRS",161,0)
 . I +BILLNUM=0 D 
"RTN","BPSSCRRS",162,0)
 . . D ECMEACT^PSOBPSU1(+RXIEN,+RXR,"Claim resubmitted to 3rd party payer: ECME USER's SCREEN-"_$S(BPSCOB=1:"p",BPSCOB=2:"s",1:"")_$$INSNAME^BPSSCRU6(BP59))
"RTN","BPSSCRRS",163,0)
 . . S UPDATFLG=1,BPCLTOT=BPCLTOT+1
"RTN","BPSSCRRS",164,0)
 . I +BILLNUM=10 D 
"RTN","BPSSCRRS",165,0)
 . . D ECMEACT^PSOBPSU1(+RXIEN,+RXR,"Claim reversed but not resubmitted: ECME USER's SCREEN-"_$S(BPSCOB=1:"p",BPSCOB=2:"s",1:"")_$$INSNAME^BPSSCRU6(BP59))
"RTN","BPSSCRRS",166,0)
 . . S UPDATFLG=1,BPCLTOTR=BPCLTOTR+1
"RTN","BPSSCRRS",167,0)
 . ;
"RTN","BPSSCRRS",168,0)
 . I +BILLNUM=2 S UPDATFLG=1    ; bps*1*20. Update the screen in the event of non-billable result.
"RTN","BPSSCRRS",169,0)
 . Q
"RTN","BPSSCRRS",170,0)
 ;
"RTN","BPSSCRRS",171,0)
 W:BPIFANY=0 !,"No eligible items selected."
"RTN","BPSSCRRS",172,0)
 W !,BPCLTOT," claim",$S(BPCLTOT'=1:"s have",1:" has")," been resubmitted.",!
"RTN","BPSSCRRS",173,0)
 W:BPCLTOTR>0 !,BPCLTOTR," claim",$S(BPCLTOTR'=1:"s have",1:" has")," been reversed but not resubmitted.",!
"RTN","BPSSCRRS",174,0)
 D PAUSE^VALM1
"RTN","BPSSCRRS",175,0)
 Q UPDATFLG
"RTN","BPSSCRRS",176,0)
 ;
"RTN","BPSSCRRS",177,0)
 ; Ask
"RTN","BPSSCRRS",178,0)
 ; Input:
"RTN","BPSSCRRS",179,0)
 ;  BPQSTR - question
"RTN","BPSSCRRS",180,0)
 ;  BPDFL - default answer
"RTN","BPSSCRRS",181,0)
 ; Output: 
"RTN","BPSSCRRS",182,0)
 ; 1 YES
"RTN","BPSSCRRS",183,0)
 ; 0 NO
"RTN","BPSSCRRS",184,0)
 ; -1 if cancelled
"RTN","BPSSCRRS",185,0)
YESNO(BPQSTR,BPDFL) ; Default - YES
"RTN","BPSSCRRS",186,0)
 N DIR,Y,DUOUT
"RTN","BPSSCRRS",187,0)
 S DIR(0)="Y"
"RTN","BPSSCRRS",188,0)
 S DIR("A")=BPQSTR
"RTN","BPSSCRRS",189,0)
 S:$L($G(BPDFL)) DIR("B")=BPDFL
"RTN","BPSSCRRS",190,0)
 D ^DIR
"RTN","BPSSCRRS",191,0)
 Q $S($G(DUOUT)!$G(DUOUT)!(Y="^"):-1,1:Y)
"RTN","BPSSCRRS",192,0)
 ;
"RTN","BPSSCRRS",193,0)
DOSDATE(RXIEN,RXR) ;
"RTN","BPSSCRRS",194,0)
 ; Function that returns the date of service
"RTN","BPSSCRRS",195,0)
 ; Input
"RTN","BPSSCRRS",196,0)
 ;   RXIEN - IEN in file #52
"RTN","BPSSCRRS",197,0)
 ;   RXR - refill number
"RTN","BPSSCRRS",198,0)
 ; Returns:
"RTN","BPSSCRRS",199,0)
 ;   Date of Service
"RTN","BPSSCRRS",200,0)
 N BPDOS,BPDT,TODAY
"RTN","BPSSCRRS",201,0)
 ;
"RTN","BPSSCRRS",202,0)
 ; Try release date
"RTN","BPSSCRRS",203,0)
 S BPDOS=$$RXRLDT^PSOBPSUT($G(RXIEN),$G(RXR))
"RTN","BPSSCRRS",204,0)
 ;
"RTN","BPSSCRRS",205,0)
 ; If there is no release date, use the current day 
"RTN","BPSSCRRS",206,0)
 S TODAY=$$DT^XLFDT
"RTN","BPSSCRRS",207,0)
 I BPDOS=""!(BPDOS>TODAY) S BPDOS=TODAY
"RTN","BPSSCRRS",208,0)
 Q BPDOS\1
"RTN","BPSSCRRS",209,0)
 ;
"RTN","BPSSCRRS",210,0)
 ;Function to get the Date of Service formatted for display
"RTN","BPSSCRRS",211,0)
 ;  note: functionality replaces FILLDATE() which has been retired.
"RTN","BPSSCRRS",212,0)
 ;input:
"RTN","BPSSCRRS",213,0)
 ;  RXIEN - IEN in file #52
"RTN","BPSSCRRS",214,0)
 ;  RXR   - refill number
"RTN","BPSSCRRS",215,0)
 ;returns:
"RTN","BPSSCRRS",216,0)
 ;  date of service or empty date if failure
"RTN","BPSSCRRS",217,0)
DOSDT(RXIEN,RXR) ;
"RTN","BPSSCRRS",218,0)
 N DOSDT
"RTN","BPSSCRRS",219,0)
 S DOSDT=$$DOSDATE(RXIEN,RXR)
"RTN","BPSSCRRS",220,0)
 I $L(DOSDT)'=7 Q "  /  "
"RTN","BPSSCRRS",221,0)
 Q $E(DOSDT,4,5)_"/"_$E(DOSDT,6,7)
"RTN","BPSSCRRS",222,0)
 ;
"RTN","BPSSCRRV")
0^24^B43226039
"RTN","BPSSCRRV",1,0)
BPSSCRRV ;BHAM ISC/SS - ECME SCREEN REVERSE CLAIM ;05-APR-05
"RTN","BPSSCRRV",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,6,7,8,20**;JUN 2004;Build 27
"RTN","BPSSCRRV",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRRV",4,0)
 Q
"RTN","BPSSCRRV",5,0)
 ;IA 4702
"RTN","BPSSCRRV",6,0)
 ;
"RTN","BPSSCRRV",7,0)
REV ;entry point for "Reverse" menu item
"RTN","BPSSCRRV",8,0)
 N BPRET,BPSARR59
"RTN","BPSSCRRV",9,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSSCRRV",10,0)
 D FULL^VALM1
"RTN","BPSSCRRV",11,0)
 W !,"Enter the line numbers for the Payable claim(s) to be Reversed."
"RTN","BPSSCRRV",12,0)
 S BPRET=$$ASKLINES^BPSSCRU4("Select item(s)","C",.BPSARR59,VALMAR)
"RTN","BPSSCRRV",13,0)
 I BPRET="^" S VALMBCK="R" Q
"RTN","BPSSCRRV",14,0)
 ;reverse selected lines
"RTN","BPSSCRRV",15,0)
 ;update the content of the screen and display it
"RTN","BPSSCRRV",16,0)
 ;only if at least one reversal was submitted successfully
"RTN","BPSSCRRV",17,0)
 I $$RVLINES(.BPSARR59)>0 D REDRAW^BPSSCRUD("Updating screen for reversed claims...")
"RTN","BPSSCRRV",18,0)
 E  S VALMBCK="R"
"RTN","BPSSCRRV",19,0)
 Q
"RTN","BPSSCRRV",20,0)
 ;/**
"RTN","BPSSCRRV",21,0)
 ;Reverse selected lines
"RTN","BPSSCRRV",22,0)
 ;input: 
"RTN","BPSSCRRV",23,0)
 ; BP59ARR(BP59)="line# in LM array "
"RTN","BPSSCRRV",24,0)
 ;output:
"RTN","BPSSCRRV",25,0)
 ; REVTOTAL - total number of claims for whose the reversal was submitted successfully  
"RTN","BPSSCRRV",26,0)
RVLINES(BP59ARR) ;*/
"RTN","BPSSCRRV",27,0)
 N BP59,REVTOTAL,BPRVREAS,BPDFN,BPQ,IBD,BPRXRF
"RTN","BPSSCRRV",28,0)
 N BPINPROG S BPINPROG=0
"RTN","BPSSCRRV",29,0)
 N BPIFANY S BPIFANY=0
"RTN","BPSSCRRV",30,0)
 N BPSTATS
"RTN","BPSSCRRV",31,0)
 S REVTOTAL=0,BPQ=""
"RTN","BPSSCRRV",32,0)
 S BP59="" F  S BP59=$O(BP59ARR(BP59)) Q:BP59=""  D  Q:BPQ="^"
"RTN","BPSSCRRV",33,0)
 . I BPIFANY=0 W @IOF
"RTN","BPSSCRRV",34,0)
 . S BPIFANY=1,BPQ=""
"RTN","BPSSCRRV",35,0)
 . ;
"RTN","BPSSCRRV",36,0)
 . ; don't allow reverse for non-billable entries
"RTN","BPSSCRRV",37,0)
 . I $$NB^BPSSCR03(BP59) D  S BPQ=$$PAUSE() Q
"RTN","BPSSCRRV",38,0)
 .. W !,"The claim: ",!,$G(@VALMAR@(+$G(BP59ARR(BP59)),0)),!,"Entry is NON BILLABLE.  There is no claim to reverse."
"RTN","BPSSCRRV",39,0)
 .. Q
"RTN","BPSSCRRV",40,0)
 . ;
"RTN","BPSSCRRV",41,0)
 . ; can't reverse a closed claim. The user must reopen first.
"RTN","BPSSCRRV",42,0)
 . I $$CLOSED02^BPSSCR03($P($G(^BPST(BP59,0)),U,4))  D  S BPQ=$$PAUSE() Q
"RTN","BPSSCRRV",43,0)
 . . W !,"The claim: ",!,$G(@VALMAR@(+$G(BP59ARR(BP59)),0)),!,"is Closed and cannot be Reversed. Reopen the claim and try again."
"RTN","BPSSCRRV",44,0)
 . S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSSCRRV",45,0)
 . S BPSTATS=$P($$CLAIMST^BPSSCRU3(BP59),U)
"RTN","BPSSCRRV",46,0)
 . I (BPSTATS="IN PROGRESS")!(BPSTATS="SCHEDULED") S BPINPROG=1
"RTN","BPSSCRRV",47,0)
 . I BPINPROG=0,'$$PAYABLE^BPSOSRX5(BPSTATS) D  S BPQ=$$PAUSE() Q
"RTN","BPSSCRRV",48,0)
 . . W !,"The claim: ",!,$G(@VALMAR@(+$G(BP59ARR(BP59)),0)),!,"is NOT Payable and cannot be Reversed."
"RTN","BPSSCRRV",49,0)
 . I BPINPROG=0,$P($G(^BPST(BP59,0)),U,14)<2,$$PAYBLSEC^BPSUTIL2(BP59) D  S BPQ=$$PAUSE() Q
"RTN","BPSSCRRV",50,0)
 . . W !,"The claim: ",!,$G(@VALMAR@(+$G(BP59ARR(BP59)),0)),!,"cannot be Reversed if the secondary claim is payable.",!,"Please reverse the secondary claim first."
"RTN","BPSSCRRV",51,0)
 . I BPINPROG=1 D  S BPQ=$$YESNO^BPSSCRRS("Do you want to proceed?(Y/N)") I BPQ<1 S BPQ="^" Q
"RTN","BPSSCRRV",52,0)
 . . W !,"The claim you've chosen to REVERSE for "_$E($$PATNAME^BPSSCRU2(BPDFN),1,13)
"RTN","BPSSCRRV",53,0)
 . . W !,$G(@VALMAR@(+$G(BP59ARR(BP59)),0))
"RTN","BPSSCRRV",54,0)
 . . W !,"is in progress. The reversal request will be scheduled and processed after"
"RTN","BPSSCRRV",55,0)
 . . W !,"the previous request(s) are completed. Please be aware that the result of "
"RTN","BPSSCRRV",56,0)
 . . W !,"the reversal depends on the payer's response to the prior incomplete requests."
"RTN","BPSSCRRV",57,0)
 . I BPINPROG=0 D
"RTN","BPSSCRRV",58,0)
 . . W !,"You've chosen to REVERSE the following prescription for "_$E($$PATNAME^BPSSCRU2(BPDFN),1,13)
"RTN","BPSSCRRV",59,0)
 . . W !,$G(@VALMAR@(+$G(BP59ARR(BP59)),0))
"RTN","BPSSCRRV",60,0)
 . F  S BPRVREAS=$$COMMENT^BPSSCRCL("Enter REQUIRED REVERSAL REASON",60) Q:BPRVREAS="^"  Q:($L(BPRVREAS)>0)&(BPRVREAS'="^")&('(BPRVREAS?1" "." "))  D
"RTN","BPSSCRRV",61,0)
 . . W !,"Please provide the reason or enter ^ to abandon the reversal."
"RTN","BPSSCRRV",62,0)
 . I BPRVREAS["^" W !,"The claim: ",!,$G(@VALMAR@(+$G(BP59ARR(BP59)),0)),!,"was NOT reversed!" S BPQ=$$PAUSE() Q
"RTN","BPSSCRRV",63,0)
 . S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSSCRRV",64,0)
 . I BPQ=-1 S BPQ="^" Q
"RTN","BPSSCRRV",65,0)
 . I BPQ'=1 Q
"RTN","BPSSCRRV",66,0)
 . I $$REVERSIT(BP59,BPRVREAS)=0 S REVTOTAL=REVTOTAL+1
"RTN","BPSSCRRV",67,0)
 W:BPIFANY=0 !,"No eligible items selected."
"RTN","BPSSCRRV",68,0)
 W !,REVTOTAL," claim reversal",$S(REVTOTAL'=1:"s",1:"")," submitted.",!
"RTN","BPSSCRRV",69,0)
 D PAUSE^VALM1
"RTN","BPSSCRRV",70,0)
 Q REVTOTAL
"RTN","BPSSCRRV",71,0)
 ;
"RTN","BPSSCRRV",72,0)
 ;
"RTN","BPSSCRRV",73,0)
 ;the similar to REVERSE
"RTN","BPSSCRRV",74,0)
 ;with some information displayed for the user 
"RTN","BPSSCRRV",75,0)
 ;Input:
"RTN","BPSSCRRV",76,0)
 ; BP59 ptr in file #9002313.59
"RTN","BPSSCRRV",77,0)
 ; BPRVREAS - reversal reason (free text)
"RTN","BPSSCRRV",78,0)
 ;Output:
"RTN","BPSSCRRV",79,0)
 ;-1 Claim is not Payable
"RTN","BPSSCRRV",80,0)
 ;-2 no reversal, it's irreversible
"RTN","BPSSCRRV",81,0)
 ;-3 paper claim
"RTN","BPSSCRRV",82,0)
 ;>0 - IEN of reversal claim if electronic claim submitted for
"RTN","BPSSCRRV",83,0)
 ;   reversal.
"RTN","BPSSCRRV",84,0)
REVERSIT(BP59,BPRVREAS) ;
"RTN","BPSSCRRV",85,0)
 N BPRET
"RTN","BPSSCRRV",86,0)
 N BPRX
"RTN","BPSSCRRV",87,0)
 N BPRXRF
"RTN","BPSSCRRV",88,0)
 S BPRXRF=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSSCRRV",89,0)
 S BPRET=+$$REVERSE(BP59,BPRVREAS,+BPRXRF,+$P(BPRXRF,U,2))
"RTN","BPSSCRRV",90,0)
 S BPRX=$$RXNUM^BPSSCRU2(+BPRXRF)
"RTN","BPSSCRRV",91,0)
 Q BPRET
"RTN","BPSSCRRV",92,0)
 ;
"RTN","BPSSCRRV",93,0)
 ;
"RTN","BPSSCRRV",94,0)
 ;/**
"RTN","BPSSCRRV",95,0)
 ;Reverse the claim 
"RTN","BPSSCRRV",96,0)
 ;Input:
"RTN","BPSSCRRV",97,0)
 ; BP59 ptr in file #9002313.59
"RTN","BPSSCRRV",98,0)
 ; BPRVREAS - reversal reason (free text)
"RTN","BPSSCRRV",99,0)
 ; BPRX - RX ien (#52)
"RTN","BPSSCRRV",100,0)
 ; BPFIL - refill number
"RTN","BPSSCRRV",101,0)
 ;Output:
"RTN","BPSSCRRV",102,0)
 ; code^message
"RTN","BPSSCRRV",103,0)
 ; where 
"RTN","BPSSCRRV",104,0)
 ; code :
"RTN","BPSSCRRV",105,0)
 ;  from $$EN^BPSNCPDP
"RTN","BPSSCRRV",106,0)
 ;  0 Prescription/Fill successfully submitted to ECME for claims processing
"RTN","BPSSCRRV",107,0)
 ;  1 ECME did not submit prescription/fill
"RTN","BPSSCRRV",108,0)
 ;  2 IB says prescription/fill is not ECME billable or the data returned from IB is not valid
"RTN","BPSSCRRV",109,0)
 ;  3 ECME closed the claim but did not submit it to the payer
"RTN","BPSSCRRV",110,0)
 ;  4 Unable to queue the ECME claim
"RTN","BPSSCRRV",111,0)
 ;  5 Invalid input
"RTN","BPSSCRRV",112,0)
 ;  and additional 
"RTN","BPSSCRRV",113,0)
 ;  12 Claim has been deleted in Pharmacy.
"RTN","BPSSCRRV",114,0)
 ; message - whatever $$EN^BPSNCPDP returns
"RTN","BPSSCRRV",115,0)
 ; for 12 - "Claim has been deleted in Pharmacy."
"RTN","BPSSCRRV",116,0)
 ; 
"RTN","BPSSCRRV",117,0)
REVERSE(BP59,BPRVREAS,BPRX,BPFIL) ;*/
"RTN","BPSSCRRV",118,0)
 N BPDOS,BPNDC,BPRET,BPSARRY,BPSCLOSE,ERROR,BPSTATUS,BPCOBIND,BPQ
"RTN","BPSSCRRV",119,0)
 S BPSCLOSE("CLOSE AFT REV")=0
"RTN","BPSSCRRV",120,0)
 S BPDOS=$$DOSDATE^BPSSCRRS(BPRX,BPFIL)
"RTN","BPSSCRRV",121,0)
 S BPNDC=$$NDC^BPSSCRU2(BPRX,BPFIL)
"RTN","BPSSCRRV",122,0)
 I $$RXDEL^BPSOS(BPRX,BPFIL) D  Q 12_U_"Claim has been deleted in Pharmacy."
"RTN","BPSSCRRV",123,0)
 . W !,"The claim cannot be reversed since it has been deleted in Pharmacy."
"RTN","BPSSCRRV",124,0)
 ;Prompt user to mark claim as non-billable and release patient copay
"RTN","BPSSCRRV",125,0)
 ;if selected claim is for the Primary Insurer - Check COB INDICATOR = 1,
"RTN","BPSSCRRV",126,0)
 ;or if COB INDICATOR is null for backward compatibility.
"RTN","BPSSCRRV",127,0)
 I $P($G(^BPST(BP59,0)),U,14)'>1 D BILLCLM(.BPSCLOSE) I BPQ="-1" Q 1
"RTN","BPSSCRRV",128,0)
 ;Submit claim to ECME
"RTN","BPSSCRRV",129,0)
 S BPRET=$$EN^BPSNCPDP(BPRX,BPFIL,BPDOS,"EREV",BPNDC,BPRVREAS,"","","","",$$COB59^BPSUTIL2(BP59),"","",.BPSCLOSE)
"RTN","BPSSCRRV",130,0)
 ;print return value message
"RTN","BPSSCRRV",131,0)
 W !!
"RTN","BPSSCRRV",132,0)
 W:+BPRET>0 "Not Processed:",!,"  ",$P(BPRET,U,2)
"RTN","BPSSCRRV",133,0)
 I +BPRET=0 S BPSTATUS=$$CLAIMST^BPSSCRU3(BP59) I $P(BPSTATUS,U)="E REVERSAL ACCEPTED" W $P(BPSTATUS,U,3)
"RTN","BPSSCRRV",134,0)
 ; 
"RTN","BPSSCRRV",135,0)
 ;0 Prescription/Fill successfully submitted to ECME for claims processing
"RTN","BPSSCRRV",136,0)
 ;1 ECME did not submit prescription/fill
"RTN","BPSSCRRV",137,0)
 ;2 IB says prescription/fill is not ECME billable or the data returned from IB is not valid
"RTN","BPSSCRRV",138,0)
 ;3 ECME closed the claim but did not submit it to the payer
"RTN","BPSSCRRV",139,0)
 ;4 Unable to queue the ECME claim
"RTN","BPSSCRRV",140,0)
 ;5 Invalid input
"RTN","BPSSCRRV",141,0)
 N BPSCOB S BPSCOB=$$COB59^BPSUTIL2(BP59) ;get COB for the BPS TRANSACTION IEN
"RTN","BPSSCRRV",142,0)
 I +BPRET=0 D ECMEACT^PSOBPSU1(+BPRX,+BPFIL,"Claim reversal sent to 3rd party payer: ECME USER's SCREEN-"_$S(BPSCOB=1:"p",BPSCOB=2:"s",1:"")_$$INSNAME^BPSSCRU6(BP59))
"RTN","BPSSCRRV",143,0)
 Q BPRET
"RTN","BPSSCRRV",144,0)
 ;
"RTN","BPSSCRRV",145,0)
 ;
"RTN","BPSSCRRV",146,0)
 ;Mark claim billable (YES/NO) question. If yes, ask for CLAIMS TRACKING
"RTN","BPSSCRRV",147,0)
 ;NON-BILLABLE REASONS NAME
"RTN","BPSSCRRV",148,0)
 ;Output: 
"RTN","BPSSCRRV",149,0)
 ;BPSCLOSE("CLOSE AFT REV")=1 or 0 (zero) (1 = YES, 0 = NO)
"RTN","BPSSCRRV",150,0)
 ;BPSCLOSE("CLOSE AFT REV REASON")=ptr to #356.8 ^ CLOSE REASON NAME ^ ECME FLAG ^ ECME PAPER FLAG
"RTN","BPSSCRRV",151,0)
 ;BPSCLOSE("CLOSE AFT REV COMMENT")=COMMENT TEXT
"RTN","BPSSCRRV",152,0)
BILLCLM(BPSCLOSE) ;
"RTN","BPSSCRRV",153,0)
 N BPREAZ,BPCMT,BPCLAR
"RTN","BPSSCRRV",154,0)
 S BPSCLOSE("CLOSE AFT REV")=0,BPSCLOSE("CLOSE AFT REV REASON")="",BPSCLOSE("CLOSE AFT REV COMMENT")=""
"RTN","BPSSCRRV",155,0)
 W !,"Do you want to mark the claim as non-billable in Claims Tracking and release the Patient Copay (if any)"
"RTN","BPSSCRRV",156,0)
 S BPQ=$$YESNO^BPSSCRRS("(Yes/No)") I BPQ<1 Q
"RTN","BPSSCRRV",157,0)
 S BPSCLOSE("CLOSE AFT REV")=BPQ
"RTN","BPSSCRRV",158,0)
 S BPREAZ=$$REASON^BPSSCRCL() I BPREAZ="^" S BPQ="-1" Q
"RTN","BPSSCRRV",159,0)
 S BPSCLOSE("CLOSE AFT REV REASON")=+$P(BPREAZ,U)
"RTN","BPSSCRRV",160,0)
 S BPCMT=$$COMMENT^BPSSCRCL("Comment ",40) I BPCMT="^" S BPQ="-1" Q
"RTN","BPSSCRRV",161,0)
 S BPSCLOSE("CLOSE AFT REV COMMENT")=BPCMT
"RTN","BPSSCRRV",162,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSSCRRV",163,0)
 I BPQ<1 S BPSCLOSE("CLOSE AFT REV")=0,BPSCLOSE("CLOSE AFT REV REASON")="",BPSCLOSE("CLOSE AFT REV COMMENT")="",BPQ="-1" Q
"RTN","BPSSCRRV",164,0)
 W !,"If the reversal is approved by the third-party payer, the claim will be marked as non-billable.",!
"RTN","BPSSCRRV",165,0)
 Q
"RTN","BPSSCRRV",166,0)
 ;
"RTN","BPSSCRRV",167,0)
PAUSE() ;
"RTN","BPSSCRRV",168,0)
 N X
"RTN","BPSSCRRV",169,0)
 W ! S DIR(0)="E" D ^DIR K DIR W !
"RTN","BPSSCRRV",170,0)
 Q X
"RTN","BPSSCRRV",171,0)
 ;
"RTN","BPSSCRSL")
0^6^B14919740
"RTN","BPSSCRSL",1,0)
BPSSCRSL ;BHAM ISC/SS - ECME SCREEN SORT LIST ;05-APR-05
"RTN","BPSSCRSL",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,7,11,20**;JUN 2004;Build 27
"RTN","BPSSCRSL",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRSL",4,0)
 ;USER SCREEN
"RTN","BPSSCRSL",5,0)
 ;
"RTN","BPSSCRSL",6,0)
 ;This software is using PARAMETER TOOLS (see XT*7.3*26) to store user's settings:
"RTN","BPSSCRSL",7,0)
 ;PARAMETER DEFINITION NAME="BPS USRSCR" (file #8989.51, IA# 2263)
"RTN","BPSSCRSL",8,0)
 ;ENTITY is "USR" , i.e. IEN in ^VA(200  -- see definition for "BPS USRSCR"
"RTN","BPSSCRSL",9,0)
 ;INSTANCEs are as follows:
"RTN","BPSSCRSL",10,0)
 ;1.01 ONE/ALL USERS --'U' ONE USER, 'A' ALL; Display claims for ONE or ALL users 
"RTN","BPSSCRSL",11,0)
 ;1.02 ONE/ALL PATIENTS --'P' FOR ONE PATIENT; 'A' FOR ALL; Display claims for ONE/ALL PATIENTS 
"RTN","BPSSCRSL",12,0)
 ;1.03 ONE/ALL RX --'R' FOR ONE RX; 'A' FOR ALL; Display claims for ONE or ALL RX 
"RTN","BPSSCRSL",13,0)
 ;1.04 HOURS/DAYS -- 'D' FOR DAYS; 'H' FOR HOURS; Use HOURS or DAYS to specify timeframe 
"RTN","BPSSCRSL",14,0)
 ;1.05 TIMEFRAME -- NUMBER Depends on the value of the field "USR SCR HOURS/DAYS" this field will
"RTN","BPSSCRSL",15,0)
 ;store the default number of HOURS from NOW or DAYS from TODAY to select claims to display 
"RTN","BPSSCRSL",16,0)
 ;1.06 REJECTED/PAYABLE --'R' FOR REJECTS; 'P' FOR PAYABLES; 'U' FOR UNSTRANDED; 'A' FOR ALL; Display Rejects or Payables or Unstranded or ALL claims 
"RTN","BPSSCRSL",17,0)
 ;1.07 RELEASED/NOT RELEASED --'R' FOR RELEASED; 'N' FOR NON-RELEASED; 'A' FOR ALL; Display Released Rxs or Non-Released Rxs or ALL 
"RTN","BPSSCRSL",18,0)
 ;1.08 CMOP/MAIL/WINDOW --'C' FOR CMOP; 'M' FOR MAIL;'W' FOR WINDOW;'A' FOR ALL; Display CMOP or Mail or Window or ALL Rxs 
"RTN","BPSSCRSL",19,0)
 ;1.09 REALTIME/BACKBILL --'R' FOR REALTIME; 'B' FOR BACKBILLS; 'P' FOR PRO OPTION; 'R' FOR RESUBMISSION; 'A' FOR ALL;
"RTN","BPSSCRSL",20,0)
 ;     Display (R)ealTime, (B)ackbills, (P)RO Option, Re(S)ubmission or (A)LL
"RTN","BPSSCRSL",21,0)
 ;1.1 REJECT CODE/ALL --'R' FOR REJECT CODE; 'A' FOR ALL; Display Specific Reject Code or ALL Reject
"RTN","BPSSCRSL",22,0)
 ;Codes 0 means ALL Reject Codes otherwise - Reject Code value 
"RTN","BPSSCRSL",23,0)
 ;1.11 SPECIFIC/ALL INSURANCES --'I' FOR SPECIFIC INSURANCE(S);'A' FOR ALL; Display Specific Insurance Company(s) or All null - ALL otherwise - pointer to INSURANCE COMPANY file #36 
"RTN","BPSSCRSL",24,0)
 ;1.12 SORT LIST --'T' FOR TRANSACTION DATE;'D' FOR DIVISION; 'I' FOR INSURANCE; 'C' FOR REJECT CODE; 
"RTN","BPSSCRSL",25,0)
 ;'P' FOR PATIENT NAME -- 'N' FOR DRUG NAME; 'B' FOR BILL TYPE (BB/P2/RT/RS); 'L' FOR FILL LOCATION;
"RTN","BPSSCRSL",26,0)
 ;'R' FOR RELEASED/NON-RELEASED -- 'A' FOR ACTIVE/DISCONTINUED; the field used to sort claims in the list 
"RTN","BPSSCRSL",27,0)
 ;1.13 ALL ECME PHARMACY DIVISIONS --'D' FOR DIVISION; 'A' FOR ALL; 
"RTN","BPSSCRSL",28,0)
 ;1.14 SELECTED INSURANCE -- Single, or multiple, insurance(s) to select claims for the User Screen, to store INSURANCE COMPANY pointer (#36) 
"RTN","BPSSCRSL",29,0)
 ;1.15 SELECTED REJECTED CODE --POINTER TO BPS NCPDP REJECT CODES FILE (#9002313.93) Reject code selected by the user to filter claims.
"RTN","BPSSCRSL",30,0)
 ;1.16 SELECTED USER -- POINTER TO NEW PERSON FILE (#200) Selected user for the user screen 
"RTN","BPSSCRSL",31,0)
 ;1.17 SELECTED PATIENT -- POINTER TO PATIENT FILE (#2) Selected patient for the User Screen 
"RTN","BPSSCRSL",32,0)
 ;1.18 SELECTED RX -- POINTER TO PRESCRIPTION FILE (#52) Selected RX 
"RTN","BPSSCRSL",33,0)
 ;1.19 NON-BILLABLE TRI/CVA ENTRIES OPEN/CLOSED/ALL -- 'O' Open; 'C' Closed; 'A' All
"RTN","BPSSCRSL",34,0)
 ;2    ECME PHARMACY DIVISION -- the list of POINTERs TO BPS PHARMACIES FILE (#9002313.56) separated by "^"
"RTN","BPSSCRSL",35,0)
 ;2.01 ELIGIBILITY TYPE --'V' FOR VETERAN;'T' FOR TRICARE;'C' FOR CHAMPVA;'A' FOR ALL; Display claims for specific Eligibility Type or ALL 
"RTN","BPSSCRSL",36,0)
 ;2.02 OPEN/CLOSED/ALL --'O' OPEN CLAIMS;'C' CLOSED CLAIMS;'A' FOR ALL; Display Open, Closed, or ALL claims 
"RTN","BPSSCRSL",37,0)
 ;2.03 SUBMISSION TYPE --'B' BILLING REQUESTS;'R' REVERSALS;'A' FOR ALL; Display specific submission type claims or ALL 
"RTN","BPSSCRSL",38,0)
 ;2.04 INSURANCES -- List of POINTERs to the INSURANCE COMPANY FILE (#36) separated by ";"
"RTN","BPSSCRSL",39,0)
 ;should start and end with ";", example: ";4;5;"
"RTN","BPSSCRSL",40,0)
 ;
"RTN","BPSSCRSL",41,0)
 ;NOTE: use D ^XPAREDIT to add/edit values
"RTN","BPSSCRSL",42,0)
 ;
"RTN","BPSSCRSL",43,0)
 ;*****
"RTN","BPSSCRSL",44,0)
SL ;
"RTN","BPSSCRSL",45,0)
 D FULL^VALM1
"RTN","BPSSCRSL",46,0)
 W @IOF
"RTN","BPSSCRSL",47,0)
 K BPARR
"RTN","BPSSCRSL",48,0)
 I +$G(DUZ)=0 D ERRMSG^BPSSCRCV("Unknown User") Q
"RTN","BPSSCRSL",49,0)
 N BPDUZ7
"RTN","BPSSCRSL",50,0)
 S BPDUZ7=+DUZ
"RTN","BPSSCRSL",51,0)
 ;always get current profile from the file
"RTN","BPSSCRSL",52,0)
 ;D READPRFP(.BPARR,+DUZ)
"RTN","BPSSCRSL",53,0)
 D READPROF(.BPARR,+BPDUZ7)
"RTN","BPSSCRSL",54,0)
 D SAVEVIEW^BPSSCR01(.BPARR)
"RTN","BPSSCRSL",55,0)
 ;edit current profile
"RTN","BPSSCRSL",56,0)
 D EDITPROF(.BPARR,.BPDUZ7)
"RTN","BPSSCRSL",57,0)
 D SAVEVIEW^BPSSCR01(.BPARR)
"RTN","BPSSCRSL",58,0)
 ;save it if necessary only for SORT LIST field
"RTN","BPSSCRSL",59,0)
 ;(so we used a separate array for this and save it only)
"RTN","BPSSCRSL",60,0)
 N BPSRT S BPSRT(1.12)=BPARR(1.12)
"RTN","BPSSCRSL",61,0)
 D ENDEDIT(.BPSRT,+BPDUZ7)
"RTN","BPSSCRSL",62,0)
 D SAVEVIEW^BPSSCR01(.BPARR)
"RTN","BPSSCRSL",63,0)
 ;redraw screen
"RTN","BPSSCRSL",64,0)
 D REDRAW^BPSSCRUD("Updating screen...")
"RTN","BPSSCRSL",65,0)
 Q
"RTN","BPSSCRSL",66,0)
 ;
"RTN","BPSSCRSL",67,0)
 ;input:
"RTN","BPSSCRSL",68,0)
 ;BPARRAY - array that all settings:  
"RTN","BPSSCRSL",69,0)
 ;   in the form BPARRAY(instance in "BPS USRSCR" parameter tool entry) = value
"RTN","BPSSCRSL",70,0)
 ;BPDUZ7 - DUZ
"RTN","BPSSCRSL",71,0)
EDITPROF(BPARR,BPDUZ7) ;
"RTN","BPSSCRSL",72,0)
 N BP1
"RTN","BPSSCRSL",73,0)
 N BPRET
"RTN","BPSSCRSL",74,0)
 N BPSTR
"RTN","BPSSCRSL",75,0)
 S BPSTR="S^T:TRANSACTION DATE;D:DIVISION;I:INSURANCE;C:REJECT CODE;P:PATIENT NAME;N:DRUG NAME;B:BILL TYPE (BB/P2/RT/RS);L:FILL LOCATION;R:RELEASED/NON-RELEASED;A:ACTIVE/DISCONTINUED"
"RTN","BPSSCRSL",76,0)
 I $$EDITFLD^BPSSCRCV(1.12,+BPDUZ7,BPSTR,"ENTER SORT TYPE","TRANSACTION DATE",.BPARR)=-1 S BPDUZ7=0 Q
"RTN","BPSSCRSL",77,0)
 Q
"RTN","BPSSCRSL",78,0)
 ;
"RTN","BPSSCRSL",79,0)
 ;input:
"RTN","BPSSCRSL",80,0)
 ;BPARRAY - array that all settings:  
"RTN","BPSSCRSL",81,0)
 ;in the form BPARRAY(instance in "BPS USRSCR" parameter tool entry) = value
"RTN","BPSSCRSL",82,0)
 ;BPDUZ7 - DUZ
"RTN","BPSSCRSL",83,0)
 ;
"RTN","BPSSCRSL",84,0)
ENDEDIT(BPARRAY,BPDUZ7) ;
"RTN","BPSSCRSL",85,0)
 I $$PROMPT^BPSSCRCV("S^Y:YES;N:NO","DO YOU WANT TO SAVE THIS VIEW AS YOUR PREFERRED VIEW (Y/N)?","")="Y" D
"RTN","BPSSCRSL",86,0)
 . D FILEALL^BPSSCRCV(.BPARRAY,BPDUZ7)
"RTN","BPSSCRSL",87,0)
 Q
"RTN","BPSSCRSL",88,0)
 ;read profile information (used in other routines as well)
"RTN","BPSSCRSL",89,0)
 ;input:
"RTN","BPSSCRSL",90,0)
 ;BPDUZ7 - DUZ
"RTN","BPSSCRSL",91,0)
 ;input/output:
"RTN","BPSSCRSL",92,0)
 ;BPARRAY - to return back profile information, as reference
"RTN","BPSSCRSL",93,0)
 ;see description in the top of the routine
"RTN","BPSSCRSL",94,0)
READPROF(BPARRAY,BPDUZ7) ;
"RTN","BPSSCRSL",95,0)
 N RETV,RETARR,BPFLDNO,BPDIV,BP1
"RTN","BPSSCRSL",96,0)
 N RECIENS
"RTN","BPSSCRSL",97,0)
 S RECIENS=BPDUZ7_","
"RTN","BPSSCRSL",98,0)
 F BPFLDNO=1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,2.01,2.02,2.03,2.04 D
"RTN","BPSSCRSL",99,0)
 . S RETV=$$GETPARAM(BPFLDNO,+BPDUZ7)
"RTN","BPSSCRSL",100,0)
 . S BPARRAY(BPFLDNO)=RETV
"RTN","BPSSCRSL",101,0)
 I BPARRAY(1.13)="D" D
"RTN","BPSSCRSL",102,0)
 . S BPARRAY("DIVS")=$$GETPARAM(2,+BPDUZ7)
"RTN","BPSSCRSL",103,0)
 I BPARRAY(1.11)="I" D
"RTN","BPSSCRSL",104,0)
 . S BPARRAY("INS")=$$GETPARAM(2.04,+BPDUZ7)
"RTN","BPSSCRSL",105,0)
 Q
"RTN","BPSSCRSL",106,0)
 ;
"RTN","BPSSCRSL",107,0)
SORTTYPE(BPSTYPE) ;
"RTN","BPSSCRSL",108,0)
 Q:(BPSTYPE="T") "Transaction Date"
"RTN","BPSSCRSL",109,0)
 Q:(BPSTYPE="D") "ECME division"
"RTN","BPSSCRSL",110,0)
 Q:(BPSTYPE="I") "Insurance"
"RTN","BPSSCRSL",111,0)
 Q:(BPSTYPE="C") "Reject Code"
"RTN","BPSSCRSL",112,0)
 Q:(BPSTYPE="P") "Patient Name"
"RTN","BPSSCRSL",113,0)
 Q:(BPSTYPE="N") "Drug Name"
"RTN","BPSSCRSL",114,0)
 Q:(BPSTYPE="B") "Claim's Origin (BB/P2/RT/RS)"
"RTN","BPSSCRSL",115,0)
 Q:(BPSTYPE="L") "Fill Location"
"RTN","BPSSCRSL",116,0)
 Q:(BPSTYPE="R") "Released/Non-released"
"RTN","BPSSCRSL",117,0)
 Q:(BPSTYPE="A") "Active/Discontinued"
"RTN","BPSSCRSL",118,0)
 Q ""
"RTN","BPSSCRSL",119,0)
 ;
"RTN","BPSSCRSL",120,0)
 ;
"RTN","BPSSCRSL",121,0)
GETPARAM(BPFLDNO,BPDUZ) ;
"RTN","BPSSCRSL",122,0)
 Q $$GET^XPAR(BPDUZ_";VA(200,","BPS USRSCR",BPFLDNO,"I")
"RTN","BPSSCRSL",123,0)
 ;
"RTN","BPSSCRSL",124,0)
 ;save value of the parameter
"RTN","BPSSCRSL",125,0)
SAVEPAR(BPFLDNO,BPDUZ,BPVAL) ;
"RTN","BPSSCRSL",126,0)
 D EN^XPAR(BPDUZ_";VA(200,","BPS USRSCR",BPFLDNO,BPVAL,.BPERR)
"RTN","BPSSCRSL",127,0)
 I BPERR'="0" W !,BPERR,! Q 0
"RTN","BPSSCRSL",128,0)
 Q 1
"RTN","BPSSCRSL",129,0)
 ;
"RTN","BPSSCRU2")
0^2^B51790246
"RTN","BPSSCRU2",1,0)
BPSSCRU2 ;BHAM ISC/SS - ECME SCREEN UTILITIES ;05-APR-05
"RTN","BPSSCRU2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,10,11,20**;JUN 2004;Build 27
"RTN","BPSSCRU2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRU2",4,0)
 ;USER SCREEN
"RTN","BPSSCRU2",5,0)
 Q
"RTN","BPSSCRU2",6,0)
 ;/**
"RTN","BPSSCRU2",7,0)
 ;Input:
"RTN","BPSSCRU2",8,0)
 ; BP59 - pointer to file #9002313.59
"RTN","BPSSCRU2",9,0)
 ;Output:
"RTN","BPSSCRU2",10,0)
 ;get filling "location" like "WINDOW/LOCALMAIL/CMOP"
"RTN","BPSSCRU2",11,0)
GETMWC(BP59) ;*/
"RTN","BPSSCRU2",12,0)
 N BP1 S BP1=$$RXREF(BP59)
"RTN","BPSSCRU2",13,0)
 Q:+BP1=0 ""
"RTN","BPSSCRU2",14,0)
 Q $$MWC($P(BP1,U),$P(BP1,U,2))
"RTN","BPSSCRU2",15,0)
 ;
"RTN","BPSSCRU2",16,0)
 ;initially this was designed to convert numbers to letters to display on the screen
"RTN","BPSSCRU2",17,0)
 ;but later the Pharmacy designed API that returns letters instead of numbers
"RTN","BPSSCRU2",18,0)
 ;so now this function just returns what it receives in its parameter, while it does not 
"RTN","BPSSCRU2",19,0)
 ;make any sense, we still keep it in order to prevent changes in other four routines:
"RTN","BPSSCRU2",20,0)
 ; BPSREOP1, BPSSCR02, BPSSCR03, BPSSCR04
"RTN","BPSSCRU2",21,0)
MWCNAME(BPMWC) ;
"RTN","BPSSCRU2",22,0)
 Q BPMWC
"RTN","BPSSCRU2",23,0)
 ;/**
"RTN","BPSSCRU2",24,0)
 ;Input:
"RTN","BPSSCRU2",25,0)
 ; BP59 - pointer to file #9002313.59
"RTN","BPSSCRU2",26,0)
 ;Output:
"RTN","BPSSCRU2",27,0)
 ;get RX pointer in file #52 and refill number in its multiple (0 - original refill)
"RTN","BPSSCRU2",28,0)
RXREF(BP59) ;
"RTN","BPSSCRU2",29,0)
 N BPRX,BPREF
"RTN","BPSSCRU2",30,0)
 S BPRX=+$P($G(^BPST(BP59,1)),U,11) ;ptr to RX node in #52
"RTN","BPSSCRU2",31,0)
 S BPREF=+$P($G(^BPST(BP59,1)),U) ;ptr to refill multiple in #52
"RTN","BPSSCRU2",32,0)
 Q BPRX_U_BPREF
"RTN","BPSSCRU2",33,0)
 ; determines if the refill was MAIL/WINDOW/CMOP
"RTN","BPSSCRU2",34,0)
MWC(BPRX,BPREF) ;MAIL/WINDOW/CMOP
"RTN","BPSSCRU2",35,0)
 ;input:
"RTN","BPSSCRU2",36,0)
 ; BPRX ptr to #52 (RX)
"RTN","BPSSCRU2",37,0)
 ; BPREF ptr to #52.1 (refills)
"RTN","BPSSCRU2",38,0)
 ;return value:
"RTN","BPSSCRU2",39,0)
 ; 2-MAIL/3-WINDOW/4-CMOP
"RTN","BPSSCRU2",40,0)
 Q $$MWC^PSOBPSU2(BPRX,BPREF)
"RTN","BPSSCRU2",41,0)
 ;
"RTN","BPSSCRU2",42,0)
 ;
"RTN","BPSSCRU2",43,0)
 ;/**
"RTN","BPSSCRU2",44,0)
 ;Input:
"RTN","BPSSCRU2",45,0)
 ; BP59 - pointer to file #9002313.59
"RTN","BPSSCRU2",46,0)
 ;Output:
"RTN","BPSSCRU2",47,0)
 ; insurance ien ^ name ^ phone
"RTN","BPSSCRU2",48,0)
GETINSUR(BP59) ;get insurance info by the pointer of #9002313.59
"RTN","BPSSCRU2",49,0)
 N BPHONE,BPINSNM,BPINSID,BP57,BPINSN,BPX
"RTN","BPSSCRU2",50,0)
 S BPX=$$NAMEPHON^BPSSCRU3(BP59)
"RTN","BPSSCRU2",51,0)
 S BPINSNM=$P(BPX,U,1)
"RTN","BPSSCRU2",52,0)
 S BPHONE=$P(BPX,U,2)
"RTN","BPSSCRU2",53,0)
 ;Get a temporary ID for the insurance from ^TMP list of insurances.
"RTN","BPSSCRU2",54,0)
 ;If doesn't exist yet then create a new record in ^TMP list of insurances 
"RTN","BPSSCRU2",55,0)
 ;   for this insurance and return the ID for the record.
"RTN","BPSSCRU2",56,0)
 ;A lifetime for ^TMP list of insurances is the time period the user is using 
"RTN","BPSSCRU2",57,0)
 ;   the User Screen menu option
"RTN","BPSSCRU2",58,0)
 S BPINSID=$$CHKINSUR^BPSSCR(BPINSNM,BPHONE)
"RTN","BPSSCRU2",59,0)
 I $L(BPHONE)=0 S BPHONE=" "
"RTN","BPSSCRU2",60,0)
 I $L(BPINSNM)=0 S BPINSNM="?NODATA?"
"RTN","BPSSCRU2",61,0)
 Q BPINSID_U_BPINSNM_U_BPHONE
"RTN","BPSSCRU2",62,0)
 ;
"RTN","BPSSCRU2",63,0)
 ;/**
"RTN","BPSSCRU2",64,0)
 ;Input:
"RTN","BPSSCRU2",65,0)
 ; BP59 - pointer to file #9002313.59
"RTN","BPSSCRU2",66,0)
 ;Output:
"RTN","BPSSCRU2",67,0)
 ;transaction date
"RTN","BPSSCRU2",68,0)
TRANDT(BP59) ;
"RTN","BPSSCRU2",69,0)
 Q $P($G(^BPST(BP59,0)),U,8)\1
"RTN","BPSSCRU2",70,0)
 ;
"RTN","BPSSCRU2",71,0)
 ;/**
"RTN","BPSSCRU2",72,0)
 ;Input:
"RTN","BPSSCRU2",73,0)
 ; BP59 - pointer to file #9002313.59
"RTN","BPSSCRU2",74,0)
 ;Output:
"RTN","BPSSCRU2",75,0)
 ;ECME pharmacy division (9002313.56)
"RTN","BPSSCRU2",76,0)
DIVIS(BP59) ;
"RTN","BPSSCRU2",77,0)
 Q $P($G(^BPST(BP59,1)),U,7)
"RTN","BPSSCRU2",78,0)
 ;
"RTN","BPSSCRU2",79,0)
 ;/**
"RTN","BPSSCRU2",80,0)
 ;Input:
"RTN","BPSSCRU2",81,0)
 ; BP59 - pointer to file #9002313.59
"RTN","BPSSCRU2",82,0)
 ;Output:
"RTN","BPSSCRU2",83,0)
 ;patient's DFN (file #2)
"RTN","BPSSCRU2",84,0)
GETPATID(BP59) ;
"RTN","BPSSCRU2",85,0)
 Q $P($G(^BPST(BP59,0)),U,6)
"RTN","BPSSCRU2",86,0)
 ;
"RTN","BPSSCRU2",87,0)
 ;return RX status as ACT/DIS/etc
"RTN","BPSSCRU2",88,0)
RXST(BP59) ;
"RTN","BPSSCRU2",89,0)
 N BPRXREF
"RTN","BPSSCRU2",90,0)
 S BPRXREF=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSSCRU2",91,0)
 ;display status ONLY if the refill is the most recent 
"RTN","BPSSCRU2",92,0)
 ;otherwise display blanks (three spaces for sorting purposes)
"RTN","BPSSCRU2",93,0)
 I +$P(BPRXREF,U,2)'=(+$$LSTRFL^PSOBPSU1(+$P(BPRXREF,U,1))) Q "**"
"RTN","BPSSCRU2",94,0)
 Q $$RXSTANAM($$RXSTATUS(+$P(BPRXREF,U,1)))
"RTN","BPSSCRU2",95,0)
 ;/**
"RTN","BPSSCRU2",96,0)
 ;RX status
"RTN","BPSSCRU2",97,0)
 ;Input 
"RTN","BPSSCRU2",98,0)
 ; RXNUM:
"RTN","BPSSCRU2",99,0)
 ;  ien of file #52 (if MODE=0) 
"RTN","BPSSCRU2",100,0)
 ;  or RX number (if MODE=1)
"RTN","BPSSCRU2",101,0)
 ;----------
"RTN","BPSSCRU2",102,0)
 ;Output:
"RTN","BPSSCRU2",103,0)
 ; 0    if not found
"RTN","BPSSCRU2",104,0)
 ; status set#
"RTN","BPSSCRU2",105,0)
RXSTATUS(RXNUM) ;*/
"RTN","BPSSCRU2",106,0)
 N BPRET
"RTN","BPSSCRU2",107,0)
 S BPRET=$$RXAPI1^BPSUTIL1(RXNUM,100,"I")
"RTN","BPSSCRU2",108,0)
 I BPRET="" Q -1
"RTN","BPSSCRU2",109,0)
 Q BPRET
"RTN","BPSSCRU2",110,0)
 ;/**
"RTN","BPSSCRU2",111,0)
 ;if RX "valid" 
"RTN","BPSSCRU2",112,0)
RXACTIVE(BPRXSTAT) ;*/
"RTN","BPSSCRU2",113,0)
 ; 0    not valid
"RTN","BPSSCRU2",114,0)
 ; 1    valid (i.e. ACTIVE/NON-VERIFIED/REFILL/HOLD/DRUG INTERACTIONS/SUSPENDED) 
"RTN","BPSSCRU2",115,0)
 ; -1   doesn't exist
"RTN","BPSSCRU2",116,0)
 Q:BPRXSTAT<6 1  ;active
"RTN","BPSSCRU2",117,0)
 ;/**
"RTN","BPSSCRU2",118,0)
 ;RX status text
"RTN","BPSSCRU2",119,0)
RXSTANAM(BPRXSTAT) ;*/
"RTN","BPSSCRU2",120,0)
 Q:BPRXSTAT=0 "AC"  ; ACTIVE; 
"RTN","BPSSCRU2",121,0)
 Q:BPRXSTAT=1 "NV"  ; NON-VERIFIED; 
"RTN","BPSSCRU2",122,0)
 Q:BPRXSTAT=3 "HL"  ; HOLD; 
"RTN","BPSSCRU2",123,0)
 Q:BPRXSTAT=5 "SU"  ; SUSPENDED; 
"RTN","BPSSCRU2",124,0)
 Q:BPRXSTAT=11 "EX"  ; EXPIRED; 
"RTN","BPSSCRU2",125,0)
 Q:BPRXSTAT=12 "DS"  ; DISCONTINUED; 
"RTN","BPSSCRU2",126,0)
 Q:BPRXSTAT=13 "DL"  ; DELETED; 
"RTN","BPSSCRU2",127,0)
 Q:BPRXSTAT=14 "DS"  ; DISCONTINUED BY PROVIDER; 
"RTN","BPSSCRU2",128,0)
 Q:BPRXSTAT=15 "DS"  ; DISCONTINUED (EDIT); 
"RTN","BPSSCRU2",129,0)
 Q:BPRXSTAT=16 "HL"  ; PROVIDER HOLD; 
"RTN","BPSSCRU2",130,0)
 Q:BPRXSTAT=-1 "??"
"RTN","BPSSCRU2",131,0)
 Q ""
"RTN","BPSSCRU2",132,0)
 ;/**
"RTN","BPSSCRU2",133,0)
 ;Input:
"RTN","BPSSCRU2",134,0)
 ; BP59 - pointer to file #9002313.59
"RTN","BPSSCRU2",135,0)
 ;Output:
"RTN","BPSSCRU2",136,0)
 ;returns:
"RTN","BPSSCRU2",137,0)
 ;>0  Released
"RTN","BPSSCRU2",138,0)
 ;0   non released
"RTN","BPSSCRU2",139,0)
 ;-1  error
"RTN","BPSSCRU2",140,0)
ISRXREL(BP59) ;
"RTN","BPSSCRU2",141,0)
 N BP1
"RTN","BPSSCRU2",142,0)
 S BP1=$$REFILINF(BP59)
"RTN","BPSSCRU2",143,0)
 Q:BP1<0 -1
"RTN","BPSSCRU2",144,0)
 Q $P(BP1,U,2) ; i.e. it is non-released if there is no any release date
"RTN","BPSSCRU2",145,0)
 ;
"RTN","BPSSCRU2",146,0)
 ;release status
"RTN","BPSSCRU2",147,0)
RL(BP59) ;
"RTN","BPSSCRU2",148,0)
 Q $S($$ISRXREL(BP59)>0:"R",1:"N")
"RTN","BPSSCRU2",149,0)
 ;/**
"RTN","BPSSCRU2",150,0)
 ;get refill (including original refill) info by BP59
"RTN","BPSSCRU2",151,0)
 ;Input:
"RTN","BPSSCRU2",152,0)
 ; BP59 - pointer to file #9002313.59
"RTN","BPSSCRU2",153,0)
 ;Output:
"RTN","BPSSCRU2",154,0)
 ;returns:
"RTN","BPSSCRU2",155,0)
 ;on error : "-1"  
"RTN","BPSSCRU2",156,0)
 ;on success : refill# ^ release date ^label print date ^ fill date ^ issue date
"RTN","BPSSCRU2",157,0)
REFILINF(BP59) ;*/
"RTN","BPSSCRU2",158,0)
 N BP1 S BP1=$$RXREF(BP59)
"RTN","BPSSCRU2",159,0)
 N BPRX S BPRX=$P(BP1,U,1) ;ptr to #52
"RTN","BPSSCRU2",160,0)
 N BPREF S BPREF=$P(BP1,U,2) ;ptr in its refill multiple
"RTN","BPSSCRU2",161,0)
 I BPREF,$$IFREFILL(BPRX,BPREF)=0 Q -1  ;if bad data
"RTN","BPSSCRU2",162,0)
 ;original refill
"RTN","BPSSCRU2",163,0)
 I BPREF=0 Q "0"_U_$$RXRELDT(BPRX)_U_U_$$RXFILDT(BPRX)_U_$$RXISSDT(BPRX)
"RTN","BPSSCRU2",164,0)
 ;refill's release date
"RTN","BPSSCRU2",165,0)
 I BPREF>0 Q BPREF_U_$$REFRELDT(BPRX,BPREF)_U_U_$$REFFILDT(BPRX,BPREF)_U_$$REFISSDT(BPRX,BPREF)
"RTN","BPSSCRU2",166,0)
 Q -1
"RTN","BPSSCRU2",167,0)
 ;
"RTN","BPSSCRU2",168,0)
 ;-Prescriptions-----------------------
"RTN","BPSSCRU2",169,0)
 ;RX issue date
"RTN","BPSSCRU2",170,0)
RXISSDT(BPRX) ;
"RTN","BPSSCRU2",171,0)
 Q +$$RXAPI1^BPSUTIL1(BPRX,1,"I")
"RTN","BPSSCRU2",172,0)
 ;
"RTN","BPSSCRU2",173,0)
 ;RX's release date
"RTN","BPSSCRU2",174,0)
RXRELDT(BPRX) ;
"RTN","BPSSCRU2",175,0)
 Q +$$RXAPI1^BPSUTIL1(BPRX,31,"I")
"RTN","BPSSCRU2",176,0)
 ;
"RTN","BPSSCRU2",177,0)
 ;RX's fill date
"RTN","BPSSCRU2",178,0)
RXFILDT(BPRX) ;
"RTN","BPSSCRU2",179,0)
 Q +$$RXAPI1^BPSUTIL1(BPRX,22,"I")
"RTN","BPSSCRU2",180,0)
 ;
"RTN","BPSSCRU2",181,0)
 ;refill's release date
"RTN","BPSSCRU2",182,0)
REFRELDT(BPRX,BPREF) ;
"RTN","BPSSCRU2",183,0)
 Q +$$RXSUBF1^BPSUTIL1(BPRX,52,52.1,BPREF,17,"I")
"RTN","BPSSCRU2",184,0)
 ;
"RTN","BPSSCRU2",185,0)
 ;refill's refill date
"RTN","BPSSCRU2",186,0)
REFFILDT(BPRX,BPREF) ;
"RTN","BPSSCRU2",187,0)
 Q $$RXSUBF1^BPSUTIL1(BPRX,52,52.1,BPREF,.01,"I")
"RTN","BPSSCRU2",188,0)
 ;
"RTN","BPSSCRU2",189,0)
 ;refill's issue date
"RTN","BPSSCRU2",190,0)
REFISSDT(BPRX,BPREF) ;
"RTN","BPSSCRU2",191,0)
 Q $$REFDISDT(BPRX,BPREF)
"RTN","BPSSCRU2",192,0)
 ;
"RTN","BPSSCRU2",193,0)
 ;refill's dispense date
"RTN","BPSSCRU2",194,0)
REFDISDT(BPRX,BPREF) ;
"RTN","BPSSCRU2",195,0)
 Q $$RXSUBF1^BPSUTIL1(BPRX,52,52.1,BPREF,10.1,"I")
"RTN","BPSSCRU2",196,0)
 ;
"RTN","BPSSCRU2",197,0)
 ;if refill exists
"RTN","BPSSCRU2",198,0)
IFREFILL(BPRX,BPREF) ;
"RTN","BPSSCRU2",199,0)
 Q $$RXSUBF1^BPSUTIL1(BPRX,52,52.1,BPREF,.01,"I")'=""
"RTN","BPSSCRU2",200,0)
 ;/**
"RTN","BPSSCRU2",201,0)
 ;input 
"RTN","BPSSCRU2",202,0)
 ;ptr to 9002313.59
"RTN","BPSSCRU2",203,0)
 ;output :
"RTN","BPSSCRU2",204,0)
 ; BB - back billing
"RTN","BPSSCRU2",205,0)
 ; P2 - PRO Option
"RTN","BPSSCRU2",206,0)
 ; RS - ECME user screen resubmission (BPS*1*20)
"RTN","BPSSCRU2",207,0)
 ; RT - all other values in (#1201) RX ACTION field on 9002313.59
"RTN","BPSSCRU2",208,0)
RTBB(BP59) ;*/
"RTN","BPSSCRU2",209,0)
 N BPTRBB
"RTN","BPSSCRU2",210,0)
 S BPTRBB=$P($G(^BPST(BP59,12)),U)
"RTN","BPSSCRU2",211,0)
 I BPTRBB="" Q "**"
"RTN","BPSSCRU2",212,0)
 I BPTRBB="BB" Q "BB"
"RTN","BPSSCRU2",213,0)
 I BPTRBB="P2" Q "P2"
"RTN","BPSSCRU2",214,0)
 I BPTRBB="P2S" Q "P2"
"RTN","BPSSCRU2",215,0)
 I BPTRBB="ERES" Q "RS"    ; ECME user screen resubmit (BPS*1*20)
"RTN","BPSSCRU2",216,0)
 I BPTRBB="ERWV" Q "RS"    ; ECME user screen resubmit/without reversal (BPS*1*20)
"RTN","BPSSCRU2",217,0)
 I BPTRBB="ERNB" Q "RS"    ; ECME user screen resubmit TRI/CVA non-billable (BPS*1*20)
"RTN","BPSSCRU2",218,0)
 Q "RT"
"RTN","BPSSCRU2",219,0)
 ;
"RTN","BPSSCRU2",220,0)
 ;------------ patient's name
"RTN","BPSSCRU2",221,0)
PATNAME(BPDFN) ;
"RTN","BPSSCRU2",222,0)
 Q $E($P($G(^DPT(BPDFN,0)),U),1,15)
"RTN","BPSSCRU2",223,0)
 ;
"RTN","BPSSCRU2",224,0)
SSN4(DFN) ;last 4 SSN
"RTN","BPSSCRU2",225,0)
 N X
"RTN","BPSSCRU2",226,0)
 S X=$P($G(^DPT(DFN,0)),U,9)
"RTN","BPSSCRU2",227,0)
 Q "("_$E(X,$L(X)-3,$L(X))_")"
"RTN","BPSSCRU2",228,0)
 ;
"RTN","BPSSCRU2",229,0)
 ;get drug generic name
"RTN","BPSSCRU2",230,0)
DRGNAM(BP50) ;
"RTN","BPSSCRU2",231,0)
 ;BP50 - ptr to #50
"RTN","BPSSCRU2",232,0)
 Q $E($$DRUGDIE^BPSUTIL1(BP50,.01,"E"),1,35)
"RTN","BPSSCRU2",233,0)
 ;get drug
"RTN","BPSSCRU2",234,0)
GETDRUG(BP52) ;
"RTN","BPSSCRU2",235,0)
 ;return value:
"RTN","BPSSCRU2",236,0)
 ; 0 - unknown
"RTN","BPSSCRU2",237,0)
 ; n - ptr to DRUG file #50
"RTN","BPSSCRU2",238,0)
 Q +$$RXAPI1^BPSUTIL1(BP52,6,"I")
"RTN","BPSSCRU2",239,0)
 ;
"RTN","BPSSCRU2",240,0)
GETDRG59(BP59) ;
"RTN","BPSSCRU2",241,0)
 N BPX
"RTN","BPSSCRU2",242,0)
 S BPX=$$RXREF(BP59)
"RTN","BPSSCRU2",243,0)
 Q $$GETDRUG(+BPX)
"RTN","BPSSCRU2",244,0)
 ;
"RTN","BPSSCRU2",245,0)
 ;
"RTN","BPSSCRU2",246,0)
 ;review %% for each of claims in the array 
"RTN","BPSSCRU2",247,0)
 ;and calculate "overall" "done" status
"RTN","BPSSCRU2",248,0)
 ;input:
"RTN","BPSSCRU2",249,0)
 ; BPARR59 - array of ptr to #9002313.59
"RTN","BPSSCRU2",250,0)
 ;output:
"RTN","BPSSCRU2",251,0)
 ; status
"RTN","BPSSCRU2",252,0)
FINISHST(BPARR59) ;
"RTN","BPSSCRU2",253,0)
 N BPFIN,BP59
"RTN","BPSSCRU2",254,0)
 S BPFIN=1,BP59=0
"RTN","BPSSCRU2",255,0)
 F  S BP59=$O(BPARR59(BP59)) Q:+BP59=0  D  Q:BPFIN=0
"RTN","BPSSCRU2",256,0)
 . I $$PRCNTG^BPSSCRU3(BP59)<99 S BPFIN=0
"RTN","BPSSCRU2",257,0)
 I BPFIN=1 Q "**FINISHED**"
"RTN","BPSSCRU2",258,0)
 Q ""
"RTN","BPSSCRU2",259,0)
 ;
"RTN","BPSSCRU2",260,0)
 ;
"RTN","BPSSCRU2",261,0)
 ;BPRX - ptr to #52
"RTN","BPSSCRU2",262,0)
RXNUM(BPRX) ;
"RTN","BPSSCRU2",263,0)
 Q $$RXAPI1^BPSUTIL1(BPRX,.01,"E")_$S(+$$RXAPI1^BPSUTIL1(BPRX,105,"I"):"$",1:"")
"RTN","BPSSCRU2",264,0)
 ;
"RTN","BPSSCRU2",265,0)
 ;/**
"RTN","BPSSCRU2",266,0)
 ;get NDC
"RTN","BPSSCRU2",267,0)
 ;input 
"RTN","BPSSCRU2",268,0)
 ;BPRX - ptr to #52
"RTN","BPSSCRU2",269,0)
 ;BPREF - refill # (0,1,2,3...)
"RTN","BPSSCRU2",270,0)
NDC(BPRX,BPREF) ;*/
"RTN","BPSSCRU2",271,0)
 N X
"RTN","BPSSCRU2",272,0)
 S X=$TR($$GETNDC^PSONDCUT(BPRX,BPREF),"-","") ;remove dashes
"RTN","BPSSCRU2",273,0)
 Q X
"RTN","BPSSCRU2",274,0)
 ;
"RTN","BPSSCRU2",275,0)
DRGNAME(BP59) ;drug name BP59 -ptr to .59 file
"RTN","BPSSCRU2",276,0)
 N BPRX
"RTN","BPSSCRU2",277,0)
 S BPRX=+$P($G(^BPST(BP59,1)),U,11) ;ptr to RX node in #52
"RTN","BPSSCRU2",278,0)
 Q $E($$DRGNAM($$GETDRUG(BPRX)),1,23)
"RTN","BPSSCRU2",279,0)
 ;
"RTN","BPSSCRU2",280,0)
 ;is the number even?
"RTN","BPSSCRU2",281,0)
 ;1-yes
"RTN","BPSSCRU2",282,0)
 ;0 -no
"RTN","BPSSCRU2",283,0)
ISEVEN(BPNUM) ;
"RTN","BPSSCRU2",284,0)
 Q ((BPNUM/2)-(BPNUM\2))=0
"RTN","BPSSCRU2",285,0)
 ;
"RTN","BPSSCRU2",286,0)
 ;BPSTR - string to format
"RTN","BPSSCRU2",287,0)
 ;BPSMLEN - max lenght
"RTN","BPSSCRU2",288,0)
 ;BPSCHR - char to add
"RTN","BPSSCRU2",289,0)
 ;BPSLFT - 1 - add from the left, 0 - from the right
"RTN","BPSSCRU2",290,0)
FORMAT(BPSTR,BPSMLEN,BPSCHR,BPSLFT) ;
"RTN","BPSSCRU2",291,0)
 N LN S LN=$L(BPSTR)
"RTN","BPSSCRU2",292,0)
 N ZZ S ZZ=""
"RTN","BPSSCRU2",293,0)
 I LN=BPSMLEN Q BPSTR
"RTN","BPSSCRU2",294,0)
 I LN>BPSMLEN Q:BPSLFT $E(BPSTR,LN-BPSMLEN+1,9999) Q $E(BPSTR,1,BPSMLEN)
"RTN","BPSSCRU2",295,0)
 S $P(ZZ,BPSCHR,BPSMLEN-LN+1)=""
"RTN","BPSSCRU2",296,0)
 Q:BPSLFT ZZ_BPSTR
"RTN","BPSSCRU2",297,0)
 Q BPSTR_ZZ
"RTN","BPSSCRU2",298,0)
 ;
"RTN","BPSSCRU2",299,0)
 ;/**
"RTN","BPSSCRU2",300,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSSCRU2",301,0)
 ;output :
"RTN","BPSSCRU2",302,0)
 ;ECME number from 9002313.02
"RTN","BPSSCRU2",303,0)
 ; 7 or 12 digits of the prescription IEN file 52
"RTN","BPSSCRU2",304,0)
 ; or 12 spaces
"RTN","BPSSCRU2",305,0)
ECMENUM(BP59) ;*/
"RTN","BPSSCRU2",306,0)
 N BPST0,BPST4,PC,PF,PR,X
"RTN","BPSSCRU2",307,0)
 S BPST0=$G(^BPST(BP59,0)),PC=$P(BPST0,U,4),PF=$P(BPST0,U,9)
"RTN","BPSSCRU2",308,0)
 S BPST4=$G(^BPST(BP59,4)),PR=$P(BPST4,U,1)
"RTN","BPSSCRU2",309,0)
 I PR]"" S PC=PR ;This is a reversal
"RTN","BPSSCRU2",310,0)
 I PC=""!(PF="") Q $$FORMAT("",12," ",1)
"RTN","BPSSCRU2",311,0)
 S X=$P($G(^BPSC(PC,400,PF,400)),U,2)
"RTN","BPSSCRU2",312,0)
 I X="" Q $$FORMAT(X,12," ",1)
"RTN","BPSSCRU2",313,0)
 Q $E(X,3,14)
"RTN","BPSSCRU3")
0^5^B43064796
"RTN","BPSSCRU3",1,0)
BPSSCRU3 ;BHAM ISC/SS - ECME SCREEN UTILITIES ;05-APR-05
"RTN","BPSSCRU3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8,9,10,20**;JUN 2004;Build 27
"RTN","BPSSCRU3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRU3",4,0)
 ;USER SCREEN
"RTN","BPSSCRU3",5,0)
 Q
"RTN","BPSSCRU3",6,0)
 ;get comment from BPS TRANSACTION file
"RTN","BPSSCRU3",7,0)
 ;BP59 - ien in that file
"RTN","BPSSCRU3",8,0)
COMMENT(BP59) ;
"RTN","BPSSCRU3",9,0)
 N BPCMNT,BPX,BPTXT
"RTN","BPSSCRU3",10,0)
 S BPCMNT=$O(^BPST(BP59,11,999999),-1)
"RTN","BPSSCRU3",11,0)
 I BPCMNT="" Q ""
"RTN","BPSSCRU3",12,0)
 S BPX=$G(^BPST(BP59,11,BPCMNT,0))
"RTN","BPSSCRU3",13,0)
 S BPTXT=$P(BPX,U,3) I $L(BPTXT)>60 S BPTXT=$S(+$P(BPX,U,4):$E(BPTXT,1,50)_"...",1:$E(BPTXT,1,58)_"...")
"RTN","BPSSCRU3",14,0)
 Q $$DATTIM($P(BPX,U,1)\1)_$S(+$P(BPX,U,4):" (Pharm)",1:"")_" - "_BPTXT_U_$$USERNAM^BPSCMT01($P(BPX,U,2))
"RTN","BPSSCRU3",15,0)
 ;
"RTN","BPSSCRU3",16,0)
DATTIM(X) ;Convert FM date to displayable (mm/dd/yy HH:MM) format.
"RTN","BPSSCRU3",17,0)
 I +X=0 W ""
"RTN","BPSSCRU3",18,0)
 N DATE,YR,BPT,BPM,BPH,BPAP
"RTN","BPSSCRU3",19,0)
 I $G(X) S YR=$E(X,2,3)
"RTN","BPSSCRU3",20,0)
 I $G(X) S DATE=$S(X:$E(X,4,5)_"/"_$E(X,6,7)_"/"_YR,1:"")
"RTN","BPSSCRU3",21,0)
 S BPT=$P(X,".",2) S:$L(BPT)<4 BPT=BPT_$E("0000",1,4-$L(BPT))
"RTN","BPSSCRU3",22,0)
 S BPH=$E(BPT,1,2),BPM=$E(BPT,3,4)
"RTN","BPSSCRU3",23,0)
 S BPAP="a" I BPH>12 S BPH=BPH-12,BPAP="p" S:$L(BPH)<2 BPH="0"_BPH
"RTN","BPSSCRU3",24,0)
 I BPT S:'BPH BPH=12 S DATE=DATE_" "_BPH_":"_BPM_BPAP
"RTN","BPSSCRU3",25,0)
 Q $G(DATE)
"RTN","BPSSCRU3",26,0)
 ;/**
"RTN","BPSSCRU3",27,0)
 ;a wrapper for $$STATUS^BPSOSRX to get the status by BPS TRANSACTION pointer
"RTN","BPSSCRU3",28,0)
 ;input BP59 - ptr to 9002313.59
"RTN","BPSSCRU3",29,0)
 ;output - pieces 1,2 and 3 of the $$STATUS^BPSOSRX output
"RTN","BPSSCRU3",30,0)
 ; example: "E REVERSAL ACCEPTED^3071206.152829^Reversal Accepted"
"RTN","BPSSCRU3",31,0)
CLAIMST(BP59) ;*/
"RTN","BPSSCRU3",32,0)
 N BPX,BPSTATUS,BPREF,BPSCHED
"RTN","BPSSCRU3",33,0)
 N BPCOB S BPCOB=$$COB59^BPSUTIL2(BP59)
"RTN","BPSSCRU3",34,0)
 S BPSCHED=0
"RTN","BPSSCRU3",35,0)
 S BPX=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSSCRU3",36,0)
 S BPREF=$P(BPX,U,2)
"RTN","BPSSCRU3",37,0)
 S BPSTATUS=$$STATUS^BPSOSRX(+BPX,BPREF,,,BPCOB)
"RTN","BPSSCRU3",38,0)
 ;if the request completed (99%) and there is another active (scheduled, activated, 
"RTN","BPSSCRU3",39,0)
 ;in process,completed but not inactivated yet) request then return IN PROGRESS
"RTN","BPSSCRU3",40,0)
 I $P(BPSTATUS,U,4)=99,$$ACTREQS^BPSOSRX6(+BPX,BPREF,BPCOB) S BPSCHED=1
"RTN","BPSSCRU3",41,0)
 I BPSCHED I ($P(BPSTATUS,U)="E PAYABLE")!($P(BPSTATUS,U)="E REVERSAL ACCEPTED") Q "IN PROGRESS"_U_$P(BPSTATUS,U,2)
"RTN","BPSSCRU3",42,0)
 Q $P(BPSTATUS,U,1,3)
"RTN","BPSSCRU3",43,0)
 ;
"RTN","BPSSCRU3",44,0)
 ;/**
"RTN","BPSSCRU3",45,0)
 ;pointers for RESPONSE file (#9002313.03) by pointer in TRANSACTION file #9002313.59
"RTN","BPSSCRU3",46,0)
 ;B59 - ptr to #9002313.59
"RTN","BPSSCRU3",47,0)
 ;BPRESP - ptr to #9002313.03
"RTN","BPSSCRU3",48,0)
 ;BPPOS - position inside #9002313.03 (i.e. the number 
"RTN","BPSSCRU3",49,0)
 ;of the claim in the transmission - currently we always have only 1
"RTN","BPSSCRU3",50,0)
GRESPPOS(BP59,BPRESP,BPPOS) ;*/
"RTN","BPSSCRU3",51,0)
 I $G(^BPST(BP59,4)) D  ; reversal kind of message
"RTN","BPSSCRU3",52,0)
 . S BPRESP=+$P(^BPST(BP59,4),U,2)
"RTN","BPSSCRU3",53,0)
 . S BPPOS=1
"RTN","BPSSCRU3",54,0)
 E  D
"RTN","BPSSCRU3",55,0)
 . S BPRESP=+$P($G(^BPST(BP59,0)),U,5)
"RTN","BPSSCRU3",56,0)
 . S BPPOS=+$P($G(^BPST(BP59,0)),U,9)
"RTN","BPSSCRU3",57,0)
 Q:+BPRESP=0 0
"RTN","BPSSCRU3",58,0)
 Q:+BPPOS=0 0
"RTN","BPSSCRU3",59,0)
 Q 1
"RTN","BPSSCRU3",60,0)
 ;
"RTN","BPSSCRU3",61,0)
 ;/**
"RTN","BPSSCRU3",62,0)
 ;Messages from the BPS RESPONSE file
"RTN","BPSSCRU3",63,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSSCRU3",64,0)
 ;FIELD - what field to get
"RTN","BPSSCRU3",65,0)
 ;
"RTN","BPSSCRU3",66,0)
GETMESS(FIELD,BP59) ;
"RTN","BPSSCRU3",67,0)
 I '$G(FIELD) Q ""
"RTN","BPSSCRU3",68,0)
 I '$G(BP59) Q ""
"RTN","BPSSCRU3",69,0)
 N BPRESP,BPPOS
"RTN","BPSSCRU3",70,0)
 ; Get response and position in the BPS RESPONSE file
"RTN","BPSSCRU3",71,0)
 I $$GRESPPOS(BP59,.BPRESP,.BPPOS)=0 Q ""
"RTN","BPSSCRU3",72,0)
 ; 504-F4 (Message)
"RTN","BPSSCRU3",73,0)
 I FIELD=504 Q $P($G(^BPSR(BPRESP,504)),U)
"RTN","BPSSCRU3",74,0)
 ; 526-FQ (Additional Message Information) - Get first entry of the multiple)
"RTN","BPSSCRU3",75,0)
 I FIELD=526 N MESSAGE,N D  Q MESSAGE
"RTN","BPSSCRU3",76,0)
 . N ADDMESS
"RTN","BPSSCRU3",77,0)
 . D ADDMESS^BPSSCRLG(BPRESP,BPPOS,.ADDMESS)
"RTN","BPSSCRU3",78,0)
 . S MESSAGE=""
"RTN","BPSSCRU3",79,0)
 . S N=$O(ADDMESS(""))
"RTN","BPSSCRU3",80,0)
 . I N S MESSAGE=$E(ADDMESS(N),1,200)
"RTN","BPSSCRU3",81,0)
 Q ""
"RTN","BPSSCRU3",82,0)
 ;
"RTN","BPSSCRU3",83,0)
 ;reject message from RESPONSE file
"RTN","BPSSCRU3",84,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSSCRU3",85,0)
 ;BPARR1 - array to return messages (by ref)
"RTN","BPSSCRU3",86,0)
 ;BPN1 - index for the array (by ref - will 
"RTN","BPSSCRU3",87,0)
 ;  be incremented if more than one node added)
"RTN","BPSSCRU3",88,0)
 ;BPMLEN - max length for each string
"RTN","BPSSCRU3",89,0)
 ;PBPREF - for prefix string
"RTN","BPSSCRU3",90,0)
 ;compare GETRJCOD from BPSSCRU2
"RTN","BPSSCRU3",91,0)
GETRJCOD(BP59,BPARR1,BPN1,BPMLEN,PBPREF) ;
"RTN","BPSSCRU3",92,0)
 N BP59DAT S BP59DAT=$G(^BPST(BP59,0))
"RTN","BPSSCRU3",93,0)
 N BPRESP,BPPOS
"RTN","BPSSCRU3",94,0)
 N BPRJCOD
"RTN","BPSSCRU3",95,0)
 N BPRJTXT
"RTN","BPSSCRU3",96,0)
 N BPSTR
"RTN","BPSSCRU3",97,0)
 N BPRJ
"RTN","BPSSCRU3",98,0)
 ;pointers for RESPONSE file (#9002313.03) by pointer in TRANSACTION file #9002313.59
"RTN","BPSSCRU3",99,0)
 ;get response and position 
"RTN","BPSSCRU3",100,0)
 I $$GRESPPOS(BP59,.BPRESP,.BPPOS)=0 Q
"RTN","BPSSCRU3",101,0)
 S BPRJ=0
"RTN","BPSSCRU3",102,0)
 S BPSTR=""
"RTN","BPSSCRU3",103,0)
 F  S BPRJ=$O(^BPSR(BPRESP,1000,BPPOS,511,BPRJ)) Q:+BPRJ=0  D
"RTN","BPSSCRU3",104,0)
 . S BPRJCOD=$P($G(^BPSR(BPRESP,1000,BPPOS,511,BPRJ,0)),U)
"RTN","BPSSCRU3",105,0)
 . Q:$L(BPRJCOD)=0
"RTN","BPSSCRU3",106,0)
 . S BPRJTXT=$$GETRJNAM(BPRJCOD)
"RTN","BPSSCRU3",107,0)
 . S BPN1=BPN1+1,BPARR1(BPN1)=PBPREF_BPRJTXT
"RTN","BPSSCRU3",108,0)
 Q BPN1
"RTN","BPSSCRU3",109,0)
 ;/**
"RTN","BPSSCRU3",110,0)
 ;Input:
"RTN","BPSSCRU3",111,0)
 ; BP59 - pointer to file #9002313.59
"RTN","BPSSCRU3",112,0)
 ; BPSNBR - flag to determine if eT/eC pseudo-reject codes should also be returned for non-billable entries
"RTN","BPSSCRU3",113,0)
 ;          default is to NOT include them (leave parameter blank)
"RTN","BPSSCRU3",114,0)
 ;Output:
"RTN","BPSSCRU3",115,0)
 ; BPRCODES - array for reject codes by reference
"RTN","BPSSCRU3",116,0)
REJCODES(BP59,BPRCODES,BPSNBR) ;get reject codes
"RTN","BPSSCRU3",117,0)
 N BPRESP,BPPOS,BPA,BPR
"RTN","BPSSCRU3",118,0)
 ;
"RTN","BPSSCRU3",119,0)
 ; get TRI/CVA non-billable pseudo-reject codes if the flag is set and the entry is non-billable (BPS*1*20)
"RTN","BPSSCRU3",120,0)
 I $G(BPSNBR),$$NB^BPSSCR03(BP59) D
"RTN","BPSSCRU3",121,0)
 . S BPR=$E($$EREJTXT^BPSSCR03(BP59),1,2)    ; get the eT or eC pseudo-reject code
"RTN","BPSSCRU3",122,0)
 . I BPR'="" S BPRCODES(BPR)=""
"RTN","BPSSCRU3",123,0)
 . Q
"RTN","BPSSCRU3",124,0)
 ;
"RTN","BPSSCRU3",125,0)
 ;pointers for RESPONSE file (#9002313.03) by pointer in TRANSACTION file #9002313.59
"RTN","BPSSCRU3",126,0)
 ;get response and position
"RTN","BPSSCRU3",127,0)
 I $$GRESPPOS(BP59,.BPRESP,.BPPOS)=0 Q
"RTN","BPSSCRU3",128,0)
 ;
"RTN","BPSSCRU3",129,0)
 S BPA=0
"RTN","BPSSCRU3",130,0)
 F  S BPA=$O(^BPSR(BPRESP,1000,BPPOS,511,BPA)) Q:'BPA  D
"RTN","BPSSCRU3",131,0)
 . S BPR=$P(^BPSR(BPRESP,1000,BPPOS,511,BPA,0),U)
"RTN","BPSSCRU3",132,0)
 . I BPR'="" S BPRCODES(BPR)=""
"RTN","BPSSCRU3",133,0)
 Q
"RTN","BPSSCRU3",134,0)
 ;/**
"RTN","BPSSCRU3",135,0)
 ;BPRJCODE - code
"RTN","BPSSCRU3",136,0)
GETRJNAM(BPRJCODE) ;*/
"RTN","BPSSCRU3",137,0)
 N BPRJIEN
"RTN","BPSSCRU3",138,0)
 S BPRJIEN=$O(^BPSF(9002313.93,"B",BPRJCODE,0))
"RTN","BPSSCRU3",139,0)
 Q:+BPRJIEN=0 ""
"RTN","BPSSCRU3",140,0)
 Q BPRJCODE_":"_$P($G(^BPSF(9002313.93,BPRJIEN,0)),U,2)
"RTN","BPSSCRU3",141,0)
 ;/**
"RTN","BPSSCRU3",142,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSSCRU3",143,0)
 ;was the claim ever autoreversed ?
"RTN","BPSSCRU3",144,0)
AUTOREV(BP59) ;*/
"RTN","BPSSCRU3",145,0)
 N BP02
"RTN","BPSSCRU3",146,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSSCRU3",147,0)
 Q +$P($G(^BPSC(BP02,0)),U,7)
"RTN","BPSSCRU3",148,0)
 ;
"RTN","BPSSCRU3",149,0)
 ;/**
"RTN","BPSSCRU3",150,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSSCRU3",151,0)
 ;returns :
"RTN","BPSSCRU3",152,0)
 ;0 Waiting to start
"RTN","BPSSCRU3",153,0)
 ;10 Gathering claim info
"RTN","BPSSCRU3",154,0)
 ;19 Special Grouping
"RTN","BPSSCRU3",155,0)
 ;30 Waiting for packet build
"RTN","BPSSCRU3",156,0)
 ;31 Wait for retry (insurer asleep)
"RTN","BPSSCRU3",157,0)
 ;40 Packet being built
"RTN","BPSSCRU3",158,0)
 ;50 Waiting for transmit
"RTN","BPSSCRU3",159,0)
 ;51 Wait for retry (comms error)
"RTN","BPSSCRU3",160,0)
 ;60 Transmitting
"RTN","BPSSCRU3",161,0)
 ;70 Receiving Response
"RTN","BPSSCRU3",162,0)
 ;80 Waiting to process response
"RTN","BPSSCRU3",163,0)
 ;90 Processing response
"RTN","BPSSCRU3",164,0)
 ;99 Done
"RTN","BPSSCRU3",165,0)
 ;
"RTN","BPSSCRU3",166,0)
PRCNTG(BP59) ;*/
"RTN","BPSSCRU3",167,0)
 Q +$P($G(^BPST(BP59,0)),U,2)
"RTN","BPSSCRU3",168,0)
 ;
"RTN","BPSSCRU3",169,0)
 ;
"RTN","BPSSCRU3",170,0)
LINE(BPN,BPCH) ;
"RTN","BPSSCRU3",171,0)
 N BP1
"RTN","BPSSCRU3",172,0)
 S $P(BP1,BPCH,BPN+1)=""
"RTN","BPSSCRU3",173,0)
 Q BP1
"RTN","BPSSCRU3",174,0)
 ;
"RTN","BPSSCRU3",175,0)
DTTIME(X) ;Convert FM date to displayable (mm/dd/yy HH:MM) format.
"RTN","BPSSCRU3",176,0)
 I +X=0 W ""
"RTN","BPSSCRU3",177,0)
 N DATE,YR,BPT,BPM,BPH,BPAP,BPS
"RTN","BPSSCRU3",178,0)
 I $G(X) S YR=$E(X,1,3)+1700
"RTN","BPSSCRU3",179,0)
 I $G(X) S DATE=$S(X:$E(X,4,5)_"/"_$E(X,6,7)_"/"_YR,1:"")
"RTN","BPSSCRU3",180,0)
 S BPT=$P(X,".",2)
"RTN","BPSSCRU3",181,0)
 I BPT S:$L(BPT)<6 BPT=BPT_$E("000000",1,6-$L(BPT))
"RTN","BPSSCRU3",182,0)
 S BPH=$E(BPT,1,2),BPM=$E(BPT,3,4),BPS=$E(BPT,5,6)
"RTN","BPSSCRU3",183,0)
 I BPT S DATE=DATE_"@"_BPH_":"_BPM_":"_BPS
"RTN","BPSSCRU3",184,0)
 Q $G(DATE)
"RTN","BPSSCRU3",185,0)
 ;
"RTN","BPSSCRU3",186,0)
 ;call IB API to get insurance data, then select proper insurance by its name
"RTN","BPSSCRU3",187,0)
 ;get its phone number
"RTN","BPSSCRU3",188,0)
 ;input: 
"RTN","BPSSCRU3",189,0)
 ; DFN - patient IEN in #2
"RTN","BPSSCRU3",190,0)
 ; BPDOS - date of service
"RTN","BPSSCRU3",191,0)
 ; BPINSNM - insurance name
"RTN","BPSSCRU3",192,0)
 ;output: insurance ien^insurance name^phone
"RTN","BPSSCRU3",193,0)
GETPHONE(BPDFN,BPDOS,BPINSNM) ;
"RTN","BPSSCRU3",194,0)
 N BPX,BPZZ,BP1,BPPHONE
"RTN","BPSSCRU3",195,0)
 S BPPHONE=""
"RTN","BPSSCRU3",196,0)
 I $$INSUR^IBBAPI(BPDFN,BPDOS,,.BPZZ,"1,6")'=1 Q ""
"RTN","BPSSCRU3",197,0)
 S BP1="" F  S BP1=$O(BPZZ("IBBAPI","INSUR",BP1)) Q:+BP1=0  D
"RTN","BPSSCRU3",198,0)
 . I BPINSNM=$P($G(BPZZ("IBBAPI","INSUR",BP1,1)),U,2) S BPPHONE=$G(BPZZ("IBBAPI","INSUR",BP1,6)) Q
"RTN","BPSSCRU3",199,0)
 Q BPPHONE
"RTN","BPSSCRU3",200,0)
 ;
"RTN","BPSSCRU3",201,0)
 ;try to get insurance name and phone from #9002313.59, #9002313.57 and from INSUR^IBBAPI 
"RTN","BPSSCRU3",202,0)
 ;input: BP59 - ien in #9002313.59
"RTN","BPSSCRU3",203,0)
 ;return insurance_name^phone#
"RTN","BPSSCRU3",204,0)
NAMEPHON(BP59) ;
"RTN","BPSSCRU3",205,0)
 N BPHONE,BPINSNM,BPINSID,BP57,BPINSN
"RTN","BPSSCRU3",206,0)
 S BPHONE=$P($G(^BPST(BP59,10,+$G(^BPST(BP59,9)),3)),U,2)
"RTN","BPSSCRU3",207,0)
 S BPINSNM=$P($G(^BPST(BP59,10,+$G(^BPST(BP59,9)),0)),U,7)
"RTN","BPSSCRU3",208,0)
 S BP57=0
"RTN","BPSSCRU3",209,0)
 F  Q:(BPHONE'="")&(BPINSNM'="")  S BP57=$O(^BPSTL("B",BP59,BP57)) Q:+BP57=0  D
"RTN","BPSSCRU3",210,0)
 . S BPINSN=+$G(^BPSTL(BP57,9))
"RTN","BPSSCRU3",211,0)
 . S:BPHONE="" BPHONE=$P($G(^BPSTL(BP57,10,BPINSN,3)),U,2)
"RTN","BPSSCRU3",212,0)
 . S:BPINSNM="" BPINSNM=$P($G(^BPSTL(BP57,10,BPINSN,0)),U,7)
"RTN","BPSSCRU3",213,0)
 ;
"RTN","BPSSCRU3",214,0)
 I (BPINSNM'="")&(BPHONE="") D
"RTN","BPSSCRU3",215,0)
 . S BPDOS=+$P($G(^BPST(BP59,12)),U,2)\1
"RTN","BPSSCRU3",216,0)
 . I BPDOS=0 S BPDOS=+$P($G(^BPST(BP59,0)),U,8)\1
"RTN","BPSSCRU3",217,0)
 . S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSSCRU3",218,0)
 . S BPHONE=$$GETPHONE(BPDFN,BPDOS,BPINSNM)
"RTN","BPSSCRU3",219,0)
 Q BPINSNM_U_BPHONE
"RTN","BPSSCRU3",220,0)
 ;
"RTN","BPSSCRU3",221,0)
COM(BPSRXI,BPSRXR,BPSCOB,BPSARRAY) ; Get Comments
"RTN","BPSSCRU3",222,0)
 ; This API retrieves comments for pharmacist from BPS Transaction.
"RTN","BPSSCRU3",223,0)
 ;
"RTN","BPSSCRU3",224,0)
 ; Input:  BPSRXI - Prescription IEN (Pointer to the PRESCRIPTION
"RTN","BPSSCRU3",225,0)
 ;                  file (#52).  This parameter is required.
"RTN","BPSSCRU3",226,0)
 ;         BPSRXR - Fill Number (0 for original, 1 for 1st refill,
"RTN","BPSSCRU3",227,0)
 ;                  2 for the 2nd refill, etc.).  If this parameter
"RTN","BPSSCRU3",228,0)
 ;                  is missing, it will default to zero.
"RTN","BPSSCRU3",229,0)
 ;         BPSCOB - Coordination of Benefit value (1-Primary,
"RTN","BPSSCRU3",230,0)
 ;                  2-Secondary, 3-Tertiary).  If not passed in,
"RTN","BPSSCRU3",231,0)
 ;                  primary is assumed.
"RTN","BPSSCRU3",232,0)
 ;
"RTN","BPSSCRU3",233,0)
 ; Output: BPSARRAY - Return array of data in the format of:
"RTN","BPSSCRU3",234,0)
 ;         Array Name(Transaction Date,Count Index)=Pharmacy Flag ^
"RTN","BPSSCRU3",235,0)
 ;              Comment ^ User entering comment
"RTN","BPSSCRU3",236,0)
 ;
"RTN","BPSSCRU3",237,0)
 N BP59,BPSI,BPSCNT,BPSPFLG,BPSDATE,BPSUSER,BPSCOM,BPSX
"RTN","BPSSCRU3",238,0)
 ;
"RTN","BPSSCRU3",239,0)
 I '$G(BPSRXI) Q
"RTN","BPSSCRU3",240,0)
 ;
"RTN","BPSSCRU3",241,0)
 ; Note that $$IEN59^BPSOSRX will treat BPSRXR="" as the original
"RTN","BPSSCRU3",242,0)
 ;   fill (0) and BPSCOB="" as primary (1)
"RTN","BPSSCRU3",243,0)
 S BP59=$$IEN59^BPSOSRX(BPSRXI,$G(BPSRXR),$G(BPSCOB))
"RTN","BPSSCRU3",244,0)
 I '$D(^BPST(BP59,0)) Q
"RTN","BPSSCRU3",245,0)
 ;
"RTN","BPSSCRU3",246,0)
 S (BPSI,BPSCNT)=0
"RTN","BPSSCRU3",247,0)
 F  S BPSI=$O(^BPST(BP59,11,BPSI)) Q:'BPSI  D
"RTN","BPSSCRU3",248,0)
 .S BPSPFLG=$$GET1^DIQ(9002313.59111,BPSI_","_BP59,.04,"I")
"RTN","BPSSCRU3",249,0)
 .S BPSDATE=$$GET1^DIQ(9002313.59111,BPSI_","_BP59,.01,"I")
"RTN","BPSSCRU3",250,0)
 .S BPSUSER=$$GET1^DIQ(9002313.59111,BPSI_","_BP59,.02,"I")
"RTN","BPSSCRU3",251,0)
 .S BPSCOM=$$GET1^DIQ(9002313.59111,BPSI_","_BP59,.03)
"RTN","BPSSCRU3",252,0)
 .;
"RTN","BPSSCRU3",253,0)
 .S BPSX=BPSPFLG_"^"_BPSCOM_"^"_BPSUSER
"RTN","BPSSCRU3",254,0)
 .S BPSCNT=BPSCNT+1
"RTN","BPSSCRU3",255,0)
 .S BPSARRAY(BPSDATE,BPSCNT)=BPSX
"RTN","BPSSCRU3",256,0)
 Q
"RTN","BPSSCRU3",257,0)
 ;
"RTN","BPSSCRU6")
0^19^B19836949
"RTN","BPSSCRU6",1,0)
BPSSCRU6 ;BHAM ISC/SS - ECME SCREEN UTILITIES ;22-MAY-06
"RTN","BPSSCRU6",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**3,8,10,20**;JUN 2004;Build 27
"RTN","BPSSCRU6",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSSCRU6",4,0)
 ;USER SCREEN
"RTN","BPSSCRU6",5,0)
 Q
"RTN","BPSSCRU6",6,0)
 ;
"RTN","BPSSCRU6",7,0)
 ;Input:
"RTN","BPSSCRU6",8,0)
 ; BP59 - 
"RTN","BPSSCRU6",9,0)
 ;Output:
"RTN","BPSSCRU6",10,0)
 ; 
"RTN","BPSSCRU6",11,0)
DISPREJ(BP59) ;
"RTN","BPSSCRU6",12,0)
 I '$G(BP59) Q
"RTN","BPSSCRU6",13,0)
 N BPARR,BPN,BPCNT
"RTN","BPSSCRU6",14,0)
 S BPN=0
"RTN","BPSSCRU6",15,0)
 D GETRJCOD^BPSSCRU3(BP59,.BPARR,.BPN,74,"")
"RTN","BPSSCRU6",16,0)
 D WRAPLN2^BPSSCRU5(.BPN,.BPARR,$$GETMESS^BPSSCRU3(504,BP59),74,"",0)
"RTN","BPSSCRU6",17,0)
 D WRAPLN2^BPSSCRU5(.BPN,.BPARR,$$GETMESS^BPSSCRU3(526,BP59),74,"",0)
"RTN","BPSSCRU6",18,0)
 I BPN=0 Q
"RTN","BPSSCRU6",19,0)
 S BPCNT=0
"RTN","BPSSCRU6",20,0)
 F  S BPCNT=$O(BPARR(BPCNT)) Q:+BPCNT=0  D
"RTN","BPSSCRU6",21,0)
 . W:$L(BPARR(BPCNT)) !,?6,BPARR(BPCNT)
"RTN","BPSSCRU6",22,0)
 Q
"RTN","BPSSCRU6",23,0)
 ;
"RTN","BPSSCRU6",24,0)
 ;return Date in specified format
"RTN","BPSSCRU6",25,0)
 ;BPDT - date in FileMan format
"RTN","BPSSCRU6",26,0)
 ;BPMODE:
"RTN","BPSSCRU6",27,0)
 ; 1- like "JUL 23, 2005"
"RTN","BPSSCRU6",28,0)
 ; 2- like "JUL 23, 2005@16:03 "
"RTN","BPSSCRU6",29,0)
 ; 3- MM/DD/YY
"RTN","BPSSCRU6",30,0)
FORMDATE(BPDT,BPMODE) ;
"RTN","BPSSCRU6",31,0)
 N Y,BPTIME,BPHR
"RTN","BPSSCRU6",32,0)
 I $G(BPDT)=0 Q ""
"RTN","BPSSCRU6",33,0)
 I BPMODE=1 S Y=BPDT\1 X ^DD("DD") Q Y
"RTN","BPSSCRU6",34,0)
 I BPMODE=2 S Y=BPDT X ^DD("DD") Q Y
"RTN","BPSSCRU6",35,0)
 I BPMODE=3 S Y=$E(BPDT,4,5)_"/"_$E(BPDT,6,7)_"/"_$E(BPDT,2,3) Q Y
"RTN","BPSSCRU6",36,0)
 Q ""
"RTN","BPSSCRU6",37,0)
 ;
"RTN","BPSSCRU6",38,0)
 ;Generic function to ask a date
"RTN","BPSSCRU6",39,0)
 ;Input:
"RTN","BPSSCRU6",40,0)
 ;BPPROMPT - prompt like "START WITH DATE: "
"RTN","BPSSCRU6",41,0)
 ;BPDFLDT - default for the prompt like "TODAY" or "T" or "T-100" or 12/12/2005
"RTN","BPSSCRU6",42,0)
 ;output:
"RTN","BPSSCRU6",43,0)
 ; 0 - nothing
"RTN","BPSSCRU6",44,0)
 ; <0 quit
"RTN","BPSSCRU6",45,0)
 ; >0 fileman date
"RTN","BPSSCRU6",46,0)
ASKDATE(BPPROMPT,BPDFLDT) ;
"RTN","BPSSCRU6",47,0)
 S %DT="AEX"
"RTN","BPSSCRU6",48,0)
 S %DT("A")=BPPROMPT,%DT("B")=BPDFLDT
"RTN","BPSSCRU6",49,0)
 D ^%DT K %DT
"RTN","BPSSCRU6",50,0)
 I Y<0 Q -1
"RTN","BPSSCRU6",51,0)
 Q +Y
"RTN","BPSSCRU6",52,0)
 ;Release date
"RTN","BPSSCRU6",53,0)
 ;RXNO - RX ien #52
"RTN","BPSSCRU6",54,0)
 ;REFNO - fill number (0=original)
"RTN","BPSSCRU6",55,0)
RELDATE(RXNO,REFNO) ;
"RTN","BPSSCRU6",56,0)
 I REFNO=0 Q $$RXRELDT^BPSSCRU2(+RXNO)
"RTN","BPSSCRU6",57,0)
 Q $$REFRELDT^BPSSCRU2(+RXNO,REFNO)
"RTN","BPSSCRU6",58,0)
 ;
"RTN","BPSSCRU6",59,0)
 ;Group name/Plan name - name originally comes from file #355.3 by BPS TRANSACTION file ien
"RTN","BPSSCRU6",60,0)
PLANNAME(BP59) ;
"RTN","BPSSCRU6",61,0)
 N BPPLNM
"RTN","BPSSCRU6",62,0)
 S BPPLNM=$P($G(^BPST(BP59,10,1,3)),U)
"RTN","BPSSCRU6",63,0)
 S:BPPLNM="" BPPLNM=$P($G(^BPST(BP59,10,1,1)),U,3)
"RTN","BPSSCRU6",64,0)
 Q BPPLNM
"RTN","BPSSCRU6",65,0)
 ;Insurance name - name originally comes from file #36 by BPS TRANSACTION file ien
"RTN","BPSSCRU6",66,0)
INSNAME(BP59) ;
"RTN","BPSSCRU6",67,0)
 Q $P($G(^BPST(BP59,10,1,0)),U,7)
"RTN","BPSSCRU6",68,0)
 ;
"RTN","BPSSCRU6",69,0)
 ;Returns close reason by ien file#356.8
"RTN","BPSSCRU6",70,0)
CLREASON(BP3568) ;
"RTN","BPSSCRU6",71,0)
 Q $P($G(^IBE(356.8,BP3568,0)),U)
"RTN","BPSSCRU6",72,0)
 ;
"RTN","BPSSCRU6",73,0)
 ;Convert YYYYMMDD to FileMan format
"RTN","BPSSCRU6",74,0)
YMD2FM(BPYMD) ;
"RTN","BPSSCRU6",75,0)
 Q ($E(BPYMD,1,4)-1700)_$E(BPYMD,5,8)
"RTN","BPSSCRU6",76,0)
 ;
"RTN","BPSSCRU6",77,0)
 ;get DRUG ien from PRESCRIPTION file
"RTN","BPSSCRU6",78,0)
DRUGIEN(BP52,BPDFN) ;
"RTN","BPSSCRU6",79,0)
 N XZ
"RTN","BPSSCRU6",80,0)
 S XZ=0
"RTN","BPSSCRU6",81,0)
 K ^TMP($J,"BPSDRUG")
"RTN","BPSSCRU6",82,0)
 D RX^PSO52API(BPDFN,"BPSDRUG",BP52,,"")
"RTN","BPSSCRU6",83,0)
 S XZ=$G(^TMP($J,"BPSDRUG",BPDFN,BP52,6))
"RTN","BPSSCRU6",84,0)
 K ^TMP($J,"BPSDRUG")
"RTN","BPSSCRU6",85,0)
 Q +$P(XZ,U)
"RTN","BPSSCRU6",86,0)
 ;
"RTN","BPSSCRU6",87,0)
 ;
"RTN","BPSSCRU6",88,0)
CONVCLID(BPCLID) ;
"RTN","BPSSCRU6",89,0)
 Q $P(BPCLID,"D2",2)
"RTN","BPSSCRU6",90,0)
 ;
"RTN","BPSSCRU6",91,0)
 ;Return claim status
"RTN","BPSSCRU6",92,0)
COBCLST(BP59) ;
"RTN","BPSSCRU6",93,0)
 N BPTXT1,BPX,BPSTATUS,BPCOBIND,BPCOB
"RTN","BPSSCRU6",94,0)
 S BPCOBIND=$P(^BPST(BP59,0),U,14)
"RTN","BPSSCRU6",95,0)
 S BPSCOB=$S($G(BPCOBIND)>0:$G(BPCOBIND),1:1)
"RTN","BPSSCRU6",96,0)
 S BPTXT1=$S(BPSCOB=2:"s-",BPSCOB=3:"t-",1:"p-")
"RTN","BPSSCRU6",97,0)
 ;
"RTN","BPSSCRU6",98,0)
 ; BPS*1*20 - non-billable entry display
"RTN","BPSSCRU6",99,0)
 I $$NB^BPSSCR03(BP59) D  Q BPTXT1
"RTN","BPSSCRU6",100,0)
 . S BPTXT1=BPTXT1_"Non-Billable"
"RTN","BPSSCRU6",101,0)
 . I $$NBCL^BPSSCR03(BP59) S BPTXT1=BPTXT1_"/Closed "
"RTN","BPSSCRU6",102,0)
 . I $$NBOP^BPSSCR03(BP59) S BPTXT1=BPTXT1_"/Open "
"RTN","BPSSCRU6",103,0)
 . Q
"RTN","BPSSCRU6",104,0)
 ;
"RTN","BPSSCRU6",105,0)
 S BPX=$$CLAIMST^BPSSCRU3(BP59)
"RTN","BPSSCRU6",106,0)
 S BPSTATUS=$P(BPX,U)
"RTN","BPSSCRU6",107,0)
 I BPSTATUS["E REVERSAL ACCEPTED" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Reversal accepted")
"RTN","BPSSCRU6",108,0)
 I BPSTATUS["E REVERSAL REJECTED" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Reversal rejected")
"RTN","BPSSCRU6",109,0)
 I BPSTATUS["E PAYABLE" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Payable")
"RTN","BPSSCRU6",110,0)
 I BPSTATUS["E REJECTED" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Rejected")
"RTN","BPSSCRU6",111,0)
 I BPSTATUS["E UNSTRANDED" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Unstranded")
"RTN","BPSSCRU6",112,0)
 I BPSTATUS["E REVERSAL UNSTRANDED" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Unstranded reversal")
"RTN","BPSSCRU6",113,0)
 I BPSTATUS["E CAPTURED" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Captured")
"RTN","BPSSCRU6",114,0)
 I BPSTATUS["E DUPLICATE" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Duplicate")
"RTN","BPSSCRU6",115,0)
 I BPSTATUS["E OTHER" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Other")
"RTN","BPSSCRU6",116,0)
 I BPSTATUS["IN PROGRESS" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"In progress")
"RTN","BPSSCRU6",117,0)
 I BPSTATUS["CORRUPT" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Corrupt")
"RTN","BPSSCRU6",118,0)
 I BPSTATUS["E REVERSAL OTHER" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Reversal Other")
"RTN","BPSSCRU6",119,0)
 I BPTXT1="" S BPTXT1="Unknown status "
"RTN","BPSSCRU6",120,0)
 Q BPTXT1
"RTN","BPSTEST")
0^36^B213983196
"RTN","BPSTEST",1,0)
BPSTEST ;OAK/ELZ - ECME TESTING TOOL ;11/15/07  09:55
"RTN","BPSTEST",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**6,7,8,10,11,15,19,20**;JUN 2004;Build 27
"RTN","BPSTEST",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSTEST",4,0)
 ;
"RTN","BPSTEST",5,0)
 ;
"RTN","BPSTEST",6,0)
GETOVER(KEY1,KEY2,BPSORESP,BPSWHERE,BPSTYPE,BPPAYSEQ) ;
"RTN","BPSTEST",7,0)
 ; called by BPSNCPDP to enter overrides for a particular RX
"RTN","BPSTEST",8,0)
 ; INPUT
"RTN","BPSTEST",9,0)
 ;    KEY1      - Prescription IEN/Patient IEN
"RTN","BPSTEST",10,0)
 ;    KEY2      - Fill Number/Policy Number
"RTN","BPSTEST",11,0)
 ;    BPSORESP  - Previous response when this claim was processed
"RTN","BPSTEST",12,0)
 ;    BPSWHERE  - RX Action passed into BPSNCPDP
"RTN","BPSTEST",13,0)
 ;    BPSTYPE   - R (Reversal), S (Submission), E (Eligibility)
"RTN","BPSTEST",14,0)
 ;    BPPAYSEQ  - payer sequence 1 - primary, 2 - secondary 
"RTN","BPSTEST",15,0)
 ; OUTPUT
"RTN","BPSTEST",16,0)
 ;    None - Table BPS PAYER RESPONSE OVERRIDE entry is created.
"RTN","BPSTEST",17,0)
 ;
"RTN","BPSTEST",18,0)
 N BPSTRANS,BPSTIEN,BPSSRESP,DIC,X,Y,DIR,DIK,DA
"RTN","BPSTEST",19,0)
 ;
"RTN","BPSTEST",20,0)
 ; Check if testing is enabled
"RTN","BPSTEST",21,0)
 I '$$CHECK() Q
"RTN","BPSTEST",22,0)
 ;
"RTN","BPSTEST",23,0)
 ; Option can not be run for Date of Death option as it causes errors
"RTN","BPSTEST",24,0)
 I $G(XQY0)["DG DEATH ENTRY" W !,"The testing tool can not be run from Date of Death option" Q
"RTN","BPSTEST",25,0)
 ;
"RTN","BPSTEST",26,0)
 ; Do not run for background jobs
"RTN","BPSTEST",27,0)
 I $D(ZTQUEUED)!(",AREV,CRLB,CRLR,CRLX,CRRL,PC,PL,"[(","_BPSWHERE_",")) Q
"RTN","BPSTEST",28,0)
 ;
"RTN","BPSTEST",29,0)
 ; Create Transaction Number
"RTN","BPSTEST",30,0)
 S BPSTRANS=$$IEN59^BPSOSRX(KEY1,KEY2,$S($G(BPPAYSEQ)>0:+BPPAYSEQ,1:1))
"RTN","BPSTEST",31,0)
 ;
"RTN","BPSTEST",32,0)
 ; Lookup the record in the BPS PAYER RESPONSE OVERRIDE table
"RTN","BPSTEST",33,0)
 S DIC=9002313.32,DIC(0)="",X=BPSTRANS
"RTN","BPSTEST",34,0)
 D ^DIC
"RTN","BPSTEST",35,0)
 S BPSTIEN=+Y
"RTN","BPSTEST",36,0)
 ;
"RTN","BPSTEST",37,0)
 ; Prompt if user wants to do overrides
"RTN","BPSTEST",38,0)
 W !!,"Payer Overrides are enabled at this site.  If this is production environment,"
"RTN","BPSTEST",39,0)
 W !,"do not enter overrides (enter No at the next prompt) and disable this"
"RTN","BPSTEST",40,0)
 W !,"functionality in the BPS SETUP table."
"RTN","BPSTEST",41,0)
 W !!,"Entering No at the next prompt will delete any current overrides for the"
"RTN","BPSTEST",42,0)
 W !,"request, if they exist.",!
"RTN","BPSTEST",43,0)
 S DIR(0)="SA^Y:Yes;N:No"
"RTN","BPSTEST",44,0)
 S DIR("A")="Do you want to enter overrides for this request? ",DIR("B")="NO"
"RTN","BPSTEST",45,0)
 D ^DIR
"RTN","BPSTEST",46,0)
 ;
"RTN","BPSTEST",47,0)
 ; If no, delete the transaction (if it exists) and quit
"RTN","BPSTEST",48,0)
 I Y'="Y" D:BPSTIEN'=-1  Q
"RTN","BPSTEST",49,0)
 . S DIK="^BPS(9002313.32,",DA=BPSTIEN
"RTN","BPSTEST",50,0)
 . D ^DIK
"RTN","BPSTEST",51,0)
 ;
"RTN","BPSTEST",52,0)
 ; If the record does not exist, create it
"RTN","BPSTEST",53,0)
 I BPSTIEN=-1 S BPSTIEN=$$CREATE(BPSTRANS)
"RTN","BPSTEST",54,0)
 I BPSTIEN=-1 W !,"Failed to create the BPS PAYER RESPONSE OVERRIDE record",! Q
"RTN","BPSTEST",55,0)
 ;
"RTN","BPSTEST",56,0)
 ; If BPSTYPE is 'S' (submission) and old response is 'E Payable', change BPSTYPE to 'RS'
"RTN","BPSTEST",57,0)
 ; But don't change BPSTYPE to 'RS' if the BPSWHERE value is "ERWV" which is the Resubmit Without Reversal action (BPS*1*20)
"RTN","BPSTEST",58,0)
 I BPSTYPE="S",BPSWHERE'="ERWV",BPSORESP="E PAYABLE"!(BPSORESP="E DUPLICATE")!(BPSORESP="E REVERSAL REJECTED")!(BPSORESP="E REVERSAL UNSTRANDED") S BPSTYPE="RS"
"RTN","BPSTEST",59,0)
 ;
"RTN","BPSTEST",60,0)
 ; Update with the BPSTYPE
"RTN","BPSTEST",61,0)
 D FILE("^BPS(9002313.32,",BPSTIEN,.02,BPSTYPE)
"RTN","BPSTEST",62,0)
 ;
"RTN","BPSTEST",63,0)
 ; Message for RS
"RTN","BPSTEST",64,0)
 I BPSTYPE="RS" D
"RTN","BPSTEST",65,0)
 . W !!,"This submission may also have a reversal so you will be prompted for the"
"RTN","BPSTEST",66,0)
 . W !,"reversal overrides."
"RTN","BPSTEST",67,0)
 ;
"RTN","BPSTEST",68,0)
 ; If BPSTYPE is equal to 'E', then prompt for eligibility response
"RTN","BPSTEST",69,0)
 I BPSTYPE["E" D
"RTN","BPSTEST",70,0)
 . W !!,"Eligibility Questions"
"RTN","BPSTEST",71,0)
 . D PROMPT(BPSTIEN,.08,"A")
"RTN","BPSTEST",72,0)
 . N BPSRESP
"RTN","BPSTEST",73,0)
 . S BPSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.08,"I")
"RTN","BPSTEST",74,0)
 . I BPSRESP="R" D PROMPT(BPSTIEN,1,"07")
"RTN","BPSTEST",75,0)
 ;
"RTN","BPSTEST",76,0)
 ; If BPSTYPE contains 'R', then prompt for reversal response
"RTN","BPSTEST",77,0)
 I BPSTYPE["R" D
"RTN","BPSTEST",78,0)
 . W !!,"Reversal Questions"
"RTN","BPSTEST",79,0)
 . D PROMPT(BPSTIEN,.05,"A")
"RTN","BPSTEST",80,0)
 . N BPSRESP
"RTN","BPSTEST",81,0)
 . S BPSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.05,"I")
"RTN","BPSTEST",82,0)
 . I BPSRESP="R" D ENREVRJ(BPSTRANS)
"RTN","BPSTEST",83,0)
 ;
"RTN","BPSTEST",84,0)
 ; If BPSTYPE contains 'S', do submission response
"RTN","BPSTEST",85,0)
 I BPSTYPE["S" D
"RTN","BPSTEST",86,0)
 . W !!,"Submission Questions"
"RTN","BPSTEST",87,0)
 . D PROMPT(BPSTIEN,.03,"P")
"RTN","BPSTEST",88,0)
 . S BPSSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.03,"I")
"RTN","BPSTEST",89,0)
 . I BPSSRESP="P"!(BPSSRESP="D") D PROMPT(BPSTIEN,.04,40)       ; total amount paid (509-F9)
"RTN","BPSTEST",90,0)
 . I BPSSRESP="P"!(BPSSRESP="D") D PROMPT(BPSTIEN,.06,9)        ; copay amount (518-FI)
"RTN","BPSTEST",91,0)
 . I BPSSRESP="R" D PROMPT(BPSTIEN,1,"07")
"RTN","BPSTEST",92,0)
 . ;
"RTN","BPSTEST",93,0)
 . ; This section is for new D1-E7 fields and other fields so we can test that they are filed correctly
"RTN","BPSTEST",94,0)
 . ; At some point, these can probably be removed
"RTN","BPSTEST",95,0)
 . I BPSSRESP="P"!(BPSSRESP="D")!(BPSSRESP="R") D
"RTN","BPSTEST",96,0)
 .. ;
"RTN","BPSTEST",97,0)
 .. ; Ask if user wants to enter data for additional response file fields - Quit if user says no
"RTN","BPSTEST",98,0)
 .. N DIR,DTOUT,DUOUT,DIROUT,DIRUT
"RTN","BPSTEST",99,0)
 .. S DIR(0)="YA",DIR("A")="Populate Additional Response Fields? ",DIR("B")="No" W ! D ^DIR
"RTN","BPSTEST",100,0)
 .. I Y'=1 Q
"RTN","BPSTEST",101,0)
 .. ;
"RTN","BPSTEST",102,0)
 .. ; Overrides to test functionality of BPS*1*20
"RTN","BPSTEST",103,0)
 .. D PROMPT(BPSTIEN,.15,0)        ; Ingredient Cost Paid (506)
"RTN","BPSTEST",104,0)
 .. D PROMPT(BPSTIEN,.16,0)        ; Dispensing Fee Paid (507)
"RTN","BPSTEST",105,0)
 .. D PROMPT(BPSTIEN,.17,0)        ; Remaining Deductible Amount (513)
"RTN","BPSTEST",106,0)
 .. D PROMPT(BPSTIEN,.18,0)        ; Amount Applied to Periodic Deductible (517)
"RTN","BPSTEST",107,0)
 .. ;
"RTN","BPSTEST",108,0)
 .. ; Additional overrides for D1-D9 (BPS*1*15)
"RTN","BPSTEST",109,0)
 .. D PROMPT(BPSTIEN,.09,"")       ; next available fill date
"RTN","BPSTEST",110,0)
 .. D PROMPT(BPSTIEN,.1,"")        ; adjudicated payment type
"RTN","BPSTEST",111,0)
 .. ;
"RTN","BPSTEST",112,0)
 .. ; Additional overrides for E0-E6 (BPS*1*19)
"RTN","BPSTEST",113,0)
 .. D PROMPT(BPSTIEN,2.01,"04")    ; % sales tax basis pd
"RTN","BPSTEST",114,0)
 .. D PROMPT(BPSTIEN,2.02,11)      ; other amount paid qualifier
"RTN","BPSTEST",115,0)
 .. D PROMPT(BPSTIEN,2.03,"01")    ; payer id qualifier
"RTN","BPSTEST",116,0)
 .. D PROMPT(BPSTIEN,2.04,"")      ; help desk phone# ext
"RTN","BPSTEST",117,0)
 .. D PROMPT(BPSTIEN,2.05,"")      ; pro service fee cont/reim amt
"RTN","BPSTEST",118,0)
 .. D PROMPT(BPSTIEN,2.06,"")      ; other payer help desk phone# ext
"RTN","BPSTEST",119,0)
 .. D PROMPT(BPSTIEN,2.07,"")      ; response intermed auth type id
"RTN","BPSTEST",120,0)
 .. D PROMPT(BPSTIEN,2.08,"")      ; response intermed auth id
"RTN","BPSTEST",121,0)
 .. D PROMPT(BPSTIEN,3.01,"")      ; response intermed message
"RTN","BPSTEST",122,0)
 .. ;
"RTN","BPSTEST",123,0)
 .. ; E7 overrides (BPS*1*20)
"RTN","BPSTEST",124,0)
 .. D PROMPT(BPSTIEN,.11,"")          ; quan limit per specific time period
"RTN","BPSTEST",125,0)
 .. D PROMPT(BPSTIEN,.12,"")          ; quan limit time period
"RTN","BPSTEST",126,0)
 .. D PROMPT(BPSTIEN,.13,"")          ; days supp limit per specific time period
"RTN","BPSTEST",127,0)
 .. D PROMPT(BPSTIEN,.14,"")          ; days supp limit time period
"RTN","BPSTEST",128,0)
 ;
"RTN","BPSTEST",129,0)
 W ! D PROMPT(BPSTIEN,.07,0)
"RTN","BPSTEST",130,0)
 Q
"RTN","BPSTEST",131,0)
 ;
"RTN","BPSTEST",132,0)
SETOVER(BPSTRANS,BPSTYPE,BPSDATA) ;
"RTN","BPSTEST",133,0)
 ; called by BPSECMPS to set the override data
"RTN","BPSTEST",134,0)
 ; Input
"RTN","BPSTEST",135,0)
 ;    BPSTRANS - Transaction IEN
"RTN","BPSTEST",136,0)
 ;    BPSTYPE  - B1 for submission, B2 for reversals
"RTN","BPSTEST",137,0)
 ; Output
"RTN","BPSTEST",138,0)
 ;    BPSDATA    - Passed by reference and updated with appropriate overrides
"RTN","BPSTEST",139,0)
 ;
"RTN","BPSTEST",140,0)
 N BPSTIEN,BPSRRESP,BPSSRESP,BPSPAID,BPSRCNT,BPSRIEN,BPSRCODE,BPSRCD,BPSCOPAY,BPSXXXX,BPSUNDEF
"RTN","BPSTEST",141,0)
 N BPSAJPAY,BPSNFLDT,BPSX
"RTN","BPSTEST",142,0)
 N BPS506,BPS507,BPS513,BPS517
"RTN","BPSTEST",143,0)
 ;
"RTN","BPSTEST",144,0)
 ; Check the Test Flag in set in BPS SETUP
"RTN","BPSTEST",145,0)
 I '$$CHECK() Q
"RTN","BPSTEST",146,0)
 ;
"RTN","BPSTEST",147,0)
 ; Check if the Transaction Number is defined in BPS RESPONSE OVERRIDES
"RTN","BPSTEST",148,0)
 S BPSTIEN=$O(^BPS(9002313.32,"B",BPSTRANS,""))
"RTN","BPSTEST",149,0)
 I BPSTIEN="" Q
"RTN","BPSTEST",150,0)
 ;
"RTN","BPSTEST",151,0)
 ; If a eligibility, check for specific reversal overrides and set
"RTN","BPSTEST",152,0)
 I BPSTYPE="E1" D  Q
"RTN","BPSTEST",153,0)
 . S BPSRRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.08,"I")
"RTN","BPSTEST",154,0)
 . ;
"RTN","BPSTEST",155,0)
 . ; If the response is Stranded, force an <UNDEF> error
"RTN","BPSTEST",156,0)
 . I BPSRRESP="S" S BPSXXXX=BPSUNDEF
"RTN","BPSTEST",157,0)
 . I BPSRRESP]"" S BPSDATA(1,112)=BPSRRESP
"RTN","BPSTEST",158,0)
 . S BPSDATA(9002313.03,9002313.03,"+1,",501)=$S(BPSRRESP="R":"R",1:"A")
"RTN","BPSTEST",159,0)
 . ; 
"RTN","BPSTEST",160,0)
 . ; If the response is accepted, delete the reject code count and codes
"RTN","BPSTEST",161,0)
 . I BPSRRESP="A" K BPSDATA(1,510),BPSDATA(1,511)
"RTN","BPSTEST",162,0)
 . ; 
"RTN","BPSTEST",163,0)
 . ; If the response is rejected, delete the rejections returned by payers
"RTN","BPSTEST",164,0)
 . ;   and put in the ones entered by the user
"RTN","BPSTEST",165,0)
 . I BPSRRESP="R" D
"RTN","BPSTEST",166,0)
 .. K BPSDATA(1,509),BPSDATA(1,511)
"RTN","BPSTEST",167,0)
 .. S BPSRCNT=0
"RTN","BPSTEST",168,0)
 .. S BPSRIEN=0 F  S BPSRIEN=$O(^BPS(9002313.32,BPSTIEN,1,BPSRIEN)) Q:+BPSRIEN=0  D
"RTN","BPSTEST",169,0)
 ... S BPSRCODE=$P($G(^BPS(9002313.32,BPSTIEN,1,BPSRIEN,0)),"^",1)
"RTN","BPSTEST",170,0)
 ... ; Increment counter and store
"RTN","BPSTEST",171,0)
 ... I BPSRCODE]"" D
"RTN","BPSTEST",172,0)
 .... S BPSRCD=$$GET1^DIQ(9002313.93,BPSRCODE_",",.01,"E")
"RTN","BPSTEST",173,0)
 .... I BPSRCD]"" S BPSRCNT=BPSRCNT+1,BPSDATA(1,511,BPSRCNT)=BPSRCD
"RTN","BPSTEST",174,0)
 .. ; Store total number of rejections
"RTN","BPSTEST",175,0)
 .. S BPSDATA(1,510)=BPSRCNT
"RTN","BPSTEST",176,0)
 ;
"RTN","BPSTEST",177,0)
 ; If a reversal, check for specific reversal overrides and set
"RTN","BPSTEST",178,0)
 I BPSTYPE="B2" D
"RTN","BPSTEST",179,0)
 . S BPSRRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.05,"I")
"RTN","BPSTEST",180,0)
 . ;
"RTN","BPSTEST",181,0)
 . ; If the response is Stranded, force an <UNDEF> error
"RTN","BPSTEST",182,0)
 . I BPSRRESP="S" S BPSXXXX=BPSUNDEF
"RTN","BPSTEST",183,0)
 . I BPSRRESP]"" S BPSDATA(1,112)=$S(BPSRRESP="D":"S",1:BPSRRESP)
"RTN","BPSTEST",184,0)
 . S BPSDATA(9002313.03,9002313.03,"+1,",501)=$S(BPSRRESP="R":"R",1:"A")
"RTN","BPSTEST",185,0)
 . ;
"RTN","BPSTEST",186,0)
 . ; If the response is accepted or duplicate, kill the reject code count and codes
"RTN","BPSTEST",187,0)
 . I BPSRRESP="A"!(BPSRRESP="D") K BPSDATA(1,510),BPSDATA(1,511)
"RTN","BPSTEST",188,0)
 . ;
"RTN","BPSTEST",189,0)
 . ; If the response is rejected, set the reject codes
"RTN","BPSTEST",190,0)
 . I BPSRRESP="R" D SETREJ(BPSTRANS)
"RTN","BPSTEST",191,0)
 ;
"RTN","BPSTEST",192,0)
 ; If a submission, check for specific submission overrides and set
"RTN","BPSTEST",193,0)
 I BPSTYPE="B1" D
"RTN","BPSTEST",194,0)
 . ; Get submission response
"RTN","BPSTEST",195,0)
 . S BPSSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.03,"I")
"RTN","BPSTEST",196,0)
 . ;
"RTN","BPSTEST",197,0)
 . ; If the response is Stranded, force an <UNDEF> error
"RTN","BPSTEST",198,0)
 . I BPSSRESP="S" S BPSXXXX=BPSUNDEF
"RTN","BPSTEST",199,0)
 . ;
"RTN","BPSTEST",200,0)
 . ; If BPSSRESP exists, file it
"RTN","BPSTEST",201,0)
 . I BPSSRESP]"" D
"RTN","BPSTEST",202,0)
 .. S BPSDATA(1,112)=BPSSRESP
"RTN","BPSTEST",203,0)
 .. S BPSDATA(9002313.03,9002313.03,"+1,",501)=$S(BPSSRESP="R":"R",1:"A")
"RTN","BPSTEST",204,0)
 .. ; If payable or duplicate, get the BPSPAID amount and file it if it
"RTN","BPSTEST",205,0)
 .. ; exists.  Also delete any reject codes
"RTN","BPSTEST",206,0)
 .. I BPSSRESP="P"!(BPSSRESP="D") D
"RTN","BPSTEST",207,0)
 ... S BPSPAID=$$GET1^DIQ(9002313.32,BPSTIEN_",",.04,"I")
"RTN","BPSTEST",208,0)
 ... I BPSPAID]"" S BPSDATA(1,509)=$$DFF^BPSECFM(BPSPAID,8)         ; 509 Total amount paid
"RTN","BPSTEST",209,0)
 ... ;
"RTN","BPSTEST",210,0)
 ... K BPSDATA(1,510),BPSDATA(1,511)      ; kill Reject Count (510) and Reject Code (511)
"RTN","BPSTEST",211,0)
 ... ;
"RTN","BPSTEST",212,0)
 ... S BPSCOPAY=$$GET1^DIQ(9002313.32,BPSTIEN_",",.06,"I")
"RTN","BPSTEST",213,0)
 ... I BPSCOPAY]"" S BPSDATA(1,518)=$$DFF^BPSECFM(BPSCOPAY,8)       ; 518 Copay Amount
"RTN","BPSTEST",214,0)
 ... ;
"RTN","BPSTEST",215,0)
 ... S BPS506=$$GET1^DIQ(9002313.32,BPSTIEN_",",.15,"I")
"RTN","BPSTEST",216,0)
 ... I BPS506]"" S BPSDATA(1,506)=$$DFF^BPSECFM(BPS506,8)           ; 506 Ingredient Cost Paid
"RTN","BPSTEST",217,0)
 ... ;
"RTN","BPSTEST",218,0)
 ... S BPS507=$$GET1^DIQ(9002313.32,BPSTIEN_",",.16,"I")
"RTN","BPSTEST",219,0)
 ... I BPS507]"" S BPSDATA(1,507)=$$DFF^BPSECFM(BPS507,8)           ; 507 Dispensing Fee Paid
"RTN","BPSTEST",220,0)
 ... ;
"RTN","BPSTEST",221,0)
 ... S BPS513=$$GET1^DIQ(9002313.32,BPSTIEN_",",.17,"I")
"RTN","BPSTEST",222,0)
 ... I BPS513]"" S BPSDATA(1,513)=$$DFF^BPSECFM(BPS513,8)           ; 513 Remaining Deductible Amount
"RTN","BPSTEST",223,0)
 ... ;
"RTN","BPSTEST",224,0)
 ... S BPS517=$$GET1^DIQ(9002313.32,BPSTIEN_",",.18,"I")
"RTN","BPSTEST",225,0)
 ... I BPS517]"" S BPSDATA(1,517)=$$DFF^BPSECFM(BPS517,8)           ; 517 Amount Applied to Periodic Deductible
"RTN","BPSTEST",226,0)
 ... Q
"RTN","BPSTEST",227,0)
 .. ;
"RTN","BPSTEST",228,0)
 .. I BPSSRESP="P"!(BPSSRESP="D")!(BPSSRESP="R") D
"RTN","BPSTEST",229,0)
 ... ; D1-D9 fields (BPS*1*15)
"RTN","BPSTEST",230,0)
 ... S BPSAJPAY=$$GET1^DIQ(9002313.32,BPSTIEN_",",.1,"I")           ; Adjudicated Payment Type
"RTN","BPSTEST",231,0)
 ... I BPSAJPAY]"" S BPSDATA(1,1028)=$$NFF^BPSECFM(BPSAJPAY,2)
"RTN","BPSTEST",232,0)
 ... S BPSNFLDT=$$GET1^DIQ(9002313.32,BPSTIEN_",",.09,"I")          ; Override Next Available Fill
"RTN","BPSTEST",233,0)
 ... I BPSNFLDT]"" S BPSDATA(1,2004)=$$DTF1^BPSECFM(BPSNFLDT)
"RTN","BPSTEST",234,0)
 ... ;
"RTN","BPSTEST",235,0)
 ... ; E0-E6 overrides (BPS*1*19)
"RTN","BPSTEST",236,0)
 ... ; PERCENTAGE SALES TAX BASIS PAID
"RTN","BPSTEST",237,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.01,"I")
"RTN","BPSTEST",238,0)
 ... I BPSX]"" S BPSDATA(1,561)=BPSX
"RTN","BPSTEST",239,0)
 ... ; OTHER AMOUNT PAID QUALIFIER and associated field
"RTN","BPSTEST",240,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.02,"I")
"RTN","BPSTEST",241,0)
 ... I BPSX]"" S BPSDATA(1,564,1)=$$NFF^BPSECFM(BPSX,2),BPSDATA(1,565,1)=$$DFF^BPSECFM(5.64,8),BPSDATA(1,563)=1
"RTN","BPSTEST",242,0)
 ... ; PAYER ID QUALIFIER
"RTN","BPSTEST",243,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.03,"I")
"RTN","BPSTEST",244,0)
 ... I BPSX]"" S BPSDATA(9002313.03,9002313.03,"+1,",568)=BPSX
"RTN","BPSTEST",245,0)
 ... ; HELP DESK TELEPHONE NUMBER EXTENSION
"RTN","BPSTEST",246,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.04,"I")
"RTN","BPSTEST",247,0)
 ... I BPSX]"" S BPSDATA(1,"2022")=$$NFF^BPSECFM(BPSX,8)
"RTN","BPSTEST",248,0)
 ... ; PROFESSIONAL SERVICE FEE CONTRACTED/REIMURSEMENT AMOUNT
"RTN","BPSTEST",249,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.05,"I")
"RTN","BPSTEST",250,0)
 ... I BPSX]"" S BPSDATA(1,"2033")=$$DFF^BPSECFM(BPSX,8)
"RTN","BPSTEST",251,0)
 ... ; OTHER PAYER HELPDESK TELEPHONE EXTENSION
"RTN","BPSTEST",252,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.06,"I")
"RTN","BPSTEST",253,0)
 ... I BPSX]"" S BPSDATA(1,"2023",1)=$$NFF^BPSECFM(BPSX,8),BPSDATA(1,338,1)="01"
"RTN","BPSTEST",254,0)
 ... ; RESPONSE INTERMEDIARY AUTHORIZATION TYPE ID and associated fields
"RTN","BPSTEST",255,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.07,"I")
"RTN","BPSTEST",256,0)
 ... I BPSX]"" S BPSDATA(1,"2053",1)=$$NFF^BPSECFM(BPSX,2),BPSDATA(1,2052)=1
"RTN","BPSTEST",257,0)
 ... ; RESPONSE INTERMEDIARY AUTHORIZATION ID and associated fields
"RTN","BPSTEST",258,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",2.08,"I")
"RTN","BPSTEST",259,0)
 ... I BPSX]"" S BPSDATA(1,"2054",1)=$$ANFF^BPSECFM(BPSX,20),BPSDATA(1,2052)=1
"RTN","BPSTEST",260,0)
 ... ; INTERMEDIARY MESSAGE and associated fields
"RTN","BPSTEST",261,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",3.01,"I")
"RTN","BPSTEST",262,0)
 ... I BPSX]"" S BPSDATA(1,"2051",1)=$$ANFF^BPSECFM(BPSX,200),BPSDATA(1,2052)=1
"RTN","BPSTEST",263,0)
 ... ;
"RTN","BPSTEST",264,0)
 ... ; E7 overrides (BPS*1*20)
"RTN","BPSTEST",265,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",.11,"I") I BPSX'="" D     ; B88-3R quantity limit per spec time period
"RTN","BPSTEST",266,0)
 .... S BPSDATA(1,2087)=1                          ; count field
"RTN","BPSTEST",267,0)
 .... S BPSDATA(1,2088,1)=$$NFF^BPSECFM(BPSX,10)   ; data from override file
"RTN","BPSTEST",268,0)
 .... Q
"RTN","BPSTEST",269,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",.12,"I") I BPSX'="" D     ; B89-3S quantity limit time period
"RTN","BPSTEST",270,0)
 .... S BPSDATA(1,2087)=1                          ; count field
"RTN","BPSTEST",271,0)
 .... S BPSDATA(1,2089,1)=$$NFF^BPSECFM(BPSX,5)    ; data from override file
"RTN","BPSTEST",272,0)
 .... Q
"RTN","BPSTEST",273,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",.13,"I") I BPSX'="" D     ; B91-3W days supply limit per spec time period
"RTN","BPSTEST",274,0)
 .... S BPSDATA(1,2090)=1                          ; count field
"RTN","BPSTEST",275,0)
 .... S BPSDATA(1,2091,1)=$$NFF^BPSECFM(BPSX,3)    ; data from override file
"RTN","BPSTEST",276,0)
 .... Q
"RTN","BPSTEST",277,0)
 ... S BPSX=$$GET1^DIQ(9002313.32,BPSTIEN_",",.14,"I") I BPSX'="" D     ; B92-3X days supply limit time period
"RTN","BPSTEST",278,0)
 .... S BPSDATA(1,2090)=1                          ; count field
"RTN","BPSTEST",279,0)
 .... S BPSDATA(1,2092,1)=$$NFF^BPSECFM(BPSX,5)    ; data from override file
"RTN","BPSTEST",280,0)
 .... Q
"RTN","BPSTEST",281,0)
 ... Q
"RTN","BPSTEST",282,0)
 .. ;
"RTN","BPSTEST",283,0)
 .. ; If rejected, get the rejection code and file them
"RTN","BPSTEST",284,0)
 .. ; Also, delete the BPSPAID amount
"RTN","BPSTEST",285,0)
 .. I BPSSRESP="R" D
"RTN","BPSTEST",286,0)
 ... ; Delete old rejections and BPSPAID amount
"RTN","BPSTEST",287,0)
 ... K BPSDATA(1,509),BPSDATA(1,511)
"RTN","BPSTEST",288,0)
 ... ; Loop through rejections and store
"RTN","BPSTEST",289,0)
 ... S BPSRCNT=0
"RTN","BPSTEST",290,0)
 ... S BPSRIEN=0 F  S BPSRIEN=$O(^BPS(9002313.32,BPSTIEN,1,BPSRIEN)) Q:+BPSRIEN=0  D
"RTN","BPSTEST",291,0)
 .... S BPSRCODE=$P($G(^BPS(9002313.32,BPSTIEN,1,BPSRIEN,0)),"^",1)
"RTN","BPSTEST",292,0)
 .... ; Increment counter and store
"RTN","BPSTEST",293,0)
 .... I BPSRCODE]"" D
"RTN","BPSTEST",294,0)
 ..... S BPSRCD=$$GET1^DIQ(9002313.93,BPSRCODE_",",.01,"E")
"RTN","BPSTEST",295,0)
 ..... I BPSRCD]"" S BPSRCNT=BPSRCNT+1,BPSDATA(1,511,BPSRCNT)=BPSRCD
"RTN","BPSTEST",296,0)
 ... ; Store total number of rejections
"RTN","BPSTEST",297,0)
 ... S BPSDATA(1,510)=BPSRCNT
"RTN","BPSTEST",298,0)
 Q
"RTN","BPSTEST",299,0)
 ;
"RTN","BPSTEST",300,0)
SELOVER ;
"RTN","BPSTEST",301,0)
 ; Used to create overrides for prescription that will processed in the
"RTN","BPSTEST",302,0)
 ; background (CMOP, auto-reversals).  The user is prompted for the
"RTN","BPSTEST",303,0)
 ; prescription and other information and then calls GETOVER.  It is called
"RTN","BPSTEST",304,0)
 ; by option BPS PROVIDER RESPONSE OVERRIDES
"RTN","BPSTEST",305,0)
 ;
"RTN","BPSTEST",306,0)
 ; This does not work for eligibility but we don't do them in the background 
"RTN","BPSTEST",307,0)
 ;   right now.
"RTN","BPSTEST",308,0)
 ;
"RTN","BPSTEST",309,0)
 N BPSRXIEN,BPSRXNM,BPSRXFL,BPSRFL,BPSORESP,BPSTYPE,BPSRXARR,BPSRARR,DIC,Y,DIR
"RTN","BPSTEST",310,0)
 ;
"RTN","BPSTEST",311,0)
 ; Check if test mode is on
"RTN","BPSTEST",312,0)
 I '$$CHECK() Q
"RTN","BPSTEST",313,0)
 ;
"RTN","BPSTEST",314,0)
 ; Prompt for the Prescription
"RTN","BPSTEST",315,0)
 S BPSRXIEN=$$PROMPTRX^BPSUTIL1 Q:BPSRXIEN<1
"RTN","BPSTEST",316,0)
 D RXAPI^BPSUTIL1(BPSRXIEN,".01;22","BPSRXARR","IE")
"RTN","BPSTEST",317,0)
 S BPSRXNM=$G(BPSRXARR(52,BPSRXIEN,.01,"E"))
"RTN","BPSTEST",318,0)
 ;
"RTN","BPSTEST",319,0)
 ; Prompt for Fill/Refill
"RTN","BPSTEST",320,0)
 S DIR(0)="S^0:"_$G(BPSRXARR(52,BPSRXIEN,22,"E"))
"RTN","BPSTEST",321,0)
 F BPSRFL=1:1 D RXSUBF^BPSUTIL1(BPSRXIEN,52,52.1,BPSRFL,.01,"BPSRARR","E") Q:$G(BPSRARR(52.1,BPSRFL,.01,"E"))=""  D
"RTN","BPSTEST",322,0)
 . S DIR(0)=DIR(0)_";"_BPSRFL_":"_BPSRARR(52.1,BPSRFL,.01,"E")
"RTN","BPSTEST",323,0)
 S DIR("A")="Select fill/refill for prescription "_BPSRXNM,DIR("B")=0
"RTN","BPSTEST",324,0)
 D ^DIR
"RTN","BPSTEST",325,0)
 I Y'=+Y Q
"RTN","BPSTEST",326,0)
 S BPSRXFL=Y
"RTN","BPSTEST",327,0)
 ;
"RTN","BPSTEST",328,0)
 ; Prompt for BPSTYPE
"RTN","BPSTEST",329,0)
 S DIR(0)="S^R:Reversal;RS:Resubmit with Reversal;S:Submit"
"RTN","BPSTEST",330,0)
 S DIR("A")="Enter BPSTYPE of transaction",DIR("B")="SUBMIT"
"RTN","BPSTEST",331,0)
 D ^DIR
"RTN","BPSTEST",332,0)
 I ",R,RS,S,"'[","_Y_"," Q
"RTN","BPSTEST",333,0)
 S BPSTYPE=Y
"RTN","BPSTEST",334,0)
 ;
"RTN","BPSTEST",335,0)
 ; Set up parameters
"RTN","BPSTEST",336,0)
 S BPSORESP=""
"RTN","BPSTEST",337,0)
 I BPSTYPE="RS" S BPSTYPE="S",BPSORESP="E PAYABLE"
"RTN","BPSTEST",338,0)
 ;
"RTN","BPSTEST",339,0)
 ; Call GETOVER
"RTN","BPSTEST",340,0)
 D GETOVER(BPSRXIEN,BPSRXFL,BPSORESP,"",BPSTYPE)
"RTN","BPSTEST",341,0)
 Q
"RTN","BPSTEST",342,0)
 ;
"RTN","BPSTEST",343,0)
CHECK() ;
"RTN","BPSTEST",344,0)
 ; Check if Test Mode is ON in the BPS Setup table
"RTN","BPSTEST",345,0)
 ; Also called by BPSNCPDP and BPSEMCPS
"RTN","BPSTEST",346,0)
 ;
"RTN","BPSTEST",347,0)
 ;IA#4440
"RTN","BPSTEST",348,0)
 Q $S($$PROD^XUPROD:0,1:$P($G(^BPS(9002313.99,1,0)),"^",3))
"RTN","BPSTEST",349,0)
 ;
"RTN","BPSTEST",350,0)
CREATE(BPSTRANS) ;
"RTN","BPSTEST",351,0)
 ; Create the Override record
"RTN","BPSTEST",352,0)
 ;
"RTN","BPSTEST",353,0)
 N DIC,X,Y,BPSTIEN,DA
"RTN","BPSTEST",354,0)
 S DIC=9002313.32,DIC(0)="L",X=BPSTRANS
"RTN","BPSTEST",355,0)
 D ^DIC
"RTN","BPSTEST",356,0)
 S BPSTIEN=+Y
"RTN","BPSTEST",357,0)
 Q BPSTIEN
"RTN","BPSTEST",358,0)
 ;
"RTN","BPSTEST",359,0)
FILE(DIE,DA,BPSFLD,BPSDATA) ;
"RTN","BPSTEST",360,0)
 ; File in the Override record
"RTN","BPSTEST",361,0)
 ;
"RTN","BPSTEST",362,0)
 N DR,X,Y
"RTN","BPSTEST",363,0)
 S DR=BPSFLD_"///"_BPSDATA
"RTN","BPSTEST",364,0)
 L +@(DIE_DA_")"):0 I $T D ^DIE L -@(DIE_DA_")") Q
"RTN","BPSTEST",365,0)
 W !?5,"Another user is editing this entry."
"RTN","BPSTEST",366,0)
 Q
"RTN","BPSTEST",367,0)
 ;
"RTN","BPSTEST",368,0)
PROMPT(DA,BPSFLD,BPSDFLT) ;
"RTN","BPSTEST",369,0)
 ; Prompt for a specific field and set the data
"RTN","BPSTEST",370,0)
 ;
"RTN","BPSTEST",371,0)
 N DIE,DR,DTOUT,X,Y
"RTN","BPSTEST",372,0)
 S DIE="^BPS(9002313.32,",DR=BPSFLD_"//"_BPSDFLT
"RTN","BPSTEST",373,0)
 L +@(DIE_DA_")"):0 I $T D ^DIE L -@(DIE_DA_")") Q
"RTN","BPSTEST",374,0)
 W !?5,"Another user is editing this entry."
"RTN","BPSTEST",375,0)
 Q
"RTN","BPSTEST",376,0)
 ;
"RTN","BPSTEST",377,0)
SETDELAY(BPSTRANS) ;
"RTN","BPSTEST",378,0)
 ; Input
"RTN","BPSTEST",379,0)
 ;    BPSTRANS - Transaction IEN
"RTN","BPSTEST",380,0)
 ; Check the Test Flag in set in BPS SETUP
"RTN","BPSTEST",381,0)
 I '$$CHECK() Q 0
"RTN","BPSTEST",382,0)
 N BPSDELAY,BPSTIEN,BPSTIME
"RTN","BPSTEST",383,0)
 ; Check if the Transaction Number is defined in BPS RESPONSE OVERRIDES
"RTN","BPSTEST",384,0)
 S BPSTIEN=$O(^BPS(9002313.32,"B",BPSTRANS,""))
"RTN","BPSTEST",385,0)
 I BPSTIEN="" Q 0
"RTN","BPSTEST",386,0)
 S BPSDELAY=$$GET1^DIQ(9002313.32,BPSTIEN_",",.07,"I")*60
"RTN","BPSTEST",387,0)
 I BPSDELAY'>0 Q 0
"RTN","BPSTEST",388,0)
 S BPSTIME=$$FMADD^XLFDT($$NOW^XLFDT,,,,BPSDELAY)
"RTN","BPSTEST",389,0)
 I BPSTIME>0 D  Q BPSTIME
"RTN","BPSTEST",390,0)
 . ;schedule a task to run RUNNING^BPSOSRX
"RTN","BPSTEST",391,0)
 . N ZTRTN,ZTDTH,ZTIO,ZTSK
"RTN","BPSTEST",392,0)
 . S ZTRTN="RUNECME^BPSTEST",ZTDESC="BPSTEST: ECME testing tool"
"RTN","BPSTEST",393,0)
 . S ZTDTH=$$FMADD^XLFDT($$NOW^XLFDT,,,,BPSDELAY+10),ZTIO=""
"RTN","BPSTEST",394,0)
 . D ^%ZTLOAD
"RTN","BPSTEST",395,0)
 Q 0
"RTN","BPSTEST",396,0)
 ;
"RTN","BPSTEST",397,0)
RUNECME ;
"RTN","BPSTEST",398,0)
 D RUNNING^BPSOSRX()
"RTN","BPSTEST",399,0)
 Q
"RTN","BPSTEST",400,0)
 ;get the reversal reject from the ^XTMP and set BPSDATA to override data
"RTN","BPSTEST",401,0)
SETREJ(BPSTRANS) ;
"RTN","BPSTEST",402,0)
 N BPSREJ
"RTN","BPSTEST",403,0)
 S BPSREJ=$G(^XTMP("BPSTEST",BPSTRANS))
"RTN","BPSTEST",404,0)
 I BPSREJ="" Q
"RTN","BPSTEST",405,0)
 S BPSDATA(1,511,1)=BPSREJ
"RTN","BPSTEST",406,0)
 S BPSDATA(1,510)=1
"RTN","BPSTEST",407,0)
 Q
"RTN","BPSTEST",408,0)
 ;enter a reversal reject
"RTN","BPSTEST",409,0)
ENREVRJ(BPSTRANS) ;
"RTN","BPSTEST",410,0)
 N BPRJCODE,TMSTAMP
"RTN","BPSTEST",411,0)
 S BPRJCODE=$$PROMPT^BPSSCRU4("Enter a reject code for reversal")
"RTN","BPSTEST",412,0)
 I $P(BPRJCODE,U)="" Q
"RTN","BPSTEST",413,0)
 I $P(BPRJCODE,U)=0 Q
"RTN","BPSTEST",414,0)
 N X,X1,X2
"RTN","BPSTEST",415,0)
 S X1=DT,X2=2 D C^%DTC
"RTN","BPSTEST",416,0)
 S ^XTMP("BPSTEST",0)=X_U_DT_U_"ECME TESTING TOOL, SEE BPSTEST ROUTINE"
"RTN","BPSTEST",417,0)
 S ^XTMP("BPSTEST",BPSTRANS)=$P(BPRJCODE,U)
"RTN","BPSTEST",418,0)
 Q
"RTN","BPSTEST",419,0)
 ;
"RTN","BPSUTIL")
0^42^B13282594
"RTN","BPSUTIL",1,0)
BPSUTIL ;BHAM ISC/FLS/SS - General Utility functions ;3/27/08  13:18
"RTN","BPSUTIL",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2,5,6,20**;JUN 2004;Build 27
"RTN","BPSUTIL",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSUTIL",4,0)
 ;
"RTN","BPSUTIL",5,0)
 ; ECMEON
"RTN","BPSUTIL",6,0)
 ;   Input:
"RTN","BPSUTIL",7,0)
 ;      SITE - Pointer to Outpatient Site file (#59)
"RTN","BPSUTIL",8,0)
 ;   Output
"RTN","BPSUTIL",9,0)
 ;      1 - ECME is turned ON for the Outpatient Site
"RTN","BPSUTIL",10,0)
 ;      0 - ECME is not turned ON for the Outpatient Site.
"RTN","BPSUTIL",11,0)
 ;   Note that ON means that the Outpatient site is linked to an active
"RTN","BPSUTIL",12,0)
 ;     BPS Pharmacy that has a Pharmacy ID AND IB has ncpdp flagged as
"RTN","BPSUTIL",13,0)
 ;     turned on.
"RTN","BPSUTIL",14,0)
ECMEON(SITE) ;
"RTN","BPSUTIL",15,0)
 I '$$EPHON^IBNCPDPI Q 0
"RTN","BPSUTIL",16,0)
 I '$G(SITE) Q 0
"RTN","BPSUTIL",17,0)
 N BPSPHARM,FACID
"RTN","BPSUTIL",18,0)
 S FACID=0
"RTN","BPSUTIL",19,0)
 S BPSPHARM=$$GETPHARM(SITE)
"RTN","BPSUTIL",20,0)
 I BPSPHARM="" Q 0
"RTN","BPSUTIL",21,0)
 S FACID=$$GET1^DIQ(9002313.56,BPSPHARM_",",41.01)
"RTN","BPSUTIL",22,0)
 I FACID="",'$$NPIREQ^BPSNPI(DT) S FACID=$$GET1^DIQ(9002313.56,BPSPHARM_",",.02)
"RTN","BPSUTIL",23,0)
 Q $S(FACID:1,1:0)
"RTN","BPSUTIL",24,0)
 ;
"RTN","BPSUTIL",25,0)
CMOPON(SITE) ; - Returns 1 if CMOP is turned ON for ECME or 0 if not
"RTN","BPSUTIL",26,0)
 ; SITE - Pointer to #59 (OUTPATIENT SITE)
"RTN","BPSUTIL",27,0)
 Q:'$G(SITE) 0
"RTN","BPSUTIL",28,0)
 N PHRM S PHRM=$O(^BPS(9002313.56,"C",SITE,0)) I 'PHRM Q 0
"RTN","BPSUTIL",29,0)
 Q $$GET1^DIQ(9002313.56,PHRM,1,"I")
"RTN","BPSUTIL",30,0)
 ;
"RTN","BPSUTIL",31,0)
 ;Function returns STATUS flag from BPS PHARMACIES (file #56)
"RTN","BPSUTIL",32,0)
 ; Returns '1' for active or '0' for inactive BPS Pharmacy
"RTN","BPSUTIL",33,0)
BPSACTV(BPSPHARM) ;
"RTN","BPSUTIL",34,0)
 Q:'$G(BPSPHARM) 0
"RTN","BPSUTIL",35,0)
 Q +$P($G(^BPS(9002313.56,BPSPHARM,0)),U,10)
"RTN","BPSUTIL",36,0)
 ;
"RTN","BPSUTIL",37,0)
BPSPLN(RXI,RXR) ; - Returns the insurance PLAN NAME (902.24) field from BPS TRANSACTION
"RTN","BPSUTIL",38,0)
 ;
"RTN","BPSUTIL",39,0)
 ; Input variables -> RXI - Internal Prescription File IEN
"RTN","BPSUTIL",40,0)
 ;                    RXR - Refill Number
"RTN","BPSUTIL",41,0)
 ;
"RTN","BPSUTIL",42,0)
 I '$G(RXI) Q ""
"RTN","BPSUTIL",43,0)
 I '$G(RXR) S RXR=0
"RTN","BPSUTIL",44,0)
 N IEN59 S IEN59=$$IEN59^BPSOSRX(RXI,RXR) Q:IEN59="" ""
"RTN","BPSUTIL",45,0)
 N CINS S CINS=$$GET1^DIQ(9002313.59,IEN59,901) Q:'CINS ""
"RTN","BPSUTIL",46,0)
 Q $$GET1^DIQ(9002313.59902,CINS_","_IEN59,902.24)
"RTN","BPSUTIL",47,0)
 ; 
"RTN","BPSUTIL",48,0)
BPSINSCO(RXI,RXR) ; - Returns the Insurance Company (902.33) field from BPS TRANSACTION
"RTN","BPSUTIL",49,0)
 ; MRD;BPS*1.0*20 - Created BPSINSCO by copying BPSPLN and modifying.
"RTN","BPSUTIL",50,0)
 ;
"RTN","BPSUTIL",51,0)
 ; Input variables -> RXI - Internal Prescription File IEN
"RTN","BPSUTIL",52,0)
 ;                    RXR - Refill Number
"RTN","BPSUTIL",53,0)
 ;
"RTN","BPSUTIL",54,0)
 I '$G(RXI) Q ""
"RTN","BPSUTIL",55,0)
 I '$G(RXR) S RXR=0
"RTN","BPSUTIL",56,0)
 N IEN59 S IEN59=$$IEN59^BPSOSRX(RXI,RXR) Q:IEN59="" ""
"RTN","BPSUTIL",57,0)
 N CINS S CINS=$$GET1^DIQ(9002313.59,IEN59,901) Q:'CINS ""
"RTN","BPSUTIL",58,0)
 Q $$GET1^DIQ(9002313.59902,CINS_","_IEN59,902.33,"I")
"RTN","BPSUTIL",59,0)
 ;
"RTN","BPSUTIL",60,0)
 ;API for IB (IA #4146) to select BPS PHARMACY
"RTN","BPSUTIL",61,0)
 ;returns results as a local array BPPHARM
"RTN","BPSUTIL",62,0)
 ; Select the ECME Pharmacy or Pharmacies
"RTN","BPSUTIL",63,0)
 ;
"RTN","BPSUTIL",64,0)
 ; Input Variable -> BPSPHAR is passed by reference to get the result of user's selection
"RTN","BPSUTIL",65,0)
 ; BPPHARM = 1 One or More Pharmacies Selected
"RTN","BPSUTIL",66,0)
 ;    = 0 User Entered 'ALL'
"RTN","BPSUTIL",67,0)
 ; If BPSPHAR = 1 then the BPSPHAR array will be defined where:
"RTN","BPSUTIL",68,0)
 ;    BPSPHAR(ptr) = ptr ^ BPS PHARMACY NAME and
"RTN","BPSUTIL",69,0)
 ;    ptr = Internal Pointer to BPS PHARMACIES file (#9002313.56)
"RTN","BPSUTIL",70,0)
 ;
"RTN","BPSUTIL",71,0)
 ; Return Value ->   "" = Valid Entry or Entries Selected
"RTN","BPSUTIL",72,0)
 ;                                        ^ = Exit
"RTN","BPSUTIL",73,0)
SELPHARM(BPSPHAR) ;
"RTN","BPSUTIL",74,0)
 N BPRET,BPPHARM
"RTN","BPSUTIL",75,0)
 S BPRET=$$SELPHARM^BPSRPT3()
"RTN","BPSUTIL",76,0)
 M BPSPHAR=BPPHARM
"RTN","BPSUTIL",77,0)
 Q BPRET
"RTN","BPSUTIL",78,0)
 ;
"RTN","BPSUTIL",79,0)
 ;
"RTN","BPSUTIL",80,0)
 ;API for IB (IA #4146) to determine whether is one or more BPS PHARMACIES in the system
"RTN","BPSUTIL",81,0)
 ;Function returns
"RTN","BPSUTIL",82,0)
 ;1 - if the site has more than one record in the file #9002313.56
"RTN","BPSUTIL",83,0)
 ;0 - if there are no any divisions
"RTN","BPSUTIL",84,0)
 ;0^NAME OF THE EPHARM - if only one division return 0 and its name
"RTN","BPSUTIL",85,0)
 ;  to use in the header of the report
"RTN","BPSUTIL",86,0)
MULTPHRM() ;
"RTN","BPSUTIL",87,0)
 N IBX
"RTN","BPSUTIL",88,0)
 S IBX=+$O(^BPS(9002313.56,0))
"RTN","BPSUTIL",89,0)
 I IBX=0 Q 0
"RTN","BPSUTIL",90,0)
 I $O(^BPS(9002313.56,IBX))>0 Q 1
"RTN","BPSUTIL",91,0)
 Q "0^"_$$GET1^DIQ(9002313.56,IBX,.01,"E")
"RTN","BPSUTIL",92,0)
 ;
"RTN","BPSUTIL",93,0)
 ; Function for IB (IA #4146) to return site linked to pharmacy
"RTN","BPSUTIL",94,0)
 ; Input
"RTN","BPSUTIL",95,0)
 ;   BPSDIV - Outpatient Site
"RTN","BPSUTIL",96,0)
 ; Returns
"RTN","BPSUTIL",97,0)
 ;   BPSPHARM - BPS Pharmacy IEN
"RTN","BPSUTIL",98,0)
GETPHARM(BPSDIV) ;
"RTN","BPSUTIL",99,0)
 N BPSPHARM
"RTN","BPSUTIL",100,0)
 I $G(BPSDIV)="" Q ""
"RTN","BPSUTIL",101,0)
 S BPSPHARM=$O(^BPS(9002313.56,"C",BPSDIV,0)) I 'BPSPHARM Q ""
"RTN","BPSUTIL",102,0)
 Q:'$$BPSACTV^BPSUTIL(BPSPHARM) ""
"RTN","BPSUTIL",103,0)
 Q BPSPHARM
"RTN","BPSUTIL",104,0)
 ;
"RTN","BPSUTIL",105,0)
 ;API  for the IB package (IA#4146)
"RTN","BPSUTIL",106,0)
 ;Input parameters:
"RTN","BPSUTIL",107,0)
 ; BPSRX  - Rx ien (file #52)
"RTN","BPSUTIL",108,0)
 ; BPSREFNO - refill number
"RTN","BPSUTIL",109,0)
 ;Returned value:
"RTN","BPSUTIL",110,0)
 ; 1st piece:
"RTN","BPSUTIL",111,0)
 ;  0 - status "non-payable" OR there is no response from the payer for whatever reason OR wasn't submitted OR invalid parameters
"RTN","BPSUTIL",112,0)
 ;  1- status "payable"
"RTN","BPSUTIL",113,0)
 ; 2nd piece:
"RTN","BPSUTIL",114,0)
 ;  amount the payer agreed to pay
"RTN","BPSUTIL",115,0)
 ; 3rd piece:
"RTN","BPSUTIL",116,0)
 ;  Date of Service
"RTN","BPSUTIL",117,0)
 ;
"RTN","BPSUTIL",118,0)
PAIDAMNT(BPSRX,BPSREFNO) ;
"RTN","BPSUTIL",119,0)
 I ($G(BPSRX)="")!($G(BPSREFNO)="") Q "0^"
"RTN","BPSUTIL",120,0)
 N BPSTAT,BPSRET,IEN59,BPSRESP,BPDOS
"RTN","BPSUTIL",121,0)
 S BPSTAT=$$STATUS^BPSOSRX(BPSRX,BPSREFNO)
"RTN","BPSUTIL",122,0)
 ;The status of the claim should be "payable" in order to get amount of the 3rd party payment
"RTN","BPSUTIL",123,0)
 ;If it was an attempt to reverse the payable claim AND reversal was rejected
"RTN","BPSUTIL",124,0)
 ;then the claim still is considered as "payable" and we still can get the amount paid by the 3rd party.
"RTN","BPSUTIL",125,0)
 ;In this case we return 1 (payable) in first piece and the amount paid in the 2nd piece of the returned value.
"RTN","BPSUTIL",126,0)
 ;All other statuses mean that we cannot get amount paid so we return 0 = "non payable"
"RTN","BPSUTIL",127,0)
 I $P(BPSTAT,U)'="E PAYABLE",$P(BPSTAT,U)'="E REVERSAL REJECTED",$P(BPSTAT,U)'="E DUPLICATE" Q "0^"
"RTN","BPSUTIL",128,0)
 ;get ien for BPS TRANSACTION file
"RTN","BPSUTIL",129,0)
 S IEN59=+$$IEN59^BPSOSRX(BPSRX,BPSREFNO)
"RTN","BPSUTIL",130,0)
 I IEN59="" Q "0^"  ;BPS Transaction IEN could not be calculated
"RTN","BPSUTIL",131,0)
 S BPSRESP=+$P($G(^BPST(IEN59,0)),U,5)
"RTN","BPSUTIL",132,0)
 ;response from the payer was not found  - either claim was never submitted OR there
"RTN","BPSUTIL",133,0)
 ;is no response for some reason - either way - we cannot provide the amount paid, so return "0"
"RTN","BPSUTIL",134,0)
 I BPSRESP=0 Q "0^"
"RTN","BPSUTIL",135,0)
 S BPDOS=+$P($G(^BPST(IEN59,12)),U,2)
"RTN","BPSUTIL",136,0)
 S BPSRET=+$$INSPAID^BPSOS03(BPSRESP)
"RTN","BPSUTIL",137,0)
 Q "1^"_BPSRET_U_BPDOS
"RTN","BPSUTIL",138,0)
 ;
"RTN","BPSUTIL",139,0)
 ; NPIEXTR
"RTN","BPSUTIL",140,0)
 ;   This API was written for the NPI extract (XUSNPIX2) and returns
"RTN","BPSUTIL",141,0)
 ;    the NCPDP and STATUS of the associated BPS Pharmacy
"RTN","BPSUTIL",142,0)
 ;   Input:
"RTN","BPSUTIL",143,0)
 ;      SITE - Pointer to Outpatient Site file (#59)
"RTN","BPSUTIL",144,0)
 ;   Output
"RTN","BPSUTIL",145,0)
 ;      NCPDP^STATUS (0 - inactive, 1 - active)
"RTN","BPSUTIL",146,0)
 ;      "" if no SITE passed in or no linkage
"RTN","BPSUTIL",147,0)
NPIEXTR(SITE) ;
"RTN","BPSUTIL",148,0)
 I '$G(SITE) Q ""
"RTN","BPSUTIL",149,0)
 N BPSPHARM,NCPDP,STATUS
"RTN","BPSUTIL",150,0)
 S BPSPHARM=$O(^BPS(9002313.56,"C",SITE,0))
"RTN","BPSUTIL",151,0)
 I 'BPSPHARM Q ""
"RTN","BPSUTIL",152,0)
 S STATUS=$$BPSACTV^BPSUTIL(BPSPHARM)
"RTN","BPSUTIL",153,0)
 S NCPDP=$$GET1^DIQ(9002313.56,BPSPHARM_",",.02)
"RTN","BPSUTIL",154,0)
 Q NCPDP_"^"_STATUS
"RTN","BPSWRKLS")
0^27^B32047440
"RTN","BPSWRKLS",1,0)
BPSWRKLS ;ALB/SS - SEND CLAIMS TO PHARMACY WORKLIST ;12/26/07
"RTN","BPSWRKLS",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8,11,15,20**;JUN 2004;Build 27
"RTN","BPSWRKLS",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","BPSWRKLS",4,0)
 ;
"RTN","BPSWRKLS",5,0)
 ; -- main entry point for BPS PRTCL USRSCR PHARM WRKLST protocol (ECME User Screen option)
"RTN","BPSWRKLS",6,0)
 ;
"RTN","BPSWRKLS",7,0)
EN ;
"RTN","BPSWRKLS",8,0)
 ;entry point for WRK Send to Worklist menu option of the main User Screen
"RTN","BPSWRKLS",9,0)
 N BPRET,BPSARR59,BPSTATS,BPQ,BP59,BPCNT,BP59SENT,BPCOMZ,BPZ,BPUPD
"RTN","BPSWRKLS",10,0)
 S BPCNT=0
"RTN","BPSWRKLS",11,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSWRKLS",12,0)
 D FULL^VALM1
"RTN","BPSWRKLS",13,0)
 I '$$CHCKKEY() D  Q
"RTN","BPSWRKLS",14,0)
 . W !,"The user doesn't have enough rights to perform this action"
"RTN","BPSWRKLS",15,0)
 . D QUIT(1)
"RTN","BPSWRKLS",16,0)
 ;
"RTN","BPSWRKLS",17,0)
 S BPQ=0
"RTN","BPSWRKLS",18,0)
 F  D  Q:BPQ>0
"RTN","BPSWRKLS",19,0)
 . K BP59SENT,BPSARR59
"RTN","BPSWRKLS",20,0)
 . S BPZ=$$SELCLMS(.BPSARR59,VALMAR)
"RTN","BPSWRKLS",21,0)
 . I BPZ=0 S BPQ=1 Q  ;nothing selected or up-arrow entered
"RTN","BPSWRKLS",22,0)
 . ; check selected claims
"RTN","BPSWRKLS",23,0)
 . S BPCNT=$$CHCKSEL(.BPSARR59,.BP59SENT)
"RTN","BPSWRKLS",24,0)
 . I BPCNT>0 S BPQ=1 ; if at least one can be processed then do not prompt the user again (BPQ>1)
"RTN","BPSWRKLS",25,0)
 ;
"RTN","BPSWRKLS",26,0)
 I BPCNT=0 D QUIT() Q
"RTN","BPSWRKLS",27,0)
 ;add comments
"RTN","BPSWRKLS",28,0)
 S BPCOMZ=$$COMMENT^BPSSCRCL("Comment for Pharmacy ",40)
"RTN","BPSWRKLS",29,0)
 I BPCOMZ="^" D QUIT() Q
"RTN","BPSWRKLS",30,0)
 I $L(BPCOMZ)>0 S BPCOMZ="Sent to Pharmacy:"_BPCOMZ
"RTN","BPSWRKLS",31,0)
 E  S BPCOMZ="Sent to Pharmacy Worklist"
"RTN","BPSWRKLS",32,0)
 W !!,"Eligible claim(s) will be sent to the Pharmacy Worklist...",!
"RTN","BPSWRKLS",33,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSWRKLS",34,0)
 I BPQ<1 D QUIT() Q
"RTN","BPSWRKLS",35,0)
 ;send to Pharmacy
"RTN","BPSWRKLS",36,0)
 S BP59=0,BPUPD=0
"RTN","BPSWRKLS",37,0)
 F  S BP59=$O(BP59SENT(BP59)) Q:+BP59=0  S BPUPD=$$TOPHARM(BP59,BPCOMZ,.BPSARR59)
"RTN","BPSWRKLS",38,0)
 D QUIT(1)
"RTN","BPSWRKLS",39,0)
 D:BPUPD=1 REDRAW^BPSSCRUD("Updating screen...")
"RTN","BPSWRKLS",40,0)
 Q
"RTN","BPSWRKLS",41,0)
 ;send the claim to Pharmacy Worklist
"RTN","BPSWRKLS",42,0)
 ;BP59 - pointer to the BPS TRANSACTION file
"RTN","BPSWRKLS",43,0)
 ;BPCOMM - comment
"RTN","BPSWRKLS",44,0)
 ;BPSARR59 - array with selected claims as BPS TRANSACTION pointers
"RTN","BPSWRKLS",45,0)
 ;returns:
"RTN","BPSWRKLS",46,0)
 ;1- has been successfully sent
"RTN","BPSWRKLS",47,0)
 ;0- failed to send
"RTN","BPSWRKLS",48,0)
TOPHARM(BP59,BPCOMM,BPSARR59) ;
"RTN","BPSWRKLS",49,0)
 N BPRXIEN,BPRXFIL,BPRET,BPX
"RTN","BPSWRKLS",50,0)
 S BPX=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSWRKLS",51,0)
 S BPRXIEN=+BPX
"RTN","BPSWRKLS",52,0)
 S BPRXFIL=$P(BPX,U,2)
"RTN","BPSWRKLS",53,0)
 ;use Pharmacy API to send the claim and the comment IA #5063
"RTN","BPSWRKLS",54,0)
 S BPRET=$$WRKLST^PSOREJU4(BPRXIEN,BPRXFIL,BPCOMM,DUZ,DT,1,$$COB59^BPSUTIL2(BP59))
"RTN","BPSWRKLS",55,0)
 W !,$G(@VALMAR@(+$G(BPSARR59(BP59)),0))
"RTN","BPSWRKLS",56,0)
 I +BPRET=2 W !,"was ALREADY sent to the Pharmacy Work List." Q 0
"RTN","BPSWRKLS",57,0)
 I +BPRET=0 W !,"cannot be sent: ",$P(BPRET,U,2) Q 0
"RTN","BPSWRKLS",58,0)
 ;add the comment to BPS TRANSACTION
"RTN","BPSWRKLS",59,0)
 I $$ADDCOMM^BPSBUTL(BPRXIEN,BPRXFIL,BPCOMM) ;COB
"RTN","BPSWRKLS",60,0)
 W !,"has been sent to the Pharmacy Work List."
"RTN","BPSWRKLS",61,0)
 Q 1
"RTN","BPSWRKLS",62,0)
 ;check selected claims 
"RTN","BPSWRKLS",63,0)
 ;BPSARR59 - array with the claims selected by the user
"RTN","BPSWRKLS",64,0)
 ;BP59SENT - array with the claims that will be sent to the pharmacy
"RTN","BPSWRKLS",65,0)
 ;output:
"RTN","BPSWRKLS",66,0)
 ;the number of claims that will be sent to the Pharmacy Worklist
"RTN","BPSWRKLS",67,0)
CHCKSEL(BPSARR59,BP59SENT) ;
"RTN","BPSWRKLS",68,0)
 N BP59,BPCNT,BPREJS,BPALLREJ,BPNOTSNT,BPSDIV59
"RTN","BPSWRKLS",69,0)
 S BP59=0,BPCNT=0
"RTN","BPSWRKLS",70,0)
 ;check each selected claim
"RTN","BPSWRKLS",71,0)
 S BPNOTSNT=0
"RTN","BPSWRKLS",72,0)
 W !,"You've chosen to send to Pharmacy Work List the following:"
"RTN","BPSWRKLS",73,0)
 F  S BP59=$O(BPSARR59(BP59)) Q:+BP59=0  D
"RTN","BPSWRKLS",74,0)
 . W !,$G(@VALMAR@(+$G(BPSARR59(BP59)),0))
"RTN","BPSWRKLS",75,0)
 . ;
"RTN","BPSWRKLS",76,0)
 . ; check for non-billable entry - cannot be sent to the Pharmacy work list from here
"RTN","BPSWRKLS",77,0)
 . I $$NB^BPSSCR03(BP59) W !,"Entry is NON BILLABLE and cannot be sent to the Pharmacy Work List." Q
"RTN","BPSWRKLS",78,0)
 . ;
"RTN","BPSWRKLS",79,0)
 . I $$CLOSED02^BPSSCR03($P($G(^BPST(BP59,0)),U,4)) W !,"is closed and cannot be sent to the Pharmacy Work List." Q
"RTN","BPSWRKLS",80,0)
 . ; check status - only rejected cannot be sent to the Pharmacy worklist
"RTN","BPSWRKLS",81,0)
 . S BPSTATS=$P($$CLAIMST^BPSSCRU3(BP59),U)
"RTN","BPSWRKLS",82,0)
 . I BPSTATS'="E REJECTED" W !,"was not rejected and cannot be sent to the Pharmacy Work List." Q
"RTN","BPSWRKLS",83,0)
 . ;check if the claim has an eligible reject code(s)
"RTN","BPSWRKLS",84,0)
 . I $$INWRKLST(BP59)=1 W !,"was ALREADY sent to the Pharmacy Work List." Q
"RTN","BPSWRKLS",85,0)
 . ;check Pharmacy settings - if all rejects can be sent
"RTN","BPSWRKLS",86,0)
 . ;IA 5063
"RTN","BPSWRKLS",87,0)
 . S BPSDIV59=$P($G(^BPST(BP59,1)),U,4)
"RTN","BPSWRKLS",88,0)
 . D AUTOREJ^PSOREJU4(.BPREJS,BPSDIV59)
"RTN","BPSWRKLS",89,0)
 . I $$CHCKREJ(BP59,BPSDIV59)=0 W !,"doesn't have eligible reject code to be sent to the Pharmacy Work List." Q
"RTN","BPSWRKLS",90,0)
 . S BPCNT=BPCNT+1 ;count eligible claims
"RTN","BPSWRKLS",91,0)
 . S BP59SENT(BP59)="" ;put them in the output array
"RTN","BPSWRKLS",92,0)
 . S BP59SENT=BPCNT
"RTN","BPSWRKLS",93,0)
 Q BPCNT
"RTN","BPSWRKLS",94,0)
 ;
"RTN","BPSWRKLS",95,0)
NOTSNDMS ;
"RTN","BPSWRKLS",96,0)
 W "cannot be sent - "
"RTN","BPSWRKLS",97,0)
 Q
"RTN","BPSWRKLS",98,0)
 ;
"RTN","BPSWRKLS",99,0)
 ;BPSARR59 (by reference)- to store BPS TRANSACTION pointers selected by the user
"RTN","BPSWRKLS",100,0)
 ;BPTMP - temporary global (like VALMAR)
"RTN","BPSWRKLS",101,0)
SELCLMS(BPSARR59,BPTMP) ;
"RTN","BPSWRKLS",102,0)
 W !!,"Enter the line numbers for the claim(s) to send to the Pharmacy Worklist."
"RTN","BPSWRKLS",103,0)
 S BPRET=$$ASKLINES^BPSSCRU4("Select item(s)","C",.BPSARR59,BPTMP)
"RTN","BPSWRKLS",104,0)
 I BPRET="^" Q 0
"RTN","BPSWRKLS",105,0)
 Q 1
"RTN","BPSWRKLS",106,0)
 ;
"RTN","BPSWRKLS",107,0)
CHCKKEY() ;
"RTN","BPSWRKLS",108,0)
 ;check if the user does have BPS MANAGER key
"RTN","BPSWRKLS",109,0)
 I $D(^XUSEC("BPS MANAGER",DUZ)) Q 1
"RTN","BPSWRKLS",110,0)
 Q 0
"RTN","BPSWRKLS",111,0)
 ;BPPAUSE 1- make pause
"RTN","BPSWRKLS",112,0)
QUIT(BPPAUSE) ;
"RTN","BPSWRKLS",113,0)
 I $G(BPPAUSE)>0 D
"RTN","BPSWRKLS",114,0)
 . I $$PAUSE^BPSSCRRV()
"RTN","BPSWRKLS",115,0)
 S VALMBCK="R"
"RTN","BPSWRKLS",116,0)
 Q
"RTN","BPSWRKLS",117,0)
 ;check if the claim can be sent to the pharmacy because its reject code is eligible for this
"RTN","BPSWRKLS",118,0)
 ;BP59 - pointer to the BPS TRANSACTION file
"RTN","BPSWRKLS",119,0)
 ;BPSDIV59 - pointer to file #59 (PHARMACY DIVISION)
"RTN","BPSWRKLS",120,0)
 ;return value:
"RTN","BPSWRKLS",121,0)
 ;1- can be sent
"RTN","BPSWRKLS",122,0)
 ;0- cannot be sent
"RTN","BPSWRKLS",123,0)
CHCKREJ(BP59,BPSDIV59) ;
"RTN","BPSWRKLS",124,0)
 N BPREJS,BPRJCODE,BPRJS,BPFLG
"RTN","BPSWRKLS",125,0)
 ;get reject codes for the claim
"RTN","BPSWRKLS",126,0)
 D REJCODES^BPSSCRU3(BP59,.BPREJS) ;
"RTN","BPSWRKLS",127,0)
 ;if no reject codes then return 0
"RTN","BPSWRKLS",128,0)
 I $O(BPREJS(""))="" Q 0
"RTN","BPSWRKLS",129,0)
 D CONVERT(.BPREJS,.BPRJS)
"RTN","BPSWRKLS",130,0)
 ;call Pharmacy API to read site parameters and check if the claim with these reject codes can be sent to the Pharmacy Worklist
"RTN","BPSWRKLS",131,0)
 ;IA 5063
"RTN","BPSWRKLS",132,0)
 D AUTOREJ^PSOREJU4(.BPRJS,BPSDIV59)
"RTN","BPSWRKLS",133,0)
 ;check result
"RTN","BPSWRKLS",134,0)
 S BPRJCODE="",BPFLG=0
"RTN","BPSWRKLS",135,0)
 F  S BPRJCODE=$O(BPRJS(1,BPRJCODE)) Q:BPRJCODE=""  I BPRJS(1,BPRJCODE)=1 S BPFLG=1 Q
"RTN","BPSWRKLS",136,0)
 ;return 1 if the claim has at least one reject code that matches site parameter reject codes
"RTN","BPSWRKLS",137,0)
 ;return 0 if not
"RTN","BPSWRKLS",138,0)
 Q BPFLG
"RTN","BPSWRKLS",139,0)
 ;
"RTN","BPSWRKLS",140,0)
 ;check if the claim is already in the Pharmacy Worklist
"RTN","BPSWRKLS",141,0)
 ;BP59 - pointer to the BPS TRANSACTION file
"RTN","BPSWRKLS",142,0)
 ;return: 
"RTN","BPSWRKLS",143,0)
 ;1 - in list
"RTN","BPSWRKLS",144,0)
 ;0 - not in list
"RTN","BPSWRKLS",145,0)
INWRKLST(BP59) ;
"RTN","BPSWRKLS",146,0)
 N BPRXIEN,BPRXFIL,BPX
"RTN","BPSWRKLS",147,0)
 S BPX=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSWRKLS",148,0)
 S BPRXIEN=+BPX
"RTN","BPSWRKLS",149,0)
 S BPRXFIL=$P(BPX,U,2)
"RTN","BPSWRKLS",150,0)
 ;IA #5063
"RTN","BPSWRKLS",151,0)
 Q $$INLIST^PSOREJU4(BPRXIEN,BPRXFIL,$$COB59^BPSUTIL2(BP59))
"RTN","BPSWRKLS",152,0)
 ;
"RTN","BPSWRKLS",153,0)
 ;Converts external values of the BPS NCPDP REJECT CODES file #9002313.93
"RTN","BPSWRKLS",154,0)
 ;stored in the local array BPSARRJ1 to IENs and save them in the local 
"RTN","BPSWRKLS",155,0)
 ;array BPSARRJ2 under "1" subscript - in the form suitable for the AUTOREJ^PSOREJU4
"RTN","BPSWRKLS",156,0)
CONVERT(BPSARRJ1,BPSARRJ2) ;
"RTN","BPSWRKLS",157,0)
 N BPREJ1,BPREJ2
"RTN","BPSWRKLS",158,0)
 S BPREJ1=""
"RTN","BPSWRKLS",159,0)
 F  S BPREJ1=$O(BPSARRJ1(BPREJ1)) Q:BPREJ1=""  D
"RTN","BPSWRKLS",160,0)
 . S BPREJ2=+$O(^BPSF(9002313.93,"B",BPREJ1,0))
"RTN","BPSWRKLS",161,0)
 . I BPREJ2>0 S BPSARRJ2(1,BPREJ2)=""
"RTN","BPSWRKLS",162,0)
 Q
"RTN","BPSWRKLS",163,0)
 ;send the rejected claims with 79 and 88 codes to Pharmacy Worklist 
"RTN","BPSWRKLS",164,0)
 ;Input: 
"RTN","BPSWRKLS",165,0)
 ; BPRXI - RX ien
"RTN","BPSWRKLS",166,0)
 ; BPRXR - refill
"RTN","BPSWRKLS",167,0)
 ; BPIEN59 - ien of BPS TRANSACTION file
"RTN","BPSWRKLS",168,0)
 ; BPPAYSEQ - payer sequence
"RTN","BPSWRKLS",169,0)
 ;Returns: 
"RTN","BPSWRKLS",170,0)
 ; 1 sent succesfully
"RTN","BPSWRKLS",171,0)
 ; 2 was ALREADY sent to the Pharmacy Work List
"RTN","BPSWRKLS",172,0)
 ; 0 cannot be sent
"RTN","BPSWRKLS",173,0)
SENDREJ(BPRXI,BPRXR,BPIEN59,BPPAYSEQ) ;
"RTN","BPSWRKLS",174,0)
 N BPZ,BPALLREJ,BPREJ,BPRET
"RTN","BPSWRKLS",175,0)
 S BPRET=0
"RTN","BPSWRKLS",176,0)
 D DUR1^BPSNCPD3(BPRXI,BPRXR,.BPREJ,"",BPPAYSEQ)
"RTN","BPSWRKLS",177,0)
 S BPZ=","_BPREJ(BPPAYSEQ,"REJ CODE LST")_","
"RTN","BPSWRKLS",178,0)
 I BPZ[",79,"!(BPZ[",88,") S BPRET=$$WRKLST^PSOREJU4(BPRXI,BPRXR,"Sent by ECME engine",DUZ,DT,1,BPPAYSEQ)
"RTN","BPSWRKLS",179,0)
 Q +BPRET
"RTN","BPSWRKLS",180,0)
 ;
"RTN","BPSWRKLS",181,0)
 ;BPSWRKLS
"SEC","^DIC",9002313.25,9002313.25,0,"AUDIT")
@
"SEC","^DIC",9002313.25,9002313.25,0,"DD")
@
"SEC","^DIC",9002313.25,9002313.25,0,"DEL")
@
"SEC","^DIC",9002313.25,9002313.25,0,"LAYGO")
@
"SEC","^DIC",9002313.25,9002313.25,0,"RD")
Pp
"SEC","^DIC",9002313.25,9002313.25,0,"WR")
@
"SEC","^DIC",9002313.91,9002313.91,0,"AUDIT")
@
"SEC","^DIC",9002313.91,9002313.91,0,"DD")
@
"SEC","^DIC",9002313.91,9002313.91,0,"DEL")
@
"SEC","^DIC",9002313.91,9002313.91,0,"LAYGO")
@
"SEC","^DIC",9002313.91,9002313.91,0,"RD")
Pp
"SEC","^DIC",9002313.91,9002313.91,0,"WR")
@
"SEC","^DIC",9002313.93,9002313.93,0,"AUDIT")
@
"SEC","^DIC",9002313.93,9002313.93,0,"DD")
@
"SEC","^DIC",9002313.93,9002313.93,0,"DEL")
@
"SEC","^DIC",9002313.93,9002313.93,0,"LAYGO")
@
"SEC","^DIC",9002313.93,9002313.93,0,"RD")
Pp
"SEC","^DIC",9002313.93,9002313.93,0,"WR")
@
"UP",9002313.03,9002313.0301,-1)
9002313.03^1000
"UP",9002313.03,9002313.0301,0)
9002313.0301
"UP",9002313.03,9002313.032087,-2)
9002313.03^1000
"UP",9002313.03,9002313.032087,-1)
9002313.0301^B87
"UP",9002313.03,9002313.032087,0)
9002313.032087
"UP",9002313.03,9002313.032091,-2)
9002313.03^1000
"UP",9002313.03,9002313.032091,-1)
9002313.0301^B90
"UP",9002313.03,9002313.032091,0)
9002313.032091
"UP",9002313.57,9002313.57111,-1)
9002313.57^11
"UP",9002313.57,9002313.57111,0)
9002313.57111
"UP",9002313.59,9002313.59111,-1)
9002313.59^11
"UP",9002313.59,9002313.59111,0)
9002313.59111
"VER")
8.0^22.0
"^DD",9002313.03,9002313.0301,2087,0)
QUAN LIMIT PER SPC TM PD COUNT^NJ1,0^^B80;7^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.03,9002313.0301,2087,.1)
QUANTITY LIMIT PER SPECIFIC TIME PERIOD COUNT
"^DD",9002313.03,9002313.0301,2087,3)
Type a number between 0 and 9, 0 decimal digits.
"^DD",9002313.03,9002313.0301,2087,21,0)
^^1^1^3150915^
"^DD",9002313.03,9002313.0301,2087,21,1,0)
Count of quantity limit per specific time period.
"^DD",9002313.03,9002313.0301,2087,23,0)
^^1^1^3150915^
"^DD",9002313.03,9002313.0301,2087,23,1,0)
NCPDP field B87-3P.
"^DD",9002313.03,9002313.0301,2087,"DT")
3150915
"^DD",9002313.03,9002313.0301,2087.01,0)
QUAN LIMIT TIME PERIOD MLTPL^9002313.032087A^^B87;0
"^DD",9002313.03,9002313.0301,2087.01,21,0)
^^2^2^3150915^
"^DD",9002313.03,9002313.0301,2087.01,21,1,0)
This multiple is used to hold the Quantity Limit Per Specific Time Period 
"^DD",9002313.03,9002313.0301,2087.01,21,2,0)
repeating group fields.
"^DD",9002313.03,9002313.0301,2087.01,"DT")
3150915
"^DD",9002313.03,9002313.0301,2090,0)
DAYS SUP LIM PER SPC TM PD CNT^NJ1,0^^B80;10^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.03,9002313.0301,2090,.1)
DAYS SUPPLY LIMIT PER SPECIFIC TIME PERIOD COUNT
"^DD",9002313.03,9002313.0301,2090,3)
Type a number between 0 and 9, 0 decimal digits.
"^DD",9002313.03,9002313.0301,2090,21,0)
^^1^1^3150915^
"^DD",9002313.03,9002313.0301,2090,21,1,0)
Count of days supply limit per specific time period.
"^DD",9002313.03,9002313.0301,2090,23,0)
^^1^1^3150915^
"^DD",9002313.03,9002313.0301,2090,23,1,0)
NCPDP field B90-3T.
"^DD",9002313.03,9002313.0301,2090,"DT")
3150915
"^DD",9002313.03,9002313.0301,2090.01,0)
DAYS SUPPLY LIM TM PD MULTIPLE^9002313.032091A^^B90;0
"^DD",9002313.03,9002313.0301,2090.01,21,0)
^^2^2^3150915^
"^DD",9002313.03,9002313.0301,2090.01,21,1,0)
This multiple is used to hold the Days Supply Limit Per Specific Time 
"^DD",9002313.03,9002313.0301,2090.01,21,2,0)
Period repeating group fields.
"^DD",9002313.03,9002313.0301,2090.01,"DT")
3150915
"^DD",9002313.03,9002313.032087,0)
QUAN LIMIT TIME PERIOD MLTPL SUB-FIELD^^2088^3
"^DD",9002313.03,9002313.032087,0,"DT")
3150915
"^DD",9002313.03,9002313.032087,0,"IX","B",9002313.032087,.01)

"^DD",9002313.03,9002313.032087,0,"NM","QUAN LIMIT TIME PERIOD MLTPL")

"^DD",9002313.03,9002313.032087,0,"UP")
9002313.0301
"^DD",9002313.03,9002313.032087,.01,0)
QUANTITY LIMIT TIME PD COUNTER^NJ1,0^^0;1^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.03,9002313.032087,.01,1,0)
^.1
"^DD",9002313.03,9002313.032087,.01,1,1,0)
9002313.032087^B
"^DD",9002313.03,9002313.032087,.01,1,1,1)
S ^BPSR(DA(2),1000,DA(1),"B87","B",$E(X,1,30),DA)=""
"^DD",9002313.03,9002313.032087,.01,1,1,2)
K ^BPSR(DA(2),1000,DA(1),"B87","B",$E(X,1,30),DA)
"^DD",9002313.03,9002313.032087,.01,3)
Type a number between 0 and 9, 0 decimal digits.
"^DD",9002313.03,9002313.032087,.01,21,0)
^^2^2^3150915^
"^DD",9002313.03,9002313.032087,.01,21,1,0)
This is a sequential counter of the Quantity Limit Per Specific Time 
"^DD",9002313.03,9002313.032087,.01,21,2,0)
Period occurrences.
"^DD",9002313.03,9002313.032087,.01,"DT")
3150915
"^DD",9002313.03,9002313.032087,2088,0)
QUAN LIMIT PER SPC TIME PERIOD^NJ11,3^^0;2^K:+X'=X!(X>9999999.999)!(X<0)!(X?.E1"."4.N) X
"^DD",9002313.03,9002313.032087,2088,.1)
QUANTITY LIMIT PER SPECIFIC TIME PERIOD
"^DD",9002313.03,9002313.032087,2088,3)
Type a number between 0 and 9999999.999, 3 decimal digits.
"^DD",9002313.03,9002313.032087,2088,21,0)
^^1^1^3150915^
"^DD",9002313.03,9002313.032087,2088,21,1,0)
Maximum quantity allowed over the designated time period.
"^DD",9002313.03,9002313.032087,2088,23,0)
^^1^1^3150915^
"^DD",9002313.03,9002313.032087,2088,23,1,0)
NCPDP field B88-3R.
"^DD",9002313.03,9002313.032087,2088,"DT")
3150915
"^DD",9002313.03,9002313.032087,2089,0)
QUANTITY LIMIT TIME PERIOD^NJ5,0^^0;3^K:+X'=X!(X>99999)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.03,9002313.032087,2089,3)
Type a number between 0 and 99999, 0 decimal digits.
"^DD",9002313.03,9002313.032087,2089,21,0)
^^1^1^3150915^
"^DD",9002313.03,9002313.032087,2089,21,1,0)
Number of days to which the maximum quantity is allowed.
"^DD",9002313.03,9002313.032087,2089,23,0)
^^1^1^3150915^
"^DD",9002313.03,9002313.032087,2089,23,1,0)
NCPDP field B89-3S.
"^DD",9002313.03,9002313.032087,2089,"DT")
3150915
"^DD",9002313.03,9002313.032091,0)
DAYS SUPPLY LIM TM PD MULTIPLE SUB-FIELD^^2092^3
"^DD",9002313.03,9002313.032091,0,"DT")
3150915
"^DD",9002313.03,9002313.032091,0,"IX","B",9002313.032091,.01)

"^DD",9002313.03,9002313.032091,0,"NM","DAYS SUPPLY LIM TM PD MULTIPLE")

"^DD",9002313.03,9002313.032091,0,"UP")
9002313.0301
"^DD",9002313.03,9002313.032091,.01,0)
DAYS SUPPLY LIM TM PD COUNTER^NJ1,0^^0;1^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.03,9002313.032091,.01,1,0)
^.1
"^DD",9002313.03,9002313.032091,.01,1,1,0)
9002313.032091^B
"^DD",9002313.03,9002313.032091,.01,1,1,1)
S ^BPSR(DA(2),1000,DA(1),"B90","B",$E(X,1,30),DA)=""
"^DD",9002313.03,9002313.032091,.01,1,1,2)
K ^BPSR(DA(2),1000,DA(1),"B90","B",$E(X,1,30),DA)
"^DD",9002313.03,9002313.032091,.01,3)
Type a number between 0 and 9, 0 decimal digits.
"^DD",9002313.03,9002313.032091,.01,21,0)
^^2^2^3150915^
"^DD",9002313.03,9002313.032091,.01,21,1,0)
This is a sequential counter of the Days Supply Limit Per Specific Time 
"^DD",9002313.03,9002313.032091,.01,21,2,0)
Period occurrences.
"^DD",9002313.03,9002313.032091,.01,"DT")
3150915
"^DD",9002313.03,9002313.032091,2091,0)
DAYS SUP LIM PER SPC TM PERIOD^NJ3,0^^0;2^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.03,9002313.032091,2091,.1)
DAYS SUPPLY LIMIT PER SPECIFIC TIME PERIOD
"^DD",9002313.03,9002313.032091,2091,3)
Type a number between 0 and 999, 0 decimal digits.
"^DD",9002313.03,9002313.032091,2091,21,0)
^^1^1^3150915^
"^DD",9002313.03,9002313.032091,2091,21,1,0)
Maximum days supply allowed over the designated time period.
"^DD",9002313.03,9002313.032091,2091,23,0)
^^1^1^3150915^
"^DD",9002313.03,9002313.032091,2091,23,1,0)
NCPDP field B91-3W.
"^DD",9002313.03,9002313.032091,2091,"DT")
3150915
"^DD",9002313.03,9002313.032091,2092,0)
DAYS SUPPLY LIMIT TIME PERIOD^NJ5,0^^0;3^K:+X'=X!(X>99999)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.03,9002313.032091,2092,3)
Type a number between 0 and 99999, 0 decimal digits.
"^DD",9002313.03,9002313.032091,2092,21,0)
^^2^2^3150915^
"^DD",9002313.03,9002313.032091,2092,21,1,0)
This is an informational field to convey the maximum days supply over a 
"^DD",9002313.03,9002313.032091,2092,21,2,0)
set number of days for this medication.
"^DD",9002313.03,9002313.032091,2092,23,0)
^^1^1^3150915^
"^DD",9002313.03,9002313.032091,2092,23,1,0)
NCPDP field B92-3X.
"^DD",9002313.03,9002313.032091,2092,"DT")
3150915
"^DD",9002313.25,9002313.25,0)
FIELD^^.02^2
"^DD",9002313.25,9002313.25,0,"DDA")
N
"^DD",9002313.25,9002313.25,0,"DT")
3071212
"^DD",9002313.25,9002313.25,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",9002313.25,9002313.25,0,"IX","B",9002313.25,.01)

"^DD",9002313.25,9002313.25,0,"NM","BPS NCPDP CLARIFICATION CODES")

"^DD",9002313.25,9002313.25,0,"VRPK")
BPS
"^DD",9002313.25,9002313.25,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1)!'(X'?1P.E) X
"^DD",9002313.25,9002313.25,.01,1,0)
^.1
"^DD",9002313.25,9002313.25,.01,1,1,0)
9002313.25^B
"^DD",9002313.25,9002313.25,.01,1,1,1)
S ^BPS(9002313.25,"B",$E(X,1,30),DA)=""
"^DD",9002313.25,9002313.25,.01,1,1,2)
K ^BPS(9002313.25,"B",$E(X,1,30),DA)
"^DD",9002313.25,9002313.25,.01,3)
Answer must be 1-2 characters in length.
"^DD",9002313.25,9002313.25,.01,21,0)
^^2^2^3080613^
"^DD",9002313.25,9002313.25,.01,21,1,0)
Clarification code to be sent to the payer as defined by the NCPDP 
"^DD",9002313.25,9002313.25,.01,21,2,0)
standard.
"^DD",9002313.25,9002313.25,.01,"DT")
3080613
"^DD",9002313.25,9002313.25,.02,0)
DESCRIPTION^FX^^0;2^K:$L(X)>80!($L(X)<1) X S:$D(X) X=$$UP^XLFSTR(X)
"^DD",9002313.25,9002313.25,.02,3)
Answer must be 1-80 characters in length.
"^DD",9002313.25,9002313.25,.02,21,0)
^^1^1^3080613^
"^DD",9002313.25,9002313.25,.02,21,1,0)
Description of the clarification code.
"^DD",9002313.25,9002313.25,.02,"DT")
3080613
"^DD",9002313.32,9002313.32,.1,0)
ADJUDICATED PAYMENT TYPE^S^1:MEDICAID;2:MEDICARE;3:COMMERCIAL;4:WORKERS COMPENSATION;5:DISCOUNT PROGRAM;6:COUPON REIMBURSEMENT;7:VOUCHER;8:MILITARY/VA;9:UNKNOWN;99:OTHER;^0;10^Q
"^DD",9002313.32,9002313.32,.1,3)
Enter override value for Adjudicated Payment Type.
"^DD",9002313.32,9002313.32,.1,21,0)
^^4^4^3130524^
"^DD",9002313.32,9002313.32,.1,21,1,0)
This is the override value that will be used for the payer response
"^DD",9002313.32,9002313.32,.1,21,2,0)
for billing requests.  The value will be used to populate the ADJUDICATED 
"^DD",9002313.32,9002313.32,.1,21,3,0)
PAYMENT TYPE (#1028) field of RESPONSES (#9002313.0301) subfile of the
"^DD",9002313.32,9002313.32,.1,21,4,0)
BPS RESPONSES (#9002313.03) file. Corresponds to NCPDP code A28-ZR.
"^DD",9002313.32,9002313.32,.1,"DT")
3150526
"^DD",9002313.32,9002313.32,.11,0)
QUAN LIMIT PER SPC TIME PERIOD^NJ11,3^^0;11^K:+X'=X!(X>9999999.999)!(X<1)!(X?.E1"."4.N) X
"^DD",9002313.32,9002313.32,.11,.1)
QUANTITY LIMIT PER SPECIFIC TIME PERIOD
"^DD",9002313.32,9002313.32,.11,3)
Type a number between 1 and 9999999.999, 3 decimal digits.
"^DD",9002313.32,9002313.32,.11,21,0)
^^7^7^3150916^
"^DD",9002313.32,9002313.32,.11,21,1,0)
Maximum quantity allowed over the designated time period.
"^DD",9002313.32,9002313.32,.11,21,2,0)
 
"^DD",9002313.32,9002313.32,.11,21,3,0)
This is the override value that will be used for the payer response for 
"^DD",9002313.32,9002313.32,.11,21,4,0)
billing requests. The value will be used to populate the QUAN LIMIT PER 
"^DD",9002313.32,9002313.32,.11,21,5,0)
SPC TIME PERIOD field (#2088) of the QUAN LIMIT TIME PERIOD MLTPL 
"^DD",9002313.32,9002313.32,.11,21,6,0)
multiple (#9002313.032087) of the RESPONSES subfile (#9002313.0301) of 
"^DD",9002313.32,9002313.32,.11,21,7,0)
the BPS RESPONSES file (#9002313.03).  This is NCPDP field B88-3R.
"^DD",9002313.32,9002313.32,.11,"DT")
3150916
"^DD",9002313.32,9002313.32,.12,0)
QUANTITY LIMIT TIME PERIOD^NJ5,0^^0;12^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",9002313.32,9002313.32,.12,3)
Type a number between 1 and 99999, 0 decimal digits.
"^DD",9002313.32,9002313.32,.12,21,0)
^^7^7^3150916^
"^DD",9002313.32,9002313.32,.12,21,1,0)
Number of days to which the maximum quantity is allowed.
"^DD",9002313.32,9002313.32,.12,21,2,0)
 
"^DD",9002313.32,9002313.32,.12,21,3,0)
This is the override value that will be used for the payer response for
"^DD",9002313.32,9002313.32,.12,21,4,0)
billing requests. The value will be used to populate the QUANTITY LIMIT 
"^DD",9002313.32,9002313.32,.12,21,5,0)
TIME PERIOD field (#2089) of the QUAN LIMIT TIME PERIOD MLTPL multiple
"^DD",9002313.32,9002313.32,.12,21,6,0)
(#9002313.032087) of the RESPONSES subfile (#9002313.0301) of the BPS
"^DD",9002313.32,9002313.32,.12,21,7,0)
RESPONSES file (#9002313.03).  This is NCPDP field B89-3S.
"^DD",9002313.32,9002313.32,.12,"DT")
3150916
"^DD",9002313.32,9002313.32,.13,0)
DAYS SUP LIM PER SPC TM PERIOD^NJ3,0^^0;13^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1.N) X
"^DD",9002313.32,9002313.32,.13,.1)
DAYS SUPPLY LIMIT PER SPECIFIC TIME PERIOD
"^DD",9002313.32,9002313.32,.13,3)
Type a number between 1 and 999, 0 decimal digits.
"^DD",9002313.32,9002313.32,.13,21,0)
^^7^7^3150916^
"^DD",9002313.32,9002313.32,.13,21,1,0)
Maximum days supply allowed over the designated time period.
"^DD",9002313.32,9002313.32,.13,21,2,0)
 
"^DD",9002313.32,9002313.32,.13,21,3,0)
This is the override value that will be used for the payer response for
"^DD",9002313.32,9002313.32,.13,21,4,0)
billing requests. The value will be used to populate the DAYS SUP LIM PER
"^DD",9002313.32,9002313.32,.13,21,5,0)
SPC TM PERIOD field (#2091) of the DAYS SUPPLY LIM TM PD MULTIPLE 
"^DD",9002313.32,9002313.32,.13,21,6,0)
(9002313.032091) of the RESPONSES subfile (#9002313.0301) of the BPS
"^DD",9002313.32,9002313.32,.13,21,7,0)
RESPONSES file (#9002313.03).  This is NCPDP field B91-3W.
"^DD",9002313.32,9002313.32,.13,"DT")
3150916
"^DD",9002313.32,9002313.32,.14,0)
DAYS SUPPLY LIMIT TIME PERIOD^NJ5,0^^0;14^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",9002313.32,9002313.32,.14,3)
Type a number between 1 and 99999, 0 decimal digits.
"^DD",9002313.32,9002313.32,.14,21,0)
^^8^8^3150916^
"^DD",9002313.32,9002313.32,.14,21,1,0)
This is an informational field to convey the maximum days supply over a 
"^DD",9002313.32,9002313.32,.14,21,2,0)
set number of days for this medication.
"^DD",9002313.32,9002313.32,.14,21,3,0)
 
"^DD",9002313.32,9002313.32,.14,21,4,0)
This is the override value that will be used for the payer response for
"^DD",9002313.32,9002313.32,.14,21,5,0)
billing requests. The value will be used to populate the DAYS SUPPLY LIMIT
"^DD",9002313.32,9002313.32,.14,21,6,0)
TIME PERIOD field (#2092) of the DAYS SUPPLY LIM TM PD MULTIPLE
"^DD",9002313.32,9002313.32,.14,21,7,0)
(9002313.032091) of the RESPONSES subfile (#9002313.0301) of the BPS
"^DD",9002313.32,9002313.32,.14,21,8,0)
RESPONSES file (#9002313.03).  This is NCPDP field B92-3X.
"^DD",9002313.32,9002313.32,.14,"DT")
3150916
"^DD",9002313.32,9002313.32,.15,0)
INGREDIENT COST PAID^NJ8,2^^0;15^S:X["$" X=$P(X,"$",2) K:X'?."-".N.1".".2N!(X>99999.99)!(X<-99999.99)!(X?.E1"."3.N) X
"^DD",9002313.32,9002313.32,.15,3)
Type a dollar amount between -99999.99 and 99999.99, 2 decimal digits.
"^DD",9002313.32,9002313.32,.15,21,0)
^^3^3^3151229^
"^DD",9002313.32,9002313.32,.15,21,1,0)
This field overrides the value for NCPDP field 506-F6 Ingredient Cost Paid
"^DD",9002313.32,9002313.32,.15,21,2,0)
in the BPS Response. This is the drug ingredient cost paid which is 
"^DD",9002313.32,9002313.32,.15,21,3,0)
included in the Total Amount Paid field (509-F9).
"^DD",9002313.32,9002313.32,.15,"DT")
3151229
"^DD",9002313.32,9002313.32,.16,0)
DISPENSING FEE PAID^NJ8,2^^0;16^S:X["$" X=$P(X,"$",2) K:X'?."-".N.1".".2N!(X>99999.99)!(X<-99999.99)!(X?.E1"."3.N) X
"^DD",9002313.32,9002313.32,.16,3)
Type a dollar amount between -99999.99 and 99999.99, 2 decimal digits.
"^DD",9002313.32,9002313.32,.16,21,0)
^^3^3^3151229^
"^DD",9002313.32,9002313.32,.16,21,1,0)
This field overrides the value for NCPDP field 507-F7 Dispensing Fee 
"^DD",9002313.32,9002313.32,.16,21,2,0)
Paid in the BPS Response. This is the dispensing fee paid which is 
"^DD",9002313.32,9002313.32,.16,21,3,0)
included in the Total Amount Paid field (509-F9).
"^DD",9002313.32,9002313.32,.16,"DT")
3151229
"^DD",9002313.32,9002313.32,.17,0)
REMAINING DEDUCTIBLE AMOUNT^NJ8,2^^0;17^S:X["$" X=$P(X,"$",2) K:X'?."-".N.1".".2N!(X>99999.99)!(X<-99999.99)!(X?.E1"."3.N) X
"^DD",9002313.32,9002313.32,.17,3)
Type a dollar amount between -99999.99 and 99999.99, 2 decimal digits.
"^DD",9002313.32,9002313.32,.17,21,0)
^^3^3^3151229^
"^DD",9002313.32,9002313.32,.17,21,1,0)
This field overrides the value in NCPDP field 513-FD Remaining Deductible 
"^DD",9002313.32,9002313.32,.17,21,2,0)
Amount in the BPS Response. This is the amount not met by the
"^DD",9002313.32,9002313.32,.17,21,3,0)
patient/family in the deductible plan.
"^DD",9002313.32,9002313.32,.17,"DT")
3151229
"^DD",9002313.32,9002313.32,.18,0)
AMT APPLIED TO PERIODIC DEDUCT^NJ8,2^^0;18^S:X["$" X=$P(X,"$",2) K:X'?."-".N.1".".2N!(X>99999.99)!(X<-99999.99)!(X?.E1"."3.N) X
"^DD",9002313.32,9002313.32,.18,.1)
Amount Applied To Periodic Deductible
"^DD",9002313.32,9002313.32,.18,3)
Type a dollar amount between -99999.99 and 99999.99, 2 decimal digits.
"^DD",9002313.32,9002313.32,.18,21,0)
^^4^4^3151229^
"^DD",9002313.32,9002313.32,.18,21,1,0)
This field overrides the value in NCPDP field 517-FH Amount Applied To 
"^DD",9002313.32,9002313.32,.18,21,2,0)
Periodic Deductible in the BPS Response. This is the amount to be
"^DD",9002313.32,9002313.32,.18,21,3,0)
collected from a patient that is included in the Patient Pay Amount
"^DD",9002313.32,9002313.32,.18,21,4,0)
(505-F5) that is applied to a periodic deductible.
"^DD",9002313.32,9002313.32,.18,"DT")
3151229
"^DD",9002313.57,9002313.57,19,0)
TRANSACTION TYPE^S^C:CLAIM;E:ELIGIBILITY;U:UNCLAIM;N:NON-BILLABLE;^0;15^Q
"^DD",9002313.57,9002313.57,19,3)
Answer with the type of transaction that will be processed for this NCPDP request.
"^DD",9002313.57,9002313.57,19,21,0)
^^5^5^3150514^
"^DD",9002313.57,9002313.57,19,21,1,0)
This is the type of transaction that is being processed:
"^DD",9002313.57,9002313.57,19,21,2,0)
   CLAIM - An NCPDP billing request.
"^DD",9002313.57,9002313.57,19,21,3,0)
   UNCLAIM - An NCPDP reversal request.
"^DD",9002313.57,9002313.57,19,21,4,0)
   ELIGIBILITY - An eligibility verification request.
"^DD",9002313.57,9002313.57,19,21,5,0)
   NON-BILLABLE - A TRICARE/CHAMPVA non-billable prescription.
"^DD",9002313.57,9002313.57,19,23,0)
^^1^1^3150514^
"^DD",9002313.57,9002313.57,19,23,1,0)
NON-BILLABLE has been added with patch BPS*1*20.
"^DD",9002313.57,9002313.57,19,"DT")
3150514
"^DD",9002313.57,9002313.57,301,0)
NON-BILLABLE REASON^F^^3;1^K:$L(X)>60!($L(X)<1) X
"^DD",9002313.57,9002313.57,301,3)
Answer must be 1-60 characters in length.
"^DD",9002313.57,9002313.57,301,21,0)
^^3^3^3150819^
"^DD",9002313.57,9002313.57,301,21,1,0)
This is the reason why this prescription is Non-Billable.  It is the
"^DD",9002313.57,9002313.57,301,21,2,0)
free text value as returned by the IB Billing Determination process.
"^DD",9002313.57,9002313.57,301,21,3,0)
This is only for TRICARE or CHAMPVA prescriptions.
"^DD",9002313.57,9002313.57,301,23,0)
^^3^3^3150819^
"^DD",9002313.57,9002313.57,301,23,1,0)
This value comes from piece [2] of the return value of
"^DD",9002313.57,9002313.57,301,23,2,0)
$$RX^IBNCPDP when the prescription is reported as non-billable.
"^DD",9002313.57,9002313.57,301,23,3,0)
This is only for TRICARE or CHAMPVA prescriptions.
"^DD",9002313.57,9002313.57,301,"DT")
3150819
"^DD",9002313.57,9002313.57,302,0)
NON-BILLABLE CLOSED^S^0:NO;1:YES;^3;2^Q
"^DD",9002313.57,9002313.57,302,3)
Enter Yes if the Non-Billable entry is Closed.
"^DD",9002313.57,9002313.57,302,21,0)
^^4^4^3150515^
"^DD",9002313.57,9002313.57,302,21,1,0)
Enter Yes if this Non-Billable entry has been Closed.
"^DD",9002313.57,9002313.57,302,21,2,0)
Enter No if this Non-Billable entry is still Open.
"^DD",9002313.57,9002313.57,302,21,3,0)
When Non-Billable entries are initially created in the BPS
"^DD",9002313.57,9002313.57,302,21,4,0)
Transaction file, they are automatically defaulted to Open.
"^DD",9002313.57,9002313.57,302,"DT")
3150515
"^DD",9002313.57,9002313.57,303,0)
NON-BILLABLE DATE CLOSED^D^^3;3^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",9002313.57,9002313.57,303,3)
Enter the date and time when this Non-Billable entry was closed.
"^DD",9002313.57,9002313.57,303,21,0)
^^3^3^3150515^
"^DD",9002313.57,9002313.57,303,21,1,0)
This field contains the date and time when this Non-Billable
"^DD",9002313.57,9002313.57,303,21,2,0)
entry was closed.  It is set by the system when a user performs
"^DD",9002313.57,9002313.57,303,21,3,0)
this action on the ECME User Screen.
"^DD",9002313.57,9002313.57,303,"DT")
3150515
"^DD",9002313.57,9002313.57,304,0)
NON-BILLABLE CLOSED BY^P200'^VA(200,^3;4^Q
"^DD",9002313.57,9002313.57,304,3)
Enter the person who closed this non-billable entry.
"^DD",9002313.57,9002313.57,304,21,0)
^^2^2^3150515^
"^DD",9002313.57,9002313.57,304,21,1,0)
This is the person who closed this non-billable entry.
"^DD",9002313.57,9002313.57,304,21,2,0)
It is automatically populated when this close action happens.
"^DD",9002313.57,9002313.57,304,"DT")
3150515
"^DD",9002313.57,9002313.57,305,0)
NON-BILLABLE CLOSED COMMENT^F^^3;5^K:$L(X)>40!($L(X)<1) X
"^DD",9002313.57,9002313.57,305,3)
Answer must be 1-40 characters in length.
"^DD",9002313.57,9002313.57,305,21,0)
^^2^2^3150515^
"^DD",9002313.57,9002313.57,305,21,1,0)
This is a free text comment explaining why this non-billable entry
"^DD",9002313.57,9002313.57,305,21,2,0)
is being closed.
"^DD",9002313.57,9002313.57,305,"DT")
3150515
"^DD",9002313.57,9002313.57,306,0)
NON-BILLABLE DATE RE-OPENED^D^^3;6^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",9002313.57,9002313.57,306,3)
Enter the date and time when the non-billable entry was re-opened.
"^DD",9002313.57,9002313.57,306,21,0)
^^2^2^3150515^
"^DD",9002313.57,9002313.57,306,21,1,0)
This is the date and time when the user re-opened the non-billable
"^DD",9002313.57,9002313.57,306,21,2,0)
entry.
"^DD",9002313.57,9002313.57,306,"DT")
3150515
"^DD",9002313.57,9002313.57,307,0)
NON-BILLABLE RE-OPENED BY^P200'^VA(200,^3;7^Q
"^DD",9002313.57,9002313.57,307,3)
Enter the user who re-opened this non-billable entry.
"^DD",9002313.57,9002313.57,307,21,0)
^^2^2^3150515^
"^DD",9002313.57,9002313.57,307,21,1,0)
This is the user who re-opened this non-billable entry.
"^DD",9002313.57,9002313.57,307,21,2,0)
It is set automatically by the system when this action is performed.
"^DD",9002313.57,9002313.57,307,"DT")
3150515
"^DD",9002313.57,9002313.57,308,0)
NON-BILLABLE RE-OPENED COMMENT^F^^3;8^K:$L(X)>40!($L(X)<1) X
"^DD",9002313.57,9002313.57,308,3)
Answer must be 1-40 characters in length.
"^DD",9002313.57,9002313.57,308,21,0)
^^2^2^3150515^
"^DD",9002313.57,9002313.57,308,21,1,0)
This field holds the free-text comments entered by the user for
"^DD",9002313.57,9002313.57,308,21,2,0)
the reason that this non-billable entry was re-opened.
"^DD",9002313.57,9002313.57,308,"DT")
3150515
"^DD",9002313.57,9002313.57111,.04,0)
PHARMACY^S^1:YES;0:NO;^0;4^Q
"^DD",9002313.57,9002313.57111,.04,3)
Enter '1' or 'Yes' if this is a pharmacy comment.
"^DD",9002313.57,9002313.57111,.04,21,0)
^^1^1^3150518^
"^DD",9002313.57,9002313.57111,.04,21,1,0)
This field is used to determine whether or not this is a pharmacy comment.
"^DD",9002313.57,9002313.57111,.04,"DT")
3150518
"^DD",9002313.59,9002313.59,19,0)
TRANSACTION TYPE^S^C:CLAIM;E:ELIGIBILITY;U:UNCLAIM;N:NON-BILLABLE;^0;15^Q
"^DD",9002313.59,9002313.59,19,3)
Answer with the type of transaction that will be processed for this NCPDP request.
"^DD",9002313.59,9002313.59,19,21,0)
^^5^5^3150514^
"^DD",9002313.59,9002313.59,19,21,1,0)
This is the type of transaction that is being processed:
"^DD",9002313.59,9002313.59,19,21,2,0)
   CLAIM - An NCPDP billing request. 
"^DD",9002313.59,9002313.59,19,21,3,0)
   UNCLAIM - An NCPDP reversal request.
"^DD",9002313.59,9002313.59,19,21,4,0)
   ELIGIBILITY - An eligibility verification request.
"^DD",9002313.59,9002313.59,19,21,5,0)
   NON-BILLABLE - A TRICARE/CHAMPVA non-billable prescription.
"^DD",9002313.59,9002313.59,19,23,0)
^^1^1^3150514^
"^DD",9002313.59,9002313.59,19,23,1,0)
NON-BILLABLE has been added with patch BPS*1*20.
"^DD",9002313.59,9002313.59,19,"DT")
3150514
"^DD",9002313.59,9002313.59,301,0)
NON-BILLABLE REASON^F^^3;1^K:$L(X)>60!($L(X)<1) X
"^DD",9002313.59,9002313.59,301,3)
Answer must be 1-60 characters in length.
"^DD",9002313.59,9002313.59,301,21,0)
^^3^3^3150514^
"^DD",9002313.59,9002313.59,301,21,1,0)
This is the reason why this prescription is Non-Billable.  It is the
"^DD",9002313.59,9002313.59,301,21,2,0)
free text value as returned by the IB Billing Determination process.
"^DD",9002313.59,9002313.59,301,21,3,0)
This is only for TRICARE or CHAMPVA prescriptions.
"^DD",9002313.59,9002313.59,301,23,0)
^^3^3^3150514^
"^DD",9002313.59,9002313.59,301,23,1,0)
This value comes from piece [2] of the return value of
"^DD",9002313.59,9002313.59,301,23,2,0)
$$RX^IBNCPDP when the prescription is reported as non-billable.
"^DD",9002313.59,9002313.59,301,23,3,0)
This is only for TRICARE or CHAMPVA prescriptions.
"^DD",9002313.59,9002313.59,301,"DT")
3150819
"^DD",9002313.59,9002313.59,302,0)
NON-BILLABLE CLOSED^S^0:NO;1:YES;^3;2^Q
"^DD",9002313.59,9002313.59,302,3)
Enter Yes if the Non-Billable entry is Closed.
"^DD",9002313.59,9002313.59,302,21,0)
^^4^4^3150514^
"^DD",9002313.59,9002313.59,302,21,1,0)
Enter Yes if this Non-Billable entry has been Closed.
"^DD",9002313.59,9002313.59,302,21,2,0)
Enter No if this Non-Billable entry is still Open.
"^DD",9002313.59,9002313.59,302,21,3,0)
When Non-Billable entries are initially created in the BPS
"^DD",9002313.59,9002313.59,302,21,4,0)
Transaction file, they are automatically defaulted to Open.
"^DD",9002313.59,9002313.59,302,"DT")
3150514
"^DD",9002313.59,9002313.59,303,0)
NON-BILLABLE DATE CLOSED^D^^3;3^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",9002313.59,9002313.59,303,3)
Enter the date and time when this Non-Billable entry was closed.
"^DD",9002313.59,9002313.59,303,21,0)
^^3^3^3150514^
"^DD",9002313.59,9002313.59,303,21,1,0)
This field contains the date and time when this Non-Billable
"^DD",9002313.59,9002313.59,303,21,2,0)
entry was closed.  It is set by the system when a user performs
"^DD",9002313.59,9002313.59,303,21,3,0)
this action on the ECME User Screen.
"^DD",9002313.59,9002313.59,303,"DT")
3150514
"^DD",9002313.59,9002313.59,304,0)
NON-BILLABLE CLOSED BY^P200'^VA(200,^3;4^Q
"^DD",9002313.59,9002313.59,304,3)
Enter the person who closed this non-billable entry.
"^DD",9002313.59,9002313.59,304,21,0)
^^2^2^3150515^
"^DD",9002313.59,9002313.59,304,21,1,0)
This is the person who closed this non-billable entry.
"^DD",9002313.59,9002313.59,304,21,2,0)
It is automatically populated when this close action happens.
"^DD",9002313.59,9002313.59,304,"DT")
3150515
"^DD",9002313.59,9002313.59,305,0)
NON-BILLABLE CLOSED COMMENT^F^^3;5^K:$L(X)>40!($L(X)<1) X
"^DD",9002313.59,9002313.59,305,3)
Answer must be 1-40 characters in length.
"^DD",9002313.59,9002313.59,305,21,0)
^^2^2^3150515^
"^DD",9002313.59,9002313.59,305,21,1,0)
This is a free text comment explaining why this non-billable entry
"^DD",9002313.59,9002313.59,305,21,2,0)
is being closed.
"^DD",9002313.59,9002313.59,305,"DT")
3150515
"^DD",9002313.59,9002313.59,306,0)
NON-BILLABLE DATE RE-OPENED^D^^3;6^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",9002313.59,9002313.59,306,3)
Enter the date and time when the non-billable entry was re-opened.
"^DD",9002313.59,9002313.59,306,21,0)
^^2^2^3150515^
"^DD",9002313.59,9002313.59,306,21,1,0)
This is the date and time when the user re-opened the non-billable
"^DD",9002313.59,9002313.59,306,21,2,0)
entry.
"^DD",9002313.59,9002313.59,306,"DT")
3150515
"^DD",9002313.59,9002313.59,307,0)
NON-BILLABLE RE-OPENED BY^P200'^VA(200,^3;7^Q
"^DD",9002313.59,9002313.59,307,3)
Enter the user who re-opened this non-billable entry.
"^DD",9002313.59,9002313.59,307,21,0)
^^2^2^3150515^
"^DD",9002313.59,9002313.59,307,21,1,0)
This is the user who re-opened this non-billable entry.
"^DD",9002313.59,9002313.59,307,21,2,0)
It is set automatically by the system when this action is performed.
"^DD",9002313.59,9002313.59,307,"DT")
3150515
"^DD",9002313.59,9002313.59,308,0)
NON-BILLABLE RE-OPENED COMMENT^F^^3;8^K:$L(X)>40!($L(X)<1) X
"^DD",9002313.59,9002313.59,308,3)
Answer must be 1-40 characters in length.
"^DD",9002313.59,9002313.59,308,21,0)
^^2^2^3150515^
"^DD",9002313.59,9002313.59,308,21,1,0)
This field holds the free-text comments entered by the user for
"^DD",9002313.59,9002313.59,308,21,2,0)
the reason that this non-billable entry was re-opened.
"^DD",9002313.59,9002313.59,308,"DT")
3150515
"^DD",9002313.59,9002313.59111,.04,0)
PHARMACY^S^1:YES;0:NO;^0;4^Q
"^DD",9002313.59,9002313.59111,.04,3)
Enter '1' or 'Yes' if this is a pharmacy comment.
"^DD",9002313.59,9002313.59111,.04,21,0)
^^1^1^3150508^
"^DD",9002313.59,9002313.59111,.04,21,1,0)
This field is used to determine whether or not this is a pharmacy comment.
"^DD",9002313.59,9002313.59111,.04,"DT")
3150508
"^DD",9002313.91,9002313.91,0)
FIELD^^1^13
"^DD",9002313.91,9002313.91,0,"DDA")
N
"^DD",9002313.91,9002313.91,0,"DT")
3130222
"^DD",9002313.91,9002313.91,0,"ID",.03)
W "   ",$P(^(0),U,3)
"^DD",9002313.91,9002313.91,0,"IX","B",9002313.91,.01)

"^DD",9002313.91,9002313.91,0,"IX","C",9002313.91,.03)

"^DD",9002313.91,9002313.91,0,"IX","D",9002313.91,.06)

"^DD",9002313.91,9002313.91,0,"NM","BPS NCPDP FIELD DEFS")

"^DD",9002313.91,9002313.91,0,"PT",9002313.311,.01)

"^DD",9002313.91,9002313.91,0,"PT",9002313.3121,.01)

"^DD",9002313.91,9002313.91,0,"PT",9002313.5111,.01)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9205,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9206,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9207,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9208,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9209,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.921,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9213,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9214,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9215,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9216,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9217,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9218,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9219,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.922,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9223,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9224,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9225,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9227,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9228,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9229,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.923,.02)

"^DD",9002313.91,9002313.91,0,"PT",102000102,.03)

"^DD",9002313.91,9002313.91,0,"VRPK")
BPS
"^DD",9002313.91,9002313.91,.01,0)
NCPDP FIELD NUMBER^RFX^^0;1^K:$L(X)>6!($L(X)<3) X
"^DD",9002313.91,9002313.91,.01,1,0)
^.1
"^DD",9002313.91,9002313.91,.01,1,1,0)
9002313.91^B
"^DD",9002313.91,9002313.91,.01,1,1,1)
S ^BPSF(9002313.91,"B",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,.01,1,1,2)
K ^BPSF(9002313.91,"B",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,.01,3)
Enter the NCPDP field number (either 0-997, 2 Decimal Digits or 3 Alphanumerics).
"^DD",9002313.91,9002313.91,.01,21,0)
^^1^1^3101014^
"^DD",9002313.91,9002313.91,.01,21,1,0)
This is the NCPDP field number as specified in the NCPDP data dictionary.
"^DD",9002313.91,9002313.91,.01,"DT")
3130109
"^DD",9002313.91,9002313.91,.03,0)
NAME^F^^0;3^K:$L(X)>30!($L(X)<3) X
"^DD",9002313.91,9002313.91,.03,1,0)
^.1
"^DD",9002313.91,9002313.91,.03,1,1,0)
9002313.91^C
"^DD",9002313.91,9002313.91,.03,1,1,1)
S ^BPSF(9002313.91,"C",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,.03,1,1,2)
K ^BPSF(9002313.91,"C",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,.03,1,1,"DT")
3001007
"^DD",9002313.91,9002313.91,.03,3)
Answer must be 3-30 characters in length.
"^DD",9002313.91,9002313.91,.03,21,0)
^^2^2^3071227^
"^DD",9002313.91,9002313.91,.03,21,1,0)
Descriptive name the tells what the field is within the pharmacy
"^DD",9002313.91,9002313.91,.03,21,2,0)
environment.
"^DD",9002313.91,9002313.91,.03,"DT")
3071227
"^DD",9002313.91,9002313.91,.04,0)
FORMAT^S^N:NUMERIC;A/N:ALPHA/NUMERIC;D:SIGNED NUMERIC;^0;4^Q
"^DD",9002313.91,9002313.91,.04,3)
Enter the field's format type.
"^DD",9002313.91,9002313.91,.04,21,0)
^^1^1^3071227^
"^DD",9002313.91,9002313.91,.04,21,1,0)
This is the format of the field used within the NCPDP standard.
"^DD",9002313.91,9002313.91,.04,"DT")
3071227
"^DD",9002313.91,9002313.91,.06,0)
ID^F^^5;1^K:$L(X)>2!($L(X)<2) X
"^DD",9002313.91,9002313.91,.06,1,0)
^.1
"^DD",9002313.91,9002313.91,.06,1,1,0)
9002313.91^D
"^DD",9002313.91,9002313.91,.06,1,1,1)
S ^BPSF(9002313.91,"D",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,.06,1,1,2)
K ^BPSF(9002313.91,"D",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,.06,1,1,"%D",0)
^^3^3^3020807^
"^DD",9002313.91,9002313.91,.06,1,1,"%D",1,0)
Cross reference of the 5.1 Field ID.  This cross reference will be used in
"^DD",9002313.91,9002313.91,.06,1,1,"%D",2,0)
the processing of the response as a means of translating the value to a
"^DD",9002313.91,9002313.91,.06,1,1,"%D",3,0)
field number.
"^DD",9002313.91,9002313.91,.06,1,1,"DT")
3020807
"^DD",9002313.91,9002313.91,.06,3)
Answer must be 2 characters in length.
"^DD",9002313.91,9002313.91,.06,21,0)
^^3^3^3071227^
"^DD",9002313.91,9002313.91,.06,21,1,0)
The same as the .02 field, but for specific use when creating 5.1
"^DD",9002313.91,9002313.91,.06,21,2,0)
claims.  The 5.1 fields were separated because 3.x and 5.1 claims were
"^DD",9002313.91,9002313.91,.06,21,3,0)
being submitted concurrently.  
"^DD",9002313.91,9002313.91,.06,"DT")
3071227
"^DD",9002313.91,9002313.91,.07,0)
LENGTH^NJ4,0^^5;2^K:+X'=X!(X>9999)!(X<1)!(X?.E1"."1.N) X
"^DD",9002313.91,9002313.91,.07,3)
Type a number between 1 and 9999, 0 Decimal Digits
"^DD",9002313.91,9002313.91,.07,21,0)
^^1^1^3040121^
"^DD",9002313.91,9002313.91,.07,21,1,0)
Length of the field from the 5.1 NCPDP standard.
"^DD",9002313.91,9002313.91,.07,"DT")
3071227
"^DD",9002313.91,9002313.91,.08,0)
D0 LENGTH^NJ3,0^^0;8^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",9002313.91,9002313.91,.08,3)
Enter the length of the NCPDP field per the NCPDP data dictionary (1-999).
"^DD",9002313.91,9002313.91,.08,21,0)
^^2^2^3101014^
"^DD",9002313.91,9002313.91,.08,21,1,0)
This is the NCPDP length as specified in the NCPDP Telecommunication
"^DD",9002313.91,9002313.91,.08,21,2,0)
Standard version D.0 data dictionary.
"^DD",9002313.91,9002313.91,.08,"DT")
3101014
"^DD",9002313.91,9002313.91,.09,0)
D0 FORMAT^S^N:NUMERIC;A/N:ALPHANUMERIC;D:SIGNED NUMERIC;^0;9^Q
"^DD",9002313.91,9002313.91,.09,3)
Enter the data type for the field based on the NCPDP data dictionary.
"^DD",9002313.91,9002313.91,.09,21,0)
^^2^2^3101014^
"^DD",9002313.91,9002313.91,.09,21,1,0)
This is the NCPDP data type as specified in the NCPDP Telecommunication
"^DD",9002313.91,9002313.91,.09,21,2,0)
Standard version D.0 data dictionary.
"^DD",9002313.91,9002313.91,.09,"DT")
3101014
"^DD",9002313.91,9002313.91,1,0)
VISTA FIELD NUMBER^NJ4,0^^5;3^K:+X'=X!(X>2999)!(X<1001)!(X?.E1"."1.N) X
"^DD",9002313.91,9002313.91,1,3)
Type a number between 1001 and 2999, 0 decimal digits.
"^DD",9002313.91,9002313.91,1,21,0)
^^5^5^3130424^
"^DD",9002313.91,9002313.91,1,21,1,0)
This is the VistA field number used in BPS CLAIMS file #9002313.02 and BPS
"^DD",9002313.91,9002313.91,1,21,2,0)
RESPONSES file #9002313.03. Only used for NCPDP numbers where the first 
"^DD",9002313.91,9002313.91,1,21,3,0)
piece of the NCPDP number is non-numeric.
"^DD",9002313.91,9002313.91,1,21,4,0)
 
"^DD",9002313.91,9002313.91,1,21,5,0)
For example, NCPDP field B04-BT - Next Available Fill Date.
"^DD",9002313.91,9002313.91,1,"DT")
3130424
"^DD",9002313.91,9002313.91,1.01,0)
STANDARD NCPDP FIELD NAME^F^^1;1^K:$L(X)>100!($L(X)<1) X
"^DD",9002313.91,9002313.91,1.01,3)
Enter the full NCPDP field name based on the NCPDP data dictionary (1-100 characters).
"^DD",9002313.91,9002313.91,1.01,21,0)
^^3^3^3101014^
"^DD",9002313.91,9002313.91,1.01,21,1,0)
This field is used for those NCPDP field names that were too long to fit 
"^DD",9002313.91,9002313.91,1.01,21,2,0)
in the NAME (#.03) field.  For those fields, this field will
"^DD",9002313.91,9002313.91,1.01,21,3,0)
have the full NCPDP field name.
"^DD",9002313.91,9002313.91,1.01,"DT")
3110706
"^DD",9002313.91,9002313.91,10,0)
GET CODE^9002313.9101^^10;0
"^DD",9002313.91,9002313.91,10,3)
Enter the M code to extract the data for this field.
"^DD",9002313.91,9002313.91,10,9)
@
"^DD",9002313.91,9002313.91,10,21,0)
^.001^2^2^3101001^^
"^DD",9002313.91,9002313.91,10,21,1,0)
M code that tells the BPS system where to find the 
"^DD",9002313.91,9002313.91,10,21,2,0)
particular piece of data for this field.
"^DD",9002313.91,9002313.91,10,"DT")
3071227
"^DD",9002313.91,9002313.91,20,0)
D0 FORMAT CODE^9002313.9102^^20;0
"^DD",9002313.91,9002313.91,20,9)
@
"^DD",9002313.91,9002313.91,20,21,0)
^^4^4^3101014^
"^DD",9002313.91,9002313.91,20,21,1,0)
This field holds the M code used to format the data according to the
"^DD",9002313.91,9002313.91,20,21,2,0)
specifications of the NCPDP Telecommunication Standard version D.0 data
"^DD",9002313.91,9002313.91,20,21,3,0)
dictionary.  For instance, alphanumeric fields are right-padded with
"^DD",9002313.91,9002313.91,20,21,4,0)
spaces up to the length of the specified by the NCPDP standard.
"^DD",9002313.91,9002313.91,20,"DT")
3101005
"^DD",9002313.91,9002313.91,30,0)
SET CODE^9002313.9103^^30;0
"^DD",9002313.91,9002313.91,30,3)
Enter the M code for the field's data storage.
"^DD",9002313.91,9002313.91,30,9)
@
"^DD",9002313.91,9002313.91,30,21,0)
^^1^1^3040326^
"^DD",9002313.91,9002313.91,30,21,1,0)
M code to store the data in the appropriate segment within the claim.
"^DD",9002313.91,9002313.91,30,"DT")
3071227
"^DD",9002313.91,9002313.91,40,0)
FORMAT CODE^9002313.9104^^25;0
"^DD",9002313.91,9002313.91,40,3)
Enter the M code to format the data in NCPDP format.
"^DD",9002313.91,9002313.91,40,9)
@
"^DD",9002313.91,9002313.91,40,21,0)
^^2^2^3071227^
"^DD",9002313.91,9002313.91,40,21,1,0)
M code to format the data before storing it in the claim.  5.1 was
"^DD",9002313.91,9002313.91,40,21,2,0)
separate because 3.2 and 5.1 claims were being submitted at the same time.
"^DD",9002313.91,9002313.91,40,"DT")
3071227
"^DD",9002313.91,9002313.9101,0)
GET CODE SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9101,0,"DT")
3071227
"^DD",9002313.91,9002313.9101,0,"NM","GET CODE")

"^DD",9002313.91,9002313.9101,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9101,.01,0)
GET CODE^WL^^0;1^Q
"^DD",9002313.91,9002313.9101,.01,3)
Enter the M code to extract the data for this field.
"^DD",9002313.91,9002313.9101,.01,9)
@
"^DD",9002313.91,9002313.9101,.01,"DT")
3071227
"^DD",9002313.91,9002313.9102,0)
D0 FORMAT CODE SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9102,0,"DT")
3100721
"^DD",9002313.91,9002313.9102,0,"NM","D0 FORMAT CODE")

"^DD",9002313.91,9002313.9102,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9102,.01,0)
D0 FORMAT CODE^WLx^^0;1^Q
"^DD",9002313.91,9002313.9102,.01,"DT")
3101014
"^DD",9002313.91,9002313.9103,0)
SET CODE SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9103,0,"DT")
2950420
"^DD",9002313.91,9002313.9103,0,"NM","SET CODE")

"^DD",9002313.91,9002313.9103,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9103,.01,0)
SET CODE^WL^^0;1^Q
"^DD",9002313.91,9002313.9103,.01,3)
Enter the M code for the field's data storage.
"^DD",9002313.91,9002313.9103,.01,9)
@
"^DD",9002313.91,9002313.9103,.01,"DT")
3071227
"^DD",9002313.91,9002313.9104,0)
FORMAT CODE SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9104,0,"DT")
3020724
"^DD",9002313.91,9002313.9104,0,"NM","FORMAT CODE")

"^DD",9002313.91,9002313.9104,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9104,.01,0)
FORMAT CODE^WL^^0;1^Q
"^DD",9002313.91,9002313.9104,.01,3)
Enter the M code to format the data in NCPDP format.
"^DD",9002313.91,9002313.9104,.01,9)
@
"^DD",9002313.91,9002313.9104,.01,"DT")
3071227
"^DD",9002313.93,9002313.93,0)
FIELD^^.02^2
"^DD",9002313.93,9002313.93,0,"DDA")
N
"^DD",9002313.93,9002313.93,0,"DT")
3030820
"^DD",9002313.93,9002313.93,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",9002313.93,9002313.93,0,"IX","B",9002313.93,.01)

"^DD",9002313.93,9002313.93,0,"NM","BPS NCPDP REJECT CODES")

"^DD",9002313.93,9002313.93,0,"PT",52.865,.01)

"^DD",9002313.93,9002313.93,0,"PT",52.8651,.01)

"^DD",9002313.93,9002313.93,0,"PT",9002313.321,.01)

"^DD",9002313.93,9002313.93,0,"VRPK")
BPS
"^DD",9002313.93,9002313.93,.01,0)
CODE^RF^^0;1^K:$L(X)>3!($L(X)<2) X
"^DD",9002313.93,9002313.93,.01,1,0)
^.1
"^DD",9002313.93,9002313.93,.01,1,1,0)
9002313.93^B
"^DD",9002313.93,9002313.93,.01,1,1,1)
S ^BPSF(9002313.93,"B",$E(X,1,30),DA)=""
"^DD",9002313.93,9002313.93,.01,1,1,2)
K ^BPSF(9002313.93,"B",$E(X,1,30),DA)
"^DD",9002313.93,9002313.93,.01,3)
Enter the Reject Code that is returned from the payer.
"^DD",9002313.93,9002313.93,.01,21,0)
^^2^2^3080529^
"^DD",9002313.93,9002313.93,.01,21,1,0)
Reject Code returned by the payer for the reason of the rejection.  This
"^DD",9002313.93,9002313.93,.01,21,2,0)
is based on the NCPDP standards.
"^DD",9002313.93,9002313.93,.01,"DT")
3080529
"^DD",9002313.93,9002313.93,.02,0)
EXPLANATION^F^^0;2^K:$L(X)>70!($L(X)<1) X
"^DD",9002313.93,9002313.93,.02,3)
Enter the description of the reject code.
"^DD",9002313.93,9002313.93,.02,21,0)
^^1^1^3080529^
"^DD",9002313.93,9002313.93,.02,21,1,0)
Textual explanation of the claim rejection.
"^DD",9002313.93,9002313.93,.02,"DT")
3080529
"^DIC",9002313.25,9002313.25,0)
BPS NCPDP CLARIFICATION CODES^9002313.25
"^DIC",9002313.25,9002313.25,0,"GL")
^BPS(9002313.25,
"^DIC",9002313.25,9002313.25,"%",0)
^1.005^^0
"^DIC",9002313.25,9002313.25,"%D",0)
^^6^6^3080521^
"^DIC",9002313.25,9002313.25,"%D",1,0)
This file is used to store the possible NCPDP CLARIFICATION CODES values,
"^DIC",9002313.25,9002313.25,"%D",2,0)
which are used for overriding DUR rejects.  No local changes should ever 
"^DIC",9002313.25,9002313.25,"%D",3,0)
be made to this file.  The data stored in this file are based on the 
"^DIC",9002313.25,9002313.25,"%D",4,0)
NCPDP standards and are nationally distributed.
"^DIC",9002313.25,9002313.25,"%D",5,0)
 
"^DIC",9002313.25,9002313.25,"%D",6,0)
Per VHA Directive 2004-038, this file definition should not be modified.
"^DIC",9002313.25,"B","BPS NCPDP CLARIFICATION CODES",9002313.25)

"^DIC",9002313.91,9002313.91,0)
BPS NCPDP FIELD DEFS^9002313.91
"^DIC",9002313.91,9002313.91,0,"GL")
^BPSF(9002313.91,
"^DIC",9002313.91,9002313.91,"%",0)
^1.005^^0
"^DIC",9002313.91,9002313.91,"%","B","ABSP",1)

"^DIC",9002313.91,9002313.91,"%D",0)
^1.001^4^4^3100925^^^^
"^DIC",9002313.91,9002313.91,"%D",1,0)
The NCPDP Data Dictionary Individual fields which combine into formatted 
"^DIC",9002313.91,9002313.91,"%D",2,0)
packets.
"^DIC",9002313.91,9002313.91,"%D",3,0)
 
"^DIC",9002313.91,9002313.91,"%D",4,0)
Per VHA Directive 2004-038, this file definition should not be modified.
"^DIC",9002313.91,"B","BPS NCPDP FIELD DEFS",9002313.91)

"^DIC",9002313.93,9002313.93,0)
BPS NCPDP REJECT CODES^9002313.93
"^DIC",9002313.93,9002313.93,0,"GL")
^BPSF(9002313.93,
"^DIC",9002313.93,9002313.93,"%",0)
^1.005^^0
"^DIC",9002313.93,9002313.93,"%","B","ABSP",1)

"^DIC",9002313.93,9002313.93,"%D",0)
^1.001^8^8^3100817^^
"^DIC",9002313.93,9002313.93,"%D",1,0)
NCPDP field 511-FB REJECT CODE
"^DIC",9002313.93,9002313.93,"%D",2,0)
 
"^DIC",9002313.93,9002313.93,"%D",3,0)
This file is used to store the possible NCPDP REJECT CODES, that can be 
"^DIC",9002313.93,9002313.93,"%D",4,0)
returned by the payer.  No local changes should ever be made to this
"^DIC",9002313.93,9002313.93,"%D",5,0)
file.  The data stored in this file are based on the NCPDP standards and
"^DIC",9002313.93,9002313.93,"%D",6,0)
are nationally distributed.
"^DIC",9002313.93,9002313.93,"%D",7,0)
 
"^DIC",9002313.93,9002313.93,"%D",8,0)
Per VHA Directive 2004-038, this file definition should not be modified.
"^DIC",9002313.93,"B","BPS NCPDP REJECT CODES",9002313.93)

**INSTALL NAME**
PSO*7.0*448
"BLD",9500,0)
PSO*7.0*448^OUTPATIENT PHARMACY^0^3160421^y
"BLD",9500,1,0)
^^1^1^3151228^
"BLD",9500,1,1,0)
MCCF ePharmacy Compliance Phase 3
"BLD",9500,4,0)
^9.64PA^52^1
"BLD",9500,4,52,0)
52
"BLD",9500,4,52,2,0)
^9.641^52.25^1
"BLD",9500,4,52,2,52.25,0)
REJECT INFO  (sub-file)
"BLD",9500,4,52,2,52.25,1,0)
^9.6411^10^1
"BLD",9500,4,52,2,52.25,1,10,0)
CLOSED DATE/TIME
"BLD",9500,4,52,222)
y^n^p^^^^n^^n
"BLD",9500,4,52,224)

"BLD",9500,4,"APDD",52,52.25)

"BLD",9500,4,"APDD",52,52.25,10)

"BLD",9500,4,"B",52,52)

"BLD",9500,6.3)
25
"BLD",9500,"ABPKG")
n
"BLD",9500,"INIT")
PSO7P448
"BLD",9500,"KRN",0)
^9.67PA^779.2^20
"BLD",9500,"KRN",.4,0)
.4
"BLD",9500,"KRN",.401,0)
.401
"BLD",9500,"KRN",.402,0)
.402
"BLD",9500,"KRN",.403,0)
.403
"BLD",9500,"KRN",.5,0)
.5
"BLD",9500,"KRN",.84,0)
.84
"BLD",9500,"KRN",3.6,0)
3.6
"BLD",9500,"KRN",3.8,0)
3.8
"BLD",9500,"KRN",9.2,0)
9.2
"BLD",9500,"KRN",9.8,0)
9.8
"BLD",9500,"KRN",9.8,"NM",0)
^9.68A^16^13
"BLD",9500,"KRN",9.8,"NM",1,0)
PSOREJP3^^0^B184519079
"BLD",9500,"KRN",9.8,"NM",2,0)
PSOREJP1^^0^B201229195
"BLD",9500,"KRN",9.8,"NM",3,0)
PSOREJP2^^0^B183401384
"BLD",9500,"KRN",9.8,"NM",4,0)
PSOREJU3^^0^B86770782
"BLD",9500,"KRN",9.8,"NM",5,0)
PSOREJP0^^0^B126948878
"BLD",9500,"KRN",9.8,"NM",8,0)
PSOBPSU1^^0^B113607101
"BLD",9500,"KRN",9.8,"NM",9,0)
PSOSULB1^^0^B46165452
"BLD",9500,"KRN",9.8,"NM",11,0)
PSOREJU4^^0^B82956615
"BLD",9500,"KRN",9.8,"NM",12,0)
PSOBPSU3^^0^B16909866
"BLD",9500,"KRN",9.8,"NM",13,0)
PSOPROD1^^0^B163837671
"BLD",9500,"KRN",9.8,"NM",14,0)
PSOBPSR1^^0^B41182836
"BLD",9500,"KRN",9.8,"NM",15,0)
PSOPROD2^^0^B141671167
"BLD",9500,"KRN",9.8,"NM",16,0)
PSOREJUT^^0^B110735693
"BLD",9500,"KRN",9.8,"NM","B","PSOBPSR1",14)

"BLD",9500,"KRN",9.8,"NM","B","PSOBPSU1",8)

"BLD",9500,"KRN",9.8,"NM","B","PSOBPSU3",12)

"BLD",9500,"KRN",9.8,"NM","B","PSOPROD1",13)

"BLD",9500,"KRN",9.8,"NM","B","PSOPROD2",15)

"BLD",9500,"KRN",9.8,"NM","B","PSOREJP0",5)

"BLD",9500,"KRN",9.8,"NM","B","PSOREJP1",2)

"BLD",9500,"KRN",9.8,"NM","B","PSOREJP2",3)

"BLD",9500,"KRN",9.8,"NM","B","PSOREJP3",1)

"BLD",9500,"KRN",9.8,"NM","B","PSOREJU3",4)

"BLD",9500,"KRN",9.8,"NM","B","PSOREJU4",11)

"BLD",9500,"KRN",9.8,"NM","B","PSOREJUT",16)

"BLD",9500,"KRN",9.8,"NM","B","PSOSULB1",9)

"BLD",9500,"KRN",19,0)
19
"BLD",9500,"KRN",19,"NM",0)
^9.68A^2^2
"BLD",9500,"KRN",19,"NM",1,0)
PSO EPHARMACY MENU^^2
"BLD",9500,"KRN",19,"NM",2,0)
PSO PRODUCTIVITY REVENUE RPT^^0
"BLD",9500,"KRN",19,"NM","B","PSO EPHARMACY MENU",1)

"BLD",9500,"KRN",19,"NM","B","PSO PRODUCTIVITY REVENUE RPT",2)

"BLD",9500,"KRN",19.1,0)
19.1
"BLD",9500,"KRN",101,0)
101
"BLD",9500,"KRN",101,"NM",0)
^9.68A^21^13
"BLD",9500,"KRN",101,"NM",1,0)
PSO REJECTS VIEW ECME RX^^0
"BLD",9500,"KRN",101,"NM",10,0)
PSO LM BACKDOOR PRTCL USRSCR VERIFY^^0
"BLD",9500,"KRN",101,"NM",11,0)
PSO LM BACKDOOR PRTCL USRSCR RESUBMIT^^0
"BLD",9500,"KRN",101,"NM",12,0)
PSO HIDDEN ACTIONS^^2
"BLD",9500,"KRN",101,"NM",13,0)
PSO REJECTS HIDDEN ACTIONS #1^^2
"BLD",9500,"KRN",101,"NM",14,0)
PSO LM BACKDOOR PRTCL USRSCR REVERSE^^0
"BLD",9500,"KRN",101,"NM",15,0)
PSO BPS PAT INFO MENU^^0
"BLD",9500,"KRN",101,"NM",16,0)
PSO BPS MED PROF MENU^^0
"BLD",9500,"KRN",101,"NM",17,0)
PSO LM EXIT2^^4^
"BLD",9500,"KRN",101,"NM",18,0)
PSO PMP CHANGE VIEW^^4^
"BLD",9500,"KRN",101,"NM",19,0)
PSO PMP STATUS GROUP^^4^
"BLD",9500,"KRN",101,"NM",20,0)
PSO PMP SIG DISPLAY^^4^
"BLD",9500,"KRN",101,"NM",21,0)
VALM QUIT^^4^
"BLD",9500,"KRN",101,"NM","B","PSO BPS MED PROF MENU",16)

"BLD",9500,"KRN",101,"NM","B","PSO BPS PAT INFO MENU",15)

"BLD",9500,"KRN",101,"NM","B","PSO HIDDEN ACTIONS",12)

"BLD",9500,"KRN",101,"NM","B","PSO LM BACKDOOR PRTCL USRSCR RESUBMIT",11)

"BLD",9500,"KRN",101,"NM","B","PSO LM BACKDOOR PRTCL USRSCR REVERSE",14)

"BLD",9500,"KRN",101,"NM","B","PSO LM BACKDOOR PRTCL USRSCR VERIFY",10)

"BLD",9500,"KRN",101,"NM","B","PSO LM EXIT2",17)

"BLD",9500,"KRN",101,"NM","B","PSO PMP CHANGE VIEW",18)

"BLD",9500,"KRN",101,"NM","B","PSO PMP SIG DISPLAY",20)

"BLD",9500,"KRN",101,"NM","B","PSO PMP STATUS GROUP",19)

"BLD",9500,"KRN",101,"NM","B","PSO REJECTS HIDDEN ACTIONS #1",13)

"BLD",9500,"KRN",101,"NM","B","PSO REJECTS VIEW ECME RX",1)

"BLD",9500,"KRN",101,"NM","B","VALM QUIT",21)

"BLD",9500,"KRN",409.61,0)
409.61
"BLD",9500,"KRN",409.61,"NM",0)
^9.68A^2^2
"BLD",9500,"KRN",409.61,"NM",1,0)
PSO BPS PATIENT INFORMATION^^0
"BLD",9500,"KRN",409.61,"NM",2,0)
PSO BPS PMP MAIN^^0
"BLD",9500,"KRN",409.61,"NM","B","PSO BPS PATIENT INFORMATION",1)

"BLD",9500,"KRN",409.61,"NM","B","PSO BPS PMP MAIN",2)

"BLD",9500,"KRN",771,0)
771
"BLD",9500,"KRN",779.2,0)
779.2
"BLD",9500,"KRN",870,0)
870
"BLD",9500,"KRN",8989.51,0)
8989.51
"BLD",9500,"KRN",8989.52,0)
8989.52
"BLD",9500,"KRN",8989.52,"NM",0)
^9.68A^^
"BLD",9500,"KRN",8994,0)
8994
"BLD",9500,"KRN","B",.4,.4)

"BLD",9500,"KRN","B",.401,.401)

"BLD",9500,"KRN","B",.402,.402)

"BLD",9500,"KRN","B",.403,.403)

"BLD",9500,"KRN","B",.5,.5)

"BLD",9500,"KRN","B",.84,.84)

"BLD",9500,"KRN","B",3.6,3.6)

"BLD",9500,"KRN","B",3.8,3.8)

"BLD",9500,"KRN","B",9.2,9.2)

"BLD",9500,"KRN","B",9.8,9.8)

"BLD",9500,"KRN","B",19,19)

"BLD",9500,"KRN","B",19.1,19.1)

"BLD",9500,"KRN","B",101,101)

"BLD",9500,"KRN","B",409.61,409.61)

"BLD",9500,"KRN","B",771,771)

"BLD",9500,"KRN","B",779.2,779.2)

"BLD",9500,"KRN","B",870,870)

"BLD",9500,"KRN","B",8989.51,8989.51)

"BLD",9500,"KRN","B",8989.52,8989.52)

"BLD",9500,"KRN","B",8994,8994)

"BLD",9500,"QUES",0)
^9.62^^
"BLD",9500,"REQB",0)
^9.611^1^1
"BLD",9500,"REQB",1,0)
PSO*7.0*427^2
"BLD",9500,"REQB","B","PSO*7.0*427",1)

"FIA",52)
PRESCRIPTION
"FIA",52,0)
^PSRX(
"FIA",52,0,0)
52I
"FIA",52,0,1)
y^n^p^^^^n^^n
"FIA",52,0,10)

"FIA",52,0,11)

"FIA",52,0,"RLRO")

"FIA",52,0,"VR")
7.0^PSO
"FIA",52,52)
1
"FIA",52,52.25)
1
"FIA",52,52.25,10)

"INIT")
PSO7P448
"IX",52,52,"CLSDAT",0)
52^CLSDAT^Cross-reference to sort REJECTs by the CLOSED DATE/TIME field.^R^^F^IR^W^52.25^^^^^LS
"IX",52,52,"CLSDAT",.1,0)
^^1^1^3160127^
"IX",52,52,"CLSDAT",.1,1,0)
Cross-reference to sort REJECTs by the CLOSED DATE/TIME field.
"IX",52,52,"CLSDAT",1)
S ^PSRX("CLSDAT",X,DA(1),DA)=""
"IX",52,52,"CLSDAT",2)
K ^PSRX("CLSDAT",X,DA(1),DA)
"IX",52,52,"CLSDAT",2.5)
K ^PSRX("CLSDAT")
"IX",52,52,"CLSDAT",11.1,0)
^.114IA^1^1
"IX",52,52,"CLSDAT",11.1,1,0)
1^F^52.25^10^^1^F
"KRN",19,12878,-1)
2^1
"KRN",19,12878,0)
PSO EPHARMACY MENU^ePharmacy Menu^^M^66481^^^^^^^206
"KRN",19,12878,10,0)
^19.01IP^11^11
"KRN",19,12878,10,11,0)
13883^PR^85
"KRN",19,12878,10,11,"^")
PSO PRODUCTIVITY REVENUE RPT
"KRN",19,12878,"U")
EPHARMACY MENU
"KRN",19,13883,-1)
0^2
"KRN",19,13883,0)
PSO PRODUCTIVITY REVENUE RPT^Pharmacy Productivity/Revenue Report^^R^^^^^^^^OUTPATIENT PHARMACY
"KRN",19,13883,25)
EN^PSOPROD1
"KRN",19,13883,"U")
PHARMACY PRODUCTIVITY/REVENUE 
"KRN",101,450,-1)
4^21
"KRN",101,450,0)
VALM QUIT
"KRN",101,3053,-1)
2^12
"KRN",101,3053,0)
PSO HIDDEN ACTIONS^Outpatient Pharmacy Hidden Actions^^M^66481^^^^^^^206
"KRN",101,3053,10,0)
^101.01PA^39^39
"KRN",101,3053,10,11,0)
450^QU^^
"KRN",101,3053,10,11,1)
^
"KRN",101,3053,10,11,"^")
VALM QUIT
"KRN",101,3053,10,37,0)
4706^VER^35.5^
"KRN",101,3053,10,37,"^")
PSO LM BACKDOOR PRTCL USRSCR VERIFY
"KRN",101,3053,10,38,0)
4707^RES^35.7^
"KRN",101,3053,10,38,"^")
PSO LM BACKDOOR PRTCL USRSCR RESUBMIT
"KRN",101,3053,10,39,0)
4711^REV^35.8^
"KRN",101,3053,10,39,"^")
PSO LM BACKDOOR PRTCL USRSCR REVERSE
"KRN",101,3344,-1)
4^17
"KRN",101,3344,0)
PSO LM EXIT2
"KRN",101,4165,-1)
4^19
"KRN",101,4165,0)
PSO PMP STATUS GROUP
"KRN",101,4166,-1)
4^20
"KRN",101,4166,0)
PSO PMP SIG DISPLAY
"KRN",101,4168,-1)
4^18
"KRN",101,4168,0)
PSO PMP CHANGE VIEW
"KRN",101,4264,-1)
2^13
"KRN",101,4264,0)
PSO REJECTS HIDDEN ACTIONS #1^PSO REJECTS HIDDEN ACTIONS #1^^M^66481^^^^^^^206
"KRN",101,4264,10,0)
^101.01PA^20^20
"KRN",101,4264,10,12,0)
450^QU^16^
"KRN",101,4264,10,12,"^")
VALM QUIT
"KRN",101,4264,10,19,0)
4704^VER^1.6^
"KRN",101,4264,10,19,"^")
PSO REJECTS VIEW ECME RX
"KRN",101,4704,-1)
0^1
"KRN",101,4704,0)
PSO REJECTS VIEW ECME RX^View ePharmacy Rx^^A^^^^^^^^OUTPATIENT PHARMACY
"KRN",101,4704,1,0)
^101.06^2^2^3150826^^
"KRN",101,4704,1,1,0)
Action protocol from the Third Party Payer Rejects - Worklist screen 
"KRN",101,4704,1,2,0)
hidden menu to jump into the View ePharmacy Rx report.
"KRN",101,4704,4)
^^^VER
"KRN",101,4704,20)
D VER^PSOREJP0
"KRN",101,4704,99)
63790,63612
"KRN",101,4706,-1)
0^10
"KRN",101,4706,0)
PSO LM BACKDOOR PRTCL USRSCR VERIFY^View ePharmacy Rx^^A^^^^^^^^OUTPATIENT PHARMACY
"KRN",101,4706,1,0)
^101.06^2^2^3151105^^^^
"KRN",101,4706,1,1,0)
Action protocol from the PSO LM ORDER SELECTION screen hidden menu to 
"KRN",101,4706,1,2,0)
jump into the View ePharmacy Rx report.
"KRN",101,4706,4)
^^^VER
"KRN",101,4706,20)
D VER^PSOBPSU3(RXN,DFN)
"KRN",101,4706,99)
63790,63596
"KRN",101,4707,-1)
0^11
"KRN",101,4707,0)
PSO LM BACKDOOR PRTCL USRSCR RESUBMIT^Resubmit Claim^^A^^^^^^^^OUTPATIENT PHARMACY
"KRN",101,4707,1,0)
^101.06^2^2^3150911^^^
"KRN",101,4707,1,1,0)
Action protocol from the PSO LM ORDER SELECTION screen hidden menu to 
"KRN",101,4707,1,2,0)
resubmit a claim.
"KRN",101,4707,4)
^^^RES
"KRN",101,4707,20)
D RES^PSOBPSU3(RXN,DFN)
"KRN",101,4707,99)
63791,60059
"KRN",101,4711,-1)
0^14
"KRN",101,4711,0)
PSO LM BACKDOOR PRTCL USRSCR REVERSE^Reverse Claim^^A^^^^^^^^OUTPATIENT PHARMACY
"KRN",101,4711,1,0)
^101.06^2^2^3150911^^
"KRN",101,4711,1,1,0)
Action protocol from the PSO LM ORDER SELECTION screen hidden menu to 
"KRN",101,4711,1,2,0)
reverse a claim.
"KRN",101,4711,4)
^^^REV
"KRN",101,4711,20)
D REV^PSOBPSU3(RXN,DFN)
"KRN",101,4711,99)
63797,60759
"KRN",101,4736,-1)
0^15
"KRN",101,4736,0)
PSO BPS PAT INFO MENU^Patient Information Menu^^M^^^^^^^^OUTPATIENT PHARMACY
"KRN",101,4736,1,0)
^^5^5^3151228^
"KRN",101,4736,1,1,0)
This menu protocol was created to mimic the main Patient Information 
"KRN",101,4736,1,2,0)
screen, but the actions available on this menu protocol are simplified 
"KRN",101,4736,1,3,0)
because this screen is being used by the OPECC from the ECME User screen 
"KRN",101,4736,1,4,0)
and they should not have access to some of the functions on the normal 
"KRN",101,4736,1,5,0)
Patient Information screen.
"KRN",101,4736,4)
40^4
"KRN",101,4736,10,0)
^101.01PA^1^1
"KRN",101,4736,10,1,0)
3344^EX^^
"KRN",101,4736,10,1,"^")
PSO LM EXIT2
"KRN",101,4736,26)
D SHOW^VALM
"KRN",101,4736,28)
Select Action: 
"KRN",101,4736,99)
63914,50411
"KRN",101,4737,-1)
0^16
"KRN",101,4737,0)
PSO BPS MED PROF MENU^Patient Medication Profile menu^^M^^^^^^^^OUTPATIENT PHARMACY
"KRN",101,4737,1,0)
^^5^5^3151228^
"KRN",101,4737,1,1,0)
This is the menu protocol for the Patient Medication Profile screen when 
"KRN",101,4737,1,2,0)
coming from the ECME User Screen.  This is from the OPECC Reject 
"KRN",101,4737,1,3,0)
Information screen on the ECME user screen.  The OPECC is not allowed to 
"KRN",101,4737,1,4,0)
have access to the normal Patient Medication Profile screen actions so 
"KRN",101,4737,1,5,0)
this simplified menu protocol was created.
"KRN",101,4737,4)
40^4
"KRN",101,4737,10,0)
^101.01PA^4^4
"KRN",101,4737,10,1,0)
4168^CV^11^
"KRN",101,4737,10,1,"^")
PSO PMP CHANGE VIEW
"KRN",101,4737,10,2,0)
4165^GS^12^
"KRN",101,4737,10,2,"^")
PSO PMP STATUS GROUP
"KRN",101,4737,10,3,0)
4166^SIG^21^
"KRN",101,4737,10,3,"^")
PSO PMP SIG DISPLAY
"KRN",101,4737,10,4,0)
450^EX^22^^^Exit
"KRN",101,4737,10,4,"^")
VALM QUIT
"KRN",101,4737,26)
D SHOW^VALM,HDR^PSOPMP0
"KRN",101,4737,28)
Select Action: 
"KRN",101,4737,99)
63914,57256
"KRN",409.61,947,-1)
0^1
"KRN",409.61,947,0)
PSO BPS PATIENT INFORMATION^1^^80^7^21^1^1^^PSO BPS PAT INFO MENU^Patient Information^1^^1
"KRN",409.61,947,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,947,"ARRAY")
 ^TMP("PSOPI",$J)
"KRN",409.61,947,"FNL")
D EXIT^PSOLMPI
"KRN",409.61,947,"HDR")
D HDR^PSOLMPI
"KRN",409.61,947,"HLP")
D HELP^PSOLMPI
"KRN",409.61,947,"INIT")
D INIT^PSOLMPI
"KRN",409.61,948,-1)
0^2
"KRN",409.61,948,0)
PSO BPS PMP MAIN^1^^80^8^20^1^1^^PSO BPS MED PROF MENU^Patient Medication Profile^1^^1
"KRN",409.61,948,1)
^PSO PMP HIDDEN ACTIONS MENU
"KRN",409.61,948,"ARRAY")
 ^TMP("PSOPMP0",$J)
"KRN",409.61,948,"FNL")
D EXIT^PSOPMP0
"KRN",409.61,948,"HDR")
D HDR^PSOPMP0
"KRN",409.61,948,"HLP")
D HELP^PSOPMP0
"KRN",409.61,948,"INIT")
D INIT^PSOPMP0 K VALMSG
"MBREQ")
1
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",206,-1)
1^1
"PKG",206,0)
OUTPATIENT PHARMACY^PSO^OUTPATIENT LABELS, PROFILE, INVENTORY, PRESCRIPTIONS
"PKG",206,20,0)
^9.402P^^
"PKG",206,22,0)
^9.49I^1^1
"PKG",206,22,1,0)
7.0^3021122^3021202^66481
"PKG",206,22,1,"PAH",1,0)
448^3160421
"PKG",206,22,1,"PAH",1,1,0)
^^1^1^3160421
"PKG",206,22,1,"PAH",1,1,1,0)
MCCF ePharmacy Compliance Phase 3
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
14
"RTN","PSO7P448")
0^^B12946571
"RTN","PSO7P448",1,0)
PSO7P448 ;ALB/MRD - Post Install for PSO patch 448 ;5/28/2015
"RTN","PSO7P448",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**448**;DEC 1997;Build 25
"RTN","PSO7P448",3,0)
 ;
"RTN","PSO7P448",4,0)
 D CLSDAT1(1,2)
"RTN","PSO7P448",5,0)
 D MENU(2,2)
"RTN","PSO7P448",6,0)
 ;
"RTN","PSO7P448",7,0)
 Q
"RTN","PSO7P448",8,0)
 ;
"RTN","PSO7P448",9,0)
CLSDAT1(PSOSTEP,PSOTOTAL) ; Job the process to build the new CLSDAT cross-reference.
"RTN","PSO7P448",10,0)
 ;
"RTN","PSO7P448",11,0)
 N ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSK
"RTN","PSO7P448",12,0)
 ;
"RTN","PSO7P448",13,0)
 D BMES^XPDUTL(" Step "_PSOSTEP_" of "_PSOTOTAL)
"RTN","PSO7P448",14,0)
 D MES^XPDUTL(" -----------")
"RTN","PSO7P448",15,0)
 D MES^XPDUTL("   Queuing background job to build index of all closed/resolved rejects by")
"RTN","PSO7P448",16,0)
 D MES^XPDUTL("   date closed/resolved.  A Mailman message will be sent when it finishes.")
"RTN","PSO7P448",17,0)
 ;
"RTN","PSO7P448",18,0)
 ; Setup required variables
"RTN","PSO7P448",19,0)
 S ZTRTN="CLSDAT2^PSO7P448",ZTIO="",ZTDTH=$H
"RTN","PSO7P448",20,0)
 S ZTDESC="Background job to build CLSDAT index for PSO*7*448"
"RTN","PSO7P448",21,0)
 ;
"RTN","PSO7P448",22,0)
 ; Task the job
"RTN","PSO7P448",23,0)
 D ^%ZTLOAD
"RTN","PSO7P448",24,0)
 ;
"RTN","PSO7P448",25,0)
 ; Check if task was created
"RTN","PSO7P448",26,0)
 I $D(ZTSK) D MES^XPDUTL("   Task #"_ZTSK_" queued.")
"RTN","PSO7P448",27,0)
 I '$D(ZTSK) D MES^XPDUTL("   Task not queued.  Please create a support ticket.")
"RTN","PSO7P448",28,0)
 Q
"RTN","PSO7P448",29,0)
 ;
"RTN","PSO7P448",30,0)
CLSDAT2 ; Populate the new CLSDAT cross-reference on
"RTN","PSO7P448",31,0)
 ; file #52, Prescription.
"RTN","PSO7P448",32,0)
 ;
"RTN","PSO7P448",33,0)
 N PSOCLSDAT,PSOCNTR,PSOREJ,PSORX
"RTN","PSO7P448",34,0)
 ;
"RTN","PSO7P448",35,0)
 ; Kill off the entire cross-reference.
"RTN","PSO7P448",36,0)
 ;
"RTN","PSO7P448",37,0)
 K ^PSRX("CLSDAT")
"RTN","PSO7P448",38,0)
 ;
"RTN","PSO7P448",39,0)
 ; Loop through all closed/resolved rejects
"RTN","PSO7P448",40,0)
 ;
"RTN","PSO7P448",41,0)
 ; ^PSRX("REJSTS",1,Rx IEN, reject IEN)
"RTN","PSO7P448",42,0)
 ;
"RTN","PSO7P448",43,0)
 S PSORX=0,PSOCNTR=0
"RTN","PSO7P448",44,0)
 F  S PSORX=$O(^PSRX("REJSTS",1,PSORX)) Q:'PSORX  D
"RTN","PSO7P448",45,0)
 . S PSOREJ=0
"RTN","PSO7P448",46,0)
 . F  S PSOREJ=$O(^PSRX("REJSTS",1,PSORX,PSOREJ)) Q:'PSOREJ  D
"RTN","PSO7P448",47,0)
 . . ;
"RTN","PSO7P448",48,0)
 . . S PSOCLSDAT=$P($G(^PSRX(PSORX,"REJ",PSOREJ,0)),"^",6)
"RTN","PSO7P448",49,0)
 . . I PSOCLSDAT'="" S ^PSRX("CLSDAT",PSOCLSDAT,PSORX,PSOREJ)="",PSOCNTR=PSOCNTR+1
"RTN","PSO7P448",50,0)
 . . ;
"RTN","PSO7P448",51,0)
 . . Q
"RTN","PSO7P448",52,0)
 . Q
"RTN","PSO7P448",53,0)
 ;
"RTN","PSO7P448",54,0)
 ; Send mail message when complete.
"RTN","PSO7P448",55,0)
 ;
"RTN","PSO7P448",56,0)
 D MAIL(PSOCNTR)
"RTN","PSO7P448",57,0)
 ;
"RTN","PSO7P448",58,0)
 Q
"RTN","PSO7P448",59,0)
 ;
"RTN","PSO7P448",60,0)
MAIL(PSOCNTR) ;
"RTN","PSO7P448",61,0)
 ;
"RTN","PSO7P448",62,0)
 N CNT,MSG,XMY,XMDUZ,DIFROM,XMSUB,XMTEXT
"RTN","PSO7P448",63,0)
 ;
"RTN","PSO7P448",64,0)
 S XMY(DUZ)=""
"RTN","PSO7P448",65,0)
 S XMSUB="PSO*7.0*448 Post install is complete",XMDUZ="Patch PSO*7.0*448"
"RTN","PSO7P448",66,0)
 S XMTEXT="MSG("
"RTN","PSO7P448",67,0)
 ;
"RTN","PSO7P448",68,0)
 S CNT=1,MSG(CNT)=""
"RTN","PSO7P448",69,0)
 S CNT=CNT+1,MSG(CNT)="Patch PSO*7.0*448 post install routine has completed."
"RTN","PSO7P448",70,0)
 S CNT=CNT+1,MSG(CNT)=""
"RTN","PSO7P448",71,0)
 S CNT=CNT+1,MSG(CNT)="Added "_PSOCNTR_" entries to the new CLSDAT index in the PRESCRIPTION file."
"RTN","PSO7P448",72,0)
 S CNT=CNT+1,MSG(CNT)=""
"RTN","PSO7P448",73,0)
 S CNT=CNT+1,MSG(CNT)="For more information about this post install, review the patch description."
"RTN","PSO7P448",74,0)
 ;
"RTN","PSO7P448",75,0)
 D ^XMD
"RTN","PSO7P448",76,0)
 ;
"RTN","PSO7P448",77,0)
 Q
"RTN","PSO7P448",78,0)
 ;
"RTN","PSO7P448",79,0)
MENU(PSOSTEP,PSOTOTAL)     ; Remove the cached hidden menu pointers
"RTN","PSO7P448",80,0)
 N PSORDHM,PSORHA1,XQORM
"RTN","PSO7P448",81,0)
 D BMES^XPDUTL(" Step "_PSOSTEP_" of "_PSOTOTAL)
"RTN","PSO7P448",82,0)
 D MES^XPDUTL(" -----------")
"RTN","PSO7P448",83,0)
 D MES^XPDUTL("   Removing cached hidden menus")
"RTN","PSO7P448",84,0)
 S PSORDHM=$O(^ORD(101,"B","PSO REJECTS HIDDEN ACTIONS #1",0))
"RTN","PSO7P448",85,0)
 S XQORM=PSORDHM_";ORD(101,"
"RTN","PSO7P448",86,0)
 D MES^XPDUTL("    - Removing cached hidden menu for "_$P(^ORD(101,PSORDHM,0),U))
"RTN","PSO7P448",87,0)
 K ^XUTL("XQORM",XQORM)
"RTN","PSO7P448",88,0)
 ;
"RTN","PSO7P448",89,0)
 S PSORDHM=$O(^ORD(101,"B","PSO HIDDEN ACTIONS",0))
"RTN","PSO7P448",90,0)
 S XQORM=PSORDHM_";ORD(101,"
"RTN","PSO7P448",91,0)
 D MES^XPDUTL("    - Removing cached hidden menu for "_$P(^ORD(101,PSORDHM,0),U))
"RTN","PSO7P448",92,0)
 K ^XUTL("XQORM",XQORM)
"RTN","PSO7P448",93,0)
 Q
"RTN","PSO7P448",94,0)
 ;
"RTN","PSOBPSR1")
0^14^B41182836
"RTN","PSOBPSR1",1,0)
PSOBPSR1 ;BHM/LE - continued Ignored Claims Report ;03/01/07
"RTN","PSOBPSR1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**260,448**;13 Feb 97;Build 25
"RTN","PSOBPSR1",3,0)
 ;External reference to File ^PS(55 supported by DBIA 2228
"RTN","PSOBPSR1",4,0)
 ;External reference to $$GET1^DIQ is supported by DBIA 2056
"RTN","PSOBPSR1",5,0)
 ;External reference to ^VADPT is supported by DBIA 10061
"RTN","PSOBPSR1",6,0)
 ;External reference to ^XLFDT is supported by DBIA 10103
"RTN","PSOBPSR1",7,0)
 ;External reference to ^%ZISC is supported by DBIA 10089
"RTN","PSOBPSR1",8,0)
 ;Reference to $$GETBAMT^BPSBUTL supported by DBIA #4719.
"RTN","PSOBPSR1",9,0)
 ;
"RTN","PSOBPSR1",10,0)
EN N CLOSE,CDATE,DFN,DRG,RXIEN,PAG,PCNT,PRTD,PNAM,I,II,J,Y,X,XX,S1,S2,S3,S4,S5,FCNT,CBYI
"RTN","PSOBPSR1",11,0)
 N SP1,SP2,SEQ2,CINFO,RDATE,RSEQ,PSORX,RXINFO,DNAMI,CDIV,CDIVN,OCDIV,RXNUMB,PSORXN,RXE
"RTN","PSOBPSR1",12,0)
 U IO K ^TMP("PSOBPSRP",$J),^TMP("PSOBPSRC",$J)
"RTN","PSOBPSR1",13,0)
 S (SP1,SP2)="",$P(SP1,"=",81)="",$P(SP2,"-",81)=""
"RTN","PSOBPSR1",14,0)
 ;
"RTN","PSOBPSR1",15,0)
 ; - Loop through reject dates xref
"RTN","PSOBPSR1",16,0)
 S (RXIEN,PCNT,FCNT,PRTD)=0 K DIRUT
"RTN","PSOBPSR1",17,0)
 S RDATE=PSOSD
"RTN","PSOBPSR1",18,0)
 ;
"RTN","PSOBPSR1",19,0)
DATE ;
"RTN","PSOBPSR1",20,0)
 S RDATE=$O(^PSRX("REJDAT",RDATE)) G NEXT:RDATE=""!(RDATE>PSOED)
"RTN","PSOBPSR1",21,0)
RX ;
"RTN","PSOBPSR1",22,0)
 S RXIEN=$O(^PSRX("REJDAT",RDATE,RXIEN)) G DATE:RXIEN=""
"RTN","PSOBPSR1",23,0)
 S (DFN,DRG,PNAM,DNAM,DNAMI,RXE)=""
"RTN","PSOBPSR1",24,0)
 K RXINFO D GETS^DIQ(52,RXIEN_",",".01;2;6","IE","RXINFO")
"RTN","PSOBPSR1",25,0)
 S PNAM=$G(RXINFO(52,RXIEN_",",2,"E")),DNAM=$G(RXINFO(52,RXIEN_",",6,"E"))
"RTN","PSOBPSR1",26,0)
 S DFN=$G(RXINFO(52,RXIEN_",",2,"I")),DNAMI=$G(RXINFO(52,RXIEN_",",6,"I"))
"RTN","PSOBPSR1",27,0)
 S RXE=$G(RXINFO(52,RXIEN_",",.01,"E"))_" "
"RTN","PSOBPSR1",28,0)
 I '$G(PSOAPT),'$D(PSOPT(DFN)) G RX   ;user selected specific patients
"RTN","PSOBPSR1",29,0)
 I '$G(PSODRUG),'$D(PSODRG(DNAMI)) G RX
"RTN","PSOBPSR1",30,0)
 ;
"RTN","PSOBPSR1",31,0)
 ;look for ignored rejects 
"RTN","PSOBPSR1",32,0)
 S SEQ2=0 F  S SEQ2=$O(^PSRX(RXIEN,"REJ",SEQ2)) Q:'SEQ2&(SEQ2'?1N.N)  D
"RTN","PSOBPSR1",33,0)
 . S (CDATE,CBY,CBYI,CFILL,CDIV)=""
"RTN","PSOBPSR1",34,0)
 . K CLOSE D GETS^DIQ(52.25,SEQ2_","_RXIEN_",","5;10;11;12","IE","CLOSE")
"RTN","PSOBPSR1",35,0)
 . S CDATE=$G(CLOSE(52.25,SEQ2_","_RXIEN_",",10,"I"))
"RTN","PSOBPSR1",36,0)
 . S CFILL=$G(CLOSE(52.25,SEQ2_","_RXIEN_",",5,"I"))
"RTN","PSOBPSR1",37,0)
 . S CDIV=$$RXSITE^PSOBPSUT(RXIEN,CFILL)
"RTN","PSOBPSR1",38,0)
 . I '$G(PSOSIT)&'$D(PSODIV(CDIV)) Q
"RTN","PSOBPSR1",39,0)
 . I $G(CLOSE(52.25,SEQ2_","_RXIEN_",",12,"I"))=6,(CDATE'<PSOSD&(CDATE'>PSOED)) D
"RTN","PSOBPSR1",40,0)
 . . S CBY=$G(CLOSE(52.25,SEQ2_","_RXIEN_",",11,"E"))
"RTN","PSOBPSR1",41,0)
 . . S CBYI=$G(CLOSE(52.25,SEQ2_","_RXIEN_",",11,"I"))
"RTN","PSOBPSR1",42,0)
 . . I '$G(PSOUSER),'$D(PSOU(CBYI)) Q  ;user selected specific user for "ignored by" column in report
"RTN","PSOBPSR1",43,0)
 . . D SET
"RTN","PSOBPSR1",44,0)
 G RX
"RTN","PSOBPSR1",45,0)
 ;
"RTN","PSOBPSR1",46,0)
NEXT ; - If not Sorting (already printed), SKIP, otherwise, print the report
"RTN","PSOBPSR1",47,0)
 I '$D(^TMP("PSOBPSRP")) G NDTP
"RTN","PSOBPSR1",48,0)
 S (S1,S2,S3,DFN,RSEQ,PSORX,PSORXN,RXNUMB,CDIV,OCDIV,CDIVN)=""
"RTN","PSOBPSR1",49,0)
 F  S CDIV=$O(^TMP("PSOBPSRP",$J,CDIV)) Q:CDIV=""  D  Q:$D(DIRUT)
"RTN","PSOBPSR1",50,0)
 . F  S S1=$O(^TMP("PSOBPSRP",$J,CDIV,S1)) Q:S1=""  D  Q:$D(DIRUT)
"RTN","PSOBPSR1",51,0)
 . . F  S S2=$O(^TMP("PSOBPSRP",$J,CDIV,S1,S2)) Q:S2=""  D  Q:$D(DIRUT)
"RTN","PSOBPSR1",52,0)
 . . . F  S S3=$O(^TMP("PSOBPSRP",$J,CDIV,S1,S2,S3)) Q:S3=""  D  Q:$D(DIRUT)
"RTN","PSOBPSR1",53,0)
 . . . . F  S DFN=$O(^TMP("PSOBPSRP",$J,CDIV,S1,S2,S3,DFN)) Q:DFN=""  D  Q:$D(DIRUT)
"RTN","PSOBPSR1",54,0)
 . . . . . F  S PSORXN=$O(^TMP("PSOBPSRP",$J,CDIV,S1,S2,S3,DFN,PSORXN)) Q:PSORXN=""  D  Q:$D(DIRUT)
"RTN","PSOBPSR1",55,0)
 . . . . . . F  S RSEQ=$O(^TMP("PSOBPSRP",$J,CDIV,S1,S2,S3,DFN,PSORXN,RSEQ)) Q:RSEQ=""  D  Q:$D(DIRUT)
"RTN","PSOBPSR1",56,0)
 . . . . . . . I $Y>(IOSL-7)&($E(IOST)="C") D HDR I $D(DIRUT) Q
"RTN","PSOBPSR1",57,0)
 . . . . . . . I $Y>(IOSL-12)&($E(IOST)'="C") D HDR I $D(DIRUT) Q
"RTN","PSOBPSR1",58,0)
 . . . . . . . S (RXNUMB,PSORX)="",RXNUMB=$E(PSORXN,1,$L(PSORXN)-1),PSORX=$O(^PSRX("B",RXNUMB,PSORX))
"RTN","PSOBPSR1",59,0)
 . . . . . . . D PRINT(DFN,PSORX)
"RTN","PSOBPSR1",60,0)
 . . . I '$D(DIRUT),S2'=0,$O(^TMP("PSOBPSRP",$J,CDIV,S1,S2))'="" W SP2
"RTN","PSOBPSR1",61,0)
 . . I '$D(DIRUT),$O(^TMP("PSOBPSRP",$J,CDIV,S1))'="" W !,SP1
"RTN","PSOBPSR1",62,0)
 G CLOSE:$D(DIRUT)
"RTN","PSOBPSR1",63,0)
 ;
"RTN","PSOBPSR1",64,0)
NDTP I 'PRTD D HDR W !!?18,"**********   NO DATA TO PRINT   **********"
"RTN","PSOBPSR1",65,0)
 I $G(PCNT) D
"RTN","PSOBPSR1",66,0)
 . W !,SP1
"RTN","PSOBPSR1",67,0)
 . W !,"Total: ",PCNT," patient",$S(PCNT>1:"s",1:"")
"RTN","PSOBPSR1",68,0)
 . W " and ",FCNT," prescription fill",$S(FCNT>1:"s",1:""),"."
"RTN","PSOBPSR1",69,0)
 ;
"RTN","PSOBPSR1",70,0)
CLOSE ;
"RTN","PSOBPSR1",71,0)
 D ^%ZISC S:$D(ZTQUEUED) ZTREQ="@"
"RTN","PSOBPSR1",72,0)
END K ^TMP("PSOBPSRP",$J),^TMP("PSOBPSRC",$J)
"RTN","PSOBPSR1",73,0)
 K PSOAPT,PSODRUG,PSOUSER,PSOU,PSODRG,PSOPT,PSOSRT,PSOED,PSOSD,PSODIV,PSOSIT
"RTN","PSOBPSR1",74,0)
 Q
"RTN","PSOBPSR1",75,0)
 ;
"RTN","PSOBPSR1",76,0)
SET ;
"RTN","PSOBPSR1",77,0)
 S (S1,S2,S3)=0
"RTN","PSOBPSR1",78,0)
 F I=1:1:$L(PSOSRT,",") D
"RTN","PSOBPSR1",79,0)
 . S Y=$P(PSOSRT,",",I)
"RTN","PSOBPSR1",80,0)
 . S @("S"_I)=$S(Y=1:PNAM,Y=2:DNAM,Y=3:CBY)
"RTN","PSOBPSR1",81,0)
 S ^TMP("PSOBPSRP",$J,CDIV,S1,S2,S3,DFN,RXE,SEQ2)=""
"RTN","PSOBPSR1",82,0)
 Q
"RTN","PSOBPSR1",83,0)
 ;
"RTN","PSOBPSR1",84,0)
PRINT(DFN,RXIEN) ; - Print
"RTN","PSOBPSR1",85,0)
 ;Input: DFN-Patient;RXIEN=Prescription IEN
"RTN","PSOBPSR1",86,0)
 N X,XX,K,PNAM,PSSN,II,J,STR,CCOM,PMES,CBY,CREAS,CDAT,CFILL,RXNUM,DNAM,CINFO,COB,BILLED
"RTN","PSOBPSR1",87,0)
 S (CDAT,CREAS,CBY,DNAM,PNAM,PMES,PSSN,CCOM,CINFO,RXNUM,COB,BILLED)=""
"RTN","PSOBPSR1",88,0)
 ;
"RTN","PSOBPSR1",89,0)
 I OCDIV'=CDIV!(OCDIV="") D HDR I $D(DIRUT) Q
"RTN","PSOBPSR1",90,0)
 S OCDIV=CDIV
"RTN","PSOBPSR1",91,0)
 ;
"RTN","PSOBPSR1",92,0)
 D DEM^VADPT S PSSN=$P($G(VADM(2)),"^",2) K VADM
"RTN","PSOBPSR1",93,0)
 K RXINFO D GETS^DIQ(52,RXIEN_",",".01;2;6","EI","RXINFO")
"RTN","PSOBPSR1",94,0)
 S PNAM=RXINFO(52,RXIEN_",",2,"E"),DNAM=RXINFO(52,RXIEN_",",6,"E")
"RTN","PSOBPSR1",95,0)
 D GETS^DIQ(52.25,RSEQ_","_RXIEN_",","5;10;11;12;2;13;27","IE","CINFO")
"RTN","PSOBPSR1",96,0)
 S:$D(RXINFO(52,RXIEN_",",.01,"E")) RXNUM=RXINFO(52,RXIEN_",",.01,"E")
"RTN","PSOBPSR1",97,0)
 S:$D(CINFO(52.25,RSEQ_","_RXIEN_",",10,"I")) CDAT=CINFO(52.25,RSEQ_","_RXIEN_",",10,"I")
"RTN","PSOBPSR1",98,0)
 S CDAT=$$DT(CDAT)
"RTN","PSOBPSR1",99,0)
 S:$D(CINFO(52.25,RSEQ_","_RXIEN_",",12,"I")) CREAS=CINFO(52.25,RSEQ_","_RXIEN_",",12,"E")
"RTN","PSOBPSR1",100,0)
 S:$D(CINFO(52.25,RSEQ_","_RXIEN_",",11,"E")) CBY=CINFO(52.25,RSEQ_","_RXIEN_",",11,"E")
"RTN","PSOBPSR1",101,0)
 S:$D(CINFO(52.25,RSEQ_","_RXIEN_",",2,"E")) PMES=CINFO(52.25,RSEQ_","_RXIEN_",",2,"E")
"RTN","PSOBPSR1",102,0)
 D TEXT(.PMES,PMES,65)
"RTN","PSOBPSR1",103,0)
 S:$D(CINFO(52.25,RSEQ_","_RXIEN_",",13,"E")) CCOM=CINFO(52.25,RSEQ_","_RXIEN_",",13,"E")
"RTN","PSOBPSR1",104,0)
 D TEXT(.CCOM,CCOM,65)
"RTN","PSOBPSR1",105,0)
 S:$D(CINFO(52.25,RSEQ_","_RXIEN_",",5,"I")) CFILL=CINFO(52.25,RSEQ_","_RXIEN_",",5,"I")
"RTN","PSOBPSR1",106,0)
 S COB=$G(CINFO(52.25,RSEQ_","_RXIEN_",",27,"I"))
"RTN","PSOBPSR1",107,0)
 ;
"RTN","PSOBPSR1",108,0)
 S BILLED=$$GETBAMT^BPSBUTL(RXIEN,$G(CFILL),COB)  ; DBIA #4719
"RTN","PSOBPSR1",109,0)
 W !,RXNUM_"/"_CFILL,?15,$E(DNAM,1,21),?37,$E(PNAM,1,13)_"("_$P(PSSN,"-",3)_")",?57,CDAT,?66,$E(CBY,1,14)
"RTN","PSOBPSR1",110,0)
 W !,"Billed Amount: ",?15,"$",BILLED
"RTN","PSOBPSR1",111,0)
 S II="" F  S II=$O(CCOM(II)) Q:II=""  D
"RTN","PSOBPSR1",112,0)
 . W:II=1 !,"     Comments: "
"RTN","PSOBPSR1",113,0)
 . W:$D(CCOM(II)) ?15,CCOM(II),!
"RTN","PSOBPSR1",114,0)
 S II="" F  S II=$O(PMES(II)) Q:II=""  D
"RTN","PSOBPSR1",115,0)
 .  W:II=1 "Payer Message: "
"RTN","PSOBPSR1",116,0)
 .  W:$D(PMES(II)) ?15,PMES(II),!
"RTN","PSOBPSR1",117,0)
 ;
"RTN","PSOBPSR1",118,0)
 S:'$D(^TMP("PSOBPSRC",$J,DFN)) PCNT=PCNT+1 S ^TMP("PSOBPSRC",$J,DFN)=""
"RTN","PSOBPSR1",119,0)
 ;
"RTN","PSOBPSR1",120,0)
 S PRTD=1,FCNT=FCNT+1
"RTN","PSOBPSR1",121,0)
 Q
"RTN","PSOBPSR1",122,0)
 ;
"RTN","PSOBPSR1",123,0)
TEXT(TEXT,STR,L) ; Formats STR into TEXT array, lines lenght = L
"RTN","PSOBPSR1",124,0)
 N J,WORD,K S K=+$O(TEXT(""),-1) S:'K K=1
"RTN","PSOBPSR1",125,0)
 F J=1:1:$L(STR," ") D
"RTN","PSOBPSR1",126,0)
 . S WORD=$P(STR," ",J) I ($L($G(TEXT(K))_WORD))>L S K=K+1
"RTN","PSOBPSR1",127,0)
 . S TEXT(K)=$G(TEXT(K))_WORD_" "
"RTN","PSOBPSR1",128,0)
 Q
"RTN","PSOBPSR1",129,0)
 ;
"RTN","PSOBPSR1",130,0)
HDR ; - Prints the Header
"RTN","PSOBPSR1",131,0)
 N X,DIR,CDIVN S PAG=$G(PAG)+1
"RTN","PSOBPSR1",132,0)
 S CDIVN=$$GET1^DIQ(59,$G(CDIV)_",",".01")
"RTN","PSOBPSR1",133,0)
 I PAG>1,$E(IOST)="C" D  Q:$D(DIRUT)
"RTN","PSOBPSR1",134,0)
 . S DIR(0)="E",DIR("A")=" Press ENTER to Continue or ^ to Exit" D ^DIR
"RTN","PSOBPSR1",135,0)
 ;
"RTN","PSOBPSR1",136,0)
 W @IOF,"Ignored Rejects Report",?71,"Page: ",$J(PAG,3)
"RTN","PSOBPSR1",137,0)
 W !,"Sorted by",$$SRT(PSOSRT),?48,"Division: ",CDIVN
"RTN","PSOBPSR1",138,0)
 W !,"Date Range: "_$$DT(PSOSD+1\1)_" - "_$$DT(PSOED\1)
"RTN","PSOBPSR1",139,0)
 W ?48,"Run Date: "_$$FMTE^XLFDT($$NOW^XLFDT())
"RTN","PSOBPSR1",140,0)
 I PAG=1 D
"RTN","PSOBPSR1",141,0)
 . W !!,?19,"Note: Billed amount is what was billed and"
"RTN","PSOBPSR1",142,0)
 . W !,?17,"cannot be used to determine potential revenue."
"RTN","PSOBPSR1",143,0)
 S X="",$P(X,"-",81)="" W !,X
"RTN","PSOBPSR1",144,0)
 W !,"RX#/FILL",?15,"DRUG",?37,"PATIENT",?56,"IGNORE DT",?66,"IGNORED BY"
"RTN","PSOBPSR1",145,0)
 W !,"--------------",?15,"---------------------",?37,"------------------",?56,"---------",?66,"--------------"
"RTN","PSOBPSR1",146,0)
 Q
"RTN","PSOBPSR1",147,0)
 ;
"RTN","PSOBPSR1",148,0)
SRT(ST) ; - Convert the "2,1" (example) to "DRUG,PATIENT"
"RTN","PSOBPSR1",149,0)
 ;Input: ST-String with the Sorting fields by number
"RTN","PSOBPSR1",150,0)
 ;Output: ST-String with the Sorting fields by name
"RTN","PSOBPSR1",151,0)
 N I,X,STR,FLD
"RTN","PSOBPSR1",152,0)
 S STR="PATIENT^DRUG^USER"
"RTN","PSOBPSR1",153,0)
 F I=1:1:$L(ST,",") D
"RTN","PSOBPSR1",154,0)
 . S FLD=+$P(ST,",",I),X=$P(STR,"^",FLD)
"RTN","PSOBPSR1",155,0)
 . S $P(ST,",",I)=" "_X
"RTN","PSOBPSR1",156,0)
 Q ST
"RTN","PSOBPSR1",157,0)
 ;
"RTN","PSOBPSR1",158,0)
DT(DT) ; - Convert FM Date to MM/DD/YYYY
"RTN","PSOBPSR1",159,0)
 I 'DT Q ""
"RTN","PSOBPSR1",160,0)
 I '(DT#10000) Q (1700+$E(DT,1,3))
"RTN","PSOBPSR1",161,0)
 I '(DT#100) Q $E(DT,4,5)_"/"_(1700+$E(DT,1,3))
"RTN","PSOBPSR1",162,0)
 Q $E(DT,4,5)_"/"_$E(DT,6,7)_"/"_$E((1700+$E(DT,1,3)),3,4)
"RTN","PSOBPSR1",163,0)
 ;
"RTN","PSOBPSU1")
0^8^B113607101
"RTN","PSOBPSU1",1,0)
PSOBPSU1 ;BIRM/MFR - BPS (ECME) Utilities 1 ;10/15/04
"RTN","PSOBPSU1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,260,281,287,303,289,290,358,359,385,403,427,448**;DEC 1997;Build 25
"RTN","PSOBPSU1",3,0)
 ;References to $$EN^BPSNCPDP supported by IA 4415
"RTN","PSOBPSU1",4,0)
 ;References to $$NDCFMT^PSSNDCUT,$$GETNDC^PSSNDCUT supported by IA 4707
"RTN","PSOBPSU1",5,0)
 ;References to $$ECMEON^BPSUTIL,$$CMOPON^BPSUTIL supported by IA 4410
"RTN","PSOBPSU1",6,0)
 ;References to $$STORESP^IBNCPDP supported by IA 4299
"RTN","PSOBPSU1",7,0)
 ;References to $$CLAIM^BPSBUTL supported by IA 4719
"RTN","PSOBPSU1",8,0)
 ;Reference to $$RESPONSE^BPSOS03 supported by IA 6226
"RTN","PSOBPSU1",9,0)
 ;
"RTN","PSOBPSU1",10,0)
ECMESND(RX,RFL,DATE,FROM,NDC,CMOP,RVTX,OVRC,CNDC,RESP,IGSW,ALTX,CLA,PA,RXCOB) ; - Sends Rx Release 
"RTN","PSOBPSU1",11,0)
 ;information to ECME/IB and updates NDC in the files 50 & 52; DBIA4702
"RTN","PSOBPSU1",12,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",13,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",14,0)
 ;       (o) DATE - Date of Service
"RTN","PSOBPSU1",15,0)
 ;       (r) FROM - Function within OP (See BWHERE param. in EN^BPSNCPDP api)
"RTN","PSOBPSU1",16,0)
 ;       (o) NDC  - NDC Number (If not passed, will be retrieved from DRUG file)
"RTN","PSOBPSU1",17,0)
 ;       (o) CMOP - CMOP Rx (1-YES/0-NO) (Default: 0)
"RTN","PSOBPSU1",18,0)
 ;       (o) RVTX - REVERSE text (e.g., RX EDIT, RX RELEASE-NDC CHANGE, etc)
"RTN","PSOBPSU1",19,0)
 ;       (o) OVRC - Three sets of 3 NCPDP override codes separated by "~".  Each piece of the set 
"RTN","PSOBPSU1",20,0)
 ;                  is delimited by an "^"
"RTN","PSOBPSU1",21,0)
 ;                  Piece 1: NCPDP Reason for Service Code for overriding DUR REJECTS
"RTN","PSOBPSU1",22,0)
 ;                  Piece 2: NCPDP Professional Service Code for overriding DUR REJECTS
"RTN","PSOBPSU1",23,0)
 ;                  Piece 3: NCPDP Result of Service Code for overriding DUR REJECTS
"RTN","PSOBPSU1",24,0)
 ;       (o) CNDC - Changed NDC? 1 - Yes / 0 - No (Default: NO)
"RTN","PSOBPSU1",25,0)
 ;       (o) IGSW - Ignore Switches (Master and CMOP)? 1 - Yes / 0 - No (Default: NO)
"RTN","PSOBPSU1",26,0)
 ;       (o) ALTX - Alternative Text to be placed in the Rx ECME Activity Log
"RTN","PSOBPSU1",27,0)
 ;       (o) CLA  - NCPDP Clarification Code(s) for overriding DUR/RTS REJECTS
"RTN","PSOBPSU1",28,0)
 ;       (o) PA   - NCPDP Prior Authorization Type and Number (separated by "^")
"RTN","PSOBPSU1",29,0)
 ;       (o) RXCOB- Payer Sequence
"RTN","PSOBPSU1",30,0)
 ;Output:    RESP - Response from $$EN^BPSNCPDP api
"RTN","PSOBPSU1",31,0)
 ;
"RTN","PSOBPSU1",32,0)
 N ACT,NDCACT,DA,PSOELIG,PSOBYPS,ACT1,SMA
"RTN","PSOBPSU1",33,0)
 I '$D(RFL) S RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",34,0)
 ; - ECME is not turned ON for the Rx's Division
"RTN","PSOBPSU1",35,0)
 I '$G(IGSW),'$$ECMEON^BPSUTIL($$RXSITE^PSOBPSUT(RX,RFL)) S RESP="-1^ECME SWITCH OFF" Q
"RTN","PSOBPSU1",36,0)
 ; - ECME CMOP is not turned ON for the Rx's Division
"RTN","PSOBPSU1",37,0)
 I '$G(IGSW),$G(CMOP),'$$CMOPON^BPSUTIL($$RXSITE^PSOBPSUT(RX,RFL)) S RESP="-1^CMOP SWITCH OFF" Q
"RTN","PSOBPSU1",38,0)
 ; - Saving the NDC to be displayed on the ECME Act Log
"RTN","PSOBPSU1",39,0)
 I $G(CNDC) D
"RTN","PSOBPSU1",40,0)
 . I $G(NDC)'="" S NDCACT=NDC Q
"RTN","PSOBPSU1",41,0)
 . S NDCACT=$$GETNDC^PSONDCUT(RX,RFL)
"RTN","PSOBPSU1",42,0)
 I $$NDCFMT^PSSNDCUT($G(NDC))="" D
"RTN","PSOBPSU1",43,0)
 . S NDC=$$GETNDC^PSSNDCUT($$GET1^DIQ(52,RX,6,"I"),$$RXSITE^PSOBPSUT(RX,RFL),+$G(CMOP))
"RTN","PSOBPSU1",44,0)
 . I $G(NDC)'="" D SAVNDC^PSONDCUT(RX,RFL,NDC,+$G(CMOP),1)
"RTN","PSOBPSU1",45,0)
 S PPDU="",PPDU=$$GPPDU^PSONDCUT(RX,RFL,NDC,,1,FROM) K PPDU
"RTN","PSOBPSU1",46,0)
 ;
"RTN","PSOBPSU1",47,0)
 ; Determine if this has multiple overrides from the SMA action of the reject worklist
"RTN","PSOBPSU1",48,0)
 S SMA=0
"RTN","PSOBPSU1",49,0)
 I $G(OVRC)]"",$G(CLA)]"" S SMA=1
"RTN","PSOBPSU1",50,0)
 I $G(OVRC)]"",$G(PA)]"" S SMA=1
"RTN","PSOBPSU1",51,0)
 I $G(CLA)]"",$G(PA)]"" S SMA=1
"RTN","PSOBPSU1",52,0)
 ;
"RTN","PSOBPSU1",53,0)
 ; if the reversal reason text exists, remove semi-colons  pso*7*448
"RTN","PSOBPSU1",54,0)
 I $G(RVTX)'="" S RVTX=$TR(RVTX,";","-")
"RTN","PSOBPSU1",55,0)
 ;
"RTN","PSOBPSU1",56,0)
 ; - Creating ECME Act Log in file 52
"RTN","PSOBPSU1",57,0)
 S ACT="" I $$STATUS^PSOBPSUT(RX,RFL)="E PAYABLE" S ACT="Rev/Resubmit"
"RTN","PSOBPSU1",58,0)
 S ACT=ACT_" ECME:"
"RTN","PSOBPSU1",59,0)
 ;
"RTN","PSOBPSU1",60,0)
 ; - Marked any 'unresolved' REJECTS as 'resolved' (Reason: 1 - Claim re-submitted)
"RTN","PSOBPSU1",61,0)
 N CLSCOM
"RTN","PSOBPSU1",62,0)
 I 'SMA D
"RTN","PSOBPSU1",63,0)
 . I $P($G(OVRC),"~")'="" S CLSCOM="DUR Override Codes "_$TR($P(OVRC,"~"),"^","/")_" submitted."
"RTN","PSOBPSU1",64,0)
 . I $G(CLA)'="" S CLSCOM="Clarification Code(s) "_CLA_" submitted."
"RTN","PSOBPSU1",65,0)
 . I $G(PA)'="" S CLSCOM="Prior Authorization Code ("_$P(PA,"^")_"/"_$P(PA,"^",2)_") submitted."
"RTN","PSOBPSU1",66,0)
 D CLSALL^PSOREJUT(RX,RFL,DUZ,1,$G(CLSCOM),$P($G(OVRC),"~",1),$P($G(OVRC),"~",2),$P($G(OVRC),"~",3),$G(CLA),$G(PA))
"RTN","PSOBPSU1",67,0)
 ; - Call to ECME (NEWing STAT because ECME was overwriting it - Important variable for CMOP release PSXVND)
"RTN","PSOBPSU1",68,0)
 N STAT
"RTN","PSOBPSU1",69,0)
 I $G(RVTX)="",FROM="ED" S RVTX="RX EDITED"
"RTN","PSOBPSU1",70,0)
 S RESP=$$EN^BPSNCPDP(RX,RFL,$$DOS(RX,RFL,.DATE),FROM,NDC,$G(RVTX),$G(OVRC),,$G(CLA),$G(PA),$G(RXCOB))
"RTN","PSOBPSU1",71,0)
 I $$STATUS^PSOBPSUT(RX,RFL)="E PAYABLE" D
"RTN","PSOBPSU1",72,0)
 . D SAVNDC^PSONDCUT(RX,RFL,NDC,+$G(CMOP),1,FROM)
"RTN","PSOBPSU1",73,0)
 . ;
"RTN","PSOBPSU1",74,0)
 . ; MRD;PSO*7.0*448 - If this is a resubmit of a claim with an RRR
"RTN","PSOBPSU1",75,0)
 . ; reject, and it came back E PAYABLE, then display some additional
"RTN","PSOBPSU1",76,0)
 . ; information about the response to the claim, conditional upon the
"RTN","PSOBPSU1",77,0)
 . ; value of FROM.
"RTN","PSOBPSU1",78,0)
 . ;
"RTN","PSOBPSU1",79,0)
 . I ",ED,PE,PP,RF,RN,RRL,"[(","_FROM_","),$$RRR(RX,RFL) D ADDLINFO(RX,RFL,$G(RXCOB))
"RTN","PSOBPSU1",80,0)
 . ;
"RTN","PSOBPSU1",81,0)
 . Q
"RTN","PSOBPSU1",82,0)
 ;
"RTN","PSOBPSU1",83,0)
 ; - Reseting the Re-transmission flag
"RTN","PSOBPSU1",84,0)
 D RETRXF^PSOREJU2(RX,RFL,0)
"RTN","PSOBPSU1",85,0)
 ; Storing eligibility flag
"RTN","PSOBPSU1",86,0)
 S PSOELIG=$P(RESP,"^",3) D:PSOELIG'="" ELIG^PSOBPSU2(RX,RFL,PSOELIG)
"RTN","PSOBPSU1",87,0)
 ;
"RTN","PSOBPSU1",88,0)
 ; Check if this is a bypass RX-claim.  If it is, write it to the Bypass-Override Report
"RTN","PSOBPSU1",89,0)
 S PSOBYPS=$$BYPASS(PSOELIG,$P(RESP,"^",2))
"RTN","PSOBPSU1",90,0)
 I PSOBYPS D EN^PSOBORP2(RX,RFL,RESP)
"RTN","PSOBPSU1",91,0)
 ;
"RTN","PSOBPSU1",92,0)
 ; If from SMA action, split message across multiple log entries
"RTN","PSOBPSU1",93,0)
 ; The last entry will be filed in the code that follows this section as we append other data
"RTN","PSOBPSU1",94,0)
 ;   to the last message.
"RTN","PSOBPSU1",95,0)
 I SMA,+RESP'=2,+RESP'=6,+RESP'=10 D
"RTN","PSOBPSU1",96,0)
 . N MSG
"RTN","PSOBPSU1",97,0)
 . ; If there are DUR overrides, create the message and file it since this will never be the last message
"RTN","PSOBPSU1",98,0)
 . I $G(OVRC)]"" D
"RTN","PSOBPSU1",99,0)
 .. S MSG=ACT_"REJECT WORKLIST-DUR OVERRIDE CODES("_$TR(OVRC,"^","/")_")"
"RTN","PSOBPSU1",100,0)
 .. D RXACT^PSOBPSU2(RX,RFL,MSG,"M",DUZ)
"RTN","PSOBPSU1",101,0)
 . ; If there are Clarification codes, create the message
"RTN","PSOBPSU1",102,0)
 . ; Only file it if we also have a Prior Auth message.
"RTN","PSOBPSU1",103,0)
 . ; Otherwise more data will be added to it and it will be filed below.
"RTN","PSOBPSU1",104,0)
 . I $G(CLA)]"" D
"RTN","PSOBPSU1",105,0)
 .. S MSG=ACT_"REJECT WORKLIST-(CLARIF. CODE="_CLA_")"
"RTN","PSOBPSU1",106,0)
 .. I $G(PA)]"" D RXACT^PSOBPSU2(RX,RFL,MSG,"M",DUZ)
"RTN","PSOBPSU1",107,0)
 . ; If there are Prior Auth overrides, create the message.
"RTN","PSOBPSU1",108,0)
 . ; More data will be added to it and it will be filed below.
"RTN","PSOBPSU1",109,0)
 . I $G(PA)]"" D
"RTN","PSOBPSU1",110,0)
 .. S ALTX="REJECT WORKLIST-(PRIOR AUTH.="_$TR(PA,"^","/")_")"
"RTN","PSOBPSU1",111,0)
 ;
"RTN","PSOBPSU1",112,0)
 ; - Logging ECME Act Log to file 52
"RTN","PSOBPSU1",113,0)
 I $G(ALTX)="" D
"RTN","PSOBPSU1",114,0)
 . N X,ROUTE S (ROUTE,X)=""
"RTN","PSOBPSU1",115,0)
 . S ROUTE=$S(FROM="RF":$$GET1^DIQ(52.1,RFL_","_RX_",",2),FROM="OF":$$GET1^DIQ(52,RX_",",11),1:"")
"RTN","PSOBPSU1",116,0)
 . S:FROM="OF" X=ROUTE_" FILL(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",117,0)
 . S:FROM="RF" X=ROUTE_" REFILL(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",118,0)
 . S:FROM="RN" X="RX RENEWED(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",119,0)
 . S:FROM="PL" X="PRINTED FROM SUSPENSE(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",120,0)
 . S:FROM="PE"!(FROM="PP") X="PULLED FROM SUSPENSE(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",121,0)
 . S:FROM="PC" X="CMOP TRANSMISSION(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",122,0)
 . S:FROM="RRL"!(FROM="CRRL") X="RELEASED RX PREVIOUSLY REVERSED"
"RTN","PSOBPSU1",123,0)
 . S:FROM="ED" X="RX EDITED"
"RTN","PSOBPSU1",124,0)
 . S:$G(RVTX)'="" X=RVTX
"RTN","PSOBPSU1",125,0)
 . I 'SMA,$G(OVRC)'="" S X="DUR OVERRIDE CODES("_$TR(OVRC,"^","/")_")"
"RTN","PSOBPSU1",126,0)
 . S:$G(CNDC) X=X_"(NDC:"_NDCACT_")" S ACT=ACT_X
"RTN","PSOBPSU1",127,0)
 . S ACT=ACT_$$STS(RX,RFL,RESP)
"RTN","PSOBPSU1",128,0)
 I $G(ALTX)'="" S ACT=ACT_ALTX_$$STS(RX,RFL,RESP)
"RTN","PSOBPSU1",129,0)
 I +RESP=2 S ACT="Not ECME Billable: "_$P(RESP,"^",2)
"RTN","PSOBPSU1",130,0)
 I +RESP=6 S ACT=$P(RESP,"^",2)
"RTN","PSOBPSU1",131,0)
 I +RESP=10 S ACT="ECME reversed/NOT re-submitted: "_$P(RESP,"^",2)
"RTN","PSOBPSU1",132,0)
 S:PSOELIG="T" ACT="TRICARE-"_ACT
"RTN","PSOBPSU1",133,0)
 S:PSOELIG="C" ACT="CHAMPVA-"_ACT
"RTN","PSOBPSU1",134,0)
 S ACT1=""
"RTN","PSOBPSU1",135,0)
 I $P(RESP,"^",6),$P(RESP,"^",7)'=""  S ACT1="-"_$S($P(RESP,"^",6)="2":"s",$P(RESP,"^",6)="3":"t",1:"p")_$P(RESP,"^",7)
"RTN","PSOBPSU1",136,0)
 S ACT=$E(ACT_ACT1,1,75)
"RTN","PSOBPSU1",137,0)
 D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOBPSU1",138,0)
 D ELOG^PSOBPSU2(RESP)  ;-Logs an ECME Act Log if Rx Qty is different than Billing Qty
"RTN","PSOBPSU1",139,0)
 ; If not a bypass RX-claim, then call TRICCHK so the user can process
"RTN","PSOBPSU1",140,0)
 I PSOELIG="T"!(PSOELIG="C"),'PSOBYPS D TRICCHK^PSOREJU3(RX,RFL,RESP,FROM,$G(RVTX))
"RTN","PSOBPSU1",141,0)
 Q
"RTN","PSOBPSU1",142,0)
 ;
"RTN","PSOBPSU1",143,0)
BYPASS(PSOELIG,REASON) ;PSO*427
"RTN","PSOBPSU1",144,0)
 ; Check if this Rx gets bypassed. Bypassed Rx show up on the TRICARE/CHAMPVA
"RTN","PSOBPSU1",145,0)
 ;   Override/Bypass Report and will not get the Reject Notification Screen.
"RTN","PSOBPSU1",146,0)
 ;
"RTN","PSOBPSU1",147,0)
 ; Input:
"RTN","PSOBPSU1",148,0)
 ;    POSELIG: Eligibility (C:CHAMPVA, T:TRICARE, V:VETERAN)
"RTN","PSOBPSU1",149,0)
 ;    REASON: Non billable reason returned by ECME
"RTN","PSOBPSU1",150,0)
 ; Output:
"RTN","PSOBPSU1",151,0)
 ;    0: Not a Bypass Rx
"RTN","PSOBPSU1",152,0)
 ;    1: Bypass Rx
"RTN","PSOBPSU1",153,0)
 ;
"RTN","PSOBPSU1",154,0)
 ; Check Parameters
"RTN","PSOBPSU1",155,0)
 I $G(PSOELIG)="" Q 0
"RTN","PSOBPSU1",156,0)
 I $G(REASON)="" Q 0
"RTN","PSOBPSU1",157,0)
 ;
"RTN","PSOBPSU1",158,0)
 ; Only TRICARE and CHAMPVA are bypassed
"RTN","PSOBPSU1",159,0)
 I PSOELIG'="T",PSOELIG'="C" Q 0
"RTN","PSOBPSU1",160,0)
 ;
"RTN","PSOBPSU1",161,0)
 ; Check for TRICARE/CHAMPVA and EI (Veteran claims would not have gotten this far)
"RTN","PSOBPSU1",162,0)
 I ",AGENT ORANGE,IONIZING RADIATION,SC TREATMENT,SOUTHWEST ASIA,MILITARY SEXUAL TRAUMA,HEAD/NECK CANCER,COMBAT VETERAN,PROJECT 112/SHAD,"[(","_REASON_",") Q 1
"RTN","PSOBPSU1",163,0)
 Q 0
"RTN","PSOBPSU1",164,0)
 ;
"RTN","PSOBPSU1",165,0)
RRR(PSORX,PSOFILL) ; Check for an RRR reject on a Prescription/Fill.
"RTN","PSOBPSU1",166,0)
 ; MRD;PSO*7.0*448 - New function to support display of additional
"RTN","PSOBPSU1",167,0)
 ; information for RRR resubmits.  Return '1' if this Rx has a reject
"RTN","PSOBPSU1",168,0)
 ; with the RRR flag set, otherwise return '0'.
"RTN","PSOBPSU1",169,0)
 ; Input:  (r) PSORX   - Rx IEN (#52)
"RTN","PSOBPSU1",170,0)
 ;         (o) PSOFILL - Refill#
"RTN","PSOBPSU1",171,0)
 ; Output: '1' if RRR, '0' if not
"RTN","PSOBPSU1",172,0)
 ;
"RTN","PSOBPSU1",173,0)
 N PSOREJ,PSORRR
"RTN","PSOBPSU1",174,0)
 ;
"RTN","PSOBPSU1",175,0)
 I '$G(PSORX) Q 0
"RTN","PSOBPSU1",176,0)
 I $G(PSOFILL)="" S PSOFILL=0
"RTN","PSOBPSU1",177,0)
 ;
"RTN","PSOBPSU1",178,0)
 ; Loop through the Reject Info sub-file.  If the Fill# on a Reject is
"RTN","PSOBPSU1",179,0)
 ; the same as PSOFILL, and if the Reject is RRR, then set the flag and
"RTN","PSOBPSU1",180,0)
 ; quit out.
"RTN","PSOBPSU1",181,0)
 ;
"RTN","PSOBPSU1",182,0)
 S PSORRR=0
"RTN","PSOBPSU1",183,0)
 S PSOREJ=0
"RTN","PSOBPSU1",184,0)
 F  S PSOREJ=$O(^PSRX(PSORX,"REJ",PSOREJ)) Q:'PSOREJ  D  Q:PSORRR
"RTN","PSOBPSU1",185,0)
 . I $$GET1^DIQ(52.25,PSOREJ_","_PSORX,5)'=PSOFILL Q
"RTN","PSOBPSU1",186,0)
 . I $$GET1^DIQ(52.25,PSOREJ_","_PSORX,30,"I") S PSORRR=1
"RTN","PSOBPSU1",187,0)
 . Q
"RTN","PSOBPSU1",188,0)
 ;
"RTN","PSOBPSU1",189,0)
 Q PSORRR
"RTN","PSOBPSU1",190,0)
 ;
"RTN","PSOBPSU1",191,0)
ADDLINFO(PSORX,PSOFILL,PSOCOB) ; Display additional information for RRR resubmits.
"RTN","PSOBPSU1",192,0)
 ; MRD;PSO*7.0*448 - Display addition information for a paid claim.
"RTN","PSOBPSU1",193,0)
 ; Input: (r) PSORX   - Rx IEN (#52)
"RTN","PSOBPSU1",194,0)
 ;        (o) PSOFILL - Refill#
"RTN","PSOBPSU1",195,0)
 ;        (o) PSOCOB  - Payer Sequence
"RTN","PSOBPSU1",196,0)
 ;
"RTN","PSOBPSU1",197,0)
 ; Use $$RESPONSE^BPSOS03 to pull the following fields from the BPS
"RTN","PSOBPSU1",198,0)
 ; Response file, then display those fields.
"RTN","PSOBPSU1",199,0)
 ;  - Total Amount Paid, field #509
"RTN","PSOBPSU1",200,0)
 ;  - Ingredient Cost Paid, field #506
"RTN","PSOBPSU1",201,0)
 ;  - Amount of Copay/Coinsurance, field #518
"RTN","PSOBPSU1",202,0)
 ;  - Dispensing Fee Paid, field #507
"RTN","PSOBPSU1",203,0)
 ;  - Amount Applied to Periodic Deductible, field #517
"RTN","PSOBPSU1",204,0)
 ;  - Remaining Deductible Amount, field #513
"RTN","PSOBPSU1",205,0)
 ;
"RTN","PSOBPSU1",206,0)
 N PSORESP,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","PSOBPSU1",207,0)
 ;
"RTN","PSOBPSU1",208,0)
 I '$G(PSORX) Q                ; If no Rx passed in, Quit out.
"RTN","PSOBPSU1",209,0)
 I $G(PSOFILL)="" S PSOFILL=0  ; Default Fill to 0 if none.
"RTN","PSOBPSU1",210,0)
 I '$G(PSOCOB) S PSOCOB=1      ; Default COB to 1/primary if none.
"RTN","PSOBPSU1",211,0)
 ;
"RTN","PSOBPSU1",212,0)
 S PSORESP=$$RESPONSE^BPSOS03(PSORX,PSOFILL,PSOCOB)  ; IA 6226.
"RTN","PSOBPSU1",213,0)
 I PSORESP="" Q
"RTN","PSOBPSU1",214,0)
 ;
"RTN","PSOBPSU1",215,0)
 W !,"Total Amount Paid: ",$P(PSORESP,U,1)
"RTN","PSOBPSU1",216,0)
 W ?39,"Ingredient Cost Paid: ",$P(PSORESP,U,2)
"RTN","PSOBPSU1",217,0)
 W !,"Amount of Copay/Coinsurance: ",$P(PSORESP,U,3)
"RTN","PSOBPSU1",218,0)
 W ?39,"Dispensing Fee Paid: ",$P(PSORESP,U,4)
"RTN","PSOBPSU1",219,0)
 W !,"Amount Applied to Periodic Deductible: ",$P(PSORESP,U,5)
"RTN","PSOBPSU1",220,0)
 W !,"Remaining Deductible Amount: ",$P(PSORESP,U,6)
"RTN","PSOBPSU1",221,0)
 ;
"RTN","PSOBPSU1",222,0)
 S DIR(0)="E",DIR("A")="Press Return to continue"
"RTN","PSOBPSU1",223,0)
 W !
"RTN","PSOBPSU1",224,0)
 D ^DIR
"RTN","PSOBPSU1",225,0)
 W !
"RTN","PSOBPSU1",226,0)
 ;
"RTN","PSOBPSU1",227,0)
 Q
"RTN","PSOBPSU1",228,0)
 ;
"RTN","PSOBPSU1",229,0)
REVERSE(RX,RFL,FROM,RSN,RTXT,IGRL,NDC) ; - Reverse a claim and close all OPEN/UNRESOLVED Rejects
"RTN","PSOBPSU1",230,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",231,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",232,0)
 ;       (r) FROM - Function within OP (See BWHERE param. in EN^BPSNCPDP api)
"RTN","PSOBPSU1",233,0)
 ;       (o) RSN  - Close Reason (2:RX ON HOLD;4: RX RETURNED TO STOCK,5:RX DELETED,etc...)
"RTN","PSOBPSU1",234,0)
 ;       (o) RTXT - Close Reason TEXT (Usually no passed if RSN is passed)
"RTN","PSOBPSU1",235,0)
 ;       (o) IGRL - Ignore RELEASE DATE, reverse anyway  
"RTN","PSOBPSU1",236,0)
 ;       (o) NDC  - NDC number related to the reversal (Note: might be an invalid NDC)
"RTN","PSOBPSU1",237,0)
 I '$D(RFL) S RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",238,0)
 N PSOET S PSOET=$$PSOET^PSOREJP3(RX,RFL)   ;cnf, PSO*7.0*358
"RTN","PSOBPSU1",239,0)
 I 'PSOET,$$STATUS^PSOBPSUT(RX,RFL)="" Q    ;cnf, PSO*7.0*358, add PSOET check, allow reversal for TRICARE non-billable reject
"RTN","PSOBPSU1",240,0)
 N RESP,STS,ACT,STAT,DA,STATUS,NOACT,REVECME S RSN=+$G(RSN),RTXT=$G(RTXT),REVECME=1
"RTN","PSOBPSU1",241,0)
 I RTXT="",RSN D
"RTN","PSOBPSU1",242,0)
 . S:RSN=2 RTXT="RX PLACED ON HOLD" S:RSN=3 RTXT="RX SUSPENDED" S:RSN=4 RTXT="RX RETURNED TO STOCK"
"RTN","PSOBPSU1",243,0)
 . S:RSN=5 RTXT="RX DELETED" S:RSN=7 RTXT="RX DISCONTINUED" S:RSN=8 RTXT="RX EDITED"
"RTN","PSOBPSU1",244,0)
 D CLSALL^PSOREJUT(RX,RFL,DUZ,RSN,RTXT)
"RTN","PSOBPSU1",245,0)
 I '$G(IGRL),$$RXRLDT^PSOBPSUT(RX,RFL) Q
"RTN","PSOBPSU1",246,0)
 ; - Reseting the Re-transmission flag if Rx is being suspended
"RTN","PSOBPSU1",247,0)
 I RSN=3!($$GET1^DIQ(52,RX,100,"I")=5) D RETRXF^PSOREJU2(RX,RFL,1)
"RTN","PSOBPSU1",248,0)
 S STATUS=$$STATUS^PSOBPSUT(RX,RFL),NOACT=0
"RTN","PSOBPSU1",249,0)
 I STATUS'="E PAYABLE",STATUS'="IN PROGRESS",STATUS'="E REVERSAL REJECTED",STATUS'="E REVERSAL STRANDED",STATUS'="E DUPLICATE" S NOACT=1
"RTN","PSOBPSU1",250,0)
 ; Only perform ECME reversal for a released CMOP if rx/fill is Discontinued.
"RTN","PSOBPSU1",251,0)
 I FROM="DC",$$CMOP^PSOBPSUT(RX,RFL) S REVECME=0
"RTN","PSOBPSU1",252,0)
 I REVECME S RESP=$$EN^BPSNCPDP(RX,RFL,$$DOS(RX,RFL),FROM,$$GETNDC^PSONDCUT(RX,RFL),RTXT)
"RTN","PSOBPSU1",253,0)
 N PSOTRIC S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOBPSU1",254,0)
 ; - Logging ECME Act Log
"RTN","PSOBPSU1",255,0)
 I '$G(NOACT),REVECME D
"RTN","PSOBPSU1",256,0)
 . S ACT=$S(PSOTRIC=1:"TRICARE ",PSOTRIC=2:"CHAMPVA ",1:"")_"Reversal sent to ECME: "_RTXT_$S($G(NDC)'="":" ("_NDC_")",1:"")_$$STS(RX,RFL,+RESP)
"RTN","PSOBPSU1",257,0)
 . D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOBPSU1",258,0)
 Q
"RTN","PSOBPSU1",259,0)
 ;
"RTN","PSOBPSU1",260,0)
DOS(RX,RFL,DATE) ; Return the Date Of Service for ECME
"RTN","PSOBPSU1",261,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",262,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",263,0)
 ;       (o) DATE - Possible Date Of Service
"RTN","PSOBPSU1",264,0)
 ;Output:    DOS  - Actual Date Of Service
"RTN","PSOBPSU1",265,0)
 I '$D(RFL) S RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",266,0)
 ; - Retrieving RELEASE DATE from file 52 if DATE not passed in
"RTN","PSOBPSU1",267,0)
 I $G(DATE)="" S DATE=$$RXRLDT^PSOBPSUT(RX,RFL)
"RTN","PSOBPSU1",268,0)
 ; - If no date or future date, use today's date
"RTN","PSOBPSU1",269,0)
 I DATE>DT!'DATE S DATE=$$DT^XLFDT
"RTN","PSOBPSU1",270,0)
 Q (DATE\1)
"RTN","PSOBPSU1",271,0)
 ;
"RTN","PSOBPSU1",272,0)
RELEASE(RX,RFL,USR) ; - Notifies IB that the Rx was RELEASED
"RTN","PSOBPSU1",273,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",274,0)
 ;       (o) RFL  - Refill # (Default: most recent)
"RTN","PSOBPSU1",275,0)
 ;       (o) USR  - User responsible for releasing the Rx (Default: .5 - Postmaster)
"RTN","PSOBPSU1",276,0)
 N IBAR,RXAR,RFAR,PSOIBN
"RTN","PSOBPSU1",277,0)
 S:'$D(RFL) RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",278,0)
 S:'$D(USR) USR=.5
"RTN","PSOBPSU1",279,0)
 D GETS^DIQ(52,RX_",",".01;2;6;7;8;22","I","RXAR")
"RTN","PSOBPSU1",280,0)
 S DFN=+$G(RXAR(52,RX_",",2,"I"))
"RTN","PSOBPSU1",281,0)
 S IBAR("PRESCRIPTION")=RX,IBAR("RX NO")=$G(RXAR(52,RX_",",.01,"I"))
"RTN","PSOBPSU1",282,0)
 S IBAR("CLAIMID")=$P($$CLAIM^BPSBUTL(RX,RFL),U,6)
"RTN","PSOBPSU1",283,0)
 S IBAR("USER")=USR
"RTN","PSOBPSU1",284,0)
 S IBAR("DRUG")=RXAR(52,RX_",",6,"I"),IBAR("NDC")=$$GETNDC^PSONDCUT(RX,RFL)
"RTN","PSOBPSU1",285,0)
 S IBAR("FILL NUMBER")=RFL,IBAR("DOS")=$$DOS(RX,RFL),IBAR("RELEASE DATE")=$$RXRLDT^PSOBPSUT(RX,RFL)
"RTN","PSOBPSU1",286,0)
 S IBAR("QTY")=$G(RXAR(52,RX_",",7,"I")),IBAR("DAYS SUPPLY")=$G(RXAR(52,RX_",",8,"I"))
"RTN","PSOBPSU1",287,0)
 I RFL D
"RTN","PSOBPSU1",288,0)
 . D GETS^DIQ(52.1,RFL_","_RX_",",".01;1;1.1","I","RFAR")
"RTN","PSOBPSU1",289,0)
 . S IBAR("QTY")=$G(RFAR(52.1,RFL_","_RX_",",1,"I"))
"RTN","PSOBPSU1",290,0)
 . S IBAR("DAYS SUPPLY")=$G(RFAR(52.1,RFL_","_RX_",",1.1,"I"))
"RTN","PSOBPSU1",291,0)
 S IBAR("STATUS")="RELEASED"
"RTN","PSOBPSU1",292,0)
 S PSOIBN=$$STORESP^IBNCPDP(DFN,.IBAR)
"RTN","PSOBPSU1",293,0)
 Q
"RTN","PSOBPSU1",294,0)
 ;
"RTN","PSOBPSU1",295,0)
LSTRFL(RX) ;  - Returns the latest fill for the Rx
"RTN","PSOBPSU1",296,0)
 ; Input: (r) RX     - Rx IEN (#52)
"RTN","PSOBPSU1",297,0)
 ;Output:     LSTRFL - Most recent refill #
"RTN","PSOBPSU1",298,0)
 N I,LSTRFL
"RTN","PSOBPSU1",299,0)
 S (I,LSTRFL)=0 F  S I=$O(^PSRX(RX,1,I)) Q:'I  S LSTRFL=I
"RTN","PSOBPSU1",300,0)
 Q LSTRFL
"RTN","PSOBPSU1",301,0)
 ;
"RTN","PSOBPSU1",302,0)
ECMEACT(RX,RFL,COMM,USR) ; - Add an Act to the ECME Act Log (FILE 52)
"RTN","PSOBPSU1",303,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",304,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",305,0)
 ;       (r) COMM - Comments (up to 75 characters)
"RTN","PSOBPSU1",306,0)
 ;       (o) USR  - User logging the comments (Default: DUZ)
"RTN","PSOBPSU1",307,0)
 S:'$D(RFL) RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOBPSU1",308,0)
 D RXACT^PSOBPSU2(RX,RFL,COMM,"M",+$G(USR))
"RTN","PSOBPSU1",309,0)
 Q
"RTN","PSOBPSU1",310,0)
 ;
"RTN","PSOBPSU1",311,0)
STS(RX,RFL,RSP) ; Adds the Status to the ECME Act Log according to Rx/fill claim status Response
"RTN","PSOBPSU1",312,0)
 N STS
"RTN","PSOBPSU1",313,0)
 S STS=$S($$STATUS^PSOBPSUT(RX,RFL)'="IN PROGRESS"&($$STATUS^PSOBPSUT(RX,RFL)'=""):"-"_$$STATUS^PSOBPSUT(RX,RFL),1:"")
"RTN","PSOBPSU1",314,0)
 S:+RSP=1 STS="-NO SUBMISSION THROUGH ECME" S:+RSP=3 STS="-NO REVERSAL NEEDED" S:+RSP=4 STS="-NOT PROCESSED"
"RTN","PSOBPSU1",315,0)
 S:+RSP=5 STS="-SOFTWARE ERROR"_$S($P($G(RESP),"^",2)'="":" ("_$P(RESP,"^",2)_")",1:"")
"RTN","PSOBPSU1",316,0)
 I +RSP=2,$$STATUS^PSOBPSUT(RX,RFL)'="" S STS="-NOT BILLABLE:"_$S(PSOELIG="T":"TRICARE",PSOELIG="C":"CHAMPVA",1:"")_":"_$P(RSP,"^",2)
"RTN","PSOBPSU1",317,0)
 Q STS
"RTN","PSOBPSU3")
0^12^B16909866
"RTN","PSOBPSU3",1,0)
PSOBPSU3 ;ALB/CFS - BPS (ECME) Utilities 3 ;08/27/15
"RTN","PSOBPSU3",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**448**;DEC 1997;Build 25
"RTN","PSOBPSU3",3,0)
 ; Reference to ^BPSVRX supported by IA #5723
"RTN","PSOBPSU3",4,0)
 ; Reference to ^BPSPSOU1 supported by IA #6248
"RTN","PSOBPSU3",5,0)
 ;
"RTN","PSOBPSU3",6,0)
RES(RXIEN,DFN) ; Resubmit a claim action from PSO HIDDEN ACTIONS
"RTN","PSOBPSU3",7,0)
 N ACTION,DIRUT,PSOCOB,PSOFILL,PSOFL,PSOFLZ,PSOELIG,REVREAS,VALID
"RTN","PSOBPSU3",8,0)
 S PSOFILL=$$FILL(RXIEN,DFN,.PSOFL)
"RTN","PSOBPSU3",9,0)
 I $D(DIRUT) G END
"RTN","PSOBPSU3",10,0)
 I PSOFILL="" W !!,"No claim was ever submitted for this prescription. Cannot resubmit." D PAUSE^VALM1 G END
"RTN","PSOBPSU3",11,0)
 S PSOELIG=$$ELIGDISP^PSOREJP1(RXIEN,PSOFILL)
"RTN","PSOBPSU3",12,0)
 ; Validate the claim.
"RTN","PSOBPSU3",13,0)
 S VALID=$$VAL^BPSPSOU1(RXIEN,PSOFILL,PSOELIG,"RES",.PSOCOB,.REVREAS) ;DBIA #6248
"RTN","PSOBPSU3",14,0)
 I 'VALID G END
"RTN","PSOBPSU3",15,0)
 I $$RXDEL(RXIEN,PSOFILL) D  D PAUSE^VALM1 G END
"RTN","PSOBPSU3",16,0)
 . W !!,"The claim cannot be Resubmitted since it has been deleted in Pharmacy."
"RTN","PSOBPSU3",17,0)
 ; Resubmit the claim to ECME
"RTN","PSOBPSU3",18,0)
 D ECMESND^PSOBPSU1(RXIEN,PSOFILL,,"ED",,,"RESUBMIT FROM RX EDIT SCREEN","","","","","","","",$G(PSOCOB))
"RTN","PSOBPSU3",19,0)
 D PAUSE^VALM1
"RTN","PSOBPSU3",20,0)
 S VALMBCK="R"
"RTN","PSOBPSU3",21,0)
 Q
"RTN","PSOBPSU3",22,0)
 ;
"RTN","PSOBPSU3",23,0)
FILL(RXIEN,DFN,PSOFL) ;
"RTN","PSOBPSU3",24,0)
 N CNT,DIR,FILL,FLDT,PSOELIG,PSOET,PSOSTR,REFILL,RELDT,RF,RXNUM,X,Y
"RTN","PSOBPSU3",25,0)
 D FULL^VALM1
"RTN","PSOBPSU3",26,0)
 I '$G(RXIEN)!'$G(DFN) Q ""
"RTN","PSOBPSU3",27,0)
 ;
"RTN","PSOBPSU3",28,0)
 S RXNUM=$P($G(^PSRX(RXIEN,0)),U)
"RTN","PSOBPSU3",29,0)
 K PSOFL,PSOFLZ
"RTN","PSOBPSU3",30,0)
 ; Get refill dates and release dates
"RTN","PSOBPSU3",31,0)
 S REFILL=0 F  S REFILL=$O(^PSRX(RXIEN,1,REFILL)) Q:'REFILL  D
"RTN","PSOBPSU3",32,0)
 . S FLDT=$P($G(^PSRX(RXIEN,1,REFILL,0)),U)\1
"RTN","PSOBPSU3",33,0)
 . S RELDT=$P($G(^PSRX(RXIEN,1,REFILL,0)),U,18)\1
"RTN","PSOBPSU3",34,0)
 . S PSOFLZ(REFILL)=FLDT_U_RELDT
"RTN","PSOBPSU3",35,0)
 ; Get orignal RX fill date and release date
"RTN","PSOBPSU3",36,0)
 S FLDT=$P($G(^PSRX(RXIEN,2)),U)\1
"RTN","PSOBPSU3",37,0)
 S RELDT=$P($G(^PSRX(RXIEN,2)),U,13)\1
"RTN","PSOBPSU3",38,0)
 S PSOFLZ(0)=FLDT_U_RELDT
"RTN","PSOBPSU3",39,0)
 ; Check for any deleted fills that have ECME activity
"RTN","PSOBPSU3",40,0)
 D RFL^BPSVRX(RXIEN,.PSOFL)  ; DBIA #5723
"RTN","PSOBPSU3",41,0)
 I '$D(PSOFL) Q "" ; Not in BPS transaction file.
"RTN","PSOBPSU3",42,0)
 S RF="" F  S RF=$O(PSOFL(RF)) Q:RF=""  I '$D(PSOFLZ(RF)) S PSOFLZ(RF)=0_U_0
"RTN","PSOBPSU3",43,0)
 ;
"RTN","PSOBPSU3",44,0)
 S DIR(0)="S"
"RTN","PSOBPSU3",45,0)
 S DIR("L",1)="Rx# "_RXNUM_" has the following fills:"
"RTN","PSOBPSU3",46,0)
 S DIR("L",2)=""
"RTN","PSOBPSU3",47,0)
 S DIR("L",3)="    Fill#   Fill Date     Release Date"
"RTN","PSOBPSU3",48,0)
 S DIR("L",4)="    -----   ----------    ------------"
"RTN","PSOBPSU3",49,0)
 S CNT=0,PSOSTR=""
"RTN","PSOBPSU3",50,0)
 S RF="" F  S RF=$O(PSOFLZ(RF)) Q:RF=""  D
"RTN","PSOBPSU3",51,0)
 . S CNT=CNT+1
"RTN","PSOBPSU3",52,0)
 . S FLDT=$$FMTE^XLFDT($P(PSOFLZ(RF),U,1),"5Z") I 'FLDT S FLDT="    -     "
"RTN","PSOBPSU3",53,0)
 . S RELDT=$$FMTE^XLFDT($P(PSOFLZ(RF),U,2),"5Z") I 'RELDT S RELDT="    -     "
"RTN","PSOBPSU3",54,0)
 . I 'FLDT,'RELDT S (FLDT,RELDT)=" Deleted  "
"RTN","PSOBPSU3",55,0)
 . S $P(PSOSTR,";",CNT)=RF_":"_FLDT_"    "_RELDT
"RTN","PSOBPSU3",56,0)
 . S DIR("L",CNT+4)=$J(RF,7)_"     "_FLDT_"    "_RELDT
"RTN","PSOBPSU3",57,0)
 . Q
"RTN","PSOBPSU3",58,0)
 S DIR("L")=" "
"RTN","PSOBPSU3",59,0)
 S $P(DIR(0),U,2)=PSOSTR
"RTN","PSOBPSU3",60,0)
 S DIR("A")="Select Fill Number"
"RTN","PSOBPSU3",61,0)
 S DIR("B")=$O(PSOFLZ(""),-1)
"RTN","PSOBPSU3",62,0)
 I CNT=1 D
"RTN","PSOBPSU3",63,0)
 . S $P(DIR("L",1)," ",$L(DIR("L",1)," "))="fill:"    ; singular
"RTN","PSOBPSU3",64,0)
 . Q
"RTN","PSOBPSU3",65,0)
 W ! D ^DIR K DIR
"RTN","PSOBPSU3",66,0)
 S FILL=Y
"RTN","PSOBPSU3",67,0)
 Q FILL
"RTN","PSOBPSU3",68,0)
 ;
"RTN","PSOBPSU3",69,0)
VER(RXIEN,DFN) ; -- VER hidden action under protocol PSO HIDDEN ACTIONS
"RTN","PSOBPSU3",70,0)
 D FULL^VALM1
"RTN","PSOBPSU3",71,0)
 K ^TMP("PSOHDR_ARCHIVE",$J)
"RTN","PSOBPSU3",72,0)
 M ^TMP("PSOHDR_ARCHIVE",$J)=^TMP("PSOHDR",$J)
"RTN","PSOBPSU3",73,0)
 S BPSVRX("RXIEN")=RXIEN
"RTN","PSOBPSU3",74,0)
 D ^BPSVRX  ;DBIA #5723
"RTN","PSOBPSU3",75,0)
 M ^TMP("PSOHDR",$J)=^TMP("PSOHDR_ARCHIVE",$J)
"RTN","PSOBPSU3",76,0)
 K ^TMP("PSOHDR_ARCHIVE",$J)
"RTN","PSOBPSU3",77,0)
 S VALMBCK="R"
"RTN","PSOBPSU3",78,0)
 Q
"RTN","PSOBPSU3",79,0)
 ;
"RTN","PSOBPSU3",80,0)
REV(RXIEN,DFN) ; Reverse a claim action from PSO HIDDEN ACTIONS
"RTN","PSOBPSU3",81,0)
 N DIRUT,PSOCOB,PSOFILL,PSOFL,PSOFLZ,PSOELIG,REVREAS,VALID
"RTN","PSOBPSU3",82,0)
 S PSOFILL=$$FILL(RXIEN,DFN,.PSOFL)
"RTN","PSOBPSU3",83,0)
 I $D(DIRUT) G END
"RTN","PSOBPSU3",84,0)
 I PSOFILL="" W !!,"No claim was ever submitted for this prescription. Cannot reverse." D PAUSE^VALM1 G END
"RTN","PSOBPSU3",85,0)
 S PSOELIG=$$ELIGDISP^PSOREJP1(RXIEN,PSOFILL)
"RTN","PSOBPSU3",86,0)
 ; Validate the claim.
"RTN","PSOBPSU3",87,0)
 S VALID=$$VAL^BPSPSOU1(RXIEN,PSOFILL,PSOELIG,"REV",.PSOCOB,.REVREAS) ;DBIA #6248
"RTN","PSOBPSU3",88,0)
 I 'VALID G END
"RTN","PSOBPSU3",89,0)
 I $$RXDEL(RXIEN,PSOFILL) D  D PAUSE^VALM1 G END
"RTN","PSOBPSU3",90,0)
 . W !!,"The claim cannot be Reversed since it has been deleted in Pharmacy."
"RTN","PSOBPSU3",91,0)
 ; Submit the reversal to ECME
"RTN","PSOBPSU3",92,0)
 D ECMESND^PSOBPSU1(RXIEN,PSOFILL,"","OREV","","",REVREAS,"","","","","","","",$G(PSOCOB))
"RTN","PSOBPSU3",93,0)
 D PAUSE^VALM1
"RTN","PSOBPSU3",94,0)
 S VALMBCK="R"
"RTN","PSOBPSU3",95,0)
 Q
"RTN","PSOBPSU3",96,0)
 ;
"RTN","PSOBPSU3",97,0)
RXDEL(RXIEN,PSOFILL) ; EP - $$ is RX deleted?
"RTN","PSOBPSU3",98,0)
 ; For refills:  if the refill multiple is gone, it's been "deleted"
"RTN","PSOBPSU3",99,0)
 I $G(PSOFILL),'$P($G(^PSRX(RXIEN,1,PSOFILL,0)),U) Q 1
"RTN","PSOBPSU3",100,0)
 ; For first fill: look at the STATUS flag
"RTN","PSOBPSU3",101,0)
 I $P($G(^PSRX(RXIEN,0)),U,1)="" Q 1 ; shouldn't be missing but is
"RTN","PSOBPSU3",102,0)
 N X S X=$P($G(^PSRX(RXIEN,"STA")),U,1)
"RTN","PSOBPSU3",103,0)
 Q X=13 ; if status is DELETED
"RTN","PSOBPSU3",104,0)
 ;
"RTN","PSOBPSU3",105,0)
END ;
"RTN","PSOBPSU3",106,0)
 S VALMBCK="R"
"RTN","PSOBPSU3",107,0)
 Q
"RTN","PSOPROD1")
0^13^B163837671
"RTN","PSOPROD1",1,0)
PSOPROD1 ;ALB/MRD - Pharmacy Productivity and Revenue Report ;9/8/15
"RTN","PSOPROD1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**448**;DEC 1997;Build 25
"RTN","PSOPROD1",3,0)
 ;Reference to File 9002313.93 - BPS NCPDP REJECT CODES supported by IA 4720
"RTN","PSOPROD1",4,0)
 ;
"RTN","PSOPROD1",5,0)
 Q
"RTN","PSOPROD1",6,0)
 ;
"RTN","PSOPROD1",7,0)
EN ; Main entry point for user prompts.
"RTN","PSOPROD1",8,0)
 ;
"RTN","PSOPROD1",9,0)
 W @IOF,!,"Pharmacy Productivity/Revenue Report",!!
"RTN","PSOPROD1",10,0)
 ;
"RTN","PSOPROD1",11,0)
 N PSODIV,PSODTBEGIN,PSODTEND,PSOEXCEL,PSOINCLUDE,PSOREPORT,PSOSHOWPAT,PSOSORT,PSOSTATUS
"RTN","PSOPROD1",12,0)
 ;
"RTN","PSOPROD1",13,0)
P1 I '$$DIVISION(.PSODIV) G EXIT
"RTN","PSOPROD1",14,0)
P2 I '$$REPORT(.PSOREPORT) G EXIT:$$STOP,P1
"RTN","PSOPROD1",15,0)
P3 I PSOREPORT="P" S PSOSTATUS="B",PSOSTATUS(0)="" G P4
"RTN","PSOPROD1",16,0)
 I '$$STATUS(.PSOSTATUS) G EXIT:$$STOP,P2
"RTN","PSOPROD1",17,0)
P4 I '$$DATES(.PSODTBEGIN,.PSODTEND) G EXIT:$$STOP,P2:PSOREPORT="P",P3
"RTN","PSOPROD1",18,0)
P5 I '$$INCLUDE(.PSOINCLUDE) G EXIT:$$STOP,P4
"RTN","PSOPROD1",19,0)
P6 I '$$SORT(.PSOSORT) G EXIT:$$STOP,P5
"RTN","PSOPROD1",20,0)
P7 I '$$PATIENT(.PSOSHOWPAT) G EXIT:$$STOP,P6
"RTN","PSOPROD1",21,0)
P8 I '$$EXCEL(.PSOEXCEL) G EXIT:$$STOP,P7
"RTN","PSOPROD1",22,0)
 I '$$DEVICE() G EXIT:$$STOP,P8
"RTN","PSOPROD1",23,0)
 ;
"RTN","PSOPROD1",24,0)
EXIT ; Exit point.
"RTN","PSOPROD1",25,0)
 Q
"RTN","PSOPROD1",26,0)
 ;
"RTN","PSOPROD1",27,0)
STOP() ; Determine if user wishes to exit out of the option entirely.
"RTN","PSOPROD1",28,0)
 ; Function return values:
"RTN","PSOPROD1",29,0)
 ;   1 - Yes, exit entirely.
"RTN","PSOPROD1",30,0)
 ;   0 - No, do not exit but return to the previous question.
"RTN","PSOPROD1",31,0)
 ;
"RTN","PSOPROD1",32,0)
 N DIR,DIRUT,Y
"RTN","PSOPROD1",33,0)
 ;
"RTN","PSOPROD1",34,0)
 S DIR(0)="Y"
"RTN","PSOPROD1",35,0)
 S DIR("A")="Do you want to exit out of this option entirely"
"RTN","PSOPROD1",36,0)
 S DIR("B")="YES"
"RTN","PSOPROD1",37,0)
 S DIR("?",1)="  Enter YES to immediately exit out of this option."
"RTN","PSOPROD1",38,0)
 S DIR("?")="  Enter NO to return to the previous question."
"RTN","PSOPROD1",39,0)
 W !
"RTN","PSOPROD1",40,0)
 D ^DIR
"RTN","PSOPROD1",41,0)
 I $D(DIRUT) S Y=1
"RTN","PSOPROD1",42,0)
 Q Y
"RTN","PSOPROD1",43,0)
 ;
"RTN","PSOPROD1",44,0)
DIVISION(PSODIV) ; Allow user to select Divisions or All Divisions.
"RTN","PSOPROD1",45,0)
 ; Input: None.
"RTN","PSOPROD1",46,0)
 ; Output: PSODIV
"RTN","PSOPROD1",47,0)
 ;   PSODIV = "ALL" if the user opted to include all divisions.
"RTN","PSOPROD1",48,0)
 ;   PSODIV = "D" if the user selected specific division.  If that is
"RTN","PSOPROD1",49,0)
 ;       the case, the selected pharmacies will be listed in PSODIV:
"RTN","PSOPROD1",50,0)
 ;       PSODIV(IEN) = Division name, where IEN is a pointer to file#
"RTN","PSOPROD1",51,0)
 ;       59, Outpatient Site.
"RTN","PSOPROD1",52,0)
 ; Function return values:
"RTN","PSOPROD1",53,0)
 ;   1 - A valid entry or entries were selected.
"RTN","PSOPROD1",54,0)
 ;   0 - User has exited out (^).
"RTN","PSOPROD1",55,0)
 ;
"RTN","PSOPROD1",56,0)
 N DIC,DIR,DIROUT,DIRUT,X,Y,Z
"RTN","PSOPROD1",57,0)
 ;
"RTN","PSOPROD1",58,0)
 ; Allow user to indicate that all divisions should be included or
"RTN","PSOPROD1",59,0)
 ; that they wish to enter specific divisions.
"RTN","PSOPROD1",60,0)
 ;
"RTN","PSOPROD1",61,0)
 S DIR(0)="S^D:DIVISION;A:ALL"
"RTN","PSOPROD1",62,0)
 S DIR("A")="Select Pharmacy (D)ivisions or (A)LL"
"RTN","PSOPROD1",63,0)
 I $G(PSODIV)'="" S DIR("B")=$S(PSODIV="ALL":"ALL",1:"D")
"RTN","PSOPROD1",64,0)
 D ^DIR
"RTN","PSOPROD1",65,0)
 I $D(DIRUT) W $C(7) Q 0
"RTN","PSOPROD1",66,0)
 ;
"RTN","PSOPROD1",67,0)
 ; If user selected all divisions, Quit with 1.
"RTN","PSOPROD1",68,0)
 ;
"RTN","PSOPROD1",69,0)
 I Y="A" K PSODIV S PSODIV="ALL" Q 1
"RTN","PSOPROD1",70,0)
 ;
"RTN","PSOPROD1",71,0)
 ; Allow user to enter multiple specific divisions.
"RTN","PSOPROD1",72,0)
 ;
"RTN","PSOPROD1",73,0)
 F  D  I Y=0 Q
"RTN","PSOPROD1",74,0)
 . ;
"RTN","PSOPROD1",75,0)
 . ; Display the list of divisions selected.
"RTN","PSOPROD1",76,0)
 . ;
"RTN","PSOPROD1",77,0)
 . I $D(PSODIV)>9 D
"RTN","PSOPROD1",78,0)
 . . W !!?2,"Selected:"
"RTN","PSOPROD1",79,0)
 . . S X="" F  S X=$O(PSODIV(X)) Q:X=""  W !,?10,PSODIV(X)
"RTN","PSOPROD1",80,0)
 . . Q
"RTN","PSOPROD1",81,0)
 . ;
"RTN","PSOPROD1",82,0)
 . K DIC
"RTN","PSOPROD1",83,0)
 . S DIC=59
"RTN","PSOPROD1",84,0)
 . S DIC(0)="QEAM"
"RTN","PSOPROD1",85,0)
 . S DIC("A")="Select Pharmacy Division(s): "
"RTN","PSOPROD1",86,0)
 . W !
"RTN","PSOPROD1",87,0)
 . D ^DIC
"RTN","PSOPROD1",88,0)
 . ;
"RTN","PSOPROD1",89,0)
 . ; If "^" or timeout, clear array and Quit out.
"RTN","PSOPROD1",90,0)
 . ;
"RTN","PSOPROD1",91,0)
 . I $D(DIRUT) K PSODIV S PSODIV="",Y=0 W $C(7) Q
"RTN","PSOPROD1",92,0)
 . ;
"RTN","PSOPROD1",93,0)
 . ; If blank entry, conditionally clear out array and then Quit out.
"RTN","PSOPROD1",94,0)
 . ;
"RTN","PSOPROD1",95,0)
 . I $G(X)="" S Y=0 Q
"RTN","PSOPROD1",96,0)
 . ;
"RTN","PSOPROD1",97,0)
 . ; At this point, the user entered a division.  If it is already on the
"RTN","PSOPROD1",98,0)
 . ; list, allow user to delete from the list.  Otherwise, add to the list.
"RTN","PSOPROD1",99,0)
 . ;
"RTN","PSOPROD1",100,0)
 . I $D(PSODIV(+Y)) D
"RTN","PSOPROD1",101,0)
 . . ;
"RTN","PSOPROD1",102,0)
 . . ; Allow user to delete an entry already on the list.
"RTN","PSOPROD1",103,0)
 . . ;
"RTN","PSOPROD1",104,0)
 . . S Z=Y  ; Need to save the original value in case we delete from the list.
"RTN","PSOPROD1",105,0)
 . . K DIR
"RTN","PSOPROD1",106,0)
 . . S DIR(0)="S^Y:YES;N:NO",DIR("A")="Delete "_$P(Z,U,2)_" from your list?"
"RTN","PSOPROD1",107,0)
 . . S DIR("B")="NO"
"RTN","PSOPROD1",108,0)
 . . D ^DIR
"RTN","PSOPROD1",109,0)
 . . I $D(DIROUT) K PSODIV S PSODIV="",Y=0 W $C(7) Q
"RTN","PSOPROD1",110,0)
 . . I Y="Y" K PSODIV(+Z)
"RTN","PSOPROD1",111,0)
 . . Q
"RTN","PSOPROD1",112,0)
 . E  D
"RTN","PSOPROD1",113,0)
 . . ;
"RTN","PSOPROD1",114,0)
 . . ; Add the new entry to the PSODIV array.
"RTN","PSOPROD1",115,0)
 . . ;
"RTN","PSOPROD1",116,0)
 . . S PSODIV(+Y)=$P(Y,U,2)
"RTN","PSOPROD1",117,0)
 . . Q
"RTN","PSOPROD1",118,0)
 . Q
"RTN","PSOPROD1",119,0)
 ;
"RTN","PSOPROD1",120,0)
 I $D(PSODIV)<10 K PSODIV Q 0
"RTN","PSOPROD1",121,0)
 ;
"RTN","PSOPROD1",122,0)
 ; Display the list of divisions selected.  Build the string of
"RTN","PSOPROD1",123,0)
 ; selected divisions to display on report header.
"RTN","PSOPROD1",124,0)
 ;
"RTN","PSOPROD1",125,0)
 W !!?2,"Selected:"
"RTN","PSOPROD1",126,0)
 S X="" F  S X=$O(PSODIV(X)) Q:X=""  W !,?10,PSODIV(X)
"RTN","PSOPROD1",127,0)
 S PSODIV="",PSOX=""
"RTN","PSOPROD1",128,0)
 F  S PSOX=$O(PSODIV(PSOX)) Q:PSOX=""  D
"RTN","PSOPROD1",129,0)
 . I PSODIV'="" S PSODIV=PSODIV_", "
"RTN","PSOPROD1",130,0)
 . S PSODIV=PSODIV_PSODIV(PSOX)
"RTN","PSOPROD1",131,0)
 . Q
"RTN","PSOPROD1",132,0)
 ;
"RTN","PSOPROD1",133,0)
 Q 1
"RTN","PSOPROD1",134,0)
 ;
"RTN","PSOPROD1",135,0)
REPORT(PSOREPORT) ; Allow user to select report to run (Productivity or Revenue).
"RTN","PSOPROD1",136,0)
 ; Input: None.
"RTN","PSOPROD1",137,0)
 ; Output: PSOREPORT, set to one of the following.
"RTN","PSOPROD1",138,0)
 ;   PSOREPORT = "" if no selection was made.
"RTN","PSOPROD1",139,0)
 ;   PSOREPORT = "R" if user selected the RRR Revenue report.
"RTN","PSOPROD1",140,0)
 ;   PSOREPORT = "P" if user selected the Productivity Report.
"RTN","PSOPROD1",141,0)
 ; Function return values:
"RTN","PSOPROD1",142,0)
 ;   1 - The user selected one of the two reports.
"RTN","PSOPROD1",143,0)
 ;   0 - The user exited out.
"RTN","PSOPROD1",144,0)
 ;
"RTN","PSOPROD1",145,0)
 N DIR,DIRUT,Y
"RTN","PSOPROD1",146,0)
 ;
"RTN","PSOPROD1",147,0)
 S DIR(0)="S^R:RRR Revenue;P:Productivity"
"RTN","PSOPROD1",148,0)
 S DIR("A")="Select (R)RR Revenue or (P)roductivity Report"
"RTN","PSOPROD1",149,0)
 I $G(PSOREPORT)'="" S DIR("B")=PSOREPORT
"RTN","PSOPROD1",150,0)
 S DIR("?",1)="Enter a code from the list to indicate the type of report to run."
"RTN","PSOPROD1",151,0)
 S DIR("?",2)="     Select one of the following:"
"RTN","PSOPROD1",152,0)
 S DIR("?",3)="          R         RRR Revenue"
"RTN","PSOPROD1",153,0)
 S DIR("?",4)="          Includes: All fills for a prescription with a resolved RRR reject"
"RTN","PSOPROD1",154,0)
 S DIR("?",5)="                    and associated revenue"
"RTN","PSOPROD1",155,0)
 S DIR("?",6)="          P         Productivity"
"RTN","PSOPROD1",156,0)
 S DIR("?",7)="          Includes: Reports only on rejects for the original fills or refills"
"RTN","PSOPROD1",157,0)
 S DIR("?")="                    from the Pharmacy Worklist"
"RTN","PSOPROD1",158,0)
 D ^DIR
"RTN","PSOPROD1",159,0)
 I $D(DIRUT) W $C(7) Q 0
"RTN","PSOPROD1",160,0)
 S PSOREPORT=Y
"RTN","PSOPROD1",161,0)
 Q 1
"RTN","PSOPROD1",162,0)
 ;
"RTN","PSOPROD1",163,0)
STATUS(PSOSTATUS) ; Allow user to select statuses to include in report.
"RTN","PSOPROD1",164,0)
 ; Input: None.
"RTN","PSOPROD1",165,0)
 ; Output: PSOSTATUS, set to one of the following.
"RTN","PSOPROD1",166,0)
 ;   PSOSTATUS = "" if no selection was made.
"RTN","PSOPROD1",167,0)
 ;   PSOSTATUS = "P" if user selected Closed/Resolved - ePayable.
"RTN","PSOPROD1",168,0)
 ;   PSOSTATUS = "R" if user selected Closed/Resolved - eRejected.
"RTN","PSOPROD1",169,0)
 ;   PSOSTATUS = "B" if users opted to include both of the above.
"RTN","PSOPROD1",170,0)
 ;   PSOSTATUS(0) = String to display on report header.
"RTN","PSOPROD1",171,0)
 ; Function return values:
"RTN","PSOPROD1",172,0)
 ;   1 - A valid selection was made.
"RTN","PSOPROD1",173,0)
 ;   0 - The user exited out.
"RTN","PSOPROD1",174,0)
 ;
"RTN","PSOPROD1",175,0)
 N DIR,DIRUT,Y
"RTN","PSOPROD1",176,0)
 ;
"RTN","PSOPROD1",177,0)
 S DIR(0)="S^P:CLOSED/RESOLVED - E PAYABLE;R:CLOSED/RESOLVED - E REJECTED;B:BOTH"
"RTN","PSOPROD1",178,0)
 S DIR("A")="Select (P) Closed/Resolved - ePAYABLE, (R) Closed/Resolved - eREJECTED, (B)oth"
"RTN","PSOPROD1",179,0)
 I $G(PSOSTATUS)'="" S DIR("B")=PSOSTATUS
"RTN","PSOPROD1",180,0)
 E  S DIR("B")="B"
"RTN","PSOPROD1",181,0)
 S DIR("L",1)="     Select Status:"
"RTN","PSOPROD1",182,0)
 S DIR("L",2)=""
"RTN","PSOPROD1",183,0)
 S DIR("L",3)="          P         CLOSED/RESOLVED - E PAYABLE"
"RTN","PSOPROD1",184,0)
 S DIR("L",4)="          R         CLOSED/RESOLVED - E REJECTED"
"RTN","PSOPROD1",185,0)
 S DIR("L")="          B         BOTH"
"RTN","PSOPROD1",186,0)
 D ^DIR
"RTN","PSOPROD1",187,0)
 I $D(DIRUT) W $C(7) Q 0
"RTN","PSOPROD1",188,0)
 ;
"RTN","PSOPROD1",189,0)
 S PSOSTATUS=Y
"RTN","PSOPROD1",190,0)
 S PSOSTATUS(0)=Y(0)
"RTN","PSOPROD1",191,0)
 I PSOSTATUS="B" S PSOSTATUS(0)="CLOSED/RESOLVED - E PAYABLE, E REJECTED"
"RTN","PSOPROD1",192,0)
 ;
"RTN","PSOPROD1",193,0)
 Q 1
"RTN","PSOPROD1",194,0)
 ;
"RTN","PSOPROD1",195,0)
DATES(PSODTBEGIN,PSODTEND) ; Prompt user for a date range.
"RTN","PSOPROD1",196,0)
 ; Function return values:
"RTN","PSOPROD1",197,0)
 ;   1 - A valid date range was entered.
"RTN","PSOPROD1",198,0)
 ;   0 - A valid date range was not entered.
"RTN","PSOPROD1",199,0)
 ;
"RTN","PSOPROD1",200,0)
 N DIR,DIRUT,Y
"RTN","PSOPROD1",201,0)
 ;
"RTN","PSOPROD1",202,0)
 S DIR(0)="D^:DT:EX"
"RTN","PSOPROD1",203,0)
 S DIR("A")="Begin Date Resolved"
"RTN","PSOPROD1",204,0)
 I $G(PSODTBEGIN)'="" S DIR("B")=$$FMTE^XLFDT(PSODTBEGIN,2)
"RTN","PSOPROD1",205,0)
 E  S DIR("B")="T-90"
"RTN","PSOPROD1",206,0)
 S DIR("?",1)="The start and end dates for this report refer to"
"RTN","PSOPROD1",207,0)
 S DIR("?")="the date that the rejects were resolved."
"RTN","PSOPROD1",208,0)
 W !
"RTN","PSOPROD1",209,0)
 D ^DIR
"RTN","PSOPROD1",210,0)
 I $D(DIRUT)!'Y W $C(7) Q 0
"RTN","PSOPROD1",211,0)
 S PSODTBEGIN=Y
"RTN","PSOPROD1",212,0)
 ;
"RTN","PSOPROD1",213,0)
 K DIR
"RTN","PSOPROD1",214,0)
 S DIR(0)="D^"_PSODTBEGIN_":DT:EX"
"RTN","PSOPROD1",215,0)
 S DIR("A")="End Date Resolved"
"RTN","PSOPROD1",216,0)
 I $G(PSODTEND)'="" S DIR("B")=$$FMTE^XLFDT(PSODTEND,2)
"RTN","PSOPROD1",217,0)
 E  S DIR("B")="T"
"RTN","PSOPROD1",218,0)
 S DIR("?",1)="The start and end dates for this report refer to"
"RTN","PSOPROD1",219,0)
 S DIR("?")="the date that the rejects were resolved."
"RTN","PSOPROD1",220,0)
 W !
"RTN","PSOPROD1",221,0)
 D ^DIR
"RTN","PSOPROD1",222,0)
 I $D(DIRUT)!'Y W $C(7) Q 0
"RTN","PSOPROD1",223,0)
 S PSODTEND=Y
"RTN","PSOPROD1",224,0)
 Q 1
"RTN","PSOPROD1",225,0)
 ;
"RTN","PSOPROD1",226,0)
INCLUDE(PSOINCLUDE) ; Allow user to enter specific Patients, Drugs, etc., to include.
"RTN","PSOPROD1",227,0)
 ; Input: None.
"RTN","PSOPROD1",228,0)
 ; Output:
"RTN","PSOPROD1",229,0)
 ;   PSOINCLUDE, set to PATIENT, DRUG, RX, INSURANCE or REJECT CODE.
"RTN","PSOPROD1",230,0)
 ;   For the field selected by the user to include-by, the list of
"RTN","PSOPROD1",231,0)
 ;   entries to include will be at PSOINCLUDE(include-by,value)="",
"RTN","PSOPROD1",232,0)
 ;   for example PSOINCLUDE("RX",12345)="" to include RxIEN 12345.
"RTN","PSOPROD1",233,0)
 ;   All are defaulted to "ALL", e.g. PSOINCLUDE("RX")="ALL", and
"RTN","PSOPROD1",234,0)
 ;   only the one selected by the user may be reset to be a string
"RTN","PSOPROD1",235,0)
 ;   being a list of the external values of the items selected.
"RTN","PSOPROD1",236,0)
 ; Function return values:
"RTN","PSOPROD1",237,0)
 ;   1 - A valid selection was made.
"RTN","PSOPROD1",238,0)
 ;   0 - The user exited out.
"RTN","PSOPROD1",239,0)
 ;
"RTN","PSOPROD1",240,0)
 N DIR,DIRUT,PSOARRAY,PSOX,Y
"RTN","PSOPROD1",241,0)
INC ;
"RTN","PSOPROD1",242,0)
 S DIR(0)="S^P:Patient;D:Drug;R:Rx;I:Insurance;C:Reject Code"
"RTN","PSOPROD1",243,0)
 S DIR("A")="By (P)atient, (D)rug, (R)x, (I)nsurance or Reject (C)ode"
"RTN","PSOPROD1",244,0)
 I $G(PSOINCLUDE)'="" S DIR("B")=PSOINCLUDE
"RTN","PSOPROD1",245,0)
 E  S DIR("B")="P"
"RTN","PSOPROD1",246,0)
 D ^DIR
"RTN","PSOPROD1",247,0)
 I $D(DIRUT) W $C(7) Q 0
"RTN","PSOPROD1",248,0)
 ;
"RTN","PSOPROD1",249,0)
 ; Set PSOINCLUDE to the sort selected by the user.
"RTN","PSOPROD1",250,0)
 ;
"RTN","PSOPROD1",251,0)
 K PSOINCLUDE
"RTN","PSOPROD1",252,0)
 S PSOINCLUDE=$$UP^XLFSTR(Y(0))
"RTN","PSOPROD1",253,0)
 S PSOINCLUDE("PATIENT")="ALL"
"RTN","PSOPROD1",254,0)
 S PSOINCLUDE("DRUG")="ALL"
"RTN","PSOPROD1",255,0)
 S PSOINCLUDE("RX")="ALL"
"RTN","PSOPROD1",256,0)
 S PSOINCLUDE("INSURANCE")="ALL"
"RTN","PSOPROD1",257,0)
 S PSOINCLUDE("REJECT CODE")="ALL"
"RTN","PSOPROD1",258,0)
 ;
"RTN","PSOPROD1",259,0)
 ; Allow user to select which Patients to include.
"RTN","PSOPROD1",260,0)
 ;
"RTN","PSOPROD1",261,0)
 I PSOINCLUDE="PATIENT" D  I $G(PSOARRAY)="^" G INC
"RTN","PSOPROD1",262,0)
 . S PSOINCLUDE("PATIENT")=""
"RTN","PSOPROD1",263,0)
 . D SEL^PSOREJU1("PATIENT","^DPT(",.PSOARRAY)
"RTN","PSOPROD1",264,0)
 . I $G(PSOARRAY)="^" Q
"RTN","PSOPROD1",265,0)
 . M PSOINCLUDE("PATIENT")=PSOARRAY
"RTN","PSOPROD1",266,0)
 . S PSOX=""
"RTN","PSOPROD1",267,0)
 . F  S PSOX=$O(PSOINCLUDE("PATIENT",PSOX)) Q:PSOX=""  D
"RTN","PSOPROD1",268,0)
 . . I PSOINCLUDE("PATIENT")'="" S PSOINCLUDE("PATIENT")=PSOINCLUDE("PATIENT")_"; "
"RTN","PSOPROD1",269,0)
 . . S PSOINCLUDE("PATIENT")=PSOINCLUDE("PATIENT")_$$GET1^DIQ(2,PSOX,.01)
"RTN","PSOPROD1",270,0)
 . . Q
"RTN","PSOPROD1",271,0)
 . Q
"RTN","PSOPROD1",272,0)
 ;
"RTN","PSOPROD1",273,0)
 ; Allow user to select which Drugs to include.
"RTN","PSOPROD1",274,0)
 ;
"RTN","PSOPROD1",275,0)
 I PSOINCLUDE="DRUG" D  I $G(PSOARRAY)="^" G INC
"RTN","PSOPROD1",276,0)
 . S PSOINCLUDE("DRUG")=""
"RTN","PSOPROD1",277,0)
 . D SEL^PSOREJU1("DRUG","^PSDRUG(",.PSOARRAY)
"RTN","PSOPROD1",278,0)
 . I $G(PSOARRAY)="^" Q
"RTN","PSOPROD1",279,0)
 . M PSOINCLUDE("DRUG")=PSOARRAY
"RTN","PSOPROD1",280,0)
 . S PSOX=""
"RTN","PSOPROD1",281,0)
 . F  S PSOX=$O(PSOINCLUDE("DRUG",PSOX)) Q:PSOX=""  D
"RTN","PSOPROD1",282,0)
 . . I PSOINCLUDE("DRUG")'="" S PSOINCLUDE("DRUG")=PSOINCLUDE("DRUG")_", "
"RTN","PSOPROD1",283,0)
 . . S PSOINCLUDE("DRUG")=PSOINCLUDE("DRUG")_$$GET1^DIQ(50,PSOX,.01)
"RTN","PSOPROD1",284,0)
 . . Q
"RTN","PSOPROD1",285,0)
 . Q
"RTN","PSOPROD1",286,0)
 ;
"RTN","PSOPROD1",287,0)
 ; Allow user to select which Rx's to include.
"RTN","PSOPROD1",288,0)
 ;
"RTN","PSOPROD1",289,0)
 I PSOINCLUDE="RX" D  I $G(PSOARRAY)="^" G INC
"RTN","PSOPROD1",290,0)
 . S PSOINCLUDE("RX")=""
"RTN","PSOPROD1",291,0)
 . D SEL^PSOREJU1("PRESCRIPTION","^PSRX(",.PSOARRAY)
"RTN","PSOPROD1",292,0)
 . I $G(PSOARRAY)="^" Q
"RTN","PSOPROD1",293,0)
 . M PSOINCLUDE("RX")=PSOARRAY
"RTN","PSOPROD1",294,0)
 . S PSOX=""
"RTN","PSOPROD1",295,0)
 . F  S PSOX=$O(PSOINCLUDE("RX",PSOX)) Q:PSOX=""  D
"RTN","PSOPROD1",296,0)
 . . I PSOINCLUDE("RX")'="" S PSOINCLUDE("RX")=PSOINCLUDE("RX")_", "
"RTN","PSOPROD1",297,0)
 . . S PSOINCLUDE("RX")=PSOINCLUDE("RX")_$$GET1^DIQ(52,PSOX,.01)
"RTN","PSOPROD1",298,0)
 . . Q
"RTN","PSOPROD1",299,0)
 . Q
"RTN","PSOPROD1",300,0)
 ;
"RTN","PSOPROD1",301,0)
 ; Allow user to select which Insurances to include.
"RTN","PSOPROD1",302,0)
 ;
"RTN","PSOPROD1",303,0)
 I PSOINCLUDE="INSURANCE" D  I $G(PSOARRAY)="^" G INC
"RTN","PSOPROD1",304,0)
 . S PSOINCLUDE("INSURANCE")=""
"RTN","PSOPROD1",305,0)
 . D SEL^PSOREJU1("INSURANCE","^DIC(36,",.PSOARRAY)
"RTN","PSOPROD1",306,0)
 . I $G(PSOARRAY)="^" Q
"RTN","PSOPROD1",307,0)
 . M PSOINCLUDE("INSURANCE")=PSOARRAY
"RTN","PSOPROD1",308,0)
 . S PSOX=""
"RTN","PSOPROD1",309,0)
 . F  S PSOX=$O(PSOINCLUDE("INSURANCE",PSOX)) Q:PSOX=""  D
"RTN","PSOPROD1",310,0)
 . . I PSOINCLUDE("INSURANCE")'="" S PSOINCLUDE("INSURANCE")=PSOINCLUDE("INSURANCE")_", "
"RTN","PSOPROD1",311,0)
 . . S PSOINCLUDE("INSURANCE")=PSOINCLUDE("INSURANCE")_$$GET1^DIQ(36,PSOX,.01)
"RTN","PSOPROD1",312,0)
 . . Q
"RTN","PSOPROD1",313,0)
 . Q
"RTN","PSOPROD1",314,0)
 ;
"RTN","PSOPROD1",315,0)
 ; Allow user to select which Reject Codes to include.
"RTN","PSOPROD1",316,0)
 ;
"RTN","PSOPROD1",317,0)
 I PSOINCLUDE="REJECT CODE" D  I $G(PSOARRAY)="^" G INC
"RTN","PSOPROD1",318,0)
 . S PSOINCLUDE("REJECT CODE")=""
"RTN","PSOPROD1",319,0)
 . D SEL^PSOREJU1("REJECT CODE","^BPSF(9002313.93,",.PSOARRAY)  ; IA 4720.
"RTN","PSOPROD1",320,0)
 . I $G(PSOARRAY)="^" Q
"RTN","PSOPROD1",321,0)
 . M PSOINCLUDE("REJECT CODE")=PSOARRAY
"RTN","PSOPROD1",322,0)
 . S PSOX=""
"RTN","PSOPROD1",323,0)
 . F  S PSOX=$O(PSOINCLUDE("REJECT CODE",PSOX)) Q:PSOX=""  D
"RTN","PSOPROD1",324,0)
 . . I PSOINCLUDE("REJECT CODE")'="" S PSOINCLUDE("REJECT CODE")=PSOINCLUDE("REJECT CODE")_", "
"RTN","PSOPROD1",325,0)
 . . S PSOINCLUDE("REJECT CODE")=PSOINCLUDE("REJECT CODE")_$$GET1^DIQ(9002313.93,PSOX,.01)_" - "_$$GET1^DIQ(9002313.93,PSOX,.02)  ; IA 4720.
"RTN","PSOPROD1",326,0)
 . . Q
"RTN","PSOPROD1",327,0)
 . Q
"RTN","PSOPROD1",328,0)
 ;
"RTN","PSOPROD1",329,0)
 I PSOINCLUDE="" K PSOINCLUDE Q 0
"RTN","PSOPROD1",330,0)
 Q 1
"RTN","PSOPROD1",331,0)
 ;
"RTN","PSOPROD1",332,0)
SORT(PSOSORT) ; Prompt user for the sort order.
"RTN","PSOPROD1",333,0)
 ; Input: None.
"RTN","PSOPROD1",334,0)
 ; Output: PSOSORT, set to one of the following.
"RTN","PSOPROD1",335,0)
 ;   PSOSORT = "" if no selection was made.
"RTN","PSOPROD1",336,0)
 ;   PSOSORT = "D" if user selected Division.
"RTN","PSOPROD1",337,0)
 ;   PSOSORT = "R" if user selected Date Resolved.
"RTN","PSOPROD1",338,0)
 ;   PSOSORT = "B" if user selected Resolved By.
"RTN","PSOPROD1",339,0)
 ;   PSOSORT = "N" if user selected Drug Name.
"RTN","PSOPROD1",340,0)
 ;   PSOSORT = "C" if user selected Reject Code.
"RTN","PSOPROD1",341,0)
 ; Function return values:
"RTN","PSOPROD1",342,0)
 ;   1 - A valid selection was made.
"RTN","PSOPROD1",343,0)
 ;   0 - The user exited out.
"RTN","PSOPROD1",344,0)
 ;
"RTN","PSOPROD1",345,0)
 N DIR,DIRUT,Y
"RTN","PSOPROD1",346,0)
 ;
"RTN","PSOPROD1",347,0)
 S DIR(0)="S^D:Division;R:Date Resolved;B:Resolved By;N:Drug Name;C:Reject Code"
"RTN","PSOPROD1",348,0)
 S DIR("A")="Sort"
"RTN","PSOPROD1",349,0)
 I $G(PSOSORT)'="" S DIR("B")=PSOSORT
"RTN","PSOPROD1",350,0)
 E  S DIR("B")="Division"
"RTN","PSOPROD1",351,0)
 S DIR("L",1)="Enter a code from the list to indicate the sort order."
"RTN","PSOPROD1",352,0)
 S DIR("L",2)="     Select one of the following:"
"RTN","PSOPROD1",353,0)
 S DIR("L",3)=""
"RTN","PSOPROD1",354,0)
 S DIR("L",4)="          D         Division"
"RTN","PSOPROD1",355,0)
 S DIR("L",5)="          R         Date Resolved"
"RTN","PSOPROD1",356,0)
 S DIR("L",6)="          B         Resolved By"
"RTN","PSOPROD1",357,0)
 S DIR("L",7)="          N         Drug Name"
"RTN","PSOPROD1",358,0)
 S DIR("L")="          C         Reject Code"
"RTN","PSOPROD1",359,0)
 D ^DIR
"RTN","PSOPROD1",360,0)
 I $D(DIRUT) W $C(7) Q 0
"RTN","PSOPROD1",361,0)
 S PSOSORT=Y,PSOSORT(0)=$$UP^XLFSTR(Y(0))
"RTN","PSOPROD1",362,0)
 Q 1
"RTN","PSOPROD1",363,0)
 ;
"RTN","PSOPROD1",364,0)
PATIENT(PSOSHOWPAT) ; Display Patient Name on report?
"RTN","PSOPROD1",365,0)
 ; Input: None.
"RTN","PSOPROD1",366,0)
 ; Output: PSOSHOWPAT, set to one of the following.
"RTN","PSOPROD1",367,0)
 ;   1 - Yes, display Patient Name on the report.
"RTN","PSOPROD1",368,0)
 ;   0 - No, do not display the Patient Name.
"RTN","PSOPROD1",369,0)
 ;       * Note: The Patient Name will always be displayed if the user
"RTN","PSOPROD1",370,0)
 ;         requests output in Excel format.
"RTN","PSOPROD1",371,0)
 ; Function return values:
"RTN","PSOPROD1",372,0)
 ;   1 - User answered the Y/N question.
"RTN","PSOPROD1",373,0)
 ;   0 - User exited out.
"RTN","PSOPROD1",374,0)
 ;
"RTN","PSOPROD1",375,0)
 N DIR,DIRUT
"RTN","PSOPROD1",376,0)
 ;
"RTN","PSOPROD1",377,0)
 S DIR(0)="Y"
"RTN","PSOPROD1",378,0)
 S DIR("A")="Show PATIENT NAME (Y/N)"
"RTN","PSOPROD1",379,0)
 I $G(PSOSHOWPAT)=1 S DIR("B")="YES"
"RTN","PSOPROD1",380,0)
 E  S DIR("B")="NO"
"RTN","PSOPROD1",381,0)
 W !
"RTN","PSOPROD1",382,0)
 D ^DIR
"RTN","PSOPROD1",383,0)
 I $D(DIRUT) W $C(7) Q 0
"RTN","PSOPROD1",384,0)
 S PSOSHOWPAT=Y
"RTN","PSOPROD1",385,0)
 Q 1
"RTN","PSOPROD1",386,0)
 ;
"RTN","PSOPROD1",387,0)
EXCEL(PSOEXCEL) ; Export the report to MS Excel?
"RTN","PSOPROD1",388,0)
 ; Function return values:
"RTN","PSOPROD1",389,0)
 ;   1 - User made a valid selection.
"RTN","PSOPROD1",390,0)
 ;   0 - User exited out.
"RTN","PSOPROD1",391,0)
 ; This function allows the user to indicate whether the report should be
"RTN","PSOPROD1",392,0)
 ; printed in a format that could easily be imported into an Excel
"RTN","PSOPROD1",393,0)
 ; spreadsheet.  If the user wants that, the variable PSOEXCEL will be set
"RTN","PSOPROD1",394,0)
 ; to '1', otherwise PSOEXCEL will be set to '0'.
"RTN","PSOPROD1",395,0)
 ;
"RTN","PSOPROD1",396,0)
 N DIR,DIRUT,Y
"RTN","PSOPROD1",397,0)
 ;
"RTN","PSOPROD1",398,0)
 S DIR(0)="Y"
"RTN","PSOPROD1",399,0)
 S DIR("A")="Export the report to Microsoft Excel (Y/N)"
"RTN","PSOPROD1",400,0)
 I $G(PSOEXCEL)=1 S DIR("B")="YES"
"RTN","PSOPROD1",401,0)
 E  S DIR("B")="NO"
"RTN","PSOPROD1",402,0)
 S DIR("?",1)="If you want to capture the output from this report in a format that"
"RTN","PSOPROD1",403,0)
 S DIR("?",2)="could easily be imported into an Excel spreadsheet, then answer YES here."
"RTN","PSOPROD1",404,0)
 S DIR("?")="If you want a normal report output, then answer NO here."
"RTN","PSOPROD1",405,0)
 W !
"RTN","PSOPROD1",406,0)
 D ^DIR
"RTN","PSOPROD1",407,0)
 K DIR
"RTN","PSOPROD1",408,0)
 I $D(DIRUT) W $C(7) Q 0
"RTN","PSOPROD1",409,0)
 S PSOEXCEL=+Y
"RTN","PSOPROD1",410,0)
 Q 1
"RTN","PSOPROD1",411,0)
 ;
"RTN","PSOPROD1",412,0)
DEVICE() ; Prompt user for output device.
"RTN","PSOPROD1",413,0)
 ; Function return values:
"RTN","PSOPROD1",414,0)
 ;   1 - User selected a device.
"RTN","PSOPROD1",415,0)
 ;   0 - User exited out.
"RTN","PSOPROD1",416,0)
 ;
"RTN","PSOPROD1",417,0)
 N DIR,POP,PSORETURN,X,Y,ZTDESC,ZTQUEUED,ZTREQ,ZTRTN,ZTSAVE,ZTSK
"RTN","PSOPROD1",418,0)
 S PSORETURN=1
"RTN","PSOPROD1",419,0)
 ;
"RTN","PSOPROD1",420,0)
 I 'PSOEXCEL W !!,"This report is 132 characters wide.  Please choose an appropriate device.",!
"RTN","PSOPROD1",421,0)
 I PSOEXCEL D
"RTN","PSOPROD1",422,0)
 . W !!?5,"Before continuing, please set up your terminal to capture the"
"RTN","PSOPROD1",423,0)
 . W !?5,"detail report data and save the detail report data in a text file"
"RTN","PSOPROD1",424,0)
 . W !?5,"to a local drive. This report may take a while to run."
"RTN","PSOPROD1",425,0)
 . W !!?5,"Note: To avoid undesired wrapping of the data saved to the file,"
"RTN","PSOPROD1",426,0)
 . W !?11,"please enter '0;256;99999' at the 'DEVICE:' prompt.",!
"RTN","PSOPROD1",427,0)
 . Q
"RTN","PSOPROD1",428,0)
 ;
"RTN","PSOPROD1",429,0)
 S ZTRTN="EN^PSOPROD2"
"RTN","PSOPROD1",430,0)
 I PSOREPORT="P" S ZTDESC="Pharmacy Productivity Report"
"RTN","PSOPROD1",431,0)
 E  S ZTDESC="RRR Revenue Report"
"RTN","PSOPROD1",432,0)
 S ZTSAVE("PSO*")=""
"RTN","PSOPROD1",433,0)
 ;
"RTN","PSOPROD1",434,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE,"QM",1)
"RTN","PSOPROD1",435,0)
 I POP S PSORETURN=0
"RTN","PSOPROD1",436,0)
 I $G(ZTSK) W !!,"Report compilation has started with task# ",ZTSK,".",! S DIR(0)="E" D ^DIR
"RTN","PSOPROD1",437,0)
 Q PSORETURN
"RTN","PSOPROD1",438,0)
 ;
"RTN","PSOPROD2")
0^15^B141671167
"RTN","PSOPROD2",1,0)
PSOPROD2 ;ALB/MRD - Pharmacy Productivity and Revenue Report ;9/8/15
"RTN","PSOPROD2",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**448**;DEC 1997;Build 25
"RTN","PSOPROD2",3,0)
 ;Reference to $$BPSINSCO^BPSUTIL supported by IA 4410
"RTN","PSOPROD2",4,0)
 ;Reference to $$PAIDAMNT^BPSUTIL supported by IA 4146
"RTN","PSOPROD2",5,0)
 ;Reference to $$STATUS^BPSOSRX supported by IA 4412
"RTN","PSOPROD2",6,0)
 ;Reference to File 9002313.93 - BPS NCPDP REJECT CODES supported by IA 4720
"RTN","PSOPROD2",7,0)
 ;
"RTN","PSOPROD2",8,0)
 Q
"RTN","PSOPROD2",9,0)
 ;
"RTN","PSOPROD2",10,0)
EN ; Main entry point for compile and print.
"RTN","PSOPROD2",11,0)
 ;
"RTN","PSOPROD2",12,0)
 K ^TMP("PSOPRODA",$J),^TMP("PSOPRODB",$J)
"RTN","PSOPROD2",13,0)
 ;
"RTN","PSOPROD2",14,0)
 D COMPILE
"RTN","PSOPROD2",15,0)
 D PRINT
"RTN","PSOPROD2",16,0)
 ;
"RTN","PSOPROD2",17,0)
 K ^TMP("PSOPRODA",$J),^TMP("PSOPRODB",$J)
"RTN","PSOPROD2",18,0)
 ;
"RTN","PSOPROD2",19,0)
 I $D(ZTQUEUED) S ZTREQ="@"  ; If queued, purge the task after exiting.
"RTN","PSOPROD2",20,0)
 ;
"RTN","PSOPROD2",21,0)
 Q
"RTN","PSOPROD2",22,0)
 ;
"RTN","PSOPROD2",23,0)
COMPILE ; Compile data for report.
"RTN","PSOPROD2",24,0)
 ;
"RTN","PSOPROD2",25,0)
 ; Variables assumed to exist from EN^PSOPROD1:
"RTN","PSOPROD2",26,0)
 ;   PSODIV - Either equal to "ALL", or an array of each Division
"RTN","PSOPROD2",27,0)
 ;      selected by the user to be included.
"RTN","PSOPROD2",28,0)
 ;   PSODTBEGIN - Earliest Date Resolved to include.
"RTN","PSOPROD2",29,0)
 ;   PSODTEND - Latest Date Resolved to include.
"RTN","PSOPROD2",30,0)
 ;   PSOINCLUDE - Populated when user selects which to include.
"RTN","PSOPROD2",31,0)
 ;      The user can selected by PATIENT, DRUG, RX, INSURANCE
"RTN","PSOPROD2",32,0)
 ;      or REJECT CODE.  (For more info, see comments in ^PSOPROD1.)
"RTN","PSOPROD2",33,0)
 ;   PSOREPORT - "P" for Productivity report, "R" for Revenue report.
"RTN","PSOPROD2",34,0)
 ;   PSOSORT - D/R/B/N/C to indicate the primary sort (Division, date
"RTN","PSOPROD2",35,0)
 ;      Resolved, resolved By, drug Name, reject Code).
"RTN","PSOPROD2",36,0)
 ;   PSOSTATUS - "P" to include E Payable rejects, "R" to include E
"RTN","PSOPROD2",37,0)
 ;      Rejected rejects, "B" in include both.
"RTN","PSOPROD2",38,0)
 ;
"RTN","PSOPROD2",39,0)
 ; The data to be displayed on the report is compiled into the ^TMP
"RTN","PSOPROD2",40,0)
 ; array in the following format:
"RTN","PSOPROD2",41,0)
 ;   ^TMP("PSOPRODA",$J,SortValue,Rx,Fill,Reject) = Data
"RTN","PSOPROD2",42,0)
 ;      SortValue - Value of the field corresponding to the SortCode,
"RTN","PSOPROD2",43,0)
 ;         such as Division, Drug Name or Reject Code.
"RTN","PSOPROD2",44,0)
 ;      Rx - Prescription Number - file #52, IEN.
"RTN","PSOPROD2",45,0)
 ;      Fill - Refill Number - file #52.25, field #5.
"RTN","PSOPROD2",46,0)
 ;      Reject - Reject Number - file #52.25, IEN.
"RTN","PSOPROD2",47,0)
 ;   Data =
"RTN","PSOPROD2",48,0)
 ;      [1] Release Date - file #52, field #31, or sub-file #52.1, field #17.
"RTN","PSOPROD2",49,0)
 ;      [2] Date Rejected - sub-file #52.25, field #1.
"RTN","PSOPROD2",50,0)
 ;      [3] Date Resolved - sub-file #52.25, field #10.
"RTN","PSOPROD2",51,0)
 ;      [4] Resolved By - sub-file #52.25, field #11.
"RTN","PSOPROD2",52,0)
 ;      [5] Action Taken - file #52.25, field #12.
"RTN","PSOPROD2",53,0)
 ;      [6] Amount Paid - sub-file #9002313.0301, field #509.
"RTN","PSOPROD2",54,0)
 ;      [7] Insurance Name - file #9002313.59, field #902.33.
"RTN","PSOPROD2",55,0)
 ;      [8] Drug - file #52, field #6.
"RTN","PSOPROD2",56,0)
 ;      [9] Rejection - sub-file #52.25, field #.01.
"RTN","PSOPROD2",57,0)
 ;     [10] Division - file #52, field #20.
"RTN","PSOPROD2",58,0)
 ;     [11] Patient - file #52, field #2.
"RTN","PSOPROD2",59,0)
 ;     [12] E-Payable? - 1 if ECME Status is E PAYABLE.
"RTN","PSOPROD2",60,0)
 ;
"RTN","PSOPROD2",61,0)
 N PSOACTION,PSOCOB,PSODATA,PSODIVISION,PSODATE,PSODRUG
"RTN","PSOPROD2",62,0)
 N PSODTREJECTED,PSODTRESLVDA,PSODTRESLVDB,PSOECMESTATUS
"RTN","PSOPROD2",63,0)
 N PSOEPAYABLE,PSOFILL,PSOINSURANCE,PSOPAIDAMT,PSOPATIENT
"RTN","PSOPROD2",64,0)
 N PSOREJ,PSOREJCODEA,PSOREJCODEB,PSORESLVDBYA,PSORESLVDBYB
"RTN","PSOPROD2",65,0)
 N PSORX,PSOSORTB
"RTN","PSOPROD2",66,0)
 ;
"RTN","PSOPROD2",67,0)
 I IOST["C-",'PSOEXCEL W !,"Compiling..."
"RTN","PSOPROD2",68,0)
 ;
"RTN","PSOPROD2",69,0)
 ; All closed/resolved rejects will appear in the "CLSDAT" cross-
"RTN","PSOPROD2",70,0)
 ; reference:  ^PSRX("CLSDAT",Closed Date/Time,Rx,Reject).  Loop
"RTN","PSOPROD2",71,0)
 ; through them and include those that meet the filter criteria.
"RTN","PSOPROD2",72,0)
 ;
"RTN","PSOPROD2",73,0)
 S PSODATE=PSODTEND+.999999
"RTN","PSOPROD2",74,0)
 F  S PSODATE=$O(^PSRX("CLSDAT",PSODATE),-1) Q:PSODATE=""  Q:(PSODATE\1)<PSODTBEGIN  D
"RTN","PSOPROD2",75,0)
 . S PSORX=""
"RTN","PSOPROD2",76,0)
 . F  S PSORX=$O(^PSRX("CLSDAT",PSODATE,PSORX)) Q:PSORX=""  D
"RTN","PSOPROD2",77,0)
 . . ;
"RTN","PSOPROD2",78,0)
 . . ; Check to see if this Rx/Reject should be included.
"RTN","PSOPROD2",79,0)
 . . ;
"RTN","PSOPROD2",80,0)
 . . I PSOINCLUDE("RX")'="ALL",'$D(PSOINCLUDE("RX",PSORX)) Q
"RTN","PSOPROD2",81,0)
 . . ;
"RTN","PSOPROD2",82,0)
 . . ; Check to see if this Patient should be included.
"RTN","PSOPROD2",83,0)
 . . ;
"RTN","PSOPROD2",84,0)
 . . S PSOPATIENT=$$GET1^DIQ(52,PSORX,2,"I")
"RTN","PSOPROD2",85,0)
 . . I PSOINCLUDE("PATIENT")'="ALL",'$D(PSOINCLUDE("PATIENT",PSOPATIENT)) Q
"RTN","PSOPROD2",86,0)
 . . ;
"RTN","PSOPROD2",87,0)
 . . ; Check to see if this Drug should be included.
"RTN","PSOPROD2",88,0)
 . . ;
"RTN","PSOPROD2",89,0)
 . . S PSODRUG=$$GET1^DIQ(52,PSORX,6,"I")
"RTN","PSOPROD2",90,0)
 . . I PSOINCLUDE("DRUG")'="ALL",'$D(PSOINCLUDE("DRUG",PSODRUG)) Q
"RTN","PSOPROD2",91,0)
 . . S PSODRUG=$$GET1^DIQ(50,PSODRUG_",",.01)
"RTN","PSOPROD2",92,0)
 . . ;
"RTN","PSOPROD2",93,0)
 . . ; Check to see if this Division should be included.
"RTN","PSOPROD2",94,0)
 . . ;
"RTN","PSOPROD2",95,0)
 . . S PSODIVISION=$$GET1^DIQ(52,PSORX,20,"I")
"RTN","PSOPROD2",96,0)
 . . I PSODIV'="ALL",'$D(PSODIV(PSODIVISION)) Q
"RTN","PSOPROD2",97,0)
 . . ;
"RTN","PSOPROD2",98,0)
 . . S PSOREJ=""
"RTN","PSOPROD2",99,0)
 . . F  S PSOREJ=$O(^PSRX("CLSDAT",PSODATE,PSORX,PSOREJ)) Q:PSOREJ=""  D
"RTN","PSOPROD2",100,0)
 . . . ;
"RTN","PSOPROD2",101,0)
 . . . ; For the RRR Revenue report, skip if RRR flag is not set.
"RTN","PSOPROD2",102,0)
 . . . ;
"RTN","PSOPROD2",103,0)
 . . . I PSOREPORT="R",'$$GET1^DIQ(52.25,PSOREJ_","_PSORX,30,"I") Q
"RTN","PSOPROD2",104,0)
 . . . ;
"RTN","PSOPROD2",105,0)
 . . . ; Check to see if this Reject Code should be included.
"RTN","PSOPROD2",106,0)
 . . . ;
"RTN","PSOPROD2",107,0)
 . . . S PSOREJCODEA=$$GET1^DIQ(52.25,PSOREJ_","_PSORX_",",.01)
"RTN","PSOPROD2",108,0)
 . . . I PSOINCLUDE("REJECT CODE")'="ALL",'$D(PSOINCLUDE("REJECT CODE",PSOREJCODEA)) Q
"RTN","PSOPROD2",109,0)
 . . . S PSOREJCODEB=PSOREJCODEA
"RTN","PSOPROD2",110,0)
 . . . ;
"RTN","PSOPROD2",111,0)
 . . . ; Determine Fill# and COB.
"RTN","PSOPROD2",112,0)
 . . . ;
"RTN","PSOPROD2",113,0)
 . . . S PSOFILL=$$GET1^DIQ(52.25,PSOREJ_","_PSORX_",",5)
"RTN","PSOPROD2",114,0)
 . . . I PSOFILL="" S PSOFILL=0
"RTN","PSOPROD2",115,0)
 . . . S PSOCOB=$$GET1^DIQ(52.25,PSOREJ_","_PSORX_",",27,"I")
"RTN","PSOPROD2",116,0)
 . . . I PSOCOB="" S PSOCOB=1
"RTN","PSOPROD2",117,0)
 . . . ;
"RTN","PSOPROD2",118,0)
 . . . ; If any unresolved rejects, Quit.
"RTN","PSOPROD2",119,0)
 . . . ;
"RTN","PSOPROD2",120,0)
 . . . I $$FIND^PSOREJUT(PSORX,PSOFILL,,,1) Q
"RTN","PSOPROD2",121,0)
 . . . ;
"RTN","PSOPROD2",122,0)
 . . . ; Pull Date Rejected, Date Resolved, Resolved By, Action Taken
"RTN","PSOPROD2",123,0)
 . . . ; and Paid Amount.
"RTN","PSOPROD2",124,0)
 . . . ;
"RTN","PSOPROD2",125,0)
 . . . S PSODTREJECTED=$$GET1^DIQ(52.25,PSOREJ_","_PSORX_",",1,"I")\1  ; Date Rejected.
"RTN","PSOPROD2",126,0)
 . . . S PSODTRESLVDA=PSODATE\1  ; Date Resolved.
"RTN","PSOPROD2",127,0)
 . . . S PSORESLVDBYA=$$GET1^DIQ(52.25,PSOREJ_","_PSORX_",",11,"I")  ; Resolved By.
"RTN","PSOPROD2",128,0)
 . . . S PSOACTION=$$GET1^DIQ(52.25,PSOREJ_","_PSORX_",",12)  ; Action Taken.
"RTN","PSOPROD2",129,0)
 . . . S PSODTRESLVDB=PSODTRESLVDA,PSORESLVDBYB=PSORESLVDBYA
"RTN","PSOPROD2",130,0)
 . . . S PSOPAIDAMT=$P($$PAIDAMNT^BPSUTIL(PSORX,PSOFILL),U,2)  ; Amount Paid; IA 4146.
"RTN","PSOPROD2",131,0)
 . . . I PSOPAIDAMT'="" S PSOPAIDAMT=$J(PSOPAIDAMT,1,2)
"RTN","PSOPROD2",132,0)
 . . . ;
"RTN","PSOPROD2",133,0)
 . . . I $$ECMEINS(.PSOEPAYABLE) D ADDLINE
"RTN","PSOPROD2",134,0)
 . . . ;
"RTN","PSOPROD2",135,0)
 . . . ; If the report type is RRR Revenue report, then conditionally
"RTN","PSOPROD2",136,0)
 . . . ; display all subsequent refills on the Prescription.
"RTN","PSOPROD2",137,0)
 . . . ;
"RTN","PSOPROD2",138,0)
 . . . I PSOREPORT="R" D
"RTN","PSOPROD2",139,0)
 . . . . ;
"RTN","PSOPROD2",140,0)
 . . . . ; Clear out those data elements that are based on the Reject
"RTN","PSOPROD2",141,0)
 . . . . ; and not the Prescription.
"RTN","PSOPROD2",142,0)
 . . . . ;
"RTN","PSOPROD2",143,0)
 . . . . S PSODTREJECTED=""
"RTN","PSOPROD2",144,0)
 . . . . S PSODTRESLVDB=""
"RTN","PSOPROD2",145,0)
 . . . . S PSORESLVDBYB=""
"RTN","PSOPROD2",146,0)
 . . . . S PSOACTION=""
"RTN","PSOPROD2",147,0)
 . . . . S PSOREJCODEB=""
"RTN","PSOPROD2",148,0)
 . . . . ;
"RTN","PSOPROD2",149,0)
 . . . . F  S PSOFILL=$O(^PSRX(PSORX,1,PSOFILL)) Q:'PSOFILL  D
"RTN","PSOPROD2",150,0)
 . . . . . S PSOPAIDAMT=$P($$PAIDAMNT^BPSUTIL(PSORX,PSOFILL),U,2)  ; Amount Paid; IA 4146.
"RTN","PSOPROD2",151,0)
 . . . . . I PSOPAIDAMT'="" S PSOPAIDAMT=$J(PSOPAIDAMT,1,2)
"RTN","PSOPROD2",152,0)
 . . . . . I $$ECMEINS(.PSOEPAYABLE) D ADDLINE
"RTN","PSOPROD2",153,0)
 . . . . . Q
"RTN","PSOPROD2",154,0)
 . . . . Q
"RTN","PSOPROD2",155,0)
 . . . Q
"RTN","PSOPROD2",156,0)
 . . Q
"RTN","PSOPROD2",157,0)
 . Q
"RTN","PSOPROD2",158,0)
 ;
"RTN","PSOPROD2",159,0)
 Q
"RTN","PSOPROD2",160,0)
 ;
"RTN","PSOPROD2",161,0)
ECMEINS(PSOEPAYABLE) ; Check ECME Status and Insurance Company.
"RTN","PSOPROD2",162,0)
 ;
"RTN","PSOPROD2",163,0)
 ; Determine ECME Status and Insurance.  Check to see if this ECME
"RTN","PSOPROD2",164,0)
 ; Status and this Insurance should be included.  If not, Quit 0.
"RTN","PSOPROD2",165,0)
 ; If it passes the checks, Quit 1.  The variable EPAYABLE, passed
"RTN","PSOPROD2",166,0)
 ; by reference, gets set to 1 if the ECME status is E PAYABLE.
"RTN","PSOPROD2",167,0)
 ;
"RTN","PSOPROD2",168,0)
 S PSOEPAYABLE=0
"RTN","PSOPROD2",169,0)
 S PSOECMESTATUS=$P($$STATUS^BPSOSRX(PSORX,PSOFILL,,,PSOCOB),U,1)  ; IA 4412.
"RTN","PSOPROD2",170,0)
 I PSOECMESTATUS'="E PAYABLE",PSOECMESTATUS'="E REJECTED" Q 0
"RTN","PSOPROD2",171,0)
 I PSOECMESTATUS="E PAYABLE",PSOSTATUS="R" Q 0
"RTN","PSOPROD2",172,0)
 I PSOECMESTATUS="E REJECTED",PSOSTATUS="P" Q 0
"RTN","PSOPROD2",173,0)
 I PSOECMESTATUS="E PAYABLE" S PSOEPAYABLE=1
"RTN","PSOPROD2",174,0)
 ;
"RTN","PSOPROD2",175,0)
 S PSOINSURANCE=$$BPSINSCO^BPSUTIL(PSORX,PSOFILL)  ; IA 4410.
"RTN","PSOPROD2",176,0)
 I PSOINCLUDE("INSURANCE")'="ALL",'$D(PSOINCLUDE("INSURANCE",PSOINSURANCE)) Q 0
"RTN","PSOPROD2",177,0)
 ;
"RTN","PSOPROD2",178,0)
 Q 1
"RTN","PSOPROD2",179,0)
 ;
"RTN","PSOPROD2",180,0)
ADDLINE ; Add one Rx/Fill to the ^TMP global.
"RTN","PSOPROD2",181,0)
 ;
"RTN","PSOPROD2",182,0)
 I PSOFILL=0 S PSODATA=$$GET1^DIQ(52,PSORX_",",31,"I")\1  ; Release Date.
"RTN","PSOPROD2",183,0)
 I PSOFILL>0 S PSODATA=$$GET1^DIQ(52.1,PSOFILL_","_PSORX_",",17,"I")\1  ; Release Date.
"RTN","PSOPROD2",184,0)
 I +PSODATA=0 S PSODATA=""
"RTN","PSOPROD2",185,0)
 S PSODATA=PSODATA_"^"_PSODTREJECTED  ; Date Rejected.
"RTN","PSOPROD2",186,0)
 S PSODATA=PSODATA_"^"_PSODTRESLVDB  ; Date Resolved.
"RTN","PSOPROD2",187,0)
 S PSODATA=PSODATA_"^"_PSORESLVDBYB  ; Resolved By.
"RTN","PSOPROD2",188,0)
 S PSODATA=PSODATA_"^"_PSOACTION  ; Action Taken.
"RTN","PSOPROD2",189,0)
 S PSODATA=PSODATA_"^"_PSOPAIDAMT  ; Amount Paid
"RTN","PSOPROD2",190,0)
 S PSODATA=PSODATA_"^"_PSOINSURANCE  ; Insurance Name.
"RTN","PSOPROD2",191,0)
 S PSODATA=PSODATA_"^"_PSODRUG  ; Drug.
"RTN","PSOPROD2",192,0)
 S PSODATA=PSODATA_"^"_PSOREJCODEB  ; Rejection.
"RTN","PSOPROD2",193,0)
 S PSODATA=PSODATA_"^"_PSODIVISION  ; Division.
"RTN","PSOPROD2",194,0)
 S PSODATA=PSODATA_"^"_PSOPATIENT  ; Patient.
"RTN","PSOPROD2",195,0)
 S PSODATA=PSODATA_"^"_PSOEPAYABLE  ; E-Payable?
"RTN","PSOPROD2",196,0)
 ;
"RTN","PSOPROD2",197,0)
 ; Determine the first sort level, indicated by the user.  Possible
"RTN","PSOPROD2",198,0)
 ; sorts are Division, Date Resolved, User Resolved By, Drug Name
"RTN","PSOPROD2",199,0)
 ; and Reject Code.
"RTN","PSOPROD2",200,0)
 ;
"RTN","PSOPROD2",201,0)
 S PSOSORTB=$S(PSOSORT="D":PSODIVISION,PSOSORT="R":PSODTRESLVDA,PSOSORT="B":PSORESLVDBYA,PSOSORT="N":PSODRUG,PSOSORT="C":PSOREJCODEA,1:" ")
"RTN","PSOPROD2",202,0)
 ;
"RTN","PSOPROD2",203,0)
 ; If there is already a resolved reject for this Rx/Fill, then reset
"RTN","PSOPROD2",204,0)
 ; the Amount Paid field to "*****" for the current reject.  Since we
"RTN","PSOPROD2",205,0)
 ; are looping through the rejects in reverse chronological order, the
"RTN","PSOPROD2",206,0)
 ; result will be that only the most recently resolved reject will
"RTN","PSOPROD2",207,0)
 ; display the dollar amount instead of both of them.
"RTN","PSOPROD2",208,0)
 ;
"RTN","PSOPROD2",209,0)
 I $D(^TMP("PSOPRODB",$J,PSORX,PSOFILL)) S $P(PSODATA,U,6)="*****"
"RTN","PSOPROD2",210,0)
 S ^TMP("PSOPRODB",$J,PSORX,PSOFILL)=""
"RTN","PSOPROD2",211,0)
 ;
"RTN","PSOPROD2",212,0)
 ; Add to ^TMP global.
"RTN","PSOPROD2",213,0)
 ;
"RTN","PSOPROD2",214,0)
 S ^TMP("PSOPRODA",$J,PSOSORTB,PSORX,PSOFILL,PSOREJ)=PSODATA
"RTN","PSOPROD2",215,0)
 ;
"RTN","PSOPROD2",216,0)
 Q
"RTN","PSOPROD2",217,0)
 ;
"RTN","PSOPROD2",218,0)
PRINT ; Print report data.
"RTN","PSOPROD2",219,0)
 ;
"RTN","PSOPROD2",220,0)
 ; Variables assumed to exist from EN^PSOPROD1:
"RTN","PSOPROD2",221,0)
 ;   PSODIV - Either equal to "ALL", or an array of each Division
"RTN","PSOPROD2",222,0)
 ;      selected by the user to be included.
"RTN","PSOPROD2",223,0)
 ;   PSODTBEGIN - Earliest Date Resolved to include.
"RTN","PSOPROD2",224,0)
 ;   PSODTEND - Latest Date Resolved to include.
"RTN","PSOPROD2",225,0)
 ;   PSOEXCEL - 1 if user requested Excel format, otherwise 0.
"RTN","PSOPROD2",226,0)
 ;   PSOINCLUDE - Populated when user selects which to include.
"RTN","PSOPROD2",227,0)
 ;      The user can selected by PATIENT, DRUG, RX, INSURANCE
"RTN","PSOPROD2",228,0)
 ;      or REJECT CODE.  (For more info, see comments in ^PSOPROD1.)
"RTN","PSOPROD2",229,0)
 ;   PSOREPORT - "P" for Productivity report, "R" for Revenue report.
"RTN","PSOPROD2",230,0)
 ;   PSOSHOWPAT - 1 if user wants patient names displayed, else 0.
"RTN","PSOPROD2",231,0)
 ;   PSOSORT - D/R/B/N/C to indicate the primary sort (Division, date
"RTN","PSOPROD2",232,0)
 ;      Resolved, resolved By, drug Name, reject Code).
"RTN","PSOPROD2",233,0)
 ;   PSOSTATUS - "P" to include E Payable rejects, "R" to include E
"RTN","PSOPROD2",234,0)
 ;      Rejected rejects, "B" in include both.
"RTN","PSOPROD2",235,0)
 ;
"RTN","PSOPROD2",236,0)
 N DIR,PSOCRT,PSODASHES,PSODATA,PSOFILL,PSOPAGE,PSORX
"RTN","PSOPROD2",237,0)
 N PSOSORTB,PSOSTOP,PSOX,Y
"RTN","PSOPROD2",238,0)
 ;
"RTN","PSOPROD2",239,0)
 S PSOCRT=$S(IOST["C-":1,1:0)
"RTN","PSOPROD2",240,0)
 I PSOEXCEL S IOSL=999999  ; Ensure long screen length for Excel output.
"RTN","PSOPROD2",241,0)
 S PSOPAGE=0,PSOSTOP=0,$P(PSODASHES,"=",113)=""
"RTN","PSOPROD2",242,0)
 I PSOINCLUDE="PATIENT",'PSOEXCEL,'PSOSHOWPAT S PSOINCLUDE("PATIENT")=""
"RTN","PSOPROD2",243,0)
 ;
"RTN","PSOPROD2",244,0)
 D HDR
"RTN","PSOPROD2",245,0)
 I '$D(^TMP("PSOPRODA",$J)) W:'PSOEXCEL !!?5,"No data meets the criteria." G PX
"RTN","PSOPROD2",246,0)
 ;
"RTN","PSOPROD2",247,0)
 S PSOSORTB=""
"RTN","PSOPROD2",248,0)
 F  S PSOSORTB=$O(^TMP("PSOPRODA",$J,PSOSORTB)) Q:PSOSORTB=""!PSOSTOP  D
"RTN","PSOPROD2",249,0)
 . S PSORX=""
"RTN","PSOPROD2",250,0)
 . F  S PSORX=$O(^TMP("PSOPRODA",$J,PSOSORTB,PSORX)) Q:PSORX=""!PSOSTOP  D
"RTN","PSOPROD2",251,0)
 . . S PSOFILL=""
"RTN","PSOPROD2",252,0)
 . . F  S PSOFILL=$O(^TMP("PSOPRODA",$J,PSOSORTB,PSORX,PSOFILL)) Q:PSOFILL=""!PSOSTOP  D
"RTN","PSOPROD2",253,0)
 . . . S PSOREJ=""
"RTN","PSOPROD2",254,0)
 . . . F  S PSOREJ=$O(^TMP("PSOPRODA",$J,PSOSORTB,PSORX,PSOFILL,PSOREJ)) Q:PSOREJ=""!PSOSTOP  D
"RTN","PSOPROD2",255,0)
 . . . . S PSODATA=$G(^TMP("PSOPRODA",$J,PSOSORTB,PSORX,PSOFILL,PSOREJ))
"RTN","PSOPROD2",256,0)
 . . . . ;
"RTN","PSOPROD2",257,0)
 . . . . ; If Excel, write the formatted line then Quit.
"RTN","PSOPROD2",258,0)
 . . . . ;
"RTN","PSOPROD2",259,0)
 . . . . I PSOEXCEL D EXCELN Q
"RTN","PSOPROD2",260,0)
 . . . . ;
"RTN","PSOPROD2",261,0)
 . . . . I $Y+3>IOSL D HDR I PSOSTOP Q
"RTN","PSOPROD2",262,0)
 . . . . ;
"RTN","PSOPROD2",263,0)
 . . . . W !,$$GET1^DIQ(52,PSORX_",",.01),"/",PSOFILL
"RTN","PSOPROD2",264,0)
 . . . . W ?12,$$FMTE^XLFDT($P(PSODATA,U,1),"2Z")  ; Release Date.
"RTN","PSOPROD2",265,0)
 . . . . W ?22,$$FMTE^XLFDT($P(PSODATA,U,2),"2Z")  ; Date Rejected.
"RTN","PSOPROD2",266,0)
 . . . . W ?35,$$FMTE^XLFDT($P(PSODATA,U,3),"2Z")  ; Date Resolved.
"RTN","PSOPROD2",267,0)
 . . . . I $P(PSODATA,U,4)'="" W ?48,$E($$GET1^DIQ(200,$P(PSODATA,U,4)_",",.01),1,16)  ; Resolved By.
"RTN","PSOPROD2",268,0)
 . . . . E  I '$P(PSODATA,U,12) W ?48,"*Not ePayable*"  ; E-Payable?
"RTN","PSOPROD2",269,0)
 . . . . W ?65,$E($P(PSODATA,U,5),1,21)  ; Action Taken.
"RTN","PSOPROD2",270,0)
 . . . . W ?87,$J($P(PSODATA,U,6),10)  ; Amount Paid.
"RTN","PSOPROD2",271,0)
 . . . . W ?99,$E($$GET1^DIQ(36,$P(PSODATA,U,7)_",",.01),1,13)  ; Insurance Name.
"RTN","PSOPROD2",272,0)
 . . . . W !?4,$E($P(PSODATA,U,8),1,31)  ; Drug.
"RTN","PSOPROD2",273,0)
 . . . . I $P(PSODATA,U,9)'="" D  ; Rejection.
"RTN","PSOPROD2",274,0)
 . . . . . S PSOX=$O(^BPSF(9002313.93,"B",$P(PSODATA,U,9),""))  ; IA 4720.
"RTN","PSOPROD2",275,0)
 . . . . . S PSOX=$$GET1^DIQ(9002313.93,PSOX_",",.02)  ; IA 4720.
"RTN","PSOPROD2",276,0)
 . . . . . W ?36,$E($P(PSODATA,U,9)_" - "_PSOX,1,29)
"RTN","PSOPROD2",277,0)
 . . . . . Q
"RTN","PSOPROD2",278,0)
 . . . . W ?66,$E($$GET1^DIQ(59,$P(PSODATA,U,10)_",",.01),1,17)  ; Division.
"RTN","PSOPROD2",279,0)
 . . . . I PSOSHOWPAT W ?84,$E($$GET1^DIQ(2,$P(PSODATA,U,11)_",",.01),1,18)  ; Patient.
"RTN","PSOPROD2",280,0)
 . . . . ;
"RTN","PSOPROD2",281,0)
 . . . . Q
"RTN","PSOPROD2",282,0)
 . . . Q
"RTN","PSOPROD2",283,0)
 . . Q
"RTN","PSOPROD2",284,0)
 . Q
"RTN","PSOPROD2",285,0)
 ;
"RTN","PSOPROD2",286,0)
 I PSOSTOP G PRINTX
"RTN","PSOPROD2",287,0)
 I $Y+4>IOSL D HDR I PSOSTOP G PRINTX
"RTN","PSOPROD2",288,0)
 I 'PSOEXCEL W !!?5,"*** End of Report ***"
"RTN","PSOPROD2",289,0)
 ;
"RTN","PSOPROD2",290,0)
PX ;
"RTN","PSOPROD2",291,0)
 I PSOCRT S DIR(0)="E" W ! D ^DIR K DIR
"RTN","PSOPROD2",292,0)
PRINTX ;
"RTN","PSOPROD2",293,0)
 Q
"RTN","PSOPROD2",294,0)
 ;
"RTN","PSOPROD2",295,0)
EXCELN ; Write one line in Excel format.
"RTN","PSOPROD2",296,0)
 ;
"RTN","PSOPROD2",297,0)
 N PSOX
"RTN","PSOPROD2",298,0)
 ;
"RTN","PSOPROD2",299,0)
 W !,$$GET1^DIQ(52,PSORX_",",.01)_"/"_PSOFILL,"^"  ; Rx / Fill.
"RTN","PSOPROD2",300,0)
 W $$FMTE^XLFDT($P(PSODATA,U,1),"2Z"),"^"  ; Release Date.
"RTN","PSOPROD2",301,0)
 W $$FMTE^XLFDT($P(PSODATA,U,2),"2Z"),"^"  ; Date Rejected.
"RTN","PSOPROD2",302,0)
 W $$FMTE^XLFDT($P(PSODATA,U,3),"2Z"),"^"  ; Date Resolved.
"RTN","PSOPROD2",303,0)
 W $$GET1^DIQ(200,$P(PSODATA,U,4)_",",.01),"^"  ; Resolved By.
"RTN","PSOPROD2",304,0)
 W $P(PSODATA,U,5),"^"  ; Action Taken.
"RTN","PSOPROD2",305,0)
 W $P(PSODATA,U,6),"^"  ; Amount Paid.
"RTN","PSOPROD2",306,0)
 W $$GET1^DIQ(36,$P(PSODATA,U,7)_",",.01),"^"  ; Insurance Name.
"RTN","PSOPROD2",307,0)
 W $P(PSODATA,U,8),"^"  ; Drug
"RTN","PSOPROD2",308,0)
 S PSOX=""
"RTN","PSOPROD2",309,0)
 I $P(PSODATA,U,9)'="" D  ; Rejection.
"RTN","PSOPROD2",310,0)
 . S PSOX=$O(^BPSF(9002313.93,"B",$P(PSODATA,U,9),""))  ; IA 4720.
"RTN","PSOPROD2",311,0)
 . S PSOX=$P(PSODATA,U,9)_" - "_$$GET1^DIQ(9002313.93,PSOX_",",.02)  ; IA 4720.
"RTN","PSOPROD2",312,0)
 . Q
"RTN","PSOPROD2",313,0)
 W PSOX,"^"  ; Rejection.
"RTN","PSOPROD2",314,0)
 W $$GET1^DIQ(59,$P(PSODATA,U,10)_",",.01),"^"  ; Division.
"RTN","PSOPROD2",315,0)
 W $$GET1^DIQ(2,$P(PSODATA,U,11)_",",.01),"^"  ; Patient.
"RTN","PSOPROD2",316,0)
 W $S($P(PSODATA,U,12):"Y",1:"N")  ; E-Payable?
"RTN","PSOPROD2",317,0)
 ;
"RTN","PSOPROD2",318,0)
 Q
"RTN","PSOPROD2",319,0)
 ;
"RTN","PSOPROD2",320,0)
HDR ; Write the report header.
"RTN","PSOPROD2",321,0)
 ;
"RTN","PSOPROD2",322,0)
 ; If PAGE (i.e. not the first page) and device is the screen, do an
"RTN","PSOPROD2",323,0)
 ; end-of-page reader call.  If PAGE or screen output, do a form feed.
"RTN","PSOPROD2",324,0)
 ; If this is the first page ('PSOPAGE), and device is file or printer
"RTN","PSOPROD2",325,0)
 ; ('PSOCRT), reset the left margin ($C(13)).
"RTN","PSOPROD2",326,0)
 ;
"RTN","PSOPROD2",327,0)
 I PSOPAGE,PSOCRT S DIR(0)="E" D ^DIR K DIR I 'Y S PSOSTOP=1 G HDRX
"RTN","PSOPROD2",328,0)
 I PSOPAGE!PSOCRT W @IOF
"RTN","PSOPROD2",329,0)
 I 'PSOPAGE,'PSOCRT W $C(13)
"RTN","PSOPROD2",330,0)
 S PSOPAGE=PSOPAGE+1
"RTN","PSOPROD2",331,0)
 ;
"RTN","PSOPROD2",332,0)
 ; For Excel format, display only the column headers then exit.
"RTN","PSOPROD2",333,0)
 ; 
"RTN","PSOPROD2",334,0)
 I PSOEXCEL D EXCELHDR G HDRX
"RTN","PSOPROD2",335,0)
 ;
"RTN","PSOPROD2",336,0)
 ; Write the report header.
"RTN","PSOPROD2",337,0)
 ;
"RTN","PSOPROD2",338,0)
 I PSOREPORT="P" W "Pharmacy Productivity Report"
"RTN","PSOPROD2",339,0)
 E  W "RRR Revenue Report"
"RTN","PSOPROD2",340,0)
 W ?58,"Print Date: ",$$FMTE^XLFDT($$NOW^XLFDT,"1M")
"RTN","PSOPROD2",341,0)
 W ?97,"Page: ",PSOPAGE
"RTN","PSOPROD2",342,0)
 W !,"Selected Divisions: ",PSODIV
"RTN","PSOPROD2",343,0)
 W !,"Date Reject Resolved: ",$$FMTE^XLFDT(PSODTBEGIN,"2Z")," - ",$$FMTE^XLFDT(PSODTEND,"2Z")
"RTN","PSOPROD2",344,0)
 I PSOSTATUS(0)'="" W ?50,"Status: ",PSOSTATUS(0)
"RTN","PSOPROD2",345,0)
 I PSOINCLUDE(PSOINCLUDE)="" W !,"Select by ",PSOINCLUDE
"RTN","PSOPROD2",346,0)
 E  W !,$E("Select by "_PSOINCLUDE_": "_PSOINCLUDE(PSOINCLUDE),1,132)
"RTN","PSOPROD2",347,0)
 W !,"Sort by ",PSOSORT(0)
"RTN","PSOPROD2",348,0)
 ;
"RTN","PSOPROD2",349,0)
 ; Write the column headers.
"RTN","PSOPROD2",350,0)
 ;
"RTN","PSOPROD2",351,0)
 W !,PSODASHES
"RTN","PSOPROD2",352,0)
 W !,"RX#/FILL",?12,"REL DATE",?22,"DT REJECTED",?35,"DT RESOLVED"
"RTN","PSOPROD2",353,0)
 W ?48,"RESOLVED BY",?65,"ACTION TAKEN",?89,"AMT PAID",?98,"INSURANCE NAME"
"RTN","PSOPROD2",354,0)
 W !?4,"DRUG",?36,"REJECTION",?66,"DIVISION"
"RTN","PSOPROD2",355,0)
 I PSOSHOWPAT W ?84,"PATIENT NAME"
"RTN","PSOPROD2",356,0)
 W !,PSODASHES
"RTN","PSOPROD2",357,0)
 ;
"RTN","PSOPROD2",358,0)
HDRX ;
"RTN","PSOPROD2",359,0)
 Q
"RTN","PSOPROD2",360,0)
 ;
"RTN","PSOPROD2",361,0)
EXCELHDR ; Write the Excel header record.
"RTN","PSOPROD2",362,0)
 ;
"RTN","PSOPROD2",363,0)
 W "Rx#/FILL^REL DATE^DT REJECTED^DT RESOLVED^RESOLVED BY^"
"RTN","PSOPROD2",364,0)
 W "ACTION TAKEN^AMOUNT PAID^INSURANCE NAME^DRUG^REJECTON^"
"RTN","PSOPROD2",365,0)
 W "DIVISION^PATIENT NAME^E-PAYABLE?"
"RTN","PSOPROD2",366,0)
 Q
"RTN","PSOPROD2",367,0)
 ;
"RTN","PSOREJP0")
0^5^B126948878
"RTN","PSOREJP0",1,0)
PSOREJP0 ;BIRM/MFR - Third Party Rejects Processing Screen ;04/28/05
"RTN","PSOREJP0",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,260,287,289,385,421,427,448**;DEC 1997;Build 25
"RTN","PSOREJP0",3,0)
 ;Reference to ^BPSVRX supported by IA 5723
"RTN","PSOREJP0",4,0)
 ;
"RTN","PSOREJP0",5,0)
 N PSOREJST,PSORJSRT,PSORJASC,PSOSTFLT,PSODRFLT,PSOPTFLT,PSORXFLT,PSOINFLT,PSOINGRP,PSOTRITG
"RTN","PSOREJP0",6,0)
 N INSLN,HIGHLN,LASTLN,PSOEKEY,PSOCVATG
"RTN","PSOREJP0",7,0)
 ;
"RTN","PSOREJP0",8,0)
 ; - Division/Site selection
"RTN","PSOREJP0",9,0)
 D SEL^PSOREJU1("DIVISION","^PS(59,",.PSOREJST,$$GET1^DIQ(59,+$G(PSOSITE),.01)) I $G(PSOREJST)="^" G EXIT
"RTN","PSOREJP0",10,0)
 ;
"RTN","PSOREJP0",11,0)
 ; - Initializing global variables
"RTN","PSOREJP0",12,0)
 S PSORJSRT="PA",PSORJASC=1,PSOSTFLT="U",(PSODRFLT,PSOPTFLT,PSORXFLT,PSOINFLT)="ALL"
"RTN","PSOREJP0",13,0)
 S PSOINGRP=0,PSOTRITG=1,PSOCVATG=1
"RTN","PSOREJP0",14,0)
 ;
"RTN","PSOREJP0",15,0)
 D LST("W")
"RTN","PSOREJP0",16,0)
 G EXIT
"RTN","PSOREJP0",17,0)
 ;
"RTN","PSOREJP0",18,0)
LST(PSOMENU) ; - Invokes Listmanager
"RTN","PSOREJP0",19,0)
 W !,"Please wait..."
"RTN","PSOREJP0",20,0)
 I PSOMENU="W" D EN^VALM("PSO REJECTS WORKLIST")
"RTN","PSOREJP0",21,0)
 I PSOMENU="VP" D EN^VALM("PSO REJECTS VIEW/PROCESS")
"RTN","PSOREJP0",22,0)
 D FULL^VALM1
"RTN","PSOREJP0",23,0)
 Q
"RTN","PSOREJP0",24,0)
 ;
"RTN","PSOREJP0",25,0)
HDR ; - Header code
"RTN","PSOREJP0",26,0)
 N LINE1,LINE2,LINE3
"RTN","PSOREJP0",27,0)
 S LINE1=$$SITES() I $L(LINE1)>80 S $E(LINE1,78,999)="..."
"RTN","PSOREJP0",28,0)
 ;
"RTN","PSOREJP0",29,0)
 S LINE2="Selection : ALL "_$S(PSOSTFLT="U":"UNRESOLVED ",PSOSTFLT="R":"RESOLVED ",1:"")_"REJECTS"
"RTN","PSOREJP0",30,0)
 I $G(PSOPTFLT)'="ALL" S LINE2=LINE2_" FOR "_$$NAME("P")
"RTN","PSOREJP0",31,0)
 I $G(PSODRFLT)'="ALL" S LINE2=LINE2_" FOR "_$$NAME("D")
"RTN","PSOREJP0",32,0)
 I $G(PSOINFLT)'="ALL" S LINE2=LINE2_" FOR "_$$NAME("I")
"RTN","PSOREJP0",33,0)
 I $G(PSOINGRP) S LINE2=LINE2_" GROUPED BY INSURANCE"
"RTN","PSOREJP0",34,0)
 S VALMHDR(1)=LINE1,VALMHDR(2)=LINE2
"RTN","PSOREJP0",35,0)
 I PSOMENU="VP" D
"RTN","PSOREJP0",36,0)
 . I $G(PSORXFLT) S LINE3="Rx#       : "_$$NAME("R")
"RTN","PSOREJP0",37,0)
 . E  D
"RTN","PSOREJP0",38,0)
 . . S LINE3="Date Range: "_$$FMTE^XLFDT(+PSODTRNG,2)
"RTN","PSOREJP0",39,0)
 . . I +PSODTRNG'=$P(PSODTRNG,"^",2) S LINE3=LINE3_" THRU "_$$FMTE^XLFDT($P(PSODTRNG,"^",2),2)
"RTN","PSOREJP0",40,0)
 . S VALMHDR(3)=LINE3
"RTN","PSOREJP0",41,0)
 ;
"RTN","PSOREJP0",42,0)
 D SETHDR()
"RTN","PSOREJP0",43,0)
 Q
"RTN","PSOREJP0",44,0)
 ;
"RTN","PSOREJP0",45,0)
SETHDR() ; - Displays the Header Line
"RTN","PSOREJP0",46,0)
 N HDR,ORD
"RTN","PSOREJP0",47,0)
 ;
"RTN","PSOREJP0",48,0)
 S HDR="  #",$E(HDR,5)="Rx#",$E(HDR,18)="PATIENT(ID)",$E(HDR,43)="DRUG",$E(HDR,64)="REASON"
"RTN","PSOREJP0",49,0)
 S $E(HDR,81)="" D INSTR^VALM1(IORVON_HDR_IOINORM,1,$S(PSOMENU="W":4,1:5))
"RTN","PSOREJP0",50,0)
 S ORD=$S(PSORJASC=1:"[^]",1:"[v]")
"RTN","PSOREJP0",51,0)
 S:PSORJSRT="RX" POS=9 S:PSORJSRT="PA" POS=30 S:PSORJSRT="DR" POS=48 S:PSORJSRT="RE" POS=71
"RTN","PSOREJP0",52,0)
 D INSTR^VALM1(IOINHI_IORVON_ORD_IOINORM,POS,$S(PSOMENU="W":4,1:5))
"RTN","PSOREJP0",53,0)
 Q
"RTN","PSOREJP0",54,0)
 ;
"RTN","PSOREJP0",55,0)
INIT ; - Populates the Body section for ListMan
"RTN","PSOREJP0",56,0)
 K ^TMP("PSOREJP0",$J)
"RTN","PSOREJP0",57,0)
 D SETSORT(PSORJSRT),SETLINE
"RTN","PSOREJP0",58,0)
 S VALMSG="Select the entry # to view or ?? for more actions"
"RTN","PSOREJP0",59,0)
 Q
"RTN","PSOREJP0",60,0)
 ;
"RTN","PSOREJP0",61,0)
SETLINE ; - Sets the line to be displayed in ListMan
"RTN","PSOREJP0",62,0)
 N INS,SUB,SEQ,SORTA,LINE,Z,I,X,X1,X2
"RTN","PSOREJP0",63,0)
 I '$D(^TMP("PSOREJSR",$J)) D  Q
"RTN","PSOREJP0",64,0)
 . F I=1:1:7 S ^TMP("PSOREJP0",$J,I,0)=""
"RTN","PSOREJP0",65,0)
 . S ^TMP("PSOREJP0",$J,8,0)="               No Clinical Third Party Payer Rejects found."
"RTN","PSOREJP0",66,0)
 . S VALMCNT=1
"RTN","PSOREJP0",67,0)
 ;
"RTN","PSOREJP0",68,0)
 F I=1:1:$G(LASTLN) D RESTORE^VALM10(I)
"RTN","PSOREJP0",69,0)
 K INSLN,HIGHLN
"RTN","PSOREJP0",70,0)
 ;
"RTN","PSOREJP0",71,0)
 S (SORTA,INS,SUB)="",LINE=0 K ^TMP("PSOREJP0",$J)
"RTN","PSOREJP0",72,0)
 F  S SORTA=$O(^TMP("PSOREJSR",$J,SORTA)) Q:SORTA=""  D
"RTN","PSOREJP0",73,0)
 . F  S INS=$O(^TMP("PSOREJSR",$J,SORTA,INS)) Q:INS=""  D
"RTN","PSOREJP0",74,0)
 .. I INS'="<NULL>" D
"RTN","PSOREJP0",75,0)
 ... D GROUP(INS,.LINE)
"RTN","PSOREJP0",76,0)
 .. F  S SUB=$O(^TMP("PSOREJSR",$J,SORTA,INS,SUB),PSORJASC) Q:SUB=""  D
"RTN","PSOREJP0",77,0)
 ... S Z=$G(^TMP("PSOREJSR",$J,SORTA,INS,SUB))
"RTN","PSOREJP0",78,0)
 ... S X1="",SEQ=$G(SEQ)+1,X1=$J(SEQ,3)
"RTN","PSOREJP0",79,0)
 ... S $E(X1,5)=$P(Z,"^",3),$E(X1,18)=$P(Z,"^",4),$E(X1,43)=$P(Z,"^",5),$E(X1,64)=$P(Z,"^",6)
"RTN","PSOREJP0",80,0)
 ... S LINE=LINE+1,^TMP("PSOREJP0",$J,LINE,0)=X1,HIGHLN(LINE)=""
"RTN","PSOREJP0",81,0)
 ... S X2="",$E(X2,5)="Payer Message: "_$P(Z,"^",7)
"RTN","PSOREJP0",82,0)
 ... S LINE=LINE+1,^TMP("PSOREJP0",$J,LINE,0)=X2
"RTN","PSOREJP0",83,0)
 ... S ^TMP("PSOREJP0",$J,SEQ,"RX")=$P(Z,"^",1,2)
"RTN","PSOREJP0",84,0)
 ;
"RTN","PSOREJP0",85,0)
 I LINE>$G(LASTLN) D
"RTN","PSOREJP0",86,0)
 . F I=($G(LASTLN)+1):1:LINE D SAVE^VALM10(I)
"RTN","PSOREJP0",87,0)
 . S LASTLN=LINE
"RTN","PSOREJP0",88,0)
 ;
"RTN","PSOREJP0",89,0)
 ; - Highlighting the prescription/insurance line
"RTN","PSOREJP0",90,0)
 F LN=1:1:LINE D
"RTN","PSOREJP0",91,0)
 . I $D(HIGHLN(LN)) D  Q
"RTN","PSOREJP0",92,0)
 . . D CNTRL^VALM10(LN,1,80,IOINHI,IOINORM)
"RTN","PSOREJP0",93,0)
 . . D CNTRL^VALM10(LN,64,3,IOUON,IOINORM)
"RTN","PSOREJP0",94,0)
 . . D CNTRL^VALM10(LN,67,80,IOINHI,IOINORM)
"RTN","PSOREJP0",95,0)
 . I $D(INSLN(LN)) D
"RTN","PSOREJP0",96,0)
 . . S LBL=INSLN(LN),POS=41-($L(LBL)/2+.5\1)
"RTN","PSOREJP0",97,0)
 . . D CNTRL^VALM10(LN,1,POS-1,IOUON_IOINHI,IOINORM)
"RTN","PSOREJP0",98,0)
 . . D CNTRL^VALM10(LN,POS,$L(LBL),IORVON_IOINHI,IORVOFF_IOINORM)
"RTN","PSOREJP0",99,0)
 . . D CNTRL^VALM10(LN,POS+$L(LBL),(81-POS-$L(LBL)),IOUON_IOINHI,IOINORM)
"RTN","PSOREJP0",100,0)
 ;
"RTN","PSOREJP0",101,0)
 S VALMCNT=+$G(LINE)
"RTN","PSOREJP0",102,0)
 Q
"RTN","PSOREJP0",103,0)
 ;
"RTN","PSOREJP0",104,0)
GROUP(LBL,LINE) ; Sets an insurance delimiter line
"RTN","PSOREJP0",105,0)
 N X,POS
"RTN","PSOREJP0",106,0)
 S POS=41-($L(LBL)/2+.5\1)
"RTN","PSOREJP0",107,0)
 S X="",$P(X," ",81)="",$E(X,POS,POS-1+$L(LBL))=LBL
"RTN","PSOREJP0",108,0)
 S LINE=LINE+1,^TMP("PSOREJP0",$J,LINE,0)=X,INSLN(LINE)=LBL
"RTN","PSOREJP0",109,0)
 Q
"RTN","PSOREJP0",110,0)
 ;
"RTN","PSOREJP0",111,0)
SETSORT(FIELD) ; - Sets the data sorted by the FIELD specified
"RTN","PSOREJP0",112,0)
 N RX,REJ,STS,DAT
"RTN","PSOREJP0",113,0)
 K ^TMP("PSOREJSR",$J)
"RTN","PSOREJP0",114,0)
 ;
"RTN","PSOREJP0",115,0)
 ; - Worklist
"RTN","PSOREJP0",116,0)
 I PSOMENU="W" D
"RTN","PSOREJP0",117,0)
 . S RX=0 F  S RX=$O(^PSRX("REJSTS",0,RX)) Q:'RX  D
"RTN","PSOREJP0",118,0)
 . . S REJ=0 F  S REJ=$O(^PSRX("REJSTS",0,RX,REJ)) Q:'REJ  D
"RTN","PSOREJP0",119,0)
 . . . D SETTMP(RX,REJ,FIELD)
"RTN","PSOREJP0",120,0)
 ;
"RTN","PSOREJP0",121,0)
 ; - View/Process
"RTN","PSOREJP0",122,0)
 I PSOMENU="VP" D
"RTN","PSOREJP0",123,0)
 . I $G(PSORXFLT)'="ALL" D  Q
"RTN","PSOREJP0",124,0)
 . . S REJ=0 F  S REJ=$O(^PSRX(+PSORXFLT,"REJ",REJ)) Q:'REJ  D
"RTN","PSOREJP0",125,0)
 . . . I $$FLTSTS(+PSORXFLT,REJ) Q
"RTN","PSOREJP0",126,0)
 . . . D SETTMP(+PSORXFLT,REJ,FIELD)
"RTN","PSOREJP0",127,0)
 . S DAT=$P(PSODTRNG,"^")-0.0000001,(RX,REJ)=0
"RTN","PSOREJP0",128,0)
 . F  S DAT=$O(^PSRX("REJDAT",DAT)) Q:'DAT!(DAT>$$ENDT())  D
"RTN","PSOREJP0",129,0)
 . . F  S RX=$O(^PSRX("REJDAT",DAT,RX)) Q:'RX  D
"RTN","PSOREJP0",130,0)
 . . . I $$FILTER(RX) Q
"RTN","PSOREJP0",131,0)
 . . . F  S REJ=$O(^PSRX("REJDAT",DAT,RX,REJ)) Q:'REJ  D
"RTN","PSOREJP0",132,0)
 . . . . I $$FLTSTS(RX,REJ) Q
"RTN","PSOREJP0",133,0)
 . . . . D SETTMP(RX,REJ,FIELD)
"RTN","PSOREJP0",134,0)
 Q
"RTN","PSOREJP0",135,0)
 ;
"RTN","PSOREJP0",136,0)
SETTMP(RX,REJ,FIELD) ; - Sets ^TMP global that will be displayed in the body section
"RTN","PSOREJP0",137,0)
 N REJLST,FILL,CODE,RXNUM,PTNAME,DRNAME,MSG,REASON,MSG,X,Z,SORT,I,INS,OREJ,PSOTRIC,SORTA
"RTN","PSOREJP0",138,0)
 I $G(PSORXFLT)="ALL",$$CLOSED^PSOREJP1(RX,REJ),$$REOPN^PSOREJP1(RX,REJ) Q
"RTN","PSOREJP0",139,0)
 S FILL=+$$GET1^DIQ(52.25,REJ_","_RX,5),SORTA=1
"RTN","PSOREJP0",140,0)
 I '$$DIV(RX,FILL) Q
"RTN","PSOREJP0",141,0)
 K REJLST D GET^PSOREJU2(RX,FILL,.REJLST,,1) I '$D(REJLST) Q
"RTN","PSOREJP0",142,0)
 I $$FILTER(,REJLST(REJ,"INSURANCE POINTER")) Q
"RTN","PSOREJP0",143,0)
 S CODE=$G(REJLST(REJ,"CODE"))
"RTN","PSOREJP0",144,0)
 S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,FILL,PSOTRIC)
"RTN","PSOREJP0",145,0)
 Q:$G(PSOTRIC)=1&('$G(PSOTRITG))&(CODE'="79")&(CODE'="88")  ;show/hide non-DUR/RTS TRICARE
"RTN","PSOREJP0",146,0)
 Q:$G(PSOTRIC)=2&('$G(PSOCVATG))&(CODE'="79")&(CODE'="88")  ;show/hide non-DUR/RTS CHAMPVA
"RTN","PSOREJP0",147,0)
 S PTNAME=$$PTNAME(RX)
"RTN","PSOREJP0",148,0)
 S DRNAME=$$GET1^DIQ(52,RX,6)
"RTN","PSOREJP0",149,0)
 S RXNUM=$$GET1^DIQ(52,RX,.01)
"RTN","PSOREJP0",150,0)
 S MSG=$G(REJLST(REJ,"PAYER MESSAGE")) I $L(MSG)>60 S MSG=$E(MSG,1,58)_"..."
"RTN","PSOREJP0",151,0)
 S REASON=$S(CODE=88:"DUR:"_$G(REJLST(REJ,"REASON")),CODE=79:"79 :REFILL TOO SOON",1:CODE)
"RTN","PSOREJP0",152,0)
 I CODE'=79&(CODE'=88) S REASON=CODE_" :"_$$EXP^PSOREJP1(CODE)
"RTN","PSOREJP0",153,0)
 S Z="",$P(Z,"^")=RX,$P(Z,"^",2)=REJ,$P(Z,"^",3)=RXNUM,$P(Z,"^",4)=PTNAME
"RTN","PSOREJP0",154,0)
 S $P(Z,"^",5)=$E(DRNAME,1,20),$P(Z,"^",6)=$E(REASON,1,17),$P(Z,"^",7)=MSG
"RTN","PSOREJP0",155,0)
 S SORT=$S(FIELD="PA":PTNAME,FIELD="DR":DRNAME,FIELD="RX":RXNUM_" ",1:REASON)_RX_REJ
"RTN","PSOREJP0",156,0)
 S INS="<NULL>"
"RTN","PSOREJP0",157,0)
 I $G(PSOINGRP) S INS=REJLST(REJ,"INSURANCE NAME") S:INS="" INS="***UNKNOWN***"
"RTN","PSOREJP0",158,0)
 ;Modified code now separates Veteran RRR - PSO*7*421
"RTN","PSOREJP0",159,0)
 S:$G(PSOTRIC)&(CODE'=79)&(CODE'=88) INS=$$ELIGDISP^PSOREJP1(RX,FILL)_" - Non-DUR/RTS",SORTA=3
"RTN","PSOREJP0",160,0)
 I '$G(PSOTRIC)&(CODE'=79)&(CODE'=88) D
"RTN","PSOREJP0",161,0)
 .I $G(REJLST(REJ,"RRR FLAG"))="YES" S INS="REJECT RESOLUTION REQUIRED",SORTA=2 Q
"RTN","PSOREJP0",162,0)
 .S INS="OTHER REJECTS",SORTA=4
"RTN","PSOREJP0",163,0)
 S ^TMP("PSOREJSR",$J,SORTA,INS,SORT)=Z
"RTN","PSOREJP0",164,0)
 Q
"RTN","PSOREJP0",165,0)
 ;
"RTN","PSOREJP0",166,0)
PAT ; - Sort by Patient
"RTN","PSOREJP0",167,0)
 D SORT("PA")
"RTN","PSOREJP0",168,0)
 Q
"RTN","PSOREJP0",169,0)
DRG ; - Sort by Drug
"RTN","PSOREJP0",170,0)
 D SORT("DR")
"RTN","PSOREJP0",171,0)
 Q
"RTN","PSOREJP0",172,0)
RX ; - Sort by Rx
"RTN","PSOREJP0",173,0)
 D SORT("RX")
"RTN","PSOREJP0",174,0)
 Q
"RTN","PSOREJP0",175,0)
REA ; - Sort by Reason
"RTN","PSOREJP0",176,0)
 D SORT("RE")
"RTN","PSOREJP0",177,0)
 Q
"RTN","PSOREJP0",178,0)
SORT(FIELD) ; - Sort entries by FIELD
"RTN","PSOREJP0",179,0)
 I PSORJSRT=FIELD S PSORJASC=$S(PSORJASC=1:-1,1:1)
"RTN","PSOREJP0",180,0)
 E  S PSORJSRT=FIELD,PSORJASC=1
"RTN","PSOREJP0",181,0)
 D REF
"RTN","PSOREJP0",182,0)
 Q
"RTN","PSOREJP0",183,0)
 ;
"RTN","PSOREJP0",184,0)
REF ; - Screen Refresh
"RTN","PSOREJP0",185,0)
 W ?52,"Please wait..." D INIT S VALMBCK="R"
"RTN","PSOREJP0",186,0)
 Q
"RTN","PSOREJP0",187,0)
GI ; - Group by Insurance
"RTN","PSOREJP0",188,0)
 W ?52,"Please wait..." S PSOINGRP=$S($G(PSOINGRP):0,1:1) D INIT,HDR S VALMBCK="R"
"RTN","PSOREJP0",189,0)
 Q
"RTN","PSOREJP0",190,0)
TRICTOG ;  - Toggle TRICARE display
"RTN","PSOREJP0",191,0)
 W ?52,"Please wait..." S PSOTRITG=$S($G(PSOTRITG):0,1:1) D INIT,HDR S VALMBCK="R"
"RTN","PSOREJP0",192,0)
 Q
"RTN","PSOREJP0",193,0)
 ;
"RTN","PSOREJP0",194,0)
CVATOG ;  - Toggle CHAMPVA display
"RTN","PSOREJP0",195,0)
 W ?52,"Please wait..." S PSOCVATG=$S($G(PSOCVATG):0,1:1) D INIT,HDR S VALMBCK="R"
"RTN","PSOREJP0",196,0)
 Q
"RTN","PSOREJP0",197,0)
 ;
"RTN","PSOREJP0",198,0)
SEL ; - Process selection of one entry
"RTN","PSOREJP0",199,0)
 N PSOSEL,XQORM,Z,RX,REJ,PSOCHNG
"RTN","PSOREJP0",200,0)
 S PSOSEL=+$P($P(Y(1),"^",4),"=",2) I 'PSOSEL S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOREJP0",201,0)
 S Z=$G(^TMP("PSOREJP0",$J,PSOSEL,"RX"))
"RTN","PSOREJP0",202,0)
 S RX=$P(Z,"^"),REJ=$P(Z,"^",2) I 'RX!'REJ S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOREJP0",203,0)
 S PSOCHNG=0 D EN^PSOREJP1(RX,REJ,.PSOCHNG) I $G(PSOCHNG) D REF
"RTN","PSOREJP0",204,0)
 Q
"RTN","PSOREJP0",205,0)
 ;
"RTN","PSOREJP0",206,0)
EXIT ;
"RTN","PSOREJP0",207,0)
 K ^TMP("PSOREJP0",$J),^TMP("PSOREJSR",$J)
"RTN","PSOREJP0",208,0)
 Q
"RTN","PSOREJP0",209,0)
 ;
"RTN","PSOREJP0",210,0)
HELP Q
"RTN","PSOREJP0",211,0)
 ;
"RTN","PSOREJP0",212,0)
SITES() ; - Returns the list of sites along with their NCPDP #s
"RTN","PSOREJP0",213,0)
 N CNT,SITE,SITES,NAME
"RTN","PSOREJP0",214,0)
 I '$D(PSOREJST) Q ""
"RTN","PSOREJP0",215,0)
 I $G(PSOREJST)="ALL" Q "Divisions : ALL"
"RTN","PSOREJP0",216,0)
 S SITE=0 F  S SITE=$O(PSOREJST(SITE)) Q:'SITE  D
"RTN","PSOREJP0",217,0)
 . S NAME=$$GET1^DIQ(59,SITE,.01)
"RTN","PSOREJP0",218,0)
 . S SITES=$G(SITES)_", "_NAME
"RTN","PSOREJP0",219,0)
 S $E(SITES,1,2)="",SITES="Division"_$S($L(SITES,",")>1:"s",1:" ")_" : "_SITES
"RTN","PSOREJP0",220,0)
 Q SITES
"RTN","PSOREJP0",221,0)
 ;
"RTN","PSOREJP0",222,0)
DIV(RX,FILL) ; - Check if the Division for the Prescription/Fill was selected by the user
"RTN","PSOREJP0",223,0)
 ;
"RTN","PSOREJP0",224,0)
 I $G(PSOREJST)="ALL" Q 1
"RTN","PSOREJP0",225,0)
 I $D(PSOREJST($$RXSITE^PSOBPSUT(RX,FILL))) Q 1
"RTN","PSOREJP0",226,0)
 Q 0
"RTN","PSOREJP0",227,0)
 ;
"RTN","PSOREJP0",228,0)
PTNAME(RX) ; - Returns header displayable - Patient Name (Last 4 SSN)
"RTN","PSOREJP0",229,0)
 N DFN,VADM,PTNAME
"RTN","PSOREJP0",230,0)
 S DFN=$$GET1^DIQ(52,RX,2,"I") D DEM^VADPT
"RTN","PSOREJP0",231,0)
 S PTNAME=$E($G(VADM(1)),1,18)_"("_$P($P($G(VADM(2)),"^",2),"-",3)_")"
"RTN","PSOREJP0",232,0)
 Q PTNAME
"RTN","PSOREJP0",233,0)
 ;
"RTN","PSOREJP0",234,0)
FILTER(RX,INS) ; - Filter entries based on user's selection
"RTN","PSOREJP0",235,0)
 N FILTER
"RTN","PSOREJP0",236,0)
 S FILTER=1
"RTN","PSOREJP0",237,0)
 I $G(PSOPTFLT)'="ALL",$D(RX),'$D(PSOPTFLT($$GET1^DIQ(52,RX,2,"I"))) Q FILTER
"RTN","PSOREJP0",238,0)
 I $G(PSODRFLT)'="ALL",$D(RX),'$D(PSODRFLT($$GET1^DIQ(52,RX,6,"I"))) Q FILTER
"RTN","PSOREJP0",239,0)
 I $G(PSOINFLT)'="ALL",$D(INS),'$D(PSOINFLT(+INS)) Q FILTER
"RTN","PSOREJP0",240,0)
 Q 0
"RTN","PSOREJP0",241,0)
 ;
"RTN","PSOREJP0",242,0)
FLTSTS(RX,REJ) ; - Filter for the Reject Status  
"RTN","PSOREJP0",243,0)
 N STS
"RTN","PSOREJP0",244,0)
 S STS=$$GET1^DIQ(52.25,REJ_","_RX,9,"I")
"RTN","PSOREJP0",245,0)
 I PSOSTFLT="U",STS=1 Q 1
"RTN","PSOREJP0",246,0)
 I PSOSTFLT="R",STS=0 Q 1
"RTN","PSOREJP0",247,0)
 Q 0
"RTN","PSOREJP0",248,0)
 ;
"RTN","PSOREJP0",249,0)
NAME(TYPE) ; - Returns the name if ONE was selected or "MULTIPLE ..."
"RTN","PSOREJP0",250,0)
 N I,CNT
"RTN","PSOREJP0",251,0)
 ;
"RTN","PSOREJP0",252,0)
 I TYPE="P",$O(PSOPTFLT($O(PSOPTFLT(""))))="" Q $$GET1^DIQ(2,$O(PSOPTFLT("")),.01)
"RTN","PSOREJP0",253,0)
 I TYPE="D",$O(PSODRFLT($O(PSODRFLT(""))))="" Q $$GET1^DIQ(50,$O(PSODRFLT("")),.01)
"RTN","PSOREJP0",254,0)
 I TYPE="I",$O(PSOINFLT($O(PSOINFLT(""))))="" Q $O(PSOINFLT(""))
"RTN","PSOREJP0",255,0)
 I TYPE="R" Q $$GET1^DIQ(52,PSORXFLT,.01)
"RTN","PSOREJP0",256,0)
 Q "MULTIPLE "_$S(TYPE="P":"PATIENTS",TYPE="D":"DRUGS",1:"INSURANCE COMPANIES")
"RTN","PSOREJP0",257,0)
 ;
"RTN","PSOREJP0",258,0)
ENDT() ; Returns the upper limit for the date range
"RTN","PSOREJP0",259,0)
 N ENDT
"RTN","PSOREJP0",260,0)
 S ENDT=$P(PSODTRNG,"^",2)
"RTN","PSOREJP0",261,0)
 I '$E(ENDT,4,7) Q (ENDT+10000)
"RTN","PSOREJP0",262,0)
 I '$E(ENDT,6,7) Q (ENDT+100)
"RTN","PSOREJP0",263,0)
 I $P(ENDT,"^",2) Q (ENDT+0.0000001)
"RTN","PSOREJP0",264,0)
 Q (ENDT+.25)
"RTN","PSOREJP0",265,0)
VER ;Do VER Hidden Action in Rejects Worklist
"RTN","PSOREJP0",266,0)
 N BPSVRX
"RTN","PSOREJP0",267,0)
 D FULL^VALM1
"RTN","PSOREJP0",268,0)
 D ^BPSVRX  ;DBIA #5723
"RTN","PSOREJP0",269,0)
 S VALMBCK="R"
"RTN","PSOREJP0",270,0)
 Q
"RTN","PSOREJP0",271,0)
 ;
"RTN","PSOREJP0",272,0)
PRTEXCL ;
"RTN","PSOREJP0",273,0)
 ; Protocol to Print to Excel
"RTN","PSOREJP0",274,0)
 ;
"RTN","PSOREJP0",275,0)
 ; Use full screen
"RTN","PSOREJP0",276,0)
 D FULL^VALM1
"RTN","PSOREJP0",277,0)
 ;
"RTN","PSOREJP0",278,0)
 ; Prompt to see if the user wants to print to Excel
"RTN","PSOREJP0",279,0)
 N DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","PSOREJP0",280,0)
 S DIR(0)="Y"
"RTN","PSOREJP0",281,0)
 S DIR("A")="Do you want to capture report data for an Excel document",DIR("B")="NO"
"RTN","PSOREJP0",282,0)
 D ^DIR
"RTN","PSOREJP0",283,0)
 I Y'=1 G PEXIT
"RTN","PSOREJP0",284,0)
 ;
"RTN","PSOREJP0",285,0)
 ; Display Warning Message
"RTN","PSOREJP0",286,0)
 W !!?5,"Before continuing, please set up your terminal to capture the"
"RTN","PSOREJP0",287,0)
 W !?5,"detail report data. On some terminals, this can be done by"
"RTN","PSOREJP0",288,0)
 W !?5,"clicking on the 'Tools' menu above, then click on 'Capture"
"RTN","PSOREJP0",289,0)
 W !?5,"Incoming Data' to save to Desktop"
"RTN","PSOREJP0",290,0)
 W !!?5,"Note: To avoid undesired wrapping of the data saved to the"
"RTN","PSOREJP0",291,0)
 W !?10,"file, please enter '0;256;999' at the 'DEVICE:' prompt."
"RTN","PSOREJP0",292,0)
 ;
"RTN","PSOREJP0",293,0)
 ; Prompt for device
"RTN","PSOREJP0",294,0)
 N %ZIS,ZTSK,ZTRTN,ZTIO,ZTDESC,ZTSAVE,POP,OK
"RTN","PSOREJP0",295,0)
 S OK=0
"RTN","PSOREJP0",296,0)
 F  D  I POP!OK Q
"RTN","PSOREJP0",297,0)
 . S %ZIS="QM"
"RTN","PSOREJP0",298,0)
 . D ^%ZIS
"RTN","PSOREJP0",299,0)
 . I POP Q
"RTN","PSOREJP0",300,0)
 . I '$D(IO("Q")) S OK=1 Q
"RTN","PSOREJP0",301,0)
 . I $D(IO("Q")) D
"RTN","PSOREJP0",302,0)
 .. K IO("Q")
"RTN","PSOREJP0",303,0)
 .. D HOME^%ZIS
"RTN","PSOREJP0",304,0)
 .. W !,"Sorry, the output for this action cannot be queued.  Please select a device that"
"RTN","PSOREJP0",305,0)
 .. W !,"does not requiring queuing."
"RTN","PSOREJP0",306,0)
 I POP G PEXIT
"RTN","PSOREJP0",307,0)
 ;
"RTN","PSOREJP0",308,0)
 ; If not queued, run the process directly
"RTN","PSOREJP0",309,0)
 D RUN
"RTN","PSOREJP0",310,0)
 ;
"RTN","PSOREJP0",311,0)
PEXIT ;
"RTN","PSOREJP0",312,0)
 ; Reset before going back to ListMan
"RTN","PSOREJP0",313,0)
 S VALMBCK="R"
"RTN","PSOREJP0",314,0)
 Q
"RTN","PSOREJP0",315,0)
 ;
"RTN","PSOREJP0",316,0)
 ; Run the Report
"RTN","PSOREJP0",317,0)
RUN ;
"RTN","PSOREJP0",318,0)
 N SORTA,INS,SORT,RX,REJ,FILL,PTNAME,DRNAME,RXNUM,REJLST,CODE,REASON,MSG
"RTN","PSOREJP0",319,0)
 U IO
"RTN","PSOREJP0",320,0)
 ; Write Header
"RTN","PSOREJP0",321,0)
 W !,"Section/Insurance^RX#^Patient(ID)^Drug^Reason^Payer Message"
"RTN","PSOREJP0",322,0)
 ;
"RTN","PSOREJP0",323,0)
 ; Loop through temp array and output
"RTN","PSOREJP0",324,0)
 S SORTA="" F  S SORTA=$O(^TMP("PSOREJSR",$J,SORTA)) Q:'SORTA  D
"RTN","PSOREJP0",325,0)
 . S INS="" F  S INS=$O(^TMP("PSOREJSR",$J,SORTA,INS)) Q:INS=""  D
"RTN","PSOREJP0",326,0)
 .. S SORT="" F  S SORT=$O(^TMP("PSOREJSR",$J,SORTA,INS,SORT)) Q:SORT=""  D
"RTN","PSOREJP0",327,0)
 ... W !,$S(INS'="<NULL>":INS,1:"Refill Too Soon/DUR Rejects")_U
"RTN","PSOREJP0",328,0)
 ... S RX=$P(^TMP("PSOREJSR",$J,SORTA,INS,SORT),"^",1),REJ=$P(^TMP("PSOREJSR",$J,SORTA,INS,SORT),"^",2)
"RTN","PSOREJP0",329,0)
 ... S FILL=+$$GET1^DIQ(52.25,REJ_","_RX,5)
"RTN","PSOREJP0",330,0)
 ... S PTNAME=$$PTNAME(RX)
"RTN","PSOREJP0",331,0)
 ... S DRNAME=$$GET1^DIQ(52,RX,6)
"RTN","PSOREJP0",332,0)
 ... S RXNUM=$$GET1^DIQ(52,RX,.01)
"RTN","PSOREJP0",333,0)
 ... K REJLST D GET^PSOREJU2(RX,FILL,.REJLST,,1)
"RTN","PSOREJP0",334,0)
 ... S CODE=$G(REJLST(REJ,"CODE"))
"RTN","PSOREJP0",335,0)
 ... S REASON=$S(CODE=88:"DUR:"_$G(REJLST(REJ,"REASON")),CODE=79:"79 :REFILL TOO SOON",1:CODE_" :"_$$EXP^PSOREJP1(CODE))
"RTN","PSOREJP0",336,0)
 ... S MSG=$G(REJLST(REJ,"PAYER MESSAGE"))
"RTN","PSOREJP0",337,0)
 ... W RXNUM_U_PTNAME_U_DRNAME_U_REASON_U_MSG
"RTN","PSOREJP0",338,0)
 ;
"RTN","PSOREJP0",339,0)
 ; Cleanup
"RTN","PSOREJP0",340,0)
 I $E($G(IOST),1,2)'="C-" W !,@IOF
"RTN","PSOREJP0",341,0)
 I $E($G(IOST),1,2)="C-" D
"RTN","PSOREJP0",342,0)
 . N DIR,DTOUT,DUOUT,DIROUT,DIRUT
"RTN","PSOREJP0",343,0)
 . S DIR(0)="E"
"RTN","PSOREJP0",344,0)
 . D ^DIR
"RTN","PSOREJP0",345,0)
 I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","PSOREJP0",346,0)
 D ^%ZISC
"RTN","PSOREJP0",347,0)
 Q
"RTN","PSOREJP1")
0^2^B201229195
"RTN","PSOREJP1",1,0)
PSOREJP1 ;BIRM/MFR - Third Party Reject Display Screen ;04/29/05
"RTN","PSOREJP1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,247,260,281,287,289,290,358,359,385,403,421,427,448**;DEC 1997;Build 25
"RTN","PSOREJP1",3,0)
 ;Reference to File 9002313.93 - BPS NCPDP REJECT CODES supported by IA 4720
"RTN","PSOREJP1",4,0)
 ;Reference to ^PS(59.7 supported by IA 694
"RTN","PSOREJP1",5,0)
 ;Reference to ^PSDRUG("AQ" supported by IA 3165
"RTN","PSOREJP1",6,0)
 ;Reference to File 9002313.25 supported by IA 5064
"RTN","PSOREJP1",7,0)
 ;Reference to BPSNCPD3 supported by IA 4560
"RTN","PSOREJP1",8,0)
 ;Reference to ^BPSVRX supported by IA 5723
"RTN","PSOREJP1",9,0)
 ;Reference to $$BBILL^BPSBUTL and $$RESUBMIT^BPSBUTL supported by IA 4719
"RTN","PSOREJP1",10,0)
 ;
"RTN","PSOREJP1",11,0)
EN(RX,REJ,CHANGE) ; Entry point
"RTN","PSOREJP1",12,0)
 ;
"RTN","PSOREJP1",13,0)
 ; - DO NOT change the IF logic below as both of them might get executed (intentional)
"RTN","PSOREJP1",14,0)
 N FILL,LASTLN,PSOTRIC,PSOCODE,PSOTCODE
"RTN","PSOREJP1",15,0)
 S FILL=+$$GET1^DIQ(52.25,REJ_","_RX,5)
"RTN","PSOREJP1",16,0)
 S PSOTRIC=$$TRIC(RX,FILL),PSOCODE=$$GET1^DIQ(52.25,REJ_","_RX,.01)
"RTN","PSOREJP1",17,0)
 S PSOTCODE=0 S:PSOCODE'=79&(PSOCODE'=88)&(PSOTRIC) PSOTCODE=1
"RTN","PSOREJP1",18,0)
 I $$CLOSED(RX,REJ) D EN^VALM("PSO REJECT DISPLAY - RESOLVED")
"RTN","PSOREJP1",19,0)
 I '$$CLOSED(RX,REJ)&(PSOTRIC) D EN^VALM("PSO REJECT TRICARE")   ;cnf, PSO*7*358, replace PSOTCODE with PSOTRIC
"RTN","PSOREJP1",20,0)
 I '$$CLOSED(RX,REJ)&('PSOTCODE)&('PSOTRIC) D EN^VALM("PSO REJECT DISPLAY")   ;cnf, PSO*7*358, add PSOTRIC check
"RTN","PSOREJP1",21,0)
 D FULL^VALM1
"RTN","PSOREJP1",22,0)
 Q
"RTN","PSOREJP1",23,0)
 ;
"RTN","PSOREJP1",24,0)
HDR ; - Builds the Header section
"RTN","PSOREJP1",25,0)
 N LINE1,LINE2,X
"RTN","PSOREJP1",26,0)
 S VALMHDR(1)=$$DVINFO^PSOREJU2(RX,FILL,1),VALMHDR(2)=$$PTINFO^PSOREJU2(RX,1)
"RTN","PSOREJP1",27,0)
 ;cnf, PSO*7*358, add REJ to parameter list for RXINFO^PSOREJP3
"RTN","PSOREJP1",28,0)
 S VALMHDR(3)=$$RXINFO^PSOREJP3(RX,FILL,1),VALMHDR(4)=$$RXINFO^PSOREJP3(RX,FILL,2,REJ)
"RTN","PSOREJP1",29,0)
 Q
"RTN","PSOREJP1",30,0)
 ;
"RTN","PSOREJP1",31,0)
TRIC(RX,RFL,PSOTRIC) ; - Return 1 for TRICARE, 2 for CHAMPVA or 0 (zero) for not TRICARE or CHAMPVA
"RTN","PSOREJP1",32,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJP1",33,0)
 S PSOTRIC="",PSOTRIC=$S(RFL=0&($$GET1^DIQ(52,RX_",",85,"I")="T"):1,$$GET1^DIQ(52.1,RFL_","_RX_",",85,"I")="T":1,RFL=0&($$GET1^DIQ(52,RX_",",85,"I")="C"):2,$$GET1^DIQ(52.1,RFL_","_RX_",",85,"I")="C":2,1:0)
"RTN","PSOREJP1",34,0)
 Q PSOTRIC
"RTN","PSOREJP1",35,0)
 ;
"RTN","PSOREJP1",36,0)
ELIGDISP(RX,RFL) ; Return either CHAMPVA or TRICARE for display
"RTN","PSOREJP1",37,0)
 ; purposes, or null if neither
"RTN","PSOREJP1",38,0)
 N PSOELIG
"RTN","PSOREJP1",39,0)
 S PSOELIG=$$TRIC(RX,RFL)
"RTN","PSOREJP1",40,0)
 Q $S(PSOELIG=1:"TRICARE",PSOELIG=2:"CHAMPVA",1:"")
"RTN","PSOREJP1",41,0)
 ;
"RTN","PSOREJP1",42,0)
ELIGTCV(RX,RFL,CAPS) ; Return either CHAMPVA, TRICARE, or Veteran/VETERAN for eligibility display (PSO*7*448)
"RTN","PSOREJP1",43,0)
 ; if CAPS=1 then return "Veteran" in all caps
"RTN","PSOREJP1",44,0)
 ; Note if the requested refill has been deleted, then the message "N/A - Fill Deleted" will be returned
"RTN","PSOREJP1",45,0)
 N PSOELIG,VET,DELMSG
"RTN","PSOREJP1",46,0)
 S DELMSG="N/A - Fill Deleted"
"RTN","PSOREJP1",47,0)
 S PSOELIG=$$TRIC(RX,RFL),VET="Veteran" I $G(CAPS) S VET="VETERAN"
"RTN","PSOREJP1",48,0)
 I RFL>0,'$D(^PSRX(RX,1,RFL,0)) S PSOELIG=3
"RTN","PSOREJP1",49,0)
 Q $S(PSOELIG=1:"TRICARE",PSOELIG=2:"CHAMPVA",PSOELIG=3:DELMSG,1:VET)
"RTN","PSOREJP1",50,0)
 ;
"RTN","PSOREJP1",51,0)
INIT ; Builds the Body section
"RTN","PSOREJP1",52,0)
 N DATA,LINE
"RTN","PSOREJP1",53,0)
 I '$D(FILL) S FILL=+$$GET1^DIQ(52.25,REJ_","_RX,5)   ; PSO*7*448 obtain fill# from 52.25 subfile if not defined
"RTN","PSOREJP1",54,0)
 I '$$CLOSED(RX,REJ) S VALM("TITLE")="Reject Information ("_$$ELIGTCV(RX,FILL)_")"
"RTN","PSOREJP1",55,0)
 I $$CLOSED(RX,REJ) S VALM("TITLE")="Reject Information (RESOLVED)"
"RTN","PSOREJP1",56,0)
 F I=1:1:$G(LASTLN) D RESTORE^VALM10(I)
"RTN","PSOREJP1",57,0)
 K ^TMP("PSOREJP1",$J) S VALMCNT=0,LINE=0
"RTN","PSOREJP1",58,0)
 D GET^PSOREJU2(RX,FILL,.DATA,REJ,1)
"RTN","PSOREJP1",59,0)
 D REJ                   ; Display the REJECT Information
"RTN","PSOREJP1",60,0)
 D OTH                   ; Display the Other Rejects Information
"RTN","PSOREJP1",61,0)
 D COM^PSOREJP3          ; Display the Comment
"RTN","PSOREJP1",62,0)
 D INS                   ; Display the Insurance Information
"RTN","PSOREJP1",63,0)
 D CLS                   ; Display the Resolution Information
"RTN","PSOREJP1",64,0)
 S VALMCNT=LINE
"RTN","PSOREJP1",65,0)
 Q
"RTN","PSOREJP1",66,0)
 ;
"RTN","PSOREJP1",67,0)
REJ ; - DUR Information
"RTN","PSOREJP1",68,0)
 N TYPE,PFLDT,TREJ,TDATA,PSOET,PSONAF,PSOCOB,PSOTXT,PSOECME S TDATA=""
"RTN","PSOREJP1",69,0)
 ;
"RTN","PSOREJP1",70,0)
 ; LH;PSO*7*448 - Display 'RESUBMISSION' where 'BACK-BILL' currently
"RTN","PSOREJP1",71,0)
 ; displays if the claim was resubmitted from the ECME User Screen.
"RTN","PSOREJP1",72,0)
 ; To facilitate this, the function $$RESUBMIT^BPSBUTL was created.
"RTN","PSOREJP1",73,0)
 ;
"RTN","PSOREJP1",74,0)
 ; Back Bill indicator - PSO*7*421
"RTN","PSOREJP1",75,0)
 S PSOTXT="",PSOCOB=$G(DATA(REJ,"COB")),PSOCOB=$S(PSOCOB="SECONDARY":2,PSOCOB="TERTIARY":3,1:1)
"RTN","PSOREJP1",76,0)
 I $$BBILL^BPSBUTL(RX,FILL,PSOCOB) S PSOTXT=" BACK-BILL"
"RTN","PSOREJP1",77,0)
 E  I $$RESUBMIT^BPSBUTL(RX,FILL,PSOCOB) S PSOTXT=" RESUBMISSION"  ; IA 4719.
"RTN","PSOREJP1",78,0)
 D SETLN("REJECT Information ("_$$ELIGTCV(RX,FILL)_") "_PSOTXT,1,1)
"RTN","PSOREJP1",79,0)
 S PSOECME=$$STATUS^PSOBPSUT(RX,FILL)
"RTN","PSOREJP1",80,0)
 I PSOECME="E PAYABLE" D
"RTN","PSOREJP1",81,0)
 . D SETLN("Reject Type    : ",,,18)
"RTN","PSOREJP1",82,0)
 . D SETLN("Reject Status  : ** E PAYABLE **",,,18)
"RTN","PSOREJP1",83,0)
 . Q
"RTN","PSOREJP1",84,0)
 E  D
"RTN","PSOREJP1",85,0)
 . S TYPE=$S($G(DATA(REJ,"CODE"))=79:"79 - REFILL TOO SOON",1:"")
"RTN","PSOREJP1",86,0)
 . I TYPE="" S TYPE=DATA(REJ,"CODE")_" - "_$E($$EXP(DATA(REJ,"CODE")),1,23)_"-"
"RTN","PSOREJP1",87,0)
 . D SETLN("Reject Type    : "_TYPE_" received on "_$$FMTE^XLFDT($G(DATA(REJ,"DATE/TIME"))),,,18)
"RTN","PSOREJP1",88,0)
 . ;cnf, PSO*7*358, if TRICARE/CHAMPVA non-billable then reset Status line
"RTN","PSOREJP1",89,0)
 . S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",90,0)
 . I PSOET D SETLN("Status         : NO CLAIM SUBMITTED")
"RTN","PSOREJP1",91,0)
 . I 'PSOET D SETLN("Reject Status  : "_$G(DATA(REJ,"STATUS"))_" - "_PSOECME,,,18)
"RTN","PSOREJP1",92,0)
 . Q
"RTN","PSOREJP1",93,0)
 S PSONAF=$$NFLDT^BPSBUTL(RX,FILL) ; IA 4719
"RTN","PSOREJP1",94,0)
 I PSONAF'="" D SETLN("Next Avail Fill: "_$$FMTE^XLFDT(PSONAF),,,18) ; PSO*7*421
"RTN","PSOREJP1",95,0)
 D SET("PAYER MESSAGE",63)
"RTN","PSOREJP1",96,0)
 D SET("REASON",63)
"RTN","PSOREJP1",97,0)
 S PFLDT=$$FMTE^XLFDT($G(DATA(REJ,"PLAN PREVIOUS FILL DATE")))
"RTN","PSOREJP1",98,0)
 D SET("DUR TEXT",63,$S(PFLDT="":1,1:0))
"RTN","PSOREJP1",99,0)
 I PFLDT'="" D SETLN("Last Fill Date : "_PFLDT_" (from payer)",,1,18)
"RTN","PSOREJP1",100,0)
 Q
"RTN","PSOREJP1",101,0)
 ;
"RTN","PSOREJP1",102,0)
OTH ; - Other Rejects Information
"RTN","PSOREJP1",103,0)
 N LST,I,RJC,J,LAST
"RTN","PSOREJP1",104,0)
 S LST=$G(DATA(REJ,"OTHER REJECTS")) I LST="" Q
"RTN","PSOREJP1",105,0)
 D SETLN()
"RTN","PSOREJP1",106,0)
 D SETLN("OTHER REJECTS",1,1)
"RTN","PSOREJP1",107,0)
 F I=1:1:$L(LST,",") S RJC=$P(LST,",",I) D
"RTN","PSOREJP1",108,0)
 . S LAST=1 F J=(I+1):1:$L(LST,",") I $P(LST,",",J)'="" S LAST=0 Q
"RTN","PSOREJP1",109,0)
 . I RJC'="" D SETLN(RJC_" - "_$$EXP(RJC),,$S(LAST:1,1:0),6)
"RTN","PSOREJP1",110,0)
 Q
"RTN","PSOREJP1",111,0)
 ;
"RTN","PSOREJP1",112,0)
INS ; - Insurance Information
"RTN","PSOREJP1",113,0)
 D SETLN()
"RTN","PSOREJP1",114,0)
 D SETLN("INSURANCE Information",1,1)
"RTN","PSOREJP1",115,0)
 N PSOINS,PSOINS1,I
"RTN","PSOREJP1",116,0)
 S PSOINS=$G(DATA(REJ,"INSURANCE NAME"))
"RTN","PSOREJP1",117,0)
 F I=1:1:(50-($L(PSOINS)+18)) S PSOINS=PSOINS_" "
"RTN","PSOREJP1",118,0)
 S PSOINS1=$G(DATA(REJ,"COB"))
"RTN","PSOREJP1",119,0)
 I PSOINS1="SECONDARY" S PSOINS=PSOINS_"Coord. Of Benefits: "_PSOINS1
"RTN","PSOREJP1",120,0)
 D SETLN("Insurance      : "_PSOINS,,,18)
"RTN","PSOREJP1",121,0)
 D SETLN("Contact        : "_$G(DATA(REJ,"PLAN CONTACT")),,,18)
"RTN","PSOREJP1",122,0)
 D SETLN("BIN            : "_$G(DATA(REJ,"BIN")),,,18)
"RTN","PSOREJP1",123,0)
 D SETLN("Group Number   : "_$G(DATA(REJ,"GROUP NUMBER")),,,18)
"RTN","PSOREJP1",124,0)
 D SETLN("Cardholder ID  : "_$G(DATA(REJ,"CARDHOLDER ID")),,1,18)
"RTN","PSOREJP1",125,0)
 Q
"RTN","PSOREJP1",126,0)
 ;
"RTN","PSOREJP1",127,0)
CLS ; - Resolution Information
"RTN","PSOREJP1",128,0)
 N X
"RTN","PSOREJP1",129,0)
 I '$$CLOSED(RX,REJ) Q
"RTN","PSOREJP1",130,0)
 D SETLN()
"RTN","PSOREJP1",131,0)
 D SETLN("RESOLUTION Information",1,1)
"RTN","PSOREJP1",132,0)
 D SETLN("Resolved By    : "_$G(DATA(REJ,"CLOSED BY")),,,18)
"RTN","PSOREJP1",133,0)
 D SETLN("Date/Time      : "_$G(DATA(REJ,"CLOSED DATE/TIME")),,,18)
"RTN","PSOREJP1",134,0)
 I $G(DATA(REJ,"CLOSE COMMENTS"))'="" D SET("CLOSE COMMENTS",63)
"RTN","PSOREJP1",135,0)
 I $G(DATA(REJ,"COD1"))'="" D SETLN("Reason for Svc : "_$$OVRX^PSOREJU1(1,$G(DATA(REJ,"COD1"))),,,18)
"RTN","PSOREJP1",136,0)
 I $G(DATA(REJ,"COD2"))'="" D SETLN("Profes. Svc    : "_$$OVRX^PSOREJU1(2,$G(DATA(REJ,"COD2"))),,,18)
"RTN","PSOREJP1",137,0)
 I $G(DATA(REJ,"COD3"))'="" D SETLN("Result of Svc  : "_$$OVRX^PSOREJU1(3,$G(DATA(REJ,"COD3"))),,,18)
"RTN","PSOREJP1",138,0)
 I $G(DATA(REJ,"CLA CODE"))'="" D
"RTN","PSOREJP1",139,0)
 . N CLAPNTR S CLAPNTR=$$GET1^DIQ(52.25,REJ_","_RX_",",24,"I")
"RTN","PSOREJP1",140,0)
 . S X=DATA(REJ,"CLA CODE")_" - "_$$GET1^DIQ(9002313.25,CLAPNTR,".02")
"RTN","PSOREJP1",141,0)
 . D SETLN("Clarific. Code : "_X,,,18)
"RTN","PSOREJP1",142,0)
 I $G(DATA(REJ,"PRIOR AUTH TYPE"))'="" D
"RTN","PSOREJP1",143,0)
 . S X=$$GET1^DIQ(52.25,REJ_","_RX,25,"I")_" - "_(DATA(REJ,"PRIOR AUTH TYPE"))
"RTN","PSOREJP1",144,0)
 . D SETLN("Prior Auth.Type: "_X,,,18),SETLN("Prior Auth. #  : "_DATA(REJ,"PRIOR AUTH NUMBER"),,,18)
"RTN","PSOREJP1",145,0)
 D SETLN("Reason         : "_$G(DATA(REJ,"CLOSE REASON")),,1,18)
"RTN","PSOREJP1",146,0)
 Q
"RTN","PSOREJP1",147,0)
 ;
"RTN","PSOREJP1",148,0)
 ;
"RTN","PSOREJP1",149,0)
SET(FIELD,L,UND) ; Sets the lines for fields that require text wrapping
"RTN","PSOREJP1",150,0)
 N TXT,T
"RTN","PSOREJP1",151,0)
 S TXT=DATA(REJ,FIELD) I $L(TXT)'>L D SETLN($$LABEL(FIELD)_TXT,,$S($G(UND):1,1:0),80-L) Q
"RTN","PSOREJP1",152,0)
 F I=1:1 Q:TXT=""  D
"RTN","PSOREJP1",153,0)
 . I I=1 D SETLN($$LABEL(FIELD)_$E(TXT,1,L),,,80-L) S TXT=$E(TXT,L+1,999) Q
"RTN","PSOREJP1",154,0)
 . S T="",$E(T,81-L)=$E(TXT,1,L) D SETLN(T,,$S($E(TXT,L+1,999)=""&$G(UND):1,1:0),80-L) S TXT=$E(TXT,L+1,999)
"RTN","PSOREJP1",155,0)
 Q
"RTN","PSOREJP1",156,0)
 ;
"RTN","PSOREJP1",157,0)
LABEL(FIELD) ; Sets the label for the field
"RTN","PSOREJP1",158,0)
 I FIELD="REASON" Q "Reason Code    : "
"RTN","PSOREJP1",159,0)
 I FIELD="PAYER MESSAGE" Q "Payer Addl Msg : "
"RTN","PSOREJP1",160,0)
 I FIELD="DUR TEXT" Q $S(+$$ISDUR^PSOREJP5(RX,REJ):"+DUR Text      : ",1:"DUR Text       : ")
"RTN","PSOREJP1",161,0)
 I FIELD="CLOSE COMMENTS" Q "Comments       : "
"RTN","PSOREJP1",162,0)
 Q ""
"RTN","PSOREJP1",163,0)
 ;
"RTN","PSOREJP1",164,0)
VIEW ; - Rx View hidden action
"RTN","PSOREJP1",165,0)
 N VALMCNT,TITLE
"RTN","PSOREJP1",166,0)
 I $G(PSOBACK) D  Q
"RTN","PSOREJP1",167,0)
 . S VALMSG="Not available through Backdoor!",VALMBCK="R"
"RTN","PSOREJP1",168,0)
 S TITLE=VALM("TITLE")
"RTN","PSOREJP1",169,0)
 ;
"RTN","PSOREJP1",170,0)
 ; - DO structure used to avoid losing variables RX,FILL,REJ,LINE,TITLE
"RTN","PSOREJP1",171,0)
 DO
"RTN","PSOREJP1",172,0)
 . N PSOVDA,DA,PS
"RTN","PSOREJP1",173,0)
 . S (PSOVDA,DA)=RX,PS="REJECT"
"RTN","PSOREJP1",174,0)
 . N RX,REJ,FILL,LINE,TITLE D DP^PSORXVW
"RTN","PSOREJP1",175,0)
 ;
"RTN","PSOREJP1",176,0)
 S VALMBCK="R",VALM("TITLE")=TITLE
"RTN","PSOREJP1",177,0)
 Q
"RTN","PSOREJP1",178,0)
 ;
"RTN","PSOREJP1",179,0)
EDT ; - Rx Edit hidden action
"RTN","PSOREJP1",180,0)
 N VALMCNT,TITLE
"RTN","PSOREJP1",181,0)
 I $G(PSOBACK) D  Q
"RTN","PSOREJP1",182,0)
 . S VALMSG="Not available through Backdoor!",VALMBCK="R"
"RTN","PSOREJP1",183,0)
 S TITLE=VALM("TITLE")
"RTN","PSOREJP1",184,0)
 ;
"RTN","PSOREJP1",185,0)
 ; - DO structure used to avoid losing variables RX,FILL,REJ,LINE,TITLE
"RTN","PSOREJP1",186,0)
 DO
"RTN","PSOREJP1",187,0)
 . N PSOSITE,ORN,PSOPAR,PSOLIST,PSOREJCT
"RTN","PSOREJP1",188,0)
 . S PSOSITE=$$RXSITE^PSOBPSUT(RX,FILL),ORN=RX
"RTN","PSOREJP1",189,0)
 . S PSOPAR=$G(^PS(59,PSOSITE,1)),PSOLIST(1)=ORN_","
"RTN","PSOREJP1",190,0)
 . ; Variable PSOREJCT is used so that EPH^PSORXEDT has the RX 'passed' by this routine
"RTN","PSOREJP1",191,0)
 . S PSOREJCT=RX_U_FILL
"RTN","PSOREJP1",192,0)
 . N RX,REJ,FILL,LINE,TITLE D EPH^PSORXEDT
"RTN","PSOREJP1",193,0)
 ;
"RTN","PSOREJP1",194,0)
 K VALMBCK I $$CLOSED(RX,REJ),$D(PSOSTFLT),PSOSTFLT="U" S CHANGE=1 Q
"RTN","PSOREJP1",195,0)
 S VALMBCK="R",VALM("TITLE")=TITLE
"RTN","PSOREJP1",196,0)
 Q
"RTN","PSOREJP1",197,0)
 ;
"RTN","PSOREJP1",198,0)
OVR ; - Override a REJECT action
"RTN","PSOREJP1",199,0)
 N PSOET
"RTN","PSOREJP1",200,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",201,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP1",202,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",203,0)
 I PSOET S VALMSG="OVR not allowed for "_$$ELIGDISP(RX,FILL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP1",204,0)
 N COD1,COD2,COD3
"RTN","PSOREJP1",205,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",206,0)
 S COD1=$$OVRCOD^PSOREJU1(1,$$GET1^DIQ(52.25,REJ_","_RX,14)) I COD1="^"!(COD1="") S VALMBCK="R" Q
"RTN","PSOREJP1",207,0)
 S COD2=$$OVRCOD^PSOREJU1(2) I COD2="^" S VALMBCK="R" Q
"RTN","PSOREJP1",208,0)
 S COD3=$$OVRCOD^PSOREJU1(3) I COD3="^" S VALMBCK="R" Q
"RTN","PSOREJP1",209,0)
 D OVRDSP^PSOREJU1(COD1_"^"_COD2_"^"_COD3)
"RTN","PSOREJP1",210,0)
 D SEND^PSOREJP3(COD1_"^"_COD2_"^"_COD3,,,PSOET)
"RTN","PSOREJP1",211,0)
 Q
"RTN","PSOREJP1",212,0)
 ;
"RTN","PSOREJP1",213,0)
RES ; - Re-submit a claim action
"RTN","PSOREJP1",214,0)
 N PSOET
"RTN","PSOREJP1",215,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",216,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP1",217,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",218,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",219,0)
 D SEND^PSOREJP3(,,,PSOET)
"RTN","PSOREJP1",220,0)
 Q
"RTN","PSOREJP1",221,0)
 ;
"RTN","PSOREJP1",222,0)
CLA ; - Submit Clarification Code
"RTN","PSOREJP1",223,0)
 N CLA,PSOET
"RTN","PSOREJP1",224,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",225,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP1",226,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",227,0)
 I PSOET S VALMSG="CLA not allowed for "_$$ELIGDISP(RX,FILL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP1",228,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",229,0)
 ; Prompt for the Submission Clarification Codes (up to three)
"RTN","PSOREJP1",230,0)
 S CLA=$$CLA^PSOREJU1() I CLA="^"!(CLA="") S VALMBCK="R" Q
"RTN","PSOREJP1",231,0)
 W ! D SEND^PSOREJP3(,CLA,,PSOET)
"RTN","PSOREJP1",232,0)
 Q
"RTN","PSOREJP1",233,0)
 ;
"RTN","PSOREJP1",234,0)
PA ; - Submit Prior Authorization
"RTN","PSOREJP1",235,0)
 N PA,PSOET
"RTN","PSOREJP1",236,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",237,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP1",238,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",239,0)
 I PSOET S VALMSG="PA not allowed for "_$$ELIGDISP(RX,FILL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP1",240,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",241,0)
 ; Prompt for Prior Auth fields
"RTN","PSOREJP1",242,0)
 S PA=$$PA^PSOREJU2() I PA="^" S VALMBCK="R" Q
"RTN","PSOREJP1",243,0)
 W ! D SEND^PSOREJP3(,,PA,PSOET)
"RTN","PSOREJP1",244,0)
 Q
"RTN","PSOREJP1",245,0)
 ;
"RTN","PSOREJP1",246,0)
MP ; - Patient Medication Profile
"RTN","PSOREJP1",247,0)
 I $G(PSOBACK) D  Q
"RTN","PSOREJP1",248,0)
 . S VALMSG="Not available through Backdoor!",VALMBCK="R"
"RTN","PSOREJP1",249,0)
 N SITE,PATIENT
"RTN","PSOREJP1",250,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",251,0)
 S SITE=+$$RXSITE^PSOBPSUT(RX,FILL) S:$G(PSOSITE) SITE=PSOSITE
"RTN","PSOREJP1",252,0)
 S PATIENT=+$$GET1^DIQ(52,RX,2,"I")
"RTN","PSOREJP1",253,0)
 D LST^PSOPMP0(SITE,PATIENT) S VALMBCK="R"
"RTN","PSOREJP1",254,0)
 Q
"RTN","PSOREJP1",255,0)
 ;
"RTN","PSOREJP1",256,0)
EXIT ;
"RTN","PSOREJP1",257,0)
 K ^TMP("PSOREJP1",$J)
"RTN","PSOREJP1",258,0)
 Q
"RTN","PSOREJP1",259,0)
 ;
"RTN","PSOREJP1",260,0)
SETLN(TEXT,REV,UND,HIG) ; Sets a line to be displayed in the Body section
"RTN","PSOREJP1",261,0)
 N X
"RTN","PSOREJP1",262,0)
 S:$G(TEXT)="" $E(TEXT,80)=""
"RTN","PSOREJP1",263,0)
 S:$L(TEXT)>80 TEXT=$E(TEXT,1,80)
"RTN","PSOREJP1",264,0)
 S LINE=LINE+1,^TMP("PSOREJP1",$J,LINE,0)=$G(TEXT)
"RTN","PSOREJP1",265,0)
 ;
"RTN","PSOREJP1",266,0)
 I LINE>$G(LASTLN) D SAVE^VALM10(LINE) S LASTLN=LINE
"RTN","PSOREJP1",267,0)
 ;
"RTN","PSOREJP1",268,0)
 I $G(REV) D  Q
"RTN","PSOREJP1",269,0)
 . D CNTRL^VALM10(LINE,1,$L(TEXT),IORVON,IOINORM)
"RTN","PSOREJP1",270,0)
 . I $G(UND) D CNTRL^VALM10(LINE,$L(TEXT)+1,80,IOUON,IOINORM)
"RTN","PSOREJP1",271,0)
 I $G(UND) D CNTRL^VALM10(LINE,1,80,IOUON,IOINORM)
"RTN","PSOREJP1",272,0)
 I $G(HIG) D
"RTN","PSOREJP1",273,0)
 . D CNTRL^VALM10(LINE,HIG,80,IOINHI_$S($G(UND):IOUON,1:""),IOINORM)
"RTN","PSOREJP1",274,0)
 Q
"RTN","PSOREJP1",275,0)
HELP ;
"RTN","PSOREJP1",276,0)
 Q
"RTN","PSOREJP1",277,0)
 ;
"RTN","PSOREJP1",278,0)
CLOSED(RX,REJ,MSG) ; Returns whether the REJECT is RESOLVED or NOT
"RTN","PSOREJP1",279,0)
 I $$GET1^DIQ(52.25,REJ_","_RX,10,"I") D:$G(MSG)  Q 1
"RTN","PSOREJP1",280,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R" W $C(7)
"RTN","PSOREJP1",281,0)
 Q 0
"RTN","PSOREJP1",282,0)
 ;
"RTN","PSOREJP1",283,0)
REOPN(RX,REJ) ; Returns whether the REJECT was RE-OPENED or NOT
"RTN","PSOREJP1",284,0)
 Q $S($$GET1^DIQ(52.25,REJ_","_RX,23)="":0,1:1)
"RTN","PSOREJP1",285,0)
 ;
"RTN","PSOREJP1",286,0)
EXP(CODE) ; - Returns the explanation field (.02) for a reject code
"RTN","PSOREJP1",287,0)
 ;  Input:  (r) CODE - .01 field (Code) value from file 9002313.93
"RTN","PSOREJP1",288,0)
 ; Output: .02 field (Explanation) value from file 9002313.93
"RTN","PSOREJP1",289,0)
 N DIC,X,Y
"RTN","PSOREJP1",290,0)
 S DIC=9002313.93,DIC(0)="Z",X=CODE D ^DIC
"RTN","PSOREJP1",291,0)
 Q $P($G(Y(0)),"^",2)
"RTN","PSOREJP1",292,0)
 ;
"RTN","PSOREJP1",293,0)
OUT(RX) ; - Supported call by outside PROTOCOLs to act on specific REJECTs
"RTN","PSOREJP1",294,0)
 N I,RFL,DATA,REJ,PSOBACK,VALMCNT,RXN
"RTN","PSOREJP1",295,0)
 I '$D(^XUSEC("PSORPH",DUZ)) D  Q
"RTN","PSOREJP1",296,0)
 . S VALMSG="PSORPH key required to use the REJ action.",VALMBCK="R"
"RTN","PSOREJP1",297,0)
 I $G(PS)="REJECT" D
"RTN","PSOREJP1",298,0)
 . S VALMSG="REJ action is not available at this point.",VALMBCK="R"
"RTN","PSOREJP1",299,0)
 S PSOBACK=1
"RTN","PSOREJP1",300,0)
 S (RFL,I)=0 F I=1:1 Q:'$D(^PSRX(RX,1,I))  S RFL=I
"RTN","PSOREJP1",301,0)
 S X=$$FIND^PSOREJUT(RX,RFL,.DATA) S REJ=$O(DATA(""))
"RTN","PSOREJP1",302,0)
 I '$G(REJ) S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOREJP1",303,0)
 D EN(RX,REJ) S VALMBCK="R"
"RTN","PSOREJP1",304,0)
 Q
"RTN","PSOREJP1",305,0)
 ;
"RTN","PSOREJP1",306,0)
SMA ;Submit multiple actions
"RTN","PSOREJP1",307,0)
 N CLA,I,OVR,OVRSTR,PA,REJIEN,DUR,RSC,DURIEN,REQ,RSUB,PSOET
"RTN","PSOREJP1",308,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",309,0)
 S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP1",310,0)
 I PSOET S VALMSG="SMA not allowed for "_$$ELIGDISP(RX,FILL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP1",311,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",312,0)
 S DURIEN=$P($G(^PSRX(RX,"REJ",REJ,0)),U,11)
"RTN","PSOREJP1",313,0)
 D DURRESP^BPSNCPD3(DURIEN,.DUR) ; Reference to BPSNCPD3 supported by IA 4560
"RTN","PSOREJP1",314,0)
 ;
"RTN","PSOREJP1",315,0)
 ; Prompt for Prior Auth fields
"RTN","PSOREJP1",316,0)
 S PA=$$PA^PSOREJU2
"RTN","PSOREJP1",317,0)
 I PA="^" S VALMBCK="R" Q  ;User terminated or did not answer
"RTN","PSOREJP1",318,0)
 ;
"RTN","PSOREJP1",319,0)
 ; Prompt for submission clarification codes (up to three)
"RTN","PSOREJP1",320,0)
 W !
"RTN","PSOREJP1",321,0)
 S CLA=$$CLA^PSOREJU1
"RTN","PSOREJP1",322,0)
 I CLA="^" S VALMBCK="R" Q  ;User terminated or did not answer
"RTN","PSOREJP1",323,0)
 ;
"RTN","PSOREJP1",324,0)
 ; Check if DUR Overrides required - PSO*7*421
"RTN","PSOREJP1",325,0)
 S REQ=$$REQ I REQ="^" S VALMBCK="R" Q
"RTN","PSOREJP1",326,0)
 ;
"RTN","PSOREJP1",327,0)
 ; Prompt for DUR Overrides (up to 3) - option to delete default added - PSO*7*421
"RTN","PSOREJP1",328,0)
 S OVRSTR="",OVR=""
"RTN","PSOREJP1",329,0)
 I REQ S REJIEN=0 F RSUB=1:1:3 D  Q:OVR="^"!(OVR="")!(OVR="@")  S $P(OVRSTR,"~",RSUB)=OVR
"RTN","PSOREJP1",330,0)
 . I REJIEN]"" S REJIEN=$O(DUR(1,"DUR PPS",REJIEN))
"RTN","PSOREJP1",331,0)
 . S RSC="" I +REJIEN S RSC=$P($G(DUR(1,"DUR PPS",REJIEN,"REASON FOR SERVICE CODE"))," ",1)
"RTN","PSOREJP1",332,0)
 . S OVR=$$SMAOVR^PSOREJU1(RSC,RSUB)
"RTN","PSOREJP1",333,0)
 I OVR="^" S VALMBCK="R" Q  ;User exited or timed-out
"RTN","PSOREJP1",334,0)
 ;
"RTN","PSOREJP1",335,0)
 W !!,?6,"RECAP:"
"RTN","PSOREJP1",336,0)
 W !,?6,"Prior Authorization Type       : ",$P(PA,"^"),"  ",$$DSC^PSOREJU1(9002313.26,$P(PA,"^"),.02)
"RTN","PSOREJP1",337,0)
 W !,?6,"Prior Authorization Number     : ",$P(PA,"^",2)
"RTN","PSOREJP1",338,0)
 W !,?6,"Submission Clarification Code 1: ",$P(CLA,"~",1),"  ",$$DSC^PSOREJU1(9002313.25,$P(CLA,"~",1),.02)
"RTN","PSOREJP1",339,0)
 I $P(CLA,"~",2)]"" W !,?6,"Submission Clarification Code 2: ",$P(CLA,"~",2),"  ",$$DSC^PSOREJU1(9002313.25,$P(CLA,"~",2),.02)
"RTN","PSOREJP1",340,0)
 I $P(CLA,"~",3)]"" W !,?6,"Submission Clarification Code 3: ",$P(CLA,"~",3),"  ",$$DSC^PSOREJU1(9002313.25,$P(CLA,"~",3),.02)
"RTN","PSOREJP1",341,0)
 W !,?6,"Reason for Service Code 1      : ",$P($P(OVRSTR,"~",1),U,1),"  ",$$DSC^PSOREJU1(9002313.23,$P($P(OVRSTR,"~",1),U,1),1)
"RTN","PSOREJP1",342,0)
 W !,?6,"Professional Service Code 1    : ",$P($P(OVRSTR,"~",1),U,2),"  ",$$DSC^PSOREJU1(9002313.21,$P($P(OVRSTR,"~",1),U,2),1)
"RTN","PSOREJP1",343,0)
 W !,?6,"Result of Service Code 1       : ",$P($P(OVRSTR,"~",1),U,3),"  ",$$DSC^PSOREJU1(9002313.22,$P($P(OVRSTR,"~",1),U,3),1)
"RTN","PSOREJP1",344,0)
 I $P($P(OVRSTR,"~",2),U,1)]"" W !,?6,"Reason for Service Code 2      : ",$P($P(OVRSTR,"~",2),U,1),"  ",$$DSC^PSOREJU1(9002313.23,$P($P(OVRSTR,"~",2),U,1),1)
"RTN","PSOREJP1",345,0)
 I $P($P(OVRSTR,"~",2),U,2)]"" W !,?6,"Professional Service Code 2    : ",$P($P(OVRSTR,"~",2),U,2),"  ",$$DSC^PSOREJU1(9002313.21,$P($P(OVRSTR,"~",2),U,2),1)
"RTN","PSOREJP1",346,0)
 I $P($P(OVRSTR,"~",2),U,3)]"" W !,?6,"Result of Service Code 2       : ",$P($P(OVRSTR,"~",2),U,3),"  ",$$DSC^PSOREJU1(9002313.22,$P($P(OVRSTR,"~",2),U,3),1)
"RTN","PSOREJP1",347,0)
 I $P($P(OVRSTR,"~",3),U,1)]"" W !,?6,"Reason for Service Code 3      : ",$P($P(OVRSTR,"~",3),U,1),"  ",$$DSC^PSOREJU1(9002313.23,$P($P(OVRSTR,"~",3),U,1),1)
"RTN","PSOREJP1",348,0)
 I $P($P(OVRSTR,"~",3),U,2)]"" W !,?6,"Professional Service Code 3    : ",$P($P(OVRSTR,"~",3),U,2),"  ",$$DSC^PSOREJU1(9002313.21,$P($P(OVRSTR,"~",3),U,2),1)
"RTN","PSOREJP1",349,0)
 I $P($P(OVRSTR,"~",3),U,3)]"" W !,?6,"Result of Service Code 3       : ",$P($P(OVRSTR,"~",3),U,3),"  ",$$DSC^PSOREJU1(9002313.22,$P($P(OVRSTR,"~",3),U,3),1)
"RTN","PSOREJP1",350,0)
 W ! D SEND^PSOREJP3(OVRSTR,CLA,PA,PSOET)
"RTN","PSOREJP1",351,0)
 Q
"RTN","PSOREJP1",352,0)
 ;
"RTN","PSOREJP1",353,0)
VRX ; View ePharmacy Prescription - invoked from the Reject Information screen
"RTN","PSOREJP1",354,0)
 N BPSVRX
"RTN","PSOREJP1",355,0)
 D FULL^VALM1
"RTN","PSOREJP1",356,0)
 S BPSVRX("RXIEN")=$G(RX)
"RTN","PSOREJP1",357,0)
 S BPSVRX("FILL#")=$G(FILL)
"RTN","PSOREJP1",358,0)
 D ^BPSVRX    ; DBIA #5723
"RTN","PSOREJP1",359,0)
 S VALMBCK="R"
"RTN","PSOREJP1",360,0)
 Q
"RTN","PSOREJP1",361,0)
 ;
"RTN","PSOREJP1",362,0)
VER ; View ePharmacy Prescription - invoked from the Rx view hidden action of Medication Profile
"RTN","PSOREJP1",363,0)
 N BPSVRX
"RTN","PSOREJP1",364,0)
 K ^TMP("BPSVRX-PSO VIEW RX",$J)
"RTN","PSOREJP1",365,0)
 D FULL^VALM1
"RTN","PSOREJP1",366,0)
 ;
"RTN","PSOREJP1",367,0)
 ; save the current PSO Rx display array and header
"RTN","PSOREJP1",368,0)
 M ^TMP("BPSVRX-PSO VIEW RX",$J,"PSOHDR")=^TMP("PSOHDR",$J)
"RTN","PSOREJP1",369,0)
 M ^TMP("BPSVRX-PSO VIEW RX",$J,"PSOAL")=^TMP("PSOAL",$J)
"RTN","PSOREJP1",370,0)
 ;
"RTN","PSOREJP1",371,0)
 S BPSVRX("RXIEN")=$G(RXN)    ; Rx ien ptr file 52
"RTN","PSOREJP1",372,0)
 D ^BPSVRX    ; DBIA #5723
"RTN","PSOREJP1",373,0)
 ;
"RTN","PSOREJP1",374,0)
 ; restore the PSO Rx display array and header upon return
"RTN","PSOREJP1",375,0)
 I '$D(^TMP("PSOHDR",$J)) M ^TMP("PSOHDR",$J)=^TMP("BPSVRX-PSO VIEW RX",$J,"PSOHDR")
"RTN","PSOREJP1",376,0)
 I '$D(^TMP("PSOAL",$J)) M ^TMP("PSOAL",$J)=^TMP("BPSVRX-PSO VIEW RX",$J,"PSOAL")
"RTN","PSOREJP1",377,0)
 ;
"RTN","PSOREJP1",378,0)
 S VALMBCK="R"
"RTN","PSOREJP1",379,0)
 K ^TMP("BPSVRX-PSO VIEW RX",$J)
"RTN","PSOREJP1",380,0)
 Q
"RTN","PSOREJP1",381,0)
 ;
"RTN","PSOREJP1",382,0)
REQ() ;Prompt if DUR Rejects are required
"RTN","PSOREJP1",383,0)
 N DIR,DTOUT,DTOUT,DIRUT,DIROUT,X,Y
"RTN","PSOREJP1",384,0)
 S DIR("?")="Enter No if Reason Codes are not required. Enter Yes to proceed and enter up to 3 sets of override Reason Codes. To delete default Reason Codes, enter ""@""."
"RTN","PSOREJP1",385,0)
 S DIR("A")="Enter DUR codes",DIR(0)="Y",DIR("B")="YES" W ! D ^DIR
"RTN","PSOREJP1",386,0)
 I $D(DIRUT)!$D(DIROUT) Q "^" ;User exited or timed-out
"RTN","PSOREJP1",387,0)
 Q Y
"RTN","PSOREJP2")
0^3^B183401384
"RTN","PSOREJP2",1,0)
PSOREJP2 ;BIRM/MFR - Third Party Rejects View/Process ;04/28/05
"RTN","PSOREJP2",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,247,260,287,289,358,385,403,421,427,448**;DEC 1997;Build 25
"RTN","PSOREJP2",3,0)
 ;Reference to ^PSSLOCK supported by IA #2789
"RTN","PSOREJP2",4,0)
 ;Reference to GETDAT^BPSBUTL supported by IA #4719
"RTN","PSOREJP2",5,0)
 ;Reference to ^PS(55 supported by IA #2228
"RTN","PSOREJP2",6,0)
 ;Reference to ^DIC(36 supported by ICR #6142
"RTN","PSOREJP2",7,0)
 ;
"RTN","PSOREJP2",8,0)
 N PSORJSRT,PSOPTFLT,PSODRFLT,PSORXFLT,PSOBYFLD,PSOSTFLT,DIR,DIRUT,DUOUT,DTOUT
"RTN","PSOREJP2",9,0)
 N PSOINFLT,PSODTRNG,PSOINGRP,PSOTRITG,PSOCVATG
"RTN","PSOREJP2",10,0)
 S PSORJASC=1,PSOINGRP=0,PSOTRITG=1,PSOCVATG=1
"RTN","PSOREJP2",11,0)
 ;
"RTN","PSOREJP2",12,0)
 ; - Division/Site selection
"RTN","PSOREJP2",13,0)
 D SEL^PSOREJU1("DIVISION","^PS(59,",.PSOREJST,$$GET1^DIQ(59,+$G(PSOSITE),.01)) I $G(PSOREJST)="^" G EXIT
"RTN","PSOREJP2",14,0)
 ;
"RTN","PSOREJP2",15,0)
 ; - Date range selection
"RTN","PSOREJP2",16,0)
 W ! S PSODTRNG=$$DTRNG("T-90","T") I PSODTRNG="^" G EXIT
"RTN","PSOREJP2",17,0)
 ;
"RTN","PSOREJP2",18,0)
SEL ; - Field Selection (Patient/Drug/Rx)
"RTN","PSOREJP2",19,0)
 S DIR(0)="S^P:PATIENT;D:DRUG;R:Rx;I:INSURANCE",DIR("B")="P"
"RTN","PSOREJP2",20,0)
 S DIR("A")="By (P)atient, (D)rug, (R)x or (I)nsurance" D ^DIR I $D(DIRUT) G EXIT
"RTN","PSOREJP2",21,0)
 S PSOBYFLD=Y,DIR("B")=""
"RTN","PSOREJP2",22,0)
 ;
"RTN","PSOREJP2",23,0)
 I PSOBYFLD="P" D  I $G(PSOPTFLT)="^" G SEL
"RTN","PSOREJP2",24,0)
 . S (PSODRFLT,PSORXFLT,PSOINFLT)="ALL",PSORJSRT="DR"
"RTN","PSOREJP2",25,0)
 . D SEL^PSOREJU1("PATIENT","^DPT(",.PSOPTFLT)
"RTN","PSOREJP2",26,0)
 ;
"RTN","PSOREJP2",27,0)
 I PSOBYFLD="D" D  I $G(PSODRFLT)="^" G SEL
"RTN","PSOREJP2",28,0)
 . S (PSOPTFLT,PSORXFLT,PSOINFLT)="ALL",PSORJSRT="PA"
"RTN","PSOREJP2",29,0)
 . D SEL^PSOREJU1("DRUG","^PSDRUG(",.PSODRFLT)
"RTN","PSOREJP2",30,0)
 ;
"RTN","PSOREJP2",31,0)
 I PSOBYFLD="R" D  I $D(DUOUT)!$D(DTOUT)!'$G(PSORXFLT) G SEL
"RTN","PSOREJP2",32,0)
 . S (PSOPTFLT,PSODRFLT,PSOINFLT)="ALL",PSORJSRT="PA"
"RTN","PSOREJP2",33,0)
 . N DIC,Y,X,OK K PSOSTFLT,PSORXFLT
"RTN","PSOREJP2",34,0)
 . S DIC=52,DIC(0)="QEZA",DIC("A")="PRESCRIPTION: "
"RTN","PSOREJP2",35,0)
 . F  W ! D ^DIC D  Q:$G(OK) 
"RTN","PSOREJP2",36,0)
 . . I $D(DUOUT)!$D(DTOUT)!(X="") S OK=1 Q
"RTN","PSOREJP2",37,0)
 . . I '$O(^PSRX(+Y,"REJ",0)) D  Q
"RTN","PSOREJP2",38,0)
 . . . W !?40,"Prescription does not have rejects!",$C(7)
"RTN","PSOREJP2",39,0)
 . . S PSORXFLT=+Y,OK=1
"RTN","PSOREJP2",40,0)
 ;
"RTN","PSOREJP2",41,0)
 ; Insurance Company Lookup - ICR 6142
"RTN","PSOREJP2",42,0)
 I PSOBYFLD="I" D  I $G(PSOINFLT)="^" G SEL
"RTN","PSOREJP2",43,0)
 . S (PSOPTFLT,PSODRFLT,PSORXFLT)="ALL",PSORJSRT="PA"
"RTN","PSOREJP2",44,0)
 . D SEL^PSOREJU1("INSURANCE","^DIC(36,",.PSOINFLT)
"RTN","PSOREJP2",45,0)
 ;
"RTN","PSOREJP2",46,0)
 ; - Status Selection (UNRESOLVED or RESOLVED)
"RTN","PSOREJP2",47,0)
 I $G(PSOSTFLT)="" D  I $D(DIRUT) G EXIT
"RTN","PSOREJP2",48,0)
 . S DIR(0)="S^U:UNRESOLVED;R:RESOLVED;B:BOTH",DIR("B")="B"
"RTN","PSOREJP2",49,0)
 . S DIR("A")="(U)NRESOLVED, (R)RESOLVED or (B)OTH REJECT statuses" D ^DIR
"RTN","PSOREJP2",50,0)
 . S PSOSTFLT=Y
"RTN","PSOREJP2",51,0)
 ;
"RTN","PSOREJP2",52,0)
 D LST^PSOREJP0("VP")
"RTN","PSOREJP2",53,0)
 ;
"RTN","PSOREJP2",54,0)
EXIT Q
"RTN","PSOREJP2",55,0)
 ;
"RTN","PSOREJP2",56,0)
CLO ; - Ignore a REJECT hidden action
"RTN","PSOREJP2",57,0)
 N PSOTRIC,X,PSOET
"RTN","PSOREJP2",58,0)
 ;
"RTN","PSOREJP2",59,0)
 ; ESG - PSO*7*448 - Bug fix, should pull FILL from sub-file 52.25.
"RTN","PSOREJP2",60,0)
 I '$D(FILL) S FILL=+$$GET1^DIQ(52.25,REJ_","_RX,5)
"RTN","PSOREJP2",61,0)
 S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,FILL,PSOTRIC)
"RTN","PSOREJP2",62,0)
 ;
"RTN","PSOREJP2",63,0)
 ;reference to ^XUSEC( supported by IA 10076
"RTN","PSOREJP2",64,0)
 ;bld, PSO*7*358
"RTN","PSOREJP2",65,0)
 I PSOTRIC,'$D(^XUSEC("PSO TRICARE/CHAMPVA",DUZ)) S VALMSG="Action Requires <PSO TRICARE/CHAMPVA> security key",VALMBCK="R" Q
"RTN","PSOREJP2",66,0)
 ;if TRICARE or CHAMPVA and user has security key, prompt to continue or not
"RTN","PSOREJP2",67,0)
 ;
"RTN","PSOREJP2",68,0)
 ;
"RTN","PSOREJP2",69,0)
 I PSOTRIC,'$$CONT^PSOREJU1() S VALMBCK="R" Q
"RTN","PSOREJP2",70,0)
 ;
"RTN","PSOREJP2",71,0)
 I $$CLOSED^PSOREJP1(RX,REJ) D  Q
"RTN","PSOREJP2",72,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R"
"RTN","PSOREJP2",73,0)
 N DIR,COM
"RTN","PSOREJP2",74,0)
 D FULL^VALM1
"RTN","PSOREJP2",75,0)
 I '$$SIG^PSOREJU1() S VALMBCK="R" Q
"RTN","PSOREJP2",76,0)
 W !
"RTN","PSOREJP2",77,0)
 S:PSOTRIC COM=$$TCOM^PSOREJP3(RX,FILL) S:'PSOTRIC COM=$$COM^PSOREJU1()
"RTN","PSOREJP2",78,0)
 I COM="^" S VALMBCK="R" Q
"RTN","PSOREJP2",79,0)
 W !
"RTN","PSOREJP2",80,0)
 S DIR(0)="Y",DIR("A")="     Confirm? ",DIR("B")="NO"
"RTN","PSOREJP2",81,0)
 S DIR("A",1)="     When you confirm this REJECT will be marked RESOLVED."
"RTN","PSOREJP2",82,0)
 S DIR("A",2)=" "
"RTN","PSOREJP2",83,0)
 D ^DIR I $G(Y)=0!$D(DIRUT) S VALMBCK="R" Q
"RTN","PSOREJP2",84,0)
 W ?40,"[Closing..." D CLOSE^PSOREJUT(RX,FILL,REJ,DUZ,6,COM,"","","","","",1) W "OK]",!,$C(7) H 1
"RTN","PSOREJP2",85,0)
 I $D(PSOSTFLT),PSOSTFLT'="B" S CHANGE=1
"RTN","PSOREJP2",86,0)
 ;
"RTN","PSOREJP2",87,0)
 I $$PTLBL(RX,FILL) D PRINT^PSOREJP3(RX,FILL)
"RTN","PSOREJP2",88,0)
 I PSOTRIC D
"RTN","PSOREJP2",89,0)
 .S PSOET=$$PSOET^PSOREJP3(RX,FILL)
"RTN","PSOREJP2",90,0)
 .D AUDIT^PSOTRI(RX,FILL,,COM,$S(PSOET:"N",1:"R"),$S(PSOTRIC=1:"T",PSOTRIC=2:"C",1:""))
"RTN","PSOREJP2",91,0)
 ;
"RTN","PSOREJP2",92,0)
 Q
"RTN","PSOREJP2",93,0)
 ;
"RTN","PSOREJP2",94,0)
OPN ; - Re-open a Closed/Resolved Reject
"RTN","PSOREJP2",95,0)
 I '$$CLOSED^PSOREJP1(RX,REJ) D  Q
"RTN","PSOREJP2",96,0)
 . S VALMSG="This Reject is NOT marked resolved!",VALMBCK="R"
"RTN","PSOREJP2",97,0)
 ;cnf, PSO*7*358, check for discontinued and not released
"RTN","PSOREJP2",98,0)
 ;  12 - DISCONTINUED
"RTN","PSOREJP2",99,0)
 ;  14 - DISCONTINUED BY PROVIDER
"RTN","PSOREJP2",100,0)
 ;  15 - DISCONTINUED (EDIT)
"RTN","PSOREJP2",101,0)
 N DCSTAT,PSOREL
"RTN","PSOREJP2",102,0)
 S DCSTAT=$$GET1^DIQ(52,RX,100,"I")
"RTN","PSOREJP2",103,0)
 S PSOREL=0 D
"RTN","PSOREJP2",104,0)
 . I 'FILL S PSOREL=+$$GET1^DIQ(52,RX,31,"I")
"RTN","PSOREJP2",105,0)
 . I FILL S PSOREL=+$$GET1^DIQ(52.1,FILL_","_RX,17,"I")
"RTN","PSOREJP2",106,0)
 I 'PSOREL,"/12/14/15/"[("/"_DCSTAT_"/") S VALMSG="Discontinued Rx has not been released.",VALMBCK="R" Q
"RTN","PSOREJP2",107,0)
 N DIR,COM,REJDATA,NEWDATA,X,REOPEN
"RTN","PSOREJP2",108,0)
 D FULL^VALM1
"RTN","PSOREJP2",109,0)
 I '$$SIG^PSOREJU1() S VALMBCK="R" Q
"RTN","PSOREJP2",110,0)
 W !
"RTN","PSOREJP2",111,0)
 S DIR(0)="Y",DIR("A")="     Confirm",DIR("B")="NO"
"RTN","PSOREJP2",112,0)
 S DIR("A",1)="     When you confirm this REJECT will be marked UNRESOLVED."
"RTN","PSOREJP2",113,0)
 S DIR("A",2)=" "
"RTN","PSOREJP2",114,0)
 D ^DIR I $G(Y)=0!$D(DIRUT) S VALMBCK="R" Q
"RTN","PSOREJP2",115,0)
 ;
"RTN","PSOREJP2",116,0)
 W ?40,"[Re-opening..."
"RTN","PSOREJP2",117,0)
 K REJDATA D GET^PSOREJU2(RX,FILL,.REJDATA,REJ,1) D SETOPN^PSOREJU2(RX,REJ)
"RTN","PSOREJP2",118,0)
 K NEWDATA M NEWDATA=REJDATA(REJ) S NEWDATA("PHARMACIST")=DUZ
"RTN","PSOREJP2",119,0)
 S REOPEN=1 D SAVE^PSOREJUT(RX,FILL,.NEWDATA,REOPEN)
"RTN","PSOREJP2",120,0)
 I $G(NEWDATA("REJECT IEN")),$D(REJDATA(REJ,"COMMENTS")) D
"RTN","PSOREJP2",121,0)
 . S COM=0 F  S COM=$O(REJDATA(REJ,"COMMENTS",COM)) Q:'COM  D
"RTN","PSOREJP2",122,0)
 . . S X(1)=REJDATA(REJ,"COMMENTS",COM,"COMMENTS")
"RTN","PSOREJP2",123,0)
 . . S X(2)=REJDATA(REJ,"COMMENTS",COM,"DATE/TIME")
"RTN","PSOREJP2",124,0)
 . . S X(3)=REJDATA(REJ,"COMMENTS",COM,"USER")
"RTN","PSOREJP2",125,0)
 . . D SAVECOM^PSOREJP3(RX,NEWDATA("REJECT IEN"),X(1),X(2),X(3))
"RTN","PSOREJP2",126,0)
 D RETRXF^PSOREJU2(RX,FILL,0)
"RTN","PSOREJP2",127,0)
 W "OK]",!,$C(7) H 1
"RTN","PSOREJP2",128,0)
 S CHANGE=1
"RTN","PSOREJP2",129,0)
 Q
"RTN","PSOREJP2",130,0)
 ;
"RTN","PSOREJP2",131,0)
SDC ; - Suspense Date Calculation
"RTN","PSOREJP2",132,0)
 D CHG(1)
"RTN","PSOREJP2",133,0)
 Q
"RTN","PSOREJP2",134,0)
 ;
"RTN","PSOREJP2",135,0)
CSD ;CSD - Change Suspense Date action entry point
"RTN","PSOREJP2",136,0)
 D CHG(0)
"RTN","PSOREJP2",137,0)
 Q
"RTN","PSOREJP2",138,0)
 ;
"RTN","PSOREJP2",139,0)
CHG(SDC) ; - Change Suspense Date action
"RTN","PSOREJP2",140,0)
 ;Local:
"RTN","PSOREJP2",141,0)
 ;  SDC - indicates if the suspense date is being manually changed or calculated. 
"RTN","PSOREJP2",142,0)
 ;  RX  - RX IEN
"RTN","PSOREJP2",143,0)
 ;  REJ - Reject indicator
"RTN","PSOREJP2",144,0)
 ;
"RTN","PSOREJP2",145,0)
 I '$G(SDC) S SDC=0
"RTN","PSOREJP2",146,0)
 I $$CLOSED^PSOREJP1(RX,REJ) D  Q
"RTN","PSOREJP2",147,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R" W $C(7)
"RTN","PSOREJP2",148,0)
 ;
"RTN","PSOREJP2",149,0)
 N SUSDT,PSOMSG,Y,SUSRX,%DT,DA,DIE,DR,ISSDT,EXPDT,PSOMSG,CUTDT,FILDT,RFL,COB
"RTN","PSOREJP2",150,0)
 ;
"RTN","PSOREJP2",151,0)
 S RFL=+$$GET1^DIQ(52.25,REJ_","_RX,5),SUSDT=$$RXSUDT^PSOBPSUT(RX,RFL)
"RTN","PSOREJP2",152,0)
 I RFL>0 S FILDT=$$GET1^DIQ(52.1,RFL_","_RX,.01,"I")
"RTN","PSOREJP2",153,0)
 E  S FILDT=$$GET1^DIQ(52,RX,22,"I")
"RTN","PSOREJP2",154,0)
 I SUSDT="" S VALMSG="Prescription is not suspended!",VALMBCK="R" W $C(7) Q
"RTN","PSOREJP2",155,0)
 I $$RXRLDT^PSOBPSUT(RX,RFL) S VALMSG="Prescription has been released already!",VALMBCK="R" W $C(7) Q
"RTN","PSOREJP2",156,0)
 ;cnf, PSO*7*358, add PSOET logic for TRICARE/CHAMPVA non-billable
"RTN","PSOREJP2",157,0)
 S PSOET=$$PSOET^PSOREJP3(RX,RFL)
"RTN","PSOREJP2",158,0)
 I PSOET S VALMSG=$S(SDC=1:"SDC",1:"CSD")_" not allowed for "_$$ELIGDISP^PSOREJP1(RX,RFL)_" Non-Billable claim.",VALMBCK="R" Q
"RTN","PSOREJP2",159,0)
 ;
"RTN","PSOREJP2",160,0)
 D PSOL^PSSLOCK(RX) I '$G(PSOMSG) S VALMSG=$P(PSOMSG,"^",2),VALMBCK="R" W $C(7) Q
"RTN","PSOREJP2",161,0)
 ;
"RTN","PSOREJP2",162,0)
 S ISSDT=$$GET1^DIQ(52,RX,1,"I"),EXPDT=$$GET1^DIQ(52,RX,26,"I")
"RTN","PSOREJP2",163,0)
 S SUSRX=$O(^PS(52.5,"B",RX,0))
"RTN","PSOREJP2",164,0)
 ;
"RTN","PSOREJP2",165,0)
 D FULL^VALM1
"RTN","PSOREJP2",166,0)
 I SDC D  I SUSDT=0 D PSOUL^PSSLOCK(RX) S VALMBCK="R" Q
"RTN","PSOREJP2",167,0)
 . S COB=$$GET1^DIQ(52.25,REJ_","_RX,27,"I")
"RTN","PSOREJP2",168,0)
 . I 'COB S COB=1
"RTN","PSOREJP2",169,0)
 . S SUSDT=$$CALCSD(RX,RFL,COB)
"RTN","PSOREJP2",170,0)
 ;
"RTN","PSOREJP2",171,0)
SUDT ; Asks for the new Suspense Date
"RTN","PSOREJP2",172,0)
 N X1,X2
"RTN","PSOREJP2",173,0)
 S X1=FILDT,X2=89 D C^%DTC S CUTDT=X
"RTN","PSOREJP2",174,0)
 I SDC,SUSDT,SUSDT<DT W !,*7,"  **CALCULATED SUSPENSE DATE IS IN THE PAST:  ",$$FMTE^XLFDT(SUSDT),"**" S SUSDT=""
"RTN","PSOREJP2",175,0)
 E  S %DT("B")=$$FMTE^XLFDT(SUSDT)
"RTN","PSOREJP2",176,0)
 S %DT="EA",%DT("A")=$S(SDC:"NEW ",1:"")_"SUSPENSE DATE: "
"RTN","PSOREJP2",177,0)
 W ! D ^%DT I Y<0!($D(DTOUT)) D PSOUL^PSSLOCK(RX) S VALMBCK="R" I (SDC) W !,"ACTION NOT TAKEN!" Q
"RTN","PSOREJP2",178,0)
 I Y<ISSDT D  G SUDT
"RTN","PSOREJP2",179,0)
 . W !!?5,"Suspense Date cannot be before Issue Date: ",$$FMTE^XLFDT(ISSDT),".",$C(7)
"RTN","PSOREJP2",180,0)
 I Y>EXPDT D  G SUDT
"RTN","PSOREJP2",181,0)
 . W !!?5,"Suspense Date cannot be after Expiration Date: ",$$FMTE^XLFDT(EXPDT),".",$C(7)
"RTN","PSOREJP2",182,0)
 I Y>CUTDT D  G SUDT
"RTN","PSOREJP2",183,0)
 . W !!?5,"Suspense Date cannot be after fill date plus 90 days: "_$$FMTE^XLFDT(CUTDT),".",$C(7)
"RTN","PSOREJP2",184,0)
 S SUSDT=Y
"RTN","PSOREJP2",185,0)
 ;
"RTN","PSOREJP2",186,0)
 N DIR,DIRUT W !
"RTN","PSOREJP2",187,0)
 S DIR("A",1)="     When you confirm, this REJECT will be marked resolved. A"
"RTN","PSOREJP2",188,0)
 S DIR("A",2)="     new claim will be re-submitted to the 3rd party payer"
"RTN","PSOREJP2",189,0)
 I $$GET1^DIQ(52.5,SUSRX,3)="" D
"RTN","PSOREJP2",190,0)
 . I SUSDT>DT D
"RTN","PSOREJP2",191,0)
 . . S DIR("A",3)="     when the prescription label for this fill is printed"
"RTN","PSOREJP2",192,0)
 . . S DIR("A",4)="     from suspense on "_$$FMTE^XLFDT(SUSDT)_"."
"RTN","PSOREJP2",193,0)
 . . S DIR("A",5)=" "
"RTN","PSOREJP2",194,0)
 . . S DIR("A",6)="     Note: THE LABEL FOR THIS PRESCRIPTION FILL WILL NOT BE"
"RTN","PSOREJP2",195,0)
 . . S DIR("A",7)="           PRINTED LOCAL FROM SUSPENSE BEFORE "_$$FMTE^XLFDT(SUSDT)_"."
"RTN","PSOREJP2",196,0)
 . E  D
"RTN","PSOREJP2",197,0)
 . . S DIR("A",3)="     the next time local labels are printed from suspense."
"RTN","PSOREJP2",198,0)
 E  D
"RTN","PSOREJP2",199,0)
 . I SUSDT>DT D
"RTN","PSOREJP2",200,0)
 . . S DIR("A",3)="     when the prescription is transmitted to CMOP on "
"RTN","PSOREJP2",201,0)
 . . S DIR("A",4)="     "_$$FMTE^XLFDT(SUSDT)_"."
"RTN","PSOREJP2",202,0)
 . . S DIR("A",5)=" "
"RTN","PSOREJP2",203,0)
 . . S DIR("A",6)="     Note: THIS PRESCRIPTION FILL WILL NOT BE TRANSMITTED TO"
"RTN","PSOREJP2",204,0)
 . . S DIR("A",7)="           CMOP BEFORE "_$$FMTE^XLFDT(SUSDT)_"."
"RTN","PSOREJP2",205,0)
 . E  D
"RTN","PSOREJP2",206,0)
 . . S DIR("A",3)="     when this prescription fill is transmitted to CMOP on"
"RTN","PSOREJP2",207,0)
 . . S DIR("A",4)="     the next CMOP transmission."
"RTN","PSOREJP2",208,0)
    ;
"RTN","PSOREJP2",209,0)
 S DIR("A",$O(DIR("A",""),-1)+1)=" "
"RTN","PSOREJP2",210,0)
 S DIR(0)="Y",DIR("A")="     Confirm? ",DIR("B")="YES"
"RTN","PSOREJP2",211,0)
 D ^DIR I $G(Y)=0!$D(DIRUT) S VALMBCK="R" D PSOUL^PSSLOCK(RX) Q
"RTN","PSOREJP2",212,0)
 ;
"RTN","PSOREJP2",213,0)
 ; - Suspense/Fill Date updates
"RTN","PSOREJP2",214,0)
 I SUSDT'=$$RXSUDT^PSOBPSUT(RX,RFL) D
"RTN","PSOREJP2",215,0)
 . N DA,DIE,DR,PSOX,SFN,INDT,DEAD
"RTN","PSOREJP2",216,0)
 . S DA=SUSRX,DIE="^PS(52.5,",DR=".02///"_SUSDT D ^DIE
"RTN","PSOREJP2",217,0)
 . S SFN=SUSRX,DEAD=0,INDT=SUSDT D CHANGE^PSOSUCH1(RX,RFL)
"RTN","PSOREJP2",218,0)
 ;
"RTN","PSOREJP2",219,0)
 ; - Flagging the prescription to be re-submitted to ECME on the next CMOP/Print from Suspense
"RTN","PSOREJP2",220,0)
 D RETRXF^PSOREJU2(RX,RFL,1)
"RTN","PSOREJP2",221,0)
 W ?40,"[Closing..."
"RTN","PSOREJP2",222,0)
 D CLOSE^PSOREJUT(RX,RFL,REJ,DUZ,8,"Fill Date changed to "_$$FMTE^XLFDT(SUSDT)_". A new claim will be re-submitted on this date.")
"RTN","PSOREJP2",223,0)
 W "OK]",!,$C(7) H 1 I $D(PSOSTFLT),PSOSTFLT'="B" S CHANGE=1
"RTN","PSOREJP2",224,0)
 D PSOUL^PSSLOCK(RX)
"RTN","PSOREJP2",225,0)
 Q
"RTN","PSOREJP2",226,0)
 ;
"RTN","PSOREJP2",227,0)
PTLBL(RX,RFL) ; Returns whether the user should be prompted for 'Print Label?' or not
"RTN","PSOREJP2",228,0)
 N PTLBL,CMP,LBL,REPRINT
"RTN","PSOREJP2",229,0)
 N PSOTRIC S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,.PSOTRIC)
"RTN","PSOREJP2",230,0)
 I $$FIND^PSOREJUT(RX,RFL) Q 0       ; Has OPEN/UNRESOLVED 3rd pary payer reject
"RTN","PSOREJP2",231,0)
 I $$GET1^DIQ(52,RX,100,"I") Q 0     ; Rx status not ACTIVE
"RTN","PSOREJP2",232,0)
 I $$RXRLDT^PSOBPSUT(RX,RFL),'PSOTRIC Q 0     ; Rx Released
"RTN","PSOREJP2",233,0)
 ; - CMOP Rx fill?
"RTN","PSOREJP2",234,0)
 S PTLBL=1,CMP=0
"RTN","PSOREJP2",235,0)
 F  S CMP=$O(^PSRX(RX,4,CMP)) Q:'CMP  D  Q:'PTLBL
"RTN","PSOREJP2",236,0)
 . I +$$GET1^DIQ(52.01,CMP_","_RX,2,"I")=RFL S PTLBL=0
"RTN","PSOREJP2",237,0)
 I 'PTLBL Q 0
"RTN","PSOREJP2",238,0)
 ; - Label already printed for Rx fill?
"RTN","PSOREJP2",239,0)
 S LBL=0
"RTN","PSOREJP2",240,0)
 F  S LBL=$O(^PSRX(RX,"L",LBL)) Q:'LBL  D  Q:'PTLBL
"RTN","PSOREJP2",241,0)
 . I +$$GET1^DIQ(52.032,LBL_","_RX,1,"I")'=RFL Q
"RTN","PSOREJP2",242,0)
 . I $G(PSOTRIC)&($$RXRLDT^PSOBPSUT(RX,RFL)) S REPRINT=1 Q
"RTN","PSOREJP2",243,0)
 . I $$GET1^DIQ(52.032,LBL_","_RX,4,"I") Q
"RTN","PSOREJP2",244,0)
 . I $$GET1^DIQ(52.032,LBL_","_RX,2)["INTERACTION" Q
"RTN","PSOREJP2",245,0)
 . S PTLBL=0
"RTN","PSOREJP2",246,0)
 ;
"RTN","PSOREJP2",247,0)
 I PTLBL D
"RTN","PSOREJP2",248,0)
 . N DIR,DIRUT,Y
"RTN","PSOREJP2",249,0)
 . W ! S DIR(0)="Y",DIR("A")=$S('$G(REPRINT):"Print Label",1:"Reprint Label"),DIR("B")="YES"
"RTN","PSOREJP2",250,0)
 . D ^DIR I $G(Y)=0!$D(DIRUT) S PTLBL=0 Q
"RTN","PSOREJP2",251,0)
 ;
"RTN","PSOREJP2",252,0)
 Q PTLBL
"RTN","PSOREJP2",253,0)
 ;
"RTN","PSOREJP2",254,0)
DTRNG(BGN,END) ; Date Range Selection
"RTN","PSOREJP2",255,0)
 ;Input: (o) BGN - Default Begin Date 
"RTN","PSOREJP2",256,0)
 ;       (o) END - Default End Date 
"RTN","PSOREJP2",257,0)
 ;
"RTN","PSOREJP2",258,0)
 N %DT,DTOUT,DUOUT,DTRNG,X,Y
"RTN","PSOREJP2",259,0)
 S DTRNG=""
"RTN","PSOREJP2",260,0)
 S %DT="AEST",%DT("A")="BEGIN REJECT DATE: ",%DT("B")=$G(BGN) K:$G(BGN)="" %DT("B") D ^%DT
"RTN","PSOREJP2",261,0)
 I $G(DUOUT)!$G(DTOUT)!($G(Y)=-1) Q "^"
"RTN","PSOREJP2",262,0)
 S $P(DTRNG,U)=Y
"RTN","PSOREJP2",263,0)
 ;
"RTN","PSOREJP2",264,0)
 W ! K %DT
"RTN","PSOREJP2",265,0)
 S %DT="AEST",%DT("A")="END REJECT DATE: ",%DT("B")=$G(END),%DT(0)=Y K:$G(END)="" %DT("B") D ^%DT
"RTN","PSOREJP2",266,0)
 I $G(DUOUT)!$G(DTOUT)!($G(Y)=-1) Q "^"
"RTN","PSOREJP2",267,0)
 ;
"RTN","PSOREJP2",268,0)
 ;Define Entry
"RTN","PSOREJP2",269,0)
 S $P(DTRNG,U,2)=Y
"RTN","PSOREJP2",270,0)
 ;
"RTN","PSOREJP2",271,0)
 Q DTRNG
"RTN","PSOREJP2",272,0)
 ;
"RTN","PSOREJP2",273,0)
CALCSD(RX,FIL,COB) ;
"RTN","PSOREJP2",274,0)
 ; CALCSD - Prompt the user for Last Date of Service, Last Days Supply and
"RTN","PSOREJP2",275,0)
 ;   then calculate the suspense date based on these input.
"RTN","PSOREJP2",276,0)
 ; Input
"RTN","PSOREJP2",277,0)
 ;   RX - Prescription IEN
"RTN","PSOREJP2",278,0)
 ;   FIL - Fill Number
"RTN","PSOREJP2",279,0)
 ;   COB - Coordination of Benefits
"RTN","PSOREJP2",280,0)
 ; Return
"RTN","PSOREJP2",281,0)
 ;   The calculated suspense date  
"RTN","PSOREJP2",282,0)
 ;
"RTN","PSOREJP2",283,0)
 N DIR,X,Y,DUOUT,DTOUT,DIRUT,DIROUT,LDOS,LDSUP,LDS
"RTN","PSOREJP2",284,0)
 I '$G(RX) Q 0
"RTN","PSOREJP2",285,0)
 I $G(FIL)="" Q 0
"RTN","PSOREJP2",286,0)
 I '$G(COB) S COB=1
"RTN","PSOREJP2",287,0)
 ;
"RTN","PSOREJP2",288,0)
 D PREVRX(RX,FIL,COB,.LDOS,.LDS)   ; get the previous Rx last date of service and last days supply
"RTN","PSOREJP2",289,0)
 ; Prompt for Last DOS
"RTN","PSOREJP2",290,0)
 S DIR(0)="D",DIR("A")="LAST DATE OF SERVICE"
"RTN","PSOREJP2",291,0)
 I LDOS S DIR("B")=$$FMTE^XLFDT($G(LDOS))
"RTN","PSOREJP2",292,0)
 D ^DIR
"RTN","PSOREJP2",293,0)
 I $D(DIRUT) W !,"ACTION NOT TAKEN!" Q 0
"RTN","PSOREJP2",294,0)
 S LDOS=Y W "  ("_$$FMTE^XLFDT($G(LDOS))_")"
"RTN","PSOREJP2",295,0)
 ;
"RTN","PSOREJP2",296,0)
 ; Prompt for Last Days Supply
"RTN","PSOREJP2",297,0)
 S LDSUP=LDS
"RTN","PSOREJP2",298,0)
 K DIR
"RTN","PSOREJP2",299,0)
 S DIR(0)="N",DIR("A")="LAST DAYS SUPPLY"
"RTN","PSOREJP2",300,0)
 I LDSUP]"" S DIR("B")=+LDSUP
"RTN","PSOREJP2",301,0)
 D ^DIR
"RTN","PSOREJP2",302,0)
 I $D(DIRUT) W !,"ACTION NOT TAKEN!" Q 0
"RTN","PSOREJP2",303,0)
 ;
"RTN","PSOREJP2",304,0)
 ; Calculate the suspense date to be Last DOS plus 3/4 of the Last Days Supply
"RTN","PSOREJP2",305,0)
 ; Fractions are rounded up
"RTN","PSOREJP2",306,0)
 S LDSUP=Y*.75
"RTN","PSOREJP2",307,0)
 S:LDSUP["." LDSUP=(LDSUP+1)\1
"RTN","PSOREJP2",308,0)
 Q $$FMADD^XLFDT(LDOS,LDSUP)
"RTN","PSOREJP2",309,0)
 ;
"RTN","PSOREJP2",310,0)
PREVRX(RX,RFL,COB,LDOS,LDAYS,PREVRX) ; Gather last date of service and last days supply from previous rx
"RTN","PSOREJP2",311,0)
 ;    input:  RX  - Current RX
"RTN","PSOREJP2",312,0)
 ;            RFL - Refill
"RTN","PSOREJP2",313,0)
 ;            COB - Coordination of benefits
"RTN","PSOREJP2",314,0)
 ;   output:  LDOS - (pass by reference) Last date of service in fileman format, or ""
"RTN","PSOREJP2",315,0)
 ;            LDAYS - (pass by reference) Last days supply in numeric format, or ""
"RTN","PSOREJP2",316,0)
 ;            PREVRX - (pass by reference) Previous Rx for same drug, if any
"RTN","PSOREJP2",317,0)
 ;
"RTN","PSOREJP2",318,0)
 S (LDOS,LDAYS,PREVRX)=""
"RTN","PSOREJP2",319,0)
 I '$G(RX) G PREVRXQ
"RTN","PSOREJP2",320,0)
 I $G(RFL)="" G PREVRXQ
"RTN","PSOREJP2",321,0)
 I '$G(COB) S COB=1
"RTN","PSOREJP2",322,0)
 ;
"RTN","PSOREJP2",323,0)
 ; Original fill.  Check previous Rx's.
"RTN","PSOREJP2",324,0)
 ;
"RTN","PSOREJP2",325,0)
 I RFL=0 D
"RTN","PSOREJP2",326,0)
 . N X
"RTN","PSOREJP2",327,0)
 . S X=$$LAST120(RX,COB)   ; other Rx 120 day time window
"RTN","PSOREJP2",328,0)
 . S LDOS=$P(X,U,1)        ; last date of service (older rx)
"RTN","PSOREJP2",329,0)
 . S LDAYS=$P(X,U,2)       ; last days supply (older rx)
"RTN","PSOREJP2",330,0)
 . S PREVRX=$P(X,U,3)      ; Previous Rx, if any
"RTN","PSOREJP2",331,0)
 . Q
"RTN","PSOREJP2",332,0)
 ;
"RTN","PSOREJP2",333,0)
 ; refill - same RX. Get previus fill information
"RTN","PSOREJP2",334,0)
 I RFL>0 D
"RTN","PSOREJP2",335,0)
 . N FL
"RTN","PSOREJP2",336,0)
 . F FL=(RFL-1):-1:0 D  Q:LDOS           ; start with the previous fill (RFL-1)
"RTN","PSOREJP2",337,0)
 .. I $$STATUS^PSOBPSUT(RX,FL)="" Q      ; no ECME activity - skip
"RTN","PSOREJP2",338,0)
 .. I $$FIND^PSOREJUT(RX,FL,,,1) Q       ; unresolved reject on worklist - skip
"RTN","PSOREJP2",339,0)
 .. D GETDAT^BPSBUTL(RX,FL,COB,.LDOS,.LDAYS)    ; DBIA 4719
"RTN","PSOREJP2",340,0)
 .. Q
"RTN","PSOREJP2",341,0)
 . Q
"RTN","PSOREJP2",342,0)
 ;
"RTN","PSOREJP2",343,0)
PREVRXQ ;
"RTN","PSOREJP2",344,0)
 Q
"RTN","PSOREJP2",345,0)
 ;
"RTN","PSOREJP2",346,0)
LAST120(RX,COB) ;new tag PSO*7*421, cnf
"RTN","PSOREJP2",347,0)
 ; For the original fill, get the default DOS/Days Supply by getting
"RTN","PSOREJP2",348,0)
 ; most recent DOS from the other RXs within a time window for the same
"RTN","PSOREJP2",349,0)
 ; patient and drug and dosage Time window - Prescription has an
"RTN","PSOREJP2",350,0)
 ; expiration date that is in the future or within the last 120 days
"RTN","PSOREJP2",351,0)
 ; Input
"RTN","PSOREJP2",352,0)
 ;   RX - Prescription IEN
"RTN","PSOREJP2",353,0)
 ;  COB - coordination of benefits indicator (defaults to 1 if not passed)
"RTN","PSOREJP2",354,0)
 ; Output
"RTN","PSOREJP2",355,0)
 ;   Last Date of Service ^ Last Days Supply ^ Previous Rx
"RTN","PSOREJP2",356,0)
 ;
"RTN","PSOREJP2",357,0)
 N DOSAGE,DOSAGE1,DRUG,DRUG1,DSUP,DSUP1,EXPDT,FL
"RTN","PSOREJP2",358,0)
 N LDOS,LDS,LSTFIL,PAT,PREVFL,PREVRX,QTY,QTY1,RX0,RX1,X1,X2
"RTN","PSOREJP2",359,0)
 ;
"RTN","PSOREJP2",360,0)
 I '$G(COB) S COB=1
"RTN","PSOREJP2",361,0)
 S LDOS="",LDS="",PREVRX=""
"RTN","PSOREJP2",362,0)
 S RX0=$G(^PSRX(RX,0))  ; Main 0 node.
"RTN","PSOREJP2",363,0)
 S PAT=$P(RX0,U,2),DRUG=$P(RX0,U,6)
"RTN","PSOREJP2",364,0)
 I 'PAT!'DRUG Q "^^"
"RTN","PSOREJP2",365,0)
 S QTY=+$P(RX0,U,7),DSUP=+$P(RX0,U,8),DOSAGE=""
"RTN","PSOREJP2",366,0)
 I QTY,DSUP S DOSAGE=QTY/DSUP    ; Dosage is ratio of Qty to Days Supply.
"RTN","PSOREJP2",367,0)
 S EXPDT=$$FMADD^XLFDT(DT,-121)
"RTN","PSOREJP2",368,0)
 F  S EXPDT=$O(^PS(55,PAT,"P","A",EXPDT)) Q:'EXPDT  D  ; IA 2228.
"RTN","PSOREJP2",369,0)
 . S RX1=""
"RTN","PSOREJP2",370,0)
 . F  S RX1=$O(^PS(55,PAT,"P","A",EXPDT,RX1)) Q:'RX1  I RX'=RX1 D
"RTN","PSOREJP2",371,0)
 . . S DRUG1=$P($G(^PSRX(+RX1,0)),U,6)
"RTN","PSOREJP2",372,0)
 . . I DRUG'=DRUG1 Q     ; If not the same drug, skip this other Rx.
"RTN","PSOREJP2",373,0)
 . . ;
"RTN","PSOREJP2",374,0)
 . . S LSTFIL=$$LSTRFL^PSOBPSU1(RX1)      ; Start with last fill# of this other Rx.
"RTN","PSOREJP2",375,0)
 . . S X1="",X2=""                        ; For this other Rx, initialize the temp variables for last DOS and last days supply.
"RTN","PSOREJP2",376,0)
 . . F FL=LSTFIL:-1:0 D  Q:X1             ; Loop backwards until we find the latest valid DOS.
"RTN","PSOREJP2",377,0)
 . . . D CHECKIT(RX1,FL,COB,.X1,.X2)
"RTN","PSOREJP2",378,0)
 . . . Q
"RTN","PSOREJP2",379,0)
 . . ;
"RTN","PSOREJP2",380,0)
 . . I X1>LDOS S LDOS=X1,LDS=X2,PREVRX=RX1,PREVFL=FL
"RTN","PSOREJP2",381,0)
 . . Q
"RTN","PSOREJP2",382,0)
 . Q
"RTN","PSOREJP2",383,0)
 ;
"RTN","PSOREJP2",384,0)
 ; If a previous Rx passed all other checks, then check the dosage.  If
"RTN","PSOREJP2",385,0)
 ; the dosage is not the same, then clear out the variables and treat as
"RTN","PSOREJP2",386,0)
 ; if no previous Rx was found.
"RTN","PSOREJP2",387,0)
 I PREVRX'="" D
"RTN","PSOREJP2",388,0)
 . S QTY1=$S(PREVFL=0:+$P($G(^PSRX(PREVRX,0)),U,7),1:+$P($G(^PSRX(PREVRX,1,PREVFL,0)),U,4))
"RTN","PSOREJP2",389,0)
 . S DSUP1=$S(PREVFL=0:+$P($G(^PSRX(PREVRX,0)),U,8),1:+$P($G(^PSRX(PREVRX,1,PREVFL,0)),U,10))
"RTN","PSOREJP2",390,0)
 . S DOSAGE1=""
"RTN","PSOREJP2",391,0)
 . I QTY1,DSUP1 S DOSAGE1=QTY1/DSUP1
"RTN","PSOREJP2",392,0)
 . I DOSAGE'=DOSAGE1 S (LDOS,LDS,PREVRX)=""
"RTN","PSOREJP2",393,0)
 . Q
"RTN","PSOREJP2",394,0)
 ;
"RTN","PSOREJP2",395,0)
 I PREVRX'="" S PREVRX=$$GET1^DIQ(52,PREVRX_",",.01)  ; Pull external Rx#.
"RTN","PSOREJP2",396,0)
 Q LDOS_U_LDS_U_PREVRX
"RTN","PSOREJP2",397,0)
 ;
"RTN","PSOREJP2",398,0)
 ; MRD;PSO*7.0*448 - Added CHECKIT procedure to consolidate checks that
"RTN","PSOREJP2",399,0)
 ; were previously being done in two different procedures (PREVRX,
"RTN","PSOREJP2",400,0)
 ; LAST120).
"RTN","PSOREJP2",401,0)
 ;
"RTN","PSOREJP2",402,0)
CHECKIT(RX,FL,COB,LDOS,LDAYS)  ; Check 1 Rx/Fill for days' supply calc.
"RTN","PSOREJP2",403,0)
 ;
"RTN","PSOREJP2",404,0)
 ; Input:  (r) RX - Rx IEN (#52)
"RTN","PSOREJP2",405,0)
 ;         (o) FL - Refill#
"RTN","PSOREJP2",406,0)
 ;         (o) COB - Payer sequence
"RTN","PSOREJP2",407,0)
 ; Output: LDOS - Date of service for this Rx/Fill
"RTN","PSOREJP2",408,0)
 ;         LDAYS - Days' supply for this Rx/Fill
"RTN","PSOREJP2",409,0)
 ; The CHECKIT procedure determines whether a given Rx and Fill can be
"RTN","PSOREJP2",410,0)
 ; used in determining whether the 3/4 days' supply requirement has
"RTN","PSOREJP2",411,0)
 ; been met for another Rx/Fill.  The Rx/Fill being checked here must
"RTN","PSOREJP2",412,0)
 ; meet several criteria, including the following checked by this
"RTN","PSOREJP2",413,0)
 ; procedure:
"RTN","PSOREJP2",414,0)
 ;  - The Rx/Fill must be released.
"RTN","PSOREJP2",415,0)
 ;  - The Rx status must not be Non-Verified.
"RTN","PSOREJP2",416,0)
 ;  - The RX must not have an Expiration Date earlier than 120 days
"RTN","PSOREJP2",417,0)
 ;    before today.
"RTN","PSOREJP2",418,0)
 ;  - The Rx/Fill must have ECME activity.
"RTN","PSOREJP2",419,0)
 ;  - The Rx/Fill must not have any unresolved rejects.
"RTN","PSOREJP2",420,0)
 ;
"RTN","PSOREJP2",421,0)
 N EXPDT
"RTN","PSOREJP2",422,0)
 I '$$RXRLDT^PSOBPSUT(RX,FL) Q             ; If not released, Quit.
"RTN","PSOREJP2",423,0)
 I $$GET1^DIQ(52,RX,100,"I")=1 Q           ; If Status is NON-VERIFIED, Quit.
"RTN","PSOREJP2",424,0)
 S EXPDT=$$GET1^DIQ(52,RX,26,"I")          ; If Expiration Date of Rx is more
"RTN","PSOREJP2",425,0)
 I EXPDT,$$FMDIFF^XLFDT(DT,EXPDT)>120 Q    ;   than 120 days ago, Quit.
"RTN","PSOREJP2",426,0)
 I $$STATUS^PSOBPSUT(RX,FL)="" Q           ; If no ECME activity, Quit.
"RTN","PSOREJP2",427,0)
 I $$FIND^PSOREJUT(RX,FL,,,1) Q            ; If any unresolved rejects, Quit.
"RTN","PSOREJP2",428,0)
 ;
"RTN","PSOREJP2",429,0)
 ; Pull the Date of Service and Days' Supply for this Rx/Fill.
"RTN","PSOREJP2",430,0)
 ;
"RTN","PSOREJP2",431,0)
 D GETDAT^BPSBUTL(RX,FL,COB,.LDOS,.LDAYS)  ; IA 4719.
"RTN","PSOREJP2",432,0)
 Q
"RTN","PSOREJP2",433,0)
 ;
"RTN","PSOREJP3")
0^1^B184519079
"RTN","PSOREJP3",1,0)
PSOREJP3 ;ALB/SS - Third Party Reject Display Screen - Comments ;10/27/06
"RTN","PSOREJP3",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**260,287,289,290,358,359,385,403,421,427,448**;DEC 1997;Build 25
"RTN","PSOREJP3",3,0)
 ;Reference to GETDAT^BPSBUTL supported by IA 4719
"RTN","PSOREJP3",4,0)
 ;Reference to COM^BPSSCRU3 supported by IA 6214
"RTN","PSOREJP3",5,0)
 ;
"RTN","PSOREJP3",6,0)
COM ; Builds the Comments section in the Reject Information Screen.
"RTN","PSOREJP3",7,0)
 ; The following variables are assumed to exist:
"RTN","PSOREJP3",8,0)
 ;   RX - Pointer to file# 52, Prescription.
"RTN","PSOREJP3",9,0)
 ;   FILL - Pointer to the Refill sub-file of the Prescription.
"RTN","PSOREJP3",10,0)
 ;   REJ - Pointer to the Reject Info sub-file of the Prescription.
"RTN","PSOREJP3",11,0)
 ;
"RTN","PSOREJP3",12,0)
 N PSOARRAY,PSOCOM,PSODATE,PSOLAST,PSOPFLAG,PSOTEMP,PSOUSER,PSOX,PSOY,X
"RTN","PSOREJP3",13,0)
 ;
"RTN","PSOREJP3",14,0)
 ; MRD;PSO*7*448 - This patch added the ability for an OPECC to flag a
"RTN","PSOREJP3",15,0)
 ; comment on a BPS Transaction as being for pharmacy.  A comment so
"RTN","PSOREJP3",16,0)
 ; flagged will appear on the Reject Information Screen intermingled
"RTN","PSOREJP3",17,0)
 ; with any other comments on the Prescription.  All the comments will
"RTN","PSOREJP3",18,0)
 ; be sorted in reverse chronological order.
"RTN","PSOREJP3",19,0)
 ;
"RTN","PSOREJP3",20,0)
 ; COM^BPSSCRU3 populates the array PSOTEMP with all the comments from
"RTN","PSOREJP3",21,0)
 ; the BPS Transaction corresponding to the Prescription and Refill.
"RTN","PSOREJP3",22,0)
 ; Any of those comments with the Pharmacy flag set to '1' will be
"RTN","PSOREJP3",23,0)
 ; added to the array PSOARRAY.
"RTN","PSOREJP3",24,0)
 ;
"RTN","PSOREJP3",25,0)
 D COM^BPSSCRU3(RX,FILL,,.PSOTEMP)  ; IA 6214.
"RTN","PSOREJP3",26,0)
 ;
"RTN","PSOREJP3",27,0)
 S PSODATE=0
"RTN","PSOREJP3",28,0)
 F  S PSODATE=$O(PSOTEMP(PSODATE)) Q:'PSODATE  D
"RTN","PSOREJP3",29,0)
 . S PSOX=0
"RTN","PSOREJP3",30,0)
 . F  S PSOX=$O(PSOTEMP(PSODATE,PSOX)) Q:'PSOX  D
"RTN","PSOREJP3",31,0)
 . . ;
"RTN","PSOREJP3",32,0)
 . . ; If the Pharmacy flag is set, then add this comment to the
"RTN","PSOREJP3",33,0)
 . . ; array PSOARRAY to be displayed.
"RTN","PSOREJP3",34,0)
 . . ;
"RTN","PSOREJP3",35,0)
 . . S PSOPFLAG=$P(PSOTEMP(PSODATE,PSOX),U)
"RTN","PSOREJP3",36,0)
 . . I 'PSOPFLAG Q
"RTN","PSOREJP3",37,0)
 . . S PSOCOM=$P(PSOTEMP(PSODATE,PSOX),U,2)
"RTN","PSOREJP3",38,0)
 . . S PSOUSER=$P(PSOTEMP(PSODATE,PSOX),U,3)
"RTN","PSOREJP3",39,0)
 . . S PSOUSER=$$GET1^DIQ(200,PSOUSER,.01)
"RTN","PSOREJP3",40,0)
 . . S PSOY=$$FMTE^XLFDT(PSODATE)
"RTN","PSOREJP3",41,0)
 . . S PSOCOM=PSOY_" (OPECC) - "_PSOCOM_" ("_PSOUSER_")"
"RTN","PSOREJP3",42,0)
 . . S PSOY=$G(PSOARRAY(PSODATE))+1
"RTN","PSOREJP3",43,0)
 . . S PSOARRAY(PSODATE)=PSOY
"RTN","PSOREJP3",44,0)
 . . S PSOARRAY(PSODATE,PSOY)=PSOCOM
"RTN","PSOREJP3",45,0)
 . . Q
"RTN","PSOREJP3",46,0)
 . Q
"RTN","PSOREJP3",47,0)
 ;
"RTN","PSOREJP3",48,0)
 ; Pull comments from the Reject sub-file of the Prescription and
"RTN","PSOREJP3",49,0)
 ; add to the array PSOARRAY.
"RTN","PSOREJP3",50,0)
 ;
"RTN","PSOREJP3",51,0)
 S PSOX=0
"RTN","PSOREJP3",52,0)
 F  S PSOX=$O(^PSRX(RX,"REJ",REJ,"COM",PSOX)) Q:'PSOX  D
"RTN","PSOREJP3",53,0)
 . S PSODATE=$$GET1^DIQ(52.2551,PSOX_","_REJ_","_RX,.01,"E")
"RTN","PSOREJP3",54,0)
 . S PSOUSER=$$GET1^DIQ(52.2551,PSOX_","_REJ_","_RX,1)
"RTN","PSOREJP3",55,0)
 . S PSOCOM=$$GET1^DIQ(52.2551,PSOX_","_REJ_","_RX,2)
"RTN","PSOREJP3",56,0)
 . S PSOCOM=PSODATE_" - "_PSOCOM_" ("_PSOUSER_")"
"RTN","PSOREJP3",57,0)
 . S PSODATE=$$GET1^DIQ(52.2551,PSOX_","_REJ_","_RX,.01,"I")
"RTN","PSOREJP3",58,0)
 . S PSOY=$G(PSOARRAY(PSODATE))+1
"RTN","PSOREJP3",59,0)
 . S PSOARRAY(PSODATE)=PSOY
"RTN","PSOREJP3",60,0)
 . S PSOARRAY(PSODATE,PSOY)=PSOCOM
"RTN","PSOREJP3",61,0)
 . Q
"RTN","PSOREJP3",62,0)
 ;
"RTN","PSOREJP3",63,0)
 ; At this point, all of the comments to be displayed are in the array
"RTN","PSOREJP3",64,0)
 ; PSOARRAY, sorted by date/time.  If that array is empty, then Quit
"RTN","PSOREJP3",65,0)
 ; out.  Otherwise, loop through the comments backwards to display in
"RTN","PSOREJP3",66,0)
 ; reverse chronological order.
"RTN","PSOREJP3",67,0)
 ;
"RTN","PSOREJP3",68,0)
 I '$O(PSOARRAY("")) Q
"RTN","PSOREJP3",69,0)
 D SETLN^PSOREJP1()
"RTN","PSOREJP3",70,0)
 D SETLN^PSOREJP1("COMMENTS",1,1)
"RTN","PSOREJP3",71,0)
 ;
"RTN","PSOREJP3",72,0)
 S PSODATE=""
"RTN","PSOREJP3",73,0)
 F  S PSODATE=$O(PSOARRAY(PSODATE),-1) Q:'PSODATE  D
"RTN","PSOREJP3",74,0)
 . S PSOX=""
"RTN","PSOREJP3",75,0)
 . F  S PSOX=$O(PSOARRAY(PSODATE,PSOX),-1) Q:'PSOX  D
"RTN","PSOREJP3",76,0)
 . . ;
"RTN","PSOREJP3",77,0)
 . . ; Use ^DIWP utility to put comment into scratch global array,
"RTN","PSOREJP3",78,0)
 . . ; with lines broken apart intelligently.
"RTN","PSOREJP3",79,0)
 . . ;
"RTN","PSOREJP3",80,0)
 . . N %,DIW,DIWF,DIWI,DIWL,DIWR,DIWT,DIWTC,DIWX,DN,I,Z
"RTN","PSOREJP3",81,0)
 . . K ^UTILITY($J,"W")
"RTN","PSOREJP3",82,0)
 . . S X=PSOARRAY(PSODATE,PSOX)
"RTN","PSOREJP3",83,0)
 . . S DIWL=1
"RTN","PSOREJP3",84,0)
 . . S DIWR=78
"RTN","PSOREJP3",85,0)
 . . D ^DIWP
"RTN","PSOREJP3",86,0)
 . . ;
"RTN","PSOREJP3",87,0)
 . . ; Loop through the scratch array and add each line to the ^TMP
"RTN","PSOREJP3",88,0)
 . . ; global to be displayed on the screen.
"RTN","PSOREJP3",89,0)
 . . ;
"RTN","PSOREJP3",90,0)
 . . S PSOLAST=0
"RTN","PSOREJP3",91,0)
 . . F PSOY=1:1 Q:('$D(^UTILITY($J,"W",1,PSOY,0)))  D
"RTN","PSOREJP3",92,0)
 . . . S PSOCOM=$G(^UTILITY($J,"W",1,PSOY,0))
"RTN","PSOREJP3",93,0)
 . . . ;
"RTN","PSOREJP3",94,0)
 . . . ; If this line is the last of this comment, and this is the
"RTN","PSOREJP3",95,0)
 . . . ; last comment, then Set PSOLAST=1 to make this line underlined
"RTN","PSOREJP3",96,0)
 . . . ; on the screen.
"RTN","PSOREJP3",97,0)
 . . . ;
"RTN","PSOREJP3",98,0)
 . . . I '$D(^UTILITY($J,"W",1,PSOY+1)),$O(PSOARRAY(PSODATE,PSOX),-1)="",$O(PSOARRAY(PSODATE),-1)="" S PSOLAST=1
"RTN","PSOREJP3",99,0)
 . . . ;
"RTN","PSOREJP3",100,0)
 . . . ; Use SETLN^PSOREJP1 to add line to ^TMP array to be displayed to screen.
"RTN","PSOREJP3",101,0)
 . . . ;
"RTN","PSOREJP3",102,0)
 . . . D SETLN^PSOREJP1($S(PSOY=1:"- ",1:"  ")_PSOCOM,0,PSOLAST,1)
"RTN","PSOREJP3",103,0)
 . . . Q
"RTN","PSOREJP3",104,0)
 . . Q
"RTN","PSOREJP3",105,0)
 . Q
"RTN","PSOREJP3",106,0)
 ;
"RTN","PSOREJP3",107,0)
 K ^UTILITY($J,"W")
"RTN","PSOREJP3",108,0)
 Q
"RTN","PSOREJP3",109,0)
 ;
"RTN","PSOREJP3",110,0)
ADDCOM ; - Add comment worklist action
"RTN","PSOREJP3",111,0)
 N PSCOM
"RTN","PSOREJP3",112,0)
 D FULL^VALM1
"RTN","PSOREJP3",113,0)
 S PSCOM=$$COMMENT("Comment: ",150)
"RTN","PSOREJP3",114,0)
 I $L(PSCOM)>0,PSCOM'["^" D
"RTN","PSOREJP3",115,0)
 . D SAVECOM(RX,REJ,PSCOM) ;save the comment
"RTN","PSOREJP3",116,0)
 . D INIT^PSOREJP1 ;update screen
"RTN","PSOREJP3",117,0)
 S VALMBCK="R"
"RTN","PSOREJP3",118,0)
 Q
"RTN","PSOREJP3",119,0)
 ;
"RTN","PSOREJP3",120,0)
 ;Enter a comment
"RTN","PSOREJP3",121,0)
 ;PSOTR  -prompt string
"RTN","PSOREJP3",122,0)
 ;PSMLEN -maxlen
"RTN","PSOREJP3",123,0)
 ;returns:
"RTN","PSOREJP3",124,0)
 ; "^" - if user chose to quit 
"RTN","PSOREJP3",125,0)
 ; "" - nothing entered or input has been discarded
"RTN","PSOREJP3",126,0)
 ; otherwise - comment's text
"RTN","PSOREJP3",127,0)
COMMENT(PSOTR,PSMLEN) ;*/
"RTN","PSOREJP3",128,0)
 N DIR,DTOUT,DUOUT,PSQ
"RTN","PSOREJP3",129,0)
 I '$D(PSOTR) S PSOTR="Comment "
"RTN","PSOREJP3",130,0)
 I '$D(PSMLEN) S PSMLEN=150
"RTN","PSOREJP3",131,0)
 S DIR(0)="FA^1:150"
"RTN","PSOREJP3",132,0)
 S DIR("A")=PSOTR
"RTN","PSOREJP3",133,0)
 S DIR("?")="Enter a free text comment up to 150 characters long."
"RTN","PSOREJP3",134,0)
 S PSQ=0
"RTN","PSOREJP3",135,0)
 F  D  Q:+PSQ'=0
"RTN","PSOREJP3",136,0)
 . W ! D ^DIR
"RTN","PSOREJP3",137,0)
 . I $D(DUOUT)!($D(DTOUT)) S PSQ=-1 Q
"RTN","PSOREJP3",138,0)
 . I $L(Y)'>PSMLEN S PSQ=1 Q
"RTN","PSOREJP3",139,0)
 . W !!,"Enter a free text comment up to 150 characters long.",!
"RTN","PSOREJP3",140,0)
 . S DIR("B")=$E(Y,1,PSMLEN)
"RTN","PSOREJP3",141,0)
 Q:PSQ<0 "^"
"RTN","PSOREJP3",142,0)
 Q:$L(Y)=0 ""
"RTN","PSOREJP3",143,0)
 S PSQ=$$YESNO("Confirm","YES")
"RTN","PSOREJP3",144,0)
 I PSQ=-1 Q "^"
"RTN","PSOREJP3",145,0)
 I PSQ=0 Q ""
"RTN","PSOREJP3",146,0)
 Q Y
"RTN","PSOREJP3",147,0)
 ;
"RTN","PSOREJP3",148,0)
 ; Ask
"RTN","PSOREJP3",149,0)
 ; Input:
"RTN","PSOREJP3",150,0)
 ;  PSQSTR - question
"RTN","PSOREJP3",151,0)
 ;  PSDFL - default answer
"RTN","PSOREJP3",152,0)
 ; Output: 
"RTN","PSOREJP3",153,0)
 ; 1 YES
"RTN","PSOREJP3",154,0)
 ; 0 NO
"RTN","PSOREJP3",155,0)
 ; -1 if cancelled
"RTN","PSOREJP3",156,0)
YESNO(PSQSTR,PSDFL) ; Default - YES
"RTN","PSOREJP3",157,0)
 N DIR,Y,DUOUT
"RTN","PSOREJP3",158,0)
 S DIR(0)="Y"
"RTN","PSOREJP3",159,0)
 S DIR("A")=PSQSTR
"RTN","PSOREJP3",160,0)
 S:$L($G(PSDFL)) DIR("B")=PSDFL
"RTN","PSOREJP3",161,0)
 W ! D ^DIR
"RTN","PSOREJP3",162,0)
 Q $S($G(DUOUT)!$G(DUOUT)!(Y="^"):-1,1:Y)
"RTN","PSOREJP3",163,0)
 ;
"RTN","PSOREJP3",164,0)
 ;Save comment
"RTN","PSOREJP3",165,0)
SAVECOM(PSRXIEN,PSREJIEN,PSCOMNT,DATETIME,USER) ;
"RTN","PSOREJP3",166,0)
 N PSREC,PSDA,PSERR
"RTN","PSOREJP3",167,0)
 I '$G(DATETIME) D NOW^%DTC S DATETIME=%
"RTN","PSOREJP3",168,0)
 I '$G(USER) S USER=DUZ
"RTN","PSOREJP3",169,0)
 D INSITEM(52.2551,PSRXIEN,PSREJIEN,DATETIME)
"RTN","PSOREJP3",170,0)
 S PSREC=$O(^PSRX(PSRXIEN,"REJ",PSREJIEN,"COM","B",DATETIME,0))
"RTN","PSOREJP3",171,0)
 I PSREC>0 D
"RTN","PSOREJP3",172,0)
 . S PSDA(52.2551,PSREC_","_PSREJIEN_","_PSRXIEN_",",1)=USER
"RTN","PSOREJP3",173,0)
 . S PSDA(52.2551,PSREC_","_PSREJIEN_","_PSRXIEN_",",2)=$G(PSCOMNT)
"RTN","PSOREJP3",174,0)
 . D FILE^DIE("","PSDA","PSERR")
"RTN","PSOREJP3",175,0)
 Q
"RTN","PSOREJP3",176,0)
 ;
"RTN","PSOREJP3",177,0)
 ;/**
"RTN","PSOREJP3",178,0)
 ;PSSFILE - subfile# (52.2551) for comment
"RTN","PSOREJP3",179,0)
 ;PSIEN - ien for file in which the new subfile entry will be inserted
"RTN","PSOREJP3",180,0)
 ;PSVAL01 - .01 value for the new entry
"RTN","PSOREJP3",181,0)
INSITEM(PSSFILE,PSIEN0,PSIEN1,PSVAL01) ;*/
"RTN","PSOREJP3",182,0)
 N PSSSI,PSIENS,PSFDA,PSER
"RTN","PSOREJP3",183,0)
 S PSIENS="+1,"_PSIEN1_","_PSIEN0_","
"RTN","PSOREJP3",184,0)
 S PSFDA(PSSFILE,PSIENS,.01)=PSVAL01
"RTN","PSOREJP3",185,0)
 D UPDATE^DIE("","PSFDA","PSSSI","PSER")
"RTN","PSOREJP3",186,0)
 I $D(PSER) D BMES^XPDUTL(PSER("DIERR",1,"TEXT",1))
"RTN","PSOREJP3",187,0)
 Q
"RTN","PSOREJP3",188,0)
 ;
"RTN","PSOREJP3",189,0)
PRINT(RX,RFL) ; Print Label for specific Rx/Fill
"RTN","PSOREJP3",190,0)
 I '$G(RX) Q
"RTN","PSOREJP3",191,0)
 I $G(RFL)="" Q
"RTN","PSOREJP3",192,0)
 ;
"RTN","PSOREJP3",193,0)
 ; Some of these variables are used by LBL^PSOLSET but they are newed here
"RTN","PSOREJP3",194,0)
 N PPL,PSOSITE,PSOPAR,PSOSYS,PSOBARS,PSOBAR0,PSOBAR1,PSOIOS,PSOBFLAG,PSOCLBL
"RTN","PSOREJP3",195,0)
 N PSOQUIT,PSOPIOST,PSOLTEST,PSOTLBL,PSORXT
"RTN","PSOREJP3",196,0)
 N DFN,PDUZ,RXFL,REPRINT,REJLBL,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","PSOREJP3",197,0)
 N %ZIS,IOP,POP,ZTSK,ZTRTN,ZTIO,ZTDESC,ZTSAVE,ZTDTH,VAR
"RTN","PSOREJP3",198,0)
 ;
"RTN","PSOREJP3",199,0)
 ; Set the default label printer.  We need to new it so we don't change the value that was
"RTN","PSOREJP3",200,0)
 ;   set by PSOLSET when the user first logged into OP so need to do a bit of work to new it and  
"RTN","PSOREJP3",201,0)
 ;   reset it before the call to LBL^PSOLSET.
"RTN","PSOREJP3",202,0)
 I $G(PSOLAP)]"" S PSOTLBL=PSOLAP N PSOLAP S PSOLAP=PSOTLBL,PSOCLBL=1
"RTN","PSOREJP3",203,0)
 E  N PSOLAP S PSOCLBL=""
"RTN","PSOREJP3",204,0)
 ;
"RTN","PSOREJP3",205,0)
 ; Check if a label has already been printed and set REPRINT flag.
"RTN","PSOREJP3",206,0)
 S REJLBL=0 F  S REJLBL=$O(^PSRX(RX,"L",REJLBL)) Q:'REJLBL  I +$$GET1^DIQ(52.032,REJLBL_","_RX,1,"I")=RFL S REPRINT=1 Q
"RTN","PSOREJP3",207,0)
 ;
"RTN","PSOREJP3",208,0)
 ; Define required variables
"RTN","PSOREJP3",209,0)
 S PSOSITE=+$$RXSITE^PSOBPSUT(RX,RFL),PSOPAR=$G(^PS(59,PSOSITE,1))
"RTN","PSOREJP3",210,0)
 S DFN=$$GET1^DIQ(52,RX,2,"I"),PDUZ=DUZ,PSOSYS=$G(^PS(59.7,1,40.1))
"RTN","PSOREJP3",211,0)
 S PPL=RX I RFL S RXFL(RX)=RFL
"RTN","PSOREJP3",212,0)
 ;
"RTN","PSOREJP3",213,0)
 ; Get label print device and check alignment
"RTN","PSOREJP3",214,0)
 W ! S PSOBFLAG=1 D LBL^PSOLSET I $G(PSOQUIT) Q
"RTN","PSOREJP3",215,0)
 I $G(PSOLAP)="" W $C(7),!!,"No printer defined" K DIR S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR Q
"RTN","PSOREJP3",216,0)
 ;
"RTN","PSOREJP3",217,0)
 ; Call %ZIS to get device characteristics w/o reopening the printer. 
"RTN","PSOREJP3",218,0)
 ; We need to do this to check if queuing is forced for this device
"RTN","PSOREJP3",219,0)
 ; Not checking the POP variable.  If we don't get the device here, we will fall through to the 
"RTN","PSOREJP3",220,0)
 ;   foreground process and try again
"RTN","PSOREJP3",221,0)
 S IOP=PSOLAP,%ZIS="QN" D ^%ZIS
"RTN","PSOREJP3",222,0)
 ;
"RTN","PSOREJP3",223,0)
 ; If background printer, queue the job
"RTN","PSOREJP3",224,0)
 I $D(IO("Q")) D  Q
"RTN","PSOREJP3",225,0)
 . S ZTRTN="DQ^PSOLBL",ZTDTH=$H,ZTIO=PSOLAP
"RTN","PSOREJP3",226,0)
 . F VAR="PSOSYS","DFN","PSOPAR","PDUZ","PCOMX","PSOLAP","PPL","PSOSITE","RXY","PSOSUSPR","PSOBARS","PSOBAR1","PSOBAR0","PSODELE","PSOPULL","PSTAT","PSODBQ","PSOEXREP","PSOTREP","REPRINT" S:$D(@VAR) ZTSAVE(VAR)=""
"RTN","PSOREJP3",227,0)
 . S ZTSAVE("PSORX(")="",ZTSAVE("RXRP(")="",ZTSAVE("RXPR(")="",ZTSAVE("RXRS(")="",ZTSAVE("RXFL(")="",ZTSAVE("PCOMH(")=""
"RTN","PSOREJP3",228,0)
 . S ZTDESC="OUTPATIENT PHARMACY REJECT WORKLIST LABEL PRINT"
"RTN","PSOREJP3",229,0)
 . D ^%ZISC,^%ZTLOAD
"RTN","PSOREJP3",230,0)
 . W !!,"Label ",$S('$D(ZTSK):"NOT ",1:""),"queued to print",! I '$D(ZTSK) W $C(7) K DIR S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR
"RTN","PSOREJP3",231,0)
 ;
"RTN","PSOREJP3",232,0)
 ; If we gotten this far, open the device and print the label in the foreground
"RTN","PSOREJP3",233,0)
 ; We also need to preserve the PSORX array, which gets killed by DQ^PSOLBL
"RTN","PSOREJP3",234,0)
 K %ZIS S IOP=PSOLAP D ^%ZIS
"RTN","PSOREJP3",235,0)
 I POP D ^%ZISC W $C(7),!!,"Printer is busy - NO label printed" K DIR S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR Q
"RTN","PSOREJP3",236,0)
 K PSORXT M PSORXT=PSORX
"RTN","PSOREJP3",237,0)
 D DQ^PSOLBL,^%ZISC
"RTN","PSOREJP3",238,0)
 K PSORX M PSORX=PSORXT
"RTN","PSOREJP3",239,0)
 Q
"RTN","PSOREJP3",240,0)
 ;
"RTN","PSOREJP3",241,0)
RXINFO(RX,FILL,LINE,REJ) ; Returns header displayable Rx Information
"RTN","PSOREJP3",242,0)
 N TXT,RXINFO,LBL,CMOP,DRG,PSOET
"RTN","PSOREJP3",243,0)
 I LINE=1 D
"RTN","PSOREJP3",244,0)
 . N RXDOS D GETDAT^BPSBUTL(RX,FILL,,.RXDOS) ; Get Date of Service from BPS CLAIM field 401 - PSO*7*421
"RTN","PSOREJP3",245,0)
 . S RXINFO="Rx#      : "_$$GET1^DIQ(52,RX,.01)_"/"_FILL
"RTN","PSOREJP3",246,0)
 . ;cnf, PSO*7*358, add PSOET logic for TRICARE/CHAMPVA non-billable
"RTN","PSOREJP3",247,0)
 . S PSOET=$$PSOET(RX,FILL)
"RTN","PSOREJP3",248,0)
 . S $E(RXINFO,27)="ECME#: "_$S(PSOET:"",1:$$ECMENUM^PSOBPSU2(RX,FILL))
"RTN","PSOREJP3",249,0)
 . S $E(RXINFO,49)="Date of Service: "_$S(PSOET:"",1:$$FMTE^XLFDT(RXDOS)) ; Use DOS from BPS Claims field 401 - PSO*7*421
"RTN","PSOREJP3",250,0)
 I LINE=2 D
"RTN","PSOREJP3",251,0)
 . S DRG=$$GET1^DIQ(52,RX,6,"I"),CMOP=$S($D(^PSDRUG("AQ",DRG)):1,1:0)
"RTN","PSOREJP3",252,0)
 . S RXINFO=$S(CMOP:"CMOP ",1:"")_"Drug",$E(RXINFO,10)=": "_$E($$GET1^DIQ(52,RX,6),1,43)
"RTN","PSOREJP3",253,0)
 . S $E(RXINFO,56)="NDC Code: "_$$GETNDC^PSONDCUT(RX,FILL)
"RTN","PSOREJP3",254,0)
 Q $G(RXINFO)
"RTN","PSOREJP3",255,0)
 ;
"RTN","PSOREJP3",256,0)
FILL ;Fill payable TRICARE or CHAMPVA Rx
"RTN","PSOREJP3",257,0)
 N COM,I,OPNREJ,OPNREJ2,OPNREJ3,DCSTAT,PSOREL
"RTN","PSOREJP3",258,0)
 S:'$G(PSOTRIC) PSOTRIC=$$TRIC^PSOREJP1(RX,FILL,PSOTRIC)  ;cnf, PSO*7*358, add line
"RTN","PSOREJP3",259,0)
 ;cnf, PSO*7*358, don't allow option if TRICARE/CHAMPVA and released, PSOREL is set to the release date
"RTN","PSOREJP3",260,0)
 S PSOREL=0 I PSOTRIC D
"RTN","PSOREJP3",261,0)
 . I 'FILL S PSOREL=+$$GET1^DIQ(52,RX,31,"I")
"RTN","PSOREJP3",262,0)
 . I FILL S PSOREL=+$$GET1^DIQ(52.1,FILL_","_RX,17,"I")
"RTN","PSOREJP3",263,0)
 I PSOREL S VALMSG="Released Rxs may not be filled.",VALMBCK="R" Q
"RTN","PSOREJP3",264,0)
 ;cnf, PSO*7*358, don't allow option if prescription has been discontinued
"RTN","PSOREJP3",265,0)
 ;  12 - DISCONTINUED
"RTN","PSOREJP3",266,0)
 ;  14 - DISCONTINUED BY PROVIDER
"RTN","PSOREJP3",267,0)
 ;  15 - DISCONTINUED (EDIT)
"RTN","PSOREJP3",268,0)
 S DCSTAT=$$GET1^DIQ(52,RX,100,"I")
"RTN","PSOREJP3",269,0)
 I "/12/14/15/"[("/"_DCSTAT_"/") S VALMSG="Discontinued Rxs may not be filled.",VALMBCK="R" Q
"RTN","PSOREJP3",270,0)
 D FULL^VALM1
"RTN","PSOREJP3",271,0)
 I $$CLOSED^PSOREJP1(RX,REJ) D  Q
"RTN","PSOREJP3",272,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R"
"RTN","PSOREJP3",273,0)
 ;cnf, PSO*7*358
"RTN","PSOREJP3",274,0)
 S COM=""
"RTN","PSOREJP3",275,0)
 I 'PSOTRIC&($$STATUS^PSOBPSUT(RX,FILL)'["PAYABLE") S VALMSG="Only Rxs with an E PAYABLE status may be filled.",VALMBCK="R" Q
"RTN","PSOREJP3",276,0)
 I PSOTRIC&($$STATUS^PSOBPSUT(RX,FILL)'["PAYABLE") D FILLTR I $L($G(VALMSG)_$G(VALMBCK)) Q  ;cnf, PSO*7*358
"RTN","PSOREJP3",277,0)
 S:COM="" COM="AUTOMATICALLY CLOSED"  ;cnf, PSO*7*358, add condition
"RTN","PSOREJP3",278,0)
 S (OPNREJ,OPNREJ2,OPNREJ3)=""
"RTN","PSOREJP3",279,0)
 S OPNREJ2=0 F  S OPNREJ2=$O(^PSRX(RX,"REJ",OPNREJ2)) Q:OPNREJ2=""!(OPNREJ2'?1N.N)  S OPNREJ=OPNREJ_","_OPNREJ2
"RTN","PSOREJP3",280,0)
 S OPNREJ=$E(OPNREJ,2,999),OPNREJ2=""
"RTN","PSOREJP3",281,0)
 W !?20,"[Closing all rejections for prescription "_$$GET1^DIQ(52,RX,".01")_":"
"RTN","PSOREJP3",282,0)
 F I=1:1 S OPNREJ2=$P(OPNREJ,",",I) Q:OPNREJ2=""  D
"RTN","PSOREJP3",283,0)
 . S OPNREJ3="",OPNREJ3=$$GET1^DIQ(52.25,OPNREJ2_","_RX,".01")
"RTN","PSOREJP3",284,0)
 . W !?25,OPNREJ3_" - "_$$GET1^DIQ(9002313.93,OPNREJ3,".02")_"..."
"RTN","PSOREJP3",285,0)
 . D CLOSE^PSOREJUT(RX,FILL,OPNREJ2,DUZ,6,COM,"","","","","",1) W "OK]",!,$C(7) H 1  ; pso*7*421 Use 12th param to ignore
"RTN","PSOREJP3",286,0)
 I $$PTLBL^PSOREJP2(RX,FILL) D PRINT(RX,FILL)
"RTN","PSOREJP3",287,0)
 S CHANGE=1   ;cnf, PSO*7*358, remove S VALMBCK="R" so user goes back to selection list
"RTN","PSOREJP3",288,0)
 Q
"RTN","PSOREJP3",289,0)
 ;
"RTN","PSOREJP3",290,0)
PSOCOB(RX,FILL,REJ) ; Returns RXCOB indicator for Worklist
"RTN","PSOREJP3",291,0)
 N DATA1
"RTN","PSOREJP3",292,0)
 D GET^PSOREJU2(RX,FILL,.DATA1,REJ,1)
"RTN","PSOREJP3",293,0)
 I $G(DATA1(REJ,"COB"))="PRIMARY"  Q 1
"RTN","PSOREJP3",294,0)
 I $G(DATA1(REJ,"COB"))=""  Q 1
"RTN","PSOREJP3",295,0)
 Q 2
"RTN","PSOREJP3",296,0)
 ;
"RTN","PSOREJP3",297,0)
DC ;Discontinue TRICARE Rx
"RTN","PSOREJP3",298,0)
 N ACTION S ACTION="D"
"RTN","PSOREJP3",299,0)
 D FULL^VALM1
"RTN","PSOREJP3",300,0)
 S ACTION=$$DC^PSOREJU1(RX,ACTION)
"RTN","PSOREJP3",301,0)
 I ACTION="Q"!(ACTION="^") S VALMSG="NO ACTION TAKEN.",VALMBCK="R" Q
"RTN","PSOREJP3",302,0)
 S CHANGE=1
"RTN","PSOREJP3",303,0)
 Q
"RTN","PSOREJP3",304,0)
 ;
"RTN","PSOREJP3",305,0)
FILLTR ;TRICARE/CHAMPVA specific logic  ;cnf, PSO*7*358
"RTN","PSOREJP3",306,0)
 ;COM is not new'd so the variable can be used in FILL tag
"RTN","PSOREJP3",307,0)
 N CONT,PSOET,PSQSTR
"RTN","PSOREJP3",308,0)
 ;
"RTN","PSOREJP3",309,0)
FILLTR2 ;Use for looping if user enters ^ in required comment field  ;cnf, PSO*7*358
"RTN","PSOREJP3",310,0)
 ;
"RTN","PSOREJP3",311,0)
 ;if TRICARE/CHAMPVA, not payable, and no security key, quit
"RTN","PSOREJP3",312,0)
 ;reference to ^XUSEC( supported by IA 10076
"RTN","PSOREJP3",313,0)
 I '$D(^XUSEC("PSO TRICARE/CHAMPVA",DUZ)) S VALMSG="Action Requires <PSO TRICARE/CHAMPVA> security key",VALMBCK="R" Q
"RTN","PSOREJP3",314,0)
 ;
"RTN","PSOREJP3",315,0)
 ;if TRICARE/CHAMPVA, not payable, and user has security key, prompt to continue or not
"RTN","PSOREJP3",316,0)
 S PSQSTR="You are bypassing claims processing. Do you wish to continue"
"RTN","PSOREJP3",317,0)
 S CONT=$$YESNO(PSQSTR,"No")
"RTN","PSOREJP3",318,0)
 I (CONT=-1)!('CONT) S VALMSG="NO ACTION TAKEN.",VALMBCK="R" Q
"RTN","PSOREJP3",319,0)
 ;
"RTN","PSOREJP3",320,0)
 ;check for valid electronic signature
"RTN","PSOREJP3",321,0)
 I '$$SIG^PSOREJU1() S VALMBCK="R" Q                               ;quit if no valid electronic signature
"RTN","PSOREJP3",322,0)
 ;
"RTN","PSOREJP3",323,0)
 ;prompt user for required TRICARE/CHAMPVA Justification
"RTN","PSOREJP3",324,0)
 S COM=$$TCOM(RX,FILL) G:COM="^" FILLTR2                    ;loop back to "continue?" question if ^ entry
"RTN","PSOREJP3",325,0)
 ;
"RTN","PSOREJP3",326,0)
 ;audit log
"RTN","PSOREJP3",327,0)
 S PSOET=$$PSOET(RX,FILL)
"RTN","PSOREJP3",328,0)
 D AUDIT^PSOTRI(RX,FILL,,COM,$S(PSOET:"N",1:"R"),$S($G(PSOTRIC)=1:"T",$G(PSOTRIC)=2:"C",1:""))
"RTN","PSOREJP3",329,0)
 Q
"RTN","PSOREJP3",330,0)
 ;
"RTN","PSOREJP3",331,0)
TCOM(RX,RFL) ; - Ask for TRICARE or CHAMPVA Justification
"RTN","PSOREJP3",332,0)
 N COM,DIR,DIRUT,X
"RTN","PSOREJP3",333,0)
 W ! S DIR(0)="F^3:100" S DIR("A")=$$ELIGDISP^PSOREJP1(RX,RFL)_" Justification" D ^DIR
"RTN","PSOREJP3",334,0)
 S COM=X I $D(DIRUT) S COM="^"
"RTN","PSOREJP3",335,0)
 Q COM
"RTN","PSOREJP3",336,0)
 ;
"RTN","PSOREJP3",337,0)
PSOET(RX,FILL) ; Returns flag for TRICARE or CHAMPVA non-billable and no claim submitted
"RTN","PSOREJP3",338,0)
 ; Return 1 if rejection code is eT or eC (pseudo-reject code)
"RTN","PSOREJP3",339,0)
 ;        0 otherwise
"RTN","PSOREJP3",340,0)
 ;
"RTN","PSOREJP3",341,0)
 I '$G(RX) Q 0
"RTN","PSOREJP3",342,0)
 N X,TRIREJCD
"RTN","PSOREJP3",343,0)
 S X=0
"RTN","PSOREJP3",344,0)
 S TRIREJCD=$T(TRIREJCD+1),TRIREJCD=$P(TRIREJCD,";;",2)
"RTN","PSOREJP3",345,0)
 S X=$$FIND^PSOREJUT(RX,$G(FILL),,TRIREJCD,1) ; PSO*7*421 - Pass indicator to ignore ECME status
"RTN","PSOREJP3",346,0)
 Q X
"RTN","PSOREJP3",347,0)
 ;
"RTN","PSOREJP3",348,0)
TRIREJCD ;TRICARE or CHAMPVA Reject Code, non-billable Rx   ;cnf, PSO*7*358
"RTN","PSOREJP3",349,0)
 ;;eT,eC;;TRICARE or CHAMPVA pseudo reject codes referenced in ^PSOREJP3, ^PSOREJU4
"RTN","PSOREJP3",350,0)
 Q
"RTN","PSOREJP3",351,0)
 ;
"RTN","PSOREJP3",352,0)
SEND(OVRCOD,CLA,PA,PSOET) ; - Sends Claim to ECME and closes Reject
"RTN","PSOREJP3",353,0)
 N DIR,RESP,ALTXT,COM,SMA
"RTN","PSOREJP3",354,0)
 S DIR(0)="Y",DIR("A")="     Confirm",DIR("B")="YES"
"RTN","PSOREJP3",355,0)
 S DIR("A",1)="     When you confirm, a new claim will be submitted for"
"RTN","PSOREJP3",356,0)
 S DIR("A",2)="     the prescription and this REJECT will be marked"
"RTN","PSOREJP3",357,0)
 S DIR("A",3)="     resolved."
"RTN","PSOREJP3",358,0)
 S DIR("A",4)=" "
"RTN","PSOREJP3",359,0)
 W ! D ^DIR K DIR I $G(Y)=0!$D(DIRUT) S VALMBCK="R" Q
"RTN","PSOREJP3",360,0)
 S SMA=0 I $G(OVRCOD)]"",$G(CLA)]"",$G(PA)]"" S SMA=1
"RTN","PSOREJP3",361,0)
 S ALTXT=""
"RTN","PSOREJP3",362,0)
 I 'SMA D
"RTN","PSOREJP3",363,0)
 . S ALTXT="REJECT WORKLIST"
"RTN","PSOREJP3",364,0)
 . S:$G(OVRCOD)'="" ALTXT=ALTXT_"-DUR OVERRIDE CODES("_$TR(OVRCOD,"^","/")_")"
"RTN","PSOREJP3",365,0)
 . S:$G(CLA)]"" ALTXT=ALTXT_"-(CLARIF. CODE="_CLA_")"
"RTN","PSOREJP3",366,0)
 . S:$G(PA)]"" ALTXT=ALTXT_"-(PRIOR AUTH.="_$TR(PA,"^","/")_")"
"RTN","PSOREJP3",367,0)
 D ECMESND^PSOBPSU1(RX,FILL,,$S($G(PSOET):"RSNB",1:"ED"),$$GETNDC^PSONDCUT(RX,FILL),,,$G(OVRCOD),,.RESP,,ALTXT,$G(CLA),$G(PA),$$PSOCOB^PSOREJP3(RX,FILL,REJ))
"RTN","PSOREJP3",368,0)
 I $G(RESP) D  Q
"RTN","PSOREJP3",369,0)
 . W !!?10,"Claim could not be submitted. Please try again later!"
"RTN","PSOREJP3",370,0)
 . W !,?10,"Reason: ",$S($P(RESP,"^",2)="":"UNKNOWN",1:$P(RESP,"^",2)),$C(7) H 2
"RTN","PSOREJP3",371,0)
 ;
"RTN","PSOREJP3",372,0)
 ; Get the ePharmacy Response Pause and hang for that amount of time (default is 2 if not set)
"RTN","PSOREJP3",373,0)
 N PAUSE,IEN5286
"RTN","PSOREJP3",374,0)
 I $G(PSOSITE)="" N PSOSITE S PSOSITE=$$RXSITE^PSOBPSUT(RX,FILL)
"RTN","PSOREJP3",375,0)
 S IEN5286=$O(^PS(52.86,"B",+PSOSITE,""))
"RTN","PSOREJP3",376,0)
 S PAUSE=$$GET1^DIQ(52.86,IEN5286_",",6)
"RTN","PSOREJP3",377,0)
 I PAUSE="" S PAUSE=2
"RTN","PSOREJP3",378,0)
 I PAUSE H PAUSE
"RTN","PSOREJP3",379,0)
 ;
"RTN","PSOREJP3",380,0)
 I $$PTLBL^PSOREJP2(RX,FILL) D PRINT(RX,FILL)
"RTN","PSOREJP3",381,0)
 N PSOTRIC S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,FILL,PSOTRIC)
"RTN","PSOREJP3",382,0)
 I $$GET1^DIQ(52,RX,100,"I")=5&(PSOTRIC) D
"RTN","PSOREJP3",383,0)
 . Q:$$STATUS^PSOBPSUT(RX,FILL)'["PAYABLE"
"RTN","PSOREJP3",384,0)
 . N XXX S XXX=""
"RTN","PSOREJP3",385,0)
 . W !,"This prescription can be pulled early from suspense or the label will print"
"RTN","PSOREJP3",386,0)
 . W !,"when PRINT FROM SUSPENSE occurs.",!
"RTN","PSOREJP3",387,0)
 . R !,"Press enter to continue... ",XXX:60
"RTN","PSOREJP3",388,0)
 I $D(PSOSTFLT),PSOSTFLT'="B" S CHANGE=1
"RTN","PSOREJP3",389,0)
 Q
"RTN","PSOREJU3")
0^4^B86770782
"RTN","PSOREJU3",1,0)
PSOREJU3 ;BIRM/LJE - BPS (ECME) - Clinical Rejects Utilities (3) ;04/25/08
"RTN","PSOREJU3",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**287,290,358,359,385,421,427,448**;DEC 1997;Build 25
"RTN","PSOREJU3",3,0)
 ;References to 9002313.99 supported by IA 4305
"RTN","PSOREJU3",4,0)
 ;Reference to $$CLAIM^BPSBUTL supported by IA 4719
"RTN","PSOREJU3",5,0)
 ;
"RTN","PSOREJU3",6,0)
 Q
"RTN","PSOREJU3",7,0)
 ;
"RTN","PSOREJU3",8,0)
TRICCHK(RX,RFL,RESP,FROM,RVTX) ;check to see if Rx is non-billable or in an "In Progress" state on ECME
"RTN","PSOREJU3",9,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJU3",10,0)
 ;         (r) RFL - REFILL
"RTN","PSOREJU3",11,0)
 ;         (o) RESP - Response from $$EN^BPSNCPDP api
"RTN","PSOREJU3",12,0)
 ;   TRICCHK assumes that the calling routine has validated that the fill is TRICARE or CHAMPVA.
"RTN","PSOREJU3",13,0)
 ;
"RTN","PSOREJU3",14,0)
 ;  - \Need to be mindful of foreground and background processing.
"RTN","PSOREJU3",15,0)
 ;
"RTN","PSOREJU3",16,0)
 N ETOUT,ESTAT,PSOBEI
"RTN","PSOREJU3",17,0)
 S:'$D(FROM) FROM="" S ESTAT="",ESTAT=$P(RESP,"^",4),NFROM=0 I FROM="PL"!(FROM="PC") S NFROM=1
"RTN","PSOREJU3",18,0)
 Q:ESTAT["PAYABLE"!(ESTAT["REJECTED")
"RTN","PSOREJU3",19,0)
 S PSOBEI=$$ELIGDISP^PSOREJP1(RX,RFL)
"RTN","PSOREJU3",20,0)
 I ESTAT["IN PROGRESS",FROM="RRL"!($G(RVTX)="RX RELEASE-NDC CHANGE") D  Q
"RTN","PSOREJU3",21,0)
 . I 'NFROM D
"RTN","PSOREJU3",22,0)
 . . W !!,PSOBEI_" Prescription "_$$GET1^DIQ(52,RX,".01")_" cannot be released until ECME 'IN PROGRESS'"
"RTN","PSOREJU3",23,0)
 . . W !,"status is resolved payable.",!!
"RTN","PSOREJU3",24,0)
 ;
"RTN","PSOREJU3",25,0)
 I $D(RESP) D  Q
"RTN","PSOREJU3",26,0)
 . I +RESP=6 W:'NFROM&('$G(CMOP)) !!,"Inactive ECME "_PSOBEI,!! D  Q
"RTN","PSOREJU3",27,0)
 . . S ACT="Inactive ECME "_PSOBEI D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOREJU3",28,0)
 . I +RESP=2!(+RESP=3) N PSONBILL S PSONBILL=1 D TRIC2 Q
"RTN","PSOREJU3",29,0)
 . I +RESP=4!(ESTAT["IN PROGRESS") N PSONPROG S PSONPROG=1 D TRIC2 Q
"RTN","PSOREJU3",30,0)
 Q
"RTN","PSOREJU3",31,0)
 ;
"RTN","PSOREJU3",32,0)
TRIC2 ;
"RTN","PSOREJU3",33,0)
 N ACTION,REJCOD,REJ,DIR,DIRUT,REA,DA,PSCAN,PSOTRIC,ZZZ
"RTN","PSOREJU3",34,0)
 S PSOTRIC=1,REJ=9999999999
"RTN","PSOREJU3",35,0)
 I $G(CMOP)&($G(PSONPROG)) D TACT Q 
"RTN","PSOREJU3",36,0)
 Q:$G(CMOP)
"RTN","PSOREJU3",37,0)
 I 'NFROM D DISPLAY(RX,REJ)
"RTN","PSOREJU3",38,0)
 I 'NFROM&($G(PSONPROG)) D  D SUSP Q
"RTN","PSOREJU3",39,0)
 . W !!,"This prescription will be suspended.  After the third party claim is resolved,"
"RTN","PSOREJU3",40,0)
 . W !,"it may be printed or pulled early from suspense.",!
"RTN","PSOREJU3",41,0)
 . R !!,"Press <RETURN> to continue...",ZZZ:60,!
"RTN","PSOREJU3",42,0)
 I NFROM&($G(PSONPROG)) D TACT Q
"RTN","PSOREJU3",43,0)
 Q:NFROM
"RTN","PSOREJU3",44,0)
TRIC3 ;
"RTN","PSOREJU3",45,0)
 D MSG
"RTN","PSOREJU3",46,0)
 I FROM="PL"!(FROM="PC") D SUSP Q
"RTN","PSOREJU3",47,0)
 ;cnf, PSO*7*358, add code for options
"RTN","PSOREJU3",48,0)
 N ACTION,DIR,DIRUT,OPTS,DEF,COM
"RTN","PSOREJU3",49,0)
TRIC4 S DIR(0)="SO^",DIR("A")="",OPTS="DQ",DEF="D"
"RTN","PSOREJU3",50,0)
 N PSORESP
"RTN","PSOREJU3",51,0)
 S PSORESP=$P($G(RESP),U,2)
"RTN","PSOREJU3",52,0)
 I PSORESP["NO ACTIVE/VALID ROI" S DEF="Q"  ;IB routine IBNCPDP1 contains this text.
"RTN","PSOREJU3",53,0)
 ;reference to ^XUSEC( supported by IA 10076
"RTN","PSOREJU3",54,0)
 I $D(^XUSEC("PSO TRICARE/CHAMPVA",DUZ)) S OPTS=OPTS_"I" ;PSO*7.0*358, if user has security key, include IGNORE in TRICARE/CHAMPVA options
"RTN","PSOREJU3",55,0)
 S:(OPTS["D") DIR(0)=DIR(0)_"D:(D)iscontinue - DO NOT FILL PRESCRIPTION;",DIR("A")=DIR("A")_"(D)iscontinue,"
"RTN","PSOREJU3",56,0)
 S:(OPTS["Q") DIR(0)=DIR(0)_"Q:(Q)UIT - SEND TO WORKLIST (REQUIRES INTERVENTION);",DIR("A")=DIR("A")_"(Q)uit,"
"RTN","PSOREJU3",57,0)
 S:(OPTS["I") DIR(0)=DIR(0)_"I:(I)GNORE - FILL Rx WITHOUT CLAIM SUBMISSION;",DIR("A")=DIR("A")_"(I)gnore,"
"RTN","PSOREJU3",58,0)
 S $E(DIR(0),$L(DIR(0)))="",$E(DIR("A"),$L(DIR("A")))="",DIR("??")="^D HELP^PSOREJU2("""_OPTS_""")"
"RTN","PSOREJU3",59,0)
 S:$G(DEF)'="" DIR("B")=DEF D ^DIR I $D(DIRUT) S Y="Q" W !
"RTN","PSOREJU3",60,0)
 ;
"RTN","PSOREJU3",61,0)
 S ACTION=Y
"RTN","PSOREJU3",62,0)
 I ACTION="D" S ACTION=$$DC^PSOREJU1(RX,ACTION)    ;cnf, PSO*7*358
"RTN","PSOREJU3",63,0)
 I ACTION="Q" D WRKLST^PSOREJU4(RX,RFL,,DUZ,DT,1,"",RESP)    ;cnf, PSO*7*358
"RTN","PSOREJU3",64,0)
 I ACTION="I" G TRIC4:'$$CONT^PSOREJU1() S COM=$$TCOM^PSOREJP3(RX,RFL) G TRIC4:COM="^" G TRIC4:'$$SIG^PSOREJU1() D
"RTN","PSOREJU3",65,0)
 . D CLOSE^PSOREJUT(RX,RFL,REJ,DUZ,6,COM)   ;TRICARE/CHAMPVA non-billable should have only 1 reject - eT/eC
"RTN","PSOREJU3",66,0)
 . D AUDIT^PSOTRI(RX,RFL,,COM,$S($$PSOET^PSOREJP3(RX,RFL):"N",1:"R"),$P(RESP,"^",3))
"RTN","PSOREJU3",67,0)
 Q
"RTN","PSOREJU3",68,0)
 ;
"RTN","PSOREJU3",69,0)
MSG ;
"RTN","PSOREJU3",70,0)
 W !!,"This is a non-billable "_$$ELIGDISP^PSOREJP1(RX,RFL)_" prescription."    ;cnf, PSO*7*358
"RTN","PSOREJU3",71,0)
 Q
"RTN","PSOREJU3",72,0)
SUSP ;Suspense Rx due to IN PROGRESS status in ECME
"RTN","PSOREJU3",73,0)
 N DA,ACT,RX0,SD,RXS,PSOWFLG,DIK,RXN,XFLAG,RXP,DD,DO,X,Y,DIC,VALMSG,COMM,LFD,DFLG,RXCMOP
"RTN","PSOREJU3",74,0)
 N PSOQFLAG,PSORXZD,PSOQFLAG,PSOKSPPL,PSOZXPPL,PSOZXPI,RXLTOP
"RTN","PSOREJU3",75,0)
 S DA=RX D SUS^PSORXL1
"RTN","PSOREJU3",76,0)
TACT ;
"RTN","PSOREJU3",77,0)
 S ACT=$$ELIGDISP^PSOREJP1(RX,RFL)_"-Rx placed on Suspense due to"_$S($G(PSONPROG):" ECME IN PROGRESS status",$G(PSONBILL):"the Rx being Non-billable",1:"")
"RTN","PSOREJU3",78,0)
 I '$G(DUZ) N DUZ S DUZ=.5
"RTN","PSOREJU3",79,0)
 D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOREJU3",80,0)
 Q
"RTN","PSOREJU3",81,0)
 ;
"RTN","PSOREJU3",82,0)
DISPLAY(RX,REJ,KEY,RRR) ; - Displays REJECT information
"RTN","PSOREJU3",83,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJU3",84,0)
 ;         (r) REJ - REJECT ID (IEN)
"RTN","PSOREJU3",85,0)
 ;         (o) KEY - Display "Press any KEY to continue..." (1-YES/0-NO) (Default: 0)
"RTN","PSOREJU3",86,0)
 ;         (o) RRR - Reject Resolution Required information  Flag(0/1)^Threshold Amt^Gross Amt Due  (Default: 0)
"RTN","PSOREJU3",87,0)
 ;                   If Flag = 0, there is no Reject Resolution Required reject code.  Parameter added with PSO*421
"RTN","PSOREJU3",88,0)
 ;         
"RTN","PSOREJU3",89,0)
 Q:$G(NFROM)
"RTN","PSOREJU3",90,0)
 I '$G(RX)!'$G(REJ) Q
"RTN","PSOREJU3",91,0)
 I '$D(^PSRX(RX,"REJ",REJ))&('$G(PSONBILL))&('$G(PSONPROG)) Q
"RTN","PSOREJU3",92,0)
 ;
"RTN","PSOREJU3",93,0)
 N DATA,RFL,LINE,%
"RTN","PSOREJU3",94,0)
 S RFL=+$$GET1^DIQ(52.25,REJ_","_RX,5)
"RTN","PSOREJU3",95,0)
 I '$G(PSONBILL)&('$G(PSONPROG)) D GET^PSOREJU2(RX,RFL,.DATA,REJ) I '$D(DATA(REJ)) Q
"RTN","PSOREJU3",96,0)
 ;
"RTN","PSOREJU3",97,0)
 D HDR
"RTN","PSOREJU3",98,0)
 S $P(LINE,"-",74)="" W !?3,LINE
"RTN","PSOREJU3",99,0)
 W !?3,$$DVINFO^PSOREJU2(RX,RFL)
"RTN","PSOREJU3",100,0)
 W !?3,$$PTINFO^PSOREJU2(RX)
"RTN","PSOREJU3",101,0)
 W !?3,"Rx/Drug  : ",$$GET1^DIQ(52,RX,.01),"/",RFL," - ",$E($$GET1^DIQ(52,RX,6),1,20),?54
"RTN","PSOREJU3",102,0)
 W:'$G(PSONBILL)&('$G(PSONPROG)) "ECME#: ",$P($$CLAIM^BPSBUTL(RX,RFL),U,6)
"RTN","PSOREJU3",103,0)
 D TYPE G DISP2:$G(PSONBILL)!($G(PSONPROG))
"RTN","PSOREJU3",104,0)
 I $G(DATA(REJ,"PAYER MESSAGE"))'="" W !?3,"Payer Message: " D PRT^PSOREJU2("PAYER MESSAGE",18,58)
"RTN","PSOREJU3",105,0)
 I $G(DATA(REJ,"DUR TEXT"))'="" W !?3,"DUR Text     : ",DATA(REJ,"DUR TEXT")
"RTN","PSOREJU3",106,0)
 W !?3,"Insurance    : ",DATA(REJ,"INSURANCE NAME"),?50,"Contact: ",DATA(REJ,"PLAN CONTACT")
"RTN","PSOREJU3",107,0)
 W !?3,"Group Name   : ",DATA(REJ,"GROUP NAME"),?45,"Group Number: ",DATA(REJ,"GROUP NUMBER")
"RTN","PSOREJU3",108,0)
 I $G(DATA(REJ,"CARDHOLDER ID"))'="" W !?3,"Cardholder ID: ",DATA(REJ,"CARDHOLDER ID")
"RTN","PSOREJU3",109,0)
 I DATA(REJ,"PLAN PREVIOUS FILL DATE")'="" D
"RTN","PSOREJU3",110,0)
 . W !?3,"Last Fill Dt.: ",DATA(REJ,"PLAN PREVIOUS FILL DATE")
"RTN","PSOREJU3",111,0)
 . W:DATA(REJ,"PLAN PREVIOUS FILL DATE")'="" "   (from payer)"
"RTN","PSOREJU3",112,0)
 I $G(RRR) D   ;added with PSO*421
"RTN","PSOREJU3",113,0)
 . W !!?3,"Reject Resolution Required"
"RTN","PSOREJU3",114,0)
 . W !?3,"Gross Amount Due ($"_$J($P(RRR,U,3)*100\1/100,0,2)_") is greater than or equal to"
"RTN","PSOREJU3",115,0)
 . W !?3,"Threshold Dollar Amount ($"_$P(RRR,U,2)_")"
"RTN","PSOREJU3",116,0)
 . W !?3,"Please select Quit to resolve this reject on the Reject Worklist."
"RTN","PSOREJU3",117,0)
DISP2 ;
"RTN","PSOREJU3",118,0)
 W !?3,LINE,$C(7) I $G(KEY) W !?3,"Press <RETURN> to continue..." R %:DTIME W !
"RTN","PSOREJU3",119,0)
 Q
"RTN","PSOREJU3",120,0)
 ;
"RTN","PSOREJU3",121,0)
TYPE ;
"RTN","PSOREJU3",122,0)
 I $G(PSONBILL)!($G(PSONPROG)) D  Q
"RTN","PSOREJU3",123,0)
 . D NOW^%DTC S Y=% D DD^%DT
"RTN","PSOREJU3",124,0)
 . W !?3,"Date/Time: "_$$FMTE^XLFDT(Y)
"RTN","PSOREJU3",125,0)
 . W !?3,"Reason   : ",$S($G(PSONBILL):"Drug not billable.",$G(PSONPROG):"ECME Status is in an 'IN PROGRESS' state and cannot be filled",1:"")
"RTN","PSOREJU3",126,0)
 ;
"RTN","PSOREJU3",127,0)
 I $G(DATA(REJ,"REASON"))'="" W !?3,"Reason   : " D PRT^PSOREJU2("REASON",14,62)
"RTN","PSOREJU3",128,0)
 N RTXT,OCODE,OTXT,I
"RTN","PSOREJU3",129,0)
 S (OTXT,RTXT,OCODE)="",RTXT=$S(DATA(REJ,"CODE")=79:"REFILL TOO SOON",DATA(REJ,"CODE")=88:"DUR REJECT",1:$$EXP^PSOREJP1(DATA(REJ,"CODE")))_" ("_DATA(REJ,"CODE")_")"
"RTN","PSOREJU3",130,0)
 F I=1:1 S OCODE=$P(DATA(REJ,"OTHER REJECTS"),",",I) Q:OCODE=""   D
"RTN","PSOREJU3",131,0)
 . S OTXT=OTXT_", "_$S(OCODE=79:"REFILL TOO SOON",OCODE=88:"DUR REJECT",1:$$EXP^PSOREJP1(OCODE))_" ("_OCODE_")"
"RTN","PSOREJU3",132,0)
 S RTXT=RTXT_OTXT_".  Received on "_$$FMTE^XLFDT($G(DATA(REJ,"DATE/TIME")))_"."
"RTN","PSOREJU3",133,0)
 S OTXT=""
"RTN","PSOREJU3",134,0)
 W !?3,"Reject(s): " D WRAP(RTXT,14)
"RTN","PSOREJU3",135,0)
 Q
"RTN","PSOREJU3",136,0)
 ;
"RTN","PSOREJU3",137,0)
WRAP(PSOTXT,INDENT) ;
"RTN","PSOREJU3",138,0)
 N I,K,PSOWRAP,PSOMARG
"RTN","PSOREJU3",139,0)
 S PSOWRAP=1,PSOMARG=$S('$G(PSORM):80,$D(IOM):IOM,1:80)-(INDENT+5)
"RTN","PSOREJU3",140,0)
W1 S:$L(PSOTXT)<PSOMARG PSOWRAP(PSOWRAP)=PSOTXT I $L(PSOTXT)'<PSOMARG F I=PSOMARG:-1:0 I $E(PSOTXT,I)?1P S PSOWRAP(PSOWRAP)=$E(PSOTXT,1,I),PSOTXT=$E(PSOTXT,I+1,999),PSOWRAP=PSOWRAP+1 G W1
"RTN","PSOREJU3",141,0)
 F K=1:1:PSOWRAP W ?INDENT,PSOWRAP(K),!
"RTN","PSOREJU3",142,0)
 Q
"RTN","PSOREJU3",143,0)
 ;
"RTN","PSOREJU3",144,0)
HDR ; Display the reject notification screen header
"RTN","PSOREJU3",145,0)
 N ELDSP,TAB
"RTN","PSOREJU3",146,0)
 S ELDSP=$$ELIGTCV^PSOREJP1(RX,RFL,1)  ; returns TRICARE, CHAMPVA or VETERAN
"RTN","PSOREJU3",147,0)
 I $L(ELDSP) S ELDSP=ELDSP_" - "       ; Add the " - " for CVA/TRI only
"RTN","PSOREJU3",148,0)
 ;
"RTN","PSOREJU3",149,0)
 I $G(PSONBILL) S TAB=$S($L(ELDSP):24,1:29) W !!?TAB,"*** "_ELDSP_"NON-BILLABLE ***" Q
"RTN","PSOREJU3",150,0)
 I $G(PSONPROG) S TAB=$S($L(ELDSP):18,1:23) W !!?TAB,"*** "_ELDSP_"'IN PROGRESS' ECME status ***" Q
"RTN","PSOREJU3",151,0)
 S TAB=$S($L(ELDSP):11,1:16) W !!?TAB,"*** "_ELDSP_"REJECT RECEIVED FROM THIRD PARTY PAYER ***"
"RTN","PSOREJU3",152,0)
 Q
"RTN","PSOREJU3",153,0)
 ;
"RTN","PSOREJU3",154,0)
SUBMIT(RXIEN,RFCNT,PSOTRIC) ;called from PSOCAN2 (routine size exceeded)
"RTN","PSOREJU3",155,0)
 N SUBMITE S SUBMITE=$$SUBMIT^PSOBPSUT(RXIEN)
"RTN","PSOREJU3",156,0)
 I SUBMITE D
"RTN","PSOREJU3",157,0)
 . N ACTION
"RTN","PSOREJU3",158,0)
 . D ECMESND^PSOBPSU1(RXIEN,,,$S($O(^PSRX(RXIEN,1,0)):"RF",1:"OF"))
"RTN","PSOREJU3",159,0)
 . ; Quit if there is an unresolved TRICARE or CHAMPVA non-billable reject code, PSO*7*358
"RTN","PSOREJU3",160,0)
 . I $$PSOET^PSOREJP3(RXIEN) S ACTION="Q" Q 
"RTN","PSOREJU3",161,0)
 . I $$FIND^PSOREJUT(RXIEN) S ACTION=$$HDLG^PSOREJU1(RXIEN,,"79,88","OF","IOQ","Q")
"RTN","PSOREJU3",162,0)
 I 'SUBMITE&(PSOTRIC) D
"RTN","PSOREJU3",163,0)
 . I $$STATUS^PSOBPSUT(RXIEN,RFCNT'["PAYABLE") D TRICCHK(RXIEN,RFCNT)
"RTN","PSOREJU3",164,0)
 Q
"RTN","PSOREJU3",165,0)
 ;
"RTN","PSOREJU3",166,0)
TRISTA(RX,RFL,RESP,FROM,RVTX) ;called from suspense
"RTN","PSOREJU3",167,0)
 N ETOUT,ESTAT,TRESP,TSTAT,PSOTRIC
"RTN","PSOREJU3",168,0)
 S:'$D(RESP) RESP=""
"RTN","PSOREJU3",169,0)
 S (ESTAT,PSOTRIC)="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOREJU3",170,0)
 Q:'PSOTRIC 0
"RTN","PSOREJU3",171,0)
 S TRESP=RESP,ESTAT=$P(TRESP,"^",4) S:ESTAT="" ESTAT=$$STATUS^PSOBPSUT(RX,RFL)
"RTN","PSOREJU3",172,0)
 Q:ESTAT["E PAYABLE" 0
"RTN","PSOREJU3",173,0)
 I $$TRIAUD(RX,RFL) Q 0  ;if TRICARE or CHAMPVA Rx is in audit due to override or bypass, allow to print from suspense, cnf
"RTN","PSOREJU3",174,0)
 I +RESP=2,$$BYPASS^PSOBPSU1($P(RESP,"^",3),$P(RESP,"^",2)) Q 0   ;if 'Bypass' RX, allow to print from suspense, cnf 
"RTN","PSOREJU3",175,0)
 Q:ESTAT["E REJECTED" 1  ;rejected TRICARE or CHAMPVA is not allowed to print from suspense
"RTN","PSOREJU3",176,0)
 ;if 'in progress' (4) or not billable (2,3) don't allow to print from suspense (IA 4415 Values)
"RTN","PSOREJU3",177,0)
 I '$D(RESP)!($P(RESP,"^",1)="")!($G(RESP)="") D
"RTN","PSOREJU3",178,0)
 . S TSTAT=$$STATUS^PSOBPSUT(RX,RFL) S TRESP=$S(TSTAT["IN PROGRESS":4,TSTAT["NOT BILLABLE":2,1:0)
"RTN","PSOREJU3",179,0)
 . S $P(TRESP,"^",4)=TSTAT
"RTN","PSOREJU3",180,0)
 ;
"RTN","PSOREJU3",181,0)
 I +TRESP=2!(+TRESP=3) D WRKLST^PSOREJU4(RX,RFL,"",DUZ,DT,1,"",RESP) Q 1  ;send TRICARE or CHAMPVA non billable to worklist (pseudo reject), cnf
"RTN","PSOREJU3",182,0)
 I +TRESP=4!(ESTAT["IN PROGRESS") Q 1
"RTN","PSOREJU3",183,0)
 Q 0
"RTN","PSOREJU3",184,0)
 ;
"RTN","PSOREJU3",185,0)
TRIAUD(RXIEN,RXFILL) ;is RXIEN in the TRICARE/CHAMPVA audit and no open rejects  ;cnf
"RTN","PSOREJU3",186,0)
 ; RXIEN will only be in TRICARE/CHAMPVA audit if a bypass or override has occurred and rejects are closed
"RTN","PSOREJU3",187,0)
 ; returns  0  if RXIEN is not in TRICARE/CHAMPVA audit at all or not in audit for right fill number
"RTN","PSOREJU3",188,0)
 ;             rejects must be closed for 0 to be returned
"RTN","PSOREJU3",189,0)
 ;          1  if RXIEN is in TRICARE/CHAMPVA audit for the right fill number and rejects are closed
"RTN","PSOREJU3",190,0)
 ;
"RTN","PSOREJU3",191,0)
 N X,AUDIEN,REJIEN
"RTN","PSOREJU3",192,0)
 S X=0,AUDIEN=""
"RTN","PSOREJU3",193,0)
 I '$D(^PS(52.87,"C",RXIEN)) Q X   ;RXIEN is not in the TRICARE/CHAMPVA audit
"RTN","PSOREJU3",194,0)
 ;
"RTN","PSOREJU3",195,0)
 I $G(RXFILL)="" S RXFILL=$$LSTRFL^PSOBPSU1(RXIEN)  ;Get latest fill if not passed in
"RTN","PSOREJU3",196,0)
 ;
"RTN","PSOREJU3",197,0)
 ;check audit entries for right fill number
"RTN","PSOREJU3",198,0)
 F  S AUDIEN=$O(^PS(52.87,"C",RXIEN,AUDIEN)) Q:AUDIEN=""  I RXFILL=$$GET1^DIQ(52.87,AUDIEN,2) S X=1 Q
"RTN","PSOREJU3",199,0)
 I 'X Q X
"RTN","PSOREJU3",200,0)
 ;
"RTN","PSOREJU3",201,0)
 ;make sure rejects are closed
"RTN","PSOREJU3",202,0)
 S REJIEN=0
"RTN","PSOREJU3",203,0)
 F  S REJIEN=$O(^PSRX(RXIEN,"REJ",REJIEN)) Q:'+REJIEN  D  I 'X Q   ;I 'X, then the reject is not closed
"RTN","PSOREJU3",204,0)
 . S X=$$CLOSED^PSOREJP1(RXIEN,REJIEN,0)
"RTN","PSOREJU3",205,0)
 ;
"RTN","PSOREJU3",206,0)
 Q X
"RTN","PSOREJU3",207,0)
 ;
"RTN","PSOREJU3",208,0)
ECMECHK(RX,FILL) ;
"RTN","PSOREJU3",209,0)
 ; This function returns a '1' if any of the conditions below are met:
"RTN","PSOREJU3",210,0)
 ;    - RX has an unresolved DUR or Refill Too Soon reject
"RTN","PSOREJU3",211,0)
 ;    - RX has an unresolved Reject Resolution Required (RRR) reject (only for Veteran and original fill)
"RTN","PSOREJU3",212,0)
 ;    - RX is TRICARE/CHAMPVA and has any unresolved reject
"RTN","PSOREJU3",213,0)
 ;    - RX is TRICARE/CHAMPVA and IN PROGRESS
"RTN","PSOREJU3",214,0)
 ; This is used by functions such as PPLADD^PSOSUPOE to determine if
"RTN","PSOREJU3",215,0)
 ;   a label should be printed (we do not want a label for the conditions)
"RTN","PSOREJU3",216,0)
 ;
"RTN","PSOREJU3",217,0)
 ; Incoming Parameters:
"RTN","PSOREJU3",218,0)
 ;   RX - Internal IEN of the Prescription File (required)
"RTN","PSOREJU3",219,0)
 ;   FILL - Fill Number (optional, defaults to last fill if not passed in)
"RTN","PSOREJU3",220,0)
 ; Returns:
"RTN","PSOREJU3",221,0)
 ;   0 - None of the conditions exists
"RTN","PSOREJU3",222,0)
 ;   1 - One of the conditions above is met
"RTN","PSOREJU3",223,0)
 ;
"RTN","PSOREJU3",224,0)
 I '$G(RX) Q 0
"RTN","PSOREJU3",225,0)
 I $G(FILL)="" S FILL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJU3",226,0)
 ;
"RTN","PSOREJU3",227,0)
 ; DUR or Refill Too Soon or RRR rejects
"RTN","PSOREJU3",228,0)
 I $$FIND^PSOREJUT(RX,FILL,"","79,88",,1) Q 1
"RTN","PSOREJU3",229,0)
 ;
"RTN","PSOREJU3",230,0)
 ; If not TRICARE/CHAMPVA, quit with 0 as the rest of the checks
"RTN","PSOREJU3",231,0)
 ;   are all TRICARE/CHAMPVA dependent
"RTN","PSOREJU3",232,0)
 I '$$TRIC^PSOREJP1(RX,FILL) Q 0
"RTN","PSOREJU3",233,0)
 ;
"RTN","PSOREJU3",234,0)
 ; No label for TRICARE/CHAMPVA with unresolved rejects
"RTN","PSOREJU3",235,0)
 I $$FIND^PSOREJUT(RX,FILL,,,1) Q 1   ; 5th parameter to $$FIND also finds non-billable TRI/CVA rejects
"RTN","PSOREJU3",236,0)
 ;
"RTN","PSOREJU3",237,0)
 ;No label for TRICARE/CHAMPVA claims that are IN PROGRESS
"RTN","PSOREJU3",238,0)
 I $P($$STATUS^PSOBPSUT(RX,FILL),U)="IN PROGRESS" Q 1
"RTN","PSOREJU3",239,0)
 Q 0
"RTN","PSOREJU4")
0^11^B82956615
"RTN","PSOREJU4",1,0)
PSOREJU4 ;BIRM/LE - Pharmacy Reject Overrides ;06/26/08
"RTN","PSOREJU4",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**289,290,358,359,385,421,448**;DEC 1997;Build 25
"RTN","PSOREJU4",3,0)
 ;Reference to DUR1^BPSNCPD3 supported by IA 4560
"RTN","PSOREJU4",4,0)
 ;Reference to 9002313.93 supported by IA 4720
"RTN","PSOREJU4",5,0)
 ;Reference to ELIG^BPSBUTL supported by IA 4719
"RTN","PSOREJU4",6,0)
 ;
"RTN","PSOREJU4",7,0)
AUTOREJ(CODES,PSODIV) ;API to evaluate an array of reject codes to see if they are allowed to be passed to OP reject Worklist 
"RTN","PSOREJU4",8,0)
 ;Input:      CODES - required; array of codes to be validated for overrides.  
"RTN","PSOREJU4",9,0)
 ;           PSODIV - optional; Division for the Rx and Fill to be evaluated
"RTN","PSOREJU4",10,0)
 ;        
"RTN","PSOREJU4",11,0)
 ;Output:     CODES(0)=0 always - ALLOW ALL REJECTS flag was inactivated with patch 421
"RTN","PSOREJU4",12,0)
 ;      
"RTN","PSOREJU4",13,0)
 ;            CODES(SEQ,REJECT)= 0 (zero) if the fill is not allowed to be passed to the Pharmacy
"RTN","PSOREJU4",14,0)
 ;                                Reject Worklist or 1 (one) for the reject code is allowed.
"RTN","PSOREJU4",15,0)
 ;                                
"RTN","PSOREJU4",16,0)
 N SEQ,COD,AUTO,ALLOW,SPDIV
"RTN","PSOREJU4",17,0)
 ;if no division passed, first division in file 59 is assumed.
"RTN","PSOREJU4",18,0)
 I '$G(PSODIV) S PSODIV=0,PSODIV=$O(^PS(59,PSODIV))
"RTN","PSOREJU4",19,0)
 I '$G(PSODIV) S CODES(0)="0^Division undefined in file 59" Q 
"RTN","PSOREJU4",20,0)
 S SPDIV="",SPDIV=$O(^PS(52.86,"B",PSODIV,SPDIV))
"RTN","PSOREJU4",21,0)
 I SPDIV="" S CODES(0)="0^Division is not defined under ePharmacy Site Parameters option." Q
"RTN","PSOREJU4",22,0)
 ;
"RTN","PSOREJU4",23,0)
 ; - all rejects allowed flag obsolete, set to 0 for parameter integrity 
"RTN","PSOREJU4",24,0)
 S CODES(0)=0
"RTN","PSOREJU4",25,0)
 ;
"RTN","PSOREJU4",26,0)
 ; - check individual reject codes.  If defined, can be passed to Pharmacy Reject Worklist
"RTN","PSOREJU4",27,0)
 S (COD,SEQ)="" F  S SEQ=$O(CODES(SEQ)) Q:SEQ=""  F  S COD=$O(CODES(SEQ,COD)) Q:COD=""  D
"RTN","PSOREJU4",28,0)
 . I $D(^PS(52.86,+SPDIV,1,"B",COD)) S CODES(SEQ,COD)=1
"RTN","PSOREJU4",29,0)
 . E  S CODES(SEQ,COD)=0
"RTN","PSOREJU4",30,0)
 Q
"RTN","PSOREJU4",31,0)
 ;
"RTN","PSOREJU4",32,0)
WRKLST(RX,RFL,COMMTXT,USERID,DTTIME,OPECC,RXCOB,RESP) ;External API to store reject codes other that 79/88/TRICARE/CHAMPVA on the OP Reject Worklist
"RTN","PSOREJU4",33,0)
 ; 
"RTN","PSOREJU4",34,0)
 N REJ,REJS,REJLST,I,IDX,CODE,DATA,TXT,PSOTRIC,SPDVI,PSODIV,REJCD,CLOSECHK
"RTN","PSOREJU4",35,0)
 S PSODIV=$$RXSITE^PSOBPSUT(RX,RFL)
"RTN","PSOREJU4",36,0)
 L +^PSRX("REJ",RX):15 Q:'$T "0^Rx locked by another user."
"RTN","PSOREJU4",37,0)
 I $G(RFL)="" S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJU4",38,0)
 D DUR1^BPSNCPD3(RX,RFL,.REJ,"",RXCOB)
"RTN","PSOREJU4",39,0)
 ;cnf, PSO*7*358, add TRICARE logic
"RTN","PSOREJU4",40,0)
 S REJCD="",CLOSECHK=0
"RTN","PSOREJU4",41,0)
 I $L($G(RESP)) D
"RTN","PSOREJU4",42,0)
 .I $P(RESP,"^",3)'="T",$P(RESP,"^",3)'="C" Q       ;ignore if not TRICARE or CHAMPVA
"RTN","PSOREJU4",43,0)
 .I 'RESP Q   ;Piece 1 will be 0 if claim was submitted thru ECME
"RTN","PSOREJU4",44,0)
 .S REJCD="e"_$P(RESP,"^",3) ; either eT for TRICARE or eC for CHAMPVA
"RTN","PSOREJU4",45,0)
 .S REJ(1,"REJ CODE LST")=REJCD
"RTN","PSOREJU4",46,0)
 .S REJ(1,"PAYER MESSAGE",1)="Not ECME Billable: "_$P(RESP,U,2)
"RTN","PSOREJU4",47,0)
 .S REJ(1,"ELIGBLT")=$P(RESP,"^",3)
"RTN","PSOREJU4",48,0)
 .S CLOSECHK=1
"RTN","PSOREJU4",49,0)
 S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOREJU4",50,0)
 K REJS S (AUTO,IDX)=""
"RTN","PSOREJU4",51,0)
 F  S IDX=$O(REJ(IDX)) Q:IDX=""  D  Q:AUTO'=""
"RTN","PSOREJU4",52,0)
 . S TXT=REJ(IDX,"REJ CODE LST")
"RTN","PSOREJU4",53,0)
 . F I=1:1:$L(TXT,",") D
"RTN","PSOREJU4",54,0)
 . . S CODE=$P(TXT,",",I)
"RTN","PSOREJU4",55,0)
 . . I CODE="" Q   ;BNT-2/15/11 Rare, but could happen that a code is null.
"RTN","PSOREJU4",56,0)
 . . I CODE'="79"&(CODE'="88")&('$G(PSOTRIC)) S AUTO=$$EVAL(PSODIV,CODE,OPECC) Q:'+AUTO
"RTN","PSOREJU4",57,0)
 . . I PSOTRIC S AUTO=1  ;cnf, send all billable and non-billable rejects to worklist if TRICARE or CHAMPVA
"RTN","PSOREJU4",58,0)
 . . I $$DUP^PSOREJU1(RX,+$$CLEAN^PSOREJU1($G(REJ(IDX,"RESPONSE IEN"))),CLOSECHK) S AUTO="0^Rx is already on Pharmacy Reject Worklist."
"RTN","PSOREJU4",59,0)
 . . S REJS(IDX,CODE)=""
"RTN","PSOREJU4",60,0)
 I '$D(REJS) L -^PSRX("REJ",RX) S AUTO="0^No action taken" Q AUTO
"RTN","PSOREJU4",61,0)
 G EXIT:'+AUTO
"RTN","PSOREJU4",62,0)
 ;
"RTN","PSOREJU4",63,0)
 D SYNC2^PSOREJUT
"RTN","PSOREJU4",64,0)
 S AUTO=1
"RTN","PSOREJU4",65,0)
EXIT ;
"RTN","PSOREJU4",66,0)
 L -^PSRX("REJ",RX)
"RTN","PSOREJU4",67,0)
 Q AUTO
"RTN","PSOREJU4",68,0)
 ;
"RTN","PSOREJU4",69,0)
EVAL(PSODIV,CODE,OPECC,RX,RFNBR,COB,RRRDATA) ;Evaluates whether the reject codes other than 79/88/TRICARE/CHAMPVA is allowed to be passed to OP Reject Worklist
"RTN","PSOREJU4",70,0)
 ;Input:      PSODIV - required; Division for the Rx and Fill to be evaluated
"RTN","PSOREJU4",71,0)
 ;              CODE - required; external reject code
"RTN","PSOREJU4",72,0)
 ;             OPECC - optional, 1 means manually passed by OPECC 0 or null means not passed
"RTN","PSOREJU4",73,0)
 ;                RX - optional; IEN from prescription file
"RTN","PSOREJU4",74,0)
 ;             RFNBR - optional; refill number
"RTN","PSOREJU4",75,0)
 ;               COB - optional; coordination of benefits
"RTN","PSOREJU4",76,0)
 ;Output:     $$EVAL - Return value - 1 means reject is allowed to be passed to Pharmacy Reject Worklist and 
"RTN","PSOREJU4",77,0)
 ;                                    0 means not allowed.
"RTN","PSOREJU4",78,0)
 ;           When doing a RRR check, RX, RFNBR & COB are required.
"RTN","PSOREJU4",79,0)
 ;           RRRDATA - passed by reference.   
"RTN","PSOREJU4",80,0)
 ;                     RRRDATA [1] 1/0 is this an RRR reject?
"RTN","PSOREJU4",81,0)
 ;                             [2] gross amount due for the Rx/fill/cob
"RTN","PSOREJU4",82,0)
 ;                             [3] $ dollar threshold amount from PSO site parameters
"RTN","PSOREJU4",83,0)
 ;
"RTN","PSOREJU4",84,0)
 N ALLOWA,CIEN,ALLOW,ICOD,SPDIV
"RTN","PSOREJU4",85,0)
 I '$D(CODE)!(CODE="") Q 0
"RTN","PSOREJU4",86,0)
 I '$G(OPECC) S OPECC=0
"RTN","PSOREJU4",87,0)
 I '$G(PSODIV) Q 0
"RTN","PSOREJU4",88,0)
 S SPDIV="",SPDIV=$O(^PS(52.86,"B",PSODIV,SPDIV))
"RTN","PSOREJU4",89,0)
 Q:SPDIV="" "0^Division is not defined under ePharmacy Site Parameters option."
"RTN","PSOREJU4",90,0)
 S:'$G(AUTO) AUTO=""
"RTN","PSOREJU4",91,0)
 S ICOD="",ICOD=$O(^BPSF(9002313.93,"B",CODE,ICOD))
"RTN","PSOREJU4",92,0)
 Q:ICOD="" 0
"RTN","PSOREJU4",93,0)
 ;
"RTN","PSOREJU4",94,0)
 ; Check for Resolution Required Reject code if so, return a 1
"RTN","PSOREJU4",95,0)
 I $G(RX),$D(RFNBR),$D(COB) S RRRDATA=$$RRRCHK(SPDIV,ICOD,RX,RFNBR,COB) I +RRRDATA Q 1
"RTN","PSOREJU4",96,0)
 ;
"RTN","PSOREJU4",97,0)
 ; Transfer reject processing
"RTN","PSOREJU4",98,0)
 Q:'$D(^PS(52.86,SPDIV,1,"B",ICOD)) "0^Reject Code is not allowed to be passed to Pharmacy Reject Worklist."
"RTN","PSOREJU4",99,0)
 S CIEN="",CIEN=$O(^PS(52.86,SPDIV,1,"B",ICOD,CIEN))
"RTN","PSOREJU4",100,0)
 I CIEN="" S AUTO="0^Code not defined."
"RTN","PSOREJU4",101,0)
 S (AUTO,ALLOW)="",ALLOW=$$GET1^DIQ(52.8651,CIEN_","_SPDIV,1,"I")
"RTN","PSOREJU4",102,0)
 I ALLOW Q 1
"RTN","PSOREJU4",103,0)
 I 'ALLOW D
"RTN","PSOREJU4",104,0)
 . I OPECC S AUTO=1
"RTN","PSOREJU4",105,0)
 . I 'OPECC S AUTO="0^Reject code "_CODE_" cannot be placed on the Pharmacy Reject Worklist"
"RTN","PSOREJU4",106,0)
 Q AUTO
"RTN","PSOREJU4",107,0)
 ;
"RTN","PSOREJU4",108,0)
INLIST(RX,RFL,RXCOB) ;Returns whether a prescription/fill contains UNRESOLVED rejects
"RTN","PSOREJU4",109,0)
 ;Input:
"RTN","PSOREJU4",110,0)
 ;RX - Prescription IEN. 
"RTN","PSOREJU4",111,0)
 ;FILL - Fill number being processed. 
"RTN","PSOREJU4",112,0)
 ;Output:
"RTN","PSOREJU4",113,0)
 ;0 - the fill is not on the Pharmacy Reject Worklist
"RTN","PSOREJU4",114,0)
 ;1 - the fill is already on the Pharmacy Reject Worklist
"RTN","PSOREJU4",115,0)
 N PSOX,PSOX1,PSOX2,REJDATA1
"RTN","PSOREJU4",116,0)
 S PSOX=$$FIND^PSOREJUT(RX,RFL,.REJDATA1,"") I PSOX=0  Q 0
"RTN","PSOREJU4",117,0)
 S RXCOB=$S(RXCOB=1:"PRIMARY",RXCOB=2:"SECONDARY")
"RTN","PSOREJU4",118,0)
 S PSOX1="" F  S PSOX1=$O(REJDATA1(PSOX1))  Q:PSOX1=""  I REJDATA1(PSOX1,"COB")=RXCOB  S PSOX2=1  Q
"RTN","PSOREJU4",119,0)
 I '$G(PSOX2) Q 0
"RTN","PSOREJU4",120,0)
 Q 1
"RTN","PSOREJU4",121,0)
 ;
"RTN","PSOREJU4",122,0)
MULTI(RX,RFL,REJDATA,CODE,REJS,RRRFLG) ;due to routine size, called from FIND^PSOREJUT
"RTN","PSOREJU4",123,0)
 ;returns REJS = 1 means reject code found on Rx, 0 (zero) means not found
"RTN","PSOREJU4",124,0)
 N RCODE,I
"RTN","PSOREJU4",125,0)
 I $G(RFL)'="" D
"RTN","PSOREJU4",126,0)
 . F I=1:1 S RCODE=$P(CODE,",",I) Q:RCODE=""!($G(REJS))  D GET^PSOREJU2(RX,RFL,.REJDATA,,,$G(RCODE),+$G(RRRFLG)) I $D(REJDATA) S REJS=1
"RTN","PSOREJU4",127,0)
 E  S RFL=0 D  I '$D(REJDATA) F  S RFL=$O(^PSRX(RX,1,RFL)) Q:'RFL  D  Q:$G(REJS)
"RTN","PSOREJU4",128,0)
 . F I=1:1 S RCODE=$P(CODE,",",I) Q:RCODE=""!($G(REJS))  D GET^PSOREJU2(RX,RFL,.REJDATA,,,$G(RCODE),+$G(RRRFLG)) I $D(REJDATA) S REJS=1
"RTN","PSOREJU4",129,0)
 Q REJS
"RTN","PSOREJU4",130,0)
 ;
"RTN","PSOREJU4",131,0)
SINGLE(RX,RFL,REJDATA,CODE,REJS,RRRFLG) ;due to routine size, called from FIND^PSOREJUT
"RTN","PSOREJU4",132,0)
 ;Returns REJS = 1 means reject code found on Rx, 0 (zero) means not found
"RTN","PSOREJU4",133,0)
 I $G(RFL)'="" D
"RTN","PSOREJU4",134,0)
 . D GET^PSOREJU2(RX,RFL,.REJDATA,,,$G(CODE),+$G(RRRFLG))
"RTN","PSOREJU4",135,0)
 E  S RFL=0 D  I '$D(REJDATA) F  S RFL=$O(^PSRX(RX,1,RFL)) Q:'RFL  D
"RTN","PSOREJU4",136,0)
 . D GET^PSOREJU2(RX,RFL,.REJDATA,,,$G(CODE),+$G(RRRFLG))
"RTN","PSOREJU4",137,0)
 S REJS=$S($D(REJDATA):1,1:0)
"RTN","PSOREJU4",138,0)
 Q REJS
"RTN","PSOREJU4",139,0)
 ;
"RTN","PSOREJU4",140,0)
RRRCHK(SPDIV,REJ,RX,RFNBR,COB) ; Test a reject for valid Resolution Required Reject code
"RTN","PSOREJU4",141,0)
 ; INPUT
"RTN","PSOREJU4",142,0)
 ; SPDIV  = required - IEN in site parameter file for the selected division
"RTN","PSOREJU4",143,0)
 ; REJ    = required - IEN of the Reject code to test
"RTN","PSOREJU4",144,0)
 ; RX     = required - IEN from prescription file
"RTN","PSOREJU4",145,0)
 ; RFNBR  = required - prescription refill number
"RTN","PSOREJU4",146,0)
 ; COB    = optional - coordination of benefits
"RTN","PSOREJU4",147,0)
 ;
"RTN","PSOREJU4",148,0)
 ; OUTPUT
"RTN","PSOREJU4",149,0)
 ;  Function Value - Returns an "^" delimited string
"RTN","PSOREJU4",150,0)
 ;                 [1] 1/0 is this an RRR reject?
"RTN","PSOREJU4",151,0)
 ;                     1 = Valid resolution required reject code.
"RTN","PSOREJU4",152,0)
 ;                     0 = Invalid resolution required reject code.
"RTN","PSOREJU4",153,0)
 ;                 [2] If valid RRR then gross amount due for the Rx/fill/cob else null
"RTN","PSOREJU4",154,0)
 ;                 [3] If valid RRR then dollar threshold amount from PSO site parameters else null
"RTN","PSOREJU4",155,0)
 ;
"RTN","PSOREJU4",156,0)
 ; For a reject code to be valid each of the following needs to be true:
"RTN","PSOREJU4",157,0)
 ;    1 - Eligibility must be a veteran type
"RTN","PSOREJU4",158,0)
 ;    2 - Must be the first fill on a prescription
"RTN","PSOREJU4",159,0)
 ;    3 - Reject code must be defined in the pharmacy division's site parameters
"RTN","PSOREJU4",160,0)
 ;        as a resolution required reject code.
"RTN","PSOREJU4",161,0)
 ;    4 - Gross amount must be >= DOLLAR THRESHOLD in the pharmacy division's site
"RTN","PSOREJU4",162,0)
 ;        parameters for the given resolution required reject code.
"RTN","PSOREJU4",163,0)
 ;
"RTN","PSOREJU4",164,0)
 ; Verify parameters
"RTN","PSOREJU4",165,0)
 I '$G(SPDIV) Q 0
"RTN","PSOREJU4",166,0)
 I '$D(^PS(52.86,SPDIV)) Q 0
"RTN","PSOREJU4",167,0)
 I '$G(REJ) Q 0
"RTN","PSOREJU4",168,0)
 I '$D(^BPSF(9002313.93,REJ,0)) Q 0                     ; DBIA 4720
"RTN","PSOREJU4",169,0)
 I '$G(RX) Q 0
"RTN","PSOREJU4",170,0)
 I '$D(^PSRX(RX)) Q 0
"RTN","PSOREJU4",171,0)
 I '$D(RFNBR) Q 0
"RTN","PSOREJU4",172,0)
 ;
"RTN","PSOREJU4",173,0)
 N RRRC,AMT,THRSHLD
"RTN","PSOREJU4",174,0)
 ; SPDIV   = IEN in site parameter file for the selected division
"RTN","PSOREJU4",175,0)
 ; RRRC    = indicates the RESOLUTION REQUIRED REJECT CODE exists for the selected division
"RTN","PSOREJU4",176,0)
 ;           it will be a null or an IEN in the 52.865 sub-file
"RTN","PSOREJU4",177,0)
 ; AMT     = RX gross amount due
"RTN","PSOREJU4",178,0)
 ; THRSHLD = DOLLAR THRESHOLD for RRR code
"RTN","PSOREJU4",179,0)
 ;
"RTN","PSOREJU4",180,0)
 ; Test for released status
"RTN","PSOREJU4",181,0)
 I $$GET1^DIQ(52,RX_",",31,"I") Q 0
"RTN","PSOREJU4",182,0)
 ;
"RTN","PSOREJU4",183,0)
 ; Test Eligibility - IA 4719
"RTN","PSOREJU4",184,0)
 I $$ELIG^BPSBUTL(RX,0,$G(COB))'="V" Q 0
"RTN","PSOREJU4",185,0)
 ;
"RTN","PSOREJU4",186,0)
 ; is this a Resolution Required Reject code?
"RTN","PSOREJU4",187,0)
 S RRRC=0,RRRC=$O(^PS(52.86,SPDIV,5,"B",REJ,RRRC))
"RTN","PSOREJU4",188,0)
 I RRRC="" Q 0
"RTN","PSOREJU4",189,0)
 ;
"RTN","PSOREJU4",190,0)
 ; Test gross amount against DOLLAR THRESHOLD
"RTN","PSOREJU4",191,0)
 S AMT=$$AMT^BPSBUTL(RX,0,$G(COB))
"RTN","PSOREJU4",192,0)
 S THRSHLD=$$GET1^DIQ(52.865,RRRC_","_SPDIV_",",.02)
"RTN","PSOREJU4",193,0)
 I AMT<THRSHLD Q 0
"RTN","PSOREJU4",194,0)
 Q 1_U_AMT_U_THRSHLD
"RTN","PSOREJU4",195,0)
 ;
"RTN","PSOREJU4",196,0)
REJCOM(RX,FIL,COB,RET) ; Gather PSO reject comments and return
"RTN","PSOREJU4",197,0)
 ; Input
"RTN","PSOREJU4",198,0)
 ;    RX - prescription IEN required
"RTN","PSOREJU4",199,0)
 ;   FIL - fill# required - will match with the 52.25,5 field
"RTN","PSOREJU4",200,0)
 ;   COB - coordination of benefits# (optional).  If present, will match with the 52.25,27 field
"RTN","PSOREJU4",201,0)
 ; Output
"RTN","PSOREJU4",202,0)
 ;   RET - return array, pass by reference
"RTN","PSOREJU4",203,0)
 ;         RET(external reject code,date/time of comment,incremental counter) =
"RTN","PSOREJU4",204,0)
 ;                 [1] date/time of comment
"RTN","PSOREJU4",205,0)
 ;                 [2] user pointer 200
"RTN","PSOREJU4",206,0)
 ;                 [3] comment text 1-150 characters
"RTN","PSOREJU4",207,0)
 ;
"RTN","PSOREJU4",208,0)
 N REJ,G0,G2,REJCODE,CMT,H0,PSORJCNT
"RTN","PSOREJU4",209,0)
 K RET
"RTN","PSOREJU4",210,0)
 I '$G(RX) G REJCOMX
"RTN","PSOREJU4",211,0)
 I $G(FIL)="" G REJCOMX
"RTN","PSOREJU4",212,0)
 S COB=$G(COB)
"RTN","PSOREJU4",213,0)
 S PSORJCNT=0
"RTN","PSOREJU4",214,0)
 ;
"RTN","PSOREJU4",215,0)
 S REJ=0 F  S REJ=$O(^PSRX(RX,"REJ",REJ)) Q:'REJ  D
"RTN","PSOREJU4",216,0)
 . S G0=$G(^PSRX(RX,"REJ",REJ,0)),G2=$G(^PSRX(RX,"REJ",REJ,2))
"RTN","PSOREJU4",217,0)
 . I FIL'=$P(G0,U,4) Q         ; fill# must match
"RTN","PSOREJU4",218,0)
 . I COB,COB'=$P(G2,U,7) Q     ; cob# must match if COB is passed in
"RTN","PSOREJU4",219,0)
 . S REJCODE=$P(G0,U,1)        ; save external reject code
"RTN","PSOREJU4",220,0)
 . I REJCODE="" Q
"RTN","PSOREJU4",221,0)
 . ;
"RTN","PSOREJU4",222,0)
 . S CMT=0 F  S CMT=$O(^PSRX(RX,"REJ",REJ,"COM",CMT)) Q:'CMT  D
"RTN","PSOREJU4",223,0)
 .. S H0=$G(^PSRX(RX,"REJ",REJ,"COM",CMT,0)) I 'H0 Q      ; make sure the date/time is there
"RTN","PSOREJU4",224,0)
 .. S PSORJCNT=PSORJCNT+1                                 ; increment the counter for unique subscript
"RTN","PSOREJU4",225,0)
 .. S RET(REJCODE,$P(H0,U,1),PSORJCNT)=H0                 ; save the data in sort order
"RTN","PSOREJU4",226,0)
 .. Q
"RTN","PSOREJU4",227,0)
 . Q
"RTN","PSOREJU4",228,0)
REJCOMX ;
"RTN","PSOREJU4",229,0)
 Q
"RTN","PSOREJU4",230,0)
 ;
"RTN","PSOREJU4",231,0)
MP(RX,FIL) ; Entry point for PSO API to display Medication Profile List Manager screen given an Rx and Fill
"RTN","PSOREJU4",232,0)
 ;
"RTN","PSOREJU4",233,0)
 N PSOSITE,DFN,PSODFN,PATIENT,SITE,PSOPAR,PSOPAR7,PSOSYS,PSOPINST
"RTN","PSOREJU4",234,0)
 N CTRLCOL,COL,D,GMRAL,HDR,HIGHLN,LASTLINE,LENGTH,PSOEXDCE,PSOEXPDC,PSOHD,PSOPI,PSORDCNT,PSORDER,PSORDSEQ,PSOSIGDP,PSOSRTBY
"RTN","PSOREJU4",235,0)
 N PSOSTSEQ,PSOSTSGP,PSOTEL,PSOTMP,RSLT,SORT,VA,VACNTRY,VADM,VAPA,VAEL,VAERR
"RTN","PSOREJU4",236,0)
 N DAT,DDER,DIW,DIWF,DIWI,DIWT,DIWTC,DIWX,DN,LIST,OUT,POP,POS,PSNDIY,PSOCHNG,PSOQUIT,PSOBM,PSOQFLG
"RTN","PSOREJU4",237,0)
 I '$G(RX) G MPX
"RTN","PSOREJU4",238,0)
 I $G(FIL)="" G MPX
"RTN","PSOREJU4",239,0)
 ;
"RTN","PSOREJU4",240,0)
 K ^TMP("PSOPI",$J)
"RTN","PSOREJU4",241,0)
 S (SITE,PSOSITE)=+$$RXSITE^PSOBPSUT(RX,FIL)       ; division ien (ptr to file 59)
"RTN","PSOREJU4",242,0)
 S PSOPAR=$G(^PS(59,PSOSITE,1)),PSOPAR7=$G(^PS(59,PSOSITE,"IB")),PSOSYS=$G(^PS(59.7,1,40.1)),PSOPINST=$P($G(^PS(59,PSOSITE,"INI")),U,1)
"RTN","PSOREJU4",243,0)
 S (DFN,PSODFN,PATIENT)=+$$GET1^DIQ(52,RX,2,"I")   ; patient ien
"RTN","PSOREJU4",244,0)
 D LOAD^PSOPMPPF(SITE,DUZ)                         ; load division/user preferences
"RTN","PSOREJU4",245,0)
 D EN^VALM("PSO BPS PMP MAIN")                     ; call list
"RTN","PSOREJU4",246,0)
 K ^TMP("PSOPI",$J),^TMP("PSOPMP0",$J),^TMP("PSOPMPSR",$J)     ; clean-up
"RTN","PSOREJU4",247,0)
MPX ;
"RTN","PSOREJU4",248,0)
 Q
"RTN","PSOREJU4",249,0)
 ;
"RTN","PSOREJU4",250,0)
PI(RX,FIL) ; Entry point for PSO API to display Patient Information List Manager screen given an Rx and Fill
"RTN","PSOREJU4",251,0)
 N PSOSITE,DFN,PSODFN,PATIENT,SITE,PSOPAR,PSOPAR7,PSOSYS,PSOPINST
"RTN","PSOREJU4",252,0)
 N CTRLCOL,COL,D,GMRAL,HDR,HIGHLN,LASTLINE,LENGTH,PSOEXDCE,PSOEXPDC,PSOHD,PSOPI,PSORDCNT,PSORDER,PSORDSEQ,PSOSIGDP,PSOSRTBY
"RTN","PSOREJU4",253,0)
 N PSOSTSEQ,PSOSTSGP,PSOTEL,PSOTMP,RSLT,SORT,VA,VACNTRY,VADM,VAPA,VAEL,VAERR
"RTN","PSOREJU4",254,0)
 N DAT,DDER,DIW,DIWF,DIWI,DIWT,DIWTC,DIWX,DN,LIST,OUT,POP,POS,PSNDIY,PSOCHNG,PSOQUIT,PSOBM,PSOQFLG
"RTN","PSOREJU4",255,0)
 I '$G(RX) G PIX
"RTN","PSOREJU4",256,0)
 I $G(FIL)="" G PIX
"RTN","PSOREJU4",257,0)
 ;
"RTN","PSOREJU4",258,0)
 K ^TMP("PSOPI",$J)
"RTN","PSOREJU4",259,0)
 S (SITE,PSOSITE)=+$$RXSITE^PSOBPSUT(RX,FIL)       ; division ien (ptr to file 59)
"RTN","PSOREJU4",260,0)
 S PSOPAR=$G(^PS(59,PSOSITE,1)),PSOPAR7=$G(^PS(59,PSOSITE,"IB")),PSOSYS=$G(^PS(59.7,1,40.1)),PSOPINST=$P($G(^PS(59,PSOSITE,"INI")),U,1)
"RTN","PSOREJU4",261,0)
 S (DFN,PSODFN,PATIENT)=+$$GET1^DIQ(52,RX,2,"I")   ; patient ien
"RTN","PSOREJU4",262,0)
 D ^PSOORUT2                                       ; build Listman content and header
"RTN","PSOREJU4",263,0)
 D EN^VALM("PSO BPS PATIENT INFORMATION")          ; call list
"RTN","PSOREJU4",264,0)
 K ^TMP("PSOPI",$J)                                ; clean-up
"RTN","PSOREJU4",265,0)
PIX ;
"RTN","PSOREJU4",266,0)
 Q
"RTN","PSOREJU4",267,0)
 ;
"RTN","PSOREJUT")
0^16^B110735693
"RTN","PSOREJUT",1,0)
PSOREJUT ;BIRM/MFR - BPS (ECME) - Clinical Rejects Utilities ;06/07/05
"RTN","PSOREJUT",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,247,260,287,289,290,358,359,385,403,421,427,448**;DEC 1997;Build 25
"RTN","PSOREJUT",3,0)
 ;Reference to DUR1^BPSNCPD3 supported by IA 4560
"RTN","PSOREJUT",4,0)
 ;Reference to $$ADDCOMM^BPSBUTL supported by IA 4719
"RTN","PSOREJUT",5,0)
 ;
"RTN","PSOREJUT",6,0)
SAVE(RX,RFL,REJ,REOPEN) ; - Saves DUR Information in the file 52
"RTN","PSOREJUT",7,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJUT",8,0)
 ;         (o) RFL - Refill # (Default: most recent)
"RTN","PSOREJUT",9,0)
 ;         (o) REOPEN - value of 1 means claim being reopened; null or no value passed means reopen claim functionality not being used
"RTN","PSOREJUT",10,0)
 ;         (r) REJ - Array containing information about the REJECT on the following subscripts:
"RTN","PSOREJUT",11,0)
 ;                   "BIN" - BIN Number
"RTN","PSOREJUT",12,0)
 ;                   "CODE"   - Reject Code (79 or 88)
"RTN","PSOREJUT",13,0)
 ;                   "DATE/TIME"   - Date/Time Reject Detected
"RTN","PSOREJUT",14,0)
 ;                   "PAYER MESSAGE" - Message returned by Payer (up to 140 chars long)
"RTN","PSOREJUT",15,0)
 ;                   "REASON" - Reject Reason (up to 100 chars long)
"RTN","PSOREJUT",16,0)
 ;                   "DUR TEXT" - Payer's DUR description
"RTN","PSOREJUT",17,0)
 ;                   "DUR ADD MSG TEXT" - Payer's DUR additional message text description
"RTN","PSOREJUT",18,0)
 ;                   "INSURANCE NAME" - Patient's Insurance Company Name
"RTN","PSOREJUT",19,0)
 ;                   "INSURANCE POINTER" - Patient's Insurance Company IEN
"RTN","PSOREJUT",20,0)
 ;                   "GROUP NAME" - Patient's Insurance Group Name
"RTN","PSOREJUT",21,0)
 ;                   "GROUP NUMBER" - Patient's Insurance Group Number
"RTN","PSOREJUT",22,0)
 ;                   "CARDHOLDER ID" - Patient's Insurance Cardholder ID
"RTN","PSOREJUT",23,0)
 ;                   "COB" - Coordination of Benefits
"RTN","PSOREJUT",24,0)
 ;                   "PLAN CONTACT" - Patient's Insurance Plan Contact (1-800)
"RTN","PSOREJUT",25,0)
 ;                   "PREVIOUS FILL" - Plan's Previous Fill Date
"RTN","PSOREJUT",26,0)
 ;                   "OTHER REJECTS" - Other Rejects with same Response
"RTN","PSOREJUT",27,0)
 ;                   "PHARMACIST" - Pharmacist DUZ
"RTN","PSOREJUT",28,0)
 ;                   "RESPONSE IEN" - Pointer to the RESPONSE file in ECME
"RTN","PSOREJUT",29,0)
 ;                   "REASON SVC CODE" - Reason for Service Code (pointer to BPS NCPDP REASON FOR SERVICE CODE)
"RTN","PSOREJUT",30,0)
 ;                   "RE-OPENED" - Re-Open Flag
"RTN","PSOREJUT",31,0)
 ;                   "RRR FLAG" - Reject Resolution Required indicator (expecting 1/0 into SAVE)
"RTN","PSOREJUT",32,0)
 ;                   "RRR THRESHOLD AMT" - Reject Resolution Required Dollar Threshold
"RTN","PSOREJUT",33,0)
 ;                   "RRR GROSS AMT DUE" - Reject Resolution Required Gross Amount Due
"RTN","PSOREJUT",34,0)
 ;Output: REJ("REJECT IEN")
"RTN","PSOREJUT",35,0)
 N %,DIC,DR,DA,X,DINUM,DD,DO,DLAYGO,ERR
"RTN","PSOREJUT",36,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJUT",37,0)
 I '$G(PSODIV) S PSODIV=$$RXSITE^PSOBPSUT(RX,RFL)
"RTN","PSOREJUT",38,0)
 S REJ("BIN")=$E($G(REJ("BIN")),1,6)
"RTN","PSOREJUT",39,0)
 S REJ("CODE")=$G(REJ("CODE"))
"RTN","PSOREJUT",40,0)
 ;
"RTN","PSOREJUT",41,0)
 ; convert REJ("RRR FLAG") into internal format (1/0) if necessary. When coming into SAVE from the Re-open Reject
"RTN","PSOREJUT",42,0)
 ; action, this flag is in the external format (YES/NO).   esg - 3/29/16 - PSO*7*448
"RTN","PSOREJUT",43,0)
 I $G(REJ("RRR FLAG"))="YES" S REJ("RRR FLAG")=1
"RTN","PSOREJUT",44,0)
 I $G(REJ("RRR FLAG"))="NO" S REJ("RRR FLAG")=0
"RTN","PSOREJUT",45,0)
 ;
"RTN","PSOREJUT",46,0)
 ;Ignore this additional Check if reject is Reject Resolution Required reject - PSO*7*421
"RTN","PSOREJUT",47,0)
 I '$G(REJ("RRR FLAG")),REJ("CODE")'=79&(REJ("CODE")'=88)&('$G(PSOTRIC))&('$G(REOPEN)) S ERR=$$EVAL^PSOREJU4(PSODIV,REJ("CODE"),$G(OPECC)) Q:'+ERR
"RTN","PSOREJUT",48,0)
 S REJ("PAYER MESSAGE")=$E($G(REJ("PAYER MESSAGE")),1,140),REJ("REASON")=$E($G(REJ("REASON")),1,100)
"RTN","PSOREJUT",49,0)
 S REJ("DUR TEXT")=$E($G(REJ("DUR TEXT")),1,100),REJ("DUR ADD MSG TEXT")=$E($G(REJ("DUR ADD MSG TEXT")),1,100),REJ("GROUP NAME")=$E($G(REJ("GROUP NAME")),1,30)
"RTN","PSOREJUT",50,0)
 S REJ("INSURANCE NAME")=$E($G(REJ("INSURANCE NAME")),1,30),REJ("PLAN CONTACT")=$E($G(REJ("PLAN CONTACT")),1,30)
"RTN","PSOREJUT",51,0)
 S REJ("GROUP NUMBER")=$E($G(REJ("GROUP NUMBER")),1,30),REJ("OTHER REJECTS")=$E($G(REJ("OTHER REJECTS")),1,15)
"RTN","PSOREJUT",52,0)
 S REJ("CARDHOLDER ID")=$E($G(REJ("CARDHOLDER ID")),1,20),REJ("COB")=$G(REJ("COB"))
"RTN","PSOREJUT",53,0)
 I $G(REJ("DATE/TIME"))="" D NOW^%DTC S REJ("DATE/TIME")=%
"RTN","PSOREJUT",54,0)
 S DIC="^PSRX("_RX_",""REJ"",",DA(1)=RX,DIC(0)=""
"RTN","PSOREJUT",55,0)
 S X=$G(REJ("CODE")),DINUM=$O(^PSRX(RX,"REJ",9999),-1)+1
"RTN","PSOREJUT",56,0)
 S DIC("DR")="1///"_$G(REJ("DATE/TIME"))_";2///"_REJ("PAYER MESSAGE")_";3///"_REJ("REASON")_";4////"_$G(REJ("PHARMACIST"))_";5///"_RFL
"RTN","PSOREJUT",57,0)
 S DIC("DR")=DIC("DR")_";6///"_REJ("GROUP NAME")_";7///"_REJ("PLAN CONTACT")_";8///"_$G(REJ("PREVIOUS FILL"))
"RTN","PSOREJUT",58,0)
 S DIC("DR")=DIC("DR")_";9///0;14///"_$G(REJ("REASON SVC CODE"))_";16///"_$G(REJ("RESPONSE IEN"))
"RTN","PSOREJUT",59,0)
 S DIC("DR")=DIC("DR")_";17///"_$G(REJ("OTHER REJECTS"))_";18///"_REJ("DUR TEXT")_";20///"_REJ("INSURANCE NAME")
"RTN","PSOREJUT",60,0)
 S DIC("DR")=DIC("DR")_";21///"_REJ("GROUP NUMBER")_";22///"_REJ("CARDHOLDER ID")_";23///"_$G(REJ("RE-OPENED"))
"RTN","PSOREJUT",61,0)
 S DIC("DR")=DIC("DR")_";27///"_REJ("COB")
"RTN","PSOREJUT",62,0)
 S DIC("DR")=DIC("DR")_";28///"_REJ("DUR ADD MSG TEXT")
"RTN","PSOREJUT",63,0)
 S DIC("DR")=DIC("DR")_";29///"_REJ("BIN")
"RTN","PSOREJUT",64,0)
 ;Update Reject Resolution Required fields - PSO*7*421
"RTN","PSOREJUT",65,0)
 I $G(REJ("RRR FLAG")) D
"RTN","PSOREJUT",66,0)
 .S DIC("DR")=DIC("DR")_";30///"_REJ("RRR FLAG")
"RTN","PSOREJUT",67,0)
 .S DIC("DR")=DIC("DR")_";31///"_REJ("RRR THRESHOLD AMT")
"RTN","PSOREJUT",68,0)
 .S DIC("DR")=DIC("DR")_";32///"_REJ("RRR GROSS AMT DUE")
"RTN","PSOREJUT",69,0)
 S DIC("DR")=DIC("DR")_";33///"_REJ("INSURANCE POINTER")
"RTN","PSOREJUT",70,0)
 F  L +^PSRX(RX):5 Q:$T  H 15
"RTN","PSOREJUT",71,0)
 K DD,DO D FILE^DICN K DD,DO S REJ("REJECT IEN")=+Y
"RTN","PSOREJUT",72,0)
 S REJ("OVERRIDE MSG")=$G(DATA("OVERRIDE MSG"))
"RTN","PSOREJUT",73,0)
 ;Comments use POSTMASTER as user for auto transfers - PSO*7*421
"RTN","PSOREJUT",74,0)
 I REJ("OVERRIDE MSG")'="" D
"RTN","PSOREJUT",75,0)
 .N ORIGIN S ORIGIN=$G(DUZ)
"RTN","PSOREJUT",76,0)
 .S:REJ("OVERRIDE MSG")["Automatically transferred" ORIGIN=.5
"RTN","PSOREJUT",77,0)
 .D SAVECOM^PSOREJP3(RX,REJ("REJECT IEN"),REJ("OVERRIDE MSG"),$G(REJ("DATE/TIME")),ORIGIN)
"RTN","PSOREJUT",78,0)
 .;Insert comment for Transfer and RRR Rejects - PSO*7*421
"RTN","PSOREJUT",79,0)
 .I REJ("OVERRIDE MSG")["Automatically transferred" D
"RTN","PSOREJUT",80,0)
 ..N X,TXT
"RTN","PSOREJUT",81,0)
 ..S TXT="Auto Send to Pharmacy Worklist due to Transfer Reject Code"
"RTN","PSOREJUT",82,0)
 ..I $G(REJ("RRR FLAG")) S TXT="Auto Send to Pharmacy Worklist due to Reject Resolution Required Code"
"RTN","PSOREJUT",83,0)
 ..I $G(PSOTRIC) S TXT="Auto Send to Pharmacy Worklist & OPECC - CVA/TRI"
"RTN","PSOREJUT",84,0)
 ..S X=$$ADDCOMM^BPSBUTL(RX,RFL,TXT,1) ; IA 4719
"RTN","PSOREJUT",85,0)
 L -^PSRX(RX)
"RTN","PSOREJUT",86,0)
 Q
"RTN","PSOREJUT",87,0)
 ; 
"RTN","PSOREJUT",88,0)
CLSALL(RX,RFL,USR,REA,COM,COD1,COD2,COD3,CLA,PA) ; Close/Resolve All Rejects
"RTN","PSOREJUT",89,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOREJUT",90,0)
 ;       (o) RFL  - Refill # (Default: most recent)
"RTN","PSOREJUT",91,0)
 ;       (o) USR  - User DUZ responsible for closing all rejects
"RTN","PSOREJUT",92,0)
 ;       (r) REA  - Close REASON code
"RTN","PSOREJUT",93,0)
 ;       (o) COM  - Close COMMENTS
"RTN","PSOREJUT",94,0)
 ;       (o) COD1 - First set of DUR overrides (Reason Code^Professional Code^Result Code)
"RTN","PSOREJUT",95,0)
 ;       (o) COD2 - Second set of DUR overrides (Reason Code^Professional Code^Result Code)
"RTN","PSOREJUT",96,0)
 ;       (o) COD3 - Third set of DUR overrides (Reason Code^Professional Code^Result Code)
"RTN","PSOREJUT",97,0)
 ;       (o) CLA  - NCPDP Clarification Code for overriding RTS and DUR REJECTS
"RTN","PSOREJUT",98,0)
 ;       (o) PA   - NCPDP Prior Authorization Type and Number (separated by "^")
"RTN","PSOREJUT",99,0)
 N REJ,REJDATA,DIE,DR,DA
"RTN","PSOREJUT",100,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJUT",101,0)
 ; - Closing OPEN/UNRESOLVED rejects
"RTN","PSOREJUT",102,0)
 I $$FIND(RX,RFL,.REJDATA,,1) D
"RTN","PSOREJUT",103,0)
 . S REJ="" F  S REJ=$O(REJDATA(REJ)) Q:'REJ  D
"RTN","PSOREJUT",104,0)
 . . D CLOSE(RX,RFL,REJ,USR,REA,$G(COM),$G(COD1),$G(COD2),$G(COD3),$G(CLA),$G(PA))
"RTN","PSOREJUT",105,0)
 Q
"RTN","PSOREJUT",106,0)
 ;
"RTN","PSOREJUT",107,0)
CLOSE(RX,RFL,REJ,USR,REA,COM,COD1,COD2,COD3,CLA,PA,IGNR) ; - Mark a DUR/REFILL TOO SOON reject RESOLVED
"RTN","PSOREJUT",108,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJUT",109,0)
 ;         (o) RFL - Refill # (Default: most recent)
"RTN","PSOREJUT",110,0)
 ;         (r) REJ - REJECT ID (IEN)
"RTN","PSOREJUT",111,0)
 ;         (o) USR - User (file #200 IEN) responsible for closing the REJECT
"RTN","PSOREJUT",112,0)
 ;         (r) REA - Reason for closing the REJECT  (52.25,12):
"RTN","PSOREJUT",113,0)
 ;                       1:CLAIM RE-SUBMITTED
"RTN","PSOREJUT",114,0)
 ;                       2:RX ON HOLD
"RTN","PSOREJUT",115,0)
 ;                       3:RX SUSPENDED
"RTN","PSOREJUT",116,0)
 ;                       4:RX RETURNED TO STOCK
"RTN","PSOREJUT",117,0)
 ;                       5:RX DELETED
"RTN","PSOREJUT",118,0)
 ;                       6:IGNORED - NO RESUBMISSION
"RTN","PSOREJUT",119,0)
 ;                       7:RX DISCONTINUED
"RTN","PSOREJUT",120,0)
 ;                       8:RX EDITED
"RTN","PSOREJUT",121,0)
 ;                      99:OTHER
"RTN","PSOREJUT",122,0)
 ;         (o) COM  - Close comments manually entered by the user
"RTN","PSOREJUT",123,0)
 ;         (o) COD1 - First set of DUR overrides (Reason Code^Professional Code^Result Code)
"RTN","PSOREJUT",124,0)
 ;         (o) COD2 - Second set of DUR overrides (Reason Code^Professional Code^Result Code)
"RTN","PSOREJUT",125,0)
 ;         (o) COD3 - Third set of DUR overrides (Reason Code^Professional Code^Result Code)
"RTN","PSOREJUT",126,0)
 ;         (o) CLA  - NCPDP Clarification Code for overriding RTS and DUR REJECTS
"RTN","PSOREJUT",127,0)
 ;         (o) PA   - NCPDP Prior Authorization Type and Number (separated by "^")
"RTN","PSOREJUT",128,0)
 ;         (o) IGNR - Ignore Flag; 1=IGNORE, 0=NOT IGNORE
"RTN","PSOREJUT",129,0)
 ;
"RTN","PSOREJUT",130,0)
 I '$G(RX)!'$G(REJ) Q
"RTN","PSOREJUT",131,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJUT",132,0)
 I '$D(^PSRX(RX,"REJ",REJ)) Q
"RTN","PSOREJUT",133,0)
 I $$GET1^DIQ(52.25,REJ_","_RX,5)'=+$G(RFL) Q
"RTN","PSOREJUT",134,0)
 S:'$G(REA) REA=99 S COM=$TR($G(COM),";^",",,")
"RTN","PSOREJUT",135,0)
 N DQ,DA,DIE,DR,X,Y,REJCOM,I,SMACOM,SMA
"RTN","PSOREJUT",136,0)
 D NOW^%DTC
"RTN","PSOREJUT",137,0)
 S REJCOM="AUTOMATICALLY CLOSED" I REA'=1 S REJCOM=COM
"RTN","PSOREJUT",138,0)
 S DA(1)=RX,DA=REJ,DIE="^PSRX("_RX_",""REJ"","
"RTN","PSOREJUT",139,0)
 S DR="9///1;10///"_%_";11////"_$G(USR)_";12///"_REA_";13///"_REJCOM_";14///"_$P($G(COD1),"^")_";15///"_$P($G(COD1),"^",2)
"RTN","PSOREJUT",140,0)
 S DR=DR_";19///"_$P($G(COD1),"^",3)_";24///"_$G(CLA)_";25///"_$P($G(PA),"^")_";26///"_$P($G(PA),"^",2)
"RTN","PSOREJUT",141,0)
 D ^DIE
"RTN","PSOREJUT",142,0)
 ; Quit if this is a "eT" (non-billable TRICARE) or "eC" (non-billable CHAMPVA)
"RTN","PSOREJUT",143,0)
 Q:$$PSOET^PSOREJP3(RX,RFL)
"RTN","PSOREJUT",144,0)
 ;
"RTN","PSOREJUT",145,0)
 ; Add comment to the ECME User Screen
"RTN","PSOREJUT",146,0)
 ; First check if this is has more than one override value from the SMA action of the reject worklist
"RTN","PSOREJUT",147,0)
 ; If it is, we will need to enter multiple comments
"RTN","PSOREJUT",148,0)
 S SMA=0
"RTN","PSOREJUT",149,0)
 I $G(COD1)]"",$G(CLA)]"" S SMA=1
"RTN","PSOREJUT",150,0)
 I $G(COD1)]"",$G(PA)]"" S SMA=1
"RTN","PSOREJUT",151,0)
 I $G(CLA)]"",$G(PA)]"" S SMA=1
"RTN","PSOREJUT",152,0)
 I SMA D  Q
"RTN","PSOREJUT",153,0)
 . I $G(COD1)]"" D
"RTN","PSOREJUT",154,0)
 .. S SMACOM=$TR("DUR Override Codes "_$G(COD1)_"~"_$G(COD2)_"~"_$G(COD3)_" submitted.","^","/")
"RTN","PSOREJUT",155,0)
 .. S X=$$ADDCOMM^BPSBUTL(RX,RFL,SMACOM)
"RTN","PSOREJUT",156,0)
 . I $G(CLA)]"" D
"RTN","PSOREJUT",157,0)
 .. S SMACOM="Clarification Code(s) "_CLA_" submitted."
"RTN","PSOREJUT",158,0)
 .. S X=$$ADDCOMM^BPSBUTL(RX,RFL,SMACOM)
"RTN","PSOREJUT",159,0)
 . I $G(PA)]"" D
"RTN","PSOREJUT",160,0)
 .. S SMACOM="Prior Authorization Code ("_$P(PA,"^")_"/"_$P(PA,"^",2)_") submitted."
"RTN","PSOREJUT",161,0)
 .. S X=$$ADDCOMM^BPSBUTL(RX,RFL,SMACOM)
"RTN","PSOREJUT",162,0)
 . S SMACOM="Multiple actions taken to resolve. See comments for details."
"RTN","PSOREJUT",163,0)
 . S X=$$ADDCOMM^BPSBUTL(RX,RFL,SMACOM)
"RTN","PSOREJUT",164,0)
 ;
"RTN","PSOREJUT",165,0)
 ; If not SMA, fall through to here and enter one comment
"RTN","PSOREJUT",166,0)
 ; If IGNR flag is set, add that to the comment string before sending
"RTN","PSOREJUT",167,0)
 S X=$$ADDCOMM^BPSBUTL(RX,RFL,$S($G(IGNR):"IGNORED - ",1:"")_COM)
"RTN","PSOREJUT",168,0)
 Q
"RTN","PSOREJUT",169,0)
 ;
"RTN","PSOREJUT",170,0)
FIND(RX,RFL,REJDATA,CODE,BESC,RRRFLG) ; - Returns whether a Rx/fill contains UNRESOLVED rejects
"RTN","PSOREJUT",171,0)
 ; Input: (r) RX - Rx IEN (#52) 
"RTN","PSOREJUT",172,0)
 ; (o) RFL - Refill # (If not passed, look original and all refills)
"RTN","PSOREJUT",173,0)
 ; (o) CODE - Can be null, a specific Reject Code(s) to be checked or multiple codes separated by comma's
"RTN","PSOREJUT",174,0)
 ; (o) BESC - Bypass ECME Status Check (default behavior is to do the check); pass 1 to skip the check below
"RTN","PSOREJUT",175,0)
 ;            We need to skip this check when looking for non-ECME billable rejects (eT or eC for example)
"RTN","PSOREJUT",176,0)
 ; (o) RRRFLG - Pass a 1 in this parameter to also look for any unresolved Reject Resolution Required (RRR)
"RTN","PSOREJUT",177,0)
 ;              rejects when CODE is also passed.  If CODE is not passed in, then pass a 1 here to ONLY look for
"RTN","PSOREJUT",178,0)
 ;              unresolved RRR rejects.
"RTN","PSOREJUT",179,0)
 ;              The default here is 0 if not passed.
"RTN","PSOREJUT",180,0)
 ;
"RTN","PSOREJUT",181,0)
 ; Output: 1 - Rx contains unresolved Rejects
"RTN","PSOREJUT",182,0)
 ;         0 - Rx does not contain unresolved Rejects
"RTN","PSOREJUT",183,0)
 ;  .REJDATA - Array containing the Reject(s) data (see GET^PSOREJU2 for fields documentation)
"RTN","PSOREJUT",184,0)
 ;
"RTN","PSOREJUT",185,0)
 N RCODE,I,REJS
"RTN","PSOREJUT",186,0)
 S REJS=0,RCODE=""
"RTN","PSOREJUT",187,0)
 K REJDATA
"RTN","PSOREJUT",188,0)
 I '$G(BESC),$G(RFL),$$STATUS^PSOBPSUT(RX,RFL)="" Q 0
"RTN","PSOREJUT",189,0)
 I $G(CODE)]"",CODE["," S REJS=$$MULTI^PSOREJU4(RX,$G(RFL),.REJDATA,$G(CODE),REJS,+$G(RRRFLG)) G FEND
"RTN","PSOREJUT",190,0)
 S REJS=$$SINGLE^PSOREJU4(RX,$G(RFL),.REJDATA,$G(CODE),REJS,+$G(RRRFLG))
"RTN","PSOREJUT",191,0)
FEND ;
"RTN","PSOREJUT",192,0)
 Q $S(REJS:1,1:0)
"RTN","PSOREJUT",193,0)
 ;
"RTN","PSOREJUT",194,0)
SYNC(RX,RFL,USR,RXCOB) ;
"RTN","PSOREJUT",195,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJUT",196,0)
 ;         (o) RFL - Refill # (Default: most recent)
"RTN","PSOREJUT",197,0)
 ;         (o) USR - User using the system when this routine is called
"RTN","PSOREJUT",198,0)
 ;         (o) RXCOB - Coordination of Benefits code
"RTN","PSOREJUT",199,0)
 I '$G(RXCOB) S RXCOB=1
"RTN","PSOREJUT",200,0)
 N REJ,REJS,REJLST,I,IDX,CODE,DATA,TXT,PSOTRIC,ERR,PSODIV,OPECC,OVREJ,ESH
"RTN","PSOREJUT",201,0)
 N REJRRR,RRRVAL ; PSO*7*421
"RTN","PSOREJUT",202,0)
 L +^PSRX("REJ",RX):0 Q:'$T
"RTN","PSOREJUT",203,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJUT",204,0)
 S PSODIV=$$RXSITE^PSOBPSUT(RX,RFL)
"RTN","PSOREJUT",205,0)
 D DUR1^BPSNCPD3(RX,RFL,.REJ,"",RXCOB)
"RTN","PSOREJUT",206,0)
 S PSOTRIC="" S:$G(REJ(1,"ELIGBLT"))="T" PSOTRIC=1 S:$G(REJ(1,"ELIGBLT"))="C" PSOTRIC=2 S:PSOTRIC="" PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,.PSOTRIC)
"RTN","PSOREJUT",207,0)
 K REJS S (OPECC,IDX,ERR)=""
"RTN","PSOREJUT",208,0)
 F  S IDX=$O(REJ(IDX)) Q:IDX=""  S TXT=$G(REJ(IDX,"REJ CODE LST")) D
"RTN","PSOREJUT",209,0)
 . F I=1:1:$L(TXT,",") S CODE=$P(TXT,",",I),OVREJ="" D
"RTN","PSOREJUT",210,0)
 . . I CODE="" Q
"RTN","PSOREJUT",211,0)
 . . I ",M6,M8,99,NN,"[(","_CODE_",") S ESH="",ESH=$$DUR^PSOBPSU2(RX,RFL) Q:'ESH&('PSOTRIC)
"RTN","PSOREJUT",212,0)
 . . ;Additional check for Reject Resolution Required included - PSO*7*421
"RTN","PSOREJUT",213,0)
 . . I CODE'="79"&(CODE'="88")&('$G(PSOTRIC)) S ERR=$$EVAL^PSOREJU4(PSODIV,CODE,OPECC,RX,RFL,RXCOB,.RRRVAL) Q:'+ERR
"RTN","PSOREJUT",214,0)
 . . I +$G(ERR) S OVREJ=1 S:+$G(RRRVAL) REJRRR(IDX)=RRRVAL
"RTN","PSOREJUT",215,0)
 . . I $$DUP^PSOREJU1(RX,+$$CLEAN^PSOREJU1($G(REJ(IDX,"RESPONSE IEN")))) Q
"RTN","PSOREJUT",216,0)
 . . S REJS(IDX,CODE)=OVREJ
"RTN","PSOREJUT",217,0)
 I '$D(REJS) L -^PSRX("REJ",RX) Q
"RTN","PSOREJUT",218,0)
SYNC2 ;
"RTN","PSOREJUT",219,0)
 S (IDX,CODE)="" F  S IDX=$O(REJS(IDX)) Q:IDX=""  D
"RTN","PSOREJUT",220,0)
 . F  S CODE=$O(REJS(IDX,CODE)) Q:CODE=""  K DATA D
"RTN","PSOREJUT",221,0)
 . . ;Additional check for Reject Resolution Required - PSO*7*421
"RTN","PSOREJUT",222,0)
 . . I 'OPECC&(CODE'[79)&(CODE'[88) D
"RTN","PSOREJUT",223,0)
 . . .I '+$G(REJRRR(IDX)) S DATA("OVERRIDE MSG")="Automatically transferred due to override for reject code." Q
"RTN","PSOREJUT",224,0)
 . . .;Reject Resolution Required fields
"RTN","PSOREJUT",225,0)
 . . .S DATA("RRR FLAG")=1
"RTN","PSOREJUT",226,0)
 . . .S DATA("RRR GROSS AMT DUE")=$P(REJRRR(IDX),U,2)
"RTN","PSOREJUT",227,0)
 . . .S DATA("RRR THRESHOLD AMT")=$P(REJRRR(IDX),U,3)
"RTN","PSOREJUT",228,0)
 . . .S DATA("OVERRIDE MSG")="Automatically transferred due to Reject Resolution Required reject code"
"RTN","PSOREJUT",229,0)
 . . I OPECC&(CODE'[79)&(CODE'[88) S DATA("OVERRIDE MSG")="Transferred by "_$S(CODE["eT":"",CODE["eC":"",1:"OPECC.")   ;cnf,PSO*7.0*358
"RTN","PSOREJUT",230,0)
 . . I $D(COMMTXT) S:COMMTXT'="" DATA("OVERRIDE MSG")=DATA("OVERRIDE MSG")_" "_$$CLEAN^PSOREJU1($P(COMMTXT,":",2))
"RTN","PSOREJUT",231,0)
 . . S DATA("DUR TEXT")=$$CLEAN^PSOREJU1($G(REJ(IDX,"DUR FREE TEXT DESC")))
"RTN","PSOREJUT",232,0)
 . . S DATA("DUR ADD MSG TEXT")=$$CLEAN^PSOREJU1($G(REJ(IDX,"DUR ADD MSG TEXT")))
"RTN","PSOREJUT",233,0)
 . . ; In NCPDP D0, the Payer Additional Message is a repeating field and we want to display as much of the
"RTN","PSOREJUT",234,0)
 . . ;   data on the reject information screen as possible so we put the messages together up to the field
"RTN","PSOREJUT",235,0)
 . . ;   length of 140
"RTN","PSOREJUT",236,0)
 . . N CNT,MSG
"RTN","PSOREJUT",237,0)
 . . S CNT="",DATA("PAYER MESSAGE")=""
"RTN","PSOREJUT",238,0)
 . . F  S CNT=$O(REJ(IDX,"PAYER MESSAGE",CNT)) Q:CNT=""!($L(DATA("PAYER MESSAGE"))>140)  D
"RTN","PSOREJUT",239,0)
 . . . S MSG=$$CLEAN^PSOREJU1(REJ(IDX,"PAYER MESSAGE",CNT))
"RTN","PSOREJUT",240,0)
 . . . I MSG]"" S DATA("PAYER MESSAGE")=DATA("PAYER MESSAGE")_MSG_"  "
"RTN","PSOREJUT",241,0)
 . . ; Call CLEAN again to strip the extra trailing spaces we might have added
"RTN","PSOREJUT",242,0)
 . . S DATA("PAYER MESSAGE")=$$CLEAN^PSOREJU1(DATA("PAYER MESSAGE"))
"RTN","PSOREJUT",243,0)
 . . S DATA("CODE")=CODE,DATA("REASON")=$$CLEAN^PSOREJU1($G(REJ(IDX,"REASON")))
"RTN","PSOREJUT",244,0)
 . . S DATA("PHARMACIST")=$G(USR),DATA("INSURANCE NAME")=$$CLEAN^PSOREJU1($G(REJ(IDX,"INSURANCE NAME")))
"RTN","PSOREJUT",245,0)
 . . S DATA("INSURANCE POINTER")=$$CLEAN^PSOREJU1($G(REJ(IDX,"INSURANCE POINTER")))
"RTN","PSOREJUT",246,0)
 . . S DATA("GROUP NAME")=$$CLEAN^PSOREJU1($G(REJ(IDX,"GROUP NAME"))),DATA("GROUP NUMBER")=$$CLEAN^PSOREJU1($G(REJ(IDX,"GROUP NUMBER")))
"RTN","PSOREJUT",247,0)
 . . S DATA("CARDHOLDER ID")=$$CLEAN^PSOREJU1($G(REJ(IDX,"CARDHOLDER ID"))),DATA("PLAN CONTACT")=$$CLEAN^PSOREJU1($G(REJ(IDX,"PLAN CONTACT")))
"RTN","PSOREJUT",248,0)
 . . S DATA("PREVIOUS FILL")=$$CLEAN^PSOREJU1($$DAT^PSOREJU1($G(REJ(IDX,"PREVIOUS FILL DATE"))))
"RTN","PSOREJUT",249,0)
 . . S DATA("OTHER REJECTS")=$$CLEAN^PSOREJU1($$OTH^PSOREJU1(CODE,$G(REJ(IDX,"REJ CODE LST"))))
"RTN","PSOREJUT",250,0)
 . . S DATA("RESPONSE IEN")=+$$CLEAN^PSOREJU1($G(REJ(IDX,"RESPONSE IEN")))
"RTN","PSOREJUT",251,0)
 . . S DATA("REASON SVC CODE")=$$REASON^PSOREJU2($G(REJ(IDX,"REASON"))),DATA("COB")=IDX
"RTN","PSOREJUT",252,0)
 . . S DATA("MESSAGE")=$$CLEAN^PSOREJU1($G(REJ(IDX,"MESSAGE")))
"RTN","PSOREJUT",253,0)
 . . S DATA("DUR RESPONSE DATA")=$$CLEAN^PSOREJU1($G(REJ(IDX,"DUR RESPONSE DATA")))
"RTN","PSOREJUT",254,0)
 . . S DATA("BIN")=$$CLEAN^PSOREJU1($G(REJ(IDX,"BIN")))
"RTN","PSOREJUT",255,0)
 . . D SAVE(RX,RFL,.DATA)
"RTN","PSOREJUT",256,0)
 L -^PSRX("REJ",RX)
"RTN","PSOREJUT",257,0)
 Q
"RTN","PSOSULB1")
0^9^B46165452
"RTN","PSOSULB1",1,0)
PSOSULB1 ;BHAM ISC/RTR,SAB-Print suspended labels  cont. ;10/10/96
"RTN","PSOSULB1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**10,200,264,289,367,421,448**;DEC 1997;Build 25
"RTN","PSOSULB1",3,0)
 ;Reference to $$INSUR^IBBAPI supported by IA 4419
"RTN","PSOSULB1",4,0)
 ;Reference to $$BILLABLE^IBNCPDP supported by IA 6243
"RTN","PSOSULB1",5,0)
 ;
"RTN","PSOSULB1",6,0)
DEV D:'$D(PSOPAR) ^PSOLSET G:'$D(PSOPAR) DEV S PSOION=ION
"RTN","PSOSULB1",7,0)
 N X S X="PSXRSUS" X ^%ZOSF("TEST") G:($T)&($G(PSXSYS))&($D(^XUSEC("PSXCMOPMGR",DUZ)))&($D(^XUSEC("PSX XMIT",DUZ))) ^PSXRSUS
"RTN","PSOSULB1",8,0)
DEV1 I '$P(PSOPAR,"^",8) G START
"RTN","PSOSULB1",9,0)
 N PSOPROP,PFIO W $C(7),!!,"PROFILES MUST BE SENT TO PRINTER !!",! K IOP,%ZIS,IO("Q"),POP S %ZIS="MNQ",%ZIS("A")="Select PROFILE Device: " D ^%ZIS K %ZIS("A") G:POP EXIT^PSOSULBL G:$E(IOST)["C"!(PSOION=ION) DEV S PSOPROP=ION D ^%ZISC
"RTN","PSOSULB1",10,0)
START I $G(PSOCUTDT)']"" S X1=DT,X2=-120 D C^%DTC S PSODTCUT=X,PSOPRPAS=$P(PSOPAR,"^",7)
"RTN","PSOSULB1",11,0)
ASK K ^TMP($J),PSOSU,PSOSUSPR S PFIOQ=0,PDUZ=DUZ W !
"RTN","PSOSULB1",12,0)
 S %DT="AEX",%DT("A")="Print labels through date: ",%DT("B")="TODAY" D ^%DT K %DT D:Y<0 MESS G:Y<0 EXIT^PSOSULBL S PRTDT=Y
"RTN","PSOSULB1",13,0)
 I '$O(^PS(52.5,"C",0))!($O(^(0))>PRTDT) W $C(7),!!,"NOTHING THRU DATE TO PRINT" G ASK
"RTN","PSOSULB1",14,0)
 W ! K DIR S DIR("A")="Sort by Patient Name, ID#, or DEA Special Handling",DIR(0)="SB^P:PATIENT NAME;I:IDENTIFICATION NUMBER;D:DEA SPECIAL HANDLING"
"RTN","PSOSULB1",15,0)
 S DIR("?")="Enter 'P' to sort the labels alphabetically by name, enter 'I' to sort by identification number, enter 'D' to sort by DEA Special Handling."
"RTN","PSOSULB1",16,0)
 S DIR("?",1)="Sorting by DEA Special Handling will print the labels in three groups. The",DIR("?",2)="first will contain labels with drugs marked with an A or C in the DEA Special"
"RTN","PSOSULB1",17,0)
 S DIR("?",3)="Handling field, indicating NARCOTICS AND ALCOHOLICS, and CONTROLLED SUBSTANCES-",DIR("?",4)="NON NARCOTIC. The second group will contain ones marked with an S, indicating"
"RTN","PSOSULB1",18,0)
 S DIR("?",5)="SUPPLY, and all others will print in the third group.",DIR("?",6)=""
"RTN","PSOSULB1",19,0)
 D ^DIR K DIR D:$D(DIRUT) MESS G:$D(DIRUT) EXIT^PSOSULBL S PSRT=$S(Y="D":"D",Y="P":1,1:0)
"RTN","PSOSULB1",20,0)
 I Y="D" W ! K DIR S DIR(0)="SB^P:PATIENT NAME;I:IDENTIFICATION NUMBER",DIR("A")="Within DEA Special Handling, sort by Patient Name or ID#" D ^DIR K DIR D:$D(DIRUT) MESS G:$D(DIRUT) EXIT^PSOSULBL S PSRTONE=Y
"RTN","PSOSULB1",21,0)
 S X1=PRTDT,X2=$P(PSOPAR,"^",27) D C^%DTC S XDATE=X K IOP,POP,IO("Q"),ZTSK
"RTN","PSOSULB1",22,0)
PRLBL W ! S %ZIS("A")="Printer 'LABEL' Device: ",%ZIS("B")="",%ZIS="MQN" D ^%ZIS S PSLION=ION I POP S IOP=PSOION D ^%ZIS D MESS G EXIT^PSOSULBL
"RTN","PSOSULB1",23,0)
 I $E(IOST)'["P" D MESSL G PRLBL
"RTN","PSOSULB1",24,0)
 ;
"RTN","PSOSULB1",25,0)
FDAPRT ; Selects FDA Medication Guide Printer
"RTN","PSOSULB1",26,0)
 I $$GET1^DIQ(59,PSOSITE,134)'="" N FDAPRT S FDAPRT="" D  I FDAPRT="^"!($G(PSOFDAPT)="") G EXIT^PSOSULBL
"RTN","PSOSULB1",27,0)
 . F  D  Q:FDAPRT'=""
"RTN","PSOSULB1",28,0)
 . . S FDAPRT=$$SELPRT^PSOFDAUT($P($G(PSOFDAPT),"^"))
"RTN","PSOSULB1",29,0)
 . . I FDAPRT="" W $C(7),!,"You must select a valid FDA Medication Guide printer."
"RTN","PSOSULB1",30,0)
 . I FDAPRT'="",(FDAPRT'="^") S PSOFDAPT=FDAPRT
"RTN","PSOSULB1",31,0)
 ;
"RTN","PSOSULB1",32,0)
 N PSOIOS S PSOIOS=IOS D DEVBAR^PSOBMST
"RTN","PSOSULB1",33,0)
 S PSOBARS=PSOBAR1]""&(PSOBAR0]"")&$P(PSOPAR,"^",19)
"RTN","PSOSULB1",34,0)
 K PSOION D ^%ZISC I $D(IO("Q")) K IO("Q")
"RTN","PSOSULB1",35,0)
QUE K %DT,PSOTIME,PSOOUT D NOW^%DTC S %DT="REAX",%DT(0)=%,%DT("B")="NOW",%DT("A")="Queue to run at what time: " D ^%DT K %DT I $D(DTOUT)!(Y<0) D MESS G EXIT^PSOSULBL
"RTN","PSOSULB1",36,0)
 S (PSOSUSPR,PSODBQ)=1,PSOTIME=Y
"RTN","PSOSULB1",37,0)
 S ZTRTN="BEG^PSOSULBL",ZTDESC="PRINT LABELS FROM SUSPENSE",ZTIO=PSLION,ZTDTH=PSOTIME
"RTN","PSOSULB1",38,0)
 F G="PSOPAR","PSOSYS","PSOSUSPR","PSODBQ","PSRT","PSRTONE","PSOPROP","PSLION","PFIO","PSOBARS","PSODTCUT","PSOPRPAS","PRTDT","PDUZ","PSOBAR0","PSOBAR1","PSOSITE","XDATE","PSOTIME","PSOFDAPT" S:$D(@G) ZTSAVE(G)=""
"RTN","PSOSULB1",39,0)
 D ^%ZTLOAD W !!,"PRINT FROM SUSPENSE JOB QUEUED!",! D ^%ZISC G EXIT^PSOSULBL
"RTN","PSOSULB1",40,0)
 ;G:PSRT'="D" BEG^PSOSULBL
"RTN","PSOSULB1",41,0)
MESS W $C(7),!!?3,"NOTHING QUEUED TO PRINT!",! Q
"RTN","PSOSULB1",42,0)
MESSL W $C(7),!?3,"LABELS MUST BE SENT TO A PRINTER!",! Q
"RTN","PSOSULB1",43,0)
BAIMAIL ;Send mail message
"RTN","PSOSULB1",44,0)
 S:'$G(PDUZ) PDUZ=+$G(DUZ)
"RTN","PSOSULB1",45,0)
 K ^TMP("PSOM",$J)
"RTN","PSOSULB1",46,0)
 N SEQ,XMY,XMDUZ,XMSUB,XMTEXT,SEQ,NAME,PSSN,RX,FILL,FIRST
"RTN","PSOSULB1",47,0)
 S SEQ=1
"RTN","PSOSULB1",48,0)
 S XMY(PDUZ)=""
"RTN","PSOSULB1",49,0)
 S XMY("G.PSO EXTERNAL DISPENSE ALERTS")=""
"RTN","PSOSULB1",50,0)
 S XMDUZ="OUTPATIENT PHARMACY PACKAGE"
"RTN","PSOSULB1",51,0)
 S XMSUB="BAD ADDRESS SUSPENSE NOT PRINTED"
"RTN","PSOSULB1",52,0)
 I $G(PSOSITE) S XMSUB=$$GET1^DIQ(59,PSOSITE,.06)_" "_XMSUB
"RTN","PSOSULB1",53,0)
 S ^TMP("PSOM",$J,SEQ)="The following prescriptions with a routing of mail were not printed/sent to",SEQ=SEQ+1
"RTN","PSOSULB1",54,0)
 S ^TMP("PSOM",$J,SEQ)="external interface due to the BAD ADDRESS INDICATOR being set and no active",SEQ=SEQ+1
"RTN","PSOSULB1",55,0)
 S ^TMP("PSOM",$J,SEQ)="temporary address, or the patient has an active MAIL status of DO NOT MAIL, or",SEQ=SEQ+1
"RTN","PSOSULB1",56,0)
 S ^TMP("PSOM",$J,SEQ)="the patient has a foreign address:",SEQ=SEQ+1
"RTN","PSOSULB1",57,0)
 S NAME="" F  S NAME=$O(^TMP("PSOSM",$J,NAME)) Q:NAME=""  D
"RTN","PSOSULB1",58,0)
 .S PSSN="" F  S PSSN=$O(^TMP("PSOSM",$J,NAME,PSSN)) Q:PSSN=""  D
"RTN","PSOSULB1",59,0)
 ..S ^TMP("PSOM",$J,SEQ)="",SEQ=SEQ+1
"RTN","PSOSULB1",60,0)
 ..S ^TMP("PSOM",$J,SEQ)=NAME_"   "_PSSN,FIRST=1
"RTN","PSOSULB1",61,0)
 ..S RX=0 F  S RX=$O(^TMP("PSOSM",$J,NAME,PSSN,RX)) Q:'RX  S FILL="" F  S FILL=$O(^TMP("PSOSM",$J,NAME,PSSN,RX,FILL)) Q:FILL=""  D
"RTN","PSOSULB1",62,0)
 ...I FIRST D  S FIRST=0
"RTN","PSOSULB1",63,0)
 ....S ^TMP("PSOM",$J,SEQ)=^TMP("PSOM",$J,SEQ)_"   ("_$G(^TMP("PSOSM",$J,NAME,PSSN,RX,FILL))_")"
"RTN","PSOSULB1",64,0)
 ....S SEQ=SEQ+1
"RTN","PSOSULB1",65,0)
 ...S ^TMP("PSOM",$J,SEQ)="  "_$P(^PSRX(RX,0),"^")_" ("_FILL_")  "_$P($G(^PSDRUG($P(^PSRX(RX,0),"^",6),0)),"^"),SEQ=SEQ+1
"RTN","PSOSULB1",66,0)
 S ^TMP("PSOM",$J,SEQ+1)=""
"RTN","PSOSULB1",67,0)
 S XMTEXT="^TMP(""PSOM"",$J," N DIFROM D ^XMD K XMSUB,XMTEXT,XMY,XMDUZ
"RTN","PSOSULB1",68,0)
 Q
"RTN","PSOSULB1",69,0)
 ;Description: 
"RTN","PSOSULB1",70,0)
 ;This function determines whether the RX SUSPENSE has a DAYS SUPPLY HOLD
"RTN","PSOSULB1",71,0)
 ;condition.
"RTN","PSOSULB1",72,0)
 ;Input: REC = Pointer to Suspense file (#52.5)
"RTN","PSOSULB1",73,0)
 ;Returns: 1 or 0
"RTN","PSOSULB1",74,0)
 ;1 (one) if 3/4 of days supply has elapsed.
"RTN","PSOSULB1",75,0)
 ;0 (zero) is returned if 3/4 of days supply has not elapsed. 
"RTN","PSOSULB1",76,0)
 ;
"RTN","PSOSULB1",77,0)
DSH(REC) ; ePharmacy - verify that 3/4 days supply has elapsed before printing from suspense
"RTN","PSOSULB1",78,0)
 N PSINSUR,PSARR,SHDT,DSHOLD,DSHDT,PS0,COMM,DIE,DA,DR,RXIEN,RFL,DAYSSUP,LSTFIL,PTDFN,IBINS,DRG
"RTN","PSOSULB1",79,0)
 N SFN,SDT,ELIG,PREVRX
"RTN","PSOSULB1",80,0)
 S DSHOLD=1,PS0=^PS(52.5,REC,0),RXIEN=$P(PS0,U,1),RFL=$P(PS0,U,13)
"RTN","PSOSULB1",81,0)
 S LSTFIL=$$LSTRFL^PSOBPSU1(RXIEN),PTDFN=$$GET1^DIQ(52,RXIEN,"2","I")
"RTN","PSOSULB1",82,0)
 I RFL="" S RFL=LSTFIL
"RTN","PSOSULB1",83,0)
 S IBSTAT=$$INSUR^IBBAPI(PTDFN,,"E",.IBINS,"1"),DRG=$$GET1^DIQ(52,RXIEN,"6","I")
"RTN","PSOSULB1",84,0)
 S ELIG=$S(RFL:$P($G(^PSRX(+RXIEN,1,RFL,"EPH")),U,5),1:$P($G(^PSRX(+RXIEN,"EPH")),U,5))
"RTN","PSOSULB1",85,0)
 ;
"RTN","PSOSULB1",86,0)
 ; Don't hold Rx where the previous fill was not ebillable
"RTN","PSOSULB1",87,0)
 I LSTFIL>0,$$STATUS^BPSOSRX(RXIEN,LSTFIL-1)="" Q DSHOLD
"RTN","PSOSULB1",88,0)
 ; Don't hold when the Rx has SC/EI flagged
"RTN","PSOSULB1",89,0)
 I $P($G(^PSRX(RXIEN,"ICD",1,0)),U,2,10)[1 Q DSHOLD
"RTN","PSOSULB1",90,0)
 ; Don't hold rx if drug is non-billable
"RTN","PSOSULB1",91,0)
 I '$$BILLABLE^IBNCPDP(DRG,ELIG) Q DSHOLD ; IA# 6243
"RTN","PSOSULB1",92,0)
 ; Don't hold if no insurance
"RTN","PSOSULB1",93,0)
 I 'IBSTAT!(IBSTAT=-1) Q DSHOLD
"RTN","PSOSULB1",94,0)
 ;
"RTN","PSOSULB1",95,0)
 S DSHDT=$$DSHDT(RXIEN,RFL) ; 3/4 of days supply date
"RTN","PSOSULB1",96,0)
 S PREVRX=$P(DSHDT,U,2)
"RTN","PSOSULB1",97,0)
 S DSHDT=$P(DSHDT,U)
"RTN","PSOSULB1",98,0)
 I DSHDT>DT S DSHOLD=0 D
"RTN","PSOSULB1",99,0)
 . I DSHDT'=$P(PS0,U,14) D  ; Update Suspense Hold Date and Activity Log
"RTN","PSOSULB1",100,0)
 . . ; MRD;PSO*7*448 - If a previous Rx is used in the 3/4 days' supply 
"RTN","PSOSULB1",101,0)
 . . ; calculation, capture that Rx in the activity log.
"RTN","PSOSULB1",102,0)
 . . S COMM="3/4 of Days Supply SUSPENSE HOLD until "_$$FMTE^XLFDT(DSHDT,"2D")
"RTN","PSOSULB1",103,0)
 . . I PREVRX'="" S COMM=COMM_" (prior Rx "_PREVRX_")"
"RTN","PSOSULB1",104,0)
 . . S COMM=COMM_"."
"RTN","PSOSULB1",105,0)
 . . S DAYSSUP=$$LFDS(RXIEN)
"RTN","PSOSULB1",106,0)
 . . D RXACT^PSOBPSU2(RXIEN,RFL,COMM,"S",+$G(DUZ)) ; Update Activity Log
"RTN","PSOSULB1",107,0)
 . . S DR="10///^S X=DSHDT",DIE="^PS(52.5,",DA=REC D ^DIE ; File Suspense Hold Date
"RTN","PSOSULB1",108,0)
 . . N DA,DIE,DR,PSOX,SFN,INDT,DEAD,SUB,XOK,OLD,X,II
"RTN","PSOSULB1",109,0)
 . . S DA=REC,DIE="^PS(52.5,",DR=".02///"_DSHDT D ^DIE
"RTN","PSOSULB1",110,0)
 . . S SFN=REC,DEAD=0,INDT=DSHDT D CHANGE^PSOSUCH1(RXIEN,RFL)
"RTN","PSOSULB1",111,0)
 . . Q
"RTN","PSOSULB1",112,0)
 . Q
"RTN","PSOSULB1",113,0)
 Q DSHOLD
"RTN","PSOSULB1",114,0)
 ;
"RTN","PSOSULB1",115,0)
DSHDT(RXIEN,RFL) ; ePharmacy function to determine the 3/4 of the days supply date
"RTN","PSOSULB1",116,0)
 ; Input: RXIEN = Prescription file #52 ien
"RTN","PSOSULB1",117,0)
 ;          RFL = fill#
"RTN","PSOSULB1",118,0)
 ; Returns: DATE value of last date of service plus 3/4 of days supply
"RTN","PSOSULB1",119,0)
 ;       PREVRX = Previous Rx if PREVRX^PSOREJP2 identified one that
"RTN","PSOSULB1",120,0)
 ;                should be used in the 3/4 days' supply calculation.
"RTN","PSOSULB1",121,0)
 ;
"RTN","PSOSULB1",122,0)
 N FILLDT,DAYSSUP,DSH34,PREVRX
"RTN","PSOSULB1",123,0)
 I '$D(^PSRX(RXIEN,0)) Q -1
"RTN","PSOSULB1",124,0)
 I $G(RFL)="" Q -1
"RTN","PSOSULB1",125,0)
 ;
"RTN","PSOSULB1",126,0)
 D PREVRX^PSOREJP2(RXIEN,RFL,,.FILLDT,.DAYSSUP,.PREVRX)
"RTN","PSOSULB1",127,0)
 I FILLDT="" Q -1
"RTN","PSOSULB1",128,0)
 ;
"RTN","PSOSULB1",129,0)
 S DSH34=DAYSSUP*.75 ; 3/4 of Days Supply
"RTN","PSOSULB1",130,0)
 S:DSH34["." DSH34=(DSH34+1)\1
"RTN","PSOSULB1",131,0)
 ; Return last date of service plus 3/4 of Days Supply date
"RTN","PSOSULB1",132,0)
 ; and the previous Rx used in the calculation, if any.
"RTN","PSOSULB1",133,0)
 Q $$FMADD^XLFDT(FILLDT,DSH34)_U_PREVRX
"RTN","PSOSULB1",134,0)
 ;
"RTN","PSOSULB1",135,0)
 ;
"RTN","PSOSULB1",136,0)
 ; Description: This function returns the DAYS SUPPLY for the Latest Fill
"RTN","PSOSULB1",137,0)
 ; for a Prescription
"RTN","PSOSULB1",138,0)
 ; Input: RXIEN = Prescription file #52 IEN
"RTN","PSOSULB1",139,0)
 ; Returns: DAYS SUPPLY for the latest fill
"RTN","PSOSULB1",140,0)
 ;          -1 if RXIEN is not valid
"RTN","PSOSULB1",141,0)
LFDS(RXIEN) ;
"RTN","PSOSULB1",142,0)
 N RXFIL
"RTN","PSOSULB1",143,0)
 Q:'$D(^PSRX(RXIEN)) -1
"RTN","PSOSULB1",144,0)
 S RXFIL=$$LSTRFL^PSOBPSU1(RXIEN)
"RTN","PSOSULB1",145,0)
 Q $S(RXFIL=0:$P(^PSRX(RXIEN,0),U,8),1:$P(^PSRX(RXIEN,1,RXFIL,0),U,10))
"RTN","PSOSULB1",146,0)
 ;
"UP",52,52.25,-1)
52^REJ
"UP",52,52.25,0)
52.25
"VER")
8.0^22.0
"^DD",52,52.25,10,0)
CLOSED DATE/TIME^D^^0;6^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",52,52.25,10,3)
Enter the date/time the Third Party Reject was closed (resolved) by the user.
"^DD",52,52.25,10,21,0)
^.001^1^1^3160127^^^
"^DD",52,52.25,10,21,1,0)
Date/Time when the reject was marked CLOSED/RESOLVED.
"^DD",52,52.25,10,"DT")
3150506
**INSTALL NAME**
IB*2.0*550
"BLD",9501,0)
IB*2.0*550^INTEGRATED BILLING^0^3160421^y
"BLD",9501,1,0)
^^1^1^3150930^
"BLD",9501,1,1,0)
MCCF ePharmacy Compliance Phase 3
"BLD",9501,4,0)
^9.64PA^366.14^1
"BLD",9501,4,366.14,0)
366.14
"BLD",9501,4,366.14,2,0)
^9.641^366.141^1
"BLD",9501,4,366.14,2,366.141,0)
EVENT  (sub-file)
"BLD",9501,4,366.14,2,366.141,1,0)
^9.6411^7.09^4
"BLD",9501,4,366.14,2,366.141,1,7.06,0)
DRUG ECME BILLABLE
"BLD",9501,4,366.14,2,366.141,1,7.07,0)
DRUG ECME BILLABLE TRICARE
"BLD",9501,4,366.14,2,366.141,1,7.08,0)
DRUG ECME BILLABLE CHAMPVA
"BLD",9501,4,366.14,2,366.141,1,7.09,0)
DRUG SENSITIVE DIAGNOSIS
"BLD",9501,4,366.14,222)
y^n^p^^^^n^^n
"BLD",9501,4,366.14,224)

"BLD",9501,4,"APDD",366.14,366.141)

"BLD",9501,4,"APDD",366.14,366.141,7.06)

"BLD",9501,4,"APDD",366.14,366.141,7.07)

"BLD",9501,4,"APDD",366.14,366.141,7.08)

"BLD",9501,4,"APDD",366.14,366.141,7.09)

"BLD",9501,4,"B",366.14,366.14)

"BLD",9501,6.3)
25
"BLD",9501,"INID")
^y
"BLD",9501,"INIT")
POST^IBY550PO
"BLD",9501,"KRN",0)
^9.67PA^779.2^20
"BLD",9501,"KRN",.4,0)
.4
"BLD",9501,"KRN",.401,0)
.401
"BLD",9501,"KRN",.402,0)
.402
"BLD",9501,"KRN",.403,0)
.403
"BLD",9501,"KRN",.5,0)
.5
"BLD",9501,"KRN",.84,0)
.84
"BLD",9501,"KRN",3.6,0)
3.6
"BLD",9501,"KRN",3.8,0)
3.8
"BLD",9501,"KRN",9.2,0)
9.2
"BLD",9501,"KRN",9.8,0)
9.8
"BLD",9501,"KRN",9.8,"NM",0)
^9.68A^34^33
"BLD",9501,"KRN",9.8,"NM",1,0)
IBCNRE2^^0^B12751444
"BLD",9501,"KRN",9.8,"NM",2,0)
IBNCPDP1^^0^B179115393
"BLD",9501,"KRN",9.8,"NM",3,0)
IBNCPDPU^^0^B126640808
"BLD",9501,"KRN",9.8,"NM",4,0)
IBNCPDR2^^0^B9323055
"BLD",9501,"KRN",9.8,"NM",5,0)
IBNCPDR4^^0^B31809366
"BLD",9501,"KRN",9.8,"NM",6,0)
IBTRKR3^^0^B54454971
"BLD",9501,"KRN",9.8,"NM",7,0)
IBCNRZCM^^0^B3870682
"BLD",9501,"KRN",9.8,"NM",8,0)
IBCNRHLT^^0^B13273530
"BLD",9501,"KRN",9.8,"NM",9,0)
IBCNRMFE^^0^B7262621
"BLD",9501,"KRN",9.8,"NM",10,0)
IBCNRMFK^^0^B5869085
"BLD",9501,"KRN",9.8,"NM",11,0)
IBCNRU1^^0^B30407184
"BLD",9501,"KRN",9.8,"NM",13,0)
IBCNRZPL^^0^B6548655
"BLD",9501,"KRN",9.8,"NM",14,0)
IBCNEHLI^^0^B7817332
"BLD",9501,"KRN",9.8,"NM",15,0)
IBNCPUT1^^0^B21678012
"BLD",9501,"KRN",9.8,"NM",16,0)
IBCBB11^^0^B96464375
"BLD",9501,"KRN",9.8,"NM",17,0)
IBNCPBB1^^0^B4476268
"BLD",9501,"KRN",9.8,"NM",18,0)
IBNCPDRA^^0^B35956392
"BLD",9501,"KRN",9.8,"NM",19,0)
IBNCPDRB^^0^B19609001
"BLD",9501,"KRN",9.8,"NM",20,0)
IBNCPEV1^^0^B78796257
"BLD",9501,"KRN",9.8,"NM",21,0)
IBNCPEV^^0^B98081615
"BLD",9501,"KRN",9.8,"NM",22,0)
IBCNRPM2^^0^B20472874
"BLD",9501,"KRN",9.8,"NM",23,0)
IBCNRRP3^^0^B58130731
"BLD",9501,"KRN",9.8,"NM",24,0)
IBCNRP^^0^B23991702
"BLD",9501,"KRN",9.8,"NM",25,0)
IBNCPDP2^^0^B82759628
"BLD",9501,"KRN",9.8,"NM",26,0)
IBNCPDR^^0^B9280847
"BLD",9501,"KRN",9.8,"NM",27,0)
IBNCPLOG^^0^B86545576
"BLD",9501,"KRN",9.8,"NM",28,0)
IBNCPDP^^0^B14785713
"BLD",9501,"KRN",9.8,"NM",29,0)
IBNCPDR1^^0^B3213258
"BLD",9501,"KRN",9.8,"NM",30,0)
IBCNRZP0^^1^
"BLD",9501,"KRN",9.8,"NM",31,0)
IBCNRE1^^1^
"BLD",9501,"KRN",9.8,"NM",32,0)
IBCNRHLU^^0^B8116443
"BLD",9501,"KRN",9.8,"NM",33,0)
IBCNRZPP^^0^B13594389
"BLD",9501,"KRN",9.8,"NM",34,0)
IBCNRZRX^^1^
"BLD",9501,"KRN",9.8,"NM","B","IBCBB11",16)

"BLD",9501,"KRN",9.8,"NM","B","IBCNEHLI",14)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRE1",31)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRE2",1)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRHLT",8)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRHLU",32)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRMFE",9)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRMFK",10)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRP",24)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRPM2",22)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRRP3",23)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRU1",11)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRZCM",7)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRZP0",30)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRZPL",13)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRZPP",33)

"BLD",9501,"KRN",9.8,"NM","B","IBCNRZRX",34)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPBB1",17)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPDP",28)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPDP1",2)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPDP2",25)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPDPU",3)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPDR",26)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPDR1",29)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPDR2",4)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPDR4",5)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPDRA",18)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPDRB",19)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPEV",21)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPEV1",20)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPLOG",27)

"BLD",9501,"KRN",9.8,"NM","B","IBNCPUT1",15)

"BLD",9501,"KRN",9.8,"NM","B","IBTRKR3",6)

"BLD",9501,"KRN",19,0)
19
"BLD",9501,"KRN",19,"NM",0)
^9.68A^4^3
"BLD",9501,"KRN",19,"NM",2,0)
IBCNR ROI EXPIRATION REPORT^^0
"BLD",9501,"KRN",19,"NM",3,0)
IBCNR EDIT PAYER^^1^
"BLD",9501,"KRN",19,"NM",4,0)
IBCNR E-PHARMACY MENU^^2
"BLD",9501,"KRN",19,"NM","B","IBCNR E-PHARMACY MENU",4)

"BLD",9501,"KRN",19,"NM","B","IBCNR EDIT PAYER",3)

"BLD",9501,"KRN",19,"NM","B","IBCNR ROI EXPIRATION REPORT",2)

"BLD",9501,"KRN",19.1,0)
19.1
"BLD",9501,"KRN",101,0)
101
"BLD",9501,"KRN",409.61,0)
409.61
"BLD",9501,"KRN",409.61,"NM",0)
^9.68A^2^2
"BLD",9501,"KRN",409.61,"NM",1,0)
IBCNR GROUP PLAN MATCH^^0
"BLD",9501,"KRN",409.61,"NM",2,0)
IBCNR PLAN MATCH^^0
"BLD",9501,"KRN",409.61,"NM","B","IBCNR GROUP PLAN MATCH",1)

"BLD",9501,"KRN",409.61,"NM","B","IBCNR PLAN MATCH",2)

"BLD",9501,"KRN",771,0)
771
"BLD",9501,"KRN",779.2,0)
779.2
"BLD",9501,"KRN",870,0)
870
"BLD",9501,"KRN",8989.51,0)
8989.51
"BLD",9501,"KRN",8989.52,0)
8989.52
"BLD",9501,"KRN",8994,0)
8994
"BLD",9501,"KRN","B",.4,.4)

"BLD",9501,"KRN","B",.401,.401)

"BLD",9501,"KRN","B",.402,.402)

"BLD",9501,"KRN","B",.403,.403)

"BLD",9501,"KRN","B",.5,.5)

"BLD",9501,"KRN","B",.84,.84)

"BLD",9501,"KRN","B",3.6,3.6)

"BLD",9501,"KRN","B",3.8,3.8)

"BLD",9501,"KRN","B",9.2,9.2)

"BLD",9501,"KRN","B",9.8,9.8)

"BLD",9501,"KRN","B",19,19)

"BLD",9501,"KRN","B",19.1,19.1)

"BLD",9501,"KRN","B",101,101)

"BLD",9501,"KRN","B",409.61,409.61)

"BLD",9501,"KRN","B",771,771)

"BLD",9501,"KRN","B",779.2,779.2)

"BLD",9501,"KRN","B",870,870)

"BLD",9501,"KRN","B",8989.51,8989.51)

"BLD",9501,"KRN","B",8989.52,8989.52)

"BLD",9501,"KRN","B",8994,8994)

"BLD",9501,"QUES",0)
^9.62^^
"BLD",9501,"REQB",0)
^9.611^5^4
"BLD",9501,"REQB",1,0)
IB*2.0*416^2
"BLD",9501,"REQB",3,0)
IB*2.0*516^2
"BLD",9501,"REQB",4,0)
IB*2.0*526^2
"BLD",9501,"REQB",5,0)
IB*2.0*534^2
"BLD",9501,"REQB","B","IB*2.0*416",1)

"BLD",9501,"REQB","B","IB*2.0*516",3)

"BLD",9501,"REQB","B","IB*2.0*526",4)

"BLD",9501,"REQB","B","IB*2.0*534",5)

"FIA",366.14)
IB NCPDP EVENT LOG
"FIA",366.14,0)
^IBCNR(366.14,
"FIA",366.14,0,0)
366.14D
"FIA",366.14,0,1)
y^n^p^^^^n^^n
"FIA",366.14,0,10)

"FIA",366.14,0,11)

"FIA",366.14,0,"RLRO")

"FIA",366.14,0,"VR")
2.0^IB
"FIA",366.14,366.14)
1
"FIA",366.14,366.141)
1
"FIA",366.14,366.141,7.06)

"FIA",366.14,366.141,7.07)

"FIA",366.14,366.141,7.08)

"FIA",366.14,366.141,7.09)

"INIT")
POST^IBY550PO
"KRN",19,12305,-1)
2^4
"KRN",19,12305,0)
IBCNR E-PHARMACY MENU^e-Pharmacy Menu^^M^66481^^^^^^^200
"KRN",19,12305,10,0)
^19.01IP^18^13
"KRN",19,12305,10,18,0)
13837^RER
"KRN",19,12305,10,18,"^")
IBCNR ROI EXPIRATION REPORT
"KRN",19,12305,"U")
E-PHARMACY MENU
"KRN",19,13837,-1)
0^2
"KRN",19,13837,0)
IBCNR ROI EXPIRATION REPORT^Release of Information Expiration Report^^R^^^^^^^^INTEGRATED BILLING
"KRN",19,13837,1,0)
^19.06^3^3^3160323^^^^
"KRN",19,13837,1,1,0)
This report will allow users to see when Releases of Information (ROI)
"KRN",19,13837,1,2,0)
are becoming expired or soon will expire. The database for this report
"KRN",19,13837,1,3,0)
is file# 356.25 - CLAIMS TRACKING ROI.
"KRN",19,13837,25)
EN^IBNCPDRA
"KRN",19,13837,99)
63656,52697
"KRN",19,13837,"U")
RELEASE OF INFORMATION EXPIRAT
"KRN",19,13910,-1)
1^3
"KRN",19,13910,0)
IBCNR EDIT PAYER
"KRN",409.61,767,-1)
0^2
"KRN",409.61,767,0)
IBCNR PLAN MATCH^1^^80^6^19^0^1^Group Name^IBCNR PLAN LIST^Match Group Insurance Plan^1^^1
"KRN",409.61,767,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,767,"ARRAY")
 ^TMP("IBCNR",$J)
"KRN",409.61,767,"COL",0)
^409.621^6^6
"KRN",409.61,767,"COL",1,0)
NUMBER^1^4
"KRN",409.61,767,"COL",2,0)
GNAME^5^15^Group Name
"KRN",409.61,767,"COL",3,0)
GNUM^22^17^Group Number
"KRN",409.61,767,"COL",4,0)
TYPE^42^13^Type of Plan
"KRN",409.61,767,"COL",5,0)
PHARM^57^13^VA PLAN ID
"KRN",409.61,767,"COL",6,0)
COV^72^8^Rx Covrd
"KRN",409.61,767,"COL","B","COV",6)

"KRN",409.61,767,"COL","B","GNAME",2)

"KRN",409.61,767,"COL","B","GNUM",3)

"KRN",409.61,767,"COL","B","NUMBER",1)

"KRN",409.61,767,"COL","B","PHARM",5)

"KRN",409.61,767,"COL","B","TYPE",4)

"KRN",409.61,767,"FNL")
D EXIT^IBCNRP
"KRN",409.61,767,"HDR")
D HDR^IBCNRP
"KRN",409.61,767,"HLP")
D HELP^IBCNRP
"KRN",409.61,767,"INIT")
D INIT^IBCNRP
"KRN",409.61,769,-1)
0^1
"KRN",409.61,769,0)
IBCNR GROUP PLAN MATCH^1^^80^7^20^0^1^Group Plan^IBCNR GROUP PLAN LIST^Match Group Insurance Plans^1^^1
"KRN",409.61,769,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,769,"ARRAY")
 ^TMP("IBCNR",$J,"PM")
"KRN",409.61,769,"COL",0)
^409.621^5^5
"KRN",409.61,769,"COL",1,0)
NUMBER^1^4
"KRN",409.61,769,"COL",2,0)
GNAME^5^15^Group Name
"KRN",409.61,769,"COL",3,0)
GNUM^22^17^Group Number
"KRN",409.61,769,"COL",4,0)
GTYP^40^13^Grp/Plan Type
"KRN",409.61,769,"COL",5,0)
PHRM^57^25^VA PLAN ID
"KRN",409.61,769,"COL","B","GNAME",2)

"KRN",409.61,769,"COL","B","GNUM",3)

"KRN",409.61,769,"COL","B","GTYP",4)

"KRN",409.61,769,"COL","B","NUMBER",1)

"KRN",409.61,769,"COL","B","PHRM",5)

"KRN",409.61,769,"FNL")
D EXIT^IBCNRPM2
"KRN",409.61,769,"HDR")
D HDR^IBCNRPM2
"KRN",409.61,769,"HLP")
D HELP^IBCNRPM2
"KRN",409.61,769,"INIT")
D INIT^IBCNRPM2
"MBREQ")
1
"ORD",0,9.8)
9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"ORD",0,9.8,0)
ROUTINE
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)

"PKG",200,20,"B",2,1)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321^2990406^2447
"PKG",200,22,1,"PAH",1,0)
550^3160421
"PKG",200,22,1,"PAH",1,1,0)
^^1^1^3160421
"PKG",200,22,1,"PAH",1,1,1,0)
MCCF ePharmacy Compliance Phase 3
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
34
"RTN","IBCBB11")
0^16^B96464375
"RTN","IBCBB11",1,0)
IBCBB11 ;ALB/AAS/OIFO-BP/PIJ - CONTINUATION OF EDIT CHECK ROUTINE ;12 Jun 2006  3:45 PM
"RTN","IBCBB11",2,0)
 ;;2.0;INTEGRATED BILLING;**51,343,363,371,395,392,401,384,400,436,432,516,550**;21-MAR-94;Build 25
"RTN","IBCBB11",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB11",4,0)
 ;
"RTN","IBCBB11",5,0)
WARN(IBDISP) ; Set warning in global
"RTN","IBCBB11",6,0)
 ; DISP = warning text to display
"RTN","IBCBB11",7,0)
 ;
"RTN","IBCBB11",8,0)
 N Z
"RTN","IBCBB11",9,0)
 S Z=+$O(^TMP($J,"BILL-WARN",""),-1)
"RTN","IBCBB11",10,0)
 I Z=0 S ^TMP($J,"BILL-WARN",1)=$J("",5)_"**Warnings**:",Z=1
"RTN","IBCBB11",11,0)
 S Z=Z+1,^TMP($J,"BILL-WARN",Z)=$J("",5)_IBDISP
"RTN","IBCBB11",12,0)
 Q
"RTN","IBCBB11",13,0)
 ;
"RTN","IBCBB11",14,0)
MULTDIV(IBIFN,IBND0) ; Check for multiple divisions on a bill ien IBIFN
"RTN","IBCBB11",15,0)
 ; IBND0 = 0-node of bill
"RTN","IBCBB11",16,0)
 ;
"RTN","IBCBB11",17,0)
 ;  Function returns 1 if more than 1 division found on bill
"RTN","IBCBB11",18,0)
 N Z,Z0,Z1,MULT
"RTN","IBCBB11",19,0)
 S MULT=0,Z1=$P(IBND0,U,22)
"RTN","IBCBB11",20,0)
 I Z1 D
"RTN","IBCBB11",21,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$P(^(Z,0),U,7) I Z0,Z0'=Z1 S MULT=1 Q
"RTN","IBCBB11",22,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  S Z0=$P(^(Z,0),U,6) I Z0,Z0'=Z1 S MULT=2 Q
"RTN","IBCBB11",23,0)
 I 'Z1 S MULT=3
"RTN","IBCBB11",24,0)
 Q MULT
"RTN","IBCBB11",25,0)
 ;
"RTN","IBCBB11",26,0)
 ;; PREGNANCY DX CODES: V22**-V24**, V27**-V28**, 630**-677**
"RTN","IBCBB11",27,0)
 ;; FLU SHOTS PROCEDURE CODES: 90724, G0008, 90732, G0009
"RTN","IBCBB11",28,0)
 ;
"RTN","IBCBB11",29,0)
NPICHK ; Check for required NPIs
"RTN","IBCBB11",30,0)
 N IBNPIS,IBNONPI,IBNPIREQ,Z,IBNFI,IBTF,IBWC,IBXSAVE,IBPRV,IBLINE
"RTN","IBCBB11",31,0)
 ;*** pij start IB*20*436 ***
"RTN","IBCBB11",32,0)
 N IBRATYPE,IBLEGAL
"RTN","IBCBB11",33,0)
 S (IBRATYPE,IBLEGAL)=""
"RTN","IBCBB11",34,0)
 S IBRATYPE=$P($G(^DGCR(399,IBIFN,0)),U,7)
"RTN","IBCBB11",35,0)
 ; Legal types for this use.
"RTN","IBCBB11",36,0)
 ;  7=NO FAULT INS.
"RTN","IBCBB11",37,0)
 ; 10=TORT FEASOR
"RTN","IBCBB11",38,0)
 ; 11=WORKERS' COMP.
"RTN","IBCBB11",39,0)
 S IBNFI=$O(^DGCR(399.3,"B","NO FAULT INS.",0)) S:'IBNFI IBNFI=7
"RTN","IBCBB11",40,0)
 S IBTF=$O(^DGCR(399.3,"B","TORT FEASOR",0)) S:'IBTF IBTF=10
"RTN","IBCBB11",41,0)
 S IBWC=$O(^DGCR(399.3,"B","WORKERS' COMP.",0)) S:'IBWC IBWC=11
"RTN","IBCBB11",42,0)
 ;
"RTN","IBCBB11",43,0)
 I IBRATYPE=IBNFI!(IBRATYPE=IBTF)!(IBRATYPE=IBWC) D
"RTN","IBCBB11",44,0)
 . ; One of the legal types - force local print
"RTN","IBCBB11",45,0)
 . S IBLEGAL=1
"RTN","IBCBB11",46,0)
 ;*** pij end ***
"RTN","IBCBB11",47,0)
 S IBNPIREQ=$$NPIREQ^IBCEP81(DT)  ; Check if NPI is required
"RTN","IBCBB11",48,0)
 ; Check providers
"RTN","IBCBB11",49,0)
 ; IB*2.0*432 changed the NPI check to the new Provider Array
"RTN","IBCBB11",50,0)
 ;S IBNPIS=$$PROVNPI^IBCEF73A(IBIFN,.IBNONPI)
"RTN","IBCBB11",51,0)
 D ALLIDS^IBCEFP(IBIFN,.IBXSAVE,1)
"RTN","IBCBB11",52,0)
 S IBPRV=""
"RTN","IBCBB11",53,0)
 F  S IBPRV=$O(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",54,0)
 . I $P($G(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV,0)),U,4)="" S IBNONPI(IBPRV)=""
"RTN","IBCBB11",55,0)
 S IBLINE=""
"RTN","IBCBB11",56,0)
 F  S IBLINE=$O(IBXSAVE("L-PROV",IBIFN,IBLINE)) Q:'IBLINE  D
"RTN","IBCBB11",57,0)
 . S IBPRV=""
"RTN","IBCBB11",58,0)
 . F  S IBPRV=$O(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV)) Q:IBPRV=""  D
"RTN","IBCBB11",59,0)
 .. I $P($G(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV,0)),U,4)="" S IBNONPI(IBPRV)=""
"RTN","IBCBB11",60,0)
 I $D(IBNONPI) S IBPRV="" F  S IBPRV=$O(IBNONPI(IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",61,0)
 . S IBER=IBER_"IB"_(140+IBPRV)_";" Q  ; If required, set error IB*2*516
"RTN","IBCBB11",62,0)
 ; Check organizations
"RTN","IBCBB11",63,0)
 S IBNONPI=""
"RTN","IBCBB11",64,0)
 S IBNPIS=$$ORGNPI^IBCEF73A(IBIFN,.IBNONPI)
"RTN","IBCBB11",65,0)
 I $L(IBNONPI) F Z=1:1:$L(IBNONPI,U) D
"RTN","IBCBB11",66,0)
 . S IBER=IBER_$P("IB339;^IB340;^IB341;",U,$P(IBNONPI,U,Z))  ; DEM;432 Added NPI errors.
"RTN","IBCBB11",67,0)
 Q
"RTN","IBCBB11",68,0)
 ;
"RTN","IBCBB11",69,0)
TAXCHK ; Check for required taxonomies
"RTN","IBCBB11",70,0)
 N IBDT,IBLINE,IBNOTAX,IBPRV,IBTAXS,IBXSAVE,Z
"RTN","IBCBB11",71,0)
 ;
"RTN","IBCBB11",72,0)
 ; MRD;IB*2.0*516 - This check is now moot; 'today' is always on or
"RTN","IBCBB11",73,0)
 ; after May 23, 2008, so taxonomy codes are always required
"RTN","IBCBB11",74,0)
 ; for certain providers.
"RTN","IBCBB11",75,0)
 ;S IBTAXREQ=$$TAXREQ^IBCEP81(DT)  ; Check if taxonomy is required
"RTN","IBCBB11",76,0)
 ;
"RTN","IBCBB11",77,0)
 ; Check providers
"RTN","IBCBB11",78,0)
 ; IB*2.0*432 changed the Taxonomy check to the new Provider Array
"RTN","IBCBB11",79,0)
 ;S IBTAXS=$$PROVTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCBB11",80,0)
 D ALLIDS^IBCEFP(IBIFN,.IBXSAVE,1)
"RTN","IBCBB11",81,0)
 S IBPRV=""
"RTN","IBCBB11",82,0)
 F  S IBPRV=$O(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",83,0)
 . I $G(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV,"TAXONOMY"))="" S IBNOTAX(IBPRV)=""
"RTN","IBCBB11",84,0)
 . Q
"RTN","IBCBB11",85,0)
 ;
"RTN","IBCBB11",86,0)
 S IBLINE=""
"RTN","IBCBB11",87,0)
 F  S IBLINE=$O(IBXSAVE("L-PROV",IBIFN,IBLINE)) Q:'IBLINE  D
"RTN","IBCBB11",88,0)
 . S IBPRV=""
"RTN","IBCBB11",89,0)
 . F  S IBPRV=$O(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV)) Q:IBPRV=""  D
"RTN","IBCBB11",90,0)
 . . I $G(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV,"TAXONOMY"))="" S IBNOTAX(IBPRV)=""
"RTN","IBCBB11",91,0)
 . . Q
"RTN","IBCBB11",92,0)
 . Q
"RTN","IBCBB11",93,0)
 ;
"RTN","IBCBB11",94,0)
 ; IB251 = Referring provider taxonomy missing.
"RTN","IBCBB11",95,0)
 ; IB253 = Rendering provider taxonomy missing.
"RTN","IBCBB11",96,0)
 ; IB254 = Attending provider taxonomy missing.
"RTN","IBCBB11",97,0)
 ;
"RTN","IBCBB11",98,0)
 I $D(IBNOTAX) S IBPRV="" F  S IBPRV=$O(IBNOTAX(IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",99,0)
 . ; Only Referring, Rendering and Attending are currently sent to the payer
"RTN","IBCBB11",100,0)
 . ;I IBTAXREQ,"134"[IBPRV S IBER=IBER_"IB"_(250+IBPRV)_";" Q  ; MRD;IB*2.0*516 - Always required.
"RTN","IBCBB11",101,0)
 . I "134"[IBPRV S IBER=IBER_"IB"_(250+IBPRV)_";" Q  ; If required, set error and quit
"RTN","IBCBB11",102,0)
 . D WARN("Taxonomy for the "_$P("referring^operating^rendering^attending^supervising^^^^other",U,IBPRV)_" provider has no value")  ; Else, set warning
"RTN","IBCBB11",103,0)
 . Q
"RTN","IBCBB11",104,0)
 ;
"RTN","IBCBB11",105,0)
 ; Check organizations.  The function ORGTAX will set IBNOTAX to be a
"RTN","IBCBB11",106,0)
 ; list of entities missing taxonomy codes, if any (n, n^m, n^m^p,
"RTN","IBCBB11",107,0)
 ; where each 1 is service facility, 2 is non-VA service facility and
"RTN","IBCBB11",108,0)
 ; 3 is billing provider.
"RTN","IBCBB11",109,0)
 ;
"RTN","IBCBB11",110,0)
 S IBNOTAX=""
"RTN","IBCBB11",111,0)
 S IBTAXS=$$ORGTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCBB11",112,0)
 I $L(IBNOTAX) F Z=1:1:$L(IBNOTAX,U) D
"RTN","IBCBB11",113,0)
 . ; IB167 = Billing Provider taxonomy missing.
"RTN","IBCBB11",114,0)
 . ;I IBTAXREQ,$P(IBNOTAX,U,Z)=3 S IBER=IBER_"IB167;" Q  ; MRD;IB*2.0*516 - Always required.
"RTN","IBCBB11",115,0)
 . I $P(IBNOTAX,U,Z)=3 S IBER=IBER_"IB167;" Q
"RTN","IBCBB11",116,0)
 . ; MRD;IB*2.0*516 - Remove warning message for missing taxonomy code for lab or facility.
"RTN","IBCBB11",117,0)
 . ; D WARN("Taxonomy for the "_$P("Service Facility^Non-VA Service Facility^Billing Provider",U,$P(IBNOTAX,U,Z))_" has no value")  ; Else, set warning
"RTN","IBCBB11",118,0)
 . Q
"RTN","IBCBB11",119,0)
 ;
"RTN","IBCBB11",120,0)
 Q
"RTN","IBCBB11",121,0)
 ;
"RTN","IBCBB11",122,0)
VALNDC(IBIFN,IBDFN) ; IB*2*363 - validate NDC# between PRESCRIPTION file (#52)
"RTN","IBCBB11",123,0)
 ; and IB BILL/CLAIMS PRESCRIPTION REFILL file (#362.4)
"RTN","IBCBB11",124,0)
 ; input - IBIFN = internal entry number of the billing record in the BILL/CLAIMS file (#399)
"RTN","IBCBB11",125,0)
 ;         IBDFN = internal entry number of patient record in the PATIENT file (#2)
"RTN","IBCBB11",126,0)
 N IBX,IBRXCOL
"RTN","IBCBB11",127,0)
 ; call program that determines if NDC differences exist
"RTN","IBCBB11",128,0)
 D VALNDC^IBEFUNC3(IBIFN,IBDFN,.IBRXCOL)
"RTN","IBCBB11",129,0)
 Q:'$D(IBRXCOL)
"RTN","IBCBB11",130,0)
 ; at least one RX on the IB record has an NDC discrepancy 
"RTN","IBCBB11",131,0)
 S IBX=0 F  S IBX=$O(IBRXCOL(IBX)) Q:'IBX  D WARN("NDC# on Bill does not equal the NDC# on Rx "_IBRXCOL(IBX))
"RTN","IBCBB11",132,0)
 Q
"RTN","IBCBB11",133,0)
 ;
"RTN","IBCBB11",134,0)
PRIIDCHK ; Check for required Pimarary ID (SSN/EIN)
"RTN","IBCBB11",135,0)
 ; If the provider is on the claim, he must have one
"RTN","IBCBB11",136,0)
 ; 
"RTN","IBCBB11",137,0)
 N IBI,IBZ
"RTN","IBCBB11",138,0)
 I $$TXMT^IBCEF4(IBIFN) D
"RTN","IBCBB11",139,0)
 . D F^IBCEF("N-ALL ATT/REND PROV SSN/EI","IBZ",,IBIFN)
"RTN","IBCBB11",140,0)
 . S IBI="" F  S IBI=$O(^DGCR(399,IBIFN,"PRV","B",IBI)) Q:IBI=""  D
"RTN","IBCBB11",141,0)
 .. I $P(IBZ,U,IBI)="" S IBER=IBER_$S(IBI=1:"IB151;",IBI=2:"IB152;",IBI=3!(IBI=4):"IB321;",IBI=5:"IB153;",IBI=9:"IB154;",1:"")
"RTN","IBCBB11",142,0)
 Q
"RTN","IBCBB11",143,0)
 ;
"RTN","IBCBB11",144,0)
RXNPI(IBIFN) ; check for multiple pharmacy npi's on the same bill
"RTN","IBCBB11",145,0)
 N IBORG,IBRXNPI,IBX,IBY
"RTN","IBCBB11",146,0)
 S IBORG=$$RXSITE^IBCEF73A(IBIFN,.IBORG)
"RTN","IBCBB11",147,0)
 S IBX=0 F  S IBX=$O(IBORG(IBX)) Q:'IBX  S IBY=0 F  S IBY=$O(IBORG(IBX,IBY)) Q:'IBY  S IBRXNPI(+IBORG(IBX,IBY))=""
"RTN","IBCBB11",148,0)
 S (IBX,IBY)=0 F  S IBX=$O(IBRXNPI(IBX)) Q:'IBX  S IBY=IBY+1
"RTN","IBCBB11",149,0)
 I IBY>1 D WARN("Bill has prescriptions resulting from "_IBY_" different NPI locations")
"RTN","IBCBB11",150,0)
 Q
"RTN","IBCBB11",151,0)
 ;
"RTN","IBCBB11",152,0)
ROICHK(IBIFN,IBDFN,IBINS) ; IB*2.0*384 - check prescriptions that contain the
"RTN","IBCBB11",153,0)
 ; SENSITIVE DIAGNOSIS DRUG field #87 in the DRUG File #50 set to 1 against
"RTN","IBCBB11",154,0)
 ; the Claims Tracking ROI file (#356.25) to see if an ROI is on file
"RTN","IBCBB11",155,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",156,0)
 ;         IBDFN = IEN of the patient
"RTN","IBCBB11",157,0)
 ;         IBINS = IEN of the payer insurance company (#36)
"RTN","IBCBB11",158,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",159,0)
 ;          1 = a prescription is sensitive and there is no ROI on file
"RTN","IBCBB11",160,0)
 ;
"RTN","IBCBB11",161,0)
 N IBX,IBY0,IBRXIEN,IBDT,IBDRUG,ROIQ
"RTN","IBCBB11",162,0)
 S ROIQ=0
"RTN","IBCBB11",163,0)
 S IBX=0 F  S IBX=$O(^IBA(362.4,"C",IBIFN,IBX)) Q:'IBX  D
"RTN","IBCBB11",164,0)
 .S IBY0=^IBA(362.4,IBX,0),IBRXIEN=$P(IBY0,U,5) I 'IBRXIEN Q
"RTN","IBCBB11",165,0)
 .S IBDT=$P(IBY0,U,3),IBDRUG=$P(IBY0,U,4)
"RTN","IBCBB11",166,0)
 .D ZERO^IBRXUTL(IBDRUG)
"RTN","IBCBB11",167,0)
 .I $$SENS^IBNCPDR(IBDRUG) D  ; Sensitive Diagnosis Drug - check for ROI
"RTN","IBCBB11",168,0)
 .. I $$ROI^IBNCPDR4(IBDFN,IBDRUG,IBINS,IBDT) Q  ;ROI is on file
"RTN","IBCBB11",169,0)
 .. D WARN("ROI not on file for prescription "_$$RXAPI1^IBNCPUT1(IBRXIEN,.01,"E"))
"RTN","IBCBB11",170,0)
 .. S ROIQ=1
"RTN","IBCBB11",171,0)
ROICHKQ ;
"RTN","IBCBB11",172,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBCBB11",173,0)
 Q ROIQ
"RTN","IBCBB11",174,0)
 ;
"RTN","IBCBB11",175,0)
AMBCK(IBIFN)    ; IB*2.0*432 - if ambulance location defined, address must be defined
"RTN","IBCBB11",176,0)
 ; if there is anything entered in any of the address fields (either p/up or drop/off fields), than there needs to be: 
"RTN","IBCBB11",177,0)
 ; Address 1, State and ZIP unless the State is not a US state or possession, then zip code is not needed (CMS1500 only)
"RTN","IBCBB11",178,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",179,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",180,0)
 ;          1 = Error
"RTN","IBCBB11",181,0)
 ;
"RTN","IBCBB11",182,0)
 N IBPAMB,IBDAMB,IBAMBR,IBCK
"RTN","IBCBB11",183,0)
 S IBAMBR=0
"RTN","IBCBB11",184,0)
 Q:$$INSPRF^IBCEF(IBIFN)'=0 IBAMBR
"RTN","IBCBB11",185,0)
 S IBPAMB=$G(^DGCR(399,IBIFN,"U5")),IBDAMB=$G(^DGCR(399,IBIFN,"U6"))
"RTN","IBCBB11",186,0)
 S IBCK(5)=$$NOPUNCT^IBCEF($P(IBPAMB,U,2,6),1),IBCK(6)=$$NOPUNCT^IBCEF($P(IBDAMB,U,1,6),1)
"RTN","IBCBB11",187,0)
 I IBCK(5)="",IBCK(6)="" Q IBAMBR
"RTN","IBCBB11",188,0)
 ; at this point we know that at least one ambulance field has data, so check to see if all have data
"RTN","IBCBB11",189,0)
 I IBCK(5)'="" F I=2,4,5 I $P(IBPAMB,U,I)="" S IBAMBR=1
"RTN","IBCBB11",190,0)
 I IBCK(6)'="" F I=1,2,4,5 I $P(IBDAMB,U,I)="" S IBAMBR=1
"RTN","IBCBB11",191,0)
 Q:IBAMBR=1 IBAMBR
"RTN","IBCBB11",192,0)
 ; now check zip code.  OK to be null if state is not a US Posession
"RTN","IBCBB11",193,0)
 F I="IBPAMB","IBDAMB" I $P(I,U,5)'="",$P($G(^DIC(5,$P(I,U,5),0)),U,6)=1,$P(I,U,6)="" S IBAMBR=1
"RTN","IBCBB11",194,0)
 Q IBAMBR
"RTN","IBCBB11",195,0)
 ;
"RTN","IBCBB11",196,0)
COBAMT(IBIFN)   ; IB*2.0*432 - IF there is a COB amt. it must equal the Total Claim Charge Amount
"RTN","IBCBB11",197,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",198,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",199,0)
 ;          1 = Error
"RTN","IBCBB11",200,0)
 ;
"RTN","IBCBB11",201,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",202,0)
 Q:$P($G(^DGCR(399,IBIFN,"U4")),U)="" 0
"RTN","IBCBB11",203,0)
 Q:+$P($G(^DGCR(399,IBIFN,"U1")),U)'=+$P($G(^DGCR(399,IBIFN,"U4")),U) 1
"RTN","IBCBB11",204,0)
 Q 0
"RTN","IBCBB11",205,0)
 ;
"RTN","IBCBB11",206,0)
COBMRA(IBIFN)   ; IB*2.0*432 - If there is a 'COB total non-covered amount' (File#399, Field#260), 
"RTN","IBCBB11",207,0)
 ; Primary Insurance must be Medicare that never went to Medicare, and this must be a 2ndary or tertiary claim
"RTN","IBCBB11",208,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",209,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",210,0)
 ;          1 = Error
"RTN","IBCBB11",211,0)
 ;
"RTN","IBCBB11",212,0)
 N IBP
"RTN","IBCBB11",213,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",214,0)
 Q:$P($G(^DGCR(399,IBIFN,"U4")),U)="" 0
"RTN","IBCBB11",215,0)
 S IBP=$P($G(^DGCR(399,IBIFN,"M1")),U,5) S:IBP="" IBP=IBIFN
"RTN","IBCBB11",216,0)
 I $$WNRBILL^IBEFUNC(IBIFN,1),$P($G(^DGCR(399,IBP,"S")),U,7)="",$$COBN^IBCEF(IBIFN)>1 Q 0
"RTN","IBCBB11",217,0)
 Q 1
"RTN","IBCBB11",218,0)
 ;
"RTN","IBCBB11",219,0)
COBSEC(IBIFN)   ; IB*2.0*432 - If there is NOT a 'COB total non-covered amount' (File#399, Field#260), 
"RTN","IBCBB11",220,0)
 ; and Primary Insurance is Medicare that never went to Medicare, 2ndary or tertiary claim cannot be set to transmit
"RTN","IBCBB11",221,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",222,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",223,0)
 ;          1 = Error
"RTN","IBCBB11",224,0)
 ;
"RTN","IBCBB11",225,0)
 N IBP
"RTN","IBCBB11",226,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",227,0)
 Q:$P($G(^DGCR(399,IBIFN,"U4")),U)'="" 0
"RTN","IBCBB11",228,0)
 Q:$$COBN^IBCEF(IBIFN)<2 0
"RTN","IBCBB11",229,0)
 S IBP=$P($G(^DGCR(399,IBIFN,"M1")),U,5) S:IBP="" IBP=IBIFN
"RTN","IBCBB11",230,0)
 I $$WNRBILL^IBEFUNC(IBIFN,1),$P($G(^DGCR(399,IBP,"S")),U,7)="",$P($G(^DGCR(399,IBIFN,"TX")),U,8)'=1 Q 1
"RTN","IBCBB11",231,0)
 Q 0
"RTN","IBCBB11",232,0)
 ;
"RTN","IBCBB11",233,0)
TMCK(IBIFN) ;  IB*2.0*432 - Attachment Control Number - REQUIRED when Transmission Method = BM, EL, EM, or FT
"RTN","IBCBB11",234,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",235,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",236,0)
 ;          1 = Error
"RTN","IBCBB11",237,0)
 ;
"RTN","IBCBB11",238,0)
 N IBAC
"RTN","IBCBB11",239,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",240,0)
 F I=1,3 S IBAC(I)=$P($G(^DGCR(399,IBIFN,"U8")),U,I)
"RTN","IBCBB11",241,0)
 Q:IBAC(3)="" 0
"RTN","IBCBB11",242,0)
 Q:IBAC(1)'="" 0
"RTN","IBCBB11",243,0)
 Q:IBAC(3)="AA" 0
"RTN","IBCBB11",244,0)
 Q 1
"RTN","IBCBB11",245,0)
 ;
"RTN","IBCBB11",246,0)
ACCK(IBIFN) ; IB*2.0*432 If any of the loop info is present, then Report Type & Transmission Method req'd
"RTN","IBCBB11",247,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",248,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",249,0)
 ;          1 = Error
"RTN","IBCBB11",250,0)
 ;
"RTN","IBCBB11",251,0)
 N IBAC
"RTN","IBCBB11",252,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",253,0)
 F I=1:1:3 S IBAC(I)=$P($G(^DGCR(399,IBIFN,"U8")),U,I)
"RTN","IBCBB11",254,0)
 ; All fields null, no error
"RTN","IBCBB11",255,0)
 I IBAC(1)="",IBAC(2)="",IBAC(3)="" Q 0
"RTN","IBCBB11",256,0)
 ; Both required fields complete, no error
"RTN","IBCBB11",257,0)
 I IBAC(2)'="",IBAC(3)'="" Q 0
"RTN","IBCBB11",258,0)
 ; At this point, one of the 2 required fields has data and one does not, so error
"RTN","IBCBB11",259,0)
 Q 1
"RTN","IBCBB11",260,0)
 ;
"RTN","IBCBB11",261,0)
LNTMCK(IBIFN) ;  DEM;IB*2.0*432 - (Line Level) Attachment Control Number - REQUIRED when Transmission Method = BM, EL, EM, or FT
"RTN","IBCBB11",262,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",263,0)
 ; OUTPUT - IBLNERR = 0 = no error        
"RTN","IBCBB11",264,0)
 ;          IBLNERR = 1 = Error
"RTN","IBCBB11",265,0)
 ;
"RTN","IBCBB11",266,0)
 N IBAC,IBPROCP,I,IBLNERR
"RTN","IBCBB11",267,0)
 S IBLNERR=0  ; DEM;432 - Initialize error flag IBLNERR to '0' for no errors.
"RTN","IBCBB11",268,0)
 Q:IBIFN="" IBLNERR
"RTN","IBCBB11",269,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:IBLNERR
"RTN","IBCBB11",270,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; DEM;432 - Node '0' is procedure node.
"RTN","IBCBB11",271,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,1))#10)  ; DEM;432 - Node '1' is line level Attachment Control fields.
"RTN","IBCBB11",272,0)
 . F I=1,3 S IBAC(I)=$P(^DGCR(399,IBIFN,"CP",IBPROCP,1),U,I)
"RTN","IBCBB11",273,0)
 . I IBAC(3)="" S IBLNERR=0 Q
"RTN","IBCBB11",274,0)
 . I IBAC(1)'="" S IBLNERR=0 Q
"RTN","IBCBB11",275,0)
 . I (IBAC(3)="AA") S IBLNERR=0 Q
"RTN","IBCBB11",276,0)
 . S IBLNERR=1
"RTN","IBCBB11",277,0)
 . Q
"RTN","IBCBB11",278,0)
 ;
"RTN","IBCBB11",279,0)
 Q IBLNERR
"RTN","IBCBB11",280,0)
 ;
"RTN","IBCBB11",281,0)
LNACCK(IBIFN) ; DEM;IB*2.0*432 (Line Level) If any of the loop info is present, then Report Type & Transmission Method req'd
"RTN","IBCBB11",282,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",283,0)
 ; OUTPUT - IBLNERR = 0 = no error        
"RTN","IBCBB11",284,0)
 ;          IBLNERR = 1 = Error
"RTN","IBCBB11",285,0)
 ;
"RTN","IBCBB11",286,0)
 N IBAC,IBPROCP,I,IBLNERR
"RTN","IBCBB11",287,0)
 S IBLNERR=0  ; DEM;432 - Initialize error flag IBLNERR to '0' for no errors.
"RTN","IBCBB11",288,0)
 Q:IBIFN="" IBLNERR
"RTN","IBCBB11",289,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:IBLNERR
"RTN","IBCBB11",290,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; DEM;432 - Node '0' is procedure node.
"RTN","IBCBB11",291,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,1))#10)  ; DEM;432 - Node '1' is line level Attachment Control fields.
"RTN","IBCBB11",292,0)
 . F I=1:1:3 S IBAC(I)=$P(^DGCR(399,IBIFN,"CP",IBPROCP,1),U,I)
"RTN","IBCBB11",293,0)
 . ; All fields null, no error
"RTN","IBCBB11",294,0)
 . I IBAC(1)="",IBAC(2)="",IBAC(3)="" S IBLNERR=0 Q
"RTN","IBCBB11",295,0)
 . ; Both required fields complete, no error
"RTN","IBCBB11",296,0)
 . I IBAC(2)'="",IBAC(3)'="" S IBLNERR=0 Q
"RTN","IBCBB11",297,0)
 . ; At this point, one of the 2 required fields has data and one does not, so error
"RTN","IBCBB11",298,0)
 . S IBLNERR=1
"RTN","IBCBB11",299,0)
 . Q
"RTN","IBCBB11",300,0)
 ;
"RTN","IBCBB11",301,0)
 Q IBLNERR
"RTN","IBCNEHLI")
0^14^B7817332
"RTN","IBCNEHLI",1,0)
IBCNEHLI ;DAOU/ALA - Incoming HL7 messages ;16-JUN-2002
"RTN","IBCNEHLI",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,251,271,300,416,550**;21-MAR-94;Build 25
"RTN","IBCNEHLI",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHLI",4,0)
 ;
"RTN","IBCNEHLI",5,0)
 ;**Program Description**
"RTN","IBCNEHLI",6,0)
 ;  This program parses each incoming HL7 message.
"RTN","IBCNEHLI",7,0)
 ;
"RTN","IBCNEHLI",8,0)
EN ;  Starting point - put message into a TMP global
"RTN","IBCNEHLI",9,0)
 ;
"RTN","IBCNEHLI",10,0)
 N ACK,BUFF,DFN,ERACT,ERCON,ERFLG,ERTXT,EVENT,HCT,HLECH,HLEID
"RTN","IBCNEHLI",11,0)
 N HLEIDS,HLFS,HLQ,IBPRTCL,IDUZ,MGRP,MSGID,RDAT0,RIEN,SBDEP,SEG
"RTN","IBCNEHLI",12,0)
 N SEGMT,SEGMT2,TAG,TQN,TRACE,VRFDT,DISYS,IPCT,PAYRID,PIEN,CNT
"RTN","IBCNEHLI",13,0)
 N ERROR,IRIEN,RSTYPE,SUBID,TQIEN
"RTN","IBCNEHLI",14,0)
 N DA,EBDA,IBFDA,II,MSGP,SYMBOL,IBSEG,PP,PRIEN,QFL,IBIEN,TQDATA,IBQFL
"RTN","IBCNEHLI",15,0)
 N DATAMFK,EPHARM
"RTN","IBCNEHLI",16,0)
 ;
"RTN","IBCNEHLI",17,0)
 K ^TMP($J,"IBCNEHLI")
"RTN","IBCNEHLI",18,0)
 F SEGCNT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","IBCNEHLI",19,0)
 . S CNT=0
"RTN","IBCNEHLI",20,0)
 . S ^TMP($J,"IBCNEHLI",SEGCNT,CNT)=HLNODE
"RTN","IBCNEHLI",21,0)
 . F  S CNT=$O(HLNODE(CNT)) Q:'CNT  D
"RTN","IBCNEHLI",22,0)
 .. S ^TMP($J,"IBCNEHLI",SEGCNT,CNT)=HLNODE(CNT)
"RTN","IBCNEHLI",23,0)
 ;
"RTN","IBCNEHLI",24,0)
 ;  Get the eIV user
"RTN","IBCNEHLI",25,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB EIV")
"RTN","IBCNEHLI",26,0)
 ;   Determine which protocol to use
"RTN","IBCNEHLI",27,0)
 S SEGMT=$G(^TMP($J,"IBCNEHLI",1,0))
"RTN","IBCNEHLI",28,0)
 I $E(SEGMT,1,3)'="MSH" D  D ERR Q
"RTN","IBCNEHLI",29,0)
 . S MSG(1)="MSH Segment is not the first segment found"
"RTN","IBCNEHLI",30,0)
 . S MSG(2)="Please call the Help Desk and report this problem."
"RTN","IBCNEHLI",31,0)
 S HLFS=$E(SEGMT,4)
"RTN","IBCNEHLI",32,0)
 S EVENT=$P(SEGMT,HLFS,9),IBPRTCL=""
"RTN","IBCNEHLI",33,0)
 ;
"RTN","IBCNEHLI",34,0)
 ;  The event type determines protocol
"RTN","IBCNEHLI",35,0)
 I EVENT="MFN^M01" S TAG="TBL",IBPRTCL="IBCNE IIV MFN IN"
"RTN","IBCNEHLI",36,0)
 I EVENT="RPI^I01" S TAG="RSP",IBPRTCL="IBCNE IIV IN" I '$$HL7VAL G XIT
"RTN","IBCNEHLI",37,0)
 I EVENT="MFK^M01" S TAG="ACK",IBPRTCL="IBCNE IIV REGISTER"
"RTN","IBCNEHLI",38,0)
 I IBPRTCL="" S MSG(1)="Unable to find a protocol for Event = "_EVENT D ERR G XIT
"RTN","IBCNEHLI",39,0)
 ;
"RTN","IBCNEHLI",40,0)
 ;  Initialize the HL7 variables
"RTN","IBCNEHLI",41,0)
 D INIT^HLFNC2(IBPRTCL,.HL)
"RTN","IBCNEHLI",42,0)
 ;
"RTN","IBCNEHLI",43,0)
 ;  Call the event tag
"RTN","IBCNEHLI",44,0)
 D @TAG
"RTN","IBCNEHLI",45,0)
 ;
"RTN","IBCNEHLI",46,0)
XIT K ^TMP($J,"IBCNEHLI"),HL,HLNEXT,HLNODE,HLQUIT,SEGCNT
"RTN","IBCNEHLI",47,0)
 Q
"RTN","IBCNEHLI",48,0)
 ;
"RTN","IBCNEHLI",49,0)
TBL ;  Table Update Processing
"RTN","IBCNEHLI",50,0)
 D ^IBCNEHLT
"RTN","IBCNEHLI",51,0)
 ;
"RTN","IBCNEHLI",52,0)
 I ERFLG D ERR
"RTN","IBCNEHLI",53,0)
 K ERFLG
"RTN","IBCNEHLI",54,0)
 ;
"RTN","IBCNEHLI",55,0)
 Q
"RTN","IBCNEHLI",56,0)
 ;
"RTN","IBCNEHLI",57,0)
RSP ;  Response Processing
"RTN","IBCNEHLI",58,0)
 D ^IBCNEHL1
"RTN","IBCNEHLI",59,0)
 ;
"RTN","IBCNEHLI",60,0)
 K ACK,BUFF,DFN,ERACT,ERCON,ERFLG,ERTXT,EVENT,HCT,HL,HLECH,HLEID
"RTN","IBCNEHLI",61,0)
 K HLEIDS,HLFS,HLQ,IBPRTCL,IDUZ,MGRP,MSGID,RDAT0,RIEN,SBDEP,SEG
"RTN","IBCNEHLI",62,0)
 K SEGMT,SEGMT2,TAG,TQN,TRACE,VRFDT,DISYS,IPCT,PAYRID,PIEN
"RTN","IBCNEHLI",63,0)
 K ERROR,IRIEN,RSTYPE,SUBID,TQIEN
"RTN","IBCNEHLI",64,0)
 K DA,EBDA,IBFDA,II,MSGP,SYMBOL,IBSEG,PP,PRIEN,QFL
"RTN","IBCNEHLI",65,0)
 Q
"RTN","IBCNEHLI",66,0)
 ;
"RTN","IBCNEHLI",67,0)
ACK ;  Acknowledgement Processing
"RTN","IBCNEHLI",68,0)
 D ^IBCNEHLK
"RTN","IBCNEHLI",69,0)
 ;
"RTN","IBCNEHLI",70,0)
 Q
"RTN","IBCNEHLI",71,0)
 ;
"RTN","IBCNEHLI",72,0)
ERR ; Process an error
"RTN","IBCNEHLI",73,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLI",74,0)
 D MSG^IBCNEUT5(MGRP,"INCOMING eIV HL7 PROBLEM","MSG(")
"RTN","IBCNEHLI",75,0)
 K MSG,MGRP
"RTN","IBCNEHLI",76,0)
 Q
"RTN","IBCNEHLI",77,0)
 ; 
"RTN","IBCNEHLI",78,0)
HL7VAL() ; Check for valid post 300 response
"RTN","IBCNEHLI",79,0)
 N X,HCT
"RTN","IBCNEHLI",80,0)
 S X=0,HCT=0
"RTN","IBCNEHLI",81,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D SPAR^IBCNEHLU I $G(IBSEG(1))="PRD" S X=1 Q
"RTN","IBCNEHLI",82,0)
 Q X
"RTN","IBCNRE1")
1^31
"RTN","IBCNRE2")
0^1^B12751444
"RTN","IBCNRE2",1,0)
IBCNRE2 ;DAOU/DMK - Edit NCPDP PROCESSOR APPLICATION Sub-file ;23-DEC-2003
"RTN","IBCNRE2",2,0)
 ;;2.0;INTEGRATED BILLING;**251,550**;21-MAR-94;Build 25
"RTN","IBCNRE2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRE2",4,0)
 ;
"RTN","IBCNRE2",5,0)
 ; Specific to E-PHARM APPLICATION Entry
"RTN","IBCNRE2",6,0)
 ; Edit LOCAL ACTIVE? Field
"RTN","IBCNRE2",7,0)
 ;
"RTN","IBCNRE2",8,0)
 ; 366.013 NCPDP PROCESSOR APPLICATION
"RTN","IBCNRE2",9,0)
 ;    .01  APPLICATION
"RTN","IBCNRE2",10,0)
 ;    .03  LOCAL ACTIVE?
"RTN","IBCNRE2",11,0)
 ;
"RTN","IBCNRE2",12,0)
1000 ; Control processing
"RTN","IBCNRE2",13,0)
 N ANAME,APIEN,FIELDNO,FILENO,FILENO1,QUIT
"RTN","IBCNRE2",14,0)
 N DISYS
"RTN","IBCNRE2",15,0)
 ;
"RTN","IBCNRE2",16,0)
 D INIT1
"RTN","IBCNRE2",17,0)
 D HEADING
"RTN","IBCNRE2",18,0)
 F  D 2000 Q:QUIT
"RTN","IBCNRE2",19,0)
 Q
"RTN","IBCNRE2",20,0)
 ;
"RTN","IBCNRE2",21,0)
2000 ; Control processing
"RTN","IBCNRE2",22,0)
 N IEN,IENS,IENS1,KEY
"RTN","IBCNRE2",23,0)
 ;
"RTN","IBCNRE2",24,0)
 S QUIT=0
"RTN","IBCNRE2",25,0)
 ;
"RTN","IBCNRE2",26,0)
 ; Control file entry selection and subfile entry validation
"RTN","IBCNRE2",27,0)
 D IEN
"RTN","IBCNRE2",28,0)
 I IEN=-1 S QUIT=1 Q
"RTN","IBCNRE2",29,0)
 I APIEN=-1 Q
"RTN","IBCNRE2",30,0)
 ;
"RTN","IBCNRE2",31,0)
 ; Control file entry printing
"RTN","IBCNRE2",32,0)
 D PRINT1
"RTN","IBCNRE2",33,0)
 ;
"RTN","IBCNRE2",34,0)
 ; Control subfile entry printing
"RTN","IBCNRE2",35,0)
 D PRINT2
"RTN","IBCNRE2",36,0)
 ;
"RTN","IBCNRE2",37,0)
 ; Control subfile entry editing
"RTN","IBCNRE2",38,0)
 D EDIT
"RTN","IBCNRE2",39,0)
 Q
"RTN","IBCNRE2",40,0)
 ;
"RTN","IBCNRE2",41,0)
EDIT ; Edit subfile entry data
"RTN","IBCNRE2",42,0)
 ; 366.013 NCPDP PROCESSOR APPLICATION subfile
"RTN","IBCNRE2",43,0)
 ;
"RTN","IBCNRE2",44,0)
 N DA,DIDEL,DIC,DIE,DLAYGO,DR,DTOUT,X,Y
"RTN","IBCNRE2",45,0)
 N %,A,D,D0,DDER,DI,DISYS,DQ,OLD
"RTN","IBCNRE2",46,0)
 ;
"RTN","IBCNRE2",47,0)
 S DA=APIEN,DA(1)=IEN
"RTN","IBCNRE2",48,0)
 S DIE=$$ROOT^DILFD(FILENO1,","_IEN_",")
"RTN","IBCNRE2",49,0)
 ;
"RTN","IBCNRE2",50,0)
 ; .03  LOCAL ACTIVE
"RTN","IBCNRE2",51,0)
 S DR=".03R"_"~"_KEY_" - Local Active?"
"RTN","IBCNRE2",52,0)
 ;
"RTN","IBCNRE2",53,0)
 ; Quit if value unchanged
"RTN","IBCNRE2",54,0)
 ; OLD = old value
"RTN","IBCNRE2",55,0)
 ;   X = new value
"RTN","IBCNRE2",56,0)
 S OLD=$$GET1^DIQ(FILENO1,IENS1,.03,"I")
"RTN","IBCNRE2",57,0)
 S DR=DR_";"_"S:OLD=X Y="""""
"RTN","IBCNRE2",58,0)
 ;
"RTN","IBCNRE2",59,0)
 ; .04  USER EDITED LOCAL
"RTN","IBCNRE2",60,0)
 S DR=DR_";"_".04////"_DUZ
"RTN","IBCNRE2",61,0)
 ;
"RTN","IBCNRE2",62,0)
 ; .05  DATE/TIME LOCAL EDITED
"RTN","IBCNRE2",63,0)
 S DR=DR_";"_".05////"_$$NOW^XLFDT()
"RTN","IBCNRE2",64,0)
 ;
"RTN","IBCNRE2",65,0)
 D ^DIE
"RTN","IBCNRE2",66,0)
 ;
"RTN","IBCNRE2",67,0)
 W !
"RTN","IBCNRE2",68,0)
 Q
"RTN","IBCNRE2",69,0)
 ;
"RTN","IBCNRE2",70,0)
HEADING ; Print heading
"RTN","IBCNRE2",71,0)
 W @IOF
"RTN","IBCNRE2",72,0)
 W "NCPDP PROCESSOR File Inquiry and Edit (E-PHARM)",!
"RTN","IBCNRE2",73,0)
 Q
"RTN","IBCNRE2",74,0)
 ;
"RTN","IBCNRE2",75,0)
IEN ; Select file entry
"RTN","IBCNRE2",76,0)
 N I
"RTN","IBCNRE2",77,0)
 ;
"RTN","IBCNRE2",78,0)
 S IEN=$$SELECT1^IBCNRFM1(FILENO,"Select NCPDP Processor Name: ")
"RTN","IBCNRE2",79,0)
 I IEN=-1 Q
"RTN","IBCNRE2",80,0)
 S IENS=IEN_","
"RTN","IBCNRE2",81,0)
 ;
"RTN","IBCNRE2",82,0)
 ; E-PHARM APPLICATION Defined?
"RTN","IBCNRE2",83,0)
 S APIEN=$$LOOKUP2^IBCNRFM1(FILENO,IEN,FIELDNO,ANAME)
"RTN","IBCNRE2",84,0)
 I APIEN=-1 W " E-PHARM APPLICATION not defined" Q
"RTN","IBCNRE2",85,0)
 S IENS1=APIEN_","_IEN_","
"RTN","IBCNRE2",86,0)
 Q
"RTN","IBCNRE2",87,0)
 ;
"RTN","IBCNRE2",88,0)
INIT1 ; Initialize variables
"RTN","IBCNRE2",89,0)
 S ANAME="E-PHARM"
"RTN","IBCNRE2",90,0)
 S FIELDNO=3
"RTN","IBCNRE2",91,0)
 S FILENO=366.01
"RTN","IBCNRE2",92,0)
 S FILENO1=FILENO_FIELDNO
"RTN","IBCNRE2",93,0)
 I '$D(IOF) D HOME^%ZIS
"RTN","IBCNRE2",94,0)
 Q
"RTN","IBCNRE2",95,0)
 ;
"RTN","IBCNRE2",96,0)
PRINT1 ; Print file entry data
"RTN","IBCNRE2",97,0)
 ; 366.01 NCPDP PROCESSOR File
"RTN","IBCNRE2",98,0)
 ;
"RTN","IBCNRE2",99,0)
 N A
"RTN","IBCNRE2",100,0)
 ;
"RTN","IBCNRE2",101,0)
 W !!
"RTN","IBCNRE2",102,0)
 ;
"RTN","IBCNRE2",103,0)
 D GETS^DIQ(FILENO,IENS,"*","","A")
"RTN","IBCNRE2",104,0)
 ;
"RTN","IBCNRE2",105,0)
 ; .01 NAME
"RTN","IBCNRE2",106,0)
 S KEY=A(FILENO,IENS,.01)
"RTN","IBCNRE2",107,0)
 W $J("NCPDP Processor Name: ",40),$G(A(FILENO,IENS,.01)),!
"RTN","IBCNRE2",108,0)
 ;
"RTN","IBCNRE2",109,0)
 ; .03 DATE/TIME CREATED
"RTN","IBCNRE2",110,0)
 W $J("Date/Time Created: ",40),$G(A(FILENO,IENS,.03)),!
"RTN","IBCNRE2",111,0)
 ;
"RTN","IBCNRE2",112,0)
 ; .02 BLOCKED?
"RTN","IBCNRE2",113,0)
 W $J("Blocked? ",40),$G(A(FILENO,IENS,.02)),!
"RTN","IBCNRE2",114,0)
 Q
"RTN","IBCNRE2",115,0)
 ;
"RTN","IBCNRE2",116,0)
PRINT2 ; Print subfile entry data
"RTN","IBCNRE2",117,0)
 ; 366.013 NCPDP PROCESSOR APPLICATION Subfile
"RTN","IBCNRE2",118,0)
 ;
"RTN","IBCNRE2",119,0)
 N A
"RTN","IBCNRE2",120,0)
 ;
"RTN","IBCNRE2",121,0)
 W !
"RTN","IBCNRE2",122,0)
 ;
"RTN","IBCNRE2",123,0)
 D GETS^DIQ(FILENO1,IENS1,"*","","A")
"RTN","IBCNRE2",124,0)
 ;
"RTN","IBCNRE2",125,0)
 ; .01 APPLICATION
"RTN","IBCNRE2",126,0)
 W $J("Application: ",40),$G(A(FILENO1,IENS1,.01)),!
"RTN","IBCNRE2",127,0)
 ;
"RTN","IBCNRE2",128,0)
 ; .13 DATE/TIME CREATED
"RTN","IBCNRE2",129,0)
 W $J("Date/Time Created: ",40),$G(A(FILENO1,IENS1,.13)),!
"RTN","IBCNRE2",130,0)
 ;
"RTN","IBCNRE2",131,0)
 ; .11 DEACTIVATED
"RTN","IBCNRE2",132,0)
 W $J("Deactivated? ",40),$G(A(FILENO1,IENS1,.11)),!
"RTN","IBCNRE2",133,0)
 ;
"RTN","IBCNRE2",134,0)
 ; .12 DATE/TIME DEACTIVATED
"RTN","IBCNRE2",135,0)
 W $J("Date/Time Deactivated: ",40),$G(A(FILENO1,IENS1,.12)),!
"RTN","IBCNRE2",136,0)
 ;
"RTN","IBCNRE2",137,0)
 ; .02 NATIONAL ACTIVE
"RTN","IBCNRE2",138,0)
 W $J("National Active? ",40),$G(A(FILENO1,IENS1,.02)),!
"RTN","IBCNRE2",139,0)
 ;
"RTN","IBCNRE2",140,0)
 ; .06 DATE/TIME NATIONAL EDITED
"RTN","IBCNRE2",141,0)
 W $J("Date/Time National Edited: ",40),$G(A(FILENO1,IENS1,.06)),!
"RTN","IBCNRE2",142,0)
 ;
"RTN","IBCNRE2",143,0)
 ; .03 LOCAL ACTIVE
"RTN","IBCNRE2",144,0)
 W $J("Local Active? ",40),$G(A(FILENO1,IENS1,.03)),!
"RTN","IBCNRE2",145,0)
 ;
"RTN","IBCNRE2",146,0)
 ; .05 DATE/TIME LOCAL EDITED
"RTN","IBCNRE2",147,0)
 W $J("Date/Time Local Edited: ",40),$G(A(FILENO1,IENS1,.05)),!
"RTN","IBCNRE2",148,0)
 ;
"RTN","IBCNRE2",149,0)
 ; .04 USER EDITED LOCAL
"RTN","IBCNRE2",150,0)
 W $J("User Edited Local: ",40),$G(A(FILENO1,IENS1,.04)),!
"RTN","IBCNRE2",151,0)
 Q
"RTN","IBCNRHLT")
0^8^B13273530
"RTN","IBCNRHLT",1,0)
IBCNRHLT ;DAOU/DMK - Receive HL7 e-Pharmacy MFN Message ;23-OCT-2003
"RTN","IBCNRHLT",2,0)
 ;;2.0;INTEGRATED BILLING;**251,435,550**;21-MAR-94;Build 25
"RTN","IBCNRHLT",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRHLT",4,0)
 ;
"RTN","IBCNRHLT",5,0)
 ; Description
"RTN","IBCNRHLT",6,0)
 ;
"RTN","IBCNRHLT",7,0)
 ; Receive HL7 e-Pharmacy MFN Message
"RTN","IBCNRHLT",8,0)
 ; Table Update
"RTN","IBCNRHLT",9,0)
 ;
"RTN","IBCNRHLT",10,0)
 ; Control processing of segments
"RTN","IBCNRHLT",11,0)
 ;
"RTN","IBCNRHLT",12,0)
 ; Required segments listed in order
"RTN","IBCNRHLT",13,0)
 ; MSH (Message Header Segment)
"RTN","IBCNRHLT",14,0)
 ; MFI (Master File Identifier Segment)
"RTN","IBCNRHLT",15,0)
 ; MFE (Master File Entry Segment)
"RTN","IBCNRHLT",16,0)
 ;
"RTN","IBCNRHLT",17,0)
 ; Optional segments listed by file
"RTN","IBCNRHLT",18,0)
 ;
"RTN","IBCNRHLT",19,0)
 ; ZPT (366.01 NCPDP PROCESSOR File Update Segment)
"RTN","IBCNRHLT",20,0)
 ; ZCM (366.012 NCPDP PROCESSOR CONTACT MEANS Subfile Update Segment)
"RTN","IBCNRHLT",21,0)
 ;
"RTN","IBCNRHLT",22,0)
 ; ZPB (366.02 PHARMACY BENEFITS MANAGER (PBM) File Update Segment)
"RTN","IBCNRHLT",23,0)
 ; ZCM (366.022 PHARMACY BENEFITS MANAGER (PBM) CONTACT MEANS Subfile
"RTN","IBCNRHLT",24,0)
 ;      Update Segment)
"RTN","IBCNRHLT",25,0)
 ;
"RTN","IBCNRHLT",26,0)
 ; ZPL (366.03 PLAN File Update Segment)
"RTN","IBCNRHLT",27,0)
 ; ZCM (366.032 PLAN CONTACT MEANS Subfile Update Segment)
"RTN","IBCNRHLT",28,0)
 ;
"RTN","IBCNRHLT",29,0)
 ; ZPP (366.03 PLAN File (Pharmacy) Update Segment)
"RTN","IBCNRHLT",30,0)
 ; ZCM (366.0312 PLAN RX CONTACT MEANS Subfile Update Segment)
"RTN","IBCNRHLT",31,0)
 ;
"RTN","IBCNRHLT",32,0)
 ; * File # (MFI Segment) = 366.01, 366.02, or 366.03
"RTN","IBCNRHLT",33,0)
 ; * Segment ID (every segment) = MFE, ZCM, ZPB, ZPL, ZPP, or ZPT
"RTN","IBCNRHLT",34,0)
 ;
"RTN","IBCNRHLT",35,0)
 ; Entry point
"RTN","IBCNRHLT",36,0)
 ;
"RTN","IBCNRHLT",37,0)
1000 ; Control processing
"RTN","IBCNRHLT",38,0)
 I $D(ERROR) Q
"RTN","IBCNRHLT",39,0)
 D @SEG
"RTN","IBCNRHLT",40,0)
 ;
"RTN","IBCNRHLT",41,0)
 ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNRHLT",42,0)
 I $D(ERROR) D  Q
"RTN","IBCNRHLT",43,0)
 . S DATAMFK("ERROR")=ERROR
"RTN","IBCNRHLT",44,0)
 . S DATAMFK("IEN")=IEN
"RTN","IBCNRHLT",45,0)
 ;
"RTN","IBCNRHLT",46,0)
 ; Quit if more segments
"RTN","IBCNRHLT",47,0)
 I $O(^TMP($J,"BPSJHLI",HCT))]"" Q
"RTN","IBCNRHLT",48,0)
 ;
"RTN","IBCNRHLT",49,0)
 ; Update File?
"RTN","IBCNRHLT",50,0)
 I $D(DATA) D
"RTN","IBCNRHLT",51,0)
 . S FIELDNO="" F  S FIELDNO=$O(DATA(FIELDNO)) Q:FIELDNO=""  D
"RTN","IBCNRHLT",52,0)
 .. ;
"RTN","IBCNRHLT",53,0)
 .. ; Convert "" to "@" to delete field value if necessary
"RTN","IBCNRHLT",54,0)
 .. I IEN'=-1,DATA(FIELDNO)="" S DATA(FIELDNO)="@"
"RTN","IBCNRHLT",55,0)
 .. ;
"RTN","IBCNRHLT",56,0)
 .. ; Convert HL7 special characters if necessary
"RTN","IBCNRHLT",57,0)
 .. I DATA(FIELDNO)[$E(HLECH,3) S DATA(FIELDNO)=$$TRAN1^IBCNRHLU(DATA(FIELDNO))
"RTN","IBCNRHLT",58,0)
 . D FILE
"RTN","IBCNRHLT",59,0)
 ;
"RTN","IBCNRHLT",60,0)
 ; Update APPLICATION Subfile?
"RTN","IBCNRHLT",61,0)
 I $D(DATAAP) D
"RTN","IBCNRHLT",62,0)
 . S FIELDNO="" F  S FIELDNO=$O(DATAAP(FIELDNO)) Q:FIELDNO=""  D
"RTN","IBCNRHLT",63,0)
 .. ;
"RTN","IBCNRHLT",64,0)
 .. ; Convert "" to "@" to delete field value if necessary
"RTN","IBCNRHLT",65,0)
 .. I APIEN'=-1,DATAAP(FIELDNO)="" S DATAAP(FIELDNO)="@"
"RTN","IBCNRHLT",66,0)
 .. ;
"RTN","IBCNRHLT",67,0)
 .. ; Convert HL7 special characters if necessary
"RTN","IBCNRHLT",68,0)
 .. I DATAAP(FIELDNO)[$E(HLECH,3) S DATAAP(FIELDNO)=$$TRAN1^IBCNRHLU(DATAAP(FIELDNO))
"RTN","IBCNRHLT",69,0)
 . S FIELDNO=3
"RTN","IBCNRHLT",70,0)
 . D FILEAP
"RTN","IBCNRHLT",71,0)
 ;
"RTN","IBCNRHLT",72,0)
 ; Update CONTACT MEANS Subfile?
"RTN","IBCNRHLT",73,0)
 I $D(DATACM) D
"RTN","IBCNRHLT",74,0)
 . S FIELDNO="" F  S FIELDNO=$O(DATACM(FIELDNO)) Q:FIELDNO=""  D
"RTN","IBCNRHLT",75,0)
 .. ;
"RTN","IBCNRHLT",76,0)
 .. ; Convert "" to "@" to delete field value if necessary
"RTN","IBCNRHLT",77,0)
 .. I CMIEN'=-1,DATACM(FIELDNO)="" S DATACM(FIELDNO)="@"
"RTN","IBCNRHLT",78,0)
 .. ;
"RTN","IBCNRHLT",79,0)
 .. ; Convert HL7 special characters if necessary
"RTN","IBCNRHLT",80,0)
 .. I DATACM(FIELDNO)[$E(HLECH,3) S DATACM(FIELDNO)=$$TRAN1^IBCNRHLU(DATACM(FIELDNO))
"RTN","IBCNRHLT",81,0)
 . S FIELDNO=$S(FILE["Pharmacy"&(FILENO=366.03):12,1:2)
"RTN","IBCNRHLT",82,0)
 . I IBCNACT="MDL" D DELETECM Q
"RTN","IBCNRHLT",83,0)
 . D FILECM
"RTN","IBCNRHLT",84,0)
 Q
"RTN","IBCNRHLT",85,0)
 ;
"RTN","IBCNRHLT",86,0)
ADD ; Add File entry
"RTN","IBCNRHLT",87,0)
 ; 366.01 NCPDP PROCESSOR File
"RTN","IBCNRHLT",88,0)
 ; 366.02 PHARMACY BENEFITS MANAGER (PBM) File
"RTN","IBCNRHLT",89,0)
 ; 366.03 PLAN File
"RTN","IBCNRHLT",90,0)
 ;
"RTN","IBCNRHLT",91,0)
 S IEN=$$ADD1^IBCNRFM1(FILENO,DATA(.01))
"RTN","IBCNRHLT",92,0)
 Q
"RTN","IBCNRHLT",93,0)
 ;
"RTN","IBCNRHLT",94,0)
ADDAP ; Add APPLICATION Subfile entry
"RTN","IBCNRHLT",95,0)
 ; 366.013 NCPDP PROCESSOR APPLICATION File
"RTN","IBCNRHLT",96,0)
 ; 366.023 PHARMACY BENEFITS MANAGER (PBM) APPLICATION Subfile
"RTN","IBCNRHLT",97,0)
 ; 366.033 PLAN APPLICATION Subfile
"RTN","IBCNRHLT",98,0)
 ;
"RTN","IBCNRHLT",99,0)
 S APIEN=$$ADD2^IBCNRFM1(FILENO,IEN,FIELDNO,AIEN)
"RTN","IBCNRHLT",100,0)
 Q
"RTN","IBCNRHLT",101,0)
 ;
"RTN","IBCNRHLT",102,0)
ADDCM ; Add CONTACT MEANS Subfile entry
"RTN","IBCNRHLT",103,0)
 ; 366.012  NCPDP PROCESSOR CONTACT MEANS Subfile
"RTN","IBCNRHLT",104,0)
 ; 366.022  PHARMACY BENEFITS MANAGER (PBM) CONTACT MEANS Subfile
"RTN","IBCNRHLT",105,0)
 ; 366.032  PLAN CONTACT MEANS Subfile
"RTN","IBCNRHLT",106,0)
 ; 366.0312 PLAN RX CONTACT MEANS Subfile
"RTN","IBCNRHLT",107,0)
 ;
"RTN","IBCNRHLT",108,0)
 S CMIEN=$$ADD2^IBCNRFM1(FILENO,IEN,FIELDNO,DATACM(.01))
"RTN","IBCNRHLT",109,0)
 Q
"RTN","IBCNRHLT",110,0)
 ;
"RTN","IBCNRHLT",111,0)
DELETECM ; Delete CONTACT MEANS Subfile entry
"RTN","IBCNRHLT",112,0)
 ; 366.012  NCPDP PROCESSOR CONTACT MEANS Subfile
"RTN","IBCNRHLT",113,0)
 ; 366.022  PHARMACY BENEFITS MANAGER (PBM) CONTACT MEANS Subfile
"RTN","IBCNRHLT",114,0)
 ; 366.032  PLAN CONTACT MEANS Subfile
"RTN","IBCNRHLT",115,0)
 ; 366.0312 PLAN RX CONTACT MEANS Subfile
"RTN","IBCNRHLT",116,0)
 ;
"RTN","IBCNRHLT",117,0)
 D DELETE2^IBCNRFM1(FILENO,IEN,FIELDNO,CMIEN)
"RTN","IBCNRHLT",118,0)
 Q
"RTN","IBCNRHLT",119,0)
 ;
"RTN","IBCNRHLT",120,0)
FILE ; File data
"RTN","IBCNRHLT",121,0)
 ; 366.01 NCPDP PROCESSOR File
"RTN","IBCNRHLT",122,0)
 ; 366.02 PHARMACY BENEFITS MANAGER (PBM) File
"RTN","IBCNRHLT",123,0)
 ; 366.03 PLAN File
"RTN","IBCNRHLT",124,0)
 ;
"RTN","IBCNRHLT",125,0)
 ; Add?
"RTN","IBCNRHLT",126,0)
 I IEN=-1 D ADD
"RTN","IBCNRHLT",127,0)
 ;
"RTN","IBCNRHLT",128,0)
 ; Update
"RTN","IBCNRHLT",129,0)
 D FILE1^IBCNRFM1(FILENO,IEN,.DATA)
"RTN","IBCNRHLT",130,0)
 Q
"RTN","IBCNRHLT",131,0)
 ;
"RTN","IBCNRHLT",132,0)
FILEAP ; File APPLICATION Subfile data
"RTN","IBCNRHLT",133,0)
 ; 366.013 NCPDP PROCESSOR APPLICATION Subfile
"RTN","IBCNRHLT",134,0)
 ; 366.023 PHARMACY BENEFITS MANAGER (PBM) APPLICATION Subfile
"RTN","IBCNRHLT",135,0)
 ; 366.033 PLAN APPLICATION Subfile
"RTN","IBCNRHLT",136,0)
 ;
"RTN","IBCNRHLT",137,0)
 ; Add?
"RTN","IBCNRHLT",138,0)
 I APIEN=-1 D ADDAP
"RTN","IBCNRHLT",139,0)
 ;
"RTN","IBCNRHLT",140,0)
 ; Update
"RTN","IBCNRHLT",141,0)
 D FILE2^IBCNRFM1(FILENO,IEN,FIELDNO,APIEN,.DATAAP)
"RTN","IBCNRHLT",142,0)
 Q
"RTN","IBCNRHLT",143,0)
 ;
"RTN","IBCNRHLT",144,0)
FILECM ; File CONTACT MEANS Subfile data
"RTN","IBCNRHLT",145,0)
 ; 366.012  NCPDP PROCESSOR CONTACT MEANS Subfile
"RTN","IBCNRHLT",146,0)
 ; 366.022  PHARMACY BENEFITS MANAGER (PBM) CONTACT MEANS Subfile
"RTN","IBCNRHLT",147,0)
 ; 366.032  PLAN CONTACT MEANS Subfile
"RTN","IBCNRHLT",148,0)
 ; 366.0312 PLAN RX CONTACT MEANS Subfile
"RTN","IBCNRHLT",149,0)
 ;
"RTN","IBCNRHLT",150,0)
 ; Add?
"RTN","IBCNRHLT",151,0)
 I CMIEN=-1 D ADDCM
"RTN","IBCNRHLT",152,0)
 ;
"RTN","IBCNRHLT",153,0)
 ; Update
"RTN","IBCNRHLT",154,0)
 D FILE2^IBCNRFM1(FILENO,IEN,FIELDNO,CMIEN,.DATACM)
"RTN","IBCNRHLT",155,0)
 Q
"RTN","IBCNRHLT",156,0)
 ;
"RTN","IBCNRHLT",157,0)
MFE ; Process MFE Segment
"RTN","IBCNRHLT",158,0)
 D ^IBCNRMFE
"RTN","IBCNRHLT",159,0)
 Q
"RTN","IBCNRHLT",160,0)
 ;
"RTN","IBCNRHLT",161,0)
ZCM ; Process ZCM Segment
"RTN","IBCNRHLT",162,0)
 D ^IBCNRZCM
"RTN","IBCNRHLT",163,0)
 Q
"RTN","IBCNRHLT",164,0)
 ;
"RTN","IBCNRHLT",165,0)
ZPB ; Process ZPB Segment
"RTN","IBCNRHLT",166,0)
 D ^IBCNRZPB
"RTN","IBCNRHLT",167,0)
 Q
"RTN","IBCNRHLT",168,0)
 ;
"RTN","IBCNRHLT",169,0)
ZPL ; Process ZPL Segment
"RTN","IBCNRHLT",170,0)
 D ^IBCNRZPL
"RTN","IBCNRHLT",171,0)
 Q
"RTN","IBCNRHLT",172,0)
 ;
"RTN","IBCNRHLT",173,0)
ZPP ; Process ZPP Segment
"RTN","IBCNRHLT",174,0)
 D ^IBCNRZPP
"RTN","IBCNRHLT",175,0)
 Q
"RTN","IBCNRHLT",176,0)
 ;
"RTN","IBCNRHLT",177,0)
ZPT ; Process ZPT Segment
"RTN","IBCNRHLT",178,0)
 D ^IBCNRZPT
"RTN","IBCNRHLT",179,0)
 Q
"RTN","IBCNRHLU")
0^32^B8116443
"RTN","IBCNRHLU",1,0)
IBCNRHLU ;DAOU/DMK - e-Pharmacy HL7 Utilities ;24-MAY-2004
"RTN","IBCNRHLU",2,0)
 ;;2.0;INTEGRATED BILLING;**251,550**;21-MAR-94;Build 25
"RTN","IBCNRHLU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRHLU",4,0)
 ;
"RTN","IBCNRHLU",5,0)
 ; Description
"RTN","IBCNRHLU",6,0)
 ;
"RTN","IBCNRHLU",7,0)
 ; e-Pharmacy HL7 Utilities
"RTN","IBCNRHLU",8,0)
 ;
"RTN","IBCNRHLU",9,0)
 ; Entry points:
"RTN","IBCNRHLU",10,0)
 ; TRAN1 - Convert HL7 special characters (specific)
"RTN","IBCNRHLU",11,0)
 ; TRAN2 - Convert HL7 special characters (general)
"RTN","IBCNRHLU",12,0)
 ; ERR - Process HL7 Errors
"RTN","IBCNRHLU",13,0)
 ; HLT - Receive HL7 e-Pharmacy MFN Message
"RTN","IBCNRHLU",14,0)
 ; MFK - Send HL7 e-Pharmacy MFK Message
"RTN","IBCNRHLU",15,0)
 ;
"RTN","IBCNRHLU",16,0)
 Q
"RTN","IBCNRHLU",17,0)
 ;
"RTN","IBCNRHLU",18,0)
TRAN1(VALUE) ; Convert HL7 special characters
"RTN","IBCNRHLU",19,0)
 ;
"RTN","IBCNRHLU",20,0)
 ; Specific to the following standard VistA HL7 application definition
"RTN","IBCNRHLU",21,0)
 ; HL7 FIELD SEPARATOR = |
"RTN","IBCNRHLU",22,0)
 ; HL7 ENCODING CHARACTERS = ^~\&
"RTN","IBCNRHLU",23,0)
 ;
"RTN","IBCNRHLU",24,0)
 ; Input parameter:
"RTN","IBCNRHLU",25,0)
 ; VALUE = HL7 message field, component, or subcomponent value
"RTN","IBCNRHLU",26,0)
 ; Invoked if value contains escape character (\)
"RTN","IBCNRHLU",27,0)
 ;
"RTN","IBCNRHLU",28,0)
 ; Output parameter:
"RTN","IBCNRHLU",29,0)
 ; NEWVALUE = Converted HL7 message field, component, or subcomponent value
"RTN","IBCNRHLU",30,0)
 ;
"RTN","IBCNRHLU",31,0)
 N CONVERT,I,LAST,NEWVALUE,S,S3
"RTN","IBCNRHLU",32,0)
 ;
"RTN","IBCNRHLU",33,0)
 ; Initialize last string position involing converted special character
"RTN","IBCNRHLU",34,0)
 S LAST=0
"RTN","IBCNRHLU",35,0)
 ;
"RTN","IBCNRHLU",36,0)
 ; Initialize scratch string varaible
"RTN","IBCNRHLU",37,0)
 S S=""
"RTN","IBCNRHLU",38,0)
 ;
"RTN","IBCNRHLU",39,0)
 ; Initialize conversion array
"RTN","IBCNRHLU",40,0)
 ;
"RTN","IBCNRHLU",41,0)
 ; | = field separator
"RTN","IBCNRHLU",42,0)
 ; Transferred as \F\ and converted to |
"RTN","IBCNRHLU",43,0)
 S CONVERT("\F\")="|"
"RTN","IBCNRHLU",44,0)
 ;
"RTN","IBCNRHLU",45,0)
 ; ^ = component separator
"RTN","IBCNRHLU",46,0)
 ; Transferred as \S\ and NOT converted to ^ (FileMan delimiter)
"RTN","IBCNRHLU",47,0)
 ;
"RTN","IBCNRHLU",48,0)
 ; ~ = repetitive separator
"RTN","IBCNRHLU",49,0)
 ; Transferred as \R\ and converted to ~
"RTN","IBCNRHLU",50,0)
 S CONVERT("\R\")="~"
"RTN","IBCNRHLU",51,0)
 ;
"RTN","IBCNRHLU",52,0)
 ; \ = escape character
"RTN","IBCNRHLU",53,0)
 ; Transferred as \E\ and converted to \
"RTN","IBCNRHLU",54,0)
 S CONVERT("\E\")="\"
"RTN","IBCNRHLU",55,0)
 ;
"RTN","IBCNRHLU",56,0)
 ; & = subcomponent separator
"RTN","IBCNRHLU",57,0)
 ; Transferred as \T\ and converted to &
"RTN","IBCNRHLU",58,0)
 S CONVERT("\T\")="&"
"RTN","IBCNRHLU",59,0)
 ;
"RTN","IBCNRHLU",60,0)
 ; Check and covert
"RTN","IBCNRHLU",61,0)
 F I=1:1:$L(VALUE) D
"RTN","IBCNRHLU",62,0)
 . S S=S_$E(VALUE,I)
"RTN","IBCNRHLU",63,0)
 . I (I-3)'<LAST D
"RTN","IBCNRHLU",64,0)
 .. ;
"RTN","IBCNRHLU",65,0)
 .. ; Check last 3 characters and convert if necessary
"RTN","IBCNRHLU",66,0)
 .. S S3=$E(S,$L(S)-2,$L(S))
"RTN","IBCNRHLU",67,0)
 .. I $D(CONVERT(S3)) D
"RTN","IBCNRHLU",68,0)
 ... S LAST=I
"RTN","IBCNRHLU",69,0)
 ... S S=$E(S,1,$L(S)-3)_CONVERT(S3)
"RTN","IBCNRHLU",70,0)
 S NEWVALUE=S
"RTN","IBCNRHLU",71,0)
 Q NEWVALUE
"RTN","IBCNRHLU",72,0)
 ;
"RTN","IBCNRHLU",73,0)
TRAN2(VALUE,HLFS,HLECH) ; Convert HL7 special characters
"RTN","IBCNRHLU",74,0)
 ;
"RTN","IBCNRHLU",75,0)
 ; General to the following:
"RTN","IBCNRHLU",76,0)
 ;
"RTN","IBCNRHLU",77,0)
 ; HL7 Component Separator = $E(HLECH,1)
"RTN","IBCNRHLU",78,0)
 ; HL7 Repetition Separator = $E(HLECH,2) = $E(HL("ECH"),2)
"RTN","IBCNRHLU",79,0)
 ; HL7 Escape Character = $E(HLECH,3) = $E(HL("ECH"),3)
"RTN","IBCNRHLU",80,0)
 ; HL7 Subcomponent = $E(HLECH,4)
"RTN","IBCNRHLU",81,0)
 ;
"RTN","IBCNRHLU",82,0)
 ; Invoked if value contains escape character (VALUE[$E(HL("ECH"),3)
"RTN","IBCNRHLU",83,0)
 ;
"RTN","IBCNRHLU",84,0)
 ; Expected variable
"RTN","IBCNRHLU",85,0)
 ; U = "^"
"RTN","IBCNRHLU",86,0)
 ;
"RTN","IBCNRHLU",87,0)
 ; Input parameters:
"RTN","IBCNRHLU",88,0)
 ; VALUE = HL7 message field, component, or subcomponent value
"RTN","IBCNRHLU",89,0)
 ; HLFS = HL7 field separator = HL7 variable HL("FS")
"RTN","IBCNRHLU",90,0)
 ; HLECH = HL7 encoding characters = HL7 variable HL("ECH")
"RTN","IBCNRHLU",91,0)
 ;
"RTN","IBCNRHLU",92,0)
 ; Output parameter:
"RTN","IBCNRHLU",93,0)
 ; NEWVALUE = Converted HL7 message field, component, or subcomponent value
"RTN","IBCNRHLU",94,0)
 ; Quit if any input parameters undefined
"RTN","IBCNRHLU",95,0)
 I '$D(VALUE)!'$D(HLFS)!'$D(HLECH) Q
"RTN","IBCNRHLU",96,0)
 ;
"RTN","IBCNRHLU",97,0)
 N CONVERT,HLEC,I,LAST,NEWVALUE,S,S3
"RTN","IBCNRHLU",98,0)
 ;
"RTN","IBCNRHLU",99,0)
 ; Initialize HL7 escape character variable
"RTN","IBCNRHLU",100,0)
 S HLEC=$E(HLECH,3)
"RTN","IBCNRHLU",101,0)
 ;
"RTN","IBCNRHLU",102,0)
 ; Initialize last string position involing converted special character
"RTN","IBCNRHLU",103,0)
 S LAST=0
"RTN","IBCNRHLU",104,0)
 ;
"RTN","IBCNRHLU",105,0)
 ; Initialize scratch string varaible
"RTN","IBCNRHLU",106,0)
 S S=""
"RTN","IBCNRHLU",107,0)
 ;
"RTN","IBCNRHLU",108,0)
 ; Initialize conversion array
"RTN","IBCNRHLU",109,0)
 ; Do not covert to caret (^) (FileMan delimiter)
"RTN","IBCNRHLU",110,0)
 ;
"RTN","IBCNRHLU",111,0)
 ; Field separator
"RTN","IBCNRHLU",112,0)
 ; Transferred as HLEC_"F"_HLEC and converted to HLFS
"RTN","IBCNRHLU",113,0)
 S CONVERT(HLEC_"F"_HLEC)=HLFS
"RTN","IBCNRHLU",114,0)
 ;
"RTN","IBCNRHLU",115,0)
 ; Component separator
"RTN","IBCNRHLU",116,0)
 ; Transferred as HLEC_"S"_HLEC and converted to $E(HLECH,1)
"RTN","IBCNRHLU",117,0)
 I $E(HLECH,1)'=U S CONVERT(HLEC_"S"_HLEC)=$E(HLECH,1)
"RTN","IBCNRHLU",118,0)
 ;
"RTN","IBCNRHLU",119,0)
 ; Repetitive separator
"RTN","IBCNRHLU",120,0)
 ; Transferred as HLEC_"R"_HLEC and converted to $E(HLECH,2)
"RTN","IBCNRHLU",121,0)
 I $E(HLECH,2)'=U S CONVERT(HLEC_"R"_HLEC)=$E(HLECH,2)
"RTN","IBCNRHLU",122,0)
 ;
"RTN","IBCNRHLU",123,0)
 ; Escape character
"RTN","IBCNRHLU",124,0)
 ; Transferred as HLEC_"E"_HLEC and converted to $E(HLECH,3)
"RTN","IBCNRHLU",125,0)
 I $E(HLECH,3)'=U S CONVERT(HLEC_"E"_HLEC)=$E(HLECH,3)
"RTN","IBCNRHLU",126,0)
 ;
"RTN","IBCNRHLU",127,0)
 ; Subcomponent separator
"RTN","IBCNRHLU",128,0)
 ; Transferred as HLEC_"T"_HLEC and converted to $E(HLECH,4)
"RTN","IBCNRHLU",129,0)
 I $E(HLECH,4)'=U S CONVERT(HLEC_"T"_HLEC)=$E(HLECH,4)
"RTN","IBCNRHLU",130,0)
 ;
"RTN","IBCNRHLU",131,0)
 ; Check and covert
"RTN","IBCNRHLU",132,0)
 F I=1:1:$L(VALUE) D
"RTN","IBCNRHLU",133,0)
 . S S=S_$E(VALUE,I)
"RTN","IBCNRHLU",134,0)
 . I (I-3)'<LAST D
"RTN","IBCNRHLU",135,0)
 .. ;
"RTN","IBCNRHLU",136,0)
 .. ; Check last 3 characters and convert if necessary
"RTN","IBCNRHLU",137,0)
 .. S S3=$E(S,$L(S)-2,$L(S))
"RTN","IBCNRHLU",138,0)
 .. I $D(CONVERT(S3)) D
"RTN","IBCNRHLU",139,0)
 ... S LAST=I
"RTN","IBCNRHLU",140,0)
 ... S S=$E(S,1,$L(S)-3)_CONVERT(S3)
"RTN","IBCNRHLU",141,0)
 S NEWVALUE=S
"RTN","IBCNRHLU",142,0)
 Q NEWVALUE
"RTN","IBCNRHLU",143,0)
 ;
"RTN","IBCNRHLU",144,0)
ERR ; Process HL7 Errors
"RTN","IBCNRHLU",145,0)
 D ERR^IBCNEHLI
"RTN","IBCNRHLU",146,0)
 Q
"RTN","IBCNRHLU",147,0)
 ;
"RTN","IBCNRHLU",148,0)
HLT ; Receive HL7 e-Pharmacy MFN Message
"RTN","IBCNRHLU",149,0)
 D ^IBCNRHLT
"RTN","IBCNRHLU",150,0)
 Q
"RTN","IBCNRHLU",151,0)
 ;
"RTN","IBCNRHLU",152,0)
MFK ; Send HL7 e-Pharmacy MFK Message
"RTN","IBCNRHLU",153,0)
 D ^IBCNRMFK
"RTN","IBCNRHLU",154,0)
 Q
"RTN","IBCNRMFE")
0^9^B7262621
"RTN","IBCNRMFE",1,0)
IBCNRMFE ;BHAM ISC/DMK - Receive HL7 e-Pharmacy MFE Segment ;23-OCT-2003
"RTN","IBCNRMFE",2,0)
 ;;2.0;INTEGRATED BILLING;**251,276,550**;21-MAR-94;Build 25
"RTN","IBCNRMFE",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRMFE",4,0)
 ;
"RTN","IBCNRMFE",5,0)
 ; Description
"RTN","IBCNRMFE",6,0)
 ;
"RTN","IBCNRMFE",7,0)
 ; Receive HL7 e-Pharmacy MFE Segment
"RTN","IBCNRMFE",8,0)
 ; Master File Entry
"RTN","IBCNRMFE",9,0)
 ;
"RTN","IBCNRMFE",10,0)
 ; Prepare for potential subsequent Z** Segment(s)
"RTN","IBCNRMFE",11,0)
 ;
"RTN","IBCNRMFE",12,0)
 ; Called by IBCNRHLT
"RTN","IBCNRMFE",13,0)
 ;
"RTN","IBCNRMFE",14,0)
 ; Entry point
"RTN","IBCNRMFE",15,0)
 ;
"RTN","IBCNRMFE",16,0)
1000 ; Control MFE Segment processing
"RTN","IBCNRMFE",17,0)
 D INIT
"RTN","IBCNRMFE",18,0)
 Q
"RTN","IBCNRMFE",19,0)
 ;
"RTN","IBCNRMFE",20,0)
INIT ; Initialize MFE Segment variables
"RTN","IBCNRMFE",21,0)
 K DATA,DATAAP,DATACM,ERROR
"RTN","IBCNRMFE",22,0)
 N ANAME,FILENO1,KEY
"RTN","IBCNRMFE",23,0)
 ;
"RTN","IBCNRMFE",24,0)
 S EPHARM=1
"RTN","IBCNRMFE",25,0)
 S FILENO=FLN
"RTN","IBCNRMFE",26,0)
 ;
"RTN","IBCNRMFE",27,0)
 S DATE("NOW")=$$NOW^XLFDT()
"RTN","IBCNRMFE",28,0)
 ;
"RTN","IBCNRMFE",29,0)
 ; Record-Level Event Code (action)
"RTN","IBCNRMFE",30,0)
 ; MAC = Activate
"RTN","IBCNRMFE",31,0)
 ; MAD = Add
"RTN","IBCNRMFE",32,0)
 ; MDC = Deactivate
"RTN","IBCNRMFE",33,0)
 ; MDL = Delete
"RTN","IBCNRMFE",34,0)
 ; MUP = Update
"RTN","IBCNRMFE",35,0)
 S IBCNACT=$G(IBSEG(2))
"RTN","IBCNRMFE",36,0)
 ;
"RTN","IBCNRMFE",37,0)
 ; Primary Key Value ID
"RTN","IBCNRMFE",38,0)
 S KEY=$P($G(IBSEG(5)),$E(HLECH,1),1)
"RTN","IBCNRMFE",39,0)
 ;
"RTN","IBCNRMFE",40,0)
 ; Convert HL7 special characters if necessary
"RTN","IBCNRMFE",41,0)
 I KEY[$E(HLECH,3) S KEY=$$TRAN1^IBCNRHLU(KEY)
"RTN","IBCNRMFE",42,0)
 ;
"RTN","IBCNRMFE",43,0)
 S IEN=$$LOOKUP1^IBCNRFM1(FILENO,KEY)
"RTN","IBCNRMFE",44,0)
 ;
"RTN","IBCNRMFE",45,0)
 ; Error?
"RTN","IBCNRMFE",46,0)
 ; V200 = NCPDP Processor Name Undefined
"RTN","IBCNRMFE",47,0)
 ; V300 = Pharmacy Benefits Manager (PBM) Name Undefined
"RTN","IBCNRMFE",48,0)
 ; V400 = Plan ID Undefined
"RTN","IBCNRMFE",49,0)
 ; V500 = Plan ID Undefined
"RTN","IBCNRMFE",50,0)
 I FILE["Pharmacy Plan",IEN=-1 S ERROR="V500" Q
"RTN","IBCNRMFE",51,0)
 I IBCNACT'="MAD",IEN=-1 S ERROR=$S(FILENO=366.01:"V200",FILENO=366.02:"V300",FILENO=366.03:"V400",1:"V500") Q
"RTN","IBCNRMFE",52,0)
 ;
"RTN","IBCNRMFE",53,0)
 S FIELDNO=3
"RTN","IBCNRMFE",54,0)
 S FILENO1=FILENO+.1
"RTN","IBCNRMFE",55,0)
 S ANAME="E-PHARM"
"RTN","IBCNRMFE",56,0)
 S AIEN=$$LOOKUP1^IBCNRFM1(FILENO1,ANAME)
"RTN","IBCNRMFE",57,0)
 I AIEN=-1 S AIEN=$$ADD1^IBCNRFM1(FILENO1,ANAME)
"RTN","IBCNRMFE",58,0)
 I IEN'=-1 S APIEN=$$LOOKUP2^IBCNRFM1(FILENO,IEN,FIELDNO,ANAME)
"RTN","IBCNRMFE",59,0)
 I IEN=-1 S APIEN=-1
"RTN","IBCNRMFE",60,0)
 ;
"RTN","IBCNRMFE",61,0)
 ; Error?
"RTN","IBCNRMFE",62,0)
 ; V201 = E-PHARM Application Undefined
"RTN","IBCNRMFE",63,0)
 ; V301 = E-PHARM Application Undefined
"RTN","IBCNRMFE",64,0)
 ; V401 = E-PHARM Application Undefined
"RTN","IBCNRMFE",65,0)
 ; V501 = E-PHARM Application Undefined
"RTN","IBCNRMFE",66,0)
 I IBCNACT'="MAD",APIEN=-1 D  Q
"RTN","IBCNRMFE",67,0)
 . S ERROR=$S(FILENO=366.01:"V201",FILENO=366.02:"V301",FILENO=366.03:"V401",1:"V501")
"RTN","IBCNRMFE",68,0)
 . I FILE["Pharmacy" S ERROR="V501"
"RTN","IBCNRMFE",69,0)
 ;
"RTN","IBCNRMFE",70,0)
 ; MAC = Activate
"RTN","IBCNRMFE",71,0)
 I IBCNACT="MAC" D INITMAC
"RTN","IBCNRMFE",72,0)
 ;
"RTN","IBCNRMFE",73,0)
 ; MAD = Add
"RTN","IBCNRMFE",74,0)
 I IBCNACT="MAD" D INITMAD
"RTN","IBCNRMFE",75,0)
 ;
"RTN","IBCNRMFE",76,0)
 ; MDC = Deactivate
"RTN","IBCNRMFE",77,0)
 I IBCNACT="MDC" D INITMDC
"RTN","IBCNRMFE",78,0)
 ;
"RTN","IBCNRMFE",79,0)
 ; MDL = Delete
"RTN","IBCNRMFE",80,0)
 I IBCNACT="MDL" D INITMDL
"RTN","IBCNRMFE",81,0)
 ;
"RTN","IBCNRMFE",82,0)
 ; MUP = Update
"RTN","IBCNRMFE",83,0)
 I IBCNACT="MUP" D INITMUP
"RTN","IBCNRMFE",84,0)
 Q
"RTN","IBCNRMFE",85,0)
 ;
"RTN","IBCNRMFE",86,0)
INITMAD ; Initialize APPLICATION Subfile variables if MAD (Add) action
"RTN","IBCNRMFE",87,0)
 ; 366.013 NCPDP PROCESSOR APPLICATION Subfile
"RTN","IBCNRMFE",88,0)
 ; 366.023 PHARMACY BENEFITS MANAGER (PBM) APPLICATION Subfile
"RTN","IBCNRMFE",89,0)
 ; 366.033 PLAN APPLICATION Subfile
"RTN","IBCNRMFE",90,0)
 ;
"RTN","IBCNRMFE",91,0)
 ; Process MAD (Add) as MAC (Activate)
"RTN","IBCNRMFE",92,0)
 D INITMAC
"RTN","IBCNRMFE",93,0)
 ;
"RTN","IBCNRMFE",94,0)
 ; .03 LOCAL ACTIVE?
"RTN","IBCNRMFE",95,0)
 ; Set to INACTIVE for PLAN, all others ACTIVE
"RTN","IBCNRMFE",96,0)
 S DATAAP(.03)=$S(FILENO=366.03:0,1:1)
"RTN","IBCNRMFE",97,0)
 ;
"RTN","IBCNRMFE",98,0)
 ; .04 USER EDITED LOCAL
"RTN","IBCNRMFE",99,0)
 S DATAAP(.04)=IDUZ
"RTN","IBCNRMFE",100,0)
 ;
"RTN","IBCNRMFE",101,0)
 ; .05 DATE/TIME LOCAL EDITED
"RTN","IBCNRMFE",102,0)
 S DATAAP(.05)=DATE("NOW")
"RTN","IBCNRMFE",103,0)
 ;
"RTN","IBCNRMFE",104,0)
 ; .13 DATE/TIME CREATED
"RTN","IBCNRMFE",105,0)
 S DATAAP(.13)=DATE("NOW")
"RTN","IBCNRMFE",106,0)
 Q
"RTN","IBCNRMFE",107,0)
 ;
"RTN","IBCNRMFE",108,0)
INITMAC ; Initialize APPLICATION Subfile variables if MAC (Activate) action
"RTN","IBCNRMFE",109,0)
 ; 366.013 NCPDP PROCESSOR APPLICATION Subfile
"RTN","IBCNRMFE",110,0)
 ; 366.023 PHARMACY BENEFITS MANAGER (PBM) APPLICATION Subfile
"RTN","IBCNRMFE",111,0)
 ; 366.033 PLAN APPLICATION Subfile
"RTN","IBCNRMFE",112,0)
 ;
"RTN","IBCNRMFE",113,0)
 ; .02 NATIONAL ACTIVE?
"RTN","IBCNRMFE",114,0)
 S DATAAP(.02)=1
"RTN","IBCNRMFE",115,0)
 ;
"RTN","IBCNRMFE",116,0)
 ; .06 DATE/TIME NATIONAL EDITED
"RTN","IBCNRMFE",117,0)
 S DATAAP(.06)=DATE("NOW")
"RTN","IBCNRMFE",118,0)
 ;
"RTN","IBCNRMFE",119,0)
 ; .11 DEACTIVATED?
"RTN","IBCNRMFE",120,0)
 S DATAAP(.11)=0
"RTN","IBCNRMFE",121,0)
 ;
"RTN","IBCNRMFE",122,0)
 ; .12 DATE/TIME DEACTIVATED
"RTN","IBCNRMFE",123,0)
 S DATAAP(.12)="@"
"RTN","IBCNRMFE",124,0)
 Q
"RTN","IBCNRMFE",125,0)
 ;
"RTN","IBCNRMFE",126,0)
INITMDC ; Initialize APPLICATION Subfile variables if MDC (deactivate) action
"RTN","IBCNRMFE",127,0)
 ; 366.013 NCPDP PROCESSOR APPLICATION Subfile
"RTN","IBCNRMFE",128,0)
 ; 366.023 PHARMACY BENEFITS MANAGER (PBM) APPLICATION Subfile
"RTN","IBCNRMFE",129,0)
 ; 366.033 PLAN APPLICATION Subfile
"RTN","IBCNRMFE",130,0)
 ;
"RTN","IBCNRMFE",131,0)
 ; .02 NATIONAL ACTIVE?
"RTN","IBCNRMFE",132,0)
 S DATAAP(.02)=0
"RTN","IBCNRMFE",133,0)
 ;
"RTN","IBCNRMFE",134,0)
 ; .06 DATE/TIME NATIONAL EDITED
"RTN","IBCNRMFE",135,0)
 S DATAAP(.06)=DATE("NOW")
"RTN","IBCNRMFE",136,0)
 ;
"RTN","IBCNRMFE",137,0)
 ; .11 DEACTIVATED?
"RTN","IBCNRMFE",138,0)
 S DATAAP(.11)=1
"RTN","IBCNRMFE",139,0)
 ;
"RTN","IBCNRMFE",140,0)
 ; .12 DATE/TIME DEACTIVATED
"RTN","IBCNRMFE",141,0)
 S DATAAP(.12)=DATE("NOW")
"RTN","IBCNRMFE",142,0)
 Q
"RTN","IBCNRMFE",143,0)
 ;
"RTN","IBCNRMFE",144,0)
INITMDL ; Initialize APPLICATION Subfile variables if MDL (Delete) action
"RTN","IBCNRMFE",145,0)
 ; 366.013 NCPDP PROCESSOR APPLICATION Subfile
"RTN","IBCNRMFE",146,0)
 ; 366.023 PHARMACY BENEFITS MANAGER (PBM) APPLICATION Subfile
"RTN","IBCNRMFE",147,0)
 ; 366.033 PLAN APPLICATION Subfile
"RTN","IBCNRMFE",148,0)
 ;
"RTN","IBCNRMFE",149,0)
 ; Process MDL (Delete) as MDC (Deactivate)
"RTN","IBCNRMFE",150,0)
 D INITMDC
"RTN","IBCNRMFE",151,0)
 Q
"RTN","IBCNRMFE",152,0)
 ;
"RTN","IBCNRMFE",153,0)
INITMUP ; Initialize APPLICATION Subfile variables if MUP (Update) action
"RTN","IBCNRMFE",154,0)
 ; 366.013 NCPDP PROCESSOR APPLICATION Subfile
"RTN","IBCNRMFE",155,0)
 ; 366.023 PHARMACY BENEFITS MANAGER (PBM) APPLICATION Subfile
"RTN","IBCNRMFE",156,0)
 ; 366.033 PLAN APPLICATION Subfile
"RTN","IBCNRMFE",157,0)
 Q
"RTN","IBCNRMFK")
0^10^B5869085
"RTN","IBCNRMFK",1,0)
IBCNRMFK ;DAOU/DMK - Send HL7 e-Pharmacy MFK Message ;23-OCT-2003
"RTN","IBCNRMFK",2,0)
 ;;2.0;INTEGRATED BILLING;**251,550**;21-MAR-94;Build 25
"RTN","IBCNRMFK",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRMFK",4,0)
 ;
"RTN","IBCNRMFK",5,0)
 ; Description
"RTN","IBCNRMFK",6,0)
 ;
"RTN","IBCNRMFK",7,0)
 ; Send HL7 e-Pharmacy MFK Message
"RTN","IBCNRMFK",8,0)
 ; (Application Acknowledgement)
"RTN","IBCNRMFK",9,0)
 ;
"RTN","IBCNRMFK",10,0)
 ; Required segments listed in order
"RTN","IBCNRMFK",11,0)
 ; MSH (Message Header Segment)
"RTN","IBCNRMFK",12,0)
 ; MSA (Message Acknowledgement Segment)
"RTN","IBCNRMFK",13,0)
 ; MFI (Master File Identifier Segment)
"RTN","IBCNRMFK",14,0)
 ; MFA (Master File Acknowledgement)
"RTN","IBCNRMFK",15,0)
 ;
"RTN","IBCNRMFK",16,0)
 ; Called by IBCNRHLU if all of the following are true: 
"RTN","IBCNRMFK",17,0)
 ; * File # (MFI Segment) = 366.01, 366.02, or 366.03
"RTN","IBCNRMFK",18,0)
 ; * Segment ID (every segment) = MFE, ZCM, ZPB, ZPL, ZPP, or ZPT
"RTN","IBCNRMFK",19,0)
 ;
"RTN","IBCNRMFK",20,0)
 ; Entry point
"RTN","IBCNRMFK",21,0)
 ;
"RTN","IBCNRMFK",22,0)
1000 ; Control MFK Message processing
"RTN","IBCNRMFK",23,0)
 ;
"RTN","IBCNRMFK",24,0)
 ; Possible future use
"RTN","IBCNRMFK",25,0)
 ; Quit if no error to report
"RTN","IBCNRMFK",26,0)
 ;I '$D(DATAMFK("ERROR")) Q
"RTN","IBCNRMFK",27,0)
 ;
"RTN","IBCNRMFK",28,0)
 N ERROR,MESSAGE
"RTN","IBCNRMFK",29,0)
 K HLA("HLA")
"RTN","IBCNRMFK",30,0)
 ;
"RTN","IBCNRMFK",31,0)
 D MSA
"RTN","IBCNRMFK",32,0)
 D MFI
"RTN","IBCNRMFK",33,0)
 D MFA
"RTN","IBCNRMFK",34,0)
 ;
"RTN","IBCNRMFK",35,0)
 D GENACK^HLMA1(HL("EID"),HLMTIENS,HL("EIDS"),"LM",1,.ERROR)
"RTN","IBCNRMFK",36,0)
 ;
"RTN","IBCNRMFK",37,0)
 ; Error?
"RTN","IBCNRMFK",38,0)
 I $D(ERROR) D ERROR
"RTN","IBCNRMFK",39,0)
 ;
"RTN","IBCNRMFK",40,0)
 K HLA("HLA")
"RTN","IBCNRMFK",41,0)
 Q
"RTN","IBCNRMFK",42,0)
 ;
"RTN","IBCNRMFK",43,0)
ERROR ; Process error
"RTN","IBCNRMFK",44,0)
 S MESSAGE(1)="Outgoing HL7 ePharmacy Application Acknowledgment Message error"
"RTN","IBCNRMFK",45,0)
 S MESSAGE(2)=ERROR
"RTN","IBCNRMFK",46,0)
 D MESSAGE
"RTN","IBCNRMFK",47,0)
 Q
"RTN","IBCNRMFK",48,0)
 ;
"RTN","IBCNRMFK",49,0)
MESSAGE ; Send message
"RTN","IBCNRMFK",50,0)
 Q
"RTN","IBCNRMFK",51,0)
 ;
"RTN","IBCNRMFK",52,0)
MFA ; Create MFA Segment
"RTN","IBCNRMFK",53,0)
 N SEGMENT
"RTN","IBCNRMFK",54,0)
 ;
"RTN","IBCNRMFK",55,0)
 ; Segment ID
"RTN","IBCNRMFK",56,0)
 S $P(SEGMENT,HLFS,1)="MFA"
"RTN","IBCNRMFK",57,0)
 ;
"RTN","IBCNRMFK",58,0)
 ; MFE-1 Record-Level Event Code (from MFN Message)
"RTN","IBCNRMFK",59,0)
 ; MAC = Activate
"RTN","IBCNRMFK",60,0)
 ; MAD = Add
"RTN","IBCNRMFK",61,0)
 ; MDC = Deactivate
"RTN","IBCNRMFK",62,0)
 ; MDL = Delete
"RTN","IBCNRMFK",63,0)
 ; MUP = Update
"RTN","IBCNRMFK",64,0)
 S $P(SEGMENT,HLFS,2)=DATAMFK("MFE-1")
"RTN","IBCNRMFK",65,0)
 ;
"RTN","IBCNRMFK",66,0)
 ; Record-Level Error Return (relative to MFN Message)
"RTN","IBCNRMFK",67,0)
 ; Piece 1 = ID
"RTN","IBCNRMFK",68,0)
 ; S = Saved
"RTN","IBCNRMFK",69,0)
 ; P = Previous (not saved)
"RTN","IBCNRMFK",70,0)
 ; U = Undefined (not saved)
"RTN","IBCNRMFK",71,0)
 ; and
"RTN","IBCNRMFK",72,0)
 ; Piece 2 = Error Code (optional - if error)
"RTN","IBCNRMFK",73,0)
 ; Format = "V"NNN where N = number (e.g. V128)
"RTN","IBCNRMFK",74,0)
 I '$D(DATAMFK("ERROR")) S $P(SEGMENT,HLFS,5)="S"
"RTN","IBCNRMFK",75,0)
 I $D(DATAMFK("ERROR")) S $P(SEGMENT,HLFS,5)=$S(DATAMFK("IEN")=-1:"U",1:"P")_$E(HLECH,1)_DATAMFK("ERROR")
"RTN","IBCNRMFK",76,0)
 ;
"RTN","IBCNRMFK",77,0)
 ; MFE-4 Primary Key Value (from MFN Message)
"RTN","IBCNRMFK",78,0)
 S $P(SEGMENT,HLFS,6)=DATAMFK("MFE-4")
"RTN","IBCNRMFK",79,0)
 ;
"RTN","IBCNRMFK",80,0)
 ; MFE-5 Primary Key Value Type (from MFN Message)
"RTN","IBCNRMFK",81,0)
 S $P(SEGMENT,HLFS,7)=DATAMFK("MFE-5")
"RTN","IBCNRMFK",82,0)
 ;
"RTN","IBCNRMFK",83,0)
 S HLA("HLA",3)=SEGMENT
"RTN","IBCNRMFK",84,0)
 Q
"RTN","IBCNRMFK",85,0)
 ;
"RTN","IBCNRMFK",86,0)
MFI ; Create MFI Segment
"RTN","IBCNRMFK",87,0)
 N SEGMENT
"RTN","IBCNRMFK",88,0)
 ;
"RTN","IBCNRMFK",89,0)
 ; Segment ID
"RTN","IBCNRMFK",90,0)
 S $P(SEGMENT,HLFS,1)="MFI"
"RTN","IBCNRMFK",91,0)
 ;
"RTN","IBCNRMFK",92,0)
 ; MFI-1 Master File Identifier (from MFN Message)
"RTN","IBCNRMFK",93,0)
 S $P(SEGMENT,HLFS,2)=DATAMFK("MFI-1")
"RTN","IBCNRMFK",94,0)
 ;
"RTN","IBCNRMFK",95,0)
 ; MFI-3 File-Level Event Code (from MFN Message)
"RTN","IBCNRMFK",96,0)
 S $P(SEGMENT,HLFS,4)=DATAMFK("MFI-3")
"RTN","IBCNRMFK",97,0)
 ;
"RTN","IBCNRMFK",98,0)
 ; Response-Level Code
"RTN","IBCNRMFK",99,0)
 ; NE = Never (send response Application Acknowledgement Message)
"RTN","IBCNRMFK",100,0)
 S $P(SEGMENT,HLFS,7)="NE"
"RTN","IBCNRMFK",101,0)
 ;
"RTN","IBCNRMFK",102,0)
 S HLA("HLA",2)=SEGMENT
"RTN","IBCNRMFK",103,0)
 Q
"RTN","IBCNRMFK",104,0)
 ;
"RTN","IBCNRMFK",105,0)
MSA ; Create MSA Segment
"RTN","IBCNRMFK",106,0)
 N SEGMENT
"RTN","IBCNRMFK",107,0)
 ;
"RTN","IBCNRMFK",108,0)
 ; Segment ID
"RTN","IBCNRMFK",109,0)
 S $P(SEGMENT,HLFS,1)="MSA"
"RTN","IBCNRMFK",110,0)
 ;
"RTN","IBCNRMFK",111,0)
 ; Acknowledgment Code (relative to MFN Message)
"RTN","IBCNRMFK",112,0)
 ; AA = application acknowledgement accept
"RTN","IBCNRMFK",113,0)
 ; AR = application acknowledgement reject
"RTN","IBCNRMFK",114,0)
 S $P(SEGMENT,HLFS,2)=$S($D(DATAMFK("ERROR")):"AR",1:"AA")
"RTN","IBCNRMFK",115,0)
 ;
"RTN","IBCNRMFK",116,0)
 ; MSH-10 Message Control ID (from MFN Message)
"RTN","IBCNRMFK",117,0)
 S $P(SEGMENT,HLFS,3)=HL("MID")
"RTN","IBCNRMFK",118,0)
 ;
"RTN","IBCNRMFK",119,0)
 S HLA("HLA",1)=SEGMENT
"RTN","IBCNRMFK",120,0)
 Q
"RTN","IBCNRP")
0^24^B23991702
"RTN","IBCNRP",1,0)
IBCNRP ;DAOU/ALA - Plan Match ListMan ;13-NOV-2003
"RTN","IBCNRP",2,0)
 ;;2.0;INTEGRATED BILLING;**251,516,550**;21-MAR-94;Build 25
"RTN","IBCNRP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRP",4,0)
 ;; ;
"RTN","IBCNRP",5,0)
EN ; -- main entry point for IBCNR PLAN MATCH
"RTN","IBCNRP",6,0)
 D EN^VALM("IBCNR PLAN MATCH")
"RTN","IBCNRP",7,0)
 Q
"RTN","IBCNRP",8,0)
 ;
"RTN","IBCNRP",9,0)
HDR ; -- header code
"RTN","IBCNRP",10,0)
 NEW IBCNS0,IBCNS11,IBCNS13,IBLEAD,X,X1,X2
"RTN","IBCNRP",11,0)
 S IBCNS0=$G(^DIC(36,+IBCNSP,0))
"RTN","IBCNRP",12,0)
 S IBCNS11=$G(^DIC(36,+IBCNSP,.11))
"RTN","IBCNRP",13,0)
 S IBCNS13=$G(^DIC(36,+IBCNSP,.13))
"RTN","IBCNRP",14,0)
 S X2=$S(IBW:"",1:"Active ")
"RTN","IBCNRP",15,0)
 S IBLEAD=$S(IBIND:"All "_X2,1:X2_"Group ")_"Plans for: "
"RTN","IBCNRP",16,0)
 S X="Phone: "_$S($P(IBCNS13,"^")]"":$P(IBCNS13,"^"),1:"<not filed>")
"RTN","IBCNRP",17,0)
 S VALMHDR(1)=$$SETSTR^VALM1(X,IBLEAD_$P(IBCNS0,"^"),81-$L(X),40)
"RTN","IBCNRP",18,0)
 S X1="Precerts: "_$S($P(IBCNS13,"^",3)]"":$P(IBCNS13,"^",3),1:"<not filed>")
"RTN","IBCNRP",19,0)
 S X=$TR($J("",$L(IBLEAD)),""," ")_$S($P(IBCNS11,"^")]"":$P(IBCNS11,"^"),1:"<no street address>")
"RTN","IBCNRP",20,0)
 S VALMHDR(2)=$$SETSTR^VALM1(X1,X,81-$L(X1),40)
"RTN","IBCNRP",21,0)
 S X=$S($P(IBCNS11,"^",4)]"":$P(IBCNS11,"^",4),1:"<no city>")_", "
"RTN","IBCNRP",22,0)
 S X=X_$S($P(IBCNS11,"^",5):$P($G(^DIC(5,$P(IBCNS11,"^",5),0)),"^",2),1:"<no state>")_"  "_$E($P(IBCNS11,"^",6),1,5)_$S($E($P(IBCNS11,"^",6),6,9)]"":"-"_$E($P(IBCNS11,"^",6),6,9),1:"")
"RTN","IBCNRP",23,0)
 S VALMHDR(3)=$$SETSTR^VALM1(X,"",$L(IBLEAD)+1,80)
"RTN","IBCNRP",24,0)
 S X="#" I $G(IBIND) S X="#  + => Indiv. Plan"
"RTN","IBCNRP",25,0)
 I $G(IBW) S X=$E(X_$J("",23),1,23)_"* => Inactive Plan"
"RTN","IBCNRP",26,0)
 S VALMHDR(4)=$$SETSTR^VALM1(" ",X,64,17)
"RTN","IBCNRP",27,0)
 Q
"RTN","IBCNRP",28,0)
 ;
"RTN","IBCNRP",29,0)
INIT ; -- init variables and list array
"RTN","IBCNRP",30,0)
 NEW IBCNRPP,IBCOV,IBCPD6,IBCPOLD,IBCRVD,LIM,X
"RTN","IBCNRP",31,0)
 K ^TMP("IBCNR",$J)
"RTN","IBCNRP",32,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCNRP",33,0)
 ; MRD;IB*2.0*516 - Rather than pull the zero node here, use $$GET1^DIQ
"RTN","IBCNRP",34,0)
 ; to pull specific pieces down below.
"RTN","IBCNRP",35,0)
 ;S IBGP0=^IBA(355.3,+IBCNGP,0)
"RTN","IBCNRP",36,0)
 ;I $G(IBGP0) D
"RTN","IBCNRP",37,0)
 I $G(^IBA(355.3,+IBCNGP,0)) D
"RTN","IBCNRP",38,0)
 . ;S IBCPD6=$G(IBGP0,U,6)) ;chk pre-cert
"RTN","IBCNRP",39,0)
 . ;I 'IBIND,'$P(IBGP0,"^",2) Q  ;    exclude individual plans
"RTN","IBCNRP",40,0)
 . ;I 'IBW,$P(IBGP0,"^",11) Q  ;      plan is inactive
"RTN","IBCNRP",41,0)
 . ;
"RTN","IBCNRP",42,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNRP",43,0)
 . S X=$$SETFLD^VALM1(VALMCNT,"","NUMBER")
"RTN","IBCNRP",44,0)
 . ;
"RTN","IBCNRP",45,0)
 . ;I '$P(IBGP0,"^",2) S $E(X,4)="+"
"RTN","IBCNRP",46,0)
 . ;S X=$$SETFLD^VALM1($P(IBGP0,"^",3),X,"GNAME")
"RTN","IBCNRP",47,0)
 . I '$$GET1^DIQ(355.3,+IBCNGP_",",.02,"I") S $E(X,4)="+"
"RTN","IBCNRP",48,0)
 . S X=$$SETFLD^VALM1($$GET1^DIQ(355.3,+IBCNGP_",",2.01),X,"GNAME")
"RTN","IBCNRP",49,0)
 . ;
"RTN","IBCNRP",50,0)
 . ;I $P(IBGP0,"^",11) S $E(X,24)="*"
"RTN","IBCNRP",51,0)
 . ;S X=$$SETFLD^VALM1($P(IBGP0,"^",4),X,"GNUM")
"RTN","IBCNRP",52,0)
 . I $$GET1^DIQ(355.3,+IBCNGP_",",.11,"I") S $E(X,24)="*"
"RTN","IBCNRP",53,0)
 . S X=$$SETFLD^VALM1($$GET1^DIQ(355.3,+IBCNGP_",",2.02),X,"GNUM")
"RTN","IBCNRP",54,0)
 . ;
"RTN","IBCNRP",55,0)
 . ;S X=$$SETFLD^VALM1($$EXPAND^IBTRE(355.3,.09,$P(IBGP0,"^",9)),X,"TYPE")
"RTN","IBCNRP",56,0)
 . S X=$$SETFLD^VALM1($$GET1^DIQ(355.3,+IBCNGP_",",.09,"E"),X,"TYPE")
"RTN","IBCNRP",57,0)
 . ;
"RTN","IBCNRP",58,0)
 . S IBCNRPP=$$GET1^DIQ(355.3,IBCNGP_",",6.01,"I")
"RTN","IBCNRP",59,0)
 . I IBCNRPP'="" S IBCNRPP=$$GET1^DIQ(366.03,IBCNRPP_",",.01,"E")
"RTN","IBCNRP",60,0)
 . S X=$$SETFLD^VALM1(IBCNRPP,X,"PHARM")
"RTN","IBCNRP",61,0)
 . ;
"RTN","IBCNRP",62,0)
 . S IBCOV=$O(^IBE(355.31,"B","PHARMACY",""))
"RTN","IBCNRP",63,0)
 . S LIM="",IBCVRD=0
"RTN","IBCNRP",64,0)
 . F  S LIM=$O(^IBA(355.32,"B",IBCNGP,LIM)) Q:LIM=""  D
"RTN","IBCNRP",65,0)
 .. I $P(^IBA(355.32,LIM,0),U,2)=IBCOV S IBCVRD=$P(^IBA(355.32,LIM,0),U,4)
"RTN","IBCNRP",66,0)
 . S X=$$SETFLD^VALM1($S(IBCVRD=0:"NO",1:"YES"),X,"COV")
"RTN","IBCNRP",67,0)
 . ;
"RTN","IBCNRP",68,0)
 . S ^TMP("IBCNR",$J,VALMCNT,0)=X
"RTN","IBCNRP",69,0)
 . S ^TMP("IBCNR",$J,"IDX",VALMCNT,VALMCNT)=IBCNGP
"RTN","IBCNRP",70,0)
 . I '$D(^TMP("IBCNR",$J)) S VALMCNT=2,^TMP("IBCNR",$J,1,0)=" ",^TMP("IBCNR",$J,2,0)="   No plans were identified for this company."
"RTN","IBCNRP",71,0)
 Q
"RTN","IBCNRP",72,0)
 ;
"RTN","IBCNRP",73,0)
HELP ; -- help code
"RTN","IBCNRP",74,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCNRP",75,0)
 Q
"RTN","IBCNRP",76,0)
 ;
"RTN","IBCNRP",77,0)
EXIT ; -- exit code
"RTN","IBCNRP",78,0)
 K ^TMP("IBCNR",$J),VALMBCK,VALMY
"RTN","IBCNRP",79,0)
 D CLEAN^VALM10,CLEAR^VALM1
"RTN","IBCNRP",80,0)
 Q
"RTN","IBCNRP",81,0)
 ;
"RTN","IBCNRP",82,0)
EXPND ; -- expand code
"RTN","IBCNRP",83,0)
 Q
"RTN","IBCNRP",84,0)
 ;
"RTN","IBCNRP",85,0)
SEL ; -- select plan
"RTN","IBCNRP",86,0)
 D S1
"RTN","IBCNRP",87,0)
 I 'IBX Q  ; no group selected
"RTN","IBCNRP",88,0)
 ;
"RTN","IBCNRP",89,0)
 NEW DA,DIC,DIE,DR,D,IBPLN
"RTN","IBCNRP",90,0)
 S DIC="^IBCNR(366.03,",DIC(0)="AEMNZ" D ^DIC
"RTN","IBCNRP",91,0)
 I +Y<1 S D="F" D IX^DIC
"RTN","IBCNRP",92,0)
 I +Y<1 G SPQ
"RTN","IBCNRP",93,0)
 S IBPLN=+Y K Y,X
"RTN","IBCNRP",94,0)
 D PLCK  ; check plan status
"RTN","IBCNRP",95,0)
 S DA=IBSEL,DIC="^IBA(355.3,",DIE=DIC,DR="6.01////^S X="_IBPLN
"RTN","IBCNRP",96,0)
 D ^DIE
"RTN","IBCNRP",97,0)
 D INIT
"RTN","IBCNRP",98,0)
 ;
"RTN","IBCNRP",99,0)
 S IBX=0 F  S IBX=$O(VALMY(IBX)) Q:'IBX  S ^TMP($J,"IBSEL",+$G(^TMP("IBCNR",$J,"IDX",IBX,IBX)))=""
"RTN","IBCNRP",100,0)
 ;
"RTN","IBCNRP",101,0)
 D SPQ
"RTN","IBCNRP",102,0)
 Q
"RTN","IBCNRP",103,0)
 ;
"RTN","IBCNRP",104,0)
PLCK ; -- check plan status
"RTN","IBCNRP",105,0)
 NEW ARRAY
"RTN","IBCNRP",106,0)
 D STCHK^IBCNRU1(IBPLN,.ARRAY)
"RTN","IBCNRP",107,0)
 I $G(ARRAY(1))'="A" D
"RTN","IBCNRP",108,0)
 . W !!,"WARNING....PLAN NOT ACTIVE!"
"RTN","IBCNRP",109,0)
 ;
"RTN","IBCNRP",110,0)
 Q
"RTN","IBCNRP",111,0)
 ;
"RTN","IBCNRP",112,0)
DEL ; -- remove a plan from a group
"RTN","IBCNRP",113,0)
 D S1
"RTN","IBCNRP",114,0)
 ;
"RTN","IBCNRP",115,0)
 NEW DA,DIC,DIE,DR
"RTN","IBCNRP",116,0)
 S DA=IBSEL,DIC="^IBA(355.3,",DIE=DIC,DR="6.01///@"
"RTN","IBCNRP",117,0)
 D ^DIE
"RTN","IBCNRP",118,0)
 D INIT
"RTN","IBCNRP",119,0)
 ;
"RTN","IBCNRP",120,0)
 S IBX=0 F  S IBX=$O(VALMY(IBX)) Q:'IBX  S ^TMP($J,"IBSEL",+$G(^TMP("IBCNR",$J,"IDX",IBX,IBX)))=""
"RTN","IBCNRP",121,0)
 ;
"RTN","IBCNRP",122,0)
 D SPQ
"RTN","IBCNRP",123,0)
 Q
"RTN","IBCNRP",124,0)
 ;
"RTN","IBCNRP",125,0)
S1 ;
"RTN","IBCNRP",126,0)
 NEW DIR,DIRUT,DUOUT,DTOUT,DIROUT,IBOK,IBQUIT,Y
"RTN","IBCNRP",127,0)
 D EN^VALM2($G(XQORNOD(0)),"S"),FULL^VALM1
"RTN","IBCNRP",128,0)
 S IBX=$O(VALMY(0)),VALMBCK="R"
"RTN","IBCNRP",129,0)
 ;
"RTN","IBCNRP",130,0)
 I 'IBX W !!,"No group selected!" G SPQ
"RTN","IBCNRP",131,0)
 I 'IBMULT D  G SPQ
"RTN","IBCNRP",132,0)
 . I $O(VALMY(IBX)) W !!,*7,"You may only select a single plan!" Q
"RTN","IBCNRP",133,0)
 . I $G(IBALR),+$G(^TMP("IBCNR",$J,"IDX",IBX,IBX))=IBALR W !!,*7,"This plan is not allowed for selection!" Q
"RTN","IBCNRP",134,0)
 . D OK^IBCNSM3
"RTN","IBCNRP",135,0)
 . I IBQUIT S VALMBCK="Q" Q
"RTN","IBCNRP",136,0)
 . I IBOK S IBSEL=+$G(^TMP("IBCNR",$J,"IDX",IBX,IBX)),VALMBCK="Q"
"RTN","IBCNRP",137,0)
 ;
"RTN","IBCNRP",138,0)
 S IBSEL=+$G(^TMP("IBCNR",$J,"IDX",IBX,IBX))
"RTN","IBCNRP",139,0)
 Q
"RTN","IBCNRP",140,0)
 ;
"RTN","IBCNRP",141,0)
SPQ ;
"RTN","IBCNRP",142,0)
 I '$O(IBSEL(0)),VALMBCK="R" D PAUSE^VALM1
"RTN","IBCNRP",143,0)
 Q
"RTN","IBCNRPM2")
0^22^B20472874
"RTN","IBCNRPM2",1,0)
IBCNRPM2 ;BHAM ISC/CMW - Match Multiple Group Plans to a Pharmacy Plan ;10-MAR-2004
"RTN","IBCNRPM2",2,0)
 ;;2.0;INTEGRATED BILLING;**251,276,550**;21-MAR-94;Build 25
"RTN","IBCNRPM2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRPM2",4,0)
 ;; ;
"RTN","IBCNRPM2",5,0)
EN(IBCNRP,IBCNRI,IBCNRGP) ; -- main entry point for IBCNR PAYERSHEET MATCH (LIST TEMPLATE)
"RTN","IBCNRPM2",6,0)
 D EN^VALM("IBCNR GROUP PLAN MATCH")
"RTN","IBCNRPM2",7,0)
 Q
"RTN","IBCNRPM2",8,0)
 ;
"RTN","IBCNRPM2",9,0)
HDR ; -- header code
"RTN","IBCNRPM2",10,0)
 NEW IBCNR0,IBCNRID,IBCNRNM,IBCNR10,IBCNRPBM,IBCNRBIN,IBCNRPCN,IBLEAD
"RTN","IBCNRPM2",11,0)
 NEW IBCNR3,IBCNRIN,NST,LST,X
"RTN","IBCNRPM2",12,0)
 ; get pharmacy plan data
"RTN","IBCNRPM2",13,0)
 S IBCNR0=$G(^IBCNR(366.03,+IBCNRP,0))
"RTN","IBCNRPM2",14,0)
 S IBCNRID=$P(IBCNR0,"^",1) ;id
"RTN","IBCNRPM2",15,0)
 S IBCNRNM=$P(IBCNR0,"^",2) ;name
"RTN","IBCNRPM2",16,0)
 S IBCNR10=$G(^IBCNR(366.03,+IBCNRP,10))
"RTN","IBCNRPM2",17,0)
 S IBCNRPBM=$P(IBCNR10,"^",1) ;pbm
"RTN","IBCNRPM2",18,0)
 S IBCNRBIN=$P(IBCNR10,"^",2) ;bin
"RTN","IBCNRPM2",19,0)
 S IBCNRPCN=$P(IBCNR10,"^",3) ;pcn
"RTN","IBCNRPM2",20,0)
 S IBCNR3=$G(^IBCNR(366.03,+IBCNRP,3,1,0)) ; appl
"RTN","IBCNRPM2",21,0)
 S NST=$S($P(IBCNR3,"^",2)=0:"Inactive ",1:"Active ")
"RTN","IBCNRPM2",22,0)
 S LST=$S($P(IBCNR3,"^",3)=0:"Inactive ",1:"Active ")
"RTN","IBCNRPM2",23,0)
 ; get insurance company name
"RTN","IBCNRPM2",24,0)
 S IBCNRIN=$P($G(^DIC(36,IBCNRI,0)),U)
"RTN","IBCNRPM2",25,0)
 ; row 1
"RTN","IBCNRPM2",26,0)
 S IBLEAD="FOR PHARMACY PLAN: "
"RTN","IBCNRPM2",27,0)
 S X=IBCNRNM_" - "_IBCNRID
"RTN","IBCNRPM2",28,0)
 S VALMHDR(1)=$$SETSTR^VALM1(X,IBLEAD,$L(IBLEAD)+1,80)
"RTN","IBCNRPM2",29,0)
 ; row 2
"RTN","IBCNRPM2",30,0)
 S IBLEAD="BIN: "_IBCNRBIN
"RTN","IBCNRPM2",31,0)
 S X="     PCN: "_IBCNRPCN_"     STATUS:  National "_NST_"/Local "_LST
"RTN","IBCNRPM2",32,0)
 S VALMHDR(2)=$$SETSTR^VALM1(X,IBLEAD,$L(IBLEAD)+1,80)
"RTN","IBCNRPM2",33,0)
 ; row 3
"RTN","IBCNRPM2",34,0)
 ;S X="STATUS:  National "_NST_"/"
"RTN","IBCNRPM2",35,0)
 ;S VALMHDR(3)=$$SETSTR^VALM1("Local "_LST,X,$L(X)+1,80)
"RTN","IBCNRPM2",36,0)
 ; row 4
"RTN","IBCNRPM2",37,0)
 S X="FOR INSURANCE COMPANY: "
"RTN","IBCNRPM2",38,0)
 S VALMHDR(4)=$$SETSTR^VALM1(IBCNRIN,X,$L(X)+1,80)
"RTN","IBCNRPM2",39,0)
 ;
"RTN","IBCNRPM2",40,0)
 Q
"RTN","IBCNRPM2",41,0)
 ;
"RTN","IBCNRPM2",42,0)
INIT ; -- init variables and list array
"RTN","IBCNRPM2",43,0)
 ;
"RTN","IBCNRPM2",44,0)
 I '$D(^TMP("IBCNR",$J,"GP")) D  Q
"RTN","IBCNRPM2",45,0)
 . S VALMCNT=0
"RTN","IBCNRPM2",46,0)
 . W !,*7,"Warning: No Active Group Plans with Pharmacy Coverage Found."
"RTN","IBCNRPM2",47,0)
 ;
"RTN","IBCNRPM2",48,0)
 N GPIEN,IBGP0,IBCPOLD,X,IBCPD6,IBCNRPP,IBCOV,IBCRVD,LIM
"RTN","IBCNRPM2",49,0)
 N IBGNA,IBGNM,IBCNA,IBCNM,IBDAT
"RTN","IBCNRPM2",50,0)
 K ^TMP("IBCNR",$J,"PM")
"RTN","IBCNRPM2",51,0)
 S VALMCNT=0,VALMBG=1,(IBCNA,IBCNM)=""
"RTN","IBCNRPM2",52,0)
 S (IBIND,IBMULT,IBW)=1
"RTN","IBCNRPM2",53,0)
 F  S IBCNA=$O(^TMP("IBCNR",$J,"GP",IBCNA)) Q:IBCNA=""  D
"RTN","IBCNRPM2",54,0)
 . F  S IBCNM=$O(^TMP("IBCNR",$J,"GP",IBCNA,IBCNM)) Q:IBCNM=""  D
"RTN","IBCNRPM2",55,0)
 .. ;get pharm plan id
"RTN","IBCNRPM2",56,0)
 .. S GPIEN=$O(^TMP("IBCNR",$J,"GP",IBCNA,IBCNM,"")),IBDAT=^TMP("IBCNR",$J,"GP",IBCNA,IBCNM,GPIEN)
"RTN","IBCNRPM2",57,0)
 .. ;set up list
"RTN","IBCNRPM2",58,0)
 .. S VALMCNT=VALMCNT+1
"RTN","IBCNRPM2",59,0)
 .. S X=$$SETFLD^VALM1(VALMCNT,"","NUMBER")
"RTN","IBCNRPM2",60,0)
 .. ;
"RTN","IBCNRPM2",61,0)
 .. ;group name
"RTN","IBCNRPM2",62,0)
 .. S X=$$SETFLD^VALM1(IBCNA,X,"GNAME")
"RTN","IBCNRPM2",63,0)
 .. ;
"RTN","IBCNRPM2",64,0)
 .. ;group number
"RTN","IBCNRPM2",65,0)
 .. S X=$$SETFLD^VALM1(IBCNM,X,"GNUM")
"RTN","IBCNRPM2",66,0)
 .. ;
"RTN","IBCNRPM2",67,0)
 .. ;group plan type
"RTN","IBCNRPM2",68,0)
 .. S X=$$SETFLD^VALM1($$EXPAND^IBTRE(355.3,.09,$P(IBDAT,"^",2)),X,"GTYP")
"RTN","IBCNRPM2",69,0)
 .. ;
"RTN","IBCNRPM2",70,0)
 .. ;pharmacy plan ID
"RTN","IBCNRPM2",71,0)
 .. S IBCNRPP=$P($G(IBDAT),U)
"RTN","IBCNRPM2",72,0)
 .. I IBCNRPP'="" S IBCNRPP=$$GET1^DIQ(366.03,IBCNRPP_",",.01,"E")
"RTN","IBCNRPM2",73,0)
 .. S X=$$SETFLD^VALM1(IBCNRPP,X,"PHRM")
"RTN","IBCNRPM2",74,0)
 .. ;
"RTN","IBCNRPM2",75,0)
 .. ; set up tmp for SEL
"RTN","IBCNRPM2",76,0)
 .. S ^TMP("IBCNR",$J,"PM",VALMCNT,0)=X
"RTN","IBCNRPM2",77,0)
 .. S ^TMP("IBCNR",$J,"PM","IDX",VALMCNT,VALMCNT)=GPIEN
"RTN","IBCNRPM2",78,0)
 ;
"RTN","IBCNRPM2",79,0)
 Q
"RTN","IBCNRPM2",80,0)
 ;
"RTN","IBCNRPM2",81,0)
HELP ; -- help code
"RTN","IBCNRPM2",82,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCNRPM2",83,0)
 Q
"RTN","IBCNRPM2",84,0)
 ;
"RTN","IBCNRPM2",85,0)
EXIT ; -- exit code
"RTN","IBCNRPM2",86,0)
 K ^TMP("IBCNR",$J,"PM"),VALMBCK,VALMY
"RTN","IBCNRPM2",87,0)
 K IBIND,IBMULT,IBW,IBX
"RTN","IBCNRPM2",88,0)
 D CLEAN^VALM10,CLEAR^VALM1
"RTN","IBCNRPM2",89,0)
 Q
"RTN","IBCNRPM2",90,0)
 ;
"RTN","IBCNRPM2",91,0)
EXPND ; -- expand code
"RTN","IBCNRPM2",92,0)
 Q
"RTN","IBCNRPM2",93,0)
 ;
"RTN","IBCNRPM2",94,0)
SEL ;  Select Plan
"RTN","IBCNRPM2",95,0)
 ;
"RTN","IBCNRPM2",96,0)
 D S1
"RTN","IBCNRPM2",97,0)
 ;
"RTN","IBCNRPM2",98,0)
 I 'IBX Q  ; no group selected
"RTN","IBCNRPM2",99,0)
 ;
"RTN","IBCNRPM2",100,0)
 N DA,DIC,DIE,DR,D,IBSEL
"RTN","IBCNRPM2",101,0)
 S IBX=0
"RTN","IBCNRPM2",102,0)
 F  S IBX=$O(VALMY(IBX)) Q:IBX=""  D
"RTN","IBCNRPM2",103,0)
 . S IBSEL=+$G(^TMP("IBCNR",$J,"PM","IDX",IBX,IBX))
"RTN","IBCNRPM2",104,0)
 . S DA=IBSEL,DIC="^IBA(355.3,",DIE=DIC,DR="6.01////^S X="_IBCNRP
"RTN","IBCNRPM2",105,0)
 . D ^DIE
"RTN","IBCNRPM2",106,0)
 D GIPF^IBCNRPM1
"RTN","IBCNRPM2",107,0)
 D INIT
"RTN","IBCNRPM2",108,0)
 ;
"RTN","IBCNRPM2",109,0)
 S IBX=0 F  S IBX=$O(VALMY(IBX)) Q:'IBX  D
"RTN","IBCNRPM2",110,0)
 . S ^TMP($J,"IBSEL",+$G(^TMP("IBCNR",$J,"PM","IDX",IBX,IBX)))=""
"RTN","IBCNRPM2",111,0)
 ;
"RTN","IBCNRPM2",112,0)
 Q
"RTN","IBCNRPM2",113,0)
 ;
"RTN","IBCNRPM2",114,0)
DEL ; remove a plan from a group
"RTN","IBCNRPM2",115,0)
 D S1
"RTN","IBCNRPM2",116,0)
 ;
"RTN","IBCNRPM2",117,0)
 I 'IBX Q  ; no group selected
"RTN","IBCNRPM2",118,0)
 ;
"RTN","IBCNRPM2",119,0)
 NEW DA,DIC,DIE,DR,IBSEL
"RTN","IBCNRPM2",120,0)
 S IBX=0
"RTN","IBCNRPM2",121,0)
 F  S IBX=$O(VALMY(IBX)) Q:IBX=""  D
"RTN","IBCNRPM2",122,0)
 . S IBSEL=+$G(^TMP("IBCNR",$J,"PM","IDX",IBX,IBX))
"RTN","IBCNRPM2",123,0)
 . S DA=IBSEL,DIC="^IBA(355.3,",DIE=DIC,DR="6.01///@"
"RTN","IBCNRPM2",124,0)
 . D ^DIE
"RTN","IBCNRPM2",125,0)
 D GIPF^IBCNRPM1
"RTN","IBCNRPM2",126,0)
 D INIT
"RTN","IBCNRPM2",127,0)
 ;
"RTN","IBCNRPM2",128,0)
 S IBX=0 F  S IBX=$O(VALMY(IBX)) Q:'IBX  S ^TMP($J,"IBDEL",+$G(^TMP("IBCNR",$J,"PM","IDX",IBX,IBX)))=""
"RTN","IBCNRPM2",129,0)
 ;
"RTN","IBCNRPM2",130,0)
 Q
"RTN","IBCNRPM2",131,0)
 ;
"RTN","IBCNRPM2",132,0)
S1 N DIR,DIRUT,DUOUT,DTOUT,DIROUT,IBOK,IBQUIT,Y,X
"RTN","IBCNRPM2",133,0)
 D EN^VALM2($G(XQORNOD(0))),FULL^VALM1
"RTN","IBCNRPM2",134,0)
 S IBX=$O(VALMY(0)),VALMBCK="R"
"RTN","IBCNRPM2",135,0)
 ;
"RTN","IBCNRPM2",136,0)
 I 'IBX W !!,"No group selected!" D PAUSE^VALM1 Q
"RTN","IBCNRPM2",137,0)
 I 'IBMULT D  G SPQ
"RTN","IBCNRPM2",138,0)
 . D OK^IBCNSM3
"RTN","IBCNRPM2",139,0)
 . I IBQUIT S VALMBCK="Q" Q
"RTN","IBCNRPM2",140,0)
 . I IBOK S IBSEL=+$G(^TMP("IBCNR",$J,"PM","IDX",IBX)),VALMBCK="Q"
"RTN","IBCNRPM2",141,0)
 ;
"RTN","IBCNRPM2",142,0)
 ;S IBSEL=+$G(^TMP("IBCNR",$J,"PM","IDX",IBX))
"RTN","IBCNRPM2",143,0)
 ;Q
"RTN","IBCNRPM2",144,0)
 ;
"RTN","IBCNRPM2",145,0)
SPQ ;
"RTN","IBCNRPM2",146,0)
 S DIR(0)="SB^Y:YES;N:NO",DIR("B")="NO",DIR("A")="OK to Continue? "
"RTN","IBCNRPM2",147,0)
 D ^DIR K DIR
"RTN","IBCNRPM2",148,0)
 I $G(Y)="^" S IBX="" Q
"RTN","IBCNRPM2",149,0)
 I $G(Y(0))="NO" S IBX=""
"RTN","IBCNRPM2",150,0)
 Q
"RTN","IBCNRRP3")
0^23^B58130731
"RTN","IBCNRRP3",1,0)
IBCNRRP3 ;BHAM ISC/CMW - GROUP PLAN WORKSHEET REPORT PRINT ;03-MAR-2004
"RTN","IBCNRRP3",2,0)
 ;;2.0;INTEGRATED BILLING;**251,276,516,550**;21-MAR-94;Build 25
"RTN","IBCNRRP3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRRP3",4,0)
 ;
"RTN","IBCNRRP3",5,0)
 ; ePHARM GROUP PLAN WORKSHEET REPORT
"RTN","IBCNRRP3",6,0)
 ;
"RTN","IBCNRRP3",7,0)
 ; Called by IBCNRRP1
"RTN","IBCNRRP3",8,0)
 ;
"RTN","IBCNRRP3",9,0)
 ; Input variables from IBCNRRP1 and IBCNRRP2:
"RTN","IBCNRRP3",10,0)
 ;   IBCNRRTN = "IBCNRRP1"
"RTN","IBCNRRP3",11,0)
 ;   IBCNRSPC("BEGDT") = Start Date for dt range
"RTN","IBCNRRP3",12,0)
 ;   IBCNRSPC("ENDDT") = End Date for dt range
"RTN","IBCNRRP3",13,0)
 ;   IBCNRSPC("SORT") = 1 - By Insurance/Group; 2 - Total Claims; 
"RTN","IBCNRRP3",14,0)
 ;                      3 - Total Charges; 4 - Exceptions
"RTN","IBCNRRP3",15,0)
 ;   IBCNRSPC("MATCH") = 1 - Matched Only; 0 - All;
"RTN","IBCNRRP3",16,0)
 ;    
"RTN","IBCNRRP3",17,0)
 ;   ^TMP(IBCNRRTN,1); ^TMP(IBCNRRTN,2); ^TMP(IBCNRRTN,3)
"RTN","IBCNRRP3",18,0)
 ; Must call at appropriate tag
"RTN","IBCNRRP3",19,0)
 Q
"RTN","IBCNRRP3",20,0)
 ;
"RTN","IBCNRRP3",21,0)
 ;
"RTN","IBCNRRP3",22,0)
EN(IBCNRRTN,IBCNRSPC) ; Entry pt.
"RTN","IBCNRRP3",23,0)
 ;
"RTN","IBCNRRP3",24,0)
 ; Init vars
"RTN","IBCNRRP3",25,0)
 N CRT,MAXCNT,IBPGC,IBBDT,IBEDT,IBMAT,IBPY,IBPXT,IBSRT,IBDTL
"RTN","IBCNRRP3",26,0)
 N X,Y,DIR,DTOUT,DUOUT,LIN,TOTALS
"RTN","IBCNRRP3",27,0)
 ;
"RTN","IBCNRRP3",28,0)
 S IBBDT=$G(IBCNRSPC("BEGDT"))
"RTN","IBCNRRP3",29,0)
 S IBEDT=$G(IBCNRSPC("ENDDT"))
"RTN","IBCNRRP3",30,0)
 S IBSRT=$G(IBCNRSPC("SORT"))
"RTN","IBCNRRP3",31,0)
 S IBMAT=$G(IBCNRSPC("MATCH"))
"RTN","IBCNRRP3",32,0)
 S (IBPXT,IBPGC)=0
"RTN","IBCNRRP3",33,0)
 ;
"RTN","IBCNRRP3",34,0)
 ; Determine IO parameters
"RTN","IBCNRRP3",35,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNRRP3",36,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNRRP3",37,0)
 ;
"RTN","IBCNRRP3",38,0)
 D PRINT(IBCNRRTN,IBBDT,IBEDT,IBSRT,MAXCNT,IBPGC,IBMAT)
"RTN","IBCNRRP3",39,0)
 I $G(ZTSTOP)!IBPXT G EXIT3
"RTN","IBCNRRP3",40,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNRRP3",41,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNRRP3",42,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNRRP3",43,0)
 ;
"RTN","IBCNRRP3",44,0)
EXIT3 ; Exit pt
"RTN","IBCNRRP3",45,0)
 Q
"RTN","IBCNRRP3",46,0)
 ;
"RTN","IBCNRRP3",47,0)
PRINT(RTN,BDT,EDT,SRT,MAX,PGC,MAT) ; Print data
"RTN","IBCNRRP3",48,0)
 ; Input params: RNT = "IBCNRRP1" - routine, BDT = starting dt,
"RTN","IBCNRRP3",49,0)
 ;  EDT = ending dt
"RTN","IBCNRRP3",50,0)
 ;  SRT = 1/2/3
"RTN","IBCNRRP3",51,0)
 ;  MAT = 1/0
"RTN","IBCNRRP3",52,0)
 ;
"RTN","IBCNRRP3",53,0)
 ; Init vars
"RTN","IBCNRRP3",54,0)
 N EORMSG,NONEMSG,TOTDASHS,DISPDATA,SORT,CT,PRT1,PRT2
"RTN","IBCNRRP3",55,0)
 ;
"RTN","IBCNRRP3",56,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNRRP3",57,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNRRP3",58,0)
 S $P(TOTDASHS,"=",89)=""
"RTN","IBCNRRP3",59,0)
 S CT=0
"RTN","IBCNRRP3",60,0)
 ;
"RTN","IBCNRRP3",61,0)
 I '$D(^XTMP(RTN)) D HEADER W !,?(132-$L(NONEMSG)\2),NONEMSG,!! G PRINT2
"RTN","IBCNRRP3",62,0)
 ;
"RTN","IBCNRRP3",63,0)
 ; Build lines of data to display
"RTN","IBCNRRP3",64,0)
 K ^TMP("IBCNR",$J,"RPTDATA")
"RTN","IBCNRRP3",65,0)
 D DATA
"RTN","IBCNRRP3",66,0)
 K ^TMP("IBCNR",$J,"DSPDATA")
"RTN","IBCNRRP3",67,0)
 D DISP
"RTN","IBCNRRP3",68,0)
 ; Display lines of response
"RTN","IBCNRRP3",69,0)
 D LINE
"RTN","IBCNRRP3",70,0)
 K ^TMP("IBCNR",$J,"DSPDATA"),^TMP("IBCNR",$J,"RPTDATA")
"RTN","IBCNRRP3",71,0)
 Q
"RTN","IBCNRRP3",72,0)
 ;
"RTN","IBCNRRP3",73,0)
PRINT2 I $G(ZTSTOP)!IBPXT G PRINTX
"RTN","IBCNRRP3",74,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!$G(IBPXT) G PRINTX
"RTN","IBCNRRP3",75,0)
 W !,?(132-$L(EORMSG)\2),EORMSG
"RTN","IBCNRRP3",76,0)
 ;
"RTN","IBCNRRP3",77,0)
PRINTX ; PRINT exit point
"RTN","IBCNRRP3",78,0)
 Q
"RTN","IBCNRRP3",79,0)
 ;
"RTN","IBCNRRP3",80,0)
HEADER ; Print header info for each page
"RTN","IBCNRRP3",81,0)
 ; Assumes vars from PRINT: CRT,PGC,IBPXT,MAX,SRT,BDT,EDT,PYR,RDTL,MAR
"RTN","IBCNRRP3",82,0)
 ; Init vars
"RTN","IBCNRRP3",83,0)
 N DIR,X,Y,DTOUT,DUOUT,OFFSET,HDR,DASHES,DASHES2,LIN
"RTN","IBCNRRP3",84,0)
 ;
"RTN","IBCNRRP3",85,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I IBPXT G HEADERX
"RTN","IBCNRRP3",86,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNRRP3",87,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNRRP3",88,0)
 . I $D(DTOUT)!$D(DUOUT) S IBPXT=1 Q
"RTN","IBCNRRP3",89,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S (ZTSTOP,IBPXT)=1 G HEADERX
"RTN","IBCNRRP3",90,0)
 S PGC=PGC+1
"RTN","IBCNRRP3",91,0)
 W @IOF,!,?1,"ePHARM GROUP PLAN WORKSHEET REPORT"
"RTN","IBCNRRP3",92,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC
"RTN","IBCNRRP3",93,0)
 S OFFSET=80-$L(HDR)
"RTN","IBCNRRP3",94,0)
 W ?OFFSET,HDR
"RTN","IBCNRRP3",95,0)
 W !,?1,"Claims with Pharmacy Coverage Sorted by: "_$S(SRT=1:"Insurance/Group",SRT=2:"Max. Total Claims",1:"Max. Total Charges")
"RTN","IBCNRRP3",96,0)
 S HDR=$$FMTE^XLFDT(BDT,"5Z")_" - "_$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNRRP3",97,0)
 S OFFSET=80-$L(HDR)\2
"RTN","IBCNRRP3",98,0)
 W !,?OFFSET,HDR
"RTN","IBCNRRP3",99,0)
 ; Display column headings
"RTN","IBCNRRP3",100,0)
 W !,?1,"Insurance Company Name",?40,"Insurance Company Address"
"RTN","IBCNRRP3",101,0)
 W !,?3,"Group Name/Number",?43,"VA PLAN ID",?60," BIN",?70,"PCN"
"RTN","IBCNRRP3",102,0)
 S $P(DASHES,"=",80)=""
"RTN","IBCNRRP3",103,0)
 W !,?1,DASHES
"RTN","IBCNRRP3",104,0)
 ;
"RTN","IBCNRRP3",105,0)
HEADERX ; HEADER exit pt
"RTN","IBCNRRP3",106,0)
 Q
"RTN","IBCNRRP3",107,0)
 ;
"RTN","IBCNRRP3",108,0)
LINE ; Print line of data
"RTN","IBCNRRP3",109,0)
 ; Assumes vars from PRINT: PGC,IBPXT,MAX
"RTN","IBCNRRP3",110,0)
 ; Init vars
"RTN","IBCNRRP3",111,0)
 N CT,II
"RTN","IBCNRRP3",112,0)
 ;
"RTN","IBCNRRP3",113,0)
 S CT=+$O(^TMP("IBCNR",$J,"DSPDATA",""),-1)
"RTN","IBCNRRP3",114,0)
 I $Y+1+CT>MAX D HEADER I $G(ZTSTOP)!IBPXT G LINEX
"RTN","IBCNRRP3",115,0)
 F II=1:1:CT D  Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNRRP3",116,0)
 . I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNRRP3",117,0)
 . W !,?1,^TMP("IBCNR",$J,"DSPDATA",II)
"RTN","IBCNRRP3",118,0)
 . Q
"RTN","IBCNRRP3",119,0)
 ;
"RTN","IBCNRRP3",120,0)
LINEX ; LINE exit pt
"RTN","IBCNRRP3",121,0)
 Q
"RTN","IBCNRRP3",122,0)
 ;
"RTN","IBCNRRP3",123,0)
DATA ; Gather and format lines of data to be printed
"RTN","IBCNRRP3",124,0)
 ; Assumes vars from PRINT: RTN,SRT,SRT,RDTL,CT,PRT1,PRT2
"RTN","IBCNRRP3",125,0)
 ; Init vars
"RTN","IBCNRRP3",126,0)
 ;
"RTN","IBCNRRP3",127,0)
 ;Loop through and sort TMP file
"RTN","IBCNRRP3",128,0)
 N CNT,IBINS,IBINSNM,IBGRP,IBGRPNM,IBGRPNB,RPDT,RPTOT,RPTCNT,RPTCHG
"RTN","IBCNRRP3",129,0)
 ;Get new HIPAA fields, IBGRP0 no longer needed - IB*2*516
"RTN","IBCNRRP3",130,0)
 ;N IBGRP0,IBGRP6,IBGRPNM,IBPLBIN,IBPLNNM,IBPLPCN,IBPPIEN
"RTN","IBCNRRP3",131,0)
 N IBGRP6,IBGRPNM,IBPLBIN,IBPLNID,IBPLPCN,IBPPIEN
"RTN","IBCNRRP3",132,0)
 S IBINS=0,CNT=0
"RTN","IBCNRRP3",133,0)
 F  S IBINS=$O(^XTMP(RTN,IBINS)) Q:IBINS=""  D
"RTN","IBCNRRP3",134,0)
 . ;get insurance company name
"RTN","IBCNRRP3",135,0)
 . S IBINSNM=$P($G(^DIC(36,IBINS,0)),U)
"RTN","IBCNRRP3",136,0)
 . I IBINSNM="" S IBINSNM="NO NAME EXISTS"
"RTN","IBCNRRP3",137,0)
 . S IBGRP=0
"RTN","IBCNRRP3",138,0)
 . F  S IBGRP=$O(^XTMP(RTN,IBINS,IBGRP)) Q:IBGRP=""  D
"RTN","IBCNRRP3",139,0)
 .. ;get group info
"RTN","IBCNRRP3",140,0)
 .. ;S IBGRP0=$G(^IBA(355.3,IBGRP,0))
"RTN","IBCNRRP3",141,0)
 .. ;get pharmacy plan info
"RTN","IBCNRRP3",142,0)
 .. S IBGRP6=$G(^IBA(355.3,IBGRP,6))
"RTN","IBCNRRP3",143,0)
 .. I 'IBGRP6,$G(MAT) Q  ; Matched only
"RTN","IBCNRRP3",144,0)
 .. ;I IBGRP0 D
"RTN","IBCNRRP3",145,0)
 .. I $$GET1^DIQ(355.3,IBGRP,2.01)]"" D
"RTN","IBCNRRP3",146,0)
 ... S (IBGRPNM,IBGRPNB)=""
"RTN","IBCNRRP3",147,0)
 ... ;S IBGRPNM=$P($G(IBGRP0),U,3) I $G(IBGRPNM)="" S IBGRPNM="<blank>"
"RTN","IBCNRRP3",148,0)
 ... ;S IBGRPNB=$P($G(IBGRP0),U,4) I $G(IBGRPNB)="" S IBGRPNB="<blank>"
"RTN","IBCNRRP3",149,0)
 ... S IBGRPNM=$$GET1^DIQ(355.3,IBGRP,2.01) I $G(IBGRPNM)="" S IBGRPNM="<blank>"
"RTN","IBCNRRP3",150,0)
 ... S IBGRPNB=$$GET1^DIQ(355.3,IBGRP,2.02) I $G(IBGRPNB)="" S IBGRPNB="<blank>"
"RTN","IBCNRRP3",151,0)
 ... S RPDT=IBGRPNB
"RTN","IBCNRRP3",152,0)
 .. I IBGRP6 D
"RTN","IBCNRRP3",153,0)
 ... S (IBPPIEN,IBPLNID,IBPLPCN)=""
"RTN","IBCNRRP3",154,0)
 ... S IBPPIEN=$P($G(IBGRP6),U)
"RTN","IBCNRRP3",155,0)
 ... S IBPLNID=$P($G(^IBCNR(366.03,IBPPIEN,0)),U,1)
"RTN","IBCNRRP3",156,0)
 ... S IBPLBIN=$P($G(^IBCNR(366.03,IBPPIEN,10)),U,2)
"RTN","IBCNRRP3",157,0)
 ... S IBPLPCN=$P($G(^IBCNR(366.03,IBPPIEN,10)),U,3)
"RTN","IBCNRRP3",158,0)
 ... S RPDT=$G(RPDT)_U_$G(IBPLNID)_U_$G(IBPLBIN)_U_$G(IBPLPCN)
"RTN","IBCNRRP3",159,0)
 .. E  S RPDT=$G(RPDT)_U_U_U
"RTN","IBCNRRP3",160,0)
 .. S RPDT=$G(RPDT)_U_$P($G(IBGRP6),U,2,3)
"RTN","IBCNRRP3",161,0)
 .. S RPTOT=^XTMP(RTN,IBINS,IBGRP)
"RTN","IBCNRRP3",162,0)
 .. S RPTCNT=$P(RPTOT,U),RPTCHG=$P(RPTOT,U,2)
"RTN","IBCNRRP3",163,0)
 .. I SRT=1 D  Q
"RTN","IBCNRRP3",164,0)
 ... S ^TMP("IBCNR",$J,"RPTDATA",SRT,IBINSNM,IBINS,IBGRPNM,IBGRP)=$G(RPDT)
"RTN","IBCNRRP3",165,0)
 .. I SRT=2 D  Q
"RTN","IBCNRRP3",166,0)
 ... S ^TMP("IBCNR",$J,"RPTDATA",-$G(RPTCNT),IBINSNM,IBINS,IBGRPNM,IBGRP)=$G(RPDT)
"RTN","IBCNRRP3",167,0)
 .. I SRT=3 D  Q
"RTN","IBCNRRP3",168,0)
 ... S ^TMP("IBCNR",$J,"RPTDATA",-$G(RPTCHG),IBINSNM,IBINS,IBGRPNM,IBGRP)=$G(RPDT)
"RTN","IBCNRRP3",169,0)
 .. I SRT=4 D  Q
"RTN","IBCNRRP3",170,0)
 ... I '$G(IBGRP6) Q
"RTN","IBCNRRP3",171,0)
 ... N OK S OK=1
"RTN","IBCNRRP3",172,0)
 ... I $G(IBPLBIN)'="",$P(IBGRP6,U,2)'="",IBPLBIN'=$P(IBGRP6,U,2) S OK=0
"RTN","IBCNRRP3",173,0)
 ... I $G(IBPLPCN)'="",$P(IBGRP6,U,3)'="",IBPLPCN'=$P(IBGRP6,U,3) S OK=0
"RTN","IBCNRRP3",174,0)
 ... I 'OK S ^TMP("IBCNR",$J,"RPTDATA",SRT,IBINSNM,IBINS,IBGRPNM,IBGRP)=$G(RPDT)
"RTN","IBCNRRP3",175,0)
 Q
"RTN","IBCNRRP3",176,0)
 ;
"RTN","IBCNRRP3",177,0)
DISP ;set up display data
"RTN","IBCNRRP3",178,0)
 N CNT,DISP1,DISP2,DISP3,DISP4,DISP5,DISPD,DASHES2
"RTN","IBCNRRP3",179,0)
 N IBCNADR,IBCIN11,IBCINST,I
"RTN","IBCNRRP3",180,0)
 S DISP1="",CNT=0,$P(DASHES2,"-",80)=""
"RTN","IBCNRRP3",181,0)
 F  S DISP1=$O(^TMP("IBCNR",$J,"RPTDATA",DISP1)) Q:DISP1=""  D
"RTN","IBCNRRP3",182,0)
 . S DISP2=""
"RTN","IBCNRRP3",183,0)
 . F  S DISP2=$O(^TMP("IBCNR",$J,"RPTDATA",DISP1,DISP2)) Q:DISP2=""  D
"RTN","IBCNRRP3",184,0)
 .. S DISP3=0
"RTN","IBCNRRP3",185,0)
 .. F  S DISP3=$O(^TMP("IBCNR",$J,"RPTDATA",DISP1,DISP2,DISP3)) Q:DISP3=""  D
"RTN","IBCNRRP3",186,0)
 ... S DISP4=""
"RTN","IBCNRRP3",187,0)
 ... F  S DISP4=$O(^TMP("IBCNR",$J,"RPTDATA",DISP1,DISP2,DISP3,DISP4)) Q:DISP4=""  D
"RTN","IBCNRRP3",188,0)
 .... S DISP5=0
"RTN","IBCNRRP3",189,0)
 .... F  S DISP5=$O(^TMP("IBCNR",$J,"RPTDATA",DISP1,DISP2,DISP3,DISP4,DISP5)) Q:DISP5=""  D
"RTN","IBCNRRP3",190,0)
 ..... S DISPD=$G(^TMP("IBCNR",$J,"RPTDATA",DISP1,DISP2,DISP3,DISP4,DISP5))
"RTN","IBCNRRP3",191,0)
 ..... ;get insurance addr
"RTN","IBCNRRP3",192,0)
 ..... S IBCIN11=$G(^DIC(36,DISP3,.11))
"RTN","IBCNRRP3",193,0)
 ..... S IBCINST=$S($P(IBCIN11,U,5)="":"--",1:$P($G(^DIC(5,$P(IBCIN11,U,5),0)),U,2))
"RTN","IBCNRRP3",194,0)
 ..... S IBCNADR=$E($P(IBCIN11,U),1,15)_","_$E($P(IBCIN11,U,4),1,10)_","_IBCINST_" "_$E($P(IBCIN11,U,6),1,5)
"RTN","IBCNRRP3",195,0)
 ..... S CNT=CNT+1
"RTN","IBCNRRP3",196,0)
 ..... ;insurance co and group/plan
"RTN","IBCNRRP3",197,0)
 ..... S ^TMP("IBCNR",$J,"DSPDATA",CNT)=$$FO^IBCNEUT1(DISP2,40)_$$FO^IBCNEUT1(IBCNADR,35,"L")
"RTN","IBCNRRP3",198,0)
 ..... ;bin; pcn; and pharmacy plan ID
"RTN","IBCNRRP3",199,0)
 ..... S CNT=CNT+1
"RTN","IBCNRRP3",200,0)
 ..... S ^TMP("IBCNR",$J,"DSPDATA",CNT)=$$FO^IBCNEUT1(DISP4_"/"_$P(DISPD,U),35,"L")_$$FO^IBCNEUT1("       "_$P(DISPD,U,2),24,"L")_$$FO^IBCNEUT1(" "_$P(DISPD,U,3),10,"L")_$$FO^IBCNEUT1($P(DISPD,U,4),10,"L")
"RTN","IBCNRRP3",201,0)
 ..... S I=$$FO^IBCNEUT1("",60)_$$FO^IBCNEUT1($P(DISPD,U,5),10,"L")_$$FO^IBCNEUT1($P(DISPD,U,6),10,"L")
"RTN","IBCNRRP3",202,0)
 ..... I $TR(I," ")'="" S CNT=CNT+1,^TMP("IBCNR",$J,"DSPDATA",CNT)=I
"RTN","IBCNRRP3",203,0)
 ..... S CNT=CNT+1
"RTN","IBCNRRP3",204,0)
 ..... S ^TMP("IBCNR",$J,"DSPDATA",CNT)=$$FO^IBCNEUT1(DASHES2,79,"L")
"RTN","IBCNRRP3",205,0)
 ;
"RTN","IBCNRRP3",206,0)
DATAX ; DATA exit pt
"RTN","IBCNRRP3",207,0)
 K RPTDATA
"RTN","IBCNRRP3",208,0)
 Q
"RTN","IBCNRRP3",209,0)
 ;
"RTN","IBCNRU1")
0^11^B30407184
"RTN","IBCNRU1",1,0)
IBCNRU1 ;BHAM ISC/CMW - IB Utilities ;15-OCT-04
"RTN","IBCNRU1",2,0)
 ;;2.0;INTEGRATED BILLING;**251,276,435,550**;21-MAR-94;Build 25
"RTN","IBCNRU1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRU1",4,0)
 ;
"RTN","IBCNRU1",5,0)
 Q
"RTN","IBCNRU1",6,0)
 ;
"RTN","IBCNRU1",7,0)
 ;return array definition
"RTN","IBCNRU1",8,0)
 ;(1) - "A"ctive or "I"nactive flag.
"RTN","IBCNRU1",9,0)
 ;(2) - BIN #.
"RTN","IBCNRU1",10,0)
 ;(3) - PCN #.
"RTN","IBCNRU1",11,0)
 ;(4) - Vender Cert ID.
"RTN","IBCNRU1",12,0)
 ;(5) - Payer Sheets. (B1,B2,B3,E1) (comma separated string).
"RTN","IBCNRU1",13,0)
 ;(6) - Status codes (comma separated string).
"RTN","IBCNRU1",14,0)
 ;
"RTN","IBCNRU1",15,0)
STCHK(PIEN,IBARAY,ELIG) ;Review status flags for all files related to this pharmacy plan
"RTN","IBCNRU1",16,0)
 ;
"RTN","IBCNRU1",17,0)
 ;   PIEN - plan ien to file# 366.03
"RTN","IBCNRU1",18,0)
 ; IBARAY - output array pass by reference
"RTN","IBCNRU1",19,0)
 ;   ELIG - eligibility request flag
"RTN","IBCNRU1",20,0)
 ;          1=eligibility request
"RTN","IBCNRU1",21,0)
 ;          0=claim request (default)
"RTN","IBCNRU1",22,0)
 ;
"RTN","IBCNRU1",23,0)
 NEW I,IBBIN,IBPCN,IBPBM,IBPRO,IBSTA,IBPAY
"RTN","IBCNRU1",24,0)
 NEW IBAPP,IBCODE,IBCERT
"RTN","IBCNRU1",25,0)
 NEW PLN0,PLN10,AIEN,APDAT,APIEN
"RTN","IBCNRU1",26,0)
 NEW NA1,NA2,NA3,NA4,LA1,LA2,LA3,LA4,DA1,DA2,DA3,DA4
"RTN","IBCNRU1",27,0)
 ;
"RTN","IBCNRU1",28,0)
 K IBARAY
"RTN","IBCNRU1",29,0)
 S ELIG=$G(ELIG,0)
"RTN","IBCNRU1",30,0)
 ;
"RTN","IBCNRU1",31,0)
 I '$G(PIEN) S IBSTA="" D IBC(299) G EXT
"RTN","IBCNRU1",32,0)
 I '$D(^IBCNR(366.03,PIEN)) S IBSTA="" D IBC(299) G EXT
"RTN","IBCNRU1",33,0)
 ;
"RTN","IBCNRU1",34,0)
 S IBAPP="E-PHARM",IBSTA=1,IBCODE=""
"RTN","IBCNRU1",35,0)
 S PLN0=$G(^IBCNR(366.03,PIEN,0)) D
"RTN","IBCNRU1",36,0)
 . ; check Plan active
"RTN","IBCNRU1",37,0)
 . S AIEN=$O(^IBCNR(366.13,"B",IBAPP,"")) I AIEN="" Q
"RTN","IBCNRU1",38,0)
 . S APIEN=$O(^IBCNR(366.03,PIEN,3,"B",AIEN,"")) I APIEN="" Q
"RTN","IBCNRU1",39,0)
 . S APDAT=$G(^IBCNR(366.03,PIEN,3,APIEN,0))
"RTN","IBCNRU1",40,0)
 . S NA2=$P(APDAT,U,2) I NA2=0 S IBSTA="" D IBC(201)
"RTN","IBCNRU1",41,0)
 . S LA2=$P(APDAT,U,3) I LA2=0 S IBSTA="" D IBC(202)
"RTN","IBCNRU1",42,0)
 . S DA2=$P(APDAT,U,11) I DA2=1 S IBSTA="" D IBC(203)
"RTN","IBCNRU1",43,0)
 . ;
"RTN","IBCNRU1",44,0)
 . ; check pharmacy data
"RTN","IBCNRU1",45,0)
 . I '$D(^IBCNR(366.03,PIEN,10)) S IBSTA="" D IBC(599)
"RTN","IBCNRU1",46,0)
 . ;
"RTN","IBCNRU1",47,0)
 . S PLN10=$G(^IBCNR(366.03,PIEN,10)) D
"RTN","IBCNRU1",48,0)
 .. ;
"RTN","IBCNRU1",49,0)
 .. ; get BIN
"RTN","IBCNRU1",50,0)
 .. S IBBIN=$P(PLN10,U,2)
"RTN","IBCNRU1",51,0)
 .. S IBARAY(2)=IBBIN
"RTN","IBCNRU1",52,0)
 .. ;
"RTN","IBCNRU1",53,0)
 .. ; get PCN
"RTN","IBCNRU1",54,0)
 .. S IBPCN=$P(PLN10,U,3)
"RTN","IBCNRU1",55,0)
 .. S IBARAY(3)=IBPCN
"RTN","IBCNRU1",56,0)
 .. ;
"RTN","IBCNRU1",57,0)
 .. ; get PBM
"RTN","IBCNRU1",58,0)
 .. S IBPBM=$P(PLN10,U,1) D
"RTN","IBCNRU1",59,0)
 ... I 'IBPBM Q
"RTN","IBCNRU1",60,0)
 ... ;check PBM active
"RTN","IBCNRU1",61,0)
 ... S AIEN=$O(^IBCNR(366.12,"B",IBAPP,"")) I AIEN="" Q
"RTN","IBCNRU1",62,0)
 ... S APIEN=$O(^IBCNR(366.02,IBPBM,3,"B",AIEN,"")) I APIEN="" Q
"RTN","IBCNRU1",63,0)
 ... S APDAT=$G(^IBCNR(366.02,IBPBM,3,APIEN,0))
"RTN","IBCNRU1",64,0)
 ... S NA3=$P(APDAT,U,2) I NA3=0 D IBC(301) S IBSTA=""
"RTN","IBCNRU1",65,0)
 ... S LA3=$P(APDAT,U,3) I LA3=0 D IBC(302) S IBSTA=""
"RTN","IBCNRU1",66,0)
 ... S DA3=$P(APDAT,U,11) I DA3=1 D IBC(303) S IBSTA=""
"RTN","IBCNRU1",67,0)
 ... Q
"RTN","IBCNRU1",68,0)
 .. ;
"RTN","IBCNRU1",69,0)
 .. ; get Processor
"RTN","IBCNRU1",70,0)
 .. S IBPRO=$P(PLN10,U,4) D
"RTN","IBCNRU1",71,0)
 ... I 'IBPRO Q
"RTN","IBCNRU1",72,0)
 ... ;check Processor active flags here
"RTN","IBCNRU1",73,0)
 ... S AIEN=$O(^IBCNR(366.11,"B",IBAPP,"")) I AIEN="" Q
"RTN","IBCNRU1",74,0)
 ... S APIEN=$O(^IBCNR(366.01,IBPRO,3,"B",AIEN,"")) I APIEN="" Q
"RTN","IBCNRU1",75,0)
 ... S APDAT=$G(^IBCNR(366.01,IBPRO,3,APIEN,0))
"RTN","IBCNRU1",76,0)
 ... S NA4=$P(APDAT,U,2) I NA4=0 D IBC(401) S IBSTA=""
"RTN","IBCNRU1",77,0)
 ... S LA4=$P(APDAT,U,3) I LA4=0 D IBC(402) S IBSTA=""
"RTN","IBCNRU1",78,0)
 ... S DA4=$P(APDAT,U,11) I DA4=1 D IBC(403) S IBSTA=""
"RTN","IBCNRU1",79,0)
 ... Q
"RTN","IBCNRU1",80,0)
 .. ;
"RTN","IBCNRU1",81,0)
 .. ; get Vender Cert
"RTN","IBCNRU1",82,0)
 .. S IBCERT=$P(PLN10,U,6)
"RTN","IBCNRU1",83,0)
 .. S IBARAY(4)=IBCERT
"RTN","IBCNRU1",84,0)
 .. ;
"RTN","IBCNRU1",85,0)
 .. ; Check payer sheets
"RTN","IBCNRU1",86,0)
 .. N BPS,PST,PSP
"RTN","IBCNRU1",87,0)
 .. N B1,B2,B3,E1
"RTN","IBCNRU1",88,0)
 .. S PST=""
"RTN","IBCNRU1",89,0)
 .. ;
"RTN","IBCNRU1",90,0)
 .. ; check for test/production sheets
"RTN","IBCNRU1",91,0)
 .. ; get the test payer sheet first.  If nil, then get the regular payer sheet
"RTN","IBCNRU1",92,0)
 .. S (B1,B2,B3,E1)=""
"RTN","IBCNRU1",93,0)
 .. S B1=$P(PLN10,U,11),B2=$P(PLN10,U,12),B3=$P(PLN10,U,13),E1=$P(PLN10,U,14)
"RTN","IBCNRU1",94,0)
 .. I 'B1 S B1=$P(PLN10,U,7)         ; billing
"RTN","IBCNRU1",95,0)
 .. I 'B2 S B2=$P(PLN10,U,8)         ; reversal
"RTN","IBCNRU1",96,0)
 .. I 'B3 S B3=$P(PLN10,U,9)         ; rebill (not currently validated)
"RTN","IBCNRU1",97,0)
 .. I 'E1 S E1=$P(PLN10,U,15)        ; eligibility
"RTN","IBCNRU1",98,0)
 .. S PST=B1_","_B2_","_B3_","_E1
"RTN","IBCNRU1",99,0)
 .. S IBARAY(5)=PST                ; save the payer sheet iens
"RTN","IBCNRU1",100,0)
 .. ;
"RTN","IBCNRU1",101,0)
 .. ; perform payer sheet validation for claim request
"RTN","IBCNRU1",102,0)
 .. I 'ELIG D
"RTN","IBCNRU1",103,0)
 ... I 'B1,'B2 S IBSTA="" D IBC(699) Q
"RTN","IBCNRU1",104,0)
 ... I B1 D PSD(B1) I PSP=0 S IBSTA="" D IBC(601)
"RTN","IBCNRU1",105,0)
 ... I B2 D PSD(B2) I PSP=0 S IBSTA="" D IBC(602)
"RTN","IBCNRU1",106,0)
 ... I 'B1 S IBSTA="" D IBC(603)
"RTN","IBCNRU1",107,0)
 ... I 'B2 S IBSTA="" D IBC(604)
"RTN","IBCNRU1",108,0)
 ... Q
"RTN","IBCNRU1",109,0)
 .. ;
"RTN","IBCNRU1",110,0)
 .. ; perform payer sheet validation for eligibility request
"RTN","IBCNRU1",111,0)
 .. I ELIG D
"RTN","IBCNRU1",112,0)
 ... I E1 D PSD(E1) I PSP=0 S IBSTA="" D IBC(605)
"RTN","IBCNRU1",113,0)
 ... I 'E1 S IBSTA="" D IBC(606)
"RTN","IBCNRU1",114,0)
 ... Q
"RTN","IBCNRU1",115,0)
 .. Q
"RTN","IBCNRU1",116,0)
 . ;
"RTN","IBCNRU1",117,0)
 . ;check HIPAA NCPDP flag
"RTN","IBCNRU1",118,0)
 . I '$P($G(^IBE(350.9,1,11)),U,1) S IBSTA="" D IBC(999)
"RTN","IBCNRU1",119,0)
 . Q
"RTN","IBCNRU1",120,0)
 ;
"RTN","IBCNRU1",121,0)
EXT ;
"RTN","IBCNRU1",122,0)
 S IBARAY(1)=$S(IBSTA="":"I",1:"A")
"RTN","IBCNRU1",123,0)
 I IBCODE="" S IBCODE=200      ; all is well
"RTN","IBCNRU1",124,0)
 S IBARAY(6)=IBCODE
"RTN","IBCNRU1",125,0)
 Q
"RTN","IBCNRU1",126,0)
 ;
"RTN","IBCNRU1",127,0)
PSD(PS) ; check for disabled payersheet
"RTN","IBCNRU1",128,0)
 S PSP=1
"RTN","IBCNRU1",129,0)
 S BPS=$G(^BPSF(9002313.92,PS,1)) I $P(BPS,U,6)=0 S PSP=0
"RTN","IBCNRU1",130,0)
 Q
"RTN","IBCNRU1",131,0)
 ;
"RTN","IBCNRU1",132,0)
IBC(CD) ;set IBCODE
"RTN","IBCNRU1",133,0)
 I '$G(IBCODE) S IBCODE=CD Q
"RTN","IBCNRU1",134,0)
 S IBCODE=IBCODE_","_CD
"RTN","IBCNRU1",135,0)
 Q
"RTN","IBCNRU1",136,0)
 ;
"RTN","IBCNRU1",137,0)
STATAR(AR) ;
"RTN","IBCNRU1",138,0)
 ; setup status code definition array
"RTN","IBCNRU1",139,0)
 K AR
"RTN","IBCNRU1",140,0)
 ; plan
"RTN","IBCNRU1",141,0)
 S AR(200)="Plan Active"
"RTN","IBCNRU1",142,0)
 S AR(201)="Plan not active, national."
"RTN","IBCNRU1",143,0)
 S AR(202)="Plan not active, local."
"RTN","IBCNRU1",144,0)
 S AR(203)="Plan Deactivated."
"RTN","IBCNRU1",145,0)
 S AR(299)="Plan not found."
"RTN","IBCNRU1",146,0)
 ; pbm
"RTN","IBCNRU1",147,0)
 S AR(301)="PBM not active, national."
"RTN","IBCNRU1",148,0)
 S AR(302)="PBM not active, local."
"RTN","IBCNRU1",149,0)
 S AR(303)="PBM Deactivated."
"RTN","IBCNRU1",150,0)
 ; processor
"RTN","IBCNRU1",151,0)
 S AR(401)="Processor not active, national."
"RTN","IBCNRU1",152,0)
 S AR(402)="Processor not active, local."
"RTN","IBCNRU1",153,0)
 S AR(403)="Processor Deactivated."
"RTN","IBCNRU1",154,0)
 ; pharmacy plan
"RTN","IBCNRU1",155,0)
 S AR(599)="Pharmacy Plan not found."
"RTN","IBCNRU1",156,0)
 ; payer sheets
"RTN","IBCNRU1",157,0)
 S AR(601)="Billing PayerSheet Disabled."
"RTN","IBCNRU1",158,0)
 S AR(602)="Reversal PayerSheet Disabled."
"RTN","IBCNRU1",159,0)
 S AR(603)="Billing PayerSheet Not Found."
"RTN","IBCNRU1",160,0)
 S AR(604)="Reversal PayerSheet Not Found."
"RTN","IBCNRU1",161,0)
 S AR(605)="Eligibility PayerSheet Disabled."
"RTN","IBCNRU1",162,0)
 S AR(606)="Eligibility PayerSheet Not Found."
"RTN","IBCNRU1",163,0)
 S AR(699)="No Payer Sheets found."
"RTN","IBCNRU1",164,0)
 ;
"RTN","IBCNRU1",165,0)
 S AR(999)="HIPAA NCPDP Inactive."
"RTN","IBCNRU1",166,0)
 ;
"RTN","IBCNRU1",167,0)
 Q
"RTN","IBCNRZCM")
0^7^B3870682
"RTN","IBCNRZCM",1,0)
IBCNRZCM ;DAOU/DMK - Receive HL7 e-Pharmacy ZCM Segment ;23-OCT-2003
"RTN","IBCNRZCM",2,0)
 ;;2.0;INTEGRATED BILLING;**251,550**;21-MAR-94;Build 25
"RTN","IBCNRZCM",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRZCM",4,0)
 ;
"RTN","IBCNRZCM",5,0)
 ; Description
"RTN","IBCNRZCM",6,0)
 ;
"RTN","IBCNRZCM",7,0)
 ; Receive HL7 e-Pharmacy ZCM Segment
"RTN","IBCNRZCM",8,0)
 ; (Various Files) CONTACT MEANS Subfiles Update
"RTN","IBCNRZCM",9,0)
 ; (Various Files) CONTACT MEANS Subfiles listed below (INIT section)
"RTN","IBCNRZCM",10,0)
 ;
"RTN","IBCNRZCM",11,0)
 ; Entry point
"RTN","IBCNRZCM",12,0)
 ;
"RTN","IBCNRZCM",13,0)
1000 ; Control ZCM Segment processing
"RTN","IBCNRZCM",14,0)
 ;
"RTN","IBCNRZCM",15,0)
 ; Error?
"RTN","IBCNRZCM",16,0)
 ; V200 = NCPDP Processor Name Undefined
"RTN","IBCNRZCM",17,0)
 ; V300 = Pharmacy Benefits Manager (PBM) Name Undefined
"RTN","IBCNRZCM",18,0)
 ; V400 = Plan ID Undefined
"RTN","IBCNRZCM",19,0)
 ; V500 = Plan ID Undefined
"RTN","IBCNRZCM",20,0)
 I '$D(DATA),IEN=-1 D  Q
"RTN","IBCNRZCM",21,0)
 . S ERROR=$S(FILENO=366.01:"V200",FILENO=366.02:"V300",FILENO=366.03:"V400")
"RTN","IBCNRZCM",22,0)
 . I FILE["Pharmacy" S ERROR="V500"
"RTN","IBCNRZCM",23,0)
 ;
"RTN","IBCNRZCM",24,0)
 D INIT
"RTN","IBCNRZCM",25,0)
 Q
"RTN","IBCNRZCM",26,0)
 ;
"RTN","IBCNRZCM",27,0)
INIT ; Initialize ZCM Segment variables
"RTN","IBCNRZCM",28,0)
 ; 366.012  NCPDP PROCESSOR CONTACT MEANS Subfile
"RTN","IBCNRZCM",29,0)
 ; 366.022  PHARMACY BENEFITS MANAGER (PBM) CONTACT MEANS Subfile
"RTN","IBCNRZCM",30,0)
 ; 366.032  PLAN CONTACT MEANS Subfile
"RTN","IBCNRZCM",31,0)
 ; 366.0312 PLAN RX CONTACT MEANS Subfile
"RTN","IBCNRZCM",32,0)
 ;
"RTN","IBCNRZCM",33,0)
 ; Update only CONTACT MEANS Subfile?
"RTN","IBCNRZCM",34,0)
 I '$D(DATA) K DATAAP
"RTN","IBCNRZCM",35,0)
 ;
"RTN","IBCNRZCM",36,0)
 N S
"RTN","IBCNRZCM",37,0)
 ;
"RTN","IBCNRZCM",38,0)
 S FIELDNO=$S(FILE["Pharmacy"&(FILENO=366.03):12,1:2)
"RTN","IBCNRZCM",39,0)
 ;
"RTN","IBCNRZCM",40,0)
 ; .01 = PKEY
"RTN","IBCNRZCM",41,0)
 S DATACM(.01)=$G(IBSEG(3))
"RTN","IBCNRZCM",42,0)
 I DATACM(.01)[$E(HLECH,3) S DATACM(.01)=$$TRAN1^IBCNRHLU(DATACM(.01))
"RTN","IBCNRZCM",43,0)
 I IEN'=-1 S CMIEN=$$LOOKUP2^IBCNRFM1(FILENO,IEN,FIELDNO,DATACM(.01))
"RTN","IBCNRZCM",44,0)
 I IEN=-1 S CMIEN=-1
"RTN","IBCNRZCM",45,0)
 ;
"RTN","IBCNRZCM",46,0)
 ; .02 = TYPE
"RTN","IBCNRZCM",47,0)
 S DATACM(.02)=$G(IBSEG(4))
"RTN","IBCNRZCM",48,0)
 ;
"RTN","IBCNRZCM",49,0)
 S S=$G(IBSEG(5))
"RTN","IBCNRZCM",50,0)
 ;
"RTN","IBCNRZCM",51,0)
 ; .03 = TELECOMMUNICATION USE
"RTN","IBCNRZCM",52,0)
 S DATACM(.03)=$P(S,$E(HLECH,1),2)
"RTN","IBCNRZCM",53,0)
 ;
"RTN","IBCNRZCM",54,0)
 ; .04 = TELECOMMUNICATION EQUIPMENT
"RTN","IBCNRZCM",55,0)
 S DATACM(.04)=$P(S,$E(HLECH,1),3)
"RTN","IBCNRZCM",56,0)
 ;
"RTN","IBCNRZCM",57,0)
 ; .05 = EMAIL ADDRESS
"RTN","IBCNRZCM",58,0)
 S DATACM(.05)=$P(S,$E(HLECH,1),4)
"RTN","IBCNRZCM",59,0)
 ;
"RTN","IBCNRZCM",60,0)
 ; .06 = TELEPHONE NUMBER
"RTN","IBCNRZCM",61,0)
 S DATACM(.06)="("_$E($P(S,$E(HLECH,1),6),1,3)_") "_$E($P(S,$E(HLECH,1),6),4,6)_"-"_$P(S,$E(HLECH,1),7)_$S($P(S,$E(HLECH,1),8)]"":" x"_$P(S,$E(HLECH,1),8),1:"")
"RTN","IBCNRZCM",62,0)
 I DATACM(.06)="() -" S DATACM(.06)=""
"RTN","IBCNRZCM",63,0)
 ;
"RTN","IBCNRZCM",64,0)
 ; .07 = COMMENT
"RTN","IBCNRZCM",65,0)
 S DATACM(.07)=$P(S,$E(HLECH,1),9)
"RTN","IBCNRZCM",66,0)
 Q
"RTN","IBCNRZP0")
1^30
"RTN","IBCNRZPL")
0^13^B6548655
"RTN","IBCNRZPL",1,0)
IBCNRZPL ;DAOU/DMK - Receive HL7 e-Pharmacy ZPL Segment ;23-OCT-2003
"RTN","IBCNRZPL",2,0)
 ;;2.0;INTEGRATED BILLING;**251,550**;21-MAR-94;Build 25
"RTN","IBCNRZPL",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRZPL",4,0)
 ;
"RTN","IBCNRZPL",5,0)
 ; Description
"RTN","IBCNRZPL",6,0)
 ;
"RTN","IBCNRZPL",7,0)
 ; Receive HL7 e-Pharmacy ZPL Segment
"RTN","IBCNRZPL",8,0)
 ; 366.03 PLAN File Update
"RTN","IBCNRZPL",9,0)
 ;
"RTN","IBCNRZPL",10,0)
 ; Called by IBCNRHLT
"RTN","IBCNRZPL",11,0)
 ;
"RTN","IBCNRZPL",12,0)
 ; Entry point
"RTN","IBCNRZPL",13,0)
 ;
"RTN","IBCNRZPL",14,0)
1000 ; Control ZPL Segment processing
"RTN","IBCNRZPL",15,0)
 D INIT
"RTN","IBCNRZPL",16,0)
 Q
"RTN","IBCNRZPL",17,0)
 ;
"RTN","IBCNRZPL",18,0)
INIT ; Initialize ZPL Segment variables
"RTN","IBCNRZPL",19,0)
 ; 366.03 PLAN File
"RTN","IBCNRZPL",20,0)
 ;
"RTN","IBCNRZPL",21,0)
 N NAME
"RTN","IBCNRZPL",22,0)
 ;
"RTN","IBCNRZPL",23,0)
 ; .01 = ID
"RTN","IBCNRZPL",24,0)
 S DATA(.01)=$G(IBSEG(4))
"RTN","IBCNRZPL",25,0)
 ;
"RTN","IBCNRZPL",26,0)
 ; Error?
"RTN","IBCNRZPL",27,0)
 ; V405 = Plan ID Missing
"RTN","IBCNRZPL",28,0)
 I $TR(DATA(.01)," ","")="" S ERROR="V405" Q
"RTN","IBCNRZPL",29,0)
 ;
"RTN","IBCNRZPL",30,0)
 ; .02 = NAME
"RTN","IBCNRZPL",31,0)
 S DATA(.02)=$G(IBSEG(5))
"RTN","IBCNRZPL",32,0)
 ;
"RTN","IBCNRZPL",33,0)
 ; Error?
"RTN","IBCNRZPL",34,0)
 ; V410 = Plan Name Missing
"RTN","IBCNRZPL",35,0)
 I $TR(DATA(.02)," ","")="" S ERROR="V410" Q
"RTN","IBCNRZPL",36,0)
 ;
"RTN","IBCNRZPL",37,0)
 ; .04 = NAME - SHORT
"RTN","IBCNRZPL",38,0)
 S DATA(.04)=$G(IBSEG(7))
"RTN","IBCNRZPL",39,0)
 ;
"RTN","IBCNRZPL",40,0)
 ; .05 = TYPE
"RTN","IBCNRZPL",41,0)
 S DATA(.05)=$G(IBSEG(8))
"RTN","IBCNRZPL",42,0)
 ;
"RTN","IBCNRZPL",43,0)
 ; .06 = REGION
"RTN","IBCNRZPL",44,0)
 S DATA(.06)=$G(IBSEG(9))
"RTN","IBCNRZPL",45,0)
 ;
"RTN","IBCNRZPL",46,0)
 ; .07 = DATE/TIME CREATED
"RTN","IBCNRZPL",47,0)
 ; MAD = Add
"RTN","IBCNRZPL",48,0)
 I IBCNACT="MAD",IEN=-1 S DATA(.07)=DATE("NOW")
"RTN","IBCNRZPL",49,0)
 ;
"RTN","IBCNRZPL",50,0)
 ; Initialize primary contact name variables
"RTN","IBCNRZPL",51,0)
 S NAME=$G(IBSEG(10))
"RTN","IBCNRZPL",52,0)
 D NAME
"RTN","IBCNRZPL",53,0)
 ;
"RTN","IBCNRZPL",54,0)
 ; 1.01 = PRIMARY CONTACT NAME
"RTN","IBCNRZPL",55,0)
 S DATA(1.01)=NAME("NAME")
"RTN","IBCNRZPL",56,0)
 ;
"RTN","IBCNRZPL",57,0)
 ; 1.02 = PRIMARY CONTACT PREFIX
"RTN","IBCNRZPL",58,0)
 S DATA(1.02)=NAME("PREFIX")
"RTN","IBCNRZPL",59,0)
 ;
"RTN","IBCNRZPL",60,0)
 ; 1.03 = PRIMARY CONTACT DEGREE
"RTN","IBCNRZPL",61,0)
 S DATA(1.03)=NAME("DEGREE")
"RTN","IBCNRZPL",62,0)
 ;
"RTN","IBCNRZPL",63,0)
 ; Initialize alternate contact name variables
"RTN","IBCNRZPL",64,0)
 S NAME=$G(IBSEG(11))
"RTN","IBCNRZPL",65,0)
 D NAME
"RTN","IBCNRZPL",66,0)
 ;
"RTN","IBCNRZPL",67,0)
 ; 1.04 = ALTERNATE CONTACT NAME
"RTN","IBCNRZPL",68,0)
 S DATA(1.04)=NAME("NAME")
"RTN","IBCNRZPL",69,0)
 ;
"RTN","IBCNRZPL",70,0)
 ; 1.05 = ALETRNATE CONTACT PREFIX
"RTN","IBCNRZPL",71,0)
 S DATA(1.05)=NAME("PREFIX")
"RTN","IBCNRZPL",72,0)
 ;
"RTN","IBCNRZPL",73,0)
 ; 1.06 = ALTERNATE CONTACT DEGREE
"RTN","IBCNRZPL",74,0)
 S DATA(1.06)=NAME("DEGREE")
"RTN","IBCNRZPL",75,0)
 Q
"RTN","IBCNRZPL",76,0)
 ;
"RTN","IBCNRZPL",77,0)
NAME ; Initialize name variables from NAME string
"RTN","IBCNRZPL",78,0)
 S NAME("SURNAME")=$P($P(NAME,$E(HLECH,1),1),$E(HLECH,4),1)
"RTN","IBCNRZPL",79,0)
 S NAME("SURNAME PREFIX")=$P($P(NAME,$E(HLECH,1),1),$E(HLECH,4),2)
"RTN","IBCNRZPL",80,0)
 S NAME("FAMILY")=$S(NAME("SURNAME PREFIX")]"":NAME("SURNAME PREFIX")_" ",1:"")_NAME("SURNAME")
"RTN","IBCNRZPL",81,0)
 S NAME("GIVEN")=$P(NAME,$E(HLECH,1),2)
"RTN","IBCNRZPL",82,0)
 S NAME("MIDDLE")=$P(NAME,$E(HLECH,1),3)
"RTN","IBCNRZPL",83,0)
 S NAME("SUFFIX")=$P(NAME,$E(HLECH,1),4)
"RTN","IBCNRZPL",84,0)
 S NAME("NAME")=""
"RTN","IBCNRZPL",85,0)
 I NAME("FAMILY")]"" S NAME("NAME")=NAME("FAMILY")_","_NAME("GIVEN")_$S(NAME("MIDDLE")]"":" "_$E(NAME("MIDDLE"),1),1:"")_$S(NAME("SUFFIX")]"":" "_NAME("SUFFIX"),1:"")
"RTN","IBCNRZPL",86,0)
 S NAME("PREFIX")=$P(NAME,$E(HLECH,1),5)
"RTN","IBCNRZPL",87,0)
 S NAME("DEGREE")=$P(NAME,$E(HLECH,1),6)
"RTN","IBCNRZPL",88,0)
 Q
"RTN","IBCNRZPP")
0^33^B13594389
"RTN","IBCNRZPP",1,0)
IBCNRZPP ;DAOU/PHH - Receive HL7 e-Pharmacy ZPP Segment ;4-NOV-2015
"RTN","IBCNRZPP",2,0)
 ;;2.0;INTEGRATED BILLING;**550**;21-MAR-94;Build 25
"RTN","IBCNRZPP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRZPP",4,0)
 ;
"RTN","IBCNRZPP",5,0)
 ; Description
"RTN","IBCNRZPP",6,0)
 ;
"RTN","IBCNRZPP",7,0)
 ; Receive HL7 e-Pharmacy ZPP Segment
"RTN","IBCNRZPP",8,0)
 ; 366.03 PLAN File Update (Pharmacy)
"RTN","IBCNRZPP",9,0)
 ;
"RTN","IBCNRZPP",10,0)
 ; Called by IBCNRHLT
"RTN","IBCNRZPP",11,0)
 ;
"RTN","IBCNRZPP",12,0)
 ; Entry point
"RTN","IBCNRZPP",13,0)
 ;
"RTN","IBCNRZPP",14,0)
1000 ; Control ZPP Segment processing
"RTN","IBCNRZPP",15,0)
 D INIT
"RTN","IBCNRZPP",16,0)
 I $D(ERROR) Q
"RTN","IBCNRZPP",17,0)
 Q
"RTN","IBCNRZPP",18,0)
 ;
"RTN","IBCNRZPP",19,0)
INIT ; Initialize ZPP Segment variables
"RTN","IBCNRZPP",20,0)
 ; 366.03 PLAN File
"RTN","IBCNRZPP",21,0)
 ;
"RTN","IBCNRZPP",22,0)
 N NAME
"RTN","IBCNRZPP",23,0)
 ;
"RTN","IBCNRZPP",24,0)
 ; Error?
"RTN","IBCNRZPP",25,0)
 ; V505 = Plan ID Missing
"RTN","IBCNRZPP",26,0)
 I $TR($G(IBSEG(3))," ","") S ERROR="V505" Q
"RTN","IBCNRZPP",27,0)
 ;
"RTN","IBCNRZPP",28,0)
 ; 10.01 = PHARMACY BENEFITS MANAGER NAME (pointer - 366.02)
"RTN","IBCNRZPP",29,0)
 S DATA(10.01)=$G(IBSEG(4))
"RTN","IBCNRZPP",30,0)
 I DATA(10.01)]"" S DATA(10.01)=$$LOOKUP1^IBCNRFM1(366.02,DATA(10.01))
"RTN","IBCNRZPP",31,0)
 ;
"RTN","IBCNRZPP",32,0)
 ; Error?
"RTN","IBCNRZPP",33,0)
 ; V510 = Pharmacy Benefits Manager (PBM) Undefined
"RTN","IBCNRZPP",34,0)
 I DATA(10.01)=-1 S ERROR="V510" Q
"RTN","IBCNRZPP",35,0)
 ;
"RTN","IBCNRZPP",36,0)
 ; 10.02 = BANKING IDENTIFICATION NUMBER
"RTN","IBCNRZPP",37,0)
 S DATA(10.02)=$G(IBSEG(5))
"RTN","IBCNRZPP",38,0)
 ;
"RTN","IBCNRZPP",39,0)
 ; Error?
"RTN","IBCNRZPP",40,0)
 ; V515 = Plan BIN Missing
"RTN","IBCNRZPP",41,0)
 I $TR(DATA(10.02)," ","")="" S ERROR="V515" Q
"RTN","IBCNRZPP",42,0)
 ;
"RTN","IBCNRZPP",43,0)
 ; 10.03 = PROCESSOR CONTROL NUMBER (PCN)
"RTN","IBCNRZPP",44,0)
 S DATA(10.03)=$G(IBSEG(6))
"RTN","IBCNRZPP",45,0)
 ;
"RTN","IBCNRZPP",46,0)
 ; 10.04 = NCPDP PROCESSOR NAME (pointer - 366.01)
"RTN","IBCNRZPP",47,0)
 S DATA(10.04)=$G(IBSEG(7))
"RTN","IBCNRZPP",48,0)
 I DATA(10.04)]"" S DATA(10.04)=$$LOOKUP1^IBCNRFM1(366.01,DATA(10.04))
"RTN","IBCNRZPP",49,0)
 ;
"RTN","IBCNRZPP",50,0)
 ; Error?
"RTN","IBCNRZPP",51,0)
 ; V520 = NCPDP Processor Name Undefined
"RTN","IBCNRZPP",52,0)
 I DATA(10.04)=-1 S ERROR="V520" Q
"RTN","IBCNRZPP",53,0)
 ;
"RTN","IBCNRZPP",54,0)
 ; 10.05 = ENABLED?
"RTN","IBCNRZPP",55,0)
 S DATA(10.05)=$S($G(IBSEG(8))="Y":1,1:0)
"RTN","IBCNRZPP",56,0)
 ;
"RTN","IBCNRZPP",57,0)
 ; Error?
"RTN","IBCNRZPP",58,0)
 ; V525 = Plan Enabled? Missing
"RTN","IBCNRZPP",59,0)
 I $TR(DATA(10.05)," ","")="" S ERROR="V525" Q
"RTN","IBCNRZPP",60,0)
 ;
"RTN","IBCNRZPP",61,0)
 ; 10.06 = SOFTWARE VENDOR ID
"RTN","IBCNRZPP",62,0)
 S DATA(10.06)=$G(IBSEG(9))
"RTN","IBCNRZPP",63,0)
 ;
"RTN","IBCNRZPP",64,0)
 ; 10.07 = BILLING PAYER SHEET NAME (pointer - 9002313.92)
"RTN","IBCNRZPP",65,0)
 S DATA(10.07)=$G(IBSEG(10))
"RTN","IBCNRZPP",66,0)
 I DATA(10.07)]"" S DATA(10.07)=$$LOOKUP1^IBCNRFM1(9002313.92,DATA(10.07))
"RTN","IBCNRZPP",67,0)
 ;
"RTN","IBCNRZPP",68,0)
 ; Error?
"RTN","IBCNRZPP",69,0)
 ; V530 = Billing Payer Sheet Name Undefined
"RTN","IBCNRZPP",70,0)
 I DATA(10.07)=-1 S ERROR="V530" Q
"RTN","IBCNRZPP",71,0)
 ;
"RTN","IBCNRZPP",72,0)
 ; 10.08 = REVERSAL PAYER SHEET NAME (pointer - 9002313.92)
"RTN","IBCNRZPP",73,0)
 S DATA(10.08)=$G(IBSEG(11))
"RTN","IBCNRZPP",74,0)
 I DATA(10.08)]"" S DATA(10.08)=$$LOOKUP1^IBCNRFM1(9002313.92,DATA(10.08))
"RTN","IBCNRZPP",75,0)
 ;
"RTN","IBCNRZPP",76,0)
 ; Error?
"RTN","IBCNRZPP",77,0)
 ; V535 = Reversal Payer Sheet Name Undefined
"RTN","IBCNRZPP",78,0)
 I DATA(10.08)=-1 S ERROR="V535" Q
"RTN","IBCNRZPP",79,0)
 ;
"RTN","IBCNRZPP",80,0)
 ; 10.09 = REBILL PAYER SHEET NAME (pointer - 9002313.92)
"RTN","IBCNRZPP",81,0)
 S DATA(10.09)=$G(IBSEG(12))
"RTN","IBCNRZPP",82,0)
 I DATA(10.09)]"" S DATA(10.09)=$$LOOKUP1^IBCNRFM1(9002313.92,DATA(10.09))
"RTN","IBCNRZPP",83,0)
 ;
"RTN","IBCNRZPP",84,0)
 ; Error?
"RTN","IBCNRZPP",85,0)
 ; V540 = Rebill Payer Sheet Name Undefined
"RTN","IBCNRZPP",86,0)
 I DATA(10.09)=-1 S ERROR="V540" Q
"RTN","IBCNRZPP",87,0)
 ;
"RTN","IBCNRZPP",88,0)
 ; 10.1  = MAXIMUM NCPDP TRANSACTIONS
"RTN","IBCNRZPP",89,0)
 S DATA(10.1)=$G(IBSEG(13))
"RTN","IBCNRZPP",90,0)
 ;
"RTN","IBCNRZPP",91,0)
 ; 10.15 = ELIGIBILITY VERIFICATION PAYER SHEET NAME (pointer - 9002313.92)
"RTN","IBCNRZPP",92,0)
 S DATA(10.15)=$G(IBSEG(16))
"RTN","IBCNRZPP",93,0)
 I DATA(10.15)]"" S DATA(10.15)=$$LOOKUP1^IBCNRFM1(9002313.92,DATA(10.15))
"RTN","IBCNRZPP",94,0)
 ;
"RTN","IBCNRZPP",95,0)
 ; Error?
"RTN","IBCNRZPP",96,0)
 ; V545 = Eligibility Verification Payer Sheet Name Undefined
"RTN","IBCNRZPP",97,0)
 I DATA(10.15)=-1 S ERROR="V545" Q
"RTN","IBCNRZPP",98,0)
 ;
"RTN","IBCNRZPP",99,0)
 ; Initialize RX primary contact name variables
"RTN","IBCNRZPP",100,0)
 S NAME=$G(IBSEG(14))
"RTN","IBCNRZPP",101,0)
 D NAME
"RTN","IBCNRZPP",102,0)
 ;
"RTN","IBCNRZPP",103,0)
 ; 11.01 = RX PRIMARY CONTACT NAME
"RTN","IBCNRZPP",104,0)
 S DATA(11.01)=NAME("NAME")
"RTN","IBCNRZPP",105,0)
 ;
"RTN","IBCNRZPP",106,0)
 ; 11.02 = RX PRIMARY CONTACT PREFIX
"RTN","IBCNRZPP",107,0)
 S DATA(11.02)=NAME("PREFIX")
"RTN","IBCNRZPP",108,0)
 ;
"RTN","IBCNRZPP",109,0)
 ; 11.03 = RX PRIMARY CONTACT DEGREE
"RTN","IBCNRZPP",110,0)
 S DATA(11.03)=NAME("DEGREE")
"RTN","IBCNRZPP",111,0)
 ;
"RTN","IBCNRZPP",112,0)
 ; Initialize RX alternate contact name variables
"RTN","IBCNRZPP",113,0)
 S NAME=$G(IBSEG(15))
"RTN","IBCNRZPP",114,0)
 D NAME
"RTN","IBCNRZPP",115,0)
 ;
"RTN","IBCNRZPP",116,0)
 ; 11.04 = RX ALTERNATE CONTACT NAME
"RTN","IBCNRZPP",117,0)
 S DATA(11.04)=NAME("NAME")
"RTN","IBCNRZPP",118,0)
 ;
"RTN","IBCNRZPP",119,0)
 ; 11.05 = RX ALETRNATE CONTACT PREFIX
"RTN","IBCNRZPP",120,0)
 S DATA(11.05)=NAME("PREFIX")
"RTN","IBCNRZPP",121,0)
 ;
"RTN","IBCNRZPP",122,0)
 ; 11.06 = RX ALTERNATE CONTACT DEGREE
"RTN","IBCNRZPP",123,0)
 S DATA(11.06)=NAME("DEGREE")
"RTN","IBCNRZPP",124,0)
 Q
"RTN","IBCNRZPP",125,0)
 ;
"RTN","IBCNRZPP",126,0)
NAME ; Initialize name variables from NAME string
"RTN","IBCNRZPP",127,0)
 S NAME("SURNAME")=$P($P(NAME,$E(HLECH,1),1),$E(HLECH,4),1)
"RTN","IBCNRZPP",128,0)
 S NAME("SURNAME PREFIX")=$P($P(NAME,$E(HLECH,1),1),$E(HLECH,4),2)
"RTN","IBCNRZPP",129,0)
 S NAME("FAMILY")=$S(NAME("SURNAME PREFIX")]"":NAME("SURNAME PREFIX")_" ",1:"")_NAME("SURNAME")
"RTN","IBCNRZPP",130,0)
 S NAME("GIVEN")=$P(NAME,$E(HLECH,1),2)
"RTN","IBCNRZPP",131,0)
 S NAME("MIDDLE")=$P(NAME,$E(HLECH,1),3)
"RTN","IBCNRZPP",132,0)
 S NAME("SUFFIX")=$P(NAME,$E(HLECH,1),4)
"RTN","IBCNRZPP",133,0)
 S NAME("NAME")=""
"RTN","IBCNRZPP",134,0)
 I NAME("FAMILY")]"" S NAME("NAME")=NAME("FAMILY")_","_NAME("GIVEN")_$S(NAME("MIDDLE")]"":" "_$E(NAME("MIDDLE"),1),1:"")_$S(NAME("SUFFIX")]"":" "_NAME("SUFFIX"),1:"")
"RTN","IBCNRZPP",135,0)
 S NAME("PREFIX")=$P(NAME,$E(HLECH,1),5)
"RTN","IBCNRZPP",136,0)
 S NAME("DEGREE")=$P(NAME,$E(HLECH,1),6)
"RTN","IBCNRZPP",137,0)
 Q
"RTN","IBCNRZRX")
1^34
"RTN","IBNCPBB1")
0^17^B4476268
"RTN","IBNCPBB1",1,0)
IBNCPBB1 ;ALB/BDB - CONTINUATION OF ECME BACKBILLING ;24-JUN-2003
"RTN","IBNCPBB1",2,0)
 ;;2.0;INTEGRATED BILLING;**384,550**;21-MAR-94;Build 25
"RTN","IBNCPBB1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPBB1",4,0)
 ;
"RTN","IBNCPBB1",5,0)
 Q
"RTN","IBNCPBB1",6,0)
 ;
"RTN","IBNCPBB1",7,0)
PROCESS ;
"RTN","IBNCPBB1",8,0)
 N RES,IBY,IBD,IBRX,IBFIL,IBERR,IBBIL,IBPAT,IBDRUG,IBINS,IBDT,IBQ
"RTN","IBNCPBB1",9,0)
 S IBERR=0
"RTN","IBNCPBB1",10,0)
 S IBY=0 F  S IBY=$O(IBSEL(IBY)) Q:'IBY  D
"RTN","IBNCPBB1",11,0)
 . S IBD=$G(@IBREF@(IBY)) Q:IBD=""
"RTN","IBNCPBB1",12,0)
 . S IBRX=$P(IBD,U),IBFIL=+$P(IBD,U,3),IBBIL=$P(IBD,U,6)
"RTN","IBNCPBB1",13,0)
 . W !,"Submitting Rx# ",$P(IBD,U,2) W:IBFIL "Refill# ",IBFIL W:'IBFIL " (original fill)" W " ..."
"RTN","IBNCPBB1",14,0)
 . I IBBIL,'$P($G(^DGCR(399,IBBIL,"S")),U,16) D  S IBERR=IBERR+1 Q
"RTN","IBNCPBB1",15,0)
 .. W !," *** Rx# ",$P(IBD,U,2)," was previously billed."
"RTN","IBNCPBB1",16,0)
 .. W !," Please cancel the Bill No ",$P($G(^DGCR(399,IBBIL,0)),U)," before submitting the claim"
"RTN","IBNCPBB1",17,0)
 . ; Sensitive Diagnosis Drug/ROI Check
"RTN","IBNCPBB1",18,0)
 . S IBDRUG=$P(IBD,U,5)
"RTN","IBNCPBB1",19,0)
 . I $$SENS^IBNCPDR(IBDRUG) D  Q:'IBQ
"RTN","IBNCPBB1",20,0)
 .. S IBPAT=$$FILE^IBRXUTL(IBRX,2)
"RTN","IBNCPBB1",21,0)
 .. S IBDT=$P(IBD,U,4)
"RTN","IBNCPBB1",22,0)
 .. I '$$INSUR^IBBAPI(IBPAT,IBDT,"P",.IBANY,1) S IBQ=1 Q
"RTN","IBNCPBB1",23,0)
 .. S IBINS=+$G(IBANY("IBBAPI","INSUR",1,1))
"RTN","IBNCPBB1",24,0)
 .. S IBQ=$$ROICHK^IBNCPDR4(IBPAT,IBDRUG,IBINS,IBDT) D:IBQ ROICLN^IBNCPDR4("",IBRX,IBFIL)
"RTN","IBNCPBB1",25,0)
 .. I 'IBQ S IBERR=IBERR+1
"RTN","IBNCPBB1",26,0)
 . S RES=$$SUBMIT^IBNCPDPU(IBRX,IBFIL) W "  ",$S(+RES=0:"Sent through ECME",1:"Not sent")
"RTN","IBNCPBB1",27,0)
 . I +RES'=0 W !?5,"*** ECME returned status: ",$$STAT^IBNCPBB(RES) S IBERR=IBERR+1
"RTN","IBNCPBB1",28,0)
 I 'IBERR W !!,"The selected Rx(s) have been submitted to ECME",!,"for electronic billing"
"RTN","IBNCPBB1",29,0)
 Q
"RTN","IBNCPBB1",30,0)
 ;
"RTN","IBNCPBB1",31,0)
 ;IBNCPBB1
"RTN","IBNCPDP")
0^28^B14785713
"RTN","IBNCPDP",1,0)
IBNCPDP ;OAK/ELZ - APIS FOR NCPCP/ECME ;1/9/08  17:27
"RTN","IBNCPDP",2,0)
 ;;2.0;INTEGRATED BILLING;**223,276,363,383,384,411,435,452,550**;21-MAR-94;Build 25
"RTN","IBNCPDP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPDP",4,0)
 ;
"RTN","IBNCPDP",5,0)
 ;Reference to $$PSSBILSD^PSS50 supported by IA# 6245
"RTN","IBNCPDP",6,0)
 ;
"RTN","IBNCPDP",7,0)
RX(DFN,IBD) ; IB Billing Determination
"RTN","IBNCPDP",8,0)
 ; this is called by PSO for all prescriptions issued, return is
"RTN","IBNCPDP",9,0)
 ; a response to bill ECME or not with array for billing data elements
"RTN","IBNCPDP",10,0)
 ; third piece of return is an Eligibility indicator for the prescription
"RTN","IBNCPDP",11,0)
 ;
"RTN","IBNCPDP",12,0)
 ; IBD("IEN")         = Prescription IEN
"RTN","IBNCPDP",13,0)
 ;    ("FILL NUMBER") = Fill number (0 is initial)
"RTN","IBNCPDP",14,0)
 ;    ("DOS")         = Date of Service
"RTN","IBNCPDP",15,0)
 ;    ("RELEASE DATE")= Date of the Rx release in FileMan format
"RTN","IBNCPDP",16,0)
 ;    ("NDC")         = NDC number for drug
"RTN","IBNCPDP",17,0)
 ;    ("DEA")         = DEA special handling info
"RTN","IBNCPDP",18,0)
 ;    ("COST")        = cost of medication being dispensed
"RTN","IBNCPDP",19,0)
 ;    ("AO")          = Agent Orange (0,1 OR Null)
"RTN","IBNCPDP",20,0)
 ;    ("EC")          = Environmental Contaminant (0,1 OR Null)
"RTN","IBNCPDP",21,0)
 ;    ("HNC")         = Head/neck cancer (0,1 OR Null)
"RTN","IBNCPDP",22,0)
 ;    ("IR")          = Ionizing radiation (0,1 OR Null)
"RTN","IBNCPDP",23,0)
 ;    ("MST")         = Military sexual trauma (0,1 OR Null)
"RTN","IBNCPDP",24,0)
 ;    ("SC")          = Service connected (0,1 OR Null)
"RTN","IBNCPDP",25,0)
 ;    ("CV")          = Combat Veteran (0,1 OR Null)
"RTN","IBNCPDP",26,0)
 ;    ("QTY")         = Quantity of med dispensed
"RTN","IBNCPDP",27,0)
 ;    ("EPHARM")      = #9002313.56 ien (E-PHARMACY division)
"RTN","IBNCPDP",28,0)
 ;
"RTN","IBNCPDP",29,0)
 ;
"RTN","IBNCPDP",30,0)
 ; IBD("INS",n,1) = insurance array to bill in n order (see SETINSUR^IBNCPDP1 for details)
"RTN","IBNCPDP",31,0)
 ;                  file 355.3 ien (group)^bin^pcn^Payer Sheet B1^group id^
"RTN","IBNCPDP",32,0)
 ;                  cardholder id^patient relationship code^
"RTN","IBNCPDP",33,0)
 ;                  cardholder first name^cardholder last name^
"RTN","IBNCPDP",34,0)
 ;                  home plan state^Payer Sheet B2^Payer Sheet B3^
"RTN","IBNCPDP",35,0)
 ;                  Software/Vendor Cert ID ^ Ins Name^Payer Sheet E1^
"RTN","IBNCPDP",36,0)
 ;                  Payer Sheet B1 ien^B2 ien^B3 ien^E1 ien^Pharmacy Person Code
"RTN","IBNCPDP",37,0)
 ;                  
"RTN","IBNCPDP",38,0)
 ;
"RTN","IBNCPDP",39,0)
 ;    ("INS",n,2) = dispensing fee^basis of cost determination^
"RTN","IBNCPDP",40,0)
 ;                  awp or tort rate or cost^gross amount due^
"RTN","IBNCPDP",41,0)
 ;                  administrative fee^ingredient cost^usual & customary charge
"RTN","IBNCPDP",42,0)
 ;                  (see RATEPRIC^IBNCPDP1 for details)
"RTN","IBNCPDP",43,0)
 ;
"RTN","IBNCPDP",44,0)
 ;   for basis of cost determination the following is used:
"RTN","IBNCPDP",45,0)
 ;      "07" would be sent for Usual & Customary
"RTN","IBNCPDP",46,0)
 ;      "01" would be sent for AWP
"RTN","IBNCPDP",47,0)
 ;      "05" would be sent for Cost calculations
"RTN","IBNCPDP",48,0)
 ;
"RTN","IBNCPDP",49,0)
 ;    ("INS",n,3) = group name^ins co ph 3^plan ID^
"RTN","IBNCPDP",50,0)
 ;                  insurance type (V=VETERAN, T=TRICARE, C=CHAMPVA)^
"RTN","IBNCPDP",51,0)
 ;                  insurance company (#36) ien^COB field (.2) in 2.312 subfile^
"RTN","IBNCPDP",52,0)
 ;                  2.312 subfile ien (pt. insurance policy ien)^
"RTN","IBNCPDP",53,0)
 ;                  maximum NCPDP transactions (366.03,10.1)
"RTN","IBNCPDP",54,0)
 ;                  (see SETINSUR^IBNCPDP1 for details)
"RTN","IBNCPDP",55,0)
 ;
"RTN","IBNCPDP",56,0)
 N IBRES,IBNB
"RTN","IBNCPDP",57,0)
 S IBRES=$$RX^IBNCPDP1(DFN,.IBD)
"RTN","IBNCPDP",58,0)
 ;remove "Not ECME billable: " from the reason text
"RTN","IBNCPDP",59,0)
 S IBNB="Not ECME billable: "
"RTN","IBNCPDP",60,0)
 I IBRES[IBNB S IBRES=$P(IBRES,U)_U_$P($P(IBRES,U,2),IBNB,2)_U_$P(IBRES,U,3)
"RTN","IBNCPDP",61,0)
 Q IBRES
"RTN","IBNCPDP",62,0)
 ;
"RTN","IBNCPDP",63,0)
 ;
"RTN","IBNCPDP",64,0)
STORESP(DFN,IBD) ; this is an API for pharmacy/ecme to use to relay
"RTN","IBNCPDP",65,0)
 ; results of billing using the ecme software.  If electronic billing is
"RTN","IBNCPDP",66,0)
 ; successful, then bills will be established.  If not, then we will
"RTN","IBNCPDP",67,0)
 ; flag the entry in ct for paper or not billable.
"RTN","IBNCPDP",68,0)
 ;
"RTN","IBNCPDP",69,0)
 ; IBD("STATUS")       = Bill status (PAID, REJECTED,REVERSED
"RTN","IBNCPDP",70,0)
 ;                        CLOSED,RELEASED,or SUBMITTED)
"RTN","IBNCPDP",71,0)
 ;    ("DOS")          = Date of Service
"RTN","IBNCPDP",72,0)
 ;    ("PRESCRIPTION") = Prescription IEN from drug file (#52)
"RTN","IBNCPDP",73,0)
 ;    ("FILL NUMBER")  = Fill or refill number
"RTN","IBNCPDP",74,0)
 ;    ("BILLED")       = Amount billed
"RTN","IBNCPDP",75,0)
 ;    ("PAID")         = Amount paid
"RTN","IBNCPDP",76,0)
 ;    ("BCID")         = Reference number to the claim for payment
"RTN","IBNCPDP",77,0)
 ;                       BCID stands for Bill Claim ID
"RTN","IBNCPDP",78,0)
 ;    ("PLAN")         = IEN of the the entry in the GROUP INSURANCE
"RTN","IBNCPDP",79,0)
 ;                       PLAN file(#355.3)(captured from the
"RTN","IBNCPDP",80,0)
 ;                       $$RX^IBNCPDP call)
"RTN","IBNCPDP",81,0)
 ;    ("COPAY")        = Patient's copay from ECME response
"RTN","IBNCPDP",82,0)
 ;    ("RX NO")        = RX number from file 52
"RTN","IBNCPDP",83,0)
 ;    ("DRUG")         = IEN of file #50 DRUG
"RTN","IBNCPDP",84,0)
 ;    ("DAYS SUPPLY")  = Days Supply
"RTN","IBNCPDP",85,0)
 ;    ("QTY")          = Quantity Dispensed (should be from the Rx fill or refill 52/52.1)
"RTN","IBNCPDP",86,0)
 ;    ("NDC")          = NDC
"RTN","IBNCPDP",87,0)
 ;    ("CLOSE REASON") = Optional, Pointer to the IB file #356.8
"RTN","IBNCPDP",88,0)
 ;                      "CLAIMS TRACKING NON-BILLABLE REASONS"
"RTN","IBNCPDP",89,0)
 ;    ("CLOSE COMMENT")= Optional, if the close reason is defined
"RTN","IBNCPDP",90,0)
 ;                       then the Close Comment parameter may be
"RTN","IBNCPDP",91,0)
 ;                       sent to IB
"RTN","IBNCPDP",92,0)
 ;    ("DROP TO PAPER")= Optional, this parameter may be set to 1(TRUE)
"RTN","IBNCPDP",93,0)
 ;                       for certain Close Claim Reasons, indicating
"RTN","IBNCPDP",94,0)
 ;                       that that the closed episode still may be
"RTN","IBNCPDP",95,0)
 ;                       "dropped to paper" - passed to the Autobiller
"RTN","IBNCPDP",96,0)
 ;    ("RELEASE COPAY")= Optional, if the claim is being closed, setting
"RTN","IBNCPDP",97,0)
 ;                       this parameter to 1 (TRUE) indicates that the
"RTN","IBNCPDP",98,0)
 ;                       patients copay should be released off hold
"RTN","IBNCPDP",99,0)
 ;    ("DIVISION")     = Pointer to the MC DIVISION file (#40.8)
"RTN","IBNCPDP",100,0)
 ;    ("AUTH #")       = ECME approval/authorization number
"RTN","IBNCPDP",101,0)
 ;    ("CLAIMID")      = Reference Number to ECME
"RTN","IBNCPDP",102,0)
 ;    ("EPHARM")       = Optional, #9002313.56 ien (E-PHARMACY division)
"RTN","IBNCPDP",103,0)
 ;    ("RTYPE")        = Optional, rate type specified by user during
"RTN","IBNCPDP",104,0)
 ;                       manual ePharmacy processing
"RTN","IBNCPDP",105,0)
 ;    ("PRIMARY BILL") = Optional, if this is to be a secondary bill,
"RTN","IBNCPDP",106,0)
 ;                       this is the primary bill the secondary relates
"RTN","IBNCPDP",107,0)
 ;    ("PRIOR PAYMENT")= Optional, on secondary bills this is the offset
"RTN","IBNCPDP",108,0)
 ;                       to be applied from the primary payment.
"RTN","IBNCPDP",109,0)
 ;    ("RXCOB")        = Optional, COB indicator (secondary = 2)
"RTN","IBNCPDP",110,0)
 ;
"RTN","IBNCPDP",111,0)
 ;
"RTN","IBNCPDP",112,0)
 ; Return is the bill number for success or 1 if not billable.
"RTN","IBNCPDP",113,0)
 ; "0^reason" indicates not success
"RTN","IBNCPDP",114,0)
 ;
"RTN","IBNCPDP",115,0)
 ;
"RTN","IBNCPDP",116,0)
 Q $$ECME^IBNCPDP2(DFN,.IBD)
"RTN","IBNCPDP",117,0)
 ;
"RTN","IBNCPDP",118,0)
 ;
"RTN","IBNCPDP",119,0)
UPAWP(IBNDC,IBAWP,IBADT) ; used to update AWPs.  This is an API that
"RTN","IBNCPDP",120,0)
 ; pharmacy will call.
"RTN","IBNCPDP",121,0)
 ;
"RTN","IBNCPDP",122,0)
 ;  IBNDC = NDC number to update with the price.
"RTN","IBNCPDP",123,0)
 ;  IBAWP = average wholesale price of the NDC
"RTN","IBNCPDP",124,0)
 ;  IBADT  = effective date of change (optional, default it today)
"RTN","IBNCPDP",125,0)
 ;
"RTN","IBNCPDP",126,0)
 ;  return will be a positive number indicating success.
"RTN","IBNCPDP",127,0)
 ;  if it is unsuccessful, then "0^reason" will be returned.
"RTN","IBNCPDP",128,0)
 ;
"RTN","IBNCPDP",129,0)
 Q $$UPAWP^IBNCPDP3(IBNDC,IBAWP,$G(IBADT,DT))
"RTN","IBNCPDP",130,0)
 ;
"RTN","IBNCPDP",131,0)
BILLABLE(DRUG,ELIG,IBRMARK,IBBDAR) ; used to pass the ePharmacy Billable Status 
"RTN","IBNCPDP",132,0)
 ;
"RTN","IBNCPDP",133,0)
 ;Input:
"RTN","IBNCPDP",134,0)
 ;  DRUG = PRESCRIPTION File #52 IEN (required)
"RTN","IBNCPDP",135,0)
 ;  ELIG = BILLING ELIGIBILITY INDICATOR (T,C,V) field #85 of file 52 or 52.1. If not defined, assume "V".
"RTN","IBNCPDP",136,0)
 ;
"RTN","IBNCPDP",137,0)
 ;Output:
"RTN","IBNCPDP",138,0)
 ;  IBRMARK = "DRUG NOT BILLABLE" - only set if drug not billable (pass by reference)
"RTN","IBNCPDP",139,0)
 ;   IBBDAR = (optional) array values returned regarding drug file billable fields (pass by reference)
"RTN","IBNCPDP",140,0)
 ;  Function Value:   1 if drug is billable, 0 if drug is not billable
"RTN","IBNCPDP",141,0)
 ;
"RTN","IBNCPDP",142,0)
 N IBRES,EPHNODE
"RTN","IBNCPDP",143,0)
 S IBRES=0,IBRMARK="DRUG NOT BILLABLE"    ; assume not billable as default
"RTN","IBNCPDP",144,0)
 ;
"RTN","IBNCPDP",145,0)
 I '$G(DRUG) G BILLQ
"RTN","IBNCPDP",146,0)
 I $G(ELIG)="" S ELIG="V"
"RTN","IBNCPDP",147,0)
 ;
"RTN","IBNCPDP",148,0)
 S EPHNODE=$$PSSBILSD^PSS50(DRUG)        ;using PSS API to obtain this information IA# 6245
"RTN","IBNCPDP",149,0)
 ;
"RTN","IBNCPDP",150,0)
 ; set the values into the array 
"RTN","IBNCPDP",151,0)
 S IBBDAR("DRUG-BILLABLE")=$P(EPHNODE,U,1)
"RTN","IBNCPDP",152,0)
 S IBBDAR("DRUG-BILLABLE TRICARE")=$P(EPHNODE,U,2)
"RTN","IBNCPDP",153,0)
 S IBBDAR("DRUG-BILLABLE CHAMPVA")=$P(EPHNODE,U,3)
"RTN","IBNCPDP",154,0)
 ;
"RTN","IBNCPDP",155,0)
 ; If Elig is VET:
"RTN","IBNCPDP",156,0)
 ;  and ePharmacy Billable field is YES, then drug is billable.
"RTN","IBNCPDP",157,0)
 ;  Otherwise, drug is non-billable.
"RTN","IBNCPDP",158,0)
 I ELIG="V" D  G BILLQ
"RTN","IBNCPDP",159,0)
 . I $P(EPHNODE,U,1) S IBRES=1 K IBRMARK Q
"RTN","IBNCPDP",160,0)
 . Q
"RTN","IBNCPDP",161,0)
 ;
"RTN","IBNCPDP",162,0)
 ;If Elig is TRICARE:
"RTN","IBNCPDP",163,0)
 ; And ePharmacy Billable TRICARE field is YES, then drug is billable
"RTN","IBNCPDP",164,0)
 ; And ePharmacy Billable TRICARE field is NO, then drug is non-billable
"RTN","IBNCPDP",165,0)
 ; And ePharmacy Billable field is YES and ePharmacy Billable TRICARE field is unanswered, then drug is billable
"RTN","IBNCPDP",166,0)
 ; Otherwise, drug is non-billable
"RTN","IBNCPDP",167,0)
 ;
"RTN","IBNCPDP",168,0)
 I ELIG="T" D  G BILLQ
"RTN","IBNCPDP",169,0)
 . I $P(EPHNODE,U,2) S IBRES=1 K IBRMARK Q                         ; TRICARE billable true
"RTN","IBNCPDP",170,0)
 . I $P(EPHNODE,U,1),$P(EPHNODE,U,2)="" S IBRES=1 K IBRMARK Q      ; TRICARE billable unanswered + ePharm billable true
"RTN","IBNCPDP",171,0)
 . Q
"RTN","IBNCPDP",172,0)
 ;
"RTN","IBNCPDP",173,0)
 ;If Elig is CHAMPVA:
"RTN","IBNCPDP",174,0)
 ;  And ePharmacy Billable CHAMPVA field is YES, then drug is billable
"RTN","IBNCPDP",175,0)
 ;  And ePharmacy Billable CHAMPVA field is NO, then drug is non-billable
"RTN","IBNCPDP",176,0)
 ;  And ePharmacy Billable field is YES and ePharmacy Billable CHAMPVA is unanswered, then drug is billable
"RTN","IBNCPDP",177,0)
 ;  Otherwise, drug is non-billable
"RTN","IBNCPDP",178,0)
 ;
"RTN","IBNCPDP",179,0)
 I ELIG="C" D  G BILLQ
"RTN","IBNCPDP",180,0)
 . I $P(EPHNODE,U,3) S IBRES=1 K IBRMARK Q                         ; CHAMPVA billable true
"RTN","IBNCPDP",181,0)
 . I $P(EPHNODE,U,1),$P(EPHNODE,U,3)="" S IBRES=1 K IBRMARK Q      ; CHAMPVA billable unanswered + ePharm billable true
"RTN","IBNCPDP",182,0)
 . Q
"RTN","IBNCPDP",183,0)
 ;
"RTN","IBNCPDP",184,0)
BILLQ ;
"RTN","IBNCPDP",185,0)
 Q IBRES
"RTN","IBNCPDP",186,0)
 ;
"RTN","IBNCPDP1")
0^2^B179115393
"RTN","IBNCPDP1",1,0)
IBNCPDP1 ;OAK/ELZ - IB BILLING DETERMINATION PROCESSING FOR NEW RX REQUESTS ;5/22/08
"RTN","IBNCPDP1",2,0)
 ;;2.0;INTEGRATED BILLING;**223,276,339,363,383,405,384,411,434,437,435,455,452,473,494,534,550**;21-MAR-94;Build 25
"RTN","IBNCPDP1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPDP1",4,0)
 ;
"RTN","IBNCPDP1",5,0)
 ; Reference to CL^SDCO21 supported by IA# 406
"RTN","IBNCPDP1",6,0)
 ; Reference to IN5^VADPT supported by IA# 10061
"RTN","IBNCPDP1",7,0)
 ; Reference to $$MWC^PSOBPSU2 supported by IA# 4970
"RTN","IBNCPDP1",8,0)
 ;
"RTN","IBNCPDP1",9,0)
RX(DFN,IBD) ; pharmacy package call, passing in IBD by ref
"RTN","IBNCPDP1",10,0)
 ; this is called by PSO for all prescriptions issued, return is
"RTN","IBNCPDP1",11,0)
 ; a response to bill ECME or not with array for billing data elements
"RTN","IBNCPDP1",12,0)
 ;
"RTN","IBNCPDP1",13,0)
 ;warning: back-billing flag:
"RTN","IBNCPDP1",14,0)
 ;if passed IBSCRES(IBRXN,IBFIL)=1
"RTN","IBNCPDP1",15,0)
 ; - then the SC Determination is just done by the IB clerk (billable)
"RTN","IBNCPDP1",16,0)
 ; - set by routine IBNCPBB
"RTN","IBNCPDP1",17,0)
 ;
"RTN","IBNCPDP1",18,0)
 ; IBD("PLAN") - is specified only if RX API is called for billing determination for 2ndary claim.
"RTN","IBNCPDP1",19,0)
 ;
"RTN","IBNCPDP1",20,0)
 ;clean up the list of non-answered SC/Env.indicators questions and INS
"RTN","IBNCPDP1",21,0)
 K IBD("SC/EI NO ANSW"),IBD("INS")
"RTN","IBNCPDP1",22,0)
 ;
"RTN","IBNCPDP1",23,0)
 N IBTRKR,IBARR,IBADT,IBRXN,IBFIL,IBTRKRN,IBRMARK,IBANY,IBX,IBT,IBINS,IBSAVE,IBPRDATA,IBDISPFEE,IBADMINFEE
"RTN","IBNCPDP1",24,0)
 N IBFEE,IBBI,IBIT,IBPRICE,IBRS,IBRT,IBTRN,IBCHG,IBRES,IBNEEDS,IBELIG,IBDEA,IBPTYP,IBACDUTY,IBINSXRES
"RTN","IBNCPDP1",25,0)
 ;
"RTN","IBNCPDP1",26,0)
 ; eligibility verification request flag - esg 9/9/10 IB*2*435
"RTN","IBNCPDP1",27,0)
 S IBELIG=($G(IBD("RX ACTION"))="ELIG")
"RTN","IBNCPDP1",28,0)
 ;
"RTN","IBNCPDP1",29,0)
 I '$G(DFN) S IBRES="0^No DFN" G RXQ
"RTN","IBNCPDP1",30,0)
 ;
"RTN","IBNCPDP1",31,0)
 S IBRES="0^Error"
"RTN","IBNCPDP1",32,0)
 S IBADT=+$G(IBD("DOS"),DT)      ; date of service (default to today)
"RTN","IBNCPDP1",33,0)
 ;
"RTN","IBNCPDP1",34,0)
 ; -- gather all active pharmacy insurance policies for patient on date of service
"RTN","IBNCPDP1",35,0)
 D RXINS^IBNCPDPU(DFN,IBADT,.IBINS)
"RTN","IBNCPDP1",36,0)
 ;
"RTN","IBNCPDP1",37,0)
 ; -- determine rate type
"RTN","IBNCPDP1",38,0)
 S IBRT=$$RT^IBNCPDPU(DFN,IBADT,.IBINS,.IBPTYP)
"RTN","IBNCPDP1",39,0)
 ;
"RTN","IBNCPDP1",40,0)
 ; If the rate type was selected by the user for manual primary or secondary claims processing, then update IBRT
"RTN","IBNCPDP1",41,0)
 I $G(IBD("RTYPE")),$G(IBD("PLAN")) D
"RTN","IBNCPDP1",42,0)
 . S $P(IBRT,U,1)=+IBD("RTYPE")                              ; overwrite the rate type ien [1]
"RTN","IBNCPDP1",43,0)
 . S $P(IBRT,U,2)=$$COSTTYP^IBNCPUT3(+IBD("RTYPE"),IBADT)    ; overwrite the basis of cost determination [2]
"RTN","IBNCPDP1",44,0)
 . I $P(IBRT,U,3)="" S $P(IBRT,U,3)=IBPTYP                   ; overwrite eligibility if null [3]
"RTN","IBNCPDP1",45,0)
 . Q
"RTN","IBNCPDP1",46,0)
 ;
"RTN","IBNCPDP1",47,0)
 ; -- Process an eligibility verification request
"RTN","IBNCPDP1",48,0)
 I IBELIG D  G RXQ
"RTN","IBNCPDP1",49,0)
 . S IBRES=1
"RTN","IBNCPDP1",50,0)
 . D SETINSUR(IBADT,IBRT,IBELIG,.IBINS,.IBD,.IBRES)
"RTN","IBNCPDP1",51,0)
 . Q
"RTN","IBNCPDP1",52,0)
 ;
"RTN","IBNCPDP1",53,0)
 ; additional data integrity checks
"RTN","IBNCPDP1",54,0)
 S IBRXN=+$G(IBD("IEN")) I 'IBRXN S IBRES="0^No Rx IEN" G RXQ
"RTN","IBNCPDP1",55,0)
 S IBFIL=+$G(IBD("FILL NUMBER"),-1) I IBFIL<0 S IBRES="0^No fill number" G RXQ
"RTN","IBNCPDP1",56,0)
 S IBD("QTY")=+$G(IBD("QTY")) I 'IBD("QTY") S IBRES="0^No Quantity" G RXQ
"RTN","IBNCPDP1",57,0)
 ;
"RTN","IBNCPDP1",58,0)
 ; -- Gather claims tracking information if it exists
"RTN","IBNCPDP1",59,0)
 S IBTRKR=$G(^IBE(350.9,1,6))
"RTN","IBNCPDP1",60,0)
 ; date can't be before parameters
"RTN","IBNCPDP1",61,0)
 S $P(IBTRKR,U)=$S('$P(IBTRKR,U,4):0,+IBTRKR&(IBADT<+IBTRKR):0,1:IBADT)
"RTN","IBNCPDP1",62,0)
 ; already in claims tracking
"RTN","IBNCPDP1",63,0)
 S IBTRKRN=+$O(^IBT(356,"ARXFL",IBRXN,IBFIL,0))
"RTN","IBNCPDP1",64,0)
 ;
"RTN","IBNCPDP1",65,0)
 ; Gather and store insurance information in the IBD("INS") insurance array
"RTN","IBNCPDP1",66,0)
 D SETINSUR(IBADT,IBRT,IBELIG,.IBINS,.IBD,.IBRES)
"RTN","IBNCPDP1",67,0)
 I $G(IBD("NO ECME INSURANCE")) S IBINSXRES=$G(IBRES)      ; save IBRES when there are insurance errors
"RTN","IBNCPDP1",68,0)
 ;
"RTN","IBNCPDP1",69,0)
 ;for secondary billing - skip claim tracking functionality
"RTN","IBNCPDP1",70,0)
 G:$G(IBD("RXCOB"))>1 GETINS
"RTN","IBNCPDP1",71,0)
 ;
"RTN","IBNCPDP1",72,0)
 ; -- claims tracking info
"RTN","IBNCPDP1",73,0)
 I IBTRKRN,$$PAPERBIL^IBNCPNB(IBTRKRN) S IBRES="0^Existing IB Bill in CT",IBD("NO ECME INSURANCE")=1 G RXQ
"RTN","IBNCPDP1",74,0)
 ;
"RTN","IBNCPDP1",75,0)
 ; -- no pharmacy coverage, update ct if applicable, quit
"RTN","IBNCPDP1",76,0)
 I '$$PTCOV^IBCNSU3(DFN,IBADT,"PHARMACY",.IBANY) S IBRMARK=$S($G(IBANY):"SERVICE NOT COVERED",1:"NOT INSURED") D:$P(IBTRKR,U,4)=2 CT S IBRES="0^"_IBRMARK,IBD("NO ECME INSURANCE")=1 G RXQ
"RTN","IBNCPDP1",77,0)
 ;
"RTN","IBNCPDP1",78,0)
 ; Environmental Indicators Validation
"RTN","IBNCPDP1",79,0)
 ; Find out if the patient is Active Duty - IB*2*534
"RTN","IBNCPDP1",80,0)
 S IBACDUTY=$P(IBRT,U,3)="T"&$$ACDUTY^IBNCPDPU(DFN)
"RTN","IBNCPDP1",81,0)
 ; Retrieve indicators from file #52 and overwrite the indicators in IBD array
"RTN","IBNCPDP1",82,0)
 D GETINDIC^IBNCPUT2(+IBD("IEN"),.IBD)
"RTN","IBNCPDP1",83,0)
 ; Process patient exemptions if any and if not already resolved
"RTN","IBNCPDP1",84,0)
 S IBNEEDS=0 ;flag will be set to 1 if at least one of the questions wasn't answered
"RTN","IBNCPDP1",85,0)
 I $G(IBD("SC/EI OVR"))'=1,'IBACDUTY D
"RTN","IBNCPDP1",86,0)
 . D CL^SDCO21(DFN,IBADT,"",.IBARR)
"RTN","IBNCPDP1",87,0)
 . I $D(IBARR)>9 F IBX=2:1 S IBT=$P($T(EXEMPT+IBX),";;",2) Q:IBT=""  D:$D(IBARR(+IBT))
"RTN","IBNCPDP1",88,0)
 . . I $G(IBD($P(IBT,U,2)))=0 Q
"RTN","IBNCPDP1",89,0)
 . . I $G(IBD($P(IBT,U,2))) S IBRMARK=$P(IBT,U,3) Q
"RTN","IBNCPDP1",90,0)
 . . I '$G(IBSCRES(IBRXN,IBFIL)) S IBNEEDS=1 D
"RTN","IBNCPDP1",91,0)
 . . . S IBD("SC/EI NO ANSW")=$S($G(IBD("SC/EI NO ANSW"))="":$P(IBT,U,2),1:$G(IBD("SC/EI NO ANSW"))_","_$P(IBT,U,2))
"RTN","IBNCPDP1",92,0)
 I '$D(IBRMARK),IBNEEDS=1 S IBRMARK="NEEDS SC DETERMINATION"
"RTN","IBNCPDP1",93,0)
 I $D(IBRMARK) D CT S IBRES="0^"_IBRMARK G RXQ
"RTN","IBNCPDP1",94,0)
 ;
"RTN","IBNCPDP1",95,0)
 ;  -- check for drug billable
"RTN","IBNCPDP1",96,0)
 I '$$BILLABLE^IBNCPDP($G(IBD("DRUG")),$P(IBRT,U,3),.IBRMARK,.IBD) S IBRES="0^"_IBRMARK D CT G RXQ
"RTN","IBNCPDP1",97,0)
 ;
"RTN","IBNCPDP1",98,0)
 ; -- check for sensitive diagnosis drug and ROI on file
"RTN","IBNCPDP1",99,0)
 I $$SENS^IBNCPDR($G(IBD("DRUG")),.IBD),$D(IBD("INS",1,3)) D
"RTN","IBNCPDP1",100,0)
 . I '$$ROI^IBNCPDR4(DFN,$G(IBD("DRUG")),+$P($G(IBD("INS",1,3)),U,5),IBADT) D  Q
"RTN","IBNCPDP1",101,0)
 .. ;
"RTN","IBNCPDP1",102,0)
 .. ; no active ROI found for patient/drug/insurance/DOS
"RTN","IBNCPDP1",103,0)
 .. S IBRMARK="ROI NOT OBTAINED"
"RTN","IBNCPDP1",104,0)
 .. S IBRES="0^NO ACTIVE/VALID ROI FOR DRUG OR INSURANCE"      ; PSO routine PSOREJU3 contains this text
"RTN","IBNCPDP1",105,0)
 .. Q
"RTN","IBNCPDP1",106,0)
 . ;
"RTN","IBNCPDP1",107,0)
 . ; active ROI found, clear out RNB from Claims Tracking and variable IBRMARK
"RTN","IBNCPDP1",108,0)
 . D ROICLN^IBNCPDR4(IBTRKRN,IBRXN,IBFIL)
"RTN","IBNCPDP1",109,0)
 . I $G(IBRMARK)["ROI" K IBRMARK
"RTN","IBNCPDP1",110,0)
 . Q
"RTN","IBNCPDP1",111,0)
 I $D(IBRMARK) D CT G RXQ
"RTN","IBNCPDP1",112,0)
 ;
"RTN","IBNCPDP1",113,0)
 ; Clean-up the NEEDS SC DETERMINATION record if resolved
"RTN","IBNCPDP1",114,0)
 ; And check if it is non-billable in CT
"RTN","IBNCPDP1",115,0)
 I IBTRKRN D
"RTN","IBNCPDP1",116,0)
 . N IBNBR,IBNBRT
"RTN","IBNCPDP1",117,0)
 . S IBNBR=$P($G(^IBT(356,+IBTRKRN,0)),U,19) Q:'IBNBR
"RTN","IBNCPDP1",118,0)
 . S IBNBRT=$P($G(^IBE(356.8,IBNBR,0)),U) Q:IBNBRT=""
"RTN","IBNCPDP1",119,0)
 . ;
"RTN","IBNCPDP1",120,0)
 . ; if refill was deleted (not RX) and now the refill is re-entered
"RTN","IBNCPDP1",121,0)
 . ;use $$RXSTATUS^IBNCPRR instead of $G(^PSRX(IBRXN,"STA"))
"RTN","IBNCPDP1",122,0)
 . I IBNBRT="PRESCRIPTION DELETED",$$RXSTATUS^IBNCPRR(DFN,IBRXN)'=13 D  Q
"RTN","IBNCPDP1",123,0)
 . . N DIE,DA,DR
"RTN","IBNCPDP1",124,0)
 . . ; clean up REASON NOT BILLABLE and ADDITIONAL COMMENT
"RTN","IBNCPDP1",125,0)
 . . S DIE="^IBT(356,",DA=+IBTRKRN,DR=".19////@;1.08////@" D ^DIE
"RTN","IBNCPDP1",126,0)
 . ;
"RTN","IBNCPDP1",127,0)
 . ; Clean up NBR if released
"RTN","IBNCPDP1",128,0)
 . I IBNBRT="PRESCRIPTION NOT RELEASED" D:$G(IBD("RELEASE DATE"))  Q
"RTN","IBNCPDP1",129,0)
 . . N DIE,DA,DR
"RTN","IBNCPDP1",130,0)
 . . S DIE="^IBT(356,",DA=+IBTRKRN,DR=".19////@" D ^DIE
"RTN","IBNCPDP1",131,0)
 . ;
"RTN","IBNCPDP1",132,0)
 . ; Clean up 'Needs SC determ'
"RTN","IBNCPDP1",133,0)
 . I IBNBRT="NEEDS SC DETERMINATION" D  Q
"RTN","IBNCPDP1",134,0)
 . . N DIE,DA,DR
"RTN","IBNCPDP1",135,0)
 . . S DIE="^IBT(356,",DA=+IBTRKRN,DR=".19////@" D ^DIE
"RTN","IBNCPDP1",136,0)
 . ;
"RTN","IBNCPDP1",137,0)
 . ; Clean up 'DRUG NOT BILLABLE' since we made it through the $$BILLABLE function above - IB*2*550
"RTN","IBNCPDP1",138,0)
 . I IBNBRT="DRUG NOT BILLABLE" D  Q
"RTN","IBNCPDP1",139,0)
 .. N DIE,DA,DR
"RTN","IBNCPDP1",140,0)
 .. S DIE="^IBT(356,",DA=+IBTRKRN,DR=".19////@;1.08////@" D ^DIE
"RTN","IBNCPDP1",141,0)
 .. Q
"RTN","IBNCPDP1",142,0)
 . ;
"RTN","IBNCPDP1",143,0)
 . S IBRMARK=IBNBRT
"RTN","IBNCPDP1",144,0)
 I $D(IBRMARK) S IBRES="0^Non-Billable in CT: "_IBRMARK G RXQ
"RTN","IBNCPDP1",145,0)
 ;
"RTN","IBNCPDP1",146,0)
GETINS ; -- examine the insurance data for a patient
"RTN","IBNCPDP1",147,0)
 ;
"RTN","IBNCPDP1",148,0)
 ; if insurance errors were detected earlier, then restore IBRES and get out
"RTN","IBNCPDP1",149,0)
 I $G(IBD("NO ECME INSURANCE")) S IBRES=$G(IBINSXRES) G RXQ
"RTN","IBNCPDP1",150,0)
 ;
"RTN","IBNCPDP1",151,0)
RATEPRIC ; determine rates/prices to use
"RTN","IBNCPDP1",152,0)
 ;
"RTN","IBNCPDP1",153,0)
 I 'IBRT D CT S IBRES="0^Cannot determine Rate type" G RXQ
"RTN","IBNCPDP1",154,0)
 S IBBI=$$EVNTITM^IBCRU3(+IBRT,3,"PRESCRIPTION FILL",IBADT,.IBRS)
"RTN","IBNCPDP1",155,0)
 I 'IBBI,$P(IBBI,";")'="VA COST" D CT S IBRES="0^Cannot find Billable Item" G RXQ
"RTN","IBNCPDP1",156,0)
 ;
"RTN","IBNCPDP1",157,0)
 ; Check for missing NDC
"RTN","IBNCPDP1",158,0)
 I $G(IBD("NDC"))="" D CT S IBRES="0^Missing NDC" G RXQ
"RTN","IBNCPDP1",159,0)
 ;
"RTN","IBNCPDP1",160,0)
 ;1;BEDSECTION;1^
"RTN","IBNCPDP1",161,0)
 ;IBRS(1,18,5)=
"RTN","IBNCPDP1",162,0)
 S IBRS=+$O(IBRS($P(IBBI,";"),0))
"RTN","IBNCPDP1",163,0)
 S IBIT=$$ITPTR^IBCRU2($P(IBBI,";"),$S($P(IBRT,U,2)="A":$$NDC^IBNCPNB($G(IBD("NDC"))),1:"PRESCRIPTION"))
"RTN","IBNCPDP1",164,0)
 I 'IBIT,$P(IBRT,U,2)'="C" D CT S IBRES="0^Cannot find Item Pointer" G RXQ
"RTN","IBNCPDP1",165,0)
 ;8
"RTN","IBNCPDP1",166,0)
 S IBPRICE=+$$BICOST^IBCRCI(+IBRT,3,IBADT,"PRESCRIPTION FILL",+IBIT,,,$S($P(IBRT,U,2)="A":IBD("QTY"),1:1))
"RTN","IBNCPDP1",167,0)
 ;36^2991001
"RTN","IBNCPDP1",168,0)
 ;
"RTN","IBNCPDP1",169,0)
 ; return the true value of drug cost for 3rd party bill if it is zero
"RTN","IBNCPDP1",170,0)
 I IBD("COST")=0,$P($G(^DGCR(399.3,+$P(IBRT,U,1),0)),U,5) S IBD("COST")=$$RXPCT(.IBD,.BWHERE)
"RTN","IBNCPDP1",171,0)
 ;
"RTN","IBNCPDP1",172,0)
 ; get fees if any, ignore return, don't care about price, just need fees
"RTN","IBNCPDP1",173,0)
 S IBCHG=$$RATECHG^IBCRCC(+IBRS,$S($P(IBRT,U,2)'="C":1,1:IBD("QTY")*IBD("COST")),IBADT,.IBFEE)
"RTN","IBNCPDP1",174,0)
 I $P(IBRT,U,2)="C" S IBPRICE=+IBCHG
"RTN","IBNCPDP1",175,0)
 ;
"RTN","IBNCPDP1",176,0)
 S IBDISPFEE=+$P($G(IBFEE),U,1)     ; dispensing fee
"RTN","IBNCPDP1",177,0)
 S IBADMINFEE=+$P($G(IBFEE),U,2)    ; administrative fee
"RTN","IBNCPDP1",178,0)
 ;
"RTN","IBNCPDP1",179,0)
 I 'IBPRICE D CT S IBRES="0^Cannot find price for Item" G RXQ
"RTN","IBNCPDP1",180,0)
 ;
"RTN","IBNCPDP1",181,0)
 ; build pricing data string
"RTN","IBNCPDP1",182,0)
 S IBPRDATA=""
"RTN","IBNCPDP1",183,0)
 S $P(IBPRDATA,U,1)=IBDISPFEE                     ; dispensing fee
"RTN","IBNCPDP1",184,0)
 S $P(IBPRDATA,U,2)=$S($P(IBRT,U,2)="A":"01",$P(IBRT,U,2)="C":"05",1:"07")   ; basis of cost determination
"RTN","IBNCPDP1",185,0)
 S $P(IBPRDATA,U,3)=$S($P(IBRT,U,2)="C":IBD("QTY")*IBD("COST")+IBDISPFEE,$P(IBRT,U,2)="A":IBPRICE-IBDISPFEE-IBADMINFEE,1:IBPRICE)   ; basis of cost amount
"RTN","IBNCPDP1",186,0)
 S $P(IBPRDATA,U,4)=IBPRICE                       ; gross amount due
"RTN","IBNCPDP1",187,0)
 S $P(IBPRDATA,U,5)=IBADMINFEE                    ; administrative fee
"RTN","IBNCPDP1",188,0)
 S $P(IBPRDATA,U,6)=IBD("QTY")*IBD("COST")        ; ingredient cost
"RTN","IBNCPDP1",189,0)
 S $P(IBPRDATA,U,7)=IBPRICE-IBADMINFEE            ; usual & customary charge (U&C)
"RTN","IBNCPDP1",190,0)
 ;
"RTN","IBNCPDP1",191,0)
 ; store the pricing data string on each node 2 that may exist
"RTN","IBNCPDP1",192,0)
 S IBX=0 F  S IBX=$O(IBD("INS",IBX)) Q:'IBX  S IBD("INS",IBX,2)=IBPRDATA
"RTN","IBNCPDP1",193,0)
 ;
"RTN","IBNCPDP1",194,0)
 S IBRES=$S($D(IBRMARK):"0^"_IBRMARK,1:1)
"RTN","IBNCPDP1",195,0)
 I IBRES,'$G(IBD("RELEASE DATE")) S IBRMARK="PRESCRIPTION NOT RELEASED"
"RTN","IBNCPDP1",196,0)
 ;
"RTN","IBNCPDP1",197,0)
 D CT
"RTN","IBNCPDP1",198,0)
 ;
"RTN","IBNCPDP1",199,0)
RXQ ; final processing
"RTN","IBNCPDP1",200,0)
 ; set the 3rd piece of IBRES (default Vet)
"RTN","IBNCPDP1",201,0)
 S $P(IBRES,U,3)=$S($L($P($G(IBRT),U,3)):$P(IBRT,U,3),1:"V")
"RTN","IBNCPDP1",202,0)
 ;
"RTN","IBNCPDP1",203,0)
 ; possibly add entries to files 366.14 and 366.15 (not for eligibility verification requests)
"RTN","IBNCPDP1",204,0)
 I 'IBELIG D
"RTN","IBNCPDP1",205,0)
 . I IBRES D START^IBNCPDP6(IBRXN_";"_IBFIL,$P(IBRES,U,3),+IBRT)
"RTN","IBNCPDP1",206,0)
 . D LOG^IBNCPDP2("BILLABLE STATUS CHECK",IBRES)
"RTN","IBNCPDP1",207,0)
 . Q
"RTN","IBNCPDP1",208,0)
 ;
"RTN","IBNCPDP1",209,0)
 Q IBRES
"RTN","IBNCPDP1",210,0)
 ;
"RTN","IBNCPDP1",211,0)
 ;
"RTN","IBNCPDP1",212,0)
CT ; files in claims tracking
"RTN","IBNCPDP1",213,0)
 Q:$G(IBD("RXCOB"))>1  ;Claim Tracking is updated only for the primary payer (payer sequence =1)
"RTN","IBNCPDP1",214,0)
 ;If null then the payer sequence = Primary is assumed
"RTN","IBNCPDP1",215,0)
 I IBTRKR D CT^IBNCPDPU(DFN,IBRXN,IBFIL,IBADT,$G(IBRMARK))
"RTN","IBNCPDP1",216,0)
 Q
"RTN","IBNCPDP1",217,0)
 ;
"RTN","IBNCPDP1",218,0)
SETINSUR(IBADT,IBRT,IBELIG,IBINS,IBD,IBRES) ; build insurance data array
"RTN","IBNCPDP1",219,0)
 ; Input variables:
"RTN","IBNCPDP1",220,0)
 ;    IBADT - date of service/identify insurance as of this date
"RTN","IBNCPDP1",221,0)
 ;     IBRT - rate type variable - [1] rate type ien, [2] type (A/C/T), [3] eligibility (V/T/C)
"RTN","IBNCPDP1",222,0)
 ;   IBELIG - eligibility request flag (1/0)
"RTN","IBNCPDP1",223,0)
 ;    IBINS - insurance array as returned by RXINS^IBNCPDPU
"RTN","IBNCPDP1",224,0)
 ;      IBD - input/output - array entries passed in and certain array entries returned
"RTN","IBNCPDP1",225,0)
 ; Output variable:
"RTN","IBNCPDP1",226,0)
 ;    IBRES - only returned if insurance errors
"RTN","IBNCPDP1",227,0)
 ;
"RTN","IBNCPDP1",228,0)
 ; Note: if more than one insurance with the same COB then the latest insurance occurrence overrides the first one(s)
"RTN","IBNCPDP1",229,0)
 ; Example:
"RTN","IBNCPDP1",230,0)
 ; IBINS("S",1,1)=""
"RTN","IBNCPDP1",231,0)
 ; IBINS("S",1,3)="" <<--- this will be primary
"RTN","IBNCPDP1",232,0)
 ;
"RTN","IBNCPDP1",233,0)
 K IBD("INS"),IBD("NO ECME INSURANCE")
"RTN","IBNCPDP1",234,0)
 ;
"RTN","IBNCPDP1",235,0)
 N IBCNT,IBERMSG,IBRXPOL,IBT,IBX
"RTN","IBNCPDP1",236,0)
 ; IBERMSG - error message array
"RTN","IBNCPDP1",237,0)
 ; IBRXPOL - array of Rx policies found
"RTN","IBNCPDP1",238,0)
 ;
"RTN","IBNCPDP1",239,0)
 S IBX=0 F  S IBX=$O(IBINS("S",IBX)) Q:'IBX  D
"RTN","IBNCPDP1",240,0)
 . S IBT=0 F  S IBT=$O(IBINS("S",IBX,IBT)) Q:'IBT  D
"RTN","IBNCPDP1",241,0)
 .. N IBDAT,IBPL,IBINSN,IBPIEN,IBY,IBZ,IBCHNM,IBREL,IBPLNTYP
"RTN","IBNCPDP1",242,0)
 .. S IBZ=$G(IBINS(IBT,0)) Q:IBZ=""
"RTN","IBNCPDP1",243,0)
 .. S IBPL=$P(IBZ,U,18) ; plan
"RTN","IBNCPDP1",244,0)
 .. Q:'IBPL
"RTN","IBNCPDP1",245,0)
 .. Q:'$$PLCOV^IBCNSU3(IBPL,IBADT,3)           ; not a pharmacy plan
"RTN","IBNCPDP1",246,0)
 .. I $G(IBD("PLAN")) Q:IBPL'=$G(IBD("PLAN"))  ; skip other plans if we call RX API for a specific plan (IBD("PLAN"))
"RTN","IBNCPDP1",247,0)
 .. ;
"RTN","IBNCPDP1",248,0)
 .. ; at this point we have found an Rx policy.  We'll count these up later by IBX.
"RTN","IBNCPDP1",249,0)
 .. S IBRXPOL(IBX,IBT)=""
"RTN","IBNCPDP1",250,0)
 .. ;
"RTN","IBNCPDP1",251,0)
 .. S IBPLNTYP=$P($G(^IBE(355.1,+$P($G(IBINS(IBT,355.3)),U,9),0)),U,1)   ; type of plan name, insurance plan type
"RTN","IBNCPDP1",252,0)
 .. I '$G(IBD("PLAN")) I '$D(IBD("INS",IBX)),$P(IBRT,U,3)="V",(IBPLNTYP["TRICARE"!(IBPLNTYP="CHAMPVA")) S IBERMSG(IBX)=IBPLNTYP_" coverage for a Veteran" Q
"RTN","IBNCPDP1",253,0)
 .. ;
"RTN","IBNCPDP1",254,0)
 .. S IBPIEN=+$G(^IBA(355.3,+IBPL,6))
"RTN","IBNCPDP1",255,0)
 .. I 'IBPIEN S IBERMSG(IBX)="Plan not linked to the Payer" Q  ; Not linked
"RTN","IBNCPDP1",256,0)
 .. ;
"RTN","IBNCPDP1",257,0)
 .. K IBY D STCHK^IBCNRU1(IBPIEN,.IBY,IBELIG)
"RTN","IBNCPDP1",258,0)
 .. I $E($G(IBY(1)))'="A" S IBERMSG(IBX)=$$ERMSG^IBNCPNB($G(IBY(6))) Q  ; not active
"RTN","IBNCPDP1",259,0)
 .. ;
"RTN","IBNCPDP1",260,0)
 .. ; at this point we have a valid policy for this IBX
"RTN","IBNCPDP1",261,0)
 .. S IBERMSG(IBX)=""          ; no error message
"RTN","IBNCPDP1",262,0)
 .. S IBINSN=$P($G(^DIC(36,+$G(^IBA(355.3,+IBPL,0)),0)),U) ; ins name
"RTN","IBNCPDP1",263,0)
 .. S IBCHNM=$$NAME^IBCEFG1($P(IBZ,U,17))   ; standardize subscriber/cardholder name
"RTN","IBNCPDP1",264,0)
 .. S IBREL=+$P($G(IBINS(IBT,4)),U,5)       ; pointer to pharmacy relationship code file
"RTN","IBNCPDP1",265,0)
 .. ; use the #4.05 field if it exists, otherwise use the old pt relationship field #16
"RTN","IBNCPDP1",266,0)
 .. S IBREL=$S(IBREL:$$EXTERNAL^DILFD(2.312,4.05,,IBREL),1:$P(IBZ,U,16))
"RTN","IBNCPDP1",267,0)
 .. ;
"RTN","IBNCPDP1",268,0)
 .. S IBDAT=""
"RTN","IBNCPDP1",269,0)
 .. S $P(IBDAT,U,1)=IBPL       ; Plan IEN
"RTN","IBNCPDP1",270,0)
 .. S $P(IBDAT,U,2)=$G(IBY(2)) ; BIN
"RTN","IBNCPDP1",271,0)
 .. S $P(IBDAT,U,3)=$G(IBY(3)) ; PCN
"RTN","IBNCPDP1",272,0)
 .. S $P(IBDAT,U,4)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",1),0)),U) ; Payer Sheet B1 name
"RTN","IBNCPDP1",273,0)
 .. S $P(IBDAT,U,5)=$P($G(IBINS(IBT,355.3)),U,4) ; Group ID
"RTN","IBNCPDP1",274,0)
 .. S $P(IBDAT,U,6)=$P(IBZ,U,2)     ; Cardholder ID
"RTN","IBNCPDP1",275,0)
 .. S $P(IBDAT,U,7)=IBREL           ; Patient Relationship Code
"RTN","IBNCPDP1",276,0)
 .. S $P(IBDAT,U,8)=$P(IBCHNM,U,2)  ; Cardholder First Name
"RTN","IBNCPDP1",277,0)
 .. S $P(IBDAT,U,9)=$P(IBCHNM,U,1)  ; Cardholder Last Name
"RTN","IBNCPDP1",278,0)
 .. S $P(IBDAT,U,10)=$P($G(^DIC(36,+IBZ,.11)),U,5) ; State
"RTN","IBNCPDP1",279,0)
 .. S $P(IBDAT,U,11)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",2),0)),U) ; Payer Sheet B2 name
"RTN","IBNCPDP1",280,0)
 .. S $P(IBDAT,U,12)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",3),0)),U) ; Payer Sheet B3 name
"RTN","IBNCPDP1",281,0)
 .. S $P(IBDAT,U,13)=$G(IBY(4)) ; Software/Vendor Cert ID
"RTN","IBNCPDP1",282,0)
 .. S $P(IBDAT,U,14)=IBINSN ; Ins Name
"RTN","IBNCPDP1",283,0)
 .. S $P(IBDAT,U,15)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",4),0)),U) ; Payer Sheet E1 name
"RTN","IBNCPDP1",284,0)
 .. S $P(IBDAT,U,16)=+$P($G(IBY(5)),",",1)     ; Payer Sheet B1 ien
"RTN","IBNCPDP1",285,0)
 .. S $P(IBDAT,U,17)=+$P($G(IBY(5)),",",2)     ; Payer Sheet B2 ien
"RTN","IBNCPDP1",286,0)
 .. S $P(IBDAT,U,18)=+$P($G(IBY(5)),",",3)     ; Payer Sheet B3 ien
"RTN","IBNCPDP1",287,0)
 .. S $P(IBDAT,U,19)=+$P($G(IBY(5)),",",4)     ; Payer Sheet E1 ien
"RTN","IBNCPDP1",288,0)
 .. S $P(IBDAT,U,20)=$P($G(IBINS(IBT,4)),U,6)  ; Pharmacy Person Code
"RTN","IBNCPDP1",289,0)
 .. S IBD("INS",IBX,1)=IBDAT
"RTN","IBNCPDP1",290,0)
 .. ;
"RTN","IBNCPDP1",291,0)
 .. S IBDAT=""
"RTN","IBNCPDP1",292,0)
 .. S $P(IBDAT,U,1)=$P($G(IBINS(IBT,355.3)),U,3) ;group name
"RTN","IBNCPDP1",293,0)
 .. S $P(IBDAT,U,2)=$$PHONE^IBNCPDP6(+IBZ) ;ins co ph 3
"RTN","IBNCPDP1",294,0)
 .. S $P(IBDAT,U,3)=$$GET1^DIQ(366.03,IBPIEN_",",.01) ;plan ID
"RTN","IBNCPDP1",295,0)
 .. S $P(IBDAT,U,4)=$S(IBPLNTYP="TRICARE":"T",IBPLNTYP="CHAMPVA":"C",1:"V") ; plan type
"RTN","IBNCPDP1",296,0)
 .. S $P(IBDAT,U,5)=+$G(^IBA(355.3,+IBPL,0)) ; insurance co ien
"RTN","IBNCPDP1",297,0)
 .. S $P(IBDAT,U,6)=$P(IBZ,U,20) ;(#.2) COB field of the (#.3121) insurance Type multiple of the Patient file (#2)
"RTN","IBNCPDP1",298,0)
 .. S $P(IBDAT,U,7)=IBT  ; 2.312 subfile ien
"RTN","IBNCPDP1",299,0)
 .. S $P(IBDAT,U,8)=$$GET1^DIQ(366.03,IBPIEN_",",10.1) ; maximum ncpdp transactions
"RTN","IBNCPDP1",300,0)
 .. S IBD("INS",IBX,3)=IBDAT
"RTN","IBNCPDP1",301,0)
 .. Q
"RTN","IBNCPDP1",302,0)
 . Q
"RTN","IBNCPDP1",303,0)
 ;
"RTN","IBNCPDP1",304,0)
 ; Count the number of pharmacy insurance policies by IBX found up above
"RTN","IBNCPDP1",305,0)
 S IBX=0 F IBCNT=0:1 S IBX=$O(IBRXPOL(IBX)) Q:'IBX
"RTN","IBNCPDP1",306,0)
 ;
"RTN","IBNCPDP1",307,0)
 ; Determine the value of the IBX variable here.  This is basically the COB sequence# to be used.
"RTN","IBNCPDP1",308,0)
 ; If there is only 1 pharmacy policy or no pharmacy policies, then set IBX in this manner
"RTN","IBNCPDP1",309,0)
 I IBCNT'>1 D
"RTN","IBNCPDP1",310,0)
 . I $D(IBD("INS")) S IBX=+$O(IBD("INS",0))     ; use the only one in this array
"RTN","IBNCPDP1",311,0)
 . I '$D(IBD("INS")) S IBX=+$O(IBERMSG(0))      ; the only one here (or 0)
"RTN","IBNCPDP1",312,0)
 . Q
"RTN","IBNCPDP1",313,0)
 ;
"RTN","IBNCPDP1",314,0)
 ; If there are multiple pharmacy policies on file, then the COB field in the pt. policy must be used correctly
"RTN","IBNCPDP1",315,0)
 ;   and primary insurance must be at #1
"RTN","IBNCPDP1",316,0)
 I IBCNT>1 S IBX=1
"RTN","IBNCPDP1",317,0)
 ;
"RTN","IBNCPDP1",318,0)
 ; In all cases, if this variable is set, then use it
"RTN","IBNCPDP1",319,0)
 I $G(IBD("RXCOB"))>1 S IBX=$G(IBD("RXCOB"))
"RTN","IBNCPDP1",320,0)
 ;
"RTN","IBNCPDP1",321,0)
 ; Check insurance at IBX
"RTN","IBNCPDP1",322,0)
 I '$D(IBD("INS",IBX)),$G(IBERMSG(IBX))'="" S IBRES="0^Not ECME billable: "_IBERMSG(IBX),IBD("NO ECME INSURANCE")=1 G SETINX
"RTN","IBNCPDP1",323,0)
 I '$D(IBD("INS",IBX)) S IBRES="0^No Insurance ECME billable",IBD("NO ECME INSURANCE")=1
"RTN","IBNCPDP1",324,0)
SETINX ;
"RTN","IBNCPDP1",325,0)
 Q
"RTN","IBNCPDP1",326,0)
 ;
"RTN","IBNCPDP1",327,0)
RXPCT(IBD,BWHERE) ; Penny drug cost calculation
"RTN","IBNCPDP1",328,0)
 ; Input-IBD array, BWHERE
"RTN","IBNCPDP1",329,0)
 ; Output-return quotient of drug true value with 4 decimal places, or 0
"RTN","IBNCPDP1",330,0)
 N IBDIEN,IBDRX,IBNDC,IBFRM,IBDRFL,IBUNIT,IBSYN,IBQUO,IBDQUO,IBPSUF,IBPORD,IBPDISP,IBDRUG
"RTN","IBNCPDP1",331,0)
 S IBDIEN=IBD("IEN"),IBNDC=IBD("NDC"),IBDRX=IBD("DRUG"),IBDRFL=IBD("FILL NUMBER")
"RTN","IBNCPDP1",332,0)
 S IBFRM=$G(BWHERE),IBQUO=0
"RTN","IBNCPDP1",333,0)
 G:'IBDRX RXPCTQ
"RTN","IBNCPDP1",334,0)
 ; default unit price from (50-13/15)
"RTN","IBNCPDP1",335,0)
 D GETS^DIQ(50,IBDRX,".01;13;15","I","IBUNIT")
"RTN","IBNCPDP1",336,0)
 S IBPORD=$G(IBUNIT(50,IBDRX_",",13,"I"))
"RTN","IBNCPDP1",337,0)
 S IBPDISP=$G(IBUNIT(50,IBDRX_",",15,"I"))
"RTN","IBNCPDP1",338,0)
 S (IBDQUO,IBQUO)=$S(IBPORD&IBPDISP:(IBPORD/IBPDISP),1:0)
"RTN","IBNCPDP1",339,0)
 ;
"RTN","IBNCPDP1",340,0)
 ; unit price from (50.1-402/403) if NDC exists in the SYNONYM subfile
"RTN","IBNCPDP1",341,0)
 D DATA^IBRXUTL(IBDRX)
"RTN","IBNCPDP1",342,0)
 S IBSYN=0 F  S IBSYN=$O(^TMP($J,"IBDRUG",IBDRX,"SYN",IBSYN)) Q:'IBSYN  D
"RTN","IBNCPDP1",343,0)
 . I IBNDC'="",$G(^TMP($J,"IBDRUG",IBDRX,"SYN",IBSYN,2))=IBNDC D
"RTN","IBNCPDP1",344,0)
 .. S IBPSUF=IBSYN_","_IBDRX_","
"RTN","IBNCPDP1",345,0)
 .. D GETS^DIQ(50.1,IBPSUF,".01;402;403","I","IBUNIT")
"RTN","IBNCPDP1",346,0)
 .. S IBPORD=$G(IBUNIT(50.1,IBPSUF,402,"I"))
"RTN","IBNCPDP1",347,0)
 .. S IBPDISP=$G(IBUNIT(50.1,IBPSUF,403,"I"))
"RTN","IBNCPDP1",348,0)
 .. S IBQUO=$S(IBPORD&IBPDISP:(IBPORD/IBPDISP),1:0)
"RTN","IBNCPDP1",349,0)
 ;
"RTN","IBNCPDP1",350,0)
 ; API #4970 - use the default unit price for CMOP
"RTN","IBNCPDP1",351,0)
 I $$MWC^PSOBPSU2(IBDIEN,IBDRFL)="C" D
"RTN","IBNCPDP1",352,0)
 . Q:(IBFRM="PE")!(IBFRM="PP")
"RTN","IBNCPDP1",353,0)
 . S IBQUO=IBDQUO
"RTN","IBNCPDP1",354,0)
 ; set the lowest value 0.0001 with 4 decimal if less than 0.00005
"RTN","IBNCPDP1",355,0)
 I IBQUO S IBQUO=$J(IBQUO,1,4),IBQUO=$S(IBQUO>0:IBQUO,1:"0.0001")
"RTN","IBNCPDP1",356,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBNCPDP1",357,0)
RXPCTQ ;
"RTN","IBNCPDP1",358,0)
 Q IBQUO
"RTN","IBNCPDP1",359,0)
 ;
"RTN","IBNCPDP1",360,0)
EXEMPT ; exemption reasons
"RTN","IBNCPDP1",361,0)
 ; variable from SD call ^ variable from PSO ^ reason not billable
"RTN","IBNCPDP1",362,0)
 ;;1^AO^AGENT ORANGE
"RTN","IBNCPDP1",363,0)
 ;;2^IR^IONIZING RADIATION
"RTN","IBNCPDP1",364,0)
 ;;3^SC^SC TREATMENT
"RTN","IBNCPDP1",365,0)
 ;;4^SWA^SOUTHWEST ASIA
"RTN","IBNCPDP1",366,0)
 ;;5^MST^MILITARY SEXUAL TRAUMA
"RTN","IBNCPDP1",367,0)
 ;;6^HNC^HEAD/NECK CANCER
"RTN","IBNCPDP1",368,0)
 ;;7^CV^COMBAT VETERAN
"RTN","IBNCPDP1",369,0)
 ;;8^SHAD^PROJECT 112/SHAD
"RTN","IBNCPDP1",370,0)
 ;;
"RTN","IBNCPDP1",371,0)
 ;
"RTN","IBNCPDP2")
0^25^B82759628
"RTN","IBNCPDP2",1,0)
IBNCPDP2 ;OAK/ELZ - PROCESSING FOR ECME RESP ;11/15/07  09:43
"RTN","IBNCPDP2",2,0)
 ;;2.0;INTEGRATED BILLING;**223,276,342,347,363,383,405,384,411,435,452,526,550**;21-MAR-94;Build 25
"RTN","IBNCPDP2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPDP2",4,0)
 ;
"RTN","IBNCPDP2",5,0)
 ; Reference to DEC^PRCASER1 supported by IA# 593
"RTN","IBNCPDP2",6,0)
 ; Reference to REL^PRCASVC supported by IA# 385
"RTN","IBNCPDP2",7,0)
 ; Reference to STATUS^PRCASVC1 supported by IA# 387
"RTN","IBNCPDP2",8,0)
 ; Reference to ^PRCASVC6 supported by IA# 384
"RTN","IBNCPDP2",9,0)
 ; Reference to $$RXSITE^PSOBPSUT supported by IA# 4701
"RTN","IBNCPDP2",10,0)
 ; Reference to $$GETPHARM^BPSUTIL supported by IA# 4146
"RTN","IBNCPDP2",11,0)
 ;
"RTN","IBNCPDP2",12,0)
ECME(DFN,IBD) ; function called by STORESP^IBNCPDP
"RTN","IBNCPDP2",13,0)
 ; input - DFN - patient IEN for the prescription
"RTN","IBNCPDP2",14,0)
 ;         IBD array passed in by reference
"RTN","IBNCPDP2",15,0)
 ;      The IBD array is passed to various subroutines depending
"RTN","IBNCPDP2",16,0)
 ;      on the ePharmacy event as evaluated by IBD("STATUS")
"RTN","IBNCPDP2",17,0)
 I $G(IBD("EPHARM"))="" S IBD("EPHARM")=$$EPHARM(+$G(IBD("PRESCRIPTION")),+$G(IBD("FILL NUMBER")))
"RTN","IBNCPDP2",18,0)
 I IBD("STATUS")="PAID",$G(IBD("RXCOB"))=2 Q $$BILLSEC^IBNCPDP5(DFN,.IBD)
"RTN","IBNCPDP2",19,0)
 I IBD("STATUS")="PAID" Q $$BILL(DFN,.IBD)
"RTN","IBNCPDP2",20,0)
 I IBD("STATUS")="REVERSED" Q $$REVERSE^IBNCPDP3(DFN,.IBD)
"RTN","IBNCPDP2",21,0)
 I IBD("STATUS")="CLOSED" Q $$CLOSE^IBNCPDP4(DFN,.IBD)
"RTN","IBNCPDP2",22,0)
 I IBD("STATUS")="RELEASED" Q $$RELEASE^IBNCPDP4(DFN,.IBD)
"RTN","IBNCPDP2",23,0)
 I IBD("STATUS")="SUBMITTED" Q $$SUBMIT^IBNCPDP4(DFN,.IBD)
"RTN","IBNCPDP2",24,0)
 I IBD("STATUS")="REOPEN" Q $$REOPEN^IBNCPDP4(DFN,.IBD)
"RTN","IBNCPDP2",25,0)
 I IBD("STATUS")="ELIG" Q $$ELIG^IBNCPDP3(DFN,.IBD)
"RTN","IBNCPDP2",26,0)
 D LOG("UNKNOWN")
"RTN","IBNCPDP2",27,0)
 Q "0^Cannot determine ECME event status"
"RTN","IBNCPDP2",28,0)
 ;
"RTN","IBNCPDP2",29,0)
MATCH(BCID,IBS) ;  right bill, right COB payer
"RTN","IBNCPDP2",30,0)
 N IBX,IBPS,IBFOUND,ECMELEN,BCID1
"RTN","IBNCPDP2",31,0)
 S IBPS=$S(IBS=1:"P",IBS=2:"S",IBS=3:"T",1:"P")
"RTN","IBNCPDP2",32,0)
 S IBFOUND=0
"RTN","IBNCPDP2",33,0)
 ;
"RTN","IBNCPDP2",34,0)
 ; need to check for ECME# lengths of both 7 digits and 12 digits to be sure
"RTN","IBNCPDP2",35,0)
 F ECMELEN=12,7 D  Q:IBFOUND
"RTN","IBNCPDP2",36,0)
 . I $L(+BCID)>ECMELEN Q     ; quit if too large
"RTN","IBNCPDP2",37,0)
 . S BCID1=BCID
"RTN","IBNCPDP2",38,0)
 . S $P(BCID1,";",1)=$$RJ^XLFSTR(+BCID,ECMELEN,0)
"RTN","IBNCPDP2",39,0)
 . S IBX=0     ; quit when we have found a non-cancelled claim with a payer sequence match
"RTN","IBNCPDP2",40,0)
 . F  S IBX=$O(^DGCR(399,"AG",BCID1,IBX)) Q:'IBX!IBFOUND  I '$P($G(^DGCR(399,IBX,"S")),U,16),(IBPS=$P($G(^DGCR(399,IBX,0)),U,21)) S IBFOUND=IBX Q
"RTN","IBNCPDP2",41,0)
 . Q
"RTN","IBNCPDP2",42,0)
 ;
"RTN","IBNCPDP2",43,0)
 Q IBFOUND
"RTN","IBNCPDP2",44,0)
 ;
"RTN","IBNCPDP2",45,0)
BILL(DFN,IBD) ; create bills
"RTN","IBNCPDP2",46,0)
 N IBDIV,IBAMT,IBY,IBSERV,IBFAC,IBSITE,IBDRX,IB,IBCDFN,IBINS,IBIDS,IBIFN,IBDFN,PRCASV,IBTRIC,IBLGL,IBLDT2,IBDUP,CHKBL
"RTN","IBNCPDP2",47,0)
 N PRCAERR,IBADT,IBRXN,IBFIL,IBTRKRN,DIE,DA,DR,IBRES,IBLOCK,IBLDT,IBNOW,IBDUZ,RCDUZ,IBPREV,IBQUERY,IBPAID,IBACT,%,DGRVRCAL
"RTN","IBNCPDP2",48,0)
 ;
"RTN","IBNCPDP2",49,0)
 S IBDUZ=.5 ;POSTMASTER
"RTN","IBNCPDP2",50,0)
 S RCDUZ=IBDUZ
"RTN","IBNCPDP2",51,0)
 ;
"RTN","IBNCPDP2",52,0)
 S IBY=1,IBLOCK=0
"RTN","IBNCPDP2",53,0)
 I 'DFN S IBY="0^Missing DFN" G BILLQ
"RTN","IBNCPDP2",54,0)
 S IBAMT=+$G(IBD("BILLED")) ;FI portion of charge
"RTN","IBNCPDP2",55,0)
 I 'IBAMT S IBY="-1^Zero amount billed" G BILLQ
"RTN","IBNCPDP2",56,0)
 S IBADT=+$G(IBD("DOS"),DT)
"RTN","IBNCPDP2",57,0)
 S IBRXN=+$G(IBD("PRESCRIPTION")) I 'IBRXN S IBY="0^Missing Rx IEN" G BILLQ
"RTN","IBNCPDP2",58,0)
 S IBFIL=+$G(IBD("FILL NUMBER"),-1) I IBFIL<0 S IBY="0^No fill number" G BILLQ
"RTN","IBNCPDP2",59,0)
 ;
"RTN","IBNCPDP2",60,0)
 ; IB*2*452 - esg - check for duplicate response
"RTN","IBNCPDP2",61,0)
 S IBDUP=$$DUP(.IBD) I IBDUP S IBY="0^Bill# "_$P(IBDUP,U,2)_" exists (Duplicate)" G BILLQ
"RTN","IBNCPDP2",62,0)
 ;
"RTN","IBNCPDP2",63,0)
 S IBDIV=+$G(IBD("DIVISION"))
"RTN","IBNCPDP2",64,0)
 I '$L($G(IBD("CLAIMID"))) S IBY="-1^Missing ECME Number" G BILLQ
"RTN","IBNCPDP2",65,0)
 S IBD("BCID")=$$BCID^IBNCPDP4(IBD("CLAIMID"),IBADT)
"RTN","IBNCPDP2",66,0)
 L +^DGCR(399,"AG",IBD("BCID")):15 E  S IBY="0^Cannot lock ECME number." G BILLQ
"RTN","IBNCPDP2",67,0)
 ;
"RTN","IBNCPDP2",68,0)
 S IBTRIC=$$TRICARE^IBNCPDP6(IBRXN_";"_IBFIL)
"RTN","IBNCPDP2",69,0)
 ; do patient copay first (only applicable if TRICARE)
"RTN","IBNCPDP2",70,0)
 I $G(IBD("COPAY")),IBTRIC D BILL^IBNCPDP6(IBRXN_";"_IBFIL,IBD("COPAY"),$G(IBD("RTYPE")))  ; create TRICARE Rx copay charge
"RTN","IBNCPDP2",71,0)
 ;
"RTN","IBNCPDP2",72,0)
 S IBLOCK=1,IBLDT2=""
"RTN","IBNCPDP2",73,0)
 S IBLDT=$$FMADD^XLFDT(DT,1) F  S IBLGL=$O(^XTMP("IBNCPLDT"_IBLDT),-1),IBLDT=$E(IBLGL,9,15) Q:IBLDT<$$FMADD^XLFDT(DT,-3)!(IBLGL'["IBNCPLDT")  I $D(^XTMP(IBLGL,IBD("BCID"))) S IBLDT2=^(IBD("BCID")) Q  ;Last time called
"RTN","IBNCPDP2",74,0)
 D NOW^%DTC S IBNOW=%
"RTN","IBNCPDP2",75,0)
 ; 2 calls in 45 sec
"RTN","IBNCPDP2",76,0)
 I IBLDT2,$$FMDIFF^XLFDT(IBNOW,IBLDT2,2)<45 S IBY="0^Duplicate billing call" G BILLQ
"RTN","IBNCPDP2",77,0)
 ;
"RTN","IBNCPDP2",78,0)
 ; check to see if a non-cancelled bill (same ECME#, same DOS, same payer sequence) already exists
"RTN","IBNCPDP2",79,0)
 ; if it does, then cancel this previous bill using the REVERSE action
"RTN","IBNCPDP2",80,0)
 S CHKBL=$$MATCH(IBD("BCID"),IBD("RXCOB"))
"RTN","IBNCPDP2",81,0)
 I CHKBL D
"RTN","IBNCPDP2",82,0)
 . N IBARR
"RTN","IBNCPDP2",83,0)
 . M IBARR=IBD
"RTN","IBNCPDP2",84,0)
 . S IBARR("REVERSAL REASON")="Cancel the existing bill ("_$P($G(^DGCR(399,CHKBL,0)),U,1)_")"
"RTN","IBNCPDP2",85,0)
 . I $$REVERSE^IBNCPDP3(DFN,.IBARR)
"RTN","IBNCPDP2",86,0)
 . Q
"RTN","IBNCPDP2",87,0)
 ;
"RTN","IBNCPDP2",88,0)
 ; derive minimal variables
"RTN","IBNCPDP2",89,0)
 I '$$CHECK^IBECEAU(0) S IBY="-1^IB SITE" G BILLQ
"RTN","IBNCPDP2",90,0)
 S IBSERV=$P($G(^IBE(350.1,1,0)),"^",4)
"RTN","IBNCPDP2",91,0)
 I '$$SERV^IBARX1(IBSERV) S IBY="-1^IB SERVICE" G BILLQ
"RTN","IBNCPDP2",92,0)
 I 'IBDIV S IBDIV=$P($$MCDIV^IBNCPEB(IBRXN,IBFIL),U,2)
"RTN","IBNCPDP2",93,0)
 I 'IBDIV S IBDIV=+$P($G(^SC(+$$FILE^IBRXUTL(IBRXN,5),0)),"^",15)
"RTN","IBNCPDP2",94,0)
 I 'IBDIV S IBDIV=+$P($G(^IBE(350.9,1,1)),U,25) ;dflt
"RTN","IBNCPDP2",95,0)
 I IBDIV S IBD("DIVISION")=IBDIV
"RTN","IBNCPDP2",96,0)
 ; - establish a stub claim/receivable
"RTN","IBNCPDP2",97,0)
 D SET^IBR I IBY<0 G BILLQ
"RTN","IBNCPDP2",98,0)
 ;
"RTN","IBNCPDP2",99,0)
 ; set up the following variables for claim establishment:
"RTN","IBNCPDP2",100,0)
 ; .01 BILL #
"RTN","IBNCPDP2",101,0)
 ; .17 ORIG CLAIM
"RTN","IBNCPDP2",102,0)
 ; .2  AUTO?
"RTN","IBNCPDP2",103,0)
 ; .02 DFN
"RTN","IBNCPDP2",104,0)
 ; .06 TIMEFRAME
"RTN","IBNCPDP2",105,0)
 ; .07 RATE TYPE
"RTN","IBNCPDP2",106,0)
 ; .18 SC AT TIME?
"RTN","IBNCPDP2",107,0)
 ; .04 LOCATION
"RTN","IBNCPDP2",108,0)
 ; .22 DIVISION
"RTN","IBNCPDP2",109,0)
 ; .05 BILL CLASSIF  (3)
"RTN","IBNCPDP2",110,0)
 ; .03 EVT DATE (DATE OF SERVICE)
"RTN","IBNCPDP2",111,0)
 ; 151 BILL FROM
"RTN","IBNCPDP2",112,0)
 ; 152 BILL TO
"RTN","IBNCPDP2",113,0)
 ; 155 SENSITIVE DX
"RTN","IBNCPDP2",114,0)
 ; 157 ROI OBTAINED
"RTN","IBNCPDP2",115,0)
 ; 101 PRIMARY INS CARRIER
"RTN","IBNCPDP2",116,0)
 K IB
"RTN","IBNCPDP2",117,0)
 S (IB(.02),IBDFN)=DFN
"RTN","IBNCPDP2",118,0)
 S IB(.07)=$$RT^IBNCPDP6(IBRXN_";"_IBFIL) ; previously determined rate type
"RTN","IBNCPDP2",119,0)
 I 'IB(.07) S IB(.07)=+$$RT^IBNCPDPU(DFN) ; cannot find previously, try to recompute
"RTN","IBNCPDP2",120,0)
 I 'IB(.07) S IBY="-1^IB RATE TYPE" G BILLQ
"RTN","IBNCPDP2",121,0)
 ;
"RTN","IBNCPDP2",122,0)
 S IBIFN=PRCASV("ARREC")
"RTN","IBNCPDP2",123,0)
 S IB(.01)=$P(PRCASV("ARBIL"),"-",2)
"RTN","IBNCPDP2",124,0)
 S IB(.17)=""
"RTN","IBNCPDP2",125,0)
 S IB(.2)=0
"RTN","IBNCPDP2",126,0)
 S IB(.06)=1
"RTN","IBNCPDP2",127,0)
 S IB(.18)=$$SC^IBCU3(DFN)
"RTN","IBNCPDP2",128,0)
 S IB(.04)=$S(+$P($G(^DG(40.8,+IBDIV,0)),U,3):7,1:1)
"RTN","IBNCPDP2",129,0)
 S:IBDIV IB(.22)=+IBDIV
"RTN","IBNCPDP2",130,0)
 S IB(.05)=3
"RTN","IBNCPDP2",131,0)
 S (IB(.03),IB(151),IB(152))=IBADT
"RTN","IBNCPDP2",132,0)
 S IBINS=$P($G(^IBA(355.3,+$G(IBD("PLAN")),0)),"^") I IBINS S IB(101)=IBINS
"RTN","IBNCPDP2",133,0)
 ;
"RTN","IBNCPDP2",134,0)
 ; set 362.4 node to rx#^p50^days sup^date of service^qty^ndc
"RTN","IBNCPDP2",135,0)
 S IB(362.4,IBRXN,IBFIL)=IBD("RX NO")_"^"_IBD("DRUG")_"^"_IBD("DAYS SUPPLY")_"^"_IBD("DOS")_"^"_IBD("QTY")_"^"_IBD("NDC")
"RTN","IBNCPDP2",136,0)
 ;
"RTN","IBNCPDP2",137,0)
 ; Sensitive Diagnosis Drug check
"RTN","IBNCPDP2",138,0)
 I $$SENS^IBNCPDR(IBD("DRUG")) S IB(155)=1,IB(157)=1 ; set sensitive dx and ROI obtained
"RTN","IBNCPDP2",139,0)
 ;
"RTN","IBNCPDP2",140,0)
 ; call the autobiller module to create the claim with a default
"RTN","IBNCPDP2",141,0)
 ; diagnosis and procedure for prescriptions
"RTN","IBNCPDP2",142,0)
 D EN^IBCD3(.IBQUERY)
"RTN","IBNCPDP2",143,0)
 D CLOSE^IBSDU(.IBQUERY)
"RTN","IBNCPDP2",144,0)
 ;
"RTN","IBNCPDP2",145,0)
 S:'$D(^XTMP("IBNCPLDT"_DT)) ^XTMP("IBNCPLDT"_DT,0)=$$FMADD^XLFDT(DT,2)_U_DT S ^XTMP("IBNCPLDT"_DT,IBD("BCID"))=IBNOW
"RTN","IBNCPDP2",146,0)
 S DIE="^DGCR(399,",DA=IBIFN
"RTN","IBNCPDP2",147,0)
 ; update the ECME fields
"RTN","IBNCPDP2",148,0)
 S DR="460////^S X=IBD(""BCID"")" S:$L($G(IBD("AUTH #"))) DR=DR_";461////^S X=IBD(""AUTH #"")"
"RTN","IBNCPDP2",149,0)
 D ^DIE K DA,DR,DIE
"RTN","IBNCPDP2",150,0)
 D SETCT ; Set Claims Tracking record
"RTN","IBNCPDP2",151,0)
 ;
"RTN","IBNCPDP2",152,0)
 ; IEN to 2.3121
"RTN","IBNCPDP2",153,0)
 S IBCDFN=$$PLANN^IBNCPDPU(DFN,IBD("PLAN"),IBADT)
"RTN","IBNCPDP2",154,0)
 I 'IBCDFN S IBY="-1^Plan not found in Patient's Profile." G BILLQ
"RTN","IBNCPDP2",155,0)
 ;
"RTN","IBNCPDP2",156,0)
 ; add the payer (fiscal intermediary) to the claim
"RTN","IBNCPDP2",157,0)
 S IBINS=+IBCDFN,IBCDFN=$P(IBCDFN,"^",2)
"RTN","IBNCPDP2",158,0)
 S DIE="^DGCR(399,",DA=IBIFN,DR="112////"_IBCDFN
"RTN","IBNCPDP2",159,0)
 D ^DIE K DA,DR,DIE,DGRVRCAL
"RTN","IBNCPDP2",160,0)
 ;
"RTN","IBNCPDP2",161,0)
 ; need to make sure we have computed charges
"RTN","IBNCPDP2",162,0)
 D CHARGES(IBIFN)
"RTN","IBNCPDP2",163,0)
 I $P($G(^DGCR(399,IBIFN,"U1")),U,1)'>0 S IBY="-1^Total Charges must be greater than $0." G BILLQ
"RTN","IBNCPDP2",164,0)
 ;
"RTN","IBNCPDP2",165,0)
 ; update the authorize/print fields
"RTN","IBNCPDP2",166,0)
 S DIE="^DGCR(399,",DA=IBIFN
"RTN","IBNCPDP2",167,0)
 S DR="9////1;12////"_DT D ^DIE
"RTN","IBNCPDP2",168,0)
 ;
"RTN","IBNCPDP2",169,0)
 ; *526 set approving official
"RTN","IBNCPDP2",170,0)
 S:'$D(^VA(200,IBDUZ,0)) IBDUZ=.5
"RTN","IBNCPDP2",171,0)
 ; pass the claim to AR
"RTN","IBNCPDP2",172,0)
 D GVAR^IBCBB,ARRAY^IBCBB1 S PRCASV("APR")=IBDUZ D ^PRCASVC6
"RTN","IBNCPDP2",173,0)
 I 'PRCASV("OKAY") S IBY="-1^"_$$ARERR($G(PRCAERR),1) G BILLQ
"RTN","IBNCPDP2",174,0)
 D REL^PRCASVC
"RTN","IBNCPDP2",175,0)
 ;
"RTN","IBNCPDP2",176,0)
 ; update the AR status to Active
"RTN","IBNCPDP2",177,0)
 ;  D AUDITX^PRCAUDT(PRCASV("ARREC"))
"RTN","IBNCPDP2",178,0)
 S PRCASV("STATUS")=16
"RTN","IBNCPDP2",179,0)
 D STATUS^PRCASVC1
"RTN","IBNCPDP2",180,0)
 ;
"RTN","IBNCPDP2",181,0)
 ; decrease adjust bill
"RTN","IBNCPDP2",182,0)
 ; Auto decrease from service Bill#,Tran amt,person,reason,Tran date
"RTN","IBNCPDP2",183,0)
 S IBAMT=$G(^DGCR(399,IBIFN,"U1"))
"RTN","IBNCPDP2",184,0)
 S IBPAID=$G(IBD("PAID"))
"RTN","IBNCPDP2",185,0)
 I IBAMT-IBPAID>.01 D
"RTN","IBNCPDP2",186,0)
 . N IBREAS
"RTN","IBNCPDP2",187,0)
 . S IBREAS="Adjust based on ECME amount paid."
"RTN","IBNCPDP2",188,0)
 . I IBTRIC S IBREAS="Due to TRICARE Patient Responsibility."
"RTN","IBNCPDP2",189,0)
 . D DEC^PRCASER1(PRCASV("ARREC"),IBAMT-IBPAID,IBDUZ,IBREAS,IBADT)
"RTN","IBNCPDP2",190,0)
 . I 'IBPAID S PRCASV("STATUS")=22 D STATUS^PRCASVC1 ; collected/closed
"RTN","IBNCPDP2",191,0)
 ;
"RTN","IBNCPDP2",192,0)
 D  ; set the user in 399
"RTN","IBNCPDP2",193,0)
 . N IBI,IBT F IBI=2,5,11,13,15 S IBT(399,IBIFN_",",IBI)=IBDUZ
"RTN","IBNCPDP2",194,0)
 . D FILE^DIE("","IBT")
"RTN","IBNCPDP2",195,0)
 ;
"RTN","IBNCPDP2",196,0)
BILLQ S IBRES=$S(IBY<0:"0^"_$S($L($P(IBY,"^",2)):$P(IBY,"^",2),1:$P(IBY,"^",3)),$G(IBIFN):+IBIFN,1:IBY)
"RTN","IBNCPDP2",197,0)
 I $G(IBIFN) S IBD("BILL")=IBIFN
"RTN","IBNCPDP2",198,0)
 D LOG("BILL",IBRES)
"RTN","IBNCPDP2",199,0)
 I IBY<0 D BULL^IBNCPEB($G(DFN),.IBD,IBRES,$G(IBIFN))
"RTN","IBNCPDP2",200,0)
 I IBLOCK L -^DGCR(399,"AG",IBD("BCID"))
"RTN","IBNCPDP2",201,0)
 Q IBRES
"RTN","IBNCPDP2",202,0)
 ;
"RTN","IBNCPDP2",203,0)
SETCT ; update claims tracking saying bill has been billed
"RTN","IBNCPDP2",204,0)
 N X,Y,D0,DA,DI,DICR,DIE,DIG,DIH,DIU,DIV,DIW,DQ,DR
"RTN","IBNCPDP2",205,0)
 S IBTRKRN=+$O(^IBT(356,"ARXFL",IBRXN,IBFIL,0))
"RTN","IBNCPDP2",206,0)
 I IBTRKRN S DIE="^IBT(356,",DA=IBTRKRN,DR=".11////^S X=IBIFN;.17///@" D ^DIE
"RTN","IBNCPDP2",207,0)
 I IBTRKRN,(+$G(IBD("DOS"))'=$P(^IBT(356,IBTRKRN,0),U,6)) S DIE="^IBT(356,",DA=IBTRKRN,DR=".06////"_IBD("DOS") D ^DIE ; Check Date of Service
"RTN","IBNCPDP2",208,0)
 I IBTRKRN,IBIFN D CTB^IBCDC(IBTRKRN,IBIFN)
"RTN","IBNCPDP2",209,0)
 Q
"RTN","IBNCPDP2",210,0)
 ;
"RTN","IBNCPDP2",211,0)
LOG(PROC,RESULT) ;Store the data
"RTN","IBNCPDP2",212,0)
 ;Log values passed into IB by outside applications
"RTN","IBNCPDP2",213,0)
 ;
"RTN","IBNCPDP2",214,0)
 ;implicit input variables/arrays :
"RTN","IBNCPDP2",215,0)
 ; IBD array with values sent to IB (see calling subroutines)
"RTN","IBNCPDP2",216,0)
 ; DFN - patient's IEN (file #2)
"RTN","IBNCPDP2",217,0)
 ; DUZ - user's IEN(file #200)
"RTN","IBNCPDP2",218,0)
 ;explicit parameters:
"RTN","IBNCPDP2",219,0)
 ; PROC - type of event as string, i.e. BILL, REJECT and so on
"RTN","IBNCPDP2",220,0)
 ; RESULT - result of the event processing, format: return_code^message
"RTN","IBNCPDP2",221,0)
 ;
"RTN","IBNCPDP2",222,0)
 D LOG^IBNCPLOG(.IBD,DFN,PROC,RESULT,$J,$$NOW^XLFDT(),+DUZ)
"RTN","IBNCPDP2",223,0)
 Q
"RTN","IBNCPDP2",224,0)
 ;
"RTN","IBNCPDP2",225,0)
EPHARM(IBRX,IBREFILL) ;
"RTN","IBNCPDP2",226,0)
 ;returns ien of #9002313.56 BPS PHARMACIES associated
"RTN","IBNCPDP2",227,0)
 ;with the prescription specified by:
"RTN","IBNCPDP2",228,0)
 ; IBRX - IEN in file #52
"RTN","IBNCPDP2",229,0)
 ; IBREFILL - zero(0) for the original prescription or the refill
"RTN","IBNCPDP2",230,0)
 ;    number for a refill (IEN of REFILL multiple #52.1)
"RTN","IBNCPDP2",231,0)
 I +$G(IBRX)=0 Q ""
"RTN","IBNCPDP2",232,0)
 I $G(IBREFILL)="" Q ""
"RTN","IBNCPDP2",233,0)
 N IBDIV59
"RTN","IBNCPDP2",234,0)
 S IBDIV59=+$$RXSITE^PSOBPSUT(+IBRX,+IBREFILL)
"RTN","IBNCPDP2",235,0)
 I IBDIV59>0 Q $$GETPHARM^BPSUTIL(IBDIV59)
"RTN","IBNCPDP2",236,0)
 Q ""
"RTN","IBNCPDP2",237,0)
 ;
"RTN","IBNCPDP2",238,0)
CHARGES(IBIFN) ; set up charges on the bill
"RTN","IBNCPDP2",239,0)
 ;
"RTN","IBNCPDP2",240,0)
 ; Input:  IBIFN = Bill (399) ien
"RTN","IBNCPDP2",241,0)
 N DGPTUPDT
"RTN","IBNCPDP2",242,0)
 D BILL^IBCRBC(IBIFN)     ; generic bill charge calculator
"RTN","IBNCPDP2",243,0)
 Q
"RTN","IBNCPDP2",244,0)
 ;
"RTN","IBNCPDP2",245,0)
DUP(IBD) ; Function to determine if processing a duplicate response
"RTN","IBNCPDP2",246,0)
 ; and if a bill should be created
"RTN","IBNCPDP2",247,0)
 ; Input
"RTN","IBNCPDP2",248,0)
 ;    IBD array values
"RTN","IBNCPDP2",249,0)
 ; Output
"RTN","IBNCPDP2",250,0)
 ;    Function value:  [1] "1" if a duplicate response received and a non-cancelled bill already exists
"RTN","IBNCPDP2",251,0)
 ;                     [2] non-cancelled external bill# if piece [1] =1
"RTN","IBNCPDP2",252,0)
 ;          or
"RTN","IBNCPDP2",253,0)
 ;                     [1] "0" if not a duplicate response OR no bill exists
"RTN","IBNCPDP2",254,0)
 ;                     [2] ""
"RTN","IBNCPDP2",255,0)
 ;
"RTN","IBNCPDP2",256,0)
 N RET,RXIEN,RXFIL,COB,IBZ,IBARR,IBIFN,ARSTAT
"RTN","IBNCPDP2",257,0)
 S RET=0
"RTN","IBNCPDP2",258,0)
 I $G(IBD("RESPONSE"))'="DUPLICATE" G DUPX
"RTN","IBNCPDP2",259,0)
 ;
"RTN","IBNCPDP2",260,0)
 ; set up variables from array data and try to find bills
"RTN","IBNCPDP2",261,0)
 S RXIEN=+$G(IBD("PRESCRIPTION"))
"RTN","IBNCPDP2",262,0)
 S RXFIL=+$G(IBD("FILL NUMBER"))
"RTN","IBNCPDP2",263,0)
 S COB=+$G(IBD("RXCOB")),COB=$S(COB=2:"S",COB=3:"T",1:"P")
"RTN","IBNCPDP2",264,0)
 S IBZ=$$RXBILL^IBNCPUT3(RXIEN,RXFIL,COB,,.IBARR)
"RTN","IBNCPDP2",265,0)
 ;
"RTN","IBNCPDP2",266,0)
 ; if the function returned an active bill, then use it and get out
"RTN","IBNCPDP2",267,0)
 I +$P(IBZ,U,2) S IBIFN=+$P(IBZ,U,2),RET=1_U_$P($G(^DGCR(399,IBIFN,0)),U,1) G DUPX
"RTN","IBNCPDP2",268,0)
 ;
"RTN","IBNCPDP2",269,0)
 ; if no bills found at all then get out
"RTN","IBNCPDP2",270,0)
 I '$P(IBZ,U,1) G DUPX
"RTN","IBNCPDP2",271,0)
 I '$D(IBARR) G DUPX
"RTN","IBNCPDP2",272,0)
 ;
"RTN","IBNCPDP2",273,0)
 ; loop thru the array looking for any non-cancelled bills
"RTN","IBNCPDP2",274,0)
 S IBIFN="" F  S IBIFN=$O(IBARR(IBIFN),-1) Q:'IBIFN  D  Q:+RET
"RTN","IBNCPDP2",275,0)
 . S ARSTAT=$P($G(IBARR(IBIFN)),U,2)
"RTN","IBNCPDP2",276,0)
 . I ARSTAT'="CB",ARSTAT'="CN" S RET=1_U_$P($G(^DGCR(399,IBIFN,0)),U,1) Q
"RTN","IBNCPDP2",277,0)
 . Q
"RTN","IBNCPDP2",278,0)
DUPX ;
"RTN","IBNCPDP2",279,0)
 Q RET
"RTN","IBNCPDP2",280,0)
 ;
"RTN","IBNCPDP2",281,0)
ARERR(CODE,COB) ; retrieve AR error text
"RTN","IBNCPDP2",282,0)
 ; This function is called after calling AR routine PRCASVC6 and that routine indicates
"RTN","IBNCPDP2",283,0)
 ; some AR error has been detected.  Variable PRCAERR is passed into this function as
"RTN","IBNCPDP2",284,0)
 ; the CODE parameter.  The COB parameter indicates the COB payer sequence.
"RTN","IBNCPDP2",285,0)
 ;
"RTN","IBNCPDP2",286,0)
 ; Format of CODE:  -1^PRCA error code in file 350.8
"RTN","IBNCPDP2",287,0)
 ;             or   -1^AR text error message
"RTN","IBNCPDP2",288,0)
 ;             or   undefined
"RTN","IBNCPDP2",289,0)
 ;
"RTN","IBNCPDP2",290,0)
 N ERR,IBZ
"RTN","IBNCPDP2",291,0)
 S ERR=""
"RTN","IBNCPDP2",292,0)
 S CODE=$P($G(CODE),U,2)
"RTN","IBNCPDP2",293,0)
 S COB=$G(COB,1)
"RTN","IBNCPDP2",294,0)
 I CODE="" S ERR="Cannot establish receivable in AR" G ARERRX    ; generic error message
"RTN","IBNCPDP2",295,0)
 ;
"RTN","IBNCPDP2",296,0)
 S IBZ=+$O(^IBE(350.8,"C",CODE,0))
"RTN","IBNCPDP2",297,0)
 I IBZ S ERR=$P($G(^IBE(350.8,IBZ,0)),U,2) G ARERRX   ; error message from IB file
"RTN","IBNCPDP2",298,0)
 ;
"RTN","IBNCPDP2",299,0)
 S ERR=CODE    ; error message text from routine PRCASVC6
"RTN","IBNCPDP2",300,0)
 ;
"RTN","IBNCPDP2",301,0)
ARERRX ;
"RTN","IBNCPDP2",302,0)
 S ERR=$$TRIM^XLFSTR(ERR,"R",".")    ; remove ending period
"RTN","IBNCPDP2",303,0)
 I COB>1 S ERR=ERR_" ("_$S(COB=2:"Sec",1:"Tert")_" Ins)"
"RTN","IBNCPDP2",304,0)
 S ERR="AR Error: "_ERR
"RTN","IBNCPDP2",305,0)
 Q ERR
"RTN","IBNCPDP2",306,0)
 ;
"RTN","IBNCPDPU")
0^3^B126640808
"RTN","IBNCPDPU",1,0)
IBNCPDPU ;OAK/ELZ - UTILITIES FOR NCPDP ;Jun 06, 2014@19:13:12
"RTN","IBNCPDPU",2,0)
 ;;2.0;INTEGRATED BILLING;**223,276,347,383,405,384,437,435,452,511,534,550**;21-MAR-94;Build 25
"RTN","IBNCPDPU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPDPU",4,0)
 ;
"RTN","IBNCPDPU",5,0)
 ;Reference to ECMEACT^PSOBPSU1 supported by IA# 4702
"RTN","IBNCPDPU",6,0)
 ;Reference to $$EN^BPSNCPDP supported by IA# 4415
"RTN","IBNCPDPU",7,0)
 ;Reference to $$NABP^BPSBUTL supported by IA# 4719
"RTN","IBNCPDPU",8,0)
 ;Reference to $$CLMECME^BPSUTIL2 supported by IA# 6028
"RTN","IBNCPDPU",9,0)
 ;Reference to $$VALECME^BPSUTIL2 supported by IA# 6139
"RTN","IBNCPDPU",10,0)
 ;Reference to $$RXRLDT^PSOBPSUT supported by IA# 4701
"RTN","IBNCPDPU",11,0)
 ;
"RTN","IBNCPDPU",12,0)
 ;
"RTN","IBNCPDPU",13,0)
CT(DFN,IBRXN,IBFIL,IBADT,IBRMARK) ; files in claims tracking
"RTN","IBNCPDPU",14,0)
 ; Input:
"RTN","IBNCPDPU",15,0)
 ;  DFN - Patient IEN
"RTN","IBNCPDPU",16,0)
 ;  IBRXN - Rx IEN
"RTN","IBNCPDPU",17,0)
 ;  IBFIL - Fill#
"RTN","IBNCPDPU",18,0)
 ;  IBADT - Date of Service
"RTN","IBNCPDPU",19,0)
 ;  IBRMARK - Non-billable Reason (.01 from 356.8)
"RTN","IBNCPDPU",20,0)
 ;
"RTN","IBNCPDPU",21,0)
 N DIE,DR,DA,IBRXTYP,IBEABD
"RTN","IBNCPDPU",22,0)
 ; Check that the Date of Service is current
"RTN","IBNCPDPU",23,0)
 I IBTRKRN,$G(IBADT),($G(IBADT)'=$P(^IBT(356,IBTRKRN,0),U,6)) D
"RTN","IBNCPDPU",24,0)
 . S DIE="^IBT(356,",DA=IBTRKRN,DR=".06////"_IBADT D ^DIE
"RTN","IBNCPDPU",25,0)
 I IBTRKRN D:$D(IBRMARK)  Q
"RTN","IBNCPDPU",26,0)
 . S DIE="^IBT(356,",DA=IBTRKRN,DR=".19///"_IBRMARK
"RTN","IBNCPDPU",27,0)
 . D ^DIE
"RTN","IBNCPDPU",28,0)
 ; event type pointer for rx billing
"RTN","IBNCPDPU",29,0)
 S IBRXTYP=$O(^IBE(356.6,"AC",4,0))
"RTN","IBNCPDPU",30,0)
 ; earliest auto-billing date
"RTN","IBNCPDPU",31,0)
 S IBEABD=$$EABD^IBTUTL(IBRXTYP,$$FMADD^XLFDT(IBADT,60))
"RTN","IBNCPDPU",32,0)
 ; space out earliest auto bill date
"RTN","IBNCPDPU",33,0)
 ;
"RTN","IBNCPDPU",34,0)
 ; ROI check
"RTN","IBNCPDPU",35,0)
 N IBSCROI,IBDRUG,IBDEA,IBRXDATA
"RTN","IBNCPDPU",36,0)
 S IBRXDATA=$$RXZERO^IBRXUTL(DFN,IBRXN)
"RTN","IBNCPDPU",37,0)
 S IBDRUG=$P(IBRXDATA,U,6)
"RTN","IBNCPDPU",38,0)
 I $$SENS^IBNCPDR(IBDRUG) D
"RTN","IBNCPDPU",39,0)
 . N IBINS,IBFLG,IBINSP
"RTN","IBNCPDPU",40,0)
 . D ALL^IBCNS1(DFN,"IBINS",1,IBADT,1)
"RTN","IBNCPDPU",41,0)
 . S IBINSP=$O(IBINS("S",1,99),-1) Q:IBINSP=""
"RTN","IBNCPDPU",42,0)
 . S IBFLG=$$ROI^IBNCPDR4(DFN,$G(IBDRUG),+$G(IBINS(IBINSP,"0")),$G(IBADT))
"RTN","IBNCPDPU",43,0)
 . I 'IBFLG,$G(IBRMARK)="" S IBRMARK="ROI NOT OBTAINED"     ; IB*2*550
"RTN","IBNCPDPU",44,0)
 . I 'IBFLG S IBSCROI=3
"RTN","IBNCPDPU",45,0)
 . I IBFLG S IBSCROI=2
"RTN","IBNCPDPU",46,0)
 ;
"RTN","IBNCPDPU",47,0)
 D REFILL^IBTUTL1(DFN,IBRXTYP,IBADT,IBRXN,IBFIL,$G(IBRMARK),IBEABD,$G(IBSCROI))
"RTN","IBNCPDPU",48,0)
 Q
"RTN","IBNCPDPU",49,0)
 ;
"RTN","IBNCPDPU",50,0)
 ;NDC relocated to IBNCPNB
"RTN","IBNCPDPU",51,0)
 ;
"RTN","IBNCPDPU",52,0)
FILL(X,LEN) ; Zero-fill, right justified.
"RTN","IBNCPDPU",53,0)
 N Y
"RTN","IBNCPDPU",54,0)
 S:'$G(LEN) LEN=1
"RTN","IBNCPDPU",55,0)
 S Y=$E($G(X),1,LEN)
"RTN","IBNCPDPU",56,0)
 F  Q:$L(Y)>(LEN-1)  S Y="0"_Y
"RTN","IBNCPDPU",57,0)
 Q Y
"RTN","IBNCPDPU",58,0)
 ;
"RTN","IBNCPDPU",59,0)
PLANN(DFN,IBX,IBADT) ; returns the ien in the insurance multiple for the given plan/patient provided
"RTN","IBNCPDPU",60,0)
 ;   Output:  insurance co ien^2.312 subfile ien
"RTN","IBNCPDPU",61,0)
 N IBPOL,IBY,IBR
"RTN","IBNCPDPU",62,0)
 S IBR=""
"RTN","IBNCPDPU",63,0)
 D ALL^IBCNS1(DFN,"IBPOL",1,IBADT)
"RTN","IBNCPDPU",64,0)
 S IBY=0 F  S IBY=$O(IBPOL(IBY)) Q:'IBY!IBR  I $P($G(IBPOL(IBY,0)),U,18)=IBX S IBR=$P(IBPOL(IBY,0),U,1)_U_IBY Q
"RTN","IBNCPDPU",65,0)
 Q IBR
"RTN","IBNCPDPU",66,0)
 ;
"RTN","IBNCPDPU",67,0)
PLANEPS(IBPL) ; returns the ePharmacy payer sheets for a group plan 
"RTN","IBNCPDPU",68,0)
 ; IBPL = IEN to GROUP INSURANCE PLAN file #355.3
"RTN","IBNCPDPU",69,0)
 ; Returns: Payer Sheets. (B1,B2,B3,E1) (comma separated string)
"RTN","IBNCPDPU",70,0)
 ;   Successful:   1^B1,B2,B3,E1
"RTN","IBNCPDPU",71,0)
 ;   Unsuccessful: 0
"RTN","IBNCPDPU",72,0)
 N PIEN,IBR,PLN10,B1,B2,B3,E1
"RTN","IBNCPDPU",73,0)
 S IBR=0
"RTN","IBNCPDPU",74,0)
 I '$G(IBPL) Q IBR
"RTN","IBNCPDPU",75,0)
 ; Get ePharmacy plan IEN
"RTN","IBNCPDPU",76,0)
 S PIEN=+$P($G(^IBA(355.3,IBPL,6)),U,1)
"RTN","IBNCPDPU",77,0)
 I 'PIEN Q IBR
"RTN","IBNCPDPU",78,0)
 S PLN10=$G(^IBCNR(366.03,PIEN,10))
"RTN","IBNCPDPU",79,0)
 ; check for test/production sheets
"RTN","IBNCPDPU",80,0)
 ; get the test payer sheet first.  If nil, then get the regular payer sheet
"RTN","IBNCPDPU",81,0)
 S (B1,B2,B3,E1)=""
"RTN","IBNCPDPU",82,0)
 S B1=$P(PLN10,U,11),B2=$P(PLN10,U,12),B3=$P(PLN10,U,13),E1=$P(PLN10,U,14)
"RTN","IBNCPDPU",83,0)
 I 'B1 S B1=$P(PLN10,U,7)         ; billing
"RTN","IBNCPDPU",84,0)
 I 'B2 S B2=$P(PLN10,U,8)         ; reversal
"RTN","IBNCPDPU",85,0)
 I 'B3 S B3=$P(PLN10,U,9)         ; rebill (not currently validated)
"RTN","IBNCPDPU",86,0)
 I 'E1 S E1=$P(PLN10,U,15)        ; eligibility
"RTN","IBNCPDPU",87,0)
 S IBR="1^"_B1_","_B2_","_B3_","_E1
"RTN","IBNCPDPU",88,0)
 Q IBR
"RTN","IBNCPDPU",89,0)
 ;
"RTN","IBNCPDPU",90,0)
RT(DFN,IBDT,IBINS,IBPTYP) ; returns rate type to use for bill
"RTN","IBNCPDPU",91,0)
 ; Input:
"RTN","IBNCPDPU",92,0)
 ;    DFN - patient ien
"RTN","IBNCPDPU",93,0)
 ;   IBDT - date of service
"RTN","IBNCPDPU",94,0)
 ;  IBINS - insurance array (pass by reference)
"RTN","IBNCPDPU",95,0)
 ;
"RTN","IBNCPDPU",96,0)
 ; Output:
"RTN","IBNCPDPU",97,0)
 ;  3 piece string in the following format
"RTN","IBNCPDPU",98,0)
 ;     [1] rate type ien
"RTN","IBNCPDPU",99,0)
 ;     [2] Rate Type (Tort or Awp or Cost)
"RTN","IBNCPDPU",100,0)
 ;     [3] Eligibility Basis (V=VETERAN, T=TRICARE, C=CHAMPVA)
"RTN","IBNCPDPU",101,0)
 ;
"RTN","IBNCPDPU",102,0)
 ; IBPTYP - patient type - optional output parameter (pass by reference)
"RTN","IBNCPDPU",103,0)
 ;        - this is only used by the PRO option (see IBNCPDP1)
"RTN","IBNCPDPU",104,0)
 ;        - (V=VETERAN, T=TRICARE, C=CHAMPVA)
"RTN","IBNCPDPU",105,0)
 ;        - NOT the same thing as [3] of this function
"RTN","IBNCPDPU",106,0)
 ;
"RTN","IBNCPDPU",107,0)
 N VAEL,VAERR,IBPT,IBRT,IBX,IBE,IBI,IBRET,IBRS
"RTN","IBNCPDPU",108,0)
 S IBPTYP=""
"RTN","IBNCPDPU",109,0)
 D ELIG^VADPT
"RTN","IBNCPDPU",110,0)
 ;
"RTN","IBNCPDPU",111,0)
 ; if primary elig is vet type, use reimbursable
"RTN","IBNCPDPU",112,0)
 S IBPT=$P($G(^DIC(8,+VAEL(1),0)),U,5) ; = N:NON-VETERAN;Y:VETERAN
"RTN","IBNCPDPU",113,0)
 I IBPT="Y" D  Q IBRT_U_$S($G(IBRET)="VA COST":"C^V",1:"T^V")    ; IB*2*437 modifications
"RTN","IBNCPDPU",114,0)
 . S IBRT=$O(^DGCR(399.3,"B","REIMBURSABLE INS.",0))
"RTN","IBNCPDPU",115,0)
 . S IBRT=$S(IBRT:IBRT,1:8)
"RTN","IBNCPDPU",116,0)
 . I $G(IBDT) S IBRET=$P($$EVNTITM^IBCRU3(IBRT,3,"PRESCRIPTION FILL",IBDT,.IBRS),";",1)
"RTN","IBNCPDPU",117,0)
 . Q
"RTN","IBNCPDPU",118,0)
 ;
"RTN","IBNCPDPU",119,0)
 ; ia #'s 427 & 2516 for references to ^DIC(8 and ^DIC(8.1
"RTN","IBNCPDPU",120,0)
 ;
"RTN","IBNCPDPU",121,0)
 ;  -  determine eligibilities - build the IBE array
"RTN","IBNCPDPU",122,0)
 S IBE=$P($G(^DIC(8.1,+$P($G(^DIC(8,+VAEL(1),0)),U,9),0)),U,1),IBE($S(IBE="TRICARE"!(IBE="SHARING AGREEMENT"):"T",IBE="CHAMPVA":"C",1:"O"))=""     ; primary pt eligibility
"RTN","IBNCPDPU",123,0)
 ; IB*2*452 - for CHAMPVA, CHAMPVA must be primary eligibility only - not among secondary eligibilities
"RTN","IBNCPDPU",124,0)
 S IBX=0 F  S IBX=$O(VAEL(1,IBX)) Q:'IBX  S IBE=$P($G(^DIC(8.1,+$P($G(^DIC(8,+VAEL(1,IBX),0)),U,9),0)),U,1) S IBE($S(IBE="TRICARE"!(IBE="SHARING AGREEMENT"):"T",1:"O"))=""    ; secondary pt eligibilities
"RTN","IBNCPDPU",125,0)
 ;
"RTN","IBNCPDPU",126,0)
 ; set patient type parameter
"RTN","IBNCPDPU",127,0)
 I $G(VAEL(4)) S IBPTYP="V"   ; veteran without any pt. eligibilities defined
"RTN","IBNCPDPU",128,0)
 I $D(IBE("T")) S IBPTYP="T"  ; TRICARE
"RTN","IBNCPDPU",129,0)
 I $D(IBE("C")) S IBPTYP="C"  ; CHAMPVA
"RTN","IBNCPDPU",130,0)
 ;
"RTN","IBNCPDPU",131,0)
 ;  -  determine insurance policies - build the IBI array
"RTN","IBNCPDPU",132,0)
 S IBX=0 F  S IBX=$O(IBINS(IBX)) Q:'IBX  S IBI=$P($G(^IBE(355.1,+$P($G(IBINS(IBX,355.3)),U,9),0)),U,1) S IBI($S(IBI="TRICARE":"T",IBI="CHAMPVA":"C",1:"O"))=""
"RTN","IBNCPDPU",133,0)
 ;
"RTN","IBNCPDPU",134,0)
 ;  -  if patient is only TRICARE elig and only TRICARE ins bill for TRICARE
"RTN","IBNCPDPU",135,0)
 I $D(IBE("T")),'$D(IBE("O")),'$D(IBE("C")),$D(IBI("T")),'$D(IBI("O")),'$D(IBI("C")) S IBRT=$O(^DGCR(399.3,"B","TRICARE",0)) Q:IBRT IBRT_"^C^T"
"RTN","IBNCPDPU",136,0)
 ;
"RTN","IBNCPDPU",137,0)
 ; IB*2*452 - check for CHAMPVA
"RTN","IBNCPDPU",138,0)
 I $D(IBE("C")),$D(IBI("C")) S IBRT=$O(^DGCR(399.3,"B","CHAMPVA",0)) Q:IBRT IBRT_"^C^C"
"RTN","IBNCPDPU",139,0)
 ;
"RTN","IBNCPDPU",140,0)
 Q $S($D(IBRT):IBRT,1:"0^unable to determine rate type")
"RTN","IBNCPDPU",141,0)
 ;
"RTN","IBNCPDPU",142,0)
 ;
"RTN","IBNCPDPU",143,0)
BS() ; returns the mccr utility to use
"RTN","IBNCPDPU",144,0)
 N IBX
"RTN","IBNCPDPU",145,0)
 S IBX=0 F  S IBX=$O(^DGCR(399.1,"B","PRESCRIPTION",IBX)) Q:IBX<1  I $P($G(^DGCR(399.1,+$G(IBX),0)),U,5) Q
"RTN","IBNCPDPU",146,0)
 Q IBX
"RTN","IBNCPDPU",147,0)
 ;
"RTN","IBNCPDPU",148,0)
RXBIL(IBINP,IBERR) ; Matching NCPDP payments
"RTN","IBNCPDPU",149,0)
 ; Find IB Bill by the 7 or 12 digit ECME number and the Rx fill date
"RTN","IBNCPDPU",150,0)
 ; This function is called by AR routine $$BILL^RCDPESR1 (DBIA 4435).
"RTN","IBNCPDPU",151,0)
 ;Input:
"RTN","IBNCPDPU",152,0)
 ;   IBINP("ECME") - the 7 or 12 digit ECME number (Reference Number)
"RTN","IBNCPDPU",153,0)
 ;   IBINP("FILLDT")  - the Rx fill date, YYYYMMDD or FileMan format
"RTN","IBNCPDPU",154,0)
 ;   IBINP("PNM") (optional) - the patient's last name
"RTN","IBNCPDPU",155,0)
 ;Returns:
"RTN","IBNCPDPU",156,0)
 ;   IBERR (by ref) - the error code, or null string if found
"RTN","IBNCPDPU",157,0)
 ;   RXBIL - IB Bill IEN, or 0 if not matched
"RTN","IBNCPDPU",158,0)
 N IBECME,BILLDA,IBDAT,IBPNAME,BPSDAT
"RTN","IBNCPDPU",159,0)
 S IBERR=""
"RTN","IBNCPDPU",160,0)
 S IBECME=$G(IBINP("ECME"))
"RTN","IBNCPDPU",161,0)
 I '$$VALECME^BPSUTIL2(IBECME) S IBERR="Invalid ECME number" Q 0
"RTN","IBNCPDPU",162,0)
 S IBDAT=$G(IBINP("FILLDT")) ; Rx fill date
"RTN","IBNCPDPU",163,0)
 I IBDAT?8N S IBDAT=($E(IBDAT,1,4)-1700)_$E(IBDAT,5,8) ; conv date to FM format
"RTN","IBNCPDPU",164,0)
 I IBDAT'?7N Q $$RXBILND(IBECME)  ; date is not correct or null
"RTN","IBNCPDPU",165,0)
 S IBPNAME=$G(IBINP("PNM")) ; patient's name (optional)
"RTN","IBNCPDPU",166,0)
 S BILLDA=$$ECMEMTCH(IBECME,IBDAT,IBPNAME,.IBERR)
"RTN","IBNCPDPU",167,0)
 I 'BILLDA S BPSDAT=$$CLMECME^BPSUTIL2(+IBECME,IBDAT) I $G(BPSDAT)>0,BPSDAT'=IBDAT S BILLDA=$$ECMEMTCH(IBECME,BPSDAT,IBPNAME,.IBERR)
"RTN","IBNCPDPU",168,0)
 Q +BILLDA
"RTN","IBNCPDPU",169,0)
 ;
"RTN","IBNCPDPU",170,0)
RXBILND(IBECME) ;Match the bill with no date
"RTN","IBNCPDPU",171,0)
 N IBKEY,IBBC,BILLDA,IBY,IBCUT,ECMELEN,ECMENUM
"RTN","IBNCPDPU",172,0)
 S IBCUT=$$FMADD^XLFDT(DT,-180) ; only 180 days in the past for cut-off date
"RTN","IBNCPDPU",173,0)
 ;
"RTN","IBNCPDPU",174,0)
 ; Search ECME# 7/12 digits forward looking for PRNT/TX claims   (IB*2*435)
"RTN","IBNCPDPU",175,0)
 S BILLDA=0
"RTN","IBNCPDPU",176,0)
 F ECMELEN=12,7 D  Q:BILLDA
"RTN","IBNCPDPU",177,0)
 . I $L(+IBECME)>ECMELEN Q   ; Quit if too large
"RTN","IBNCPDPU",178,0)
 . S ECMENUM=$$RJ^XLFSTR(+IBECME,ECMELEN,0)   ; build ECME#
"RTN","IBNCPDPU",179,0)
 . S IBKEY=ECMENUM_";"
"RTN","IBNCPDPU",180,0)
 . S IBBC=IBKEY_IBCUT
"RTN","IBNCPDPU",181,0)
 . F  S IBBC=$O(^DGCR(399,"AG",IBBC)) Q:IBBC'[IBKEY  D  Q:BILLDA
"RTN","IBNCPDPU",182,0)
 .. S IBY="" F  S IBY=$O(^DGCR(399,"AG",IBBC,IBY)) Q:'IBY  D  Q:BILLDA
"RTN","IBNCPDPU",183,0)
 ... I $P($G(^DGCR(399,+IBY,0)),U,13)'=4 Q  ; not PRNT/TX
"RTN","IBNCPDPU",184,0)
 ... S BILLDA=+IBY
"RTN","IBNCPDPU",185,0)
 ... Q
"RTN","IBNCPDPU",186,0)
 .. Q
"RTN","IBNCPDPU",187,0)
 . Q
"RTN","IBNCPDPU",188,0)
 ;
"RTN","IBNCPDPU",189,0)
 I BILLDA Q BILLDA
"RTN","IBNCPDPU",190,0)
 ;
"RTN","IBNCPDPU",191,0)
 ; Search ECME# 7/12 digits backwards looking for ANY claims within cut-off date  (IB*2*435)
"RTN","IBNCPDPU",192,0)
 S BILLDA=0
"RTN","IBNCPDPU",193,0)
 F ECMELEN=12,7 D  Q:BILLDA
"RTN","IBNCPDPU",194,0)
 . I $L(+IBECME)>ECMELEN Q   ; Quit if too large
"RTN","IBNCPDPU",195,0)
 . S ECMENUM=$$RJ^XLFSTR(+IBECME,ECMELEN,0)   ; build ECME#
"RTN","IBNCPDPU",196,0)
 . S IBKEY=ECMENUM_";"
"RTN","IBNCPDPU",197,0)
 . S IBBC=IBKEY_"8000000"
"RTN","IBNCPDPU",198,0)
 . F  S IBBC=$O(^DGCR(399,"AG",IBBC),-1) Q:IBBC'[IBKEY  Q:$P(IBBC,";",2)<IBCUT  D  Q:BILLDA
"RTN","IBNCPDPU",199,0)
 .. S IBY="" F  S IBY=$O(^DGCR(399,"AG",IBBC,IBY),-1) Q:IBY=""  D  Q:BILLDA
"RTN","IBNCPDPU",200,0)
 ... S BILLDA=+IBY
"RTN","IBNCPDPU",201,0)
 ... Q
"RTN","IBNCPDPU",202,0)
 .. Q
"RTN","IBNCPDPU",203,0)
 . Q
"RTN","IBNCPDPU",204,0)
 ;
"RTN","IBNCPDPU",205,0)
 Q BILLDA
"RTN","IBNCPDPU",206,0)
 ;
"RTN","IBNCPDPU",207,0)
 ;Check matching of two strings - case insensitive, no spaces etc.
"RTN","IBNCPDPU",208,0)
TXMATCH(IBTXT1,IBTXT2,IBMAX) ;
"RTN","IBNCPDPU",209,0)
 N IBTR1,IBTR2,IBT1,IBT2
"RTN","IBNCPDPU",210,0)
 ;Checking only first IBMAX characters (long names may be truncated)
"RTN","IBNCPDPU",211,0)
 S IBTR1="ABCDEFGHIJKLMNOPQRSTUVWXYZ:;"",'._()<>/\|@#$%&*-=!`~ "
"RTN","IBNCPDPU",212,0)
 S IBTR2="abcdefghijklmnopqrstuvwxyz"
"RTN","IBNCPDPU",213,0)
 S IBT1=$E($TR(IBTXT1,IBTR1,IBTR2),1,IBMAX)
"RTN","IBNCPDPU",214,0)
 S IBT2=$E($TR(IBTXT2,IBTR1,IBTR2),1,IBMAX)
"RTN","IBNCPDPU",215,0)
 Q IBT1=IBT2
"RTN","IBNCPDPU",216,0)
 ;
"RTN","IBNCPDPU",217,0)
ECMEBIL(DFN,IBADT) ; Is the pat ECME Billable (pharmacy coverage only)
"RTN","IBNCPDPU",218,0)
 ; DFN - ptr to the patient
"RTN","IBNCPDPU",219,0)
 ; IBADT  - the date
"RTN","IBNCPDPU",220,0)
 ; IBINS - insurance array returned by ALL^IBCNS1
"RTN","IBNCPDPU",221,0)
 N IBANY,IBERMSG,IBX,IBINS,IBT,IBZ,IBRES,IBCAT,IBCOV,IBPCOV
"RTN","IBNCPDPU",222,0)
 S IBRES=0 ; Not ECME Billable by default
"RTN","IBNCPDPU",223,0)
 S (IBCOV,IBPCOV)=0
"RTN","IBNCPDPU",224,0)
 ; -- look up ins with Rx
"RTN","IBNCPDPU",225,0)
 D ALL^IBCNS1(DFN,"IBINS",1,IBADT,1)
"RTN","IBNCPDPU",226,0)
 S IBERMSG="" ; Error message
"RTN","IBNCPDPU",227,0)
 S IBCAT=$O(^IBE(355.31,"B","PHARMACY",0))
"RTN","IBNCPDPU",228,0)
 S IBX=0 F  S IBX=$O(IBINS("S",IBX)) Q:'IBX  D  Q:IBRES
"RTN","IBNCPDPU",229,0)
 . S IBT=0 F  S IBT=$O(IBINS("S",IBX,IBT)) Q:'IBT  D  Q:IBRES
"RTN","IBNCPDPU",230,0)
 . . N IBZ,IBPIEN,IBY,IBPL
"RTN","IBNCPDPU",231,0)
 . . S IBZ=$G(IBINS(IBT,0))
"RTN","IBNCPDPU",232,0)
 . . S IBPL=+$P(IBZ,U,18) Q:'IBPL
"RTN","IBNCPDPU",233,0)
 . . S IBCOV=1 ; covered
"RTN","IBNCPDPU",234,0)
 . . I '$$PLCOV^IBCNSU3(IBPL,IBADT,IBCAT) Q
"RTN","IBNCPDPU",235,0)
 . . S IBPCOV=1
"RTN","IBNCPDPU",236,0)
 . . S IBPIEN=+$G(^IBA(355.3,IBPL,6))
"RTN","IBNCPDPU",237,0)
 . . I 'IBPIEN S IBERMSG="Plan not linked to the Payer" Q  ; Not linked
"RTN","IBNCPDPU",238,0)
 . . D STCHK^IBCNRU1(IBPIEN,.IBY)
"RTN","IBNCPDPU",239,0)
 . . I $E($G(IBY(1)))'="A" S:IBERMSG="" IBERMSG=$$ERMSG^IBNCPNB($P($G(IBY(6)),",")) Q
"RTN","IBNCPDPU",240,0)
 . . S IBRES=1
"RTN","IBNCPDPU",241,0)
 I 'IBCOV Q "0^Not Insured"
"RTN","IBNCPDPU",242,0)
 I 'IBPCOV Q "0^No Pharmacy Coverage"
"RTN","IBNCPDPU",243,0)
 I 'IBRES,IBERMSG'="" Q "0^"_IBERMSG
"RTN","IBNCPDPU",244,0)
 I 'IBRES Q "0^No Insurance ECME billable"
"RTN","IBNCPDPU",245,0)
 ;
"RTN","IBNCPDPU",246,0)
 Q IBRES
"RTN","IBNCPDPU",247,0)
 ;
"RTN","IBNCPDPU",248,0)
SUBMIT(IBRX,IBFIL,IBDELAY) ; Submit the Rx claim through ECME
"RTN","IBNCPDPU",249,0)
 ; IBDELAY - Delay Reason Code, passed as the 18th parameter - IB*2.0*435
"RTN","IBNCPDPU",250,0)
 ; IBRX - RX ien in file #52
"RTN","IBNCPDPU",251,0)
 ; IBFIL - Fill No (0 for orig fill)
"RTN","IBNCPDPU",252,0)
 N IBDT,IBNDC,IBX
"RTN","IBNCPDPU",253,0)
 I '$G(IBRX)!('$D(IBFIL)) Q "0^Invalid parameters."
"RTN","IBNCPDPU",254,0)
 S IBDT=$$RXRLDT^PSOBPSUT(IBRX,IBFIL)\1   ; release date (DBIA# 4701)
"RTN","IBNCPDPU",255,0)
 I 'IBDT!(IBDT>DT) S IBDT=DT    ; if not released, use the current date (ePharmacy DOS)
"RTN","IBNCPDPU",256,0)
 S IBX=$$EN^BPSNCPDP(+IBRX,+IBFIL,IBDT,"BB",,,,,,,,,,,,,,+$G(IBDELAY))
"RTN","IBNCPDPU",257,0)
 I +IBX=0 D ECMEACT^PSOBPSU1(+IBRX,+IBFIL,"Claim submitted to 3rd party payer: IB BACK BILLING")
"RTN","IBNCPDPU",258,0)
 Q IBX
"RTN","IBNCPDPU",259,0)
 ;
"RTN","IBNCPDPU",260,0)
REASON(IBX,EXACT) ; Close Claim Reasons
"RTN","IBNCPDPU",261,0)
 Q $P($G(^IBE(356.8,+IBX,0)),U) ; non-billable reason
"RTN","IBNCPDPU",262,0)
 ;
"RTN","IBNCPDPU",263,0)
NABP(IBIFN) ;NABP Number
"RTN","IBNCPDPU",264,0)
 N IBY,IBTRKN,IBRX,IBFIL,IBZ,IBNABP
"RTN","IBNCPDPU",265,0)
 S IBY=+$O(^IBT(356.399,"C",IBIFN,0)) I 'IBY Q ""
"RTN","IBNCPDPU",266,0)
 S IBTRKN=$P($G(^IBT(356.399,IBY,0)),U) I 'IBTRKN Q ""
"RTN","IBNCPDPU",267,0)
 S IBZ=$G(^IBT(356,IBTRKN,0)) I IBZ="" Q ""
"RTN","IBNCPDPU",268,0)
 S IBRX=$P(IBZ,U,8)
"RTN","IBNCPDPU",269,0)
 S IBFIL=$P(IBZ,U,10)
"RTN","IBNCPDPU",270,0)
 S IBNABP=$$NABP^BPSBUTL(IBRX,IBFIL)
"RTN","IBNCPDPU",271,0)
 Q $S(IBNABP=0:"",1:IBNABP)
"RTN","IBNCPDPU",272,0)
 ;
"RTN","IBNCPDPU",273,0)
 ; Get the K-bill# from CT
"RTN","IBNCPDPU",274,0)
BILL(IBRX,IBFIL) ;
"RTN","IBNCPDPU",275,0)
 N IBTRKN,IBIFN
"RTN","IBNCPDPU",276,0)
 S IBTRKN=+$O(^IBT(356,"ARXFL",+$G(IBRX),+$G(IBFIL),""))
"RTN","IBNCPDPU",277,0)
 S IBIFN=+$P($G(^IBT(356,IBTRKN,0)),U,11)
"RTN","IBNCPDPU",278,0)
 Q $P($G(^DGCR(399,IBIFN,0)),U)
"RTN","IBNCPDPU",279,0)
 ;
"RTN","IBNCPDPU",280,0)
REJECT(IBECME,IBDATE) ; Is the e-claim rejected?
"RTN","IBNCPDPU",281,0)
 N IBTRKRN,IBY,ECMELEN
"RTN","IBNCPDPU",282,0)
 I IBECME'?1.12N Q 0
"RTN","IBNCPDPU",283,0)
 S IBTRKRN=0
"RTN","IBNCPDPU",284,0)
 F ECMELEN=12,7 D  Q:IBTRKRN
"RTN","IBNCPDPU",285,0)
 . I $L(+IBECME)>ECMELEN Q
"RTN","IBNCPDPU",286,0)
 . S IBECME=$$RJ^XLFSTR(+IBECME,ECMELEN,0)    ; build ECME# with leading zeros
"RTN","IBNCPDPU",287,0)
 . S IBTRKRN=+$O(^IBT(356,"AE",IBECME,0))
"RTN","IBNCPDPU",288,0)
 . Q
"RTN","IBNCPDPU",289,0)
 ;
"RTN","IBNCPDPU",290,0)
 I 'IBTRKRN Q 0
"RTN","IBNCPDPU",291,0)
 S IBY=$G(^IBT(356,IBTRKRN,1))
"RTN","IBNCPDPU",292,0)
 I $P(IBY,U,11)>0 Q 1  ; Rejected or closed
"RTN","IBNCPDPU",293,0)
 Q 0
"RTN","IBNCPDPU",294,0)
 ;
"RTN","IBNCPDPU",295,0)
RXINS(DFN,IBADT,IBINS) ; Return an array of pharmacy insurance policies by COB order
"RTN","IBNCPDPU",296,0)
 ;  Input:
"RTN","IBNCPDPU",297,0)
 ;      DFN - Patient ien (required)
"RTN","IBNCPDPU",298,0)
 ;    IBADT - Date of Service (fileman format, optional defaults to today)
"RTN","IBNCPDPU",299,0)
 ; Output:
"RTN","IBNCPDPU",300,0)
 ;    IBINS - Name of destination array (pass by reference)
"RTN","IBNCPDPU",301,0)
 ;
"RTN","IBNCPDPU",302,0)
 N CT,COB,IEN,IBPL
"RTN","IBNCPDPU",303,0)
 K IBINS
"RTN","IBNCPDPU",304,0)
 S DFN=+$G(DFN)
"RTN","IBNCPDPU",305,0)
 S IBADT=+$G(IBADT,DT)
"RTN","IBNCPDPU",306,0)
 D ALL^IBCNS1(DFN,"IBINS",1,IBADT,1)   ; gather all insurance policies in COB order
"RTN","IBNCPDPU",307,0)
 ;
"RTN","IBNCPDPU",308,0)
 S CT=0   ; count up Rx policies found
"RTN","IBNCPDPU",309,0)
 S COB="" F  S COB=$O(IBINS("S",COB)) Q:COB=""  S IEN=0 F  S IEN=$O(IBINS("S",COB,IEN)) Q:'IEN  D
"RTN","IBNCPDPU",310,0)
 . S IBPL=+$P($G(IBINS(IEN,0)),U,18)  ; plan ien
"RTN","IBNCPDPU",311,0)
 . I 'IBPL K IBINS(IEN),IBINS("S",COB,IEN) Q   ; no plan
"RTN","IBNCPDPU",312,0)
 . I '$$PLCOV^IBCNSU3(IBPL,IBADT,3) K IBINS(IEN),IBINS("S",COB,IEN) Q    ; not a pharmacy plan
"RTN","IBNCPDPU",313,0)
 . S CT=CT+1
"RTN","IBNCPDPU",314,0)
 . Q
"RTN","IBNCPDPU",315,0)
 ;
"RTN","IBNCPDPU",316,0)
 S IBINS=CT    ; store total number found at the top level
"RTN","IBNCPDPU",317,0)
 ;
"RTN","IBNCPDPU",318,0)
RXINSX ;
"RTN","IBNCPDPU",319,0)
 Q
"RTN","IBNCPDPU",320,0)
 ;
"RTN","IBNCPDPU",321,0)
ECMEMTCH(IBECME,IBDAT,IBPNAME,IBERR) ; Attempt ECME# look up with either 7 digit or 12 digit number  (IB*2*435)
"RTN","IBNCPDPU",322,0)
 N IBFOUND,IBMATCH,ECMELEN,IBKEY,BILLDA
"RTN","IBNCPDPU",323,0)
 S IBFOUND=0,IBMATCH=0
"RTN","IBNCPDPU",324,0)
 F ECMELEN=12,7 D  Q:IBFOUND
"RTN","IBNCPDPU",325,0)
 . I $L(+IBECME)>ECMELEN Q  ; Quit if too large
"RTN","IBNCPDPU",326,0)
 . S ECMENUM=$$RJ^XLFSTR(+IBECME,ECMELEN,0)  ; build ECME#
"RTN","IBNCPDPU",327,0)
 . S IBKEY=ECMENUM_";"_IBDAT ; The ECME Number (BC ID) for the "AG" xref
"RTN","IBNCPDPU",328,0)
 . S BILLDA=""
"RTN","IBNCPDPU",329,0)
 . ; Search Backward
"RTN","IBNCPDPU",330,0)
 . F  S BILLDA=$O(^DGCR(399,"AG",IBKEY,BILLDA),-1) Q:BILLDA=""  D  Q:IBFOUND
"RTN","IBNCPDPU",331,0)
 .. I 'BILLDA Q  ; IEN must be numeric
"RTN","IBNCPDPU",332,0)
 .. I '$D(^DGCR(399,BILLDA,0)) Q  ; Corrupted index
"RTN","IBNCPDPU",333,0)
 .. S IBMATCH=1
"RTN","IBNCPDPU",334,0)
 .. I IBPNAME'="" I '$$TXMATCH($P(IBPNAME,","),$P($G(^DPT(+$P(^DGCR(399,BILLDA,0),U,2),0)),","),8) Q  ; Patient name doesn't match
"RTN","IBNCPDPU",335,0)
 .. S IBFOUND=1
"RTN","IBNCPDPU",336,0)
 I 'BILLDA S IBERR=$S(IBMATCH:"Patient's name does not match",1:"Matching bill not found") ; not matched
"RTN","IBNCPDPU",337,0)
 Q +BILLDA
"RTN","IBNCPDPU",338,0)
 ;
"RTN","IBNCPDPU",339,0)
ACDUTY(DFN) ;
"RTN","IBNCPDPU",340,0)
 ; Check active duty status for the patient
"RTN","IBNCPDPU",341,0)
 ; Input:
"RTN","IBNCPDPU",342,0)
 ;   DFN: Patient (#2) IEN
"RTN","IBNCPDPU",343,0)
 ; Output:
"RTN","IBNCPDPU",344,0)
 ;   0: Does not have an Active Duty Status
"RTN","IBNCPDPU",345,0)
 ;   1: Has an active Duty Status
"RTN","IBNCPDPU",346,0)
 ; 
"RTN","IBNCPDPU",347,0)
 I '$G(DFN) Q 0
"RTN","IBNCPDPU",348,0)
 ; Check if Patient TYPE is ACTIVE DUTY
"RTN","IBNCPDPU",349,0)
 N VAEL
"RTN","IBNCPDPU",350,0)
 D ELIG^VADPT
"RTN","IBNCPDPU",351,0)
 I $P($G(VAEL(6)),"^",2)'="ACTIVE DUTY" Q 0
"RTN","IBNCPDPU",352,0)
 ; If the PERIOD OF SERVICE has '-ACTIVE DUTY', quit with true
"RTN","IBNCPDPU",353,0)
 I $F($P($G(VAEL(2)),"^",2),"-ACTIVE DUTY") Q 1
"RTN","IBNCPDPU",354,0)
 Q 0
"RTN","IBNCPDPU",355,0)
 ;
"RTN","IBNCPDPU",356,0)
 ;IBNCPDPU
"RTN","IBNCPDR")
0^26^B9280847
"RTN","IBNCPDR",1,0)
IBNCPDR ;ALB/BDB - ROI MANAGEMENT, LIST MANAGER ;30-NOV-07
"RTN","IBNCPDR",2,0)
 ;;2.0;INTEGRATED BILLING;**384,550**;21-MAR-94;Build 25
"RTN","IBNCPDR",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPDR",4,0)
 ;
"RTN","IBNCPDR",5,0)
 ;Reference to $$PSSBILSD^PSS50 is supported by IA# 6245
"RTN","IBNCPDR",6,0)
 ;
"RTN","IBNCPDR",7,0)
% ; -- main entry point
"RTN","IBNCPDR",8,0)
EN ;
"RTN","IBNCPDR",9,0)
 D DT^DICRW
"RTN","IBNCPDR",10,0)
 K XQORS,VALMEVL
"RTN","IBNCPDR",11,0)
 D EN^VALM("IBNCR PATIENT RELEASE OF INFO")
"RTN","IBNCPDR",12,0)
ENQ K DFN
"RTN","IBNCPDR",13,0)
 Q
"RTN","IBNCPDR",14,0)
 ;
"RTN","IBNCPDR",15,0)
 ;
"RTN","IBNCPDR",16,0)
INIT ; -- set up inital variables
"RTN","IBNCPDR",17,0)
 S U="^",VALMCNT=0,VALMBG=1
"RTN","IBNCPDR",18,0)
 K ^TMP("IBNCR",$J)
"RTN","IBNCPDR",19,0)
 D:'$D(DFN) PAT G:$D(VALMQUIT) INITQ
"RTN","IBNCPDR",20,0)
 D BLD
"RTN","IBNCPDR",21,0)
INITQ Q
"RTN","IBNCPDR",22,0)
 ;
"RTN","IBNCPDR",23,0)
 ;
"RTN","IBNCPDR",24,0)
PAT ; -- select patient you are working with
"RTN","IBNCPDR",25,0)
 N DPTNOFZY S DPTNOFZY=1  ;Suppress PATIENT file fuzzy lookups
"RTN","IBNCPDR",26,0)
 S DIC(0)="AEQMN",DIC="^DPT(" D ^DIC K DIC I +Y<1 S VALMQUIT="" Q
"RTN","IBNCPDR",27,0)
 S DFN=+Y
"RTN","IBNCPDR",28,0)
 Q
"RTN","IBNCPDR",29,0)
 ;
"RTN","IBNCPDR",30,0)
 ;
"RTN","IBNCPDR",31,0)
BLD ; -- build list of ROI'S
"RTN","IBNCPDR",32,0)
 K ^TMP("IBNCR",$J)
"RTN","IBNCPDR",33,0)
 N IBNCRI,IBNCRJ,IBNCRK,IBNCRL,IBNCRM,IBNCRX,IBNCRF
"RTN","IBNCPDR",34,0)
 S (IBNCRI,IBNCRJ,IBNCRK,IBNCRL,VALMCNT)=0
"RTN","IBNCPDR",35,0)
 ;
"RTN","IBNCPDR",36,0)
 ; -- find all ROI'S
"RTN","IBNCPDR",37,0)
 K IBNCRJ S IBNCRJ=0
"RTN","IBNCPDR",38,0)
 S IBNCRK=0 F  S IBNCRK=$O(^IBT(356.25,"AC",DFN,IBNCRK)) Q:'IBNCRK  S IBNCRL=0 F  S IBNCRL=$O(^IBT(356.25,"AC",DFN,IBNCRK,IBNCRL)) Q:'IBNCRL  D
"RTN","IBNCPDR",39,0)
 .; -- add to list
"RTN","IBNCPDR",40,0)
 . S IBNCRM=0 F  S IBNCRM=$O(^IBT(356.25,"AC",DFN,IBNCRK,IBNCRL,IBNCRM)) Q:'IBNCRM  D
"RTN","IBNCPDR",41,0)
 .. S IBNCRJ=IBNCRJ+1,IBNCRX=""
"RTN","IBNCPDR",42,0)
 .. S IBNCRX=$$SETFLD^VALM1(IBNCRJ,IBNCRX,"NUMBER")
"RTN","IBNCPDR",43,0)
 .. S IBNCRF=^IBT(356.25,IBNCRM,0)
"RTN","IBNCPDR",44,0)
 .. I $P(IBNCRF,"^",7)="0" S IBNCRX=IBNCRX_"I "
"RTN","IBNCPDR",45,0)
 .. S IBNCRX=$$SETFLD^VALM1($$DRUG^IBRXUTL1(IBNCRK),IBNCRX,"DRUG")
"RTN","IBNCPDR",46,0)
 .. I $D(^DIC(36,+IBNCRL,0)) S IBNCRX=$$SETFLD^VALM1($P(^(0),"^"),IBNCRX,"INSUR")
"RTN","IBNCPDR",47,0)
 .. S IBNCRX=$$SETFLD^VALM1($$DAT1^IBOUTL($P(IBNCRF,"^",5)),IBNCRX,"EFFDT")
"RTN","IBNCPDR",48,0)
 .. I $P(IBNCRF,"^",6)]"" S IBNCRX=IBNCRX_"thru"
"RTN","IBNCPDR",49,0)
 .. S IBNCRX=$$SETFLD^VALM1($$DAT1^IBOUTL($P(IBNCRF,"^",6)),IBNCRX,"EXPIRE")
"RTN","IBNCPDR",50,0)
 .. D SET(IBNCRX)
"RTN","IBNCPDR",51,0)
BLDQ ;
"RTN","IBNCPDR",52,0)
 I VALMCNT=0 D SET("  -- No ROI's on file for patient --")
"RTN","IBNCPDR",53,0)
 Q
"RTN","IBNCPDR",54,0)
 ;
"RTN","IBNCPDR",55,0)
SET(X) ; -- set arrays
"RTN","IBNCPDR",56,0)
 S VALMCNT=VALMCNT+1,^TMP("IBNCR",$J,VALMCNT,0)=X
"RTN","IBNCPDR",57,0)
 S ^TMP("IBNCR",$J,"IDX",VALMCNT,IBNCRJ)=""
"RTN","IBNCPDR",58,0)
 S ^TMP("IBNCRDX",$J,IBNCRJ)=$G(IBNCRM)
"RTN","IBNCPDR",59,0)
 Q
"RTN","IBNCPDR",60,0)
 ;
"RTN","IBNCPDR",61,0)
HDR ; -- screen header for initial screen
"RTN","IBNCPDR",62,0)
 D PID^VADPT
"RTN","IBNCPDR",63,0)
 S VALMHDR(1)="ROI Management for Patient: "_$E($P($G(^DPT(DFN,0)),"^"),1,20)_" "_$E($G(^(0)),1)_VA("BID")
"RTN","IBNCPDR",64,0)
 S VALMHDR(2)=" "
"RTN","IBNCPDR",65,0)
 Q
"RTN","IBNCPDR",66,0)
 ;
"RTN","IBNCPDR",67,0)
FNL ; -- exit and clean up
"RTN","IBNCPDR",68,0)
 K ^TMP("IBNCR",$J)
"RTN","IBNCPDR",69,0)
 D CLEAN^VALM10
"RTN","IBNCPDR",70,0)
 K VA,VAERR
"RTN","IBNCPDR",71,0)
 Q
"RTN","IBNCPDR",72,0)
 ;
"RTN","IBNCPDR",73,0)
SENS(DRUG,IBBDAR) ; Sensitive Diagnosis Drug API
"RTN","IBNCPDR",74,0)
 ; Input: DRUG = drug file ien
"RTN","IBNCPDR",75,0)
 ; Output: IBBDAR (optional parameter)  Pass by reference. Array of values for ECME processing
"RTN","IBNCPDR",76,0)
 ; Function value:  1 if the drug is a sensitive diagnosis drug, 0 otherwise
"RTN","IBNCPDR",77,0)
 ;
"RTN","IBNCPDR",78,0)
 N EPHNODE
"RTN","IBNCPDR",79,0)
 I '$G(DRUG) Q 0
"RTN","IBNCPDR",80,0)
 S EPHNODE=$$PSSBILSD^PSS50(DRUG) ;using PSS API to obtain this information IA#6245
"RTN","IBNCPDR",81,0)
 S IBBDAR("DRUG-SENSITIVE DX")=$P(EPHNODE,U,4)
"RTN","IBNCPDR",82,0)
 I $P(EPHNODE,U,4)=1 Q 1
"RTN","IBNCPDR",83,0)
 Q 0
"RTN","IBNCPDR1")
0^29^B3213258
"RTN","IBNCPDR1",1,0)
IBNCPDR1 ;ALB/BDB - ROI MANAGEMENT ;30-NOV-07
"RTN","IBNCPDR1",2,0)
 ;;2.0;INTEGRATED BILLING;**384,550**; 21-MAR-94;Build 25
"RTN","IBNCPDR1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPDR1",4,0)
 ;
"RTN","IBNCPDR1",5,0)
EN ; -- ROI Update
"RTN","IBNCPDR1",6,0)
 D FULL^VALM1 W !!
"RTN","IBNCPDR1",7,0)
 N IBDIF,DA,DR,DIC,DIE,DGSENFLG,IBEFF,IBROI
"RTN","IBNCPDR1",8,0)
 L +^IBT(356.25,IBNCRPR):5 I '$T D LOCKED^IBTRCD1 G ROIQ
"RTN","IBNCPDR1",9,0)
 S DIE="^IBT(356.25,",DA=IBNCRPR,DIE("NO^")="BACK",DR="@1;.05;S IBEFF=X;.06;I X<IBEFF W !,""   EXPIRATION DATE < EFFECTIVE DATE ??"" S Y=""@1"";.07;2.01"
"RTN","IBNCPDR1",10,0)
 D ^DIE K DIC,DIE,DA,DR
"RTN","IBNCPDR1",11,0)
 S IBDIF=0
"RTN","IBNCPDR1",12,0)
 I $G(^IBT(356.25,IBNCRPR,0))'=$G(TMP("IBNCR",$J,"ROI0")) S IBDIF=1
"RTN","IBNCPDR1",13,0)
 I $G(^IBT(356.25,IBNCRPR,1))'=$G(TMP("IBNCR",$J,"ROI1")) S IBDIF=1
"RTN","IBNCPDR1",14,0)
 I $G(^IBT(356.25,IBNCRPR,2))'=$G(TMP("IBNCR",$J,"ROI2")) S IBDIF=1
"RTN","IBNCPDR1",15,0)
 I IBDIF D UPDATE,BLD^IBNCPDR5
"RTN","IBNCPDR1",16,0)
 L -^IBT(356.25,IBNCRPR)
"RTN","IBNCPDR1",17,0)
 S ZTIO="",ZTRTN="CTCLN^IBNCPDR2",ZTSAVE("IBNCRPR")="",ZTDTH=$H,ZTDESC="IB - Make ROI Pharmacy entries in Claims Tracking billable"
"RTN","IBNCPDR1",18,0)
 D ^%ZTLOAD K ZTSK,ZTIO,ZTSAVE,ZTDESC,ZTRTN
"RTN","IBNCPDR1",19,0)
 ;D CTCLN^IBNCPDR2
"RTN","IBNCPDR1",20,0)
ROIQ S VALMBCK="R" Q
"RTN","IBNCPDR1",21,0)
 ;
"RTN","IBNCPDR1",22,0)
UPDATE ; -- Update last edited by
"RTN","IBNCPDR1",23,0)
 N DA,DIC,DIE,DR
"RTN","IBNCPDR1",24,0)
 S DIE="^IBT(356.25,",DA=IBNCRPR,DR="1.03///NOW;1.04////"_DUZ
"RTN","IBNCPDR1",25,0)
 D ^DIE
"RTN","IBNCPDR1",26,0)
 S VALMBCK="R" Q
"RTN","IBNCPDR1",27,0)
 ;
"RTN","IBNCPDR2")
0^4^B9323055
"RTN","IBNCPDR2",1,0)
IBNCPDR2 ;ALB/BDB - ROI MANAGEMENT, ADD ROI ;30-NOV-07
"RTN","IBNCPDR2",2,0)
 ;;2.0;INTEGRATED BILLING;**384,550**;21-MAR-94;Build 25
"RTN","IBNCPDR2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPDR2",4,0)
 ;
"RTN","IBNCPDR2",5,0)
 ;
"RTN","IBNCPDR2",6,0)
AD ; -- Add tracking entry
"RTN","IBNCPDR2",7,0)
 D FULL^VALM1
"RTN","IBNCPDR2",8,0)
 N X,Y,DIC,DA,DR,DD,DO,DIR,DIRUT,DTOUT,DUOUT,IBETYP,IBQUIT,IBTDT,VAIN,VAINDT,IBTRN,IBTDTE,IBROIDR
"RTN","IBNCPDR2",9,0)
 ;
"RTN","IBNCPDR2",10,0)
 L +^IBT(356.25,0):10 I '$T D PAUSE^IBNCPBB("ROI File busy while trying to add a new entry") G ADDQ
"RTN","IBNCPDR2",11,0)
 S X=$P($S($D(^IBT(356.25,0)):^(0),1:"^^-1"),"^",3)+1 L -^IBT(356.25,0)
"RTN","IBNCPDR2",12,0)
 S DIC="^IBT(356.25,",DIC(0)="L",DLAYGO=356.25
"RTN","IBNCPDR2",13,0)
 S DIC("DR")=".02////"_$G(DFN)_";.03;.04;@1;.05;S IBROIDR=X;.06;I (X-IBROIDR)<0 D EN^DDIOL(""   ** The ROI expiration date must be on or after the fill date. **"") S Y=""@1"";.07////1;1.01///NOW;1.02////"
"RTN","IBNCPDR2",14,0)
 S DIC("DR")=DIC("DR")_DUZ_";1.03///NOW;1.04////"_DUZ_";1.05///NOW;2.01"
"RTN","IBNCPDR2",15,0)
 D FILE^DICN
"RTN","IBNCPDR2",16,0)
 N IBNCRPR S IBNCRPR=0 I +Y>0 S IBNCRPR=+Y,ZTIO="",ZTRTN="CTCLN^IBNCPDR2",ZTDTH=$H,ZTSAVE("IBNCRPR")="",ZTDESC="IB - Make ROI Pharmacy entries in Claims Tracking billable"
"RTN","IBNCPDR2",17,0)
 I IBNCRPR D ^%ZTLOAD K ZTSK,ZTIO,ZTSAVE,ZTDESC,ZTRTN
"RTN","IBNCPDR2",18,0)
 D BLD^IBNCPDR
"RTN","IBNCPDR2",19,0)
ADDQ ;
"RTN","IBNCPDR2",20,0)
 S VALMBCK="R"
"RTN","IBNCPDR2",21,0)
 Q
"RTN","IBNCPDR2",22,0)
 ;
"RTN","IBNCPDR2",23,0)
CTCLN ; -- make ROI Pharmacy entries in Claims Tracking billable
"RTN","IBNCPDR2",24,0)
 ; tasked job with IBNCRPR defined - IEN file(#356.25)
"RTN","IBNCPDR2",25,0)
 ; search claims tracking for NBR of no ROI (or related to ROI)
"RTN","IBNCPDR2",26,0)
 ; set ROI flag to "obtained"
"RTN","IBNCPDR2",27,0)
 ; if RNB is related to ROI, clear the RNB
"RTN","IBNCPDR2",28,0)
 N IBNCR0,DFN,IBNCRD,IBDT,IBTRN,IBEFDT,IBEXDT,IBX,IBZ,IBT,IBPL,IBINS
"RTN","IBNCPDR2",29,0)
 N DIC,DIE,DR,DA,X,Y,IBRX
"RTN","IBNCPDR2",30,0)
 S IBNCR0=$G(^IBT(356.25,IBNCRPR,0))
"RTN","IBNCPDR2",31,0)
 S DFN=$P(IBNCR0,U,2),IBNCRD=$P(IBNCR0,U,3),IBEFDT=$P(IBNCR0,U,5),IBEXDT=$P(IBNCR0,U,6)
"RTN","IBNCPDR2",32,0)
 I $P(IBNCR0,U,7)="0" G CTCLNQ ; inactive ROI
"RTN","IBNCPDR2",33,0)
 I 'DFN!('IBNCRD)!('IBEFDT)!('IBEXDT) G CTCLNQ
"RTN","IBNCPDR2",34,0)
 S IBDT=0 F  S IBDT=$O(^IBT(356,"APTY",DFN,4,IBDT)) Q:'IBDT  D:IBDT'<IBEFDT&(IBDT'>IBEXDT)
"RTN","IBNCPDR2",35,0)
 . S IBTRN=0 F  S IBTRN=$O(^IBT(356,"APTY",DFN,4,IBDT,IBTRN)) Q:'IBTRN  D
"RTN","IBNCPDR2",36,0)
 .. S IBRX=$P(^IBT(356,IBTRN,0),U,8)       ; prescription ien
"RTN","IBNCPDR2",37,0)
 .. I IBNCRD'=$$FILE^IBRXUTL(IBRX,6) Q     ; make sure drug ien's match
"RTN","IBNCPDR2",38,0)
 .. S DR=".31////2"                        ; set CT SPECIAL CONSENT ROI flag to 'obtained'
"RTN","IBNCPDR2",39,0)
 .. ;
"RTN","IBNCPDR2",40,0)
 .. ; if the current RNB on file for the CT entry contains "ROI" then clear it out  (IB*2*550)
"RTN","IBNCPDR2",41,0)
 .. I $P($G(^IBE(356.8,+$P($G(^IBT(356,IBTRN,0)),U,19),0)),U,1)["ROI" S DR=DR_";.19///@"    ;clean NB reason
"RTN","IBNCPDR2",42,0)
 .. S DIE="^IBT(356,",DA=IBTRN D ^DIE
"RTN","IBNCPDR2",43,0)
 K IBNCRPR
"RTN","IBNCPDR2",44,0)
 ;
"RTN","IBNCPDR2",45,0)
CTCLNQ ;
"RTN","IBNCPDR2",46,0)
 ;
"RTN","IBNCPDR4")
0^5^B31809366
"RTN","IBNCPDR4",1,0)
IBNCPDR4 ;ALB/BDB - ROI MANAGEMENT, ROI CHECK ;30-NOV-07
"RTN","IBNCPDR4",2,0)
 ;;2.0;INTEGRATED BILLING;**384,550**;21-MAR-94;Build 25
"RTN","IBNCPDR4",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPDR4",4,0)
 ;
"RTN","IBNCPDR4",5,0)
 ;
"RTN","IBNCPDR4",6,0)
ROICHK(IBPAT,IBDRUG,IBINS,IBDT) ;Check for ROI
"RTN","IBNCPDR4",7,0)
 ; Function returns 1 if ROI on file or new ROI added, 0 if no ROI on file
"RTN","IBNCPDR4",8,0)
 ; it returns a 2 if not needed, passes checks
"RTN","IBNCPDR4",9,0)
 ;
"RTN","IBNCPDR4",10,0)
 ; -- input IBPAT  = patient (req)
"RTN","IBNCPDR4",11,0)
 ;          IBDRUG = drug  (req)
"RTN","IBNCPDR4",12,0)
 ;          IBINS  = insurance file 36 (req)
"RTN","IBNCPDR4",13,0)
 ;          IBDT   = fileman format fill date (req)
"RTN","IBNCPDR4",14,0)
 N DIC,DIE,DA,DR,DQ,D0,DI,D,X,Y
"RTN","IBNCPDR4",15,0)
 I $$ROI(IBPAT,IBDRUG,IBINS,IBDT) Q 1 ;ROI is on file
"RTN","IBNCPDR4",16,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBNCPDR4",17,0)
 D DATA^PSS50(IBDRUG,,,,,"IBDRUG")
"RTN","IBNCPDR4",18,0)
 I '$$SENS^IBNCPDR(IBDRUG) Q 2  ; drug not sensitive, ROI not needed
"RTN","IBNCPDR4",19,0)
 D EN^DDIOL("This drug requires a Release of Information(ROI) for:","","!!")
"RTN","IBNCPDR4",20,0)
 D EN^DDIOL(" PATIENT: ","","!") D EN^DDIOL($E($P($G(^DPT(IBPAT,0)),U),1,20),"","?0")
"RTN","IBNCPDR4",21,0)
 D EN^DDIOL(" DRUG: ","","!") D EN^DDIOL($E($G(^TMP($J,"IBDRUG",IBDRUG,.01)),1,30),"","?0")
"RTN","IBNCPDR4",22,0)
 D EN^DDIOL(" INSURANCE COMPANY: ","","!") D EN^DDIOL($P($G(^DIC(36,+IBINS,0)),U),"","?0")
"RTN","IBNCPDR4",23,0)
 D EN^DDIOL(" FILL DATE: ","","!") D EN^DDIOL($$DAT1^IBOUTL(IBDT),"","?0")
"RTN","IBNCPDR4",24,0)
 I '$$KCHK^XUSRB("IBCNR ROI") Q 0
"RTN","IBNCPDR4",25,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBNCPDR4",26,0)
 S DIR(0)="Y",DIR("A")="Do you want to add a new ROI for this patient? "
"RTN","IBNCPDR4",27,0)
 S DIR("B")="NO"
"RTN","IBNCPDR4",28,0)
 S DIR("?")="If you want to add a new ROI, enter 'Yes' - otherwise, enter 'No'"
"RTN","IBNCPDR4",29,0)
 D EN^DDIOL("","","!") D ^DIR K DIR
"RTN","IBNCPDR4",30,0)
 I 'Y D EN^DDIOL(" *** Rx requires an ROI. Please add the required ROI.","","!") Q 0 ;Stop processing
"RTN","IBNCPDR4",31,0)
 I '$$AD(IBPAT,IBDRUG,IBINS,IBDT) D EN^DDIOL(" *** Rx requires an ROI.","","!") D EN^DDIOL(" Please add an ROI before submitting the claim.","","!") Q 0 ;Stop processing
"RTN","IBNCPDR4",32,0)
 Q 1 ;Continue processing
"RTN","IBNCPDR4",33,0)
 ;
"RTN","IBNCPDR4",34,0)
ROICLN(IBTRN,IBRX,IBFIL) ;Clean NB reason, set CT ROI flag to 'obtained'
"RTN","IBNCPDR4",35,0)
 ; Clean ROI non-billable reason on Claims Tracking 356
"RTN","IBNCPDR4",36,0)
 ;
"RTN","IBNCPDR4",37,0)
 ; -- input IBTRN  = IEN of Claims Tracking #356
"RTN","IBNCPDR4",38,0)
 ;          IBRX   = Rx IEN
"RTN","IBNCPDR4",39,0)
 ;          IBFIL  = RX fill number
"RTN","IBNCPDR4",40,0)
 N DIE,DA,DR
"RTN","IBNCPDR4",41,0)
 I '$G(IBTRN) S IBTRN=+$O(^IBT(356,"ARXFL",$G(IBRX),$G(IBFIL),0))
"RTN","IBNCPDR4",42,0)
 I IBTRN D
"RTN","IBNCPDR4",43,0)
 . S DR=".31////2" ; set CT ROI flag to 'obtained'
"RTN","IBNCPDR4",44,0)
 . ;
"RTN","IBNCPDR4",45,0)
 . ; If the current RNB contains "ROI", then clear it out - IB*2*550
"RTN","IBNCPDR4",46,0)
 . I $P($G(^IBE(356.8,+$P($G(^IBT(356,IBTRN,0)),U,19),0)),U,1)["ROI" S DR=DR_";.19///@"
"RTN","IBNCPDR4",47,0)
 . S DIE="^IBT(356,",DA=IBTRN D ^DIE ;clean NB reason
"RTN","IBNCPDR4",48,0)
 Q
"RTN","IBNCPDR4",49,0)
 ;
"RTN","IBNCPDR4",50,0)
 ;Check for Release of Information (ROI) on file
"RTN","IBNCPDR4",51,0)
ROI(IBDFN,IBDRUG,IBINS,IBADT) ; -- Check for ROI on file
"RTN","IBNCPDR4",52,0)
 ; Function returns 1 if ROI on file, 0 if no ROI on file
"RTN","IBNCPDR4",53,0)
 ;
"RTN","IBNCPDR4",54,0)
 ; -- input IBDFN  = patient (req)
"RTN","IBNCPDR4",55,0)
 ;          IBDRUG = drug  (req)
"RTN","IBNCPDR4",56,0)
 ;          IBINS  = insurance file 36 (req)
"RTN","IBNCPDR4",57,0)
 ;          IBADT  = fileman format fill date (req)
"RTN","IBNCPDR4",58,0)
 ;
"RTN","IBNCPDR4",59,0)
 N IBROI,IBFLG
"RTN","IBNCPDR4",60,0)
 S IBFLG=0 ;No ROI on file
"RTN","IBNCPDR4",61,0)
 S IBROI=0 F  S IBROI=$O(^IBT(356.25,"AC",IBDFN,IBDRUG,IBINS,IBROI)) G:'IBROI ROIQ D  G:IBFLG ROIQ ;Check for ROI on file
"RTN","IBNCPDR4",62,0)
  . I IBADT<$P(^IBT(356.25,IBROI,0),U,5)!(IBADT>$P(^IBT(356.25,IBROI,0),U,6)) Q  ;Date out of range
"RTN","IBNCPDR4",63,0)
  . I $P(^IBT(356.25,IBROI,0),U,7)="0" Q  ;Inactive ROI
"RTN","IBNCPDR4",64,0)
  . S IBFLG=1 ;ROI on file
"RTN","IBNCPDR4",65,0)
  . S DIE="^IBT(356.25,",DA=IBROI,DR="1.05///NOW" D ^DIE
"RTN","IBNCPDR4",66,0)
ROIQ ;
"RTN","IBNCPDR4",67,0)
 Q IBFLG
"RTN","IBNCPDR4",68,0)
 ;
"RTN","IBNCPDR4",69,0)
AD(IBDFN,IBDRUG,IBINS,IBDT) ; -- Add tracking entry
"RTN","IBNCPDR4",70,0)
 ; Function returns 1 if ROI added, 0 if not added
"RTN","IBNCPDR4",71,0)
 N X,Y,DIC,DIR,DA,DR,DTOUT,DUOUT,IBQUIT,IBEFFDT,IBEXPDT
"RTN","IBNCPDR4",72,0)
 S IBQUIT=0
"RTN","IBNCPDR4",73,0)
 F  S DIR("?")="The ROI effective date must be prior to or equal to the fill date.",DIR("A")="Enter the ROI effective date for the ROI: ",DIR(0)="DATE" D ^DIR K DIR Q:$D(DTOUT)!$D(DUOUT)  D  Q:IBQUIT
"RTN","IBNCPDR4",74,0)
 . S X=Y,%DT="E" D ^%DT I Y<0 D EN^DDIOL("Must enter a valid date","","!") Q
"RTN","IBNCPDR4",75,0)
 . I Y>IBDT D EN^DDIOL("The ROI effective date must be prior to or equal to the fill date.","","!") Q
"RTN","IBNCPDR4",76,0)
 . S IBEFFDT=Y,IBQUIT=1 Q
"RTN","IBNCPDR4",77,0)
 G:'IBQUIT ADDQ
"RTN","IBNCPDR4",78,0)
 S IBQUIT=0
"RTN","IBNCPDR4",79,0)
 F  S DIR("?")="The ROI expiration date must be equal to or after the fill date.",DIR("A")="Enter the ROI expiration date for the ROI: ",DIR(0)="DATE" D ^DIR K DIR Q:$D(DTOUT)!$D(DUOUT)  D  Q:IBQUIT
"RTN","IBNCPDR4",80,0)
 . S X=Y,%DT="E" D ^%DT I Y<0 D EN^DDIOL("Must enter a valid date","","!") Q
"RTN","IBNCPDR4",81,0)
 . I Y<IBDT D EN^DDIOL("The ROI expiration date must be equal to or after the fill date.","","!") Q
"RTN","IBNCPDR4",82,0)
 . S IBEXPDT=Y,IBQUIT=1 Q
"RTN","IBNCPDR4",83,0)
 G:'IBQUIT ADDQ
"RTN","IBNCPDR4",84,0)
 L +^IBT(356.25,0):10 I '$T D PAUSE^IBNCPBB("ROI File busy while trying to add a new entry") S IBQUIT=0 G ADDQ
"RTN","IBNCPDR4",85,0)
 S X=$P($S($D(^IBT(356.25,0)):^(0),1:"^^-1"),"^",3)+1 L -^IBT(356.25,0)
"RTN","IBNCPDR4",86,0)
 S DIC="^IBT(356.25,",DIC(0)="L",DLAYGO=356.25,DIC("DR")=".02////"_IBDFN_";.03////"_IBDRUG_";.04////"_IBINS_";.05///"_IBEFFDT_";.06////"_IBEXPDT_";.07////1;1.01///NOW;1.02////"_DUZ_";1.03///NOW;1.04////"_DUZ_";1.05///NOW;2.01" D FILE^DICN
"RTN","IBNCPDR4",87,0)
 I Y<1!($D(DUOUT))!($D(DTOUT)) S IBQUIT=0 G ADDQ
"RTN","IBNCPDR4",88,0)
 N IBNCRPR I +Y>0 S IBNCRPR=+Y,ZTIO="",ZTRTN="CTCLN^IBNCPDR2",ZTDTH=$H,ZTSAVE("IBNCRPR")="",ZTDESC="IB - Make ROI Pharmacy entries in Claims Tracking billable"
"RTN","IBNCPDR4",89,0)
 D ^%ZTLOAD K ZTSK,ZTIO,ZTSAVE,ZTDESC,ZTRTN
"RTN","IBNCPDR4",90,0)
ADDQ Q IBQUIT
"RTN","IBNCPDR4",91,0)
 ;
"RTN","IBNCPDR4",92,0)
 ;Check for ROI on file
"RTN","IBNCPDR4",93,0)
ROI399(IBIFN) ; -- ROI Complete? in Bill/Claims (#399;157)
"RTN","IBNCPDR4",94,0)
 ; Check drugs that contain the sensitive diagnosis drug field=1,
"RTN","IBNCPDR4",95,0)
 ; Claims Tracking ROI file (#356.25) to see if an ROI is on file
"RTN","IBNCPDR4",96,0)
 ; 
"RTN","IBNCPDR4",97,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBNCPDR4",98,0)
 ; output - 0 = sensitive diagnosis drug and no ROI on file
"RTN","IBNCPDR4",99,0)
 ;          1 = default, sensitive diagnosis drug and ROI on file
"RTN","IBNCPDR4",100,0)
 N IBX,IBY0,IBRXIEN,IBDT,IBDRUG,ROIQ,IBDFN,IBINS
"RTN","IBNCPDR4",101,0)
 N DIC,DIE,DA,DR,DQ,D0,DI,DISYS,D,X,Y,DE,DW,DV,DL,DLB
"RTN","IBNCPDR4",102,0)
 S IBDFN=$P(^DGCR(399,IBIFN,0),U,2) ;patient
"RTN","IBNCPDR4",103,0)
 S IBINS=$P(^DGCR(399,IBIFN,"MP"),U,1) ;payer insurance company
"RTN","IBNCPDR4",104,0)
 I 'IBINS S ROIQ=1 G ROI399Q
"RTN","IBNCPDR4",105,0)
 S ROIQ=1
"RTN","IBNCPDR4",106,0)
 S IBX=0 F  S IBX=$O(^IBA(362.4,"C",$G(IBIFN),$G(IBX))) Q:'IBX  D
"RTN","IBNCPDR4",107,0)
 .S IBY0=^IBA(362.4,IBX,0),IBRXIEN=$P(IBY0,U,5) I 'IBRXIEN Q
"RTN","IBNCPDR4",108,0)
 .S IBDT=$P(IBY0,U,3),IBDRUG=$P(IBY0,U,4)
"RTN","IBNCPDR4",109,0)
 .K ^TMP($J,"IBDRUG") D ZERO^IBRXUTL(IBDRUG)
"RTN","IBNCPDR4",110,0)
 .I $$SENS^IBNCPDR(IBDRUG) D
"RTN","IBNCPDR4",111,0)
 .. I $$ROICHK^IBNCPDR4(IBDFN,IBDRUG,IBINS,IBDT) Q
"RTN","IBNCPDR4",112,0)
 .. S ROIQ=0
"RTN","IBNCPDR4",113,0)
ROI399Q ;
"RTN","IBNCPDR4",114,0)
 Q ROIQ
"RTN","IBNCPDRA")
0^18^B35956392
"RTN","IBNCPDRA",1,0)
IBNCPDRA ;ALB/CFS - ROI EXPIRATION REPORT ;21-SEP-15
"RTN","IBNCPDRA",2,0)
 ;;2.0;INTEGRATED BILLING;**550**;21-MAR-94;Build 25
"RTN","IBNCPDRA",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPDRA",4,0)
 ;; External reference to ^PSS50 supported by DBIA #4533
"RTN","IBNCPDRA",5,0)
 ;
"RTN","IBNCPDRA",6,0)
 Q
"RTN","IBNCPDRA",7,0)
 ;
"RTN","IBNCPDRA",8,0)
EN ;
"RTN","IBNCPDRA",9,0)
 N AIB,DEV,DATESEL,IBEXCEL
"RTN","IBNCPDRA",10,0)
 W @IOF,!,"Release of Information Expiration Report",!!
"RTN","IBNCPDRA",11,0)
 S DATESEL=$$DATE()  ; Date selection, (return format "beginning date^ending date")
"RTN","IBNCPDRA",12,0)
 I DATESEL="^" W @IOF Q
"RTN","IBNCPDRA",13,0)
 S AIB=$$SELAIB()  ;"Active", "Inactive" or "Both" selection.
"RTN","IBNCPDRA",14,0)
 I AIB="^" W @IOF Q
"RTN","IBNCPDRA",15,0)
 S IBEXCEL=$$EXCEL()  ;Microsoft EXCEL prompt selection.
"RTN","IBNCPDRA",16,0)
 I IBEXCEL="^" W @IOF Q
"RTN","IBNCPDRA",17,0)
 S DEV=$$DEVICE()
"RTN","IBNCPDRA",18,0)
 W @IOF
"RTN","IBNCPDRA",19,0)
 Q
"RTN","IBNCPDRA",20,0)
 ;
"RTN","IBNCPDRA",21,0)
 ; Validate user inputs.
"RTN","IBNCPDRA",22,0)
DATE() ; Beginning expiration date and ending expiration date selection prompts.
"RTN","IBNCPDRA",23,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,VAL,X,Y
"RTN","IBNCPDRA",24,0)
 S VAL="",DIR(0)="DA^::EX",DIR("A")="Beginning Expiration Date: ",DIR("B")="T-180"
"RTN","IBNCPDRA",25,0)
 W ! D ^DIR
"RTN","IBNCPDRA",26,0)
 K DIR
"RTN","IBNCPDRA",27,0)
 I $D(DIRUT) Q "^"  ; Abort
"RTN","IBNCPDRA",28,0)
 S $P(VAL,U)=Y
"RTN","IBNCPDRA",29,0)
 S DIR(0)="DA^"_VAL_"::EX",DIR("A")="Ending Expiration Date: ",DIR("B")="T+60"
"RTN","IBNCPDRA",30,0)
 D ^DIR
"RTN","IBNCPDRA",31,0)
 K DIR
"RTN","IBNCPDRA",32,0)
 I $D(DIRUT) Q "^"  ; Abort
"RTN","IBNCPDRA",33,0)
 S $P(VAL,U,2)=Y
"RTN","IBNCPDRA",34,0)
 Q VAL
"RTN","IBNCPDRA",35,0)
 ;
"RTN","IBNCPDRA",36,0)
SELAIB() ; (A)ctive, (I)nactive or (B)oth selection prompt.
"RTN","IBNCPDRA",37,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBNCPDRA",38,0)
 S DIR(0)="S^A:Active;I:Inactive;B:Both"
"RTN","IBNCPDRA",39,0)
 S DIR("A")="Display (A)ctive or (I)nactive or (B)oth ROI Status",DIR("B")="Both"
"RTN","IBNCPDRA",40,0)
 D ^DIR
"RTN","IBNCPDRA",41,0)
 K DIR
"RTN","IBNCPDRA",42,0)
 I $D(DIRUT) Q "^" ; Abort
"RTN","IBNCPDRA",43,0)
 Q Y
"RTN","IBNCPDRA",44,0)
 ;
"RTN","IBNCPDRA",45,0)
EXCEL() ; Export the report to MS Excel?
"RTN","IBNCPDRA",46,0)
 ; Function return values:
"RTN","IBNCPDRA",47,0)
 ;   0 - User selected "No" at prompt.
"RTN","IBNCPDRA",48,0)
 ;   1 - User selected "Yes" at prompt.
"RTN","IBNCPDRA",49,0)
 ;   ^ - User aborted.
"RTN","IBNCPDRA",50,0)
 ; This function allows the user to indicate whether the report should be
"RTN","IBNCPDRA",51,0)
 ; printed in a format that could easily be imported into an Excel
"RTN","IBNCPDRA",52,0)
 ; spreadsheet.  If the user wants to print in EXCEL format, the variable 
"RTN","IBNCPDRA",53,0)
 ; IBEXCEL will be set to '1', otherwise IBEXCEL will be set to '0' for "No" 
"RTN","IBNCPDRA",54,0)
 ; or "^" to abort.
"RTN","IBNCPDRA",55,0)
 ;
"RTN","IBNCPDRA",56,0)
 N DIR,DIRUT,Y
"RTN","IBNCPDRA",57,0)
 S DIR(0)="Y"
"RTN","IBNCPDRA",58,0)
 S DIR("A")="Export the report to Microsoft Excel (Y/N)"
"RTN","IBNCPDRA",59,0)
 I $G(IBEXCEL)=1 S DIR("B")="YES"
"RTN","IBNCPDRA",60,0)
 E  S DIR("B")="NO"
"RTN","IBNCPDRA",61,0)
 S DIR("?",1)="If you want to capture the output from this report in a format that"
"RTN","IBNCPDRA",62,0)
 S DIR("?",2)="could easily be imported into an Excel spreadsheet, then answer YES here."
"RTN","IBNCPDRA",63,0)
 S DIR("?")="If you want a normal report output, then answer NO here."
"RTN","IBNCPDRA",64,0)
 W !
"RTN","IBNCPDRA",65,0)
 D ^DIR
"RTN","IBNCPDRA",66,0)
 K DIR
"RTN","IBNCPDRA",67,0)
 I $D(DIRUT) Q "^" ; Abort
"RTN","IBNCPDRA",68,0)
 Q +Y
"RTN","IBNCPDRA",69,0)
 ;
"RTN","IBNCPDRA",70,0)
DEVICE() ; Device selection.
"RTN","IBNCPDRA",71,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,RET,RPTNAME,X,Y,ZTDESC,ZTRTN,ZTSAVE,ZTSK
"RTN","IBNCPDRA",72,0)
 S RET=1
"RTN","IBNCPDRA",73,0)
 S RPTNAME="Release of Information Expiration Report"
"RTN","IBNCPDRA",74,0)
 I 'IBEXCEL D
"RTN","IBNCPDRA",75,0)
 . W !!,"WARNING - THIS REPORT REQUIRES THAT A DEVICE WITH 132 COLUMN WIDTH BE USED."
"RTN","IBNCPDRA",76,0)
 . W !,"IT WILL NOT DISPLAY CORRECTLY USING 80 COLUMN WIDTH DEVICES",!
"RTN","IBNCPDRA",77,0)
 I IBEXCEL D
"RTN","IBNCPDRA",78,0)
 . W !!?5,"Before continuing, please set up your terminal to capture the"
"RTN","IBNCPDRA",79,0)
 . W !?5,"detail report data and save the detail report data in a text file"
"RTN","IBNCPDRA",80,0)
 . W !?5,"to a local drive. This report may take a while to run."
"RTN","IBNCPDRA",81,0)
 . W !!?5,"Note: To avoid undesired wrapping of the data saved to the file,"
"RTN","IBNCPDRA",82,0)
 . W !?11,"please enter '0;256;99999' at the 'DEVICE:' prompt.",!
"RTN","IBNCPDRA",83,0)
 . Q
"RTN","IBNCPDRA",84,0)
 S ZTRTN="COMPILE^IBNCPDRA(RPTNAME,DATESEL,AIB,IBEXCEL)"
"RTN","IBNCPDRA",85,0)
 S ZTDESC="IB REPORT: "_RPTNAME
"RTN","IBNCPDRA",86,0)
 S ZTSAVE("RPTNAME")=""
"RTN","IBNCPDRA",87,0)
 S ZTSAVE("DATESEL")=""
"RTN","IBNCPDRA",88,0)
 S ZTSAVE("AIB")=""
"RTN","IBNCPDRA",89,0)
 S ZTSAVE("IBEXCEL")=""
"RTN","IBNCPDRA",90,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE,"QM",1)
"RTN","IBNCPDRA",91,0)
 I POP S RET=0
"RTN","IBNCPDRA",92,0)
 I $G(ZTSK) W !!,"Report compilation has started with task# ",ZTSK,".",! S DIR(0)="E" D ^DIR K DIR
"RTN","IBNCPDRA",93,0)
 Q RET
"RTN","IBNCPDRA",94,0)
 ;
"RTN","IBNCPDRA",95,0)
COMPILE(RPTNAME,DATESEL,AIB,IBEXCEL) ; Compile the report.
"RTN","IBNCPDRA",96,0)
 ; RPTNAME = Report Name
"RTN","IBNCPDRA",97,0)
 ; DATESEL = The earliest and latest expiration dates (format: earliest^latest).
"RTN","IBNCPDRA",98,0)
 ; AIB     = Active, Inactive or Both.
"RTN","IBNCPDRA",99,0)
 ; IBEXCEL = 1 if user requested to display in EXCEL format; 0 otherwise.
"RTN","IBNCPDRA",100,0)
 K ^TMP("IBNCPDRA",$J)
"RTN","IBNCPDRA",101,0)
 I '$D(ZTQUEUED),'IBEXCEL U 0 W !,"Compiling Release of Information Expiration Report. Please wait..." U IO
"RTN","IBNCPDRA",102,0)
 ; Collect the data
"RTN","IBNCPDRA",103,0)
 D GETDATA(DATESEL,AIB)
"RTN","IBNCPDRA",104,0)
 ; Display the report
"RTN","IBNCPDRA",105,0)
 D REPORT^IBNCPDRB(RPTNAME,DATESEL,AIB,IBEXCEL)
"RTN","IBNCPDRA",106,0)
 D ^%ZISC
"RTN","IBNCPDRA",107,0)
 K ^TMP("IBNCPDRA",$J)
"RTN","IBNCPDRA",108,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBNCPDRA",109,0)
 Q
"RTN","IBNCPDRA",110,0)
 ;
"RTN","IBNCPDRA",111,0)
GETDATA(DATES,AIB) ; Get the data from ^IBT(356.25)
"RTN","IBNCPDRA",112,0)
 ; DATES = The earliest and latest expiration dates (format: earliest^latest).
"RTN","IBNCPDRA",113,0)
 ; AIB   = Active, Inactive or Both
"RTN","IBNCPDRA",114,0)
 N ACTIVE,ADDED,CNT,DATE1,DATE2,D0,DOD,DPTIEN,DRUG,DRUGNAME,EFFDATE,ENTERDBY
"RTN","IBNCPDRA",115,0)
 N EXPDATE,INS,INSNAME,PATNAME,NODE0,NODE1,STATUS,USERIEN
"RTN","IBNCPDRA",116,0)
 S DATE1=$P(DATES,U),DATE2=$P(DATES,U,2)
"RTN","IBNCPDRA",117,0)
 S CNT=0
"RTN","IBNCPDRA",118,0)
 S D0=0 F  S D0=$O(^IBT(356.25,D0)) Q:'D0  D
"RTN","IBNCPDRA",119,0)
 . S (DRUGNAME,ENTERDBY,INSNAME,PATNAME)=""
"RTN","IBNCPDRA",120,0)
 . S CNT=CNT+1
"RTN","IBNCPDRA",121,0)
 . I CNT#1000=0,'$D(ZTQUEUED) U 0 W "." U IO  ; Write another dot after "Please wait..."
"RTN","IBNCPDRA",122,0)
 . S NODE0=$G(^IBT(356.25,D0,0)),NODE1=$G(^IBT(356.25,D0,1))
"RTN","IBNCPDRA",123,0)
 . S DPTIEN=$P(NODE0,U,2)      ; patient ien to ^DPT file
"RTN","IBNCPDRA",124,0)
 . S DRUG=$P(NODE0,U,3)        ; drug ien to ^PSDRUG file
"RTN","IBNCPDRA",125,0)
 . S INS=$P(NODE0,U,4)         ; insurance ien to ^DIC(36
"RTN","IBNCPDRA",126,0)
 . S EFFDATE=$P(NODE0,U,5)     ; effective date of ROI
"RTN","IBNCPDRA",127,0)
 . S EXPDATE=$P(NODE0,U,6)     ; expiration date of ROI
"RTN","IBNCPDRA",128,0)
 . S ACTIVE=$P(NODE0,U,7)      ; active? (0=no; 1=yes)
"RTN","IBNCPDRA",129,0)
 . S ADDED=$P(NODE1,U)         ; date added to ROI Claims Tracking file
"RTN","IBNCPDRA",130,0)
 . S USERIEN=$P(NODE1,U,2)     ; user who added the ROI entry
"RTN","IBNCPDRA",131,0)
 . I EXPDATE="" Q
"RTN","IBNCPDRA",132,0)
 . I EXPDATE<DATE1!(EXPDATE>DATE2) Q
"RTN","IBNCPDRA",133,0)
 . I AIB="I",ACTIVE Q
"RTN","IBNCPDRA",134,0)
 . I AIB="A",'ACTIVE Q
"RTN","IBNCPDRA",135,0)
 . I DPTIEN'="" S PATNAME=$P($G(^DPT(DPTIEN,0)),U)
"RTN","IBNCPDRA",136,0)
 . I PATNAME="" Q
"RTN","IBNCPDRA",137,0)
 . S DOD=$P($G(^DPT(DPTIEN,.35)),U)  ; date of death
"RTN","IBNCPDRA",138,0)
 . S STATUS=$S(ACTIVE:"A",1:"I")
"RTN","IBNCPDRA",139,0)
 . I USERIEN'="" S ENTERDBY=$P($G(^VA(200,USERIEN,0)),U)
"RTN","IBNCPDRA",140,0)
 . I ENTERDBY="" S ENTERDBY="UNKNOWN"
"RTN","IBNCPDRA",141,0)
 . I DRUG'="" S DRUGNAME=$$DRUG(DRUG)
"RTN","IBNCPDRA",142,0)
 . I DRUGNAME="" S DRUGNAME="NO DRUG NAME"
"RTN","IBNCPDRA",143,0)
 . I INS'="" S INSNAME=$P($G(^DIC(36,INS,0)),U)
"RTN","IBNCPDRA",144,0)
 . I INSNAME="" S INSNAME="NO INSURANCE NAME"
"RTN","IBNCPDRA",145,0)
 . S ^TMP("IBNCPDRA",$J,EXPDATE,PATNAME,D0)=DOD_U_EFFDATE_U_STATUS_U_ADDED_U_ENTERDBY_U_INSNAME_U_DRUGNAME
"RTN","IBNCPDRA",146,0)
 Q
"RTN","IBNCPDRA",147,0)
 ; Get drug info
"RTN","IBNCPDRA",148,0)
DRUG(DRUGIEN) ; Get drug name
"RTN","IBNCPDRA",149,0)
 ; DRUGIEN = drug ien pointer
"RTN","IBNCPDRA",150,0)
 N X
"RTN","IBNCPDRA",151,0)
 K ^TMP($J,"IBNCPDRA_DRUG")
"RTN","IBNCPDRA",152,0)
 D DATA^PSS50(DRUGIEN,"","","","","IBNCPDRA_DRUG") ;DBIA #4533
"RTN","IBNCPDRA",153,0)
 S X=$G(^TMP($J,"IBNCPDRA_DRUG",DRUGIEN,.01))
"RTN","IBNCPDRA",154,0)
 K ^TMP($J,"IBNCPDRA_DRUG")
"RTN","IBNCPDRA",155,0)
 Q X
"RTN","IBNCPDRB")
0^19^B19609001
"RTN","IBNCPDRB",1,0)
IBNCPDRB ;ALB/CFS - ROI EXPIRATION REPORT ;21-SEP-15
"RTN","IBNCPDRB",2,0)
 ;;2.0;INTEGRATED BILLING;**550**;21-MAR-94;Build 25
"RTN","IBNCPDRB",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPDRB",4,0)
 ;
"RTN","IBNCPDRB",5,0)
 Q
"RTN","IBNCPDRB",6,0)
REPORT(RPTNAME,DATESEL,AIB,IBEXCEL) ;
"RTN","IBNCPDRB",7,0)
 ; RPTNAME = Report name
"RTN","IBNCPDRB",8,0)
 ; DATESEL = Earliest and Latest expiration dates selected by user (format: earliest^latest)
"RTN","IBNCPDRB",9,0)
 ; AIB     = "A" - User chose to display Active statuses only
"RTN","IBNCPDRB",10,0)
 ;           "I" - User chose to display on Inactive statuses only
"RTN","IBNCPDRB",11,0)
 ;           "B" - User chose to display Active and Inactive statuses
"RTN","IBNCPDRB",12,0)
 ; IBEXCEL = 1 if the user requested to print in EXCEL format; 0 otherwise
"RTN","IBNCPDRB",13,0)
 N IBEDATE,IBLDATE,IBPAGE,CRT
"RTN","IBNCPDRB",14,0)
 S RPTNAME=$G(RPTNAME),DATESEL=$G(DATESEL)
"RTN","IBNCPDRB",15,0)
 S IBEDATE=$$FMTE^XLFDT($P(DATESEL,U),"5DZ")       ; Earliest expiration date selected.
"RTN","IBNCPDRB",16,0)
 S IBLDATE=$$FMTE^XLFDT($P(DATESEL,U,2),"5DZ")     ; Latest expiration date selected.
"RTN","IBNCPDRB",17,0)
 S CRT=$S(IOST["C-":1,1:0)  ; Screen variable.
"RTN","IBNCPDRB",18,0)
 I IBEXCEL D EXCELHDR
"RTN","IBNCPDRB",19,0)
 I 'IBEXCEL D HEADER
"RTN","IBNCPDRB",20,0)
 D GETTMP
"RTN","IBNCPDRB",21,0)
 Q
"RTN","IBNCPDRB",22,0)
 ;
"RTN","IBNCPDRB",23,0)
EXCELHDR ;
"RTN","IBNCPDRB",24,0)
 ; Print headers in EXCEL format.
"RTN","IBNCPDRB",25,0)
 W !,"Patient name^Date of Death^Effective Date^Expiration Date^Status^Date Added^Entered By^Insurance Name^Drug Name"
"RTN","IBNCPDRB",26,0)
 Q
"RTN","IBNCPDRB",27,0)
 ;
"RTN","IBNCPDRB",28,0)
HEADER ;
"RTN","IBNCPDRB",29,0)
 N DASH,NOW
"RTN","IBNCPDRB",30,0)
 S DASH=""
"RTN","IBNCPDRB",31,0)
 W @IOF
"RTN","IBNCPDRB",32,0)
 S IBPAGE=$G(IBPAGE)+1
"RTN","IBNCPDRB",33,0)
 S $P(DASH,"-",133)=""
"RTN","IBNCPDRB",34,0)
 W !,RPTNAME,?119,"Page: ",?126,IBPAGE
"RTN","IBNCPDRB",35,0)
 S NOW=$$NOW^XLFDT(),NOW=$$FMTE^XLFDT(NOW,1)
"RTN","IBNCPDRB",36,0)
 W !,"Date Range: "_IBEDATE_" - "_IBLDATE,?101,"Run Date: "_NOW
"RTN","IBNCPDRB",37,0)
 W !,"Status: ",$S(AIB="A":"Active ROIs",AIB="I":"Inactive ROIs",1:"All")
"RTN","IBNCPDRB",38,0)
 W !,DASH
"RTN","IBNCPDRB",39,0)
 W !,?23,"Date of",?33,"Eff.",?44,"Exp.",?60,"Date"
"RTN","IBNCPDRB",40,0)
 W !,"Patient Name",?23,"Death",?33,"Date",?44,"Date",?55,"St",?60,"Added",?71,"Entered By"
"RTN","IBNCPDRB",41,0)
 W ?90,"Insurance Name",?110,"Drug Name"
"RTN","IBNCPDRB",42,0)
 W !,DASH
"RTN","IBNCPDRB",43,0)
 Q
"RTN","IBNCPDRB",44,0)
GETTMP ;
"RTN","IBNCPDRB",45,0)
 ; Get the data from the scratch global.
"RTN","IBNCPDRB",46,0)
 N ADDED,DATA,DOD,DRUGNAME,EXPDATE,EFFDATE,IBQ,INSNAME,PATNAME,SUB1,SUB2,SUB3
"RTN","IBNCPDRB",47,0)
 N USERNAME
"RTN","IBNCPDRB",48,0)
 S IBQ=0
"RTN","IBNCPDRB",49,0)
 I '$D(^TMP("IBNCPDRA",$J)) D  Q
"RTN","IBNCPDRB",50,0)
 . I 'IBEXCEL W !!,?51,"***** NO DATA TO REPORT *****",! S:CRT&'$D(ZTQUEUED) IBQ=$$PAUSE() Q
"RTN","IBNCPDRB",51,0)
 . W !,"***** NO DATA TO REPORT *****",! S IBQ=$$PAUSE()
"RTN","IBNCPDRB",52,0)
 S SUB1="" F  S SUB1=$O(^TMP("IBNCPDRA",$J,SUB1),-1) Q:SUB1=""!($G(IBQ))  D
"RTN","IBNCPDRB",53,0)
 . S SUB2="" F  S SUB2=$O(^TMP("IBNCPDRA",$J,SUB1,SUB2)) Q:SUB2=""!($G(IBQ))  D
"RTN","IBNCPDRB",54,0)
 .. S SUB3="" F  S SUB3=$O(^TMP("IBNCPDRA",$J,SUB1,SUB2,SUB3)) Q:SUB3=""!($G(IBQ))  D
"RTN","IBNCPDRB",55,0)
 ... S DATA=^TMP("IBNCPDRA",$J,SUB1,SUB2,SUB3)
"RTN","IBNCPDRB",56,0)
 ... S DOD=$$FMTE^XLFDT($P(DATA,U),"2DZ")        ; date of death
"RTN","IBNCPDRB",57,0)
 ... S EFFDATE=$$FMTE^XLFDT($P(DATA,U,2),"2DZ")  ; effective date of ROI
"RTN","IBNCPDRB",58,0)
 ... S STATUS=$P(DATA,U,3)                       ; "A" for Active; "I" for Inactive
"RTN","IBNCPDRB",59,0)
 ... S ADDED=$$FMTE^XLFDT($P(DATA,U,4),"2DZ")    ; date added to Claims Tracking ROI file
"RTN","IBNCPDRB",60,0)
 ... S USERNAME=$P(DATA,U,5)                     ; user who added the ROI entry
"RTN","IBNCPDRB",61,0)
 ... S INSNAME=$P(DATA,U,6)                      ; insurance name
"RTN","IBNCPDRB",62,0)
 ... S DRUGNAME=$P(DATA,U,7)                     ; drug name
"RTN","IBNCPDRB",63,0)
 ... S EXPDATE=$$FMTE^XLFDT(SUB1,"2DZ")          ; expiration date of ROI
"RTN","IBNCPDRB",64,0)
 ... S PATNAME=SUB2                              ; patient name
"RTN","IBNCPDRB",65,0)
 ... I IBEXCEL D EXCELN(PATNAME,DOD,EFFDATE,EXPDATE,STATUS,ADDED,USERNAME,INSNAME,DRUGNAME) Q
"RTN","IBNCPDRB",66,0)
 ... D WRTDATA(PATNAME,DOD,EFFDATE,EXPDATE,STATUS,ADDED,USERNAME,INSNAME,DRUGNAME) Q:$G(IBQ)
"RTN","IBNCPDRB",67,0)
 I $G(IBQ) Q
"RTN","IBNCPDRB",68,0)
 I 'IBEXCEL W !!,"*** END OF REPORT ***",!
"RTN","IBNCPDRB",69,0)
 I CRT,'$D(ZTQUEUED) S IBQ=$$PAUSE()  ; Write the pause statement to screen only.
"RTN","IBNCPDRB",70,0)
 Q
"RTN","IBNCPDRB",71,0)
 ;
"RTN","IBNCPDRB",72,0)
EXCELN(PATNAME,DOD,EFFDATE,EXPDATE,STATUS,ADDED,USERNAME,INSNAME,DRUGNAME) ;
"RTN","IBNCPDRB",73,0)
 ; Display data in EXCEL format
"RTN","IBNCPDRB",74,0)
 S STATUS=$S(STATUS="A":"Active",1:"Inactive")
"RTN","IBNCPDRB",75,0)
 W !,PATNAME,"^",DOD,"^",EFFDATE,"^",EXPDATE,"^",STATUS,"^",ADDED,"^",USERNAME,"^",INSNAME,"^",DRUGNAME
"RTN","IBNCPDRB",76,0)
 Q
"RTN","IBNCPDRB",77,0)
 ;
"RTN","IBNCPDRB",78,0)
WRTDATA(PATNAME,DOD,EFFDATE,EXPDATE,STATUS,ADDED,USERNAME,INSNAME,DRUGNAME) ;
"RTN","IBNCPDRB",79,0)
 ; Display the data to screen or to ListMan Queued report depending on user request.
"RTN","IBNCPDRB",80,0)
 W !,$E(PATNAME,1,21),?23,DOD,?33,EFFDATE,?44,EXPDATE
"RTN","IBNCPDRB",81,0)
 W ?55,STATUS,?60,ADDED,?71,$E(USERNAME,1,16),?90,$E(INSNAME,1,17),?110,$E(DRUGNAME,1,22)
"RTN","IBNCPDRB",82,0)
 I $Y>(IOSL-4) D
"RTN","IBNCPDRB",83,0)
 . I CRT,'$D(ZTQUEUED) W ! S IBQ=$$PAUSE()  ; Write the pause statement to screen only. 
"RTN","IBNCPDRB",84,0)
 . I $G(IBQ) Q  ; User chooses to exit report with "^".
"RTN","IBNCPDRB",85,0)
 . D HEADER
"RTN","IBNCPDRB",86,0)
 Q
"RTN","IBNCPDRB",87,0)
 ;
"RTN","IBNCPDRB",88,0)
PAUSE() ;
"RTN","IBNCPDRB",89,0)
 ; Press RETURN to continue or '^' to exit.
"RTN","IBNCPDRB",90,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,QUIT,X,Y
"RTN","IBNCPDRB",91,0)
 S QUIT=0
"RTN","IBNCPDRB",92,0)
 I IBEXCEL W !
"RTN","IBNCPDRB",93,0)
 S DIR(0)="E" D ^DIR K DIR
"RTN","IBNCPDRB",94,0)
 I $D(DIRUT) S QUIT=1
"RTN","IBNCPDRB",95,0)
 Q QUIT
"RTN","IBNCPEV")
0^21^B98081615
"RTN","IBNCPEV",1,0)
IBNCPEV ;DALOI/SS - NCPDP BILLING EVENTS REPORT ;5/22/08  14:27
"RTN","IBNCPEV",2,0)
 ;;2.0;INTEGRATED BILLING;**342,363,383,384,411,435,452,521,516,550**;21-MAR-94;Build 25
"RTN","IBNCPEV",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPEV",4,0)
RPT ;
"RTN","IBNCPEV",5,0)
 N IBBDT,IBDIVS,IBDTL,IBEDT,IBM1,IBM2,IBM3,IBPAGE,IBPAT,IBQ,IBRX,IBSCR,Y
"RTN","IBNCPEV",6,0)
 N IBECME
"RTN","IBNCPEV",7,0)
 D SETVARS^IBNCPEV1
"RTN","IBNCPEV",8,0)
 Q:IBQ
"RTN","IBNCPEV",9,0)
 D START
"RTN","IBNCPEV",10,0)
 D ^%ZISC
"RTN","IBNCPEV",11,0)
 I IBQ W !,"Cancelled"
"RTN","IBNCPEV",12,0)
 Q
"RTN","IBNCPEV",13,0)
 ;
"RTN","IBNCPEV",14,0)
START ;
"RTN","IBNCPEV",15,0)
 N IBFN,IBFROM,IBI,IBN,IBNB,IBNDX,IBNUM,IBRX1,IBSC,IBTO,IB1ST,REF,X,Z,Z1
"RTN","IBNCPEV",16,0)
 ;Constants
"RTN","IBNCPEV",17,0)
 S IBSC="STATUS CHECK",IBNB="Not ECME billable: ",IBNDX="IBNCPDP-"
"RTN","IBNCPEV",18,0)
 ;get the first date
"RTN","IBNCPEV",19,0)
 S IBFROM=$O(^IBCNR(366.14,"B",IBBDT-1)) Q:+IBFROM=0
"RTN","IBNCPEV",20,0)
 ;get the last date
"RTN","IBNCPEV",21,0)
 S IBTO=$O(^IBCNR(366.14,"B",IBEDT+1),-1) Q:+IBTO=0
"RTN","IBNCPEV",22,0)
 ;
"RTN","IBNCPEV",23,0)
 S REF=$NA(^TMP($J,"IBNCPDPE"))
"RTN","IBNCPEV",24,0)
 ;
"RTN","IBNCPEV",25,0)
 K @REF
"RTN","IBNCPEV",26,0)
 ;
"RTN","IBNCPEV",27,0)
 I +$G(IBECME) S IBRX=$$GETRX^IBNCPEV1(IBECME,IBFROM,IBTO,.IBECME) I 'IBRX  W !!,"No data found for the specified date range and ECME #" Q  ; no match with ECME #
"RTN","IBNCPEV",28,0)
 ;collect
"RTN","IBNCPEV",29,0)
 N IBDFN,IBDTIEN,IBEVNT,IBP4,IBRXIEN,IBZ0,IBZ1,IBZ2
"RTN","IBNCPEV",30,0)
 S IBI=IBFROM-1
"RTN","IBNCPEV",31,0)
 F  S IBI=$O(^IBCNR(366.14,"B",IBI)) Q:+IBI=0  Q:IBI>IBTO  D
"RTN","IBNCPEV",32,0)
 . S IBDTIEN=$O(^IBCNR(366.14,"B",IBI,0))
"RTN","IBNCPEV",33,0)
 . S IBN=0 F  S IBN=$O(^IBCNR(366.14,IBDTIEN,1,IBN)) Q:+IBN=0  D
"RTN","IBNCPEV",34,0)
 . . S IBZ0=$G(^IBCNR(366.14,IBDTIEN,1,IBN,0))
"RTN","IBNCPEV",35,0)
 . . ;if not "ALL" was selected IBDIVS>0 AND the division in #366.14 record is among those selected by the user
"RTN","IBNCPEV",36,0)
 . . I IBDIVS>0,$$CHECKDIV^IBNCPEV1(+$P(IBZ0,U,9),.IBDIVS)=0 Q
"RTN","IBNCPEV",37,0)
 . . S IBDFN=+$P(IBZ0,U,3)
"RTN","IBNCPEV",38,0)
 . . Q:IBDFN=0
"RTN","IBNCPEV",39,0)
 . . S IBEVNT=$$GET1^DIQ(366.141,IBN_","_IBDTIEN_",",.01)
"RTN","IBNCPEV",40,0)
 . . S IBZ2=$G(^IBCNR(366.14,IBDTIEN,1,IBN,2))
"RTN","IBNCPEV",41,0)
 . . S IBRXIEN=$P(IBZ2,U,12)
"RTN","IBNCPEV",42,0)
 . . I IBRXIEN="" S IBRXIEN=$P(IBZ2,U,1)
"RTN","IBNCPEV",43,0)
 . . I IBPAT,IBDFN'=IBPAT Q
"RTN","IBNCPEV",44,0)
 . . I IBM2="E",IBEVNT[IBSC,'$P(IBZ0,U,7) Q
"RTN","IBNCPEV",45,0)
 . . I IBM2="N",IBEVNT'[IBSC Q
"RTN","IBNCPEV",46,0)
 . . I IBM2="N",IBEVNT[IBSC,$P(IBZ0,U,7) Q
"RTN","IBNCPEV",47,0)
 . . ;if "No Rx IEN" case then create a unique artificial IBRXIEN to be able
"RTN","IBNCPEV",48,0)
 . . ;to create ^TMP entry and display available information in the report
"RTN","IBNCPEV",49,0)
 . . I +$G(IBRXIEN)=0 S IBRXIEN=+(IBDTIEN_"."_IBN) G SETTMP
"RTN","IBNCPEV",50,0)
 . . I IBRX,IBRXIEN'=IBRX Q
"RTN","IBNCPEV",51,0)
 . . I $$RXNUM(IBRXIEN)="" Q
"RTN","IBNCPEV",52,0)
 . . I IBM3'="A",IBM3'=$$RXWMC^IBNCPRR(+IBRXIEN) Q
"RTN","IBNCPEV",53,0)
SETTMP . . S @REF@(+IBRXIEN,+$P(IBZ2,U,3),IBDTIEN,IBN)=""
"RTN","IBNCPEV",54,0)
 ;
"RTN","IBNCPEV",55,0)
 I '$D(@REF) W !!,"No data found for the specified input criteria" Q
"RTN","IBNCPEV",56,0)
 ;
"RTN","IBNCPEV",57,0)
PRINT ; scratch global exists and has data
"RTN","IBNCPEV",58,0)
 ; begin the report printing.  Entry point into this routine from BPSVRX.
"RTN","IBNCPEV",59,0)
 ; DBIA #5712 defines this entry point for ECME.
"RTN","IBNCPEV",60,0)
 ;
"RTN","IBNCPEV",61,0)
 ;print
"RTN","IBNCPEV",62,0)
 S IBNUM=0
"RTN","IBNCPEV",63,0)
 U IO D HDR
"RTN","IBNCPEV",64,0)
 S IBRX1="" F  S IBRX1=$O(@REF@(IBRX1)) Q:IBRX1=""  D  Q:IBQ
"RTN","IBNCPEV",65,0)
 .S IBFN="" F  S IBFN=$O(@REF@(IBRX1,IBFN)) Q:IBFN=""  D  Q:IBQ
"RTN","IBNCPEV",66,0)
 ..S IB1ST=1
"RTN","IBNCPEV",67,0)
 ..S IBI="" F  S IBI=$O(@REF@(IBRX1,IBFN,IBI)) Q:IBI=""  D  Q:IBQ
"RTN","IBNCPEV",68,0)
 ...S IBN="" F  S IBN=$O(@REF@(IBRX1,IBFN,IBI,IBN)) Q:IBN=""  D  Q:IBQ
"RTN","IBNCPEV",69,0)
 ....N IBZ,IBD1,IBD2,IBD3,IBD4,IBD7,IBINS,IBY
"RTN","IBNCPEV",70,0)
 ....;load main
"RTN","IBNCPEV",71,0)
 ....S IBZ=$G(^IBCNR(366.14,IBI,1,IBN,0))
"RTN","IBNCPEV",72,0)
 ....;load IBD array
"RTN","IBNCPEV",73,0)
 ....S IBD1=$G(^IBCNR(366.14,IBI,1,IBN,1))
"RTN","IBNCPEV",74,0)
 ....S IBD2=$G(^IBCNR(366.14,IBI,1,IBN,2))
"RTN","IBNCPEV",75,0)
 ....S IBD3=$G(^IBCNR(366.14,IBI,1,IBN,3))
"RTN","IBNCPEV",76,0)
 ....S IBD4=$G(^IBCNR(366.14,IBI,1,IBN,4))
"RTN","IBNCPEV",77,0)
 ....S IBD7=$G(^IBCNR(366.14,IBI,1,IBN,7))
"RTN","IBNCPEV",78,0)
 ....S IBY=0
"RTN","IBNCPEV",79,0)
 ....;load insurance multiple
"RTN","IBNCPEV",80,0)
 ....F  S IBY=$O(^IBCNR(366.14,IBI,1,IBN,5,IBY)) Q:+IBY=0  D
"RTN","IBNCPEV",81,0)
 .....S IBINS(IBY,0)=$G(^IBCNR(366.14,IBI,1,IBN,5,IBY,0))
"RTN","IBNCPEV",82,0)
 .....S IBINS(IBY,1)=$G(^IBCNR(366.14,IBI,1,IBN,5,IBY,1))
"RTN","IBNCPEV",83,0)
 .....S IBINS(IBY,2)=$G(^IBCNR(366.14,IBI,1,IBN,5,IBY,2))
"RTN","IBNCPEV",84,0)
 .....S IBINS(IBY,3)=$G(^IBCNR(366.14,IBI,1,IBN,5,IBY,3))
"RTN","IBNCPEV",85,0)
 ....;
"RTN","IBNCPEV",86,0)
 ....I IB1ST D  Q:IBQ
"RTN","IBNCPEV",87,0)
 .....S IBNUM=IBNUM+1 I IBNUM>1 D ULINE("-") Q:IBQ
"RTN","IBNCPEV",88,0)
 .....D CHKP Q:IBQ
"RTN","IBNCPEV",89,0)
 .....W !,IBNUM," ",?4,$$RXNUM(IBRX1)," ",?12,IBFN," ",?16,$$DAT(+$P(IBD2,U,6)) ;RX# Fill# Date of Service
"RTN","IBNCPEV",90,0)
 .....W " ",?28,$E($$PAT(+$P(IBZ,U,3)),1,21)," ",?50,$E($$DRUG(+$P(IBZ,U,3),IBRX1),1,30)
"RTN","IBNCPEV",91,0)
 .....S IB1ST=0
"RTN","IBNCPEV",92,0)
 ....N IND S IND=6
"RTN","IBNCPEV",93,0)
 ....D CHKP Q:IBQ
"RTN","IBNCPEV",94,0)
 ....S IBEVNT=$$GET1^DIQ(366.141,IBN_","_IBI_",",.01)
"RTN","IBNCPEV",95,0)
 ....W !,?IND,$$EVNT(IBEVNT)," ",?16,$$TIM($P(IBZ,U,5)),?31," Status:",$E($$STAT(IBEVNT,$P(IBZ,U,7)_U_$P(IBZ,U,8),$P(IBD3,U,7),$P(IBD3,U,1)),1,40)
"RTN","IBNCPEV",96,0)
 ....Q:'IBDTL  ; no details
"RTN","IBNCPEV",97,0)
 ....I IBEVNT="BILL" D DBILL Q
"RTN","IBNCPEV",98,0)
 ....I IBEVNT="REJECT" D DREJ Q
"RTN","IBNCPEV",99,0)
 ....I IBEVNT["REVERSE" D DREV Q
"RTN","IBNCPEV",100,0)
 ....I IBEVNT["SUBMIT" D DSUB Q
"RTN","IBNCPEV",101,0)
 ....I IBEVNT["CLOSE" D DCLO Q
"RTN","IBNCPEV",102,0)
 ....I IBEVNT["REOPEN" D REOPEN^IBNCPEV1 Q
"RTN","IBNCPEV",103,0)
 ....I IBEVNT["RELEASE" D DREL Q
"RTN","IBNCPEV",104,0)
 ....I IBEVNT[IBSC D DSTAT^IBNCPEV1(IBZ,.IBD2,.IBD3,.IBD4,.IBINS,.IBD7) Q     ; *550 pass the 0 node to DSTAT
"RTN","IBNCPEV",105,0)
 ....I IBEVNT["BILL CANCELLED" D BCANC Q
"RTN","IBNCPEV",106,0)
 I IBSCR,'IBQ W !,"End of report, press RETURN to continue." R X:DTIME
"RTN","IBNCPEV",107,0)
 K @REF
"RTN","IBNCPEV",108,0)
 Q
"RTN","IBNCPEV",109,0)
 ;
"RTN","IBNCPEV",110,0)
STAT(X,RES,CR,IBIFN) ;provides STATUS information
"RTN","IBNCPEV",111,0)
 N IBNL,IBSC
"RTN","IBNCPEV",112,0)
 S IBNL="Plan not linked to the Payer",IBSC="STATUS CHECK"
"RTN","IBNCPEV",113,0)
 I X[IBSC,RES[IBNB S RES="0^"_$P(RES,IBNB,2)
"RTN","IBNCPEV",114,0)
 I X[IBSC,RES[IBNL S RES="0^Plan not linked" ; shorten too long line
"RTN","IBNCPEV",115,0)
 I X[IBSC,'RES,RES["Non-Billable in CT" Q $P(RES,U,2)
"RTN","IBNCPEV",116,0)
 I X[IBSC Q $S(RES:"",1:"non-")_"ECME Billable"_$S(RES:"",$P(RES,U,2)="":"",$P(RES,U,2)="NEEDS SC DETERMINATION":" NEEDS "_$$GETNOANS^IBNCPEV1(IBD4)_" DETERMINATION",1:", "_$P(RES,U,2))
"RTN","IBNCPEV",117,0)
 I X="BILL",'RES,IBIFN Q "Bill "_$$BILL(IBIFN)_" created with ERRORs"
"RTN","IBNCPEV",118,0)
 I X="BILL",'RES Q "Error: "_$P(RES,U,2)
"RTN","IBNCPEV",119,0)
 I X="BILL",'IBIFN Q $P(RES,U,2)
"RTN","IBNCPEV",120,0)
 I X="BILL" Q "Bill# "_$$BILL(+IBIFN)_" created"
"RTN","IBNCPEV",121,0)
 I X["REVERSE",$G(CR)=7,+RES=1 Q "set N/B Reason: Rx deleted, no Bill to cancel."
"RTN","IBNCPEV",122,0)
 I X["REVERSE" Q $S(+RES=1:"success",RES>1:"Bill# "_$$BILL(+RES)_" cancelled",'RES:"ECME Claim reversed, no Bill to cancel",1:$P(RES,U,2))
"RTN","IBNCPEV",123,0)
 I 'RES Q $P(RES,U,2)
"RTN","IBNCPEV",124,0)
 Q "OK"
"RTN","IBNCPEV",125,0)
 ;
"RTN","IBNCPEV",126,0)
DBILL ; BILL section
"RTN","IBNCPEV",127,0)
 ; input params IBD*, IBZ, IBINS*
"RTN","IBNCPEV",128,0)
 ;
"RTN","IBNCPEV",129,0)
 I '$P(IBZ,U,7),$L($P(IBZ,U,8)),$P(IBD3,U,1) D CHKP Q:IBQ  W !?10,"ERROR: ",$P(IBZ,U,8)
"RTN","IBNCPEV",130,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",131,0)
 D SUBHDR
"RTN","IBNCPEV",132,0)
 I $P(IBD2,U,4) D CHKP Q:IBQ  W !?10,"DRUG:",$$DRUGAPI^IBNCPEV1(+$P(IBD2,U,4),.01)
"RTN","IBNCPEV",133,0)
 ;
"RTN","IBNCPEV",134,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",135,0)
 W !?10,"NDC:",$S($P(IBD2,U,5):$P(IBD2,U,5),1:"No")
"RTN","IBNCPEV",136,0)
 W ", NCPDP QTY:",$S($P(IBD2,U,14):$P(IBD2,U,14),1:"No")
"RTN","IBNCPEV",137,0)
 W $$UNITDISP^IBNCPEV1($P(IBD2,U,14),$P(IBD2,U,15))   ; display NCPDP unit type
"RTN","IBNCPEV",138,0)
 ;
"RTN","IBNCPEV",139,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",140,0)
 W !?10,"BILLED QTY:",$S($P(IBD2,U,8):$P(IBD2,U,8),1:"No")
"RTN","IBNCPEV",141,0)
 W $$UNITDISP^IBNCPEV1($P(IBD2,U,8),$P(IBD2,U,13))    ; display billing unit type
"RTN","IBNCPEV",142,0)
 W ", DAYS SUPPLY:",$S($P(IBD2,U,9):$P(IBD2,U,9),1:"No")
"RTN","IBNCPEV",143,0)
 ;
"RTN","IBNCPEV",144,0)
 W !,?10,"GROSS AMT DUE:",$J($P(IBD3,U,2),0,2),", "
"RTN","IBNCPEV",145,0)
 W "TOTAL AMT PAID:",$J($P(IBD3,U,5),0,2)
"RTN","IBNCPEV",146,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",147,0)
 ;
"RTN","IBNCPEV",148,0)
 ; display payer reported paid amounts
"RTN","IBNCPEV",149,0)
 W !?10,"INGREDIENT COST PAID:",$S($L($P(IBD3,U,12)):$J($P(IBD3,U,12),0,2),1:"No")
"RTN","IBNCPEV",150,0)
 W ", DISPENSING FEE PAID:",$S($L($P(IBD3,U,13)):$J($P(IBD3,U,13),0,2),1:"No")
"RTN","IBNCPEV",151,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",152,0)
 W !?10,"PATIENT RESP (INS):",$S($L($P(IBD3,U,14)):$FN(-$P(IBD3,U,14),"P",2),1:"No")
"RTN","IBNCPEV",153,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",154,0)
 ;
"RTN","IBNCPEV",155,0)
 ;IB*2.0*516/baa Use HIPAA compliant fields
"RTN","IBNCPEV",156,0)
 W !?10,"PLAN:",$$GET1^DIQ(355.3,+$P(IBD3,U,3)_",",2.01),", INSURANCE: ",$$GET1^DIQ(355.3,+$P(IBD3,U,3)_",",.01)
"RTN","IBNCPEV",157,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",158,0)
 D DISPUSR
"RTN","IBNCPEV",159,0)
 Q
"RTN","IBNCPEV",160,0)
 ;
"RTN","IBNCPEV",161,0)
DREJ ; reject section
"RTN","IBNCPEV",162,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",163,0)
 D SUBHDR
"RTN","IBNCPEV",164,0)
 ;IB*2.0*516/baa - Use HIPAA compliant fields
"RTN","IBNCPEV",165,0)
 I +$P(IBD3,U,3) D CHKP Q:IBQ  W !?10,"PLAN:",$$GET1^DIQ(355.3,+$P(IBD3,U,3)_",",2.01),", INSURANCE: ",$$GET1^DIQ(355.3,+$P(IBD3,U,3)_",",.01)
"RTN","IBNCPEV",166,0)
 D CLRS Q:IBQ
"RTN","IBNCPEV",167,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",168,0)
 D DISPUSR
"RTN","IBNCPEV",169,0)
 Q
"RTN","IBNCPEV",170,0)
 ;
"RTN","IBNCPEV",171,0)
DCLO ; close
"RTN","IBNCPEV",172,0)
 D DREJ
"RTN","IBNCPEV",173,0)
 Q
"RTN","IBNCPEV",174,0)
 ;
"RTN","IBNCPEV",175,0)
DSUB ; submit
"RTN","IBNCPEV",176,0)
 N IBIN,IBHP
"RTN","IBNCPEV",177,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",178,0)
 D SUBHDR
"RTN","IBNCPEV",179,0)
 I $L($P(IBD1,U,6)) D CHKP W !?10,"PAYER RESPONSE: ",$P(IBD1,U,6)
"RTN","IBNCPEV",180,0)
 ;IB*2.0*516/baa - Use HIPAA compliant fields
"RTN","IBNCPEV",181,0)
 ; IB*2.0*521 Display HPID but do not add '*' if it does not pass validation checks
"RTN","IBNCPEV",182,0)
 I $L($P(IBD3,U,3)) D CHKP Q:IBQ  D
"RTN","IBNCPEV",183,0)
 .S IBIN=+$G(^IBA(355.3,+$P(IBD3,U,3),0)),IBHP=$$HPD^IBCNHUT1(IBIN)
"RTN","IBNCPEV",184,0)
 .W !?10,"PLAN:",$$GET1^DIQ(355.3,+$P(IBD3,U,3)_",",2.01),", INSURANCE: ",$$GET1^DIQ(36,IBIN_",",.01),!?10,"HPID:",IBHP
"RTN","IBNCPEV",185,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",186,0)
 D DISPUSR
"RTN","IBNCPEV",187,0)
 Q
"RTN","IBNCPEV",188,0)
 ;
"RTN","IBNCPEV",189,0)
DREL ; release
"RTN","IBNCPEV",190,0)
 D DREJ
"RTN","IBNCPEV",191,0)
 Q
"RTN","IBNCPEV",192,0)
 ;
"RTN","IBNCPEV",193,0)
DREV ; reverse
"RTN","IBNCPEV",194,0)
 N IBIN,IBHP
"RTN","IBNCPEV",195,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",196,0)
 D SUBHDR
"RTN","IBNCPEV",197,0)
 I $L($P(IBD1,U,6)),$E($P(IBD1,U,6),1)'="A"&($E($P(IBD1,U,6),1)'="R") S $P(IBD1,U,6)=""  ; only display accepted and rejected on REVERSALS
"RTN","IBNCPEV",198,0)
 I $L($P(IBD1,U,6)) D CHKP W !?10,"PAYER RESPONSE: ",$P(IBD1,U,6)
"RTN","IBNCPEV",199,0)
 ;IB*2.0*516/baa - Use HIPAA compliant fields
"RTN","IBNCPEV",200,0)
 ; IB*2.0*521 Display HPID and do not add '*' if it does not pass validation checks
"RTN","IBNCPEV",201,0)
 I $L($P(IBD3,U,3)) D CHKP Q:IBQ  D
"RTN","IBNCPEV",202,0)
 .S IBIN=+$G(^IBA(355.3,+$P(IBD3,U,3),0)),IBHP=$$HPD^IBCNHUT1(IBIN)
"RTN","IBNCPEV",203,0)
 .W !?10,"PLAN:",$$GET1^DIQ(355.3,+$P(IBD3,U,3)_",",2.01),", INSURANCE: ",$$GET1^DIQ(36,IBIN_",",.01),!?10,"HPID:",IBHP
"RTN","IBNCPEV",204,0)
 D CLRS Q:IBQ
"RTN","IBNCPEV",205,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",206,0)
 D DISPUSR
"RTN","IBNCPEV",207,0)
 W !?10,"REVERSAL REASON:",$P(IBD1,U,7)
"RTN","IBNCPEV",208,0)
 Q
"RTN","IBNCPEV",209,0)
 ;
"RTN","IBNCPEV",210,0)
BCANC ; bill cancellation generated by auto-reversal (duplicate bill)
"RTN","IBNCPEV",211,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",212,0)
 W !?10,"SYSTEM FOUND DUPLICATE BILL WHILE PROCESSING CLAIM"
"RTN","IBNCPEV",213,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",214,0)
 D DISPUSR
"RTN","IBNCPEV",215,0)
 Q
"RTN","IBNCPEV",216,0)
 ;
"RTN","IBNCPEV",217,0)
CLRS ;
"RTN","IBNCPEV",218,0)
 N TX,PP,RC
"RTN","IBNCPEV",219,0)
 S TX="CLOSE REASON"
"RTN","IBNCPEV",220,0)
 S PP="DROP TO PAPER"
"RTN","IBNCPEV",221,0)
 S RC="RELEASE COPAY"
"RTN","IBNCPEV",222,0)
 I $P(IBD3,U,7)'="" D CHKP Q:IBQ  W !?10,TX,":",$$REASON^IBNCPDPU($P(IBD3,U,7)) W:$P(IBD3,U,8) ", ",PP W:$P(IBD3,U,9) ", ",RC
"RTN","IBNCPEV",223,0)
 S TX="CLOSE COMMENT"
"RTN","IBNCPEV",224,0)
 I $L($P(IBD3,U,6))>2 D CHKP Q:IBQ  W !?10,"COMMENT:",$P(IBD3,U,6)
"RTN","IBNCPEV",225,0)
 Q
"RTN","IBNCPEV",226,0)
 ;
"RTN","IBNCPEV",227,0)
HDR ;header
"RTN","IBNCPEV",228,0)
 W @IOF S IBPAGE=IBPAGE+1 W ?72,"PAGE ",IBPAGE
"RTN","IBNCPEV",229,0)
 W !,$$DISPTITL^IBNCPEV1(IBBDT,IBEDT,IBDTL,.IBDIVS)
"RTN","IBNCPEV",230,0)
 W:IBDIVS'=0 !,$$DISPLDIV^IBNCPEV1(.IBDIVS)
"RTN","IBNCPEV",231,0)
 W !?15
"RTN","IBNCPEV",232,0)
 I IBM1="R" W "SINGLE PRESCRIPTION - ",$$RXNUM(IBRX),"  "
"RTN","IBNCPEV",233,0)
 I IBM1="P" W "SINGLE PATIENT - ",$P($G(^DPT(IBPAT,0)),U),"  "
"RTN","IBNCPEV",234,0)
 I IBM1="E" W "SINGLE ECME # - ",IBECME
"RTN","IBNCPEV",235,0)
 I IBM2="E" W "ECME BILLABLE RX  "
"RTN","IBNCPEV",236,0)
 I IBM2="N" W "NON ECME BILLABLE RX  "
"RTN","IBNCPEV",237,0)
 I IBM3'="A",IBM1'="R" W $S(IBM3="M":"MAIL",IBM3="C":"CMOP",1:"WINDOW")_" PRESCRIPTIONS ONLY"
"RTN","IBNCPEV",238,0)
 W !,?4," RX#   FILL  DATE       PATIENT NAME",?55,"DRUG"
"RTN","IBNCPEV",239,0)
 N I W ! F I=1:1:80 W "="
"RTN","IBNCPEV",240,0)
 Q
"RTN","IBNCPEV",241,0)
 ;
"RTN","IBNCPEV",242,0)
ULINE(X) ;line
"RTN","IBNCPEV",243,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",244,0)
 N I W ! F I=1:1:80 W $G(X,"-")
"RTN","IBNCPEV",245,0)
 Q
"RTN","IBNCPEV",246,0)
CHKP ;Check for EOP
"RTN","IBNCPEV",247,0)
 N Y
"RTN","IBNCPEV",248,0)
 I $Y>(IOSL-4) D:IBSCR PAUSE Q:IBQ  D HDR
"RTN","IBNCPEV",249,0)
 Q
"RTN","IBNCPEV",250,0)
DAT(X,Y) Q $$DAT1^IBOUTL(X,.Y)
"RTN","IBNCPEV",251,0)
TIM(X) N IBT ;time
"RTN","IBNCPEV",252,0)
 S IBT=$$DAT1^IBOUTL(X,1) I $L(IBT," ")<3 Q IBT
"RTN","IBNCPEV",253,0)
 I $P(IBT," ",3)="pm" S IBT=$P(IBT," ",1,2)_"p" Q IBT
"RTN","IBNCPEV",254,0)
 I $P(IBT," ",3)="am" S IBT=$P(IBT," ",1,2)_"a" Q IBT
"RTN","IBNCPEV",255,0)
 Q IBT
"RTN","IBNCPEV",256,0)
 ;
"RTN","IBNCPEV",257,0)
USR(X) ;
"RTN","IBNCPEV",258,0)
 I $D(^VA(200,+X,0)) Q $P(^(0),U)
"RTN","IBNCPEV",259,0)
 Q X
"RTN","IBNCPEV",260,0)
 ;
"RTN","IBNCPEV",261,0)
PAT(DFN) ;
"RTN","IBNCPEV",262,0)
 Q $P($G(^DPT(DFN,0),"?"),"^")
"RTN","IBNCPEV",263,0)
BILL(BN) ;
"RTN","IBNCPEV",264,0)
 Q $P($G(^DGCR(399,BN,0),"?"),"^")
"RTN","IBNCPEV",265,0)
ARBILL(BN) ;
"RTN","IBNCPEV",266,0)
 Q $P($G(^PRCA(430,BN,0),"?"),"^")
"RTN","IBNCPEV",267,0)
 ;
"RTN","IBNCPEV",268,0)
 ;Returns DRUG name (#50,.01)
"RTN","IBNCPEV",269,0)
 ;IBDFN = IEN in PATIENT file #2
"RTN","IBNCPEV",270,0)
 ;IBRX = IEN in PRESCRIPTION file #52
"RTN","IBNCPEV",271,0)
DRUG(IBDFN,IBRX) ;
"RTN","IBNCPEV",272,0)
 I +$G(IBDFN)=0 Q ""
"RTN","IBNCPEV",273,0)
 N X1
"RTN","IBNCPEV",274,0)
 K ^TMP($J,"IBNCPDP52")
"RTN","IBNCPEV",275,0)
 D RX^PSO52API(IBDFN,"IBNCPDP52",IBRX,"",0)
"RTN","IBNCPEV",276,0)
 S X1=+$G(^TMP($J,"IBNCPDP52",IBDFN,IBRX,6))
"RTN","IBNCPEV",277,0)
 K ^TMP($J,"IBNCPDP52")
"RTN","IBNCPEV",278,0)
 I X1=0 Q ""
"RTN","IBNCPEV",279,0)
 Q $$DRUGNAM^IBNCPEV1(X1)
"RTN","IBNCPEV",280,0)
 ;
"RTN","IBNCPEV",281,0)
EVNT(X) ;Translate codes
"RTN","IBNCPEV",282,0)
 I X="BILL" Q "BILLING"
"RTN","IBNCPEV",283,0)
 I X="REVERSE" Q "REVERSAL"
"RTN","IBNCPEV",284,0)
 I X="AUTO REVERSE" Q "REVERSAL(A)"
"RTN","IBNCPEV",285,0)
 I X["RELEASE" Q "RELEASE"
"RTN","IBNCPEV",286,0)
 I X["SUBMIT" Q "SUBMIT"
"RTN","IBNCPEV",287,0)
 I X["CLOSE" Q "CLOSE"
"RTN","IBNCPEV",288,0)
 I X[IBSC Q "FINISH"  ;IBSC = "STATUS CHECK"
"RTN","IBNCPEV",289,0)
 Q X
"RTN","IBNCPEV",290,0)
 ;
"RTN","IBNCPEV",291,0)
BOCD(X) ;Basis of Cost Determination
"RTN","IBNCPEV",292,0)
 I +X=7 Q "USUAL & CUSTOMARY"
"RTN","IBNCPEV",293,0)
 I +X=1 Q "AWP"
"RTN","IBNCPEV",294,0)
 I +X=5 Q "COST CALCULATIONS"
"RTN","IBNCPEV",295,0)
 Q X
"RTN","IBNCPEV",296,0)
 ;
"RTN","IBNCPEV",297,0)
PAUSE ;
"RTN","IBNCPEV",298,0)
 N X U IO(0) W !,"Press RETURN to continue, '^' to exit:" R X:DTIME S:'$T X="^" S:X["^" IBQ=1
"RTN","IBNCPEV",299,0)
 U IO
"RTN","IBNCPEV",300,0)
 Q
"RTN","IBNCPEV",301,0)
 ;
"RTN","IBNCPEV",302,0)
SUBHDR ; display ECME#, Date of Service, and Release Date/Time (if it exists)
"RTN","IBNCPEV",303,0)
 ; used by many event displays
"RTN","IBNCPEV",304,0)
 W !?10,"ECME#:",$P(IBD1,U,3),", DOS:",$$DAT($P(IBD2,U,6))
"RTN","IBNCPEV",305,0)
 I $P(IBD2,U,7) W ", RELEASE DATE:",$$TIM($P(IBD2,U,7))
"RTN","IBNCPEV",306,0)
 Q
"RTN","IBNCPEV",307,0)
 ;
"RTN","IBNCPEV",308,0)
DISPUSR ;
"RTN","IBNCPEV",309,0)
 W !?10,"USER:",$$USR(+$P(IBD3,U,10))
"RTN","IBNCPEV",310,0)
 Q
"RTN","IBNCPEV",311,0)
 ;
"RTN","IBNCPEV",312,0)
 ;Returns RX number (external value: #52,.01)
"RTN","IBNCPEV",313,0)
 ;IBRX = IEN in PRESCRIPTION file #52
"RTN","IBNCPEV",314,0)
RXNUM(IBRX) ;
"RTN","IBNCPEV",315,0)
 Q $$RXAPI1^IBNCPUT1(IBRX,.01,"E")
"RTN","IBNCPEV",316,0)
 ;
"RTN","IBNCPEV1")
0^20^B78796257
"RTN","IBNCPEV1",1,0)
IBNCPEV1 ;DALOI/SS - NCPDP BILLING EVENTS REPORT ;21-MAR-2006
"RTN","IBNCPEV1",2,0)
 ;;2.0;INTEGRATED BILLING;**342,339,363,411,435,452,516,550**;21-MAR-94;Build 25
"RTN","IBNCPEV1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPEV1",4,0)
 ;
"RTN","IBNCPEV1",5,0)
 ;IA# 10155 is used to read ^DD(file,field,0) node
"RTN","IBNCPEV1",6,0)
 Q
"RTN","IBNCPEV1",7,0)
 ;
"RTN","IBNCPEV1",8,0)
SETVARS ;
"RTN","IBNCPEV1",9,0)
 ;newed in IBNCPEV
"RTN","IBNCPEV1",10,0)
 S (IBECME,IBPAT,IBRX,IBQ,IBSCR,IBPAGE,IBDTL,IBDIVS)=0
"RTN","IBNCPEV1",11,0)
 ;date
"RTN","IBNCPEV1",12,0)
 F  D DATE^IBNCPDPE Q:IBQ  Q:$$TESTDATA^IBNCPDPE
"RTN","IBNCPEV1",13,0)
 Q:IBQ
"RTN","IBNCPEV1",14,0)
 N IBMLTDV S IBMLTDV=$$MULTPHRM^BPSUTIL()
"RTN","IBNCPEV1",15,0)
 I +IBMLTDV=1 S IBDIVS=+$$MULTIDIV(.IBDIVS) S:IBDIVS=0 IBDIVS(0)="0^ALL" I IBDIVS=-1 S IBQ=1 Q
"RTN","IBNCPEV1",16,0)
 I +IBMLTDV=0 S IBDIVS=0,IBDIVS(0)="0^"_$P(IBMLTDV,U,2)
"RTN","IBNCPEV1",17,0)
 D MODE^IBNCPDPE Q:IBQ
"RTN","IBNCPEV1",18,0)
 D DEVICE^IBNCPDPE Q:IBQ
"RTN","IBNCPEV1",19,0)
 Q
"RTN","IBNCPEV1",20,0)
 ;
"RTN","IBNCPEV1",21,0)
 ;/**
"RTN","IBNCPEV1",22,0)
GETRX(IBECMENO,IBST,IBEND,IBECME) ; get ien of file 52 from #366.14
"RTN","IBNCPEV1",23,0)
 ; input - 
"RTN","IBNCPEV1",24,0)
 ;   IBECMENO = ECME # input from the user (with or without leading zeros)
"RTN","IBNCPEV1",25,0)
 ;   IBST = start date (FM format)
"RTN","IBNCPEV1",26,0)
 ;   IBEND = end date (FM format)
"RTN","IBNCPEV1",27,0)
 ; output - function value: returns internal entry number of file #52 for the earliest date within the date range
"RTN","IBNCPEV1",28,0)
 ;   IBECME - output variable pass by reference. Returns the external version of the ECME# with leading zeros
"RTN","IBNCPEV1",29,0)
 ;
"RTN","IBNCPEV1",30,0)
 ;  This subroutine is called when the user enters an ECME# as part of the search criteria
"RTN","IBNCPEV1",31,0)
 ;
"RTN","IBNCPEV1",32,0)
 N IBDATE,IBNO,IBIEN,IBFOUND,IBRXIEN,ECMELEN,IBRXIEN
"RTN","IBNCPEV1",33,0)
 S (IBFOUND,IBRXIEN)=0
"RTN","IBNCPEV1",34,0)
 F ECMELEN=12,7 D  Q:IBFOUND
"RTN","IBNCPEV1",35,0)
 . I $L(+IBECMENO)>ECMELEN Q
"RTN","IBNCPEV1",36,0)
 . S IBECMENO=$$RJ^XLFSTR(+IBECMENO,ECMELEN,0)   ; build ECME# with leading zeros to proper length
"RTN","IBNCPEV1",37,0)
 . S IBDATE=+$O(^IBCNR(366.14,"E",IBECMENO,IBST-1)) Q:'IBDATE
"RTN","IBNCPEV1",38,0)
 . I IBDATE>IBEND Q
"RTN","IBNCPEV1",39,0)
 . S IBNO=+$O(^IBCNR(366.14,"E",IBECMENO,IBDATE,0)) Q:'IBNO
"RTN","IBNCPEV1",40,0)
 . S IBIEN=+$O(^IBCNR(366.14,"B",IBDATE,0)) Q:'IBIEN
"RTN","IBNCPEV1",41,0)
 . S IBRXIEN=+$P($G(^IBCNR(366.14,IBIEN,1,IBNO,2)),U,1)
"RTN","IBNCPEV1",42,0)
 . I IBRXIEN S IBFOUND=1,IBECME=IBECMENO Q
"RTN","IBNCPEV1",43,0)
 . Q
"RTN","IBNCPEV1",44,0)
 Q IBRXIEN
"RTN","IBNCPEV1",45,0)
 ;
"RTN","IBNCPEV1",46,0)
DSTAT(IBD0,IBD2,IBD3,IBD4,IBINS,IBD7) ; finish event/IB Billing Determination event
"RTN","IBNCPEV1",47,0)
 ;input:
"RTN","IBNCPEV1",48,0)
 ;IBD0 - node ^IBCNR(366.14,D0,1,D1,0)
"RTN","IBNCPEV1",49,0)
 ;IBD2 - node ^IBCNR(366.14,D0,1,D1,2)
"RTN","IBNCPEV1",50,0)
 ;IBD3 - node ^IBCNR(366.14,D0,1,D1,3)
"RTN","IBNCPEV1",51,0)
 ;IBD4 - node ^IBCNR(366.14,D0,1,D1,4)
"RTN","IBNCPEV1",52,0)
 ;IBINS - multiple of ^IBCNR(366.14,D0,1,D1,5)
"RTN","IBNCPEV1",53,0)
 ;IBD7 - node ^IBCNR(366.14,D0,1,D1,7)
"RTN","IBNCPEV1",54,0)
 ;
"RTN","IBNCPEV1",55,0)
 N IBX,IBT,IBSC,IB1ST,IBNXT,IBEXMPV
"RTN","IBNCPEV1",56,0)
 S IB1ST=1
"RTN","IBNCPEV1",57,0)
 D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",58,0)
 ;
"RTN","IBNCPEV1",59,0)
 W !?10,"ELIGIBILITY: "
"RTN","IBNCPEV1",60,0)
 W $$EXTERNAL^DILFD(366.141,7.05,,$P(IBD7,U,5))    ; esg - 5/1/11 - IB*2*452
"RTN","IBNCPEV1",61,0)
 ;
"RTN","IBNCPEV1",62,0)
 W !?10,"EI/SC INDICATORS: "
"RTN","IBNCPEV1",63,0)
 F IBX=2:1 S IBT=$P($T(EXEMPT+IBX^IBNCPDP1),";",3),IBSC=$P(IBT,U,2) Q:IBSC=""  S IBEXMPV=$$EXMPFLDS(IBSC,IBD4) D:IBEXMPV]""  Q:IBQ!(IBEXMPV=3)
"RTN","IBNCPEV1",64,0)
 . I IBEXMPV=3 W "overridden by the user" Q
"RTN","IBNCPEV1",65,0)
 . I 'IB1ST W "," I $X>70 D CHKP^IBNCPEV Q:IBQ  W !?10 S IB1ST=1
"RTN","IBNCPEV1",66,0)
 . W " ",IBSC,":",$S(IBEXMPV=1:"Yes",IBEXMPV=0:"No",IBEXMPV=2:"No Answer",1:"?") S IB1ST=0
"RTN","IBNCPEV1",67,0)
 Q:IBQ
"RTN","IBNCPEV1",68,0)
 ;
"RTN","IBNCPEV1",69,0)
 I $P(IBD2,U,4) D CHKP^IBNCPEV Q:IBQ  W !?10,"DRUG:",$$DRUGNAM(+$P(IBD2,U,4))
"RTN","IBNCPEV1",70,0)
 ;
"RTN","IBNCPEV1",71,0)
 ; esg - 9/29/15 - IB*2*550 - Display Drug file ECME billable fields
"RTN","IBNCPEV1",72,0)
 I ($P(IBD7,U,6)=0)!($P(IBD7,U,7)=0)!($P(IBD7,U,8)=0) D  Q:IBQ
"RTN","IBNCPEV1",73,0)
 . I $P(IBD0,U,7) Q                                 ; billable result - no display
"RTN","IBNCPEV1",74,0)
 . I $P(IBD7,U,5)="V",$P(IBD7,U,6) Q                ; veteran, drug billable - no display
"RTN","IBNCPEV1",75,0)
 . I $P(IBD7,U,5)="T",$P(IBD7,U,6),$P(IBD7,U,7) Q   ; tricare, drug billable - no display
"RTN","IBNCPEV1",76,0)
 . I $P(IBD7,U,5)="C",$P(IBD7,U,6),$P(IBD7,U,8) Q   ; champva, drug billable - no display
"RTN","IBNCPEV1",77,0)
 . D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",78,0)
 . W !?10,"DRUG ECME BILLABLE: ",$S($P(IBD7,U,6):"Yes",1:"No")
"RTN","IBNCPEV1",79,0)
 . I $P(IBD7,U,5)="T" D CHKP^IBNCPEV Q:IBQ  W !?10,"DRUG ECME BILLABLE (TRICARE): ",$S($P(IBD7,U,7):"Yes",1:"No")
"RTN","IBNCPEV1",80,0)
 . I $P(IBD7,U,5)="C" D CHKP^IBNCPEV Q:IBQ  W !?10,"DRUG ECME BILLABLE (CHAMPVA): ",$S($P(IBD7,U,8):"Yes",1:"No")
"RTN","IBNCPEV1",81,0)
 . Q
"RTN","IBNCPEV1",82,0)
 ;
"RTN","IBNCPEV1",83,0)
 ; esg - 9/29/15 - IB*2*550 - Display sensitive diagnosis drug if not billable and the message contains "ROI"
"RTN","IBNCPEV1",84,0)
 I $P(IBD7,U,9),'$P(IBD0,U,7),$P(IBD0,U,8)["ROI" D  Q:IBQ
"RTN","IBNCPEV1",85,0)
 . D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",86,0)
 . W !?10,"SENSITIVE DIAGNOSIS DRUG: Yes"
"RTN","IBNCPEV1",87,0)
 . Q
"RTN","IBNCPEV1",88,0)
 ;
"RTN","IBNCPEV1",89,0)
 D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",90,0)
 W !?10,"NDC:",$S($P(IBD2,U,5):$P(IBD2,U,5),1:"No")
"RTN","IBNCPEV1",91,0)
 W ", NCPDP QTY:",$S($P(IBD2,U,14):$P(IBD2,U,14),1:"No")
"RTN","IBNCPEV1",92,0)
 W $$UNITDISP($P(IBD2,U,14),$P(IBD2,U,15))   ; display NCPDP unit type
"RTN","IBNCPEV1",93,0)
 ;
"RTN","IBNCPEV1",94,0)
 D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",95,0)
 W !?10,"BILLED QTY:",$S($P(IBD2,U,8):$P(IBD2,U,8),1:"No")
"RTN","IBNCPEV1",96,0)
 W $$UNITDISP($P(IBD2,U,8),$P(IBD2,U,13))    ; display billing unit type
"RTN","IBNCPEV1",97,0)
 W ", UNIT COST:",$S($P(IBD3,U,4):$P(IBD3,U,4),1:"No")
"RTN","IBNCPEV1",98,0)
 I $P(IBD2,U,10)]"" W ", DEA:",$P(IBD2,U,10)
"RTN","IBNCPEV1",99,0)
 ;
"RTN","IBNCPEV1",100,0)
 ; display insurance subfile data
"RTN","IBNCPEV1",101,0)
 S IBX=0,IBNXT=0 F  S IBX=$O(IBINS(IBX)) Q:'IBX  D  Q:IBQ  S IBNXT=1
"RTN","IBNCPEV1",102,0)
 . N Y,Y3,PLANIEN
"RTN","IBNCPEV1",103,0)
 . S Y=$G(IBINS(IBX,0))
"RTN","IBNCPEV1",104,0)
 . S PLANIEN=+$P(Y,U,2) I 'PLANIEN W "@@@@" Q
"RTN","IBNCPEV1",105,0)
 . I IBNXT D CHKP^IBNCPEV Q:IBQ  W !?10,"-----------"
"RTN","IBNCPEV1",106,0)
 . D CHKP^IBNCPEV Q:IBQ  W !?10
"RTN","IBNCPEV1",107,0)
 . ;
"RTN","IBNCPEV1",108,0)
 . ;IB*2.0*516/baa - Use HIPAA compliant fields
"RTN","IBNCPEV1",109,0)
 . W "PLAN:",$$GET1^DIQ(355.3,PLANIEN_",",2.01)
"RTN","IBNCPEV1",110,0)
 . W ", INSURANCE:",$$GET1^DIQ(355.3,PLANIEN_",",.01,"E")
"RTN","IBNCPEV1",111,0)
 . I +IBD7>0 W ", COB:",$S(+IBD7=2:"S",1:"P")
"RTN","IBNCPEV1",112,0)
 . ;
"RTN","IBNCPEV1",113,0)
 . ; display pharmacy plan ID and name
"RTN","IBNCPEV1",114,0)
 . D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",115,0)
 . S Y3=$G(IBINS(IBX,3))
"RTN","IBNCPEV1",116,0)
 . W !?10,"PHARMACY PLAN:",$S($L($P(Y3,U,3)):$$PLANID($P(Y3,U,3)),1:"N/A")
"RTN","IBNCPEV1",117,0)
 . ;
"RTN","IBNCPEV1",118,0)
 . D CHKP^IBNCPEV Q:IBQ  W !?10 S IB1ST=1
"RTN","IBNCPEV1",119,0)
 . I $P(Y,U,3)]"" W "BIN:",$P(Y,U,3) S IB1ST=0
"RTN","IBNCPEV1",120,0)
 . I $P(Y,U,4)]"" W:'IB1ST ", " W "PCN:",$P(Y,U,4) S IB1ST=0
"RTN","IBNCPEV1",121,0)
 . I $P(Y,U,5)]"" W:'IB1ST ", " W "PAYER SHEET B1:",$P(Y,U,5) S IB1ST=0
"RTN","IBNCPEV1",122,0)
 . ;
"RTN","IBNCPEV1",123,0)
 . D CHKP^IBNCPEV Q:IBQ  W !?10 S IB1ST=1
"RTN","IBNCPEV1",124,0)
 . S Y=$G(IBINS(IBX,1))
"RTN","IBNCPEV1",125,0)
 . I $P(Y,U,4)]"" W "PAYER SHEET B2:",$P(Y,U,4) S IB1ST=0
"RTN","IBNCPEV1",126,0)
 . I $P(Y,U,5)]"" W:'IB1ST ", " W "PAYER SHEET B3:",$P(Y,U,5)
"RTN","IBNCPEV1",127,0)
 . ;
"RTN","IBNCPEV1",128,0)
 . D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",129,0)
 . S Y=$G(IBINS(IBX,2))
"RTN","IBNCPEV1",130,0)
 . W !?10,"BASIS OF COST DETERM:",$S($L($P(Y,U,2)):$$BOCD^IBNCPEV($P(Y,U,2)),1:"N/A")
"RTN","IBNCPEV1",131,0)
 . D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",132,0)
 . W !?10,"DISPENSING FEE:",$S($L($P(Y,U,1)):$J($P(Y,U,1),0,2),1:"N/A")
"RTN","IBNCPEV1",133,0)
 . W ", ADMIN FEE:",$S($L($P(Y,U,5)):$J($P(Y,U,5),0,2),1:"N/A")
"RTN","IBNCPEV1",134,0)
 . D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",135,0)
 . W !?10,"INGREDIENT COST:",$S($L($P(Y,U,6)):$J($P(Y,U,6),0,2),1:"N/A")
"RTN","IBNCPEV1",136,0)
 . W ", U&C CHARGE:",$S($L($P(Y,U,7)):$J($P(Y,U,7),0,2),1:"N/A")
"RTN","IBNCPEV1",137,0)
 . W ", GROSS AMT DUE:",$S($L($P(Y,U,4)):$J($P(Y,U,4),0,2),1:"N/A")
"RTN","IBNCPEV1",138,0)
 . Q
"RTN","IBNCPEV1",139,0)
 ;
"RTN","IBNCPEV1",140,0)
 Q:IBQ
"RTN","IBNCPEV1",141,0)
 ;
"RTN","IBNCPEV1",142,0)
 D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",143,0)
 W !?10,"USER:",$$USR^IBNCPEV(+$P(IBD3,U,10))
"RTN","IBNCPEV1",144,0)
 Q
"RTN","IBNCPEV1",145,0)
 ;
"RTN","IBNCPEV1",146,0)
UNITDISP(QTY,TYP) ; display type of units
"RTN","IBNCPEV1",147,0)
 I 'QTY,TYP="" Q ""       ; display nothing if no QTY or TYP
"RTN","IBNCPEV1",148,0)
 I TYP="" S TYP="  "      ; default if ""
"RTN","IBNCPEV1",149,0)
 Q " ("_TYP_")"
"RTN","IBNCPEV1",150,0)
 ;
"RTN","IBNCPEV1",151,0)
PLANID(PLID) ; display Pharmacy plan ID and the name
"RTN","IBNCPEV1",152,0)
 ; Input:  PLID - the external plan ID as found in (366.03,.01). Stored for this report as (366.1412,.303).
"RTN","IBNCPEV1",153,0)
 N PLNAME,PLANIEN
"RTN","IBNCPEV1",154,0)
 S PLID=$G(PLID),PLNAME=""
"RTN","IBNCPEV1",155,0)
 I PLID="" G PLANIDX
"RTN","IBNCPEV1",156,0)
 S PLANIEN=+$O(^IBCNR(366.03,"B",PLID,""),-1)
"RTN","IBNCPEV1",157,0)
 I 'PLANIEN G PLANIDX
"RTN","IBNCPEV1",158,0)
 S PLNAME=$P($G(^IBCNR(366.03,PLANIEN,0)),U,2)
"RTN","IBNCPEV1",159,0)
PLANIDX ;
"RTN","IBNCPEV1",160,0)
 Q PLID_" ("_PLNAME_")"
"RTN","IBNCPEV1",161,0)
 ;
"RTN","IBNCPEV1",162,0)
 ;get Exemption status by name
"RTN","IBNCPEV1",163,0)
 ;IBEXMP - exemption (like "AO","EC", etc)
"RTN","IBNCPEV1",164,0)
 ;IBNODE - node ^IBCNR(366.14,D0,1,D1,4)
"RTN","IBNCPEV1",165,0)
EXMPFLDS(IBEXMP,IBNODE) ;
"RTN","IBNCPEV1",166,0)
 Q:IBEXMP="AO" $P(IBNODE,U,1)
"RTN","IBNCPEV1",167,0)
 Q:IBEXMP="CV" $P(IBNODE,U,2)
"RTN","IBNCPEV1",168,0)
 Q:IBEXMP="SWA" $P(IBNODE,U,3)
"RTN","IBNCPEV1",169,0)
 Q:IBEXMP="IR" $P(IBNODE,U,4)
"RTN","IBNCPEV1",170,0)
 Q:IBEXMP="MST" $P(IBNODE,U,5)
"RTN","IBNCPEV1",171,0)
 Q:IBEXMP="HNC" $P(IBNODE,U,6)
"RTN","IBNCPEV1",172,0)
 Q:IBEXMP="SC" $P(IBNODE,U,7)
"RTN","IBNCPEV1",173,0)
 Q:IBEXMP="SHAD" $P(IBNODE,U,8)
"RTN","IBNCPEV1",174,0)
 Q ""
"RTN","IBNCPEV1",175,0)
 ;returns DFN from file #366.14 by prescription ien of file #50
"RTN","IBNCPEV1",176,0)
GETDFN(IBRX) ;
"RTN","IBNCPEV1",177,0)
 N IB1,IB2
"RTN","IBNCPEV1",178,0)
 S IB1=+$O(^IBCNR(366.14,"I",IBRX,0))
"RTN","IBNCPEV1",179,0)
 I IB1=0 Q 0
"RTN","IBNCPEV1",180,0)
 S IB2=+$O(^IBCNR(366.14,"I",IBRX,IB1,0))
"RTN","IBNCPEV1",181,0)
 I IB2=0 Q 0
"RTN","IBNCPEV1",182,0)
 Q +$P($G(^IBCNR(366.14,IB1,1,IB2,0)),U,3)
"RTN","IBNCPEV1",183,0)
 ;
"RTN","IBNCPEV1",184,0)
 ;return DRUG name (#50,.01)
"RTN","IBNCPEV1",185,0)
 ;IBX1 - ien in file #50
"RTN","IBNCPEV1",186,0)
DRUGNAM(IBX1) ;
"RTN","IBNCPEV1",187,0)
 N X
"RTN","IBNCPEV1",188,0)
 K ^TMP($J,"IBNCPDP50")
"RTN","IBNCPEV1",189,0)
 D DATA^PSS50(IBX1,"","","","","IBNCPDP50")
"RTN","IBNCPEV1",190,0)
 S X=$G(^TMP($J,"IBNCPDP50",IBX1,.01))
"RTN","IBNCPEV1",191,0)
 K ^TMP($J,"IBNCPDP50")
"RTN","IBNCPEV1",192,0)
 Q X
"RTN","IBNCPEV1",193,0)
 ;
"RTN","IBNCPEV1",194,0)
DRUGAPI(DRUGIEN,FLDNUM) ;
"RTN","IBNCPEV1",195,0)
 ;return a DRUG's field value
"RTN","IBNCPEV1",196,0)
 ;input:
"RTN","IBNCPEV1",197,0)
 ; DRUGIEN - ien #50
"RTN","IBNCPEV1",198,0)
 ; FLDNUM - field number (like .01)
"RTN","IBNCPEV1",199,0)
 ;output:
"RTN","IBNCPEV1",200,0)
 ; returned value that contains the external value of the specified field
"RTN","IBNCPEV1",201,0)
 N IBARR,DIQ,DIC
"RTN","IBNCPEV1",202,0)
 S DIQ="IBARR",DIQ(0)="E",DIC=50
"RTN","IBNCPEV1",203,0)
 D EN^PSSDI(50,"IB",DIC,.FLDNUM,.DRUGIEN,.DIQ)
"RTN","IBNCPEV1",204,0)
 Q $G(IBARR(50,DRUGIEN,FLDNUM,"E"))
"RTN","IBNCPEV1",205,0)
 ;
"RTN","IBNCPEV1",206,0)
 ;reopen
"RTN","IBNCPEV1",207,0)
REOPEN ;
"RTN","IBNCPEV1",208,0)
 D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",209,0)
 D SUBHDR^IBNCPEV
"RTN","IBNCPEV1",210,0)
 ;IB*2.0*516/baa Use HIPAA compliant fields
"RTN","IBNCPEV1",211,0)
 I +$P(IBD3,U,3) D CHKP^IBNCPEV Q:IBQ  W !?10,"PLAN:",$$GET1^DIQ(355.3,+$P(IBD3,U,3)_",",2.01),", INSURANCE: ",$$GET1^DIQ(355.3,+$P(IBD3,U,3)_",",.01,"E")
"RTN","IBNCPEV1",212,0)
 I $L($P(IBD3,U,6))>2 D CHKP^IBNCPEV Q:IBQ  W !?10,"REOPEN COMMENTS:",$P(IBD3,U,6)
"RTN","IBNCPEV1",213,0)
 D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",214,0)
 D DISPUSR^IBNCPEV
"RTN","IBNCPEV1",215,0)
 Q
"RTN","IBNCPEV1",216,0)
 ;
"RTN","IBNCPEV1",217,0)
 ;Prompts user to select multiple divisions (BPS PHARMACIES)
"RTN","IBNCPEV1",218,0)
 ; in order to filter the report by division(s) or for ALL divisions
"RTN","IBNCPEV1",219,0)
 ; 
"RTN","IBNCPEV1",220,0)
 ;returns composite value:
"RTN","IBNCPEV1",221,0)
 ;1st piece
"RTN","IBNCPEV1",222,0)
 ; 1 - divisions were selected 
"RTN","IBNCPEV1",223,0)
 ; 0 - divisions were NOT selected 
"RTN","IBNCPEV1",224,0)
 ; -1 if up arrow entered or timeout
"RTN","IBNCPEV1",225,0)
 ;2nd piece
"RTN","IBNCPEV1",226,0)
 ; A-all or D - division(s) in the BPS PHARMACIES file #9002313.56)
"RTN","IBNCPEV1",227,0)
 ;
"RTN","IBNCPEV1",228,0)
 ;and by reference:
"RTN","IBNCPEV1",229,0)
 ;IBPSPHAR (only if the user selects "D") - a local array with iens and names 
"RTN","IBNCPEV1",230,0)
 ;  of BPS PHARMACIES (file #9002313.56) selected by the user
"RTN","IBNCPEV1",231,0)
 ;  IBPSPHAR(ien of file #9002313.56) = ien of file #9002313.56 ^ name of the BPS PHARMACY
"RTN","IBNCPEV1",232,0)
 ;
"RTN","IBNCPEV1",233,0)
MULTIDIV(IBPSPHAR) ;
"RTN","IBNCPEV1",234,0)
 N IBDIVCNT,IBANSW,IBRETV
"RTN","IBNCPEV1",235,0)
 S IBRETV=$$SELPHARM^BPSUTIL(.IBPSPHAR)
"RTN","IBNCPEV1",236,0)
 I IBRETV="^" Q -1  ;exit
"RTN","IBNCPEV1",237,0)
 I IBRETV="A" Q "0^A"
"RTN","IBNCPEV1",238,0)
 Q "1^D"
"RTN","IBNCPEV1",239,0)
 ;
"RTN","IBNCPEV1",240,0)
 ;check if ePharmacy division in IB36614 in among those selected by the user
"RTN","IBNCPEV1",241,0)
 ;IBDIVS - a local array (by reference) with divisions selected by the user
"RTN","IBNCPEV1",242,0)
 ;returns 0 - not among selected divisions, 1 - among them
"RTN","IBNCPEV1",243,0)
CHECKDIV(IB36614,IBDIVS) ;
"RTN","IBNCPEV1",244,0)
 I $D(IBDIVS(IB36614)) Q 1
"RTN","IBNCPEV1",245,0)
 Q 0
"RTN","IBNCPEV1",246,0)
 ;
"RTN","IBNCPEV1",247,0)
 ;Compile the string for divisions
"RTN","IBNCPEV1",248,0)
 ;input:
"RTN","IBNCPEV1",249,0)
 ;IBDVS - division local array by reference
"RTN","IBNCPEV1",250,0)
 ;output: 
"RTN","IBNCPEV1",251,0)
 ; return value with the resulting string
"RTN","IBNCPEV1",252,0)
DISPLDIV(IBDVS) ;
"RTN","IBNCPEV1",253,0)
 I ('$D(IBDVS))!($G(IBDVS)="") Q ""  ;invalid parameters
"RTN","IBNCPEV1",254,0)
 I IBDVS=0 Q ""  ;if "all" or single division
"RTN","IBNCPEV1",255,0)
 N IBZ,IBCNT,IBDIVSTR
"RTN","IBNCPEV1",256,0)
 S IBDIVSTR=""
"RTN","IBNCPEV1",257,0)
 S IBZ=0,IBCNT=0
"RTN","IBNCPEV1",258,0)
 F  S IBZ=$O(IBDVS(IBZ)) Q:+IBZ=0  D
"RTN","IBNCPEV1",259,0)
 . I IBCNT>0 S IBDIVSTR=IBDIVSTR_", "
"RTN","IBNCPEV1",260,0)
 . S IBCNT=IBCNT+1
"RTN","IBNCPEV1",261,0)
 . S IBDIVSTR=IBDIVSTR_$P(IBDVS(IBZ),U,2)
"RTN","IBNCPEV1",262,0)
 I $L(IBDIVSTR)'<80 S IBDIVSTR=$E(IBDIVSTR,1,75)_"..."
"RTN","IBNCPEV1",263,0)
 Q $$CENTERIT(IBDIVSTR,80)
"RTN","IBNCPEV1",264,0)
 ;
"RTN","IBNCPEV1",265,0)
 ;Compile the string for title
"RTN","IBNCPEV1",266,0)
 ;input:
"RTN","IBNCPEV1",267,0)
 ;IBBDT - begin date
"RTN","IBNCPEV1",268,0)
 ;IBEDT - end date
"RTN","IBNCPEV1",269,0)
 ;IBDTL - summary/detail mode
"RTN","IBNCPEV1",270,0)
 ;IBDIVS - division local array by reference
"RTN","IBNCPEV1",271,0)
 ;output: 
"RTN","IBNCPEV1",272,0)
 ; return value with the resulting string
"RTN","IBNCPEV1",273,0)
DISPTITL(IBBDT,IBEDT,IBDTL,IBDIVS) ;
"RTN","IBNCPEV1",274,0)
 I ('$D(IBDIVS))!($G(IBDIVS)="")!($G(IBBDT)="")!($G(IBEDT)="")!($G(IBDTL)="") Q ""  ;invalid parameters
"RTN","IBNCPEV1",275,0)
 N IBTITL
"RTN","IBNCPEV1",276,0)
 S IBTITL="BILLING ECME EVENTS ON "_$$DAT^IBNCPEV(IBBDT)
"RTN","IBNCPEV1",277,0)
 I IBBDT'=IBEDT S IBTITL=IBTITL_" TO "_$$DAT^IBNCPEV(IBEDT)
"RTN","IBNCPEV1",278,0)
 S IBTITL=IBTITL_" ("_$S(IBDTL:"DETAILED",1:"SUMMARY")_") for "
"RTN","IBNCPEV1",279,0)
 I IBDIVS'=0 S IBTITL=IBTITL_"SELECTED DIVISIONS:"
"RTN","IBNCPEV1",280,0)
 I IBDIVS=0 S IBTITL=IBTITL_$P(IBDIVS(0),U,2)_" DIVISION" I $P(IBDIVS(0),U,2)="ALL" S IBTITL=IBTITL_"S"
"RTN","IBNCPEV1",281,0)
 Q $$CENTERIT(IBTITL,80)
"RTN","IBNCPEV1",282,0)
 ;
"RTN","IBNCPEV1",283,0)
 ;Center the string (add left pads to center the string)
"RTN","IBNCPEV1",284,0)
 ;input:
"RTN","IBNCPEV1",285,0)
 ;IBSTR - input string
"RTN","IBNCPEV1",286,0)
 ;IBMAXLEN - max len
"RTN","IBNCPEV1",287,0)
 ;output: 
"RTN","IBNCPEV1",288,0)
 ; return value with the resulting string
"RTN","IBNCPEV1",289,0)
CENTERIT(IBSTR,IBMAXLEN) ;
"RTN","IBNCPEV1",290,0)
 I ($G(IBSTR)="")!(+$G(IBMAXLEN)=0) Q ""
"RTN","IBNCPEV1",291,0)
 N IBLEFT,IBSP
"RTN","IBNCPEV1",292,0)
 S IBSTR=$E(IBSTR,1,IBMAXLEN)
"RTN","IBNCPEV1",293,0)
 S IBLEFT=((IBMAXLEN-$L(IBSTR))/2)\1
"RTN","IBNCPEV1",294,0)
 S IBSP=""
"RTN","IBNCPEV1",295,0)
 S $P(IBSP," ",IBLEFT+1)=""
"RTN","IBNCPEV1",296,0)
 Q IBSP_IBSTR
"RTN","IBNCPEV1",297,0)
 ;Get list of indicators that were not answered
"RTN","IBNCPEV1",298,0)
GETNOANS(IBD4) ;
"RTN","IBNCPEV1",299,0)
 N IBX,IBT,IBSC,IBEXMPV,IBQ,IBRET
"RTN","IBNCPEV1",300,0)
 S IBQ=0,IBRET=""
"RTN","IBNCPEV1",301,0)
 F IBX=2:1 S IBT=$P($T(EXEMPT+IBX^IBNCPDP1),";",3),IBSC=$P(IBT,U,2) Q:IBSC=""  S IBEXMPV=$$EXMPFLDS^IBNCPEV1(IBSC,IBD4) D:IBEXMPV]""
"RTN","IBNCPEV1",302,0)
 . I IBEXMPV=2 S IBRET=IBRET_","_IBSC
"RTN","IBNCPEV1",303,0)
 Q $S(IBRET="":"SC",1:$E(IBRET,2,99))
"RTN","IBNCPEV1",304,0)
 ;IBNCPEV1
"RTN","IBNCPLOG")
0^27^B86545576
"RTN","IBNCPLOG",1,0)
IBNCPLOG ;BHAM ISC/SS - IB ECME EVNT REPORT ;3/5/08  14:02
"RTN","IBNCPLOG",2,0)
 ;;2.0;INTEGRATED BILLING;**342,339,363,383,411,435,452,534,550**;21-MAR-94;Build 25
"RTN","IBNCPLOG",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPLOG",4,0)
 ;
"RTN","IBNCPLOG",5,0)
 ;store data related to the IB calls made by ECME package in the file #366.14
"RTN","IBNCPLOG",6,0)
 ;input:
"RTN","IBNCPLOG",7,0)
 ;.IBIBD - (by reference) IBD array with parameter sent to IB by ECME
"RTN","IBNCPLOG",8,0)
 ;DFN patient's ien
"RTN","IBNCPLOG",9,0)
 ;IBPROC - type of event. i.e. content of CALL such as BILL, REJECT and so on
"RTN","IBNCPLOG",10,0)
 ;IBRESULT - (optional) result of the event processing, format: return_code^message
"RTN","IBNCPLOG",11,0)
 ;IBJOB - (optional) job, default = $J
"RTN","IBNCPLOG",12,0)
 ;IBDTTM - (optional) datetime, default = "NOW"
"RTN","IBNCPLOG",13,0)
 ;IBUSR - (optional) user ID, default = DUZ
"RTN","IBNCPLOG",14,0)
 ;output:
"RTN","IBNCPLOG",15,0)
 ;none
"RTN","IBNCPLOG",16,0)
LOG(IBIBD,DFN,IBPROC,IBRESULT,IBJOB,IBDTTM,IBUSR) ;Store the data
"RTN","IBNCPLOG",17,0)
 N NDX,Z,REF,IBDATE,IBDTIEN,IBEVNIEN,IBIBDTYP,IBRETV,IBPTR
"RTN","IBNCPLOG",18,0)
 S IBRESULT=$G(IBRESULT)
"RTN","IBNCPLOG",19,0)
 ;
"RTN","IBNCPLOG",20,0)
 I '$G(IBJOB) S IBJOB=$J
"RTN","IBNCPLOG",21,0)
 I '$G(IBDTTM) S IBDTTM=$$NOW^XLFDT()
"RTN","IBNCPLOG",22,0)
 I '$G(IBUSR) S IBUSR=+DUZ
"RTN","IBNCPLOG",23,0)
 ;
"RTN","IBNCPLOG",24,0)
 S IBDATE=DT
"RTN","IBNCPLOG",25,0)
 S IBDTIEN=+$O(^IBCNR(366.14,"B",IBDATE,0))
"RTN","IBNCPLOG",26,0)
 L +^IBCNR(366.14):30 E  Q
"RTN","IBNCPLOG",27,0)
 I IBDTIEN=0 S IBDTIEN=+$$ADDDATE(IBDATE)
"RTN","IBNCPLOG",28,0)
 ;create an event
"RTN","IBNCPLOG",29,0)
 S IBEVNIEN=$$NEWEVENT(IBDTIEN,IBPROC)
"RTN","IBNCPLOG",30,0)
 L -^IBCNR(366.14)
"RTN","IBNCPLOG",31,0)
 I IBEVNIEN=0 W !,"New event creation Error : LOG^IBNCPLOG",! Q
"RTN","IBNCPLOG",32,0)
 ;
"RTN","IBNCPLOG",33,0)
 I +$$FILLFLDS^IBNCPUT1(366.141,".03",IBEVNIEN_","_IBDTIEN,DFN) ;DFN
"RTN","IBNCPLOG",34,0)
 I +$$FILLFLDS^IBNCPUT1(366.141,".04",IBEVNIEN_","_IBDTIEN,IBJOB) ;JOB
"RTN","IBNCPLOG",35,0)
 I +$$FILLFLDS^IBNCPUT1(366.141,".05",IBEVNIEN_","_IBDTIEN,IBDTTM) ;DATETIME
"RTN","IBNCPLOG",36,0)
 I +$$FILLFLDS^IBNCPUT1(366.141,".06",IBEVNIEN_","_IBDTIEN,DUZ) ;USER
"RTN","IBNCPLOG",37,0)
 I IBRESULT'="" D
"RTN","IBNCPLOG",38,0)
 . S IBRETV=+$$FILLFLDS^IBNCPUT1(366.141,".07",IBEVNIEN_","_IBDTIEN,+IBRESULT) ;RESULT
"RTN","IBNCPLOG",39,0)
 . S IBRETV=+$$FILLFLDS^IBNCPUT1(366.141,".08",IBEVNIEN_","_IBDTIEN,$P(IBRESULT,U,2)) ;RESULT MESSAGE
"RTN","IBNCPLOG",40,0)
 . I IBPROC="BILLABLE STATUS CHECK",$P(IBRESULT,U,2)]"" D
"RTN","IBNCPLOG",41,0)
 .. S IBPTR=$$GETREAS($P(IBRESULT,U,2))
"RTN","IBNCPLOG",42,0)
 .. I IBPTR S IBRETV=+$$FILLFLDS^IBNCPUT1(366.141,".02",IBEVNIEN_","_IBDTIEN,IBPTR) ; Non-Billable Status Reason
"RTN","IBNCPLOG",43,0)
 . I $P(IBRESULT,U,3)'="" S IBRETV=+$$FILLFLDS^IBNCPUT1(366.141,"7.05",IBEVNIEN_","_IBDTIEN,$P(IBRESULT,U,3)) ; Eligibility from IB billing determination (IB*2*452)
"RTN","IBNCPLOG",44,0)
 . Q
"RTN","IBNCPLOG",45,0)
 ;
"RTN","IBNCPLOG",46,0)
 ;store IBIBD array
"RTN","IBNCPLOG",47,0)
 S IBIBDTYP=""
"RTN","IBNCPLOG",48,0)
 F  S IBIBDTYP=$O(IBIBD(IBIBDTYP)) Q:IBIBDTYP=""  D
"RTN","IBNCPLOG",49,0)
 . D IBD(IBDTIEN,IBEVNIEN,IBIBDTYP,$G(IBIBD(IBIBDTYP)),.IBIBD)
"RTN","IBNCPLOG",50,0)
 ;store "INS" node of IBIBD array
"RTN","IBNCPLOG",51,0)
 I $D(IBIBD("INS")) I $$INS(.IBIBD,IBDTIEN,IBEVNIEN)
"RTN","IBNCPLOG",52,0)
 Q
"RTN","IBNCPLOG",53,0)
 ;
"RTN","IBNCPLOG",54,0)
 ;store IBD array data
"RTN","IBNCPLOG",55,0)
 ;IBDTIEN -  ien on top [DATE] level
"RTN","IBNCPLOG",56,0)
 ;IBRECNO - ien in [EVENTS] multiple
"RTN","IBNCPLOG",57,0)
 ;IBIBDTYP - type subscript in IBD array (BILL, PAID, RESPONSE, etc)
"RTN","IBNCPLOG",58,0)
 ;IBVAL - value to store
"RTN","IBNCPLOG",59,0)
 ;IBIBD - array with data passed by reference (for efficiency)
"RTN","IBNCPLOG",60,0)
IBD(IBDTIEN,IBRECNO,IBIBDTYP,IBVAL,IBIBD) ;
"RTN","IBNCPLOG",61,0)
 N IBFLDNO
"RTN","IBNCPLOG",62,0)
 ;W !," - ",IBRECNO," ",IBIBDTYP," = ",IBVAL
"RTN","IBNCPLOG",63,0)
 ;free text like "WEBMD: PAID"
"RTN","IBNCPLOG",64,0)
 I IBIBDTYP="AUTH #" S IBFLDNO=".11",IBVAL=$E(IBVAL,1,30) G EDITIBD
"RTN","IBNCPLOG",65,0)
 ;free text like "0504597;3051229"
"RTN","IBNCPLOG",66,0)
 I IBIBDTYP="BCID" S IBFLDNO=".12" G EDITIBD
"RTN","IBNCPLOG",67,0)
 ;7 or 12 digit ECME number - identifier (stored as a text - might have leading zeroes)
"RTN","IBNCPLOG",68,0)
 I IBIBDTYP="CLAIMID" S IBFLDNO=".13" G EDITIBD
"RTN","IBNCPLOG",69,0)
 ;pointer to file #2
"RTN","IBNCPLOG",70,0)
 I IBIBDTYP="DFN" S IBFLDNO=".14" G EDITIBD
"RTN","IBNCPLOG",71,0)
 ;pointer to file #40.8
"RTN","IBNCPLOG",72,0)
 I IBIBDTYP="DIVISION" S IBFLDNO=".15" G EDITIBD
"RTN","IBNCPLOG",73,0)
 ;free text
"RTN","IBNCPLOG",74,0)
 I IBIBDTYP="RESPONSE" S IBFLDNO=".16",IBVAL=$E(IBVAL,1,20) G EDITIBD
"RTN","IBNCPLOG",75,0)
 ;free text
"RTN","IBNCPLOG",76,0)
 I IBIBDTYP="REVERSAL REASON" S IBFLDNO=".17",IBVAL=$E(IBVAL,1,40) G EDITIBD
"RTN","IBNCPLOG",77,0)
 ;1 digit number
"RTN","IBNCPLOG",78,0)
 I IBIBDTYP="RTS-DEL" S IBFLDNO=".18" G EDITIBD
"RTN","IBNCPLOG",79,0)
 ;free text
"RTN","IBNCPLOG",80,0)
 I IBIBDTYP="STATUS" S IBFLDNO=".19",IBVAL=$E(IBVAL,1,20) G EDITIBD
"RTN","IBNCPLOG",81,0)
 ;Prescription number as a text, might have alpha characters (external value, this is not IEN)
"RTN","IBNCPLOG",82,0)
 I IBIBDTYP="RX NO" S IBFLDNO=".202",IBVAL=$E(IBVAL,1,20) G EDITIBD
"RTN","IBNCPLOG",83,0)
 ;0 - original, 1,2,3,... - refill number
"RTN","IBNCPLOG",84,0)
 I IBIBDTYP="FILL NUMBER" S IBFLDNO=".203" G EDITIBD
"RTN","IBNCPLOG",85,0)
 ;internal identifier number for a DRUG
"RTN","IBNCPLOG",86,0)
 I IBIBDTYP="DRUG" S IBFLDNO=".204" G EDITIBD
"RTN","IBNCPLOG",87,0)
 I IBIBDTYP="NDC" S IBFLDNO=".205" G EDITIBD
"RTN","IBNCPLOG",88,0)
 I IBIBDTYP="DOS" S IBFLDNO=".206" G EDITIBD
"RTN","IBNCPLOG",89,0)
 I IBIBDTYP="RELEASE DATE" S IBFLDNO=".207" G EDITIBD
"RTN","IBNCPLOG",90,0)
 I IBIBDTYP="QTY" S IBFLDNO=".208" G EDITIBD
"RTN","IBNCPLOG",91,0)
 I IBIBDTYP="UNITS" S IBFLDNO=".213" G EDITIBD
"RTN","IBNCPLOG",92,0)
 I IBIBDTYP="NCPDP QTY" S IBFLDNO=".214" G EDITIBD
"RTN","IBNCPLOG",93,0)
 I IBIBDTYP="NCPDP UNITS" S IBFLDNO=".215" G EDITIBD
"RTN","IBNCPLOG",94,0)
 I IBIBDTYP="DAYS SUPPLY" S IBFLDNO=".209" G EDITIBD
"RTN","IBNCPLOG",95,0)
 I IBIBDTYP="DEA" S IBFLDNO=".21" G EDITIBD
"RTN","IBNCPLOG",96,0)
 I IBIBDTYP="FILLED BY" S IBFLDNO=".211" G EDITIBD
"RTN","IBNCPLOG",97,0)
 I IBIBDTYP="COPAY" S IBFLDNO=".311" G EDITIBD
"RTN","IBNCPLOG",98,0)
 I IBIBDTYP="ING COST PAID" S IBFLDNO=".312" G EDITIBD
"RTN","IBNCPLOG",99,0)
 I IBIBDTYP="DISP FEE PAID" S IBFLDNO=".313" G EDITIBD
"RTN","IBNCPLOG",100,0)
 I IBIBDTYP="PAT RESP" S IBFLDNO=".314" G EDITIBD
"RTN","IBNCPLOG",101,0)
 ; for environmental indicators:
"RTN","IBNCPLOG",102,0)
 ; if IBIBD("SC/EI OVR")=1 - the user overrides any answers (3)
"RTN","IBNCPLOG",103,0)
 ; if $G(IBIBD("SC/EI NO ANSW")) contains the IBIBDTYP - this question was not answered (2)
"RTN","IBNCPLOG",104,0)
 ; otherwise - use whatever in the IBVAL (0 - NO, 1 -YES)
"RTN","IBNCPLOG",105,0)
 I IBIBDTYP="AO" S IBFLDNO=".401",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",106,0)
 I IBIBDTYP="CV" S IBFLDNO=".402",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",107,0)
 I IBIBDTYP="SWA" S IBFLDNO=".403",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",108,0)
 I IBIBDTYP="IR" S IBFLDNO=".404",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",109,0)
 I IBIBDTYP="MST" S IBFLDNO=".405",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",110,0)
 I IBIBDTYP="HNC" S IBFLDNO=".406",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",111,0)
 I IBIBDTYP="SC" S IBFLDNO=".407",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",112,0)
 I IBIBDTYP="SHAD" S IBFLDNO=".408",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",113,0)
 I IBIBDTYP="BILL" S IBFLDNO=".301" G EDITIBD
"RTN","IBNCPLOG",114,0)
 I IBIBDTYP="BILLED" S IBFLDNO=".302" G EDITIBD
"RTN","IBNCPLOG",115,0)
 I IBIBDTYP="PLAN" S IBFLDNO=".303" G EDITIBD
"RTN","IBNCPLOG",116,0)
 I IBIBDTYP="COST" S IBFLDNO=".304" G EDITIBD
"RTN","IBNCPLOG",117,0)
 I IBIBDTYP="PAID" S IBFLDNO=".305" G EDITIBD
"RTN","IBNCPLOG",118,0)
 I IBIBDTYP="CLOSE COMMENT" S IBFLDNO=".306" G EDITIBD
"RTN","IBNCPLOG",119,0)
 I IBIBDTYP="REOPEN COMMENT" S IBFLDNO=".306" G EDITIBD
"RTN","IBNCPLOG",120,0)
 I IBIBDTYP="CLOSE REASON" S IBFLDNO=".307" G EDITIBD
"RTN","IBNCPLOG",121,0)
 I IBIBDTYP="DROP TO PAPER" S IBFLDNO=".308" G EDITIBD
"RTN","IBNCPLOG",122,0)
 I IBIBDTYP="RELEASE COPAY" S IBFLDNO=".309" G EDITIBD
"RTN","IBNCPLOG",123,0)
 I IBIBDTYP="USER" S IBFLDNO=".31" G EDITIBD
"RTN","IBNCPLOG",124,0)
 I IBIBDTYP="PRESCRIPTION" S IBFLDNO=".201" G EDITIBD
"RTN","IBNCPLOG",125,0)
 I IBIBDTYP="IEN" S IBFLDNO=".212" G EDITIBD
"RTN","IBNCPLOG",126,0)
 I IBIBDTYP="EPHARM" S IBFLDNO=".09" G EDITIBD
"RTN","IBNCPLOG",127,0)
 I IBIBDTYP="RXCOB" S IBFLDNO="7.01" G EDITIBD
"RTN","IBNCPLOG",128,0)
 I IBIBDTYP="PRIMARY BILL" S IBFLDNO="7.02" G EDITIBD
"RTN","IBNCPLOG",129,0)
 I IBIBDTYP="PRIOR PAYMENT" S IBFLDNO="7.03" G EDITIBD
"RTN","IBNCPLOG",130,0)
 I IBIBDTYP="RTYPE" S IBFLDNO="7.04" G EDITIBD
"RTN","IBNCPLOG",131,0)
 I IBIBDTYP="DRUG-BILLABLE" S IBFLDNO=7.06 G EDITIBD
"RTN","IBNCPLOG",132,0)
 I IBIBDTYP="DRUG-BILLABLE TRICARE" S IBFLDNO=7.07 G EDITIBD
"RTN","IBNCPLOG",133,0)
 I IBIBDTYP="DRUG-BILLABLE CHAMPVA" S IBFLDNO=7.08 G EDITIBD
"RTN","IBNCPLOG",134,0)
 I IBIBDTYP="DRUG-SENSITIVE DX" S IBFLDNO=7.09 G EDITIBD
"RTN","IBNCPLOG",135,0)
 Q 0
"RTN","IBNCPLOG",136,0)
EDITIBD ;
"RTN","IBNCPLOG",137,0)
 Q +$$FILLFLDS^IBNCPUT1(366.141,IBFLDNO,IBRECNO_","_IBDTIEN,IBVAL)
"RTN","IBNCPLOG",138,0)
 ;------
"RTN","IBNCPLOG",139,0)
 ;to store IBD("INS") array data
"RTN","IBNCPLOG",140,0)
 ;input:
"RTN","IBNCPLOG",141,0)
 ;IBDARR - IBD array by reference
"RTN","IBNCPLOG",142,0)
 ;IBDTIEN -  ien on top [DATE] level
"RTN","IBNCPLOG",143,0)
 ;IBRECNO - ien in [EVENTS] multiple
"RTN","IBNCPLOG",144,0)
 ;output:
"RTN","IBNCPLOG",145,0)
 ; record number if success
"RTN","IBNCPLOG",146,0)
 ; 0 if failure
"RTN","IBNCPLOG",147,0)
INS(IBDARR,IBDTIEN,IBRECNO) ;
"RTN","IBNCPLOG",148,0)
 N IBSET1,IBSET2,IBSET3,IBFLDNO,IBINSNO,RECNO,IBVAL
"RTN","IBNCPLOG",149,0)
 S IBINSNO=0
"RTN","IBNCPLOG",150,0)
 ; Only create entry for first insurance found. BNT 07/07/2010
"RTN","IBNCPLOG",151,0)
 F  S IBINSNO=$O(IBDARR("INS",IBINSNO)) Q:+IBINSNO=0  D  Q:$D(RECNO)
"RTN","IBNCPLOG",152,0)
 . S IBSET1=$G(IBDARR("INS",IBINSNO,1))
"RTN","IBNCPLOG",153,0)
 . S IBSET2=$G(IBDARR("INS",IBINSNO,2))
"RTN","IBNCPLOG",154,0)
 . S IBSET3=$G(IBDARR("INS",IBINSNO,3))
"RTN","IBNCPLOG",155,0)
 . S RECNO=$$ADDINS(IBDTIEN,IBRECNO)
"RTN","IBNCPLOG",156,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.02,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,1))
"RTN","IBNCPLOG",157,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.03,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,2))
"RTN","IBNCPLOG",158,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.04,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,3))
"RTN","IBNCPLOG",159,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.05,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,4))
"RTN","IBNCPLOG",160,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.06,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,5))
"RTN","IBNCPLOG",161,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.07,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,6))
"RTN","IBNCPLOG",162,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.08,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,7))
"RTN","IBNCPLOG",163,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.09,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,20))
"RTN","IBNCPLOG",164,0)
 . ;
"RTN","IBNCPLOG",165,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.101,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,8))
"RTN","IBNCPLOG",166,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.102,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,9))
"RTN","IBNCPLOG",167,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.103,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,10))
"RTN","IBNCPLOG",168,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.104,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,11))
"RTN","IBNCPLOG",169,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.105,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,12))
"RTN","IBNCPLOG",170,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.106,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,13))
"RTN","IBNCPLOG",171,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.107,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,14))
"RTN","IBNCPLOG",172,0)
 . ;
"RTN","IBNCPLOG",173,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.201,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,1))
"RTN","IBNCPLOG",174,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.202,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,2))
"RTN","IBNCPLOG",175,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.203,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,3))
"RTN","IBNCPLOG",176,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.204,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,4))
"RTN","IBNCPLOG",177,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.205,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,5))
"RTN","IBNCPLOG",178,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.206,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,6))
"RTN","IBNCPLOG",179,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.207,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,7))
"RTN","IBNCPLOG",180,0)
 . ;
"RTN","IBNCPLOG",181,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.301,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET3,U,1))
"RTN","IBNCPLOG",182,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.302,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET3,U,2))
"RTN","IBNCPLOG",183,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.303,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET3,U,3))
"RTN","IBNCPLOG",184,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.304,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET3,U,7))
"RTN","IBNCPLOG",185,0)
 . Q
"RTN","IBNCPLOG",186,0)
 ;
"RTN","IBNCPLOG",187,0)
 Q RECNO
"RTN","IBNCPLOG",188,0)
 ;create top level entry in #366.14
"RTN","IBNCPLOG",189,0)
 ;input:
"RTN","IBNCPLOG",190,0)
 ; IBDATE - date in FileMan format
"RTN","IBNCPLOG",191,0)
 ;output
"RTN","IBNCPLOG",192,0)
 ; returns ien created
"RTN","IBNCPLOG",193,0)
ADDDATE(IBDATE) ;
"RTN","IBNCPLOG",194,0)
 N IBIEN
"RTN","IBNCPLOG",195,0)
 S IBIEN=+$O(^IBCNR(366.14,"B",IBDATE,0))
"RTN","IBNCPLOG",196,0)
 I IBIEN>0 Q IBIEN
"RTN","IBNCPLOG",197,0)
 I $$INSITEM^IBNCPUT1(366.14,"",IBDATE,"")
"RTN","IBNCPLOG",198,0)
 Q +$O(^IBCNR(366.14,"B",IBDATE,0))
"RTN","IBNCPLOG",199,0)
 ;
"RTN","IBNCPLOG",200,0)
 ;create EVENT entry in #366.14
"RTN","IBNCPLOG",201,0)
 ;input:
"RTN","IBNCPLOG",202,0)
 ;IBIEN - ien on top [DATE] level
"RTN","IBNCPLOG",203,0)
 ;EVNTTYPE event type (value for .01)
"RTN","IBNCPLOG",204,0)
 ;returns ien for the event
"RTN","IBNCPLOG",205,0)
 ;or 0 if failed
"RTN","IBNCPLOG",206,0)
NEWEVENT(IBIEN,EVNTTYPE) ;
"RTN","IBNCPLOG",207,0)
 N EVNTRECN
"RTN","IBNCPLOG",208,0)
 S EVNTRECN=$$INSITEM^IBNCPUT1(366.141,IBIEN,$$EXT2INT^IBNCPUT1(EVNTTYPE),"","")
"RTN","IBNCPLOG",209,0)
 I EVNTRECN>0 Q EVNTRECN
"RTN","IBNCPLOG",210,0)
 Q 0
"RTN","IBNCPLOG",211,0)
 ;
"RTN","IBNCPLOG",212,0)
 ;add insurance node
"RTN","IBNCPLOG",213,0)
 ;IBDTIEN - ien on top [DATE] level
"RTN","IBNCPLOG",214,0)
 ;IBEVIEN - ien in [EVENTS] multiple
"RTN","IBNCPLOG",215,0)
 ;returns :
"RTN","IBNCPLOG",216,0)
 ; new ien in INSURANCE multiple
"RTN","IBNCPLOG",217,0)
ADDINS(IBDTIEN,IBEVIEN) ;
"RTN","IBNCPLOG",218,0)
 N IBX,IBX2
"RTN","IBNCPLOG",219,0)
 F IBX=1:1:99999 I '$D(^IBCNR(366.14,IBDTIEN,1,IBEVIEN,5,IBX)) D  Q
"RTN","IBNCPLOG",220,0)
 . S IBX2=$$INSITEM^IBNCPUT1(366.1412,IBEVIEN_","_IBDTIEN,IBX,IBX)
"RTN","IBNCPLOG",221,0)
 Q +$O(^IBCNR(366.14,IBDTIEN,1,IBEVIEN,5,"B",IBX,0))
"RTN","IBNCPLOG",222,0)
 ;
"RTN","IBNCPLOG",223,0)
GETREAS(REASON) ;
"RTN","IBNCPLOG",224,0)
 ; Get the pointer of the IB NCPDP NON-BILLABLE REASON file - Create the 
"RTN","IBNCPLOG",225,0)
 ;   entry if needed.
"RTN","IBNCPLOG",226,0)
 ;
"RTN","IBNCPLOG",227,0)
 ; Input:
"RTN","IBNCPLOG",228,0)
 ;   REASON: Non-billable reason text
"RTN","IBNCPLOG",229,0)
 ; Output:
"RTN","IBNCPLOG",230,0)
 ;   IEN of the IB NCPPD NON-BILLABLE REASON file
"RTN","IBNCPLOG",231,0)
 ;
"RTN","IBNCPLOG",232,0)
 I $G(REASON)="" Q ""
"RTN","IBNCPLOG",233,0)
 N NBSTS,DIC,X,Y,DTOUT,DUOUT
"RTN","IBNCPLOG",234,0)
 ;
"RTN","IBNCPLOG",235,0)
 ; Make uppercase and less than 60 characters
"RTN","IBNCPLOG",236,0)
 S REASON=$TR($E($$UP^XLFSTR(REASON),1,60),"^")
"RTN","IBNCPLOG",237,0)
 I $E(REASON,$L(REASON))="." S REASON=$E(REASON,1,$L(REASON)-1)
"RTN","IBNCPLOG",238,0)
 ;
"RTN","IBNCPLOG",239,0)
 ; Check if it already exists.  If so, return the IEN
"RTN","IBNCPLOG",240,0)
 S NBSTS=$O(^IBCNR(366.17,"B",REASON,""))
"RTN","IBNCPLOG",241,0)
 I NBSTS Q NBSTS
"RTN","IBNCPLOG",242,0)
 ;
"RTN","IBNCPLOG",243,0)
 ; If it does not exist not, add to the dictionary
"RTN","IBNCPLOG",244,0)
 S DIC="^IBCNR(366.17,",DIC(0)="F",X=REASON
"RTN","IBNCPLOG",245,0)
 D FILE^DICN
"RTN","IBNCPLOG",246,0)
 I Y=-1 Q ""
"RTN","IBNCPLOG",247,0)
 Q +Y
"RTN","IBNCPUT1")
0^15^B21678012
"RTN","IBNCPUT1",1,0)
IBNCPUT1 ;BHAM ISC/SS - IB NCPDP UTILITIES ;22-MAR-2006
"RTN","IBNCPUT1",2,0)
 ;;2.0;INTEGRATED BILLING;**342,363,384,550**;21-MAR-94;Build 25
"RTN","IBNCPUT1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBNCPUT1",4,0)
 ;
"RTN","IBNCPUT1",5,0)
 ;Utilities for NPCDP
"RTN","IBNCPUT1",6,0)
 ;/**
"RTN","IBNCPUT1",7,0)
 ;Creates a new entry in the file or subfile with .01 field
"RTN","IBNCPUT1",8,0)
 ;IBFILE - file/subfile #
"RTN","IBNCPUT1",9,0)
 ;IBIEN - ien of the parent file entry in which the new subfile entry will be inserted
"RTN","IBNCPUT1",10,0)
 ;IBVAL01 - .01 value for the new entry
"RTN","IBNCPUT1",11,0)
 ;NEWRECNO -(optional) specify IEN if you want specific value
"RTN","IBNCPUT1",12,0)
 ; Note: if "" then the system will assign the entry number itself.
"RTN","IBNCPUT1",13,0)
 ;IBFLGS - FLAGS parameter for UPDATE^DIE
"RTN","IBNCPUT1",14,0)
 ;
"RTN","IBNCPUT1",15,0)
 ;Examples
"RTN","IBNCPUT1",16,0)
 ;top level:
"RTN","IBNCPUT1",17,0)
 ; INSITEM(366.14,"",IBDATE,"")
"RTN","IBNCPUT1",18,0)
 ; INSITEM(366.14,"",IBDATE,45)
"RTN","IBNCPUT1",19,0)
 ; 
"RTN","IBNCPUT1",20,0)
 ;1st level multiple:
"RTN","IBNCPUT1",21,0)
 ; subfile number = #366.141
"RTN","IBNCPUT1",22,0)
 ; parent file #366.14 entry number = 345
"RTN","IBNCPUT1",23,0)
 ; INSITEM(366.141,345,"SUBMIT","")
"RTN","IBNCPUT1",24,0)
 ; to create mupltiple entry with particular entry number = 23
"RTN","IBNCPUT1",25,0)
 ; INSITEM(366.141,345,"SUBMIT",23)
"RTN","IBNCPUT1",26,0)
 ;
"RTN","IBNCPUT1",27,0)
 ;2nd level multiple
"RTN","IBNCPUT1",28,0)
 ;parent file #366.14 entry number = 234
"RTN","IBNCPUT1",29,0)
 ;parent multiple entry number = 55
"RTN","IBNCPUT1",30,0)
 ;create mupltiple entry INSURANCE
"RTN","IBNCPUT1",31,0)
 ; INSITEM(366.1412,"55,234","INS","")
"RTN","IBNCPUT1",32,0)
 ; results in :
"RTN","IBNCPUT1",33,0)
 ; ^IBCNR(366.14,234,1,55,5,0)=^366.1412PA^1^1
"RTN","IBNCPUT1",34,0)
 ; ^IBCNR(366.14,234,1,55,5,1,0)=INS
"RTN","IBNCPUT1",35,0)
 ; ^IBCNR(366.14,234,1,55,5,"B","INS",1)=
"RTN","IBNCPUT1",36,0)
 ;  (DD node for this muptiple =5 ) 
"RTN","IBNCPUT1",37,0)
 ;  
"RTN","IBNCPUT1",38,0)
 ;output :
"RTN","IBNCPUT1",39,0)
 ; positive number - record # created
"RTN","IBNCPUT1",40,0)
 ; <=0 - failure
"RTN","IBNCPUT1",41,0)
 ;  See description above
"RTN","IBNCPUT1",42,0)
INSITEM(IBFILE,IBIEN,IBVAL01,NEWRECNO,IBFLGS) ;*/
"RTN","IBNCPUT1",43,0)
 N IBSSI,IBIENS,IBFDA,IBERR
"RTN","IBNCPUT1",44,0)
 I '$G(NEWRECNO) N NEWRECNO S NEWRECNO=$G(NEWRECNO)
"RTN","IBNCPUT1",45,0)
 I IBIEN'="" S IBIENS="+1,"_IBIEN_"," I $L(NEWRECNO)>0 S IBSSI(1)=+NEWRECNO
"RTN","IBNCPUT1",46,0)
 I IBIEN="" S IBIENS="+1," I $L(NEWRECNO)>0 S IBSSI(1)=+NEWRECNO
"RTN","IBNCPUT1",47,0)
 S IBFDA(IBFILE,IBIENS,.01)=IBVAL01
"RTN","IBNCPUT1",48,0)
 D UPDATE^DIE($G(IBFLGS),"IBFDA","IBSSI","IBERR")
"RTN","IBNCPUT1",49,0)
 I $D(IBERR) D BMES^XPDUTL(IBERR("DIERR",1,"TEXT",1)) Q -1  ;D BMES^XPDUTL(IBERR("DIERR",1,"TEXT",1)) 
"RTN","IBNCPUT1",50,0)
 Q +$G(IBSSI(1))
"RTN","IBNCPUT1",51,0)
 ;
"RTN","IBNCPUT1",52,0)
 ;
"RTN","IBNCPUT1",53,0)
 ;fill fields
"RTN","IBNCPUT1",54,0)
 ;Input:
"RTN","IBNCPUT1",55,0)
 ;FILENO file number
"RTN","IBNCPUT1",56,0)
 ;FLDNO field number
"RTN","IBNCPUT1",57,0)
 ;RECIEN ien string 
"RTN","IBNCPUT1",58,0)
 ;NEWVAL new value to file
"RTN","IBNCPUT1",59,0)
 ;Output:
"RTN","IBNCPUT1",60,0)
 ;0^ NEWVAL^error if failure
"RTN","IBNCPUT1",61,0)
 ;1^ NEWVAL if success
"RTN","IBNCPUT1",62,0)
FILLFLDS(FILENO,FLDNO,RECIEN,NEWVAL) ;
"RTN","IBNCPUT1",63,0)
 N RECIENS,FDA,ERRARR
"RTN","IBNCPUT1",64,0)
 S RECIENS=RECIEN_","
"RTN","IBNCPUT1",65,0)
 S FDA(FILENO,RECIENS,FLDNO)=NEWVAL
"RTN","IBNCPUT1",66,0)
 D FILE^DIE("","FDA","ERRARR")
"RTN","IBNCPUT1",67,0)
 I $D(ERRARR) Q "0^"_NEWVAL_"^"_ERRARR("DIERR",1,"TEXT",1)
"RTN","IBNCPUT1",68,0)
 Q "1^"_NEWVAL
"RTN","IBNCPUT1",69,0)
 ;
"RTN","IBNCPUT1",70,0)
 ;convert external value of the field EVENT TYPE to its internal value
"RTN","IBNCPUT1",71,0)
 ;IA# 10155
"RTN","IBNCPUT1",72,0)
EXT2INT(IBEXTRN) ;
"RTN","IBNCPUT1",73,0)
 N IBDD,IBZ,IBCNT,IBINTERN
"RTN","IBNCPUT1",74,0)
 S IBINTERN=-1
"RTN","IBNCPUT1",75,0)
 S IBDD=$P($G(^DD(366.141,.01,0)),U,3) ;IA# 10155
"RTN","IBNCPUT1",76,0)
 F IBCNT=1:1 S IBZ=$P(IBDD,";",IBCNT) Q:IBZ=""  D  Q:IBINTERN'<0
"RTN","IBNCPUT1",77,0)
 . I $P(IBZ,":",2)=IBEXTRN S IBINTERN=+IBZ
"RTN","IBNCPUT1",78,0)
 Q:IBINTERN<0 0  ;treat as UNKNOWN
"RTN","IBNCPUT1",79,0)
 Q IBINTERN
"RTN","IBNCPUT1",80,0)
 ;
"RTN","IBNCPUT1",81,0)
 ;
"RTN","IBNCPUT1",82,0)
 ;should RX copay from the entry in file #350 be placed on hold ?
"RTN","IBNCPUT1",83,0)
 ;called from HOLD^IBRUTL
"RTN","IBNCPUT1",84,0)
 ;Input:
"RTN","IBNCPUT1",85,0)
 ; X - zeroth node of file #350 entry
"RTN","IBNCPUT1",86,0)
 ;output:
"RTN","IBNCPUT1",87,0)
 ; 0 - NO - DO NOT PUT ON HOLD
"RTN","IBNCPUT1",88,0)
 ; 1 - this is RX copay but there is no ECME claim, so process it as usual
"RTN","IBNCPUT1",89,0)
 ; 1 - this is ECME RX copay and it should be put on HOLD
"RTN","IBNCPUT1",90,0)
 ; 1 - this is ECME RX copay and it was rejected or reversed 
"RTN","IBNCPUT1",91,0)
 ; 2 - this is not RX copay
"RTN","IBNCPUT1",92,0)
HOLDECME(X) ;
"RTN","IBNCPUT1",93,0)
 N IBRXIEN,IBREFNO,IBRXZ,IBDATE,IBDFN,IBEBCOB,IBRETVAL
"RTN","IBNCPUT1",94,0)
 S IBRETVAL=""
"RTN","IBNCPUT1",95,0)
 S IBRXZ=$P($G(X),U,4),(IBRXIEN,IBREFNO)=0
"RTN","IBNCPUT1",96,0)
 I $P($P(IBRXZ,";"),":")'=52 Q 2  ;follow pre-existing logic
"RTN","IBNCPUT1",97,0)
 S IBRXIEN=+$P($P(IBRXZ,";"),":",2) ;ien in file #52
"RTN","IBNCPUT1",98,0)
 S IBREFNO=+$P($P($P(X,U,4),";",2),":",2) ;refill number (0 - for  original)
"RTN","IBNCPUT1",99,0)
 S IBDFN=+$P($G(X),U,2) ;Patient ien
"RTN","IBNCPUT1",100,0)
 ;if this is OTC "non-e-billable" drug then DO NOT PUT ON HOLD
"RTN","IBNCPUT1",101,0)
 I $$OTCNEBIL(IBRXIEN,IBREFNO)=1 Q 0
"RTN","IBNCPUT1",102,0)
 ;if this is non-OTC drug OR if this is OTC drug but marked as e-billable then look if it has zero amount paid
"RTN","IBNCPUT1",103,0)
 I $$AMNTHOLD^IBNCPUT1(IBDFN,IBRXIEN,IBREFNO)=0 Q 0  ;DO NOT PUT ON HOLD
"RTN","IBNCPUT1",104,0)
 Q 1  ;follow pre-existing logic
"RTN","IBNCPUT1",105,0)
 ;
"RTN","IBNCPUT1",106,0)
 ;should RX copay be placed on hold based on the PAID amount?
"RTN","IBNCPUT1",107,0)
 ;input:
"RTN","IBNCPUT1",108,0)
 ; IBDFN - patient's ien
"RTN","IBNCPUT1",109,0)
 ; IBRX - file #52 ien
"RTN","IBNCPUT1",110,0)
 ; IBREF - refill no
"RTN","IBNCPUT1",111,0)
 ;output:
"RTN","IBNCPUT1",112,0)
 ; 1 - YES
"RTN","IBNCPUT1",113,0)
 ; 0 - NO
"RTN","IBNCPUT1",114,0)
AMNTHOLD(IBDFN,IBRX,IBREF) ;
"RTN","IBNCPUT1",115,0)
 N IBPAYRES ;for payer's response
"RTN","IBNCPUT1",116,0)
 N IBADT
"RTN","IBNCPUT1",117,0)
 ;
"RTN","IBNCPUT1",118,0)
 S IBPAYRES=$$PAIDAMNT^BPSUTIL(IBRX,IBREF)
"RTN","IBNCPUT1",119,0)
 ;if payable AND amount paid is zero AND does not have any other Pharmacy insurance 
"RTN","IBNCPUT1",120,0)
 ;THEN return NO - it should not be put on hold
"RTN","IBNCPUT1",121,0)
 I +IBPAYRES=1,$P(IBPAYRES,U,2)=0,'$$MOREINS^IBNCPNB(IBDFN,+$P(IBPAYRES,U,3)) Q 0
"RTN","IBNCPUT1",122,0)
 Q 1
"RTN","IBNCPUT1",123,0)
 ;Is this RX for OTC drug which is NOT E-billiable?
"RTN","IBNCPUT1",124,0)
 ;Input:
"RTN","IBNCPUT1",125,0)
 ; IBRX - ien in file #52
"RTN","IBNCPUT1",126,0)
 ; IBREFNO - fill#
"RTN","IBNCPUT1",127,0)
 ;Output:
"RTN","IBNCPUT1",128,0)
 ; 1 - this is OTC drug and it is NOT marked as e-billable
"RTN","IBNCPUT1",129,0)
 ; 0 - otherwise
"RTN","IBNCPUT1",130,0)
OTCNEBIL(IBRX,IBREFNO) ;
"RTN","IBNCPUT1",131,0)
 N ARR,IBSPHNDL,IBDRUG,IBELIG
"RTN","IBNCPUT1",132,0)
 S IBDRUG=+$$RXAPI1^IBNCPUT1(IBRX,6,"I")
"RTN","IBNCPUT1",133,0)
 S IBSPHNDL=$$DRUGDIE^IBNCPUT1(IBDRUG,3,"E",.ARR)
"RTN","IBNCPUT1",134,0)
 I IBSPHNDL'["9" Q 0  ;this is not OTC drug
"RTN","IBNCPUT1",135,0)
 S IBELIG=$S('IBREFNO:$$FILE^IBRXUTL(IBRX,85),1:$$SUBFILE^IBRXUTL(IBRX,IBREFNO,52,85))
"RTN","IBNCPUT1",136,0)
 I $$BILLABLE^IBNCPDP(IBDRUG,IBELIG) Q 0 ; it is an OTC e-billable drug
"RTN","IBNCPUT1",137,0)
 ;it is OTC NON E-billable drug
"RTN","IBNCPUT1",138,0)
 Q 1
"RTN","IBNCPUT1",139,0)
 ;
"RTN","IBNCPUT1",140,0)
 ;Function to return field data from DRUG file (#50)
"RTN","IBNCPUT1",141,0)
 ; Parameters
"RTN","IBNCPUT1",142,0)
 ;  IBIEN50 - IEN of DRUG FILE #50
"RTN","IBNCPUT1",143,0)
 ;  IBFLDN - Field Number(s) (like .01)
"RTN","IBNCPUT1",144,0)
 ;  IBEXIN - Specifies internal or external value of returned field
"RTN","IBNCPUT1",145,0)
 ;         - optional, defaults to "I"
"RTN","IBNCPUT1",146,0)
 ;  IBARR50 - Array to return value(s).  Optional.  Pass by reference.
"RTN","IBNCPUT1",147,0)
 ;           See EN^DIQ documentation for variable DIQ
"RTN","IBNCPUT1",148,0)
 ;
"RTN","IBNCPUT1",149,0)
 ; Function returns field data if one field is specified.  If
"RTN","IBNCPUT1",150,0)
 ;   multiple fields, the function will return "" and the field
"RTN","IBNCPUT1",151,0)
 ;   values are returned in IBARR50
"RTN","IBNCPUT1",152,0)
 ; Example: W $$DRUGDIE^IBNCPUT1(134,25,"E",.ARR)
"RTN","IBNCPUT1",153,0)
DRUGDIE(IBIEN50,IBFLDN,IBEXIN,IBARR50) ; Return field values for Drug file 
"RTN","IBNCPUT1",154,0)
 I $G(IBIEN50)=""!($G(IBFLDN)="") Q ""
"RTN","IBNCPUT1",155,0)
 N DIQ,PSSDIY
"RTN","IBNCPUT1",156,0)
 N IBDIQ
"RTN","IBNCPUT1",157,0)
 I $G(IBEXIN)'="E" S IBEXIN="I"
"RTN","IBNCPUT1",158,0)
 S IBDIQ="IBARR50",IBDIQ(0)=IBEXIN
"RTN","IBNCPUT1",159,0)
 D EN^PSSDI(50,"IB",50,.IBFLDN,.IBIEN50,.IBDIQ)
"RTN","IBNCPUT1",160,0)
 Q $G(IBARR50(50,IBIEN50,IBFLDN,IBEXIN))
"RTN","IBNCPUT1",161,0)
 ;
"RTN","IBNCPUT1",162,0)
 ;/*
"RTN","IBNCPUT1",163,0)
 ;Function to return a value for a SINGLE field of file #52
"RTN","IBNCPUT1",164,0)
 ;DBIA 4858
"RTN","IBNCPUT1",165,0)
 ;input:
"RTN","IBNCPUT1",166,0)
 ; IBIEN52 - ien of file #52
"RTN","IBNCPUT1",167,0)
 ; IBFLDN - one single field, for example ".01"
"RTN","IBNCPUT1",168,0)
 ; IBFORMAT - 
"RTN","IBNCPUT1",169,0)
 ;  "E" for external format
"RTN","IBNCPUT1",170,0)
 ;  "I" - internal 
"RTN","IBNCPUT1",171,0)
 ;  "N" - do not return nulls
"RTN","IBNCPUT1",172,0)
 ;  default is "E"
"RTN","IBNCPUT1",173,0)
 ;output:
"RTN","IBNCPUT1",174,0)
 ; returns a field value or null (empty string) 
"RTN","IBNCPUT1",175,0)
 ; examples:
"RTN","IBNCPUT1",176,0)
 ;W $$RXAPI1^IBNCPUT1(504733,6,"E")
"RTN","IBNCPUT1",177,0)
 ;ALBUMIN 25% 50ML
"RTN","IBNCPUT1",178,0)
 ;W $$RXAPI1^IBNCPUT1(504733,6,"I")
"RTN","IBNCPUT1",179,0)
 ;134
"RTN","IBNCPUT1",180,0)
RXAPI1(IBIEN52,IBFLDN,IBFORMAT) ;*/
"RTN","IBNCPUT1",181,0)
 N DIQ,DIC,IBARR,X,Y,D0,PSODIY
"RTN","IBNCPUT1",182,0)
 N I,J,C,DA,DRS,DIL,DI,DIQ1
"RTN","IBNCPUT1",183,0)
 N IBDIQ
"RTN","IBNCPUT1",184,0)
 S IBDIQ="IBARR"
"RTN","IBNCPUT1",185,0)
 S IBDIQ(0)=$S($G(IBFORMAT)="":"E",1:IBFORMAT)
"RTN","IBNCPUT1",186,0)
 D DIQ^PSODI(52,52,.IBFLDN,.IBIEN52,.IBDIQ) ;DBIA 4858
"RTN","IBNCPUT1",187,0)
 Q $S(IBDIQ(0)="N":$G(IBARR(52,IBIEN52,IBFLDN)),1:$G(IBARR(52,IBIEN52,IBFLDN,IBDIQ(0))))
"RTN","IBNCPUT1",188,0)
 ;
"RTN","IBNCPUT1",189,0)
 ;
"RTN","IBNCPUT1",190,0)
 ;IBNCPUT1
"RTN","IBTRKR3")
0^6^B54454971
"RTN","IBTRKR3",1,0)
IBTRKR3 ;ALB/AAS - CLAIMS TRACKING - ADD/TRACK RX FILLS ;13-AUG-93
"RTN","IBTRKR3",2,0)
 ;;2.0;INTEGRATED BILLING;**13,43,121,160,247,275,260,309,336,312,339,347,405,384,550**;21-MAR-94;Build 25
"RTN","IBTRKR3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBTRKR3",4,0)
 ;
"RTN","IBTRKR3",5,0)
% ; -- entry point for nightly background job
"RTN","IBTRKR3",6,0)
 N IBTSBDT,IBTSEDT
"RTN","IBTRKR3",7,0)
 S IBTSBDT=$$FMADD^XLFDT(DT,-14)-.1
"RTN","IBTRKR3",8,0)
 S IBTSEDT=$$FMADD^XLFDT(DT,-7)+.9
"RTN","IBTRKR3",9,0)
 D EN1
"RTN","IBTRKR3",10,0)
 Q
"RTN","IBTRKR3",11,0)
 ;
"RTN","IBTRKR3",12,0)
EN ; -- entry point to ask date range
"RTN","IBTRKR3",13,0)
 N IBSWINFO S IBSWINFO=$$SWSTAT^IBBAPI() ;IB*2.0*312
"RTN","IBTRKR3",14,0)
 N IBBDT,IBEDT,IBTSBDT,IBTSEDT,IBTALK,IBMESS
"RTN","IBTRKR3",15,0)
 S IBTALK=1
"RTN","IBTRKR3",16,0)
 I '$P($G(^IBE(350.9,1,6)),"^",4) W !!,"I'm sorry, Tracking of Prescription Refills is currently turned off." G ENQ
"RTN","IBTRKR3",17,0)
 W !!!,"Select the Date Range of Rx Refills to Add to Claims Tracking.",!
"RTN","IBTRKR3",18,0)
 D DATE^IBOUTL
"RTN","IBTRKR3",19,0)
 I IBBDT<1!(IBEDT<1) G ENQ
"RTN","IBTRKR3",20,0)
 S IBTSBDT=IBBDT,IBTSEDT=IBEDT
"RTN","IBTRKR3",21,0)
 ;
"RTN","IBTRKR3",22,0)
 ; Do NOT PROCESS on VistA if Start or End>=Switch Eff Date ;IB*2.0*312
"RTN","IBTRKR3",23,0)
 I +IBSWINFO,((IBTSBDT+1)>$P(IBSWINFO,"^",2))!((IBTSEDT+1)>$P(IBSWINFO,"^",2)) D  G EN
"RTN","IBTRKR3",24,0)
 .W !!,"The Begin OR End Date CANNOT be on or after"
"RTN","IBTRKR3",25,0)
 .W !,"the PFSS Effective Date: ",$$FMTE^XLFDT($P(IBSWINFO,"^",2))
"RTN","IBTRKR3",26,0)
 ;
"RTN","IBTRKR3",27,0)
 ; -- check selected dates
"RTN","IBTRKR3",28,0)
 S IBTRKR=$G(^IBE(350.9,1,6))
"RTN","IBTRKR3",29,0)
 ; start date can't be before parameters
"RTN","IBTRKR3",30,0)
 I +IBTRKR,IBTSBDT<+IBTRKR S IBTSBDT=IBTRKR W !!,"Begin date is before Claims Tracking Start Date, changed to ",$$DAT1^IBOUTL(IBTSBDT)
"RTN","IBTRKR3",31,0)
 ; -- end date into future
"RTN","IBTRKR3",32,0)
 I IBTSEDT>$$FMADD^XLFDT(DT,-3) W !!,"I'll automatically change the end date to 3 days prior to the date queued to run."
"RTN","IBTRKR3",33,0)
 ;
"RTN","IBTRKR3",34,0)
 W !!!,"I'm going to automatically queue this off and send you a"
"RTN","IBTRKR3",35,0)
 W !,"mail message when complete.",!
"RTN","IBTRKR3",36,0)
 S ZTIO="",ZTRTN="EN1^IBTRKR3",ZTSAVE("IB*")="",ZTDESC="IB - Add Rx Refills to Claims Tracking"
"RTN","IBTRKR3",37,0)
 D ^%ZTLOAD I $G(ZTSK) K ZTSK W !,"Request Queued"
"RTN","IBTRKR3",38,0)
ENQ K ZTSK,ZTIO,ZTSAVE,ZTDESC,ZTRTN
"RTN","IBTRKR3",39,0)
 D HOME^%ZIS
"RTN","IBTRKR3",40,0)
 Q
"RTN","IBTRKR3",41,0)
 ;
"RTN","IBTRKR3",42,0)
EN1 ; -- add rx refills to claims tracking file
"RTN","IBTRKR3",43,0)
 N I,J,X,Y,IBTRKR,IBDT,IBRXN,IBFILL,DFN,IBDATA,IBCNT,IBCNT1,IBCNT2,LIST1
"RTN","IBTRKR3",44,0)
 N IBSWINFO S IBSWINFO=$$SWSTAT^IBBAPI() ;IB*2.0*312
"RTN","IBTRKR3",45,0)
 N IBICD,IBCOPAY
"RTN","IBTRKR3",46,0)
 ;
"RTN","IBTRKR3",47,0)
 ; -- check parameters
"RTN","IBTRKR3",48,0)
 S IBTRKR=$G(^IBE(350.9,1,6))
"RTN","IBTRKR3",49,0)
 G:'$P(IBTRKR,"^",4) EN1Q ; quit if rx tracking off
"RTN","IBTRKR3",50,0)
 I +IBTRKR,IBTSBDT<+IBTRKR S IBTSBDT=IBTRKR ; start date can't be before parameters
"RTN","IBTRKR3",51,0)
 ;
"RTN","IBTRKR3",52,0)
 ; -- users can queue into future, make sure dates not after date run
"RTN","IBTRKR3",53,0)
 I IBTSEDT>$$FMADD^XLFDT(DT,-3) S IBMESS="(Selected end date of "_$$DAT1^IBOUTL(IBTSEDT)_" automatically changed to "_$$DAT1^IBOUTL($$FMADD^XLFDT(DT,-3))_".)",IBTSEDT=$$FMADD^XLFDT(DT,-3)
"RTN","IBTRKR3",54,0)
 ;
"RTN","IBTRKR3",55,0)
 S IBRXTYP=$O(^IBE(356.6,"AC",4,0)) ; event type pointer for rx billing
"RTN","IBTRKR3",56,0)
 ;
"RTN","IBTRKR3",57,0)
 ; -- cnt= total count, cnt1=count added nsc, cnt2=count of pending
"RTN","IBTRKR3",58,0)
 S (IBCNT,IBCNT1,IBCNT2)=0
"RTN","IBTRKR3",59,0)
 S IBDT=IBTSBDT-.0001
"RTN","IBTRKR3",60,0)
 S LIST1="IBTRKAD"
"RTN","IBTRKR3",61,0)
 D REF^PSO52EX(IBDT,IBTSEDT,LIST1)
"RTN","IBTRKR3",62,0)
 S IBDT=0
"RTN","IBTRKR3",63,0)
 F  S IBDT=$O(^TMP($J,LIST1,"AD",IBDT)) Q:'IBDT!(IBDT>IBTSEDT)  D
"RTN","IBTRKR3",64,0)
 .S IBRXN=0
"RTN","IBTRKR3",65,0)
 .I +IBSWINFO,(IBDT+1)>$P(IBSWINFO,"^",2) Q
"RTN","IBTRKR3",66,0)
 .F  S IBRXN=$O(^TMP($J,LIST1,"AD",IBDT,IBRXN)) Q:'IBRXN  D
"RTN","IBTRKR3",67,0)
 ..S IBFILL=""
"RTN","IBTRKR3",68,0)
 ..F  S IBFILL=$O(^TMP($J,LIST1,"AD",IBDT,IBRXN,IBFILL)) Q:IBFILL=""  D RXCHK
"RTN","IBTRKR3",69,0)
 K ^TMP($J,LIST1)
"RTN","IBTRKR3",70,0)
 ;
"RTN","IBTRKR3",71,0)
 I $G(IBTALK) D BULL^IBTRKR31
"RTN","IBTRKR3",72,0)
EN1Q I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBTRKR3",73,0)
 Q
"RTN","IBTRKR3",74,0)
 ;
"RTN","IBTRKR3",75,0)
RXCHK ; -- check and add rx
"RTN","IBTRKR3",76,0)
 N IBND,LIST,NODE
"RTN","IBTRKR3",77,0)
 S IBCNT=IBCNT+1
"RTN","IBTRKR3",78,0)
 ;I IBFILL<1 G RXCHKQ ; original fill
"RTN","IBTRKR3",79,0)
 I IBDT>(DT+.24) G RXCHKQ ; future fill
"RTN","IBTRKR3",80,0)
 I '$D(ZTQUEUED),($G(IBTALK)) W "."
"RTN","IBTRKR3",81,0)
 ;
"RTN","IBTRKR3",82,0)
 S DFN=$$FILE^IBRXUTL(IBRXN,2)
"RTN","IBTRKR3",83,0)
 S IBRXDATA=$$RXZERO^IBRXUTL(DFN,IBRXN),IBRXSTAT=$$FILE^IBRXUTL(IBRXN,100,"I")
"RTN","IBTRKR3",84,0)
 ;I IBDT=$P($O(^DPT(DFN,"S",(IBDT-.00001))),".") G RXCHKQ ;scheduled appointment on same day as fill date
"RTN","IBTRKR3",85,0)
 ;I $$BABCSC^IBEFUNC(DFN,$P(IBDT,".",1)) G RXCHKQ ; is billable clinic stop in encounter file for data (allows telephone stops on same day, but not others) (P121 - RC, can now bill Rx if on same day as opt visit)
"RTN","IBTRKR3",86,0)
 ;
"RTN","IBTRKR3",87,0)
 ; -- not already in claims tracking
"RTN","IBTRKR3",88,0)
 I $O(^IBT(356,"ARXFL",IBRXN,IBFILL,"")) G RXCHKQ ; already in claims tracking
"RTN","IBTRKR3",89,0)
 ;
"RTN","IBTRKR3",90,0)
 ; -- see if tracking only insured and pt is insured
"RTN","IBTRKR3",91,0)
 I $P(IBTRKR,"^",4)=1,'$$INSURED^IBCNS1(DFN,IBDT) G RXCHKQ ; patient not insure
"RTN","IBTRKR3",92,0)
 ;
"RTN","IBTRKR3",93,0)
 ; -- check rx status (not deleted)
"RTN","IBTRKR3",94,0)
 I IBRXSTAT=13 G RXCHKQ
"RTN","IBTRKR3",95,0)
 ;
"RTN","IBTRKR3",96,0)
 ; -- Don't PROCESS IF there is already a PFSS ACCT REF# -- ;IB*2.0*312
"RTN","IBTRKR3",97,0)
 I 'IBFILL,+$$FILE^IBRXUTL(IBRXN,125) G RXCHKQ
"RTN","IBTRKR3",98,0)
 I +IBFILL,+$$SUBFILE^IBRXUTL(IBRXN,IBFILL,52,21) G RXCHKQ
"RTN","IBTRKR3",99,0)
 ;
"RTN","IBTRKR3",100,0)
 ; -- original fill not released or returned to stock
"RTN","IBTRKR3",101,0)
 I 'IBFILL,'$$FILE^IBRXUTL(IBRXN,31) G RXCHKQ
"RTN","IBTRKR3",102,0)
 I 'IBFILL,$$FILE^IBRXUTL(IBRXN,32.1) G RXCHKQ
"RTN","IBTRKR3",103,0)
 ;
"RTN","IBTRKR3",104,0)
 ; -- refill not released or returned to stock
"RTN","IBTRKR3",105,0)
 I +IBFILL,'$$SUBFILE^IBRXUTL(IBRXN,IBFILL,52,17) G RXCHKQ
"RTN","IBTRKR3",106,0)
 I +IBFILL,$$SUBFILE^IBRXUTL(IBRXN,IBFILL,52,14) G RXCHKQ
"RTN","IBTRKR3",107,0)
 ;
"RTN","IBTRKR3",108,0)
 ; -- check drug (not investigational, supply, over the counter drug, or nutritional supplement
"RTN","IBTRKR3",109,0)
 S IBDRUG=$P(IBRXDATA,"^",6)
"RTN","IBTRKR3",110,0)
 D ZERO^IBRXUTL(IBDRUG)
"RTN","IBTRKR3",111,0)
 S IBDEA=$G(^TMP($J,"IBDRUG",+IBDRUG,3))
"RTN","IBTRKR3",112,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBTRKR3",113,0)
 I IBDEA["I"!(IBDEA["S")!(IBDEA["9")!(IBDEA["N") G RXCHKQ ; investigational drug, supply, otc, or nutritional supplement
"RTN","IBTRKR3",114,0)
 ;
"RTN","IBTRKR3",115,0)
 ; -- see if insured for prescriptions
"RTN","IBTRKR3",116,0)
 I '$$PTCOV^IBCNSU3(DFN,IBDT,"PHARMACY",.IBANY) S IBRMARK=$S($G(IBANY):"NO PHARMACY COVERAGE",1:"NOT INSURED")
"RTN","IBTRKR3",117,0)
 ;
"RTN","IBTRKR3",118,0)
 ; -- check sc status and others
"RTN","IBTRKR3",119,0)
 ; -- new ICD node in PSO with CIDC, if it exists use this for determination
"RTN","IBTRKR3",120,0)
 S LIST="IBTRKRLST"
"RTN","IBTRKR3",121,0)
 S NODE="ICD"
"RTN","IBTRKR3",122,0)
 S IBICD=0,IBCOPAY=0
"RTN","IBTRKR3",123,0)
 D RX^PSO52API(DFN,LIST,IBRXN,,NODE,,)
"RTN","IBTRKR3",124,0)
 I +$G(^TMP($J,LIST,DFN,IBRXN,"ICD",0))>0 S IBICD=1 ;Setup ICD Flag
"RTN","IBTRKR3",125,0)
 I +$$IBND^IBRXUTL(DFN,IBRXN)>0 S IBCOPAY=1 ;Setup Copay Flag
"RTN","IBTRKR3",126,0)
 I $G(IBRMARK)="",IBICD D CL^SDCO21(DFN,IBDT,"",.IBARR) I $D(IBARR) D
"RTN","IBTRKR3",127,0)
 .S IBM=0
"RTN","IBTRKR3",128,0)
 .F  S IBM=$O(^TMP($J,LIST,DFN,IBRXN,"ICD",IBM)) Q:'IBM!($G(IBRMARK)'="")  D
"RTN","IBTRKR3",129,0)
 ..S IBZ=$$ICD^IBRXUTL1(DFN,IBRXN,IBM,LIST) F IBP=1:1:7 Q:$G(IBRMARK)'=""  I $D(IBARR(IBP)) D
"RTN","IBTRKR3",130,0)
 ... S IBRMARK=$S($P(IBZ,"^",IBP+1):$P($T(EXEMPT+IBP),";",3),$P(IBZ,"^",IBP+1)=0:"",1:"NEEDS SC DETERMINATION")
"RTN","IBTRKR3",131,0)
 ;
"RTN","IBTRKR3",132,0)
 ; -- no new ICD node in PSO, use old method of determining status
"RTN","IBTRKR3",133,0)
 I $G(IBRMARK)="",'IBICD D
"RTN","IBTRKR3",134,0)
 . D ELIG^VADPT
"RTN","IBTRKR3",135,0)
 . ;if the patient is covered by insurance for pharmacy ($G(IBRMARK)="")
"RTN","IBTRKR3",136,0)
 . ;AND if no copay in #350
"RTN","IBTRKR3",137,0)
 . ;then we need to determine the non billable reason and set IBRMARK
"RTN","IBTRKR3",138,0)
 . ;
"RTN","IBTRKR3",139,0)
 . ;IF VAEL(3) -- if this is a veteran with SC(service connection) status
"RTN","IBTRKR3",140,0)
 . I VAEL(3),'IBCOPAY D
"RTN","IBTRKR3",141,0)
 . . I $P(VAEL(3),"^",2)>49 S IBRMARK="NEEDS SC DETERMINATION"
"RTN","IBTRKR3",142,0)
 . . ;in case of POW and Unempl.vet we cannot decide if the 3rd party should be exempt
"RTN","IBTRKR3",143,0)
 . . N IBPOWUNV,IBAUTRET S IBAUTRET=$$AUTOINFO^DGMTCOU1(DFN),IBPOWUNV=$S($P(IBAUTRET,U,8):1,$P(IBAUTRET,U,9):1,1:0)
"RTN","IBTRKR3",144,0)
 . . I $P(VAEL(3),"^",2)<50 S IBRMARK=$S(IBPOWUNV:"NEEDS SC DETERMINATION",1:"SC TREATMENT")
"RTN","IBTRKR3",145,0)
 . . I $$RXST^IBARXEU(DFN,$P(IBRXDATA,U,13))>0 S IBRMARK="NEEDS SC DETERMINATION"
"RTN","IBTRKR3",146,0)
 . ;
"RTN","IBTRKR3",147,0)
 . ;IF +VAEL(3)=0 if the veteran doesn't have SC status, but
"RTN","IBTRKR3",148,0)
 . ;the veteran still may have CV status active
"RTN","IBTRKR3",149,0)
 . I $G(IBRMARK)="",+VAEL(3)=0,'IBCOPAY D
"RTN","IBTRKR3",150,0)
 . . I $$CVEDT^IBACV(DFN,IBDT) S IBRMARK="NEEDS SC DETERMINATION" ;SC-because IB staff usually is using this reason to search for cases that need to be reviewed. COMBAT VETERAN reason will be used after review if this was a case
"RTN","IBTRKR3",151,0)
 ;
"RTN","IBTRKR3",152,0)
 K ^TMP($J,LIST)
"RTN","IBTRKR3",153,0)
 ;
"RTN","IBTRKR3",154,0)
 ; ROI check
"RTN","IBTRKR3",155,0)
 N IBSCROI
"RTN","IBTRKR3",156,0)
 I $$SENS^IBNCPDR(IBDRUG) D
"RTN","IBTRKR3",157,0)
 . N IBINS,IBFLG,IBINSP
"RTN","IBTRKR3",158,0)
 . D ALL^IBCNS1(DFN,"IBINS",1,IBDT,1)
"RTN","IBTRKR3",159,0)
 . S IBINSP=$O(IBINS("S",1,99),-1) Q:IBINSP=""
"RTN","IBTRKR3",160,0)
 . S IBFLG=$$ROI^IBNCPDR4(DFN,$G(IBDRUG),+$G(IBINS(IBINSP,"0")),$G(IBDT))
"RTN","IBTRKR3",161,0)
 . I 'IBFLG,$G(IBRMARK)="" S IBRMARK="ROI NOT OBTAINED"      ; IB*2*550
"RTN","IBTRKR3",162,0)
 . I 'IBFLG S IBSCROI=3
"RTN","IBTRKR3",163,0)
 . I IBFLG S IBSCROI=2
"RTN","IBTRKR3",164,0)
 ;
"RTN","IBTRKR3",165,0)
 ; -- ok to add to tracking module
"RTN","IBTRKR3",166,0)
 D REFILL^IBTUTL1(DFN,IBRXTYP,IBDT,IBRXN,IBFILL,$G(IBRMARK),,$G(IBSCROI)) I '$D(ZTQUEUED),$G(IBTALK) W "+"
"RTN","IBTRKR3",167,0)
 ;
"RTN","IBTRKR3",168,0)
 I $G(IBRMARK)'="" S IBCNT2=IBCNT2+1
"RTN","IBTRKR3",169,0)
 I $G(IBRMARK)="" S IBCNT1=IBCNT1+1
"RTN","IBTRKR3",170,0)
 K IBANY,IBRMARK,VAEL,VA,IBDEA,IBDRUG,IBRXSTAT,IBRXDATA,DFN,X,Y
"RTN","IBTRKR3",171,0)
 K IBARR,IBM,IBZ,IBP
"RTN","IBTRKR3",172,0)
RXCHKQ Q
"RTN","IBTRKR3",173,0)
 ;
"RTN","IBTRKR3",174,0)
EXEMPT ; exemption reasons
"RTN","IBTRKR3",175,0)
 ;;AGENT ORANGE
"RTN","IBTRKR3",176,0)
 ;;IONIZING RADIATION
"RTN","IBTRKR3",177,0)
 ;;SC TREATMENT
"RTN","IBTRKR3",178,0)
 ;;SOUTHWEST ASIA
"RTN","IBTRKR3",179,0)
 ;;MILITARY SEXUAL TRAUMA
"RTN","IBTRKR3",180,0)
 ;;HEAD/NECK CANCER
"RTN","IBTRKR3",181,0)
 ;;COMBAT VETERAN
"RTN","IBTRKR3",182,0)
 ;;PROJECT 112/SHAD
"RTN","IBTRKR3",183,0)
 ;;
"RTN","IBY550PO")
0^^B5495891
"RTN","IBY550PO",1,0)
IBY550PO ; ALB/LMH - Post-Install to separate the Plan File and Payer File ; 09/15/15
"RTN","IBY550PO",2,0)
 ;;2.0;INTEGRATED BILLING;**550**;OCT 05, 2015;Build 25
"RTN","IBY550PO",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBY550PO",4,0)
 ;
"RTN","IBY550PO",5,0)
 ; MCCF ePharmacy Compliance Phase 3 - IB*2.0*550 patch post install
"RTN","IBY550PO",6,0)
 ;
"RTN","IBY550PO",7,0)
 Q
"RTN","IBY550PO",8,0)
 ;
"RTN","IBY550PO",9,0)
POST ;
"RTN","IBY550PO",10,0)
 ;
"RTN","IBY550PO",11,0)
 D BMES^XPDUTL("  Starting post-install of IB*2.0*550...")
"RTN","IBY550PO",12,0)
 D DELEPAY
"RTN","IBY550PO",13,0)
 D DELEPHRM
"RTN","IBY550PO",14,0)
 D DELENTRY
"RTN","IBY550PO",15,0)
 D EX
"RTN","IBY550PO",16,0)
 Q
"RTN","IBY550PO",17,0)
 ;
"RTN","IBY550PO",18,0)
EX ; Exit
"RTN","IBY550PO",19,0)
 D BMES^XPDUTL("Done with post-install of IB*2.0*550.")
"RTN","IBY550PO",20,0)
 Q
"RTN","IBY550PO",21,0)
DELEPAY ; Delete the PAYER NAME data & field from the PLAN file #366.03
"RTN","IBY550PO",22,0)
 D BMES^XPDUTL("Deleting the PAYER NAME field from the PLAN file #366.03")
"RTN","IBY550PO",23,0)
 N IEN,DIK,DA,DR,DIE
"RTN","IBY550PO",24,0)
 S DR=".03///@",DIE="^IBCNR(366.03,"
"RTN","IBY550PO",25,0)
 S IEN=0
"RTN","IBY550PO",26,0)
 F  S IEN=$O(^IBCNR(366.03,IEN)) Q:'IEN  D
"RTN","IBY550PO",27,0)
 . S DA=IEN
"RTN","IBY550PO",28,0)
 . D ^DIE
"RTN","IBY550PO",29,0)
 K DA
"RTN","IBY550PO",30,0)
 S DIK="^DD(366.03,",DA=.03,DA(1)=366.03 D ^DIK
"RTN","IBY550PO",31,0)
 Q
"RTN","IBY550PO",32,0)
 ;
"RTN","IBY550PO",33,0)
DELEPHRM ; Delete "E-PHARM" entries from the Payer File #365.12
"RTN","IBY550PO",34,0)
 D BMES^XPDUTL("Deleting the ""E-PHARM"" entries from the PAYER file #365.12")
"RTN","IBY550PO",35,0)
 N IBIEN,IBAPP,AIEN,APIEN,DIK,DA
"RTN","IBY550PO",36,0)
 S IBAPP="E-PHARM"
"RTN","IBY550PO",37,0)
 S AIEN=$O(^IBE(365.13,"B",IBAPP,"")) Q:'AIEN       ; AIEN is the 365.13 ien for E-PHARM
"RTN","IBY550PO",38,0)
 ;
"RTN","IBY550PO",39,0)
 S IBIEN=0 F  S IBIEN=$O(^IBE(365.12,IBIEN)) Q:'IBIEN  D
"RTN","IBY550PO",40,0)
 . S APIEN=0 F  S APIEN=$O(^IBE(365.12,IBIEN,1,APIEN)) Q:'APIEN  D
"RTN","IBY550PO",41,0)
 .. I $P($G(^IBE(365.12,IBIEN,1,APIEN,0)),U,1)'=AIEN Q             ; make sure this one is for E-PHARM
"RTN","IBY550PO",42,0)
 .. S DA(1)=IBIEN,DA=APIEN,DIK="^IBE(365.12,"_DA(1)_",1," D ^DIK   ; remove the E-PHARM payer application data
"RTN","IBY550PO",43,0)
 .. Q
"RTN","IBY550PO",44,0)
 . Q
"RTN","IBY550PO",45,0)
 Q
"RTN","IBY550PO",46,0)
 ;
"RTN","IBY550PO",47,0)
DELENTRY ; Delete the E-PHARM entry from the PAYER APPLICATION File #365.13
"RTN","IBY550PO",48,0)
 D BMES^XPDUTL("Deleting the ""E-PHARM"" entry from the PAYER APPLICATION file #365.13")
"RTN","IBY550PO",49,0)
 N DIK,DA,IBAPP,APIEN
"RTN","IBY550PO",50,0)
 S IBAPP="E-PHARM"
"RTN","IBY550PO",51,0)
 S APIEN=$O(^IBE(365.13,"B",IBAPP,""))
"RTN","IBY550PO",52,0)
 S DIK="^IBE(365.13,",DA=APIEN D ^DIK
"RTN","IBY550PO",53,0)
 Q
"UP",366.14,366.141,-1)
366.14^1
"UP",366.14,366.141,0)
366.141
"VER")
8.0^22.0
"^DD",366.14,366.141,7.06,0)
DRUG ECME BILLABLE^S^1:YES;0:NO;^7;6^Q
"^DD",366.14,366.141,7.06,3)
Enter 'YES' if the drug for this prescription was ECME billable, else enter 'NO'.
"^DD",366.14,366.141,7.06,21,0)
^^2^2^3160127^
"^DD",366.14,366.141,7.06,21,1,0)
This field records whether or not the drug was ECME billable at the time 
"^DD",366.14,366.141,7.06,21,2,0)
of Billing Determination for this prescription/fill.
"^DD",366.14,366.141,7.06,"DT")
3160127
"^DD",366.14,366.141,7.07,0)
DRUG ECME BILLABLE TRICARE^S^1:YES;0:NO;^7;7^Q
"^DD",366.14,366.141,7.07,3)
Enter 'YES' if the drug was ECME billable for TRICARE prescriptions, else enter 'NO'.
"^DD",366.14,366.141,7.07,21,0)
^^3^3^3150929^
"^DD",366.14,366.141,7.07,21,1,0)
This field records whether or not the drug was ECME billable for TRICARE 
"^DD",366.14,366.141,7.07,21,2,0)
prescriptions at the time of Billing Determination for this 
"^DD",366.14,366.141,7.07,21,3,0)
prescription/fill.
"^DD",366.14,366.141,7.07,"DT")
3160127
"^DD",366.14,366.141,7.08,0)
DRUG ECME BILLABLE CHAMPVA^S^1:YES;0:NO;^7;8^Q
"^DD",366.14,366.141,7.08,3)
Enter 'YES' if the drug was ECME billable for CHAMPVA prescriptions, else enter 'NO'.
"^DD",366.14,366.141,7.08,21,0)
^^3^3^3150929^
"^DD",366.14,366.141,7.08,21,1,0)
This field records whether or not the drug was ECME billable for CHAMPVA
"^DD",366.14,366.141,7.08,21,2,0)
prescriptions at the time of Billing Determination for this 
"^DD",366.14,366.141,7.08,21,3,0)
prescription/fill.
"^DD",366.14,366.141,7.08,"DT")
3160127
"^DD",366.14,366.141,7.09,0)
DRUG SENSITIVE DIAGNOSIS^S^1:YES;0:NO;^7;9^Q
"^DD",366.14,366.141,7.09,3)
Enter 'YES' if the drug for this prescription was a sensitive diagnosis drug, else enter 'NO'.
"^DD",366.14,366.141,7.09,21,0)
^^3^3^3150929^
"^DD",366.14,366.141,7.09,21,1,0)
This field records whether or not the drug was identified as a Sensitive 
"^DD",366.14,366.141,7.09,21,2,0)
Diagnosis Drug at the time of Billing Determination for this 
"^DD",366.14,366.141,7.09,21,3,0)
prescription/fill.
"^DD",366.14,366.141,7.09,"DT")
3160127
**INSTALL NAME**
PSX*2.0*79
"BLD",9502,0)
PSX*2.0*79^CMOP^0^3160421^y
"BLD",9502,1,0)
^^1^1^3150903^
"BLD",9502,1,1,0)
MCCF ePharmacy Compliance Phase 3
"BLD",9502,4,0)
^9.64PA^^
"BLD",9502,6.3)
25
"BLD",9502,"KRN",0)
^9.67PA^779.2^20
"BLD",9502,"KRN",.4,0)
.4
"BLD",9502,"KRN",.401,0)
.401
"BLD",9502,"KRN",.402,0)
.402
"BLD",9502,"KRN",.403,0)
.403
"BLD",9502,"KRN",.5,0)
.5
"BLD",9502,"KRN",.84,0)
.84
"BLD",9502,"KRN",3.6,0)
3.6
"BLD",9502,"KRN",3.8,0)
3.8
"BLD",9502,"KRN",9.2,0)
9.2
"BLD",9502,"KRN",9.8,0)
9.8
"BLD",9502,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",9502,"KRN",9.8,"NM",1,0)
PSXRPPL2^^0^B55367229
"BLD",9502,"KRN",9.8,"NM","B","PSXRPPL2",1)

"BLD",9502,"KRN",19,0)
19
"BLD",9502,"KRN",19.1,0)
19.1
"BLD",9502,"KRN",101,0)
101
"BLD",9502,"KRN",409.61,0)
409.61
"BLD",9502,"KRN",771,0)
771
"BLD",9502,"KRN",779.2,0)
779.2
"BLD",9502,"KRN",870,0)
870
"BLD",9502,"KRN",8989.51,0)
8989.51
"BLD",9502,"KRN",8989.52,0)
8989.52
"BLD",9502,"KRN",8994,0)
8994
"BLD",9502,"KRN","B",.4,.4)

"BLD",9502,"KRN","B",.401,.401)

"BLD",9502,"KRN","B",.402,.402)

"BLD",9502,"KRN","B",.403,.403)

"BLD",9502,"KRN","B",.5,.5)

"BLD",9502,"KRN","B",.84,.84)

"BLD",9502,"KRN","B",3.6,3.6)

"BLD",9502,"KRN","B",3.8,3.8)

"BLD",9502,"KRN","B",9.2,9.2)

"BLD",9502,"KRN","B",9.8,9.8)

"BLD",9502,"KRN","B",19,19)

"BLD",9502,"KRN","B",19.1,19.1)

"BLD",9502,"KRN","B",101,101)

"BLD",9502,"KRN","B",409.61,409.61)

"BLD",9502,"KRN","B",771,771)

"BLD",9502,"KRN","B",779.2,779.2)

"BLD",9502,"KRN","B",870,870)

"BLD",9502,"KRN","B",8989.51,8989.51)

"BLD",9502,"KRN","B",8989.52,8989.52)

"BLD",9502,"KRN","B",8994,8994)

"BLD",9502,"QUES",0)
^9.62^^
"BLD",9502,"REQB",0)
^9.611^1^1
"BLD",9502,"REQB",1,0)
PSX*2.0*74^2
"BLD",9502,"REQB","B","PSX*2.0*74",1)

"MBREQ")
1
"PKG",534,-1)
1^1
"PKG",534,0)
CMOP^PSX
"PKG",534,20,0)
^9.402P^^
"PKG",534,22,0)
^9.49I^1^1
"PKG",534,22,1,0)
2.0
"PKG",534,22,1,"PAH",1,0)
79^3160421
"PKG",534,22,1,"PAH",1,1,0)
^^1^1^3160421
"PKG",534,22,1,"PAH",1,1,1,0)
MCCF ePharmacy Compliance Phase 3
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","PSXRPPL2")
0^1^B55367229
"RTN","PSXRPPL2",1,0)
PSXRPPL2 ;BIR/WPB - Print From Suspense Utilities ;06/10/08
"RTN","PSXRPPL2",2,0)
 ;;2.0;CMOP;**65,69,73,74,79**;11 Apr 97;Build 25
"RTN","PSXRPPL2",3,0)
 ;Reference to ^PSRX( supported by DBIA #1977
"RTN","PSXRPPL2",4,0)
 ;Reference to ^PS(52.5, supported by DBIA #1978
"RTN","PSXRPPL2",5,0)
 ;Reference to ^PSSLOCK  supported by DBIA #2789
"RTN","PSXRPPL2",6,0)
 ;Reference to ^PSOBPSUT supported by DBIA #4701
"RTN","PSXRPPL2",7,0)
 ;Reference to ^PSOBPSU1 supported by DBIA #4702
"RTN","PSXRPPL2",8,0)
 ;Reference to ^PSOBPSU2 supported by DBIA #4970
"RTN","PSXRPPL2",9,0)
 ;Reference to ^PSOREJUT supported by DBIA #4706
"RTN","PSXRPPL2",10,0)
 ;Reference to ^PSOREJU3 supported by DBIA #5186
"RTN","PSXRPPL2",11,0)
 ;Reference to CHANGE^PSOSUCH1 suppored by DBIA #5427
"RTN","PSXRPPL2",12,0)
 ;Reference to PREVRX^PSOREJP2 supported by DBIA #5912
"RTN","PSXRPPL2",13,0)
 ;Reference to $$BILLABLE^IBNCPDP supported by DBIA #6243
"RTN","PSXRPPL2",14,0)
 ;
"RTN","PSXRPPL2",15,0)
CHKDFN(THRDT) ; use the patient 'C' index under RX multiple in file 550.2 to GET dfn to gather Patients' future RXs
"RTN","PSXRPPL2",16,0)
 ;Input: THRDT - THROUGH DATE to run CMOP transmission
"RTN","PSXRPPL2",17,0)
 ;
"RTN","PSXRPPL2",18,0)
 I '$D(^PSX(550.2,PSXBAT,15,"C")) Q
"RTN","PSXRPPL2",19,0)
 S (SBTECME)=0 K ^TMP("PSXEPHDFN",$J)
"RTN","PSXRPPL2",20,0)
 S PSXPTNM="" F  S PSXPTNM=$O(^PSX(550.2,PSXBAT,15,"C",PSXPTNM)) Q:PSXPTNM=""  D
"RTN","PSXRPPL2",21,0)
 . S XDFN=0 F  S XDFN=$O(^PSX(550.2,PSXBAT,"15","C",PSXPTNM,XDFN)) Q:(XDFN'>0)  D
"RTN","PSXRPPL2",22,0)
 . . S SDT=PRTDT F  S SDT=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT)),NDFN=0 Q:(SDT>PSXDTRG)!(SDT="")  D
"RTN","PSXRPPL2",23,0)
 . . . F  S NDFN=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,NDFN)),REC=0 Q:NDFN'>0  I NDFN=XDFN D
"RTN","PSXRPPL2",24,0)
 . . . . F  S REC=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,NDFN,REC)) Q:REC'>0  D
"RTN","PSXRPPL2",25,0)
 . . . . . S (PSOLRX,RX)=+$$GET1^DIQ(52.5,REC,.01,"I") I 'RX Q
"RTN","PSXRPPL2",26,0)
 . . . . . S RFL=$$GET1^DIQ(52.5,REC,9,"I") I RFL="" S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSXRPPL2",27,0)
 . . . . . I $$XMIT^PSXBPSUT(REC) D
"RTN","PSXRPPL2",28,0)
 . . . . . . I SDT>THRDT,'$D(^TMP("PSXEPHDFN",$J,XDFN)) Q
"RTN","PSXRPPL2",29,0)
 . . . . . . I $$PATCH^XPDUTL("PSO*7.0*148") D
"RTN","PSXRPPL2",30,0)
 . . . . . . . I $$RETRX^PSOBPSUT(RX,RFL),SDT>DT Q
"RTN","PSXRPPL2",31,0)
 . . . . . . . I $$DOUBLE^PSXRPPL1(RX,RFL) Q
"RTN","PSXRPPL2",32,0)
 . . . . . . . I $$FIND^PSOREJUT(RX,RFL,,"79,88",,1) Q
"RTN","PSXRPPL2",33,0)
 . . . . . . . I '$$RETRX^PSOBPSUT(RX,RFL),$$ECMESTAT(RX,RFL) Q
"RTN","PSXRPPL2",34,0)
 . . . . . . . I $$PATCH^XPDUTL("PSO*7.0*289"),'$$DUR(RX,RFL),'$$DSH(REC) Q
"RTN","PSXRPPL2",35,0)
 . . . . . . . D ECMESND^PSOBPSU1(RX,RFL,"","PC",,1,,,,.RESP)
"RTN","PSXRPPL2",36,0)
 . . . . . . . I $$PATCH^XPDUTL("PSO*7.0*287"),$$TRISTA^PSOREJU3(RX,RFL,.RESP,"PC") S ^TMP("PSXEPHNB",$J,RX,RFL)=$G(RESP)
"RTN","PSXRPPL2",37,0)
 . . . . . . . I $D(RESP),'RESP S SBTECME=SBTECME+1
"RTN","PSXRPPL2",38,0)
 . . . . . . . S ^TMP("PSXEPHDFN",$J,XDFN)=""
"RTN","PSXRPPL2",39,0)
 . . . . . D PSOUL^PSSLOCK(PSOLRX)
"RTN","PSXRPPL2",40,0)
 K ^TMP("PSXEPHDFN",$J)
"RTN","PSXRPPL2",41,0)
 I SBTECME>0 H 60+$S((SBTECME*15)>7200:7200,1:(SBTECME*15))
"RTN","PSXRPPL2",42,0)
 Q
"RTN","PSXRPPL2",43,0)
 ;
"RTN","PSXRPPL2",44,0)
EPHARM ; - ePharmacy checks for third party billing
"RTN","PSXRPPL2",45,0)
 I $$DOUBLE^PSXRPPL1(RXN,RFL) S EPHQT=1 Q
"RTN","PSXRPPL2",46,0)
 I $$RETRX^PSOBPSUT(RXN,RFL),SDT>DT S EPHQT=1 Q
"RTN","PSXRPPL2",47,0)
 I $$FIND^PSOREJUT(RXN,RFL,,"79,88",,1) S EPHQT=1 Q
"RTN","PSXRPPL2",48,0)
 I $$PATCH^XPDUTL("PSO*7.0*287"),$$TRISTA^PSOREJU3(RXN,RFL,.RESP,"PC") D EPH Q
"RTN","PSXRPPL2",49,0)
 I $$PATCH^XPDUTL("PSO*7.0*287"),$D(^TMP("PSXEPHNB",$J,RXN,RFL)) D EPH Q
"RTN","PSXRPPL2",50,0)
 I $$STATUS^PSOBPSUT(RXN,RFL)="IN PROGRESS" D EPH Q
"RTN","PSXRPPL2",51,0)
 I $$PATCH^XPDUTL("PSO*7.0*289"),'$$DSH(REC) S EPHQT=1 Q
"RTN","PSXRPPL2",52,0)
 I $$PATCH^XPDUTL("PSO*7.0*289"),'$$DUR(RXN,RFL) D EPH Q
"RTN","PSXRPPL2",53,0)
 Q
"RTN","PSXRPPL2",54,0)
 ;
"RTN","PSXRPPL2",55,0)
EPH ; - Store Rx not xmitted to CMOP in XTMP file for MailMan message.
"RTN","PSXRPPL2",56,0)
 S ^TMP("PSXEPHIN",$J,$$RXSITE^PSOBPSUT(RXN),RXN)=RFL,EPHQT=1
"RTN","PSXRPPL2",57,0)
 Q
"RTN","PSXRPPL2",58,0)
 ;
"RTN","PSXRPPL2",59,0)
 ;Description:
"RTN","PSXRPPL2",60,0)
 ;This function checks the Rx's ECME Status to determine if it's acceptable to resubmit
"RTN","PSXRPPL2",61,0)
 ;based on reject codes associated with a previous submission. If Rx was rejected with
"RTN","PSXRPPL2",62,0)
 ;host reject errors, and no other rejects exist, then it's OK to resubmit to ECME.
"RTN","PSXRPPL2",63,0)
 ;Input: RX = Prescription file #52 IEN
"RTN","PSXRPPL2",64,0)
 ; RFL = Refill number
"RTN","PSXRPPL2",65,0)
 ;Returns: 1 = OK to resubmit
"RTN","PSXRPPL2",66,0)
 ;0 = Don't resubmit
"RTN","PSXRPPL2",67,0)
ECMESTAT(RX,RFL) ;
"RTN","PSXRPPL2",68,0)
 I '$$PATCH^XPDUTL("PSO*7.0*148") Q 0
"RTN","PSXRPPL2",69,0)
 N STATUS,HERR,CHDAT
"RTN","PSXRPPL2",70,0)
 S STATUS=$$STATUS^PSOBPSUT(RX,RFL)
"RTN","PSXRPPL2",71,0)
 ; Never submitted before, OK to resubmit
"RTN","PSXRPPL2",72,0)
 I STATUS=""!(STATUS["UNSTRANDED") Q 1
"RTN","PSXRPPL2",73,0)
 ; If status other than E REJECTED, don't resubmit
"RTN","PSXRPPL2",74,0)
 I STATUS'="E REJECTED" Q 0
"RTN","PSXRPPL2",75,0)
 ; check for a previous host reject:
"RTN","PSXRPPL2",76,0)
 ;  1 - if host reject date expired allow to print; 0 - if not expired don't print
"RTN","PSXRPPL2",77,0)
 ;    2 - if not defined allow to continue with evaluation for new host reject
"RTN","PSXRPPL2",78,0)
 S CHDAT=$$CHHEDT(RX,RFL) Q:CHDAT=1 1 Q:CHDAT=0 0
"RTN","PSXRPPL2",79,0)
 ;*****************************************************************************************************
"RTN","PSXRPPL2",80,0)
 ;   NOTE: MAKE SURE THAT IGNORED REJECTS WILL PROCESS WHENEVER MODIFICATIONS ARE MADE TO HOST REJECT 
"RTN","PSXRPPL2",81,0)
 ;         Ignored rejects are handled by default when this subroutine Q 0 at the end.
"RTN","PSXRPPL2",82,0)
 ;*****************************************************************************************************
"RTN","PSXRPPL2",83,0)
  ; check host rejects
"RTN","PSXRPPL2",84,0)
 S HERR=$$HOSTREJ(RX,RFL,0)
"RTN","PSXRPPL2",85,0)
 I HERR&(CHDAT=2) D SHDTLOG(RX,RFL) Q 0  ;Host reject and no suspense hold date defined yet; define it and don't resubmit
"RTN","PSXRPPL2",86,0)
 I HERR&(CHDAT) Q 1  ;Host reject & suspense hold date has expired; resubmit
"RTN","PSXRPPL2",87,0)
 Q 0  ;NOTE - IF YOU CHANGE THIS Q 0, IGNORED REJECTS WILL RESUBMIT AND REJECT AGAIN WHICH IS VERY BAD.
"RTN","PSXRPPL2",88,0)
 ;
"RTN","PSXRPPL2",89,0)
 ;Description: 
"RTN","PSXRPPL2",90,0)
 ;This function determines whether the RX SUSPENSE has a DAYS SUPPLY HOLD
"RTN","PSXRPPL2",91,0)
 ;condition.
"RTN","PSXRPPL2",92,0)
 ;Input: REC = Pointer to Suspense file (#52.5)
"RTN","PSXRPPL2",93,0)
 ;Returns: 1 or 0
"RTN","PSXRPPL2",94,0)
 ;1 (one) if 3/4 of days supply has elapsed.
"RTN","PSXRPPL2",95,0)
 ;0 (zero) is returned if 3/4 of days supply has not elapsed. 
"RTN","PSXRPPL2",96,0)
 ;
"RTN","PSXRPPL2",97,0)
DSH(REC) ;ePharmacy API to check for 3/4 days supply hold
"RTN","PSXRPPL2",98,0)
 N PSINSUR,PSARR,SHDT,DSHOLD,DSHDT,PS0,COMM,DIE,DA,DR,RXIEN,RFL,DAYSSUP,LSTFIL,PTDFN,IBINS,DRG
"RTN","PSXRPPL2",99,0)
 N SFN,SDT,ELIG,PREVRX
"RTN","PSXRPPL2",100,0)
 S DSHOLD=1,PS0=^PS(52.5,REC,0),RXIEN=$P(PS0,U,1),RFL=$P(PS0,U,13)
"RTN","PSXRPPL2",101,0)
 S LSTFIL=$$LSTRFL^PSOBPSU1(RXIEN),PTDFN=$$GET1^DIQ(52,RXIEN,"2","I")
"RTN","PSXRPPL2",102,0)
 I RFL="" S RFL=LSTFIL
"RTN","PSXRPPL2",103,0)
 S IBSTAT=$$INSUR^IBBAPI(PTDFN,,"E",.IBINS,"1"),DRG=$$GET1^DIQ(52,RXIEN,"6","I")
"RTN","PSXRPPL2",104,0)
 S ELIG=$S(RFL:$P($G(^PSRX(+RXIEN,1,RFL,"EPH")),U,5),1:$P($G(^PSRX(+RXIEN,"EPH")),U,5))
"RTN","PSXRPPL2",105,0)
 ;
"RTN","PSXRPPL2",106,0)
 ; Don't hold Rx where the previous fill was not ebillable
"RTN","PSXRPPL2",107,0)
 I LSTFIL>0,$$STATUS^BPSOSRX(RXIEN,LSTFIL-1)="" Q DSHOLD
"RTN","PSXRPPL2",108,0)
 ; Don't hold when the Rx has SC/EI flagged
"RTN","PSXRPPL2",109,0)
 I $P($G(^PSRX(RXIEN,"ICD",1,0)),U,2,10)[1 Q DSHOLD
"RTN","PSXRPPL2",110,0)
 ; Don't hold rx if drug is non-billable
"RTN","PSXRPPL2",111,0)
 I '$$BILLABLE^IBNCPDP(DRG,ELIG) Q DSHOLD ; IA# 6243
"RTN","PSXRPPL2",112,0)
 ; Don't hold if no insurance
"RTN","PSXRPPL2",113,0)
 I 'IBSTAT!(IBSTAT=-1) Q DSHOLD
"RTN","PSXRPPL2",114,0)
 ;
"RTN","PSXRPPL2",115,0)
 S DSHDT=$$DSHDT(RXIEN,RFL) ; 3/4 of days supply date
"RTN","PSXRPPL2",116,0)
 S PREVRX=$P(DSHDT,U,2)
"RTN","PSXRPPL2",117,0)
 S DSHDT=$P(DSHDT,U)
"RTN","PSXRPPL2",118,0)
 I DSHDT>DT S DSHOLD=0 D
"RTN","PSXRPPL2",119,0)
 . I DSHDT'=$P(PS0,U,14) D  ; Update Suspense Hold Date and Activity Log
"RTN","PSXRPPL2",120,0)
 . . ; MRD;PSX*2.0*79 - If a previous Rx is used in the 3/4 days' supply
"RTN","PSXRPPL2",121,0)
 . . ; calculation, capture that Rx in the activity log.
"RTN","PSXRPPL2",122,0)
 . . S COMM="3/4 of Days Supply SUSPENSE HOLD until "_$$FMTE^XLFDT(DSHDT,"2D")
"RTN","PSXRPPL2",123,0)
 . . I PREVRX'="" S COMM=COMM_" (prior Rx "_PREVRX_")"
"RTN","PSXRPPL2",124,0)
 . . S COMM=COMM_"."
"RTN","PSXRPPL2",125,0)
 . . S DAYSSUP=$$LFDS(RXIEN)
"RTN","PSXRPPL2",126,0)
 . . D RXACT^PSOBPSU2(RXIEN,RFL,COMM,"S",+$G(DUZ)) ; Update Activity Log
"RTN","PSXRPPL2",127,0)
 . . S DR="10///^S X=DSHDT",DIE="^PS(52.5,",DA=REC D ^DIE ; File Suspense Hold Date
"RTN","PSXRPPL2",128,0)
 . . N DA,DIE,DR,PSOX,SFN,INDT,DEAD,RXREC,SUB,XOK,OLD
"RTN","PSXRPPL2",129,0)
 . . S DA=REC,DIE="^PS(52.5,",DR=".02///"_DSHDT D ^DIE
"RTN","PSXRPPL2",130,0)
 . . S SFN=REC,DEAD=0,INDT=DSHDT D CHANGE^PSOSUCH1(RXIEN,RFL)
"RTN","PSXRPPL2",131,0)
 . . Q
"RTN","PSXRPPL2",132,0)
 . Q
"RTN","PSXRPPL2",133,0)
 Q DSHOLD
"RTN","PSXRPPL2",134,0)
 ;
"RTN","PSXRPPL2",135,0)
DSHDT(RXIEN,RFL) ; ePharmacy function to determine the 3/4 of the days supply date
"RTN","PSXRPPL2",136,0)
 ; Input: RXIEN = Prescription file #52 ien
"RTN","PSXRPPL2",137,0)
 ;          RFL = fill#
"RTN","PSXRPPL2",138,0)
 ; Returns: DATE value of last date of service plus 3/4 of days supply
"RTN","PSXRPPL2",139,0)
 ;         PREVRX = Previous Rx if PREVRX^PSOREJP2 identified one that
"RTN","PSXRPPL2",140,0)
 ;                  should be used in the 3/4 days' supply calculation.
"RTN","PSXRPPL2",141,0)
 ;
"RTN","PSXRPPL2",142,0)
 N FILLDT,DAYSSUP,DSH34,PREVRX
"RTN","PSXRPPL2",143,0)
 I '$D(^PSRX(RXIEN,0)) Q -1
"RTN","PSXRPPL2",144,0)
 I $G(RFL)="" Q -1
"RTN","PSXRPPL2",145,0)
 ;
"RTN","PSXRPPL2",146,0)
 D PREVRX^PSOREJP2(RXIEN,RFL,,.FILLDT,.DAYSSUP,.PREVRX)     ; DBIA #5912
"RTN","PSXRPPL2",147,0)
 I FILLDT="" Q -1
"RTN","PSXRPPL2",148,0)
 ;
"RTN","PSXRPPL2",149,0)
 S DSH34=DAYSSUP*.75 ; 3/4 of Days Supply
"RTN","PSXRPPL2",150,0)
 S:DSH34["." DSH34=(DSH34+1)\1
"RTN","PSXRPPL2",151,0)
 ; Return last date of service plus 3/4 of Days Supply date
"RTN","PSXRPPL2",152,0)
 ; and the previous Rx used in the calculation, if any.
"RTN","PSXRPPL2",153,0)
 Q $$FMADD^XLFDT(FILLDT,DSH34)_U_PREVRX
"RTN","PSXRPPL2",154,0)
 ;
"RTN","PSXRPPL2",155,0)
 ; Description: This function returns the DAYS SUPPLY for the Latest Fill
"RTN","PSXRPPL2",156,0)
 ; for a Prescription
"RTN","PSXRPPL2",157,0)
 ; Input: RXIEN = Prescription file #52 IEN
"RTN","PSXRPPL2",158,0)
 ; Returns: DAYS SUPPLY for the latest fill
"RTN","PSXRPPL2",159,0)
 ;          -1 if RXIEN is not valid
"RTN","PSXRPPL2",160,0)
LFDS(RXIEN) ;
"RTN","PSXRPPL2",161,0)
 N RXFIL
"RTN","PSXRPPL2",162,0)
 Q:'$D(^PSRX(RXIEN)) -1
"RTN","PSXRPPL2",163,0)
 S RXFIL=$$LSTRFL^PSOBPSU1(RXIEN)
"RTN","PSXRPPL2",164,0)
 Q $S(RXFIL=0:$P(^PSRX(RXIEN,0),U,8),1:$P(^PSRX(RXIEN,1,RXFIL,0),U,10))
"RTN","PSXRPPL2",165,0)
 ;
"RTN","PSXRPPL2",166,0)
 ;
"RTN","PSXRPPL2",167,0)
 ;Description: ePharmacy API to check for host errors.
"RTN","PSXRPPL2",168,0)
 ;Input: RX = Prescription file #52 IEN
"RTN","PSXRPPL2",169,0)
 ; RFL = Refill number
"RTN","PSXRPPL2",170,0)
 ;Returns: A value of 0 (zero) will be returned when reject codes M6, M8,
"RTN","PSXRPPL2",171,0)
 ;NN, and 99 are present OR if on susp hold which means the prescription should not 
"RTN","PSXRPPL2",172,0)
 ;be sent to CMOP. Otherwise, a value of 1(one) will be returned.
"RTN","PSXRPPL2",173,0)
DUR(RX,RFL) ;
"RTN","PSXRPPL2",174,0)
 N REJ,IDX,TXT,CODE,SHCODE,SHDT,CHDAT1
"RTN","PSXRPPL2",175,0)
 S IDX=""
"RTN","PSXRPPL2",176,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSXRPPL2",177,0)
 ; check for a previous host reject:
"RTN","PSXRPPL2",178,0)
 ;  1 - if host reject date expired allow to print; 0 - if not expired don't print
"RTN","PSXRPPL2",179,0)
 ;    2 - if not defined allow to continue with evaluation for new host reject
"RTN","PSXRPPL2",180,0)
 S CHDAT1=$$CHHEDT(RX,RFL) Q:CHDAT1=1 1 Q:CHDAT1=0 0  ;Otherwise continue on to check for a new host reject
"RTN","PSXRPPL2",181,0)
 ; If a host reject exists and no previous Susp Hold Date or log entry,
"RTN","PSXRPPL2",182,0)
 ;    create the log entry and hold rx/fill.
"RTN","PSXRPPL2",183,0)
 S HERR=$$HOSTREJ(RX,RFL,1)
"RTN","PSXRPPL2",184,0)
 I HERR,SHDT="" D SHDTLOG(RX,RFL) Q 0
"RTN","PSXRPPL2",185,0)
 Q:HERR 0
"RTN","PSXRPPL2",186,0)
 Q 1
"RTN","PSXRPPL2",187,0)
 ;
"RTN","PSXRPPL2",188,0)
CHHEDT(RX,RFL) ;
"RTN","PSXRPPL2",189,0)
 ; RX = Prescription File IEN
"RTN","PSXRPPL2",190,0)
 ; RFL = Refill
"RTN","PSXRPPL2",191,0)
 ;Returns: 
"RTN","PSXRPPL2",192,0)
 ; 0 = host reject date not expired, 1 - host reject has expired, 2 - host reject not defined 
"RTN","PSXRPPL2",193,0)
 ;
"RTN","PSXRPPL2",194,0)
 S SHDT=$$SHDT(RX,RFL) ; Get suspense hold date for rx/refill
"RTN","PSXRPPL2",195,0)
 I SHDT'="" Q:DT'<SHDT 1  Q 0
"RTN","PSXRPPL2",196,0)
 Q 2
"RTN","PSXRPPL2",197,0)
 ;
"RTN","PSXRPPL2",198,0)
 ;Description: ePharmacy
"RTN","PSXRPPL2",199,0)
 ;This subroutine checks an RX/FILL for Host Reject Errors returned
"RTN","PSXRPPL2",200,0)
 ;from previous ECME submissions. The host reject errors checked are M6, M8, NN, and 99.
"RTN","PSXRPPL2",201,0)
 ;Note that host reject errors do not pass to the pharmacy reject worklist so it's necessary
"RTN","PSXRPPL2",202,0)
 ;to check ECME for these type errors.
"RTN","PSXRPPL2",203,0)
 ;Input: 
"RTN","PSXRPPL2",204,0)
 ; RX = Prescription File IEN
"RTN","PSXRPPL2",205,0)
 ; RFL = Refill
"RTN","PSXRPPL2",206,0)
 ; ONE = Either 1 or 0 - Defaults to 1
"RTN","PSXRPPL2",207,0)
 ; If 1, At least ONE reject code associated with the RX/FILL must 
"RTN","PSXRPPL2",208,0)
 ;   match either M6, M8, NN, or 99.
"RTN","PSXRPPL2",209,0)
 ; If 0, ALL reject codes must match either M6, M8, NN, or 99
"RTN","PSXRPPL2",210,0)
 ;Return: 
"RTN","PSXRPPL2",211,0)
 ; RETV = 1 OR 0
"RTN","PSXRPPL2",212,0)
 ; 1 = host reject exists based on ONE parameter
"RTN","PSXRPPL2",213,0)
 ; 0 = no host rejects exists based on ONE parameter
"RTN","PSXRPPL2",214,0)
HOSTREJ(RX,RFL,ONE) ;
"RTN","PSXRPPL2",215,0)
 N REJ,IDX,TXT,CODE,HRCODE,HRQUIT,RETV
"RTN","PSXRPPL2",216,0)
 S IDX="",(RETV,HRQUIT)=0
"RTN","PSXRPPL2",217,0)
 I ONE="" S ONE=1
"RTN","PSXRPPL2",218,0)
 D DUR1^BPSNCPD3(RX,RFL,.REJ) ; Get reject list from last submission
"RTN","PSXRPPL2",219,0)
 F  S IDX=$O(REJ(IDX)) Q:IDX=""  D  Q:HRQUIT
"RTN","PSXRPPL2",220,0)
 . S TXT=$G(REJ(IDX,"REJ CODE LST"))
"RTN","PSXRPPL2",221,0)
 . F I=1:1:$L(TXT,",") S CODE=$P(TXT,",",I) D  Q:HRQUIT
"RTN","PSXRPPL2",222,0)
 . . F HRCODE="M6","M8","NN",99 D  Q:HRQUIT
"RTN","PSXRPPL2",223,0)
 . . . I CODE=HRCODE S RETV=1 I ONE S HRQUIT=1 Q
"RTN","PSXRPPL2",224,0)
 . . . I CODE'=HRCODE,RETV=1 S RETV=0,HRQUIT=1 Q
"RTN","PSXRPPL2",225,0)
 Q RETV
"RTN","PSXRPPL2",226,0)
 ;
"RTN","PSXRPPL2",227,0)
 ;Description: This subroutine sets the EPHARMACY SUSPENSE HOLD DATE field
"RTN","PSXRPPL2",228,0)
 ;for the rx or refill to tomorrow and adds an entry to the SUSPENSE Activity Log.
"RTN","PSXRPPL2",229,0)
 ;Input: RX = Prescription File IEN
"RTN","PSXRPPL2",230,0)
 ; RFL = Refill
"RTN","PSXRPPL2",231,0)
SHDTLOG(RX,RFL) ;
"RTN","PSXRPPL2",232,0)
 N DA,DIE,DR,COMM,SHDT
"RTN","PSXRPPL2",233,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSXRPPL2",234,0)
 S SHDT=$$FMADD^XLFDT(DT,1)
"RTN","PSXRPPL2",235,0)
 S COMM="SUSPENSE HOLD until "_$$FMTE^XLFDT(SHDT,"2D")_" due to host reject error."
"RTN","PSXRPPL2",236,0)
 I RFL=0 S DA=RX,DIE="^PSRX(",DR="86///"_SHDT D ^DIE
"RTN","PSXRPPL2",237,0)
 E  S DA=RFL,DA(1)=RX,DIE="^PSRX("_DA(1)_",1,",DR="86///"_SHDT D ^DIE
"RTN","PSXRPPL2",238,0)
 D RXACT^PSOBPSU2(RX,RFL,COMM,"S",+$G(DUZ)) ; Create Activity Log entry
"RTN","PSXRPPL2",239,0)
 Q
"RTN","PSXRPPL2",240,0)
 ;
"RTN","PSXRPPL2",241,0)
 ;Description: This function returns the EPHARMACY SUSPENSE HOLD DATE field
"RTN","PSXRPPL2",242,0)
 ;for the rx or refill
"RTN","PSXRPPL2",243,0)
 ;Input: RX = Prescription File IEN
"RTN","PSXRPPL2",244,0)
 ; RFL = Refill
"RTN","PSXRPPL2",245,0)
SHDT(RX,RFL) ;
"RTN","PSXRPPL2",246,0)
 N FILE,IENS
"RTN","PSXRPPL2",247,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSXRPPL2",248,0)
 S FILE=$S(RFL=0:52,1:52.1),IENS=$S(RFL=0:RX_",",1:RFL_","_RX_",")
"RTN","PSXRPPL2",249,0)
 Q $$GET1^DIQ(FILE,IENS,86,"I")
"RTN","PSXRPPL2",250,0)
 ;
"VER")
8.0^22.0
**INSTALL NAME**
PSS*1.0*192
"BLD",9503,0)
PSS*1.0*192^PHARMACY DATA MANAGEMENT^0^3160421^y
"BLD",9503,1,0)
^^1^1^3150410^
"BLD",9503,1,1,0)
MCCF ePharmacy Compliance Phase 3
"BLD",9503,4,0)
^9.64PA^50^1
"BLD",9503,4,50,0)
50
"BLD",9503,4,50,2,0)
^9.641^50^1
"BLD",9503,4,50,2,50,0)
DRUG  (File-top level)
"BLD",9503,4,50,2,50,1,0)
^9.6411^87^4
"BLD",9503,4,50,2,50,1,84,0)
EPHARMACY BILLABLE
"BLD",9503,4,50,2,50,1,85,0)
EPHARMACY BILLABLE (TRICARE)
"BLD",9503,4,50,2,50,1,86,0)
EPHARMACY BILLABLE (CHAMPVA)
"BLD",9503,4,50,2,50,1,87,0)
SENSITIVE DIAGNOSIS
"BLD",9503,4,50,222)
y^n^p^^^^n^^n
"BLD",9503,4,50,224)

"BLD",9503,4,"APDD",50,50)

"BLD",9503,4,"APDD",50,50,84)

"BLD",9503,4,"APDD",50,50,85)

"BLD",9503,4,"APDD",50,50,86)

"BLD",9503,4,"APDD",50,50,87)

"BLD",9503,4,"B",50,50)

"BLD",9503,6.3)
25
"BLD",9503,"ABPKG")
n
"BLD",9503,"INID")
^y
"BLD",9503,"INIT")
PSS192PO
"BLD",9503,"KRN",0)
^9.67PA^779.2^20
"BLD",9503,"KRN",.4,0)
.4
"BLD",9503,"KRN",.401,0)
.401
"BLD",9503,"KRN",.402,0)
.402
"BLD",9503,"KRN",.402,"NM",0)
^9.68A^1^1
"BLD",9503,"KRN",.402,"NM",1,0)
PSSCOMMON    FILE #50^50^0
"BLD",9503,"KRN",.402,"NM","B","PSSCOMMON    FILE #50",1)

"BLD",9503,"KRN",.403,0)
.403
"BLD",9503,"KRN",.5,0)
.5
"BLD",9503,"KRN",.84,0)
.84
"BLD",9503,"KRN",3.6,0)
3.6
"BLD",9503,"KRN",3.8,0)
3.8
"BLD",9503,"KRN",9.2,0)
9.2
"BLD",9503,"KRN",9.8,0)
9.8
"BLD",9503,"KRN",9.8,"NM",0)
^9.68A^4^3
"BLD",9503,"KRN",9.8,"NM",2,0)
PSSDDUT2^^0^B173773291
"BLD",9503,"KRN",9.8,"NM",3,0)
PSSLOOK^^0^B89759845
"BLD",9503,"KRN",9.8,"NM",4,0)
PSS50^^0^B25607113
"BLD",9503,"KRN",9.8,"NM","B","PSS50",4)

"BLD",9503,"KRN",9.8,"NM","B","PSSDDUT2",2)

"BLD",9503,"KRN",9.8,"NM","B","PSSLOOK",3)

"BLD",9503,"KRN",19,0)
19
"BLD",9503,"KRN",19,"NM",0)
^9.68A^^0
"BLD",9503,"KRN",19.1,0)
19.1
"BLD",9503,"KRN",101,0)
101
"BLD",9503,"KRN",409.61,0)
409.61
"BLD",9503,"KRN",771,0)
771
"BLD",9503,"KRN",779.2,0)
779.2
"BLD",9503,"KRN",870,0)
870
"BLD",9503,"KRN",8989.51,0)
8989.51
"BLD",9503,"KRN",8989.52,0)
8989.52
"BLD",9503,"KRN",8994,0)
8994
"BLD",9503,"KRN","B",.4,.4)

"BLD",9503,"KRN","B",.401,.401)

"BLD",9503,"KRN","B",.402,.402)

"BLD",9503,"KRN","B",.403,.403)

"BLD",9503,"KRN","B",.5,.5)

"BLD",9503,"KRN","B",.84,.84)

"BLD",9503,"KRN","B",3.6,3.6)

"BLD",9503,"KRN","B",3.8,3.8)

"BLD",9503,"KRN","B",9.2,9.2)

"BLD",9503,"KRN","B",9.8,9.8)

"BLD",9503,"KRN","B",19,19)

"BLD",9503,"KRN","B",19.1,19.1)

"BLD",9503,"KRN","B",101,101)

"BLD",9503,"KRN","B",409.61,409.61)

"BLD",9503,"KRN","B",771,771)

"BLD",9503,"KRN","B",779.2,779.2)

"BLD",9503,"KRN","B",870,870)

"BLD",9503,"KRN","B",8989.51,8989.51)

"BLD",9503,"KRN","B",8989.52,8989.52)

"BLD",9503,"KRN","B",8994,8994)

"BLD",9503,"QUES",0)
^9.62^^
"BLD",9503,"REQB",0)
^9.611^2^2
"BLD",9503,"REQB",1,0)
PSS*1.0*104^2
"BLD",9503,"REQB",2,0)
PSS*1.0*189^2
"BLD",9503,"REQB","B","PSS*1.0*104",1)

"BLD",9503,"REQB","B","PSS*1.0*189",2)

"FIA",50)
DRUG
"FIA",50,0)
^PSDRUG(
"FIA",50,0,0)
50I
"FIA",50,0,1)
y^n^p^^^^n^^n
"FIA",50,0,10)

"FIA",50,0,11)

"FIA",50,0,"RLRO")

"FIA",50,0,"VR")
1.0^PSS
"FIA",50,50)
1
"FIA",50,50,84)

"FIA",50,50,85)

"FIA",50,50,86)

"FIA",50,50,87)

"INIT")
PSS192PO
"KRN",.402,2196,-1)
0^1
"KRN",.402,2196,0)
PSSCOMMON^3160407.2237^@^50^^@^3160324
"KRN",.402,2196,"DIAB",1,1,50.037,0)
ALL
"KRN",.402,2196,"DIAB",1,1,50.065,0)
ALL
"KRN",.402,2196,"DIAB",6,0,50,0)
84;"ePharmacy Billable"
"KRN",.402,2196,"DIAB",7,0,50,0)
85;"  ePharmacy Billable (TRICARE)"
"KRN",.402,2196,"DIAB",8,0,50,0)
86;"  ePharmacy Billable (CHAMPVA)"
"KRN",.402,2196,"DIAB",9,0,50,0)
87;"Sensitive Diagnosis Drug"
"KRN",.402,2196,"DR",1,50)
.01;2;D PKIND^PSSDDUT2;3;W !;84ePharmacy Billable~;85  ePharmacy Billable (TRICARE)~;86  ePharmacy Billable (CHAMPVA)~;87Sensitive Diagnosis Drug~;81;D PKIND^PSSDDUT2;
"KRN",.402,2196,"DR",1,50,1)
W !!,"NATIONAL FORMULARY INDICATOR: " W:$P($G(^PSDRUG(DA,"ND")),"^",11)=1 "YES" W:$P($G(^PSDRUG(DA,"ND")),"^",11)="" "Not Matched To NDF" W:$P($G(^PSDRUG(DA,"ND")),"^",11)=0 "NO";51;52;37;65;9;101;102;6;31;100;
"KRN",.402,2196,"DR",1,50,2)
N ND S ND=$G(^PSDRUG(DA,"ND")) I +ND,+$P(ND,"^",3),+$P($G(^PSNDF(50.68,+$P(ND,"^",3),"PFS")),"^") S Y="@4";W !!,"If you are planning to match to a NDF entry later or have no plan of using";
"KRN",.402,2196,"DR",1,50,3)
W !,"the external billing function, you may skip the Service Code entry.";400;@4;S PSONEWW=$S($P($G(^PS(59.7,1,10)),"^",9)="N":1,1:0) W !!,"WARNING LABEL SOURCE is "_$S(PSONEWW:"'NEW'.",1:"not 'NEW'.");
"KRN",.402,2196,"DR",1,50,4)
I PSONEWW W !,"The following WARNING LABEL may continue to be used for a limited time for some external interfaces.";I 'PSONEWW W !,"WARNING LABEL will be used until the WARNING LABEL SOURCE is set to 'NEW'.";8;@5;
"KRN",.402,2196,"DR",1,50,5)
D WARN^PSSWRNB S:$G(WARNEDIT) Y="@10" I '$G(WARNEDIT) S Y="@15";@10;8.1;S Y="@5";@15;D GENDER2^PSSWRNA I GENDER="" S Y="@20";8.2;@20;12;13;14.5;15;D NCINIT^PSSDDUT2 S Y="@24";@24;82;D NCPDPDU^PSSDDUT2 S PSSNDU=X S Y="@25";@25;83;
"KRN",.402,2196,"DR",1,50,6)
66;
"KRN",.402,2196,"DR",2,50.037)
.01
"KRN",.402,2196,"DR",2,50.065)
.01
"KRN",.402,2196,"DR",2,50.1)
.01;1;2;
"MBREQ")
1
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"PKG",488,-1)
1^1
"PKG",488,0)
PHARMACY DATA MANAGEMENT^PSS^Maintenance of Pharmacy files.
"PKG",488,20,0)
^9.402P^^
"PKG",488,22,0)
^9.49I^1^1
"PKG",488,22,1,0)
1.0^2970930^3000316^66481
"PKG",488,22,1,"PAH",1,0)
192^3160421
"PKG",488,22,1,"PAH",1,1,0)
^^1^1^3160421
"PKG",488,22,1,"PAH",1,1,1,0)
MCCF ePharmacy Compliance Phase 3
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
4
"RTN","PSS192PO")
0^^B100977929
"RTN","PSS192PO",1,0)
PSS192PO ; ALB/ESG - ePharmacy Compliance Phase 3 PSS patch post install ;10/9/2015
"RTN","PSS192PO",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**192**;9/30/97;Build 25
"RTN","PSS192PO",3,0)
 ;
"RTN","PSS192PO",4,0)
 D BMES^XPDUTL("Starting post-install for PSS*1*192 ... ")
"RTN","PSS192PO",5,0)
 D DRUGS
"RTN","PSS192PO",6,0)
 D MES^XPDUTL("Finished with post-install for PSS*1*192.")
"RTN","PSS192PO",7,0)
 Q
"RTN","PSS192PO",8,0)
 ;
"RTN","PSS192PO",9,0)
DRUGS ; loop through DRUG file and make changes
"RTN","PSS192PO",10,0)
 ;
"RTN","PSS192PO",11,0)
 ; Examine all drugs and build a scratch global:
"RTN","PSS192PO",12,0)
 ;   ^TMP(RTN,$J,1,DRUGNAME,DRUGIEN) = OLD DEA ^ NEW DEA ^ CHARACTERS REMOVED
"RTN","PSS192PO",13,0)
 ;   ^TMP(RTN,$J,2,DRUGNAME,DRUGIEN) = ""    <---  For drugs with BLANK DEA fields
"RTN","PSS192PO",14,0)
 ;   ^TMP(RTN,$J,3,DRUGIEN)=""               <---  For Billable Drugs
"RTN","PSS192PO",15,0)
 ;   ^TMP(RTN,$J,4,DRUGIEN)=""               <---  For Non-Billable Drugs
"RTN","PSS192PO",16,0)
 ;   ^TMP(RTN,$J,5,DRUGIEN)=""               <---  For Sensitive Diagnosis Drugs
"RTN","PSS192PO",17,0)
 ;
"RTN","PSS192PO",18,0)
 D MES^XPDUTL("   Examining all Drugs in the Drug file (#50) ... ")
"RTN","PSS192PO",19,0)
 ;
"RTN","PSS192PO",20,0)
 N RTN,DRGIEN,DRUGNM,OLDDEA,NEWDEA,STOP,G,EPHBL
"RTN","PSS192PO",21,0)
 S RTN="PSS192PO"
"RTN","PSS192PO",22,0)
 K ^TMP(RTN,$J)
"RTN","PSS192PO",23,0)
 ;
"RTN","PSS192PO",24,0)
 ; check the drug file data to see if this patch post-install has already been run
"RTN","PSS192PO",25,0)
 S STOP=0
"RTN","PSS192PO",26,0)
 S DRGIEN=0 F G=1:1:100 S DRGIEN=$O(^PSDRUG(DRGIEN)) Q:'DRGIEN  D  Q:STOP
"RTN","PSS192PO",27,0)
 . S EPHBL=$P($G(^PSDRUG(DRGIEN,"EPH")),U,4)
"RTN","PSS192PO",28,0)
 . I EPHBL'="" S STOP=1 Q      ; already been run, get out
"RTN","PSS192PO",29,0)
 . Q
"RTN","PSS192PO",30,0)
 I STOP D MES^XPDUTL("      Patch post-install has already been run. No Changes Made.") G DRGX
"RTN","PSS192PO",31,0)
 ;
"RTN","PSS192PO",32,0)
 S DRGIEN=0 F  S DRGIEN=$O(^PSDRUG(DRGIEN)) Q:'DRGIEN  D
"RTN","PSS192PO",33,0)
 . S DRUGNM=$P($G(^PSDRUG(DRGIEN,0)),U,1) S:DRUGNM="" DRUGNM="~missing drug name"
"RTN","PSS192PO",34,0)
 . S OLDDEA=$$TRIM^XLFSTR($P($G(^PSDRUG(DRGIEN,0)),U,3))
"RTN","PSS192PO",35,0)
 . ;
"RTN","PSS192PO",36,0)
 . ; check for missing DEA, SPECIAL HDLG field
"RTN","PSS192PO",37,0)
 . I OLDDEA="" D  Q
"RTN","PSS192PO",38,0)
 .. S ^TMP(RTN,$J,2,DRUGNM,DRGIEN)=""  ; save in scratch for later display
"RTN","PSS192PO",39,0)
 .. S ^TMP(RTN,$J,4,DRGIEN)=""         ; save drug in non-billable list
"RTN","PSS192PO",40,0)
 .. Q
"RTN","PSS192PO",41,0)
 . ;
"RTN","PSS192PO",42,0)
 . ; Do this block of code for billable/non-billable determination for each drug
"RTN","PSS192PO",43,0)
 . D
"RTN","PSS192PO",44,0)
 .. ; Contains M or 0:  Non-Billable
"RTN","PSS192PO",45,0)
 .. I OLDDEA["M"!(OLDDEA["0") S ^TMP(RTN,$J,4,DRGIEN)="" Q
"RTN","PSS192PO",46,0)
 .. ;
"RTN","PSS192PO",47,0)
 .. ; Contains any of these and does not contain "E":  Non-Billable
"RTN","PSS192PO",48,0)
 .. I (OLDDEA["I"!(OLDDEA["S")!(OLDDEA["9"))!(OLDDEA["N"),OLDDEA'["E" S ^TMP(RTN,$J,4,DRGIEN)="" Q
"RTN","PSS192PO",49,0)
 .. ;
"RTN","PSS192PO",50,0)
 .. ; otherwise, drug is billable
"RTN","PSS192PO",51,0)
 .. S ^TMP(RTN,$J,3,DRGIEN)=""
"RTN","PSS192PO",52,0)
 .. Q
"RTN","PSS192PO",53,0)
 . ;
"RTN","PSS192PO",54,0)
 . ; now work on removing the "E" and the "U" characters
"RTN","PSS192PO",55,0)
 . I OLDDEA["E",OLDDEA["U" D DEA("EU")     ; DEA indicates both billable and sensitive dx
"RTN","PSS192PO",56,0)
 . I OLDDEA["E",OLDDEA'["U" D DEA("E")     ; DEA indicates billable only
"RTN","PSS192PO",57,0)
 . I OLDDEA'["E",OLDDEA["U" D DEA("U")     ; DEA indicates sensitive dx only
"RTN","PSS192PO",58,0)
 . Q
"RTN","PSS192PO",59,0)
 ;
"RTN","PSS192PO",60,0)
 ; Now loop through the Scratch global areas and make changes to the database
"RTN","PSS192PO",61,0)
 D MES^XPDUTL("   Updating the values of the DEA, SPECIAL HDLG field ... ")
"RTN","PSS192PO",62,0)
 S DRUGNM="" F  S DRUGNM=$O(^TMP(RTN,$J,1,DRUGNM)) Q:DRUGNM=""  S DRGIEN=0 F  S DRGIEN=$O(^TMP(RTN,$J,1,DRUGNM,DRGIEN)) Q:'DRGIEN  D
"RTN","PSS192PO",63,0)
 . N DIE,DA,DR
"RTN","PSS192PO",64,0)
 . S NEWDEA=$P($G(^TMP(RTN,$J,1,DRUGNM,DRGIEN)),U,2) S:NEWDEA="" NEWDEA="@"
"RTN","PSS192PO",65,0)
 . S DIE=50,DA=DRGIEN,DR="3////"_NEWDEA D ^DIE
"RTN","PSS192PO",66,0)
 . Q
"RTN","PSS192PO",67,0)
 ;
"RTN","PSS192PO",68,0)
 D MES^XPDUTL("   Updating the values of the ePharmacy Billable field ... ")
"RTN","PSS192PO",69,0)
 ; Billable area
"RTN","PSS192PO",70,0)
 S DRGIEN=0 F  S DRGIEN=$O(^TMP(RTN,$J,3,DRGIEN)) Q:'DRGIEN  D
"RTN","PSS192PO",71,0)
 . N DIE,DA,DR
"RTN","PSS192PO",72,0)
 . S DIE=50,DA=DRGIEN,DR="84////1" D ^DIE     ; billable
"RTN","PSS192PO",73,0)
 ;
"RTN","PSS192PO",74,0)
 ; Non-Billable area
"RTN","PSS192PO",75,0)
 S DRGIEN=0 F  S DRGIEN=$O(^TMP(RTN,$J,4,DRGIEN)) Q:'DRGIEN  D
"RTN","PSS192PO",76,0)
 . N DIE,DA,DR
"RTN","PSS192PO",77,0)
 . S DIE=50,DA=DRGIEN,DR="84////0" D ^DIE     ; non-billable
"RTN","PSS192PO",78,0)
 . Q
"RTN","PSS192PO",79,0)
 ;
"RTN","PSS192PO",80,0)
 D MES^XPDUTL("   Updating the values of the Sensitive Diagnosis Drug field ... ")
"RTN","PSS192PO",81,0)
 S DRGIEN=0 F  S DRGIEN=$O(^TMP(RTN,$J,5,DRGIEN)) Q:'DRGIEN  D
"RTN","PSS192PO",82,0)
 . N DIE,DA,DR
"RTN","PSS192PO",83,0)
 . S DIE=50,DA=DRGIEN,DR="87////1" D ^DIE     ; sensitive diagnosis drug
"RTN","PSS192PO",84,0)
 . Q
"RTN","PSS192PO",85,0)
 ;
"RTN","PSS192PO",86,0)
 D MES^XPDUTL("   Generating and sending the ePharmacy Drug File Changes report ... ")
"RTN","PSS192PO",87,0)
 D EMAIL
"RTN","PSS192PO",88,0)
 ;
"RTN","PSS192PO",89,0)
DRGX ;
"RTN","PSS192PO",90,0)
 D MES^XPDUTL("   Done with ePharmacy Drug File Changes.")
"RTN","PSS192PO",91,0)
 K ^TMP(RTN,$J)
"RTN","PSS192PO",92,0)
 Q
"RTN","PSS192PO",93,0)
 ;
"RTN","PSS192PO",94,0)
DEA(CHAR) ; remove characters from DEA and save new DEA and drug action to be taken
"RTN","PSS192PO",95,0)
 S NEWDEA=$TR(OLDDEA,CHAR)                                  ; remove characters from DEA value
"RTN","PSS192PO",96,0)
 S ^TMP(RTN,$J,1,DRUGNM,DRGIEN)=OLDDEA_U_NEWDEA_U_CHAR      ; save drug for DEA changes
"RTN","PSS192PO",97,0)
 I CHAR["U" S ^TMP(RTN,$J,5,DRGIEN)=""                      ; add drug to sensitive dx list if "U"
"RTN","PSS192PO",98,0)
 I NEWDEA="" S ^TMP(RTN,$J,2,DRUGNM,DRGIEN)=""              ; if the new DEA field is now blank, save it for display
"RTN","PSS192PO",99,0)
 Q
"RTN","PSS192PO",100,0)
 ;
"RTN","PSS192PO",101,0)
EMAIL ; send email when patch is installed and this post-install message is run
"RTN","PSS192PO",102,0)
 N SUBJ,MSG,XMTO,GLO,GLB,XMINSTR,NOTIF,SITE,G,DEACNT,DRUGNM,DRGIEN,NILCNT,USR
"RTN","PSS192PO",103,0)
 S SITE=$$SITE^VASITE
"RTN","PSS192PO",104,0)
 S SUBJ="ePharmacy Drug File Changes: PSS*1*192 #"_$P(SITE,U,3)_" #"_$P(SITE,U,2)
"RTN","PSS192PO",105,0)
 S SUBJ=$E(SUBJ,1,65)
"RTN","PSS192PO",106,0)
 S G=0
"RTN","PSS192PO",107,0)
 S G=G+1,MSG(G)="VistA patch PSS*1*192 was successfully installed at your site."
"RTN","PSS192PO",108,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",109,0)
 S G=G+1,MSG(G)="        Name: "_$P(SITE,U,2)
"RTN","PSS192PO",110,0)
 S G=G+1,MSG(G)="    Station#: "_$P(SITE,U,3)
"RTN","PSS192PO",111,0)
 S G=G+1,MSG(G)="   Date/Time: "_$$FMTE^XLFDT($$NOW^XLFDT,"5ZPM")
"RTN","PSS192PO",112,0)
 S G=G+1,MSG(G)="          By: "_$P($G(^VA(200,DUZ,0)),U,1)
"RTN","PSS192PO",113,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",114,0)
 S G=G+1,MSG(G)="The following entries in your DRUG file (#50) have been modified to remove"
"RTN","PSS192PO",115,0)
 S G=G+1,MSG(G)="characters ""E"" Electronically Billable and ""U"" Sensitive Diagnosis from the"
"RTN","PSS192PO",116,0)
 S G=G+1,MSG(G)="DEA, Special Handling field. The functions of both characters have been"
"RTN","PSS192PO",117,0)
 S G=G+1,MSG(G)="replaced by the following new DRUG file (#50) fields to maintain consistency"
"RTN","PSS192PO",118,0)
 S G=G+1,MSG(G)="throughout the VA:"
"RTN","PSS192PO",119,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",120,0)
 S G=G+1,MSG(G)="     (Field #84)   ePharmacy Billable:"
"RTN","PSS192PO",121,0)
 S G=G+1,MSG(G)="     (Field #85)     ePharmacy Billable (TRICARE):"
"RTN","PSS192PO",122,0)
 S G=G+1,MSG(G)="     (Field #86)     ePharmacy Billable (CHAMPVA):"
"RTN","PSS192PO",123,0)
 S G=G+1,MSG(G)="     (Field #87)   Sensitive Diagnosis Drug:"
"RTN","PSS192PO",124,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",125,0)
 S G=G+1,MSG(G)="1.  The ePharmacy Billable field and the Sensitive Diagnosis Drug field have"
"RTN","PSS192PO",126,0)
 S G=G+1,MSG(G)="    been answered YES or NO based on the data in the DEA, Special Handling"
"RTN","PSS192PO",127,0)
 S G=G+1,MSG(G)="    field."
"RTN","PSS192PO",128,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",129,0)
 S G=G+1,MSG(G)="2.  Drug file entries without the E and U were also marked as ePharmacy"
"RTN","PSS192PO",130,0)
 S G=G+1,MSG(G)="    Billable Yes or No, depending on the existing DEA, Special Handling field"
"RTN","PSS192PO",131,0)
 S G=G+1,MSG(G)="    configuration at the time PSS*1*192 was loaded, using the following"
"RTN","PSS192PO",132,0)
 S G=G+1,MSG(G)="    criteria:"
"RTN","PSS192PO",133,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",134,0)
 S G=G+1,MSG(G)="        DEA, Special Handling"
"RTN","PSS192PO",135,0)
 S G=G+1,MSG(G)="        Field Criteria                      Billable"
"RTN","PSS192PO",136,0)
 S G=G+1,MSG(G)="        --------------------------------------------"
"RTN","PSS192PO",137,0)
 S G=G+1,MSG(G)="        Null                                   N"
"RTN","PSS192PO",138,0)
 S G=G+1,MSG(G)="        Contains ""M"" or ""0"" (Zero)             N"
"RTN","PSS192PO",139,0)
 S G=G+1,MSG(G)="        Contains ""I"" or ""S"" or ""N"" or ""9"""
"RTN","PSS192PO",140,0)
 S G=G+1,MSG(G)="           and DOES NOT contain ""E""            N"
"RTN","PSS192PO",141,0)
 S G=G+1,MSG(G)="        Contains ""I"" or ""S"" or ""N"" or ""9"""
"RTN","PSS192PO",142,0)
 S G=G+1,MSG(G)="           and DOES contain ""E""                Y"
"RTN","PSS192PO",143,0)
 S G=G+1,MSG(G)="        All Other Entries                      Y"
"RTN","PSS192PO",144,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",145,0)
 S G=G+1,MSG(G)="3.  It is an exception to have a Null DEA, Special Handling field for a Drug"
"RTN","PSS192PO",146,0)
 S G=G+1,MSG(G)="    file item.  If you have items on this list whose DEA, Special Handling"
"RTN","PSS192PO",147,0)
 S G=G+1,MSG(G)="    field was null, it is suggested that you populate the DEA, Special Handling"
"RTN","PSS192PO",148,0)
 S G=G+1,MSG(G)="    field and mark those items as billable, if appropriate."
"RTN","PSS192PO",149,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",150,0)
 S G=G+1,MSG(G)="    Here is a Legend for the existing DEA, Special Handling field values:"
"RTN","PSS192PO",151,0)
 S G=G+1,MSG(G)="         0          MANUFACTURED IN PHARMACY"
"RTN","PSS192PO",152,0)
 S G=G+1,MSG(G)="         1          SCHEDULE 1 ITEM"
"RTN","PSS192PO",153,0)
 S G=G+1,MSG(G)="         2          SCHEDULE 2 ITEM"
"RTN","PSS192PO",154,0)
 S G=G+1,MSG(G)="         3          SCHEDULE 3 ITEM"
"RTN","PSS192PO",155,0)
 S G=G+1,MSG(G)="         4          SCHEDULE 4 ITEM"
"RTN","PSS192PO",156,0)
 S G=G+1,MSG(G)="         5          SCHEDULE 5 ITEM"
"RTN","PSS192PO",157,0)
 S G=G+1,MSG(G)="         6          LEGEND ITEM"
"RTN","PSS192PO",158,0)
 S G=G+1,MSG(G)="         9          OVER-THE-COUNTER"
"RTN","PSS192PO",159,0)
 S G=G+1,MSG(G)="         L          DEPRESSANTS AND STIMULANTS"
"RTN","PSS192PO",160,0)
 S G=G+1,MSG(G)="         A          NARCOTICS AND ALCOHOLS"
"RTN","PSS192PO",161,0)
 S G=G+1,MSG(G)="         P          DATED DRUGS"
"RTN","PSS192PO",162,0)
 S G=G+1,MSG(G)="         I          INVESTIGATIONAL DRUGS"
"RTN","PSS192PO",163,0)
 S G=G+1,MSG(G)="         M          BULK COMPOUND ITEMS"
"RTN","PSS192PO",164,0)
 S G=G+1,MSG(G)="         C          CONTROLLED SUBSTANCES - NON NARCOTIC"
"RTN","PSS192PO",165,0)
 S G=G+1,MSG(G)="         R          RESTRICTED ITEMS"
"RTN","PSS192PO",166,0)
 S G=G+1,MSG(G)="         S          SUPPLY ITEMS"
"RTN","PSS192PO",167,0)
 S G=G+1,MSG(G)="         B          ALLOW REFILL (SCH. 3, 4, 5 ONLY)"
"RTN","PSS192PO",168,0)
 S G=G+1,MSG(G)="         W          NOT RENEWABLE"
"RTN","PSS192PO",169,0)
 S G=G+1,MSG(G)="         F          NON REFILLABLE"
"RTN","PSS192PO",170,0)
 S G=G+1,MSG(G)="         N          NUTRITIONAL SUPPLEMENT"
"RTN","PSS192PO",171,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",172,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",173,0)
 S G=G+1,MSG(G)="-------------------------------------------------------------------------------"
"RTN","PSS192PO",174,0)
 S G=G+1,MSG(G)="                                             DEA Special Handling Field"
"RTN","PSS192PO",175,0)
 S G=G+1,MSG(G)="GENERIC NAME                                OLD        NEW       REMOVED"
"RTN","PSS192PO",176,0)
 S G=G+1,MSG(G)="-------------------------------------------------------------------------------"
"RTN","PSS192PO",177,0)
 ;
"RTN","PSS192PO",178,0)
 ; loop through the 1 area of the scratch global and populate the message with the DEA changes
"RTN","PSS192PO",179,0)
 S DEACNT=0
"RTN","PSS192PO",180,0)
 S DRUGNM="" F  S DRUGNM=$O(^TMP(RTN,$J,1,DRUGNM)) Q:DRUGNM=""  S DRGIEN=0 F  S DRGIEN=$O(^TMP(RTN,$J,1,DRUGNM,DRGIEN)) Q:'DRGIEN  D
"RTN","PSS192PO",181,0)
 . N AB
"RTN","PSS192PO",182,0)
 . S AB=$G(^TMP(RTN,$J,1,DRUGNM,DRGIEN))
"RTN","PSS192PO",183,0)
 . I $P(AB,U,2)="" S $P(AB,U,2)="-"
"RTN","PSS192PO",184,0)
 . S G=G+1,MSG(G)=$$LJ^XLFSTR(DRUGNM,44)_$$LJ^XLFSTR($P(AB,U,1),11)_$$LJ^XLFSTR($P(AB,U,2),11)_$P(AB,U,3)
"RTN","PSS192PO",185,0)
 . S DEACNT=DEACNT+1
"RTN","PSS192PO",186,0)
 . Q
"RTN","PSS192PO",187,0)
 ;
"RTN","PSS192PO",188,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",189,0)
 S G=G+1,MSG(G)="Total Drugs Modified:  "_DEACNT
"RTN","PSS192PO",190,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",191,0)
 S G=G+1,MSG(G)="No other changes were made to the DEA, Special Handling field for any other"
"RTN","PSS192PO",192,0)
 S G=G+1,MSG(G)="Drug File entries."
"RTN","PSS192PO",193,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",194,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",195,0)
 S G=G+1,MSG(G)="The following drugs do not have any value in the DEA Special Handling Field."
"RTN","PSS192PO",196,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",197,0)
 S G=G+1,MSG(G)="----------------------------------------"
"RTN","PSS192PO",198,0)
 S G=G+1,MSG(G)="GENERIC NAME"
"RTN","PSS192PO",199,0)
 S G=G+1,MSG(G)="----------------------------------------"
"RTN","PSS192PO",200,0)
 ;
"RTN","PSS192PO",201,0)
 ; loop through the 2 area of the scratch global to display drugs with Blank DEA fields
"RTN","PSS192PO",202,0)
 S NILCNT=0
"RTN","PSS192PO",203,0)
 S DRUGNM="" F  S DRUGNM=$O(^TMP(RTN,$J,2,DRUGNM)) Q:DRUGNM=""  S DRGIEN=0 F  S DRGIEN=$O(^TMP(RTN,$J,2,DRUGNM,DRGIEN)) Q:'DRGIEN  D
"RTN","PSS192PO",204,0)
 . S G=G+1,MSG(G)=DRUGNM
"RTN","PSS192PO",205,0)
 . S NILCNT=NILCNT+1
"RTN","PSS192PO",206,0)
 . Q
"RTN","PSS192PO",207,0)
 ;
"RTN","PSS192PO",208,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",209,0)
 S G=G+1,MSG(G)="Total Drugs with Blank DEA Special Handling:  "_NILCNT
"RTN","PSS192PO",210,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",211,0)
 S G=G+1,MSG(G)=""
"RTN","PSS192PO",212,0)
 ;
"RTN","PSS192PO",213,0)
 ; Now we need to address the message
"RTN","PSS192PO",214,0)
 ;   - send it to holders of the PSO EPHARMACY SITE MANAGER key
"RTN","PSS192PO",215,0)
 ;   - send it to the installer (DUZ)
"RTN","PSS192PO",216,0)
 ;   - send it to Gregory Laird in VA Outlook (production only)
"RTN","PSS192PO",217,0)
 ;   - send it to selected project team members (production only)
"RTN","PSS192PO",218,0)
 S USR=0 F  S USR=$O(^XUSEC("PSO EPHARMACY SITE MANAGER",USR)) Q:'USR  S XMTO(USR)=""
"RTN","PSS192PO",219,0)
 S XMTO(DUZ)=""
"RTN","PSS192PO",220,0)
 I $$PROD^XUPROD(1) D
"RTN","PSS192PO",221,0)
 . S XMTO("name@domain.ext")=""
"RTN","PSS192PO",222,0)
 . S XMTO("name@domain.ext")=""
"RTN","PSS192PO",223,0)
 . S XMTO("name@domain.ext")=""
"RTN","PSS192PO",224,0)
 . Q
"RTN","PSS192PO",225,0)
 ;
"RTN","PSS192PO",226,0)
 S XMINSTR("FROM")="PSS.1.192.POST"
"RTN","PSS192PO",227,0)
 ;
"RTN","PSS192PO",228,0)
 D SENDMSG^XMXAPI(DUZ,SUBJ,"MSG",.XMTO,.XMINSTR)
"RTN","PSS192PO",229,0)
 I '$D(^TMP("XMERR",$J)) G EMAILX    ; no email problems so get out
"RTN","PSS192PO",230,0)
 ;
"RTN","PSS192PO",231,0)
 D MES^XPDUTL("MailMan reported a problem trying to send the PSS patch install/Drug File report message.")
"RTN","PSS192PO",232,0)
 D MES^XPDUTL("  ")
"RTN","PSS192PO",233,0)
 S (GLO,GLB)="^TMP(""XMERR"","_$J
"RTN","PSS192PO",234,0)
 S GLO=GLO_")"
"RTN","PSS192PO",235,0)
 F  S GLO=$Q(@GLO) Q:GLO'[GLB  D MES^XPDUTL("   "_GLO_" = "_$G(@GLO))
"RTN","PSS192PO",236,0)
 D MES^XPDUTL("  ")
"RTN","PSS192PO",237,0)
 ;
"RTN","PSS192PO",238,0)
EMAILX ;
"RTN","PSS192PO",239,0)
 Q
"RTN","PSS192PO",240,0)
 ;
"RTN","PSS50")
0^4^B25607113
"RTN","PSS50",1,0)
PSS50 ;BIR/LDT - API FOR INFORMATION FROM FILE 50 ;5 Sep 03
"RTN","PSS50",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**85,104,192**;9/30/97;Build 25
"RTN","PSS50",3,0)
 ;
"RTN","PSS50",4,0)
DATA(PSSIEN,PSSFT,PSSFL,PSSPK,PSSRTOI,LIST) ;
"RTN","PSS50",5,0)
 ;Returns Drug File (#50) Data
"RTN","PSS50",6,0)
 D DATA^PSS50DAT
"RTN","PSS50",7,0)
 Q
"RTN","PSS50",8,0)
CMOP(PSSIEN,PSSFT,PSSFL,PSSPK,PSSRTOI,LIST) ;
"RTN","PSS50",9,0)
 ;Returns CMOP information from Drug File (#50)
"RTN","PSS50",10,0)
 D CMOP^PSS50CMP
"RTN","PSS50",11,0)
 Q
"RTN","PSS50",12,0)
DRG(PSSIEN,PSSFT,PSSFL,PSSPK,PSSRTOI,LIST) ;
"RTN","PSS50",13,0)
 ;Returns information from Drug File (#50) used by Inpatient Meds/Unit Dose
"RTN","PSS50",14,0)
 D DRG^PSS50DAT
"RTN","PSS50",15,0)
 Q
"RTN","PSS50",16,0)
ATC(PSSIEN,PSSFT,PSSFL,PSSPK,LIST) ;
"RTN","PSS50",17,0)
 ;Returns ATC fields from the Drug File (#50)
"RTN","PSS50",18,0)
 N PSSRTOI
"RTN","PSS50",19,0)
 D ATC^PSS50ATC
"RTN","PSS50",20,0)
 Q
"RTN","PSS50",21,0)
INV(PSSIEN,PSSFT,PSSFL,PSSPK,PSSRTOI,LIST) ;
"RTN","PSS50",22,0)
 ;Returns inventory fields from the Drug File (#50)
"RTN","PSS50",23,0)
 D INV^PSS50B
"RTN","PSS50",24,0)
 Q
"RTN","PSS50",25,0)
NDF(PSSIEN,PSSFT,PSSFL,PSSPK,PSSRTOI,LIST) ;
"RTN","PSS50",26,0)
 ;Returns NDF fields from the Drug File (#50)
"RTN","PSS50",27,0)
 D NDF^PSS50B
"RTN","PSS50",28,0)
 Q
"RTN","PSS50",29,0)
LAB(PSSIEN,PSSFT,PSSFL,PSSPK,PSSRTOI,LIST) ;
"RTN","PSS50",30,0)
 ;Returns Lab information from the Drug File (#50)
"RTN","PSS50",31,0)
 D LAB^PSS50LAB
"RTN","PSS50",32,0)
 Q
"RTN","PSS50",33,0)
CLOZ(PSSIEN,PSSFT,PSSFL,PSSPK,PSSRTOI,LIST) ;
"RTN","PSS50",34,0)
 ;Returns Clozapine information from the Drug File (#50)
"RTN","PSS50",35,0)
 D CLOZ^PSS50B2
"RTN","PSS50",36,0)
 Q
"RTN","PSS50",37,0)
ARWS(PSSIEN,PSSFT,LIST) ;
"RTN","PSS50",38,0)
 ;Returns fields utilized by the Automatic Replenishment/Ward Stock extract in PBM
"RTN","PSS50",39,0)
 N PSSFL,PSSPK,PSSRTOI
"RTN","PSS50",40,0)
 D ARWS^PSS50WS
"RTN","PSS50",41,0)
 Q
"RTN","PSS50",42,0)
DOSE(PSSIEN,PSSFT,PSSFL,PSSPK,PSSRTOI,LIST) ;
"RTN","PSS50",43,0)
 ;Returns Dosing fields from the Drug File (#50)
"RTN","PSS50",44,0)
 D DOSE^PSS50B
"RTN","PSS50",45,0)
 Q
"RTN","PSS50",46,0)
WS(PSSIEN,PSSFT,PSSFL,PSSPK,PSSRTOI,LIST) ;
"RTN","PSS50",47,0)
 ;Returns Ward Stock fields from the Drug File (#50)
"RTN","PSS50",48,0)
 D WS^PSS50C
"RTN","PSS50",49,0)
 Q
"RTN","PSS50",50,0)
MRTN(PSSIEN,PSSFT,PSSFL,PSSPK,PSSRTOI,LIST) ;
"RTN","PSS50",51,0)
 ;Returns Lab Test Monitor fields from the Drug File (#50)
"RTN","PSS50",52,0)
 D MRTN^PSS50C
"RTN","PSS50",53,0)
 Q
"RTN","PSS50",54,0)
ZERO(PSSIEN,PSSFT,PSSFL,PSSPK,PSSRTOI,LIST) ;
"RTN","PSS50",55,0)
 ;Returns Zero node information from the Drug File (#50)
"RTN","PSS50",56,0)
 D ZERO^PSS50C
"RTN","PSS50",57,0)
 Q
"RTN","PSS50",58,0)
NOCMOP(PSSIEN,PSSFL) ;
"RTN","PSS50",59,0)
 ;Returns drugs from the Drug file (#50) with the CMOP Dispense Field set to Null or No
"RTN","PSS50",60,0)
 Q $$NOCMOP^PSS50C(PSSIEN,$S($G(PSSFL)]"":PSSFL,1:""))
"RTN","PSS50",61,0)
 Q
"RTN","PSS50",62,0)
MSG(LIST) ;
"RTN","PSS50",63,0)
 ;Returns entries and data from the Drug File (#50) with data in the Quantity Dispense Message field
"RTN","PSS50",64,0)
 D MSG^PSS50C
"RTN","PSS50",65,0)
 Q
"RTN","PSS50",66,0)
IEN(LIST) ;
"RTN","PSS50",67,0)
 ;Returns Active Outpatient Drugs with a VA Product Name entry
"RTN","PSS50",68,0)
 D IEN^PSS50C
"RTN","PSS50",69,0)
 Q
"RTN","PSS50",70,0)
B(PSSFT,PSSFL,PSSPK,PSSRTOI,LIST) ;
"RTN","PSS50",71,0)
 ;Returns Drug information based on B cross reference
"RTN","PSS50",72,0)
 D B^PSS50D
"RTN","PSS50",73,0)
 Q
"RTN","PSS50",74,0)
VAC(PSSVAL,PSSFL,PSSPK,LIST) ;
"RTN","PSS50",75,0)
 ;Returns Generic Name based on National Drug Class
"RTN","PSS50",76,0)
 N PSSRTOI
"RTN","PSS50",77,0)
 D VAC^PSS50D
"RTN","PSS50",78,0)
 Q
"RTN","PSS50",79,0)
NDC(PSSVAL,PSSFL,PSSPK,LIST) ;
"RTN","PSS50",80,0)
 ;Returns Generic Name or IEN for drugs when passed an NDC
"RTN","PSS50",81,0)
 D NDC^PSS50D
"RTN","PSS50",82,0)
 Q
"RTN","PSS50",83,0)
ASP(PSSVAL,PSSFL,PSSPK,LIST) ;
"RTN","PSS50",84,0)
 ;Returns drug entries when passed an Orderable Item
"RTN","PSS50",85,0)
 N PSSRTOI
"RTN","PSS50",86,0)
 D ASP^PSS50D
"RTN","PSS50",87,0)
 Q
"RTN","PSS50",88,0)
AND(PSSVAL,PSSFL,PSSPK,LIST) ;
"RTN","PSS50",89,0)
 ;Returns drug entries when passed a National Drug File entry
"RTN","PSS50",90,0)
 N PSSRTOI
"RTN","PSS50",91,0)
 D AND^PSS50D
"RTN","PSS50",92,0)
 Q
"RTN","PSS50",93,0)
AP(PSSVAL,PSSFL,PSSPK,LIST) ;
"RTN","PSS50",94,0)
 ;Returns drug entries when passed a Primary Drug entry
"RTN","PSS50",95,0)
 N PSSRTOI
"RTN","PSS50",96,0)
 D AP^PSS50D
"RTN","PSS50",97,0)
 Q
"RTN","PSS50",98,0)
DSPUNT(PSSIEN,PSSIEN2,LIST) ;
"RTN","PSS50",99,0)
 ;Returns Dispense Units Per Order Unit when passed in the Drug and Synonym
"RTN","PSS50",100,0)
 D DSPUNT^PSS50C1
"RTN","PSS50",101,0)
 Q
"RTN","PSS50",102,0)
SKB(PSSIEN,PSSFL) ;
"RTN","PSS50",103,0)
 ;Sets and kills B cross reference on the Name field when the Drug is passed
"RTN","PSS50",104,0)
 I +$G(PSSIEN)'>0 Q 0
"RTN","PSS50",105,0)
 I $G(PSSFL)']"" Q 0
"RTN","PSS50",106,0)
 I "SK"'[$G(PSSFL) Q 0
"RTN","PSS50",107,0)
 Q $$SKB^PSS50E(PSSIEN,PSSFL)
"RTN","PSS50",108,0)
AOC(PSSVAL,PSSFL,PSSPK,LIST) ;
"RTN","PSS50",109,0)
 ;Returns generic name or IEN for drugs when passed the VA CLASSIFICATION
"RTN","PSS50",110,0)
 D AOC^PSS50E
"RTN","PSS50",111,0)
 Q
"RTN","PSS50",112,0)
C(PSSVAL,PSSFL,PSSPK,LIST) ;
"RTN","PSS50",113,0)
 ;Returns information from the Synonym multiple of the Drug File (#50)
"RTN","PSS50",114,0)
 D C^PSS50E
"RTN","PSS50",115,0)
 Q
"RTN","PSS50",116,0)
AQ(PSSIEN) ;
"RTN","PSS50",117,0)
 ;Checks for existence of "AQ" x-ref for PSSIEN passed
"RTN","PSS50",118,0)
 I +$G(PSSIEN)'>0 Q 0
"RTN","PSS50",119,0)
 Q +$G(^PSDRUG(+PSSIEN,3))
"RTN","PSS50",120,0)
SKAQ(PSSIEN,PSSFL) ;
"RTN","PSS50",121,0)
 ;Sets and kills "AQ" x-ref on the CMOP Dispense field for PSSIEN passed
"RTN","PSS50",122,0)
 I +$G(PSSIEN)'>0 Q 0
"RTN","PSS50",123,0)
 I $G(PSSFL)']"" Q 0
"RTN","PSS50",124,0)
 I "SK"'[$G(PSSFL) Q 0
"RTN","PSS50",125,0)
 Q $$SKAQ^PSS50E(PSSIEN,$G(PSSFL))
"RTN","PSS50",126,0)
SKAQ1(PSSIEN) ;
"RTN","PSS50",127,0)
 ;Sets and kills "AQ1" x-ref on the CMOP ID field for PSSIEN passed
"RTN","PSS50",128,0)
 I +$G(PSSIEN)'>0 Q 0
"RTN","PSS50",129,0)
 Q $$SKAQ1^PSS50E(PSSIEN)
"RTN","PSS50",130,0)
AQ1(PSSVAL,PSSFL,PSSPK,LIST) ;
"RTN","PSS50",131,0)
 ;Returns a list of drugs associated with the CMOP ID passed
"RTN","PSS50",132,0)
 D AQ1^PSS50B1
"RTN","PSS50",133,0)
 Q
"RTN","PSS50",134,0)
A526(PSSIEN,LIST) ;
"RTN","PSS50",135,0)
 ;Returns a list of additives associated with the Drug passed
"RTN","PSS50",136,0)
 D A526^PSS50E
"RTN","PSS50",137,0)
 Q
"RTN","PSS50",138,0)
A527(PSSIEN,LIST) ;
"RTN","PSS50",139,0)
 ;Returns a list of solutions associated with the drug passed
"RTN","PSS50",140,0)
 D A527^PSS50E
"RTN","PSS50",141,0)
 Q
"RTN","PSS50",142,0)
AIU(PSSFT,PSSPK,PSSFL,LIST) ;
"RTN","PSS50",143,0)
 ;Returns a list of drugs based on Application Packages' Use and Inactive Date
"RTN","PSS50",144,0)
 D AIU^PSS50B1
"RTN","PSS50",145,0)
 Q
"RTN","PSS50",146,0)
IU(PSSFL,LIST) ;
"RTN","PSS50",147,0)
 ;Returns a list of drugs based on Application Packages' Use not containing "O", "U", "I", or "N"
"RTN","PSS50",148,0)
 D IU^PSS50B1
"RTN","PSS50",149,0)
 Q
"RTN","PSS50",150,0)
SKAIU(PSSIEN,PSSFL) ;
"RTN","PSS50",151,0)
 ;Sets and Kills the "AIU" x-ref on the APPLICATION PACKAGES' USE field for PSSIEN and PSSPK passed
"RTN","PSS50",152,0)
 I +$G(PSSIEN)'>0 Q 0
"RTN","PSS50",153,0)
 I $G(PSSFL)']"" Q 0
"RTN","PSS50",154,0)
 I "SK"'[$G(PSSFL) Q 0
"RTN","PSS50",155,0)
 Q $$SKAIU^PSS50E(PSSIEN,PSSFL)
"RTN","PSS50",156,0)
SKIU(PSSIEN) ;
"RTN","PSS50",157,0)
 ;Sets and Kills the "IU" x-ref on the APPLICATION PACKAGES' USE field for PSSIEN and PSSPK passed
"RTN","PSS50",158,0)
 I +$G(PSSIEN)'>0 Q 0
"RTN","PSS50",159,0)
 Q $$SKIU^PSS50E(PSSIEN)
"RTN","PSS50",160,0)
AB(PSSVAL,PSSFL,PSSPK,LIST) ;
"RTN","PSS50",161,0)
 ;Returns a list of drugs associated with an IFCAP Item Number
"RTN","PSS50",162,0)
 D AB^PSS50C
"RTN","PSS50",163,0)
 Q
"RTN","PSS50",164,0)
AVSN(PSSVAL,PSSFL,PSSPK,LIST) ;
"RTN","PSS50",165,0)
 ;Returns synonym multiple for Synonym value passed
"RTN","PSS50",166,0)
 D AVSN^PSS50B1
"RTN","PSS50",167,0)
 Q
"RTN","PSS50",168,0)
FRMALT(PSSIEN,PSSFT,PSSFL,PSSPK,LIST) ;
"RTN","PSS50",169,0)
 ;Returns the Formulary Altenative for the drug value passed
"RTN","PSS50",170,0)
 N PSSRTOI
"RTN","PSS50",171,0)
 D FRMALT^PSS50B2
"RTN","PSS50",172,0)
 Q
"RTN","PSS50",173,0)
LABEL(PSSIEN,LIST) ;
"RTN","PSS50",174,0)
 ;Returns Information for the scanner for the drug IEN passed
"RTN","PSS50",175,0)
 D LABEL^PSS50A1
"RTN","PSS50",176,0)
 Q
"RTN","PSS50",177,0)
SORT(PSSIEN,LIST) ;
"RTN","PSS50",178,0)
 ;Returns a list of drugs for the IEN passed
"RTN","PSS50",179,0)
 D SORT^PSS50A1
"RTN","PSS50",180,0)
 Q
"RTN","PSS50",181,0)
OLDNM(PSSIEN,PSSFT,PSSFL,PSSPK,LIST) ;
"RTN","PSS50",182,0)
 ;Returns OLD NAME multiple from the Drug File (#50)
"RTN","PSS50",183,0)
 N PSSRTOI
"RTN","PSS50",184,0)
 D OLDNM^PSS50F
"RTN","PSS50",185,0)
 Q
"RTN","PSS50",186,0)
ADDOLDNM(PSSIEN,PSSONM,PSSDT) ;
"RTN","PSS50",187,0)
 ;Adds an entry to the OLD NAME Multiple of the Drug file (#50)
"RTN","PSS50",188,0)
 Q $$ADDOLDNM^PSS50F($G(PSSIEN),$G(PSSONM),$G(PSSDT))
"RTN","PSS50",189,0)
LIST(PSSFT,PSSFL,PSSD,PSSPK,LIST) ;
"RTN","PSS50",190,0)
 ;Returns a list containing GENERIC NAME field (#.01) and PHARMCY ORDERABLE ITEM field (#2.1)
"RTN","PSS50",191,0)
 N PSSRTOI
"RTN","PSS50",192,0)
 D LIST^PSS50F1
"RTN","PSS50",193,0)
 Q
"RTN","PSS50",194,0)
EDTIFCAP(PSSIEN,PSSVAL) ;
"RTN","PSS50",195,0)
 ;Adds an entry to the IFCAP ITEM NUMBER multiple of the DRUG file (#50)
"RTN","PSS50",196,0)
 Q $$EDTIFCAP^PSS50F($G(PSSIEN),$G(PSSVAL))
"RTN","PSS50",197,0)
LOOKUP(PSSFT,PSSFL,PSSPK,PSSRTOI,PSSIFCAP,PSSCMOP,PSSD,LIST) ;
"RTN","PSS50",198,0)
 D LOOKUP^PSS50F1
"RTN","PSS50",199,0)
 Q
"RTN","PSS50",200,0)
CSYN(PSSIEN,PSSVAL,LIST) ;
"RTN","PSS50",201,0)
 ;returns synonym information from the synonym multiple of the Drug file (#50)
"RTN","PSS50",202,0)
 D CSYN^PSS50C1
"RTN","PSS50",203,0)
 Q
"RTN","PSS50",204,0)
PSSBILSD(PSSIEN,EPHBILSD) ; 
"RTN","PSS50",205,0)
 ; returns eBillable & Sensitive Diagnosis Drug fields from the Drug File(#50)
"RTN","PSS50",206,0)
 ;   Input:PSSIEN -  File #50 Drug IEN
"RTN","PSS50",207,0)
 ;  Output:Drug File billable and sensitive diagnosis drug fields
"RTN","PSS50",208,0)
 ;         EPHBILL -  EPHARMACY BILLABLE field #84
"RTN","PSS50",209,0)
 ;         EPHTRI -   EPHARMACY BILLABLE (TRICARE) field #85
"RTN","PSS50",210,0)
 ;         EPHCHAMP - EPHARMACY BILLABLE (CHAMPVA) field #86
"RTN","PSS50",211,0)
 ;         EPHSENS -  EPHARMACY SENSITIVE DIAGNOSIS DRUG field #87
"RTN","PSS50",212,0)
 ;
"RTN","PSS50",213,0)
 ;         EPHBILSD=EPHBILL^EPHTRI^EPHCHAMP^EPHSENS
"RTN","PSS50",214,0)
 ;
"RTN","PSS50",215,0)
 N EPHNODE,EPHBILL,EPHTRI,EPHCHAMP,EPHSENS,EPHBILSD
"RTN","PSS50",216,0)
 I $G(PSSIEN)="" Q 0
"RTN","PSS50",217,0)
 S EPHNODE=$G(^PSDRUG(PSSIEN,"EPH"))
"RTN","PSS50",218,0)
 S EPHBILL=$P(EPHNODE,U,4)
"RTN","PSS50",219,0)
 S EPHTRI=$P(EPHNODE,U,5)
"RTN","PSS50",220,0)
 S EPHCHAMP=$P(EPHNODE,U,6)
"RTN","PSS50",221,0)
 S EPHSENS=$P(EPHNODE,U,7)
"RTN","PSS50",222,0)
 S EPHBILSD=EPHBILL_U_EPHTRI_U_EPHCHAMP_U_EPHSENS
"RTN","PSS50",223,0)
 Q EPHBILSD
"RTN","PSSDDUT2")
0^2^B173773291
"RTN","PSSDDUT2",1,0)
PSSDDUT2 ;BIR/LDT - Pharmacy Data Management DD Utility ;1/20/16 2:45pm
"RTN","PSSDDUT2",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**3,21,61,81,95,127,126,139,131,143,188,189,192**;9/30/97;Build 25
"RTN","PSSDDUT2",3,0)
 ;
"RTN","PSSDDUT2",4,0)
 ;Reference to ^DIC(42 supported by DBIA #10039
"RTN","PSSDDUT2",5,0)
 ;Reference to ^DD(59.723 supported by DBIA #2159
"RTN","PSSDDUT2",6,0)
 ;Reference to ^PSNDF(50.68 supported by DBIA 3735
"RTN","PSSDDUT2",7,0)
 ;
"RTN","PSSDDUT2",8,0)
DEA ;(Replaces ^PSODEA)
"RTN","PSSDDUT2",9,0)
 S PSSHLP(1)="THE SPECIAL HANDLING CODE IS A 2 TO 6 POSTION FIELD.  IF APPLICABLE,"
"RTN","PSSDDUT2",10,0)
 S PSSHLP(2)="A SCHEDULE CODE MUST APPEAR IN THE FIRST POSITION.  FOR EXAMPLE,"
"RTN","PSSDDUT2",11,0)
 S PSSHLP(3)="A SCHEDULE 3 NARCOTIC WILL BE CODED '3A', A SCHEDULE 3 NON-NARCOTIC WILL BE"
"RTN","PSSDDUT2",12,0)
 S PSSHLP(4)="CODED '3C' AND A SCHEDULE 2 DEPRESSANT WILL BE CODED '2L'."
"RTN","PSSDDUT2",13,0)
 S PSSHLP(5)="THE CODES ARE:"
"RTN","PSSDDUT2",14,0)
 D WRITE
"RTN","PSSDDUT2",15,0)
 F II=1:1 Q:$P($T(D+II),";",3)=""  S PSSHLP(II)=$P($T(D+II),";",3,99)
"RTN","PSSDDUT2",16,0)
 S PSSHLP(1,"F")="!!" D WRITE
"RTN","PSSDDUT2",17,0)
 D PKIND,WRITE
"RTN","PSSDDUT2",18,0)
D K II Q
"RTN","PSSDDUT2",19,0)
 ;;0          MANUFACTURED IN PHARMACY
"RTN","PSSDDUT2",20,0)
 ;;1          SCHEDULE 1 ITEM
"RTN","PSSDDUT2",21,0)
 ;;2          SCHEDULE 2 ITEM
"RTN","PSSDDUT2",22,0)
 ;;3          SCHEDULE 3 ITEM
"RTN","PSSDDUT2",23,0)
 ;;4          SCHEDULE 4 ITEM
"RTN","PSSDDUT2",24,0)
 ;;5          SCHEDULE 5 ITEM
"RTN","PSSDDUT2",25,0)
 ;;6          LEGEND ITEM
"RTN","PSSDDUT2",26,0)
 ;;9          OVER-THE-COUNTER
"RTN","PSSDDUT2",27,0)
 ;;L          DEPRESSANTS AND STIMULANTS
"RTN","PSSDDUT2",28,0)
 ;;A          NARCOTICS AND ALCOHOLS
"RTN","PSSDDUT2",29,0)
 ;;P          DATED DRUGS
"RTN","PSSDDUT2",30,0)
 ;;I          INVESTIGATIONAL DRUGS
"RTN","PSSDDUT2",31,0)
 ;;M          BULK COMPOUND ITEMS
"RTN","PSSDDUT2",32,0)
 ;;C          CONTROLLED SUBSTANCES - NON NARCOTIC
"RTN","PSSDDUT2",33,0)
 ;;R          RESTRICTED ITEMS
"RTN","PSSDDUT2",34,0)
 ;;S          SUPPLY ITEMS
"RTN","PSSDDUT2",35,0)
 ;;B          ALLOW REFILL (SCH. 3, 4, 5 ONLY)
"RTN","PSSDDUT2",36,0)
 ;;W          NOT RENEWABLE
"RTN","PSSDDUT2",37,0)
 ;;F          NON REFILLABLE
"RTN","PSSDDUT2",38,0)
 ;;N          NUTRITIONAL SUPPLEMENT
"RTN","PSSDDUT2",39,0)
 ;;
"RTN","PSSDDUT2",40,0)
DEATBL ; More Help regarding DEA Codes
"RTN","PSSDDUT2",41,0)
 K PSSHLP
"RTN","PSSDDUT2",42,0)
 F II=1:1 Q:$P($T(TBL+II),";",3)=""  S PSSHLP(II)=$P($T(TBL+II),";",3,99)
"RTN","PSSDDUT2",43,0)
 S PSSHLP(1,"F")="!!" D WRITE
"RTN","PSSDDUT2",44,0)
 ;
"RTN","PSSDDUT2",45,0)
TBL K II Q
"RTN","PSSDDUT2",46,0)
 ;;          DEA CODE TABLE
"RTN","PSSDDUT2",47,0)
 ;; CODE   ALLOW RENEWS ALLOW REFILLS
"RTN","PSSDDUT2",48,0)
 ;; 1            NO           NO
"RTN","PSSDDUT2",49,0)
 ;; 2            NO           NO
"RTN","PSSDDUT2",50,0)
 ;; 2A           NO           NO 
"RTN","PSSDDUT2",51,0)
 ;; 3            YES          YES
"RTN","PSSDDUT2",52,0)
 ;; 3A           YES          NO
"RTN","PSSDDUT2",53,0)
 ;; 3AB          YES          YES
"RTN","PSSDDUT2",54,0)
 ;; 4            YES          YES
"RTN","PSSDDUT2",55,0)
 ;; 4A           YES          NO
"RTN","PSSDDUT2",56,0)
 ;; 4AB          YES          YES
"RTN","PSSDDUT2",57,0)
 ;; 5            YES          YES
"RTN","PSSDDUT2",58,0)
 ;; 5A           YES          NO
"RTN","PSSDDUT2",59,0)
 ;; 5AB          YES          YES
"RTN","PSSDDUT2",60,0)
 ;; ADDING W TO A SCHED. 3,4,OR 5 CODE DISALLOWS RENEWS.
"RTN","PSSDDUT2",61,0)
 ;; ADDING F TO A SCHED. 3,4,OR 5 CODE DISALLOWS REFILLS
"RTN","PSSDDUT2",62,0)
 ;; IF A CODE IS NOT LISTED IN THE ABOVE TABLE
"RTN","PSSDDUT2",63,0)
 ;; IT HAS NO EFFECT ON RENEW OR REFILL
"RTN","PSSDDUT2",64,0)
SIG ;checks SIG for RXs (Replaces SIG^PSOHELP)
"RTN","PSSDDUT2",65,0)
 I $E(X)=" " D EN^DDIOL("Leading spaces are not allowed in the SIG! ","","$C(7),!") K X Q
"RTN","PSSDDUT2",66,0)
SIGONE S SIG="" Q:$L(X)<1  F Z0=1:1:$L(X," ") G:Z0="" EN S Z1=$P(X," ",Z0) D  G:'$D(X) EN
"RTN","PSSDDUT2",67,0)
 .I $L(Z1)>32 D EN^DDIOL("MAX OF 32 CHARACTERS ALLOWED BETWEEN SPACES.","","$C(7),!?5") K X Q
"RTN","PSSDDUT2",68,0)
 .D:$D(X)&($G(Z1)]"")  S SIG=SIG_" "_Z1
"RTN","PSSDDUT2",69,0)
 ..S Y=$O(^PS(51,"B",Z1,0)) Q:'Y!($P($G(^PS(51,+Y,0)),"^",4)>1)  S Z1=$P(^PS(51,Y,0),"^",2) Q:'$D(^(9))  S Y=$P(X," ",Z0-1),Y=$E(Y,$L(Y)) S:Y>1 Z1=^(9)
"RTN","PSSDDUT2",70,0)
EN K Z1,Z0 ;S:$G(POERR) PSOERR("SIG")="("_$E(SIG,2,999999999)_")"
"RTN","PSSDDUT2",71,0)
 Q
"RTN","PSSDDUT2",72,0)
 ;
"RTN","PSSDDUT2",73,0)
DRUGW ;(Replaces DRUGW^PSOUTLA)
"RTN","PSSDDUT2",74,0)
 F Z0=1:1 Q:$P(X,",",Z0,99)=""  S Z1=$P(X,",",Z0) D:$D(^PS(54,Z1,0)) EN^DDIOL($P(^(0),"^"),"","!,?35") I '$D(^(0)) D EN^DDIOL("NO SUCH WARNING LABEL","","?35") K X Q
"RTN","PSSDDUT2",75,0)
 Q
"RTN","PSSDDUT2",76,0)
 ;
"RTN","PSSDDUT2",77,0)
P ;(Replaces ^PSODSRC)
"RTN","PSSDDUT2",78,0)
 S PSSHLP(1)="A TWO OR THREE POSITION CODE IDENTIFIES THE SOURCE OF SUPPLY AND WHETHER"
"RTN","PSSDDUT2",79,0)
 S PSSHLP(2)="THE DRUG IS STOCKED BY THE STATION SUPPLY DIVISION.  THE FIRST"
"RTN","PSSDDUT2",80,0)
 S PSSHLP(3)="POSITION OF THE CODE IDENTIFIES SOURCE OF SUPPLY.  THE CODES ARE:"
"RTN","PSSDDUT2",81,0)
 D WRITE
"RTN","PSSDDUT2",82,0)
 F II=0:1:10 S PSSHLP(II+1)=$P($T(S+II+1),";",3),PSSHLP(II+1,"F")="!?10"
"RTN","PSSDDUT2",83,0)
 S PSSHLP(1,"F")="!!?10"
"RTN","PSSDDUT2",84,0)
 D WRITE
"RTN","PSSDDUT2",85,0)
 S PSSHLP(1)="THE SECOND POSITION OF THE CODE INDICATES WHETHER THE ITEM IS"
"RTN","PSSDDUT2",86,0)
 S PSSHLP(2)="OR IS NOT AVAILABLE FROM SUPPLY WAREHOUSE STOCK.  THE CODES ARE:"
"RTN","PSSDDUT2",87,0)
 S PSSHLP(3)="P          POSTED STOCK"
"RTN","PSSDDUT2",88,0)
 S PSSHLP(3,"F")="!!?10"
"RTN","PSSDDUT2",89,0)
 S PSSHLP(4)="U          UNPOSTED"
"RTN","PSSDDUT2",90,0)
 S PSSHLP(4,"F")="!?10"
"RTN","PSSDDUT2",91,0)
 S PSSHLP(5)="M          BULK COMPOUND"
"RTN","PSSDDUT2",92,0)
 S PSSHLP(5,"F")="!?10"
"RTN","PSSDDUT2",93,0)
 S PSSHLP(6)="*  USE CODE 0 ONLY WITH SECOND POSITION M."
"RTN","PSSDDUT2",94,0)
 D WRITE Q
"RTN","PSSDDUT2",95,0)
 ;
"RTN","PSSDDUT2",96,0)
S ;;DESCRIPTION MEANINGS
"RTN","PSSDDUT2",97,0)
 ;;0          BULK COMPOUND ITEMS *
"RTN","PSSDDUT2",98,0)
 ;;1          VA SERVICING SUPPLY DEPOT
"RTN","PSSDDUT2",99,0)
 ;;2          OPEN MARKET
"RTN","PSSDDUT2",100,0)
 ;;3          GSA STORES DEPOT
"RTN","PSSDDUT2",101,0)
 ;;4          VA DECENTRALIZED CONTRACTS
"RTN","PSSDDUT2",102,0)
 ;;5          FEDERAL PRISON INDUSTRIES, INC.
"RTN","PSSDDUT2",103,0)
 ;;6          FEDERAL SUPPLY SCHEDULES
"RTN","PSSDDUT2",104,0)
 ;;7          VA SUPPLY DEPOT, HINES
"RTN","PSSDDUT2",105,0)
 ;;8          VA SUPPLY DEPOT, SOMERVILLE
"RTN","PSSDDUT2",106,0)
 ;;9          APPROPRIATE MARKETING DIVISION
"RTN","PSSDDUT2",107,0)
 ;;10         VA SUPPLY DEPOT, BELL
"RTN","PSSDDUT2",108,0)
EDIT ;INPUT XFORM FOR DEA FIELD IN DRUG FILE (Replaces EDIT^PSODEA)
"RTN","PSSDDUT2",109,0)
 I X["F",X["B" D EN^DDIOL("Inappropriate F designation!","","$C(7),!") K X Q
"RTN","PSSDDUT2",110,0)
 ;;DEA CHANGE PSS*1*126
"RTN","PSSDDUT2",111,0)
 I X["B",(+X<3) D EN^DDIOL("The B designation is only valid for schedule 3, 4, 5 !","","$C(7),!") K X Q
"RTN","PSSDDUT2",112,0)
 I X["A"&(X["C"),+X=2!(+X=3) D EN^DDIOL("The A & C designation is not valid for schedule 2 or 3 narcotics!","","$C(7),!") K X Q
"RTN","PSSDDUT2",113,0)
 I $E(X)=1,X[2!(X[3)!(X[4)!(X[5) D EN^DDIOL("It contains other inappropriate schedule 2-5 narcotics!","","$C(7),!") K X Q
"RTN","PSSDDUT2",114,0)
 I $E(X)=2,X[1!(X[3)!(X[4)!(X[5) D EN^DDIOL("It contains other inappropriate schedule 1,3-5 narcotics!","","$C(7),!") K X Q
"RTN","PSSDDUT2",115,0)
 I $E(X)=3,X[1!(X[2)!(X[4)!(X[5) D EN^DDIOL("It contains other inappropriate schedule 1-2,4-5 narcotics!","","$C(7),!") K X Q
"RTN","PSSDDUT2",116,0)
 I $E(X)=4,X[1!(X[2)!(X[3)!(X[5) D EN^DDIOL("It contains other inappropriate schedule 1-3,5 narcotics!","","$C(7),!") K X Q
"RTN","PSSDDUT2",117,0)
 I $E(X)=5,X[1!(X[2)!(X[3)!(X[4) D EN^DDIOL("It contains other inappropriate schedule 1-4 narcotics!","","$C(7),!") K X Q
"RTN","PSSDDUT2",118,0)
 ;
"RTN","PSSDDUT2",119,0)
 I X["E"!(X["U") D
"RTN","PSSDDUT2",120,0)
 .I X["E" D EN^DDIOL("Note: Adding E has no ePharmacy impact. Use the ePharmacy Billable fields.","","$C(7),!")
"RTN","PSSDDUT2",121,0)
 .I X["U" D EN^DDIOL("Note: Adding U has no ePharmacy impact. Use the Sensitive Diagnosis Drug field.","","$C(7),!")
"RTN","PSSDDUT2",122,0)
 .Q
"RTN","PSSDDUT2",123,0)
 ;
"RTN","PSSDDUT2",124,0)
 Q
"RTN","PSSDDUT2",125,0)
 ;
"RTN","PSSDDUT2",126,0)
WRITE ;Calls EN^DDIOL to write text
"RTN","PSSDDUT2",127,0)
 D EN^DDIOL(.PSSHLP) K PSSHLP
"RTN","PSSDDUT2",128,0)
 Q
"RTN","PSSDDUT2",129,0)
 ;
"RTN","PSSDDUT2",130,0)
PKIND I +$P($G(^PSDRUG(DA,"ND")),"^",3) S PSSK=$P(^("ND"),"^",3) D
"RTN","PSSDDUT2",131,0)
 .S PSSK=$$GET1^DIQ(50.68,PSSK,19,"I") I PSSK S PSSK=$$CSDEA^PSSDDUT2(PSSK) D
"RTN","PSSDDUT2",132,0)
 ..I $L(PSSK)=1,$P(^PSDRUG(DA,0),"^",3)[PSSK Q
"RTN","PSSDDUT2",133,0)
 ..I $P(^PSDRUG(DA,0),"^",3)[$E(PSSK),$P(^PSDRUG(DA,0),"^",3)[$E(PSSK,2) Q
"RTN","PSSDDUT2",134,0)
 ..W !!,"The CS Federal Schedule associated with this drug in the VA Product file"
"RTN","PSSDDUT2",135,0)
 ..W !,"represents a DEA, Special Handling code of "_PSSK
"RTN","PSSDDUT2",136,0)
 Q
"RTN","PSSDDUT2",137,0)
 ;
"RTN","PSSDDUT2",138,0)
CSDEA(CS) ;
"RTN","PSSDDUT2",139,0)
 Q:'CS ""
"RTN","PSSDDUT2",140,0)
 Q $S(CS?1(1"2n",1"3n"):+CS_"C",+CS=2!(+CS=3)&(CS'["C"):+CS_"A",1:CS)
"RTN","PSSDDUT2",141,0)
 ;
"RTN","PSSDDUT2",142,0)
CLOZ ;DEL node of DRUG file 50, fields 17.2, 17.3, 17.4
"RTN","PSSDDUT2",143,0)
 S PSSHLP(1)="To delete this field use the Unmark Clozapine Drug option in the"
"RTN","PSSDDUT2",144,0)
 S PSSHLP(2)="Clozapine Pharmacy Manager menu."
"RTN","PSSDDUT2",145,0)
 D WRITE
"RTN","PSSDDUT2",146,0)
 Q
"RTN","PSSDDUT2",147,0)
 ;
"RTN","PSSDDUT2",148,0)
NONF ;Non-Formulary Input Transform DRUG file 50, field 51
"RTN","PSSDDUT2",149,0)
 S PSSHLP(1)="This drug cannot be marked as a non-formulary item because it is"
"RTN","PSSDDUT2",150,0)
 S PSSHLP(2)="designated as a formulary alternative for the following drugs."
"RTN","PSSDDUT2",151,0)
 S PSSHLP(3)=" ",PSSHLP(1,"F")="!!"
"RTN","PSSDDUT2",152,0)
 D WRITE
"RTN","PSSDDUT2",153,0)
 F MM=0:0 S MM=$O(^PSDRUG("AFA",DA,MM)) Q:'MM  S SHEMP=$P(^PSDRUG(MM,0),"^") D EN^DDIOL(SHEMP,"","!?3")
"RTN","PSSDDUT2",154,0)
 S X=""
"RTN","PSSDDUT2",155,0)
 Q
"RTN","PSSDDUT2",156,0)
 ;
"RTN","PSSDDUT2",157,0)
ATC ;Executable help for field 212.2, DRUG file 50
"RTN","PSSDDUT2",158,0)
 S PSSHLP(1)="The mnemonic entered here must match the mnemonic entered into the"
"RTN","PSSDDUT2",159,0)
 S PSSHLP(2)="ATC for this drug EXACTLY, and cannot be numbers only."
"RTN","PSSDDUT2",160,0)
 D WRITE
"RTN","PSSDDUT2",161,0)
 Q
"RTN","PSSDDUT2",162,0)
 ;
"RTN","PSSDDUT2",163,0)
ADTM ;ADMINISTRATION SCHEDULE file 51.1, field 1 Executable Help
"RTN","PSSDDUT2",164,0)
 S PSSHLP(1)="All times must be the same length (2 or 4 characters), must be"
"RTN","PSSDDUT2",165,0)
 S PSSHLP(2)="separated by dashes ('-'), and be in ascending order"
"RTN","PSSDDUT2",166,0)
 S PSSHLP(3)=""
"RTN","PSSDDUT2",167,0)
 S PSSHLP(4)="This is the set of administration times for this Schedule."
"RTN","PSSDDUT2",168,0)
 S PSSHLP(5)=""
"RTN","PSSDDUT2",169,0)
 S PSSHLP(6)="If the Schedule Type is CONTINUOUS the number of administration"
"RTN","PSSDDUT2",170,0)
 S PSSHLP(7)="times cannot conflict with the frequency of the schedule.  For"
"RTN","PSSDDUT2",171,0)
 S PSSHLP(8)="example, a schedule frequency of 720 minutes must have two"
"RTN","PSSDDUT2",172,0)
 S PSSHLP(9)="administration times and a schedule frequency of 360 must have a"
"RTN","PSSDDUT2",173,0)
 S PSSHLP(10)="four administration times."
"RTN","PSSDDUT2",174,0)
 S PSSHLP(11)=""
"RTN","PSSDDUT2",175,0)
 S PSSHLP(12)="If the Schedule Type is CONTINUOUS and is an Odd Schedule (A"
"RTN","PSSDDUT2",176,0)
 S PSSHLP(13)="schedule whose frequency is not evenly divisible by or into"
"RTN","PSSDDUT2",177,0)
 S PSSHLP(14)="1440 minutes or 1 day). Administration Times are not allowed."
"RTN","PSSDDUT2",178,0)
 S PSSHLP(15)="For example Q5H, Q17H - these are not evenly divisible by 1440."
"RTN","PSSDDUT2",179,0)
 S PSSHLP(16)=""
"RTN","PSSDDUT2",180,0)
 S PSSHLP(17)="If the Schedule Type is CONTINUOUS with a non-odd frequency of"
"RTN","PSSDDUT2",181,0)
 S PSSHLP(18)="greater than of 1 day (1440 minutes) then more than one"
"RTN","PSSDDUT2",182,0)
 S PSSHLP(19)="administration time is not allowed.  For example schedules of"
"RTN","PSSDDUT2",183,0)
 S PSSHLP(20)="Q72H, Q3Day, and Q5Day."
"RTN","PSSDDUT2",184,0)
 D WRITE
"RTN","PSSDDUT2",185,0)
 Q
"RTN","PSSDDUT2",186,0)
 ;
"RTN","PSSDDUT2",187,0)
LBLS ;PHARMACY SYSTEM file 59.7, field 61.2 Executable Help
"RTN","PSSDDUT2",188,0)
 S PSSHLP(1)="ANY NEW LABELS OLDER THAN THE NUMBER OF DAYS SPECIFIED HERE WILL"
"RTN","PSSDDUT2",189,0)
 S PSSHLP(2)="AUTOMATICALLY BE PURGED."
"RTN","PSSDDUT2",190,0)
 D WRITE
"RTN","PSSDDUT2",191,0)
 Q
"RTN","PSSDDUT2",192,0)
NFH I '$D(DA(1)) D EN^DDIOL(" (This non-formulary item is "_$P(^PSDRUG($S($D(DA(1)):DA(1),1:DA),0),"^")_".)")
"RTN","PSSDDUT2",193,0)
 Q
"RTN","PSSDDUT2",194,0)
STRTH S STR=" "_$P(X," ",2),PSSHLP(1)=STR,PSSHLP(1,"F")="" D WRITE K STR
"RTN","PSSDDUT2",195,0)
 Q
"RTN","PSSDDUT2",196,0)
PSYS1 D EN^DDIOL("(""From"" ward is "_$S('$D(^PS(59.7,D0,22,D1,0)):"UNKNOWN",'$D(^DIC(42,+^(0),0)):"UNKNOWN",$P(^(0),"^")]"":$P(^(0),"^"),1:"UNKNOWN")_")","","!?3")
"RTN","PSSDDUT2",197,0)
 Q
"RTN","PSSDDUT2",198,0)
PSYS2 ;PSS*1.0*95
"RTN","PSSDDUT2",199,0)
 D EN^DDIOL("(""From"" service is "_$S('$D(^PS(59.7,D0,23,D1,0)):"UNKNOWN",$P(^(0),"^")]"":$P($P(";"_$P(^DD(59.723,.01,0),"^",3),";"_$P(^PS(59.7,D0,23,D1,0),"^")_":",2),";"),1:"UNKNOWN")_")")
"RTN","PSSDDUT2",200,0)
 Q
"RTN","PSSDDUT2",201,0)
 ;
"RTN","PSSDDUT2",202,0)
NCINIT ;
"RTN","PSSDDUT2",203,0)
 K PSSNQM,PSSNQM2,PSSNQM3,PSSONDU,PSSONQM
"RTN","PSSDDUT2",204,0)
NCINIT1 ;
"RTN","PSSDDUT2",205,0)
 I $P($G(^PSDRUG(DA,"EPH")),"^",2)="" S $P(^PSDRUG(DA,"EPH"),"^",2)="EA",$P(^PSDRUG(DA,"EPH"),"^",3)=1 D
"RTN","PSSDDUT2",206,0)
 . S PSSHLP(1)="  Note:     Defaulting the NCPDP DISPENSE UNIT to EACH and the"
"RTN","PSSDDUT2",207,0)
 . S PSSHLP(2)="            NCPDP QUANTITY MULTIPLIER to 1 (one)." S PSSHLP(1,"F")="!!"
"RTN","PSSDDUT2",208,0)
 . D WRITE S PSSHLP(2,"F")="!" D WRITE
"RTN","PSSDDUT2",209,0)
 S PSSONDU=$P(^PSDRUG(DA,"EPH"),"^",2),PSSONQM=$P(^PSDRUG(DA,"EPH"),"^",3)
"RTN","PSSDDUT2",210,0)
 Q
"RTN","PSSDDUT2",211,0)
 ;
"RTN","PSSDDUT2",212,0)
NCPDPDU ;Drug file 50, field 82
"RTN","PSSDDUT2",213,0)
 S:X="" X="EA"
"RTN","PSSDDUT2",214,0)
 D NCINIT1:'$D(PSSONDU)
"RTN","PSSDDUT2",215,0)
 I $G(PSSONDU)'=X&($G(PSSONQM)'=1) D
"RTN","PSSDDUT2",216,0)
 . S PSSHLP(1)="Defaulting the NCPDP QUANTITY MULTIPLIER to 1 (one)." S PSSHLP(1,"F")="!!" D WRITE
"RTN","PSSDDUT2",217,0)
 . S $P(^PSDRUG(DA,"EPH"),"^",3)=1,PSSONDU=$P(^PSDRUG(DA,"EPH"),"^",2),PSSONQM=$P(^PSDRUG(DA,"EPH"),"^",3)
"RTN","PSSDDUT2",218,0)
 Q
"RTN","PSSDDUT2",219,0)
 ;
"RTN","PSSDDUT2",220,0)
NCPDPQM ;Drug file 50, field 83
"RTN","PSSDDUT2",221,0)
 N ZXX S PSSNQM=0,(PSSNQM2,PSSNQM3)=""
"RTN","PSSDDUT2",222,0)
 I $G(X)<.00001 K X S PSSNQM3=1 Q
"RTN","PSSDDUT2",223,0)
 S:$G(X)="" X=1
"RTN","PSSDDUT2",224,0)
 I +$G(X)'=1 D NCPDPWRN D
"RTN","PSSDDUT2",225,0)
NCPDPQM1 . ;
"RTN","PSSDDUT2",226,0)
 . R !,"Ok to continue? (Y/N) ",ZXX:30 S ZXX=$TR(ZXX,"yn","YN")
"RTN","PSSDDUT2",227,0)
 . I ZXX="^" S X=1 W !!?5,"Warning:  Defaulting NCPDP QUANTITY MULTIPLIER to 1 (one).",!! Q
"RTN","PSSDDUT2",228,0)
 . I ZXX'="Y"&(ZXX'="N") W !,"Y or N must be entered." G NCPDPQM1
"RTN","PSSDDUT2",229,0)
 . I ZXX'="Y"&(ZXX'="y") S PSSNQM=1,PSSNQM2=X K X
"RTN","PSSDDUT2",230,0)
 Q
"RTN","PSSDDUT2",231,0)
 ;
"RTN","PSSDDUT2",232,0)
NCPDPWRN ;Message called from NCPDPQM
"RTN","PSSDDUT2",233,0)
 S PSSHLP(2)="WARNING:    For most drug products, the value for this field should be 1 (one)."
"RTN","PSSDDUT2",234,0)
 S PSSHLP(3)="            Answering NO for the following prompt will display more information"
"RTN","PSSDDUT2",235,0)
 S PSSHLP(4)="            on how this field is used."
"RTN","PSSDDUT2",236,0)
 S PSSHLP(2,"F")="!!" D WRITE
"RTN","PSSDDUT2",237,0)
 S PSSHLP(5,"F")="!" D WRITE
"RTN","PSSDDUT2",238,0)
 Q
"RTN","PSSDDUT2",239,0)
 ;
"RTN","PSSDDUT2",240,0)
MXDAYSUP ; INPUT TRANSFORM for Drug file (#50), MAXIMUM DAYS SUPPLY Field (#66)
"RTN","PSSDDUT2",241,0)
 ; Input: X  - Maximum Days Supply Entered by user
"RTN","PSSDDUT2",242,0)
 ;        DA - DRUG file (#50) IEN
"RTN","PSSDDUT2",243,0)
 Q:'$D(^PSDRUG(+$G(DA),0))
"RTN","PSSDDUT2",244,0)
 S X=+$G(X)
"RTN","PSSDDUT2",245,0)
 ; - DAY SUPPLY must be between 1 and 365 (inclusive)
"RTN","PSSDDUT2",246,0)
 I (X<1)!(X>365) D  Q
"RTN","PSSDDUT2",247,0)
 . D EN^DDIOL("Type a number between 1 and 365, 0 decimal digits.","","!!") K X W !
"RTN","PSSDDUT2",248,0)
 ;
"RTN","PSSDDUT2",249,0)
 ; - Checking against NDF Maximum
"RTN","PSSDDUT2",250,0)
 N VAPRDIEN S VAPRDIEN=+$$GET1^DIQ(50,DA,22,"I")
"RTN","PSSDDUT2",251,0)
 I VAPRDIEN D  I '$D(X) Q
"RTN","PSSDDUT2",252,0)
 . N NDFMAXDS
"RTN","PSSDDUT2",253,0)
 . S NDFMAXDS=$$GET1^DIQ(50.68,VAPRDIEN,32)
"RTN","PSSDDUT2",254,0)
 . I NDFMAXDS,NDFMAXDS<X D
"RTN","PSSDDUT2",255,0)
 . . D EN^DDIOL("Cannot be greater than NDF Maximum Days Supply: "_NDFMAXDS,"","!!") K X W !
"RTN","PSSDDUT2",256,0)
 ;
"RTN","PSSDDUT2",257,0)
 ; - Controlled Substances have different upper limits (not 365)
"RTN","PSSDDUT2",258,0)
 N DEASPHLG S DEASPHLG=$$GET1^DIQ(50,DA,3)
"RTN","PSSDDUT2",259,0)
 I DEASPHLG["2",X>30 D  Q
"RTN","PSSDDUT2",260,0)
 . D EN^DDIOL("Schedule 2 controlled substances have a maximum days supply limit of 30 days","","!!") K X W !
"RTN","PSSDDUT2",261,0)
 I (DEASPHLG["3")!(DEASPHLG["4")!(DEASPHLG["5"),X>90 D  Q
"RTN","PSSDDUT2",262,0)
 . D EN^DDIOL("Schedule 3-5 controlled substances have a maximum days supply limit of 90 days","","!!") K X W !
"RTN","PSSDDUT2",263,0)
 ;
"RTN","PSSDDUT2",264,0)
 ; - Clozapine Drug (Not controlled by this field)
"RTN","PSSDDUT2",265,0)
 I ($P($G(^PSDRUG(DA,"CLOZ1")),"^")="PSOCLO1") D  Q
"RTN","PSSDDUT2",266,0)
 . D EN^DDIOL("Maximum Days Supply for this drug is controlled by the Clozapine functionality","","!!") K X W !
"RTN","PSSDDUT2",267,0)
 ;
"RTN","PSSDDUT2",268,0)
 I X<$$MXDAYSUP^PSSUTIL1(DA) D
"RTN","PSSDDUT2",269,0)
 . W ! D EN^DDIOL("Note: Decreasing the MAXIMUM DAYS SUPPLY field will only affect new","","!")
"RTN","PSSDDUT2",270,0)
 . D EN^DDIOL("      prescriptions, including renewals and copies. Orders that are pending","","!")
"RTN","PSSDDUT2",271,0)
 . D EN^DDIOL("      or unreleased when the MAXIMUM DAYS SUPPLY field is decreased are not","","!")
"RTN","PSSDDUT2",272,0)
 . D EN^DDIOL("      affected by the decrease, so prescriptions with a DAYS SUPPLY above the","","!")
"RTN","PSSDDUT2",273,0)
 . D EN^DDIOL("      new MAXIMUM DAYS SUPPLY may need to be edited manually before they are","","!")
"RTN","PSSDDUT2",274,0)
 . D EN^DDIOL("      finished or released.","","!")
"RTN","PSSDDUT2",275,0)
 . W ! N DIR,X,Y S DIR(0)="E",DIR("A")="Press Return to continue" D ^DIR
"RTN","PSSDDUT2",276,0)
 Q
"RTN","PSSDDUT2",277,0)
 ;
"RTN","PSSDDUT2",278,0)
IVSOLVOL ; IV Solution VOLUME field INPUT TRANSFORM
"RTN","PSSDDUT2",279,0)
 N OI
"RTN","PSSDDUT2",280,0)
 I X[""""!($A(X)=45)!(X'?.N0.1".".N)!(X>9999)!(X<.01) K X Q
"RTN","PSSDDUT2",281,0)
 I $$GET1^DIQ(52.7,DA,17,"I") S OI=+$$GET1^DIQ(52.7,DA,9,"I") I $$CKDUPSOL(OI,DA,+X,1) K X Q
"RTN","PSSDDUT2",282,0)
 S X=X_" ML" D EN^DDIOL(" ML","","?0")
"RTN","PSSDDUT2",283,0)
 Q
"RTN","PSSDDUT2",284,0)
 ;
"RTN","PSSDDUT2",285,0)
UIVFOE ; USED IN THE IV FLUID ORDER ENTRY field INPUT TRANSFORM
"RTN","PSSDDUT2",286,0)
 I X D
"RTN","PSSDDUT2",287,0)
 . N OI
"RTN","PSSDDUT2",288,0)
 . S OI=$$GET1^DIQ(52.7,DA,9,"I") I $$CKDUPSOL(OI,DA,+$$GET1^DIQ(52.7,DA,2),1) K X
"RTN","PSSDDUT2",289,0)
 Q
"RTN","PSSDDUT2",290,0)
 ;
"RTN","PSSDDUT2",291,0)
CKDUPSOL(OI,IVSOL,IVVOL,DSPMSG) ; Check if there's an ACTIVE Duplicate IV Solution Marked to be Used in the IV Order Dialog
"RTN","PSSDDUT2",292,0)
 ; Input: OI     - PHARMACY ORDERABLE ITEM (#50.7) Pointer
"RTN","PSSDDUT2",293,0)
 ;        IVSOL  - IV SOLUTIONS (#52.7) Pointer
"RTN","PSSDDUT2",294,0)
 ;        IVVOL  - IV Solution Volume
"RTN","PSSDDUT2",295,0)
 ;        DSPMSG - Display Message? (1:Yes/0:No)
"RTN","PSSDDUT2",296,0)
 ;Output: DUPSOL - Duplicate IV Solution IEN
"RTN","PSSDDUT2",297,0)
 N DUPSOL,OTHSOL,OTHVOL,DRUG
"RTN","PSSDDUT2",298,0)
 S (DUPSOL,OTHSOL)=0
"RTN","PSSDDUT2",299,0)
 ;
"RTN","PSSDDUT2",300,0)
 ; Invalid IV Solution
"RTN","PSSDDUT2",301,0)
 I '$D(^PS(52.7,+$G(IVSOL),0)) Q 0
"RTN","PSSDDUT2",302,0)
 ;
"RTN","PSSDDUT2",303,0)
 ; IV Solution is INACTIVE, no issues
"RTN","PSSDDUT2",304,0)
 I $$GET1^DIQ(52.7,IVSOL,8,"I"),$$GET1^DIQ(52.7,IVSOL,8,"I")'>DT Q 0
"RTN","PSSDDUT2",305,0)
 ;
"RTN","PSSDDUT2",306,0)
 ; Dispense Drug might not be matched to an Orderable Item yet
"RTN","PSSDDUT2",307,0)
 S DRUG=+$$GET1^DIQ(52.7,IVSOL,1,"I")
"RTN","PSSDDUT2",308,0)
 ;
"RTN","PSSDDUT2",309,0)
 I +$G(OI) D
"RTN","PSSDDUT2",310,0)
 . F  S OTHSOL=$O(^PS(52.7,"AOI",OI,OTHSOL)) Q:'OTHSOL!DUPSOL  D
"RTN","PSSDDUT2",311,0)
 . . I $$DUPVOL(IVSOL,OTHSOL) S DUPSOL=OTHSOL
"RTN","PSSDDUT2",312,0)
 E  D
"RTN","PSSDDUT2",313,0)
 . F  S OTHSOL=$O(^PS(52.7,"AC",DRUG,OTHSOL)) Q:'OTHSOL!DUPSOL  D
"RTN","PSSDDUT2",314,0)
 . . I $$DUPVOL(IVSOL,OTHSOL) S DUPSOL=OTHSOL
"RTN","PSSDDUT2",315,0)
 I $G(DSPMSG),DUPSOL D
"RTN","PSSDDUT2",316,0)
 . W !!,"The following IV Solution with the same volume is already linked to"
"RTN","PSSDDUT2",317,0)
 . W:$G(OI) !,"the Orderable Item ",$$GET1^DIQ(50.7,OI,.01)
"RTN","PSSDDUT2",318,0)
 . W:'$G(OI) !,"this dispense drug."
"RTN","PSSDDUT2",319,0)
 . W !
"RTN","PSSDDUT2",320,0)
 . W:$G(OI) !,"Dispense Drug: ",$$GET1^DIQ(52.7,DUPSOL,1)
"RTN","PSSDDUT2",321,0)
 . W !,"  IV Solution: ",$$GET1^DIQ(52.7,DUPSOL,.01)
"RTN","PSSDDUT2",322,0)
 . W !
"RTN","PSSDDUT2",323,0)
 . W !,"Only one Active IV Solution with a specific volume can be linked to an"
"RTN","PSSDDUT2",324,0)
 . W !,"Orderable Item or Dispense Drug when the IV Solution is marked to be used"
"RTN","PSSDDUT2",325,0)
 . W !,"in the CPRS IV Fluid Order Entry."
"RTN","PSSDDUT2",326,0)
 . W !,$C(7)
"RTN","PSSDDUT2",327,0)
 Q DUPSOL
"RTN","PSSDDUT2",328,0)
 ;
"RTN","PSSDDUT2",329,0)
DUPVOL(IVSOL1,IVSOL2) ; Check 2 IV Solutions to see if they have Duplicate Volumes
"RTN","PSSDDUT2",330,0)
 ; Cannot check against itself
"RTN","PSSDDUT2",331,0)
 I (IVSOL1=IVSOL2) Q 0
"RTN","PSSDDUT2",332,0)
 ; Not Used in the IV Order Dialog
"RTN","PSSDDUT2",333,0)
 I '$$GET1^DIQ(52.7,IVSOL2,17,"I") Q 0
"RTN","PSSDDUT2",334,0)
 ; Other IV Solution is INACTIVE
"RTN","PSSDDUT2",335,0)
 I $$GET1^DIQ(52.7,IVSOL2,8,"I"),$$GET1^DIQ(52.7,IVSOL2,8,"I")'>DT Q 0
"RTN","PSSDDUT2",336,0)
 ; IV Solution Volume
"RTN","PSSDDUT2",337,0)
 S OTHVOL=$$GET1^DIQ(52.7,IVSOL2,2)
"RTN","PSSDDUT2",338,0)
 ; IV Solutions have different volumes
"RTN","PSSDDUT2",339,0)
 I (+IVVOL'=+OTHVOL) Q 0
"RTN","PSSDDUT2",340,0)
 ; Capturing the Duplicate IV Solution IEN
"RTN","PSSDDUT2",341,0)
 Q 1
"RTN","PSSLOOK")
0^3^B89759845
"RTN","PSSLOOK",1,0)
PSSLOOK ;BIR/WRT-Drug file lookup ;02/03/00
"RTN","PSSLOOK",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**3,7,15,16,20,24,29,38,68,61,87,90,127,147,170,189,192**;9/30/97;Build 25
"RTN","PSSLOOK",3,0)
 ;
"RTN","PSSLOOK",4,0)
 ;Reference to ^PS(50.605 supported by DBIA #2138
"RTN","PSSLOOK",5,0)
 ;Reference to ^PS(50.608 supported by DBIA #2136
"RTN","PSSLOOK",6,0)
 ;Reference to ^PS(50.609 supported by DBIA #2137
"RTN","PSSLOOK",7,0)
 ;Reference to ^PS(50.607 supported by DBIA #2221
"RTN","PSSLOOK",8,0)
 ;Reference to $$FORMRX^PSNAPIS(DA,K,.LIST) supported by DBIA #2574
"RTN","PSSLOOK",9,0)
 ;Reference to $$FORMI^PSNAPIS(P1,P3) supported by DBIA #2574
"RTN","PSSLOOK",10,0)
 ;Reference to $$PSJDF^PSNAPIS(P1,P3) supported by DBIA #2531
"RTN","PSSLOOK",11,0)
 ;Reference to $$PSJST^PSNAPIS(P1,P3) supported by DBIA #2531
"RTN","PSSLOOK",12,0)
 ;Reference to $$PROD2^PSNAPIS(P1,P3) supported by DBIA #2531
"RTN","PSSLOOK",13,0)
 ;Reference to $$VAGN^PSNAPIS(P1) supported by DBIA #2531
"RTN","PSSLOOK",14,0)
 ;Reference to ^PSNDF(50.68 supported by DBIA 3735
"RTN","PSSLOOK",15,0)
 ;
"RTN","PSSLOOK",16,0)
START S QUIT=0,PSSFG=0 D KILL F PSSXX=1:1 D PICK Q:PSSFG
"RTN","PSSLOOK",17,0)
DONE D KILL K PSSFG,PSSXX,QUIT,FM,FMS,Y2K
"RTN","PSSLOOK",18,0)
 Q
"RTN","PSSLOOK",19,0)
PICK W ! K DIC S DIC="^PSDRUG(",DIC(0)="AEQMVTN",DIC("T")="" D ^DIC K DIC I Y<0 S PSSFG=1 Q
"RTN","PSSLOOK",20,0)
 S IFN=+Y D NDDATA,GETDATA,INACT,NOD66,FORMAT,KILL
"RTN","PSSLOOK",21,0)
 Q
"RTN","PSSLOOK",22,0)
NDDATA I $D(^PSDRUG(IFN,"ND")) S CLPTR=$P(^PSDRUG(IFN,"ND"),"^",6) I $P(^PSDRUG(IFN,"ND"),"^",2)]"" S NDNODE=^PSDRUG(IFN,"ND"),VAGNPTR=$P(NDNODE,"^",1),VAPN=$P(NDNODE,"^",2),SZPTR=$P(NDNODE,"^",4),TYPTR=$P(NDNODE,"^",5) D NDF,NDF1
"RTN","PSSLOOK",23,0)
 Q
"RTN","PSSLOOK",24,0)
NDF S DA=VAGNPTR,X=$$VAGN^PSNAPIS(DA),VAGN=X,PS=$P(^PS(50.609,SZPTR,0),"^",1),PT=$P(^PS(50.608,TYPTR,0),"^",1),P3=$P(NDNODE,"^",3)
"RTN","PSSLOOK",25,0)
 K X S DA=VAGNPTR,K=P3,X=$$PROD2^PSNAPIS(DA,K) I X]"",$P(X,"^")]"" S VAPRN=$P(X,"^"),VADU=$P(X,"^",4),CMOPID=$P(X,"^",2)
"RTN","PSSLOOK",26,0)
 S CSF="" I $P(NDNODE,"^",3) S CSF=$$GET1^DIQ(50.68,$P(NDNODE,"^",3),19,"I")
"RTN","PSSLOOK",27,0)
 Q
"RTN","PSSLOOK",28,0)
IT S CMOPID=$P(X,"^",2)
"RTN","PSSLOOK",29,0)
 Q
"RTN","PSSLOOK",30,0)
NDF1 S X=$$PSJDF^PSNAPIS(DA,K),VADF=$P(X,"^",2)
"RTN","PSSLOOK",31,0)
 Q
"RTN","PSSLOOK",32,0)
INACT S ACT="" I $D(^PSDRUG(IFN,"I")) S Y=$P(^PSDRUG(IFN,"I"),"^",1) X ^DD("DD") S ACT=Y
"RTN","PSSLOOK",33,0)
 Q
"RTN","PSSLOOK",34,0)
GETDATA S NODE0=^PSDRUG(IFN,0),GN=$P(NODE0,"^",1),CL=$P(NODE0,"^",2),DEA=$P(NODE0,"^",3),WRN=$P(NODE0,"^",8),NF=$P(NODE0,"^",9),MESS=$P(NODE0,"^",10),VNF=$P(NODE0,"^",11),CLASS="",WARN="" S:NF=1 NF="N/F" S:VNF=1 VNF="V-N/F"
"RTN","PSSLOOK",35,0)
 S PSSNODE=$G(^PSDRUG(IFN,"DOS"))
"RTN","PSSLOOK",36,0)
 I CL]"" S CLASS=CL_"  "_$P(^PS(50.605,CLPTR,0),"^",2)
"RTN","PSSLOOK",37,0)
 I $D(^PSDRUG(IFN,3)) S:$P(^PSDRUG(IFN,3),"^")=0 CMOP="NO" S:$P(^PSDRUG(IFN,3),"^")=1 CMOP="YES"
"RTN","PSSLOOK",38,0)
 I $D(^PSDRUG(IFN,5)) S QDM=^PSDRUG(IFN,5)
"RTN","PSSLOOK",39,0)
 S OINM="" S NDC="" I $D(^PSDRUG(IFN,2)) S NODE2=^PSDRUG(IFN,2) S:$P(NODE2,"^",1)]"" OIPTR=$P(NODE2,"^",1) S NDC=$P(NODE2,"^",4) S:$P(NODE2,"^",6)]"" PDPTR=$P(NODE2,"^",6) S APP=$P(NODE2,"^",3),FM="" D TWOA
"RTN","PSSLOOK",40,0)
 Q
"RTN","PSSLOOK",41,0)
TWOA I $D(OIPTR) S OI=$P(^PS(50.7,OIPTR,0),"^",1),DFPTR=$P(^PS(50.7,OIPTR,0),"^",2),DF=$P(^PS(50.606,DFPTR,0),"^",1),FMS=$P(^PS(50.7,OIPTR,0),"^",12) S:FMS]"" FM=" (N/F)" S OINM=OI_" "_DF_FM
"RTN","PSSLOOK",42,0)
 ;I $D(PDPTR) S PD=$P(^PS(50.3,PDPTR,0),"^",1)
"RTN","PSSLOOK",43,0)
 Q
"RTN","PSSLOOK",44,0)
NOD66 S (DUPOU,PPDU,PPOU,DU,SS)="" I $D(^PSDRUG(IFN,660)) S NDE=^PSDRUG(IFN,660),OUPTR=$P(NDE,"^",2),PPOU=$P(NDE,"^",3),DUPOU=$P(NDE,"^",5),PPDU=$P(NDE,"^",6),SS=$P(NDE,"^",7),DU=$P(NDE,"^",8) I OUPTR]"" S OU=$P(^DIC(51.5,OUPTR,0),"^")
"RTN","PSSLOOK",45,0)
 Q
"RTN","PSSLOOK",46,0)
SYN I $D(^PSDRUG(IFN,1,0)) F ZZZ=0:0 S ZZZ=$O(^PSDRUG(IFN,1,ZZZ)) Q:'ZZZ  S SYNM=$P(^PSDRUG(IFN,1,ZZZ,0),"^",1),INT=$P(^PSDRUG(IFN,1,ZZZ,0),"^",3) D SYN1
"RTN","PSSLOOK",47,0)
 Q
"RTN","PSSLOOK",48,0)
SYN1 S INT=$S(INT=0:"Trade Name",INT=1:"Quick Code",INT="C":"Ctrl Substances",INT="D":"Drug Accountability",1:"") D FULL Q:$G(QUIT)  W ?14,SYNM,?55,INT,!
"RTN","PSSLOOK",49,0)
 Q
"RTN","PSSLOOK",50,0)
SYN2 S:INT=0 INT="Trade" S:INT=1 INT="Quick" S:INT="C" INT="Ctrl Subs" S:INT="D" INT="Drug Acct" W ?16,SYNM,?57,INT,!
"RTN","PSSLOOK",51,0)
 Q
"RTN","PSSLOOK",52,0)
IFCAP I $D(^PSDRUG(IFN,441,0)) F QQQ=0:0 S QQQ=$O(^PSDRUG(IFN,441,QQQ)) Q:'QQQ  S IFCAPNM=$P(^PSDRUG(IFN,441,QQQ,0),"^",1)
"RTN","PSSLOOK",53,0)
 Q
"RTN","PSSLOOK",54,0)
FORMAT ; BEGIN WRITING
"RTN","PSSLOOK",55,0)
 N DAW
"RTN","PSSLOOK",56,0)
 W @IOF,"DRUG NAME: ",GN,"  (IEN: ",IFN,")",!
"RTN","PSSLOOK",57,0)
 F XX=1:1:77 W "="
"RTN","PSSLOOK",58,0)
 W !
"RTN","PSSLOOK",59,0)
 W:$D(VAPRN) "VA PRINT NAME: ",?17,VAPRN W:$D(CMOPID) ?60,"CMOP ID#: ",CMOPID W:$D(VAPN) !,"VA PRODUCT NAME: ",?17,VAPN W:$D(CMOP) ?60,"CMOP DISPENSE: ",CMOP
"RTN","PSSLOOK",60,0)
 W:$D(OINM) !,"ORDERABLE ITEM: ",?17,OINM W:$D(VAPN) ?60,"NDF DF: ",VADF
"RTN","PSSLOOK",61,0)
 I $D(OIPTR),OIPTR]"" W !,"ORDERABLE ITEM TEXT: ",! D OITXT
"RTN","PSSLOOK",62,0)
 W:$D(PD) !,"PRIMARY DRUG: ",?17,PD
"RTN","PSSLOOK",63,0)
 W !,"SYNONYM(S): " D SYN D FULL Q:$G(QUIT)  W !,"MESSAGE: ",MESS,!
"RTN","PSSLOOK",64,0)
 D FULL Q:$G(QUIT)  F XX=1:1:77 W "-"
"RTN","PSSLOOK",65,0)
 W !
"RTN","PSSLOOK",66,0)
 D FULL Q:$G(QUIT)  W "DEA, SPECIAL HDLG: ",DEA,?48,"NDC: ",?63,NDC
"RTN","PSSLOOK",67,0)
 S DAW=+$$GET1^DIQ(50,IFN,81)
"RTN","PSSLOOK",68,0)
 D FULL Q:$G(QUIT)  W !,"DAW CODE:  ",DAW," - ",$$DAWEXT^PSSDAWUT(DAW)
"RTN","PSSLOOK",69,0)
 D FULL Q:$G(QUIT)  W !,"CS FEDERAL SCHEDULE: ",$G(CSF)
"RTN","PSSLOOK",70,0)
 D FULL Q:$G(QUIT)  W !,"INACTIVE DATE: ",ACT
"RTN","PSSLOOK",71,0)
 D FULL Q:$G(QUIT)  W:$D(QDM) !,"QUANTITY DISPENSE MESSAGE: ",QDM,!
"RTN","PSSLOOK",72,0)
 D FULL Q:$G(QUIT)  I WRN]"" W !,"WARNING LABEL: " S X=WRN F Z0=1:1 Q:$P(X,",",Z0,99)=""  S Z1=$P(X,",",Z0) W:$D(^PS(54,Z1,0)) ?19,$P(^(0),"^",1),! I '$D(^(0)) W ?19,"NO SUCH WARNING LABEL" K X Q
"RTN","PSSLOOK",73,0)
 D FULL Q:$G(QUIT)  S PSSLOOK=1 D
"RTN","PSSLOOK",74,0)
 .N DRUG
"RTN","PSSLOOK",75,0)
 .I $P($G(^PSDRUG(IFN,0)),"^")="" K PSSLOOK Q
"RTN","PSSLOOK",76,0)
 .S PSSWSITE=+$O(^PS(59.7,0)) W !,"WARNING LABEL SOURCE is " D
"RTN","PSSLOOK",77,0)
 ..I $P($G(^PS(59.7,PSSWSITE,10)),"^",9)="N" W "set to 'NEW'" Q
"RTN","PSSLOOK",78,0)
 ..W "not set to 'NEW'"
"RTN","PSSLOOK",79,0)
 .K PSSWRN
"RTN","PSSLOOK",80,0)
 .D FULL Q:$G(QUIT)  W !,"NEW WARNING LABEL:"
"RTN","PSSLOOK",81,0)
 .S ^TMP("PSSWRNB",$J,$P(^PSDRUG(IFN,0),"^"))="" D ^PSSWRNE
"RTN","PSSLOOK",82,0)
 .K PSSLOOK,^TMP("PSSWRNB",$J),PSSWRN
"RTN","PSSLOOK",83,0)
 D FULL Q:$G(QUIT)  W:'$D(QDM) ! F XX=1:1:77 W "-"
"RTN","PSSLOOK",84,0)
 D FULL Q:$G(QUIT)  W !
"RTN","PSSLOOK",85,0)
 W "ORDER UNIT: ",?27 W:$D(OU) OU W ?40,"PRICE/ORDER UNIT: ",?67,PPOU
"RTN","PSSLOOK",86,0)
 D FULL Q:$G(QUIT)  W !,"DISPENSE UNIT: ",?27,DU W:$D(VADU) ?40,"VA DISPENSE UNIT: ",?67,VADU
"RTN","PSSLOOK",87,0)
 D FULL Q:$G(QUIT)  W !,"DISPENSE UNITS/ORDER UNIT: ",?21,DUPOU,?40,"PRICE/DISPENSE UNIT: ",?67,PPDU
"RTN","PSSLOOK",88,0)
 D FULL Q:$G(QUIT)  W !,"NCPDP DISPENSE UNIT: ",$$GET1^DIQ(50,IFN,82),?40,"NCPDP QUANTITY MULTIPLIER: ",?67,$J($$GET1^DIQ(50,IFN,83),8,3)
"RTN","PSSLOOK",89,0)
 D FULL Q:$G(QUIT)  W !,"MAXIMUM DAYS SUPPLY: ",$$GET1^DIQ(50,IFN,66)
"RTN","PSSLOOK",90,0)
 D FULL Q:$G(QUIT)  W !,"ePharmacy Billable: ",$$GET1^DIQ(50,IFN,84)
"RTN","PSSLOOK",91,0)
 D FULL Q:$G(QUIT)  W !?2,"ePharmacy Billable (TRICARE): ",$$GET1^DIQ(50,IFN,85) W ?40,"ePharmacy Billable (CHAMPVA): ",$$GET1^DIQ(50,IFN,86)
"RTN","PSSLOOK",92,0)
 D FULL Q:$G(QUIT)  W !,"Sensitive Diagnosis Drug: ",$$GET1^DIQ(50,IFN,87) W !
"RTN","PSSLOOK",93,0)
 D FULL Q:$G(QUIT)  W !,"APPL PKG USE:" S APPL="" S:'$D(APP) APPL="  NONE"
"RTN","PSSLOOK",94,0)
 I $D(APP) D
"RTN","PSSLOOK",95,0)
 . S:APP["O" APPL=APPL_"  Outpatient" S:APP["U" APPL=APPL_"  Unit Dose"
"RTN","PSSLOOK",96,0)
 . S:APP["I" APPL=APPL_"  IV" S:APP["W" APPL=APPL_"  Ward Stock"
"RTN","PSSLOOK",97,0)
 . S:APP["N" APPL=APPL_"  Control Subs" S:APP["X" APPL=APPL_"  Non-VA Med"
"RTN","PSSLOOK",98,0)
 . S:APPL="" APPL="  NONE"
"RTN","PSSLOOK",99,0)
 W ?13,APPL
"RTN","PSSLOOK",100,0)
 I $P(PSSNODE,"^",2) S (PSSCALC,PSSUNIT)=$P($G(^PS(50.607,+$P(PSSNODE,U,2),0)),U),PSSSTR=$P(PSSNODE,"^")
"RTN","PSSLOOK",101,0)
 I $G(PSSUNIT)'="",$G(PSSUNIT)["/" D UNCALC
"RTN","PSSLOOK",102,0)
 D FULL Q:$G(QUIT)  W !,"STRENGTH: ",$S($E($P(PSSNODE,U),1)=".":"0",1:"")_$P(PSSNODE,U),?35,"UNIT: ",$G(PSSCALC)
"RTN","PSSLOOK",103,0)
 D FULL Q:$G(QUIT)  W !,"POSSIBLE DOSAGES:"
"RTN","PSSLOOK",104,0)
 I $D(^PSDRUG(IFN,"DOS1",0)) F PDS=0:0 S PDS=$O(^PSDRUG(IFN,"DOS1",PDS)) Q:'PDS  D
"RTN","PSSLOOK",105,0)
 .S POSDOS=^PSDRUG(IFN,"DOS1",PDS,0)
"RTN","PSSLOOK",106,0)
 .D FULL Q:$G(QUIT)  W !,"   DISPENSE UNITS PER DOSE: ",$S($E($P(POSDOS,U),1)=".":"0",1:"")_$P(POSDOS,U),?40,"DOSE: ",$S($E($P(POSDOS,U,2),1)=".":"0",1:"")_$P(POSDOS,U,2),?55,"PACKAGE: ",$P(POSDOS,U,3)
"RTN","PSSLOOK",107,0)
 .D FULL Q:$G(QUIT)  W !,"       BCMA UNITS PER DOSE: ",$P(POSDOS,U,4)
"RTN","PSSLOOK",108,0)
 D FULL Q:$G(QUIT)  W !,"LOCAL POSSIBLE DOSAGES:"
"RTN","PSSLOOK",109,0)
 I $D(^PSDRUG(IFN,"DOS2",0)) F PDS=0:0 S PDS=$O(^PSDRUG(IFN,"DOS2",PDS)) Q:'PDS  D
"RTN","PSSLOOK",110,0)
 .S LPDOS=^PSDRUG(IFN,"DOS2",PDS,0)
"RTN","PSSLOOK",111,0)
 .D FULL Q:$G(QUIT)  W !,"   LOCAL POSSIBLE DOSAGE: " D
"RTN","PSSLOOK",112,0)
 ..I $L($P(LPDOS,U))'>27 W $P(LPDOS,U),?55,"PACKAGE: ",$P(LPDOS,U,2)
"RTN","PSSLOOK",113,0)
 ..E   W !,?10,$P(LPDOS,U),!,?55,"PACKAGE: ",$P(LPDOS,U,2)
"RTN","PSSLOOK",114,0)
 ..D FULL Q:$G(QUIT)  W !,"     BCMA UNITS PER DOSE: ",$P(LPDOS,U,3) D FULL Q:$G(QUIT)  D LPDNW
"RTN","PSSLOOK",115,0)
 D FULL Q:$G(QUIT)  W ! F XX=1:1:77 W "-"
"RTN","PSSLOOK",116,0)
 D FULL Q:$G(QUIT)  W !,"VA CLASS: ",$G(CLASS)
"RTN","PSSLOOK",117,0)
 D FULL Q:$G(QUIT)  W !,"LOCAL NON-FORMULARY: ",$G(NF),"          ","VISN NON-FORMULARY: ",$G(VNF)
"RTN","PSSLOOK",118,0)
 N DA,K,LIST,PSXDN,PSXGN,PSXVP,X,XX1,XX2
"RTN","PSSLOOK",119,0)
 K PSXGN,PSXVP I $D(^PSDRUG(IFN,"ND")) S PSXDN=$G(^PSDRUG(IFN,"ND")),PSXGN=$P(PSXDN,"^"),PSXVP=$P(PSXDN,"^",3)
"RTN","PSSLOOK",120,0)
 I $G(PSXGN),$G(PSXVP) S X=$$PROD2^PSNAPIS(PSXGN,PSXVP),XX1=$$FORMI^PSNAPIS(PSXGN,PSXVP)
"RTN","PSSLOOK",121,0)
 D FULL Q:$G(QUIT)  W !,"National Formulary Indicator: "_$S($G(XX1)=1:"YES",$G(XX1)=0:"NO",1:"Not Matched to NDF")
"RTN","PSSLOOK",122,0)
 I $D(^PSDRUG(IFN,65,0)) D FULL Q:$G(QUIT)  W !,"FORMULARY ALTERNATIVES: ",! F FA=0:0 S FA=$O(^PSDRUG(IFN,65,FA)) Q:'FA  S LDFPTR=$P($G(^PSDRUG(IFN,65,FA,0)),"^") I LDFPTR D FULL Q:$G(QUIT)  W ?26,$P($G(^PSDRUG(LDFPTR,0)),"^"),!
"RTN","PSSLOOK",123,0)
 D FULL Q:$G(QUIT)  I $G(PSXGN),$G(PSXVP) W !,"National Restriction: " S XX2=$$FORMRX^PSNAPIS(PSXGN,PSXVP,.LIST) I $G(XX2)=1,$D(LIST) F XX2=0:0 S XX2=$O(LIST(XX2)) Q:'XX2  D FULL Q:$G(QUIT)  W !,LIST(XX2,0)
"RTN","PSSLOOK",124,0)
 W !,"Local Drug Text: ",! I $D(^PSDRUG(IFN,9,0)) D LDT
"RTN","PSSLOOK",125,0)
 Q
"RTN","PSSLOOK",126,0)
LDT F TXT1=0:0 S TXT1=$O(^PSDRUG(IFN,9,TXT1)) Q:'TXT1  S TEXPTR=^PSDRUG(IFN,9,TXT1,0) F PPP=0:0 S PPP=$O(^PS(51.7,TEXPTR,2,PPP)) Q:'PPP  S PST=$P($G(^PS(51.7,TEXPTR,0)),"^",2) I 'PST S WPT=^PS(51.7,TEXPTR,2,PPP,0) D FULL Q:$G(QUIT)  W WPT,!
"RTN","PSSLOOK",127,0)
 ;
"RTN","PSSLOOK",128,0)
 ;
"RTN","PSSLOOK",129,0)
KILL K IFN,APP,INT,VADU,VAGN,VAPN,VAPRN,P3,VAGNPTR,MESS,CLASS,DEA,ACT,CL,CLPTR,CMOP,DF,DFPTR,DU,DUPOUGN,IFCAPNM,NDC,NDE,NDNODE,NF,NODE0,NODE2,OI,OINM,OIPTR,OU,PD,PDPTR,PPDU,PPOU,PS,PT,NOD66,SYNM,SZPTR,TYPTR,WARN,WRN,XX,ZZZ,SS,OUPTR,CMOPID
"RTN","PSSLOOK",130,0)
 K DUPOU,QQQ,GN,QDM,APPL,VADF,DFP,DFRM,Y,Z0,Z1,DDD,PPP,TEXT,TXTPTR,TXT,TXT1,TEXPTR,VNF,WPT,FA,LDFPTR,TEXTPTR,QUIT,PST,D0,DA,K,DIR
"RTN","PSSLOOK",131,0)
 K PSSNODE,PSDOSUN,PDS,POSDOS,LPDOS,CSF,PSSSTR,PSSUNIT,PSSCALC
"RTN","PSSLOOK",132,0)
 Q
"RTN","PSSLOOK",133,0)
OITXT I $D(^PS(50.7,OIPTR,1,0)) F TXT=0:0 S TXT=$O(^PS(50.7,OIPTR,1,TXT)) Q:'TXT  S TEXTPTR=^PS(50.7,OIPTR,1,TXT,0) F DDD=0:0 S DDD=$O(^PS(51.7,TEXTPTR,2,DDD)) Q:'DDD  D IDATE I 'Y2K S TEXT=^PS(51.7,TEXTPTR,2,DDD,0) D FULL Q:$G(QUIT)  W TEXT,!
"RTN","PSSLOOK",134,0)
 Q
"RTN","PSSLOOK",135,0)
FULL D:($Y+5)>IOSL&('$G(QUIT)) FSCRN
"RTN","PSSLOOK",136,0)
 Q
"RTN","PSSLOOK",137,0)
FSCRN Q:$G(QUIT)  W ! K DIR S DIR(0)="E",DIR("A")="Press Return to continue,'^' to exit" D ^DIR W @IOF S:Y'=1 QUIT=1
"RTN","PSSLOOK",138,0)
 Q
"RTN","PSSLOOK",139,0)
IDATE S Y2K=$P($G(^PS(51.7,TEXTPTR,0)),"^",2)
"RTN","PSSLOOK",140,0)
 Q
"RTN","PSSLOOK",141,0)
UNCALC ;
"RTN","PSSLOOK",142,0)
 N PSSVA,PSSVA1,PSSVB,PSSVB1,PSSDASH,PSSNDFS,PSSDASH2,PSSDASH3,PSSDASH5 K PSSCALC
"RTN","PSSLOOK",143,0)
 S PSSDASH=0 S PSSNDFS=$$PSJST^PSNAPIS(+$P($G(^PSDRUG(IFN,"ND")),"^"),+$P($G(^PSDRUG(IFN,"ND")),"^",3)) S PSSNDFS=+$P($G(PSSNDFS),"^",2)
"RTN","PSSLOOK",144,0)
 I $G(PSSNDFS),$G(PSSSTR),+$G(PSSSTR)'=+$G(PSSNDFS) S PSSDASH=1
"RTN","PSSLOOK",145,0)
 S PSSVA=$P(PSSUNIT,"/"),PSSVB=$P(PSSUNIT,"/",2),PSSVA1=+$G(PSSVA),PSSVB1=+$G(PSSVB)
"RTN","PSSLOOK",146,0)
 I $G(PSSDASH) S PSSDASH2=PSSSTR/PSSNDFS,PSSDASH3=PSSDASH2*$S($G(PSSVB1):PSSVB1,1:1) S PSSDASH5=$S('$G(PSSVB1):PSSDASH3_$G(PSSVB),1:PSSDASH3_$P(PSSVB,PSSVB1,2))
"RTN","PSSLOOK",147,0)
 S PSSCALC=$S($G(PSSDASH):$S('$G(PSSVA1):PSSVA,1:$P(PSSVA1,PSSVA1,2))_"/"_$G(PSSDASH5),1:PSSUNIT)
"RTN","PSSLOOK",148,0)
 Q
"RTN","PSSLOOK",149,0)
 ;
"RTN","PSSLOOK",150,0)
LPDNW ;Display Dose Unit and Numeric Dose fields, added with patch PSS*1*147
"RTN","PSSLOOK",151,0)
 N PSSLKL1,PSSLKL2,PSSLKL3,PSSLKL4
"RTN","PSSLOOK",152,0)
 S PSSLKL4=""
"RTN","PSSLOOK",153,0)
 S PSSLKL1=$P(LPDOS,"^",5),PSSLKL2=$P(LPDOS,"^",6)
"RTN","PSSLOOK",154,0)
 I PSSLKL1 S PSSLKL4=$P($G(^PS(51.24,+PSSLKL1,0)),"^")
"RTN","PSSLOOK",155,0)
 S PSSLKL3=$S($E(PSSLKL2)=".":"0",1:"")_PSSLKL2
"RTN","PSSLOOK",156,0)
 I $L(PSSLKL3)<18 D FULL Q:$G(QUIT)  W !?5,"NUMERIC DOSE: "_PSSLKL3,?38,"DOSE UNIT: "_PSSLKL4 Q
"RTN","PSSLOOK",157,0)
 D FULL Q:$G(QUIT)  W !?5,"NUMERIC DOSE: "_PSSLKL3
"RTN","PSSLOOK",158,0)
 D FULL Q:$G(QUIT)  W !?38,"DOSE UNIT: "_PSSLKL4
"RTN","PSSLOOK",159,0)
 Q
"VER")
8.0^22.0
"^DD",50,50,84,0)
EPHARMACY BILLABLE^S^0:NO;1:YES;^EPH;4^Q
"^DD",50,50,84,3)
Enter 'YES' if this drug is billable, otherwise enter 'NO'.
"^DD",50,50,84,21,0)
^^6^6^3150930^
"^DD",50,50,84,21,1,0)
This field indicates whether a prescription for this drug is 
"^DD",50,50,84,21,2,0)
billable. In general, OTCs and supplies are not covered, except 
"^DD",50,50,84,21,3,0)
insulin, glucose test strips, insulin syringes and needles.  
"^DD",50,50,84,21,4,0)
Some plans cover preventative care OTC products.  A review of 
"^DD",50,50,84,21,5,0)
the Payable Claims Report may help determine if a product marked as
"^DD",50,50,84,21,6,0)
billable is covered.
"^DD",50,50,84,"DT")
3150930
"^DD",50,50,85,0)
EPHARMACY BILLABLE (TRICARE)^S^0:NO;1:YES;^EPH;5^Q
"^DD",50,50,85,3)
Enter 'YES' if this drug is TRICARE billable, otherwise enter 'NO'.  If unanswered, it will default to the response for the general "EPHARMACY BILLABLE" field.
"^DD",50,50,85,21,0)
^.001^5^5^3150930^^
"^DD",50,50,85,21,1,0)
This field indicates whether a prescription for this drug is TRICARE 
"^DD",50,50,85,21,2,0)
billable. In general, OTCs and supplies are not covered, except 
"^DD",50,50,85,21,3,0)
insulin, glucose test strips, insulin syringes, needles and inhaler 
"^DD",50,50,85,21,4,0)
spacers.  If unsure mark as billable and change if prescriptions 
"^DD",50,50,85,21,5,0)
reject as not covered.
"^DD",50,50,85,"DT")
3150922
"^DD",50,50,86,0)
EPHARMACY BILLABLE (CHAMPVA)^S^0:NO;1:YES;^EPH;6^Q
"^DD",50,50,86,3)
Enter 'YES' if this drug is CHAMPVA billable, otherwise enter 'NO'.  If unanswered, it will default to the response for the general "EPHARMACY BILLABLE" field.
"^DD",50,50,86,21,0)
^.001^5^5^3150930^^^^
"^DD",50,50,86,21,1,0)
This field indicates whether a prescription for this drug is CHAMPVA 
"^DD",50,50,86,21,2,0)
billable.  In general, OTCs and supplies are not covered, except 
"^DD",50,50,86,21,3,0)
insulin, glucose test scripts, insulin syringes, needles and inhaler
"^DD",50,50,86,21,4,0)
spacers.  If unsure mark as billable and change if prescriptions
"^DD",50,50,86,21,5,0)
reject as not covered.
"^DD",50,50,86,"DT")
3150520
"^DD",50,50,87,0)
SENSITIVE DIAGNOSIS DRUG^S^0:NO;1:YES;^EPH;7^Q
"^DD",50,50,87,3)
Enter 'YES' if this drug is used EXCLUSIVELY to treat a sensitive diagnosis, otherwise enter 'NO'.
"^DD",50,50,87,21,0)
^^3^3^3150930^
"^DD",50,50,87,21,1,0)
This field indicates whether this drug is used EXCLUSIVELY to treat
"^DD",50,50,87,21,2,0)
one of the VA's sensitive diagnoses, HIV, drug abuse, alcohol abuse
"^DD",50,50,87,21,3,0)
and Sickle Cell anemia.
"^DD",50,50,87,"DT")
3150922
**END**
**END**

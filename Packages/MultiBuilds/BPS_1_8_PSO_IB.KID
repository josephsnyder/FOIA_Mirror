KIDS Distribution saved on Aug 06, 2010@13:27:08
BPS PSO IB BUNDLE 4.0
**KIDS**:BPS PSO IB BUNDLE 4.0^PSO*7.0*290^IB*2.0*411^BPS*1.0*8^

**INSTALL NAME**
BPS PSO IB BUNDLE 4.0
"BLD",7819,0)
BPS PSO IB BUNDLE 4.0^^1^3100806^n
"BLD",7819,6.3)
24
"BLD",7819,10,0)
^9.63^3^3
"BLD",7819,10,1,0)
PSO*7.0*290^1
"BLD",7819,10,2,0)
IB*2.0*411^1
"BLD",7819,10,3,0)
BPS*1.0*8^1
"BLD",7819,10,"B","BPS*1.0*8",3)

"BLD",7819,10,"B","IB*2.0*411",2)

"BLD",7819,10,"B","PSO*7.0*290",1)

"BLD",7819,"KRN",0)
^9.67PA^779.2^20
"BLD",7819,"KRN",.4,0)
.4
"BLD",7819,"KRN",.401,0)
.401
"BLD",7819,"KRN",.402,0)
.402
"BLD",7819,"KRN",.403,0)
.403
"BLD",7819,"KRN",.5,0)
.5
"BLD",7819,"KRN",.84,0)
.84
"BLD",7819,"KRN",3.6,0)
3.6
"BLD",7819,"KRN",3.8,0)
3.8
"BLD",7819,"KRN",9.2,0)
9.2
"BLD",7819,"KRN",9.8,0)
9.8
"BLD",7819,"KRN",19,0)
19
"BLD",7819,"KRN",19.1,0)
19.1
"BLD",7819,"KRN",101,0)
101
"BLD",7819,"KRN",409.61,0)
409.61
"BLD",7819,"KRN",771,0)
771
"BLD",7819,"KRN",779.2,0)
779.2
"BLD",7819,"KRN",870,0)
870
"BLD",7819,"KRN",8989.51,0)
8989.51
"BLD",7819,"KRN",8989.52,0)
8989.52
"BLD",7819,"KRN",8994,0)
8994
"BLD",7819,"KRN","B",.4,.4)

"BLD",7819,"KRN","B",.401,.401)

"BLD",7819,"KRN","B",.402,.402)

"BLD",7819,"KRN","B",.403,.403)

"BLD",7819,"KRN","B",.5,.5)

"BLD",7819,"KRN","B",.84,.84)

"BLD",7819,"KRN","B",3.6,3.6)

"BLD",7819,"KRN","B",3.8,3.8)

"BLD",7819,"KRN","B",9.2,9.2)

"BLD",7819,"KRN","B",9.8,9.8)

"BLD",7819,"KRN","B",19,19)

"BLD",7819,"KRN","B",19.1,19.1)

"BLD",7819,"KRN","B",101,101)

"BLD",7819,"KRN","B",409.61,409.61)

"BLD",7819,"KRN","B",771,771)

"BLD",7819,"KRN","B",779.2,779.2)

"BLD",7819,"KRN","B",870,870)

"BLD",7819,"KRN","B",8989.51,8989.51)

"BLD",7819,"KRN","B",8989.52,8989.52)

"BLD",7819,"KRN","B",8994,8994)

"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"VER")
8.0^22.0
**INSTALL NAME**
PSO*7.0*290
"BLD",7816,0)
PSO*7.0*290^OUTPATIENT PHARMACY^0^3100806^y
"BLD",7816,1,0)
^^54^54^3090318^^
"BLD",7816,1,1,0)
1. A modification was made to the Reject Information screen under the 
"BLD",7816,1,2,0)
Third Party Payer Rejects - Worklist [PSO REJECTS WORKLIST] option and the
"BLD",7816,1,3,0)
Third Party Payer Rejects - View/Process [PSO REJECTS VIEW/PROCESS] option
"BLD",7816,1,4,0)
to incorporate the Coordination of Benefits (COB) indicator to be 
"BLD",7816,1,5,0)
displayed in the insurance section. The indicator will be displayed as
"BLD",7816,1,6,0)
"Coord. Of Benefits:" followed by either PRIMARY, SECONDARY, or TERTIARY.
"BLD",7816,1,7,0)
 
"BLD",7816,1,8,0)
Example:
"BLD",7816,1,9,0)
 
"BLD",7816,1,10,0)
   INSURANCE Information
"BLD",7816,1,11,0)
   Insurance      : OPP INSURANCE            Coord. Of Benefits: PRIMARY
"BLD",7816,1,12,0)
   Contact        :
"BLD",7816,1,13,0)
   Group Name     : D-GROUP1
"BLD",7816,1,14,0)
   Group Number   : D00001
"BLD",7816,1,15,0)
   Cardholder ID  :
"BLD",7816,1,16,0)
 
"BLD",7816,1,17,0)
2. A COB field(#27) was added to the PRESCRIPTION file (#52),
"BLD",7816,1,18,0)
REJECT INFO sub-file (#52.25) to store the COB for the Third Party 
"BLD",7816,1,19,0)
Insurance Rejects for the fill. The Set of Codes will be stored as "1" for
"BLD",7816,1,20,0)
Primary, "2" for Secondary, and "3" for Tertiary. Tertiary billing will 
"BLD",7816,1,21,0)
not be implemented with this patch group, but is included for future use.
"BLD",7816,1,22,0)
 
"BLD",7816,1,23,0)
DATA          NAME                  GLOBAL        DATA
"BLD",7816,1,24,0)
ELEMENT       TITLE                 LOCATION      TYPE
"BLD",7816,1,25,0)
--------------------------------------------------------------------------
"BLD",7816,1,26,0)
52.25,27      COB                    2;7          SET
"BLD",7816,1,27,0)
 
"BLD",7816,1,28,0)
                                '1' FOR PRIMARY; 
"BLD",7816,1,29,0)
                                '2' FOR SECONDARY; 
"BLD",7816,1,30,0)
                                '3' FOR TERTIARY; 
"BLD",7816,1,31,0)
              LAST EDITED:      JAN 20, 2009 
"BLD",7816,1,32,0)
              DESCRIPTION:      This field contains the Coordination of 
"BLD",7816,1,33,0)
                                Benefits indicator for the third party 
"BLD",7816,1,34,0)
                                insurance rejection for the fill. This 
"BLD",7816,1,35,0)
                                field can contain 1 for Primary, 2 for
"BLD",7816,1,36,0)
                                Secondary, or 3 for Tertiary.
"BLD",7816,1,37,0)
 
"BLD",7816,1,38,0)
3. A modification was made to the Patient Medication Profile screen 
"BLD",7816,1,39,0)
under the ePharmacy Medication Profile (View Only) [PSO PMP] option to
"BLD",7816,1,40,0)
modify the ECME LOG section to change the "Comments:" preface from
"BLD",7816,1,41,0)
"Submitted to ECME:" to "ECME:" for non reversals. Second modification was
"BLD",7816,1,42,0)
made to add the COB indicator with insurance provider to the suffix of the
"BLD",7816,1,43,0)
"Comments:." The COB indicator will be denoted with a lower case "p" for
"BLD",7816,1,44,0)
Primary, "s" for Secondary and a "t" for Tertiary, which will be followed
"BLD",7816,1,45,0)
by the name of the insurance provider in capital letters.
"BLD",7816,1,46,0)
 
"BLD",7816,1,47,0)
Example: 
"BLD",7816,1,48,0)
   
"BLD",7816,1,49,0)
   ECME Log:
"BLD",7816,1,50,0)
 
"BLD",7816,1,51,0)
   #   Date/Time           Rx Ref          Initiator Of Activity
"BLD",7816,1,52,0)
==========================================================================
"BLD",7816,1,53,0)
   1   1/28/09@11:37:56    ORIGINAL        OPUSER,ONE
"BLD",7816,1,54,0)
   Comments:  ECME:WINDOW FILL(NDC:00046-1066-05)-E PAYABLE-pOPP INSURANCE
"BLD",7816,4,0)
^9.64PA^52^1
"BLD",7816,4,52,0)
52
"BLD",7816,4,52,2,0)
^9.641^52.25^1
"BLD",7816,4,52,2,52.25,0)
REJECT INFO  (sub-file)
"BLD",7816,4,52,2,52.25,1,0)
^9.6411^27^1
"BLD",7816,4,52,2,52.25,1,27,0)
COB
"BLD",7816,4,52,222)
y^y^p^^^^n^^n
"BLD",7816,4,52,224)

"BLD",7816,4,"APDD",52,52.25)

"BLD",7816,4,"APDD",52,52.25,27)

"BLD",7816,4,"B",52,52)

"BLD",7816,6.3)
69
"BLD",7816,"ABPKG")
n
"BLD",7816,"KRN",0)
^9.67PA^779.2^20
"BLD",7816,"KRN",.4,0)
.4
"BLD",7816,"KRN",.401,0)
.401
"BLD",7816,"KRN",.402,0)
.402
"BLD",7816,"KRN",.403,0)
.403
"BLD",7816,"KRN",.5,0)
.5
"BLD",7816,"KRN",.84,0)
.84
"BLD",7816,"KRN",3.6,0)
3.6
"BLD",7816,"KRN",3.8,0)
3.8
"BLD",7816,"KRN",9.2,0)
9.2
"BLD",7816,"KRN",9.8,0)
9.8
"BLD",7816,"KRN",9.8,"NM",0)
^9.68A^9^9
"BLD",7816,"KRN",9.8,"NM",1,0)
PSOBPSU1^^0^B49118971
"BLD",7816,"KRN",9.8,"NM",2,0)
PSOREJUT^^0^B46867326
"BLD",7816,"KRN",9.8,"NM",3,0)
PSOREJU2^^0^B49121705
"BLD",7816,"KRN",9.8,"NM",4,0)
PSOREJU4^^0^B26048995
"BLD",7816,"KRN",9.8,"NM",5,0)
PSOREJP1^^0^B70021673
"BLD",7816,"KRN",9.8,"NM",6,0)
PSOREJP3^^0^B50535626
"BLD",7816,"KRN",9.8,"NM",7,0)
PSOSULBL^^0^B73560557
"BLD",7816,"KRN",9.8,"NM",8,0)
PSOBPSU2^^0^B47974509
"BLD",7816,"KRN",9.8,"NM",9,0)
PSOREJU3^^0^B42508132
"BLD",7816,"KRN",9.8,"NM","B","PSOBPSU1",1)

"BLD",7816,"KRN",9.8,"NM","B","PSOBPSU2",8)

"BLD",7816,"KRN",9.8,"NM","B","PSOREJP1",5)

"BLD",7816,"KRN",9.8,"NM","B","PSOREJP3",6)

"BLD",7816,"KRN",9.8,"NM","B","PSOREJU2",3)

"BLD",7816,"KRN",9.8,"NM","B","PSOREJU3",9)

"BLD",7816,"KRN",9.8,"NM","B","PSOREJU4",4)

"BLD",7816,"KRN",9.8,"NM","B","PSOREJUT",2)

"BLD",7816,"KRN",9.8,"NM","B","PSOSULBL",7)

"BLD",7816,"KRN",19,0)
19
"BLD",7816,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",7816,"KRN",19,"NM",1,0)
PSO REJECTS WORKLIST^^0
"BLD",7816,"KRN",19,"NM","B","PSO REJECTS WORKLIST",1)

"BLD",7816,"KRN",19.1,0)
19.1
"BLD",7816,"KRN",101,0)
101
"BLD",7816,"KRN",101,"NM",0)
^9.68A^25^25
"BLD",7816,"KRN",101,"NM",1,0)
PSO REJECT DISPLAY MENU^^0
"BLD",7816,"KRN",101,"NM",2,0)
PSO REJECT DISPLAY HIDDEN MENU^^0
"BLD",7816,"KRN",101,"NM",3,0)
VALM NEXT SCREEN^^0
"BLD",7816,"KRN",101,"NM",4,0)
VALM PREVIOUS SCREEN^^0
"BLD",7816,"KRN",101,"NM",5,0)
VALM UP ONE LINE^^0
"BLD",7816,"KRN",101,"NM",6,0)
VALM REFRESH^^0
"BLD",7816,"KRN",101,"NM",7,0)
VALM PRINT SCREEN^^0
"BLD",7816,"KRN",101,"NM",8,0)
VALM PRINT LIST^^0
"BLD",7816,"KRN",101,"NM",9,0)
VALM QUIT^^0
"BLD",7816,"KRN",101,"NM",10,0)
VALM LAST SCREEN^^0
"BLD",7816,"KRN",101,"NM",11,0)
VALM FIRST SCREEN^^0
"BLD",7816,"KRN",101,"NM",12,0)
VALM GOTO PAGE^^0
"BLD",7816,"KRN",101,"NM",13,0)
PSO REJECT DISPLAY RX EDIT^^0
"BLD",7816,"KRN",101,"NM",14,0)
PSO REJECT DISPLAY CLARIFICATION CODE^^0
"BLD",7816,"KRN",101,"NM",15,0)
PSO REJECT DISPLAY ADD COMMENT^^0
"BLD",7816,"KRN",101,"NM",16,0)
VALM TURN ON/OFF MENUS^^0
"BLD",7816,"KRN",101,"NM",17,0)
PSO REJECT DISPLAY PRIOR AUTHORIZATION^^0
"BLD",7816,"KRN",101,"NM",18,0)
VALM DOWN A LINE^^0
"BLD",7816,"KRN",101,"NM",19,0)
PSO REJECT DISPLAY RESUBMIT^^0
"BLD",7816,"KRN",101,"NM",20,0)
PSO REJECT DISPLAY OVERRIDE^^0
"BLD",7816,"KRN",101,"NM",21,0)
PSO REJECT DISPLAY IGNORE^^0
"BLD",7816,"KRN",101,"NM",22,0)
PSO REJECT DISPLAY RX VIEW^^0
"BLD",7816,"KRN",101,"NM",23,0)
PSO REJECT DISPLAY MED PROFILE^^0
"BLD",7816,"KRN",101,"NM",24,0)
PSO REJECT DISPLAY SUSPENSE DATE^^0
"BLD",7816,"KRN",101,"NM",25,0)
VALM SEARCH LIST^^0
"BLD",7816,"KRN",101,"NM","B","PSO REJECT DISPLAY ADD COMMENT",15)

"BLD",7816,"KRN",101,"NM","B","PSO REJECT DISPLAY CLARIFICATION CODE",14)

"BLD",7816,"KRN",101,"NM","B","PSO REJECT DISPLAY HIDDEN MENU",2)

"BLD",7816,"KRN",101,"NM","B","PSO REJECT DISPLAY IGNORE",21)

"BLD",7816,"KRN",101,"NM","B","PSO REJECT DISPLAY MED PROFILE",23)

"BLD",7816,"KRN",101,"NM","B","PSO REJECT DISPLAY MENU",1)

"BLD",7816,"KRN",101,"NM","B","PSO REJECT DISPLAY OVERRIDE",20)

"BLD",7816,"KRN",101,"NM","B","PSO REJECT DISPLAY PRIOR AUTHORIZATION",17)

"BLD",7816,"KRN",101,"NM","B","PSO REJECT DISPLAY RESUBMIT",19)

"BLD",7816,"KRN",101,"NM","B","PSO REJECT DISPLAY RX EDIT",13)

"BLD",7816,"KRN",101,"NM","B","PSO REJECT DISPLAY RX VIEW",22)

"BLD",7816,"KRN",101,"NM","B","PSO REJECT DISPLAY SUSPENSE DATE",24)

"BLD",7816,"KRN",101,"NM","B","VALM DOWN A LINE",18)

"BLD",7816,"KRN",101,"NM","B","VALM FIRST SCREEN",11)

"BLD",7816,"KRN",101,"NM","B","VALM GOTO PAGE",12)

"BLD",7816,"KRN",101,"NM","B","VALM LAST SCREEN",10)

"BLD",7816,"KRN",101,"NM","B","VALM NEXT SCREEN",3)

"BLD",7816,"KRN",101,"NM","B","VALM PREVIOUS SCREEN",4)

"BLD",7816,"KRN",101,"NM","B","VALM PRINT LIST",8)

"BLD",7816,"KRN",101,"NM","B","VALM PRINT SCREEN",7)

"BLD",7816,"KRN",101,"NM","B","VALM QUIT",9)

"BLD",7816,"KRN",101,"NM","B","VALM REFRESH",6)

"BLD",7816,"KRN",101,"NM","B","VALM SEARCH LIST",25)

"BLD",7816,"KRN",101,"NM","B","VALM TURN ON/OFF MENUS",16)

"BLD",7816,"KRN",101,"NM","B","VALM UP ONE LINE",5)

"BLD",7816,"KRN",409.61,0)
409.61
"BLD",7816,"KRN",409.61,"NM",0)
^9.68A^2^1
"BLD",7816,"KRN",409.61,"NM",2,0)
PSO REJECT DISPLAY^^0
"BLD",7816,"KRN",409.61,"NM","B","PSO REJECT DISPLAY",2)

"BLD",7816,"KRN",771,0)
771
"BLD",7816,"KRN",779.2,0)
779.2
"BLD",7816,"KRN",870,0)
870
"BLD",7816,"KRN",8989.51,0)
8989.51
"BLD",7816,"KRN",8989.52,0)
8989.52
"BLD",7816,"KRN",8994,0)
8994
"BLD",7816,"KRN","B",.4,.4)

"BLD",7816,"KRN","B",.401,.401)

"BLD",7816,"KRN","B",.402,.402)

"BLD",7816,"KRN","B",.403,.403)

"BLD",7816,"KRN","B",.5,.5)

"BLD",7816,"KRN","B",.84,.84)

"BLD",7816,"KRN","B",3.6,3.6)

"BLD",7816,"KRN","B",3.8,3.8)

"BLD",7816,"KRN","B",9.2,9.2)

"BLD",7816,"KRN","B",9.8,9.8)

"BLD",7816,"KRN","B",19,19)

"BLD",7816,"KRN","B",19.1,19.1)

"BLD",7816,"KRN","B",101,101)

"BLD",7816,"KRN","B",409.61,409.61)

"BLD",7816,"KRN","B",771,771)

"BLD",7816,"KRN","B",779.2,779.2)

"BLD",7816,"KRN","B",870,870)

"BLD",7816,"KRN","B",8989.51,8989.51)

"BLD",7816,"KRN","B",8989.52,8989.52)

"BLD",7816,"KRN","B",8994,8994)

"BLD",7816,"QUES",0)
^9.62^^
"BLD",7816,"REQB",0)
^9.611^2^2
"BLD",7816,"REQB",1,0)
PSO*7.0*289^2
"BLD",7816,"REQB",2,0)
PSO*7.0*341^2
"BLD",7816,"REQB","B","PSO*7.0*289",1)

"BLD",7816,"REQB","B","PSO*7.0*341",2)

"FIA",52)
PRESCRIPTION
"FIA",52,0)
^PSRX(
"FIA",52,0,0)
52I
"FIA",52,0,1)
y^y^p^^^^n^^n
"FIA",52,0,10)

"FIA",52,0,11)

"FIA",52,0,"RLRO")

"FIA",52,0,"VR")
7.0^PSO
"FIA",52,52)
1
"FIA",52,52.25)
1
"FIA",52,52.25,27)

"KRN",19,12895,-1)
0^1
"KRN",19,12895,0)
PSO REJECTS WORKLIST^Third Party Payer Rejects - Worklist^^R^^PSORPH^^^^^^OUTPATIENT PHARMACY^^
"KRN",19,12895,1,0)
^19.06^5^5^3080305^^^^
"KRN",19,12895,1,1,0)
This option gives user the ability to process Third Party Payer Rejects for
"KRN",19,12895,1,2,0)
one, multiple or all Outpatient Pharmacy Divisions. Only OPEN/UNRESOLVED 
"KRN",19,12895,1,3,0)
rejects that have clinical significance, such as DUR (Drug Utilization Review)
"KRN",19,12895,1,4,0)
and Fill Too Soon, are added to the Worklist. Once the reject is marked 
"KRN",19,12895,1,5,0)
CLOSED/RESOLVED it is automatically removed from the Worklist.
"KRN",19,12895,20)

"KRN",19,12895,25)
PSOREJP0
"KRN",19,12895,"U")
THIRD PARTY PAYER REJECTS - WO
"KRN",101,442,-1)
0^3
"KRN",101,442,0)
VALM NEXT SCREEN^Next Screen^^A^^^^^^^^LIST MANAGER
"KRN",101,442,1,0)
^^2^2^2920519^^^
"KRN",101,442,1,1,0)
This action will allow the user to view the next screen
"KRN",101,442,1,2,0)
of entries, if any exist.
"KRN",101,442,2,0)
^101.02A^1^1
"KRN",101,442,2,1,0)
NX
"KRN",101,442,2,"B","NX",1)

"KRN",101,442,15)

"KRN",101,442,20)
D NEXT^VALM4
"KRN",101,442,99)
61850,51011
"KRN",101,443,-1)
0^4
"KRN",101,443,0)
VALM PREVIOUS SCREEN^Previous Screen^^A^^^^^^^^LIST MANAGER
"KRN",101,443,1,0)
^^2^2^2920113^^
"KRN",101,443,1,1,0)
This action will allow the user to view the previous screen
"KRN",101,443,1,2,0)
of entries, if any exist.
"KRN",101,443,2,0)
^101.02A^3^2
"KRN",101,443,2,1,0)
PR
"KRN",101,443,2,2,0)
BK
"KRN",101,443,2,3,0)
PR
"KRN",101,443,2,"B","BK",2)

"KRN",101,443,2,"B","PR",1)

"KRN",101,443,2,"B","PR",3)

"KRN",101,443,20)
D PREV^VALM4
"KRN",101,443,99)
61850,51011
"KRN",101,444,-1)
0^6
"KRN",101,444,0)
VALM REFRESH^Re-Display Screen^^A^^^^^^^^LIST MANAGER
"KRN",101,444,1,0)
^^1^1^2911024^
"KRN",101,444,1,1,0)
This actions allows the user to re-display the current screen.
"KRN",101,444,2,0)
^101.02A^1^1
"KRN",101,444,2,1,0)
RE
"KRN",101,444,2,"B","RE",1)

"KRN",101,444,10,0)
^101.01PA^0^0
"KRN",101,444,20)
D RE^VALM4
"KRN",101,444,99)
61850,51011
"KRN",101,445,-1)
0^10
"KRN",101,445,0)
VALM LAST SCREEN^Last Screen^^A^^^^^^^^LIST MANAGER
"KRN",101,445,1,0)
^^1^1^2911026^
"KRN",101,445,1,1,0)
The action will display the last items.
"KRN",101,445,20)
D LAST^VALM4
"KRN",101,445,99)
61850,51011
"KRN",101,446,-1)
0^11
"KRN",101,446,0)
VALM FIRST SCREEN^First Screen^^A^^^^^^^^LIST MANAGER
"KRN",101,446,1,0)
^^1^1^2960619^^
"KRN",101,446,1,1,0)
This action will display the first screen.
"KRN",101,446,15)

"KRN",101,446,20)
D FIRST^VALM4
"KRN",101,446,99)
61850,51011
"KRN",101,447,-1)
0^5
"KRN",101,447,0)
VALM UP ONE LINE^Up a Line^^A^^^^^^^^LIST MANAGER
"KRN",101,447,1,0)
^^1^1^2911027^
"KRN",101,447,1,1,0)
Move up a line
"KRN",101,447,20)
D UP^VALM40
"KRN",101,447,99)
61850,51011
"KRN",101,448,-1)
0^18
"KRN",101,448,0)
VALM DOWN A LINE^Down a Line^^A^^^^^^^^LIST MANAGER
"KRN",101,448,1,0)
^^2^2^2950628^^
"KRN",101,448,1,1,0)
Move down a line.
"KRN",101,448,1,2,0)

"KRN",101,448,3,0)
^101.03P^0^0
"KRN",101,448,20)
D DOWN^VALM40
"KRN",101,448,99)
61850,51011
"KRN",101,450,-1)
0^9
"KRN",101,450,0)
VALM QUIT^Quit^^A^^^^^^^^
"KRN",101,450,.1)
 
"KRN",101,450,1,0)
^^1^1^2911105^
"KRN",101,450,1,1,0)
This protocol can be used as a generic 'quit' action.
"KRN",101,450,2,0)
^101.02A^2^2
"KRN",101,450,2,1,0)
EXIT
"KRN",101,450,2,2,0)
QUIT
"KRN",101,450,2,"B","EXIT",1)

"KRN",101,450,2,"B","QUIT",2)

"KRN",101,450,15)

"KRN",101,450,20)
Q
"KRN",101,450,99)
61850,51011
"KRN",101,451,-1)
0^7
"KRN",101,451,0)
VALM PRINT SCREEN^Print Screen^^A^^^^^^^^LIST MANAGER
"KRN",101,451,1,0)
^^3^3^2920113^^
"KRN",101,451,1,1,0)
This action allows the user to print the current List Manager
"KRN",101,451,1,2,0)
display screen.  The header and the current portion of the
"KRN",101,451,1,3,0)
list are printed.
"KRN",101,451,20)
D PRT^VALM1
"KRN",101,451,99)
61850,51011
"KRN",101,452,-1)
0^8
"KRN",101,452,0)
VALM PRINT LIST^Print List^^A^^^^^^^^LIST MANAGER
"KRN",101,452,1,0)
^^2^2^2920113^
"KRN",101,452,1,1,0)
This action allws the user to print the entire list of
"KRN",101,452,1,2,0)
entries currently being displayed.
"KRN",101,452,20)
D PRTL^VALM1
"KRN",101,452,99)
61850,51011
"KRN",101,454,-1)
0^16
"KRN",101,454,0)
VALM TURN ON/OFF MENUS^Auto-Display(On/Off)^^A^^^^^^^^LIST MANAGER
"KRN",101,454,20)
D MENU^VALM2
"KRN",101,454,99)
61850,51011
"KRN",101,456,-1)
0^25
"KRN",101,456,0)
VALM SEARCH LIST^Search List^^A^^^^^^^^LIST MANAGER
"KRN",101,456,1,0)
^^1^1^2920303^^
"KRN",101,456,1,1,0)
Finds text in list of entries.
"KRN",101,456,20)
D FIND^VALM40
"KRN",101,456,99)
61850,51011
"KRN",101,466,-1)
0^12
"KRN",101,466,0)
VALM GOTO PAGE^Go to Page^^A^^^^^^^^LIST MANAGER
"KRN",101,466,1,0)
^^1^1^2930113^
"KRN",101,466,1,1,0)

"KRN",101,466,20)
D GOTO^VALM40
"KRN",101,466,99)
61850,51011
"KRN",101,4031,-1)
0^20
"KRN",101,4031,0)
PSO REJECT DISPLAY OVERRIDE^Submit Override Codes^^A^^^^^^^^
"KRN",101,4031,4)
^^^OVR
"KRN",101,4031,20)
D OVR^PSOREJP1
"KRN",101,4031,99)
61850,51011
"KRN",101,4032,-1)
0^19
"KRN",101,4032,0)
PSO REJECT DISPLAY RESUBMIT^Resubmit Claim^^A^^^^^^^^
"KRN",101,4032,4)
^^^RES
"KRN",101,4032,20)
D RES^PSOREJP1
"KRN",101,4032,99)
61850,51011
"KRN",101,4033,-1)
0^13
"KRN",101,4033,0)
PSO REJECT DISPLAY RX EDIT^Edit Rx^^A^^^^^^^^
"KRN",101,4033,4)
^^^ED
"KRN",101,4033,20)
D EDT^PSOREJP1
"KRN",101,4033,99)
61850,51011
"KRN",101,4034,-1)
0^1
"KRN",101,4034,0)
PSO REJECT DISPLAY MENU^Reject Display Menu^^M^^^^^^^^
"KRN",101,4034,4)
26^4
"KRN",101,4034,10,0)
^101.01PA^8^8
"KRN",101,4034,10,2,0)
4032^RES^4^
"KRN",101,4034,10,2,"^")
PSO REJECT DISPLAY RESUBMIT
"KRN",101,4034,10,3,0)
4031^OVR^5^
"KRN",101,4034,10,3,"^")
PSO REJECT DISPLAY OVERRIDE
"KRN",101,4034,10,4,0)
4037^IGN^3^
"KRN",101,4034,10,4,"^")
PSO REJECT DISPLAY IGNORE
"KRN",101,4034,10,5,0)
4035^VW^1^
"KRN",101,4034,10,5,"^")
PSO REJECT DISPLAY RX VIEW
"KRN",101,4034,10,7,0)
4115^MP^2^
"KRN",101,4034,10,7,"^")
PSO REJECT DISPLAY MED PROFILE
"KRN",101,4034,10,8,0)
4038^CSD^6^
"KRN",101,4034,10,8,"^")
PSO REJECT DISPLAY SUSPENSE DATE
"KRN",101,4034,20)

"KRN",101,4034,26)
D SHOW^VALM,HDR^PSOREJP1
"KRN",101,4034,28)
Select: 
"KRN",101,4034,99)
61850,51011
"KRN",101,4035,-1)
0^22
"KRN",101,4035,0)
PSO REJECT DISPLAY RX VIEW^View Rx^^A^^^^^^^^
"KRN",101,4035,20)
D VIEW^PSOREJP1
"KRN",101,4035,99)
61850,51011
"KRN",101,4037,-1)
0^21
"KRN",101,4037,0)
PSO REJECT DISPLAY IGNORE^Ignore Reject^^A^^^^^^^^
"KRN",101,4037,4)
^^^CR
"KRN",101,4037,20)
D CLO^PSOREJP2
"KRN",101,4037,99)
61850,51011
"KRN",101,4038,-1)
0^24
"KRN",101,4038,0)
PSO REJECT DISPLAY SUSPENSE DATE^Change Suspense Date^^A^^^^^^^^
"KRN",101,4038,4)
^^^
"KRN",101,4038,20)
D CHG^PSOREJP2
"KRN",101,4038,99)
61850,51011
"KRN",101,4115,-1)
0^23
"KRN",101,4115,0)
PSO REJECT DISPLAY MED PROFILE^Medication Profile^^A^^^^^^^^
"KRN",101,4115,4)
^^^MP
"KRN",101,4115,20)
D MP^PSOREJP1
"KRN",101,4115,99)
61850,51011
"KRN",101,4117,-1)
0^15
"KRN",101,4117,0)
PSO REJECT DISPLAY ADD COMMENT^Add Comments^^A^^^^^^^^
"KRN",101,4117,20)
D ADDCOM^PSOREJP3
"KRN",101,4117,99)
61850,51011
"KRN",101,4118,-1)
0^14
"KRN",101,4118,0)
PSO REJECT DISPLAY CLARIFICATION CODE^Submit Clarif. Code^^A^^^^^^^^
"KRN",101,4118,4)
^^^CLA
"KRN",101,4118,20)
D CLA^PSOREJP1
"KRN",101,4118,99)
61850,51011
"KRN",101,4155,-1)
0^2
"KRN",101,4155,0)
PSO REJECT DISPLAY HIDDEN MENU^Reject Display Hidden Menu^^M^^^^^^^^
"KRN",101,4155,1,0)
^101.06^1^1^3070320^^^^
"KRN",101,4155,1,1,0)
This is the hidden menu option for the Reject Information(UNRESOLVED) [PSO REJECT DISPLAY] ListMan screen.
"KRN",101,4155,4)
26^3
"KRN",101,4155,10,0)
^101.01PA^21^21
"KRN",101,4155,10,1,0)
442^+^10^
"KRN",101,4155,10,1,"^")
VALM NEXT SCREEN
"KRN",101,4155,10,2,0)
443^-^11^
"KRN",101,4155,10,2,"^")
VALM PREVIOUS SCREEN
"KRN",101,4155,10,3,0)
447^UP^13^
"KRN",101,4155,10,3,"^")
VALM UP ONE LINE
"KRN",101,4155,10,5,0)
444^RD^19^
"KRN",101,4155,10,5,"^")
VALM REFRESH
"KRN",101,4155,10,6,0)
451^PS^20^
"KRN",101,4155,10,6,"^")
VALM PRINT SCREEN
"KRN",101,4155,10,7,0)
452^PT^21^
"KRN",101,4155,10,7,"^")
VALM PRINT LIST
"KRN",101,4155,10,11,0)
450^QU^24^
"KRN",101,4155,10,11,"^")
VALM QUIT
"KRN",101,4155,10,12,0)
445^LS^17^
"KRN",101,4155,10,12,"^")
VALM LAST SCREEN
"KRN",101,4155,10,13,0)
446^FS^16^
"KRN",101,4155,10,13,"^")
VALM FIRST SCREEN
"KRN",101,4155,10,14,0)
466^GO^18^
"KRN",101,4155,10,14,"^")
VALM GOTO PAGE
"KRN",101,4155,10,15,0)
4033^ED^3^
"KRN",101,4155,10,15,"^")
PSO REJECT DISPLAY RX EDIT
"KRN",101,4155,10,16,0)
4118^CLA^2^
"KRN",101,4155,10,16,"^")
PSO REJECT DISPLAY CLARIFICATION CODE
"KRN",101,4155,10,17,0)
4117^COM^1^
"KRN",101,4155,10,17,"^")
PSO REJECT DISPLAY ADD COMMENT
"KRN",101,4155,10,18,0)
454^ADPL^23^
"KRN",101,4155,10,18,"^")
VALM TURN ON/OFF MENUS
"KRN",101,4155,10,19,0)
4156^PA^4^
"KRN",101,4155,10,19,"^")
PSO REJECT DISPLAY PRIOR AUTHORIZATION
"KRN",101,4155,10,20,0)
448^DN^12^
"KRN",101,4155,10,20,"^")
VALM DOWN A LINE
"KRN",101,4155,10,21,0)
456^SL^22^
"KRN",101,4155,10,21,"^")
VALM SEARCH LIST
"KRN",101,4155,15)

"KRN",101,4155,99)
61850,51011
"KRN",101,4156,-1)
0^17
"KRN",101,4156,0)
PSO REJECT DISPLAY PRIOR AUTHORIZATION^Submit Prior Auth.^^A^^^^^^^^
"KRN",101,4156,4)
^^^PA
"KRN",101,4156,20)
D PA^PSOREJP1
"KRN",101,4156,99)
61850,51011
"KRN",409.61,824,-1)
0^2
"KRN",409.61,824,0)
PSO REJECT DISPLAY^1^^80^7^20^0^1^^PSO REJECT DISPLAY MENU^Reject Information(UNRESOLVED)^1^^1
"KRN",409.61,824,1)
^PSO REJECT DISPLAY HIDDEN MENU
"KRN",409.61,824,"ARRAY")
 ^TMP("PSOREJP1",$J)
"KRN",409.61,824,"COL",0)
^409.621^^0
"KRN",409.61,824,"FNL")
D EXIT^PSOREJP1
"KRN",409.61,824,"HDR")
D HDR^PSOREJP1
"KRN",409.61,824,"HLP")
D HELP^PSOREJP1
"KRN",409.61,824,"INIT")
D INIT^PSOREJP1
"MBREQ")
1
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",206,-1)
1^1
"PKG",206,0)
OUTPATIENT PHARMACY^PSO^OUTPATIENT LABELS, PROFILE, INVENTORY, PRESCRIPTIONS
"PKG",206,20,0)
^9.402P^^
"PKG",206,22,0)
^9.49I^1^1
"PKG",206,22,1,0)
7.0^3021122^3021202^66481
"PKG",206,22,1,"PAH",1,0)
290^3100806^101020
"PKG",206,22,1,"PAH",1,1,0)
^^54^54^3100806
"PKG",206,22,1,"PAH",1,1,1,0)
1. A modification was made to the Reject Information screen under the 
"PKG",206,22,1,"PAH",1,1,2,0)
Third Party Payer Rejects - Worklist [PSO REJECTS WORKLIST] option and the
"PKG",206,22,1,"PAH",1,1,3,0)
Third Party Payer Rejects - View/Process [PSO REJECTS VIEW/PROCESS] option
"PKG",206,22,1,"PAH",1,1,4,0)
to incorporate the Coordination of Benefits (COB) indicator to be 
"PKG",206,22,1,"PAH",1,1,5,0)
displayed in the insurance section. The indicator will be displayed as
"PKG",206,22,1,"PAH",1,1,6,0)
"Coord. Of Benefits:" followed by either PRIMARY, SECONDARY, or TERTIARY.
"PKG",206,22,1,"PAH",1,1,7,0)
 
"PKG",206,22,1,"PAH",1,1,8,0)
Example:
"PKG",206,22,1,"PAH",1,1,9,0)
 
"PKG",206,22,1,"PAH",1,1,10,0)
   INSURANCE Information
"PKG",206,22,1,"PAH",1,1,11,0)
   Insurance      : OPP INSURANCE            Coord. Of Benefits: PRIMARY
"PKG",206,22,1,"PAH",1,1,12,0)
   Contact        :
"PKG",206,22,1,"PAH",1,1,13,0)
   Group Name     : D-GROUP1
"PKG",206,22,1,"PAH",1,1,14,0)
   Group Number   : D00001
"PKG",206,22,1,"PAH",1,1,15,0)
   Cardholder ID  :
"PKG",206,22,1,"PAH",1,1,16,0)
 
"PKG",206,22,1,"PAH",1,1,17,0)
2. A COB field(#27) was added to the PRESCRIPTION file (#52),
"PKG",206,22,1,"PAH",1,1,18,0)
REJECT INFO sub-file (#52.25) to store the COB for the Third Party 
"PKG",206,22,1,"PAH",1,1,19,0)
Insurance Rejects for the fill. The Set of Codes will be stored as "1" for
"PKG",206,22,1,"PAH",1,1,20,0)
Primary, "2" for Secondary, and "3" for Tertiary. Tertiary billing will 
"PKG",206,22,1,"PAH",1,1,21,0)
not be implemented with this patch group, but is included for future use.
"PKG",206,22,1,"PAH",1,1,22,0)
 
"PKG",206,22,1,"PAH",1,1,23,0)
DATA          NAME                  GLOBAL        DATA
"PKG",206,22,1,"PAH",1,1,24,0)
ELEMENT       TITLE                 LOCATION      TYPE
"PKG",206,22,1,"PAH",1,1,25,0)
--------------------------------------------------------------------------
"PKG",206,22,1,"PAH",1,1,26,0)
52.25,27      COB                    2;7          SET
"PKG",206,22,1,"PAH",1,1,27,0)
 
"PKG",206,22,1,"PAH",1,1,28,0)
                                '1' FOR PRIMARY; 
"PKG",206,22,1,"PAH",1,1,29,0)
                                '2' FOR SECONDARY; 
"PKG",206,22,1,"PAH",1,1,30,0)
                                '3' FOR TERTIARY; 
"PKG",206,22,1,"PAH",1,1,31,0)
              LAST EDITED:      JAN 20, 2009 
"PKG",206,22,1,"PAH",1,1,32,0)
              DESCRIPTION:      This field contains the Coordination of 
"PKG",206,22,1,"PAH",1,1,33,0)
                                Benefits indicator for the third party 
"PKG",206,22,1,"PAH",1,1,34,0)
                                insurance rejection for the fill. This 
"PKG",206,22,1,"PAH",1,1,35,0)
                                field can contain 1 for Primary, 2 for
"PKG",206,22,1,"PAH",1,1,36,0)
                                Secondary, or 3 for Tertiary.
"PKG",206,22,1,"PAH",1,1,37,0)
 
"PKG",206,22,1,"PAH",1,1,38,0)
3. A modification was made to the Patient Medication Profile screen 
"PKG",206,22,1,"PAH",1,1,39,0)
under the ePharmacy Medication Profile (View Only) [PSO PMP] option to
"PKG",206,22,1,"PAH",1,1,40,0)
modify the ECME LOG section to change the "Comments:" preface from
"PKG",206,22,1,"PAH",1,1,41,0)
"Submitted to ECME:" to "ECME:" for non reversals. Second modification was
"PKG",206,22,1,"PAH",1,1,42,0)
made to add the COB indicator with insurance provider to the suffix of the
"PKG",206,22,1,"PAH",1,1,43,0)
"Comments:." The COB indicator will be denoted with a lower case "p" for
"PKG",206,22,1,"PAH",1,1,44,0)
Primary, "s" for Secondary and a "t" for Tertiary, which will be followed
"PKG",206,22,1,"PAH",1,1,45,0)
by the name of the insurance provider in capital letters.
"PKG",206,22,1,"PAH",1,1,46,0)
 
"PKG",206,22,1,"PAH",1,1,47,0)
Example: 
"PKG",206,22,1,"PAH",1,1,48,0)
   
"PKG",206,22,1,"PAH",1,1,49,0)
   ECME Log:
"PKG",206,22,1,"PAH",1,1,50,0)
 
"PKG",206,22,1,"PAH",1,1,51,0)
   #   Date/Time           Rx Ref          Initiator Of Activity
"PKG",206,22,1,"PAH",1,1,52,0)
==========================================================================
"PKG",206,22,1,"PAH",1,1,53,0)
   1   1/28/09@11:37:56    ORIGINAL        OPUSER,ONE
"PKG",206,22,1,"PAH",1,1,54,0)
   Comments:  ECME:WINDOW FILL(NDC:00046-1066-05)-E PAYABLE-pOPP INSURANCE
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
9
"RTN","PSOBPSU1")
0^1^B49118971
"RTN","PSOBPSU1",1,0)
PSOBPSU1 ;BIRM/MFR - BPS (ECME) Utilities 1 ;10/15/04
"RTN","PSOBPSU1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,260,281,287,303,289,290**;DEC 1997;Build 69
"RTN","PSOBPSU1",3,0)
 ;Reference to $$EN^BPSNCPDP supported by IA 4415 & 4304
"RTN","PSOBPSU1",4,0)
 ;References to $$NDCFMT^PSSNDCUT,$$GETNDC^PSSNDCUT supported by IA 4707
"RTN","PSOBPSU1",5,0)
 ;References to $$ECMEON^BPSUTIL,$$CMOPON^BPSUTIL supported by IA 4410
"RTN","PSOBPSU1",6,0)
 ;References to $$STORESP^IBNCPDP supported by IA 4299
"RTN","PSOBPSU1",7,0)
 ;
"RTN","PSOBPSU1",8,0)
ECMESND(RX,RFL,DATE,FROM,NDC,CMOP,RVTX,OVRC,CNDC,RESP,IGSW,ALTX,CLA,PA,RXCOB) ; - Sends Rx Release 
"RTN","PSOBPSU1",9,0)
 ;information to ECME/IB and updates NDC in the files 50 & 52; DBIA4304
"RTN","PSOBPSU1",10,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",11,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",12,0)
 ;       (r) DATE - Date of Service
"RTN","PSOBPSU1",13,0)
 ;       (r) FROM - Function within OP (See BWHERE param. in EN^BPSNCPDP api)
"RTN","PSOBPSU1",14,0)
 ;       (o) NDC  - NDC Number (If not passed, will be retrieved from DRUG file)
"RTN","PSOBPSU1",15,0)
 ;       (o) CMOP - CMOP Rx (1-YES/0-NO) (Default: 0)
"RTN","PSOBPSU1",16,0)
 ;       (o) RVTX - REVERSE text (e.g., RX EDIT, RX RELEASE-NDC CHANGE, etc)
"RTN","PSOBPSU1",17,0)
 ;       (o) OVRC - Set of 3 NCPDP override codes separated by "^": 
"RTN","PSOBPSU1",18,0)
 ;                  Piece 1: NCPDP Professional Service Code for overriding DUR REJECTS
"RTN","PSOBPSU1",19,0)
 ;                  Piece 2: NCPDP Reason for Service Code for overriding DUR REJECTS
"RTN","PSOBPSU1",20,0)
 ;                  Piece 3: NCPDP Result of Service Code for overriding DUR REJECTS
"RTN","PSOBPSU1",21,0)
 ;       (o) CNDC - Changed NDC? 1 - Yes / 0 - No (Default: NO)
"RTN","PSOBPSU1",22,0)
 ;       (o) IGSW - Ignore Switches (Master and CMOP)? 1 - Yes / 0 - No (Default: NO)
"RTN","PSOBPSU1",23,0)
 ;       (o) ALTX - Alternative Text to be placed in the Rx ECME Activity Log
"RTN","PSOBPSU1",24,0)
 ;       (o) CLA  - NCPDP Clarification Code for overriding DUR/RTS REJECTS
"RTN","PSOBPSU1",25,0)
 ;       (o) PA   - NCPDP Prior Authorization Type and Number (separated by "^")
"RTN","PSOBPSU1",26,0)
 ;       (o) RXCOB- Payer Sequence
"RTN","PSOBPSU1",27,0)
 ;Output:    RESP - Response from $$EN^BPSNCPDP api
"RTN","PSOBPSU1",28,0)
 ;
"RTN","PSOBPSU1",29,0)
 N ACT,NDCACT,DA,PSOELIG,ACT1
"RTN","PSOBPSU1",30,0)
 I '$D(RFL) S RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",31,0)
 ; - ECME is not turned ON for the Rx's Division
"RTN","PSOBPSU1",32,0)
 I '$G(IGSW),'$$ECMEON^BPSUTIL($$RXSITE^PSOBPSUT(RX,RFL)) S RESP="-1^ECME SWITCH OFF" Q
"RTN","PSOBPSU1",33,0)
 ; - ECME CMOP is not turned ON for the Rx's Division
"RTN","PSOBPSU1",34,0)
 I '$G(IGSW),$G(CMOP),'$$CMOPON^BPSUTIL($$RXSITE^PSOBPSUT(RX,RFL)) S RESP="-1^CMOP SWITCH OFF" Q
"RTN","PSOBPSU1",35,0)
 ; - Saving the NDC to be displayed on the ECME Act Log
"RTN","PSOBPSU1",36,0)
 I $G(CNDC) D
"RTN","PSOBPSU1",37,0)
 . I $G(NDC)'="" S NDCACT=NDC Q
"RTN","PSOBPSU1",38,0)
 . S NDCACT=$$GETNDC^PSONDCUT(RX,RFL)
"RTN","PSOBPSU1",39,0)
 I $$NDCFMT^PSSNDCUT($G(NDC))="" D
"RTN","PSOBPSU1",40,0)
 . S NDC=$$GETNDC^PSSNDCUT($$GET1^DIQ(52,RX,6,"I"),$$RXSITE^PSOBPSUT(RX,RFL),+$G(CMOP))
"RTN","PSOBPSU1",41,0)
 . I $G(NDC)'="" D SAVNDC^PSONDCUT(RX,RFL,NDC,+$G(CMOP),1)
"RTN","PSOBPSU1",42,0)
 S PPDU="",PPDU=$$GPPDU^PSONDCUT(RX,RFL,NDC,,1,FROM) K PPDU
"RTN","PSOBPSU1",43,0)
 ; - Creating ECME Act Log in file 52
"RTN","PSOBPSU1",44,0)
 S ACT="" I $$STATUS^PSOBPSUT(RX,RFL)="E PAYABLE" S ACT="Rev/Resubmit"
"RTN","PSOBPSU1",45,0)
 S ACT=ACT_" ECME:"
"RTN","PSOBPSU1",46,0)
 ; - Marked any 'unresolved' REJECTS as 'resolved' (Reason: 1 - Claim re-submitted)
"RTN","PSOBPSU1",47,0)
 N CLSCOM,COD1,COD2,COD3
"RTN","PSOBPSU1",48,0)
 S COD2=$P($G(OVRC),"^"),COD1=$P($G(OVRC),"^",2),COD3=$P($G(OVRC),"^",3)
"RTN","PSOBPSU1",49,0)
 I $G(COD3)'="" S CLSCOM="DUR Override Codes "_COD1_"/"_COD2_"/"_COD3_" submitted."
"RTN","PSOBPSU1",50,0)
 I $G(CLA)'="" S CLSCOM="Clarification Code "_$P(CLA,"^",2)_" submitted."
"RTN","PSOBPSU1",51,0)
 I $G(PA)'="" S CLSCOM="Prior Authorization Code ("_$P(PA,"^")_"/"_$P(PA,"^",2)_") submitted."
"RTN","PSOBPSU1",52,0)
 D CLSALL^PSOREJUT(RX,RFL,DUZ,1,$G(CLSCOM),$G(COD1),$G(COD2),$G(COD3),$S($G(CLA):$P(CLA,"^",2),1:""),$G(PA))
"RTN","PSOBPSU1",53,0)
 ; - Call to ECME (NEWing STAT because ECME was overwriting it - Important variable for CMOP release PSXVND)
"RTN","PSOBPSU1",54,0)
 N STAT
"RTN","PSOBPSU1",55,0)
 I $G(RVTX)="",FROM="ED" S RVTX="RX EDITED"
"RTN","PSOBPSU1",56,0)
 I $G(CLA) S CLA=$P(CLA,"^")
"RTN","PSOBPSU1",57,0)
 S RESP=$$EN^BPSNCPDP(RX,RFL,$$DOS(RX,RFL,.DATE),FROM,NDC,$G(RVTX),$G(OVRC),,$G(CLA),$G(PA),$G(RXCOB))
"RTN","PSOBPSU1",58,0)
 I $$STATUS^PSOBPSUT(RX,RFL)="E PAYABLE" D SAVNDC^PSONDCUT(RX,RFL,NDC,+$G(CMOP),1,FROM)
"RTN","PSOBPSU1",59,0)
 ;
"RTN","PSOBPSU1",60,0)
 ; - Reseting the Re-transmission flag
"RTN","PSOBPSU1",61,0)
 D RETRXF^PSOREJU2(RX,RFL,0)
"RTN","PSOBPSU1",62,0)
 ; Storing eligibility flag
"RTN","PSOBPSU1",63,0)
 S PSOELIG=$P(RESP,"^",3) D:PSOELIG'="" ELIG^PSOBPSU2(RX,RFL,PSOELIG)
"RTN","PSOBPSU1",64,0)
 ; - Logging ECME Act Log to file 52
"RTN","PSOBPSU1",65,0)
 I $G(ALTX)="" D
"RTN","PSOBPSU1",66,0)
 . N X,ROUTE S (ROUTE,X)=""
"RTN","PSOBPSU1",67,0)
 . S ROUTE=$S(FROM="RF":$$GET1^DIQ(52.1,RFL_","_RX_",",2),FROM="OF":$$GET1^DIQ(52,RX_",",11),1:"")
"RTN","PSOBPSU1",68,0)
 . S:FROM="OF" X=ROUTE_" FILL(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",69,0)
 . S:FROM="RF" X=ROUTE_" REFILL(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",70,0)
 . S:FROM="RN" X="RX RENEWED(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",71,0)
 . S:FROM="PL" X="PRINTED FROM SUSPENSE(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",72,0)
 . S:FROM="PE"!(FROM="PP") X="PULLED FROM SUSPENSE(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",73,0)
 . S:FROM="PC" X="CMOP TRANSMISSION(NDC:"_$$GETNDC^PSONDCUT(RX,RFL)_")"
"RTN","PSOBPSU1",74,0)
 . S:FROM="RRL" X="RELEASED RX PREVIOUSLY REVERSED"
"RTN","PSOBPSU1",75,0)
 . S:FROM="ED" X="RX EDITED"
"RTN","PSOBPSU1",76,0)
 . S:$G(RVTX)'="" X=RVTX
"RTN","PSOBPSU1",77,0)
 . S:$G(OVRC)'="" X="DUR OVERRIDE CODES("_$G(COD1)_"/"_$G(COD2)_"/"_$G(COD3)_")"
"RTN","PSOBPSU1",78,0)
 . S:$G(CNDC) X=X_"(NDC:"_NDCACT_")" S ACT=ACT_X
"RTN","PSOBPSU1",79,0)
 . S ACT=ACT_$$STS(RX,RFL,RESP)
"RTN","PSOBPSU1",80,0)
 I $G(ALTX)'="" S ACT=ACT_ALTX_$$STS(RX,RFL,RESP)
"RTN","PSOBPSU1",81,0)
 I +RESP=2 S ACT="Not ECME Billable: "_$P(RESP,"^",2)
"RTN","PSOBPSU1",82,0)
 I +RESP=6 S ACT=$P(RESP,"^",2)
"RTN","PSOBPSU1",83,0)
 I +RESP=10 S ACT="ECME reversed/NOT re-submitted: "_$P(RESP,"^",2)
"RTN","PSOBPSU1",84,0)
 S:PSOELIG="T" ACT="TRICARE-"_ACT
"RTN","PSOBPSU1",85,0)
 S ACT1=""
"RTN","PSOBPSU1",86,0)
 I $P(RESP,"^",6),$P(RESP,"^",7)'=""  S ACT1="-"_$S($P(RESP,"^",6)="2":"s",$P(RESP,"^",6)="3":"t",1:"p")_$P(RESP,"^",7)
"RTN","PSOBPSU1",87,0)
 S ACT=$E(ACT_ACT1,1,75)
"RTN","PSOBPSU1",88,0)
 D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOBPSU1",89,0)
 D ELOG^PSOBPSU2(RESP)  ;-Logs an ECME Act Log if Rx Qty is different than Billing Qty
"RTN","PSOBPSU1",90,0)
 I PSOELIG="T" D TRICCHK^PSOREJU3(RX,RFL,RESP,FROM,$G(RVTX))
"RTN","PSOBPSU1",91,0)
 Q
"RTN","PSOBPSU1",92,0)
 ;
"RTN","PSOBPSU1",93,0)
REVERSE(RX,RFL,FROM,RSN,RTXT,IGRL,NDC) ; - Reverse a claim and close all OPEN/UNRESOLVED Rejects
"RTN","PSOBPSU1",94,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",95,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",96,0)
 ;       (r) FROM - Function within OP (See BWHERE param. in EN^BPSNCPDP api)
"RTN","PSOBPSU1",97,0)
 ;       (o) RSN  - Close Reason (2:RX ON HOLD;4: RX RETURNED TO STOCK,5:RX DELETED,etc...)
"RTN","PSOBPSU1",98,0)
 ;       (o) RTXT - Close Reason TEXT (Usually no passed if RSN is passed)
"RTN","PSOBPSU1",99,0)
 ;       (o) IGRL - Ignore RELEASE DATE, reverse anyway  
"RTN","PSOBPSU1",100,0)
 ;       (o) NDC  - NDC number related to the reversal (Note: might be an invalid NDC)
"RTN","PSOBPSU1",101,0)
 I '$D(RFL) S RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",102,0)
 I $$STATUS^PSOBPSUT(RX,RFL)="" Q
"RTN","PSOBPSU1",103,0)
 N RESP,STS,ACT,STAT,DA,STATUS,NOACT,REVECME S RSN=+$G(RSN),RTXT=$G(RTXT),REVECME=1
"RTN","PSOBPSU1",104,0)
 I RTXT="",RSN D
"RTN","PSOBPSU1",105,0)
 . S:RSN=2 RTXT="RX PLACED ON HOLD" S:RSN=3 RTXT="RX SUSPENDED" S:RSN=4 RTXT="RX RETURNED TO STOCK"
"RTN","PSOBPSU1",106,0)
 . S:RSN=5 RTXT="RX DELETED" S:RSN=7 RTXT="RX DISCONTINUED" S:RSN=8 RTXT="RX EDITED"
"RTN","PSOBPSU1",107,0)
 D CLSALL^PSOREJUT(RX,RFL,DUZ,RSN,RTXT)
"RTN","PSOBPSU1",108,0)
 I '$G(IGRL),$$RXRLDT^PSOBPSUT(RX,RFL) Q
"RTN","PSOBPSU1",109,0)
 ; - Reseting the Re-transmission flag if Rx is being suspended
"RTN","PSOBPSU1",110,0)
 I RSN=3!($$GET1^DIQ(52,RX,100,"I")=5) D RETRXF^PSOREJU2(RX,RFL,1)
"RTN","PSOBPSU1",111,0)
 S STATUS=$$STATUS^PSOBPSUT(RX,RFL),NOACT=0
"RTN","PSOBPSU1",112,0)
 I STATUS'="E PAYABLE",STATUS'="IN PROGRESS",STATUS'="E REVERSAL REJECTED",STATUS'="E REVERSAL STRANDED",STATUS'="E DUPLICATE" S NOACT=1
"RTN","PSOBPSU1",113,0)
 ; Only perform ECME reversal for a released CMOP if rx/fill is Discontinued.
"RTN","PSOBPSU1",114,0)
 I FROM="DC",$$CMOP^PSOBPSUT(RX,RFL) S REVECME=0
"RTN","PSOBPSU1",115,0)
 I REVECME S RESP=$$EN^BPSNCPDP(RX,RFL,$$DOS(RX,RFL),FROM,$$GETNDC^PSONDCUT(RX,RFL),RTXT)
"RTN","PSOBPSU1",116,0)
 N PSOTRIC S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOBPSU1",117,0)
 ; - Logging ECME Act Log
"RTN","PSOBPSU1",118,0)
 I '$G(NOACT),REVECME D
"RTN","PSOBPSU1",119,0)
 . S ACT=$S(PSOTRIC:"TRICARE ",1:"")_"Reversal sent to ECME: "_RTXT_$S($G(NDC)'="":" ("_NDC_")",1:"")_$$STS(RX,RFL,+RESP)
"RTN","PSOBPSU1",120,0)
 . D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOBPSU1",121,0)
 Q
"RTN","PSOBPSU1",122,0)
 ;
"RTN","PSOBPSU1",123,0)
DOS(RX,RFL,DATE) ; Return the Date Of Service for ECME
"RTN","PSOBPSU1",124,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",125,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",126,0)
 ;       (o) DATE - Possible Date Of Service
"RTN","PSOBPSU1",127,0)
 ;Output:    DOS  - Actual Date Of Service
"RTN","PSOBPSU1",128,0)
 I '$D(RFL) S RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",129,0)
 ; - Retrieving FILL DATE from file 52 if not passed
"RTN","PSOBPSU1",130,0)
 I $G(DATE)="" S DATE=$$RXRLDT^PSOBPSUT(RX,RFL)
"RTN","PSOBPSU1",131,0)
 ; - Retrieving FILL DATE from file 52 if not passed
"RTN","PSOBPSU1",132,0)
 I 'DATE S DATE=$$RXFLDT^PSOBPSUT(RX,RFL)
"RTN","PSOBPSU1",133,0)
 ; - Future Date not allowed
"RTN","PSOBPSU1",134,0)
 I DATE>DT!'DATE S DATE=DT
"RTN","PSOBPSU1",135,0)
 Q (DATE\1)
"RTN","PSOBPSU1",136,0)
 ;
"RTN","PSOBPSU1",137,0)
RELEASE(RX,RFL,USR) ; - Notifies IB that the Rx was RELEASED
"RTN","PSOBPSU1",138,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",139,0)
 ;       (o) RFL  - Refill # (Default: most recent)
"RTN","PSOBPSU1",140,0)
 ;       (o) USR  - User responsible for releasing the Rx (Default: .5 - Postmaster)
"RTN","PSOBPSU1",141,0)
 N IBAR,RXAR,FLDT,RFAR,PSOIBN
"RTN","PSOBPSU1",142,0)
 S:'$D(RFL) RFL=$$LSTRFL(RX)
"RTN","PSOBPSU1",143,0)
 S:'$D(USR) USR=.5
"RTN","PSOBPSU1",144,0)
 D GETS^DIQ(52,RX_",",".01;2;6;7;8;22","I","RXAR")
"RTN","PSOBPSU1",145,0)
 S DFN=+$G(RXAR(52,RX_",",2,"I"))
"RTN","PSOBPSU1",146,0)
 S IBAR("PRESCRIPTION")=RX,IBAR("RX NO")=$G(RXAR(52,RX_",",.01,"I"))
"RTN","PSOBPSU1",147,0)
 S IBAR("CLAIMID")=$E((RX#10000000)+10000000,2,8),IBAR("USER")=USR
"RTN","PSOBPSU1",148,0)
 S IBAR("DRUG")=RXAR(52,RX_",",6,"I"),IBAR("NDC")=$$GETNDC^PSONDCUT(RX,RFL)
"RTN","PSOBPSU1",149,0)
 S FLDT=$$RXFLDT^PSOBPSUT(RX,RFL) I FLDT>DT S FLDT=DT
"RTN","PSOBPSU1",150,0)
 S IBAR("FILL NUMBER")=RFL,IBAR("FILL DATE")=FLDT
"RTN","PSOBPSU1",151,0)
 S IBAR("QTY")=$G(RXAR(52,RX_",",7,"I")),IBAR("DAYS SUPPLY")=$G(RXAR(52,RX_",",8,"I"))
"RTN","PSOBPSU1",152,0)
 I RFL D
"RTN","PSOBPSU1",153,0)
 . D GETS^DIQ(52.1,RFL_","_RX_",",".01;1;1.1","I","RFAR")
"RTN","PSOBPSU1",154,0)
 . S IBAR("QTY")=$G(RFAR(52.1,RFL_","_RX_",",1,"I"))
"RTN","PSOBPSU1",155,0)
 . S IBAR("DAYS SUPPLY")=$G(RFAR(52.1,RFL_","_RX_",",1.1,"I"))
"RTN","PSOBPSU1",156,0)
 S IBAR("STATUS")="RELEASED"
"RTN","PSOBPSU1",157,0)
 S PSOIBN=$$STORESP^IBNCPDP(DFN,.IBAR)
"RTN","PSOBPSU1",158,0)
 Q
"RTN","PSOBPSU1",159,0)
 ;
"RTN","PSOBPSU1",160,0)
LSTRFL(RX) ;  - Returns the latest fill for the Rx
"RTN","PSOBPSU1",161,0)
 ; Input: (r) RX     - Rx IEN (#52)
"RTN","PSOBPSU1",162,0)
 ;Output:     LSTRFL - Most recent refill #
"RTN","PSOBPSU1",163,0)
 N I,LSTRFL
"RTN","PSOBPSU1",164,0)
 S (I,LSTRFL)=0 F  S I=$O(^PSRX(RX,1,I)) Q:'I  S LSTRFL=I
"RTN","PSOBPSU1",165,0)
 Q LSTRFL
"RTN","PSOBPSU1",166,0)
 ;
"RTN","PSOBPSU1",167,0)
ECMEACT(RX,RFL,COMM,USR) ; - Add an Act to the ECME Act Log (FILE 52)
"RTN","PSOBPSU1",168,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU1",169,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU1",170,0)
 ;       (r) COMM - Comments (up to 75 characters)
"RTN","PSOBPSU1",171,0)
 ;       (o) USR  - User logging the comments (Default: DUZ)
"RTN","PSOBPSU1",172,0)
 S:'$D(RFL) RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOBPSU1",173,0)
 D RXACT^PSOBPSU2(RX,RFL,COMM,"M",+$G(USR))
"RTN","PSOBPSU1",174,0)
 Q
"RTN","PSOBPSU1",175,0)
 ;
"RTN","PSOBPSU1",176,0)
STS(RX,RFL,RSP) ; Adds the Status to the ECME Act Log according to Rx/fill claim status Response
"RTN","PSOBPSU1",177,0)
 N STS
"RTN","PSOBPSU1",178,0)
 S STS=$S($$STATUS^PSOBPSUT(RX,RFL)'="IN PROGRESS"&($$STATUS^PSOBPSUT(RX,RFL)'=""):"-"_$$STATUS^PSOBPSUT(RX,RFL),1:"")
"RTN","PSOBPSU1",179,0)
 S:+RSP=1 STS="-NO SUBMISSION THROUGH ECME" S:+RSP=3 STS="-NO REVERSAL NEEDED" S:+RSP=4 STS="-NOT PROCESSED"
"RTN","PSOBPSU1",180,0)
 S:+RSP=5 STS="-SOFTWARE ERROR"_$S($P($G(RESP),"^",2)'="":" ("_$P(RESP,"^",2)_")",1:"")
"RTN","PSOBPSU1",181,0)
 I +RSP=2,$$STATUS^PSOBPSUT(RX,RFL)'="" S STS="-NOT BILLABLE:"_$S(PSOELIG="T":"TRICARE",PSOELIG="C":"CHAMPVA",1:"")_":"_$P(RSP,"^",2)
"RTN","PSOBPSU1",182,0)
 Q STS
"RTN","PSOBPSU2")
0^8^B47974509
"RTN","PSOBPSU2",1,0)
PSOBPSU2 ;BIRM/MFR - BPS (ECME) Utilities 2 ;10/15/04
"RTN","PSOBPSU2",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**260,287,289,341,290**;DEC 1997;Build 69
"RTN","PSOBPSU2",3,0)
 ;Reference to File 200 - NEW PERSON supported by IA 10060
"RTN","PSOBPSU2",4,0)
 ;Reference to DUR1^BPSNCPD3 supported by IA 4560
"RTN","PSOBPSU2",5,0)
 ;Reference to $$NCPDPQTY^PSSBPSUT supported by IA 4992
"RTN","PSOBPSU2",6,0)
 ; 
"RTN","PSOBPSU2",7,0)
MWC(RX,RFL) ; Returns whether a prescription is (M)ail, (W)indow or (C)MOP
"RTN","PSOBPSU2",8,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU2",9,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU2",10,0)
 ;Output: "M": MAIL / "W": WINDOW / "C": CMOP
"RTN","PSOBPSU2",11,0)
 ;
"RTN","PSOBPSU2",12,0)
 N MWC
"RTN","PSOBPSU2",13,0)
 ;
"RTN","PSOBPSU2",14,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOBPSU2",15,0)
 ;
"RTN","PSOBPSU2",16,0)
 ; - MAIL/WINDOW fields (Original and Refill)
"RTN","PSOBPSU2",17,0)
 I RFL S MWC=$$GET1^DIQ(52.1,RFL_","_RX,2,"I")
"RTN","PSOBPSU2",18,0)
 E  S MWC=$$GET1^DIQ(52,RX,11,"I")
"RTN","PSOBPSU2",19,0)
 S:MWC="" MWC="W"
"RTN","PSOBPSU2",20,0)
 ;
"RTN","PSOBPSU2",21,0)
 ; - Checking the RX SUSPENSE file (#52.5)
"RTN","PSOBPSU2",22,0)
 I $$GET1^DIQ(52,RX,100,"I")=5 D
"RTN","PSOBPSU2",23,0)
 . N RXS S RXS=+$O(^PS(52.5,"B",RX,0)) Q:'RXS
"RTN","PSOBPSU2",24,0)
 . I $$GET1^DIQ(52.5,RXS,3,"I")'="" S MWC="C" Q
"RTN","PSOBPSU2",25,0)
 . S MWC="M"
"RTN","PSOBPSU2",26,0)
 ;
"RTN","PSOBPSU2",27,0)
 ; - Checking the CMOP EVENT sub-file (#52.01)
"RTN","PSOBPSU2",28,0)
 I MWC'="C" D
"RTN","PSOBPSU2",29,0)
 . N CMP S CMP=0
"RTN","PSOBPSU2",30,0)
 . F  S CMP=$O(^PSRX(RX,4,CMP)) Q:'CMP  D  I MWC="C" Q
"RTN","PSOBPSU2",31,0)
 . . I $$GET1^DIQ(52.01,CMP_","_RX,2,"I")=RFL S MWC="C"
"RTN","PSOBPSU2",32,0)
 ;
"RTN","PSOBPSU2",33,0)
 Q MWC
"RTN","PSOBPSU2",34,0)
 ;
"RTN","PSOBPSU2",35,0)
RXACT(RX,RFL,COMM,TYPE,USR) ; - Add an Activity to the ECME Activity Log (PRESCRIPTION file)
"RTN","PSOBPSU2",36,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOBPSU2",37,0)
 ;       (o) RFL  - Refill #  (Default: most recent)
"RTN","PSOBPSU2",38,0)
 ;       (r) COMM - Comments (up to 75 characters)
"RTN","PSOBPSU2",39,0)
 ;       (r) TYPE - Comments type: (M-ECME,E-Edit, etc...) See file #52 DD for all values
"RTN","PSOBPSU2",40,0)
 ;       (o) USR  - User logging the comments (Default: DUZ)
"RTN","PSOBPSU2",41,0)
 ;
"RTN","PSOBPSU2",42,0)
 S:'$D(RFL) RFL=$$LSTRFL^PSOBPSU1(RX) S:'$D(USR) USR=DUZ
"RTN","PSOBPSU2",43,0)
 S:'$D(^VA(200,+USR,0)) USR=DUZ S COMM=$E($G(COMM),1,75)
"RTN","PSOBPSU2",44,0)
 ;
"RTN","PSOBPSU2",45,0)
 I COMM="" Q
"RTN","PSOBPSU2",46,0)
 I '$D(^PSRX(RX)) Q
"RTN","PSOBPSU2",47,0)
 ;
"RTN","PSOBPSU2",48,0)
 N PSOTRIC S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOBPSU2",49,0)
 I $E(COMM,1,7)'="TRICARE",PSOTRIC S COMM=$E("TRICARE-"_COMM,1,75)
"RTN","PSOBPSU2",50,0)
 N X,DIC,DA,DD,DO,DR,DINUM,Y,DLAYGO
"RTN","PSOBPSU2",51,0)
 S DA(1)=RX,DIC="^PSRX("_RX_",""A"",",DLAYGO=52.3,DIC(0)="L"
"RTN","PSOBPSU2",52,0)
 S DIC("DR")=".02///"_TYPE_";.03////"_USR_";.04///"_$S(TYPE'="M"&(RFL>5):RFL+1,1:RFL)_";.05///"_COMM
"RTN","PSOBPSU2",53,0)
 S X=$$NOW^XLFDT() D FILE^DICN
"RTN","PSOBPSU2",54,0)
 Q
"RTN","PSOBPSU2",55,0)
 ;
"RTN","PSOBPSU2",56,0)
ECMENUM(RX) ; Returns the ECME number for a specific prescription
"RTN","PSOBPSU2",57,0)
 N ECMENUM,STS,RF
"RTN","PSOBPSU2",58,0)
 S ECMENUM=$E(10000000+RX,2,8)
"RTN","PSOBPSU2",59,0)
 S STS=$$STATUS^PSOBPSUT(RX,0)
"RTN","PSOBPSU2",60,0)
 I STS="" D
"RTN","PSOBPSU2",61,0)
 . S RF=0 F  S RF=$O(^PSRX(RX,RF)) Q:'RF  D  I STS'="" Q
"RTN","PSOBPSU2",62,0)
 . . S STS=$$STATUS^PSOBPSUT(RX,RF)
"RTN","PSOBPSU2",63,0)
 I STS="" Q ""
"RTN","PSOBPSU2",64,0)
 Q ECMENUM
"RTN","PSOBPSU2",65,0)
 ;
"RTN","PSOBPSU2",66,0)
RXNUM(ECME) ; Returns the Rx number for a specific ECME number
"RTN","PSOBPSU2",67,0)
 ;
"RTN","PSOBPSU2",68,0)
 N RXNUM,FOUND,MAX,LFT,RAD,I,DIR,RX
"RTN","PSOBPSU2",69,0)
 S MAX=$O(^PSRX(999999999999),-1),LFT=0 I $L(MAX)>7 S LFT=$E(MAX,1,$L(MAX)-7)
"RTN","PSOBPSU2",70,0)
 S FOUND=0
"RTN","PSOBPSU2",71,0)
 F RAD=LFT:-1:0 D
"RTN","PSOBPSU2",72,0)
 . S RX=RAD*10000000+ECME I $D(^PSRX(RX,0)),$$ECMENUM(RX)=ECME S FOUND=FOUND+1,FOUND(FOUND)=RX
"RTN","PSOBPSU2",73,0)
 ;
"RTN","PSOBPSU2",74,0)
 I FOUND<2 D
"RTN","PSOBPSU2",75,0)
 . I FOUND=0 S FOUND=-1 Q
"RTN","PSOBPSU2",76,0)
 . S FOUND=FOUND(1)
"RTN","PSOBPSU2",77,0)
 E  D
"RTN","PSOBPSU2",78,0)
 . W ! F I=1:1:FOUND W !?5,I,". ",$$GET1^DIQ(52,FOUND(I),.01),?25,$$GET1^DIQ(52,FOUND(I),6)
"RTN","PSOBPSU2",79,0)
 . W ! S DIR(0)="NA^1:"_FOUND,DIR("A")="Select one: ",DIR("B")=1
"RTN","PSOBPSU2",80,0)
 . D ^DIR I $D(DIRUT) S FOUND=-1 Q
"RTN","PSOBPSU2",81,0)
 . S FOUND=FOUND(Y)
"RTN","PSOBPSU2",82,0)
 ;
"RTN","PSOBPSU2",83,0)
 Q FOUND
"RTN","PSOBPSU2",84,0)
 ;
"RTN","PSOBPSU2",85,0)
ELIG(RX,RFL,PSOELIG) ;Stores eligibility flag
"RTN","PSOBPSU2",86,0)
 I RFL>0,'$D(^PSRX(RX,1,RFL,0)) QUIT
"RTN","PSOBPSU2",87,0)
 N DA,DIE,X,Y,PSOTRIC
"RTN","PSOBPSU2",88,0)
 I 'RFL S DA=RX,DIE="^PSRX(",DR="85///"_PSOELIG D ^DIE
"RTN","PSOBPSU2",89,0)
 I RFL S DA=RFL,DA(1)=RX,DIE="^PSRX("_DA(1)_",1,",DR="85///"_PSOELIG D ^DIE
"RTN","PSOBPSU2",90,0)
 Q
"RTN","PSOBPSU2",91,0)
 ;
"RTN","PSOBPSU2",92,0)
ECMESTAT(RX,RFL) ;called from local mail
"RTN","PSOBPSU2",93,0)
 ;Input: 
"RTN","PSOBPSU2",94,0)
 ; RX = Prescription File IEN
"RTN","PSOBPSU2",95,0)
 ; RFL = Refill
"RTN","PSOBPSU2",96,0)
 ;Output:
"RTN","PSOBPSU2",97,0)
 ; 0 for not allowed to print from suspense
"RTN","PSOBPSU2",98,0)
 ; 1 for allowed to print from suspense
"RTN","PSOBPSU2",99,0)
 ;
"RTN","PSOBPSU2",100,0)
 N STATUS,SHDT,PSOTRIC,TRICCK
"RTN","PSOBPSU2",101,0)
 S STATUS=$$STATUS^PSOBPSUT(RX,RFL)
"RTN","PSOBPSU2",102,0)
 ;IN PROGRESS claims - try again.  If still IN PROGRESS, do not allow to print
"RTN","PSOBPSU2",103,0)
 I STATUS["IN PROGRESS" H 5 S STATUS=$$STATUS^PSOBPSUT(RX,RFL) I STATUS["IN PROGRESS" Q 0
"RTN","PSOBPSU2",104,0)
 ;no ECME status, allow to print.  This will eliminate 90% of the cases
"RTN","PSOBPSU2",105,0)
 I STATUS="" Q 1
"RTN","PSOBPSU2",106,0)
 ;check for Tricare rejects, not allowed to go to print until resolved.
"RTN","PSOBPSU2",107,0)
 ;it does not matter much for this API but usually Tricare processing is done first.
"RTN","PSOBPSU2",108,0)
 S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,.PSOTRIC)
"RTN","PSOBPSU2",109,0)
 I PSOTRIC,STATUS'["PAYABLE" Q 0
"RTN","PSOBPSU2",110,0)
 ;DUR (88)/RTS (79) reject codes are not allowed to print until resolved.
"RTN","PSOBPSU2",111,0)
 I $$FIND^PSOREJUT(RX,RFL,,"79,88") Q 0
"RTN","PSOBPSU2",112,0)
 ;check for suspense hold date/host reject errors
"RTN","PSOBPSU2",113,0)
 I $$DUR(RX,RFL)=0 Q 0
"RTN","PSOBPSU2",114,0)
 Q 1
"RTN","PSOBPSU2",115,0)
 ;
"RTN","PSOBPSU2",116,0)
 ;Description:
"RTN","PSOBPSU2",117,0)
 ;This function checks to see if a RX should be submitted to ECME
"RTN","PSOBPSU2",118,0)
 ;Submit when:
"RTN","PSOBPSU2",119,0)
 ;  RX/Fill was not submitted before (STATUS="")
"RTN","PSOBPSU2",120,0)
 ;  Previous submission had Host Reject Error Code(s)
"RTN","PSOBPSU2",121,0)
 ;Input:
"RTN","PSOBPSU2",122,0)
 ;  RX = Prescription file #52 IEN
"RTN","PSOBPSU2",123,0)
 ;  RFL = Refill number
"RTN","PSOBPSU2",124,0)
 ;Returns:
"RTN","PSOBPSU2",125,0)
 ;  1 = OK to resubmit
"RTN","PSOBPSU2",126,0)
 ;  0 = Don't resubmit
"RTN","PSOBPSU2",127,0)
ECMEST2(RX,RFL) ;
"RTN","PSOBPSU2",128,0)
 N STATUS
"RTN","PSOBPSU2",129,0)
 S STATUS=$$STATUS^PSOBPSUT(RX,RFL)
"RTN","PSOBPSU2",130,0)
 ; Never submitted before, OK to submit
"RTN","PSOBPSU2",131,0)
 I STATUS="" Q 1
"RTN","PSOBPSU2",132,0)
 ; If status other than E REJECTED, don't resubmit
"RTN","PSOBPSU2",133,0)
 I STATUS'="E REJECTED" Q 0
"RTN","PSOBPSU2",134,0)
 ; Check for host reject codes(s)
"RTN","PSOBPSU2",135,0)
 Q $$HOSTREJ(RX,RFL,1)
"RTN","PSOBPSU2",136,0)
 ;
"RTN","PSOBPSU2",137,0)
 ;Description: ePharmacy
"RTN","PSOBPSU2",138,0)
 ;This subroutine checks an RX/FILL for Host Reject Errors returned
"RTN","PSOBPSU2",139,0)
 ;from previous ECME submissions. The host reject errors checked are M6, M8, NN, and 99.
"RTN","PSOBPSU2",140,0)
 ;Note that host reject errors do not pass to the pharmacy reject worklist so it's necessary
"RTN","PSOBPSU2",141,0)
 ;to check ECME for these type errors.
"RTN","PSOBPSU2",142,0)
 ;Input: 
"RTN","PSOBPSU2",143,0)
 ; RX = Prescription File IEN
"RTN","PSOBPSU2",144,0)
 ; RFL = Refill
"RTN","PSOBPSU2",145,0)
 ; ONE = Either 1 or 0 - Defaults to 1
"RTN","PSOBPSU2",146,0)
 ; If 1, At least ONE reject code associated with the RX/FILL must 
"RTN","PSOBPSU2",147,0)
 ;   match either M6, M8, NN, or 99.
"RTN","PSOBPSU2",148,0)
 ; If 0, ALL reject codes must match either M6, M8, NN, or 99
"RTN","PSOBPSU2",149,0)
 ; REJ = (o) reject information from called from routine to be passed back. (contains data returned from DUR1^BPSNCPD3)
"RTN","PSOBPSU2",150,0)
 ;Return:
"RTN","PSOBPSU2",151,0)
 ; 0 = no host rejects exists based on ONE parameter
"RTN","PSOBPSU2",152,0)
 ; 1 = host reject exists based on ONE parameter
"RTN","PSOBPSU2",153,0)
HOSTREJ(RX,RFL,ONE) ; called from PSXRPPL2 and this routine
"RTN","PSOBPSU2",154,0)
 N IDX,TXT,CODE,HRCODE,HRQUIT,RETV,REJ
"RTN","PSOBPSU2",155,0)
 S IDX="",(RETV,HRQUIT)=0
"RTN","PSOBPSU2",156,0)
 I '$D(ONE) S ONE=1
"RTN","PSOBPSU2",157,0)
 ;for print from suspense there will only be primary insurance or an index of 1 in REJ array
"RTN","PSOBPSU2",158,0)
 D DUR1^BPSNCPD3(RX,RFL,.REJ) ; Get reject list from last submission if not present
"RTN","PSOBPSU2",159,0)
 S TXT=$G(REJ(1,"REJ CODE LST"))
"RTN","PSOBPSU2",160,0)
 Q:TXT="" 0
"RTN","PSOBPSU2",161,0)
 I ONE=0,TXT'["," S ONE=1
"RTN","PSOBPSU2",162,0)
 F I=1:1:$L(TXT,",") S CODE=$P(TXT,",",I) D  Q:HRQUIT
"RTN","PSOBPSU2",163,0)
 . F HRCODE=99,"M6","M8","NN" D  Q:HRQUIT
"RTN","PSOBPSU2",164,0)
 . . I CODE=HRCODE S RETV=1 I ONE S HRQUIT=1 Q
"RTN","PSOBPSU2",165,0)
 . . I CODE'=HRCODE,RETV=1 S RETV=0,HRQUIT=1 Q
"RTN","PSOBPSU2",166,0)
 Q RETV
"RTN","PSOBPSU2",167,0)
 ;
"RTN","PSOBPSU2",168,0)
 ;Description: 
"RTN","PSOBPSU2",169,0)
 ;Input: RX = Prescription file #52 IEN
"RTN","PSOBPSU2",170,0)
 ; RFL = Refill number
"RTN","PSOBPSU2",171,0)
 ;Returns: A value of 0 (zero) will be returned when reject codes M6, M8,
"RTN","PSOBPSU2",172,0)
 ;NN, and 99 are present OR if on susp hold which means the prescription should not 
"RTN","PSOBPSU2",173,0)
 ;be printed from suspense. Otherwise, a value of 1(one) will be returned.
"RTN","PSOBPSU2",174,0)
DUR(RX,RFL) ;
"RTN","PSOBPSU2",175,0)
 N REJ,IDX,TXT,CODE,SHOLD,SHCODE,ESTAT,SHDT
"RTN","PSOBPSU2",176,0)
 S SHOLD=1,IDX=""
"RTN","PSOBPSU2",177,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOBPSU2",178,0)
 S SHDT=$$SHDT(RX,RFL) ; Get suspense hold date for rx/refill
"RTN","PSOBPSU2",179,0)
 I SHDT'="",SHDT'<$$FMADD^XLFDT(DT,1) Q 0
"RTN","PSOBPSU2",180,0)
 I $$HOSTREJ^PSOBPSU2(RX,RFL,1) I SHDT="" S SHOLD=0 D SHDTLOG(RX,RFL)
"RTN","PSOBPSU2",181,0)
 Q SHOLD
"RTN","PSOBPSU2",182,0)
 ;
"RTN","PSOBPSU2",183,0)
 ;Description: This subroutine sets the EPHARMACY SUSPENSE HOLD DATE field
"RTN","PSOBPSU2",184,0)
 ;for the rx or refill to tomorrow and adds an entry to the SUSPENSE Activity Log.
"RTN","PSOBPSU2",185,0)
 ;Input: RX = Prescription File IEN
"RTN","PSOBPSU2",186,0)
 ; RFL = Refill
"RTN","PSOBPSU2",187,0)
SHDTLOG(RX,RFL) ;
"RTN","PSOBPSU2",188,0)
 N DA,DIE,DR,COMM,SHDT
"RTN","PSOBPSU2",189,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOBPSU2",190,0)
 S SHDT=$$FMADD^XLFDT(DT,1)
"RTN","PSOBPSU2",191,0)
 S COMM="SUSPENSE HOLD until "_$$FMTE^XLFDT(SHDT,"2D")_" due to host reject error."
"RTN","PSOBPSU2",192,0)
 I RFL=0 S DA=RX,DIE="^PSRX(",DR="86///"_SHDT D ^DIE
"RTN","PSOBPSU2",193,0)
 E  S DA=RFL,DA(1)=RX,DIE="^PSRX("_DA(1)_",1,",DR="86///"_SHDT D ^DIE
"RTN","PSOBPSU2",194,0)
 D RXACT(RX,RFL,COMM,"S",+$G(DUZ)) ; Create Activity Log entry
"RTN","PSOBPSU2",195,0)
 Q
"RTN","PSOBPSU2",196,0)
 ;
"RTN","PSOBPSU2",197,0)
 ;Description: This function returns the EPHARMACY SUSPENSE HOLD DATE field
"RTN","PSOBPSU2",198,0)
 ;for the rx or refill
"RTN","PSOBPSU2",199,0)
 ;Input: RX = Prescription File IEN
"RTN","PSOBPSU2",200,0)
 ; RFL = Refill
"RTN","PSOBPSU2",201,0)
SHDT(RX,RFL) ;
"RTN","PSOBPSU2",202,0)
 N FILE,IENS
"RTN","PSOBPSU2",203,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOBPSU2",204,0)
 S FILE=$S(RFL=0:52,1:52.1),IENS=$S(RFL=0:RX_",",1:RFL_","_RX_",")
"RTN","PSOBPSU2",205,0)
 Q $$GET1^DIQ(FILE,IENS,86,"I")
"RTN","PSOBPSU2",206,0)
 ;
"RTN","PSOBPSU2",207,0)
ELOG(RESP) ; - due to size of PSOBPSU1 exceeding limit 
"RTN","PSOBPSU2",208,0)
 ; -Logs an ECME Activity Log if Rx Qty is different than Billing Qty
"RTN","PSOBPSU2",209,0)
 I '$G(RESP),$T(NCPDPQTY^PSSBPSUT)'="" D
"RTN","PSOBPSU2",210,0)
 . N DRUG,RXQTY,BLQTY,BLDU,Z
"RTN","PSOBPSU2",211,0)
 . S DRUG=$$GET1^DIQ(52,RX,6,"I")
"RTN","PSOBPSU2",212,0)
 . S RXQTY=$S('RFL:$$GET1^DIQ(52,RX,7,"I"),1:$$GET1^DIQ(52.1,RFL_","_RX,1))/1
"RTN","PSOBPSU2",213,0)
 . S Z=$$NCPDPQTY^PSSBPSUT(DRUG,RXQTY),BLQTY=Z/1,BLDU=$P(Z,"^",2)
"RTN","PSOBPSU2",214,0)
 . I RXQTY'=BLQTY D
"RTN","PSOBPSU2",215,0)
 . . D RXACT(RX,RFL,"BILLING QUANTITY submitted: "_$J(BLQTY,0,$L($P(BLQTY,".",2)))_" ("_BLDU_")","M",DUZ)
"RTN","PSOBPSU2",216,0)
 Q
"RTN","PSOBPSU2",217,0)
 ;
"RTN","PSOBPSU2",218,0)
UPDFL(RXREC,SUB,INDT) ;update fill date with release date when NDC changes at CMOP and OPAI auto-release
"RTN","PSOBPSU2",219,0)
 ;Input: RXREC = Prescription File IEN
"RTN","PSOBPSU2",220,0)
 ;         SUB = Refill
"RTN","PSOBPSU2",221,0)
 ;        INDT = Release date
"RTN","PSOBPSU2",222,0)
 N DA,DIE,DR,PSOX,SFN,DEAD,SUB,XOK,OLD,X,II,EXDAT,OFILLD,COM,CNT,RFCNT,RF
"RTN","PSOBPSU2",223,0)
 S DEAD=0,SFN=""
"RTN","PSOBPSU2",224,0)
 S EXDAT=INDT I EXDAT["." S EXDAT=$P(EXDAT,".")
"RTN","PSOBPSU2",225,0)
 I '$D(SUB) S SUB=0 F II=0:0 S II=$O(^PSRX(RXREC,1,II)) Q:'II  S SUB=+II
"RTN","PSOBPSU2",226,0)
 I 'SUB S OFILLD=$$GET1^DIQ(52,RXREC,22,"I") Q:OFILLD=EXDAT  D
"RTN","PSOBPSU2",227,0)
 .S (X,OLD)=$P(^PSRX(RXREC,2),"^",2),DA=RXREC,DR="22///"_EXDAT_";101///"_EXDAT,DIE=52
"RTN","PSOBPSU2",228,0)
 .D ^DIE K DIE,DA
"RTN","PSOBPSU2",229,0)
 I SUB S (OLD,X)=+$P($G(^PSRX(RXREC,1,SUB,0)),"^"),DA(1)=RXREC,DA=SUB,OFILLD=$$GET1^DIQ(52.1,DA_","_RXREC,.01,"I") Q:OFILLD=EXDAT  D
"RTN","PSOBPSU2",230,0)
 . S DIE="^PSRX("_DA(1)_",1,",DR=".01///"_EXDAT D ^DIE K DIE S $P(^PSRX(RXREC,3),"^")=EXDAT
"RTN","PSOBPSU2",231,0)
 Q:$D(DTOUT)!($D(DUOUT))
"RTN","PSOBPSU2",232,0)
 S DA=RXREC
"RTN","PSOBPSU2",233,0)
 D AREC^PSOSUCH1
"RTN","PSOBPSU2",234,0)
FIN ;
"RTN","PSOBPSU2",235,0)
 Q
"RTN","PSOREJP1")
0^5^B70021673
"RTN","PSOREJP1",1,0)
PSOREJP1 ;BIRM/MFR - Third Party Reject Display Screen ;04/29/05
"RTN","PSOREJP1",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,247,260,281,287,289,290**;DEC 1997;Build 69
"RTN","PSOREJP1",3,0)
 ;Reference to File 9002313.93 - BPS NCPDP REJECT CODES supported by IA 4720
"RTN","PSOREJP1",4,0)
 ;Reference to ^PS(59.7 supported by IA 694
"RTN","PSOREJP1",5,0)
 ;Reference to ^PSDRUG("AQ" supported by IA 3165
"RTN","PSOREJP1",6,0)
 ;
"RTN","PSOREJP1",7,0)
EN(RX,REJ,CHANGE) ; Entry point
"RTN","PSOREJP1",8,0)
 ;
"RTN","PSOREJP1",9,0)
 ; - DO NOT change the IF logic below as both of them might get executed (intentional)
"RTN","PSOREJP1",10,0)
 N FILL,LASTLN,PSOTRIC,PSOCODE,PSOTCODE
"RTN","PSOREJP1",11,0)
 S FILL=+$$GET1^DIQ(52.25,REJ_","_RX,5)
"RTN","PSOREJP1",12,0)
 S PSOTRIC="",PSOTRIC=$$TRIC(RX,FILL,PSOTRIC),PSOCODE=$$GET1^DIQ(52.25,REJ_","_RX,.01)
"RTN","PSOREJP1",13,0)
 S PSOTCODE=0 S:PSOCODE'=79&(PSOCODE'=88)&(PSOTRIC) PSOTCODE=1
"RTN","PSOREJP1",14,0)
 I $$CLOSED(RX,REJ) D EN^VALM("PSO REJECT DISPLAY - RESOLVED")
"RTN","PSOREJP1",15,0)
 I '$$CLOSED(RX,REJ)&(PSOTCODE) D EN^VALM("PSO REJECT TRICARE")
"RTN","PSOREJP1",16,0)
 I '$$CLOSED(RX,REJ)&('PSOTCODE) D EN^VALM("PSO REJECT DISPLAY")
"RTN","PSOREJP1",17,0)
 D FULL^VALM1
"RTN","PSOREJP1",18,0)
 Q
"RTN","PSOREJP1",19,0)
 ;
"RTN","PSOREJP1",20,0)
HDR      ; - Builds the Header section
"RTN","PSOREJP1",21,0)
 N LINE1,LINE2,X
"RTN","PSOREJP1",22,0)
 S VALMHDR(1)=$$DVINFO^PSOREJU2(RX,FILL,1),VALMHDR(2)=$$PTINFO^PSOREJU2(RX,1)
"RTN","PSOREJP1",23,0)
 S VALMHDR(3)=$$RXINFO^PSOREJP3(RX,FILL,1),VALMHDR(4)=$$RXINFO^PSOREJP3(RX,FILL,2)
"RTN","PSOREJP1",24,0)
 Q
"RTN","PSOREJP1",25,0)
 ;
"RTN","PSOREJP1",26,0)
TRIC(RX,RFL,PSOTRIC) ; - Return 1 for TRICARE or 0 (zero) for not TRICARE
"RTN","PSOREJP1",27,0)
 S PSOTRIC="",PSOTRIC=$S(RFL=0&($$GET1^DIQ(52,RX_",",85,"I")="T"):1,$$GET1^DIQ(52.1,RFL_","_RX_",",85,"I")="T":1,1:0)
"RTN","PSOREJP1",28,0)
 Q PSOTRIC
"RTN","PSOREJP1",29,0)
 ;
"RTN","PSOREJP1",30,0)
INIT ; Builds the Body section
"RTN","PSOREJP1",31,0)
 N DATA,LINE
"RTN","PSOREJP1",32,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJP1",33,0)
 S PSOTRIC="",PSOTRIC=$$TRIC(RX,RFL,PSOTRIC)
"RTN","PSOREJP1",34,0)
 F I=1:1:$G(LASTLN) D RESTORE^VALM10(I)
"RTN","PSOREJP1",35,0)
 K ^TMP("PSOREJP1",$J) S VALMCNT=0,LINE=0
"RTN","PSOREJP1",36,0)
 D GET^PSOREJU2(RX,FILL,.DATA,REJ,1)
"RTN","PSOREJP1",37,0)
 D REJ                   ; Display the REJECT Information
"RTN","PSOREJP1",38,0)
 D OTH                   ; Display the Other Rejects Information
"RTN","PSOREJP1",39,0)
 D COM^PSOREJP3          ; Display the Comment
"RTN","PSOREJP1",40,0)
 D INS                   ; Display the Insurance Information
"RTN","PSOREJP1",41,0)
 D CLS                   ; Display the Resolution Information
"RTN","PSOREJP1",42,0)
 S VALMCNT=LINE
"RTN","PSOREJP1",43,0)
 Q
"RTN","PSOREJP1",44,0)
 ;
"RTN","PSOREJP1",45,0)
REJ ; - DUR Information
"RTN","PSOREJP1",46,0)
 N TYPE,PFLDT,TREJ,TDATA,PSOTRIC S TDATA=""
"RTN","PSOREJP1",47,0)
 S PSOTRIC="",PSOTRIC=$$TRIC(RX,FILL,PSOTRIC)
"RTN","PSOREJP1",48,0)
 I $G(PSOTRIC) D
"RTN","PSOREJP1",49,0)
 . D SETLN("REJECT Information"_$S($G(PSOTRIC):" (TRICARE)",1:""),1,1)
"RTN","PSOREJP1",50,0)
 . S TDATA=$$EXP(DATA(REJ,"CODE"))_" ("_$G(DATA(REJ,"CODE"))_") "
"RTN","PSOREJP1",51,0)
 . D SETLN("Date/Time     : "_$$FMTE^XLFDT($G(DATA(REJ,"DATE/TIME"))),,,18)
"RTN","PSOREJP1",52,0)
 . D SETLN("Reject(s)     : "_TDATA,,,18)
"RTN","PSOREJP1",53,0)
 . F I=1:1 Q:'$D(TDATA(I))  D SETLN("              : "_TDATA(I),,,18)
"RTN","PSOREJP1",54,0)
 . D SETLN("Status        : "_$G(DATA(REJ,"STATUS"))_" - "_$$STATUS^PSOBPSUT(RX,FILL),,,18)
"RTN","PSOREJP1",55,0)
 . ;REJDATA(REJ,"OTHER REJECTS"
"RTN","PSOREJP1",56,0)
 I '$G(PSOTRIC) D
"RTN","PSOREJP1",57,0)
 .D SETLN("REJECT Information",1,1)
"RTN","PSOREJP1",58,0)
 .S TYPE=$S($G(DATA(REJ,"CODE"))=79:"79 - REFILL TOO SOON",1:"")
"RTN","PSOREJP1",59,0)
 .I TYPE="" S TYPE=DATA(REJ,"CODE")_" - "_$E($$EXP(DATA(REJ,"CODE")),1,23)_"-"
"RTN","PSOREJP1",60,0)
 .D SETLN("Reject Type    : "_TYPE_" received on "_$$FMTE^XLFDT($G(DATA(REJ,"DATE/TIME"))),,,18)
"RTN","PSOREJP1",61,0)
 .D SETLN("Reject Status  : "_$G(DATA(REJ,"STATUS")),,,18)
"RTN","PSOREJP1",62,0)
 .D SET("PAYER MESSAGE",63)
"RTN","PSOREJP1",63,0)
 .D SET("REASON",63)
"RTN","PSOREJP1",64,0)
 .S PFLDT=$$FMTE^XLFDT($G(DATA(REJ,"PLAN PREVIOUS FILL DATE")))
"RTN","PSOREJP1",65,0)
 .D SET("DUR TEXT",63,$S(PFLDT="":1,1:0))
"RTN","PSOREJP1",66,0)
 .I PFLDT'="" D SETLN("Last Fill Date : "_PFLDT_" (from payer)",,1,18)
"RTN","PSOREJP1",67,0)
 Q
"RTN","PSOREJP1",68,0)
 ;
"RTN","PSOREJP1",69,0)
OTH ; - Other Rejects Information
"RTN","PSOREJP1",70,0)
 N LST,I,RJC,J,LAST
"RTN","PSOREJP1",71,0)
 S LST=$G(DATA(REJ,"OTHER REJECTS")) I LST="" Q
"RTN","PSOREJP1",72,0)
 D SETLN()
"RTN","PSOREJP1",73,0)
 D SETLN("OTHER REJECTS",1,1)
"RTN","PSOREJP1",74,0)
 F I=1:1:$L(LST,",") S RJC=$P(LST,",",I) D
"RTN","PSOREJP1",75,0)
 . S LAST=1 F J=(I+1):1:$L(LST,",") I $P(LST,",",J)'="" S LAST=0 Q
"RTN","PSOREJP1",76,0)
 . I RJC'="" D SETLN(RJC_" - "_$$EXP(RJC),,$S(LAST:1,1:0),6)
"RTN","PSOREJP1",77,0)
 Q
"RTN","PSOREJP1",78,0)
 ;
"RTN","PSOREJP1",79,0)
INS ; - Insurance Information
"RTN","PSOREJP1",80,0)
 D SETLN()
"RTN","PSOREJP1",81,0)
 D SETLN("INSURANCE Information",1,1)
"RTN","PSOREJP1",82,0)
 N PSOINS,PSOINS1,I
"RTN","PSOREJP1",83,0)
 S PSOINS=$G(DATA(REJ,"INSURANCE NAME"))
"RTN","PSOREJP1",84,0)
 F I=1:1:(50-($L(PSOINS)+18)) S PSOINS=PSOINS_" "
"RTN","PSOREJP1",85,0)
 S PSOINS1=$G(DATA(REJ,"COB"))
"RTN","PSOREJP1",86,0)
 I PSOINS1="SECONDARY" S PSOINS=PSOINS_"Coord. Of Benefits: "_PSOINS1
"RTN","PSOREJP1",87,0)
 D SETLN("Insurance      : "_PSOINS,,,18)
"RTN","PSOREJP1",88,0)
 D SETLN("Contact        : "_$G(DATA(REJ,"PLAN CONTACT")),,,18)
"RTN","PSOREJP1",89,0)
 D SETLN("Group Name     : "_$G(DATA(REJ,"GROUP NAME")),,,18)
"RTN","PSOREJP1",90,0)
 D SETLN("Group Number   : "_$G(DATA(REJ,"GROUP NUMBER")),,,18)
"RTN","PSOREJP1",91,0)
 D SETLN("Cardholder ID  : "_$G(DATA(REJ,"CARDHOLDER ID")),,1,18)
"RTN","PSOREJP1",92,0)
 Q
"RTN","PSOREJP1",93,0)
 ;
"RTN","PSOREJP1",94,0)
CLS ; - Resolution Information
"RTN","PSOREJP1",95,0)
 N X
"RTN","PSOREJP1",96,0)
 I '$$CLOSED(RX,REJ) Q
"RTN","PSOREJP1",97,0)
 D SETLN()
"RTN","PSOREJP1",98,0)
 D SETLN("RESOLUTION Information",1,1)
"RTN","PSOREJP1",99,0)
 D SETLN("Resolved By    : "_$G(DATA(REJ,"CLOSED BY")),,,18)
"RTN","PSOREJP1",100,0)
 D SETLN("Date/Time      : "_$G(DATA(REJ,"CLOSED DATE/TIME")),,,18)
"RTN","PSOREJP1",101,0)
 I $G(DATA(REJ,"CLOSE COMMENTS"))'="" D SET("CLOSE COMMENTS",63)
"RTN","PSOREJP1",102,0)
 I $G(DATA(REJ,"COD1"))'="" D SETLN("Reason for Svc : "_$$OVRX^PSOREJU1(1,$G(DATA(REJ,"COD1"))),,,18)
"RTN","PSOREJP1",103,0)
 I $G(DATA(REJ,"COD2"))'="" D SETLN("Profes. Svc    : "_$$OVRX^PSOREJU1(2,$G(DATA(REJ,"COD2"))),,,18)
"RTN","PSOREJP1",104,0)
 I $G(DATA(REJ,"COD3"))'="" D SETLN("Result of Svc  : "_$$OVRX^PSOREJU1(3,$G(DATA(REJ,"COD3"))),,,18)
"RTN","PSOREJP1",105,0)
 I $G(DATA(REJ,"CLA CODE"))'="" D
"RTN","PSOREJP1",106,0)
 . N CLAPNTR S CLAPNTR=$$GET1^DIQ(52.25,REJ_","_RX_",",24,"I")
"RTN","PSOREJP1",107,0)
 . S X=DATA(REJ,"CLA CODE")_" - "_$$GET1^DIQ(9002313.25,CLAPNTR,".02")
"RTN","PSOREJP1",108,0)
 . D SETLN("Clarific. Code : "_X,,,18)
"RTN","PSOREJP1",109,0)
 I $G(DATA(REJ,"PRIOR AUTH TYPE"))'="" D
"RTN","PSOREJP1",110,0)
 . S X=$$GET1^DIQ(52.25,REJ_","_RX,25,"I")_" - "_(DATA(REJ,"PRIOR AUTH TYPE"))
"RTN","PSOREJP1",111,0)
 . D SETLN("Prior Auth.Type: "_X,,,18),SETLN("Prior Auth. #  : "_DATA(REJ,"PRIOR AUTH NUMBER"),,,18)
"RTN","PSOREJP1",112,0)
 D SETLN("Reason         : "_$G(DATA(REJ,"CLOSE REASON")),,1,18)
"RTN","PSOREJP1",113,0)
 Q
"RTN","PSOREJP1",114,0)
 ;
"RTN","PSOREJP1",115,0)
 ;
"RTN","PSOREJP1",116,0)
SET(FIELD,L,UND) ; Sets the lines for fields that require text wrapping
"RTN","PSOREJP1",117,0)
 N TXT,T
"RTN","PSOREJP1",118,0)
 S TXT=DATA(REJ,FIELD) I $L(TXT)'>L D SETLN($$LABEL(FIELD)_TXT,,$S($G(UND):1,1:0),80-L) Q
"RTN","PSOREJP1",119,0)
 F I=1:1 Q:TXT=""  D
"RTN","PSOREJP1",120,0)
 . I I=1 D SETLN($$LABEL(FIELD)_$E(TXT,1,L),,,80-L) S TXT=$E(TXT,L+1,999) Q
"RTN","PSOREJP1",121,0)
 . S T="",$E(T,81-L)=$E(TXT,1,L) D SETLN(T,,$S($E(TXT,L+1,999)=""&$G(UND):1,1:0),80-L) S TXT=$E(TXT,L+1,999)
"RTN","PSOREJP1",122,0)
 Q
"RTN","PSOREJP1",123,0)
 ;
"RTN","PSOREJP1",124,0)
LABEL(FIELD) ; Sets the label for the field
"RTN","PSOREJP1",125,0)
 I FIELD="REASON" Q "Reason         : "
"RTN","PSOREJP1",126,0)
 I FIELD="PAYER MESSAGE" Q "Payer Message  : "
"RTN","PSOREJP1",127,0)
 I FIELD="DUR TEXT" Q "DUR Text       : "
"RTN","PSOREJP1",128,0)
 I FIELD="CLOSE COMMENTS" Q "Comments       : "
"RTN","PSOREJP1",129,0)
 Q ""
"RTN","PSOREJP1",130,0)
 ;
"RTN","PSOREJP1",131,0)
VIEW ; - Rx View hidden action
"RTN","PSOREJP1",132,0)
 N VALMCNT,TITLE
"RTN","PSOREJP1",133,0)
 I $G(PSOBACK) D  Q
"RTN","PSOREJP1",134,0)
 . S VALMSG="Not available through Backdoor!",VALMBCK="R"
"RTN","PSOREJP1",135,0)
 S TITLE=VALM("TITLE")
"RTN","PSOREJP1",136,0)
 ;
"RTN","PSOREJP1",137,0)
 ; - DO structure used to avoid losing variables RX,FILL,REJ,LINE,TITLE
"RTN","PSOREJP1",138,0)
 DO
"RTN","PSOREJP1",139,0)
 . N PSOVDA,DA,PS
"RTN","PSOREJP1",140,0)
 . S (PSOVDA,DA)=RX,PS="REJECT"
"RTN","PSOREJP1",141,0)
 . N RX,REJ,FILL,LINE,TITLE D DP^PSORXVW
"RTN","PSOREJP1",142,0)
 ;
"RTN","PSOREJP1",143,0)
 S VALMBCK="R",VALM("TITLE")=TITLE
"RTN","PSOREJP1",144,0)
 Q
"RTN","PSOREJP1",145,0)
 ;
"RTN","PSOREJP1",146,0)
EDT ; - Rx Edit hidden action
"RTN","PSOREJP1",147,0)
 N VALMCNT,TITLE
"RTN","PSOREJP1",148,0)
 I $G(PSOBACK) D  Q
"RTN","PSOREJP1",149,0)
 . S VALMSG="Not available through Backdoor!",VALMBCK="R"
"RTN","PSOREJP1",150,0)
 S TITLE=VALM("TITLE")
"RTN","PSOREJP1",151,0)
 ;
"RTN","PSOREJP1",152,0)
 ; - DO structure used to avoid losing variables RX,FILL,REJ,LINE,TITLE
"RTN","PSOREJP1",153,0)
 DO
"RTN","PSOREJP1",154,0)
 . N PSOSITE,ORN,PSOPAR,PSOLIST
"RTN","PSOREJP1",155,0)
 . S PSOSITE=$$RXSITE^PSOBPSUT(RX,FILL),ORN=RX
"RTN","PSOREJP1",156,0)
 . S PSOPAR=$G(^PS(59,PSOSITE,1)),PSOLIST(1)=ORN_","
"RTN","PSOREJP1",157,0)
 . N RX,REJ,FILL,LINE,TITLE D EPH^PSORXEDT
"RTN","PSOREJP1",158,0)
 ;
"RTN","PSOREJP1",159,0)
 K VALMBCK I $$CLOSED(RX,REJ),$D(PSOSTFLT),PSOSTFLT="U" S CHANGE=1 Q
"RTN","PSOREJP1",160,0)
 S VALMBCK="R",VALM("TITLE")=TITLE
"RTN","PSOREJP1",161,0)
 Q
"RTN","PSOREJP1",162,0)
 ;
"RTN","PSOREJP1",163,0)
OVR ; - Override a REJECT action
"RTN","PSOREJP1",164,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",165,0)
 N COD1,COD2,COD3
"RTN","PSOREJP1",166,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",167,0)
 S COD1=$$OVRCOD^PSOREJU1(1,$$GET1^DIQ(52.25,REJ_","_RX,14)) I COD1="^" S VALMBCK="R" Q
"RTN","PSOREJP1",168,0)
 S COD2=$$OVRCOD^PSOREJU1(2) I COD2="^" S VALMBCK="R" Q
"RTN","PSOREJP1",169,0)
 S COD3=$$OVRCOD^PSOREJU1(3) I COD3="^" S VALMBCK="R" Q
"RTN","PSOREJP1",170,0)
 D OVRDSP^PSOREJU1(COD1_"^"_COD2_"^"_COD3)
"RTN","PSOREJP1",171,0)
 D SEND^PSOREJP3(COD1,COD2,COD3)
"RTN","PSOREJP1",172,0)
 Q
"RTN","PSOREJP1",173,0)
 ;
"RTN","PSOREJP1",174,0)
RES ; - Re-submit a claim action
"RTN","PSOREJP1",175,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",176,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",177,0)
 D SEND^PSOREJP3()
"RTN","PSOREJP1",178,0)
 Q
"RTN","PSOREJP1",179,0)
 ;
"RTN","PSOREJP1",180,0)
CLA ; - Submit Clarification Code
"RTN","PSOREJP1",181,0)
 N CLA
"RTN","PSOREJP1",182,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",183,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",184,0)
 S CLA=$$CLA^PSOREJU1() I CLA="^" S VALMBCK="R" Q
"RTN","PSOREJP1",185,0)
 W ! D SEND^PSOREJP3(,,,CLA)
"RTN","PSOREJP1",186,0)
 Q
"RTN","PSOREJP1",187,0)
 ;
"RTN","PSOREJP1",188,0)
PA ; - Submit Prior Authorization
"RTN","PSOREJP1",189,0)
 N PA
"RTN","PSOREJP1",190,0)
 I $$CLOSED(RX,REJ,1) Q
"RTN","PSOREJP1",191,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",192,0)
 S PA=$$PA^PSOREJU2() I PA="^" S VALMBCK="R" Q
"RTN","PSOREJP1",193,0)
 W ! D SEND^PSOREJP3(,,,,PA)
"RTN","PSOREJP1",194,0)
 Q
"RTN","PSOREJP1",195,0)
 ;
"RTN","PSOREJP1",196,0)
MP ; - Patient Medication Profile
"RTN","PSOREJP1",197,0)
 I $G(PSOBACK) D  Q
"RTN","PSOREJP1",198,0)
 . S VALMSG="Not available through Backdoor!",VALMBCK="R"
"RTN","PSOREJP1",199,0)
 N SITE,PATIENT
"RTN","PSOREJP1",200,0)
 D FULL^VALM1 W !
"RTN","PSOREJP1",201,0)
 S SITE=+$$RXSITE^PSOBPSUT(RX,FILL) S:$G(PSOSITE) SITE=PSOSITE
"RTN","PSOREJP1",202,0)
 S PATIENT=+$$GET1^DIQ(52,RX,2,"I")
"RTN","PSOREJP1",203,0)
 D LST^PSOPMP0(SITE,PATIENT) S VALMBCK="R"
"RTN","PSOREJP1",204,0)
 Q
"RTN","PSOREJP1",205,0)
 ;
"RTN","PSOREJP1",206,0)
EXIT ;
"RTN","PSOREJP1",207,0)
 K ^TMP("PSOREJP1",$J)
"RTN","PSOREJP1",208,0)
 Q
"RTN","PSOREJP1",209,0)
 ;
"RTN","PSOREJP1",210,0)
SETLN(TEXT,REV,UND,HIG) ; Sets a line to be displayed in the Body section
"RTN","PSOREJP1",211,0)
 N X
"RTN","PSOREJP1",212,0)
 S:$G(TEXT)="" $E(TEXT,80)=""
"RTN","PSOREJP1",213,0)
 S:$L(TEXT)>80 TEXT=$E(TEXT,1,80)
"RTN","PSOREJP1",214,0)
 S LINE=LINE+1,^TMP("PSOREJP1",$J,LINE,0)=$G(TEXT)
"RTN","PSOREJP1",215,0)
 ;
"RTN","PSOREJP1",216,0)
 I LINE>$G(LASTLN) D SAVE^VALM10(LINE) S LASTLN=LINE
"RTN","PSOREJP1",217,0)
 ;
"RTN","PSOREJP1",218,0)
 I $G(REV) D  Q
"RTN","PSOREJP1",219,0)
 . D CNTRL^VALM10(LINE,1,$L(TEXT),IORVON,IOINORM)
"RTN","PSOREJP1",220,0)
 . I $G(UND) D CNTRL^VALM10(LINE,$L(TEXT)+1,80,IOUON,IOINORM)
"RTN","PSOREJP1",221,0)
 I $G(UND) D CNTRL^VALM10(LINE,1,80,IOUON,IOINORM)
"RTN","PSOREJP1",222,0)
 I $G(HIG) D
"RTN","PSOREJP1",223,0)
 . D CNTRL^VALM10(LINE,HIG,80,IOINHI_$S($G(UND):IOUON,1:""),IOINORM)
"RTN","PSOREJP1",224,0)
 Q
"RTN","PSOREJP1",225,0)
HELP ;
"RTN","PSOREJP1",226,0)
 Q
"RTN","PSOREJP1",227,0)
 ;
"RTN","PSOREJP1",228,0)
CLOSED(RX,REJ,MSG) ; Returns whether the REJECT is RESOLVED or NOT
"RTN","PSOREJP1",229,0)
 I $$GET1^DIQ(52.25,REJ_","_RX,10,"I") D:$G(MSG)  Q 1
"RTN","PSOREJP1",230,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R" W $C(7)
"RTN","PSOREJP1",231,0)
 Q 0
"RTN","PSOREJP1",232,0)
 ;
"RTN","PSOREJP1",233,0)
REOPN(RX,REJ) ; Returns whether the REJECT was RE-OPENED or NOT
"RTN","PSOREJP1",234,0)
 Q $S($$GET1^DIQ(52.25,REJ_","_RX,23)="":0,1:1)
"RTN","PSOREJP1",235,0)
 ;
"RTN","PSOREJP1",236,0)
EXP(CODE) ; - Returns the explanation field (.02) for a reject code
"RTN","PSOREJP1",237,0)
 ;  Input:  (r) CODE - .01 field (Code) value from file 9002313.93
"RTN","PSOREJP1",238,0)
 ; Output: .02 field (Explanation) value from file 9002313.93
"RTN","PSOREJP1",239,0)
 N DIC,X,Y
"RTN","PSOREJP1",240,0)
 S DIC=9002313.93,DIC(0)="Z",X=CODE D ^DIC
"RTN","PSOREJP1",241,0)
 Q $P($G(Y(0)),"^",2)
"RTN","PSOREJP1",242,0)
 ;
"RTN","PSOREJP1",243,0)
OUT(RX) ; - Supported call by outside PROTOCOLs to act on specific REJECTs
"RTN","PSOREJP1",244,0)
 N I,RFL,DATA,REJ,PSOBACK,VALMCNT,RXN
"RTN","PSOREJP1",245,0)
 I '$D(^XUSEC("PSORPH",DUZ)) D  Q
"RTN","PSOREJP1",246,0)
 . S VALMSG="PSORPH key required to use the REJ action.",VALMBCK="R"
"RTN","PSOREJP1",247,0)
 I $G(PS)="REJECT" D
"RTN","PSOREJP1",248,0)
 . S VALMSG="REJ action is not available at this point.",VALMBCK="R"
"RTN","PSOREJP1",249,0)
 S PSOBACK=1
"RTN","PSOREJP1",250,0)
 S (RFL,I)=0 F I=1:1 Q:'$D(^PSRX(RX,1,I))  S RFL=I
"RTN","PSOREJP1",251,0)
 S X=$$FIND^PSOREJUT(RX,RFL,.DATA) S REJ=$O(DATA(""))
"RTN","PSOREJP1",252,0)
 I '$G(REJ) S VALMSG="Invalid selection!",VALMBCK="R" Q
"RTN","PSOREJP1",253,0)
 D EN(RX,REJ) S VALMBCK="R"
"RTN","PSOREJP1",254,0)
 Q
"RTN","PSOREJP1",255,0)
 ;
"RTN","PSOREJP3")
0^6^B50535626
"RTN","PSOREJP3",1,0)
PSOREJP3 ;ALB/SS - Third Party Reject Display Screen - Comments ;10/27/06
"RTN","PSOREJP3",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**260,287,289,290**;DEC 1997;Build 69
"RTN","PSOREJP3",3,0)
 ;
"RTN","PSOREJP3",4,0)
COM ; Builds the Comments section in the Reject Display Screen
"RTN","PSOREJP3",5,0)
 I +$O(^PSRX(RX,"REJ",REJ,"COM",0))=0 Q
"RTN","PSOREJP3",6,0)
 D SETLN^PSOREJP1()
"RTN","PSOREJP3",7,0)
 D SETLN^PSOREJP1("COMMENTS",1,1)
"RTN","PSOREJP3",8,0)
 N DIWL,DIWR,LNCNT,MAXLN,PSL
"RTN","PSOREJP3",9,0)
 N I,X,PSI,Y,LAST,PSOCOM,TXTLN
"RTN","PSOREJP3",10,0)
 S PSI=999999
"RTN","PSOREJP3",11,0)
 F  S PSI=$O(^PSRX(RX,"REJ",REJ,"COM",PSI),-1) Q:+PSI=0  D
"RTN","PSOREJP3",12,0)
 . S PSCOM=$$GET1^DIQ(52.2551,PSI_","_REJ_","_RX,.01)_" - "
"RTN","PSOREJP3",13,0)
 . S PSCOM=PSCOM_$$GET1^DIQ(52.2551,PSI_","_REJ_","_RX,2)
"RTN","PSOREJP3",14,0)
 . S PSCOM=PSCOM_" ("_$$GET1^DIQ(52.2551,PSI_","_REJ_","_RX,1)_")"
"RTN","PSOREJP3",15,0)
 . ;display comment
"RTN","PSOREJP3",16,0)
 . K ^UTILITY($J,"W") S X=PSCOM,DIWL=1,DIWR=78 D ^DIWP
"RTN","PSOREJP3",17,0)
 . F PSL=1:1 Q:('$D(^UTILITY($J,"W",1,PSL,0)))  D
"RTN","PSOREJP3",18,0)
 . . S LAST=0 I '$D(^UTILITY($J,"W",1,PSL+1)),'$O(^PSRX(RX,"REJ",REJ,"COM",PSI),-1) S LAST=1
"RTN","PSOREJP3",19,0)
 . . S TXTLN=$G(^UTILITY($J,"W",1,PSL,0))
"RTN","PSOREJP3",20,0)
 . . D SETLN^PSOREJP1($S(PSL=1:"- ",1:"  ")_TXTLN,0,$S(LAST:1,1:0),1)
"RTN","PSOREJP3",21,0)
 K ^UTILITY($J,"W")
"RTN","PSOREJP3",22,0)
 Q
"RTN","PSOREJP3",23,0)
 ;
"RTN","PSOREJP3",24,0)
ADDCOM ; - Add comment worklist action
"RTN","PSOREJP3",25,0)
 N PSCOM
"RTN","PSOREJP3",26,0)
 D FULL^VALM1
"RTN","PSOREJP3",27,0)
 S PSCOM=$$COMMENT("Comment: ",150)
"RTN","PSOREJP3",28,0)
 I $L(PSCOM)>0,PSCOM'["^" D
"RTN","PSOREJP3",29,0)
 . D SAVECOM(RX,REJ,PSCOM) ;save the comment
"RTN","PSOREJP3",30,0)
 . D INIT^PSOREJP1 ;update screen
"RTN","PSOREJP3",31,0)
 S VALMBCK="R"
"RTN","PSOREJP3",32,0)
 Q
"RTN","PSOREJP3",33,0)
 ;
"RTN","PSOREJP3",34,0)
 ;Enter a comment
"RTN","PSOREJP3",35,0)
 ;PSOTR  -prompt string
"RTN","PSOREJP3",36,0)
 ;PSMLEN -maxlen
"RTN","PSOREJP3",37,0)
 ;returns:
"RTN","PSOREJP3",38,0)
 ; "^" - if user chose to quit 
"RTN","PSOREJP3",39,0)
 ; "" - nothing entered or input has been discarded
"RTN","PSOREJP3",40,0)
 ; otherwise - comment's text
"RTN","PSOREJP3",41,0)
COMMENT(PSOTR,PSMLEN) ;*/
"RTN","PSOREJP3",42,0)
 N DIR,DTOUT,DUOUT,PSQ
"RTN","PSOREJP3",43,0)
 I '$D(PSOTR) S PSOTR="Comment "
"RTN","PSOREJP3",44,0)
 I '$D(PSMLEN) S PSMLEN=150
"RTN","PSOREJP3",45,0)
 S DIR(0)="FA^1:150"
"RTN","PSOREJP3",46,0)
 S DIR("A")=PSOTR
"RTN","PSOREJP3",47,0)
 S DIR("?")="Enter a free text comment up to 150 characters long."
"RTN","PSOREJP3",48,0)
 S PSQ=0
"RTN","PSOREJP3",49,0)
 F  D  Q:+PSQ'=0
"RTN","PSOREJP3",50,0)
 . W ! D ^DIR
"RTN","PSOREJP3",51,0)
 . I $D(DUOUT)!($D(DTOUT)) S PSQ=-1 Q
"RTN","PSOREJP3",52,0)
 . I $L(Y)'>PSMLEN S PSQ=1 Q
"RTN","PSOREJP3",53,0)
 . W !!,"Enter a free text comment up to 150 characters long.",!
"RTN","PSOREJP3",54,0)
 . S DIR("B")=$E(Y,1,PSMLEN)
"RTN","PSOREJP3",55,0)
 Q:PSQ<0 "^"
"RTN","PSOREJP3",56,0)
 Q:$L(Y)=0 ""
"RTN","PSOREJP3",57,0)
 S PSQ=$$YESNO("Confirm","YES")
"RTN","PSOREJP3",58,0)
 I PSQ=-1 Q "^"
"RTN","PSOREJP3",59,0)
 I PSQ=0 Q ""
"RTN","PSOREJP3",60,0)
 Q Y
"RTN","PSOREJP3",61,0)
 ;
"RTN","PSOREJP3",62,0)
 ; Ask
"RTN","PSOREJP3",63,0)
 ; Input:
"RTN","PSOREJP3",64,0)
 ;  PSQSTR - question
"RTN","PSOREJP3",65,0)
 ;  PSDFL - default answer
"RTN","PSOREJP3",66,0)
 ; Output: 
"RTN","PSOREJP3",67,0)
 ; 1 YES
"RTN","PSOREJP3",68,0)
 ; 0 NO
"RTN","PSOREJP3",69,0)
 ; -1 if cancelled
"RTN","PSOREJP3",70,0)
YESNO(PSQSTR,PSDFL) ; Default - YES
"RTN","PSOREJP3",71,0)
 N DIR,Y,DUOUT
"RTN","PSOREJP3",72,0)
 S DIR(0)="Y"
"RTN","PSOREJP3",73,0)
 S DIR("A")=PSQSTR
"RTN","PSOREJP3",74,0)
 S:$L($G(PSDFL)) DIR("B")=PSDFL
"RTN","PSOREJP3",75,0)
 W ! D ^DIR
"RTN","PSOREJP3",76,0)
 Q $S($G(DUOUT)!$G(DUOUT)!(Y="^"):-1,1:Y)
"RTN","PSOREJP3",77,0)
 ;
"RTN","PSOREJP3",78,0)
 ;Save comment
"RTN","PSOREJP3",79,0)
SAVECOM(PSRXIEN,PSREJIEN,PSCOMNT,DATETIME,USER) ;
"RTN","PSOREJP3",80,0)
 N PSREC,PSDA,PSERR
"RTN","PSOREJP3",81,0)
 I '$G(DATETIME) D NOW^%DTC S DATETIME=%
"RTN","PSOREJP3",82,0)
 I '$G(USER) S USER=DUZ
"RTN","PSOREJP3",83,0)
 D INSITEM(52.2551,PSRXIEN,PSREJIEN,DATETIME)
"RTN","PSOREJP3",84,0)
 S PSREC=$O(^PSRX(PSRXIEN,"REJ",PSREJIEN,"COM","B",DATETIME,0))
"RTN","PSOREJP3",85,0)
 I PSREC>0 D
"RTN","PSOREJP3",86,0)
 . S PSDA(52.2551,PSREC_","_PSREJIEN_","_PSRXIEN_",",1)=USER
"RTN","PSOREJP3",87,0)
 . S PSDA(52.2551,PSREC_","_PSREJIEN_","_PSRXIEN_",",2)=$G(PSCOMNT)
"RTN","PSOREJP3",88,0)
 . D FILE^DIE("","PSDA","PSERR")
"RTN","PSOREJP3",89,0)
 Q
"RTN","PSOREJP3",90,0)
 ;
"RTN","PSOREJP3",91,0)
 ;/**
"RTN","PSOREJP3",92,0)
 ;PSSFILE - subfile# (52.2551) for comment
"RTN","PSOREJP3",93,0)
 ;PSIEN - ien for file in which the new subfile entry will be inserted
"RTN","PSOREJP3",94,0)
 ;PSVAL01 - .01 value for the new entry
"RTN","PSOREJP3",95,0)
INSITEM(PSSFILE,PSIEN0,PSIEN1,PSVAL01) ;*/
"RTN","PSOREJP3",96,0)
 N PSSSI,PSIENS,PSFDA,PSER
"RTN","PSOREJP3",97,0)
 S PSIENS="+1,"_PSIEN1_","_PSIEN0_","
"RTN","PSOREJP3",98,0)
 S PSFDA(PSSFILE,PSIENS,.01)=PSVAL01
"RTN","PSOREJP3",99,0)
 D UPDATE^DIE("","PSFDA","PSSSI","PSER")
"RTN","PSOREJP3",100,0)
 I $D(PSER) D BMES^XPDUTL(PSER("DIERR",1,"TEXT",1))
"RTN","PSOREJP3",101,0)
 Q
"RTN","PSOREJP3",102,0)
 ;
"RTN","PSOREJP3",103,0)
PRINT(RX,RFL) ; Print Label for specific Rx/Fill
"RTN","PSOREJP3",104,0)
 N PPL,PSOSITE,PSOPAR,PSOSYS,PSOLAP,PSOBARS,PSOBAR0,PSOBAR1,PSOIOS,PSOBFLAG
"RTN","PSOREJP3",105,0)
 N POP,DFN,PDUZ,RXFL,REPRINT,REJLBL
"RTN","PSOREJP3",106,0)
 S REJLBL=0 F  S REJLBL=$O(^PSRX(RX,"L",REJLBL)) Q:'REJLBL  I +$$GET1^DIQ(52.032,REJLBL_","_RX,1,"I")=RFL S REPRINT=1 Q
"RTN","PSOREJP3",107,0)
 ;
"RTN","PSOREJP3",108,0)
 S PSOSITE=$$RXSITE^PSOBPSUT(RX,RFL),PSOPAR=^PS(59,PSOSITE,1)
"RTN","PSOREJP3",109,0)
 S DFN=$$GET1^DIQ(52,RX,2,"I"),PDUZ=DUZ,PSOSYS=$G(^PS(59.7,1,40.1))
"RTN","PSOREJP3",110,0)
 S PPL=RX I RFL S RXFL(RX)=RFL
"RTN","PSOREJP3",111,0)
 W ! S PSOBFLAG=1 D LBL^PSOLSET I $G(PSOQUIT) Q
"RTN","PSOREJP3",112,0)
 ;
"RTN","PSOREJP3",113,0)
 S IOP=PSOLAP D ^%ZIS,DQ^PSOLBL,^%ZISC
"RTN","PSOREJP3",114,0)
 Q
"RTN","PSOREJP3",115,0)
 ;
"RTN","PSOREJP3",116,0)
RXINFO(RX,FILL,LINE) ; Returns header displayable Rx Information
"RTN","PSOREJP3",117,0)
 N TXT,RXINFO,LBL,CMOP,DRG
"RTN","PSOREJP3",118,0)
 I LINE=1 D
"RTN","PSOREJP3",119,0)
 . S RXINFO="Rx#      : "_$$GET1^DIQ(52,RX,.01)_"/"_FILL
"RTN","PSOREJP3",120,0)
 . S $E(RXINFO,30)="ECME#: "_$E(10000000+RX,2,8)
"RTN","PSOREJP3",121,0)
 . S $E(RXINFO,55)="Fill Date: "_$$FMTE^XLFDT($$RXFLDT^PSOBPSUT(RX,FILL))
"RTN","PSOREJP3",122,0)
 I LINE=2 D
"RTN","PSOREJP3",123,0)
 . S DRG=$$GET1^DIQ(52,RX,6,"I"),CMOP=$S($D(^PSDRUG("AQ",DRG)):1,1:0)
"RTN","PSOREJP3",124,0)
 . S RXINFO=$S(CMOP:"CMOP ",1:"")_"Drug",$E(RXINFO,10)=": "_$E($$GET1^DIQ(52,RX,6),1,43)
"RTN","PSOREJP3",125,0)
 . S $E(RXINFO,56)="NDC Code: "_$$GETNDC^PSONDCUT(RX,FILL)
"RTN","PSOREJP3",126,0)
 Q $G(RXINFO)
"RTN","PSOREJP3",127,0)
 ;
"RTN","PSOREJP3",128,0)
SEND(COD1,COD2,COD3,CLA,PA) ; - Sends Claim to ECME and closes Reject
"RTN","PSOREJP3",129,0)
 N DIR,OVRC,RESP,ALTXT,COM
"RTN","PSOREJP3",130,0)
 S DIR(0)="Y",DIR("A")="     Confirm",DIR("B")="YES"
"RTN","PSOREJP3",131,0)
 S DIR("A",1)="     When you confirm, a new claim will be submitted for"
"RTN","PSOREJP3",132,0)
 S DIR("A",2)="     the prescription and this REJECT will be marked"
"RTN","PSOREJP3",133,0)
 S DIR("A",3)="     resolved."
"RTN","PSOREJP3",134,0)
 S DIR("A",4)=" "
"RTN","PSOREJP3",135,0)
 W ! D ^DIR I $G(Y)=0!$D(DIRUT) S VALMBCK="R" Q
"RTN","PSOREJP3",136,0)
 I $G(COD1)'="" S OVRC=$G(COD2)_"^"_$G(COD1)_"^"_$G(COD3)
"RTN","PSOREJP3",137,0)
 S ALTXT="REJECT WORKLIST"
"RTN","PSOREJP3",138,0)
 S:$G(OVRC)'="" ALTXT=ALTXT_"-DUR OVERRIDE CODES("_$G(COD1)_"/"_$G(COD2)_"/"_$G(COD3)_")"
"RTN","PSOREJP3",139,0)
 S:$G(CLA) ALTXT=ALTXT_"(CLARIF. CODE="_$P(CLA,"^",2)_")"
"RTN","PSOREJP3",140,0)
 S:$G(PA) ALTXT=ALTXT_"(PRIOR AUTH.="_$TR(PA,"^","/")_")"
"RTN","PSOREJP3",141,0)
 D ECMESND^PSOBPSU1(RX,FILL,,"ED",$$GETNDC^PSONDCUT(RX,FILL),,,$G(OVRC),,.RESP,,ALTXT,$G(CLA),$G(PA),$$PSOCOB^PSOREJP3(RX,FILL,REJ))
"RTN","PSOREJP3",142,0)
 I $G(RESP) D  Q
"RTN","PSOREJP3",143,0)
 . W !!?10,"Claim could not be submitted. Please try again later!"
"RTN","PSOREJP3",144,0)
 . W !,?10,"Reason: ",$S($P(RESP,"^",2)="":"UNKNOWN",1:$P(RESP,"^",2)),$C(7) H 2
"RTN","PSOREJP3",145,0)
 ;
"RTN","PSOREJP3",146,0)
 I $$PTLBL^PSOREJP2(RX,FILL) D PRINT(RX,FILL)
"RTN","PSOREJP3",147,0)
 ;
"RTN","PSOREJP3",148,0)
 N PSOTRIC S PSOTRIC="",PSOTRIC=$$TRIC^PSOREJP1(RX,FILL,PSOTRIC)
"RTN","PSOREJP3",149,0)
 I $$GET1^DIQ(52,RX,100,"I")=5&(PSOTRIC) D
"RTN","PSOREJP3",150,0)
 . Q:$$STATUS^PSOBPSUT(RX,RFL)'["PAYABLE"
"RTN","PSOREJP3",151,0)
 . N XXX S XXX=""
"RTN","PSOREJP3",152,0)
 . W !,"This prescription can be pulled early from suspense or the label will print"
"RTN","PSOREJP3",153,0)
 . W !,"when PRINT FROM SUSPENSE occurs.",!
"RTN","PSOREJP3",154,0)
 . R !,"Press enter to continue... ",XXX:60
"RTN","PSOREJP3",155,0)
 ;
"RTN","PSOREJP3",156,0)
 I $D(PSOSTFLT),PSOSTFLT'="B" S CHANGE=1
"RTN","PSOREJP3",157,0)
 Q
"RTN","PSOREJP3",158,0)
 ;
"RTN","PSOREJP3",159,0)
FILL ;Fill payable TRICARE Rx
"RTN","PSOREJP3",160,0)
 N COM,OPNREJ,OPNREJ2,OPNREJ3
"RTN","PSOREJP3",161,0)
 D FULL^VALM1
"RTN","PSOREJP3",162,0)
 I $$CLOSED^PSOREJP1(RX,REJ) D  Q
"RTN","PSOREJP3",163,0)
 . S VALMSG="This Reject is marked resolved!",VALMBCK="R"
"RTN","PSOREJP3",164,0)
 I $$STATUS^PSOBPSUT(RX,FILL)'["PAYABLE" S VALMSG="Only Rxs with an E PAYABLE status may be filled.",VALMBCK="R" Q
"RTN","PSOREJP3",165,0)
 S COM="AUTOMATICALLY CLOSED"
"RTN","PSOREJP3",166,0)
 S (OPNREJ,OPNREJ2,OPNREJ3)=""
"RTN","PSOREJP3",167,0)
 S OPNREJ2=0 F  S OPNREJ2=$O(^PSRX(RX,"REJ",OPNREJ2)) Q:OPNREJ2=""!(OPNREJ2'?1N.N)  S OPNREJ=OPNREJ_","_OPNREJ2
"RTN","PSOREJP3",168,0)
 S OPNREJ=$E(OPNREJ,2,999),OPNREJ2=""
"RTN","PSOREJP3",169,0)
 W !?20,"[Closing all rejections for prescription "_$$GET1^DIQ(52,RX,".01")_":"
"RTN","PSOREJP3",170,0)
 F I=1:1 S OPNREJ2=$P(OPNREJ,",",I) Q:OPNREJ2=""  D
"RTN","PSOREJP3",171,0)
 . S OPNREJ3="",OPNREJ3=$$GET1^DIQ(52.25,OPNREJ2_","_RX,".01")
"RTN","PSOREJP3",172,0)
 . W !?25,OPNREJ3_" - "_$$GET1^DIQ(9002313.93,OPNREJ3,".02")_"..."
"RTN","PSOREJP3",173,0)
 . D CLOSE^PSOREJUT(RX,FILL,OPNREJ2,DUZ,1,COM) W "OK]",!,$C(7) H 1
"RTN","PSOREJP3",174,0)
 I $$PTLBL^PSOREJP2(RX,FILL) D PRINT(RX,FILL)
"RTN","PSOREJP3",175,0)
 S VALMBCK="R",CHANGE=1
"RTN","PSOREJP3",176,0)
 Q
"RTN","PSOREJP3",177,0)
 ;
"RTN","PSOREJP3",178,0)
PSOCOB(RX,FILL,REJ) ; Returns RXCOB indicator for Worklist
"RTN","PSOREJP3",179,0)
 N DATA1
"RTN","PSOREJP3",180,0)
 D GET^PSOREJU2(RX,FILL,.DATA1,REJ,1)
"RTN","PSOREJP3",181,0)
 I $G(DATA1(REJ,"COB"))="PRIMARY"  Q 1
"RTN","PSOREJP3",182,0)
 I $G(DATA1(REJ,"COB"))=""  Q 1
"RTN","PSOREJP3",183,0)
 Q 2
"RTN","PSOREJP3",184,0)
 ;
"RTN","PSOREJP3",185,0)
DC ;Discontinue TRICARE Rx
"RTN","PSOREJP3",186,0)
 N ACTION S ACTION="D"
"RTN","PSOREJP3",187,0)
 D FULL^VALM1
"RTN","PSOREJP3",188,0)
 S ACTION=$$DC^PSOREJU1(RX,ACTION)
"RTN","PSOREJP3",189,0)
 I ACTION="Q"!(ACTION="^")!('$G(PSORX("DFLG"))) S VALMSG="NO ACTION TAKEN.",VALMBCK="R" Q
"RTN","PSOREJP3",190,0)
 S CHANGE=1
"RTN","PSOREJP3",191,0)
 Q
"RTN","PSOREJP3",192,0)
 ;
"RTN","PSOREJU2")
0^3^B49121705
"RTN","PSOREJU2",1,0)
PSOREJU2 ;BIRM/MFR - BPS (ECME) - Clinical Rejects Utilities (1) ;10/15/04
"RTN","PSOREJU2",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,260,287,341,290**;DEC 1997;Build 69
"RTN","PSOREJU2",3,0)
 ;Reference to $$NABP^BPSBUTL supported by IA 4719
"RTN","PSOREJU2",4,0)
 ;Reference to File 9002313.23 - BPS NCPDP REASON FOR SERVICE CODE supported by IA 4714
"RTN","PSOREJU2",5,0)
 ;
"RTN","PSOREJU2",6,0)
GET(RX,RFL,REJDATA,REJID,OKCL,CODE) ;
"RTN","PSOREJU2",7,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJU2",8,0)
 ;         (o) RFL - Refill # (Default: most recent)
"RTN","PSOREJU2",9,0)
 ;         (r) REJDATA(REJECT IEN,FIELD) - Array where these Reject fields will be returned:
"RTN","PSOREJU2",10,0)
 ;                       "CODE" - Reject Code (79 or 88)
"RTN","PSOREJU2",11,0)
 ;                       "DATE/TIME" - DATE/TIME Reject was detected
"RTN","PSOREJU2",12,0)
 ;                       "PAYER MESSAGE" - Message returned by the payer
"RTN","PSOREJU2",13,0)
 ;                       "REASON" - Reject Reason description (from payer)
"RTN","PSOREJU2",14,0)
 ;                       "INSURANCE NAME" - Patient's Insurance Company Name
"RTN","PSOREJU2",15,0)
 ;                       "COB" - Coordination of Benefits
"RTN","PSOREJU2",16,0)
 ;                       "GROUP NAME" - Patient's Insurance Group Name
"RTN","PSOREJU2",17,0)
 ;                       "GROUP NUMBER" - Patient's Insurance Group Number
"RTN","PSOREJU2",18,0)
 ;                       "CARDHOLDER ID" - Patient's Insurance Cardholder ID
"RTN","PSOREJU2",19,0)
 ;                       "PLAN CONTACT" - Plan's Contact (eg., "1-800-...")
"RTN","PSOREJU2",20,0)
 ;                       "PLAN PREVIOUS FILL DATE" - Last time Rx was paid by payer
"RTN","PSOREJU2",21,0)
 ;                       "STATUS" - REJECTS status ("OPEN/UNRESOLVED" or "CLOSED/RESOLVED")
"RTN","PSOREJU2",22,0)
 ;                       "DUR TEXT" - Payer's DUR description
"RTN","PSOREJU2",23,0)
 ;                       "OTHER REJECTS" - Other Rejects on the same response
"RTN","PSOREJU2",24,0)
 ;                       "REASON SVC CODE" - Reason for Service Code
"RTN","PSOREJU2",25,0)
 ;                  If REJECT is closed, the following fields will be returned:
"RTN","PSOREJU2",26,0)
 ;                       "CLA CODE" - Clarification Code submitted
"RTN","PSOREJU2",27,0)
 ;                       "PRIOR AUTH TYPE" - Prior Authorization Type
"RTN","PSOREJU2",28,0)
 ;                       "PRIOR AUTH NUMBER" - Prior Authorization Type
"RTN","PSOREJU2",29,0)
 ;                       "CLOSED DATE/TIME" - DATE/TIME Reject was closed
"RTN","PSOREJU2",30,0)
 ;                       "CLOSED BY" - Name of the user responsible for closing Reject
"RTN","PSOREJU2",31,0)
 ;                       "CLOSE REASON" - Reason for closing Reject (text)
"RTN","PSOREJU2",32,0)
 ;                       "CLOSE COMMENTS" - User entered comments at close
"RTN","PSOREJU2",33,0)
 ;         (o) REJID - REJECT IEN in the PRESCRIPTION file for retrieve this REJECT
"RTN","PSOREJU2",34,0)
 ;         (o) OKCL - If set to 1, CLOSED REJECTs will also be returned
"RTN","PSOREJU2",35,0)
 ;         (o) CODE - Only REJECTs with this CODE should be returned
"RTN","PSOREJU2",36,0)
 ;
"RTN","PSOREJU2",37,0)
 N REJS,ARRAY,REJFLD,IDX,COM,Z
"RTN","PSOREJU2",38,0)
 ;
"RTN","PSOREJU2",39,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJU2",40,0)
 ;
"RTN","PSOREJU2",41,0)
 K REJDATA
"RTN","PSOREJU2",42,0)
 I '$O(^PSRX(RX,"REJ",0)) Q
"RTN","PSOREJU2",43,0)
 ;
"RTN","PSOREJU2",44,0)
 K REJS S RFL=+$G(RFL)
"RTN","PSOREJU2",45,0)
 I $G(REJID) D
"RTN","PSOREJU2",46,0)
 . I +$P($G(^PSRX(RX,"REJ",REJID,0)),"^",4)'=RFL Q
"RTN","PSOREJU2",47,0)
 . I '$G(OKCL),$P($G(^PSRX(RX,"REJ",REJID,0)),"^",5) Q
"RTN","PSOREJU2",48,0)
 . S REJS(REJID)=""
"RTN","PSOREJU2",49,0)
 E  D
"RTN","PSOREJU2",50,0)
 . S IDX=999
"RTN","PSOREJU2",51,0)
 . F  S IDX=$O(^PSRX(RX,"REJ",IDX),-1) Q:'IDX  D
"RTN","PSOREJU2",52,0)
 . . I +$P($G(^PSRX(RX,"REJ",IDX,0)),"^",4)'=RFL Q
"RTN","PSOREJU2",53,0)
 . . I '$G(OKCL),$P($G(^PSRX(RX,"REJ",IDX,0)),"^",5) Q
"RTN","PSOREJU2",54,0)
 . . S REJS(IDX)=""
"RTN","PSOREJU2",55,0)
 I '$D(REJS) Q
"RTN","PSOREJU2",56,0)
 ;
"RTN","PSOREJU2",57,0)
 S IDX=0
"RTN","PSOREJU2",58,0)
 F  S IDX=$O(REJS(IDX)) Q:'IDX  D
"RTN","PSOREJU2",59,0)
 . K ARRAY D GETS^DIQ(52.25,IDX_","_RX_",","*","","ARRAY")
"RTN","PSOREJU2",60,0)
 . K REJFLD M REJFLD=ARRAY(52.25,IDX_","_RX_",")
"RTN","PSOREJU2",61,0)
 . I $G(CODE),REJFLD(.01)'=CODE Q
"RTN","PSOREJU2",62,0)
 . S REJDATA(IDX,"CODE")=$G(REJFLD(.01))
"RTN","PSOREJU2",63,0)
 . S REJDATA(IDX,"DATE/TIME")=$G(REJFLD(1))
"RTN","PSOREJU2",64,0)
 . S REJDATA(IDX,"PAYER MESSAGE")=$G(REJFLD(2))
"RTN","PSOREJU2",65,0)
 . S REJDATA(IDX,"REASON")=$G(REJFLD(3))
"RTN","PSOREJU2",66,0)
 . S REJDATA(IDX,"PHARMACIST")=$G(REJFLD(4))
"RTN","PSOREJU2",67,0)
 . S REJDATA(IDX,"INSURANCE NAME")=$G(REJFLD(20))
"RTN","PSOREJU2",68,0)
 . S REJDATA(IDX,"COB")=$G(REJFLD(27))
"RTN","PSOREJU2",69,0)
 . S REJDATA(IDX,"GROUP NAME")=$G(REJFLD(6))
"RTN","PSOREJU2",70,0)
 . S REJDATA(IDX,"GROUP NUMBER")=$G(REJFLD(21))
"RTN","PSOREJU2",71,0)
 . S REJDATA(IDX,"CARDHOLDER ID")=$G(REJFLD(22))
"RTN","PSOREJU2",72,0)
 . S REJDATA(IDX,"PLAN CONTACT")=$G(REJFLD(7))
"RTN","PSOREJU2",73,0)
 . S REJDATA(IDX,"PLAN PREVIOUS FILL DATE")=$G(REJFLD(8))
"RTN","PSOREJU2",74,0)
 . S REJDATA(IDX,"STATUS")=$G(REJFLD(9))
"RTN","PSOREJU2",75,0)
 . S REJDATA(IDX,"OTHER REJECTS")=$G(REJFLD(17))
"RTN","PSOREJU2",76,0)
 . S REJDATA(IDX,"DUR TEXT")=$G(REJFLD(18))
"RTN","PSOREJU2",77,0)
 . S REJDATA(IDX,"REASON SVC CODE")=$G(REJFLD(14))
"RTN","PSOREJU2",78,0)
 . S REJDATA(IDX,"RESPONSE IEN")=$G(REJFLD(16))
"RTN","PSOREJU2",79,0)
 . I '$G(OKCL) Q
"RTN","PSOREJU2",80,0)
 . S REJDATA(IDX,"CLOSED DATE/TIME")=$G(REJFLD(10))
"RTN","PSOREJU2",81,0)
 . S REJDATA(IDX,"CLOSED BY")=$G(REJFLD(11))
"RTN","PSOREJU2",82,0)
 . S REJDATA(IDX,"CLOSE REASON")=$G(REJFLD(12))
"RTN","PSOREJU2",83,0)
 . S REJDATA(IDX,"CLOSE COMMENTS")=$G(REJFLD(13))
"RTN","PSOREJU2",84,0)
 . S REJDATA(IDX,"COD1")=$G(REJFLD(14))
"RTN","PSOREJU2",85,0)
 . S REJDATA(IDX,"COD2")=$G(REJFLD(15))
"RTN","PSOREJU2",86,0)
 . S REJDATA(IDX,"COD3")=$G(REJFLD(19))
"RTN","PSOREJU2",87,0)
 . S REJDATA(IDX,"CLA CODE")=$G(REJFLD(24))
"RTN","PSOREJU2",88,0)
 . S REJDATA(IDX,"PRIOR AUTH TYPE")=$G(REJFLD(25))
"RTN","PSOREJU2",89,0)
 . S REJDATA(IDX,"PRIOR AUTH NUMBER")=$G(REJFLD(26))
"RTN","PSOREJU2",90,0)
 . S COM=0 F  S COM=$O(^PSRX(RX,"REJ",IDX,"COM",COM)) Q:'COM  D
"RTN","PSOREJU2",91,0)
 . . S Z=^PSRX(RX,"REJ",IDX,"COM",COM,0)
"RTN","PSOREJU2",92,0)
 . . S REJDATA(IDX,"COMMENTS",COM,"DATE/TIME")=$P(Z,"^")
"RTN","PSOREJU2",93,0)
 . . S REJDATA(IDX,"COMMENTS",COM,"USER")=$P(Z,"^",2)
"RTN","PSOREJU2",94,0)
 . . S REJDATA(IDX,"COMMENTS",COM,"COMMENTS")=$P(Z,"^",3)
"RTN","PSOREJU2",95,0)
 Q
"RTN","PSOREJU2",96,0)
 ;
"RTN","PSOREJU2",97,0)
HELP(OPTS) ; Display the Help Text for the DUR handling options (OVERRIDE/IGNORE/STOP/QUIT)
"RTN","PSOREJU2",98,0)
 ;
"RTN","PSOREJU2",99,0)
 I OPTS["O" D
"RTN","PSOREJU2",100,0)
 . W !?1,"(O)verride - This option will provide the prompts for the code sets needed to"
"RTN","PSOREJU2",101,0)
 . W !?1,"             override this reject and get a payable 3rd party claim. Before"
"RTN","PSOREJU2",102,0)
 . W !?1,"             you select this option, you may need to call the 3rd party payer"
"RTN","PSOREJU2",103,0)
 . W !?1,"             to determine which code sets are needed to override a particular"
"RTN","PSOREJU2",104,0)
 . W !?1,"             reject. Once the proper override is accepted the label will print"
"RTN","PSOREJU2",105,0)
 . W !?1,"             and the prescription can be filled."
"RTN","PSOREJU2",106,0)
 ;
"RTN","PSOREJU2",107,0)
 I OPTS["I" D
"RTN","PSOREJU2",108,0)
 . W !?1,"(I)gnore   - Choosing Ignore will by-pass 3rd party processing and will allow"
"RTN","PSOREJU2",109,0)
 . W !?1,"             you to print a label and fill the prescription. This essentially"
"RTN","PSOREJU2",110,0)
 . W !?1,"             ignores the clinical safety issues suggested by the 3rd party"
"RTN","PSOREJU2",111,0)
 . W !?1,"             payer and will NOT result in a payable claim."
"RTN","PSOREJU2",112,0)
 ;           
"RTN","PSOREJU2",113,0)
 I OPTS["Q" D
"RTN","PSOREJU2",114,0)
 . W !?1,"(Q)uit     - Choosing Quit will postpone the processing of this prescription"
"RTN","PSOREJU2",115,0)
 . W !?1,"             until this 3rd party reject is resolved. A label will not be"
"RTN","PSOREJU2",116,0)
 . W !?1,"             printed for this prescription and it can not be filled/dispensed"
"RTN","PSOREJU2",117,0)
 . W !?1,"             until this reject is resolved. Rejects can be resolved through"
"RTN","PSOREJU2",118,0)
 . W !?1,"             the Worklist option under the ePharmacy menu."
"RTN","PSOREJU2",119,0)
 Q
"RTN","PSOREJU2",120,0)
 ;
"RTN","PSOREJU2",121,0)
DVINFO(RX,RFL,LM) ; Returns header displayable Division Information
"RTN","PSOREJU2",122,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOREJU2",123,0)
 ;       (o) RFL  - Refill # (Default: most recent)
"RTN","PSOREJU2",124,0)
 ;       (o) LM   - ListManager format? (1 - Yes / 0 - No) - Default: 0
"RTN","PSOREJU2",125,0)
 N TXT,DVINFO,NCPNPI
"RTN","PSOREJU2",126,0)
 S DVINFO="Division : "_$$GET1^DIQ(59,+$$RXSITE^PSOBPSUT(RX,RFL),.01)
"RTN","PSOREJU2",127,0)
 S NCPNPI=$P($$NABP^BPSBUTL(RX,RFL)," ")
"RTN","PSOREJU2",128,0)
 S $E(DVINFO,$S($G(LM):58,1:51))=$S($L(NCPNPI)=7:"NCPDP",1:"  NPI")_"#: "_NCPNPI
"RTN","PSOREJU2",129,0)
 Q DVINFO
"RTN","PSOREJU2",130,0)
 ;
"RTN","PSOREJU2",131,0)
PTINFO(RX,LM) ; Returns header displayable Patient Information
"RTN","PSOREJU2",132,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOREJU2",133,0)
 ;       (o) LM   - ListManager format? (1 - Yes / 0 - No) - Default: 0
"RTN","PSOREJU2",134,0)
 N DFN,VADM,PTINFO
"RTN","PSOREJU2",135,0)
 S DFN=$$GET1^DIQ(52,RX,2,"I") D DEM^VADPT
"RTN","PSOREJU2",136,0)
 S PTINFO="Patient  : "_$E($G(VADM(1)),1,$S($G(LM):24,1:20))_"("_$P($G(VADM(2)),"^",2)_")"
"RTN","PSOREJU2",137,0)
 S PTINFO=PTINFO_"  Sex: "_$P($G(VADM(5)),"^")
"RTN","PSOREJU2",138,0)
 S $E(PTINFO,$S($G(LM):61,1:54))="DOB: "_$P($G(VADM(3)),"^",2)_"("_$P($G(VADM(4)),"^")_")"
"RTN","PSOREJU2",139,0)
 Q PTINFO
"RTN","PSOREJU2",140,0)
 ;
"RTN","PSOREJU2",141,0)
RETRXF(RX,RFL,ONOFF) ; - Set/Reset the Re-transmission flag
"RTN","PSOREJU2",142,0)
 ;Input: (r) RX    - Rx IEN (#52)
"RTN","PSOREJU2",143,0)
 ;       (r) RFL   - Refill IEN (#52.1)
"RTN","PSOREJU2",144,0)
 ;       (o) ONOFF - Turn flag ON or OFF (1 - ON / 0 - OFF) (Default: OFF) 
"RTN","PSOREJU2",145,0)
 I RFL>0,'$D(^PSRX(RX,1,RFL,0)) QUIT
"RTN","PSOREJU2",146,0)
 N DA,DIE,DR
"RTN","PSOREJU2",147,0)
 S DR="82///"_$S($G(ONOFF):"YES",1:"@")
"RTN","PSOREJU2",148,0)
 I 'RFL S DA=RX,DIE="^PSRX("
"RTN","PSOREJU2",149,0)
 I RFL S DA(1)=RX,DA=RFL,DIE="^PSRX("_RX_",1,"
"RTN","PSOREJU2",150,0)
 D ^DIE
"RTN","PSOREJU2",151,0)
 Q
"RTN","PSOREJU2",152,0)
 ;
"RTN","PSOREJU2",153,0)
REASON(TXT) ; Extracts the Reason for service code from the REASON text field
"RTN","PSOREJU2",154,0)
 ; Input: (r) TXT  - Reason text (e.g., NN Reason for Service Code Text)
"RTN","PSOREJU2",155,0)
 ;Output:   REASON - NN (if on valid and on file (#9002313.23), null otherwise)
"RTN","PSOREJU2",156,0)
 N REASON,DIC,X,Y
"RTN","PSOREJU2",157,0)
 S REASON=$P(TXT," ") I $L(REASON)'=2 Q ""
"RTN","PSOREJU2",158,0)
 S DIC=9002313.23,X=REASON D ^DIC I Y<0 Q ""
"RTN","PSOREJU2",159,0)
 Q REASON
"RTN","PSOREJU2",160,0)
 ;
"RTN","PSOREJU2",161,0)
SETOPN(RX,REJ) ; - Set the Reject RE-OPENED flag to YES
"RTN","PSOREJU2",162,0)
 ;Input: (r) RX    - Rx IEN (#52)
"RTN","PSOREJU2",163,0)
 ;       (r) REJ   - Reject IEN (#52.25)
"RTN","PSOREJU2",164,0)
 ;       
"RTN","PSOREJU2",165,0)
 I '$D(^PSRX(RX,"REJ",REJ)) Q
"RTN","PSOREJU2",166,0)
 N DIE,DA,DR
"RTN","PSOREJU2",167,0)
 S DIE="^PSRX("_RX_",""REJ"",",DA(1)=RX,DA=REJ,DR="23///YES" D ^DIE
"RTN","PSOREJU2",168,0)
 Q
"RTN","PSOREJU2",169,0)
 ;
"RTN","PSOREJU2",170,0)
PRT(FIELD,P,L) ; Sets the lines for fields that require text wrapping
"RTN","PSOREJU2",171,0)
 ;Input: FIELD - Subscript name from the DATA(REJ,FIELD) array
"RTN","PSOREJU2",172,0)
 ;         P   - Position where the content should be printed
"RTN","PSOREJU2",173,0)
 ;         L   - Lenght of the text on each line
"RTN","PSOREJU2",174,0)
 N TXT,I
"RTN","PSOREJU2",175,0)
 S TXT=DATA(REJ,FIELD) I $L(TXT)'>L W ?P,TXT Q
"RTN","PSOREJU2",176,0)
 F I=1:1 Q:TXT=""  D
"RTN","PSOREJU2",177,0)
 . I I=1 W ?P,$E(TXT,1,L),! S TXT=$E(TXT,L+1,999) Q
"RTN","PSOREJU2",178,0)
 . W ?P,$E(TXT,1,L) S TXT=$E(TXT,L+1,999) W:TXT'="" !
"RTN","PSOREJU2",179,0)
 Q
"RTN","PSOREJU2",180,0)
 ;
"RTN","PSOREJU2",181,0)
PA() ; - Ask for Prior Authorization Type and Number
"RTN","PSOREJU2",182,0)
 ;Output:(PAT^PAN) PAT - Prior Authorization Type (See DD File#52,
"RTN","PSOREJU2",183,0)
 ;                         Sub-file#52.25,field#25 for possible values)
"RTN","PSOREJU2",184,0)
 ;                 PAN - Prior Authorization Number (11 digits)
"RTN","PSOREJU2",185,0)
 ;        
"RTN","PSOREJU2",186,0)
 N DIR,Y,DIRUT,DIROUT,PAT,PAN
"RTN","PSOREJU2",187,0)
 S DIR(0)="52.25,25",DIR("A")="  Prior Authorization Type",DIR("B")="0"
"RTN","PSOREJU2",188,0)
 S (DIR("?"),DIR("??"))="^D PAHLP^PSOREJU2"
"RTN","PSOREJU2",189,0)
 D ^DIR I $D(DIRUT)!$D(DIROUT) Q "^"
"RTN","PSOREJU2",190,0)
 S PAT=Y
"RTN","PSOREJU2",191,0)
 K DIR S DIR(0)="52.25,26",DIR("A")="Prior Authorization Number"
"RTN","PSOREJU2",192,0)
 S DIR("?")="^D PANHLP^PSOREJU2",DIR("??")=""
"RTN","PSOREJU2",193,0)
 D ^DIR I (Y["^")!$D(DIROUT) Q "^"
"RTN","PSOREJU2",194,0)
 S PAN=Y
"RTN","PSOREJU2",195,0)
 Q (PAT_"^"_PAN)
"RTN","PSOREJU2",196,0)
 ;
"RTN","PSOREJU2",197,0)
PAHLP ; Prior Authorization Type Help
"RTN","PSOREJU2",198,0)
 W !?9,"EPSDT - Early Periodic Screening Diagnosis Treatment"
"RTN","PSOREJU2",199,0)
 W !?9,"AFDC  - Aid to Family with Dependent Children"
"RTN","PSOREJU2",200,0)
 Q
"RTN","PSOREJU2",201,0)
 ;
"RTN","PSOREJU2",202,0)
PANHLP ; Prior Authorization Number Help
"RTN","PSOREJU2",203,0)
 W "OR you may leave it blank if the claim does not require a number."
"RTN","PSOREJU2",204,0)
 Q
"RTN","PSOREJU3")
0^9^B42508132
"RTN","PSOREJU3",1,0)
PSOREJU3 ;BIRM/LJE - BPS (ECME) - Clinical Rejects Utilities (3) ;04/25/08
"RTN","PSOREJU3",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**287,290**;DEC 1997;Build 69
"RTN","PSOREJU3",3,0)
 ;References to 9002313.99 supported by IA 4305
"RTN","PSOREJU3",4,0)
 ;
"RTN","PSOREJU3",5,0)
 Q
"RTN","PSOREJU3",6,0)
 ;
"RTN","PSOREJU3",7,0)
TRICCHK(RX,RFL,RESP,FROM,RVTX) ;check to see if Rx is non-billable or in an "In Progress" state on ECME
"RTN","PSOREJU3",8,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJU3",9,0)
 ;         (r) RFL - REFILL
"RTN","PSOREJU3",10,0)
 ;         (o) RESP - Response from $$EN^BPSNCPDP api
"RTN","PSOREJU3",11,0)
 ;   TRICCHK assumes that the calling routine has validated that the fill is Tricare.
"RTN","PSOREJU3",12,0)
 ;
"RTN","PSOREJU3",13,0)
 ;  - \Need to be mindful of foreground and background processing.
"RTN","PSOREJU3",14,0)
 ;
"RTN","PSOREJU3",15,0)
 N ETOUT,ESTAT
"RTN","PSOREJU3",16,0)
 S:'$D(FROM) FROM="" S ESTAT="",ESTAT=$P(RESP,"^",4),NFROM=0 I FROM="PL"!(FROM="PC") S NFROM=1
"RTN","PSOREJU3",17,0)
 Q:ESTAT["PAYABLE"!(ESTAT["REJECTED")
"RTN","PSOREJU3",18,0)
 I ESTAT["IN PROGRESS",FROM="RRL"!($G(RVTX)="RX RELEASE-NDC CHANGE") D  Q
"RTN","PSOREJU3",19,0)
 . I 'NFROM D
"RTN","PSOREJU3",20,0)
 . . W !!,"TRICARE Prescription "_$$GET1^DIQ(52,RX,".01")_" cannot be released until ECME 'IN PROGRESS'"
"RTN","PSOREJU3",21,0)
 . . W !,"status is resolved payable.",!!
"RTN","PSOREJU3",22,0)
 ;
"RTN","PSOREJU3",23,0)
 I $D(RESP) D  Q
"RTN","PSOREJU3",24,0)
 . I +RESP=6 W:'NFROM&('$G(CMOP)) !!,"Inactive ECME Tricare",!! D  Q
"RTN","PSOREJU3",25,0)
 . . S ACT="Inactive ECME Tricare" D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOREJU3",26,0)
 . I +RESP=2!(+RESP=3) N PSONBILL S PSONBILL=1 D TRIC2 Q
"RTN","PSOREJU3",27,0)
 . I +RESP=4!(ESTAT["IN PROGRESS") N PSONPROG S PSONPROG=1 D TRIC2 Q
"RTN","PSOREJU3",28,0)
 Q
"RTN","PSOREJU3",29,0)
 ;
"RTN","PSOREJU3",30,0)
TRIC2 ;
"RTN","PSOREJU3",31,0)
 N ACTION,REJCOD,REJ,DIR,DIRUT,REA,DA,PSCAN,PSOTRIC,ZZZ
"RTN","PSOREJU3",32,0)
 S PSOTRIC=1,REJ=9999999999
"RTN","PSOREJU3",33,0)
 I $G(CMOP)&($G(PSONPROG)) D TACT Q 
"RTN","PSOREJU3",34,0)
 Q:$G(CMOP)
"RTN","PSOREJU3",35,0)
 I 'NFROM D DISPLAY(RX,REJ)
"RTN","PSOREJU3",36,0)
 I 'NFROM&($G(PSONPROG)) D  D SUSP Q
"RTN","PSOREJU3",37,0)
 . W !!,"This prescription will be suspended.  After the third party claim is resolved,"
"RTN","PSOREJU3",38,0)
 . W !,"it may be printed or pulled early from suspense.",!
"RTN","PSOREJU3",39,0)
 . R !!,"Press <RETURN> to continue...",ZZZ:60,!
"RTN","PSOREJU3",40,0)
 I NFROM&($G(PSONPROG)) D TACT Q
"RTN","PSOREJU3",41,0)
 Q:NFROM
"RTN","PSOREJU3",42,0)
TRIC3 ;
"RTN","PSOREJU3",43,0)
 D MSG W "  It must be discontinued."
"RTN","PSOREJU3",44,0)
 R !!,"Press <RETURN> to continue...",ZZZ:60
"RTN","PSOREJU3",45,0)
 I FROM="PL"!(FROM="PC") D SUSP Q
"RTN","PSOREJU3",46,0)
 S ACTION="D" S ACTION=$$DC^PSOREJU1(RX,ACTION)
"RTN","PSOREJU3",47,0)
 I ACTION="Q" G TRIC2
"RTN","PSOREJU3",48,0)
 Q
"RTN","PSOREJU3",49,0)
 ;
"RTN","PSOREJU3",50,0)
MSG ;
"RTN","PSOREJU3",51,0)
 W !!,"This is a non-billable Tricare prescription.  It cannot be filled or sent",!
"RTN","PSOREJU3",52,0)
 W "to the reject worklist."
"RTN","PSOREJU3",53,0)
 Q
"RTN","PSOREJU3",54,0)
SUSP ;Suspense Rx due to IN PROGRESS status in ECME
"RTN","PSOREJU3",55,0)
 N DA,ACT,RX0,SD,RXS,PSOWFLG,DIK,RXN,XFLAG,RXP,DD,DO,X,Y,DIC,VALMSG,COMM,LFD,DFLG,RXCMOP
"RTN","PSOREJU3",56,0)
 N PSOQFLAG,PSORXZD,PSOQFLAG,PSOKSPPL,PSOZXPPL,PSOZXPI,RXLTOP
"RTN","PSOREJU3",57,0)
 S DA=RX D SUS^PSORXL1
"RTN","PSOREJU3",58,0)
TACT ;
"RTN","PSOREJU3",59,0)
 S ACT="TRICARE-Rx placed on Suspense due to"_$S($G(PSONPROG):" ECME IN PROGRESS status",$G(PSONBILL):"the Rx being Non-billable",1:"")
"RTN","PSOREJU3",60,0)
 I '$G(DUZ) N DUZ S DUZ=.5
"RTN","PSOREJU3",61,0)
 D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOREJU3",62,0)
 Q
"RTN","PSOREJU3",63,0)
 ;
"RTN","PSOREJU3",64,0)
DISPLAY(RX,REJ,KEY) ; - Displays REJECT information
"RTN","PSOREJU3",65,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJU3",66,0)
 ;         (r) REJ - REJECT ID (IEN)
"RTN","PSOREJU3",67,0)
 ;         (o) KEY - Display "Press any KEY to continue..." (1-YES/0-NO) (Default: 0)
"RTN","PSOREJU3",68,0)
 ;         
"RTN","PSOREJU3",69,0)
 Q:$G(NFROM)
"RTN","PSOREJU3",70,0)
 I '$G(RX)!'$G(REJ) Q
"RTN","PSOREJU3",71,0)
 I '$D(^PSRX(RX,"REJ",REJ))&('$G(PSONBILL))&('$G(PSONPROG)) Q
"RTN","PSOREJU3",72,0)
 ;
"RTN","PSOREJU3",73,0)
 N DATA,RFL,LINE,%
"RTN","PSOREJU3",74,0)
 S RFL=+$$GET1^DIQ(52.25,REJ_","_RX,5)
"RTN","PSOREJU3",75,0)
 I '$G(PSONBILL)&('$G(PSONPROG)) D GET^PSOREJU2(RX,RFL,.DATA,REJ) I '$D(DATA(REJ)) Q
"RTN","PSOREJU3",76,0)
 ;
"RTN","PSOREJU3",77,0)
 D HDR
"RTN","PSOREJU3",78,0)
 S $P(LINE,"-",74)="" W !?3,LINE
"RTN","PSOREJU3",79,0)
 W !?3,$$DVINFO^PSOREJU2(RX,RFL)
"RTN","PSOREJU3",80,0)
 W !?3,$$PTINFO^PSOREJU2(RX)
"RTN","PSOREJU3",81,0)
 W !?3,"Rx/Drug  : ",$$GET1^DIQ(52,RX,.01),"/",RFL," - ",$E($$GET1^DIQ(52,RX,6),1,20),?54
"RTN","PSOREJU3",82,0)
 W:'$G(PSONBILL)&('$G(PSONPROG)) "ECME#: ",$E(RX+10000000,2,8)
"RTN","PSOREJU3",83,0)
 D TYPE G DISP2:$G(PSONBILL)!($G(PSONPROG))
"RTN","PSOREJU3",84,0)
 I $G(DATA(REJ,"PAYER MESSAGE"))'="" W !?3,"Payer Message: " D PRT^PSOREJU2("PAYER MESSAGE",18,58)
"RTN","PSOREJU3",85,0)
 I $G(DATA(REJ,"DUR TEXT"))'="" W !?3,"DUR Text     : ",DATA(REJ,"DUR TEXT")
"RTN","PSOREJU3",86,0)
 W !?3,"Insurance    : ",DATA(REJ,"INSURANCE NAME"),?50,"Contact: ",DATA(REJ,"PLAN CONTACT")
"RTN","PSOREJU3",87,0)
 W !?3,"Group Name   : ",DATA(REJ,"GROUP NAME"),?45,"Group Number: ",DATA(REJ,"GROUP NUMBER")
"RTN","PSOREJU3",88,0)
 I $G(DATA(REJ,"CARDHOLDER ID"))'="" W !?3,"Cardholder ID: ",DATA(REJ,"CARDHOLDER ID")
"RTN","PSOREJU3",89,0)
 I DATA(REJ,"PLAN PREVIOUS FILL DATE")'="" D
"RTN","PSOREJU3",90,0)
 . W !?3,"Last Fill Dt.: ",DATA(REJ,"PLAN PREVIOUS FILL DATE")
"RTN","PSOREJU3",91,0)
 . W:DATA(REJ,"PLAN PREVIOUS FILL DATE")'="" "   (from payer)"
"RTN","PSOREJU3",92,0)
DISP2 ;
"RTN","PSOREJU3",93,0)
 W !?3,LINE,$C(7) I $G(KEY) W !?3,"Press <RETURN> to continue..." R %:DTIME W !
"RTN","PSOREJU3",94,0)
 Q
"RTN","PSOREJU3",95,0)
 ;
"RTN","PSOREJU3",96,0)
TYPE ;
"RTN","PSOREJU3",97,0)
 I $G(PSONBILL)!($G(PSONPROG)) D  Q
"RTN","PSOREJU3",98,0)
 . D NOW^%DTC S Y=% D DD^%DT
"RTN","PSOREJU3",99,0)
 . W !?3,"Date/Time: "_$$FMTE^XLFDT(Y)
"RTN","PSOREJU3",100,0)
 . W !?3,"Reason   : ",$S($G(PSONBILL):"Drug not billable.",$G(PSONPROG):"ECME Status is in an 'IN PROGRESS' state and cannot be filled",1:"")
"RTN","PSOREJU3",101,0)
 ;
"RTN","PSOREJU3",102,0)
 I $G(DATA(REJ,"REASON"))'="" W !?3,"Reason       : " D PRT^PSOREJU2("REASON",18,58)
"RTN","PSOREJU3",103,0)
 N RTXT,OCODE,OTXT,I
"RTN","PSOREJU3",104,0)
 S (OTXT,RTXT,OCODE)="",RTXT=$S(DATA(REJ,"CODE")=79:"REFILL TOO SOON",CODE=88:"DUR REJECT",1:$$EXP^PSOREJP1(CODE))_" ("_DATA(REJ,"CODE")_")"
"RTN","PSOREJU3",105,0)
 F I=1:1 S OCODE=$P(DATA(REJ,"OTHER REJECTS"),",",I) Q:OCODE=""   D
"RTN","PSOREJU3",106,0)
 . S OTXT=OTXT_", "_$S(OCODE=79:"REFILL TOO SOON",OCODE=88:"DUR REJECT",1:$$EXP^PSOREJP1(OCODE))_" ("_OCODE_")"
"RTN","PSOREJU3",107,0)
 S RTXT=RTXT_OTXT_".  Received on "_$$FMTE^XLFDT($G(DATA(REJ,"DATE/TIME")))_"."
"RTN","PSOREJU3",108,0)
 S OTXT=""
"RTN","PSOREJU3",109,0)
 W !?3,"Reject(s): " D WRAP(RTXT,14)
"RTN","PSOREJU3",110,0)
 Q
"RTN","PSOREJU3",111,0)
 ;
"RTN","PSOREJU3",112,0)
WRAP(PSOTXT,INDENT) ;
"RTN","PSOREJU3",113,0)
 N I,K,PSOWRAP,PSOMARG
"RTN","PSOREJU3",114,0)
 S PSOWRAP=1,PSOMARG=$S('$G(PSORM):80,$D(IOM):IOM,1:80)-(INDENT+5)
"RTN","PSOREJU3",115,0)
W1 S:$L(PSOTXT)<PSOMARG PSOWRAP(PSOWRAP)=PSOTXT I $L(PSOTXT)'<PSOMARG F I=PSOMARG:-1:0 I $E(PSOTXT,I)?1P S PSOWRAP(PSOWRAP)=$E(PSOTXT,1,I),PSOTXT=$E(PSOTXT,I+1,999),PSOWRAP=PSOWRAP+1 G W1
"RTN","PSOREJU3",116,0)
 F K=1:1:PSOWRAP W ?INDENT,PSOWRAP(K),!
"RTN","PSOREJU3",117,0)
 Q
"RTN","PSOREJU3",118,0)
 ;
"RTN","PSOREJU3",119,0)
HDR ;
"RTN","PSOREJU3",120,0)
 I $G(PSONBILL) W !!?24,"*** TRICARE - NON-BILLABLE ***" Q
"RTN","PSOREJU3",121,0)
 I $G(PSONPROG) W !!?18,"*** TRICARE - 'IN PROGRESS' ECME status ***" Q
"RTN","PSOREJU3",122,0)
 I $G(PSOTRIC) W !!?12,"*** TRICARE - "
"RTN","PSOREJU3",123,0)
 E  W !!?16
"RTN","PSOREJU3",124,0)
 W "REJECT RECEIVED FROM THIRD PARTY PAYER ***" Q
"RTN","PSOREJU3",125,0)
 Q
"RTN","PSOREJU3",126,0)
 ;
"RTN","PSOREJU3",127,0)
SUBMIT(RXIEN,RFCNT,PSOTRIC) ;called from PSOCAN2 (routine size exceeded)
"RTN","PSOREJU3",128,0)
 N SUBMITE S SUBMITE=$$SUBMIT^PSOBPSUT(RXIEN)
"RTN","PSOREJU3",129,0)
 I SUBMITE D
"RTN","PSOREJU3",130,0)
 . N ACTION
"RTN","PSOREJU3",131,0)
 . D ECMESND^PSOBPSU1(RXIEN,,,$S($O(^PSRX(RXIEN,1,0)):"RF",1:"OF"))
"RTN","PSOREJU3",132,0)
 . I $$FIND^PSOREJUT(RXIEN) S ACTION=$$HDLG^PSOREJU1(RXIEN,,"79,88","OF","IOQ","Q")
"RTN","PSOREJU3",133,0)
 I 'SUBMITE&(PSOTRIC) D
"RTN","PSOREJU3",134,0)
 . I $$STATUS^PSOBPSUT(RXIEN,RFCNT'["PAYABLE") D TRICCHK(RXIEN,RFCNT)
"RTN","PSOREJU3",135,0)
 Q
"RTN","PSOREJU3",136,0)
 ;
"RTN","PSOREJU3",137,0)
TRISTA(RX,RFL,RESP,FROM,RVTX) ;called from suspense
"RTN","PSOREJU3",138,0)
 N ETOUT,ESTAT,TRESP,TSTAT,PSOTRIC
"RTN","PSOREJU3",139,0)
 S:'$D(RESP) RESP=""
"RTN","PSOREJU3",140,0)
 S (ESTAT,PSOTRIC)="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOREJU3",141,0)
 Q:'PSOTRIC 0
"RTN","PSOREJU3",142,0)
 S TRESP=RESP,ESTAT=$P(TRESP,"^",4) S:ESTAT="" ESTAT=$$STATUS^PSOBPSUT(RX,RFL)
"RTN","PSOREJU3",143,0)
 Q:ESTAT["E PAYABLE" 0
"RTN","PSOREJU3",144,0)
 Q:ESTAT["E REJECTED" 1  ;rejected tricare is not allowed to print from suspense
"RTN","PSOREJU3",145,0)
 ;if 'in progress' (4) or not billable (2,3) don't allow to print from suspense (IA 4415 Values)
"RTN","PSOREJU3",146,0)
 I '$D(RESP)!($P(RESP,"^",1)="")!($G(RESP)="") D
"RTN","PSOREJU3",147,0)
 . S TSTAT=$$STATUS^PSOBPSUT(RX,RFL) S TRESP=$S(TSTAT["IN PROGRESS":4,TSTAT["NOT BILLABLE":2,1:0)
"RTN","PSOREJU3",148,0)
 . S $P(TRESP,"^",4)=TSTAT
"RTN","PSOREJU3",149,0)
 ;
"RTN","PSOREJU3",150,0)
 I +TRESP=2!(+TRESP=3) Q 1
"RTN","PSOREJU3",151,0)
 I +TRESP=4!(ESTAT["IN PROGRESS") Q 1
"RTN","PSOREJU3",152,0)
 Q 0
"RTN","PSOREJU3",153,0)
 ;
"RTN","PSOREJU4")
0^4^B26048995
"RTN","PSOREJU4",1,0)
PSOREJU4 ;BIRM/LE - Pharmacy Reject Overrides ;06/26/08
"RTN","PSOREJU4",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**289,290**;DEC 1997;Build 69
"RTN","PSOREJU4",3,0)
 ;Reference to DUR1^BPSNCPD3 supported by IA 4560
"RTN","PSOREJU4",4,0)
 ;
"RTN","PSOREJU4",5,0)
AUTOREJ(CODES,PSODIV) ;API to evaluate an array of reject codes to see if they are allowed to be passed to OP reject Worklist 
"RTN","PSOREJU4",6,0)
 ;Input:      CODES - required; array of codes to be validated for overrides.  
"RTN","PSOREJU4",7,0)
 ;           PSODIV - optional; Division for the Rx and Fill to be evaluated
"RTN","PSOREJU4",8,0)
 ;        
"RTN","PSOREJU4",9,0)
 ;Output:     CODES(0)=   1 for all reject codes are allowed to be passed to Pharmacy
"RTN","PSOREJU4",10,0)
 ;                         Reject Worklist or 0 (zero) means only default of 79/88/Tricare and
"RTN","PSOREJU4",11,0)
 ;                         any individually override rejects can be passed to the worklist. 
"RTN","PSOREJU4",12,0)
 ;                        
"RTN","PSOREJU4",13,0)
 ;            CODES(SEQ,REJECT)= 0 (zero) if the fill is not allowed to be passed to the Pharmacy
"RTN","PSOREJU4",14,0)
 ;                                Reject Worklist or 1 (one) for the reject code is allowed.
"RTN","PSOREJU4",15,0)
 ;                                
"RTN","PSOREJU4",16,0)
 N SEQ,COD,AUTO,ALLOW,SPDIV
"RTN","PSOREJU4",17,0)
 ;if no division passed, first division in file 59 is assumed.
"RTN","PSOREJU4",18,0)
 I '$G(PSODIV) S PSODIV=0,PSODIV=$O(^PS(59,PSODIV))
"RTN","PSOREJU4",19,0)
 I '$G(PSODIV) S CODES(0)="0^Division undefined in file 59" Q 
"RTN","PSOREJU4",20,0)
 S SPDIV="",SPDIV=$O(^PS(52.86,"B",PSODIV,SPDIV))
"RTN","PSOREJU4",21,0)
 I SPDIV="" S CODES(0)="0^Division is not defined under ePharmacy Site Parameters option." Q
"RTN","PSOREJU4",22,0)
 ;
"RTN","PSOREJU4",23,0)
 ; - all rejects allowed to pass to Pharmacy Reject Worklist?
"RTN","PSOREJU4",24,0)
 S CODES(0)=$$GET1^DIQ(52.86,SPDIV,1,"I")
"RTN","PSOREJU4",25,0)
 ;
"RTN","PSOREJU4",26,0)
 ; - check individual reject codes.  If defined, can be passed to Pharmacy Reject Worklist
"RTN","PSOREJU4",27,0)
 S (COD,SEQ)="" F  S SEQ=$O(CODES(SEQ)) Q:SEQ=""  F  S COD=$O(CODES(SEQ,COD)) Q:COD=""  D
"RTN","PSOREJU4",28,0)
 . I $D(^PS(52.86,+SPDIV,1,"B",COD)) S CODES(SEQ,COD)=1
"RTN","PSOREJU4",29,0)
 . E  S CODES(SEQ,COD)=0
"RTN","PSOREJU4",30,0)
 Q
"RTN","PSOREJU4",31,0)
 ;
"RTN","PSOREJU4",32,0)
WRKLST(RX,RFL,COMMTXT,USERID,DTTIME,OPECC,RXCOB) ;External API to store reject codes other that 79/88/Tricare on the OP Reject Worklist
"RTN","PSOREJU4",33,0)
 ; 
"RTN","PSOREJU4",34,0)
 N REJ,REJS,REJLST,I,IDX,CODE,DATA,TXT,PSOTRIC,SPDVI,PSODIV
"RTN","PSOREJU4",35,0)
 S PSODIV=$$RXSITE^PSOBPSUT(RX,RFL)
"RTN","PSOREJU4",36,0)
 L +^PSRX("REJ",RX):15 Q:'$T "0^Rx locked by another user."
"RTN","PSOREJU4",37,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJU4",38,0)
 D DUR1^BPSNCPD3(RX,RFL,.REJ,"",RXCOB)
"RTN","PSOREJU4",39,0)
 S PSOTRIC="" S:$G(REJ(1,"ELIGBLT"))="T" PSOTRIC=1
"RTN","PSOREJU4",40,0)
 S:PSOTRIC="" PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOREJU4",41,0)
 K REJS S (AUTO,IDX)=""
"RTN","PSOREJU4",42,0)
 F  S IDX=$O(REJ(IDX)) Q:IDX=""  D  Q:AUTO'=""
"RTN","PSOREJU4",43,0)
 . S TXT=REJ(IDX,"REJ CODE LST")
"RTN","PSOREJU4",44,0)
 . F I=1:1:$L(TXT,",") D
"RTN","PSOREJU4",45,0)
 . . S CODE=$P(TXT,",",I)
"RTN","PSOREJU4",46,0)
 . . I CODE'="79"&(CODE'="88")&('$G(PSOTRIC)) S AUTO=$$EVAL(PSODIV,CODE,OPECC,.AUTO) Q:'+AUTO
"RTN","PSOREJU4",47,0)
 . . I $$DUP^PSOREJU1(RX,+$$CLEAN^PSOREJU1($G(REJ(IDX,"RESPONSE IEN")))) S AUTO="0^Rx is already on Pharmacy Reject Worklist."
"RTN","PSOREJU4",48,0)
 . . S REJS(IDX,CODE)=""
"RTN","PSOREJU4",49,0)
 I '$D(REJS) L -^PSRX("REJ",RX) S AUTO="0^No action taken" Q AUTO
"RTN","PSOREJU4",50,0)
 ;D SAVECOM^PSOREJP3(RX,PSREJIEN,COMMTXT,DTTIME,USER)
"RTN","PSOREJU4",51,0)
 G EXIT:'+AUTO
"RTN","PSOREJU4",52,0)
 ;
"RTN","PSOREJU4",53,0)
 D SYNC2^PSOREJUT
"RTN","PSOREJU4",54,0)
 S AUTO=1
"RTN","PSOREJU4",55,0)
EXIT ;
"RTN","PSOREJU4",56,0)
 L -^PSRX("REJ",RX)
"RTN","PSOREJU4",57,0)
 Q AUTO
"RTN","PSOREJU4",58,0)
 ;
"RTN","PSOREJU4",59,0)
EVAL(PSODIV,CODE,OPECC,AUTO) ;Evaluates whether the reject codes other than 79/88/Tricare is allowed to be passed to OP Reject Worklist
"RTN","PSOREJU4",60,0)
 ;Input:      PSODIV - required; Division for the Rx and Fill to be evaluated
"RTN","PSOREJU4",61,0)
 ;              CODE - required; reject code
"RTN","PSOREJU4",62,0)
 ;             OPECC - optional, 1 means manually passed by OPECC means not passed
"RTN","PSOREJU4",63,0)
 ;              AUTO - passed in value to be returned.
"RTN","PSOREJU4",64,0)
 ;Output:       AUTO - 1 means reject is allowed to be passed to Pharmacy Reject Worklist and zero
"RTN","PSOREJU4",65,0)
 ;                       means not allowed.
"RTN","PSOREJU4",66,0)
 ;                       
"RTN","PSOREJU4",67,0)
 N ALLOWA,CIEN,ALLOW,ICOD,SPDIV
"RTN","PSOREJU4",68,0)
 I '$D(CODE)!(CODE="") Q 0
"RTN","PSOREJU4",69,0)
 I '$G(OPECC) S OPECC=0
"RTN","PSOREJU4",70,0)
 I '$G(PSODIV) Q 0
"RTN","PSOREJU4",71,0)
 S SPDIV="",SPDIV=$O(^PS(52.86,"B",PSODIV,SPDIV))
"RTN","PSOREJU4",72,0)
 Q:SPDIV="" "0^Division is not defined under ePharmacy Site Parameters option."
"RTN","PSOREJU4",73,0)
 S:'$G(AUTO) AUTO=""
"RTN","PSOREJU4",74,0)
 S ICOD="",ICOD=$O(^BPSF(9002313.93,"B",CODE,ICOD))
"RTN","PSOREJU4",75,0)
 Q:ICOD="" 0
"RTN","PSOREJU4",76,0)
 S ALLOWA=$$GET1^DIQ(52.86,SPDIV,1,"I") I ALLOWA Q 1
"RTN","PSOREJU4",77,0)
 Q:'$D(^PS(52.86,SPDIV,1,"B",ICOD)) "0^Reject Code is not allowed to be passed to Pharmacy Reject Worklist."
"RTN","PSOREJU4",78,0)
 S CIEN="",CIEN=$O(^PS(52.86,SPDIV,1,"B",ICOD,CIEN))
"RTN","PSOREJU4",79,0)
 I CIEN="" S AUTO="0^Code not defined."
"RTN","PSOREJU4",80,0)
 S (AUTO,ALLOW)="",ALLOW=$$GET1^DIQ(52.8651,CIEN_","_SPDIV,1,"I")
"RTN","PSOREJU4",81,0)
 I ALLOW Q 1
"RTN","PSOREJU4",82,0)
 I 'ALLOW D
"RTN","PSOREJU4",83,0)
 . I OPECC S AUTO=1
"RTN","PSOREJU4",84,0)
 . I 'OPECC S AUTO="0^Reject code "_CODE_" cannot be placed on the Pharmacy Reject Worklist"
"RTN","PSOREJU4",85,0)
 Q AUTO
"RTN","PSOREJU4",86,0)
 ;
"RTN","PSOREJU4",87,0)
OVER ;due to size of PSOREJU1 this subroutine was needed. also used by OVERMSG
"RTN","PSOREJU4",88,0)
 ;The variables RX, RFL, CODE and CODES are expected to remain when exiting this subroutine
"RTN","PSOREJU4",89,0)
 ;
"RTN","PSOREJU4",90,0)
 N DCODE,AUTO,PSODIV,OCODES S (PSODIV,AUTO,DCODE,OCODES,OVRARR)=""
"RTN","PSOREJU4",91,0)
 S OCODES=CODES,CODES=""
"RTN","PSOREJU4",92,0)
 S PSODIV=$$RXSITE^PSOBPSUT(RX,RFL)
"RTN","PSOREJU4",93,0)
 F  S DCODE=$O(^PSRX(RX,"REJ","B",DCODE)) Q:DCODE=""  D
"RTN","PSOREJU4",94,0)
 . I DCODE[79!(DCODE[88) S CODES=CODES_","_DCODE Q
"RTN","PSOREJU4",95,0)
 . S AUTO=$$EVAL(PSODIV,DCODE,0,.AUTO)
"RTN","PSOREJU4",96,0)
 . Q:'+AUTO
"RTN","PSOREJU4",97,0)
 . S CODES=CODES_","_DCODE,OVRARR(DCODE)=""
"RTN","PSOREJU4",98,0)
 S CODES=$E(CODES,2,9999)
"RTN","PSOREJU4",99,0)
 S:CODES="" CODES=OCODES
"RTN","PSOREJU4",100,0)
 Q
"RTN","PSOREJU4",101,0)
 ;
"RTN","PSOREJU4",102,0)
OVRMSG(RX,RFL,OVRMSG,REJDAT) ;
"RTN","PSOREJU4",103,0)
 N CODES,OVRARR,COD
"RTN","PSOREJU4",104,0)
 S CODES=""
"RTN","PSOREJU4",105,0)
 D OVER
"RTN","PSOREJU4",106,0)
 I '$D(REJDAT) D NOW^%DTC S REJDAT=%
"RTN","PSOREJU4",107,0)
 Q:'$D(OVRARR)
"RTN","PSOREJU4",108,0)
 F  S COD=$O(OVRARR(COD)) Q:COD=""  D
"RTN","PSOREJU4",109,0)
 . D SAVECOM^PSOREJP3(RX,COD,OVRMSG,REJDAT,$S($G(DUZ):DUZ,1:.5))
"RTN","PSOREJU4",110,0)
 Q
"RTN","PSOREJU4",111,0)
 ;
"RTN","PSOREJU4",112,0)
INLIST(RX,RFL,RXCOB) ;Returns whether a prescription/fill contains UNRESOLVED rejects
"RTN","PSOREJU4",113,0)
 ;Input:
"RTN","PSOREJU4",114,0)
 ;RX - Prescription IEN. 
"RTN","PSOREJU4",115,0)
 ;FILL - Fill number being processed. 
"RTN","PSOREJU4",116,0)
 ;Output:
"RTN","PSOREJU4",117,0)
 ;0 - the fill is not on the Pharmacy Reject Worklist
"RTN","PSOREJU4",118,0)
 ;1 - the fill is already on the Pharmacy Reject Worklist
"RTN","PSOREJU4",119,0)
 N PSOX,PSOX1,PSOX2,REJDATA1
"RTN","PSOREJU4",120,0)
 S PSOX=$$FIND^PSOREJUT(RX,RFL,.REJDATA1,"") I PSOX=0  Q 0
"RTN","PSOREJU4",121,0)
 S RXCOB=$S(RXCOB=1:"PRIMARY",RXCOB=2:"SECONDARY")
"RTN","PSOREJU4",122,0)
 S PSOX1="" F  S PSOX1=$O(REJDATA1(PSOX1))  Q:PSOX1=""  I REJDATA1(PSOX1,"COB")=RXCOB  S PSOX2=1  Q
"RTN","PSOREJU4",123,0)
 I '$G(PSOX2) Q 0
"RTN","PSOREJU4",124,0)
 Q 1
"RTN","PSOREJU4",125,0)
 ;
"RTN","PSOREJU4",126,0)
MULTI(RX,RFL,REJDATA,CODE,REJS) ;due to routine size, called from FIND^PSOREJUT
"RTN","PSOREJU4",127,0)
 ;returns REJS = 1 means reject code found on Rx, 0 (zero) means not found
"RTN","PSOREJU4",128,0)
 I $G(RFL) D
"RTN","PSOREJU4",129,0)
 . F I=1:1 S RCODE=$P(CODE,",",I) Q:RCODE=""!($G(REJS))  D GET^PSOREJU2(RX,RFL,.REJDATA,,,$G(RCODE)) I $D(REJDATA) S REJS=1
"RTN","PSOREJU4",130,0)
 E  S RFL=0 D  I '$D(REJDATA) F  S RFL=$O(^PSRX(RX,1,RFL)) Q:'RFL  D  Q:$G(REJS)
"RTN","PSOREJU4",131,0)
 . F I=1:1 S RCODE=$P(CODE,",",I) Q:RCODE=""!($G(REJS))  D GET^PSOREJU2(RX,RFL,.REJDATA,,,$G(RCODE)) I $D(REJDATA) S REJS=1
"RTN","PSOREJU4",132,0)
 Q REJS
"RTN","PSOREJU4",133,0)
 ;
"RTN","PSOREJU4",134,0)
SINGLE(RX,RFL,REJDATA,CODE,REJS) ;due to routine size, called from FIND^PSOREJUT
"RTN","PSOREJU4",135,0)
 ;Returns REJS = 1 means reject code found on Rx, 0 (zero) means not found
"RTN","PSOREJU4",136,0)
 I $G(RFL) D
"RTN","PSOREJU4",137,0)
 . D GET^PSOREJU2(RX,RFL,.REJDATA,,,$G(CODE))
"RTN","PSOREJU4",138,0)
 E  S RFL=0 D  I '$D(REJDATA) F  S RFL=$O(^PSRX(RX,1,RFL)) Q:'RFL  D
"RTN","PSOREJU4",139,0)
 . D GET^PSOREJU2(RX,RFL,.REJDATA,,,$G(CODE))
"RTN","PSOREJU4",140,0)
 S REJS=$S($D(REJDATA):1,1:0)
"RTN","PSOREJU4",141,0)
 Q REJS
"RTN","PSOREJUT")
0^2^B46867326
"RTN","PSOREJUT",1,0)
PSOREJUT ;BIRM/MFR - BPS (ECME) - Clinical Rejects Utilities ;06/07/05
"RTN","PSOREJUT",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**148,247,260,287,289,290**;DEC 1997;Build 69
"RTN","PSOREJUT",3,0)
 ;Reference to DUR1^BPSNCPD3 supported by IA 4560
"RTN","PSOREJUT",4,0)
 ;Reference to $$ADDCOMM^BPSBUTL supported by IA 4719
"RTN","PSOREJUT",5,0)
 ;
"RTN","PSOREJUT",6,0)
SAVE(RX,RFL,REJ,REOPEN) ; - Saves DUR Information in the file 52
"RTN","PSOREJUT",7,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJUT",8,0)
 ;         (o) RFL - Refill # (Default: most recent)
"RTN","PSOREJUT",9,0)
 ;         (o) REOPEN - value of 1 means claim being reopened; null or no value passed means reopen claim functionality not being used
"RTN","PSOREJUT",10,0)
 ;         (r) REJ - Array containing information about the REJECT on the following subscripts:
"RTN","PSOREJUT",11,0)
 ;                   "CODE"   - Reject Code (79 or 88)
"RTN","PSOREJUT",12,0)
 ;                   "DATE/TIME"   - Date/Time Reject Detected
"RTN","PSOREJUT",13,0)
 ;                   "PAYER MESSAGE" - Message returned by Payer (up to 140 chars long)
"RTN","PSOREJUT",14,0)
 ;                   "REASON" - Reject Reason (up to 100 chars long)
"RTN","PSOREJUT",15,0)
 ;                   "DUR TEXT" - Payer's DUR description
"RTN","PSOREJUT",16,0)
 ;                   "INSURANCE NAME" - Patient's Insurance Company Name
"RTN","PSOREJUT",17,0)
 ;                   "GROUP NAME" - Patient's Insurance Group Name
"RTN","PSOREJUT",18,0)
 ;                   "GROUP NUMBER" - Patient's Insurance Group Number
"RTN","PSOREJUT",19,0)
 ;                   "CARDHOLDER ID" - Patient's Insurance Cardholder ID
"RTN","PSOREJUT",20,0)
 ;                   "COB" - Coordination of Benefits
"RTN","PSOREJUT",21,0)
 ;                   "PLAN CONTACT" - Patient's Insurance Plan Contact (1-800)
"RTN","PSOREJUT",22,0)
 ;                   "PREVIOUS FILL" - Plan's Previous Fill Date
"RTN","PSOREJUT",23,0)
 ;                   "OTHER REJECTS" - Other Rejects with same Response
"RTN","PSOREJUT",24,0)
 ;                   "PHARMACIST" - Pharmacist DUZ
"RTN","PSOREJUT",25,0)
 ;                   "RESPONSE IEN" - Pointer to the RESPONSE file in ECME
"RTN","PSOREJUT",26,0)
 ;                   "REASON SVC CODE" - Reason for Service Code (pointer to BPS NCPDP REASON FOR SERVICE CODE)
"RTN","PSOREJUT",27,0)
 ;                   "RE-OPENED" - Re-Open Flag
"RTN","PSOREJUT",28,0)
 ;Output: REJ("REJECT IEN")
"RTN","PSOREJUT",29,0)
 N %,DIC,DR,DA,X,DINUM,DD,DO,DLAYGO
"RTN","PSOREJUT",30,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJUT",31,0)
 I '$G(PSODIV) S PSODIV=$$RXSITE^PSOBPSUT(RX,RFL)
"RTN","PSOREJUT",32,0)
 S REJ("CODE")=$G(REJ("CODE"))
"RTN","PSOREJUT",33,0)
 I REJ("CODE")'=79&(REJ("CODE")'=88)&('$G(PSOTRIC))&('$G(REOPEN)) S ERR="",ERR=$$EVAL^PSOREJU4(PSODIV,REJ("CODE"),$G(OPECC),.ERR) Q:'+ERR
"RTN","PSOREJUT",34,0)
 S REJ("PAYER MESSAGE")=$E($G(REJ("PAYER MESSAGE")),1,140),REJ("REASON")=$E($G(REJ("REASON")),1,100)
"RTN","PSOREJUT",35,0)
 S REJ("DUR TEXT")=$E($G(REJ("DUR TEXT")),1,100),REJ("GROUP NAME")=$E($G(REJ("GROUP NAME")),1,30)
"RTN","PSOREJUT",36,0)
 S REJ("INSURANCE NAME")=$E($G(REJ("INSURANCE NAME")),1,30),REJ("PLAN CONTACT")=$E($G(REJ("PLAN CONTACT")),1,30)
"RTN","PSOREJUT",37,0)
 S REJ("GROUP NUMBER")=$E($G(REJ("GROUP NUMBER")),1,30),REJ("OTHER REJECTS")=$E($G(REJ("OTHER REJECTS")),1,15)
"RTN","PSOREJUT",38,0)
 S REJ("CARDHOLDER ID")=$E($G(REJ("CARDHOLDER ID")),1,20),REJ("COB")=$G(REJ("COB"))
"RTN","PSOREJUT",39,0)
 I $G(REJ("DATE/TIME"))="" D NOW^%DTC S REJ("DATE/TIME")=%
"RTN","PSOREJUT",40,0)
 S DIC="^PSRX("_RX_",""REJ"",",DA(1)=RX,DIC(0)=""
"RTN","PSOREJUT",41,0)
 S X=$G(REJ("CODE")),DINUM=$O(^PSRX(RX,"REJ",9999),-1)+1
"RTN","PSOREJUT",42,0)
 S DIC("DR")="1///"_$G(REJ("DATE/TIME"))_";2///"_REJ("PAYER MESSAGE")_";3///"_REJ("REASON")_";4////"_$G(REJ("PHARMACIST"))_";5///"_RFL
"RTN","PSOREJUT",43,0)
 S DIC("DR")=DIC("DR")_";6///"_REJ("GROUP NAME")_";7///"_REJ("PLAN CONTACT")_";8///"_$G(REJ("PREVIOUS FILL"))
"RTN","PSOREJUT",44,0)
 S DIC("DR")=DIC("DR")_";9///0;14///"_$G(REJ("REASON SVC CODE"))_";16///"_$G(REJ("RESPONSE IEN"))
"RTN","PSOREJUT",45,0)
 S DIC("DR")=DIC("DR")_";17///"_$G(REJ("OTHER REJECTS"))_";18///"_REJ("DUR TEXT")_";20///"_REJ("INSURANCE NAME")
"RTN","PSOREJUT",46,0)
 S DIC("DR")=DIC("DR")_";21///"_REJ("GROUP NUMBER")_";22///"_REJ("CARDHOLDER ID")_";23///"_$G(REJ("RE-OPENED"))
"RTN","PSOREJUT",47,0)
 S DIC("DR")=DIC("DR")_";27///"_REJ("COB")
"RTN","PSOREJUT",48,0)
 F  L +^PSRX(RX):5 Q:$T  H 15
"RTN","PSOREJUT",49,0)
 K DD,DO D FILE^DICN K DD,DO S REJ("REJECT IEN")=+Y
"RTN","PSOREJUT",50,0)
 S REJ("OVERRIDE MSG")=$G(DATA("OVERRIDE MSG"))
"RTN","PSOREJUT",51,0)
 I REJ("OVERRIDE MSG")'="" D SAVECOM^PSOREJP3(RX,REJ("REJECT IEN"),REJ("OVERRIDE MSG"),$G(REJ("DATE/TIME")),$G(DUZ))
"RTN","PSOREJUT",52,0)
 K ERR
"RTN","PSOREJUT",53,0)
 L -^PSRX(RX)
"RTN","PSOREJUT",54,0)
 Q
"RTN","PSOREJUT",55,0)
 ; 
"RTN","PSOREJUT",56,0)
CLSALL(RX,RFL,USR,REA,COM,COD1,COD2,COD3,CLA,PA) ; Close/Resolve All Rejects
"RTN","PSOREJUT",57,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOREJUT",58,0)
 ;       (o) RFL  - Refill # (Default: most recent)
"RTN","PSOREJUT",59,0)
 ;       (r) REA  - Close REASON code
"RTN","PSOREJUT",60,0)
 ;       (o) COM  - Close COMMENTS
"RTN","PSOREJUT",61,0)
 ;       (o) USR  - User DUZ responsible for closing all rejects
"RTN","PSOREJUT",62,0)
 ;       (o) COD1 - NCPDP Reason for Service Code for overriding DUR REJECTS
"RTN","PSOREJUT",63,0)
 ;       (o) COD2 - NCPDP Professional Service Code for overriding DUR REJECTS
"RTN","PSOREJUT",64,0)
 ;       (o) COD3 - NCPDP Result of Service Code for overriding DUR REJECTS
"RTN","PSOREJUT",65,0)
 ;       (o) CLA  - NCPDP Clarification Code for overriding RTS and DUR REJECTS
"RTN","PSOREJUT",66,0)
 ;       (o) PA   - NCPDP Prior Authorization Type and Number (separated by "^")
"RTN","PSOREJUT",67,0)
 N REJ,REJDATA,DIE,DR,DA
"RTN","PSOREJUT",68,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJUT",69,0)
 ; - Closing OPEN/UNRESOLVED rejects
"RTN","PSOREJUT",70,0)
 I $$FIND(RX,RFL,.REJDATA) D
"RTN","PSOREJUT",71,0)
 . S REJ="" F  S REJ=$O(REJDATA(REJ)) Q:'REJ  D
"RTN","PSOREJUT",72,0)
 . . D CLOSE(RX,RFL,REJ,USR,REA,$G(COM),$G(COD1),$G(COD2),$G(COD3),$G(CLA),$G(PA))
"RTN","PSOREJUT",73,0)
 Q
"RTN","PSOREJUT",74,0)
 ;
"RTN","PSOREJUT",75,0)
CLOSE(RX,RFL,REJ,USR,REA,COM,COD1,COD2,COD3,CLA,PA) ; - Mark a DUR/REFILL TOO SOON reject RESOLVED
"RTN","PSOREJUT",76,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJUT",77,0)
 ;         (o) RFL - Refill # (Default: most recent)
"RTN","PSOREJUT",78,0)
 ;         (r) REJ - REJECT ID (IEN)
"RTN","PSOREJUT",79,0)
 ;         (o) USR - User (file #200 IEN) responsible for closing the REJECT
"RTN","PSOREJUT",80,0)
 ;         (r) REA - Reason for closing the REJECT:
"RTN","PSOREJUT",81,0)
 ;                       1:CLAIM RE-SUBMITTED
"RTN","PSOREJUT",82,0)
 ;                       2:RX ON HOLD
"RTN","PSOREJUT",83,0)
 ;                       3:RX SUSPENDED
"RTN","PSOREJUT",84,0)
 ;                       4:RX RETURNED TO STOCK
"RTN","PSOREJUT",85,0)
 ;                       5:RX DELETED
"RTN","PSOREJUT",86,0)
 ;                       6:OVERRIDEN W/OUT RE-SUBMISSION
"RTN","PSOREJUT",87,0)
 ;                       7:DISCONTINUED
"RTN","PSOREJUT",88,0)
 ;                       8:RX EDIT
"RTN","PSOREJUT",89,0)
 ;                      99:OTHER
"RTN","PSOREJUT",90,0)
 ;         (o) COM  - Close comments manually entered by the user
"RTN","PSOREJUT",91,0)
 ;         (o) COD1 - NCPDP Reason for Service Code for overriding DUR REJECTS
"RTN","PSOREJUT",92,0)
 ;         (o) COD2 - NCPDP Professional Service Code for overriding DUR REJECTS
"RTN","PSOREJUT",93,0)
 ;         (o) COD3 - NCPDP Result of Service Code for overriding DUR REJECTS
"RTN","PSOREJUT",94,0)
 ;         (o) CLA  - NCPDP Clarification Code for overriding RTS and DUR REJECTS
"RTN","PSOREJUT",95,0)
 ;         (o) PA   - NCPDP Prior Authorization Type and Number (separated by "^")
"RTN","PSOREJUT",96,0)
 I '$G(RX)!'$G(REJ) Q
"RTN","PSOREJUT",97,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJUT",98,0)
 I '$D(^PSRX(RX,"REJ",REJ)) Q
"RTN","PSOREJUT",99,0)
 I $$GET1^DIQ(52.25,REJ_","_RX,5)'=+$G(RFL) Q
"RTN","PSOREJUT",100,0)
 S:'$G(REA) REA=99 S COM=$TR($G(COM),";^",",,")
"RTN","PSOREJUT",101,0)
 N DQ,DA,DIE,DR,X,Y,REJCOM
"RTN","PSOREJUT",102,0)
 D NOW^%DTC
"RTN","PSOREJUT",103,0)
 S REJCOM="AUTOMATICALLY CLOSED" I REA'=1 S REJCOM=COM
"RTN","PSOREJUT",104,0)
 S DA(1)=RX,DA=REJ,DIE="^PSRX("_RX_",""REJ"","
"RTN","PSOREJUT",105,0)
 S DR="9///1;10///"_%_";11////"_$G(USR)_";12///"_REA_";13///"_REJCOM_";14///"_$G(COD1)_";15///"_$G(COD2)
"RTN","PSOREJUT",106,0)
 S DR=DR_";19///"_$G(COD3)_";24///"_$G(CLA)_";25///"_$P($G(PA),"^")_";26///"_$P($G(PA),"^",2)
"RTN","PSOREJUT",107,0)
 D ^DIE S X=$$ADDCOMM^BPSBUTL(RX,RFL,COM)
"RTN","PSOREJUT",108,0)
 Q
"RTN","PSOREJUT",109,0)
 ;
"RTN","PSOREJUT",110,0)
FIND(RX,RFL,REJDATA,CODE) ; - Returns whether a Rx/fill contains UNRESOLVED rejects
"RTN","PSOREJUT",111,0)
 ; Input: (r) RX - Rx IEN (#52) 
"RTN","PSOREJUT",112,0)
 ; (o) RFL - Refill # (If not passed, look original and all refills)
"RTN","PSOREJUT",113,0)
 ; (o) CODE - Can be null, a specific Reject Code(s) to be checked or multiple codes separated by comma's
"RTN","PSOREJUT",114,0)
 ; Output: 1 - Rx contains unresolved Rejects 
"RTN","PSOREJUT",115,0)
 ; 0 - Rx does not contain unresolved Rejects
"RTN","PSOREJUT",116,0)
 ; .REJDATA - Array containing the Reject(s) data (see 
"RTN","PSOREJUT",117,0)
 ; GET^PSOREJU2 for fields documentation)
"RTN","PSOREJUT",118,0)
 N RCODE,I,REJS
"RTN","PSOREJUT",119,0)
 S REJS=0,RCODE=""
"RTN","PSOREJUT",120,0)
 K REJDATA
"RTN","PSOREJUT",121,0)
 I $G(RFL),$$STATUS^PSOBPSUT(RX,RFL)="" Q 0
"RTN","PSOREJUT",122,0)
 I $G(CODE),CODE["," S REJS=$$MULTI^PSOREJU4(RX,$G(RFL),.REJDATA,$G(CODE),REJS) G FEND
"RTN","PSOREJUT",123,0)
 S REJS=$$SINGLE^PSOREJU4(RX,$G(RFL),.REJDATA,$G(CODE),REJS)
"RTN","PSOREJUT",124,0)
FEND ;
"RTN","PSOREJUT",125,0)
 Q $S(REJS:1,1:0)
"RTN","PSOREJUT",126,0)
 ;
"RTN","PSOREJUT",127,0)
SYNC(RX,RFL,USR,RXCOB) ;
"RTN","PSOREJUT",128,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJUT",129,0)
 ;         (o) RFL - Refill # (Default: most recent)
"RTN","PSOREJUT",130,0)
 ;         (o) USR - User using the system when this routine is called
"RTN","PSOREJUT",131,0)
 ;         (o) RXCOB - Coordination of Benefits code
"RTN","PSOREJUT",132,0)
 I '$G(RXCOB) S RXCOB=1
"RTN","PSOREJUT",133,0)
 N REJ,REJS,REJLST,I,IDX,CODE,DATA,TXT,PSOTRIC,ERR,PSODIV,OPECC,OVREJ,ESH
"RTN","PSOREJUT",134,0)
 L +^PSRX("REJ",RX):0 Q:'$T
"RTN","PSOREJUT",135,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJUT",136,0)
 S PSODIV=$$RXSITE^PSOBPSUT(RX,RFL)
"RTN","PSOREJUT",137,0)
 D DUR1^BPSNCPD3(RX,RFL,.REJ,"",RXCOB)
"RTN","PSOREJUT",138,0)
 S PSOTRIC="" S:$G(REJ(1,"ELIGBLT"))="T" PSOTRIC=1 S:PSOTRIC="" PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,.PSOTRIC)
"RTN","PSOREJUT",139,0)
 K REJS S (OPECC,IDX,ERR)=""
"RTN","PSOREJUT",140,0)
 F  S IDX=$O(REJ(IDX)) Q:IDX=""  S TXT=$G(REJ(IDX,"REJ CODE LST")) D
"RTN","PSOREJUT",141,0)
 . F I=1:1:$L(TXT,",") S CODE=$P(TXT,",",I),OVREJ="" D
"RTN","PSOREJUT",142,0)
 . . I ",M6,M8,99,NN,"[(","_CODE_",") S ESH="",ESH=$$DUR^PSOBPSU2(RX,RFL) Q:'ESH&('PSOTRIC)
"RTN","PSOREJUT",143,0)
 . . I CODE'="79"&(CODE'="88")&('$G(PSOTRIC)) S ERR=$$EVAL^PSOREJU4(PSODIV,CODE,OPECC,.ERR) Q:'+ERR
"RTN","PSOREJUT",144,0)
 . . S:+$G(ERR) OVREJ=1
"RTN","PSOREJUT",145,0)
 . . I $$DUP^PSOREJU1(RX,+$$CLEAN^PSOREJU1($G(REJ(IDX,"RESPONSE IEN")))) Q
"RTN","PSOREJUT",146,0)
 . . S REJS(IDX,CODE)=OVREJ
"RTN","PSOREJUT",147,0)
 I '$D(REJS) L -^PSRX("REJ",RX) Q
"RTN","PSOREJUT",148,0)
SYNC2 ;
"RTN","PSOREJUT",149,0)
 S (IDX,CODE)="" F  S IDX=$O(REJS(IDX)) Q:IDX=""  D
"RTN","PSOREJUT",150,0)
 . F  S CODE=$O(REJS(IDX,CODE)) Q:CODE=""  K DATA D
"RTN","PSOREJUT",151,0)
 . . I 'OPECC&(CODE'[79)&(CODE'[88) S DATA("OVERRIDE MSG")="Automatically transferred due to override for reject code."
"RTN","PSOREJUT",152,0)
 . . I OPECC&(CODE'[79)&(CODE'[88) S DATA("OVERRIDE MSG")="Transferred by OPECC."
"RTN","PSOREJUT",153,0)
 . . I $D(COMMTXT) S:COMMTXT'="" DATA("OVERRIDE MSG")=DATA("OVERRIDE MSG")_" "_$$CLEAN^PSOREJU1($P(COMMTXT,":",2))
"RTN","PSOREJUT",154,0)
 . . S DATA("DUR TEXT")=$$CLEAN^PSOREJU1($G(REJ(IDX,"DUR FREE TEXT DESC")))
"RTN","PSOREJUT",155,0)
 . . S DATA("PAYER MESSAGE")=$$CLEAN^PSOREJU1($G(REJ(IDX,"PAYER MESSAGE")))
"RTN","PSOREJUT",156,0)
 . . S DATA("CODE")=CODE,DATA("REASON")=$$CLEAN^PSOREJU1($G(REJ(IDX,"REASON")))
"RTN","PSOREJUT",157,0)
 . . S DATA("PHARMACIST")=$G(USR),DATA("INSURANCE NAME")=$$CLEAN^PSOREJU1($G(REJ(IDX,"INSURANCE NAME")))
"RTN","PSOREJUT",158,0)
 . . S DATA("GROUP NAME")=$$CLEAN^PSOREJU1($G(REJ(IDX,"GROUP NAME"))),DATA("GROUP NUMBER")=$$CLEAN^PSOREJU1($G(REJ(IDX,"GROUP NUMBER")))
"RTN","PSOREJUT",159,0)
 . . S DATA("CARDHOLDER ID")=$$CLEAN^PSOREJU1($G(REJ(IDX,"CARDHOLDER ID"))),DATA("PLAN CONTACT")=$$CLEAN^PSOREJU1($G(REJ(IDX,"PLAN CONTACT")))
"RTN","PSOREJUT",160,0)
 . . S DATA("PREVIOUS FILL")=$$CLEAN^PSOREJU1($$DAT^PSOREJU1($G(REJ(IDX,"PREVIOUS FILL DATE"))))
"RTN","PSOREJUT",161,0)
 . . S DATA("OTHER REJECTS")=$$CLEAN^PSOREJU1($$OTH^PSOREJU1(CODE,$G(REJ(IDX,"REJ CODE LST"))))
"RTN","PSOREJUT",162,0)
 . . S DATA("RESPONSE IEN")=+$$CLEAN^PSOREJU1($G(REJ(IDX,"RESPONSE IEN")))
"RTN","PSOREJUT",163,0)
 . . S DATA("REASON SVC CODE")=$$REASON^PSOREJU2($G(REJ(IDX,"REASON"))),DATA("COB")=IDX
"RTN","PSOREJUT",164,0)
 . . D SAVE(RX,RFL,.DATA)
"RTN","PSOREJUT",165,0)
 L -^PSRX("REJ",RX)
"RTN","PSOREJUT",166,0)
 Q
"RTN","PSOSULBL")
0^7^B73560557
"RTN","PSOSULBL",1,0)
PSOSULBL ;BHAM ISC/RTR,SAB-Print Suspended labels ;4/8/93
"RTN","PSOSULBL",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**139,173,174,148,200,260,264,287,289,290**;DEC 1997;Build 69
"RTN","PSOSULBL",3,0)
 ;External reference ^PS(55 supported by DBIA 2228
"RTN","PSOSULBL",4,0)
 ;Reference to SAVNDC^PSSNDCUT supported by IA 4707
"RTN","PSOSULBL",5,0)
 ;Reference ^PSDRUG( supported by DBIA 221
"RTN","PSOSULBL",6,0)
 K PDUZ,REPRINT G ^PSOSULB1
"RTN","PSOSULBL",7,0)
BEG ;
"RTN","PSOSULBL",8,0)
 K PSORUNIN,PSORETRY N BPSCNT
"RTN","PSOSULBL",9,0)
 S PSORUNIN="^XTMP(""PSOSUSP"")"     ; global lock fix by patch 290
"RTN","PSOSULBL",10,0)
 L +@PSORUNIN:10 I '$T D
"RTN","PSOSULBL",11,0)
 . F PSORETRY=1:1:120 L +@PSORUNIN:60 I $T Q  ;wait Max of 2 hrs before continue
"RTN","PSOSULBL",12,0)
 . Q
"RTN","PSOSULBL",13,0)
 K ^UTILITY($J,"PSOPRO"),^TMP("PSOSBAI",$J) S PSOSEQ=1 F DFN=0:0 S DFN=$O(^PS(52.5,"AC",DFN)) Q:'DFN  D  D:'PSRT PID^VADPT6 D CHKDEAD D:'DEAD&($G(PSOSFLAG)) PRT
"RTN","PSOSULBL",14,0)
 .S PSOSFLAG=0 F ZZ=0:0 S ZZ=$O(^PS(52.5,"AC",DFN,ZZ)) Q:'ZZ!$G(PSOSFLAG)  I ZZ'>PRTDT S PSOSFLAG=1
"RTN","PSOSULBL",15,0)
 D PPL
"RTN","PSOSULBL",16,0)
 D:$D(^UTILITY($J,"PSOPRO"))&($P(PSOPAR,"^",8)) PROF
"RTN","PSOSULBL",17,0)
 G EXIT
"RTN","PSOSULBL",18,0)
PRT F SDT=0:0 S SDT=$O(^PS(52.5,"AC",DFN,SDT)) D:SDT CHK Q:'SDT
"RTN","PSOSULBL",19,0)
 Q
"RTN","PSOSULBL",20,0)
EXIT ;
"RTN","PSOSULBL",21,0)
 I $D(^TMP("PSOSBAI",$J)) D CHKMAIL
"RTN","PSOSULBL",22,0)
 K ^TMP($J),^TMP("PSOSBAI",$J)
"RTN","PSOSULBL",23,0)
 I $D(PSORUNIN) L -@PSORUNIN
"RTN","PSOSULBL",24,0)
 D ^%ZISC
"RTN","PSOSULBL",25,0)
 K %,%ZIS,CNT,COM,DA,DEAD,DFN,DIRUT,DTTM,G,HDPPL,JJ,JJJ,JJJJ,PDUZ,IOP,ORD,PFIOQ,PSLION,PSRT,POP,PRF,PRTDT,PSLIO,PSNP,PSODBQ,PSOSEQ,PSOSFLAG,PSOSU,PSOTIME,PSOOUT,PSOPRFLG,PSOSEQ,PSOSUSPR,PSSPND,PST,PTL,PPLHLD,PSFNIEN,ZTSK
"RTN","PSOSULBL",26,0)
 K PSOBADDR,PSORUNIN,PSORETRY,PSRTONE,PSSRT,PSUSDEA,RF,RFCNT,RX,RXDFN,SDT,SFN,SREC,STOP,SUSPT,VADM,VAPA,X,X1,X2,XAK,XDATE,Y,Z,ZZ,WWW,PSDDDATE,SINRX,RXPR,RXPR1,GGGG,XXX,ZII,ZTDESC,ZTRTN,ZTSAVE,RRRR,RXRP,RXRP1,RXFL,SPR S:$D(ZTQUEUED) ZTREQ="@" Q
"RTN","PSOSULBL",27,0)
CHK I SDT'>XDATE D TMP Q
"RTN","PSOSULBL",28,0)
 Q
"RTN","PSOSULBL",29,0)
TMP F SFN=0:0 S SFN=$O(^PS(52.5,"AC",DFN,SDT,SFN)) Q:'SFN  D
"RTN","PSOSULBL",30,0)
 . I '$D(^PS(52.5,SFN,0))!'$D(^DPT(+DFN,0)) Q
"RTN","PSOSULBL",31,0)
 . N RXSITE,PRINTED,PSDFN,RXSTS,RXIEN,RXFILL,PARTIAL,RXEXPDT,RESP,DSHLD,ESTATUS
"RTN","PSOSULBL",32,0)
 . S RXIEN=+$$GET1^DIQ(52.5,SFN,.01,"I"),RXDFN=$$GET1^DIQ(52,RXIEN,2,"I")
"RTN","PSOSULBL",33,0)
 . S RXSTS=$$GET1^DIQ(52,RXIEN,100,"I"),RXSITE=+$$GET1^DIQ(52.5,SFN,.06,"I"),PRINTED=+$$GET1^DIQ(52.5,SFN,2,"I")
"RTN","PSOSULBL",34,0)
 . S PARTIAL=+$$GET1^DIQ(52.5,SFN,.05,"I"),RXEXPDT=$$GET1^DIQ(52,RXIEN,26,"I")
"RTN","PSOSULBL",35,0)
 . S RXFILL=$$GET1^DIQ(52.5,SFN,9,"I") I RXFILL="" S RXFILL=$$LSTRFL^PSOBPSU1(RXIEN)
"RTN","PSOSULBL",36,0)
 . I RXSITE=$G(PSOSITE),'PRINTED,RXDFN=DFN,RXSTS<9 D
"RTN","PSOSULBL",37,0)
 . . I PARTIAL,'$D(^PSRX(RXIEN,"P",PARTIAL)) Q
"RTN","PSOSULBL",38,0)
 . . I RXEXPDT<DT,RXSTS<11 D  Q
"RTN","PSOSULBL",39,0)
 . . . N RXREC S RXREC=RXIEN D EX^PSOSUTL
"RTN","PSOSULBL",40,0)
 . . . K DIE,DA S DIE=52,DA=RXIEN,DR="100///11" D ^DIE K DIE,DA
"RTN","PSOSULBL",41,0)
 . . . K DIK,DA S DA=SFN,DIK="^PS(52.5," D ^DIK K DIK,DA
"RTN","PSOSULBL",42,0)
 . . S PSOBADDR=0 D CHKBAI I PSOBADDR Q
"RTN","PSOSULBL",43,0)
 . . I PSRT="D" D
"RTN","PSOSULBL",44,0)
 . . . S PSSRT=$S($G(PSRTONE)="I":VA("PID"),1:$P(^DPT(DFN,0),"^")_$P(^(0),"^",9))
"RTN","PSOSULBL",45,0)
 . . . S PSUSDEA=$P($G(^PS(52.5,SFN,0)),"^",10)
"RTN","PSOSULBL",46,0)
 . . . S SRT=$S(PSUSDEA["A"!(PSUSDEA["C"):"A-"_PSSRT,PSUSDEA["S":"S-"_PSSRT,1:"Z-"_PSSRT)
"RTN","PSOSULBL",47,0)
 . . I PSRT'="D" D
"RTN","PSOSULBL",48,0)
 . . . S SRT=$S(PSRT:$P(^DPT(DFN,0),"^")_$P(^(0),"^",9),1:VA("PID"))
"RTN","PSOSULBL",49,0)
 . . ; - If not partial fill, sending Rx to ECME for 3rd Party billing
"RTN","PSOSULBL",50,0)
 . . I 'PARTIAL,$$RETRX^PSOBPSUT(RXIEN,RXFILL),SDT>DT Q
"RTN","PSOSULBL",51,0)
 . . S ESTATUS=$$STATUS^PSOBPSUT(RXIEN,RXFILL)
"RTN","PSOSULBL",52,0)
 . . I 'PARTIAL,ESTATUS'="",ESTATUS'["PAYABLE",'$$ECMESTAT^PSOBPSU2(RXIEN,RXFILL) Q  ;check for existing epharmacy reject codes
"RTN","PSOSULBL",53,0)
 . . I 'PARTIAL,$$STATUS^PSOBPSUT(RXIEN,RXFILL-1)'="" S DSHLD=$$DSH^PSOSULB1(SFN) Q:'DSHLD  ;epharmacy-3/4 days supply
"RTN","PSOSULBL",54,0)
 . . I 'PARTIAL,$$FIND^PSOREJUT(RXIEN,RXFILL,,"79,88") Q  ;check for DUR/RTS (again as it is done in ECMESTAT above
"RTN","PSOSULBL",55,0)
 . . I 'PARTIAL,($$RETRX^PSOBPSUT(RXIEN,RXFILL)!$$ECMEST2^PSOBPSU2(RXIEN,RXFILL)) D  Q:$$TRISTA^PSOREJU3(RXIEN,RXFILL,.RESP,"PL")
"RTN","PSOSULBL",56,0)
 . . . D ECMESND^PSOBPSU1(RXIEN,RXFILL,,"PL",,,,,,.RESP)
"RTN","PSOSULBL",57,0)
 . . . I $D(RESP),'RESP S BPSCNT=$G(BPSCNT)+1
"RTN","PSOSULBL",58,0)
 . . S ^TMP($J,SRT,SFN)=RXIEN
"RTN","PSOSULBL",59,0)
 Q
"RTN","PSOSULBL",60,0)
PPL ; Wait some time before printing so response from 3rd party payers can be received
"RTN","PSOSULBL",61,0)
 I $G(BPSCNT)>0 H 60+$S((BPSCNT*15)>7200:7200,1:(BPSCNT*15))
"RTN","PSOSULBL",62,0)
 K PPL,PPL1 S ORD="" F  S ORD=$O(^TMP($J,ORD)) Q:ORD=""  D PPL1
"RTN","PSOSULBL",63,0)
 Q
"RTN","PSOSULBL",64,0)
PPL1 ; Printing Labels
"RTN","PSOSULBL",65,0)
 N PARTIAL,REPRINT,REFILL,Z,QUIT,ESTAT
"RTN","PSOSULBL",66,0)
 S (PSOPRFLG,SUSPT)=1 S:$D(PSOPROP) PFIO=PSOPROP
"RTN","PSOSULBL",67,0)
 S:'$D(PDUZ) PDUZ=DUZ K RXPR,RXPR1,PPL
"RTN","PSOSULBL",68,0)
 F SFN=0:0 S SFN=$O(^TMP($J,ORD,SFN)) Q:'SFN  D
"RTN","PSOSULBL",69,0)
 .I '$D(^PS(52.5,SFN,0)) Q
"RTN","PSOSULBL",70,0)
 .S Z=$G(^PS(52.5,SFN,0)),SINRX=+$P(Z,"^"),REFILL=+$P(Z,"^",13)
"RTN","PSOSULBL",71,0)
 .S PARTIAL=$P(Z,"^",5),REPRINT=$P(Z,"^",12)
"RTN","PSOSULBL",72,0)
 .; - Screening out OPEN/UNRESOLVED Rejects (3rd Party Payer) 
"RTN","PSOSULBL",73,0)
 .S QUIT=0
"RTN","PSOSULBL",74,0)
 .I 'PARTIAL,'REPRINT D  I QUIT Q
"RTN","PSOSULBL",75,0)
 ..I $$FIND^PSOREJUT(SINRX,REFILL,,"79,88") S QUIT=1 Q
"RTN","PSOSULBL",76,0)
 ..S ESTAT=$$STATUS^PSOBPSUT(SINRX,REFILL)
"RTN","PSOSULBL",77,0)
 ..I ESTAT'="E PAYABLE",'$$ECMESTAT^PSOBPSU2(SINRX,REFILL) S QUIT=1 Q  ;host reject
"RTN","PSOSULBL",78,0)
 ..I ESTAT="E PAYABLE" D
"RTN","PSOSULBL",79,0)
 ...D SAVNDC^PSSNDCUT(+$$GET1^DIQ(52,SINRX,6,"I"),$$RXSITE^PSOBPSUT(SINRX,REFILL),$$GETNDC^PSONDCUT(SINRX,REFILL))
"RTN","PSOSULBL",80,0)
 .; 
"RTN","PSOSULBL",81,0)
 .I $L($G(PPL))<240 D
"RTN","PSOSULBL",82,0)
 ..S PPL=$P(^TMP($J,ORD,SFN),"^")_","_$G(PPL),RXPR(SINRX)=$P(^PS(52.5,SFN,0),"^",5)
"RTN","PSOSULBL",83,0)
 ..S:$P(^PS(52.5,SFN,0),"^",12) RXRP(SINRX)=1
"RTN","PSOSULBL",84,0)
 .E  D
"RTN","PSOSULBL",85,0)
 ..S PPL1=$P(^TMP($J,ORD,SFN),"^")_","_$G(PPL1),RXPR1(SINRX)=$P(^PS(52.5,SFN,0),"^",5)
"RTN","PSOSULBL",86,0)
 ..S:$P(^PS(52.5,SFN,0),"^",12) RXRP1(SINRX)=1
"RTN","PSOSULBL",87,0)
 .S DFN=$P(^PS(52.5,SFN,0),"^",3)
"RTN","PSOSULBL",88,0)
 .I $P(PSOPAR,"^",8),'$D(^PSRX($P(^PS(52.5,SFN,0),"^"),1)),'$G(RXPR(SINRX)),'$G(RXPR1(SINRX)) S PSOPRFLG=0
"RTN","PSOSULBL",89,0)
 S PSNP=$S($P(PSOPAR,"^",8):1,1:0)
"RTN","PSOSULBL",90,0)
 I $G(PPL) D
"RTN","PSOSULBL",91,0)
 .S PPLHLD=$G(PPL1),HDPPL=PPL K PPL1 S (PSODBQ,PSOSUSPR)=1
"RTN","PSOSULBL",92,0)
 .F GGGG=0:0 S GGGG=$O(RXPR(GGGG)) Q:'GGGG  K:'$G(RXPR(GGGG)) RXPR(GGGG)
"RTN","PSOSULBL",93,0)
 I $G(PPL) D DQ^PSOLBL,SEQ D:'$G(PSOPRFLG)
"RTN","PSOSULBL",94,0)
 .I $G(PSOPROP)'=$G(PSLION) S ^UTILITY($J,"PSOPRO",DFN)="" Q
"RTN","PSOSULBL",95,0)
 .D DQ^PSOPRFSS
"RTN","PSOSULBL",96,0)
 I $G(PPLHLD) K RXPR S (PPL,HDPPL)=PPLHLD,(PSODBQ,PSOSUSPR)=1,PSNP=0 S:'$D(PDUZ) PDUZ=DUZ F XXX=0:0 S XXX=$O(RXPR1(XXX)) Q:'XXX  S:$G(RXPR1(XXX)) RXPR(XXX)=RXPR1(XXX)
"RTN","PSOSULBL",97,0)
 I $G(PPLHLD) F RRRR=0:0 S RRRR=$O(RXRP1(RRRR)) Q:'RRRR  S:$D(RXRP1(RRRR)) RXRP(RRRR)=1
"RTN","PSOSULBL",98,0)
 I $G(PPLHLD) D DQ^PSOLBL,SEQ D:'$G(PSOPRFLG)
"RTN","PSOSULBL",99,0)
 .I $G(PSOPROP)'=$G(PSLION) S ^UTILITY($J,"PSOPRO",DFN)="" Q
"RTN","PSOSULBL",100,0)
 .D DQ^PSOPRFSS
"RTN","PSOSULBL",101,0)
 K PPL,PPL1,PPLHLD,RXPR,RXPR1,RXFL Q
"RTN","PSOSULBL",102,0)
SEQ ;
"RTN","PSOSULBL",103,0)
 S SQCOUNT=0 F JJJ=1:1:$L(HDPPL) S:$E(HDPPL,JJJ)="," SQCOUNT=SQCOUNT+1
"RTN","PSOSULBL",104,0)
 F JJJJ=1:1:SQCOUNT S PSFNIEN=$P(HDPPL,",",JJJJ) D:PSFNIEN
"RTN","PSOSULBL",105,0)
 .S PSFNIEN=$O(^PS(52.5,"B",PSFNIEN,0)) I PSFNIEN D
"RTN","PSOSULBL",106,0)
 ..S $P(^PS(52.5,PSFNIEN,0),"^",11)=PSOSEQ,PSOSEQ=PSOSEQ+1 S:$P(^PS(52.5,PSFNIEN,0),"^",8)&($P(^(0),"^",9))&($P(^(0),"^",6)) ^PS(52.5,"AS",$P(^PS(52.5,PSFNIEN,0),"^",8),$P(^(0),"^",9),$P(^(0),"^",6),$P(^(0),"^",11),PSFNIEN)=""
"RTN","PSOSULBL",107,0)
 Q
"RTN","PSOSULBL",108,0)
CHKDEAD D DEM^VADPT I VADM(1)="" S DEAD=0 Q
"RTN","PSOSULBL",109,0)
 I VADM(6)="" S DEAD=0 Q
"RTN","PSOSULBL",110,0)
 S PSDDDATE=$P(VADM(6),"^",2) F WWW=0:0 S WWW=$O(^PS(55,DFN,"P",WWW)) Q:'WWW  I $D(^PS(55,DFN,"P",WWW,0)),$P($G(^(0)),"^") S (DA,RXREC)=$P(^(0),"^") S SFN=$O(^PS(52.5,"B",RXREC,0)) I SFN,$D(^PS(52.5,SFN,0)) S RX=$P(^(0),"^") D DEAD
"RTN","PSOSULBL",111,0)
 Q
"RTN","PSOSULBL",112,0)
DEAD S $P(^PSRX(RX,"STA"),"^")=12,COM="Died ("_$G(PSDDDATE)_")",DA(1)=RX
"RTN","PSOSULBL",113,0)
 S DEAD=1 D ARECD^PSOSUTL S DIK="^PS(52.5,",DA=SFN D ^DIK K DIK
"RTN","PSOSULBL",114,0)
 Q
"RTN","PSOSULBL",115,0)
PROF ;
"RTN","PSOSULBL",116,0)
 S ZTRTN="PRPROF^PSOSULBL",ZTDESC="PRINT PROFILES FROM SUSPENSE",ZTDTH=$H,ZTIO=PSOPROP
"RTN","PSOSULBL",117,0)
 S ZTSAVE("^UTILITY($J,""PSOPRO"",")="",ZTSAVE("PSOPAR")="",ZTSAVE("PSODTCUT")="",ZTSAVE("PSOSITE")="",ZTSAVE("PSOPRPAS")="" D ^%ZTLOAD Q
"RTN","PSOSULBL",118,0)
PRPROF ;
"RTN","PSOSULBL",119,0)
 F LLL=0:0 S LLL=$O(^UTILITY($J,"PSOPRO",LLL)) Q:'LLL  I $D(^DPT(LLL,0)) S DFN=LLL D DQ^PSOPRFSS
"RTN","PSOSULBL",120,0)
 K PSOPAR,PSODTCUT,PSOSITE,PSOPRPAS,LLL,DFN,^UTILITY($J,"PSOPRO") D ^%ZISC S:$D(ZTQUEUED) ZTREQ="@"
"RTN","PSOSULBL",121,0)
 Q
"RTN","PSOSULBL",122,0)
 ;
"RTN","PSOSULBL",123,0)
CHKBAI ; IF BAD ADDRESS INDICATOR, NO ACTIVE TEMPORARY ADDRESS AND ROUTING OF MAIL, DO NOT SEND TO OPAI AND/OR DO NOT PRINT LABEL
"RTN","PSOSULBL",124,0)
 N PSOBADR,ACTSEQ,XX,PSOFIRST,ACTTYPE
"RTN","PSOSULBL",125,0)
 I '$G(RXFILL),$P(^PSRX(RXIEN,0),"^",11)="W" Q
"RTN","PSOSULBL",126,0)
 I $P($G(^PSRX(RXIEN,1,RXFILL,0)),"^",2)="W" Q
"RTN","PSOSULBL",127,0)
 S ACTTYPE="BAD ADDRESS INDICATOR"
"RTN","PSOSULBL",128,0)
 S PSOBADR=$$CHKRX^PSOBAI(RXIEN)
"RTN","PSOSULBL",129,0)
 ; GOOD PERMANENT OR TEMPORARY ADDRESS - CHECK FOR DO NOT MAIL
"RTN","PSOSULBL",130,0)
 I PSOBADR,'$P(PSOBADR,"^",2) D SETTMP(ACTTYPE) Q
"RTN","PSOSULBL",131,0)
 S NOMAIL=0 D NOMAIL I NOMAIL Q
"RTN","PSOSULBL",132,0)
 D FOREIGN
"RTN","PSOSULBL",133,0)
 Q
"RTN","PSOSULBL",134,0)
 ;
"RTN","PSOSULBL",135,0)
SETTMP(ACTTYPE) ;
"RTN","PSOSULBL",136,0)
 N ACTSEQ,XX,PSOFIRST,ZZ
"RTN","PSOSULBL",137,0)
 S PSOFIRST=1
"RTN","PSOSULBL",138,0)
 S PSOBADDR=1
"RTN","PSOSULBL",139,0)
 S ACTSEQ=0 F  S ACTSEQ=$O(^PSRX(RXIEN,"A",ACTSEQ)) Q:ACTSEQ=""  D
"RTN","PSOSULBL",140,0)
 .S XX=$G(^PSRX(RXIEN,"A",ACTSEQ,0)) I $P(XX,"^",2)="S" S ZZ=$P(XX,"^",4),ZZ=$S(ZZ<6:ZZ,1:ZZ-1) I ZZ=RXFILL,$P(XX,"^",5)["due to "_ACTTYPE S PSOFIRST=0 Q
"RTN","PSOSULBL",141,0)
 I PSOFIRST D
"RTN","PSOSULBL",142,0)
 .S ^TMP("PSOSBAI",$J,RXIEN,+RXFILL)=ACTTYPE
"RTN","PSOSULBL",143,0)
 .D ACT(ACTTYPE)
"RTN","PSOSULBL",144,0)
 Q
"RTN","PSOSULBL",145,0)
 ;
"RTN","PSOSULBL",146,0)
NOMAIL ; SEE IF FILE 55 STATUS IS DO NOT MAIL
"RTN","PSOSULBL",147,0)
 N ACTTYPE,DFN,MAILST,MAILEXP
"RTN","PSOSULBL",148,0)
 S ACTTYPE="DO NOT MAIL"
"RTN","PSOSULBL",149,0)
 S DFN=+$P($G(^PSRX(RXIEN,0)),"^",2),MAILST=$P($G(^PS(55,DFN,0)),"^",3) I MAILST'=2 Q
"RTN","PSOSULBL",150,0)
 S MAILEXP=$P(^PS(55,DFN,0),"^",5)
"RTN","PSOSULBL",151,0)
 I MAILEXP=""!(MAILEXP>DT) D SETTMP(ACTTYPE)
"RTN","PSOSULBL",152,0)
 Q
"RTN","PSOSULBL",153,0)
 ;
"RTN","PSOSULBL",154,0)
FOREIGN ;
"RTN","PSOSULBL",155,0)
 N DFN,PSOFORGN
"RTN","PSOSULBL",156,0)
 S DFN=+$P($G(^PSRX(RXIEN,0)),"^",2)
"RTN","PSOSULBL",157,0)
 D ADD^VADPT
"RTN","PSOSULBL",158,0)
 S PSOFORGN=$P($G(VAPA(25)),"^",2) I PSOFORGN'="",PSOFORGN'["UNITED STATES" S PSOFORGN=1
"RTN","PSOSULBL",159,0)
 I PSOFORGN D SETTMP("FOREIGN ADDRESS")
"RTN","PSOSULBL",160,0)
 Q
"RTN","PSOSULBL",161,0)
 ;
"RTN","PSOSULBL",162,0)
CHKMAIL ; SEE IF MAILMAN MESSAGE SHOULD BE SENT FOR BAI/MAIL ROUTING
"RTN","PSOSULBL",163,0)
 N RXIEN,RXFILL,ACTSEQ,XX,DFN,SSN,NAME,ACTTYPE,ZZ
"RTN","PSOSULBL",164,0)
 K ^TMP("PSOSM",$J)
"RTN","PSOSULBL",165,0)
 S RXIEN=0 F  S RXIEN=$O(^TMP("PSOSBAI",$J,RXIEN)) Q:'RXIEN  D
"RTN","PSOSULBL",166,0)
 .S RXFILL="" F  S RXFILL=$O(^TMP("PSOSBAI",$J,RXIEN,RXFILL)) Q:RXFILL=""  D
"RTN","PSOSULBL",167,0)
 ..S ACTTYPE=^TMP("PSOSBAI",$J,RXIEN,RXFILL)
"RTN","PSOSULBL",168,0)
 ..S ACTSEQ=0 F  S ACTSEQ=$O(^PSRX(RXIEN,"A",ACTSEQ)) Q:ACTSEQ=""  D
"RTN","PSOSULBL",169,0)
 ...S XX=$G(^PSRX(RXIEN,"A",ACTSEQ,0)) I $P(XX,"^",2)="S" S ZZ=$P(XX,"^",4),ZZ=$S(ZZ<6:ZZ,1:ZZ-1) I ZZ=RXFILL,$P(XX,"^",5)["due to "_ACTTYPE Q
"RTN","PSOSULBL",170,0)
 ...S DFN=$P(^PSRX(RXIEN,0),"^",2),NAME=$P(^DPT(DFN,0),"^"),SSN=$P(^(0),"^",9) I SSN="" S SSN=0
"RTN","PSOSULBL",171,0)
 ...S ^TMP("PSOSM",$J,NAME,SSN,RXIEN,RXFILL)=ACTTYPE
"RTN","PSOSULBL",172,0)
 I $D(^TMP("PSOSM",$J)) D BAIMAIL^PSOSULB1
"RTN","PSOSULBL",173,0)
 K ^TMP("PSOSM",$J)
"RTN","PSOSULBL",174,0)
 Q
"RTN","PSOSULBL",175,0)
 ;
"RTN","PSOSULBL",176,0)
ACT(ACTTYPE) ;adds activity info for rx not printed from suspense/not sent to OPAI
"RTN","PSOSULBL",177,0)
 N NOW,IR,FDA
"RTN","PSOSULBL",178,0)
 D NOW^%DTC S NOW=%
"RTN","PSOSULBL",179,0)
 S IR=0 F FDA=0:0 S FDA=$O(^PSRX(RXIEN,"A",FDA)) Q:'FDA  S IR=FDA
"RTN","PSOSULBL",180,0)
 S IR=IR+1,^PSRX(RXIEN,"A",0)="^52.3DA^"_IR_"^"_IR
"RTN","PSOSULBL",181,0)
 S ^PSRX(RXIEN,"A",IR,0)=NOW_"^"_"S"_"^"_DUZ_"^"_$S(+RXFILL>5:RXFILL+1,1:+RXFILL)_"^"_"RX not printed from suspense due to "_ACTTYPE
"RTN","PSOSULBL",182,0)
 K PSUS,RXF,I,FDA,DIC,DIE,DR,Y,X,%,%I,%H,RSDT
"RTN","PSOSULBL",183,0)
 Q
"RTN","PSOSULBL",184,0)
 ;
"UP",52,52.25,-1)
52^REJ
"UP",52,52.25,0)
52.25
"VER")
8.0^22.0
"^DD",52,52.25,27,0)
COORDINATION OF BENEFITS^S^1:PRIMARY;2:SECONDARY;3:TERTIARY;^2;7^Q
"^DD",52,52.25,27,3)
Enter 1 for Primary, 2 for Secondary, or 3 for Tertiary.
"^DD",52,52.25,27,21,0)
^^5^5^3090402^
"^DD",52,52.25,27,21,1,0)
This field contains the Coordination of
"^DD",52,52.25,27,21,2,0)
Benefits indicator for the third party
"^DD",52,52.25,27,21,3,0)
insurance rejection for the fill. This field
"^DD",52,52.25,27,21,4,0)
can contain 1 for Primary, 2 for
"^DD",52,52.25,27,21,5,0)
Secondary, or 3 for Tertiary.
"^DD",52,52.25,27,23,0)
^^3^3^3090402^
"^DD",52,52.25,27,23,1,0)
This field is set automatically to store the
"^DD",52,52.25,27,23,2,0)
Coordination of Benefits indicator for the
"^DD",52,52.25,27,23,3,0)
reject third party claim.
"^DD",52,52.25,27,"DT")
3090402
**INSTALL NAME**
IB*2.0*411
"BLD",7812,0)
IB*2.0*411^INTEGRATED BILLING^0^3100806^y
"BLD",7812,1,0)
^^2^2^3090318^
"BLD",7812,1,1,0)
This patch contains the ePharmacy enhancements to accomodate
"BLD",7812,1,2,0)
Coordination of Benefits (COB).
"BLD",7812,4,0)
^9.64PA^366.14^1
"BLD",7812,4,366.14,0)
366.14
"BLD",7812,4,366.14,2,0)
^9.641^366.141^1
"BLD",7812,4,366.14,2,366.141,0)
EVENT  (sub-file)
"BLD",7812,4,366.14,2,366.141,1,0)
^9.6411^7.04^4
"BLD",7812,4,366.14,2,366.141,1,7.01,0)
RX COB
"BLD",7812,4,366.14,2,366.141,1,7.02,0)
PRIMARY BILL
"BLD",7812,4,366.14,2,366.141,1,7.03,0)
PRIOR PAYMENT
"BLD",7812,4,366.14,2,366.141,1,7.04,0)
RATE TYPE SELECTED BY USER
"BLD",7812,4,366.14,222)
y^n^p^^^^n^^n
"BLD",7812,4,366.14,224)

"BLD",7812,4,"APDD",366.14,366.141)

"BLD",7812,4,"APDD",366.14,366.141,7.01)

"BLD",7812,4,"APDD",366.14,366.141,7.02)

"BLD",7812,4,"APDD",366.14,366.141,7.03)

"BLD",7812,4,"APDD",366.14,366.141,7.04)

"BLD",7812,4,"B",366.14,366.14)

"BLD",7812,6.3)
29
"BLD",7812,"INIT")
POST^IB20P411
"BLD",7812,"KRN",0)
^9.67PA^779.2^20
"BLD",7812,"KRN",.4,0)
.4
"BLD",7812,"KRN",.401,0)
.401
"BLD",7812,"KRN",.402,0)
.402
"BLD",7812,"KRN",.403,0)
.403
"BLD",7812,"KRN",.5,0)
.5
"BLD",7812,"KRN",.84,0)
.84
"BLD",7812,"KRN",3.6,0)
3.6
"BLD",7812,"KRN",3.8,0)
3.8
"BLD",7812,"KRN",9.2,0)
9.2
"BLD",7812,"KRN",9.8,0)
9.8
"BLD",7812,"KRN",9.8,"NM",0)
^9.68A^18^16
"BLD",7812,"KRN",9.8,"NM",2,0)
IBNCPDP1^^0^B86393869
"BLD",7812,"KRN",9.8,"NM",4,0)
IBRFN^^0^B52599969
"BLD",7812,"KRN",9.8,"NM",5,0)
IBNCPUT3^^0^B15411272
"BLD",7812,"KRN",9.8,"NM",6,0)
IBNCPDP5^^0^B76631396
"BLD",7812,"KRN",9.8,"NM",7,0)
IBNCPDP4^^0^B55992890
"BLD",7812,"KRN",9.8,"NM",8,0)
IB20P411^^0^B8564049
"BLD",7812,"KRN",9.8,"NM",9,0)
IBNCPDP2^^0^B63574984
"BLD",7812,"KRN",9.8,"NM",10,0)
IBNCPDP3^^0^B32452413
"BLD",7812,"KRN",9.8,"NM",11,0)
IBNCPDS1^^0^B11093951
"BLD",7812,"KRN",9.8,"NM",12,0)
IBNCPEV^^0^B84818902
"BLD",7812,"KRN",9.8,"NM",13,0)
IBNCPEV1^^0^B46733979
"BLD",7812,"KRN",9.8,"NM",14,0)
IBNCPLOG^^0^B64598922
"BLD",7812,"KRN",9.8,"NM",15,0)
IBOSRX^^0^B12228419
"BLD",7812,"KRN",9.8,"NM",16,0)
IBNCPDPI^^0^B13118799
"BLD",7812,"KRN",9.8,"NM",17,0)
IBNCPDP^^0^B5373340
"BLD",7812,"KRN",9.8,"NM",18,0)
IBNCPDP6^^0^B13230978
"BLD",7812,"KRN",9.8,"NM","B","IB20P411",8)

"BLD",7812,"KRN",9.8,"NM","B","IBNCPDP",17)

"BLD",7812,"KRN",9.8,"NM","B","IBNCPDP1",2)

"BLD",7812,"KRN",9.8,"NM","B","IBNCPDP2",9)

"BLD",7812,"KRN",9.8,"NM","B","IBNCPDP3",10)

"BLD",7812,"KRN",9.8,"NM","B","IBNCPDP4",7)

"BLD",7812,"KRN",9.8,"NM","B","IBNCPDP5",6)

"BLD",7812,"KRN",9.8,"NM","B","IBNCPDP6",18)

"BLD",7812,"KRN",9.8,"NM","B","IBNCPDPI",16)

"BLD",7812,"KRN",9.8,"NM","B","IBNCPDS1",11)

"BLD",7812,"KRN",9.8,"NM","B","IBNCPEV",12)

"BLD",7812,"KRN",9.8,"NM","B","IBNCPEV1",13)

"BLD",7812,"KRN",9.8,"NM","B","IBNCPLOG",14)

"BLD",7812,"KRN",9.8,"NM","B","IBNCPUT3",5)

"BLD",7812,"KRN",9.8,"NM","B","IBOSRX",15)

"BLD",7812,"KRN",9.8,"NM","B","IBRFN",4)

"BLD",7812,"KRN",19,0)
19
"BLD",7812,"KRN",19.1,0)
19.1
"BLD",7812,"KRN",101,0)
101
"BLD",7812,"KRN",101,"NM",0)
^9.68A^2^2
"BLD",7812,"KRN",101,"NM",1,0)
IBCNSM RX COB DETERMINATION^^0
"BLD",7812,"KRN",101,"NM",2,0)
IBCNSM PATIENT INSURANCE^^2
"BLD",7812,"KRN",101,"NM","B","IBCNSM PATIENT INSURANCE",2)

"BLD",7812,"KRN",101,"NM","B","IBCNSM RX COB DETERMINATION",1)

"BLD",7812,"KRN",409.61,0)
409.61
"BLD",7812,"KRN",771,0)
771
"BLD",7812,"KRN",779.2,0)
779.2
"BLD",7812,"KRN",870,0)
870
"BLD",7812,"KRN",8989.51,0)
8989.51
"BLD",7812,"KRN",8989.52,0)
8989.52
"BLD",7812,"KRN",8994,0)
8994
"BLD",7812,"KRN","B",.4,.4)

"BLD",7812,"KRN","B",.401,.401)

"BLD",7812,"KRN","B",.402,.402)

"BLD",7812,"KRN","B",.403,.403)

"BLD",7812,"KRN","B",.5,.5)

"BLD",7812,"KRN","B",.84,.84)

"BLD",7812,"KRN","B",3.6,3.6)

"BLD",7812,"KRN","B",3.8,3.8)

"BLD",7812,"KRN","B",9.2,9.2)

"BLD",7812,"KRN","B",9.8,9.8)

"BLD",7812,"KRN","B",19,19)

"BLD",7812,"KRN","B",19.1,19.1)

"BLD",7812,"KRN","B",101,101)

"BLD",7812,"KRN","B",409.61,409.61)

"BLD",7812,"KRN","B",771,771)

"BLD",7812,"KRN","B",779.2,779.2)

"BLD",7812,"KRN","B",870,870)

"BLD",7812,"KRN","B",8989.51,8989.51)

"BLD",7812,"KRN","B",8989.52,8989.52)

"BLD",7812,"KRN","B",8994,8994)

"BLD",7812,"QUES",0)
^9.62^^
"BLD",7812,"REQB",0)
^9.611^1^1
"BLD",7812,"REQB",1,0)
IB*2.0*384^2
"BLD",7812,"REQB","B","IB*2.0*384",1)

"FIA",366.14)
IB NCPDP EVENT LOG
"FIA",366.14,0)
^IBCNR(366.14,
"FIA",366.14,0,0)
366.14D
"FIA",366.14,0,1)
y^n^p^^^^n^^n
"FIA",366.14,0,10)

"FIA",366.14,0,11)

"FIA",366.14,0,"RLRO")

"FIA",366.14,0,"VR")
2.0^IB
"FIA",366.14,366.14)
1
"FIA",366.14,366.141)
1
"FIA",366.14,366.141,7.01)

"FIA",366.14,366.141,7.02)

"FIA",366.14,366.141,7.03)

"FIA",366.14,366.141,7.04)

"INIT")
POST^IB20P411
"KRN",101,857,-1)
2^2
"KRN",101,857,0)
IBCNSM PATIENT INSURANCE^Patient Insurance^^M^101020^^^^^^^49
"KRN",101,857,10,0)
^101.01PA^13^13
"KRN",101,857,10,13,0)
4292^RX^15^
"KRN",101,857,10,13,"^")
IBCNSM RX COB DETERMINATION
"KRN",101,4292,-1)
0^1
"KRN",101,4292,0)
IBCNSM RX COB DETERMINATION^RX COB Determination^^A^^^^^^^^
"KRN",101,4292,4)
^^^CB
"KRN",101,4292,20)
D EN^IBNCPDS1
"KRN",101,4292,99)
61850,51012
"MBREQ")
1
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)

"PKG",200,20,"B",2,1)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321^2990406^2447
"PKG",200,22,1,"PAH",1,0)
411^3100806^101020
"PKG",200,22,1,"PAH",1,1,0)
^^2^2^3100806
"PKG",200,22,1,"PAH",1,1,1,0)
This patch contains the ePharmacy enhancements to accomodate
"PKG",200,22,1,"PAH",1,1,2,0)
Coordination of Benefits (COB).
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
16
"RTN","IB20P411")
0^8^B8564049
"RTN","IB20P411",1,0)
IB20P411 ;OAK/ELZ - IB*2.0*411 POST INIT ;23-JAN-2009
"RTN","IB20P411",2,0)
 ;;2.0;INTEGRATED BILLING;**411**;21-MAR-94;Build 29
"RTN","IB20P411",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IB20P411",4,0)
 ;
"RTN","IB20P411",5,0)
 ;
"RTN","IB20P411",6,0)
POST ;
"RTN","IB20P411",7,0)
 N IBA
"RTN","IB20P411",8,0)
 S IBA(1)="",IBA(2)="    IB*2*411 Post-Install .....",IBA(3)="" D MES^XPDUTL(.IBA) K IBA
"RTN","IB20P411",9,0)
 D BCID
"RTN","IB20P411",10,0)
 D CLEANAG
"RTN","IB20P411",11,0)
 S IBA(1)="",IBA(2)="    IB*2*411 Post-Install Complete",IBA(3)="" D MES^XPDUTL(.IBA) K IBA
"RTN","IB20P411",12,0)
 Q
"RTN","IB20P411",13,0)
 ;
"RTN","IB20P411",14,0)
BCID ; loop through all BCID's and make sure they are 7 characters long
"RTN","IB20P411",15,0)
 D MES^XPDUTL("      >>Cleaning up the BCID's in 399")
"RTN","IB20P411",16,0)
 N BCID,IBIEN,IBC,NBCID,IBCF,X,Y,DIE,DA,DR
"RTN","IB20P411",17,0)
 S BCID="",(IBCF,IBC)=0
"RTN","IB20P411",18,0)
 F  S BCID=$O(^DGCR(399,"AG",BCID)) Q:BCID=""  S IBIEN=0 F  S IBIEN=$O(^DGCR(399,"AG",BCID,IBIEN)) Q:'IBIEN  D
"RTN","IB20P411",19,0)
 . S IBC=IBC+1
"RTN","IB20P411",20,0)
 . I IBC#100=0 W "."
"RTN","IB20P411",21,0)
 . I $L($P(BCID,";"))=7 Q
"RTN","IB20P411",22,0)
 . S NBCID=$$BCID^IBNCPDP4(+BCID,$P(BCID,";",2))
"RTN","IB20P411",23,0)
 . S DIE="^DGCR(399,",DA=IBIEN,DR="460////^S X=NBCID" D ^DIE
"RTN","IB20P411",24,0)
 . S IBCF=IBCF+1
"RTN","IB20P411",25,0)
 D MES^XPDUTL("        - "_IBCF_" needed to be fixed")
"RTN","IB20P411",26,0)
 D MES^XPDUTL("      >>Done cleaning up the BCID's in 399")
"RTN","IB20P411",27,0)
 Q
"RTN","IB20P411",28,0)
 ;
"RTN","IB20P411",29,0)
CLEANAG ; Clean up of the "AG" node, removing part of the non-fm standard
"RTN","IB20P411",30,0)
 ; xref's that are not true x-refs with tasked job 2 days out
"RTN","IB20P411",31,0)
 N IBT,ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTSK
"RTN","IB20P411",32,0)
 D MES^XPDUTL("  - Queuing task to clean up ""AG"" x-ref in 3 days")
"RTN","IB20P411",33,0)
 S ZTRTN="DQ^IB20P411",ZTDESC="Post Install IB*2*411, Clean-up of x-ref"
"RTN","IB20P411",34,0)
 S (IBT,ZTDTH)=$$FMADD^XLFDT($$NOW^XLFDT,3),ZTIO=""
"RTN","IB20P411",35,0)
 D ^%ZTLOAD
"RTN","IB20P411",36,0)
 I $G(ZTSK) D
"RTN","IB20P411",37,0)
 .D MES^XPDUTL("  - Task Queued, #"_ZTSK_" to run at "_$$FMTE^XLFDT(IBT))
"RTN","IB20P411",38,0)
 E  D MES^XPDUTL("  - ERROR:  Task not queued!!!")
"RTN","IB20P411",39,0)
 Q
"RTN","IB20P411",40,0)
 ;
"RTN","IB20P411",41,0)
DQ ; post-install task job
"RTN","IB20P411",42,0)
 N BCID,IBIEN,IBT,XMSUB,XMZ,XMTEXT,XMY,XMDUZ
"RTN","IB20P411",43,0)
 K ^TMP("IB20P411",$J)
"RTN","IB20P411",44,0)
 S BCID="" F  S BCID=$O(^DGCR(399,"AG",BCID))  Q:BCID=""  M ^TMP("IB20P411",$J,BCID)=^DGCR(399,"AG",BCID) K ^DGCR(399,"AG",BCID) S IBIEN=0 F  S IBIEN=$O(^TMP("IB20P411",$J,BCID,IBIEN)) Q:'IBIEN  S ^DGCR(399,"AG",BCID,IBIEN)=""
"RTN","IB20P411",45,0)
 K ^TMP("IB20P411",$J)
"RTN","IB20P411",46,0)
 ;
"RTN","IB20P411",47,0)
 ; notify installer complete
"RTN","IB20P411",48,0)
 S IBT(1)="The cleanup of the x-ref from the install of IB*2*411 has finished.  The"
"RTN","IB20P411",49,0)
 S IBT(2)="post install routine IB20P411 may now be optionally deleted."
"RTN","IB20P411",50,0)
 S XMSUB="IB*2.0*411 installation has been completed"
"RTN","IB20P411",51,0)
 S XMDUZ="INTEGRATED BILLING PACKAGE",XMTEXT="IBT(",XMY(DUZ)=""
"RTN","IB20P411",52,0)
 D ^XMD
"RTN","IB20P411",53,0)
 Q
"RTN","IBNCPDP")
0^17^B5373340
"RTN","IBNCPDP",1,0)
IBNCPDP ;OAK/ELZ - APIS FOR NCPCP/ECME ;1/9/08  17:27
"RTN","IBNCPDP",2,0)
 ;;2.0;INTEGRATED BILLING;**223,276,363,383,384,411**;21-MAR-94;Build 29
"RTN","IBNCPDP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPDP",4,0)
 ;
"RTN","IBNCPDP",5,0)
 ;
"RTN","IBNCPDP",6,0)
RX(DFN,IBD) ; pharmacy package call, passing in IBD by ref
"RTN","IBNCPDP",7,0)
 ; this is called by PSO for all prescriptions issued, return is
"RTN","IBNCPDP",8,0)
 ; a response to bill ECME or not with array for billing data elements
"RTN","IBNCPDP",9,0)
 ; third piece of return is an Eligibility indicator for the prescription
"RTN","IBNCPDP",10,0)
 ;
"RTN","IBNCPDP",11,0)
 ; IBD("IEN")         = Prescription IEN
"RTN","IBNCPDP",12,0)
 ;    ("FILL NUMBER") = Fill number (0 is initial)
"RTN","IBNCPDP",13,0)
 ;    ("FILL DATE")   = Fill or refill date
"RTN","IBNCPDP",14,0)
 ;    ("RELEASE DATE")= Date of the Rx release in FileMan format
"RTN","IBNCPDP",15,0)
 ;    ("NDC")         = NDC number for drug
"RTN","IBNCPDP",16,0)
 ;    ("DEA")         = DEA special handling info
"RTN","IBNCPDP",17,0)
 ;    ("COST")        = cost of medication being dispensed
"RTN","IBNCPDP",18,0)
 ;    ("AO")          = Agent Orange (0,1 OR Null)
"RTN","IBNCPDP",19,0)
 ;    ("EC")          = Environmental Contaminant (0,1 OR Null)
"RTN","IBNCPDP",20,0)
 ;    ("HNC")         = Head/neck cancer (0,1 OR Null)
"RTN","IBNCPDP",21,0)
 ;    ("IR")          = Ionizing radiation (0,1 OR Null)
"RTN","IBNCPDP",22,0)
 ;    ("MST")         = Military sexual trauma (0,1 OR Null)
"RTN","IBNCPDP",23,0)
 ;    ("SC")          = Service connected (0,1 OR Null)
"RTN","IBNCPDP",24,0)
 ;    ("CV")          = Combat Veteran (0,1 OR Null)
"RTN","IBNCPDP",25,0)
 ;    ("QTY")         = Quantity of med dispensed
"RTN","IBNCPDP",26,0)
 ;    ("EPHARM")      = #9002313.56 ien (E-PHARMACY division)
"RTN","IBNCPDP",27,0)
 ;
"RTN","IBNCPDP",28,0)
 ;
"RTN","IBNCPDP",29,0)
 ; IBD("INS",n,1) = insurance array to bill in n order
"RTN","IBNCPDP",30,0)
 ;                  file 355.3 ien (group)^bin^pcn^payer sheet^group id^
"RTN","IBNCPDP",31,0)
 ;                  cardholder id^patient relationship code^
"RTN","IBNCPDP",32,0)
 ;                  cardholder first name^cardholder last name^
"RTN","IBNCPDP",33,0)
 ;                  home plan state ^Payer Sheet B2 ^Payer Sheet B3
"RTN","IBNCPDP",34,0)
 ;                  Software/Vendor Cert ID ^ Ins Name
"RTN","IBNCPDP",35,0)
 ;    ("INS",n,2) = dispensing fee^basis of cost determination^
"RTN","IBNCPDP",36,0)
 ;                  awp or tort rate or cost^gross amount due^
"RTN","IBNCPDP",37,0)
 ;                  administrative fee
"RTN","IBNCPDP",38,0)
 ;
"RTN","IBNCPDP",39,0)
 ;   for basis of cost determination the following is used:
"RTN","IBNCPDP",40,0)
 ;      "07" would be sent for Usual & Customary
"RTN","IBNCPDP",41,0)
 ;      "01" would be sent for AWP
"RTN","IBNCPDP",42,0)
 ;      "05" would be sent for Cost calculations
"RTN","IBNCPDP",43,0)
 ;
"RTN","IBNCPDP",44,0)
 ;    ("INS",n,3) = group name^ins co ph 3^plan ID^
"RTN","IBNCPDP",45,0)
 ;                  insurance type (V=vet, T=tricare)^
"RTN","IBNCPDP",46,0)
 ;                  insurance company (#36) ien
"RTN","IBNCPDP",47,0)
 ;
"RTN","IBNCPDP",48,0)
 N IBRES,IBNB
"RTN","IBNCPDP",49,0)
 S IBRES=$$RX^IBNCPDP1(DFN,.IBD)
"RTN","IBNCPDP",50,0)
 ;remove "Not ECME billable: " from the reason text
"RTN","IBNCPDP",51,0)
 S IBNB="Not ECME billable: "
"RTN","IBNCPDP",52,0)
 I IBRES[IBNB S IBRES=$P(IBRES,U)_U_$P($P(IBRES,U,2),IBNB,2)_U_$P(IBRES,U,3)
"RTN","IBNCPDP",53,0)
 Q IBRES
"RTN","IBNCPDP",54,0)
 ;
"RTN","IBNCPDP",55,0)
 ;
"RTN","IBNCPDP",56,0)
STORESP(DFN,IBD) ; this is an API for pharmacy/ecme to use to relay
"RTN","IBNCPDP",57,0)
 ; results of billing using the ecme software.  If electronic billing is
"RTN","IBNCPDP",58,0)
 ; successful, then bills will be established.  If not, then we will
"RTN","IBNCPDP",59,0)
 ; flag the entry in ct for paper or not billable.
"RTN","IBNCPDP",60,0)
 ;
"RTN","IBNCPDP",61,0)
 ; IBD("STATUS")       = Bill status (PAID, REJECTED,REVERSED
"RTN","IBNCPDP",62,0)
 ;                        CLOSED,RELEASED,or SUBMITTED)
"RTN","IBNCPDP",63,0)
 ;    ("FILL DATE")    = Fill Date
"RTN","IBNCPDP",64,0)
 ;    ("PRESCRIPTION") = Prescription IEN from drug file (#52)
"RTN","IBNCPDP",65,0)
 ;    ("FILL NUMBER")  = Fill or refill number
"RTN","IBNCPDP",66,0)
 ;    ("BILLED")       = Amount billed
"RTN","IBNCPDP",67,0)
 ;    ("PAID")         = Amount paid
"RTN","IBNCPDP",68,0)
 ;    ("BCID")         = Reference number to the claim for payment
"RTN","IBNCPDP",69,0)
 ;                       BCID stands for Bill Claim ID
"RTN","IBNCPDP",70,0)
 ;    ("PLAN")         = IEN of the the entry in the GROUP INSURANCE
"RTN","IBNCPDP",71,0)
 ;                       PLAN file(#355.3)(captured from the
"RTN","IBNCPDP",72,0)
 ;                       $$RX^IBNCPDP call)
"RTN","IBNCPDP",73,0)
 ;    ("COPAY")        = Patient's copay from ECME response
"RTN","IBNCPDP",74,0)
 ;    ("RX NO")        = RX number from file 52
"RTN","IBNCPDP",75,0)
 ;    ("DRUG")         = IEN of file #50 DRUG
"RTN","IBNCPDP",76,0)
 ;    ("DAYS SUPPLY")  = Days Supply
"RTN","IBNCPDP",77,0)
 ;    ("QTY")          = Quantity Dispensed (should be from the Rx fill or refill 52/52.1)
"RTN","IBNCPDP",78,0)
 ;    ("NDC")          = NDC
"RTN","IBNCPDP",79,0)
 ;    ("CLOSE REASON") = Optional, Pointer to the IB file #356.8
"RTN","IBNCPDP",80,0)
 ;                      "CLAIMS TRACKING NON-BILLABLE REASONS"
"RTN","IBNCPDP",81,0)
 ;    ("CLOSE COMMENT")= Optional, if the close reason is defined
"RTN","IBNCPDP",82,0)
 ;                       then the Close Comment parameter may be
"RTN","IBNCPDP",83,0)
 ;                       sent to IB
"RTN","IBNCPDP",84,0)
 ;    ("DROP TO PAPER")= Optional, this parameter may be set to 1(TRUE)
"RTN","IBNCPDP",85,0)
 ;                       for certain Close Claim Reasons, indicating
"RTN","IBNCPDP",86,0)
 ;                       that that the closed episode still may be
"RTN","IBNCPDP",87,0)
 ;                       "dropped to paper" - passed to the Autobiller
"RTN","IBNCPDP",88,0)
 ;    ("RELEASE COPAY")= Optional, if the claim is being closed, setting
"RTN","IBNCPDP",89,0)
 ;                       this parameter to 1 (TRUE) indicates that the
"RTN","IBNCPDP",90,0)
 ;                       patients copay should be released off hold
"RTN","IBNCPDP",91,0)
 ;    ("DIVISION")     = Pointer to the MC DIVISION file (#40.8)
"RTN","IBNCPDP",92,0)
 ;    ("AUTH #")       = ECME approval/authorization number
"RTN","IBNCPDP",93,0)
 ;    ("CLAIMID")      = Reference Number to ECME
"RTN","IBNCPDP",94,0)
 ;    ("EPHARM")       = Optional, #9002313.56 ien (E-PHARMACY division)
"RTN","IBNCPDP",95,0)
 ;    ("RTYPE")        = Optional, rate type specified by user during
"RTN","IBNCPDP",96,0)
 ;                       manual ePharmacy processing
"RTN","IBNCPDP",97,0)
 ;    ("PRIMARY BILL") = Optional, if this is to be a secondary bill,
"RTN","IBNCPDP",98,0)
 ;                       this is the primary bill the secondary relates
"RTN","IBNCPDP",99,0)
 ;    ("PRIOR PAYMENT")= Optional, on secondary bills this is the offset
"RTN","IBNCPDP",100,0)
 ;                       to be applied from the primary payment.
"RTN","IBNCPDP",101,0)
 ;    ("RXCOB")        = Optional, COB indicator (secondary = 2)
"RTN","IBNCPDP",102,0)
 ;
"RTN","IBNCPDP",103,0)
 ;
"RTN","IBNCPDP",104,0)
 ; Return is the bill number for success or 1 if not billable.
"RTN","IBNCPDP",105,0)
 ; "0^reason" indicates not success
"RTN","IBNCPDP",106,0)
 ;
"RTN","IBNCPDP",107,0)
 ;
"RTN","IBNCPDP",108,0)
 Q $$ECME^IBNCPDP2(DFN,.IBD)
"RTN","IBNCPDP",109,0)
 ;
"RTN","IBNCPDP",110,0)
 ;
"RTN","IBNCPDP",111,0)
UPAWP(IBNDC,IBAWP,IBADT) ; used to update AWPs.  This is an API that
"RTN","IBNCPDP",112,0)
 ; pharmacy will call.
"RTN","IBNCPDP",113,0)
 ;
"RTN","IBNCPDP",114,0)
 ;  IBNDC = NDC number to update with the price.
"RTN","IBNCPDP",115,0)
 ;  IBAWP = average wholesale price of the NDC
"RTN","IBNCPDP",116,0)
 ;  IBADT  = effective date of change (optional, default it today)
"RTN","IBNCPDP",117,0)
 ;
"RTN","IBNCPDP",118,0)
 ;  return will be a positive number indicating success.
"RTN","IBNCPDP",119,0)
 ;  if it is unsuccessful, then "0^reason" will be returned.
"RTN","IBNCPDP",120,0)
 ;
"RTN","IBNCPDP",121,0)
 Q $$UPAWP^IBNCPDP3(IBNDC,IBAWP,$G(IBADT,DT))
"RTN","IBNCPDP",122,0)
 ;
"RTN","IBNCPDP",123,0)
 ;
"RTN","IBNCPDP",124,0)
DEA(IBDEA,IBRMARK) ; used to check the DEA special handling.
"RTN","IBNCPDP",125,0)
 ; pass in IBDEA (dea code to check out)
"RTN","IBNCPDP",126,0)
 ;      optional pass in IBRMARK by reference (reason not billable)
"RTN","IBNCPDP",127,0)
 ; return:  1 or 0^why not billable
"RTN","IBNCPDP",128,0)
 ;
"RTN","IBNCPDP",129,0)
 ;  -- check for compound,  NOT BILLABLE
"RTN","IBNCPDP",130,0)
 N IBRES
"RTN","IBNCPDP",131,0)
 I $G(IBDEA)="" S IBRES="0^Null DEA Special Handling field" G DEAQ
"RTN","IBNCPDP",132,0)
 I IBDEA["M"!(IBDEA["0") S IBRMARK="DRUG NOT BILLABLE",IBRES="0^COMPOUND DRUG" G DEAQ
"RTN","IBNCPDP",133,0)
 ; -- check drug (not investigational, supply, over the counter, or nutritional supplement drug
"RTN","IBNCPDP",134,0)
 ;  "E" means always ecme billable
"RTN","IBNCPDP",135,0)
 I (IBDEA["I"!(IBDEA["S")!(IBDEA["9"))!(IBDEA["N"),IBDEA'["E" S IBRMARK="DRUG NOT BILLABLE",IBRES="0^"_IBRMARK
"RTN","IBNCPDP",136,0)
DEAQ Q $G(IBRES,1)
"RTN","IBNCPDP1")
0^2^B86393869
"RTN","IBNCPDP1",1,0)
IBNCPDP1 ;OAK/ELZ - PROCESSING FOR NEW RX REQUESTS ;5/22/08  15:24
"RTN","IBNCPDP1",2,0)
 ;;2.0;INTEGRATED BILLING;**223,276,339,363,383,405,384,411**;21-MAR-94;Build 29
"RTN","IBNCPDP1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPDP1",4,0)
 ;
"RTN","IBNCPDP1",5,0)
 ;
"RTN","IBNCPDP1",6,0)
RX(DFN,IBD) ; pharmacy package call, passing in IBD by ref
"RTN","IBNCPDP1",7,0)
 ; this is called by PSO for all prescriptions issued, return is
"RTN","IBNCPDP1",8,0)
 ; a response to bill ECME or not with array for billing data elements
"RTN","IBNCPDP1",9,0)
 ;warning: back-billing flag:
"RTN","IBNCPDP1",10,0)
 ;if passed IBSCRES(IBRXN,IBFIL)=1
"RTN","IBNCPDP1",11,0)
 ; - then the SC Determination is just done by the IB clerk (billable)
"RTN","IBNCPDP1",12,0)
 ; IBD("PLAN") - is specified only if RX API is called for billing determination for 2ndary claim.
"RTN","IBNCPDP1",13,0)
 ;
"RTN","IBNCPDP1",14,0)
 ;clean up the list of non-answered SC/Env.indicators questions and INS
"RTN","IBNCPDP1",15,0)
 K IBD("SC/EI NO ANSW"),IBD("INS")
"RTN","IBNCPDP1",16,0)
 ;
"RTN","IBNCPDP1",17,0)
 N IBTRKR,IBARR,IBADT,IBRXN,IBFIL,IBTRKRN,IBRMARK,IBANY,IBX,IBT,IBINS,IBSAVE
"RTN","IBNCPDP1",18,0)
 N IBFEE,IBEABD,IBBI,IBIT,IBPRICE,IBRS,IBRT,IBTRN,IBCHG,IBERMSG,IBRXPOL,IBCNT,IBRES,IBNEEDS
"RTN","IBNCPDP1",19,0)
 ;
"RTN","IBNCPDP1",20,0)
 I '$G(DFN) S IBRES="0^No DFN" G RXQ
"RTN","IBNCPDP1",21,0)
 S IBRXN=+$G(IBD("IEN")) I 'IBRXN S IBRES="0^No Rx IEN" G RXQ
"RTN","IBNCPDP1",22,0)
 S IBFIL=+$G(IBD("FILL NUMBER"),-1) I IBFIL<0 S IBRES="0^No fill number" G RXQ
"RTN","IBNCPDP1",23,0)
 S IBD("QTY")=+$G(IBD("QTY")) I 'IBD("QTY") S IBRES="0^No Quantity" G RXQ
"RTN","IBNCPDP1",24,0)
 ;
"RTN","IBNCPDP1",25,0)
 S IBRES="0^Error"
"RTN","IBNCPDP1",26,0)
 S (IBEABD,IBADT)=+$G(IBD("FILL DATE"),DT)
"RTN","IBNCPDP1",27,0)
 ;
"RTN","IBNCPDP1",28,0)
 ; -- look up insurance for patient
"RTN","IBNCPDP1",29,0)
 D ALL^IBCNS1(DFN,"IBINS",1,IBADT,1)
"RTN","IBNCPDP1",30,0)
 ;
"RTN","IBNCPDP1",31,0)
 ; -- determine rate type
"RTN","IBNCPDP1",32,0)
 D
"RTN","IBNCPDP1",33,0)
 . I $G(IBD("RTYPE")),$G(IBD("PLAN")) S IBRT=+IBD("RTYPE") D  Q  ;Rate type was selected by the user for secondary or primary claims entered manually
"RTN","IBNCPDP1",34,0)
 . . S IBRT=IBRT_U_$$COSTTYP^IBNCPUT3(+IBD("RTYPE"),IBADT)
"RTN","IBNCPDP1",35,0)
 . S IBRT=$$RT^IBNCPDPU(DFN,.IBINS)
"RTN","IBNCPDP1",36,0)
 ;
"RTN","IBNCPDP1",37,0)
 ;for secondary billing - skip claim tracking functionality
"RTN","IBNCPDP1",38,0)
 G:$G(IBD("RXCOB"))>1 SETINSUR
"RTN","IBNCPDP1",39,0)
 ;
"RTN","IBNCPDP1",40,0)
 ; -- claims tracking info
"RTN","IBNCPDP1",41,0)
 S IBTRKR=$G(^IBE(350.9,1,6))
"RTN","IBNCPDP1",42,0)
 ; date can't be before parameters
"RTN","IBNCPDP1",43,0)
 S $P(IBTRKR,U)=$S('$P(IBTRKR,U,4):0,+IBTRKR&(IBADT<+IBTRKR):0,1:IBADT)
"RTN","IBNCPDP1",44,0)
 ; already in claims tracking
"RTN","IBNCPDP1",45,0)
 S IBTRKRN=+$O(^IBT(356,"ARXFL",IBRXN,IBFIL,0))
"RTN","IBNCPDP1",46,0)
 I IBTRKRN,$$PAPERBIL^IBNCPNB(IBTRKRN) S IBRES="0^Existing IB Bill in CT",IBD("NO ECME INSURANCE")=1 G RXQ
"RTN","IBNCPDP1",47,0)
 ; already billed as Tricare
"RTN","IBNCPDP1",48,0)
 I $D(^IBA(351.5,"B",IBRXN_";"_IBFIL)) S IBRES="0^Already billed under prior Tricare process",IBD("NO ECME INSURANCE")=1 G RXQ
"RTN","IBNCPDP1",49,0)
 ;
"RTN","IBNCPDP1",50,0)
 ; -- no pharmacy coverage, update ct if applicable, quit
"RTN","IBNCPDP1",51,0)
 I '$$PTCOV^IBCNSU3(DFN,IBADT,"PHARMACY",.IBANY) S IBRMARK=$S($G(IBANY):"SERVICE NOT COVERED",1:"NOT INSURED") D:$P(IBTRKR,U,4)=2 CT S IBRES="0^"_IBRMARK,IBD("NO ECME INSURANCE")=1 G RXQ
"RTN","IBNCPDP1",52,0)
 ;
"RTN","IBNCPDP1",53,0)
 ;  -- check for DEA SPECIAL HDLG
"RTN","IBNCPDP1",54,0)
 S IBDEA=$$DEA^IBNCPDP($G(IBD("DEA")),.IBRMARK) I 'IBDEA S IBRES=IBDEA D CT G RXQ
"RTN","IBNCPDP1",55,0)
 ;
"RTN","IBNCPDP1",56,0)
 ;retrieve indicators from file #52 and overwrite the indicators in IBD array
"RTN","IBNCPDP1",57,0)
 D GETINDIC^IBNCPUT2(+IBD("IEN"),.IBD)
"RTN","IBNCPDP1",58,0)
 ; -- process patient exemptions if any (if not already resolved)
"RTN","IBNCPDP1",59,0)
 I $G(IBD("SC/EI OVR"))'=1 D CL^SDCO21(DFN,IBADT,"",.IBARR)
"RTN","IBNCPDP1",60,0)
 ; check out exemptions
"RTN","IBNCPDP1",61,0)
 S IBNEEDS=0 ;flag will be set to 1 if at least one of the questions wasn't answered
"RTN","IBNCPDP1",62,0)
 I $G(IBD("SC/EI OVR"))'=1 I $D(IBARR)>9 F IBX=2:1 S IBT=$P($T(EXEMPT+IBX),";;",2) Q:IBT=""  D:$D(IBARR(+IBT))
"RTN","IBNCPDP1",63,0)
 . I $G(IBD($P(IBT,U,2)))=0 Q
"RTN","IBNCPDP1",64,0)
 . I $G(IBD($P(IBT,U,2))) S IBRMARK=$P(IBT,U,3) Q
"RTN","IBNCPDP1",65,0)
 . I '$G(IBSCRES(IBRXN,IBFIL)) S IBNEEDS=1 D
"RTN","IBNCPDP1",66,0)
 . . S IBD("SC/EI NO ANSW")=$S($G(IBD("SC/EI NO ANSW"))="":$P(IBT,U,2),1:$G(IBD("SC/EI NO ANSW"))_","_$P(IBT,U,2))
"RTN","IBNCPDP1",67,0)
 I '$D(IBRMARK),IBNEEDS=1 S IBRMARK="NEEDS SC DETERMINATION"
"RTN","IBNCPDP1",68,0)
 I $D(IBRMARK) D CT S IBRES="0^"_IBRMARK G RXQ
"RTN","IBNCPDP1",69,0)
 ; Clean-up the NEEDS SC DETERMINATION record if resolved
"RTN","IBNCPDP1",70,0)
 ; And check if it is non-billable in CT
"RTN","IBNCPDP1",71,0)
 I IBTRKRN D
"RTN","IBNCPDP1",72,0)
 . N IBNBR,IBNBRT
"RTN","IBNCPDP1",73,0)
 . S IBNBR=$P($G(^IBT(356,+IBTRKRN,0)),U,19) Q:'IBNBR
"RTN","IBNCPDP1",74,0)
 . S IBNBRT=$P($G(^IBE(356.8,IBNBR,0)),U) Q:IBNBRT=""
"RTN","IBNCPDP1",75,0)
 . ; if refill was deleted (not RX) and now the refill is re-entered
"RTN","IBNCPDP1",76,0)
 . ;use $$RXSTATUS^IBNCPRR instead of $G(^PSRX(IBRXN,"STA"))
"RTN","IBNCPDP1",77,0)
 . I IBNBRT="PRESCRIPTION DELETED",$$RXSTATUS^IBNCPRR(DFN,IBRXN)'=13 D  Q
"RTN","IBNCPDP1",78,0)
 . . N DIE,DA,DR
"RTN","IBNCPDP1",79,0)
 . . ; clean up REASON NOT BILLABLE and ADDITIONAL COMMENT
"RTN","IBNCPDP1",80,0)
 . . S DIE="^IBT(356,",DA=+IBTRKRN,DR=".19////@;1.08////@" D ^DIE
"RTN","IBNCPDP1",81,0)
 . ; Clean up NBR if released
"RTN","IBNCPDP1",82,0)
 . I IBNBRT="PRESCRIPTION NOT RELEASED" D:$G(IBD("RELEASE DATE"))  Q
"RTN","IBNCPDP1",83,0)
 . . N DIE,DA,DR
"RTN","IBNCPDP1",84,0)
 . . S DIE="^IBT(356,",DA=+IBTRKRN,DR=".19////@" D ^DIE
"RTN","IBNCPDP1",85,0)
 . ; Clean up 'Needs SC determ'
"RTN","IBNCPDP1",86,0)
 . I IBNBRT="NEEDS SC DETERMINATION" D  Q
"RTN","IBNCPDP1",87,0)
 . . N DIE,DA,DR
"RTN","IBNCPDP1",88,0)
 . . S DIE="^IBT(356,",DA=+IBTRKRN,DR=".19////@" D ^DIE
"RTN","IBNCPDP1",89,0)
 . S IBRMARK=IBNBRT
"RTN","IBNCPDP1",90,0)
 I $D(IBRMARK) S IBRES="0^Non-Billable in CT: "_IBRMARK G RXQ
"RTN","IBNCPDP1",91,0)
 ;
"RTN","IBNCPDP1",92,0)
SETINSUR ; -- setup insurance data for patient
"RTN","IBNCPDP1",93,0)
 ; Note: if more than one insurance with the same COB then the latest insurance occurance overrides the first one(s)
"RTN","IBNCPDP1",94,0)
 ; Exmp:
"RTN","IBNCPDP1",95,0)
 ; IBINS("S",1,1)=""
"RTN","IBNCPDP1",96,0)
 ; IBINS("S",1,3)="" <<--- this will be primary
"RTN","IBNCPDP1",97,0)
 ;
"RTN","IBNCPDP1",98,0)
 K IBERMSG    ; Error message
"RTN","IBNCPDP1",99,0)
 K IBRXPOL    ; Array of Rx policies found
"RTN","IBNCPDP1",100,0)
 S IBX=0 F  S IBX=$O(IBINS("S",IBX)) Q:'IBX  D
"RTN","IBNCPDP1",101,0)
 . S IBT=0 F  S IBT=$O(IBINS("S",IBX,IBT)) Q:'IBT  D
"RTN","IBNCPDP1",102,0)
 .. N IBDAT,IBPL,IBINSN,IBPIEN,IBY,IBZ
"RTN","IBNCPDP1",103,0)
 .. S IBZ=$G(IBINS(IBT,0)) Q:IBZ=""
"RTN","IBNCPDP1",104,0)
 .. S IBPL=$P(IBZ,U,18) ; plan
"RTN","IBNCPDP1",105,0)
 .. Q:'IBPL
"RTN","IBNCPDP1",106,0)
 .. Q:'$$PLCOV^IBCNSU3(IBPL,IBADT,3)  ; not a pharmacy plan
"RTN","IBNCPDP1",107,0)
 .. ;
"RTN","IBNCPDP1",108,0)
 .. I $G(IBD("PLAN")) Q:IBPL'=$G(IBD("PLAN"))  ;skip other plans if we call RX API for a specific plan (IBD("PLAN"))
"RTN","IBNCPDP1",109,0)
 .. ;
"RTN","IBNCPDP1",110,0)
 .. I '$G(IBD("PLAN")) I '$D(IBD("INS")),$P(IBRT,"^",3)="V",($P($G(^IBE(355.1,+$P($G(^IBA(355.3,+IBPL,0)),"^",9),0)),"^")["TRICARE"!($P($G(^(0)),"^")="CHAMPVA")) K IBINS Q  ;Tricare/ChampVa coverage for a Vet
"RTN","IBNCPDP1",111,0)
 .. ;
"RTN","IBNCPDP1",112,0)
 .. ; at this point we have found an Rx policy.  We'll count these up later by IBX.
"RTN","IBNCPDP1",113,0)
 .. S IBRXPOL(IBX,IBT)=""
"RTN","IBNCPDP1",114,0)
 .. ;
"RTN","IBNCPDP1",115,0)
 .. S IBINSN=$P($G(^DIC(36,+$G(^IBA(355.3,+IBPL,0)),0)),U) ; ins name
"RTN","IBNCPDP1",116,0)
 .. S IBPIEN=+$G(^IBA(355.3,+IBPL,6))
"RTN","IBNCPDP1",117,0)
 .. I 'IBPIEN S IBERMSG(IBX)="Plan not linked to the Payer" Q  ; Not linked
"RTN","IBNCPDP1",118,0)
 .. D STCHK^IBCNRU1(IBPIEN,.IBY)
"RTN","IBNCPDP1",119,0)
 .. I $E($G(IBY(1)))'="A" S IBERMSG(IBX)=$$ERMSG^IBNCPNB($P($G(IBY(6)),",")) Q  ; not active
"RTN","IBNCPDP1",120,0)
 .. ;
"RTN","IBNCPDP1",121,0)
 .. ; at this point we have a valid policy for this IBX
"RTN","IBNCPDP1",122,0)
 .. S IBERMSG(IBX)=""          ; no error message
"RTN","IBNCPDP1",123,0)
 .. S IBDAT=IBPL ; Plan IEN
"RTN","IBNCPDP1",124,0)
 .. S $P(IBDAT,U,2)=$G(IBY(2)) ; BIN
"RTN","IBNCPDP1",125,0)
 .. S $P(IBDAT,U,3)=$G(IBY(3)) ; PCN
"RTN","IBNCPDP1",126,0)
 .. S $P(IBDAT,U,4)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",1),0)),U) ; Payer Sheet B1
"RTN","IBNCPDP1",127,0)
 .. S $P(IBDAT,U,5)=$P($G(IBINS(IBT,355.3)),U,4) ; Group ID
"RTN","IBNCPDP1",128,0)
 .. S $P(IBDAT,U,6)=$P(IBZ,U,2) ; Cardholder ID
"RTN","IBNCPDP1",129,0)
 .. S $P(IBDAT,U,7)=$P(IBZ,U,16) ; Patient Relationship Code
"RTN","IBNCPDP1",130,0)
 .. S $P(IBDAT,U,8)=$P($P($P(IBZ,U,17),",",2)," ") ; Cardholder First Name
"RTN","IBNCPDP1",131,0)
 .. S $P(IBDAT,U,9)=$P($P(IBZ,U,17),",") ; Cardholder Last Name
"RTN","IBNCPDP1",132,0)
 .. S $P(IBDAT,U,10)=$P($G(^DIC(36,+IBZ,.11)),U,5) ; State
"RTN","IBNCPDP1",133,0)
 .. S $P(IBDAT,U,11)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",2),0)),U) ; Payer Sheet B2
"RTN","IBNCPDP1",134,0)
 .. S $P(IBDAT,U,12)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",3),0)),U) ; Payer Sheet B3
"RTN","IBNCPDP1",135,0)
 .. S $P(IBDAT,U,13)=$G(IBY(4)) ; Software/Vendor Cert ID
"RTN","IBNCPDP1",136,0)
 .. S $P(IBDAT,U,14)=IBINSN ; Ins Name
"RTN","IBNCPDP1",137,0)
 .. S IBD("INS",IBX,1)=IBDAT
"RTN","IBNCPDP1",138,0)
 .. ;
"RTN","IBNCPDP1",139,0)
 .. S IBDAT=$P($G(IBINS(IBT,355.3)),"^",3) ;group name
"RTN","IBNCPDP1",140,0)
 .. S $P(IBDAT,U,2)=$$PHONE^IBNCPDP6(+IBZ) ;ins co ph 3
"RTN","IBNCPDP1",141,0)
 .. S $P(IBDAT,U,3)=$$GET1^DIQ(366.03,IBPIEN_",",.01) ;plan ID
"RTN","IBNCPDP1",142,0)
 .. S $P(IBDAT,U,4)=$S($P($G(^IBE(355.1,+$P($G(IBINS(IBT,355.3)),"^",9),0)),"^")="TRICARE":"T",1:"V") ; plan type
"RTN","IBNCPDP1",143,0)
 .. S $P(IBDAT,U,5)=+$G(^IBA(355.3,+IBPL,0)) ; insurance co ien
"RTN","IBNCPDP1",144,0)
 .. S $P(IBDAT,U,6)=$P(IBZ,U,20) ;(#.2) COB field of the (#.3121) insurance Type multiple of the Patient file (#2)
"RTN","IBNCPDP1",145,0)
 .. S IBD("INS",IBX,3)=IBDAT
"RTN","IBNCPDP1",146,0)
 .. Q
"RTN","IBNCPDP1",147,0)
 . Q
"RTN","IBNCPDP1",148,0)
 ;
"RTN","IBNCPDP1",149,0)
 ; Count the number of pharmacy insurance policies by IBX found up above
"RTN","IBNCPDP1",150,0)
 S IBX=0 F IBCNT=0:1 S IBX=$O(IBRXPOL(IBX)) Q:'IBX
"RTN","IBNCPDP1",151,0)
 ;
"RTN","IBNCPDP1",152,0)
 ; Determine the value of the IBX variable here.  This is basically the COB sequence# to be used.
"RTN","IBNCPDP1",153,0)
 ; If there is only 1 pharmacy policy or no pharmacy policies, then set IBX in this manner
"RTN","IBNCPDP1",154,0)
 I IBCNT'>1 D
"RTN","IBNCPDP1",155,0)
 . I $D(IBD("INS")) S IBX=+$O(IBD("INS",0))     ; use the only one in this array
"RTN","IBNCPDP1",156,0)
 . I '$D(IBD("INS")) S IBX=+$O(IBERMSG(0))      ; the only one here (or 0)
"RTN","IBNCPDP1",157,0)
 . Q
"RTN","IBNCPDP1",158,0)
 ;
"RTN","IBNCPDP1",159,0)
 ; If there are multiple pharmacy policies on file, then the COB field in the pt. policy must be used correctly
"RTN","IBNCPDP1",160,0)
 ;   and primary insurance must be at #1
"RTN","IBNCPDP1",161,0)
 I IBCNT>1 S IBX=1
"RTN","IBNCPDP1",162,0)
 ;
"RTN","IBNCPDP1",163,0)
 ; In all cases, if this variable is set, then use it
"RTN","IBNCPDP1",164,0)
 I $G(IBD("RXCOB"))>1 S IBX=$G(IBD("RXCOB"))
"RTN","IBNCPDP1",165,0)
 ;
"RTN","IBNCPDP1",166,0)
 ; Check insurance at IBX
"RTN","IBNCPDP1",167,0)
 I '$D(IBD("INS",IBX)),$G(IBERMSG(IBX))'="" S IBRES="0^Not ECME billable: "_IBERMSG(IBX),IBD("NO ECME INSURANCE")=1 G RXQ
"RTN","IBNCPDP1",168,0)
 I '$D(IBD("INS",IBX)) S IBRES="0^No Insurance ECME billable",IBD("NO ECME INSURANCE")=1 G RXQ
"RTN","IBNCPDP1",169,0)
 ;
"RTN","IBNCPDP1",170,0)
 ;for secondary billing - skip ROI functionality
"RTN","IBNCPDP1",171,0)
 G:$G(IBD("RXCOB"))>1 RATEPRIC
"RTN","IBNCPDP1",172,0)
 ; -- check drug for sensitive dx special handling code and ROI on file
"RTN","IBNCPDP1",173,0)
 I IBD("DEA")["U",$D(IBD("INS",1,3)) D  G:$D(IBRMARK) RXQ
"RTN","IBNCPDP1",174,0)
 . I '$$ROI^IBNCPDR4(DFN,$G(IBD("DRUG")),+$P($G(IBD("INS",1,3)),U,5),$G(IBD("FILL DATE"))) D  Q
"RTN","IBNCPDP1",175,0)
 .. S IBRMARK="REFUSES TO SIGN RELEASE (ROI)"
"RTN","IBNCPDP1",176,0)
 .. D CT
"RTN","IBNCPDP1",177,0)
 .. S IBRES="0^NOT BILLABLE, NO ROI - NO ACTIVE ROI ON FILE"
"RTN","IBNCPDP1",178,0)
 . D ROICLN^IBNCPDR4(IBTRKRN,IBRXN,IBFIL) K:$G(IBRMARK)="REFUSES TO SIGN RELEASE (ROI)" IBRMARK
"RTN","IBNCPDP1",179,0)
 ;
"RTN","IBNCPDP1",180,0)
RATEPRIC ;
"RTN","IBNCPDP1",181,0)
 ; determine rates/prices to use
"RTN","IBNCPDP1",182,0)
 I 'IBRT D CT S IBRES="0^Cannot determine Rate type" G RXQ
"RTN","IBNCPDP1",183,0)
 S IBBI=$$EVNTITM^IBCRU3(+IBRT,3,"PRESCRIPTION FILL",IBADT,.IBRS)
"RTN","IBNCPDP1",184,0)
 I 'IBBI,$P(IBBI,";")'="VA COST" D CT S IBRES="0^Cannot find Billable Item" G RXQ
"RTN","IBNCPDP1",185,0)
 ;1;BEDSECTION;1^
"RTN","IBNCPDP1",186,0)
 ;IBRS(1,18,5)=
"RTN","IBNCPDP1",187,0)
 S IBRS=+$O(IBRS($P(IBBI,";"),0))
"RTN","IBNCPDP1",188,0)
 S IBIT=$$ITPTR^IBCRU2($P(IBBI,";"),$S($P(IBRT,U,2)="A":$$NDC^IBNCPNB($G(IBD("NDC"))),1:"PRESCRIPTION"))
"RTN","IBNCPDP1",189,0)
 I 'IBIT,$P(IBRT,U,2)'="C" D CT S IBRES="0^Cannot find Item Pointer" G RXQ
"RTN","IBNCPDP1",190,0)
 ;8
"RTN","IBNCPDP1",191,0)
 S IBPRICE=+$$BICOST^IBCRCI(+IBRT,3,IBADT,"PRESCRIPTION FILL",+IBIT,,,$S($P(IBRT,U,2)="A":IBD("QTY"),1:1))
"RTN","IBNCPDP1",192,0)
 ;36^2991001
"RTN","IBNCPDP1",193,0)
 ;
"RTN","IBNCPDP1",194,0)
 ; get fees if any, ignore return, don't care about price, just need fees
"RTN","IBNCPDP1",195,0)
 S IBCHG=$$RATECHG^IBCRCC(+IBRS,$S($P(IBRT,U,2)'="C":1,1:IBD("QTY")*IBD("COST")),IBADT,.IBFEE)
"RTN","IBNCPDP1",196,0)
 I $P(IBRT,U,2)="C" S IBPRICE=+IBCHG
"RTN","IBNCPDP1",197,0)
 ;
"RTN","IBNCPDP1",198,0)
 I 'IBPRICE D CT S IBRES="0^Cannot find price for Item" G RXQ
"RTN","IBNCPDP1",199,0)
 ;
"RTN","IBNCPDP1",200,0)
 S IBPRICE=(+$G(IBFEE))_U_$S($P(IBRT,U,2)="A":"01",$P(IBRT,U,2)="C":"05",1:"07")_U_$S($P(IBRT,U,2)="C":IBD("QTY")*IBD("COST")+$G(IBFEE),$P(IBRT,U,2)="A":IBPRICE-$G(IBFEE)-$P($G(IBFEE),U,2),1:IBPRICE)_U_IBPRICE_U_(+$P($G(IBFEE),U,2))
"RTN","IBNCPDP1",201,0)
 S IBX=0 F  S IBX=$O(IBD("INS",IBX)) Q:IBX<1  S IBD("INS",IBX,2)=IBPRICE
"RTN","IBNCPDP1",202,0)
 ;
"RTN","IBNCPDP1",203,0)
 ;Check for non-covered drugs
"RTN","IBNCPDP1",204,0)
 S IBRES=$$CHCK^IBNCDNC(.IBD) I IBRES]"" S IBRMARK=$P(IBRES,U,2) D CT G RXQ
"RTN","IBNCPDP1",205,0)
 ;
"RTN","IBNCPDP1",206,0)
 S IBRES=$S($D(IBRMARK):"0^"_IBRMARK,1:1)
"RTN","IBNCPDP1",207,0)
 I IBRES,'$G(IBD("RELEASE DATE")) S IBRMARK="PRESCRIPTION NOT RELEASED"
"RTN","IBNCPDP1",208,0)
 ;
"RTN","IBNCPDP1",209,0)
 D CT
"RTN","IBNCPDP1",210,0)
 ;
"RTN","IBNCPDP1",211,0)
RXQ S $P(IBRES,"^",3)=$S($L($P($G(IBRT),"^",3)):$P(IBRT,"^",3),1:"V")
"RTN","IBNCPDP1",212,0)
 I IBRES D START^IBNCPDP6(IBRXN_";"_IBFIL,$P(IBRES,"^",3),+IBRT)
"RTN","IBNCPDP1",213,0)
 D LOG^IBNCPDP2("BILLABLE STATUS CHECK",IBRES)
"RTN","IBNCPDP1",214,0)
 Q IBRES
"RTN","IBNCPDP1",215,0)
 ;
"RTN","IBNCPDP1",216,0)
 ;
"RTN","IBNCPDP1",217,0)
CT ; files in claims tracking
"RTN","IBNCPDP1",218,0)
 Q:$G(IBD("RXCOB"))>1  ;Claim Tracking is updated only for the primary payer (payer sequence =1)
"RTN","IBNCPDP1",219,0)
 ;If null then the payer sequence = Primary is assumed
"RTN","IBNCPDP1",220,0)
 I IBTRKR D CT^IBNCPDPU(DFN,IBRXN,IBFIL,IBADT,$G(IBRMARK))
"RTN","IBNCPDP1",221,0)
 Q
"RTN","IBNCPDP1",222,0)
 ;
"RTN","IBNCPDP1",223,0)
EXEMPT ; exemption reasons
"RTN","IBNCPDP1",224,0)
 ; variable from SD call ^ variable from PSO ^ reason not billable
"RTN","IBNCPDP1",225,0)
 ;;1^AO^AGENT ORANGE
"RTN","IBNCPDP1",226,0)
 ;;2^IR^IONIZING RADIATION
"RTN","IBNCPDP1",227,0)
 ;;3^SC^SC TREATMENT
"RTN","IBNCPDP1",228,0)
 ;;4^SWA^SOUTHWEST ASIA
"RTN","IBNCPDP1",229,0)
 ;;5^MST^MILITARY SEXUAL TRAUMA
"RTN","IBNCPDP1",230,0)
 ;;6^HNC^HEAD/NECK CANCER
"RTN","IBNCPDP1",231,0)
 ;;7^CV^COMBAT VETERAN
"RTN","IBNCPDP1",232,0)
 ;;8^SHAD^PROJECT 112/SHAD
"RTN","IBNCPDP1",233,0)
 ;;
"RTN","IBNCPDP1",234,0)
 ;
"RTN","IBNCPDP2")
0^9^B63574984
"RTN","IBNCPDP2",1,0)
IBNCPDP2 ;OAK/ELZ - PROCESSING FOR ECME RESP ;11/15/07  09:43
"RTN","IBNCPDP2",2,0)
 ;;2.0;INTEGRATED BILLING;**223,276,342,347,363,383,405,384,411**;21-MAR-94;Build 29
"RTN","IBNCPDP2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPDP2",4,0)
 ;
"RTN","IBNCPDP2",5,0)
ECME(DFN,IBD) ; function called by STORESP^IBNCPDP
"RTN","IBNCPDP2",6,0)
 ; input - DFN - patient IEN for the prescription
"RTN","IBNCPDP2",7,0)
 ;         IBD array passed in by reference
"RTN","IBNCPDP2",8,0)
 ;      The IBD array is passed to various subroutines depending
"RTN","IBNCPDP2",9,0)
 ;      on the ePharmacy event as evaluated by IBD("STATUS")
"RTN","IBNCPDP2",10,0)
 I $G(IBD("EPHARM"))="" S IBD("EPHARM")=$$EPHARM(+$G(IBD("PRESCRIPTION")),+$G(IBD("FILL NUMBER")))
"RTN","IBNCPDP2",11,0)
 I IBD("STATUS")="PAID",$G(IBD("RXCOB"))=2 Q $$BILLSEC^IBNCPDP5(DFN,.IBD)
"RTN","IBNCPDP2",12,0)
 I IBD("STATUS")="PAID" Q $$BILL(DFN,.IBD)
"RTN","IBNCPDP2",13,0)
 I IBD("STATUS")="REVERSED" Q $$REVERSE^IBNCPDP3(DFN,.IBD)
"RTN","IBNCPDP2",14,0)
 I IBD("STATUS")="CLOSED" Q $$CLOSE^IBNCPDP4(DFN,.IBD)
"RTN","IBNCPDP2",15,0)
 I IBD("STATUS")="RELEASED" Q $$RELEASE^IBNCPDP4(DFN,.IBD)
"RTN","IBNCPDP2",16,0)
 I IBD("STATUS")="SUBMITTED" Q $$SUBMIT^IBNCPDP4(DFN,.IBD)
"RTN","IBNCPDP2",17,0)
 I IBD("STATUS")="REOPEN" Q $$REOPEN^IBNCPDP4(DFN,.IBD)
"RTN","IBNCPDP2",18,0)
 D LOG("UNKNOWN")
"RTN","IBNCPDP2",19,0)
 Q "0^Cannot determine ECME event status"
"RTN","IBNCPDP2",20,0)
 ;
"RTN","IBNCPDP2",21,0)
MATCH(BCID,IBS) ;  right bill, right COB payer
"RTN","IBNCPDP2",22,0)
 N IBX,IBHAVE,IBPS
"RTN","IBNCPDP2",23,0)
 S IBPS=$S(IBS=1:"P",IBS=2:"S",IBS=3:"T",1:"P")
"RTN","IBNCPDP2",24,0)
 S IBX=0,IBHAVE=0
"RTN","IBNCPDP2",25,0)
 F  S IBX=$O(^DGCR(399,"AG",BCID,IBX)) Q:'IBX  S IBHAVE=1 I '$P($G(^DGCR(399,IBX,"S")),U,16),(IBPS=$P($G(^DGCR(399,IBX,0)),U,21)) Q
"RTN","IBNCPDP2",26,0)
 I 'IBX,IBHAVE Q ""
"RTN","IBNCPDP2",27,0)
 Q +IBX
"RTN","IBNCPDP2",28,0)
 ;
"RTN","IBNCPDP2",29,0)
BILL(DFN,IBD) ; create bills
"RTN","IBNCPDP2",30,0)
 N IBDIV,IBAMT,IBY,IBSERV,IBFAC,IBSITE,IBDRX,IB,IBCDFN,IBINS,IBIDS,IBIFN,IBDFN,PRCASV,IBTRIC,IBLGL,IBLDT2
"RTN","IBNCPDP2",31,0)
 N PRCAERR,IBADT,IBRXN,IBFIL,IBTRKRN,DIE,DA,DR,IBRES,IBLOCK,IBLDT,IBNOW,IBDUZ,RCDUZ,IBPREV,IBQUERY,IBPAID,IBACT,%,DGRVRCAL
"RTN","IBNCPDP2",32,0)
 ;
"RTN","IBNCPDP2",33,0)
 S IBDUZ=.5 ;POSTMASTER
"RTN","IBNCPDP2",34,0)
 ;I $G(IBD("FILLED BY")),$D(^VA(200,+IBD("FILLED BY"))) S IBDUZ=+IBD("FILLED BY")
"RTN","IBNCPDP2",35,0)
 S RCDUZ=IBDUZ
"RTN","IBNCPDP2",36,0)
 ;
"RTN","IBNCPDP2",37,0)
 S IBY=1,IBLOCK=0
"RTN","IBNCPDP2",38,0)
 I 'DFN S IBY="0^Missing DFN" G BILLQ
"RTN","IBNCPDP2",39,0)
 S IBAMT=+$G(IBD("BILLED")) ;FI portion of charge
"RTN","IBNCPDP2",40,0)
 I 'IBAMT S IBY="-1^Zero amount billed" G BILLQ
"RTN","IBNCPDP2",41,0)
 S IBADT=+$G(IBD("FILL DATE"),DT)
"RTN","IBNCPDP2",42,0)
 S IBRXN=+$G(IBD("PRESCRIPTION")) I 'IBRXN S IBY="0^Missing Rx IEN" G BILLQ
"RTN","IBNCPDP2",43,0)
 S IBFIL=+$G(IBD("FILL NUMBER"),-1) I IBFIL<0 S IBY="0^No fill number" G BILLQ
"RTN","IBNCPDP2",44,0)
 S IBDIV=+$G(IBD("DIVISION"))
"RTN","IBNCPDP2",45,0)
 I '$L($G(IBD("CLAIMID"))) S IBY="-1^Missing ECME Number" G BILLQ
"RTN","IBNCPDP2",46,0)
 S IBD("BCID")=$$BCID^IBNCPDP4(IBD("CLAIMID"),IBADT)
"RTN","IBNCPDP2",47,0)
 L +^DGCR(399,"AG",IBD("BCID")):15 E  S IBY="0^Cannot lock ECME number." G BILLQ
"RTN","IBNCPDP2",48,0)
 ;
"RTN","IBNCPDP2",49,0)
 S IBTRIC=$$TRICARE^IBNCPDP6(IBRXN_";"_IBFIL)
"RTN","IBNCPDP2",50,0)
 ; do patient copay first (only applicable if Tricare)
"RTN","IBNCPDP2",51,0)
 I $G(IBD("COPAY")),IBTRIC D BILL^IBNCPDP6(IBRXN_";"_IBFIL,IBD("COPAY"),$G(IBD("RTYPE")))
"RTN","IBNCPDP2",52,0)
 I IBTRIC,'$G(IBD("PAID")) S IBY="1^Nothing paid in Tricare claim." G BILLQ
"RTN","IBNCPDP2",53,0)
 ;
"RTN","IBNCPDP2",54,0)
 S IBLOCK=1,IBLDT2=""
"RTN","IBNCPDP2",55,0)
 S IBLDT=$$FMADD^XLFDT(DT,1) F  S IBLGL=$O(^XTMP("IBNCPLDT"_IBLDT),-1),IBLDT=$E(IBLGL,9,15) Q:IBLDT<$$FMADD^XLFDT(DT,-3)!(IBLGL'["IBNCPLDT")  I $D(^XTMP(IBLGL,IBD("BCID"))) S IBLDT2=^(IBD("BCID")) Q  ;Last time called
"RTN","IBNCPDP2",56,0)
 D NOW^%DTC S IBNOW=%
"RTN","IBNCPDP2",57,0)
 ; 2 calls in 45 sec
"RTN","IBNCPDP2",58,0)
 I IBLDT2,$$FMDIFF^XLFDT(IBNOW,IBLDT2,2)<45 S IBY="0^Duplicate billing call" G BILLQ
"RTN","IBNCPDP2",59,0)
 ;
"RTN","IBNCPDP2",60,0)
 I $$MATCH(IBD("BCID"),IBD("RXCOB")) D   ;cancel the previous bill
"RTN","IBNCPDP2",61,0)
 . N IBARR M IBARR=IBD I $$REVERSE^IBNCPDP3(DFN,.IBARR,2)
"RTN","IBNCPDP2",62,0)
 ;
"RTN","IBNCPDP2",63,0)
 ; derive minimal variables
"RTN","IBNCPDP2",64,0)
 I '$$CHECK^IBECEAU(0) S IBY="-1^IB SITE" G BILLQ
"RTN","IBNCPDP2",65,0)
 S IBSERV=$P($G(^IBE(350.1,1,0)),"^",4)
"RTN","IBNCPDP2",66,0)
 I '$$SERV^IBARX1(IBSERV) S IBY="-1^IB SERVICE" G BILLQ
"RTN","IBNCPDP2",67,0)
 I 'IBDIV S IBDIV=$P($$MCDIV^IBNCPEB(IBRXN,IBFIL),U,2)
"RTN","IBNCPDP2",68,0)
 I 'IBDIV S IBDIV=+$P($G(^SC(+$$FILE^IBRXUTL(IBRXN,5),0)),"^",15)
"RTN","IBNCPDP2",69,0)
 I 'IBDIV S IBDIV=+$P($G(^IBE(350.9,1,1)),U,25) ;dflt
"RTN","IBNCPDP2",70,0)
 I IBDIV S IBD("DIVISION")=IBDIV
"RTN","IBNCPDP2",71,0)
 ; - establish a stub claim/receivable
"RTN","IBNCPDP2",72,0)
 D SET^IBR I IBY<0 G BILLQ
"RTN","IBNCPDP2",73,0)
 ;
"RTN","IBNCPDP2",74,0)
 ; set up the following variables for claim establishment:
"RTN","IBNCPDP2",75,0)
 ; .01 BILL #
"RTN","IBNCPDP2",76,0)
 ; .17 ORIG CLAIM
"RTN","IBNCPDP2",77,0)
 ; .2  AUTO?
"RTN","IBNCPDP2",78,0)
 ; .02 DFN
"RTN","IBNCPDP2",79,0)
 ; .06 TIMEFRAME
"RTN","IBNCPDP2",80,0)
 ; .07 RATE TYPE
"RTN","IBNCPDP2",81,0)
 ; .18 SC AT TIME?
"RTN","IBNCPDP2",82,0)
 ; .04 LOCATION
"RTN","IBNCPDP2",83,0)
 ; .22 DIVISION
"RTN","IBNCPDP2",84,0)
 ; .05 BILL CLASSIF  (3)
"RTN","IBNCPDP2",85,0)
 ; .03 EVT DATE (FILL DATE)
"RTN","IBNCPDP2",86,0)
 ; 151 BILL FROM
"RTN","IBNCPDP2",87,0)
 ; 152 BILL TO
"RTN","IBNCPDP2",88,0)
 ; 155 SENSITIVE DX
"RTN","IBNCPDP2",89,0)
 ; 157 ROI OBTAINED
"RTN","IBNCPDP2",90,0)
 ; 101 PRIMARY INS CARRIER
"RTN","IBNCPDP2",91,0)
 K IB
"RTN","IBNCPDP2",92,0)
 S (IB(.02),IBDFN)=DFN
"RTN","IBNCPDP2",93,0)
 S IB(.07)=$$RT^IBNCPDP6(IBRXN_";"_IBFIL) ; previously determined rate type
"RTN","IBNCPDP2",94,0)
 I 'IB(.07) S IB(.07)=+$$RT^IBNCPDPU(DFN) ; cannot find previously, try to recompute
"RTN","IBNCPDP2",95,0)
 I 'IB(.07) S IBY="-1^IB RATE TYPE" G BILLQ
"RTN","IBNCPDP2",96,0)
 ;
"RTN","IBNCPDP2",97,0)
 S IBIFN=PRCASV("ARREC")
"RTN","IBNCPDP2",98,0)
 S IB(.01)=$P(PRCASV("ARBIL"),"-",2)
"RTN","IBNCPDP2",99,0)
 S IB(.17)=""
"RTN","IBNCPDP2",100,0)
 S IB(.2)=0
"RTN","IBNCPDP2",101,0)
 S IB(.06)=1
"RTN","IBNCPDP2",102,0)
 S IB(.18)=$$SC^IBCU3(DFN)
"RTN","IBNCPDP2",103,0)
 S IB(.04)=$S(+$P($G(^DG(40.8,+IBDIV,0)),U,3):7,1:1)
"RTN","IBNCPDP2",104,0)
 S:IBDIV IB(.22)=+IBDIV
"RTN","IBNCPDP2",105,0)
 S IB(.05)=3
"RTN","IBNCPDP2",106,0)
 S (IB(.03),IB(151),IB(152))=IBADT
"RTN","IBNCPDP2",107,0)
 S IBINS=$P($G(^IBA(355.3,+$G(IBD("PLAN")),0)),"^") I IBINS S IB(101)=IBINS
"RTN","IBNCPDP2",108,0)
 ;
"RTN","IBNCPDP2",109,0)
 ; set 362.4 node to rx#^p50^days sup^fill date^qty^ndc
"RTN","IBNCPDP2",110,0)
 S IB(362.4,IBRXN,IBFIL)=IBD("RX NO")_"^"_IBD("DRUG")_"^"_IBD("DAYS SUPPLY")_"^"_IBD("FILL DATE")_"^"_IBD("QTY")_"^"_IBD("NDC")
"RTN","IBNCPDP2",111,0)
 ;
"RTN","IBNCPDP2",112,0)
 ; drug DEA ROI check.
"RTN","IBNCPDP2",113,0)
 N IBDEA
"RTN","IBNCPDP2",114,0)
 D ZERO^IBRXUTL(IBD("DRUG")) S IBDEA=^TMP($J,"IBDRUG",IBD("DRUG"),3)
"RTN","IBNCPDP2",115,0)
 I IBDEA["U" S IB(155)=1,IB(157)=1 ; set sensitive dx and ROI obtained
"RTN","IBNCPDP2",116,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBNCPDP2",117,0)
 ;
"RTN","IBNCPDP2",118,0)
 ; call the autobiller module to create the claim with a default
"RTN","IBNCPDP2",119,0)
 ; diagnosis and procedure for prescriptions
"RTN","IBNCPDP2",120,0)
 D EN^IBCD3(.IBQUERY)
"RTN","IBNCPDP2",121,0)
 D CLOSE^IBSDU(.IBQUERY)
"RTN","IBNCPDP2",122,0)
 ;
"RTN","IBNCPDP2",123,0)
 S:'$D(^XTMP("IBNCPLDT"_DT)) ^XTMP("IBNCPLDT"_DT,0)=$$FMADD^XLFDT(DT,2)_U_DT S ^XTMP("IBNCPLDT"_DT,IBD("BCID"))=IBNOW
"RTN","IBNCPDP2",124,0)
 S DIE="^DGCR(399,",DA=IBIFN
"RTN","IBNCPDP2",125,0)
 ; update the ECME fields
"RTN","IBNCPDP2",126,0)
 S DR="460////^S X=IBD(""BCID"")" S:$L($G(IBD("AUTH #"))) DR=DR_";461////^S X=IBD(""AUTH #"")"
"RTN","IBNCPDP2",127,0)
 D ^DIE K DA,DR,DIE
"RTN","IBNCPDP2",128,0)
 D SETCT ; Set Claims Tracking record
"RTN","IBNCPDP2",129,0)
 ;
"RTN","IBNCPDP2",130,0)
 ; IEN to 2.3121
"RTN","IBNCPDP2",131,0)
 S IBCDFN=$$PLANN^IBNCPDPU(DFN,IBD("PLAN"),IBADT)
"RTN","IBNCPDP2",132,0)
 I 'IBCDFN S IBY="-1^Plan not found in Patient's Profile." G BILLQ
"RTN","IBNCPDP2",133,0)
 ;
"RTN","IBNCPDP2",134,0)
 ; add the payer (fiscal intermediary) to the claim
"RTN","IBNCPDP2",135,0)
 S IBINS=+IBCDFN,IBCDFN=$P(IBCDFN,"^",2)
"RTN","IBNCPDP2",136,0)
 S DIE="^DGCR(399,",DA=IBIFN,DR="112////"_IBCDFN
"RTN","IBNCPDP2",137,0)
 D ^DIE K DA,DR,DIE,DGRVRCAL
"RTN","IBNCPDP2",138,0)
 ;
"RTN","IBNCPDP2",139,0)
 ; need to make sure we have computed charges.
"RTN","IBNCPDP2",140,0)
 Q:'$$CHARGES(IBIFN,IBINS,+IB(.07),$G(IBD("PAID")),IBDIV,IBTRIC,.IBY)
"RTN","IBNCPDP2",141,0)
 ;
"RTN","IBNCPDP2",142,0)
 ; update the authorize/print fields
"RTN","IBNCPDP2",143,0)
 S DIE="^DGCR(399,",DA=IBIFN
"RTN","IBNCPDP2",144,0)
 S DR="9////1;12////"_DT D ^DIE
"RTN","IBNCPDP2",145,0)
 ;
"RTN","IBNCPDP2",146,0)
 ; pass the claim to AR
"RTN","IBNCPDP2",147,0)
 D GVAR^IBCBB,ARRAY^IBCBB1 S PRCASV("APR")=IBDUZ D ^PRCASVC6
"RTN","IBNCPDP2",148,0)
 I 'PRCASV("OKAY") S IBY="-1^Cannot establish receivable in AR." G BILLQ
"RTN","IBNCPDP2",149,0)
 D REL^PRCASVC
"RTN","IBNCPDP2",150,0)
 ;
"RTN","IBNCPDP2",151,0)
 ; update the AR status to Active
"RTN","IBNCPDP2",152,0)
 ;  D AUDITX^PRCAUDT(PRCASV("ARREC"))
"RTN","IBNCPDP2",153,0)
 S PRCASV("STATUS")=16
"RTN","IBNCPDP2",154,0)
 D STATUS^PRCASVC1
"RTN","IBNCPDP2",155,0)
 ;
"RTN","IBNCPDP2",156,0)
 ; decrease adjust bill
"RTN","IBNCPDP2",157,0)
 ; Auto decrease from service Bill#,Tran amt,person,reason,Tran date
"RTN","IBNCPDP2",158,0)
 S IBAMT=$G(^DGCR(399,IBIFN,"U1"))
"RTN","IBNCPDP2",159,0)
 S IBPAID=$G(IBD("PAID"))
"RTN","IBNCPDP2",160,0)
 I IBAMT-IBPAID>.01,'IBTRIC D
"RTN","IBNCPDP2",161,0)
 . D DEC^PRCASER1(PRCASV("ARREC"),IBAMT-IBPAID,IBDUZ,"Adjust based on ECME amount paid.",IBADT)
"RTN","IBNCPDP2",162,0)
 . I 'IBPAID S PRCASV("STATUS")=22 D STATUS^PRCASVC1 ; collected/closed
"RTN","IBNCPDP2",163,0)
 ;
"RTN","IBNCPDP2",164,0)
 D  ; set the user in 399
"RTN","IBNCPDP2",165,0)
 . N IBI,IBT F IBI=2,5,11,13,15 S IBT(399,IBIFN_",",IBI)=IBDUZ
"RTN","IBNCPDP2",166,0)
 . D FILE^DIE("","IBT")
"RTN","IBNCPDP2",167,0)
 ;
"RTN","IBNCPDP2",168,0)
BILLQ S IBRES=$S(IBY<0:"0^"_$S($L($P(IBY,"^",2)):$P(IBY,"^",2),1:$P(IBY,"^",3)),$G(IBIFN):+IBIFN,1:IBY)
"RTN","IBNCPDP2",169,0)
 I $G(IBIFN) S IBD("BILL")=IBIFN
"RTN","IBNCPDP2",170,0)
 D LOG("BILL",IBRES)
"RTN","IBNCPDP2",171,0)
 I IBY<0 D BULL^IBNCPEB($G(DFN),.IBD,IBRES,$G(IBIFN))
"RTN","IBNCPDP2",172,0)
 I IBLOCK L -^DGCR(399,"AG",IBD("BCID"))
"RTN","IBNCPDP2",173,0)
 Q IBRES
"RTN","IBNCPDP2",174,0)
 ;
"RTN","IBNCPDP2",175,0)
SETCT ; update claims tracking saying bill has been billed
"RTN","IBNCPDP2",176,0)
 S IBTRKRN=+$O(^IBT(356,"ARXFL",IBRXN,IBFIL,0))
"RTN","IBNCPDP2",177,0)
 I IBTRKRN S DIE="^IBT(356,",DA=IBTRKRN,DR=".11////^S X=IBIFN;.17///@" D ^DIE
"RTN","IBNCPDP2",178,0)
 I IBTRKRN,(+$G(IBD("FILL DATE"))'=$P(^IBT(356,IBTRKRN,0),U,6)) S DIE="^IBT(356,",DA=IBTRKRN,DR=".06////"_IBD("FILL DATE") D ^DIE ; Check Fill Date
"RTN","IBNCPDP2",179,0)
 I IBTRKRN,IBIFN D CTB^IBCDC(IBTRKRN,IBIFN)
"RTN","IBNCPDP2",180,0)
 Q
"RTN","IBNCPDP2",181,0)
 ;
"RTN","IBNCPDP2",182,0)
LOG(PROC,RESULT) ;Store the data
"RTN","IBNCPDP2",183,0)
 ;Log values passed into IB by outside applications
"RTN","IBNCPDP2",184,0)
 ;
"RTN","IBNCPDP2",185,0)
 ;implicit input variables/arrays :
"RTN","IBNCPDP2",186,0)
 ; IBD array with values sent to IB (see calling subroutines)
"RTN","IBNCPDP2",187,0)
 ; DFN - patient's IEN (file #2)
"RTN","IBNCPDP2",188,0)
 ; DUZ - user's IEN(file #200)
"RTN","IBNCPDP2",189,0)
 ;explicit parameters:
"RTN","IBNCPDP2",190,0)
 ; PROC - type of event as string, i.e. BILL, REJECT and so on
"RTN","IBNCPDP2",191,0)
 ; RESULT - result of the event processing, format: return_code^message
"RTN","IBNCPDP2",192,0)
 ;
"RTN","IBNCPDP2",193,0)
 D LOG^IBNCPLOG(.IBD,DFN,PROC,RESULT,$J,$$NOW^XLFDT(),+DUZ)
"RTN","IBNCPDP2",194,0)
 Q
"RTN","IBNCPDP2",195,0)
 ;
"RTN","IBNCPDP2",196,0)
EPHARM(IBRX,IBREFILL) ;
"RTN","IBNCPDP2",197,0)
 ;returns ien of #9002313.56 BPS PHARMACIES associated
"RTN","IBNCPDP2",198,0)
 ;with the prescription specified by:
"RTN","IBNCPDP2",199,0)
 ; IBRX - IEN in file #52
"RTN","IBNCPDP2",200,0)
 ; IBREFILL - zero(0) for the original prescription or the refill
"RTN","IBNCPDP2",201,0)
 ;    number for a refill (IEN of REFILL multiple #52.1)
"RTN","IBNCPDP2",202,0)
 I +$G(IBRX)=0 Q ""
"RTN","IBNCPDP2",203,0)
 I $G(IBREFILL)="" Q ""
"RTN","IBNCPDP2",204,0)
 N IBDIV59
"RTN","IBNCPDP2",205,0)
 S IBDIV59=+$$RXSITE^PSOBPSUT(+IBRX,+IBREFILL)
"RTN","IBNCPDP2",206,0)
 I IBDIV59>0 Q $$GETPHARM^BPSUTIL(IBDIV59)
"RTN","IBNCPDP2",207,0)
 Q ""
"RTN","IBNCPDP2",208,0)
 ;
"RTN","IBNCPDP2",209,0)
CHARGES(IBIFN,IBINS,IBRT,IBAMT,IBDIV,IBTRIC,IBY) ;
"RTN","IBNCPDP2",210,0)
 ; will add charges onto bill based on rate type
"RTN","IBNCPDP2",211,0)
 ;
"RTN","IBNCPDP2",212,0)
 ; Input:  IBIFN = Bill (399) ien
"RTN","IBNCPDP2",213,0)
 ;         IBINS = Insurance Co (36) ien
"RTN","IBNCPDP2",214,0)
 ;         IBRT = Rate Type (399.3) ien
"RTN","IBNCPDP2",215,0)
 ; Output: 1 = Ok all done
"RTN","IBNCPDP2",216,0)
 ;         0 = not ok, bill doesn't have charges
"RTN","IBNCPDP2",217,0)
 ;
"RTN","IBNCPDP2",218,0)
 N IBCSZ,IBRVCD,IBBS,IBUNITS,IBCPT,IBAA,IBTYPE,IBITEM,X
"RTN","IBNCPDP2",219,0)
 ;
"RTN","IBNCPDP2",220,0)
 I 'IBTRIC D BILL^IBCRBC(IBIFN) Q 1
"RTN","IBNCPDP2",221,0)
 ;
"RTN","IBNCPDP2",222,0)
 ; - manually add charge to the claim (based on cost for Tricare)
"RTN","IBNCPDP2",223,0)
 S IBRVCD=$P($G(^DIC(36,IBINS,0)),"^",15) ;                   rx refill rev code
"RTN","IBNCPDP2",224,0)
 S IBCSZ=$G(^IBE(363.1,+$O(^IBE(363.1,"B","RX COST",0)),0)) ; using cost CS
"RTN","IBNCPDP2",225,0)
 I IBRVCD="" S IBRVCD=$P(IBCSZ,U,5) ;                         CS def rev code
"RTN","IBNCPDP2",226,0)
 I IBRVCD="" S X=250 ;                                        gen'l rx rev code
"RTN","IBNCPDP2",227,0)
 ;
"RTN","IBNCPDP2",228,0)
 S IBBS=$P(IBCSZ,U,6) ;                                       CS def bedsection
"RTN","IBNCPDP2",229,0)
 S IBUNITS=1 ;                                                one unit
"RTN","IBNCPDP2",230,0)
 S IBCPT=$P($G(^IBE(350.9,1,1)),"^",30) ;                     def rx refill cpt
"RTN","IBNCPDP2",231,0)
 S IBAA=0 ;                                                   not auto calc charges
"RTN","IBNCPDP2",232,0)
 S IBTYPE=3 ;                                                 rx type
"RTN","IBNCPDP2",233,0)
 S IBITEM="" ;                                                charge item link
"RTN","IBNCPDP2",234,0)
 ;
"RTN","IBNCPDP2",235,0)
 S X=$$ADDRC^IBCRBF(IBIFN,IBRVCD,IBBS,IBAMT,IBUNITS,IBCPT,IBDIV,IBAA,IBTYPE,IBITEM)
"RTN","IBNCPDP2",236,0)
 I X<0 S IBY="-1^^Unable to add Revenue Code charge to claim." Q 0
"RTN","IBNCPDP2",237,0)
 Q 1
"RTN","IBNCPDP2",238,0)
 ;
"RTN","IBNCPDP3")
0^10^B32452413
"RTN","IBNCPDP3",1,0)
IBNCPDP3 ;OAK/ELZ - STORES NDC/AWP UPDATES ;11/14/07  13:18
"RTN","IBNCPDP3",2,0)
 ;;2.0;INTEGRATED BILLING;**223,276,342,363,383,384,411**;21-MAR-94;Build 29
"RTN","IBNCPDP3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPDP3",4,0)
 ;
"RTN","IBNCPDP3",5,0)
 ;
"RTN","IBNCPDP3",6,0)
UPAWP(IBNDC,IBAWP,IBADT) ; updates AWP prices for NDCs
"RTN","IBNCPDP3",7,0)
 ;
"RTN","IBNCPDP3",8,0)
 N IBITEM,IBCS
"RTN","IBNCPDP3",9,0)
 ;
"RTN","IBNCPDP3",10,0)
 ;
"RTN","IBNCPDP3",11,0)
 S IBCS=$P($G(^IBE(350.9,1,9)),"^",12)
"RTN","IBNCPDP3",12,0)
 I 'IBCS Q "0^Unable to find Charge Set"
"RTN","IBNCPDP3",13,0)
 ;
"RTN","IBNCPDP3",14,0)
 S IBNDC=$$NDC^IBNCPNB(IBNDC)
"RTN","IBNCPDP3",15,0)
 ;
"RTN","IBNCPDP3",16,0)
 S IBITEM=+$$ADDBI^IBCREF("NDC",IBNDC) I IBITEM Q "0^Unable to add item"
"RTN","IBNCPDP3",17,0)
 ;
"RTN","IBNCPDP3",18,0)
 I '$$ADDCI^IBCREF(IBCS,IBITEM,IBADT,IBAWP) Q "0^Unable to add charge"
"RTN","IBNCPDP3",19,0)
 ;
"RTN","IBNCPDP3",20,0)
 Q 1
"RTN","IBNCPDP3",21,0)
 ;
"RTN","IBNCPDP3",22,0)
 ;
"RTN","IBNCPDP3",23,0)
 ;
"RTN","IBNCPDP3",24,0)
 ;
"RTN","IBNCPDP3",25,0)
REVERSE(DFN,IBD,IBAUTO) ;process reversed claims
"RTN","IBNCPDP3",26,0)
 N IBIFN,I,IB,IBIL,IBCHG,IBCRES,IBY,X,Y,DA,DIE,DR,IBADT,IBLOCK,IBLDT
"RTN","IBNCPDP3",27,0)
 N IBNOW,IBDUZ,IBCR,IBRELC,IBCC,IBPAP,IBRXN,IBFIL,IBRTS,IBARES,IBUSR
"RTN","IBNCPDP3",28,0)
 N IBLGL,IBLDT
"RTN","IBNCPDP3",29,0)
 S IBDUZ=.5
"RTN","IBNCPDP3",30,0)
 S IBLOCK=0
"RTN","IBNCPDP3",31,0)
 ; find bill number
"RTN","IBNCPDP3",32,0)
 I 'DFN S IBY="0^No patient" G REVQ
"RTN","IBNCPDP3",33,0)
 I '$L($G(IBD("CLAIMID"))) S IBY="0^Missing ECME Number" G REVQ
"RTN","IBNCPDP3",34,0)
 S IBADT=+$G(IBD("FILL DATE")) I 'IBADT S IBY="0^Missing Fill Date" G REVQ
"RTN","IBNCPDP3",35,0)
 S IBRXN=+$G(IBD("PRESCRIPTION")) I 'IBRXN S IBY="0^No Rx IEN" G REVQ
"RTN","IBNCPDP3",36,0)
 S IBFIL=+$G(IBD("FILL NUMBER"),-1) I IBFIL<0 S IBY="0^No fill number" G REVQ
"RTN","IBNCPDP3",37,0)
 I $E($G(IBD("RESPONSE")),1)="R" D  G REVQ:+'$G(IBRTS)
"RTN","IBNCPDP3",38,0)
 . S IBY="0^REVERSAL rejected by payer"
"RTN","IBNCPDP3",39,0)
 . S IBRTS=$$RTS(IBD("REVERSAL REASON"))
"RTN","IBNCPDP3",40,0)
 ;
"RTN","IBNCPDP3",41,0)
 D CANC^IBNCPDP6(IBRXN_";"_IBFIL) ; cancel 1st party charge for Tricare
"RTN","IBNCPDP3",42,0)
 ;
"RTN","IBNCPDP3",43,0)
 S IBD("BCID")=$$BCID^IBNCPDP4(IBD("CLAIMID"),IBADT)
"RTN","IBNCPDP3",44,0)
 L +^DGCR(399,"AG",IBD("BCID")):15 E  S IBY="0^Cannot lock ECME number" G REVQ
"RTN","IBNCPDP3",45,0)
 S IBLOCK=1
"RTN","IBNCPDP3",46,0)
 S IBUSR=$S(+$G(IBD("USER"))=0:DUZ,1:IBD("USER"))
"RTN","IBNCPDP3",47,0)
 S IBLDT=$$FMADD^XLFDT(DT,1) F  S IBLGL=$O(^XTMP("IBNCPLDT"_IBLDT),-1),IBLDT=$E(IBLGL,9,15) Q:IBLDT<$$FMADD^XLFDT(DT,-3)!(IBLGL'["IBNCPLDT")  I $D(^XTMP(IBLGL,IBD("BCID"))) S ^(IBD("BCID"))="" Q
"RTN","IBNCPDP3",48,0)
 S IBIFN=$$MATCH^IBNCPDP2(IBD("BCID"),$G(IBD("RXCOB")))
"RTN","IBNCPDP3",49,0)
 I $D(IBD("CLOSE REASON")),'$D(IBD("DROP TO PAPER")) S IBD("DROP TO PAPER")=""
"RTN","IBNCPDP3",50,0)
 S IBCR=+$G(IBD("CLOSE REASON"))
"RTN","IBNCPDP3",51,0)
 S IBPAP=$G(IBD("DROP TO PAPER"))
"RTN","IBNCPDP3",52,0)
 S IBRELC=$G(IBD("RELEASE COPAY"))
"RTN","IBNCPDP3",53,0)
 S IBCC=$G(IBD("CLOSE COMMENT"))
"RTN","IBNCPDP3",54,0)
 D NONBR^IBNCPNB(DFN,IBRXN,IBFIL,IBADT,IBCR,IBPAP,IBRELC,IBCC,IBUSR)
"RTN","IBNCPDP3",55,0)
 I 'IBIFN S IBY="0^"_$S(IBPAP:"Dropped to paper",IBCR>1:"Set non-billable reason in CT",1:"Cannot find the bill to reverse") G REVQ
"RTN","IBNCPDP3",56,0)
 ;
"RTN","IBNCPDP3",57,0)
 F I=0,"S" S IB(I)=$G(^DGCR(399,IBIFN,I))
"RTN","IBNCPDP3",58,0)
 I IB(0)="" S IBY="0^No data in bill" G REVQ
"RTN","IBNCPDP3",59,0)
 I +$P(IB("S"),U,16),$P(IB("S"),U,17)]"" S IBY="0^Bill already cancelled" G REVQ
"RTN","IBNCPDP3",60,0)
 ;
"RTN","IBNCPDP3",61,0)
 S:'$D(IBCRES) IBCRES="ECME PRESCRIPTION REVERSED"
"RTN","IBNCPDP3",62,0)
 S DA=IBIFN,DR="16////1;19////"_IBCRES,DIE="^DGCR(399,"
"RTN","IBNCPDP3",63,0)
 D ^DIE K DA,DIE,DR
"RTN","IBNCPDP3",64,0)
 ;
"RTN","IBNCPDP3",65,0)
 ; - decrease out the receivable in AR
"RTN","IBNCPDP3",66,0)
 S IB("U1")=$G(^DGCR(399,IBIFN,"U1"))
"RTN","IBNCPDP3",67,0)
 S IBIL=$P($G(^PRCA(430,IBIFN,0)),"^")
"RTN","IBNCPDP3",68,0)
 S IBCHG=$S(IB("U1")']"":0,$P(IB("U1"),"^",1)]"":$P(IB("U1"),"^",1),1:0)
"RTN","IBNCPDP3",69,0)
 ;
"RTN","IBNCPDP3",70,0)
 S X="21^"_IBCHG_"^"_IBIL_"^"_IBDUZ_"^"_DT_"^"_IBCRES
"RTN","IBNCPDP3",71,0)
 D ^PRCASER1
"RTN","IBNCPDP3",72,0)
 S IBARES=Y
"RTN","IBNCPDP3",73,0)
 I IBARES<0 S IBY=IBARES D BULL
"RTN","IBNCPDP3",74,0)
 ;
"RTN","IBNCPDP3",75,0)
 S IBY=$S(IBARES<0:"0^"_$P(IBARES,"^",2),1:1)
"RTN","IBNCPDP3",76,0)
 ;
"RTN","IBNCPDP3",77,0)
 I IBDUZ'=DUZ D  ; set the real user
"RTN","IBNCPDP3",78,0)
 . N IBI,IBT S IBI=18,IBT(399,IBIFN_",",IBI)=IBDUZ D FILE^DIE("","IBT")
"RTN","IBNCPDP3",79,0)
 ;
"RTN","IBNCPDP3",80,0)
REVQ ; perform end of job tasks
"RTN","IBNCPDP3",81,0)
 D LOG^IBNCPDP2($S($G(IBAUTO)=1:"AUTO REVERSE",$G(IBAUTO)=2:"BILL CANCELLED",1:"REVERSE"),IBY)
"RTN","IBNCPDP3",82,0)
 I IBLOCK L -^DGCR(399,"AG",IBD("BCID"))
"RTN","IBNCPDP3",83,0)
 I IBY=1,$G(IBIFN) S IBY=+IBIFN
"RTN","IBNCPDP3",84,0)
 Q IBY
"RTN","IBNCPDP3",85,0)
 ;
"RTN","IBNCPDP3",86,0)
RTS(IBRR) ; Return to Stock processing on Released Rx
"RTN","IBNCPDP3",87,0)
 ; input - IBRR = reversal reason
"RTN","IBNCPDP3",88,0)
 ;         IBCRSN = passed in by reference
"RTN","IBNCPDP3",89,0)
 ; output - 0 = reversal not due to a Rx RETURN TO STOCK or Rx DELETE
"RTN","IBNCPDP3",90,0)
 ;          1 = reversal due to a Rx RETURN TO STOCK or Rx DELETE
"RTN","IBNCPDP3",91,0)
 ;          IBCRSN = charge removal reason
"RTN","IBNCPDP3",92,0)
 N IBTRKRN,IBLOCK2,IBCMT,DA,DIE,DR
"RTN","IBNCPDP3",93,0)
 ;
"RTN","IBNCPDP3",94,0)
 I IBRR'="RX RETURNED TO STOCK"&(IBRR'="RX DELETED") Q 0
"RTN","IBNCPDP3",95,0)
 S IBTRKRN=+$O(^IBT(356,"ARXFL",IBRXN,IBFIL,0))
"RTN","IBNCPDP3",96,0)
 I 'IBTRKRN Q 0  ; CT record does not exist
"RTN","IBNCPDP3",97,0)
 I '$P($G(^IBT(356,IBTRKRN,0)),U,11) Q 0  ; BILL does not exist
"RTN","IBNCPDP3",98,0)
 S IBCRES=$$GETRSN(DFN,IBRXN,IBFIL)  ; recorded in file 399 entry
"RTN","IBNCPDP3",99,0)
 L +^IBT(356,IBTRKRN):5 S IBLOCK2=$T
"RTN","IBNCPDP3",100,0)
 S DIE="^IBT(356,",DA=IBTRKRN,IBCMT="Rx RTS - May Need Refund"
"RTN","IBNCPDP3",101,0)
 S DR="1.08////"_IBCMT
"RTN","IBNCPDP3",102,0)
 D ^DIE
"RTN","IBNCPDP3",103,0)
 I IBLOCK2 L -^IBT(356,IBTRKRN)
"RTN","IBNCPDP3",104,0)
 Q 1
"RTN","IBNCPDP3",105,0)
 ;
"RTN","IBNCPDP3",106,0)
BULL ; Generate a bulletin if there is an error in cancelling the claim.
"RTN","IBNCPDP3",107,0)
 N IBC,IBT,IBPT,IBGRP,XMDUZ,XMTEXT,XMSUB,XMY
"RTN","IBNCPDP3",108,0)
 ;
"RTN","IBNCPDP3",109,0)
 S IBPT=$$PT^IBEFUNC(DFN)
"RTN","IBNCPDP3",110,0)
 S XMSUB=$E($P(IBPT,"^"),1,14)_"  "_$P(IBPT,"^",3)_" - ERROR ENCOUNTERED"
"RTN","IBNCPDP3",111,0)
 S XMDUZ="INTEGRATED BILLING PACKAGE",XMTEXT="IBT("
"RTN","IBNCPDP3",112,0)
 S XMY(IBDUZ)=""
"RTN","IBNCPDP3",113,0)
 S XMY("G.IBCNR EPHARM")=""
"RTN","IBNCPDP3",114,0)
 ;
"RTN","IBNCPDP3",115,0)
 S IBT(1)="An error occurred while cancelling the Pharmacy claim from ECME"
"RTN","IBNCPDP3",116,0)
 S IBT(2)="fiscal intermediary for the following patient:"
"RTN","IBNCPDP3",117,0)
 S IBT(3)=" " S IBC=3
"RTN","IBNCPDP3",118,0)
 D PAT^IBAERR1 ; Accepts IBDUZ
"RTN","IBNCPDP3",119,0)
 S IBC=IBC+1,IBT(IBC)="   Bill #: "_IBIL
"RTN","IBNCPDP3",120,0)
 S IBC=IBC+1,IBT(IBC)=" "
"RTN","IBNCPDP3",121,0)
 S IBC=IBC+1,IBT(IBC)="The following error was encountered:"
"RTN","IBNCPDP3",122,0)
 S IBC=IBC+1,IBT(IBC)=" "
"RTN","IBNCPDP3",123,0)
 D ERR^IBAERR1
"RTN","IBNCPDP3",124,0)
 S IBC=IBC+1,IBT(IBC)=" "
"RTN","IBNCPDP3",125,0)
 S IBC=IBC+1,IBT(IBC)="Please review the circumstances surrounding this error and decrease"
"RTN","IBNCPDP3",126,0)
 S IBC=IBC+1,IBT(IBC)="out this receivable in Accounts Receivable if necessary."
"RTN","IBNCPDP3",127,0)
 D ^XMD
"RTN","IBNCPDP3",128,0)
 Q
"RTN","IBNCPDP3",129,0)
 ;
"RTN","IBNCPDP3",130,0)
GETRSN(DFN,IBRXN,IBFIL) ;
"RTN","IBNCPDP3",131,0)
 ; retrieve charge removal reason from file 354.71
"RTN","IBNCPDP3",132,0)
 ; input - DFN,IBRXN=Rx ien,IBFIL=fill number
"RTN","IBNCPDP3",133,0)
 ; output - charge removal reason
"RTN","IBNCPDP3",134,0)
 N IBDT,IBDA,IBXRSN,IBRXFIL,IB0
"RTN","IBNCPDP3",135,0)
 S (IBDT,IBDA)=0,IBXRSN=""
"RTN","IBNCPDP3",136,0)
 S IBRXFIL=$S('IBFIL:IBRXN,1:IBRXN_";"_IBFIL)
"RTN","IBNCPDP3",137,0)
 F  S IBDT=$O(^IBAM(354.71,"AD",DFN,IBDT)) Q:'IBDT  Q:IBXRSN]""  D
"RTN","IBNCPDP3",138,0)
 . F  S IBDA=$O(^IBAM(354.71,"AD",DFN,IBDT,IBDA)) Q:'IBDA  Q:IBXRSN]""  D
"RTN","IBNCPDP3",139,0)
 . . S IB0=^IBAM(354.71,IBDA,0)
"RTN","IBNCPDP3",140,0)
 . . Q:$P(IB0,"^",6)'[IBRXFIL
"RTN","IBNCPDP3",141,0)
 . . S IBXRSN=$$GET1^DIQ(354.71,IBDA_",",.19)
"RTN","IBNCPDP3",142,0)
 S:IBXRSN']"" IBXRSN="CHARGE REMOVAL REASON NOT FOUND"
"RTN","IBNCPDP3",143,0)
 Q "Reversal Rej, no pymt due<>"_IBXRSN
"RTN","IBNCPDP3",144,0)
 ;
"RTN","IBNCPDP3",145,0)
 ;IBNCPDP3
"RTN","IBNCPDP4")
0^7^B55992890
"RTN","IBNCPDP4",1,0)
IBNCPDP4 ;DALOI/AAT - HANDLE ECME EVENTS ;20-JUN-2003
"RTN","IBNCPDP4",2,0)
 ;;2.0;INTEGRATED BILLING;**276,342,405,384,411**;21-MAR-94;Build 29
"RTN","IBNCPDP4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPDP4",4,0)
 ;
"RTN","IBNCPDP4",5,0)
 ;NCPDP PHASE III
"RTN","IBNCPDP4",6,0)
 Q
"RTN","IBNCPDP4",7,0)
 ;
"RTN","IBNCPDP4",8,0)
CLOSE(DFN,IBD) ; Close Claim Event
"RTN","IBNCPDP4",9,0)
 N IBADT,IBTRKR,IBTRKRN,IBRXN,IBFIL,IBEABD,IBRES,IBLOCK,IBDUZ
"RTN","IBNCPDP4",10,0)
 N IBRXTYP,IBCR,DA,DIE,DR,IBUSR
"RTN","IBNCPDP4",11,0)
 S IBDUZ=.5
"RTN","IBNCPDP4",12,0)
 S IBRES=1,IBLOCK=0
"RTN","IBNCPDP4",13,0)
 ;
"RTN","IBNCPDP4",14,0)
 I 'DFN S IBRES="0^No patient" G CLOSEQ
"RTN","IBNCPDP4",15,0)
 S IBADT=+$G(IBD("FILL DATE")) I 'IBADT S IBRES="0^No fill date" G CLOSEQ
"RTN","IBNCPDP4",16,0)
 S IBRXN=+$G(IBD("PRESCRIPTION")) I 'IBRXN S IBRES="0^No Rx IEN" G CLOSEQ
"RTN","IBNCPDP4",17,0)
 S IBFIL=+$G(IBD("FILL NUMBER"),-1) I IBFIL<0 S IBRES="0^No fill number" G CLOSEQ
"RTN","IBNCPDP4",18,0)
 S IBCR=+$G(IBD("CLOSE REASON")) I 'IBCR S IBRES="0^No close reason" G CLOSEQ
"RTN","IBNCPDP4",19,0)
 I '$L($G(IBD("CLAIMID"))) S IBRES="0^Missing ECME Number" G CLOSEQ
"RTN","IBNCPDP4",20,0)
 S IBD("BCID")=$$BCID(IBD("CLAIMID"),IBADT)
"RTN","IBNCPDP4",21,0)
 S IBUSR=$S(+$G(IBD("USER"))=0:DUZ,1:IBD("USER"))
"RTN","IBNCPDP4",22,0)
 L +^DGCR(399,"AG",IBD("BCID")):5 S IBLOCK=$T
"RTN","IBNCPDP4",23,0)
 ;
"RTN","IBNCPDP4",24,0)
 ; closing secondary claims should not affect CT - esg 7/8/10
"RTN","IBNCPDP4",25,0)
 I $G(IBD("RXCOB"))>1 D  S IBRES=1 G CLOSEQ
"RTN","IBNCPDP4",26,0)
 . N IBACT
"RTN","IBNCPDP4",27,0)
 . ;
"RTN","IBNCPDP4",28,0)
 . ; release copay charges off hold if OPECC said to do so
"RTN","IBNCPDP4",29,0)
 . I '$G(IBD("RELEASE COPAY")) Q
"RTN","IBNCPDP4",30,0)
 . S IBACT=+$$RELCOPAY^IBNCPNB(DFN,IBRXN,IBFIL,1,IBADT,0)      ; release copay charges off hold
"RTN","IBNCPDP4",31,0)
 . I IBACT=-1 D RELBUL^IBNCPEB(DFN,IBRXN,IBFIL,IBADT,IBACT,IBCR,$G(IBD("CLOSE COMMENT")),0,1)   ; send msg if error
"RTN","IBNCPDP4",32,0)
 . Q
"RTN","IBNCPDP4",33,0)
 ;
"RTN","IBNCPDP4",34,0)
 ; -- claims tracking info
"RTN","IBNCPDP4",35,0)
 S IBTRKR=$G(^IBE(350.9,1,6))
"RTN","IBNCPDP4",36,0)
 ; date can't be before parameters
"RTN","IBNCPDP4",37,0)
 S $P(IBTRKR,"^")=$S('$P(IBTRKR,"^",4):0,+IBTRKR&(IBADT<+IBTRKR):0,1:IBADT)
"RTN","IBNCPDP4",38,0)
 S IBTRKRN=+$O(^IBT(356,"ARXFL",IBRXN,IBFIL,0))
"RTN","IBNCPDP4",39,0)
 ;
"RTN","IBNCPDP4",40,0)
 I 'IBTRKRN S IBRES="0^CT record not found" G CLOSEQ
"RTN","IBNCPDP4",41,0)
 ;
"RTN","IBNCPDP4",42,0)
 D NONBR^IBNCPNB(DFN,IBRXN,IBFIL,IBADT,IBCR,$G(IBD("DROP TO PAPER")),$G(IBD("RELEASE COPAY")),$G(IBD("CLOSE COMMENT")),IBUSR)
"RTN","IBNCPDP4",43,0)
 ;
"RTN","IBNCPDP4",44,0)
 S DIE="^IBT(356,",DA=IBTRKRN
"RTN","IBNCPDP4",45,0)
 ; add ECME #,ECME flag, remove total charges
"RTN","IBNCPDP4",46,0)
 S DR="1.1///"_IBD("CLAIMID")_";1.11///2;.29////@"
"RTN","IBNCPDP4",47,0)
 D ^DIE
"RTN","IBNCPDP4",48,0)
 ;
"RTN","IBNCPDP4",49,0)
 S IBRES=1 ; OK
"RTN","IBNCPDP4",50,0)
CLOSEQ ;
"RTN","IBNCPDP4",51,0)
 D LOG^IBNCPDP2("CLOSE",IBRES)
"RTN","IBNCPDP4",52,0)
 I IBLOCK L -^DGCR(399,"AG",IBD("BCID"))
"RTN","IBNCPDP4",53,0)
 Q IBRES
"RTN","IBNCPDP4",54,0)
 ;
"RTN","IBNCPDP4",55,0)
 ;
"RTN","IBNCPDP4",56,0)
RELEASE(DFN,IBD) ;
"RTN","IBNCPDP4",57,0)
 N IBRES,IBADT,IBRXN,IBFIL,IBRDT,IBLOCK,IBLOCK2,IBTRKR,IBTRKRN
"RTN","IBNCPDP4",58,0)
 N IBEABD,IBNBR,DA,DIE,DR,IBUSR
"RTN","IBNCPDP4",59,0)
 S IBLOCK=0
"RTN","IBNCPDP4",60,0)
 I 'DFN S IBRES="0^No patient" G RELQ
"RTN","IBNCPDP4",61,0)
 S IBADT=+$G(IBD("FILL DATE")) I 'IBADT S IBRES="0^No fill date" G RELQ
"RTN","IBNCPDP4",62,0)
 S IBRXN=+$G(IBD("PRESCRIPTION")) I 'IBRXN S IBRES="0^No Rx IEN" G RELQ
"RTN","IBNCPDP4",63,0)
 S IBFIL=+$G(IBD("FILL NUMBER"),-1) I IBFIL<0 S IBRES="0^No fill number" G RELQ
"RTN","IBNCPDP4",64,0)
 S IBRDT=+$G(IBD("RELEASE DATE"),-1) I 'IBRDT S IBRES="0^No release date" G RELQ
"RTN","IBNCPDP4",65,0)
 I '$L($G(IBD("CLAIMID"))) S IBRES="0^Missing ECME Number" G RELQ
"RTN","IBNCPDP4",66,0)
 S IBD("BCID")=$$BCID(IBD("CLAIMID"),IBADT)
"RTN","IBNCPDP4",67,0)
 S IBUSR=$S(+$G(IBD("USER"))=0:DUZ,1:IBD("USER"))
"RTN","IBNCPDP4",68,0)
 L +^DGCR(399,"AG",IBD("BCID")):5 S IBLOCK=$T
"RTN","IBNCPDP4",69,0)
 ; -- claims tracking info
"RTN","IBNCPDP4",70,0)
 S IBTRKR=$G(^IBE(350.9,1,6))
"RTN","IBNCPDP4",71,0)
 ; date can't be before parameters
"RTN","IBNCPDP4",72,0)
 S $P(IBTRKR,"^")=$S('$P(IBTRKR,"^",4):0,+IBTRKR&(IBADT<+IBTRKR):0,1:IBADT)
"RTN","IBNCPDP4",73,0)
 S IBTRKRN=+$O(^IBT(356,"ARXFL",IBRXN,IBFIL,0))
"RTN","IBNCPDP4",74,0)
 I 'IBTRKRN S IBRES="0^No CT record found." G RELQ
"RTN","IBNCPDP4",75,0)
 ;
"RTN","IBNCPDP4",76,0)
 ; Remove NBR from CT and set T+60 (if not billed yet)
"RTN","IBNCPDP4",77,0)
 ; Set ECME flags in CT
"RTN","IBNCPDP4",78,0)
 ;
"RTN","IBNCPDP4",79,0)
 L +^IBT(356,IBTRKRN):5 S IBLOCK2=$T
"RTN","IBNCPDP4",80,0)
 S DIE="^IBT(356,",DA=IBTRKRN,DR=""
"RTN","IBNCPDP4",81,0)
 S IBNBR=+$P($G(^IBT(356,IBTRKRN,0)),U,19)
"RTN","IBNCPDP4",82,0)
 ; Clean up "Rx not released"
"RTN","IBNCPDP4",83,0)
 I IBNBR,$P($G(^IBE(356.8,IBNBR,0)),U)="PRESCRIPTION NOT RELEASED" S DR=DR_".19////@;",IBNBR=""
"RTN","IBNCPDP4",84,0)
 ;
"RTN","IBNCPDP4",85,0)
 ; Set EABD if no bill and no NBR
"RTN","IBNCPDP4",86,0)
 I '$P($G(^IBT(356,IBTRKRN,0)),U,11),'IBNBR D
"RTN","IBNCPDP4",87,0)
 . S IBEABD=$$EABD^IBTUTL($O(^IBE(356.6,"AC",4,0)),IBADT)
"RTN","IBNCPDP4",88,0)
 . S:'IBEABD IBEABD=DT
"RTN","IBNCPDP4",89,0)
 . S IBEABD=$$FMADD^XLFDT(IBEABD,60)
"RTN","IBNCPDP4",90,0)
 . S DR=DR_".17////^S X=IBEABD;"
"RTN","IBNCPDP4",91,0)
 ;
"RTN","IBNCPDP4",92,0)
 ; Set ECME Flags
"RTN","IBNCPDP4",93,0)
 S DR=DR_"1.1////"_IBD("CLAIMID")_";"
"RTN","IBNCPDP4",94,0)
 ; Reject status will not be set here
"RTN","IBNCPDP4",95,0)
 ;
"RTN","IBNCPDP4",96,0)
 ; Check that the Fill Date is current
"RTN","IBNCPDP4",97,0)
 I IBADT'=$P(^IBT(356,IBTRKRN,0),U,6) S DR=DR_".06////"_IBADT_";"
"RTN","IBNCPDP4",98,0)
 ;
"RTN","IBNCPDP4",99,0)
 D ^DIE
"RTN","IBNCPDP4",100,0)
 S IBFDA(356,IBTRKRN_",",1.03)=DT  ; date last edited
"RTN","IBNCPDP4",101,0)
 S IBFDA(356,IBTRKRN_",",1.04)=IBUSR   ; last edited by
"RTN","IBNCPDP4",102,0)
 D FILE^DIE("","IBFDA"),MSG^DIALOG()
"RTN","IBNCPDP4",103,0)
 I IBLOCK2 L -^IBT(356,IBTRKRN)
"RTN","IBNCPDP4",104,0)
 ; 
"RTN","IBNCPDP4",105,0)
 S IBRES=1
"RTN","IBNCPDP4",106,0)
RELQ ;
"RTN","IBNCPDP4",107,0)
 D LOG^IBNCPDP2("RELEASE",IBRES)
"RTN","IBNCPDP4",108,0)
 I IBLOCK L -^DGCR(399,"AG",IBD("BCID"))
"RTN","IBNCPDP4",109,0)
 Q IBRES
"RTN","IBNCPDP4",110,0)
 ;
"RTN","IBNCPDP4",111,0)
SUBMIT(DFN,IBD) ;
"RTN","IBNCPDP4",112,0)
 N IBRES,IBLOCK,IBADT,IBRXN,IBFIL,IBRDT,IBNBR,IBFLAG,IBTRKR,IBTRKRN
"RTN","IBNCPDP4",113,0)
 N IBRESP,DA,DIE,DR,IBUSR
"RTN","IBNCPDP4",114,0)
 S IBLOCK=0
"RTN","IBNCPDP4",115,0)
 I 'DFN S IBRES="0^No patient" G SUBQ
"RTN","IBNCPDP4",116,0)
 S IBADT=+$G(IBD("FILL DATE")) I 'IBADT S IBRES="0^No fill date" G SUBQ
"RTN","IBNCPDP4",117,0)
 S IBRXN=+$G(IBD("PRESCRIPTION")) I 'IBRXN S IBRES="0^No Rx IEN" G SUBQ
"RTN","IBNCPDP4",118,0)
 S IBFIL=+$G(IBD("FILL NUMBER"),-1) I IBFIL<0 S IBRES="0^No fill number" G SUBQ
"RTN","IBNCPDP4",119,0)
 S IBRESP=$G(IBD("RESPONSE")) I IBRESP="" S IBRES="0^No response from the payer" G SUBQ
"RTN","IBNCPDP4",120,0)
 S IBRDT=+$G(IBD("RELEASE DATE"),-1)
"RTN","IBNCPDP4",121,0)
 I '$L($G(IBD("CLAIMID"))) S IBRES="0^Missing ECME Number" G SUBQ
"RTN","IBNCPDP4",122,0)
 S IBD("BCID")=$$BCID(IBD("CLAIMID"),IBADT)
"RTN","IBNCPDP4",123,0)
 S IBUSR=$S(+$G(IBD("USER"))=0:DUZ,1:IBD("USER"))
"RTN","IBNCPDP4",124,0)
 L +^DGCR(399,"AG",IBD("BCID")):5 S IBLOCK=$T
"RTN","IBNCPDP4",125,0)
 ;
"RTN","IBNCPDP4",126,0)
 ; -- claims tracking info
"RTN","IBNCPDP4",127,0)
 S IBTRKR=$G(^IBE(350.9,1,6))
"RTN","IBNCPDP4",128,0)
 ; date can't be before parameters
"RTN","IBNCPDP4",129,0)
 S $P(IBTRKR,"^")=$S('$P(IBTRKR,"^",4):0,+IBTRKR&(IBADT<+IBTRKR):0,1:IBADT)
"RTN","IBNCPDP4",130,0)
 S IBTRKRN=+$O(^IBT(356,"ARXFL",IBRXN,IBFIL,0))
"RTN","IBNCPDP4",131,0)
 ;
"RTN","IBNCPDP4",132,0)
 ; If the Rx is not released - set NBR in CT
"RTN","IBNCPDP4",133,0)
 I 'IBRDT,'$P($G(^IBT(356,IBTRKRN,0)),U,19) D NONBR^IBNCPNB(DFN,IBRXN,IBFIL,IBADT,"PRESCRIPTION NOT RELEASED","","","",IBUSR)
"RTN","IBNCPDP4",134,0)
 ;
"RTN","IBNCPDP4",135,0)
 ; If the Rx is released - clean up NBR in CT
"RTN","IBNCPDP4",136,0)
 I IBRDT,$P($G(^IBE(356.8,+$P($G(^IBT(356,IBTRKRN,0)),U,19),0)),U)="PRESCRIPTION NOT RELEASED" D NONBR^IBNCPNB(DFN,IBRXN,IBFIL,IBADT,"","","","",IBUSR)
"RTN","IBNCPDP4",137,0)
 ; Set ECME fields in CT
"RTN","IBNCPDP4",138,0)
 S DIE="^IBT(356,",DA=IBTRKRN
"RTN","IBNCPDP4",139,0)
 S IBFLAG=$S(IBRESP["REJECT":1,1:0)
"RTN","IBNCPDP4",140,0)
 S DR="1.1///"_IBD("CLAIMID")_";1.11///"_IBFLAG
"RTN","IBNCPDP4",141,0)
 D ^DIE
"RTN","IBNCPDP4",142,0)
 S IBRES=1
"RTN","IBNCPDP4",143,0)
SUBQ ;
"RTN","IBNCPDP4",144,0)
 D LOG^IBNCPDP2("SUBMIT",IBRES)
"RTN","IBNCPDP4",145,0)
 I IBLOCK L -^DGCR(399,"AG",IBD("BCID"))
"RTN","IBNCPDP4",146,0)
 Q IBRES
"RTN","IBNCPDP4",147,0)
 ;
"RTN","IBNCPDP4",148,0)
 ;
"RTN","IBNCPDP4",149,0)
REOPEN(DFN,IBD) ;
"RTN","IBNCPDP4",150,0)
 N IBRES,IBADT,IBRXN,IBFIL,IBRDT,IBLOCK,IBLOCK2,IBTRKRN
"RTN","IBNCPDP4",151,0)
 N IBEABD,IBNBR,DA,DIE,DR,IBUSR,IBEABD
"RTN","IBNCPDP4",152,0)
 S (IBLOCK,IBLOCK2)=0
"RTN","IBNCPDP4",153,0)
 I 'DFN S IBRES="0^No patient" G REOPQ
"RTN","IBNCPDP4",154,0)
 S IBADT=+$G(IBD("FILL DATE")) I 'IBADT S IBRES="0^No fill date" G REOPQ
"RTN","IBNCPDP4",155,0)
 S IBRXN=+$G(IBD("PRESCRIPTION")) I 'IBRXN S IBRES="0^No Rx IEN" G REOPQ
"RTN","IBNCPDP4",156,0)
 S IBFIL=+$G(IBD("FILL NUMBER"),-1) I IBFIL<0 S IBRES="0^No fill number" G REOPQ
"RTN","IBNCPDP4",157,0)
 I '$L($G(IBD("CLAIMID"))) S IBRES="0^Missing ECME Number" G REOPQ
"RTN","IBNCPDP4",158,0)
 S IBRDT=$$RXRLDT^PSOBPSUT(IBRXN,IBFIL)  ; release date (if null is returned then Rx is not released)
"RTN","IBNCPDP4",159,0)
 S IBD("BCID")=$$BCID(IBD("CLAIMID"),IBADT)
"RTN","IBNCPDP4",160,0)
 S IBUSR=$S(+$G(IBD("USER"))=0:DUZ,1:IBD("USER"))
"RTN","IBNCPDP4",161,0)
 L +^DGCR(399,"AG",IBD("BCID")):5 S IBLOCK=$T
"RTN","IBNCPDP4",162,0)
 ;
"RTN","IBNCPDP4",163,0)
 ; re-opening secondary claims should not affect CT - esg 7/9/10
"RTN","IBNCPDP4",164,0)
 I $G(IBD("RXCOB"))>1 S IBRES=1 G REOPQ
"RTN","IBNCPDP4",165,0)
 ;
"RTN","IBNCPDP4",166,0)
 S IBTRKRN=+$O(^IBT(356,"ARXFL",IBRXN,IBFIL,0))  ;get the claim entry associated with the Rx fill (or refill)
"RTN","IBNCPDP4",167,0)
 L +^IBT(356,IBTRKRN):5 S IBLOCK2=$T
"RTN","IBNCPDP4",168,0)
 S DIE="^IBT(356,",DA=IBTRKRN
"RTN","IBNCPDP4",169,0)
 ;
"RTN","IBNCPDP4",170,0)
 I IBRDT D   ; if Rx released assign earliest autobill date 
"RTN","IBNCPDP4",171,0)
 . S IBEABD=$$EABD^IBTUTL($O(^IBE(356.6,"AC",4,0)),IBADT)
"RTN","IBNCPDP4",172,0)
 . S:'IBEABD IBEABD=DT
"RTN","IBNCPDP4",173,0)
 . S IBEABD=$$FMADD^XLFDT(IBEABD,60)
"RTN","IBNCPDP4",174,0)
 ;
"RTN","IBNCPDP4",175,0)
 N IBFDA
"RTN","IBNCPDP4",176,0)
 S IBFDA(356,IBTRKRN_",",.19)=$S('IBRDT:$O(^IBE(356.8,"B","PRESCRIPTION NOT RELEASED","")),1:"@")  ;non-billable reason
"RTN","IBNCPDP4",177,0)
 D FILE^DIE("","IBFDA"),MSG^DIALOG()
"RTN","IBNCPDP4",178,0)
 K IBFDA
"RTN","IBNCPDP4",179,0)
 S IBFDA(356,IBTRKRN_",",.17)=$S('IBRDT:"@",1:IBEABD)  ; earliest autobill date
"RTN","IBNCPDP4",180,0)
 S IBFDA(356,IBTRKRN_",",1.08)="@"  ;additional comments
"RTN","IBNCPDP4",181,0)
 S IBFDA(356,IBTRKRN_",",1.11)=0   ; reject flag - reset to "no"
"RTN","IBNCPDP4",182,0)
 S IBFDA(356,IBTRKRN_",",1.03)=DT  ; date last edited
"RTN","IBNCPDP4",183,0)
 S IBFDA(356,IBTRKRN_",",1.04)=IBUSR   ; last edited by
"RTN","IBNCPDP4",184,0)
 D FILE^DIE("","IBFDA"),MSG^DIALOG()
"RTN","IBNCPDP4",185,0)
 ; 
"RTN","IBNCPDP4",186,0)
 S IBRES=1
"RTN","IBNCPDP4",187,0)
REOPQ ;
"RTN","IBNCPDP4",188,0)
 D LOG^IBNCPDP2("REOPEN",IBRES)
"RTN","IBNCPDP4",189,0)
 I IBLOCK L -^DGCR(399,"AG",IBD("BCID"))
"RTN","IBNCPDP4",190,0)
 I IBLOCK2 L -^IBT(356,IBTRKRN)
"RTN","IBNCPDP4",191,0)
 Q IBRES
"RTN","IBNCPDP4",192,0)
 ;
"RTN","IBNCPDP4",193,0)
BCID(BCID,IBADT) ; changes BCID to always be 7 characters long
"RTN","IBNCPDP4",194,0)
 Q $$RJ^XLFSTR($E(BCID,$L(BCID)-6,$L(BCID)),7,0)_";"_IBADT
"RTN","IBNCPDP5")
0^6^B76631396
"RTN","IBNCPDP5",1,0)
IBNCPDP5 ;ALB/BDB - PROCESSING FOR ECME RESP FOR SECONDARY ;11/15/07 09:43
"RTN","IBNCPDP5",2,0)
 ;;2.0;INTEGRATED BILLING;**411**;21-MAR-94;Build 29
"RTN","IBNCPDP5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPDP5",4,0)
 ;
"RTN","IBNCPDP5",5,0)
BILLSEC(DFN,IBD) ; Create secondary bill
"RTN","IBNCPDP5",6,0)
 ;
"RTN","IBNCPDP5",7,0)
 N IBBCB,IBBCF,IBBCT,IBCAN,IBCCR,IBCDFN,IBCNFN,IBCOB,IBCTCOPY,IBDBC
"RTN","IBNCPDP5",8,0)
 N IBIFN,IBINS,IBINSN,IBOFFSET,IBPLAN,IBY,IBAMT,IBRES
"RTN","IBNCPDP5",9,0)
 ;
"RTN","IBNCPDP5",10,0)
 ;if the primary claim was rejected and we don't have any primary bill for the RX/refill (see IBSEND^BPSECMP2 for additional information)
"RTN","IBNCPDP5",11,0)
 I $G(IBD("PRIMREJ"))=1 D
"RTN","IBNCPDP5",12,0)
 . N IBRX,IBRFL,IBREJ,IBDPR,IBRESUL,IBZARR,IBAR433,IBREJINF,DA,DR,DIE,IBRJ,IBRJCODE
"RTN","IBNCPDP5",13,0)
 . S IBRX=+$G(IBD("PRESCRIPTION"))
"RTN","IBNCPDP5",14,0)
 . S IBRFL=+$G(IBD("FILL NUMBER"))
"RTN","IBNCPDP5",15,0)
 . ;check the case when we are resubmitting the secondary claims that was submitted for rejected primary claim - 
"RTN","IBNCPDP5",16,0)
 . ;then we have already created a "dummy" primary bill and don't want to do this again
"RTN","IBNCPDP5",17,0)
 . I +$$RXBILL^IBNCPUT3(IBRX,IBRFL,"P",,.IBZARR)>0 S IBD("PRIOR PAYMENT")=0,IBD("PRIMARY BILL")=+$O(IBZARR(0)) Q  ;quit if any primary bills exist, set IBD("PRIMARY BILL") to the first existing bill ien
"RTN","IBNCPDP5",18,0)
 . ; create a "dummy" primary bill for the primary claim as it would be a payable primary claim with 0$ amount: 
"RTN","IBNCPDP5",19,0)
 . S IBDPR("PAID")=IBD("PAID")
"RTN","IBNCPDP5",20,0)
 . S IBDPR("PLAN")=IBD("PLAN")
"RTN","IBNCPDP5",21,0)
 . S IBDPR("RTYPE")=IBD("RTYPE")
"RTN","IBNCPDP5",22,0)
 . S IBD("PAID")=0
"RTN","IBNCPDP5",23,0)
 . S IBD("PLAN")=IBD("PRIMPLAN")
"RTN","IBNCPDP5",24,0)
 . S IBD("RTYPE")=""
"RTN","IBNCPDP5",25,0)
 . S IBD("RXCOB")=1
"RTN","IBNCPDP5",26,0)
 . S IBRESUL=$$BILL^IBNCPDP2(DFN,.IBD)
"RTN","IBNCPDP5",27,0)
 . ; the previous step should do contractual adjustment, if not - then we need to do something else here to adjust this amount and close the primary bill
"RTN","IBNCPDP5",28,0)
 . S IBD("PAID")=IBDPR("PAID")
"RTN","IBNCPDP5",29,0)
 . S IBD("PLAN")=IBDPR("PLAN")
"RTN","IBNCPDP5",30,0)
 . S IBD("RTYPE")=IBDPR("RTYPE")
"RTN","IBNCPDP5",31,0)
 . S IBD("RXCOB")=2
"RTN","IBNCPDP5",32,0)
 . S IBD("PRIMARY BILL")=$S(+IBRESUL>1:+IBRESUL,1:"")
"RTN","IBNCPDP5",33,0)
 . S IBD("PRIOR PAYMENT")=0
"RTN","IBNCPDP5",34,0)
 . Q:+IBD("PRIMARY BILL")=0
"RTN","IBNCPDP5",35,0)
 . ; get a reject information from IBD("REJ CODES") (see IBSEND^BPSECMP2) REJS(1,"REJ CODES",1,"08")
"RTN","IBNCPDP5",36,0)
 . S IBREJINF="Auto Dec.: ECME Primary claim rejected - "_$E($$REJINF(.IBD),1,30)
"RTN","IBNCPDP5",37,0)
 . ; put a note with the reject code/reason to AR file #433
"RTN","IBNCPDP5",38,0)
 . S IBAR433=$O(^PRCA(433,"C",+IBD("PRIMARY BILL"),0)) ; ICR# 3336
"RTN","IBNCPDP5",39,0)
 . S DA=IBAR433,DIE="^PRCA(433,",DR="41///"_IBREJINF D ^DIE ; ICR# 3336
"RTN","IBNCPDP5",40,0)
 . ; now quit to continue to create a secondary bill - i.e. allow the rest of the code to do its job
"RTN","IBNCPDP5",41,0)
 . ;
"RTN","IBNCPDP5",42,0)
 ;
"RTN","IBNCPDP5",43,0)
 ;
"RTN","IBNCPDP5",44,0)
 ; bill Tricare copay if applicable
"RTN","IBNCPDP5",45,0)
 I $G(IBD("COPAY")) D BILL^IBNCPDP6($G(IBD("PRESCRIPTION"))_";"_$G(IBD("FILL NUMBER")),IBD("COPAY"),$G(IBD("RTYPE")))
"RTN","IBNCPDP5",46,0)
 ;
"RTN","IBNCPDP5",47,0)
 S IBCAN=2,IBDBC=DT,IBBCB=DUZ,IBCTCOPY=1,IBY=1
"RTN","IBNCPDP5",48,0)
 S IBIFN=$G(IBD("PRIMARY BILL")) I IBIFN="" S IBY="0^Missing the primary bill." G BILLQ
"RTN","IBNCPDP5",49,0)
 S IBPLAN=$G(IBD("PLAN")) I IBPLAN="" S IBY="0^The Secondary Payer is not a valid Insurance Co." G BILLQ
"RTN","IBNCPDP5",50,0)
 S IBCDFN=$$PLANN^IBNCPDPU(DFN,IBD("PLAN"),IBD("FILL DATE"))
"RTN","IBNCPDP5",51,0)
 I 'IBCDFN S IBY="-1^Plan not found in Patient's Profile." G BILLQ
"RTN","IBNCPDP5",52,0)
 S IBCNFN=$P(IBCDFN,"^",2)
"RTN","IBNCPDP5",53,0)
 S IBINSN=+^IBA(355.3,IBPLAN,0) ;insurance company
"RTN","IBNCPDP5",54,0)
 S IBINS=$G(^DIC(36,+IBINSN,0)) I IBINS="" S IBY="0^The Secondary Payer is not a valid Insurance Co." G BILLQ
"RTN","IBNCPDP5",55,0)
 S DIE="^DGCR(399,",DA=IBIFN,DR="102////"_IBINSN_";113////"_IBCNFN D ^DIE K DA,DR,DIE
"RTN","IBNCPDP5",56,0)
 S IBCOB("0",15)="" ;.15 BILL COPIED FROM 
"RTN","IBNCPDP5",57,0)
 S IBCOB("0",21)=$S($G(IBD("RXCOB"))=1:"P",$G(IBD("RXCOB"))=2:"S",1:"P") ;.21 CURRENT BILL PAYER SEQUENCE
"RTN","IBNCPDP5",58,0)
 S IBCOB("M1",5)=IBD("PRIMARY BILL") ;125 PRIMARY BILL # [5P:399]
"RTN","IBNCPDP5",59,0)
 S IBCOB("U2",4)=IBD("PRIOR PAYMENT") ;218 PRIMARY PRIOR PAYMENT [4N]
"RTN","IBNCPDP5",60,0)
 ;
"RTN","IBNCPDP5",61,0)
 S IBBCF=IBIFN ;this is the claim we are copying FROM
"RTN","IBNCPDP5",62,0)
 S IBIDS(.15)=IBIFN K IBIFN
"RTN","IBNCPDP5",63,0)
STEP2 ;
"RTN","IBNCPDP5",64,0)
 S IBND0=^DGCR(399,IBIDS(.15),0) I $D(^("U")) S IBNDU=^("U")
"RTN","IBNCPDP5",65,0)
 ; *** Note - all these fields should also be included in WHERE^IBCCC1
"RTN","IBNCPDP5",66,0)
 F I=2:1:12 S:$P(IBND0,"^",I)]"" IBIDS(I/100)=$P(IBND0,"^",I)
"RTN","IBNCPDP5",67,0)
 F I=16:1:19,21:1:27 S:$P(IBND0,"^",I)]"" IBIDS(I/100)=$P(IBND0,"^",I)
"RTN","IBNCPDP5",68,0)
 F I=151,152,155 S IBIDS(I)=$P(IBNDU,"^",(I-150))
"RTN","IBNCPDP5",69,0)
 S IBIDS(159.5)=$P(IBNDU,U,20)
"RTN","IBNCPDP5",70,0)
 S DFN=IBIDS(.02) D DEM^VADPT
"RTN","IBNCPDP5",71,0)
 ;set rate type
"RTN","IBNCPDP5",72,0)
 I $G(IBD("RXCOB"))=2,$G(IBD("RTYPE")) S IBIDS(.07)=IBD("RTYPE")
"RTN","IBNCPDP5",73,0)
 S PRCASV("SER")=$P($G(^IBE(350.9,1,1)),"^",14)
"RTN","IBNCPDP5",74,0)
 S PRCASV("SITE")=$P($$SITE^VASITE,"^",3),IBNWBL=""
"RTN","IBNCPDP5",75,0)
 D SETUP^PRCASVC3
"RTN","IBNCPDP5",76,0)
 I $S($P(PRCASV("ARREC"),"^")=-1:1,$P(PRCASV("ARBIL"),"^")=-1:1,1:0) S IBY="0^No Billing Record Set up for: "_$P(PRCASV("ARREC"),"^",2)_" "_$P(PRCASV("ARBIL"),"^",2) G BILLQ
"RTN","IBNCPDP5",77,0)
 S IBIDS(.01)=$P(PRCASV("ARBIL"),"-",2)
"RTN","IBNCPDP5",78,0)
 S IBIDS(.17)=$S($D(IBIDS(.17)):IBIDS(.17),1:PRCASV("ARREC"))
"RTN","IBNCPDP5",79,0)
 S IBIDS(.02)=DFN,IBHV("IBIFN")=$S($G(IBIFN):IBIFN,1:$G(IBIDS(.15)))
"RTN","IBNCPDP5",80,0)
 S X=$P($T(WHERE),";;",2) F I=0:0 S I=$O(IBIDS(I)) Q:'I  S X1=$P($E(X,$F(X,I)+1,999),";",1),$P(IBDR($P(X1,"^",1)),"^",$P(X1,"^",2))=IBIDS(I)
"RTN","IBNCPDP5",81,0)
 S IBIFN=PRCASV("ARREC") F I=0,"C","M","M1","S","U","U1" I $D(IBDR(I)) S ^DGCR(399,IBIFN,I)=IBDR(I)
"RTN","IBNCPDP5",82,0)
 D  ; Protect variables;index entry;replace FT if copy/clone and it changes
"RTN","IBNCPDP5",83,0)
 . N IBHOLD,DIE,DR,DA,X,Y
"RTN","IBNCPDP5",84,0)
 . S IBHOLD("FT")=$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBNCPDP5",85,0)
 . S $P(^DGCR(399,0),"^",3)=IBIFN,$P(^(0),"^",4)=$P(^(0),"^",4)+1 D INDEX^IBCCC2
"RTN","IBNCPDP5",86,0)
 . I IBHOLD("FT"),IBHOLD("FT")'=$P($G(^DGCR(399,IBIFN,0)),U,19) S DA=IBIFN,DIE="^DGCR(399,",DR=".19////"_IBHOLD("FT") D ^DIE
"RTN","IBNCPDP5",87,0)
 S IBYN=1
"RTN","IBNCPDP5",88,0)
 S IBBCT=IBIFN ; bill that the old claim was cloned TO.
"RTN","IBNCPDP5",89,0)
 K %,%DT,I,IB,IBA,IBBT,IBIDS,IBNWBL,J,VADM,X,X1,X2,X3,X4,Y
"RTN","IBNCPDP5",90,0)
 ;
"RTN","IBNCPDP5",91,0)
 S IBIFN1=$P(^DGCR(399,IBIFN,0),"^",15) G END:$S(IBIFN1="":1,'$D(^DGCR(399,IBIFN1,0)):1,1:0)
"RTN","IBNCPDP5",92,0)
 ;
"RTN","IBNCPDP5",93,0)
 ;move pure data nodes
"RTN","IBNCPDP5",94,0)
 F I="I1","I2","I3","M1" I $D(^DGCR(399,IBIFN1,I)) S ^DGCR(399,IBIFN,I)=^DGCR(399,IBIFN1,I)
"RTN","IBNCPDP5",95,0)
 ;
"RTN","IBNCPDP5",96,0)
 ;move top level data node. ;Do not move 'TX' node
"RTN","IBNCPDP5",97,0)
 F I="U","U1","U2","U3","UF2","UF3","UF31","C","M" I $D(^DGCR(399,IBIFN1,I)) S IBND(I)=^(I) D @(I_"^IBCCC2")
"RTN","IBNCPDP5",98,0)
 ;
"RTN","IBNCPDP5",99,0)
 ;move multiple level data
"RTN","IBNCPDP5",100,0)
 F I="CC","OC","OP","OT","RC","CP","CV","PRV" I $D(^DGCR(399,IBIFN1,I,0)) D @(I_"^IBCCC2")
"RTN","IBNCPDP5",101,0)
 ;
"RTN","IBNCPDP5",102,0)
 D FTPRV^IBCEU5(IBIFN) ; Ask change prov type if form type not the same
"RTN","IBNCPDP5",103,0)
 D COBCHG^IBCCC2(IBIFN,,.IBCOB)
"RTN","IBNCPDP5",104,0)
 ;
"RTN","IBNCPDP5",105,0)
 D ^IBCCC3 ; copy table files (362.3)
"RTN","IBNCPDP5",106,0)
 ;
"RTN","IBNCPDP5",107,0)
 S I=$G(^DGCR(399,IBIFN1,0)) I $P(I,U,13)=7,$P(I,U,20)=1 D COPYB^IBCDC(IBIFN1,IBIFN) ; update auto bill files
"RTN","IBNCPDP5",108,0)
 D PRIOR^IBCCC2(IBIFN) ; add new bill to previous bills in series, primary/secondary
"RTN","IBNCPDP5",109,0)
 I +$G(IBCTCOPY) N IBAUTO S IBAUTO=1 D PROC^IBCU7A(IBIFN),BILL^IBCRBC(IBIFN),CPTMOD26^IBCU73(IBIFN) D RECALL^DILFD(399,IBIFN_",",DUZ)
"RTN","IBNCPDP5",110,0)
 ;
"RTN","IBNCPDP5",111,0)
END ;
"RTN","IBNCPDP5",112,0)
 K %,%DT,D,DDH,DIC,DGACTDT,DGAMNT,DGBR,DGBRN,DGBSI,DGBSLOS,DGFUNC,DGIFN
"RTN","IBNCPDP5",113,0)
 K DGPCM,DGREV,DGREV00,DGREVHDR,DGRVRCAL,DGXRF1,DFN
"RTN","IBNCPDP5",114,0)
 K I,IB,IBA,IBA1,IBA2,IBAC,IBAD,IBADD1,IBARST,IBBNO,IBBS,IBBT,IBCAN
"RTN","IBNCPDP5",115,0)
 K IBCBCOPY,IBCCC,IBCH,IBCHK,IBCNCOPY,IBCOB,IBDA,IBDD,IBDD1,IBDPT,IBDR
"RTN","IBNCPDP5",116,0)
 K IBDT,IBI,IBI1,IBIDS,IBIFN,IBIFN1,IBIN,IBINS,IBIP,IBLS,IBN,IBND,IBND0
"RTN","IBNCPDP5",117,0)
 K IBNDS,IBNDU,IBO,IBOA,IBOD,IBPROC,IBPTF,IBQUIT,IBREV,IBST,IBU,IBUC
"RTN","IBNCPDP5",118,0)
 K IBUN,IBV,IBV1,IBW,IBWW,IBX,IBYN,IBZZ,J,K
"RTN","IBNCPDP5",119,0)
 K PRCASV,PRCAERCD,PRCAERR,PRCASVC,PRCAT,VA,VADM,VAEL,VAERR,X,X1,X2,X3,X4,Y
"RTN","IBNCPDP5",120,0)
 ;
"RTN","IBNCPDP5",121,0)
 N DA,IBADT,IBDIV,IBDUZ,IBPAID,IBRT,IBTRIC,X
"RTN","IBNCPDP5",122,0)
 S IBIFN=IBBCT,IBADT=IBD("FILL DATE"),IBDIV=+$G(IBD("DIVISION")),IBDUZ=$S($G(IBD("USER")):IBD("USER"),1:DUZ)
"RTN","IBNCPDP5",123,0)
 ;
"RTN","IBNCPDP5",124,0)
 S DIE="^DGCR(399,",DA=IBIFN
"RTN","IBNCPDP5",125,0)
 ; update the primary bill,ECME fields
"RTN","IBNCPDP5",126,0)
 S DR=".17////"_$G(IBD("PRIMARY BILL"))_";460////^S X=IBD(""BCID"")" S:$L($G(IBD("AUTH #"))) DR=DR_";461////^S X=IBD(""AUTH #"")"
"RTN","IBNCPDP5",127,0)
 D ^DIE K DA,DR,DIE
"RTN","IBNCPDP5",128,0)
 ;
"RTN","IBNCPDP5",129,0)
 ; if the primary ECME claim was rejected, then do some Claims Tracking updates
"RTN","IBNCPDP5",130,0)
 ; since this secondary claim is payable  - esg 7/8/10
"RTN","IBNCPDP5",131,0)
 I $G(IBD("PRIMREJ"))=1 D
"RTN","IBNCPDP5",132,0)
 . N IBRXN,IBFIL,IBTRKRN,X,Y,D0,DA,DI,DIC,DICR,DIE,DIG,DIH,DIU,DIV,DIW,DQ,DR
"RTN","IBNCPDP5",133,0)
 . S IBRXN=+$G(IBD("PRESCRIPTION"))
"RTN","IBNCPDP5",134,0)
 . S IBFIL=+$G(IBD("FILL NUMBER"))
"RTN","IBNCPDP5",135,0)
 . D SETCT^IBNCPDP2    ; CT updates saying bill has been billed
"RTN","IBNCPDP5",136,0)
 . I '$G(IBTRKRN) Q
"RTN","IBNCPDP5",137,0)
 . S DIE="^IBT(356,",DA=IBTRKRN
"RTN","IBNCPDP5",138,0)
 . S DR=".19///@"                   ; reason not billable - delete it
"RTN","IBNCPDP5",139,0)
 . S DR=DR_";1.03///"_$$NOW^XLFDT   ; CT date last edited
"RTN","IBNCPDP5",140,0)
 . S DR=DR_";1.04///"_IBDUZ         ; CT last edited by
"RTN","IBNCPDP5",141,0)
 . S DR=DR_";1.11///0"              ; ECME Reject flag is 0 - NO
"RTN","IBNCPDP5",142,0)
 . D ^DIE
"RTN","IBNCPDP5",143,0)
 . Q
"RTN","IBNCPDP5",144,0)
 ;
"RTN","IBNCPDP5",145,0)
 ; need to make sure we have computed charges.
"RTN","IBNCPDP5",146,0)
 D
"RTN","IBNCPDP5",147,0)
 . I $G(IBD("RXCOB"))=2,$G(IBD("RTYPE")) S IBRT=IBD("RTYPE") Q
"RTN","IBNCPDP5",148,0)
 . S IBRT=$$RT^IBNCPDPU(IBD("BCID"))
"RTN","IBNCPDP5",149,0)
 S IBTRIC=$$TRICARE^IBNCPDP6(IBD("BCID"))
"RTN","IBNCPDP5",150,0)
 I '$$CHARGES^IBNCPDP2(IBIFN,IBINSN,+IBRT,$G(IBD("PAID")),IBDIV,IBTRIC,.IBY) G BILLQ
"RTN","IBNCPDP5",151,0)
 ;
"RTN","IBNCPDP5",152,0)
 ; update the authorize/print fields
"RTN","IBNCPDP5",153,0)
 S DIE="^DGCR(399,",DA=IBIFN
"RTN","IBNCPDP5",154,0)
 S DR="9////1;12////"_DT D ^DIE
"RTN","IBNCPDP5",155,0)
 ;
"RTN","IBNCPDP5",156,0)
 ; pass the claim to AR
"RTN","IBNCPDP5",157,0)
 D GVAR^IBCBB,ARRAY^IBCBB1 S PRCASV("APR")=IBDUZ D ^PRCASVC6    ; perform AR checks
"RTN","IBNCPDP5",158,0)
 I 'PRCASV("OKAY") S IBY="-1^Cannot establish receivable in AR (secondary ins)." G BILLQ
"RTN","IBNCPDP5",159,0)
 D REL^PRCASVC     ; accept bill into AR
"RTN","IBNCPDP5",160,0)
 ;
"RTN","IBNCPDP5",161,0)
 ; update the AR status to Active
"RTN","IBNCPDP5",162,0)
 S PRCASV("STATUS")=16
"RTN","IBNCPDP5",163,0)
 D STATUS^PRCASVC1
"RTN","IBNCPDP5",164,0)
 ;
"RTN","IBNCPDP5",165,0)
 ; decrease adjust bill
"RTN","IBNCPDP5",166,0)
 ; Auto decrease from service Bill#,Tran amt,person,reason,Tran date
"RTN","IBNCPDP5",167,0)
 S IBAMT=$G(^DGCR(399,IBIFN,"U1")),IBOFFSET=$P($G(^DGCR(399,IBIFN,"U1")),U,2)
"RTN","IBNCPDP5",168,0)
 S IBPAID=$G(IBD("PAID"))
"RTN","IBNCPDP5",169,0)
 I IBAMT-IBPAID>.01,'IBTRIC D
"RTN","IBNCPDP5",170,0)
 . D DEC^PRCASER1(PRCASV("ARREC"),IBAMT-IBOFFSET-IBPAID,IBDUZ,"Adjust based on secondary ECME amount paid.",IBADT)
"RTN","IBNCPDP5",171,0)
 . I 'IBPAID S PRCASV("STATUS")=22 D STATUS^PRCASVC1 ; collected/closed
"RTN","IBNCPDP5",172,0)
 ;
"RTN","IBNCPDP5",173,0)
 D  ; set the user in 399
"RTN","IBNCPDP5",174,0)
 . N IBI,IBT F IBI=2,5,11,13,15 S IBT(399,IBIFN_",",IBI)=IBDUZ
"RTN","IBNCPDP5",175,0)
 . D FILE^DIE("","IBT")
"RTN","IBNCPDP5",176,0)
 ;
"RTN","IBNCPDP5",177,0)
 ;
"RTN","IBNCPDP5",178,0)
BILLQ ;
"RTN","IBNCPDP5",179,0)
 S IBRES=$S(IBY<0:"0^"_$S($L($P(IBY,"^",2)):$P(IBY,"^",2),1:$P(IBY,"^",3)),$G(IBBCT):+IBBCT,1:IBY)
"RTN","IBNCPDP5",180,0)
 I $G(IBBCT) S IBD("BILL")=IBBCT
"RTN","IBNCPDP5",181,0)
 D LOG^IBNCPDP2("BILL",IBRES)
"RTN","IBNCPDP5",182,0)
 I IBY<0 D BULL^IBNCPEB($G(DFN),.IBD,IBRES,$G(IBBCT))
"RTN","IBNCPDP5",183,0)
 Q IBRES
"RTN","IBNCPDP5",184,0)
 ;
"RTN","IBNCPDP5",185,0)
REJINF(IBREJARR) ;
"RTN","IBNCPDP5",186,0)
 N IBREJINF,IBRJ,IBRJCODE,IBCNT
"RTN","IBNCPDP5",187,0)
 S IBREJINF="",IBCNT=0
"RTN","IBNCPDP5",188,0)
 S IBRJ=0 F  S IBRJ=$O(IBREJARR("REJ CODES",IBRJ)) Q:+IBRJ=0  D
"RTN","IBNCPDP5",189,0)
 . S IBRJCODE="" F  S IBRJCODE=$O(IBREJARR("REJ CODES",IBRJ,IBRJCODE)) Q:IBRJCODE=""  D
"RTN","IBNCPDP5",190,0)
 . . I IBCNT>0 S IBREJINF=IBREJINF_", "
"RTN","IBNCPDP5",191,0)
 . . S IBREJINF=IBREJINF_IBRJCODE_":"_$G(IBREJARR("REJ CODES",IBRJ,IBRJCODE))
"RTN","IBNCPDP5",192,0)
 . . S IBCNT=IBCNT+1
"RTN","IBNCPDP5",193,0)
 Q IBREJINF
"RTN","IBNCPDP5",194,0)
 ;
"RTN","IBNCPDP5",195,0)
WHERE ;;.01^0^1;.02^0^2;.03^0^3;.04^0^4;.05^0^5;.06^0^6;.07^0^7;.08^0^8;.09^0^9;.11^0^11;.12^0^12;.17^0^17;.18^0^18;.19^0^19;.15^0^15;.16^0^16;.21^0^21;.22^0^22;.23^0^23;.24^0^24;.25^0^25;.26^0^26;.27^0^27;151^U^1;152^U^2;155^U^5;159.5^U^20;
"RTN","IBNCPDP5",196,0)
 ;
"RTN","IBNCPDP6")
0^18^B13230978
"RTN","IBNCPDP6",1,0)
IBNCPDP6 ;OAK/ELZ - TRICARE NCPDP TOOLS; 02-AUG-96 ;10/18/07  13:40
"RTN","IBNCPDP6",2,0)
 ;;2.0;INTEGRATED BILLING;**383,384,411**;21-MAR-94;Build 29
"RTN","IBNCPDP6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPDP6",4,0)
 ;
"RTN","IBNCPDP6",5,0)
START(IBKEY,IBELIG,IBRT) ; initial storage done during
"RTN","IBNCPDP6",6,0)
 ; billing determination check (updates allowed)
"RTN","IBNCPDP6",7,0)
 ;  Input:    IBKEY  --  1 ; 2, where
"RTN","IBNCPDP6",8,0)
 ;                         1 = Pointer to the prescription in file #52
"RTN","IBNCPDP6",9,0)
 ;                         2 = Pointer to the refill in file #52.1, or
"RTN","IBNCPDP6",10,0)
 ;                             0 for the original fill
"RTN","IBNCPDP6",11,0)
 ;            IBELIG --  single character indicating elig indicator
"RTN","IBNCPDP6",12,0)
 ;                         V = Veteran
"RTN","IBNCPDP6",13,0)
 ;                         T = Tricare
"RTN","IBNCPDP6",14,0)
 ;            IBRT   --  Rate type pointer to be used for the bill later
"RTN","IBNCPDP6",15,0)
 ;
"RTN","IBNCPDP6",16,0)
 N IBCHTRN,DO,DIC,X,Y,DIE,DA,DR
"RTN","IBNCPDP6",17,0)
 S IBCHTRN=$O(^IBCNR(366.15,"B",IBKEY,0))
"RTN","IBNCPDP6",18,0)
 I 'IBCHTRN D
"RTN","IBNCPDP6",19,0)
 . S DIC="^IBCNR(366.15,",DIC(0)="",X=IBKEY D FILE^DICN
"RTN","IBNCPDP6",20,0)
 . S IBCHTRN=+Y
"RTN","IBNCPDP6",21,0)
 S DIE="^IBCNR(366.15,",DA=IBCHTRN,DR=".02////^S X=IBELIG;.03////^S X=IBRT"
"RTN","IBNCPDP6",22,0)
 D ^DIE
"RTN","IBNCPDP6",23,0)
 Q
"RTN","IBNCPDP6",24,0)
 ;
"RTN","IBNCPDP6",25,0)
BILL(IBKEY,IBCHG,IBRT) ; Create the TRICARE Rx copay charge.
"RTN","IBNCPDP6",26,0)
 ;  Input:    IBKEY  --  1 ; 2, where
"RTN","IBNCPDP6",27,0)
 ;                         1 = Pointer to the prescription in file #52
"RTN","IBNCPDP6",28,0)
 ;                         2 = Pointer to the refill in file #52.1, or
"RTN","IBNCPDP6",29,0)
 ;                             0 for the original fill
"RTN","IBNCPDP6",30,0)
 ;            IBCHG  --  charge amount
"RTN","IBNCPDP6",31,0)
 ;            IBRT   --  rate type on 3rd party (optional)
"RTN","IBNCPDP6",32,0)
 ;
"RTN","IBNCPDP6",33,0)
 N IBCHTRN,IBY,IBATYP,IBSERV,IBDESC,IBUNIT,IBSL,IBFR,DA,DIE,DR,DFN,IBN,IBZ
"RTN","IBNCPDP6",34,0)
 ;
"RTN","IBNCPDP6",35,0)
 S IBY=1
"RTN","IBNCPDP6",36,0)
 I '$G(IBKEY) G BILLQ
"RTN","IBNCPDP6",37,0)
 S IBCHTRN=$O(^IBCNR(366.15,"B",IBKEY,0))
"RTN","IBNCPDP6",38,0)
 I 'IBCHTRN G BILLQ
"RTN","IBNCPDP6",39,0)
 S IBZ=$G(^IBCNR(366.15,IBCHTRN,0))
"RTN","IBNCPDP6",40,0)
 ;
"RTN","IBNCPDP6",41,0)
 ; - Tricare?
"RTN","IBNCPDP6",42,0)
 I $P(IBZ,"^",2)'="T",'$G(IBRT) G BILLQ
"RTN","IBNCPDP6",43,0)
 I $G(IBRT),$P($G(^DGCR(399.3,IBRT,0)),"^")'="TRICARE" G BILLQ
"RTN","IBNCPDP6",44,0)
 ;
"RTN","IBNCPDP6",45,0)
 ; - already billed, need to cancel to bill
"RTN","IBNCPDP6",46,0)
 I $P(IBZ,"^",4) D CANC(IBKEY)
"RTN","IBNCPDP6",47,0)
 ;
"RTN","IBNCPDP6",48,0)
 I $$FILE^IBRXUTL(+IBKEY,.01)="" G BILLQ
"RTN","IBNCPDP6",49,0)
 ;
"RTN","IBNCPDP6",50,0)
 ; - need patient
"RTN","IBNCPDP6",51,0)
 S DFN=$$FILE^IBRXUTL(+IBKEY,2)
"RTN","IBNCPDP6",52,0)
 I 'DFN S IBY="-1^IB002" G BILLQ
"RTN","IBNCPDP6",53,0)
 ;
"RTN","IBNCPDP6",54,0)
 ; - need action type
"RTN","IBNCPDP6",55,0)
 S IBATYP=$O(^IBE(350.1,"E","TRICARE RX COPAY",0))
"RTN","IBNCPDP6",56,0)
 I 'IBATYP S IBY="-1^IB008" G BILLQ
"RTN","IBNCPDP6",57,0)
 ;
"RTN","IBNCPDP6",58,0)
 ; - need facility number
"RTN","IBNCPDP6",59,0)
 I '$$CHECK^IBECEAU(0) S IBY="-1^IB009" G BILLQ
"RTN","IBNCPDP6",60,0)
 ;
"RTN","IBNCPDP6",61,0)
 ; - need the Pharmacy service pointer; get from #350.1 and check it
"RTN","IBNCPDP6",62,0)
 S IBSERV=$P($G(^IBE(350.1,1,0)),"^",4)
"RTN","IBNCPDP6",63,0)
 I '$$SERV^IBARX1(IBSERV) S IBY="-1^IB003" G BILLQ
"RTN","IBNCPDP6",64,0)
 ;
"RTN","IBNCPDP6",65,0)
 ; - need a charge amount
"RTN","IBNCPDP6",66,0)
 S IBCHG=+$G(IBCHG)
"RTN","IBNCPDP6",67,0)
 I 'IBCHG S IBY="-1^IB029" G BILLQ
"RTN","IBNCPDP6",68,0)
 ;
"RTN","IBNCPDP6",69,0)
 ; - set remaining variables
"RTN","IBNCPDP6",70,0)
 S IBDESC="TRICARE RX COPAY",IBUNIT=1
"RTN","IBNCPDP6",71,0)
 S IBSL="52:"_+IBKEY S:$P(IBKEY,";",2) IBSL=IBSL_";1:"_$P(IBKEY,";",2)
"RTN","IBNCPDP6",72,0)
 S IBFR=DT
"RTN","IBNCPDP6",73,0)
 ;
"RTN","IBNCPDP6",74,0)
 ; - add the charge to file #350
"RTN","IBNCPDP6",75,0)
 D ADD^IBECEAU3 I IBY<0 G BILLQ
"RTN","IBNCPDP6",76,0)
 ;
"RTN","IBNCPDP6",77,0)
 ; - release the charge to AR
"RTN","IBNCPDP6",78,0)
 D AR^IBR
"RTN","IBNCPDP6",79,0)
 ;
"RTN","IBNCPDP6",80,0)
 ; - update the rx file (#366.15)
"RTN","IBNCPDP6",81,0)
 S DA=IBCHTRN,DIE="^IBCNR(366.15,",DR=".04////"_IBN D ^DIE K DA,DIE,DR
"RTN","IBNCPDP6",82,0)
 ;
"RTN","IBNCPDP6",83,0)
BILLQ ;
"RTN","IBNCPDP6",84,0)
 I IBY<0 D ERRMSG^IBACVA2(1,2)
"RTN","IBNCPDP6",85,0)
 ;
"RTN","IBNCPDP6",86,0)
 Q
"RTN","IBNCPDP6",87,0)
 ;
"RTN","IBNCPDP6",88,0)
 ;
"RTN","IBNCPDP6",89,0)
CANC(IBKEY) ; Cancel the TRICARE Rx copay charge.
"RTN","IBNCPDP6",90,0)
 ;  Input:    IBKEY  --  1 ; 2, where
"RTN","IBNCPDP6",91,0)
 ;                         1 = Pointer to the prescription in file #52
"RTN","IBNCPDP6",92,0)
 ;                         2 = Pointer to the refill in file #52.1, or
"RTN","IBNCPDP6",93,0)
 ;                             0 for the original fill
"RTN","IBNCPDP6",94,0)
 ;
"RTN","IBNCPDP6",95,0)
 N IBCHTRND,IBDUZ,IBN,IBCRES,DFN,IBSITE,IBFAC,IBND,IBPARNT,IBCANC,IBH,IBCANTR,IBXA,IBATYP,IBSEQNO,IBIL,IBUNIT,IBCHG,IBFR,DIE,DA,DR,IBCHTRN,IBY
"RTN","IBNCPDP6",96,0)
 ;
"RTN","IBNCPDP6",97,0)
 S IBY=1,IBDUZ=DUZ
"RTN","IBNCPDP6",98,0)
 S IBCHTRN=$O(^IBCNR(366.15,"B",IBKEY,0))
"RTN","IBNCPDP6",99,0)
 I 'IBCHTRN G CANCQ
"RTN","IBNCPDP6",100,0)
 S IBCHTRND=$G(^IBCNR(366.15,IBCHTRN,0)),DFN=$$FILE^IBRXUTL(+IBKEY,2)
"RTN","IBNCPDP6",101,0)
 S IBN=+$P(IBCHTRND,"^",4) I 'IBN G CANCQ
"RTN","IBNCPDP6",102,0)
 I '$$CHECK^IBECEAU(0) S IBY="-1^IB009" G CANCQ
"RTN","IBNCPDP6",103,0)
 S IBCRES=$O(^IBE(350.3,"B","RX CANCELLED",0)) S:'IBCRES IBCRES=5
"RTN","IBNCPDP6",104,0)
 ;
"RTN","IBNCPDP6",105,0)
 ; - cancel the charge
"RTN","IBNCPDP6",106,0)
 D CED^IBECEAU4(IBN) I IBY<0 G CANCQ
"RTN","IBNCPDP6",107,0)
 D CANC^IBECEAU4(IBN,IBCRES,1)
"RTN","IBNCPDP6",108,0)
 ;
"RTN","IBNCPDP6",109,0)
 S DIE="^IBCNR(366.15,",DA=IBCHTRN,DR=".04///@" D ^DIE
"RTN","IBNCPDP6",110,0)
CANCQ ;
"RTN","IBNCPDP6",111,0)
 I IBY<0 D ERRMSG^IBACVA2(0,2)
"RTN","IBNCPDP6",112,0)
 ;
"RTN","IBNCPDP6",113,0)
 Q
"RTN","IBNCPDP6",114,0)
 ;
"RTN","IBNCPDP6",115,0)
RT(IBKEY) ; returns rate type previously determined
"RTN","IBNCPDP6",116,0)
 Q $P($G(^IBCNR(366.15,+$O(^IBCNR(366.15,"B",IBKEY,0)),0)),"^",3)
"RTN","IBNCPDP6",117,0)
 ;
"RTN","IBNCPDP6",118,0)
TRICARE(IBKEY) ; returns if the Key is RT Tricare
"RTN","IBNCPDP6",119,0)
 N IBRT
"RTN","IBNCPDP6",120,0)
 S IBRT=+$$RT(IBKEY)
"RTN","IBNCPDP6",121,0)
 Q $S($P($G(^DGCR(399.3,IBRT,0)),"^")["TRICARE":1,1:0)
"RTN","IBNCPDP6",122,0)
 ;
"RTN","IBNCPDP6",123,0)
 ;gets the insurance phone
"RTN","IBNCPDP6",124,0)
 ;input:
"RTN","IBNCPDP6",125,0)
 ; IB36 - ptr to INSURANCE COMPANY File (#36)
"RTN","IBNCPDP6",126,0)
 ;output:
"RTN","IBNCPDP6",127,0)
 ; the phone number
"RTN","IBNCPDP6",128,0)
PHONE(IB36) ;
"RTN","IBNCPDP6",129,0)
 N IB1
"RTN","IBNCPDP6",130,0)
 ;check first CLAIMS (RX) PHONE NUMBER if empty
"RTN","IBNCPDP6",131,0)
 S IB1=$$GET1^DIQ(36,+IB36,.1311,"E")
"RTN","IBNCPDP6",132,0)
 Q:$L(IB1)>0 IB1
"RTN","IBNCPDP6",133,0)
 ;check BILLING PHONE NUMBER if empty - return nothing
"RTN","IBNCPDP6",134,0)
 S IB1=$$GET1^DIQ(36,+IB36,.132,"E")
"RTN","IBNCPDP6",135,0)
 Q IB1
"RTN","IBNCPDP6",136,0)
 ;IBNCPDP6
"RTN","IBNCPDPI")
0^16^B13118799
"RTN","IBNCPDPI",1,0)
IBNCPDPI ;DALOI/SS - ECME SCREEN INSURANCE VIEW AND UTILITIES ;3/6/08  16:21
"RTN","IBNCPDPI",2,0)
 ;;2.0;INTEGRATED BILLING;**276,383,384,411**;21-MAR-94;Build 29
"RTN","IBNCPDPI",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPDPI",4,0)
 ;
"RTN","IBNCPDPI",5,0)
 ;
"RTN","IBNCPDPI",6,0)
EN1(DFN) ;
"RTN","IBNCPDPI",7,0)
 I $G(DFN)'>0 Q
"RTN","IBNCPDPI",8,0)
 N J,POP,START,X,VA,ALMBG,DIC,DT,C,CTRLCOL,DILN
"RTN","IBNCPDPI",9,0)
 ;
"RTN","IBNCPDPI",10,0)
 ;if the user does have IB keys to edit insurances
"RTN","IBNCPDPI",11,0)
 I $D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ))!($D(^XUSEC("IB INSURANCE COMPANY ADD",DUZ))) D  Q
"RTN","IBNCPDPI",12,0)
 . N D1,DA,DDER,DDH,DIE,DR,I
"RTN","IBNCPDPI",13,0)
 . N IBCH,IBCNS,IBCNSEH,IBCNT,IBCPOL,IBDT,IBDUZ,IBFILE,IBLCNT,IBN,IBNEW,IBPPOL
"RTN","IBNCPDPI",14,0)
 . N IBTYP,IBYE,IBCDFN,IBCDFND1,IBCGN
"RTN","IBNCPDPI",15,0)
 . D EN^VALM("IBNCPDP INSURANCE MANAGEMENT")
"RTN","IBNCPDPI",16,0)
 ;if the user doesn't have insurance IB keys
"RTN","IBNCPDPI",17,0)
 D
"RTN","IBNCPDPI",18,0)
 . N D0,IBCAB,IBCDFN,IBCDFND1,IBCNS,IBCNT,IBCPOL,IBDT,IBEXP1
"RTN","IBNCPDPI",19,0)
 . N IBEXP2,IBFILE,IBLCNT,IBN,IBPPOL
"RTN","IBNCPDPI",20,0)
 . D EN1^IBNCPDPV(DFN)
"RTN","IBNCPDPI",21,0)
 Q
"RTN","IBNCPDPI",22,0)
 ;
"RTN","IBNCPDPI",23,0)
INIT ; -- set up initial variables
"RTN","IBNCPDPI",24,0)
 ;DFN should be defined
"RTN","IBNCPDPI",25,0)
 I '$D(DFN) Q
"RTN","IBNCPDPI",26,0)
 S U="^",VALMCNT=0,VALMBG=1
"RTN","IBNCPDPI",27,0)
 K ^TMP("IBNSM",$J),^TMP("IBNSMDX",$J)
"RTN","IBNCPDPI",28,0)
 S IBTYP="P"
"RTN","IBNCPDPI",29,0)
 D BLD^IBCNSM
"RTN","IBNCPDPI",30,0)
 Q
"RTN","IBNCPDPI",31,0)
 ;
"RTN","IBNCPDPI",32,0)
HDR ; -- screen header for initial screen
"RTN","IBNCPDPI",33,0)
 D HDR^IBCNSM
"RTN","IBNCPDPI",34,0)
 Q
"RTN","IBNCPDPI",35,0)
 ;
"RTN","IBNCPDPI",36,0)
HELP ; -- help code
"RTN","IBNCPDPI",37,0)
 Q
"RTN","IBNCPDPI",38,0)
 ;
"RTN","IBNCPDPI",39,0)
EXIT ; -- exit code
"RTN","IBNCPDPI",40,0)
 Q
"RTN","IBNCPDPI",41,0)
 ;
"RTN","IBNCPDPI",42,0)
EXPND ; -- expand code
"RTN","IBNCPDPI",43,0)
 Q
"RTN","IBNCPDPI",44,0)
 ;
"RTN","IBNCPDPI",45,0)
SELINSUR(PRMTMSG,DFLTVAL) ;
"RTN","IBNCPDPI",46,0)
 ;API for ECME (DBIA #4721)
"RTN","IBNCPDPI",47,0)
 ;Insurance Company lookup API
"RTN","IBNCPDPI",48,0)
 ;input:
"RTN","IBNCPDPI",49,0)
 ; PRMTMSG - prompt message
"RTN","IBNCPDPI",50,0)
 ; DFLTVAL - INSURANCE NAME as a default value for the prompt (optional)
"RTN","IBNCPDPI",51,0)
 ;output:
"RTN","IBNCPDPI",52,0)
 ; IEN^INSURANCE_NAME
"RTN","IBNCPDPI",53,0)
 ;   0^  means ALL selected
"RTN","IBNCPDPI",54,0)
 ;  -1^  nothing was selected, timeout expired or uparrow entered
"RTN","IBNCPDPI",55,0)
 ; where: IEN is record number in file #36.
"RTN","IBNCPDPI",56,0)
 ;
"RTN","IBNCPDPI",57,0)
 N Y,DUOUT,DTOUT,IBQUIT,DIROUT
"RTN","IBNCPDPI",58,0)
 S IBQUIT=0
"RTN","IBNCPDPI",59,0)
 N DIC
"RTN","IBNCPDPI",60,0)
 S DIC="^DIC(36,"
"RTN","IBNCPDPI",61,0)
 S DIC(0)="AEMNQ"
"RTN","IBNCPDPI",62,0)
 S:$L($G(DFLTVAL))>0 DIC("B")=DFLTVAL
"RTN","IBNCPDPI",63,0)
 S DIC("A")=PRMTMSG_": "
"RTN","IBNCPDPI",64,0)
 D ^DIC
"RTN","IBNCPDPI",65,0)
 I (Y=-1)!$D(DUOUT)!$D(DTOUT) S IBQUIT=1
"RTN","IBNCPDPI",66,0)
 I IBQUIT=1 Q "-1^"
"RTN","IBNCPDPI",67,0)
 Q Y
"RTN","IBNCPDPI",68,0)
 ;
"RTN","IBNCPDPI",69,0)
RNB(IBRX,IBFL) ; Return the Claims Tracking Reason Not Billable for a Prescription
"RTN","IBNCPDPI",70,0)
 ; API for ECME (DBIA #4729)
"RTN","IBNCPDPI",71,0)
 ; Input:  IBRX - prescription ien (required)
"RTN","IBNCPDPI",72,0)
 ;         IBFL - fill# (required)
"RTN","IBNCPDPI",73,0)
 ; Output:  function value
"RTN","IBNCPDPI",74,0)
 ;                [1] RNB ien (ptr to file# 356.8)
"RTN","IBNCPDPI",75,0)
 ;                [2] RNB description
"RTN","IBNCPDPI",76,0)
 ;                [3] RNB ECME flag
"RTN","IBNCPDPI",77,0)
 ;                [4] RNB ECME paper flag
"RTN","IBNCPDPI",78,0)
 ;                [5] RNB code
"RTN","IBNCPDPI",79,0)
 ;                [6] RNB active/inactive flag
"RTN","IBNCPDPI",80,0)
 ;          or 0 if no CT entry or if CT entry is billable
"RTN","IBNCPDPI",81,0)
 ;
"RTN","IBNCPDPI",82,0)
 N RNB,IBTRKRN
"RTN","IBNCPDPI",83,0)
 S RNB=0
"RTN","IBNCPDPI",84,0)
 S IBTRKRN=+$O(^IBT(356,"ARXFL",+$G(IBRX),+$G(IBFL),0)) I 'IBTRKRN G RNBX
"RTN","IBNCPDPI",85,0)
 S RNB=+$P($G(^IBT(356,IBTRKRN,0)),U,19) I 'RNB G RNBX
"RTN","IBNCPDPI",86,0)
 S RNB=RNB_U_$G(^IBE(356.8,RNB,0))
"RTN","IBNCPDPI",87,0)
RNBX ;
"RTN","IBNCPDPI",88,0)
 Q RNB
"RTN","IBNCPDPI",89,0)
 ;
"RTN","IBNCPDPI",90,0)
BILLINFO(IBRX,IBREF,IBPSEQ) ;
"RTN","IBNCPDPI",91,0)
 ;API for ECME (DBIA #4729)
"RTN","IBNCPDPI",92,0)
 ;Determine Bill# and Account Receivable information about the bill
"RTN","IBNCPDPI",93,0)
 ;input:
"RTN","IBNCPDPI",94,0)
 ; IBRX - pointer to file #52 (internal prescription number)
"RTN","IBNCPDPI",95,0)
 ; IBREF - re-fill number
"RTN","IBNCPDPI",96,0)
 ; IBPSEQ - payer sequence
"RTN","IBNCPDPI",97,0)
 ;output:
"RTN","IBNCPDPI",98,0)
 ;Returns a string of information about the bill requested:
"RTN","IBNCPDPI",99,0)
 ; piece #1:  Bill number (field(#.01) of file (#399))
"RTN","IBNCPDPI",100,0)
 ; piece #2:  Original Amount of bill
"RTN","IBNCPDPI",101,0)
 ; piece #3:  Current Status (pointer to file #430.3)
"RTN","IBNCPDPI",102,0)
 ; piece #4:  Current Balance
"RTN","IBNCPDPI",103,0)
 ; piece #5:  Total Collected
"RTN","IBNCPDPI",104,0)
 ; piece #6:  % Collected Returns null if no data or bill found.
"RTN","IBNCPDPI",105,0)
 ;
"RTN","IBNCPDPI",106,0)
 N IBIEN,IBBNUM,RCRET,IBRETV,IBARR,IBZ
"RTN","IBNCPDPI",107,0)
 I +$G(IBPSEQ)=0 S IBPSEQ=1
"RTN","IBNCPDPI",108,0)
 S RCRET="",IBRETV="",IBIEN=""
"RTN","IBNCPDPI",109,0)
 I IBPSEQ=1 S IBBNUM=$$BILL^IBNCPDPU(IBRX,IBREF) ;get from the CT record
"RTN","IBNCPDPI",110,0)
 ;find secondary bill, return null if none
"RTN","IBNCPDPI",111,0)
 I IBPSEQ=2 S IBZ=$$RXBILL^IBNCPUT3(IBRX,IBREF,"S",,.IBARR) D  Q:+IBIEN=0 "^"  S IBBNUM=$P($G(IBARR(IBIEN)),U)
"RTN","IBNCPDPI",112,0)
 . S IBIEN=$P(IBZ,U,2) Q:+IBIEN>0
"RTN","IBNCPDPI",113,0)
 . ;if there is no active bill then get the latest bill with whatever status
"RTN","IBNCPDPI",114,0)
 . S IBIEN=$O(IBARR(999999999),-1)
"RTN","IBNCPDPI",115,0)
 I IBBNUM]"" D
"RTN","IBNCPDPI",116,0)
 .I IBIEN="" S IBIEN=$O(^DGCR(399,"B",IBBNUM,"")) Q:IBIEN=""
"RTN","IBNCPDPI",117,0)
 .S RCRET=$$BILL^RCJIBFN2(IBIEN)
"RTN","IBNCPDPI",118,0)
 S IBRETV=IBBNUM_U_RCRET
"RTN","IBNCPDPI",119,0)
 Q IBRETV
"RTN","IBNCPDPI",120,0)
 ;
"RTN","IBNCPDPI",121,0)
 ;
"RTN","IBNCPDPI",122,0)
TPJI(DFN) ; entry point for TPJI option of the ECME User Screen
"RTN","IBNCPDPI",123,0)
 I DFN>0 D EN^IBJTLA
"RTN","IBNCPDPI",124,0)
 Q
"RTN","IBNCPDPI",125,0)
 ;
"RTN","IBNCPDPI",126,0)
INSNM(IBINSIEN) ; api to return insurance company name
"RTN","IBNCPDPI",127,0)
 Q $P($G(^DIC(36,+$G(IBINSIEN),0)),"^")
"RTN","IBNCPDPI",128,0)
 ;
"RTN","IBNCPDPI",129,0)
ACPHONE() ; API to return the agent cashier's phone number
"RTN","IBNCPDPI",130,0)
 Q $P($G(^IBE(350.9,1,2)),"^",6)
"RTN","IBNCPDPI",131,0)
 ;
"RTN","IBNCPDPI",132,0)
INSPL(IBPL) ; api to return the insurance company IEN from the plan
"RTN","IBNCPDPI",133,0)
 ; passed in.
"RTN","IBNCPDPI",134,0)
 Q $P($G(^IBA(355.3,+$G(IBPL),0)),"^")
"RTN","IBNCPDPI",135,0)
 ;
"RTN","IBNCPDPI",136,0)
MXTRNS(IBPLID) ; api to return MAXIMUM NCPDP TRANSACTIONS for a plan
"RTN","IBNCPDPI",137,0)
 ; Input: IBPLID = ID from the PLAN file.
"RTN","IBNCPDPI",138,0)
 ; Returns: Numeric value from field 10.1 of Plan file
"RTN","IBNCPDPI",139,0)
 ;          Default's to 1 if undefined.
"RTN","IBNCPDPI",140,0)
 Q:IBPLID="" 1
"RTN","IBNCPDPI",141,0)
 Q:$O(^IBCNR(366.03,"B",$G(IBPLID),0))']"" 1
"RTN","IBNCPDPI",142,0)
 Q $P($G(^IBCNR(366.03,$O(^IBCNR(366.03,"B",$G(IBPLID),0)),10)),"^",10)
"RTN","IBNCPDPI",143,0)
 ;
"RTN","IBNCPDPI",144,0)
EPHON() ; API to return if ePhamracy is on within IB
"RTN","IBNCPDPI",145,0)
 ;   1 FOR Active
"RTN","IBNCPDPI",146,0)
 ;   0 FOR Not Active
"RTN","IBNCPDPI",147,0)
 ;
"RTN","IBNCPDPI",148,0)
 Q +$G(^IBE(350.9,1,11))
"RTN","IBNCPDPI",149,0)
 ;
"RTN","IBNCPDS1")
0^11^B11093951
"RTN","IBNCPDS1",1,0)
IBNCPDS1 ;ALB/BDB - DISPLAY RX COB DETERMINATION ;30-NOV-07
"RTN","IBNCPDS1",2,0)
 ;;2.0;INTEGRATED BILLING;**411**; 21-MAR-94;Build 29
"RTN","IBNCPDS1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPDS1",4,0)
 ;
"RTN","IBNCPDS1",5,0)
% ; -- main entry point to display rx cob determination
"RTN","IBNCPDS1",6,0)
EN ;
"RTN","IBNCPDS1",7,0)
 S U="^"
"RTN","IBNCPDS1",8,0)
 D FULL^VALM1
"RTN","IBNCPDS1",9,0)
 N IBADT,IBQUIT
"RTN","IBNCPDS1",10,0)
 S IBQUIT=0
"RTN","IBNCPDS1",11,0)
 S DIR("?",1)="Enter the date for which you want to see active insurances."
"RTN","IBNCPDS1",12,0)
 S DIR("?",2)="A valid date entry is required, or"
"RTN","IBNCPDS1",13,0)
 S DIR("?")="enter up-arrow ( ^ ) to return to the main display screen."
"RTN","IBNCPDS1",14,0)
 S DIR("A")="FILL DATE",DIR("A",1)=" ",DIR("B")="TODAY",DIR(0)="D"
"RTN","IBNCPDS1",15,0)
 F  D ^DIR Q:$D(DTOUT)!$D(DUOUT)  S IBADT=Y,IBQUIT=1  Q:IBQUIT
"RTN","IBNCPDS1",16,0)
 K DIR
"RTN","IBNCPDS1",17,0)
 G:'IBQUIT COBQ
"RTN","IBNCPDS1",18,0)
 ; -- look up insurance for patient
"RTN","IBNCPDS1",19,0)
 K IBINS S IBINS=0
"RTN","IBNCPDS1",20,0)
 D ALL^IBCNS1(DFN,"IBINS",1,IBADT,1)
"RTN","IBNCPDS1",21,0)
 ;
"RTN","IBNCPDS1",22,0)
 ; -- no pharmacy coverage, quit
"RTN","IBNCPDS1",23,0)
 I '$$PTCOV^IBCNSU3(DFN,IBADT,"PHARMACY",.IBANY) G COBQ
"RTN","IBNCPDS1",24,0)
 D EN^DDIOL("Insurance Co.COB Type of Policy Group     Holder   Effect.  Expires  Elec/Paper","","!!?1")
"RTN","IBNCPDS1",25,0)
 ;
"RTN","IBNCPDS1",26,0)
 S IBX=0
"RTN","IBNCPDS1",27,0)
 F  S IBX=$O(IBINS("S",IBX)) Q:'IBX  D
"RTN","IBNCPDS1",28,0)
 . S IBT=0 F  S IBT=$O(IBINS("S",IBX,IBT)) Q:'IBT  D
"RTN","IBNCPDS1",29,0)
 .. N IBDAT,IBPL,IBINSN,IBPIEN,IBY,IBZ,IBCAT
"RTN","IBNCPDS1",30,0)
 .. S IBQUIT=1
"RTN","IBNCPDS1",31,0)
 .. Q:'$G(IBINS(IBT,0))
"RTN","IBNCPDS1",32,0)
 .. S IBPL=$$GET1^DIQ(2.312,IBT_","_DFN_",",.18,"I") ; plan
"RTN","IBNCPDS1",33,0)
 .. Q:'IBPL
"RTN","IBNCPDS1",34,0)
 .. S IBCAT=$O(^IBE(355.31,"B","PHARMACY","")) I '$G(IBCAT)!'$$PLCOV^IBCNSU3(IBPL,IBADT,IBCAT) Q  ; not covered
"RTN","IBNCPDS1",35,0)
 .. S IBINSN=$$GET1^DIQ(2.312,IBT_","_DFN_",",.01) ; ins name
"RTN","IBNCPDS1",36,0)
 .. S IBPTYPE=$$GET1^DIQ(355.3,IBPL_",",.09) ; plan type
"RTN","IBNCPDS1",37,0)
 .. S IBCOB=$$GET1^DIQ(2.312,IBT_","_DFN_",",.2,"I"),IBCOB=$S(IBCOB=1:"p",IBCOB=2:"s",IBCOB=3:"t",1:"p") ; cob indicator
"RTN","IBNCPDS1",38,0)
 .. S IBGRPN=$$GET1^DIQ(355.3,$$GET1^DIQ(2.312,IBT_","_DFN_",",.18,"I")_",",.04) ; group id
"RTN","IBNCPDS1",39,0)
 .. S IBHOLD=$$GET1^DIQ(2.312,IBT_","_DFN_",",6,"I") ; subscriber id
"RTN","IBNCPDS1",40,0)
 .. S IBHOLD=$S(IBHOLD="v":"SELF",IBHOLD="s":"SPOUSE",IBHOLD="o":"OTHER",1:"")
"RTN","IBNCPDS1",41,0)
 .. S IBEFFDT=$P(IBINS(IBT,0),U,8) I IBEFFDT]"" S IBEFFDT=$$DFORMAT(IBEFFDT) ; effective date
"RTN","IBNCPDS1",42,0)
 .. S IBEXPDT=$P(IBINS(IBT,0),U,4) I IBEXPDT]"" S IBEXPDT=$$DFORMAT(IBEXPDT) ; expiration date
"RTN","IBNCPDS1",43,0)
 .. S IBELEC=$$GET1^DIQ(36,$$GET1^DIQ(2.312,IBT_","_DFN_",",.01,"I")_",",3.01,"I"),IBELEC=$S(IBELEC=0:"P",1:"E") ; electronic transmit
"RTN","IBNCPDS1",44,0)
 .. I IBELEC>0 D  Q:'IBQUIT
"RTN","IBNCPDS1",45,0)
 ... S IBPIEN=$$GET1^DIQ(355.3,$$GET1^DIQ(2.312,IBT_","_DFN_",",.18,"I")_",",6.01,"I")
"RTN","IBNCPDS1",46,0)
 ... I 'IBPIEN S IBQUIT=0 Q  ; Not linked
"RTN","IBNCPDS1",47,0)
 ... D STCHK^IBCNRU1(IBPIEN,.IBY)
"RTN","IBNCPDS1",48,0)
 ... I $E($G(IBY(1)))'="A" S IBQUIT=0 Q  ; not active
"RTN","IBNCPDS1",49,0)
 .. D EN^DDIOL($E(IBINSN,1,10),"","!?1")
"RTN","IBNCPDS1",50,0)
 .. D EN^DDIOL(IBCOB,"","?14")
"RTN","IBNCPDS1",51,0)
 .. D EN^DDIOL($E(IBPTYPE,1,12),"","?18")
"RTN","IBNCPDS1",52,0)
 .. D EN^DDIOL($E(IBGRPN,1,7),"","?33")
"RTN","IBNCPDS1",53,0)
 .. D EN^DDIOL($E(IBHOLD,1,9),"","?43")
"RTN","IBNCPDS1",54,0)
 .. D EN^DDIOL($E(IBEFFDT,1,8),"","?52")
"RTN","IBNCPDS1",55,0)
 .. D EN^DDIOL($E(IBEXPDT,1,8),"","?61")
"RTN","IBNCPDS1",56,0)
 .. D EN^DDIOL(IBELEC,"","?70")
"RTN","IBNCPDS1",57,0)
 ;
"RTN","IBNCPDS1",58,0)
COBQ ;
"RTN","IBNCPDS1",59,0)
 D PAUSE^IBNCPBB("")
"RTN","IBNCPDS1",60,0)
 S VALMBCK="R"
"RTN","IBNCPDS1",61,0)
 Q
"RTN","IBNCPDS1",62,0)
 ;
"RTN","IBNCPDS1",63,0)
DFORMAT(DF) ; Format date with slashes
"RTN","IBNCPDS1",64,0)
 Q $E(DF,4,5)_"/"_$E(DF,6,7)_"/"_$E(DF,2,3)
"RTN","IBNCPDS1",65,0)
 ; end of IBNCPDS1
"RTN","IBNCPEV")
0^12^B84818902
"RTN","IBNCPEV",1,0)
IBNCPEV ;DALOI/SS - NCPDP BILLING EVENTS REPORT ;5/22/08  14:27
"RTN","IBNCPEV",2,0)
 ;;2.0;INTEGRATED BILLING;**342,363,383,384,411**;21-MAR-94;Build 29
"RTN","IBNCPEV",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPEV",4,0)
RPT ;
"RTN","IBNCPEV",5,0)
 N IBBDT,IBDIVS,IBDTL,IBEDT,IBM1,IBM2,IBM3,IBPAGE,IBPAT,IBQ,IBRX,IBSCR,Y
"RTN","IBNCPEV",6,0)
 N IBECME
"RTN","IBNCPEV",7,0)
 D SETVARS^IBNCPEV1
"RTN","IBNCPEV",8,0)
 Q:IBQ
"RTN","IBNCPEV",9,0)
 D START
"RTN","IBNCPEV",10,0)
 D ^%ZISC
"RTN","IBNCPEV",11,0)
 I IBQ W !,"Cancelled"
"RTN","IBNCPEV",12,0)
 Q
"RTN","IBNCPEV",13,0)
 ;
"RTN","IBNCPEV",14,0)
START ;
"RTN","IBNCPEV",15,0)
 N IBFN,IBFROM,IBI,IBN,IBNB,IBNDX,IBNUM,IBRX1,IBSC,IBTO,IB1ST,REF,X,Z,Z1
"RTN","IBNCPEV",16,0)
 ;Constants
"RTN","IBNCPEV",17,0)
 S IBSC="STATUS CHECK",IBNB="Not ECME billable: ",IBNDX="IBNCPDP-"
"RTN","IBNCPEV",18,0)
 ;get the first date
"RTN","IBNCPEV",19,0)
 S IBFROM=$O(^IBCNR(366.14,"B",IBBDT-1)) Q:+IBFROM=0
"RTN","IBNCPEV",20,0)
 ;get the last date
"RTN","IBNCPEV",21,0)
 S IBTO=$O(^IBCNR(366.14,"B",IBEDT+1),-1) Q:+IBTO=0
"RTN","IBNCPEV",22,0)
 ;
"RTN","IBNCPEV",23,0)
 S REF=$NA(^TMP($J,"IBNCPDPE"))
"RTN","IBNCPEV",24,0)
 ;
"RTN","IBNCPEV",25,0)
 K @REF
"RTN","IBNCPEV",26,0)
 ;
"RTN","IBNCPEV",27,0)
 I +$G(IBECME) S IBRX=$$GETRX^IBNCPEV1(IBECME,IBFROM,IBTO) I 'IBRX  W !!,"No data found for the specified date range and ECME #" Q  ; no match with ECME #
"RTN","IBNCPEV",28,0)
 ;collect
"RTN","IBNCPEV",29,0)
 N IBDFN,IBDTIEN,IBEVNT,IBP4,IBRXIEN,IBZ0,IBZ1,IBZ2
"RTN","IBNCPEV",30,0)
 S IBI=IBFROM-1
"RTN","IBNCPEV",31,0)
 F  S IBI=$O(^IBCNR(366.14,"B",IBI)) Q:+IBI=0  Q:IBI>IBTO  D
"RTN","IBNCPEV",32,0)
 . S IBDTIEN=$O(^IBCNR(366.14,"B",IBI,0))
"RTN","IBNCPEV",33,0)
 . S IBN=0 F  S IBN=$O(^IBCNR(366.14,IBDTIEN,1,IBN)) Q:+IBN=0  D
"RTN","IBNCPEV",34,0)
 . . S IBZ0=$G(^IBCNR(366.14,IBDTIEN,1,IBN,0))
"RTN","IBNCPEV",35,0)
 . . ;if not "ALL" was selected IBDIVS>0 AND the division in #366.14 record is among those selected by the user
"RTN","IBNCPEV",36,0)
 . . I IBDIVS>0,$$CHECKDIV^IBNCPEV1(+$P(IBZ0,U,9),.IBDIVS)=0 Q
"RTN","IBNCPEV",37,0)
 . . S IBDFN=+$P(IBZ0,U,3)
"RTN","IBNCPEV",38,0)
 . . Q:IBDFN=0
"RTN","IBNCPEV",39,0)
 . . S IBEVNT=$$GET1^DIQ(366.141,IBN_","_IBDTIEN_",",.01)
"RTN","IBNCPEV",40,0)
 . . S IBZ2=$G(^IBCNR(366.14,IBDTIEN,1,IBN,2))
"RTN","IBNCPEV",41,0)
 . . S IBRXIEN=$P(IBZ2,U,12)
"RTN","IBNCPEV",42,0)
 . . I IBRXIEN="" S IBRXIEN=$P(IBZ2,U,1)
"RTN","IBNCPEV",43,0)
 . . I IBPAT,IBDFN'=IBPAT Q
"RTN","IBNCPEV",44,0)
 . . I IBM2="E",IBEVNT[IBSC,'$P(IBZ0,U,7) Q
"RTN","IBNCPEV",45,0)
 . . I IBM2="N",IBEVNT'[IBSC Q
"RTN","IBNCPEV",46,0)
 . . I IBM2="N",IBEVNT[IBSC,$P(IBZ0,U,7) Q
"RTN","IBNCPEV",47,0)
 . . ;if "No Rx IEN" case then create a unique artificial IBRXIEN to be able
"RTN","IBNCPEV",48,0)
 . . ;to create ^TMP entry and display available information in the report
"RTN","IBNCPEV",49,0)
 . . I +$G(IBRXIEN)=0 S IBRXIEN=+(IBDTIEN_"."_IBN) G SETTMP
"RTN","IBNCPEV",50,0)
 . . I IBRX,IBRXIEN'=IBRX Q
"RTN","IBNCPEV",51,0)
 . . I $$RXNUM(IBRXIEN)="" Q
"RTN","IBNCPEV",52,0)
 . . I IBM3'="A",IBM3'=$$RXWMC^IBNCPRR(+IBRXIEN) Q
"RTN","IBNCPEV",53,0)
SETTMP . . S @REF@(+IBRXIEN,+$P(IBZ2,U,3),IBDTIEN,IBN)=""
"RTN","IBNCPEV",54,0)
 ;
"RTN","IBNCPEV",55,0)
 I '$D(@REF) W !!,"No data found for the specified input criteria" Q
"RTN","IBNCPEV",56,0)
 ;print
"RTN","IBNCPEV",57,0)
 S IBNUM=0
"RTN","IBNCPEV",58,0)
 U IO D HDR
"RTN","IBNCPEV",59,0)
 S IBRX1="" F  S IBRX1=$O(@REF@(IBRX1)) Q:IBRX1=""  D  Q:IBQ
"RTN","IBNCPEV",60,0)
 .S IBFN="" F  S IBFN=$O(@REF@(IBRX1,IBFN)) Q:IBFN=""  D  Q:IBQ
"RTN","IBNCPEV",61,0)
 ..S IB1ST=1
"RTN","IBNCPEV",62,0)
 ..S IBI="" F  S IBI=$O(@REF@(IBRX1,IBFN,IBI)) Q:IBI=""  D  Q:IBQ
"RTN","IBNCPEV",63,0)
 ...S IBN="" F  S IBN=$O(@REF@(IBRX1,IBFN,IBI,IBN)) Q:IBN=""  D  Q:IBQ
"RTN","IBNCPEV",64,0)
 ....N IBZ,IBD1,IBD2,IBD3,IBD4,IBD7,IBINS,IBY
"RTN","IBNCPEV",65,0)
 ....;load main
"RTN","IBNCPEV",66,0)
 ....S IBZ=$G(^IBCNR(366.14,IBI,1,IBN,0))
"RTN","IBNCPEV",67,0)
 ....;load IBD array
"RTN","IBNCPEV",68,0)
 ....S IBD1=$G(^IBCNR(366.14,IBI,1,IBN,1))
"RTN","IBNCPEV",69,0)
 ....S IBD2=$G(^IBCNR(366.14,IBI,1,IBN,2))
"RTN","IBNCPEV",70,0)
 ....S IBD3=$G(^IBCNR(366.14,IBI,1,IBN,3))
"RTN","IBNCPEV",71,0)
 ....S IBD4=$G(^IBCNR(366.14,IBI,1,IBN,4))
"RTN","IBNCPEV",72,0)
 ....S IBD7=$G(^IBCNR(366.14,IBI,1,IBN,7))
"RTN","IBNCPEV",73,0)
 ....S IBY=0
"RTN","IBNCPEV",74,0)
 ....;load insurance multiple
"RTN","IBNCPEV",75,0)
 ....F  S IBY=$O(^IBCNR(366.14,IBI,1,IBN,5,IBY)) Q:+IBY=0  D
"RTN","IBNCPEV",76,0)
 .....S IBINS(IBY,0)=$G(^IBCNR(366.14,IBI,1,IBN,5,IBY,0))
"RTN","IBNCPEV",77,0)
 .....S IBINS(IBY,1)=$G(^IBCNR(366.14,IBI,1,IBN,5,IBY,1))
"RTN","IBNCPEV",78,0)
 .....S IBINS(IBY,2)=$G(^IBCNR(366.14,IBI,1,IBN,5,IBY,2))
"RTN","IBNCPEV",79,0)
 .....S IBINS(IBY,3)=$G(^IBCNR(366.14,IBI,1,IBN,5,IBY,3))
"RTN","IBNCPEV",80,0)
 ....;
"RTN","IBNCPEV",81,0)
 ....I IB1ST D  Q:IBQ
"RTN","IBNCPEV",82,0)
 .....S IBNUM=IBNUM+1 I IBNUM>1 D ULINE("-") Q:IBQ
"RTN","IBNCPEV",83,0)
 .....D CHKP Q:IBQ
"RTN","IBNCPEV",84,0)
 .....W !,IBNUM," ",?4,$$RXNUM(IBRX1)," ",?12,IBFN," ",?16,$$DAT(+$P(IBD2,U,6)) ;RX# Fill# Fill_date
"RTN","IBNCPEV",85,0)
 .....W " ",?28,$E($$PAT(+$P(IBZ,U,3)),1,21)," ",?50,$E($$DRUG(+$P(IBZ,U,3),IBRX1),1,30)
"RTN","IBNCPEV",86,0)
 .....S IB1ST=0
"RTN","IBNCPEV",87,0)
 ....N IND S IND=6
"RTN","IBNCPEV",88,0)
 ....D CHKP Q:IBQ
"RTN","IBNCPEV",89,0)
 ....S IBEVNT=$$GET1^DIQ(366.141,IBN_","_IBI_",",.01)
"RTN","IBNCPEV",90,0)
 ....W !,?IND,$$EVNT(IBEVNT)," ",?16,$$TIM($P(IBZ,U,5)),?31," Status:",$E($$STAT(IBEVNT,$P(IBZ,U,7)_U_$P(IBZ,U,8),$P(IBD3,U,7),$P(IBD3,U,1)),1,40)
"RTN","IBNCPEV",91,0)
 ....Q:'IBDTL  ; no details
"RTN","IBNCPEV",92,0)
 ....I IBEVNT="BILL" D DBILL Q
"RTN","IBNCPEV",93,0)
 ....I IBEVNT="REJECT" D DREJ Q
"RTN","IBNCPEV",94,0)
 ....I IBEVNT["REVERSE" D DREV Q
"RTN","IBNCPEV",95,0)
 ....I IBEVNT["SUBMIT" D DSUB Q
"RTN","IBNCPEV",96,0)
 ....I IBEVNT["CLOSE" D DCLO Q
"RTN","IBNCPEV",97,0)
 ....I IBEVNT["REOPEN" D REOPEN^IBNCPEV1 Q
"RTN","IBNCPEV",98,0)
 ....I IBEVNT["RELEASE" D DREL Q
"RTN","IBNCPEV",99,0)
 ....I IBEVNT[IBSC D DSTAT^IBNCPEV1(.IBD2,.IBD3,.IBD4,.IBINS,.IBD7) Q
"RTN","IBNCPEV",100,0)
 ....I IBEVNT["BILL CANCELLED" D BCANC Q
"RTN","IBNCPEV",101,0)
 I IBSCR,'IBQ W !,"End of report, press RETURN to continue." R X:DTIME
"RTN","IBNCPEV",102,0)
 K @REF
"RTN","IBNCPEV",103,0)
 Q
"RTN","IBNCPEV",104,0)
 ;
"RTN","IBNCPEV",105,0)
STAT(X,RES,CR,IBIFN) ;provides STATUS information
"RTN","IBNCPEV",106,0)
 N IBNL,IBSC
"RTN","IBNCPEV",107,0)
 S IBNL="Plan not linked to the Payer",IBSC="STATUS CHECK"
"RTN","IBNCPEV",108,0)
 I X[IBSC,RES[IBNB S RES="0^"_$P(RES,IBNB,2)
"RTN","IBNCPEV",109,0)
 I X[IBSC,RES[IBNL S RES="0^Plan not linked" ; shorten too long line
"RTN","IBNCPEV",110,0)
 I X[IBSC,'RES,RES["Non-Billable in CT" Q $P(RES,U,2)
"RTN","IBNCPEV",111,0)
 I X[IBSC Q $S(RES:"",1:"non-")_"ECME Billable"_$S(RES:"",$P(RES,U,2)="":"",$P(RES,U,2)="NEEDS SC DETERMINATION":" NEEDS "_$$GETNOANS^IBNCPEV1(IBD4)_" DETERMINATION",1:", "_$P(RES,U,2))
"RTN","IBNCPEV",112,0)
 I X="BILL",'RES,IBIFN Q "Bill "_$$BILL(IBIFN)_" created with ERRORs"
"RTN","IBNCPEV",113,0)
 I X="BILL",'RES Q "Error: "_$P(RES,U,2)
"RTN","IBNCPEV",114,0)
 I X="BILL",'IBIFN Q $P(RES,U,2)
"RTN","IBNCPEV",115,0)
 I X="BILL" Q "Bill# "_$$BILL(+IBIFN)_" created"
"RTN","IBNCPEV",116,0)
 I X["REVERSE",$G(CR)=7,RES=1 Q "set N/B Reason: Rx deleted, no Bill to cancel."
"RTN","IBNCPEV",117,0)
 I X["REVERSE" Q $S(RES=1:"success",RES>1:"Bill# "_$$BILL(+RES)_" cancelled",'RES:"ECME Claim reversed, no Bill to cancel",1:$P(RES,U,2))
"RTN","IBNCPEV",118,0)
 I 'RES Q $P(RES,U,2)
"RTN","IBNCPEV",119,0)
 Q "OK"
"RTN","IBNCPEV",120,0)
 ;
"RTN","IBNCPEV",121,0)
 ;BILL section
"RTN","IBNCPEV",122,0)
 ;input params IBD*, IBZ, IBINS*
"RTN","IBNCPEV",123,0)
DBILL ;
"RTN","IBNCPEV",124,0)
 I '$P(IBZ,U,7),$L($P(IBZ,U,8)),$P(IBD3,U,1) D CHKP Q:IBQ  W !?10,"ERROR DESCRIPTION: ",$P(IBZ,U,8)
"RTN","IBNCPEV",125,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",126,0)
 D SUBHDR
"RTN","IBNCPEV",127,0)
 I $P(IBD2,U,4) D CHKP Q:IBQ  W !?10,"DRUG:",$$DRUGAPI^IBNCPEV1(+$P(IBD2,U,4),.01)
"RTN","IBNCPEV",128,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",129,0)
 W !,?10,"NDC:",$S($P(IBD2,U,5):$P(IBD2,U,5),1:"No"),", BILLED QTY:",$S($P(IBD2,U,8):$P(IBD2,U,8),1:"No"),", DAYS SUPPLY:",$S($P(IBD2,U,9):$P(IBD2,U,9),1:"No")
"RTN","IBNCPEV",130,0)
 W !,?10,"BILLED:",$J($P(IBD3,U,2),0,2),", "
"RTN","IBNCPEV",131,0)
 W "PAID:",$J($P(IBD3,U,5),0,2)
"RTN","IBNCPEV",132,0)
 W:$P(IBD3,U,11) ", 3RD PARTY REPORTED COPAY:",$J($P(IBD3,U,11),0,2)
"RTN","IBNCPEV",133,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",134,0)
 W !?10,"PLAN:",$P($G(^IBA(355.3,+$P(IBD3,U,3),0)),U,3),", INSURANCE: ",$P($G(^DIC(36,+$G(^IBA(355.3,+$P(IBD3,U,3),0)),0)),U)
"RTN","IBNCPEV",135,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",136,0)
 D DISPUSR
"RTN","IBNCPEV",137,0)
 Q
"RTN","IBNCPEV",138,0)
 ;
"RTN","IBNCPEV",139,0)
 ;reject section
"RTN","IBNCPEV",140,0)
DREJ ;
"RTN","IBNCPEV",141,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",142,0)
 D SUBHDR
"RTN","IBNCPEV",143,0)
 I +$P(IBD3,U,3) D CHKP Q:IBQ  W !?10,"PLAN:",$P($G(^IBA(355.3,+$P(IBD3,U,3),0)),U,3),", INSURANCE: ",$P($G(^DIC(36,+$G(^IBA(355.3,+$P(IBD3,U,3),0)),0)),U)
"RTN","IBNCPEV",144,0)
 D CLRS Q:IBQ
"RTN","IBNCPEV",145,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",146,0)
 D DISPUSR
"RTN","IBNCPEV",147,0)
 Q
"RTN","IBNCPEV",148,0)
 ;close
"RTN","IBNCPEV",149,0)
DCLO ;
"RTN","IBNCPEV",150,0)
 D DREJ
"RTN","IBNCPEV",151,0)
 Q
"RTN","IBNCPEV",152,0)
 ;submit
"RTN","IBNCPEV",153,0)
DSUB ;
"RTN","IBNCPEV",154,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",155,0)
 D SUBHDR
"RTN","IBNCPEV",156,0)
 I $L($P(IBD1,U,6)) D CHKP W !?10,"PAYER RESPONSE: ",$P(IBD1,U,6)
"RTN","IBNCPEV",157,0)
 I $L($P(IBD3,U,3)) D CHKP Q:IBQ  W !?10,"PLAN:",$P($G(^IBA(355.3,+$P(IBD3,U,3),0)),U,3),", INSURANCE: ",$P($G(^DIC(36,+$G(^IBA(355.3,+$P(IBD3,U,3),0)),0)),U)
"RTN","IBNCPEV",158,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",159,0)
 D DISPUSR
"RTN","IBNCPEV",160,0)
 Q
"RTN","IBNCPEV",161,0)
 ;release
"RTN","IBNCPEV",162,0)
DREL ;
"RTN","IBNCPEV",163,0)
 D DREJ
"RTN","IBNCPEV",164,0)
 Q
"RTN","IBNCPEV",165,0)
 ;reverse
"RTN","IBNCPEV",166,0)
DREV ;
"RTN","IBNCPEV",167,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",168,0)
 D SUBHDR
"RTN","IBNCPEV",169,0)
 I $L($P(IBD1,U,6)),$E($P(IBD1,U,6),1)'="A"&($E($P(IBD1,U,6),1)'="R") S $P(IBD1,U,6)=""  ; only display accepted and rejected on REVERSALS
"RTN","IBNCPEV",170,0)
 I $L($P(IBD1,U,6)) D CHKP W !?10,"PAYER RESPONSE: ",$P(IBD1,U,6)
"RTN","IBNCPEV",171,0)
 I $L($P(IBD3,U,3)) D CHKP Q:IBQ  W !?10,"PLAN:",$P($G(^IBA(355.3,+$P(IBD3,U,3),0)),U,3),", INSURANCE: ",$P($G(^DIC(36,+$G(^IBA(355.3,+$P(IBD3,U,3),0)),0)),U)
"RTN","IBNCPEV",172,0)
 D CLRS Q:IBQ
"RTN","IBNCPEV",173,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",174,0)
 D DISPUSR
"RTN","IBNCPEV",175,0)
 W !?10,"REVERSAL REASON:",$P(IBD1,U,7)
"RTN","IBNCPEV",176,0)
 Q
"RTN","IBNCPEV",177,0)
 ;
"RTN","IBNCPEV",178,0)
BCANC ; bill cancellation generated by auto-reversal (duplicate bill)
"RTN","IBNCPEV",179,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",180,0)
 W !?10,"SYSTEM FOUND DUPLICATE BILL WHILE PROCESSING CLAIM"
"RTN","IBNCPEV",181,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",182,0)
 D DISPUSR
"RTN","IBNCPEV",183,0)
 Q
"RTN","IBNCPEV",184,0)
 ;
"RTN","IBNCPEV",185,0)
RELT(X) I X W ",",?45,"RELEASE DATE:",$$TIM(X)
"RTN","IBNCPEV",186,0)
 Q
"RTN","IBNCPEV",187,0)
CLRS ;
"RTN","IBNCPEV",188,0)
 N TX,PP,RC
"RTN","IBNCPEV",189,0)
 S TX="CLOSE REASON"
"RTN","IBNCPEV",190,0)
 S PP="DROP TO PAPER"
"RTN","IBNCPEV",191,0)
 S RC="RELEASE COPAY"
"RTN","IBNCPEV",192,0)
 I $P(IBD3,U,7)'="" D CHKP Q:IBQ  W !?10,TX,":",$$REASON^IBNCPDPU($P(IBD3,U,7)) W:$P(IBD3,U,8) ", ",PP W:$P(IBD3,U,9) ", ",RC
"RTN","IBNCPEV",193,0)
 S TX="CLOSE COMMENT"
"RTN","IBNCPEV",194,0)
 I $L($P(IBD3,U,6))>2 D CHKP Q:IBQ  W !?10,"COMMENT:",$P(IBD3,U,6)
"RTN","IBNCPEV",195,0)
 Q
"RTN","IBNCPEV",196,0)
 ;
"RTN","IBNCPEV",197,0)
HDR ;header
"RTN","IBNCPEV",198,0)
 W @IOF S IBPAGE=IBPAGE+1 W ?72,"PAGE ",IBPAGE
"RTN","IBNCPEV",199,0)
 W !,$$DISPTITL^IBNCPEV1(IBBDT,IBEDT,IBDTL,.IBDIVS)
"RTN","IBNCPEV",200,0)
 W:IBDIVS'=0 !,$$DISPLDIV^IBNCPEV1(.IBDIVS)
"RTN","IBNCPEV",201,0)
 W !?15
"RTN","IBNCPEV",202,0)
 I IBM1="R" W "SINGLE PRESCRIPTION - ",$$RXNUM(IBRX),"  "
"RTN","IBNCPEV",203,0)
 I IBM1="P" W "SINGLE PATIENT - ",$P($G(^DPT(IBPAT,0)),U),"  "
"RTN","IBNCPEV",204,0)
 I IBM1="E" W "SINGLE ECME # - ",IBECME
"RTN","IBNCPEV",205,0)
 I IBM2="E" W "ECME BILLABLE RX  "
"RTN","IBNCPEV",206,0)
 I IBM2="N" W "NON ECME BILLABLE RX  "
"RTN","IBNCPEV",207,0)
 I IBM3'="A",IBM1'="R" W $S(IBM3="M":"MAIL",IBM3="C":"CMOP",1:"WINDOW")_" PRESCRIPTIONS ONLY"
"RTN","IBNCPEV",208,0)
 W !,?4," RX#   FILL  DATE       PATIENT NAME",?55,"DRUG"
"RTN","IBNCPEV",209,0)
 N I W ! F I=1:1:80 W "="
"RTN","IBNCPEV",210,0)
 Q
"RTN","IBNCPEV",211,0)
 ;
"RTN","IBNCPEV",212,0)
ULINE(X) ;line
"RTN","IBNCPEV",213,0)
 D CHKP Q:IBQ
"RTN","IBNCPEV",214,0)
 N I W ! F I=1:1:80 W $G(X,"-")
"RTN","IBNCPEV",215,0)
 Q
"RTN","IBNCPEV",216,0)
CHKP ;Check for EOP
"RTN","IBNCPEV",217,0)
 N Y
"RTN","IBNCPEV",218,0)
 I $Y>(IOSL-4) D:IBSCR PAUSE Q:IBQ  D HDR
"RTN","IBNCPEV",219,0)
 Q
"RTN","IBNCPEV",220,0)
DAT(X,Y) Q $$DAT1^IBOUTL(X,.Y)
"RTN","IBNCPEV",221,0)
TIM(X) N IBT ;time
"RTN","IBNCPEV",222,0)
 S IBT=$$DAT1^IBOUTL(X,1) I $L(IBT," ")<3 Q IBT
"RTN","IBNCPEV",223,0)
 I $P(IBT," ",3)="pm" S IBT=$P(IBT," ",1,2)_"p" Q IBT
"RTN","IBNCPEV",224,0)
 I $P(IBT," ",3)="am" S IBT=$P(IBT," ",1,2)_"a" Q IBT
"RTN","IBNCPEV",225,0)
 Q IBT
"RTN","IBNCPEV",226,0)
 ;
"RTN","IBNCPEV",227,0)
USR(X) ;
"RTN","IBNCPEV",228,0)
 I $D(^VA(200,+X,0)) Q $P(^(0),U)
"RTN","IBNCPEV",229,0)
 Q X
"RTN","IBNCPEV",230,0)
 ;
"RTN","IBNCPEV",231,0)
PAT(DFN) ;
"RTN","IBNCPEV",232,0)
 Q $P($G(^DPT(DFN,0),"?"),"^")
"RTN","IBNCPEV",233,0)
BILL(BN) ;
"RTN","IBNCPEV",234,0)
 Q $P($G(^DGCR(399,BN,0),"?"),"^")
"RTN","IBNCPEV",235,0)
ARBILL(BN) ;
"RTN","IBNCPEV",236,0)
 Q $P($G(^PRCA(430,BN,0),"?"),"^")
"RTN","IBNCPEV",237,0)
 ;
"RTN","IBNCPEV",238,0)
 ;Returns DRUG name (#50,.01)
"RTN","IBNCPEV",239,0)
 ;IBDFN = IEN in PATIENT file #2
"RTN","IBNCPEV",240,0)
 ;IBRX = IEN in PRESCRIPTION file #52
"RTN","IBNCPEV",241,0)
DRUG(IBDFN,IBRX) ;
"RTN","IBNCPEV",242,0)
 I +$G(IBDFN)=0 Q ""
"RTN","IBNCPEV",243,0)
 N X1
"RTN","IBNCPEV",244,0)
 K ^TMP($J,"IBNCPDP52")
"RTN","IBNCPEV",245,0)
 D RX^PSO52API(IBDFN,"IBNCPDP52",IBRX,"",0)
"RTN","IBNCPEV",246,0)
 S X1=+$G(^TMP($J,"IBNCPDP52",IBDFN,IBRX,6))
"RTN","IBNCPEV",247,0)
 K ^TMP($J,"IBNCPDP52")
"RTN","IBNCPEV",248,0)
 I X1=0 Q ""
"RTN","IBNCPEV",249,0)
 Q $$DRUGNAM^IBNCPEV1(X1)
"RTN","IBNCPEV",250,0)
 ;
"RTN","IBNCPEV",251,0)
EVNT(X) ;Translate codes
"RTN","IBNCPEV",252,0)
 I X="BILL" Q "BILLING"
"RTN","IBNCPEV",253,0)
 I X="REVERSE" Q "REVERSAL"
"RTN","IBNCPEV",254,0)
 I X="AUTO REVERSE" Q "REVERSAL(A)"
"RTN","IBNCPEV",255,0)
 I X["RELEASE" Q "RELEASE"
"RTN","IBNCPEV",256,0)
 I X["SUBMIT" Q "SUBMIT"
"RTN","IBNCPEV",257,0)
 I X["CLOSE" Q "CLOSE"
"RTN","IBNCPEV",258,0)
 I X[IBSC Q "FINISH"  ;IBSC = "STATUS CHECK"
"RTN","IBNCPEV",259,0)
 Q X
"RTN","IBNCPEV",260,0)
 ;
"RTN","IBNCPEV",261,0)
BOCD(X) ;Basis of Cost Determination
"RTN","IBNCPEV",262,0)
 I +X=7 Q "USUAL & CUSTOMARY"
"RTN","IBNCPEV",263,0)
 I +X=1 Q "AWP"
"RTN","IBNCPEV",264,0)
 I +X=5 Q "COST CALCULATIONS"
"RTN","IBNCPEV",265,0)
 Q X
"RTN","IBNCPEV",266,0)
 ;
"RTN","IBNCPEV",267,0)
PAUSE ;
"RTN","IBNCPEV",268,0)
 N X U IO(0) W !,"Press RETURN to continue, '^' to exit:" R X:DTIME S:'$T X="^" S:X["^" IBQ=1
"RTN","IBNCPEV",269,0)
 U IO
"RTN","IBNCPEV",270,0)
 Q
"RTN","IBNCPEV",271,0)
 ;
"RTN","IBNCPEV",272,0)
SUBHDR ;
"RTN","IBNCPEV",273,0)
 W !?10,"ECME# ",$P(IBD1,U,3),",",?25,"FILL DATE:",$$DAT($P(IBD2,U,6))
"RTN","IBNCPEV",274,0)
 D RELT($P(IBD2,U,7))
"RTN","IBNCPEV",275,0)
 Q
"RTN","IBNCPEV",276,0)
DISPUSR ;
"RTN","IBNCPEV",277,0)
 W !?10,"USER:",$$USR(+$P(IBD3,U,10))
"RTN","IBNCPEV",278,0)
 Q
"RTN","IBNCPEV",279,0)
 ;
"RTN","IBNCPEV",280,0)
 ;Returns RX number (external value: #52,.01)
"RTN","IBNCPEV",281,0)
 ;IBRX = IEN in PRESCRIPTION file #52
"RTN","IBNCPEV",282,0)
RXNUM(IBRX) ;
"RTN","IBNCPEV",283,0)
 Q $$RXAPI1^IBNCPUT1(IBRX,.01,"E")
"RTN","IBNCPEV",284,0)
 ;
"RTN","IBNCPEV1")
0^13^B46733979
"RTN","IBNCPEV1",1,0)
IBNCPEV1 ;DALOI/SS - NCPDP BILLING EVENTS REPORT ;21-MAR-2006
"RTN","IBNCPEV1",2,0)
 ;;2.0;INTEGRATED BILLING;**342,339,363,411**;21-MAR-94;Build 29
"RTN","IBNCPEV1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPEV1",4,0)
 ;
"RTN","IBNCPEV1",5,0)
 ;IA# 10155 is used to read ^DD(file,field,0) node
"RTN","IBNCPEV1",6,0)
 Q
"RTN","IBNCPEV1",7,0)
 ;
"RTN","IBNCPEV1",8,0)
SETVARS ;
"RTN","IBNCPEV1",9,0)
 ;newed in IBNCPEV
"RTN","IBNCPEV1",10,0)
 S (IBECME,IBPAT,IBRX,IBQ,IBSCR,IBPAGE,IBDTL,IBDIVS)=0
"RTN","IBNCPEV1",11,0)
 ;date
"RTN","IBNCPEV1",12,0)
 F  D DATE^IBNCPDPE Q:IBQ  Q:$$TESTDATA^IBNCPDPE
"RTN","IBNCPEV1",13,0)
 Q:IBQ
"RTN","IBNCPEV1",14,0)
 N IBMLTDV S IBMLTDV=$$MULTPHRM^BPSUTIL()
"RTN","IBNCPEV1",15,0)
 I +IBMLTDV=1 S IBDIVS=+$$MULTIDIV(.IBDIVS) S:IBDIVS=0 IBDIVS(0)="0^ALL" I IBDIVS=-1 S IBQ=1 Q
"RTN","IBNCPEV1",16,0)
 I +IBMLTDV=0 S IBDIVS=0,IBDIVS(0)="0^"_$P(IBMLTDV,U,2)
"RTN","IBNCPEV1",17,0)
 D MODE^IBNCPDPE Q:IBQ
"RTN","IBNCPEV1",18,0)
 D DEVICE^IBNCPDPE Q:IBQ
"RTN","IBNCPEV1",19,0)
 Q
"RTN","IBNCPEV1",20,0)
 ;
"RTN","IBNCPEV1",21,0)
 ;/**
"RTN","IBNCPEV1",22,0)
 ; input - 
"RTN","IBNCPEV1",23,0)
 ;   IBECMENO = ECME #
"RTN","IBNCPEV1",24,0)
 ;   IBST = start date (FM format)
"RTN","IBNCPEV1",25,0)
 ;   IBEND = end date (FM format)
"RTN","IBNCPEV1",26,0)
 ; output - returns internal entry number of file #52 for the earliest date within the date range
"RTN","IBNCPEV1",27,0)
GETRX(IBECMENO,IBST,IBEND) ; get ien of file 52 from #366.14
"RTN","IBNCPEV1",28,0)
 ; array from where the ECME BILLING EVENTS report gets its data
"RTN","IBNCPEV1",29,0)
 ;  This subroutine is called when the user enters an ECME# as
"RTN","IBNCPEV1",30,0)
 ;  part of the search criteria
"RTN","IBNCPEV1",31,0)
 N IBDATE,IBNO,IBIEN
"RTN","IBNCPEV1",32,0)
 S IBDATE=+$O(^IBCNR(366.14,"E",IBECMENO,IBST-1))
"RTN","IBNCPEV1",33,0)
 I IBDATE=0 Q 0
"RTN","IBNCPEV1",34,0)
 I IBDATE>IBEND Q 0
"RTN","IBNCPEV1",35,0)
 S IBNO=+$O(^IBCNR(366.14,"E",IBECMENO,IBDATE,0))
"RTN","IBNCPEV1",36,0)
 I IBNO=0 Q 0
"RTN","IBNCPEV1",37,0)
 S IBIEN=$O(^IBCNR(366.14,"B",IBDATE,0))
"RTN","IBNCPEV1",38,0)
 Q +$P($G(^IBCNR(366.14,IBIEN,1,IBNO,2)),U)
"RTN","IBNCPEV1",39,0)
 ;
"RTN","IBNCPEV1",40,0)
 ;/**
"RTN","IBNCPEV1",41,0)
 ;finish
"RTN","IBNCPEV1",42,0)
 ;input:
"RTN","IBNCPEV1",43,0)
 ;IBD2 - node ^IBCNR(366.14,D0,1,D1,2)
"RTN","IBNCPEV1",44,0)
 ;IBD3 - node ^IBCNR(366.14,D0,1,D1,3)
"RTN","IBNCPEV1",45,0)
 ;IBD4 - node ^IBCNR(366.14,D0,1,D1,4)
"RTN","IBNCPEV1",46,0)
 ;IBINS - multiple of ^IBCNR(366.14,D0,1,D1,5)
"RTN","IBNCPEV1",47,0)
 ;IBD7 - node ^IBCNR(366.14,D0,1,D1,7)
"RTN","IBNCPEV1",48,0)
DSTAT(IBD2,IBD3,IBD4,IBINS,IBD7) ;
"RTN","IBNCPEV1",49,0)
 N IBX,IBT,IBSC,IB1ST,IBNXT,IBEXMPV
"RTN","IBNCPEV1",50,0)
 S IB1ST=1
"RTN","IBNCPEV1",51,0)
 D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",52,0)
 W !?10,"ELIGIBILITY: "
"RTN","IBNCPEV1",53,0)
 F IBX=2:1 S IBT=$P($T(EXEMPT+IBX^IBNCPDP1),";",3),IBSC=$P(IBT,U,2) Q:IBSC=""  S IBEXMPV=$$EXMPFLDS(IBSC,IBD4) D:IBEXMPV]""  Q:IBQ!(IBEXMPV=3)
"RTN","IBNCPEV1",54,0)
 . I IBEXMPV=3 W "overridden by the user" Q
"RTN","IBNCPEV1",55,0)
 . I 'IB1ST W "," I $X>70 D CHKP^IBNCPEV Q:IBQ  W !?10 S IB1ST=1
"RTN","IBNCPEV1",56,0)
 . W " ",IBSC,":",$S(IBEXMPV=1:"Yes",IBEXMPV=0:"No",IBEXMPV=2:"No Answer",1:"?") S IB1ST=0
"RTN","IBNCPEV1",57,0)
 Q:IBQ
"RTN","IBNCPEV1",58,0)
 I $P(IBD2,U,4) D CHKP^IBNCPEV Q:IBQ  W !?10,"DRUG:",$$DRUGNAM(+$P(IBD2,U,4))
"RTN","IBNCPEV1",59,0)
 D CHKP^IBNCPEV Q:IBQ  W !?10
"RTN","IBNCPEV1",60,0)
 W "NDC:",$S($P(IBD2,U,5):$P(IBD2,U,5),1:"No"),", BILLED QTY:",$S($P(IBD2,U,8):$P(IBD2,U,8),1:"No"),", COST:",$S($P(IBD3,U,4):$P(IBD3,U,4),1:"No")
"RTN","IBNCPEV1",61,0)
 I $P(IBD2,U,10)]"" W ", DEA:",$P(IBD2,U,10)
"RTN","IBNCPEV1",62,0)
 S IBX=0,IBNXT=0 F  S IBX=$O(IBINS(IBX)) Q:'IBX  D  Q:IBQ  S IBNXT=1
"RTN","IBNCPEV1",63,0)
 .N Y S Y=$P(IBINS(IBX,0),U,2,8) W:'Y "@@@@" Q:'Y
"RTN","IBNCPEV1",64,0)
 .I IBNXT D CHKP^IBNCPEV Q:IBQ  W !?10,"-----------"
"RTN","IBNCPEV1",65,0)
 .D CHKP^IBNCPEV Q:IBQ  W !?10
"RTN","IBNCPEV1",66,0)
 .W "PLAN:",$P($G(^IBA(355.3,+Y,0)),U,3),"  "
"RTN","IBNCPEV1",67,0)
 .W "INSURANCE: ",$P($G(^DIC(36,+$G(^IBA(355.3,+Y,0)),0)),U)
"RTN","IBNCPEV1",68,0)
 .I +IBD7>0 W " COB: ",$S(+IBD7=2:"S",1:"P")
"RTN","IBNCPEV1",69,0)
 .D CHKP^IBNCPEV Q:IBQ  W !?10 S IB1ST=1
"RTN","IBNCPEV1",70,0)
 .I $P(Y,U,2)]"" W "BIN:",$P(Y,U,2) S IB1ST=0
"RTN","IBNCPEV1",71,0)
 .I $P(Y,U,3)]"" W:'IB1ST ", " W "PCN:",$P(Y,U,3) S IB1ST=0
"RTN","IBNCPEV1",72,0)
 .I $P(Y,U,4)]"" W:'IB1ST ", " W "PAYER SHEET B1:",$P(Y,U,4) S IB1ST=0
"RTN","IBNCPEV1",73,0)
 .D CHKP^IBNCPEV Q:IBQ  W !?10 S IB1ST=1
"RTN","IBNCPEV1",74,0)
 .S Y=IBINS(IBX,1)
"RTN","IBNCPEV1",75,0)
 .I $P(Y,U,4)]"" W "PAYER SHEET B2:",$P(Y,U,4) S IB1ST=0
"RTN","IBNCPEV1",76,0)
 .I $P(Y,U,5)]"" W:'IB1ST ", " W "PAYER SHEET B3:",$P(Y,U,5)
"RTN","IBNCPEV1",77,0)
 .;S Y=$G(Z1("INS",IBX,2)) Q:Y=""
"RTN","IBNCPEV1",78,0)
 .S Y=IBINS(IBX,2) Q:Y=""
"RTN","IBNCPEV1",79,0)
 .D CHKP^IBNCPEV Q:IBQ  W !?10 S IB1ST=1
"RTN","IBNCPEV1",80,0)
 .I $P(Y,U)]"" W "DISPENSING FEE:",$P(Y,U) S IB1ST=0
"RTN","IBNCPEV1",81,0)
 .I $P(Y,U,2)]"" W:'IB1ST ", " W "BASIS OF COST DETERM:",$$BOCD^IBNCPEV($P(Y,U,2)) S IB1ST=0
"RTN","IBNCPEV1",82,0)
 .D CHKP^IBNCPEV Q:IBQ  W !?10 S IB1ST=1
"RTN","IBNCPEV1",83,0)
 .I $P(Y,U,3)]"" W "COST:",$J($P(Y,U,3),0,2) S IB1ST=0
"RTN","IBNCPEV1",84,0)
 .I $P(Y,U,4)]"" W:'IB1ST ", " W "GROSS AMT DUE:",$J($P(Y,U,4),0,2) S IB1ST=0
"RTN","IBNCPEV1",85,0)
 .I $P(Y,U,5)]"" W:'IB1ST ", " W "ADMIN FEE:",$J($P(Y,U,5),0,2)
"RTN","IBNCPEV1",86,0)
 Q:IBQ
"RTN","IBNCPEV1",87,0)
 ;
"RTN","IBNCPEV1",88,0)
 D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",89,0)
 W !?10,"USER:",$$USR^IBNCPEV(+$P(IBD3,U,10))
"RTN","IBNCPEV1",90,0)
 Q
"RTN","IBNCPEV1",91,0)
 ;
"RTN","IBNCPEV1",92,0)
 ;get Exemption status by name
"RTN","IBNCPEV1",93,0)
 ;IBEXMP - exemption (like "AO","EC", etc)
"RTN","IBNCPEV1",94,0)
 ;IBNODE - node ^IBCNR(366.14,D0,1,D1,4)
"RTN","IBNCPEV1",95,0)
EXMPFLDS(IBEXMP,IBNODE) ;
"RTN","IBNCPEV1",96,0)
 Q:IBEXMP="AO" $P(IBNODE,U,1)
"RTN","IBNCPEV1",97,0)
 Q:IBEXMP="CV" $P(IBNODE,U,2)
"RTN","IBNCPEV1",98,0)
 Q:IBEXMP="SWA" $P(IBNODE,U,3)
"RTN","IBNCPEV1",99,0)
 Q:IBEXMP="IR" $P(IBNODE,U,4)
"RTN","IBNCPEV1",100,0)
 Q:IBEXMP="MST" $P(IBNODE,U,5)
"RTN","IBNCPEV1",101,0)
 Q:IBEXMP="HNC" $P(IBNODE,U,6)
"RTN","IBNCPEV1",102,0)
 Q:IBEXMP="SC" $P(IBNODE,U,7)
"RTN","IBNCPEV1",103,0)
 Q:IBEXMP="SHAD" $P(IBNODE,U,8)
"RTN","IBNCPEV1",104,0)
 Q ""
"RTN","IBNCPEV1",105,0)
 ;returns DFN from file #366.14 by prescription ien of file #50
"RTN","IBNCPEV1",106,0)
GETDFN(IBRX) ;
"RTN","IBNCPEV1",107,0)
 N IB1,IB2
"RTN","IBNCPEV1",108,0)
 S IB1=+$O(^IBCNR(366.14,"I",IBRX,0))
"RTN","IBNCPEV1",109,0)
 I IB1=0 Q 0
"RTN","IBNCPEV1",110,0)
 S IB2=+$O(^IBCNR(366.14,"I",IBRX,IB1,0))
"RTN","IBNCPEV1",111,0)
 I IB2=0 Q 0
"RTN","IBNCPEV1",112,0)
 Q +$P($G(^IBCNR(366.14,IB1,1,IB2,0)),U,3)
"RTN","IBNCPEV1",113,0)
 ;
"RTN","IBNCPEV1",114,0)
 ;return DRUG name (#50,.01)
"RTN","IBNCPEV1",115,0)
 ;IBX1 - ien in file #50
"RTN","IBNCPEV1",116,0)
DRUGNAM(IBX1) ;
"RTN","IBNCPEV1",117,0)
 ;Q $P($G(^PSDRUG(IBX1,0)),U)
"RTN","IBNCPEV1",118,0)
 N X
"RTN","IBNCPEV1",119,0)
 K ^TMP($J,"IBNCPDP50")
"RTN","IBNCPEV1",120,0)
 D DATA^PSS50(IBX1,"","","","","IBNCPDP50")
"RTN","IBNCPEV1",121,0)
 S X=$G(^TMP($J,"IBNCPDP50",IBX1,.01))
"RTN","IBNCPEV1",122,0)
 K ^TMP($J,"IBNCPDP50")
"RTN","IBNCPEV1",123,0)
 Q X
"RTN","IBNCPEV1",124,0)
 ;
"RTN","IBNCPEV1",125,0)
DRUGAPI(DRUGIEN,FLDNUM) ;
"RTN","IBNCPEV1",126,0)
 ;return a DRUG's field value
"RTN","IBNCPEV1",127,0)
 ;input:
"RTN","IBNCPEV1",128,0)
 ; DRUGIEN - ien #50
"RTN","IBNCPEV1",129,0)
 ; FLDNUM - field number (like .01)
"RTN","IBNCPEV1",130,0)
 ;output:
"RTN","IBNCPEV1",131,0)
 ; returned value that contains the external value of the specified field
"RTN","IBNCPEV1",132,0)
 N IBARR,DIQ,DIC
"RTN","IBNCPEV1",133,0)
 S DIQ="IBARR",DIQ(0)="E",DIC=50
"RTN","IBNCPEV1",134,0)
 D EN^PSSDI(50,"IB",DIC,.FLDNUM,.DRUGIEN,.DIQ)
"RTN","IBNCPEV1",135,0)
 Q $G(IBARR(50,DRUGIEN,FLDNUM,"E"))
"RTN","IBNCPEV1",136,0)
 ;
"RTN","IBNCPEV1",137,0)
 ;reopen
"RTN","IBNCPEV1",138,0)
REOPEN ;
"RTN","IBNCPEV1",139,0)
 D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",140,0)
 D SUBHDR^IBNCPEV
"RTN","IBNCPEV1",141,0)
 I +$P(IBD3,U,3) D CHKP^IBNCPEV Q:IBQ  W !?10,"PLAN:",$P($G(^IBA(355.3,+$P(IBD3,U,3),0)),U,3),", INSURANCE: ",$P($G(^DIC(36,+$G(^IBA(355.3,+$P(IBD3,U,3),0)),0)),U)
"RTN","IBNCPEV1",142,0)
 I $L($P(IBD3,U,6))>2 D CHKP^IBNCPEV Q:IBQ  W !?10,"REOPEN COMMENTS:",$P(IBD3,U,6)
"RTN","IBNCPEV1",143,0)
 D CHKP^IBNCPEV Q:IBQ
"RTN","IBNCPEV1",144,0)
 D DISPUSR^IBNCPEV
"RTN","IBNCPEV1",145,0)
 Q
"RTN","IBNCPEV1",146,0)
 ;
"RTN","IBNCPEV1",147,0)
 ;Prompts user to select multiple divisions (BPS PHARMACIES)
"RTN","IBNCPEV1",148,0)
 ; in order to filter the report by division(s) or for ALL divisions
"RTN","IBNCPEV1",149,0)
 ; 
"RTN","IBNCPEV1",150,0)
 ;returns composite value:
"RTN","IBNCPEV1",151,0)
 ;1st piece
"RTN","IBNCPEV1",152,0)
 ; 1 - divisions were selected 
"RTN","IBNCPEV1",153,0)
 ; 0 - divisions were NOT selected 
"RTN","IBNCPEV1",154,0)
 ; -1 if up arrow entered or timeout
"RTN","IBNCPEV1",155,0)
 ;2nd piece
"RTN","IBNCPEV1",156,0)
 ; A-all or D - division(s) in the BPS PHARMACIES file #9002313.56)
"RTN","IBNCPEV1",157,0)
 ;
"RTN","IBNCPEV1",158,0)
 ;and by reference:
"RTN","IBNCPEV1",159,0)
 ;IBPSPHAR (only if the user selects "D") - a local array with iens and names 
"RTN","IBNCPEV1",160,0)
 ;  of BPS PHARMACIES (file #9002313.56) selected by the user
"RTN","IBNCPEV1",161,0)
 ;  IBPSPHAR(ien of file #9002313.56) = ien of file #9002313.56 ^ name of the BPS PHARMACY
"RTN","IBNCPEV1",162,0)
 ;
"RTN","IBNCPEV1",163,0)
MULTIDIV(IBPSPHAR) ;
"RTN","IBNCPEV1",164,0)
 N IBDIVCNT,IBANSW,IBRETV
"RTN","IBNCPEV1",165,0)
 S IBRETV=$$SELPHARM^BPSUTIL(.IBPSPHAR)
"RTN","IBNCPEV1",166,0)
 I IBRETV="^" Q -1  ;exit
"RTN","IBNCPEV1",167,0)
 I IBRETV="A" Q "0^A"
"RTN","IBNCPEV1",168,0)
 Q "1^D"
"RTN","IBNCPEV1",169,0)
 ;
"RTN","IBNCPEV1",170,0)
 ;check if ePharmacy division in IB36614 in among those selected by the user
"RTN","IBNCPEV1",171,0)
 ;IBDIVS - a local array (by reference) with divisions selected by the user
"RTN","IBNCPEV1",172,0)
 ;returns 0 - not among selected divisions, 1 - among them
"RTN","IBNCPEV1",173,0)
CHECKDIV(IB36614,IBDIVS) ;
"RTN","IBNCPEV1",174,0)
 I $D(IBDIVS(IB36614)) Q 1
"RTN","IBNCPEV1",175,0)
 Q 0
"RTN","IBNCPEV1",176,0)
 ;
"RTN","IBNCPEV1",177,0)
 ;Compile the string for divisions
"RTN","IBNCPEV1",178,0)
 ;input:
"RTN","IBNCPEV1",179,0)
 ;IBDVS - division local array by reference
"RTN","IBNCPEV1",180,0)
 ;output: 
"RTN","IBNCPEV1",181,0)
 ; return value with the resulting string
"RTN","IBNCPEV1",182,0)
DISPLDIV(IBDVS) ;
"RTN","IBNCPEV1",183,0)
 I ('$D(IBDVS))!($G(IBDVS)="") Q ""  ;invalid parameters
"RTN","IBNCPEV1",184,0)
 I IBDVS=0 Q ""  ;if "all" or single division
"RTN","IBNCPEV1",185,0)
 N IBZ,IBCNT,IBDIVSTR
"RTN","IBNCPEV1",186,0)
 S IBDIVSTR=""
"RTN","IBNCPEV1",187,0)
 S IBZ=0,IBCNT=0
"RTN","IBNCPEV1",188,0)
 F  S IBZ=$O(IBDVS(IBZ)) Q:+IBZ=0  D
"RTN","IBNCPEV1",189,0)
 . I IBCNT>0 S IBDIVSTR=IBDIVSTR_", "
"RTN","IBNCPEV1",190,0)
 . S IBCNT=IBCNT+1
"RTN","IBNCPEV1",191,0)
 . S IBDIVSTR=IBDIVSTR_$P(IBDVS(IBZ),U,2)
"RTN","IBNCPEV1",192,0)
 I $L(IBDIVSTR)'<80 S IBDIVSTR=$E(IBDIVSTR,1,75)_"..."
"RTN","IBNCPEV1",193,0)
 Q $$CENTERIT(IBDIVSTR,80)
"RTN","IBNCPEV1",194,0)
 ;
"RTN","IBNCPEV1",195,0)
 ;Compile the string for title
"RTN","IBNCPEV1",196,0)
 ;input:
"RTN","IBNCPEV1",197,0)
 ;IBBDT - begin date
"RTN","IBNCPEV1",198,0)
 ;IBEDT - end date
"RTN","IBNCPEV1",199,0)
 ;IBDTL - summary/detail mode
"RTN","IBNCPEV1",200,0)
 ;IBDIVS - division local array by reference
"RTN","IBNCPEV1",201,0)
 ;output: 
"RTN","IBNCPEV1",202,0)
 ; return value with the resulting string
"RTN","IBNCPEV1",203,0)
DISPTITL(IBBDT,IBEDT,IBDTL,IBDIVS) ;
"RTN","IBNCPEV1",204,0)
 I ('$D(IBDIVS))!($G(IBDIVS)="")!($G(IBBDT)="")!($G(IBEDT)="")!($G(IBDTL)="") Q ""  ;invalid parameters
"RTN","IBNCPEV1",205,0)
 N IBTITL
"RTN","IBNCPEV1",206,0)
 S IBTITL="BILLING ECME EVENTS ON "_$$DAT^IBNCPEV(IBBDT)
"RTN","IBNCPEV1",207,0)
 I IBBDT'=IBEDT S IBTITL=IBTITL_" TO "_$$DAT^IBNCPEV(IBEDT)
"RTN","IBNCPEV1",208,0)
 S IBTITL=IBTITL_" ("_$S(IBDTL:"DETAILED",1:"SUMMARY")_") for "
"RTN","IBNCPEV1",209,0)
 I IBDIVS'=0 S IBTITL=IBTITL_"SELECTED DIVISIONS:"
"RTN","IBNCPEV1",210,0)
 I IBDIVS=0 S IBTITL=IBTITL_$P(IBDIVS(0),U,2)_" DIVISION" I $P(IBDIVS(0),U,2)="ALL" S IBTITL=IBTITL_"S"
"RTN","IBNCPEV1",211,0)
 Q $$CENTERIT(IBTITL,80)
"RTN","IBNCPEV1",212,0)
 ;
"RTN","IBNCPEV1",213,0)
 ;Center the string (add left pads to center the string)
"RTN","IBNCPEV1",214,0)
 ;input:
"RTN","IBNCPEV1",215,0)
 ;IBSTR - input string
"RTN","IBNCPEV1",216,0)
 ;IBMAXLEN - max len
"RTN","IBNCPEV1",217,0)
 ;output: 
"RTN","IBNCPEV1",218,0)
 ; return value with the resulting string
"RTN","IBNCPEV1",219,0)
CENTERIT(IBSTR,IBMAXLEN) ;
"RTN","IBNCPEV1",220,0)
 I ($G(IBSTR)="")!(+$G(IBMAXLEN)=0) Q ""
"RTN","IBNCPEV1",221,0)
 N IBLEFT,IBSP
"RTN","IBNCPEV1",222,0)
 S IBSTR=$E(IBSTR,1,IBMAXLEN)
"RTN","IBNCPEV1",223,0)
 S IBLEFT=((IBMAXLEN-$L(IBSTR))/2)\1
"RTN","IBNCPEV1",224,0)
 S IBSP=""
"RTN","IBNCPEV1",225,0)
 S $P(IBSP," ",IBLEFT+1)=""
"RTN","IBNCPEV1",226,0)
 Q IBSP_IBSTR
"RTN","IBNCPEV1",227,0)
 ;Get list of indicators that were not answered
"RTN","IBNCPEV1",228,0)
GETNOANS(IBD4) ;
"RTN","IBNCPEV1",229,0)
 N IBX,IBT,IBSC,IBEXMPV,IBQ,IBRET
"RTN","IBNCPEV1",230,0)
 S IBQ=0,IBRET=""
"RTN","IBNCPEV1",231,0)
 F IBX=2:1 S IBT=$P($T(EXEMPT+IBX^IBNCPDP1),";",3),IBSC=$P(IBT,U,2) Q:IBSC=""  S IBEXMPV=$$EXMPFLDS^IBNCPEV1(IBSC,IBD4) D:IBEXMPV]""
"RTN","IBNCPEV1",232,0)
 . I IBEXMPV=2 S IBRET=IBRET_","_IBSC
"RTN","IBNCPEV1",233,0)
 Q $S(IBRET="":"SC",1:$E(IBRET,2,99))
"RTN","IBNCPEV1",234,0)
 ;IBNCPEV1
"RTN","IBNCPLOG")
0^14^B64598922
"RTN","IBNCPLOG",1,0)
IBNCPLOG ;BHAM ISC/SS - IB ECME EVNT REPORT ;3/5/08  14:02
"RTN","IBNCPLOG",2,0)
 ;;2.0;INTEGRATED BILLING;**342,339,363,383,411**;21-MAR-94;Build 29
"RTN","IBNCPLOG",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPLOG",4,0)
 ;
"RTN","IBNCPLOG",5,0)
 ;store data related to the IB calls made by ECME package in the file #366.14
"RTN","IBNCPLOG",6,0)
 ;input:
"RTN","IBNCPLOG",7,0)
 ;.IBIBD - (by reference) IBD array with parameter sent to IB by ECME
"RTN","IBNCPLOG",8,0)
 ;DFN patient's ien
"RTN","IBNCPLOG",9,0)
 ;IBPROC - type of event. i.e. content of CALL such as BILL, REJECT and so on
"RTN","IBNCPLOG",10,0)
 ;IBRESULT - (optional) result of the event processing, format: return_code^message
"RTN","IBNCPLOG",11,0)
 ;IBJOB - (optional) job, default = $J
"RTN","IBNCPLOG",12,0)
 ;IBDTTM - (optional) datetime, default = "NOW"
"RTN","IBNCPLOG",13,0)
 ;IBUSR - (optional) user ID, default = DUZ
"RTN","IBNCPLOG",14,0)
 ;output:
"RTN","IBNCPLOG",15,0)
 ;none
"RTN","IBNCPLOG",16,0)
LOG(IBIBD,DFN,IBPROC,IBRESULT,IBJOB,IBDTTM,IBUSR) ;Store the data
"RTN","IBNCPLOG",17,0)
 N NDX,Z,REF,IBDATE,IBDTIEN,IBEVNIEN,IBIBDTYP,IBRETV
"RTN","IBNCPLOG",18,0)
 S IBRESULT=$G(IBRESULT)
"RTN","IBNCPLOG",19,0)
 ;
"RTN","IBNCPLOG",20,0)
 I '$G(IBJOB) S IBJOB=$J
"RTN","IBNCPLOG",21,0)
 I '$G(IBDTTM) S IBDTTM=$$NOW^XLFDT()
"RTN","IBNCPLOG",22,0)
 I '$G(IBUSR) S IBUSR=+DUZ
"RTN","IBNCPLOG",23,0)
 ;
"RTN","IBNCPLOG",24,0)
 S IBDATE=DT
"RTN","IBNCPLOG",25,0)
 S IBDTIEN=+$O(^IBCNR(366.14,"B",IBDATE,0))
"RTN","IBNCPLOG",26,0)
 L +^IBCNR(366.14):30 E  Q
"RTN","IBNCPLOG",27,0)
 I IBDTIEN=0 S IBDTIEN=+$$ADDDATE(IBDATE)
"RTN","IBNCPLOG",28,0)
 ;create an event
"RTN","IBNCPLOG",29,0)
 S IBEVNIEN=$$NEWEVENT(IBDTIEN,IBPROC)
"RTN","IBNCPLOG",30,0)
 L -^IBCNR(366.14)
"RTN","IBNCPLOG",31,0)
 I IBEVNIEN=0 W !,"New event creation Error : LOG^IBNCPLOG",! Q
"RTN","IBNCPLOG",32,0)
 ;
"RTN","IBNCPLOG",33,0)
 I +$$FILLFLDS^IBNCPUT1(366.141,".03",IBEVNIEN_","_IBDTIEN,DFN) ;DFN
"RTN","IBNCPLOG",34,0)
 I +$$FILLFLDS^IBNCPUT1(366.141,".04",IBEVNIEN_","_IBDTIEN,IBJOB) ;JOB
"RTN","IBNCPLOG",35,0)
 I +$$FILLFLDS^IBNCPUT1(366.141,".05",IBEVNIEN_","_IBDTIEN,IBDTTM) ;DATETIME
"RTN","IBNCPLOG",36,0)
 I +$$FILLFLDS^IBNCPUT1(366.141,".06",IBEVNIEN_","_IBDTIEN,DUZ) ;USER
"RTN","IBNCPLOG",37,0)
 I IBRESULT'="" D
"RTN","IBNCPLOG",38,0)
 . S IBRETV=+$$FILLFLDS^IBNCPUT1(366.141,".07",IBEVNIEN_","_IBDTIEN,+IBRESULT) ;RESULT
"RTN","IBNCPLOG",39,0)
 . S IBRETV=+$$FILLFLDS^IBNCPUT1(366.141,".08",IBEVNIEN_","_IBDTIEN,$P(IBRESULT,U,2)) ;RESULT MESSAGE
"RTN","IBNCPLOG",40,0)
 ;store IBIBD array
"RTN","IBNCPLOG",41,0)
 S IBIBDTYP=""
"RTN","IBNCPLOG",42,0)
 F  S IBIBDTYP=$O(IBIBD(IBIBDTYP)) Q:IBIBDTYP=""  D
"RTN","IBNCPLOG",43,0)
 . D IBD(IBDTIEN,IBEVNIEN,IBIBDTYP,$G(IBIBD(IBIBDTYP)),.IBIBD)
"RTN","IBNCPLOG",44,0)
 ;store "INS" node of IBIBD array
"RTN","IBNCPLOG",45,0)
 I $D(IBIBD("INS")) I $$INS(.IBIBD,IBDTIEN,IBEVNIEN)
"RTN","IBNCPLOG",46,0)
 Q
"RTN","IBNCPLOG",47,0)
 ;
"RTN","IBNCPLOG",48,0)
 ;store IBD array data
"RTN","IBNCPLOG",49,0)
 ;IBDTIEN -  ien on top [DATE] level
"RTN","IBNCPLOG",50,0)
 ;IBRECNO - ien in [EVENTS] multiple
"RTN","IBNCPLOG",51,0)
 ;IBIBDTYP - type subscript in IBD array (BILL, PAID, RESPONSE, etc)
"RTN","IBNCPLOG",52,0)
 ;IBVAL - value to store
"RTN","IBNCPLOG",53,0)
 ;IBIBD - array with data passed by reference (for efficiency)
"RTN","IBNCPLOG",54,0)
IBD(IBDTIEN,IBRECNO,IBIBDTYP,IBVAL,IBIBD) ;
"RTN","IBNCPLOG",55,0)
 N IBFLDNO
"RTN","IBNCPLOG",56,0)
 ;W !," - ",IBRECNO," ",IBIBDTYP," = ",IBVAL
"RTN","IBNCPLOG",57,0)
 ;free text like "WEBMD: PAID"
"RTN","IBNCPLOG",58,0)
 I IBIBDTYP="AUTH #" S IBFLDNO=".11",IBVAL=$E(IBVAL,1,30) G EDITIBD
"RTN","IBNCPLOG",59,0)
 ;free text like "0504597;3051229"
"RTN","IBNCPLOG",60,0)
 I IBIBDTYP="BCID" S IBFLDNO=".12" G EDITIBD
"RTN","IBNCPLOG",61,0)
 ;7 digits ECME number - identifier (stored as a text - might have leading zeroes)
"RTN","IBNCPLOG",62,0)
 I IBIBDTYP="CLAIMID" S IBFLDNO=".13" G EDITIBD
"RTN","IBNCPLOG",63,0)
 ;pointer to file #2
"RTN","IBNCPLOG",64,0)
 I IBIBDTYP="DFN" S IBFLDNO=".14" G EDITIBD
"RTN","IBNCPLOG",65,0)
 ;pointer to file #40.8
"RTN","IBNCPLOG",66,0)
 I IBIBDTYP="DIVISION" S IBFLDNO=".15" G EDITIBD
"RTN","IBNCPLOG",67,0)
 ;free text
"RTN","IBNCPLOG",68,0)
 I IBIBDTYP="RESPONSE" S IBFLDNO=".16",IBVAL=$E(IBVAL,1,20) G EDITIBD
"RTN","IBNCPLOG",69,0)
 ;free text
"RTN","IBNCPLOG",70,0)
 I IBIBDTYP="REVERSAL REASON" S IBFLDNO=".17",IBVAL=$E(IBVAL,1,40) G EDITIBD
"RTN","IBNCPLOG",71,0)
 ;1 digit number
"RTN","IBNCPLOG",72,0)
 I IBIBDTYP="RTS-DEL" S IBFLDNO=".18" G EDITIBD
"RTN","IBNCPLOG",73,0)
 ;free text
"RTN","IBNCPLOG",74,0)
 I IBIBDTYP="STATUS" S IBFLDNO=".19",IBVAL=$E(IBVAL,1,20) G EDITIBD
"RTN","IBNCPLOG",75,0)
 ;Prescription number as a text, might have alpha characters (external value, this is not IEN)
"RTN","IBNCPLOG",76,0)
 I IBIBDTYP="RX NO" S IBFLDNO=".202",IBVAL=$E(IBVAL,1,20) G EDITIBD
"RTN","IBNCPLOG",77,0)
 ;0 - original, 1,2,3,... - refill number
"RTN","IBNCPLOG",78,0)
 I IBIBDTYP="FILL NUMBER" S IBFLDNO=".203" G EDITIBD
"RTN","IBNCPLOG",79,0)
 ;internal identifier number for a DRUG
"RTN","IBNCPLOG",80,0)
 I IBIBDTYP="DRUG" S IBFLDNO=".204" G EDITIBD
"RTN","IBNCPLOG",81,0)
 I IBIBDTYP="NDC" S IBFLDNO=".205" G EDITIBD
"RTN","IBNCPLOG",82,0)
 I IBIBDTYP="FILL DATE" S IBFLDNO=".206" G EDITIBD
"RTN","IBNCPLOG",83,0)
 I IBIBDTYP="RELEASE DATE" S IBFLDNO=".207" G EDITIBD
"RTN","IBNCPLOG",84,0)
 I IBIBDTYP="QTY" S IBFLDNO=".208" G EDITIBD
"RTN","IBNCPLOG",85,0)
 I IBIBDTYP="DAYS SUPPLY" S IBFLDNO=".209" G EDITIBD
"RTN","IBNCPLOG",86,0)
 I IBIBDTYP="DEA" S IBFLDNO=".21" G EDITIBD
"RTN","IBNCPLOG",87,0)
 I IBIBDTYP="FILLED BY" S IBFLDNO=".211" G EDITIBD
"RTN","IBNCPLOG",88,0)
 I IBIBDTYP="COPAY" S IBFLDNO=".311" G EDITIBD
"RTN","IBNCPLOG",89,0)
 ; for environmental indicators:
"RTN","IBNCPLOG",90,0)
 ; if IBIBD("SC/EI OVR")=1 - the user overrides any answers (3)
"RTN","IBNCPLOG",91,0)
 ; if $G(IBIBD("SC/EI NO ANSW")) contains the IBIBDTYP - this question was not answered (2)
"RTN","IBNCPLOG",92,0)
 ; otherwise - use whatever in the IBVAL (0 - NO, 1 -YES)
"RTN","IBNCPLOG",93,0)
 I IBIBDTYP="AO" S IBFLDNO=".401",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",94,0)
 I IBIBDTYP="CV" S IBFLDNO=".402",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",95,0)
 I IBIBDTYP="SWA" S IBFLDNO=".403",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",96,0)
 I IBIBDTYP="IR" S IBFLDNO=".404",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",97,0)
 I IBIBDTYP="MST" S IBFLDNO=".405",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",98,0)
 I IBIBDTYP="HNC" S IBFLDNO=".406",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",99,0)
 I IBIBDTYP="SC" S IBFLDNO=".407",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",100,0)
 I IBIBDTYP="SHAD" S IBFLDNO=".408",IBVAL=$S($G(IBIBD("SC/EI OVR"))=1:3,(","_$G(IBIBD("SC/EI NO ANSW"))_",")[(","_IBIBDTYP_","):2,1:IBVAL) G EDITIBD
"RTN","IBNCPLOG",101,0)
 I IBIBDTYP="BILL" S IBFLDNO=".301" G EDITIBD
"RTN","IBNCPLOG",102,0)
 I IBIBDTYP="BILLED" S IBFLDNO=".302" G EDITIBD
"RTN","IBNCPLOG",103,0)
 I IBIBDTYP="PLAN" S IBFLDNO=".303" G EDITIBD
"RTN","IBNCPLOG",104,0)
 I IBIBDTYP="COST" S IBFLDNO=".304" G EDITIBD
"RTN","IBNCPLOG",105,0)
 I IBIBDTYP="PAID" S IBFLDNO=".305" G EDITIBD
"RTN","IBNCPLOG",106,0)
 I IBIBDTYP="CLOSE COMMENT" S IBFLDNO=".306" G EDITIBD
"RTN","IBNCPLOG",107,0)
 I IBIBDTYP="REOPEN COMMENT" S IBFLDNO=".306" G EDITIBD
"RTN","IBNCPLOG",108,0)
 I IBIBDTYP="CLOSE REASON" S IBFLDNO=".307" G EDITIBD
"RTN","IBNCPLOG",109,0)
 I IBIBDTYP="DROP TO PAPER" S IBFLDNO=".308" G EDITIBD
"RTN","IBNCPLOG",110,0)
 I IBIBDTYP="RELEASE COPAY" S IBFLDNO=".309" G EDITIBD
"RTN","IBNCPLOG",111,0)
 I IBIBDTYP="USER" S IBFLDNO=".31" G EDITIBD
"RTN","IBNCPLOG",112,0)
 I IBIBDTYP="PRESCRIPTION" S IBFLDNO=".201" G EDITIBD
"RTN","IBNCPLOG",113,0)
 I IBIBDTYP="IEN" S IBFLDNO=".212" G EDITIBD
"RTN","IBNCPLOG",114,0)
 I IBIBDTYP="EPHARM" S IBFLDNO=".09" G EDITIBD
"RTN","IBNCPLOG",115,0)
 I IBIBDTYP="RXCOB" S IBFLDNO="7.01" G EDITIBD
"RTN","IBNCPLOG",116,0)
 I IBIBDTYP="PRIMARY BILL" S IBFLDNO="7.02" G EDITIBD
"RTN","IBNCPLOG",117,0)
 I IBIBDTYP="PRIOR PAYMENT" S IBFLDNO="7.03" G EDITIBD
"RTN","IBNCPLOG",118,0)
 I IBIBDTYP="RTYPE" S IBFLDNO="7.04" G EDITIBD
"RTN","IBNCPLOG",119,0)
 Q 0
"RTN","IBNCPLOG",120,0)
EDITIBD ;
"RTN","IBNCPLOG",121,0)
 Q +$$FILLFLDS^IBNCPUT1(366.141,IBFLDNO,IBRECNO_","_IBDTIEN,IBVAL)
"RTN","IBNCPLOG",122,0)
 ;------
"RTN","IBNCPLOG",123,0)
 ;to store IBD("INS") array data
"RTN","IBNCPLOG",124,0)
 ;input:
"RTN","IBNCPLOG",125,0)
 ;IBDARR - IBD array by reference
"RTN","IBNCPLOG",126,0)
 ;IBDTIEN -  ien on top [DATE] level
"RTN","IBNCPLOG",127,0)
 ;IBRECNO - ien in [EVENTS] multiple
"RTN","IBNCPLOG",128,0)
 ;output:
"RTN","IBNCPLOG",129,0)
 ; record number if success
"RTN","IBNCPLOG",130,0)
 ; 0 if failure
"RTN","IBNCPLOG",131,0)
INS(IBDARR,IBDTIEN,IBRECNO) ;
"RTN","IBNCPLOG",132,0)
 N IBSET1,IBSET2,IBSET3,IBFLDNO,IBINSNO,RECNO,IBVAL
"RTN","IBNCPLOG",133,0)
 S IBINSNO=0
"RTN","IBNCPLOG",134,0)
 ; Only create entry for first insurance found. BNT 07/07/2010
"RTN","IBNCPLOG",135,0)
 F  S IBINSNO=$O(IBDARR("INS",IBINSNO)) Q:+IBINSNO=0  D  Q:$D(RECNO)
"RTN","IBNCPLOG",136,0)
 . S IBSET1=$G(IBDARR("INS",IBINSNO,1))
"RTN","IBNCPLOG",137,0)
 . S IBSET2=$G(IBDARR("INS",IBINSNO,2))
"RTN","IBNCPLOG",138,0)
 . S IBSET3=$G(IBDARR("INS",IBINSNO,3))
"RTN","IBNCPLOG",139,0)
 . S RECNO=$$ADDINS(IBDTIEN,IBRECNO)
"RTN","IBNCPLOG",140,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.02,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,1))
"RTN","IBNCPLOG",141,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.03,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,2))
"RTN","IBNCPLOG",142,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.04,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,3))
"RTN","IBNCPLOG",143,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.05,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,4))
"RTN","IBNCPLOG",144,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.06,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,5))
"RTN","IBNCPLOG",145,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.07,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,6))
"RTN","IBNCPLOG",146,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.08,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,7))
"RTN","IBNCPLOG",147,0)
 . ;
"RTN","IBNCPLOG",148,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.101,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,8))
"RTN","IBNCPLOG",149,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.102,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,9))
"RTN","IBNCPLOG",150,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.103,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,10))
"RTN","IBNCPLOG",151,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.104,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,11))
"RTN","IBNCPLOG",152,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.105,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,12))
"RTN","IBNCPLOG",153,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.106,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,13))
"RTN","IBNCPLOG",154,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.107,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET1,U,14))
"RTN","IBNCPLOG",155,0)
 . ;
"RTN","IBNCPLOG",156,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.201,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,1))
"RTN","IBNCPLOG",157,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.202,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,2))
"RTN","IBNCPLOG",158,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.203,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,3))
"RTN","IBNCPLOG",159,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.204,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,4))
"RTN","IBNCPLOG",160,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.205,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET2,U,5))
"RTN","IBNCPLOG",161,0)
 . ;
"RTN","IBNCPLOG",162,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.301,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET3,U,1))
"RTN","IBNCPLOG",163,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.302,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET3,U,2))
"RTN","IBNCPLOG",164,0)
 . I +$$FILLFLDS^IBNCPUT1(366.1412,.303,RECNO_","_IBRECNO_","_IBDTIEN,$P(IBSET3,U,3))
"RTN","IBNCPLOG",165,0)
 Q RECNO
"RTN","IBNCPLOG",166,0)
 ;create top level entry in #366.14
"RTN","IBNCPLOG",167,0)
 ;input:
"RTN","IBNCPLOG",168,0)
 ; IBDATE - date in FileMan format
"RTN","IBNCPLOG",169,0)
 ;output
"RTN","IBNCPLOG",170,0)
 ; returns ien created
"RTN","IBNCPLOG",171,0)
ADDDATE(IBDATE) ;
"RTN","IBNCPLOG",172,0)
 N IBIEN
"RTN","IBNCPLOG",173,0)
 S IBIEN=+$O(^IBCNR(366.14,"B",IBDATE,0))
"RTN","IBNCPLOG",174,0)
 I IBIEN>0 Q IBIEN
"RTN","IBNCPLOG",175,0)
 I $$INSITEM^IBNCPUT1(366.14,"",IBDATE,"")
"RTN","IBNCPLOG",176,0)
 Q +$O(^IBCNR(366.14,"B",IBDATE,0))
"RTN","IBNCPLOG",177,0)
 ;
"RTN","IBNCPLOG",178,0)
 ;create EVENT entry in #366.14
"RTN","IBNCPLOG",179,0)
 ;input:
"RTN","IBNCPLOG",180,0)
 ;IBIEN - ien on top [DATE] level
"RTN","IBNCPLOG",181,0)
 ;EVNTTYPE event type (value for .01)
"RTN","IBNCPLOG",182,0)
 ;returns ien for the event
"RTN","IBNCPLOG",183,0)
 ;or 0 if failed
"RTN","IBNCPLOG",184,0)
NEWEVENT(IBIEN,EVNTTYPE) ;
"RTN","IBNCPLOG",185,0)
 N EVNTRECN
"RTN","IBNCPLOG",186,0)
 S EVNTRECN=$$INSITEM^IBNCPUT1(366.141,IBIEN,$$EXT2INT^IBNCPUT1(EVNTTYPE),"","")
"RTN","IBNCPLOG",187,0)
 I EVNTRECN>0 Q EVNTRECN
"RTN","IBNCPLOG",188,0)
 Q 0
"RTN","IBNCPLOG",189,0)
 ;
"RTN","IBNCPLOG",190,0)
 ;add insurance node
"RTN","IBNCPLOG",191,0)
 ;IBDTIEN - ien on top [DATE] level
"RTN","IBNCPLOG",192,0)
 ;IBEVIEN - ien in [EVENTS] multiple
"RTN","IBNCPLOG",193,0)
 ;returns :
"RTN","IBNCPLOG",194,0)
 ; new ien in INSURANCE multiple
"RTN","IBNCPLOG",195,0)
ADDINS(IBDTIEN,IBEVIEN) ;
"RTN","IBNCPLOG",196,0)
 N IBX,IBX2
"RTN","IBNCPLOG",197,0)
 F IBX=1:1:99999 I '$D(^IBCNR(366.14,IBDTIEN,1,IBEVIEN,5,IBX)) D  Q
"RTN","IBNCPLOG",198,0)
 . S IBX2=$$INSITEM^IBNCPUT1(366.1412,IBEVIEN_","_IBDTIEN,IBX,IBX)
"RTN","IBNCPLOG",199,0)
 Q +$O(^IBCNR(366.14,IBDTIEN,1,IBEVIEN,5,"B",IBX,0))
"RTN","IBNCPLOG",200,0)
 ;
"RTN","IBNCPUT3")
0^5^B15411272
"RTN","IBNCPUT3",1,0)
IBNCPUT3 ;ALB/SS - ePharmacy secondary billing ;12-DEC-08
"RTN","IBNCPUT3",2,0)
 ;;2.0;INTEGRATED BILLING;**411**;21-MAR-94;Build 29
"RTN","IBNCPUT3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPUT3",4,0)
 ;
"RTN","IBNCPUT3",5,0)
 Q
"RTN","IBNCPUT3",6,0)
 ;
"RTN","IBNCPUT3",7,0)
 ;used by ECME
"RTN","IBNCPUT3",8,0)
 ;ICR #5355 
"RTN","IBNCPUT3",9,0)
 ;determine if there is a bill with a given bill #
"RTN","IBNCPUT3",10,0)
 ;input: 
"RTN","IBNCPUT3",11,0)
 ; IBBIL - bill # entered by the user
"RTN","IBNCPUT3",12,0)
 ;returns:
"RTN","IBNCPUT3",13,0)
 ; file #399 ien if found
"RTN","IBNCPUT3",14,0)
 ; zero if not found 
"RTN","IBNCPUT3",15,0)
ISBILL(IBBIL) ;
"RTN","IBNCPUT3",16,0)
 N IB399
"RTN","IBNCPUT3",17,0)
 S IB399=+$O(^DGCR(399,"B",IBBIL,0))
"RTN","IBNCPUT3",18,0)
 I IB399>0 Q IB399  ;bill # was entered
"RTN","IBNCPUT3",19,0)
 Q 0  ;nothing was found
"RTN","IBNCPUT3",20,0)
 ;
"RTN","IBNCPUT3",21,0)
 ;get bill details from file #399
"RTN","IBNCPUT3",22,0)
 ;Used by ECME - ICR #5355 
"RTN","IBNCPUT3",23,0)
 ;input:
"RTN","IBNCPUT3",24,0)
 ;  IB399 - bill ien of (#399)
"RTN","IBNCPUT3",25,0)
 ;  IBINFO - output array, by reference
"RTN","IBNCPUT3",26,0)
 ;Returns two piece value:
"RTN","IBNCPUT3",27,0)
 ; Piece#1 :
"RTN","IBNCPUT3",28,0)
 ;  -1 if an error
"RTN","IBNCPUT3",29,0)
 ;  the payer sequence (P-primary, S-secondary,...)
"RTN","IBNCPUT3",30,0)
 ; Piece#2 :
"RTN","IBNCPUT3",31,0)
 ;  error message if piece#1 = -1
"RTN","IBNCPUT3",32,0)
 ;  otherwise - patient's DFN
"RTN","IBNCPUT3",33,0)
 ;  
"RTN","IBNCPUT3",34,0)
 ;Output array, passed in by reference.
"RTN","IBNCPUT3",35,0)
 ;Format of data returned in the array:
"RTN","IBNCPUT3",36,0)
 ; IBINFO("INS IEN") - insurance ien, ien of the file (#36)
"RTN","IBNCPUT3",37,0)
 ; IBINFO("INS NAME") - insurance name as a text
"RTN","IBNCPUT3",38,0)
 ; IBINFO("BILL #") - bill number, field (#.01) of the file (#399)
"RTN","IBNCPUT3",39,0)
 ; IBINFO("AR STATUS") - Account Receivable status for the bill                    
"RTN","IBNCPUT3",40,0)
 ; IBINFO("DOS") - date of service (FM format)
"RTN","IBNCPUT3",41,0)
 ; IBINFO("PLAN") - plan ien of (#355.3)
"RTN","IBNCPUT3",42,0)
 ; IBINFO("FILL NUMBER") - refill number                                          
"RTN","IBNCPUT3",43,0)
 ; IBINFO("PRESCRIPTION") - prescription ien of file (#52)  ;  
"RTN","IBNCPUT3",44,0)
BILINF(IB399,IBINFO) ;
"RTN","IBNCPUT3",45,0)
 Q:IB399=0 ""
"RTN","IBNCPUT3",46,0)
 N IBDFN,IBZZ,IBRXN,IBFIL,IB3624,IBPSEQ
"RTN","IBNCPUT3",47,0)
 ;
"RTN","IBNCPUT3",48,0)
 S IBDFN=$P($G(^DGCR(399,IB399,0)),U,2)
"RTN","IBNCPUT3",49,0)
 S IBPSEQ=$P($G(^DGCR(399,IB399,0)),U,21)
"RTN","IBNCPUT3",50,0)
 I IBPSEQ="" Q "-1^Cannot determine payer sequence"
"RTN","IBNCPUT3",51,0)
 S IBINFO("INS IEN")=$P($G(^DGCR(399,IB399,"MP")),U)
"RTN","IBNCPUT3",52,0)
 S IBINFO("INS NAME")=$P($G(^DIC(36,+IBINFO("INS IEN"),0)),U)
"RTN","IBNCPUT3",53,0)
 S IBINFO("BILL #")=$P($G(^DGCR(399,IB399,0)),U,1)
"RTN","IBNCPUT3",54,0)
 S IBINFO("IB STATUS")=$P($G(^DGCR(399,IB399,0)),U,13)
"RTN","IBNCPUT3",55,0)
 S IBINFO("AR STATUS")=$P($$ARSTATA^IBJTU4(IB399),U,2)
"RTN","IBNCPUT3",56,0)
 S IBINFO("DOS")=$P($G(^DGCR(399,IB399,0)),U,3)
"RTN","IBNCPUT3",57,0)
 S IBINFO("PLAN")=$$GETPLAN(IB399)
"RTN","IBNCPUT3",58,0)
 ;
"RTN","IBNCPUT3",59,0)
 S IB3624=0
"RTN","IBNCPUT3",60,0)
 S IB3624=$O(^IBA(362.4,"C",IB399,0))
"RTN","IBNCPUT3",61,0)
 I IB3624>0 D
"RTN","IBNCPUT3",62,0)
 . S IBZZ=^IBA(362.4,IB3624,0)
"RTN","IBNCPUT3",63,0)
 . I IBZZ>0 S IBINFO("PRESCRIPTION")=+$P(IBZZ,U,5),IBINFO("FILL NUMBER")=+$P(IBZZ,U,10),IBINFO("DOS")=+$P(IBZZ,U,3)
"RTN","IBNCPUT3",64,0)
 I $G(IBINFO("PRESCRIPTION"))="" Q "-1^no RX ien"
"RTN","IBNCPUT3",65,0)
 I $G(IBINFO("FILL NUMBER"))="" Q "-1^no Refill No"
"RTN","IBNCPUT3",66,0)
 ;
"RTN","IBNCPUT3",67,0)
 Q IBPSEQ_U_IBDFN
"RTN","IBNCPUT3",68,0)
 ;
"RTN","IBNCPUT3",69,0)
GETPLAN(IB399) ;
"RTN","IBNCPUT3",70,0)
 N IBPLN,IBNODE
"RTN","IBNCPUT3",71,0)
 S IBPLN=0
"RTN","IBNCPUT3",72,0)
 S IBNODE=$P($G(^DGCR(399,IB399,0)),"^",21),IBNODE=$S(IBNODE="P":1,IBNODE="S":2,IBNODE="T":3,1:"")
"RTN","IBNCPUT3",73,0)
 S IBPLN=$P($G(^DGCR(399,IB399,"I"_IBNODE)),U,18)
"RTN","IBNCPUT3",74,0)
 Q IBPLN
"RTN","IBNCPUT3",75,0)
 ;
"RTN","IBNCPUT3",76,0)
 ;Find bill(s) for the specific RX/refill
"RTN","IBNCPUT3",77,0)
 ;Used by ECME - ICR #5355
"RTN","IBNCPUT3",78,0)
 ;IBRXIEN RX ien (#52)
"RTN","IBNCPUT3",79,0)
 ;IBRXREF refill #
"RTN","IBNCPUT3",80,0)
 ;IBRXCOB - (optional) Payer Sequence ("P"- primary,"S" - secondary,"T" -tertiary
"RTN","IBNCPUT3",81,0)
 ;IBDOS-(optional)Date of Service 
"RTN","IBNCPUT3",82,0)
 ;IBARR - by reference to return the list of bills for the RX#
"RTN","IBNCPUT3",83,0)
 ;Return:
"RTN","IBNCPUT3",84,0)
 ; return 2 pieces
"RTN","IBNCPUT3",85,0)
 ; piece 1 - the number of ANY (cancelled, active, etc) bills found for the RX/refill
"RTN","IBNCPUT3",86,0)
 ; piece 2 - the latest active bill's ien
"RTN","IBNCPUT3",87,0)
 ;Return all bills in the array IBARR as 
"RTN","IBNCPUT3",88,0)
 ; IBARR(IEN of the file #399 )= Bill#^status^date^insurance name^payer sequence^RX ien^Refill No
"RTN","IBNCPUT3",89,0)
 ; 
"RTN","IBNCPUT3",90,0)
RXBILL(IBRXIEN,IBRXREF,IBRXCOB,IBDOS,IBARR) ;
"RTN","IBNCPUT3",91,0)
 N IB3624,IB3624V,IB399,IBRET,IBCNT,IBRXNUM,IB399ACT
"RTN","IBNCPUT3",92,0)
 S IBCNT=0
"RTN","IBNCPUT3",93,0)
 S IB3624=0
"RTN","IBNCPUT3",94,0)
 S IB399ACT=0
"RTN","IBNCPUT3",95,0)
 S IBRXNUM=$$RXAPI1^IBNCPUT1(IBRXIEN,.01,"E") ;external format
"RTN","IBNCPUT3",96,0)
 Q:IBRXNUM="" 0
"RTN","IBNCPUT3",97,0)
 F  S IB3624=$O(^IBA(362.4,"B",IBRXNUM,IB3624)) Q:+IB3624=0  D
"RTN","IBNCPUT3",98,0)
 . S IB3624V=$G(^IBA(362.4,IB3624,0))
"RTN","IBNCPUT3",99,0)
 . I $P(IB3624V,U,10)'=IBRXREF Q
"RTN","IBNCPUT3",100,0)
 . I $G(IBDOS) I $P(IB3624V,U,3)'=IBDOS Q
"RTN","IBNCPUT3",101,0)
 . S IB399=+$P(IB3624V,U,2)
"RTN","IBNCPUT3",102,0)
 . I IB399=0 Q
"RTN","IBNCPUT3",103,0)
 . N IBINFARR
"RTN","IBNCPUT3",104,0)
 . S IBRET=$$BILINF(IB399,.IBINFARR)
"RTN","IBNCPUT3",105,0)
 . I +IBRET=-1 Q
"RTN","IBNCPUT3",106,0)
 . I $G(IBRXCOB)'="",$P(IBRET,U)'=IBRXCOB Q
"RTN","IBNCPUT3",107,0)
 . S IBARR(IB399)=$G(IBINFARR("BILL #"))_U_$G(IBINFARR("AR STATUS"))_U_$G(IBINFARR("DOS"))_U_$G(IBINFARR("INS NAME"))_U_($P(IBRET,U))_U_$G(IBINFARR("PRESCRIPTION"))_U_$G(IBINFARR("FILL NUMBER"))_U_$G(IBINFARR("IB STATUS"))
"RTN","IBNCPUT3",108,0)
 . I $G(IBINFARR("AR STATUS"))="A" S IB399ACT=IB399
"RTN","IBNCPUT3",109,0)
 . S IBCNT=IBCNT+1
"RTN","IBNCPUT3",110,0)
 Q IBCNT_U_IB399ACT
"RTN","IBNCPUT3",111,0)
 ;
"RTN","IBNCPUT3",112,0)
 ;IBRATYP - rate type (ien of file #399.3)
"RTN","IBNCPUT3",113,0)
 ;IBDT - date
"RTN","IBNCPUT3",114,0)
COSTTYP(IBRATYP,IBDT) ;
"RTN","IBNCPUT3",115,0)
 N IBRS,IBRET
"RTN","IBNCPUT3",116,0)
 S IBRET=$P($$EVNTITM^IBCRU3(IBRATYP,3,"PRESCRIPTION FILL",IBDT,.IBRS),";",1)
"RTN","IBNCPUT3",117,0)
 Q $S(IBRET="VA COST":"C^T",IBRET="1":"T^V",1:"")
"RTN","IBNCPUT3",118,0)
 ;
"RTN","IBNCPUT3",119,0)
 ;IBNCPUT3
"RTN","IBOSRX")
0^15^B12228419
"RTN","IBOSRX",1,0)
IBOSRX ;ALB/ESG - POTENTIAL SECONDARY RX CLAIMS REPORT ;6-JUL-10
"RTN","IBOSRX",2,0)
 ;;2.0;INTEGRATED BILLING;**411**;21-MAR-94;Build 29
"RTN","IBOSRX",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBOSRX",4,0)
 ;
"RTN","IBOSRX",5,0)
 ; DBIA 5361 entry point at COLLECT
"RTN","IBOSRX",6,0)
 ;
"RTN","IBOSRX",7,0)
 ; Collect and return potential secondary rx claims
"RTN","IBOSRX",8,0)
 ; Input: SDT = Start date FM format
"RTN","IBOSRX",9,0)
 ;        EDT = End date FM format
"RTN","IBOSRX",10,0)
 ;
"RTN","IBOSRX",11,0)
 ; Return:
"RTN","IBOSRX",12,0)
 ; ^TMP("BPSRPT9A",$J,n) = RX IEN^RX#^FILL#^BILL#^DFN^DATE^PRIMARY INS NAME^399 ien^TOTAL CHARGES
"RTN","IBOSRX",13,0)
 ; ^TMP("BPSRPT9A",$J,n,n,1) = INSURANCE COMPANY IEN^INSURANCE COMPANY NAME
"RTN","IBOSRX",14,0)
 ; ^TMP("BPSRPT9A",$J,n,n,2) = INSURANCE COMPANY ADDRESS
"RTN","IBOSRX",15,0)
 ; ^TMP("BPSRPT9A",$J,n,n,7) = COB INDICATOR^COB DESC
"RTN","IBOSRX",16,0)
 ;
"RTN","IBOSRX",17,0)
 Q
"RTN","IBOSRX",18,0)
 ;
"RTN","IBOSRX",19,0)
COLLECT(SDT,EDT) ; entry point DBIA 5361
"RTN","IBOSRX",20,0)
 ;
"RTN","IBOSRX",21,0)
 N CNT,IBSDT,IBBILL,IB0,INS,IBPINS,IBINS,IBRET,RIEN,RXD,RX,FL,RXIEN,SECBLFND,RBIEN,RBD,IB,ST,IBTOTCH
"RTN","IBOSRX",22,0)
 ;
"RTN","IBOSRX",23,0)
 ; scratch global should be killed by the calling routine
"RTN","IBOSRX",24,0)
 ;
"RTN","IBOSRX",25,0)
 S IBSDT=$O(^DGCR(399,"D",SDT),-1)
"RTN","IBOSRX",26,0)
 F  S IBSDT=$O(^DGCR(399,"D",IBSDT)) Q:'IBSDT!(IBSDT>EDT)  D
"RTN","IBOSRX",27,0)
 . S IBBILL=0
"RTN","IBOSRX",28,0)
 . F  S IBBILL=$O(^DGCR(399,"D",IBSDT,IBBILL)) Q:'IBBILL  D
"RTN","IBOSRX",29,0)
 .. ;
"RTN","IBOSRX",30,0)
 .. ; consider only pharmacy bills
"RTN","IBOSRX",31,0)
 .. Q:'$D(^IBA(362.4,"C",IBBILL))
"RTN","IBOSRX",32,0)
 .. ;
"RTN","IBOSRX",33,0)
 .. S IB0=$G(^DGCR(399,IBBILL,0))
"RTN","IBOSRX",34,0)
 .. I '$F(".3.4.","."_$P(IB0,U,13)_".") Q           ; must be auth/print/tx
"RTN","IBOSRX",35,0)
 .. I $$COBN^IBCEF(IBBILL)'=1 Q                     ; must be primary
"RTN","IBOSRX",36,0)
 .. S INS=+$G(^DGCR(399,IBBILL,"I1"))
"RTN","IBOSRX",37,0)
 .. S IBPINS=$P($G(^DIC(36,INS,0)),U,1)             ; primary ins co name
"RTN","IBOSRX",38,0)
 .. S IBTOTCH=+$P($G(^DGCR(399,IBBILL,"U1")),U,1)   ; total charges on claim
"RTN","IBOSRX",39,0)
 .. ;
"RTN","IBOSRX",40,0)
 .. ; check insurances for this patient on this date
"RTN","IBOSRX",41,0)
 .. K IBINS
"RTN","IBOSRX",42,0)
 .. S IBRET=$$INSUR^IBBAPI($P(IB0,U,2),IBSDT,"P",.IBINS,"1,2,7")
"RTN","IBOSRX",43,0)
 .. I '$D(IBINS("IBBAPI","INSUR",2)) Q   ; do not have at least 2 Rx policies so get out
"RTN","IBOSRX",44,0)
 .. ;
"RTN","IBOSRX",45,0)
 .. ; now loop thru all Rx's on this claim - paper claims may have more than one
"RTN","IBOSRX",46,0)
 .. S RIEN=0 F  S RIEN=$O(^IBA(362.4,"C",IBBILL,RIEN)) Q:'RIEN  D
"RTN","IBOSRX",47,0)
 ... S RXD=$G(^IBA(362.4,RIEN,0))
"RTN","IBOSRX",48,0)
 ... S RX=$P(RXD,U,1) Q:RX=""       ; RX#
"RTN","IBOSRX",49,0)
 ... S FL=+$P(RXD,U,10)             ; fill#
"RTN","IBOSRX",50,0)
 ... S RXIEN=+$P(RXD,U,5)           ; RX ien to file# 52
"RTN","IBOSRX",51,0)
 ... ;
"RTN","IBOSRX",52,0)
 ... S SECBLFND=0   ; flag indicating if secondary bill was found or not for this Rx/fill#
"RTN","IBOSRX",53,0)
 ... ;
"RTN","IBOSRX",54,0)
 ... ; now loop thru all entries in this file for this RX
"RTN","IBOSRX",55,0)
 ... S RBIEN=0 F  S RBIEN=$O(^IBA(362.4,"B",RX,RBIEN)) Q:'RBIEN  I RBIEN'=RIEN D  Q:SECBLFND
"RTN","IBOSRX",56,0)
 .... S RBD=$G(^IBA(362.4,RBIEN,0))
"RTN","IBOSRX",57,0)
 .... I +$P(RBD,U,10)'=FL Q               ; fill# check
"RTN","IBOSRX",58,0)
 .... S IB=+$P(RBD,U,2)                   ; claim#
"RTN","IBOSRX",59,0)
 .... I $$COBN^IBCEF(IB)'>1 Q             ; looking for payer seq 2 or 3
"RTN","IBOSRX",60,0)
 .... S ST=$P($G(^DGCR(399,IB,0)),U,13)   ; claim status
"RTN","IBOSRX",61,0)
 .... I '$F(".3.4.","."_ST_".") Q         ; must be auth/print/tx
"RTN","IBOSRX",62,0)
 .... ;
"RTN","IBOSRX",63,0)
 .... ; found a secondary claim!
"RTN","IBOSRX",64,0)
 .... S SECBLFND=1
"RTN","IBOSRX",65,0)
 .... Q
"RTN","IBOSRX",66,0)
 ... ;
"RTN","IBOSRX",67,0)
 ... ; if we found a secondary claim for this Rx/fill# then get out
"RTN","IBOSRX",68,0)
 ... I SECBLFND Q
"RTN","IBOSRX",69,0)
 ... ;
"RTN","IBOSRX",70,0)
 ... S CNT=$O(^TMP("BPSRPT9A",$J,""),-1)+1
"RTN","IBOSRX",71,0)
 ... S ^TMP("BPSRPT9A",$J,CNT)=RXIEN_U_RX_U_FL_U_$P(IB0,U,1)_U_$P(IB0,U,2)_U_IBSDT_U_IBPINS_U_IBBILL_U_IBTOTCH
"RTN","IBOSRX",72,0)
 ... M ^TMP("BPSRPT9A",$J,CNT)=IBINS("IBBAPI","INSUR")
"RTN","IBOSRX",73,0)
 ... Q
"RTN","IBOSRX",74,0)
 .. Q
"RTN","IBOSRX",75,0)
 . Q
"RTN","IBOSRX",76,0)
 Q
"RTN","IBOSRX",77,0)
 ;
"RTN","IBRFN")
0^4^B52599969
"RTN","IBRFN",1,0)
IBRFN ;ALB/AAS - Supported functions for AR ;5-MAY-1992
"RTN","IBRFN",2,0)
 ;;2.0;INTEGRATED BILLING;**52,130,183,223,309,276,347,411**;21-MAR-94;Build 29
"RTN","IBRFN",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBRFN",4,0)
 ;
"RTN","IBRFN",5,0)
ERR(Y) ; Input Y = -1^error code[;error code...]^literal message
"RTN","IBRFN",6,0)
 ; Output IBRERR = error message 1
"RTN","IBRFN",7,0)
 ;        if more than one code then
"RTN","IBRFN",8,0)
 ;        IBRERR(n)=error code n
"RTN","IBRFN",9,0)
 N N,X,X1,X2 K IBRERR S IBRERR=""
"RTN","IBRFN",10,0)
 G:+Y>0 ERRQ
"RTN","IBRFN",11,0)
 S X2=$P(Y,U,2) F N=1:1 S X=$P(X2,";",N) Q:X=""  S X1=$P($G(^IBE(350.8,+$O(^IBE(350.8,"AC",X,0)),0)),U,2) D
"RTN","IBRFN",12,0)
 .I N=1 S IBRERR=X1
"RTN","IBRFN",13,0)
 .I $P(Y,U,3)]""!($P(X2,";",2,99)]"") S IBRERR(N)=X1
"RTN","IBRFN",14,0)
 I $P(Y,U,3)]"" S N=N+1,IBRERR(N)=$P(Y,U,3)
"RTN","IBRFN",15,0)
ERRQ Q IBRERR
"RTN","IBRFN",16,0)
 ;
"RTN","IBRFN",17,0)
MESS(Y) ;  -input y=error code - from file 350.8 (piece 3)
"RTN","IBRFN",18,0)
 ;   output error message
"RTN","IBRFN",19,0)
 Q $P($G(^IBE(350.8,+$O(^IBE(350.8,"AC",Y,0)),0)),U,2)
"RTN","IBRFN",20,0)
 ;
"RTN","IBRFN",21,0)
SVDT(BN,VDT) ;returns service dates for a specific bill
"RTN","IBRFN",22,0)
 ;  Input:  BN bill number (external form)
"RTN","IBRFN",23,0)
 ;          VDT name of array to hold outpatient visit dates, pass by value (if needed)
"RTN","IBRFN",24,0)
 ; Output:  X function value, string, = 0 if bill not found
"RTN","IBRFN",25,0)
 ;          = 1 (Inpt) or 2 (Outpt)^event date^stmt from date^stmt to date^LOS (I)^Number of visit dates (O)
"RTN","IBRFN",26,0)
 ;          all are internal form, any piece may be null if not defined for the bill
"RTN","IBRFN",27,0)
 ;          array containing outpatient visit dates as subscripts/no data, if VDT passed by value
"RTN","IBRFN",28,0)
 N X,Y,IFN S X=0,BN=$G(BN)
"RTN","IBRFN",29,0)
 I BN'="" S IFN=+$O(^DGCR(399,"B",BN,0)),Y=$G(^DGCR(399,IFN,0)) I Y'="" D
"RTN","IBRFN",30,0)
 . S X=$S(+$P(Y,U,5)<1:"",+$P(Y,U,5)<3:1,+$P(Y,U,5)<5:2,1:"")_U_$P(Y,U,3),Y=$G(^DGCR(399,IFN,"U"))
"RTN","IBRFN",31,0)
 . S X=X_U_$P(Y,U,1)_U_$P(Y,U,2)_U_$P(Y,U,15)_U_$P($G(^DGCR(399,IFN,"OP",0)),U,4)
"RTN","IBRFN",32,0)
 . S Y=0 F  S Y=$O(^DGCR(399,IFN,"OP",Y)) Q:'Y  S VDT(Y)=""
"RTN","IBRFN",33,0)
 Q X
"RTN","IBRFN",34,0)
 ;
"RTN","IBRFN",35,0)
 ;
"RTN","IBRFN",36,0)
REC(IBSTR,IBTYPE) ; Find the AR for an Authorization or Rx number
"RTN","IBRFN",37,0)
 ;   Input: IBSTR - FI Authorization Number or Rx Number
"RTN","IBRFN",38,0)
 ;  Output: IBAR  >0 => ptr to claim/AR in files 399/430
"RTN","IBRFN",39,0)
 ;                -1 => No receivable found
"RTN","IBRFN",40,0)
 ;          IBTYPE (by ref) - how the IBSTR was recognized: 1-Auth,2-ECME,3-Rx#,0-Unknown
"RTN","IBRFN",41,0)
 ;
"RTN","IBRFN",42,0)
 N IBAR,IBARR,IBRX,IBKEY,IBKEYS,IBREF,IBPREF
"RTN","IBRFN",43,0)
 S IBTYPE=0
"RTN","IBRFN",44,0)
 S IBAR=-1
"RTN","IBRFN",45,0)
 I $G(IBSTR)="" G RECQ
"RTN","IBRFN",46,0)
 ;
"RTN","IBRFN",47,0)
 ; extended syntax to indicate the type:
"RTN","IBRFN",48,0)
 ; T.000000 for TRICARE, E.7000000 for ECME, R.50000000 for Rx
"RTN","IBRFN",49,0)
 I $L($P(IBSTR,"."))=1,$P(IBSTR,".",2)'="" D
"RTN","IBRFN",50,0)
 . S IBPREF=$TR($P(IBSTR,"."),"ter","TER")
"RTN","IBRFN",51,0)
 . S IBSTR=$P(IBSTR,".",2,255)
"RTN","IBRFN",52,0)
 . I $E(IBPREF)="T" S IBTYPE=1 ; TRICARE Auth#
"RTN","IBRFN",53,0)
 . I $E(IBPREF)="E" S IBTYPE=2 ; ECME #
"RTN","IBRFN",54,0)
 . I $E(IBPREF)="R" S IBTYPE=3 ; Rx #
"RTN","IBRFN",55,0)
 ;
"RTN","IBRFN",56,0)
 ; look for TRICARE number
"RTN","IBRFN",57,0)
 I (IBTYPE=0)!(IBTYPE=1) S IBAR=$$AREC(IBSTR) I IBAR>0 S IBTYPE=1 G RECQ
"RTN","IBRFN",58,0)
 ;
"RTN","IBRFN",59,0)
 ; - look for ecme number
"RTN","IBRFN",60,0)
 I (IBTYPE=0)!(IBTYPE=2) S IBAR=$$EREC(IBSTR) I IBAR>0 S IBTYPE=2 G RECQ
"RTN","IBRFN",61,0)
 ;
"RTN","IBRFN",62,0)
 I IBTYPE,IBTYPE'=3 G RECQ
"RTN","IBRFN",63,0)
 ;
"RTN","IBRFN",64,0)
 ; - treat as an rx number
"RTN","IBRFN",65,0)
 S IBAR=$$RXREC(IBSTR) I IBAR>0 S IBTYPE=3
"RTN","IBRFN",66,0)
 ;
"RTN","IBRFN",67,0)
RECQ Q IBAR
"RTN","IBRFN",68,0)
 ;
"RTN","IBRFN",69,0)
RXREC(IBRXN) ; Search the Rx
"RTN","IBRFN",70,0)
 N IBR,IBX,IBARR,IBY,IBBIL,IBTRKN,IBFIL,IBRX
"RTN","IBRFN",71,0)
 I $L(IBRXN)<5,'$D(^IBA(362.4,"B",IBRXN)) Q -1
"RTN","IBRFN",72,0)
 ; Scan 362.4
"RTN","IBRFN",73,0)
 ; 1) check the exact match:
"RTN","IBRFN",74,0)
 S IBX=0 F  S IBX=$O(^IBA(362.4,"B",IBRXN,IBX)) Q:'IBX  D
"RTN","IBRFN",75,0)
 . S IBBIL=$P($G(^IBA(362.4,IBX,0)),U,2) Q:'IBBIL
"RTN","IBRFN",76,0)
 . I $P($G(^DGCR(399,IBBIL,0)),U,13)=7 Q  ; ignore cancld
"RTN","IBRFN",77,0)
 . S IBARR(IBBIL)=""
"RTN","IBRFN",78,0)
 ; 2) check Rx with postfixes like "A","B" etc
"RTN","IBRFN",79,0)
 S IBR=IBRXN_" " F  S IBR=$O(^IBA(362.4,"B",IBR)) Q:$E(IBR,1,$L(IBRXN))'=IBRXN  D
"RTN","IBRFN",80,0)
 . I $E(IBR,$L(IBRXN)+1)'?1A Q  ; only letters in postfx
"RTN","IBRFN",81,0)
 . S IBX=0 F  S IBX=$O(^IBA(362.4,"B",IBR,IBX)) Q:'IBX  D
"RTN","IBRFN",82,0)
 . . S IBBIL=$P($G(^IBA(362.4,IBX,0)),U,2) Q:'IBBIL
"RTN","IBRFN",83,0)
 . . I $P($G(^DGCR(399,IBBIL,0)),U,13)=7 Q  ; ignore cancld
"RTN","IBRFN",84,0)
 . . S IBARR(IBBIL)=""
"RTN","IBRFN",85,0)
 ; 3) Now scan CT (356):
"RTN","IBRFN",86,0)
 S DIC=52,DIC(0)="BO",X=IBSTR D DIC^PSODI(52,.DIC,X) S IBRX=+Y K DIC,X,Y
"RTN","IBRFN",87,0)
 I IBRX S IBFIL="" F  S IBFIL=$O(^IBT(356,"ARXFL",IBRX,IBFIL)) Q:IBFIL=""  D
"RTN","IBRFN",88,0)
 . S IBTRKN="" F  S IBTRKN=$O(^IBT(356,"ARXFL",IBRX,IBFIL,IBTRKN)) Q:IBTRKN=""  D
"RTN","IBRFN",89,0)
 .. S IBBIL=$P($G(^IBT(356,IBTRKN,0)),U,11) Q:'IBBIL
"RTN","IBRFN",90,0)
 .. I $P($G(^DGCR(399,IBBIL,0)),U,13)=7 Q  ; ignore cancld
"RTN","IBRFN",91,0)
 .. S IBARR(IBBIL)=""
"RTN","IBRFN",92,0)
 ;
"RTN","IBRFN",93,0)
 S IBY=$O(IBARR("")) I IBY'>0 Q -1  ;not found
"RTN","IBRFN",94,0)
 I '$O(IBARR(IBY)) D DTL(+IBY,"Rx#",IBRXN) Q +IBY  ;one only
"RTN","IBRFN",95,0)
 W !!,"More than one fill for Rx# ",IBSTR," has been billed."
"RTN","IBRFN",96,0)
 S IBY=$$SEL(.IBARR)
"RTN","IBRFN",97,0)
 D DTL(IBY,"Rx#",IBRXN)
"RTN","IBRFN",98,0)
 Q IBY
"RTN","IBRFN",99,0)
 ;
"RTN","IBRFN",100,0)
AREC(AUTH) ; Find the Receivable for a TRICARE FI Authorization Number
"RTN","IBRFN",101,0)
 ;   Input: AUTH - Fiscal Intermediary Authorization Number
"RTN","IBRFN",102,0)
 ;  Output: IBIFN  >0 => ptr to claim/AR in files 399/430
"RTN","IBRFN",103,0)
 ;                 -1 => No receivable found
"RTN","IBRFN",104,0)
 N IBIFN
"RTN","IBRFN",105,0)
 S IBIFN=-1
"RTN","IBRFN",106,0)
 I $G(AUTH)="" G ARECQ
"RTN","IBRFN",107,0)
 S IBIFN=$P($G(^IBA(351.5,+$O(^IBA(351.5,"AUTH",AUTH,0)),0)),U,9)
"RTN","IBRFN",108,0)
 S:'IBIFN IBIFN=-1
"RTN","IBRFN",109,0)
ARECQ ;
"RTN","IBRFN",110,0)
 D DTL(IBIFN,"TRICARE#",AUTH)
"RTN","IBRFN",111,0)
 Q IBIFN
"RTN","IBRFN",112,0)
 ;
"RTN","IBRFN",113,0)
 ;
"RTN","IBRFN",114,0)
EREC(AUTH) ; Find the Receivable for an ECME FI Number
"RTN","IBRFN",115,0)
 ;   Input: AUTH  - Fiscal Intermediary ECME Number
"RTN","IBRFN",116,0)
 ;  Output: IBIFN  >0 => ptr to claim/AR in files 399/430
"RTN","IBRFN",117,0)
 ;                 -1 => No receivable found
"RTN","IBRFN",118,0)
 ;
"RTN","IBRFN",119,0)
 N IBIFN,IBC,IBX,IBA,IBE,IBES
"RTN","IBRFN",120,0)
 S IBIFN=-1,IBC=0
"RTN","IBRFN",121,0)
 I $G(AUTH)="" G ARECQ
"RTN","IBRFN",122,0)
 S (IBE,IBES)=$$BCID^IBNCPDP4(+AUTH,"")
"RTN","IBRFN",123,0)
 F  S IBE=$O(^DGCR(399,"AG",IBE)) Q:IBE'[IBES  D
"RTN","IBRFN",124,0)
 . S IBX=0 F  S IBX=$O(^DGCR(399,"AG",IBE,IBX)) Q:'IBX  D
"RTN","IBRFN",125,0)
 .. I $P($G(^DGCR(399,IBX,0)),U,13)=7 Q  ;exclude cancld
"RTN","IBRFN",126,0)
 .. S IBA(IBX)="",IBC=IBC+1
"RTN","IBRFN",127,0)
 I IBC'>1 S IBIFN=$O(IBA(0)) G ERECQ  ; only one found
"RTN","IBRFN",128,0)
 W !!,"More than one fill for ECME# ",AUTH," has been billed."
"RTN","IBRFN",129,0)
 S IBIFN=$$SEL(.IBA)
"RTN","IBRFN",130,0)
ERECQ S:'IBIFN IBIFN=-1
"RTN","IBRFN",131,0)
 D DTL(IBIFN,"ECME#",AUTH) ;details
"RTN","IBRFN",132,0)
 Q IBIFN
"RTN","IBRFN",133,0)
 ;
"RTN","IBRFN",134,0)
DTL(IBIFN,TYPE,AUTH) ;Details
"RTN","IBRFN",135,0)
 Q:IBIFN'>0  Q:AUTH=""
"RTN","IBRFN",136,0)
 N IBZ,IBBIL,IBPAT,IBPATN,IBRX,IB3624,IBDRUG,IBQTY,IBDAT,DIR
"RTN","IBRFN",137,0)
 S IBZ=$G(^DGCR(399,IBIFN,0))
"RTN","IBRFN",138,0)
 S IBBIL=$P(IBZ,U),IBPAT=$P(IBZ,U,2),IBDAT=$P(IBZ,U,3)
"RTN","IBRFN",139,0)
 S IBPATN=$P($G(^DPT(+IBPAT,0)),U)
"RTN","IBRFN",140,0)
 S IB3624=$G(^IBA(362.4,+$O(^IBA(362.4,"C",IBIFN,"")),0))
"RTN","IBRFN",141,0)
 D ZERO^IBRXUTL(+$P(IB3624,U,4))
"RTN","IBRFN",142,0)
 S IBDRUG=$G(^TMP($J,"IBDRUG",+$P(IB3624,U,4),.01))
"RTN","IBRFN",143,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBRFN",144,0)
 S IBRX=$$FILE^IBRXUTL(+$P(IB3624,U,5),.01)
"RTN","IBRFN",145,0)
 S IBQTY=+$P(IB3624,U,7)
"RTN","IBRFN",146,0)
 W !!,"Found IB Bill ",IBBIL," matching to "_TYPE_" '",AUTH,"':"
"RTN","IBRFN",147,0)
 W !,"Rx#",IBRX," ",$$DAT3^IBOUTL(IBDAT),", ",IBPATN,", ",IBDRUG I IBQTY W " (",IBQTY,")"
"RTN","IBRFN",148,0)
 Q
"RTN","IBRFN",149,0)
 ;
"RTN","IBRFN",150,0)
AUD(IBIFN) ; Does the Accounts Receivable need to be audited?
"RTN","IBRFN",151,0)
 ;   Input: IBIFN  - ptr to claim/AR in files 399/430
"RTN","IBRFN",152,0)
 ;  Output: 0 => Claim does not have to be audited
"RTN","IBRFN",153,0)
 ;               (claim was set up automatically)
"RTN","IBRFN",154,0)
 ;          1 => Claim must be audited
"RTN","IBRFN",155,0)
 ;               (claim was established manually)
"RTN","IBRFN",156,0)
 ;
"RTN","IBRFN",157,0)
AUDQ Q $O(^IBA(351.5,"ACL",+$G(IBIFN),0))'>0
"RTN","IBRFN",158,0)
 ;
"RTN","IBRFN",159,0)
 ;
"RTN","IBRFN",160,0)
TYP(IBIFN) ; Determine the bill type for an Accounts Receivable.
"RTN","IBRFN",161,0)
 ;  Input:  IBIFN - ptr to claim/AR in files 399/430
"RTN","IBRFN",162,0)
 ; Output:  I => Inpatient bill
"RTN","IBRFN",163,0)
 ;          O => Outpatient bill
"RTN","IBRFN",164,0)
 ;          PH => Pharmacy bill
"RTN","IBRFN",165,0)
 ;          PR => Prosthetics bill
"RTN","IBRFN",166,0)
 ;
"RTN","IBRFN",167,0)
 ;          or -1 if the bill type can't be determined.
"RTN","IBRFN",168,0)
 ;
"RTN","IBRFN",169,0)
 N IBATYP,IBATYPN,IBBG,IBN,IBND,IBTYP,IBX
"RTN","IBRFN",170,0)
 S IBTYP=-1
"RTN","IBRFN",171,0)
 I '$G(IBIFN) G TYPQ
"RTN","IBRFN",172,0)
 ;
"RTN","IBRFN",173,0)
 ; - see if AR originated from file #399
"RTN","IBRFN",174,0)
 S IBX=$G(^DGCR(399,IBIFN,0))
"RTN","IBRFN",175,0)
 I IBX]"" D  G TYPQ
"RTN","IBRFN",176,0)
 .S IBTYP=$$BTYP^IBCOIVM1(IBIFN,IBX)
"RTN","IBRFN",177,0)
 .S IBTYP=$S(IBTYP="":-1,IBTYP="P":"PR",IBTYP="R":"PH",1:IBTYP)
"RTN","IBRFN",178,0)
 ;
"RTN","IBRFN",179,0)
 ; - get the bill number
"RTN","IBRFN",180,0)
 S IBX=$P($G(^PRCA(430,IBIFN,0)),U)
"RTN","IBRFN",181,0)
 I IBX="" G TYPQ
"RTN","IBRFN",182,0)
 ;
"RTN","IBRFN",183,0)
 ; - AR must have originated from file #350
"RTN","IBRFN",184,0)
 S IBN=$O(^IB("ABIL",IBX,0))
"RTN","IBRFN",185,0)
 I 'IBN G TYPQ
"RTN","IBRFN",186,0)
 S IBND=$G(^IB(IBN,0))
"RTN","IBRFN",187,0)
 I 'IBND G TYPQ
"RTN","IBRFN",188,0)
 S IBATYP=$G(^IBE(350.1,+$P(IBND,U,3),0)),IBBG=$P(IBATYP,U,11)
"RTN","IBRFN",189,0)
 ;
"RTN","IBRFN",190,0)
 ; - handle TRICARE charges first
"RTN","IBRFN",191,0)
 I IBBG=7 D  G TYPQ
"RTN","IBRFN",192,0)
 .S IBATYPN=$P(IBATYP,U)
"RTN","IBRFN",193,0)
 .S IBTYP=$S(IBATYPN["INPT":"I",IBATYPN["OPT":"O",1:"PH")
"RTN","IBRFN",194,0)
 ;
"RTN","IBRFN",195,0)
 S IBTYP=$S(IBBG=4:"O",IBBG=5:"PH",IBBG=8:"O",1:"I")
"RTN","IBRFN",196,0)
TYPQ Q IBTYP
"RTN","IBRFN",197,0)
 ;
"RTN","IBRFN",198,0)
RELBILL(IBIFN) ; given a Third Party Bill, find all related Third Party bills,
"RTN","IBRFN",199,0)
 ; then find all First Party bills related to any of the Third Party bills
"RTN","IBRFN",200,0)
 ; Input:  IBIFN = internal file number of a Third Party bill
"RTN","IBRFN",201,0)
 ; Output: Third Party Bills (#399)
"RTN","IBRFN",202,0)
 ;    ^TMP("IBRBT", $J, selected bill ifn) = PATIENT HAS ANY RX COVERAGE ON FROM DATE OF BILL?
"RTN","IBRFN",203,0)
 ;    ^TMP("IBRBT", $J, selected bill ifn, matching bill ifn) =
"RTN","IBRFN",204,0)
 ;                                        BILL FROM ^ BILL TO ^ CANCELLED? ^ AR BILL NUMBER ^
"RTN","IBRFN",205,0)
 ;                                        PAYER SEQUENCE ^ PAYER IS MEDICARE SUPPLEMENTAL (0/1) ^ PAYER NAME
"RTN","IBRFN",206,0)
 ; Output:  First Party Bills (#350)
"RTN","IBRFN",207,0)
 ;    ^TMP("IBRBF", $J , selected bill ifn ) = ""
"RTN","IBRFN",208,0)
 ;    ^TMP("IBRBF", $J , selected bill ifn , charge ifn) = 
"RTN","IBRFN",209,0)
 ;                                        BILL FROM ^ BILL TO ^ CANCELLED? ^ AR BILL NUMBER ^
"RTN","IBRFN",210,0)
 ;                                        TOTAL CHARGE ^ ACTION TYPE (SHORT) ^ # DAYS ON HOLD
"RTN","IBRFN",211,0)
 ;
"RTN","IBRFN",212,0)
 N IBIFN1 I '$D(^DGCR(399,+$G(IBIFN),0)) Q
"RTN","IBRFN",213,0)
 D TPTP^IBEFUR(IBIFN)
"RTN","IBRFN",214,0)
 S IBIFN1=0 F  S IBIFN1=$O(^TMP("IBRBT",$J,IBIFN,IBIFN1)) Q:'IBIFN1  D TPFP^IBEFUR(IBIFN1)
"RTN","IBRFN",215,0)
 Q
"RTN","IBRFN",216,0)
 ;
"RTN","IBRFN",217,0)
SEL(IBARR) ; Select an rx bill
"RTN","IBRFN",218,0)
 ;  Input: IBARR - Array of IBIFN
"RTN","IBRFN",219,0)
 ; Output: IBNUM - One of the bill iens, or -1
"RTN","IBRFN",220,0)
 ;
"RTN","IBRFN",221,0)
 N DIR,IBIFN,IBRXN,IBDT,IBZ,IBY,IBC,IBBIL,IBLNK,DFN,IBPT,I,IBINS,IBCOB
"RTN","IBRFN",222,0)
 ;
"RTN","IBRFN",223,0)
 S IBIFN=$O(IBARR(""))
"RTN","IBRFN",224,0)
 I 'IBIFN Q -1
"RTN","IBRFN",225,0)
 I '$O(IBARR(IBIFN)) Q IBIFN  ; no choice
"RTN","IBRFN",226,0)
 ;
"RTN","IBRFN",227,0)
 W !!?4,"Select one of the following:",!
"RTN","IBRFN",228,0)
 W !?8,"BILL",?19,"RX",?31,"DATE",?42,"INSURANCE",?60,"COB",?65,"PATIENT"
"RTN","IBRFN",229,0)
 W !?4 F I=1:1:75 W "-"
"RTN","IBRFN",230,0)
 ;
"RTN","IBRFN",231,0)
 S (IBIFN,IBC)=0
"RTN","IBRFN",232,0)
 F  S IBIFN=$O(IBARR(IBIFN)) Q:'IBIFN  D
"RTN","IBRFN",233,0)
 . S IBZ=$G(^DGCR(399,IBIFN,0)) Q:IBZ=""
"RTN","IBRFN",234,0)
 . S DFN=+$P(IBZ,U,2),IBPT=$P($G(^DPT(DFN,0)),U)
"RTN","IBRFN",235,0)
 . S IBBIL=$P(IBZ,U)
"RTN","IBRFN",236,0)
 . S IBDT=$P(IBZ,U,3)
"RTN","IBRFN",237,0)
 . S IBY=$G(^IBA(362.4,+$O(^IBA(362.4,"C",IBIFN,0)),0))
"RTN","IBRFN",238,0)
 . S IBRXN=$P(IBY,U)
"RTN","IBRFN",239,0)
 . S IBC=IBC+1
"RTN","IBRFN",240,0)
 . S IBLNK(IBC)=IBIFN
"RTN","IBRFN",241,0)
 . S IBCOB=$P(IBZ,U,21)
"RTN","IBRFN",242,0)
 . S IBINS=$P($G(^DIC(36,+$P($G(^DGCR(399,IBIFN,"MP")),U),0)),U)
"RTN","IBRFN",243,0)
 . W !?4,IBC,?8,IBBIL," ",?19,IBRXN," ",?31,$$DAT1^IBOUTL(IBDT)," ",?42,$E(IBINS,1,18),?61,IBCOB,?65,$E(IBPT,1,14)
"RTN","IBRFN",244,0)
 ;
"RTN","IBRFN",245,0)
 ;
"RTN","IBRFN",246,0)
 F  R !!?4,"Select one of the bills by number: ",IBY:DTIME  Q:'$T  Q:"^"[IBY  Q:$D(IBLNK(+IBY))  W:(IBY'="")&(IBY'["?") "  ??"  D
"RTN","IBRFN",247,0)
 . W !!?8,"Enter numeric value from 1 to ",IBC
"RTN","IBRFN",248,0)
 ;
"RTN","IBRFN",249,0)
 S IBIFN=$G(IBLNK(+IBY),-1)
"RTN","IBRFN",250,0)
 Q IBIFN
"UP",366.14,366.141,-1)
366.14^1
"UP",366.14,366.141,0)
366.141
"VER")
8.0^22.0
"^DD",366.14,366.141,7.01,0)
RX COB^S^0:UNKNOWN;1:PRIMARY;2:SECONDARY;^7;1^Q
"^DD",366.14,366.141,7.01,3)
Select COB indicator for the claim.
"^DD",366.14,366.141,7.01,21,0)
^.001^5^5^3090108^^^
"^DD",366.14,366.141,7.01,21,1,0)
The Coordination Of Benefits (COB) indicator designates 
"^DD",366.14,366.141,7.01,21,2,0)
the payer sequence for the claim.
"^DD",366.14,366.141,7.01,21,3,0)
RX COB = 1 (Primary) if this is a Primary claim
"^DD",366.14,366.141,7.01,21,4,0)
  or
"^DD",366.14,366.141,7.01,21,5,0)
RX COB = 2 (Secondary) if this is a Secondary claim
"^DD",366.14,366.141,7.01,"DT")
3090108
"^DD",366.14,366.141,7.02,0)
PRIMARY BILL^P399'^DGCR(399,^7;2^Q
"^DD",366.14,366.141,7.02,3)
Select the primary bill for the prescription.
"^DD",366.14,366.141,7.02,21,0)
^^2^2^3090108^
"^DD",366.14,366.141,7.02,21,1,0)
This field will hold the Primary bill associated with the original
"^DD",366.14,366.141,7.02,21,2,0)
prescription/refill related to this claim.
"^DD",366.14,366.141,7.02,"DT")
3090108
"^DD",366.14,366.141,7.03,0)
PRIOR PAYMENT^NJ11,2^^7;3^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>99999999)!(X<0) X
"^DD",366.14,366.141,7.03,3)
Type a Dollar Amount between 0 and 99999999, 2 Decimal Digits
"^DD",366.14,366.141,7.03,21,0)
^^2^2^3090108^
"^DD",366.14,366.141,7.03,21,1,0)
This field will store a prior payment amount that the primary insurer
"^DD",366.14,366.141,7.03,21,2,0)
agreed to pay for the original prescription/refill related to this claim.
"^DD",366.14,366.141,7.03,"DT")
3090108
"^DD",366.14,366.141,7.04,0)
RATE TYPE SELECTED BY USER^P399.3'^DGCR(399.3,^7;4^Q
"^DD",366.14,366.141,7.04,3)
Select the appropriate Rate Type.
"^DD",366.14,366.141,7.04,21,0)
^^1^1^3090113^
"^DD",366.14,366.141,7.04,21,1,0)
This field contains a pointer to the Rate Type file (#399.3).
"^DD",366.14,366.141,7.04,"DT")
3090113
**INSTALL NAME**
BPS*1.0*8
"BLD",7813,0)
BPS*1.0*8^E CLAIMS MGMT ENGINE^0^3100806^y
"BLD",7813,4,0)
^9.64PA^9002313.78^5
"BLD",7813,4,9002313.02,0)
9002313.02
"BLD",7813,4,9002313.02,2,0)
^9.641^9002313.0401^2
"BLD",7813,4,9002313.02,2,9002313.02,0)
BPS CLAIMS  (File-top level)
"BLD",7813,4,9002313.02,2,9002313.02,1,0)
^9.6411^.08^1
"BLD",7813,4,9002313.02,2,9002313.02,1,.08,0)
TRANSACTION
"BLD",7813,4,9002313.02,2,9002313.0401,0)
COB OTHER PAYMENTS  (sub-file)
"BLD",7813,4,9002313.02,2,9002313.0401,1,0)
^9.6411^443^1
"BLD",7813,4,9002313.02,2,9002313.0401,1,443,0)
OTHER PAYER DATE
"BLD",7813,4,9002313.02,222)
y^n^p^^^^n^^n
"BLD",7813,4,9002313.02,224)

"BLD",7813,4,9002313.57,0)
9002313.57
"BLD",7813,4,9002313.57,2,0)
^9.641^9002313.57^3
"BLD",7813,4,9002313.57,2,9002313.57,0)
BPS LOG OF TRANSACTIONS  (File-top level)
"BLD",7813,4,9002313.57,2,9002313.57,1,0)
^9.6411^1205^2
"BLD",7813,4,9002313.57,2,9002313.57,1,1204,0)
COB OTHER PAYMENTS COUNT
"BLD",7813,4,9002313.57,2,9002313.57,1,1205,0)
OTHER COVERAGE CODE
"BLD",7813,4,9002313.57,2,9002313.5714,0)
COB OTHER PAYERS  (sub-file)
"BLD",7813,4,9002313.57,2,9002313.5714,1,0)
^9.6411^^
"BLD",7813,4,9002313.57,2,9002313.57902,0)
PATIENT INSURANCE MULTIPLE  (sub-file)
"BLD",7813,4,9002313.57,2,9002313.57902,1,0)
^9.6411^902.28^6
"BLD",7813,4,9002313.57,2,9002313.57902,1,902.28,0)
ELIGIBILITY
"BLD",7813,4,9002313.57,2,9002313.57902,1,902.29,0)
RATE TYPE
"BLD",7813,4,9002313.57,2,9002313.57902,1,902.3,0)
PRIMARY PAYER BILL
"BLD",7813,4,9002313.57,2,9002313.57902,1,902.31,0)
PRIOR PAYMENT
"BLD",7813,4,9002313.57,2,9002313.57902,1,902.32,0)
PLAN COB
"BLD",7813,4,9002313.57,2,9002313.57902,1,902.33,0)
INSURANCE COMPANY
"BLD",7813,4,9002313.57,222)
y^n^p^^^^n^^n
"BLD",7813,4,9002313.57,224)

"BLD",7813,4,9002313.59,0)
9002313.59
"BLD",7813,4,9002313.59,2,0)
^9.641^9002313.5914^3
"BLD",7813,4,9002313.59,2,9002313.59,0)
BPS TRANSACTION  (File-top level)
"BLD",7813,4,9002313.59,2,9002313.59,1,0)
^9.6411^1205^2
"BLD",7813,4,9002313.59,2,9002313.59,1,1204,0)
COB OTHER PAYMENTS COUNT
"BLD",7813,4,9002313.59,2,9002313.59,1,1205,0)
OTHER COVERAGE CODE
"BLD",7813,4,9002313.59,2,9002313.5914,0)
COB OTHER PAYERS  (sub-file)
"BLD",7813,4,9002313.59,2,9002313.5914,1,0)
^9.6411^^
"BLD",7813,4,9002313.59,2,9002313.59902,0)
PATIENT INSURANCE MULTIPLE  (sub-file)
"BLD",7813,4,9002313.59,2,9002313.59902,1,0)
^9.6411^902.28^6
"BLD",7813,4,9002313.59,2,9002313.59902,1,902.28,0)
ELIGIBILITY
"BLD",7813,4,9002313.59,2,9002313.59902,1,902.29,0)
RATE TYPE
"BLD",7813,4,9002313.59,2,9002313.59902,1,902.3,0)
PRIMARY PAYER BILL
"BLD",7813,4,9002313.59,2,9002313.59902,1,902.31,0)
PRIOR PAYMENT
"BLD",7813,4,9002313.59,2,9002313.59902,1,902.32,0)
PLAN COB
"BLD",7813,4,9002313.59,2,9002313.59902,1,902.33,0)
INSURANCE COMPANY
"BLD",7813,4,9002313.59,222)
y^n^p^^^^n^^n
"BLD",7813,4,9002313.59,224)

"BLD",7813,4,9002313.77,0)
9002313.77
"BLD",7813,4,9002313.77,2,0)
^9.641^9002313.778^2
"BLD",7813,4,9002313.77,2,9002313.77,0)
BPS REQUESTS  (File-top level)
"BLD",7813,4,9002313.77,2,9002313.77,1,0)
^9.6411^1.12^5
"BLD",7813,4,9002313.77,2,9002313.77,1,1.08,0)
RATE TYPE
"BLD",7813,4,9002313.77,2,9002313.77,1,1.09,0)
PRIMARY PAYER BILL
"BLD",7813,4,9002313.77,2,9002313.77,1,1.1,0)
PRIOR PAYMENT
"BLD",7813,4,9002313.77,2,9002313.77,1,1.11,0)
COB OTHER PAYMENTS COUNT
"BLD",7813,4,9002313.77,2,9002313.77,1,1.12,0)
OTHER COVERAGE CODE
"BLD",7813,4,9002313.77,2,9002313.778,0)
COB OTHER PAYERS  (sub-file)
"BLD",7813,4,9002313.77,2,9002313.778,1,0)
^9.6411^^
"BLD",7813,4,9002313.77,222)
y^n^p^^^^n^^n
"BLD",7813,4,9002313.77,224)

"BLD",7813,4,9002313.78,0)
9002313.78
"BLD",7813,4,9002313.78,2,0)
^9.641^9002313.78^1
"BLD",7813,4,9002313.78,2,9002313.78,0)
BPS INSURER DATA  (File-top level)
"BLD",7813,4,9002313.78,2,9002313.78,1,0)
^9.6411^3.06^1
"BLD",7813,4,9002313.78,2,9002313.78,1,3.06,0)
PLAN COB
"BLD",7813,4,9002313.78,222)
y^n^p^^^^n^^n
"BLD",7813,4,9002313.78,224)

"BLD",7813,4,"APDD",9002313.02,9002313.02)

"BLD",7813,4,"APDD",9002313.02,9002313.02,.08)

"BLD",7813,4,"APDD",9002313.02,9002313.0401)

"BLD",7813,4,"APDD",9002313.02,9002313.0401,443)

"BLD",7813,4,"APDD",9002313.57,9002313.57)

"BLD",7813,4,"APDD",9002313.57,9002313.57,1204)

"BLD",7813,4,"APDD",9002313.57,9002313.57,1205)

"BLD",7813,4,"APDD",9002313.57,9002313.5714)

"BLD",7813,4,"APDD",9002313.57,9002313.57902)

"BLD",7813,4,"APDD",9002313.57,9002313.57902,902.28)

"BLD",7813,4,"APDD",9002313.57,9002313.57902,902.29)

"BLD",7813,4,"APDD",9002313.57,9002313.57902,902.3)

"BLD",7813,4,"APDD",9002313.57,9002313.57902,902.31)

"BLD",7813,4,"APDD",9002313.57,9002313.57902,902.32)

"BLD",7813,4,"APDD",9002313.57,9002313.57902,902.33)

"BLD",7813,4,"APDD",9002313.59,9002313.59)

"BLD",7813,4,"APDD",9002313.59,9002313.59,1204)

"BLD",7813,4,"APDD",9002313.59,9002313.59,1205)

"BLD",7813,4,"APDD",9002313.59,9002313.5914)

"BLD",7813,4,"APDD",9002313.59,9002313.59902)

"BLD",7813,4,"APDD",9002313.59,9002313.59902,902.28)

"BLD",7813,4,"APDD",9002313.59,9002313.59902,902.29)

"BLD",7813,4,"APDD",9002313.59,9002313.59902,902.3)

"BLD",7813,4,"APDD",9002313.59,9002313.59902,902.31)

"BLD",7813,4,"APDD",9002313.59,9002313.59902,902.32)

"BLD",7813,4,"APDD",9002313.59,9002313.59902,902.33)

"BLD",7813,4,"APDD",9002313.77,9002313.77)

"BLD",7813,4,"APDD",9002313.77,9002313.77,1.08)

"BLD",7813,4,"APDD",9002313.77,9002313.77,1.09)

"BLD",7813,4,"APDD",9002313.77,9002313.77,1.1)

"BLD",7813,4,"APDD",9002313.77,9002313.77,1.11)

"BLD",7813,4,"APDD",9002313.77,9002313.77,1.12)

"BLD",7813,4,"APDD",9002313.77,9002313.778)

"BLD",7813,4,"APDD",9002313.78,9002313.78)

"BLD",7813,4,"APDD",9002313.78,9002313.78,3.06)

"BLD",7813,4,"B",9002313.02,9002313.02)

"BLD",7813,4,"B",9002313.57,9002313.57)

"BLD",7813,4,"B",9002313.59,9002313.59)

"BLD",7813,4,"B",9002313.77,9002313.77)

"BLD",7813,4,"B",9002313.78,9002313.78)

"BLD",7813,6.3)
29
"BLD",7813,"ABPKG")
n
"BLD",7813,"INID")
^n
"BLD",7813,"INIT")
POST^BPS10P8
"BLD",7813,"KRN",0)
^9.67PA^779.2^20
"BLD",7813,"KRN",.4,0)
.4
"BLD",7813,"KRN",.401,0)
.401
"BLD",7813,"KRN",.402,0)
.402
"BLD",7813,"KRN",.403,0)
.403
"BLD",7813,"KRN",.5,0)
.5
"BLD",7813,"KRN",.84,0)
.84
"BLD",7813,"KRN",3.6,0)
3.6
"BLD",7813,"KRN",3.8,0)
3.8
"BLD",7813,"KRN",9.2,0)
9.2
"BLD",7813,"KRN",9.8,0)
9.8
"BLD",7813,"KRN",9.8,"NM",0)
^9.68A^60^59
"BLD",7813,"KRN",9.8,"NM",1,0)
BPSPRRX^^0^B99076770
"BLD",7813,"KRN",9.8,"NM",2,0)
BPSSCR03^^0^B42145046
"BLD",7813,"KRN",9.8,"NM",3,0)
BPSSCRU6^^0^B18199575
"BLD",7813,"KRN",9.8,"NM",4,0)
BPSSCRLG^^0^B97729982
"BLD",7813,"KRN",9.8,"NM",5,0)
BPSOSQA^^0^B9957067
"BLD",7813,"KRN",9.8,"NM",6,0)
BPSOS6M^^0^B11551065
"BLD",7813,"KRN",9.8,"NM",7,0)
BPSOSRB^^0^B41392879
"BLD",7813,"KRN",9.8,"NM",8,0)
BPSRPT9^^0^B81558879
"BLD",7813,"KRN",9.8,"NM",9,0)
BPSPRRX1^^0^B12437232
"BLD",7813,"KRN",9.8,"NM",10,0)
BPSPRRX2^^0^B8324629
"BLD",7813,"KRN",9.8,"NM",11,0)
BPSPRRX3^^0^B99615569
"BLD",7813,"KRN",9.8,"NM",12,0)
BPSPRRX4^^0^B15420214
"BLD",7813,"KRN",9.8,"NM",13,0)
BPSPRRX5^^0^B48156542
"BLD",7813,"KRN",9.8,"NM",14,0)
BPSNCPDP^^0^B76105402
"BLD",7813,"KRN",9.8,"NM",15,0)
BPSNCPD5^^0^B78805427
"BLD",7813,"KRN",9.8,"NM",16,0)
BPSNCPD4^^0^B43623914
"BLD",7813,"KRN",9.8,"NM",17,0)
BPSOSRX^^0^B41387461
"BLD",7813,"KRN",9.8,"NM",18,0)
BPSUTIL2^^0^B26258660
"BLD",7813,"KRN",9.8,"NM",19,0)
BPSOSRX4^^0^B55754369
"BLD",7813,"KRN",9.8,"NM",20,0)
BPSOSRX3^^0^B105355282
"BLD",7813,"KRN",9.8,"NM",21,0)
BPSNCPD1^^0^B44878746
"BLD",7813,"KRN",9.8,"NM",22,0)
BPSOSIZ^^0^B16026755
"BLD",7813,"KRN",9.8,"NM",23,0)
BPSSCRRS^^0^B44067784
"BLD",7813,"KRN",9.8,"NM",24,0)
BPSSCRRV^^0^B40545723
"BLD",7813,"KRN",9.8,"NM",25,0)
BPSECMP2^^0^B81277814
"BLD",7813,"KRN",9.8,"NM",26,0)
BPSPRRX6^^0^B57663596
"BLD",7813,"KRN",9.8,"NM",27,0)
BPSOSIY^^0^B67267504
"BLD",7813,"KRN",9.8,"NM",28,0)
BPSTEST^^0^B68950406
"BLD",7813,"KRN",9.8,"NM",29,0)
BPSRES^^0^B93916400
"BLD",7813,"KRN",9.8,"NM",30,0)
BPSBCKJ^^0^B49753700
"BLD",7813,"KRN",9.8,"NM",31,0)
BPSOSRX2^^0^B20068937
"BLD",7813,"KRN",9.8,"NM",32,0)
BPSSCRU3^^0^B30637579
"BLD",7813,"KRN",9.8,"NM",33,0)
BPSOSRX6^^0^B25512407
"BLD",7813,"KRN",9.8,"NM",34,0)
BPSWRKLS^^0^B31684663
"BLD",7813,"KRN",9.8,"NM",35,0)
BPSNCPD3^^0^B28796956
"BLD",7813,"KRN",9.8,"NM",36,0)
BPSOSCC^^0^B26147652
"BLD",7813,"KRN",9.8,"NM",37,0)
BPSNCPD6^^0^B39101412
"BLD",7813,"KRN",9.8,"NM",38,0)
BPSOSCE^^0^B14075186
"BLD",7813,"KRN",9.8,"NM",39,0)
BPSOSRX5^^0^B36392851
"BLD",7813,"KRN",9.8,"NM",40,0)
BPSRPT4^^0^B69467414
"BLD",7813,"KRN",9.8,"NM",41,0)
BPSRPT9A^^0^B71706588
"BLD",7813,"KRN",9.8,"NM",42,0)
BPSRPT5^^0^B79661218
"BLD",7813,"KRN",9.8,"NM",43,0)
BPSRPT6^^0^B66218478
"BLD",7813,"KRN",9.8,"NM",44,0)
BPSRPT8^^0^B84250810
"BLD",7813,"KRN",9.8,"NM",45,0)
BPSRPT1^^0^B52995272
"BLD",7813,"KRN",9.8,"NM",46,0)
BPSRPT7^^0^B77430067
"BLD",7813,"KRN",9.8,"NM",47,0)
BPSOSCD^^0^B50726570
"BLD",7813,"KRN",9.8,"NM",48,0)
BPSOSC2^^0^B34066005
"BLD",7813,"KRN",9.8,"NM",49,0)
BPSOSCF^^0^B28717442
"BLD",7813,"KRN",9.8,"NM",50,0)
BPSFLD01^^0^B9727334
"BLD",7813,"KRN",9.8,"NM",51,0)
BPSOSH2^^0^B63139845
"BLD",7813,"KRN",9.8,"NM",52,0)
BPSECA1^^0^B12154283
"BLD",7813,"KRN",9.8,"NM",53,0)
BPSECX0^^0^B23106196
"BLD",7813,"KRN",9.8,"NM",54,0)
BPS10P8^^0^B14241991
"BLD",7813,"KRN",9.8,"NM",55,0)
BPSSCRCL^^0^B76318080
"BLD",7813,"KRN",9.8,"NM",57,0)
BPSNCPD2^^0^B42415694
"BLD",7813,"KRN",9.8,"NM",58,0)
BPSOSHF^^0^B32080446
"BLD",7813,"KRN",9.8,"NM",59,0)
BPSBUTL^^0^B54102124
"BLD",7813,"KRN",9.8,"NM",60,0)
BPSSCRU5^^0^B62214356
"BLD",7813,"KRN",9.8,"NM","B","BPS10P8",54)

"BLD",7813,"KRN",9.8,"NM","B","BPSBCKJ",30)

"BLD",7813,"KRN",9.8,"NM","B","BPSBUTL",59)

"BLD",7813,"KRN",9.8,"NM","B","BPSECA1",52)

"BLD",7813,"KRN",9.8,"NM","B","BPSECMP2",25)

"BLD",7813,"KRN",9.8,"NM","B","BPSECX0",53)

"BLD",7813,"KRN",9.8,"NM","B","BPSFLD01",50)

"BLD",7813,"KRN",9.8,"NM","B","BPSNCPD1",21)

"BLD",7813,"KRN",9.8,"NM","B","BPSNCPD2",57)

"BLD",7813,"KRN",9.8,"NM","B","BPSNCPD3",35)

"BLD",7813,"KRN",9.8,"NM","B","BPSNCPD4",16)

"BLD",7813,"KRN",9.8,"NM","B","BPSNCPD5",15)

"BLD",7813,"KRN",9.8,"NM","B","BPSNCPD6",37)

"BLD",7813,"KRN",9.8,"NM","B","BPSNCPDP",14)

"BLD",7813,"KRN",9.8,"NM","B","BPSOS6M",6)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSC2",48)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSCC",36)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSCD",47)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSCE",38)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSCF",49)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSH2",51)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSHF",58)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSIY",27)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSIZ",22)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSQA",5)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSRB",7)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSRX",17)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSRX2",31)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSRX3",20)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSRX4",19)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSRX5",39)

"BLD",7813,"KRN",9.8,"NM","B","BPSOSRX6",33)

"BLD",7813,"KRN",9.8,"NM","B","BPSPRRX",1)

"BLD",7813,"KRN",9.8,"NM","B","BPSPRRX1",9)

"BLD",7813,"KRN",9.8,"NM","B","BPSPRRX2",10)

"BLD",7813,"KRN",9.8,"NM","B","BPSPRRX3",11)

"BLD",7813,"KRN",9.8,"NM","B","BPSPRRX4",12)

"BLD",7813,"KRN",9.8,"NM","B","BPSPRRX5",13)

"BLD",7813,"KRN",9.8,"NM","B","BPSPRRX6",26)

"BLD",7813,"KRN",9.8,"NM","B","BPSRES",29)

"BLD",7813,"KRN",9.8,"NM","B","BPSRPT1",45)

"BLD",7813,"KRN",9.8,"NM","B","BPSRPT4",40)

"BLD",7813,"KRN",9.8,"NM","B","BPSRPT5",42)

"BLD",7813,"KRN",9.8,"NM","B","BPSRPT6",43)

"BLD",7813,"KRN",9.8,"NM","B","BPSRPT7",46)

"BLD",7813,"KRN",9.8,"NM","B","BPSRPT8",44)

"BLD",7813,"KRN",9.8,"NM","B","BPSRPT9",8)

"BLD",7813,"KRN",9.8,"NM","B","BPSRPT9A",41)

"BLD",7813,"KRN",9.8,"NM","B","BPSSCR03",2)

"BLD",7813,"KRN",9.8,"NM","B","BPSSCRCL",55)

"BLD",7813,"KRN",9.8,"NM","B","BPSSCRLG",4)

"BLD",7813,"KRN",9.8,"NM","B","BPSSCRRS",23)

"BLD",7813,"KRN",9.8,"NM","B","BPSSCRRV",24)

"BLD",7813,"KRN",9.8,"NM","B","BPSSCRU3",32)

"BLD",7813,"KRN",9.8,"NM","B","BPSSCRU5",60)

"BLD",7813,"KRN",9.8,"NM","B","BPSSCRU6",3)

"BLD",7813,"KRN",9.8,"NM","B","BPSTEST",28)

"BLD",7813,"KRN",9.8,"NM","B","BPSUTIL2",18)

"BLD",7813,"KRN",9.8,"NM","B","BPSWRKLS",34)

"BLD",7813,"KRN",19,0)
19
"BLD",7813,"KRN",19,"NM",0)
^9.68A^8^5
"BLD",7813,"KRN",19,"NM",3,0)
BPSMENU^^2
"BLD",7813,"KRN",19,"NM",5,0)
BPS COB PROCESS SECOND TRICARE^^0
"BLD",7813,"KRN",19,"NM",6,0)
BPS COB RPT SECONDARY CLAIMS^^0
"BLD",7813,"KRN",19,"NM",7,0)
BPS COB MENU^^0
"BLD",7813,"KRN",19,"NM",8,0)
BPS COB RPT TRICARE CLAIMS^^0
"BLD",7813,"KRN",19,"NM","B","BPS COB MENU",7)

"BLD",7813,"KRN",19,"NM","B","BPS COB PROCESS SECOND TRICARE",5)

"BLD",7813,"KRN",19,"NM","B","BPS COB RPT SECONDARY CLAIMS",6)

"BLD",7813,"KRN",19,"NM","B","BPS COB RPT TRICARE CLAIMS",8)

"BLD",7813,"KRN",19,"NM","B","BPSMENU",3)

"BLD",7813,"KRN",19.1,0)
19.1
"BLD",7813,"KRN",101,0)
101
"BLD",7813,"KRN",409.61,0)
409.61
"BLD",7813,"KRN",771,0)
771
"BLD",7813,"KRN",779.2,0)
779.2
"BLD",7813,"KRN",870,0)
870
"BLD",7813,"KRN",8989.51,0)
8989.51
"BLD",7813,"KRN",8989.52,0)
8989.52
"BLD",7813,"KRN",8994,0)
8994
"BLD",7813,"KRN","B",.4,.4)

"BLD",7813,"KRN","B",.401,.401)

"BLD",7813,"KRN","B",.402,.402)

"BLD",7813,"KRN","B",.403,.403)

"BLD",7813,"KRN","B",.5,.5)

"BLD",7813,"KRN","B",.84,.84)

"BLD",7813,"KRN","B",3.6,3.6)

"BLD",7813,"KRN","B",3.8,3.8)

"BLD",7813,"KRN","B",9.2,9.2)

"BLD",7813,"KRN","B",9.8,9.8)

"BLD",7813,"KRN","B",19,19)

"BLD",7813,"KRN","B",19.1,19.1)

"BLD",7813,"KRN","B",101,101)

"BLD",7813,"KRN","B",409.61,409.61)

"BLD",7813,"KRN","B",771,771)

"BLD",7813,"KRN","B",779.2,779.2)

"BLD",7813,"KRN","B",870,870)

"BLD",7813,"KRN","B",8989.51,8989.51)

"BLD",7813,"KRN","B",8989.52,8989.52)

"BLD",7813,"KRN","B",8994,8994)

"BLD",7813,"QUES",0)
^9.62^^
"BLD",7813,"REQB",0)
^9.611^1^1
"BLD",7813,"REQB",1,0)
BPS*1.0*7^2
"BLD",7813,"REQB","B","BPS*1.0*7",1)

"FIA",9002313.02)
BPS CLAIMS
"FIA",9002313.02,0)
^BPSC(
"FIA",9002313.02,0,0)
9002313.02
"FIA",9002313.02,0,1)
y^n^p^^^^n^^n
"FIA",9002313.02,0,10)

"FIA",9002313.02,0,11)

"FIA",9002313.02,0,"RLRO")

"FIA",9002313.02,0,"VR")
1.0^BPS
"FIA",9002313.02,9002313.02)
1
"FIA",9002313.02,9002313.02,.08)

"FIA",9002313.02,9002313.0401)
1
"FIA",9002313.02,9002313.0401,443)

"FIA",9002313.57)
BPS LOG OF TRANSACTIONS
"FIA",9002313.57,0)
^BPSTL(
"FIA",9002313.57,0,0)
9002313.57
"FIA",9002313.57,0,1)
y^n^p^^^^n^^n
"FIA",9002313.57,0,10)

"FIA",9002313.57,0,11)

"FIA",9002313.57,0,"RLRO")

"FIA",9002313.57,0,"VR")
1.0^BPS
"FIA",9002313.57,9002313.57)
1
"FIA",9002313.57,9002313.57,1204)

"FIA",9002313.57,9002313.57,1205)

"FIA",9002313.57,9002313.57,1400)

"FIA",9002313.57,9002313.5714)
0
"FIA",9002313.57,9002313.57141)
0
"FIA",9002313.57,9002313.57142)
0
"FIA",9002313.57,9002313.57902)
1
"FIA",9002313.57,9002313.57902,902.28)

"FIA",9002313.57,9002313.57902,902.29)

"FIA",9002313.57,9002313.57902,902.3)

"FIA",9002313.57,9002313.57902,902.31)

"FIA",9002313.57,9002313.57902,902.32)

"FIA",9002313.57,9002313.57902,902.33)

"FIA",9002313.59)
BPS TRANSACTION
"FIA",9002313.59,0)
^BPST(
"FIA",9002313.59,0,0)
9002313.59O
"FIA",9002313.59,0,1)
y^n^p^^^^n^^n
"FIA",9002313.59,0,10)

"FIA",9002313.59,0,11)

"FIA",9002313.59,0,"RLRO")

"FIA",9002313.59,0,"VR")
1.0^BPS
"FIA",9002313.59,9002313.59)
1
"FIA",9002313.59,9002313.59,1204)

"FIA",9002313.59,9002313.59,1205)

"FIA",9002313.59,9002313.59,1400)

"FIA",9002313.59,9002313.5914)
0
"FIA",9002313.59,9002313.59141)
0
"FIA",9002313.59,9002313.59142)
0
"FIA",9002313.59,9002313.59902)
1
"FIA",9002313.59,9002313.59902,902.28)

"FIA",9002313.59,9002313.59902,902.29)

"FIA",9002313.59,9002313.59902,902.3)

"FIA",9002313.59,9002313.59902,902.31)

"FIA",9002313.59,9002313.59902,902.32)

"FIA",9002313.59,9002313.59902,902.33)

"FIA",9002313.77)
BPS REQUESTS
"FIA",9002313.77,0)
^BPS(9002313.77,
"FIA",9002313.77,0,0)
9002313.77P
"FIA",9002313.77,0,1)
y^n^p^^^^n^^n
"FIA",9002313.77,0,10)

"FIA",9002313.77,0,11)

"FIA",9002313.77,0,"RLRO")

"FIA",9002313.77,0,"VR")
1.0^BPS
"FIA",9002313.77,9002313.77)
1
"FIA",9002313.77,9002313.77,1.08)

"FIA",9002313.77,9002313.77,1.09)

"FIA",9002313.77,9002313.77,1.1)

"FIA",9002313.77,9002313.77,1.11)

"FIA",9002313.77,9002313.77,1.12)

"FIA",9002313.77,9002313.77,8)

"FIA",9002313.77,9002313.778)
0
"FIA",9002313.77,9002313.7781)
0
"FIA",9002313.77,9002313.7782)
0
"FIA",9002313.78)
BPS INSURER DATA
"FIA",9002313.78,0)
^BPS(9002313.78,
"FIA",9002313.78,0,0)
9002313.78
"FIA",9002313.78,0,1)
y^n^p^^^^n^^n
"FIA",9002313.78,0,10)

"FIA",9002313.78,0,11)

"FIA",9002313.78,0,"RLRO")

"FIA",9002313.78,0,"VR")
1.0^BPS
"FIA",9002313.78,9002313.78)
1
"FIA",9002313.78,9002313.78,3.06)

"INIT")
POST^BPS10P8
"KRN",19,12193,-1)
2^3
"KRN",19,12193,0)
BPSMENU^Electronic Claims Managemnt Engine^^M^66481^BPSMENU^^^^^^570^^^^^1
"KRN",19,12193,10,0)
^19.01IP^6^5
"KRN",19,12193,10,6,0)
13224^COB^2
"KRN",19,12193,10,6,"^")
BPS COB MENU
"KRN",19,12193,"U")
ELECTRONIC CLAIMS MANAGEMNT EN
"KRN",19,13220,-1)
0^5
"KRN",19,13220,0)
BPS COB PROCESS SECOND TRICARE^Process Secondary/TRICARE Rx to ECME^^R^^BPS USER^^^^^^
"KRN",19,13220,1,0)
^^3^3^3100609^
"KRN",19,13220,1,1,0)
The option allows the user to select a proper plan and manually send COB 
"KRN",19,13220,1,2,0)
secondary and Tricare pharmacy e-claims to the payer. The user will be
"KRN",19,13220,1,3,0)
prompted for the prescription number and for other necessary information.
"KRN",19,13220,25)
EN1^BPSPRRX
"KRN",19,13220,"U")
PROCESS SECONDARY/TRICARE RX T
"KRN",19,13222,-1)
0^6
"KRN",19,13222,0)
BPS COB RPT SECONDARY CLAIMS^Potential Secondary Rx Claims Report^^R^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",19,13222,1,0)
^^2^2^3081231^
"KRN",19,13222,1,1,0)
This option attempts to identify potential Rx claims for a secondary 
"KRN",19,13222,1,2,0)
insurance payer.
"KRN",19,13222,25)
EN^BPSRPT9(9)
"KRN",19,13222,"U")
POTENTIAL SECONDARY RX CLAIMS 
"KRN",19,13223,-1)
0^8
"KRN",19,13223,0)
BPS COB RPT TRICARE CLAIMS^Potential TRICARE Claims Report^^R^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",19,13223,1,0)
^^1^1^3081231^
"KRN",19,13223,1,1,0)
This option attempts to identify potential Rx claims for TRICARE payers.
"KRN",19,13223,25)
EN^BPSRPT9(8)
"KRN",19,13223,"U")
POTENTIAL TRICARE CLAIMS REPOR
"KRN",19,13224,-1)
0^7
"KRN",19,13224,0)
BPS COB MENU^ECME Pharmacy COB^^M^^^^^^^^E CLAIMS MGMT ENGINE
"KRN",19,13224,1,0)
^19.06^4^4^3090105^^^^
"KRN",19,13224,1,1,0)
BPS submenu which contains a link to the:
"KRN",19,13224,1,2,0)
Potential Secondary Rx Claims Report
"KRN",19,13224,1,3,0)
Potential TRICARE Rx Claims Report
"KRN",19,13224,1,4,0)
Process Secondary/TRICARE Rx to ECME
"KRN",19,13224,10,0)
^19.01IP^3^3
"KRN",19,13224,10,1,0)
13222^SEC^10
"KRN",19,13224,10,1,"^")
BPS COB RPT SECONDARY CLAIMS
"KRN",19,13224,10,2,0)
13223^TRI^20
"KRN",19,13224,10,2,"^")
BPS COB RPT TRICARE CLAIMS
"KRN",19,13224,10,3,0)
13220^PRO^30
"KRN",19,13224,10,3,"^")
BPS COB PROCESS SECOND TRICARE
"KRN",19,13224,99)
61901,48403
"KRN",19,13224,"U")
ECME PHARMACY COB
"MBREQ")
1
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",570,-1)
1^1
"PKG",570,0)
E CLAIMS MGMT ENGINE^BPS^ELECTRONIC CLAIMS MGT
"PKG",570,20,0)
^9.402P^^
"PKG",570,22,0)
^9.49I^1^1
"PKG",570,22,1,0)
1.0^3041008^3041108^66481
"PKG",570,22,1,"PAH",1,0)
8^3100806^101020
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
59
"RTN","BPS10P8")
0^54^B14241991
"RTN","BPS10P8",1,0)
BPS10P8 ;ALB/SS - BPS*1*8 POST INSTALL ROUTINE ;6/9/08  11:02
"RTN","BPS10P8",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8**;JUN 2004;Build 29
"RTN","BPS10P8",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPS10P8",4,0)
 ;
"RTN","BPS10P8",5,0)
 Q
"RTN","BPS10P8",6,0)
 ;
"RTN","BPS10P8",7,0)
POST ; post install for BPS*1*8
"RTN","BPS10P8",8,0)
 ;
"RTN","BPS10P8",9,0)
 N BPRECIEN,BPFLDEF,BPX,BPSCNT,BPSOK,BPNCPDFL,GETCODE,FORMATCD,SETCODE,MC,ERRMSG,FKI,FKV
"RTN","BPS10P8",10,0)
 D MES^XPDUTL("  Starting post-install of BPS*1*8")
"RTN","BPS10P8",11,0)
 D MES^XPDUTL(" ")
"RTN","BPS10P8",12,0)
 S BPSCNT=0
"RTN","BPS10P8",13,0)
 F BPX=1:1 S BPFLDEF=$P($T(FIELDS+BPX),";;",2,99) Q:BPFLDEF=""  D
"RTN","BPS10P8",14,0)
 . S BPNCPDFL=$P(BPFLDEF,";",1)   ; ncpdp field#
"RTN","BPS10P8",15,0)
 . S BPRECIEN=+$O(^BPSF(9002313.91,"B",BPNCPDFL,0))   ; ien to file# 9002313.91
"RTN","BPS10P8",16,0)
 . I BPRECIEN=0 D MES^XPDUTL("    error: can't find entry for the NCPDP field # "_BPNCPDFL_" in the file #9002313.91") Q
"RTN","BPS10P8",17,0)
 . ;
"RTN","BPS10P8",18,0)
 . D MES^XPDUTL("  updating data for the NCPDP field# "_BPNCPDFL_"...")
"RTN","BPS10P8",19,0)
 . S BPSOK=0
"RTN","BPS10P8",20,0)
 . ;
"RTN","BPS10P8",21,0)
 . S GETCODE=$P(BPFLDEF,";",2)
"RTN","BPS10P8",22,0)
 . I GETCODE="" S GETCODE=";GET code for this COB field is executed in COB^BPSOSHF"
"RTN","BPS10P8",23,0)
 . K MC,ERRMSG S MC(1,0)=GETCODE
"RTN","BPS10P8",24,0)
 . D WP^DIE(9002313.91,BPRECIEN_",",10,"","MC","ERRMSG")
"RTN","BPS10P8",25,0)
 . I $D(ERRMSG) D  Q
"RTN","BPS10P8",26,0)
 .. D MES^XPDUTL("FileMan reported a problem with the GET CODE for field# "_BPNCPDFL_":")
"RTN","BPS10P8",27,0)
 .. S (FKI,FKV)="ERRMSG"
"RTN","BPS10P8",28,0)
 .. F  S FKI=$Q(@FKI) Q:FKI'[FKV  D MES^XPDUTL("   "_FKI_" = "_$G(@FKI))
"RTN","BPS10P8",29,0)
 .. D MES^XPDUTL("  ")
"RTN","BPS10P8",30,0)
 .. Q
"RTN","BPS10P8",31,0)
 . S BPSOK=BPSOK+1
"RTN","BPS10P8",32,0)
 . ;
"RTN","BPS10P8",33,0)
 . S FORMATCD=$P(BPFLDEF,";",3)    ; FORMAT code
"RTN","BPS10P8",34,0)
 . I FORMATCD]"" D
"RTN","BPS10P8",35,0)
 .. K MC,ERRMSG S MC(1,0)=FORMATCD
"RTN","BPS10P8",36,0)
 .. D WP^DIE(9002313.91,BPRECIEN_",",40,"","MC","ERRMSG")
"RTN","BPS10P8",37,0)
 .. I $D(ERRMSG) D  Q
"RTN","BPS10P8",38,0)
 ... D MES^XPDUTL("FileMan reported a problem with the FORMAT CODE for field# "_BPNCPDFL_":")
"RTN","BPS10P8",39,0)
 ... S (FKI,FKV)="ERRMSG"
"RTN","BPS10P8",40,0)
 ... F  S FKI=$Q(@FKI) Q:FKI'[FKV  D MES^XPDUTL("   "_FKI_" = "_$G(@FKI))
"RTN","BPS10P8",41,0)
 ... D MES^XPDUTL("  ")
"RTN","BPS10P8",42,0)
 ... Q
"RTN","BPS10P8",43,0)
 . S BPSOK=BPSOK+1
"RTN","BPS10P8",44,0)
 . ;
"RTN","BPS10P8",45,0)
 . S SETCODE=$P(BPFLDEF,";",4)    ; SET code
"RTN","BPS10P8",46,0)
 . I SETCODE]"" D
"RTN","BPS10P8",47,0)
 .. K MC,ERRMSG S MC(1,0)=SETCODE
"RTN","BPS10P8",48,0)
 .. D WP^DIE(9002313.91,BPRECIEN_",",30,"","MC","ERRMSG")
"RTN","BPS10P8",49,0)
 .. I $D(ERRMSG) D  Q
"RTN","BPS10P8",50,0)
 ... D MES^XPDUTL("FileMan reported a problem with the SET CODE for field# "_BPNCPDFL_":")
"RTN","BPS10P8",51,0)
 ... S (FKI,FKV)="ERRMSG"
"RTN","BPS10P8",52,0)
 ... F  S FKI=$Q(@FKI) Q:FKI'[FKV  D MES^XPDUTL("   "_FKI_" = "_$G(@FKI))
"RTN","BPS10P8",53,0)
 ... D MES^XPDUTL("  ")
"RTN","BPS10P8",54,0)
 ... Q
"RTN","BPS10P8",55,0)
 . S BPSOK=BPSOK+1
"RTN","BPS10P8",56,0)
 . ;
"RTN","BPS10P8",57,0)
 . I BPSOK=3 S BPSCNT=BPSCNT+1
"RTN","BPS10P8",58,0)
 . Q
"RTN","BPS10P8",59,0)
 ;
"RTN","BPS10P8",60,0)
 D MES^XPDUTL(" ")
"RTN","BPS10P8",61,0)
 D MES^XPDUTL("  "_BPSCNT_" entries have been updated successfully.")
"RTN","BPS10P8",62,0)
 D MES^XPDUTL(" ")
"RTN","BPS10P8",63,0)
 D MES^XPDUTL(" ")
"RTN","BPS10P8",64,0)
 ;
"RTN","BPS10P8",65,0)
 Q
"RTN","BPS10P8",66,0)
 ;
"RTN","BPS10P8",67,0)
 ;
"RTN","BPS10P8",68,0)
FIELDS ; NCPDP field;GET code;FORMAT code;SET code
"RTN","BPS10P8",69,0)
 ;;337;;S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1);D SET337^BPSFLD01
"RTN","BPS10P8",70,0)
 ;;338;;S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2);D SET338^BPSFLD01
"RTN","BPS10P8",71,0)
 ;;339;;S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2);D SET339^BPSFLD01
"RTN","BPS10P8",72,0)
 ;;340;;S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10);D SET340^BPSFLD01
"RTN","BPS10P8",73,0)
 ;;341;;S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),1);D SET341^BPSFLD01
"RTN","BPS10P8",74,0)
 ;;342;;S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2);D SET342^BPSFLD01
"RTN","BPS10P8",75,0)
 ;;431;;S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8);D SET431^BPSFLD01
"RTN","BPS10P8",76,0)
 ;;443;;S BPS("X")=$$DTF1^BPSECFM($G(BPS("X")));D SET443^BPSFLD01
"RTN","BPS10P8",77,0)
 ;;471;;S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2);D SET471^BPSFLD01
"RTN","BPS10P8",78,0)
 ;;472;;S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),3);D SET472^BPSFLD01
"RTN","BPS10P8",79,0)
 ;;412;S BPS("X")=0;;
"RTN","BPS10P8",80,0)
 ;;477;S BPS("X")=0;S BPS("X")=$$DFF^BPSECFM($G(BPS("X")),8);
"RTN","BPS10P8",81,0)
 ;;481;S BPS("X")=0;;
"RTN","BPS10P8",82,0)
 ;;483;S BPS("X")=+BPS("Insurer","Percent Sales Tax Rate Sub");;
"RTN","BPS10P8",83,0)
 ;
"RTN","BPS10P8",84,0)
 ;
"RTN","BPSBCKJ")
0^30^B49753700
"RTN","BPSBCKJ",1,0)
BPSBCKJ ;BHAM ISC/AAT - BPS NIGHTLY BACKGROUND JOB ;02/27/2005
"RTN","BPSBCKJ",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2,5,7,8**;JUN 2004;Build 29
"RTN","BPSBCKJ",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSBCKJ",4,0)
 ;
"RTN","BPSBCKJ",5,0)
 Q
"RTN","BPSBCKJ",6,0)
 ;
"RTN","BPSBCKJ",7,0)
EN ; The ECME NIGHTLY PROCESS
"RTN","BPSBCKJ",8,0)
 ;
"RTN","BPSBCKJ",9,0)
 ; The list of nightly actions
"RTN","BPSBCKJ",10,0)
 D AUTOREV     ; Auto-Reversals (normal and inpatient)
"RTN","BPSBCKJ",11,0)
 D MAIN^BPSOSK ; Purge BPS LOG
"RTN","BPSBCKJ",12,0)
 D TASKMAN^BPSJAREG ; Do automatic registration.
"RTN","BPSBCKJ",13,0)
 Q
"RTN","BPSBCKJ",14,0)
 ;
"RTN","BPSBCKJ",15,0)
AUTOREV ; The Auto-Reverse Procedure
"RTN","BPSBCKJ",16,0)
 N BDT,BTRAN,BPHARM,BTRAN0,BTRAN1,BTRAN4,BDAYS,BRX,BFIL,BDATE,BNOW,BCLAIM,BRES,BREV,BTEST,REF,BCNT,BTX,X,X1,X2
"RTN","BPSBCKJ",17,0)
 ;
"RTN","BPSBCKJ",18,0)
 S BTEST=0 ; Debugging flag 1 - TEST, 0 - LIVE
"RTN","BPSBCKJ",19,0)
 S BCNT=0 ; Count reversals
"RTN","BPSBCKJ",20,0)
 ;
"RTN","BPSBCKJ",21,0)
 S REF=$NA(^TMP($J,"BPSBCKJ")) K @REF
"RTN","BPSBCKJ",22,0)
 ;
"RTN","BPSBCKJ",23,0)
 S (X1,BNOW)=$$DT^XLFDT()
"RTN","BPSBCKJ",24,0)
 ;
"RTN","BPSBCKJ",25,0)
 ;Define number of days to look back - Auto Reverse days can be from 0-31
"RTN","BPSBCKJ",26,0)
 ;To make sure every claim is caught, moving back 45 days
"RTN","BPSBCKJ",27,0)
 S X2=-45 D C^%DTC S BDT=X
"RTN","BPSBCKJ",28,0)
 ;
"RTN","BPSBCKJ",29,0)
 ;Loop through 'LAST UPDATE' 'AH' index
"RTN","BPSBCKJ",30,0)
 F  S BDT=$O(^BPST("AH",BDT)) Q:'BDT  S BTRAN=0 F  S BTRAN=$O(^BPST("AH",BDT,BTRAN)) Q:'BTRAN  D
"RTN","BPSBCKJ",31,0)
 . W:BTEST !,"TRAN=",BTRAN," ",?20
"RTN","BPSBCKJ",32,0)
 . S BTRAN0=$G(^BPST(BTRAN,0)),BTRAN1=$G(^(1)),BTRAN4=$G(^(4))
"RTN","BPSBCKJ",33,0)
 . I BTRAN0=""!(BTRAN1="") W:BTEST "ZERO OR ONE NODE MISSING" Q
"RTN","BPSBCKJ",34,0)
 . I '$$PAID^BPSOSQ4(BTRAN) W:BTEST "NOT PAID" Q  ; Not paid
"RTN","BPSBCKJ",35,0)
 . S BPHARM=$P(BTRAN1,U,7) I 'BPHARM W:BTEST "NO BPS PHARM" Q  ; BPS PHARMACY
"RTN","BPSBCKJ",36,0)
 . W:BTEST "BPHARM=",$P($G(^BPS(9002313.56,BPHARM,0)),U,1),"  "
"RTN","BPSBCKJ",37,0)
 . ;
"RTN","BPSBCKJ",38,0)
 . ;Handle 'Inpatient' Auto-Reversals
"RTN","BPSBCKJ",39,0)
 . S BREV=$$REVINP(BNOW,BTRAN,BTRAN0,BTRAN1,BPHARM) Q:BREV
"RTN","BPSBCKJ",40,0)
 . ;
"RTN","BPSBCKJ",41,0)
 . ;Handle Regular Auto-Reversals
"RTN","BPSBCKJ",42,0)
 . S BDAYS=+$P($G(^BPS(9002313.56,BPHARM,0)),U,9)
"RTN","BPSBCKJ",43,0)
 . I 'BDAYS W:BTEST "AUTO-REV DISABLED" Q  ;disabled
"RTN","BPSBCKJ",44,0)
 . I $P(BTRAN4,U,1) Q  ;Reversal claim exist
"RTN","BPSBCKJ",45,0)
 . S BCLAIM=$P(BTRAN0,U,4) I 'BCLAIM W:BTEST "NO BCLAIM" Q
"RTN","BPSBCKJ",46,0)
 . I $P($G(^BPSC(BCLAIM,0)),U,7) W:BTEST "AUTO-REVERSE FLAG" Q 
"RTN","BPSBCKJ",47,0)
 . S BDATE=$P($G(^BPSC(BCLAIM,0)),U,5)
"RTN","BPSBCKJ",48,0)
 . I 'BDATE S BDATE=$P($G(^BPSC(BCLAIM,0)),U,6)
"RTN","BPSBCKJ",49,0)
 . S BDATE=$P(BDATE,".")
"RTN","BPSBCKJ",50,0)
 . I 'BDATE="" W:BTEST "NO DATE" Q
"RTN","BPSBCKJ",51,0)
 . W:BTEST "DATE=",BDATE,"  "
"RTN","BPSBCKJ",52,0)
 . I $$FMDIFF^XLFDT(BNOW,BDATE,1)'>BDAYS W:BTEST "TOO EARLY" Q
"RTN","BPSBCKJ",53,0)
 . S BRX=$P(BTRAN1,U,11) I 'BRX W:BTEST "NO RX" Q
"RTN","BPSBCKJ",54,0)
 . S BFIL=$P(BTRAN1,U,1)
"RTN","BPSBCKJ",55,0)
 . I $$RELDATE(BRX,BFIL) W:BTEST " RELEASED" Q  ;released
"RTN","BPSBCKJ",56,0)
 . S BRES=$$REVERSE(BRX,BFIL,BCLAIM,1)
"RTN","BPSBCKJ",57,0)
 . W:BTEST " *REV CLM=",BCLAIM," STAT=",BRES
"RTN","BPSBCKJ",58,0)
 . I BRES=0!(BRES=4) D
"RTN","BPSBCKJ",59,0)
 .. S (BCNT,@REF@(BRES))=$G(@REF@(BRES))+1
"RTN","BPSBCKJ",60,0)
 .. S @REF@(BRES,BCNT)=BTRAN_U_BCLAIM_U_BRX_U_BFIL_U_BPHARM
"RTN","BPSBCKJ",61,0)
 . ; Any notifications to IB?
"RTN","BPSBCKJ",62,0)
 D BULL(REF) ; Send the bulletin
"RTN","BPSBCKJ",63,0)
 K @REF
"RTN","BPSBCKJ",64,0)
 Q
"RTN","BPSBCKJ",65,0)
 ;
"RTN","BPSBCKJ",66,0)
 ;Auto-Reverse Claims for Current Inpatients
"RTN","BPSBCKJ",67,0)
 ;
"RTN","BPSBCKJ",68,0)
 ;20050810;BEE;Phase III - CR11
"RTN","BPSBCKJ",69,0)
 ;
"RTN","BPSBCKJ",70,0)
REVINP(BNOW,BTRAN,BTRAN0,BTRAN1,BPHARM) ;
"RTN","BPSBCKJ",71,0)
 N BRX,BFIL,BCLAIM,BDATE,BRES,DFN,VAIP
"RTN","BPSBCKJ",72,0)
 ;
"RTN","BPSBCKJ",73,0)
 ;Only process Window fills
"RTN","BPSBCKJ",74,0)
 S BRX=+$P(BTRAN1,U,11) I BRX=0 Q 0
"RTN","BPSBCKJ",75,0)
 S BFIL=+$P(BTRAN1,U)
"RTN","BPSBCKJ",76,0)
 I $$MWC^BPSRPT6(BRX,BFIL)'="W" Q 0
"RTN","BPSBCKJ",77,0)
 ;
"RTN","BPSBCKJ",78,0)
 ;Check for Fill date - Must be equal to T-5
"RTN","BPSBCKJ",79,0)
 S BCLAIM=$P(BTRAN0,U,4) I 'BCLAIM Q 0
"RTN","BPSBCKJ",80,0)
 S BDATE=$$FILDATE(BRX,BFIL)
"RTN","BPSBCKJ",81,0)
 S BDATE=$P(BDATE,".")
"RTN","BPSBCKJ",82,0)
 I 'BDATE="" Q 0
"RTN","BPSBCKJ",83,0)
 I $$FMDIFF^XLFDT(BNOW,BDATE,1)'=5 Q 0
"RTN","BPSBCKJ",84,0)
 ;
"RTN","BPSBCKJ",85,0)
 ;Check for current Inpatient
"RTN","BPSBCKJ",86,0)
 S DFN=+$P(BTRAN0,U,6) I DFN=0 Q 0
"RTN","BPSBCKJ",87,0)
 D IN5^VADPT
"RTN","BPSBCKJ",88,0)
 I $G(VAIP(3))="" Q 0
"RTN","BPSBCKJ",89,0)
 ;
"RTN","BPSBCKJ",90,0)
 ;Auto-Reverse Claim
"RTN","BPSBCKJ",91,0)
 S BRES=$$REVERSE(BRX,BFIL,BCLAIM,2)
"RTN","BPSBCKJ",92,0)
 W:BTEST " *REV CLM=",BCLAIM," STAT=",BRES
"RTN","BPSBCKJ",93,0)
 I BRES=0!(BRES=4) D
"RTN","BPSBCKJ",94,0)
 . S (BCNT,@REF@(BRES))=$G(@REF@(BRES))+1
"RTN","BPSBCKJ",95,0)
 . S @REF@(BRES,BCNT)=BTRAN_U_BCLAIM_U_BRX_U_BFIL_U_BPHARM
"RTN","BPSBCKJ",96,0)
 Q 1
"RTN","BPSBCKJ",97,0)
 ;
"RTN","BPSBCKJ",98,0)
RELDATE(BRX,BFIL) ;Get the Released Date
"RTN","BPSBCKJ",99,0)
 I BFIL Q $$RXSUBF1^BPSUTIL1(BRX,52,52.1,+BFIL,17,"I")
"RTN","BPSBCKJ",100,0)
 Q $$RXAPI1^BPSUTIL1(BRX,31,"I")
"RTN","BPSBCKJ",101,0)
 ;
"RTN","BPSBCKJ",102,0)
FILDATE(BRX,BFIL) ;Get the Fill Date
"RTN","BPSBCKJ",103,0)
 I BFIL Q $$RXSUBF1^BPSUTIL1(BRX,52,52.1,+BFIL,.01,"I")
"RTN","BPSBCKJ",104,0)
 Q $$RXAPI1^BPSUTIL1(BRX,22,"I")
"RTN","BPSBCKJ",105,0)
 ;
"RTN","BPSBCKJ",106,0)
REVERSE(BRX,BFIL,BCLAIM,BTYPE) ;Auto-Reverse the claim
"RTN","BPSBCKJ",107,0)
 ;PUBLIC BTEST
"RTN","BPSBCKJ",108,0)
 N BDOS,BRES,BDAT,BMES,BRSN,BPSCOB,BP59
"RTN","BPSBCKJ",109,0)
 I $G(BTEST) Q 0  ; Test mode
"RTN","BPSBCKJ",110,0)
 ;
"RTN","BPSBCKJ",111,0)
 ; Get Date of Service and set reversal reason
"RTN","BPSBCKJ",112,0)
 S BDOS=$$DOSDATE^BPSSCRRS(BRX,BFIL)
"RTN","BPSBCKJ",113,0)
 S BRSN=$S(BTYPE=2:"CURRENT INPATIENT",1:"PRESCRIPTION NOT RELEASED")
"RTN","BPSBCKJ",114,0)
 ;
"RTN","BPSBCKJ",115,0)
 S BP59=$$CLAIM59^BPSUTIL2(BCLAIM) ;get the BPS TRANSACTION IEN for the claim
"RTN","BPSBCKJ",116,0)
 S BPSCOB=$$COB59^BPSUTIL2(BP59) ;get COB for the BPS TRANSACTION IEN
"RTN","BPSBCKJ",117,0)
 ;
"RTN","BPSBCKJ",118,0)
 ; Call ECME to process reversal
"RTN","BPSBCKJ",119,0)
 S BRES=$$EN^BPSNCPDP(BRX,BFIL,BDOS,"AREV","",BRSN,"",,,,BPSCOB)
"RTN","BPSBCKJ",120,0)
 ;
"RTN","BPSBCKJ",121,0)
 ; If successful, log message to the Prescription Activity Log
"RTN","BPSBCKJ",122,0)
 ;  and set the auto-reversal flag
"RTN","BPSBCKJ",123,0)
 S BRES=+BRES,BMES="ECME: AUTO REVERSAL JOB-"_$S(BPSCOB=1:"p",BPSCOB=2:"s",1:"")_$$INSNAME^BPSSCRU6(BP59)
"RTN","BPSBCKJ",124,0)
 I BRES=0 D
"RTN","BPSBCKJ",125,0)
 . D ECMEACT^PSOBPSU1(BRX,BFIL,BMES,.5)
"RTN","BPSBCKJ",126,0)
 . S BDAT(9002313.02,BCLAIM_",",.07)=BTYPE D FILE^DIE("","BDAT")
"RTN","BPSBCKJ",127,0)
 Q BRES
"RTN","BPSBCKJ",128,0)
 ;
"RTN","BPSBCKJ",129,0)
 ;
"RTN","BPSBCKJ",130,0)
BULL(REF) ;Bulletin to the OPECC
"RTN","BPSBCKJ",131,0)
 ;PUBLIC BTEST,DUZ,DT
"RTN","BPSBCKJ",132,0)
 N XMSUB,XMY,XMTEXT,XMDUZ,BLNUM
"RTN","BPSBCKJ",133,0)
 ;
"RTN","BPSBCKJ",134,0)
 I BCNT<1,'$G(BTEST),(+$G(@REF@(4)))=0 Q
"RTN","BPSBCKJ",135,0)
 S BLNUM=0,BCNT=+$G(@REF@(0))
"RTN","BPSBCKJ",136,0)
 S XMSUB="ECME AUTO-REVERSAL PROCESS"
"RTN","BPSBCKJ",137,0)
 I $G(BTEST) D T("*** P L E A S E   D I S R E G A R D    T H I S    E M A I L ***"),T(),T("NOT ACTUALLY REVERSED - THIS IS A TEST"),T()
"RTN","BPSBCKJ",138,0)
 D T("The ECME Nightly Process submitted auto-reversals for the following e-Pharmacy")
"RTN","BPSBCKJ",139,0)
 D T("prescriptions.")
"RTN","BPSBCKJ",140,0)
 D T()
"RTN","BPSBCKJ",141,0)
 D T("TOTAL CLAIMS SUBMITTED FOR AUTO-REVERSALS: "_BCNT)
"RTN","BPSBCKJ",142,0)
 D T()
"RTN","BPSBCKJ",143,0)
 D T("Claims Submitted for Auto-Reversals on "_$$DAT(DT)_":") D ARLIST(0,REF)
"RTN","BPSBCKJ",144,0)
 D T()
"RTN","BPSBCKJ",145,0)
 S BCNT=+$G(@REF@(4))
"RTN","BPSBCKJ",146,0)
 I BCNT'=0 D
"RTN","BPSBCKJ",147,0)
 . D T()
"RTN","BPSBCKJ",148,0)
 . D T("The ECME Nightly Process attempted to auto-reverse the following claims but")
"RTN","BPSBCKJ",149,0)
 . D T("could not because the previous request was IN PROGRESS.  Please verify that")
"RTN","BPSBCKJ",150,0)
 . D T("the previous request is not stranded.")
"RTN","BPSBCKJ",151,0)
 . D T()
"RTN","BPSBCKJ",152,0)
 . D T("Total number of claims that could not be auto-reversed: "_BCNT)
"RTN","BPSBCKJ",153,0)
 . D T()
"RTN","BPSBCKJ",154,0)
 . D T("Claims not auto-reversed on "_$$DAT(DT)_":")
"RTN","BPSBCKJ",155,0)
 . D ARLIST(4,REF)
"RTN","BPSBCKJ",156,0)
 . D T()
"RTN","BPSBCKJ",157,0)
 ;
"RTN","BPSBCKJ",158,0)
 S XMDUZ="BPS PACKAGE",XMTEXT="BTX("
"RTN","BPSBCKJ",159,0)
 S XMY("G.BPS OPECC")=""
"RTN","BPSBCKJ",160,0)
 I $G(DUZ)'<1 S XMY(DUZ)=""
"RTN","BPSBCKJ",161,0)
 D ^XMD
"RTN","BPSBCKJ",162,0)
 Q
"RTN","BPSBCKJ",163,0)
 ;
"RTN","BPSBCKJ",164,0)
T(BTXT) ; Add text to the message
"RTN","BPSBCKJ",165,0)
 ;PUBLIC BLNUM,BTEST
"RTN","BPSBCKJ",166,0)
 S BLNUM=BLNUM+1,BTX(BLNUM)=$G(BTXT," ")
"RTN","BPSBCKJ",167,0)
 I $G(BTEST) W !,$G(BTXT)
"RTN","BPSBCKJ",168,0)
 Q
"RTN","BPSBCKJ",169,0)
 ;
"RTN","BPSBCKJ",170,0)
ARLIST(BRES,REF) ;Auto-Rev List
"RTN","BPSBCKJ",171,0)
 N I,TXT,BCLAIM,BTRAN,Y,BRX,BFIL,BFDATE,BPHARM,BRXN,BPHARMN,BPAT,BPSTAT
"RTN","BPSBCKJ",172,0)
 D T()
"RTN","BPSBCKJ",173,0)
 D T(" #    RX     FILL  STATUS FILL DATE PATIENT                      BPS PHARMACY")
"RTN","BPSBCKJ",174,0)
 D T("------------------------------------------------------------------------------")
"RTN","BPSBCKJ",175,0)
 S I=0 F  S I=$O(@REF@(BRES,I)) Q:'I   D
"RTN","BPSBCKJ",176,0)
 . S Y=@REF@(BRES,I)
"RTN","BPSBCKJ",177,0)
 . S BTRAN=$P(Y,U)
"RTN","BPSBCKJ",178,0)
 . S BCLAIM=$P(Y,U,2)
"RTN","BPSBCKJ",179,0)
 . S BRX=$P(Y,U,3),BRXN=$$RXAPI1^BPSUTIL1(BRX,.01,"I")
"RTN","BPSBCKJ",180,0)
 . S BPAT=$P($G(^DPT(+$$RXAPI1^BPSUTIL1(BRX,2,"I"),0)),U)
"RTN","BPSBCKJ",181,0)
 . S BFIL=$P(Y,U,4)
"RTN","BPSBCKJ",182,0)
 . S BPHARM=$P(Y,U,5),BPHARMN=$P($G(^BPS(9002313.56,BPHARM,0)),U)
"RTN","BPSBCKJ",183,0)
 . S BFDATE=$$FILDATE(BRX,BFIL)
"RTN","BPSBCKJ",184,0)
 . S BPSTAT=$$MWC^BPSRPT6(BRX,BFIL)_"/"_$S($$RELDATE(BRX,BFIL)]"":"RL",1:"NR")
"RTN","BPSBCKJ",185,0)
 . S TXT=$J(I,3)_" "_$$J(BRXN,10)_" "_$$J(BFIL,2)_"  "_$J(BPSTAT,4)_"  "_$$J($$DAT(BFDATE),11)_$$J(BPAT,25)_" "_$J($E(BPHARMN,1,15),15)
"RTN","BPSBCKJ",186,0)
 . D T(TXT)
"RTN","BPSBCKJ",187,0)
 D T("------------------------------------------------------------------------------")
"RTN","BPSBCKJ",188,0)
 Q
"RTN","BPSBCKJ",189,0)
 ;
"RTN","BPSBCKJ",190,0)
J(TXT,LEN) ;Left justify
"RTN","BPSBCKJ",191,0)
 Q TXT_$J("",LEN-$L(TXT))
"RTN","BPSBCKJ",192,0)
 ;
"RTN","BPSBCKJ",193,0)
DAT(X,Y) ; Convert FM date to displayable (mm/dd/yy) format.
"RTN","BPSBCKJ",194,0)
 ; -- optional output of time, if $g(y) 
"RTN","BPSBCKJ",195,0)
 N DATE,T
"RTN","BPSBCKJ",196,0)
 S DATE=$S(X:$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3),1:"")
"RTN","BPSBCKJ",197,0)
 I $G(Y) S T="."_$E($P(X,".",2)_"000000",1,7) I T>0 S DATE=DATE_" "_$S($E(T,2,3)>12:$E(T,2,3)-12,$E(T,2,3)="00":"00",1:+$E(T,2,3))_":"_$E(T,4,5)_$S($E(T,2,5)>1200:" pm",1:" am")
"RTN","BPSBCKJ",198,0)
 Q DATE
"RTN","BPSBUTL")
0^59^B54102124
"RTN","BPSBUTL",1,0)
BPSBUTL ;BHAM ISC/MFR/VA/DLF - IB Communication Utilities ;06/01/2004
"RTN","BPSBUTL",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2,5,7,8**;JUN 2004;Build 29
"RTN","BPSBUTL",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSBUTL",4,0)
 ;Reference to STORESP^IBNCPDP supported by DBIA 4299
"RTN","BPSBUTL",5,0)
 Q
"RTN","BPSBUTL",6,0)
 ;
"RTN","BPSBUTL",7,0)
 ;CLAIM - pointer to #9002313.02
"RTN","BPSBUTL",8,0)
 ;TRNDX - ptr to #9002313.59
"RTN","BPSBUTL",9,0)
 ;REASON -  text name of the close reason
"RTN","BPSBUTL",10,0)
 ;PAPER - 1=drop to paper
"RTN","BPSBUTL",11,0)
 ;RELCOP - 1 (Yes) or 0 (No) release copay or not?
"RTN","BPSBUTL",12,0)
 ;COMMENT - comment
"RTN","BPSBUTL",13,0)
 ;ERROR - array by reference for error details
"RTN","BPSBUTL",14,0)
 ;
"RTN","BPSBUTL",15,0)
CLOSE(CLAIM,TRNDX,REASON,PAPER,RELCOP,COMMENT,ERROR) ; Send IB an update on the CLAIM status for a Closed Claim
"RTN","BPSBUTL",16,0)
 N DFN,BPSARRY,BILLNUM,CLAIMNFO,FILLNUM,RXIEN,TRANINFO
"RTN","BPSBUTL",17,0)
 ;
"RTN","BPSBUTL",18,0)
 ; - Data gathering
"RTN","BPSBUTL",19,0)
 D GETS^DIQ("9002313.59",TRNDX,"1.11;9","I","TRANINFO")
"RTN","BPSBUTL",20,0)
 S RXIEN=TRANINFO(9002313.59,TRNDX_",",1.11,"I")
"RTN","BPSBUTL",21,0)
 I $$RXAPI1^BPSUTIL1(RXIEN,.01)="" S ERROR="Prescription not found." Q
"RTN","BPSBUTL",22,0)
 S BPSARRY("FILL NUMBER")=TRANINFO(9002313.59,TRNDX_",",9,"I")
"RTN","BPSBUTL",23,0)
 D GETS^DIQ("9002313.02",CLAIM,"400*;401;402;403;426","","CLAIMNFO")
"RTN","BPSBUTL",24,0)
 S BPSARRY("FILL DATE")=$$EXT2FM^BPSOSU1(CLAIMNFO("9002313.0201","1,"_CLAIM_",","401"))
"RTN","BPSBUTL",25,0)
 S FILLNUM=+BPSARRY("FILL NUMBER")
"RTN","BPSBUTL",26,0)
 S DFN=$$RXAPI1^BPSUTIL1(RXIEN,2,"I")
"RTN","BPSBUTL",27,0)
 S BPSARRY("FILLED BY")=$$RXAPI1^BPSUTIL1(RXIEN,16,"I")
"RTN","BPSBUTL",28,0)
 S BPSARRY("PRESCRIPTION")=RXIEN
"RTN","BPSBUTL",29,0)
 S BPSARRY("BILLED")=$$DFF2EXT^BPSECFM($P(CLAIMNFO("9002313.0201","1,"_CLAIM_",","426"),"DQ",2))
"RTN","BPSBUTL",30,0)
 S BPSARRY("CLAIMID")=$P(CLAIMNFO("9002313.0201","1,"_CLAIM_",","402"),"D2",2)
"RTN","BPSBUTL",31,0)
 S BPSARRY("PLAN")=$P(^BPST(TRNDX,10,1,0),"^")
"RTN","BPSBUTL",32,0)
 S BPSARRY("STATUS")="CLOSED"
"RTN","BPSBUTL",33,0)
 S BPSARRY("PAID")=0
"RTN","BPSBUTL",34,0)
 S BPSARRY("RELEASE DATE")=$S(FILLNUM=0:$$RXAPI1^BPSUTIL1(RXIEN,31,"I"),1:$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,FILLNUM,17,"I"))
"RTN","BPSBUTL",35,0)
 S BPSARRY("USER")=DUZ
"RTN","BPSBUTL",36,0)
 S BPSARRY("EPHARM")=$$GET1^DIQ(9002313.59,TRNDX,1.07,"I")
"RTN","BPSBUTL",37,0)
 S BPSARRY("RXCOB")=$$COB59^BPSUTIL2(TRNDX)
"RTN","BPSBUTL",38,0)
 I REASON'="" D
"RTN","BPSBUTL",39,0)
 . S BPSARRY("CLOSE REASON")=$O(^IBE(356.8,"B",REASON,0))
"RTN","BPSBUTL",40,0)
 . S BPSARRY("DROP TO PAPER")=+$G(PAPER)
"RTN","BPSBUTL",41,0)
 . S BPSARRY("RELEASE COPAY")=+$G(RELCOP)
"RTN","BPSBUTL",42,0)
 I $G(COMMENT)]"" S BPSARRY("CLOSE COMMENT")=COMMENT
"RTN","BPSBUTL",43,0)
 ;
"RTN","BPSBUTL",44,0)
 ; If dropped to Paper, increment the counter in BPS Statistics
"RTN","BPSBUTL",45,0)
 I BPSARRY("DROP TO PAPER")=1 D INCSTAT^BPSOSUD("R",8)
"RTN","BPSBUTL",46,0)
 ;
"RTN","BPSBUTL",47,0)
 ; Call IB
"RTN","BPSBUTL",48,0)
 S BILLNUM=$$STORESP^IBNCPDP(DFN,.BPSARRY)
"RTN","BPSBUTL",49,0)
 Q
"RTN","BPSBUTL",50,0)
 ; Send IB an update on the CLAIM status for a restocked or deleted prescription
"RTN","BPSBUTL",51,0)
CLOSE2(RXIEN,BFILL,BWHERE) ;
"RTN","BPSBUTL",52,0)
 N IEN59,BPSARRY,DFN,BILLNUM,FILL,REASON
"RTN","BPSBUTL",53,0)
 N CLAIMNFO
"RTN","BPSBUTL",54,0)
 N DIE,DA,DR
"RTN","BPSBUTL",55,0)
 ;
"RTN","BPSBUTL",56,0)
 ; Check parameters
"RTN","BPSBUTL",57,0)
 I '$G(RXIEN) S ERROR="No prescription parameter" Q
"RTN","BPSBUTL",58,0)
 ;
"RTN","BPSBUTL",59,0)
 I $$RXAPI1^BPSUTIL1(RXIEN,.01)="" S ERROR="Prescription not found." Q
"RTN","BPSBUTL",60,0)
 I ",DDED,DE,RS,"'[(","_BWHERE_",") S ERROR="Invalid BWHERE parameter" Q
"RTN","BPSBUTL",61,0)
 ;
"RTN","BPSBUTL",62,0)
 ; Calculate the transaction IEN and see that it exists
"RTN","BPSBUTL",63,0)
 S FILL=".0000"_+BFILL
"RTN","BPSBUTL",64,0)
 S IEN59=RXIEN_"."_$E(FILL,$L(FILL)-3,$L(FILL))_"1"
"RTN","BPSBUTL",65,0)
 I '$D(^BPST(IEN59,0)) Q
"RTN","BPSBUTL",66,0)
 ;
"RTN","BPSBUTL",67,0)
 ; Get claim data
"RTN","BPSBUTL",68,0)
 S CLAIM=$P(^BPST(IEN59,0),"^",4)
"RTN","BPSBUTL",69,0)
 D GETS^DIQ("9002313.02",CLAIM,"400*;401;402;426","","CLAIMNFO")
"RTN","BPSBUTL",70,0)
 S BPSARRY("FILL NUMBER")=+BFILL
"RTN","BPSBUTL",71,0)
 S BPSARRY("FILL DATE")=$$EXT2FM^BPSOSU1(CLAIMNFO("9002313.0201","1,"_CLAIM_",","401"))
"RTN","BPSBUTL",72,0)
 ;
"RTN","BPSBUTL",73,0)
 ; Get prescription data
"RTN","BPSBUTL",74,0)
 S FILLNUM=BPSARRY("FILL NUMBER")
"RTN","BPSBUTL",75,0)
 S DFN=$$RXAPI1^BPSUTIL1(RXIEN,2,"I")
"RTN","BPSBUTL",76,0)
 S BPSARRY("FILLED BY")=$$RXAPI1^BPSUTIL1(RXIEN,16,"I")
"RTN","BPSBUTL",77,0)
 S BPSARRY("PRESCRIPTION")=RXIEN
"RTN","BPSBUTL",78,0)
 S BPSARRY("BILLED")=$$DFF2EXT^BPSECFM($P(CLAIMNFO("9002313.0201","1,"_CLAIM_",","426"),"DQ",2))
"RTN","BPSBUTL",79,0)
 S BPSARRY("CLAIMID")=$P(CLAIMNFO("9002313.0201","1,"_CLAIM_",","402"),"D2",2)
"RTN","BPSBUTL",80,0)
 S BPSARRY("PLAN")=$P(^BPST(IEN59,10,1,0),"^")
"RTN","BPSBUTL",81,0)
 S BPSARRY("STATUS")="CLOSED"
"RTN","BPSBUTL",82,0)
 S BPSARRY("PAID")=0
"RTN","BPSBUTL",83,0)
 S BPSARRY("RELEASE DATE")=$S(FILLNUM=0:$$RXAPI1^BPSUTIL1(RXIEN,31,"I"),1:$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,FILLNUM,17,"I"))
"RTN","BPSBUTL",84,0)
 S BPSARRY("USER")=.5
"RTN","BPSBUTL",85,0)
 S BPSARRY("EPHARM")=$$GET1^DIQ(9002313.59,IEN59,1.07,"I")
"RTN","BPSBUTL",86,0)
 S BPSARRY("RXCOB")=$$COB59^BPSUTIL2(IEN59)
"RTN","BPSBUTL",87,0)
 ;
"RTN","BPSBUTL",88,0)
 ; Determine the reversal reason based on the BWHERE value
"RTN","BPSBUTL",89,0)
 I BWHERE="RS" S REASON="PRESCRIPTION NOT RELEASED"
"RTN","BPSBUTL",90,0)
 I BWHERE="DE"!(BWHERE="DDED") S REASON="PRESCRIPTION DELETED"
"RTN","BPSBUTL",91,0)
 I REASON]"" S BPSARRY("CLOSE REASON")=$O(^IBE(356.8,"B",REASON,0))
"RTN","BPSBUTL",92,0)
 ;
"RTN","BPSBUTL",93,0)
 ;if a refill was deleted while RX is still active (not deleted) then send DELETION OF REFILL comment for CT record
"RTN","BPSBUTL",94,0)
 I BWHERE="DE",$$RXSTATUS^BPSSCRU2(RXIEN)'=13 S BPSARRY("CLOSE COMMENT")="DELETION OF REFILL ONLY - ORIGINAL RX MAY REMAIN ACTIVE"
"RTN","BPSBUTL",95,0)
 ;
"RTN","BPSBUTL",96,0)
 ;
"RTN","BPSBUTL",97,0)
 ; Update IB
"RTN","BPSBUTL",98,0)
 S BILLNUM=$$STORESP^IBNCPDP(DFN,.BPSARRY)
"RTN","BPSBUTL",99,0)
 ;
"RTN","BPSBUTL",100,0)
 ; Update the claim file that the claim is closed and the reason why.
"RTN","BPSBUTL",101,0)
 S DIE="^BPSC(",DA=CLAIM
"RTN","BPSBUTL",102,0)
 S DR="901///1;902///"_$$NOW^XLFDT()_";903////.5;904///"_BPSARRY("CLOSE REASON")
"RTN","BPSBUTL",103,0)
 D ^DIE
"RTN","BPSBUTL",104,0)
 Q
"RTN","BPSBUTL",105,0)
 ;
"RTN","BPSBUTL",106,0)
 ; Function to return Transaction, claim, and response IENs
"RTN","BPSBUTL",107,0)
 ; Parameters:
"RTN","BPSBUTL",108,0)
 ;    RXI: Prescription IEN
"RTN","BPSBUTL",109,0)
 ;    RXR: Fill Number
"RTN","BPSBUTL",110,0)
 ; Returns:
"RTN","BPSBUTL",111,0)
 ;    IEN59^Claim IEN^Response IEN^Reversal Claim IEN^Reversal Response IEN
"RTN","BPSBUTL",112,0)
CLAIM(RXI,RXR) ;
"RTN","BPSBUTL",113,0)
 N IEN59,CLAIMIEN,RESPIEN,REVCLAIM,REVRESP
"RTN","BPSBUTL",114,0)
 I '$G(RXI) Q
"RTN","BPSBUTL",115,0)
 S IEN59=$$IEN59^BPSOSRX(RXI,RXR)
"RTN","BPSBUTL",116,0)
 I '$D(^BPST(IEN59,0)) Q ""
"RTN","BPSBUTL",117,0)
 S CLAIMIEN=$P(^BPST(IEN59,0),"^",4),RESPIEN=$P(^BPST(IEN59,0),"^",5)
"RTN","BPSBUTL",118,0)
 S REVCLAIM=$P($G(^BPST(IEN59,4)),"^",1),REVRESP=$P($G(^BPST(IEN59,4)),"^",2)
"RTN","BPSBUTL",119,0)
 Q IEN59_U_CLAIMIEN_U_RESPIEN_U_REVCLAIM_U_REVRESP
"RTN","BPSBUTL",120,0)
 ;
"RTN","BPSBUTL",121,0)
 ; NABP - Return the value in the Service Provider ID (201-B1) field
"RTN","BPSBUTL",122,0)
 ;   of the claim.  Note that as of the NPI release (BPS*1*2), this
"RTN","BPSBUTL",123,0)
 ;   API may return NPI instead of NABP/NCPDP
"RTN","BPSBUTL",124,0)
NABP(RXP,BFILL) ;
"RTN","BPSBUTL",125,0)
 I '$G(RXP) Q ""
"RTN","BPSBUTL",126,0)
 I $G(BFILL)="" S BFILL=0
"RTN","BPSBUTL",127,0)
 N BPSTIEN,BPSCIEN,DFILL,NABP
"RTN","BPSBUTL",128,0)
 S DFILL=$E($TR($J("",4-$L(BFILL))," ","0")_BFILL,1,4)
"RTN","BPSBUTL",129,0)
 S BPSTIEN=RXP_"."_DFILL_"1"
"RTN","BPSBUTL",130,0)
 I 'BPSTIEN Q ""
"RTN","BPSBUTL",131,0)
 S BPSCIEN=$P($G(^BPST(BPSTIEN,0)),U,4)
"RTN","BPSBUTL",132,0)
 I 'BPSCIEN Q ""
"RTN","BPSBUTL",133,0)
 S NABP=$P($G(^BPSC(BPSCIEN,200)),U)
"RTN","BPSBUTL",134,0)
 Q NABP
"RTN","BPSBUTL",135,0)
 ;
"RTN","BPSBUTL",136,0)
 ; DIVNCPDP - For a specific outpatient site, return the NPI & NCPDP.
"RTN","BPSBUTL",137,0)
 ; Note that the procedure name is misleading but when originally
"RTN","BPSBUTL",138,0)
 ;   coded, this procedure only returned NCPDP.
"RTN","BPSBUTL",139,0)
 ;
"RTN","BPSBUTL",140,0)
 ; Input
"RTN","BPSBUTL",141,0)
 ;   BPSDIV - Outpatient Site (#59)
"RTN","BPSBUTL",142,0)
 ; Output
"RTN","BPSBUTL",143,0)
 ;   "" - No BPSDIV passed in
"RTN","BPSBUTL",144,0)
 ;   NCPDP and NPI separated by a caret
"RTN","BPSBUTL",145,0)
DIVNCPDP(BPSDIV) ;
"RTN","BPSBUTL",146,0)
 N BPSPHARM,NPI,NCPDP
"RTN","BPSBUTL",147,0)
 I '$G(BPSDIV) Q "^"
"RTN","BPSBUTL",148,0)
 ;
"RTN","BPSBUTL",149,0)
 ; Get the NCPDP
"RTN","BPSBUTL",150,0)
 S NCPDP=""
"RTN","BPSBUTL",151,0)
 S BPSPHARM=$$GETPHARM^BPSUTIL(BPSDIV)
"RTN","BPSBUTL",152,0)
 I BPSPHARM S NCPDP=$$GET1^DIQ(9002313.56,BPSPHARM_",",.02)
"RTN","BPSBUTL",153,0)
 ;
"RTN","BPSBUTL",154,0)
 ; Get the NPI and validate it
"RTN","BPSBUTL",155,0)
 S NPI=+$$NPI^BPSNPI("Pharmacy_ID",BPSDIV)
"RTN","BPSBUTL",156,0)
 I NPI=-1 S NPI=""
"RTN","BPSBUTL",157,0)
 ;
"RTN","BPSBUTL",158,0)
 Q NCPDP_"^"_NPI
"RTN","BPSBUTL",159,0)
 ;
"RTN","BPSBUTL",160,0)
 ;ADDCOMM - Add a comment to a ECME claim
"RTN","BPSBUTL",161,0)
 ;Input:
"RTN","BPSBUTL",162,0)
 ; BPRX - ien in file #52 
"RTN","BPSBUTL",163,0)
 ; BPREF - refill number (0,1,2,...)
"RTN","BPSBUTL",164,0)
 ; BPRCMNT - comment text 
"RTN","BPSBUTL",165,0)
 ;Output:
"RTN","BPSBUTL",166,0)
 ;  1 - okay
"RTN","BPSBUTL",167,0)
 ; -1 - failed
"RTN","BPSBUTL",168,0)
ADDCOMM(BPRX,BPREF,BPRCMNT) ;
"RTN","BPSBUTL",169,0)
 N BP59,BPNOW,BPLCK,BPREC,BPDA,BPERR
"RTN","BPSBUTL",170,0)
 N %,%H,%I,X
"RTN","BPSBUTL",171,0)
 I $L(BPRX)<1 Q -1
"RTN","BPSBUTL",172,0)
 I $G(BPRCMNT)="" Q -1
"RTN","BPSBUTL",173,0)
 S BP59=BPRX_$S($L(+BPREF)=1:".000",1:".00")_+BPREF_"1" ;borrowed from CLOSE2 above
"RTN","BPSBUTL",174,0)
 D NOW^%DTC
"RTN","BPSBUTL",175,0)
 S BPNOW=%
"RTN","BPSBUTL",176,0)
 L +^BPST(9002313.59111,+BP59):10
"RTN","BPSBUTL",177,0)
 S BPLCK=$T
"RTN","BPSBUTL",178,0)
 I 'BPLCK Q -1  ;quit
"RTN","BPSBUTL",179,0)
 D INSITEM^BPSCMT01(9002313.59111,+BP59,BPNOW)
"RTN","BPSBUTL",180,0)
 S BPREC=$O(^BPST(BP59,11,"B",BPNOW,0))
"RTN","BPSBUTL",181,0)
 I BPREC>0 D
"RTN","BPSBUTL",182,0)
 . S BPDA(9002313.59111,BPREC_","_BP59_",",.02)=+$G(DUZ)
"RTN","BPSBUTL",183,0)
 . S BPDA(9002313.59111,BPREC_","_BP59_",",.03)=$E($G(BPRCMNT),1,63)
"RTN","BPSBUTL",184,0)
 . D FILE^DIE("","BPDA","BPERR")
"RTN","BPSBUTL",185,0)
 I BPLCK L -^BPST(9002313.59111,+BP59)
"RTN","BPSBUTL",186,0)
 I BPREC>0,'$D(BPERR) Q 1
"RTN","BPSBUTL",187,0)
 Q -1
"RTN","BPSBUTL",188,0)
 ;
"RTN","BPSBUTL",189,0)
 ;REOPEN - Reopen closed claim
"RTN","BPSBUTL",190,0)
 ;Input:
"RTN","BPSBUTL",191,0)
 ; BP59 - ien in BPS TRANSACTION file
"RTN","BPSBUTL",192,0)
 ; BP02 - ien in BPS CLAIMS file
"RTN","BPSBUTL",193,0)
 ; BPREOPDT - reopen date/time 
"RTN","BPSBUTL",194,0)
 ; BPDUZ - user DUZ (#200 ien)
"RTN","BPSBUTL",195,0)
 ; BPCOMM - reopen comment text
"RTN","BPSBUTL",196,0)
 ;Output:
"RTN","BPSBUTL",197,0)
 ; 0^message_error - error
"RTN","BPSBUTL",198,0)
 ; 1 - success
"RTN","BPSBUTL",199,0)
REOPEN(BP59,BP02,BPREOPDT,BPDUZ,BPCOMM) ;
"RTN","BPSBUTL",200,0)
 N RECIENS,BPDA,ERRARR,BPREFNO,BPRXIEN,BPFILLDT,BPCLMID,BPZ,BPSARRY,BPDFN,BPRETVAL,BPZ1
"RTN","BPSBUTL",201,0)
 S BPDFN=$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSBUTL",202,0)
 S BPREFNO=$P($G(^BPST(BP59,1)),U)
"RTN","BPSBUTL",203,0)
 I BPREFNO="" Q "0^Null Fill Number"
"RTN","BPSBUTL",204,0)
 S BPRXIEN=$P($G(^BPST(BP59,1)),U,11)
"RTN","BPSBUTL",205,0)
 I BPRXIEN="" Q "0^Null RX ien Number"
"RTN","BPSBUTL",206,0)
 ;in VA there is only one med/claim but in some cases it can different than "1"
"RTN","BPSBUTL",207,0)
 ;so take the latest one
"RTN","BPSBUTL",208,0)
 S BPZ=$O(^BPSC(BP02,400,9999999),-1)
"RTN","BPSBUTL",209,0)
 I BPRXIEN="" Q "0^Database Error"
"RTN","BPSBUTL",210,0)
 S BPFILLDT=$$YMD2FM^BPSSCRU6(+$P($G(^BPSC(BP02,400,+BPZ,400)),U))
"RTN","BPSBUTL",211,0)
 S BPCLMID=$$CONVCLID^BPSSCRU6($P($G(^BPSC(BP02,400,+BPZ,400)),U,2))
"RTN","BPSBUTL",212,0)
 ;============
"RTN","BPSBUTL",213,0)
 ;Now update ECME database
"RTN","BPSBUTL",214,0)
 S BPRETVAL=$$UPDREOP^BPSREOP1(BP02,0,BPREOPDT,BPDUZ,BPCOMM)
"RTN","BPSBUTL",215,0)
 I +BPRETVAL=0 D  Q BPRETVAL
"RTN","BPSBUTL",216,0)
 . ;try to reverse it in case it was done partially
"RTN","BPSBUTL",217,0)
 . I $$UPDREOP^BPSREOP1(BP02,1,"@",+BPDUZ,"@")
"RTN","BPSBUTL",218,0)
 ;============
"RTN","BPSBUTL",219,0)
 ;Now call IB API for "REOPEN" event
"RTN","BPSBUTL",220,0)
 S BPSARRY("STATUS")="REOPEN"
"RTN","BPSBUTL",221,0)
 S BPSARRY("FILL DATE")=BPFILLDT
"RTN","BPSBUTL",222,0)
 S BPSARRY("FILL NUMBER")=BPREFNO
"RTN","BPSBUTL",223,0)
 S BPSARRY("PRESCRIPTION")=BPRXIEN
"RTN","BPSBUTL",224,0)
 S BPSARRY("CLAIMID")=BPCLMID
"RTN","BPSBUTL",225,0)
 S BPSARRY("DRUG")=$$DRUGIEN^BPSSCRU6(BPRXIEN,BPDFN)
"RTN","BPSBUTL",226,0)
 S BPSARRY("PLAN")=$P($G(^BPST(BP59,10,1,0)),"^")
"RTN","BPSBUTL",227,0)
 S BPSARRY("USER")=BPDUZ
"RTN","BPSBUTL",228,0)
 S BPSARRY("REOPEN COMMENT")=BPCOMM
"RTN","BPSBUTL",229,0)
 S BPSARRY("EPHARM")=$$GET1^DIQ(9002313.59,BP59,1.07,"I")
"RTN","BPSBUTL",230,0)
 S BPSARRY("RXCOB")=$$COB59^BPSUTIL2(BP59)
"RTN","BPSBUTL",231,0)
 S BPRETVAL=$$STORESP^IBNCPDP(BPDFN,.BPSARRY)
"RTN","BPSBUTL",232,0)
 ;if successful
"RTN","BPSBUTL",233,0)
 I +BPRETVAL>0 Q "1^ReOpening Claim: "_$P($G(^BPSC(BP02,0)),U)_" ... OK"
"RTN","BPSBUTL",234,0)
 ;===========
"RTN","BPSBUTL",235,0)
 ;if it was unsuccessful
"RTN","BPSBUTL",236,0)
 ;reverse ECME database (keep the user who made the attempt)
"RTN","BPSBUTL",237,0)
 I $$UPDREOP^BPSREOP1(BP02,1,"@",+BPDUZ,"@")
"RTN","BPSBUTL",238,0)
 ;return IB error message
"RTN","BPSBUTL",239,0)
 Q BPRETVAL
"RTN","BPSECA1")
0^52^B12154283
"RTN","BPSECA1",1,0)
BPSECA1 ;BHAM ISC/FCS/DRS/VA/DLF - Assemble formatted claim ;05/14/2004
"RTN","BPSECA1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8**;JUN 2004;Build 29
"RTN","BPSECA1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSECA1",4,0)
 ;----------------------------------------------------------------------
"RTN","BPSECA1",5,0)
 ; Assemble ASCII formatted claim submission record
"RTN","BPSECA1",6,0)
 ;
"RTN","BPSECA1",7,0)
 ; Input Variables:
"RTN","BPSECA1",8,0)
 ;  CLAIMIEN - pointer into 9002313.02
"RTN","BPSECA1",9,0)
 ;  MSG - Array passed by reference - This will have the claim packet
"RTN","BPSECA1",10,0)
 ;
"RTN","BPSECA1",11,0)
 ; NCPDP 5.1 changes
"RTN","BPSECA1",12,0)
 ;     5.1 has 14 claim segments (header, patient, insurance, claim
"RTN","BPSECA1",13,0)
 ;                                pharmacy provider, prescriber,
"RTN","BPSECA1",14,0)
 ;                                COB, workers comp, DUR, Pricing,
"RTN","BPSECA1",15,0)
 ;                                coupon, compound, prior auth,
"RTN","BPSECA1",16,0)
 ;                                clinical)
"RTN","BPSECA1",17,0)
 ;    5.1 requires field identifiers and separators on all fields
"RTN","BPSECA1",18,0)
 ;        other than the header
"RTN","BPSECA1",19,0)
 ;    5.1 Segment separators are required prior to each segment
"RTN","BPSECA1",20,0)
 ;        following the header
"RTN","BPSECA1",21,0)
 ;    5.1 Group separators appear at the end of each
"RTN","BPSECA1",22,0)
 ;        transaction (prescription)
"RTN","BPSECA1",23,0)
 ;
"RTN","BPSECA1",24,0)
 ;   Adjustments were also made to the reversal logic as well.
"RTN","BPSECA1",25,0)
 ;
"RTN","BPSECA1",26,0)
ASCII(CLAIMIEN,MSG) ;EP - from BPSOSQG
"RTN","BPSECA1",27,0)
 N IEN,RECORD,BPS,UERETVAL,DET51,WP
"RTN","BPSECA1",28,0)
 ;
"RTN","BPSECA1",29,0)
 ; Quit if no Claim IEN
"RTN","BPSECA1",30,0)
 I '$G(CLAIMIEN) Q
"RTN","BPSECA1",31,0)
 I '$D(^BPSC(CLAIMIEN,0)) Q
"RTN","BPSECA1",32,0)
 ;
"RTN","BPSECA1",33,0)
 ; Setup IEN variables (used when executing format code)
"RTN","BPSECA1",34,0)
 S IEN(9002313.02)=CLAIMIEN
"RTN","BPSECA1",35,0)
 ;
"RTN","BPSECA1",36,0)
 ; Get Payer Sheet pointer
"RTN","BPSECA1",37,0)
 S IEN(9002313.92)=$P($G(^BPSC(IEN(9002313.02),0)),U,2)
"RTN","BPSECA1",38,0)
 ;
"RTN","BPSECA1",39,0)
 ; Quit if the payer sheet pointer is missing
"RTN","BPSECA1",40,0)
 I 'IEN(9002313.92) Q
"RTN","BPSECA1",41,0)
 ;
"RTN","BPSECA1",42,0)
 ; Quit if the payer sheet does not exist
"RTN","BPSECA1",43,0)
 I '$D(^BPSF(9002313.92,+IEN(9002313.92),0)) Q
"RTN","BPSECA1",44,0)
 ;
"RTN","BPSECA1",45,0)
 ; Retrieve claim submission record (used when executing format code)
"RTN","BPSECA1",46,0)
 D GETBPS2^BPSECX0(IEN(9002313.02),.BPS)
"RTN","BPSECA1",47,0)
 ;
"RTN","BPSECA1",48,0)
 ; Assemble required claim header and optional format sections
"RTN","BPSECA1",49,0)
 S RECORD=""
"RTN","BPSECA1",50,0)
 ;
"RTN","BPSECA1",51,0)
 ; Do non-repeating claim segments
"RTN","BPSECA1",52,0)
 D XLOOP^BPSOSH2("100^110^120",.IEN,.BPS,.RECORD)
"RTN","BPSECA1",53,0)
 ;
"RTN","BPSECA1",54,0)
 ; Set list of repeating claim segments
"RTN","BPSECA1",55,0)
 S DET51="130^140^150^160^170^180^190^200^210^220^230"
"RTN","BPSECA1",56,0)
 ;
"RTN","BPSECA1",57,0)
 ; Loop through prescription multiple and get create repeation segments
"RTN","BPSECA1",58,0)
 S IEN(9002313.01)=0
"RTN","BPSECA1",59,0)
 F  S IEN(9002313.01)=$O(^BPSC(IEN(9002313.02),400,IEN(9002313.01))) Q:'IEN(9002313.01)  D
"RTN","BPSECA1",60,0)
 . ;
"RTN","BPSECA1",61,0)
 . ;Retrieve prescription information (used when executing format code)
"RTN","BPSECA1",62,0)
 . K BPS(9002313.0201)
"RTN","BPSECA1",63,0)
 . D GETBPS3^BPSECX0(IEN(9002313.02),IEN(9002313.01),.BPS)
"RTN","BPSECA1",64,0)
 . ;
"RTN","BPSECA1",65,0)
 . ; Handle the DUR repeating flds
"RTN","BPSECA1",66,0)
 . D DURVALUE
"RTN","BPSECA1",67,0)
 . ;
"RTN","BPSECA1",68,0)
 . ; Handle the COB flds
"RTN","BPSECA1",69,0)
 . D COBFLDS
"RTN","BPSECA1",70,0)
 . ; Append group separator character
"RTN","BPSECA1",71,0)
 . S RECORD=RECORD_$C(29)
"RTN","BPSECA1",72,0)
 . ;
"RTN","BPSECA1",73,0)
 . ; Assemble claim information required and optional sections
"RTN","BPSECA1",74,0)
 . D XLOOP^BPSOSH2(DET51,.IEN,.BPS,.RECORD)
"RTN","BPSECA1",75,0)
 ;
"RTN","BPSECA1",76,0)
 ; Need to store by segment due to HL7 constraints.  Had to change field, group,
"RTN","BPSECA1",77,0)
 ; and segment separators to control characters for Vitria/AAC processing as well as
"RTN","BPSECA1",78,0)
 ; shortening the length of the xmit.
"RTN","BPSECA1",79,0)
 ; DMB 11/27/2006 - If the first NNODES has $C(30), this will bomb since OREC will not 
"RTN","BPSECA1",80,0)
 ;   have a value.  Need to look into this.
"RTN","BPSECA1",81,0)
 N NNODES,INDEX,ONE,TWO,OREC
"RTN","BPSECA1",82,0)
 S NNODES=0 F  S NNODES=$O(RECORD(NNODES)) Q:NNODES=""  D
"RTN","BPSECA1",83,0)
 . I RECORD(NNODES)[$C(30) D
"RTN","BPSECA1",84,0)
 .. S ONE=$P(RECORD(NNODES),($C(30)_$C(28)),1),TWO=$P(RECORD(NNODES),($C(30)_$C(28)),2)
"RTN","BPSECA1",85,0)
 .. S RECORD(OREC)=RECORD(OREC)_ONE_$C(30)_$C(28),RECORD(NNODES)=TWO
"RTN","BPSECA1",86,0)
 . S OREC=NNODES
"RTN","BPSECA1",87,0)
 ;
"RTN","BPSECA1",88,0)
 ; Put claim packet into local array to be passed back to calling routine
"RTN","BPSECA1",89,0)
 S NNODES=""
"RTN","BPSECA1",90,0)
 S INDEX=1 F  S NNODES=$O(RECORD(NNODES)) Q:NNODES=""  D
"RTN","BPSECA1",91,0)
 . S MSG("HLS",INDEX)=RECORD(NNODES)
"RTN","BPSECA1",92,0)
 . S WP(INDEX/100+1,0)=RECORD(NNODES)
"RTN","BPSECA1",93,0)
 . S INDEX=INDEX+1
"RTN","BPSECA1",94,0)
 S MSG("HLS",0)=INDEX-1
"RTN","BPSECA1",95,0)
 ;
"RTN","BPSECA1",96,0)
 ; Store raw data into the BPS Claims record
"RTN","BPSECA1",97,0)
 D WP^DIE(9002313.02,CLAIMIEN_",",9999,"","WP")
"RTN","BPSECA1",98,0)
 Q
"RTN","BPSECA1",99,0)
 ;
"RTN","BPSECA1",100,0)
 ; DURVALUE - This subroutine will loop through the DUR/PPS repeating
"RTN","BPSECA1",101,0)
 ; fields and load their values into the BPS array for the claim
"RTN","BPSECA1",102,0)
 ; generation process
"RTN","BPSECA1",103,0)
DURVALUE ;
"RTN","BPSECA1",104,0)
 N DURCNT,DUR
"RTN","BPSECA1",105,0)
 ;
"RTN","BPSECA1",106,0)
 K BPS(9002313.1001)
"RTN","BPSECA1",107,0)
 ;
"RTN","BPSECA1",108,0)
 ; Get the number of DUR records
"RTN","BPSECA1",109,0)
 S DURCNT=$P($G(^BPSC(IEN(9002313.02),400,IEN(9002313.01),473.01,0)),U,4)
"RTN","BPSECA1",110,0)
 ;
"RTN","BPSECA1",111,0)
 ; Loop through DURS and get the data
"RTN","BPSECA1",112,0)
 F DUR=1:1:DURCNT  D
"RTN","BPSECA1",113,0)
 . D GETBPS4^BPSECX0(IEN(9002313.02),IEN(9002313.01),DUR,.BPS)
"RTN","BPSECA1",114,0)
 Q
"RTN","BPSECA1",115,0)
 ; COBFLDS - This subroutine will loop through the COB OTHER PAYMENTS repeating
"RTN","BPSECA1",116,0)
 ; fields and load their values into the BPS array for the claim
"RTN","BPSECA1",117,0)
 ; generation process
"RTN","BPSECA1",118,0)
COBFLDS ;
"RTN","BPSECA1",119,0)
 N BPCOBCNT,BPSCOB
"RTN","BPSECA1",120,0)
 ;
"RTN","BPSECA1",121,0)
 K BPS(9002313.0401)
"RTN","BPSECA1",122,0)
 ;
"RTN","BPSECA1",123,0)
 ; Get the number of COB records
"RTN","BPSECA1",124,0)
 S BPCOBCNT=$P($G(^BPSC(IEN(9002313.02),400,IEN(9002313.01),337,0)),U,4)
"RTN","BPSECA1",125,0)
 ;
"RTN","BPSECA1",126,0)
 ; Loop through COB and get the data
"RTN","BPSECA1",127,0)
 F BPSCOB=1:1:BPCOBCNT  D
"RTN","BPSECA1",128,0)
 . D GETBPS5^BPSECX0(IEN(9002313.02),IEN(9002313.01),BPSCOB,.BPS)
"RTN","BPSECA1",129,0)
 Q
"RTN","BPSECMP2")
0^25^B81277814
"RTN","BPSECMP2",1,0)
BPSECMP2 ;BHAM ISC/FCS/DRS - Parse Claim Response ;11/14/07  13:23
"RTN","BPSECMP2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,6,7,8**;JUN 2004;Build 29
"RTN","BPSECMP2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSECMP2",4,0)
 ;Reference to STORESP^IBNCPDP supported by DBIA 4299
"RTN","BPSECMP2",5,0)
 Q
"RTN","BPSECMP2",6,0)
 ; Parameters:
"RTN","BPSECMP2",7,0)
 ;    CLAIMIEN: IEN from BPS Claims
"RTN","BPSECMP2",8,0)
 ;    RESPIEN:  IEN from BPS Response
"RTN","BPSECMP2",9,0)
 ;    EVENT:    This is used by PSO to create specific events (BILL).
"RTN","BPSECMP2",10,0)
 ;    USER:     User who is creating the event.  This is required when EVENT is sent.
"RTN","BPSECMP2",11,0)
IBSEND(CLAIMIEN,RESPIEN,EVENT,USER) ;
"RTN","BPSECMP2",12,0)
 N BPSARRY,RXIEN,FILLNUM,IND,TRNDX,RELDATE,X,Y,%DT
"RTN","BPSECMP2",13,0)
 N CLAIMNFO,RESPNFO,RXINFO,RFINFO,TRANINFO
"RTN","BPSECMP2",14,0)
 N RESPONSE,RXACT,CLREAS,BILLNUM,DFN,REQCLAIM
"RTN","BPSECMP2",15,0)
 N DIE,DA,DR
"RTN","BPSECMP2",16,0)
 ;
"RTN","BPSECMP2",17,0)
 ; Quit if there is not a Response or Claim IEN
"RTN","BPSECMP2",18,0)
 I '$G(RESPIEN) Q
"RTN","BPSECMP2",19,0)
 I '$G(CLAIMIEN) Q
"RTN","BPSECMP2",20,0)
 ;
"RTN","BPSECMP2",21,0)
 ; Get Claims and Response Data
"RTN","BPSECMP2",22,0)
 D GETS^DIQ("9002313.02",CLAIMIEN,"103;400*;401;402;403;426","","CLAIMNFO")
"RTN","BPSECMP2",23,0)
 D GETS^DIQ("9002313.0301","1,"_RESPIEN,"112;503;509;518","I","RESPNFO")
"RTN","BPSECMP2",24,0)
 ;
"RTN","BPSECMP2",25,0)
 ; Get the Transaction IEN and Data
"RTN","BPSECMP2",26,0)
 S IND=$S(CLAIMNFO("9002313.02",CLAIMIEN_",","103")="B2":"AER",1:"AE")
"RTN","BPSECMP2",27,0)
 S TRNDX=$O(^BPST(IND,CLAIMIEN,""))
"RTN","BPSECMP2",28,0)
 I TRNDX="" Q
"RTN","BPSECMP2",29,0)
 D GETS^DIQ("9002313.59",TRNDX,"3;13;404;501;1201","I","TRANINFO")
"RTN","BPSECMP2",30,0)
 ;
"RTN","BPSECMP2",31,0)
 ; Determine Prescription IEN
"RTN","BPSECMP2",32,0)
 S RXIEN=$P(^BPSC(CLAIMIEN,400,1,0),"^",5)
"RTN","BPSECMP2",33,0)
 ;
"RTN","BPSECMP2",34,0)
 ; If Certify Mode is On, don't send to IB
"RTN","BPSECMP2",35,0)
 I $$GET1^DIQ(9002313.59902,"1,"_TRNDX_",","902.22")["MODE ON" Q
"RTN","BPSECMP2",36,0)
 ;
"RTN","BPSECMP2",37,0)
 ; Testing for Certification Only - DLF
"RTN","BPSECMP2",38,0)
 I $$RXAPI1^BPSUTIL1(RXIEN,.01)="" Q
"RTN","BPSECMP2",39,0)
 ;
"RTN","BPSECMP2",40,0)
 ; Store RXACT into a local variable as it is will be used a lot
"RTN","BPSECMP2",41,0)
 S RXACT=TRANINFO("9002313.59",TRNDX_",",1201,"I")
"RTN","BPSECMP2",42,0)
 ;
"RTN","BPSECMP2",43,0)
 ; Setup User data
"RTN","BPSECMP2",44,0)
 ; If event is passed in, the user should be passed in as well
"RTN","BPSECMP2",45,0)
 ; If no Event, but action is Auto-Reversal (AREV) or CMOP (CR*/PC/RL),
"RTN","BPSECMP2",46,0)
 ;     user postmaster (.5)
"RTN","BPSECMP2",47,0)
 ; Else use the user from BPS Transaction
"RTN","BPSECMP2",48,0)
 I EVENT]"" S BPSARRY("USER")=USER
"RTN","BPSECMP2",49,0)
 E  I ",AREV,CRLB,CRLX,CRLR,PC,RL,"[(","_RXACT_",") S BPSARRY("USER")=.5
"RTN","BPSECMP2",50,0)
 E  S BPSARRY("USER")=TRANINFO("9002313.59",TRNDX_",",13,"I")
"RTN","BPSECMP2",51,0)
 ;
"RTN","BPSECMP2",52,0)
 ; Determine Payer Response
"RTN","BPSECMP2",53,0)
 ; Treat Duplicate of Accepted Reversal ("S") as accepted
"RTN","BPSECMP2",54,0)
 S RESPONSE=RESPNFO(9002313.0301,"1,"_RESPIEN_",",112,"I")
"RTN","BPSECMP2",55,0)
 S RESPONSE=$S(RESPONSE="A":"ACCEPTED",RESPONSE="C":"CAPTURED",RESPONSE="D":"DUPLICATE",RESPONSE="P":"PAYABLE",RESPONSE="R":"REJECTED",RESPONSE="S":"ACCEPTED",1:"OTHER")
"RTN","BPSECMP2",56,0)
 ;
"RTN","BPSECMP2",57,0)
 ; Get Prescription Information
"RTN","BPSECMP2",58,0)
 D RXAPI^BPSUTIL1(RXIEN,".01;4;6;7;8;16;27","RXINFO","IE")          ; esg - 4/28/10 - add Rx QTY (*8)
"RTN","BPSECMP2",59,0)
 ;
"RTN","BPSECMP2",60,0)
 ; Get Refill Info if this is a refill
"RTN","BPSECMP2",61,0)
 S FILLNUM=+$E($P(TRNDX,".",2),1,4)
"RTN","BPSECMP2",62,0)
 I FILLNUM>0 D RXSUBF^BPSUTIL1(RXIEN,52,52.1,FILLNUM,".01;1;1.1;11","RFINFO","E")      ; esg - 4/28/10 - add Rx QTY (*8)
"RTN","BPSECMP2",63,0)
 ;
"RTN","BPSECMP2",64,0)
 ; Fill Date
"RTN","BPSECMP2",65,0)
 S BPSARRY("FILL DATE")=CLAIMNFO("9002313.0201","1,"_CLAIMIEN_",","401")
"RTN","BPSECMP2",66,0)
 S %DT="X",X=BPSARRY("FILL DATE") D ^%DT S:Y'=-1 BPSARRY("FILL DATE")=Y
"RTN","BPSECMP2",67,0)
 ;
"RTN","BPSECMP2",68,0)
 ; Information needed for PAID/BILLING event
"RTN","BPSECMP2",69,0)
 S BPSARRY("PAID")=0
"RTN","BPSECMP2",70,0)
 I RESPONSE="PAYABLE" D
"RTN","BPSECMP2",71,0)
 . S BPSARRY("PAID")=$$DFF2EXT^BPSECFM(RESPNFO(9002313.0301,"1,"_RESPIEN_",",509,"I"))
"RTN","BPSECMP2",72,0)
 . S BPSARRY("COPAY")=$$DFF2EXT^BPSECFM(RESPNFO(9002313.0301,"1,"_RESPIEN_",",518,"I"))
"RTN","BPSECMP2",73,0)
 . S BPSARRY("AUTH #")=RESPNFO(9002313.0301,"1,"_RESPIEN_",",503,"I")
"RTN","BPSECMP2",74,0)
 . S BPSARRY("RX NO")=RXINFO(52,RXIEN,.01,"E")
"RTN","BPSECMP2",75,0)
 . S BPSARRY("DRUG")=$$RXAPI1^BPSUTIL1(RXIEN,6,"I")
"RTN","BPSECMP2",76,0)
 . I FILLNUM<1  D
"RTN","BPSECMP2",77,0)
 .. S BPSARRY("DAYS SUPPLY")=RXINFO(52,RXIEN,8,"E")
"RTN","BPSECMP2",78,0)
 .. S BPSARRY("QTY")=RXINFO(52,RXIEN,7,"E")              ; Rx fill quantity
"RTN","BPSECMP2",79,0)
 . E  D
"RTN","BPSECMP2",80,0)
 .. S BPSARRY("DAYS SUPPLY")=$G(RFINFO(52.1,FILLNUM,1.1,"E"))
"RTN","BPSECMP2",81,0)
 .. S BPSARRY("QTY")=$G(RFINFO(52.1,FILLNUM,1,"E"))      ; Rx refill quantity
"RTN","BPSECMP2",82,0)
 ;
"RTN","BPSECMP2",83,0)
 ; Get Plan ID and Rate Type
"RTN","BPSECMP2",84,0)
 I $D(^BPST(TRNDX,10,1,0)) D
"RTN","BPSECMP2",85,0)
 . S BPSARRY("PLAN")=$P(^BPST(TRNDX,10,1,0),U)
"RTN","BPSECMP2",86,0)
 . S BPSARRY("RTYPE")=$P(^BPST(TRNDX,10,1,0),U,8)
"RTN","BPSECMP2",87,0)
 ;
"RTN","BPSECMP2",88,0)
 ; Get primary IB bill# and prior payment amount
"RTN","BPSECMP2",89,0)
 I $D(^BPST(TRNDX,10,1,2)) D
"RTN","BPSECMP2",90,0)
 . S BPSARRY("PRIMARY BILL")=$P(^BPST(TRNDX,10,1,2),U,8)
"RTN","BPSECMP2",91,0)
 . S BPSARRY("PRIOR PAYMENT")=$P(^BPST(TRNDX,10,1,2),U,9)
"RTN","BPSECMP2",92,0)
 ;
"RTN","BPSECMP2",93,0)
 ; Setup miscellaneous values
"RTN","BPSECMP2",94,0)
 S DFN=$$RXAPI1^BPSUTIL1(RXIEN,2,"I")
"RTN","BPSECMP2",95,0)
 S BPSARRY("RXCOB")=$$COB59^BPSUTIL2(TRNDX)
"RTN","BPSECMP2",96,0)
 S BPSARRY("NDC")=$$GETNDC^PSONDCUT(RXIEN,FILLNUM)
"RTN","BPSECMP2",97,0)
 S BPSARRY("FILL NUMBER")=FILLNUM
"RTN","BPSECMP2",98,0)
 S BPSARRY("FILLED BY")=RXINFO(52,RXIEN,16,"I")
"RTN","BPSECMP2",99,0)
 S BPSARRY("PRESCRIPTION")=RXIEN
"RTN","BPSECMP2",100,0)
 S BPSARRY("BILLED")=$P(CLAIMNFO("9002313.0201","1,"_CLAIMIEN_",","426"),"DQ",2)
"RTN","BPSECMP2",101,0)
 S BPSARRY("BILLED")=$$DFF2EXT^BPSECFM(BPSARRY("BILLED"))
"RTN","BPSECMP2",102,0)
 S BPSARRY("CLAIMID")=$P(CLAIMNFO("9002313.0201","1,"_CLAIMIEN_",","402"),"D2",2)
"RTN","BPSECMP2",103,0)
 S RELDATE=$S(FILLNUM=0:$$RXAPI1^BPSUTIL1(RXIEN,31,"I"),1:$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,FILLNUM,17,"I"))
"RTN","BPSECMP2",104,0)
 S BPSARRY("RELEASE DATE")=$P(RELDATE,".")
"RTN","BPSECMP2",105,0)
 S BPSARRY("RESPONSE")=RESPONSE
"RTN","BPSECMP2",106,0)
 S BPSARRY("EPHARM")=$$GET1^DIQ(9002313.59,TRNDX,1.07,"I")
"RTN","BPSECMP2",107,0)
 ;
"RTN","BPSECMP2",108,0)
 ; For reversals, get reversal reason and check for closed reason
"RTN","BPSECMP2",109,0)
 ; Call IB with Reversal Event
"RTN","BPSECMP2",110,0)
 ; If there is a close reason, call IB with CLOSE event
"RTN","BPSECMP2",111,0)
 ;    and update BPS Claim with close information
"RTN","BPSECMP2",112,0)
 I EVENT="",$$ISREVERS^BPSOSU(CLAIMIEN) D  Q
"RTN","BPSECMP2",113,0)
 . S REQCLAIM=TRANINFO("9002313.59",TRNDX_",",3,"I")
"RTN","BPSECMP2",114,0)
 . S BPSARRY("REVERSAL REASON")=TRANINFO("9002313.59",TRNDX_",",404,"I")
"RTN","BPSECMP2",115,0)
 . S BPSARRY("RTS-DEL")=0
"RTN","BPSECMP2",116,0)
 . ; Get RX action, which determine close event
"RTN","BPSECMP2",117,0)
 . I RXACT="RS" S CLREAS="PRESCRIPTION NOT RELEASED",BPSARRY("RTS-DEL")=1
"RTN","BPSECMP2",118,0)
 . I RXACT="DE" D
"RTN","BPSECMP2",119,0)
 . . S CLREAS="PRESCRIPTION DELETED",BPSARRY("RTS-DEL")=1
"RTN","BPSECMP2",120,0)
 . . ; check whether RX was in fact deleted in Pharmacy
"RTN","BPSECMP2",121,0)
 . . ; if not then the refill was deleted
"RTN","BPSECMP2",122,0)
 . . I $$RXSTATUS^BPSSCRU2(RXIEN)'=13 S BPSARRY("CLOSE COMMENT")="DELETION OF REFILL ONLY - ORIGINAL RX MAY REMAIN ACTIVE"
"RTN","BPSECMP2",123,0)
 . ; If accepted inpatient autoreversal, then close the claim
"RTN","BPSECMP2",124,0)
 . I RXACT="AREV",RESPONSE="ACCEPTED",REQCLAIM,$P($G(^BPSC(REQCLAIM,0)),U,7)=2 D
"RTN","BPSECMP2",125,0)
 .. S CLREAS="OTHER",BPSARRY("CLOSE COMMENT")="INPATIENT PRESCRIPTION"
"RTN","BPSECMP2",126,0)
 . I $D(CLREAS) S BPSARRY("CLOSE REASON")=$O(^IBE(356.8,"B",CLREAS,0))
"RTN","BPSECMP2",127,0)
 . ;
"RTN","BPSECMP2",128,0)
 . ; Call IB for Reversal Event
"RTN","BPSECMP2",129,0)
 . S BPSARRY("STATUS")="REVERSED",BILLNUM=$$STORESP^IBNCPDP(DFN,.BPSARRY)
"RTN","BPSECMP2",130,0)
 . ; If there is no close reason, quit
"RTN","BPSECMP2",131,0)
 . I '$D(BPSARRY("CLOSE REASON")) Q
"RTN","BPSECMP2",132,0)
 . ; Call IB for CLOSE event
"RTN","BPSECMP2",133,0)
 . ;  Note for close, user is always postmaster (.5)
"RTN","BPSECMP2",134,0)
 . S BPSARRY("STATUS")="CLOSED",BPSARRY("USER")=.5
"RTN","BPSECMP2",135,0)
 . S BILLNUM=$$STORESP^IBNCPDP(DFN,.BPSARRY)
"RTN","BPSECMP2",136,0)
 . ;
"RTN","BPSECMP2",137,0)
 . ; Populate the original claim request with the close reason
"RTN","BPSECMP2",138,0)
 . I REQCLAIM D
"RTN","BPSECMP2",139,0)
 .. S DIE="^BPSC(",DA=REQCLAIM
"RTN","BPSECMP2",140,0)
 .. S DR="901///1;902///"_$$NOW^XLFDT()_";903////.5;904///"_BPSARRY("CLOSE REASON")
"RTN","BPSECMP2",141,0)
 .. D ^DIE
"RTN","BPSECMP2",142,0)
 ;
"RTN","BPSECMP2",143,0)
 ; If we got here, then it is not a reversal
"RTN","BPSECMP2",144,0)
 ; If EVENT is set, send Submit event
"RTN","BPSECMP2",145,0)
 I EVENT="" S BPSARRY("STATUS")="SUBMITTED",BILLNUM=$$STORESP^IBNCPDP(DFN,.BPSARRY)
"RTN","BPSECMP2",146,0)
 ;
"RTN","BPSECMP2",147,0)
 ; Sent Paid (Billable) event is the claim was paid and released or EVENT is BILL
"RTN","BPSECMP2",148,0)
 ;   Note: User is always postmaster except for BackBilling (BB)
"RTN","BPSECMP2",149,0)
 I EVENT="BILL"!(RESPONSE="PAYABLE"&(BPSARRY("RELEASE DATE")]"")) D
"RTN","BPSECMP2",150,0)
 . I RXACT'="BB" S BPSARRY("USER")=.5
"RTN","BPSECMP2",151,0)
 . ;set reject flag and store primary plan to serve secondary billing when primary claim was rejected
"RTN","BPSECMP2",152,0)
 . I BPSARRY("RXCOB")=2 I $P($$STATUS^BPSOSRX(RXIEN,FILLNUM,,,1),U)["E REJECTED" D
"RTN","BPSECMP2",153,0)
 . . N REJS
"RTN","BPSECMP2",154,0)
 . . S BPSARRY("PRIMREJ")=1,BPSARRY("PRIMPLAN")=$P(^BPST(+$$IEN59^BPSOSRX(RXIEN,FILLNUM,1),10,1,0),U)
"RTN","BPSECMP2",155,0)
 . . D DUR1^BPSNCPD3(RXIEN,FILLNUM,.REJS,"",1)
"RTN","BPSECMP2",156,0)
 . . S BPSARRY("REJ CODE LST")=$G(REJS(1,"REJ CODE LST"))
"RTN","BPSECMP2",157,0)
 . . M BPSARRY("REJ CODES")=REJS(1,"REJ CODES")
"RTN","BPSECMP2",158,0)
 . ;
"RTN","BPSECMP2",159,0)
 . S BPSARRY("STATUS")="PAID",BILLNUM=$$STORESP^IBNCPDP(DFN,.BPSARRY)
"RTN","BPSECMP2",160,0)
 Q
"RTN","BPSECMP2",161,0)
 ;
"RTN","BPSECMP2",162,0)
 ; Synch DURs between ECME and PSO
"RTN","BPSECMP2",163,0)
 ; Parameters:
"RTN","BPSECMP2",164,0)
 ;   IEN59 is the BPS Transaction IEN
"RTN","BPSECMP2",165,0)
DURSYNC(IEN59) ;
"RTN","BPSECMP2",166,0)
 N RXIEN,RXFILL
"RTN","BPSECMP2",167,0)
 ;
"RTN","BPSECMP2",168,0)
 ; Check Parameter
"RTN","BPSECMP2",169,0)
 I IEN59="" Q
"RTN","BPSECMP2",170,0)
 ;
"RTN","BPSECMP2",171,0)
 ; Get Prescription and Fill number
"RTN","BPSECMP2",172,0)
 S RXIEN=$$GET1^DIQ(9002313.59,IEN59_",",1.11,"I")
"RTN","BPSECMP2",173,0)
 S RXFILL=$$GET1^DIQ(9002313.59902,"1,"_IEN59_",",902.17,"E")
"RTN","BPSECMP2",174,0)
 I RXIEN=""!(RXFILL="") Q
"RTN","BPSECMP2",175,0)
 ;
"RTN","BPSECMP2",176,0)
 ; Call PSO to sync reject codes
"RTN","BPSECMP2",177,0)
 D SYNC^PSOREJUT(RXIEN,RXFILL,"",$$COB59^BPSUTIL2(IEN59))
"RTN","BPSECMP2",178,0)
 Q
"RTN","BPSECMP2",179,0)
 ;
"RTN","BPSECMP2",180,0)
 ; Process Other Paid Amount Grouping from the Pricing Segment
"RTN","BPSECMP2",181,0)
 ; Note that FDATA, TRANSACT, FDAIEN, and FDAIEN03 are newed
"RTN","BPSECMP2",182,0)
 ;   and initialized by BPSECMPS
"RTN","BPSECMP2",183,0)
PROCOTH ;
"RTN","BPSECMP2",184,0)
 Q:$G(FDATA(TRANSACT,563))=""
"RTN","BPSECMP2",185,0)
 N NNDX,FILE,ROOT,FDATA3,FLDNUM
"RTN","BPSECMP2",186,0)
 S FILE="9002313.1401"
"RTN","BPSECMP2",187,0)
 S ROOT="FDATA3(9002313.1401)"
"RTN","BPSECMP2",188,0)
 S NNDX=""
"RTN","BPSECMP2",189,0)
 F  S NNDX=$O(FDATA(TRANSACT,564,NNDX)) Q:NNDX=""  D
"RTN","BPSECMP2",190,0)
 .S FLDNUM=.01 D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",NNDX,ROOT)
"RTN","BPSECMP2",191,0)
 .F FLDNUM=564,565 D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",$G(FDATA(TRANSACT,FLDNUM,NNDX)),ROOT)
"RTN","BPSECMP2",192,0)
 D UPDATE^DIE("S","FDATA3(9002313.1401)")
"RTN","BPSECMP2",193,0)
 Q
"RTN","BPSECMP2",194,0)
 ;
"RTN","BPSECMP2",195,0)
 ; Process DUR Response Segment
"RTN","BPSECMP2",196,0)
 ; Note that FDATA, TRANSACT, FDAIEN, and FDAIEN03 are newed
"RTN","BPSECMP2",197,0)
 ;   and initialized by BPSECMPS
"RTN","BPSECMP2",198,0)
PROCDUR ;
"RTN","BPSECMP2",199,0)
 Q:$G(FDATA(TRANSACT,567,1))=""
"RTN","BPSECMP2",200,0)
 N NNDX,FILE,ROOT,FDAT1101,FLDNUM
"RTN","BPSECMP2",201,0)
 S FILE="9002313.1101"
"RTN","BPSECMP2",202,0)
 S ROOT="FDAT1101(9002313.1101)"
"RTN","BPSECMP2",203,0)
 S NNDX=""
"RTN","BPSECMP2",204,0)
 F  S NNDX=$O(FDATA(TRANSACT,567,NNDX)) Q:NNDX=""  D
"RTN","BPSECMP2",205,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,567,NNDX),ROOT)
"RTN","BPSECMP2",206,0)
 .I $D(FDATA(TRANSACT,439,NNDX))  D
"RTN","BPSECMP2",207,0)
 ..S FLDNUM="439"
"RTN","BPSECMP2",208,0)
 ..D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,439,NNDX),ROOT)
"RTN","BPSECMP2",209,0)
 .I $D(FDATA(TRANSACT,528,NNDX))  D
"RTN","BPSECMP2",210,0)
 ..S FLDNUM="528"
"RTN","BPSECMP2",211,0)
 ..D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,528,NNDX),ROOT)
"RTN","BPSECMP2",212,0)
 .I $D(FDATA(TRANSACT,529,NNDX))  D
"RTN","BPSECMP2",213,0)
 ..S FLDNUM="529"
"RTN","BPSECMP2",214,0)
 ..D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,529,NNDX),ROOT)
"RTN","BPSECMP2",215,0)
 .I $D(FDATA(TRANSACT,530,NNDX))  D
"RTN","BPSECMP2",216,0)
 ..S FLDNUM="530"
"RTN","BPSECMP2",217,0)
 ..D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,530,NNDX),ROOT)
"RTN","BPSECMP2",218,0)
 .I $D(FDATA(TRANSACT,531,NNDX))  D
"RTN","BPSECMP2",219,0)
 ..S FLDNUM="531"
"RTN","BPSECMP2",220,0)
 ..D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,531,NNDX),ROOT)
"RTN","BPSECMP2",221,0)
 .I $D(FDATA(TRANSACT,532,NNDX))  D
"RTN","BPSECMP2",222,0)
 ..S FLDNUM="532"
"RTN","BPSECMP2",223,0)
 ..D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,532,NNDX),ROOT)
"RTN","BPSECMP2",224,0)
 .I $D(FDATA(TRANSACT,533,NNDX))  D
"RTN","BPSECMP2",225,0)
 ..S FLDNUM="533"
"RTN","BPSECMP2",226,0)
 ..D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,533,NNDX),ROOT)
"RTN","BPSECMP2",227,0)
 .I $D(FDATA(TRANSACT,544,NNDX)) D
"RTN","BPSECMP2",228,0)
 ..S FLDNUM="544"
"RTN","BPSECMP2",229,0)
 ..D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,544,NNDX),ROOT)
"RTN","BPSECMP2",230,0)
 D UPDATE^DIE("S","FDAT1101(9002313.1101)")
"RTN","BPSECMP2",231,0)
 Q
"RTN","BPSECX0")
0^53^B23106196
"RTN","BPSECX0",1,0)
BPSECX0 ;BHAM ISC/FCS/DRS/VA/DLF - Retrieve Claim submission record ;05/17/2004
"RTN","BPSECX0",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8**;JUN 2004;Build 29
"RTN","BPSECX0",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSECX0",4,0)
 Q
"RTN","BPSECX0",5,0)
 ;----------------------------------------------------------------------
"RTN","BPSECX0",6,0)
 ;Retrieve Claim submission record
"RTN","BPSECX0",7,0)
 ;
"RTN","BPSECX0",8,0)
 ;Input Variables:   CLAIMIEN -  Claim Submission IEN (9002313.02)
"RTN","BPSECX0",9,0)
 ;                   .BPS     -  Pass by reference, output only
"RTN","BPSECX0",10,0)
 ;
"RTN","BPSECX0",11,0)
 ;Output Variables:  BPS(9002313.02,CLAIMIEN,<field #>,"I")  = Value
"RTN","BPSECX0",12,0)
 ;----------------------------------------------------------------------
"RTN","BPSECX0",13,0)
 ; IHS/SD/lwj  08/13/02  NCPDP 5.1 changes
"RTN","BPSECX0",14,0)
 ; Many fields that were once a part of the "header" of the claim
"RTN","BPSECX0",15,0)
 ; were shifted to appear on the "rx" or "detail" segments of the
"RTN","BPSECX0",16,0)
 ; claim in 5.1. Additionally, MANY new fields were added beyond 499. 
"RTN","BPSECX0",17,0)
 ; For these reasons, we had to change the GETBPS3
"RTN","BPSECX0",18,0)
 ; subroutine to pull fields 308 through 600 rather than just 
"RTN","BPSECX0",19,0)
 ; 402 - 499. The really cool thing is that because we are at the
"RTN","BPSECX0",20,0)
 ; subfile level, the duplicated fields (between header and rx)
"RTN","BPSECX0",21,0)
 ; will only pull at the appropriate level.  3.2 claims should
"RTN","BPSECX0",22,0)
 ; be unaffected by this change, as the adjusted and new fields
"RTN","BPSECX0",23,0)
 ; were not populated for 3.2
"RTN","BPSECX0",24,0)
 ;
"RTN","BPSECX0",25,0)
 ; New subroutine added GETBPS4 to pull out the repeating fields for
"RTN","BPSECX0",26,0)
 ; the DUR/PPS records
"RTN","BPSECX0",27,0)
 ;----------------------------------------------------------------------
"RTN","BPSECX0",28,0)
 ; 
"RTN","BPSECX0",29,0)
GETBPS2(CLAIMIEN,BPS) ;EP - from BPSECA1 from BPSOSQG from BPSOSQ2
"RTN","BPSECX0",30,0)
 ;Manage local variables
"RTN","BPSECX0",31,0)
 N DIC,DR,DA,DIQ,D0,DIQ2
"RTN","BPSECX0",32,0)
 ;
"RTN","BPSECX0",33,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",34,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",35,0)
 ;
"RTN","BPSECX0",36,0)
 ;Set input variables for FileMan data retrieval routine
"RTN","BPSECX0",37,0)
 ;IHS/SD/lwj 9/9/02  need to expand the field range to include
"RTN","BPSECX0",38,0)
 ; the "500" range fields now used in the header segments
"RTN","BPSECX0",39,0)
 ; for NCPDP 5.1
"RTN","BPSECX0",40,0)
 ;
"RTN","BPSECX0",41,0)
 S DIC=9002313.02
"RTN","BPSECX0",42,0)
 ; IHS/SD/lwj 9/9/02 NCPDP 5.1 changes
"RTN","BPSECX0",43,0)
 S DR="101:600"
"RTN","BPSECX0",44,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",45,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",46,0)
 ;
"RTN","BPSECX0",47,0)
 ;Execute data retrieval routine
"RTN","BPSECX0",48,0)
 D EN^DIQ1
"RTN","BPSECX0",49,0)
 Q
"RTN","BPSECX0",50,0)
 ;----------------------------------------------------------------------
"RTN","BPSECX0",51,0)
 ;Retrieve Claim Submission, Prescription(s) multiple record
"RTN","BPSECX0",52,0)
 ;
"RTN","BPSECX0",53,0)
 ;Input Variables:   CLAIMIEN - Claim Submission IEN (9002313.02)
"RTN","BPSECX0",54,0)
 ;                   CRXIEN   - Prescription Multiple IEN (9002313.0201)
"RTN","BPSECX0",55,0)
 ;
"RTN","BPSECX0",56,0)
 ;Output Variables:  BPS(9002313.0201,CRXIEN,<field #>,"I") = Value
"RTN","BPSECX0",57,0)
 ;----------------------------------------------------------------------
"RTN","BPSECX0",58,0)
GETBPS3(CLAIMIEN,CRXIEN,BPS) ;EP - from BPSECA1
"RTN","BPSECX0",59,0)
 ;Manage local variables
"RTN","BPSECX0",60,0)
 N DIC,DR,DA,DIQ,D0,DIQ2
"RTN","BPSECX0",61,0)
 ;
"RTN","BPSECX0",62,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",63,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",64,0)
 Q:$G(CRXIEN)=""
"RTN","BPSECX0",65,0)
 ;
"RTN","BPSECX0",66,0)
 ;S input variables for FileMan data retrieval routine
"RTN","BPSECX0",67,0)
 S DIC=9002313.02
"RTN","BPSECX0",68,0)
 ;
"RTN","BPSECX0",69,0)
 S DR="400",DR(9002313.0201)="308:600"  ;need new RX fields
"RTN","BPSECX0",70,0)
 ;IHS/SD/lwj 8/13/02 end changes
"RTN","BPSECX0",71,0)
 S DA=CLAIMIEN,DA(9002313.0201)=CRXIEN
"RTN","BPSECX0",72,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",73,0)
 ;
"RTN","BPSECX0",74,0)
 ;Execute data retrieval routine
"RTN","BPSECX0",75,0)
 D EN^DIQ1
"RTN","BPSECX0",76,0)
 Q
"RTN","BPSECX0",77,0)
 ;----------------------------------------------------------------------
"RTN","BPSECX0",78,0)
 ;Retrieve Claim Submission, Prescription(s) multiple, DUR/PPS multiple 
"RTN","BPSECX0",79,0)
 ; record
"RTN","BPSECX0",80,0)
 ;
"RTN","BPSECX0",81,0)
 ;Input Variables:   CLAIMIEN - Claim Submission IEN (9002313.02)
"RTN","BPSECX0",82,0)
 ;                   CRXIEN   - Prescription Multiple IEN (9002313.0201)
"RTN","BPSECX0",83,0)
 ;                   CDURIEN  - DUR/PPS Multiple IEN (9002313.1001)
"RTN","BPSECX0",84,0)
 ;
"RTN","BPSECX0",85,0)
 ;Output Variables:  BPS(9002313.1001,CDURIEN,<field #>,"I") = Value
"RTN","BPSECX0",86,0)
 ;----------------------------------------------------------------------
"RTN","BPSECX0",87,0)
GETBPS4(CLAIMIEN,CRXIEN,CDURIEN,BPS) ;EP - from BPSECA1
"RTN","BPSECX0",88,0)
 ;
"RTN","BPSECX0",89,0)
 ;Manage local variables
"RTN","BPSECX0",90,0)
 N DIC,DR,DA,DIQ,D0,DIQ2
"RTN","BPSECX0",91,0)
 ;
"RTN","BPSECX0",92,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",93,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",94,0)
 Q:$G(CRXIEN)=""
"RTN","BPSECX0",95,0)
 Q:$G(CDURIEN)=""
"RTN","BPSECX0",96,0)
 ;
"RTN","BPSECX0",97,0)
 ;S input variables for FileMan data retrieval routine
"RTN","BPSECX0",98,0)
 S DIC=9002313.02
"RTN","BPSECX0",99,0)
 ;
"RTN","BPSECX0",100,0)
 S DR="400",DR(9002313.0201)=473.01  ;fields
"RTN","BPSECX0",101,0)
 S DR(9002313.1001)=".01;439;440;441;474;475;476"  ;fields
"RTN","BPSECX0",102,0)
 S DA=CLAIMIEN,DA(9002313.0201)=CRXIEN,DA(9002313.1001)=CDURIEN
"RTN","BPSECX0",103,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",104,0)
 ;
"RTN","BPSECX0",105,0)
 ;Execute data retrieval routine
"RTN","BPSECX0",106,0)
 D EN^DIQ1
"RTN","BPSECX0",107,0)
 ;
"RTN","BPSECX0",108,0)
 Q
"RTN","BPSECX0",109,0)
 ;----------------------------------------------------------------------
"RTN","BPSECX0",110,0)
 ;Retrieve Claim Submission, Prescription(s) multiple, COB OTHER PAYMENTS 
"RTN","BPSECX0",111,0)
 ; multiple record
"RTN","BPSECX0",112,0)
 ;
"RTN","BPSECX0",113,0)
 ;Input Variables:   CLAIMIEN - Claim Submission IEN (9002313.02)
"RTN","BPSECX0",114,0)
 ;                   CRXIEN   - Prescription Multiple IEN (9002313.0201)
"RTN","BPSECX0",115,0)
 ;                   BPCOBIEN  - COB OTHER PAYMENTS Multiple IEN (9002313.0401)
"RTN","BPSECX0",116,0)
 ;
"RTN","BPSECX0",117,0)
 ;Output Variables:  BPS(9002313.0401,BPCOBIEN,<field #>,"I") = Value
"RTN","BPSECX0",118,0)
 ;----------------------------------------------------------------------
"RTN","BPSECX0",119,0)
GETBPS5(CLAIMIEN,CRXIEN,BPCOBIEN,BPS) ;EP - from BPSECA1
"RTN","BPSECX0",120,0)
 ;
"RTN","BPSECX0",121,0)
 ;Manage local variables
"RTN","BPSECX0",122,0)
 N DIC,DR,DA,DIQ,D0,DIQ2,BPSPAMT,BPREJCT,BPSCNT
"RTN","BPSECX0",123,0)
 ;
"RTN","BPSECX0",124,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",125,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",126,0)
 Q:$G(CRXIEN)=""
"RTN","BPSECX0",127,0)
 Q:$G(BPCOBIEN)=""
"RTN","BPSECX0",128,0)
 ;
"RTN","BPSECX0",129,0)
 ;S input variables for FileMan data retrieval routine
"RTN","BPSECX0",130,0)
 S DIC=9002313.02
"RTN","BPSECX0",131,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",132,0)
 S DA(9002313.0201)=CRXIEN
"RTN","BPSECX0",133,0)
 S DA(9002313.0401)=BPCOBIEN
"RTN","BPSECX0",134,0)
 ;
"RTN","BPSECX0",135,0)
 S DR="400" ;field (#400) MEDICATIONS
"RTN","BPSECX0",136,0)
 S DR(9002313.0201)=337.01  ;field (#337.01) COB OTHER PAYMENTS
"RTN","BPSECX0",137,0)
 S DR(9002313.0401)=".01;338;339;340;341;443;471"  ;fields
"RTN","BPSECX0",138,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",139,0)
 ;
"RTN","BPSECX0",140,0)
 ;Execute data retrieval routine
"RTN","BPSECX0",141,0)
 D EN^DIQ1
"RTN","BPSECX0",142,0)
 ;
"RTN","BPSECX0",143,0)
 ; Loop through PAYER AMT and get the data
"RTN","BPSECX0",144,0)
 S BPSPAMT=$P($G(^BPSC(CLAIMIEN,400,CRXIEN,337,BPCOBIEN,1,0)),U,4)
"RTN","BPSECX0",145,0)
 F BPSCNT=1:1:BPSPAMT  D
"RTN","BPSECX0",146,0)
 . D GETBPS6^BPSECX0(CLAIMIEN,CRXIEN,BPCOBIEN,BPSCNT,.BPS)
"RTN","BPSECX0",147,0)
 ;
"RTN","BPSECX0",148,0)
 ; Loop through OTHER PAYER REJECT CODE multiple and get the data
"RTN","BPSECX0",149,0)
 S BPREJCT=$P($G(^BPSC(CLAIMIEN,400,CRXIEN,337,BPCOBIEN,2,0)),U,4)
"RTN","BPSECX0",150,0)
 F BPSCNT=1:1:BPREJCT  D
"RTN","BPSECX0",151,0)
 . D GETBPS7^BPSECX0(CLAIMIEN,CRXIEN,BPCOBIEN,BPSCNT,.BPS)
"RTN","BPSECX0",152,0)
 ;
"RTN","BPSECX0",153,0)
 Q
"RTN","BPSECX0",154,0)
 ;
"RTN","BPSECX0",155,0)
GETBPS6(CLAIMIEN,CRXIEN,BPCOBIEN,BPPAYAMT,BPS) ;EP - from GETBPS5
"RTN","BPSECX0",156,0)
 ;
"RTN","BPSECX0",157,0)
 ;Manage local variables
"RTN","BPSECX0",158,0)
 N DIC,DR,DA,DIQ,D0,DIQ2
"RTN","BPSECX0",159,0)
 ;
"RTN","BPSECX0",160,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",161,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",162,0)
 Q:$G(CRXIEN)=""
"RTN","BPSECX0",163,0)
 Q:$G(BPCOBIEN)=""
"RTN","BPSECX0",164,0)
 Q:$G(BPPAYAMT)=""
"RTN","BPSECX0",165,0)
 ;
"RTN","BPSECX0",166,0)
 ;S input variables for FileMan data retrieval routine
"RTN","BPSECX0",167,0)
 S DIC=9002313.02
"RTN","BPSECX0",168,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",169,0)
 S DA(9002313.0201)=CRXIEN
"RTN","BPSECX0",170,0)
 S DA(9002313.0401)=BPCOBIEN
"RTN","BPSECX0",171,0)
 S DA(9002313.401342)=BPPAYAMT
"RTN","BPSECX0",172,0)
 ;
"RTN","BPSECX0",173,0)
 S DR="400" ;field (#400) MEDICATIONS
"RTN","BPSECX0",174,0)
 S DR(9002313.0201)=337.01  ;field (#337.01) COB OTHER PAYMENTS
"RTN","BPSECX0",175,0)
 S DR(9002313.0401)=342 ;(#342) OTHER PAYER AMT PAID QUALIFIER
"RTN","BPSECX0",176,0)
 S DR(9002313.401342)=".01;431"  ;fields
"RTN","BPSECX0",177,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",178,0)
 ;
"RTN","BPSECX0",179,0)
 ;Execute data retrieval routine
"RTN","BPSECX0",180,0)
 D EN^DIQ1
"RTN","BPSECX0",181,0)
 Q
"RTN","BPSECX0",182,0)
 ;
"RTN","BPSECX0",183,0)
GETBPS7(CLAIMIEN,CRXIEN,BPCOBIEN,BPREJCT,BPS) ;EP - from GETBPS5
"RTN","BPSECX0",184,0)
 ;
"RTN","BPSECX0",185,0)
 ;Manage local variables
"RTN","BPSECX0",186,0)
 N DIC,DR,DA,DIQ,D0,DIQ2
"RTN","BPSECX0",187,0)
 ;
"RTN","BPSECX0",188,0)
 ;Make sure input variables are defined
"RTN","BPSECX0",189,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECX0",190,0)
 Q:$G(CRXIEN)=""
"RTN","BPSECX0",191,0)
 Q:$G(BPCOBIEN)=""
"RTN","BPSECX0",192,0)
 Q:$G(BPREJCT)=""
"RTN","BPSECX0",193,0)
 ;
"RTN","BPSECX0",194,0)
 ;S input variables for FileMan data retrieval routine
"RTN","BPSECX0",195,0)
 S DIC=9002313.02
"RTN","BPSECX0",196,0)
 S DA=CLAIMIEN
"RTN","BPSECX0",197,0)
 S DA(9002313.0201)=CRXIEN
"RTN","BPSECX0",198,0)
 S DA(9002313.0401)=BPCOBIEN
"RTN","BPSECX0",199,0)
 S DA(9002313.401472)=BPREJCT
"RTN","BPSECX0",200,0)
 ;
"RTN","BPSECX0",201,0)
 S DR="400" ;field (#400) MEDICATIONS
"RTN","BPSECX0",202,0)
 S DR(9002313.0201)=337.01  ;field (#337.01) COB OTHER PAYMENTS
"RTN","BPSECX0",203,0)
 S DR(9002313.0401)=472 ;(#472) OTHER PAYER REJECT CODE
"RTN","BPSECX0",204,0)
 S DR(9002313.401472)=".01"  ;fields
"RTN","BPSECX0",205,0)
 S DIQ="BPS",DIQ(0)="I"
"RTN","BPSECX0",206,0)
 ;
"RTN","BPSECX0",207,0)
 ;Execute data retrieval routine
"RTN","BPSECX0",208,0)
 D EN^DIQ1
"RTN","BPSECX0",209,0)
 Q
"RTN","BPSECX0",210,0)
 ;
"RTN","BPSFLD01")
0^50^B9727334
"RTN","BPSFLD01",1,0)
BPSFLD01 ;ALB/SS - ePharmacy secondary billing - COB fields processing ;27-FEB-09
"RTN","BPSFLD01",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8**;JUN 2004;Build 29
"RTN","BPSFLD01",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSFLD01",4,0)
 ;
"RTN","BPSFLD01",5,0)
SET337 ; 337-4C Other Payments Count
"RTN","BPSFLD01",6,0)
 ; This field is used twice.
"RTN","BPSFLD01",7,0)
 ; The total count is stored in 9002313.0201,337.  BPSOPIEN is not defined for this case.
"RTN","BPSFLD01",8,0)
 ; The individual counter is stored in 9002313.0401,.01 where BPSOPIEN is defined.
"RTN","BPSFLD01",9,0)
 ;
"RTN","BPSFLD01",10,0)
 I '$G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),330),U,7)=BPS("X") Q
"RTN","BPSFLD01",11,0)
 ;
"RTN","BPSFLD01",12,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,1)=BPS("X")
"RTN","BPSFLD01",13,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,"B",BPS("X"),BPSOPIEN)=""
"RTN","BPSFLD01",14,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,0)="^9002313.0401A^"_BPSOPIEN_U_BPSOPIEN
"RTN","BPSFLD01",15,0)
 Q
"RTN","BPSFLD01",16,0)
 ;
"RTN","BPSFLD01",17,0)
SET338 ; 338-5C Other Payer Coverage Type
"RTN","BPSFLD01",18,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,2)=BPS("X")
"RTN","BPSFLD01",19,0)
 Q
"RTN","BPSFLD01",20,0)
 ;
"RTN","BPSFLD01",21,0)
SET339 ; 339-6C Other Payer ID Qualifier
"RTN","BPSFLD01",22,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,3)=BPS("X")
"RTN","BPSFLD01",23,0)
 Q
"RTN","BPSFLD01",24,0)
 ;
"RTN","BPSFLD01",25,0)
SET340 ; 340-7C Other Payer ID
"RTN","BPSFLD01",26,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,4)=BPS("X")
"RTN","BPSFLD01",27,0)
 Q
"RTN","BPSFLD01",28,0)
 ;
"RTN","BPSFLD01",29,0)
SET443 ; 443-E8 Other Payer Date
"RTN","BPSFLD01",30,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,5)=BPS("X")
"RTN","BPSFLD01",31,0)
 Q
"RTN","BPSFLD01",32,0)
 ;
"RTN","BPSFLD01",33,0)
SET341 ; 341-HB Other Payer Amount Paid Count
"RTN","BPSFLD01",34,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,6)=BPS("X")
"RTN","BPSFLD01",35,0)
 Q
"RTN","BPSFLD01",36,0)
 ;
"RTN","BPSFLD01",37,0)
SET471 ; 471-5E Other Payer Reject Count
"RTN","BPSFLD01",38,0)
 I $G(BPSOPIEN) S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,0),U,7)=BPS("X")
"RTN","BPSFLD01",39,0)
 Q
"RTN","BPSFLD01",40,0)
 ;
"RTN","BPSFLD01",41,0)
SET342 ; 342-HC Other Payer Amount Paid Qualifier
"RTN","BPSFLD01",42,0)
 ; .01 field in the 9002313.401342 sub-file
"RTN","BPSFLD01",43,0)
 I '$G(BPSOPIEN)!'$G(BPSOAIEN) Q
"RTN","BPSFLD01",44,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,1,BPSOAIEN,0),U,1)=BPS("X")
"RTN","BPSFLD01",45,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,1,"B",BPS("X"),BPSOAIEN)=""
"RTN","BPSFLD01",46,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,1,0)="^9002313.401342A^"_BPSOAIEN_U_BPSOAIEN
"RTN","BPSFLD01",47,0)
 Q
"RTN","BPSFLD01",48,0)
 ;
"RTN","BPSFLD01",49,0)
SET431 ; 431-DV Other Payer Amount Paid
"RTN","BPSFLD01",50,0)
 I '$G(BPSOPIEN)!'$G(BPSOAIEN) Q
"RTN","BPSFLD01",51,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,1,BPSOAIEN,0),U,2)=BPS("X")
"RTN","BPSFLD01",52,0)
 ;;;;;;
"RTN","BPSFLD01",53,0)
 ;;; this field is also being moved into 9002313.0201,431 OTHER PAYER AMOUNT
"RTN","BPSFLD01",54,0)
 ;;; But this field is a multiple so their could be many other payer amounts......
"RTN","BPSFLD01",55,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),430),U,1)=BPS("X")
"RTN","BPSFLD01",56,0)
 ;;;;;;
"RTN","BPSFLD01",57,0)
 Q
"RTN","BPSFLD01",58,0)
 ;
"RTN","BPSFLD01",59,0)
SET472 ; 472-6E Other Payer Reject Code
"RTN","BPSFLD01",60,0)
 ; .01 field in the 9002313.401472 sub-file
"RTN","BPSFLD01",61,0)
 I '$G(BPSOPIEN)!'$G(BPSORIEN) Q
"RTN","BPSFLD01",62,0)
 S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,2,BPSORIEN,0),U,1)=BPS("X")
"RTN","BPSFLD01",63,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,2,"B",BPS("X"),BPSORIEN)=""
"RTN","BPSFLD01",64,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),337,BPSOPIEN,2,0)="^9002313.401472A^"_BPSORIEN_U_BPSORIEN
"RTN","BPSFLD01",65,0)
 Q
"RTN","BPSFLD01",66,0)
 ;
"RTN","BPSNCPD1")
0^21^B44878746
"RTN","BPSNCPD1",1,0)
BPSNCPD1 ;BHAM ISC/LJE - Pharmacy API part 2 ;06/16/2004
"RTN","BPSNCPD1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,6,7,8**;JUN 2004;Build 29
"RTN","BPSNCPD1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSNCPD1",4,0)
 ;
"RTN","BPSNCPD1",5,0)
 ; Procedure STARRAY - Retrieve information for API call to IB and store in BPSARRY
"RTN","BPSNCPD1",6,0)
 ; Incoming Parameters
"RTN","BPSNCPD1",7,0)
 ;    BRXIEN - Prescription IEN
"RTN","BPSNCPD1",8,0)
 ;    BFILL  - Fill Number
"RTN","BPSNCPD1",9,0)
 ;    BWHERE - RX action
"RTN","BPSNCPD1",10,0)
 ;    BPSARRY  - Array that is built (passed by reference)
"RTN","BPSNCPD1",11,0)
 ;    BPSITE - OUTPATIENT SITE file #59 ien
"RTN","BPSNCPD1",12,0)
 ; background parameters:
"RTN","BPSNCPD1",13,0)
 ; DFN - patient's IEN
"RTN","BPSNCPD1",14,0)
 ; BILLNDC - NDC
"RTN","BPSNCPD1",15,0)
 ; BFILLDAT - fill date
"RTN","BPSNCPD1",16,0)
STARRAY(BRXIEN,BFILL,BWHERE,BPSARRY,BPSITE) ;
"RTN","BPSNCPD1",17,0)
 N DRUGIEN,BPARR,BPSARR,QTY
"RTN","BPSNCPD1",18,0)
 D RXAPI^BPSUTIL1(BRXIEN,"6;7;8;17;31","BPARR","I")
"RTN","BPSNCPD1",19,0)
 I BFILL>0 D RXSUBF^BPSUTIL1(BRXIEN,52,52.1,BFILL,"1;1.1;1.2;17","BPARR","I")
"RTN","BPSNCPD1",20,0)
 S BPSARRY("DFN")=DFN
"RTN","BPSNCPD1",21,0)
 S BPSARRY("DAYS SUPPLY")=$S(BFILL=0:$G(BPARR(52,BRXIEN,8,"I")),1:$G(BPARR(52.1,BFILL,1.1,"I")))
"RTN","BPSNCPD1",22,0)
 S BPSARRY("IEN")=BRXIEN
"RTN","BPSNCPD1",23,0)
 S BPSARRY("FILL NUMBER")=BFILL
"RTN","BPSNCPD1",24,0)
 S BPSARRY("NDC")=BILLNDC
"RTN","BPSNCPD1",25,0)
 S (BPSARRY("DRUG"),DRUGIEN)=BPARR(52,BRXIEN,6,"I")
"RTN","BPSNCPD1",26,0)
 S BPSARRY("DEA")=$$DRUGDIE^BPSUTIL1(DRUGIEN,3)
"RTN","BPSNCPD1",27,0)
 S BPSARRY("COST")=$S(BFILL=0:$G(BPARR(52,BRXIEN,17,"I")),1:$G(BPARR(52.1,BFILL,1.2,"I")))
"RTN","BPSNCPD1",28,0)
 S QTY=$S(BFILL=0:$G(BPARR(52,BRXIEN,7,"I")),1:$G(BPARR(52.1,BFILL,1,"I")))
"RTN","BPSNCPD1",29,0)
 S BPSARRY("QTY")=QTY     ; esg - 4/28/10 - use the Rx QTY at this point (*8)
"RTN","BPSNCPD1",30,0)
 S BPSARRY("FILL DATE")=BFILLDAT
"RTN","BPSNCPD1",31,0)
 S BPSARRY("RELEASE DATE")=$P($S(BFILL=0:$G(BPARR(52,BRXIEN,31,"I")),1:$G(BPARR(52.1,BFILL,17,"I"))),".")
"RTN","BPSNCPD1",32,0)
 S BPSARRY("SC/EI OVR")=0
"RTN","BPSNCPD1",33,0)
 ;determine BPS PHARMACY
"RTN","BPSNCPD1",34,0)
 I $G(BPSITE)>0 S BPSARRY("EPHARM")=$$GETPHARM^BPSUTIL(BPSITE)
"RTN","BPSNCPD1",35,0)
 ;
"RTN","BPSNCPD1",36,0)
 ; Add user so that it is stored correctly in the IB Event Log
"RTN","BPSNCPD1",37,0)
 ;  Note: Auto-Reversals (AREV) and CMOP/OPAI (CR*/PC/RL) use postmaster (.5)
"RTN","BPSNCPD1",38,0)
 I ",AREV,CRLB,CRLX,CRLR,PC,RL,"[(","_BWHERE_",") S BPSARRY("USER")=.5
"RTN","BPSNCPD1",39,0)
 E  S BPSARRY("USER")=DUZ
"RTN","BPSNCPD1",40,0)
 Q
"RTN","BPSNCPD1",41,0)
 ;
"RTN","BPSNCPD1",42,0)
 ; Called by BPSNCPDP to display progress of claim
"RTN","BPSNCPD1",43,0)
 ; BRXIEN = Prescription IEN
"RTN","BPSNCPD1",44,0)
 ; BFILL = Fill Number
"RTN","BPSNCPD1",45,0)
 ; REBILL = rebill flag
"RTN","BPSNCPD1",46,0)
 ; REVONLY = reversal only flag
"RTN","BPSNCPD1",47,0)
 ; BPSTART = date/time
"RTN","BPSNCPD1",48,0)
 ; BWHERE  = RX Action (see BPSNCPDP comments above for details)
"RTN","BPSNCPD1",49,0)
 ; BPREQIEN = the BPS REQUESTS (#9002313.77) IEN
"RTN","BPSNCPD1",50,0)
STATUS(BRXIEN,BFILL,REBILL,REVONLY,BPSTART,BWHERE,BPREQIEN,BPSCOB) ;
"RTN","BPSNCPD1",51,0)
 ; Initialization
"RTN","BPSNCPD1",52,0)
 N TRANSIEN,CERTUSER,BPSTO,END,IBSEQ,BPQ,BP77OLD,BP77,BPQQ
"RTN","BPSNCPD1",53,0)
 N CLMSTAT,OCLMSTAT,RESFL,BPACTTYP
"RTN","BPSNCPD1",54,0)
 S BPACTTYP=$$ACTTYPE^BPSOSRX5(BWHERE)
"RTN","BPSNCPD1",55,0)
 S (CLMSTAT,OCLMSTAT)=0
"RTN","BPSNCPD1",56,0)
 ;
"RTN","BPSNCPD1",57,0)
 ; Set CERTUSER to true if this user is the certifier
"RTN","BPSNCPD1",58,0)
 S CERTUSER=^BPS(9002313.99,1,"CERTIFIER")=DUZ
"RTN","BPSNCPD1",59,0)
 ;
"RTN","BPSNCPD1",60,0)
 ; Build Transaction IEN
"RTN","BPSNCPD1",61,0)
 S TRANSIEN=BRXIEN_"."_$E($TR($J("",4-$L(BFILL))," ","0")_BFILL,1,4)_1
"RTN","BPSNCPD1",62,0)
 ;
"RTN","BPSNCPD1",63,0)
 ; Write Rebill and Status Messages
"RTN","BPSNCPD1",64,0)
 ;
"RTN","BPSNCPD1",65,0)
 W !!,"Claim Status: "
"RTN","BPSNCPD1",66,0)
 I REBILL,BPACTTYP="UC" W !,"Reversing and Rebilling a previously submitted claim..." ;,!,"Reversing..."
"RTN","BPSNCPD1",67,0)
 I REBILL,BPACTTYP="U" W !,"Reversing..."
"RTN","BPSNCPD1",68,0)
 ;
"RTN","BPSNCPD1",69,0)
 ; Get the ECME Timeout and set the display timeout
"RTN","BPSNCPD1",70,0)
 S BPSTO=$$GET1^DIQ(9002313.99,"1,",3.01),END=$S(CERTUSER:50,$G(BPSTO)]"":BPSTO,1:5)
"RTN","BPSNCPD1",71,0)
 ;
"RTN","BPSNCPD1",72,0)
 ; For remaining time, loop through and display status
"RTN","BPSNCPD1",73,0)
 S (BPQ,RESFL,BP77OLD)=0
"RTN","BPSNCPD1",74,0)
 F IBSEQ=1:1:END D  Q:BPQ=1
"RTN","BPSNCPD1",75,0)
 . H 1
"RTN","BPSNCPD1",76,0)
 . ;
"RTN","BPSNCPD1",77,0)
 . ; Get status of resubmit, last update, and claim status
"RTN","BPSNCPD1",78,0)
 . S CLMSTAT=$$STATUS^BPSOSRX(BRXIEN,BFILL,1,$G(BPREQIEN),BPSCOB)
"RTN","BPSNCPD1",79,0)
 . ;
"RTN","BPSNCPD1",80,0)
 . ; Format status message
"RTN","BPSNCPD1",81,0)
 . S CLMSTAT=$P(CLMSTAT,"^",1)_$S($P(CLMSTAT,"^",1)["IN PROGRESS":"-"_$P(CLMSTAT,"^",3),1:"")
"RTN","BPSNCPD1",82,0)
 . ;
"RTN","BPSNCPD1",83,0)
 . ;If the status has changed, display the new message
"RTN","BPSNCPD1",84,0)
 . I OCLMSTAT'=CLMSTAT W !,CLMSTAT S OCLMSTAT=CLMSTAT I CLMSTAT="E REJECTED",$G(BPSELIG)'="V" D
"RTN","BPSNCPD1",85,0)
 .. N BPSRTEXT,BPSRESP,BPSPOS,X
"RTN","BPSNCPD1",86,0)
 .. S BPSRESP=$P($G(^BPST(IEN59,0)),"^",5) Q:'BPSRESP
"RTN","BPSNCPD1",87,0)
 .. S BPSPOS=+$O(^BPSR(BPSRESP,1000,":"),-1) Q:'BPSPOS
"RTN","BPSNCPD1",88,0)
 .. D REJTEXT^BPSOS03(BPSRESP,BPSPOS,.BPSRTEXT)
"RTN","BPSNCPD1",89,0)
 .. S X=0 F  S X=$O(BPSRTEXT(X)) Q:'X  W !?4,$P(BPSRTEXT(X),":")," - ",$P(BPSRTEXT(X),":",2)
"RTN","BPSNCPD1",90,0)
 . ;
"RTN","BPSNCPD1",91,0)
 . ; If the status is not IN PROGRESS, then we are done
"RTN","BPSNCPD1",92,0)
 . I CLMSTAT'["IN PROGRESS",'$D(^BPS(9002313.77,"D",BRXIEN,BFILL,BPSCOB)) S BPQ=1
"RTN","BPSNCPD1",93,0)
 W !
"RTN","BPSNCPD1",94,0)
 Q
"RTN","BPSNCPD1",95,0)
 ;
"RTN","BPSNCPD1",96,0)
 ; Bulletin to the OPECC
"RTN","BPSNCPD1",97,0)
 ; BPST=Tricare flag 1 is Tricare Related
"RTN","BPSNCPD1",98,0)
BULL(RXI,RXR,SITE,DFN,PATNAME,BPST,BPSERTXT,BPSRESP) ;
"RTN","BPSNCPD1",99,0)
 N BTXT,XMSUB,XMY,XMTEXT,XMDUZ
"RTN","BPSNCPD1",100,0)
 N SSN,X,SITENM
"RTN","BPSNCPD1",101,0)
 I $G(SITE) D
"RTN","BPSNCPD1",102,0)
 . K ^TMP($J,"BPSARR")
"RTN","BPSNCPD1",103,0)
 . D PSS^PSO59(SITE,,"BPSARR")
"RTN","BPSNCPD1",104,0)
 . S SITENM=$G(^TMP($J,"BPSARR",SITE,.01))
"RTN","BPSNCPD1",105,0)
 I $G(DFN) D
"RTN","BPSNCPD1",106,0)
 . S X=$P($G(^DPT(DFN,0)),U,9)
"RTN","BPSNCPD1",107,0)
 . S SSN=$E(X,$L(X)-3,$L(X))
"RTN","BPSNCPD1",108,0)
 ;
"RTN","BPSNCPD1",109,0)
 ; Need to do in the background
"RTN","BPSNCPD1",110,0)
 ;   Mailman calls CMOP which calls EN^BPSNCPDP.
"RTN","BPSNCPD1",111,0)
 ;   If BPSNCPDP* (same process) then calls mailman, it gets confused.
"RTN","BPSNCPD1",112,0)
 N ZTIO,ZTRTN,ZTDTH,ZTSAVE,ZTDESC
"RTN","BPSNCPD1",113,0)
 N %,%H,%I,X
"RTN","BPSNCPD1",114,0)
 D NOW^%DTC
"RTN","BPSNCPD1",115,0)
 S ZTIO="",ZTDTH=%,ZTDESC="IN PROGRESS BULLETIN"
"RTN","BPSNCPD1",116,0)
 S (ZTSAVE("RXR"),ZTSAVE("RXI"),ZTSAVE("BPSERTXT"))="",ZTSAVE("BPSRESP")=""
"RTN","BPSNCPD1",117,0)
 S (ZTSAVE("SITENM"),ZTSAVE("PATNAME"),ZTSAVE("SSN"),ZTSAVE("BPST"))=""
"RTN","BPSNCPD1",118,0)
 S ZTRTN="BULL1^BPSNCPD1"
"RTN","BPSNCPD1",119,0)
 D ^%ZTLOAD
"RTN","BPSNCPD1",120,0)
 Q
"RTN","BPSNCPD1",121,0)
 ;
"RTN","BPSNCPD1",122,0)
 ;
"RTN","BPSNCPD1",123,0)
BULL1 ;
"RTN","BPSNCPD1",124,0)
 N BPSRX,BPSL,XMDUZ,XMY,BPSX,XMZ,XMSUB
"RTN","BPSNCPD1",125,0)
 S BPSL=0,BPSRX=$$RXAPI1^BPSUTIL1(RXI,.01,"E")
"RTN","BPSNCPD1",126,0)
 S XMSUB=$S($G(BPST):"TRICARE ",1:"")_"RX not processed for site "_$G(SITENM)
"RTN","BPSNCPD1",127,0)
 I $G(BPST) D
"RTN","BPSNCPD1",128,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="Prescription "_BPSRX_" for fill number "_(+RXR)_" could not be filled because of a"
"RTN","BPSNCPD1",129,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="delay in processing the third party claim. The Rx was placed on suspense"
"RTN","BPSNCPD1",130,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="because TRICARE Rx's may not be filled unless they have a payable third"
"RTN","BPSNCPD1",131,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="party claim."
"RTN","BPSNCPD1",132,0)
 . S BPSL=BPSL+1,BPSX(BPSL)=" "
"RTN","BPSNCPD1",133,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="Please monitor the progress of the claim.  If the claim is eventually"
"RTN","BPSNCPD1",134,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="returned as payable, the Rx label will be printed when Print from Suspense"
"RTN","BPSNCPD1",135,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="occurs or it may be Pulled Early from Suspense.  If a reject occurs, the"
"RTN","BPSNCPD1",136,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="Rx will be placed in the REFILL TOO SOON/DUR REJECTS (Third Party) section"
"RTN","BPSNCPD1",137,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="of the medication profile and placed on the Pharmacy Reject Worklist."
"RTN","BPSNCPD1",138,0)
 ;
"RTN","BPSNCPD1",139,0)
 ;
"RTN","BPSNCPD1",140,0)
 I $G(BPSERTXT)'="" S BPSL=BPSL+1,BPSX(BPSL)=BPSERTXT
"RTN","BPSNCPD1",141,0)
 S BPSL=BPSL+1,BPSX(BPSL)=" "
"RTN","BPSNCPD1",142,0)
 I $G(BPSRESP)'=4 D
"RTN","BPSNCPD1",143,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="For more information on this prescription's activity, please view the ECME"
"RTN","BPSNCPD1",144,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="log within the View Prescription (VP) option on the Further Research (FR)"
"RTN","BPSNCPD1",145,0)
 . S BPSL=BPSL+1,BPSX(BPSL)="menu of the ECME user screen."
"RTN","BPSNCPD1",146,0)
 . S BPSL=BPSL+1,BPSX(BPSL)=" "
"RTN","BPSNCPD1",147,0)
 S BPSL=BPSL+1,BPSX(BPSL)=$S($G(BPST):"TRICARE ",1:"")_"Patient Name: "_$G(PATNAME)_" ("_$G(SSN)_")"
"RTN","BPSNCPD1",148,0)
 S BPSL=BPSL+1,BPSX(BPSL)="Prescription: "_BPSRX_"  Fill: "_(+RXR)
"RTN","BPSNCPD1",149,0)
 S BPSL=BPSL+1,BPSX(BPSL)="Drug Name:  "_$$RXAPI1^BPSUTIL1(RXI,6,"E")
"RTN","BPSNCPD1",150,0)
 ;
"RTN","BPSNCPD1",151,0)
 S XMDUZ="BPS PACKAGE",XMTEXT="BPSX("
"RTN","BPSNCPD1",152,0)
 S XMY("G.BPS OPECC")=""
"RTN","BPSNCPD1",153,0)
 I $G(DUZ)'<1 S XMY(DUZ)=""
"RTN","BPSNCPD1",154,0)
 D ^XMD
"RTN","BPSNCPD1",155,0)
 I $G(BPST) D PRIORITY^XMXEDIT(XMZ)
"RTN","BPSNCPD1",156,0)
 Q 
"RTN","BPSNCPD2")
0^57^B42415694
"RTN","BPSNCPD2",1,0)
BPSNCPD2 ;BHAM ISC/LJE - Continuation of BPSNCPDP (IB Billing Determination) ;11/7/07  16:01
"RTN","BPSNCPD2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,6,7,8**;JUN 2004;Build 29
"RTN","BPSNCPD2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSNCPD2",4,0)
 ;External reference $$RX^IBNCPDP supported by DBIA 4299
"RTN","BPSNCPD2",5,0)
 ;External reference to $$NCPDPQTY^PSSBPSUT supported by IA4992
"RTN","BPSNCPD2",6,0)
 ;
"RTN","BPSNCPD2",7,0)
 ;
"RTN","BPSNCPD2",8,0)
 ; EN - Call IB Billing Determination.  If good to go, update MOREDATA array
"RTN","BPSNCPD2",9,0)
 ; Notes about variables
"RTN","BPSNCPD2",10,0)
 ;input:
"RTN","BPSNCPD2",11,0)
 ;   DFN - PATIENT file #2 ien
"RTN","BPSNCPD2",12,0)
 ;   BWHERE - shows where the code is called from and what needs to be done
"RTN","BPSNCPD2",13,0)
 ;   the following should be passed by reference:
"RTN","BPSNCPD2",14,0)
 ;   MOREDATA - Initialized by BPSNCPDP and more data is added here
"RTN","BPSNCPD2",15,0)
 ;   BPSARRY  - Created by STARRAY^BPSNCPD1 and used for IB Determination
"RTN","BPSNCPD2",16,0)
 ;   IB    - Returned to BPSNCPDP
"RTN","BPSNCPD2",17,0)
 ;   CERTIEN - BPS Certification IEN - Not passed but newed/set in BPSNCPDP
"RTN","BPSNCPD2",18,0)
 ;
"RTN","BPSNCPD2",19,0)
EN(DFN,BWHERE,MOREDATA,BPSARRY,IB) ;
"RTN","BPSNCPD2",20,0)
 I '$G(CERTIEN) D  I IB=2 Q
"RTN","BPSNCPD2",21,0)
 . ;
"RTN","BPSNCPD2",22,0)
 . ;For NCPDP IB call to see if we need to 3rd Party Bill and if so, get insurance/payer sheet info
"RTN","BPSNCPD2",23,0)
 . S MOREDATA("BILL")=$$RX^IBNCPDP(DFN,.BPSARRY)  ;IB CALL
"RTN","BPSNCPD2",24,0)
 . Q:'$D(MOREDATA("BILL"))
"RTN","BPSNCPD2",25,0)
 . ;
"RTN","BPSNCPD2",26,0)
 . ; If calling program is the ECME user screen and we can't bill because of NEEDS SC DETERMINATION
"RTN","BPSNCPD2",27,0)
 . ; or EI, then prompt the user to see if they want to bill
"RTN","BPSNCPD2",28,0)
 . I BWHERE="ERES",$P(MOREDATA("BILL"),U,1)=0,$G(BPSARRY("SC/EI NO ANSW"))]"",$G(BPJOBFLG)'="B" D
"RTN","BPSNCPD2",29,0)
 .. N DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT,I,BPEISC
"RTN","BPSNCPD2",30,0)
 .. F I=1:1:$L($G(BPSARRY("SC/EI NO ANSW")),",") S BPEISC=$P($G(BPSARRY("SC/EI NO ANSW")),",",I) I BPEISC]"" D
"RTN","BPSNCPD2",31,0)
 ... W !,"The prescription is potentially ",BPEISC,"-related and needs ",BPEISC," determination."
"RTN","BPSNCPD2",32,0)
 ... W !,"Prescriptions related to ",BPEISC," cannot be billed to Third Party Insurance.",!
"RTN","BPSNCPD2",33,0)
 .. S DIR(0)="Y",DIR("A")="Are you sure you want to bill this prescription"
"RTN","BPSNCPD2",34,0)
 .. S DIR("B")="NO"
"RTN","BPSNCPD2",35,0)
 .. S DIR("?")="If you want to bill this prescription, enter 'Yes' - otherwise, enter 'No'"
"RTN","BPSNCPD2",36,0)
 .. W ! D ^DIR K DIR
"RTN","BPSNCPD2",37,0)
 .. I '+Y Q
"RTN","BPSNCPD2",38,0)
 .. S BPSARRY("SC/EI OVR")=1
"RTN","BPSNCPD2",39,0)
 .. S MOREDATA("BILL")=$$RX^IBNCPDP(DFN,.BPSARRY)  ;Call IB again
"RTN","BPSNCPD2",40,0)
 . ;
"RTN","BPSNCPD2",41,0)
 . ; Quit if no response from IB call
"RTN","BPSNCPD2",42,0)
 . Q:'$D(MOREDATA("BILL"))
"RTN","BPSNCPD2",43,0)
 . S MOREDATA("ELIG")=$P(MOREDATA("BILL"),"^",3)
"RTN","BPSNCPD2",44,0)
 . I $P(MOREDATA("BILL"),U,1)=0 S IB=2 Q  ;IB says not to bill
"RTN","BPSNCPD2",45,0)
 . ;
"RTN","BPSNCPD2",46,0)
 . ; esg - 4/28/10 - after the above $$RX^IBNCPDP calls to billing, now get the NCPDP quantity and units for ECME (*8)
"RTN","BPSNCPD2",47,0)
 . N QTY
"RTN","BPSNCPD2",48,0)
 . S QTY=$$NCPDPQTY^PSSBPSUT($G(BPSARRY("DRUG")),$G(BPSARRY("QTY")))      ; DBIA# 4992
"RTN","BPSNCPD2",49,0)
 . S BPSARRY("QTY")=$P(QTY,U,1)                                           ; NCPDP BILLING QUANTITY
"RTN","BPSNCPD2",50,0)
 . S BPSARRY("UNITS")=$P(QTY,U,2)                                         ; NCPDP DISPENSE UNIT
"RTN","BPSNCPD2",51,0)
 . ;
"RTN","BPSNCPD2",52,0)
 . S IB=1
"RTN","BPSNCPD2",53,0)
 . M MOREDATA("IBDATA")=BPSARRY("INS")
"RTN","BPSNCPD2",54,0)
 . S $P(MOREDATA("BPSDATA",1),U,1)=BPSARRY("QTY")
"RTN","BPSNCPD2",55,0)
 . S $P(MOREDATA("BPSDATA",1),U,2)=BPSARRY("COST")
"RTN","BPSNCPD2",56,0)
 . S $P(MOREDATA("BPSDATA",1),U,3)=BPSARRY("NDC")
"RTN","BPSNCPD2",57,0)
 . S $P(MOREDATA("BPSDATA",1),U,4)=BFILL
"RTN","BPSNCPD2",58,0)
 . S $P(MOREDATA("BPSDATA",1),U,5)=""  ; Certify Mode
"RTN","BPSNCPD2",59,0)
 . S $P(MOREDATA("BPSDATA",1),U,6)=""  ; Cert IEN
"RTN","BPSNCPD2",60,0)
 . S $P(MOREDATA("BPSDATA",1),U,7)=BPSARRY("UNITS")
"RTN","BPSNCPD2",61,0)
 ;
"RTN","BPSNCPD2",62,0)
 ; If certification mode on and no IB result (somewhat redundant since IB is not called
"RTN","BPSNCPD2",63,0)
 ;   for certification), get data from BPS Certification table
"RTN","BPSNCPD2",64,0)
 I $G(CERTIEN),'$G(IB) D
"RTN","BPSNCPD2",65,0)
 . N NODE,FLD,NFLD,CERTARY
"RTN","BPSNCPD2",66,0)
 . S MOREDATA("BILL")=1
"RTN","BPSNCPD2",67,0)
 . S MOREDATA("IBDATA",1,1)="",MOREDATA("IBDATA",1,2)="",MOREDATA("BPSDATA",1)=""
"RTN","BPSNCPD2",68,0)
 . S $P(MOREDATA("BPSDATA",1),U,5)=1  ;Certify Mode
"RTN","BPSNCPD2",69,0)
 . S $P(MOREDATA("BPSDATA",1),U,6)=CERTIEN  ;Cert IEN
"RTN","BPSNCPD2",70,0)
 . S $P(MOREDATA("IBDATA",1,1),U,1)=1  ;Plan IEN
"RTN","BPSNCPD2",71,0)
 . S $P(MOREDATA("IBDATA",1,1),U,4)=$$GET1^DIQ(9002313.31,CERTIEN,.04,"E")  ;Payer Sheet
"RTN","BPSNCPD2",72,0)
 . S $P(MOREDATA("IBDATA",1,1),U,10)="01"  ;Home State Plan
"RTN","BPSNCPD2",73,0)
 . S $P(MOREDATA("IBDATA",1,1),U,11)=""  ;B2 Payer Sheet (reversal)
"RTN","BPSNCPD2",74,0)
 . S $P(MOREDATA("IBDATA",1,1),U,12)=""  ;B3 Payer Sheet (rebill)
"RTN","BPSNCPD2",75,0)
 . S $P(MOREDATA("IBDATA",1,1),U,14)=""  ;Plan Name
"RTN","BPSNCPD2",76,0)
 . S $P(MOREDATA("IBDATA",1,2),U,5)=0    ;Admin Fee
"RTN","BPSNCPD2",77,0)
 . ;
"RTN","BPSNCPD2",78,0)
 . ;Get data from non-multiple fields and add to MOREDATA
"RTN","BPSNCPD2",79,0)
 . K CERTARY D GETS^DIQ(9002313.31,CERTIEN_",","1*","","CERTARY")
"RTN","BPSNCPD2",80,0)
 . S NODE="" F  S NODE=$O(CERTARY(9002313.311,NODE)) Q:NODE=""  D
"RTN","BPSNCPD2",81,0)
 .. S FLD="" F  S FLD=$O(CERTARY(9002313.311,NODE,FLD)) Q:FLD=""  D
"RTN","BPSNCPD2",82,0)
 ... I FLD=.01 S NFLD=CERTARY(9002313.311,NODE,FLD) D
"RTN","BPSNCPD2",83,0)
 .... I NFLD=101 S $P(MOREDATA("IBDATA",1,1),U,2)=CERTARY(9002313.311,NODE,.02) ;BIN
"RTN","BPSNCPD2",84,0)
 .... I NFLD=104 S $P(MOREDATA("IBDATA",1,1),U,3)=CERTARY(9002313.311,NODE,.02)  ;PCN
"RTN","BPSNCPD2",85,0)
 .... I NFLD=110 S $P(MOREDATA("IBDATA",1,1),U,13)=CERTARY(9002313.311,NODE,.02)  ;Certification ID
"RTN","BPSNCPD2",86,0)
 . ;
"RTN","BPSNCPD2",87,0)
 . ;Get data from multiple fields and add to MOREDATA
"RTN","BPSNCPD2",88,0)
 . K CERTARY D GETS^DIQ(9002313.31,CERTIEN_",","2*","","CERTARY")
"RTN","BPSNCPD2",89,0)
 . S NODE="" F  S NODE=$O(CERTARY(9002313.3121,NODE)) Q:NODE=""  D
"RTN","BPSNCPD2",90,0)
 ..  S FLD="" F  S FLD=$O(CERTARY(9002313.3121,NODE,FLD)) Q:FLD=""  D
"RTN","BPSNCPD2",91,0)
 ... I FLD=.01 S NFLD=CERTARY(9002313.3121,NODE,FLD) D
"RTN","BPSNCPD2",92,0)
 .... I NFLD=301 S $P(MOREDATA("IBDATA",1,1),U,5)=CERTARY(9002313.3121,NODE,.02)  ;Group ID
"RTN","BPSNCPD2",93,0)
 .... I NFLD=302 S $P(MOREDATA("IBDATA",1,1),U,6)=CERTARY(9002313.3121,NODE,.02)  ;Cardholder ID
"RTN","BPSNCPD2",94,0)
 .... I NFLD=306 S $P(MOREDATA("IBDATA",1,1),U,7)=CERTARY(9002313.3121,NODE,.02)  ;Patient Rel Code
"RTN","BPSNCPD2",95,0)
 .... I NFLD=312 S $P(MOREDATA("IBDATA",1,1),U,8)=CERTARY(9002313.3121,NODE,.02)  ;Cardholder First Name
"RTN","BPSNCPD2",96,0)
 .... I NFLD=313 S $P(MOREDATA("IBDATA",1,1),U,9)=CERTARY(9002313.3121,NODE,.02)  ;Cardholder Last Name
"RTN","BPSNCPD2",97,0)
 .... I NFLD=412 S $P(MOREDATA("IBDATA",1,2),U,1)=CERTARY(9002313.3121,NODE,.02)  ;Dispensing Fee
"RTN","BPSNCPD2",98,0)
 .... I NFLD=423 S $P(MOREDATA("IBDATA",1,2),U,2)=CERTARY(9002313.3121,NODE,.02)  ;Basis of Cost Determination
"RTN","BPSNCPD2",99,0)
 .... I NFLD=426 S $P(MOREDATA("IBDATA",1,2),U,3)=CERTARY(9002313.3121,NODE,.02)  ;Usual & Customary - Base Price
"RTN","BPSNCPD2",100,0)
 .... I NFLD=430 S $P(MOREDATA("IBDATA",1,2),U,4)=CERTARY(9002313.3121,NODE,.02)  ;Gross Amt Due
"RTN","BPSNCPD2",101,0)
 .... I NFLD=442 S $P(MOREDATA("BPSDATA",1),U,1)=CERTARY(9002313.3121,NODE,.02)  ;Qty
"RTN","BPSNCPD2",102,0)
 .... I NFLD=409 S $P(MOREDATA("BPSDATA",1),U,2)=CERTARY(9002313.3121,NODE,.02)  ;Unit Cost
"RTN","BPSNCPD2",103,0)
 .... I NFLD=407 S $P(MOREDATA("BPSDATA",1),U,3)=CERTARY(9002313.3121,NODE,.02)  ;NDC
"RTN","BPSNCPD2",104,0)
 .... I NFLD=403 S $P(MOREDATA("BPSDATA",1),U,4)=CERTARY(9002313.3121,NODE,.02)  ;Fill #
"RTN","BPSNCPD2",105,0)
 .... I NFLD=600 S $P(MOREDATA("BPSDATA",1),U,7)=CERTARY(9002313.3121,NODE,.02)  ;Unit of Measure
"RTN","BPSNCPD2",106,0)
 . ;
"RTN","BPSNCPD2",107,0)
 . ; If Gross Amt Due is missing, use Usual and Customary
"RTN","BPSNCPD2",108,0)
 . I $P(MOREDATA("IBDATA",1,2),U,4)="" S $P(MOREDATA("IBDATA",1,2),U,4)=$P(MOREDATA("IBDATA",1,2),U,3)
"RTN","BPSNCPD2",109,0)
 ;
"RTN","BPSNCPD2",110,0)
 ; The code below checks if Sequence one is missing and move the next number down if needed.
"RTN","BPSNCPD2",111,0)
 ; DMB - This is existing code so I am not sure if it is needed or not.
"RTN","BPSNCPD2",112,0)
 ; SS - This code is important for secondary claims processing
"RTN","BPSNCPD2",113,0)
 I '$D(MOREDATA("IBDATA",1)) D
"RTN","BPSNCPD2",114,0)
 . N WW
"RTN","BPSNCPD2",115,0)
 . S WW=$O(MOREDATA("IBDATA",""))
"RTN","BPSNCPD2",116,0)
 . I WW'="" M MOREDATA("IBDATA",1)=MOREDATA("IBDATA",WW) K MOREDATA("IBDATA",WW)
"RTN","BPSNCPD2",117,0)
 ;
"RTN","BPSNCPD2",118,0)
 ; Uppercase the IBDATA
"RTN","BPSNCPD2",119,0)
 ; DMB - Assume this was adding in case any of the BPS Certification data was entered as lowercase
"RTN","BPSNCPD2",120,0)
 S MOREDATA("IBDATA",1,1)=$TR(MOREDATA("IBDATA",1,1),"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","BPSNCPD2",121,0)
 S MOREDATA("IBDATA",1,2)=$TR(MOREDATA("IBDATA",1,2),"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","BPSNCPD2",122,0)
 S MOREDATA("BPSDATA",1)=$TR(MOREDATA("BPSDATA",1),"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","BPSNCPD2",123,0)
 ;
"RTN","BPSNCPD2",124,0)
 Q
"RTN","BPSNCPD3")
0^35^B28796956
"RTN","BPSNCPD3",1,0)
BPSNCPD3 ;BHAM ISC/LJE - Continuation of BPSNCPDP - DUR HANDLING ;06/16/2004
"RTN","BPSNCPD3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,6,7,8**;JUN 2004;Build 29
"RTN","BPSNCPD3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSNCPD3",4,0)
 ;
"RTN","BPSNCPD3",5,0)
 ; Due to space considerations, these comments were moved from BPSNPCPD
"RTN","BPSNCPD3",6,0)
 ;   to this routine.
"RTN","BPSNCPD3",7,0)
 ;
"RTN","BPSNCPD3",8,0)
 ; ------------------ Beginning of BPSNCPDP comments ------------------
"RTN","BPSNCPD3",9,0)
 ;Input
"RTN","BPSNCPD3",10,0)
 ; BRXIEN = Prescription IEN
"RTN","BPSNCPD3",11,0)
 ; BFILL = Fill Number
"RTN","BPSNCPD3",12,0)
 ; BFILLDAT = Fill Date of current prescription and fill number
"RTN","BPSNCPD3",13,0)
 ; BWHERE (RX Action)
"RTN","BPSNCPD3",14,0)
 ;    ARES = Resubmit for an auto-reversed claim was released while waiting
"RTN","BPSNCPD3",15,0)
 ;           for the payer response
"RTN","BPSNCPD3",16,0)
 ;    AREV = Auto-Reversal
"RTN","BPSNCPD3",17,0)
 ;    BB   = Back Billing
"RTN","BPSNCPD3",18,0)
 ;    CRLB = CMOP Release & Rebill
"RTN","BPSNCPD3",19,0)
 ;    CRLR = CMOP Release & Reverse (successful release)
"RTN","BPSNCPD3",20,0)
 ;    CRLX = CMOP unsuccessful release & reverse
"RTN","BPSNCPD3",21,0)
 ;    DC   = Discontinue - only reverse un-released PAYABLE DC's, release date check
"RTN","BPSNCPD3",22,0)
 ;           should be in calling routine.
"RTN","BPSNCPD3",23,0)
 ;    DDED = Delete in edit
"RTN","BPSNCPD3",24,0)
 ;    DE   = Delete
"RTN","BPSNCPD3",25,0)
 ;    ED   = Edit
"RTN","BPSNCPD3",26,0)
 ;    ERES = Resubmit from ECME user screen
"RTN","BPSNCPD3",27,0)
 ;    EREV = Reversal from ECME user screen
"RTN","BPSNCPD3",28,0)
 ;    HLD  = Put prescription on Hold
"RTN","BPSNCPD3",29,0)
 ;    OF   = Original Fill
"RTN","BPSNCPD3",30,0)
 ;    PC   = Pull CMOPs
"RTN","BPSNCPD3",31,0)
 ;    PE   = Pull early from suspense
"RTN","BPSNCPD3",32,0)
 ;    PL   = Pull local from suspense
"RTN","BPSNCPD3",33,0)
 ;    PP   = PP from Patient Prescription Processing option
"RTN","BPSNCPD3",34,0)
 ;    RF   = Refill
"RTN","BPSNCPD3",35,0)
 ;    RL   = Release Rx NDC check - Rebill if billed NDC doesn't match release NDC
"RTN","BPSNCPD3",36,0)
 ;    RN   = Renew
"RTN","BPSNCPD3",37,0)
 ;    RRL  = Original claim rejected, submit another claim, no reversal
"RTN","BPSNCPD3",38,0)
 ;    RS   = Return-to-Stock
"RTN","BPSNCPD3",39,0)
 ; BILLNDC = Valid NDC# with format 5-4-2
"RTN","BPSNCPD3",40,0)
 ; REVREAS = Reversal Reason
"RTN","BPSNCPD3",41,0)
 ; DURREC  = String of DUR info - Three "^" pieces
"RTN","BPSNCPD3",42,0)
 ;                Professional Service Code
"RTN","BPSNCPD3",43,0)
 ;                Reason for Service Code
"RTN","BPSNCPD3",44,0)
 ;                Result of Service Code
"RTN","BPSNCPD3",45,0)
 ; BPOVRIEN = Pointer to BPS NCPDP OVERIDE file.  This parameter will 
"RTN","BPSNCPD3",46,0)
 ;            only be passed if there are overrides entered by the
"RTN","BPSNCPD3",47,0)
 ;            user via the Resubmit with Edits (RED) option in the 
"RTN","BPSNCPD3",48,0)
 ;            user screen.
"RTN","BPSNCPD3",49,0)
 ; BPSAUTH = pre-authorization code (preauth. code^preauth number)
"RTN","BPSNCPD3",50,0)
 ; BPSCLARF = Submission Clarification Code (ien of the #9002313.25), entered by pharmacist and passed
"RTN","BPSNCPD3",51,0)
 ;            by Outpatient Pharmacy to ECME to put into the claim  
"RTN","BPSNCPD3",52,0)
 ; BPCOBIND = (optional, default is Primary) for COB indicators - so when the API is called for the particular
"RTN","BPSNCPD3",53,0)
 ;            COB claim the BPSNCPDP can handle it.
"RTN","BPSNCPD3",54,0)
 ; BPJOBFLG = (optional, default is "F") B - if is called by unqueueing logic in background, F - by other (foreground) process, 
"RTN","BPSNCPD3",55,0)
 ; BPREQIEN = (optional) ien of BPS REQUEST file record, that needs to be unqueued 
"RTN","BPSNCPD3",56,0)
 ; BPSCLOSE = (optional) local array used with BWHERE="EREV" only, if the user had chosen to close the claim after reversal
"RTN","BPSNCPD3",57,0)
 ;   if claim needs to be closed then
"RTN","BPSNCPD3",58,0)
 ;   BPSCLOSE("CLOSE AFT REV")=1
"RTN","BPSNCPD3",59,0)
 ;   BPSCLOSE("CLOSE AFT REV REASON")=<#356.8 ien>
"RTN","BPSNCPD3",60,0)
 ;   BPSCLOSE("CLOSE AFT REV COMMENT")=<some text>
"RTN","BPSNCPD3",61,0)
 ; BPSPLAN =  (optional) IEN of the entry in the GROUP INSURANCE PLAN file (#355.3)
"RTN","BPSNCPD3",62,0)
 ; BPSPRDAT =  (optional) local array passed by reference. Contains primary claim data needed to submit a secondary claim.
"RTN","BPSNCPD3",63,0)
 ; Format:  BPSPRDAT(NCPDP field)
"RTN","BPSNCPD3",64,0)
 ; BPSRTYPE = (optional) rate type ( ien of the file #399.3)
"RTN","BPSNCPD3",65,0)
 ;   
"RTN","BPSNCPD3",66,0)
 ; 
"RTN","BPSNCPD3",67,0)
 ;Output (RESPONSE^MESSAGE^ELIGIBILITY^CLAIMSTATUS^COB^RXCOB^INSURANCE)
"RTN","BPSNCPD3",68,0)
 ; RESPONSE
"RTN","BPSNCPD3",69,0)
 ;    0  Submitted through ECME
"RTN","BPSNCPD3",70,0)
 ;    1  No submission through ECME
"RTN","BPSNCPD3",71,0)
 ;    2  IB not billable
"RTN","BPSNCPD3",72,0)
 ;    3  Claim was closed, not submitted (RTS/Deletes)
"RTN","BPSNCPD3",73,0)
 ;    4  Unable to queue claim
"RTN","BPSNCPD3",74,0)
 ;    5  Incorrect information supplied to ECME
"RTN","BPSNCPD3",75,0)
 ;    6  Inactive ECME - Primarily used for Tricare to say ok to process rx
"RTN","BPSNCPD3",76,0)
 ;    10 Reversal but no resubmit
"RTN","BPSNCPD3",77,0)
 ; MESSAGE = Message associated with the response (error/submitted)
"RTN","BPSNCPD3",78,0)
 ; ELIGIBILITY = V - VA, T - Tricare
"RTN","BPSNCPD3",79,0)
 ; CLAIMSTATUS = claim status (null or IN PROGRESS/E PAYABLE/etc...)
"RTN","BPSNCPD3",80,0)
 ; COB  = Coordination Of Benefit indicator of the insurance as it is stored in the PATIENT file: 1- primary, 2 -secondary, 3 -tertiary
"RTN","BPSNCPD3",81,0)
 ; RXCOB =  the payer sequence indicator of the claim which was sent to the payer as a result of this call: 1- primary, 2 -secondary)
"RTN","BPSNCPD3",82,0)
 ; INSURANCE = Name of the insurance company that was billed as a result of this call
"RTN","BPSNCPD3",83,0)
 ; 
"RTN","BPSNCPD3",84,0)
 ; ----------------- End of BPSNCPDP comments ----------------------
"RTN","BPSNCPD3",85,0)
 ;
"RTN","BPSNCPD3",86,0)
 ; ----------------- DUR1 ------------------------------------------
"RTN","BPSNCPD3",87,0)
 ; DUR1 is called by PSO to get the reject info so that should NOT be removed
"RTN","BPSNCPD3",88,0)
 ;
"RTN","BPSNCPD3",89,0)
 ;
"RTN","BPSNCPD3",90,0)
 ; IA 4560
"RTN","BPSNCPD3",91,0)
 ; Function call for DUR INFORMATION 
"RTN","BPSNCPD3",92,0)
 ; Parameters: BRXIEN = Prescription IEN
"RTN","BPSNCPD3",93,0)
 ;             BFILL = fill number
"RTN","BPSNCPD3",94,0)
 ;             DUR = DUR info passed back
"RTN","BPSNCPD3",95,0)
 ;             ERROR = error passed back
"RTN","BPSNCPD3",96,0)
 ;             BPRXCOB = payer sequence
"RTN","BPSNCPD3",97,0)
 ; Note:
"RTN","BPSNCPD3",98,0)
 ;    DUR("BILLED")=0 if ecme off for pharmacy or no transaction in ECME
"RTN","BPSNCPD3",99,0)
 ;    DUR(<Insurance counter>,"BILLED")=1 if billed through ecme
"RTN","BPSNCPD3",100,0)
DUR1(BRXIEN,BFILL,DUR,ERROR,BPRXCOB) ;
"RTN","BPSNCPD3",101,0)
 N SITE,DFILL,TRANIEN,DUR1,DURIEN,I
"RTN","BPSNCPD3",102,0)
 S BPRXCOB=+$G(BPRXCOB)
"RTN","BPSNCPD3",103,0)
 I BPRXCOB=0 S BPRXCOB=1 ;default is Primary
"RTN","BPSNCPD3",104,0)
 ;
"RTN","BPSNCPD3",105,0)
 ; Get Site info and check is ECME is turned on
"RTN","BPSNCPD3",106,0)
 ; If not, set DUR("BILLED")=0 and quit
"RTN","BPSNCPD3",107,0)
 I '$G(BFILL) S SITE=$$RXAPI1^BPSUTIL1(BRXIEN,20,"I")
"RTN","BPSNCPD3",108,0)
 I $G(BFILL) S SITE=$$RXSUBF1^BPSUTIL1(BRXIEN,52,52.1,BFILL,8,"I")
"RTN","BPSNCPD3",109,0)
 I '$$ECMEON^BPSUTIL(SITE) S DUR("BILLED")=0 Q
"RTN","BPSNCPD3",110,0)
 ;
"RTN","BPSNCPD3",111,0)
 ; Set up the Transaction IEN
"RTN","BPSNCPD3",112,0)
 S DFILL="",DFILL=$E($TR($J("",4-$L(BFILL))," ","0")_BFILL,1,4)_BPRXCOB
"RTN","BPSNCPD3",113,0)
 S TRANIEN=BRXIEN_"."_DFILL
"RTN","BPSNCPD3",114,0)
 ;
"RTN","BPSNCPD3",115,0)
 ; If the transaction record does not exist, set DUR("BILLED")=0 and quit
"RTN","BPSNCPD3",116,0)
 I '$D(^BPST(TRANIEN)) S DUR("BILLED")=0 Q
"RTN","BPSNCPD3",117,0)
 ;
"RTN","BPSNCPD3",118,0)
 S DUR(BPRXCOB,"BILLED")=1
"RTN","BPSNCPD3",119,0)
 ;
"RTN","BPSNCPD3",120,0)
 S DUR(BPRXCOB,"ELIGBLT")=$P($G(^BPST(TRANIEN,9)),U,4)
"RTN","BPSNCPD3",121,0)
 ; Get Insurance Info and set into DUR array
"RTN","BPSNCPD3",122,0)
 D GETS^DIQ(9002313.59902,"1,"_TRANIEN_",","902.05;902.06;902.24;902.25;902.26","E","DUR1","ERROR")
"RTN","BPSNCPD3",123,0)
 S DUR(BPRXCOB,"INSURANCE NAME")=$G(DUR1(9002313.59902,"1,"_TRANIEN_",",902.24,"E"))  ; Insurance Company Name
"RTN","BPSNCPD3",124,0)
 S DUR(BPRXCOB,"GROUP NUMBER")=$G(DUR1(9002313.59902,"1,"_TRANIEN_",",902.05,"E"))    ; Insurance Group Number
"RTN","BPSNCPD3",125,0)
 S DUR(BPRXCOB,"GROUP NAME")=$G(DUR1(9002313.59902,"1,"_TRANIEN_",",902.25,"E"))      ; Insurance Group Name
"RTN","BPSNCPD3",126,0)
 S DUR(BPRXCOB,"PLAN CONTACT")=$G(DUR1(9002313.59902,"1,"_TRANIEN_",",902.26,"E"))    ; Insurance Contact Number
"RTN","BPSNCPD3",127,0)
 S DUR(BPRXCOB,"CARDHOLDER ID")=$G(DUR1(9002313.59902,"1,"_TRANIEN_",",902.06,"E"))   ; Cardholder ID
"RTN","BPSNCPD3",128,0)
 ;
"RTN","BPSNCPD3",129,0)
 ; Get Response IEN and Data
"RTN","BPSNCPD3",130,0)
 S DURIEN="",DURIEN=$P(^BPST(TRANIEN,0),"^",5)                             ;Note: in future will need to store/get DURIEN for each insurance
"RTN","BPSNCPD3",131,0)
 S DUR(BPRXCOB,"RESPONSE IEN")=DURIEN
"RTN","BPSNCPD3",132,0)
 D GETS^DIQ(9002313.0301,"1,"_DURIEN_",","501;567.01*;526","E","DUR1","ERROR")
"RTN","BPSNCPD3",133,0)
 S DUR(BPRXCOB,"PAYER MESSAGE")=$G(DUR1(9002313.0301,"1,"_DURIEN_",",526,"E"))           ;Additional free text message info from payer
"RTN","BPSNCPD3",134,0)
 S DUR(BPRXCOB,"STATUS")=$G(DUR1(9002313.0301,"1,"_DURIEN_",",501,"E"))                  ;Status of Response
"RTN","BPSNCPD3",135,0)
 S DUR(BPRXCOB,"REASON")=$G(DUR1(9002313.1101,"1,1,"_DURIEN_",",439,"E"))                ;Reason of Service Code
"RTN","BPSNCPD3",136,0)
 S DUR(BPRXCOB,"PREV FILL DATE")=$G(DUR1(9002313.1101,"1,1,"_DURIEN_",",530,"E"))        ;Previous Date of Fill
"RTN","BPSNCPD3",137,0)
 S DUR(BPRXCOB,"DUR FREE TEXT DESC")=$G(DUR1(9002313.1101,"1,1,"_DURIEN_",",544,"E"))    ;DUR Free Text Message from Payer
"RTN","BPSNCPD3",138,0)
 ;
"RTN","BPSNCPD3",139,0)
 ; Get DUR reject codes and description and store in DUR 
"RTN","BPSNCPD3",140,0)
 D GETS^DIQ(9002313.0301,"1,"_DURIEN_",","511*","I","DUR1","ERROR") ;get DUR codes and descriptions
"RTN","BPSNCPD3",141,0)
 S DUR(BPRXCOB,"REJ CODE LST")=""
"RTN","BPSNCPD3",142,0)
 F I=1:1 Q:'$D(DUR1(9002313.03511,I_",1,"_DURIEN_","))  D
"RTN","BPSNCPD3",143,0)
 . S DUR(BPRXCOB,"REJ CODES",I,DUR1(9002313.03511,I_",1,"_DURIEN_",",.01,"I"))=$$GET1^DIQ(9002313.93,DUR1(9002313.03511,I_",1,"_DURIEN_",",.01,"I"),".02")
"RTN","BPSNCPD3",144,0)
 . S DUR(BPRXCOB,"REJ CODE LST")=DUR(BPRXCOB,"REJ CODE LST")_","_DUR1(9002313.03511,I_",1,"_DURIEN_",",.01,"I")
"RTN","BPSNCPD3",145,0)
 S DUR(BPRXCOB,"REJ CODE LST")=$E(DUR(BPRXCOB,"REJ CODE LST"),2,9999)
"RTN","BPSNCPD3",146,0)
 Q
"RTN","BPSNCPD4")
0^16^B43623914
"RTN","BPSNCPD4",1,0)
BPSNCPD4 ;OAK/ELZ - Extension of BPSNCPDP ;4/16/08  17:07
"RTN","BPSNCPD4",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**6,7,8**;JUN 2004;Build 29
"RTN","BPSNCPD4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSNCPD4",4,0)
 ;
"RTN","BPSNCPD4",5,0)
 ;
"RTN","BPSNCPD4",6,0)
 ; Certification Testing
"RTN","BPSNCPD4",7,0)
CERTTEST(BILLNDC,CERTIEN) ;
"RTN","BPSNCPD4",8,0)
 N QUIT,RESPONSE,CLMSTAT
"RTN","BPSNCPD4",9,0)
 S RESPONSE=1,CLMSTAT=""
"RTN","BPSNCPD4",10,0)
 ; If this is Certification Testing - ask questions
"RTN","BPSNCPD4",11,0)
 S QUIT=0,CERTIEN=""
"RTN","BPSNCPD4",12,0)
 I ^BPS(9002313.99,1,"CERTIFIER")=DUZ D  I QUIT S CLMSTAT="User exited from certification questions",RESPONSE=1 Q RESPONSE_U_CLMSTAT
"RTN","BPSNCPD4",13,0)
C1 . R !,"ENTER NDC: ",BILLNDC:120 S:BILLNDC="^" QUIT=1 Q:QUIT  I BILLNDC="" G C1
"RTN","BPSNCPD4",14,0)
C3 . R !,"CERTIFICATION ENTRY: ",CERTIEN:120 I '$D(^BPS(9002313.31,CERTIEN)) S:CERTIEN="^" QUIT=1 Q:QUIT  W !,"INVALID IEN" G C3
"RTN","BPSNCPD4",15,0)
 I WFLG W !!
"RTN","BPSNCPD4",16,0)
 Q 0
"RTN","BPSNCPD4",17,0)
 ;
"RTN","BPSNCPD4",18,0)
 ;== reversal+resubmit for payables
"RTN","BPSNCPD4",19,0)
 ;returns:
"RTN","BPSNCPD4",20,0)
 ; 0 - Submitted through ECME
"RTN","BPSNCPD4",21,0)
 ; or 
"RTN","BPSNCPD4",22,0)
 ; RESPONSE code^CLAMSTAT^D(display message)^number of seconds to hang^additional info
"RTN","BPSNCPD4",23,0)
 ; see EN^BPSNCPD4 for RESPONSE values
"RTN","BPSNCPD4",24,0)
REVRESUB(BPREVREQ,BRXIEN,BFILL,BFILLDAT,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPCOBIND,BPJOBFLG,IEN59,DFN,BPSTART,BPREQIEN,OLDRESP,BPSELIG,BPSRTYPE,BPSPLAN,BPSPRDAT) ;
"RTN","BPSNCPD4",25,0)
 N BPSITE,BPECMOFF,BPSARRY,MOREDATA,IB,BPRETV,BPZRET,BPCLMST,BPONLREV,BPRETVAL,BPUSRMSG,CERTIEN,BPRESP,BPRETUNC
"RTN","BPSNCPD4",26,0)
 I BPJOBFLG'="F",BPJOBFLG'="B" D LOG(IEN59,"Job Flag missing") Q "5^Job Flag missing"  ;RESPONSE^CLMSTAT
"RTN","BPSNCPD4",27,0)
 I BPJOBFLG="B" D LOG(IEN59,"Reversal+Resubmit cannot be done in background") Q "5^Reversal+Resubmit cannot be done in background"  ;RESPONSE^CLMSTAT
"RTN","BPSNCPD4",28,0)
 S BPCLMST="",BPONLREV=0,BPRESP=""
"RTN","BPSNCPD4",29,0)
 ;
"RTN","BPSNCPD4",30,0)
 S BPSITE=+$$GETSITE^BPSOSRX8(BRXIEN,BFILL)
"RTN","BPSNCPD4",31,0)
 ;
"RTN","BPSNCPD4",32,0)
 ;populate MOREDATA with basic data
"RTN","BPSNCPD4",33,0)
 D BASICMOR^BPSOSRX8(BWHERE,BFILLDAT,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,.MOREDATA)
"RTN","BPSNCPD4",34,0)
 I BPCOBIND=2 D MORE4SEC^BPSPRRX2(.MOREDATA,.BPSPRDAT) S MOREDATA("RTYPE")=$G(BPSRTYPE)
"RTN","BPSNCPD4",35,0)
 ;
"RTN","BPSNCPD4",36,0)
 ;Certification Testing
"RTN","BPSNCPD4",37,0)
 ;sets:
"RTN","BPSNCPD4",38,0)
 ; BILLNDC which is used in STARRAY^BPSNCPD1
"RTN","BPSNCPD4",39,0)
 ; CERTIEN which is used in BILLABLE
"RTN","BPSNCPD4",40,0)
 S BPRESP=$$CERTTEST(.BILLNDC,.CERTIEN) I +BPRESP=1 Q BPRESP
"RTN","BPSNCPD4",41,0)
 ;populate BPSARRY
"RTN","BPSNCPD4",42,0)
 ;Note:
"RTN","BPSNCPD4",43,0)
 ;the following is passed as backdoor parameters
"RTN","BPSNCPD4",44,0)
 ; DFN - patient's IEN
"RTN","BPSNCPD4",45,0)
 ; BILLNDC - NDC
"RTN","BPSNCPD4",46,0)
 ; BFILLDAT - fill date
"RTN","BPSNCPD4",47,0)
 D STARRAY^BPSNCPD1(BRXIEN,BFILL,BWHERE,.BPSARRY,BPSITE)
"RTN","BPSNCPD4",48,0)
 S BPSARRY("RXCOB")=BPCOBIND
"RTN","BPSNCPD4",49,0)
 I BPCOBIND=2 S BPSARRY("PLAN")=$G(BPSPLAN),BPSARRY("RTYPE")=$G(BPSRTYPE) ;for secondary billing, to be used by RX^IBNCPDP
"RTN","BPSNCPD4",50,0)
 ;Billing determination
"RTN","BPSNCPD4",51,0)
 S IB=$$BILLABLE(DFN,BWHERE,.MOREDATA,.BPSARRY,CERTIEN,.BPSELIG)
"RTN","BPSNCPD4",52,0)
 ;if no response from IB
"RTN","BPSNCPD4",53,0)
 I +IB=0 Q $P(IB,U,2,5)
"RTN","BPSNCPD4",54,0)
 ;if non-billable
"RTN","BPSNCPD4",55,0)
 I +IB=2 S BPONLREV=1 ;set "ONLY REVERSAL IS POSSIBLE" flag
"RTN","BPSNCPD4",56,0)
 ;Set the User message if necessary
"RTN","BPSNCPD4",57,0)
 S BPUSRMSG=$S(BPONLREV=1:"Claim Will Be Reversed But Will Not Be Resubmitted",1:"")
"RTN","BPSNCPD4",58,0)
 I BPONLREV=1 D LOG(IEN59,$P($G(MOREDATA("BILL")),"^",2)_" - "_BPUSRMSG)
"RTN","BPSNCPD4",59,0)
 ;check IB data if it is billable
"RTN","BPSNCPD4",60,0)
 I BPONLREV'=1 S BPRETV=$$IBDATAOK^BPSOSRX8(.MOREDATA,$G(BPSARRY("NO ECME INSURANCE"))) I BPRETV>0 Q BPRETV
"RTN","BPSNCPD4",61,0)
 ;
"RTN","BPSNCPD4",62,0)
 ;schedule request(s)
"RTN","BPSNCPD4",63,0)
 ;
"RTN","BPSNCPD4",64,0)
 ; If override flag is set, prompt for override values - TEST ONLY
"RTN","BPSNCPD4",65,0)
 I $$CHECK^BPSTEST D
"RTN","BPSNCPD4",66,0)
 . I BPONLREV=1 D GETOVER^BPSTEST(BRXIEN,BFILL,OLDRESP,BWHERE,"R",BPCOBIND) Q
"RTN","BPSNCPD4",67,0)
 . ;if it is billable and we will doing resubmit
"RTN","BPSNCPD4",68,0)
 . D GETOVER^BPSTEST(BRXIEN,BFILL,OLDRESP,BWHERE,"S",BPCOBIND)
"RTN","BPSNCPD4",69,0)
 ;
"RTN","BPSNCPD4",70,0)
 ;.... Step 1, Schedule a Reversal
"RTN","BPSNCPD4",71,0)
 ; Log message to ECME log
"RTN","BPSNCPD4",72,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSNCPD4",73,0)
 D LOG(IEN59,"Before Submit of Reversal")
"RTN","BPSNCPD4",74,0)
 S BPSTART=$$STTM()
"RTN","BPSNCPD4",75,0)
 ;
"RTN","BPSNCPD4",76,0)
 ;schedule an UNCLAIM request
"RTN","BPSNCPD4",77,0)
 S BPRETV=$$REQST^BPSOSRX("U",BRXIEN,BFILL,.MOREDATA,BPCOBIND,IEN59,$G(BILLNDC))
"RTN","BPSNCPD4",78,0)
 S BPREVREQ=+$P(BPRETV,U,2) ;BPS REQUEST ien of  the reversal
"RTN","BPSNCPD4",79,0)
 ;if error
"RTN","BPSNCPD4",80,0)
 I +BPRETV=0 D  Q $$RSPCLMS^BPSOSRX8("UC",4,.MOREDATA,$P(BPRETV,U,2))
"RTN","BPSNCPD4",81,0)
 . D LOG(IEN59,"Create request error: "_$P(BPRETV,U,2)_". Claim Will Not Be submitted.")
"RTN","BPSNCPD4",82,0)
 . L -^BPST
"RTN","BPSNCPD4",83,0)
 ;if ok
"RTN","BPSNCPD4",84,0)
 D LOG(IEN59,"The request "_BPREVREQ_" has been created")
"RTN","BPSNCPD4",85,0)
 ;if "Reversal only not resubmit" return appropriate RESPONSE and CLMSTAT, 
"RTN","BPSNCPD4",86,0)
 ;store MOREDATA("BILL" for the "final CLMSTAT"
"RTN","BPSNCPD4",87,0)
 ;and quit
"RTN","BPSNCPD4",88,0)
 I BPONLREV=1 D  Q $$RSPCLMS^BPSOSRX8("UC",10,.MOREDATA)_U_$P($G(MOREDATA("BILL")),U,2)
"RTN","BPSNCPD4",89,0)
 . ;activate the scheduled UNCLAIM request
"RTN","BPSNCPD4",90,0)
 . S BPRETUNC=$$ACTIVATE(BPREVREQ,"U")
"RTN","BPSNCPD4",91,0)
 ;
"RTN","BPSNCPD4",92,0)
 ;.... Step 2, Schedule a Resubmit
"RTN","BPSNCPD4",93,0)
 ; Log message to ECME log
"RTN","BPSNCPD4",94,0)
 D LOG(IEN59,"Before submit of claim")
"RTN","BPSNCPD4",95,0)
 S BPRETV=$$REQST^BPSOSRX("C",BRXIEN,BFILL,.MOREDATA,BPCOBIND,IEN59,$G(BILLNDC))
"RTN","BPSNCPD4",96,0)
 ; if error
"RTN","BPSNCPD4",97,0)
 I +BPRETV=0 D  Q $$RSPCLMS^BPSOSRX8("C",4,.MOREDATA)_U_BPUSRMSG
"RTN","BPSNCPD4",98,0)
 . ;activate the scheduled UNCLAIM request
"RTN","BPSNCPD4",99,0)
 . S BPRETUNC=$$ACTIVATE(BPREVREQ,"U")
"RTN","BPSNCPD4",100,0)
 . D LOG(IEN59,"Create request error: "_$P(BPRETV,U,2)_". Claim Will Not Be submitted.")
"RTN","BPSNCPD4",101,0)
 . ;Set the User message if necessary
"RTN","BPSNCPD4",102,0)
 . I +BPRETUNC=0 S BPUSRMSG="Cannot schedule resubmit: Claim Will Be Reversed But Will Not Be Resubmitted "
"RTN","BPSNCPD4",103,0)
 ;if ok
"RTN","BPSNCPD4",104,0)
 D LOG(IEN59,"BPS REQUEST: "_+$P(BPRETV,U,2)_" has been created")
"RTN","BPSNCPD4",105,0)
 ;
"RTN","BPSNCPD4",106,0)
 I +$$NXTREQST^BPSOSRX6(BPREVREQ,+$P(BPRETV,U,2))=0 D  Q $$RSPCLMS^BPSOSRX8("C",4,.MOREDATA)_U_BPUSRMSG
"RTN","BPSNCPD4",107,0)
 . ;activate the scheduled UNCLAIM request
"RTN","BPSNCPD4",108,0)
 . S BPRETUNC=$$ACTIVATE(BPREVREQ,"U")
"RTN","BPSNCPD4",109,0)
 . D LOG(IEN59,"Cannot make "_+$P(BPRETV,U,2)_"as a NEXT REQUEST in "_BPREVREQ)
"RTN","BPSNCPD4",110,0)
 . I +BPRETUNC=0 S BPUSRMSG="Cannot schedule resubmit: Claim Will Be Reversed But Will Not Be Resubmitted "
"RTN","BPSNCPD4",111,0)
 ;
"RTN","BPSNCPD4",112,0)
 ;activate the scheduled UNCLAIM request
"RTN","BPSNCPD4",113,0)
 S BPRETUNC=$$ACTIVATE(BPREVREQ,"U")
"RTN","BPSNCPD4",114,0)
 ; save RETVAL for the 2st step
"RTN","BPSNCPD4",115,0)
 S BPRETVAL=$$RSPCLMS^BPSOSRX8("UC",+BPRETUNC,.MOREDATA)_U_$P(BPRETUNC,U,2)
"RTN","BPSNCPD4",116,0)
 Q BPRETVAL_U_BPUSRMSG
"RTN","BPSNCPD4",117,0)
 ;
"RTN","BPSNCPD4",118,0)
 ;
"RTN","BPSNCPD4",119,0)
 ;
"RTN","BPSNCPD4",120,0)
 ;display submission results
"RTN","BPSNCPD4",121,0)
 ;BPRETVAL - RESPONSE ^ CLAIMSTAT ^ flag:D-display on the screen ^ Hang time
"RTN","BPSNCPD4",122,0)
DISPL(WFLG,BPRETVAL,BPELIGIB) ;
"RTN","BPSNCPD4",123,0)
 N BPHANG
"RTN","BPSNCPD4",124,0)
 ;if Tricare then shall print messages to the screen
"RTN","BPSNCPD4",125,0)
 I $G(BPELIGIB)="T" S WFLG=1
"RTN","BPSNCPD4",126,0)
 I WFLG=0 Q
"RTN","BPSNCPD4",127,0)
 I $P(BPRETVAL,U,3)'="D" Q
"RTN","BPSNCPD4",128,0)
 W !!,$P(BPRETVAL,U,2)
"RTN","BPSNCPD4",129,0)
 W:+BPRETVAL'=0 !
"RTN","BPSNCPD4",130,0)
 S BPHANG=+$P(BPRETVAL,U,4)
"RTN","BPSNCPD4",131,0)
 I BPHANG>0 H BPHANG
"RTN","BPSNCPD4",132,0)
 Q
"RTN","BPSNCPD4",133,0)
 ;IB (billing) determination
"RTN","BPSNCPD4",134,0)
 ;input:
"RTN","BPSNCPD4",135,0)
 ;DFN - PATIENT file #2 ien
"RTN","BPSNCPD4",136,0)
 ;BWHERE - shows where the code is called from and what needs to be done
"RTN","BPSNCPD4",137,0)
 ;the following should be passed by reference:
"RTN","BPSNCPD4",138,0)
 ;MOREDATA - Initialized by BPSNCPDP and more data is added here
"RTN","BPSNCPD4",139,0)
 ;BPSARRY  - Created by STARRAY^BPSNCPD1 and used for IB Determination
"RTN","BPSNCPD4",140,0)
 ;CERTIEN - BPS Certification IEN - Not passed but newed/set in BPSNCPDP, is used by EN^BPSNCPD2 as a backdoor parameter
"RTN","BPSNCPD4",141,0)
 ;BPSELIG - to return eligibility, by ref
"RTN","BPSNCPD4",142,0)
 ;output: 
"RTN","BPSNCPD4",143,0)
 ;if billable :1
"RTN","BPSNCPD4",144,0)
 ;no response : 0^RESPONSE code=2 or 6^CLMSTAT message^D(display message)^seconds to hang 
"RTN","BPSNCPD4",145,0)
 ;non billable : 2^RESPONSE code=2 or 6^CLMSTAT message 
"RTN","BPSNCPD4",146,0)
BILLABLE(DFN,BWHERE,MOREDATA,BPSARRY,CERTIEN,BPSELIG) ;
"RTN","BPSNCPD4",147,0)
 N IB S IB=0
"RTN","BPSNCPD4",148,0)
 D EN^BPSNCPD2(DFN,BWHERE,.MOREDATA,.BPSARRY,.IB)
"RTN","BPSNCPD4",149,0)
 S BPSELIG=$G(MOREDATA("ELIG"))
"RTN","BPSNCPD4",150,0)
 I IB=2 Q $S($G(BPSARRY("NO ECME INSURANCE")):"2^6^",1:"2^2^")_$P(MOREDATA("BILL"),"^",2)
"RTN","BPSNCPD4",151,0)
 I (IB=0)!('$G(MOREDATA("BILL"))) Q $S($G(BPSARRY("NO ECME INSURANCE")):"0^6^",1:"0^2^")_"Flagged by IB to not 3rd Party Insurance bill through ECME.^D^2"
"RTN","BPSNCPD4",152,0)
 Q 1
"RTN","BPSNCPD4",153,0)
 ;activate the request
"RTN","BPSNCPD4",154,0)
 ;returns:
"RTN","BPSNCPD4",155,0)
 ; 0 - Submitted through ECME
"RTN","BPSNCPD4",156,0)
 ; or 
"RTN","BPSNCPD4",157,0)
 ; RESPONSE code^message^D(display message)^seconds to hang
"RTN","BPSNCPD4",158,0)
 ; see EN^BPSNCPD4 for RESPONSE values
"RTN","BPSNCPD4",159,0)
ACTIVATE(BPIEN77,BPACTYP) ;
"RTN","BPSNCPD4",160,0)
 I +$G(BPIEN77)=0 Q "4^There is no request to activate"
"RTN","BPSNCPD4",161,0)
 S BPACTYP=$S($G(BPACTYP)="C":"CLAIM",$G(BPACTYP)="U":"UNCLAIM",1:"")
"RTN","BPSNCPD4",162,0)
 ;if there is no existing requests for the RX/RF then simply activate the new request
"RTN","BPSNCPD4",163,0)
 I +$$ACTIVATE^BPSOSRX4(BPIEN77)=0 D INACTIVE^BPSOSRX4(BPIEN77) D  Q "4^Cannot ACTIVATE the scheduled """_BPACTYP_""" request^D^2"
"RTN","BPSNCPD4",164,0)
 . D LOG(IEN59,"BPS REQUEST: "_+BPIEN77_" Cannot ACTIVATE the scheduled """_BPACTYP_""" request, it has been inactivated")
"RTN","BPSNCPD4",165,0)
 Q "0"
"RTN","BPSNCPD4",166,0)
 ;
"RTN","BPSNCPD4",167,0)
 ;======== end of API
"RTN","BPSNCPD4",168,0)
LOG(IEN59,MSG,BPDTFLG) ;
"RTN","BPSNCPD4",169,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-"_MSG,$G(BPDTFLG))
"RTN","BPSNCPD4",170,0)
 Q
"RTN","BPSNCPD4",171,0)
STTM() ;
"RTN","BPSNCPD4",172,0)
 Q $$NOW^XLFDT
"RTN","BPSNCPD4",173,0)
 ;
"RTN","BPSNCPD5")
0^15^B78805427
"RTN","BPSNCPD5",1,0)
BPSNCPD5 ;ALB/SS - Pharmacy API part 5 ;10-JAN-08
"RTN","BPSNCPD5",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8**;JUN 2004;Build 29
"RTN","BPSNCPD5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSNCPD5",4,0)
 ;
"RTN","BPSNCPD5",5,0)
 ;schedule a reversal for the future
"RTN","BPSNCPD5",6,0)
 ; BPNEWREQ -by ref to return new BPS REQUEST ien
"RTN","BPSNCPD5",7,0)
 ; BRXIEN - #52 ien
"RTN","BPSNCPD5",8,0)
 ; BFILL -refill no
"RTN","BPSNCPD5",9,0)
 ; BFILLDAT - Date of service
"RTN","BPSNCPD5",10,0)
 ; BWHERE - see
"RTN","BPSNCPD5",11,0)
 ; BILLNDC
"RTN","BPSNCPD5",12,0)
 ; REVREAS
"RTN","BPSNCPD5",13,0)
 ; DURREC
"RTN","BPSNCPD5",14,0)
 ; BPOVRIEN
"RTN","BPSNCPD5",15,0)
 ; BPSCLARF
"RTN","BPSNCPD5",16,0)
 ; BPSAUTH
"RTN","BPSNCPD5",17,0)
 ; IEN59
"RTN","BPSNCPD5",18,0)
 ; BPCOBIND
"RTN","BPSNCPD5",19,0)
 ; BPREVREQ - ien of the previous BPS REQUEST
"RTN","BPSNCPD5",20,0)
 ; BPACTTYP - U - unclaim(reversal request), UC - reversal+resubmit, C - claim request
"RTN","BPSNCPD5",21,0)
 ; BPSCLS - BPSCLOSE parameter of EN^BPSNCPDP
"RTN","BPSNCPD5",22,0)
 ;returns:
"RTN","BPSNCPD5",23,0)
 ; RESPONSE code^CLAMSTAT message^D(display message)^number of seconds to hang^IEN of the new request
"RTN","BPSNCPD5",24,0)
 ; RESPONSE code = 0 - Submitted through ECME
"RTN","BPSNCPD5",25,0)
 ; see EN^BPSNCPD4 for other RESPONSE values;
"RTN","BPSNCPD5",26,0)
SCHREQ(BPNEWREQ,BRXIEN,BFILL,BFILLDAT,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,IEN59,BPCOBIND,BPREVREQ,BPACTTYP,BPSCLS,BPSRTYPE,BPSPLAN,BPSPRDAT) ;
"RTN","BPSNCPD5",27,0)
 N RESP,RESPONSE,MOREDATA,BPRETV
"RTN","BPSNCPD5",28,0)
 N BPUSRMSG
"RTN","BPSNCPD5",29,0)
 ;populate MOREDATA with basic data
"RTN","BPSNCPD5",30,0)
 D BASICMOR^BPSOSRX8(BWHERE,BFILLDAT,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,.MOREDATA)
"RTN","BPSNCPD5",31,0)
 I BPCOBIND=2 D MORE4SEC^BPSPRRX2(.MOREDATA,.BPSPRDAT) S MOREDATA("RTYPE")=$G(BPSRTYPE)
"RTN","BPSNCPD5",32,0)
 ; if the user has chosen to close the claim after reversal
"RTN","BPSNCPD5",33,0)
 ; BPSCLS contains the value of the BPSCLOSE parameter of EN^BPSNCPDP
"RTN","BPSNCPD5",34,0)
 I $G(BPSCLS("CLOSE AFT REV"))=1 M MOREDATA=BPSCLS
"RTN","BPSNCPD5",35,0)
 ; 
"RTN","BPSNCPD5",36,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSNCPD5",37,0)
 D LOG^BPSNCPD6(IEN59,$T(+0)_"-Before Submit of Reversal")
"RTN","BPSNCPD5",38,0)
 S BPSTART=$$STTM^BPSNCPD4()
"RTN","BPSNCPD5",39,0)
 ;schedule a request
"RTN","BPSNCPD5",40,0)
 S BPRETV=$$REQST^BPSOSRX(BPACTTYP,BRXIEN,BFILL,.MOREDATA,BPCOBIND,IEN59,$G(BILLNDC),1)
"RTN","BPSNCPD5",41,0)
 S BPNEWREQ=+$P(BPRETV,U,2)
"RTN","BPSNCPD5",42,0)
 ;if error
"RTN","BPSNCPD5",43,0)
 I +BPRETV=0 D  Q $$RSPCLMS^BPSOSRX8(BPACTTYP,4,.MOREDATA)
"RTN","BPSNCPD5",44,0)
 . D LOG^BPSNCPD6(IEN59,$T(+0)_"-Create request error: "_$P(BPRETV,U,2)_". Claim Will Not Be submitted.")
"RTN","BPSNCPD5",45,0)
 . L -^BPST
"RTN","BPSNCPD5",46,0)
 ;if ok
"RTN","BPSNCPD5",47,0)
 D LOG^BPSNCPD6(IEN59,$T(+0)_"-BPS REQUEST: "_BPNEWREQ_" has been created")
"RTN","BPSNCPD5",48,0)
 ;determine the last request
"RTN","BPSNCPD5",49,0)
 I +$$NXTREQST^BPSOSRX6(BPREVREQ,BPNEWREQ)=0 D  Q $$RSPCLMS^BPSOSRX8("C",4,.MOREDATA)
"RTN","BPSNCPD5",50,0)
 . D LOG^BPSNCPD6(IEN59,$T(+0)_"-Cannot make "_BPNEWREQ_"as a NEXT REQUEST in "_BPREVREQ)
"RTN","BPSNCPD5",51,0)
 Q $$RSPCLMS^BPSOSRX8(BPACTTYP,0,.MOREDATA)_U_BPNEWREQ
"RTN","BPSNCPD5",52,0)
 ;
"RTN","BPSNCPD5",53,0)
 ;====== Schedule a reversal
"RTN","BPSNCPD5",54,0)
 ;BPSCLS - BPSCLOSE parameter of EN^BPSNCPDP
"RTN","BPSNCPD5",55,0)
REVERSAL(BPNEWREQ,BRXIEN,BFILL,OLDRESP,BFILLDAT,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,IEN59,BPCOBIND,BPJOBFLG,BPACTTYP,BPSTART,BPREQIEN,BPSCLS,BPSRTYPE,BPSPRDAT) ;
"RTN","BPSNCPD5",56,0)
 N RESP,RESPONSE,MOREDATA,BPRETV
"RTN","BPSNCPD5",57,0)
 ;populate MOREDATA with basic data
"RTN","BPSNCPD5",58,0)
 D BASICMOR^BPSOSRX8(BWHERE,BFILLDAT,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,.MOREDATA)
"RTN","BPSNCPD5",59,0)
 I BPCOBIND=2 D MORE4SEC^BPSPRRX2(.MOREDATA,.BPSPRDAT) S MOREDATA("RTYPE")=$G(BPSRTYPE)
"RTN","BPSNCPD5",60,0)
 ; if the user has chosen to close the claim after reversal
"RTN","BPSNCPD5",61,0)
 ; BPSCLS contains the value of the BPSCLOSE parameter of EN^BPSNCPDP
"RTN","BPSNCPD5",62,0)
 I $G(BPSCLS("CLOSE AFT REV"))=1 M MOREDATA=BPSCLS
"RTN","BPSNCPD5",63,0)
 ;
"RTN","BPSNCPD5",64,0)
 ; Do a reversal for the appropriate actions
"RTN","BPSNCPD5",65,0)
 ; If override flag is set, prompt for override values - TEST ONLY
"RTN","BPSNCPD5",66,0)
 ;
"RTN","BPSNCPD5",67,0)
 I $$CHECK^BPSTEST D GETOVER^BPSTEST(BRXIEN,BFILL,OLDRESP,BWHERE,"R",BPCOBIND)
"RTN","BPSNCPD5",68,0)
 ;
"RTN","BPSNCPD5",69,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSNCPD5",70,0)
 D LOG^BPSNCPD6(IEN59,$T(+0)_"-Before Submit of Reversal")
"RTN","BPSNCPD5",71,0)
 S BPSTART=$$STTM^BPSNCPD4()
"RTN","BPSNCPD5",72,0)
 ;if background job
"RTN","BPSNCPD5",73,0)
 I BPJOBFLG="B" S BPRETV=$$ACTIVATE^BPSNCPD4(BPREQIEN,"U") Q $$RSPCLMS^BPSOSRX8(BPACTTYP,+BPRETV,.MOREDATA)_U_$P(BPRETV,U,2)
"RTN","BPSNCPD5",74,0)
 ;if foreground job then schedule an UNCLAIM request
"RTN","BPSNCPD5",75,0)
 S BPRETV=$$REQST^BPSOSRX("U",BRXIEN,BFILL,.MOREDATA,BPCOBIND,IEN59,$G(BILLNDC))
"RTN","BPSNCPD5",76,0)
 S BPNEWREQ=+$P(BPRETV,U,2)
"RTN","BPSNCPD5",77,0)
 ;if error
"RTN","BPSNCPD5",78,0)
 I +BPRETV=0 D  Q $$RSPCLMS^BPSOSRX8(BPACTTYP,4,.MOREDATA)
"RTN","BPSNCPD5",79,0)
 . D LOG^BPSNCPD6(IEN59,$T(+0)_"-Create request error: "_$P(BPRETV,U,2)_". Claim Will Not Be submitted.")
"RTN","BPSNCPD5",80,0)
 . L -^BPST
"RTN","BPSNCPD5",81,0)
 ;if ok
"RTN","BPSNCPD5",82,0)
 D LOG^BPSNCPD6(IEN59,$T(+0)_"-BPS REQUEST: "_BPNEWREQ_" has been created")
"RTN","BPSNCPD5",83,0)
 ;activate the scheduled request
"RTN","BPSNCPD5",84,0)
 S BPRETV=$$ACTIVATE^BPSNCPD4(BPNEWREQ,"U")
"RTN","BPSNCPD5",85,0)
 Q $$RSPCLMS^BPSOSRX8(BPACTTYP,+BPRETV,.MOREDATA)_U_BPNEWREQ
"RTN","BPSNCPD5",86,0)
 ;
"RTN","BPSNCPD5",87,0)
 ;====== Process a brand new RX/RF, which never was processed by ECME yet
"RTN","BPSNCPD5",88,0)
 ;returns:
"RTN","BPSNCPD5",89,0)
 ; 0 - Submitted through ECME
"RTN","BPSNCPD5",90,0)
 ; or 
"RTN","BPSNCPD5",91,0)
 ; RESPONSE code^CLAMSTAT^D(display message)^number of seconds to hang^additional info
"RTN","BPSNCPD5",92,0)
 ; see EN^BPSNCPD1 for RESPONSE values
"RTN","BPSNCPD5",93,0)
NEWCLM(BPNEWREQ,BRXIEN,BFILL,BFILLDAT,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPCOBIND,BPJOBFLG,IEN59,BPACTTYP,DFN,BPSTART,BPREQIEN,BPSELIG,BPSRTYPE,BPSPLAN,BPSPRDAT) ;
"RTN","BPSNCPD5",94,0)
 N BPSITE,BPECMOFF,BPSARRY,MOREDATA,IB,BPRETV,BPZRET,BPCLMST,CERTIEN,BPRESP
"RTN","BPSNCPD5",95,0)
 I BPJOBFLG'="F",BPJOBFLG'="B" D LOG^BPSNCPD6(IEN59,$T(+0)_"-Job Flag missing") Q "5^Job Flag missing"  ;RESPONSE^CLMSTAT
"RTN","BPSNCPD5",96,0)
 S BPCLMST=""
"RTN","BPSNCPD5",97,0)
 I BPACTTYP'="C" Q "1^Prescription not previously billed through ECME. Cannot Reverse claim.^D^2"
"RTN","BPSNCPD5",98,0)
 S BPSITE=+$$GETSITE^BPSOSRX8(BRXIEN,BFILL)
"RTN","BPSNCPD5",99,0)
 ;check ECME availability
"RTN","BPSNCPD5",100,0)
 S BPECMOFF=$$ECMESITE^BPSOSRX5(BPSITE) I +BPECMOFF=1 Q BPECMOFF
"RTN","BPSNCPD5",101,0)
 ;populate MOREDATA with basic data
"RTN","BPSNCPD5",102,0)
 D BASICMOR^BPSOSRX8(BWHERE,BFILLDAT,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,.MOREDATA)
"RTN","BPSNCPD5",103,0)
 I BPCOBIND=2 D MORE4SEC^BPSPRRX2(.MOREDATA,.BPSPRDAT) S MOREDATA("RTYPE")=$G(BPSRTYPE)
"RTN","BPSNCPD5",104,0)
 I $G(BPSRTYPE)'="" S MOREDATA("RTYPE")=$G(BPSRTYPE)
"RTN","BPSNCPD5",105,0)
 ;Certification Testing
"RTN","BPSNCPD5",106,0)
 ;sets:
"RTN","BPSNCPD5",107,0)
 ; BILLNDC which is used in STARRAY^BPSNCPD1
"RTN","BPSNCPD5",108,0)
 ; CERTIEN which is used in BILLABLE
"RTN","BPSNCPD5",109,0)
 S BPRESP=$$CERTTEST^BPSNCPD4(.BILLNDC,.CERTIEN) I +BPRESP=1 Q BPRESP
"RTN","BPSNCPD5",110,0)
 ;populate BPSARRY
"RTN","BPSNCPD5",111,0)
 ;Note:
"RTN","BPSNCPD5",112,0)
 ;the following is passed as backdoor parameters
"RTN","BPSNCPD5",113,0)
 ; DFN - patient's IEN
"RTN","BPSNCPD5",114,0)
 ; BILLNDC - NDC
"RTN","BPSNCPD5",115,0)
 ; BFILLDAT - fill date
"RTN","BPSNCPD5",116,0)
 D STARRAY^BPSNCPD1(BRXIEN,BFILL,BWHERE,.BPSARRY,BPSITE)
"RTN","BPSNCPD5",117,0)
 S BPSARRY("RXCOB")=BPCOBIND
"RTN","BPSNCPD5",118,0)
 S BPSARRY("PLAN")=$G(BPSPLAN),BPSARRY("RTYPE")=$G(BPSRTYPE) ;for secondary and Tricare/dual eligibility billing, to be used by RX^IBNCPDP
"RTN","BPSNCPD5",119,0)
 ;Billing determination
"RTN","BPSNCPD5",120,0)
 S IB=$$BILLABLE^BPSNCPD4(DFN,BWHERE,.MOREDATA,.BPSARRY,CERTIEN,.BPSELIG)
"RTN","BPSNCPD5",121,0)
 ;if non-billable or no response from IB
"RTN","BPSNCPD5",122,0)
 I +IB'=1 Q $P(IB,U,2,5)_"^D^"
"RTN","BPSNCPD5",123,0)
 ;check IB data
"RTN","BPSNCPD5",124,0)
 S BPRETV=$$IBDATAOK^BPSOSRX8(.MOREDATA,$G(BPSARRY("NO ECME INSURANCE"))) I BPRETV>0 Q BPRETV
"RTN","BPSNCPD5",125,0)
 ; Log message to ECME log
"RTN","BPSNCPD5",126,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSNCPD5",127,0)
 D LOG^BPSNCPD6(IEN59,$T(+0)_"-Before submit of claim")
"RTN","BPSNCPD5",128,0)
 S BPSTART=$$STTM^BPSNCPD4()
"RTN","BPSNCPD5",129,0)
 ;if background job
"RTN","BPSNCPD5",130,0)
 I BPJOBFLG="B",+$G(BPREQIEN)=0 D  Q "5^BPS REQUEST IEN missing"  ;should never happen
"RTN","BPSNCPD5",131,0)
 . D LOG^BPSNCPD6(IEN59,$T(+0)_"-BPS REQUEST IEN missing for background job. Claim cannot be processed.")
"RTN","BPSNCPD5",132,0)
 I BPJOBFLG="B" D  Q $$RSPCLMS^BPSOSRX8(BPACTTYP,+BPRETV,.MOREDATA)_U_BPREQIEN
"RTN","BPSNCPD5",133,0)
 . ;Update IB data
"RTN","BPSNCPD5",134,0)
 . D UPDINSDT^BPSOSRX7(BPREQIEN,.MOREDATA,IEN59) ;
"RTN","BPSNCPD5",135,0)
 . S BPRETV=$$ACTIVATE^BPSNCPD4(BPREQIEN,"C")
"RTN","BPSNCPD5",136,0)
 ;if foreground job then schedule a CLAIM request
"RTN","BPSNCPD5",137,0)
 ;
"RTN","BPSNCPD5",138,0)
 ; If override flag is set, prompt for override values - TEST ONLY
"RTN","BPSNCPD5",139,0)
 I $$CHECK^BPSTEST D GETOVER^BPSTEST(BRXIEN,BFILL,"",BWHERE,"S",BPCOBIND)
"RTN","BPSNCPD5",140,0)
 ;
"RTN","BPSNCPD5",141,0)
 S BPRETV=$$REQST^BPSOSRX("C",BRXIEN,BFILL,.MOREDATA,BPCOBIND,IEN59,$G(BILLNDC))
"RTN","BPSNCPD5",142,0)
 S BPNEWREQ=+$P(BPRETV,U,2)
"RTN","BPSNCPD5",143,0)
 ;if error
"RTN","BPSNCPD5",144,0)
 I +BPRETV=0 D  Q $$RSPCLMS^BPSOSRX8(BPACTTYP,4,.MOREDATA,$P(BPRETV,U,2))
"RTN","BPSNCPD5",145,0)
 . D LOG^BPSNCPD6(IEN59,$T(+0)_"-Create request error: "_$P(BPRETV,U,2)_". Claim Will Not Be submitted.")
"RTN","BPSNCPD5",146,0)
 ;if ok
"RTN","BPSNCPD5",147,0)
 D LOG^BPSNCPD6(IEN59,$T(+0)_"-BPS REQUEST: "_BPNEWREQ_" has been created")
"RTN","BPSNCPD5",148,0)
 ;activate the scheduled request
"RTN","BPSNCPD5",149,0)
 S BPRETV=$$ACTIVATE^BPSNCPD4(BPNEWREQ,"C")
"RTN","BPSNCPD5",150,0)
 Q $$RSPCLMS^BPSOSRX8(BPACTTYP,+BPRETV,.MOREDATA)_U_BPNEWREQ
"RTN","BPSNCPD5",151,0)
 ;
"RTN","BPSNCPD5",152,0)
 ;Process RX/RF resubmit OR reversal+resubmit for non-payables
"RTN","BPSNCPD5",153,0)
 ;returns:
"RTN","BPSNCPD5",154,0)
 ; 0 - Submitted through ECME
"RTN","BPSNCPD5",155,0)
 ; or 
"RTN","BPSNCPD5",156,0)
 ; RESPONSE code^CLAMSTAT^D(display message)^number of seconds to hang^additional info
"RTN","BPSNCPD5",157,0)
 ; see EN^BPSNCPDP for RESPONSE values
"RTN","BPSNCPD5",158,0)
REVRESNP(BPNEWREQ,BRXIEN,BFILL,BFILLDAT,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPCOBIND,BPJOBFLG,IEN59,BPACTTYP,DFN,BPSTART,BPREQIEN,OLDRESP,BPSELIG,BPSRTYPE,BPSPLAN,BPSPRDAT) ;
"RTN","BPSNCPD5",159,0)
 N BPSITE,BPECMOFF,BPSARRY,MOREDATA,IB,BPRETV,BPZRET,BPCLMST,CERTIEN,BPRESP
"RTN","BPSNCPD5",160,0)
 I BPJOBFLG'="F",BPJOBFLG'="B" D LOG^BPSNCPD6(IEN59,$T(+0)_"-Job Flag missing") Q "5^Job Flag missing"  ;RESPONSE^CLMSTAT
"RTN","BPSNCPD5",161,0)
 S BPCLMST=""
"RTN","BPSNCPD5",162,0)
 I BPACTTYP="U" Q "1^Prescription is not payable. Cannot Reverse claim.^D^2"
"RTN","BPSNCPD5",163,0)
 S BPSITE=+$$GETSITE^BPSOSRX8(BRXIEN,BFILL)
"RTN","BPSNCPD5",164,0)
 ;check ECME availability
"RTN","BPSNCPD5",165,0)
 S BPECMOFF=$$ECMESITE^BPSOSRX5(BPSITE) I +BPECMOFF=1 Q BPECMOFF
"RTN","BPSNCPD5",166,0)
 ;
"RTN","BPSNCPD5",167,0)
 ;populate MOREDATA with basic data
"RTN","BPSNCPD5",168,0)
 D BASICMOR^BPSOSRX8(BWHERE,BFILLDAT,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,.MOREDATA)
"RTN","BPSNCPD5",169,0)
 I BPCOBIND=2 D MORE4SEC^BPSPRRX2(.MOREDATA,.BPSPRDAT) S MOREDATA("RTYPE")=$G(BPSRTYPE)
"RTN","BPSNCPD5",170,0)
 I $G(BPSRTYPE)'="" S MOREDATA("RTYPE")=$G(BPSRTYPE)
"RTN","BPSNCPD5",171,0)
 ;Certification Testing
"RTN","BPSNCPD5",172,0)
 ;sets:
"RTN","BPSNCPD5",173,0)
 ; BILLNDC which is used in STARRAY^BPSNCPD1
"RTN","BPSNCPD5",174,0)
 ; CERTIEN which is used in BILLABLE
"RTN","BPSNCPD5",175,0)
 S BPRESP=$$CERTTEST^BPSNCPD4(.BILLNDC,.CERTIEN) I +BPRESP=1 Q BPRESP
"RTN","BPSNCPD5",176,0)
 ;populate BPSARRY
"RTN","BPSNCPD5",177,0)
 ;Note:
"RTN","BPSNCPD5",178,0)
 ;the following is passed as backdoor parameters
"RTN","BPSNCPD5",179,0)
 ; DFN - patient's IEN
"RTN","BPSNCPD5",180,0)
 ; BILLNDC - NDC
"RTN","BPSNCPD5",181,0)
 ; BFILLDAT - fill date
"RTN","BPSNCPD5",182,0)
 D STARRAY^BPSNCPD1(BRXIEN,BFILL,BWHERE,.BPSARRY,BPSITE)
"RTN","BPSNCPD5",183,0)
 S BPSARRY("RXCOB")=BPCOBIND
"RTN","BPSNCPD5",184,0)
 S BPSARRY("PLAN")=$G(BPSPLAN),BPSARRY("RTYPE")=$G(BPSRTYPE) ;for secondary and Tricare/dual eligibility billing, to be used by RX^IBNCPDP
"RTN","BPSNCPD5",185,0)
 ;set BPSARRY("SC/EI OVR") flag for scheduled requests
"RTN","BPSNCPD5",186,0)
 I $G(BPJOBFLG)="B",$G(BPREQIEN) S BPSARRY("SC/EI OVR")=$P($G(^BPS(9002313.77,+$G(BPREQIEN),2)),U,9)
"RTN","BPSNCPD5",187,0)
 ;Billing determination
"RTN","BPSNCPD5",188,0)
 S IB=$$BILLABLE^BPSNCPD4(DFN,BWHERE,.MOREDATA,.BPSARRY,CERTIEN,.BPSELIG)
"RTN","BPSNCPD5",189,0)
 ;if non-billable or no response from IB
"RTN","BPSNCPD5",190,0)
 I +IB'=1 Q $P(IB,U,2,5)_"^D^"
"RTN","BPSNCPD5",191,0)
 ;check IB data
"RTN","BPSNCPD5",192,0)
 S BPRETV=$$IBDATAOK^BPSOSRX8(.MOREDATA,$G(BPSARRY("NO ECME INSURANCE"))) I BPRETV>0 Q BPRETV
"RTN","BPSNCPD5",193,0)
 ; Log message to ECME log
"RTN","BPSNCPD5",194,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSNCPD5",195,0)
 D LOG^BPSNCPD6(IEN59,$T(+0)_"-Before submit of claim")
"RTN","BPSNCPD5",196,0)
 S BPSTART=$$STTM^BPSNCPD4()
"RTN","BPSNCPD5",197,0)
 ;if background job
"RTN","BPSNCPD5",198,0)
 I BPJOBFLG="B" D  Q $$RSPCLMS^BPSOSRX8(BPACTTYP,+BPRETV,.MOREDATA)_U_$P(BPRETV,U,2)
"RTN","BPSNCPD5",199,0)
 . ;Update IB data
"RTN","BPSNCPD5",200,0)
 . D UPDINSDT^BPSOSRX7(BPREQIEN,.MOREDATA,IEN59) ;
"RTN","BPSNCPD5",201,0)
 . S BPRETV=$$ACTIVATE^BPSNCPD4(BPREQIEN,"C")
"RTN","BPSNCPD5",202,0)
 ;if foreground job then schedule a CLAIM request
"RTN","BPSNCPD5",203,0)
 ;
"RTN","BPSNCPD5",204,0)
 ; If override flag is set, prompt for override values - TEST ONLY
"RTN","BPSNCPD5",205,0)
 I $$CHECK^BPSTEST D GETOVER^BPSTEST(BRXIEN,BFILL,OLDRESP,BWHERE,"S",BPCOBIND)
"RTN","BPSNCPD5",206,0)
 ;
"RTN","BPSNCPD5",207,0)
 S BPRETV=$$REQST^BPSOSRX("C",BRXIEN,BFILL,.MOREDATA,BPCOBIND,IEN59,$G(BILLNDC))
"RTN","BPSNCPD5",208,0)
 S BPNEWREQ=+$P(BPRETV,U,2)
"RTN","BPSNCPD5",209,0)
 ;if error
"RTN","BPSNCPD5",210,0)
 I +BPRETV=0 D  Q $$RSPCLMS^BPSOSRX8(BPACTTYP,4,.MOREDATA,$P(BPRETV,U,2))
"RTN","BPSNCPD5",211,0)
 . D LOG^BPSNCPD6(IEN59,$T(+0)_"-Create request error: "_$P(BPRETV,U,2)_". Claim Will Not Be submitted.")
"RTN","BPSNCPD5",212,0)
 ;if ok
"RTN","BPSNCPD5",213,0)
 D LOG^BPSNCPD6(IEN59,$T(+0)_"-BPS REQUEST: "_BPNEWREQ_" has been created")
"RTN","BPSNCPD5",214,0)
 ;activate the scheduled request
"RTN","BPSNCPD5",215,0)
 S BPRETV=$$ACTIVATE^BPSNCPD4(BPNEWREQ,"C")
"RTN","BPSNCPD5",216,0)
 Q $$RSPCLMS^BPSOSRX8(BPACTTYP,+BPRETV,.MOREDATA)_U_BPNEWREQ
"RTN","BPSNCPD5",217,0)
 ;
"RTN","BPSNCPD6")
0^37^B39101412
"RTN","BPSNCPD6",1,0)
BPSNCPD6 ;ALB/SS - Pharmacy API part 6 ;10-JAN-08
"RTN","BPSNCPD6",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8**;JUN 2004;Build 29
"RTN","BPSNCPD6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSNCPD6",4,0)
 ;
"RTN","BPSNCPD6",5,0)
 ;Moved portions of the BPSNCPDP code because of routine size issues
"RTN","BPSNCPD6",6,0)
 ;== New Claim 
"RTN","BPSNCPD6",7,0)
NEWCLAIM ;
"RTN","BPSNCPD6",8,0)
 S BPRETV=$$NEWCLM^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,BFILLDAT,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPCOBIND,BPJOBFLG,IEN59,BPACTTYP,DFN,.BPSTART,$G(BPREQIEN),.BPSELIG,$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPD6",9,0)
 S RESPONSE=+BPRETV
"RTN","BPSNCPD6",10,0)
 ;to make LOG backward compatible
"RTN","BPSNCPD6",11,0)
 D LOG(IEN59,$T(+0)_"-After Submit of Claim.  Return Value: "_$S(RESPONSE=0:1,1:0))
"RTN","BPSNCPD6",12,0)
 S CLMSTAT=$P(BPRETV,U,2)
"RTN","BPSNCPD6",13,0)
 D DISPL^BPSNCPD4(WFLG,BPRETV,$G(BPSELIG))
"RTN","BPSNCPD6",14,0)
 I RESPONSE=0 Q
"RTN","BPSNCPD6",15,0)
 D LOG(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",16,0)
 Q
"RTN","BPSNCPD6",17,0)
 ;
"RTN","BPSNCPD6",18,0)
 ;== Reversals for Payable claims
"RTN","BPSNCPD6",19,0)
 ;(Note: BPSCLOSE parameter of EN^BPSNCPDP can be used in this case)
"RTN","BPSNCPD6",20,0)
RVPAID ;
"RTN","BPSNCPD6",21,0)
 ;If Last Action was REVERSAL type Then we should expect Rejected and Stranded/Other reversal responses
"RTN","BPSNCPD6",22,0)
 ;(because the claim is still Payable)
"RTN","BPSNCPD6",23,0)
 ;And if so then DO NOT REVERSE it again 
"RTN","BPSNCPD6",24,0)
 ;Exceptions (from pre-existing logic): 
"RTN","BPSNCPD6",25,0)
 ; EREV - can be re-reversed if the previous submission is Payable or Rejected Reversal
"RTN","BPSNCPD6",26,0)
 ; DE,RS - pre-existing logic
"RTN","BPSNCPD6",27,0)
 I OLDRESP["REVERSAL",BWHERE'="EREV",BWHERE'="DE",BWHERE'="RS" D  Q
"RTN","BPSNCPD6",28,0)
 . S RESPONSE=1
"RTN","BPSNCPD6",29,0)
 . S CLMSTAT="Claim has status "_OLDRESP_".  Not reversed."
"RTN","BPSNCPD6",30,0)
 . D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",31,0)
 . D LOG(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",32,0)
 ; do all the rest - E PAYABLE, etc
"RTN","BPSNCPD6",33,0)
 S BPRETV=$$REVERSAL^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,OLDRESP,BFILLDAT,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,IEN59,BPCOBIND,BPJOBFLG,BPACTTYP,.BPSTART,$G(BPREQIEN),.BPSCLOSE,$G(BPSRTYPE),.BPSPRDAT)
"RTN","BPSNCPD6",34,0)
 S RESPONSE=+BPRETV
"RTN","BPSNCPD6",35,0)
 ;to make LOG backward compatible
"RTN","BPSNCPD6",36,0)
 D LOG(IEN59,$T(+0)_"-After Submit of Reversal. Return Value: "_$S(RESPONSE=0:1,1:0))
"RTN","BPSNCPD6",37,0)
 S CLMSTAT=$P(BPRETV,U,2)
"RTN","BPSNCPD6",38,0)
 I BWHERE'="EREV" D DISPL^BPSNCPD4(WFLG,BPRETV,$G(BPSELIG))
"RTN","BPSNCPD6",39,0)
 I RESPONSE=0 Q
"RTN","BPSNCPD6",40,0)
 D LOG(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",41,0)
 Q
"RTN","BPSNCPD6",42,0)
 ;
"RTN","BPSNCPD6",43,0)
 ;== Reversals+Resubmits for Payable claims
"RTN","BPSNCPD6",44,0)
RVRSPAID ;
"RTN","BPSNCPD6",45,0)
 ;Last Action was REVERSAL type? 
"RTN","BPSNCPD6",46,0)
 ;we should expect rejected and stranded reversal but not accepted one since the claim is Payable
"RTN","BPSNCPD6",47,0)
 ;exception for Tricare - "reversal rejected" and "reversal unstranded" can be resubmitted, others - not
"RTN","BPSNCPD6",48,0)
 I OLDRESP["REVERSAL" I ($P($G(^BPST(IEN59,9)),U,4)'="T")!($P($G(^BPST(IEN59,9)),U,4)="T"&(OLDRESP'["E REVERSAL REJECTED")&(OLDRESP'["E REVERSAL UNSTRANDED")) D  Q
"RTN","BPSNCPD6",49,0)
 . S RESPONSE=1
"RTN","BPSNCPD6",50,0)
 . S CLMSTAT="Can not resubmit a rejected or stranded reversal"
"RTN","BPSNCPD6",51,0)
 . D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",52,0)
 . D LOG(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",53,0)
 ; do all the rest - E PAYABLE, etc
"RTN","BPSNCPD6",54,0)
 S BPRETV=$$REVRESUB^BPSNCPD4(.BP77NEW,BRXIEN,BFILL,BFILLDAT,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPCOBIND,BPJOBFLG,IEN59,DFN,.BPSTART,$G(BPREQIEN),OLDRESP,.BPSELIG,$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPD6",55,0)
 S RESPONSE=+BPRETV
"RTN","BPSNCPD6",56,0)
 ;if "Reversal only not resubmit" - display a message for the user
"RTN","BPSNCPD6",57,0)
 I RESPONSE=10 D DISPL^BPSNCPD4(WFLG,"10^Claim Will Be Reversed But Will Not Be Resubmitted^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",58,0)
 ;to make LOG backward compatible
"RTN","BPSNCPD6",59,0)
 D LOG(IEN59,$T(+0)_"-After Submit of Reversal. Return Value: "_$S(RESPONSE=0:1,1:0))
"RTN","BPSNCPD6",60,0)
 D DISPL^BPSNCPD4(WFLG,BPRETV,$G(BPSELIG))
"RTN","BPSNCPD6",61,0)
 I RESPONSE=10 S CLMSTAT=$P(BPRETV,U,5) Q
"RTN","BPSNCPD6",62,0)
 S CLMSTAT=$P(BPRETV,U,2)
"RTN","BPSNCPD6",63,0)
 I RESPONSE=0 Q
"RTN","BPSNCPD6",64,0)
 D LOG(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",65,0)
 Q
"RTN","BPSNCPD6",66,0)
 ;
"RTN","BPSNCPD6",67,0)
 ;== Resubmits for Payable claims - DO NOT resubmit
"RTN","BPSNCPD6",68,0)
RSPAID ;
"RTN","BPSNCPD6",69,0)
 S RESPONSE=1
"RTN","BPSNCPD6",70,0)
 ;Last Action was REVERSAL type? 
"RTN","BPSNCPD6",71,0)
 ;(we should expect rejected and stranded reversal but not accepted one since the claim is Payable)
"RTN","BPSNCPD6",72,0)
 I OLDRESP["REVERSAL" D  Q
"RTN","BPSNCPD6",73,0)
 . S CLMSTAT="Can not resubmit a rejected or stranded reversal"
"RTN","BPSNCPD6",74,0)
 . D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",75,0)
 . D LOG(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",76,0)
 ; do all the rest - E PAYABLE, etc
"RTN","BPSNCPD6",77,0)
 S CLMSTAT="Previously billed through ECME: "_OLDRESP
"RTN","BPSNCPD6",78,0)
 D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",79,0)
 D LOG(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",80,0)
 Q
"RTN","BPSNCPD6",81,0)
 ;== Reversals for Non-Payable claims - DO NOT reverse
"RTN","BPSNCPD6",82,0)
RVNPAID ;
"RTN","BPSNCPD6",83,0)
 ;if this is return to stock OR delete - close the claim
"RTN","BPSNCPD6",84,0)
 I ",RS,DE,"[(","_BWHERE_",") D  Q
"RTN","BPSNCPD6",85,0)
 . D CLOSE2^BPSBUTL(BRXIEN,BFILL,BWHERE)
"RTN","BPSNCPD6",86,0)
 . S RESPONSE=3
"RTN","BPSNCPD6",87,0)
 . S CLMSTAT="Claim was not payable so it has been closed.  No ECME claim created."
"RTN","BPSNCPD6",88,0)
 . D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",89,0)
 . D LOG(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",90,0)
 S RESPONSE=1
"RTN","BPSNCPD6",91,0)
 S CLMSTAT="Claim has status "_OLDRESP_".  Not reversed."
"RTN","BPSNCPD6",92,0)
 D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",93,0)
 D LOG(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",94,0)
 Q
"RTN","BPSNCPD6",95,0)
 ;== Resubmits AND Reversals+Resubmits for Non-Payable claims
"RTN","BPSNCPD6",96,0)
RVRSNPD ;
"RTN","BPSNCPD6",97,0)
 ; if this is a single resubmit action ("C")
"RTN","BPSNCPD6",98,0)
 ; and the claim is NON-PAYABLE because of some reason other than 
"RTN","BPSNCPD6",99,0)
 ;   successful reversal 
"RTN","BPSNCPD6",100,0)
 ;   or
"RTN","BPSNCPD6",101,0)
 ;   claim rejected by the payer
"RTN","BPSNCPD6",102,0)
 ; then do not submit a claim
"RTN","BPSNCPD6",103,0)
 I BPACTTYP="C",OLDRESP'="E REVERSAL ACCEPTED",OLDRESP'="E REJECTED" D  Q
"RTN","BPSNCPD6",104,0)
 . S RESPONSE=1
"RTN","BPSNCPD6",105,0)
 . S CLMSTAT="Previously billed through ECME: "_OLDRESP
"RTN","BPSNCPD6",106,0)
 . D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",107,0)
 . D LOG(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",108,0)
 ; resubmit a claim
"RTN","BPSNCPD6",109,0)
 S BPRETV=$$REVRESNP^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,BFILLDAT,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPCOBIND,BPJOBFLG,IEN59,BPACTTYP,DFN,.BPSTART,$G(BPREQIEN),OLDRESP,.BPSELIG,$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPD6",110,0)
 S RESPONSE=+BPRETV
"RTN","BPSNCPD6",111,0)
 ;to make LOG backward compatible
"RTN","BPSNCPD6",112,0)
 D LOG(IEN59,$T(+0)_"-After Submit of Reversal. Return Value: "_$S(RESPONSE=0:1,1:0))
"RTN","BPSNCPD6",113,0)
 S CLMSTAT=$P(BPRETV,U,2)
"RTN","BPSNCPD6",114,0)
 D DISPL^BPSNCPD4(WFLG,BPRETV,$G(BPSELIG))
"RTN","BPSNCPD6",115,0)
 I RESPONSE=0 Q
"RTN","BPSNCPD6",116,0)
 D LOG(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",117,0)
 Q
"RTN","BPSNCPD6",118,0)
 ;
"RTN","BPSNCPD6",119,0)
 ; if Back Billing
"RTN","BPSNCPD6",120,0)
BB ;
"RTN","BPSNCPD6",121,0)
 S RESPONSE=1
"RTN","BPSNCPD6",122,0)
 S CLMSTAT="Previously billed through ECME: "_OLDRESP
"RTN","BPSNCPD6",123,0)
 D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",124,0)
 D LOG(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",125,0)
 Q
"RTN","BPSNCPD6",126,0)
 ;
"RTN","BPSNCPD6",127,0)
 ; if we do not have a status for pre-existing claim AND this is a reversal request - DO NOT reverse
"RTN","BPSNCPD6",128,0)
RVNEW ;
"RTN","BPSNCPD6",129,0)
 S RESPONSE=1
"RTN","BPSNCPD6",130,0)
 S CLMSTAT="Prescription not previously billed through ECME.  Cannot Reverse claim."
"RTN","BPSNCPD6",131,0)
 D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPD6",132,0)
 D LOG(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPD6",133,0)
 Q
"RTN","BPSNCPD6",134,0)
LOG(IEN59,MSG,BPDTFLG) ;
"RTN","BPSNCPD6",135,0)
 D LOG^BPSOSL(IEN59,MSG,$G(BPDTFLG))
"RTN","BPSNCPD6",136,0)
 Q
"RTN","BPSNCPD6",137,0)
 ;
"RTN","BPSNCPD6",138,0)
 ;use in BPSSCR04 to collect requests for the User Screen that don't have BPS TRANSACTION records 
"RTN","BPSNCPD6",139,0)
 ; D LOOK77^BPSNCPD6(BPBDT,BPEDT,BPTMP1)
"RTN","BPSNCPD6",140,0)
LOOK77(BPBEGDT,BPENDDT,BPTMP) ;
"RTN","BPSNCPD6",141,0)
 N BPLDT77,BP77,BP59,BPRXRF
"RTN","BPSNCPD6",142,0)
 S BPLDT77=BPBEGDT-0.00001
"RTN","BPSNCPD6",143,0)
 F  S BPLDT77=+$O(^BPS(9002313.77,"E",BPLDT77)) Q:BPLDT77=0!(BPLDT77>BPENDDT)  D
"RTN","BPSNCPD6",144,0)
 . S BP77=0 F  S BP77=$O(^BPS(9002313.77,"E",BPLDT77,BP77)) Q:+BP77=0  D
"RTN","BPSNCPD6",145,0)
 . . S BPRXRF=$P($G(^BPS(9002313.77,BP77,0)),U,1,2)
"RTN","BPSNCPD6",146,0)
 . . S BP59=$$IEN59^BPSOSRX(+BPRXRF,$P(BPRXRF,U,2)) ;calculate BPS TRANSACTION ien (even if it doesn't exist yet)
"RTN","BPSNCPD6",147,0)
 . . I $D(@BPTMP@(BP59)) Q  ;don't create an entry if the claim is already there
"RTN","BPSNCPD6",148,0)
 . . S @BPTMP@(BP59)=(BPLDT77\1)_"^77-"
"RTN","BPSNCPD6",149,0)
 Q
"RTN","BPSNCPD6",150,0)
 ;
"RTN","BPSNCPDP")
0^14^B76105402
"RTN","BPSNCPDP",1,0)
BPSNCPDP ;BHAM ISC/LJE/SS - API to submit a claim to ECME ;11/7/07  16:58
"RTN","BPSNCPDP",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,4,2,5,6,7,8**;JUN 2004;Build 29
"RTN","BPSNCPDP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSNCPDP",4,0)
 ;
"RTN","BPSNCPDP",5,0)
 ; For comments regarding this API, see routine BPSNCPD3.
"RTN","BPSNCPDP",6,0)
 ;
"RTN","BPSNCPDP",7,0)
EN(BRXIEN,BFILL,BFILLDAT,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPCOBIND,BPJOBFLG,BPREQIEN,BPSCLOSE,BPSPLAN,BPSPRDAT,BPSRTYPE) ;
"RTN","BPSNCPDP",8,0)
 N BPRETV,CLMSTAT,BRX,RESPONSE,BPSCOB,IEN59,DFN,PNAME,WFLG,BPLCK,BPACTTYP,BPRET,BPSQUIT
"RTN","BPSNCPDP",9,0)
 N BPNEWCLM,OLDRESP,BPPAYABL,BPSTART,BPRESLT,BPSELIG,BP77NEW,BPTODAY,BPPREVRQ,BPSSTAT
"RTN","BPSNCPDP",10,0)
 ; test not ecme active
"RTN","BPSNCPDP",11,0)
 I '$$PROD^XUPROD,'$P($G(^BPS(9002313.99,1,0)),"^",3) Q "1^ECME switch is not on for the site"
"RTN","BPSNCPDP",12,0)
 ;== Set default values and other required vars
"RTN","BPSNCPDP",13,0)
 ; default is foreground ("F")
"RTN","BPSNCPDP",14,0)
 S BPJOBFLG=$S($G(BPJOBFLG)="":"F",1:$G(BPJOBFLG))
"RTN","BPSNCPDP",15,0)
 S RESPONSE="",CLMSTAT="",BP77NEW=0
"RTN","BPSNCPDP",16,0)
 S BPLCK=0 ;0 - default for "B" jobs
"RTN","BPSNCPDP",17,0)
 S REVREAS=$G(REVREAS),DURREC=$G(DURREC),BPSCLARF=$G(BPSCLARF),BPSAUTH=$G(BPSAUTH),BPOVRIEN=$G(BPOVRIEN)
"RTN","BPSNCPDP",18,0)
 ; BPCOBIND will be used as a flag to indicate the following
"RTN","BPSNCPDP",19,0)
 ;    If BPCOBIND>0 then the API is called for the particular COB claim
"RTN","BPSNCPDP",20,0)
 ;    if BPCOBIND=0 then the API is called for a whole RX/RF - Outpatient Pharmacy doesn't care about COB
"RTN","BPSNCPDP",21,0)
 ;         when the pharmacy user enters, deletes or edits RX/refills
"RTN","BPSNCPDP",22,0)
 S BPCOBIND=+$G(BPCOBIND)
"RTN","BPSNCPDP",23,0)
 ;
"RTN","BPSNCPDP",24,0)
 ; BPSCOB variable will be used to store COB value (default is PRIMARY) in this function only
"RTN","BPSNCPDP",25,0)
 S BPSCOB=$S(BPCOBIND>0:BPCOBIND,1:1)
"RTN","BPSNCPDP",26,0)
 ; default is original fill
"RTN","BPSNCPDP",27,0)
 I '$G(BFILL) S BFILL=0
"RTN","BPSNCPDP",28,0)
 ; Get prescription number
"RTN","BPSNCPDP",29,0)
 S BRX=$$RXAPI1^BPSUTIL1(BRXIEN,.01,"I")
"RTN","BPSNCPDP",30,0)
 ; Make sure fill date is not in the future or empty
"RTN","BPSNCPDP",31,0)
 S BPTODAY=$$TODAY^BPSOSRX5() I '$G(BFILLDAT)!($G(BFILLDAT)>BPTODAY) S BFILLDAT=BPTODAY
"RTN","BPSNCPDP",32,0)
 ; Get the NDC if it was not passed in
"RTN","BPSNCPDP",33,0)
 I $G(BILLNDC)="" S BILLNDC=$$GETNDC^PSONDCUT(BRXIEN,BFILL)
"RTN","BPSNCPDP",34,0)
 ; Patient Info
"RTN","BPSNCPDP",35,0)
 S DFN=$$RXAPI1^BPSUTIL1(BRXIEN,2,"I"),PNAME=$$GET1^DIQ(2,DFN,.01)
"RTN","BPSNCPDP",36,0)
 ;
"RTN","BPSNCPDP",37,0)
 ;== Check parameters and vars
"RTN","BPSNCPDP",38,0)
 S BPRETV=$$CHCKPAR^BPSOSRX8($G(BRXIEN),$G(BRX),$G(BWHERE),$G(DFN),$G(PNAME),$G(BILLNDC)) I +BPRETV=0 S CLMSTAT=$P(BPRETV,U,2),RESPONSE=5 G END
"RTN","BPSNCPDP",39,0)
 ;
"RTN","BPSNCPDP",40,0)
 ; Calculate IEN59
"RTN","BPSNCPDP",41,0)
 S IEN59=$$IEN59^BPSOSRX(BRXIEN,BFILL,BPSCOB) I IEN59="" S CLMSTAT="BPS Transaction IEN could not be calculated",RESPONSE=1 G END
"RTN","BPSNCPDP",42,0)
 ;
"RTN","BPSNCPDP",43,0)
 ;populate COB fields from BPS TRANSACTION to resubmit secondary claims from the User Screen
"RTN","BPSNCPDP",44,0)
 ;if $G(BPSPRDAT("NEW COB DATA"))=1 then the resubmit requested from the BPS COB PROCESS SECOND TRICARE and the user can change the data
"RTN","BPSNCPDP",45,0)
 I BPSCOB=2,$$ACTTYPE^BPSOSRX5(BWHERE)="UC",'$G(BPSPRDAT("NEW COB DATA")) N:$D(BPSRTYPE)=0 BPSRTYPE N:$D(BPSPLAN)=0 BPSPLAN N:$D(BPSPRDAT)=0 BPSPRDAT I $$RES2NDCL^BPSPRRX6(IEN59,.BPSPLAN,.BPSPRDAT,.BPSRTYPE)=0 D  G END
"RTN","BPSNCPDP",46,0)
 . S CLMSTAT="Insufficient data to resubmit the secondary claim, use Process Secondary/Tricare Rx to ECME option.",RESPONSE=5
"RTN","BPSNCPDP",47,0)
 ;
"RTN","BPSNCPDP",48,0)
 ; Initialize log
"RTN","BPSNCPDP",49,0)
 D LOG^BPSNCPD6(IEN59,$T(+0)_"-Start of claim","DT")
"RTN","BPSNCPDP",50,0)
 D LOG^BPSNCPD6(IEN59,$T(+0)_"-Job flag = "_BPJOBFLG_$S(BPJOBFLG="B":" BPS REQUEST ien = "_$G(BPREQIEN),1:""))
"RTN","BPSNCPDP",51,0)
 ;
"RTN","BPSNCPDP",52,0)
 ; Check if we need to print the messages to the screen (WFLG=1 : YES)
"RTN","BPSNCPDP",53,0)
 S WFLG=0
"RTN","BPSNCPDP",54,0)
 S:BPJOBFLG="F" WFLG=$$PRINTSCR^BPSOSRX8(BWHERE)
"RTN","BPSNCPDP",55,0)
 ;
"RTN","BPSNCPDP",56,0)
 ;== LOCK RX/RF - only one action can be scheduled for the RX/RF at a time
"RTN","BPSNCPDP",57,0)
 ;ONLY if BPJOBFLG="F" job! "B" jobs are called from REQST99^BPSOSRX5 and RX/RF should be already locked by this point
"RTN","BPSNCPDP",58,0)
 ; get the lock for the RX/RF - so the STATUS99 cannot complete the request without activaing NEXT REQUEST
"RTN","BPSNCPDP",59,0)
 I BPJOBFLG="F" S BPLCK=$$LOCKRF^BPSOSRX(BRXIEN,BFILL,10,$G(IEN59),$T(+0))
"RTN","BPSNCPDP",60,0)
 I BPJOBFLG="F" I 'BPLCK S RESPONSE=4,CLMSTAT="BRXIEN,BFILL Locked" G END  ;two (or more) requests for the same RX/refill (like payment and reverse)
"RTN","BPSNCPDP",61,0)
 ;
"RTN","BPSNCPDP",62,0)
 ;== Determine the action type
"RTN","BPSNCPDP",63,0)
 ;if foreground job then can be C,U and UC actions types
"RTN","BPSNCPDP",64,0)
 S BPACTTYP=""
"RTN","BPSNCPDP",65,0)
 I BPJOBFLG="F" S BPACTTYP=$$ACTTYPE^BPSOSRX5(BWHERE)
"RTN","BPSNCPDP",66,0)
 ;if background/unqueueing job then only two action types are allowed - C and U
"RTN","BPSNCPDP",67,0)
 I BPJOBFLG="B" D  I RESPONSE=5 G END
"RTN","BPSNCPDP",68,0)
 . S BPACTTYP=$P($G(^BPS(9002313.77,+$G(BPREQIEN),1)),U,4)
"RTN","BPSNCPDP",69,0)
 . I BPACTTYP="" S RESPONSE=5,CLMSTAT="Unknown Action type in BPS REQUEST ien="_BPREQIEN
"RTN","BPSNCPDP",70,0)
 ;
"RTN","BPSNCPDP",71,0)
 ;code to handle "general" submit/reversal as opposed to processing a claim for a specific payer sequence (primary, secondary)
"RTN","BPSNCPDP",72,0)
 ;ECME and IB always know the payer sequence and always should set the proper BPCOBIND parameter
"RTN","BPSNCPDP",73,0)
 ;thus if BPCOBIND=0 then the API is called by Pharmacy. If so then the CLAIM action (not reversal) should be done for primary only.
"RTN","BPSNCPDP",74,0)
 S BPSQUIT=0
"RTN","BPSNCPDP",75,0)
 I BPCOBIND=0 D  I BPSQUIT=1 S CLMSTAT="The secondary claim needs to be reversed first.",RESPONSE=5 G END
"RTN","BPSNCPDP",76,0)
 . I BPACTTYP=""!(BPACTTYP="C") S BPCOBIND=1 Q
"RTN","BPSNCPDP",77,0)
 . ;code to handle "general" reversal
"RTN","BPSNCPDP",78,0)
 . N BPSECLM
"RTN","BPSNCPDP",79,0)
 . ;check if there is the secondary e-claim
"RTN","BPSNCPDP",80,0)
 . S BPSECLM=$$FINDECLM^BPSPRRX5(BRXIEN,BFILL,2)
"RTN","BPSNCPDP",81,0)
 . ;quit if we have secondary claim and it is payable or in progress - it needs to be reversed first
"RTN","BPSNCPDP",82,0)
 . I BPSECLM=1!(BPSECLM=3) S BPSQUIT=1
"RTN","BPSNCPDP",83,0)
 . S BPCOBIND=1
"RTN","BPSNCPDP",84,0)
 ;
"RTN","BPSNCPDP",85,0)
 ;== IF BPJOBFLG="F" THEN determine if there are any scheduled/active/in process requests for the RX/RF 
"RTN","BPSNCPDP",86,0)
 ;CHKREQST^BPSOSRX7 returns
"RTN","BPSNCPDP",87,0)
 ; negative number^message : cannot be accepted for some reason 
"RTN","BPSNCPDP",88,0)
 ; 0 : can be accepted because there are NO requests for this RX/RF, 
"RTN","BPSNCPDP",89,0)
 ;      we will create a new record in BPS REQUEST for it and ACTIVATE it.
"RTN","BPSNCPDP",90,0)
 ; 1 : there are ACTIVATED/IN PROCESS requests already for this RX/RF
"RTN","BPSNCPDP",91,0)
 S BPPREVRQ="-10^Background queuing." ;default
"RTN","BPSNCPDP",92,0)
 I BPJOBFLG="F" D  I BPPREVRQ'=0 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",93,0)
 . S BPPREVRQ=$$CHKREQST^BPSOSRX7(BRXIEN,BFILL,.BPRESLT)
"RTN","BPSNCPDP",94,0)
 . D LOG^BPSNCPD6(IEN59,$T(+0)_"-CHKREQ^BPSOSRX7 result: "_BPPREVRQ)
"RTN","BPSNCPDP",95,0)
 . ;if error
"RTN","BPSNCPDP",96,0)
 . I BPPREVRQ<0 S RESPONSE=4,CLMSTAT=$P(BPPREVRQ,U,2) D LOG^BPSNCPD6(IEN59,$T(+0)_"- - Cannot be accepted because of issues with already scheduled requests")
"RTN","BPSNCPDP",97,0)
 . ;if there are prior requests for the RX/RF in the queue already then schedule additional request(s) 
"RTN","BPSNCPDP",98,0)
 . ;for the future and quit since we do not know the result of prior requests 
"RTN","BPSNCPDP",99,0)
 . I BPPREVRQ>0 D
"RTN","BPSNCPDP",100,0)
 . . D LOG^BPSNCPD6(IEN59,$T(+0)_"-There are requests in the queue, do not process - schedule additional request(s)")
"RTN","BPSNCPDP",101,0)
 . . I BPACTTYP="U" S BPRET=$$SCHREQ^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,BFILLDAT,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,IEN59,BPCOBIND,BPPREVRQ,"U",.BPSCLOSE,$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPDP",102,0)
 . . I BPACTTYP="UC" D
"RTN","BPSNCPDP",103,0)
 . . . S BPRET=$$SCHREQ^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,BFILLDAT,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,IEN59,BPCOBIND,BPPREVRQ,"U",$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPDP",104,0)
 . . . I +BPRET=0 S BPRET=$$SCHREQ^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,BFILLDAT,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,IEN59,BPCOBIND,BP77NEW,"C",$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPDP",105,0)
 . . I BPACTTYP="C" S BPRET=$$SCHREQ^BPSNCPD5(.BP77NEW,BRXIEN,BFILL,BFILLDAT,BWHERE,$G(BILLNDC),REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,IEN59,BPCOBIND,BPPREVRQ,"C",$G(BPSRTYPE),$G(BPSPLAN),.BPSPRDAT)
"RTN","BPSNCPDP",106,0)
 . . I +BPRET=0 S RESPONSE=0,CLMSTAT=$P(BPRET,U,2) D LOG^BPSNCPD6(IEN59,$T(+0)_"-The new request(s) scheduled. The last one for the RX/RF now is: "_(BP77NEW)) Q
"RTN","BPSNCPDP",107,0)
 . . I +BPRET>0 S RESPONSE=+BPRET,CLMSTAT=$P(BPRET,U,2) D LOG^BPSNCPD6(IEN59,$T(+0)_"-Cannot create request(s)")
"RTN","BPSNCPDP",108,0)
 ;
"RTN","BPSNCPDP",109,0)
 ;== So we can continue only if either 
"RTN","BPSNCPDP",110,0)
 ;  BPJOBFLG="B" 
"RTN","BPSNCPDP",111,0)
 ;  or 
"RTN","BPSNCPDP",112,0)
 ;  BPJOBFLG="F" and BPPREVRQ=0
"RTN","BPSNCPDP",113,0)
 ;
"RTN","BPSNCPDP",114,0)
 ; If a new RX/RF - i.e. RX/RF was never processed thru ECME - process and quit
"RTN","BPSNCPDP",115,0)
 S BPNEWCLM=$S(+$G(^BPST(IEN59,0)):0,1:1)
"RTN","BPSNCPDP",116,0)
 ; get pre-existing RX/RFs status
"RTN","BPSNCPDP",117,0)
 ;S OLDRESP=$P($$STATUS^BPSOSRX(BRXIEN,BFILL,0),U,1)
"RTN","BPSNCPDP",118,0)
 S OLDRESP=$P($$STATUS^BPSOSRX(BRXIEN,BFILL,0,,BPSCOB),U,1)
"RTN","BPSNCPDP",119,0)
 ; check if the payer IS going to PAY according the last response
"RTN","BPSNCPDP",120,0)
 S BPPAYABL=$$PAYABLE^BPSOSRX5(OLDRESP)
"RTN","BPSNCPDP",121,0)
 ; set starttime
"RTN","BPSNCPDP",122,0)
 S BPSTART=$$STTM^BPSNCPD4()
"RTN","BPSNCPDP",123,0)
 ;  
"RTN","BPSNCPDP",124,0)
 ; if this is a new RX/RF
"RTN","BPSNCPDP",125,0)
 I BPNEWCLM D NEWCLAIM^BPSNCPD6 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",126,0)
 ;
"RTN","BPSNCPDP",127,0)
 ; if we do not have a status for the previous claim AND this is not a reversal request - treat it as a new claim 
"RTN","BPSNCPDP",128,0)
 I (OLDRESP=""),(BPACTTYP'="U") D NEWCLAIM^BPSNCPD6 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",129,0)
 ;
"RTN","BPSNCPDP",130,0)
 ; if we do not have a status for the pre-existing claim AND this is a reversal request - DO NOT reverse
"RTN","BPSNCPDP",131,0)
 I (OLDRESP=""),(BPACTTYP="U") D RVNEW^BPSNCPD6 G END
"RTN","BPSNCPDP",132,0)
 ;
"RTN","BPSNCPDP",133,0)
 ;== Further below - all claims with some response (i.e. OLDRESP]""=1)
"RTN","BPSNCPDP",134,0)
 ;
"RTN","BPSNCPDP",135,0)
 ; if Back Billing - impossible
"RTN","BPSNCPDP",136,0)
 I BWHERE="BB" D BB^BPSNCPD6 G END
"RTN","BPSNCPDP",137,0)
 ;
"RTN","BPSNCPDP",138,0)
 ; If returning to stock or deleting and the previous claim was not paid, then no reversal is needed
"RTN","BPSNCPDP",139,0)
 ;   so close the prescription and quit
"RTN","BPSNCPDP",140,0)
 ; Note: this is inherited "fuzzy logic" - 
"RTN","BPSNCPDP",141,0)
 ; it checks only two statuses to determine that the claim "was not paid"
"RTN","BPSNCPDP",142,0)
 I OLDRESP'["E PAYABLE",OLDRESP'["E REVERSAL REJECTED",(",RS,DE,"[(","_BWHERE_",")) D  G END
"RTN","BPSNCPDP",143,0)
 . D CLOSE2^BPSBUTL(BRXIEN,BFILL,BWHERE)
"RTN","BPSNCPDP",144,0)
 . S RESPONSE=3
"RTN","BPSNCPDP",145,0)
 . S CLMSTAT="Claim was not payable so it has been closed.  No ECME claim created."
"RTN","BPSNCPDP",146,0)
 . D DISPL^BPSNCPD4(WFLG,RESPONSE_U_CLMSTAT_"^D^2",$G(BPSELIG))
"RTN","BPSNCPDP",147,0)
 . D LOG^BPSNCPD6(IEN59,$T(+0)_"-"_CLMSTAT)
"RTN","BPSNCPDP",148,0)
 ;
"RTN","BPSNCPDP",149,0)
 ; Reversals for Payable claims 
"RTN","BPSNCPDP",150,0)
 ; (Note: BPSCLOSE can be used in this case only)
"RTN","BPSNCPDP",151,0)
 I BPPAYABL,BPACTTYP="U" D RVPAID^BPSNCPD6 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",152,0)
 ;
"RTN","BPSNCPDP",153,0)
 ; Reversals+Resubmits for Payable claims
"RTN","BPSNCPDP",154,0)
 I BPPAYABL,BPACTTYP="UC" D RVRSPAID^BPSNCPD6 G STATUS:((RESPONSE=0)!(RESPONSE=10)),END:RESPONSE>0
"RTN","BPSNCPDP",155,0)
 ;
"RTN","BPSNCPDP",156,0)
 ; Resubmits for Payable claims - DO NOT resubmit
"RTN","BPSNCPDP",157,0)
 I BPPAYABL,BPACTTYP="C" D RSPAID^BPSNCPD6 G END
"RTN","BPSNCPDP",158,0)
 ;
"RTN","BPSNCPDP",159,0)
 ; Reversals for Non-Payable claims - DO NOT reverse
"RTN","BPSNCPDP",160,0)
 I 'BPPAYABL,BPACTTYP="U" D RVNPAID^BPSNCPD6 G END
"RTN","BPSNCPDP",161,0)
 ;
"RTN","BPSNCPDP",162,0)
 ; Resubmits AND Reversals+Resubmits for Non-Payable claims
"RTN","BPSNCPDP",163,0)
 I 'BPPAYABL,((BPACTTYP="C")!(BPACTTYP="UC")) D RVRSNPD^BPSNCPD6 G STATUS:RESPONSE=0,END:RESPONSE>0
"RTN","BPSNCPDP",164,0)
 ;
"RTN","BPSNCPDP",165,0)
 S RESPONSE=5,CLMSTAT="Unknown error"
"RTN","BPSNCPDP",166,0)
 G END
"RTN","BPSNCPDP",167,0)
 ;
"RTN","BPSNCPDP",168,0)
 ;== Display status
"RTN","BPSNCPDP",169,0)
STATUS ;
"RTN","BPSNCPDP",170,0)
 ;if successful scheduling or/and activation of the request then make sure the background job is running
"RTN","BPSNCPDP",171,0)
 I BPJOBFLG="F",BPLCK D UNLCKRF^BPSOSRX(BRXIEN,BFILL,$G(IEN59),$T(+0)) S BPLCK=0 ;to prevent unlocking in END
"RTN","BPSNCPDP",172,0)
 I (RESPONSE=0)!(RESPONSE=10) D LOG^BPSNCPD6(IEN59,$T(+0)_"-Call RUNNING^BPSOSRX") D RUNNING^BPSOSRX()
"RTN","BPSNCPDP",173,0)
 ;if Tricare then shall print messages to the screen
"RTN","BPSNCPDP",174,0)
 I $G(BPSELIG)="T" S WFLG=1
"RTN","BPSNCPDP",175,0)
 W:WFLG !!,"Processing ",$S(BPSCOB=1:"Primary claim...",BPSCOB=2:"Secondary claim...",1:"claim with Unknown Payer Sequence...") ;this can be deleted after testing
"RTN","BPSNCPDP",176,0)
 I BPJOBFLG="F" D
"RTN","BPSNCPDP",177,0)
 . I 'WFLG H 1
"RTN","BPSNCPDP",178,0)
 . E  D STATUS^BPSNCPD1(BRXIEN,BFILL,+$G(BPPAYABL),$S(BPACTTYP="U":1,1:0),BPSTART,BWHERE,$G(BP77NEW),BPSCOB)
"RTN","BPSNCPDP",179,0)
 ;
"RTN","BPSNCPDP",180,0)
 ;== Clean up and quit
"RTN","BPSNCPDP",181,0)
END ;
"RTN","BPSNCPDP",182,0)
 I BPJOBFLG="F",BPLCK D UNLCKRF^BPSOSRX(BRXIEN,BFILL,$G(IEN59),$T(+0)) S BPLCK=0
"RTN","BPSNCPDP",183,0)
 ;if foreground AND we can't schedule request for any reason AND this is not OP - send bulletin
"RTN","BPSNCPDP",184,0)
 D:BPJOBFLG="F" SENDBUL^BPSOSRX8(RESPONSE,BWHERE,BRXIEN,BFILL,$G(SITE),$G(DFN),$G(PNAME),$G(CLMSTAT),$G(RESPONSE))
"RTN","BPSNCPDP",185,0)
 I $G(BPSELIG)="" S BPSELIG=""
"RTN","BPSNCPDP",186,0)
 ;I $G(BPSELIG)="" S BPSELIG=$$ELIG^BPSOSRX7(+$G(DFN))
"RTN","BPSNCPDP",187,0)
 ; need to look up current status and return (mm if tricare in progress)
"RTN","BPSNCPDP",188,0)
 S BPSSTAT=$S($G(BRXIEN):$P($$STATUS^BPSOSRX(BRXIEN,BFILL,,,BPSCOB),U),1:"")
"RTN","BPSNCPDP",189,0)
 I BPSELIG="T",BPSSTAT="IN PROGRESS",$G(DURREC)'="RX RELEASE-NDC CHANGE" D BULL^BPSNCPD1(BRXIEN,BFILL,$G(SITE),$G(DFN),$G(PNAME),1)
"RTN","BPSNCPDP",190,0)
 ;
"RTN","BPSNCPDP",191,0)
 S:'$D(RESPONSE) RESPONSE=1
"RTN","BPSNCPDP",192,0)
 K BRXIEN,BFILL,BFILLDAT,BWHERE,MOREDATA
"RTN","BPSNCPDP",193,0)
 I $G(IEN59) D
"RTN","BPSNCPDP",194,0)
 . N MSG
"RTN","BPSNCPDP",195,0)
 . S MSG="Foreground Process Complete-RESPONSE="_$G(RESPONSE)
"RTN","BPSNCPDP",196,0)
 . I $G(RESPONSE)'=0 S MSG=MSG_", CLMSTAT="_$G(CLMSTAT)
"RTN","BPSNCPDP",197,0)
 . D LOG^BPSNCPD6(IEN59,$T(+0)_"-"_MSG)
"RTN","BPSNCPDP",198,0)
 Q RESPONSE_U_$G(CLMSTAT)_U_BPSELIG_U_BPSSTAT_U_$$CLMINFO^BPSUTIL2(+$G(IEN59))
"RTN","BPSNCPDP",199,0)
 ;
"RTN","BPSNCPDP",200,0)
 ;BPSNCPDP
"RTN","BPSOS6M")
0^6^B11551065
"RTN","BPSOS6M",1,0)
BPSOS6M ;BHAM ISC/FCS/DRS - Print log of claim ;06/01/2004
"RTN","BPSOS6M",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8**;JUN 2004;Build 29
"RTN","BPSOS6M",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOS6M",4,0)
 ;
"RTN","BPSOS6M",5,0)
 ; Display the BPS Log for a given BPS Transaction
"RTN","BPSOS6M",6,0)
 Q
"RTN","BPSOS6M",7,0)
CLAIMLOG(IEN59) ;EP - from BPSSCRDV
"RTN","BPSOS6M",8,0)
 ;
"RTN","BPSOS6M",9,0)
 I '$G(IEN59) Q
"RTN","BPSOS6M",10,0)
 ;
"RTN","BPSOS6M",11,0)
 ; Get Device
"RTN","BPSOS6M",12,0)
 N POP
"RTN","BPSOS6M",13,0)
 D ^%ZIS
"RTN","BPSOS6M",14,0)
 I $G(POP) Q
"RTN","BPSOS6M",15,0)
 U IO
"RTN","BPSOS6M",16,0)
 ;
"RTN","BPSOS6M",17,0)
 ; Determine if this is a terminal
"RTN","BPSOS6M",18,0)
 N BPSCR S BPSCR=$S($E($G(IOST),1,2)="C-":1,1:0)
"RTN","BPSOS6M",19,0)
 ;
"RTN","BPSOS6M",20,0)
 ; Read BPS Transaction into the local variable
"RTN","BPSOS6M",21,0)
 N REC,X,X1,X2 M REC=^BPST(IEN59)
"RTN","BPSOS6M",22,0)
 N I F I=0:1:2 I '$D(REC(I)) S REC(I)=""
"RTN","BPSOS6M",23,0)
 ;
"RTN","BPSOS6M",24,0)
 ; Display Header
"RTN","BPSOS6M",25,0)
 I BPSCR W @IOF
"RTN","BPSOS6M",26,0)
 W "Pharmacy ECME Log of activity for one prescription",!
"RTN","BPSOS6M",27,0)
 ;
"RTN","BPSOS6M",28,0)
 ; Prescription and Transaction Info
"RTN","BPSOS6M",29,0)
 W "Internal Prescription #",$P(REC(1),U,11)
"RTN","BPSOS6M",30,0)
 W "  Fill #",+$P(REC(1),U)
"RTN","BPSOS6M",31,0)
 W !,"VA Prescription #",$$RXAPI1^BPSUTIL1(+$P(REC(1),U,11),.01)
"RTN","BPSOS6M",32,0)
 W !,"Transaction #",IEN59
"RTN","BPSOS6M",33,0)
 ;
"RTN","BPSOS6M",34,0)
 ; Patient
"RTN","BPSOS6M",35,0)
 W !,"Patient: "
"RTN","BPSOS6M",36,0)
 S X=$P(REC(0),U,6) I X]"" S X=$P($G(^DPT(X,0)),U) W X
"RTN","BPSOS6M",37,0)
 ;
"RTN","BPSOS6M",38,0)
 ; Insurance
"RTN","BPSOS6M",39,0)
 W !,"Insurance: "_$$INSNAME^BPSSCRU6(IEN59)
"RTN","BPSOS6M",40,0)
 ;
"RTN","BPSOS6M",41,0)
 ; RX Coord of Benefits
"RTN","BPSOS6M",42,0)
 W !,"RX Coord of Benefits: "
"RTN","BPSOS6M",43,0)
 S X=$P(REC(0),U,14) S X=$S($G(X)>0:$G(X),1:1)
"RTN","BPSOS6M",44,0)
 W $S(X=2:"Secondary",X=3:"Tertiary",1:"Primary")
"RTN","BPSOS6M",45,0)
 ;
"RTN","BPSOS6M",46,0)
 ; Status and Response
"RTN","BPSOS6M",47,0)
 W !!,"Status: "
"RTN","BPSOS6M",48,0)
 S X=$P(REC(0),U,2) W X," (",$$STATI^BPSOSU(X),")"
"RTN","BPSOS6M",49,0)
 I X=99 D DISPRESP
"RTN","BPSOS6M",50,0)
 ;
"RTN","BPSOS6M",51,0)
 ; Transaction Times
"RTN","BPSOS6M",52,0)
 W !!,"Last started on " S X1=$P(REC(0),U,11) I X1]"" W $$DATETIME^BPSOSUD(X1)
"RTN","BPSOS6M",53,0)
 W !,"Last activity on " S X2=$P(REC(0),U,8) I X2]"" W $$DATETIME^BPSOSUD(X2)
"RTN","BPSOS6M",54,0)
 I X1]"",X2]"" W "  Elapsed time: " W $$TIMEDIF^BPSOSUD(X1,X2)
"RTN","BPSOS6M",55,0)
 ;
"RTN","BPSOS6M",56,0)
 ; Claim and Response
"RTN","BPSOS6M",57,0)
 W !!
"RTN","BPSOS6M",58,0)
 S X=$P(REC(0),U,4)
"RTN","BPSOS6M",59,0)
 I X="" W "No entry"
"RTN","BPSOS6M",60,0)
 E  W "See also entry `",X
"RTN","BPSOS6M",61,0)
 W " in file BPS CLAIMS (#9002313.02)",!
"RTN","BPSOS6M",62,0)
 I X]"" D
"RTN","BPSOS6M",63,0)
 . S X=$P(REC(0),U,5)
"RTN","BPSOS6M",64,0)
 . I X="" W "  but there is no entry"
"RTN","BPSOS6M",65,0)
 . E  W "  and entry `",X
"RTN","BPSOS6M",66,0)
 . W " in file BPS RESPONSES (#9002313.03)",!
"RTN","BPSOS6M",67,0)
 ;
"RTN","BPSOS6M",68,0)
 ; Log
"RTN","BPSOS6M",69,0)
 N STOP S STOP=0
"RTN","BPSOS6M",70,0)
 N EXISTS S EXISTS=$$EXISTS^BPSOSL1(IEN59)
"RTN","BPSOS6M",71,0)
 I EXISTS D  Q:$G(STOP)
"RTN","BPSOS6M",72,0)
 . W !,"Log of this claim's activity: ",!
"RTN","BPSOS6M",73,0)
 . I BPSCR S X="" D PAUSE^VALM1 I X="^" S STOP=1 Q
"RTN","BPSOS6M",74,0)
 . D PRINTLOG^BPSOSL1(IEN59,.STOP)
"RTN","BPSOS6M",75,0)
 . I $G(STOP) Q
"RTN","BPSOS6M",76,0)
 . I BPSCR D PRESSANY^BPSOSU5()
"RTN","BPSOS6M",77,0)
 I 'EXISTS D
"RTN","BPSOS6M",78,0)
 . W !,"There is no log for this claim's activity.",!
"RTN","BPSOS6M",79,0)
 . I BPSCR D PRESSANY^BPSOSU5()
"RTN","BPSOS6M",80,0)
 ;
"RTN","BPSOS6M",81,0)
 ; Close Device
"RTN","BPSOS6M",82,0)
 D ^%ZISC
"RTN","BPSOS6M",83,0)
 Q
"RTN","BPSOS6M",84,0)
 ;
"RTN","BPSOS6M",85,0)
 ; Display response info
"RTN","BPSOS6M",86,0)
DISPRESP ;
"RTN","BPSOS6M",87,0)
 N RES
"RTN","BPSOS6M",88,0)
 S RES=$P(REC(2),U)
"RTN","BPSOS6M",89,0)
 I RES=0 D  ; good, go to the claim response and see what it says
"RTN","BPSOS6M",90,0)
 . N RSP D RESPINFO^BPSOSQ4(IEN59,.RSP)
"RTN","BPSOS6M",91,0)
 . W !,"Response Status-Header: ",$G(RSP("HDR"))
"RTN","BPSOS6M",92,0)
 . W !,"Response Status-Prescription: ",$G(RSP("RSP")) ; Payable, Rejected, Captured, Duplicate
"RTN","BPSOS6M",93,0)
 . I $G(RSP("MSG"))]"" W !?10,RSP("MSG")
"RTN","BPSOS6M",94,0)
 . N I F I=1:1:$G(RSP("REJ",0)) W !?10,$G(RSP("REJ",I))
"RTN","BPSOS6M",95,0)
 E  D
"RTN","BPSOS6M",96,0)
 . W !,"Result: ",RES
"RTN","BPSOS6M",97,0)
 . I $P(REC(2),U,2)]"" W " (",$P($P(REC(2),";",1),U,2,$L(REC(2),U)),")"
"RTN","BPSOS6M",98,0)
 Q
"RTN","BPSOSC2")
0^48^B34066005
"RTN","BPSOSC2",1,0)
BPSOSC2 ;BHAM ISC/FCS/DRS - certification testing ;06/01/2004
"RTN","BPSOSC2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8**;JUN 2004;Build 29
"RTN","BPSOSC2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSC2",4,0)
 ;
"RTN","BPSOSC2",5,0)
 Q
"RTN","BPSOSC2",6,0)
 ; SETBPS - Overwrite BPS array with values from BPS Certfication file
"RTN","BPSOSC2",7,0)
 ; Input
"RTN","BPSOSC2",8,0)
 ;    ENTRY - IEN for BPS Certification (#9002313.31)
"RTN","BPSOSC2",9,0)
 ; Output
"RTN","BPSOSC2",10,0)
 ;    BPS Array - This is newed in BPSOSCA and is shared by all BPSOSC* routines
"RTN","BPSOSC2",11,0)
 ;                and others
"RTN","BPSOSC2",12,0)
SETBPS(ENTRY) ;
"RTN","BPSOSC2",13,0)
 ;
"RTN","BPSOSC2",14,0)
 I $G(ENTRY)="" Q
"RTN","BPSOSC2",15,0)
 ; If there is a payer in the Certification File, reset transaction header
"RTN","BPSOSC2",16,0)
 ;   values based on this payer sheet
"RTN","BPSOSC2",17,0)
 N XDATA
"RTN","BPSOSC2",18,0)
 I $P(^BPS(9002313.31,ENTRY,0),"^",4) D
"RTN","BPSOSC2",19,0)
 . S BPS("NCPDP","IEN")=$P(^BPS(9002313.31,ENTRY,0),"^",4)
"RTN","BPSOSC2",20,0)
 . S XDATA=$G(^BPSF(9002313.92,BPS("NCPDP","IEN"),1))
"RTN","BPSOSC2",21,0)
 . S BPS("NCPDP","Version")=$P(XDATA,U,2)
"RTN","BPSOSC2",22,0)
 . S BPS("NCPDP","# Meds/Claim")=$P(XDATA,U,3)
"RTN","BPSOSC2",23,0)
 . S BPS("NCPDP","Software Vendor/Cert ID")=$P(XDATA,U,13)
"RTN","BPSOSC2",24,0)
 ;
"RTN","BPSOSC2",25,0)
 ; DMB 11/28/2006 - Existing Code, not sure if this is needed.
"RTN","BPSOSC2",26,0)
 S BPS("Patient","SSN")=""
"RTN","BPSOSC2",27,0)
 ;
"RTN","BPSOSC2",28,0)
 ; Loop through claim header fields
"RTN","BPSOSC2",29,0)
 N A,N S A=0
"RTN","BPSOSC2",30,0)
 F  S A=$O(^BPS(9002313.31,ENTRY,1,A)) Q:'A  D
"RTN","BPSOSC2",31,0)
 . N X S X=^BPS(9002313.31,ENTRY,1,A,0)
"RTN","BPSOSC2",32,0)
 . N FIELD S FIELD=$P(^BPSF(9002313.91,$P(X,U),0),U)
"RTN","BPSOSC2",33,0)
 . D SETBPS1(FIELD,$P(X,U,2))
"RTN","BPSOSC2",34,0)
 ;
"RTN","BPSOSC2",35,0)
 ; Loop through prescription fields
"RTN","BPSOSC2",36,0)
 S N=0
"RTN","BPSOSC2",37,0)
 F  S N=$O(^BPS(9002313.31,ENTRY,2,N)) Q:'N  D
"RTN","BPSOSC2",38,0)
 . N A S A=0
"RTN","BPSOSC2",39,0)
 . F  S A=$O(^BPS(9002313.31,ENTRY,2,N,1,A)) Q:'A  D
"RTN","BPSOSC2",40,0)
 .. S X=^BPS(9002313.31,ENTRY,2,N,1,A,0)
"RTN","BPSOSC2",41,0)
 .. N FIELD S FIELD=$P(^BPSF(9002313.91,$P(X,U),0),U)
"RTN","BPSOSC2",42,0)
 .. D SETBPS1(FIELD,$P(X,U,2),N)
"RTN","BPSOSC2",43,0)
 ;
"RTN","BPSOSC2",44,0)
 ; Construct a few other fields that weren't already set
"RTN","BPSOSC2",45,0)
 ; DMB 11/28/2006 - Existing Code, not sure if this is needed.
"RTN","BPSOSC2",46,0)
 S BPS("Patient","Name")=$G(BPS("Patient","Last Name"))_","_$G(BPS("Patient","First Name"))
"RTN","BPSOSC2",47,0)
 I '$D(BPS("RX",1,"Quantity")) S BPS("RX",1,"Quantity")=$G(BPS("RX",1,"Metric Decimal Quantity"))
"RTN","BPSOSC2",48,0)
 Q
"RTN","BPSOSC2",49,0)
 ;
"RTN","BPSOSC2",50,0)
 ; Overwrite BPS array values
"RTN","BPSOSC2",51,0)
SETBPS1(FIELD,VALUE,N) ;
"RTN","BPSOSC2",52,0)
 N OK S OK=0
"RTN","BPSOSC2",53,0)
 N I F I=1:1 Q:$T(TABLE+I)[";;*"  D  Q:OK
"RTN","BPSOSC2",54,0)
 . N X S X=$T(TABLE+I)
"RTN","BPSOSC2",55,0)
 . I $P(X,";",3)'=FIELD Q
"RTN","BPSOSC2",56,0)
 . S @("BPS("_$P(X,";",4)_")=VALUE")
"RTN","BPSOSC2",57,0)
 . S OK=1
"RTN","BPSOSC2",58,0)
 Q
"RTN","BPSOSC2",59,0)
 ;
"RTN","BPSOSC2",60,0)
TABLE ;;
"RTN","BPSOSC2",61,0)
 ;;101;"NCPDP","BIN Number"
"RTN","BPSOSC2",62,0)
 ;;102;"NCPDP","Version"
"RTN","BPSOSC2",63,0)
 ;;103;"Transaction Code"
"RTN","BPSOSC2",64,0)
 ;;104;"NCPDP","PCN"
"RTN","BPSOSC2",65,0)
 ;;109;"Transaction Count"
"RTN","BPSOSC2",66,0)
 ;;110;"NCPDP","Software Vendor/Cert ID"
"RTN","BPSOSC2",67,0)
 ;;111;"NCPDP","Segment Identification"
"RTN","BPSOSC2",68,0)
 ;;201;"Site","Pharmacy #"
"RTN","BPSOSC2",69,0)
 ;;202;"Service Provider ID Qual"
"RTN","BPSOSC2",70,0)
 ;;301;"Insurer","Group #"
"RTN","BPSOSC2",71,0)
 ;;302;"Insurer","Policy #"
"RTN","BPSOSC2",72,0)
 ;;303;"Insurer","Person Code"
"RTN","BPSOSC2",73,0)
 ;;304;"Patient","DOB"
"RTN","BPSOSC2",74,0)
 ;;305;"Patient","Sex"
"RTN","BPSOSC2",75,0)
 ;;306;"Insurer","Relationship"
"RTN","BPSOSC2",76,0)
 ;;308;"Patient","Other Coverage Code"
"RTN","BPSOSC2",77,0)
 ;;307;"Customer Location"
"RTN","BPSOSC2",78,0)
 ;;309;"Eligibility Clarification Code"
"RTN","BPSOSC2",79,0)
 ;;310;"Patient","First Name"
"RTN","BPSOSC2",80,0)
 ;;311;"Patient","Last Name"
"RTN","BPSOSC2",81,0)
 ;;312;"Cardholder","First Name"
"RTN","BPSOSC2",82,0)
 ;;313;"Cardholder","Last Name"
"RTN","BPSOSC2",83,0)
 ;;322;"Patient","Street Address"
"RTN","BPSOSC2",84,0)
 ;;323;"Patient","City"
"RTN","BPSOSC2",85,0)
 ;;324;"Patient","State"
"RTN","BPSOSC2",86,0)
 ;;325;"Patient","Zip"
"RTN","BPSOSC2",87,0)
 ;;326;"Patient","Phone #"
"RTN","BPSOSC2",88,0)
 ;;331;"Patient","Patient ID Qualifier"
"RTN","BPSOSC2",89,0)
 ;;332;"Patient","SSN"
"RTN","BPSOSC2",90,0)
 ;;337;"Insurer","COB/Other Payments Counter"
"RTN","BPSOSC2",91,0)
 ;;338;"Insurer","Other Payer Coverage Type"
"RTN","BPSOSC2",92,0)
 ;;339;"Insurer","Other Payer ID Qualifier"
"RTN","BPSOSC2",93,0)
 ;;340;"Insurer","Other Payer ID"
"RTN","BPSOSC2",94,0)
 ;;341;"Insurer","Other Payer Amount Paid Count"
"RTN","BPSOSC2",95,0)
 ;;342;"Insurer","Other Payer Amount Paid Qual."
"RTN","BPSOSC2",96,0)
 ;;401;"RX","Date Filled"
"RTN","BPSOSC2",97,0)
 ;;402;"RX",N,"RX Number"
"RTN","BPSOSC2",98,0)
 ;;403;"RX",N,"Refill #"
"RTN","BPSOSC2",99,0)
 ;;404;"RX",N,"Quantity"
"RTN","BPSOSC2",100,0)
 ;;405;"RX",N,"Days Supply"
"RTN","BPSOSC2",101,0)
 ;;406;"RX",N,"Compound Code"
"RTN","BPSOSC2",102,0)
 ;;407;"RX",N,"NDC"
"RTN","BPSOSC2",103,0)
 ;;408;"RX",N,"DAW"
"RTN","BPSOSC2",104,0)
 ;;409;"RX",N,"Ingredient Cost"
"RTN","BPSOSC2",105,0)
 ;;410;"RX",N,"Sales Tax"
"RTN","BPSOSC2",106,0)
 ;;411;"RX",N,"Prescriber ID"
"RTN","BPSOSC2",107,0)
 ;;412;"RX",N,"Dispensing Fee"
"RTN","BPSOSC2",108,0)
 ;;414;"RX",N,"Date Written"
"RTN","BPSOSC2",109,0)
 ;;415;"RX",N,"# Refills"
"RTN","BPSOSC2",110,0)
 ;;416;"RX",N,"Preauth #"
"RTN","BPSOSC2",111,0)
 ;;418;"RX",N,"Level of Service"
"RTN","BPSOSC2",112,0)
 ;;419;"RX",N,"Origin Code"
"RTN","BPSOSC2",113,0)
 ;;420;"RX",N,"Clarification"
"RTN","BPSOSC2",114,0)
 ;;421;"RX",N,"Primary Prescriber"
"RTN","BPSOSC2",115,0)
 ;;422;"RX",N,"Clinic ID"
"RTN","BPSOSC2",116,0)
 ;;423;"RX",N,"Basis of Cost Determination"
"RTN","BPSOSC2",117,0)
 ;;424;"RX",N,"Diagnosis Code"
"RTN","BPSOSC2",118,0)
 ;;426;"RX",N,"Usual & Customary"
"RTN","BPSOSC2",119,0)
 ;;427;"RX",N,"Prescriber Last Name"
"RTN","BPSOSC2",120,0)
 ;;429;"RX",N,"Unit Dose Indicator"
"RTN","BPSOSC2",121,0)
 ;;430;"RX",N,"Gross Amount Due"
"RTN","BPSOSC2",122,0)
 ;;431;"RX",N,"Other Payor Amount"
"RTN","BPSOSC2",123,0)
 ;;433;"RX",N,"Patient Paid Amount"
"RTN","BPSOSC2",124,0)
 ;;436;"RX",N,"Alt. Product Type"
"RTN","BPSOSC2",125,0)
 ;;438;"RX",N,"Incentive Amount"
"RTN","BPSOSC2",126,0)
 ;;439;"RX",N,"DUR","DUR Conflict Code",439
"RTN","BPSOSC2",127,0)
 ;;440;"RX",N,"DUR","DUR Intervention Code",440
"RTN","BPSOSC2",128,0)
 ;;441;"RX",N,"DUR","DUR Outcome Code",441
"RTN","BPSOSC2",129,0)
 ;;442;"RX",N,"Metric Decimal Quantity"
"RTN","BPSOSC2",130,0)
 ;;443;"RX",N,"Primary Payor Denial Date"
"RTN","BPSOSC2",131,0)
 ;;444;"RX",N,"Provider ID"
"RTN","BPSOSC2",132,0)
 ;;455;"RX",N,"Rx/Service Ref Num Qual"
"RTN","BPSOSC2",133,0)
 ;;460;"RX",N,"Quantity"
"RTN","BPSOSC2",134,0)
 ;;461;"Claim",N,"Prior Auth Type"
"RTN","BPSOSC2",135,0)
 ;;462;"Claim",N,"Prior Auth Num Sub"
"RTN","BPSOSC2",136,0)
 ;;465;"RX",N,"Provider ID"
"RTN","BPSOSC2",137,0)
 ;;466;"RX",N,"Prescriber ID Qualifier"
"RTN","BPSOSC2",138,0)
 ;;467;"RX",N,"Prescriber Location Code"
"RTN","BPSOSC2",139,0)
 ;;468;"RX",N,"Primary Care Prov ID Qual"
"RTN","BPSOSC2",140,0)
 ;;469;"RX",N,"Primary Care Prov ID"
"RTN","BPSOSC2",141,0)
 ;;470;"RX",N,"Primary Care Prov Last Name"
"RTN","BPSOSC2",142,0)
 ;;471;"Insurer","Other Payer Reject Count"
"RTN","BPSOSC2",143,0)
 ;;472;"Insurer","Other Payer Reject Code"
"RTN","BPSOSC2",144,0)
 ;;473;"RX",N,"DUR","DUR/PPS CODE COUNTER",473
"RTN","BPSOSC2",145,0)
 ;;478;"Insurer","Other Amt Claim Sub Cnt"
"RTN","BPSOSC2",146,0)
 ;;479;"Insurer","Other Amt Claim Sub Qual"
"RTN","BPSOSC2",147,0)
 ;;480;"Insurer","Other Amt Claim Submitted"
"RTN","BPSOSC2",148,0)
 ;;481;"Insurer","Flat Sales Tax Amt Sub"
"RTN","BPSOSC2",149,0)
 ;;482;"Insurer","Percentage Sales Tax Amt Sub"
"RTN","BPSOSC2",150,0)
 ;;483;"Insurer","Percent Sales Tax Rate Sub"
"RTN","BPSOSC2",151,0)
 ;;484;"Insurer","Percent Sales Tax Basis Sub"
"RTN","BPSOSC2",152,0)
 ;;498;"RX",N,"Prescriber Phone #"
"RTN","BPSOSC2",153,0)
 ;;*
"RTN","BPSOSCC")
0^36^B26147652
"RTN","BPSOSCC",1,0)
BPSOSCC ;BHAM ISC/FCS/DRS/DLF - Set up BPS() ;06/01/2004
"RTN","BPSOSCC",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2,5,8**;JUN 2004;Build 29
"RTN","BPSOSCC",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSCC",4,0)
 ;
"RTN","BPSOSCC",5,0)
 ; GETINFO - Create BPS array for non-repeating data
"RTN","BPSOSCC",6,0)
 ;    IEN59  - Pointer to BPS Transactions
"RTN","BPSOSCC",7,0)
 ;    IEN5902 - IEN for Insurance multiple of BPS Transactions
"RTN","BPSOSCC",8,0)
 ;
"RTN","BPSOSCC",9,0)
 ; Note that the BPS array is shared by all of the BPSOSC* routines and
"RTN","BPSOSCC",10,0)
 ;  is newed by BPSOSCA
"RTN","BPSOSCC",11,0)
 ; Note that VAINFO is newed/set in BPSOSCB
"RTN","BPSOSCC",12,0)
 Q
"RTN","BPSOSCC",13,0)
GETINFO(IEN59,IEN5902) ; EP - BPSOSCB
"RTN","BPSOSCC",14,0)
 ; Check parameters
"RTN","BPSOSCC",15,0)
 N BPPAYSEQ
"RTN","BPSOSCC",16,0)
 S BPPAYSEQ=$$COB59^BPSUTIL2(IEN59)
"RTN","BPSOSCC",17,0)
 I $G(IEN59)="" Q
"RTN","BPSOSCC",18,0)
 I $G(IEN5902)="" Q
"RTN","BPSOSCC",19,0)
 ;
"RTN","BPSOSCC",20,0)
 ; New variables and parse parameter data
"RTN","BPSOSCC",21,0)
 N RXIEN,IENS,XDATA,PHARMACY,DFN,VAPA,VADM,SITE,NPI
"RTN","BPSOSCC",22,0)
 ;
"RTN","BPSOSCC",23,0)
 ; Setup Prescription IEN and IENS for transaction multiple
"RTN","BPSOSCC",24,0)
 S RXIEN=$P(IEN59,".",1)
"RTN","BPSOSCC",25,0)
 S IENS=IEN5902_","_IEN59_","
"RTN","BPSOSCC",26,0)
 ;
"RTN","BPSOSCC",27,0)
 ; Site Information
"RTN","BPSOSCC",28,0)
 S PHARMACY=$P(^BPST(IEN59,1),U,7)
"RTN","BPSOSCC",29,0)
 S XDATA=^BPS(9002313.56,PHARMACY,0)
"RTN","BPSOSCC",30,0)
 S BPS("Site","NABP #")=$P(XDATA,U,2)
"RTN","BPSOSCC",31,0)
 S BPS("Site","Default DEA #")=$P(XDATA,U,3)
"RTN","BPSOSCC",32,0)
 S BPS("Site","Medicaid Pharmacy #")="" ; Referenced in payer sheet special code
"RTN","BPSOSCC",33,0)
 S BPS("Site","Pharmacy #")=BPS("Site","NABP #")
"RTN","BPSOSCC",34,0)
 S SITE=$P($G(^BPST(IEN59,1)),U,4)
"RTN","BPSOSCC",35,0)
 S NPI=$$NPI^BPSNPI("Pharmacy_ID",SITE)
"RTN","BPSOSCC",36,0)
 I +NPI=-1 S NPI=""
"RTN","BPSOSCC",37,0)
 S BPS("Site","NPI")=$P(NPI,U,1)
"RTN","BPSOSCC",38,0)
 ;
"RTN","BPSOSCC",39,0)
 ; Transaction Header Data
"RTN","BPSOSCC",40,0)
 S BPS("NCPDP","IEN")=$G(VAINFO(9002313.59902,IENS,902.02,"I"))
"RTN","BPSOSCC",41,0)
 S BPS("NCPDP","BIN Number")=$G(VAINFO(9002313.59902,IENS,902.03,"I"))
"RTN","BPSOSCC",42,0)
 S BPS("NCPDP","PCN")=$G(VAINFO(9002313.59902,IENS,902.04,"I"))
"RTN","BPSOSCC",43,0)
 I BPS("NCPDP","IEN")="" D IMPOSS^BPSOSUE("P","TI","Payer Sheet pointer missing from multiple",,1,$T(+0))
"RTN","BPSOSCC",44,0)
 I BPS("NCPDP","IEN") S XDATA=$G(^BPSF(9002313.92,BPS("NCPDP","IEN"),1))
"RTN","BPSOSCC",45,0)
 I XDATA="" D IMPOSS^BPSOSUE("DB","TI","VA - Payer sheet info missing.",,2,$T(+0))
"RTN","BPSOSCC",46,0)
 I BPS("NCPDP","BIN Number")="" S BPS("NCPDP","BIN Number")=$P(XDATA,U,1)
"RTN","BPSOSCC",47,0)
 S BPS("NCPDP","Version")=$P(XDATA,U,2)
"RTN","BPSOSCC",48,0)
 S BPS("NCPDP","# Meds/Claim")=$P(XDATA,U,3)
"RTN","BPSOSCC",49,0)
 S BPS("NCPDP","Software Vendor/Cert ID")=$G(VAINFO(9002313.59902,IENS,902.18,"I"))
"RTN","BPSOSCC",50,0)
 ;
"RTN","BPSOSCC",51,0)
 ; Patient Data
"RTN","BPSOSCC",52,0)
 S DFN=$P(^BPST(IEN59,0),U,6)
"RTN","BPSOSCC",53,0)
 I 'DFN D IMPOSS^BPSOSUE("DB","TI","DFN",,,$T(+0))
"RTN","BPSOSCC",54,0)
 I DFN,'$D(^DPT(DFN,0)) D IMPOSS^BPSOSUE("DB","TI","^DPT(DFN)",,,$T(+0))
"RTN","BPSOSCC",55,0)
 D DEM^VADPT,ADD^VADPT
"RTN","BPSOSCC",56,0)
 S BPS("Patient","IEN")=DFN
"RTN","BPSOSCC",57,0)
 S BPS("Patient","Name")=$G(VADM(1))
"RTN","BPSOSCC",58,0)
 S BPS("Patient","Sex")=$P($G(VADM(5)),"^",1)
"RTN","BPSOSCC",59,0)
 S BPS("Patient","DOB")=$P($G(VADM(3)),"^",1)
"RTN","BPSOSCC",60,0)
 S BPS("Patient","DOB")=($E(BPS("Patient","DOB"),1,3)+1700)_$E(BPS("Patient","DOB"),4,7)
"RTN","BPSOSCC",61,0)
 S BPS("Patient","SSN")=$P($G(VADM(2)),"^",1)
"RTN","BPSOSCC",62,0)
 S BPS("Patient","State")=$P($G(VAPA(5)),"^",1)
"RTN","BPSOSCC",63,0)
 I BPS("Patient","State")'="" S BPS("Patient","State")=$P($G(^DIC(5,BPS("Patient","State"),0)),"^",2)
"RTN","BPSOSCC",64,0)
 S BPS("Patient","Street Address")=$G(VAPA(1))
"RTN","BPSOSCC",65,0)
 S BPS("Patient","City")=$G(VAPA(4))
"RTN","BPSOSCC",66,0)
 S BPS("Patient","Zip")=$G(VAPA(6))
"RTN","BPSOSCC",67,0)
 S BPS("Patient","Phone #")=$TR($P($G(VAPA(8)),"^",1),"()-/*# ")
"RTN","BPSOSCC",68,0)
 S BPS("Patient","Plan ID")=$$GET1^DIQ(2.312,"1,"_DFN_",",.18)
"RTN","BPSOSCC",69,0)
 ;
"RTN","BPSOSCC",70,0)
 ; Insurer Data
"RTN","BPSOSCC",71,0)
 S BPS("Insurer","IEN")=$G(VAINFO(9002313.59902,IENS,.01,"I"))
"RTN","BPSOSCC",72,0)
 S BPS("Insurer","Relationship")=$G(VAINFO(9002313.59902,IENS,902.07,"I"))
"RTN","BPSOSCC",73,0)
 S BPS("Insurer","Administrative Fee")=$G(VAINFO(9002313.59902,IENS,902.16,"I"))
"RTN","BPSOSCC",74,0)
 I BPS("Insurer","Administrative Fee")'="",BPS("Insurer","Administrative Fee")'=0 S BPS("Insurer","Other Amt Claim Sub Qual")="04"
"RTN","BPSOSCC",75,0)
 E  S BPS("Insurer","Other Amt Claim Sub Qual")=""
"RTN","BPSOSCC",76,0)
 I BPS("Insurer","Relationship")="" S BPS("Insurer","Relationship")=0 ;if not there, mark it as unspecified.
"RTN","BPSOSCC",77,0)
 S BPS("Patient","Primary Care Prov Location Code")=$G(VAINFO(9002313.59902,IENS,902.11,"I"))
"RTN","BPSOSCC",78,0)
 S BPS("Insurer","Person Code")=$S(BPS("Insurer","Relationship")=1:"01",BPS("Insurer","Relationship")=2:"02",BPS("Insurer","Relationship")=3:03,1:"")
"RTN","BPSOSCC",79,0)
 S BPS("Insurer","Group #")=$G(VAINFO(9002313.59902,IENS,902.05,"I"))
"RTN","BPSOSCC",80,0)
 S BPS("Insurer","Policy #")=$G(VAINFO(9002313.59902,IENS,902.06,"I"))  ;CARDHOLDER ID
"RTN","BPSOSCC",81,0)
 S BPS("Insurer","Full Policy #")=BPS("Insurer","Policy #")
"RTN","BPSOSCC",82,0)
 S:'$D(BPS("Insurer","Percent Sales Tax Rate Sub")) BPS("Insurer","Percent Sales Tax Rate Sub")=""
"RTN","BPSOSCC",83,0)
 S:'$D(BPS("Insurer","Percent Sales Tax Basis Sub")) BPS("Insurer","Percent Sales Tax Basis Sub")=""
"RTN","BPSOSCC",84,0)
 S BPS("Insurer","Percentage Sales Tax Amt Sub")=0
"RTN","BPSOSCC",85,0)
 S BPS("Insurer","Flat Sales Tax Amount Sub")=0
"RTN","BPSOSCC",86,0)
 ;
"RTN","BPSOSCC",87,0)
 ; DMB - The next pair of lines may seem odd.  However, there was an error in the IHS code, so
"RTN","BPSOSCC",88,0)
 ;   this array element was always set to "".  I fixed the code, but do not want to implement the fix
"RTN","BPSOSCC",89,0)
 ;   until it can be determined whether the fix will not cause rejects
"RTN","BPSOSCC",90,0)
 S BPS("Insurer","Facility ID")=$$RXAPI1^BPSUTIL1(RXIEN,5,"E")
"RTN","BPSOSCC",91,0)
 S BPS("Insurer","Facility ID")=""
"RTN","BPSOSCC",92,0)
 ;
"RTN","BPSOSCC",93,0)
 ; Cardholder Data
"RTN","BPSOSCC",94,0)
 S BPS("Cardholder","First Name")=$G(VAINFO(9002313.59902,IENS,902.08,"I"))
"RTN","BPSOSCC",95,0)
 S BPS("Cardholder","Last Name")=$G(VAINFO(9002313.59902,IENS,902.09,"I"))
"RTN","BPSOSCC",96,0)
 S BPS("Home Plan")=$G(VAINFO(9002313.59902,IENS,902.11,"I"))
"RTN","BPSOSCC",97,0)
 ;
"RTN","BPSOSCC",98,0)
 ;set additional fields for secondary claim
"RTN","BPSOSCC",99,0)
 I BPPAYSEQ>1 D
"RTN","BPSOSCC",100,0)
 . N BPSECDAT
"RTN","BPSOSCC",101,0)
 . S BPSECDAT=$G(^BPST(IEN59,12))
"RTN","BPSOSCC",102,0)
 . S BPS("Patient","Other Coverage Code")=$P(BPSECDAT,U,5) ;NCPDP field 308-C8
"RTN","BPSOSCC",103,0)
 . Q
"RTN","BPSOSCC",104,0)
 Q
"RTN","BPSOSCC",105,0)
 ;
"RTN","BPSOSCD")
0^47^B50726570
"RTN","BPSOSCD",1,0)
BPSOSCD ;BHAM ISC/FCS/DRS/DLF - Set BPS() "RX" nodes for current medication ;06/01/2004
"RTN","BPSOSCD",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2,5,7,8**;JUN 2004;Build 29
"RTN","BPSOSCD",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSCD",4,0)
 ;
"RTN","BPSOSCD",5,0)
 Q
"RTN","BPSOSCD",6,0)
 ;----------------------------------------------------------------------
"RTN","BPSOSCD",7,0)
 ;Set BPS() "RX" nodes for current medication:
"RTN","BPSOSCD",8,0)
 ;
"RTN","BPSOSCD",9,0)
 ;Parameters:   IEN59   - Pointer to BPS Transactions
"RTN","BPSOSCD",10,0)
 ;              IEN5902 - IEN for Insurance multiple of BPS Transactions
"RTN","BPSOSCD",11,0)
 ;              MEDN    - Index number indicating what medication is
"RTN","BPSOSCD",12,0)
 ;                        being processed
"RTN","BPSOSCD",13,0)
 ;
"RTN","BPSOSCD",14,0)
 ; Note that the BPS array is shared by all of the BPSOSC* routines and
"RTN","BPSOSCD",15,0)
 ;  is newed by BPSOSCA
"RTN","BPSOSCD",16,0)
 ; Note that VAINFO is newed/set in BPSOSCB
"RTN","BPSOSCD",17,0)
 ;----------------------------------------------------------------------
"RTN","BPSOSCD",18,0)
 ; Called from BPSOSCA for every prescription in the multiple
"RTN","BPSOSCD",19,0)
MEDINFO(IEN59,IEN5902,MEDN) ;
"RTN","BPSOSCD",20,0)
 ; Verify Parameters
"RTN","BPSOSCD",21,0)
 I $G(IEN59)="" Q
"RTN","BPSOSCD",22,0)
 I $G(IEN5902)="" Q
"RTN","BPSOSCD",23,0)
 I $G(MEDN)="" Q
"RTN","BPSOSCD",24,0)
 ;
"RTN","BPSOSCD",25,0)
 ; New variables and basic setup
"RTN","BPSOSCD",26,0)
 N RXIEN,RXRFIEN,IENS,DRUGIEN,PROVIEN,RXI,FILLDT,NDC,NPI
"RTN","BPSOSCD",27,0)
 S RXIEN=$P(IEN59,".",1)
"RTN","BPSOSCD",28,0)
 S RXRFIEN=+$E($P(IEN59,".",2),1,4)
"RTN","BPSOSCD",29,0)
 S IENS=IEN5902_","_IEN59_","
"RTN","BPSOSCD",30,0)
 ;
"RTN","BPSOSCD",31,0)
 ; Get any user-entered overrides stored in BPS NCPDP OVERRIDES
"RTN","BPSOSCD",32,0)
 D OVERRIDE(IEN59,MEDN)
"RTN","BPSOSCD",33,0)
 ;
"RTN","BPSOSCD",34,0)
 ; Retrieve DUR values
"RTN","BPSOSCD",35,0)
 D DURVALUE(IEN59,MEDN)
"RTN","BPSOSCD",36,0)
 ;
"RTN","BPSOSCD",37,0)
 ; Build COB array for secondary claims
"RTN","BPSOSCD",38,0)
 I $$COB59^BPSUTIL2(IEN59)>1 D COB(IEN59,MEDN)
"RTN","BPSOSCD",39,0)
 ;
"RTN","BPSOSCD",40,0)
 ; Get Drug and Prescriber IEN
"RTN","BPSOSCD",41,0)
 S DRUGIEN=$$RXAPI1^BPSUTIL1(RXIEN,6,"I")
"RTN","BPSOSCD",42,0)
 S PROVIEN=$$RXAPI1^BPSUTIL1(RXIEN,4,"I")
"RTN","BPSOSCD",43,0)
 ;
"RTN","BPSOSCD",44,0)
 ; Basic RX info
"RTN","BPSOSCD",45,0)
 S BPS("RX",MEDN,"IEN59")=IEN59
"RTN","BPSOSCD",46,0)
 S BPS("RX",MEDN,"RX IEN")=RXIEN
"RTN","BPSOSCD",47,0)
 S BPS("RX",MEDN,"RX Number")=RXIEN
"RTN","BPSOSCD",48,0)
 S BPS("RX",MEDN,"Date Written")=$$RXAPI1^BPSUTIL1(RXIEN,1,"I")
"RTN","BPSOSCD",49,0)
 S BPS("RX",MEDN,"New/Refill")=$S(RXRFIEN="":"N",1:"R")
"RTN","BPSOSCD",50,0)
 ;
"RTN","BPSOSCD",51,0)
 ; Get/format the Service Date - It should be in BPS Transaction.  If not,
"RTN","BPSOSCD",52,0)
 ;   use the established algorithm, which is $$DOSDATE^BPSSCRRS
"RTN","BPSOSCD",53,0)
 S FILLDT=$P($G(^BPST(IEN59,12)),U,2)
"RTN","BPSOSCD",54,0)
 I FILLDT="" S FILLDT=$$DOSDATE^BPSSCRRS(RXIEN,RXRFIEN) D LOG^BPSOSL(IEN59,$T(+0)_"-Fill Date sent as "_FILLDT)
"RTN","BPSOSCD",55,0)
 S BPS("RX",MEDN,"Date Filled")=$$FMTHL7^XLFDT(FILLDT)
"RTN","BPSOSCD",56,0)
 ;
"RTN","BPSOSCD",57,0)
 ; PreAuth and Prior Auth (use same fields)
"RTN","BPSOSCD",58,0)
 S BPS("RX",MEDN,"Preauth #")=$P(^BPST(IEN59,1),U,15)_$P(^BPST(IEN59,1),U,9)
"RTN","BPSOSCD",59,0)
 S BPS("Claim",MEDN,"Prior Auth Type")=$P(^BPST(IEN59,1),U,15)
"RTN","BPSOSCD",60,0)
 S BPS("Claim",MEDN,"Prior Auth Num Sub")=$P(^BPST(IEN59,1),U,9)
"RTN","BPSOSCD",61,0)
 ;
"RTN","BPSOSCD",62,0)
 ; NDC - Get from transaction first.  If not there (which should not happen),
"RTN","BPSOSCD",63,0)
 ;   get it from the RX/Fill
"RTN","BPSOSCD",64,0)
 S NDC=$P(^BPST(IEN59,1),U,2)
"RTN","BPSOSCD",65,0)
 I NDC="" S NDC=$$GETNDC^PSONDCUT(RXIEN,RXRFIEN) D LOG^BPSOSL(IEN59,$T(+0)_"-NDC sent as "_NDC)
"RTN","BPSOSCD",66,0)
 S BPS("RX",MEDN,"NDC")=NDC
"RTN","BPSOSCD",67,0)
 ;
"RTN","BPSOSCD",68,0)
 ; Prescription Data
"RTN","BPSOSCD",69,0)
 S BPS("RX",MEDN,"# Refills")=$$RXAPI1^BPSUTIL1(RXIEN,9,"I")
"RTN","BPSOSCD",70,0)
 S BPS("RX",MEDN,"Refill #")=+RXRFIEN
"RTN","BPSOSCD",71,0)
 ;
"RTN","BPSOSCD",72,0)
 ; Prescription Data dependent on original vs. refill
"RTN","BPSOSCD",73,0)
 I 'RXRFIEN D  ; first fill
"RTN","BPSOSCD",74,0)
 . S BPS("RX",MEDN,"Days Supply")=$$RXAPI1^BPSUTIL1(RXIEN,8,"I")
"RTN","BPSOSCD",75,0)
 . S BPS("RX",MEDN,"DAW")=$$RXAPI1^BPSUTIL1(RXIEN,81,"I")
"RTN","BPSOSCD",76,0)
 E  D  ; refill
"RTN","BPSOSCD",77,0)
 . S BPS("RX",MEDN,"Days Supply")=$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,+RXRFIEN,1.1,"I")
"RTN","BPSOSCD",78,0)
 . S BPS("RX",MEDN,"DAW")=$$RXSUBF1^BPSUTIL1(RXIEN,52,52.1,+RXRFIEN,81,"I")
"RTN","BPSOSCD",79,0)
 ;
"RTN","BPSOSCD",80,0)
 ; Provider Info
"RTN","BPSOSCD",81,0)
 S BPS("RX",MEDN,"Prescriber IEN")=+PROVIEN
"RTN","BPSOSCD",82,0)
 I PROVIEN'="" D
"RTN","BPSOSCD",83,0)
 . S BPS("RX",MEDN,"Prescriber Name")=$$GET1^DIQ(200,+PROVIEN,.01)
"RTN","BPSOSCD",84,0)
 . S BPS("RX",MEDN,"Prescriber Phone #")=$$ACPHONE^IBNCPDPI() ; Agent Cashier Phone Number)
"RTN","BPSOSCD",85,0)
 . I ^BPS(9002313.99,1,"CERTIFIER")=DUZ S BPS("RX",MEDN,"Prescriber DEA #")=$G(BPS("RX",1,"Provider ID"))
"RTN","BPSOSCD",86,0)
 . S BPS("RX",MEDN,"Prescriber DEA #")=$$GET1^DIQ(200,+PROVIEN,53.2)
"RTN","BPSOSCD",87,0)
 . S BPS("RX",MEDN,"Prescriber CAID #")=""
"RTN","BPSOSCD",88,0)
 . S BPS("RX",MEDN,"Prescriber UPIN #")=""
"RTN","BPSOSCD",89,0)
 . S BPS("RX",MEDN,"Prescriber Billing Location")=""
"RTN","BPSOSCD",90,0)
 . S NPI=$$NPI^BPSNPI("Individual_ID",+PROVIEN)
"RTN","BPSOSCD",91,0)
 . I +NPI=-1 S NPI=""
"RTN","BPSOSCD",92,0)
 . S BPS("RX",MEDN,"Prescriber NPI")=$P(NPI,U,1)
"RTN","BPSOSCD",93,0)
 . S BPS("RX",MEDN,"Primary Care Provider NPI")=$P(NPI,U,1)
"RTN","BPSOSCD",94,0)
 . S BPS("RX",MEDN,"Provider NPI")=$P(NPI,U,1)
"RTN","BPSOSCD",95,0)
 ;
"RTN","BPSOSCD",96,0)
 ; Set Prescriber ID field to individual DEA if it exists, else default DEA
"RTN","BPSOSCD",97,0)
 N %
"RTN","BPSOSCD",98,0)
 S %=$G(BPS("RX",MEDN,"Prescriber DEA #"))
"RTN","BPSOSCD",99,0)
 I %="" S %=$G(BPS("Site","Default DEA #"))
"RTN","BPSOSCD",100,0)
 S BPS("RX",MEDN,"Prescriber ID")=%
"RTN","BPSOSCD",101,0)
 ;
"RTN","BPSOSCD",102,0)
 ; Get State IDs for providers
"RTN","BPSOSCD",103,0)
 D STLIC^BPSJPAY(MEDN,PROVIEN,BPS("RX",MEDN,"Date Filled"))
"RTN","BPSOSCD",104,0)
 ;
"RTN","BPSOSCD",105,0)
 ; Origin Code
"RTN","BPSOSCD",106,0)
 N VANATURE,VAOIEN
"RTN","BPSOSCD",107,0)
 S (VANATURE,VAOIEN)="",VAOIEN=+$$RXAPI1^BPSUTIL1(RXIEN,39.3,"I"),VANATURE=$$GET1^DIQ(100.008,"1,"_VAOIEN_",","12")
"RTN","BPSOSCD",108,0)
 S BPS("RX",MEDN,"Origin Code")=$S(VANATURE="AUTO":2,VANATURE["ELECTRONIC":3,VANATURE="DUPLICATE":0,VANATURE["TELEPHONE":2,1:1)
"RTN","BPSOSCD",109,0)
 ;
"RTN","BPSOSCD",110,0)
 ;Submission Clarification Code
"RTN","BPSOSCD",111,0)
 S BPS("RX",MEDN,"Clarification")=$P($G(^BPST(IEN59,12)),U,3)
"RTN","BPSOSCD",112,0)
 ;
"RTN","BPSOSCD",113,0)
 ; Drug Info
"RTN","BPSOSCD",114,0)
 I DRUGIEN'="" D
"RTN","BPSOSCD",115,0)
 . S BPS("RX",MEDN,"Drug IEN")=DRUGIEN
"RTN","BPSOSCD",116,0)
 . S BPS("RX",MEDN,"Drug Name")=$$DRUGDIE^BPSUTIL1(DRUGIEN,.01,"E")
"RTN","BPSOSCD",117,0)
 ;
"RTN","BPSOSCD",118,0)
 ; Pricing Info
"RTN","BPSOSCD",119,0)
 S BPS("RX",MEDN,"Alt. Product Type")="03"
"RTN","BPSOSCD",120,0)
 S BPS("RX",MEDN,"Gross Amount Due")=$G(VAINFO(9002313.59902,IENS,902.15,"I"))
"RTN","BPSOSCD",121,0)
 S BPS("RX",MEDN,"Usual & Customary")=$G(VAINFO(9002313.59902,IENS,902.14,"I"))
"RTN","BPSOSCD",122,0)
 S BPS("RX",MEDN,"Basis of Cost Determination")=$G(VAINFO(9002313.59902,IENS,902.13,"I"))
"RTN","BPSOSCD",123,0)
 ;
"RTN","BPSOSCD",124,0)
 ; More pricing info
"RTN","BPSOSCD",125,0)
 N PRICING
"RTN","BPSOSCD",126,0)
 S PRICING=^BPST(IEN59,5)
"RTN","BPSOSCD",127,0)
 S BPS("RX",MEDN,"Quantity")=$P(PRICING,U) ; 01/31/2001
"RTN","BPSOSCD",128,0)
 S BPS("RX",MEDN,"Unit Price")=$P(PRICING,U,2)
"RTN","BPSOSCD",129,0)
 S BPS("RX",MEDN,"Ingredient Cost")=$J($P(PRICING,U,2),0,2)
"RTN","BPSOSCD",130,0)
 S BPS("RX",MEDN,"Dispensing Fee")=$J($P(PRICING,U,4),0,2)
"RTN","BPSOSCD",131,0)
 S BPS("Site","Dispensing Fee")=BPS("RX",MEDN,"Dispensing Fee")
"RTN","BPSOSCD",132,0)
 S BPS("RX",MEDN,"Usual & Customary")=$J($P(PRICING,U,5),0,2)
"RTN","BPSOSCD",133,0)
 S BPS("RX",MEDN,"Unit of Measure")=$P(PRICING,U,8)
"RTN","BPSOSCD",134,0)
 I $G(BPS("NCPDP","Add Disp. Fee to Ingr. Cost")) D
"RTN","BPSOSCD",135,0)
 . S BPS("RX",MEDN,"Ingredient Cost")=BPS("RX",MEDN,"Ingredient Cost")+BPS("RX",MEDN,"Dispensing Fee")
"RTN","BPSOSCD",136,0)
 ;
"RTN","BPSOSCD",137,0)
 Q
"RTN","BPSOSCD",138,0)
 ;
"RTN","BPSOSCD",139,0)
 ; OVERRIDE - Retrieve OVERRIDE nodes and put into BPS array
"RTN","BPSOSCD",140,0)
 ; They will be fetched from BPS("OVERRIDE"
"RTN","BPSOSCD",141,0)
 ;   during low-level construction of the actual encoded claim packet.
"RTN","BPSOSCD",142,0)
 ; BPS("OVERRIDE",field)=value  for fields 101-401
"RTN","BPSOSCD",143,0)
 ; BPS("OVERRIDE","RX",MEDN,field) for med #N, fields 402+
"RTN","BPSOSCD",144,0)
 ; Note that if you have multiple prescriptions bundled, the
"RTN","BPSOSCD",145,0)
 ;   union of overrides from 101-401 apply to all; and if there's a
"RTN","BPSOSCD",146,0)
 ;   conflict, the last one overwrites the previous ones.
"RTN","BPSOSCD",147,0)
OVERRIDE(IEN59,MEDN) ;
"RTN","BPSOSCD",148,0)
 N IEN511 S IEN511=$P(^BPST(IEN59,1),U,13) Q:'IEN511
"RTN","BPSOSCD",149,0)
 N RETVAL S RETVAL=$$GET511^BPSOSO2(IEN511,"BPS(""OVERRIDE"")","BPS(""OVERRIDE"",""RX"","_MEDN_")")
"RTN","BPSOSCD",150,0)
 Q
"RTN","BPSOSCD",151,0)
 ;
"RTN","BPSOSCD",152,0)
 ; DURVALUE - Will read in the DUR data from the DUR multiple
"RTN","BPSOSCD",153,0)
 ;   in BPS Transactions and store the values into BPS("RX",MEDN,DUR,....)
"RTN","BPSOSCD",154,0)
 ; NOTE - unlike most values, these fields are stored by their
"RTN","BPSOSCD",155,0)
 ;   field number.  Since they are repeating, it will ease the
"RTN","BPSOSCD",156,0)
 ;   retrieval of them, when we populate the claim.
"RTN","BPSOSCD",157,0)
DURVALUE(IEN59,MEDN) ;
"RTN","BPSOSCD",158,0)
 N DUR,DCNT,DURREC
"RTN","BPSOSCD",159,0)
 ;
"RTN","BPSOSCD",160,0)
 S (DUR,DCNT)=0
"RTN","BPSOSCD",161,0)
 F  S DCNT=$O(^BPST(IEN59,13,DCNT)) Q:'+DCNT  D
"RTN","BPSOSCD",162,0)
 . S DURREC=$G(^BPST(IEN59,13,DCNT,0))
"RTN","BPSOSCD",163,0)
 . I DURREC="" Q
"RTN","BPSOSCD",164,0)
 . S DUR=DUR+1
"RTN","BPSOSCD",165,0)
 . S BPS("RX",MEDN,"DUR",DUR,473)=DUR  ;dur/pps cntr
"RTN","BPSOSCD",166,0)
 . S BPS("RX",MEDN,"DUR",DUR,439)=$P(DURREC,U,3) ;Reason Srv Cd
"RTN","BPSOSCD",167,0)
 . S BPS("RX",MEDN,"DUR",DUR,440)=$P(DURREC,U,2) ;Prof Srv Cd
"RTN","BPSOSCD",168,0)
 . S BPS("RX",MEDN,"DUR",DUR,441)=$P(DURREC,U,4) ;Result Src Cd
"RTN","BPSOSCD",169,0)
 . S BPS("RX",MEDN,"DUR",DUR,474)=""             ;Level of Effort
"RTN","BPSOSCD",170,0)
 . S BPS("RX",MEDN,"DUR",DUR,475)=""             ;Co-agent Qual
"RTN","BPSOSCD",171,0)
 . S BPS("RX",MEDN,"DUR",DUR,476)=""             ;Co-agent ID
"RTN","BPSOSCD",172,0)
 Q
"RTN","BPSOSCD",173,0)
 ;
"RTN","BPSOSCD",174,0)
COB(IEN59,MEDN) ; process the COB fields and build the COB array
"RTN","BPSOSCD",175,0)
 ;
"RTN","BPSOSCD",176,0)
 ; build array of COB secondary claim data from the BPS Transaction file - esg - 6/16/10
"RTN","BPSOSCD",177,0)
 N COBPIEN,APDIEN,REJIEN
"RTN","BPSOSCD",178,0)
 K BPS("RX",MEDN,"OTHER PAYER")
"RTN","BPSOSCD",179,0)
 ;
"RTN","BPSOSCD",180,0)
 ; Field 337-4C COB OTHER PAYMENTS COUNT (9002313.59,1204)  moved into [1] below
"RTN","BPSOSCD",181,0)
 S BPS("RX",MEDN,"OTHER PAYER",0)=$P($G(^BPST(IEN59,12)),U,4)
"RTN","BPSOSCD",182,0)
 ;
"RTN","BPSOSCD",183,0)
 S COBPIEN=0 F  S COBPIEN=$O(^BPST(IEN59,14,COBPIEN)) Q:'COBPIEN  D
"RTN","BPSOSCD",184,0)
 . S BPS("RX",MEDN,"OTHER PAYER",COBPIEN,0)=$G(^BPST(IEN59,14,COBPIEN,0))
"RTN","BPSOSCD",185,0)
 . ;
"RTN","BPSOSCD",186,0)
 . ; retrieve data from other payer amount paid multiple
"RTN","BPSOSCD",187,0)
 . S APDIEN=0 F  S APDIEN=$O(^BPST(IEN59,14,COBPIEN,1,APDIEN)) Q:'APDIEN  D
"RTN","BPSOSCD",188,0)
 .. S BPS("RX",MEDN,"OTHER PAYER",COBPIEN,"P",APDIEN,0)=$G(^BPST(IEN59,14,COBPIEN,1,APDIEN,0))
"RTN","BPSOSCD",189,0)
 .. Q
"RTN","BPSOSCD",190,0)
 . ;
"RTN","BPSOSCD",191,0)
 . ; retrieve data from other payer reject multiple
"RTN","BPSOSCD",192,0)
 . S REJIEN=0 F  S REJIEN=$O(^BPST(IEN59,14,COBPIEN,2,REJIEN)) Q:'REJIEN  D
"RTN","BPSOSCD",193,0)
 .. S BPS("RX",MEDN,"OTHER PAYER",COBPIEN,"R",REJIEN,0)=$G(^BPST(IEN59,14,COBPIEN,2,REJIEN,0))
"RTN","BPSOSCD",194,0)
 .. Q
"RTN","BPSOSCD",195,0)
 . Q
"RTN","BPSOSCD",196,0)
 ;
"RTN","BPSOSCD",197,0)
COBX ;
"RTN","BPSOSCD",198,0)
 Q
"RTN","BPSOSCD",199,0)
 ;
"RTN","BPSOSCE")
0^38^B14075186
"RTN","BPSOSCE",1,0)
BPSOSCE ;BHAM ISC/FCS/DRS/DLF - New entry in 9002313.02 ;06/01/2004
"RTN","BPSOSCE",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8**;JUN 2004;Build 29
"RTN","BPSOSCE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSCE",4,0)
 ;----------------------------------------------------------------------
"RTN","BPSOSCE",5,0)
 ;Creates an Electronic Claim Submission record
"RTN","BPSOSCE",6,0)
 ;
"RTN","BPSOSCE",7,0)
 ;Parameters:  START     - START Medication Number
"RTN","BPSOSCE",8,0)
 ;             END       - END Medication Number
"RTN","BPSOSCE",9,0)
 ;             TOTAL     - TOTAL Medications in Claim
"RTN","BPSOSCE",10,0)
 ;                       - The BPS(*) array pointed to by START, END
"RTN","BPSOSCE",11,0)
 ;
"RTN","BPSOSCE",12,0)
 ; Note that the BPS array is shared by all of the BPSOSC* routines
"RTN","BPSOSCE",13,0)
 ;----------------------------------------------------------------------
"RTN","BPSOSCE",14,0)
 ; NEWCLAIM^BPSOSCE called from BPSOSCA from BPSOSQG from BPSOSQ2
"RTN","BPSOSCE",15,0)
 ;
"RTN","BPSOSCE",16,0)
 ; This routine is responsible for creating a new entry in the
"RTN","BPSOSCE",17,0)
 ; claims file, and for calling the routines that then populate
"RTN","BPSOSCE",18,0)
 ; that new entry.
"RTN","BPSOSCE",19,0)
 ;
"RTN","BPSOSCE",20,0)
 Q
"RTN","BPSOSCE",21,0)
 ;
"RTN","BPSOSCE",22,0)
NEWCLAIM(START,END,TOTAL) ;EP
"RTN","BPSOSCE",23,0)
 ;
"RTN","BPSOSCE",24,0)
 ;Manage local variables
"RTN","BPSOSCE",25,0)
 N CLAIMID,DIC,DLAYGO,X,Y,COUNT,INDEX,DIK,DA,NODE0,ROU,ERROR,SEG
"RTN","BPSOSCE",26,0)
 S ROU=$T(+0),START=+$G(START),END=+$G(END),TOTAL=+$G(TOTAL)
"RTN","BPSOSCE",27,0)
 ;
"RTN","BPSOSCE",28,0)
 ;Create new record in Claim Submission File (9002313.02)
"RTN","BPSOSCE",29,0)
L L +^TMP($J,"BPSOSCE"):300 I '$T G L:$$IMPOSS^BPSOSUE("L","RTI","Single-threaded routine",,,$T(+0))
"RTN","BPSOSCE",30,0)
 ;
"RTN","BPSOSCE",31,0)
 ; Generate Claim ID
"RTN","BPSOSCE",32,0)
 S CLAIMID=$$CLAIMID^BPSECX1($G(BPS("RX",START,"IEN59")))
"RTN","BPSOSCE",33,0)
 I CLAIMID="" D  Q ERROR
"RTN","BPSOSCE",34,0)
 . S ERROR="320^VA Claim ID not created"
"RTN","BPSOSCE",35,0)
 . D LOG(ROU_"-Failed to create Claim ID")
"RTN","BPSOSCE",36,0)
 ;
"RTN","BPSOSCE",37,0)
 ; Create claim record
"RTN","BPSOSCE",38,0)
 S DLAYGO=9002313.02,DIC="^BPSC(",DIC(0)="LXZ",X=CLAIMID
"RTN","BPSOSCE",39,0)
 D ^DIC S Y=+Y
"RTN","BPSOSCE",40,0)
 L -^TMP($J,"BPSOSCE")
"RTN","BPSOSCE",41,0)
 I Y<1 D  Q ERROR
"RTN","BPSOSCE",42,0)
 . S ERROR="321^Failed to create claim record"
"RTN","BPSOSCE",43,0)
 . D LOG(ROU_"-Failed to create an entry in file 9002313.02")
"RTN","BPSOSCE",44,0)
 ;
"RTN","BPSOSCE",45,0)
 ; Update BPS and Log it
"RTN","BPSOSCE",46,0)
 S BPS(9002313.02)=Y
"RTN","BPSOSCE",47,0)
 ;
"RTN","BPSOSCE",48,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSOSCE",49,0)
 D LOG(ROU_"-Created claim ID "_CLAIMID_" (IEN "_BPS(9002313.02)_")")
"RTN","BPSOSCE",50,0)
 ;
"RTN","BPSOSCE",51,0)
 ; Update the zero node of the claim
"RTN","BPSOSCE",52,0)
 S NODE0=$G(^BPSC(BPS(9002313.02),0))
"RTN","BPSOSCE",53,0)
 S $P(NODE0,U,2)=$G(BPS("NCPDP","IEN")) ; Electronic Payor (Payer Sheet)
"RTN","BPSOSCE",54,0)
 S $P(NODE0,U,4)=2 ; Transmit Flag - 2 is 'Yes (Point of Sale)'
"RTN","BPSOSCE",55,0)
 S $P(NODE0,U,6)=$$NOWFM^BPSOSU1() ; Created On
"RTN","BPSOSCE",56,0)
 S ^BPSC(BPS(9002313.02),0)=NODE0
"RTN","BPSOSCE",57,0)
 ;
"RTN","BPSOSCE",58,0)
 ; Update Patient Name
"RTN","BPSOSCE",59,0)
 S $P(^BPSC(BPS(9002313.02),1),U,1)=$G(BPS("Patient","Name"))
"RTN","BPSOSCE",60,0)
 S $P(^BPSC(BPS(9002313.02),1),U,4)=$G(BPS("Insurer","IEN"))
"RTN","BPSOSCE",61,0)
 ;
"RTN","BPSOSCE",62,0)
 ;update TRANSACTION field
"RTN","BPSOSCE",63,0)
 S $P(^BPSC(BPS(9002313.02),0),U,8)=$G(BPS("RX",START,"IEN59"))
"RTN","BPSOSCE",64,0)
 ;
"RTN","BPSOSCE",65,0)
 ; Only Billing Request call this routine so the transaction code
"RTN","BPSOSCE",66,0)
 ;   is always "B1"
"RTN","BPSOSCE",67,0)
 S BPS("Transaction Code")="B1"
"RTN","BPSOSCE",68,0)
 S BPS("Transaction Count")=TOTAL
"RTN","BPSOSCE",69,0)
 ;
"RTN","BPSOSCE",70,0)
 ; Process the 'non-multiple' segments (Header, Patient, Cardholder)
"RTN","BPSOSCE",71,0)
 F SEG=100:10:120 D XLOOP^BPSOSCF(BPS("NCPDP","IEN"),SEG)
"RTN","BPSOSCE",72,0)
 ;
"RTN","BPSOSCE",73,0)
 ; Create the definition node for the multiple
"RTN","BPSOSCE",74,0)
 S ^BPSC(BPS(9002313.02),400,0)="^9002313.0201PA^^"
"RTN","BPSOSCE",75,0)
 ;
"RTN","BPSOSCE",76,0)
 S COUNT=0
"RTN","BPSOSCE",77,0)
 F INDEX=START:1:END D
"RTN","BPSOSCE",78,0)
 . ;
"RTN","BPSOSCE",79,0)
 . ;Create node zero of the medication multiple
"RTN","BPSOSCE",80,0)
 . S COUNT=COUNT+1
"RTN","BPSOSCE",81,0)
 . S NODE0=""
"RTN","BPSOSCE",82,0)
 . S $P(NODE0,U,1)=INDEX
"RTN","BPSOSCE",83,0)
 . S $P(NODE0,U,4)=$G(BPS("RX",INDEX,"Drug Name"))
"RTN","BPSOSCE",84,0)
 . S $P(NODE0,U,5)=$G(BPS("RX",INDEX,"RX IEN"))
"RTN","BPSOSCE",85,0)
 . S ^BPSC(BPS(9002313.02),400,INDEX,0)=NODE0
"RTN","BPSOSCE",86,0)
 . ;
"RTN","BPSOSCE",87,0)
 . ;
"RTN","BPSOSCE",88,0)
 . I ^BPS(9002313.99,1,"CERTIFIER")=DUZ S INDEX=1 ;LJE
"RTN","BPSOSCE",89,0)
 . S $P(^BPSC(BPS(9002313.02),400,INDEX,400),U,1)=BPS("RX",INDEX,"Date Filled")
"RTN","BPSOSCE",90,0)
 . S BPS(9002313.0201)=INDEX ;07/28/96.
"RTN","BPSOSCE",91,0)
 . ;
"RTN","BPSOSCE",92,0)
 . ; Process multiples in the medication multiple
"RTN","BPSOSCE",93,0)
 . F SEG=130:10:230 D XLOOP^BPSOSCF(BPS("NCPDP","IEN"),SEG,INDEX)
"RTN","BPSOSCE",94,0)
 . ;
"RTN","BPSOSCE",95,0)
 . ; Update the indices
"RTN","BPSOSCE",96,0)
 . S ^BPSC(BPS(9002313.02),400,"B",INDEX,INDEX)=""
"RTN","BPSOSCE",97,0)
 . S NODE0=$G(^BPSC(BPS(9002313.02),400,0))
"RTN","BPSOSCE",98,0)
 . ;
"RTN","BPSOSCE",99,0)
 . ; Update the definition node of the multiple
"RTN","BPSOSCE",100,0)
 . S $P(NODE0,U,4)=COUNT
"RTN","BPSOSCE",101,0)
 . S ^BPSC(BPS(9002313.02),400,0)=NODE0
"RTN","BPSOSCE",102,0)
 . ;
"RTN","BPSOSCE",103,0)
 ;
"RTN","BPSOSCE",104,0)
 ; Cross-Reference Claim Submission Record
"RTN","BPSOSCE",105,0)
 S DIK="^BPSC("
"RTN","BPSOSCE",106,0)
 S DA=BPS(9002313.02)
"RTN","BPSOSCE",107,0)
 D IX1^DIK
"RTN","BPSOSCE",108,0)
 Q ""
"RTN","BPSOSCE",109,0)
 ;
"RTN","BPSOSCE",110,0)
 ; LOG - Write the message to all of transactions that are
"RTN","BPSOSCE",111,0)
 ; being bundled into this 9002313.02 claim
"RTN","BPSOSCE",112,0)
LOG(MSG) ;
"RTN","BPSOSCE",113,0)
 N IEN59,I
"RTN","BPSOSCE",114,0)
 F I=START:1:END D
"RTN","BPSOSCE",115,0)
 . S IEN59=$G(BPS("RX",I,"IEN59"))
"RTN","BPSOSCE",116,0)
 . I IEN59 D LOG^BPSOSL(IEN59,MSG)
"RTN","BPSOSCE",117,0)
 Q
"RTN","BPSOSCF")
0^49^B28717442
"RTN","BPSOSCF",1,0)
BPSOSCF ;BHAM ISC/FCS/DRS/DLF - Low-level format of .02 ;06/01/2004
"RTN","BPSOSCF",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8**;JUN 2004;Build 29
"RTN","BPSOSCF",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSCF",4,0)
 ;
"RTN","BPSOSCF",5,0)
 ; XLOOP - Build claim record
"RTN","BPSOSCF",6,0)
 ; Inputs:
"RTN","BPSOSCF",7,0)
 ;   BPS    - This is shared among the BPSOSC* routines
"RTN","BPSOSCF",8,0)
 ;   FORMAT - Pointer to 9002313.92
"RTN","BPSOSCF",9,0)
 ;   NODE   - Segment Node
"RTN","BPSOSCF",10,0)
 ;            100  (5.1 Transaction Header Segment)
"RTN","BPSOSCF",11,0)
 ;            110  (5.1 Patient Segment)
"RTN","BPSOSCF",12,0)
 ;            120  (5.1 Insurance Segment)
"RTN","BPSOSCF",13,0)
 ;            130  (5.1 Claim Segment)
"RTN","BPSOSCF",14,0)
 ;            140  (5.1 Pharmacy Provider Segment)
"RTN","BPSOSCF",15,0)
 ;            150  (5.1 Prescriber Segment)
"RTN","BPSOSCF",16,0)
 ;            160  (5.1 COB/Other Payments Segment)
"RTN","BPSOSCF",17,0)
 ;            170  (5.1 Worker's Compensation Segment)
"RTN","BPSOSCF",18,0)
 ;            180  (5.1 DUR/PPS Segment)
"RTN","BPSOSCF",19,0)
 ;            190  (5.1 Pricing Segment)
"RTN","BPSOSCF",20,0)
 ;            200  (5.1 Coupon Segment)
"RTN","BPSOSCF",21,0)
 ;            210  (5.1 Compound Segment)
"RTN","BPSOSCF",22,0)
 ;            220  (5.1 Prior Authorization Segment)
"RTN","BPSOSCF",23,0)
 ;            230  (5.1 Clinical Segment)
"RTN","BPSOSCF",24,0)
 ;   MEDN   - Prescription multiple in BPS Claims
"RTN","BPSOSCF",25,0)
 ;
"RTN","BPSOSCF",26,0)
XLOOP(FORMAT,NODE,MEDN) ;EP
"RTN","BPSOSCF",27,0)
 N ORDER,RECMIEN,MDATA,FLDIEN,PMODE,FLAG,OVERRIDE
"RTN","BPSOSCF",28,0)
 ;
"RTN","BPSOSCF",29,0)
 ; Check parameters
"RTN","BPSOSCF",30,0)
 I $G(FORMAT)="" Q
"RTN","BPSOSCF",31,0)
 I $G(NODE)="" Q
"RTN","BPSOSCF",32,0)
 ;
"RTN","BPSOSCF",33,0)
 ; If the payer sheet does have a particular segment quit
"RTN","BPSOSCF",34,0)
 I '$D(^BPSF(9002313.92,FORMAT,NODE,0)) Q
"RTN","BPSOSCF",35,0)
 ;
"RTN","BPSOSCF",36,0)
 ; VA does not currently do these segments
"RTN","BPSOSCF",37,0)
 I ",230,220,210,200,170,"[(","_NODE_",") Q
"RTN","BPSOSCF",38,0)
 ;
"RTN","BPSOSCF",39,0)
 ; For COB, if the payer sequence is primary, then quit and don't output the COB fields
"RTN","BPSOSCF",40,0)
 I NODE=160,$$COB59^BPSUTIL2(+$G(BPS("RX",BPS(9002313.0201),"IEN59")))=1 Q
"RTN","BPSOSCF",41,0)
 ;
"RTN","BPSOSCF",42,0)
 ; COB processing is handled differently
"RTN","BPSOSCF",43,0)
 I NODE=160 D COB^BPSOSHF(FORMAT,NODE,MEDN) Q
"RTN","BPSOSCF",44,0)
 ;
"RTN","BPSOSCF",45,0)
 ; DUR is handled differently since it is repeating
"RTN","BPSOSCF",46,0)
 I NODE=180 D DURPPS^BPSOSHF(FORMAT,NODE,MEDN) Q
"RTN","BPSOSCF",47,0)
 ;
"RTN","BPSOSCF",48,0)
 ; Loop through the fields in the segment
"RTN","BPSOSCF",49,0)
 S ORDER=0
"RTN","BPSOSCF",50,0)
 F  S ORDER=$O(^BPSF(9002313.92,FORMAT,NODE,"B",ORDER)) Q:'ORDER  D
"RTN","BPSOSCF",51,0)
 . ;
"RTN","BPSOSCF",52,0)
 . ; Get the pointer to the BPS NCPDP FIELD DEFS table
"RTN","BPSOSCF",53,0)
 . S RECMIEN=$O(^BPSF(9002313.92,FORMAT,NODE,"B",ORDER,0))
"RTN","BPSOSCF",54,0)
 . I 'RECMIEN D IMPOSS^BPSOSUE("DB","TI","NODE="_NODE,"ORDER="_ORDER,2,$T(+0))
"RTN","BPSOSCF",55,0)
 . S MDATA=^BPSF(9002313.92,FORMAT,NODE,RECMIEN,0)
"RTN","BPSOSCF",56,0)
 . S FLDIEN=$P(MDATA,U,2)
"RTN","BPSOSCF",57,0)
 . ;
"RTN","BPSOSCF",58,0)
 . ; Quit for 111-AM (Segment ID), 478-H7 (Other Amt Claimed Sub Count), and
"RTN","BPSOSCF",59,0)
 . ;   479-H8 (Other Amt Claimed Sub Qual)
"RTN","BPSOSCF",60,0)
 . ; 478 and 479 are handled by 480 and 111 is standard field for each segment
"RTN","BPSOSCF",61,0)
 . Q:FLDIEN=241!(FLDIEN=240)!(FLDIEN=93)
"RTN","BPSOSCF",62,0)
 . ;
"RTN","BPSOSCF",63,0)
 . ; Corrupt or erroneous format file
"RTN","BPSOSCF",64,0)
 . I 'FLDIEN Q
"RTN","BPSOSCF",65,0)
 . ;
"RTN","BPSOSCF",66,0)
 . ; Set override value (may not be defined so override will be null)
"RTN","BPSOSCF",67,0)
 . I $D(MEDN) S OVERRIDE=$G(BPS("OVERRIDE","RX",MEDN,FLDIEN))
"RTN","BPSOSCF",68,0)
 . E  S OVERRIDE=$G(BPS("OVERRIDE",FLDIEN))
"RTN","BPSOSCF",69,0)
 . ;
"RTN","BPSOSCF",70,0)
 . ; Get processing mode (S-Standard (default), X-Special Code)
"RTN","BPSOSCF",71,0)
 . S PMODE=$P(MDATA,U,3)
"RTN","BPSOSCF",72,0)
 . I PMODE="" S PMODE="S" ;default it
"RTN","BPSOSCF",73,0)
 . ;
"RTN","BPSOSCF",74,0)
 . ; Default FLAG and value being computed
"RTN","BPSOSCF",75,0)
 . S FLAG="GFS"
"RTN","BPSOSCF",76,0)
 . S BPS("X")=""
"RTN","BPSOSCF",77,0)
 . ;
"RTN","BPSOSCF",78,0)
 . ; If there is an override, set BPS("X") to it and
"RTN","BPSOSCF",79,0)
 . ;   only do Format and Set code
"RTN","BPSOSCF",80,0)
 . I OVERRIDE]"" S FLAG="FS",BPS("X")=OVERRIDE
"RTN","BPSOSCF",81,0)
 . ;
"RTN","BPSOSCF",82,0)
 . ; If Special Code mode is set, execute special code instead
"RTN","BPSOSCF",83,0)
 . ;   of field's Get code and change Flag to FS so Format and
"RTN","BPSOSCF",84,0)
 . ;   Set code is still done but not GET code
"RTN","BPSOSCF",85,0)
 . I PMODE="X",OVERRIDE="" D
"RTN","BPSOSCF",86,0)
 .. S FLAG="FS"
"RTN","BPSOSCF",87,0)
 .. D XSPCCODE(FORMAT,NODE,RECMIEN)
"RTN","BPSOSCF",88,0)
 . ;
"RTN","BPSOSCF",89,0)
 . ; Call XFLDCODE to do processing based on FLAG setting
"RTN","BPSOSCF",90,0)
 . D XFLDCODE(NODE,FLDIEN,FLAG)
"RTN","BPSOSCF",91,0)
 Q
"RTN","BPSOSCF",92,0)
 ;
"RTN","BPSOSCF",93,0)
 ; Execute Get, Format and/or Set MUMPS code for a NCPDP Field
"RTN","BPSOSCF",94,0)
 ;
"RTN","BPSOSCF",95,0)
 ; Parameters:   NODE    -  Segment Node
"RTN","BPSOSCF",96,0)
 ;               FLDIEN  -  NCPDP Field Definitions IEN
"RTN","BPSOSCF",97,0)
 ;               FLAG    -  If variable contains:
"RTN","BPSOSCF",98,0)
 ;                          "G" - Execute Get Code
"RTN","BPSOSCF",99,0)
 ;                          "F" - Execute Format Code
"RTN","BPSOSCF",100,0)
 ;                          "S" - Execute S Code
"RTN","BPSOSCF",101,0)
 ;---------------------------------------------------------------------
"RTN","BPSOSCF",102,0)
XFLDCODE(NODE,FLDIEN,FLAG) ;EP
"RTN","BPSOSCF",103,0)
 ; 5.1 loops through the 10, 25, 30 nodes
"RTN","BPSOSCF",104,0)
 ;
"RTN","BPSOSCF",105,0)
 N FNODE,INDEX,MCODE
"RTN","BPSOSCF",106,0)
 ;
"RTN","BPSOSCF",107,0)
 ; Check if record exists and FLAG variable is set correctly
"RTN","BPSOSCF",108,0)
 ; Changed from Q: to give fatal error - 10/18/2000
"RTN","BPSOSCF",109,0)
 I 'FLDIEN D IMPOSS^BPSOSUE("DB,P","TI","FLDIEN="_FLDIEN,,"XFLDCODE",$T(+0))
"RTN","BPSOSCF",110,0)
 I '$D(^BPSF(9002313.91,FLDIEN,0)) D IMPOSS^BPSOSUE("DB,P","TI","FLDIEN="_FLDIEN,,"XFLDCODE",$T(+0))
"RTN","BPSOSCF",111,0)
 I FLAG="" D IMPOSS^BPSOSUE("DB,P","TI","FLAG null",,"XFLDCODE",$T(+0))
"RTN","BPSOSCF",112,0)
 ;
"RTN","BPSOSCF",113,0)
 ; Loop through Get, Format and Set Code fields and execute code
"RTN","BPSOSCF",114,0)
 F FNODE=10,25,30 D
"RTN","BPSOSCF",115,0)
 . I FLAG'[$S(FNODE=10:"G",FNODE=25:"F",FNODE=30:"S",1:"") Q
"RTN","BPSOSCF",116,0)
 . ;
"RTN","BPSOSCF",117,0)
 . ; Quit for 111-AM (Segment ID), 478-H7 (Other Amt Claimed Sub Count), and
"RTN","BPSOSCF",118,0)
 . ;   479-H8 (Other Amt Claimed Sub Qual)
"RTN","BPSOSCF",119,0)
 . ; 478 and 479 are handled by 480 and 111 is standard field for each segment
"RTN","BPSOSCF",120,0)
 . I FLDIEN=241!(FLDIEN=240)!(FLDIEN=93) Q
"RTN","BPSOSCF",121,0)
 . I '$D(^BPSF(9002313.91,FLDIEN,FNODE,0)) D IMPOSS^BPSOSUE("DB","TI","FLDIEN="_FLDIEN,"FNODE="_FNODE,"XFLDCODE",$T(+0))
"RTN","BPSOSCF",122,0)
 . ;
"RTN","BPSOSCF",123,0)
 . ; Loop through the multiple and execute each line
"RTN","BPSOSCF",124,0)
 . S INDEX=0
"RTN","BPSOSCF",125,0)
 . F  S INDEX=$O(^BPSF(9002313.91,FLDIEN,FNODE,INDEX)) Q:'+INDEX  D
"RTN","BPSOSCF",126,0)
 .. ;
"RTN","BPSOSCF",127,0)
 .. ; If doing SET code and if this is not the header segment, add the ID prefix
"RTN","BPSOSCF",128,0)
 .. I FNODE=30,NODE'=100 S BPS("X")=$P($G(^BPSF(9002313.91,FLDIEN,5)),U,1)_BPS("X")
"RTN","BPSOSCF",129,0)
 .. ;
"RTN","BPSOSCF",130,0)
 .. ; Get the code and xecute
"RTN","BPSOSCF",131,0)
 .. S MCODE=$G(^BPSF(9002313.91,FLDIEN,FNODE,INDEX,0))
"RTN","BPSOSCF",132,0)
 .. Q:MCODE=""
"RTN","BPSOSCF",133,0)
 .. Q:$E(MCODE,1)=";"
"RTN","BPSOSCF",134,0)
 .. X MCODE
"RTN","BPSOSCF",135,0)
 Q
"RTN","BPSOSCF",136,0)
 ;----------------------------------------------------------------------
"RTN","BPSOSCF",137,0)
 ;Execute Special Code (for a NCPDP Field within a NCPDP Record)
"RTN","BPSOSCF",138,0)
 ;
"RTN","BPSOSCF",139,0)
 ;Parameters:    FORMAT   - NCPDP Record Format IEN (9002313.92)
"RTN","BPSOSCF",140,0)
 ;               NODE     - Global node value (100,110,120,130,140)
"RTN","BPSOSCF",141,0)
 ;               RECMIEN  - Field Multiple IEN
"RTN","BPSOSCF",142,0)
 ;---------------------------------------------------------------------
"RTN","BPSOSCF",143,0)
XSPCCODE(FORMAT,NODE,RECMIEN) ;EP - Above and BPSOSHR
"RTN","BPSOSCF",144,0)
 ;
"RTN","BPSOSCF",145,0)
 N INDEX,MCODE
"RTN","BPSOSCF",146,0)
 I '$D(^BPSF(9002313.92,FORMAT,NODE,RECMIEN,0)) D IMPOSS^BPSOSUE("DB,P","TI","no special code there to XECUTE","FORMAT="_FORMAT,"XSPCCODE",$T(+0))
"RTN","BPSOSCF",147,0)
 ;
"RTN","BPSOSCF",148,0)
 S INDEX=0
"RTN","BPSOSCF",149,0)
 F  S INDEX=$O(^BPSF(9002313.92,FORMAT,NODE,RECMIEN,1,INDEX)) Q:'+INDEX  D
"RTN","BPSOSCF",150,0)
 . S MCODE=$G(^BPSF(9002313.92,FORMAT,NODE,RECMIEN,1,INDEX,0))
"RTN","BPSOSCF",151,0)
 . Q:MCODE=""
"RTN","BPSOSCF",152,0)
 . Q:$E(MCODE,1)=";"
"RTN","BPSOSCF",153,0)
 . X MCODE
"RTN","BPSOSCF",154,0)
 Q
"RTN","BPSOSH2")
0^51^B63139845
"RTN","BPSOSH2",1,0)
BPSOSH2 ;BHAM ISC/SD/lwj/DLF - Assemble formatted claim for 5.1 ;06/01/2004
"RTN","BPSOSH2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8**;JUN 2004;Build 29
"RTN","BPSOSH2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSH2",4,0)
 ;----------------------------------------------------------------------
"RTN","BPSOSH2",5,0)
 ; Changes for NCPDP 5.1
"RTN","BPSOSH2",6,0)
 ;    5.1 has 14 claim segments (header, patient, insurance, claim
"RTN","BPSOSH2",7,0)
 ;                                pharmacy provider, prescriber,
"RTN","BPSOSH2",8,0)
 ;                                COB, workers comp, DUR, Pricing,
"RTN","BPSOSH2",9,0)
 ;                                coupon, compound, prior auth,
"RTN","BPSOSH2",10,0)
 ;                                clinical)
"RTN","BPSOSH2",11,0)
 ;    5.1 requires field identifiers and separators on all fields
"RTN","BPSOSH2",12,0)
 ;        other than the header
"RTN","BPSOSH2",13,0)
 ;    5.1 segment separators are required prior to each segment
"RTN","BPSOSH2",14,0)
 ;        following the header
"RTN","BPSOSH2",15,0)
 ;    5.1  Group separators appear at the end of each
"RTN","BPSOSH2",16,0)
 ;        transaction (prescription)
"RTN","BPSOSH2",17,0)
 ;    5.1 we only want to send segments that have data - a new
"RTN","BPSOSH2",18,0)
 ;        segment record will hold the data until we are sure
"RTN","BPSOSH2",19,0)
 ;        we have something to send
"RTN","BPSOSH2",20,0)
 ;
"RTN","BPSOSH2",21,0)
 ;
"RTN","BPSOSH2",22,0)
 ;----------------------------------------------------------------------
"RTN","BPSOSH2",23,0)
 ;Put together ascii formatted record via NCPDP Record definition
"RTN","BPSOSH2",24,0)
 ;
"RTN","BPSOSH2",25,0)
 ;Input Variables:  NODES     - (100^110^120 or
"RTN","BPSOSH2",26,0)
 ;                               130^140^150^160^170^180^190^
"RTN","BPSOSH2",27,0)
 ;                               200^210^220^230)
"RTN","BPSOSH2",28,0)
 ;                  .IEN      - Internal Entry Number array
"RTN","BPSOSH2",29,0)
 ;                  .BPS     - Formatted Data Array with claim and
"RTN","BPSOSH2",30,0)
 ;                              prescription data
"RTN","BPSOSH2",31,0)
 ;                  .REC      - Formatted Ascii record (result)
"RTN","BPSOSH2",32,0)
 ;----------------------------------------------------------------------
"RTN","BPSOSH2",33,0)
XLOOP(NODES,IEN,BPS,REC) ;EP - from BPSECA1
"RTN","BPSOSH2",34,0)
 ;
"RTN","BPSOSH2",35,0)
 ; Manage local variables
"RTN","BPSOSH2",36,0)
 N ORDER,RECMIEN,MDATA,FLDIEN,PMODE,FLAG,NODE,FDATA,FLDNUM,FLDDATA
"RTN","BPSOSH2",37,0)
 N INDEX,FLDID
"RTN","BPSOSH2",38,0)
 N SEGREC,DATAFND,FDATA5
"RTN","BPSOSH2",39,0)
 ;
"RTN","BPSOSH2",40,0)
 ;Loop through the NODES defined in NODES variable parsed by U
"RTN","BPSOSH2",41,0)
 F INDEX=1:1:$L(NODES,U) D
"RTN","BPSOSH2",42,0)
 . S NODE=$P(NODES,U,INDEX)
"RTN","BPSOSH2",43,0)
 . Q:NODE=""
"RTN","BPSOSH2",44,0)
 . ;
"RTN","BPSOSH2",45,0)
 . ; VA does not support these nodes
"RTN","BPSOSH2",46,0)
 . Q:",230,220,210,200,170,"[NODE
"RTN","BPSOSH2",47,0)
 . ;
"RTN","BPSOSH2",48,0)
 . ; Quit if the payer sheet does not have the node
"RTN","BPSOSH2",49,0)
 . Q:'$D(^BPSF(9002313.92,+IEN(9002313.92),NODE,0))
"RTN","BPSOSH2",50,0)
 . ;
"RTN","BPSOSH2",51,0)
 . ; Per NCPDP standard, reversals do not support segments listed below - DMB 5/2/2005
"RTN","BPSOSH2",52,0)
 . I $G(BPS(9002313.02,+$G(IEN(9002313.02)),103,"I"))="B2",",230,220,210,200,170,160,150,140,"[NODE Q
"RTN","BPSOSH2",53,0)
 . ;
"RTN","BPSOSH2",54,0)
 . S DATAFND=0  ;indicates if data is on the segment for us to send
"RTN","BPSOSH2",55,0)
 . S SEGREC=""  ;holds the segment's information
"RTN","BPSOSH2",56,0)
 . ;
"RTN","BPSOSH2",57,0)
 . D:NODE=180 PROCDUR
"RTN","BPSOSH2",58,0)
 . ;
"RTN","BPSOSH2",59,0)
 . ;COB fields
"RTN","BPSOSH2",60,0)
 . D:NODE=160 PROCCOB
"RTN","BPSOSH2",61,0)
 . ;
"RTN","BPSOSH2",62,0)
 . S ORDER=""
"RTN","BPSOSH2",63,0)
 . F  D  Q:'ORDER
"RTN","BPSOSH2",64,0)
 .. ;
"RTN","BPSOSH2",65,0)
 .. Q:NODE=180    ;already had to process the DUR/PPS section (repeating)
"RTN","BPSOSH2",66,0)
 .. Q:NODE=160  ;was processed earlier
"RTN","BPSOSH2",67,0)
 .. S ORDER=$O(^BPSF(9002313.92,+IEN(9002313.92),NODE,"B",ORDER))
"RTN","BPSOSH2",68,0)
 .. Q:'ORDER
"RTN","BPSOSH2",69,0)
 .. S RECMIEN=""
"RTN","BPSOSH2",70,0)
 .. S RECMIEN=$O(^BPSF(9002313.92,+IEN(9002313.92),NODE,"B",ORDER,RECMIEN))
"RTN","BPSOSH2",71,0)
 .. Q:RECMIEN=""
"RTN","BPSOSH2",72,0)
 .. ;
"RTN","BPSOSH2",73,0)
 .. S MDATA=$G(^BPSF(9002313.92,+IEN(9002313.92),NODE,RECMIEN,0))
"RTN","BPSOSH2",74,0)
 .. Q:MDATA=""
"RTN","BPSOSH2",75,0)
 .. ;
"RTN","BPSOSH2",76,0)
 .. S FLDIEN=$P(MDATA,U,2)
"RTN","BPSOSH2",77,0)
 .. Q:FLDIEN=""
"RTN","BPSOSH2",78,0)
 .. ;
"RTN","BPSOSH2",79,0)
 .. S FDATA=$G(^BPSF(9002313.91,FLDIEN,0))
"RTN","BPSOSH2",80,0)
 .. Q:FDATA=""
"RTN","BPSOSH2",81,0)
 .. S FLDNUM=$P(FDATA,U,1)
"RTN","BPSOSH2",82,0)
 .. Q:FLDNUM=""
"RTN","BPSOSH2",83,0)
 .. ;
"RTN","BPSOSH2",84,0)
 .. S FDATA5=$G(^BPSF(9002313.91,FLDIEN,5))   ;5.1 id and length
"RTN","BPSOSH2",85,0)
 .. S FLDID=$P(FDATA5,U,1)         ;5.1 ID
"RTN","BPSOSH2",86,0)
 .. ;
"RTN","BPSOSH2",87,0)
 .. ;header data
"RTN","BPSOSH2",88,0)
 .. S:NODE<130 FLDDATA=$G(BPS(9002313.02,IEN(9002313.02),FLDNUM,"I"))
"RTN","BPSOSH2",89,0)
 .. ;
"RTN","BPSOSH2",90,0)
 .. ;transaction data
"RTN","BPSOSH2",91,0)
 .. S:NODE>120 FLDDATA=$G(BPS(9002313.0201,IEN(9002313.01),FLDNUM,"I"))
"RTN","BPSOSH2",92,0)
 .. ;
"RTN","BPSOSH2",93,0)
 .. I FLDID'=$TR(FLDDATA,"0 {}") S DATAFND=1 ;fld chk-is the field empty?
"RTN","BPSOSH2",94,0)
 .. ;
"RTN","BPSOSH2",95,0)
 .. ;check if this is the seg id - call this after fld chk since
"RTN","BPSOSH2",96,0)
 .. ;we don't want to send the segment if this is all there is
"RTN","BPSOSH2",97,0)
 .. I (NODE>100)&(FLDNUM=111) S FLDDATA=$$SEGID(NODE)
"RTN","BPSOSH2",98,0)
 .. ;
"RTN","BPSOSH2",99,0)
 .. Q:FLDDATA=""   ;lje;7/23/03; don't want extra field separators when field is blank for testing for WebMD.
"RTN","BPSOSH2",100,0)
 .. ;
"RTN","BPSOSH2",101,0)
 .. S:NODE=100 SEGREC=SEGREC_FLDDATA  ;no FS on the header rec
"RTN","BPSOSH2",102,0)
 .. S:NODE>100 SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",103,0)
 .. ;
"RTN","BPSOSH2",104,0)
 . ;
"RTN","BPSOSH2",105,0)
 . I (DATAFND)&(NODE=100) S REC(NODE)=SEGREC   ;no SS when it's the header
"RTN","BPSOSH2",106,0)
 . I (DATAFND)&(NODE>100) D
"RTN","BPSOSH2",107,0)
 .. I '$D(REC(NODE)) S REC(NODE)=REC I REC[$C(29) S REC=""
"RTN","BPSOSH2",108,0)
 .. S REC(NODE)=REC(NODE)_$C(30)_SEGREC  ;SS before the seg
"RTN","BPSOSH2",109,0)
 ;
"RTN","BPSOSH2",110,0)
 Q
"RTN","BPSOSH2",111,0)
 ;
"RTN","BPSOSH2",112,0)
SEGID(ND) ; Field 111 is the Segment Identifier - for each segment, other than
"RTN","BPSOSH2",113,0)
 ; the header, a pre-defined, unique value must be sent in this field
"RTN","BPSOSH2",114,0)
 ; to identify which segment is being sent.  This value is not stored
"RTN","BPSOSH2",115,0)
 ; in the claim - as it changes with each of the 13 segments. The
"RTN","BPSOSH2",116,0)
 ; field does appear as part of the NCPCP Format, put is simply not
"RTN","BPSOSH2",117,0)
 ; stored.
"RTN","BPSOSH2",118,0)
 ;    01 = Patient   02 = Pharmacy Provider    03 = Prescriber
"RTN","BPSOSH2",119,0)
 ;    04 = Insurance 05 = COB/Other Payment    06 = Workers Comp
"RTN","BPSOSH2",120,0)
 ;    07 = Claim     08 = DUR/PPS              09 = Coupon
"RTN","BPSOSH2",121,0)
 ;    10 = Compound  11 = Pricing              12 = Prior Auth
"RTN","BPSOSH2",122,0)
 ;    13 = Clinical
"RTN","BPSOSH2",123,0)
 ;
"RTN","BPSOSH2",124,0)
 N FLD
"RTN","BPSOSH2",125,0)
 ;
"RTN","BPSOSH2",126,0)
 S FLD=$S(ND=110:"01",ND=120:"04",ND=130:"07",ND=140:"02",ND=150:"03",ND=160:"05",ND=170:"06",ND=180:"08",ND=190:11,ND=200:"09",ND=210:10,ND=220:12,ND=230:13,1:"00")
"RTN","BPSOSH2",127,0)
 S FLD="AM"_$$NFF^BPSECFM(FLD,2)
"RTN","BPSOSH2",128,0)
 ;
"RTN","BPSOSH2",129,0)
 Q FLD
"RTN","BPSOSH2",130,0)
 ;
"RTN","BPSOSH2",131,0)
PROCDUR ;NCPDP 5.1 - The DUR/PPS segment can repeat itself for any given
"RTN","BPSOSH2",132,0)
 ; transaction within a claim.  This means we have to have special
"RTN","BPSOSH2",133,0)
 ; programming to handle the repeating fields.
"RTN","BPSOSH2",134,0)
 ;
"RTN","BPSOSH2",135,0)
 ; Note that BPS array is set in BPSOSC* routines
"RTN","BPSOSH2",136,0)
 ;
"RTN","BPSOSH2",137,0)
 N FIELD,DUR,FLD,ORD
"RTN","BPSOSH2",138,0)
 ;
"RTN","BPSOSH2",139,0)
 ; If there isn't any data in this segment, then lets quit
"RTN","BPSOSH2",140,0)
 Q:'$D(BPS(9002313.1001))
"RTN","BPSOSH2",141,0)
 ;
"RTN","BPSOSH2",142,0)
 ; Second thing - create the 111 field entry as it is not repeating
"RTN","BPSOSH2",143,0)
 S FLDDATA=$$SEGID(NODE)
"RTN","BPSOSH2",144,0)
 S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",145,0)
 ;
"RTN","BPSOSH2",146,0)
 ; Next- let's look to the format to see which DUR/PPS fields are
"RTN","BPSOSH2",147,0)
 ; needed (remember - ALL fields on the DUR/PPS segment are optional)
"RTN","BPSOSH2",148,0)
 D GETFLDS^BPSOSHF(+IEN(9002313.92),NODE,.FIELD)
"RTN","BPSOSH2",149,0)
 ;
"RTN","BPSOSH2",150,0)
 ; Finally -loop through and process the fields for as many times
"RTN","BPSOSH2",151,0)
 ; as they appear
"RTN","BPSOSH2",152,0)
 S DUR=0
"RTN","BPSOSH2",153,0)
 F  S DUR=$O(BPS(9002313.1001,DUR)) Q:DUR=""  D
"RTN","BPSOSH2",154,0)
 . S ORD=0
"RTN","BPSOSH2",155,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",156,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",157,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",158,0)
 .. S:FLD=473 FLD=.01   ;473 value stored in the .01 field
"RTN","BPSOSH2",159,0)
 .. S FDATA5=$G(^BPSF(9002313.91,FLDIEN,5))   ;5.1 id and length
"RTN","BPSOSH2",160,0)
 .. S FLDID=$P(FDATA5,U,1)         ;5.1 ID
"RTN","BPSOSH2",161,0)
 .. ;
"RTN","BPSOSH2",162,0)
 .. ; Transaction data
"RTN","BPSOSH2",163,0)
 .. S FLDDATA=$G(BPS(9002313.1001,DUR,FLD,"I"))
"RTN","BPSOSH2",164,0)
 .. ;
"RTN","BPSOSH2",165,0)
 .. I FLDID'=$TR(FLDDATA,"0 {}") S DATAFND=1 ;fld chk-is the fld empty?
"RTN","BPSOSH2",166,0)
 .. ;
"RTN","BPSOSH2",167,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",168,0)
 Q
"RTN","BPSOSH2",169,0)
 ;
"RTN","BPSOSH2",170,0)
PROCCOB ;The COB OTHER PAYMENTS segment can repeat itself for any given
"RTN","BPSOSH2",171,0)
 ; transaction within a claim.  This means we have to have special
"RTN","BPSOSH2",172,0)
 ; programming to handle the repeating fields.
"RTN","BPSOSH2",173,0)
 ;
"RTN","BPSOSH2",174,0)
 ; Note that BPS array is set in BPSOSC* routines
"RTN","BPSOSH2",175,0)
 ;
"RTN","BPSOSH2",176,0)
 N FIELD,BPCOB,FLD,ORD
"RTN","BPSOSH2",177,0)
 ;
"RTN","BPSOSH2",178,0)
 ; If there isn't any data in this segment, then lets quit
"RTN","BPSOSH2",179,0)
 Q:'$D(BPS(9002313.0401))
"RTN","BPSOSH2",180,0)
 ;
"RTN","BPSOSH2",181,0)
 ; Second thing - create the 111 field entry as it is not repeating
"RTN","BPSOSH2",182,0)
 S FLDDATA=$$SEGID(NODE)
"RTN","BPSOSH2",183,0)
 S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",184,0)
 ;
"RTN","BPSOSH2",185,0)
 ; Next- let's look to the format to see which COB fields are
"RTN","BPSOSH2",186,0)
 ; needed 
"RTN","BPSOSH2",187,0)
 D GETFLDS^BPSOSHF(+IEN(9002313.92),NODE,.FIELD)
"RTN","BPSOSH2",188,0)
 ;
"RTN","BPSOSH2",189,0)
 ; Finally -loop through and process the fields for as many times
"RTN","BPSOSH2",190,0)
 ; as they appear
"RTN","BPSOSH2",191,0)
 S BPCOB=0
"RTN","BPSOSH2",192,0)
 F  S BPCOB=$O(BPS(9002313.0401,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",193,0)
 . S ORD=0
"RTN","BPSOSH2",194,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",195,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",196,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",197,0)
 .. S:FLD=337 FLD=.01   ;473 value stored in the .01 field
"RTN","BPSOSH2",198,0)
 .. S FDATA5=$G(^BPSF(9002313.91,FLDIEN,5))   ;5.1 id and length
"RTN","BPSOSH2",199,0)
 .. S FLDID=$P(FDATA5,U,1)         ;5.1 ID
"RTN","BPSOSH2",200,0)
 .. ;
"RTN","BPSOSH2",201,0)
 .. ; Transaction data
"RTN","BPSOSH2",202,0)
 .. S FLDDATA=$G(BPS(9002313.0401,BPCOB,FLD,"I"))
"RTN","BPSOSH2",203,0)
 .. ;
"RTN","BPSOSH2",204,0)
 .. Q:FLDDATA=""
"RTN","BPSOSH2",205,0)
 .. I $TR(FLDDATA,"0 {}")="HB" Q
"RTN","BPSOSH2",206,0)
 .. I $TR(FLDDATA,"0 {}")="5E" Q
"RTN","BPSOSH2",207,0)
 .. ;
"RTN","BPSOSH2",208,0)
 .. I FLDID'=$TR(FLDDATA,"0 {}") S DATAFND=1 ;fld chk-is the fld empty?
"RTN","BPSOSH2",209,0)
 .. ;
"RTN","BPSOSH2",210,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",211,0)
 .. I FLD=471 D REJCODES
"RTN","BPSOSH2",212,0)
 .. I FLD=341 D AMTPAID
"RTN","BPSOSH2",213,0)
 ;
"RTN","BPSOSH2",214,0)
 Q
"RTN","BPSOSH2",215,0)
 ;
"RTN","BPSOSH2",216,0)
AMTPAID ; (#342) OTHER PAYER AMT PAID QUALIFIER multiple
"RTN","BPSOSH2",217,0)
 ;
"RTN","BPSOSH2",218,0)
 ; NOTE: The claim is not formatted properly with multiple other payers.
"RTN","BPSOSH2",219,0)
 ;       So this will have to be modified for tertiary claims processing.
"RTN","BPSOSH2",220,0)
 ;
"RTN","BPSOSH2",221,0)
 N BPCOB,ORD,FLD,FDATA5,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",222,0)
 S BPCOB=0
"RTN","BPSOSH2",223,0)
 F  S BPCOB=$O(BPS(9002313.401342,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",224,0)
 . S ORD=0
"RTN","BPSOSH2",225,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",226,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",227,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",228,0)
 .. S:FLD=342 FLD=.01   ;342 value stored in the .01 field
"RTN","BPSOSH2",229,0)
 .. S FDATA5=$G(^BPSF(9002313.91,FLDIEN,5))   ;5.1 id and length
"RTN","BPSOSH2",230,0)
 .. S FLDID=$P(FDATA5,U,1)         ;5.1 ID
"RTN","BPSOSH2",231,0)
 .. ;
"RTN","BPSOSH2",232,0)
 .. ; Transaction data
"RTN","BPSOSH2",233,0)
 .. S FLDDATA=$G(BPS(9002313.401342,BPCOB,FLD,"I"))
"RTN","BPSOSH2",234,0)
 .. ;
"RTN","BPSOSH2",235,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",236,0)
 .. Q:FLDDATA=""
"RTN","BPSOSH2",237,0)
 .. I FLDID'="HC",FLDID=$TR(FLDDATA," ") Q  ; blanks are ok for 342-HC, but not for 431-DV
"RTN","BPSOSH2",238,0)
 .. ;
"RTN","BPSOSH2",239,0)
 .. S DATAFND=1
"RTN","BPSOSH2",240,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",241,0)
 Q
"RTN","BPSOSH2",242,0)
 ; 
"RTN","BPSOSH2",243,0)
REJCODES ; (#472) OTHER PAYER REJECT CODE
"RTN","BPSOSH2",244,0)
 ;
"RTN","BPSOSH2",245,0)
 ; NOTE: The claim is not formatted properly with multiple other payers.
"RTN","BPSOSH2",246,0)
 ;       So this will have to be modified for tertiary claims processing.
"RTN","BPSOSH2",247,0)
 ;
"RTN","BPSOSH2",248,0)
 N BPCOB,ORD,FLD,FDATA5,FLDID,FLDIEN,FLDDATA
"RTN","BPSOSH2",249,0)
 S BPCOB=0
"RTN","BPSOSH2",250,0)
 F  S BPCOB=$O(BPS(9002313.401472,BPCOB)) Q:BPCOB=""  D
"RTN","BPSOSH2",251,0)
 . S ORD=0
"RTN","BPSOSH2",252,0)
 . F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D
"RTN","BPSOSH2",253,0)
 .. S FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSH2",254,0)
 .. S FLD=$P(FIELD(ORD),U,2)
"RTN","BPSOSH2",255,0)
 .. S:FLD=472 FLD=.01   ;472 value stored in the .01 field
"RTN","BPSOSH2",256,0)
 .. S FDATA5=$G(^BPSF(9002313.91,FLDIEN,5))   ;5.1 id and length
"RTN","BPSOSH2",257,0)
 .. S FLDID=$P(FDATA5,U,1)         ;5.1 ID
"RTN","BPSOSH2",258,0)
 .. ;
"RTN","BPSOSH2",259,0)
 .. ; Transaction data
"RTN","BPSOSH2",260,0)
 .. S FLDDATA=$G(BPS(9002313.401472,BPCOB,FLD,"I"))
"RTN","BPSOSH2",261,0)
 .. ;
"RTN","BPSOSH2",262,0)
 .. ;quit if null or blank
"RTN","BPSOSH2",263,0)
 .. Q:FLDDATA=""
"RTN","BPSOSH2",264,0)
 .. I FLDID=$TR(FLDDATA,"0 {}") Q
"RTN","BPSOSH2",265,0)
 .. ;
"RTN","BPSOSH2",266,0)
 .. I FLDID'=$TR(FLDDATA,"0 {}") S DATAFND=1 ;fld chk-is the fld empty?
"RTN","BPSOSH2",267,0)
 .. ;
"RTN","BPSOSH2",268,0)
 .. S SEGREC=SEGREC_$C(28)_FLDDATA  ;FS always proceeds fld
"RTN","BPSOSH2",269,0)
 Q
"RTN","BPSOSHF")
0^58^B32080446
"RTN","BPSOSHF",1,0)
BPSOSHF ;BHAM ISC/SD/lwj/DLF - Get/Format/Set value for repeating segments ;06/01/2004
"RTN","BPSOSHF",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,8**;JUN 2004;Build 29
"RTN","BPSOSHF",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSHF",4,0)
 ;
"RTN","BPSOSHF",5,0)
 ; This routine is an addendum to BPSOSCF.  Its purpose is to handle
"RTN","BPSOSHF",6,0)
 ; some of the repeating fields that now exist in NCPDP 5.1.
"RTN","BPSOSHF",7,0)
 ; The logic was put in here rather than BPSOSCF to keep the original
"RTN","BPSOSHF",8,0)
 ; routine (BPSOSCF) from growing too large and too cumbersome to
"RTN","BPSOSHF",9,0)
 ; maintain.
"RTN","BPSOSHF",10,0)
 ;
"RTN","BPSOSHF",11,0)
DURPPS(FORMAT,NODE,MEDN) ;EP called from BPSOSCF
"RTN","BPSOSHF",12,0)
 ;---------------------------------------------------------------
"RTN","BPSOSHF",13,0)
 ;NCPDP 5.1 changes
"RTN","BPSOSHF",14,0)
 ; Processing of the 5.1 DUR/PPS segment is much different than the
"RTN","BPSOSHF",15,0)
 ; conventional segments of 3.2, simply because all of its fields
"RTN","BPSOSHF",16,0)
 ; are optional, and repeating.  The repeating portion of this
"RTN","BPSOSHF",17,0)
 ; causes us to have yet another index we have to account for, and
"RTN","BPSOSHF",18,0)
 ; we must be able to tell which of the fields really needs to be
"RTN","BPSOSHF",19,0)
 ; populated.  The population of this segment is based on those
"RTN","BPSOSHF",20,0)
 ; values found for the prescription or refill in the BPS DUR/PPS
"RTN","BPSOSHF",21,0)
 ; file.  The file's values are temporarily stored in the
"RTN","BPSOSHF",22,0)
 ; BPS("RX",MEDN,DUR....) array for easy access and reference.
"RTN","BPSOSHF",23,0)
 ; (Special note - Overrides are not allowed on this multiple since
"RTN","BPSOSHF",24,0)
 ; they can simply update the DUR/PPS filed directly. For the same
"RTN","BPSOSHF",25,0)
 ; reason, "special" code is not accounted for either.
"RTN","BPSOSHF",26,0)
 ;---------------------------------------------------------------
"RTN","BPSOSHF",27,0)
 ;
"RTN","BPSOSHF",28,0)
 ; first order of business - check the BPS("RX",MEDN,"DUR") array
"RTN","BPSOSHF",29,0)
 ; for values - if there aren't any, we don't need to write this
"RTN","BPSOSHF",30,0)
 ; segment
"RTN","BPSOSHF",31,0)
 ;
"RTN","BPSOSHF",32,0)
 N FIELD,RECCNT,DUR,FLD,OVERRIDE,FLAG,ORD,FLDIEN,FLDNUM,FLDNUMB,FOUND
"RTN","BPSOSHF",33,0)
 S FLAG="FS"
"RTN","BPSOSHF",34,0)
 I ^BPS(9002313.99,1,"CERTIFIER")=DUZ S FLAG="GFS"
"RTN","BPSOSHF",35,0)
 ;
"RTN","BPSOSHF",36,0)
 Q:'$D(BPS("RX",MEDN,"DUR"))
"RTN","BPSOSHF",37,0)
 ;
"RTN","BPSOSHF",38,0)
 ;next we need to figure out which fields on this format are really
"RTN","BPSOSHF",39,0)
 ; needed, then we will loop through and populate them
"RTN","BPSOSHF",40,0)
 ;
"RTN","BPSOSHF",41,0)
 D GETFLDS(FORMAT,NODE,.FIELD)
"RTN","BPSOSHF",42,0)
 ;
"RTN","BPSOSHF",43,0)
 ; now lets get, format and set the field
"RTN","BPSOSHF",44,0)
 S (ORD,RECCNT,DUR)=0
"RTN","BPSOSHF",45,0)
 S RECCNT=RECCNT+1
"RTN","BPSOSHF",46,0)
 F  S DUR=$O(BPS("RX",MEDN,"DUR",DUR)) Q:DUR=""  D
"RTN","BPSOSHF",47,0)
 . S FLDNUM="" F  S FLDNUM=$O(BPS("RX",MEDN,"DUR",DUR,FLDNUM)) Q:FLDNUM=""  D
"RTN","BPSOSHF",48,0)
 .. S ORD="",FOUND=0
"RTN","BPSOSHF",49,0)
 .. F  S ORD=$O(FIELD(ORD)) Q:ORD=""  D  Q:FOUND
"RTN","BPSOSHF",50,0)
 ... S FLDNUMB="",FLDNUMB=$P(FIELD(ORD),U,2) Q:FLDNUMB'=FLDNUM
"RTN","BPSOSHF",51,0)
 ... S FLDIEN="",FLDIEN=$P(FIELD(ORD),U)
"RTN","BPSOSHF",52,0)
 ... S BPS("X")=BPS("RX",MEDN,"DUR",DUR,FLDNUM)
"RTN","BPSOSHF",53,0)
 ... S FOUND=1
"RTN","BPSOSHF",54,0)
 ... D XFLDCODE^BPSOSCF(NODE,FLDIEN,FLAG)  ;format/set
"RTN","BPSOSHF",55,0)
 ;
"RTN","BPSOSHF",56,0)
 ; this sets the record count and last record on the subfile
"RTN","BPSOSHF",57,0)
 S ^BPSC(BPS(9002313.02),400,BPS(9002313.0201),473.01,0)="^9002313.1001A^"_RECCNT_"^"_RECCNT
"RTN","BPSOSHF",58,0)
 ;
"RTN","BPSOSHF",59,0)
 Q
"RTN","BPSOSHF",60,0)
 ;
"RTN","BPSOSHF",61,0)
COB(FORMAT,NODE,MEDN) ; COB fields processing, NODE=160
"RTN","BPSOSHF",62,0)
 ;---------------------------------------------------------------
"RTN","BPSOSHF",63,0)
 ; The COB data is stored in the following local array:
"RTN","BPSOSHF",64,0)
 ;
"RTN","BPSOSHF",65,0)
 ;      BPS("RX",MEDN,"OTHER PAYER",.....
"RTN","BPSOSHF",66,0)
 ;
"RTN","BPSOSHF",67,0)
 ; Array built in routine BPSOSCD.
"RTN","BPSOSHF",68,0)
 ; Special note - Overrides are not allowed on this multiple.
"RTN","BPSOSHF",69,0)
 ;    "Special" code is not accounted for either.
"RTN","BPSOSHF",70,0)
 ;---------------------------------------------------------------
"RTN","BPSOSHF",71,0)
 ;
"RTN","BPSOSHF",72,0)
 N FIELD,FLD,OVERRIDE,FLAG,ORD,NCPFLD,BPD,BPD1,BPD2,PCE,BPSOPIEN,BPSOAIEN,BPSORIEN
"RTN","BPSOSHF",73,0)
 S FLAG="FS"
"RTN","BPSOSHF",74,0)
 I ^BPS(9002313.99,1,"CERTIFIER")=DUZ S FLAG="GFS"
"RTN","BPSOSHF",75,0)
 ;
"RTN","BPSOSHF",76,0)
 ; Quit if there is no data in the array
"RTN","BPSOSHF",77,0)
 Q:'$D(BPS("RX",MEDN,"OTHER PAYER"))
"RTN","BPSOSHF",78,0)
 ;
"RTN","BPSOSHF",79,0)
 ; next we need to figure out which fields on this format are really
"RTN","BPSOSHF",80,0)
 ; needed, then we will loop through and populate them
"RTN","BPSOSHF",81,0)
 ;
"RTN","BPSOSHF",82,0)
 D GETFLDS(FORMAT,NODE,.FIELD)
"RTN","BPSOSHF",83,0)
 ;
"RTN","BPSOSHF",84,0)
 ; re-sort this list by the NCPDP field#
"RTN","BPSOSHF",85,0)
 ; NCPFLD(NCPDP FIELD#) = internal field#
"RTN","BPSOSHF",86,0)
 K NCPFLD S ORD=0 F  S ORD=$O(FIELD(ORD)) Q:'ORD  S FLD=$P(FIELD(ORD),U,2) I FLD'="" S NCPFLD(FLD)=+FIELD(ORD)
"RTN","BPSOSHF",87,0)
 ;
"RTN","BPSOSHF",88,0)
 ; see if 337-4C is needed
"RTN","BPSOSHF",89,0)
 S FLD=337
"RTN","BPSOSHF",90,0)
 I $D(NCPFLD(FLD)) D
"RTN","BPSOSHF",91,0)
 . S BPS("X")=$P($G(BPS("RX",MEDN,"OTHER PAYER",0)),U,1)     ; get
"RTN","BPSOSHF",92,0)
 . I BPS("X")="" Q
"RTN","BPSOSHF",93,0)
 . D XFLDCODE^BPSOSCF(NODE,NCPFLD(FLD),FLAG)                 ; format/set
"RTN","BPSOSHF",94,0)
 . Q
"RTN","BPSOSHF",95,0)
 ;
"RTN","BPSOSHF",96,0)
 ; now lets get, format and set the rest of the COB fields
"RTN","BPSOSHF",97,0)
 S BPSOPIEN=0 F  S BPSOPIEN=$O(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN)) Q:'BPSOPIEN  D
"RTN","BPSOSHF",98,0)
 . S BPD=$G(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,0))
"RTN","BPSOSHF",99,0)
 . F PCE=1:1:7 D
"RTN","BPSOSHF",100,0)
 .. S FLD=$S(PCE=1:337,PCE=2:338,PCE=3:339,PCE=4:340,PCE=5:443,PCE=6:341,PCE=7:471,1:0) Q:'FLD
"RTN","BPSOSHF",101,0)
 .. I '$D(NCPFLD(FLD)) Q                          ; field not needed
"RTN","BPSOSHF",102,0)
 .. I $P(BPD,U,PCE)="" Q                          ; data is nil
"RTN","BPSOSHF",103,0)
 .. S BPS("X")=$P(BPD,U,PCE)                      ; get
"RTN","BPSOSHF",104,0)
 .. D XFLDCODE^BPSOSCF(NODE,NCPFLD(FLD),FLAG)     ; format/set
"RTN","BPSOSHF",105,0)
 .. Q
"RTN","BPSOSHF",106,0)
 . ;
"RTN","BPSOSHF",107,0)
 . ; now look at the other payer amount paid fields
"RTN","BPSOSHF",108,0)
 . S BPSOAIEN=0 F  S BPSOAIEN=$O(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,"P",BPSOAIEN)) Q:'BPSOAIEN  D
"RTN","BPSOSHF",109,0)
 .. S BPD1=$G(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,"P",BPSOAIEN,0))
"RTN","BPSOSHF",110,0)
 .. F PCE=1,2 D
"RTN","BPSOSHF",111,0)
 ... S FLD=$S(PCE=1:431,PCE=2:342,1:0) Q:'FLD
"RTN","BPSOSHF",112,0)
 ... I '$D(NCPFLD(FLD)) Q                          ; field not needed
"RTN","BPSOSHF",113,0)
 ... I $P(BPD1,U,PCE)="" Q                         ; data is nil
"RTN","BPSOSHF",114,0)
 ... S BPS("X")=$P(BPD1,U,PCE)                     ; get
"RTN","BPSOSHF",115,0)
 ... D XFLDCODE^BPSOSCF(NODE,NCPFLD(FLD),FLAG)     ; format/set
"RTN","BPSOSHF",116,0)
 .. Q
"RTN","BPSOSHF",117,0)
 . ;
"RTN","BPSOSHF",118,0)
 . ; now look at the other payer reject code fields
"RTN","BPSOSHF",119,0)
 . S BPSORIEN=0 F  S BPSORIEN=$O(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,"R",BPSORIEN)) Q:'BPSORIEN  D
"RTN","BPSOSHF",120,0)
 .. S BPD2=$G(BPS("RX",MEDN,"OTHER PAYER",BPSOPIEN,"R",BPSORIEN,0))
"RTN","BPSOSHF",121,0)
 .. S FLD=472
"RTN","BPSOSHF",122,0)
 .. I '$D(NCPFLD(FLD)) Q                          ; field not needed
"RTN","BPSOSHF",123,0)
 .. I BPD2="" Q                                   ; data is nil
"RTN","BPSOSHF",124,0)
 .. S BPS("X")=BPD2                               ; get
"RTN","BPSOSHF",125,0)
 .. D XFLDCODE^BPSOSCF(NODE,NCPFLD(FLD),FLAG)     ; format/set
"RTN","BPSOSHF",126,0)
 .. Q
"RTN","BPSOSHF",127,0)
 . Q
"RTN","BPSOSHF",128,0)
 ;
"RTN","BPSOSHF",129,0)
COBX ;
"RTN","BPSOSHF",130,0)
 Q
"RTN","BPSOSHF",131,0)
 ;
"RTN","BPSOSHF",132,0)
GETFLDS(FORMAT,NODE,FIELD) ;EP NCPDP 5.1
"RTN","BPSOSHF",133,0)
 ;---------------------------------------------------------------
"RTN","BPSOSHF",134,0)
 ;This routine will get the list of repeating fields that must be
"RTN","BPSOSHF",135,0)
 ; be worked with separately
"RTN","BPSOSHF",136,0)
 ; (This was originally coded for the DUR/PPS segment - I'm not
"RTN","BPSOSHF",137,0)
 ; 100% sure how and if it will work for the other repeating
"RTN","BPSOSHF",138,0)
 ; fields that exist within a segment.)
"RTN","BPSOSHF",139,0)
 ;---------------------------------------------------------------
"RTN","BPSOSHF",140,0)
 ; Coming in:
"RTN","BPSOSHF",141,0)
 ;   FORMAT = BPSF(9002313.92 's format IEN
"RTN","BPSOSHF",142,0)
 ;   NODE   = which segment we are processing (i.e. 180 - DUR/PPS)
"RTN","BPSOSHF",143,0)
 ;  .FIELD  = array to store the values in
"RTN","BPSOSHF",144,0)
 ;
"RTN","BPSOSHF",145,0)
 ; Exitting:
"RTN","BPSOSHF",146,0)
 ;  .FIELD array will look like:
"RTN","BPSOSHF",147,0)
 ;     FIELD(ord)=int^ext
"RTN","BPSOSHF",148,0)
 ;  Where:   ext = external field number from BPSF(9002313.91
"RTN","BPSOSHF",149,0)
 ;           int = internal field number from BPSF(9002313.91
"RTN","BPSOSHF",150,0)
 ;           ord = the order of the field - used in creating clm
"RTN","BPSOSHF",151,0)
 ;---------------------------------------------------------------
"RTN","BPSOSHF",152,0)
 ;
"RTN","BPSOSHF",153,0)
 N ORDER,RECMIEN,MDATA,FLDIEN,FLDNUM,DUR
"RTN","BPSOSHF",154,0)
 ;
"RTN","BPSOSHF",155,0)
 S ORDER=0
"RTN","BPSOSHF",156,0)
 ;
"RTN","BPSOSHF",157,0)
 F  D  Q:'ORDER
"RTN","BPSOSHF",158,0)
 . ;
"RTN","BPSOSHF",159,0)
 . ; let's order through the format file for this node
"RTN","BPSOSHF",160,0)
 . ;
"RTN","BPSOSHF",161,0)
 . S ORDER=$O(^BPSF(9002313.92,FORMAT,NODE,"B",ORDER)) Q:'ORDER
"RTN","BPSOSHF",162,0)
 . S RECMIEN=$O(^BPSF(9002313.92,FORMAT,NODE,"B",ORDER,0))
"RTN","BPSOSHF",163,0)
 . I 'RECMIEN D IMPOSS^BPSOSUE("DB","TI","NODE="_NODE,"ORDER="_ORDER,2,$T(+0))
"RTN","BPSOSHF",164,0)
 . S MDATA=^BPSF(9002313.92,FORMAT,NODE,RECMIEN,0)
"RTN","BPSOSHF",165,0)
 . S FLDIEN=$P(MDATA,U,2)
"RTN","BPSOSHF",166,0)
 . I 'FLDIEN D IMPOSS^BPSOSUE("DB","TI","NODE="_NODE,"RECMIEN="_RECMIEN,3,$T(+0)) ; corrupt or erroneous format file
"RTN","BPSOSHF",167,0)
 . I '$D(^BPSF(9002313.91,FLDIEN,0)) D IMPOSS^BPSOSUE("DB,P","TI","FLDIEN="_FLDIEN,,"DURPPS",$T(+0))  ;incomplete field definition
"RTN","BPSOSHF",168,0)
 . ;
"RTN","BPSOSHF",169,0)
 . ;lets create a list of fields we need
"RTN","BPSOSHF",170,0)
 . S FLDNUM=$P($G(^BPSF(9002313.91,FLDIEN,0)),U)
"RTN","BPSOSHF",171,0)
 . S:FLDNUM'=111 FIELD(ORDER)=FLDIEN_"^"_FLDNUM
"RTN","BPSOSHF",172,0)
 ;
"RTN","BPSOSHF",173,0)
 ;
"RTN","BPSOSHF",174,0)
 Q
"RTN","BPSOSIY")
0^27^B67267504
"RTN","BPSOSIY",1,0)
BPSOSIY ;BHAM ISC/FCS/DRS/DLF - Updating BPS Transaction record ;11/7/07  17:29
"RTN","BPSOSIY",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,6,7,8**;JUN 2004;Build 29
"RTN","BPSOSIY",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSIY",4,0)
 Q
"RTN","BPSOSIY",5,0)
 ;
"RTN","BPSOSIY",6,0)
 ; INIT - Update BPS Transaction
"RTN","BPSOSIY",7,0)
 ; Input
"RTN","BPSOSIY",8,0)
 ;   IEN59 - BPS Transaction
"RTN","BPSOSIY",9,0)
 ;   MOREDATA is not passed but assumed to exist
"RTN","BPSOSIY",10,0)
 ;   BP77 - BPS REQUEST ien
"RTN","BPSOSIY",11,0)
 ; Returns
"RTN","BPSOSIY",12,0)
 ;   ERROR - 0 or error number
"RTN","BPSOSIY",13,0)
INIT(IEN59,BP77) ;EP - from BPSOSIZ
"RTN","BPSOSIY",14,0)
 N BPCOB,BPSTIME
"RTN","BPSOSIY",15,0)
 ;
"RTN","BPSOSIY",16,0)
 I $G(BP77)>0 D UPD7759^BPSOSRX4(BP77,IEN59)
"RTN","BPSOSIY",17,0)
 ;
"RTN","BPSOSIY",18,0)
 ; Initialize variables
"RTN","BPSOSIY",19,0)
 N FDA,MSG,FN,IENS,REC,B1,X1,X2,X3,ERROR,SEQ,X4
"RTN","BPSOSIY",20,0)
 N RXI,RXR,DIV
"RTN","BPSOSIY",21,0)
 S FN=9002313.59,REC=IEN59_",",ERROR=0
"RTN","BPSOSIY",22,0)
 S RXI=$P(IEN59,".",1),RXR=+$E($P(IEN59,".",2),1,4)
"RTN","BPSOSIY",23,0)
 I RXI="" Q 11
"RTN","BPSOSIY",24,0)
 ;
"RTN","BPSOSIY",25,0)
 ; Change status to 0% (Waiting to Start), which will reset START TIME,
"RTN","BPSOSIY",26,0)
 ;   and then to 10% (Building transaction)
"RTN","BPSOSIY",27,0)
 D SETSTAT^BPSOSU(IEN59,0)
"RTN","BPSOSIY",28,0)
 D SETSTAT^BPSOSU(IEN59,10)
"RTN","BPSOSIY",29,0)
 ;
"RTN","BPSOSIY",30,0)
 ; Get the Outpatient Site
"RTN","BPSOSIY",31,0)
 S DIV=$$GETDIV^BPSOSQC(RXI,RXR)
"RTN","BPSOSIY",32,0)
 ;
"RTN","BPSOSIY",33,0)
 ; If there are Prior Auth or Sub Clar Code override, create override
"RTN","BPSOSIY",34,0)
 ;   record.  Note that setting of MOREDATA("BPOVRIEN") in this routine
"RTN","BPSOSIY",35,0)
 ;   will not conflict with prior setting of this value of BPOVRIEN
"RTN","BPSOSIY",36,0)
 ;   since BPOVRIEN and BPSAUTH/BPSCLARF are mutually exclusive
"RTN","BPSOSIY",37,0)
 I $G(MOREDATA("BPSAUTH"))]""!($G(MOREDATA("BPSCLARF"))]"") S MOREDATA("BPOVRIEN")=$$OVERRIDE(IEN59)
"RTN","BPSOSIY",38,0)
 ;
"RTN","BPSOSIY",39,0)
 ; Set BPSDATA into local variable
"RTN","BPSOSIY",40,0)
 S B1=$G(MOREDATA("BPSDATA",1))
"RTN","BPSOSIY",41,0)
 ;
"RTN","BPSOSIY",42,0)
 ; Get first record from MOREDATA("IBDATA") as there are some
"RTN","BPSOSIY",43,0)
 ;   non-multiple fields that need it
"RTN","BPSOSIY",44,0)
 S X2="",SEQ=$O(MOREDATA("IBDATA",""))
"RTN","BPSOSIY",45,0)
 I SEQ S X2=$G(MOREDATA("IBDATA",SEQ,2))
"RTN","BPSOSIY",46,0)
 ;
"RTN","BPSOSIY",47,0)
 ; Set non-multiple fields
"RTN","BPSOSIY",48,0)
 S FDA(FN,REC,1.07)=$$GETPHARM^BPSUTIL(DIV) ;BPS Pharmacy
"RTN","BPSOSIY",49,0)
 S FDA(FN,REC,1.08)=1   ;PINS piece
"RTN","BPSOSIY",50,0)
 S FDA(FN,REC,1.11)=RXI ;Prescription
"RTN","BPSOSIY",51,0)
 I $P($G(^BPST(IEN59,1)),U,12)=1 S FDA(FN,REC,1.12)=2 ;Resubmit after reversal
"RTN","BPSOSIY",52,0)
 S FDA(FN,REC,1.13)=$G(MOREDATA("BPOVRIEN"))  ;NCPDP Overrides
"RTN","BPSOSIY",53,0)
 S FDA(FN,REC,5)=$$RXAPI1^BPSUTIL1(RXI,2,"I") ;Patient
"RTN","BPSOSIY",54,0)
 I '$P($G(^BPST(IEN59,1)),U,12) S FDA(FN,REC,6)=$G(MOREDATA("SUBMIT TIME")) ;Submit Date/Time
"RTN","BPSOSIY",55,0)
 S FDA(FN,REC,9)=RXR  ;Refill
"RTN","BPSOSIY",56,0)
 S FDA(FN,REC,10)=$P(B1,U,3)  ;NDC
"RTN","BPSOSIY",57,0)
 S FDA(FN,REC,11)=DIV ;Outpatient Site
"RTN","BPSOSIY",58,0)
 S FDA(FN,REC,13)=$G(MOREDATA("USER")) ;User
"RTN","BPSOSIY",59,0)
 S FDA(FN,REC,501)=$P(B1,U,1) ;Drug Quantify
"RTN","BPSOSIY",60,0)
 S FDA(FN,REC,502)=$P(B1,U,2) ;Ingredient Cost
"RTN","BPSOSIY",61,0)
 S FDA(FN,REC,504)=$P(X2,U,1) ;Dispense Fee
"RTN","BPSOSIY",62,0)
 S FDA(FN,REC,505)=$P(X2,U,3) ;Total Price
"RTN","BPSOSIY",63,0)
 S FDA(FN,REC,507)=$P(X2,U,5) ;Administrative Fee
"RTN","BPSOSIY",64,0)
 S FDA(FN,REC,508)=$E($P(B1,U,7),1,2) ;Dispense Unit
"RTN","BPSOSIY",65,0)
 S FDA(FN,REC,901)=1          ;Current VA Insurer
"RTN","BPSOSIY",66,0)
 S FDA(FN,REC,1201)=$G(MOREDATA("RX ACTION")) ;RX Action
"RTN","BPSOSIY",67,0)
 S FDA(FN,REC,1202)=$G(MOREDATA("DATE OF SERVICE")) ;Date of Service
"RTN","BPSOSIY",68,0)
 S FDA(FN,REC,901.04)=$G(MOREDATA("ELIG")) ;Eligibility info returned from billing determination
"RTN","BPSOSIY",69,0)
 ;
"RTN","BPSOSIY",70,0)
 ; File secondary billing fields
"RTN","BPSOSIY",71,0)
 I $$COB59^BPSUTIL2(IEN59)=2 D SECBIL59^BPSPRRX6(.MOREDATA,IEN59)
"RTN","BPSOSIY",72,0)
 ; File non-multiple fields - Record is already defined
"RTN","BPSOSIY",73,0)
 D FILE^DIE("","FDA","MSG")
"RTN","BPSOSIY",74,0)
 I $D(MSG) D  Q ERROR
"RTN","BPSOSIY",75,0)
 . S ERROR=12
"RTN","BPSOSIY",76,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Non-multiple fields did not file")
"RTN","BPSOSIY",77,0)
 . D LOG^BPSOSL(IEN59,"MSG Array:")
"RTN","BPSOSIY",78,0)
 . D LOGARRAY^BPSOSL(IEN59,"MSG")
"RTN","BPSOSIY",79,0)
 . D LOG^BPSOSL(IEN59,"FDA Array:")
"RTN","BPSOSIY",80,0)
 . D LOGARRAY^BPSOSL(IEN59,"FDA")
"RTN","BPSOSIY",81,0)
 ;
"RTN","BPSOSIY",82,0)
 ; Build Multiple
"RTN","BPSOSIY",83,0)
 S SEQ=""
"RTN","BPSOSIY",84,0)
 F  S SEQ=$O(MOREDATA("IBDATA",SEQ)) Q:SEQ=""  D  I ERROR Q
"RTN","BPSOSIY",85,0)
 . K FDA,MSG,IENS
"RTN","BPSOSIY",86,0)
 . S FN=9002313.59902,IENS="+1,"_REC,IENS(1)=SEQ
"RTN","BPSOSIY",87,0)
 . S X1=$G(MOREDATA("IBDATA",SEQ,1)),X2=$G(MOREDATA("IBDATA",SEQ,2)),X3=$G(MOREDATA("IBDATA",SEQ,3)),X4=$G(MOREDATA("IBDATA",SEQ,4))
"RTN","BPSOSIY",88,0)
 . ;
"RTN","BPSOSIY",89,0)
 . ; Update fields
"RTN","BPSOSIY",90,0)
 . S FDA(FN,IENS,.01)=$P(X1,U,1)    ;Plan ID
"RTN","BPSOSIY",91,0)
 . S FDA(FN,IENS,902.03)=$P(X1,U,2) ;BIN
"RTN","BPSOSIY",92,0)
 . S FDA(FN,IENS,902.04)=$P(X1,U,3) ;PCN
"RTN","BPSOSIY",93,0)
 . S FDA(FN,IENS,902.05)=$P(X1,U,5) ;Group ID
"RTN","BPSOSIY",94,0)
 . S FDA(FN,IENS,902.06)=$P(X1,U,6) ;Cardholder ID
"RTN","BPSOSIY",95,0)
 . S FDA(FN,IENS,902.07)=$S(+$P(X1,U,7)>4:4,1:+$P(X1,U,7)) ;Patient Relationship Code
"RTN","BPSOSIY",96,0)
 . S FDA(FN,IENS,902.08)=$P($P(X1,U,8)," ") ;Cardholder First Name
"RTN","BPSOSIY",97,0)
 . S FDA(FN,IENS,902.09)=$P(X1,U,9)  ;Cardholder Last Name
"RTN","BPSOSIY",98,0)
 . S FDA(FN,IENS,902.11)=$P(X1,U,10) ;Home Plan State
"RTN","BPSOSIY",99,0)
 . S FDA(FN,IENS,902.12)=$P(X2,U,1)  ;Dispense Fee
"RTN","BPSOSIY",100,0)
 . S FDA(FN,IENS,902.13)=$P(X2,U,2)  ;Basis of Cost Determination
"RTN","BPSOSIY",101,0)
 . S FDA(FN,IENS,902.14)=$P(X2,U,3)  ;Usual & Customary Charge
"RTN","BPSOSIY",102,0)
 . S FDA(FN,IENS,902.15)=$P(X2,U,4)  ;Gross Amt Due
"RTN","BPSOSIY",103,0)
 . S FDA(FN,IENS,902.16)=$P(X2,U,5)  ;Administrative Fee
"RTN","BPSOSIY",104,0)
 . S FDA(FN,IENS,902.17)=$P(B1,U,4)  ;VA Fill Number
"RTN","BPSOSIY",105,0)
 . S FDA(FN,IENS,902.18)=$P(X1,U,13) ;Software/Vendor Cert ID
"RTN","BPSOSIY",106,0)
 . S FDA(FN,IENS,902.22)=$P(B1,U,5)  ;Certify Mode
"RTN","BPSOSIY",107,0)
 . S FDA(FN,IENS,902.23)=$P(B1,U,6)  ;Certification IEN
"RTN","BPSOSIY",108,0)
 . S FDA(FN,IENS,902.24)=$P(X1,U,14) ;Plan Name
"RTN","BPSOSIY",109,0)
 . S FDA(FN,IENS,902.25)=$P(X3,U,1)  ;Group Name
"RTN","BPSOSIY",110,0)
 . S FDA(FN,IENS,902.26)=$P(X3,U,2)  ;Insurance Co Phone #
"RTN","BPSOSIY",111,0)
 . S FDA(FN,IENS,902.27)=$P(X3,U,3)  ;Pharmacy Plan ID
"RTN","BPSOSIY",112,0)
 . S FDA(FN,IENS,902.28)=$P(X3,U,4)  ;Eligibility
"RTN","BPSOSIY",113,0)
 . S FDA(FN,IENS,902.33)=$P(X3,U,5)  ;insurance ien
"RTN","BPSOSIY",114,0)
 . S FDA(FN,IENS,902.32)=$P(X3,U,6)  ;Pharmacy Plan ID
"RTN","BPSOSIY",115,0)
 . ;the following fields are used only for secondary billing and for primary Tricare billing
"RTN","BPSOSIY",116,0)
 . ;in both cases only entry = 1 in the multiple will be created EVEN if the sequence is 2 (for secondary)
"RTN","BPSOSIY",117,0)
 . ;Note: actually only the entry = 1 is used for primary billing as well, others are never used
"RTN","BPSOSIY",118,0)
 . I SEQ=1 D
"RTN","BPSOSIY",119,0)
 . . S FDA(FN,IENS,902.29)=$G(MOREDATA("RTYPE"))  ;Rate Type
"RTN","BPSOSIY",120,0)
 . . S FDA(FN,IENS,902.3)=$G(MOREDATA("PRIMARY BILL"))  ;Primary bill ien
"RTN","BPSOSIY",121,0)
 . . S FDA(FN,IENS,902.31)=$G(MOREDATA("PRIOR PAYMENT"))  ;Prior payment amount
"RTN","BPSOSIY",122,0)
 . ;
"RTN","BPSOSIY",123,0)
 . ; File the data
"RTN","BPSOSIY",124,0)
 . D UPDATE^DIE("","FDA","IENS","MSG")
"RTN","BPSOSIY",125,0)
 . I $D(MSG) D
"RTN","BPSOSIY",126,0)
 .. S ERROR=13
"RTN","BPSOSIY",127,0)
 .. D LOG^BPSOSL(IEN59,$T(+0)_"-Multiple fields did not file, SEQ="_SEQ)
"RTN","BPSOSIY",128,0)
 .. D LOG^BPSOSL(IEN59,"MSG Array:")
"RTN","BPSOSIY",129,0)
 .. D LOGARRAY^BPSOSL(IEN59,"MSG")
"RTN","BPSOSIY",130,0)
 .. D LOG^BPSOSL(IEN59,"IENS Array:")
"RTN","BPSOSIY",131,0)
 .. D LOGARRAY^BPSOSL(IEN59,"IENS")
"RTN","BPSOSIY",132,0)
 .. D LOG^BPSOSL(IEN59,"FDA Array:")
"RTN","BPSOSIY",133,0)
 .. D LOGARRAY^BPSOSL(IEN59,"FDA")
"RTN","BPSOSIY",134,0)
 . ;
"RTN","BPSOSIY",135,0)
 . ; Payer sheets are in external format
"RTN","BPSOSIY",136,0)
 . K FDA,MSG
"RTN","BPSOSIY",137,0)
 . S FN=9002313.59902,IENS=IENS(1)_","_REC
"RTN","BPSOSIY",138,0)
 . S FDA(FN,IENS,902.02)=$P(X1,U,4)  ;Payer Sheet IEN
"RTN","BPSOSIY",139,0)
 . S FDA(FN,IENS,902.19)=$P(X1,U,11) ;B2 Payer Sheet (Reversal)
"RTN","BPSOSIY",140,0)
 . S FDA(FN,IENS,902.21)=$P(X1,U,12) ;B3 Payer Sheet (Rebill)
"RTN","BPSOSIY",141,0)
 . D FILE^DIE("E","FDA","MSG")
"RTN","BPSOSIY",142,0)
 . I $D(MSG) D
"RTN","BPSOSIY",143,0)
 .. S ERROR=14
"RTN","BPSOSIY",144,0)
 .. D LOG^BPSOSL(IEN59,$T(+0)_"-Payer sheets did not file, SEQ="_SEQ)
"RTN","BPSOSIY",145,0)
 .. D LOG^BPSOSL(IEN59,"MSG Array:")
"RTN","BPSOSIY",146,0)
 .. D LOGARRAY^BPSOSL(IEN59,"MSG")
"RTN","BPSOSIY",147,0)
 .. D LOG^BPSOSL(IEN59,"FDA Array:")
"RTN","BPSOSIY",148,0)
 .. D LOGARRAY^BPSOSL(IEN59,"FDA")
"RTN","BPSOSIY",149,0)
 ;
"RTN","BPSOSIY",150,0)
 ; Store DUR multiple if it exists
"RTN","BPSOSIY",151,0)
 N DUR,DURREC
"RTN","BPSOSIY",152,0)
 S FN=9002313.5913,DUR=0
"RTN","BPSOSIY",153,0)
 F  S DUR=$O(MOREDATA("DUR",DUR)) Q:DUR=""  D  I ERROR Q
"RTN","BPSOSIY",154,0)
 . K FDA,MSG,IENS
"RTN","BPSOSIY",155,0)
 . S DURREC=$G(MOREDATA("DUR",DUR,0))
"RTN","BPSOSIY",156,0)
 . S IENS="+1,"_REC,IENS(1)=DUR
"RTN","BPSOSIY",157,0)
 . S FDA(FN,IENS,.01)=DUR  ; DUR Counter
"RTN","BPSOSIY",158,0)
 . S FDA(FN,IENS,1)=$P(DURREC,U,1)    ; DUR Professional Service Code
"RTN","BPSOSIY",159,0)
 . S FDA(FN,IENS,2)=$P(DURREC,U,2)    ; DUR Reason for Service Code
"RTN","BPSOSIY",160,0)
 . S FDA(FN,IENS,3)=$P(DURREC,U,3)    ; DUR Result of Service Code
"RTN","BPSOSIY",161,0)
 . D UPDATE^DIE("","FDA","IENS","MSG")
"RTN","BPSOSIY",162,0)
 . I $D(MSG) D
"RTN","BPSOSIY",163,0)
 .. S ERROR=15
"RTN","BPSOSIY",164,0)
 .. D LOG^BPSOSL(IEN59,$T(+0)_"-DUR fields did not file, DUR="_DUR)
"RTN","BPSOSIY",165,0)
 .. D LOG^BPSOSL(IEN59,"DURREC="_DURREC)
"RTN","BPSOSIY",166,0)
 .. D LOG^BPSOSL(IEN59,"MSG Array:")
"RTN","BPSOSIY",167,0)
 .. D LOGARRAY^BPSOSL(IEN59,"MSG")
"RTN","BPSOSIY",168,0)
 .. D LOG^BPSOSL(IEN59,"IENS Array:")
"RTN","BPSOSIY",169,0)
 .. D LOGARRAY^BPSOSL(IEN59,"IENS")
"RTN","BPSOSIY",170,0)
 .. D LOG^BPSOSL(IEN59,"FDA Array:")
"RTN","BPSOSIY",171,0)
 .. D LOGARRAY^BPSOSL(IEN59,"FDA")
"RTN","BPSOSIY",172,0)
 ;
"RTN","BPSOSIY",173,0)
 Q ERROR
"RTN","BPSOSIY",174,0)
 ;
"RTN","BPSOSIY",175,0)
 ; OVERRIDE - Function to create override record
"RTN","BPSOSIY",176,0)
OVERRIDE(IEN59) ;
"RTN","BPSOSIY",177,0)
 ;Save values into BPS NCPDP OVERRIDES (#9002313.511)
"RTN","BPSOSIY",178,0)
 N BPSFDA,BPSFLD,BPOVRIEN,BPSMSG,BPSQ
"RTN","BPSOSIY",179,0)
 ;
"RTN","BPSOSIY",180,0)
 ; Set Name (.01) to transaction number
"RTN","BPSOSIY",181,0)
 S BPSFDA(9002313.511,"+1,",.01)=IEN59
"RTN","BPSOSIY",182,0)
 ;
"RTN","BPSOSIY",183,0)
 ; Set Created On (.02) to current date/time
"RTN","BPSOSIY",184,0)
 S BPSFDA(9002313.511,"+1,",.02)=$$NOW^BPSOSRX()
"RTN","BPSOSIY",185,0)
 ;
"RTN","BPSOSIY",186,0)
 ; Submission Clarification Code
"RTN","BPSOSIY",187,0)
 I $G(MOREDATA("BPSCLARF"))]"" D
"RTN","BPSOSIY",188,0)
 . S BPSFLD=$O(^BPSF(9002313.91,"B",420,""))
"RTN","BPSOSIY",189,0)
 . I BPSFLD]"" S BPSFDA(9002313.5111,"+2,+1,",.01)=BPSFLD,BPSFDA(9002313.5111,"+2,+1,",.02)=$E(MOREDATA("BPSCLARF"),1,2)
"RTN","BPSOSIY",190,0)
 ;
"RTN","BPSOSIY",191,0)
 ; Prior Auth Fields (Code and Number)
"RTN","BPSOSIY",192,0)
 I $G(MOREDATA("BPSAUTH"))]"" D
"RTN","BPSOSIY",193,0)
 . S BPSFLD=$O(^BPSF(9002313.91,"B",461,""))
"RTN","BPSOSIY",194,0)
 . I BPSFLD]"" S BPSFDA(9002313.5111,"+3,+1,",.01)=BPSFLD,BPSFDA(9002313.5111,"+3,+1,",.02)=$E($P(MOREDATA("BPSAUTH"),U,1),1,2)
"RTN","BPSOSIY",195,0)
 . S BPSFLD=$O(^BPSF(9002313.91,"B",462,""))
"RTN","BPSOSIY",196,0)
 . I BPSFLD]"" S BPSFDA(9002313.5111,"+4,+1,",.01)=BPSFLD,BPSFDA(9002313.5111,"+4,+1,",.02)=$E($P(MOREDATA("BPSAUTH"),U,2),1,11)
"RTN","BPSOSIY",197,0)
 ;
"RTN","BPSOSIY",198,0)
 ; Create the record
"RTN","BPSOSIY",199,0)
 D UPDATE^DIE("","BPSFDA","BPOVRIEN","BPMSG")
"RTN","BPSOSIY",200,0)
 ;
"RTN","BPSOSIY",201,0)
 I $G(BPOVRIEN(1))]"" S BPSQ=BPOVRIEN(1)
"RTN","BPSOSIY",202,0)
 E  S BPSQ=""
"RTN","BPSOSIY",203,0)
 Q BPSQ
"RTN","BPSOSIY",204,0)
 ;
"RTN","BPSOSIY",205,0)
 ; RXPAID - Check for status of previous claim
"RTN","BPSOSIY",206,0)
 ; INPUT
"RTN","BPSOSIY",207,0)
 ;   IEN59 - BPS Transaction
"RTN","BPSOSIY",208,0)
 ; Return
"RTN","BPSOSIY",209,0)
 ;   0 - OK
"RTN","BPSOSIY",210,0)
 ;   1 - Payable
"RTN","BPSOSIY",211,0)
 ;   2 - Reversal not accepted
"RTN","BPSOSIY",212,0)
 ;   3 - Duplicate
"RTN","BPSOSIY",213,0)
RXPAID(IEN59) ;EP - from BPSOSIZ
"RTN","BPSOSIY",214,0)
 N N57
"RTN","BPSOSIY",215,0)
 S N57=$$RXPREV(IEN59)
"RTN","BPSOSIY",216,0)
 I 'N57 Q ""  ; no ECME record of this
"RTN","BPSOSIY",217,0)
 ; If it's a reversal, then our result depends on the reversal:
"RTN","BPSOSIY",218,0)
 ;   Was the reversal accepted?   If so, then No, not paid.
"RTN","BPSOSIY",219,0)
 ;   Was the reversal rejected?   Assume Paid, since we try to
"RTN","BPSOSIY",220,0)
 ;        allow reversals only in the case of a paid original.
"RTN","BPSOSIY",221,0)
 I $$ISREVERS^BPSOS57(N57) Q $S($$REVACC^BPSOS57(N57):0,1:2)
"RTN","BPSOSIY",222,0)
 ;
"RTN","BPSOSIY",223,0)
 ; Not a reversal:
"RTN","BPSOSIY",224,0)
 N X S X=$$CATEG^BPSOSUC(N57)
"RTN","BPSOSIY",225,0)
 Q $S(X="E PAYABLE":1,X="E DUPLICATE":3,1:0)
"RTN","BPSOSIY",226,0)
 ;
"RTN","BPSOSIY",227,0)
 ; RXPREV - Has this item previously been through ECME?
"RTN","BPSOSIY",228,0)
 ; Return false if not
"RTN","BPSOSIY",229,0)
 ; Return pointer to BPS Log of Transactions if true
"RTN","BPSOSIY",230,0)
RXPREV(IEN59) ;
"RTN","BPSOSIY",231,0)
 N RXI,RXR
"RTN","BPSOSIY",232,0)
 S RXI=$P(IEN59,".",1),RXR=+$E($P(IEN59,".",2),1,4)
"RTN","BPSOSIY",233,0)
 Q $O(^BPSTL("NON-FILEMAN","RXIRXR",RXI,RXR,""),-1)
"RTN","BPSOSIZ")
0^22^B16026755
"RTN","BPSOSIZ",1,0)
BPSOSIZ ;BHAM ISC/FCS/DRS/DLF - Filing BPS Transaction ;06/01/2004
"RTN","BPSOSIZ",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8**;JUN 2004;Build 29
"RTN","BPSOSIZ",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSIZ",4,0)
 ;
"RTN","BPSOSIZ",5,0)
 Q
"RTN","BPSOSIZ",6,0)
 ;
"RTN","BPSOSIZ",7,0)
 ; EN - Create and/or update BPS Transaction
"RTN","BPSOSIZ",8,0)
 ; Input
"RTN","BPSOSIZ",9,0)
 ;   IEN59    - BPS Transaction number
"RTN","BPSOSIZ",10,0)
 ;   MOREDATA - Array of data created by BPSNCPD*
"RTN","BPSOSIZ",11,0)
 ;   BP77 - BPS REQUEST file ien
"RTN","BPSOSIZ",12,0)
EN(IEN59,MOREDATA,BP77) ;EP - BPSOSRB
"RTN","BPSOSIZ",13,0)
 ; Initialize variables
"RTN","BPSOSIZ",14,0)
 N RX,RXR,EXISTS,ERROR,X
"RTN","BPSOSIZ",15,0)
 S ERROR=0,RX=$P(IEN59,"."),RXR=+$E($P(IEN59,".",2),1,4)
"RTN","BPSOSIZ",16,0)
 ;
"RTN","BPSOSIZ",17,0)
 ;
"RTN","BPSOSIZ",18,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Building Transaction")
"RTN","BPSOSIZ",19,0)
 ;
"RTN","BPSOSIZ",20,0)
 ; Lock the transaction
"RTN","BPSOSIZ",21,0)
 I '$$LOCK59(IEN59) D ERROR(IEN59,"Could not lock the BPS Transaction") Q
"RTN","BPSOSIZ",22,0)
 ;
"RTN","BPSOSIZ",23,0)
 ; Check for claims that should not be resubmitted
"RTN","BPSOSIZ",24,0)
 ; 
"RTN","BPSOSIZ",25,0)
 ; Remove call to RXPAID^BPSOSIY since this needs to be done in BPSOSRB.
"RTN","BPSOSIZ",26,0)
 I $$COB59^BPSUTIL2(IEN59)=1 S X=$$RXPAID^BPSOSIY(IEN59) I X D ERROR(IEN59,"RXPAID^BPSOSIY returned "_X) Q
"RTN","BPSOSIZ",27,0)
 ; 
"RTN","BPSOSIZ",28,0)
 ;
"RTN","BPSOSIZ",29,0)
 ; Make sure that the record is not already IN PROGRESS
"RTN","BPSOSIZ",30,0)
 S X=+$$STATUS59^BPSOSRX(IEN59)
"RTN","BPSOSIZ",31,0)
 I X'=0,X'=31,X'=99 D ERROR(IEN59,"STATUS is "_X) Q
"RTN","BPSOSIZ",32,0)
 ;
"RTN","BPSOSIZ",33,0)
 ; Check if the BPS Transaction exists
"RTN","BPSOSIZ",34,0)
 S EXISTS=$$EXIST59(IEN59)
"RTN","BPSOSIZ",35,0)
 ;
"RTN","BPSOSIZ",36,0)
 ; If the record exists, delete all but the essential fields
"RTN","BPSOSIZ",37,0)
 I EXISTS D CLEAR59(IEN59) I $G(BP77)>0 D UPD7759^BPSOSRX4(BP77,IEN59)
"RTN","BPSOSIZ",38,0)
 ;
"RTN","BPSOSIZ",39,0)
 ; If the record does not exist, create new record and validate the IEN
"RTN","BPSOSIZ",40,0)
 I 'EXISTS S X=$$NEW59(IEN59,$G(BP77)) I X'=IEN59 D ERROR(IEN59,"NEW59 returned "_X) Q
"RTN","BPSOSIZ",41,0)
 ;
"RTN","BPSOSIZ",42,0)
 ; Update the fields.  If error is returned, log to the BPS Transaction, which
"RTN","BPSOSIZ",43,0)
 ;   we know exists at this point
"RTN","BPSOSIZ",44,0)
 S ERROR=$$INIT^BPSOSIY(IEN59,$G(BP77)) ;MOREDATA is passed in background
"RTN","BPSOSIZ",45,0)
 I ERROR D ERROR^BPSOSU($T(+0),IEN59,ERROR,"BPS Transaction not updated"),UNLOCK59(IEN59) Q
"RTN","BPSOSIZ",46,0)
 ;
"RTN","BPSOSIZ",47,0)
 ; Validate the transaction
"RTN","BPSOSIZ",48,0)
 D ONE59^BPSOSQA(IEN59)
"RTN","BPSOSIZ",49,0)
 ;
"RTN","BPSOSIZ",50,0)
 ; Unlock the transaction
"RTN","BPSOSIZ",51,0)
 D UNLOCK59(IEN59)
"RTN","BPSOSIZ",52,0)
 Q
"RTN","BPSOSIZ",53,0)
 ;
"RTN","BPSOSIZ",54,0)
 ; LOCK59 - Lock Transaction
"RTN","BPSOSIZ",55,0)
LOCK59(IEN59) ;
"RTN","BPSOSIZ",56,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Lock BPS Transaction")
"RTN","BPSOSIZ",57,0)
 L +^BPST(IEN59):5
"RTN","BPSOSIZ",58,0)
 Q $T
"RTN","BPSOSIZ",59,0)
 ;
"RTN","BPSOSIZ",60,0)
 ; UNLOCK59 - Unlock record
"RTN","BPSOSIZ",61,0)
UNLOCK59(IEN59) ;
"RTN","BPSOSIZ",62,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Unlock BPS Transaction")
"RTN","BPSOSIZ",63,0)
 L -^BPST(IEN59)
"RTN","BPSOSIZ",64,0)
 Q
"RTN","BPSOSIZ",65,0)
 ;
"RTN","BPSOSIZ",66,0)
 ; EXISTS - See if the BPS Transaction already exists
"RTN","BPSOSIZ",67,0)
EXIST59(IEN59) ;
"RTN","BPSOSIZ",68,0)
 N X
"RTN","BPSOSIZ",69,0)
 S X=$$FIND1^DIC(9002313.59,,"QX","`"_IEN59)
"RTN","BPSOSIZ",70,0)
 Q $S(X>0:X,X=0:0)
"RTN","BPSOSIZ",71,0)
 ;
"RTN","BPSOSIZ",72,0)
 ; NEW59 - Create a new BPS Transaction record
"RTN","BPSOSIZ",73,0)
 ; IEN59 - BPS TRANSACTION ien
"RTN","BPSOSIZ",74,0)
 ; BP77 - BPS REQUEST file ien
"RTN","BPSOSIZ",75,0)
NEW59(IEN59,BP77) ;
"RTN","BPSOSIZ",76,0)
 ; Initialize variables
"RTN","BPSOSIZ",77,0)
 N FDA,IEN,MSG,FN,BPSTIME,BPCOB
"RTN","BPSOSIZ",78,0)
 ;
"RTN","BPSOSIZ",79,0)
 ; The .01 node and IEN should be the transaction number
"RTN","BPSOSIZ",80,0)
 S FN=9002313.59
"RTN","BPSOSIZ",81,0)
 S (IEN(1),FDA(FN,"+1,",.01))=IEN59
"RTN","BPSOSIZ",82,0)
 ;
"RTN","BPSOSIZ",83,0)
 ; Create the new BPS Transaction record
"RTN","BPSOSIZ",84,0)
 D UPDATE^DIE("","FDA","IEN","MSG")
"RTN","BPSOSIZ",85,0)
 I $D(MSG) Q 0
"RTN","BPSOSIZ",86,0)
 ; check if fields (#16),(#17),(#18) of BPS TRANSACTION are not populated - populate them
"RTN","BPSOSIZ",87,0)
 I $G(BP77)>0 D UPD7759^BPSOSRX4(BP77,IEN59)
"RTN","BPSOSIZ",88,0)
 ; 
"RTN","BPSOSIZ",89,0)
 Q IEN(1)
"RTN","BPSOSIZ",90,0)
 ;
"RTN","BPSOSIZ",91,0)
 ; CLEAR59 - If it exists, clear out the old values
"RTN","BPSOSIZ",92,0)
CLEAR59(IEN59) ;
"RTN","BPSOSIZ",93,0)
 ; Deletes all values except for fields:
"RTN","BPSOSIZ",94,0)
 ;   Entry # (.01)
"RTN","BPSOSIZ",95,0)
 ;   Resubmit after reversal (1.12)
"RTN","BPSOSIZ",96,0)
 ;   Result Text (202)
"RTN","BPSOSIZ",97,0)
 ;   Comments (111 multiple)
"RTN","BPSOSIZ",98,0)
 ; If reverse/resubmit, then also do not clear fields:
"RTN","BPSOSIZ",99,0)
 ;   Status (1)
"RTN","BPSOSIZ",100,0)
 ;   Submit Date/Time (6)
"RTN","BPSOSIZ",101,0)
 ;   Last Update (7)
"RTN","BPSOSIZ",102,0)
 ;   Start Date (15)
"RTN","BPSOSIZ",103,0)
 ;
"RTN","BPSOSIZ",104,0)
 ; Initialize variables
"RTN","BPSOSIZ",105,0)
 N FN,FDA,MSG,FIELD,SKIP,ENTRY
"RTN","BPSOSIZ",106,0)
 S FN=9002313.59
"RTN","BPSOSIZ",107,0)
 ;
"RTN","BPSOSIZ",108,0)
 ; Set up fields that we do not want to delete
"RTN","BPSOSIZ",109,0)
 S SKIP(1.12)="",SKIP(202)=""
"RTN","BPSOSIZ",110,0)
 I $G(MOREDATA("REVERSE THEN RESUBMIT"))=1 S SKIP(1)="",SKIP(6)="",SKIP(7)="",SKIP(15)=""
"RTN","BPSOSIZ",111,0)
 ;
"RTN","BPSOSIZ",112,0)
 ; Start with field .01 so it will not be deleted
"RTN","BPSOSIZ",113,0)
 ; Place 'non-skip' fields in FDA to be deleted
"RTN","BPSOSIZ",114,0)
 S FIELD=.01
"RTN","BPSOSIZ",115,0)
 F  S FIELD=$O(^DD(FN,FIELD)) Q:'FIELD  I '$D(SKIP(FIELD)) S FDA(FN,IEN59_",",FIELD)=""
"RTN","BPSOSIZ",116,0)
 ;
"RTN","BPSOSIZ",117,0)
 ; Delete Insurance multiple
"RTN","BPSOSIZ",118,0)
 S FN=9002313.59902,ENTRY=0
"RTN","BPSOSIZ",119,0)
 F  S ENTRY=$O(^BPST(IEN59,10,ENTRY)) Q:ENTRY="B"!(ENTRY="")  D
"RTN","BPSOSIZ",120,0)
 . S FDA(FN,ENTRY_","_IEN59_",",.01)=""
"RTN","BPSOSIZ",121,0)
 ;
"RTN","BPSOSIZ",122,0)
 ; Delete DUR multiple
"RTN","BPSOSIZ",123,0)
 S FN=9002313.5913,ENTRY=0
"RTN","BPSOSIZ",124,0)
 F  S ENTRY=$O(^BPST(IEN59,13,ENTRY)) Q:+ENTRY=0  D
"RTN","BPSOSIZ",125,0)
 . S FDA(FN,ENTRY_","_IEN59_",",.01)=""
"RTN","BPSOSIZ",126,0)
 ;
"RTN","BPSOSIZ",127,0)
 ; Delete COB OTHER PAYERS multiple
"RTN","BPSOSIZ",128,0)
 S FN=9002313.5914,ENTRY=0
"RTN","BPSOSIZ",129,0)
 F  S ENTRY=$O(^BPST(IEN59,14,ENTRY)) Q:'ENTRY  D
"RTN","BPSOSIZ",130,0)
 . S FDA(FN,ENTRY_","_IEN59_",",.01)=""
"RTN","BPSOSIZ",131,0)
 ;
"RTN","BPSOSIZ",132,0)
 ; Fileman call to do the delete
"RTN","BPSOSIZ",133,0)
 D FILE^DIE("","FDA","MSG")
"RTN","BPSOSIZ",134,0)
 ;
"RTN","BPSOSIZ",135,0)
 ; Update Result Text File with 'PREVIOUSLY['
"RTN","BPSOSIZ",136,0)
 D PREVISLY(IEN59) ; for result text field 202
"RTN","BPSOSIZ",137,0)
 Q
"RTN","BPSOSIZ",138,0)
 ;
"RTN","BPSOSIZ",139,0)
 ; PREVISLY - Add semicolon in between the result text
"RTN","BPSOSIZ",140,0)
PREVISLY(IEN59) ;EP - BPSOSRB, BPSOSU
"RTN","BPSOSIZ",141,0)
 N X
"RTN","BPSOSIZ",142,0)
 S X=$$GET1^DIQ(9002313.59,IEN59,202)
"RTN","BPSOSIZ",143,0)
 I X="" Q
"RTN","BPSOSIZ",144,0)
 S X=$E(";"_X,1,200)
"RTN","BPSOSIZ",145,0)
 N FN,FDA,MSG
"RTN","BPSOSIZ",146,0)
 S FDA(9002313.59,IEN59_",",202)=X
"RTN","BPSOSIZ",147,0)
 D FILE^DIE("","FDA","MSG")
"RTN","BPSOSIZ",148,0)
 Q
"RTN","BPSOSIZ",149,0)
 ;
"RTN","BPSOSIZ",150,0)
 ; ERROR - Log an error to the log
"RTN","BPSOSIZ",151,0)
ERROR(IEN59,MSG) ;
"RTN","BPSOSIZ",152,0)
 N RX,RXR
"RTN","BPSOSIZ",153,0)
 S RX=$P(IEN59,"."),RXR=+$E($P(IEN59,".",2),1,4)
"RTN","BPSOSIZ",154,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Skipping: "_$G(MSG))
"RTN","BPSOSIZ",155,0)
 K ^XTMP("BPSOSRX",RX,RXR)
"RTN","BPSOSIZ",156,0)
 D UNLOCK59(IEN59)
"RTN","BPSOSIZ",157,0)
 Q
"RTN","BPSOSQA")
0^5^B9957067
"RTN","BPSOSQA",1,0)
BPSOSQA ;BHAM ISC/FCS/DRS/DLF - ECME background, Part 1 ;06/02/2004
"RTN","BPSOSQA",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8**;JUN 2004;Build 29
"RTN","BPSOSQA",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSQA",4,0)
 Q
"RTN","BPSOSQA",5,0)
 ;
"RTN","BPSOSQA",6,0)
 ; ONE59 - Validate BPS Transaction data
"RTN","BPSOSQA",7,0)
 ; Input
"RTN","BPSOSQA",8,0)
 ;   IEN59 - BPS Transaction
"RTN","BPSOSQA",9,0)
 ;
"RTN","BPSOSQA",10,0)
ONE59(IEN59) ;EP - from BPSOSIZ
"RTN","BPSOSQA",11,0)
 ; Process this one IEN59
"RTN","BPSOSQA",12,0)
 ;
"RTN","BPSOSQA",13,0)
 ; Initialize variables
"RTN","BPSOSQA",14,0)
 N X1,RX,RXI,RTN
"RTN","BPSOSQA",15,0)
 S X1=$G(^BPST(IEN59,1))
"RTN","BPSOSQA",16,0)
 S RXI=$P(X1,U),RX=$P(X1,U,11),RTN=$T(+0)
"RTN","BPSOSQA",17,0)
 ;
"RTN","BPSOSQA",18,0)
 I RX="" D ERROR^BPSOSU(RTN,IEN59,106,"Prescription Number not found in Transaction") G END
"RTN","BPSOSQA",19,0)
 I RXI="" D ERROR^BPSOSU(RTN,IEN59,107,"Fill Number not found in Transaction") G END
"RTN","BPSOSQA",20,0)
 ; Create log entry
"RTN","BPSOSQA",21,0)
 ; Needed for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSOSQA",22,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Validating the BPS Transaction")
"RTN","BPSOSQA",23,0)
 ;
"RTN","BPSOSQA",24,0)
 ; Check for existence of the prescription
"RTN","BPSOSQA",25,0)
 I $$RXAPI1^BPSUTIL1(RX,.01,"I")="" D ERROR^BPSOSU(RTN,IEN59,101,"Missing RX # field .01") G END
"RTN","BPSOSQA",26,0)
 ;
"RTN","BPSOSQA",27,0)
 ; If there is a refill, check for the existence of the refill
"RTN","BPSOSQA",28,0)
 I RXI,$$RXSUBF1^BPSUTIL1(RX,52,52.1,RXI,.01,"I")="" D ERROR^BPSOSU(RTN,IEN59,102,"Missing RX Refill field .01") G END
"RTN","BPSOSQA",29,0)
 ;
"RTN","BPSOSQA",30,0)
 ; Check for missing patient
"RTN","BPSOSQA",31,0)
 I '$P(^BPST(IEN59,0),U,6) D ERROR^BPSOSU(RTN,IEN59,103,"Patient missing from BPS Transaction") G END
"RTN","BPSOSQA",32,0)
 ;
"RTN","BPSOSQA",33,0)
 ; Check for missing division
"RTN","BPSOSQA",34,0)
 I '$P(X1,U,4) D ERROR^BPSOSU(RTN,IEN59,104,"Division missing from BPS Transaction") G END
"RTN","BPSOSQA",35,0)
 ;
"RTN","BPSOSQA",36,0)
 ; Check for missing BPS Pharmacy
"RTN","BPSOSQA",37,0)
 I '$P(X1,U,7)="" D ERROR^BPSOSU(RTN,IEN59,105,"ECME Pharmacy missing from BPS Transaction") G END
"RTN","BPSOSQA",38,0)
 ;
"RTN","BPSOSQA",39,0)
 ; Check for missing insurance node
"RTN","BPSOSQA",40,0)
 I '$D(^BPST(IEN59,10,1,0)) D ERROR^BPSOSU(RTN,IEN59,106,"Missing Insurance in BPST("_IEN59_",10,1,0)") G END
"RTN","BPSOSQA",41,0)
 ;
"RTN","BPSOSQA",42,0)
 ; Check if insurer is asleep and this is not the prober transaction,
"RTN","BPSOSQA",43,0)
 ; and if so set status to 31.
"RTN","BPSOSQA",44,0)
 N GRPLAN S GRPLAN=$$GETPLN59^BPSUTIL2(IEN59)
"RTN","BPSOSQA",45,0)
 N BPSIEN77 S BPSIEN77=$P(^BPST(IEN59,0),U,12)
"RTN","BPSOSQA",46,0)
 I $$ISASLEEP^BPSOSQF(+GRPLAN),BPSIEN77'=$$PROBER^BPSOSQF(+GRPLAN) D  G END
"RTN","BPSOSQA",47,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Insurer "_$P(GRPLAN,U,2)_" is asleep. Will retry later.")
"RTN","BPSOSQA",48,0)
 . D SETSTAT^BPSOSU(IEN59,31)
"RTN","BPSOSQA",49,0)
 ;
"RTN","BPSOSQA",50,0)
 ; If we got this far, we did not get an error
"RTN","BPSOSQA",51,0)
 ; Change status to 30 (Waiting for packet build)
"RTN","BPSOSQA",52,0)
 D SETSTAT^BPSOSU(IEN59,30)
"RTN","BPSOSQA",53,0)
 ;
"RTN","BPSOSQA",54,0)
END ; Common exit point
"RTN","BPSOSQA",55,0)
 ;
"RTN","BPSOSQA",56,0)
 ; Log payer sequence
"RTN","BPSOSQA",57,0)
 N BPSCOB
"RTN","BPSOSQA",58,0)
 S BPSCOB=$$COB59^BPSUTIL2(IEN59),BPSCOB=$S(BPSCOB=2:"-Secondary",BPSCOB=3:"-Tertiary",1:"-Primary"),BPSCOB=BPSCOB_" Insurance"
"RTN","BPSOSQA",59,0)
 D LOG^BPSOSL(IEN59,$T(+0)_BPSCOB)
"RTN","BPSOSQA",60,0)
 ;
"RTN","BPSOSQA",61,0)
 ; Log the contents of Transaction record
"RTN","BPSOSQA",62,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Contents of ^BPST("_IEN59_"):")
"RTN","BPSOSQA",63,0)
 D LOG59(IEN59)
"RTN","BPSOSQA",64,0)
 ;
"RTN","BPSOSQA",65,0)
 ; If there are claims at 30%, fire up the packet process
"RTN","BPSOSQA",66,0)
 I $O(^BPST("AD",30,0)) D TASK
"RTN","BPSOSQA",67,0)
 Q
"RTN","BPSOSQA",68,0)
 ;
"RTN","BPSOSQA",69,0)
 ;
"RTN","BPSOSQA",70,0)
LOG59(IEN59) ; Log the IEN59 array
"RTN","BPSOSQA",71,0)
 N A
"RTN","BPSOSQA",72,0)
 M A=^BPST(IEN59)
"RTN","BPSOSQA",73,0)
 D LOGARRAY^BPSOSL(IEN59,"A")
"RTN","BPSOSQA",74,0)
 Q
"RTN","BPSOSQA",75,0)
 ;
"RTN","BPSOSQA",76,0)
TASK ;EP - from BPSOSQ2,BPSOSQ4,BPSOSRB
"RTN","BPSOSQA",77,0)
 N X,%DT,Y S X="N",%DT="ST" D ^%DT
"RTN","BPSOSQA",78,0)
 D TASKAT(Y)
"RTN","BPSOSQA",79,0)
 Q
"RTN","BPSOSQA",80,0)
 ;
"RTN","BPSOSQA",81,0)
TASKAT(ZTDTH) ;EP - from BPSOSQ4 (requeue if insurer is sleeping)
"RTN","BPSOSQA",82,0)
 N ZTRTN,ZTIO
"RTN","BPSOSQA",83,0)
 S ZTRTN="PACKETS^BPSOSQ2",ZTIO=""
"RTN","BPSOSQA",84,0)
 D ^%ZTLOAD
"RTN","BPSOSQA",85,0)
 Q
"RTN","BPSOSRB")
0^7^B41392879
"RTN","BPSOSRB",1,0)
BPSOSRB ;BHAM ISC/FCS/DRS/FLS - Process claim on processing queue ;06/01/2004
"RTN","BPSOSRB",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8**;JUN 2004;Build 29
"RTN","BPSOSRB",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSRB",4,0)
 ;
"RTN","BPSOSRB",5,0)
 Q
"RTN","BPSOSRB",6,0)
BACKGR ;
"RTN","BPSOSRB",7,0)
 I '$$LOCKNOW^BPSOSRX("BACKGROUND") Q
"RTN","BPSOSRB",8,0)
 N TYPE,RXI,RXR,IEN59,IEN59PR,BPNOW,BPUNTIL
"RTN","BPSOSRB",9,0)
 N BPIEN77,BPLCKRX,BPQ,BPCOBIND,GRPLAN
"RTN","BPSOSRB",10,0)
 S BPNOW=$$NOW^BPSOSRX()
"RTN","BPSOSRB",11,0)
 ;go through all ACTIVATED
"RTN","BPSOSRB",12,0)
 S RXI="" F  S RXI=$O(^BPS(9002313.77,"AC",1,RXI)) Q:RXI=""  D
"RTN","BPSOSRB",13,0)
 . S RXR="" F  S RXR=$O(^BPS(9002313.77,"AC",1,RXI,RXR)) Q:RXR=""  D
"RTN","BPSOSRB",14,0)
 . . S IEN59PR=+$$IEN59^BPSOSRX(RXI,RXR,0)
"RTN","BPSOSRB",15,0)
 . . S BPLCKRX=$$LOCKRF^BPSOSRX(RXI,RXR,10,IEN59PR,$T(+0)) I BPLCKRX=0 D  Q
"RTN","BPSOSRB",16,0)
 . . . D LOG^BPSOSL(IEN59PR,$T(+0)_"-Failed to $$LOCKRF^BPSOSRX.  Will retry later.")
"RTN","BPSOSRB",17,0)
 . . S BPQ=0
"RTN","BPSOSRB",18,0)
 . . S BPIEN77="" F  S BPIEN77=$O(^BPS(9002313.77,"AC",1,RXI,RXR,BPIEN77)) Q:(+BPIEN77=0)!(BPQ=1)  D
"RTN","BPSOSRB",19,0)
 . . . ;check DONT PROCESS UNTIL field #.08 and if it is greater than NOW then DO NOT process it
"RTN","BPSOSRB",20,0)
 . . . S BPUNTIL=+$P($G(^BPS(9002313.77,BPIEN77,0)),U,8) I BPUNTIL>BPNOW S BPQ=1 Q  ;D LOG^BPSOSL(IEN59,$T(+0)_"-The request cannot be processed until."_BPUNTIL_" Will retry later.") Q
"RTN","BPSOSRB",21,0)
 . . . ;check if PROCESS FLAG is IN PROCESS - if the earlier record for this RX refill is in progress - 
"RTN","BPSOSRB",22,0)
 . . . ;we should not process the next operation queued - go to the next refill (BPQ=1)
"RTN","BPSOSRB",23,0)
 . . . I $P($G(^BPS(9002313.77,BPIEN77,0)),U,4)=2 S BPQ=1 D  Q
"RTN","BPSOSRB",24,0)
 . . . . D LOG^BPSOSL(IEN59,$T(+0)_"-Status is 'IN PROCESS'.  Will retry later.")
"RTN","BPSOSRB",25,0)
 . . . S BPCOBIND=$P(^BPS(9002313.77,BPIEN77,0),U,3)
"RTN","BPSOSRB",26,0)
 . . . S IEN59=$$IEN59^BPSOSRX(RXI,RXR,BPCOBIND)
"RTN","BPSOSRB",27,0)
 . . . ; Removed code to check Insurer Asleep
"RTN","BPSOSRB",28,0)
 . . . S TYPE=$P($G(^BPS(9002313.77,+BPIEN77,1)),U,4),TYPE=$S(TYPE="C":"CLAIM",TYPE="U":"UNCLAIM",1:"UNKNW")
"RTN","BPSOSRB",29,0)
 . . . I TYPE="UNKNW" D LOG^BPSOSL(IEN59,$T(+0)_"-Request Type is unknown. Cannot be processed.") D INACTIVE^BPSOSRX4(+BPIEN77) Q  ;make it inactive
"RTN","BPSOSRB",30,0)
 . . . D LOG^BPSOSL(IEN59,$T(+0)_"-Processing the Activated request "_BPIEN77)
"RTN","BPSOSRB",31,0)
 . . . D LOG^BPSOSL(IEN59,$T(+0)_"-Dequeuing.  Type is "_TYPE)
"RTN","BPSOSRB",32,0)
 . . . ; if this is ACTIVATED then make it IN PROCESS (see SETPRFLG below)
"RTN","BPSOSRB",33,0)
 . . . S BPQ=1 ;
"RTN","BPSOSRB",34,0)
 . . . N TIME,MOREDATA
"RTN","BPSOSRB",35,0)
 . . . S TIME=$P($G(^BPS(9002313.77,+BPIEN77,6)),U,1) ; time requested
"RTN","BPSOSRB",36,0)
 . . . D READMORE^BPSOSRX4(BPIEN77,.MOREDATA)
"RTN","BPSOSRB",37,0)
 . . . ;now it is IN PROCESS - i.e. goes to BACKGR1 (as K ^XTMP("BPS-PROC",TYPE,RXI,RXR in old logic) 
"RTN","BPSOSRB",38,0)
 . . . I +$$INPROCES^BPSOSRX4(BPIEN77)=0 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot change the PROCESS FLAG to IN PROCESS. Cannot be processed.") Q
"RTN","BPSOSRB",39,0)
 . . . D LOG^BPSOSL(IEN59,$T(+0)_"-the request "_BPIEN77_" has been changed to IN PROCESS")
"RTN","BPSOSRB",40,0)
 . . . D BACKGR1(TYPE,RXI,RXR,TIME,.MOREDATA,IEN59,+BPIEN77)
"RTN","BPSOSRB",41,0)
 . . I BPLCKRX D UNLCKRF^BPSOSRX(RXI,RXR,IEN59PR,$T(+0))
"RTN","BPSOSRB",42,0)
 D UNLOCK^BPSOSRX("BACKGROUND")
"RTN","BPSOSRB",43,0)
 Q
"RTN","BPSOSRB",44,0)
 ;
"RTN","BPSOSRB",45,0)
 ;
"RTN","BPSOSRB",46,0)
 ; BACKGR1 - Further processing of the claim
"RTN","BPSOSRB",47,0)
 ; Besides the parameter below, IEN59 also needs to be defined
"RTN","BPSOSRB",48,0)
 ; TYPE - "CLAIM" or "UNCLAIM" 
"RTN","BPSOSRB",49,0)
 ; RXI - PRESCRIPTION file #52 ien
"RTN","BPSOSRB",50,0)
 ; RXR - refill number (0-original)
"RTN","BPSOSRB",51,0)
 ; TIME - time requested
"RTN","BPSOSRB",52,0)
 ; MOREDATA - array with claim data
"RTN","BPSOSRB",53,0)
 ; IEN59 - BPS TRANSACTION ien
"RTN","BPSOSRB",54,0)
 ; BPS77 - BPS REQUEST file ien
"RTN","BPSOSRB",55,0)
BACKGR1(TYPE,RXI,RXR,TIME,MOREDATA,IEN59,BPS77) ;
"RTN","BPSOSRB",56,0)
 ; Resolve multiple requests
"RTN","BPSOSRB",57,0)
 N SKIP S SKIP=0 ; skip if you already got desired result
"RTN","BPSOSRB",58,0)
 N SKIPREAS
"RTN","BPSOSRB",59,0)
 N BPCOBIND S BPCOBIND=$$COB59^BPSUTIL2(IEN59)
"RTN","BPSOSRB",60,0)
 N RESULT,BPSSTAT
"RTN","BPSOSRB",61,0)
 S BPSSTAT=$$STATUS^BPSOSRX(RXI,RXR,0,,BPCOBIND)
"RTN","BPSOSRB",62,0)
 S RESULT=$P(BPSSTAT,U)
"RTN","BPSOSRB",63,0)
 I TYPE="CLAIM" D
"RTN","BPSOSRB",64,0)
 . I $$RXDEL^BPSOS(RXI,RXR) D  Q
"RTN","BPSOSRB",65,0)
 .. S SKIP=1,SKIPREAS="Prescription is marked as DELETED or CANCELLED"
"RTN","BPSOSRB",66,0)
 . ; If it's never been through ECME before, good.
"RTN","BPSOSRB",67,0)
 . I RESULT="" Q
"RTN","BPSOSRB",68,0)
 . ; There's already a complete transaction for this RXI,RXR
"RTN","BPSOSRB",69,0)
 . ; (We screened out "IN PROGRESS" earlier)
"RTN","BPSOSRB",70,0)
 . ; The program to poll indexes would have set DO NOT RESUBMIT.
"RTN","BPSOSRB",71,0)
 . ; Calls from pharm pkg to ECME have '$D(MOREDATA("DO NOT RESUBMIT"))
"RTN","BPSOSRB",72,0)
 . I $D(MOREDATA("DO NOT RESUBMIT")) D
"RTN","BPSOSRB",73,0)
 .. S SKIP=1
"RTN","BPSOSRB",74,0)
 .. S SKIPREAS="MOREDATA(""DO NOT RESUBMIT"") is set"
"RTN","BPSOSRB",75,0)
 E  I TYPE="UNCLAIM" D
"RTN","BPSOSRB",76,0)
 . ; It must have gone through ECME with a payable result
"RTN","BPSOSRB",77,0)
 . I RESULT="E PAYABLE" Q
"RTN","BPSOSRB",78,0)
 . I RESULT="E DUPLICATE" Q
"RTN","BPSOSRB",79,0)
 . N RXACTION S RXACTION=$G(MOREDATA("RX ACTION"))
"RTN","BPSOSRB",80,0)
 . I $P($G(^BPST(IEN59,9)),U,4)="T",((RESULT="E REVERSAL REJECTED")!(RESULT="E REVERSAL UNSTRANDED")),RXACTION="ERES" Q  ;allow to resubmit rejected reversals for Tricare
"RTN","BPSOSRB",81,0)
 . I RESULT="E REVERSAL REJECTED",(",DE,EREV,RS,"[(","_RXACTION_",")) Q
"RTN","BPSOSRB",82,0)
 . ;
"RTN","BPSOSRB",83,0)
 . I RESULT="E REVERSAL UNSTRANDED",RXACTION="EREV" Q
"RTN","BPSOSRB",84,0)
 . ;
"RTN","BPSOSRB",85,0)
 . I RESULT="E REVERSAL OTHER",RXACTION="EREV" Q
"RTN","BPSOSRB",86,0)
 . ;
"RTN","BPSOSRB",87,0)
 . ;allow to process "insurer asleep" status = 31, other IN PROGRESS statuses are not allowed to be processed
"RTN","BPSOSRB",88,0)
 . I RESULT="IN PROGRESS",$P(BPSSTAT,U,4)=31 Q
"RTN","BPSOSRB",89,0)
 . ;
"RTN","BPSOSRB",90,0)
 . S SKIP=1
"RTN","BPSOSRB",91,0)
 . S SKIPREAS="Cannot reverse - previous result was "_RESULT
"RTN","BPSOSRB",92,0)
 E  D IMPOSS^BPSOSUE("P","TI","bad arg TYPE="_TYPE,,"BACKGR1",$T(+0))
"RTN","BPSOSRB",93,0)
 I SKIP D  Q
"RTN","BPSOSRB",94,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Skipping.  Reason: "_SKIPREAS)
"RTN","BPSOSRB",95,0)
 S MOREDATA("SUBMIT TIME")=TIME
"RTN","BPSOSRB",96,0)
 ;
"RTN","BPSOSRB",97,0)
 I TYPE="UNCLAIM" D REVERSE(IEN59,.MOREDATA,$G(BPS77))
"RTN","BPSOSRB",98,0)
 I TYPE="CLAIM" D CLAIM(IEN59,.MOREDATA,$G(BPS77))
"RTN","BPSOSRB",99,0)
 Q
"RTN","BPSOSRB",100,0)
 ;
"RTN","BPSOSRB",101,0)
 ; STARTTIM - Get START TIME field from BPS Transactions
"RTN","BPSOSRB",102,0)
STARTTIM(RXI,RXR) Q $P($G(^BPST($$IEN59^BPSOSRX(RXI,RXR),0)),U,11)
"RTN","BPSOSRB",103,0)
 ;
"RTN","BPSOSRB",104,0)
 ; Process claim request
"RTN","BPSOSRB",105,0)
 ; EP - Above and BPSOSU (for a resubmit after a reversal)
"RTN","BPSOSRB",106,0)
 ; BPS77 - BPS REQUEST file ien
"RTN","BPSOSRB",107,0)
CLAIM(IEN59,MOREDATA,BPS77) ;
"RTN","BPSOSRB",108,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Initiating Claim")
"RTN","BPSOSRB",109,0)
 D EN^BPSOSIZ(IEN59,.MOREDATA,$G(BPS77))
"RTN","BPSOSRB",110,0)
 Q
"RTN","BPSOSRB",111,0)
 ;
"RTN","BPSOSRB",112,0)
 ; Process the reversal
"RTN","BPSOSRB",113,0)
REVERSE(IEN59,MOREDATA,BP77) ;
"RTN","BPSOSRB",114,0)
 N MSG,RETVAL,REV
"RTN","BPSOSRB",115,0)
 ;update/populate fields in BPS REQUEST and BPS TRANSACTION
"RTN","BPSOSRB",116,0)
 I $G(BP77)>0 D UPD7759^BPSOSRX4(BP77,IEN59)
"RTN","BPSOSRB",117,0)
 ;
"RTN","BPSOSRB",118,0)
 ; Log Reversal or Reversal/Resubmit message.
"RTN","BPSOSRB",119,0)
 ; Note that the reversal/resubmit message is needed
"RTN","BPSOSRB",120,0)
 ;   for Turn-Around Stats - Do NOT delete/alter!!
"RTN","BPSOSRB",121,0)
 S MSG=$T(+0)_"-Initiating Reversal"
"RTN","BPSOSRB",122,0)
 D LOG^BPSOSL(IEN59,MSG)
"RTN","BPSOSRB",123,0)
 ;
"RTN","BPSOSRB",124,0)
 ; Change status to 0% (Waiting to Start), which will reset START TIME,
"RTN","BPSOSRB",125,0)
 ;   and then to 10% (Building transaction)
"RTN","BPSOSRB",126,0)
 D SETSTAT^BPSOSU(IEN59,0)
"RTN","BPSOSRB",127,0)
 D SETSTAT^BPSOSU(IEN59,10)
"RTN","BPSOSRB",128,0)
 ;
"RTN","BPSOSRB",129,0)
 ; Update User (#13), RX Action (#1201), and Reversal Reason (#404)
"RTN","BPSOSRB",130,0)
 ;   in BPS Transactions
"RTN","BPSOSRB",131,0)
 N DIE,DR,DA
"RTN","BPSOSRB",132,0)
 S DIE=9002313.59,DA=IEN59
"RTN","BPSOSRB",133,0)
 S DR="6////"_$G(MOREDATA("SUBMIT TIME"))_";13////"_$G(MOREDATA("USER"))
"RTN","BPSOSRB",134,0)
 S DR=DR_";404////"_$G(MOREDATA("REVERSAL REASON"))_";1201////"_$G(MOREDATA("RX ACTION"))
"RTN","BPSOSRB",135,0)
 ;
"RTN","BPSOSRB",136,0)
 D ^DIE
"RTN","BPSOSRB",137,0)
 ;
"RTN","BPSOSRB",138,0)
 ; Store the Payer Sequence in the log
"RTN","BPSOSRB",139,0)
 N BPSCOB
"RTN","BPSOSRB",140,0)
 S BPSCOB=$$COB59^BPSUTIL2(IEN59),BPSCOB=$S(BPSCOB=2:"-Secondary",BPSCOB=3:"-Tertiary",1:"-Primary"),BPSCOB=BPSCOB_" Insurance"
"RTN","BPSOSRB",141,0)
 D LOG^BPSOSL(IEN59,$T(+0)_BPSCOB)
"RTN","BPSOSRB",142,0)
 ;
"RTN","BPSOSRB",143,0)
 ; Store contents of BPST in the Log
"RTN","BPSOSRB",144,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Contents of ^BPST("_IEN59_") :")
"RTN","BPSOSRB",145,0)
 D LOG59^BPSOSQA(IEN59) ; Log contents of 9002313.59
"RTN","BPSOSRB",146,0)
 ;
"RTN","BPSOSRB",147,0)
 ; Add semi-colon to result text
"RTN","BPSOSRB",148,0)
 D PREVISLY^BPSOSIZ(IEN59)
"RTN","BPSOSRB",149,0)
 ;
"RTN","BPSOSRB",150,0)
 ; Construct reversal claim
"RTN","BPSOSRB",151,0)
 ;   If no reversal claim is returned, log error and quit.
"RTN","BPSOSRB",152,0)
 S REV=$$REVERSE^BPSECA8(IEN59)
"RTN","BPSOSRB",153,0)
 I REV=0 D  Q
"RTN","BPSOSRB",154,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Reversal claim not created for "_IEN59)
"RTN","BPSOSRB",155,0)
 . D ERROR^BPSOSU($T(+0),IEN59,100,"Reversal Claim not created")
"RTN","BPSOSRB",156,0)
 ;
"RTN","BPSOSRB",157,0)
 ; Update Reversal Field in the transaction
"RTN","BPSOSRB",158,0)
 S DIE=9002313.59,DA=IEN59,DR="401////"_REV
"RTN","BPSOSRB",159,0)
 D ^DIE
"RTN","BPSOSRB",160,0)
 ;
"RTN","BPSOSRB",161,0)
 ; Update Log
"RTN","BPSOSRB",162,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Reversal claim "_$P(^BPSC(REV,0),U)_" ("_REV_")")
"RTN","BPSOSRB",163,0)
 ;
"RTN","BPSOSRB",164,0)
 ; Update status to 30% (Building the claim)
"RTN","BPSOSRB",165,0)
 D SETSTAT^BPSOSU(IEN59,30)
"RTN","BPSOSRB",166,0)
 ;
"RTN","BPSOSRB",167,0)
 ; Fire off task to get this on the HL7 queue
"RTN","BPSOSRB",168,0)
 D TASK^BPSOSQA
"RTN","BPSOSRB",169,0)
 Q
"RTN","BPSOSRX")
0^17^B41387461
"RTN","BPSOSRX",1,0)
BPSOSRX ;BHAM ISC/FCS/DRS/FLS - callable from RPMS pharm ;06/01/2004
"RTN","BPSOSRX",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8**;JUN 2004;Build 29
"RTN","BPSOSRX",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSRX",4,0)
 ;
"RTN","BPSOSRX",5,0)
 ; There are three callable entry points:
"RTN","BPSOSRX",6,0)
 ; $$REQST^BPSOSRX     Schedule claim/unclaim request
"RTN","BPSOSRX",7,0)
 ; $$STATUS^BPSOSRX    Inquire about a claim's status
"RTN","BPSOSRX",8,0)
 ; SHOWQ^BPSOSRX       Display queue of claims to be processed
"RTN","BPSOSRX",9,0)
 Q
"RTN","BPSOSRX",10,0)
 ;
"RTN","BPSOSRX",11,0)
 ; Schedule CLAIM or UNCLAIM request
"RTN","BPSOSRX",12,0)
 ; Process both types of requests - CLAIMs and UNCLAIMs
"RTN","BPSOSRX",13,0)
 ;
"RTN","BPSOSRX",14,0)
 ; Input: see MKRQST
"RTN","BPSOSRX",15,0)
 ; Return values:
"RTN","BPSOSRX",16,0)
 ;  1^BPS REQUEST ien = accepted for processing
"RTN","BPSOSRX",17,0)
 ;  0^reason = failure (should never happen)
"RTN","BPSOSRX",18,0)
REQST(BPREQTYP,RXI,RXR,MOREDATA,BPCOBIND,IEN59,BILLNDC,BPSKIP) ;
"RTN","BPSOSRX",19,0)
 N BPRETV,BPIEN77,BPIENS78
"RTN","BPSOSRX",20,0)
 S BPSKIP=+$G(BPSKIP)
"RTN","BPSOSRX",21,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"- Start creating request")
"RTN","BPSOSRX",22,0)
 S BPRETV=$$MKINSUR^BPSOSRX2(RXI,RXR,.MOREDATA,.BPIENS78)
"RTN","BPSOSRX",23,0)
 I +BPRETV=0 Q BPRETV
"RTN","BPSOSRX",24,0)
 ;create BPS REQUEST records for primary insurer only and populate its IBDATA multiple with the iens of BPS INSURER DATA
"RTN","BPSOSRX",25,0)
 S BPRETV=$$MKRQST^BPSOSRX3(BPREQTYP,RXI,RXR,.MOREDATA,.BPIENS78,BPCOBIND,$G(BILLNDC),BPSKIP)
"RTN","BPSOSRX",26,0)
 Q BPRETV
"RTN","BPSOSRX",27,0)
 ;
"RTN","BPSOSRX",28,0)
 ; $$STATUS(RXI,RXR,QUE,BPRQIEN) - Returns the Status of the prescription/fill
"RTN","BPSOSRX",29,0)
 ; Input
"RTN","BPSOSRX",30,0)
 ;   RXI - Prescription IEN (required)
"RTN","BPSOSRX",31,0)
 ;   RXR - Refill Number (required)
"RTN","BPSOSRX",32,0)
 ;   QUE (optional):  0 - Do not check if a RX/fill is on the queue 
"RTN","BPSOSRX",33,0)
 ;         1/null - Check if RX/fill is on the queue
"RTN","BPSOSRX",34,0)
 ;   BPRQIEN (optional) -  the BPS REQUESTS (#9002313.77) IEN
"RTN","BPSOSRX",35,0)
 ;   BPCOB (optional)-the payer sequence (1- Primary, 2 Secondary), if null then 1 (primary) is assumed
"RTN","BPSOSRX",36,0)
 ;
"RTN","BPSOSRX",37,0)
 ; Returns
"RTN","BPSOSRX",38,0)
 ;    RESULT^LAST UPDATE DATE/TIME^DESCRIPTION^STATUS %
"RTN","BPSOSRX",39,0)
 ;    Returns null if there's no ECME record of this RX/fill
"RTN","BPSOSRX",40,0)
 ;
"RTN","BPSOSRX",41,0)
 ;    RESULT is either:
"RTN","BPSOSRX",42,0)
 ;      1. IN PROGRESS for incomplete claims
"RTN","BPSOSRX",43,0)
 ;      2. Final status for complete claims.  See comments for
"RTN","BPSOSRX",44,0)
 ;         BPSOSUC for complete list of possible statuses.
"RTN","BPSOSRX",45,0)
 ;      3. SCHEDULED for scheduled (not ACTIVATED yet) requests
"RTN","BPSOSRX",46,0)
 ;         
"RTN","BPSOSRX",47,0)
 ;    LAST UPDATE DATE/TIME is the Fileman date and time of the
"RTN","BPSOSRX",48,0)
 ;         last update to the status of this claim.
"RTN","BPSOSRX",49,0)
 ;         
"RTN","BPSOSRX",50,0)
 ;    DESCRIPTION is either:
"RTN","BPSOSRX",51,0)
 ;      1. Incomplete claims will be the status (i.e., Waiting to Start,
"RTN","BPSOSRX",52,0)
 ;         Transmitting)
"RTN","BPSOSRX",53,0)
 ;      2. Completed claims will have the reason that the ECME process
"RTN","BPSOSRX",54,0)
 ;         was aborted if the result is  E OTHER.  Otherwise, it will
"RTN","BPSOSRX",55,0)
 ;         be similar to the RESULT
"RTN","BPSOSRX",56,0)
 ;         
"RTN","BPSOSRX",57,0)
 ;    STATUS % is the completion percentage.  Note that 99 is considered
"RTN","BPSOSRX",58,0)
 ;         complete.
"RTN","BPSOSRX",59,0)
 ;         
"RTN","BPSOSRX",60,0)
 ;    
"RTN","BPSOSRX",61,0)
STATUS(RXI,RXR,QUE,BPRQIEN,BPCOB) ;
"RTN","BPSOSRX",62,0)
 ; Setup needed variables
"RTN","BPSOSRX",63,0)
 N IEN59,SDT,SUBDT,BP59REQ,BPTRTYP,BP59ZERO,BP59REQ
"RTN","BPSOSRX",64,0)
 I '$G(RXI) Q ""
"RTN","BPSOSRX",65,0)
 I $G(RXR)="" Q ""
"RTN","BPSOSRX",66,0)
 I $G(QUE)="" S QUE=1
"RTN","BPSOSRX",67,0)
 ;
"RTN","BPSOSRX",68,0)
 ;if BPRQIEN then it is called from BPSNCPD1 to display progress to the user. So we need to check queue anyway
"RTN","BPSOSRX",69,0)
 I $G(BPRQIEN)>0 S QUE=1
"RTN","BPSOSRX",70,0)
 ;
"RTN","BPSOSRX",71,0)
 ;default COB = primary
"RTN","BPSOSRX",72,0)
 I +$G(BPCOB)=0 S BPCOB=1
"RTN","BPSOSRX",73,0)
 ;
"RTN","BPSOSRX",74,0)
 ;get IEN of BPS TRANSACTION
"RTN","BPSOSRX",75,0)
 S IEN59=$$IEN59(RXI,RXR,BPCOB)
"RTN","BPSOSRX",76,0)
 ;
"RTN","BPSOSRX",77,0)
 ;read zeroth node of the BPS TRANSACTION record
"RTN","BPSOSRX",78,0)
 S BP59ZERO=$G(^BPST(IEN59,0))
"RTN","BPSOSRX",79,0)
 ;
"RTN","BPSOSRX",80,0)
 ;if doesn't have BPS TRANSACTION record AND doesn't have any BPS REQUEST records then
"RTN","BPSOSRX",81,0)
 ;this is an old claim OR it is not e-billable - so use the old logic,
"RTN","BPSOSRX",82,0)
 ;which was used before COB patch, so this is for primary claims only.
"RTN","BPSOSRX",83,0)
 I BPCOB=1 I $G(BPRQIEN)="" I BP59ZERO="" I '$D(^BPS(9002313.77,"D",RXI,RXR,BPCOB)) Q $$OLDSTAT^BPSOSRX6(RXI,RXR,$G(QUE))
"RTN","BPSOSRX",84,0)
 ;
"RTN","BPSOSRX",85,0)
 ;if doesn't have BPS TRANSACTION record (not created yet) AND has BPS REQUEST record(s)
"RTN","BPSOSRX",86,0)
 I BP59ZERO="" Q $$QUESTAT(RXI,RXR,BPCOB)
"RTN","BPSOSRX",87,0)
 ;
"RTN","BPSOSRX",88,0)
 ;get transaction type
"RTN","BPSOSRX",89,0)
 S BPTRTYP=$P(BP59ZERO,U,15)
"RTN","BPSOSRX",90,0)
 ;if Transaction type is not defined then this is an OLD claim so use the old logic
"RTN","BPSOSRX",91,0)
 ;which was used before COB patch, so this is for primary claims only.
"RTN","BPSOSRX",92,0)
 I BPCOB=1 I $G(BPRQIEN)="" I BPTRTYP="" Q $$OLDSTAT^BPSOSRX6(RXI,RXR,$G(QUE))
"RTN","BPSOSRX",93,0)
 ;
"RTN","BPSOSRX",94,0)
 ;get the current BPS REQUEST
"RTN","BPSOSRX",95,0)
 I BPTRTYP="C" S BP59REQ=$P(BP59ZERO,U,12)
"RTN","BPSOSRX",96,0)
 I BPTRTYP="U" S BP59REQ=$P($G(^BPST(IEN59,4)),U,5)
"RTN","BPSOSRX",97,0)
 I $G(BP59REQ)="" Q $$QUESTAT(RXI,RXR,BPCOB)
"RTN","BPSOSRX",98,0)
 ;
"RTN","BPSOSRX",99,0)
 ;get request date/time
"RTN","BPSOSRX",100,0)
 S SDT=$P($G(^BPS(9002313.77,+$G(BP59REQ),6)),U,1) ;REQUEST DATE AND TIME
"RTN","BPSOSRX",101,0)
 ;
"RTN","BPSOSRX",102,0)
 ; Loop: Get data, quit if times and status match (no change during gather)
"RTN","BPSOSRX",103,0)
 N A,C,T1,T2,S1,S2
"RTN","BPSOSRX",104,0)
 F  D  I T1=T2,S1=S2 Q
"RTN","BPSOSRX",105,0)
 . S T1=$$LASTUP59^BPSOSRX(IEN59)
"RTN","BPSOSRX",106,0)
 . S S1=$$STATUS59^BPSOSRX(IEN59)
"RTN","BPSOSRX",107,0)
 . I S1=99 D  ; completed
"RTN","BPSOSRX",108,0)
 . . S A=$$CATEG^BPSOSUC(IEN59)
"RTN","BPSOSRX",109,0)
 . . S C=$$RESTXT59^BPSOSRX(IEN59)
"RTN","BPSOSRX",110,0)
 . I S1'=99 D
"RTN","BPSOSRX",111,0)
 . . S A="IN PROGRESS"
"RTN","BPSOSRX",112,0)
 . . S C=$$STATI^BPSOSU($S(S1="":10,1:S1))
"RTN","BPSOSRX",113,0)
 . S T2=$$LASTUP59^BPSOSRX(IEN59)
"RTN","BPSOSRX",114,0)
 . S S2=$$STATUS59^BPSOSRX(IEN59)
"RTN","BPSOSRX",115,0)
 ;
"RTN","BPSOSRX",116,0)
 ; If the queue parameter is set and the submit date from the queue
"RTN","BPSOSRX",117,0)
 ;   follows the SUBMIT DATE/LAST UPDATE date from BPS TRANSACTION 
"RTN","BPSOSRX",118,0)
 ;   or the RX/fill is still on the queue, then change the response
"RTN","BPSOSRX",119,0)
 ;   to IN PROGRESS^Submit Date^WAITING TO START
"RTN","BPSOSRX",120,0)
 S SUBDT=$$SUBMIT59^BPSOSRX(IEN59)
"RTN","BPSOSRX",121,0)
 I SUBDT="" S SUBDT=T1
"RTN","BPSOSRX",122,0)
 ;
"RTN","BPSOSRX",123,0)
 ;if we need to check the queue
"RTN","BPSOSRX",124,0)
 I $G(QUE),$$QUETIME(RXI,RXR,BPCOB,1)>SUBDT S A="IN PROGRESS",T1=SDT,S1=-1,C=$$STATI^BPSOSU(0)
"RTN","BPSOSRX",125,0)
 I $G(QUE),$$QUETIME(RXI,RXR,BPCOB,0)>SUBDT S A="IN PROGRESS",T1=SDT,S1=-1,C=$$STATI^BPSOSU(0)
"RTN","BPSOSRX",126,0)
 I $G(QUE),$$QUETIME(RXI,RXR,BPCOB,2)>SUBDT S A="IN PROGRESS",T1=SDT,S1=-1,C=$$STATI^BPSOSU(0) ;To check IN PROCESS
"RTN","BPSOSRX",127,0)
 ;
"RTN","BPSOSRX",128,0)
 ; Return results
"RTN","BPSOSRX",129,0)
 Q A_U_T1_U_$E(C,1,255-$L(A)-$L(T1)-2)_U_S1
"RTN","BPSOSRX",130,0)
 ;
"RTN","BPSOSRX",131,0)
 ;the most current queue status as text
"RTN","BPSOSRX",132,0)
QUESTAT(RXI,RXR,BPCOB) ;
"RTN","BPSOSRX",133,0)
 I $D(^BPS(9002313.77,"D",RXI,RXR,BPCOB,2)) Q "IN PROGRESS"_U_$$QUETIME(RXI,RXR,BPCOB,2)_U_$$STATI^BPSOSU(-96)_U_-1
"RTN","BPSOSRX",134,0)
 I $D(^BPS(9002313.77,"D",RXI,RXR,BPCOB,1)) Q "IN PROGRESS"_U_$$QUETIME(RXI,RXR,BPCOB,1)_U_$$STATI^BPSOSU(0)_U_-1
"RTN","BPSOSRX",135,0)
 I $D(^BPS(9002313.77,"D",RXI,RXR,BPCOB,0)) Q "IN PROGRESS"_U_$$QUETIME(RXI,RXR,BPCOB,0)_U_$$STATI^BPSOSU(-99)_U_-1
"RTN","BPSOSRX",136,0)
 ;if PROCESS FLAG=3,4,5 return null
"RTN","BPSOSRX",137,0)
 Q ""
"RTN","BPSOSRX",138,0)
 ;
"RTN","BPSOSRX",139,0)
 ;the most current queue status as process flag
"RTN","BPSOSRX",140,0)
QUECUR(RXI,RXR,BPCOB) ;
"RTN","BPSOSRX",141,0)
 I $D(^BPS(9002313.77,"D",RXI,RXR,BPCOB,3)) Q 3
"RTN","BPSOSRX",142,0)
 I $D(^BPS(9002313.77,"D",RXI,RXR,BPCOB,2)) Q 2
"RTN","BPSOSRX",143,0)
 I $D(^BPS(9002313.77,"D",RXI,RXR,BPCOB,1)) Q 1
"RTN","BPSOSRX",144,0)
 I $D(^BPS(9002313.77,"D",RXI,RXR,BPCOB,0)) Q 0
"RTN","BPSOSRX",145,0)
 ;if PROCESS FLAG=3,4,5 return null
"RTN","BPSOSRX",146,0)
 Q ""
"RTN","BPSOSRX",147,0)
 ;
"RTN","BPSOSRX",148,0)
 ;the most current queue status as process flag
"RTN","BPSOSRX",149,0)
QUETIME(RXI,RXR,BPCOB,BPROCFL) ;
"RTN","BPSOSRX",150,0)
 N BP77
"RTN","BPSOSRX",151,0)
 S BP77=$O(^BPS(9002313.77,"D",RXI,RXR,BPCOB,BPROCFL,0))
"RTN","BPSOSRX",152,0)
 I BP77>0 Q $P($G(^BPS(9002313.77,+BP77,6)),U,1) ;REQUEST DATE AND TIME
"RTN","BPSOSRX",153,0)
 Q ""
"RTN","BPSOSRX",154,0)
 ;
"RTN","BPSOSRX",155,0)
 ; SHOWQ - Show RX/Fill on the Queue.  Since claims are generally processed
"RTN","BPSOSRX",156,0)
 ;   immediately, this report will generally have no output.
"RTN","BPSOSRX",157,0)
SHOWQ G SHOWQ^BPSOSR2
"RTN","BPSOSRX",158,0)
 ;
"RTN","BPSOSRX",159,0)
NOW() N %,%H,%I,X D NOW^%DTC Q %
"RTN","BPSOSRX",160,0)
 ;
"RTN","BPSOSRX",161,0)
 ; RESTXT59 - Return first semi-colon piece of the Result Text (202) field
"RTN","BPSOSRX",162,0)
 ;    from BPS Transaction
"RTN","BPSOSRX",163,0)
RESTXT59(IEN59) ;
"RTN","BPSOSRX",164,0)
 I '$G(IEN59) Q ""
"RTN","BPSOSRX",165,0)
 Q $P($P($G(^BPST(IEN59,2)),U,2,99),";",1)
"RTN","BPSOSRX",166,0)
 ;
"RTN","BPSOSRX",167,0)
 ; LASTUP59 - Return last update date/time from BPS Transactions
"RTN","BPSOSRX",168,0)
LASTUP59(IEN59) ;
"RTN","BPSOSRX",169,0)
 I '$G(IEN59) Q ""
"RTN","BPSOSRX",170,0)
 Q $P($G(^BPST(IEN59,0)),U,8)
"RTN","BPSOSRX",171,0)
 ;
"RTN","BPSOSRX",172,0)
 ; STATUS59 returns STATUS field from BPS Transaction
"RTN","BPSOSRX",173,0)
 ; Note: 99 means complete
"RTN","BPSOSRX",174,0)
STATUS59(IEN59) ;
"RTN","BPSOSRX",175,0)
 I '$G(IEN59) Q ""
"RTN","BPSOSRX",176,0)
 Q $P($G(^BPST(IEN59,0)),U,2)
"RTN","BPSOSRX",177,0)
 ;
"RTN","BPSOSRX",178,0)
 ; SUBMIT59 - Return Submit date/time from BPS Transactions (#6) SUBMIT DATE/TIME
"RTN","BPSOSRX",179,0)
SUBMIT59(IEN59) ;
"RTN","BPSOSRX",180,0)
 I '$G(IEN59) Q ""
"RTN","BPSOSRX",181,0)
 Q $P($G(^BPST(IEN59,0)),U,7)
"RTN","BPSOSRX",182,0)
 ;
"RTN","BPSOSRX",183,0)
 ; RXRDEF - Get last refill
"RTN","BPSOSRX",184,0)
RXRDEF(RXI) ;
"RTN","BPSOSRX",185,0)
 I '$G(RXI) Q ""
"RTN","BPSOSRX",186,0)
 K ^TMP($J)
"RTN","BPSOSRX",187,0)
 N BPSPT S BPSPT=$$RXAPI1^BPSUTIL1(RXI,2,"I")
"RTN","BPSOSRX",188,0)
 I BPSPT="" Q ""
"RTN","BPSOSRX",189,0)
 D RX^PSO52API(BPSPT,"BPSREF",RXI,,"R")
"RTN","BPSOSRX",190,0)
 Q +$O(^TMP($J,"BPSREF",BPSPT,RXI,"RF",""),-1)
"RTN","BPSOSRX",191,0)
 ;
"RTN","BPSOSRX",192,0)
 ; Utilities
"RTN","BPSOSRX",193,0)
 ;
"RTN","BPSOSRX",194,0)
 ;  LOCKING:  Just one user of this routine at a time.
"RTN","BPSOSRX",195,0)
 ;  X = "SUBMIT" to interlock the claim submission
"RTN","BPSOSRX",196,0)
 ;  X = "BACKGROUND" to interlock the background job
"RTN","BPSOSRX",197,0)
LOCK(X,TIMEOUT) ;EP - BPSOSRB
"RTN","BPSOSRX",198,0)
 I $G(TIMEOUT)="" S TIMEOUT=0
"RTN","BPSOSRX",199,0)
 L +^XTMP("BPS-PROC",X):TIMEOUT
"RTN","BPSOSRX",200,0)
 Q $T
"RTN","BPSOSRX",201,0)
 ;
"RTN","BPSOSRX",202,0)
LOCKNOW(X) ;EP - BPSOSRB
"RTN","BPSOSRX",203,0)
 L +^XTMP("BPS-PROC",X):0
"RTN","BPSOSRX",204,0)
 Q $T
"RTN","BPSOSRX",205,0)
 ;
"RTN","BPSOSRX",206,0)
UNLOCK(X) ;EP - BPSOSRB
"RTN","BPSOSRX",207,0)
 L -^XTMP("BPS-PROC",X)
"RTN","BPSOSRX",208,0)
 Q
"RTN","BPSOSRX",209,0)
 ;
"RTN","BPSOSRX",210,0)
RUNNING() ;
"RTN","BPSOSRX",211,0)
 I '$$LOCKNOW("BACKGROUND") Q  ; it is running; don't start another
"RTN","BPSOSRX",212,0)
 D UNLOCK("BACKGROUND") ; it's not running; release our probing lock
"RTN","BPSOSRX",213,0)
 D TASK
"RTN","BPSOSRX",214,0)
 Q
"RTN","BPSOSRX",215,0)
 ;
"RTN","BPSOSRX",216,0)
 ;RXI - #52 ien
"RTN","BPSOSRX",217,0)
 ;RXR - refill #
"RTN","BPSOSRX",218,0)
 ;BPCOBIND - COB indicator
"RTN","BPSOSRX",219,0)
IEN59(RXI,RXR,BPCOBIND) ;EP - from BPSOS, BPSOSRB
"RTN","BPSOSRX",220,0)
 I '$G(RXI) Q ""
"RTN","BPSOSRX",221,0)
 I '$G(RXR) S RXR=0
"RTN","BPSOSRX",222,0)
 I +$G(BPCOBIND)=0 S BPCOBIND=1 ;default is primary
"RTN","BPSOSRX",223,0)
 I BPCOBIND>3!(BPCOBIND<1) Q ""
"RTN","BPSOSRX",224,0)
 Q RXI_"."_$TR($J(RXR,4)," ","0")_+BPCOBIND
"RTN","BPSOSRX",225,0)
 ;
"RTN","BPSOSRX",226,0)
 ;
"RTN","BPSOSRX",227,0)
 ; The background job
"RTN","BPSOSRX",228,0)
TASK N X,Y,%DT
"RTN","BPSOSRX",229,0)
 S X="N",%DT="ST"
"RTN","BPSOSRX",230,0)
 D ^%DT,TASKAT(Y)
"RTN","BPSOSRX",231,0)
 Q
"RTN","BPSOSRX",232,0)
 ;
"RTN","BPSOSRX",233,0)
TASKAT(ZTDTH) ;
"RTN","BPSOSRX",234,0)
 N ZTIO S ZTIO="" ; no device
"RTN","BPSOSRX",235,0)
 N ZTRTN S ZTRTN="BACKGR^BPSOSRB"
"RTN","BPSOSRX",236,0)
 D ^%ZTLOAD
"RTN","BPSOSRX",237,0)
 Q
"RTN","BPSOSRX",238,0)
 ;
"RTN","BPSOSRX",239,0)
 ;Lock <Rx ien + refill#> pair  - So two (or more) requests for the same RX/refill (like payment and reverse) 
"RTN","BPSOSRX",240,0)
 ; cannot be processed simultaneously
"RTN","BPSOSRX",241,0)
LOCKRF(RXIEN,REFIL,BPTIMOUT,IEN59,BPSRC) ;EP - BPSOSRB
"RTN","BPSOSRX",242,0)
 N BPRET
"RTN","BPSOSRX",243,0)
 L +^XTMP("BPSOSRX-RX/REF",RXIEN,REFIL):+$G(BPTIMOUT)
"RTN","BPSOSRX",244,0)
 S BPRET=$T
"RTN","BPSOSRX",245,0)
 ;I $G(IEN59)>0 D LOG^BPSOSL(IEN59,$G(BPSRC)_$S(BPRET=1:"-Lock",1:"-Failed to Lock")_" RX/RF: "_RXIEN_"/"_REFIL)
"RTN","BPSOSRX",246,0)
 Q BPRET
"RTN","BPSOSRX",247,0)
 ;
"RTN","BPSOSRX",248,0)
 ;UnLock <Rx ien + refill#> pair
"RTN","BPSOSRX",249,0)
UNLCKRF(RXIEN,REFIL,IEN59,BPSRC) ;EP - BPSOSRB
"RTN","BPSOSRX",250,0)
 L -^XTMP("BPSOSRX-RX/REF",RXIEN,REFIL)
"RTN","BPSOSRX",251,0)
 ;I $G(IEN59)>0 D LOG^BPSOSL(IEN59,$G(BPSRC)_"-Unlock RX/RF: "_RXIEN_"/"_REFIL)
"RTN","BPSOSRX",252,0)
 Q
"RTN","BPSOSRX",253,0)
 ;BPSOSRX
"RTN","BPSOSRX2")
0^31^B20068937
"RTN","BPSOSRX2",1,0)
BPSOSRX2 ;ALB/SS - ECME REQUESTS ;30-NOV-07
"RTN","BPSOSRX2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8**;JUN 2004;Build 29
"RTN","BPSOSRX2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSRX2",4,0)
 ;
"RTN","BPSOSRX2",5,0)
 ;to store insurer data in BPS INSURER file
"RTN","BPSOSRX2",6,0)
 ; RXI - RX ien 
"RTN","BPSOSRX2",7,0)
 ; RXR - refill number
"RTN","BPSOSRX2",8,0)
 ; MOREDATA - Array of data needed for transaction/claim
"RTN","BPSOSRX2",9,0)
 ; BPCOBIND - "active" COB indicator (the one is processed currently) COB
"RTN","BPSOSRX2",10,0)
 ; BPIEN77 - BPS REQUEST ien (request for which the BPS INSURER DATA record is created)
"RTN","BPSOSRX2",11,0)
 ;
"RTN","BPSOSRX2",12,0)
 ; 
"RTN","BPSOSRX2",13,0)
INSURER(RXI,RXR,MOREDATA,BPCOBIND) ;
"RTN","BPSOSRX2",14,0)
 N BPIEN78,BPIEN59
"RTN","BPSOSRX2",15,0)
 ;IBDATA
"RTN","BPSOSRX2",16,0)
 ;Create a new record with .01 field only
"RTN","BPSOSRX2",17,0)
 S BPIEN59=$$IEN59^BPSOSRX(RXI,RXR,BPCOBIND)
"RTN","BPSOSRX2",18,0)
 ;
"RTN","BPSOSRX2",19,0)
 S BPIEN78=+$$INSITEM^BPSUTIL2(9002313.78,"",BPIEN59,"","") ;RX ien
"RTN","BPSOSRX2",20,0)
 I BPIEN78<1 Q "0^Cannot create a record in BPS INSURER DATA"
"RTN","BPSOSRX2",21,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,".07",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,14))
"RTN","BPSOSRX2",22,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,".08",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,1))
"RTN","BPSOSRX2",23,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,".09",BPIEN78,BPCOBIND)
"RTN","BPSOSRX2",24,0)
 ;
"RTN","BPSOSRX2",25,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"1.01",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,2))
"RTN","BPSOSRX2",26,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"1.02",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,3))
"RTN","BPSOSRX2",27,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"1.03",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,5))
"RTN","BPSOSRX2",28,0)
 I $P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,6)'="" I $$FILLFLDS^BPSUTIL2(9002313.78,"1.04",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,6))
"RTN","BPSOSRX2",29,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"1.05",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,7))
"RTN","BPSOSRX2",30,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"1.06",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,8))
"RTN","BPSOSRX2",31,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"1.07",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,9))
"RTN","BPSOSRX2",32,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"1.08",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,10))
"RTN","BPSOSRX2",33,0)
 ;
"RTN","BPSOSRX2",34,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"2.01",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,2)),U,1))
"RTN","BPSOSRX2",35,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"2.02",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,2)),U,2))
"RTN","BPSOSRX2",36,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"2.03",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,2)),U,3))
"RTN","BPSOSRX2",37,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"2.04",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,2)),U,4))
"RTN","BPSOSRX2",38,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"2.05",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,2)),U,5))
"RTN","BPSOSRX2",39,0)
 I $P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,13)'="" I $$FILLFLDS^BPSUTIL2(9002313.78,"2.06",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,13))
"RTN","BPSOSRX2",40,0)
 ;
"RTN","BPSOSRX2",41,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"3.01",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,3)),U,1))
"RTN","BPSOSRX2",42,0)
 I $P($G(MOREDATA("IBDATA",BPCOBIND,3)),U,2)'="" I $$FILLFLDS^BPSUTIL2(9002313.78,"3.02",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,3)),U,2))
"RTN","BPSOSRX2",43,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"3.03",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,3)),U,3))
"RTN","BPSOSRX2",44,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"3.04",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,3)),U,4))
"RTN","BPSOSRX2",45,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"3.05",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,3)),U,5))
"RTN","BPSOSRX2",46,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"3.06",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,3)),U,6))
"RTN","BPSOSRX2",47,0)
 ;
"RTN","BPSOSRX2",48,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"4.01",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,4))
"RTN","BPSOSRX2",49,0)
 I $P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,11)'="" I $$FILLFLDS^BPSUTIL2(9002313.78,"4.02",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,11))
"RTN","BPSOSRX2",50,0)
 I $P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,12)'="" I $$FILLFLDS^BPSUTIL2(9002313.78,"4.03",BPIEN78,$P($G(MOREDATA("IBDATA",BPCOBIND,1)),U,12))
"RTN","BPSOSRX2",51,0)
 ;
"RTN","BPSOSRX2",52,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"5.01",BPIEN78,+DUZ)
"RTN","BPSOSRX2",53,0)
 I $$FILLFLDS^BPSUTIL2(9002313.78,"5.02",BPIEN78,DT)
"RTN","BPSOSRX2",54,0)
 ;
"RTN","BPSOSRX2",55,0)
 Q "1^"_BPIEN78
"RTN","BPSOSRX2",56,0)
 ;
"RTN","BPSOSRX2",57,0)
ERRFIELD(BP78,BPFIELD) ;
"RTN","BPSOSRX2",58,0)
 N DIK,DA
"RTN","BPSOSRX2",59,0)
 S DIK="^BPS(9002313.78,"
"RTN","BPSOSRX2",60,0)
 S DA=BP78
"RTN","BPSOSRX2",61,0)
 D ^DIK ;delete incomplete record
"RTN","BPSOSRX2",62,0)
 ;return the error message
"RTN","BPSOSRX2",63,0)
 Q $$FIELDMSG(0,"",9002313.78,$G(BPFIELD))
"RTN","BPSOSRX2",64,0)
 ;
"RTN","BPSOSRX2",65,0)
 ;store MOREDATE("IBDATA") in IB INSURER DATA
"RTN","BPSOSRX2",66,0)
 ;  RXI - Prescription IEN
"RTN","BPSOSRX2",67,0)
 ;  RXR - Fill Number
"RTN","BPSOSRX2",68,0)
 ;  MOREDATA - Array of data needed for transaction/claim
"RTN","BPSOSRX2",69,0)
 ;  BPINSUR(COB,IEN78) = array to return back BPS INSURERE DATA iens created 
"RTN","BPSOSRX2",70,0)
 ;  return value:
"RTN","BPSOSRX2",71,0)
 ;  1 = success
"RTN","BPSOSRX2",72,0)
 ;  0^message = if one of the records wasn't created
"RTN","BPSOSRX2",73,0)
MKINSUR(RXI,RXR,MOREDATA,BPINSUR) ;
"RTN","BPSOSRX2",74,0)
 ;store MOREDATE("IBDATA") in IB INSURER DATA
"RTN","BPSOSRX2",75,0)
 N BPQ,BPCOB,BPERRMSG
"RTN","BPSOSRX2",76,0)
 S BPERRMSG=""
"RTN","BPSOSRX2",77,0)
 S BPQ=0,BPCOB=0
"RTN","BPSOSRX2",78,0)
 F  S BPCOB=$O(MOREDATA("IBDATA",BPCOB)) Q:+BPCOB=0!(BPQ=1)  D
"RTN","BPSOSRX2",79,0)
 . S BPIEN78=$$INSURER(RXI,RXR,.MOREDATA,BPCOB)
"RTN","BPSOSRX2",80,0)
 . I BPIEN78<1 S BPERRMSG="Missing data for the file #9002313.78, "_$P(BPIEN78,U,2),BPQ=1 Q
"RTN","BPSOSRX2",81,0)
 . S BPINSUR(BPCOB)=+$P(BPIEN78,U,2)
"RTN","BPSOSRX2",82,0)
 I BPQ=1 Q "0^"_BPERRMSG
"RTN","BPSOSRX2",83,0)
 Q 1
"RTN","BPSOSRX2",84,0)
 ;add field name to the message
"RTN","BPSOSRX2",85,0)
 ;BPRFILE - if 1 then add file # to the message
"RTN","BPSOSRX2",86,0)
 ;BPMESS,BPFILENO,BPFLDNO - message text, file # and field #
"RTN","BPSOSRX2",87,0)
FIELDMSG(BPRFILE,BPMESS,BPFILENO,BPFLDNO) ;
"RTN","BPSOSRX2",88,0)
 N BPFLDNM
"RTN","BPSOSRX2",89,0)
 I ('$G(BPFILENO))!('$G(BPFLDNO)) Q $G(BPMESS)
"RTN","BPSOSRX2",90,0)
 D FIELD^DID(BPFILENO,BPFLDNO,"","LABEL","BPFLDNM")
"RTN","BPSOSRX2",91,0)
 Q $G(BPMESS)_$S($G(BPRFILE)=1:"file #"_BPFILENO_",",1:"")_"field #"_BPFLDNO_"("_$G(BPFLDNM("LABEL"))_")"
"RTN","BPSOSRX2",92,0)
 ;BPSOSRX2
"RTN","BPSOSRX3")
0^20^B105355282
"RTN","BPSOSRX3",1,0)
BPSOSRX3 ;ALB/SS - ECME REQUESTS ;02-JAN-08
"RTN","BPSOSRX3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8**;JUN 2004;Build 29
"RTN","BPSOSRX3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSRX3",4,0)
 ;
"RTN","BPSOSRX3",5,0)
 ;Input
"RTN","BPSOSRX3",6,0)
 ;BPREQTYP - request type:
"RTN","BPSOSRX3",7,0)
 ; "C" - Submit a claim to ECME
"RTN","BPSOSRX3",8,0)
 ;  If the claim has already been processed, and it's  resubmitted, then a reversal will be
"RTN","BPSOSRX3",9,0)
 ;   done first,  and then the resubmit. Intervening cal ;  to $$STATUS may show progress 
"RTN","BPSOSRX3",10,0)
 ;  of the reversal before  the resubmitted claim is processed.
"RTN","BPSOSRX3",11,0)
 ; "U"- Reverse submitted claim.
"RTN","BPSOSRX3",12,0)
 ;  The reversal will actually be done ONLY if the  most recent processing of the claim
"RTN","BPSOSRX3",13,0)
 ;   resulted in something reversible, namely E PAYABLE or E REVERSAL REJECTED
"RTN","BPSOSRX3",14,0)
 ;RXI - Prescription IEN
"RTN","BPSOSRX3",15,0)
 ;RXR - Fill Number
"RTN","BPSOSRX3",16,0)
 ;MOREDATA - Array of data for transaction/claim
"RTN","BPSOSRX3",17,0)
 ;BPCOBIND - payer sequence
"RTN","BPSOSRX3",18,0)
 ;BILLNDC - NDC passed into EN^BPSNCPDP sent in BILLNDC variable or determined by EN^BPSNCPDP if it was null 
"RTN","BPSOSRX3",19,0)
 ;at the very first time when EN^BPSNCPDP was called in "F" (foreground) mode
"RTN","BPSOSRX3",20,0)
 ;BPSKIP(optional)=1 : skip the field, used when CLAIM request is created while the previous 
"RTN","BPSOSRX3",21,0)
 ;request is in progress. That means - billing determination will be done upon activation)
"RTN","BPSOSRX3",22,0)
 ;Return values:
"RTN","BPSOSRX3",23,0)
 ; 1^BPS REQUEST ien = accepted for processing
"RTN","BPSOSRX3",24,0)
 ; 0^reason = failure (should never happen)
"RTN","BPSOSRX3",25,0)
MKRQST(BPREQTYP,RXI,RXR,MOREDATA,BPIENS78,BPCOBIND,BILLNDC,BPSKIP) ;
"RTN","BPSOSRX3",26,0)
 N BPIEN77,BPCOB,BPQ,BPIEN772,BPERRMSG,BPIEN59,BPIEN78,BPZ
"RTN","BPSOSRX3",27,0)
 N RETVAL,STAT,TYPE,RESULT,SUBMITDT,BPNOW,BPACTTYP,BP77LCK
"RTN","BPSOSRX3",28,0)
 N DUR,BPIEN771,BPCNT,BPSDUPL
"RTN","BPSOSRX3",29,0)
 S BPSKIP=+$G(BPSKIP)
"RTN","BPSOSRX3",30,0)
 I '$G(RXI) Q "0^Parameter error"
"RTN","BPSOSRX3",31,0)
 I '$G(RXR) S RXR=0
"RTN","BPSOSRX3",32,0)
 S BPIEN59=+$$IEN59^BPSOSRX(RXI,RXR,BPCOBIND)
"RTN","BPSOSRX3",33,0)
 ; cannot be processed simultaneously
"RTN","BPSOSRX3",34,0)
 ;new record
"RTN","BPSOSRX3",35,0)
 S BPERRMSG="Cannot create record in BPS REQUEST"
"RTN","BPSOSRX3",36,0)
 S BPIEN77=$$INSITEM^BPSUTIL2(9002313.77,"",RXI,"","","^BPS(9002313.77)",10) ;RX ien
"RTN","BPSOSRX3",37,0)
 I BPIEN77<1 Q "0^"_BPERRMSG
"RTN","BPSOSRX3",38,0)
 S BPNOW=$$NOW^BPSOSRX()
"RTN","BPSOSRX3",39,0)
 S BPACTTYP=$G(MOREDATA("RX ACTION"))
"RTN","BPSOSRX3",40,0)
 ; fill out the fields
"RTN","BPSOSRX3",41,0)
 S BPERRMSG="Missing data for the "
"RTN","BPSOSRX3",42,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,".02",BPIEN77,RXR)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,.02)
"RTN","BPSOSRX3",43,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,".03",BPIEN77,BPCOBIND)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,.03)
"RTN","BPSOSRX3",44,0)
 ;set delay with the testing tool
"RTN","BPSOSRX3",45,0)
 S BPZ=+$$SETDELAY^BPSTEST(BPIEN59) I BPZ>0 I $$FILLFLDS^BPSUTIL2(9002313.77,".08",BPIEN77,BPZ)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,.08)
"RTN","BPSOSRX3",46,0)
 ;set the process flag to "WAITING"
"RTN","BPSOSRX3",47,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,".04",BPIEN77,0)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,.04)
"RTN","BPSOSRX3",48,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,"6.01",BPIEN77,BPNOW)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,6.01)
"RTN","BPSOSRX3",49,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,"6.05",BPIEN77,BPNOW)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,6.05)
"RTN","BPSOSRX3",50,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"6.02") I $$FILLFLDS^BPSUTIL2(9002313.77,"6.02",BPIEN77,+$G(MOREDATA("USER")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,6.02)
"RTN","BPSOSRX3",51,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,"6.06",BPIEN77,+DUZ)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,6.06)
"RTN","BPSOSRX3",52,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"1.01") I $$FILLFLDS^BPSUTIL2(9002313.77,"1.01",BPIEN77,$G(MOREDATA("RX ACTION")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.01)
"RTN","BPSOSRX3",53,0)
 I BPREQTYP="C" I $$FILLFLDS^BPSUTIL2(9002313.77,"1.04",BPIEN77,"C")<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.04)
"RTN","BPSOSRX3",54,0)
 I BPREQTYP="U" I $$FILLFLDS^BPSUTIL2(9002313.77,"1.04",BPIEN77,"U")<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.04)
"RTN","BPSOSRX3",55,0)
 ;if this is a queued "C" request then the billing will be done again upon activation so MOREDATA(BILL) is undefined
"RTN","BPSOSRX3",56,0)
 ;that is why we are not checking this field
"RTN","BPSOSRX3",57,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"1.05") I $$FILLFLDS^BPSUTIL2(9002313.77,"1.05",BPIEN77,$P($G(MOREDATA("BILL")),U))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.05)
"RTN","BPSOSRX3",58,0)
 I '$D(MOREDATA("ELIG")) I $$ACTFIELD(BPSKIP,BPREQTYP,"1.06") I $$FILLFLDS^BPSUTIL2(9002313.77,"1.06",BPIEN77,$P($G(MOREDATA("BILL")),U,3))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.06)
"RTN","BPSOSRX3",59,0)
 I $D(MOREDATA("ELIG")) I $$ACTFIELD(BPSKIP,BPREQTYP,"1.06") I $$FILLFLDS^BPSUTIL2(9002313.77,"1.06",BPIEN77,$G(MOREDATA("ELIG")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.06)
"RTN","BPSOSRX3",60,0)
 I $P($G(MOREDATA("BILL")),U,2)'="" I $$ACTFIELD(BPSKIP,BPREQTYP,"1.07") I $$FILLFLDS^BPSUTIL2(9002313.77,"1.07",BPIEN77,$P($G(MOREDATA("BILL")),U,2))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.07)
"RTN","BPSOSRX3",61,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"2.01") I $$FILLFLDS^BPSUTIL2(9002313.77,"2.01",BPIEN77,+$G(MOREDATA("DATE OF SERVICE")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.01)
"RTN","BPSOSRX3",62,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"2.02") I $$FILLFLDS^BPSUTIL2(9002313.77,"2.02",BPIEN77,$G(MOREDATA("REVERSAL REASON")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.02)
"RTN","BPSOSRX3",63,0)
 I $L($G(MOREDATA("BPOVRIEN")))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"2.04",BPIEN77,$G(MOREDATA("BPOVRIEN")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.04)
"RTN","BPSOSRX3",64,0)
 I $L($G(MOREDATA("BPSCLARF")))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"2.05",BPIEN77,$G(MOREDATA("BPSCLARF")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.05)
"RTN","BPSOSRX3",65,0)
 I $L($G(BILLNDC))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"2.06",BPIEN77,BILLNDC)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.06)
"RTN","BPSOSRX3",66,0)
 I $L($P($G(MOREDATA("BPSAUTH")),U))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"2.07",BPIEN77,$E($P(MOREDATA("BPSAUTH"),U,1),1,2))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.07)
"RTN","BPSOSRX3",67,0)
 I $L($P($G(MOREDATA("BPSAUTH")),U,2))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"2.08",BPIEN77,$E($P(MOREDATA("BPSAUTH"),U,2),1,11))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.08)
"RTN","BPSOSRX3",68,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"4.01") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.01",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,1))
"RTN","BPSOSRX3",69,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"4.02") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.02",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,2))
"RTN","BPSOSRX3",70,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"4.03") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.03",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,3))
"RTN","BPSOSRX3",71,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"4.04") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.04",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,4))
"RTN","BPSOSRX3",72,0)
 I $P($G(MOREDATA("BPSDATA",1)),U,5)'="" I $$ACTFIELD(BPSKIP,BPREQTYP,"4.05") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.05",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,5))
"RTN","BPSOSRX3",73,0)
 I $P($G(MOREDATA("BPSDATA",1)),U,6)'="" I $$ACTFIELD(BPSKIP,BPREQTYP,"4.06") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.06",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,6))
"RTN","BPSOSRX3",74,0)
 I $$ACTFIELD(BPSKIP,BPREQTYP,"4.07") I $$FILLFLDS^BPSUTIL2(9002313.77,"4.07",BPIEN77,$P($G(MOREDATA("BPSDATA",1)),U,7))
"RTN","BPSOSRX3",75,0)
 I $G(MOREDATA("CLOSE AFT REV"))=1 I $$FILLFLDS^BPSUTIL2(9002313.77,"7.01",BPIEN77,1)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,7.01)
"RTN","BPSOSRX3",76,0)
 I $G(MOREDATA("CLOSE AFT REV REASON"))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"7.02",BPIEN77,+$G(MOREDATA("CLOSE AFT REV REASON")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,7.02)
"RTN","BPSOSRX3",77,0)
 I $L($G(MOREDATA("CLOSE AFT REV COMMENT")))>0 I $$FILLFLDS^BPSUTIL2(9002313.77,"7.03",BPIEN77,$G(MOREDATA("CLOSE AFT REV COMMENT")))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,7.03)
"RTN","BPSOSRX3",78,0)
 I $G(BPSARRY("SC/EI OVR"))=1 I $$FILLFLDS^BPSUTIL2(9002313.77,"2.09",BPIEN77,1)<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,2.09)
"RTN","BPSOSRX3",79,0)
 ;
"RTN","BPSOSRX3",80,0)
 ; secondary billing and primary Tricare billing related fields
"RTN","BPSOSRX3",81,0)
 I $G(MOREDATA("RTYPE"))'="" I $$FILLFLDS^BPSUTIL2(9002313.77,"1.08",BPIEN77,MOREDATA("RTYPE"))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.08)
"RTN","BPSOSRX3",82,0)
 I $G(MOREDATA("PRIMARY BILL"))'="" I $$FILLFLDS^BPSUTIL2(9002313.77,"1.09",BPIEN77,MOREDATA("PRIMARY BILL"))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.09)
"RTN","BPSOSRX3",83,0)
 I $G(MOREDATA("PRIOR PAYMENT"))'="" I $$FILLFLDS^BPSUTIL2(9002313.77,"1.1",BPIEN77,MOREDATA("PRIOR PAYMENT"))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.1)
"RTN","BPSOSRX3",84,0)
 I $G(MOREDATA("337-4C"))'="" I $$FILLFLDS^BPSUTIL2(9002313.77,1.11,BPIEN77,MOREDATA("337-4C"))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.11)   ; cob other payments count
"RTN","BPSOSRX3",85,0)
 I $G(MOREDATA("308-C8"))'="" I $$FILLFLDS^BPSUTIL2(9002313.77,1.12,BPIEN77,MOREDATA("308-C8"))<1 Q "0^"_$$ERRFIELD(BPIEN77,1,BPERRMSG,9002313.77,1.12)   ; other coverage code
"RTN","BPSOSRX3",86,0)
 ;
"RTN","BPSOSRX3",87,0)
 ; store secondary billing related data entered by the user - esg 6/8/10
"RTN","BPSOSRX3",88,0)
 S BPQ=0,BPERRMSG=""
"RTN","BPSOSRX3",89,0)
 I BPCOBIND=2 D
"RTN","BPSOSRX3",90,0)
 . N AMTIEN,BPIEN1,BPIEN2,BPIEN778,BPZ,BPZ1,BPZ2,OPAMT,OPAPQ,OPAYD,OPREJ,PIEN,REJIEN
"RTN","BPSOSRX3",91,0)
 . S PIEN=0 F  S PIEN=$O(MOREDATA("OTHER PAYER",PIEN)) Q:'PIEN!BPQ  D
"RTN","BPSOSRX3",92,0)
 .. S OPAYD=$G(MOREDATA("OTHER PAYER",PIEN,0)) Q:OPAYD=""
"RTN","BPSOSRX3",93,0)
 .. ;
"RTN","BPSOSRX3",94,0)
 .. ; count up the number of multiples we have in each set
"RTN","BPSOSRX3",95,0)
 .. S BPZ=0 F BPZ1=0:1 S BPZ=$O(MOREDATA("OTHER PAYER",PIEN,"P",BPZ)) Q:'BPZ
"RTN","BPSOSRX3",96,0)
 .. S BPZ=0 F BPZ2=0:1 S BPZ=$O(MOREDATA("OTHER PAYER",PIEN,"R",BPZ)) Q:'BPZ
"RTN","BPSOSRX3",97,0)
 .. I BPZ1,BPZ2 S BPQ=1,BPERRMSG="Can't have both payments and rejects for the same OTHER PAYER" Q
"RTN","BPSOSRX3",98,0)
 .. ;
"RTN","BPSOSRX3",99,0)
 .. ; add a new entry to subfile 9002313.778
"RTN","BPSOSRX3",100,0)
 .. S BPIEN778=$$INSITEM^BPSUTIL2(9002313.778,BPIEN77,PIEN,PIEN,"",,0)
"RTN","BPSOSRX3",101,0)
 .. I BPIEN778<1 S BPERRMSG="Can't create entry in COB OTHER PAYERS multiple of the BPS REQUESTS file",BPQ=1 Q
"RTN","BPSOSRX3",102,0)
 .. S BPERRMSG="Can't populate field in COB OTHER PAYERS multiple"   ; just in case BPQ is set below
"RTN","BPSOSRX3",103,0)
 .. ;
"RTN","BPSOSRX3",104,0)
 .. ; set the rest of the pieces at this level
"RTN","BPSOSRX3",105,0)
 .. I $P(OPAYD,U,2)'="" I $$FILLFLDS^BPSUTIL2(9002313.778,.02,PIEN_","_BPIEN77,$P(OPAYD,U,2))<1 S BPQ=1 Q
"RTN","BPSOSRX3",106,0)
 .. I $P(OPAYD,U,3)'="" I $$FILLFLDS^BPSUTIL2(9002313.778,.03,PIEN_","_BPIEN77,$P(OPAYD,U,3))<1 S BPQ=1 Q
"RTN","BPSOSRX3",107,0)
 .. I $P(OPAYD,U,4)'="" I $$FILLFLDS^BPSUTIL2(9002313.778,.04,PIEN_","_BPIEN77,$P(OPAYD,U,4))<1 S BPQ=1 Q
"RTN","BPSOSRX3",108,0)
 .. I $P(OPAYD,U,5)'="" I $$FILLFLDS^BPSUTIL2(9002313.778,.05,PIEN_","_BPIEN77,$P(OPAYD,U,5))<1 S BPQ=1 Q
"RTN","BPSOSRX3",109,0)
 .. I $$FILLFLDS^BPSUTIL2(9002313.778,.06,PIEN_","_BPIEN77,BPZ1)<1 S BPQ=1 Q
"RTN","BPSOSRX3",110,0)
 .. I $$FILLFLDS^BPSUTIL2(9002313.778,.07,PIEN_","_BPIEN77,BPZ2)<1 S BPQ=1 Q
"RTN","BPSOSRX3",111,0)
 .. S BPERRMSG=""
"RTN","BPSOSRX3",112,0)
 .. ;
"RTN","BPSOSRX3",113,0)
 .. ; now loop thru the other payer payment array
"RTN","BPSOSRX3",114,0)
 .. S AMTIEN=0 F  S AMTIEN=$O(MOREDATA("OTHER PAYER",PIEN,"P",AMTIEN)) Q:'AMTIEN!BPQ  D
"RTN","BPSOSRX3",115,0)
 ... S OPAMT=$G(MOREDATA("OTHER PAYER",PIEN,"P",AMTIEN,0))
"RTN","BPSOSRX3",116,0)
 ... S OPAPQ=$P(OPAMT,U,2)   ; 342-HC other payer amt paid qualifier (ncpdp 5.1 blank is OK)
"RTN","BPSOSRX3",117,0)
 ... S OPAMT=+OPAMT          ; 431-DV other payer amt paid
"RTN","BPSOSRX3",118,0)
 ... ;
"RTN","BPSOSRX3",119,0)
 ... ; add a new entry to subfile 9002313.7781
"RTN","BPSOSRX3",120,0)
 ... S BPIEN1=$$INSITEM^BPSUTIL2(9002313.7781,PIEN_","_BPIEN77,OPAMT,AMTIEN,"",,0)
"RTN","BPSOSRX3",121,0)
 ... I BPIEN1<1 S BPERRMSG="Can't create entry in 9002313.7781 subfile",BPQ=1 Q
"RTN","BPSOSRX3",122,0)
 ... ;
"RTN","BPSOSRX3",123,0)
 ... ; set piece 2
"RTN","BPSOSRX3",124,0)
 ... I OPAPQ'="" I $$FILLFLDS^BPSUTIL2(9002313.7781,.02,AMTIEN_","_PIEN_","_BPIEN77,OPAPQ)<1 D
"RTN","BPSOSRX3",125,0)
 .... S BPQ=1,BPERRMSG="Can't populate .02 field in 9002313.7781 subfile"
"RTN","BPSOSRX3",126,0)
 .... Q
"RTN","BPSOSRX3",127,0)
 ... Q
"RTN","BPSOSRX3",128,0)
 .. ;
"RTN","BPSOSRX3",129,0)
 .. ; now loop thru the other payer reject array
"RTN","BPSOSRX3",130,0)
 .. S REJIEN=0 F  S REJIEN=$O(MOREDATA("OTHER PAYER",PIEN,"R",REJIEN)) Q:'REJIEN!BPQ  D
"RTN","BPSOSRX3",131,0)
 ... S OPREJ=$G(MOREDATA("OTHER PAYER",PIEN,"R",REJIEN,0)) Q:OPREJ=""  Q:$P(OPREJ,U,1)=""
"RTN","BPSOSRX3",132,0)
 ... ;
"RTN","BPSOSRX3",133,0)
 ... ; add a new entry to subfile 9002313.7782
"RTN","BPSOSRX3",134,0)
 ... S BPIEN2=$$INSITEM^BPSUTIL2(9002313.7782,PIEN_","_BPIEN77,$P(OPREJ,U,1),REJIEN,"",,0)
"RTN","BPSOSRX3",135,0)
 ... I BPIEN2<1 S BPERRMSG="Can't create entry in 9002313.7782 subfile",BPQ=1 Q
"RTN","BPSOSRX3",136,0)
 ... Q
"RTN","BPSOSRX3",137,0)
 .. Q
"RTN","BPSOSRX3",138,0)
 . Q
"RTN","BPSOSRX3",139,0)
 I BPQ Q "0^"_BPERRMSG_" (COB DATA)"
"RTN","BPSOSRX3",140,0)
 ;
"RTN","BPSOSRX3",141,0)
 ;store DURREC info
"RTN","BPSOSRX3",142,0)
 S BPQ=0
"RTN","BPSOSRX3",143,0)
 S DUR=0
"RTN","BPSOSRX3",144,0)
 F  S DUR=$O(MOREDATA("DUR",DUR)) Q:+DUR=0!(BPQ=1)  D
"RTN","BPSOSRX3",145,0)
 . S BPIEN771=$$INSITEM^BPSUTIL2(9002313.771,BPIEN77,$P(MOREDATA("DUR",DUR,0),U),DUR,"",,0)
"RTN","BPSOSRX3",146,0)
 . I BPIEN771<1 S BPERRMSG="Cannot create DUR record in DUR multiple of the BPS REQUEST file",BPQ=1 Q
"RTN","BPSOSRX3",147,0)
 . S BPERRMSG="Cannot populate a field in DUR multiple"
"RTN","BPSOSRX3",148,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.771,".02",DUR_","_BPIEN77,$P(MOREDATA("DUR",DUR,0),U,2))<1 S BPQ=1 Q
"RTN","BPSOSRX3",149,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.771,".03",DUR_","_BPIEN77,$P(MOREDATA("DUR",DUR,0),U,3))<1 S BPQ=1 Q
"RTN","BPSOSRX3",150,0)
 I BPQ=1 Q "0^"_BPERRMSG_" DUR DATA"
"RTN","BPSOSRX3",151,0)
 ;
"RTN","BPSOSRX3",152,0)
 ;store ins to IB INSURER DATA
"RTN","BPSOSRX3",153,0)
 S BPQ=0
"RTN","BPSOSRX3",154,0)
 S BPCOB=0 F  S BPCOB=$O(BPIENS78(BPCOB)) Q:+BPCOB=0!(BPQ=1)  D
"RTN","BPSOSRX3",155,0)
 . S BPIEN772=$$INSITEM^BPSUTIL2(9002313.772,BPIEN77,BPCOB,BPCOB,"",,0)
"RTN","BPSOSRX3",156,0)
 . I BPIEN772<1 S BPERRMSG="Cannot create record in IBDATA multiple of the BPS REQUEST file",BPQ=1 Q
"RTN","BPSOSRX3",157,0)
 . S BPERRMSG="Cannot populate a field in IBDATA multiple"
"RTN","BPSOSRX3",158,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.772,".02",BPCOB_","_BPIEN77,$S(BPCOBIND=BPCOB:1,1:0))<1 S BPQ=1 Q
"RTN","BPSOSRX3",159,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.772,".03",BPCOB_","_BPIEN77,BPIENS78(BPCOB))<1 S BPQ=1 Q
"RTN","BPSOSRX3",160,0)
 I BPQ=1 Q "0^"_BPERRMSG_"INSURER DATA"
"RTN","BPSOSRX3",161,0)
 ;
"RTN","BPSOSRX3",162,0)
 ;return 1 (success) and IEN of the 9002313.77
"RTN","BPSOSRX3",163,0)
 Q "1^"_BPIEN77
"RTN","BPSOSRX3",164,0)
 ;
"RTN","BPSOSRX3",165,0)
 ;check if the field is used in MOREDATA for the specified REQUEST TYPE - CLAIM="C" /UNCLAIM="U"
"RTN","BPSOSRX3",166,0)
ACTFIELD(BPSKIP,BPREQTYP,BPFLD) ;
"RTN","BPSOSRX3",167,0)
 ;if reverse
"RTN","BPSOSRX3",168,0)
 I (BPREQTYP="U")!(BPSKIP=1) Q ";1.01;2.01;2.02;6.02;"[(";"_BPFLD_";")
"RTN","BPSOSRX3",169,0)
 Q 1  ;if "ERES","OF","RF"
"RTN","BPSOSRX3",170,0)
 ;
"RTN","BPSOSRX3",171,0)
 ;Lock BPS REQUEST
"RTN","BPSOSRX3",172,0)
LOCK77(BPTIMOUT,IEN59,BPSRC) ;
"RTN","BPSOSRX3",173,0)
 N BPRET
"RTN","BPSOSRX3",174,0)
 L +^BPS(9002313.77):+$G(BPTIMOUT)
"RTN","BPSOSRX3",175,0)
 S BPRET=$T
"RTN","BPSOSRX3",176,0)
 I $G(IEN59)>0 D LOG^BPSOSL(IEN59,$G(BPSRC)_$S(BPRET=1:"-Lock",1:"-Failed to Lock")_" BPS REQUEST file")
"RTN","BPSOSRX3",177,0)
 Q BPRET
"RTN","BPSOSRX3",178,0)
 ;
"RTN","BPSOSRX3",179,0)
 ;UnLock BPS REQUEST
"RTN","BPSOSRX3",180,0)
UNLOCK77(IEN59,BPSRC) ;
"RTN","BPSOSRX3",181,0)
 L -^BPS(9002313.77)
"RTN","BPSOSRX3",182,0)
 I $G(IEN59)>0 D LOG^BPSOSL(IEN59,$G(BPSRC)_"-Unlock BPS REQUEST file")
"RTN","BPSOSRX3",183,0)
 Q
"RTN","BPSOSRX3",184,0)
 ;calculate new BPS REQUEST ien
"RTN","BPSOSRX3",185,0)
NEWIEN77(BPRX,BPRF,BPTYPE) ;
"RTN","BPSOSRX3",186,0)
 N BPL,BPL1,BPDT,BPTM
"RTN","BPSOSRX3",187,0)
 S BPRX="00"_BPRX
"RTN","BPSOSRX3",188,0)
 S BPL=$L(BPRX)
"RTN","BPSOSRX3",189,0)
 S BPDT=$H
"RTN","BPSOSRX3",190,0)
 S BPL1=$L(+BPDT)
"RTN","BPSOSRX3",191,0)
 S BPTM=$P(BPDT,",",2)_"00000"
"RTN","BPSOSRX3",192,0)
 Q +($E(+BPDT,BPL1-3,BPL1)_$E(BPTM,1,5)_"."_$S($G(BPTYPE)="U":0,1:1)_$E(BPRX,BPL-2,BPL)_BPRF)
"RTN","BPSOSRX3",193,0)
 ;
"RTN","BPSOSRX3",194,0)
 ;BP77 - ien of BPS REQUEST
"RTN","BPSOSRX3",195,0)
ERRFIELD(BP77,BPRFILE,BPMESS,BPFILENO,BPFLDNO) ;
"RTN","BPSOSRX3",196,0)
 I $G(BP77)>0 D DELREQST^BPSOSRX4(BP77) ;delete incomplete record
"RTN","BPSOSRX3",197,0)
 Q $$FIELDMSG^BPSOSRX2(BPRFILE,BPMESS,BPFILENO,BPFLDNO)
"RTN","BPSOSRX3",198,0)
 ;
"RTN","BPSOSRX3",199,0)
 ;BPSOSRX3
"RTN","BPSOSRX4")
0^19^B55754369
"RTN","BPSOSRX4",1,0)
BPSOSRX4 ;ALB/SS - ECME REQUESTS ;04-JAN-08
"RTN","BPSOSRX4",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8**;JUN 2004;Build 29
"RTN","BPSOSRX4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSRX4",4,0)
 ;
"RTN","BPSOSRX4",5,0)
 Q
"RTN","BPSOSRX4",6,0)
 ;restore MOREDATA from the file 9002313.77
"RTN","BPSOSRX4",7,0)
READMORE(BPIEN77,MOREDATA) ;
"RTN","BPSOSRX4",8,0)
 N BPIEN772,BPCOB,BPIEN78,BPACTTYP,BPDURCNT,BPPAYSEQ
"RTN","BPSOSRX4",9,0)
 N BPY S BPY=""
"RTN","BPSOSRX4",10,0)
 ;S MOREDATA=0
"RTN","BPSOSRX4",11,0)
 S MOREDATA("USER")=$P($G(^BPS(9002313.77,BPIEN77,6)),U,2) ;6.02
"RTN","BPSOSRX4",12,0)
 S BPPAYSEQ=$P($G(^BPS(9002313.77,BPIEN77,0)),U,3)
"RTN","BPSOSRX4",13,0)
 S BPPAYSEQ=$S(BPPAYSEQ:BPPAYSEQ,1:1)
"RTN","BPSOSRX4",14,0)
 S MOREDATA("PAYER SEQUENCE")=BPPAYSEQ
"RTN","BPSOSRX4",15,0)
 S MOREDATA("RX ACTION")=$P($G(^BPS(9002313.77,BPIEN77,1)),U,1) ;1.01
"RTN","BPSOSRX4",16,0)
 S BPACTTYP=MOREDATA("RX ACTION")
"RTN","BPSOSRX4",17,0)
 S MOREDATA("ELIG")=$P($G(^BPS(9002313.77,BPIEN77,1)),U,6) ;1.06
"RTN","BPSOSRX4",18,0)
 S $P(MOREDATA("BILL"),U,1)=$P($G(^BPS(9002313.77,BPIEN77,1)),U,5) ;1,05
"RTN","BPSOSRX4",19,0)
 S $P(MOREDATA("BILL"),U,2)=$P($G(^BPS(9002313.77,BPIEN77,1)),U,7) ;1,07
"RTN","BPSOSRX4",20,0)
 S $P(MOREDATA("BILL"),U,3)=$P($G(^BPS(9002313.77,BPIEN77,1)),U,6) ;1,06
"RTN","BPSOSRX4",21,0)
 ;S MOREDATA("BILL")=$P($G(^BPS(9002313.77,BPIEN77,1)),U,5)_U_$P($G(^BPS(9002313.77,BPIEN77,1)),U,7)_U_$P($G(^BPS(9002313.77,BPIEN77,1)),U,6) ;1,05^1.07^1.06
"RTN","BPSOSRX4",22,0)
 S MOREDATA("DATE OF SERVICE")=$P($G(^BPS(9002313.77,BPIEN77,2)),U,1) ;2.01
"RTN","BPSOSRX4",23,0)
 S MOREDATA("REVERSAL REASON")=$P($G(^BPS(9002313.77,BPIEN77,2)),U,2) ;2.02
"RTN","BPSOSRX4",24,0)
 S $P(MOREDATA("BPSDATA",1),U,1)=$P($G(^BPS(9002313.77,BPIEN77,4)),U,1) ;4.01
"RTN","BPSOSRX4",25,0)
 S $P(MOREDATA("BPSDATA",1),U,2)=$P($G(^BPS(9002313.77,BPIEN77,4)),U,2) ;4.02
"RTN","BPSOSRX4",26,0)
 S $P(MOREDATA("BPSDATA",1),U,3)=$P($G(^BPS(9002313.77,BPIEN77,4)),U,3) ;4.03
"RTN","BPSOSRX4",27,0)
 S $P(MOREDATA("BPSDATA",1),U,4)=$P($G(^BPS(9002313.77,BPIEN77,4)),U,4) ;4.04
"RTN","BPSOSRX4",28,0)
 S $P(MOREDATA("BPSDATA",1),U,5)=$P($G(^BPS(9002313.77,BPIEN77,4)),U,5) ;4.05
"RTN","BPSOSRX4",29,0)
 S $P(MOREDATA("BPSDATA",1),U,6)=$P($G(^BPS(9002313.77,BPIEN77,4)),U,6) ;4.06
"RTN","BPSOSRX4",30,0)
 S $P(MOREDATA("BPSDATA",1),U,7)=$P($G(^BPS(9002313.77,BPIEN77,4)),U,7) ;4.07
"RTN","BPSOSRX4",31,0)
 I $L($P($G(^BPS(9002313.77,BPIEN77,2)),U,5))>0 S MOREDATA("BPSCLARF")=$$GET1^DIQ(9002313.77,BPIEN77_",",2.05,"E") ; clarification code
"RTN","BPSOSRX4",32,0)
 ;DUR override codes Reason for Service Code, Professional Service Code, Result of Service Code
"RTN","BPSOSRX4",33,0)
 ;
"RTN","BPSOSRX4",34,0)
 S MOREDATA("RTYPE")=$P($G(^BPS(9002313.77,BPIEN77,1)),U,8)
"RTN","BPSOSRX4",35,0)
 I BPPAYSEQ=2 D
"RTN","BPSOSRX4",36,0)
 . S MOREDATA("PRIMARY BILL")=$P($G(^BPS(9002313.77,BPIEN77,1)),U,9)
"RTN","BPSOSRX4",37,0)
 . S MOREDATA("PRIOR PAYMENT")=$P($G(^BPS(9002313.77,BPIEN77,1)),U,10)
"RTN","BPSOSRX4",38,0)
 . S MOREDATA("337-4C")=$P($G(^BPS(9002313.77,BPIEN77,1)),U,11)        ;1.11 cob other payments count
"RTN","BPSOSRX4",39,0)
 . S MOREDATA("308-C8")=$P($G(^BPS(9002313.77,BPIEN77,1)),U,12)        ;1.12 other coverage code
"RTN","BPSOSRX4",40,0)
 . ;
"RTN","BPSOSRX4",41,0)
 . ; build COB data array - esg - 6/10/10
"RTN","BPSOSRX4",42,0)
 . N COBPIEN,APDIEN,REJIEN
"RTN","BPSOSRX4",43,0)
 . K MOREDATA("OTHER PAYER")
"RTN","BPSOSRX4",44,0)
 . S COBPIEN=0 F  S COBPIEN=$O(^BPS(9002313.77,BPIEN77,8,COBPIEN)) Q:'COBPIEN  D
"RTN","BPSOSRX4",45,0)
 .. S MOREDATA("OTHER PAYER",COBPIEN,0)=$G(^BPS(9002313.77,BPIEN77,8,COBPIEN,0))
"RTN","BPSOSRX4",46,0)
 .. ;
"RTN","BPSOSRX4",47,0)
 .. ; retrieve data from other payer amount paid multiple
"RTN","BPSOSRX4",48,0)
 .. S APDIEN=0 F  S APDIEN=$O(^BPS(9002313.77,BPIEN77,8,COBPIEN,1,APDIEN)) Q:'APDIEN  D
"RTN","BPSOSRX4",49,0)
 ... S MOREDATA("OTHER PAYER",COBPIEN,"P",APDIEN,0)=$G(^BPS(9002313.77,BPIEN77,8,COBPIEN,1,APDIEN,0))
"RTN","BPSOSRX4",50,0)
 ... Q
"RTN","BPSOSRX4",51,0)
 .. ;
"RTN","BPSOSRX4",52,0)
 .. ; retrieve data from other payer reject multiple
"RTN","BPSOSRX4",53,0)
 .. S REJIEN=0 F  S REJIEN=$O(^BPS(9002313.77,BPIEN77,8,COBPIEN,2,REJIEN)) Q:'REJIEN  D
"RTN","BPSOSRX4",54,0)
 ... S MOREDATA("OTHER PAYER",COBPIEN,"R",REJIEN,0)=$G(^BPS(9002313.77,BPIEN77,8,COBPIEN,2,REJIEN,0))
"RTN","BPSOSRX4",55,0)
 ... Q
"RTN","BPSOSRX4",56,0)
 .. Q
"RTN","BPSOSRX4",57,0)
 . Q
"RTN","BPSOSRX4",58,0)
 ;
"RTN","BPSOSRX4",59,0)
 S BPDURCNT=0 F  S BPDURCNT=$O(^BPS(9002313.77,BPIEN77,3,BPDURCNT)) Q:+BPDURCNT=0  D
"RTN","BPSOSRX4",60,0)
 . S MOREDATA("DUR",BPDURCNT,0)=$G(^BPS(9002313.77,BPIEN77,3,BPDURCNT,0))
"RTN","BPSOSRX4",61,0)
 ;
"RTN","BPSOSRX4",62,0)
 I $L($P($G(^BPS(9002313.77,BPIEN77,2)),U,7))>0 S $P(MOREDATA("BPSAUTH"),U,1)=$P($G(^BPS(9002313.77,BPIEN77,2)),U,7) ;preauth.code
"RTN","BPSOSRX4",63,0)
 I $L($P($G(^BPS(9002313.77,BPIEN77,2)),U,8))>0 S $P(MOREDATA("BPSAUTH"),U,2)=$P($G(^BPS(9002313.77,BPIEN77,2)),U,8) ;preauth number
"RTN","BPSOSRX4",64,0)
 I $L($P($G(^BPS(9002313.77,BPIEN77,2)),U,4))>0 S MOREDATA("BPOVRIEN")=$P($G(^BPS(9002313.77,BPIEN77,2)),U,4) ;override code (RED option)
"RTN","BPSOSRX4",65,0)
 S BPIEN772=0 F  S BPIEN772=$O(^BPS(9002313.77,BPIEN77,5,BPIEN772)) Q:+BPIEN772=0  D
"RTN","BPSOSRX4",66,0)
 . S BPCOB=+$G(^BPS(9002313.77,BPIEN77,5,BPIEN772,0)) ;.01
"RTN","BPSOSRX4",67,0)
 . S BPIEN78=+$P($G(^BPS(9002313.77,BPIEN77,5,BPIEN772,0)),U,3) ;.03
"RTN","BPSOSRX4",68,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,1)=$P($G(^BPS(9002313.78,BPIEN78,0)),U,8) ;.08
"RTN","BPSOSRX4",69,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,2)=$P($G(^BPS(9002313.78,BPIEN78,1)),U,1) ;1.01
"RTN","BPSOSRX4",70,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,3)=$P($G(^BPS(9002313.78,BPIEN78,1)),U,2) ;1.02
"RTN","BPSOSRX4",71,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,4)=$P($G(^BPS(9002313.78,BPIEN78,4)),U,1) ;4.01
"RTN","BPSOSRX4",72,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,5)=$P($G(^BPS(9002313.78,BPIEN78,1)),U,3) ;1.03
"RTN","BPSOSRX4",73,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,6)=$P($G(^BPS(9002313.78,BPIEN78,1)),U,4) ;1.04
"RTN","BPSOSRX4",74,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,7)=$P($G(^BPS(9002313.78,BPIEN78,1)),U,5) ;1.05
"RTN","BPSOSRX4",75,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,8)=$P($G(^BPS(9002313.78,BPIEN78,1)),U,6) ;1.06
"RTN","BPSOSRX4",76,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,9)=$P($G(^BPS(9002313.78,BPIEN78,1)),U,7) ;1.07
"RTN","BPSOSRX4",77,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,10)=$P($G(^BPS(9002313.78,BPIEN78,1)),U,8) ;1.08
"RTN","BPSOSRX4",78,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,11)=$P($G(^BPS(9002313.78,BPIEN78,4)),U,2) ;4.02
"RTN","BPSOSRX4",79,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,12)=$P($G(^BPS(9002313.78,BPIEN78,4)),U,3) ;4.03
"RTN","BPSOSRX4",80,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,13)=$P($G(^BPS(9002313.78,BPIEN78,2)),U,6) ;2.06
"RTN","BPSOSRX4",81,0)
 . S $P(MOREDATA("IBDATA",BPCOB,1),U,14)=$P($G(^BPS(9002313.78,BPIEN78,0)),U,7) ;.07
"RTN","BPSOSRX4",82,0)
 . S $P(MOREDATA("IBDATA",BPCOB,2),U,1)=$P($G(^BPS(9002313.78,BPIEN78,2)),U,1) ;2.01
"RTN","BPSOSRX4",83,0)
 . S $P(MOREDATA("IBDATA",BPCOB,2),U,2)=$P($G(^BPS(9002313.78,BPIEN78,2)),U,2) ;2.02
"RTN","BPSOSRX4",84,0)
 . S $P(MOREDATA("IBDATA",BPCOB,2),U,3)=$P($G(^BPS(9002313.78,BPIEN78,2)),U,3) ;2.03
"RTN","BPSOSRX4",85,0)
 . S $P(MOREDATA("IBDATA",BPCOB,2),U,4)=$P($G(^BPS(9002313.78,BPIEN78,2)),U,4) ;2.04
"RTN","BPSOSRX4",86,0)
 . S $P(MOREDATA("IBDATA",BPCOB,2),U,5)=$P($G(^BPS(9002313.78,BPIEN78,2)),U,5) ;2.05
"RTN","BPSOSRX4",87,0)
 . S $P(MOREDATA("IBDATA",BPCOB,3),U,1)=$P($G(^BPS(9002313.78,BPIEN78,3)),U,1) ;3.01
"RTN","BPSOSRX4",88,0)
 . S $P(MOREDATA("IBDATA",BPCOB,3),U,2)=$P($G(^BPS(9002313.78,BPIEN78,3)),U,2) ;3.02
"RTN","BPSOSRX4",89,0)
 . S $P(MOREDATA("IBDATA",BPCOB,3),U,3)=$P($G(^BPS(9002313.78,BPIEN78,3)),U,3) ;3.03
"RTN","BPSOSRX4",90,0)
 . S $P(MOREDATA("IBDATA",BPCOB,3),U,4)=$P($G(^BPS(9002313.78,BPIEN78,3)),U,4) ;3.04 eligibility
"RTN","BPSOSRX4",91,0)
 . S $P(MOREDATA("IBDATA",BPCOB,3),U,5)=$P($G(^BPS(9002313.78,BPIEN78,3)),U,5) ;3.05 insurance ien
"RTN","BPSOSRX4",92,0)
 . S $P(MOREDATA("IBDATA",BPCOB,3),U,6)=$P($G(^BPS(9002313.78,BPIEN78,3)),U,6) ;3.06 COB
"RTN","BPSOSRX4",93,0)
 Q
"RTN","BPSOSRX4",94,0)
 ;
"RTN","BPSOSRX4",95,0)
 ;change Process flag to "COMPLETED"
"RTN","BPSOSRX4",96,0)
COMPLETD(BPIEN77) ;
"RTN","BPSOSRX4",97,0)
 Q $$CHNGPRFL^BPSOSRX6(BPIEN77,3)
"RTN","BPSOSRX4",98,0)
 ;
"RTN","BPSOSRX4",99,0)
 ;inactivate BPS REQUEST
"RTN","BPSOSRX4",100,0)
INACTIVE(BPIEN77) ;
"RTN","BPSOSRX4",101,0)
 Q $$CHNGPRFL^BPSOSRX6(BPIEN77,5)
"RTN","BPSOSRX4",102,0)
 ;activate the request - change Process flag to "ACTIVATED"
"RTN","BPSOSRX4",103,0)
ACTIVATE(BPIEN77) ;
"RTN","BPSOSRX4",104,0)
 ;do we need to check what was the status of previous one - if it was rejected then we shouldn't activate it?
"RTN","BPSOSRX4",105,0)
 Q $$CHNGPRFL^BPSOSRX6(BPIEN77,1)
"RTN","BPSOSRX4",106,0)
 ;
"RTN","BPSOSRX4",107,0)
 ;change Process flag to "IN PROCESS"
"RTN","BPSOSRX4",108,0)
INPROCES(BPIEN77) ;
"RTN","BPSOSRX4",109,0)
 Q $$CHNGPRFL^BPSOSRX6(BPIEN77,2)
"RTN","BPSOSRX4",110,0)
 ;
"RTN","BPSOSRX4",111,0)
 ;delete BPS REQUEST record
"RTN","BPSOSRX4",112,0)
DELREQST(BPIEN77) ;
"RTN","BPSOSRX4",113,0)
 N BPCOB
"RTN","BPSOSRX4",114,0)
 N DIK,DA
"RTN","BPSOSRX4",115,0)
 I $$INACTIVE(BPIEN77)
"RTN","BPSOSRX4",116,0)
 ;Q
"RTN","BPSOSRX4",117,0)
 S BPCOB=0
"RTN","BPSOSRX4",118,0)
 F  S BPCOB=$O(^BPS(9002313.77,BPIEN77,5,BPCOB)) Q:+BPCOB=0  D
"RTN","BPSOSRX4",119,0)
 . S DIK="^BPS(9002313.78,"
"RTN","BPSOSRX4",120,0)
 . S DA=+$P($G(^BPS(9002313.77,BPIEN77,5,BPCOB,0)),U,3)
"RTN","BPSOSRX4",121,0)
 . D ^DIK
"RTN","BPSOSRX4",122,0)
 ;
"RTN","BPSOSRX4",123,0)
 S DIK="^BPS(9002313.77,"
"RTN","BPSOSRX4",124,0)
 S DA=BPIEN77
"RTN","BPSOSRX4",125,0)
 D ^DIK
"RTN","BPSOSRX4",126,0)
 Q
"RTN","BPSOSRX4",127,0)
 ;
"RTN","BPSOSRX4",128,0)
 ;update fields in BPS REQUEST and BPS TRANSACTION
"RTN","BPSOSRX4",129,0)
UPD7759(BP77,IEN59) ;
"RTN","BPSOSRX4",130,0)
 N BPTYPE,BPSTIME,BPCOB,BPZ
"RTN","BPSOSRX4",131,0)
 I +$G(BP77)=0!(+$G(IEN59)=0) Q
"RTN","BPSOSRX4",132,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Populating fields in BPS Transaction "_IEN59_" and request "_BP77)
"RTN","BPSOSRX4",133,0)
 I $$FILLFLDS^BPSUTIL2(9002313.59,"16",IEN59,BP77)<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#16) of (#9002313.59)")
"RTN","BPSOSRX4",134,0)
 S BPSTIME=+$P($G(^BPS(9002313.77,BP77,6)),U,1) I $$FILLFLDS^BPSUTIL2(9002313.59,"17",IEN59,BPSTIME)<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#17) of (#9002313.59)")
"RTN","BPSOSRX4",135,0)
 S BPCOB=+$P($G(^BPS(9002313.77,BP77,0)),U,3) I $$FILLFLDS^BPSUTIL2(9002313.59,"18",IEN59,$S(BPCOB=0:1,1:BPCOB))<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#18) of (#9002313.59)")
"RTN","BPSOSRX4",136,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,".06",BP77,IEN59)<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.06) of (#9002313.77)")
"RTN","BPSOSRX4",137,0)
 S BPZ=$$UPUSRTIM^BPSOSRX6(BP77,$S($G(DUZ):+DUZ,1:.5)) I +BPZ=0 D LOG^BPSOSL(IEN59,$T(+0)_$P(BPZ,U,2))
"RTN","BPSOSRX4",138,0)
 S BPTYPE=$P($G(^BPS(9002313.77,BP77,1)),U,4)
"RTN","BPSOSRX4",139,0)
 I BPTYPE="C"!(BPTYPE="U") D  Q
"RTN","BPSOSRX4",140,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.59,"19",IEN59,BPTYPE)<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#19) of (#9002313.59)")
"RTN","BPSOSRX4",141,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.59,"7",IEN59,+$$NOW^BPSOSRX())<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#7) of (#9002313.59)")
"RTN","BPSOSRX4",142,0)
 . I BPTYPE="C" Q
"RTN","BPSOSRX4",143,0)
 . ;if UNCLAIM (reversal)
"RTN","BPSOSRX4",144,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.59,"405",IEN59,BP77)<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#405) of (#9002313.59)")
"RTN","BPSOSRX4",145,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.59,"406",IEN59,BPSTIME)<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#406) of (#9002313.59)")
"RTN","BPSOSRX4",146,0)
 ; verify and populate the field (#.06) of BPS REQUEST with the BPS TRANSACTION ien
"RTN","BPSOSRX4",147,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-Unknown Transaction Type")
"RTN","BPSOSRX4",148,0)
 Q
"RTN","BPSOSRX4",149,0)
 ;
"RTN","BPSOSRX5")
0^39^B36392851
"RTN","BPSOSRX5",1,0)
BPSOSRX5 ;ALB/SS - ECME REQUESTS ;10-JAN-08
"RTN","BPSOSRX5",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8**;JUN 2004;Build 29
"RTN","BPSOSRX5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSRX5",4,0)
 ;
"RTN","BPSOSRX5",5,0)
 ; if Resubmit then check was the previous UNCLAIM accepted 
"RTN","BPSOSRX5",6,0)
 ; (Cannot resubmit reversed claims unless they are accepted)
"RTN","BPSOSRX5",7,0)
 ;
"RTN","BPSOSRX5",8,0)
TODAY() ;
"RTN","BPSOSRX5",9,0)
 D NOW^%DTC
"RTN","BPSOSRX5",10,0)
 Q $P(%,".",1)
"RTN","BPSOSRX5",11,0)
 ;
"RTN","BPSOSRX5",12,0)
 ;check if according the last response the payer IS going to PAY
"RTN","BPSOSRX5",13,0)
 ;(Note: reversals can be done only on previously payable claims, if reversal failed then the claim stays PAYABLE)
"RTN","BPSOSRX5",14,0)
PAYABLE(BPRESP) ;
"RTN","BPSOSRX5",15,0)
 Q ",E PAYABLE,E DUPLICATE,E REVERSAL REJECTED,E REVERSAL OTHER,E REVERSAL UNSTRANDED,"[(","_BPRESP_",")
"RTN","BPSOSRX5",16,0)
 ;
"RTN","BPSOSRX5",17,0)
 ;Action type
"RTN","BPSOSRX5",18,0)
ACTTYPE(BWHR) ;
"RTN","BPSOSRX5",19,0)
 Q:",AREV,CRLR,CRLX,DC,DDED,DE,EREV,HLD,RS,"[(","_BWHR_",") "U"  ;UNCLAIM (reversal)
"RTN","BPSOSRX5",20,0)
 Q:",CRLB,ED,ERES,RL,RRL,"[(","_BWHR_",") "UC"  ;UNCLAIM (reversal) + CLAIM (resubmit)
"RTN","BPSOSRX5",21,0)
 Q:",ARES,BB,OF,PC,PE,PL,PP,RF,RN,"[(","_BWHR_",") "C"  ;CLAIM (the very first submit OR resubmit only)
"RTN","BPSOSRX5",22,0)
 Q ""  ;unknown
"RTN","BPSOSRX5",23,0)
 ;
"RTN","BPSOSRX5",24,0)
 ;Check ECME availability at the site
"RTN","BPSOSRX5",25,0)
 ;return :
"RTN","BPSOSRX5",26,0)
 ; 1^CLMSTAT -off
"RTN","BPSOSRX5",27,0)
 ; null -on
"RTN","BPSOSRX5",28,0)
ECMESITE(SITE) ;
"RTN","BPSOSRX5",29,0)
 I '$G(SITE) Q "1^No Site Information"
"RTN","BPSOSRX5",30,0)
 I '$$ECMEON^BPSUTIL(SITE) Q "1^ECME switch is not on for the site"
"RTN","BPSOSRX5",31,0)
 Q ""
"RTN","BPSOSRX5",32,0)
 ;
"RTN","BPSOSRX5",33,0)
 ;is called by STATUS99^BPSOSU when the status of the current claim becomes 99%
"RTN","BPSOSRX5",34,0)
 ;Activates the next scheduled request if any
"RTN","BPSOSRX5",35,0)
 ;
"RTN","BPSOSRX5",36,0)
 ;input:
"RTN","BPSOSRX5",37,0)
 ;IEN59 - BPS TRANSACTION ien
"RTN","BPSOSRX5",38,0)
 ;BPCLMST - claim status
"RTN","BPSOSRX5",39,0)
 ;     For submissions (type =C):
"RTN","BPSOSRX5",40,0)
 ;       E PAYABLE, E CAPTURED, E DUPLICATE, E REJECTED, E OTHER, and
"RTN","BPSOSRX5",41,0)
 ;       E STRANDED
"RTN","BPSOSRX5",42,0)
 ;
"RTN","BPSOSRX5",43,0)
 ;     For Reversals (type =U):
"RTN","BPSOSRX5",44,0)
 ;       E REVERSAL ACCEPTED, E REVERSAL REJECTED, E REVERSAL OTHER, and
"RTN","BPSOSRX5",45,0)
 ;       E REVERSAL STRANDED
"RTN","BPSOSRX5",46,0)
 ;
"RTN","BPSOSRX5",47,0)
 ;output:
"RTN","BPSOSRX5",48,0)
 ; return 0 if there is no any next request for the RX/refill
"RTN","BPSOSRX5",49,0)
 ; otherwise - return IEN of next BPS REQUEST
"RTN","BPSOSRX5",50,0)
REQST99(IEN59,BPCLMST) ;
"RTN","BPSOSRX5",51,0)
 N BPLCK,BPRXRF,RXI,RXR,BPRETV,BPTYPE,RESAFTRV,BPRETACT,BPPAYSEQ,BPTYPREQ
"RTN","BPSOSRX5",52,0)
 N BFILLDAT,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPCOBIND,BPDUR,BPTYPNXT
"RTN","BPSOSRX5",53,0)
 S RESAFTRV=0
"RTN","BPSOSRX5",54,0)
 ;get RX and Rf by ien59
"RTN","BPSOSRX5",55,0)
 S BPRXRF=$$RXREF^BPSSCRU2(IEN59)
"RTN","BPSOSRX5",56,0)
 S RXI=+BPRXRF,RXR=$P(BPRXRF,U,2)
"RTN","BPSOSRX5",57,0)
 ;get lock - to decide what to do with the new next request
"RTN","BPSOSRX5",58,0)
 ;Example 
"RTN","BPSOSRX5",59,0)
 ;if this request (Request A) is the last one in the chain and we just received a new request (Request B)
"RTN","BPSOSRX5",60,0)
 ;for the same RX/RF, - then the Request B needs to be activated after Request A has been completed. 
"RTN","BPSOSRX5",61,0)
 ;Who will be doing this?
"RTN","BPSOSRX5",62,0)
 ;Situation 1:
"RTN","BPSOSRX5",63,0)
 ;if this code REQST99^BPSOSRX5 gets the lock first then it will not be able to activate Request B (because we don't have it 
"RTN","BPSOSRX5",64,0)
 ;in the NEXT REQUEST field). So Request A will be completed and when the REQST^BPSOSRX code gets the lock it will 
"RTN","BPSOSRX5",65,0)
 ;find Request A as completed and will not populate the NEXT REQUEST field of Request A - instead it will just activate
"RTN","BPSOSRX5",66,0)
 ;the new Request B.
"RTN","BPSOSRX5",67,0)
 ;Situation 2:
"RTN","BPSOSRX5",68,0)
 ;if the REQST^BPSOSRX code gets the lock first then it will check the status of the Request A and since it is still "IN PROCESS"
"RTN","BPSOSRX5",69,0)
 ;then it will populate the NEXT REQUEST field of the Request 1 with ien of Request 2, and then release the lock.
"RTN","BPSOSRX5",70,0)
 ;Then when the REQST99^BPSOSRX5 gets the lock it checks the NEXT REQUEST field and activate the request 2
"RTN","BPSOSRX5",71,0)
 ;
"RTN","BPSOSRX5",72,0)
 S BPLCK=$$LOCKRF^BPSOSRX(RXI,RXR,10,IEN59,$T(+0))
"RTN","BPSOSRX5",73,0)
 I 'BPLCK D  Q 0
"RTN","BPSOSRX5",74,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-RX/RF Locked")
"RTN","BPSOSRX5",75,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot lock RX/RF in REQST99 (STATUS99) "_$P(BPRETV,U,2))
"RTN","BPSOSRX5",76,0)
 N BP77,BPNXT77,BPRET
"RTN","BPSOSRX5",77,0)
 S BP77=+$P($G(^BPST(IEN59,0)),U,12)
"RTN","BPSOSRX5",78,0)
 I BP77=0 D LOG^BPSOSL(IEN59,$T(+0)_"-SUBMIT REQUEST not populated") D:BPLCK UNLCKRF^BPSOSRX(RXI,RXR,IEN59,$T(+0)) Q 0
"RTN","BPSOSRX5",79,0)
 S BPRETV=$$COMPLETD^BPSOSRX4(BP77) I +BPRETV=0 D  Q 0
"RTN","BPSOSRX5",80,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot change the PROCESS FLAG to COMPLETED: "_$P(BPRETV,U,2))
"RTN","BPSOSRX5",81,0)
 . D:BPLCK UNLCKRF^BPSOSRX(RXI,RXR,IEN59,$T(+0))
"RTN","BPSOSRX5",82,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-The request "_BP77_" has been changed to COMPLETED ("_+$P($G(^BPS(9002313.77,BP77,0)),U,4)_")")
"RTN","BPSOSRX5",83,0)
 S BPTYPE=$P($G(^BPS(9002313.77,BP77,1)),U,4)
"RTN","BPSOSRX5",84,0)
 ;
"RTN","BPSOSRX5",85,0)
 ;Skip and delete duplicate requests if any
"RTN","BPSOSRX5",86,0)
 ;and get the NEXT REQUEST
"RTN","BPSOSRX5",87,0)
 S BPNXT77=+$$GETNXREQ^BPSOSRX6(BP77,1,1,IEN59)
"RTN","BPSOSRX5",88,0)
 ;
"RTN","BPSOSRX5",89,0)
 ;if this was reversal (UNCLAIM)
"RTN","BPSOSRX5",90,0)
 ;- the following request is scheduled
"RTN","BPSOSRX5",91,0)
 ;- the next request is "CLAIM"
"RTN","BPSOSRX5",92,0)
 ;- the RX action is = resubmit (ERES)
"RTN","BPSOSRX5",93,0)
 ;then this is a submit after reversal
"RTN","BPSOSRX5",94,0)
 I BPTYPE="U",$P($G(^BPS(9002313.77,+BPNXT77,1)),U,4)="C",$P($G(^BPS(9002313.77,+BPNXT77,1)),U,1)="ERES" S RESAFTRV=1
"RTN","BPSOSRX5",95,0)
 I RESAFTRV=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Reverse then Resubmit attempt")
"RTN","BPSOSRX5",96,0)
 ;
"RTN","BPSOSRX5",97,0)
 S BPPAYSEQ=$$COB59^BPSUTIL2(IEN59) ;payer sequence
"RTN","BPSOSRX5",98,0)
 ;
"RTN","BPSOSRX5",99,0)
 ;if the current request is failed then cancel and delete all sequential requests and quit
"RTN","BPSOSRX5",100,0)
 I $$SUCCESS^BPSOSRX7(BPTYPE,BPCLMST)=0 D  D:BPLCK UNLCKRF^BPSOSRX(RXI,RXR,IEN59,$T(+0)) Q 0
"RTN","BPSOSRX5",101,0)
 . ;if secondary claim was rejected with certain reject codes - send it to Pharmacy worklist
"RTN","BPSOSRX5",102,0)
 . I BPTYPE="C",BPPAYSEQ=2 I $$SENDREJ^BPSWRKLS(RXI,RXR,IEN59,BPPAYSEQ)
"RTN","BPSOSRX5",103,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_" request failed - removing this and all sequential requests")
"RTN","BPSOSRX5",104,0)
 . I RESAFTRV=1 D LOG^BPSOSL(IEN59,$T(+0)_"Cannot - Reversal failed - E REVERSAL REJECTED")
"RTN","BPSOSRX5",105,0)
 . D DELALLRQ^BPSOSRX7(BP77,IEN59)
"RTN","BPSOSRX5",106,0)
 ;
"RTN","BPSOSRX5",107,0)
 ;If there is no any "next request" for the RX/refill - delete the completed request and quit with 0
"RTN","BPSOSRX5",108,0)
 I BPNXT77=0 D  Q 0
"RTN","BPSOSRX5",109,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-There is no NEXT REQUEST")
"RTN","BPSOSRX5",110,0)
 . D DELREQST^BPSOSRX4(BP77) D:BPLCK UNLCKRF^BPSOSRX(RXI,RXR,IEN59,$T(+0))
"RTN","BPSOSRX5",111,0)
 ;
"RTN","BPSOSRX5",112,0)
 ;if NEXT REQUEST
"RTN","BPSOSRX5",113,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-The NEXT "_$P($G(^BPS(9002313.77,+BPNXT77,1)),U,4)_"-type REQUEST is "_BPNXT77)
"RTN","BPSOSRX5",114,0)
 ;
"RTN","BPSOSRX5",115,0)
 S BPTYPREQ=$P($G(^BPS(9002313.77,+BPNXT77,1)),U,4) ;action type
"RTN","BPSOSRX5",116,0)
 ;if secondary claim AND action type ="C"
"RTN","BPSOSRX5",117,0)
 ;- don't do billing determination again - it was done manually by the user, so we can't do it here
"RTN","BPSOSRX5",118,0)
 I BPPAYSEQ>1,BPTYPREQ="C" S BPRETACT=$$ACTIVATE^BPSNCPD4(BPNXT77,"C") G:BPRETACT=0 SUCC G UNSUCC
"RTN","BPSOSRX5",119,0)
 ;
"RTN","BPSOSRX5",120,0)
 I RESAFTRV=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Now resubmit")
"RTN","BPSOSRX5",121,0)
 S BFILLDAT=+$P($G(^BPS(9002313.77,BPNXT77,2)),U)
"RTN","BPSOSRX5",122,0)
 S BWHERE=$P($G(^BPS(9002313.77,BPNXT77,1)),U)
"RTN","BPSOSRX5",123,0)
 S BILLNDC=$P($G(^BPS(9002313.77,BPNXT77,2)),U,6) ;if we do not send it then BPSNCPDP will get the latest NDC
"RTN","BPSOSRX5",124,0)
 S REVREAS=$P($G(^BPS(9002313.77,BPNXT77,2)),U,2)
"RTN","BPSOSRX5",125,0)
 S DURREC=""
"RTN","BPSOSRX5",126,0)
 S BPDUR=$O(^BPS(9002313.77,BPNXT77,3,"")) I BPDUR S DURREC=^BPS(9002313.77,BPNXT77,3,BPDUR,0)
"RTN","BPSOSRX5",127,0)
 S BPOVRIEN=$P($G(^BPS(9002313.77,BPNXT77,2)),U,4)
"RTN","BPSOSRX5",128,0)
 S BPSCLARF=$P($G(^BPS(9002313.77,BPNXT77,2)),U,5)
"RTN","BPSOSRX5",129,0)
 S BPSAUTH=$P($G(^BPS(9002313.77,BPNXT77,2)),U,7) I BPSAUTH'="" S BPSAUTH=BPSAUTH_U_$P($G(^BPS(9002313.77,BPNXT77,2)),U,8)
"RTN","BPSOSRX5",130,0)
 S BPCOBIND=+$P($G(^BPS(9002313.77,BPNXT77,0)),U,3)
"RTN","BPSOSRX5",131,0)
 ;S BPJOBFLG="B"
"RTN","BPSOSRX5",132,0)
 ;S BPREQIEN=BPNXT77
"RTN","BPSOSRX5",133,0)
 ;call ECME engine in "B" (background) mode to:
"RTN","BPSOSRX5",134,0)
 ; perform checks if necessary,
"RTN","BPSOSRX5",135,0)
 ; update billing info if this is a CLAIM
"RTN","BPSOSRX5",136,0)
 ; and then activate the request
"RTN","BPSOSRX5",137,0)
 S BPRET=$$EN^BPSNCPDP(RXI,RXR,BFILLDAT,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN,BPSCLARF,BPSAUTH,BPCOBIND,"B",BPNXT77)
"RTN","BPSOSRX5",138,0)
UNSUCC ;if wasn't successful
"RTN","BPSOSRX5",139,0)
 I +BPRET'=0 D  Q 0
"RTN","BPSOSRX5",140,0)
 . D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot activate the next request: "_$P(BPRET,U,2))
"RTN","BPSOSRX5",141,0)
 . D DELALLRQ^BPSOSRX7(BP77,IEN59)
"RTN","BPSOSRX5",142,0)
 . D:BPLCK UNLCKRF^BPSOSRX(RXI,RXR,IEN59,$T(+0))
"RTN","BPSOSRX5",143,0)
SUCC ;if successful
"RTN","BPSOSRX5",144,0)
 D LOG^BPSOSL(IEN59,$T(+0)_"-The NEXT "_$P($G(^BPS(9002313.77,+BPNXT77,1)),U,4)_"-type REQUEST "_BPNXT77_" has been activated")
"RTN","BPSOSRX5",145,0)
 ;delete the completed REQUEST only if the next one has been activated successfully
"RTN","BPSOSRX5",146,0)
 D DELREQST^BPSOSRX4(BP77)
"RTN","BPSOSRX5",147,0)
 D:BPLCK UNLCKRF^BPSOSRX(RXI,RXR,IEN59,$T(+0))
"RTN","BPSOSRX5",148,0)
 ;run background process to pick up the activated request for secondary claim (for primary only - it is done when we call EN^BPSNCPDP above)
"RTN","BPSOSRX5",149,0)
 I BPPAYSEQ>1,BPTYPREQ="C" D RUNNING^BPSOSRX()
"RTN","BPSOSRX5",150,0)
 Q BPNXT77
"RTN","BPSOSRX5",151,0)
 ;BPSOSRX5
"RTN","BPSOSRX6")
0^33^B25512407
"RTN","BPSOSRX6",1,0)
BPSOSRX6 ;ALB/SS - ECME REQUESTS ;02-JAN-08
"RTN","BPSOSRX6",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8**;JUN 2004;Build 29
"RTN","BPSOSRX6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSOSRX6",4,0)
 ;
"RTN","BPSOSRX6",5,0)
 ;to change the PROCESS FLAG status of the request
"RTN","BPSOSRX6",6,0)
 ; BPIEN77 - BPS REQUEST ien
"RTN","BPSOSRX6",7,0)
 ; BPSTAT - new PROCESS FLAG value
"RTN","BPSOSRX6",8,0)
 ; returns
"RTN","BPSOSRX6",9,0)
 ; 1^the BPIEN77
"RTN","BPSOSRX6",10,0)
 ; or 
"RTN","BPSOSRX6",11,0)
 ; 0^error message
"RTN","BPSOSRX6",12,0)
CHNGPRFL(BPIEN77,BPSTAT) ;
"RTN","BPSOSRX6",13,0)
 N BPNODES,RXI,RXR
"RTN","BPSOSRX6",14,0)
 S BPNODES(0)=$G(^BPS(9002313.77,BPIEN77,0))
"RTN","BPSOSRX6",15,0)
 S RXI=+$P(BPNODES(0),U)
"RTN","BPSOSRX6",16,0)
 S RXR=+$P(BPNODES(0),U,2)
"RTN","BPSOSRX6",17,0)
 I '$G(RXI) Q "0^RX null error"
"RTN","BPSOSRX6",18,0)
 I '$G(RXR) S RXR=0
"RTN","BPSOSRX6",19,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,".04",BPIEN77,BPSTAT)<1 Q "0^Cannot update field #.04 (PROCESS FLAG) in BPS REQUEST"
"RTN","BPSOSRX6",20,0)
 ;update user and time
"RTN","BPSOSRX6",21,0)
 Q $$UPUSRTIM(BPIEN77,+$G(MOREDATA("USER")))
"RTN","BPSOSRX6",22,0)
 ;
"RTN","BPSOSRX6",23,0)
 ;to set NEXT REQUEST field
"RTN","BPSOSRX6",24,0)
 ; BPIEN77 - BPS REQUEST ien
"RTN","BPSOSRX6",25,0)
 ; BPNXTREQ - the NEXT REQUEST ien 
"RTN","BPSOSRX6",26,0)
 ; returns
"RTN","BPSOSRX6",27,0)
 ; 1^the BPIEN77
"RTN","BPSOSRX6",28,0)
 ; or 
"RTN","BPSOSRX6",29,0)
 ; 0^error message
"RTN","BPSOSRX6",30,0)
NXTREQST(BPIEN77,BPNXTREQ) ;
"RTN","BPSOSRX6",31,0)
 N BPNODES,RXI,RXR
"RTN","BPSOSRX6",32,0)
 S BPNODES(0)=$G(^BPS(9002313.77,BPIEN77,0))
"RTN","BPSOSRX6",33,0)
 S RXI=+$P(BPNODES(0),U)
"RTN","BPSOSRX6",34,0)
 S RXR=+$P(BPNODES(0),U,2)
"RTN","BPSOSRX6",35,0)
 I '$G(RXI) Q "0^RX null error"
"RTN","BPSOSRX6",36,0)
 I '$G(RXR) S RXR=0
"RTN","BPSOSRX6",37,0)
 I BPIEN77=BPNXTREQ Q "0^Next and current requests cannot be the same"
"RTN","BPSOSRX6",38,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,".05",BPIEN77,BPNXTREQ)<1 Q "0^Cannot update field #.05 (NEXT REQUEST) in BPS REQUEST"
"RTN","BPSOSRX6",39,0)
 ;update user and time and quit (return 1^ien77 if success)
"RTN","BPSOSRX6",40,0)
 Q $$UPUSRTIM(BPIEN77,+$G(MOREDATA("USER")))
"RTN","BPSOSRX6",41,0)
 ;
"RTN","BPSOSRX6",42,0)
 ;any active requests for the RX/refill? = scheduled,activated,in process,comleted but not activated yet
"RTN","BPSOSRX6",43,0)
 ;BPSRX - ien #52
"RTN","BPSOSRX6",44,0)
 ;BPSRF - refill no
"RTN","BPSOSRX6",45,0)
 ;BPCOB - COB (payer sequence)
"RTN","BPSOSRX6",46,0)
 ;returns
"RTN","BPSOSRX6",47,0)
 ;1 - yes
"RTN","BPSOSRX6",48,0)
 ;0 -no
"RTN","BPSOSRX6",49,0)
ACTREQS(BPSRX,BPSRF,BPCOB) ;
"RTN","BPSOSRX6",50,0)
 N BPZZ,BPACTRQ
"RTN","BPSOSRX6",51,0)
 S BPACTRQ=0
"RTN","BPSOSRX6",52,0)
 F BPZZ=0,1,2,3 I $G(^BPS(9002313.77,"AC",BPZZ,BPSRX,BPSRF))=BPCOB S BPACTRQ=1 Q:BPACTRQ=1
"RTN","BPSOSRX6",53,0)
 Q BPACTRQ
"RTN","BPSOSRX6",54,0)
 ;update time and user id
"RTN","BPSOSRX6",55,0)
 ;BPIEN77 - BPS REQUEST ien
"RTN","BPSOSRX6",56,0)
 ;BPUSER - user's DUZ
"RTN","BPSOSRX6",57,0)
 ;returns 1^BPIEN77
"RTN","BPSOSRX6",58,0)
 ;or 0^error message
"RTN","BPSOSRX6",59,0)
UPUSRTIM(BPIEN77,BPUSER) ;
"RTN","BPSOSRX6",60,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,"6.05",BPIEN77,+$$NOW^BPSOSRX())<1 Q "0^Cannot update the field #6.05 in BPS REQUEST"  ;S SUBMITDT=$$NOW
"RTN","BPSOSRX6",61,0)
 I $$FILLFLDS^BPSUTIL2(9002313.77,"6.06",BPIEN77,+BPUSER)<1 Q "0^Cannot update the field #6.06 in BPS REQUEST"  ;USER
"RTN","BPSOSRX6",62,0)
 Q "1^"_BPIEN77
"RTN","BPSOSRX6",63,0)
 ;remove all active requests for the RX/refill
"RTN","BPSOSRX6",64,0)
DELACTRQ(BPSRX,BPSRF) ;
"RTN","BPSOSRX6",65,0)
 N BP77
"RTN","BPSOSRX6",66,0)
 F BPZZ=0,1,2,3 D
"RTN","BPSOSRX6",67,0)
 . S BP77=0 F  S BP77=$O(^BPS(9002313.77,"AC",BPZZ,BPSRX,BPSRF,BP77)) Q:+BP77=0  D
"RTN","BPSOSRX6",68,0)
 . . D DELREQST^BPSOSRX4(BP77)
"RTN","BPSOSRX6",69,0)
 Q
"RTN","BPSOSRX6",70,0)
 ;Old status logic - to process claims that were submitted before Processing queue mods
"RTN","BPSOSRX6",71,0)
OLDSTAT(RXI,RXR,QUE) ;
"RTN","BPSOSRX6",72,0)
 ;
"RTN","BPSOSRX6",73,0)
 ; Setup needed variables
"RTN","BPSOSRX6",74,0)
 N IEN59,SDT,A,SUBDT
"RTN","BPSOSRX6",75,0)
 I '$G(RXI) Q ""
"RTN","BPSOSRX6",76,0)
 I $G(RXR)="" Q ""
"RTN","BPSOSRX6",77,0)
 I $G(QUE)="" S QUE=1
"RTN","BPSOSRX6",78,0)
 S IEN59=$$IEN59^BPSOSRX(RXI,RXR)
"RTN","BPSOSRX6",79,0)
 S SDT=$G(^XTMP("BPSOSRX",RXI,RXR))
"RTN","BPSOSRX6",80,0)
 ;
"RTN","BPSOSRX6",81,0)
 ; ECME record not created
"RTN","BPSOSRX6",82,0)
 I '$D(^BPST(IEN59)) D  Q A
"RTN","BPSOSRX6",83,0)
 . I QUE,SDT S A="IN PROGRESS"_U_SDT_U_$$STATI^BPSOSU(0)_U_-1 Q
"RTN","BPSOSRX6",84,0)
 . I QUE,$D(^XTMP("BPS-PROC","CLAIM",RXI,RXR)) S A="IN PROGRESS"_U_SDT_U_$$STATI^BPSOSU(0)_U_-1 Q
"RTN","BPSOSRX6",85,0)
 . S A=""
"RTN","BPSOSRX6",86,0)
 ;
"RTN","BPSOSRX6",87,0)
 ; Loop: Get data, quit if times and status match (no change during gather)
"RTN","BPSOSRX6",88,0)
 N C,T1,T2,S1,S2 F  D  I T1=T2,S1=S2 Q
"RTN","BPSOSRX6",89,0)
 . S T1=$$LASTUP59^BPSOSRX(IEN59)
"RTN","BPSOSRX6",90,0)
 . S S1=$$STATUS59^BPSOSRX(IEN59)
"RTN","BPSOSRX6",91,0)
 . I S1=99 D  ; completed
"RTN","BPSOSRX6",92,0)
 . . S A=$$CATEG^BPSOSUC(IEN59)
"RTN","BPSOSRX6",93,0)
 . . S C=$$RESTXT59^BPSOSRX(IEN59)
"RTN","BPSOSRX6",94,0)
 . I S1'=99 D
"RTN","BPSOSRX6",95,0)
 . . S A="IN PROGRESS"
"RTN","BPSOSRX6",96,0)
 . . S C=$$STATI^BPSOSU($S(S1="":10,1:S1))
"RTN","BPSOSRX6",97,0)
 . S T2=$$LASTUP59^BPSOSRX(IEN59)
"RTN","BPSOSRX6",98,0)
 . S S2=$$STATUS59^BPSOSRX(IEN59)
"RTN","BPSOSRX6",99,0)
 ;
"RTN","BPSOSRX6",100,0)
 ; If the queue parameter is set and the submit date from the queue
"RTN","BPSOSRX6",101,0)
 ;   follows the SUBMIT DATE/LAST UPDATE date from BPS TRANSACTION 
"RTN","BPSOSRX6",102,0)
 ;   or the RX/fill is still on the queue, then change the response
"RTN","BPSOSRX6",103,0)
 ;   to IN PROGRESS^Submit Date^WAITING TO START
"RTN","BPSOSRX6",104,0)
 S SUBDT=$$SUBMIT59^BPSOSRX(IEN59)
"RTN","BPSOSRX6",105,0)
 I SUBDT="" S SUBDT=T1
"RTN","BPSOSRX6",106,0)
 I $G(QUE),SDT>SUBDT!($D(^XTMP("BPS-PROC","CLAIM",RXI,RXR)))!($D(^XTMP("BPS-PROC","UNCLAIM",RXI,RXR))) S A="IN PROGRESS",T1=SDT,S1=-1,C=$$STATI^BPSOSU(0)
"RTN","BPSOSRX6",107,0)
 ;
"RTN","BPSOSRX6",108,0)
 ; When finishing the reversal of a Reversal/Resubmit, display IN PROGRESS
"RTN","BPSOSRX6",109,0)
 I $P($G(^BPST(IEN59,1)),"^",12)=1,S1=99 S A="IN PROGRESS",S1=98,C=$$STATI^BPSOSU(S1)
"RTN","BPSOSRX6",110,0)
 ;
"RTN","BPSOSRX6",111,0)
 ; Return results
"RTN","BPSOSRX6",112,0)
 Q A_U_T1_U_$E(C,1,255-$L(A)-$L(T1)-2)_U_S1
"RTN","BPSOSRX6",113,0)
 ;
"RTN","BPSOSRX6",114,0)
 ;check for duplicates and determine the NEXT REQUEST
"RTN","BPSOSRX6",115,0)
 ;BP77 - the current request (ien of #9002313.77)
"RTN","BPSOSRX6",116,0)
 ;BPDEL=1 - delete duplicates
"RTN","BPSOSRX6",117,0)
 ;BPUPDNXT=1 - update the NEXT REQUEST field of the current request after skipping (deleting) duplicates
"RTN","BPSOSRX6",118,0)
 ;(Note - if BPDEL=1 then BPUPDNXT will be set to 1 to avoid "hanging" requests
"RTN","BPSOSRX6",119,0)
 ;BP59 - (optional) the ien of BPS TRANSACTION file
"RTN","BPSOSRX6",120,0)
 ;Returns the next request or NULL (if there is no next request)
"RTN","BPSOSRX6",121,0)
GETNXREQ(BP77,BPDEL,BPUPDNXT,BP59) ;
"RTN","BPSOSRX6",122,0)
 N BPCUR,BPCURTYP,BPARRDEL
"RTN","BPSOSRX6",123,0)
 N BPNXT77,BPTYPNXT,BP77DEL
"RTN","BPSOSRX6",124,0)
 S BPCUR=BP77,BPCURTYP=$P($G(^BPS(9002313.77,BP77,1)),U,4)
"RTN","BPSOSRX6",125,0)
 F  D  Q:BPNXT77=0  Q:BPCURTYP'=BPTYPNXT  S BPCUR=BPNXT77,BPCURTYP=BPTYPNXT,BPARRDEL(BPNXT77)=""
"RTN","BPSOSRX6",126,0)
 . S BPNXT77=+$P($G(^BPS(9002313.77,BPCUR,0)),U,5)
"RTN","BPSOSRX6",127,0)
 . Q:BPNXT77=0
"RTN","BPSOSRX6",128,0)
 . S BPTYPNXT=$P($G(^BPS(9002313.77,BPNXT77,1)),U,4)
"RTN","BPSOSRX6",129,0)
 ;if nothing to skip then quit now
"RTN","BPSOSRX6",130,0)
 I '$O(BPARRDEL("")) Q BPNXT77
"RTN","BPSOSRX6",131,0)
 ; delete duplicates
"RTN","BPSOSRX6",132,0)
 I $G(BPDEL)=1 S BP77DEL=0 F  S BP77DEL=$O(BPARRDEL(BP77DEL)) Q:+BP77DEL=0  D
"RTN","BPSOSRX6",133,0)
 . I $G(BP59)>0 D LOG^BPSOSL(BP59,$T(+0)_"-Delete the duplicate request "_BP77DEL)
"RTN","BPSOSRX6",134,0)
 . D DELREQST^BPSOSRX4(BP77DEL)
"RTN","BPSOSRX6",135,0)
 I $G(BPDEL)=1 S BPUPDNXT=1
"RTN","BPSOSRX6",136,0)
 I $G(BPUPDNXT)=1 D
"RTN","BPSOSRX6",137,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.77,".05",BP77,BPNXT77)<1 D
"RTN","BPSOSRX6",138,0)
 . . I $G(BP59)>0 D LOG^BPSOSL(BP59,$T(+0)_"-Cannot update field #.05 (NEXT REQUEST) in BPS REQUEST")
"RTN","BPSOSRX6",139,0)
 . I $G(BP59)>0 D LOG^BPSOSL(BP59,$T(+0)_"-Update field #.05 (NEXT REQUEST) to "_BPNXT77_" in the request #"_BP77)
"RTN","BPSOSRX6",140,0)
 ;return the NEXT request
"RTN","BPSOSRX6",141,0)
 Q BPNXT77
"RTN","BPSOSRX6",142,0)
 ;BPSOSRX6
"RTN","BPSOSRX6",143,0)
 ;
"RTN","BPSPRRX")
0^1^B99076770
"RTN","BPSPRRX",1,0)
BPSPRRX ;ALB/SS - ePharmacy secondary billing ;12-DEC-08
"RTN","BPSPRRX",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8**;JUN 2004;Build 29
"RTN","BPSPRRX",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSPRRX",4,0)
 ;
"RTN","BPSPRRX",5,0)
 ;Entry point for the menu option [BPS COB PROCESS SECONDARY AND TRICARE CLAIMS]
"RTN","BPSPRRX",6,0)
 ;
"RTN","BPSPRRX",7,0)
EN1 ;
"RTN","BPSPRRX",8,0)
 N BPSRXN,BPS399,BPSZ,BPSQLOOP,BPPAYSEQ,BPSRET,BPS52,BPSRF,BPSDOS,BPSDFN
"RTN","BPSPRRX",9,0)
 N BPQLOOP2,BPSELIG,BPSP59,BPSPCLS,BP59,BPSEQ
"RTN","BPSPRRX",10,0)
 S BPSQLOOP=0
"RTN","BPSPRRX",11,0)
 S BPSRET=""
"RTN","BPSPRRX",12,0)
 F  D  Q:BPSQLOOP=1
"RTN","BPSPRRX",13,0)
 . ; Prompt for RX#
"RTN","BPSPRRX",14,0)
 . S BPSZ=$$PROMPTRX()
"RTN","BPSPRRX",15,0)
 . I +BPSZ=0 Q
"RTN","BPSPRRX",16,0)
 . I +BPSZ<0 S BPSQLOOP=1 Q
"RTN","BPSPRRX",17,0)
 . S BPSDFN=$P(BPSZ,U,4),BPSRXN=$P(BPSZ,U,3),BPS52=$P(BPSZ,U,2)
"RTN","BPSPRRX",18,0)
 . ;select refill
"RTN","BPSPRRX",19,0)
 . S BPSZ=$$RXREFIL^BPSPRRX6(BPS52,BPSDFN,BPSRXN)
"RTN","BPSPRRX",20,0)
 . I +BPSZ=-1 S BPSQLOOP=1 Q
"RTN","BPSPRRX",21,0)
 . S BPSRF=+BPSZ
"RTN","BPSPRRX",22,0)
 . S BPSDOS=+$P(BPSZ,U,2)
"RTN","BPSPRRX",23,0)
 . S BPQLOOP2=0
"RTN","BPSPRRX",24,0)
 . ;select payer sequence
"RTN","BPSPRRX",25,0)
 . F  D  Q:BPQLOOP2=1
"RTN","BPSPRRX",26,0)
 . . S BPPAYSEQ=$$SELCOB^BPSPRRX5("SELECT PAYER SEQUENCE","Select payer sequence for billing:")
"RTN","BPSPRRX",27,0)
 . . I +BPPAYSEQ=-1 S BPQLOOP2=1,BPSQLOOP=1 Q
"RTN","BPSPRRX",28,0)
 . . I +BPPAYSEQ'=1,(+BPPAYSEQ'=2) Q
"RTN","BPSPRRX",29,0)
 . . ;
"RTN","BPSPRRX",30,0)
 . . W !
"RTN","BPSPRRX",31,0)
 . . ;Make sure claim isn't closed
"RTN","BPSPRRX",32,0)
 . . S BP59=$$IEN59^BPSOSRX(BPS52,BPSRF,BPPAYSEQ)
"RTN","BPSPRRX",33,0)
 . . I $$CLOSED02^BPSSCR03($P($G(^BPST(BP59,0)),U,4)) D  Q
"RTN","BPSPRRX",34,0)
 . . . S BPSEQ=$S(BPPAYSEQ=1:"primary",1:"secondary")
"RTN","BPSPRRX",35,0)
 . . . W !!,"A ",BPSEQ," claim exists that is closed and cannot be Resubmitted.",!,"Please reopen the closed ",BPSEQ," claim to resubmit."
"RTN","BPSPRRX",36,0)
 . . . S BPQLOOP2=1 Q
"RTN","BPSPRRX",37,0)
 . . ;
"RTN","BPSPRRX",38,0)
 . . ;create primary claim for entered RX/refill
"RTN","BPSPRRX",39,0)
 . . I BPPAYSEQ=1 S BPSRET=$$PRI4RXRF(BPS52,BPSRF,BPSDOS,BPSDFN) D DISPLMES(BPSRET,1) S:(+BPSRET'<0)!(+BPSRET=-100) BPQLOOP2=1,BPSQLOOP=1 Q
"RTN","BPSPRRX",40,0)
 . . ;
"RTN","BPSPRRX",41,0)
 . . ;create secondary claim for entered RX/refill
"RTN","BPSPRRX",42,0)
 . . ;cannot bill non-released RX
"RTN","BPSPRRX",43,0)
 . . I BPPAYSEQ=2 I $$RELDATE^BPSBCKJ(BPS52,BPSRF)']"" D DISPLMES("-108^RX/refill not released") S BPQLOOP2=1 S:+BPSRET=-100 BPSQLOOP=1 Q
"RTN","BPSPRRX",44,0)
 . . I BPPAYSEQ=2 D  Q:BPQLOOP2=1
"RTN","BPSPRRX",45,0)
 . . . ;If this is a secondary, make sure Primary is either Payable or Closed.
"RTN","BPSPRRX",46,0)
 . . . ;Get Primary claim status 
"RTN","BPSPRRX",47,0)
 . . . S BPSPCLS=$$FINDECLM^BPSPRRX5(BPS52,BPSRF,1)
"RTN","BPSPRRX",48,0)
 . . . S BPSP59=$P(BPSPCLS,U,2)
"RTN","BPSPRRX",49,0)
 . . . I $P(BPSPCLS,U)'=1 D  Q:BPQLOOP2=1
"RTN","BPSPRRX",50,0)
 . . . . Q:$$CLOSED02^BPSSCR03($P($G(^BPST(BPSP59,0)),U,4))
"RTN","BPSPRRX",51,0)
 . . . . W !,"The secondary claim cannot be Submitted unless the primary is either payable",!,"or closed. Please resubmit or close the primary claim first."
"RTN","BPSPRRX",52,0)
 . . . . S BPQLOOP2=1 Q
"RTN","BPSPRRX",53,0)
 . . . S BPSRET=$$SEC4RXRF(BPS52,BPSRF,BPSDOS,$G(BPSDFN)) D DISPLMES(BPSRET,2) S:(+BPSRET'<0)!(+BPSRET=-100) BPQLOOP2=1,BPSQLOOP=1 Q
"RTN","BPSPRRX",54,0)
 ;
"RTN","BPSPRRX",55,0)
 Q
"RTN","BPSPRRX",56,0)
 ;
"RTN","BPSPRRX",57,0)
 ;create primary claim for entered RX/refill
"RTN","BPSPRRX",58,0)
PRI4RXRF(BPS52,BPSRF,BPSDOS,BPSDFN) ;
"RTN","BPSPRRX",59,0)
 N BPSECLM,BPNEWCLM,BPSARR,BPSQ,BPRESUBM
"RTN","BPSPRRX",60,0)
 ;check if there is a primary e-claim
"RTN","BPSPRRX",61,0)
 S BPSECLM=$$FINDECLM^BPSPRRX5(BPS52,BPSRF,1)
"RTN","BPSPRRX",62,0)
 I +BPSECLM=3 Q "-102^Claim in progress"
"RTN","BPSPRRX",63,0)
 I +BPSECLM=1 Q "-109^Existing PAYABLE e-claim. Please reverse it before resubmitting."
"RTN","BPSPRRX",64,0)
 S BPNEWCLM=0
"RTN","BPSPRRX",65,0)
 I +BPSECLM=2 D  I BPNEWCLM=0 Q "-100^Action cancelled"
"RTN","BPSPRRX",66,0)
 . D DISPECLM^BPSPRRX5(+$P(BPSECLM,U,2))
"RTN","BPSPRRX",67,0)
 . W !!,"There is an existing rejected/reversed e-claim for the RX/refill."
"RTN","BPSPRRX",68,0)
 . S BPNEWCLM=$$YESNO^BPSSCRRS("Do you want to submit a new primary claim(Y/N)","N")
"RTN","BPSPRRX",69,0)
 ;
"RTN","BPSPRRX",70,0)
 ; if not found or if existing rejected/reversed claim then continue , otherwise - quit
"RTN","BPSPRRX",71,0)
 ;
"RTN","BPSPRRX",72,0)
 S BPSQ=0
"RTN","BPSPRRX",73,0)
 ;check for primary bill
"RTN","BPSPRRX",74,0)
 S BPSZ=$$RXBILL^IBNCPUT3(BPS52,BPSRF,"P",BPSDOS,.BPSARR)
"RTN","BPSPRRX",75,0)
 I +BPSZ>0,+$P(BPSZ,U,2)>0 Q "-107^Existing active primary bill #"_$P($G(BPSARR(+$P(BPSZ,U,2))),U,1)
"RTN","BPSPRRX",76,0)
 I +BPSZ>0,+$P(BPSZ,U,2)=0 D  I +BPSQ'=0 Q BPSQ
"RTN","BPSPRRX",77,0)
 . N BPS399,BPSCNT
"RTN","BPSPRRX",78,0)
 . S (BPSCNT,BPS399)=0
"RTN","BPSPRRX",79,0)
 . F  S BPS399=$O(BPSARR(BPS399)) Q:+BPS399=0  D
"RTN","BPSPRRX",80,0)
 . . N BPPSEQ,BPSRET
"RTN","BPSPRRX",81,0)
 . . S BPSCNT=BPSCNT+1
"RTN","BPSPRRX",82,0)
 . . S BPSRET=$P(BPSARR(BPS399),U,5)
"RTN","BPSPRRX",83,0)
 . . S BPPSEQ=$S(BPSRET="S":"Secondary",BPSRET="T":"Tertiary",BPSRET="P":"Primary",1:"Unknown")
"RTN","BPSPRRX",84,0)
 . . W:BPSCNT=1 !!,"Non-active primary bill(s) found:"
"RTN","BPSPRRX",85,0)
 . . D DISPBILL^BPSPRRX2(BPPSEQ,$P(BPSARR(BPS399),U,4),$P(BPSARR(BPS399),U,1),$P(BPSARR(BPS399),U,2),BPS52,BPSRF,$P(BPSARR(BPS399),U,3),(BPSCNT=1))
"RTN","BPSPRRX",86,0)
 . W !
"RTN","BPSPRRX",87,0)
 . I $$YESNO^BPSSCRRS("DO YOU WISH TO CREATE A NEW PRIMARY BILL ?(Y/N)","N")=0 S BPSQ="-100^Action cancelled"
"RTN","BPSPRRX",88,0)
 Q $$PRIMARY^BPSPRRX4(BPS52,BPSRF,BPSDFN,BPSDOS,BPSECLM,BPNEWCLM)
"RTN","BPSPRRX",89,0)
 ;
"RTN","BPSPRRX",90,0)
 ;create secondary claim for entered RX/refill
"RTN","BPSPRRX",91,0)
SEC4RXRF(BPS52,BPSRF,BPSDOS,BPSDFN) ;
"RTN","BPSPRRX",92,0)
 N BPSARR,BPSRET,BPS399
"RTN","BPSPRRX",93,0)
 ;
"RTN","BPSPRRX",94,0)
 ; try to find the primary bill
"RTN","BPSPRRX",95,0)
 S BPSRET=$$RXBILL^IBNCPUT3(BPS52,BPSRF,"P",BPSDOS,.BPSARR)
"RTN","BPSPRRX",96,0)
 ;
"RTN","BPSPRRX",97,0)
 ; if no primary bills found at all
"RTN","BPSPRRX",98,0)
 I +BPSRET=0 Q $$SECNOPRM^BPSPRRX5(BPS52,BPSRF,BPSDOS,$G(BPSDFN),"1,2")
"RTN","BPSPRRX",99,0)
 ;
"RTN","BPSPRRX",100,0)
 S BPS399=+$P(BPSRET,U,2)  ; active claim
"RTN","BPSPRRX",101,0)
 I BPS399'>0 S BPS399=+$O(BPSARR(999999999),-1)   ; most recent claim
"RTN","BPSPRRX",102,0)
 ;
"RTN","BPSPRRX",103,0)
 K BPSARR
"RTN","BPSPRRX",104,0)
 ; check if there any 2ndary bill
"RTN","BPSPRRX",105,0)
 S BPSRET=$$RXBILL^IBNCPUT3(BPS52,BPSRF,"S",BPSDOS,.BPSARR)
"RTN","BPSPRRX",106,0)
 I +BPSRET>0,+$P(BPSRET,U,2)>0 Q "-107^Existing active secondary bill #"_$P($G(BPSARR(+$P(BPSRET,U,2))),U,1)
"RTN","BPSPRRX",107,0)
 Q $$SECONDRY(BPS399,"1,2")
"RTN","BPSPRRX",108,0)
 ;
"RTN","BPSPRRX",109,0)
 ;Display messages
"RTN","BPSPRRX",110,0)
 ; -100^Action cancelled
"RTN","BPSPRRX",111,0)
 ; -101^Existing e-claim
"RTN","BPSPRRX",112,0)
 ; -102^Claim in progress
"RTN","BPSPRRX",113,0)
 ; -103^Invalid or wrong bill#
"RTN","BPSPRRX",114,0)
 ; -104^Existing rejected/reversed e-claim
"RTN","BPSPRRX",115,0)
 ; -105^The same group plan selected
"RTN","BPSPRRX",116,0)
 ; -107^Existing active bill
"RTN","BPSPRRX",117,0)
 ; -108^RX not released
"RTN","BPSPRRX",118,0)
DISPLMES(BPSZ,BPSPSEQ) ;
"RTN","BPSPRRX",119,0)
 I BPSZ'<0 Q
"RTN","BPSPRRX",120,0)
 I +BPSZ=-100 W !!,$P(BPSZ,U,2),! Q
"RTN","BPSPRRX",121,0)
 I +$G(BPSPSEQ)=0 W !!,"Cannot submit e-claim:",!," ",$P(BPSZ,U,2),!
"RTN","BPSPRRX",122,0)
 I $G(BPSPSEQ)=2 D
"RTN","BPSPRRX",123,0)
 . I +BPSZ=-105 W !,"Select another plan - the plan selected has been used for primary billing",!! Q
"RTN","BPSPRRX",124,0)
 . W !,"Cannot submit secondary claim:",!," ",$P(BPSZ,U,2),!
"RTN","BPSPRRX",125,0)
 I $G(BPSPSEQ)=1 D
"RTN","BPSPRRX",126,0)
 . W !,"Cannot submit primary claim:",!," ",$P(BPSZ,U,2),!
"RTN","BPSPRRX",127,0)
 Q
"RTN","BPSPRRX",128,0)
 ;
"RTN","BPSPRRX",129,0)
 ;Submit a secondary claim if there is a primary bill
"RTN","BPSPRRX",130,0)
 ;BPS399 - primary bill (ien of file #399)
"RTN","BPSPRRX",131,0)
 ;BPDISPPR - display bill information for
"RTN","BPSPRRX",132,0)
 ; "1" - primary 
"RTN","BPSPRRX",133,0)
 ; "2" - secondary
"RTN","BPSPRRX",134,0)
 ; "1,2" - both
"RTN","BPSPRRX",135,0)
 ;
"RTN","BPSPRRX",136,0)
 ;Submission result (return value of EN^BPSNCPDP)
"RTN","BPSPRRX",137,0)
 ;Or one of the negative error codes:
"RTN","BPSPRRX",138,0)
 ; -100^Action cancelled
"RTN","BPSPRRX",139,0)
 ; -101^Existing e-claim
"RTN","BPSPRRX",140,0)
 ; -102^Claim in progress
"RTN","BPSPRRX",141,0)
 ; -103^Invalid or wrong bill#
"RTN","BPSPRRX",142,0)
 ; -104^Existing rejected/reversed e-claim
"RTN","BPSPRRX",143,0)
 ; -105^The same group plan selected
"RTN","BPSPRRX",144,0)
 ; -106^The primary insurer needs to be billed first.
"RTN","BPSPRRX",145,0)
 ; -107^Existing active bill
"RTN","BPSPRRX",146,0)
SECONDRY(BPS399,BPDISPPR) ;
"RTN","BPSPRRX",147,0)
 N BPSBINFO,BPSRXCOB,BPSRX,BPSRF,BPSINIEN,BPPAYSEQ,BPSECLM,BP2NDBIL,BPSDFN,BPSRET,BPSDOS,BPRATTYP,BPSQ,BPY
"RTN","BPSPRRX",148,0)
 N BPSPLNSL,BPSECOND,BPRET,BPENGINE,BPSWHERE,BPSPLAN,BPSPL59,BPRTTP59,BPSARR,BPYDEF
"RTN","BPSPRRX",149,0)
 N BPRESUBM S BPRESUBM=0 ;default = original submission
"RTN","BPSPRRX",150,0)
 ;get primary bill data
"RTN","BPSPRRX",151,0)
 S BPSRET=$$BILINF^IBNCPUT3(BPS399,.BPSBINFO)
"RTN","BPSPRRX",152,0)
 I +BPSRET=-1 Q "-103"_U_$P(BPSRET,U,2)
"RTN","BPSPRRX",153,0)
 ;
"RTN","BPSPRRX",154,0)
 S BPSRX=BPSBINFO("PRESCRIPTION")
"RTN","BPSPRRX",155,0)
 S BPSRF=BPSBINFO("FILL NUMBER")
"RTN","BPSPRRX",156,0)
 S BPSDOS=$G(BPSBINFO("DOS"))
"RTN","BPSPRRX",157,0)
 ;
"RTN","BPSPRRX",158,0)
 S BPSDFN=+$P(BPSRET,U,2)
"RTN","BPSPRRX",159,0)
 S BPPAYSEQ=$S($P(BPSRET,U)="S":"Secondary",$P(BPSRET,U)="T":"Tertiary",$P(BPSRET,U)="P":"Primary",1:"Unknown")
"RTN","BPSPRRX",160,0)
 S BPSRXCOB=$S($P(BPSRET,U)="S":2,$P(BPSRET,U)="T":3,1:1)
"RTN","BPSPRRX",161,0)
 S BPSINIEN=BPSBINFO("INS IEN")
"RTN","BPSPRRX",162,0)
 ;display primary bill data
"RTN","BPSPRRX",163,0)
 I $G(BPDISPPR)[1 D
"RTN","BPSPRRX",164,0)
 . W !,"Primary bill:"
"RTN","BPSPRRX",165,0)
 . D DISPBILL^BPSPRRX2(BPPAYSEQ,BPSBINFO("INS NAME"),BPSBINFO("BILL #"),BPSBINFO("AR STATUS"),BPSRX,BPSRF,"",1)
"RTN","BPSPRRX",166,0)
 . W !
"RTN","BPSPRRX",167,0)
 ;check if there is the secondary e-claim
"RTN","BPSPRRX",168,0)
 S BPSECLM=$$FINDECLM^BPSPRRX5(BPSRX,BPSRF,2)
"RTN","BPSPRRX",169,0)
 I +BPSECLM=3 Q "-102^Claim in progress"
"RTN","BPSPRRX",170,0)
 I +BPSECLM=1 Q "-109^Existing PAYABLE e-claim. Please reverse it before resubmitting."
"RTN","BPSPRRX",171,0)
 S BPSQ=0
"RTN","BPSPRRX",172,0)
 I +BPSECLM=2 D  Q:BPSQ=1 "-100^Action cancelled"
"RTN","BPSPRRX",173,0)
 . D DISPECLM^BPSPRRX5(+$P(BPSECLM,U,2))
"RTN","BPSPRRX",174,0)
 . W !!,"There is an existing rejected/reversed secondary e-claim(s) for the RX/refill."
"RTN","BPSPRRX",175,0)
 . I $$YESNO^BPSSCRRS("Do you want to submit a new secondary claim(Y/N)","N")=1 S BPRESUBM=1
"RTN","BPSPRRX",176,0)
 . I BPRESUBM'=1 S BPSQ=1
"RTN","BPSPRRX",177,0)
 ; if not found or if existing rejected/reversed claim then continue , otherwise - quit
"RTN","BPSPRRX",178,0)
 ;I +BPSECLM'=0 Q "-101^Existing e-claim"
"RTN","BPSPRRX",179,0)
 ;prepopulate COB fields if this is a resubmit
"RTN","BPSPRRX",180,0)
 I BPRESUBM=1 I $$RES2NDCL^BPSPRRX6($$IEN59^BPSOSRX(BPSRX,BPSRF,2),.BPSPL59,.BPSECOND,.BPRTTP59)
"RTN","BPSPRRX",181,0)
 ;
"RTN","BPSPRRX",182,0)
 D  Q:+$P(BP2NDBIL,U,2)>0 "-107^Existing active secondary bill"
"RTN","BPSPRRX",183,0)
 . N BPSARR,BPS399,BPSCNT
"RTN","BPSPRRX",184,0)
 . ;check for the existing secondary bill
"RTN","BPSPRRX",185,0)
 . S BP2NDBIL=$$RXBILL^IBNCPUT3(BPSRX,BPSRF,"S",BPSDOS,.BPSARR)
"RTN","BPSPRRX",186,0)
 . I +BP2NDBIL=0 Q  ;not found
"RTN","BPSPRRX",187,0)
 . S BPS399=0
"RTN","BPSPRRX",188,0)
 . S BPSCNT=0
"RTN","BPSPRRX",189,0)
 . F  S BPS399=$O(BPSARR(BPS399)) Q:+BPS399=0  D
"RTN","BPSPRRX",190,0)
 . . N BPPSEQ
"RTN","BPSPRRX",191,0)
 . . S BPSCNT=BPSCNT+1
"RTN","BPSPRRX",192,0)
 . . I $G(BPDISPPR)[2 D
"RTN","BPSPRRX",193,0)
 . . . W:BPSCNT=1 !!,"Secondary bill(s) found:"
"RTN","BPSPRRX",194,0)
 . . . S BPSRET=$P(BPSARR(BPS399),U,5)
"RTN","BPSPRRX",195,0)
 . . . S BPPSEQ=$S($P(BPSRET,U)="S":"Secondary",$P(BPSRET,U)="T":"Tertiary",$P(BPSRET,U)="P":"Primary",1:"Unknown")
"RTN","BPSPRRX",196,0)
 . . . D DISPBILL^BPSPRRX2(BPPSEQ,$P(BPSARR(BPS399),U,4),$P(BPSARR(BPS399),U,1),$P(BPSARR(BPS399),U,2),BPSRX,BPSRF,$P(BPSARR(BPS399),U,3),(BPSCNT=1))
"RTN","BPSPRRX",197,0)
 . W !
"RTN","BPSPRRX",198,0)
 ;
"RTN","BPSPRRX",199,0)
 ; check for ePharmacy secondary ins policy
"RTN","BPSPRRX",200,0)
 S BPYDEF="N"
"RTN","BPSPRRX",201,0)
 I '$$SECINSCK(BPSDFN,BPSDOS) D
"RTN","BPSPRRX",202,0)
 . S BPYDEF="Y"
"RTN","BPSPRRX",203,0)
 . W !!,"Unable to find a secondary insurance policy which is e-Pharmacy billable."
"RTN","BPSPRRX",204,0)
 . W !,"You must correct this in order to continue.",!
"RTN","BPSPRRX",205,0)
 . Q
"RTN","BPSPRRX",206,0)
 ;
"RTN","BPSPRRX",207,0)
 ;ask the user if he wants to jump to the BCN PATIENT INSURANCE option
"RTN","BPSPRRX",208,0)
 S BPY=$$YESNO^BPSSCRRS("DO YOU WISH TO ADD/EDIT INSURANCE COMPANY DATA FOR THIS PATIENT?(Y/N)",BPYDEF)
"RTN","BPSPRRX",209,0)
 I BPY=1 D EN1^IBNCPDPI(BPSDFN)
"RTN","BPSPRRX",210,0)
 I BPY=-1 Q "-100^Action cancelled"
"RTN","BPSPRRX",211,0)
 ;
"RTN","BPSPRRX",212,0)
 I '$$SECINSCK(BPSDFN,BPSDOS) Q "-115^No Secondary e-Pharmacy Insurance Policy."
"RTN","BPSPRRX",213,0)
 ;
"RTN","BPSPRRX",214,0)
 S BPSECOND("PRIMARY BILL")=BPS399
"RTN","BPSPRRX",215,0)
 ;
"RTN","BPSPRRX",216,0)
 S BPRET=$$PRIMDATA^BPSPRRX4($$IEN59^BPSOSRX(BPSRX,BPSRF,1),.BPSECOND,1,BPRESUBM)
"RTN","BPSPRRX",217,0)
 I BPRET=0 D GETFR52^BPSPRRX4(BPSRX,BPSRF,.BPSECOND)
"RTN","BPSPRRX",218,0)
 ;
"RTN","BPSPRRX",219,0)
 I $$PROMPTS^BPSPRRX3(.BPSECOND)=-1 Q "-100^Action cancelled"
"RTN","BPSPRRX",220,0)
 I $$YESNO^BPSSCRRS("SUBMIT CLAIM TO "_$G(BPSECOND("INS NAME"))_" ?(Y/N)","Y")=0 Q "-100^Action cancelled"
"RTN","BPSPRRX",221,0)
 I BPRESUBM=0 S BPSWHERE=$S(BPSRF>0:"RF",1:"OF")
"RTN","BPSPRRX",222,0)
 ;set the flag that indicates that we should use new COB data to resubmit the secondary claim , 
"RTN","BPSPRRX",223,0)
 ;i.e. in BPSNCPDP the engine shouldn't use the COB data in BPS TRANSACTION for resubmit
"RTN","BPSPRRX",224,0)
 I BPRESUBM=1 S BPSECOND("NEW COB DATA")=1,BPSWHERE="ERES"
"RTN","BPSPRRX",225,0)
 S BPENGINE=$$SUBMCLM^BPSPRRX2(BPSECOND("PRESCRIPTION"),BPSECOND("FILL NUMBER"),BPSECOND("FILL DATE"),BPSWHERE,BPSECOND("BILLNDC"),2,BPSECOND("PLAN"),.BPSECOND,BPSECOND("RTYPE"))
"RTN","BPSPRRX",226,0)
 I +BPENGINE=4 W !!,$P(BPENGINE,U,2),!
"RTN","BPSPRRX",227,0)
 Q BPENGINE
"RTN","BPSPRRX",228,0)
 ;
"RTN","BPSPRRX",229,0)
 ; Prompts for RX# and gets confirmation
"RTN","BPSPRRX",230,0)
 ;returns:
"RTN","BPSPRRX",231,0)
 ; 1^RXIEN^RX#^DFN - Successful
"RTN","BPSPRRX",232,0)
 ; 0 - Timeout or Quit by user
"RTN","BPSPRRX",233,0)
 ; -1 = User entered "^"
"RTN","BPSPRRX",234,0)
PROMPTRX() ;
"RTN","BPSPRRX",235,0)
 N BPRET,BPSRX,BPSDFN,BPSPTNM,BPSRXN,BPSRXST,BPSDRUG,BPSDIC,BPSRXD,X,Y,DIQ,DR,DA,DIC
"RTN","BPSPRRX",236,0)
 S BPRET=0,(BPSDIC,DIC)=52,X=""
"RTN","BPSPRRX",237,0)
 S BPSDIC(0)="AENQ"
"RTN","BPSPRRX",238,0)
 W ! D DIC^PSODI(52,.BPSDIC,X) ;DBIA 4858
"RTN","BPSPRRX",239,0)
 I (Y=-1)!$D(DUOUT)!$D(DTOUT) Q +Y
"RTN","BPSPRRX",240,0)
 S (DA,BPSRX)=+Y,BPSRXN=$P(Y,U,2),DIQ="BPSRXD",DIQ(0)="IE",DR=".01;2;6;100"
"RTN","BPSPRRX",241,0)
 D DIQ^PSODI(52,DIC,DR,DA,.DIQ) ;DBIA 4858
"RTN","BPSPRRX",242,0)
 S BPSDFN=BPSRXD(52,DA,2,"I")
"RTN","BPSPRRX",243,0)
 S BPSPTNM=BPSRXD(52,DA,2,"E")
"RTN","BPSPRRX",244,0)
 S BPSDRUG=BPSRXD(52,DA,6,"E")
"RTN","BPSPRRX",245,0)
 S BPSRXST=BPSRXD(52,DA,100,"E")
"RTN","BPSPRRX",246,0)
 W !!,?1,"Patient",?25,"RX#",?37,"Drug Name",?63,"RX Status"
"RTN","BPSPRRX",247,0)
 W !,?1,$E(BPSPTNM,1,23),?25,$E(BPSRXN,1,11),?37,$E(BPSDRUG,1,25),?63,$E(BPSRXST,1,16),!
"RTN","BPSPRRX",248,0)
 Q $$YESNO^BPSSCRRS("DO YOU WANT TO CONTINUE?(Y/N)","Y")_U_BPSRX_U_BPSRXN_U_BPSDFN
"RTN","BPSPRRX",249,0)
 ;
"RTN","BPSPRRX",250,0)
SECINSCK(DFN,DOS) ; secondary insurance check
"RTN","BPSPRRX",251,0)
 ; check to see if patient has at least one ePharmacy secondary insurance policy
"RTN","BPSPRRX",252,0)
 ; function value = 1 if there is one, 0 otherwise
"RTN","BPSPRRX",253,0)
 ;
"RTN","BPSPRRX",254,0)
 N OK,BPSRET,BPSINS,BPX
"RTN","BPSPRRX",255,0)
 S OK=0
"RTN","BPSPRRX",256,0)
 I '$G(DFN)!'$G(DOS) G SECINX
"RTN","BPSPRRX",257,0)
 S BPSRET=$$INSUR^IBBAPI(DFN,DOS,"E",.BPSINS,"1,7,8")
"RTN","BPSPRRX",258,0)
 I '$D(BPSINS) G SECINX
"RTN","BPSPRRX",259,0)
 S BPX=0 F  S BPX=$O(BPSINS("IBBAPI","INSUR",BPX)) Q:'BPX  D  Q:OK
"RTN","BPSPRRX",260,0)
 . I $P($G(BPSINS("IBBAPI","INSUR",BPX,7)),U,1)=2 S OK=1 Q
"RTN","BPSPRRX",261,0)
 . Q
"RTN","BPSPRRX",262,0)
SECINX ;
"RTN","BPSPRRX",263,0)
 Q OK
"RTN","BPSPRRX",264,0)
 ;
"RTN","BPSPRRX1")
0^9^B12437232
"RTN","BPSPRRX1",1,0)
BPSPRRX1 ;ALB/SS - ePharmacy secondary billing ;16-DEC-08
"RTN","BPSPRRX1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8**;JUN 2004;Build 29
"RTN","BPSPRRX1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSPRRX1",4,0)
 ;
"RTN","BPSPRRX1",5,0)
 ;
"RTN","BPSPRRX1",6,0)
 ;display available plans and prompt the user to select the plan
"RTN","BPSPRRX1",7,0)
 ;input:
"RTN","BPSPRRX1",8,0)
 ; BPSDFN - patient's DFN
"RTN","BPSPRRX1",9,0)
 ; BPSDOS - date of service
"RTN","BPSPRRX1",10,0)
 ; BPRETAR - array to return details for the selected plan (by reference)
"RTN","BPSPRRX1",11,0)
 ; BPSPRMT - prompt
"RTN","BPSPRRX1",12,0)
 ; BPDEFPLN (optional) - default plan
"RTN","BPSPRRX1",13,0)
 ;return: 0 if not selected or no plans or any other error 
"RTN","BPSPRRX1",14,0)
 ;return: the GROUP INSURANCE PLAN ien (#355.3)
"RTN","BPSPRRX1",15,0)
 ; and selected plan's details in BPRETAR
"RTN","BPSPRRX1",16,0)
SELECTPL(BPSDFN,BPSDOS,BPRETAR,BPSPRMT,BPDEFPLN) ;
"RTN","BPSPRRX1",17,0)
 N BPSRET,BPSARR
"RTN","BPSPRRX1",18,0)
 S BPSRET=$$SELPLAN(BPSDFN,BPSDOS,"E",.BPSARR,"1,7,8,10,11,14,12,18",1,$S($L($G(BPSPRMT)):BPSPRMT,1:"SECONDARY INSURANCE POLICY"),"",$G(BPDEFPLN))
"RTN","BPSPRRX1",19,0)
 Q:+BPSRET=-1 0
"RTN","BPSPRRX1",20,0)
 Q:+BPSRET=0 0
"RTN","BPSPRRX1",21,0)
 M BPRETAR=BPSARR("IBBAPI","INSUR",+$P(BPSRET,U,3))
"RTN","BPSPRRX1",22,0)
 Q +$P(BPRETAR(8),U,1)
"RTN","BPSPRRX1",23,0)
 ;
"RTN","BPSPRRX1",24,0)
 ;select insurance from the list of the insurances which was built for the current user setting
"RTN","BPSPRRX1",25,0)
 ;for the User Screen.
"RTN","BPSPRRX1",26,0)
 ;input : 
"RTN","BPSPRRX1",27,0)
 ; BPSDFN - patient's DFN
"RTN","BPSPRRX1",28,0)
 ; BPSDOS - date of service
"RTN","BPSPRRX1",29,0)
 ; BPSTAT - IBSTAT flag in INSUR^IBBAPI
"RTN","BPSPRRX1",30,0)
 ; BPSARR - array to return results (by reference)
"RTN","BPSPRRX1",31,0)
 ; BPSFLDS - IBFLDS in INSUR^IBBAPI (list of fields to return, "*" for all)
"RTN","BPSPRRX1",32,0)
 ; BPSDISPL - display insurances before prompting for selection
"RTN","BPSPRRX1",33,0)
 ; BPSMESS - message to display before prompt
"RTN","BPSPRRX1",34,0)
 ; BPDEFPLN (optional) - default plan
"RTN","BPSPRRX1",35,0)
 ;output : 1^name of the insurance or null
"RTN","BPSPRRX1",36,0)
 ;0^ - if "^" or was not selected
"RTN","BPSPRRX1",37,0)
SELPLAN(BPSDFN,BPSDOS,BPSTAT,BPSARR,BPSFLDS,BPSDISPL,BPSPRMPT,BPSMESS,BPDEFPLN) ;
"RTN","BPSPRRX1",38,0)
 N BPSRET,BPSDFLT,BPSVAL
"RTN","BPSPRRX1",39,0)
 N DIR,Y,X
"RTN","BPSPRRX1",40,0)
 N BPX,BPCNT,BPTEL,BPCNT2
"RTN","BPSPRRX1",41,0)
 S BPSDFLT=""
"RTN","BPSPRRX1",42,0)
 S BPSRET=$$INSUR^IBBAPI(BPSDFN,BPSDOS,BPSTAT,.BPSARR,BPSFLDS)
"RTN","BPSPRRX1",43,0)
 W !,?4,"Insurance",?18,"COB",?23,"Subscriber ID",?37,"Group",?48,"Holder",?57,"Effective",?68,"Expires"
"RTN","BPSPRRX1",44,0)
 W !,?4,"=============",?18,"====",?23,"=============",?37,"==========",?48,"========",?57,"==========",?68,"=========="
"RTN","BPSPRRX1",45,0)
 S BPX=0
"RTN","BPSPRRX1",46,0)
 I $G(BPSDISPL) F  S BPX=$O(BPSARR("IBBAPI","INSUR",BPX)) Q:BPX=""  D
"RTN","BPSPRRX1",47,0)
 . W !,?1,BPX
"RTN","BPSPRRX1",48,0)
 . W ?4,$E($P($G(BPSARR("IBBAPI","INSUR",BPX,1)),U,2),1,13)
"RTN","BPSPRRX1",49,0)
 . W ?18,$E($P($G(BPSARR("IBBAPI","INSUR",BPX,7)),U,2),1,3)
"RTN","BPSPRRX1",50,0)
 . W ?23,$E($P($G(BPSARR("IBBAPI","INSUR",BPX,14)),U,1),1,13)
"RTN","BPSPRRX1",51,0)
 . W ?37,$E($P($G(BPSARR("IBBAPI","INSUR",BPX,8)),U,2),1,10)
"RTN","BPSPRRX1",52,0)
 . W ?48,$E($P($G(BPSARR("IBBAPI","INSUR",BPX,12)),U,2),1,9)
"RTN","BPSPRRX1",53,0)
 . W:+$G(BPSARR("IBBAPI","INSUR",BPX,10)) ?57,$$FMTE^XLFDT(+$G(BPSARR("IBBAPI","INSUR",BPX,10)),"5Z")
"RTN","BPSPRRX1",54,0)
 . W:+$G(BPSARR("IBBAPI","INSUR",BPX,11)) ?68,$$FMTE^XLFDT(+$G(BPSARR("IBBAPI","INSUR",BPX,11)),"5Z")
"RTN","BPSPRRX1",55,0)
 W !!
"RTN","BPSPRRX1",56,0)
 S BPX=0,BPCNT=0
"RTN","BPSPRRX1",57,0)
 S DIR("A")=BPSPRMPT
"RTN","BPSPRRX1",58,0)
 I $L($G(BPSMESS))>0 D
"RTN","BPSPRRX1",59,0)
 . S DIR("A","?")=BPSMESS
"RTN","BPSPRRX1",60,0)
 . S DIR("A",1)=""
"RTN","BPSPRRX1",61,0)
 . S DIR("A",2)=BPSMESS
"RTN","BPSPRRX1",62,0)
 . S DIR("A",3)=""
"RTN","BPSPRRX1",63,0)
 K ^TMP($J,"BPSPRRX1","LOOKUP")
"RTN","BPSPRRX1",64,0)
 F  S BPX=$O(BPSARR("IBBAPI","INSUR",BPX)) Q:BPX=""  D
"RTN","BPSPRRX1",65,0)
 . S BPCNT=BPCNT+1
"RTN","BPSPRRX1",66,0)
 . S BPSVAL=$E($P($G(BPSARR("IBBAPI","INSUR",BPX,1)),U,2)_" ("_$P($G(BPSARR("IBBAPI","INSUR",BPX,7)),U,2)_") - "_$P($G(BPSARR("IBBAPI","INSUR",BPX,8)),U,2),1,60)
"RTN","BPSPRRX1",67,0)
 . S ^TMP($J,"BPSPRRX1","LOOKUP",BPCNT,0)=BPSVAL_U_BPX
"RTN","BPSPRRX1",68,0)
 . S ^TMP($J,"BPSPRRX1","LOOKUP","B",BPX,BPCNT)=""
"RTN","BPSPRRX1",69,0)
 . I $G(BPDEFPLN)>0 I +BPSARR("IBBAPI","INSUR",BPX,8)=BPDEFPLN S BPSDFLT=BPX
"RTN","BPSPRRX1",70,0)
 I BPCNT=0 Q "0^"
"RTN","BPSPRRX1",71,0)
 S ^TMP($J,"BPSPRRX1","LOOKUP",0)=U_U_BPCNT_U_BPCNT
"RTN","BPSPRRX1",72,0)
 ;set DIR variables
"RTN","BPSPRRX1",73,0)
 S DIR(0)="P^TMP($J,""BPSPRRX1"",""LOOKUP"",:AEQMZ"
"RTN","BPSPRRX1",74,0)
 I BPSDFLT'="" S DIR("B")=BPSDFLT ;$E(BPSDFLT,1,14)
"RTN","BPSPRRX1",75,0)
 D ^DIR
"RTN","BPSPRRX1",76,0)
 S BPX=$P($G(^TMP($J,"BPSPRRX1","LOOKUP",+Y,0)),U,2)
"RTN","BPSPRRX1",77,0)
 K ^TMP($J,"BPSPRRX1","LOOKUP")
"RTN","BPSPRRX1",78,0)
 I X="^" Q "-1^"
"RTN","BPSPRRX1",79,0)
 I $TR($P(Y,U,2)," ")="" Q "0^"
"RTN","BPSPRRX1",80,0)
 Q Y_U_BPX
"RTN","BPSPRRX1",81,0)
 ;
"RTN","BPSPRRX2")
0^10^B8324629
"RTN","BPSPRRX2",1,0)
BPSPRRX2 ;ALB/SS - ePharmacy secondary billing ;16-DEC-08
"RTN","BPSPRRX2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8**;JUN 2004;Build 29
"RTN","BPSPRRX2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSPRRX2",4,0)
 ;
"RTN","BPSPRRX2",5,0)
 ;
"RTN","BPSPRRX2",6,0)
 ;BPSPAYSQ-CURRENT BILL PAYER SEQUENCE as text
"RTN","BPSPRRX2",7,0)
 ;BPSINS-INSURANCE name
"RTN","BPSPRRX2",8,0)
 ;BPSBILL-BILL NUMBER to display "Bill #"
"RTN","BPSPRRX2",9,0)
 ;BPSSTAT-A/R bill status
"RTN","BPSPRRX2",10,0)
 ;BPSRXIEN-ien of file #52
"RTN","BPSPRRX2",11,0)
 ;BPSREF-refill #
"RTN","BPSPRRX2",12,0)
 ;BPDISTTL (optional)- 1= display title and lines
"RTN","BPSPRRX2",13,0)
DISPBILL(BPSPAYSQ,BPSINS,BPSBILL,BPSSTAT,BPSRXIEN,BPSREF,BPSDOS,BPDISTTL) ;
"RTN","BPSPRRX2",14,0)
 N BPSSTR
"RTN","BPSPRRX2",15,0)
 S BPSSTR=BPSPAYSQ_": "_BPSINS
"RTN","BPSPRRX2",16,0)
 I $G(BPDISTTL) W !,?2,"Payer Responsible",?34,"Bill #",?44,"Status" W:$G(BPSDOS) ?55,"Date"
"RTN","BPSPRRX2",17,0)
 I $G(BPDISTTL) W !,?2,"------------------------------",?34,"--------",?44,"------" W:$G(BPSDOS) ?55,"----------"
"RTN","BPSPRRX2",18,0)
 W !,?2,$E(BPSSTR,1,30),?34,BPSBILL,?44,BPSSTAT
"RTN","BPSPRRX2",19,0)
 W:$G(BPSDOS) ?55,$G(BPSDOS)
"RTN","BPSPRRX2",20,0)
 Q
"RTN","BPSPRRX2",21,0)
 ;prompt for the rate type
"RTN","BPSPRRX2",22,0)
 ;BPSDEFRT (optional) - default rate type
"RTN","BPSPRRX2",23,0)
RATETYPE(BPSDEFRT) ;
"RTN","BPSPRRX2",24,0)
 N Y,DUOUT,DTOUT,BPQUIT,DIROUT
"RTN","BPSPRRX2",25,0)
 S BPQUIT=0
"RTN","BPSPRRX2",26,0)
 N DIC
"RTN","BPSPRRX2",27,0)
 S DIC="^DGCR(399.3,"
"RTN","BPSPRRX2",28,0)
 S DIC(0)="AEMNQ"
"RTN","BPSPRRX2",29,0)
 S DIC("A")="SELECT RATE TYPE: "
"RTN","BPSPRRX2",30,0)
 I $G(BPSDEFRT)>0 S DIC("B")=BPSDEFRT
"RTN","BPSPRRX2",31,0)
 D ^DIC
"RTN","BPSPRRX2",32,0)
 I (X="^")!$D(DUOUT)!$D(DTOUT) S BPQUIT=1
"RTN","BPSPRRX2",33,0)
 I BPQUIT=1 Q -1
"RTN","BPSPRRX2",34,0)
 I Y=-1,X="" Q ""
"RTN","BPSPRRX2",35,0)
 Q $P(Y,U)
"RTN","BPSPRRX2",36,0)
 ;
"RTN","BPSPRRX2",37,0)
 ;Input:
"RTN","BPSPRRX2",38,0)
 ; BRXIEN = Prescription IEN
"RTN","BPSPRRX2",39,0)
 ; BFILL = Fill Number
"RTN","BPSPRRX2",40,0)
 ; BFILLDAT = Fill Date of current prescription and fill number
"RTN","BPSPRRX2",41,0)
 ; BPWHERE = RX action (BWHERE)
"RTN","BPSPRRX2",42,0)
 ; BILLNDC = Valid NDC# with format 5-4-2
"RTN","BPSPRRX2",43,0)
 ; BPPAYSEQ = the payer sequence for the claim: 1-primary, 2-secondary.
"RTN","BPSPRRX2",44,0)
 ; BPSPLAN = (optional - used by secondary only) IEN of the entry in the GROUP INSURANCE PLAN file (#355.3)
"RTN","BPSPRRX2",45,0)
 ; BPSPRDAT -(optional - used by secondary only) local array passed by reference. Contains primary claim data needed to submit a secondary claim.
"RTN","BPSPRRX2",46,0)
 ;   Format: BPSPRDAT ("required field for secondary")
"RTN","BPSPRRX2",47,0)
 ; BPSRTYPE =  (optional) rate type ( ien of the file #399.3)
"RTN","BPSPRRX2",48,0)
 ; BPREVRES - (optional) reverse reason (like "ECME RESUBMIT")
"RTN","BPSPRRX2",49,0)
 ; BPOVRPTR - (optional) Pointer to BPS NCPDP OVERIDE file.  This parameter will 
"RTN","BPSPRRX2",50,0)
 ;            only be passed if there are overrides entered by the
"RTN","BPSPRRX2",51,0)
 ;            user via the Resubmit with Edits (RED) option in the 
"RTN","BPSPRRX2",52,0)
 ;            user screen.
"RTN","BPSPRRX2",53,0)
 ;Output:
"RTN","BPSPRRX2",54,0)
 ; Submission result (return value of EN^BPSNCPDP)
"RTN","BPSPRRX2",55,0)
 ; RESPONSE^MESSAGE^ELIGIBILITY^CLAIMSTATUS
"RTN","BPSPRRX2",56,0)
 ;
"RTN","BPSPRRX2",57,0)
SUBMCLM(BRXIEN,BFILL,BFILLDAT,BPWHERE,BILLNDC,BPPAYSEQ,BPSPLAN,BPSPRDAT,BPSRTYPE,BPREVRES,BPOVRPTR) ;
"RTN","BPSPRRX2",58,0)
 N BPSRET,BP59,BPSWCM,BPSTAT,BPZX
"RTN","BPSPRRX2",59,0)
 S BPSRET=$$EN^BPSNCPDP(BRXIEN,BFILL,BFILLDAT,BPWHERE,BILLNDC,$G(BPREVRES),"",$G(BPOVRPTR),"","",BPPAYSEQ,"F","","",BPSPLAN,.BPSPRDAT,BPSRTYPE)
"RTN","BPSPRRX2",60,0)
 S BP59=$$IEN59^BPSOSRX(BRXIEN,BFILL,BPPAYSEQ)
"RTN","BPSPRRX2",61,0)
 S BPSWCM=$$MWC^PSOBPSU2(BRXIEN,BFILL)
"RTN","BPSPRRX2",62,0)
 S BPSTAT=$S($P(BPSRET,U,4)["IN PROGRESS":"",1:$P(BPSRET,U,4)_"-")
"RTN","BPSPRRX2",63,0)
 S BPZX="ECME:"_$S(BPSWCM="M":"MAIL",BPSWCM="W":"WINDOW",BPSWCM="C":"CMOP",1:"")_$S(BFILL>0:" RE",1:" ")_"FILL(NDC:"_$$GETNDC^PSONDCUT(BRXIEN,BFILL)_")-"_BPSTAT_$S(BPPAYSEQ=1:"p",BPPAYSEQ=2:"s",1:"")_$$INSNAME^BPSSCRU6(BP59)
"RTN","BPSPRRX2",64,0)
 D ECMEACT^PSOBPSU1(BRXIEN,BFILL,BPZX)
"RTN","BPSPRRX2",65,0)
 Q BPSRET
"RTN","BPSPRRX2",66,0)
 ;add secondary e-claim related elements to MOREDATA
"RTN","BPSPRRX2",67,0)
MORE4SEC(BPSMORE,BPSECNDR) ;
"RTN","BPSPRRX2",68,0)
 M BPSMORE=BPSECNDR
"RTN","BPSPRRX2",69,0)
 Q
"RTN","BPSPRRX2",70,0)
 ;
"RTN","BPSPRRX3")
0^11^B99615569
"RTN","BPSPRRX3",1,0)
BPSPRRX3 ;ALB/SS - ePharmacy secondary billing ;16-DEC-08
"RTN","BPSPRRX3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8**;JUN 2004;Build 29
"RTN","BPSPRRX3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSPRRX3",4,0)
 ;
"RTN","BPSPRRX3",5,0)
PROMPTS(BPSPRARR) ;
"RTN","BPSPRRX3",6,0)
 ;BPSPRARR - array to pass values determined earlier (if any) and to return user's input/corrections
"RTN","BPSPRRX3",7,0)
 ;returns 
"RTN","BPSPRRX3",8,0)
 ; 1  = the data is correct
"RTN","BPSPRRX3",9,0)
 ; -1 = the data is not correct - Do not create the claim
"RTN","BPSPRRX3",10,0)
 ;
"RTN","BPSPRRX3",11,0)
 ; Check paramters
"RTN","BPSPRRX3",12,0)
 I $G(BPSPRARR("PRESCRIPTION"))="" Q -1
"RTN","BPSPRRX3",13,0)
 I $G(BPSPRARR("FILL NUMBER"))="" Q -1
"RTN","BPSPRRX3",14,0)
 I $G(BPSPRARR("FILL DATE"))="" Q -1
"RTN","BPSPRRX3",15,0)
 ;
"RTN","BPSPRRX3",16,0)
 ;
"RTN","BPSPRRX3",17,0)
 N BPQ,BPSQ,BPSPLAN,BPX,BPSDFLT,BPSSET,BPSDFN
"RTN","BPSPRRX3",18,0)
 N BPSPIEN,BPSSET,BPCNT,BPSRJ,BPSPAID
"RTN","BPSPRRX3",19,0)
 N BPRATTYP,BPSPDRJ,BPSPLNSL,BPX1
"RTN","BPSPRRX3",20,0)
 ;
"RTN","BPSPRRX3",21,0)
 S (BPQ,BPSQ)=0
"RTN","BPSPRRX3",22,0)
 ;
"RTN","BPSPRRX3",23,0)
 ; Other Payer IEN defaults to 1 since we don't do tertiary
"RTN","BPSPRRX3",24,0)
 S BPSPIEN=1
"RTN","BPSPRRX3",25,0)
 ;
"RTN","BPSPRRX3",26,0)
 ; Get Primary BPS Transaction
"RTN","BPSPRRX3",27,0)
 S BP59=$$IEN59^BPSOSRX(BPSPRARR("PRESCRIPTION"),BPSPRARR("FILL NUMBER"),1)
"RTN","BPSPRRX3",28,0)
 ;
"RTN","BPSPRRX3",29,0)
 ; Get/validate Patient DFN
"RTN","BPSPRRX3",30,0)
 S BPSDFN=$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSPRRX3",31,0)
 I BPSDFN="" S BPSDFN=$$RXAPI1^BPSUTIL1(BPSPRARR("PRESCRIPTION"),2,"I")
"RTN","BPSPRRX3",32,0)
 I BPSDFN="" Q -1
"RTN","BPSPRRX3",33,0)
 ;
"RTN","BPSPRRX3",34,0)
 ; Validate and Display current COB fields
"RTN","BPSPRRX3",35,0)
 I $$DISPSEC(BP59,BPSDFN,.BPSPRARR)
"RTN","BPSPRRX3",36,0)
 ;
"RTN","BPSPRRX3",37,0)
 S BPQ=0
"RTN","BPSPRRX3",38,0)
 I $G(BPSPRARR("PLAN"))=""!($G(BPSPRARR("RTYPE"))="")!($G(BPSPRARR("308-C8"))="") S BPQ=1
"RTN","BPSPRRX3",39,0)
 I BPSQ=0 F BPX=4,5 I $P($G(BPSPRARR("OTHER PAYER",BPSPIEN,0)),U,BPX)="" S BPQ=1
"RTN","BPSPRRX3",40,0)
 I BPQ=0,'$D(BPSPRARR("OTHER PAYER",BPSPIEN,"P")),'$D(BPSPRARR("OTHER PAYER",BPSPIEN,"R")) S BPQ=1
"RTN","BPSPRRX3",41,0)
 ;
"RTN","BPSPRRX3",42,0)
 ; Prompt to continue or not
"RTN","BPSPRRX3",43,0)
 W !
"RTN","BPSPRRX3",44,0)
 I BPQ=1 W !,"Required secondary claim information is missing. Enter all required information",!
"RTN","BPSPRRX3",45,0)
 E  S BPQ=$$YESNO^BPSSCRRS("Do you want to edit this Secondary Claim Information (Y/N)","N") Q:BPQ=-1 -1 G:BPQ=0 END
"RTN","BPSPRRX3",46,0)
 ;
"RTN","BPSPRRX3",47,0)
 ; Prompt for Secondary Insurance Plan
"RTN","BPSPRRX3",48,0)
 W !
"RTN","BPSPRRX3",49,0)
 F  D  Q:BPSQ'=0
"RTN","BPSPRRX3",50,0)
 . S BPSPLAN=$$SELECTPL^BPSPRRX1(BPSDFN,$G(BPSPRARR("FILL DATE")),.BPSPLNSL,"SECONDARY INSURANCE POLICY",$G(BPSPRARR("PLAN")))
"RTN","BPSPRRX3",51,0)
 . I BPSPLAN=0 S BPSQ=-1 Q
"RTN","BPSPRRX3",52,0)
 . I $P(BPSPLNSL(7),U)'=2 W !,"Must select a Secondary insurance plan." Q
"RTN","BPSPRRX3",53,0)
 . S BPSPRARR("PLAN")=BPSPLAN
"RTN","BPSPRRX3",54,0)
 . S BPSPRARR("INS NAME")=$P(BPSPLNSL(1),U,2)
"RTN","BPSPRRX3",55,0)
 . S BPSQ=1
"RTN","BPSPRRX3",56,0)
 Q:BPSQ=-1 -1
"RTN","BPSPRRX3",57,0)
 ;
"RTN","BPSPRRX3",58,0)
 ; Prompt for Rate Type and store in BPSPRARR("RTYPE")
"RTN","BPSPRRX3",59,0)
 F  S BPRATTYP=$$RATETYPE^BPSPRRX2($S($G(BPSPRARR("RTYPE"))]"":BPSPRARR("RTYPE"),1:8)) Q:BPRATTYP'=""
"RTN","BPSPRRX3",60,0)
 I BPRATTYP=-1 Q -1
"RTN","BPSPRRX3",61,0)
 S BPSPRARR("RTYPE")=BPRATTYP
"RTN","BPSPRRX3",62,0)
 ;
"RTN","BPSPRRX3",63,0)
 ; Prompt for OTHER COVERAGE CODE
"RTN","BPSPRRX3",64,0)
 S BPSSET="" D SET308(.BPSSET)
"RTN","BPSPRRX3",65,0)
 S RETV=$$PROMPT("SRA"_U_BPSSET,"OTHER COVERAGE CODE:  ",$G(BPSPRARR("308-C8")),"Indicate whether or not the patient has other insurance coverage")
"RTN","BPSPRRX3",66,0)
 Q:RETV<0 -1
"RTN","BPSPRRX3",67,0)
 S BPSPRARR("308-C8")=RETV
"RTN","BPSPRRX3",68,0)
 ;
"RTN","BPSPRRX3",69,0)
 ; Prompt for OTHER PAYER ID
"RTN","BPSPRRX3",70,0)
 S BPSDFLT=$P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,4)
"RTN","BPSPRRX3",71,0)
 S RETV=$$PROMPT("FR"_U_"0:10:","OTHER PAYER ID",$G(BPSDFLT),"ID assigned to the payer") Q:RETV<0 -1
"RTN","BPSPRRX3",72,0)
 Q:RETV=-1 -1
"RTN","BPSPRRX3",73,0)
 S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,4)=RETV
"RTN","BPSPRRX3",74,0)
 ;
"RTN","BPSPRRX3",75,0)
 ; Prompt for OTHER PAYER DATE
"RTN","BPSPRRX3",76,0)
 S BPSDFLT=$P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,5)
"RTN","BPSPRRX3",77,0)
 S RETV=$$PROMPT("DR"_U_"","OTHER PAYER DATE",$$FMTE^XLFDT($G(BPSDFLT)),"Payment or denial date of the claim submitted to the other payer. Used for coordination of benefits.")
"RTN","BPSPRRX3",78,0)
 Q:RETV=-1 -1
"RTN","BPSPRRX3",79,0)
 S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,5)=RETV
"RTN","BPSPRRX3",80,0)
 ;
"RTN","BPSPRRX3",81,0)
 ; Prompt for Paid Amount or Reject Codes
"RTN","BPSPRRX3",82,0)
 S BPSSET="PAID:PAID AMOUNTS;REJECT:REJECT CODES"
"RTN","BPSPRRX3",83,0)
 S BPSDFLT=""
"RTN","BPSPRRX3",84,0)
 I $D(BPSPRARR("OTHER PAYER",BPSPIEN,"P")) S BPSDFLT="PAID AMOUNTS"
"RTN","BPSPRRX3",85,0)
 I $D(BPSPRARR("OTHER PAYER",BPSPIEN,"R")) S BPSDFLT=$S(BPSDFLT="PAID AMOUNTS":"",1:"REJECT CODES")
"RTN","BPSPRRX3",86,0)
 S BPSPDRJ=$$PROMPT("SRA"_U_BPSSET,"Edit Paid Amounts or Reject Codes (PAID AMOUNTS/REJECT CODES):  ",BPSDFLT,"Edit the Paid Amounts or Reject Codes")
"RTN","BPSPRRX3",87,0)
 Q:BPSPDRJ=-1 -1
"RTN","BPSPRRX3",88,0)
 ;
"RTN","BPSPRRX3",89,0)
 ; Prompt to edit paid amounts
"RTN","BPSPRRX3",90,0)
 D:BPSPDRJ="PAID"
"RTN","BPSPRRX3",91,0)
 . ; Remove reject codes.
"RTN","BPSPRRX3",92,0)
 . K BPSPRARR("OTHER PAYER",BPSPIEN,"R")
"RTN","BPSPRRX3",93,0)
 . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,7)=""
"RTN","BPSPRRX3",94,0)
 . ;
"RTN","BPSPRRX3",95,0)
 . K BPSPAID
"RTN","BPSPRRX3",96,0)
 . S (BPCNT,BPX,BPQ)=0
"RTN","BPSPRRX3",97,0)
 . S BPSSET="00:BLANK;01:DELIVERY;02:SHIPPING;03:POSTAGE;04:ADMINISTRATIVE;05:INCENTIVE;06:COGNITIVE SERVICE;07:DRUG BENEFIT;08:SUM OF ALL REIMBURSEMENT;98:COUPON;99:OTHER"
"RTN","BPSPRRX3",98,0)
 . F BPX1=0:1 S BPX=$O(BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX)) Q:'BPX  D  Q:BPQ=1
"RTN","BPSPRRX3",99,0)
 . . S BPSQUAL=$P(BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX,0),U,2)
"RTN","BPSPRRX3",100,0)
 . . S BPSAMT=$P(BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX,0),U,1)
"RTN","BPSPRRX3",101,0)
 . . S BPQ=$$ASKPAID(BPSSET,BPSQUAL,BPSAMT,.BPSCNT,.BPSPAID)
"RTN","BPSPRRX3",102,0)
 . ;
"RTN","BPSPRRX3",103,0)
 . I 'BPQ F  S BPQ=$$ASKPAID(BPSSET,"","",.BPSCNT,.BPSPAID) Q:BPQ=1
"RTN","BPSPRRX3",104,0)
 . ; Enter update values into the BPSPRARR array
"RTN","BPSPRRX3",105,0)
 . K BPSPRARR("OTHER PAYER",BPSPIEN,"P")
"RTN","BPSPRRX3",106,0)
 . S BPX=0 F BPX1=0:1 S BPX=$O(BPSPAID(1,BPX)) Q:BPX=""  D
"RTN","BPSPRRX3",107,0)
 . . I $P(BPSPAID(1,BPX),U,2)="00" S $P(BPSPAID(1,BPX),U,2)="  "
"RTN","BPSPRRX3",108,0)
 . . S BPSPRARR("OTHER PAYER",BPSPIEN,"P",BPX,0)=BPSPAID(1,BPX)
"RTN","BPSPRRX3",109,0)
 . . ;
"RTN","BPSPRRX3",110,0)
 . . ; Set the OTHER PAYER AMOUNT PAID COUNT
"RTN","BPSPRRX3",111,0)
 . . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,6)=BPX1
"RTN","BPSPRRX3",112,0)
 . Q
"RTN","BPSPRRX3",113,0)
 ;
"RTN","BPSPRRX3",114,0)
 ; Edit/add reject codes
"RTN","BPSPRRX3",115,0)
 D:BPSPDRJ="REJECT"
"RTN","BPSPRRX3",116,0)
 . ; Remove paid amounts on the prior claim.
"RTN","BPSPRRX3",117,0)
 . K BPSPRARR("OTHER PAYER",BPSPIEN,"P")
"RTN","BPSPRRX3",118,0)
 . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,6)=""
"RTN","BPSPRRX3",119,0)
 . ;
"RTN","BPSPRRX3",120,0)
 . K BPSRJ
"RTN","BPSPRRX3",121,0)
 . S (BPCNT,BPX)=0
"RTN","BPSPRRX3",122,0)
 . F BPX1=0:1 S BPX=$O(BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX)) Q:'BPX  D
"RTN","BPSPRRX3",123,0)
 . . S BPSDFLT=BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX,0)
"RTN","BPSPRRX3",124,0)
 . . S RETV=$$PROMPT("PO^9002313.93:AEMNQ","OTHER PAYER REJECT CODE",$G(BPSDFLT),"Enter the reject code returned by the previous payer")
"RTN","BPSPRRX3",125,0)
 . . Q:RETV=-1
"RTN","BPSPRRX3",126,0)
 . . S BPCNT=BPCNT+1
"RTN","BPSPRRX3",127,0)
 . . S BPSRJ(BPCNT)=$P(RETV,U,2)
"RTN","BPSPRRX3",128,0)
 . F  S RETV=$$PROMPT("PO^9002313.93:AEMNQ","OTHER PAYER REJECT CODE","","Enter the reject code returned by the previous payer") Q:RETV=-1  S BPCNT=BPCNT+1,BPSRJ(BPCNT)=$P(RETV,U,2)
"RTN","BPSPRRX3",129,0)
 . K BPSPRARR("OTHER PAYER",BPSPIEN,"R")
"RTN","BPSPRRX3",130,0)
 . S BPX=0 F BPX1=0:1 S BPX=$O(BPSRJ(BPX)) Q:BPX=""  D
"RTN","BPSPRRX3",131,0)
 . . S BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX,0)=BPSRJ(BPX)
"RTN","BPSPRRX3",132,0)
 . . ; Set the OTHER PAYER REJECT COUNT
"RTN","BPSPRRX3",133,0)
 . . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,7)=BPX1
"RTN","BPSPRRX3",134,0)
 . Q
"RTN","BPSPRRX3",135,0)
 ;
"RTN","BPSPRRX3",136,0)
 I '$D(BPSPRARR("OTHER PAYER",BPSPIEN,"P")),'$D(BPSPRARR("OTHER PAYER",BPSPIEN,"R")) W !,"No Paid Amounts or Reject Codes entered" Q -1
"RTN","BPSPRRX3",137,0)
 ;
"RTN","BPSPRRX3",138,0)
 ; Default OTHER PAYER COVERAGE TYPE to PRIMARY
"RTN","BPSPRRX3",139,0)
 S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,2)="01"
"RTN","BPSPRRX3",140,0)
 ;
"RTN","BPSPRRX3",141,0)
 ; Default OTHER PAYER ID QUALIFIER to BIN
"RTN","BPSPRRX3",142,0)
 S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,3)="03"
"RTN","BPSPRRX3",143,0)
 ;
"RTN","BPSPRRX3",144,0)
END ; Prompt to continue
"RTN","BPSPRRX3",145,0)
 W !
"RTN","BPSPRRX3",146,0)
 I $$YESNO^BPSSCRRS("IS THIS CLAIM CORRECT?(Y/N)","Y")<1 Q -1
"RTN","BPSPRRX3",147,0)
 Q 1
"RTN","BPSPRRX3",148,0)
 ;
"RTN","BPSPRRX3",149,0)
 ; 
"RTN","BPSPRRX3",150,0)
ASKPAID(BPSSET,BPSQUAL,BPSAMT,BPSCNT,BPSPAID) ;
"RTN","BPSPRRX3",151,0)
 N RETV1,RETV2
"RTN","BPSPRRX3",152,0)
ASK1 S RETV1=$$PROMPT("SOA"_U_BPSSET,"OTHER PAYER AMOUNT PAID QUALIFIER:  ",$G(BPSQUAL),"Type of payment from other sources (including coupons)")
"RTN","BPSPRRX3",153,0)
 I RETV1=-1!(RETV1="") Q 1
"RTN","BPSPRRX3",154,0)
 I RETV1="08",$D(BPSPAID(2)) W !,"  Qualifier '08' cannot be entered with other qualifiers" G ASK1
"RTN","BPSPRRX3",155,0)
 S RETV2=$$PROMPT("NO"_U_"0:999999:2","OTHER PAYER AMOUNT PAID",$G(BPSAMT),"Amount of any payment from other sources (including coupons)")
"RTN","BPSPRRX3",156,0)
 I RETV2=-1!(RETV2="") Q 1
"RTN","BPSPRRX3",157,0)
 S BPCNT=BPCNT+1
"RTN","BPSPRRX3",158,0)
 S BPSPAID(1,BPCNT)=RETV2_U_RETV1
"RTN","BPSPRRX3",159,0)
 S BPSPAID(2,RETV1)=""
"RTN","BPSPRRX3",160,0)
 I RETV1="08" Q 1
"RTN","BPSPRRX3",161,0)
 Q 0
"RTN","BPSPRRX3",162,0)
 ;
"RTN","BPSPRRX3",163,0)
DISPSEC(BP59,BPSDFN,BPSPRARR) ;
"RTN","BPSPRRX3",164,0)
 ; Validate and Display the current secondary insurance information and prompt to edit.
"RTN","BPSPRRX3",165,0)
 ; Return:  0 = Invalid data
"RTN","BPSPRRX3",166,0)
 ;          1 = Valid data
"RTN","BPSPRRX3",167,0)
 ;
"RTN","BPSPRRX3",168,0)
 N BPSCOB,BPX,BPQ,BPSRET,BPSPIEN,BPSRESP,BPSOPDT,BPSINS,BPSSTAT,BPSCOV,BP592
"RTN","BPSPRRX3",169,0)
 ; Other Payer IEN defaults to 1 since we don't do tertiary
"RTN","BPSPRRX3",170,0)
 S BPSPIEN=1
"RTN","BPSPRRX3",171,0)
 ; Get patient insurances
"RTN","BPSPRRX3",172,0)
 S BPSRET=$$INSUR^IBBAPI($G(BPSDFN),$G(BPSPRARR("FILL DATE")),"E",.BPSINS,"1,7,8")
"RTN","BPSPRRX3",173,0)
 ; Get the first Secondary insurance for default
"RTN","BPSPRRX3",174,0)
 S (BPSCOB,BPSPRARR("PLAN"))="",(BPX,BPQ)=0
"RTN","BPSPRRX3",175,0)
 F  S BPX=$O(BPSINS("IBBAPI","INSUR",BPX)) Q:'BPX  D  Q:BPQ
"RTN","BPSPRRX3",176,0)
 . I $P(BPSINS("IBBAPI","INSUR",BPX,7),U)'=2 Q
"RTN","BPSPRRX3",177,0)
 . S BPSPRARR("PLAN")=$P(BPSINS("IBBAPI","INSUR",BPX,8),U)
"RTN","BPSPRRX3",178,0)
 . S BPSPRARR("INS NAME")=$P(BPSINS("IBBAPI","INSUR",BPX,1),U,2)
"RTN","BPSPRRX3",179,0)
 . S BPSCOB="SECONDARY",BPQ=1
"RTN","BPSPRRX3",180,0)
 . Q
"RTN","BPSPRRX3",181,0)
 S BPSRET=0
"RTN","BPSPRRX3",182,0)
 ; Get the Other Payer Date in internal format from the response
"RTN","BPSPRRX3",183,0)
 S BPSOPDT="",BPSRESP=$P($G(^BPST(BP59,0)),U,5)
"RTN","BPSPRRX3",184,0)
 I BPSRESP S BPSOPDT=($P($G(^BPSR(BPSRESP,0)),U,2))\1
"RTN","BPSPRRX3",185,0)
 ; Set array of Other Payer Data
"RTN","BPSPRRX3",186,0)
 S BPSPRARR("OTHER PAYER",BPSPIEN,0)="1^01^03^"_$G(BPSPRARR("BIN NUMBER"))_"^"_$G(BPSOPDT)_"^0^0"
"RTN","BPSPRRX3",187,0)
 ; Get Rate Type for the Secondary Insurance
"RTN","BPSPRRX3",188,0)
 S BP592=$$IEN59^BPSOSRX($G(BPSPRARR("PRESCRIPTION")),$G(BPSPRARR("FILL NUMBER")),2)
"RTN","BPSPRRX3",189,0)
 S BPSPRARR("RTYPE")=$$GETRTP59^BPSPRRX5(BP592)
"RTN","BPSPRRX3",190,0)
 I BPSPRARR("RTYPE")="" S BPSPRARR("RTYPE")=8
"RTN","BPSPRRX3",191,0)
 ; Get Coverage Code
"RTN","BPSPRRX3",192,0)
 S BPSSTAT=$P($$STATUS^BPSOSRX($G(BPSPRARR("PRESCRIPTION")),$G(BPSPRARR("FILL NUMBER")),,,1),U)
"RTN","BPSPRRX3",193,0)
 I $G(BPSPRARR("PRIOR PAYMENT"))>0 S BPSCOV="02 (OTHER COVERAGE EXISTS - PAYMENT COLLECTED)"
"RTN","BPSPRRX3",194,0)
 E  I BPSSTAT["E REJECTED" S BPSCOV="03 (OTHER COVERAGE EXISTS - THIS CLAIM NOT COVERED)"
"RTN","BPSPRRX3",195,0)
 E  S BPSCOV="04 (OTHER COVERAGE EXISTS - PAYMENT NOT COLLECTED)"
"RTN","BPSPRRX3",196,0)
 S BPSPRARR("308-C8")=$P(BPSCOV," ",1)
"RTN","BPSPRRX3",197,0)
 ; Write Data
"RTN","BPSPRRX3",198,0)
 W !!,"Data for Secondary Claim"
"RTN","BPSPRRX3",199,0)
 W !,"------------------------"
"RTN","BPSPRRX3",200,0)
 W !,"Insurance:  "_$G(BPSPRARR("INS NAME"))_"    COB: "_BPSCOB
"RTN","BPSPRRX3",201,0)
 W !,"Rate Type:  "_$$GET1^DIQ(399.3,$G(BPSPRARR("RTYPE"))_",",.01,,,,)
"RTN","BPSPRRX3",202,0)
 W !,"Other Coverage Code:  "_BPSCOV
"RTN","BPSPRRX3",203,0)
 W !,"Other Payer Coverage Type:  01 (PRIMARY)"
"RTN","BPSPRRX3",204,0)
 W !,"Other Payer ID Qualifier:  03 (BANK INFORMATION NUMBER (BIN))"
"RTN","BPSPRRX3",205,0)
 W !,"Other Payer ID:  "_$G(BPSPRARR("BIN NUMBER"))
"RTN","BPSPRRX3",206,0)
 W !,"Other Payer Date:  "_$$FMTE^XLFDT($G(BPSOPDT))
"RTN","BPSPRRX3",207,0)
 ; Build/Write Paid Amounts if previous claim was paid
"RTN","BPSPRRX3",208,0)
 K BPSPRARR("OTHER PAYER",BPSPIEN,"P")
"RTN","BPSPRRX3",209,0)
 I BPSSTAT["E PAYABLE",BPSPRARR("PRIOR PAYMENT")]"" D
"RTN","BPSPRRX3",210,0)
 . W !,"Other Payer Paid Qualifier:  08 (SUM OF ALL REIMBURSEMENT)"
"RTN","BPSPRRX3",211,0)
 . S BPSPRARR("OTHER PAYER",BPSPIEN,"P",1,0)=$G(BPSPRARR("PRIOR PAYMENT"))_"^08"
"RTN","BPSPRRX3",212,0)
 . W !,"Other Payer Amount Paid:  "_$G(BPSPRARR("PRIOR PAYMENT"))
"RTN","BPSPRRX3",213,0)
 . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,6)=1
"RTN","BPSPRRX3",214,0)
 ; Build/Write Reject Codes if previous claims was rejected
"RTN","BPSPRRX3",215,0)
 K BPSPRARR("OTHER PAYER",BPSPIEN,"R")
"RTN","BPSPRRX3",216,0)
 I BPSSTAT["E REJECTED" D
"RTN","BPSPRRX3",217,0)
 . N BPARR,BPX D GETRJCOD^BPSSCRU3(BP59,.BPARR,0,55,"")
"RTN","BPSPRRX3",218,0)
 . S BPX=0 F  S BPX=$O(BPARR(BPX)) Q:BPX=""  D
"RTN","BPSPRRX3",219,0)
 . . W !,"Other Payer Reject Code:  "_BPARR(BPX)
"RTN","BPSPRRX3",220,0)
 . . S BPSPRARR("OTHER PAYER",BPSPIEN,"R",BPX,0)=$P(BPARR(BPX),":")
"RTN","BPSPRRX3",221,0)
 . . S $P(BPSPRARR("OTHER PAYER",BPSPIEN,0),U,7)=BPX
"RTN","BPSPRRX3",222,0)
 Q 1
"RTN","BPSPRRX3",223,0)
 ;
"RTN","BPSPRRX3",224,0)
PROMPT(ZERONODE,PRMTMSG,DFLTVAL,BPSHLP) ;
"RTN","BPSPRRX3",225,0)
 ;prompts for selection
"RTN","BPSPRRX3",226,0)
 ;returns selection
"RTN","BPSPRRX3",227,0)
 ;OR -1 when timeout and uparrow
"RTN","BPSPRRX3",228,0)
 ;
"RTN","BPSPRRX3",229,0)
 N Y,DUOUT,DTOUT,BPQUIT,DIROUT
"RTN","BPSPRRX3",230,0)
 N DIR
"RTN","BPSPRRX3",231,0)
 S DIR(0)=ZERONODE
"RTN","BPSPRRX3",232,0)
 S DIR("A")=PRMTMSG
"RTN","BPSPRRX3",233,0)
 I BPSHLP]"" S DIR("?")=BPSHLP
"RTN","BPSPRRX3",234,0)
 S:$L($G(DFLTVAL))>0 DIR("B")=DFLTVAL
"RTN","BPSPRRX3",235,0)
 D ^DIR
"RTN","BPSPRRX3",236,0)
 I (Y=-1)!$D(DIROUT)!$D(DUOUT)!$D(DTOUT) Q -1
"RTN","BPSPRRX3",237,0)
 Q Y
"RTN","BPSPRRX3",238,0)
 ;
"RTN","BPSPRRX3",239,0)
 ;because the set of codes is too long to fit the MUMPS code line - use a special code to populte set of codes
"RTN","BPSPRRX3",240,0)
SET308(BPSSET) ;
"RTN","BPSPRRX3",241,0)
 N BPX,BPZ
"RTN","BPSPRRX3",242,0)
 F BPX=2:1 S BPZ=$P($T(SET308C8+BPX),";;",2) Q:BPZ=""  D
"RTN","BPSPRRX3",243,0)
 . S BPSSET=BPSSET_$P(BPZ,U)_";"
"RTN","BPSPRRX3",244,0)
 Q
"RTN","BPSPRRX3",245,0)
 ;
"RTN","BPSPRRX3",246,0)
SET308C8 ;set of codes for 308-C8
"RTN","BPSPRRX3",247,0)
 ; set of codes
"RTN","BPSPRRX3",248,0)
 ;;00:NOT SPECIFIED
"RTN","BPSPRRX3",249,0)
 ;;01:NO OTHER COVERAGE IDENTIFIED
"RTN","BPSPRRX3",250,0)
 ;;02:OTHER COVERAGE EXISTS - PAYMENT COLLECTED
"RTN","BPSPRRX3",251,0)
 ;;03:OTHER COVERAGE EXISTS - THIS CLAIM NOT COVERED
"RTN","BPSPRRX3",252,0)
 ;;04:OTHER COVERAGE EXISTS - PAYMENT NOT COLLECTED
"RTN","BPSPRRX3",253,0)
 ;;05:MANAGED CARE PLAN DENIAL
"RTN","BPSPRRX3",254,0)
 ;;06:OTHER COVERAGE DENIED - NOT A PARTICIPATING PROVIDER
"RTN","BPSPRRX3",255,0)
 ;;07:OTHER COVERAGE EXISTS - NOT IN EFFECT AT THE TIME OF SERVICE
"RTN","BPSPRRX3",256,0)
 ;;08:CLAIM IS A BILLING FOR A COPAY
"RTN","BPSPRRX3",257,0)
 ;;
"RTN","BPSPRRX3",258,0)
 ;
"RTN","BPSPRRX3",259,0)
 ;BPSPRRX3
"RTN","BPSPRRX4")
0^12^B15420214
"RTN","BPSPRRX4",1,0)
BPSPRRX4 ;ALB/SS - ePharmacy secondary billing ;16-DEC-08
"RTN","BPSPRRX4",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8**;JUN 2004;Build 29
"RTN","BPSPRRX4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSPRRX4",4,0)
 ;
"RTN","BPSPRRX4",5,0)
 ;Gather necessary data from primary e-claim 
"RTN","BPSPRRX4",6,0)
 ;BPSIEN59-ien of the PRIMARY transaction in the file BPS TRANSACTION #9002313.59
"RTN","BPSPRRX4",7,0)
 ;BPSDAT-to return data, by reference)
"RTN","BPSPRRX4",8,0)
 ;BPCOBIND - payer sequence
"RTN","BPSPRRX4",9,0)
 ;BPSRESUB - 
"RTN","BPSPRRX4",10,0)
 ; 0 - original (1st) submission via the option "Process Secondary/Tricare Rx to ECME"
"RTN","BPSPRRX4",11,0)
 ; 1 - resubmit via this option
"RTN","BPSPRRX4",12,0)
 ;ret value:
"RTN","BPSPRRX4",13,0)
 ; 1 - success
"RTN","BPSPRRX4",14,0)
 ; 0 - the primary claim was not found OR not enough data in the primary claim
"RTN","BPSPRRX4",15,0)
 ; -1 - the primary claim doesn't have payable status
"RTN","BPSPRRX4",16,0)
PRIMDATA(BPSIEN59,BPSDAT,BPCOBIND,BPSRESUB) ;
"RTN","BPSPRRX4",17,0)
 N BPSRESP,BPSSTAT,BPSPRDT,BPSCLM,Y
"RTN","BPSPRRX4",18,0)
 ;populate certain nodes if it is an original (1st) submission
"RTN","BPSPRRX4",19,0)
 I BPSRESUB=0 D
"RTN","BPSPRRX4",20,0)
 . S BPSDAT("FILL NUMBER")=$P($G(^BPST(BPSIEN59,1)),U,1) ;#9
"RTN","BPSPRRX4",21,0)
 . S BPSDAT("PRESCRIPTION")=$P($G(^BPST(BPSIEN59,1)),U,11) ;#11
"RTN","BPSPRRX4",22,0)
 I $G(BPSDAT("FILL NUMBER"))=""!($G(BPSDAT("PRESCRIPTION"))="") Q 0
"RTN","BPSPRRX4",23,0)
 I BPSRESUB=0 D
"RTN","BPSPRRX4",24,0)
 . S BPSDAT("FILL DATE")=$P($G(^BPST(BPSIEN59,12)),U,2) ;#1202
"RTN","BPSPRRX4",25,0)
 . S BPSDAT("RX ACTION")=$P($G(^BPST(BPSIEN59,12)),U,1) ;#1201
"RTN","BPSPRRX4",26,0)
 . S BPSDAT("BILLNDC")=$P($G(^BPST(BPSIEN59,1)),U,2) ;#10 $$GETNDC^PSONDCUT(BPSDAT("PRESCRIPTION"),BPSDAT("FILL DATE"))
"RTN","BPSPRRX4",27,0)
 ; check if data is there
"RTN","BPSPRRX4",28,0)
 I $G(BPSDAT("FILL DATE"))=""!($G(BPSDAT("RX ACTION"))="")!($G(BPSDAT("BILLNDC"))="") Q 0
"RTN","BPSPRRX4",29,0)
 ;
"RTN","BPSPRRX4",30,0)
 S BPSCLM=$P($G(^BPST(BPSIEN59,0)),U,4) ;#3 CLAIM
"RTN","BPSPRRX4",31,0)
 I BPSCLM S BPSDAT("BIN NUMBER")=$P($G(^BPSC(BPSCLM,100)),U)
"RTN","BPSPRRX4",32,0)
 ;
"RTN","BPSPRRX4",33,0)
 S BPSRESP=$P($G(^BPST(BPSIEN59,0)),U,5) ;#4 RESPONSE
"RTN","BPSPRRX4",34,0)
 I BPSRESP S Y=($P($G(^BPSR(BPSRESP,0)),U,2))\1 X ^DD("DD") S BPSDAT("OTHER PAYER DATE")=Y
"RTN","BPSPRRX4",35,0)
 ;
"RTN","BPSPRRX4",36,0)
 S BPSSTAT=$P($$STATUS^BPSOSRX(+BPSDAT("PRESCRIPTION"),+BPSDAT("FILL NUMBER"),,,BPCOBIND),U)
"RTN","BPSPRRX4",37,0)
 I '$$PAYABLE^BPSOSRX5(BPSSTAT) Q -1
"RTN","BPSPRRX4",38,0)
 I BPSRESUB=0,BPSRESP S BPSDAT("PRIOR PAYMENT")=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,9))
"RTN","BPSPRRX4",39,0)
 Q 1
"RTN","BPSPRRX4",40,0)
 ;
"RTN","BPSPRRX4",41,0)
GETFR52(BPSRX,BPSFILL,BPSDAT) ;
"RTN","BPSPRRX4",42,0)
 S BPSDAT("PRESCRIPTION")=BPSRX
"RTN","BPSPRRX4",43,0)
 S BPSDAT("FILL NUMBER")=BPSFILL
"RTN","BPSPRRX4",44,0)
 S BPSDAT("FILL DATE")=$$DOSDATE^BPSSCRRS(BPSRX,BPSFILL)
"RTN","BPSPRRX4",45,0)
 S BPSDAT("BILLNDC")=$$GETNDC^PSONDCUT(BPSRX,BPSFILL)
"RTN","BPSPRRX4",46,0)
 Q
"RTN","BPSPRRX4",47,0)
 ;
"RTN","BPSPRRX4",48,0)
 ;primary claim processing
"RTN","BPSPRRX4",49,0)
 ;BPSRX - ien #52
"RTN","BPSPRRX4",50,0)
 ;BPSRF - refill #
"RTN","BPSPRRX4",51,0)
 ;BPSDFN - ien #2
"RTN","BPSPRRX4",52,0)
 ;BPSDOS - date of service
"RTN","BPSPRRX4",53,0)
 ;BPSECLM - result of $$FINDECLM^BPSPRRX5
"RTN","BPSPRRX4",54,0)
 ;BPRESUB - 1 = the user is resubmitting a new PRIMARY claim
"RTN","BPSPRRX4",55,0)
PRIMARY(BPSRX,BPSRF,BPSDFN,BPSDOS,BPSECLM,BPRESUB) ;
"RTN","BPSPRRX4",56,0)
 N BPRATTYP,BPSPLNSL,BPSPLAN,BPSDAT,BPSQ,BPSWHERE,BPY,BP59,BPSPL59,BPSRT59
"RTN","BPSPRRX4",57,0)
 S (BP59,BPSPL59,BPSRT59)=""
"RTN","BPSPRRX4",58,0)
 I BPRESUB=1 D
"RTN","BPSPRRX4",59,0)
 . S BP59=$$IEN59^BPSOSRX(BPSRX,BPSRF,1)
"RTN","BPSPRRX4",60,0)
 . ;get an old plan for resubmits
"RTN","BPSPRRX4",61,0)
 . S BPSPL59=+$P($G(^BPST(BP59,10,1,0)),U,1)
"RTN","BPSPRRX4",62,0)
 . S BPSRT59=+$P($G(^BPST(BP59,10,1,0)),U,8)
"RTN","BPSPRRX4",63,0)
 F  S BPRATTYP=$$RATETYPE^BPSPRRX2(BPSRT59) Q:BPRATTYP'=""
"RTN","BPSPRRX4",64,0)
 I BPRATTYP=-1 Q "-100^Action cancelled"
"RTN","BPSPRRX4",65,0)
 ;ask the user if he wants to jump to the BCN PATIENT INSURANCE option
"RTN","BPSPRRX4",66,0)
 S BPY=$$YESNO^BPSSCRRS("DO YOU WISH TO ADD/EDIT INSURANCE COMPANY DATA FOR THIS PATIENT?(Y/N)","N")
"RTN","BPSPRRX4",67,0)
 I BPY=1 D EN1^IBNCPDPI(BPSDFN)
"RTN","BPSPRRX4",68,0)
 I BPY=-1 Q "-100^Action cancelled"
"RTN","BPSPRRX4",69,0)
 ;display available e-billable plans and select the primary plan
"RTN","BPSPRRX4",70,0)
 S BPSQ=0
"RTN","BPSPRRX4",71,0)
 F  D  Q:BPSQ'=0
"RTN","BPSPRRX4",72,0)
 . S BPSPLAN=$$SELECTPL^BPSPRRX1(BPSDFN,BPSDOS,.BPSPLNSL,"PRIMARY INSURANCE POLICY",BPSPL59)
"RTN","BPSPRRX4",73,0)
 . I BPSPLAN=0 S BPSQ=-100 Q
"RTN","BPSPRRX4",74,0)
 . ;if existing rejected/reversed claim
"RTN","BPSPRRX4",75,0)
 . I +BPSECLM=2,BPRESUB=0 I BPSPLAN=$$GETPL59^BPSPRRX5(+$P(BPSECLM,U,2)) W !,"Already submitted to this plan through ECME. Resubmit if necessary.",!! Q
"RTN","BPSPRRX4",76,0)
 . S BPSQ=1
"RTN","BPSPRRX4",77,0)
 Q:BPSQ=-100 "-100^Action cancelled"
"RTN","BPSPRRX4",78,0)
 Q:BPSQ=-105 "-105^The same group plan selected"
"RTN","BPSPRRX4",79,0)
 I $$YESNO^BPSSCRRS("SUBMIT CLAIM TO "_$P(BPSPLNSL(1),U,2)_" ?(Y/N)","Y")=0 Q "-100^Action cancelled"
"RTN","BPSPRRX4",80,0)
 S BPSWHERE=$S(BPSRF>0:"RF",1:"OF")
"RTN","BPSPRRX4",81,0)
 I BPRESUB=1 S BPSWHERE="ERES"
"RTN","BPSPRRX4",82,0)
 Q $$SUBMCLM^BPSPRRX2(BPSRX,BPSRF,BPSDOS,BPSWHERE,$$GETNDC^PSONDCUT(BPSRX,BPSRF),1,BPSPLAN,.BPSDAT,BPRATTYP)
"RTN","BPSPRRX4",83,0)
 ;
"RTN","BPSPRRX5")
0^13^B48156542
"RTN","BPSPRRX5",1,0)
BPSPRRX5 ;ALB/SS - ePharmacy secondary billing ;12-DEC-08
"RTN","BPSPRRX5",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8**;JUN 2004;Build 29
"RTN","BPSPRRX5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSPRRX5",4,0)
 ;
"RTN","BPSPRRX5",5,0)
 ;
"RTN","BPSPRRX5",6,0)
 ;select refill by fill date
"RTN","BPSPRRX5",7,0)
SELREFIL(BPSARR,BPSPRMPT,BPSMESS) ;
"RTN","BPSPRRX5",8,0)
 N BPSSTR,BPSCNT,DIR,X,Y
"RTN","BPSPRRX5",9,0)
 S BPX=""
"RTN","BPSPRRX5",10,0)
 S BPSCNT=0
"RTN","BPSPRRX5",11,0)
 S DIR("A")=BPSPRMPT
"RTN","BPSPRRX5",12,0)
 S DIR("L",1)=$G(BPSMESS)
"RTN","BPSPRRX5",13,0)
 S DIR("L",2)=""
"RTN","BPSPRRX5",14,0)
 S DIR("L",3)="   Fill   Date"
"RTN","BPSPRRX5",15,0)
 S DIR("L",4)="   ====   =========="
"RTN","BPSPRRX5",16,0)
 F  S BPX=$O(BPSARR(BPX)) Q:BPX=""  D
"RTN","BPSPRRX5",17,0)
 . S BPSCNT=BPSCNT+1
"RTN","BPSPRRX5",18,0)
 . S $P(BPSSTR,";",BPSCNT)=BPX_":"_$$FMTE^XLFDT($P($G(BPSARR(BPX)),U,2),"5Z")
"RTN","BPSPRRX5",19,0)
 . S DIR("L",BPSCNT+4)="   "_BPX_"      "_$$FMTE^XLFDT($P($G(BPSARR(BPX)),U,2),"5Z")
"RTN","BPSPRRX5",20,0)
 S DIR("L")="  "
"RTN","BPSPRRX5",21,0)
 S DIR(0)="SO^"_BPSSTR
"RTN","BPSPRRX5",22,0)
 D ^DIR
"RTN","BPSPRRX5",23,0)
 I X="^" Q "-1^"
"RTN","BPSPRRX5",24,0)
 I X="" Q ""
"RTN","BPSPRRX5",25,0)
 Q BPSARR(+Y)
"RTN","BPSPRRX5",26,0)
 ;
"RTN","BPSPRRX5",27,0)
 ;check if there is any e-claim for this RX/refill
"RTN","BPSPRRX5",28,0)
 ;BPSRXIEN-ien of file# 52
"RTN","BPSPRRX5",29,0)
 ;BPSREF-refill #
"RTN","BPSPRRX5",30,0)
 ;BPCOBIND - payer sequence (1 -primary, 2- secondary)
"RTN","BPSPRRX5",31,0)
 ;Return value "CODE ^ IEN59  ^ ECME STATUS ^ "
"RTN","BPSPRRX5",32,0)
 ;where
"RTN","BPSPRRX5",33,0)
 ;CODE is one of the following:
"RTN","BPSPRRX5",34,0)
 ;0-not found
"RTN","BPSPRRX5",35,0)
 ;1-payable
"RTN","BPSPRRX5",36,0)
 ;2-not payable (rejected/reversed) 
"RTN","BPSPRRX5",37,0)
 ;3-in progress (including scheduled requests)
"RTN","BPSPRRX5",38,0)
 ;IEN59 is ien of the BPS TRANSACTION 
"RTN","BPSPRRX5",39,0)
 ;ECME STATUS is the ECME claims status text like "E PAYABLE"
"RTN","BPSPRRX5",40,0)
 ;
"RTN","BPSPRRX5",41,0)
FINDECLM(BPSRXIEN,BPSREF,BPCOBIND) ;
"RTN","BPSPRRX5",42,0)
 N BPS59,BPSSTAT,BPPAYBLE
"RTN","BPSPRRX5",43,0)
 S BPS59=+$$IEN59^BPSOSRX(BPSRXIEN,BPSREF,BPCOBIND)
"RTN","BPSPRRX5",44,0)
 I +$G(^BPST(BPS59,0))=0 Q 0
"RTN","BPSPRRX5",45,0)
 S BPSSTAT=$P($$STATUS^BPSOSRX(BPSRXIEN,BPSREF,,,BPCOBIND),U)
"RTN","BPSPRRX5",46,0)
 S BPPAYBLE=$$PAYABLE^BPSOSRX5(BPSSTAT)
"RTN","BPSPRRX5",47,0)
 I BPSSTAT["IN PROGRESS" Q 3_U_BPS59_U_BPSSTAT
"RTN","BPSPRRX5",48,0)
 I BPPAYBLE=1 Q 1_U_BPS59_U_BPSSTAT
"RTN","BPSPRRX5",49,0)
 I BPPAYBLE=0 Q 2_U_BPS59_U_BPSSTAT
"RTN","BPSPRRX5",50,0)
 Q 0
"RTN","BPSPRRX5",51,0)
 ;
"RTN","BPSPRRX5",52,0)
 ;Display e-claim details
"RTN","BPSPRRX5",53,0)
 ;BPSIEN59-ien of the #9002313.59 BPS TRANSACTION file
"RTN","BPSPRRX5",54,0)
DISPECLM(BP59) ;
"RTN","BPSPRRX5",55,0)
 W !,"Drug name     NDC           Date  RX#           REF#    TYPE        STATUS"
"RTN","BPSPRRX5",56,0)
 W !,"==========================================================================="
"RTN","BPSPRRX5",57,0)
 W !,$$CLMINFO(BP59)
"RTN","BPSPRRX5",58,0)
 Q
"RTN","BPSPRRX5",59,0)
 ;
"RTN","BPSPRRX5",60,0)
CLMINFO(BP59) ;
"RTN","BPSPRRX5",61,0)
 N BPX,BPX1,BPCOB,BPSSTAT,BPPAYBLE
"RTN","BPSPRRX5",62,0)
 S BPCOB=$$COB59^BPSUTIL2(BP59)
"RTN","BPSPRRX5",63,0)
 S BPX1=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSPRRX5",64,0)
 S BPX=$$LJ^BPSSCR02($$DRGNAME^BPSSCRU2(BP59),12)_"  "_$$LJ^BPSSCR02($$NDC^BPSSCRU2(+BPX1,+$P(BPX1,U,2)),13)_" "
"RTN","BPSPRRX5",65,0)
 S BPX=BPX_$$LJ^BPSSCR02($$FILLDATE^BPSSCRRS(+BPX1,+$P(BPX1,U,2)),5)_" "
"RTN","BPSPRRX5",66,0)
 S BPX=BPX_$$LJ^BPSSCR02($$RXNUM^BPSSCRU2(+BPX1),11)_" "_+$P(BPX1,U,2)_"/"
"RTN","BPSPRRX5",67,0)
 S BPX=BPX_$$LJ^BPSSCR02($$ECMENUM^BPSSCRU2(BP59),7)_" "_$$MWCNAME^BPSSCRU2($$GETMWC^BPSSCRU2(BP59))_" "
"RTN","BPSPRRX5",68,0)
 S BPX=BPX_$$RTBB^BPSSCRU2(BP59)_" "_$$RXST^BPSSCRU2(BP59)_"/"_$$RL^BPSSCRU2(BP59)
"RTN","BPSPRRX5",69,0)
 S BPSSTAT=$P($$STATUS^BPSOSRX(+BPX1,+$P(BPX1,U,2),,,BPCOB),U)
"RTN","BPSPRRX5",70,0)
 S BPPAYBLE=$$PAYABLE^BPSOSRX5(BPSSTAT)
"RTN","BPSPRRX5",71,0)
 I BPPAYBLE Q BPX_" PAYABLE"
"RTN","BPSPRRX5",72,0)
 I BPSSTAT["IN PROGRESS" Q BPX_" IN PROGRESS"
"RTN","BPSPRRX5",73,0)
 I BPSSTAT["E REVERSAL ACCEPTED" Q BPX_" REVERSED"
"RTN","BPSPRRX5",74,0)
 I BPSSTAT["E REJECTED" Q BPX_" REJECTED"
"RTN","BPSPRRX5",75,0)
 Q BPX_" OTHER"
"RTN","BPSPRRX5",76,0)
 ;
"RTN","BPSPRRX5",77,0)
 ;get the plan (#355.3) from the BPS TRANSACTION file record
"RTN","BPSPRRX5",78,0)
GETPL59(BP59) ;
"RTN","BPSPRRX5",79,0)
 Q $P($G(^BPST(BP59,10,+$P($G(^BPST(BP59,9)),U,1),0)),U)
"RTN","BPSPRRX5",80,0)
 ;
"RTN","BPSPRRX5",81,0)
 ;get the RATE TYPE (#399.3) from the BPS TRANSACTION file record
"RTN","BPSPRRX5",82,0)
GETRTP59(BP59) ;
"RTN","BPSPRRX5",83,0)
 Q $P($G(^BPST(BP59,10,+$P($G(^BPST(BP59,9)),U,1),0)),U,8)
"RTN","BPSPRRX5",84,0)
 ;
"RTN","BPSPRRX5",85,0)
 ;get the primary bill (#399) from the BPS TRANSACTION file record
"RTN","BPSPRRX5",86,0)
GETBIL59(BP59) ;
"RTN","BPSPRRX5",87,0)
 Q $P($G(^BPST(BP59,10,+$P($G(^BPST(BP59,9)),U,1),2)),U,8)
"RTN","BPSPRRX5",88,0)
 ;
"RTN","BPSPRRX5",89,0)
SELCOB(BPSPRMPT,BPSMESS) ;
"RTN","BPSPRRX5",90,0)
 N DIR,X,Y
"RTN","BPSPRRX5",91,0)
 S DIR("A")=BPSPRMPT
"RTN","BPSPRRX5",92,0)
 S DIR(0)="SO^1:PRIMARY;2:SECONDARY"
"RTN","BPSPRRX5",93,0)
 S DIR("L",1)=BPSMESS
"RTN","BPSPRRX5",94,0)
 S DIR("L",2)=""
"RTN","BPSPRRX5",95,0)
 S DIR("L",3)="   1  PRIMARY"
"RTN","BPSPRRX5",96,0)
 S DIR("L",4)="   2  SECONDARY"
"RTN","BPSPRRX5",97,0)
 S DIR("L")=" "
"RTN","BPSPRRX5",98,0)
 D ^DIR
"RTN","BPSPRRX5",99,0)
 I X="^" Q "-1^"
"RTN","BPSPRRX5",100,0)
 Q +Y
"RTN","BPSPRRX5",101,0)
 ;
"RTN","BPSPRRX5",102,0)
 ;submit secondary claim if no primary bills or e-claim
"RTN","BPSPRRX5",103,0)
 ;BPDISPPR - display bill information for
"RTN","BPSPRRX5",104,0)
 ; "1" - primary 
"RTN","BPSPRRX5",105,0)
 ; "2" - secondary
"RTN","BPSPRRX5",106,0)
 ; "1,2" - both
"RTN","BPSPRRX5",107,0)
 ;
"RTN","BPSPRRX5",108,0)
 ;Submission result (return value of EN^BPSNCPDP)
"RTN","BPSPRRX5",109,0)
 ;Or one of the negative error codes:
"RTN","BPSPRRX5",110,0)
 ; -100^Action cancelled
"RTN","BPSPRRX5",111,0)
 ; -101^Existing e-claim
"RTN","BPSPRRX5",112,0)
 ; -102^Claim in progress
"RTN","BPSPRRX5",113,0)
 ; -103^Invalid or wrong bill#
"RTN","BPSPRRX5",114,0)
 ; -104^Existing rejected/reversed e-claim
"RTN","BPSPRRX5",115,0)
 ; -105^The same group plan selected
"RTN","BPSPRRX5",116,0)
 ; -106^The primary insurer needs to be billed first.
"RTN","BPSPRRX5",117,0)
 ; -107^Existing active bill
"RTN","BPSPRRX5",118,0)
SECNOPRM(BPSRX,BPSRF,BPSDOS,BPSDFN,BPDISPPR) ;
"RTN","BPSPRRX5",119,0)
 N BPSBINFO,BPSRXCOB,BPSINIEN,BPPAYSEQ,BPSECLM,BP2NDBIL,BPSRET,BPSQ,BPY,BPYDEF
"RTN","BPSPRRX5",120,0)
 N BPSPLNSL,BPSECOND,BPRET,BPENGINE,BPSWHERE,BPSPLAN,BPSPL59,BPRTTP59,BPSARR
"RTN","BPSPRRX5",121,0)
 N BPRESUBM S BPRESUBM=0 ;default = original submission
"RTN","BPSPRRX5",122,0)
 ;check if there is the secondary e-claim
"RTN","BPSPRRX5",123,0)
 S BPSECLM=$$FINDECLM^BPSPRRX5(BPSRX,BPSRF,2)
"RTN","BPSPRRX5",124,0)
 I +BPSECLM=3 Q "-102^Claim in progress"
"RTN","BPSPRRX5",125,0)
 I +BPSECLM=1 Q "-109^Existing PAYABLE e-claim. Please reverse it before resubmitting."
"RTN","BPSPRRX5",126,0)
 S BPSQ=0
"RTN","BPSPRRX5",127,0)
 I +BPSECLM=2 D  Q:BPSQ=1 "-100^Action cancelled"
"RTN","BPSPRRX5",128,0)
 . D DISPECLM^BPSPRRX5(+$P(BPSECLM,U,2))
"RTN","BPSPRRX5",129,0)
 . W !!,"There is an existing rejected/reversed secondary e-claim(s) for the RX/refill."
"RTN","BPSPRRX5",130,0)
 . I $$YESNO^BPSSCRRS("Do you want to submit a new secondary claim(Y/N)","N")=1 S BPRESUBM=1
"RTN","BPSPRRX5",131,0)
 . I BPRESUBM'=1 S BPSQ=1
"RTN","BPSPRRX5",132,0)
 ; if not found or if existing rejected/reversed claim then continue , otherwise - quit
"RTN","BPSPRRX5",133,0)
 ;I +BPSECLM'=0 Q "-101^Existing e-claim"
"RTN","BPSPRRX5",134,0)
 ;prepopulate COB fields if this is a resubmit
"RTN","BPSPRRX5",135,0)
 I BPRESUBM=1 I $$RES2NDCL^BPSPRRX6($$IEN59^BPSOSRX(BPSRX,BPSRF,2),.BPSPL59,.BPSECOND,.BPRTTP59)
"RTN","BPSPRRX5",136,0)
 ;
"RTN","BPSPRRX5",137,0)
 D  Q:+$P(BP2NDBIL,U,2)>0 "-107^Existing active secondary bill"
"RTN","BPSPRRX5",138,0)
 . N BPSARR,BPS399,BPSCNT
"RTN","BPSPRRX5",139,0)
 . ;check for the existing secondary bill
"RTN","BPSPRRX5",140,0)
 . S BP2NDBIL=$$RXBILL^IBNCPUT3(BPSRX,BPSRF,"S",BPSDOS,.BPSARR)
"RTN","BPSPRRX5",141,0)
 . I +BP2NDBIL=0 Q  ;not found
"RTN","BPSPRRX5",142,0)
 . S BPS399=0
"RTN","BPSPRRX5",143,0)
 . S BPSCNT=0
"RTN","BPSPRRX5",144,0)
 . F  S BPS399=$O(BPSARR(BPS399)) Q:+BPS399=0  D
"RTN","BPSPRRX5",145,0)
 . . N BPPSEQ
"RTN","BPSPRRX5",146,0)
 . . S BPSCNT=BPSCNT+1
"RTN","BPSPRRX5",147,0)
 . . I $G(BPDISPPR)[2 D
"RTN","BPSPRRX5",148,0)
 . . . W:BPSCNT=1 !!,"Secondary bill(s) found:"
"RTN","BPSPRRX5",149,0)
 . . . S BPSRET=$P(BPSARR(BPS399),U,5)
"RTN","BPSPRRX5",150,0)
 . . . S BPPSEQ=$S($P(BPSRET,U)="S":"Secondary",$P(BPSRET,U)="T":"Tertiary",$P(BPSRET,U)="P":"Primary",1:"Unknown")
"RTN","BPSPRRX5",151,0)
 . . . D DISPBILL^BPSPRRX2(BPPSEQ,$P(BPSARR(BPS399),U,4),$P(BPSARR(BPS399),U,1),$P(BPSARR(BPS399),U,2),BPSRX,BPSRF,$P(BPSARR(BPS399),U,3),(BPSCNT=1))
"RTN","BPSPRRX5",152,0)
 . W !
"RTN","BPSPRRX5",153,0)
 ;
"RTN","BPSPRRX5",154,0)
 ; check for ePharmacy secondary ins policy
"RTN","BPSPRRX5",155,0)
 S BPYDEF="N"
"RTN","BPSPRRX5",156,0)
 I '$$SECINSCK^BPSPRRX(BPSDFN,BPSDOS) D
"RTN","BPSPRRX5",157,0)
 . S BPYDEF="Y"
"RTN","BPSPRRX5",158,0)
 . W !!,"Unable to find a secondary insurance policy which is e-Pharmacy billable."
"RTN","BPSPRRX5",159,0)
 . W !,"You must correct this in order to continue.",!
"RTN","BPSPRRX5",160,0)
 . Q
"RTN","BPSPRRX5",161,0)
 ;
"RTN","BPSPRRX5",162,0)
 ;ask the user if he wants to jump to the BCN PATIENT INSURANCE option
"RTN","BPSPRRX5",163,0)
 S BPY=$$YESNO^BPSSCRRS("DO YOU WISH TO ADD/EDIT INSURANCE COMPANY DATA FOR THIS PATIENT?(Y/N)",BPYDEF)
"RTN","BPSPRRX5",164,0)
 I BPY=1 D EN1^IBNCPDPI(BPSDFN)
"RTN","BPSPRRX5",165,0)
 I BPY=-1 Q "-100^Action cancelled"
"RTN","BPSPRRX5",166,0)
 ;
"RTN","BPSPRRX5",167,0)
 I '$$SECINSCK^BPSPRRX(BPSDFN,BPSDOS) Q "-115^No Secondary e-Pharmacy Insurance Policy."
"RTN","BPSPRRX5",168,0)
 ;
"RTN","BPSPRRX5",169,0)
 S BPSECOND("PRIMARY BILL")="" ;no primary bill
"RTN","BPSPRRX5",170,0)
 ; Note: BPSECOND("PRIMARY BILL") will be populated by the following call
"RTN","BPSPRRX5",171,0)
 S BPRET=$$PRIMDATA^BPSPRRX4($$IEN59^BPSOSRX(BPSRX,BPSRF,1),.BPSECOND,1,BPRESUBM)
"RTN","BPSPRRX5",172,0)
 I BPRET=0 D GETFR52^BPSPRRX4(BPSRX,BPSRF,.BPSECOND)
"RTN","BPSPRRX5",173,0)
 ;
"RTN","BPSPRRX5",174,0)
 I $$PROMPTS^BPSPRRX3(.BPSECOND)=-1 Q "-100^Action cancelled"
"RTN","BPSPRRX5",175,0)
 I $$YESNO^BPSSCRRS("SUBMIT CLAIM TO "_$G(BPSECOND("INS NAME"))_" ?(Y/N)","Y")=0 Q "-100^Action cancelled"
"RTN","BPSPRRX5",176,0)
 I BPRESUBM=0 S BPSWHERE=$S(BPSRF>0:"RF",1:"OF")
"RTN","BPSPRRX5",177,0)
 ;set the flag that indicates that we should use new COB data to resubmit the secondary claim , 
"RTN","BPSPRRX5",178,0)
 ;i.e. in BPSNCPDP the engine shouldn't use the COB data in BPS TRANSACTION for resubmit
"RTN","BPSPRRX5",179,0)
 I BPRESUBM=1 S BPSECOND("NEW COB DATA")=1,BPSWHERE="ERES"
"RTN","BPSPRRX5",180,0)
 S BPENGINE=$$SUBMCLM^BPSPRRX2(BPSECOND("PRESCRIPTION"),BPSECOND("FILL NUMBER"),BPSECOND("FILL DATE"),BPSWHERE,BPSECOND("BILLNDC"),2,BPSECOND("PLAN"),.BPSECOND,BPSECOND("RTYPE"))
"RTN","BPSPRRX5",181,0)
 I +BPENGINE=4 W !!,$P(BPENGINE,U,2),!
"RTN","BPSPRRX5",182,0)
 Q BPENGINE
"RTN","BPSPRRX5",183,0)
 ;BPSPRRX5
"RTN","BPSPRRX6")
0^26^B57663596
"RTN","BPSPRRX6",1,0)
BPSPRRX6 ;ALB/SS - ePharmacy secondary billing ;12-DEC-08
"RTN","BPSPRRX6",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8**;JUN 2004;Build 29
"RTN","BPSPRRX6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSPRRX6",4,0)
 ;
"RTN","BPSPRRX6",5,0)
 ;
"RTN","BPSPRRX6",6,0)
 ;check if if prescription with given number exists
"RTN","BPSPRRX6",7,0)
 ;BPSRX - RX#
"RTN","BPSPRRX6",8,0)
 ;return:
"RTN","BPSPRRX6",9,0)
 ; 1st piece - ien of #52
"RTN","BPSPRRX6",10,0)
 ; 2nd piece - ien of #2
"RTN","BPSPRRX6",11,0)
 ; -1 if "^" was entered
"RTN","BPSPRRX6",12,0)
RXINFO(BPSRX) ;
"RTN","BPSPRRX6",13,0)
 N BPSDFN,BPS52,BPSRET
"RTN","BPSPRRX6",14,0)
 ;prompt for the patient
"RTN","BPSPRRX6",15,0)
 S BPSDFN=$$PROMPT^BPSSCRCV("P^DPT(","SELECT PATIENT")
"RTN","BPSPRRX6",16,0)
 I BPSDFN=-1 Q -1
"RTN","BPSPRRX6",17,0)
 K ^TMP($J,"BPSPRRX")
"RTN","BPSPRRX6",18,0)
 D RX^PSO52API(BPSDFN,"BPSPRRX",,BPSRX,"0")
"RTN","BPSPRRX6",19,0)
 I +$G(^TMP($J,"BPSPRRX",BPSDFN,0))=-1 D  Q 0
"RTN","BPSPRRX6",20,0)
 . W !,"Incorrect RX# or patient name entered.",!
"RTN","BPSPRRX6",21,0)
 S BPSRET=+$O(^TMP($J,"BPSPRRX",BPSDFN,0))_U_BPSDFN
"RTN","BPSPRRX6",22,0)
 K ^TMP($J,"BPSPRRX")
"RTN","BPSPRRX6",23,0)
 Q BPSRET
"RTN","BPSPRRX6",24,0)
 ;prompt for the fill# and do the rest
"RTN","BPSPRRX6",25,0)
RXREFIL(BPS52,BPSDFN,BPSRXNO) ;
"RTN","BPSPRRX6",26,0)
 N BPSRF,BPSARR,BPSVAL,BPSELCTD,BPSRETV,BPORRFDT
"RTN","BPSPRRX6",27,0)
 K ^TMP($J,"BPSPRRX")
"RTN","BPSPRRX6",28,0)
 D RX^PSO52API(BPSDFN,"BPSPRRX",BPS52,,"R")
"RTN","BPSPRRX6",29,0)
 I +$G(^TMP($J,"BPSPRRX",BPSDFN,BPS52,"RF",0))=0 Q 0
"RTN","BPSPRRX6",30,0)
 S BPSRF=0
"RTN","BPSPRRX6",31,0)
 F  S BPSRF=$O(^TMP($J,"BPSPRRX",BPSDFN,BPS52,"RF",BPSRF)) Q:+BPSRF=0  D
"RTN","BPSPRRX6",32,0)
 . S BPSVAL=$G(^TMP($J,"BPSPRRX",BPSDFN,BPS52,"RF",BPSRF,.01))
"RTN","BPSPRRX6",33,0)
 . S BPSARR(BPSRF)=BPSRF_U_$P(BPSVAL,U)
"RTN","BPSPRRX6",34,0)
 ;original fill date
"RTN","BPSPRRX6",35,0)
 S BPORRFDT=$$RXFLDT^PSOBPSUT(BPS52,0)
"RTN","BPSPRRX6",36,0)
 S BPSARR(0)=0_U_BPORRFDT
"RTN","BPSPRRX6",37,0)
 F  S BPSELCTD=$$SELREFIL^BPSPRRX5(.BPSARR,"SELECT A FILL TO BILL","RX #"_BPSRXNO_" has the following fills:") Q:$P(BPSELCTD,U)'=""
"RTN","BPSPRRX6",38,0)
 I BPSELCTD<0 Q -1
"RTN","BPSPRRX6",39,0)
 Q BPSELCTD
"RTN","BPSPRRX6",40,0)
 ;
"RTN","BPSPRRX6",41,0)
 ;restore BPSPLAN,BPSPRDAT,BPSRTYPE from BPS TRANSACTION file
"RTN","BPSPRRX6",42,0)
 ;used for 2ndary claims only
"RTN","BPSPRRX6",43,0)
 ;input:
"RTN","BPSPRRX6",44,0)
 ; BP59 - ien of BPA TRANSACTION file of the SECONDARY claim
"RTN","BPSPRRX6",45,0)
 ;output:
"RTN","BPSPRRX6",46,0)
 ; BPSPLAN - plan, ien of #(355.3), by reference
"RTN","BPSPRRX6",47,0)
 ; BPSPRDAT - array with 2ndary data, by reference
"RTN","BPSPRRX6",48,0)
 ; BPSRTYPE - Rate Type, ien of #(399.3), by reference
"RTN","BPSPRRX6",49,0)
RESTOR59(BP59,BPSPLAN,BPSPRDAT,BPSRTYPE) ;
"RTN","BPSPRRX6",50,0)
 ; Data from file 9002313.59 being saved into BPSPRDAT array
"RTN","BPSPRRX6",51,0)
 N BP59PR,BPZ,BRXIEN,BFILL,BPSRESP
"RTN","BPSPRRX6",52,0)
 S BPSPLAN=+$P($G(^BPST(BP59,10,1,0)),U,1)
"RTN","BPSPRRX6",53,0)
 S BPSRTYPE=+$P($G(^BPST(BP59,10,1,0)),U,8)
"RTN","BPSPRRX6",54,0)
 ;
"RTN","BPSPRRX6",55,0)
 ; build array of COB secondary claim data from the BPS Transaction file - esg - 6/14/10
"RTN","BPSPRRX6",56,0)
 S BPSPRDAT("337-4C")=$P($G(^BPST(BP59,12)),U,4)       ;1204 cob other payments count
"RTN","BPSPRRX6",57,0)
 S BPSPRDAT("308-C8")=$P($G(^BPST(BP59,12)),U,5)       ;1205 other coverage code
"RTN","BPSPRRX6",58,0)
 ;
"RTN","BPSPRRX6",59,0)
 ; build COB data array - esg - 6/14/10
"RTN","BPSPRRX6",60,0)
 N COBPIEN,APDIEN,REJIEN
"RTN","BPSPRRX6",61,0)
 K BPSPRDAT("OTHER PAYER")
"RTN","BPSPRRX6",62,0)
 S COBPIEN=0 F  S COBPIEN=$O(^BPST(BP59,14,COBPIEN)) Q:'COBPIEN  D
"RTN","BPSPRRX6",63,0)
 . S BPSPRDAT("OTHER PAYER",COBPIEN,0)=$G(^BPST(BP59,14,COBPIEN,0))
"RTN","BPSPRRX6",64,0)
 . ;
"RTN","BPSPRRX6",65,0)
 . ; retrieve data from other payer amount paid multiple
"RTN","BPSPRRX6",66,0)
 . S APDIEN=0 F  S APDIEN=$O(^BPST(BP59,14,COBPIEN,1,APDIEN)) Q:'APDIEN  D
"RTN","BPSPRRX6",67,0)
 .. S BPSPRDAT("OTHER PAYER",COBPIEN,"P",APDIEN,0)=$G(^BPST(BP59,14,COBPIEN,1,APDIEN,0))
"RTN","BPSPRRX6",68,0)
 .. Q
"RTN","BPSPRRX6",69,0)
 . ;
"RTN","BPSPRRX6",70,0)
 . ; retrieve data from other payer reject multiple
"RTN","BPSPRRX6",71,0)
 . S REJIEN=0 F  S REJIEN=$O(^BPST(BP59,14,COBPIEN,2,REJIEN)) Q:'REJIEN  D
"RTN","BPSPRRX6",72,0)
 .. S BPSPRDAT("OTHER PAYER",COBPIEN,"R",REJIEN,0)=$G(^BPST(BP59,14,COBPIEN,2,REJIEN,0))
"RTN","BPSPRRX6",73,0)
 .. Q
"RTN","BPSPRRX6",74,0)
 . Q
"RTN","BPSPRRX6",75,0)
 ;
"RTN","BPSPRRX6",76,0)
 S BPSPRDAT("BILLNDC")=$P($G(^BPST(BP59,1)),U,2)
"RTN","BPSPRRX6",77,0)
 S BPZ=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSPRRX6",78,0)
 S BRXIEN=+BPZ
"RTN","BPSPRRX6",79,0)
 S BFILL=+$P(BPZ,U,2)
"RTN","BPSPRRX6",80,0)
 S BP59PR=$$IEN59^BPSOSRX(BRXIEN,BFILL,1)
"RTN","BPSPRRX6",81,0)
 S BPSRESP=$P($G(^BPST(BP59PR,0)),U,5) ;#4 RESPONSE
"RTN","BPSPRRX6",82,0)
 S BPSPRDAT("PRIOR PAYMENT")=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,9))
"RTN","BPSPRRX6",83,0)
 Q
"RTN","BPSPRRX6",84,0)
 ;
"RTN","BPSPRRX6",85,0)
SECBIL59(MOREDATA,IEN59) ; populate 2ndary billing fields in BPS TRANSACTION
"RTN","BPSPRRX6",86,0)
 ; MOREDATA array filed into 9002313.59
"RTN","BPSPRRX6",87,0)
 N BPTYPE,BPSTIME,BPCOB
"RTN","BPSPRRX6",88,0)
 N AMTIEN,BPIEN1,BPIEN2,BPZ5914,BPZ,BPZ1,BPZ2,OPAMT,OPAPQ,OPAYD,OPREJ,PIEN,REJIEN
"RTN","BPSPRRX6",89,0)
 I +$G(IEN59)=0 Q
"RTN","BPSPRRX6",90,0)
 ;
"RTN","BPSPRRX6",91,0)
 I $L($G(MOREDATA("337-4C"))) I $$FILLFLDS^BPSUTIL2(9002313.59,1204,IEN59,MOREDATA("337-4C"))<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#1204) of (#9002313.59)")   ; cob other payments count
"RTN","BPSPRRX6",92,0)
 I $L($G(MOREDATA("308-C8"))) I $$FILLFLDS^BPSUTIL2(9002313.59,1205,IEN59,MOREDATA("308-C8"))<1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#1205) of (#9002313.59)")   ; other coverage code
"RTN","BPSPRRX6",93,0)
 ;
"RTN","BPSPRRX6",94,0)
 ; store secondary billing related data entered by the user - esg 6/14/10
"RTN","BPSPRRX6",95,0)
 S BPQ=0
"RTN","BPSPRRX6",96,0)
 S PIEN=0 F  S PIEN=$O(MOREDATA("OTHER PAYER",PIEN)) Q:'PIEN!BPQ  D
"RTN","BPSPRRX6",97,0)
 . S OPAYD=$G(MOREDATA("OTHER PAYER",PIEN,0)) Q:OPAYD=""
"RTN","BPSPRRX6",98,0)
 . ;
"RTN","BPSPRRX6",99,0)
 . ; count up the number of multiples we have in each set
"RTN","BPSPRRX6",100,0)
 . S BPZ=0 F BPZ1=0:1 S BPZ=$O(MOREDATA("OTHER PAYER",PIEN,"P",BPZ)) Q:'BPZ
"RTN","BPSPRRX6",101,0)
 . S BPZ=0 F BPZ2=0:1 S BPZ=$O(MOREDATA("OTHER PAYER",PIEN,"R",BPZ)) Q:'BPZ
"RTN","BPSPRRX6",102,0)
 . I BPZ1,BPZ2 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot have both payments and rejects for the same OTHER PAYER.") Q
"RTN","BPSPRRX6",103,0)
 . ;
"RTN","BPSPRRX6",104,0)
 . ; add a new entry to subfile 9002313.5914
"RTN","BPSPRRX6",105,0)
 . S BPZ5914=$$INSITEM^BPSUTIL2(9002313.5914,IEN59,PIEN,PIEN,"",,0)
"RTN","BPSPRRX6",106,0)
 . I BPZ5914<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Can't create entry in COB OTHER PAYERS multiple of the BPS TRANSACTION file") Q
"RTN","BPSPRRX6",107,0)
 . ;
"RTN","BPSPRRX6",108,0)
 . ; set the rest of the pieces at this level
"RTN","BPSPRRX6",109,0)
 . I $P(OPAYD,U,2)'="" I $$FILLFLDS^BPSUTIL2(9002313.5914,.02,PIEN_","_IEN59,$P(OPAYD,U,2))<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.02) of (#9002313.5914)") Q
"RTN","BPSPRRX6",110,0)
 . I $P(OPAYD,U,3)'="" I $$FILLFLDS^BPSUTIL2(9002313.5914,.03,PIEN_","_IEN59,$P(OPAYD,U,3))<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.03) of (#9002313.5914)") Q
"RTN","BPSPRRX6",111,0)
 . I $P(OPAYD,U,4)'="" I $$FILLFLDS^BPSUTIL2(9002313.5914,.04,PIEN_","_IEN59,$P(OPAYD,U,4))<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.04) of (#9002313.5914)") Q
"RTN","BPSPRRX6",112,0)
 . I $P(OPAYD,U,5)'="" I $$FILLFLDS^BPSUTIL2(9002313.5914,.05,PIEN_","_IEN59,$P(OPAYD,U,5))<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.05) of (#9002313.5914)") Q
"RTN","BPSPRRX6",113,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.5914,.06,PIEN_","_IEN59,BPZ1)<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.06) of (#9002313.5914)") Q
"RTN","BPSPRRX6",114,0)
 . I $$FILLFLDS^BPSUTIL2(9002313.5914,.07,PIEN_","_IEN59,BPZ2)<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.07) of (#9002313.5914)") Q
"RTN","BPSPRRX6",115,0)
 . ;
"RTN","BPSPRRX6",116,0)
 . ; now loop thru the other payer payment array
"RTN","BPSPRRX6",117,0)
 . S AMTIEN=0 F  S AMTIEN=$O(MOREDATA("OTHER PAYER",PIEN,"P",AMTIEN)) Q:'AMTIEN!BPQ  D
"RTN","BPSPRRX6",118,0)
 .. S OPAMT=$G(MOREDATA("OTHER PAYER",PIEN,"P",AMTIEN,0))
"RTN","BPSPRRX6",119,0)
 .. S OPAPQ=$P(OPAMT,U,2)   ; 342-HC other payer amt paid qualifier (ncpdp 5.1 blank is OK)
"RTN","BPSPRRX6",120,0)
 .. S OPAMT=+OPAMT          ; 431-DV other payer amt paid
"RTN","BPSPRRX6",121,0)
 .. ;
"RTN","BPSPRRX6",122,0)
 .. ; add a new entry to subfile 9002313.59141
"RTN","BPSPRRX6",123,0)
 .. S BPIEN1=$$INSITEM^BPSUTIL2(9002313.59141,PIEN_","_IEN59,OPAMT,AMTIEN,"",,0)
"RTN","BPSPRRX6",124,0)
 .. I BPIEN1<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Can't create entry in 9002313.59141 subfile") Q
"RTN","BPSPRRX6",125,0)
 .. ;
"RTN","BPSPRRX6",126,0)
 .. ; set piece 2
"RTN","BPSPRRX6",127,0)
 .. I OPAPQ'="" I $$FILLFLDS^BPSUTIL2(9002313.59141,.02,AMTIEN_","_PIEN_","_IEN59,OPAPQ)<1 D
"RTN","BPSPRRX6",128,0)
 ... S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Cannot populate (#.02) of (#9002313.59141)")
"RTN","BPSPRRX6",129,0)
 ... Q
"RTN","BPSPRRX6",130,0)
 .. Q
"RTN","BPSPRRX6",131,0)
 . ;
"RTN","BPSPRRX6",132,0)
 . ; now loop thru the other payer reject array
"RTN","BPSPRRX6",133,0)
 . S REJIEN=0 F  S REJIEN=$O(MOREDATA("OTHER PAYER",PIEN,"R",REJIEN)) Q:'REJIEN!BPQ  D
"RTN","BPSPRRX6",134,0)
 .. S OPREJ=$G(MOREDATA("OTHER PAYER",PIEN,"R",REJIEN,0)) Q:OPREJ=""  Q:$P(OPREJ,U,1)=""
"RTN","BPSPRRX6",135,0)
 .. ;
"RTN","BPSPRRX6",136,0)
 .. ; add a new entry to subfile 9002313.59142
"RTN","BPSPRRX6",137,0)
 .. S BPIEN2=$$INSITEM^BPSUTIL2(9002313.59142,PIEN_","_IEN59,$P(OPREJ,U,1),REJIEN,"",,0)
"RTN","BPSPRRX6",138,0)
 .. I BPIEN2<1 S BPQ=1 D LOG^BPSOSL(IEN59,$T(+0)_"-Can't create entry in 9002313.59142 subfile") Q
"RTN","BPSPRRX6",139,0)
 .. Q
"RTN","BPSPRRX6",140,0)
 . Q
"RTN","BPSPRRX6",141,0)
 Q
"RTN","BPSPRRX6",142,0)
 ;
"RTN","BPSPRRX6",143,0)
RES2NDCL(BP59,BPSPLAN,BPSPRDAT,BPSRTYPE) ; populate fields to resubmit SECONDARY claim
"RTN","BPSPRRX6",144,0)
 ;use for secondary claims only
"RTN","BPSPRRX6",145,0)
 ;input:
"RTN","BPSPRRX6",146,0)
 ; BP59 - ien of the BPS TRANSACTION file of the secondary claim
"RTN","BPSPRRX6",147,0)
 ; BPSPLAN - 
"RTN","BPSPRRX6",148,0)
 ; BPSPRDAT - 
"RTN","BPSPRRX6",149,0)
 ; BPSRTYPE - 
"RTN","BPSPRRX6",150,0)
 ;output:
"RTN","BPSPRRX6",151,0)
 ; 1 -success
"RTN","BPSPRRX6",152,0)
 ; 0 -cannot populate fields
"RTN","BPSPRRX6",153,0)
 ;
"RTN","BPSPRRX6",154,0)
 N BPDOSDT,BPZ,BPRXIEN,BPRXR,BPBILL
"RTN","BPSPRRX6",155,0)
 I $$COB59^BPSUTIL2(BP59)'=2 Q 0
"RTN","BPSPRRX6",156,0)
 S BPBILL=$$PAYBLPRI^BPSUTIL2(BP59)
"RTN","BPSPRRX6",157,0)
 I BPBILL'>0 S BPBILL=""
"RTN","BPSPRRX6",158,0)
 ;Retrieve DOS
"RTN","BPSPRRX6",159,0)
 S BPZ=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSPRRX6",160,0)
 S BPRXIEN=+BPZ
"RTN","BPSPRRX6",161,0)
 S BPRXR=+$P(BPZ,U,2)
"RTN","BPSPRRX6",162,0)
 S BPDOSDT=$$DOSDATE^BPSSCRRS(BPRXIEN,BPRXR)
"RTN","BPSPRRX6",163,0)
 S (BPSPLAN,BPSPRDAT,BPSRTYPE)=""
"RTN","BPSPRRX6",164,0)
 D RESTOR59^BPSPRRX6(BP59,.BPSPLAN,.BPSPRDAT,.BPSRTYPE)
"RTN","BPSPRRX6",165,0)
 S BPSPRDAT("PRIMARY BILL")=BPBILL
"RTN","BPSPRRX6",166,0)
 S BPSPRDAT("FILL DATE")=BPDOSDT
"RTN","BPSPRRX6",167,0)
 S BPSPRDAT("RX ACTION")="ERES"
"RTN","BPSPRRX6",168,0)
 S BPSPRDAT("FILL NUMBER")=BPRXR
"RTN","BPSPRRX6",169,0)
 S BPSPRDAT("PRESCRIPTION")=BPRXIEN
"RTN","BPSPRRX6",170,0)
 Q 1
"RTN","BPSPRRX6",171,0)
 ;BPSPRRX6
"RTN","BPSRES")
0^29^B93916400
"RTN","BPSRES",1,0)
BPSRES ;BHAM ISC/BEE - ECME SCREEN RESUBMIT W/EDITS ;3/12/08  14:01
"RTN","BPSRES",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**3,5,7,8**;JUN 2004;Build 29
"RTN","BPSRES",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSRES",4,0)
 ;
"RTN","BPSRES",5,0)
 ;ECME Resubmit w/EDITS Protocol (Hidden) - Called by [BPS USER SCREEN]
"RTN","BPSRES",6,0)
 ;
"RTN","BPSRES",7,0)
RESED N BPSEL
"RTN","BPSRES",8,0)
 ;
"RTN","BPSRES",9,0)
 I '$D(@(VALMAR)) G XRESED
"RTN","BPSRES",10,0)
 D FULL^VALM1
"RTN","BPSRES",11,0)
 ;
"RTN","BPSRES",12,0)
 ;Select the claim to resubmit
"RTN","BPSRES",13,0)
 W !,"Enter the line number for the claim to be resubmitted."
"RTN","BPSRES",14,0)
 S BPSEL=$$ASKLINE("Select item","Please select a SINGLE claim only when using the Resubmit w/EDITS action option.")
"RTN","BPSRES",15,0)
 I BPSEL<1 S VALMBCK="R" G XRESED
"RTN","BPSRES",16,0)
 ;
"RTN","BPSRES",17,0)
 ;Attempt to resubmit the claim, update the content of the screen, and display
"RTN","BPSRES",18,0)
 ;only if claim submitted successfully
"RTN","BPSRES",19,0)
 I $$DOSELCTD(BPSEL) D REDRAW^BPSSCRUD("Updating screen for resubmitted claim...")
"RTN","BPSRES",20,0)
 E  S VALMBCK="R"
"RTN","BPSRES",21,0)
 ;
"RTN","BPSRES",22,0)
XRESED Q
"RTN","BPSRES",23,0)
 ;
"RTN","BPSRES",24,0)
 ;Attempt to Edit and Resubmit Selected Claim
"RTN","BPSRES",25,0)
 ;
"RTN","BPSRES",26,0)
 ;   Input Value -> BPRXI - Entry with ptr to BPS TRANSACTION file
"RTN","BPSRES",27,0)
 ;
"RTN","BPSRES",28,0)
 ;  Return Value -> 0 - Claim was not resubmitted
"RTN","BPSRES",29,0)
 ;                  1 - Claim was resubmitted
"RTN","BPSRES",30,0)
 ;
"RTN","BPSRES",31,0)
DOSELCTD(BPRXI) N BP02,BP59,BPBILL,BPCLTOT,BPDFN,BPDOSDT,BPOVRIEN,BPQ,BPRXIEN,BPRXR,BPSTATUS,BPUPDFLG
"RTN","BPSRES",32,0)
 N BPBILL,BPCOB,BPDOCOB,BPSURE
"RTN","BPSRES",33,0)
 S (BPQ)=""
"RTN","BPSRES",34,0)
 S (BPCLTOT,BPUPDFLG)=0
"RTN","BPSRES",35,0)
 ;
"RTN","BPSRES",36,0)
 ;Pull BPS TRANSACTION/BPS CLAIMS entries
"RTN","BPSRES",37,0)
 S BP59=$P(BPRXI,U,4) I BP59="" W !!,"No Initial Claim Submission Found - Data Elements are NOT Editable for Re-Submission",! G XRES
"RTN","BPSRES",38,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4) I 'BP02 W !!,"No Initial Claim Submission Found - Data Elements are NOT Editable for Re-Submission",! G XRES
"RTN","BPSRES",39,0)
 ;
"RTN","BPSRES",40,0)
 ;Write Form Feed
"RTN","BPSRES",41,0)
 W @IOF
"RTN","BPSRES",42,0)
 ;
"RTN","BPSRES",43,0)
 ;Display selected claim and ask to submit
"RTN","BPSRES",44,0)
 S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSRES",45,0)
 W !,"You've chosen to RESUBMIT the following prescription for "_$E($$PATNAME^BPSSCRU2(BPDFN),1,13)
"RTN","BPSRES",46,0)
 W !,@VALMAR@(+$P(BPRXI,U,5),0)
"RTN","BPSRES",47,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSRES",48,0)
 I BPQ'=1 S BPQ="^" G XRES
"RTN","BPSRES",49,0)
 ;
"RTN","BPSRES",50,0)
 ;Check to make sure claim can be Resubmitted w/EDITS
"RTN","BPSRES",51,0)
 S BPRXIEN=$P(BP59,".")
"RTN","BPSRES",52,0)
 S BPRXR=+$E($P(BP59,".",2),1,4)
"RTN","BPSRES",53,0)
 I $$RXDEL^BPSOS($P(BP59,".",1),+$E($P(BP59,".",2),1,4)) W !!,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"cannot be Resubmitted w/EDITS because it has been deleted in Pharmacy.",! G XRES
"RTN","BPSRES",54,0)
 S BPSTATUS=$P($$CLAIMST^BPSSCRU3(BP59),U)
"RTN","BPSRES",55,0)
 I BPSTATUS["IN PROGRESS" W !!,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"is still In Progress and cannot be Resubmitted w/EDITS",! G XRES
"RTN","BPSRES",56,0)
 I BPSTATUS'["E REJECTED" W !!,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"is NOT Rejected and cannot be Resubmitted w/EDITS",! G XRES
"RTN","BPSRES",57,0)
 I $P($G(^BPST(BP59,0)),U,14)<2,$$PAYABLE^BPSOSRX5(BPSTATUS),$$PAYBLSEC^BPSUTIL2(BP59) D  G XRES
"RTN","BPSRES",58,0)
 . W !,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"cannot be Resubmitted if the secondary claim is payable.",!,"Please reverse the secondary claim first."
"RTN","BPSRES",59,0)
 S BPBILL=0
"RTN","BPSRES",60,0)
 ;I $P($G(^BPST(BP59,0)),U,14)=2 S BPBILL=$$PAYBLPRI^BPSUTIL2(BP59) I BPBILL=0 D G XRES
"RTN","BPSRES",61,0)
 ;. W !,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"cannot be Resubmitted if the primary is NOT 
"RTN","BPSRES",62,0)
 ;can't resubmit a closed claim. The user must reopen first.
"RTN","BPSRES",63,0)
 I $$CLOSED02^BPSSCR03($P($G(^BPST(BP59,0)),U,4)) W !!,"The claim: ",!,@VALMAR@(+$P(BPRXI,U,5),0),!,"is Closed and cannot be Resubmitted w/EDITS.",! G XRES
"RTN","BPSRES",64,0)
 ;
"RTN","BPSRES",65,0)
 S BPCOB=$$COB59^BPSUTIL2(BP59)
"RTN","BPSRES",66,0)
 ;Prompt for EDIT Information
"RTN","BPSRES",67,0)
 S BPOVRIEN=$$PROMPTS(BP59,BP02,BPCOB) I BPOVRIEN=-1 G XRES
"RTN","BPSRES",68,0)
 ;
"RTN","BPSRES",69,0)
 ;Retrieve DOS
"RTN","BPSRES",70,0)
 S BPDOSDT=$$DOSDATE^BPSSCRRS(BPRXIEN,BPRXR)
"RTN","BPSRES",71,0)
 ;
"RTN","BPSRES",72,0)
 ; If secondary, call COBFLDS
"RTN","BPSRES",73,0)
 ; Otherwise, submit claim
"RTN","BPSRES",74,0)
 I BPCOB=2 S BPBILL=$$COBFLDS(BP59,BPRXIEN,BPRXR,BPDOSDT,"ERES",BPOVRIEN)
"RTN","BPSRES",75,0)
 I BPCOB'=2 S BPBILL=$$EN^BPSNCPDP(BPRXIEN,BPRXR,BPDOSDT,"ERES","","ECME RESUBMIT","",BPOVRIEN,,,BPCOB)
"RTN","BPSRES",76,0)
 ;
"RTN","BPSRES",77,0)
 ;Print Return Value Message
"RTN","BPSRES",78,0)
 W !!
"RTN","BPSRES",79,0)
 W:+BPBILL>0 $S(+BPBILL=10:"Reversal but no Resubmit:",1:"Not Processed:"),!,"  "
"RTN","BPSRES",80,0)
 ;
"RTN","BPSRES",81,0)
 ;Change Return Message for SC/EI
"RTN","BPSRES",82,0)
 S:$P(BPBILL,U,2)="NEEDS SC DETERMINATION" $P(BPBILL,U,2)="NEEDS SC/EI DETERMINATION"
"RTN","BPSRES",83,0)
 W $P(BPBILL,U,2)
"RTN","BPSRES",84,0)
 ;
"RTN","BPSRES",85,0)
 ;0 Prescription/Fill successfully submitted to ECME
"RTN","BPSRES",86,0)
 ;1 ECME did not submit prescription/fill
"RTN","BPSRES",87,0)
 ;2 IB says prescription/fill is not ECME billable or the data returned from IB is not valid
"RTN","BPSRES",88,0)
 ;3 ECME closed the claim but did not submit it to the payer
"RTN","BPSRES",89,0)
 ;4 Unable to queue the ECME claim
"RTN","BPSRES",90,0)
 ;5 Invalid input
"RTN","BPSRES",91,0)
 ;10 Reversal Processed But Claim Was Not Resubmitted
"RTN","BPSRES",92,0)
 ;
"RTN","BPSRES",93,0)
 I +BPBILL=0 D
"RTN","BPSRES",94,0)
 . N BPSCOB S BPSCOB=$$COB59^BPSUTIL2(BP59) ;get COB for the BPS TRANSACTION IEN
"RTN","BPSRES",95,0)
 . D ECMEACT^PSOBPSU1(+BPRXIEN,+BPRXR,"Claim resubmitted to 3rd party payer: ECME USER's SCREEN-"_$S(BPSCOB=1:"p",BPSCOB=2:"s",1:"")_$$INSNAME^BPSSCRU6(BP59))
"RTN","BPSRES",96,0)
 . S BPUPDFLG=1,BPCLTOT=1
"RTN","BPSRES",97,0)
XRES I BPCLTOT W !,BPCLTOT," claim",$S(BPCLTOT'=1:"s have",1:" has")," been resubmitted.",!
"RTN","BPSRES",98,0)
 D PAUSE^VALM1
"RTN","BPSRES",99,0)
 Q BPUPDFLG
"RTN","BPSRES",100,0)
 ;
"RTN","BPSRES",101,0)
XRES2 I BPCLTOT W !,BPCLTOT," claim",$S(BPCLTOT'=1:"s have",1:" has")," been resubmitted.",!
"RTN","BPSRES",102,0)
 Q BPUPDFLG
"RTN","BPSRES",103,0)
 ;Enter EDIT information for claim
"RTN","BPSRES",104,0)
 ;
"RTN","BPSRES",105,0)
 ;  Input Values -> BP59 - The BPS TRANSACTION entry
"RTN","BPSRES",106,0)
 ;                  BP02 - The BPS CLAIMS entry
"RTN","BPSRES",107,0)
 ;                  BPCOB - (optional) payer sequence (1-primary, 2 -secondary)
"RTN","BPSRES",108,0)
 ;  Output Value -> BPQ  - -1 - The user chose to quit
"RTN","BPSRES",109,0)
 ;                         "" - The user completed the EDITS
"RTN","BPSRES",110,0)
PROMPTS(BP59,BP02,BPCOB) ;
"RTN","BPSRES",111,0)
 N %,BP300,BPCLCD,BPFDA,BPFLD,BPOVRIEN,BPMED,BPMSG,BPPSNCD,BPPREAUT,BPPRETYP,BPQ,BPRELCD,DIC,DIR,DIROUT,DTOUT,DUOUT,X,Y,DIRUT
"RTN","BPSRES",112,0)
 ;
"RTN","BPSRES",113,0)
 S BPQ=""
"RTN","BPSRES",114,0)
 I +$G(BPCOB)=0 S BPCOB=1
"RTN","BPSRES",115,0)
 ;Pull Information from Claim
"RTN","BPSRES",116,0)
 S BP300=$G(^BPSC(BP02,300))
"RTN","BPSRES",117,0)
 S BPRELCD=$TR($E($P(BP300,U,6),3,99)," ")
"RTN","BPSRES",118,0)
 S BPPSNCD=$TR($E($P(BP300,U,3),3,99)," ")
"RTN","BPSRES",119,0)
 S (BPPRETYP,BPPREAUT,BPCLCD)="",BPMED=0 F  S BPMED=$O(^BPSC(BP02,400,BPMED)) Q:'BPMED  D  I BPPREAUT]"",BPCLCD]"" Q
"RTN","BPSRES",120,0)
 .N BP460 S BP460=$G(^BPSC(BP02,400,BPMED,460))
"RTN","BPSRES",121,0)
 .S:BPPREAUT="" BPPREAUT=$TR($E($P(BP460,U,2),3,99)," "),BPPRETYP=$TR($E($P(BP460,U),3,99)," ")
"RTN","BPSRES",122,0)
 .S:BPCLCD="" BPCLCD=$TR($E($P($G(^BPSC(BP02,400,BPMED,400)),U,20),3,99)," ")
"RTN","BPSRES",123,0)
 ;
"RTN","BPSRES",124,0)
 W ! S DIR(0)="FO^1:1",DIR("A")="Relationship Code"
"RTN","BPSRES",125,0)
 S DIR("B")=BPRELCD
"RTN","BPSRES",126,0)
 K DIR("?")
"RTN","BPSRES",127,0)
 S DIR("?",1)="Select the relationship code that describes the relationship this patient has"
"RTN","BPSRES",128,0)
 S DIR("?",2)="to the holder of this insurance policy. The standard NCPDP Patient"
"RTN","BPSRES",129,0)
 S DIR("?",3)="Relationship Code list is shown below.  However, it is important to note"
"RTN","BPSRES",130,0)
 S DIR("?",4)="that some payers use their own set of codes for this field so the field"
"RTN","BPSRES",131,0)
 S DIR("?",5)="should be populated based upon the payer's expectations."
"RTN","BPSRES",132,0)
 S DIR("?",6)=" "
"RTN","BPSRES",133,0)
 S DIR("?",7)="Choose from:"
"RTN","BPSRES",134,0)
 S DIR("?",8)="  0   Not Specified"
"RTN","BPSRES",135,0)
 S DIR("?",9)="  1   Cardholder"
"RTN","BPSRES",136,0)
 S DIR("?",10)="  2   Spouse"
"RTN","BPSRES",137,0)
 S DIR("?",11)="  3   Child"
"RTN","BPSRES",138,0)
 S DIR("?")="  4   Other"
"RTN","BPSRES",139,0)
 D ^DIR
"RTN","BPSRES",140,0)
 I $D(DTOUT)!$D(DUOUT) S BPQ=-1 G XPROMPTS
"RTN","BPSRES",141,0)
 S BPRELCD=Y
"RTN","BPSRES",142,0)
 ;
"RTN","BPSRES",143,0)
 ;Person Code
"RTN","BPSRES",144,0)
 K DIR("?") S DIR(0)="FO^1:3",DIR("A")="Person Code",DIR("?")="Enter the Specific Person Code Assigned to the Patient by the Payer"
"RTN","BPSRES",145,0)
 S DIR("B")=BPPSNCD
"RTN","BPSRES",146,0)
 D ^DIR
"RTN","BPSRES",147,0)
 I $D(DTOUT)!$D(DUOUT) S BPQ=-1 G XPROMPTS
"RTN","BPSRES",148,0)
 S BPPSNCD=Y
"RTN","BPSRES",149,0)
 ;
"RTN","BPSRES",150,0)
 ;Pre-Authorization
"RTN","BPSRES",151,0)
 K DIR("?") S DIR(0)="FO^1:11",DIR("A")="Prior Authorization Number",DIR("?")="Enter the Number Submitted by the Provider to Identify the Prior Authorization"
"RTN","BPSRES",152,0)
 S DIR("B")=BPPREAUT
"RTN","BPSRES",153,0)
 D ^DIR
"RTN","BPSRES",154,0)
 I $D(DTOUT)!$D(DUOUT) S BPQ=-1 G XPROMPTS
"RTN","BPSRES",155,0)
 S BPPREAUT=Y
"RTN","BPSRES",156,0)
 ;
"RTN","BPSRES",157,0)
 ;Prior-Authorization Type Code
"RTN","BPSRES",158,0)
 N X,DIC,Y
"RTN","BPSRES",159,0)
 S DIC("B")=+BPPRETYP
"RTN","BPSRES",160,0)
 S DIC(0)="QEAM",DIC=9002313.26,DIC("A")="Prior Authorization Type Code: "
"RTN","BPSRES",161,0)
 D ^DIC
"RTN","BPSRES",162,0)
 ;
"RTN","BPSRES",163,0)
 ;Check for "^" or timeout
"RTN","BPSRES",164,0)
 I ($D(DUOUT))!($D(DTOUT))!(Y=-1) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",165,0)
 S BPPRETYP=$P(Y,U,2)
"RTN","BPSRES",166,0)
 K X,DIC,Y
"RTN","BPSRES",167,0)
 ;
"RTN","BPSRES",168,0)
 ;Submission Clarification Code
"RTN","BPSRES",169,0)
 S DIC("B")=+BPCLCD
"RTN","BPSRES",170,0)
 S DIC(0)="QEAM",DIC=9002313.25,DIC("A")="Submission Clarification Code: "
"RTN","BPSRES",171,0)
 D ^DIC
"RTN","BPSRES",172,0)
 ;
"RTN","BPSRES",173,0)
 ;Check for "^" or timeout
"RTN","BPSRES",174,0)
 I ($D(DUOUT))!($D(DTOUT))!(Y=-1) S BPQ=-1 K X,DIC,Y G XPROMPTS
"RTN","BPSRES",175,0)
 S BPCLCD=$P(Y,U,2)
"RTN","BPSRES",176,0)
 K X,DIC,Y
"RTN","BPSRES",177,0)
 ;
"RTN","BPSRES",178,0)
 ;Ask to proceed
"RTN","BPSRES",179,0)
 I BPCOB=1 W ! S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)") I BPQ'=1 S BPQ=-1 G XPROMPTS
"RTN","BPSRES",180,0)
 S BPQ=1
"RTN","BPSRES",181,0)
 ;
"RTN","BPSRES",182,0)
 ;Save into BPS NCPDP OVERRIDES (#9002313.511)
"RTN","BPSRES",183,0)
 S BPFDA(9002313.511,"+1,",.01)=BP59
"RTN","BPSRES",184,0)
 D NOW^%DTC
"RTN","BPSRES",185,0)
 S BPFDA(9002313.511,"+1,",.02)=%
"RTN","BPSRES",186,0)
 S BPFLD=$O(^BPSF(9002313.91,"B",303,"")) I BPFLD]"" S BPFDA(9002313.5111,"+2,+1,",.01)=BPFLD,BPFDA(9002313.5111,"+2,+1,",.02)=BPPSNCD
"RTN","BPSRES",187,0)
 S BPFLD=$O(^BPSF(9002313.91,"B",306,"")) I BPFLD]"" S BPFDA(9002313.5111,"+3,+1,",.01)=BPFLD,BPFDA(9002313.5111,"+3,+1,",.02)=BPRELCD
"RTN","BPSRES",188,0)
 S BPFLD=$O(^BPSF(9002313.91,"B",462,"")) I BPFLD]"" S BPFDA(9002313.5111,"+4,+1,",.01)=BPFLD,BPFDA(9002313.5111,"+4,+1,",.02)=BPPREAUT
"RTN","BPSRES",189,0)
 S BPFLD=$O(^BPSF(9002313.91,"B",461,"")) I BPFLD]"" S BPFDA(9002313.5111,"+5,+1,",.01)=BPFLD,BPFDA(9002313.5111,"+5,+1,",.02)=BPPRETYP
"RTN","BPSRES",190,0)
 S BPFLD=$O(^BPSF(9002313.91,"B",420,"")) I BPFLD]"" S BPFDA(9002313.5111,"+6,+1,",.01)=BPFLD,BPFDA(9002313.5111,"+6,+1,",.02)=BPCLCD
"RTN","BPSRES",191,0)
 D UPDATE^DIE("","BPFDA","BPOVRIEN","BPMSG")
"RTN","BPSRES",192,0)
 ;
"RTN","BPSRES",193,0)
 I $D(BPMSG("DIERR")) W !!,"Could Not Save Override information into BPS NCPDP OVERRIDES FILES",! S BPQ=-1 G XPROMPTS
"RTN","BPSRES",194,0)
 ;
"RTN","BPSRES",195,0)
XPROMPTS ;
"RTN","BPSRES",196,0)
 S BPOVRIEN=$S(BPQ=-1:BPQ,$G(BPOVRIEN(1))]"":BPOVRIEN(1),1:-1)
"RTN","BPSRES",197,0)
 Q BPOVRIEN
"RTN","BPSRES",198,0)
 ;
"RTN","BPSRES",199,0)
 ;Prompt User for Claim to Resubmit (w/EDITS)
"RTN","BPSRES",200,0)
 ;
"RTN","BPSRES",201,0)
 ; Input values ->  BPROMPT - prompt string
"RTN","BPSRES",202,0)
 ;                 BPERRMES - the message to display when the user tries
"RTN","BPSRES",203,0)
 ;                           to make multi line selection (optional)
"RTN","BPSRES",204,0)
 ;                  Piece
"RTN","BPSRES",205,0)
 ;output values ->      1 - 1 = okay, <0 = errors, 0 = quit
"RTN","BPSRES",206,0)
 ;                      2 - patient ien #2
"RTN","BPSRES",207,0)
 ;                      3 - insurance ien #36
"RTN","BPSRES",208,0)
 ;                      4 - ptr to #9002313.59
"RTN","BPSRES",209,0)
 ;                      5 - 1st line for index(es) in LM "VALM" array
"RTN","BPSRES",210,0)
 ;                      6 - patient's index
"RTN","BPSRES",211,0)
 ;                      7 - claim's index
"RTN","BPSRES",212,0)
ASKLINE(BPROMPT,BPERRMES) ;
"RTN","BPSRES",213,0)
 N BPRET,BPCNT
"RTN","BPSRES",214,0)
 S BPRET="",BPCNT=0
"RTN","BPSRES",215,0)
 F  S BPRET=$$SELLINE^BPSSCRU4(BPROMPT,"C",VALMAR,"") Q:BPRET'<0  D
"RTN","BPSRES",216,0)
 . ;
"RTN","BPSRES",217,0)
 . I BPCNT<1 S BPCNT=BPCNT+1 W !
"RTN","BPSRES",218,0)
 . E  S BPCNT=0 D RE^VALM4
"RTN","BPSRES",219,0)
 . I BPRET=-1 W "Invalid line number" ; (invalid Patient summary line)"
"RTN","BPSRES",220,0)
 . I BPRET=-8 W $S($G(BPERRMES)]"":BPERRMES,1:" Invalid line number")
"RTN","BPSRES",221,0)
 . I BPRET=-4 W "Invalid line number" ; (invalid RX line)"
"RTN","BPSRES",222,0)
 . I BPRET=-2 W "Please select Patient's summary line."
"RTN","BPSRES",223,0)
 . I BPRET=-3 W "Please specify RX line."
"RTN","BPSRES",224,0)
 . I ",-1,-8,-4,-2,-3,"'[(","_BPRET_",") W "Incorrect format." ; Corrupted array (",BPRET,")"
"RTN","BPSRES",225,0)
 Q BPRET
"RTN","BPSRES",226,0)
 ;
"RTN","BPSRES",227,0)
 ;
"RTN","BPSRES",228,0)
COBFLDS(BP59,BPRXIEN,BPRXR,BPDOSDT,BPSWHERE,BPOVRIEN) ;
"RTN","BPSRES",229,0)
 N BPSECOND,BPSPL59,BPRTTP59,BPRET,BPENGINE,BPSPLAN,BPRATTYP
"RTN","BPSRES",230,0)
 S BPSECOND("PRESCRIPTION")=BPRXIEN
"RTN","BPSRES",231,0)
 S BPSECOND("FILL NUMBER")=BPRXR
"RTN","BPSRES",232,0)
 S BPSECOND("FILL DATE")=BPDOSDT
"RTN","BPSRES",233,0)
 S BPSPLAN=$$GETPL59^BPSPRRX5(BP59)
"RTN","BPSRES",234,0)
 S BPRATTYP=$$GETRTP59^BPSPRRX5(BP59)
"RTN","BPSRES",235,0)
 S BPSECOND("PRIMARY BILL")=$$GETBIL59^BPSPRRX5(BP59)
"RTN","BPSRES",236,0)
 I $$RES2NDCL^BPSPRRX6(BP59,.BPSPL59,.BPSECOND,.BPRTTP59)
"RTN","BPSRES",237,0)
 ; BPSECOND("RXCOB"),BPSECOND("PLAN"),BPSECOND("RTYPE") will be added in BPSNCPD4 and BPSNCPD5
"RTN","BPSRES",238,0)
 ; Note: BPSECOND("PRIMARY BILL") will be populated by the following call
"RTN","BPSRES",239,0)
 S BPRET=$$PRIMDATA^BPSPRRX4($$IEN59^BPSOSRX(BPRXIEN,BPRXR,1),.BPSECOND,1,1)
"RTN","BPSRES",240,0)
 I BPRET=0 D GETFR52^BPSPRRX4(BPRXIEN,BPRXR,.BPSECOND)
"RTN","BPSRES",241,0)
 ;
"RTN","BPSRES",242,0)
 I $$PROMPTS^BPSPRRX3(.BPSECOND)=-1 Q "-100^Action cancelled"
"RTN","BPSRES",243,0)
 S BPSECOND("NEW COB DATA")=1
"RTN","BPSRES",244,0)
 S BPENGINE=$$SUBMCLM^BPSPRRX2(BPSECOND("PRESCRIPTION"),BPSECOND("FILL NUMBER"),BPSECOND("FILL DATE"),BPSWHERE,BPSECOND("BILLNDC"),2,BPSECOND("PLAN"),.BPSECOND,BPSECOND("RTYPE"),"ECME RESUBMIT",BPOVRIEN)
"RTN","BPSRES",245,0)
 I +BPENGINE=4 W !!,$P(BPENGINE,U,2),!
"RTN","BPSRES",246,0)
 Q BPENGINE
"RTN","BPSRES",247,0)
 ;
"RTN","BPSRPT1")
0^45^B52995272
"RTN","BPSRPT1",1,0)
BPSRPT1 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8**;JUN 2004;Build 29
"RTN","BPSRPT1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSRPT1",4,0)
 Q
"RTN","BPSRPT1",5,0)
 ;
"RTN","BPSRPT1",6,0)
 ; ECME Report Compile Routine - Looping/Filtering Routine
"RTN","BPSRPT1",7,0)
 ;
"RTN","BPSRPT1",8,0)
 ;  Input Variables:
"RTN","BPSRPT1",9,0)
 ;                 BPRTYPE - Type of Report (1-7)
"RTN","BPSRPT1",10,0)
 ;               BPGLTMP - Temporary storage global
"RTN","BPSRPT1",11,0)
 ;  BPPHARM/BPPHARM(ptr) - Set to 0 for all pharmacies, if set to 1 array
"RTN","BPSRPT1",12,0)
 ;                         of internal pointers of selected pharmacies
"RTN","BPSRPT1",13,0)
 ;              BPSUMDET - (1) Summary or (0) Detail format
"RTN","BPSRPT1",14,0)
 ;              BPINSINF - Set to 0 for all insurances or list of file 36 IENs
"RTN","BPSRPT1",15,0)
 ;                 BPMWC - 1-ALL,2-Mail,3-Window,4-CMOP Prescriptions
"RTN","BPSRPT1",16,0)
 ;               BPRTBCK - 1-ALL,2-RealTime,3-Backbill Claim Submission
"RTN","BPSRPT1",17,0)
 ;               BPRLNRL - 1-ALL,2-RELEASED,3-NOT RELEASED
"RTN","BPSRPT1",18,0)
 ;                BPDRUG - DRUG to report on (ptr to #50)
"RTN","BPSRPT1",19,0)
 ;               BPDRGCL - DRUG CLASS to report on (0 for ALL)
"RTN","BPSRPT1",20,0)
 ;               BPBEGDT - Beginning Date
"RTN","BPSRPT1",21,0)
 ;               BPENDDT - Ending Date
"RTN","BPSRPT1",22,0)
 ;               BPCCRSN - Set to 0 for all closed claim reasons or ptr to #356.8
"RTN","BPSRPT1",23,0)
 ;              BPAUTREV - 0-ALL,1-Auto Reversed
"RTN","BPSRPT1",24,0)
 ;               BPACREJ - 0-ALL,1-REJECTED,2-ACCEPTED
"RTN","BPSRPT1",25,0)
 ;              
"RTN","BPSRPT1",26,0)
COLLECT(BPGLTMP) N BP02,BP57,BP59,BPENDDT1,BPLDT02,BPLDT57,X,Y,OK,BPIX
"RTN","BPSRPT1",27,0)
 ;
"RTN","BPSRPT1",28,0)
 ;Check Variables
"RTN","BPSRPT1",29,0)
 S OK=1
"RTN","BPSRPT1",30,0)
 S:'$G(BPBEGDT) BPBEGDT=0
"RTN","BPSRPT1",31,0)
 S:'$G(BPENDDT) BPENDDT=9999999
"RTN","BPSRPT1",32,0)
 S BPENDDT=BPENDDT+0.9
"RTN","BPSRPT1",33,0)
 I $G(BPRTYPE)=""!($G(BPGLTMP)="")!($G(BPPHARM)="")!($G(BPSUMDET)="")!($G(BPINSINF)="")!($G(BPMWC)="")!($G(BPRTBCK)="") S OK=-1 G EXIT
"RTN","BPSRPT1",34,0)
 ;
"RTN","BPSRPT1",35,0)
 ;Loop through BPS CLAIMS
"RTN","BPSRPT1",36,0)
 ;
"RTN","BPSRPT1",37,0)
 ;First look for fill/refill cross reference
"RTN","BPSRPT1",38,0)
 ;Loop through Date of Service Index in BPS CLAIMS file and find link to 
"RTN","BPSRPT1",39,0)
 ;claim in BPS TRANSACTION.  Process earliest Date of Service entry found in
"RTN","BPSRPT1",40,0)
 ;BPS TRANSACTION
"RTN","BPSRPT1",41,0)
 ;
"RTN","BPSRPT1",42,0)
 ;Choose Index to Loop through (different for Closed Claims)
"RTN","BPSRPT1",43,0)
 S BPIX="AF" S:BPRTYPE=7 BPIX="AG"
"RTN","BPSRPT1",44,0)
 ;
"RTN","BPSRPT1",45,0)
 S BPLDT02=$S(BPIX="AF":$$FM2YMD(BPBEGDT-0.00001),1:BPBEGDT) S:BPLDT02="" BPLDT02=0
"RTN","BPSRPT1",46,0)
 S BPENDDT1=$S(BPIX="AF":$$FM2YMD(BPENDDT),1:BPENDDT_".9999999999") S:BPENDDT1="" BPENDDT1=99999999
"RTN","BPSRPT1",47,0)
 F  S BPLDT02=+$O(^BPSC(BPIX,BPLDT02)) Q:BPLDT02=0!(BPLDT02>BPENDDT1)  D
"RTN","BPSRPT1",48,0)
 . S BP02=0 F  S BP02=$O(^BPSC(BPIX,BPLDT02,BP02)) Q:+BP02=0  D
"RTN","BPSRPT1",49,0)
 . . S BP59=+$O(^BPST("AE",BP02,0))
"RTN","BPSRPT1",50,0)
 . . Q:BP59=0
"RTN","BPSRPT1",51,0)
 . . I $D(@BPGLTMP@("FILE59",BP59)) Q
"RTN","BPSRPT1",52,0)
 . . S @BPGLTMP@("FILE59",BP59)=BPLDT02_"^02"
"RTN","BPSRPT1",53,0)
 . . D PROCESS(BP59)
"RTN","BPSRPT1",54,0)
 ;
"RTN","BPSRPT1",55,0)
 ;#9002313.59 has only one entry per claim with, which has a date 
"RTN","BPSRPT1",56,0)
 ;  of the latest update for the claim
"RTN","BPSRPT1",57,0)
 ;#9002313.57 has more than one entries per claim and keep all 
"RTN","BPSRPT1",58,0)
 ;  changes made the claim
"RTN","BPSRPT1",59,0)
 ;so we have to go thru #9002313.57 to find the earliest date 
"RTN","BPSRPT1",60,0)
 ;related to the claim to check it against BPBEGDT
"RTN","BPSRPT1",61,0)
 S BPLDT57=BPBEGDT-0.00001
"RTN","BPSRPT1",62,0)
 F  S BPLDT57=+$O(^BPSTL("AH",BPLDT57)) Q:BPLDT57=0!(BPLDT57>BPENDDT)  D
"RTN","BPSRPT1",63,0)
 . S BP57=0 F  S BP57=$O(^BPSTL("AH",BPLDT57,BP57)) Q:+BP57=0  D
"RTN","BPSRPT1",64,0)
 . . S BP59=+$G(^BPSTL(BP57,0))
"RTN","BPSRPT1",65,0)
 . . I $D(@BPGLTMP@("FILE59",BP59)) Q
"RTN","BPSRPT1",66,0)
 . . S @BPGLTMP@("FILE59",BP59)=BPLDT57_"^57"
"RTN","BPSRPT1",67,0)
 . . D PROCESS(BP59)
"RTN","BPSRPT1",68,0)
 ;
"RTN","BPSRPT1",69,0)
 ;Remove Portion of Scratch Global
"RTN","BPSRPT1",70,0)
EXIT K @BPGLTMP@("FILE59")
"RTN","BPSRPT1",71,0)
 Q OK
"RTN","BPSRPT1",72,0)
 ;
"RTN","BPSRPT1",73,0)
 ;Convert FB date to YYYYMMDD
"RTN","BPSRPT1",74,0)
FM2YMD(BPFMDT) N Y,Y1
"RTN","BPSRPT1",75,0)
 S Y=$E(BPFMDT,2,3),Y1=$E(BPFMDT,1,1) S Y=$S(Y1=3:"20"_Y,Y1=2:"19"_Y,1:"")
"RTN","BPSRPT1",76,0)
 Q:Y Y_$E(BPFMDT,4,7)
"RTN","BPSRPT1",77,0)
 Q ""
"RTN","BPSRPT1",78,0)
 ;
"RTN","BPSRPT1",79,0)
 ;Process each Entry
"RTN","BPSRPT1",80,0)
 ;
"RTN","BPSRPT1",81,0)
PROCESS(BP59) ;
"RTN","BPSRPT1",82,0)
 N BPBCK,BPDFN,BPREF,BPPAYBL,BPPLAN,BPREJ,BPRLSDT,BPRX,BPRXDRG,BPSTATUS,BPSEQ
"RTN","BPSRPT1",83,0)
 ;
"RTN","BPSRPT1",84,0)
 S BPSEQ=$$COB59^BPSUTIL2(BP59)
"RTN","BPSRPT1",85,0)
 ;
"RTN","BPSRPT1",86,0)
 ;Get ABSBRXI - ptr to #52
"RTN","BPSRPT1",87,0)
 S BPRX=+$P($G(^BPST(BP59,1)),U,11)
"RTN","BPSRPT1",88,0)
 ;
"RTN","BPSRPT1",89,0)
 ;Get ABSBRXR - Prescription Number IEN
"RTN","BPSRPT1",90,0)
 S BPREF=+$P($G(^BPST(BP59,1)),U)
"RTN","BPSRPT1",91,0)
 ;
"RTN","BPSRPT1",92,0)
 ;Get PATIENT - ptr to #2
"RTN","BPSRPT1",93,0)
 S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSRPT1",94,0)
 ;
"RTN","BPSRPT1",95,0)
 ;Check for correct BPS Pharmacy (DIVISION)
"RTN","BPSRPT1",96,0)
 I $G(BPPHARM)=1,$$CHKPHRM(BP59)=0 G XPROC
"RTN","BPSRPT1",97,0)
 ;
"RTN","BPSRPT1",98,0)
 ;Check for Display 1-ALL,2-RELEASED,3-NOT RELEASED
"RTN","BPSRPT1",99,0)
 S BPRLSDT=$$RELEASED(BPRX,BPREF)
"RTN","BPSRPT1",100,0)
 I BPRLNRL'=1 I ((BPRLNRL=2)&(BPRLSDT=0))!((BPRLNRL=3)&(BPRLSDT)) G XPROC
"RTN","BPSRPT1",101,0)
 ;
"RTN","BPSRPT1",102,0)
 ;Get Status
"RTN","BPSRPT1",103,0)
 S BPSTATUS=$$STATUS^BPSRPT6(BPRX,BPREF,BPSEQ)
"RTN","BPSRPT1",104,0)
 ;
"RTN","BPSRPT1",105,0)
 ;if REVERSAL
"RTN","BPSRPT1",106,0)
 I BPRTYPE=4,BPSTATUS'["REVERSAL" G XPROC  ; exclude non-reversed
"RTN","BPSRPT1",107,0)
 I BPRTYPE=4,$$CLOSED02^BPSSCR03($P(^BPST(BP59,0),U,4))=1 G XPROC  ; exclude closed claims for Reversal Report
"RTN","BPSRPT1",108,0)
 ;
"RTN","BPSRPT1",109,0)
 ;if PAYABLE
"RTN","BPSRPT1",110,0)
 S BPPAYBL=BPSTATUS["PAYABLE"
"RTN","BPSRPT1",111,0)
 I BPRTYPE=1,'BPPAYBL G XPROC  ; exclude non-payable
"RTN","BPSRPT1",112,0)
 I BPRTYPE=1,BPSTATUS["REVERSAL" G XPROC  ; reversed
"RTN","BPSRPT1",113,0)
 ;
"RTN","BPSRPT1",114,0)
 ;if REJECTED
"RTN","BPSRPT1",115,0)
 S BPREJ=BPSTATUS["REJECTED"
"RTN","BPSRPT1",116,0)
 I BPRTYPE=2,BPSTATUS["REVERSAL" G XPROC ; exclude rejected reversals
"RTN","BPSRPT1",117,0)
 I BPRTYPE=2,'BPREJ G XPROC  ; exclude non-rejected
"RTN","BPSRPT1",118,0)
 ;
"RTN","BPSRPT1",119,0)
 ;if SUBMITTED NOT RELEASED exclude released ones
"RTN","BPSRPT1",120,0)
 I BPRTYPE=3,BPRLSDT'=0 G XPROC
"RTN","BPSRPT1",121,0)
 I BPRTYPE=3,'BPPAYBL G XPROC  ; exclude non-payable
"RTN","BPSRPT1",122,0)
 ;
"RTN","BPSRPT1",123,0)
 ;Auto Reverse Check
"RTN","BPSRPT1",124,0)
 I BPRTYPE=4,BPAUTREV,'$$AUTOREV(BP59) G XPROC
"RTN","BPSRPT1",125,0)
 ;
"RTN","BPSRPT1",126,0)
 ;if CLOSED
"RTN","BPSRPT1",127,0)
 I BPRTYPE=7,'$$CLSCLM(BP59) G XPROC  ;exclude open claims
"RTN","BPSRPT1",128,0)
 ;I BPRTYPE=7,BPSTATUS'["REJECTED" G XPROC  ;exclude non-rejected closed claims
"RTN","BPSRPT1",129,0)
 ;
"RTN","BPSRPT1",130,0)
 ;if Recent Transactions, exclude closed claims
"RTN","BPSRPT1",131,0)
 I BPRTYPE=5,$$CLSCLM(BP59) G XPROC
"RTN","BPSRPT1",132,0)
 ;
"RTN","BPSRPT1",133,0)
 ;If Totals by Date, include only rejects and payables
"RTN","BPSRPT1",134,0)
 I BPRTYPE=6,BPSTATUS'["REJECTED",BPSTATUS'["PAYABLE" G XPROC  ; Reversed
"RTN","BPSRPT1",135,0)
 ;
"RTN","BPSRPT1",136,0)
 ;Realtime/Backbill Check
"RTN","BPSRPT1",137,0)
 S BPBCK=$$RTBCK(BP59)
"RTN","BPSRPT1",138,0)
 I BPRTBCK'=1 I ((BPRTBCK=2)&(BPBCK=0))!((BPRTBCK=3)&(BPBCK)) G XPROC
"RTN","BPSRPT1",139,0)
 ;
"RTN","BPSRPT1",140,0)
 ;Check for MAIL/WINDOW/CMOP/ALL
"RTN","BPSRPT1",141,0)
 I BPMWC'="A",$$MWC^BPSRPT6(BPRX,BPREF)'=BPMWC G XPROC
"RTN","BPSRPT1",142,0)
 ;
"RTN","BPSRPT1",143,0)
 ;Check for selected insurance
"RTN","BPSRPT1",144,0)
 S BPPLAN=$$INSNAM^BPSRPT6(BP59)
"RTN","BPSRPT1",145,0)
 I BPINSINF'=0,'$$CHKINS^BPSSCRCU($P(BPPLAN,U,1),BPINSINF) G XPROC
"RTN","BPSRPT1",146,0)
 S BPPLAN=$P(BPPLAN,U,2)
"RTN","BPSRPT1",147,0)
 ;
"RTN","BPSRPT1",148,0)
 ;Check for selected drug
"RTN","BPSRPT1",149,0)
 S BPRXDRG=$$GETDRUG^BPSRPT6(BPRX)
"RTN","BPSRPT1",150,0)
 I BPRXDRG=0 G XPROC
"RTN","BPSRPT1",151,0)
 I BPDRUG,BPDRUG'=BPRXDRG G XPROC
"RTN","BPSRPT1",152,0)
 ;
"RTN","BPSRPT1",153,0)
 ;Check for selected drug classes
"RTN","BPSRPT1",154,0)
 I BPDRGCL'=0,BPDRGCL'=$$DRGCLNAM^BPSRPT6($$GETDRGCL^BPSRPT6(BPRXDRG),99) G XPROC
"RTN","BPSRPT1",155,0)
 ;
"RTN","BPSRPT1",156,0)
 ;Check for selected Close Reason
"RTN","BPSRPT1",157,0)
 I BPCCRSN,BPCCRSN'=$P($$CLRSN^BPSRPT7(BP59),U) G XPROC
"RTN","BPSRPT1",158,0)
 ;
"RTN","BPSRPT1",159,0)
 ;Check for Accepted/Rejected
"RTN","BPSRPT1",160,0)
 I BPACREJ=1,BPSTATUS'["REJECTED" G XPROC
"RTN","BPSRPT1",161,0)
 I BPACREJ=2,BPSTATUS'["ACCEPTED" G XPROC
"RTN","BPSRPT1",162,0)
 ;
"RTN","BPSRPT1",163,0)
 ;Check for Specific Reject Code
"RTN","BPSRPT1",164,0)
 I BPREJCD'=0,'$$CKREJ(BP59,BPREJCD) G XPROC
"RTN","BPSRPT1",165,0)
 ;
"RTN","BPSRPT1",166,0)
 ;Check for Eligibility Code
"RTN","BPSRPT1",167,0)
 I BPELIG'=0,BPELIG'=$$ELIGCODE^BPSSCR05(BP59) G XPROC
"RTN","BPSRPT1",168,0)
 ;
"RTN","BPSRPT1",169,0)
 ;Check Open/Closed claim
"RTN","BPSRPT1",170,0)
 I BPOPCL'=0,((BPOPCL=2)&($$CLOSED02^BPSSCR03($P(^BPST(BP59,0),U,4))=1))!((BPOPCL=1)&($$CLOSED02^BPSSCR03($P(^BPST(BP59,0),U,4))'=1)) G XPROC
"RTN","BPSRPT1",171,0)
 ;
"RTN","BPSRPT1",172,0)
 ;Save Entry for Report
"RTN","BPSRPT1",173,0)
 D SETTMP^BPSRPT2(BPGLTMP,BPDFN,BPRX,BPREF,BP59,BPBEGDT,BPENDDT,.BPPHARM,BPSUMDET,BPPLAN,BPRLSDT,BPPAYBL,BPREJ,BPRXDRG,$P(BPSTATUS,U))
"RTN","BPSRPT1",174,0)
 ;
"RTN","BPSRPT1",175,0)
XPROC Q
"RTN","BPSRPT1",176,0)
 ;
"RTN","BPSRPT1",177,0)
 ;Check if selected BPS PHARMACY
"RTN","BPSRPT1",178,0)
 ;
"RTN","BPSRPT1",179,0)
 ; Defined Variable: BPPHARM(ptr) - List of BPS Pharmacies to Report on
"RTN","BPSRPT1",180,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",181,0)
 ; 
"RTN","BPSRPT1",182,0)
 ; Returned Value -> 0 = Entry not in list of selected pharmacies
"RTN","BPSRPT1",183,0)
 ;                   1 = Entry is in list of selected pharmacies
"RTN","BPSRPT1",184,0)
CHKPHRM(BP59) N PHARM
"RTN","BPSRPT1",185,0)
 S PHARM=+$P($G(^BPST(BP59,1)),"^",7)
"RTN","BPSRPT1",186,0)
 S PHARM=$S($D(BPPHARM(PHARM)):1,1:0)
"RTN","BPSRPT1",187,0)
 Q PHARM
"RTN","BPSRPT1",188,0)
 ;
"RTN","BPSRPT1",189,0)
 ;Determine whether claim is Released or Not Released
"RTN","BPSRPT1",190,0)
 ;
"RTN","BPSRPT1",191,0)
 ; Input Variables: BPRX - ptr to PRESCRIPTION (#52)
"RTN","BPSRPT1",192,0)
 ;                 BPREF - refill # (0-No Refills,1-1st Refill, 2-2nd, ...) 
"RTN","BPSRPT1",193,0)
 ;
"RTN","BPSRPT1",194,0)
 ; Return Value ->             0 = Not Released
"RTN","BPSRPT1",195,0)
 ;                 released date = Released
"RTN","BPSRPT1",196,0)
 ;                 
"RTN","BPSRPT1",197,0)
RELEASED(BPRX,BPREF) N RDT
"RTN","BPSRPT1",198,0)
 ;
"RTN","BPSRPT1",199,0)
 I BPREF=0 S RDT=$$RXRELDT^BPSRPT6(BPRX)\1
"RTN","BPSRPT1",200,0)
 I BPREF'=0 S RDT=$$REFRELDT^BPSRPT6(BPRX,BPREF)\1
"RTN","BPSRPT1",201,0)
 Q RDT
"RTN","BPSRPT1",202,0)
 ;
"RTN","BPSRPT1",203,0)
 ;Determine if claim was Auto Reversed
"RTN","BPSRPT1",204,0)
 ;
"RTN","BPSRPT1",205,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",206,0)
 ; Return Value -> 1 = Auto Reversed
"RTN","BPSRPT1",207,0)
 ;                 0 = Not Auto Reversed
"RTN","BPSRPT1",208,0)
 ;
"RTN","BPSRPT1",209,0)
AUTOREV(BP59) N AR,BP02
"RTN","BPSRPT1",210,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT1",211,0)
 S AR=+$P($G(^BPSC(BP02,0)),U,7)
"RTN","BPSRPT1",212,0)
 Q AR
"RTN","BPSRPT1",213,0)
 ;
"RTN","BPSRPT1",214,0)
 ;Determine if claim was closed
"RTN","BPSRPT1",215,0)
 ;
"RTN","BPSRPT1",216,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",217,0)
 ; Return Value -> 1 = Closed
"RTN","BPSRPT1",218,0)
 ;                 0 = Not Closed
"RTN","BPSRPT1",219,0)
 ;                 
"RTN","BPSRPT1",220,0)
CLSCLM(BP59) N BP02,CL
"RTN","BPSRPT1",221,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT1",222,0)
 S CL=+$G(^BPSC(BP02,900))
"RTN","BPSRPT1",223,0)
 Q CL
"RTN","BPSRPT1",224,0)
 ;
"RTN","BPSRPT1",225,0)
 ;Determine whether claim is Realtime or Backbilled
"RTN","BPSRPT1",226,0)
 ;
"RTN","BPSRPT1",227,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",228,0)
 ; Return Value -> 1 = Backbilled
"RTN","BPSRPT1",229,0)
 ;                 0 = Realtime
"RTN","BPSRPT1",230,0)
RTBCK(BP59) N BB
"RTN","BPSRPT1",231,0)
 S BB=$P($G(^BPST(BP59,12)),U)
"RTN","BPSRPT1",232,0)
 S BB=$S(BB="BB":0,1:1)
"RTN","BPSRPT1",233,0)
 Q BB
"RTN","BPSRPT1",234,0)
 ;
"RTN","BPSRPT1",235,0)
 ;Screen Pause 1
"RTN","BPSRPT1",236,0)
 ;
"RTN","BPSRPT1",237,0)
 ; Return variable - BPQ = 0 Continue
"RTN","BPSRPT1",238,0)
 ;                          2 Quit
"RTN","BPSRPT1",239,0)
PAUSE N X
"RTN","BPSRPT1",240,0)
 U IO(0) W !!,"Press RETURN to continue, '^' to exit:"
"RTN","BPSRPT1",241,0)
 R X:$G(DTIME) S:'$T X="^" S:X["^" BPQ=2
"RTN","BPSRPT1",242,0)
 U IO
"RTN","BPSRPT1",243,0)
 Q
"RTN","BPSRPT1",244,0)
 ;
"RTN","BPSRPT1",245,0)
 ;Screen Pause 2
"RTN","BPSRPT1",246,0)
 ;
"RTN","BPSRPT1",247,0)
 ; Return variable - BPQ = 0 Continue
"RTN","BPSRPT1",248,0)
 ;                         2 Quit
"RTN","BPSRPT1",249,0)
PAUSE2 N X
"RTN","BPSRPT1",250,0)
 U IO(0) W !!,"Press RETURN to continue:"
"RTN","BPSRPT1",251,0)
 R X:$G(DTIME) S:'$T X="^" S:X["^" BPQ=2
"RTN","BPSRPT1",252,0)
 U IO
"RTN","BPSRPT1",253,0)
 Q
"RTN","BPSRPT1",254,0)
 ;
"RTN","BPSRPT1",255,0)
 ;Get ECME#
"RTN","BPSRPT1",256,0)
 ;
"RTN","BPSRPT1",257,0)
 ; Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT1",258,0)
 ; Returned value -> Last 7 digits of ECME#
"RTN","BPSRPT1",259,0)
 ; 
"RTN","BPSRPT1",260,0)
ECMENUM(BP59) N BPY1,BPY2
"RTN","BPSRPT1",261,0)
 S BPY1=(BP59\1),BPY2=$E(BPY1,$L(BPY1)-6,99) ;last 7 digits
"RTN","BPSRPT1",262,0)
 Q BPY2
"RTN","BPSRPT1",263,0)
 ;
"RTN","BPSRPT1",264,0)
 ;Convert FM date or date.time to displayable (mm/dd/yy HH:MM) format
"RTN","BPSRPT1",265,0)
 ;
"RTN","BPSRPT1",266,0)
DATTIM(X) N DATE,BPT,BPM,BPH,BPAP
"RTN","BPSRPT1",267,0)
 S DATE=$S(X:$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3),1:"")
"RTN","BPSRPT1",268,0)
 S BPT=$P(X,".",2) S:$L(BPT)<4 BPT=BPT_$E("0000",1,4-$L(BPT))
"RTN","BPSRPT1",269,0)
 S BPH=$E(BPT,1,2),BPM=$E(BPT,3,4)
"RTN","BPSRPT1",270,0)
 S BPAP="AM" I BPH>12 S BPH=BPH-12,BPAP="PM" S:$L(BPH)<2 BPH="0"_BPH
"RTN","BPSRPT1",271,0)
 I BPT S:'BPH BPH=12 S DATE=DATE_" "_BPH_":"_BPM_BPAP
"RTN","BPSRPT1",272,0)
 Q $G(DATE)
"RTN","BPSRPT1",273,0)
 ;
"RTN","BPSRPT1",274,0)
 ;Display RT-Realtime,BB-Backbill, or " "
"RTN","BPSRPT1",275,0)
 ;
"RTN","BPSRPT1",276,0)
RTBCKNAM(BPINDEX) Q $S(BPINDEX=1:"RT",BPINDEX=0:"BB",1:" ")
"RTN","BPSRPT1",277,0)
 ;
"RTN","BPSRPT1",278,0)
 ;See for Specific Reject Code
"RTN","BPSRPT1",279,0)
 ;
"RTN","BPSRPT1",280,0)
CKREJ(BP59,BPREJCD) N FREJ,I,REJ,X
"RTN","BPSRPT1",281,0)
 S FREJ=0
"RTN","BPSRPT1",282,0)
 S X=$$REJTEXT^BPSRPT2(BP59,.REJ)
"RTN","BPSRPT1",283,0)
 S X="" F  S X=$O(REJ(X)) Q:X=""  D  Q:FREJ=1
"RTN","BPSRPT1",284,0)
 .S REJ=$P($G(REJ(X)),":") Q:REJ=""
"RTN","BPSRPT1",285,0)
 .S I="" F  S I=$O(^BPSF(9002313.93,"B",REJ,I)) Q:I=""  I I=BPREJCD S FREJ=1
"RTN","BPSRPT1",286,0)
 Q FREJ
"RTN","BPSRPT4")
0^40^B69467414
"RTN","BPSRPT4",1,0)
BPSRPT4 ;BHAM ISC/BEE - ECME REPORTS (CONT) ;14-FEB-05
"RTN","BPSRPT4",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8**;JUN 2004;Build 29
"RTN","BPSRPT4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSRPT4",4,0)
 ;
"RTN","BPSRPT4",5,0)
 Q
"RTN","BPSRPT4",6,0)
 ;
"RTN","BPSRPT4",7,0)
 ; Include Rxs - (R)ELEASED or (N)OT RELEASED or (A)LL
"RTN","BPSRPT4",8,0)
 ;
"RTN","BPSRPT4",9,0)
 ;    Input Variable -> DFLT = 3 NOT RELEASED
"RTN","BPSRPT4",10,0)
 ;                             2 RELEASED
"RTN","BPSRPT4",11,0)
 ;                             1 ALL
"RTN","BPSRPT4",12,0)
 ;                          
"RTN","BPSRPT4",13,0)
 ;    Return Value ->   3 = NOT RELEASED
"RTN","BPSRPT4",14,0)
 ;                      2 = RELEASED
"RTN","BPSRPT4",15,0)
 ;                      1 = ALL
"RTN","BPSRPT4",16,0)
 ;                      ^ = Exit
"RTN","BPSRPT4",17,0)
 ;
"RTN","BPSRPT4",18,0)
SELRLNRL(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT4",19,0)
 S DFLT=$S($G(DFLT)=1:"ALL",$G(DFLT)=3:"NOT RELEASED",1:"RELEASED")
"RTN","BPSRPT4",20,0)
 S DIR(0)="S^R:RELEASED;N:NOT RELEASED;A:ALL"
"RTN","BPSRPT4",21,0)
 S DIR("A")="Include Rxs - (R)ELEASED or (N)OT RELEASED or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",22,0)
 D ^DIR
"RTN","BPSRPT4",23,0)
 ;
"RTN","BPSRPT4",24,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",25,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S Y="^"
"RTN","BPSRPT4",26,0)
 ;
"RTN","BPSRPT4",27,0)
 S Y=$S(Y="A":1,Y="R":2,Y="N":3,1:Y)
"RTN","BPSRPT4",28,0)
 ;
"RTN","BPSRPT4",29,0)
 Q Y
"RTN","BPSRPT4",30,0)
 ;
"RTN","BPSRPT4",31,0)
 ; Select to Include (S)pecific Reject Code or (A)ll
"RTN","BPSRPT4",32,0)
 ;
"RTN","BPSRPT4",33,0)
 ; Input Variable -> DFLT = 1 Specific Reject Code
"RTN","BPSRPT4",34,0)
 ;                          0 All Reject Codes
"RTN","BPSRPT4",35,0)
 ;                          
"RTN","BPSRPT4",36,0)
 ; Return Value ->   ptr = pointer to BPS NCPDP REJECT CODES (#9002313.93)
"RTN","BPSRPT4",37,0)
 ;                     0 = All Reject Codes
"RTN","BPSRPT4",38,0)
 ;                     ^ = Exit
"RTN","BPSRPT4",39,0)
 ;
"RTN","BPSRPT4",40,0)
SELREJCD(DFLT) N DIC,DIR,DIRUT,DUOUT,REJ,X,Y
"RTN","BPSRPT4",41,0)
 ;
"RTN","BPSRPT4",42,0)
 S DFLT=$S($G(DFLT)=1:"Specific Reject Code",1:"ALL")
"RTN","BPSRPT4",43,0)
 S DIR(0)="S^S:Specific Reject Code;A:ALL"
"RTN","BPSRPT4",44,0)
 S DIR("A")="Include (S)pecific Reject Code or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",45,0)
 D ^DIR
"RTN","BPSRPT4",46,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT4",47,0)
 S REJ=$S(Y="S":1,Y="A":0,1:Y)
"RTN","BPSRPT4",48,0)
 ;
"RTN","BPSRPT4",49,0)
 ;Check for "^" or timeout
"RTN","BPSRPT4",50,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S (REJ,Y)="^"
"RTN","BPSRPT4",51,0)
 ;
"RTN","BPSRPT4",52,0)
 ;If Specific Reject Code selected, ask prompt
"RTN","BPSRPT4",53,0)
 I $G(REJ)=1 D
"RTN","BPSRPT4",54,0)
 .;
"RTN","BPSRPT4",55,0)
 .;Prompt for entry
"RTN","BPSRPT4",56,0)
 .K X S DIC(0)="QEAM",DIC=9002313.93,DIC("A")="Select Reject Code: "
"RTN","BPSRPT4",57,0)
 .W ! D ^DIC
"RTN","BPSRPT4",58,0)
 .;
"RTN","BPSRPT4",59,0)
 .;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",60,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S (REJ,Y)="^" Q
"RTN","BPSRPT4",61,0)
 .;
"RTN","BPSRPT4",62,0)
 .;If valid entry, setup REJ
"RTN","BPSRPT4",63,0)
 .I +Y>0 S REJ=+Y
"RTN","BPSRPT4",64,0)
 ;
"RTN","BPSRPT4",65,0)
 Q REJ
"RTN","BPSRPT4",66,0)
 ;
"RTN","BPSRPT4",67,0)
 ; Include Auto(R)eversed or (A)LL
"RTN","BPSRPT4",68,0)
 ; 
"RTN","BPSRPT4",69,0)
 ;    Input Variable -> DFLT = 1 AutoReversed
"RTN","BPSRPT4",70,0)
 ;                             0 ALL
"RTN","BPSRPT4",71,0)
 ;                          
"RTN","BPSRPT4",72,0)
 ;    Return Value ->   1 = AutoReversed
"RTN","BPSRPT4",73,0)
 ;                      0 = ALL
"RTN","BPSRPT4",74,0)
 ;                      ^ = Exit
"RTN","BPSRPT4",75,0)
 ;
"RTN","BPSRPT4",76,0)
SELAUREV(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT4",77,0)
 ;
"RTN","BPSRPT4",78,0)
 S DFLT=$S($G(DFLT)=1:"AutoReversed",1:"ALL")
"RTN","BPSRPT4",79,0)
 S DIR(0)="S^R:AutoReversed;A:ALL"
"RTN","BPSRPT4",80,0)
 S DIR("A")="Include Auto(R)eversed or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",81,0)
 D ^DIR
"RTN","BPSRPT4",82,0)
 ;
"RTN","BPSRPT4",83,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",84,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S Y="^"
"RTN","BPSRPT4",85,0)
 ;
"RTN","BPSRPT4",86,0)
 S Y=$S(Y="A":0,Y="R":1,1:Y)
"RTN","BPSRPT4",87,0)
 ;
"RTN","BPSRPT4",88,0)
 Q Y
"RTN","BPSRPT4",89,0)
 ;
"RTN","BPSRPT4",90,0)
 ; Include A(C)cepted or (R)ejected or (A)LL
"RTN","BPSRPT4",91,0)
 ; 
"RTN","BPSRPT4",92,0)
 ;    Input Variable -> DFLT = 2 Accepted
"RTN","BPSRPT4",93,0)
 ;                             1 Rejected
"RTN","BPSRPT4",94,0)
 ;                             0 ALL
"RTN","BPSRPT4",95,0)
 ;                          
"RTN","BPSRPT4",96,0)
 ;    Return Value ->   2 = Accepted
"RTN","BPSRPT4",97,0)
 ;                      1 = Rejected
"RTN","BPSRPT4",98,0)
 ;                      0 = ALL
"RTN","BPSRPT4",99,0)
 ;                      ^ = Exit
"RTN","BPSRPT4",100,0)
 ;
"RTN","BPSRPT4",101,0)
SELACREJ(DFLT) N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT4",102,0)
 ;
"RTN","BPSRPT4",103,0)
 S DFLT=$S($G(DFLT)=2:"Accepted",$G(DFLT)=1:"Rejected",1:"ALL")
"RTN","BPSRPT4",104,0)
 S DIR(0)="S^C:Accepted;R:Rejected;A:ALL"
"RTN","BPSRPT4",105,0)
 S DIR("A")="Include A(C)cepted or (R)ejected or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",106,0)
 D ^DIR
"RTN","BPSRPT4",107,0)
 ;
"RTN","BPSRPT4",108,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",109,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S Y="^"
"RTN","BPSRPT4",110,0)
 ;
"RTN","BPSRPT4",111,0)
 S Y=$S(Y="C":2,Y="R":1,Y="A":0,1:Y)
"RTN","BPSRPT4",112,0)
 ;
"RTN","BPSRPT4",113,0)
 Q Y
"RTN","BPSRPT4",114,0)
 ;
"RTN","BPSRPT4",115,0)
 ; Select to Include (S)pecific Close Claim Reason or (A)ll
"RTN","BPSRPT4",116,0)
 ;
"RTN","BPSRPT4",117,0)
 ; Input Variable -> DFLT = 1 Specific CLAIMS TRACKING NON-BILLABLE REASONS
"RTN","BPSRPT4",118,0)
 ;                          0 All Reasons
"RTN","BPSRPT4",119,0)
 ;                          
"RTN","BPSRPT4",120,0)
 ; Return Value ->   ptr = pointer to CLAIMS TRACKING NON-BILLABLE REASONS (#356.8)
"RTN","BPSRPT4",121,0)
 ;                     0 = All Reasons
"RTN","BPSRPT4",122,0)
 ;                     ^ = Exit
"RTN","BPSRPT4",123,0)
 ;
"RTN","BPSRPT4",124,0)
SELCCRSN(DFLT) N DIC,DIR,DIRUT,DUOUT,RSN,X,Y
"RTN","BPSRPT4",125,0)
 ;
"RTN","BPSRPT4",126,0)
 S DFLT=$S($G(DFLT)=1:"Specific Close Claim Reason",1:"ALL")
"RTN","BPSRPT4",127,0)
 S DIR(0)="S^S:Specific Close Claim Reason;A:ALL"
"RTN","BPSRPT4",128,0)
 S DIR("A")="Include (S)pecific Close Claim Reason or (A)LL",DIR("B")=DFLT
"RTN","BPSRPT4",129,0)
 D ^DIR
"RTN","BPSRPT4",130,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S Y="^"
"RTN","BPSRPT4",131,0)
 S RSN=$S(Y="S":1,Y="A":0,1:Y)
"RTN","BPSRPT4",132,0)
 ;
"RTN","BPSRPT4",133,0)
 ;Check for "^" or timeout
"RTN","BPSRPT4",134,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) S (RSN,Y)="^"
"RTN","BPSRPT4",135,0)
 ;
"RTN","BPSRPT4",136,0)
 ;If Specific Reject Code selected, ask prompt
"RTN","BPSRPT4",137,0)
 I $G(RSN)=1 D
"RTN","BPSRPT4",138,0)
 .;
"RTN","BPSRPT4",139,0)
 .;Prompt for entry
"RTN","BPSRPT4",140,0)
 .K X S DIC(0)="QEAM",DIC=356.8,DIC("A")="Select Close Claim Reason: "
"RTN","BPSRPT4",141,0)
 .W ! D ^DIC
"RTN","BPSRPT4",142,0)
 .;
"RTN","BPSRPT4",143,0)
 .;Check for "^", timeout, or blank entry
"RTN","BPSRPT4",144,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S (RSN,Y)="^" Q
"RTN","BPSRPT4",145,0)
 .;
"RTN","BPSRPT4",146,0)
 .;If valid entry, setup RSN
"RTN","BPSRPT4",147,0)
 .I +Y>0 S RSN=+Y
"RTN","BPSRPT4",148,0)
 ;
"RTN","BPSRPT4",149,0)
 Q RSN
"RTN","BPSRPT4",150,0)
 ;
"RTN","BPSRPT4",151,0)
 ;Pull Selected BPS Pharmacies for Display
"RTN","BPSRPT4",152,0)
 ;
"RTN","BPSRPT4",153,0)
 ;  Input Variables: 
"RTN","BPSRPT4",154,0)
 ;  BPPHARM/BPPHARM(ptr) - Set to 0 for all pharmacies, if set to 1 array of internal
"RTN","BPSRPT4",155,0)
 ;                         pointers of selected pharmacies       
"RTN","BPSRPT4",156,0)
 ;                       - BPLEN = The length of the display field
"RTN","BPSRPT4",157,0)
 ;  Returned value -> List of selected BPS Pharmacies (possibly cut short)                 
"RTN","BPSRPT4",158,0)
 ; 
"RTN","BPSRPT4",159,0)
GETDIVS(BPLEN,BPPHARM) N BPDIV,BPSTR,BPQUIT
"RTN","BPSRPT4",160,0)
 I $G(BPPHARM)=0 S BPSTR="ALL"
"RTN","BPSRPT4",161,0)
 E  D
"RTN","BPSRPT4",162,0)
 .S BPDIV="",BPQUIT=0,BPSTR=""
"RTN","BPSRPT4",163,0)
 .F  S BPDIV=$O(BPPHARM(BPDIV)) Q:+BPDIV=0  D  Q:BPQUIT=1
"RTN","BPSRPT4",164,0)
 .. I $L(BPSTR_$$DIVNAME^BPSSCRDS(BPDIV))>(BPLEN-4) D  S BPQUIT=1 Q
"RTN","BPSRPT4",165,0)
 ... S BPSTR=$$LJ^BPSSCR02(BPSTR_",...",BPLEN)
"RTN","BPSRPT4",166,0)
 .. S BPSTR=BPSTR_$S(BPSTR]"":", ",1:"")_$$DIVNAME^BPSSCRDS(BPDIV)
"RTN","BPSRPT4",167,0)
 Q BPSTR
"RTN","BPSRPT4",168,0)
 ;
"RTN","BPSRPT4",169,0)
 ;Get the Reject Code
"RTN","BPSRPT4",170,0)
 ;
"RTN","BPSRPT4",171,0)
 ; Input variable -> 0 for All Reject Codes or
"RTN","BPSRPT4",172,0)
 ;                   lookup to BPS NCPDP REJECT CODES (#9002313.93)
"RTN","BPSRPT4",173,0)
 ; Returned value -> ALL or the selected Reject Code
"RTN","BPSRPT4",174,0)
 ; 
"RTN","BPSRPT4",175,0)
GETREJ(REJ) ;
"RTN","BPSRPT4",176,0)
 I REJ="0" S REJ="ALL"
"RTN","BPSRPT4",177,0)
 E  S REJ=$P($G(^BPSF(9002313.93,+REJ,0)),U,2)
"RTN","BPSRPT4",178,0)
 Q REJ
"RTN","BPSRPT4",179,0)
 ;
"RTN","BPSRPT4",180,0)
 ;Print Header 2 Line 1
"RTN","BPSRPT4",181,0)
 ;
"RTN","BPSRPT4",182,0)
 ; Input variable: BPRTYPE -> Report Type (1-7)
"RTN","BPSRPT4",183,0)
 ;
"RTN","BPSRPT4",184,0)
HEADLN1(BPRTYPE) ;
"RTN","BPSRPT4",185,0)
 I (",1,2,3,4,5,7,")[BPRTYPE W !,"PATIENT NAME",?27,"Pt.ID",?35,"RX#",?47,"REF/ECME#"
"RTN","BPSRPT4",186,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT4",187,0)
 . W ?68,"DATE"
"RTN","BPSRPT4",188,0)
 . W ?78,$J("$BILLED",10)
"RTN","BPSRPT4",189,0)
 . W ?97,$J("$INS RESPONSE",13)
"RTN","BPSRPT4",190,0)
 . W ?122,$J("$COLLECT",10)
"RTN","BPSRPT4",191,0)
 ;
"RTN","BPSRPT4",192,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT4",193,0)
 . W ?68,"DATE"
"RTN","BPSRPT4",194,0)
 . W ?78,"RELEASED ON"
"RTN","BPSRPT4",195,0)
 . W ?91,"RX INFO"
"RTN","BPSRPT4",196,0)
 . W ?109,"RX COB"
"RTN","BPSRPT4",197,0)
 . W ?116,"OPEN/CLOSED"
"RTN","BPSRPT4",198,0)
 . W ?128,"ELIG"
"RTN","BPSRPT4",199,0)
 ;
"RTN","BPSRPT4",200,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT4",201,0)
 . W ?68,"DATE"
"RTN","BPSRPT4",202,0)
 . W ?100,$J("$BILLED",10)
"RTN","BPSRPT4",203,0)
 . W ?119,$J("$INS RESPONSE",13)
"RTN","BPSRPT4",204,0)
 ;
"RTN","BPSRPT4",205,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT4",206,0)
 . W ?60,"COMPLETED"
"RTN","BPSRPT4",207,0)
 . W ?78,"TRANS TYPE"
"RTN","BPSRPT4",208,0)
 . W ?95,"PAYER RESPONSE"
"RTN","BPSRPT4",209,0)
 . W ?120,"RX COB"
"RTN","BPSRPT4",210,0)
 ;
"RTN","BPSRPT4",211,0)
 I BPRTYPE=6 D  Q
"RTN","BPSRPT4",212,0)
 . W !,?33,$J("AMOUNT",17)
"RTN","BPSRPT4",213,0)
 . W ?51,$J("RETURNED",17)
"RTN","BPSRPT4",214,0)
 . W ?69,$J("RETURNED",17)
"RTN","BPSRPT4",215,0)
 . W ?87,$J("AMOUNT",17)
"RTN","BPSRPT4",216,0)
 ;
"RTN","BPSRPT4",217,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT4",218,0)
 . W ?65,"RX INFO"
"RTN","BPSRPT4",219,0)
 . W ?87,"DRUG"
"RTN","BPSRPT4",220,0)
 . W ?121,"NDC"
"RTN","BPSRPT4",221,0)
 Q
"RTN","BPSRPT4",222,0)
 ;
"RTN","BPSRPT4",223,0)
 ;Print Header 2 Line 2
"RTN","BPSRPT4",224,0)
 ;
"RTN","BPSRPT4",225,0)
 ; Input variable: BPRTYPE -> Report Type (1-7)
"RTN","BPSRPT4",226,0)
 ; 
"RTN","BPSRPT4",227,0)
HEADLN2(BPRTYPE) ;
"RTN","BPSRPT4",228,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT4",229,0)
 . W !,?4,"DRUG"
"RTN","BPSRPT4",230,0)
 . W ?36,"NDC"
"RTN","BPSRPT4",231,0)
 . I BPRTYPE=1 W ?47,"RELEASED ON"
"RTN","BPSRPT4",232,0)
 . W ?68,"RX INFO"
"RTN","BPSRPT4",233,0)
 . I BPRTYPE=4 W ?92,"RX COB"
"RTN","BPSRPT4",234,0)
 . I BPRTYPE=1 W ?115,$J("BILL# RX COB",17)
"RTN","BPSRPT4",235,0)
 ;
"RTN","BPSRPT4",236,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT4",237,0)
 . W !,?3,"CARDHOLD.ID"
"RTN","BPSRPT4",238,0)
 . W ?31,"GROUP ID"
"RTN","BPSRPT4",239,0)
 . W ?41,$J("$BILLED",10)
"RTN","BPSRPT4",240,0)
 . W ?54,"QTY"
"RTN","BPSRPT4",241,0)
 . W ?61,"NDC#"
"RTN","BPSRPT4",242,0)
 . W ?82,"DRUG"
"RTN","BPSRPT4",243,0)
 ;
"RTN","BPSRPT4",244,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT4",245,0)
 . W !,?4,"DRUG"
"RTN","BPSRPT4",246,0)
 . W ?43,"NDC"
"RTN","BPSRPT4",247,0)
 . W ?68,"RX INFO"
"RTN","BPSRPT4",248,0)
 . W ?88,"RX COB"
"RTN","BPSRPT4",249,0)
 ;
"RTN","BPSRPT4",250,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT4",251,0)
 . W !,?4,"DRUG"
"RTN","BPSRPT4",252,0)
 . W ?32,"NDC"
"RTN","BPSRPT4",253,0)
 . W ?47,"RX INFO"
"RTN","BPSRPT4",254,0)
 . W ?69,"INSURANCE"
"RTN","BPSRPT4",255,0)
 . W ?112,"ELAP TIME IN SECONDS"
"RTN","BPSRPT4",256,0)
 ;
"RTN","BPSRPT4",257,0)
 I BPRTYPE=6 D  Q
"RTN","BPSRPT4",258,0)
 .W !,?1,"DATE"
"RTN","BPSRPT4",259,0)
 .W ?15,$J("#CLAIMS",17)
"RTN","BPSRPT4",260,0)
 .W ?33,$J("SUBMITTED",17)
"RTN","BPSRPT4",261,0)
 .W ?51,$J("REJECTED",17)
"RTN","BPSRPT4",262,0)
 .W ?69,$J("PAYABLE",17)
"RTN","BPSRPT4",263,0)
 .W ?87,$J("TO RECEIVE",17)
"RTN","BPSRPT4",264,0)
 .W ?115,$J("DIFFERENCE",17)
"RTN","BPSRPT4",265,0)
 ;
"RTN","BPSRPT4",266,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT4",267,0)
 . W !,?3,"CARDHOLD.ID"
"RTN","BPSRPT4",268,0)
 . W ?31,"GROUP ID"
"RTN","BPSRPT4",269,0)
 . W ?41,"CLOSE DATE/TIME"
"RTN","BPSRPT4",270,0)
 . W ?59,"CLOSED BY"
"RTN","BPSRPT4",271,0)
 . W ?87,"CLOSE REASON"
"RTN","BPSRPT4",272,0)
 . W ?121,"RX COB"
"RTN","BPSRPT4",273,0)
 Q
"RTN","BPSRPT4",274,0)
 ;
"RTN","BPSRPT4",275,0)
 ;Print Header 2 Line 3
"RTN","BPSRPT4",276,0)
 ;
"RTN","BPSRPT4",277,0)
 ; Input variable: BPRTYPE -> Report Type (1-7)
"RTN","BPSRPT4",278,0)
 ; 
"RTN","BPSRPT4",279,0)
HEADLN3(BPTYP) ;
"RTN","BPSRPT4",280,0)
 D:BPTYP=4
"RTN","BPSRPT4",281,0)
 . W !,?6,"RELEASED ON"
"RTN","BPSRPT4",282,0)
 . W ?22,"REVERSAL METHOD/RETURN STATUS/REASON"
"RTN","BPSRPT4",283,0)
 Q
"RTN","BPSRPT4",284,0)
 ;
"RTN","BPSRPT4",285,0)
SELEXCEL() ; - Returns whether to capture data for Excel report.
"RTN","BPSRPT4",286,0)
 ; Output: EXCEL = 1 - YES (capture data) / 0 - NO (DO NOT capture data)
"RTN","BPSRPT4",287,0)
 ;
"RTN","BPSRPT4",288,0)
 N EXCEL,DIR,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","BPSRPT4",289,0)
 ;
"RTN","BPSRPT4",290,0)
 S DIR(0)="Y",DIR("B")="NO",DIR("T")=DTIME W !
"RTN","BPSRPT4",291,0)
 S DIR("A")="Do you want to capture report data for an Excel document"
"RTN","BPSRPT4",292,0)
 S DIR("?")="^D HEXC^BPSRPT4"
"RTN","BPSRPT4",293,0)
 D ^DIR K DIR I $D(DIRUT)!$D(DTOUT)!$D(DUOUT)!$D(DIROUT) Q "^"
"RTN","BPSRPT4",294,0)
 K DIROUT,DTOUT,DUOUT,DIRUT
"RTN","BPSRPT4",295,0)
 S EXCEL=0 I Y S EXCEL=1
"RTN","BPSRPT4",296,0)
 ;
"RTN","BPSRPT4",297,0)
 ;Display Excel display message
"RTN","BPSRPT4",298,0)
 I EXCEL=1 D EXMSG
"RTN","BPSRPT4",299,0)
 ;
"RTN","BPSRPT4",300,0)
 Q EXCEL
"RTN","BPSRPT4",301,0)
 ;
"RTN","BPSRPT4",302,0)
HEXC ; - 'Do you want to capture data...' prompt
"RTN","BPSRPT4",303,0)
 W !!,"      Enter:  'Y'    -  To capture detail report data to transfer"
"RTN","BPSRPT4",304,0)
 W !,"                        to an Excel document"
"RTN","BPSRPT4",305,0)
 W !,"              '<CR>' -  To skip this option"
"RTN","BPSRPT4",306,0)
 W !,"              '^'    -  To quit this option"
"RTN","BPSRPT4",307,0)
 Q
"RTN","BPSRPT4",308,0)
 ;
"RTN","BPSRPT4",309,0)
 ;Display the message about capturing to an Excel file format
"RTN","BPSRPT4",310,0)
 ; 
"RTN","BPSRPT4",311,0)
EXMSG ;
"RTN","BPSRPT4",312,0)
 W !!?5,"Before continuing, please set up your terminal to capture the"
"RTN","BPSRPT4",313,0)
 W !?5,"detail report data. On some terminals, this can  be  done  by"
"RTN","BPSRPT4",314,0)
 W !?5,"clicking  on the 'Tools' menu above, then click  on  'Capture"
"RTN","BPSRPT4",315,0)
 W !?5,"Incoming  Data' to save to  Desktop. This  report  may take a"
"RTN","BPSRPT4",316,0)
 W !?5,"while to run."
"RTN","BPSRPT4",317,0)
 W !!?5,"Note: To avoid  undesired  wrapping of the data  saved to the"
"RTN","BPSRPT4",318,0)
 W !?5,"      file, please enter '0;256;999' at the 'DEVICE:' prompt.",!
"RTN","BPSRPT4",319,0)
 Q
"RTN","BPSRPT5")
0^42^B79661218
"RTN","BPSRPT5",1,0)
BPSRPT5 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT5",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8**;JUN 2004;Build 29
"RTN","BPSRPT5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSRPT5",4,0)
 ;
"RTN","BPSRPT5",5,0)
 ;Routine to Display the Reports
"RTN","BPSRPT5",6,0)
 ;
"RTN","BPSRPT5",7,0)
 ;Print Report Line 1
"RTN","BPSRPT5",8,0)
WRLINE1(BPRTYPE,BPREC,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT,BPBIL,BPINS,BPCOLL,BPEXCEL,BPPSEQ) ;
"RTN","BPSRPT5",9,0)
 ;Excel Output
"RTN","BPSRPT5",10,0)
 I $G(BPEXCEL) D WRLINE1^BPSRPT8(BPRTYPE,.BPREC,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT,BPBIL,BPINS,BPCOLL,BPPSEQ) Q
"RTN","BPSRPT5",11,0)
 ;Report Output
"RTN","BPSRPT5",12,0)
 W !,$$PATNAME^BPSRPT6(BPDFN)
"RTN","BPSRPT5",13,0)
 W ?27,"("_$$SSN4^BPSRPT6(BPDFN)_")"
"RTN","BPSRPT5",14,0)
 W ?35,$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)
"RTN","BPSRPT5",15,0)
 W ?47,BPREF,"/",$$ECMENUM^BPSRPT1($P(BPX,U,3))
"RTN","BPSRPT5",16,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT5",17,0)
 . W ?68,$$DATTIM^BPSRPT1(BPSRTDT)
"RTN","BPSRPT5",18,0)
 . W ?78,$J(BPBIL,10,2),?100,$J(BPINS,10,2),?122,$S(BPCOLL]"":$J(BPCOLL,10,2),1:"")
"RTN","BPSRPT5",19,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT5",20,0)
 . W ?68,$$DATTIM^BPSRPT1(BPSRTDT)
"RTN","BPSRPT5",21,0)
 . W ?78,$$DATTIM^BPSRPT1(+BPX)
"RTN","BPSRPT5",22,0)
 . W ?91,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",23,0)
 . W ?94,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",24,0)
 . W ?98,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",25,0)
 . W ?101,$S($P(BPX,U):"/RL",1:"/NR")
"RTN","BPSRPT5",26,0)
 . W ?109,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",27,0)
 . W ?116,$S($$CLOSED02^BPSSCR03($P(^BPST($P(BPX,U,3),0),U,4))=1:"Closed",1:"Open")
"RTN","BPSRPT5",28,0)
 . W ?128,$S($$ELIGCODE^BPSSCR05($P(BPX,U,3))="V":"Vet",$$ELIGCODE^BPSSCR05($P(BPX,U,3))="T":"Tri",1:"UNK")
"RTN","BPSRPT5",29,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT5",30,0)
 . W ?68,$$DATTIM^BPSRPT1(BPSRTDT)
"RTN","BPSRPT5",31,0)
 . W ?100,$J(BPBIL,10,2),?122,$J(BPINS,10,2)
"RTN","BPSRPT5",32,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT5",33,0)
 . W ?60,$$DATTIM^BPSRPT1($$TRANDT^BPSRPT2($P(BPX,U,3),1))
"RTN","BPSRPT5",34,0)
 . W ?78,$$TTYPE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)
"RTN","BPSRPT5",35,0)
 . W ?95,$$RESPONSE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)
"RTN","BPSRPT5",36,0)
 . W ?120,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",37,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT5",38,0)
 . W ?65,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",39,0)
 . W ?68,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",40,0)
 . W ?72,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",41,0)
 . W ?75,$S($P(BPX,U):"/RL",1:"/NR")
"RTN","BPSRPT5",42,0)
 . W ?79,$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT5",43,0)
 . W ?87,$$DRGNAM^BPSRPT6($P(BPX,U,14),30)
"RTN","BPSRPT5",44,0)
 . W ?118,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",45,0)
 Q
"RTN","BPSRPT5",46,0)
 ;
"RTN","BPSRPT5",47,0)
 ;Print Report Line 2
"RTN","BPSRPT5",48,0)
WRLINE2(BPRTYPE,BPREC,BPX,BPRX,BPREF,BPBIL,BPGRPLAN,BPEXCEL,BPICNT,BPPSEQ) ;
"RTN","BPSRPT5",49,0)
 ;Excel Output
"RTN","BPSRPT5",50,0)
 I $G(BPEXCEL) D WRLINE2^BPSRPT8(BPRTYPE,.BPREC,BPX,BPRX,BPREF,BPBIL,BPGRPLAN,BPPSEQ) Q
"RTN","BPSRPT5",51,0)
 ;Report Output
"RTN","BPSRPT5",52,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT5",53,0)
 . W !,?4,$$DRGNAM^BPSRPT6($P(BPX,U,14),27),?32,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",54,0)
 . I BPRTYPE=1 W ?47,$$DATTIM^BPSRPT1(+BPX)
"RTN","BPSRPT5",55,0)
 . W ?68,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",56,0)
 . W ?71,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",57,0)
 . W ?75,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",58,0)
 . W ?78,$S($P(BPX,U):"/RL",1:"/NR")
"RTN","BPSRPT5",59,0)
 . W ?82,$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT5",60,0)
 . I BPRTYPE=4 W ?92,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",61,0)
 . I BPRTYPE=1 W ?115,$$BILLCOB(BPRX,BPREF,BPPSEQ)
"RTN","BPSRPT5",62,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT5",63,0)
 . W !,?3,$E($$CRDHLDID^BPSRPT2(+$P(BPX,U,3)),3,23)
"RTN","BPSRPT5",64,0)
 . W ?31,$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)
"RTN","BPSRPT5",65,0)
 . W ?41,$J(BPBIL,10,2)
"RTN","BPSRPT5",66,0)
 . W ?54,$$QTY^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",67,0)
 . W ?61,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",68,0)
 . W ?82,$$DRGNAM^BPSRPT6($P(BPX,U,14),32)
"RTN","BPSRPT5",69,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT5",70,0)
 . W !,?4,$$DRGNAM^BPSRPT6($P(BPX,U,14),32)
"RTN","BPSRPT5",71,0)
 . W ?41,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",72,0)
 . W ?68,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",73,0)
 . W ?71,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",74,0)
 . W ?74,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",75,0)
 . W ?77,$S($P(BPX,U):"/RL",1:"/NR")
"RTN","BPSRPT5",76,0)
 . W ?81,$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT5",77,0)
 . W ?88,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",78,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT5",79,0)
 . W !,?4,$$DRGNAM^BPSRPT6($P(BPX,U,14),23)
"RTN","BPSRPT5",80,0)
 . W ?28,$$GETNDC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",81,0)
 . W ?47,$$MWC^BPSRPT6(BPRX,BPREF)
"RTN","BPSRPT5",82,0)
 . W ?50,$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))
"RTN","BPSRPT5",83,0)
 . W ?53,$$RXSTATUS^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",84,0)
 . W ?56,$S($P(BPX,U):"/RL",1:"/NR")
"RTN","BPSRPT5",85,0)
 . W ?60,$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT5",86,0)
 . I $P(BPGRPLAN,U,2)]"" W ?69,$E($P(BPGRPLAN,U,2),1,30)
"RTN","BPSRPT5",87,0)
 . W ?122,$J($$ELAPSE^BPSRPT6($P(BPX,U,3)),10)
"RTN","BPSRPT5",88,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT5",89,0)
 . W !,?3,$E($$CRDHLDID^BPSRPT2(+$P(BPX,U,3)),3,23)
"RTN","BPSRPT5",90,0)
 . W ?31,$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)
"RTN","BPSRPT5",91,0)
 . W ?41,$$DATTIM^BPSRPT1(+$$CLOSEDT^BPSRPT2(+$P(BPX,U,3)))
"RTN","BPSRPT5",92,0)
 . N BPCLBY S BPCLBY=$E($$CLSBY^BPSRPT6(+$P(BPX,U,3)),1,25) S:BPCLBY="" BPCLBY="BLANK"
"RTN","BPSRPT5",93,0)
 . W ?59,BPCLBY S BPCNT(BPCLBY)=$G(BPCNT(BPCLBY))+1,BPGCNT(BPCLBY)=$G(BPGCNT(BPCLBY))+1,BPICNT(BPCLBY)=$G(BPICNT(BPCLBY))+1
"RTN","BPSRPT5",94,0)
 . W ?87,$E($P($$CLRSN^BPSRPT7(+$P(BPX,U,3)),U,2),1,30)
"RTN","BPSRPT5",95,0)
 . W ?121,$$RXCOB^BPSRPT8(BPPSEQ)
"RTN","BPSRPT5",96,0)
 Q
"RTN","BPSRPT5",97,0)
 ;
"RTN","BPSRPT5",98,0)
 ;Print Report Line 3
"RTN","BPSRPT5",99,0)
WRLINE3(BPRTYPE,BPREC,BPX,BPEXCEL) N BP59
"RTN","BPSRPT5",100,0)
 S BP59=+$P(BPX,U,3)
"RTN","BPSRPT5",101,0)
 ;Excel Output
"RTN","BPSRPT5",102,0)
 I $G(BPEXCEL) D WRLINE3^BPSRPT8(BPRTYPE,.BPREC,BPX) Q
"RTN","BPSRPT5",103,0)
 ;Report Output
"RTN","BPSRPT5",104,0)
 I BPRTYPE=4 D
"RTN","BPSRPT5",105,0)
 . S NP=$$CHKP(1) Q:BPQ
"RTN","BPSRPT5",106,0)
 . ;Released On
"RTN","BPSRPT5",107,0)
 . W !,?6,$$DATTIM^BPSRPT1(+BPX)
"RTN","BPSRPT5",108,0)
 . ;Method
"RTN","BPSRPT5",109,0)
 . I $$AUTOREV^BPSRPT1(BP59) W ?22,"AUTO/"
"RTN","BPSRPT5",110,0)
 . E  W ?22,"REGULAR/"
"RTN","BPSRPT5",111,0)
 . ;Return Status
"RTN","BPSRPT5",112,0)
 . I $P(BPX,U,15)["ACCEPTED" W "ACCEPTED/"
"RTN","BPSRPT5",113,0)
 . E  W "REJECTED/"
"RTN","BPSRPT5",114,0)
 . ;Reason
"RTN","BPSRPT5",115,0)
 . W $$RVSRSN^BPSRPT7(+$P(BPX,U,3))
"RTN","BPSRPT5",116,0)
 Q
"RTN","BPSRPT5",117,0)
 ;
"RTN","BPSRPT5",118,0)
 ;Display the Report
"RTN","BPSRPT5",119,0)
REPORT(REF,BPEXCEL,BPSCR,BPRPTNAM,BPSUMDET,BPPAGE) ;
"RTN","BPSRPT5",120,0)
 N BPBIL,BPBLINE,BPCOLL,BPDFN,BPDIV,BPELTM,BPGELTM,BPGBIL,BPGINS,BPGCOLL,BPGCNT,BPGRPLAN,BPINS,BPLINES,BPREC,BPREF,BPRX,BPSRTDT,BPSTATUS,BPTBIL,BPTCOLL,BPTINS,BPX,BPSGTOT,NP,BPSDATA
"RTN","BPSRPT5",121,0)
 N BPPSEQ,BPBILINF
"RTN","BPSRPT5",122,0)
 I '$D(@REF) D HDR^BPSRPT7(BPRTYPE,BPRPTNAM,.BPPAGE) W !,"No data meets the criteria." G XREPORT
"RTN","BPSRPT5",123,0)
 S (BPGBIL,BPGINS,BPGCOLL,BPGCNT,BPGELTM)=0
"RTN","BPSRPT5",124,0)
 S BPDIV="" F  S BPDIV=$O(@REF@(BPDIV)) Q:BPDIV=""  D  Q:BPQ
"RTN","BPSRPT5",125,0)
 .S BPGRPLAN=0 D HDR^BPSRPT7(BPRTYPE,BPRPTNAM,.BPPAGE)
"RTN","BPSRPT5",126,0)
 .N BPCNT S (BPTBIL,BPTINS,BPTCOLL,BPCNT,BPELTM)=0
"RTN","BPSRPT5",127,0)
 .F  S BPGRPLAN=$O(@REF@(BPDIV,BPGRPLAN)) Q:BPGRPLAN=""  D  Q:BPQ
"RTN","BPSRPT5",128,0)
 .. I BPSUMDET=0 D WRPLAN(BPGRPLAN) Q:BPQ
"RTN","BPSRPT5",129,0)
 .. S BPBLINE=""  ;Reset Blank Line Indicator
"RTN","BPSRPT5",130,0)
 .. N BPSCLM,BPREC,BPTOT,BPIBIL,BPICNT,BPICOL,BPIINS
"RTN","BPSRPT5",131,0)
 .. S (BPIBIL,BPICNT,BPICOL,BPIINS)=0
"RTN","BPSRPT5",132,0)
 .. S BPDFN="" F  S BPDFN=$O(@REF@(BPDIV,BPGRPLAN,BPDFN)) Q:BPDFN=""  D  Q:BPQ
"RTN","BPSRPT5",133,0)
 ... S BPSRTDT="" F  S BPSRTDT=$O(@REF@(BPDIV,BPGRPLAN,BPDFN,BPSRTDT)) Q:BPSRTDT=""  D  Q:BPQ
"RTN","BPSRPT5",134,0)
 .... S BPRX="" F  S BPRX=$O(@REF@(BPDIV,BPGRPLAN,BPDFN,BPSRTDT,BPRX)) Q:BPRX=""  D  Q:BPQ
"RTN","BPSRPT5",135,0)
 ..... S BPREF="" F  S BPREF=$O(@REF@(BPDIV,BPGRPLAN,BPDFN,BPSRTDT,BPRX,BPREF)) Q:BPREF=""  D  Q:BPQ
"RTN","BPSRPT5",136,0)
 ...... S BPX=@REF@(BPDIV,BPGRPLAN,BPDFN,BPSRTDT,BPRX,BPREF)
"RTN","BPSRPT5",137,0)
 ...... S BPCNT=BPCNT+1,BPGCNT=BPGCNT+1,BPICNT=BPICNT+1
"RTN","BPSRPT5",138,0)
 ...... S BPPSEQ=$$COB59^BPSUTIL2($P(BPX,U,3))
"RTN","BPSRPT5",139,0)
 ...... I BPRTYPE=5 D
"RTN","BPSRPT5",140,0)
 ....... S BPELTM=BPELTM+$$ELAPSE^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",141,0)
 ....... S BPGELTM=BPGELTM+$$ELAPSE^BPSRPT6($P(BPX,U,3))
"RTN","BPSRPT5",142,0)
 ...... S BPBILINF=$$COLLECTD^BPSRPT6(BPRX,BPREF,BPPSEQ)
"RTN","BPSRPT5",143,0)
 ...... S BPBIL=$$BILLED^BPSRPT7($P(BPX,U,3)),BPTBIL=BPTBIL+BPBIL,BPGBIL=BPGBIL+BPBIL,BPIBIL=BPIBIL+BPBIL
"RTN","BPSRPT5",144,0)
 ...... S BPINS=$$INSPAID^BPSRPT2($P(BPX,U,3)),BPTINS=BPTINS+BPINS,BPGINS=BPGINS+BPINS,BPIINS=BPIINS+BPINS
"RTN","BPSRPT5",145,0)
 ...... S BPCOLL=+BPBILINF,BPTCOLL=BPTCOLL+BPCOLL,BPGCOLL=BPGCOLL+BPCOLL,BPICOL=BPICOL+BPCOLL
"RTN","BPSRPT5",146,0)
 ...... I BPRTYPE=6 D  Q
"RTN","BPSRPT5",147,0)
 .......S BPSTATUS=$P(BPX,U,7)
"RTN","BPSRPT5",148,0)
 .......I BPSTATUS["REJECT" S $P(BPSCLM(BPSRTDT),U,3)=$P($G(BPSCLM(BPSRTDT)),U,3)+BPBIL
"RTN","BPSRPT5",149,0)
 .......I BPSTATUS["PAYABLE" S $P(BPSCLM(BPSRTDT),U,4)=$P($G(BPSCLM(BPSRTDT)),U,4)+BPBIL
"RTN","BPSRPT5",150,0)
 .......S $P(BPSCLM(BPSRTDT),U,2)=$P($G(BPSCLM(BPSRTDT)),U,2)+BPBIL
"RTN","BPSRPT5",151,0)
 .......S $P(BPSCLM(BPSRTDT),U,5)=$P($G(BPSCLM(BPSRTDT)),U,5)+BPINS
"RTN","BPSRPT5",152,0)
 .......S $P(BPSCLM(BPSRTDT),U)=$P($G(BPSCLM(BPSRTDT)),U)+1
"RTN","BPSRPT5",153,0)
 ...... ;
"RTN","BPSRPT5",154,0)
 ...... ;Display Detail Section
"RTN","BPSRPT5",155,0)
 ...... Q:BPSUMDET=1
"RTN","BPSRPT5",156,0)
 ...... S BPREC=""  ;Reset Excel Display Variable
"RTN","BPSRPT5",157,0)
 ...... I 'BPEXCEL,BPRTYPE=1,BPBLINE=1 S NP=$$CHKP(2) Q:BPQ  I BPBLINE=1 W !  ;Print blank line
"RTN","BPSRPT5",158,0)
 ...... S NP=$$CHKP(1) Q:BPQ  D WRLINE1(BPRTYPE,.BPREC,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT,BPBIL,BPINS,BPCOLL,BPEXCEL,BPPSEQ)
"RTN","BPSRPT5",159,0)
 ...... S NP=$$CHKP(1) Q:BPQ  D WRLINE2(BPRTYPE,.BPREC,BPX,BPRX,BPREF,BPBIL,BPGRPLAN,BPEXCEL,.BPICNT,BPPSEQ)
"RTN","BPSRPT5",160,0)
 ...... D WRLINE3(BPRTYPE,.BPREC,BPX,BPEXCEL)
"RTN","BPSRPT5",161,0)
 ...... I (",2,7,")[BPRTYPE,'BPEXCEL D  Q:BPQ
"RTN","BPSRPT5",162,0)
 ....... D COMMENT(+$P(BPX,U,3)) Q:BPQ
"RTN","BPSRPT5",163,0)
 ....... S NP=$$CHKP(1) Q:BPQ
"RTN","BPSRPT5",164,0)
 ....... W !,?10,"Claim ID: ",$$CLAIMID^BPSRPT2(+$P(BPX,U,3))
"RTN","BPSRPT5",165,0)
 ....... N BPSARR,BPRJCNT,BPZZ S BPRJCNT=$$REJTEXT^BPSRPT2(+$P(BPX,U,3),.BPSARR)
"RTN","BPSRPT5",166,0)
 ....... F BPZZ=1:1:BPRJCNT S NP=$$CHKP(1) Q:BPQ  W !,?10,BPSARR(BPZZ) Q:BPQ
"RTN","BPSRPT5",167,0)
 ...... I 'BPEXCEL,BPRTYPE=1 S BPBLINE=1  ;Set Blank Line Display Indicator
"RTN","BPSRPT5",168,0)
 .. I BPRTYPE=6 D PTBDT^BPSRPT7(BPDIV,BPSUMDET,.BPSCLM,.BPSGTOT)
"RTN","BPSRPT5",169,0)
 .. I 'BPQ,(",1,2,3,4,7,")[BPRTYPE,'BPEXCEL S NP=$$CHKP(5) Q:BPQ  D ITOT^BPSRPT8(BPRTYPE,BPDIV,BPGRPLAN,BPIBIL,BPIINS,BPICOL,.BPICNT)
"RTN","BPSRPT5",170,0)
 .I 'BPEXCEL,'BPQ,BPRTYPE'=6 S NP=$$CHKP(5) Q:BPQ  D TOTALS^BPSRPT7(BPRTYPE,BPDIV,BPTBIL,BPTINS,BPTCOLL,.BPCNT,BPELTM)
"RTN","BPSRPT5",171,0)
 .I 'BPEXCEL,'BPQ,$O(@REF@(BPDIV))]"" D:$G(BPSCR) PAUSE^BPSRPT1 Q:BPQ
"RTN","BPSRPT5",172,0)
 ;Print Grand Totals
"RTN","BPSRPT5",173,0)
 I 'BPEXCEL D
"RTN","BPSRPT5",174,0)
 .I 'BPQ,BPRTYPE=6 D PGTOT6^BPSRPT7($G(BPSGTOT))
"RTN","BPSRPT5",175,0)
 .I 'BPQ,BPRTYPE'=6 S NP=$$CHKP(5) Q:BPQ  D PGTOT^BPSRPT7(BPRTYPE,BPGBIL,BPGINS,BPGCOLL,.BPGCNT,BPGELTM)
"RTN","BPSRPT5",176,0)
 ;
"RTN","BPSRPT5",177,0)
XREPORT Q
"RTN","BPSRPT5",178,0)
 ;
"RTN","BPSRPT5",179,0)
 ;Display Comments
"RTN","BPSRPT5",180,0)
 ;Input Variable: BP59 - Lookup to BPS TRANSACTION (#59)
"RTN","BPSRPT5",181,0)
COMMENT(BP59) N CNODE,I,J,NP
"RTN","BPSRPT5",182,0)
 S I="" F  S I=$O(^BPST(BP59,11,"B",I),-1) Q:'I  D  Q:BPQ
"RTN","BPSRPT5",183,0)
 .S NP=$$CHKP(1) Q:BPQ
"RTN","BPSRPT5",184,0)
 .S J=$O(^BPST(BP59,11,"B",I,"")) Q:J=""
"RTN","BPSRPT5",185,0)
 .S CNODE=$G(^BPST(BP59,11,J,0))
"RTN","BPSRPT5",186,0)
 .W !,?10,$$DATTIM^BPSRPT1(+$P($P(CNODE,U),"."))," - ",$P(CNODE,U,3)
"RTN","BPSRPT5",187,0)
 Q
"RTN","BPSRPT5",188,0)
 ;
"RTN","BPSRPT5",189,0)
 ;Display the Insurance
"RTN","BPSRPT5",190,0)
 ; Input Variable -> BPSDATA -> if 0, skip page check
"RTN","BPSRPT5",191,0)
 ;                   BPEXCEL -> 1 - Print to Excel/0 Regular Display
"RTN","BPSRPT5",192,0)
WRPLAN(BPGRPLAN) N INS,NP
"RTN","BPSRPT5",193,0)
 ;
"RTN","BPSRPT5",194,0)
 I BPSUMDET'=0 Q
"RTN","BPSRPT5",195,0)
 I BPEXCEL Q
"RTN","BPSRPT5",196,0)
 ;Skip for Recent Transactions and Totals by Date Reports
"RTN","BPSRPT5",197,0)
 I BPRTYPE=5!(BPRTYPE=6) Q
"RTN","BPSRPT5",198,0)
 I $G(BPSDATA) S NP=$$CHKP(5) Q:BPQ!NP
"RTN","BPSRPT5",199,0)
 ;Get and display the Insurance Name
"RTN","BPSRPT5",200,0)
 S INS=$E(BPGRPLAN,1,90)
"RTN","BPSRPT5",201,0)
 I INS]"" D
"RTN","BPSRPT5",202,0)
 .D ULINE("-")
"RTN","BPSRPT5",203,0)
 .W !,INS
"RTN","BPSRPT5",204,0)
 .D ULINE("-")
"RTN","BPSRPT5",205,0)
 Q
"RTN","BPSRPT5",206,0)
 ;
"RTN","BPSRPT5",207,0)
 ;Check for End of Page
"RTN","BPSRPT5",208,0)
 ; Input variables -> BPLINES -> Number of lines from bottom
"RTN","BPSRPT5",209,0)
 ;                    BPEXCEL -> 1 - Print to Excel/0 Regular Display
"RTN","BPSRPT5",210,0)
 ; Output variable -> BPSDATA -> 0 -> New screen, no data displayed yet
"RTN","BPSRPT5",211,0)
 ;                               1 -> Data displayed on current screen
"RTN","BPSRPT5",212,0)
CHKP(BPLINES) Q:$G(BPEXCEL) 0
"RTN","BPSRPT5",213,0)
 S BPLINES=BPLINES+1
"RTN","BPSRPT5",214,0)
 I $G(BPSCR) S BPLINES=BPLINES+2
"RTN","BPSRPT5",215,0)
 I $G(BPSCR),'$G(BPSDATA) S BPSDATA=1 Q 0
"RTN","BPSRPT5",216,0)
 S BPSDATA=1
"RTN","BPSRPT5",217,0)
 I $Y>(IOSL-BPLINES) D:$G(BPSCR) PAUSE^BPSRPT1 Q:$G(BPQ) 0 D HDR^BPSRPT7(BPRTYPE,BPRPTNAM,.BPPAGE) Q 1
"RTN","BPSRPT5",218,0)
 Q 0
"RTN","BPSRPT5",219,0)
 ;
"RTN","BPSRPT5",220,0)
 ;Print one line of characters
"RTN","BPSRPT5",221,0)
ULINE(X) N I
"RTN","BPSRPT5",222,0)
 W ! F I=1:1:132 W $G(X,"-")
"RTN","BPSRPT5",223,0)
 Q
"RTN","BPSRPT5",224,0)
BILLCOB(BPRX,BPREF,BPPSEQ) ;
"RTN","BPSRPT5",225,0)
 N BPSBILL
"RTN","BPSRPT5",226,0)
 S BPSBILL=$$BILL^BPSRPT6(BPRX,BPREF,BPPSEQ)
"RTN","BPSRPT5",227,0)
 I BPSBILL="" Q ""
"RTN","BPSRPT5",228,0)
 Q $J(BPSBILL_"  "_$$RXCOB^BPSRPT8(BPPSEQ)_"  ",17)
"RTN","BPSRPT5",229,0)
 ;
"RTN","BPSRPT6")
0^43^B66218478
"RTN","BPSRPT6",1,0)
BPSRPT6 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT6",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8**;JUN 2004;Build 29
"RTN","BPSRPT6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSRPT6",4,0)
 ;
"RTN","BPSRPT6",5,0)
 Q
"RTN","BPSRPT6",6,0)
 ;
"RTN","BPSRPT6",7,0)
 ;Get the Insurance Company pointer and name
"RTN","BPSRPT6",8,0)
 ;
"RTN","BPSRPT6",9,0)
 ; Returned Value -> ptr^Insurance Company Name
"RTN","BPSRPT6",10,0)
 ; 
"RTN","BPSRPT6",11,0)
INSNAM(BP59) N BPIN,BPDOS,BPDFN,BPSZZ,BP36,BPX,BPINAME,BPIBA,BP36IEN
"RTN","BPSRPT6",12,0)
 ;
"RTN","BPSRPT6",13,0)
 ;Reset Insurance
"RTN","BPSRPT6",14,0)
 S BP36=""
"RTN","BPSRPT6",15,0)
 ;
"RTN","BPSRPT6",16,0)
 ;First Pull From BPS Transactions
"RTN","BPSRPT6",17,0)
 S BPIN=+$P($G(^BPST(BP59,9)),U)
"RTN","BPSRPT6",18,0)
 I +BPIN D
"RTN","BPSRPT6",19,0)
 . S BPINAME=$P($G(^BPST(BP59,10,BPIN,0)),U,7)
"RTN","BPSRPT6",20,0)
 . S BPIBA=$P($G(^BPST(BP59,10,BPIN,0)),U,1)
"RTN","BPSRPT6",21,0)
 . S BP36IEN=$$INSPL^IBNCPDPI(BPIBA)
"RTN","BPSRPT6",22,0)
 . S:BP36IEN]""&BPINAME]"" BP36=BP36IEN_"^"_BPINAME
"RTN","BPSRPT6",23,0)
 ;If Not Found, look up using API
"RTN","BPSRPT6",24,0)
 I BP36="" D
"RTN","BPSRPT6",25,0)
 .S BPDOS=+$P($G(^BPST(BP59,12)),U,2)\1
"RTN","BPSRPT6",26,0)
 .I BPDOS=0 S BPDOS=+$P($G(^BPST(BP59,0)),U,8)\1
"RTN","BPSRPT6",27,0)
 .S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSRPT6",28,0)
 .S BPX=$$INSUR^IBBAPI(BPDFN,BPDOS,,.BPSZZ,"1")
"RTN","BPSRPT6",29,0)
 .S BP36=$G(BPSZZ("IBBAPI","INSUR",1,1))
"RTN","BPSRPT6",30,0)
 ;
"RTN","BPSRPT6",31,0)
 ;If Not Found, put in MISSING INSURANCE
"RTN","BPSRPT6",32,0)
 I $TR(BP36,U)="" S BP36=" ^**MISSING INSURANCE**"
"RTN","BPSRPT6",33,0)
 ;
"RTN","BPSRPT6",34,0)
 Q BP36
"RTN","BPSRPT6",35,0)
 ;
"RTN","BPSRPT6",36,0)
 ;Select an Insurance Company file entry (Fileman Lookup)
"RTN","BPSRPT6",37,0)
 ;
"RTN","BPSRPT6",38,0)
 ; Returned value -> Insurance Company Name
"RTN","BPSRPT6",39,0)
 ; 
"RTN","BPSRPT6",40,0)
SELINS() N INS
"RTN","BPSRPT6",41,0)
 S INS=$$SELINSUR^IBNCPDPI("Select Insurance","")
"RTN","BPSRPT6",42,0)
 I $P(INS,U)=-1 S INS="^"
"RTN","BPSRPT6",43,0)
 E  S INS=$P(INS,U,2)
"RTN","BPSRPT6",44,0)
 Q INS
"RTN","BPSRPT6",45,0)
 ;
"RTN","BPSRPT6",46,0)
 ;Get the drug name for display
"RTN","BPSRPT6",47,0)
 ;
"RTN","BPSRPT6",48,0)
 ; Input variable ->  BP50 - Lookup to DRUG (#50)
"RTN","BPSRPT6",49,0)
 ;                   BPLEN - Length of the display field
"RTN","BPSRPT6",50,0)
 ; Returned value -> Name of the drug
"RTN","BPSRPT6",51,0)
 ; 
"RTN","BPSRPT6",52,0)
DRGNAM(BP50,BPLEN) Q $E($$DRUGDIE^BPSUTIL1(+BP50,.01,"E"),1,BPLEN)
"RTN","BPSRPT6",53,0)
 ;       
"RTN","BPSRPT6",54,0)
 ;Select a DRUG file entry (Fileman Lookup)
"RTN","BPSRPT6",55,0)
 ;
"RTN","BPSRPT6",56,0)
 ; Returned Variable -> Y
"RTN","BPSRPT6",57,0)
 ; 
"RTN","BPSRPT6",58,0)
SELDRG N DIC S DIC(0)="QEAM",DIC=50,DIC("A")="Select Drug: "
"RTN","BPSRPT6",59,0)
 D DRUGDIC^BPSUTIL1(.DIC)
"RTN","BPSRPT6",60,0)
 Q
"RTN","BPSRPT6",61,0)
 ;
"RTN","BPSRPT6",62,0)
 ;Get the drug class for display
"RTN","BPSRPT6",63,0)
 ;
"RTN","BPSRPT6",64,0)
 ; Input variable -> BP50605 - Lookup to VA DRUG CLASS (#50.605)
"RTN","BPSRPT6",65,0)
 ;                   BPLEN - Length of the display field
"RTN","BPSRPT6",66,0)
 ; Returned value -> Name of the drug class
"RTN","BPSRPT6",67,0)
 ;                   
"RTN","BPSRPT6",68,0)
DRGCLNAM(BP50605,BPLEN) N IEN,Y
"RTN","BPSRPT6",69,0)
 K ^TMP($J,"BPSRPT6")
"RTN","BPSRPT6",70,0)
 S Y=""
"RTN","BPSRPT6",71,0)
 I BP50605]"" D 
"RTN","BPSRPT6",72,0)
 .D C^PSN50P65(BP50605,"","BPSRPT6")
"RTN","BPSRPT6",73,0)
 .S IEN=$O(^TMP($J,"BPSRPT6",0))
"RTN","BPSRPT6",74,0)
 .I IEN]"" S Y=$E($G(^TMP($J,"BPSRPT6",IEN,1)),1,BPLEN)
"RTN","BPSRPT6",75,0)
 K ^TMP($J,"BPSRPT6")
"RTN","BPSRPT6",76,0)
 Q Y
"RTN","BPSRPT6",77,0)
 ;
"RTN","BPSRPT6",78,0)
 ;Select a VA DRUG CLASS file entry (Fileman Lookup)
"RTN","BPSRPT6",79,0)
 ;
"RTN","BPSRPT6",80,0)
SELDRGC N DIR,DIRUT,DTOUT,DUOUT,IEN,TOT,X
"RTN","BPSRPT6",81,0)
 K ^TMP($J,"BPSRPT6")
"RTN","BPSRPT6",82,0)
 ;
"RTN","BPSRPT6",83,0)
 F  D  Q:Y]""
"RTN","BPSRPT6",84,0)
 .K ^TMP($J,"BPSRPT6"),^TMP($J,"BPSRPT6X")
"RTN","BPSRPT6",85,0)
 .S DIR(0)="FO^1:35"
"RTN","BPSRPT6",86,0)
 .S DIR("A")="Select Drug Class"
"RTN","BPSRPT6",87,0)
 .S DIR("?")="Answer with VA DRUG CLASS CODE, or CLASSIFICATION. TYPE '??' FOR A LIST"
"RTN","BPSRPT6",88,0)
 .S DIR("??")="^D DCLIST^BPSRPT6"
"RTN","BPSRPT6",89,0)
 .D ^DIR
"RTN","BPSRPT6",90,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(Y)="") S Y="^" Q
"RTN","BPSRPT6",91,0)
 .;
"RTN","BPSRPT6",92,0)
 .;Get list based on original user input
"RTN","BPSRPT6",93,0)
 .D C^PSN50P65("",Y,"BPSRPT6X")
"RTN","BPSRPT6",94,0)
 .;
"RTN","BPSRPT6",95,0)
 .;Get list based on uppercase input
"RTN","BPSRPT6",96,0)
 .S Y=$$UP^XLFSTR(Y)
"RTN","BPSRPT6",97,0)
 .D C^PSN50P65("",Y,"BPSRPT6")
"RTN","BPSRPT6",98,0)
 .;
"RTN","BPSRPT6",99,0)
 .;Merge lists together
"RTN","BPSRPT6",100,0)
 .M ^TMP($J,"BPSRPT6")=^TMP($J,"BPSRPT6X")
"RTN","BPSRPT6",101,0)
 .K ^TMP($J,"BPSRPT6X")
"RTN","BPSRPT6",102,0)
 .;
"RTN","BPSRPT6",103,0)
 .; Reset 0 node based on combined lists
"RTN","BPSRPT6",104,0)
 .S Y=0 F TOT=0:1 S Y=$O(^TMP($J,"BPSRPT6",Y)) Q:'+Y
"RTN","BPSRPT6",105,0)
 .S ^TMP($J,"BPSRPT6",0)=TOT
"RTN","BPSRPT6",106,0)
 .;
"RTN","BPSRPT6",107,0)
 .;Check for no entries found
"RTN","BPSRPT6",108,0)
 .I TOT<1 W "  ??" S Y="" Q
"RTN","BPSRPT6",109,0)
 .;
"RTN","BPSRPT6",110,0)
 .;Check for Unique Entry
"RTN","BPSRPT6",111,0)
 .I TOT=1 D  Q
"RTN","BPSRPT6",112,0)
 ..S Y="",IEN=$O(^TMP($J,"BPSRPT6",0))
"RTN","BPSRPT6",113,0)
 ..I IEN]"" S Y=$G(^TMP($J,"BPSRPT6",IEN,1)) W $C(13),"Select Drug Class: ",Y
"RTN","BPSRPT6",114,0)
 .;
"RTN","BPSRPT6",115,0)
 .;Check for multiple entries - allow user to pick
"RTN","BPSRPT6",116,0)
 .I TOT>1 S Y=$$DCSEL(TOT)
"RTN","BPSRPT6",117,0)
 .I Y="^^" S Y=""
"RTN","BPSRPT6",118,0)
 .;
"RTN","BPSRPT6",119,0)
 Q
"RTN","BPSRPT6",120,0)
 ;
"RTN","BPSRPT6",121,0)
 ;List Entries in VA DRUG CLASS
"RTN","BPSRPT6",122,0)
 ;
"RTN","BPSRPT6",123,0)
DCLIST N CL,DTOUT,IEN,Y
"RTN","BPSRPT6",124,0)
 K ^TMP($J,"BPSRPT6")
"RTN","BPSRPT6",125,0)
 D C^PSN50P65("","??","BPSRPT6")
"RTN","BPSRPT6",126,0)
 ;
"RTN","BPSRPT6",127,0)
 ;First create new index - sorted by CLASSIFICATION
"RTN","BPSRPT6",128,0)
 S IEN=0 F  S IEN=$O(^TMP($J,"BPSRPT6",IEN)) Q:'IEN  D
"RTN","BPSRPT6",129,0)
 .S CL=$G(^TMP($J,"BPSRPT6",IEN,1)) Q:CL=""
"RTN","BPSRPT6",130,0)
 .S ^TMP($J,"BPSRPT6","B",CL,IEN)=$G(^TMP($J,"BPSRPT6",IEN,".01"))
"RTN","BPSRPT6",131,0)
 ;
"RTN","BPSRPT6",132,0)
 ;Now loop through and display entries
"RTN","BPSRPT6",133,0)
 S $X=0,$Y=0 W !,?3,"Choose from: ",!
"RTN","BPSRPT6",134,0)
 S (Y,CL)="" F  S CL=$O(^TMP($J,"BPSRPT6","B",CL)) Q:CL=""  D  Q:Y]""
"RTN","BPSRPT6",135,0)
 .S IEN="" F  S IEN=$O(^TMP($J,"BPSRPT6","B",CL,IEN)) Q:IEN=""  D  Q:Y]""
"RTN","BPSRPT6",136,0)
 ..W ?3,$G(^TMP($J,"BPSRPT6","B",CL,IEN)),!,?3,CL,!
"RTN","BPSRPT6",137,0)
 ..I $Y>19!'$Y D
"RTN","BPSRPT6",138,0)
 ...W ?3 R "'^' TO STOP: ",Y:$G(DTIME,300)
"RTN","BPSRPT6",139,0)
 ...E  S DTOUT=1
"RTN","BPSRPT6",140,0)
 ...W $C(13),$J("",17),$C(13)
"RTN","BPSRPT6",141,0)
 ...I ($G(DTOUT)=1)!($G(Y)="^") S Y="^" Q
"RTN","BPSRPT6",142,0)
 ...S $X=0,$Y=0
"RTN","BPSRPT6",143,0)
 ;
"RTN","BPSRPT6",144,0)
 K ^TMP($J,"BPSRPT6")
"RTN","BPSRPT6",145,0)
 Q
"RTN","BPSRPT6",146,0)
 ;
"RTN","BPSRPT6",147,0)
 ;Allow user to pick VA DRUG CLASS entry based on initial input
"RTN","BPSRPT6",148,0)
 ;
"RTN","BPSRPT6",149,0)
 ; Input variable - TOT -> Total entries placed in ^TMP($J,"BPSRPT6")
"RTN","BPSRPT6",150,0)
 ; Returned value - VA DRUG CLASSIFICATION
"RTN","BPSRPT6",151,0)
 ;
"RTN","BPSRPT6",152,0)
DCSEL(TOT) N CL,DTOUT,I,IEN,IX,Y
"RTN","BPSRPT6",153,0)
 ;
"RTN","BPSRPT6",154,0)
 ;First create new index
"RTN","BPSRPT6",155,0)
 F IX="B","N" K ^TMP($J,"BPSRPT6",IX)
"RTN","BPSRPT6",156,0)
 S Y="",IEN=0 F  S IEN=$O(^TMP($J,"BPSRPT6",IEN)) Q:'IEN  D
"RTN","BPSRPT6",157,0)
 .S CL=$G(^TMP($J,"BPSRPT6",IEN,1)) Q:CL=""
"RTN","BPSRPT6",158,0)
 .S ^TMP($J,"BPSRPT6","B",CL,IEN)=$G(^TMP($J,"BPSRPT6",IEN,".01"))
"RTN","BPSRPT6",159,0)
 ;
"RTN","BPSRPT6",160,0)
 ;Now loop through and allow one to be picked
"RTN","BPSRPT6",161,0)
 S (Y,CL)="" F  S CL=$O(^TMP($J,"BPSRPT6","B",CL)) Q:CL=""  D  Q:Y]""
"RTN","BPSRPT6",162,0)
 .S IEN="" F  S IEN=$O(^TMP($J,"BPSRPT6","B",CL,IEN)) Q:IEN=""  D  Q:Y]""
"RTN","BPSRPT6",163,0)
 ..S I=$G(I)+1 W !,?5,I,?9,$G(^TMP($J,"BPSRPT6","B",CL,IEN)),!,?3,CL
"RTN","BPSRPT6",164,0)
 ..S ^TMP($J,"BPSRPT6","N",I)=CL
"RTN","BPSRPT6",165,0)
 ..;
"RTN","BPSRPT6",166,0)
 ..;Stop after every 5 entries
"RTN","BPSRPT6",167,0)
 ..I I#5=0 I TOT>I D  Q:$G(Y)="^"!($G(Y)="^^")
"RTN","BPSRPT6",168,0)
 ...W !,"Press <RETURN> to see more, '^' to exit this list, OR"
"RTN","BPSRPT6",169,0)
 ...W !,"CHOOSE 1 - "_I R ": ",Y:DTIME S:'$T DTOUT=1
"RTN","BPSRPT6",170,0)
 ...I ($G(DTOUT)=1)!(Y="^") S Y="^^"
"RTN","BPSRPT6",171,0)
 ..;
"RTN","BPSRPT6",172,0)
 ..;Stop after last entry
"RTN","BPSRPT6",173,0)
 ..I I=TOT D
"RTN","BPSRPT6",174,0)
 ...W !,"CHOOSE 1 - "_I R ": ",Y:DTIME S:'$T DTOUT=1
"RTN","BPSRPT6",175,0)
 ..I ($G(DTOUT)=1)!(Y="^") S Y="^^"
"RTN","BPSRPT6",176,0)
 ..;
"RTN","BPSRPT6",177,0)
 ..;Check for valid entry
"RTN","BPSRPT6",178,0)
 ..I Y="^^" S Y=""
"RTN","BPSRPT6",179,0)
 ..I Y]"",'$D(^TMP($J,"BPSRPT6","N",Y)) W "  ??" S Y=""
"RTN","BPSRPT6",180,0)
 ..I Y]"",$D(^TMP($J,"BPSRPT6","N",Y)) S Y=$G(^TMP($J,"BPSRPT6","N",Y))
"RTN","BPSRPT6",181,0)
 ;
"RTN","BPSRPT6",182,0)
 Q Y
"RTN","BPSRPT6",183,0)
 ;
"RTN","BPSRPT6",184,0)
 ;Get DRUG file pointer
"RTN","BPSRPT6",185,0)
 ;       
"RTN","BPSRPT6",186,0)
 ; Return Value -> n = ptr to DRUG (#50)
"RTN","BPSRPT6",187,0)
 ;                 0 = Unknown
"RTN","BPSRPT6",188,0)
 ; 
"RTN","BPSRPT6",189,0)
GETDRUG(BPRX) Q +$$RXAPI1^BPSUTIL1(BPRX,6,"I")
"RTN","BPSRPT6",190,0)
 ;
"RTN","BPSRPT6",191,0)
 ;Get VA DRUG CLASS pointer
"RTN","BPSRPT6",192,0)
 ;       
"RTN","BPSRPT6",193,0)
 ; Input Variables: BP50 - ptr to DRUG (#50)
"RTN","BPSRPT6",194,0)
 ;
"RTN","BPSRPT6",195,0)
 ; Return Value -> n = ptr to VA DRUG CLASS (#50.605)
"RTN","BPSRPT6",196,0)
 ;                 0 = Unknown
"RTN","BPSRPT6",197,0)
 ;
"RTN","BPSRPT6",198,0)
GETDRGCL(BP50) Q $$DRUGDIE^BPSUTIL1(BP50,25)
"RTN","BPSRPT6",199,0)
 ;
"RTN","BPSRPT6",200,0)
 ;Determine whether claim was Mail, Window, or CMOP
"RTN","BPSRPT6",201,0)
 ;
"RTN","BPSRPT6",202,0)
 ; Input Variables: BPREF - refill # (0-No Refills,1-1st Refill, 2-2nd, ...) 
"RTN","BPSRPT6",203,0)
 ;
"RTN","BPSRPT6",204,0)
 ; Return Value -> M = Mail
"RTN","BPSRPT6",205,0)
 ;                 W = Window
"RTN","BPSRPT6",206,0)
 ;                 C = CMOP
"RTN","BPSRPT6",207,0)
 ;
"RTN","BPSRPT6",208,0)
MWC(BPRX,BPREF) Q $$MWC^PSOBPSU2(BPRX,BPREF)
"RTN","BPSRPT6",209,0)
 ;
"RTN","BPSRPT6",210,0)
 ;Get Patient Name
"RTN","BPSRPT6",211,0)
 ;
"RTN","BPSRPT6",212,0)
 ; Input variable -> BPDFN - ptr to PATIENT (#2)
"RTN","BPSRPT6",213,0)
 ; Returned value -> Patient Name (shortened)
"RTN","BPSRPT6",214,0)
 ; 
"RTN","BPSRPT6",215,0)
PATNAME(BPDFN) Q $E($P($G(^DPT(BPDFN,0)),U),1,25)
"RTN","BPSRPT6",216,0)
 ;
"RTN","BPSRPT6",217,0)
 ;Get Last 4 of SSN
"RTN","BPSRPT6",218,0)
 ;
"RTN","BPSRPT6",219,0)
 ; Input variable -> BPDFN - ptr to PATIENT (#2)
"RTN","BPSRPT6",220,0)
 ; Returned value -> Last 4 digits of patient's SSN
"RTN","BPSRPT6",221,0)
 ; 
"RTN","BPSRPT6",222,0)
SSN4(BPDFN) N X
"RTN","BPSRPT6",223,0)
 S X=$P($G(^DPT(BPDFN,0)),U,9)
"RTN","BPSRPT6",224,0)
 Q $E(X,$L(X)-3,$L(X))
"RTN","BPSRPT6",225,0)
 ;
"RTN","BPSRPT6",226,0)
 ;Get RX#
"RTN","BPSRPT6",227,0)
 ;
"RTN","BPSRPT6",228,0)
 ; Returned value -> RX#
"RTN","BPSRPT6",229,0)
 ; 
"RTN","BPSRPT6",230,0)
RXNUM(BPRX) Q $$RXAPI1^BPSUTIL1(+BPRX,.01,"I")
"RTN","BPSRPT6",231,0)
 ;
"RTN","BPSRPT6",232,0)
 ;Determine $Collected
"RTN","BPSRPT6",233,0)
 ;
"RTN","BPSRPT6",234,0)
 ; Returned Value -> $Collected
"RTN","BPSRPT6",235,0)
 ;
"RTN","BPSRPT6",236,0)
COLLECTD(BPRX,BPREF,BPPAYSEQ) N COL,RET
"RTN","BPSRPT6",237,0)
 S RET=$$BILLINFO^IBNCPDPI(BPRX,BPREF,BPPAYSEQ)
"RTN","BPSRPT6",238,0)
 S COL=$P(RET,U,5) I COL="0",($P(RET,U,3)=16)!($P(RET,U,3)=27) S COL=""
"RTN","BPSRPT6",239,0)
 I $P(RET,U,7)=1 S COL="N/A"
"RTN","BPSRPT6",240,0)
 Q COL_U_$P(RET,U,2)
"RTN","BPSRPT6",241,0)
 ;
"RTN","BPSRPT6",242,0)
 ;Determine Bill #
"RTN","BPSRPT6",243,0)
 ;
"RTN","BPSRPT6",244,0)
 ; Returned Value -> Bill Number
"RTN","BPSRPT6",245,0)
 ;
"RTN","BPSRPT6",246,0)
BILL(BPRX,BPREF,BPPSEQ) ;
"RTN","BPSRPT6",247,0)
 N BPSARR,BPSZ,IBIEN
"RTN","BPSRPT6",248,0)
 I BPPSEQ=1 Q $P($$BILLINFO^IBNCPDPI(BPRX,BPREF,BPPSEQ),U,1)
"RTN","BPSRPT6",249,0)
 I BPPSEQ=2 S BPSZ=$$RXBILL^IBNCPUT3(BPRX,BPREF,"S",,.BPSARR),IBIEN="" D  I +IBIEN>0 Q $P($G(BPSARR(IBIEN)),U,1)
"RTN","BPSRPT6",250,0)
 . S IBIEN=+$P(BPSZ,U,2) Q:IBIEN>0     ; get active bill first
"RTN","BPSRPT6",251,0)
 . S IBIEN=+$O(BPSARR(999999999),-1)   ; get most recent bill next
"RTN","BPSRPT6",252,0)
 . Q
"RTN","BPSRPT6",253,0)
 Q ""
"RTN","BPSRPT6",254,0)
 ;
"RTN","BPSRPT6",255,0)
 ;Get the Closed Claim Reason
"RTN","BPSRPT6",256,0)
 ;
"RTN","BPSRPT6",257,0)
 ; Input variable -> 0 for All Closed Claim Reasons or
"RTN","BPSRPT6",258,0)
 ;                   lookup to CLAIMS TRACKING NON-BILLABLE REASONS (#356.8)
"RTN","BPSRPT6",259,0)
 ; Returned value -> ALL or the selected Closed Claim Reason
"RTN","BPSRPT6",260,0)
 ; 
"RTN","BPSRPT6",261,0)
GETCLR(RSN) ;
"RTN","BPSRPT6",262,0)
 I RSN="0" S RSN="ALL"
"RTN","BPSRPT6",263,0)
 E  S RSN=$P($G(^IBE(356.8,+RSN,0)),U)
"RTN","BPSRPT6",264,0)
 Q RSN
"RTN","BPSRPT6",265,0)
 ;
"RTN","BPSRPT6",266,0)
 ;Get the Closed By Person
"RTN","BPSRPT6",267,0)
 ;
"RTN","BPSRPT6",268,0)
 ; Returned Value -> Closed By Name
"RTN","BPSRPT6",269,0)
 ; 
"RTN","BPSRPT6",270,0)
CLSBY(BP59) N BP02,CBY,Y
"RTN","BPSRPT6",271,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT6",272,0)
 S CBY=+$P($G(^BPSC(BP02,900)),U,3)
"RTN","BPSRPT6",273,0)
 S Y=$$GET1^DIQ(200,CBY_",",".01")
"RTN","BPSRPT6",274,0)
 Q Y
"RTN","BPSRPT6",275,0)
 ;
"RTN","BPSRPT6",276,0)
 ;Get the Claim Status
"RTN","BPSRPT6",277,0)
 ;
"RTN","BPSRPT6",278,0)
 ; Input Variables: BPREF - refill # (0-No Refills,1-1st Refill, 2-2nd, ...) 
"RTN","BPSRPT6",279,0)
 ;
"RTN","BPSRPT6",280,0)
STATUS(BPRX,BPREF,BPSEQ) Q $$STATUS^BPSOSRX(BPRX,BPREF,0,,$G(BPSEQ))
"RTN","BPSRPT6",281,0)
 ;
"RTN","BPSRPT6",282,0)
 ;Elapsed Time
"RTN","BPSRPT6",283,0)
 ;
"RTN","BPSRPT6",284,0)
 ; Returned Value -> TIME - Elapsed Processing Time
"RTN","BPSRPT6",285,0)
 ; 
"RTN","BPSRPT6",286,0)
ELAPSE(BP59) Q $$TIMEDIFI^BPSOSUD($P($G(^BPST(BP59,0)),U,11),$P($G(^BPST(BP59,0)),U,8))
"RTN","BPSRPT6",287,0)
 ;
"RTN","BPSRPT6",288,0)
 ;Get RX issue date
"RTN","BPSRPT6",289,0)
 ;
"RTN","BPSRPT6",290,0)
RXISSDT(BPRX) Q +$$RXAPI1^BPSUTIL1(BPRX,1,"I")
"RTN","BPSRPT6",291,0)
 ;
"RTN","BPSRPT6",292,0)
 ;
"RTN","BPSRPT6",293,0)
 ;Get RX's fill date
"RTN","BPSRPT6",294,0)
RXFILDT(BPRX) Q +$$RXAPI1^BPSUTIL1(BPRX,22,"I")
"RTN","BPSRPT6",295,0)
 ;
"RTN","BPSRPT6",296,0)
 ;Get Refill's issue date
"RTN","BPSRPT6",297,0)
 ;
"RTN","BPSRPT6",298,0)
REFISSDT(BPRX,BPREF) Q $$REFDISDT(BPRX,BPREF)
"RTN","BPSRPT6",299,0)
 ;
"RTN","BPSRPT6",300,0)
 ;Get Refill's dispense date
"RTN","BPSRPT6",301,0)
 ;
"RTN","BPSRPT6",302,0)
REFDISDT(BPRX,BPREF) Q +$$RXSUBF1^BPSUTIL1(BPRX,52,52.1,+BPREF,10.1,"I")
"RTN","BPSRPT6",303,0)
 ;
"RTN","BPSRPT6",304,0)
 ;Get Refill's refill date
"RTN","BPSRPT6",305,0)
 ;
"RTN","BPSRPT6",306,0)
REFFILDT(BPRX,BPREF) Q +$$RXSUBF1^BPSUTIL1(BPRX,52,52.1,+BPREF,.01,"I")
"RTN","BPSRPT6",307,0)
 ;
"RTN","BPSRPT6",308,0)
 ;Get RX's release date
"RTN","BPSRPT6",309,0)
 ;
"RTN","BPSRPT6",310,0)
RXRELDT(BPRX) Q +$$RXAPI1^BPSUTIL1(BPRX,31,"I")
"RTN","BPSRPT6",311,0)
 ;
"RTN","BPSRPT6",312,0)
 ;Get Refill's release date
"RTN","BPSRPT6",313,0)
 ;
"RTN","BPSRPT6",314,0)
REFRELDT(BPRX,BPREF) Q +$$RXSUBF1^BPSUTIL1(BPRX,52,52.1,+BPREF,17,"I")
"RTN","BPSRPT6",315,0)
 ;
"RTN","BPSRPT6",316,0)
 ;See if refill exists
"RTN","BPSRPT6",317,0)
 ;
"RTN","BPSRPT6",318,0)
IFREFILL(BPRX,BPREF) Q $S(+$$RXSUBF1^BPSUTIL1(BPRX,52,52.1,+BPREF,.01,"I"):1,1:0)
"RTN","BPSRPT6",319,0)
 ;
"RTN","BPSRPT6",320,0)
 ;Get RX status
"RTN","BPSRPT6",321,0)
 ;
"RTN","BPSRPT6",322,0)
 ; Input Variables -> BP59 = ptr to BPS TRANSACTIONS
"RTN","BPSRPT6",323,0)
 ;                            
"RTN","BPSRPT6",324,0)
RXSTATUS(BP59) Q $$RXST^BPSSCRU2(BP59)
"RTN","BPSRPT6",325,0)
 ;
"RTN","BPSRPT6",326,0)
 ;Return RX Quantity (From BPS TRANSACTION)
"RTN","BPSRPT6",327,0)
 ;
"RTN","BPSRPT6",328,0)
QTY(BP59) Q +$P($G(^BPST(BP59,5)),U,1)
"RTN","BPSRPT6",329,0)
 ;
"RTN","BPSRPT6",330,0)
 ;Return NDC Number
"RTN","BPSRPT6",331,0)
GETNDC(BPRX,BPREF) Q $$GETNDC^PSONDCUT(BPRX,BPREF)
"RTN","BPSRPT6",332,0)
 ;
"RTN","BPSRPT6",333,0)
 ;Return Copay Status ($)
"RTN","BPSRPT6",334,0)
COPAY(BPRX) Q $S(+$$RXAPI1^BPSUTIL1(BPRX,105,"I"):"$",1:"")
"RTN","BPSRPT7")
0^46^B77430067
"RTN","BPSRPT7",1,0)
BPSRPT7 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT7",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8**;JUN 2004;Build 29
"RTN","BPSRPT7",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSRPT7",4,0)
 ;
"RTN","BPSRPT7",5,0)
 Q
"RTN","BPSRPT7",6,0)
 ;
"RTN","BPSRPT7",7,0)
 ;Routine to Display the Reports (Continued)
"RTN","BPSRPT7",8,0)
 ;
"RTN","BPSRPT7",9,0)
 ; Input Variables -> BPCLM = Array of report data by date
"RTN","BPSRPT7",10,0)
 ;                   BPDIV,BPSUMDET,GTOT
"RTN","BPSRPT7",11,0)
 ; Returned Value -> Cumulative Grand Totals
"RTN","BPSRPT7",12,0)
 ; 
"RTN","BPSRPT7",13,0)
PTBDT(BPDIV,BPSUMDET,BPCLM,GTOT) N DIFF,I,NP,RDT,TOT,X
"RTN","BPSRPT7",14,0)
 ;
"RTN","BPSRPT7",15,0)
 ;Loop through compiled array and display
"RTN","BPSRPT7",16,0)
 S TOT=""
"RTN","BPSRPT7",17,0)
 S RDT="" F  S RDT=$O(BPCLM(RDT)) Q:RDT=""  D  Q:BPQ
"RTN","BPSRPT7",18,0)
 .S NP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",19,0)
 .S X=$G(BPCLM(RDT))
"RTN","BPSRPT7",20,0)
 .;
"RTN","BPSRPT7",21,0)
 .;Print Details - Report
"RTN","BPSRPT7",22,0)
 .I BPSUMDET=0,'BPEXCEL D
"RTN","BPSRPT7",23,0)
 ..W !,$$DATTIM^BPSRPT1(RDT) ;Date
"RTN","BPSRPT7",24,0)
 ..W ?15,$J(+$P(X,U),17) ;#Claims
"RTN","BPSRPT7",25,0)
 ..W ?33,$J(+$P(X,U,2),17,2)  ;Amount Submitted
"RTN","BPSRPT7",26,0)
 ..W ?51,$J(+$P(X,U,3),17,2)  ;Returned Rejected
"RTN","BPSRPT7",27,0)
 ..W ?69,$J(+$P(X,U,4),17,2)  ;Returned Payable
"RTN","BPSRPT7",28,0)
 ..W ?87,$J(+$P(X,U,5),17,2)  ;Amount to Receive
"RTN","BPSRPT7",29,0)
 ..;
"RTN","BPSRPT7",30,0)
 ..;Difference
"RTN","BPSRPT7",31,0)
 ..S DIFF=+$P(X,U,4)-$P(X,U,5)
"RTN","BPSRPT7",32,0)
 ..I DIFF<0 S DIFF="<"_$TR($J(-DIFF,15,2)," ")_">" W ?117,$J(DIFF,15)
"RTN","BPSRPT7",33,0)
 ..E  W ?116,$J(DIFF,15,2)
"RTN","BPSRPT7",34,0)
 ..;
"RTN","BPSRPT7",35,0)
 ..;Print Details - Excel
"RTN","BPSRPT7",36,0)
 .I BPSUMDET=0,BPEXCEL D
"RTN","BPSRPT7",37,0)
 ..;
"RTN","BPSRPT7",38,0)
 ..;Division
"RTN","BPSRPT7",39,0)
 ..W !,$S(BPDIV=0:"BLANK",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV),U
"RTN","BPSRPT7",40,0)
 ..W $$DATTIM^BPSRPT1(RDT),U  ;Date
"RTN","BPSRPT7",41,0)
 ..W +$P(X,U),U ;#Claims
"RTN","BPSRPT7",42,0)
 ..W $TR($J(+$P(X,U,2),17,2)," "),U  ;Amount Submitted
"RTN","BPSRPT7",43,0)
 ..W $TR($J(+$P(X,U,3),17,2)," "),U  ;Returned Rejected
"RTN","BPSRPT7",44,0)
 ..W $TR($J(+$P(X,U,4),17,2)," "),U  ;Returned Payable
"RTN","BPSRPT7",45,0)
 ..W $TR($J(+$P(X,U,5),17,2)," "),U  ;Amount to Receive
"RTN","BPSRPT7",46,0)
 ..;
"RTN","BPSRPT7",47,0)
 ..;Difference
"RTN","BPSRPT7",48,0)
 ..S DIFF=+$P(X,U,4)-$P(X,U,5)
"RTN","BPSRPT7",49,0)
 ..W $TR($J(DIFF,15,2)," ")
"RTN","BPSRPT7",50,0)
 .;
"RTN","BPSRPT7",51,0)
 .;Save Totals
"RTN","BPSRPT7",52,0)
 .F I=1:1:5 S $P(TOT,U,I)=$P(TOT,U,I)+$P(X,U,I),$P(GTOT,U,I)=$P($G(GTOT),U,I)+$P(X,U,I)
"RTN","BPSRPT7",53,0)
 ;
"RTN","BPSRPT7",54,0)
 ;Print Totals
"RTN","BPSRPT7",55,0)
 Q:BPEXCEL
"RTN","BPSRPT7",56,0)
 Q:BPQ  S NP=$$CHKP^BPSRPT5(2) Q:BPQ
"RTN","BPSRPT7",57,0)
 D ULINE^BPSRPT5("-")
"RTN","BPSRPT7",58,0)
 W !,"TOTALS"
"RTN","BPSRPT7",59,0)
 W ?15,$J(+$P(TOT,U),17)
"RTN","BPSRPT7",60,0)
 W ?33,$J(+$P(TOT,U,2),17,2)
"RTN","BPSRPT7",61,0)
 W ?51,$J(+$P(TOT,U,3),17,2)
"RTN","BPSRPT7",62,0)
 W ?69,$J(+$P(TOT,U,4),17,2)
"RTN","BPSRPT7",63,0)
 W ?87,$J(+$P(TOT,U,5),17,2)
"RTN","BPSRPT7",64,0)
 S X=$S((+$P(TOT,U,4))=0:0,1:(+$P(TOT,U,5))/(+$P(TOT,U,4)))
"RTN","BPSRPT7",65,0)
 S DIFF=+$P(TOT,U,4)-$P(TOT,U,5)
"RTN","BPSRPT7",66,0)
 I DIFF<0 S DIFF="<"_$TR($J(-DIFF,15,2)," ")_">" W ?117,$J(DIFF,15)
"RTN","BPSRPT7",67,0)
 E  W ?116,$J(DIFF,15,2)
"RTN","BPSRPT7",68,0)
 Q
"RTN","BPSRPT7",69,0)
 ;
"RTN","BPSRPT7",70,0)
 ;Print Grand Totals - Report 6
"RTN","BPSRPT7",71,0)
 ;
"RTN","BPSRPT7",72,0)
PGTOT6(GTOT) N DIFF,NP,X
"RTN","BPSRPT7",73,0)
 Q:BPQ  S NP=$$CHKP^BPSRPT5(2) Q:BPQ
"RTN","BPSRPT7",74,0)
 D ULINE^BPSRPT5("-")
"RTN","BPSRPT7",75,0)
 W !,"GRAND TOTALS"
"RTN","BPSRPT7",76,0)
 W ?15,$J(+$P(GTOT,U),17)
"RTN","BPSRPT7",77,0)
 W ?33,$J(+$P(GTOT,U,2),17,2)
"RTN","BPSRPT7",78,0)
 W ?51,$J(+$P(GTOT,U,3),17,2)
"RTN","BPSRPT7",79,0)
 W ?69,$J(+$P(GTOT,U,4),17,2)
"RTN","BPSRPT7",80,0)
 W ?87,$J(+$P(GTOT,U,5),17,2)
"RTN","BPSRPT7",81,0)
 S X=$S((+$P(GTOT,U,4))=0:0,1:(+$P(GTOT,U,5))/(+$P(GTOT,U,4)))
"RTN","BPSRPT7",82,0)
 S DIFF=+$P(GTOT,U,4)-$P(GTOT,U,5)
"RTN","BPSRPT7",83,0)
 I DIFF<0 S DIFF="<"_$TR($J(-DIFF,15,2)," ")_">" W ?117,$J(DIFF,15)
"RTN","BPSRPT7",84,0)
 E  W ?116,$J(DIFF,15,2)
"RTN","BPSRPT7",85,0)
 Q
"RTN","BPSRPT7",86,0)
 ;
"RTN","BPSRPT7",87,0)
 ;Print Grand Totals - Reports 1,2,3,4,5,7
"RTN","BPSRPT7",88,0)
 ;
"RTN","BPSRPT7",89,0)
PGTOT(BPRTYPE,BPGBIL,BPGINS,BPGCOLL,BPGCNT,BPGELTM) ;
"RTN","BPSRPT7",90,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT7",91,0)
 .W !!,?78,"----------",?100,"----------",?122,"----------"
"RTN","BPSRPT7",92,0)
 .W !,"GRAND TOTALS",?78,$J(BPGBIL,10,2),?100,$J(BPGINS,10,2),?122,$J(BPGCOLL,10,2)
"RTN","BPSRPT7",93,0)
 .W !,"COUNT",?78,$J(BPGCNT,10),?100,$J(BPGCNT,10),?122,$J(BPGCNT,10)
"RTN","BPSRPT7",94,0)
 .W:BPGCNT !,"MEAN",?78,$J(BPGBIL/BPGCNT,10,2),?100,$J(BPGINS/BPGCNT,10,2),?122,$J(BPGCOLL/BPGCNT,10,2)
"RTN","BPSRPT7",95,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT7",96,0)
 .W !!,?100,"----------",?122,"----------"
"RTN","BPSRPT7",97,0)
 .W !,"GRAND TOTALS",?100,$J(BPGBIL,10,2),?122,$J(BPGINS,10,2)
"RTN","BPSRPT7",98,0)
 .W !,"COUNT",?100,$J(BPGCNT,10),?122,$J(BPGCNT,10)
"RTN","BPSRPT7",99,0)
 .W:BPGCNT !,"MEAN",?100,$J(BPGBIL/BPGCNT,10,2),?122,$J(BPGINS/BPGCNT,10,2)
"RTN","BPSRPT7",100,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT7",101,0)
 .W !!,?41,"----------"
"RTN","BPSRPT7",102,0)
 .W !,"GRAND TOTALS",?41,$J(BPGBIL,10,2)
"RTN","BPSRPT7",103,0)
 .W !,"COUNT",?41,$J(BPGCNT,10)
"RTN","BPSRPT7",104,0)
 .W:BPGCNT !,"MEAN",?41,$J(BPGBIL/BPGCNT,10,2)
"RTN","BPSRPT7",105,0)
 I (BPRTYPE=5) D  Q
"RTN","BPSRPT7",106,0)
 .W !!,"GRAND TOTALS (ALL DIVISIONS)",?65,"---------------"
"RTN","BPSRPT7",107,0)
 .W !,"TOTAL CLAIMS",?65,$J(BPGCNT,15)
"RTN","BPSRPT7",108,0)
 .W !,"AVERAGE ELAPSED TIME PER CLAIM",?65,$J($S(BPGCNT=0:"0",1:(BPGELTM\BPGCNT)),15)
"RTN","BPSRPT7",109,0)
 I (BPRTYPE=7) D  Q
"RTN","BPSRPT7",110,0)
 .W !!,"GRAND TOTALS (ALL DIVISIONS) BY BILLER"
"RTN","BPSRPT7",111,0)
 .N BPBILR,BPDIV S BPDIV="ALL DIVISIONS"
"RTN","BPSRPT7",112,0)
 .S BPBILR="" F  S BPBILR=$O(BPGCNT(BPBILR)) Q:BPBILR=""  D  Q:BPQ
"RTN","BPSRPT7",113,0)
 ..S NP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",114,0)
 ..W !,?3,BPBILR,?65,$J($G(BPGCNT(BPBILR)),5)
"RTN","BPSRPT7",115,0)
 .Q:$G(BPQ)
"RTN","BPSRPT7",116,0)
 .W !,?65,"-----"
"RTN","BPSRPT7",117,0)
 .W !,"CLOSED CLAIMS GRAND TOTAL",?65,$J(BPGCNT,5)
"RTN","BPSRPT7",118,0)
 ;
"RTN","BPSRPT7",119,0)
 Q
"RTN","BPSRPT7",120,0)
 ;
"RTN","BPSRPT7",121,0)
 ;Get Close Reason
"RTN","BPSRPT7",122,0)
 ;
"RTN","BPSRPT7",123,0)
 ; Input Variable -> BP59 = ptr to BPS TRANSACTIONS
"RTN","BPSRPT7",124,0)
 ; Returned Value -> Claim Close Reason
"RTN","BPSRPT7",125,0)
 ;
"RTN","BPSRPT7",126,0)
CLRSN(BP59) N BP02,CIEN,CL
"RTN","BPSRPT7",127,0)
 S CL=""
"RTN","BPSRPT7",128,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSRPT7",129,0)
 S CIEN=+$P($G(^BPSC(BP02,900)),U,4)
"RTN","BPSRPT7",130,0)
 I CIEN'=0 S CL=$$GETCLR^BPSRPT6(CIEN)
"RTN","BPSRPT7",131,0)
 Q CIEN_"^"_CL
"RTN","BPSRPT7",132,0)
 ;
"RTN","BPSRPT7",133,0)
 ;Get Reversal Reason
"RTN","BPSRPT7",134,0)
 ;
"RTN","BPSRPT7",135,0)
 ; Input Variable -> BP59 = ptr to BPS TRANSACTIONS
"RTN","BPSRPT7",136,0)
 ; Returned Value -> Claim Reversal Reason
"RTN","BPSRPT7",137,0)
 ;
"RTN","BPSRPT7",138,0)
RVSRSN(BP59) Q $P($G(^BPST(BP59,4)),U,4)
"RTN","BPSRPT7",139,0)
 ;
"RTN","BPSRPT7",140,0)
 ;Return the Billed Amount
"RTN","BPSRPT7",141,0)
 ;
"RTN","BPSRPT7",142,0)
BILLED(BP59) ;
"RTN","BPSRPT7",143,0)
 Q +$P($G(^BPST(BP59,5)),U,5)
"RTN","BPSRPT7",144,0)
 ;
"RTN","BPSRPT7",145,0)
 ;Return the Transaction Type - SUBMIT or REVERSAL
"RTN","BPSRPT7",146,0)
 ;
"RTN","BPSRPT7",147,0)
TTYPE(BPRX,BPREF,BPSEQ) N BPSTATUS,TTYPE
"RTN","BPSRPT7",148,0)
 S TTYPE="SUBMIT"
"RTN","BPSRPT7",149,0)
 S BPSTATUS=$$STATUS^BPSRPT6(BPRX,BPREF,$G(BPSEQ))
"RTN","BPSRPT7",150,0)
 I BPSTATUS["REVERSAL" S TTYPE="REVERSAL"
"RTN","BPSRPT7",151,0)
 Q TTYPE
"RTN","BPSRPT7",152,0)
 ;
"RTN","BPSRPT7",153,0)
 ;Return the payer response
"RTN","BPSRPT7",154,0)
 ;
"RTN","BPSRPT7",155,0)
RESPONSE(BPRX,BPREF,BPSEQ) Q $P($$STATUS^BPSRPT6(BPRX,BPREF,$G(BPSEQ)),U)
"RTN","BPSRPT7",156,0)
 ;
"RTN","BPSRPT7",157,0)
 ;Print Report Subtotals
"RTN","BPSRPT7",158,0)
 ;
"RTN","BPSRPT7",159,0)
TOTALS(BPRTYPE,BPDIV,BPTBIL,BPTINS,BPTCOLL,BPCNT,BPELTM) ;
"RTN","BPSRPT7",160,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT7",161,0)
 .W !!,?78,"----------",?100,"----------",?122,"----------"
"RTN","BPSRPT7",162,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?78,$J(BPTBIL,10,2),?100,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT7",163,0)
 .W !,"COUNT",?78,$J(BPCNT,10),?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",164,0)
 .W:BPCNT !,"MEAN",?78,$J(BPTBIL/BPCNT,10,2),?100,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT7",165,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT7",166,0)
 .W !!,?100,"----------",?122,"----------"
"RTN","BPSRPT7",167,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,52),?100,$J(BPTBIL,10,2),?122,$J(BPTINS,10,2)
"RTN","BPSRPT7",168,0)
 .W !,"COUNT",?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT7",169,0)
 .W:BPCNT !,"MEAN",?100,$J(BPTBIL/BPCNT,10,2),?122,$J(BPTINS/BPCNT,10,2)
"RTN","BPSRPT7",170,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT7",171,0)
 .W !!,?41,"----------"
"RTN","BPSRPT7",172,0)
 .W !,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,22),?41,$J(BPTBIL,10,2)
"RTN","BPSRPT7",173,0)
 .W !,"COUNT",?41,$J(BPCNT,10)
"RTN","BPSRPT7",174,0)
 .W:BPCNT !,"MEAN",?41,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT7",175,0)
 I (BPRTYPE=5) D  Q
"RTN","BPSRPT7",176,0)
 .W !!,"SUBTOTALS for DIV: ",$E($$BPDIV(BPDIV),1,43),?65,"---------------"
"RTN","BPSRPT7",177,0)
 .W !,"TOTAL CLAIMS",?65,$J(BPCNT,15)
"RTN","BPSRPT7",178,0)
 .W !,"AVERAGE ELAPSED TIME PER CLAIM",?65,$J($S(BPCNT=0:"0",1:(BPELTM\BPCNT)),15)
"RTN","BPSRPT7",179,0)
 I (BPRTYPE=7) D  Q
"RTN","BPSRPT7",180,0)
 .W !!,"SUBTOTALS for DIV:",$E($$BPDIV(BPDIV),1,43)
"RTN","BPSRPT7",181,0)
 .N BPBILR
"RTN","BPSRPT7",182,0)
 .S BPBILR="" F  S BPBILR=$O(BPCNT(BPBILR)) Q:BPBILR=""  D  Q:BPQ
"RTN","BPSRPT7",183,0)
 ..S NP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT7",184,0)
 ..W !,?3,BPBILR,?65,$J($G(BPCNT(BPBILR)),5)
"RTN","BPSRPT7",185,0)
 .Q:$G(BPQ)
"RTN","BPSRPT7",186,0)
 .W !,?65,"-----"
"RTN","BPSRPT7",187,0)
 .W !,"CLOSED CLAIMS SUBTOTAL",?65,$J(BPCNT,5)
"RTN","BPSRPT7",188,0)
 ;
"RTN","BPSRPT7",189,0)
 Q
"RTN","BPSRPT7",190,0)
 ;
"RTN","BPSRPT7",191,0)
 ;Print Report Header
"RTN","BPSRPT7",192,0)
 ; Input variables (defined in BPSRPT0) - BPPHARM,BPSUMDET,BPNOW,BPMWC,BPRTBCK,BPINSINF
"RTN","BPSRPT7",193,0)
 ;                                        BPREJCD,BPCCRSN,BPAUTREV,BPACREJ,BPQSTDRG
"RTN","BPSRPT7",194,0)
 ;                                        BPDRUG,BPDRGCL,BPRLNRL,BPSORT,BPBEGDT,BPENDDT
"RTN","BPSRPT7",195,0)
 ; Output variable - BPSDATA -> Reset to 0 to show no actual data has been printed
"RTN","BPSRPT7",196,0)
 ;                           on the screen
"RTN","BPSRPT7",197,0)
 ;                   BPPAGE -> First set in BPSRPT0
"RTN","BPSRPT7",198,0)
 ;                   BPBLINE -> Controls whether to print a blank line
"RTN","BPSRPT7",199,0)
 ;                   
"RTN","BPSRPT7",200,0)
HDR(BPRTYPE,BPRPTNAM,BPPAGE) ;
"RTN","BPSRPT7",201,0)
 ;Display Excel Header
"RTN","BPSRPT7",202,0)
 I BPEXCEL D HDR^BPSRPT8(BPRTYPE) Q
"RTN","BPSRPT7",203,0)
 ;
"RTN","BPSRPT7",204,0)
 ; Define BPPDATA - Tells whether data has been displayed for a screen
"RTN","BPSRPT7",205,0)
 S BPSDATA=0
"RTN","BPSRPT7",206,0)
 S BPBLINE=""
"RTN","BPSRPT7",207,0)
 S BPPAGE=$G(BPPAGE)+1
"RTN","BPSRPT7",208,0)
 W @IOF
"RTN","BPSRPT7",209,0)
 W "ECME "_BPRPTNAM_" "_$S(BPSUMDET=1:"SUMMARY",1:"DETAIL")_" REPORT"
"RTN","BPSRPT7",210,0)
 W ?89,"Print Date: "_$G(BPNOW)_"  Page:",$J(BPPAGE,3)
"RTN","BPSRPT7",211,0)
 W !,"DIVISION(S): ",$$GETDIVS^BPSRPT4(75,.BPPHARM)
"RTN","BPSRPT7",212,0)
 W ?93,"Fill Locations: "_$S(BPMWC="A":"C,M,W",1:BPMWC)
"RTN","BPSRPT7",213,0)
 W ?116,"Fill type: "_$S(BPRTBCK=2:"RT",BPRTBCK=3:"BB",1:"RT,BB")
"RTN","BPSRPT7",214,0)
 W !,"Insurance: "_$S(BPINSINF=0:"ALL",1:$$BPINS(BPINSINF))
"RTN","BPSRPT7",215,0)
 I (",7,")[BPRTYPE W ?44,"Close Reason: ",$E($$GETCLR^BPSRPT6(BPCCRSN),1,26)
"RTN","BPSRPT7",216,0)
 I (",4,")[BPRTYPE W ?44,$J($S(BPAUTREV=0:"ALL",1:"AUTO"),4)," Reversals"
"RTN","BPSRPT7",217,0)
 I (",4,")[BPRTYPE W ?60,$J($S(BPACREJ=1:"REJECTED",BPACREJ=2:"ACCEPTED",1:"ALL"),8)," Returned Status"
"RTN","BPSRPT7",218,0)
 W ?87,"Drugs/Classes: "_$S(BPQSTDRG=2:$$DRGNAM^BPSRPT6(BPDRUG,30),BPQSTDRG=3:$E(BPDRGCL,1,30),1:"ALL")
"RTN","BPSRPT7",219,0)
 I (",2,")[BPRTYPE W !,"Reject Code: ",$E($$GETREJ^BPSRPT4(BPREJCD),1,28),?89,"Elibility: ",$S(BPELIG="V":"VET",BPELIG="T":"TRI",1:"ALL"),?111,"Open/Closed: ",$S(BPOPCL=1:"CLOSED",BPOPCL=2:"OPEN",1:"ALL")
"RTN","BPSRPT7",220,0)
 W !,$S(BPRTYPE=5:"PRESCRIPTIONS",BPRLNRL=2:"RELEASED PRESCRIPTIONS",BPRLNRL=3:"PRESCRIPTIONS (NOT RELEASED)",1:"ALL PRESCRIPTIONS")
"RTN","BPSRPT7",221,0)
 W " BY "_$S(BPRTYPE=7:"CLOSE",1:"TRANSACTION")_" DATE: "
"RTN","BPSRPT7",222,0)
 W "From "_$$DATTIM^BPSRPT1(BPBEGDT)_" through "_$$DATTIM^BPSRPT1($P(BPENDDT,"."))
"RTN","BPSRPT7",223,0)
 ;
"RTN","BPSRPT7",224,0)
 D ULINE^BPSRPT5("=") Q:$G(BPQ)
"RTN","BPSRPT7",225,0)
 D HEADLN1^BPSRPT4(BPRTYPE)
"RTN","BPSRPT7",226,0)
 D HEADLN2^BPSRPT4(BPRTYPE)
"RTN","BPSRPT7",227,0)
 D HEADLN3^BPSRPT4(BPRTYPE)
"RTN","BPSRPT7",228,0)
 D ULINE^BPSRPT5("=")
"RTN","BPSRPT7",229,0)
 ;
"RTN","BPSRPT7",230,0)
 ;Print Division
"RTN","BPSRPT7",231,0)
 I $G(BPDIV)]"" D
"RTN","BPSRPT7",232,0)
 .W !,"DIVISION: ",$S(BPDIV=0:"BLANK",BPDIV="ALL DIVISIONS":"ALL DIVISIONS",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV)
"RTN","BPSRPT7",233,0)
 .I BPRTYPE=5!(BPRTYPE=6)!(BPSUMDET=1)!(BPGRPLAN="") D ULINE^BPSRPT5("-")
"RTN","BPSRPT7",234,0)
 ;
"RTN","BPSRPT7",235,0)
 ;Print Insurance If Defined
"RTN","BPSRPT7",236,0)
 I BPSUMDET=0,$G(BPGRPLAN)]"",$G(BPGRPLAN)'=0,$G(BPGRPLAN)'="~" D WRPLAN^BPSRPT5(BPGRPLAN)
"RTN","BPSRPT7",237,0)
 Q
"RTN","BPSRPT7",238,0)
 ;
"RTN","BPSRPT7",239,0)
 ;Special Division Handling
"RTN","BPSRPT7",240,0)
 ;
"RTN","BPSRPT7",241,0)
BPDIV(BPDIV) Q $S(BPDIV=0:"BLANK",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV)
"RTN","BPSRPT7",242,0)
 ;
"RTN","BPSRPT7",243,0)
 ;Get selected insurance names based on user selection
"RTN","BPSRPT7",244,0)
 ;If length is greater than 68 append "..."
"RTN","BPSRPT7",245,0)
 ;Input: BPINSINF = Semi-colon separated list of file 36 IENs
"RTN","BPSRPT7",246,0)
 ;Output: comma separated list of related file 36 names
"RTN","BPSRPT7",247,0)
BPINS(BPINSINF) ;
"RTN","BPSRPT7",248,0)
 N BPINS,BPINAME,RETV
"RTN","BPSRPT7",249,0)
 S RETV=""
"RTN","BPSRPT7",250,0)
 F I=2:1 S BPINS=$P($G(BPINSINF),";",I) Q:BPINS=""  D
"RTN","BPSRPT7",251,0)
 . S BPINAME=$$INSNM^IBNCPDPI(BPINS) Q:BPINAME=""
"RTN","BPSRPT7",252,0)
 . I RETV'="" S RETV=RETV_", "_BPINAME Q
"RTN","BPSRPT7",253,0)
 . S RETV=BPINAME
"RTN","BPSRPT7",254,0)
 I $L(RETV)>68 S RETV=$E(RETV,1,68)_"..."
"RTN","BPSRPT7",255,0)
 Q RETV
"RTN","BPSRPT8")
0^44^B84250810
"RTN","BPSRPT8",1,0)
BPSRPT8 ;BHAM ISC/BEE - ECME REPORTS ;14-FEB-05
"RTN","BPSRPT8",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8**;JUN 2004;Build 29
"RTN","BPSRPT8",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSRPT8",4,0)
 ;
"RTN","BPSRPT8",5,0)
 Q
"RTN","BPSRPT8",6,0)
 ;
"RTN","BPSRPT8",7,0)
 ;Routine to Display the Reports in Excel
"RTN","BPSRPT8",8,0)
 ;
"RTN","BPSRPT8",9,0)
 ;Print Report Line 1
"RTN","BPSRPT8",10,0)
 ;
"RTN","BPSRPT8",11,0)
 ; Input Variable -> BPRTYPE,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT
"RTN","BPSRPT8",12,0)
 ;                   BPBIL,BPINS,BPCOLL
"RTN","BPSRPT8",13,0)
 ; 
"RTN","BPSRPT8",14,0)
WRLINE1(BPRTYPE,BPREC,BPDIV,BPGRPLAN,BPDFN,BPRX,BPREF,BPX,BPSRTDT,BPBIL,BPINS,BPCOLL,BPPSEQ) ;
"RTN","BPSRPT8",15,0)
 ;
"RTN","BPSRPT8",16,0)
 ;Division
"RTN","BPSRPT8",17,0)
 S BPREC=$S(BPDIV=0:"BLANK",$$DIVNAME^BPSSCRDS(BPDIV)]"":$$DIVNAME^BPSSCRDS(BPDIV),1:BPDIV)_U
"RTN","BPSRPT8",18,0)
 ;Insurance
"RTN","BPSRPT8",19,0)
 I BPRTYPE'=5,BPRTYPE'=6 S BPREC=BPREC_$E(BPGRPLAN,1,90)_U
"RTN","BPSRPT8",20,0)
 S BPREC=BPREC_$$PATNAME^BPSRPT6(BPDFN)_U  ;Patient Name
"RTN","BPSRPT8",21,0)
 S BPREC=BPREC_"("_$$SSN4^BPSRPT6(BPDFN)_")"_U ;L4SSN
"RTN","BPSRPT8",22,0)
 S BPREC=BPREC_$$RXNUM^BPSRPT6(BPRX)_$$COPAY^BPSRPT6(BPRX)_U ;RX Number
"RTN","BPSRPT8",23,0)
 S BPREC=BPREC_BPREF_"/"_$$ECMENUM^BPSRPT1($P(BPX,U,3))_U ;Refill/ECME Number
"RTN","BPSRPT8",24,0)
 ;
"RTN","BPSRPT8",25,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT8",26,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U  ;Date
"RTN","BPSRPT8",27,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",28,0)
 . S BPREC=BPREC_$TR($J(BPINS,10,2)," ")_U ;$Ins. Paid
"RTN","BPSRPT8",29,0)
 . S BPREC=BPREC_$S(BPCOLL]"":$TR($J(BPCOLL,10,2)," "),1:"")_U ;$Collected
"RTN","BPSRPT8",30,0)
 ;
"RTN","BPSRPT8",31,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT8",32,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U ;Date
"RTN","BPSRPT8",33,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(+BPX)_U  ;Released On
"RTN","BPSRPT8",34,0)
 . ;RX INFO
"RTN","BPSRPT8",35,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",36,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U  ;Fill Type
"RTN","BPSRPT8",37,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",38,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/RL",1:"/NR")_U ;RL/NR
"RTN","BPSRPT8",39,0)
 . S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U
"RTN","BPSRPT8",40,0)
 . S BPREC=BPREC_$S($$CLOSED02^BPSSCR03($P(^BPST($P(BPX,U,3),0),U,4))=1:"C",1:"O")_U ;Open/Closed
"RTN","BPSRPT8",41,0)
 . S BPREC=BPREC_$$ELIGCODE^BPSSCR05($P(BPX,U,3))_U ;Eligibility
"RTN","BPSRPT8",42,0)
 ;
"RTN","BPSRPT8",43,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT8",44,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(BPSRTDT)_U ;Date
"RTN","BPSRPT8",45,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",46,0)
 . S BPREC=BPREC_$TR($J(BPINS,10,2)," ")_U ;Insurance Response
"RTN","BPSRPT8",47,0)
 ;
"RTN","BPSRPT8",48,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT8",49,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1($$TRANDT^BPSRPT2($P(BPX,U,3),1))_U ;Completed
"RTN","BPSRPT8",50,0)
 . S BPREC=BPREC_$$TTYPE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)_U ;Trans Type
"RTN","BPSRPT8",51,0)
 . S BPREC=BPREC_$$RESPONSE^BPSRPT7($P(BPX,U,4),$P(BPX,U,5),BPPSEQ)_U ;Payer Response
"RTN","BPSRPT8",52,0)
 . S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U ;RX COB
"RTN","BPSRPT8",53,0)
 ;
"RTN","BPSRPT8",54,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT8",55,0)
 . ;RX INFO
"RTN","BPSRPT8",56,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",57,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",58,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",59,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/RL",1:"/NR")_U ;RL/NR
"RTN","BPSRPT8",60,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")_U
"RTN","BPSRPT8",61,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",62,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",63,0)
 Q
"RTN","BPSRPT8",64,0)
 ;
"RTN","BPSRPT8",65,0)
 ;Print Report Line 2
"RTN","BPSRPT8",66,0)
 ;
"RTN","BPSRPT8",67,0)
 ; Input Variable -> BPRTYPE,BPX,BPRX,BPREF,BPBIL,BPGRPLAN
"RTN","BPSRPT8",68,0)
 ; 
"RTN","BPSRPT8",69,0)
WRLINE2(BPRTYPE,BPREC,BPX,BPRX,BPREF,BPBIL,BPGRPLAN,BPPSEQ) ;
"RTN","BPSRPT8",70,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT8",71,0)
 . ;Drug, Released On
"RTN","BPSRPT8",72,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",73,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(+BPX)_U
"RTN","BPSRPT8",74,0)
 . ;RX INFO
"RTN","BPSRPT8",75,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",76,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",77,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",78,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/RL",1:"/NR")_U ;RL/NR
"RTN","BPSRPT8",79,0)
 . I BPRTYPE=4 S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U
"RTN","BPSRPT8",80,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT8",81,0)
 . I BPRTYPE=1 S BPREC=BPREC_U_$$BILL^BPSRPT6(BPRX,BPREF,BPPSEQ)_U_$$RXCOB($G(BPPSEQ)) ;Bill # and RX COB
"RTN","BPSRPT8",82,0)
 ;
"RTN","BPSRPT8",83,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT8",84,0)
 . S BPREC=BPREC_$E($$CRDHLDID^BPSRPT2(+$P(BPX,U,3)),3,23)_U ;Cardholder ID
"RTN","BPSRPT8",85,0)
 . S BPREC=BPREC_$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)_U ;Group ID
"RTN","BPSRPT8",86,0)
 . S BPREC=BPREC_$TR($J(BPBIL,10,2)," ")_U ;$Billed
"RTN","BPSRPT8",87,0)
 . S BPREC=BPREC_$$QTY^BPSRPT6($P(BPX,U,3))_U ;Qty
"RTN","BPSRPT8",88,0)
 . S BPREC=BPREC_$$GETNDC^BPSRPT6(BPRX,BPREF)_U ;NDC#
"RTN","BPSRPT8",89,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",90,0)
 ;
"RTN","BPSRPT8",91,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT8",92,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",93,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",94,0)
 . ;RX INFO
"RTN","BPSRPT8",95,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",96,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",97,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",98,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/RL",1:"/NR")_U ;RL/NR
"RTN","BPSRPT8",99,0)
 . S BPREC=BPREC_$$RXCOB($G(BPPSEQ))_U
"RTN","BPSRPT8",100,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")
"RTN","BPSRPT8",101,0)
 ;
"RTN","BPSRPT8",102,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT8",103,0)
 . S BPREC=BPREC_$$DRGNAM^BPSRPT6($P(BPX,U,14),32)_U ;Drug
"RTN","BPSRPT8",104,0)
 . S BPREC=BPREC_$TR($$GETNDC^BPSRPT6(BPRX,BPREF),"-")_U
"RTN","BPSRPT8",105,0)
 . ;RX INFO
"RTN","BPSRPT8",106,0)
 . S BPREC=BPREC_$$MWC^BPSRPT6(BPRX,BPREF)_U ;Fill Location
"RTN","BPSRPT8",107,0)
 . S BPREC=BPREC_$$RTBCKNAM^BPSRPT1($$RTBCK^BPSRPT1($P(BPX,U,3)))_U ;Fill Type
"RTN","BPSRPT8",108,0)
 . S BPREC=BPREC_$$RXSTATUS^BPSRPT6($P(BPX,U,3)) ;Status
"RTN","BPSRPT8",109,0)
 . S BPREC=BPREC_$S($P(BPX,U):"/RL",1:"/NR")_U ;RL/NR
"RTN","BPSRPT8",110,0)
 . S BPREC=BPREC_$S($P(BPX,U,13):"REJ",1:"")_U
"RTN","BPSRPT8",111,0)
 . I $P(BPGRPLAN,U,2)]"" S BPREC=BPREC_$E($P(BPGRPLAN,U,2),1,30) ;Insurance
"RTN","BPSRPT8",112,0)
 . S BPREC=BPREC_U_$$ELAPSE^BPSRPT6($P(BPX,U,3))  ;Elapsed Time
"RTN","BPSRPT8",113,0)
 ;
"RTN","BPSRPT8",114,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT8",115,0)
 . S BPREC=BPREC_$E($$CRDHLDID^BPSRPT2(+$P(BPX,U,3)),3,23)_U ;Cardholder ID
"RTN","BPSRPT8",116,0)
 . S BPREC=BPREC_$E($$GRPID^BPSRPT2(+$P(BPX,U,3)),3,10)_U  ;Group ID
"RTN","BPSRPT8",117,0)
 . S BPREC=BPREC_$$DATTIM^BPSRPT1(+$$CLOSEDT^BPSRPT2(+$P(BPX,U,3)))_U ;Close Dt/Time
"RTN","BPSRPT8",118,0)
 . S BPREC=BPREC_$E($$CLSBY^BPSRPT6(+$P(BPX,U,3)),1,25)_U ;Close By
"RTN","BPSRPT8",119,0)
 . S BPREC=BPREC_$E($P($$CLRSN^BPSRPT7(+$P(BPX,U,3)),U,2),1,30)_U ;Close Reason
"RTN","BPSRPT8",120,0)
 Q
"RTN","BPSRPT8",121,0)
 ;
"RTN","BPSRPT8",122,0)
 ;Print Report Line 3
"RTN","BPSRPT8",123,0)
 ;
"RTN","BPSRPT8",124,0)
 ; Input Variable -> BPRTYPE,BPX
"RTN","BPSRPT8",125,0)
 ; 
"RTN","BPSRPT8",126,0)
WRLINE3(BPRTYPE,BPREC,BPX) N BP59,BPSARR,BPRJCNT,BPZZ
"RTN","BPSRPT8",127,0)
 S BP59=+$P(BPX,U,3)
"RTN","BPSRPT8",128,0)
 ;
"RTN","BPSRPT8",129,0)
 I (",2,7,")[BPRTYPE D  Q
"RTN","BPSRPT8",130,0)
 .S BPREC=BPREC_$$CLAIMID^BPSRPT2(BP59)_U ;Claim ID
"RTN","BPSRPT8",131,0)
 .S BPRJCNT=$$REJTEXT^BPSRPT2(BP59,.BPSARR)
"RTN","BPSRPT8",132,0)
 .F BPZZ=1:1:BPRJCNT S:BPZZ'=1 BPREC=BPREC_"," S BPREC=BPREC_$P(BPSARR(BPZZ),":")
"RTN","BPSRPT8",133,0)
 .;
"RTN","BPSRPT8",134,0)
 .;Write one record per reject/close code
"RTN","BPSRPT8",135,0)
 .S:+BPRJCNT=0 BPRJCNT=1
"RTN","BPSRPT8",136,0)
 .F BPZZ=1:1:BPRJCNT W !,$G(BPREC),U,$P($G(BPSARR(BPZZ)),":"),U,$P($G(BPSARR(BPZZ)),":",2)
"RTN","BPSRPT8",137,0)
 ;
"RTN","BPSRPT8",138,0)
 I BPRTYPE=4 D
"RTN","BPSRPT8",139,0)
 . ;Method
"RTN","BPSRPT8",140,0)
 . I $$AUTOREV^BPSRPT1(BP59) S BPREC=BPREC_U_"AUTO"_U
"RTN","BPSRPT8",141,0)
 . E  S BPREC=BPREC_U_"REGULAR"_U
"RTN","BPSRPT8",142,0)
 . ;Return Status
"RTN","BPSRPT8",143,0)
 . I $P(BPX,U,15)["ACCEPTED" S BPREC=BPREC_"ACCEPTED"_U
"RTN","BPSRPT8",144,0)
 . E  S BPREC=BPREC_"REJECTED"_U
"RTN","BPSRPT8",145,0)
 . ;Reason
"RTN","BPSRPT8",146,0)
 . S BPREC=BPREC_$$RVSRSN^BPSRPT7(+$P(BPX,U,3))
"RTN","BPSRPT8",147,0)
 ;
"RTN","BPSRPT8",148,0)
 ;Write the record
"RTN","BPSRPT8",149,0)
 W !,$G(BPREC)
"RTN","BPSRPT8",150,0)
 Q
"RTN","BPSRPT8",151,0)
 ;
"RTN","BPSRPT8",152,0)
 ;Print Excel Header
"RTN","BPSRPT8",153,0)
 ;
"RTN","BPSRPT8",154,0)
HDR(BPRTYPE) ;
"RTN","BPSRPT8",155,0)
 ;
"RTN","BPSRPT8",156,0)
 ;Check if header already printed
"RTN","BPSRPT8",157,0)
 I $G(BPSDATA) Q
"RTN","BPSRPT8",158,0)
 S BPSDATA=1
"RTN","BPSRPT8",159,0)
 ;
"RTN","BPSRPT8",160,0)
 ;Division
"RTN","BPSRPT8",161,0)
 W !,"DIVISION",U
"RTN","BPSRPT8",162,0)
 ;
"RTN","BPSRPT8",163,0)
 I BPRTYPE'=5,BPRTYPE'=6 W "INSURANCE",U
"RTN","BPSRPT8",164,0)
 ;
"RTN","BPSRPT8",165,0)
 I (",1,2,3,4,5,7,")[BPRTYPE W "PATIENT NAME",U,"Pt.ID",U,"RX#",U,"REF/ECME#",U
"RTN","BPSRPT8",166,0)
 ;
"RTN","BPSRPT8",167,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT8",168,0)
 . W "DATE",U
"RTN","BPSRPT8",169,0)
 . W "$BILLED",U
"RTN","BPSRPT8",170,0)
 . W "$INS RESPONSE",U
"RTN","BPSRPT8",171,0)
 . W "$COLLECT",U
"RTN","BPSRPT8",172,0)
 . W "DRUG",U
"RTN","BPSRPT8",173,0)
 . W "NDC",U
"RTN","BPSRPT8",174,0)
 . W "RELEASED ON",U
"RTN","BPSRPT8",175,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",176,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",177,0)
 . W "STATUS",U
"RTN","BPSRPT8",178,0)
 . I BPRTYPE=4 W "RX COB",U
"RTN","BPSRPT8",179,0)
 . W "REJECTED"
"RTN","BPSRPT8",180,0)
 . I BPRTYPE=1 W U,"BILL#",U,"RX COB"
"RTN","BPSRPT8",181,0)
 . I BPRTYPE=4 W U,"REVERSAL METHOD",U,"RETURN STATUS",U,"REASON"
"RTN","BPSRPT8",182,0)
 ;
"RTN","BPSRPT8",183,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT8",184,0)
 . W "DATE",U
"RTN","BPSRPT8",185,0)
 . W "RELEASED ON",U
"RTN","BPSRPT8",186,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",187,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",188,0)
 . W "STATUS",U
"RTN","BPSRPT8",189,0)
 . W "RX COB",U
"RTN","BPSRPT8",190,0)
 . W "OPEN/CLOSED",U
"RTN","BPSRPT8",191,0)
 . W "ELIGIBILITY",U
"RTN","BPSRPT8",192,0)
 . W "CARDHOLD.ID",U
"RTN","BPSRPT8",193,0)
 . W "GROUP ID",U
"RTN","BPSRPT8",194,0)
 . W "$BILLED",U
"RTN","BPSRPT8",195,0)
 . W "QTY",U
"RTN","BPSRPT8",196,0)
 . W "NDC#",U
"RTN","BPSRPT8",197,0)
 . W "DRUG",U
"RTN","BPSRPT8",198,0)
 . W "CLAIM ID",U
"RTN","BPSRPT8",199,0)
 . W "REJECT CODE(S)",U
"RTN","BPSRPT8",200,0)
 . W "REJECT CODE",U
"RTN","BPSRPT8",201,0)
 . W "REJECT EXPLANATION"
"RTN","BPSRPT8",202,0)
 ;
"RTN","BPSRPT8",203,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT8",204,0)
 . W "DATE",U
"RTN","BPSRPT8",205,0)
 . W "$BILLED",U
"RTN","BPSRPT8",206,0)
 . W "$INS RESPONSE",U
"RTN","BPSRPT8",207,0)
 . W "DRUG",U
"RTN","BPSRPT8",208,0)
 . W "NDC",U
"RTN","BPSRPT8",209,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",210,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",211,0)
 . W "STATUS",U
"RTN","BPSRPT8",212,0)
 . W "RX COB",U
"RTN","BPSRPT8",213,0)
 . W "REJECTED"
"RTN","BPSRPT8",214,0)
 ;
"RTN","BPSRPT8",215,0)
 I BPRTYPE=5 D  Q
"RTN","BPSRPT8",216,0)
 . W "COMPLETED",U
"RTN","BPSRPT8",217,0)
 . W "TRANS TYPE",U
"RTN","BPSRPT8",218,0)
 . W "PAYER RESPONSE",U
"RTN","BPSRPT8",219,0)
 . W "RX COB",U
"RTN","BPSRPT8",220,0)
 . W "DRUG",U
"RTN","BPSRPT8",221,0)
 . W "NDC",U
"RTN","BPSRPT8",222,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",223,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",224,0)
 . W "STATUS",U
"RTN","BPSRPT8",225,0)
 . W "REJECTED",U
"RTN","BPSRPT8",226,0)
 . W "INSURANCE",U
"RTN","BPSRPT8",227,0)
 . W "ELAP TIME IN SECONDS"
"RTN","BPSRPT8",228,0)
 ;
"RTN","BPSRPT8",229,0)
 I BPRTYPE=6 D  Q
"RTN","BPSRPT8",230,0)
 .W "DATE",U
"RTN","BPSRPT8",231,0)
 .W "#CLAIMS",U
"RTN","BPSRPT8",232,0)
 .W "AMOUNT SUBMITTED",U
"RTN","BPSRPT8",233,0)
 .W "RETURNED REJECTED",U
"RTN","BPSRPT8",234,0)
 .W "RETURNED PAYABLE",U
"RTN","BPSRPT8",235,0)
 .W "AMOUNT TO RECEIVE",U
"RTN","BPSRPT8",236,0)
 .W "DIFFERENCE"
"RTN","BPSRPT8",237,0)
 ;
"RTN","BPSRPT8",238,0)
 I BPRTYPE=7 D  Q
"RTN","BPSRPT8",239,0)
 . W "FILL LOCATION",U
"RTN","BPSRPT8",240,0)
 . W "FILL TYPE",U
"RTN","BPSRPT8",241,0)
 . W "STATUS",U
"RTN","BPSRPT8",242,0)
 . W "REJECTED",U
"RTN","BPSRPT8",243,0)
 . W "DRUG",U
"RTN","BPSRPT8",244,0)
 . W "NDC",U
"RTN","BPSRPT8",245,0)
 . W "CARDHOLD.ID",U
"RTN","BPSRPT8",246,0)
 . W "GROUP ID",U
"RTN","BPSRPT8",247,0)
 . W "CLOSE DATE/TIME",U
"RTN","BPSRPT8",248,0)
 . W "CLOSED BY",U
"RTN","BPSRPT8",249,0)
 . W "CLOSE REASON",U
"RTN","BPSRPT8",250,0)
 . W "CLAIM ID",U
"RTN","BPSRPT8",251,0)
 . W "REJECT CODE(S)",U
"RTN","BPSRPT8",252,0)
 . W "REJECT CODE",U
"RTN","BPSRPT8",253,0)
 . W "REJECT EXPLANATION"
"RTN","BPSRPT8",254,0)
 Q
"RTN","BPSRPT8",255,0)
 ;
"RTN","BPSRPT8",256,0)
 ;Print Report Insurance Subtotals
"RTN","BPSRPT8",257,0)
 ;
"RTN","BPSRPT8",258,0)
ITOT(BPRTYPE,BPDIV,BPGRPLAN,BPTBIL,BPTINS,BPTCOLL,BPCNT) N BPNP
"RTN","BPSRPT8",259,0)
 I (BPRTYPE=1)!(BPRTYPE=4) D  Q
"RTN","BPSRPT8",260,0)
 .W !!,?78,"----------",?100,"----------",?122,"----------"
"RTN","BPSRPT8",261,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?78,$J(BPTBIL,10,2),?100,$J(BPTINS,10,2),?122,$J(BPTCOLL,10,2)
"RTN","BPSRPT8",262,0)
 .W !,"COUNT",?78,$J(BPCNT,10),?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT8",263,0)
 .W:BPCNT !,"MEAN",?78,$J(BPTBIL/BPCNT,10,2),?100,$J(BPTINS/BPCNT,10,2),?122,$J(BPTCOLL/BPCNT,10,2)
"RTN","BPSRPT8",264,0)
 I BPRTYPE=3 D  Q
"RTN","BPSRPT8",265,0)
 .W !!,?100,"----------",?122,"----------"
"RTN","BPSRPT8",266,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50),?100,$J(BPTBIL,10,2),?122,$J(BPTINS,10,2)
"RTN","BPSRPT8",267,0)
 .W !,"COUNT",?100,$J(BPCNT,10),?122,$J(BPCNT,10)
"RTN","BPSRPT8",268,0)
 .W:BPCNT !,"MEAN",?100,$J(BPTBIL/BPCNT,10,2),?122,$J(BPTINS/BPCNT,10,2)
"RTN","BPSRPT8",269,0)
 I BPRTYPE=2 D  Q
"RTN","BPSRPT8",270,0)
 .W !!,?41,"----------"
"RTN","BPSRPT8",271,0)
 .W !,"SUBTOTALS for INS:",$E(BPGRPLAN,1,22),?41,$J(BPTBIL,10,2)
"RTN","BPSRPT8",272,0)
 .W !,"COUNT",?41,$J(BPCNT,10)
"RTN","BPSRPT8",273,0)
 .W:BPCNT !,"MEAN",?41,$J(BPTBIL/BPCNT,10,2)
"RTN","BPSRPT8",274,0)
 I (BPRTYPE=7) D  Q
"RTN","BPSRPT8",275,0)
 .W !!,"SUBTOTALS for INS:",$E(BPGRPLAN,1,50)
"RTN","BPSRPT8",276,0)
 .N BPBILR
"RTN","BPSRPT8",277,0)
 .S BPBILR="" F  S BPBILR=$O(BPCNT(BPBILR)) Q:BPBILR=""  D  Q:BPQ
"RTN","BPSRPT8",278,0)
 ..S BPNP=$$CHKP^BPSRPT5(1) Q:BPQ
"RTN","BPSRPT8",279,0)
 ..W !,?3,BPBILR,?65,$J($G(BPCNT(BPBILR)),5)
"RTN","BPSRPT8",280,0)
 .Q:$G(BPQ)
"RTN","BPSRPT8",281,0)
 .W !,?65,"-----"
"RTN","BPSRPT8",282,0)
 .W !,"CLOSED CLAIMS SUBTOTAL",?65,$J(BPCNT,5)
"RTN","BPSRPT8",283,0)
 ;
"RTN","BPSRPT8",284,0)
 Q
"RTN","BPSRPT8",285,0)
 ;return RX COB as the 1st letter of the RX COB indicator
"RTN","BPSRPT8",286,0)
RXCOB(BPPSEQ) ;
"RTN","BPSRPT8",287,0)
 Q $S(BPPSEQ=1:"p",BPPSEQ=2:"s",1:"")
"RTN","BPSRPT8",288,0)
 ;BPSRPT8
"RTN","BPSRPT9")
0^8^B81558879
"RTN","BPSRPT9",1,0)
BPSRPT9 ;BHAM ISC/BNT - ECME REPORTS ;19-SEPT-08
"RTN","BPSRPT9",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8**;01-JUN-04;Build 29
"RTN","BPSRPT9",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSRPT9",4,0)
 ;
"RTN","BPSRPT9",5,0)
 Q
"RTN","BPSRPT9",6,0)
 ; Front End for Potential Secondary and Tricare Rx Claims Reports
"RTN","BPSRPT9",7,0)
 ; Input variable: BPRTYPE -> 8 = Potential Tricare
"RTN","BPSRPT9",8,0)
 ;                            9 = Potential Secondary
"RTN","BPSRPT9",9,0)
 ;
"RTN","BPSRPT9",10,0)
 ; Passed variables - The following local variables are passed around the BPSRPT* routines
"RTN","BPSRPT9",11,0)
 ;                    and are not passed as parameters but are assumed to be defined:
"RTN","BPSRPT9",12,0)
 ;                    BPACREJ,BPAUTREV,BPBEGDT,BPBLINE,BPCCRSN,BPDRGCL,BPDRUG,BPENDDT,BPEXCEL,
"RTN","BPSRPT9",13,0)
 ;                    BPINSINF,BPGRPLN,BPMWC,BPNOW,BPPAGE,BPPHARM,BPQ,BPQSTDRG,
"RTN","BPSRPT9",14,0)
 ;                    BPRLNRL,BPRTBCK,BPSDATA,BPSUMDET,BPRTYPE
"RTN","BPSRPT9",15,0)
 ;
"RTN","BPSRPT9",16,0)
EN(BPRTYPE) ;
"RTN","BPSRPT9",17,0)
 N BPREJCD,BPRLNRL,BPRPTNAM,BPRTBCK,BPSCR,BPSUMDET,CODE,POS,STAT,X,Y,BPINS,BPARR
"RTN","BPSRPT9",18,0)
 N BPSORT,BPCRON,BPSEL,BPS1,BPS2,BPS3,BPS4,BPS5,BPDT,BPPHARM,BPDIVS
"RTN","BPSRPT9",19,0)
 ;
"RTN","BPSRPT9",20,0)
 ;Verify that a valid report has been requested
"RTN","BPSRPT9",21,0)
 I ",8,9,"'[(","_$G(BPRTYPE)_",") D EN^DDIOL("<Invalid Menu Definition - Report Undefined>") H 3 Q
"RTN","BPSRPT9",22,0)
 ;
"RTN","BPSRPT9",23,0)
 D EN^DDIOL("SELECTION CRITERIA","","!")
"RTN","BPSRPT9",24,0)
 ;Prompt for ECME Pharmacy Division(s) (No Default)
"RTN","BPSRPT9",25,0)
 ;Sets up BPPHARM variable and array, BPPHARM =0 ALL or BPPHARM=1,BPPHARM(ptr) for list
"RTN","BPSRPT9",26,0)
 S X=$$SELPHARM^BPSRPT3() I X="^" Q
"RTN","BPSRPT9",27,0)
 ;
"RTN","BPSRPT9",28,0)
 ;Prompt to select Date Range
"RTN","BPSRPT9",29,0)
 ;Returns (Start Date^End Date)
"RTN","BPSRPT9",30,0)
 S BPDT=$$SELDATE() I BPDT="^" Q
"RTN","BPSRPT9",31,0)
 ;
"RTN","BPSRPT9",32,0)
 ;Get sort criteria
"RTN","BPSRPT9",33,0)
 I $$GETSORT(BPRTYPE)=-1 Q
"RTN","BPSRPT9",34,0)
 ;
"RTN","BPSRPT9",35,0)
 D DEV("RUN^BPSRPT9",BPRTYPE)
"RTN","BPSRPT9",36,0)
 Q
"RTN","BPSRPT9",37,0)
 ;
"RTN","BPSRPT9",38,0)
RUN ; Process Report - runs in the background or foreground
"RTN","BPSRPT9",39,0)
 N BPRPTARR
"RTN","BPSRPT9",40,0)
 I BPRTYPE=9 D GETSEC^BPSRPT9A(BPDT,.BPRPTARR)  ; Collect Potential Secondary Rx Claims data
"RTN","BPSRPT9",41,0)
 I BPRTYPE=8 D GETTRI^BPSRPT9A(BPDT,.BPRPTARR)  ; Collect Potential Tricare Rx Claims data
"RTN","BPSRPT9",42,0)
 ;
"RTN","BPSRPT9",43,0)
 U IO
"RTN","BPSRPT9",44,0)
 I BPRTYPE=8 D PRNTTRI(.BPRPTARR)
"RTN","BPSRPT9",45,0)
 I BPRTYPE=9 D PRNTSEC(.BPRPTARR)
"RTN","BPSRPT9",46,0)
 ;
"RTN","BPSRPT9",47,0)
 D ^%ZISC    ; close the device
"RTN","BPSRPT9",48,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","BPSRPT9",49,0)
 Q
"RTN","BPSRPT9",50,0)
 ;
"RTN","BPSRPT9",51,0)
 ; Print TRICARE Report
"RTN","BPSRPT9",52,0)
PRNTTRI(BPARR) ;
"RTN","BPSRPT9",53,0)
 N BPG,BPQUIT,CNT,RX,FILL,FILLDT,PATNAME,COB,ELIG,PAYER,INSC,PSRT,PSRTID,SSRT,TSRT,DATA
"RTN","BPSRPT9",54,0)
 N SSRTTYP,TSRTTYP
"RTN","BPSRPT9",55,0)
 S SSRTTYP=$P($P(BPSORT,U,2),":")
"RTN","BPSRPT9",56,0)
 S TSRTTYP=$P($P(BPSORT,U,3),":")
"RTN","BPSRPT9",57,0)
 S (BPG,BPQUIT,CNT)=0
"RTN","BPSRPT9",58,0)
 ;
"RTN","BPSRPT9",59,0)
 ; if no data found, display header and message and then get out
"RTN","BPSRPT9",60,0)
 I '$D(BPARR) D  Q
"RTN","BPSRPT9",61,0)
 . D HDR(BPRTYPE)
"RTN","BPSRPT9",62,0)
 . W !!?5,"No potential TRICARE Rx claims available for date range"
"RTN","BPSRPT9",63,0)
 . Q
"RTN","BPSRPT9",64,0)
 ;
"RTN","BPSRPT9",65,0)
 S PSRT=-DT-1
"RTN","BPSRPT9",66,0)
 D HDR(BPRTYPE)
"RTN","BPSRPT9",67,0)
 F  S PSRT=$O(BPARR(PSRT)) Q:PSRT=""  D  Q:BPQUIT
"RTN","BPSRPT9",68,0)
 . S PSRTID=$S($P($P(BPSORT,U),":")="N":"Patient Name: ",$P($P(BPSORT,U),":")="P":"Payer: ",$P($P(BPSORT,U),":")="S":"Date of Service: ",$P($P(BPSORT,U),":")="O":"Payer Sequence: ",1:"Division: ")
"RTN","BPSRPT9",69,0)
 . I PSRT'=0 W !!,PSRTID,$S($P($P(BPSORT,U),":")="S":$$FMTE^XLFDT($$ABS^XLFMTH(PSRT),"2D"),1:PSRT)
"RTN","BPSRPT9",70,0)
 . S SSRT=-DT-1 F  S SSRT=$O(BPARR(PSRT,SSRT)) Q:SSRT=""  D  Q:BPQUIT
"RTN","BPSRPT9",71,0)
 . . I SSRTTYP="D" W !,"   Division: ",SSRT
"RTN","BPSRPT9",72,0)
 . . S TSRT=-DT-1 F  S TSRT=$O(BPARR(PSRT,SSRT,TSRT)) Q:TSRT=""  D  Q:BPQUIT
"RTN","BPSRPT9",73,0)
 . . . I TSRTTYP="D" W !,"   Division: ",TSRT
"RTN","BPSRPT9",74,0)
 . . . S CNT=0 F  S CNT=$O(BPARR(PSRT,SSRT,TSRT,CNT)) Q:CNT=""  D  Q:BPQUIT
"RTN","BPSRPT9",75,0)
 . . . . S DATA=BPARR(PSRT,SSRT,TSRT,CNT)
"RTN","BPSRPT9",76,0)
 . . . . S RX=$P(DATA,U,2),FILL=$P(DATA,U,3),FILLDT=$P(DATA,U,4),PATNAME=$P(DATA,U,5)
"RTN","BPSRPT9",77,0)
 . . . . S INSC=0 F  S INSC=$O(BPARR(PSRT,SSRT,TSRT,CNT,"INS",INSC)) Q:INSC=""  D
"RTN","BPSRPT9",78,0)
 . . . . . S COB=$S(INSC=1:"p",INSC=2:"s",1:"t")
"RTN","BPSRPT9",79,0)
 . . . . . S ELIG=$P(BPARR(PSRT,SSRT,TSRT,CNT,"ELIG"),U)
"RTN","BPSRPT9",80,0)
 . . . . . S PAYER=$E($P(BPARR(PSRT,SSRT,TSRT,CNT,"INS",INSC),U)_" - "_$P(BPARR(PSRT,SSRT,TSRT,CNT,"INS",INSC),U,2),1,23)
"RTN","BPSRPT9",81,0)
 . . . . . I $Y>(IOSL-4) D HDR(BPRTYPE) Q:BPQUIT
"RTN","BPSRPT9",82,0)
 . . . . . W !,RX,?10,FILL,?15,FILLDT,?24,$E(PATNAME,1,15),?40,$P(DATA,U,6),?45,COB,?49,ELIG,?55,PAYER
"RTN","BPSRPT9",83,0)
 . . . . . S ELIG=$S($P(BPARR(PSRT,SSRT,TSRT,CNT,"ELIG"),U,2)]"":$P(BPARR(PSRT,SSRT,TSRT,CNT,"ELIG"),U,2),1:"")
"RTN","BPSRPT9",84,0)
 . . . . . I ELIG]"" W !,?49,ELIG
"RTN","BPSRPT9",85,0)
 Q
"RTN","BPSRPT9",86,0)
 ;
"RTN","BPSRPT9",87,0)
 ; Print Secondary Report
"RTN","BPSRPT9",88,0)
PRNTSEC(BPARR) ;
"RTN","BPSRPT9",89,0)
 N BPG,BPQUIT,CNT,INSC,PAYER,PSRT,PSRTID,SSRT,TSRT,DATA,INSDATA,LGFLG1,LGFLG2
"RTN","BPSRPT9",90,0)
 N SSRTTYP,TSRTTYP
"RTN","BPSRPT9",91,0)
 S SSRTTYP=$P($P(BPSORT,U,2),":")
"RTN","BPSRPT9",92,0)
 S TSRTTYP=$P($P(BPSORT,U,3),":")
"RTN","BPSRPT9",93,0)
 S (BPG,BPQUIT)=0
"RTN","BPSRPT9",94,0)
 ;
"RTN","BPSRPT9",95,0)
 ; if no data found, display header and message and then get out
"RTN","BPSRPT9",96,0)
 I '$D(BPARR) D  Q
"RTN","BPSRPT9",97,0)
 . D HDR(BPRTYPE)
"RTN","BPSRPT9",98,0)
 . W !!?5,"No potential secondary Rx claims available for date range"
"RTN","BPSRPT9",99,0)
 . Q
"RTN","BPSRPT9",100,0)
 ;
"RTN","BPSRPT9",101,0)
 S PSRT=-DT-1
"RTN","BPSRPT9",102,0)
 D HDR(BPRTYPE)
"RTN","BPSRPT9",103,0)
 F  S PSRT=$O(BPARR(PSRT)) Q:PSRT=""  D  Q:BPQUIT
"RTN","BPSRPT9",104,0)
 . S PSRTID=$S($P($P(BPSORT,U),":")="N":"Patient Name: ",$P($P(BPSORT,U),":")="P":"Payer: ",$P($P(BPSORT,U),":")="S":"Date of Service: ",$P($P(BPSORT,U),":")="O":"Payer Sequence: ",1:"Division: ")
"RTN","BPSRPT9",105,0)
 . I PSRT'=0 W !!,PSRTID,$S($P($P(BPSORT,U),":")="S":$$FMTE^XLFDT($$ABS^XLFMTH(PSRT),"2D"),1:PSRT)
"RTN","BPSRPT9",106,0)
 . S SSRT=-DT-1 F  S SSRT=$O(BPARR(PSRT,SSRT)) Q:SSRT=""  D  Q:BPQUIT
"RTN","BPSRPT9",107,0)
 . . I SSRTTYP="D" W !,"   Division: ",SSRT
"RTN","BPSRPT9",108,0)
 . . S TSRT=-DT-1 F  S TSRT=$O(BPARR(PSRT,SSRT,TSRT)) Q:TSRT=""  D  Q:BPQUIT
"RTN","BPSRPT9",109,0)
 . . . I TSRTTYP="D" W !,"   Division: ",TSRT
"RTN","BPSRPT9",110,0)
 . . . S CNT=0 F  S CNT=$O(BPARR(PSRT,SSRT,TSRT,CNT)) Q:CNT=""  D  Q:BPQUIT
"RTN","BPSRPT9",111,0)
 . . . . S DATA=$G(BPARR(PSRT,SSRT,TSRT,CNT))
"RTN","BPSRPT9",112,0)
 . . . . I $Y>(IOSL-4) D HDR(BPRTYPE) Q:BPQUIT
"RTN","BPSRPT9",113,0)
 . . . . I DATA]"" W !,$P(DATA,U,2),?11,$P(DATA,U,3),?21,$P(DATA,U,4),?26,$E($P(DATA,U,6),1,15),?42,$P(DATA,U,9),?47,$P(DATA,U,7),?51,$P(DATA,U,5),?60,$E($P(DATA,U,8),1,20)
"RTN","BPSRPT9",114,0)
 . . . . ;
"RTN","BPSRPT9",115,0)
 . . . . ; If the bill# contains "(P)" it is a primary ECME reject, flag it for the legend
"RTN","BPSRPT9",116,0)
 . . . . I $P(DATA,U,2)["(P)" S LGFLG1=1
"RTN","BPSRPT9",117,0)
 . . . . S INSC=0 F  S INSC=$O(BPARR(PSRT,SSRT,TSRT,CNT,INSC)) Q:INSC=""  D  Q:BPQUIT
"RTN","BPSRPT9",118,0)
 . . . . . S INSDATA=BPARR(PSRT,SSRT,TSRT,CNT,INSC)
"RTN","BPSRPT9",119,0)
 . . . . . I $Y>(IOSL-4) D HDR(BPRTYPE) Q:BPQUIT
"RTN","BPSRPT9",120,0)
 . . . . . W !,?47,$P(INSDATA,U),?60,$E($P(INSDATA,U,2),1,20)
"RTN","BPSRPT9",121,0)
 . . . . . I $P(INSDATA,U,1)["-" S LGFLG2=1
"RTN","BPSRPT9",122,0)
 ;
"RTN","BPSRPT9",123,0)
 Q:BPQUIT
"RTN","BPSRPT9",124,0)
 I '$G(LGFLG1),'$G(LGFLG2) Q
"RTN","BPSRPT9",125,0)
 ; display the legend at the end of the report
"RTN","BPSRPT9",126,0)
 I $Y>(IOSL-4) D HDR(BPRTYPE) Q:BPQUIT
"RTN","BPSRPT9",127,0)
 W !
"RTN","BPSRPT9",128,0)
 I $G(LGFLG1) W !,"Bill# ""(P) Rej"" indicates a rejected/closed primary ECME claim"
"RTN","BPSRPT9",129,0)
 I $G(LGFLG2) W !,"COB ""-"" indicates a blank COB field in the pt. ins. policy"
"RTN","BPSRPT9",130,0)
 Q
"RTN","BPSRPT9",131,0)
 ;
"RTN","BPSRPT9",132,0)
 ; Prompt for sort order
"RTN","BPSRPT9",133,0)
GETSORT(BPRTYPE) N DIR,DIRUT,DTOUT,DUOUT,X,Y,BPS1,BPS2,BPS3,BPS4,BPSEL
"RTN","BPSRPT9",134,0)
 ;
"RTN","BPSRPT9",135,0)
 S BPSORT="^^",BPCRON=1
"RTN","BPSRPT9",136,0)
 S BPS1="N:Patient Name;",BPS2="P:Payer;",BPS3="S:Date Of Service;",BPS4="D:Division;"
"RTN","BPSRPT9",137,0)
 ;
"RTN","BPSRPT9",138,0)
 D EN^DDIOL("SORT CRITERIA","","!")
"RTN","BPSRPT9",139,0)
 S BPSEL=BPS1_BPS2_BPS3_BPS4
"RTN","BPSRPT9",140,0)
 ;Set Primary Sort
"RTN","BPSRPT9",141,0)
 S DIR(0)="SB^"_BPSEL
"RTN","BPSRPT9",142,0)
 S DIR("?")="Enter a code from the list to indicate the Primary sort order."
"RTN","BPSRPT9",143,0)
 S DIR("A")="Primary Sort"
"RTN","BPSRPT9",144,0)
 S DIR("B")="Division"
"RTN","BPSRPT9",145,0)
 D ^DIR K DIR
"RTN","BPSRPT9",146,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) Q -1
"RTN","BPSRPT9",147,0)
 S $P(BPSORT,U)=$S(Y=$P(BPS1,":"):BPS1,Y=$P(BPS2,":"):BPS2,Y=$P(BPS3,":"):BPS3,1:BPS4) I Y="S" S BPCRON=$$ASKCRON() I BPCRON="^" Q -1
"RTN","BPSRPT9",148,0)
 ;
"RTN","BPSRPT9",149,0)
 ;Get Secondary Sort
"RTN","BPSRPT9",150,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT9",151,0)
 S BPSEL=$$SRTORD($P($P(BPSORT,U),":"))
"RTN","BPSRPT9",152,0)
 S DIR(0)="SOB^"_BPSEL
"RTN","BPSRPT9",153,0)
 S DIR("?")="Enter a code from the list to indicate the Secondary sort order."
"RTN","BPSRPT9",154,0)
 S DIR("A")="Secondary Sort"
"RTN","BPSRPT9",155,0)
 D ^DIR K DIR
"RTN","BPSRPT9",156,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) Q -1
"RTN","BPSRPT9",157,0)
 S $P(BPSORT,U,2)=$S(Y=$P(BPS1,":"):BPS1,Y=$P(BPS2,":"):BPS2,Y=$P(BPS3,":"):BPS3,1:BPS4) I Y="S" S BPCRON=$$ASKCRON() I BPCRON="^" Q -1
"RTN","BPSRPT9",158,0)
 ;
"RTN","BPSRPT9",159,0)
 ;Get Tertiary Sort
"RTN","BPSRPT9",160,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT9",161,0)
 S BPSEL=$$SRTORD($P($P(BPSORT,U,2),":"))
"RTN","BPSRPT9",162,0)
 S DIR(0)="SOB^"_BPSEL
"RTN","BPSRPT9",163,0)
 S DIR("A")="Tertiary Sort"
"RTN","BPSRPT9",164,0)
 S DIR("?")="Enter a code from the list to indicate the Tertiary sort order."
"RTN","BPSRPT9",165,0)
 D ^DIR K DIR
"RTN","BPSRPT9",166,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1) Q -1
"RTN","BPSRPT9",167,0)
 S $P(BPSORT,U,3)=$S(Y=$P(BPS1,":"):BPS1,Y=$P(BPS2,":"):BPS2,Y=$P(BPS3,":"):BPS3,1:BPS4) I Y="S" S BPCRON=$$ASKCRON() I BPCRON="^" Q -1
"RTN","BPSRPT9",168,0)
 Q 0
"RTN","BPSRPT9",169,0)
 ;
"RTN","BPSRPT9",170,0)
 ;Ask if Date should be displayed in chronological order
"RTN","BPSRPT9",171,0)
ASKCRON() ;
"RTN","BPSRPT9",172,0)
 N DIR,DIRUT,DTOUT,DUOUT,X,Y
"RTN","BPSRPT9",173,0)
 S DIR(0)="Y"
"RTN","BPSRPT9",174,0)
 S DIR("A")="     Display oldest date first"
"RTN","BPSRPT9",175,0)
 S DIR("B")="YES"
"RTN","BPSRPT9",176,0)
 D ^DIR K DIR
"RTN","BPSRPT9",177,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($D(DIRUT)) Q "^"
"RTN","BPSRPT9",178,0)
 Q Y
"RTN","BPSRPT9",179,0)
 ;
"RTN","BPSRPT9",180,0)
 ;Handle the sort order display
"RTN","BPSRPT9",181,0)
SRTORD(Y) ;
"RTN","BPSRPT9",182,0)
 I Y="N" S BPS1=""
"RTN","BPSRPT9",183,0)
 I Y="P" S BPS2=""
"RTN","BPSRPT9",184,0)
 I Y="S" S BPS3=""
"RTN","BPSRPT9",185,0)
 I Y="D" S BPS4=""
"RTN","BPSRPT9",186,0)
 S BPSEL=BPS1_BPS2_BPS3_BPS4
"RTN","BPSRPT9",187,0)
 Q BPSEL
"RTN","BPSRPT9",188,0)
 ;
"RTN","BPSRPT9",189,0)
 ; Enter Date Range
"RTN","BPSRPT9",190,0)
 ;
"RTN","BPSRPT9",191,0)
 ; Return Value -> P1^P2
"RTN","BPSRPT9",192,0)
 ; 
"RTN","BPSRPT9",193,0)
 ;           where P1 = Earliest Date
"RTN","BPSRPT9",194,0)
 ;                    = ^ Exit
"RTN","BPSRPT9",195,0)
 ;                 P2 = Latest Date
"RTN","BPSRPT9",196,0)
 ;                    = blank for Exit
"RTN","BPSRPT9",197,0)
SELDATE() ;
"RTN","BPSRPT9",198,0)
 N BPSIBDT,DIR,DIRUT,DTOUT,DUOUT,VAL,X,Y
"RTN","BPSRPT9",199,0)
 S VAL="",DIR(0)="DA^:DT:EX",DIR("A")="EARLIEST DATE: "
"RTN","BPSRPT9",200,0)
 W ! D ^DIR
"RTN","BPSRPT9",201,0)
 ;
"RTN","BPSRPT9",202,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSRPT9",203,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S VAL="^"
"RTN","BPSRPT9",204,0)
 ;
"RTN","BPSRPT9",205,0)
 I VAL="" D
"RTN","BPSRPT9",206,0)
 .S $P(VAL,U)=Y
"RTN","BPSRPT9",207,0)
 .S DIR(0)="DA^"_VAL_":DT:EX",DIR("A")="  LATEST DATE: ",DIR("B")="T"
"RTN","BPSRPT9",208,0)
 .D ^DIR
"RTN","BPSRPT9",209,0)
 .;
"RTN","BPSRPT9",210,0)
 .;Check for "^", timeout, or blank entry
"RTN","BPSRPT9",211,0)
 .I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(X)="") S VAL="^" Q
"RTN","BPSRPT9",212,0)
 .;
"RTN","BPSRPT9",213,0)
 .;Define Entry
"RTN","BPSRPT9",214,0)
 .S $P(VAL,U,2)=Y
"RTN","BPSRPT9",215,0)
 ;
"RTN","BPSRPT9",216,0)
 Q VAL
"RTN","BPSRPT9",217,0)
 ;
"RTN","BPSRPT9",218,0)
 ;
"RTN","BPSRPT9",219,0)
 ;Device Selection
"RTN","BPSRPT9",220,0)
 ;Input: BPR = Routine
"RTN","BPSRPT9",221,0)
 ;       BPRTYPE = Report Type used to identify Task name
"RTN","BPSRPT9",222,0)
DEV(BPR,BPRTYPE) ;
"RTN","BPSRPT9",223,0)
 N %ZIS,ZTSK,ZTSAVE,POP,ZTRTN,ZTDESC
"RTN","BPSRPT9",224,0)
 S %ZIS="MQ" D ^%ZIS Q:POP
"RTN","BPSRPT9",225,0)
 I $D(IO("Q")) D  Q
"RTN","BPSRPT9",226,0)
 . S ZTRTN=BPR,ZTDESC=$$RPTNAME(BPRTYPE),ZTSAVE("BP*")=""
"RTN","BPSRPT9",227,0)
 . D ^%ZTLOAD,HOME^%ZIS K IO("Q") W !,"QUEUED TASK #",ZTSK
"RTN","BPSRPT9",228,0)
 D @BPR
"RTN","BPSRPT9",229,0)
 Q
"RTN","BPSRPT9",230,0)
 ;
"RTN","BPSRPT9",231,0)
RPTNAME(BPRTYPE) ;
"RTN","BPSRPT9",232,0)
 ;Verify that a valid report has been requested
"RTN","BPSRPT9",233,0)
 Q $S(BPRTYPE=8:"Potential TRICARE Rx Claims Report",BPRTYPE=9:"Potential Secondary Rx Claims Report",1:"")
"RTN","BPSRPT9",234,0)
 ;
"RTN","BPSRPT9",235,0)
 ;Print the report Header
"RTN","BPSRPT9",236,0)
 ;Input: BPRTYPE = Report Type
"RTN","BPSRPT9",237,0)
HDR(BPRTYPE) ;
"RTN","BPSRPT9",238,0)
 ; BPG is assumed for page #
"RTN","BPSRPT9",239,0)
 Q:BPQUIT
"RTN","BPSRPT9",240,0)
 N DIR,X,Y,BPDIV
"RTN","BPSRPT9",241,0)
 I $E(IOST,1,2)="C-",BPG S DIR(0)="E" D ^DIR K DIR I $D(DIRUT)!($D(DUOUT)) S BPQUIT=1 K DIRUT,DTOUT,DUOUT Q
"RTN","BPSRPT9",242,0)
 S BPG=BPG+1
"RTN","BPSRPT9",243,0)
 W @IOF
"RTN","BPSRPT9",244,0)
 F X=1:1:IOM W "="
"RTN","BPSRPT9",245,0)
 W $$RPTNAME(BPRTYPE),"     ",$$FMTE^XLFDT($P(BPDT,U),"2D")," - ",$$FMTE^XLFDT($P(BPDT,U,2),"2D"),?IOM-10," Page: ",BPG
"RTN","BPSRPT9",246,0)
 W !,"Selected Divisions: "
"RTN","BPSRPT9",247,0)
 I 'BPPHARM W "ALL"
"RTN","BPSRPT9",248,0)
 I BPPHARM S X=0 F  S X=$O(BPPHARM(X)) Q:X=""  W $P(BPPHARM(X),U,2),"; "
"RTN","BPSRPT9",249,0)
 W !,"Sorted By: "_$P($P(BPSORT,U),":",2)_" "_$P($P(BPSORT,U,2),":",2)_" "_$P($P(BPSORT,U,3),":",2)
"RTN","BPSRPT9",250,0)
 ; Write header for Potential Secondary Claims Rpt
"RTN","BPSRPT9",251,0)
 I BPRTYPE=9 D
"RTN","BPSRPT9",252,0)
 . W !,"Bill#",?11,"RX#",?21,"Fill",?26,"Patient",?41,"PatID",?47,"COB",?51,"Date",?60,"Payers",!
"RTN","BPSRPT9",253,0)
 ; Write header for Potential Tricare Claims Rpt
"RTN","BPSRPT9",254,0)
 I BPRTYPE=8 D
"RTN","BPSRPT9",255,0)
 . W !,"RX#",?10,"Fill",?15,"Date",?24,"Patient",?39,"PatID",?45,"COB",?49,"Elig",?55,"Payers",!
"RTN","BPSRPT9",256,0)
 F X=1:1:IOM W "-"
"RTN","BPSRPT9",257,0)
 Q
"RTN","BPSRPT9A")
0^41^B71706588
"RTN","BPSRPT9A",1,0)
BPSRPT9A ;BHAM ISC/BNT - ECME REPORTS UTILITIES ;19-SEPT-08
"RTN","BPSRPT9A",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**8**;01-JUN-04;Build 29
"RTN","BPSRPT9A",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSRPT9A",4,0)
 ;
"RTN","BPSRPT9A",5,0)
 ; Use of COLLECT^IBOSRX supported by IA 5361
"RTN","BPSRPT9A",6,0)
 ; Use of $$INSUR^IBBAPI supported by IA 4419
"RTN","BPSRPT9A",7,0)
 ; Use of $$RNB^IBNCPDPI supported by IA 4729
"RTN","BPSRPT9A",8,0)
 ;
"RTN","BPSRPT9A",9,0)
 Q
"RTN","BPSRPT9A",10,0)
 ;
"RTN","BPSRPT9A",11,0)
 ; Collect the Potential Secondary Rx Claims Report data
"RTN","BPSRPT9A",12,0)
GETSEC(BPDT,BPARR) ;
"RTN","BPSRPT9A",13,0)
 N CNT,IBARR S CNT=0
"RTN","BPSRPT9A",14,0)
 N BPSX,BPSY
"RTN","BPSRPT9A",15,0)
 N BPS56 S BPS56=0
"RTN","BPSRPT9A",16,0)
 I '$D(ZTQUEUED),$E(IOST,1,2)="C-" W !!,"Collecting Potential Secondary data ..."
"RTN","BPSRPT9A",17,0)
 K ^TMP("BPSRPT9A",$J)
"RTN","BPSRPT9A",18,0)
 D COLLECT^IBOSRX($P(BPDT,U),$P(BPDT,U,2))   ; get IB claim data (DBIA 5361)
"RTN","BPSRPT9A",19,0)
 D GATHER($P(BPDT,U,1),$P(BPDT,U,2))         ; get ECME claim data - esg 7/6/10
"RTN","BPSRPT9A",20,0)
 I '$D(^TMP("BPSRPT9A",$J)) Q
"RTN","BPSRPT9A",21,0)
 F  S CNT=$O(^TMP("BPSRPT9A",$J,CNT)) Q:CNT=""  D
"RTN","BPSRPT9A",22,0)
 . N DATA,RXI,RXN,RXF,DOS,BILL,DFN,PATNAME,BPDIV,INSC,X,COB,PINS,BP59S,BP59P,IBIFN,TOTCHG,BAL,BPSRESP,BPSPAID
"RTN","BPSRPT9A",23,0)
 . S DATA=$G(^TMP("BPSRPT9A",$J,CNT))
"RTN","BPSRPT9A",24,0)
 . S RXI=$P(DATA,U,1),RXN=$P(DATA,U,2),RXF=$P(DATA,U,3),BILL=$P(DATA,U,4),DFN=$P(DATA,U,5),DOS=$P(DATA,U,6),PINS=$P(DATA,U,7)
"RTN","BPSRPT9A",25,0)
 . S IBIFN=$P(DATA,U,8),TOTCHG=$P(DATA,U,9)
"RTN","BPSRPT9A",26,0)
 . Q:(RXI="")!(RXN="")!(RXF="")!(BILL="")!(DFN="")!(DOS="")!(PINS="")
"RTN","BPSRPT9A",27,0)
 . S PATNAME=$$GET1^DIQ(2,DFN,.01)
"RTN","BPSRPT9A",28,0)
 . ;
"RTN","BPSRPT9A",29,0)
 . ; Drop the claim off this report if the Secondary claim is closed in ECME
"RTN","BPSRPT9A",30,0)
 . ; esg - 7/6/10
"RTN","BPSRPT9A",31,0)
 . S BP59S=+$$IEN59^BPSOSRX(RXI,RXF,2)  ; possible ien to file 9002313.59 for the secondary claim
"RTN","BPSRPT9A",32,0)
 . I $$CLOSED02^BPSSCR03(+$P($G(^BPST(BP59S,0)),U,4)) Q
"RTN","BPSRPT9A",33,0)
 . ;
"RTN","BPSRPT9A",34,0)
 . ; Drop the claim off this report if the Secondary claim is Payable
"RTN","BPSRPT9A",35,0)
 . ; bnt - 7/14/10
"RTN","BPSRPT9A",36,0)
 . S BP59P=+$$IEN59^BPSOSRX(RXI,RXF,1)  ; possible ien to file 9002313.59 for the primary claim
"RTN","BPSRPT9A",37,0)
 . I $$PAYBLSEC^BPSUTIL2(BP59P) Q
"RTN","BPSRPT9A",38,0)
 . ;
"RTN","BPSRPT9A",39,0)
 . ; Drop the claim off this report if the primary payer paid the full amount
"RTN","BPSRPT9A",40,0)
 . ; esg - 8/3/10
"RTN","BPSRPT9A",41,0)
 . I IBIFN,TOTCHG D  I BAL'>0 Q    ; check balance due on entries with payable primary claims
"RTN","BPSRPT9A",42,0)
 .. S BPSRESP=+$P($G(^BPST(BP59P,0)),U,5)  ; response file ien
"RTN","BPSRPT9A",43,0)
 .. S BPSPAID=0
"RTN","BPSRPT9A",44,0)
 .. I BPSRESP S BPSPAID=$$DFF2EXT^BPSECFM($P($G(^BPSR(BPSRESP,1000,1,500)),U,9))   ; paid amt
"RTN","BPSRPT9A",45,0)
 .. S BAL=TOTCHG-BPSPAID    ; balance due:  total charges - primary payer paid amt
"RTN","BPSRPT9A",46,0)
 .. Q
"RTN","BPSRPT9A",47,0)
 . ;
"RTN","BPSRPT9A",48,0)
 . S BPDIV=$$GETDIV^BPSOSQC(RXI,RXF) Q:'BPDIV  ;Outpatient Site #59 ien
"RTN","BPSRPT9A",49,0)
 . S BPS56=+$O(^BPS(9002313.56,"C",BPDIV,0)) Q:'BPS56  ;BPS PHARMACIES #9002313.56 ien
"RTN","BPSRPT9A",50,0)
 . ;filter divisions
"RTN","BPSRPT9A",51,0)
 . I BPPHARM=1,'$D(BPPHARM(BPS56)) Q
"RTN","BPSRPT9A",52,0)
 . S BPDIV(BPDIV)=$$DIVNAME^BPSSCRDS(BPS56)
"RTN","BPSRPT9A",53,0)
 . ;
"RTN","BPSRPT9A",54,0)
 . S PSRT=$S($P($P(BPSORT,U,1),":")="N":PATNAME,$P($P(BPSORT,U,1),":")="P":PINS,$P($P(BPSORT,U,1),":")="S":$S('BPCRON:-DOS,1:DOS),1:BPDIV(BPDIV))
"RTN","BPSRPT9A",55,0)
 . S SSRT=$S($P($P(BPSORT,U,2),":")="N":PATNAME,$P($P(BPSORT,U,2),":")="P":PINS,$P($P(BPSORT,U,2),":")="S":$S('BPCRON:-DOS,1:DOS),$P($P(BPSORT,U,2),":")="D":BPDIV(BPDIV),1:0)
"RTN","BPSRPT9A",56,0)
 . S TSRT=$S($P($P(BPSORT,U,3),":")="N":PATNAME,$P($P(BPSORT,U,3),":")="P":PINS,$P($P(BPSORT,U,3),":")="S":$S('BPCRON:-DOS,1:DOS),$P($P(BPSORT,U,3),":")="D":BPDIV(BPDIV),1:0)
"RTN","BPSRPT9A",57,0)
 . Q:((SSRT="")!(PSRT="")!(TSRT=""))
"RTN","BPSRPT9A",58,0)
 . S BPARR(PSRT,SSRT,TSRT,CNT)=BPDIV(BPDIV)_U_BILL_U_RXN_U_RXF_U_$$FMTE^XLFDT(DOS,"2D")_U_PATNAME_U_"p"_U_PINS_U_$$SSN4^BPSRPT6(DFN)
"RTN","BPSRPT9A",59,0)
 . S (X,INSC)=0
"RTN","BPSRPT9A",60,0)
 . F  S X=$O(^TMP("BPSRPT9A",$J,CNT,X)) Q:X=""  D
"RTN","BPSRPT9A",61,0)
 . . S BPSX=$G(^TMP("BPSRPT9A",$J,CNT,X,7))
"RTN","BPSRPT9A",62,0)
 . . S COB=$S($P(BPSX,U)=1:"p",$P(BPSX,U)=2:"s",$P(BPSX,U)=3:"t",1:"-")
"RTN","BPSRPT9A",63,0)
 . . S BPSY=$P($G(^TMP("BPSRPT9A",$J,CNT,X,1)),U,2)
"RTN","BPSRPT9A",64,0)
 . . Q:BPSY[PINS
"RTN","BPSRPT9A",65,0)
 . . S BPARR(PSRT,SSRT,TSRT,CNT,X)=COB_U_BPSY
"RTN","BPSRPT9A",66,0)
 K ^TMP("BPSRPT9A",$J)
"RTN","BPSRPT9A",67,0)
 Q
"RTN","BPSRPT9A",68,0)
 ;
"RTN","BPSRPT9A",69,0)
 ; Collect the Potential Tricare Rx Claims Report data
"RTN","BPSRPT9A",70,0)
 ; Build array with report data
"RTN","BPSRPT9A",71,0)
 ; BPARR(n)=DIVISION NAME^RX#^FILL^FILL DATE^PATIENT NAME
"RTN","BPSRPT9A",72,0)
 ; BPARR(n,"INS",1)=PRIMARY INS NAME^PRIMARY INS ADDRESS
"RTN","BPSRPT9A",73,0)
 ; BPARR(n,"INS",2)=SECONDARY INS NAME^SECONDARY INS ADDRESS
"RTN","BPSRPT9A",74,0)
 ; BPARR(n,"ELIG")=ELIG 1^ELIG 2^...
"RTN","BPSRPT9A",75,0)
GETTRI(BPDT,BPARR) ;
"RTN","BPSRPT9A",76,0)
 N RXI,RXN,RXF,RXFDT,LIST,RXLIST,BPQUIT,CNT,BPSFLDN
"RTN","BPSRPT9A",77,0)
 S REF=$NA(^TMP($J,"BPSRPT9","AD"))
"RTN","BPSRPT9A",78,0)
 S BPSFLDN=".01;2;6"
"RTN","BPSRPT9A",79,0)
 K @REF
"RTN","BPSRPT9A",80,0)
 S (RXFDT,BPDRUG,CNT)=0,LIST="BPSRPT9"
"RTN","BPSRPT9A",81,0)
 I '$D(ZTQUEUED),$E(IOST,1,2)="C-" W !!,"Collecting TRICARE data ..."
"RTN","BPSRPT9A",82,0)
 D REF^PSO52EX($P(BPDT,U),$P(BPDT,U,2),LIST)
"RTN","BPSRPT9A",83,0)
 I '$D(@REF) Q
"RTN","BPSRPT9A",84,0)
 F  S RXFDT=$O(@REF@(RXFDT)) Q:RXFDT=""  D
"RTN","BPSRPT9A",85,0)
 . S RXI=0 F  S RXI=$O(@REF@(RXFDT,RXI)) Q:RXI=""  D
"RTN","BPSRPT9A",86,0)
 . . S RXF=-1 F  S RXF=$O(@REF@(RXFDT,RXI,RXF)) Q:RXF=""  D
"RTN","BPSRPT9A",87,0)
 . . . N BPELIG,VAEL,BPDRUG,BPDEA,BPIE,DFN,ARR,BPDIV,PSRT,SSRT,TSRT,BPS56
"RTN","BPSRPT9A",88,0)
 . . . S (BPQUIT,BPDIV,BPS56)=0
"RTN","BPSRPT9A",89,0)
 . . . ; Check Pharmacy Division against selected Divisions
"RTN","BPSRPT9A",90,0)
 . . . S BPDIV=$$GETDIV^BPSOSQC(RXI,RXF) Q:'BPDIV  ;Outpatient Site #59 ien
"RTN","BPSRPT9A",91,0)
 . . . S BPS56=+$O(^BPS(9002313.56,"C",BPDIV,0)) Q:'BPS56  ;BPS PHARMACIES #9002313.56 ien
"RTN","BPSRPT9A",92,0)
 . . . ;filter divisions
"RTN","BPSRPT9A",93,0)
 . . . I BPPHARM=1,'$D(BPPHARM(BPS56)) Q
"RTN","BPSRPT9A",94,0)
 . . . D RXAPI^BPSUTIL1(RXI,BPSFLDN,"ARR","IE")
"RTN","BPSRPT9A",95,0)
 . . . S DFN=ARR(52,RXI,2,"I") Q:'DFN
"RTN","BPSRPT9A",96,0)
 . . . D ELIG^VADPT
"RTN","BPSRPT9A",97,0)
 . . . ; Check for TRICARE or SHARING AGREEMENT
"RTN","BPSRPT9A",98,0)
 . . . S BPELIG=$P(VAEL(1),U,2)
"RTN","BPSRPT9A",99,0)
 . . . S BPQUIT=$S(BPELIG="TRICARE":0,BPELIG="SHARING AGREEMENT":0,1:1)
"RTN","BPSRPT9A",100,0)
 . . . S BPELIG(1)=$E(BPELIG,1,4)
"RTN","BPSRPT9A",101,0)
 . . . S X=-1 F  S X=$O(VAEL(1,X)) Q:X=""  D
"RTN","BPSRPT9A",102,0)
 . . . . S BPELIG=$P(VAEL(1,X),U,2)
"RTN","BPSRPT9A",103,0)
 . . . . S BPQUIT=$S(BPELIG="TRICARE":0,BPELIG="SHARING AGREEMENT":0,1:1)
"RTN","BPSRPT9A",104,0)
 . . . . S BPELIG(1)=BPELIG(1)_U_$E(BPELIG,1,4)
"RTN","BPSRPT9A",105,0)
 . . . Q:$S(BPELIG(1)["TRIC":0,BPELIG(1)["SHAR":0,1:1)
"RTN","BPSRPT9A",106,0)
 . . . S BPDRUG=ARR(52,RXI,6,"I") Q:'BPDRUG
"RTN","BPSRPT9A",107,0)
 . . . K ^TMP($J,"BPDRUG") D DATA^PSS50(BPDRUG,,,,,"BPDRUG")
"RTN","BPSRPT9A",108,0)
 . . . S BPDEA=^TMP($J,"BPDRUG",BPDRUG,3)
"RTN","BPSRPT9A",109,0)
 . . . ; Exclude drugs that are exempt from billing
"RTN","BPSRPT9A",110,0)
 . . . I (BPDEA["I")!(BPDEA["S")!(BPDEA["N")&(BPDEA'["E") Q
"RTN","BPSRPT9A",111,0)
 . . . ;
"RTN","BPSRPT9A",112,0)
 . . . ; exclude Rx if it is non-billable - esg 8/4/10
"RTN","BPSRPT9A",113,0)
 . . . I +$$RNB^IBNCPDPI(RXI,RXF) Q
"RTN","BPSRPT9A",114,0)
 . . . ;
"RTN","BPSRPT9A",115,0)
 . . . ; exclude Rx if it is not released - esg 8/5/10
"RTN","BPSRPT9A",116,0)
 . . . I '$$RELDATE^BPSBCKJ(RXI,RXF) Q
"RTN","BPSRPT9A",117,0)
 . . . ;
"RTN","BPSRPT9A",118,0)
 . . . ; Make sure not already ECME billed
"RTN","BPSRPT9A",119,0)
 . . . Q:$$STATUS^BPSOSRX(RXI,RXF)'=""
"RTN","BPSRPT9A",120,0)
 . . . ; Check for TRICARE type insurance group
"RTN","BPSRPT9A",121,0)
 . . . N BPIBA,X,BPOK,BPINS,I
"RTN","BPSRPT9A",122,0)
 . . . I '$$INSUR^IBBAPI(DFN,RXFDT,"P",.BPIBA,"*") Q
"RTN","BPSRPT9A",123,0)
 . . . S (X,BPOK)=0 F I=1:1 S X=$O(BPIBA("IBBAPI","INSUR",X)) Q:X=""  D
"RTN","BPSRPT9A",124,0)
 . . . . I $P(BPIBA("IBBAPI","INSUR",X,21),U,2)="TRICARE" S BPOK=1
"RTN","BPSRPT9A",125,0)
 . . . . N BPCOB S BPCOB=$P(BPIBA("IBBAPI","INSUR",X,7),U) S:BPCOB="" BPCOB=1
"RTN","BPSRPT9A",126,0)
 . . . . S BPINS(DFN,BPCOB)=$P(BPIBA("IBBAPI","INSUR",X,1),U,2)_U_BPIBA("IBBAPI","INSUR",X,2)
"RTN","BPSRPT9A",127,0)
 . . . Q:'BPOK
"RTN","BPSRPT9A",128,0)
 . . . ; Build the return array since all filters have passed
"RTN","BPSRPT9A",129,0)
 . . . S CNT=CNT+1,BPDIV(BPDIV)=$$DIVNAME^BPSSCRDS(BPS56)
"RTN","BPSRPT9A",130,0)
 . . . S PSRT=$S($P($P(BPSORT,U),":")="N":$E(ARR(52,RXI,2,"E"),1,20),$P($P(BPSORT,U),":")="P":$P($G(BPINS(DFN,+$O(BPINS(DFN,0)))),U),$P($P(BPSORT,U),":")="S":$S('BPCRON:-RXFDT,1:RXFDT),1:BPDIV(BPDIV))
"RTN","BPSRPT9A",131,0)
 . . . S SSRT=$S($P($P(BPSORT,U,2),":")="N":$E(ARR(52,RXI,2,"E"),1,20),$P($P(BPSORT,U,2),":")="P":$P($G(BPINS(DFN,+$O(BPINS(DFN,0)))),U),$P($P(BPSORT,U,2),":")="S":$S('BPCRON:-RXFDT,1:RXFDT),$P($P(BPSORT,U,2),":")="D":BPDIV(BPDIV),1:0)
"RTN","BPSRPT9A",132,0)
 . . . S TSRT=$S($P($P(BPSORT,U,3),":")="N":$E(ARR(52,RXI,2,"E"),1,20),$P($P(BPSORT,U,3),":")="P":$P($G(BPINS(DFN,+$O(BPINS(DFN,0)))),U),$P($P(BPSORT,U,3),":")="S":$S('BPCRON:-RXFDT,1:RXFDT),$P($P(BPSORT,U,3),":")="D":BPDIV(BPDIV),1:0)
"RTN","BPSRPT9A",133,0)
 . . . Q:((SSRT="")!(PSRT="")!(TSRT=""))
"RTN","BPSRPT9A",134,0)
 . . . S BPARR(PSRT,SSRT,TSRT,CNT)=BPDIV(BPDIV)_U_ARR(52,RXI,.01,"E")_U_RXF_U_$$FMTE^XLFDT(RXFDT,"2D")_U_$E(ARR(52,RXI,2,"E"),1,20)_U_$$SSN4^BPSRPT6(DFN)
"RTN","BPSRPT9A",135,0)
 . . . I $D(BPINS(DFN,1)) S BPARR(PSRT,SSRT,TSRT,CNT,"INS",1)=BPINS(DFN,1)
"RTN","BPSRPT9A",136,0)
 . . . I $D(BPINS(DFN,2)) S BPARR(PSRT,SSRT,TSRT,CNT,"INS",2)=BPINS(DFN,2)
"RTN","BPSRPT9A",137,0)
 . . . S BPARR(PSRT,SSRT,TSRT,CNT,"ELIG")=BPELIG(1)
"RTN","BPSRPT9A",138,0)
 K @REF,REF
"RTN","BPSRPT9A",139,0)
 I $D(BPARR) S BPARR(0)=CNT
"RTN","BPSRPT9A",140,0)
 Q
"RTN","BPSRPT9A",141,0)
 ;
"RTN","BPSRPT9A",142,0)
GATHER(SDT,EDT) ; Gather cases where we have closed ECME primary claims and available secondary insurance
"RTN","BPSRPT9A",143,0)
 ; Input: SDT - FileMan start date
"RTN","BPSRPT9A",144,0)
 ;        EDT - FileMan end date
"RTN","BPSRPT9A",145,0)
 ;
"RTN","BPSRPT9A",146,0)
 N SDTYMD,EDTYMD,BPDOS,BP02,BP59,BPST0,BPST1,DFN,BPDTFD,RXIEN,RXFIL,IBINS,IBRET,BPRX,BPSPINS,CNT
"RTN","BPSRPT9A",147,0)
 S SDTYMD=$$FM2YMD^BPSSCR04(SDT) I 'SDTYMD S SDTYMD=0          ; start date in YMD format
"RTN","BPSRPT9A",148,0)
 S EDTYMD=$$FM2YMD^BPSSCR04(EDT) I 'EDTYMD S EDTYMD=99999999   ; end date in YMD format
"RTN","BPSRPT9A",149,0)
 S BPDOS=$O(^BPSC("AF",SDTYMD),-1) F  S BPDOS=$O(^BPSC("AF",BPDOS)) Q:'BPDOS!(BPDOS>EDTYMD)  D
"RTN","BPSRPT9A",150,0)
 . S BP02=0 F  S BP02=$O(^BPSC("AF",BPDOS,BP02)) Q:'BP02  D
"RTN","BPSRPT9A",151,0)
 .. S BP59=+$O(^BPST("AE",BP02,0)) Q:'BP59
"RTN","BPSRPT9A",152,0)
 .. S BPST0=$G(^BPST(BP59,0))
"RTN","BPSRPT9A",153,0)
 .. S BPST1=$G(^BPST(BP59,1))
"RTN","BPSRPT9A",154,0)
 .. I $P(BPST0,U,14)'=1 Q               ; looking for primary claims
"RTN","BPSRPT9A",155,0)
 .. I '$$CLOSED02^BPSSCR03(BP02) Q      ; looking for closed claims
"RTN","BPSRPT9A",156,0)
 .. S DFN=+$P(BPST0,U,6)
"RTN","BPSRPT9A",157,0)
 .. S BPDTFD=$$YMD2FM^BPSSCR04(BPDOS)   ; FM date of service
"RTN","BPSRPT9A",158,0)
 .. ;
"RTN","BPSRPT9A",159,0)
 .. ; make sure the Rx is released
"RTN","BPSRPT9A",160,0)
 .. S RXIEN=+$P(BPST1,U,11)
"RTN","BPSRPT9A",161,0)
 .. S RXFIL=+$P(BPST1,U,1)
"RTN","BPSRPT9A",162,0)
 .. I '$$RELDATE^BPSBCKJ(RXIEN,RXFIL) Q
"RTN","BPSRPT9A",163,0)
 .. ;
"RTN","BPSRPT9A",164,0)
 .. ; check insurances for this patient on this date
"RTN","BPSRPT9A",165,0)
 .. K IBINS
"RTN","BPSRPT9A",166,0)
 .. S IBRET=$$INSUR^IBBAPI(DFN,BPDTFD,"P",.IBINS,"1,2,7")
"RTN","BPSRPT9A",167,0)
 .. I '$D(IBINS("IBBAPI","INSUR",2)) Q   ; do not have at least 2 Rx policies so get out
"RTN","BPSRPT9A",168,0)
 .. ;
"RTN","BPSRPT9A",169,0)
 .. ; save this entry in the scratch global
"RTN","BPSRPT9A",170,0)
 .. S BPRX=$$RXAPI1^BPSUTIL1(RXIEN,.01,"I")    ; ext Rx#
"RTN","BPSRPT9A",171,0)
 .. S BPSPINS=$$INSNAME^BPSSCRU6(BP59)         ; ins co name
"RTN","BPSRPT9A",172,0)
 .. S CNT=$O(^TMP("BPSRPT9A",$J,""),-1)+1
"RTN","BPSRPT9A",173,0)
 .. S ^TMP("BPSRPT9A",$J,CNT)=RXIEN_U_BPRX_U_RXFIL_U_"(P) Rej"_U_DFN_U_BPDTFD_U_BPSPINS_U_0_U_0
"RTN","BPSRPT9A",174,0)
 .. M ^TMP("BPSRPT9A",$J,CNT)=IBINS("IBBAPI","INSUR")
"RTN","BPSRPT9A",175,0)
 .. Q
"RTN","BPSRPT9A",176,0)
 . Q
"RTN","BPSRPT9A",177,0)
GATHERX ;
"RTN","BPSRPT9A",178,0)
 Q
"RTN","BPSRPT9A",179,0)
 ;
"RTN","BPSSCR03")
0^2^B42145046
"RTN","BPSSCR03",1,0)
BPSSCR03 ;BHAM ISC/SS - ECME USR SCREEN UTILITIES ;05-APR-05
"RTN","BPSSCR03",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8**;JUN 2004;Build 29
"RTN","BPSSCR03",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSSCR03",4,0)
 Q
"RTN","BPSSCR03",5,0)
 ;/**
"RTN","BPSSCR03",6,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSSCR03",7,0)
 ; BPARR to return formatted info via ref
"RTN","BPSSCR03",8,0)
 ; BPMLEM - max len for each line
"RTN","BPSSCR03",9,0)
 ; BPMODE - mode
"RTN","BPSSCR03",10,0)
 ;   R -regular for main screen, will show only latest comment
"RTN","BPSSCR03",11,0)
 ;   C - comment mode - show all comments
"RTN","BPSSCR03",12,0)
ADDINF(BP59,BPARR,BPMLEN,BPMODE) ;to return additional information about the claim*/
"RTN","BPSSCR03",13,0)
 N BPX,BPN,BPTXT1,BPTXT2,BPTXT3,BPTXT4,BPX1,BPN2,BPSTATUS,BPSCOBA,BP59X
"RTN","BPSSCR03",14,0)
 S BPN=0,(BPTXT1,BPTXT2,BPTXT3,BPTXT4,BPX1)=""
"RTN","BPSSCR03",15,0)
 I BPMODE="R" D
"RTN","BPSSCR03",16,0)
 . S BPX=$$COMMENT^BPSSCRU3(BP59)
"RTN","BPSSCR03",17,0)
 . I $L(BPX)>0 S BPN=BPN+1,BPARR(BPN)=$P(BPX,U)
"RTN","BPSSCR03",18,0)
 . I $P(BPX,U,2)]"" S BPN=BPN+1,BPARR(BPN)="("_$P(BPX,U,2)_")"
"RTN","BPSSCR03",19,0)
 E  D
"RTN","BPSSCR03",20,0)
 . N BPCMNT,BPX1 S BPCMNT=99999999
"RTN","BPSSCR03",21,0)
 . F  S BPCMNT=$O(^BPST(BP59,11,BPCMNT),-1) Q:+BPCMNT=0  D
"RTN","BPSSCR03",22,0)
 . . S BPX1=$G(^BPST(BP59,11,BPCMNT,0))
"RTN","BPSSCR03",23,0)
 . . I BPX1="" Q
"RTN","BPSSCR03",24,0)
 . . S BPX=$$DATTIM^BPSSCRU3($P(BPX1,U,1)\1)_" - "_$P(BPX1,U,3)
"RTN","BPSSCR03",25,0)
 . . I $L(BPX)>0 S BPN=BPN+1,BPARR(BPN)=BPX
"RTN","BPSSCR03",26,0)
 . . I +$P(BPX1,U,2)]"" D
"RTN","BPSSCR03",27,0)
 . . . S BPX=$$USERNAM^BPSCMT01(+$P(BPX1,U,2))
"RTN","BPSSCR03",28,0)
 . . . I BPX'="" S BPX="("_BPX_")",BPN=BPN+1,BPARR(BPN)=BPX
"RTN","BPSSCR03",29,0)
 S BPX=$$CLAIMST^BPSSCRU3(BP59)
"RTN","BPSSCR03",30,0)
 S BPSTATUS=$P(BPX,U)
"RTN","BPSSCR03",31,0)
 ; Show status for this BPS Transaction
"RTN","BPSSCR03",32,0)
 S BPTXT1=$$COBCLST^BPSSCRU6(BP59)
"RTN","BPSSCR03",33,0)
 ; Append status for associated claim, if one exists
"RTN","BPSSCR03",34,0)
 S BPSCOBA=$$ALLCOB59^BPSUTIL2(BP59)
"RTN","BPSSCR03",35,0)
 F I=1:1 S BP59X=$P(BPSCOBA,U,I) Q:BP59X=""  D
"RTN","BPSSCR03",36,0)
 . Q:BP59X=BP59
"RTN","BPSSCR03",37,0)
 . S BPTXT1=BPTXT1_" ("_$$COBCLST^BPSSCRU6(BP59X)_")"
"RTN","BPSSCR03",38,0)
 ;
"RTN","BPSSCR03",39,0)
 I (BPSTATUS["E REJECTED")!(BPSTATUS["E REVERSAL REJECTED") D
"RTN","BPSSCR03",40,0)
 . I $L(BPTXT1)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT1
"RTN","BPSSCR03",41,0)
 . S BPTXT1=""
"RTN","BPSSCR03",42,0)
 . S BPN2=BPN
"RTN","BPSSCR03",43,0)
 . D GETRJCOD^BPSSCRU3(BP59,.BPARR,.BPN,74,"")
"RTN","BPSSCR03",44,0)
 . D WRAPLN2^BPSSCRU5(.BPN,.BPARR,$$GETMESS^BPSSCRU3(1000,504,BP59),74,"",0)
"RTN","BPSSCR03",45,0)
 . D WRAPLN2^BPSSCRU5(.BPN,.BPARR,$$GETMESS^BPSSCRU3(1000,526,BP59),74,"",0)
"RTN","BPSSCR03",46,0)
 . D WRAPLN2^BPSSCRU5(.BPN,.BPARR,$$GETMESS^BPSSCRU3(504,0,BP59),74,"",0)
"RTN","BPSSCR03",47,0)
 . I BPN>BPN2 Q  ;reject codes are enough
"RTN","BPSSCR03",48,0)
 . ;S BPX1=$P($P(BPX,U,3),"[") I BPTXT1=BPX1 S BPX1=""
"RTN","BPSSCR03",49,0)
 . S:BPX1="" BPX1=$$GETMESS^BPSSCRU3(504,0,BP59)
"RTN","BPSSCR03",50,0)
 . I $L(BPX1)>0 S BPTXT1=BPTXT1_"- "_$TR(BPX1,"]","")
"RTN","BPSSCR03",51,0)
 ;
"RTN","BPSSCR03",52,0)
 I (BPSTATUS["E OTHER")!(BPSTATUS["IN PROGRESS")!(BPSTATUS["E UNSTRANDED")!(BPSTATUS["E CAPTURED")!(BPSTATUS["E REVERSAL UNSTRANDED") D
"RTN","BPSSCR03",53,0)
 . I (BPSTATUS["E OTHER")!(BPSTATUS["IN PROGRESS") S BPX1=$P(BPX,U,3) I BPTXT1=BPX1 S BPX1=""
"RTN","BPSSCR03",54,0)
 . S:BPX1="" BPX1=$$GETMESS^BPSSCRU3(504,0,BP59)
"RTN","BPSSCR03",55,0)
 . I $L(BPX1)>0 S BPTXT1=BPTXT1_"- "_$TR(BPX1,"]","")
"RTN","BPSSCR03",56,0)
 ;
"RTN","BPSSCR03",57,0)
 S BPTXT2=$E(BPTXT1,1,BPMLEN)
"RTN","BPSSCR03",58,0)
 S BPTXT3=$E(BPTXT1,BPMLEN+1,2*BPMLEN)
"RTN","BPSSCR03",59,0)
 S BPTXT4=$E(BPTXT1,(2*BPMLEN)+1,3*BPMLEN)
"RTN","BPSSCR03",60,0)
 I $L(BPTXT2)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT2
"RTN","BPSSCR03",61,0)
 I $L(BPTXT3)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT3
"RTN","BPSSCR03",62,0)
 I $L(BPTXT4)>0 S BPN=BPN+1,BPARR(BPN)=BPTXT4
"RTN","BPSSCR03",63,0)
 Q BPN
"RTN","BPSSCR03",64,0)
 ;
"RTN","BPSSCR03",65,0)
CLMINF(BP59) ;ptr to #9002313.59
"RTN","BPSSCR03",66,0)
 W !,"Claim info. Press a key"
"RTN","BPSSCR03",67,0)
 D PAUSE^VALM1
"RTN","BPSSCR03",68,0)
 Q
"RTN","BPSSCR03",69,0)
 ;
"RTN","BPSSCR03",70,0)
 ;
"RTN","BPSSCR03",71,0)
COMM(BP59) ;ptr to #9002313.59
"RTN","BPSSCR03",72,0)
 W !,"the latest comment. Press a key"
"RTN","BPSSCR03",73,0)
 D PAUSE^VALM1
"RTN","BPSSCR03",74,0)
 Q
"RTN","BPSSCR03",75,0)
 ;
"RTN","BPSSCR03",76,0)
RESP(BP59) ;Payer Response Information
"RTN","BPSSCR03",77,0)
 W !,"payer Response Information. Press a key"
"RTN","BPSSCR03",78,0)
 D PAUSE^VALM1
"RTN","BPSSCR03",79,0)
 Q
"RTN","BPSSCR03",80,0)
 ;
"RTN","BPSSCR03",81,0)
 ;/**
"RTN","BPSSCR03",82,0)
 ;Checks if the claim is closed and sets the "/Closed" indicator at the end of the text
"RTN","BPSSCR03",83,0)
 ;BP59 - pointer to file #9002313.59
"RTN","BPSSCR03",84,0)
 ;BPTXT - Current status text to be displayed
"RTN","BPSSCR03",85,0)
 ;return:
"RTN","BPSSCR03",86,0)
 ;if the claim is not closed, BPTXT is returned. If it is closed BPTXT_"/Closed " is returned
"RTN","BPSSCR03",87,0)
CLMCLSTX(BP59,BPTXT) ;*/
"RTN","BPSSCR03",88,0)
 Q $S($$CLOSED02($P($G(^BPST(BP59,0)),U,4)):BPTXT_"/Closed ",1:BPTXT)
"RTN","BPSSCR03",89,0)
 ;
"RTN","BPSSCR03",90,0)
 ;/**
"RTN","BPSSCR03",91,0)
 ;Checks if the CLAIM for specific Transaction is CLOSED?
"RTN","BPSSCR03",92,0)
 ;BPCLAIM - ptr to #9002313.02
"RTN","BPSSCR03",93,0)
 ;see also CLOSED^BPSSCRU1
"RTN","BPSSCR03",94,0)
CLOSED02(BPCLAIM) ;*/
"RTN","BPSSCR03",95,0)
 I +$G(BPCLAIM)=0 Q 0
"RTN","BPSSCR03",96,0)
 ; get closed status
"RTN","BPSSCR03",97,0)
 Q +$P($G(^BPSC(BPCLAIM,900)),U)=1
"RTN","BPSSCR03",98,0)
 ;
"RTN","BPSSCR03",99,0)
 ;return:
"RTN","BPSSCR03",100,0)
 ; 1 - okay. matches criteria
"RTN","BPSSCR03",101,0)
 ; 0-  not okay, doesn't match criteria
"RTN","BPSSCR03",102,0)
FILTER(BP59,BPARR) ;
"RTN","BPSSCR03",103,0)
 N BPST0,BPST1,BPRXREF,BPRX52,BPREFNUM
"RTN","BPSSCR03",104,0)
 N BPRET
"RTN","BPSSCR03",105,0)
 S BPRET=1 ;1 - okay by default
"RTN","BPSSCR03",106,0)
 S BPST0=$G(^BPST(BP59,0))
"RTN","BPSSCR03",107,0)
 S BPST1=$G(^BPST(BP59,1))
"RTN","BPSSCR03",108,0)
 S BPRXREF=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSSCR03",109,0)
 S BPRX52=+$P(BPRXREF,U) ;ptr to #52
"RTN","BPSSCR03",110,0)
 S BPREFNUM=$P(BPRXREF,U,2) ;refill #
"RTN","BPSSCR03",111,0)
 ;Check for Open Claim
"RTN","BPSSCR03",112,0)
 I $G(BPARR(2.02))="O",$$CLOSED02(+$P(BPST0,U,4)) Q 0
"RTN","BPSSCR03",113,0)
 ;Check for Closed Claim
"RTN","BPSSCR03",114,0)
 I $G(BPARR(2.02))="C",'$$CLOSED02(+$P(BPST0,U,4)) Q 0
"RTN","BPSSCR03",115,0)
 ;Eligibility Indicator
"RTN","BPSSCR03",116,0)
 I '$$FLTELIG^BPSSCR05(BP59,.BPARR) Q 0
"RTN","BPSSCR03",117,0)
 ;Submission type
"RTN","BPSSCR03",118,0)
 I '$$FLTSUBTP^BPSSCR05(BP59,.BPARR) Q 0
"RTN","BPSSCR03",119,0)
 ;user
"RTN","BPSSCR03",120,0)
 I $G(BPARR(1.01))="U",$$FLTUSR(BPST0,.BPARR)=0 Q 0
"RTN","BPSSCR03",121,0)
 ;patient
"RTN","BPSSCR03",122,0)
 I $G(BPARR(1.02))="P",$$FLTPAT(BPST0,.BPARR)=0 Q 0
"RTN","BPSSCR03",123,0)
 ;RX
"RTN","BPSSCR03",124,0)
 I $G(BPARR(1.03))="R",$$FLTRX(BPST1,.BPARR)=0 Q 0
"RTN","BPSSCR03",125,0)
 ;only rejected
"RTN","BPSSCR03",126,0)
 I $G(BPARR(1.06))="R",$$REJECTED^BPSSCR02(BP59)=0 Q 0
"RTN","BPSSCR03",127,0)
 ;only payable
"RTN","BPSSCR03",128,0)
 I $G(BPARR(1.06))="P",$$PAYABLE^BPSSCR02(BP59)=0 Q 0
"RTN","BPSSCR03",129,0)
 ;released
"RTN","BPSSCR03",130,0)
 I $G(BPARR(1.07))="R",$$RL^BPSSCRU2(BP59)'="RL" Q 0
"RTN","BPSSCR03",131,0)
 ;non released
"RTN","BPSSCR03",132,0)
 I $G(BPARR(1.07))="N",$$RL^BPSSCRU2(BP59)="RL" Q 0
"RTN","BPSSCR03",133,0)
 ;window/cmop/mail
"RTN","BPSSCR03",134,0)
 I $G(BPARR(1.08))'="A",$$ISMWC(BPRX52,BPREFNUM,$G(BPARR(1.08)))=0 Q 0
"RTN","BPSSCR03",135,0)
 ;Back billing
"RTN","BPSSCR03",136,0)
 I $G(BPARR(1.09))="B",$$RTBB^BPSSCRU2(BP59)'="BB" Q 0
"RTN","BPSSCR03",137,0)
 ;real time
"RTN","BPSSCR03",138,0)
 I $G(BPARR(1.09))="R",$$RTBB^BPSSCRU2(BP59)="BB" Q 0
"RTN","BPSSCR03",139,0)
 ;if only rejected and only specific rejected codes should be displayed
"RTN","BPSSCR03",140,0)
 I $G(BPARR(1.06))="R",$G(BPARR(1.1))="R",$$FLTREJ(BP59,.BPARR)=0 Q 0
"RTN","BPSSCR03",141,0)
 ;insurance
"RTN","BPSSCR03",142,0)
 I '$$FLTINS^BPSSCR05(BP59,.BPARR) Q 0
"RTN","BPSSCR03",143,0)
 ;divisions - ECME pharmacies
"RTN","BPSSCR03",144,0)
 I $G(BPARR(1.13))="D",BPARR("DIVS")'[(";"_$P(BPST1,U,7)_";") Q 0
"RTN","BPSSCR03",145,0)
 Q 1
"RTN","BPSSCR03",146,0)
 ;
"RTN","BPSSCR03",147,0)
 ;check user filter
"RTN","BPSSCR03",148,0)
 ;input:
"RTN","BPSSCR03",149,0)
 ;BPST0 - zero node of #9002313.59
"RTN","BPSSCR03",150,0)
 ;BPARR array with user's preferences
"RTN","BPSSCR03",151,0)
 ;returns :
"RTN","BPSSCR03",152,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",153,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",154,0)
FLTUSR(BPST0,BPARR) ;
"RTN","BPSSCR03",155,0)
 I $L($G(BPARR(1.16)))=0 Q 0
"RTN","BPSSCR03",156,0)
 I $P(BPST0,U,10)'=$G(BPARR(1.16)) Q 0
"RTN","BPSSCR03",157,0)
 Q 1
"RTN","BPSSCR03",158,0)
 ;check patient filter
"RTN","BPSSCR03",159,0)
 ;input:
"RTN","BPSSCR03",160,0)
 ;BPST0 - zero node of #9002313.59
"RTN","BPSSCR03",161,0)
 ;BPARR array with user's preferences
"RTN","BPSSCR03",162,0)
 ;returns :
"RTN","BPSSCR03",163,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",164,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",165,0)
FLTPAT(BPST0,BPARR) ;
"RTN","BPSSCR03",166,0)
 I $L($G(BPARR(1.17)))=0 Q 0
"RTN","BPSSCR03",167,0)
 I $P(BPST0,U,6)'=$G(BPARR(1.17)) Q 0
"RTN","BPSSCR03",168,0)
 Q 1
"RTN","BPSSCR03",169,0)
 ;check RX filter
"RTN","BPSSCR03",170,0)
 ;input:
"RTN","BPSSCR03",171,0)
 ;BPST1 - 1st node of #9002313.59
"RTN","BPSSCR03",172,0)
 ;BPARR array with user's preferences
"RTN","BPSSCR03",173,0)
 ;returns :
"RTN","BPSSCR03",174,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",175,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",176,0)
FLTRX(BPST1,BPARR) ;
"RTN","BPSSCR03",177,0)
 I $L($G(BPARR(1.18)))=0 Q 0
"RTN","BPSSCR03",178,0)
 I $P(BPST1,U,11)'=$G(BPARR(1.18)) Q 0
"RTN","BPSSCR03",179,0)
 Q 1
"RTN","BPSSCR03",180,0)
 ;input:
"RTN","BPSSCR03",181,0)
 ;BP59 - zero node of #9002313.59
"RTN","BPSSCR03",182,0)
 ;BPARR array with user's preferences
"RTN","BPSSCR03",183,0)
 ;returns :
"RTN","BPSSCR03",184,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",185,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",186,0)
FLTREJ(BP59,BPARR) ;
"RTN","BPSSCR03",187,0)
 N BPRCODES
"RTN","BPSSCR03",188,0)
 N BPRJCD
"RTN","BPSSCR03",189,0)
 S BPRJCD=$P($G(^BPSF(9002313.93,+$G(BPARR(1.15)),0)),U)
"RTN","BPSSCR03",190,0)
 I $L(BPRJCD)=0 Q 0
"RTN","BPSSCR03",191,0)
 D REJCODES^BPSSCRU3(BP59,.BPRCODES)
"RTN","BPSSCR03",192,0)
 I $D(BPRCODES(BPRJCD)) Q 1
"RTN","BPSSCR03",193,0)
 Q 0
"RTN","BPSSCR03",194,0)
 ;
"RTN","BPSSCR03",195,0)
 ;check W(indow)/C(mop)/M(ail)
"RTN","BPSSCR03",196,0)
 ;input:
"RTN","BPSSCR03",197,0)
 ;BPRX52 - ptr to #52
"RTN","BPSSCR03",198,0)
 ;BPREFNUM - refill #
"RTN","BPSSCR03",199,0)
 ;BPMWC - given value from CMOP/MAIL/WINDOW instance 1.08 of BPS USRSCR parameters
"RTN","BPSSCR03",200,0)
 ;returns :
"RTN","BPSSCR03",201,0)
 ;1 -okay, leave in the list
"RTN","BPSSCR03",202,0)
 ;0 -not okay, exclude from the list
"RTN","BPSSCR03",203,0)
ISMWC(BPRX52,BPREFNUM,BPMWC) ;
"RTN","BPSSCR03",204,0)
 I $$MWCNAME^BPSSCRU2($$MWC^BPSSCRU2(BPRX52,BPREFNUM))=BPMWC Q 1
"RTN","BPSSCR03",205,0)
 Q 0
"RTN","BPSSCR03",206,0)
 ;
"RTN","BPSSCR03",207,0)
FILTRALL(BPTMP1,BPTMP2,BPARR) ;
"RTN","BPSSCR03",208,0)
 N BP59
"RTN","BPSSCR03",209,0)
 S BP59=0
"RTN","BPSSCR03",210,0)
 F  S BP59=+$O(@BPTMP1@(BP59)) Q:+BP59=0  D
"RTN","BPSSCR03",211,0)
 . I $$FILTER(BP59,.BPARR) S @BPTMP2@(BP59)=""
"RTN","BPSSCR03",212,0)
 Q
"RTN","BPSSCR03",213,0)
 ;
"RTN","BPSSCR03",214,0)
 ;go thru all FILE59 entries and run SETTRDFN for each of them
"RTN","BPSSCR03",215,0)
 ;
"RTN","BPSSCR03",216,0)
TRDFNALL(BPTMP) ;
"RTN","BPSSCR03",217,0)
 N BP59
"RTN","BPSSCR03",218,0)
 S BP59=0
"RTN","BPSSCR03",219,0)
 F  S BP59=+$O(@BPTMP@("FILE59",BP59)) Q:+BP59=0  D
"RTN","BPSSCR03",220,0)
 . D SETTRDFN(BPTMP,BP59)
"RTN","BPSSCR03",221,0)
 Q
"RTN","BPSSCR03",222,0)
 ;
"RTN","BPSSCR03",223,0)
 ;sorting for "TRANSACTION DATE" type is
"RTN","BPSSCR03",224,0)
 ;actually sorting by patients , but patient should be sorted not in alphabetical order:
"RTN","BPSSCR03",225,0)
 ;the first patient is the one which has the most recent transaction and so on
"RTN","BPSSCR03",226,0)
 ;BPTMP - TMP global
"RTN","BPSSCR03",227,0)
 ;BP59 - ptr to #9002313.59
"RTN","BPSSCR03",228,0)
SETTRDFN(BPTMP,BP59) ;
"RTN","BPSSCR03",229,0)
 ;the following stores the latest transaction date of the claims, which
"RTN","BPSSCR03",230,0)
 ;was found for this particular combination of patient and insurance
"RTN","BPSSCR03",231,0)
 ;@BPTMP@("DFN-TRDT",BPDFN,BPINSUR)=BPTRDT
"RTN","BPSSCR03",232,0)
 ;the following stores the latest transaction date BPTRDT,patient BPDFN and
"RTN","BPSSCR03",233,0)
 ;insurance BPINSUR to provide a proper order
"RTN","BPSSCR03",234,0)
 ;@BPTMP@("TRDTDFN",BPTRDT,BPDFN,BPINSUR)=""
"RTN","BPSSCR03",235,0)
 N BPZERO,BPTRDT,BPDFN,BPPREV,BPINSUR
"RTN","BPSSCR03",236,0)
 S BPZERO=$G(^BPST(BP59,0)) ;
"RTN","BPSSCR03",237,0)
 S BPTRDT=-$P(BPZERO,U,8) ;"transaction" date
"RTN","BPSSCR03",238,0)
 S BPDFN=+$P(BPZERO,U,6) ;patient ptr to #2
"RTN","BPSSCR03",239,0)
 S BPINSUR=+$$GETINSUR^BPSSCRU2(BP59) ;insurance ien
"RTN","BPSSCR03",240,0)
 ;in the beginning we don't have any "DFN-TRDT" and "TRDTDFN"
"RTN","BPSSCR03",241,0)
 ;so create them and quit
"RTN","BPSSCR03",242,0)
 I '$D(@BPTMP@("DFN-TRDT",BPDFN,BPINSUR)) D  Q
"RTN","BPSSCR03",243,0)
 . S @BPTMP@("DFN-TRDT",BPDFN,BPINSUR)=BPTRDT
"RTN","BPSSCR03",244,0)
 . S @BPTMP@("TRDTDFN",BPTRDT,BPDFN,BPINSUR)=""
"RTN","BPSSCR03",245,0)
 ;if we already have them then get the latest into BPPREV
"RTN","BPSSCR03",246,0)
 S BPPREV=+$G(@BPTMP@("DFN-TRDT",BPDFN,BPINSUR))
"RTN","BPSSCR03",247,0)
 ;and compare it against the BPTRDT for this BP59
"RTN","BPSSCR03",248,0)
 ;if the BPTRDT is greater then replace the values in "DFN-TRDT"
"RTN","BPSSCR03",249,0)
 ;and "TRDTDFN"
"RTN","BPSSCR03",250,0)
 I BPTRDT<BPPREV D
"RTN","BPSSCR03",251,0)
 . S @BPTMP@("TRDTDFN",BPTRDT,BPDFN,BPINSUR)=""
"RTN","BPSSCR03",252,0)
 . S @BPTMP@("DFN-TRDT",BPDFN,BPINSUR)=BPTRDT
"RTN","BPSSCR03",253,0)
 . K @BPTMP@("TRDTDFN",BPPREV,BPDFN,BPINSUR)
"RTN","BPSSCR03",254,0)
 Q
"RTN","BPSSCRCL")
0^55^B76318080
"RTN","BPSSCRCL",1,0)
BPSSCRCL ;BHAM ISC/SS - ECME SCREEN CLOSE CLAIMS ;05-APR-05
"RTN","BPSSCRCL",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8**;JUN 2004;Build 29
"RTN","BPSSCRCL",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSSCRCL",4,0)
 Q
"RTN","BPSSCRCL",5,0)
 ;
"RTN","BPSSCRCL",6,0)
CLO ;entry point to close claims
"RTN","BPSSCRCL",7,0)
 N BPRET,BPSARR59
"RTN","BPSSCRCL",8,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSSCRCL",9,0)
 D FULL^VALM1
"RTN","BPSSCRCL",10,0)
 W !,"Enter the line numbers for the claim(s) to be closed."
"RTN","BPSSCRCL",11,0)
 S BPRET=$$ASKLINES^BPSSCRU4("Select item(s)","C",.BPSARR59,VALMAR)
"RTN","BPSSCRCL",12,0)
 I BPRET="^" S VALMBCK="R" Q
"RTN","BPSSCRCL",13,0)
 ;close claims
"RTN","BPSSCRCL",14,0)
 ;update the content of the screen
"RTN","BPSSCRCL",15,0)
 ;only if at least one claim was closed
"RTN","BPSSCRCL",16,0)
 I $$CLOSE(.BPSARR59) D REDRAW^BPSSCRUD("Updating screen for closed claims...")
"RTN","BPSSCRCL",17,0)
 E  S VALMBCK="R"
"RTN","BPSSCRCL",18,0)
 Q
"RTN","BPSSCRCL",19,0)
 ;
"RTN","BPSSCRCL",20,0)
 ;close claims
"RTN","BPSSCRCL",21,0)
 ;input:
"RTN","BPSSCRCL",22,0)
 ; BP59ARR - array with ptrs to BPS TRANSACTION FILE
"RTN","BPSSCRCL",23,0)
 ;       BP59ARR(ien59)="ien in TMP ^ number on the user screen"
"RTN","BPSSCRCL",24,0)
 ;returns:
"RTN","BPSSCRCL",25,0)
 ; BPCLTOT - number of closed claims
"RTN","BPSSCRCL",26,0)
CLOSE(BP59ARR) ;
"RTN","BPSSCRCL",27,0)
 N BPNEWARR,BPRETV,BPREJFLG,X
"RTN","BPSSCRCL",28,0)
 N BPDFN,BP59,BPIFANY,BPQ,BPCLST,BPS52,BPSRF,BPSZ,BPSECOND
"RTN","BPSSCRCL",29,0)
 N BPREAS,BPCOMM,BP90ANSW,BPRCOPAY,BPRXINFO,BPCOP,BPCLTOT,BPINS,BPINSNM,BP59FRST
"RTN","BPSSCRCL",30,0)
 S BPRETV=$$MKNEWARR^BPSSCR05(.BP59ARR,.BPNEWARR,.BPINS)
"RTN","BPSSCRCL",31,0)
 S BPQ="",BPIFANY=0,BPREJFLG=1,BPSECOND=0
"RTN","BPSSCRCL",32,0)
 S BPDFN=""
"RTN","BPSSCRCL",33,0)
 F  S BPDFN=$O(BPNEWARR(BPDFN)) Q:BPDFN=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",34,0)
 . W !!,"You've chosen to close the following prescription(s) for",!,$E($$PATNAME^BPSSCRU2(BPDFN),1,13)_" :"
"RTN","BPSSCRCL",35,0)
 . S BP59="" F  S BP59=$O(BPNEWARR(BPDFN,BP59)) Q:BP59=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",36,0)
 . . I $Y>20 D PAUSE^VALM1 W @IOF I X="^" S BPQ="^" Q
"RTN","BPSSCRCL",37,0)
 . . S BPIFANY=1,BPQ=""
"RTN","BPSSCRCL",38,0)
 . . S BPREJFLG=+$P($G(BPNEWARR(BPDFN,BP59)),U,3)
"RTN","BPSSCRCL",39,0)
 . . W !,@VALMAR@(+$G(BPNEWARR(BPDFN,BP59)),0)
"RTN","BPSSCRCL",40,0)
 . . D DISPREJ^BPSSCRU6(BP59)
"RTN","BPSSCRCL",41,0)
 . . ;can't close a closed claim. The user must reopen first.
"RTN","BPSSCRCL",42,0)
 . . I $$CLOSED02^BPSSCR03($P($G(^BPST(BP59,0)),U,4)) W !,"This claim is already closed." S BPQ="^" Q
"RTN","BPSSCRCL",43,0)
 . . ;get claim status from transaction
"RTN","BPSSCRCL",44,0)
 . . S BPCLST=$$CLAIMST^BPSSCRU3(BP59)
"RTN","BPSSCRCL",45,0)
 . . ;Is this a secondary claim?
"RTN","BPSSCRCL",46,0)
 . . I $P($G(^BPST(BP59,0)),U,14)=2 S BPSECOND=1
"RTN","BPSSCRCL",47,0)
 . . I $P($G(^BPST(BP59,0)),U,14)<2,$$PAYABLE^BPSOSRX5($P(BPCLST,U)),$$PAYBLSEC^BPSUTIL2(BP59) D  S BPQ="^" Q
"RTN","BPSSCRCL",48,0)
 . . . W !,"The claim cannot be closed if the secondary claim is payable.",!,"Please reverse the secondary claim first."
"RTN","BPSSCRCL",49,0)
 . . I BPSECOND,BPCLST'["E REJECTED",BPCLST'["E REVERSAL ACCEPTED" D  S BPQ="^" Q
"RTN","BPSSCRCL",50,0)
 . . . W !,"The CLOSE action can only be applied to an E REJECTED or E REVERSAL ACCEPTED",!,"secondary claim. This claim is ",$P(BPCLST,U),".",!,"The secondary claim is also closed when the primary claim is closed."
"RTN","BPSSCRCL",51,0)
 . . W:BPREJFLG=0 !,"Claim Neither Rejected Nor Reversed and cannot be Closed."
"RTN","BPSSCRCL",52,0)
 I +BPRETV=0 Q $$QUITCL()
"RTN","BPSSCRCL",53,0)
 I BPQ="^" Q $$QUITCL()
"RTN","BPSSCRCL",54,0)
 ;
"RTN","BPSSCRCL",55,0)
 W !!,"ALL Selected Rxs will be CLOSED using the same information gathered in the",!,"following prompts.",!
"RTN","BPSSCRCL",56,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSSCRCL",57,0)
 I BPQ'=1 Q $$QUITCL()
"RTN","BPSSCRCL",58,0)
 ;
"RTN","BPSSCRCL",59,0)
 ; ask questions for all of them
"RTN","BPSSCRCL",60,0)
 W !!
"RTN","BPSSCRCL",61,0)
 I $$ASKQUEST(+$P(BPRETV,U,2),.BPREAS,.BPCOMM,.BP90ANSW,.BPRCOPAY)'=1 Q $$QUITCL()
"RTN","BPSSCRCL",62,0)
 ;
"RTN","BPSSCRCL",63,0)
 ; check 2nd insurance, but only if closing a Primary claim.
"RTN","BPSSCRCL",64,0)
 S BPQ=""
"RTN","BPSSCRCL",65,0)
 I BP90ANSW'="D",'BPSECOND D
"RTN","BPSSCRCL",66,0)
 . S BPDFN="" F  S BPDFN=$O(BPINS(BPDFN)) Q:BPDFN=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",67,0)
 . . S BPINSNM="" F  S BPINSNM=$O(BPINS(BPDFN,BPINSNM)) Q:BPINSNM=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",68,0)
 . . . S BP59FRST=0
"RTN","BPSSCRCL",69,0)
 . . . S BP59=""
"RTN","BPSSCRCL",70,0)
 . . . K BPRXINFO
"RTN","BPSSCRCL",71,0)
 . . . F  S BP59=$O(BPINS(BPDFN,BPINSNM,BP59)) Q:BP59=""  D  Q:BPQ="^"
"RTN","BPSSCRCL",72,0)
 . . . . S:BP59FRST=0 BP59FRST=BP59
"RTN","BPSSCRCL",73,0)
 . . . . S BPRXINFO(BP59)=$E($G(@VALMAR@(+$G(BP59ARR(BP59)),0)),7,99)
"RTN","BPSSCRCL",74,0)
 . . . ; Only check 2nd if the RX/Fill is released
"RTN","BPSSCRCL",75,0)
 . . . S BPSZ=$$RXREF^BPSSCRU2(BP59FRST)
"RTN","BPSSCRCL",76,0)
 . . . S BPS52=$P(BPSZ,U),BPSRF=$P(BPSZ,U,2)
"RTN","BPSSCRCL",77,0)
 . . . Q:$$RELDATE^BPSBCKJ(BPS52,BPSRF)']""
"RTN","BPSSCRCL",78,0)
 . . . ; call CH2NDINS^BPSSCRU5 only once for all claims for this patient and insurance
"RTN","BPSSCRCL",79,0)
 . . . ; you can use one BP59FRST for the group of claims here as a parameter since 
"RTN","BPSSCRCL",80,0)
 . . . ; they all are all identical from the "patient-insurance pair" point of view
"RTN","BPSSCRCL",81,0)
 . . . D:BP59FRST>0 CH2NDINS^BPSSCRU5(BP59FRST,$E($$PATNAME^BPSSCRU2(BPDFN),1,13),BPINSNM,.BPRXINFO)
"RTN","BPSSCRCL",82,0)
 ;
"RTN","BPSSCRCL",83,0)
 I BPQ="^" Q $$QUITCL()
"RTN","BPSSCRCL",84,0)
 ;
"RTN","BPSSCRCL",85,0)
 W @IOF
"RTN","BPSSCRCL",86,0)
 ;and finally close all
"RTN","BPSSCRCL",87,0)
 S BPCLTOT=0
"RTN","BPSSCRCL",88,0)
 S BPDFN="" F  S BPDFN=$O(BPNEWARR(BPDFN)) Q:BPDFN=""  D
"RTN","BPSSCRCL",89,0)
 . S BP59="" F  S BP59=$O(BPNEWARR(BPDFN,BP59)) Q:BP59=""  D
"RTN","BPSSCRCL",90,0)
 . . I $P($G(BPNEWARR(BPDFN,BP59)),U,3)=0 Q  ;can't be closed
"RTN","BPSSCRCL",91,0)
 . . S BPCOP=0
"RTN","BPSSCRCL",92,0)
 . . I +BPRCOPAY=1,$P($G(BPNEWARR(BPDFN,BP59)),U,4)=1 S BPCOP=1 ;release copay
"RTN","BPSSCRCL",93,0)
 . . I $$CLOSEIT(BP59,$P(BPREAS,U,2),BPCOMM,BP90ANSW,BPCOP)>0 D
"RTN","BPSSCRCL",94,0)
 . . . S BPCLTOT=BPCLTOT+1
"RTN","BPSSCRCL",95,0)
 ;
"RTN","BPSSCRCL",96,0)
 W !,BPCLTOT," claim",$S(BPCLTOT'=1:"s have",1:" has")," been closed.",!
"RTN","BPSSCRCL",97,0)
 D PAUSE^VALM1
"RTN","BPSSCRCL",98,0)
 Q BPCLTOT
"RTN","BPSSCRCL",99,0)
 ;
"RTN","BPSSCRCL",100,0)
QUITCL() ;
"RTN","BPSSCRCL",101,0)
 W !!,"0 claims have been closed."
"RTN","BPSSCRCL",102,0)
 D PAUSE^VALM1
"RTN","BPSSCRCL",103,0)
 Q 0
"RTN","BPSSCRCL",104,0)
 ;/**
"RTN","BPSSCRCL",105,0)
 ;Ask all necessary questions
"RTN","BPSSCRCL",106,0)
 ;Input
"RTN","BPSSCRCL",107,0)
 ; BPRELCOP - ask release copay question
"RTN","BPSSCRCL",108,0)
 ; .BPREAZ - ptr to #356.8 ^ CLOSE REASON NAME ^ ECME FLAG ^ ECME PAPER FLAG
"RTN","BPSSCRCL",109,0)
 ; .BPCOMZ - close comment (string)
"RTN","BPSSCRCL",110,0)
 ; .BP90ANSZ - "", "D"(drop to paper) or "N" (non-billable)
"RTN","BPSSCRCL",111,0)
 ; .BPRCOPAZ - 1(Yes) or 0(No) , answer to "release copay" question
"RTN","BPSSCRCL",112,0)
 ;Output:
"RTN","BPSSCRCL",113,0)
 ; 0 - cancel process
"RTN","BPSSCRCL",114,0)
 ; ^ - emergency quit (cancel process)
"RTN","BPSSCRCL",115,0)
 ; 1 - ok, can proceed
"RTN","BPSSCRCL",116,0)
ASKQUEST(BPRELCOP,BPREAZ,BPCOMZ,BP90ANSZ,BPRCOPAZ) ;*/
"RTN","BPSSCRCL",117,0)
 S BPCOMZ=""
"RTN","BPSSCRCL",118,0)
 S BP90ANSZ=""
"RTN","BPSSCRCL",119,0)
 S BPRCOPAZ=0
"RTN","BPSSCRCL",120,0)
 ;ask the user to choose the close reason from #356.8
"RTN","BPSSCRCL",121,0)
 ;using set of close reasons in IB file 356.8
"RTN","BPSSCRCL",122,0)
 S BPREAZ=$$REASON()
"RTN","BPSSCRCL",123,0)
 I BPREAZ="^" Q "^"
"RTN","BPSSCRCL",124,0)
 I ($P(BPREAZ,U,4)=1) D  ;if has ECME PAPER FLAG
"RTN","BPSSCRCL",125,0)
 . ;ask if the claim is still billable thru paper?
"RTN","BPSSCRCL",126,0)
 . S BP90ANSZ=$$PROMPT^BPSSCRCV("S^N:NON-BILLABLE;D:DROP TO PAPER","Treat as (N)on-Billable Episode or (D)rop Bill to Paper?","")
"RTN","BPSSCRCL",127,0)
 I BP90ANSZ=-1 Q "^"
"RTN","BPSSCRCL",128,0)
 S BPCOMZ=$$COMMENT("Comment ",40)
"RTN","BPSSCRCL",129,0)
 I (BPCOMZ="^") Q "^"
"RTN","BPSSCRCL",130,0)
 I $L(BPCOMZ)>0,BPCOMZ?1" "." " S BPCOMZ=""
"RTN","BPSSCRCL",131,0)
 ;check copay
"RTN","BPSSCRCL",132,0)
 ;ask "release copay?" in all NON-BILLABLE cases, i.e. except user answered "DROP TO PAPER"
"RTN","BPSSCRCL",133,0)
 ;(even in cases when he was not asked about it)
"RTN","BPSSCRCL",134,0)
 I BP90ANSZ'="D",BPRELCOP D
"RTN","BPSSCRCL",135,0)
 . ; Ask user if s/he wants to release a copay
"RTN","BPSSCRCL",136,0)
 . S BPRCOPAZ=$$YESNO^BPSSCRRS("Release Patient CoPay(Y/N)")
"RTN","BPSSCRCL",137,0)
 I BPRCOPAZ=-1 Q "^"
"RTN","BPSSCRCL",138,0)
 ;
"RTN","BPSSCRCL",139,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSSCRCL",140,0)
 I BPQ=-1 Q "^" ;quit by "^"
"RTN","BPSSCRCL",141,0)
 I BPQ'=1 Q 0 ;doesn't want to proceed
"RTN","BPSSCRCL",142,0)
 Q 1 ; answers can be used
"RTN","BPSSCRCL",143,0)
 ;
"RTN","BPSSCRCL",144,0)
 ;/**
"RTN","BPSSCRCL",145,0)
 ;ask for the close reason
"RTN","BPSSCRCL",146,0)
 ;return:
"RTN","BPSSCRCL",147,0)
 ;   ptr to #356.8 ^ CLOSE REASON NAME ^ ECME FLAG ^ ECME PAPER FLAG
"RTN","BPSSCRCL",148,0)
REASON() ;
"RTN","BPSSCRCL",149,0)
 N DIC,BPREASNM,BP3568,Y
"RTN","BPSSCRCL",150,0)
 ; - Asks for REASON for Closing
"RTN","BPSSCRCL",151,0)
 S DIC="^IBE(356.8,",DIC(0)="AEQMZ"
"RTN","BPSSCRCL",152,0)
 S DIC("S")="I $P(^(0),U,2)=1"
"RTN","BPSSCRCL",153,0)
 D ^DIC
"RTN","BPSSCRCL",154,0)
 I Y=-1 Q "^"
"RTN","BPSSCRCL",155,0)
 Q +Y_U_Y(0)
"RTN","BPSSCRCL",156,0)
 ;/**
"RTN","BPSSCRCL",157,0)
 ;enter the comment
"RTN","BPSSCRCL",158,0)
 ;BPSTR  -prompt string
"RTN","BPSSCRCL",159,0)
 ;BPMLEN -maxlen
"RTN","BPSSCRCL",160,0)
COMMENT(BPSTR,BPMLEN) ;*/
"RTN","BPSSCRCL",161,0)
 N DIR,DTOUT,DUOUT,BPQ
"RTN","BPSSCRCL",162,0)
 I '$D(BPSTR) S BPSTR="Comment "
"RTN","BPSSCRCL",163,0)
 I '$D(BPMLEN) S BPMLEN=40
"RTN","BPSSCRCL",164,0)
 S DIR(0)="FO^0:250"
"RTN","BPSSCRCL",165,0)
 S DIR("A")=BPSTR
"RTN","BPSSCRCL",166,0)
 S DIR("?",1)="This response must have no more than "_BPMLEN_" characters"
"RTN","BPSSCRCL",167,0)
 S DIR("?")="and must not contain embedded up arrow."
"RTN","BPSSCRCL",168,0)
 S BPQ=0
"RTN","BPSSCRCL",169,0)
 F  D  Q:+BPQ'=0
"RTN","BPSSCRCL",170,0)
 . D ^DIR
"RTN","BPSSCRCL",171,0)
 . I $D(DUOUT)!($D(DTOUT)) S BPQ=-1 Q
"RTN","BPSSCRCL",172,0)
 . I $L(Y)'>BPMLEN S BPQ=1 Q
"RTN","BPSSCRCL",173,0)
 . W !!,"This response must have no more than "_BPMLEN_" characters"
"RTN","BPSSCRCL",174,0)
 . W !,"and must not contain embedded uparrow.",!
"RTN","BPSSCRCL",175,0)
 . S DIR("B")=$E(Y,1,BPMLEN)
"RTN","BPSSCRCL",176,0)
 Q:BPQ<0 "^"
"RTN","BPSSCRCL",177,0)
 Q Y
"RTN","BPSSCRCL",178,0)
 ;/** 
"RTN","BPSSCRCL",179,0)
 ;close the claim
"RTN","BPSSCRCL",180,0)
 ;the approach and code partially borrowed from IHS code CLOSE^BPSOS6N
"RTN","BPSSCRCL",181,0)
 ;BPSTRA - ptr to #9002313.59
"RTN","BPSSCRCL",182,0)
 ;REASON - text name of the close reason 
"RTN","BPSSCRCL",183,0)
 ;BPSCLCM - comment 
"RTN","BPSSCRCL",184,0)
 ;BPDROP:
"RTN","BPSSCRCL",185,0)
 ;  "D" - DROP BILL TO PAPER
"RTN","BPSSCRCL",186,0)
 ;  "N" - NON-BILLABLE
"RTN","BPSSCRCL",187,0)
 ;BPRELCOP - 1 (Yes) or 0 (No) release copay or not?
"RTN","BPSSCRCL",188,0)
CLOSEIT(BPSTRA,REASON,BPSCLCM,BPDROP,BPRELCOP) ;
"RTN","BPSSCRCL",189,0)
 N BPSCLA,ERROR,DA,DR,BPLCK,DIE
"RTN","BPSSCRCL",190,0)
 S BPSCLA=$$GET1^DIQ(9002313.59,BPSTRA,3,"I")
"RTN","BPSSCRCL",191,0)
 W !,"Closing Claim ",$$GET1^DIQ(9002313.02,BPSCLA,.01),"..."
"RTN","BPSSCRCL",192,0)
 S BPLCK=0
"RTN","BPSSCRCL",193,0)
 L +^BPSC(BPSCLA):0
"RTN","BPSSCRCL",194,0)
 I $T S BPLCK=1
"RTN","BPSSCRCL",195,0)
 E  W !,"       *** CLAIM ",$$GET1^DIQ(9002313.02,BPSCLA,.01)," IN USE ***" Q 0
"RTN","BPSSCRCL",196,0)
 D CLOSE^BPSBUTL(BPSCLA,BPSTRA,REASON,$S($G(BPDROP)="D":1,1:0),BPRELCOP,BPSCLCM,.ERROR)
"RTN","BPSSCRCL",197,0)
 I $D(ERROR) W "NOT OK" D DSPERR(ERROR) D  Q 0
"RTN","BPSSCRCL",198,0)
 . I BPLCK=1 L -^BPSC(BPSCLA)
"RTN","BPSSCRCL",199,0)
 S DIE="^BPSC(",DA=BPSCLA,DR="901///1;902///"_$$NOW^XLFDT()_";903////"_DUZ_";904///"_REASON_";905////"_BPDROP D ^DIE
"RTN","BPSSCRCL",200,0)
 I BPLCK=1 L -^BPSC(BPSCLA)
"RTN","BPSSCRCL",201,0)
 H 1 W "OK"
"RTN","BPSSCRCL",202,0)
 Q 1
"RTN","BPSSCRCL",203,0)
 ;
"RTN","BPSSCRCL",204,0)
DSPERR(MSG) ; Display the ERROR message
"RTN","BPSSCRCL",205,0)
 W !,"Error: *** ",MSG," ***"
"RTN","BPSSCRCL",206,0)
 Q
"RTN","BPSSCRCL",207,0)
 ;
"RTN","BPSSCRCL",208,0)
 ;/**
"RTN","BPSSCRCL",209,0)
 ;ECME has tried to submit the claim to insurance with the name BPINSNAM
"RTN","BPSSCRCL",210,0)
 ;but the claim was rejected and now we need to determine if the patient
"RTN","BPSSCRCL",211,0)
 ;has any other insurance with pharmacy coverage that can be billed for the RX
"RTN","BPSSCRCL",212,0)
 ;Input:
"RTN","BPSSCRCL",213,0)
 ; BP59 - pointer to file #9002313.59
"RTN","BPSSCRCL",214,0)
 ; BPINSNAM - insurance that have already been used by ECME
"RTN","BPSSCRCL",215,0)
 ;Output:
"RTN","BPSSCRCL",216,0)
 ; 0 - not found
"RTN","BPSSCRCL",217,0)
 ; 1 ^ Insurance Name ^ Group Number ^ Date  of service
"RTN","BPSSCRCL",218,0)
NEXTINS(BP59,BPINSNAM) ;get insurance info by the pointer of #9002313.59
"RTN","BPSSCRCL",219,0)
 N BPDOS,BPDFN,BPZZ,BP36,BPX,BPHONE,BPY,BPINSNM
"RTN","BPSSCRCL",220,0)
 N BPPHARM,BPCOORD,BPINS,BPFOUND
"RTN","BPSSCRCL",221,0)
 S BPY=0
"RTN","BPSSCRCL",222,0)
 S BPHONE=$P($G(^BPST(BP59,10,+$G(^BPST(BP59,9)),3)),U,2)
"RTN","BPSSCRCL",223,0)
 S BPDOS=+$P($G(^BPST(BP59,12)),U,2)\1
"RTN","BPSSCRCL",224,0)
 I BPDOS=0 S BPDOS=+$P($G(^BPST(BP59,0)),U,8)\1
"RTN","BPSSCRCL",225,0)
 S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSSCRCL",226,0)
 ; call INSUR^IBBAPI to get information about:
"RTN","BPSSCRCL",227,0)
 ;1 = Insurance Company Name
"RTN","BPSSCRCL",228,0)
 ;7 = Coordination of Benefits (primary, secondary, tertiary)
"RTN","BPSSCRCL",229,0)
 ;15 = Pharmacy Coverage?
"RTN","BPSSCRCL",230,0)
 ;18 = Group Number
"RTN","BPSSCRCL",231,0)
 S BPX=$$INSUR^IBBAPI(BPDFN,BPDOS,,.BPZZ,"1,7,15,18")
"RTN","BPSSCRCL",232,0)
 S BP1="" F  S BP1=$O(BPZZ("IBBAPI","INSUR",BP1)) Q:+BP1=0  D
"RTN","BPSSCRCL",233,0)
 . ;get pharmacy coverage
"RTN","BPSSCRCL",234,0)
 . S BPPHARM=+$G(BPZZ("IBBAPI","INSUR",BP1,15))
"RTN","BPSSCRCL",235,0)
 I BPX<1 Q 0
"RTN","BPSSCRCL",236,0)
 D PROCINS(.BPZZ)
"RTN","BPSSCRCL",237,0)
 ;check pharmacy coverage
"RTN","BPSSCRCL",238,0)
 S BPFOUND=0 ;if found will be set to insurance node in the INSUR^IBBAPI array
"RTN","BPSSCRCL",239,0)
 S BPPHARM=1 ;look only at those with pharmacy coverage
"RTN","BPSSCRCL",240,0)
 S BPCOORD=0
"RTN","BPSSCRCL",241,0)
 F  S BPCOORD=+$O(BPZZ("RES",BPPHARM,BPCOORD)) Q:BPCOORD=0!(BPFOUND'=0)  D
"RTN","BPSSCRCL",242,0)
 . S BPINS=+$O(BPZZ("RES",BPPHARM,BPCOORD,0))
"RTN","BPSSCRCL",243,0)
 . I BPINS>0 I $P($G(BPZZ("IBBAPI","INSUR",BPINS,1)),U,2)'=BPINSNAM S BPFOUND=BPINS
"RTN","BPSSCRCL",244,0)
 I BPFOUND=0 Q 0
"RTN","BPSSCRCL",245,0)
 Q 1_U_$P($G(BPZZ("IBBAPI","INSUR",BPFOUND,1)),U,2)_U_$P($G(BPZZ("IBBAPI","INSUR",BPFOUND,18)),U)_U_BPDOS
"RTN","BPSSCRCL",246,0)
 ;
"RTN","BPSSCRCL",247,0)
 ;process insurances
"RTN","BPSSCRCL",248,0)
 ;input: local array returned by INSUR^IBBAPI
"RTN","BPSSCRCL",249,0)
 ;output: BPZZ("RES",pharmacy coverage,coordination,insurance element # in BPZZ array)
"RTN","BPSSCRCL",250,0)
PROCINS(BPZZ) ;
"RTN","BPSSCRCL",251,0)
 N BP1,BP2,BP0,BPPHONE,BPPHARM,BPCOORD
"RTN","BPSSCRCL",252,0)
 S BP1="" F  S BP1=$O(BPZZ("IBBAPI","INSUR",BP1)) Q:+BP1=0  D
"RTN","BPSSCRCL",253,0)
 . ;get pharmacy coverage
"RTN","BPSSCRCL",254,0)
 . S BPPHARM=+$G(BPZZ("IBBAPI","INSUR",BP1,15))
"RTN","BPSSCRCL",255,0)
 . ;get coordination of benefits
"RTN","BPSSCRCL",256,0)
 . S BPCOORD=+$G(BPZZ("IBBAPI","INSUR",BP1,7))
"RTN","BPSSCRCL",257,0)
 . ;create ^TMP to sort results by pharmacy coverage and coordination of benefits
"RTN","BPSSCRCL",258,0)
 . S BPZZ("RES",BPPHARM,BPCOORD,BP1)=""
"RTN","BPSSCRCL",259,0)
 Q
"RTN","BPSSCRLG")
0^4^B97729982
"RTN","BPSSCRLG",1,0)
BPSSCRLG ;BHAM ISC/SS - ECME LOGINFO ;05-APR-05
"RTN","BPSSCRLG",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8**;JUN 2004;Build 29
"RTN","BPSSCRLG",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSSCRLG",4,0)
 ;
"RTN","BPSSCRLG",5,0)
 Q
"RTN","BPSSCRLG",6,0)
 ;
"RTN","BPSSCRLG",7,0)
EN ; -- main entry point for BPS LSTMN LOG
"RTN","BPSSCRLG",8,0)
 D EN^VALM("BPS LSTMN LOG")
"RTN","BPSSCRLG",9,0)
 Q
"RTN","BPSSCRLG",10,0)
 ;
"RTN","BPSSCRLG",11,0)
HDR ; -- header code
"RTN","BPSSCRLG",12,0)
 S VALMHDR(1)="Claim Log information"
"RTN","BPSSCRLG",13,0)
 S VALMHDR(2)=""
"RTN","BPSSCRLG",14,0)
 Q
"RTN","BPSSCRLG",15,0)
 ;
"RTN","BPSSCRLG",16,0)
INIT ; -- init variables and list array
"RTN","BPSSCRLG",17,0)
 N BPSELCLM,LINE
"RTN","BPSSCRLG",18,0)
 S BPSELCLM=$G(@VALMAR@("SELLN"))
"RTN","BPSSCRLG",19,0)
 ;  piece 2: patient ien #2
"RTN","BPSSCRLG",20,0)
 ;  piece 3: insurance ien #36
"RTN","BPSSCRLG",21,0)
 ;  piece 4: ptr to #9002313.59
"RTN","BPSSCRLG",22,0)
 S LINE=1
"RTN","BPSSCRLG",23,0)
 S VALMCNT=$$PREPINFO(.LINE,$P(BPSELCLM,U,2),$P(BPSELCLM,U,3),$P(BPSELCLM,U,4))
"RTN","BPSSCRLG",24,0)
 S:VALMCNT>1 VALMCNT=VALMCNT-1
"RTN","BPSSCRLG",25,0)
 Q
"RTN","BPSSCRLG",26,0)
 ;
"RTN","BPSSCRLG",27,0)
HELP ; -- help code
"RTN","BPSSCRLG",28,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","BPSSCRLG",29,0)
 K X
"RTN","BPSSCRLG",30,0)
 Q
"RTN","BPSSCRLG",31,0)
 ;
"RTN","BPSSCRLG",32,0)
EXIT ; -- exit code
"RTN","BPSSCRLG",33,0)
 Q
"RTN","BPSSCRLG",34,0)
 ;
"RTN","BPSSCRLG",35,0)
EXPND ; -- expand code
"RTN","BPSSCRLG",36,0)
 Q
"RTN","BPSSCRLG",37,0)
 ;
"RTN","BPSSCRLG",38,0)
 ;
"RTN","BPSSCRLG",39,0)
LOG ;entry point for LOG menu option
"RTN","BPSSCRLG",40,0)
 N BPRET,BPSEL
"RTN","BPSSCRLG",41,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSSCRLG",42,0)
 D FULL^VALM1
"RTN","BPSSCRLG",43,0)
 W !,"Enter the line number for which you wish to print claim logs."
"RTN","BPSSCRLG",44,0)
 S BPSEL=$$ASKLINE^BPSSCRU4("Select item","C","Please select SINGLE Rx Line.")
"RTN","BPSSCRLG",45,0)
 I BPSEL<1 S VALMBCK="R" Q
"RTN","BPSSCRLG",46,0)
 D SAVESEL(BPSEL,VALMAR)
"RTN","BPSSCRLG",47,0)
 D EN
"RTN","BPSSCRLG",48,0)
 S VALMBCK="R"
"RTN","BPSSCRLG",49,0)
 Q
"RTN","BPSSCRLG",50,0)
 ;
"RTN","BPSSCRLG",51,0)
 ;save for ListManager
"RTN","BPSSCRLG",52,0)
 ;BPSEL - selected line
"RTN","BPSSCRLG",53,0)
 ;BPVALMR - parent VALMAR 
"RTN","BPSSCRLG",54,0)
SAVESEL(BPSEL,BPVALMR) ;
"RTN","BPSSCRLG",55,0)
 D CLEANIT
"RTN","BPSSCRLG",56,0)
 S ^TMP("BPSLOG",$J,"VALM","SELLN")=BPSEL
"RTN","BPSSCRLG",57,0)
 S ^TMP("BPSLOG",$J,"VALM","PARENT")=BPVALMR
"RTN","BPSSCRLG",58,0)
 M ^TMP("BPSLOG",$J,"VALM","VIEWPARAMS")=@BPVALMR@("VIEWPARAMS")
"RTN","BPSSCRLG",59,0)
 Q
"RTN","BPSSCRLG",60,0)
 ;
"RTN","BPSSCRLG",61,0)
CLEANIT ;
"RTN","BPSSCRLG",62,0)
 K ^TMP("BPSLOG",$J,"VALM")
"RTN","BPSSCRLG",63,0)
 Q
"RTN","BPSSCRLG",64,0)
 ;input:
"RTN","BPSSCRLG",65,0)
 ; BPDFN: patient ien #2
"RTN","BPSSCRLG",66,0)
 ; BP36: insurance ien #36
"RTN","BPSSCRLG",67,0)
 ; BP59: ptr to #9002313.59
"RTN","BPSSCRLG",68,0)
 ; returns # of lines
"RTN","BPSSCRLG",69,0)
PREPINFO(BPLN,BPDFN,BP36,BP59) ;
"RTN","BPSSCRLG",70,0)
 I '$G(BP59) Q 0
"RTN","BPSSCRLG",71,0)
 I '$G(BP36) Q 0
"RTN","BPSSCRLG",72,0)
 I '$G(BPDFN) Q 0
"RTN","BPSSCRLG",73,0)
 N BPSCRLNS S BPSCRLNS=17 ;(see "BPS LSTMN LOG" LM template: Bottom=21, Top = 4, 21-4=17)
"RTN","BPSSCRLG",74,0)
 N BPX,BPRXIEN,BPREF,BP1,BPLSTCLM,BPLSTRSP,BPDAT59,BPUSR,BPSTRT,BPHIST,BPQ
"RTN","BPSSCRLG",75,0)
 N BPDT,BPLN0,BPCNT
"RTN","BPSSCRLG",76,0)
 S BP1=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSSCRLG",77,0)
 S BPRXIEN=$P(BP1,U,1)
"RTN","BPSSCRLG",78,0)
 S BPREF=$P(BP1,U,2)
"RTN","BPSSCRLG",79,0)
 S BPDAT59(0)=$G(^BPST(BP59,0))
"RTN","BPSSCRLG",80,0)
 ;create history
"RTN","BPSSCRLG",81,0)
 D MKHIST^BPSSCRU5(BP59,.BPHIST)
"RTN","BPSSCRLG",82,0)
 ;
"RTN","BPSSCRLG",83,0)
 S BPLN0=BPLN
"RTN","BPSSCRLG",84,0)
 D SETLINE(.BPLN,"Pharmacy ECME Log")
"RTN","BPSSCRLG",85,0)
 D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",86,0)
 S BPX=$$RJ^BPSSCR02("VA Rx #: ",19)_$$LJ^BPSSCR02($$RXNUM^BPSSCRU2(+BPRXIEN),13)
"RTN","BPSSCRLG",87,0)
 S BPX=BPX_$$RJ^BPSSCR02("Fill #: ",10)_$$LJ^BPSSCR02(BPREF,4)
"RTN","BPSSCRLG",88,0)
 S BPX=BPX_$$RJ^BPSSCR02("ECME Claim Rx #: ",18)_$$LJ^BPSSCR02(BP59,20)
"RTN","BPSSCRLG",89,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",90,0)
 S BPX=$$RJ^BPSSCR02("Patient Name: ",19)
"RTN","BPSSCRLG",91,0)
 S BPX=BPX_$$LJ^BPSSCR02($$PATNAME^BPSSCRU2(BPDFN)_" "_$$SSN4^BPSSCRU2(BPDFN),30)
"RTN","BPSSCRLG",92,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",93,0)
 S BPX=$$RJ^BPSSCR02("Last Submitted: ",19)
"RTN","BPSSCRLG",94,0)
 S BPSTRT=$P(BPDAT59(0),U,11) ;@# need to check with analyst if this is a START DATE
"RTN","BPSSCRLG",95,0)
 I BPSTRT]"" S BPX=BPX_$$DATETIME^BPSSCRU5(BPSTRT)
"RTN","BPSSCRLG",96,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",97,0)
 S BPX=$$RJ^BPSSCR02("Last Submitted By: ",19)
"RTN","BPSSCRLG",98,0)
 S BPUSR=$P(BPDAT59(0),U,10)
"RTN","BPSSCRLG",99,0)
 I BPUSR]"" S BPX=BPX_$$GETUSRNM^BPSSCRU1(BPUSR)
"RTN","BPSSCRLG",100,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",101,0)
 ;
"RTN","BPSSCRLG",102,0)
 ;latest claim
"RTN","BPSSCRLG",103,0)
 S BP1=+$O(BPHIST("C",99999999),-1)
"RTN","BPSSCRLG",104,0)
 I BP1=0 D SETLINE(.BPLN,""),SETLINE(.BPLN,"------ No electronic claims ------") Q BPLN
"RTN","BPSSCRLG",105,0)
 S BP1=+$O(BPHIST("C",BP1,0))
"RTN","BPSSCRLG",106,0)
 S BPX=$$RJ^BPSSCR02("Last VA Claim #: ",19)_$P($G(^BPSC(+BP1,0)),U,1)
"RTN","BPSSCRLG",107,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",108,0)
 F BPCNT=BPLN:1:BPLN0+BPSCRLNS D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",109,0)
 ;process history
"RTN","BPSSCRLG",110,0)
 N BPTYPE,BPIEN,BPIENRS
"RTN","BPSSCRLG",111,0)
 S BPDT=99999999
"RTN","BPSSCRLG",112,0)
 F  S BPDT=$O(BPHIST("C",BPDT),-1) Q:+BPDT=0  D
"RTN","BPSSCRLG",113,0)
 . S BPIEN=+$O(BPHIST("C",BPDT,0)) Q:BPIEN=""
"RTN","BPSSCRLG",114,0)
 . D DISPCLM(.BPLN,BP59,BPIEN,+BPHIST("C",BPDT,BPIEN),$P(BPHIST("C",BPDT,BPIEN),U,2),BPDT)
"RTN","BPSSCRLG",115,0)
 . S BPIENRS=0
"RTN","BPSSCRLG",116,0)
 . F  S BPIENRS=$O(BPHIST("C",BPDT,BPIEN,"R",BPIENRS)) Q:+BPIENRS=0  D
"RTN","BPSSCRLG",117,0)
 . . D DISPRSP(.BPLN,BP59,BPIENRS,+BPHIST("C",BPDT,BPIEN,"R",BPIENRS),$P(BPHIST("C",BPDT,BPIEN,"R",BPIENRS),U,2),BPDT)
"RTN","BPSSCRLG",118,0)
 Q BPLN
"RTN","BPSSCRLG",119,0)
 ;
"RTN","BPSSCRLG",120,0)
 ;increments BPLINE
"RTN","BPSSCRLG",121,0)
SETLINE(BPLINE,BPSTR) ;
"RTN","BPSSCRLG",122,0)
 D SET^VALM10(BPLINE,BPSTR)
"RTN","BPSSCRLG",123,0)
 S BPLINE=BPLINE+1
"RTN","BPSSCRLG",124,0)
 Q
"RTN","BPSSCRLG",125,0)
 ;display claim record
"RTN","BPSSCRLG",126,0)
DISPCLM(BPLN,BP59,BPIEN02,BP57,BPSTYPE,BPSDTALT) ;
"RTN","BPSSCRLG",127,0)
 N BPSCRLNS S BPSCRLNS=17 ;(see "BPS LSTMN LOG" LM template: Bottom=21, Top = 4, 21-4=17)
"RTN","BPSSCRLG",128,0)
 N BPX,BPLN0,BPCNT,BPSTR1,BPSTYP2
"RTN","BPSSCRLG",129,0)
 S BPLN0=BPLN
"RTN","BPSSCRLG",130,0)
 S BPSTYP2=$S(BPSTYPE="C":"CLAIM REQUEST",BPSTYPE="R":"REVERSAL",1:"")
"RTN","BPSSCRLG",131,0)
 S BPSTR1="Transmission Information ("_BPSTYP2_")(#"_BPIEN02_")"
"RTN","BPSSCRLG",132,0)
 D SETLINE(.BPLN,BPSTR1_$$LINE^BPSSCRU3(79-$L(BPSTR1),"-"))
"RTN","BPSSCRLG",133,0)
 D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",134,0)
 D SETLINE(.BPLN,"Created on: "_$$CREATEDT(BPIEN02,BPSDTALT))
"RTN","BPSSCRLG",135,0)
 D SETLINE(.BPLN,"VA Claim ID: "_$P($G(^BPSC(+BPIEN02,0)),U,1))
"RTN","BPSSCRLG",136,0)
 D SETLINE(.BPLN,"Submitted By: "_$$SUBMTBY(BP57))
"RTN","BPSSCRLG",137,0)
 D SETLINE(.BPLN,"Transaction Type: "_$$TRTYPE^BPSSCRU5($$TRCODE(BPIEN02)))
"RTN","BPSSCRLG",138,0)
 D SETLINE(.BPLN,"Date of Service: "_$$DOSCLM(BPIEN02))
"RTN","BPSSCRLG",139,0)
 D SETLINE(.BPLN,"NDC: "_$$LNDC^BPSSCRU5(BPIEN02))
"RTN","BPSSCRLG",140,0)
 D SETLINE(.BPLN,"ECME Pharmacy: "_$$DIVNAME^BPSSCRDS($$LDIV(BP57)))
"RTN","BPSSCRLG",141,0)
 D SETLINE(.BPLN,"Days Supply: "_$$DAYSSUPL(BPIEN02))
"RTN","BPSSCRLG",142,0)
 S BPX="Qty: "_$$QTY(BP57)
"RTN","BPSSCRLG",143,0)
 S BPX=BPX_"     Unit Price: "_$$UNTPRICE(BP57)
"RTN","BPSSCRLG",144,0)
 S BPX=BPX_"     Total Price: "_$$TOTPRICE(BP57)
"RTN","BPSSCRLG",145,0)
 D SETLINE(.BPLN,BPX)
"RTN","BPSSCRLG",146,0)
 D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",147,0)
 D SETLINE(.BPLN,"Insurance Name: "_$$INSUR57(BP57))
"RTN","BPSSCRLG",148,0)
 D SETLINE(.BPLN,"Rx Coordination of Benefits: "_$$RXCOB57(BP57))
"RTN","BPSSCRLG",149,0)
 D SETLINE(.BPLN,"BIN: "_$$BIN(BPIEN02))
"RTN","BPSSCRLG",150,0)
 D SETLINE(.BPLN,"PCN: "_$$PCN(BPIEN02))
"RTN","BPSSCRLG",151,0)
 D SETLINE(.BPLN,"Group ID: "_$$GRPID(BPIEN02))
"RTN","BPSSCRLG",152,0)
 D SETLINE(.BPLN,"Cardholder ID: "_$$CRDHLDID(BPIEN02))
"RTN","BPSSCRLG",153,0)
 D SETLINE(.BPLN,"Patient Relationship Code: "_$$PATRELSH(BPIEN02,BP57))
"RTN","BPSSCRLG",154,0)
 D SETLINE(.BPLN,"Cardholder First Name: "_$$CRDHLDFN(BPIEN02,BP57))
"RTN","BPSSCRLG",155,0)
 D SETLINE(.BPLN,"Cardholder Last Name: "_$$CRDHLDLN(BPIEN02,BP57))
"RTN","BPSSCRLG",156,0)
 F BPCNT=BPLN:1:BPLN0+BPSCRLNS D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",157,0)
 S BPLN0=BPLN
"RTN","BPSSCRLG",158,0)
 D SETLINE(.BPLN,"Plan ID: "_$$PLANID(BP57))
"RTN","BPSSCRLG",159,0)
 D SETLINE(.BPLN,"Payer Sheet IEN: "_$$PYRIEN^BPSSCRU5(BPIEN02))
"RTN","BPSSCRLG",160,0)
 D SETLINE(.BPLN,"B2 Payer Sheet IEN: "_$$B2PYRIEN^BPSSCRU5(BPIEN02,BP57))
"RTN","BPSSCRLG",161,0)
 D SETLINE(.BPLN,"B3 Rebill Payer Sheet: "_$$B3PYRIEN^BPSSCRU5(BPIEN02,BP59,BP57))
"RTN","BPSSCRLG",162,0)
 D SETLINE(.BPLN,"Certify Mode: "_$$CERTMOD(BP57))
"RTN","BPSSCRLG",163,0)
 D SETLINE(.BPLN,"Cert IEN: "_$$CERTIEN(BP57))
"RTN","BPSSCRLG",164,0)
 F BPCNT=BPLN:1:BPLN0+BPSCRLNS D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",165,0)
 Q
"RTN","BPSSCRLG",166,0)
 ;Submitted By User
"RTN","BPSSCRLG",167,0)
SUBMTBY(BP57) ;
"RTN","BPSSCRLG",168,0)
 N BPIEN,BPUSR
"RTN","BPSSCRLG",169,0)
 S BPIEN=$P($G(^BPSTL(BP57,0)),U,10)
"RTN","BPSSCRLG",170,0)
 S BPUSR=$$GETUSRNM^BPSSCRU1(BPIEN)
"RTN","BPSSCRLG",171,0)
 Q $S(BPUSR']"":"UNKNOWN",1:BPUSR)
"RTN","BPSSCRLG",172,0)
 ;Date of service
"RTN","BPSSCRLG",173,0)
DOSCLM(BPIEN02) ;
"RTN","BPSSCRLG",174,0)
 N BPDT
"RTN","BPSSCRLG",175,0)
 S BPDT=$P($G(^BPSC(BPIEN02,400,1,400)),U,1)\1
"RTN","BPSSCRLG",176,0)
 Q $E(BPDT,5,6)_"/"_$E(BPDT,7,8)_"/"_$E(BPDT,1,4)
"RTN","BPSSCRLG",177,0)
 ;Create date 
"RTN","BPSSCRLG",178,0)
CREATEDT(BPIEN02,BPSDTALT) ;
"RTN","BPSSCRLG",179,0)
 N BPSDT
"RTN","BPSSCRLG",180,0)
 S BPSDT=+$P($G(^BPSC(BPIEN02,0)),U,6)
"RTN","BPSSCRLG",181,0)
 Q $$DATETIME^BPSSCRU5($S(BPSDT>0:BPSDT,1:BPSDTALT))
"RTN","BPSSCRLG",182,0)
 ;Plan ID
"RTN","BPSSCRLG",183,0)
PLANID(BP57) ;
"RTN","BPSSCRLG",184,0)
 Q $P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),0)),U,1)
"RTN","BPSSCRLG",185,0)
CERTMOD(BP57) ;
"RTN","BPSSCRLG",186,0)
 Q $P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),0)),U,5)
"RTN","BPSSCRLG",187,0)
 ;Software Vendor/Cert ID
"RTN","BPSSCRLG",188,0)
CERTIEN(BP57) ;
"RTN","BPSSCRLG",189,0)
 Q $P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),0)),U,6)
"RTN","BPSSCRLG",190,0)
 ;group ID
"RTN","BPSSCRLG",191,0)
GRPID(BPIEN02) ;
"RTN","BPSSCRLG",192,0)
 Q $E($P($G(^BPSC(BPIEN02,300)),U,1),3,99)
"RTN","BPSSCRLG",193,0)
 ;Cardholder ID
"RTN","BPSSCRLG",194,0)
CRDHLDID(BPIEN02) ;
"RTN","BPSSCRLG",195,0)
 Q $E($P($G(^BPSC(BPIEN02,300)),U,2),3,99)
"RTN","BPSSCRLG",196,0)
 ;Cardholder First name
"RTN","BPSSCRLG",197,0)
CRDHLDFN(BPIEN02,BP57) ;
"RTN","BPSSCRLG",198,0)
 N Y
"RTN","BPSSCRLG",199,0)
 S Y=$P($G(^BPSC(BPIEN02,300)),U,12)
"RTN","BPSSCRLG",200,0)
 I $L(Y)=0 S Y=$P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),1)),U,6)
"RTN","BPSSCRLG",201,0)
 Q Y
"RTN","BPSSCRLG",202,0)
 ;Cardholder Last  Name
"RTN","BPSSCRLG",203,0)
CRDHLDLN(BPIEN02,BP57) ;
"RTN","BPSSCRLG",204,0)
 N Y
"RTN","BPSSCRLG",205,0)
 S Y=$P($G(^BPSC(BPIEN02,300)),U,13)
"RTN","BPSSCRLG",206,0)
 I $L(Y)=0 S Y=$P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),1)),U,7)
"RTN","BPSSCRLG",207,0)
 Q Y
"RTN","BPSSCRLG",208,0)
 ;Patient Relationship Code
"RTN","BPSSCRLG",209,0)
PATRELSH(BPIEN02,BP57) ;
"RTN","BPSSCRLG",210,0)
 N Y
"RTN","BPSSCRLG",211,0)
 S Y=$P($G(^BPSC(BPIEN02,300)),U,6)
"RTN","BPSSCRLG",212,0)
 I $L(Y)=0 S Y=$P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),1)),U,5)
"RTN","BPSSCRLG",213,0)
 Q $S(Y=1:"CARDHOLDER",Y=2:"SPOUSE",Y=3:"CHILD",1:Y)
"RTN","BPSSCRLG",214,0)
PCN(BPIEN02) ;
"RTN","BPSSCRLG",215,0)
 Q $P($G(^BPSC(BPIEN02,100)),U,4)
"RTN","BPSSCRLG",216,0)
BIN(BPIEN02) ;
"RTN","BPSSCRLG",217,0)
 Q $P($G(^BPSC(BPIEN02,100)),U,1)
"RTN","BPSSCRLG",218,0)
 ;insurance name by 9002313.57 pointer
"RTN","BPSSCRLG",219,0)
INSUR57(BPIEN57) ;
"RTN","BPSSCRLG",220,0)
 N BPINSN
"RTN","BPSSCRLG",221,0)
 S BPINSN=+$G(^BPSTL(BPIEN57,9))
"RTN","BPSSCRLG",222,0)
 Q $P($G(^BPSTL(BPIEN57,10,BPINSN,0)),U,7)
"RTN","BPSSCRLG",223,0)
QTY(BPIEN57) ;
"RTN","BPSSCRLG",224,0)
 Q +$P($G(^BPSTL(BPIEN57,5)),U,1)
"RTN","BPSSCRLG",225,0)
UNTPRICE(BPIEN57) ;
"RTN","BPSSCRLG",226,0)
 Q +$P($G(^BPSTL(BPIEN57,5)),U,2)
"RTN","BPSSCRLG",227,0)
TOTPRICE(BPIEN57) ;
"RTN","BPSSCRLG",228,0)
 Q +$P($G(^BPSTL(BPIEN57,5)),U,5)
"RTN","BPSSCRLG",229,0)
 ;get ECME pharmacy division ptr for LOG
"RTN","BPSSCRLG",230,0)
LDIV(BPIEN57) ;
"RTN","BPSSCRLG",231,0)
 Q +$P($G(^BPSTL(BPIEN57,1)),U,7)
"RTN","BPSSCRLG",232,0)
 ;transaction code
"RTN","BPSSCRLG",233,0)
TRCODE(BPIEN02) ;
"RTN","BPSSCRLG",234,0)
 Q $P($G(^BPSC(BPIEN02,100)),U,3)
"RTN","BPSSCRLG",235,0)
 ;days supply
"RTN","BPSSCRLG",236,0)
DAYSSUPL(BPIEN02) ;
"RTN","BPSSCRLG",237,0)
 ;format D5NNN -> NNN
"RTN","BPSSCRLG",238,0)
 Q +$E($P($G(^BPSC(BPIEN02,400,1,400)),U,5),3,99)
"RTN","BPSSCRLG",239,0)
 ;
"RTN","BPSSCRLG",240,0)
 ;display response record
"RTN","BPSSCRLG",241,0)
DISPRSP(BPLN,BP59,BPIEN03,BP57,BPSTYPE,BPSDTALT) ;
"RTN","BPSSCRLG",242,0)
 N BPSCRLNS S BPSCRLNS=17 ;(see "BPS LSTMN LOG" LM template: Bottom=21, Top = 4, 21-4=17)
"RTN","BPSSCRLG",243,0)
 N BPX,BPLN0,BPCNT,BPRJCDS,BPRJ,BPSTR1,BPSTYP2
"RTN","BPSSCRLG",244,0)
 S BPLN0=BPLN
"RTN","BPSSCRLG",245,0)
 S BPSTYP2=$S(BPSTYPE="C":"CLAIM REQUEST",BPSTYPE="R":"REVERSAL",1:"")
"RTN","BPSSCRLG",246,0)
 S BPSTR1="Response Information  ("_BPSTYP2_")(#"_BPIEN03_")"
"RTN","BPSSCRLG",247,0)
 D SETLINE(.BPLN,BPSTR1_$$LINE^BPSSCRU3(79-$L(BPSTR1),"-"))
"RTN","BPSSCRLG",248,0)
 D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",249,0)
 D SETLINE(.BPLN,"Response Received: "_$$RESPREC(BPIEN03,BPSDTALT))
"RTN","BPSSCRLG",250,0)
 D SETLINE(.BPLN,"Date of Service: "_$$DOSRSP(BPIEN03))
"RTN","BPSSCRLG",251,0)
 D SETLINE(.BPLN,"Transaction Response Status: "_$$RESPSTAT^BPSSCRU5(BPIEN03))
"RTN","BPSSCRLG",252,0)
 D SETLINE(.BPLN,"Total Amount Paid: $"_+$$TOTAMNT(BPIEN03,BP59,BP57))
"RTN","BPSSCRLG",253,0)
 D SETLINE(.BPLN,"Reject code(s): ")
"RTN","BPSSCRLG",254,0)
 D REJCODES^BPSSCRU5(BPIEN03,.BPRJCDS)
"RTN","BPSSCRLG",255,0)
 S BPRJ=""
"RTN","BPSSCRLG",256,0)
 F  S BPRJ=$O(BPRJCDS(BPRJ)) Q:BPRJ=""  D
"RTN","BPSSCRLG",257,0)
 . D SETLINE(.BPLN," "_$$GETRJNAM^BPSSCRU3(BPRJ))
"RTN","BPSSCRLG",258,0)
 D WRAPLN^BPSSCRU5(.BPLN,$$MESSAGE(BPIEN03),76,"Message: ",5)
"RTN","BPSSCRLG",259,0)
 D WRAPLN^BPSSCRU5(.BPLN,$$ADDMESS(BPIEN03),76,"Additional Message: ",5)
"RTN","BPSSCRLG",260,0)
 ;D WRAPLN^BPSSCRU5(.BPLN,$$DUR(BPIEN03),60,"DUR Information: ",5)
"RTN","BPSSCRLG",261,0)
 D WRAPLN^BPSSCRU5(.BPLN,$$DURRESP(BPIEN03),76,"DUR Response Info: ",5)
"RTN","BPSSCRLG",262,0)
 F BPCNT=BPLN:1:BPLN0+BPSCRLNS D SETLINE(.BPLN,"")
"RTN","BPSSCRLG",263,0)
 Q
"RTN","BPSSCRLG",264,0)
 ;
"RTN","BPSSCRLG",265,0)
RESPREC(BPIEN03,BPSDTALT) ;
"RTN","BPSSCRLG",266,0)
 N BPSDT
"RTN","BPSSCRLG",267,0)
 S BPSDT=+$P($G(^BPSR(BPIEN03,0)),U,2)
"RTN","BPSSCRLG",268,0)
 Q $$DATETIME^BPSSCRU5($S(BPSDT>0:BPSDT,1:BPSDTALT))
"RTN","BPSSCRLG",269,0)
 ;
"RTN","BPSSCRLG",270,0)
DOSRSP(BPIEN03) ;
"RTN","BPSSCRLG",271,0)
 N BPDT
"RTN","BPSSCRLG",272,0)
 S BPDT=$P($G(^BPSR(BPIEN03,400)),U,1)\1
"RTN","BPSSCRLG",273,0)
 Q $E(BPDT,5,6)_"/"_$E(BPDT,7,8)_"/"_$E(BPDT,1,4)
"RTN","BPSSCRLG",274,0)
 ;
"RTN","BPSSCRLG",275,0)
TOTAMNT(BPIEN03,BP59,BP57) ;
"RTN","BPSSCRLG",276,0)
 Q $$DFF2EXT^BPSECFM($P($G(^BPSR(BPIEN03,1000,1,500)),U,9))
"RTN","BPSSCRLG",277,0)
 ;
"RTN","BPSSCRLG",278,0)
MESSAGE(BPIEN03) ;
"RTN","BPSSCRLG",279,0)
 Q $P($G(^BPSR(BPIEN03,504)),U)
"RTN","BPSSCRLG",280,0)
 ;
"RTN","BPSSCRLG",281,0)
ADDMESS(BPIEN03) ;
"RTN","BPSSCRLG",282,0)
 Q $P($G(^BPSR(BPIEN03,1000,1,526)),U)
"RTN","BPSSCRLG",283,0)
 ;
"RTN","BPSSCRLG",284,0)
DUR(BPIEN03) ;
"RTN","BPSSCRLG",285,0)
 Q "???"
"RTN","BPSSCRLG",286,0)
 ;
"RTN","BPSSCRLG",287,0)
DURRESP(BPIEN03) ;
"RTN","BPSSCRLG",288,0)
 Q $P($G(^BPSR(BPIEN03,1000,1,525)),U)
"RTN","BPSSCRLG",289,0)
 ;
"RTN","BPSSCRLG",290,0)
RXCOB57(BPIEN57) ;
"RTN","BPSSCRLG",291,0)
 N BPCOB
"RTN","BPSSCRLG",292,0)
 S BPCOB=+$P($G(^BPSTL(BPIEN57,0)),U,14)
"RTN","BPSSCRLG",293,0)
 Q $S(BPCOB=2:"SECONDARY",BPCOB=3:"TERTIARY",1:"PRIMARY")
"RTN","BPSSCRRS")
0^23^B44067784
"RTN","BPSSCRRS",1,0)
BPSSCRRS ;BHAM ISC/SS - ECME SCREEN RESUBMIT ;05-APR-05
"RTN","BPSSCRRS",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,5,7,8**;JUN 2004;Build 29
"RTN","BPSSCRRS",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSSCRRS",4,0)
 Q
"RTN","BPSSCRRS",5,0)
 ;IA 4702
"RTN","BPSSCRRS",6,0)
 ;
"RTN","BPSSCRRS",7,0)
RES ;
"RTN","BPSSCRRS",8,0)
 N BPRET,BPSARR59
"RTN","BPSSCRRS",9,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSSCRRS",10,0)
 D FULL^VALM1
"RTN","BPSSCRRS",11,0)
 W !,"Enter the line numbers for the claim(s) to be resubmitted."
"RTN","BPSSCRRS",12,0)
 S BPRET=$$ASKLINES^BPSSCRU4("Select item(s)","C",.BPSARR59,VALMAR)
"RTN","BPSSCRRS",13,0)
 I BPRET="^" S VALMBCK="R" Q
"RTN","BPSSCRRS",14,0)
 ;go thru all selected claims and try to resubmit them separately
"RTN","BPSSCRRS",15,0)
 ;update the content of the screen and display it
"RTN","BPSSCRRS",16,0)
 ;only if at least one claim was submitted successfully
"RTN","BPSSCRRS",17,0)
 I $$RESUBMIT(.BPSARR59) D REDRAW^BPSSCRUD("Updating screen for resubmitted claims...")
"RTN","BPSSCRRS",18,0)
 E  S VALMBCK="R"
"RTN","BPSSCRRS",19,0)
 Q
"RTN","BPSSCRRS",20,0)
 ;
"RTN","BPSSCRRS",21,0)
 ;/**
"RTN","BPSSCRRS",22,0)
 ;go thru all selected claims and try to resubmit them separately
"RTN","BPSSCRRS",23,0)
 ;input:
"RTN","BPSSCRRS",24,0)
 ; RXI - array with ptrs to BPS TRANSACTION file (see ASKLINES^BPSSCRU4)
"RTN","BPSSCRRS",25,0)
 ;returns 
"RTN","BPSSCRRS",26,0)
 ; 0 - if no claims were resubmitted 
"RTN","BPSSCRRS",27,0)
 ; 1 - if at least one claim was resubmitted 
"RTN","BPSSCRRS",28,0)
RESUBMIT(RXI) ;*/
"RTN","BPSSCRRS",29,0)
 N BPRVRSED ;was successfully reversed
"RTN","BPSSCRRS",30,0)
 N BPRVNEED ;needs reversal
"RTN","BPSSCRRS",31,0)
 N BPRVWAIT ;cycles of waiting 
"RTN","BPSSCRRS",32,0)
 N BPRVRSNT ;reversal has been sent
"RTN","BPSSCRRS",33,0)
 N WHERE,DOSDATE,BILLNUM,RXIEN,RXR,BPDFN
"RTN","BPSSCRRS",34,0)
 N BP59
"RTN","BPSSCRRS",35,0)
 N UPDATFLG,BPCLTOT,BPCLTOTR
"RTN","BPSSCRRS",36,0)
 N BPQ,BPBILL
"RTN","BPSSCRRS",37,0)
 N BPSTATUS
"RTN","BPSSCRRS",38,0)
 N REVCOUNT S REVCOUNT=0
"RTN","BPSSCRRS",39,0)
 N BPIFANY S BPIFANY=0
"RTN","BPSSCRRS",40,0)
 N BPINPROG S BPINPROG=0
"RTN","BPSSCRRS",41,0)
 S BPCLTOT=0 ;total for resubmitted
"RTN","BPSSCRRS",42,0)
 S BPCLTOTR=0 ;total for reversed, not resubmitted
"RTN","BPSSCRRS",43,0)
 S UPDATFLG=0
"RTN","BPSSCRRS",44,0)
 S BP59="",BPQ=""
"RTN","BPSSCRRS",45,0)
 F  S BP59=$O(RXI(BP59)) Q:BP59=""  D  Q:BPQ="^"
"RTN","BPSSCRRS",46,0)
 . I BPIFANY=0 W @IOF
"RTN","BPSSCRRS",47,0)
 . S BPIFANY=1,BPQ=""
"RTN","BPSSCRRS",48,0)
 . S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSSCRRS",49,0)
 . W !,"You've chosen to RESUBMIT the following prescription for "_$E($$PATNAME^BPSSCRU2(BPDFN),1,13)
"RTN","BPSSCRRS",50,0)
 . W !,@VALMAR@(+$G(RXI(BP59)),0)
"RTN","BPSSCRRS",51,0)
 . S (BPRVNEED,BPRVRSED,BPRVWAIT,BPRVRSNT)=0
"RTN","BPSSCRRS",52,0)
 . S BPQ=$$YESNO("Are you sure?(Y/N)")
"RTN","BPSSCRRS",53,0)
 . I BPQ=-1 S BPQ="^" Q
"RTN","BPSSCRRS",54,0)
 . I BPQ'=1 Q
"RTN","BPSSCRRS",55,0)
 . S RXIEN=$P(BP59,".")
"RTN","BPSSCRRS",56,0)
 . S RXR=+$E($P(BP59,".",2),1,4)
"RTN","BPSSCRRS",57,0)
 . I BPRVNEED=1&(BPRVRSED'=1) Q  ;cannot be resubmitted
"RTN","BPSSCRRS",58,0)
 . I $$RXDEL^BPSOS(+RXIEN,RXR) W !!,">> Cannot Reverse or Resubmit ",!,@VALMAR@(+$G(RXI(BP59)),0),!," because it has been deleted in Pharmacy.",! Q
"RTN","BPSSCRRS",59,0)
 . ;can't resubmit a closed claim. The user must reopen first.
"RTN","BPSSCRRS",60,0)
 . I $$CLOSED02^BPSSCR03($P($G(^BPST(BP59,0)),U,4))  D  Q
"RTN","BPSSCRRS",61,0)
 . . W !!,">> Cannot Resubmit ",!,$G(@VALMAR@(+$G(RXI(BP59)),0)),!," because the claim is Closed. Reopen the claim and try again.",! Q
"RTN","BPSSCRRS",62,0)
 . S BPSTATUS=$P($$CLAIMST^BPSSCRU3(BP59),U)
"RTN","BPSSCRRS",63,0)
 . I $P($G(^BPST(BP59,0)),U,14)<2,$$PAYABLE^BPSOSRX5(BPSTATUS),BPINPROG=0,$$PAYBLSEC^BPSUTIL2(BP59) D  S BPQ=$$PAUSE^BPSSCRRV() Q
"RTN","BPSSCRRS",64,0)
 . . W !,"The claim: ",!,$G(@VALMAR@(+$G(RXI(BP59)),0)),!,"cannot be Resubmitted if the secondary claim is payable.",!,"Please reverse the secondary claim first."
"RTN","BPSSCRRS",65,0)
 . S BPBILL=0
"RTN","BPSSCRRS",66,0)
 . ;I $P($G(^BPST(BP59,0)),U,14)=2 S BPBILL=$$PAYBLPRI^BPSUTIL2(BP59) I BPBILL=0 D  S BPQ=$$PAUSE^BPSSCRRV() Q
"RTN","BPSSCRRS",67,0)
 . ;. W !,"The claim: ",!,$G(@VALMAR@(+$G(RXI(BP59)),0)),!,"cannot be Resubmitted if the primary is NOT payable.",!,"Please resubmit the primary claim first."
"RTN","BPSSCRRS",68,0)
 . I (BPSTATUS="IN PROGRESS")!(BPSTATUS="SCHEDULED") S BPINPROG=1
"RTN","BPSSCRRS",69,0)
 . I BPINPROG=1 D  I $$YESNO^BPSSCRRS("Do you want to proceed?(Y/N)")=0 S BPQ="^" Q
"RTN","BPSSCRRS",70,0)
 . . W !,"The claim is in progress. The request will be scheduled and processed after"
"RTN","BPSSCRRS",71,0)
 . . W !,"the previous request(s) are completed. Please be aware that the result of "
"RTN","BPSSCRRS",72,0)
 . . W !,"the resubmit depends on the payer's response to the prior incomplete requests."
"RTN","BPSSCRRS",73,0)
 . ;delete this I BPSTATUS["IN PROGRESS" W !!,">> Cannot Resubmit ",!,@VALMAR@(+$G(RXI(BP59)),0),!," because there is no response from the payer yet.",! Q
"RTN","BPSSCRRS",74,0)
 . I $P($G(^BPST(BP59,9)),U,4)'="T" I BPINPROG=0,BPSTATUS["E REVERSAL REJECTED" W !!,">> Cannot Resubmit ",!,@VALMAR@(+$G(RXI(BP59)),0),!," because the REVERSAL was rejected.",! Q
"RTN","BPSSCRRS",75,0)
 . I $P($G(^BPST(BP59,9)),U,4)'="T" I BPINPROG=0,BPSTATUS["E REVERSAL UNSTRANDED" W !!,">> Cannot Resubmit ",!,@VALMAR@(+$G(RXI(BP59)),0),!," because there is no response for reversal yet.",! Q
"RTN","BPSSCRRS",76,0)
 . S DOSDATE=$$DOSDATE(RXIEN,RXR)
"RTN","BPSSCRRS",77,0)
 . S BILLNUM=$$EN^BPSNCPDP(RXIEN,RXR,DOSDATE,"ERES","","ECME RESUBMIT",,,,,$$COB59^BPSUTIL2(BP59))
"RTN","BPSSCRRS",78,0)
 . ;print return value message
"RTN","BPSSCRRS",79,0)
 . W !!
"RTN","BPSSCRRS",80,0)
 . W:+BILLNUM>0 $S(+BILLNUM=10:"Reversal but no Resubmit:",1:"Not Processed:"),!,"  "
"RTN","BPSSCRRS",81,0)
 . ;Change Return Message for SC/EI
"RTN","BPSSCRRS",82,0)
 . S:$P(BILLNUM,U,2)="NEEDS SC DETERMINATION" $P(BILLNUM,U,2)="NEEDS SC/EI DETERMINATION"
"RTN","BPSSCRRS",83,0)
 . W $P(BILLNUM,U,2)
"RTN","BPSSCRRS",84,0)
 . ;0 Prescription/Fill successfully submitted to ECME for claims processing
"RTN","BPSSCRRS",85,0)
 . ;1 ECME did not submit prescription/fill
"RTN","BPSSCRRS",86,0)
 . ;2 IB says prescription/fill is not ECME billable or the data returned from IB is not valid
"RTN","BPSSCRRS",87,0)
 . ;3 ECME closed the claim but did not submit it to the payer
"RTN","BPSSCRRS",88,0)
 . ;4 Unable to queue the ECME claim
"RTN","BPSSCRRS",89,0)
 . ;5 Invalid input
"RTN","BPSSCRRS",90,0)
 . ;10 Reversal but no resubmit
"RTN","BPSSCRRS",91,0)
 . N BPSCOB S BPSCOB=$$COB59^BPSUTIL2(BP59) ;get COB for the BPS TRANSACTION IEN
"RTN","BPSSCRRS",92,0)
 . I +BILLNUM=0 D 
"RTN","BPSSCRRS",93,0)
 . . D ECMEACT^PSOBPSU1(+RXIEN,+RXR,"Claim resubmitted to 3rd party payer: ECME USER's SCREEN-"_$S(BPSCOB=1:"p",BPSCOB=2:"s",1:"")_$$INSNAME^BPSSCRU6(BP59))
"RTN","BPSSCRRS",94,0)
 . . S UPDATFLG=1,BPCLTOT=BPCLTOT+1
"RTN","BPSSCRRS",95,0)
 . I +BILLNUM=10 D 
"RTN","BPSSCRRS",96,0)
 . . D ECMEACT^PSOBPSU1(+RXIEN,+RXR,"Claim reversed but not resubmitted: ECME USER's SCREEN-"_$S(BPSCOB=1:"p",BPSCOB=2:"s",1:"")_$$INSNAME^BPSSCRU6(BP59))
"RTN","BPSSCRRS",97,0)
 . . S UPDATFLG=1,BPCLTOTR=BPCLTOTR+1
"RTN","BPSSCRRS",98,0)
 W:BPIFANY=0 !,"No eligible items selected."
"RTN","BPSSCRRS",99,0)
 W !,BPCLTOT," claim",$S(BPCLTOT'=1:"s have",1:" has")," been resubmitted.",!
"RTN","BPSSCRRS",100,0)
 W:BPCLTOTR>0 !,BPCLTOTR," claim",$S(BPCLTOTR'=1:"s have",1:" has")," been reversed but not resubmitted.",!
"RTN","BPSSCRRS",101,0)
 D PAUSE^VALM1
"RTN","BPSSCRRS",102,0)
 Q UPDATFLG
"RTN","BPSSCRRS",103,0)
 ;
"RTN","BPSSCRRS",104,0)
 ; Ask
"RTN","BPSSCRRS",105,0)
 ; Input:
"RTN","BPSSCRRS",106,0)
 ;  BPQSTR - question
"RTN","BPSSCRRS",107,0)
 ;  BPDFL - default answer
"RTN","BPSSCRRS",108,0)
 ; Output: 
"RTN","BPSSCRRS",109,0)
 ; 1 YES
"RTN","BPSSCRRS",110,0)
 ; 0 NO
"RTN","BPSSCRRS",111,0)
 ; -1 if cancelled
"RTN","BPSSCRRS",112,0)
YESNO(BPQSTR,BPDFL) ; Default - YES
"RTN","BPSSCRRS",113,0)
 N DIR,Y,DUOUT
"RTN","BPSSCRRS",114,0)
 S DIR(0)="Y"
"RTN","BPSSCRRS",115,0)
 S DIR("A")=BPQSTR
"RTN","BPSSCRRS",116,0)
 S:$L($G(BPDFL)) DIR("B")=BPDFL
"RTN","BPSSCRRS",117,0)
 D ^DIR
"RTN","BPSSCRRS",118,0)
 Q $S($G(DUOUT)!$G(DUOUT)!(Y="^"):-1,1:Y)
"RTN","BPSSCRRS",119,0)
 ;
"RTN","BPSSCRRS",120,0)
 ;Date of service
"RTN","BPSSCRRS",121,0)
 ;RXIEN - IEN in file #52
"RTN","BPSSCRRS",122,0)
 ;RXR - refill number
"RTN","BPSSCRRS",123,0)
 ;returns:
"RTN","BPSSCRRS",124,0)
 ; date of service
"RTN","BPSSCRRS",125,0)
DOSDATE(RXIEN,RXR) ;
"RTN","BPSSCRRS",126,0)
 N BPDOS,BPDT
"RTN","BPSSCRRS",127,0)
 ;try release date
"RTN","BPSSCRRS",128,0)
 S BPDOS=$$RXRLDT^PSOBPSUT(RXIEN,RXR)\1
"RTN","BPSSCRRS",129,0)
 Q:+BPDOS>0 BPDOS
"RTN","BPSSCRRS",130,0)
 ;try fill date
"RTN","BPSSCRRS",131,0)
 S BPDOS=$$RXFLDT^PSOBPSUT(RXIEN,RXR)\1
"RTN","BPSSCRRS",132,0)
 I '$G(DT) Q BPDOS
"RTN","BPSSCRRS",133,0)
 I BPDOS>0,BPDOS'>DT Q BPDOS
"RTN","BPSSCRRS",134,0)
 ;use current date (today)
"RTN","BPSSCRRS",135,0)
 Q DT\1
"RTN","BPSSCRRS",136,0)
 ;
"RTN","BPSSCRRS",137,0)
 ;To display the FILL date on the screen
"RTN","BPSSCRRS",138,0)
 ; use Date Of Service date , later on it might be changed
"RTN","BPSSCRRS",139,0)
 ;input:
"RTN","BPSSCRRS",140,0)
 ;RXIEN - IEN in file #52
"RTN","BPSSCRRS",141,0)
 ;RXR - refill number
"RTN","BPSSCRRS",142,0)
 ;returns:
"RTN","BPSSCRRS",143,0)
 ; date of service
"RTN","BPSSCRRS",144,0)
 ; or empty date if failure
"RTN","BPSSCRRS",145,0)
FILLDATE(RXIEN,RXR) ;
"RTN","BPSSCRRS",146,0)
 N DOSDT
"RTN","BPSSCRRS",147,0)
 S DOSDT=$$DOSDATE(RXIEN,RXR)
"RTN","BPSSCRRS",148,0)
 I $L(DOSDT)'=7 Q "  /  "
"RTN","BPSSCRRS",149,0)
 Q $E(DOSDT,4,5)_"/"_$E(DOSDT,6,7)
"RTN","BPSSCRRS",150,0)
 ;
"RTN","BPSSCRRV")
0^24^B40545723
"RTN","BPSSCRRV",1,0)
BPSSCRRV ;BHAM ISC/SS - ECME SCREEN REVERSE CLAIM ;05-APR-05
"RTN","BPSSCRRV",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,6,7,8**;JUN 2004;Build 29
"RTN","BPSSCRRV",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSSCRRV",4,0)
 Q
"RTN","BPSSCRRV",5,0)
 ;IA 4702
"RTN","BPSSCRRV",6,0)
 ;
"RTN","BPSSCRRV",7,0)
REV ;entry point for "Reverse" menu item
"RTN","BPSSCRRV",8,0)
 N BPRET,BPSARR59
"RTN","BPSSCRRV",9,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSSCRRV",10,0)
 D FULL^VALM1
"RTN","BPSSCRRV",11,0)
 W !,"Enter the line numbers for the Payable claim(s) to be Reversed."
"RTN","BPSSCRRV",12,0)
 S BPRET=$$ASKLINES^BPSSCRU4("Select item(s)","C",.BPSARR59,VALMAR)
"RTN","BPSSCRRV",13,0)
 I BPRET="^" S VALMBCK="R" Q
"RTN","BPSSCRRV",14,0)
 ;reverse selected lines
"RTN","BPSSCRRV",15,0)
 ;update the content of the screen and display it
"RTN","BPSSCRRV",16,0)
 ;only if at least one reversal was submitted successfully
"RTN","BPSSCRRV",17,0)
 I $$RVLINES(.BPSARR59)>0 D REDRAW^BPSSCRUD("Updating screen for reversed claims...")
"RTN","BPSSCRRV",18,0)
 E  S VALMBCK="R"
"RTN","BPSSCRRV",19,0)
 Q
"RTN","BPSSCRRV",20,0)
 ;/**
"RTN","BPSSCRRV",21,0)
 ;Reverse selected lines
"RTN","BPSSCRRV",22,0)
 ;input: 
"RTN","BPSSCRRV",23,0)
 ; BP59ARR(BP59)="line# in LM array "
"RTN","BPSSCRRV",24,0)
 ;output:
"RTN","BPSSCRRV",25,0)
 ; REVTOTAL - total number of claims for whose the reversal was submitted successfully  
"RTN","BPSSCRRV",26,0)
RVLINES(BP59ARR) ;*/
"RTN","BPSSCRRV",27,0)
 N BP59,REVTOTAL,BPRVREAS,BPDFN,BPQ,IBD,BPRXRF
"RTN","BPSSCRRV",28,0)
 N BPINPROG S BPINPROG=0
"RTN","BPSSCRRV",29,0)
 N BPIFANY S BPIFANY=0
"RTN","BPSSCRRV",30,0)
 N BPSTATS
"RTN","BPSSCRRV",31,0)
 S REVTOTAL=0,BPQ=""
"RTN","BPSSCRRV",32,0)
 S BP59="" F  S BP59=$O(BP59ARR(BP59)) Q:BP59=""  D  Q:BPQ="^"
"RTN","BPSSCRRV",33,0)
 . I BPIFANY=0 W @IOF
"RTN","BPSSCRRV",34,0)
 . S BPIFANY=1,BPQ=""
"RTN","BPSSCRRV",35,0)
 . ;
"RTN","BPSSCRRV",36,0)
 . ; can't reverse a closed claim. The user must reopen first.
"RTN","BPSSCRRV",37,0)
 . I $$CLOSED02^BPSSCR03($P($G(^BPST(BP59,0)),U,4))  D  S BPQ=$$PAUSE() Q
"RTN","BPSSCRRV",38,0)
 . . W !,"The claim: ",!,$G(@VALMAR@(+$G(BP59ARR(BP59)),0)),!,"is Closed and cannot be Reversed. Reopen the claim and try again."
"RTN","BPSSCRRV",39,0)
 . S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSSCRRV",40,0)
 . S BPSTATS=$P($$CLAIMST^BPSSCRU3(BP59),U)
"RTN","BPSSCRRV",41,0)
 . I (BPSTATS="IN PROGRESS")!(BPSTATS="SCHEDULED") S BPINPROG=1
"RTN","BPSSCRRV",42,0)
 . I BPINPROG=0,'$$PAYABLE^BPSOSRX5(BPSTATS) D  S BPQ=$$PAUSE() Q
"RTN","BPSSCRRV",43,0)
 . . W !,"The claim: ",!,$G(@VALMAR@(+$G(BP59ARR(BP59)),0)),!,"is NOT Payable and cannot be Reversed."
"RTN","BPSSCRRV",44,0)
 . I BPINPROG=0,$P($G(^BPST(BP59,0)),U,14)<2,$$PAYBLSEC^BPSUTIL2(BP59) D  S BPQ=$$PAUSE() Q
"RTN","BPSSCRRV",45,0)
 . . W !,"The claim: ",!,$G(@VALMAR@(+$G(BP59ARR(BP59)),0)),!,"cannot be Reversed if the secondary claim is payable.",!,"Please reverse the secondary claim first."
"RTN","BPSSCRRV",46,0)
 . I BPINPROG=1 D  S BPQ=$$YESNO^BPSSCRRS("Do you want to proceed?(Y/N)") I BPQ<1 S BPQ="^" Q
"RTN","BPSSCRRV",47,0)
 . . W !,"The claim you've chosen to REVERSE for "_$E($$PATNAME^BPSSCRU2(BPDFN),1,13)
"RTN","BPSSCRRV",48,0)
 . . W !,$G(@VALMAR@(+$G(BP59ARR(BP59)),0))
"RTN","BPSSCRRV",49,0)
 . . W !,"is in progress. The reversal request will be scheduled and processed after"
"RTN","BPSSCRRV",50,0)
 . . W !,"the previous request(s) are completed. Please be aware that the result of "
"RTN","BPSSCRRV",51,0)
 . . W !,"the reversal depends on the payer's response to the prior incomplete requests."
"RTN","BPSSCRRV",52,0)
 . I BPINPROG=0 D
"RTN","BPSSCRRV",53,0)
 . . W !,"You've chosen to REVERSE the following prescription for "_$E($$PATNAME^BPSSCRU2(BPDFN),1,13)
"RTN","BPSSCRRV",54,0)
 . . W !,$G(@VALMAR@(+$G(BP59ARR(BP59)),0))
"RTN","BPSSCRRV",55,0)
 . F  S BPRVREAS=$$COMMENT^BPSSCRCL("Enter REQUIRED REVERSAL REASON",60) Q:BPRVREAS="^"  Q:($L(BPRVREAS)>0)&(BPRVREAS'="^")&('(BPRVREAS?1" "." "))  D
"RTN","BPSSCRRV",56,0)
 . . W !,"Please provide the reason or enter ^ to abandon the reversal."
"RTN","BPSSCRRV",57,0)
 . I BPRVREAS["^" W !,"The claim: ",!,$G(@VALMAR@(+$G(BP59ARR(BP59)),0)),!,"was NOT reversed!" S BPQ=$$PAUSE() Q
"RTN","BPSSCRRV",58,0)
 . S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSSCRRV",59,0)
 . I BPQ=-1 S BPQ="^" Q
"RTN","BPSSCRRV",60,0)
 . I BPQ'=1 Q
"RTN","BPSSCRRV",61,0)
 . I $$REVERSIT(BP59,BPRVREAS)=0 S REVTOTAL=REVTOTAL+1
"RTN","BPSSCRRV",62,0)
 W:BPIFANY=0 !,"No eligible items selected."
"RTN","BPSSCRRV",63,0)
 W !,REVTOTAL," claim reversal",$S(REVTOTAL'=1:"s",1:"")," submitted.",!
"RTN","BPSSCRRV",64,0)
 D PAUSE^VALM1
"RTN","BPSSCRRV",65,0)
 Q REVTOTAL
"RTN","BPSSCRRV",66,0)
 ;
"RTN","BPSSCRRV",67,0)
 ;
"RTN","BPSSCRRV",68,0)
 ;the similar to REVERSE
"RTN","BPSSCRRV",69,0)
 ;with some information displayed for the user 
"RTN","BPSSCRRV",70,0)
 ;Input:
"RTN","BPSSCRRV",71,0)
 ; BP59 ptr in file #9002313.59
"RTN","BPSSCRRV",72,0)
 ; BPRVREAS - reversal reason (free text)
"RTN","BPSSCRRV",73,0)
 ;Output:
"RTN","BPSSCRRV",74,0)
 ;-1 Claim is not Payable
"RTN","BPSSCRRV",75,0)
 ;-2 no reversal, it's irreversible
"RTN","BPSSCRRV",76,0)
 ;-3 paper claim
"RTN","BPSSCRRV",77,0)
 ;>0 - IEN of reversal claim if electronic claim submitted for
"RTN","BPSSCRRV",78,0)
 ;   reversal.
"RTN","BPSSCRRV",79,0)
REVERSIT(BP59,BPRVREAS) ;
"RTN","BPSSCRRV",80,0)
 N BPRET
"RTN","BPSSCRRV",81,0)
 N BPRX
"RTN","BPSSCRRV",82,0)
 N BPRXRF
"RTN","BPSSCRRV",83,0)
 S BPRXRF=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSSCRRV",84,0)
 S BPRET=+$$REVERSE(BP59,BPRVREAS,+BPRXRF,+$P(BPRXRF,U,2))
"RTN","BPSSCRRV",85,0)
 S BPRX=$$RXNUM^BPSSCRU2(+BPRXRF)
"RTN","BPSSCRRV",86,0)
 Q BPRET
"RTN","BPSSCRRV",87,0)
 ;
"RTN","BPSSCRRV",88,0)
 ;
"RTN","BPSSCRRV",89,0)
 ;/**
"RTN","BPSSCRRV",90,0)
 ;Reverse the claim 
"RTN","BPSSCRRV",91,0)
 ;Input:
"RTN","BPSSCRRV",92,0)
 ; BP59 ptr in file #9002313.59
"RTN","BPSSCRRV",93,0)
 ; BPRVREAS - reversal reason (free text)
"RTN","BPSSCRRV",94,0)
 ; BPRX - RX ien (#52)
"RTN","BPSSCRRV",95,0)
 ; BPFIL - refill number
"RTN","BPSSCRRV",96,0)
 ;Output:
"RTN","BPSSCRRV",97,0)
 ; code^message
"RTN","BPSSCRRV",98,0)
 ; where 
"RTN","BPSSCRRV",99,0)
 ; code :
"RTN","BPSSCRRV",100,0)
 ;  from $$EN^BPSNCPDP
"RTN","BPSSCRRV",101,0)
 ;  0 Prescription/Fill successfully submitted to ECME for claims processing
"RTN","BPSSCRRV",102,0)
 ;  1 ECME did not submit prescription/fill
"RTN","BPSSCRRV",103,0)
 ;  2 IB says prescription/fill is not ECME billable or the data returned from IB is not valid
"RTN","BPSSCRRV",104,0)
 ;  3 ECME closed the claim but did not submit it to the payer
"RTN","BPSSCRRV",105,0)
 ;  4 Unable to queue the ECME claim
"RTN","BPSSCRRV",106,0)
 ;  5 Invalid input
"RTN","BPSSCRRV",107,0)
 ;  and additional 
"RTN","BPSSCRRV",108,0)
 ;  12 Claim has been deleted in Pharmacy.
"RTN","BPSSCRRV",109,0)
 ; message - whatever $$EN^BPSNCPDP returns
"RTN","BPSSCRRV",110,0)
 ; for 12 - "Claim has been deleted in Pharmacy."
"RTN","BPSSCRRV",111,0)
 ; 
"RTN","BPSSCRRV",112,0)
REVERSE(BP59,BPRVREAS,BPRX,BPFIL) ;*/
"RTN","BPSSCRRV",113,0)
 N BPDOS,BPNDC,BPRET,BPSARRY,BPSCLOSE,ERROR,BPSTATUS,BPCOBIND,BPQ
"RTN","BPSSCRRV",114,0)
 S BPSCLOSE("CLOSE AFT REV")=0
"RTN","BPSSCRRV",115,0)
 S BPDOS=$$DOSDATE^BPSSCRRS(BPRX,BPFIL)
"RTN","BPSSCRRV",116,0)
 S BPNDC=$$NDC^BPSSCRU2(BPRX,BPFIL)
"RTN","BPSSCRRV",117,0)
 I $$RXDEL^BPSOS(BPRX,BPFIL) D  Q 12_U_"Claim has been deleted in Pharmacy."
"RTN","BPSSCRRV",118,0)
 . W !,"The claim cannot be reversed since it has been deleted in Pharmacy."
"RTN","BPSSCRRV",119,0)
 ;Prompt user to mark claim as non-billable and release patient copay
"RTN","BPSSCRRV",120,0)
 ;if selected claim is for the Primary Insurer - Check COB INDICATOR = 1,
"RTN","BPSSCRRV",121,0)
 ;or if COB INDICATOR is null for backward compatibility.
"RTN","BPSSCRRV",122,0)
 I $P($G(^BPST(BP59,0)),U,14)'>1 D BILLCLM(.BPSCLOSE) I BPQ="-1" Q 1
"RTN","BPSSCRRV",123,0)
 ;Submit claim to ECME
"RTN","BPSSCRRV",124,0)
 S BPRET=$$EN^BPSNCPDP(BPRX,BPFIL,BPDOS,"EREV",BPNDC,BPRVREAS,"","","","",$$COB59^BPSUTIL2(BP59),"","",.BPSCLOSE)
"RTN","BPSSCRRV",125,0)
 ;print return value message
"RTN","BPSSCRRV",126,0)
 W !!
"RTN","BPSSCRRV",127,0)
 W:+BPRET>0 "Not Processed:",!,"  ",$P(BPRET,U,2)
"RTN","BPSSCRRV",128,0)
 I +BPRET=0 S BPSTATUS=$$CLAIMST^BPSSCRU3(BP59) I $P(BPSTATUS,U)="E REVERSAL ACCEPTED" W $P(BPSTATUS,U,3)
"RTN","BPSSCRRV",129,0)
 ; 
"RTN","BPSSCRRV",130,0)
 ;0 Prescription/Fill successfully submitted to ECME for claims processing
"RTN","BPSSCRRV",131,0)
 ;1 ECME did not submit prescription/fill
"RTN","BPSSCRRV",132,0)
 ;2 IB says prescription/fill is not ECME billable or the data returned from IB is not valid
"RTN","BPSSCRRV",133,0)
 ;3 ECME closed the claim but did not submit it to the payer
"RTN","BPSSCRRV",134,0)
 ;4 Unable to queue the ECME claim
"RTN","BPSSCRRV",135,0)
 ;5 Invalid input
"RTN","BPSSCRRV",136,0)
 N BPSCOB S BPSCOB=$$COB59^BPSUTIL2(BP59) ;get COB for the BPS TRANSACTION IEN
"RTN","BPSSCRRV",137,0)
 I +BPRET=0 D ECMEACT^PSOBPSU1(+BPRX,+BPFIL,"Claim reversal sent to 3rd party payer: ECME USER's SCREEN-"_$S(BPSCOB=1:"p",BPSCOB=2:"s",1:"")_$$INSNAME^BPSSCRU6(BP59))
"RTN","BPSSCRRV",138,0)
 Q BPRET
"RTN","BPSSCRRV",139,0)
 ;
"RTN","BPSSCRRV",140,0)
 ;
"RTN","BPSSCRRV",141,0)
 ;Mark claim billable (YES/NO) question. If yes, ask for CLAIMS TRACKING
"RTN","BPSSCRRV",142,0)
 ;NON-BILLABLE REASONS NAME
"RTN","BPSSCRRV",143,0)
 ;Output: 
"RTN","BPSSCRRV",144,0)
 ;BPSCLOSE("CLOSE AFT REV")=1 or 0 (zero) (1 = YES, 0 = NO)
"RTN","BPSSCRRV",145,0)
 ;BPSCLOSE("CLOSE AFT REV REASON")=ptr to #356.8 ^ CLOSE REASON NAME ^ ECME FLAG ^ ECME PAPER FLAG
"RTN","BPSSCRRV",146,0)
 ;BPSCLOSE("CLOSE AFT REV COMMENT")=COMMENT TEXT
"RTN","BPSSCRRV",147,0)
BILLCLM(BPSCLOSE) ;
"RTN","BPSSCRRV",148,0)
 N BPREAZ,BPCMT,BPCLAR
"RTN","BPSSCRRV",149,0)
 S BPSCLOSE("CLOSE AFT REV")=0,BPSCLOSE("CLOSE AFT REV REASON")="",BPSCLOSE("CLOSE AFT REV COMMENT")=""
"RTN","BPSSCRRV",150,0)
 W !,"Do you want to mark the claim as non-billable in Claims Tracking and release the Patient Copay (if any)"
"RTN","BPSSCRRV",151,0)
 S BPQ=$$YESNO^BPSSCRRS("(Yes/No)") I BPQ<1 Q
"RTN","BPSSCRRV",152,0)
 S BPSCLOSE("CLOSE AFT REV")=BPQ
"RTN","BPSSCRRV",153,0)
 S BPREAZ=$$REASON^BPSSCRCL() I BPREAZ="^" S BPQ="-1" Q
"RTN","BPSSCRRV",154,0)
 S BPSCLOSE("CLOSE AFT REV REASON")=+$P(BPREAZ,U)
"RTN","BPSSCRRV",155,0)
 S BPCMT=$$COMMENT^BPSSCRCL("Comment ",40) I BPCMT="^" S BPQ="-1" Q
"RTN","BPSSCRRV",156,0)
 S BPSCLOSE("CLOSE AFT REV COMMENT")=BPCMT
"RTN","BPSSCRRV",157,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSSCRRV",158,0)
 I BPQ<1 S BPSCLOSE("CLOSE AFT REV")=0,BPSCLOSE("CLOSE AFT REV REASON")="",BPSCLOSE("CLOSE AFT REV COMMENT")="",BPQ="-1" Q
"RTN","BPSSCRRV",159,0)
 W !,"If the reversal is approved by the third-party payer, the claim will be marked as non-billable.",!
"RTN","BPSSCRRV",160,0)
 Q
"RTN","BPSSCRRV",161,0)
 ;
"RTN","BPSSCRRV",162,0)
PAUSE() ;
"RTN","BPSSCRRV",163,0)
 N X
"RTN","BPSSCRRV",164,0)
 W ! S DIR(0)="E" D ^DIR K DIR W !
"RTN","BPSSCRRV",165,0)
 Q X
"RTN","BPSSCRRV",166,0)
 ;
"RTN","BPSSCRU3")
0^32^B30637579
"RTN","BPSSCRU3",1,0)
BPSSCRU3 ;BHAM ISC/SS - ECME SCREEN UTILITIES ;05-APR-05
"RTN","BPSSCRU3",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8**;JUN 2004;Build 29
"RTN","BPSSCRU3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSSCRU3",4,0)
 ;USER SCREEN
"RTN","BPSSCRU3",5,0)
 Q
"RTN","BPSSCRU3",6,0)
 ;get comment from BPS TRANSACTION file
"RTN","BPSSCRU3",7,0)
 ;BP59 - ien in that file
"RTN","BPSSCRU3",8,0)
COMMENT(BP59) ;
"RTN","BPSSCRU3",9,0)
 N BPCMNT,BPX
"RTN","BPSSCRU3",10,0)
 S BPCMNT=$O(^BPST(BP59,11,999999),-1)
"RTN","BPSSCRU3",11,0)
 I BPCMNT="" Q ""
"RTN","BPSSCRU3",12,0)
 S BPX=$G(^BPST(BP59,11,BPCMNT,0))
"RTN","BPSSCRU3",13,0)
 Q $$DATTIM($P(BPX,U,1)\1)_" - "_$P(BPX,U,3)_U_$$USERNAM^BPSCMT01($P(BPX,U,2))
"RTN","BPSSCRU3",14,0)
 ;
"RTN","BPSSCRU3",15,0)
DATTIM(X) ;Convert FM date to displayable (mm/dd/yy HH:MM) format.
"RTN","BPSSCRU3",16,0)
 I +X=0 W ""
"RTN","BPSSCRU3",17,0)
 N DATE,YR,BPT,BPM,BPH,BPAP
"RTN","BPSSCRU3",18,0)
 I $G(X) S YR=$E(X,2,3)
"RTN","BPSSCRU3",19,0)
 I $G(X) S DATE=$S(X:$E(X,4,5)_"/"_$E(X,6,7)_"/"_YR,1:"")
"RTN","BPSSCRU3",20,0)
 S BPT=$P(X,".",2) S:$L(BPT)<4 BPT=BPT_$E("0000",1,4-$L(BPT))
"RTN","BPSSCRU3",21,0)
 S BPH=$E(BPT,1,2),BPM=$E(BPT,3,4)
"RTN","BPSSCRU3",22,0)
 S BPAP="a" I BPH>12 S BPH=BPH-12,BPAP="p" S:$L(BPH)<2 BPH="0"_BPH
"RTN","BPSSCRU3",23,0)
 I BPT S:'BPH BPH=12 S DATE=DATE_" "_BPH_":"_BPM_BPAP
"RTN","BPSSCRU3",24,0)
 Q $G(DATE)
"RTN","BPSSCRU3",25,0)
 ;/**
"RTN","BPSSCRU3",26,0)
 ;a wrapper for $$STATUS^BPSOSRX to get the status by BPS TRANSACTION pointer
"RTN","BPSSCRU3",27,0)
 ;input BP59 - ptr to 9002313.59
"RTN","BPSSCRU3",28,0)
 ;output - pieces 1,2 and 3 of the $$STATUS^BPSOSRX output
"RTN","BPSSCRU3",29,0)
 ; example: "E REVERSAL ACCEPTED^3071206.152829^Reversal Accepted"
"RTN","BPSSCRU3",30,0)
CLAIMST(BP59) ;*/
"RTN","BPSSCRU3",31,0)
 N BPX,BPSTATUS,BPREF,BPSCHED
"RTN","BPSSCRU3",32,0)
 N BPCOB S BPCOB=$$COB59^BPSUTIL2(BP59)
"RTN","BPSSCRU3",33,0)
 S BPSCHED=0
"RTN","BPSSCRU3",34,0)
 S BPX=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSSCRU3",35,0)
 S BPREF=$P(BPX,U,2)
"RTN","BPSSCRU3",36,0)
 S BPSTATUS=$$STATUS^BPSOSRX(+BPX,BPREF,,,BPCOB)
"RTN","BPSSCRU3",37,0)
 ;if the request completed (99%) and there is another active (scheduled, activated, 
"RTN","BPSSCRU3",38,0)
 ;in process,completed but not inactivated yet) request then return IN PROGRESS
"RTN","BPSSCRU3",39,0)
 I $P(BPSTATUS,U,4)=99,$$ACTREQS^BPSOSRX6(+BPX,BPREF,BPCOB) S BPSCHED=1
"RTN","BPSSCRU3",40,0)
 I BPSCHED I ($P(BPSTATUS,U)="E PAYABLE")!($P(BPSTATUS,U)="E REVERSAL ACCEPTED") Q "IN PROGRESS"_U_$P(BPSTATUS,U,2)
"RTN","BPSSCRU3",41,0)
 Q $P(BPSTATUS,U,1,3)
"RTN","BPSSCRU3",42,0)
 ;
"RTN","BPSSCRU3",43,0)
 ;/**
"RTN","BPSSCRU3",44,0)
 ;pointers for RESPONSE file (#9002313.03) by pointer in TRANSACTION file #9002313.59
"RTN","BPSSCRU3",45,0)
 ;B59 - ptr to #9002313.59
"RTN","BPSSCRU3",46,0)
 ;BPRESP - ptr to #9002313.03
"RTN","BPSSCRU3",47,0)
 ;BPPOS - position inside #9002313.03 (i.e. the number 
"RTN","BPSSCRU3",48,0)
 ;of the claim in the transmission - currently we always have only 1
"RTN","BPSSCRU3",49,0)
GRESPPOS(BP59,BPRESP,BPPOS) ;*/
"RTN","BPSSCRU3",50,0)
 I $G(^BPST(BP59,4)) D  ; reversal kind of message
"RTN","BPSSCRU3",51,0)
 . S BPRESP=+$P(^BPST(BP59,4),U,2)
"RTN","BPSSCRU3",52,0)
 . S BPPOS=1
"RTN","BPSSCRU3",53,0)
 E  D
"RTN","BPSSCRU3",54,0)
 . S BPRESP=+$P($G(^BPST(BP59,0)),U,5)
"RTN","BPSSCRU3",55,0)
 . S BPPOS=+$P($G(^BPST(BP59,0)),U,9)
"RTN","BPSSCRU3",56,0)
 Q:+BPRESP=0 0
"RTN","BPSSCRU3",57,0)
 Q:+BPPOS=0 0
"RTN","BPSSCRU3",58,0)
 Q 1
"RTN","BPSSCRU3",59,0)
 ;
"RTN","BPSSCRU3",60,0)
 ;/**
"RTN","BPSSCRU3",61,0)
 ;reject message from RESPONSE file
"RTN","BPSSCRU3",62,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSSCRU3",63,0)
 ;BPTOP - top level index (for exmpl "504" for ^BPSR(D0,504)= (#504) Message [1F]
"RTN","BPSSCRU3",64,0)
 ;BPDEEP - lower level (for exmpl BPTOP=1000 and BPDEEP=525 for  
"RTN","BPSSCRU3",65,0)
 ;  ^BPSR(D0,1000,D1,525)= (#525) DUR Response Data [1F]
"RTN","BPSSCRU3",66,0)
 ;
"RTN","BPSSCRU3",67,0)
GETMESS(BPTOP,BPDEEP,BP59) ;
"RTN","BPSSCRU3",68,0)
 N BP59DAT,BPRESP,BPPOS
"RTN","BPSSCRU3",69,0)
 N BP1
"RTN","BPSSCRU3",70,0)
 ;S (BPRESP,BPPOS)=0
"RTN","BPSSCRU3",71,0)
 ;get response and position in the BPS RESPONSE file
"RTN","BPSSCRU3",72,0)
 I $$GRESPPOS(BP59,.BPRESP,.BPPOS)=0 Q ""
"RTN","BPSSCRU3",73,0)
 ; -------- transmission specific message ----------
"RTN","BPSSCRU3",74,0)
 I BPTOP=504 Q $P($G(^BPSR(BPRESP,504)),U)
"RTN","BPSSCRU3",75,0)
 ;
"RTN","BPSSCRU3",76,0)
 ; -------claim specific message-----------
"RTN","BPSSCRU3",77,0)
 ;assuming there is only one claim/response per transmission
"RTN","BPSSCRU3",78,0)
 S BP1=$O(^BPSR(BPRESP,BPTOP,0))
"RTN","BPSSCRU3",79,0)
 I BP1=0 Q ""
"RTN","BPSSCRU3",80,0)
 ;---525: DUR
"RTN","BPSSCRU3",81,0)
 ;---526: Additional Message Information
"RTN","BPSSCRU3",82,0)
 ;---504: Message for the claim
"RTN","BPSSCRU3",83,0)
 I (BPDEEP=525)!(BPDEEP=526)!(BPDEEP=504) Q $P($G(^BPSR(BPRESP,1000,BPPOS,BPDEEP)),U)
"RTN","BPSSCRU3",84,0)
 Q ""
"RTN","BPSSCRU3",85,0)
 ;
"RTN","BPSSCRU3",86,0)
 ;reject message from RESPONSE file
"RTN","BPSSCRU3",87,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSSCRU3",88,0)
 ;BPARR1 - array to return messages (by ref)
"RTN","BPSSCRU3",89,0)
 ;BPN1 - index for the array (by ref - will 
"RTN","BPSSCRU3",90,0)
 ;  be incremented if more than one node added)
"RTN","BPSSCRU3",91,0)
 ;BPMLEN - max length for each string
"RTN","BPSSCRU3",92,0)
 ;PBPREF - for prefix string
"RTN","BPSSCRU3",93,0)
 ;. D GETMESS^BPSSCRU3(1000,504,BP59,.BPARR,.BPN,50)
"RTN","BPSSCRU3",94,0)
 ;compare GETRJCOD from BPSSCRu2
"RTN","BPSSCRU3",95,0)
GETRJCOD(BP59,BPARR1,BPN1,BPMLEN,PBPREF) ;
"RTN","BPSSCRU3",96,0)
 N BP59DAT S BP59DAT=$G(^BPST(BP59,0))
"RTN","BPSSCRU3",97,0)
 N BPRESP,BPPOS
"RTN","BPSSCRU3",98,0)
 N BPRJCOD
"RTN","BPSSCRU3",99,0)
 N BPRJTXT
"RTN","BPSSCRU3",100,0)
 N BPSTR
"RTN","BPSSCRU3",101,0)
 N BPRJ
"RTN","BPSSCRU3",102,0)
 ;pointers for RESPONSE file (#9002313.03) by pointer in TRANSACTION file #9002313.59
"RTN","BPSSCRU3",103,0)
 ;get response and position 
"RTN","BPSSCRU3",104,0)
 I $$GRESPPOS(BP59,.BPRESP,.BPPOS)=0 Q
"RTN","BPSSCRU3",105,0)
 S BPRJ=0
"RTN","BPSSCRU3",106,0)
 S BPSTR=""
"RTN","BPSSCRU3",107,0)
 F  S BPRJ=$O(^BPSR(BPRESP,1000,BPPOS,511,BPRJ)) Q:+BPRJ=0  D
"RTN","BPSSCRU3",108,0)
 . S BPRJCOD=$P($G(^BPSR(BPRESP,1000,BPPOS,511,BPRJ,0)),U)
"RTN","BPSSCRU3",109,0)
 . Q:$L(BPRJCOD)=0
"RTN","BPSSCRU3",110,0)
 . S BPRJTXT=$$GETRJNAM(BPRJCOD)
"RTN","BPSSCRU3",111,0)
 . S BPN1=BPN1+1,BPARR1(BPN1)=PBPREF_BPRJTXT
"RTN","BPSSCRU3",112,0)
 Q BPN1
"RTN","BPSSCRU3",113,0)
 ;/**
"RTN","BPSSCRU3",114,0)
 ;Input:
"RTN","BPSSCRU3",115,0)
 ; BP59 - pointer to file #9002313.59
"RTN","BPSSCRU3",116,0)
 ;Output:
"RTN","BPSSCRU3",117,0)
 ; BPRCODES - array for reject codes by reference
"RTN","BPSSCRU3",118,0)
REJCODES(BP59,BPRCODES) ;get reject codes
"RTN","BPSSCRU3",119,0)
 N BPRESP,BPPOS,BPA,BPR
"RTN","BPSSCRU3",120,0)
 ;pointers for RESPONSE file (#9002313.03) by pointer in TRANSACTION file #9002313.59
"RTN","BPSSCRU3",121,0)
 ;get response and position
"RTN","BPSSCRU3",122,0)
 I $$GRESPPOS(BP59,.BPRESP,.BPPOS)=0 Q
"RTN","BPSSCRU3",123,0)
 ;
"RTN","BPSSCRU3",124,0)
 S BPA=0
"RTN","BPSSCRU3",125,0)
 F  S BPA=$O(^BPSR(BPRESP,1000,BPPOS,511,BPA)) Q:'BPA  D
"RTN","BPSSCRU3",126,0)
 . S BPR=$P(^BPSR(BPRESP,1000,BPPOS,511,BPA,0),U)
"RTN","BPSSCRU3",127,0)
 . I BPR'="" S BPRCODES(BPR)=""
"RTN","BPSSCRU3",128,0)
 Q
"RTN","BPSSCRU3",129,0)
 ;/**
"RTN","BPSSCRU3",130,0)
 ;BPRJCODE - code
"RTN","BPSSCRU3",131,0)
GETRJNAM(BPRJCODE) ;*/
"RTN","BPSSCRU3",132,0)
 N BPRJIEN
"RTN","BPSSCRU3",133,0)
 S BPRJIEN=$O(^BPSF(9002313.93,"B",BPRJCODE,0))
"RTN","BPSSCRU3",134,0)
 Q:+BPRJIEN=0 ""
"RTN","BPSSCRU3",135,0)
 Q BPRJCODE_":"_$P($G(^BPSF(9002313.93,BPRJIEN,0)),U,2)
"RTN","BPSSCRU3",136,0)
 ;/**
"RTN","BPSSCRU3",137,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSSCRU3",138,0)
 ;was the claim ever autoreversed ?
"RTN","BPSSCRU3",139,0)
AUTOREV(BP59) ;*/
"RTN","BPSSCRU3",140,0)
 N BP02
"RTN","BPSSCRU3",141,0)
 S BP02=+$P($G(^BPST(BP59,0)),U,4)
"RTN","BPSSCRU3",142,0)
 Q +$P($G(^BPSC(BP02,0)),U,7)
"RTN","BPSSCRU3",143,0)
 ;
"RTN","BPSSCRU3",144,0)
 ;/**
"RTN","BPSSCRU3",145,0)
 ;BP59 - ptr to 9002313.59
"RTN","BPSSCRU3",146,0)
 ;returns :
"RTN","BPSSCRU3",147,0)
 ;0 Waiting to start
"RTN","BPSSCRU3",148,0)
 ;10 Gathering claim info
"RTN","BPSSCRU3",149,0)
 ;19 Special Grouping
"RTN","BPSSCRU3",150,0)
 ;30 Waiting for packet build
"RTN","BPSSCRU3",151,0)
 ;31 Wait for retry (insurer asleep)
"RTN","BPSSCRU3",152,0)
 ;40 Packet being built
"RTN","BPSSCRU3",153,0)
 ;50 Waiting for transmit
"RTN","BPSSCRU3",154,0)
 ;51 Wait for retry (comms error)
"RTN","BPSSCRU3",155,0)
 ;60 Transmitting
"RTN","BPSSCRU3",156,0)
 ;70 Receiving Response
"RTN","BPSSCRU3",157,0)
 ;80 Waiting to process response
"RTN","BPSSCRU3",158,0)
 ;90 Processing response
"RTN","BPSSCRU3",159,0)
 ;99 Done
"RTN","BPSSCRU3",160,0)
 ;
"RTN","BPSSCRU3",161,0)
PRCNTG(BP59) ;*/
"RTN","BPSSCRU3",162,0)
 Q +$P($G(^BPST(BP59,0)),U,2)
"RTN","BPSSCRU3",163,0)
 ;
"RTN","BPSSCRU3",164,0)
 ;
"RTN","BPSSCRU3",165,0)
LINE(BPN,BPCH) ;
"RTN","BPSSCRU3",166,0)
 N BP1
"RTN","BPSSCRU3",167,0)
 S $P(BP1,BPCH,BPN+1)=""
"RTN","BPSSCRU3",168,0)
 Q BP1
"RTN","BPSSCRU3",169,0)
 ;
"RTN","BPSSCRU3",170,0)
DTTIME(X) ;Convert FM date to displayable (mm/dd/yy HH:MM) format.
"RTN","BPSSCRU3",171,0)
 I +X=0 W ""
"RTN","BPSSCRU3",172,0)
 N DATE,YR,BPT,BPM,BPH,BPAP,BPS
"RTN","BPSSCRU3",173,0)
 I $G(X) S YR=$E(X,1,3)+1700
"RTN","BPSSCRU3",174,0)
 I $G(X) S DATE=$S(X:$E(X,4,5)_"/"_$E(X,6,7)_"/"_YR,1:"")
"RTN","BPSSCRU3",175,0)
 S BPT=$P(X,".",2)
"RTN","BPSSCRU3",176,0)
 I BPT S:$L(BPT)<6 BPT=BPT_$E("000000",1,6-$L(BPT))
"RTN","BPSSCRU3",177,0)
 S BPH=$E(BPT,1,2),BPM=$E(BPT,3,4),BPS=$E(BPT,5,6)
"RTN","BPSSCRU3",178,0)
 I BPT S DATE=DATE_"@"_BPH_":"_BPM_":"_BPS
"RTN","BPSSCRU3",179,0)
 Q $G(DATE)
"RTN","BPSSCRU3",180,0)
 ;
"RTN","BPSSCRU3",181,0)
 ;call IB API to get insurance data, then select proper insurance by its name
"RTN","BPSSCRU3",182,0)
 ;get its phone number
"RTN","BPSSCRU3",183,0)
 ;input: 
"RTN","BPSSCRU3",184,0)
 ; DFN - patient IEN in #2
"RTN","BPSSCRU3",185,0)
 ; BPDOS - date of service
"RTN","BPSSCRU3",186,0)
 ; BPINSNM - insurance name
"RTN","BPSSCRU3",187,0)
 ;output: insurance ien^insurance name^phone
"RTN","BPSSCRU3",188,0)
GETPHONE(BPDFN,BPDOS,BPINSNM) ;
"RTN","BPSSCRU3",189,0)
 N BPX,BPZZ,BP1,BPPHONE
"RTN","BPSSCRU3",190,0)
 S BPPHONE=""
"RTN","BPSSCRU3",191,0)
 I $$INSUR^IBBAPI(BPDFN,BPDOS,,.BPZZ,"1,6")'=1 Q ""
"RTN","BPSSCRU3",192,0)
 S BP1="" F  S BP1=$O(BPZZ("IBBAPI","INSUR",BP1)) Q:+BP1=0  D
"RTN","BPSSCRU3",193,0)
 . I BPINSNM=$P($G(BPZZ("IBBAPI","INSUR",BP1,1)),U,2) S BPPHONE=$G(BPZZ("IBBAPI","INSUR",BP1,6)) Q
"RTN","BPSSCRU3",194,0)
 Q BPPHONE
"RTN","BPSSCRU3",195,0)
 ;
"RTN","BPSSCRU3",196,0)
 ;try to get insurance name and phone from #9002313.59, #9002313.57 and from INSUR^IBBAPI 
"RTN","BPSSCRU3",197,0)
 ;input: BP59 - ien in #9002313.59
"RTN","BPSSCRU3",198,0)
 ;return insurance_name^phone#
"RTN","BPSSCRU3",199,0)
NAMEPHON(BP59) ;
"RTN","BPSSCRU3",200,0)
 N BPHONE,BPINSNM,BPINSID,BP57,BPINSN
"RTN","BPSSCRU3",201,0)
 S BPHONE=$P($G(^BPST(BP59,10,+$G(^BPST(BP59,9)),3)),U,2)
"RTN","BPSSCRU3",202,0)
 S BPINSNM=$P($G(^BPST(BP59,10,+$G(^BPST(BP59,9)),0)),U,7)
"RTN","BPSSCRU3",203,0)
 S BP57=0
"RTN","BPSSCRU3",204,0)
 F  Q:(BPHONE'="")&(BPINSNM'="")  S BP57=$O(^BPSTL("B",BP59,BP57)) Q:+BP57=0  D
"RTN","BPSSCRU3",205,0)
 . S BPINSN=+$G(^BPSTL(BP57,9))
"RTN","BPSSCRU3",206,0)
 . S:BPHONE="" BPHONE=$P($G(^BPSTL(BP57,10,BPINSN,3)),U,2)
"RTN","BPSSCRU3",207,0)
 . S:BPINSNM="" BPINSNM=$P($G(^BPSTL(BP57,10,BPINSN,0)),U,7)
"RTN","BPSSCRU3",208,0)
 ;
"RTN","BPSSCRU3",209,0)
 I (BPINSNM'="")&(BPHONE="") D
"RTN","BPSSCRU3",210,0)
 . S BPDOS=+$P($G(^BPST(BP59,12)),U,2)\1
"RTN","BPSSCRU3",211,0)
 . I BPDOS=0 S BPDOS=+$P($G(^BPST(BP59,0)),U,8)\1
"RTN","BPSSCRU3",212,0)
 . S BPDFN=+$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSSCRU3",213,0)
 . S BPHONE=$$GETPHONE(BPDFN,BPDOS,BPINSNM)
"RTN","BPSSCRU3",214,0)
 Q BPINSNM_U_BPHONE
"RTN","BPSSCRU3",215,0)
 ;
"RTN","BPSSCRU5")
0^60^B62214356
"RTN","BPSSCRU5",1,0)
BPSSCRU5 ;BHAM ISC/SS - ECME SCREEN UTILITIES ;05-APR-05
"RTN","BPSSCRU5",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,5,7,8**;JUN 2004;Build 29
"RTN","BPSSCRU5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSSCRU5",4,0)
 ;USER SCREEN
"RTN","BPSSCRU5",5,0)
 Q
"RTN","BPSSCRU5",6,0)
 ;
"RTN","BPSSCRU5",7,0)
DATETIME(Y) ;EP - convert fileman date.time to printable
"RTN","BPSSCRU5",8,0)
 X ^DD("DD")
"RTN","BPSSCRU5",9,0)
 Q Y
"RTN","BPSSCRU5",10,0)
 ;
"RTN","BPSSCRU5",11,0)
 ;create a history of claims and responses in #9002313.57 file 
"RTN","BPSSCRU5",12,0)
 ;record for the specified transaction in #9002313.59 file
"RTN","BPSSCRU5",13,0)
 ;input:
"RTN","BPSSCRU5",14,0)
 ; BP59 - ptr to #9002313.59
"RTN","BPSSCRU5",15,0)
 ; BPHIST - array to return results
"RTN","BPSSCRU5",16,0)
 ;output:
"RTN","BPSSCRU5",17,0)
 ; Array in BPHIST with the format:
"RTN","BPSSCRU5",18,0)
 ;  BPHIST(type,timedate,PointerToResponseClaimFile)=PointerTo#9002313.57^request type
"RTN","BPSSCRU5",19,0)
 ;  where:
"RTN","BPSSCRU5",20,0)
 ;  request type - "C" - billing request, "R" - reversal request
"RTN","BPSSCRU5",21,0)
 ;  type "C" - BPS CLAIM file, "R" - BPS RESPONSE file
"RTN","BPSSCRU5",22,0)
 ;  PointerToResponseClaimFile - pointer to 9002313.03 or 9002313.02
"RTN","BPSSCRU5",23,0)
MKHIST(BP59,BPHIST) ;
"RTN","BPSSCRU5",24,0)
 N BP57,BPLSTCLM,BPLSTRSP,BPDAT57,BP1,BPSSTDT
"RTN","BPSSCRU5",25,0)
 S BP57=0
"RTN","BPSSCRU5",26,0)
 N BPSARR02
"RTN","BPSSCRU5",27,0)
 N BPSARR03
"RTN","BPSSCRU5",28,0)
 ; -- process BPS LOG OF TRANSACTIONS file
"RTN","BPSSCRU5",29,0)
 F  S BP57=$O(^BPSTL("B",BP59,BP57)) Q:+BP57=0  D
"RTN","BPSSCRU5",30,0)
 . ;claim transmissions
"RTN","BPSSCRU5",31,0)
 . S BPDAT57(0)=$G(^BPSTL(BP57,0))
"RTN","BPSSCRU5",32,0)
 . S BPSSTDT=+$P(BPDAT57(0),U,11) ;start time
"RTN","BPSSCRU5",33,0)
 . S BPLSTCLM=+$P(BPDAT57(0),U,4) ;claim
"RTN","BPSSCRU5",34,0)
 . I BPLSTCLM>0 D
"RTN","BPSSCRU5",35,0)
 . . S BP1=+$P($G(^BPSC(BPLSTCLM,0)),U,5) ;transmitted on
"RTN","BPSSCRU5",36,0)
 . . I BP1=0 S BP1=+$P($G(^BPSC(BPLSTCLM,0)),U,6) ;rec created on
"RTN","BPSSCRU5",37,0)
 . . ;old BPS CLAIMS recs don't have dates, so use START TIME from .57 file but 
"RTN","BPSSCRU5",38,0)
 . . ;only at the very first time (using $D for this)
"RTN","BPSSCRU5",39,0)
 . . I BP1=0 I '$D(BPSARR02(BPLSTCLM)) S (BPSARR02(BPLSTCLM))=BPSSTDT,BP1=BPSSTDT
"RTN","BPSSCRU5",40,0)
 . . I BP1 I '$D(BPHIST("C",BP1,BPLSTCLM)) S BPHIST("C",BP1,BPLSTCLM)=BP57_U_"C"
"RTN","BPSSCRU5",41,0)
 . S BPLSTRSP=+$P(BPDAT57(0),U,5) ;response
"RTN","BPSSCRU5",42,0)
 . I BPLSTRSP>0 D
"RTN","BPSSCRU5",43,0)
 . . S BP1=+$P($G(^BPSR(BPLSTRSP,0)),U,2) ;received on
"RTN","BPSSCRU5",44,0)
 . . I BP1=0 I '$D(BPSARR03(BPLSTRSP)) S (BPSARR02(BPLSTCLM))=BPSSTDT,BP1=BPSSTDT
"RTN","BPSSCRU5",45,0)
 . . I BP1 I '$D(BPHIST("R",BP1,BPLSTRSP)) S BPHIST("R",BP1,BPLSTRSP)=BP57_U_"C"
"RTN","BPSSCRU5",46,0)
 . ;reversal transmissions
"RTN","BPSSCRU5",47,0)
 . S BPDAT57(4)=$G(^BPSTL(BP57,4))
"RTN","BPSSCRU5",48,0)
 . S BPLSTCLM=+$P(BPDAT57(4),U,1) ;reversal
"RTN","BPSSCRU5",49,0)
 . I BPLSTCLM>0 D
"RTN","BPSSCRU5",50,0)
 . . S BP1=+$P($G(^BPSC(BPLSTCLM,0)),U,5) ;transmitted on
"RTN","BPSSCRU5",51,0)
 . . I BP1=0 S BP1=+$P($G(^BPSC(BPLSTCLM,0)),U,6) ;rec created on
"RTN","BPSSCRU5",52,0)
 . . I BP1=0 I '$D(BPSARR02(BPLSTCLM)) S (BPSARR02(BPLSTCLM))=BPSSTDT,BP1=BPSSTDT
"RTN","BPSSCRU5",53,0)
 . . I BP1 I '$D(BPHIST("C",BP1,BPLSTCLM)) S BPHIST("C",BP1,BPLSTCLM)=BP57_U_"R"
"RTN","BPSSCRU5",54,0)
 . S BPLSTRSP=+$P(BPDAT57(4),U,2) ;reversal response
"RTN","BPSSCRU5",55,0)
 . I BPLSTRSP>0 D
"RTN","BPSSCRU5",56,0)
 . . S BP1=+$P($G(^BPSR(BPLSTRSP,0)),U,2) ;received on
"RTN","BPSSCRU5",57,0)
 . . I BP1=0 I '$D(BPSARR03(BPLSTRSP)) S (BPSARR02(BPLSTCLM))=BPSSTDT,BP1=BPSSTDT
"RTN","BPSSCRU5",58,0)
 . . I BP1 I '$D(BPHIST("R",BP1,BPLSTRSP)) S BPHIST("R",BP1,BPLSTRSP)=BP57_U_"R"
"RTN","BPSSCRU5",59,0)
 ;--------
"RTN","BPSSCRU5",60,0)
 ;sorting: pairs (send/respond) in reversed chronological order
"RTN","BPSSCRU5",61,0)
 N BPCLDT1,BPCLIEN,BPRSDT1,BPRSIEN,BPCLDT2
"RTN","BPSSCRU5",62,0)
 S BPCLDT1=0
"RTN","BPSSCRU5",63,0)
 F  S BPCLDT1=$O(BPHIST("C",BPCLDT1)) Q:BPCLDT1=""  D
"RTN","BPSSCRU5",64,0)
 . S BPCLIEN=$O(BPHIST("C",BPCLDT1,0)) Q:BPCLIEN=""  D
"RTN","BPSSCRU5",65,0)
 . . S BPCLDT2=+$O(BPHIST("C",BPCLDT1))
"RTN","BPSSCRU5",66,0)
 . . I BPCLDT2=0 S BPCLDT2=9999999
"RTN","BPSSCRU5",67,0)
 . . S BPRSDT1=BPCLDT1
"RTN","BPSSCRU5",68,0)
 . . F  S BPRSDT1=$O(BPHIST("R",BPRSDT1)) Q:BPRSDT1=""!(BPRSDT1>BPCLDT2)  D
"RTN","BPSSCRU5",69,0)
 . . . S BPRSIEN=$O(BPHIST("R",BPRSDT1,0)) Q:BPRSIEN=""  D
"RTN","BPSSCRU5",70,0)
 . . . . S BPHIST("C",BPCLDT1,BPCLIEN,"R",BPRSIEN)=BPHIST("R",BPRSDT1,BPRSIEN)
"RTN","BPSSCRU5",71,0)
 ;
"RTN","BPSSCRU5",72,0)
 Q
"RTN","BPSSCRU5",73,0)
 ;returns text for the transaction code in file #9002313.02 -- BPS CLAIMS FILE
"RTN","BPSSCRU5",74,0)
TRTYPE(BPTRCD) ;
"RTN","BPSSCRU5",75,0)
 I BPTRCD="E1" Q "Eligibility Verification"
"RTN","BPSSCRU5",76,0)
 I BPTRCD="B1" Q "REQUEST"  ;"Billing"
"RTN","BPSSCRU5",77,0)
 I BPTRCD="B2" Q "REVERSAL"  ; "Reversal"
"RTN","BPSSCRU5",78,0)
 I BPTRCD="B3" Q "Rebill"
"RTN","BPSSCRU5",79,0)
 I BPTRCD="P1" Q "P.A. Request & Billing"
"RTN","BPSSCRU5",80,0)
 I BPTRCD="P2" Q "P.A. Reversal"
"RTN","BPSSCRU5",81,0)
 I BPTRCD="P3" Q "P.A. Inquiry"
"RTN","BPSSCRU5",82,0)
 I BPTRCD="P4" Q "P.A. Request Only"
"RTN","BPSSCRU5",83,0)
 I BPTRCD="N1" Q "Information Reporting"
"RTN","BPSSCRU5",84,0)
 I BPTRCD="N2" Q "Information Reporting Reversal"
"RTN","BPSSCRU5",85,0)
 I BPTRCD="N3" Q "Information Reporting Rebill"
"RTN","BPSSCRU5",86,0)
 I BPTRCD="C1" Q "Controlled Substance Reporting"
"RTN","BPSSCRU5",87,0)
 I BPTRCD="C2" Q "Controlled Substance Reporting Reversal"
"RTN","BPSSCRU5",88,0)
 I BPTRCD="C3" Q "Controlled Substance Reporting Rebill"
"RTN","BPSSCRU5",89,0)
 Q ""
"RTN","BPSSCRU5",90,0)
 ;
"RTN","BPSSCRU5",91,0)
 ;get NDC for LOG
"RTN","BPSSCRU5",92,0)
 ;BPIEN02 - IEN in #9002313.02 file
"RTN","BPSSCRU5",93,0)
LNDC(BPIEN02) ;
"RTN","BPSSCRU5",94,0)
 N BPDAT02,BPNDC
"RTN","BPSSCRU5",95,0)
 S BPDAT02(400)=$G(^BPSC(BPIEN02,400,1,400))
"RTN","BPSSCRU5",96,0)
 S BPNDC=$E($P(BPDAT02(400),U,7),3,99)
"RTN","BPSSCRU5",97,0)
 S BPNDC=$E(BPNDC,1,5)_"-"_$E(BPNDC,6,9)_"-"_$E(BPNDC,10,11)
"RTN","BPSSCRU5",98,0)
 Q BPNDC
"RTN","BPSSCRU5",99,0)
 ;prepares array of reject codes
"RTN","BPSSCRU5",100,0)
 ; BPIEN03 - IEN in #9002313.03 file
"RTN","BPSSCRU5",101,0)
 ; BPRCODES - array to return results
"RTN","BPSSCRU5",102,0)
REJCODES(BPIEN03,BPRCODES) ;
"RTN","BPSSCRU5",103,0)
 N BPA,BPR
"RTN","BPSSCRU5",104,0)
 S BPA=0
"RTN","BPSSCRU5",105,0)
 F  S BPA=$O(^BPSR(BPIEN03,1000,1,511,BPA)) Q:'BPA  D
"RTN","BPSSCRU5",106,0)
 . S BPR=$P(^BPSR(BPIEN03,1000,1,511,BPA,0),U)
"RTN","BPSSCRU5",107,0)
 . I BPR'="" S BPRCODES(BPR)=""
"RTN","BPSSCRU5",108,0)
 Q
"RTN","BPSSCRU5",109,0)
 ;status of the response
"RTN","BPSSCRU5",110,0)
RESPSTAT(BPIEN03) ;
"RTN","BPSSCRU5",111,0)
 N BP1
"RTN","BPSSCRU5",112,0)
 S BP1=$P($G(^BPSR(BPIEN03,1000,1,110)),U,2)
"RTN","BPSSCRU5",113,0)
 Q:BP1="A" "Approved"
"RTN","BPSSCRU5",114,0)
 Q:BP1="C" "Captured"
"RTN","BPSSCRU5",115,0)
 Q:BP1="D" "Duplicate of Paid"
"RTN","BPSSCRU5",116,0)
 Q:BP1="F" "PA Deferred"
"RTN","BPSSCRU5",117,0)
 Q:BP1="P" "Paid"
"RTN","BPSSCRU5",118,0)
 Q:BP1="Q" "Duplicate of Capture"
"RTN","BPSSCRU5",119,0)
 Q:BP1="R" "Rejected"
"RTN","BPSSCRU5",120,0)
 Q:BP1="S" "Duplicate of Approved"
"RTN","BPSSCRU5",121,0)
 Q ""
"RTN","BPSSCRU5",122,0)
 ;
"RTN","BPSSCRU5",123,0)
 ;Electronic payer - ptr to #9002313.92 
"RTN","BPSSCRU5",124,0)
 ;BPIEN02 - ptr in #9002313.02
"RTN","BPSSCRU5",125,0)
PYRIEN(BPIEN02) ;
"RTN","BPSSCRU5",126,0)
 Q $P($G(^BPSF(9002313.92,+$P($G(^BPSC(BPIEN02,0)),U,2),0)),U)
"RTN","BPSSCRU5",127,0)
 ;
"RTN","BPSSCRU5",128,0)
 ;BPIEN02 - ptr in #9002313.02
"RTN","BPSSCRU5",129,0)
B2PYRIEN(BPIEN02,BP57) ;
"RTN","BPSSCRU5",130,0)
 N BPX,BPX2
"RTN","BPSSCRU5",131,0)
 S BPX=$G(^BPSF(9002313.92,+$$PYRIEN(BPIEN02),"REVERSAL"))
"RTN","BPSSCRU5",132,0)
 I $L(BPX)=0 D
"RTN","BPSSCRU5",133,0)
 . S BPX2=+$P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),0)),U,3)
"RTN","BPSSCRU5",134,0)
 . S BPX=$P($G(^BPSF(9002313.92,BPX2,0)),U)
"RTN","BPSSCRU5",135,0)
 Q BPX
"RTN","BPSSCRU5",136,0)
 ;
"RTN","BPSSCRU5",137,0)
 ;B3 payer sheet 
"RTN","BPSSCRU5",138,0)
B3PYRIEN(BPIEN02,BP59,BP57) ;
"RTN","BPSSCRU5",139,0)
 N BPX,BPX2
"RTN","BPSSCRU5",140,0)
 S BPX2=+$P($G(^BPSTL(BP57,10,+$G(^BPSTL(BP57,9)),0)),U,4)
"RTN","BPSSCRU5",141,0)
 S BPX=$P($G(^BPSF(9002313.92,BPX2,0)),U)
"RTN","BPSSCRU5",142,0)
 Q BPX
"RTN","BPSSCRU5",143,0)
 ;
"RTN","BPSSCRU5",144,0)
 ;
"RTN","BPSSCRU5",145,0)
 ;BPLN= line to use in SETLINE
"RTN","BPSSCRU5",146,0)
 ;BPX - long string to display
"RTN","BPSSCRU5",147,0)
 ;BPMLEN - max length
"RTN","BPSSCRU5",148,0)
 ;BPPREFX - prefix string
"RTN","BPSSCRU5",149,0)
 ;BPMARG - left margin
"RTN","BPSSCRU5",150,0)
WRAPLN(BPLN,BPX,BPMLEN,BPPREFX,BPMARG) ;
"RTN","BPSSCRU5",151,0)
 N BPQ,BPLEN,BPXX
"RTN","BPSSCRU5",152,0)
 S BPQ=0
"RTN","BPSSCRU5",153,0)
 S BPLEN=BPMLEN-$L(BPPREFX)
"RTN","BPSSCRU5",154,0)
 S BPXX=$E(BPX,1,BPLEN)
"RTN","BPSSCRU5",155,0)
 D SETLINE^BPSSCRLG(.BPLN,BPPREFX_BPXX)
"RTN","BPSSCRU5",156,0)
 S BPX=$E(BPX,BPLEN+1,9999)
"RTN","BPSSCRU5",157,0)
 I $L(BPX)<1 Q
"RTN","BPSSCRU5",158,0)
 S BPLEN=BPMLEN-BPMARG
"RTN","BPSSCRU5",159,0)
 F  D  Q:BPQ=1
"RTN","BPSSCRU5",160,0)
 . S BPXX=$E(BPX,1,BPLEN)
"RTN","BPSSCRU5",161,0)
 . D SETLINE^BPSSCRLG(.BPLN,$$SPACES(BPMARG)_BPXX)
"RTN","BPSSCRU5",162,0)
 . S BPX=$E(BPX,BPLEN+1,9999)
"RTN","BPSSCRU5",163,0)
 . I $L(BPX)<1 S BPQ=1
"RTN","BPSSCRU5",164,0)
 Q
"RTN","BPSSCRU5",165,0)
 ;
"RTN","BPSSCRU5",166,0)
 ;to prepare spaces
"RTN","BPSSCRU5",167,0)
SPACES(BPN) ;
"RTN","BPSSCRU5",168,0)
 N BPX
"RTN","BPSSCRU5",169,0)
 S $P(BPX," ",BPN+1)=""
"RTN","BPSSCRU5",170,0)
 Q BPX
"RTN","BPSSCRU5",171,0)
 ;
"RTN","BPSSCRU5",172,0)
 ;BPN= line counter (index) 
"RTN","BPSSCRU5",173,0)
 ;BPARR - array for lines
"RTN","BPSSCRU5",174,0)
 ;BPX - long string to display
"RTN","BPSSCRU5",175,0)
 ;BPMLEN - mas length
"RTN","BPSSCRU5",176,0)
 ;BPPREFX - prefix string
"RTN","BPSSCRU5",177,0)
 ;BPMARG - left margin
"RTN","BPSSCRU5",178,0)
WRAPLN2(BPN,BPARR,BPX,BPMLEN,BPPREFX,BPMARG) ;
"RTN","BPSSCRU5",179,0)
 N BPQ,BPLEN,BPXX
"RTN","BPSSCRU5",180,0)
 S BPQ=0
"RTN","BPSSCRU5",181,0)
 S BPLEN=BPMLEN-$L(BPPREFX)
"RTN","BPSSCRU5",182,0)
 S BPXX=$E(BPX,1,BPLEN)
"RTN","BPSSCRU5",183,0)
 D SETLN(.BPN,.BPARR,BPPREFX_BPXX)
"RTN","BPSSCRU5",184,0)
 S BPX=$E(BPX,BPLEN+1,9999)
"RTN","BPSSCRU5",185,0)
 I $L(BPX)<1 Q
"RTN","BPSSCRU5",186,0)
 S BPLEN=BPMLEN-BPMARG
"RTN","BPSSCRU5",187,0)
 F  D  Q:BPQ=1
"RTN","BPSSCRU5",188,0)
 . S BPXX=$E(BPX,1,BPLEN)
"RTN","BPSSCRU5",189,0)
 . D SETLN(.BPN,.BPARR,$$SPACES(BPMARG)_BPXX)
"RTN","BPSSCRU5",190,0)
 . S BPX=$E(BPX,BPLEN+1,9999)
"RTN","BPSSCRU5",191,0)
 . I $L(BPX)<1 S BPQ=1
"RTN","BPSSCRU5",192,0)
 Q
"RTN","BPSSCRU5",193,0)
 ;
"RTN","BPSSCRU5",194,0)
 ;
"RTN","BPSSCRU5",195,0)
SETLN(BPN,BPARR,BPTXT) ;
"RTN","BPSSCRU5",196,0)
 S BPN=BPN+1,BPARR(BPN)=BPTXT
"RTN","BPSSCRU5",197,0)
 Q
"RTN","BPSSCRU5",198,0)
 ;---
"RTN","BPSSCRU5",199,0)
 ;check 2nd insurance
"RTN","BPSSCRU5",200,0)
 ;if there then ask user and print message
"RTN","BPSSCRU5",201,0)
CH2NDINS(BP59,BPPATNAM,BPINSNAM,BPRXINFO) ;
"RTN","BPSSCRU5",202,0)
 N BPRETV
"RTN","BPSSCRU5",203,0)
 S BPRETV=$$NEXTINS^BPSSCRCL(BP59,BPINSNAM)
"RTN","BPSSCRU5",204,0)
 Q:+BPRETV=0
"RTN","BPSSCRU5",205,0)
 D PRN(BPPATNAM,BPRETV,.BPRXINFO,"S")
"RTN","BPSSCRU5",206,0)
 W !!
"RTN","BPSSCRU5",207,0)
 I $$YESNO^BPSSCRRS("Do you want to print the information (above) concerning additional insurance?   (Y/N)")'=1 Q
"RTN","BPSSCRU5",208,0)
 D PRN(BPPATNAM,BPRETV,.BPRXINFO,"P")
"RTN","BPSSCRU5",209,0)
 Q
"RTN","BPSSCRU5",210,0)
 ;
"RTN","BPSSCRU5",211,0)
 ;BPPRNFL
"RTN","BPSSCRU5",212,0)
 ; S- print to screen
"RTN","BPSSCRU5",213,0)
PRN(BPPATNAM,BPRETV,BPRXINFO,BPPRNFL) ;
"RTN","BPSSCRU5",214,0)
 I BPPRNFL="S" W @IOF D MS2NDINS Q
"RTN","BPSSCRU5",215,0)
 D PRINT("MS2NDINS^BPSSCRU5","BPS 2ND INSURANCE INFO","BP*")
"RTN","BPSSCRU5",216,0)
 W !!
"RTN","BPSSCRU5",217,0)
 Q
"RTN","BPSSCRU5",218,0)
 ;
"RTN","BPSSCRU5",219,0)
MS2NDINS ;
"RTN","BPSSCRU5",220,0)
 N Y,Z
"RTN","BPSSCRU5",221,0)
 W !,"This patient has ADDITIONAL insurance with Rx Coverage that may be"
"RTN","BPSSCRU5",222,0)
 W !,"used to bill this claim.  The system will change the CT entry to a"
"RTN","BPSSCRU5",223,0)
 W !,"NON-BILLABLE Episode. If appropriate, please go to the ECME Pharmacy"
"RTN","BPSSCRU5",224,0)
 W !,"COB menu and use the PRO - Process Secondary/TRICARE Rx to ECME"
"RTN","BPSSCRU5",225,0)
 W !,"option to create an ePharmacy secondary claim."
"RTN","BPSSCRU5",226,0)
 W !!,"Patient: ",?18,BPPATNAM
"RTN","BPSSCRU5",227,0)
 S Y=$P(BPRETV,U,4)\1 D DD^%DT
"RTN","BPSSCRU5",228,0)
 W !,"Date of service: ",?18,Y
"RTN","BPSSCRU5",229,0)
 W !,"Insurance: ",?18,$P(BPRETV,U,2)
"RTN","BPSSCRU5",230,0)
 W !,"Group number: ",?18,$P(BPRETV,U,3)
"RTN","BPSSCRU5",231,0)
 S Z=0 F  S Z=$O(BPRXINFO(Z)) Q:+Z=0  W !,BPRXINFO(Z)
"RTN","BPSSCRU5",232,0)
 Q
"RTN","BPSSCRU5",233,0)
 ;
"RTN","BPSSCRU5",234,0)
 ;Prints report
"RTN","BPSSCRU5",235,0)
 ;propmpts user to choose device (including queuing)
"RTN","BPSSCRU5",236,0)
 ;TXTSRC - name of the report's entry point
"RTN","BPSSCRU5",237,0)
 ;DESCR - description for the Task Manager
"RTN","BPSSCRU5",238,0)
 ;SAVEVARS - mask for vars that need to be available in the report
"RTN","BPSSCRU5",239,0)
 ;  (exmpl: "BP*")
"RTN","BPSSCRU5",240,0)
PRINT(TXTSRC,DESCR,SAVEVARS) ;
"RTN","BPSSCRU5",241,0)
 N Y,QUITVAR,SCRFLAG
"RTN","BPSSCRU5",242,0)
 S (QUITVAR,SCRFLAG)=0
"RTN","BPSSCRU5",243,0)
 D DEVICE Q:QUITVAR
"RTN","BPSSCRU5",244,0)
 D @TXTSRC
"RTN","BPSSCRU5",245,0)
 D ^%ZISC
"RTN","BPSSCRU5",246,0)
 I QUITVAR W !,"Cancelled"
"RTN","BPSSCRU5",247,0)
 Q
"RTN","BPSSCRU5",248,0)
 ;
"RTN","BPSSCRU5",249,0)
DEVICE ;
"RTN","BPSSCRU5",250,0)
 N DIR,DIRUT,POP
"RTN","BPSSCRU5",251,0)
 N ZTRTN,ZTIO,ZTSAVE,ZTDESC,%ZIS
"RTN","BPSSCRU5",252,0)
 K IO("Q") S %ZIS="QM"
"RTN","BPSSCRU5",253,0)
 W ! D ^%ZIS
"RTN","BPSSCRU5",254,0)
 I POP S QUITVAR=1 Q
"RTN","BPSSCRU5",255,0)
 S SCRFLAG=$S($E($G(IOST),1,2)="C-":1,1:0)
"RTN","BPSSCRU5",256,0)
 I $D(IO("Q")) D  S QUITVAR=1
"RTN","BPSSCRU5",257,0)
 . S ZTRTN=TXTSRC
"RTN","BPSSCRU5",258,0)
 . S ZTIO=ION
"RTN","BPSSCRU5",259,0)
 . S ZTSAVE(SAVEVARS)=""
"RTN","BPSSCRU5",260,0)
 . S ZTDESC=DESCR
"RTN","BPSSCRU5",261,0)
 . D ^%ZTLOAD
"RTN","BPSSCRU5",262,0)
 . W !,$S($D(ZTSK):"REQUEST QUEUED TASK="_ZTSK,1:"REQUEST CANCELLED")
"RTN","BPSSCRU5",263,0)
 . D HOME^%ZIS
"RTN","BPSSCRU5",264,0)
 U IO
"RTN","BPSSCRU5",265,0)
 Q
"RTN","BPSSCRU5",266,0)
 ;
"RTN","BPSSCRU6")
0^3^B18199575
"RTN","BPSSCRU6",1,0)
BPSSCRU6 ;BHAM ISC/SS - ECME SCREEN UTILITIES ;22-MAY-06
"RTN","BPSSCRU6",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**3,8**;JUN 2004;Build 29
"RTN","BPSSCRU6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSSCRU6",4,0)
 ;USER SCREEN
"RTN","BPSSCRU6",5,0)
 Q
"RTN","BPSSCRU6",6,0)
 ;
"RTN","BPSSCRU6",7,0)
 ;Input:
"RTN","BPSSCRU6",8,0)
 ; BP59 - 
"RTN","BPSSCRU6",9,0)
 ;Output:
"RTN","BPSSCRU6",10,0)
 ; 
"RTN","BPSSCRU6",11,0)
DISPREJ(BP59) ;
"RTN","BPSSCRU6",12,0)
 N BPARR,BPN,BPCNT
"RTN","BPSSCRU6",13,0)
 S BPN=0
"RTN","BPSSCRU6",14,0)
 ;I (BPSTATUS["E REJECTED")!(BPSTATUS["E REVERSAL REJECTED") D
"RTN","BPSSCRU6",15,0)
 D GETRJCOD^BPSSCRU3(BP59,.BPARR,.BPN,74,"")
"RTN","BPSSCRU6",16,0)
 D WRAPLN2^BPSSCRU5(.BPN,.BPARR,$$GETMESS^BPSSCRU3(1000,504,BP59),74,"",0)
"RTN","BPSSCRU6",17,0)
 D WRAPLN2^BPSSCRU5(.BPN,.BPARR,$$GETMESS^BPSSCRU3(1000,526,BP59),74,"",0)
"RTN","BPSSCRU6",18,0)
 D WRAPLN2^BPSSCRU5(.BPN,.BPARR,$$GETMESS^BPSSCRU3(504,0,BP59),74,"",0)
"RTN","BPSSCRU6",19,0)
 I BPN=0 Q
"RTN","BPSSCRU6",20,0)
 S BPCNT=0
"RTN","BPSSCRU6",21,0)
 F  S BPCNT=$O(BPARR(BPCNT)) Q:+BPCNT=0  D
"RTN","BPSSCRU6",22,0)
 . W:$L(BPARR(BPCNT)) !,?6,BPARR(BPCNT)
"RTN","BPSSCRU6",23,0)
 Q
"RTN","BPSSCRU6",24,0)
 ;
"RTN","BPSSCRU6",25,0)
 ;return Date in specified format
"RTN","BPSSCRU6",26,0)
 ;BPDT - date in FileMan format
"RTN","BPSSCRU6",27,0)
 ;BPMODE:
"RTN","BPSSCRU6",28,0)
 ; 1- like "JUL 23, 2005"
"RTN","BPSSCRU6",29,0)
 ; 2- like "JUL 23, 2005@16:03 "
"RTN","BPSSCRU6",30,0)
 ; 3- MM/DD/YY
"RTN","BPSSCRU6",31,0)
FORMDATE(BPDT,BPMODE) ;
"RTN","BPSSCRU6",32,0)
 N Y,BPTIME,BPHR
"RTN","BPSSCRU6",33,0)
 I $G(BPDT)=0 Q ""
"RTN","BPSSCRU6",34,0)
 I BPMODE=1 S Y=BPDT\1 X ^DD("DD") Q Y
"RTN","BPSSCRU6",35,0)
 I BPMODE=2 S Y=BPDT X ^DD("DD") Q Y
"RTN","BPSSCRU6",36,0)
 I BPMODE=3 S Y=$E(BPDT,4,5)_"/"_$E(BPDT,6,7)_"/"_$E(BPDT,2,3) Q Y
"RTN","BPSSCRU6",37,0)
 Q ""
"RTN","BPSSCRU6",38,0)
 ;
"RTN","BPSSCRU6",39,0)
 ;Generic function to ask a date
"RTN","BPSSCRU6",40,0)
 ;Input:
"RTN","BPSSCRU6",41,0)
 ;BPPROMPT - prompt like "START WITH DATE: "
"RTN","BPSSCRU6",42,0)
 ;BPDFLDT - default for the prompt like "TODAY" or "T" or "T-100" or 12/12/2005
"RTN","BPSSCRU6",43,0)
 ;output:
"RTN","BPSSCRU6",44,0)
 ; 0 - nothing
"RTN","BPSSCRU6",45,0)
 ; <0 quit
"RTN","BPSSCRU6",46,0)
 ; >0 fileman date
"RTN","BPSSCRU6",47,0)
ASKDATE(BPPROMPT,BPDFLDT) ;
"RTN","BPSSCRU6",48,0)
 S %DT="AEX"
"RTN","BPSSCRU6",49,0)
 S %DT("A")=BPPROMPT,%DT("B")=BPDFLDT
"RTN","BPSSCRU6",50,0)
 D ^%DT K %DT
"RTN","BPSSCRU6",51,0)
 I Y<0 Q -1
"RTN","BPSSCRU6",52,0)
 Q +Y
"RTN","BPSSCRU6",53,0)
 ;Release date
"RTN","BPSSCRU6",54,0)
 ;RXNO - RX ien #52
"RTN","BPSSCRU6",55,0)
 ;REFNO - fill number (0=original)
"RTN","BPSSCRU6",56,0)
RELDATE(RXNO,REFNO) ;
"RTN","BPSSCRU6",57,0)
 I REFNO=0 Q $$RXRELDT^BPSSCRU2(+RXNO)
"RTN","BPSSCRU6",58,0)
 Q $$REFRELDT^BPSSCRU2(+RXNO,REFNO)
"RTN","BPSSCRU6",59,0)
 ;
"RTN","BPSSCRU6",60,0)
 ;Group name/Plan name - name originally comes from file #355.3 by BPS TRANSACTION file ien
"RTN","BPSSCRU6",61,0)
PLANNAME(BP59) ;
"RTN","BPSSCRU6",62,0)
 N BPPLNM
"RTN","BPSSCRU6",63,0)
 S BPPLNM=$P($G(^BPST(BP59,10,1,3)),U)
"RTN","BPSSCRU6",64,0)
 S:BPPLNM="" BPPLNM=$P($G(^BPST(BP59,10,1,1)),U,3)
"RTN","BPSSCRU6",65,0)
 Q BPPLNM
"RTN","BPSSCRU6",66,0)
 ;Insurance name - name originally comes from file #36 by BPS TRANSACTION file ien
"RTN","BPSSCRU6",67,0)
INSNAME(BP59) ;
"RTN","BPSSCRU6",68,0)
 Q $P($G(^BPST(BP59,10,1,0)),U,7)
"RTN","BPSSCRU6",69,0)
 ;
"RTN","BPSSCRU6",70,0)
 ;Returns close reason by ien file#356.8
"RTN","BPSSCRU6",71,0)
CLREASON(BP3568) ;
"RTN","BPSSCRU6",72,0)
 Q $P($G(^IBE(356.8,BP3568,0)),U)
"RTN","BPSSCRU6",73,0)
 ;
"RTN","BPSSCRU6",74,0)
 ;Convert YYYYMMDD to FileMan format
"RTN","BPSSCRU6",75,0)
YMD2FM(BPYMD) ;
"RTN","BPSSCRU6",76,0)
 Q ($E(BPYMD,1,4)-1700)_$E(BPYMD,5,8)
"RTN","BPSSCRU6",77,0)
 ;
"RTN","BPSSCRU6",78,0)
 ;get DRUG ien from PRESCRIPTION file
"RTN","BPSSCRU6",79,0)
DRUGIEN(BP52,BPDFN) ;
"RTN","BPSSCRU6",80,0)
 N XZ
"RTN","BPSSCRU6",81,0)
 S XZ=0
"RTN","BPSSCRU6",82,0)
 K ^TMP($J,"BPSDRUG")
"RTN","BPSSCRU6",83,0)
 D RX^PSO52API(BPDFN,"BPSDRUG",BP52,,"")
"RTN","BPSSCRU6",84,0)
 S XZ=$G(^TMP($J,"BPSDRUG",BPDFN,BP52,6))
"RTN","BPSSCRU6",85,0)
 K ^TMP($J,"BPSDRUG")
"RTN","BPSSCRU6",86,0)
 Q +$P(XZ,U)
"RTN","BPSSCRU6",87,0)
 ;
"RTN","BPSSCRU6",88,0)
 ;
"RTN","BPSSCRU6",89,0)
CONVCLID(BPCLID) ;
"RTN","BPSSCRU6",90,0)
 Q $P(BPCLID,"D2",2)
"RTN","BPSSCRU6",91,0)
 ;
"RTN","BPSSCRU6",92,0)
 ;Return claim status
"RTN","BPSSCRU6",93,0)
COBCLST(BP59) ;
"RTN","BPSSCRU6",94,0)
 N BPTXT1,BPX,BPSTATUS,BPCOBIND,BPCOB
"RTN","BPSSCRU6",95,0)
 S BPCOBIND=$P(^BPST(BP59,0),U,14)
"RTN","BPSSCRU6",96,0)
 S BPSCOB=$S($G(BPCOBIND)>0:$G(BPCOBIND),1:1)
"RTN","BPSSCRU6",97,0)
 S BPTXT1=$S(BPSCOB=2:"s-",BPSCOB=3:"t-",1:"p-")
"RTN","BPSSCRU6",98,0)
 S BPX=$$CLAIMST^BPSSCRU3(BP59)
"RTN","BPSSCRU6",99,0)
 S BPSTATUS=$P(BPX,U)
"RTN","BPSSCRU6",100,0)
 I BPSTATUS["E REVERSAL ACCEPTED" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Reversal accepted")
"RTN","BPSSCRU6",101,0)
 I BPSTATUS["E REVERSAL REJECTED" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Reversal rejected")
"RTN","BPSSCRU6",102,0)
 I BPSTATUS["E PAYABLE" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Payable")
"RTN","BPSSCRU6",103,0)
 I BPSTATUS["E REJECTED" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Rejected")
"RTN","BPSSCRU6",104,0)
 I BPSTATUS["E UNSTRANDED" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Unstranded")
"RTN","BPSSCRU6",105,0)
 I BPSTATUS["E REVERSAL UNSTRANDED" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Unstranded reversal")
"RTN","BPSSCRU6",106,0)
 I BPSTATUS["E CAPTURED" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Captured")
"RTN","BPSSCRU6",107,0)
 I BPSTATUS["E DUPLICATE" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Duplicate")
"RTN","BPSSCRU6",108,0)
 I BPSTATUS["E OTHER" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Other")
"RTN","BPSSCRU6",109,0)
 I BPSTATUS["IN PROGRESS" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"In progress")
"RTN","BPSSCRU6",110,0)
 I BPSTATUS["CORRUPT" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Corrupt")
"RTN","BPSSCRU6",111,0)
 I BPSTATUS["E REVERSAL OTHER" S BPTXT1=$$CLMCLSTX^BPSSCR03(BP59,BPTXT1_"Reversal Other")
"RTN","BPSSCRU6",112,0)
 I BPTXT1="" S BPTXT1="Unknown status "
"RTN","BPSSCRU6",113,0)
 Q BPTXT1
"RTN","BPSTEST")
0^28^B68950406
"RTN","BPSTEST",1,0)
BPSTEST ;OAK/ELZ - ECME TESTING TOOL ;11/15/07  09:55
"RTN","BPSTEST",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**6,7,8**;JUN 2004;Build 29
"RTN","BPSTEST",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSTEST",4,0)
 ;
"RTN","BPSTEST",5,0)
 ;
"RTN","BPSTEST",6,0)
GETOVER(BPSRXIEN,BPSFILL,BPSORESP,BPSWHERE,BPSTYPE,BPPAYSEQ) ;
"RTN","BPSTEST",7,0)
 ; called by BPSNCPDP to enter overrides for a particular RX
"RTN","BPSTEST",8,0)
 ; INPUT
"RTN","BPSTEST",9,0)
 ;    BPSRXIEN  - Prescription Number
"RTN","BPSTEST",10,0)
 ;    BPSFILL   - Fill Number
"RTN","BPSTEST",11,0)
 ;    BPSORESP  - Previous response when this claim was processed
"RTN","BPSTEST",12,0)
 ;    BPSWHERE  - RX Action passed into BPSNCPDP
"RTN","BPSTEST",13,0)
 ;    BPSTYPE   - R (Reversal), S (Submission)
"RTN","BPSTEST",14,0)
 ;    BPPAYSEQ  - payer sequence 1 - primary, 2 - secondary 
"RTN","BPSTEST",15,0)
 ; OUTPUT
"RTN","BPSTEST",16,0)
 ;    None - Table BPS PAYER RESPONSE OVERRIDE entry is created.
"RTN","BPSTEST",17,0)
 ;
"RTN","BPSTEST",18,0)
 N BPSTRANS,BPSTIEN,BPSSRESP,DIC,X,Y,DIR,DIK,DA
"RTN","BPSTEST",19,0)
 ;
"RTN","BPSTEST",20,0)
 ; Check if testing is enabled
"RTN","BPSTEST",21,0)
 I '$$CHECK() Q
"RTN","BPSTEST",22,0)
 ;
"RTN","BPSTEST",23,0)
 ; Option can not be run for Date of Death option as it causes errors
"RTN","BPSTEST",24,0)
 I $G(XQY0)["DG DEATH ENTRY" W !,"The testing tool can not be run from Date of Death option" Q
"RTN","BPSTEST",25,0)
 ;
"RTN","BPSTEST",26,0)
 ; Do not run for background jobs (CMOP (CR*) or ARES/AREV)
"RTN","BPSTEST",27,0)
 I $D(ZTQUEUED)!(",ARES,AREV,CRLB,CRLR,CRLX,PC,PL,"[(","_BPSWHERE_",")) Q
"RTN","BPSTEST",28,0)
 ;
"RTN","BPSTEST",29,0)
 ; Create Transaction Number
"RTN","BPSTEST",30,0)
 S BPSFILL="0000"_+BPSFILL
"RTN","BPSTEST",31,0)
 S BPSTRANS=BPSRXIEN_"."_$E(BPSFILL,$L(BPSFILL)-3,$L(BPSFILL))_$S($G(BPPAYSEQ)>0:+BPPAYSEQ,1:1)
"RTN","BPSTEST",32,0)
 ;
"RTN","BPSTEST",33,0)
 ; Lookup the record in the BPS PAYER RESPONSE OVERRIDE table
"RTN","BPSTEST",34,0)
 S DIC=9002313.32,DIC(0)="",X=BPSTRANS
"RTN","BPSTEST",35,0)
 D ^DIC
"RTN","BPSTEST",36,0)
 S BPSTIEN=+Y
"RTN","BPSTEST",37,0)
 ;
"RTN","BPSTEST",38,0)
 ; Prompt if user wants to do overrides
"RTN","BPSTEST",39,0)
 W !!,"Payer Overrides are enabled at this site.  If this is production environment,"
"RTN","BPSTEST",40,0)
 W !,"do not enter overrides (enter No at the next prompt) and disable this"
"RTN","BPSTEST",41,0)
 W !,"functionality in the BPS SETUP table."
"RTN","BPSTEST",42,0)
 W !!,"Entering No at the next prompt will delete any current overrides for the"
"RTN","BPSTEST",43,0)
 W !,"prescription, if they exist.",!
"RTN","BPSTEST",44,0)
 S DIR(0)="SA^Y:Yes;N:No"
"RTN","BPSTEST",45,0)
 S DIR("A")="Do you want to enter overrides for this prescription? ",DIR("B")="YES"
"RTN","BPSTEST",46,0)
 D ^DIR
"RTN","BPSTEST",47,0)
 ;
"RTN","BPSTEST",48,0)
 ; If no, delete the transaction (if it exists) and quit
"RTN","BPSTEST",49,0)
 I Y'="Y" D:BPSTIEN'=-1  Q
"RTN","BPSTEST",50,0)
 . S DIK="^BPS(9002313.32,",DA=BPSTIEN
"RTN","BPSTEST",51,0)
 . D ^DIK
"RTN","BPSTEST",52,0)
 ;
"RTN","BPSTEST",53,0)
 ; If the record does not exist, create it
"RTN","BPSTEST",54,0)
 I BPSTIEN=-1 S BPSTIEN=$$CREATE(BPSTRANS)
"RTN","BPSTEST",55,0)
 I BPSTIEN=-1 W !,"Failed to create the BPS PAYER RESPONSE OVERRIDE record",! Q
"RTN","BPSTEST",56,0)
 ;
"RTN","BPSTEST",57,0)
 ; If BPSTYPE is 'S' (submission) and old response is 'E Payable', change BPSTYPE to 'RS'
"RTN","BPSTEST",58,0)
 I BPSTYPE="S",BPSORESP="E PAYABLE"!(BPSORESP="E DUPLICATE")!(BPSORESP="E REVERSAL REJECTED")!(BPSORESP="E REVERSAL UNSTRANDED") S BPSTYPE="RS"
"RTN","BPSTEST",59,0)
 ;
"RTN","BPSTEST",60,0)
 ; Update with the BPSTYPE
"RTN","BPSTEST",61,0)
 D FILE("^BPS(9002313.32,",BPSTIEN,.02,BPSTYPE)
"RTN","BPSTEST",62,0)
 ;
"RTN","BPSTEST",63,0)
 ; Message for RS
"RTN","BPSTEST",64,0)
 I BPSTYPE="RS" D
"RTN","BPSTEST",65,0)
 . W !!,"This submission may also have a reversal so you will be prompted for the"
"RTN","BPSTEST",66,0)
 . W !,"reversal overrides."
"RTN","BPSTEST",67,0)
 ;
"RTN","BPSTEST",68,0)
 ; If BPSTYPE contains 'R', then prompt for reversal response
"RTN","BPSTEST",69,0)
 I BPSTYPE["R" D
"RTN","BPSTEST",70,0)
 . W !!,"Reversal Questions"
"RTN","BPSTEST",71,0)
 . D PROMPT(BPSTIEN,.05,"A")
"RTN","BPSTEST",72,0)
 . N BPSRESP
"RTN","BPSTEST",73,0)
 . S BPSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.05,"I")
"RTN","BPSTEST",74,0)
 . I BPSRESP="R" D ENREVRJ(BPSTRANS)
"RTN","BPSTEST",75,0)
 ;
"RTN","BPSTEST",76,0)
 ; If BPSTYPE contains 'S', do submission response
"RTN","BPSTEST",77,0)
 I BPSTYPE["S" D
"RTN","BPSTEST",78,0)
 . W !!,"Submission Questions"
"RTN","BPSTEST",79,0)
 . D PROMPT(BPSTIEN,.03,"P")
"RTN","BPSTEST",80,0)
 . S BPSSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.03,"I")
"RTN","BPSTEST",81,0)
 . I BPSSRESP="P"!(BPSSRESP="D") D PROMPT(BPSTIEN,.04,40)
"RTN","BPSTEST",82,0)
 . I BPSSRESP="P"!(BPSSRESP="D") D PROMPT(BPSTIEN,.06,9)
"RTN","BPSTEST",83,0)
 . I BPSSRESP="R" D PROMPT(BPSTIEN,1,"07")
"RTN","BPSTEST",84,0)
 ;
"RTN","BPSTEST",85,0)
 W ! D PROMPT(BPSTIEN,.07,0)
"RTN","BPSTEST",86,0)
 Q
"RTN","BPSTEST",87,0)
 ;
"RTN","BPSTEST",88,0)
SETOVER(BPSTRANS,BPSTYPE,BPSDATA) ;
"RTN","BPSTEST",89,0)
 ; called by BPSECMPS to set the override data
"RTN","BPSTEST",90,0)
 ; Input
"RTN","BPSTEST",91,0)
 ;    BPSTRANS - Transaction IEN
"RTN","BPSTEST",92,0)
 ;    BPSTYPE  - B1 for submission, B2 for reversals
"RTN","BPSTEST",93,0)
 ; Output
"RTN","BPSTEST",94,0)
 ;    BPSDATA    - Passed by reference and updated with appropriate overrides
"RTN","BPSTEST",95,0)
 ;
"RTN","BPSTEST",96,0)
 N BPSTIEN,BPSRRESP,BPSSRESP,BPSPAID,BPSRCNT,BPSRIEN,BPSRCODE,BPSRCD,BPSCOPAY,BPSXXXX,BPSUNDEF
"RTN","BPSTEST",97,0)
 ;
"RTN","BPSTEST",98,0)
 ; Check the Test Flag in set in BPS SETUP
"RTN","BPSTEST",99,0)
 I '$$CHECK() Q
"RTN","BPSTEST",100,0)
 ;
"RTN","BPSTEST",101,0)
 ; Check if the Transaction Number is defined in BPS RESPONSE OVERRIDES
"RTN","BPSTEST",102,0)
 S BPSTIEN=$O(^BPS(9002313.32,"B",BPSTRANS,""))
"RTN","BPSTEST",103,0)
 I BPSTIEN="" Q
"RTN","BPSTEST",104,0)
 ;
"RTN","BPSTEST",105,0)
 ; If a reversal, check for specific reversal overrides and set
"RTN","BPSTEST",106,0)
 I BPSTYPE="B2" D
"RTN","BPSTEST",107,0)
 . S BPSRRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.05,"I")
"RTN","BPSTEST",108,0)
 . ;
"RTN","BPSTEST",109,0)
 . ; If the response is Stranded, force an <UNDEF> error
"RTN","BPSTEST",110,0)
 . I BPSRRESP="S" S BPSXXXX=BPSUNDEF
"RTN","BPSTEST",111,0)
 . I BPSRRESP]"" S BPSDATA(1,112)=$S(BPSRRESP="D":"S",1:BPSRRESP)
"RTN","BPSTEST",112,0)
 . S BPSDATA(9002313.03,9002313.03,"+1,",501)=$S(BPSRRESP="R":"R",1:"A")
"RTN","BPSTEST",113,0)
 . I BPSRRESP="R" D SETREJ(BPSTRANS)
"RTN","BPSTEST",114,0)
 ;
"RTN","BPSTEST",115,0)
 ; If a submission, check for specific submission overrides and set
"RTN","BPSTEST",116,0)
 I BPSTYPE="B1" D
"RTN","BPSTEST",117,0)
 . ; Get submission response
"RTN","BPSTEST",118,0)
 . S BPSSRESP=$$GET1^DIQ(9002313.32,BPSTIEN_",",.03,"I")
"RTN","BPSTEST",119,0)
 . ;
"RTN","BPSTEST",120,0)
 . ; If the response is Stranded, force an <UNDEF> error
"RTN","BPSTEST",121,0)
 . I BPSSRESP="S" S BPSXXXX=BPSUNDEF
"RTN","BPSTEST",122,0)
 . ; If it exists, file it
"RTN","BPSTEST",123,0)
 . I BPSSRESP]"" D
"RTN","BPSTEST",124,0)
 .. S BPSDATA(1,112)=BPSSRESP
"RTN","BPSTEST",125,0)
 .. S BPSDATA(9002313.03,9002313.03,"+1,",501)=$S(BPSSRESP="R":"R",1:"A")
"RTN","BPSTEST",126,0)
 .. ; If payable or duplicate, get the BPSPAID amount and file it if it
"RTN","BPSTEST",127,0)
 .. ; exists.  Also delete any reject codes
"RTN","BPSTEST",128,0)
 .. I BPSSRESP="P"!(BPSSRESP="D") D
"RTN","BPSTEST",129,0)
 ... S BPSPAID=$$GET1^DIQ(9002313.32,BPSTIEN_",",.04,"I")
"RTN","BPSTEST",130,0)
 ... I BPSPAID]"" D
"RTN","BPSTEST",131,0)
 .... S BPSDATA(1,509)=$$DFF^BPSECFM(BPSPAID,8)
"RTN","BPSTEST",132,0)
 .... K BPSDATA(1,510),BPSDATA(1,511)
"RTN","BPSTEST",133,0)
 .. I BPSSRESP="P"!(BPSSRESP="D") D
"RTN","BPSTEST",134,0)
 ... S BPSCOPAY=$$GET1^DIQ(9002313.32,BPSTIEN_",",.06,"I")
"RTN","BPSTEST",135,0)
 ... I BPSCOPAY]"" D
"RTN","BPSTEST",136,0)
 .... S BPSDATA(1,518)=$$DFF^BPSECFM(BPSCOPAY,8)
"RTN","BPSTEST",137,0)
 .. ; If rejected, get the rejection code and file them
"RTN","BPSTEST",138,0)
 .. ; Also, delete the BPSPAID amount
"RTN","BPSTEST",139,0)
 .. I BPSSRESP="R" D
"RTN","BPSTEST",140,0)
 ... ; Delete old rejections and BPSPAID amount
"RTN","BPSTEST",141,0)
 ... K BPSDATA(1,509),BPSDATA(1,511)
"RTN","BPSTEST",142,0)
 ... ; Loop through rejections and store
"RTN","BPSTEST",143,0)
 ... S BPSRCNT=0
"RTN","BPSTEST",144,0)
 ... S BPSRIEN=0 F  S BPSRIEN=$O(^BPS(9002313.32,BPSTIEN,1,BPSRIEN)) Q:+BPSRIEN=0  D
"RTN","BPSTEST",145,0)
 .... S BPSRCODE=$P($G(^BPS(9002313.32,BPSTIEN,1,BPSRIEN,0)),"^",1)
"RTN","BPSTEST",146,0)
 .... ; Increment counter and store
"RTN","BPSTEST",147,0)
 .... I BPSRCODE]"" D
"RTN","BPSTEST",148,0)
 ..... S BPSRCD=$$GET1^DIQ(9002313.93,BPSRCODE_",",.01,"E")
"RTN","BPSTEST",149,0)
 ..... I BPSRCD]"" S BPSRCNT=BPSRCNT+1,BPSDATA(1,511,BPSRCNT)=BPSRCD
"RTN","BPSTEST",150,0)
 ... ; Store total number of rejections
"RTN","BPSTEST",151,0)
 ... S BPSDATA(1,510)=BPSRCNT
"RTN","BPSTEST",152,0)
 Q
"RTN","BPSTEST",153,0)
 ;
"RTN","BPSTEST",154,0)
SELOVER ;
"RTN","BPSTEST",155,0)
 ; used to create overrides for prescription that will processed in the
"RTN","BPSTEST",156,0)
 ; background (CMOP, auto-reversals).  The user is prompted for the
"RTN","BPSTEST",157,0)
 ; prescription and other information and then calls GETOVER.  It is called
"RTN","BPSTEST",158,0)
 ; by option BPS PROVIDER RESPONSE OVERRIDES
"RTN","BPSTEST",159,0)
 ;
"RTN","BPSTEST",160,0)
 N BPSRXIEN,BPSRXNM,BPSRXFL,BPSRFL,BPSORESP,BPSTYPE,BPSRXARR,BPSRARR,DIC,Y,DIR
"RTN","BPSTEST",161,0)
 ;
"RTN","BPSTEST",162,0)
 ; Check if test mode is on
"RTN","BPSTEST",163,0)
 I '$$CHECK() Q
"RTN","BPSTEST",164,0)
 ;
"RTN","BPSTEST",165,0)
 ; Prompt for the Prescription
"RTN","BPSTEST",166,0)
 S BPSRXIEN=$$PROMPTRX^BPSUTIL1 Q:BPSRXIEN<1
"RTN","BPSTEST",167,0)
 D RXAPI^BPSUTIL1(BPSRXIEN,".01;22","BPSRXARR","IE")
"RTN","BPSTEST",168,0)
 S BPSRXNM=$G(BPSRXARR(52,BPSRXIEN,.01,"E"))
"RTN","BPSTEST",169,0)
 ;
"RTN","BPSTEST",170,0)
 ; Prompt for Fill/Refill
"RTN","BPSTEST",171,0)
 S DIR(0)="S^0:"_$G(BPSRXARR(52,BPSRXIEN,22,"E"))
"RTN","BPSTEST",172,0)
 F BPSRFL=1:1 D RXSUBF^BPSUTIL1(BPSRXIEN,52,52.1,BPSRFL,.01,"BPSRARR","E") Q:$G(BPSRARR(52.1,BPSRFL,.01,"E"))=""  D
"RTN","BPSTEST",173,0)
 . S DIR(0)=DIR(0)_";"_BPSRFL_":"_BPSRARR(52.1,BPSRFL,.01,"E")
"RTN","BPSTEST",174,0)
 S DIR("A")="Select fill/refill for prescription "_BPSRXNM,DIR("B")=0
"RTN","BPSTEST",175,0)
 D ^DIR
"RTN","BPSTEST",176,0)
 I Y'=+Y Q
"RTN","BPSTEST",177,0)
 S BPSRXFL=Y
"RTN","BPSTEST",178,0)
 ;
"RTN","BPSTEST",179,0)
 ; Prompt for BPSTYPE
"RTN","BPSTEST",180,0)
 S DIR(0)="S^R:Reversal;RS:Resubmit with Reversal;S:Submit"
"RTN","BPSTEST",181,0)
 S DIR("A")="Enter BPSTYPE of transaction",DIR("B")="SUBMIT"
"RTN","BPSTEST",182,0)
 D ^DIR
"RTN","BPSTEST",183,0)
 I ",R,RS,S,"'[","_Y_"," Q
"RTN","BPSTEST",184,0)
 S BPSTYPE=Y
"RTN","BPSTEST",185,0)
 ;
"RTN","BPSTEST",186,0)
 ; Set up parameters
"RTN","BPSTEST",187,0)
 S BPSORESP=""
"RTN","BPSTEST",188,0)
 I BPSTYPE="RS" S BPSTYPE="S",BPSORESP="E PAYABLE"
"RTN","BPSTEST",189,0)
 ;
"RTN","BPSTEST",190,0)
 ; Call GETOVER
"RTN","BPSTEST",191,0)
 D GETOVER(BPSRXIEN,BPSRXFL,BPSORESP,"",BPSTYPE)
"RTN","BPSTEST",192,0)
 Q
"RTN","BPSTEST",193,0)
 ;
"RTN","BPSTEST",194,0)
CHECK() ;
"RTN","BPSTEST",195,0)
 ; Check if Test Mode is ON in the BPS Setup table
"RTN","BPSTEST",196,0)
 ; Also called by BPSNCPDP and BPSEMCPS
"RTN","BPSTEST",197,0)
 ;
"RTN","BPSTEST",198,0)
 ;IA#4440
"RTN","BPSTEST",199,0)
 Q $S($$PROD^XUPROD:0,1:$P($G(^BPS(9002313.99,1,0)),"^",3))
"RTN","BPSTEST",200,0)
 ;
"RTN","BPSTEST",201,0)
CREATE(BPSTRANS) ;
"RTN","BPSTEST",202,0)
 ; Create the Override record
"RTN","BPSTEST",203,0)
 ;
"RTN","BPSTEST",204,0)
 N DIC,X,Y,BPSTIEN,DA
"RTN","BPSTEST",205,0)
 S DIC=9002313.32,DIC(0)="L",X=BPSTRANS
"RTN","BPSTEST",206,0)
 D ^DIC
"RTN","BPSTEST",207,0)
 S BPSTIEN=+Y
"RTN","BPSTEST",208,0)
 Q BPSTIEN
"RTN","BPSTEST",209,0)
 ;
"RTN","BPSTEST",210,0)
FILE(DIE,DA,BPSFLD,BPSDATA) ;
"RTN","BPSTEST",211,0)
 ; File in the Override record
"RTN","BPSTEST",212,0)
 ;
"RTN","BPSTEST",213,0)
 N DR,X,Y
"RTN","BPSTEST",214,0)
 S DR=BPSFLD_"///"_BPSDATA
"RTN","BPSTEST",215,0)
 L +@(DIE_DA_")"):0 I $T D ^DIE L -@(DIE_DA_")") Q
"RTN","BPSTEST",216,0)
 W !?5,"Another user is editing this entry."
"RTN","BPSTEST",217,0)
 Q
"RTN","BPSTEST",218,0)
 ;
"RTN","BPSTEST",219,0)
PROMPT(DA,BPSFLD,BPSDFLT) ;
"RTN","BPSTEST",220,0)
 ; Prompt for a specific field and set the data
"RTN","BPSTEST",221,0)
 ;
"RTN","BPSTEST",222,0)
 N DIE,DR,DTOUT,X,Y
"RTN","BPSTEST",223,0)
 S DIE="^BPS(9002313.32,",DR=BPSFLD_"//"_BPSDFLT
"RTN","BPSTEST",224,0)
 L +@(DIE_DA_")"):0 I $T D ^DIE L -@(DIE_DA_")") Q
"RTN","BPSTEST",225,0)
 W !?5,"Another user is editing this entry."
"RTN","BPSTEST",226,0)
 Q
"RTN","BPSTEST",227,0)
 ;
"RTN","BPSTEST",228,0)
SETDELAY(BPSTRANS) ;
"RTN","BPSTEST",229,0)
 ; Input
"RTN","BPSTEST",230,0)
 ;    BPSTRANS - Transaction IEN
"RTN","BPSTEST",231,0)
 ; Check the Test Flag in set in BPS SETUP
"RTN","BPSTEST",232,0)
 I '$$CHECK() Q 0
"RTN","BPSTEST",233,0)
 N BPSDELAY,BPSTIEN,BPSTIME
"RTN","BPSTEST",234,0)
 ; Check if the Transaction Number is defined in BPS RESPONSE OVERRIDES
"RTN","BPSTEST",235,0)
 S BPSTIEN=$O(^BPS(9002313.32,"B",BPSTRANS,""))
"RTN","BPSTEST",236,0)
 I BPSTIEN="" Q 0
"RTN","BPSTEST",237,0)
 S BPSDELAY=$$GET1^DIQ(9002313.32,BPSTIEN_",",.07,"I")*60
"RTN","BPSTEST",238,0)
 I BPSDELAY'>0 Q 0
"RTN","BPSTEST",239,0)
 S BPSTIME=$$FMADD^XLFDT($$NOW^XLFDT,,,,BPSDELAY)
"RTN","BPSTEST",240,0)
 I BPSTIME>0 D  Q BPSTIME
"RTN","BPSTEST",241,0)
 . ;schedule a task to run RUNNING^BPSOSRX
"RTN","BPSTEST",242,0)
 . N ZTRTN,ZTDTH,ZTIO,ZTSK
"RTN","BPSTEST",243,0)
 . S ZTRTN="RUNECME^BPSTEST",ZTDESC="BPSTEST: ECME testing tool"
"RTN","BPSTEST",244,0)
 . S ZTDTH=$$FMADD^XLFDT($$NOW^XLFDT,,,,BPSDELAY+10),ZTIO=""
"RTN","BPSTEST",245,0)
 . D ^%ZTLOAD
"RTN","BPSTEST",246,0)
 Q 0
"RTN","BPSTEST",247,0)
 ;
"RTN","BPSTEST",248,0)
RUNECME ;
"RTN","BPSTEST",249,0)
 D RUNNING^BPSOSRX()
"RTN","BPSTEST",250,0)
 Q
"RTN","BPSTEST",251,0)
 ;get the reversal reject from the ^XTMP and set BPSDATA to override data
"RTN","BPSTEST",252,0)
SETREJ(BPSTRANS) ;
"RTN","BPSTEST",253,0)
 N BPSREJ
"RTN","BPSTEST",254,0)
 S BPSREJ=$G(^XTMP("BPSTEST",BPSTRANS))
"RTN","BPSTEST",255,0)
 I BPSREJ="" Q
"RTN","BPSTEST",256,0)
 S BPSDATA(1,511,1)=BPSREJ
"RTN","BPSTEST",257,0)
 S BPSDATA(1,510)=1
"RTN","BPSTEST",258,0)
 Q
"RTN","BPSTEST",259,0)
 ;enter a reversal reject
"RTN","BPSTEST",260,0)
ENREVRJ(BPSTRANS) ;
"RTN","BPSTEST",261,0)
 N BPRJCODE,TMSTAMP
"RTN","BPSTEST",262,0)
 S BPRJCODE=$$PROMPT^BPSSCRU4("Enter a reject code for reversal")
"RTN","BPSTEST",263,0)
 I $P(BPRJCODE,U)="" Q
"RTN","BPSTEST",264,0)
 I $P(BPRJCODE,U)=0 Q
"RTN","BPSTEST",265,0)
 N X,X1,X2
"RTN","BPSTEST",266,0)
 S X1=DT,X2=2 D C^%DTC
"RTN","BPSTEST",267,0)
 S ^XTMP("BPSTEST",0)=X_U_DT_U_"ECME TESTING TOOL, SEE BPSTEST ROUTINE"
"RTN","BPSTEST",268,0)
 S ^XTMP("BPSTEST",BPSTRANS)=$P(BPRJCODE,U)
"RTN","BPSTEST",269,0)
 Q
"RTN","BPSTEST",270,0)
 ;
"RTN","BPSUTIL2")
0^18^B26258660
"RTN","BPSUTIL2",1,0)
BPSUTIL2 ;BHAM ISC/SS - General Utility functions ;08/01/2006
"RTN","BPSUTIL2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8**;JUN 2004;Build 29
"RTN","BPSUTIL2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSUTIL2",4,0)
 ;
"RTN","BPSUTIL2",5,0)
 Q
"RTN","BPSUTIL2",6,0)
 ;
"RTN","BPSUTIL2",7,0)
 ;/**
"RTN","BPSUTIL2",8,0)
 ;Creates a new entry (or node for multiple with .01 field)
"RTN","BPSUTIL2",9,0)
 ;
"RTN","BPSUTIL2",10,0)
 ;BPFILE - file/subfile number
"RTN","BPSUTIL2",11,0)
 ;BPIEN - ien of the parent file entry in which the new subfile entry will be inserted
"RTN","BPSUTIL2",12,0)
 ;BPVAL01 - .01 value for the new entry
"RTN","BPSUTIL2",13,0)
 ;NEWRECNO -(optional) specify IEN if you want specific value
"RTN","BPSUTIL2",14,0)
 ; Note: "" then the system will assign the entry number itself.
"RTN","BPSUTIL2",15,0)
 ;BPFLGS - FLAGS parameter for UPDATE^DIE
"RTN","BPSUTIL2",16,0)
 ;LCKGL - fully specified global reference to lock
"RTN","BPSUTIL2",17,0)
 ;LCKTIME - time out for LOCK, if LOCKTIME=0 then the function will not lock the file 
"RTN","BPSUTIL2",18,0)
 ;BPNEWREC - optional, flag = if 1 then allow to create a new top level record 
"RTN","BPSUTIL2",19,0)
 ;Examples
"RTN","BPSUTIL2",20,0)
 ;top level:
"RTN","BPSUTIL2",21,0)
 ; D INSITEM(366.14,"",IBDATE,"")
"RTN","BPSUTIL2",22,0)
 ;to create with the specific ien
"RTN","BPSUTIL2",23,0)
 ; W $$INSITEM^BPSUTIL2(9002313.77,"",55555555,45555,,,,1)
"RTN","BPSUTIL2",24,0)
 ; 
"RTN","BPSUTIL2",25,0)
 ;1st level multiple:
"RTN","BPSUTIL2",26,0)
 ; subfile number = #366.141
"RTN","BPSUTIL2",27,0)
 ; parent file #366.14 entry number = 345
"RTN","BPSUTIL2",28,0)
 ; D INSITEM(366.141,345,"SUBMIT","")
"RTN","BPSUTIL2",29,0)
 ; to create multiple entry with particular entry number = 23
"RTN","BPSUTIL2",30,0)
 ; D INSITEM(366.141,345,"SUBMIT",23)
"RTN","BPSUTIL2",31,0)
 ;
"RTN","BPSUTIL2",32,0)
 ;2nd level multiple
"RTN","BPSUTIL2",33,0)
 ;parent file #366.14 entry number = 234
"RTN","BPSUTIL2",34,0)
 ;parent multiple entry number = 55
"RTN","BPSUTIL2",35,0)
 ;create multiple entry INSURANCE
"RTN","BPSUTIL2",36,0)
 ; D INSITEM(366.1412,"55,234","INS","")
"RTN","BPSUTIL2",37,0)
 ; results in :
"RTN","BPSUTIL2",38,0)
 ; ^IBCNR(366.14,234,1,55,5,0)=^366.1412PA^1^1
"RTN","BPSUTIL2",39,0)
 ; ^IBCNR(366.14,234,1,55,5,1,0)=INS
"RTN","BPSUTIL2",40,0)
 ; ^IBCNR(366.14,234,1,55,5,"B","INS",1)=
"RTN","BPSUTIL2",41,0)
 ;  (DD node for this multiple =5 ) 
"RTN","BPSUTIL2",42,0)
 ;  
"RTN","BPSUTIL2",43,0)
 ;output :
"RTN","BPSUTIL2",44,0)
 ; positive number - record # created
"RTN","BPSUTIL2",45,0)
 ; <=0 - failure
"RTN","BPSUTIL2",46,0)
 ;  See description above
"RTN","BPSUTIL2",47,0)
INSITEM(BPFILE,BPIEN,BPVAL01,NEWRECNO,BPFLGS,LCKGL,LCKTIME,BPNEWREC) ;*/
"RTN","BPSUTIL2",48,0)
 I ('$G(BPFILE)) Q "0^Invalid parameter"
"RTN","BPSUTIL2",49,0)
 I +$G(BPNEWREC)=0 I $G(NEWRECNO)>0,'$G(BPIEN) Q "0^Invalid parameter"
"RTN","BPSUTIL2",50,0)
 I $G(BPVAL01)="" Q "0^Null"
"RTN","BPSUTIL2",51,0)
 N BPLOCK S BPLOCK=0
"RTN","BPSUTIL2",52,0)
 ;I '$G(BPFILE) Q -1
"RTN","BPSUTIL2",53,0)
 ;I '$G(BPVAL01) Q -1
"RTN","BPSUTIL2",54,0)
 N BPSSI,BPIENS,BPFDA,BPERR
"RTN","BPSUTIL2",55,0)
 I '$G(NEWRECNO) N NEWRECNO S NEWRECNO=$G(NEWRECNO)
"RTN","BPSUTIL2",56,0)
 I BPIEN'="" S BPIENS="+1,"_BPIEN_"," I $L(NEWRECNO)>0 S BPSSI(1)=+NEWRECNO
"RTN","BPSUTIL2",57,0)
 I BPIEN="" S BPIENS="+1," I $L(NEWRECNO)>0 S BPSSI(1)=+NEWRECNO
"RTN","BPSUTIL2",58,0)
 S BPFDA(BPFILE,BPIENS,.01)=BPVAL01
"RTN","BPSUTIL2",59,0)
 I $L($G(LCKGL)) L +@LCKGL:(+$G(LCKTIME)) S BPLOCK=$T I 'BPLOCK Q -2  ;lock failure
"RTN","BPSUTIL2",60,0)
 D UPDATE^DIE($G(BPFLGS),"BPFDA","BPSSI","BPERR")
"RTN","BPSUTIL2",61,0)
 I BPLOCK L -@LCKGL
"RTN","BPSUTIL2",62,0)
 I $D(BPERR) D BMES^XPDUTL($G(BPERR("DIERR",1,"TEXT",1),"Update Error")) Q -1  ;D BMES^XPDUTL(BPERR("DIERR",1,"TEXT",1))
"RTN","BPSUTIL2",63,0)
 Q +$G(BPSSI(1))
"RTN","BPSUTIL2",64,0)
 ;
"RTN","BPSUTIL2",65,0)
 ;fill fields
"RTN","BPSUTIL2",66,0)
 ;Input:
"RTN","BPSUTIL2",67,0)
 ;FILENO file number
"RTN","BPSUTIL2",68,0)
 ;FLDNO field number
"RTN","BPSUTIL2",69,0)
 ;RECIEN ien string 
"RTN","BPSUTIL2",70,0)
 ;NEWVAL new value to file (internal format)
"RTN","BPSUTIL2",71,0)
 ;Output:
"RTN","BPSUTIL2",72,0)
 ;0^ NEWVAL^error if failure
"RTN","BPSUTIL2",73,0)
 ;1^ NEWVAL if success
"RTN","BPSUTIL2",74,0)
FILLFLDS(FILENO,FLDNO,RECIEN,NEWVAL) ;
"RTN","BPSUTIL2",75,0)
 I '$G(FILENO) Q "0^Invalid parameter"
"RTN","BPSUTIL2",76,0)
 I '$G(FLDNO) Q "0^Invalid parameter"
"RTN","BPSUTIL2",77,0)
 I '$G(RECIEN) Q "0^Invalid parameter"
"RTN","BPSUTIL2",78,0)
 I $G(NEWVAL)="" Q "0^Null"
"RTN","BPSUTIL2",79,0)
 N RECIENS,FDA,ERRARR
"RTN","BPSUTIL2",80,0)
 S RECIENS=RECIEN_","
"RTN","BPSUTIL2",81,0)
 S FDA(FILENO,RECIENS,FLDNO)=NEWVAL
"RTN","BPSUTIL2",82,0)
 D FILE^DIE("","FDA","ERRARR")
"RTN","BPSUTIL2",83,0)
 I $D(ERRARR) Q "0^"_NEWVAL_"^"_ERRARR("DIERR",1,"TEXT",1)
"RTN","BPSUTIL2",84,0)
 Q "1^"_NEWVAL
"RTN","BPSUTIL2",85,0)
 ;
"RTN","BPSUTIL2",86,0)
 ;API to return the GROUP INSURANCE PLAN associated with the
"RTN","BPSUTIL2",87,0)
 ;PRIMARY INSURANCE in the BPS TRANSACTION File
"RTN","BPSUTIL2",88,0)
 ;Input:
"RTN","BPSUTIL2",89,0)
 ;BPIEN59 = IEN of entry in BPS TRANSACTION File
"RTN","BPSUTIL2",90,0)
 ;Output:
"RTN","BPSUTIL2",91,0)
 ;IEN of GROUP INSURANCE PLAN file^INSURANCE COMPANY Name
"RTN","BPSUTIL2",92,0)
GETPLN59(BPIEN59) ;
"RTN","BPSUTIL2",93,0)
 N IENS,GRPNM
"RTN","BPSUTIL2",94,0)
 S IENS=+$G(^BPST(BPIEN59,9))_","_BPIEN59_","
"RTN","BPSUTIL2",95,0)
 S GRPNM=$$GET1^DIQ(9002313.59902,IENS,"PLAN ID:INSURANCE COMPANY")
"RTN","BPSUTIL2",96,0)
 Q +$G(^BPST(BPIEN59,10,+$G(^BPST(BPIEN59,9)),0))_"^"_GRPNM
"RTN","BPSUTIL2",97,0)
 ;
"RTN","BPSUTIL2",98,0)
GETPLN77(BPIEN77) ;
"RTN","BPSUTIL2",99,0)
 N BPINSIEN,BPSINSUR,BPINSDAT
"RTN","BPSUTIL2",100,0)
 S BPINSIEN=0
"RTN","BPSUTIL2",101,0)
 ;get the USED FOR THE REQUEST=1 (active) entry in the multiple
"RTN","BPSUTIL2",102,0)
 S BPINSIEN=$O(^BPS(9002313.77,BPIEN77,5,"C",1,BPINSIEN))
"RTN","BPSUTIL2",103,0)
 I +BPINSIEN=0 Q 0
"RTN","BPSUTIL2",104,0)
 ;get BPS IBNSURER DATA pointer
"RTN","BPSUTIL2",105,0)
 S BPSINSUR=+$P($G(^BPS(9002313.77,BPIEN77,5,BPINSIEN,0)),U,3)
"RTN","BPSUTIL2",106,0)
 I BPSINSUR=0 Q 0
"RTN","BPSUTIL2",107,0)
 ;get 0th node of the BPS INSURER DATA
"RTN","BPSUTIL2",108,0)
 S BPINSDAT=$G(^BPS(9002313.78,BPSINSUR,0))
"RTN","BPSUTIL2",109,0)
 I BPINSDAT="" Q 0
"RTN","BPSUTIL2",110,0)
 Q $P(BPINSDAT,U,8)_"^"_$P(BPINSDAT,U,7)
"RTN","BPSUTIL2",111,0)
 ;
"RTN","BPSUTIL2",112,0)
 ;Return the COB (payer sequence) by IEN of the BPS TRANSACTION file
"RTN","BPSUTIL2",113,0)
COB59(BPSIEN59) ;
"RTN","BPSUTIL2",114,0)
 ;try to get it from 9002313.59, if it was not created yet then get it from IEN itself
"RTN","BPSUTIL2",115,0)
 Q $S($P($G(^BPST(BPSIEN59,0)),U,14):$P(^BPST(BPSIEN59,0),U,14),1:$E($P(BPSIEN59,".",2),5,5))
"RTN","BPSUTIL2",116,0)
 ;
"RTN","BPSUTIL2",117,0)
 ;Return the plan's COB (from PATIENT file) by IEN of the BPS TRANSACTION file and entry # 
"RTN","BPSUTIL2",118,0)
PLANCOB(BPSIEN59,BPSENTRY) ;
"RTN","BPSUTIL2",119,0)
 I +$G(BPSENTRY)=0 S BPSENTRY=1 ;the first entry by default
"RTN","BPSUTIL2",120,0)
 Q $P($G(^BPST(BPSIEN59,10,BPSENTRY,3)),U,6)
"RTN","BPSUTIL2",121,0)
 ;
"RTN","BPSUTIL2",122,0)
 ;Return the IEN of BPS TRANSACTION file by IEN of BPS CLAIMS file
"RTN","BPSUTIL2",123,0)
CLAIM59(BPS02) ;
"RTN","BPSUTIL2",124,0)
 Q +$P($G(^BPSC(BPS02,0)),U,8)
"RTN","BPSUTIL2",125,0)
 ;
"RTN","BPSUTIL2",126,0)
 ;Return BPS TRANSACTIONS for associated primary and secondary claims
"RTN","BPSUTIL2",127,0)
ALLCOB59(BP59) ;
"RTN","BPSUTIL2",128,0)
 N BPSP,BPSS,BPRX,BPRXI,BPRXR
"RTN","BPSUTIL2",129,0)
 S BPRX=$$RXREF^BPSSCRU2(BP59),BPRXI=$P(BPRX,U),BPRXR=$P(BPRX,U,2)
"RTN","BPSUTIL2",130,0)
 S BPSP=$$IEN59^BPSOSRX(BPRXI,BPRXR,1),BPSS=$$IEN59^BPSOSRX(BPRXI,BPRXR,2)
"RTN","BPSUTIL2",131,0)
 I '$D(^BPST(BPSP)) S BPSP=""
"RTN","BPSUTIL2",132,0)
 I '$D(^BPST(BPSS)) S BPSS=""
"RTN","BPSUTIL2",133,0)
 Q BPSP_"^"_BPSS
"RTN","BPSUTIL2",134,0)
 ;
"RTN","BPSUTIL2",135,0)
 ;input: BPS59 - ien of the BPS TRANSACTION file
"RTN","BPSUTIL2",136,0)
 ;returns three pieces:
"RTN","BPSUTIL2",137,0)
 ;COB  = Coordination Of Benefit indicator of the insurance as it is stored in (#.2) COB field of the (#.3121) insurance Type multiple of the Patient file (#2) 
"RTN","BPSUTIL2",138,0)
 ; 1- primary, 2 -secondary, 3 -tertiary
"RTN","BPSUTIL2",139,0)
 ;RXCOB =  the payer sequence indicator of the claim which was sent to the payer as a result of this call: 1- primary, 2 -secondary, 3 -tertiary
"RTN","BPSUTIL2",140,0)
 ;INSURANCE = Name of the insurance company that was billed as a result of this call
"RTN","BPSUTIL2",141,0)
CLMINFO(BPS59) ;
"RTN","BPSUTIL2",142,0)
 N RETV
"RTN","BPSUTIL2",143,0)
 S $P(RETV,U,1)=$$PLANCOB(BPS59,1)
"RTN","BPSUTIL2",144,0)
 S $P(RETV,U,2)=$$COB59(BPS59)
"RTN","BPSUTIL2",145,0)
 S $P(RETV,U,3)=$$INSNAME^BPSSCRU6(BPS59)
"RTN","BPSUTIL2",146,0)
 Q RETV
"RTN","BPSUTIL2",147,0)
 ;
"RTN","BPSUTIL2",148,0)
 ;to determine whether the secondary claim is payable 
"RTN","BPSUTIL2",149,0)
 ; BPSRIM59 - ien of PRIMARY claim in the BPS TRANSACTION
"RTN","BPSUTIL2",150,0)
 ;returns
"RTN","BPSUTIL2",151,0)
 ; 0 - the secondary claim doesn't exist
"RTN","BPSUTIL2",152,0)
 ; 0 - the secondary claim exists and it's not payable
"RTN","BPSUTIL2",153,0)
 ; 1 - the secondary claim exists and it's payable
"RTN","BPSUTIL2",154,0)
PAYBLSEC(BPSRIM59) ;
"RTN","BPSUTIL2",155,0)
 N BRXIEN,BFILL,BPSSTAT2,BPZ
"RTN","BPSUTIL2",156,0)
 S BPZ=$$RXREF^BPSSCRU2(BPSRIM59)
"RTN","BPSUTIL2",157,0)
 S BRXIEN=+BPZ
"RTN","BPSUTIL2",158,0)
 S BFILL=+$P(BPZ,U,2)
"RTN","BPSUTIL2",159,0)
 S BPSSTAT2=$P($$STATUS^BPSOSRX(BRXIEN,BFILL,0,,2),U,1)
"RTN","BPSUTIL2",160,0)
 ; check if the payer IS going to PAY according to the last response
"RTN","BPSUTIL2",161,0)
 Q $$PAYABLE^BPSOSRX5(BPSSTAT2)
"RTN","BPSUTIL2",162,0)
 ;
"RTN","BPSUTIL2",163,0)
 ;to determine whether the primary claim is payable 
"RTN","BPSUTIL2",164,0)
 ; BPSSEC59 - ien of SECONDARY claim in the BPS TRANSACTION
"RTN","BPSUTIL2",165,0)
 ;returns
"RTN","BPSUTIL2",166,0)
 ; 0 - the primary claim doesn't exist
"RTN","BPSUTIL2",167,0)
 ; 0 - the primary claim exists and it's not payable
"RTN","BPSUTIL2",168,0)
 ; ien of 399 - the primary claim exists
"RTN","BPSUTIL2",169,0)
PAYBLPRI(BPSSEC59) ;
"RTN","BPSUTIL2",170,0)
 N BRXIEN,BFILL,BPSSTAT1,BPZ,BPZ1,BPSARR
"RTN","BPSUTIL2",171,0)
 S BPZ=$$RXREF^BPSSCRU2(BPSSEC59)
"RTN","BPSUTIL2",172,0)
 S BRXIEN=+BPZ
"RTN","BPSUTIL2",173,0)
 S BFILL=+$P(BPZ,U,2)
"RTN","BPSUTIL2",174,0)
 S BPSSTAT1=$P($$STATUS^BPSOSRX(BRXIEN,BFILL,0,,1),U,1)
"RTN","BPSUTIL2",175,0)
 ; check if the payer IS going to PAY according to the last response
"RTN","BPSUTIL2",176,0)
 I +$$PAYABLE^BPSOSRX5(BPSSTAT1)=0 Q 0
"RTN","BPSUTIL2",177,0)
 S BPZ=$$RXBILL^IBNCPUT3(BRXIEN,BFILL,"P",$P($G(^BPST(BPSSEC59,12)),U,2),.BPSARR)
"RTN","BPSUTIL2",178,0)
 I +$P(BPZ,U,2)>0 Q +$P(BPZ,U,2)       ; latest bill in AR active status
"RTN","BPSUTIL2",179,0)
 S BPZ1=+$O(BPSARR(999999999),-1)      ; latest bill in any status
"RTN","BPSUTIL2",180,0)
 I BPZ1>0 Q BPZ1
"RTN","BPSUTIL2",181,0)
 Q 0
"RTN","BPSUTIL2",182,0)
 ;
"RTN","BPSUTIL2",183,0)
 ;BPSUTIL2
"RTN","BPSWRKLS")
0^34^B31684663
"RTN","BPSWRKLS",1,0)
BPSWRKLS ;ALB/SS - SEND CLAIMS TO PHARMACY WORKLIST ;12/26/07
"RTN","BPSWRKLS",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**7,8**;JUN 2004;Build 29
"RTN","BPSWRKLS",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","BPSWRKLS",4,0)
 ;
"RTN","BPSWRKLS",5,0)
 ; -- main entry point for BPS PRTCL USRSCR PHARM WRKLST protocol (ECME User Screen option)
"RTN","BPSWRKLS",6,0)
 ;
"RTN","BPSWRKLS",7,0)
EN ;
"RTN","BPSWRKLS",8,0)
 ;entry point for WRK Send to Worklist menu option of the main User Screen
"RTN","BPSWRKLS",9,0)
 N BPRET,BPSARR59,BPSTATS,BPQ,BP59,BPCNT,BP59SENT,BPCOMZ,BPZ,BPUPD
"RTN","BPSWRKLS",10,0)
 S BPCNT=0
"RTN","BPSWRKLS",11,0)
 I '$D(@(VALMAR)) Q
"RTN","BPSWRKLS",12,0)
 D FULL^VALM1
"RTN","BPSWRKLS",13,0)
 I '$$CHCKKEY() D  Q
"RTN","BPSWRKLS",14,0)
 . W !,"The user doesn't have enough rights to perform this action"
"RTN","BPSWRKLS",15,0)
 . D QUIT(1)
"RTN","BPSWRKLS",16,0)
 ;
"RTN","BPSWRKLS",17,0)
 S BPQ=0
"RTN","BPSWRKLS",18,0)
 F  D  Q:BPQ>0
"RTN","BPSWRKLS",19,0)
 . K BP59SENT,BPSARR59
"RTN","BPSWRKLS",20,0)
 . S BPZ=$$SELCLMS(.BPSARR59,VALMAR)
"RTN","BPSWRKLS",21,0)
 . I BPZ=0 S BPQ=1 Q  ;nothing selected or up-arrow entered
"RTN","BPSWRKLS",22,0)
 . ; check selected claims
"RTN","BPSWRKLS",23,0)
 . S BPCNT=$$CHCKSEL(.BPSARR59,.BP59SENT)
"RTN","BPSWRKLS",24,0)
 . I BPCNT>0 S BPQ=1 ; if at least one can be processed then do not prompt the user again (BPQ>1)
"RTN","BPSWRKLS",25,0)
 ;
"RTN","BPSWRKLS",26,0)
 I BPCNT=0 D QUIT() Q
"RTN","BPSWRKLS",27,0)
 ;add comments
"RTN","BPSWRKLS",28,0)
 S BPCOMZ=$$COMMENT^BPSSCRCL("Comment for Pharmacy ",40)
"RTN","BPSWRKLS",29,0)
 I BPCOMZ="^" D QUIT() Q
"RTN","BPSWRKLS",30,0)
 I $L(BPCOMZ)>0 S BPCOMZ="Sent to Pharmacy:"_BPCOMZ
"RTN","BPSWRKLS",31,0)
 E  S BPCOMZ="Sent to Pharmacy Worklist"
"RTN","BPSWRKLS",32,0)
 W !!,"Eligible claim(s) will be sent to the Pharmacy Worklist...",!
"RTN","BPSWRKLS",33,0)
 S BPQ=$$YESNO^BPSSCRRS("Are you sure?(Y/N)")
"RTN","BPSWRKLS",34,0)
 I BPQ=0 D QUIT() Q
"RTN","BPSWRKLS",35,0)
 ;send to Pharmacy
"RTN","BPSWRKLS",36,0)
 S BP59=0,BPUPD=0
"RTN","BPSWRKLS",37,0)
 F  S BP59=$O(BP59SENT(BP59)) Q:+BP59=0  S BPUPD=$$TOPHARM(BP59,BPCOMZ,.BPSARR59)
"RTN","BPSWRKLS",38,0)
 D QUIT(1)
"RTN","BPSWRKLS",39,0)
 D:BPUPD=1 REDRAW^BPSSCRUD("Updating screen...")
"RTN","BPSWRKLS",40,0)
 Q
"RTN","BPSWRKLS",41,0)
 ;send the claim to Pharmacy Worklist
"RTN","BPSWRKLS",42,0)
 ;BP59 - pointer to the BPS TRANSACTION file
"RTN","BPSWRKLS",43,0)
 ;BPCOMM - comment
"RTN","BPSWRKLS",44,0)
 ;BPSARR59 - array with selected claims as BPS TRANSACTION pointers
"RTN","BPSWRKLS",45,0)
 ;returns:
"RTN","BPSWRKLS",46,0)
 ;1- has been successfully sent
"RTN","BPSWRKLS",47,0)
 ;0- failed to send
"RTN","BPSWRKLS",48,0)
TOPHARM(BP59,BPCOMM,BPSARR59) ;
"RTN","BPSWRKLS",49,0)
 N BPRXIEN,BPRXFIL,BPRET,BPX
"RTN","BPSWRKLS",50,0)
 S BPX=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSWRKLS",51,0)
 S BPRXIEN=+BPX
"RTN","BPSWRKLS",52,0)
 S BPRXFIL=$P(BPX,U,2)
"RTN","BPSWRKLS",53,0)
 ;use Pharmacy API to send the claim and the comment IA #5063
"RTN","BPSWRKLS",54,0)
 S BPRET=$$WRKLST^PSOREJU4(BPRXIEN,BPRXFIL,BPCOMM,DUZ,DT,1,$$COB59^BPSUTIL2(BP59))
"RTN","BPSWRKLS",55,0)
 W !,$G(@VALMAR@(+$G(BPSARR59(BP59)),0))
"RTN","BPSWRKLS",56,0)
 I +BPRET=2 W !,"was ALREADY sent to the Pharmacy Work List." Q 0
"RTN","BPSWRKLS",57,0)
 I +BPRET=0 W !,"cannot be sent: ",$P(BPRET,U,2) Q 0
"RTN","BPSWRKLS",58,0)
 ;add the comment to BPS TRANSACTION
"RTN","BPSWRKLS",59,0)
 I $$ADDCOMM^BPSBUTL(BPRXIEN,BPRXFIL,BPCOMM) ;COB
"RTN","BPSWRKLS",60,0)
 W !,"has been sent to the Pharmacy Work List."
"RTN","BPSWRKLS",61,0)
 Q 1
"RTN","BPSWRKLS",62,0)
 ;check selected claims 
"RTN","BPSWRKLS",63,0)
 ;BPSARR59 - array with the claims selected by the user
"RTN","BPSWRKLS",64,0)
 ;BP59SENT - array with the claims that will be sent to the pharmacy
"RTN","BPSWRKLS",65,0)
 ;output:
"RTN","BPSWRKLS",66,0)
 ;the number of claims that will be sent to the Pharmacy Worklist
"RTN","BPSWRKLS",67,0)
CHCKSEL(BPSARR59,BP59SENT) ;
"RTN","BPSWRKLS",68,0)
 N BP59,BPCNT,BPREJS,BPALLREJ,BPNOTSNT,BPSDIV59
"RTN","BPSWRKLS",69,0)
 S BP59=0,BPCNT=0
"RTN","BPSWRKLS",70,0)
 ;check each selected claim
"RTN","BPSWRKLS",71,0)
 S BPNOTSNT=0
"RTN","BPSWRKLS",72,0)
 W !,"You've chosen to send to Pharmacy Work List the following:"
"RTN","BPSWRKLS",73,0)
 F  S BP59=$O(BPSARR59(BP59)) Q:+BP59=0  D
"RTN","BPSWRKLS",74,0)
 . W !,$G(@VALMAR@(+$G(BPSARR59(BP59)),0))
"RTN","BPSWRKLS",75,0)
 . I $$CLOSED02^BPSSCR03($P($G(^BPST(BP59,0)),U,4)) W !,"is closed and cannot be sent to the Pharmacy Work List." Q
"RTN","BPSWRKLS",76,0)
 . ; check status - only rejected cannot be sent to the Pharmacy worklist
"RTN","BPSWRKLS",77,0)
 . S BPSTATS=$P($$CLAIMST^BPSSCRU3(BP59),U)
"RTN","BPSWRKLS",78,0)
 . I BPSTATS'="E REJECTED" W !,"was not rejected and cannot be sent to the Pharmacy Work List." Q
"RTN","BPSWRKLS",79,0)
 . ;check if the claim has an eligible reject code(s)
"RTN","BPSWRKLS",80,0)
 . I $$INWRKLST(BP59)=1 W !,"was ALREADY sent to the Pharmacy Work List." Q
"RTN","BPSWRKLS",81,0)
 . ;check Pharmacy settings - if all rejects can be sent
"RTN","BPSWRKLS",82,0)
 . ;IA 5063
"RTN","BPSWRKLS",83,0)
 . S BPSDIV59=$P($G(^BPST(BP59,1)),U,4)
"RTN","BPSWRKLS",84,0)
 . D AUTOREJ^PSOREJU4(.BPREJS,BPSDIV59)
"RTN","BPSWRKLS",85,0)
 . S BPALLREJ=+$G(BPREJS(0)) ;if 1 then claims with All kind of reject codes can be sent to Pharmacy Worklist
"RTN","BPSWRKLS",86,0)
 . I BPALLREJ=0 I $$CHCKREJ(BP59,BPSDIV59)=0 W !,"doesn't have eligible reject code to be sent to the Pharmacy Work List." Q
"RTN","BPSWRKLS",87,0)
 . S BPCNT=BPCNT+1 ;count eligible claims
"RTN","BPSWRKLS",88,0)
 . S BP59SENT(BP59)="" ;put them in the output array
"RTN","BPSWRKLS",89,0)
 . S BP59SENT=BPCNT
"RTN","BPSWRKLS",90,0)
 Q BPCNT
"RTN","BPSWRKLS",91,0)
 ;
"RTN","BPSWRKLS",92,0)
NOTSNDMS ;
"RTN","BPSWRKLS",93,0)
 W "cannot be sent - "
"RTN","BPSWRKLS",94,0)
 Q
"RTN","BPSWRKLS",95,0)
 ;
"RTN","BPSWRKLS",96,0)
 ;BPSARR59 (by reference)- to store BPS TRANSACTION pointers selected by the user
"RTN","BPSWRKLS",97,0)
 ;BPTMP - temporary global (like VALMAR)
"RTN","BPSWRKLS",98,0)
SELCLMS(BPSARR59,BPTMP) ;
"RTN","BPSWRKLS",99,0)
 W !!,"Enter the line numbers for the claim(s) to send to the Pharmacy Worklist."
"RTN","BPSWRKLS",100,0)
 S BPRET=$$ASKLINES^BPSSCRU4("Select item(s)","C",.BPSARR59,BPTMP)
"RTN","BPSWRKLS",101,0)
 I BPRET="^" Q 0
"RTN","BPSWRKLS",102,0)
 Q 1
"RTN","BPSWRKLS",103,0)
 ;
"RTN","BPSWRKLS",104,0)
CHCKKEY() ;
"RTN","BPSWRKLS",105,0)
 ;check if the user does have BPS MANAGER key
"RTN","BPSWRKLS",106,0)
 I $D(^XUSEC("BPS MANAGER",DUZ)) Q 1
"RTN","BPSWRKLS",107,0)
 Q 0
"RTN","BPSWRKLS",108,0)
 ;BPPAUSE 1- make pause
"RTN","BPSWRKLS",109,0)
QUIT(BPPAUSE) ;
"RTN","BPSWRKLS",110,0)
 I $G(BPPAUSE)>0 D
"RTN","BPSWRKLS",111,0)
 . I $$PAUSE^BPSSCRRV()
"RTN","BPSWRKLS",112,0)
 S VALMBCK="R"
"RTN","BPSWRKLS",113,0)
 Q
"RTN","BPSWRKLS",114,0)
 ;check if the claim can be sent to the pharmacy because its reject code is eligible for this
"RTN","BPSWRKLS",115,0)
 ;BP59 - pointer to the BPS TRANSACTION file
"RTN","BPSWRKLS",116,0)
 ;BPSDIV59 - pointer to file #59 (PHARMACY DIVISION)
"RTN","BPSWRKLS",117,0)
 ;return value:
"RTN","BPSWRKLS",118,0)
 ;1- can be sent
"RTN","BPSWRKLS",119,0)
 ;0- cannot be sent
"RTN","BPSWRKLS",120,0)
CHCKREJ(BP59,BPSDIV59) ;
"RTN","BPSWRKLS",121,0)
 N BPREJS,BPRJCODE,BPRJS,BPFLG
"RTN","BPSWRKLS",122,0)
 ;get reject codes for the claim
"RTN","BPSWRKLS",123,0)
 D REJCODES^BPSSCRU3(BP59,.BPREJS) ;
"RTN","BPSWRKLS",124,0)
 ;if no reject codes then return 0
"RTN","BPSWRKLS",125,0)
 I $O(BPREJS(""))="" Q 0
"RTN","BPSWRKLS",126,0)
 D CONVERT(.BPREJS,.BPRJS)
"RTN","BPSWRKLS",127,0)
 ;call Pharmacy API to read site parameters and check if the claim with these reject codes can be sent to the Pharmacy Worklist
"RTN","BPSWRKLS",128,0)
 ;IA 5063
"RTN","BPSWRKLS",129,0)
 D AUTOREJ^PSOREJU4(.BPRJS,BPSDIV59)
"RTN","BPSWRKLS",130,0)
 ;check result
"RTN","BPSWRKLS",131,0)
 I $G(BPRJS(0))=1 Q 1  ;any reject can be sent
"RTN","BPSWRKLS",132,0)
 S BPRJCODE="",BPFLG=0
"RTN","BPSWRKLS",133,0)
 F  S BPRJCODE=$O(BPRJS(1,BPRJCODE)) Q:BPRJCODE=""  I BPRJS(1,BPRJCODE)=1 S BPFLG=1 Q
"RTN","BPSWRKLS",134,0)
 ;return 1 if the claim has at least one reject code that matches site parameter reject codes
"RTN","BPSWRKLS",135,0)
 ;return 0 if not
"RTN","BPSWRKLS",136,0)
 Q BPFLG
"RTN","BPSWRKLS",137,0)
 ;
"RTN","BPSWRKLS",138,0)
 ;check if the claim is already in the Pharmacy Worklist
"RTN","BPSWRKLS",139,0)
 ;BP59 - pointer to the BPS TRANSACTION file
"RTN","BPSWRKLS",140,0)
 ;return: 
"RTN","BPSWRKLS",141,0)
 ;1 - in list
"RTN","BPSWRKLS",142,0)
 ;0 - not in list
"RTN","BPSWRKLS",143,0)
INWRKLST(BP59) ;
"RTN","BPSWRKLS",144,0)
 N BPRXIEN,BPRXFIL,BPX
"RTN","BPSWRKLS",145,0)
 S BPX=$$RXREF^BPSSCRU2(BP59)
"RTN","BPSWRKLS",146,0)
 S BPRXIEN=+BPX
"RTN","BPSWRKLS",147,0)
 S BPRXFIL=$P(BPX,U,2)
"RTN","BPSWRKLS",148,0)
 ;IA #5063
"RTN","BPSWRKLS",149,0)
 Q $$INLIST^PSOREJU4(BPRXIEN,BPRXFIL,$$COB59^BPSUTIL2(BP59))
"RTN","BPSWRKLS",150,0)
 ;
"RTN","BPSWRKLS",151,0)
 ;Converts external values of the BPS NCPDP REJECT CODES file #9002313.93
"RTN","BPSWRKLS",152,0)
 ;stored in the local array BPSARRJ1 to IENs and save them in the local 
"RTN","BPSWRKLS",153,0)
 ;array BPSARRJ2 under "1" subscript - in the form suitable for the AUTOREJ^PSOREJU4
"RTN","BPSWRKLS",154,0)
CONVERT(BPSARRJ1,BPSARRJ2) ;
"RTN","BPSWRKLS",155,0)
 N BPREJ1,BPREJ2
"RTN","BPSWRKLS",156,0)
 S BPREJ1=""
"RTN","BPSWRKLS",157,0)
 F  S BPREJ1=$O(BPSARRJ1(BPREJ1)) Q:BPREJ1=""  D
"RTN","BPSWRKLS",158,0)
 . S BPREJ2=+$O(^BPSF(9002313.93,"B",BPREJ1,0))
"RTN","BPSWRKLS",159,0)
 . I BPREJ2>0 S BPSARRJ2(1,BPREJ2)=""
"RTN","BPSWRKLS",160,0)
 Q
"RTN","BPSWRKLS",161,0)
 ;send the rejected claims with 79 and 88 codes to Pharmacy Worklist 
"RTN","BPSWRKLS",162,0)
 ;Input: 
"RTN","BPSWRKLS",163,0)
 ; BPRXI - RX ien
"RTN","BPSWRKLS",164,0)
 ; BPRXR - refill
"RTN","BPSWRKLS",165,0)
 ; BPIEN59 - ien of BPS TRANSACTION file
"RTN","BPSWRKLS",166,0)
 ; BPPAYSEQ - payer sequence
"RTN","BPSWRKLS",167,0)
 ;Returns: 
"RTN","BPSWRKLS",168,0)
 ; 1 sent succesfully
"RTN","BPSWRKLS",169,0)
 ; 2 was ALREADY sent to the Pharmacy Work List
"RTN","BPSWRKLS",170,0)
 ; 0 cannot be sent
"RTN","BPSWRKLS",171,0)
SENDREJ(BPRXI,BPRXR,BPIEN59,BPPAYSEQ) ;
"RTN","BPSWRKLS",172,0)
 N BPZ,BPALLREJ,BPREJ,BPRET
"RTN","BPSWRKLS",173,0)
 S BPRET=0
"RTN","BPSWRKLS",174,0)
 D DUR1^BPSNCPD3(BPRXI,BPRXR,.BPREJ,"",BPPAYSEQ)
"RTN","BPSWRKLS",175,0)
 S BPZ=","_BPREJ(BPPAYSEQ,"REJ CODE LST")_","
"RTN","BPSWRKLS",176,0)
 I BPZ[",79,"!(BPZ[",88,") S BPRET=$$WRKLST^PSOREJU4(BPRXI,BPRXR,"Sent by ECME engine",DUZ,DT,1,BPPAYSEQ)
"RTN","BPSWRKLS",177,0)
 Q +BPRET
"RTN","BPSWRKLS",178,0)
 ;
"RTN","BPSWRKLS",179,0)
 ;BPSWRKLS
"UP",9002313.02,9002313.0401,-2)
9002313.02^400
"UP",9002313.02,9002313.0401,-1)
9002313.0201^337
"UP",9002313.02,9002313.0401,0)
9002313.0401
"UP",9002313.57,9002313.5714,-1)
9002313.57^14
"UP",9002313.57,9002313.5714,0)
9002313.5714
"UP",9002313.57,9002313.57141,-2)
9002313.57^14
"UP",9002313.57,9002313.57141,-1)
9002313.5714^1
"UP",9002313.57,9002313.57141,0)
9002313.57141
"UP",9002313.57,9002313.57142,-2)
9002313.57^14
"UP",9002313.57,9002313.57142,-1)
9002313.5714^2
"UP",9002313.57,9002313.57142,0)
9002313.57142
"UP",9002313.57,9002313.57902,-1)
9002313.57^10
"UP",9002313.57,9002313.57902,0)
9002313.57902
"UP",9002313.59,9002313.5914,-1)
9002313.59^14
"UP",9002313.59,9002313.5914,0)
9002313.5914
"UP",9002313.59,9002313.59141,-2)
9002313.59^14
"UP",9002313.59,9002313.59141,-1)
9002313.5914^1
"UP",9002313.59,9002313.59141,0)
9002313.59141
"UP",9002313.59,9002313.59142,-2)
9002313.59^14
"UP",9002313.59,9002313.59142,-1)
9002313.5914^2
"UP",9002313.59,9002313.59142,0)
9002313.59142
"UP",9002313.59,9002313.59902,-1)
9002313.59^10
"UP",9002313.59,9002313.59902,0)
9002313.59902
"UP",9002313.77,9002313.778,-1)
9002313.77^8
"UP",9002313.77,9002313.778,0)
9002313.778
"UP",9002313.77,9002313.7781,-2)
9002313.77^8
"UP",9002313.77,9002313.7781,-1)
9002313.778^1
"UP",9002313.77,9002313.7781,0)
9002313.7781
"UP",9002313.77,9002313.7782,-2)
9002313.77^8
"UP",9002313.77,9002313.7782,-1)
9002313.778^2
"UP",9002313.77,9002313.7782,0)
9002313.7782
"VER")
8.0^22.0
"^DD",9002313.02,9002313.02,.08,0)
TRANSACTION^P9002313.59'^BPST(^0;8^Q
"^DD",9002313.02,9002313.02,.08,3)
Enter the transaction for the claim.
"^DD",9002313.02,9002313.02,.08,21,0)
^.001^1^1^3081229^^^
"^DD",9002313.02,9002313.02,.08,21,1,0)
This is the ECME transaction that generates the claim.
"^DD",9002313.02,9002313.02,.08,"DT")
3081229
"^DD",9002313.02,9002313.0401,443,0)
OTHER PAYER DATE^FO^^0;5^K:$L(X)>10!($L(X)<10) X
"^DD",9002313.02,9002313.0401,443,2)
S Y(0)=Y S Y=$$FM3EXT^BPSOSU1($E(Y,3,10))
"^DD",9002313.02,9002313.0401,443,2.1)
S Y=$$FM3EXT^BPSOSU1($E(Y,3,10))
"^DD",9002313.02,9002313.0401,443,3)
Answer must be 10 characters in length
"^DD",9002313.02,9002313.0401,443,21,0)
^^2^2^3080613^^
"^DD",9002313.02,9002313.0401,443,21,1,0)
Payment or denial date of the claim submitted to the other payer. Used 
"^DD",9002313.02,9002313.0401,443,21,2,0)
for coordination of benefits.
"^DD",9002313.02,9002313.0401,443,23,0)
^^11^11^3080613^
"^DD",9002313.02,9002313.0401,443,23,1,0)
Format=CCYYMMDD
"^DD",9002313.02,9002313.0401,443,23,2,0)
 
"^DD",9002313.02,9002313.0401,443,23,3,0)
CC=Century
"^DD",9002313.02,9002313.0401,443,23,4,0)
YY=Year
"^DD",9002313.02,9002313.0401,443,23,5,0)
MM=Month
"^DD",9002313.02,9002313.0401,443,23,6,0)
DD=Day
"^DD",9002313.02,9002313.0401,443,23,7,0)
 
"^DD",9002313.02,9002313.0401,443,23,8,0)
Examples: If the other payer denial date was August 1,1999, this field 
"^DD",9002313.02,9002313.0401,443,23,9,0)
would reflect: 19990801.
"^DD",9002313.02,9002313.0401,443,23,10,0)
 
"^DD",9002313.02,9002313.0401,443,23,11,0)
REQUEST COORDINATION OF BENEFITS/OTHER PAYMENT SEGMENT
"^DD",9002313.02,9002313.0401,443,"DT")
3090309
"^DD",9002313.57,9002313.57,1204,0)
COB OTHER PAYMENTS COUNT^NJ1,0^^12;4^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.57,9002313.57,1204,3)
Enter a number between 0 and 9 for a count of other payment occurrences.
"^DD",9002313.57,9002313.57,1204,21,0)
^^4^4^3100617^
"^DD",9002313.57,9002313.57,1204,21,1,0)
NCPDP field 337-4C - Coordination of Benefits/Other Payments Count
"^DD",9002313.57,9002313.57,1204,21,2,0)
 
"^DD",9002313.57,9002313.57,1204,21,3,0)
This value corresponds to the number of multiple entries in the #1400
"^DD",9002313.57,9002313.57,1204,21,4,0)
multiple field - COB OTHER PAYERS.
"^DD",9002313.57,9002313.57,1204,"DT")
3100617
"^DD",9002313.57,9002313.57,1205,0)
OTHER COVERAGE CODE^S^00:NOT SPECIFIED;01:NO OTH COVERAGE;02:PYMT COLLECT/OTH PAYER;03:CLAIM NOT COVER/OTH PAYER;04:PYMT NOT COLLECT/OTH PAYER;05:PLAN DENIAL;06:NONPARTICIPAT PROV/OTH PAYER;07:OTH COVER NOT EFFECT ON DOS;08:COPAY BILLING;^12;5^Q
"^DD",9002313.57,9002313.57,1205,3)
Select the Other Coverage Code.
"^DD",9002313.57,9002313.57,1205,21,0)
^^2^2^3100617^
"^DD",9002313.57,9002313.57,1205,21,1,0)
NCPDP field 308-C8 - code indicating whether or not the patient
"^DD",9002313.57,9002313.57,1205,21,2,0)
has other insurance coverage.
"^DD",9002313.57,9002313.57,1205,"DT")
3100617
"^DD",9002313.57,9002313.57,1400,0)
COB OTHER PAYERS^9002313.5714A^^14;0
"^DD",9002313.57,9002313.57,1400,21,0)
^^7^7^3100617^
"^DD",9002313.57,9002313.57,1400,21,1,0)
This multiple structure stores information about each of the other payers
"^DD",9002313.57,9002313.57,1400,21,2,0)
involved in the payment or rejection of the claim.
"^DD",9002313.57,9002313.57,1400,21,3,0)
 
"^DD",9002313.57,9002313.57,1400,21,4,0)
NCPDP has a maximum of 9 occurrences here with a recommendation of less
"^DD",9002313.57,9002313.57,1400,21,5,0)
than or equal to 3 occurrences.  However, VA only stores data for at most
"^DD",9002313.57,9002313.57,1400,21,6,0)
3 insurance policies for any given claim.  So at most there will only be
"^DD",9002313.57,9002313.57,1400,21,7,0)
2 occurrences of this other payer multiple.
"^DD",9002313.57,9002313.57,1400,"DT")
3100617
"^DD",9002313.57,9002313.5714,0)
COB OTHER PAYERS SUB-FIELD^^2^9
"^DD",9002313.57,9002313.5714,0,"DT")
3100617
"^DD",9002313.57,9002313.5714,0,"IX","B",9002313.5714,.01)

"^DD",9002313.57,9002313.5714,0,"NM","COB OTHER PAYERS")

"^DD",9002313.57,9002313.5714,0,"UP")
9002313.57
"^DD",9002313.57,9002313.5714,.01,0)
OTHER PAYER COUNTER^NJ1,0^^0;1^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.57,9002313.5714,.01,1,0)
^.1
"^DD",9002313.57,9002313.5714,.01,1,1,0)
9002313.5714^B
"^DD",9002313.57,9002313.5714,.01,1,1,1)
S ^BPSTL(DA(1),14,"B",$E(X,1,30),DA)=""
"^DD",9002313.57,9002313.5714,.01,1,1,2)
K ^BPSTL(DA(1),14,"B",$E(X,1,30),DA)
"^DD",9002313.57,9002313.5714,.01,3)
Type a number between 0 and 9, 0 decimal digits.
"^DD",9002313.57,9002313.5714,.01,21,0)
^^1^1^3100617^
"^DD",9002313.57,9002313.5714,.01,21,1,0)
This is a multiple counter field to store the count of the other payers.
"^DD",9002313.57,9002313.5714,.01,"DT")
3100617
"^DD",9002313.57,9002313.5714,.02,0)
OTHER PAYER COVERAGE TYPE^S^01:PRIMARY;02:SECONDARY;03:TERTIARY;98:COUPON;99:COMPOSITE;^0;2^Q
"^DD",9002313.57,9002313.5714,.02,3)
Select other payer coverage type.
"^DD",9002313.57,9002313.5714,.02,21,0)
^^1^1^3100617^
"^DD",9002313.57,9002313.5714,.02,21,1,0)
NCPDP field 338-5C - Code identifying the type of 'Other Payer ID'
"^DD",9002313.57,9002313.5714,.02,"DT")
3100617
"^DD",9002313.57,9002313.5714,.03,0)
OTHER PAYER ID QUALIFIER^S^01:NATIONAL PAYER ID;02:HEALTH INDUSTRY NUMBER (HIN);03:BANK INFORMATION NUMBER (BIN);04:NAT. ASSOC. OF INS. COM.(NAIC);09:COUPON;99:OTHER;^0;3^Q
"^DD",9002313.57,9002313.5714,.03,3)
Select Other Payer ID Qualifier.
"^DD",9002313.57,9002313.5714,.03,21,0)
^^1^1^3100617^
"^DD",9002313.57,9002313.5714,.03,21,1,0)
NCPDP field 339-6C - Code qualifying the 'Other Payer ID' (340-7C).
"^DD",9002313.57,9002313.5714,.03,"DT")
3100617
"^DD",9002313.57,9002313.5714,.04,0)
OTHER PAYER ID^F^^0;4^K:$L(X)>10!($L(X)<1) X
"^DD",9002313.57,9002313.5714,.04,3)
Enter Other Payer ID (1-10 characters).
"^DD",9002313.57,9002313.5714,.04,21,0)
^^1^1^3100617^
"^DD",9002313.57,9002313.5714,.04,21,1,0)
NCPDP field 340-7C - ID assigned to the payer.
"^DD",9002313.57,9002313.5714,.04,"DT")
3100617
"^DD",9002313.57,9002313.5714,.05,0)
OTHER PAYER DATE^D^^0;5^S %DT="EX" D ^%DT S X=Y K:X<1 X
"^DD",9002313.57,9002313.5714,.05,3)
Enter the payment/denial date of the claim submitted to the other payer.
"^DD",9002313.57,9002313.5714,.05,21,0)
^^2^2^3100617^
"^DD",9002313.57,9002313.5714,.05,21,1,0)
NCPDP field 443-E8 - Payment or denial date of the claim submitted
"^DD",9002313.57,9002313.5714,.05,21,2,0)
to the other payer. Used for coordination of benefits.
"^DD",9002313.57,9002313.5714,.05,"DT")
3100617
"^DD",9002313.57,9002313.5714,.06,0)
OTHER PAYER AMOUNT PAID COUNT^NJ1,0^^0;6^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.57,9002313.5714,.06,3)
Enter the count (0-9) of the payer amount paid occurrences.
"^DD",9002313.57,9002313.5714,.06,21,0)
^^1^1^3100617^
"^DD",9002313.57,9002313.5714,.06,21,1,0)
NCPDP field 341-HB - Count of the payer amount paid occurrences.
"^DD",9002313.57,9002313.5714,.06,"DT")
3100617
"^DD",9002313.57,9002313.5714,.07,0)
OTHER PAYER REJECT COUNT^NJ2,0^^0;7^K:+X'=X!(X>20)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.57,9002313.5714,.07,3)
Enter the count (0-20) of the other payer reject code occurrences.
"^DD",9002313.57,9002313.5714,.07,21,0)
^^1^1^3100617^
"^DD",9002313.57,9002313.5714,.07,21,1,0)
NCPDP field 471-5E - Count of 'Other Payer Reject Code' occurrences.
"^DD",9002313.57,9002313.5714,.07,"DT")
3100617
"^DD",9002313.57,9002313.5714,1,0)
OTHER PAYER AMT PAID MULTIPLE^9002313.57141A^^1;0
"^DD",9002313.57,9002313.5714,1,21,0)
^^9^9^3100617^
"^DD",9002313.57,9002313.5714,1,21,1,0)
This multiple stores the NCPDP fields:
"^DD",9002313.57,9002313.5714,1,21,2,0)
 
"^DD",9002313.57,9002313.5714,1,21,3,0)
    431-DV - Other Payer Amount Paid
"^DD",9002313.57,9002313.5714,1,21,4,0)
    342-HC - Other Payer Amount Paid Qualifier
"^DD",9002313.57,9002313.5714,1,21,5,0)
 
"^DD",9002313.57,9002313.5714,1,21,6,0)
Up to 9 occurrences are allowed by the NCPDP standard.  This limit is
"^DD",9002313.57,9002313.5714,1,21,7,0)
dictated by the NCPDP standard and enforced within the ECME claim
"^DD",9002313.57,9002313.5714,1,21,8,0)
building process (i.e. the ECME application software).  There are no such
"^DD",9002313.57,9002313.5714,1,21,9,0)
limits built into this data dictionary.
"^DD",9002313.57,9002313.5714,1,"DT")
3100617
"^DD",9002313.57,9002313.5714,2,0)
OTHER PAYER REJECT MULTIPLE^9002313.57142A^^2;0
"^DD",9002313.57,9002313.5714,2,21,0)
^^8^8^3100617^
"^DD",9002313.57,9002313.5714,2,21,1,0)
This multiple stores the NCPDP field:
"^DD",9002313.57,9002313.5714,2,21,2,0)
 
"^DD",9002313.57,9002313.5714,2,21,3,0)
    NCPDP field 472-6E - Other Payer Reject Code
"^DD",9002313.57,9002313.5714,2,21,4,0)
 
"^DD",9002313.57,9002313.5714,2,21,5,0)
Up to 20 occurrences are allowed by the NCPDP standard.  This limit is
"^DD",9002313.57,9002313.5714,2,21,6,0)
dictated by the NCPDP standard and enforced within the ECME claim building
"^DD",9002313.57,9002313.5714,2,21,7,0)
process (i.e. the ECME application software).  There are no such limits
"^DD",9002313.57,9002313.5714,2,21,8,0)
built into this data dictionary.
"^DD",9002313.57,9002313.5714,2,"DT")
3100617
"^DD",9002313.57,9002313.57141,0)
OTHER PAYER AMT PAID MULTIPLE SUB-FIELD^^.02^2
"^DD",9002313.57,9002313.57141,0,"DT")
3100617
"^DD",9002313.57,9002313.57141,0,"IX","B",9002313.57141,.01)

"^DD",9002313.57,9002313.57141,0,"NM","OTHER PAYER AMT PAID MULTIPLE")

"^DD",9002313.57,9002313.57141,0,"UP")
9002313.5714
"^DD",9002313.57,9002313.57141,.01,0)
OTHER PAYER AMOUNT PAID^NJ9,2^^0;1^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>999999)!(X<0)!(X?.E1"."3.N) X
"^DD",9002313.57,9002313.57141,.01,1,0)
^.1
"^DD",9002313.57,9002313.57141,.01,1,1,0)
9002313.57141^B
"^DD",9002313.57,9002313.57141,.01,1,1,1)
S ^BPSTL(DA(2),14,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",9002313.57,9002313.57141,.01,1,1,2)
K ^BPSTL(DA(2),14,DA(1),1,"B",$E(X,1,30),DA)
"^DD",9002313.57,9002313.57141,.01,3)
Type a dollar amount between 0 and 999999, 2 decimal digits.
"^DD",9002313.57,9002313.57141,.01,21,0)
^^2^2^3100617^
"^DD",9002313.57,9002313.57141,.01,21,1,0)
NCPDP field 431-DV - Amount of any payment known by the pharmacy
"^DD",9002313.57,9002313.57141,.01,21,2,0)
from other sources (including coupons).
"^DD",9002313.57,9002313.57141,.01,"DT")
3100617
"^DD",9002313.57,9002313.57141,.02,0)
OTHER PAYER AMT PAID QUALIFIER^S^01:DELIVERY;02:SHIPPING;03:POSTAGE;04:ADMINISTRATIVE;05:INCENTIVE;06:COGNITIVE SERVICE;07:DRUG BENEFIT;08:SUM OF ALL REIMBURSEMENT;98:COUPON;99:OTHER;^0;2^Q
"^DD",9002313.57,9002313.57141,.02,3)
Enter the type of Other Payer Amount Paid.
"^DD",9002313.57,9002313.57141,.02,21,0)
^^2^2^3100617^
"^DD",9002313.57,9002313.57141,.02,21,1,0)
NCPDP field 342-HC - Code qualifying the 'Other Payer Amount Paid'
"^DD",9002313.57,9002313.57141,.02,21,2,0)
(431-DV).
"^DD",9002313.57,9002313.57141,.02,"DT")
3100617
"^DD",9002313.57,9002313.57142,0)
OTHER PAYER REJECT MULTIPLE SUB-FIELD^^.01^1
"^DD",9002313.57,9002313.57142,0,"DT")
3100617
"^DD",9002313.57,9002313.57142,0,"IX","B",9002313.57142,.01)

"^DD",9002313.57,9002313.57142,0,"NM","OTHER PAYER REJECT MULTIPLE")

"^DD",9002313.57,9002313.57142,0,"UP")
9002313.5714
"^DD",9002313.57,9002313.57142,.01,0)
OTHER PAYER REJECT CODE^F^^0;1^K:$L(X)>3!($L(X)<1) X
"^DD",9002313.57,9002313.57142,.01,1,0)
^.1
"^DD",9002313.57,9002313.57142,.01,1,1,0)
9002313.57142^B
"^DD",9002313.57,9002313.57142,.01,1,1,1)
S ^BPSTL(DA(2),14,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",9002313.57,9002313.57142,.01,1,1,2)
K ^BPSTL(DA(2),14,DA(1),2,"B",$E(X,1,30),DA)
"^DD",9002313.57,9002313.57142,.01,3)
Enter a reject code returned by the Other Payer.
"^DD",9002313.57,9002313.57142,.01,21,0)
^^2^2^3100617^
"^DD",9002313.57,9002313.57142,.01,21,1,0)
NCPDP field 472-6E - The error encountered by the previous
"^DD",9002313.57,9002313.57142,.01,21,2,0)
"Other Payer" in 'Reject Code' (511-FB).
"^DD",9002313.57,9002313.57142,.01,"DT")
3100617
"^DD",9002313.57,9002313.57902,902.28,0)
ELIGIBILITY^S^V:Veteran;T:Tricare;C:ChampVA;^3;4^Q
"^DD",9002313.57,9002313.57902,902.28,3)
Enter eligibility of the claim.
"^DD",9002313.57,9002313.57902,902.28,21,0)
^^1^1^3090601^
"^DD",9002313.57,9002313.57902,902.28,21,1,0)
The insurance eligibility type of the claim.
"^DD",9002313.57,9002313.57902,902.28,"DT")
3090601
"^DD",9002313.57,9002313.57902,902.29,0)
RATE TYPE^P399.3'^DGCR(399.3,^0;8^Q
"^DD",9002313.57,9002313.57902,902.29,3)
Select Rate Type for billing
"^DD",9002313.57,9002313.57902,902.29,21,0)
^^1^1^3090109^
"^DD",9002313.57,9002313.57902,902.29,21,1,0)
The Rate Type selected by the user for billing.
"^DD",9002313.57,9002313.57902,902.29,"DT")
3090109
"^DD",9002313.57,9002313.57902,902.3,0)
PRIMARY PAYER BILL^P399'^DGCR(399,^2;8^Q
"^DD",9002313.57,9002313.57902,902.3,3)
Select Primary bill for secondary billing.
"^DD",9002313.57,9002313.57902,902.3,21,0)
^^2^2^3090109^^
"^DD",9002313.57,9002313.57902,902.3,21,1,0)
Primary bill which should be used to create the secondary bill.
"^DD",9002313.57,9002313.57902,902.3,21,2,0)
This field is used for secondary billing only.
"^DD",9002313.57,9002313.57902,902.3,"DT")
3090109
"^DD",9002313.57,9002313.57902,902.31,0)
PRIOR PAYMENT^NJ9,2^^2;9^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>999999)!(X<0) X
"^DD",9002313.57,9002313.57902,902.31,3)
Enter a Dollar Amount (between 0 and 999999, 2 Decimal Digits) paid by primary insurer.
"^DD",9002313.57,9002313.57902,902.31,21,0)
^^2^2^3090109^
"^DD",9002313.57,9002313.57902,902.31,21,1,0)
Dollar amount paid by the Primary insurer. This field is used for 
"^DD",9002313.57,9002313.57902,902.31,21,2,0)
secondary billing only.
"^DD",9002313.57,9002313.57902,902.31,"DT")
3090325
"^DD",9002313.57,9002313.57902,902.32,0)
PLAN COB^S^1:PRIMARY;2:SECONDARY;3:TERTIARY;^3;6^Q
"^DD",9002313.57,9002313.57902,902.32,3)
Enter Coordination Of Benefits indicator for the insurance plan.
"^DD",9002313.57,9002313.57902,902.32,21,0)
^^2^2^3090325^
"^DD",9002313.57,9002313.57902,902.32,21,1,0)
The Coordination of Benefits value as it is stored in (#.2) COB field of 
"^DD",9002313.57,9002313.57902,902.32,21,2,0)
the (#.3121) Insurance Type multiple of the Patient file (#2).
"^DD",9002313.57,9002313.57902,902.32,"DT")
3090325
"^DD",9002313.57,9002313.57902,902.33,0)
INSURANCE COMPANY^P36'^DIC(36,^3;5^Q
"^DD",9002313.57,9002313.57902,902.33,3)
Select the insurance carrier for this claim.
"^DD",9002313.57,9002313.57902,902.33,21,0)
^.001^1^1^3090529^^^
"^DD",9002313.57,9002313.57902,902.33,21,1,0)
This is the INSURANCE COMPANY from file #36.
"^DD",9002313.57,9002313.57902,902.33,"DT")
3090116
"^DD",9002313.59,9002313.59,1204,0)
COB OTHER PAYMENTS COUNT^NJ1,0^^12;4^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.59,9002313.59,1204,3)
Enter a number between 0 and 9 for a count of other payment occurrences.
"^DD",9002313.59,9002313.59,1204,21,0)
^^4^4^3100614^
"^DD",9002313.59,9002313.59,1204,21,1,0)
NCPDP field 337-4C - Coordination of Benefits/Other Payments Count
"^DD",9002313.59,9002313.59,1204,21,2,0)
 
"^DD",9002313.59,9002313.59,1204,21,3,0)
This value corresponds to the number of multiple entries in the #1400
"^DD",9002313.59,9002313.59,1204,21,4,0)
multiple field - COB OTHER PAYERS.
"^DD",9002313.59,9002313.59,1204,"DT")
3100614
"^DD",9002313.59,9002313.59,1205,0)
OTHER COVERAGE CODE^S^00:NOT SPECIFIED;01:NO OTH COVERAGE;02:PYMT COLLECT/OTH PAYER;03:CLAIM NOT COVER/OTH PAYER;04:PYMT NOT COLLECT/OTH PAYER;05:PLAN DENIAL;06:NONPARTICIPAT PROV/OTH PAYER;07:OTH COVER NOT EFFECT ON DOS;08:COPAY BILLING;^12;5^Q
"^DD",9002313.59,9002313.59,1205,3)
Select the Other Coverage Code.
"^DD",9002313.59,9002313.59,1205,21,0)
^^2^2^3100614^
"^DD",9002313.59,9002313.59,1205,21,1,0)
NCPDP field 308-C8 - code indicating whether or not the patient
"^DD",9002313.59,9002313.59,1205,21,2,0)
has other insurance coverage.
"^DD",9002313.59,9002313.59,1205,"DT")
3100614
"^DD",9002313.59,9002313.59,1400,0)
COB OTHER PAYERS^9002313.5914A^^14;0
"^DD",9002313.59,9002313.59,1400,21,0)
^^7^7^3100614^
"^DD",9002313.59,9002313.59,1400,21,1,0)
This multiple structure stores information about each of the other payers
"^DD",9002313.59,9002313.59,1400,21,2,0)
involved in the payment or rejection of the claim.
"^DD",9002313.59,9002313.59,1400,21,3,0)
 
"^DD",9002313.59,9002313.59,1400,21,4,0)
NCPDP has a maximum of 9 occurrences here with a recommendation of less
"^DD",9002313.59,9002313.59,1400,21,5,0)
than or equal to 3 occurrences.  However, VA only stores data for at most
"^DD",9002313.59,9002313.59,1400,21,6,0)
3 insurance policies for any given claim.  So at most there will only be
"^DD",9002313.59,9002313.59,1400,21,7,0)
2 occurrences of this other payer multiple.
"^DD",9002313.59,9002313.59,1400,"DT")
3100614
"^DD",9002313.59,9002313.5914,0)
COB OTHER PAYERS SUB-FIELD^^2^9
"^DD",9002313.59,9002313.5914,0,"DT")
3100614
"^DD",9002313.59,9002313.5914,0,"IX","B",9002313.5914,.01)

"^DD",9002313.59,9002313.5914,0,"NM","COB OTHER PAYERS")

"^DD",9002313.59,9002313.5914,0,"UP")
9002313.59
"^DD",9002313.59,9002313.5914,.01,0)
OTHER PAYER COUNTER^NJ1,0^^0;1^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.59,9002313.5914,.01,1,0)
^.1
"^DD",9002313.59,9002313.5914,.01,1,1,0)
9002313.5914^B
"^DD",9002313.59,9002313.5914,.01,1,1,1)
S ^BPST(DA(1),14,"B",$E(X,1,30),DA)=""
"^DD",9002313.59,9002313.5914,.01,1,1,2)
K ^BPST(DA(1),14,"B",$E(X,1,30),DA)
"^DD",9002313.59,9002313.5914,.01,3)
Type a number between 0 and 9, 0 decimal digits.
"^DD",9002313.59,9002313.5914,.01,21,0)
^^1^1^3100614^
"^DD",9002313.59,9002313.5914,.01,21,1,0)
This is a multiple counter field to store the count of the other payers.
"^DD",9002313.59,9002313.5914,.01,"DT")
3100614
"^DD",9002313.59,9002313.5914,.02,0)
OTHER PAYER COVERAGE TYPE^S^01:PRIMARY;02:SECONDARY;03:TERTIARY;98:COUPON;99:COMPOSITE;^0;2^Q
"^DD",9002313.59,9002313.5914,.02,3)
Select other payer coverage type.
"^DD",9002313.59,9002313.5914,.02,21,0)
^^1^1^3100614^
"^DD",9002313.59,9002313.5914,.02,21,1,0)
NCPDP field 338-5C - Code identifying the type of 'Other Payer ID'
"^DD",9002313.59,9002313.5914,.02,"DT")
3100614
"^DD",9002313.59,9002313.5914,.03,0)
OTHER PAYER ID QUALIFIER^S^01:NATIONAL PAYER ID;02:HEALTH INDUSTRY NUMBER (HIN);03:BANK INFORMATION NUMBER (BIN);04:NAT. ASSOC. OF INS. COM.(NAIC);09:COUPON;99:OTHER;^0;3^Q
"^DD",9002313.59,9002313.5914,.03,3)
Select Other Payer ID Qualifier.
"^DD",9002313.59,9002313.5914,.03,21,0)
^^1^1^3100614^
"^DD",9002313.59,9002313.5914,.03,21,1,0)
NCPDP field 339-6C - Code qualifying the 'Other Payer ID' (340-7C).
"^DD",9002313.59,9002313.5914,.03,"DT")
3100614
"^DD",9002313.59,9002313.5914,.04,0)
OTHER PAYER ID^F^^0;4^K:$L(X)>10!($L(X)<1) X
"^DD",9002313.59,9002313.5914,.04,3)
Enter Other Payer ID (1-10 characters).
"^DD",9002313.59,9002313.5914,.04,21,0)
^^1^1^3100614^
"^DD",9002313.59,9002313.5914,.04,21,1,0)
NCPDP field 340-7C - ID assigned to the payer.
"^DD",9002313.59,9002313.5914,.04,"DT")
3100614
"^DD",9002313.59,9002313.5914,.05,0)
OTHER PAYER DATE^D^^0;5^S %DT="EX" D ^%DT S X=Y K:X<1 X
"^DD",9002313.59,9002313.5914,.05,3)
Enter the payment/denial date of the claim submitted to the other payer.
"^DD",9002313.59,9002313.5914,.05,21,0)
^^2^2^3100614^
"^DD",9002313.59,9002313.5914,.05,21,1,0)
NCPDP field 443-E8 - Payment or denial date of the claim submitted
"^DD",9002313.59,9002313.5914,.05,21,2,0)
to the other payer. Used for coordination of benefits.
"^DD",9002313.59,9002313.5914,.05,"DT")
3100614
"^DD",9002313.59,9002313.5914,.06,0)
OTHER PAYER AMOUNT PAID COUNT^NJ1,0^^0;6^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.59,9002313.5914,.06,3)
Enter the count (0-9) of the payer amount paid occurrences.
"^DD",9002313.59,9002313.5914,.06,21,0)
^^1^1^3100614^
"^DD",9002313.59,9002313.5914,.06,21,1,0)
NCPDP field 341-HB - Count of the payer amount paid occurrences.
"^DD",9002313.59,9002313.5914,.06,"DT")
3100614
"^DD",9002313.59,9002313.5914,.07,0)
OTHER PAYER REJECT COUNT^NJ2,0^^0;7^K:+X'=X!(X>20)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.59,9002313.5914,.07,3)
Enter the count (0-20) of the other payer reject code occurrences.
"^DD",9002313.59,9002313.5914,.07,21,0)
^^1^1^3100614^
"^DD",9002313.59,9002313.5914,.07,21,1,0)
NCPDP field 471-5E - Count of 'Other Payer Reject Code' occurrences.
"^DD",9002313.59,9002313.5914,.07,"DT")
3100614
"^DD",9002313.59,9002313.5914,1,0)
OTHER PAYER AMT PAID MULTIPLE^9002313.59141A^^1;0
"^DD",9002313.59,9002313.5914,1,21,0)
^^9^9^3100614^
"^DD",9002313.59,9002313.5914,1,21,1,0)
This multiple stores the NCPDP fields:
"^DD",9002313.59,9002313.5914,1,21,2,0)
 
"^DD",9002313.59,9002313.5914,1,21,3,0)
    431-DV - Other Payer Amount Paid
"^DD",9002313.59,9002313.5914,1,21,4,0)
    342-HC - Other Payer Amount Paid Qualifier
"^DD",9002313.59,9002313.5914,1,21,5,0)
 
"^DD",9002313.59,9002313.5914,1,21,6,0)
Up to 9 occurrences are allowed by the NCPDP standard.  This limit is
"^DD",9002313.59,9002313.5914,1,21,7,0)
dictated by the NCPDP standard and enforced within the ECME claim
"^DD",9002313.59,9002313.5914,1,21,8,0)
building process (i.e. the ECME application software).  There are no such
"^DD",9002313.59,9002313.5914,1,21,9,0)
limits built into this data dictionary.
"^DD",9002313.59,9002313.5914,1,"DT")
3100614
"^DD",9002313.59,9002313.5914,2,0)
OTHER PAYER REJECT MULTIPLE^9002313.59142A^^2;0
"^DD",9002313.59,9002313.5914,2,21,0)
^^8^8^3100614^
"^DD",9002313.59,9002313.5914,2,21,1,0)
This multiple stores the NCPDP field:
"^DD",9002313.59,9002313.5914,2,21,2,0)
 
"^DD",9002313.59,9002313.5914,2,21,3,0)
    NCPDP field 472-6E - Other Payer Reject Code
"^DD",9002313.59,9002313.5914,2,21,4,0)
 
"^DD",9002313.59,9002313.5914,2,21,5,0)
Up to 20 occurrences are allowed by the NCPDP standard.  This limit is
"^DD",9002313.59,9002313.5914,2,21,6,0)
dictated by the NCPDP standard and enforced within the ECME claim building
"^DD",9002313.59,9002313.5914,2,21,7,0)
process (i.e. the ECME application software).  There are no such limits
"^DD",9002313.59,9002313.5914,2,21,8,0)
built into this data dictionary.
"^DD",9002313.59,9002313.5914,2,"DT")
3100614
"^DD",9002313.59,9002313.59141,0)
OTHER PAYER AMT PAID MULTIPLE SUB-FIELD^^.02^2
"^DD",9002313.59,9002313.59141,0,"DT")
3100614
"^DD",9002313.59,9002313.59141,0,"IX","B",9002313.59141,.01)

"^DD",9002313.59,9002313.59141,0,"NM","OTHER PAYER AMT PAID MULTIPLE")

"^DD",9002313.59,9002313.59141,0,"UP")
9002313.5914
"^DD",9002313.59,9002313.59141,.01,0)
OTHER PAYER AMOUNT PAID^NJ9,2^^0;1^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>999999)!(X<0)!(X?.E1"."3.N) X
"^DD",9002313.59,9002313.59141,.01,1,0)
^.1
"^DD",9002313.59,9002313.59141,.01,1,1,0)
9002313.59141^B
"^DD",9002313.59,9002313.59141,.01,1,1,1)
S ^BPST(DA(2),14,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",9002313.59,9002313.59141,.01,1,1,2)
K ^BPST(DA(2),14,DA(1),1,"B",$E(X,1,30),DA)
"^DD",9002313.59,9002313.59141,.01,3)
Type a dollar amount between 0 and 999999, 2 decimal digits.
"^DD",9002313.59,9002313.59141,.01,21,0)
^^2^2^3100614^
"^DD",9002313.59,9002313.59141,.01,21,1,0)
NCPDP field 431-DV - Amount of any payment known by the pharmacy
"^DD",9002313.59,9002313.59141,.01,21,2,0)
from other sources (including coupons).
"^DD",9002313.59,9002313.59141,.01,"DT")
3100614
"^DD",9002313.59,9002313.59141,.02,0)
OTHER PAYER AMT PAID QUALIFIER^S^01:DELIVERY;02:SHIPPING;03:POSTAGE;04:ADMINISTRATIVE;05:INCENTIVE;06:COGNITIVE SERVICE;07:DRUG BENEFIT;08:SUM OF ALL REIMBURSEMENT;98:COUPON;99:OTHER;^0;2^Q
"^DD",9002313.59,9002313.59141,.02,3)
Enter the type of Other Payer Amount Paid.
"^DD",9002313.59,9002313.59141,.02,21,0)
^^2^2^3100614^
"^DD",9002313.59,9002313.59141,.02,21,1,0)
NCPDP field 342-HC - Code qualifying the 'Other Payer Amount Paid'
"^DD",9002313.59,9002313.59141,.02,21,2,0)
(431-DV).
"^DD",9002313.59,9002313.59141,.02,"DT")
3100614
"^DD",9002313.59,9002313.59142,0)
OTHER PAYER REJECT MULTIPLE SUB-FIELD^^.01^1
"^DD",9002313.59,9002313.59142,0,"DT")
3100614
"^DD",9002313.59,9002313.59142,0,"IX","B",9002313.59142,.01)

"^DD",9002313.59,9002313.59142,0,"NM","OTHER PAYER REJECT MULTIPLE")

"^DD",9002313.59,9002313.59142,0,"UP")
9002313.5914
"^DD",9002313.59,9002313.59142,.01,0)
OTHER PAYER REJECT CODE^F^^0;1^K:$L(X)>3!($L(X)<1) X
"^DD",9002313.59,9002313.59142,.01,1,0)
^.1
"^DD",9002313.59,9002313.59142,.01,1,1,0)
9002313.59142^B
"^DD",9002313.59,9002313.59142,.01,1,1,1)
S ^BPST(DA(2),14,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",9002313.59,9002313.59142,.01,1,1,2)
K ^BPST(DA(2),14,DA(1),2,"B",$E(X,1,30),DA)
"^DD",9002313.59,9002313.59142,.01,3)
Enter a reject code returned by the Other Payer.
"^DD",9002313.59,9002313.59142,.01,21,0)
^^2^2^3100614^
"^DD",9002313.59,9002313.59142,.01,21,1,0)
NCPDP field 472-6E - The error encountered by the previous
"^DD",9002313.59,9002313.59142,.01,21,2,0)
"Other Payer" in 'Reject Code' (511-FB).
"^DD",9002313.59,9002313.59142,.01,"DT")
3100614
"^DD",9002313.59,9002313.59902,902.28,0)
ELIGIBILITY^S^V:Veteran;T:Tricare;C:ChampVA;^3;4^Q
"^DD",9002313.59,9002313.59902,902.28,3)
Enter eligibility of the claim.
"^DD",9002313.59,9002313.59902,902.28,21,0)
^^1^1^3090601^
"^DD",9002313.59,9002313.59902,902.28,21,1,0)
The insurance eligibility type of the claim.
"^DD",9002313.59,9002313.59902,902.28,"DT")
3090601
"^DD",9002313.59,9002313.59902,902.29,0)
RATE TYPE^P399.3'^DGCR(399.3,^0;8^Q
"^DD",9002313.59,9002313.59902,902.29,3)
Select Rate Type for billing
"^DD",9002313.59,9002313.59902,902.29,21,0)
^^1^1^3090109^
"^DD",9002313.59,9002313.59902,902.29,21,1,0)
The Rate Type selected by the user for billing. 
"^DD",9002313.59,9002313.59902,902.29,"DT")
3090109
"^DD",9002313.59,9002313.59902,902.3,0)
PRIMARY PAYER BILL^P399'^DGCR(399,^2;8^Q
"^DD",9002313.59,9002313.59902,902.3,3)
Select Primary bill for secondary billing.
"^DD",9002313.59,9002313.59902,902.3,21,0)
^^2^2^3090109^^
"^DD",9002313.59,9002313.59902,902.3,21,1,0)
Primary bill which should be used to create the secondary bill.
"^DD",9002313.59,9002313.59902,902.3,21,2,0)
This field is used for secondary billing only.
"^DD",9002313.59,9002313.59902,902.3,"DT")
3090109
"^DD",9002313.59,9002313.59902,902.31,0)
PRIOR PAYMENT^NJ9,2^^2;9^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>999999)!(X<0) X
"^DD",9002313.59,9002313.59902,902.31,3)
Enter a Dollar Amount (between 0 and 999999, 2 Decimal Digits) paid by primary insurer.
"^DD",9002313.59,9002313.59902,902.31,21,0)
^^2^2^3090326^
"^DD",9002313.59,9002313.59902,902.31,21,1,0)
Dollar amount paid by the Primary insurer. This field is used for
"^DD",9002313.59,9002313.59902,902.31,21,2,0)
secondary billing only.
"^DD",9002313.59,9002313.59902,902.31,"DT")
3090326
"^DD",9002313.59,9002313.59902,902.32,0)
PLAN COB^S^1:PRIMARY;2:SECONDARY;3:TERTIARY;^3;6^Q
"^DD",9002313.59,9002313.59902,902.32,3)
Enter Coordination Of Benefits indicator for the insurance plan.
"^DD",9002313.59,9002313.59902,902.32,21,0)
^^2^2^3090326^
"^DD",9002313.59,9002313.59902,902.32,21,1,0)
The Coordination of Benefits value as it is stored in (#.2) COB field of 
"^DD",9002313.59,9002313.59902,902.32,21,2,0)
the (#.3121) Insurance Type multiple of the Patient file (#2).
"^DD",9002313.59,9002313.59902,902.32,"DT")
3090326
"^DD",9002313.59,9002313.59902,902.33,0)
INSURANCE COMPANY^P36'^DIC(36,^3;5^Q
"^DD",9002313.59,9002313.59902,902.33,3)
Select the insurance carrier for this claim.
"^DD",9002313.59,9002313.59902,902.33,21,0)
^.001^1^1^3090529^^
"^DD",9002313.59,9002313.59902,902.33,21,1,0)
This is the INSURANCE COMPANY from file #36.
"^DD",9002313.59,9002313.59902,902.33,"DT")
3090116
"^DD",9002313.77,9002313.77,1.08,0)
RATE TYPE^P399.3'^DGCR(399.3,^1;8^Q
"^DD",9002313.77,9002313.77,1.08,3)
Select Rate Type for billing.
"^DD",9002313.77,9002313.77,1.08,21,0)
^^1^1^3090327^
"^DD",9002313.77,9002313.77,1.08,21,1,0)
The Rate Type selected by the user for billing.
"^DD",9002313.77,9002313.77,1.08,"DT")
3090327
"^DD",9002313.77,9002313.77,1.09,0)
PRIMARY PAYER BILL^P399'^DGCR(399,^1;9^Q
"^DD",9002313.77,9002313.77,1.09,3)
Select Primary bill for secondary billing.
"^DD",9002313.77,9002313.77,1.09,21,0)
^^2^2^3090109^
"^DD",9002313.77,9002313.77,1.09,21,1,0)
Primary bill which should be used to create the secondary bill.  This 
"^DD",9002313.77,9002313.77,1.09,21,2,0)
field is used for secondary billing only.
"^DD",9002313.77,9002313.77,1.09,"DT")
3090109
"^DD",9002313.77,9002313.77,1.1,0)
PRIOR PAYMENT^NJ9,2^^1;10^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>999999)!(X<0) X
"^DD",9002313.77,9002313.77,1.1,3)
Enter a Dollar Amount (between 0 and 999999, 2 Decimal Digits) paid by primary insurer.
"^DD",9002313.77,9002313.77,1.1,21,0)
^^2^2^3090109^
"^DD",9002313.77,9002313.77,1.1,21,1,0)
Dollar amount paid by the Primary insurer. This field is used for 
"^DD",9002313.77,9002313.77,1.1,21,2,0)
secondary billing only.
"^DD",9002313.77,9002313.77,1.1,"DT")
3090327
"^DD",9002313.77,9002313.77,1.11,0)
COB OTHER PAYMENTS COUNT^NJ1,0^^1;11^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.77,9002313.77,1.11,3)
Enter a number between 0 and 9 for a count of other payment occurrences.
"^DD",9002313.77,9002313.77,1.11,21,0)
^^4^4^3100607^
"^DD",9002313.77,9002313.77,1.11,21,1,0)
NCPDP field 337-4C - Coordination of Benefits/Other Payments Count
"^DD",9002313.77,9002313.77,1.11,21,2,0)
 
"^DD",9002313.77,9002313.77,1.11,21,3,0)
This value corresponds to the number of multiple entries in the #8 
"^DD",9002313.77,9002313.77,1.11,21,4,0)
multiple field - COB OTHER PAYERS.
"^DD",9002313.77,9002313.77,1.11,"DT")
3100607
"^DD",9002313.77,9002313.77,1.12,0)
OTHER COVERAGE CODE^S^00:NOT SPECIFIED;01:NO OTH COVERAGE;02:PYMT COLLECT/OTH PAYER;03:CLAIM NOT COVER/OTH PAYER;04:PYMT NOT COLLECT/OTH PAYER;05:PLAN DENIAL;06:NONPARTICIPAT PROV/OTH PAYER;07:OTH COVER NOT EFFECT ON DOS;08:COPAY BILLING;^1;12^Q
"^DD",9002313.77,9002313.77,1.12,3)
Select the Other Coverage Code.
"^DD",9002313.77,9002313.77,1.12,21,0)
^^2^2^3100607^
"^DD",9002313.77,9002313.77,1.12,21,1,0)
NCPDP field 308-C8 - code indicating whether or not the patient
"^DD",9002313.77,9002313.77,1.12,21,2,0)
has other insurance coverage.
"^DD",9002313.77,9002313.77,1.12,"DT")
3100607
"^DD",9002313.77,9002313.77,8,0)
COB OTHER PAYERS^9002313.778A^^8;0
"^DD",9002313.77,9002313.77,8,21,0)
^^7^7^3100614^
"^DD",9002313.77,9002313.77,8,21,1,0)
This multiple structure stores information about each of the other payers 
"^DD",9002313.77,9002313.77,8,21,2,0)
involved in the payment or rejection of the claim.
"^DD",9002313.77,9002313.77,8,21,3,0)
 
"^DD",9002313.77,9002313.77,8,21,4,0)
NCPDP has a maximum of 9 occurrences here with a recommendation of less
"^DD",9002313.77,9002313.77,8,21,5,0)
than or equal to 3 occurrences.  However, VA only stores data for at most 
"^DD",9002313.77,9002313.77,8,21,6,0)
3 insurance policies for any given claim.  So at most there will only be 
"^DD",9002313.77,9002313.77,8,21,7,0)
2 occurrences of this other payer multiple.
"^DD",9002313.77,9002313.77,8,"DT")
3100607
"^DD",9002313.77,9002313.778,0)
COB OTHER PAYERS SUB-FIELD^^2^9
"^DD",9002313.77,9002313.778,0,"DT")
3100614
"^DD",9002313.77,9002313.778,0,"IX","B",9002313.778,.01)

"^DD",9002313.77,9002313.778,0,"NM","COB OTHER PAYERS")

"^DD",9002313.77,9002313.778,0,"UP")
9002313.77
"^DD",9002313.77,9002313.778,.01,0)
OTHER PAYER COUNTER^NJ1,0^^0;1^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.77,9002313.778,.01,1,0)
^.1
"^DD",9002313.77,9002313.778,.01,1,1,0)
9002313.778^B
"^DD",9002313.77,9002313.778,.01,1,1,1)
S ^BPS(9002313.77,DA(1),8,"B",$E(X,1,30),DA)=""
"^DD",9002313.77,9002313.778,.01,1,1,2)
K ^BPS(9002313.77,DA(1),8,"B",$E(X,1,30),DA)
"^DD",9002313.77,9002313.778,.01,3)
Type a number between 0 and 9, 0 decimal digits.
"^DD",9002313.77,9002313.778,.01,21,0)
^^1^1^3100614^
"^DD",9002313.77,9002313.778,.01,21,1,0)
This is a multiple counter field to store the count of the other payers.
"^DD",9002313.77,9002313.778,.01,"DT")
3100614
"^DD",9002313.77,9002313.778,.02,0)
OTHER PAYER COVERAGE TYPE^S^01:PRIMARY;02:SECONDARY;03:TERTIARY;98:COUPON;99:COMPOSITE;^0;2^Q
"^DD",9002313.77,9002313.778,.02,3)
Select other payer coverage type.
"^DD",9002313.77,9002313.778,.02,21,0)
^^1^1^3100609^
"^DD",9002313.77,9002313.778,.02,21,1,0)
NCPDP field 338-5C - Code identifying the type of 'Other Payer ID'
"^DD",9002313.77,9002313.778,.02,"DT")
3100609
"^DD",9002313.77,9002313.778,.03,0)
OTHER PAYER ID QUALIFIER^S^01:NATIONAL PAYER ID;02:HEALTH INDUSTRY NUMBER (HIN);03:BANK INFORMATION NUMBER (BIN);04:NAT. ASSOC. OF INS. COM.(NAIC);09:COUPON;99:OTHER;^0;3^Q
"^DD",9002313.77,9002313.778,.03,3)
Select Other Payer ID Qualifier.
"^DD",9002313.77,9002313.778,.03,21,0)
^^1^1^3100609^
"^DD",9002313.77,9002313.778,.03,21,1,0)
NCPDP field 339-6C - Code qualifying the 'Other Payer ID' (340-7C).
"^DD",9002313.77,9002313.778,.03,"DT")
3100609
"^DD",9002313.77,9002313.778,.04,0)
OTHER PAYER ID^F^^0;4^K:$L(X)>10!($L(X)<1) X
"^DD",9002313.77,9002313.778,.04,3)
Enter Other Payer ID (1-10 characters).
"^DD",9002313.77,9002313.778,.04,21,0)
^^1^1^3100609^
"^DD",9002313.77,9002313.778,.04,21,1,0)
NCPDP field 340-7C - ID assigned to the payer.
"^DD",9002313.77,9002313.778,.04,"DT")
3100609
"^DD",9002313.77,9002313.778,.05,0)
OTHER PAYER DATE^D^^0;5^S %DT="EX" D ^%DT S X=Y K:X<1 X
"^DD",9002313.77,9002313.778,.05,3)
Enter the payment/denial date of the claim submitted to the other payer.
"^DD",9002313.77,9002313.778,.05,21,0)
^^2^2^3100609^
"^DD",9002313.77,9002313.778,.05,21,1,0)
NCPDP field 443-E8 - Payment or denial date of the claim submitted
"^DD",9002313.77,9002313.778,.05,21,2,0)
to the other payer. Used for coordination of benefits.
"^DD",9002313.77,9002313.778,.05,"DT")
3100609
"^DD",9002313.77,9002313.778,.06,0)
OTHER PAYER AMOUNT PAID COUNT^NJ1,0^^0;6^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.77,9002313.778,.06,3)
Enter the count (0-9) of the payer amount paid occurrences.
"^DD",9002313.77,9002313.778,.06,21,0)
^^1^1^3100614^
"^DD",9002313.77,9002313.778,.06,21,1,0)
NCPDP field 341-HB - Count of the payer amount paid occurrences.
"^DD",9002313.77,9002313.778,.06,"DT")
3100614
"^DD",9002313.77,9002313.778,.07,0)
OTHER PAYER REJECT COUNT^NJ2,0^^0;7^K:+X'=X!(X>20)!(X<0)!(X?.E1"."1.N) X
"^DD",9002313.77,9002313.778,.07,3)
Enter the count (0-20) of the other payer reject code occurrences.
"^DD",9002313.77,9002313.778,.07,21,0)
^^1^1^3100614^
"^DD",9002313.77,9002313.778,.07,21,1,0)
NCPDP field 471-5E - Count of 'Other Payer Reject Code' occurrences.
"^DD",9002313.77,9002313.778,.07,"DT")
3100614
"^DD",9002313.77,9002313.778,1,0)
OTHER PAYER AMT PAID MULTIPLE^9002313.7781A^^1;0
"^DD",9002313.77,9002313.778,1,21,0)
^^9^9^3100614^
"^DD",9002313.77,9002313.778,1,21,1,0)
This multiple stores the NCPDP fields:
"^DD",9002313.77,9002313.778,1,21,2,0)
 
"^DD",9002313.77,9002313.778,1,21,3,0)
    431-DV - Other Payer Amount Paid
"^DD",9002313.77,9002313.778,1,21,4,0)
    342-HC - Other Payer Amount Paid Qualifier 
"^DD",9002313.77,9002313.778,1,21,5,0)
 
"^DD",9002313.77,9002313.778,1,21,6,0)
Up to 9 occurrences are allowed by the NCPDP standard.  This limit is 
"^DD",9002313.77,9002313.778,1,21,7,0)
dictated by the NCPDP standard and enforced within the ECME claim 
"^DD",9002313.77,9002313.778,1,21,8,0)
building process (i.e. the ECME application software).  There are no such 
"^DD",9002313.77,9002313.778,1,21,9,0)
limits built into this data dictionary.
"^DD",9002313.77,9002313.778,1,"DT")
3100609
"^DD",9002313.77,9002313.778,2,0)
OTHER PAYER REJECT MULTIPLE^9002313.7782A^^2;0
"^DD",9002313.77,9002313.778,2,21,0)
^^8^8^3100614^
"^DD",9002313.77,9002313.778,2,21,1,0)
This multiple stores the NCPDP field:
"^DD",9002313.77,9002313.778,2,21,2,0)
 
"^DD",9002313.77,9002313.778,2,21,3,0)
    NCPDP field 472-6E - Other Payer Reject Code
"^DD",9002313.77,9002313.778,2,21,4,0)
 
"^DD",9002313.77,9002313.778,2,21,5,0)
Up to 20 occurrences are allowed by the NCPDP standard.  This limit is
"^DD",9002313.77,9002313.778,2,21,6,0)
dictated by the NCPDP standard and enforced within the ECME claim building
"^DD",9002313.77,9002313.778,2,21,7,0)
process (i.e. the ECME application software).  There are no such limits
"^DD",9002313.77,9002313.778,2,21,8,0)
built into this data dictionary.
"^DD",9002313.77,9002313.778,2,"DT")
3100609
"^DD",9002313.77,9002313.7781,0)
OTHER PAYER AMT PAID MULTIPLE SUB-FIELD^^.02^2
"^DD",9002313.77,9002313.7781,0,"DT")
3100610
"^DD",9002313.77,9002313.7781,0,"IX","B",9002313.7781,.01)

"^DD",9002313.77,9002313.7781,0,"NM","OTHER PAYER AMT PAID MULTIPLE")

"^DD",9002313.77,9002313.7781,0,"UP")
9002313.778
"^DD",9002313.77,9002313.7781,.01,0)
OTHER PAYER AMOUNT PAID^NJ9,2^^0;1^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>999999)!(X<0)!(X?.E1"."3.N) X
"^DD",9002313.77,9002313.7781,.01,1,0)
^.1
"^DD",9002313.77,9002313.7781,.01,1,1,0)
9002313.7781^B
"^DD",9002313.77,9002313.7781,.01,1,1,1)
S ^BPS(9002313.77,DA(2),8,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",9002313.77,9002313.7781,.01,1,1,2)
K ^BPS(9002313.77,DA(2),8,DA(1),1,"B",$E(X,1,30),DA)
"^DD",9002313.77,9002313.7781,.01,3)
Type a dollar amount between 0 and 999999, 2 decimal digits.
"^DD",9002313.77,9002313.7781,.01,21,0)
^^2^2^3100610^
"^DD",9002313.77,9002313.7781,.01,21,1,0)
NCPDP field 431-DV - Amount of any payment known by the pharmacy
"^DD",9002313.77,9002313.7781,.01,21,2,0)
from other sources (including coupons).
"^DD",9002313.77,9002313.7781,.01,"DT")
3100610
"^DD",9002313.77,9002313.7781,.02,0)
OTHER PAYER AMT PAID QUALIFIER^S^01:DELIVERY;02:SHIPPING;03:POSTAGE;04:ADMINISTRATIVE;05:INCENTIVE;06:COGNITIVE SERVICE;07:DRUG BENEFIT;08:SUM OF ALL REIMBURSEMENT;98:COUPON;99:OTHER;^0;2^Q
"^DD",9002313.77,9002313.7781,.02,3)
Enter the type of Other Payer Amount Paid.
"^DD",9002313.77,9002313.7781,.02,21,0)
^^2^2^3100610^
"^DD",9002313.77,9002313.7781,.02,21,1,0)
NCPDP field 342-HC - Code qualifying the 'Other Payer Amount Paid'
"^DD",9002313.77,9002313.7781,.02,21,2,0)
(431-DV).
"^DD",9002313.77,9002313.7781,.02,"DT")
3100610
"^DD",9002313.77,9002313.7782,0)
OTHER PAYER REJECT MULTIPLE SUB-FIELD^^.01^1
"^DD",9002313.77,9002313.7782,0,"DT")
3100609
"^DD",9002313.77,9002313.7782,0,"IX","B",9002313.7782,.01)

"^DD",9002313.77,9002313.7782,0,"NM","OTHER PAYER REJECT MULTIPLE")

"^DD",9002313.77,9002313.7782,0,"UP")
9002313.778
"^DD",9002313.77,9002313.7782,.01,0)
OTHER PAYER REJECT CODE^F^^0;1^K:$L(X)>3!($L(X)<1) X
"^DD",9002313.77,9002313.7782,.01,1,0)
^.1
"^DD",9002313.77,9002313.7782,.01,1,1,0)
9002313.7782^B
"^DD",9002313.77,9002313.7782,.01,1,1,1)
S ^BPS(9002313.77,DA(2),8,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",9002313.77,9002313.7782,.01,1,1,2)
K ^BPS(9002313.77,DA(2),8,DA(1),2,"B",$E(X,1,30),DA)
"^DD",9002313.77,9002313.7782,.01,3)
Enter a reject code returned by the Other Payer.
"^DD",9002313.77,9002313.7782,.01,21,0)
^^2^2^3100614^
"^DD",9002313.77,9002313.7782,.01,21,1,0)
NCPDP field 472-6E - The error encountered by the previous
"^DD",9002313.77,9002313.7782,.01,21,2,0)
"Other Payer" in 'Reject Code' (511-FB).
"^DD",9002313.77,9002313.7782,.01,"DT")
3100614
"^DD",9002313.78,9002313.78,3.06,0)
PLAN COB^S^1:PRIMARY;2:SECONDARY;3:TERTIARY;^3;6^Q
"^DD",9002313.78,9002313.78,3.06,3)
Enter Coordination Of Benefits indicator for the insurance plan.
"^DD",9002313.78,9002313.78,3.06,21,0)
^^3^3^3090330^
"^DD",9002313.78,9002313.78,3.06,21,1,0)
The Coordination of Benefits indicator of the patient's insurance plan.
"^DD",9002313.78,9002313.78,3.06,21,2,0)
This field is a copy of the (#.2) COORDINATION OF BENEFITS field of the
"^DD",9002313.78,9002313.78,3.06,21,3,0)
(#.3121) INSURANCE TYPE multiple of the PATIENT file (#2).
"^DD",9002313.78,9002313.78,3.06,"DT")
3090330
**END**
**END**

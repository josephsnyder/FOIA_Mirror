KIDS Distribution saved on Feb 23, 2016@12:32:11
stamptime fix release candidate
**KIDS**:HMP 2.0^

**INSTALL NAME**
HMP 2.0
"BLD",9075,0)
HMP 2.0^HEALTH MANAGEMENT PLATFORM^0^3160223^y
"BLD",9075,1,0)
^9.61A^3^3^3151113^
"BLD",9075,1,1,0)
Enterprise Health Management Platform Package Release.
"BLD",9075,1,2,0)
 
"BLD",9075,1,3,0)
See FORUM patch description for details.
"BLD",9075,4,0)
^9.64PA^800001.2^9
"BLD",9075,4,800000,0)
800000
"BLD",9075,4,800000,222)
y^y^f^^^^n^^
"BLD",9075,4,800000,224)

"BLD",9075,4,800000.1,0)
800000.1
"BLD",9075,4,800000.1,222)
y^y^f^^^^n^^
"BLD",9075,4,800000.1,224)

"BLD",9075,4,800000.11,0)
800000.11
"BLD",9075,4,800000.11,222)
y^y^f^^^^y^m^n
"BLD",9075,4,800000.11,224)

"BLD",9075,4,800000.2,0)
800000.2
"BLD",9075,4,800000.2,222)
y^y^f^^n^^y^m^n
"BLD",9075,4,800000.2,224)

"BLD",9075,4,800000.21,0)
800000.21
"BLD",9075,4,800000.21,222)
y^y^f^^n^^y^m^n
"BLD",9075,4,800000.22,0)
800000.22
"BLD",9075,4,800000.22,222)
y^y^f^^n^^y^m^n
"BLD",9075,4,800001,0)
800001
"BLD",9075,4,800001,222)
y^y^f^^^^n^^
"BLD",9075,4,800001,224)

"BLD",9075,4,800001.2,0)
800001.2
"BLD",9075,4,800001.2,222)
y^y^f^^^^n^^
"BLD",9075,4,800001.2,224)

"BLD",9075,4,800001.5,0)
800001.5
"BLD",9075,4,800001.5,222)
y^y^f^^^^n^^
"BLD",9075,4,800001.5,224)

"BLD",9075,4,"B",800000,800000)

"BLD",9075,4,"B",800000.1,800000.1)

"BLD",9075,4,"B",800000.11,800000.11)

"BLD",9075,4,"B",800000.2,800000.2)

"BLD",9075,4,"B",800000.21,800000.21)

"BLD",9075,4,"B",800000.22,800000.22)

"BLD",9075,4,"B",800001,800001)

"BLD",9075,4,"B",800001.2,800001.2)

"BLD",9075,4,"B",800001.5,800001.5)

"BLD",9075,6.3)
63
"BLD",9075,"ABPKG")
n
"BLD",9075,"INI")
PRE^HMPP3I
"BLD",9075,"INID")
^n^n
"BLD",9075,"INIT")
POST^HMPP3I
"BLD",9075,"KRN",0)
^9.67PA^779.2^20
"BLD",9075,"KRN",.4,0)
.4
"BLD",9075,"KRN",.4,"NM",0)
^9.68A^^
"BLD",9075,"KRN",.401,0)
.401
"BLD",9075,"KRN",.401,"NM",0)
^9.68A^^
"BLD",9075,"KRN",.402,0)
.402
"BLD",9075,"KRN",.402,"NM",0)
^9.68A^^
"BLD",9075,"KRN",.403,0)
.403
"BLD",9075,"KRN",.403,"NM",0)
^9.68A^^
"BLD",9075,"KRN",.5,0)
.5
"BLD",9075,"KRN",.5,"NM",0)
^9.68A^^
"BLD",9075,"KRN",.84,0)
.84
"BLD",9075,"KRN",.84,"NM",0)
^9.68A^^
"BLD",9075,"KRN",3.6,0)
3.6
"BLD",9075,"KRN",3.6,"NM",0)
^9.68A^^
"BLD",9075,"KRN",3.8,0)
3.8
"BLD",9075,"KRN",3.8,"NM",0)
^9.68A^1^1
"BLD",9075,"KRN",3.8,"NM",1,0)
HMP IRM GROUP^^0
"BLD",9075,"KRN",3.8,"NM","B","HMP IRM GROUP",1)

"BLD",9075,"KRN",9.2,0)
9.2
"BLD",9075,"KRN",9.2,"NM",0)
^9.68A^^
"BLD",9075,"KRN",9.8,0)
9.8
"BLD",9075,"KRN",9.8,"NM",0)
^9.68A^202^147
"BLD",9075,"KRN",9.8,"NM",1,0)
HMPTOOLS^^0^B11387818
"BLD",9075,"KRN",9.8,"NM",2,0)
HMP0311P^^0^B14101699
"BLD",9075,"KRN",9.8,"NM",3,0)
HMPACT^^0^B34386179
"BLD",9075,"KRN",9.8,"NM",4,0)
HMPAT^^0^B3595282
"BLD",9075,"KRN",9.8,"NM",6,0)
HMPCAC^^0^B97070146
"BLD",9075,"KRN",9.8,"NM",11,0)
HMPCORD4^^0^B141593321
"BLD",9075,"KRN",9.8,"NM",12,0)
HMPCORD5^^0^B89350961
"BLD",9075,"KRN",9.8,"NM",15,0)
HMPCPRS^^0^B5087431
"BLD",9075,"KRN",9.8,"NM",16,0)
HMPCRPC^^0^B13274810
"BLD",9075,"KRN",9.8,"NM",17,0)
HMPCRPC1^^0^B103567295
"BLD",9075,"KRN",9.8,"NM",18,0)
HMPD^^0^B29605922
"BLD",9075,"KRN",9.8,"NM",19,0)
HMPDCRC^^0^B46986534
"BLD",9075,"KRN",9.8,"NM",21,0)
HMPDERRH^^0^B2044240
"BLD",9075,"KRN",9.8,"NM",22,0)
HMPDGMPL^^0^B28172327
"BLD",9075,"KRN",9.8,"NM",23,0)
HMPDGMRA^^0^B22211624
"BLD",9075,"KRN",9.8,"NM",25,0)
HMPDGMV^^0^B43285050
"BLD",9075,"KRN",9.8,"NM",28,0)
HMPDJ^^0^B36572187
"BLD",9075,"KRN",9.8,"NM",29,0)
HMPDJ0^^0^B118417079
"BLD",9075,"KRN",9.8,"NM",30,0)
HMPDJ00^^0^B150294972
"BLD",9075,"KRN",9.8,"NM",32,0)
HMPDJ1^^0^B18644090
"BLD",9075,"KRN",9.8,"NM",33,0)
HMPDJ01^^0^B49806712
"BLD",9075,"KRN",9.8,"NM",34,0)
HMPDJ2^^0^B21439862
"BLD",9075,"KRN",9.8,"NM",35,0)
HMPDJ02^^0^B178043401
"BLD",9075,"KRN",9.8,"NM",36,0)
HMPDJ03^^0^B97739485
"BLD",9075,"KRN",9.8,"NM",37,0)
HMPDJ04^^0^B86219849
"BLD",9075,"KRN",9.8,"NM",38,0)
HMPDJ04A^^0^B59768993
"BLD",9075,"KRN",9.8,"NM",39,0)
HMPDJ04E^^0^B18074806
"BLD",9075,"KRN",9.8,"NM",40,0)
HMPDJ05^^0^B85682186
"BLD",9075,"KRN",9.8,"NM",41,0)
HMPDJ05V^^0^B69065747
"BLD",9075,"KRN",9.8,"NM",42,0)
HMPDJ06^^0^B64037338
"BLD",9075,"KRN",9.8,"NM",43,0)
HMPDJ07^^0^B26955013
"BLD",9075,"KRN",9.8,"NM",44,0)
HMPDJ08^^0^B73570854
"BLD",9075,"KRN",9.8,"NM",45,0)
HMPDJ08A^^0^B50353978
"BLD",9075,"KRN",9.8,"NM",46,0)
HMPDJ09^^0^B47251770
"BLD",9075,"KRN",9.8,"NM",47,0)
HMPDJ09M^^0^B14316939
"BLD",9075,"KRN",9.8,"NM",48,0)
HMPDJFS^^0^B74871558
"BLD",9075,"KRN",9.8,"NM",49,0)
HMPDJFSD^^0^B6635230
"BLD",9075,"KRN",9.8,"NM",50,0)
HMPDJFSG^^0^B216382035
"BLD",9075,"KRN",9.8,"NM",51,0)
HMPDJFSM^^0^B91943836
"BLD",9075,"KRN",9.8,"NM",52,0)
HMPDJFSP^^0^B228347665
"BLD",9075,"KRN",9.8,"NM",55,0)
HMPDJX^^0^B36089287
"BLD",9075,"KRN",9.8,"NM",56,0)
HMPDLR^^0^B24262347
"BLD",9075,"KRN",9.8,"NM",57,0)
HMPDLRA^^0^B79686061
"BLD",9075,"KRN",9.8,"NM",59,0)
HMPDMC^^0^B58181283
"BLD",9075,"KRN",9.8,"NM",60,0)
HMPDMDC^^0^B45041787
"BLD",9075,"KRN",9.8,"NM",61,0)
HMPDOR^^0^B13574723
"BLD",9075,"KRN",9.8,"NM",66,0)
HMPDPSOR^^0^B2311665
"BLD",9075,"KRN",9.8,"NM",73,0)
HMPDRA^^0^B42792632
"BLD",9075,"KRN",9.8,"NM",74,0)
HMPDSDAM^^0^B21275067
"BLD",9075,"KRN",9.8,"NM",75,0)
HMPDSR^^0^B30022036
"BLD",9075,"KRN",9.8,"NM",76,0)
HMPDTIU^^0^B83859727
"BLD",9075,"KRN",9.8,"NM",78,0)
HMPDVSIT^^0^B93496568
"BLD",9075,"KRN",9.8,"NM",79,0)
HMPEASU^^0^B29036042
"BLD",9075,"KRN",9.8,"NM",80,0)
HMPEF^^0^B86254671
"BLD",9075,"KRN",9.8,"NM",84,0)
HMPEFX^^0^B8398930
"BLD",9075,"KRN",9.8,"NM",85,0)
HMPEHL7^^0^B3570530
"BLD",9075,"KRN",9.8,"NM",86,0)
HMPELAB^^0^B7483676
"BLD",9075,"KRN",9.8,"NM",89,0)
HMPEQ^^0^B27101202
"BLD",9075,"KRN",9.8,"NM",90,0)
HMPEQLM^^0^B113676837
"BLD",9075,"KRN",9.8,"NM",91,0)
HMPEQLM1^^0^B7071509
"BLD",9075,"KRN",9.8,"NM",92,0)
HMPEQLM2^^0^B3277771
"BLD",9075,"KRN",9.8,"NM",93,0)
HMPEVNT^^0^B129413290
"BLD",9075,"KRN",9.8,"NM",94,0)
HMPFPTC^^0^B15382684
"BLD",9075,"KRN",9.8,"NM",95,0)
HMPHTTP^^0^B14631122
"BLD",9075,"KRN",9.8,"NM",96,0)
HMPIDX^^0^B2980358
"BLD",9075,"KRN",9.8,"NM",97,0)
HMPJSON^^0^B11632331
"BLD",9075,"KRN",9.8,"NM",98,0)
HMPJSOND^^0^B71688388
"BLD",9075,"KRN",9.8,"NM",99,0)
HMPJSONE^^0^B27506711
"BLD",9075,"KRN",9.8,"NM",100,0)
HMPLIST^^0^B62846538
"BLD",9075,"KRN",9.8,"NM",101,0)
HMPMDUTL^^0^B53381465
"BLD",9075,"KRN",9.8,"NM",102,0)
HMPMETA^^0^B122279349
"BLD",9075,"KRN",9.8,"NM",104,0)
HMPP3I^^0^B129333471
"BLD",9075,"KRN",9.8,"NM",106,0)
HMPPARAM^^0^B16541840
"BLD",9075,"KRN",9.8,"NM",107,0)
HMPPATS^^0^B3116859
"BLD",9075,"KRN",9.8,"NM",110,0)
HMPPRXY2^^0^B16933808
"BLD",9075,"KRN",9.8,"NM",111,0)
HMPPTDEM^^0^B12665908
"BLD",9075,"KRN",9.8,"NM",113,0)
HMPPXRM^^0^B14531240
"BLD",9075,"KRN",9.8,"NM",122,0)
HMPSTMP^^0^B70461106
"BLD",9075,"KRN",9.8,"NM",123,0)
HMPTFU2^^0^B40086168
"BLD",9075,"KRN",9.8,"NM",126,0)
HMPUPD^^0^B25123694
"BLD",9075,"KRN",9.8,"NM",127,0)
HMPUTIL1^^0^B42764058
"BLD",9075,"KRN",9.8,"NM",128,0)
HMPUTILS^^0^B39059234
"BLD",9075,"KRN",9.8,"NM",133,0)
HMPYCSO^^0^B22000106
"BLD",9075,"KRN",9.8,"NM",139,0)
HMPPDL^^0^B23790480
"BLD",9075,"KRN",9.8,"NM",140,0)
HMP0311Q^^0^B3902876
"BLD",9075,"KRN",9.8,"NM",141,0)
HMPZ0218^^0^B5632129
"BLD",9075,"KRN",9.8,"NM",142,0)
HMPXGDPT^^0^B2019789
"BLD",9075,"KRN",9.8,"NM",143,0)
HMPXGLAB^^0^B1064430
"BLD",9075,"KRN",9.8,"NM",144,0)
HMPXGORD^^0^B2568884
"BLD",9075,"KRN",9.8,"NM",145,0)
HMPXGNP^^0^B1299808
"BLD",9075,"KRN",9.8,"NM",146,0)
HMPXGSD^^0^B2602100
"BLD",9075,"KRN",9.8,"NM",147,0)
HMPEF1^^0^B36268404
"BLD",9075,"KRN",9.8,"NM",148,0)
HMPDJFS1^^0^B1887278
"BLD",9075,"KRN",9.8,"NM",149,0)
HMPROS8^^0^B82143309
"BLD",9075,"KRN",9.8,"NM",150,0)
HMPATRG^^1^
"BLD",9075,"KRN",9.8,"NM",151,0)
HMPCORD^^1^
"BLD",9075,"KRN",9.8,"NM",152,0)
HMPCORD1^^1^
"BLD",9075,"KRN",9.8,"NM",153,0)
HMPCORD2^^1^
"BLD",9075,"KRN",9.8,"NM",154,0)
HMPCORD3^^1^
"BLD",9075,"KRN",9.8,"NM",155,0)
HMPCPAT^^1^
"BLD",9075,"KRN",9.8,"NM",156,0)
HMPCPAT1^^1^
"BLD",9075,"KRN",9.8,"NM",157,0)
HMPDE811^^1^
"BLD",9075,"KRN",9.8,"NM",158,0)
HMPDGMRC^^1^
"BLD",9075,"KRN",9.8,"NM",159,0)
HMPDGPF^^1^
"BLD",9075,"KRN",9.8,"NM",160,0)
HMPDIB^^1^
"BLD",9075,"KRN",9.8,"NM",161,0)
HMPDJ00A^^1^
"BLD",9075,"KRN",9.8,"NM",162,0)
HMPDJFST^^1^
"BLD",9075,"KRN",9.8,"NM",163,0)
HMPDJT^^1^
"BLD",9075,"KRN",9.8,"NM",164,0)
HMPDLRO^^1^
"BLD",9075,"KRN",9.8,"NM",165,0)
HMPDPROC^^1^
"BLD",9075,"KRN",9.8,"NM",166,0)
HMPDPT^^1^
"BLD",9075,"KRN",9.8,"NM",167,0)
HMPDPXAM^^1^
"BLD",9075,"KRN",9.8,"NM",168,0)
HMPDPXED^^1^
"BLD",9075,"KRN",9.8,"NM",169,0)
HMPDPXHF^^1^
"BLD",9075,"KRN",9.8,"NM",170,0)
HMPDPXIM^^1^
"BLD",9075,"KRN",9.8,"NM",171,0)
HMPDPXSK^^1^
"BLD",9075,"KRN",9.8,"NM",172,0)
HMPDTIUX^^1^
"BLD",9075,"KRN",9.8,"NM",173,0)
HMPEFSG^^1^
"BLD",9075,"KRN",9.8,"NM",174,0)
HMPEFSP^^1^
"BLD",9075,"KRN",9.8,"NM",175,0)
HMPEFST^^1^
"BLD",9075,"KRN",9.8,"NM",176,0)
HMPENSZ^^1^
"BLD",9075,"KRN",9.8,"NM",177,0)
HMPENSZ1^^1^
"BLD",9075,"KRN",9.8,"NM",178,0)
HMPP2I^^1^
"BLD",9075,"KRN",9.8,"NM",179,0)
HMPPANEL^^1^
"BLD",9075,"KRN",9.8,"NM",180,0)
HMPPI^^1^
"BLD",9075,"KRN",9.8,"NM",181,0)
HMPPRODC^^1^
"BLD",9075,"KRN",9.8,"NM",182,0)
HMPPXPR1^^1^
"BLD",9075,"KRN",9.8,"NM",183,0)
HMPROS2^^1^
"BLD",9075,"KRN",9.8,"NM",184,0)
HMPROS3^^1^
"BLD",9075,"KRN",9.8,"NM",185,0)
HMPROS4^^1^
"BLD",9075,"KRN",9.8,"NM",186,0)
HMPROS5^^1^
"BLD",9075,"KRN",9.8,"NM",187,0)
HMPROS6^^1^
"BLD",9075,"KRN",9.8,"NM",188,0)
HMPROS7^^1^
"BLD",9075,"KRN",9.8,"NM",189,0)
HMPSR^^1^
"BLD",9075,"KRN",9.8,"NM",190,0)
HMPTRPC^^1^
"BLD",9075,"KRN",9.8,"NM",191,0)
HMPTRPC1^^1^
"BLD",9075,"KRN",9.8,"NM",192,0)
HMPWB^^1^
"BLD",9075,"KRN",9.8,"NM",193,0)
HMPWB1^^1^
"BLD",9075,"KRN",9.8,"NM",194,0)
HMPWB2^^1^
"BLD",9075,"KRN",9.8,"NM",195,0)
HMPYCSI^^1^
"BLD",9075,"KRN",9.8,"NM",196,0)
HMPYFRP^^1^
"BLD",9075,"KRN",9.8,"NM",197,0)
HMPYFRP1^^1^
"BLD",9075,"KRN",9.8,"NM",198,0)
HMPYFRP2^^1^
"BLD",9075,"KRN",9.8,"NM",199,0)
HMPYPAR^^1^
"BLD",9075,"KRN",9.8,"NM",200,0)
HMPDPS^^1^
"BLD",9075,"KRN",9.8,"NM",201,0)
HMPDPSI^^1^
"BLD",9075,"KRN",9.8,"NM",202,0)
HMPDPSO^^1^
"BLD",9075,"KRN",9.8,"NM","B","HMP0311P",2)

"BLD",9075,"KRN",9.8,"NM","B","HMP0311Q",140)

"BLD",9075,"KRN",9.8,"NM","B","HMPACT",3)

"BLD",9075,"KRN",9.8,"NM","B","HMPAT",4)

"BLD",9075,"KRN",9.8,"NM","B","HMPATRG",150)

"BLD",9075,"KRN",9.8,"NM","B","HMPCAC",6)

"BLD",9075,"KRN",9.8,"NM","B","HMPCORD",151)

"BLD",9075,"KRN",9.8,"NM","B","HMPCORD1",152)

"BLD",9075,"KRN",9.8,"NM","B","HMPCORD2",153)

"BLD",9075,"KRN",9.8,"NM","B","HMPCORD3",154)

"BLD",9075,"KRN",9.8,"NM","B","HMPCORD4",11)

"BLD",9075,"KRN",9.8,"NM","B","HMPCORD5",12)

"BLD",9075,"KRN",9.8,"NM","B","HMPCPAT",155)

"BLD",9075,"KRN",9.8,"NM","B","HMPCPAT1",156)

"BLD",9075,"KRN",9.8,"NM","B","HMPCPRS",15)

"BLD",9075,"KRN",9.8,"NM","B","HMPCRPC",16)

"BLD",9075,"KRN",9.8,"NM","B","HMPCRPC1",17)

"BLD",9075,"KRN",9.8,"NM","B","HMPD",18)

"BLD",9075,"KRN",9.8,"NM","B","HMPDCRC",19)

"BLD",9075,"KRN",9.8,"NM","B","HMPDE811",157)

"BLD",9075,"KRN",9.8,"NM","B","HMPDERRH",21)

"BLD",9075,"KRN",9.8,"NM","B","HMPDGMPL",22)

"BLD",9075,"KRN",9.8,"NM","B","HMPDGMRA",23)

"BLD",9075,"KRN",9.8,"NM","B","HMPDGMRC",158)

"BLD",9075,"KRN",9.8,"NM","B","HMPDGMV",25)

"BLD",9075,"KRN",9.8,"NM","B","HMPDGPF",159)

"BLD",9075,"KRN",9.8,"NM","B","HMPDIB",160)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ",28)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ0",29)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ00",30)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ00A",161)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ01",33)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ02",35)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ03",36)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ04",37)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ04A",38)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ04E",39)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ05",40)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ05V",41)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ06",42)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ07",43)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ08",44)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ08A",45)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ09",46)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ09M",47)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ1",32)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJ2",34)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJFS",48)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJFS1",148)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJFSD",49)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJFSG",50)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJFSM",51)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJFSP",52)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJFST",162)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJT",163)

"BLD",9075,"KRN",9.8,"NM","B","HMPDJX",55)

"BLD",9075,"KRN",9.8,"NM","B","HMPDLR",56)

"BLD",9075,"KRN",9.8,"NM","B","HMPDLRA",57)

"BLD",9075,"KRN",9.8,"NM","B","HMPDLRO",164)

"BLD",9075,"KRN",9.8,"NM","B","HMPDMC",59)

"BLD",9075,"KRN",9.8,"NM","B","HMPDMDC",60)

"BLD",9075,"KRN",9.8,"NM","B","HMPDOR",61)

"BLD",9075,"KRN",9.8,"NM","B","HMPDPROC",165)

"BLD",9075,"KRN",9.8,"NM","B","HMPDPS",200)

"BLD",9075,"KRN",9.8,"NM","B","HMPDPSI",201)

"BLD",9075,"KRN",9.8,"NM","B","HMPDPSO",202)

"BLD",9075,"KRN",9.8,"NM","B","HMPDPSOR",66)

"BLD",9075,"KRN",9.8,"NM","B","HMPDPT",166)

"BLD",9075,"KRN",9.8,"NM","B","HMPDPXAM",167)

"BLD",9075,"KRN",9.8,"NM","B","HMPDPXED",168)

"BLD",9075,"KRN",9.8,"NM","B","HMPDPXHF",169)

"BLD",9075,"KRN",9.8,"NM","B","HMPDPXIM",170)

"BLD",9075,"KRN",9.8,"NM","B","HMPDPXSK",171)

"BLD",9075,"KRN",9.8,"NM","B","HMPDRA",73)

"BLD",9075,"KRN",9.8,"NM","B","HMPDSDAM",74)

"BLD",9075,"KRN",9.8,"NM","B","HMPDSR",75)

"BLD",9075,"KRN",9.8,"NM","B","HMPDTIU",76)

"BLD",9075,"KRN",9.8,"NM","B","HMPDTIUX",172)

"BLD",9075,"KRN",9.8,"NM","B","HMPDVSIT",78)

"BLD",9075,"KRN",9.8,"NM","B","HMPEASU",79)

"BLD",9075,"KRN",9.8,"NM","B","HMPEF",80)

"BLD",9075,"KRN",9.8,"NM","B","HMPEF1",147)

"BLD",9075,"KRN",9.8,"NM","B","HMPEFSG",173)

"BLD",9075,"KRN",9.8,"NM","B","HMPEFSP",174)

"BLD",9075,"KRN",9.8,"NM","B","HMPEFST",175)

"BLD",9075,"KRN",9.8,"NM","B","HMPEFX",84)

"BLD",9075,"KRN",9.8,"NM","B","HMPEHL7",85)

"BLD",9075,"KRN",9.8,"NM","B","HMPELAB",86)

"BLD",9075,"KRN",9.8,"NM","B","HMPENSZ",176)

"BLD",9075,"KRN",9.8,"NM","B","HMPENSZ1",177)

"BLD",9075,"KRN",9.8,"NM","B","HMPEQ",89)

"BLD",9075,"KRN",9.8,"NM","B","HMPEQLM",90)

"BLD",9075,"KRN",9.8,"NM","B","HMPEQLM1",91)

"BLD",9075,"KRN",9.8,"NM","B","HMPEQLM2",92)

"BLD",9075,"KRN",9.8,"NM","B","HMPEVNT",93)

"BLD",9075,"KRN",9.8,"NM","B","HMPFPTC",94)

"BLD",9075,"KRN",9.8,"NM","B","HMPHTTP",95)

"BLD",9075,"KRN",9.8,"NM","B","HMPIDX",96)

"BLD",9075,"KRN",9.8,"NM","B","HMPJSON",97)

"BLD",9075,"KRN",9.8,"NM","B","HMPJSOND",98)

"BLD",9075,"KRN",9.8,"NM","B","HMPJSONE",99)

"BLD",9075,"KRN",9.8,"NM","B","HMPLIST",100)

"BLD",9075,"KRN",9.8,"NM","B","HMPMDUTL",101)

"BLD",9075,"KRN",9.8,"NM","B","HMPMETA",102)

"BLD",9075,"KRN",9.8,"NM","B","HMPP2I",178)

"BLD",9075,"KRN",9.8,"NM","B","HMPP3I",104)

"BLD",9075,"KRN",9.8,"NM","B","HMPPANEL",179)

"BLD",9075,"KRN",9.8,"NM","B","HMPPARAM",106)

"BLD",9075,"KRN",9.8,"NM","B","HMPPATS",107)

"BLD",9075,"KRN",9.8,"NM","B","HMPPDL",139)

"BLD",9075,"KRN",9.8,"NM","B","HMPPI",180)

"BLD",9075,"KRN",9.8,"NM","B","HMPPRODC",181)

"BLD",9075,"KRN",9.8,"NM","B","HMPPRXY2",110)

"BLD",9075,"KRN",9.8,"NM","B","HMPPTDEM",111)

"BLD",9075,"KRN",9.8,"NM","B","HMPPXPR1",182)

"BLD",9075,"KRN",9.8,"NM","B","HMPPXRM",113)

"BLD",9075,"KRN",9.8,"NM","B","HMPROS2",183)

"BLD",9075,"KRN",9.8,"NM","B","HMPROS3",184)

"BLD",9075,"KRN",9.8,"NM","B","HMPROS4",185)

"BLD",9075,"KRN",9.8,"NM","B","HMPROS5",186)

"BLD",9075,"KRN",9.8,"NM","B","HMPROS6",187)

"BLD",9075,"KRN",9.8,"NM","B","HMPROS7",188)

"BLD",9075,"KRN",9.8,"NM","B","HMPROS8",149)

"BLD",9075,"KRN",9.8,"NM","B","HMPSR",189)

"BLD",9075,"KRN",9.8,"NM","B","HMPSTMP",122)

"BLD",9075,"KRN",9.8,"NM","B","HMPTFU2",123)

"BLD",9075,"KRN",9.8,"NM","B","HMPTOOLS",1)

"BLD",9075,"KRN",9.8,"NM","B","HMPTRPC",190)

"BLD",9075,"KRN",9.8,"NM","B","HMPTRPC1",191)

"BLD",9075,"KRN",9.8,"NM","B","HMPUPD",126)

"BLD",9075,"KRN",9.8,"NM","B","HMPUTIL1",127)

"BLD",9075,"KRN",9.8,"NM","B","HMPUTILS",128)

"BLD",9075,"KRN",9.8,"NM","B","HMPWB",192)

"BLD",9075,"KRN",9.8,"NM","B","HMPWB1",193)

"BLD",9075,"KRN",9.8,"NM","B","HMPWB2",194)

"BLD",9075,"KRN",9.8,"NM","B","HMPXGDPT",142)

"BLD",9075,"KRN",9.8,"NM","B","HMPXGLAB",143)

"BLD",9075,"KRN",9.8,"NM","B","HMPXGNP",145)

"BLD",9075,"KRN",9.8,"NM","B","HMPXGORD",144)

"BLD",9075,"KRN",9.8,"NM","B","HMPXGSD",146)

"BLD",9075,"KRN",9.8,"NM","B","HMPYCSI",195)

"BLD",9075,"KRN",9.8,"NM","B","HMPYCSO",133)

"BLD",9075,"KRN",9.8,"NM","B","HMPYFRP",196)

"BLD",9075,"KRN",9.8,"NM","B","HMPYFRP1",197)

"BLD",9075,"KRN",9.8,"NM","B","HMPYFRP2",198)

"BLD",9075,"KRN",9.8,"NM","B","HMPYPAR",199)

"BLD",9075,"KRN",9.8,"NM","B","HMPZ0218",141)

"BLD",9075,"KRN",19,0)
19
"BLD",9075,"KRN",19,"NM",0)
^9.68A^17^16
"BLD",9075,"KRN",19,"NM",1,0)
HMP APPLICATION PROXY^^0
"BLD",9075,"KRN",19,"NM",2,0)
HMP APPOINTMENTS^^0
"BLD",9075,"KRN",19,"NM",3,0)
HMP PATIENT ACTIVITY^^0
"BLD",9075,"KRN",19,"NM",4,0)
HMP PATIENT DATA MONITOR^^0
"BLD",9075,"KRN",19,"NM",5,0)
HMP SYNCHRONIZATION CONTEXT^^0
"BLD",9075,"KRN",19,"NM",6,0)
HMP UI CONTEXT^^0
"BLD",9075,"KRN",19,"NM",7,0)
HMP WB PTDEM^^0
"BLD",9075,"KRN",19,"NM",8,0)
HMP XU EVENTS^^0
"BLD",9075,"KRN",19,"NM",9,0)
HMPM ADD HMP PATIENT^^0
"BLD",9075,"KRN",19,"NM",10,0)
HMPM ADD HMP USER^^0
"BLD",9075,"KRN",19,"NM",11,0)
HMPM EMERGENCY STOP^^0
"BLD",9075,"KRN",19,"NM",12,0)
HMPM EXTRACT MONITOR^^0
"BLD",9075,"KRN",19,"NM",13,0)
HMPM RESTART FRESHNESS^^0
"BLD",9075,"KRN",19,"NM",14,0)
HMPMGR^^0
"BLD",9075,"KRN",19,"NM",16,0)
HMP WB DOMAINS^^0
"BLD",9075,"KRN",19,"NM",17,0)
HMP MONITOR FOR XTMP GLOBAL^^0
"BLD",9075,"KRN",19,"NM","B","HMP APPLICATION PROXY",1)

"BLD",9075,"KRN",19,"NM","B","HMP APPOINTMENTS",2)

"BLD",9075,"KRN",19,"NM","B","HMP MONITOR FOR XTMP GLOBAL",17)

"BLD",9075,"KRN",19,"NM","B","HMP PATIENT ACTIVITY",3)

"BLD",9075,"KRN",19,"NM","B","HMP PATIENT DATA MONITOR",4)

"BLD",9075,"KRN",19,"NM","B","HMP SYNCHRONIZATION CONTEXT",5)

"BLD",9075,"KRN",19,"NM","B","HMP UI CONTEXT",6)

"BLD",9075,"KRN",19,"NM","B","HMP WB DOMAINS",16)

"BLD",9075,"KRN",19,"NM","B","HMP WB PTDEM",7)

"BLD",9075,"KRN",19,"NM","B","HMP XU EVENTS",8)

"BLD",9075,"KRN",19,"NM","B","HMPM ADD HMP PATIENT",9)

"BLD",9075,"KRN",19,"NM","B","HMPM ADD HMP USER",10)

"BLD",9075,"KRN",19,"NM","B","HMPM EMERGENCY STOP",11)

"BLD",9075,"KRN",19,"NM","B","HMPM EXTRACT MONITOR",12)

"BLD",9075,"KRN",19,"NM","B","HMPM RESTART FRESHNESS",13)

"BLD",9075,"KRN",19,"NM","B","HMPMGR",14)

"BLD",9075,"KRN",19.1,0)
19.1
"BLD",9075,"KRN",19.1,"NM",0)
^9.68A^2^2
"BLD",9075,"KRN",19.1,"NM",1,0)
HMP ADMIN^^0
"BLD",9075,"KRN",19.1,"NM",2,0)
HMP EXPERIMENTAL^^0
"BLD",9075,"KRN",19.1,"NM","B","HMP ADMIN",1)

"BLD",9075,"KRN",19.1,"NM","B","HMP EXPERIMENTAL",2)

"BLD",9075,"KRN",101,0)
101
"BLD",9075,"KRN",101,"NM",0)
^9.68A^49^48
"BLD",9075,"KRN",101,"NM",1,0)
HMP ADT-A04 CLIENT^^0
"BLD",9075,"KRN",101,"NM",2,0)
HMP ADT-A08 CLIENT^^0
"BLD",9075,"KRN",101,"NM",3,0)
HMP APPT EVENTS^^0
"BLD",9075,"KRN",101,"NM",4,0)
HMP DG UPDATES^^0
"BLD",9075,"KRN",101,"NM",5,0)
HMP GMPL EVENT^^0
"BLD",9075,"KRN",101,"NM",6,0)
HMP GMRA EVENTS^^0
"BLD",9075,"KRN",101,"NM",7,0)
HMP INPT EVENTS^^0
"BLD",9075,"KRN",101,"NM",8,0)
HMP MDC EVENT^^0
"BLD",9075,"KRN",101,"NM",9,0)
HMP NA EVENTS^^0
"BLD",9075,"KRN",101,"NM",11,0)
HMP PCE EVENTS^^0
"BLD",9075,"KRN",101,"NM",12,0)
HMP PCMM TEAM^^0
"BLD",9075,"KRN",101,"NM",13,0)
HMP PCMM TEAM POSITION^^0
"BLD",9075,"KRN",101,"NM",14,0)
HMP PSB EVENTS^^0
"BLD",9075,"KRN",101,"NM",15,0)
HMP XQOR EVENTS^^0
"BLD",9075,"KRN",101,"NM",16,0)
HMPM EVT QUE CHANGE DOMAIN^^0
"BLD",9075,"KRN",101,"NM",17,0)
HMPM EVT QUE MGR MENU^^0
"BLD",9075,"KRN",101,"NM",18,0)
HMPM EVT QUE CHANGE MAX LISTED^^0
"BLD",9075,"KRN",101,"NM",19,0)
HMPM EVT QUE SELECT PATIENT^^0
"BLD",9075,"KRN",101,"NM",20,0)
HMPM EVT QUE SHOW TEMP GLOBALS^^0
"BLD",9075,"KRN",101,"NM",21,0)
HMPM EVT QUE FILTER^^0
"BLD",9075,"KRN",101,"NM",22,0)
HMPM EVT QUE FRESHNESS REPORT^^0
"BLD",9075,"KRN",101,"NM",23,0)
HMPM EVT QUE DISPLAY DETAILS^^0
"BLD",9075,"KRN",101,"NM",24,0)
HMPM EVT QUE REFRESH^^0
"BLD",9075,"KRN",101,"NM",25,0)
HMPM EVT QUE CHANGE SERVER^^0
"BLD",9075,"KRN",101,"NM",26,0)
HMP DGPF ASSIGN FLAG^^0
"BLD",9075,"KRN",101,"NM",27,0)
GMPL EVENT^^2
"BLD",9075,"KRN",101,"NM",28,0)
OR EVSEND VPR^^2
"BLD",9075,"KRN",101,"NM",29,0)
MDC OBSERVATION UPDATE^^2
"BLD",9075,"KRN",101,"NM",30,0)
PSB EVSEND VPR^^2
"BLD",9075,"KRN",101,"NM",31,0)
GMRC EVSEND OR^^2
"BLD",9075,"KRN",101,"NM",32,0)
OR EVSEND LRCH^^2
"BLD",9075,"KRN",101,"NM",33,0)
DGPM MOVEMENT EVENTS^^2
"BLD",9075,"KRN",101,"NM",34,0)
SDAM APPOINTMENT EVENTS^^2
"BLD",9075,"KRN",101,"NM",35,0)
RA EVSEND OR^^2
"BLD",9075,"KRN",101,"NM",36,0)
PXK VISIT DATA EVENT^^2
"BLD",9075,"KRN",101,"NM",37,0)
GMRA SIGN-OFF ON DATA^^2
"BLD",9075,"KRN",101,"NM",38,0)
GMRA ENTERED IN ERROR^^2
"BLD",9075,"KRN",101,"NM",39,0)
SCMC PATIENT TEAM CHANGES^^2
"BLD",9075,"KRN",101,"NM",40,0)
SCMC PATIENT TEAM POSITION CHANGES^^2
"BLD",9075,"KRN",101,"NM",41,0)
LR7O CH EVSEND OR^^2
"BLD",9075,"KRN",101,"NM",42,0)
PS EVSEND OR^^2
"BLD",9075,"KRN",101,"NM",43,0)
FH EVSEND OR^^2
"BLD",9075,"KRN",101,"NM",44,0)
OR EVSEND RA^^2
"BLD",9075,"KRN",101,"NM",45,0)
OR EVSEND FH^^2
"BLD",9075,"KRN",101,"NM",46,0)
OR EVSEND ORG^^2
"BLD",9075,"KRN",101,"NM",47,0)
OR EVSEND PS^^2
"BLD",9075,"KRN",101,"NM",48,0)
OR EVSEND GMRC^^2
"BLD",9075,"KRN",101,"NM",49,0)
DG FIELD MONITOR^^2
"BLD",9075,"KRN",101,"NM","B","DG FIELD MONITOR",49)

"BLD",9075,"KRN",101,"NM","B","DGPM MOVEMENT EVENTS",33)

"BLD",9075,"KRN",101,"NM","B","FH EVSEND OR",43)

"BLD",9075,"KRN",101,"NM","B","GMPL EVENT",27)

"BLD",9075,"KRN",101,"NM","B","GMRA ENTERED IN ERROR",38)

"BLD",9075,"KRN",101,"NM","B","GMRA SIGN-OFF ON DATA",37)

"BLD",9075,"KRN",101,"NM","B","GMRC EVSEND OR",31)

"BLD",9075,"KRN",101,"NM","B","HMP ADT-A04 CLIENT",1)

"BLD",9075,"KRN",101,"NM","B","HMP ADT-A08 CLIENT",2)

"BLD",9075,"KRN",101,"NM","B","HMP APPT EVENTS",3)

"BLD",9075,"KRN",101,"NM","B","HMP DG UPDATES",4)

"BLD",9075,"KRN",101,"NM","B","HMP DGPF ASSIGN FLAG",26)

"BLD",9075,"KRN",101,"NM","B","HMP GMPL EVENT",5)

"BLD",9075,"KRN",101,"NM","B","HMP GMRA EVENTS",6)

"BLD",9075,"KRN",101,"NM","B","HMP INPT EVENTS",7)

"BLD",9075,"KRN",101,"NM","B","HMP MDC EVENT",8)

"BLD",9075,"KRN",101,"NM","B","HMP NA EVENTS",9)

"BLD",9075,"KRN",101,"NM","B","HMP PCE EVENTS",11)

"BLD",9075,"KRN",101,"NM","B","HMP PCMM TEAM",12)

"BLD",9075,"KRN",101,"NM","B","HMP PCMM TEAM POSITION",13)

"BLD",9075,"KRN",101,"NM","B","HMP PSB EVENTS",14)

"BLD",9075,"KRN",101,"NM","B","HMP XQOR EVENTS",15)

"BLD",9075,"KRN",101,"NM","B","HMPM EVT QUE CHANGE DOMAIN",16)

"BLD",9075,"KRN",101,"NM","B","HMPM EVT QUE CHANGE MAX LISTED",18)

"BLD",9075,"KRN",101,"NM","B","HMPM EVT QUE CHANGE SERVER",25)

"BLD",9075,"KRN",101,"NM","B","HMPM EVT QUE DISPLAY DETAILS",23)

"BLD",9075,"KRN",101,"NM","B","HMPM EVT QUE FILTER",21)

"BLD",9075,"KRN",101,"NM","B","HMPM EVT QUE FRESHNESS REPORT",22)

"BLD",9075,"KRN",101,"NM","B","HMPM EVT QUE MGR MENU",17)

"BLD",9075,"KRN",101,"NM","B","HMPM EVT QUE REFRESH",24)

"BLD",9075,"KRN",101,"NM","B","HMPM EVT QUE SELECT PATIENT",19)

"BLD",9075,"KRN",101,"NM","B","HMPM EVT QUE SHOW TEMP GLOBALS",20)

"BLD",9075,"KRN",101,"NM","B","LR7O CH EVSEND OR",41)

"BLD",9075,"KRN",101,"NM","B","MDC OBSERVATION UPDATE",29)

"BLD",9075,"KRN",101,"NM","B","OR EVSEND FH",45)

"BLD",9075,"KRN",101,"NM","B","OR EVSEND GMRC",48)

"BLD",9075,"KRN",101,"NM","B","OR EVSEND LRCH",32)

"BLD",9075,"KRN",101,"NM","B","OR EVSEND ORG",46)

"BLD",9075,"KRN",101,"NM","B","OR EVSEND PS",47)

"BLD",9075,"KRN",101,"NM","B","OR EVSEND RA",44)

"BLD",9075,"KRN",101,"NM","B","OR EVSEND VPR",28)

"BLD",9075,"KRN",101,"NM","B","PS EVSEND OR",42)

"BLD",9075,"KRN",101,"NM","B","PSB EVSEND VPR",30)

"BLD",9075,"KRN",101,"NM","B","PXK VISIT DATA EVENT",36)

"BLD",9075,"KRN",101,"NM","B","RA EVSEND OR",35)

"BLD",9075,"KRN",101,"NM","B","SCMC PATIENT TEAM CHANGES",39)

"BLD",9075,"KRN",101,"NM","B","SCMC PATIENT TEAM POSITION CHANGES",40)

"BLD",9075,"KRN",101,"NM","B","SDAM APPOINTMENT EVENTS",34)

"BLD",9075,"KRN",409.61,0)
409.61
"BLD",9075,"KRN",409.61,"NM",0)
^9.68A^1^1
"BLD",9075,"KRN",409.61,"NM",1,0)
HMPM EVT QUE MGR^^0
"BLD",9075,"KRN",409.61,"NM","B","HMPM EVT QUE MGR",1)

"BLD",9075,"KRN",771,0)
771
"BLD",9075,"KRN",771,"NM",0)
^9.68A^1^1
"BLD",9075,"KRN",771,"NM",1,0)
HMP HL7^^0
"BLD",9075,"KRN",771,"NM","B","HMP HL7",1)

"BLD",9075,"KRN",779.2,0)
779.2
"BLD",9075,"KRN",870,0)
870
"BLD",9075,"KRN",870,"NM",0)
^9.68A^^
"BLD",9075,"KRN",8989.51,0)
8989.51
"BLD",9075,"KRN",8989.51,"NM",0)
^9.68A^12^10
"BLD",9075,"KRN",8989.51,"NM",1,0)
HMP CPRS PATH^^0
"BLD",9075,"KRN",8989.51,"NM",2,0)
HMP JSON SCHEMA^^0
"BLD",9075,"KRN",8989.51,"NM",3,0)
HMP LOCATIONS^^0
"BLD",9075,"KRN",8989.51,"NM",4,0)
HMP PARAMETERS^^0
"BLD",9075,"KRN",8989.51,"NM",7,0)
HMP SYSTEM NAME^^0
"BLD",9075,"KRN",8989.51,"NM",8,0)
HMP TASK WAIT TIME^^0
"BLD",9075,"KRN",8989.51,"NM",9,0)
HMP VERSION^^0
"BLD",9075,"KRN",8989.51,"NM",10,0)
HMP DOMAIN SIZES^^0
"BLD",9075,"KRN",8989.51,"NM",11,0)
HMP EXTRACT DISK SIZE LIMIT^^0
"BLD",9075,"KRN",8989.51,"NM",12,0)
HMP EXTRACT TASK REQUEUE SECS^^0
"BLD",9075,"KRN",8989.51,"NM","B","HMP CPRS PATH",1)

"BLD",9075,"KRN",8989.51,"NM","B","HMP DOMAIN SIZES",10)

"BLD",9075,"KRN",8989.51,"NM","B","HMP EXTRACT DISK SIZE LIMIT",11)

"BLD",9075,"KRN",8989.51,"NM","B","HMP EXTRACT TASK REQUEUE SECS",12)

"BLD",9075,"KRN",8989.51,"NM","B","HMP JSON SCHEMA",2)

"BLD",9075,"KRN",8989.51,"NM","B","HMP LOCATIONS",3)

"BLD",9075,"KRN",8989.51,"NM","B","HMP PARAMETERS",4)

"BLD",9075,"KRN",8989.51,"NM","B","HMP SYSTEM NAME",7)

"BLD",9075,"KRN",8989.51,"NM","B","HMP TASK WAIT TIME",8)

"BLD",9075,"KRN",8989.51,"NM","B","HMP VERSION",9)

"BLD",9075,"KRN",8989.52,0)
8989.52
"BLD",9075,"KRN",8989.52,"NM",0)
^9.68A^^
"BLD",9075,"KRN",8994,0)
8994
"BLD",9075,"KRN",8994,"NM",0)
^9.68A^41^41
"BLD",9075,"KRN",8994,"NM",1,0)
HMP APPOINTMENTS^^0
"BLD",9075,"KRN",8994,"NM",2,0)
HMP DATA VERSION^^0
"BLD",9075,"KRN",8994,"NM",3,0)
HMP DELETE OBJECT^^0
"BLD",9075,"KRN",8994,"NM",4,0)
HMP DELETE ROSTER^^0
"BLD",9075,"KRN",8994,"NM",5,0)
HMP GET CHECKSUM^^0
"BLD",9075,"KRN",8994,"NM",6,0)
HMP GET OBJECT^^0
"BLD",9075,"KRN",8994,"NM",7,0)
HMP GET OPERATIONAL DATA^^0
"BLD",9075,"KRN",8994,"NM",8,0)
HMP GET PATIENT DATA^^0
"BLD",9075,"KRN",8994,"NM",9,0)
HMP GET PATIENT DATA JSON^^0
"BLD",9075,"KRN",8994,"NM",10,0)
HMP GET REFERENCE DATA^^0
"BLD",9075,"KRN",8994,"NM",11,0)
HMP GET ROSTER LIST^^0
"BLD",9075,"KRN",8994,"NM",12,0)
HMP GET SOURCE^^0
"BLD",9075,"KRN",8994,"NM",13,0)
HMP INPATIENTS^^0
"BLD",9075,"KRN",8994,"NM",14,0)
HMP PATIENT ACTIVITY^^0
"BLD",9075,"KRN",8994,"NM",15,0)
HMP PREVIEW ROSTER^^0
"BLD",9075,"KRN",8994,"NM",16,0)
HMP PUT DEMOGRAPHICS^^0
"BLD",9075,"KRN",8994,"NM",17,0)
HMP PUT OBJECT^^0
"BLD",9075,"KRN",8994,"NM",18,0)
HMP PUT PATIENT DATA^^0
"BLD",9075,"KRN",8994,"NM",19,0)
HMP ROSTER PATIENTS^^0
"BLD",9075,"KRN",8994,"NM",20,0)
HMP ROSTERS^^0
"BLD",9075,"KRN",8994,"NM",21,0)
HMP SUBSCRIBE^^0
"BLD",9075,"KRN",8994,"NM",22,0)
HMP SUBSCRIBE ROSTERS^^0
"BLD",9075,"KRN",8994,"NM",23,0)
HMP UPDATE ROSTER^^0
"BLD",9075,"KRN",8994,"NM",24,0)
HMP WRITEBACK PT DEM^^0
"BLD",9075,"KRN",8994,"NM",25,0)
HMPCORD RPC^^0
"BLD",9075,"KRN",8994,"NM",26,0)
HMPCPAT RPC^^0
"BLD",9075,"KRN",8994,"NM",27,0)
HMPCPRS RPC^^0
"BLD",9075,"KRN",8994,"NM",28,0)
HMPCRPC RPC^^0
"BLD",9075,"KRN",8994,"NM",29,0)
HMPCRPC RPCCHAIN^^0
"BLD",9075,"KRN",8994,"NM",30,0)
HMPDJFS API^^0
"BLD",9075,"KRN",8994,"NM",31,0)
HMPDJFS DELSUB^^0
"BLD",9075,"KRN",8994,"NM",32,0)
HMPFPTC CHKS^^0
"BLD",9075,"KRN",8994,"NM",33,0)
HMPFPTC LOG^^0
"BLD",9075,"KRN",8994,"NM",34,0)
HMP LOCAL CORRESPONDINGIDS^^0
"BLD",9075,"KRN",8994,"NM",35,0)
HMP LOCAL GETCORRESPONDINGIDS^^0
"BLD",9075,"KRN",8994,"NM",36,0)
HMP PUT OPERATIONAL DATA^^0
"BLD",9075,"KRN",8994,"NM",37,0)
HMP CHKXTMP^^0
"BLD",9075,"KRN",8994,"NM",38,0)
HMP GLOBAL SIZE^^0
"BLD",9075,"KRN",8994,"NM",39,0)
HMP PATIENT SCHED SYNC^^0
"BLD",9075,"KRN",8994,"NM",40,0)
HMP PATIENT ADMIT SYNC^^0
"BLD",9075,"KRN",8994,"NM",41,0)
HMP DEFAULT PATIENT LIST^^0
"BLD",9075,"KRN",8994,"NM","B","HMP APPOINTMENTS",1)

"BLD",9075,"KRN",8994,"NM","B","HMP CHKXTMP",37)

"BLD",9075,"KRN",8994,"NM","B","HMP DATA VERSION",2)

"BLD",9075,"KRN",8994,"NM","B","HMP DEFAULT PATIENT LIST",41)

"BLD",9075,"KRN",8994,"NM","B","HMP DELETE OBJECT",3)

"BLD",9075,"KRN",8994,"NM","B","HMP DELETE ROSTER",4)

"BLD",9075,"KRN",8994,"NM","B","HMP GET CHECKSUM",5)

"BLD",9075,"KRN",8994,"NM","B","HMP GET OBJECT",6)

"BLD",9075,"KRN",8994,"NM","B","HMP GET OPERATIONAL DATA",7)

"BLD",9075,"KRN",8994,"NM","B","HMP GET PATIENT DATA",8)

"BLD",9075,"KRN",8994,"NM","B","HMP GET PATIENT DATA JSON",9)

"BLD",9075,"KRN",8994,"NM","B","HMP GET REFERENCE DATA",10)

"BLD",9075,"KRN",8994,"NM","B","HMP GET ROSTER LIST",11)

"BLD",9075,"KRN",8994,"NM","B","HMP GET SOURCE",12)

"BLD",9075,"KRN",8994,"NM","B","HMP GLOBAL SIZE",38)

"BLD",9075,"KRN",8994,"NM","B","HMP INPATIENTS",13)

"BLD",9075,"KRN",8994,"NM","B","HMP LOCAL CORRESPONDINGIDS",34)

"BLD",9075,"KRN",8994,"NM","B","HMP LOCAL GETCORRESPONDINGIDS",35)

"BLD",9075,"KRN",8994,"NM","B","HMP PATIENT ACTIVITY",14)

"BLD",9075,"KRN",8994,"NM","B","HMP PATIENT ADMIT SYNC",40)

"BLD",9075,"KRN",8994,"NM","B","HMP PATIENT SCHED SYNC",39)

"BLD",9075,"KRN",8994,"NM","B","HMP PREVIEW ROSTER",15)

"BLD",9075,"KRN",8994,"NM","B","HMP PUT DEMOGRAPHICS",16)

"BLD",9075,"KRN",8994,"NM","B","HMP PUT OBJECT",17)

"BLD",9075,"KRN",8994,"NM","B","HMP PUT OPERATIONAL DATA",36)

"BLD",9075,"KRN",8994,"NM","B","HMP PUT PATIENT DATA",18)

"BLD",9075,"KRN",8994,"NM","B","HMP ROSTER PATIENTS",19)

"BLD",9075,"KRN",8994,"NM","B","HMP ROSTERS",20)

"BLD",9075,"KRN",8994,"NM","B","HMP SUBSCRIBE",21)

"BLD",9075,"KRN",8994,"NM","B","HMP SUBSCRIBE ROSTERS",22)

"BLD",9075,"KRN",8994,"NM","B","HMP UPDATE ROSTER",23)

"BLD",9075,"KRN",8994,"NM","B","HMP WRITEBACK PT DEM",24)

"BLD",9075,"KRN",8994,"NM","B","HMPCORD RPC",25)

"BLD",9075,"KRN",8994,"NM","B","HMPCPAT RPC",26)

"BLD",9075,"KRN",8994,"NM","B","HMPCPRS RPC",27)

"BLD",9075,"KRN",8994,"NM","B","HMPCRPC RPC",28)

"BLD",9075,"KRN",8994,"NM","B","HMPCRPC RPCCHAIN",29)

"BLD",9075,"KRN",8994,"NM","B","HMPDJFS API",30)

"BLD",9075,"KRN",8994,"NM","B","HMPDJFS DELSUB",31)

"BLD",9075,"KRN",8994,"NM","B","HMPFPTC CHKS",32)

"BLD",9075,"KRN",8994,"NM","B","HMPFPTC LOG",33)

"BLD",9075,"KRN","B",.4,.4)

"BLD",9075,"KRN","B",.401,.401)

"BLD",9075,"KRN","B",.402,.402)

"BLD",9075,"KRN","B",.403,.403)

"BLD",9075,"KRN","B",.5,.5)

"BLD",9075,"KRN","B",.84,.84)

"BLD",9075,"KRN","B",3.6,3.6)

"BLD",9075,"KRN","B",3.8,3.8)

"BLD",9075,"KRN","B",9.2,9.2)

"BLD",9075,"KRN","B",9.8,9.8)

"BLD",9075,"KRN","B",19,19)

"BLD",9075,"KRN","B",19.1,19.1)

"BLD",9075,"KRN","B",101,101)

"BLD",9075,"KRN","B",409.61,409.61)

"BLD",9075,"KRN","B",771,771)

"BLD",9075,"KRN","B",779.2,779.2)

"BLD",9075,"KRN","B",870,870)

"BLD",9075,"KRN","B",8989.51,8989.51)

"BLD",9075,"KRN","B",8989.52,8989.52)

"BLD",9075,"KRN","B",8994,8994)

"BLD",9075,"QDEF")
^^^^NO^^^^YES^^NO
"BLD",9075,"QUES",0)
^9.62^^
"BLD",9075,"REQB",0)
^9.611^7^7
"BLD",9075,"REQB",1,0)
MD*1.0*38^2
"BLD",9075,"REQB",2,0)
OR*3.0*390^2
"BLD",9075,"REQB",3,0)
PSB*3.0*79^2
"BLD",9075,"REQB",4,0)
TIU*1.0*106^2
"BLD",9075,"REQB",5,0)
GMRC*3.0*80^2
"BLD",9075,"REQB",6,0)
TIU*1.0*298^2
"BLD",9075,"REQB",7,0)
USR*1.0*37^2
"BLD",9075,"REQB","B","GMRC*3.0*80",5)

"BLD",9075,"REQB","B","MD*1.0*38",1)

"BLD",9075,"REQB","B","OR*3.0*390",2)

"BLD",9075,"REQB","B","PSB*3.0*79",3)

"BLD",9075,"REQB","B","TIU*1.0*106",4)

"BLD",9075,"REQB","B","TIU*1.0*298",6)

"BLD",9075,"REQB","B","USR*1.0*37",7)

"DATA",800000.21,1,0)
ACUITY CODE^ac^acuityCode
"DATA",800000.21,2,0)
STATUS CODE^sc^statusCode
"DATA",800000.21,3,0)
INTERPRETATION^int^interpretation
"DATA",800000.21,4,0)
RESULT STATUS^rs^resultStatus
"DATA",800000.21,5,0)
INTERPRETATION CODE^ic^interpretationCode
"DATA",800000.21,6,0)
PATIENT CLASS CODE^pcc^patientClassCode
"DATA",800000.21,7,0)
CATEGORY CODE^cc^categoryCode
"DATA",800000.21,8,0)
MEDICATION STATUS^ms^medStatus
"DATA",800000.21,9,0)
MEDICATION TYPE^mt^medType
"DATA",800000.21,10,0)
INGREDIENT ROLE^ir^ingredientRole
"DATA",800000.22,1,0)
ACUITY CODE^ac^acuityCode
"DATA",800000.22,2,0)
STATUS CODE^sc^statusCode
"DATA",800000.22,3,0)
INTERPRETATION^int^interpretation
"DATA",800000.22,4,0)
RESULT STATUS^rs^resultStatus
"DATA",800000.22,5,0)
INTERPRETATION CODE^ic^interpretationCode
"DATA",800000.22,6,0)
PATIENT CLASS CODE^pcc^patientClassCode
"DATA",800000.22,7,0)
CATEGORY CODE^cc^categoryCode
"DATA",800000.22,8,0)
MEDICATION STATUS^ms^medStatus
"DATA",800000.22,9,0)
MEDICATION TYPE^mt^medType
"DATA",800000.22,10,0)
INGREDIENT ROLE^ir^ingredientRole
"FIA",800000)
HMP SUBSCRIPTION
"FIA",800000,0)
^HMP(800000,
"FIA",800000,0,0)
800000
"FIA",800000,0,1)
y^y^f^^^^n^^
"FIA",800000,0,10)

"FIA",800000,0,11)

"FIA",800000,0,"RLRO")

"FIA",800000,0,"VR")
2.0^HMP
"FIA",800000,800000)
0
"FIA",800000,800000.01)
0
"FIA",800000,800000.02)
0
"FIA",800000,800000.14)
0
"FIA",800000,800000.142)
0
"FIA",800000.1)
HMP PATIENT OBJECT
"FIA",800000.1,0)
^HMP(800000.1,
"FIA",800000.1,0,0)
800000.1
"FIA",800000.1,0,1)
y^y^f^^^^n^^
"FIA",800000.1,0,10)

"FIA",800000.1,0,11)

"FIA",800000.1,0,"RLRO")

"FIA",800000.1,0,"VR")
2.0^HMP
"FIA",800000.1,800000.1)
0
"FIA",800000.1,800000.101)
0
"FIA",800000.11)
HMP OBJECT
"FIA",800000.11,0)
^HMP(800000.11,
"FIA",800000.11,0,0)
800000.11
"FIA",800000.11,0,1)
y^y^f^^^^y^m^n
"FIA",800000.11,0,10)

"FIA",800000.11,0,11)

"FIA",800000.11,0,"RLRO")

"FIA",800000.11,0,"VR")
2.0^HMP
"FIA",800000.11,800000.11)
0
"FIA",800000.11,800000.111)
0
"FIA",800000.2)
HMP LIST
"FIA",800000.2,0)
^HMPD(800000.2,
"FIA",800000.2,0,0)
800000.2
"FIA",800000.2,0,1)
y^y^f^^n^^y^m^n
"FIA",800000.2,0,10)

"FIA",800000.2,0,11)

"FIA",800000.2,0,"RLRO")

"FIA",800000.2,0,"VR")
2.0^HMP
"FIA",800000.2,800000.2)
0
"FIA",800000.2,800000.202)
0
"FIA",800000.2,800000.203)
0
"FIA",800000.2,800000.209)
0
"FIA",800000.21)
HMP LIST DOMAIN
"FIA",800000.21,0)
^HMPD(800000.21,
"FIA",800000.21,0,0)
800000.21
"FIA",800000.21,0,1)
y^y^f^^n^^y^m^n
"FIA",800000.21,0,10)

"FIA",800000.21,0,11)

"FIA",800000.21,0,"RLRO")

"FIA",800000.21,0,"VR")
2.0^HMP
"FIA",800000.21,800000.21)
0
"FIA",800000.22)
HMP LIST ATTRIBUTE
"FIA",800000.22,0)
^HMPD(800000.22,
"FIA",800000.22,0,0)
800000.22
"FIA",800000.22,0,1)
y^y^f^^n^^y^m^n
"FIA",800000.22,0,10)

"FIA",800000.22,0,11)

"FIA",800000.22,0,"RLRO")

"FIA",800000.22,0,"VR")
2.0^HMP
"FIA",800000.22,800000.22)
0
"FIA",800001)
HMP PANEL
"FIA",800001,0)
^HMPPANEL(
"FIA",800001,0,0)
800001P
"FIA",800001,0,1)
y^y^f^^^^n^^
"FIA",800001,0,10)

"FIA",800001,0,11)

"FIA",800001,0,"RLRO")

"FIA",800001,0,"VR")
2.0^HMP
"FIA",800001,800001)
0
"FIA",800001,800001.05)
0
"FIA",800001.2)
HMP ROSTER
"FIA",800001.2,0)
^HMPROSTR(800001.2,
"FIA",800001.2,0,0)
800001.2
"FIA",800001.2,0,1)
y^y^f^^^^n^^
"FIA",800001.2,0,10)

"FIA",800001.2,0,11)

"FIA",800001.2,0,"RLRO")

"FIA",800001.2,0,"VR")
2.0^HMP
"FIA",800001.2,800001.2)
0
"FIA",800001.2,800001.21)
0
"FIA",800001.2,800001.23)
0
"FIA",800001.5)
HMP ACTIVITY
"FIA",800001.5,0)
^HMP(800001.5,"PTAPPT",
"FIA",800001.5,0,0)
800001.5P
"FIA",800001.5,0,1)
y^y^f^^^^n^^
"FIA",800001.5,0,10)

"FIA",800001.5,0,11)

"FIA",800001.5,0,"RLRO")

"FIA",800001.5,0,"VR")
2.0^HMP
"FIA",800001.5,800001.5)
0
"INI")
PRE^HMPP3I
"INIT")
POST^HMPP3I
"IX",800000,800000,"ADFN",0)
800000^ADFN^Patients to track in the Data Monitor^MU^^R^IR^W^800000.01^^^^^S
"IX",800000,800000,"ADFN",.1,0)
^^1^1^3151203^
"IX",800000,800000,"ADFN",.1,1,0)
This index will place the entry in the data monitor for this PATIENT.
"IX",800000,800000,"ADFN",1)
D HMPSET^HMPDJFS(.DA,.X)
"IX",800000,800000,"ADFN",1.4)
S X=0 I +X(1)>0 S X=1
"IX",800000,800000,"ADFN",2)
D HMPKILL^HMPDJFS(.DA,.X)
"IX",800000,800000,"ADFN",2.4)
S X=0 I X(1)'="" S X=1
"IX",800000,800000,"ADFN",2.5)
K ^HMP(800000,"AITEM")
"IX",800000,800000,"ADFN",11.1,0)
^.114IA^2^2
"IX",800000,800000,"ADFN",11.1,1,0)
1^F^800000.01^.01^^1^F
"IX",800000,800000,"ADFN",11.1,2,0)
2^F^800000.01^2^^^F
"IX",800000,800000,"AITEM",0)
800000^AITEM^Index of operational data by server^MU^^F^IR^I^800000^^^^^A
"IX",800000,800000,"AITEM",.1,0)
^^2^2^3151204^
"IX",800000,800000,"AITEM",.1,1,0)
This cross-reference provides the index that is used to find operational 
"IX",800000,800000,"AITEM",.1,2,0)
data for each HMP server.
"IX",800000,800000,"AITEM",1)
D HMPOSET^HMPDJFS(DA,X)
"IX",800000,800000,"AITEM",1.4)
I X(1)'=""
"IX",800000,800000,"AITEM",2)
D HMPOKILL^HMPDJFS(DA)
"IX",800000,800000,"AITEM",2.4)
I X(1)'=""
"IX",800000,800000,"AITEM",2.5)
K ^HMP(800000,"AITEM")
"IX",800000,800000,"AITEM",11.1,0)
^.114IA^1^1
"IX",800000,800000,"AITEM",11.1,1,0)
1^F^800000^.03^^^F
"IX",800000,800000,"AROS",0)
800000^AROS^Rosters to track in the Data Monitor^MU^^R^IR^W^800000.02^^^^^S
"IX",800000,800000,"AROS",.1,0)
^^1^1^3150922^
"IX",800000,800000,"AROS",.1,1,0)
Cross-reference of rosters for groups of patients on wards.
"IX",800000,800000,"AROS",1)
S:X2(2) ^HMP(800000,"AROS",X,DA(1))=""
"IX",800000,800000,"AROS",2)
K:X1(2) ^HMP(800000,"AROS",X,DA(1))
"IX",800000,800000,"AROS",2.5)
K ^HMP(800000,"AROS")
"IX",800000,800000,"AROS",11.1,0)
^.114IA^2^2
"IX",800000,800000,"AROS",11.1,1,0)
1^F^800000.02^.01^^1^F
"IX",800000,800000,"AROS",11.1,2,0)
2^F^800000.02^2^^2^
"IX",800000,800000.01,"AP",0)
800000.01^AP^Subscribed patients by server not yet initialized.^R^^R^IR^I^800000.01^^^^^S
"IX",800000,800000.01,"AP",.1,0)
^^6^6^3140521^
"IX",800000,800000.01,"AP",.1,1,0)
This index lists the patients who are not yet initialized:
"IX",800000,800000.01,"AP",.1,2,0)
 
"IX",800000,800000.01,"AP",.1,3,0)
  SERVER_IEN, "AP", STATUS, STATUS TIME, DFN
"IX",800000,800000.01,"AP",.1,4,0)
 
"IX",800000,800000.01,"AP",.1,5,0)
Patients with an initialized status (STATUS = 2) do not appear in this 
"IX",800000,800000.01,"AP",.1,6,0)
index.
"IX",800000,800000.01,"AP",1)
S ^HMP(800000,DA(1),1,"AP",X(1),X(2),DA)=""
"IX",800000,800000.01,"AP",1.4)
S X=(+X2(1)<2)
"IX",800000,800000.01,"AP",2)
K ^HMP(800000,DA(1),1,"AP",X(1),X(2),DA)
"IX",800000,800000.01,"AP",2.5)
K ^HMP(800000,DA(1),1,"AP")
"IX",800000,800000.01,"AP",11.1,0)
^.114IA^2^2
"IX",800000,800000.01,"AP",11.1,1,0)
1^F^800000.01^2^^1^F
"IX",800000,800000.01,"AP",11.1,2,0)
2^F^800000.01^3^^2^F
"IX",800000.1,800000.1,"C",0)
800000.1^C^Index by patient, collection^R^^R^IR^I^800000.1^^^^^LS
"IX",800000.1,800000.1,"C",.1,0)
^^1^1^3150923^
"IX",800000.1,800000.1,"C",.1,1,0)
Index by patient, collection.
"IX",800000.1,800000.1,"C",1)
S ^HMP(800000.1,"C",X(1),X(2),DA)=""
"IX",800000.1,800000.1,"C",2)
K ^HMP(800000.1,"C",X(1),X(2),DA)
"IX",800000.1,800000.1,"C",2.5)
K ^HMP(800000.1,"C")
"IX",800000.1,800000.1,"C",11.1,0)
^.114IA^2^2
"IX",800000.1,800000.1,"C",11.1,1,0)
1^F^800000.1^.02^^1^F
"IX",800000.1,800000.1,"C",11.1,2,0)
2^F^800000.1^.03^^2^F
"IX",800001.2,800001.21,"AC",0)
800001.21^AC^SORT BY SEQUENCE^R^^F^IR^I^800001.21^^^^^S
"IX",800001.2,800001.21,"AC",1)
Q
"IX",800001.2,800001.21,"AC",2)
Q
"KRN",3.8,418,-1)
0^1
"KRN",3.8,418,0)
HMP IRM GROUP^PU^y^^^^
"KRN",3.8,418,2,0)
^3.801^5^5^3150624^^^
"KRN",3.8,418,2,1,0)
This is the mail group that will receive alerts from the eHMP subscription
"KRN",3.8,418,2,2,0)
process if the usage of global ^XTMP reaches the limit allowed and begins 
"KRN",3.8,418,2,3,0)
to pause subscriptions until disk space is available. The mail group also
"KRN",3.8,418,2,4,0)
also receives notifications when disk space is available and subscriptions 
"KRN",3.8,418,2,5,0)
are proceeding normally again.
"KRN",3.8,418,3)

"KRN",19,14321,-1)
0^6
"KRN",19,14321,0)
HMP UI CONTEXT^HMP UI Context Version 0.7-S62^^B^^^^^^^^
"KRN",19,14321,1,0)
^19.06^1^1^3140618^^
"KRN",19,14321,1,1,0)
This option allows the HMP UI access to the VistA system.
"KRN",19,14321,99.1)
62990,29647
"KRN",19,14321,"RPC",0)
^19.05P^55^55
"KRN",19,14321,"RPC",1,0)
HMPCORD RPC
"KRN",19,14321,"RPC",2,0)
HMPCPAT RPC
"KRN",19,14321,"RPC",3,0)
HMPFPTC CHKS
"KRN",19,14321,"RPC",4,0)
HMPFPTC LOG
"KRN",19,14321,"RPC",5,0)
HMP APPOINTMENTS
"KRN",19,14321,"RPC",6,0)
HMP DATA VERSION
"KRN",19,14321,"RPC",7,0)
HMP DELETE ROSTER
"KRN",19,14321,"RPC",8,0)
HMP GET PATIENT DATA
"KRN",19,14321,"RPC",9,0)
HMP GET SOURCE
"KRN",19,14321,"RPC",10,0)
HMP INPATIENTS
"KRN",19,14321,"RPC",11,0)
HMP PREVIEW ROSTER
"KRN",19,14321,"RPC",12,0)
HMP ROSTER PATIENTS
"KRN",19,14321,"RPC",13,0)
HMP ROSTERS
"KRN",19,14321,"RPC",14,0)
HMP SUBSCRIBE
"KRN",19,14321,"RPC",15,0)
HMP UPDATE ROSTER
"KRN",19,14321,"RPC",16,0)
HMPCRPC RPC
"KRN",19,14321,"RPC",19,0)
XHD GET PARAMETER DEF LIST
"KRN",19,14321,"RPC",20,0)
HMP PUT PATIENT DATA
"KRN",19,14321,"RPC",21,0)
HMP PUT OBJECT
"KRN",19,14321,"RPC",22,0)
HMP DELETE OBJECT
"KRN",19,14321,"RPC",23,0)
HMP GET OBJECT
"KRN",19,14321,"RPC",24,0)
HMP GET ROSTER LIST
"KRN",19,14321,"RPC",25,0)
HMPCPRS RPC
"KRN",19,14321,"RPC",26,0)
ORQPT WARDS
"KRN",19,14321,"RPC",27,0)
ORQPT WARD PATIENTS
"KRN",19,14321,"RPC",28,0)
ORQPT SPECIALTIES
"KRN",19,14321,"RPC",29,0)
ORQPT SPECIALTY PATIENTS
"KRN",19,14321,"RPC",30,0)
ORWU CLINLOC
"KRN",19,14321,"RPC",31,0)
ORQPT CLINIC PATIENTS
"KRN",19,14321,"RPC",32,0)
ORWU NEWPERS
"KRN",19,14321,"RPC",33,0)
ORQPT PROVIDER PATIENTS
"KRN",19,14321,"RPC",34,0)
ORWRP COLUMN HEADERS
"KRN",19,14321,"RPC",35,0)
ORWLR CUMULATIVE REPORT
"KRN",19,14321,"RPC",36,0)
ORWLRR INTERIM
"KRN",19,14321,"RPC",37,0)
ORWRP REPORT TEXT
"KRN",19,14321,"RPC",38,0)
ORWRP3 EXPAND COLUMNS
"KRN",19,14321,"RPC",39,0)
HMP PUT DEMOGRAPHICS
"KRN",19,14321,"RPC",40,0)
HMPCRPC RPCCHAIN
"KRN",19,14321,"RPC",41,0)
ORQPT DEFAULT PATIENT LIST
"KRN",19,14321,"RPC",42,0)
ORWU USERINFO
"KRN",19,14321,"RPC",43,0)
YTQ ALLKEYS
"KRN",19,14321,"RPC",44,0)
ORWPT BYWARD
"KRN",19,14321,"RPC",45,0)
ORQQPX REMINDERS LIST
"KRN",19,14321,"RPC",46,0)
ORQQPX REMINDER DETAIL
"KRN",19,14321,"RPC",47,0)
ORQQPL4 LEX
"KRN",19,14321,"RPC",48,0)
ORWRP REPORT LISTS
"KRN",19,14321,"RPC",49,0)
HMP PATIENT ADMIT SYNC
"KRN",19,14321,"RPC",50,0)
HMP PATIENT SCHED SYNC
"KRN",19,14321,"RPC",51,0)
ORWPT LIST ALL
"KRN",19,14321,"RPC",52,0)
ORWPT APPTLST
"KRN",19,14321,"RPC",53,0)
HMP CHKXTMP
"KRN",19,14321,"RPC",54,0)
HMP GLOBAL SIZE
"KRN",19,14321,"RPC",55,0)
HMP DEFAULT PATIENT LIST
"KRN",19,14321,"U")
HMP UI CONTEXT VERSION 0.7-S62
"KRN",19,14322,-1)
0^5
"KRN",19,14322,0)
HMP SYNCHRONIZATION CONTEXT^Synchronize the HMP^^B^^^^^^^^
"KRN",19,14322,1,0)
^^2^2^3150923^
"KRN",19,14322,1,1,0)
This option manages access to RPCs responsible for synchronization of eHMP
"KRN",19,14322,1,2,0)
data with VistA.
"KRN",19,14322,99.1)
63904,40853
"KRN",19,14322,"RPC",0)
^19.05P^25^25
"KRN",19,14322,"RPC",2,0)
HMP DATA VERSION
"KRN",19,14322,"RPC",4,0)
HMP SUBSCRIBE
"KRN",19,14322,"RPC",5,0)
HMP GET PATIENT DATA JSON
"KRN",19,14322,"RPC",7,0)
HMP GET OBJECT
"KRN",19,14322,"RPC",8,0)
HMP GET OPERATIONAL DATA
"KRN",19,14322,"RPC",10,0)
HMP PUT OBJECT
"KRN",19,14322,"RPC",19,0)
HMPDJFS API
"KRN",19,14322,"RPC",20,0)
HMPDJFS DELSUB
"KRN",19,14322,"RPC",21,0)
HMP GET CHECKSUM
"KRN",19,14322,"RPC",22,0)
HMP PATIENT ACTIVITY
"KRN",19,14322,"RPC",23,0)
HMP LOCAL GETCORRESPONDINGIDS
"KRN",19,14322,"RPC",24,0)
ORWU USERINFO
"KRN",19,14322,"RPC",25,0)
VAFC LOCAL GETCORRESPONDINGIDS
"KRN",19,14322,"U")
SYNCHRONIZE THE HMP
"KRN",19,14323,-1)
0^3
"KRN",19,14323,0)
HMP PATIENT ACTIVITY^Patient Appointments^^B^^^^^^^^
"KRN",19,14323,1,0)
^^1^1^3150923^
"KRN",19,14323,1,1,0)
Return appointments for a subscribed patient.
"KRN",19,14323,25)
ACT^HMPACT
"KRN",19,14323,"RPC",0)
^19.05P^1^1
"KRN",19,14323,"RPC",1,0)
HMP PATIENT ACTIVITY
"KRN",19,14323,"U")
PATIENT APPOINTMENTS
"KRN",19,14324,-1)
0^1
"KRN",19,14324,0)
HMP APPLICATION PROXY^HMP Application Proxy^^B^^^^^^^^
"KRN",19,14324,1,0)
^19.06^1^1^3110602^^^^
"KRN",19,14324,1,1,0)
This option allows the HMP connector proxy access to the VistA system.
"KRN",19,14324,99.1)
62971,33865
"KRN",19,14324,"RPC",0)
^19.05P^4^4
"KRN",19,14324,"RPC",2,0)
HMP GET PATIENT DATA
"KRN",19,14324,"RPC",3,0)
HMP DATA VERSION
"KRN",19,14324,"RPC",4,0)
HMP SUBSCRIBE
"KRN",19,14324,"U")
HMP APPLICATION PROXY
"KRN",19,14325,-1)
0^2
"KRN",19,14325,0)
HMP APPOINTMENTS^Return List of Tomorrow's Patients^^A^^^^^^^^^^1
"KRN",19,14325,1,0)
^19.06^3^3^3151124^^
"KRN",19,14325,1,1,0)
This option is intended to be scheduled to run nightly, to notify the
"KRN",19,14325,1,2,0)
Enterprise Health Management Platform (HMP) of patients that are 
"KRN",19,14325,1,3,0)
expected to be seen tomorrow.
"KRN",19,14325,20)
D APPT^HMPPATS
"KRN",19,14325,200.9)
y
"KRN",19,14325,"U")
RETURN LIST OF TOMORROW'S PATI
"KRN",19,14326,-1)
0^4
"KRN",19,14326,0)
HMP PATIENT DATA MONITOR^HMP Patient Data Monitor^^A^^^^^^^^^^1
"KRN",19,14326,1,0)
^^4^4^3151204^
"KRN",19,14326,1,1,0)
This option manages the HMP Patient Data Monitor background job.  It first
"KRN",19,14326,1,2,0)
checks to see if the job is running, and will prompt the user to start it
"KRN",19,14326,1,3,0)
if it's stopped. It may also be used to stop the job, but the eHMP client
"KRN",19,14326,1,4,0)
may not display up-to-date data until it is started again.
"KRN",19,14326,20)
D EN^HMPHTTP
"KRN",19,14326,"U")
HMP PATIENT DATA MONITOR
"KRN",19,14327,-1)
0^8
"KRN",19,14327,0)
HMP XU EVENTS^New Person Events for HMP^^A^^^^^^^^^^1
"KRN",19,14327,1,0)
^^1^1^3130116^
"KRN",19,14327,1,1,0)
This protocol will track New Person updates for HMP.
"KRN",19,14327,20)
D XU^HMPEVNT(XUIEN,"")
"KRN",19,14327,"U")
NEW PERSON EVENTS FOR HMP
"KRN",19,14328,-1)
0^10
"KRN",19,14328,0)
HMPM ADD HMP USER^Add Health Management Platform User^^A^^^^^^^^^^1
"KRN",19,14328,1,0)
^^4^4^3140326^
"KRN",19,14328,1,1,0)
This option allows a user to be given access to use the Health Management
"KRN",19,14328,1,2,0)
Platform.  The selected user will be given the HMP UI CONTEXT option.
"KRN",19,14328,1,3,0)
Additionally, their default patient list my be set up for automatic
"KRN",19,14328,1,4,0)
synchronization with the Health Management Platform (HMP).
"KRN",19,14328,20)
D OPTASGN^HMPCAC
"KRN",19,14328,"U")
ADD HEALTH MANAGEMENT PLATFORM
"KRN",19,14329,-1)
0^12
"KRN",19,14329,0)
HMPM EXTRACT MONITOR^Monitor HMP Server Synchronization^^A^^^^^^^^^^1
"KRN",19,14329,1,0)
^^2^2^3140402^
"KRN",19,14329,1,1,0)
This option allow one to monitor the polls from an HMP server and any 
"KRN",19,14329,1,2,0)
currently executing HMP extracts.
"KRN",19,14329,20)
D EN^HMPDJFSM
"KRN",19,14329,"U")
MONITOR HMP SERVER SYNCHRONIZA
"KRN",19,14330,-1)
0^11
"KRN",19,14330,0)
HMPM EMERGENCY STOP^Emergency Stop HMP Freshness Updates^^A^^^^^^^^^^1
"KRN",19,14330,1,0)
^^5^5^3140403^
"KRN",19,14330,1,1,0)
This option should be used with caution.  It will stop the freshness 
"KRN",19,14330,1,2,0)
events for the ENTERPRISE HEALTH MANAGEMENT PLATFORM (HMP) from being called.  Once the 
"KRN",19,14330,1,3,0)
freshness events are stopped, patient data must be re-synchronized with
"KRN",19,14330,1,4,0)
the HMP to ensure completeness.  Only stop freshness updates if there is a
"KRN",19,14330,1,5,0)
problem with system operation.
"KRN",19,14330,20)
D EMERSTOP^HMPDJFSM
"KRN",19,14330,"U")
EMERGENCY STOP HMP FRESHNESS U
"KRN",19,14331,-1)
0^9
"KRN",19,14331,0)
HMPM ADD HMP PATIENT^Manually Add Patient to HMP^^A^^^^^^^^^^1
"KRN",19,14331,1,0)
^^2^2^3151204^
"KRN",19,14331,1,1,0)
Use this option to manually add a patient for synchronization with the 
"KRN",19,14331,1,2,0)
Enterprise Health Management Platform (eHMP).
"KRN",19,14331,20)
D ADDPT^HMPDJFSM
"KRN",19,14331,"U")
MANUALLY ADD PATIENT TO HMP
"KRN",19,14332,-1)
0^14
"KRN",19,14332,0)
HMPMGR^HMP Technical Management^^M^^^^^^^^
"KRN",19,14332,1,0)
^19.06^1^1^3150923^^^
"KRN",19,14332,1,1,0)
This menu contains various options to help with the management of HMP.
"KRN",19,14332,10,0)
^19.01IP^12^12
"KRN",19,14332,10,1,0)
14328
"KRN",19,14332,10,1,"^")
HMPM ADD HMP USER
"KRN",19,14332,10,2,0)
14331
"KRN",19,14332,10,2,"^")
HMPM ADD HMP PATIENT
"KRN",19,14332,10,3,0)
14329
"KRN",19,14332,10,3,"^")
HMPM EXTRACT MONITOR
"KRN",19,14332,10,4,0)
14336
"KRN",19,14332,10,4,"^")
HMP MONITOR FOR XTMP GLOBAL
"KRN",19,14332,10,5,0)
14325
"KRN",19,14332,10,5,"^")
HMP APPOINTMENTS
"KRN",19,14332,10,6,0)
14323
"KRN",19,14332,10,6,"^")
HMP PATIENT ACTIVITY
"KRN",19,14332,10,7,0)
14326
"KRN",19,14332,10,7,"^")
HMP PATIENT DATA MONITOR
"KRN",19,14332,10,8,0)
14335
"KRN",19,14332,10,8,"^")
HMP WB DOMAINS
"KRN",19,14332,10,9,0)
14334
"KRN",19,14332,10,9,"^")
HMP WB PTDEM
"KRN",19,14332,10,10,0)
14327
"KRN",19,14332,10,10,"^")
HMP XU EVENTS
"KRN",19,14332,10,11,0)
14330
"KRN",19,14332,10,11,"^")
HMPM EMERGENCY STOP
"KRN",19,14332,10,12,0)
14333
"KRN",19,14332,10,12,"^")
HMPM RESTART FRESHNESS
"KRN",19,14332,99)
63971,39356
"KRN",19,14332,"U")
HMP TECHNICAL MANAGEMENT
"KRN",19,14333,-1)
0^13
"KRN",19,14333,0)
HMPM RESTART FRESHNESS^Resume Freshness Updates That Have Been Stopped^^A^^^^^^^^^^1
"KRN",19,14333,1,0)
^19.06^4^4^3151208^^^
"KRN",19,14333,1,1,0)
This option will remove the flags that cause freshness updates to be 
"KRN",19,14333,1,2,0)
stopped.  It will likely be necessary to re-synchronized patients after 
"KRN",19,14333,1,3,0)
freshness has been stopped, since updates will be missing from the time 
"KRN",19,14333,1,4,0)
that freshness updates were not being received.
"KRN",19,14333,20)
D RSTRTFR^HMPDJFSM
"KRN",19,14333,"U")
RESUME FRESHNESS UPDATES THAT 
"KRN",19,14334,-1)
0^7
"KRN",19,14334,0)
HMP WB PTDEM^HMP Writeback Patient Demograhpics^^B^^^^^^^^
"KRN",19,14334,1,0)
1^19.06^1^1^3150923^
"KRN",19,14334,1,1,0)
This option allows eHMP to change patient phone numbers in VistA.
"KRN",19,14334,25)
FILE^HMPPTDEM
"KRN",19,14334,"RPC",0)
^19.05P^1^1
"KRN",19,14334,"RPC",1,0)
HMP WRITEBACK PT DEM
"KRN",19,14334,"U")
HMP WRITEBACK PATIENT DEMOGRAH
"KRN",19,14335,-1)
0^16
"KRN",19,14335,0)
HMP WB DOMAINS^Writeback of Domain Data to Vista^^B^^^^^^^^
"KRN",19,14335,1,0)
^^1^1^3150923^
"KRN",19,14335,1,1,0)
Writes domain data to VistA.
"KRN",19,14335,25)
HMPWB
"KRN",19,14335,"RPC",0)
^19.05P^1^1
"KRN",19,14335,"RPC",1,0)
HMP PUT OPERATIONAL DATA
"KRN",19,14335,"U")
WRITEBACK OF DOMAIN DATA TO VI
"KRN",19,14336,-1)
0^17
"KRN",19,14336,0)
HMP MONITOR FOR XTMP GLOBAL^XTMP Global Monitor^^A^^^^^^^^^^1
"KRN",19,14336,1,0)
^^2^2^3151204^
"KRN",19,14336,1,1,0)
This option will monitor the amount of space in the ^XTMP global used by
"KRN",19,14336,1,2,0)
the eHMP.  The amount used is very dynamic.
"KRN",19,14336,20)
D MON^HMPTOOLS
"KRN",19,14336,"U")
XTMP GLOBAL MONITOR
"KRN",19.1,693,-1)
0^2
"KRN",19.1,693,0)
HMP EXPERIMENTAL^For testing new features
"KRN",19.1,693,1,0)
^^1^1^3150923^
"KRN",19.1,693,1,1,0)
This key is used to isolate new features for site testing.
"KRN",19.1,694,-1)
0^1
"KRN",19.1,694,0)
HMP ADMIN^Can manage HMP subscriptions
"KRN",19.1,694,1,0)
^^2^2^3150923^
"KRN",19.1,694,1,1,0)
This key is used to determine which HMP users should be allowed to
"KRN",19.1,694,1,2,0)
manage subscriptions and the subscription queue.
"KRN",101,1240,-1)
2^33
"KRN",101,1240,0)
DGPM MOVEMENT EVENTS^MOVEMENT EVENTS v 5.0^^X^1^^^^^^^114
"KRN",101,1240,10,0)
^101.01PA^38^38
"KRN",101,1240,10,38,0)
6096^^^
"KRN",101,1240,10,38,"^")
HMP INPT EVENTS
"KRN",101,1302,-1)
2^34
"KRN",101,1302,0)
SDAM APPOINTMENT EVENTS^Appointment Event Driver^^X^1^^^^^^^16
"KRN",101,1302,10,0)
^101.01PA^20^20
"KRN",101,1302,10,20,0)
6093^^^
"KRN",101,1302,10,20,"^")
HMP APPT EVENTS
"KRN",101,2690,-1)
2^35
"KRN",101,2690,0)
RA EVSEND OR^Radiology event sent to OE/RR^^X^1^^^^^^^31
"KRN",101,2690,10,0)
^101.01PA^4^4
"KRN",101,2690,10,4,0)
6098^^^
"KRN",101,2690,10,4,"^")
HMP XQOR EVENTS
"KRN",101,2700,-1)
2^36
"KRN",101,2700,0)
PXK VISIT DATA EVENT^VISIT RELATED DATA^^X^1^^^^^^^
"KRN",101,2700,10,0)
^101.01PA^6^6
"KRN",101,2700,10,6,0)
6097^^^
"KRN",101,2700,10,6,"^")
HMP PCE EVENTS
"KRN",101,2894,-1)
2^37
"KRN",101,2894,0)
GMRA SIGN-OFF ON DATA^Sign-off on Reaction Data^^X^1^^^^^^^247
"KRN",101,2894,10,0)
^101.01PA^2^2
"KRN",101,2894,10,2,0)
6099^^^
"KRN",101,2894,10,2,"^")
HMP GMRA EVENTS
"KRN",101,2896,-1)
2^38
"KRN",101,2896,0)
GMRA ENTERED IN ERROR^Reaction Data Entered in Error^^X^1^^^^^^^247
"KRN",101,2896,10,0)
^101.01PA^2^2
"KRN",101,2896,10,2,0)
6099^^^
"KRN",101,2896,10,2,"^")
HMP GMRA EVENTS
"KRN",101,2905,-1)
2^39
"KRN",101,2905,0)
SCMC PATIENT TEAM CHANGES^PCMM Patient Team Update Event Driver^^X^1^^^^^^^16
"KRN",101,2905,10,0)
^101.01PA^2^2
"KRN",101,2905,10,2,0)
6103^^^
"KRN",101,2905,10,2,"^")
HMP PCMM TEAM
"KRN",101,2906,-1)
2^40
"KRN",101,2906,0)
SCMC PATIENT TEAM POSITION CHANGES^PCMM Patient Team Position Update Event Driver^^X^1^^^^^^^
"KRN",101,2906,10,0)
^101.01PA^2^2
"KRN",101,2906,10,2,0)
6104^^^
"KRN",101,2906,10,2,"^")
HMP PCMM TEAM POSITION
"KRN",101,3336,-1)
2^41
"KRN",101,3336,0)
LR7O CH EVSEND OR^LAB => OE/RR ORDER MESSAGE EVENT^^X^1^^^^^^^
"KRN",101,3336,10,0)
^101.01PA^4^4
"KRN",101,3336,10,4,0)
6098^^^
"KRN",101,3336,10,4,"^")
HMP XQOR EVENTS
"KRN",101,3373,-1)
2^42
"KRN",101,3373,0)
PS EVSEND OR^Send Pharmacy orders to CPRS.^^X^1^^^^^^^18
"KRN",101,3373,10,0)
^101.01PA^6^6
"KRN",101,3373,10,6,0)
6098^^^
"KRN",101,3373,10,6,"^")
HMP XQOR EVENTS
"KRN",101,3392,-1)
2^31
"KRN",101,3392,0)
GMRC EVSEND OR^Consults event sent to OE/RR^^X^1^^^^^^^294
"KRN",101,3392,10,0)
^101.01PA^6^6
"KRN",101,3392,10,6,0)
6098^^^
"KRN",101,3392,10,6,"^")
HMP XQOR EVENTS
"KRN",101,3411,-1)
2^43
"KRN",101,3411,0)
FH EVSEND OR^FH --> OR event messages^^X^1^^^^^^^
"KRN",101,3411,10,0)
^101.01PA^4^4
"KRN",101,3411,10,4,0)
6098^^^
"KRN",101,3411,10,4,"^")
HMP XQOR EVENTS
"KRN",101,3529,-1)
2^44
"KRN",101,3529,0)
OR EVSEND RA^OE/RR => RAD/NM MESSAGE EVENT^^X^1^^^^^^^
"KRN",101,3529,10,0)
^101.01PA^4^4
"KRN",101,3529,10,4,0)
6100^^^
"KRN",101,3529,10,4,"^")
HMP NA EVENTS
"KRN",101,3530,-1)
2^32
"KRN",101,3530,0)
OR EVSEND LRCH^OE/RR => LAB MESSAGE EVENT^^X^1^^^^^^^
"KRN",101,3530,10,0)
^101.01PA^4^4
"KRN",101,3530,10,4,0)
6100^^^
"KRN",101,3530,10,4,"^")
HMP NA EVENTS
"KRN",101,3535,-1)
2^45
"KRN",101,3535,0)
OR EVSEND FH^OE/RR => DIET MESSAGE EVENT^^X^1^^^^^^^
"KRN",101,3535,10,0)
^101.01PA^4^4
"KRN",101,3535,10,4,0)
6100^^^
"KRN",101,3535,10,4,"^")
HMP NA EVENTS
"KRN",101,3536,-1)
2^46
"KRN",101,3536,0)
OR EVSEND ORG^OE/RR => GENERIC MESSAGE EVENT^^X^1^^^^^^^
"KRN",101,3536,10,0)
^101.01PA^4^4
"KRN",101,3536,10,4,0)
6098^^^
"KRN",101,3536,10,4,"^")
HMP XQOR EVENTS
"KRN",101,3537,-1)
2^47
"KRN",101,3537,0)
OR EVSEND PS^OE/RR => PHARMACY MESSAGE EVENT^^X^1^^^^^^^
"KRN",101,3537,10,0)
^101.01PA^4^4
"KRN",101,3537,10,4,0)
6100^^^
"KRN",101,3537,10,4,"^")
HMP NA EVENTS
"KRN",101,3539,-1)
2^48
"KRN",101,3539,0)
OR EVSEND GMRC^OE/RR => CONSULTS MESSAGE EVENT^^X^1^^^^^^^
"KRN",101,3539,10,0)
^101.01PA^6^6
"KRN",101,3539,10,6,0)
6100^^^
"KRN",101,3539,10,6,"^")
HMP NA EVENTS
"KRN",101,4717,-1)
2^49
"KRN",101,4717,0)
DG FIELD MONITOR^DG Field Monitor^^X^1^^^^^^^114
"KRN",101,4717,10,0)
^101.01PA^5^5
"KRN",101,4717,10,5,0)
6094^^^
"KRN",101,4717,10,5,"^")
HMP DG UPDATES
"KRN",101,6022,-1)
2^27
"KRN",101,6022,0)
GMPL EVENT^Problem List Update Event^^X^1^^^^^^^402
"KRN",101,6022,10,0)
^101.01PA^1^1
"KRN",101,6022,10,1,0)
6095^^^
"KRN",101,6022,10,1,"^")
HMP GMPL EVENT
"KRN",101,6088,-1)
2^29
"KRN",101,6088,0)
MDC OBSERVATION UPDATE^Observation update notification^^X^1^^^^^^^557
"KRN",101,6088,10,0)
^101.01PA^23^1
"KRN",101,6088,10,23,0)
6101^^^
"KRN",101,6088,10,23,"^")
HMP MDC EVENT
"KRN",101,6088,775,0)
^101.0775PA^^
"KRN",101,6089,-1)
2^28
"KRN",101,6089,0)
OR EVSEND VPR^OE/RR => VPR MESSAGE EVENT^^X^1^^^^^^^
"KRN",101,6089,10,0)
^101.01PA^20^1
"KRN",101,6089,10,20,0)
6098^^^
"KRN",101,6089,10,20,"^")
HMP XQOR EVENTS
"KRN",101,6090,-1)
2^30
"KRN",101,6090,0)
PSB EVSEND VPR^MEDICATION ADMINISTRATION EVENTS^^X^1^^^^^^^
"KRN",101,6090,10,0)
^101.01PA^18^1
"KRN",101,6090,10,18,0)
6102^^^
"KRN",101,6090,10,18,"^")
HMP PSB EVENTS
"KRN",101,6091,-1)
0^1
"KRN",101,6091,0)
HMP ADT-A04 CLIENT^HMP HL7 ADT-A04 Client^^S^^^^^^^^
"KRN",101,6091,1,0)
^101.06^10^10^3151110^^^^
"KRN",101,6091,1,1,0)
This client protocol is used to process HL7 ADT/A04 messages published by 
"KRN",101,6091,1,2,0)
the VAFC ADT-A04 SERVER protocol.
"KRN",101,6091,1,3,0)
 
"KRN",101,6091,1,4,0)
The client causes a HMP 'freshness' event for each new patient 
"KRN",101,6091,1,5,0)
registration that occurs. This is especially important for new patients, 
"KRN",101,6091,1,6,0)
as it is the only MAS event mechanism available that can be used to 
"KRN",101,6091,1,7,0)
discover new patient entries.
"KRN",101,6091,1,8,0)
 
"KRN",101,6091,1,9,0)
Note: The ROUTING LOGIC does not send any HL7 messages. As mentioned 
"KRN",101,6091,1,10,0)
above, It adds a HMP (Health Management Platform) 'freshness' event.
"KRN",101,6091,4)
^^^HMP ADT-A04 CLIENT
"KRN",101,6091,99)
63971,39356
"KRN",101,6091,770)
^HMP HL7^^^^^^^^^ADT
"KRN",101,6091,774)
D ADT^HMPEHL7($G(HLFS),HLNEXT,$G(HLNODE),HLQUIT)
"KRN",101,6091,775,0)
^101.0775PA
"KRN",101,6092,-1)
0^2
"KRN",101,6092,0)
HMP ADT-A08 CLIENT^HMP HL7 ADT-A08 Client^^S^^^^^^^^
"KRN",101,6092,1,0)
^101.06^10^10^3151110^^^
"KRN",101,6092,1,1,0)
This client protocol is used to process HL7 ADT/A08 messages published by 
"KRN",101,6092,1,2,0)
the VAFC ADT-A08 SERVER protocol.
"KRN",101,6092,1,3,0)
 
"KRN",101,6092,1,4,0)
The client filters A08 events. It adds to the HMP 'freshness' queue only
"KRN",101,6092,1,5,0)
if the A08 was the result of the patient's sensitivity being modified via
"KRN",101,6092,1,6,0)
the DG SECURITY EDIT/EDIT option. All other A08 events are ignored and
"KRN",101,6092,1,7,0)
should not add to the 'freshness' queue.
"KRN",101,6092,1,8,0)
 
"KRN",101,6092,1,9,0)
Note: The ROUTING LOGIC does not send any HL7 messages. As mentioned 
"KRN",101,6092,1,10,0)
above, It adds a HMP (Health Management Platform) 'freshness' event.
"KRN",101,6092,4)
^^^
"KRN",101,6092,99)
63971,39356
"KRN",101,6092,770)
^HMP HL7^^^^^^^^^ADT
"KRN",101,6092,774)
D ADT^HMPEHL7($G(HLFS),HLNEXT,$G(HLNODE),HLQUIT)
"KRN",101,6093,-1)
0^3
"KRN",101,6093,0)
HMP APPT EVENTS^Appointment events for HMP^^A^^^^^^^^
"KRN",101,6093,1,0)
^101.06^1^1^3151028^^^^
"KRN",101,6093,1,1,0)
This protocol will track appointments for HMP.
"KRN",101,6093,4)
^^^HMP APPT EVENTS
"KRN",101,6093,20)
D SDAM^HMPEVNT(SDATA)
"KRN",101,6093,99)
63971,39356
"KRN",101,6094,-1)
0^4
"KRN",101,6094,0)
HMP DG UPDATES^DG updates for HMP^^A^^^^^^^^
"KRN",101,6094,1,0)
^101.06^1^1^3151028^^^^
"KRN",101,6094,1,1,0)
This protocol will track Patient file changes for HMP.
"KRN",101,6094,4)
^^^HMP APPT EVENTS
"KRN",101,6094,20)
D DG^HMPEVNT(DGDA,DGFIELD,DGFILE)
"KRN",101,6094,99)
63971,39356
"KRN",101,6095,-1)
0^5
"KRN",101,6095,0)
HMP GMPL EVENT^Problem List events for HMP^^A^^^^^^^^
"KRN",101,6095,1,0)
^101.06^1^1^3110823^^^^
"KRN",101,6095,1,1,0)
This protocol will track new and updated problems for HMP.
"KRN",101,6095,4)
^^^HMP GMPL EVENT
"KRN",101,6095,20)
D GMPL^HMPEVNT(DFN,GMPIFN)
"KRN",101,6095,99)
63971,39356
"KRN",101,6096,-1)
0^7
"KRN",101,6096,0)
HMP INPT EVENTS^Inpatient Movement events for HMP^^A^^^^^^^^
"KRN",101,6096,1,0)
^101.06^1^1^3151028^^^^
"KRN",101,6096,1,1,0)
This protocol will track patient admissions and discharges for HMP.
"KRN",101,6096,20)
D DGPM^HMPEVNT(DGPMA,DGPMDA,DGPMP,DGPMT)
"KRN",101,6096,99)
63971,39356
"KRN",101,6097,-1)
0^11
"KRN",101,6097,0)
HMP PCE EVENTS^PCE events for HMP^^A^^^^^^^^
"KRN",101,6097,1,0)
^101.06^1^1^3101129^^^
"KRN",101,6097,1,1,0)
This protocol will track PCE visit data for HMP.
"KRN",101,6097,20)
D PCE^HMPEVNT
"KRN",101,6097,99)
63971,39356
"KRN",101,6098,-1)
0^15
"KRN",101,6098,0)
HMP XQOR EVENTS^XQOR HL7 events for HMP^^A^^^^^^^^
"KRN",101,6098,1,0)
^101.06^3^3^3101129^^
"KRN",101,6098,1,1,0)
This protocol monitors order events for HMP.  It is placed on the 
"KRN",101,6098,1,2,0)
* EVSEND OR protocols to check for updates being sent from ancillary
"KRN",101,6098,1,3,0)
packages to Order Entry; it monitors when orders are completed.
"KRN",101,6098,20)
D XQOR^HMPEVNT(.XQORMSG)
"KRN",101,6098,99)
63971,39356
"KRN",101,6099,-1)
0^6
"KRN",101,6099,0)
HMP GMRA EVENTS^Allergy Events for HMP^^A^^^^^^^^
"KRN",101,6099,1,0)
^101.06^1^1^3120822^^
"KRN",101,6099,1,1,0)
This protocol will track Allergy data updates for HMP.
"KRN",101,6099,20)
D GMRA^HMPEVNT("")
"KRN",101,6099,99)
63971,39356
"KRN",101,6100,-1)
0^9
"KRN",101,6100,0)
HMP NA EVENTS^XQOR HL7 events for HMP^^A^^^^^^^^
"KRN",101,6100,1,0)
^101.06^3^3^3110818^^^
"KRN",101,6100,1,1,0)
This protocol monitors order events for HMP.  It is placed on the 
"KRN",101,6100,1,2,0)
OR EVSEND * protocols to check for order numbers assigned to new orders
"KRN",101,6100,1,3,0)
placed from the ancillary packages.
"KRN",101,6100,20)
D NA^HMPEVNT(.XQORMSG)
"KRN",101,6100,99)
63971,39356
"KRN",101,6101,-1)
0^8
"KRN",101,6101,0)
HMP MDC EVENT^CLiO events for HMP^^A^^^^^^^^
"KRN",101,6101,1,0)
^101.06^1^1^3120830^^^^
"KRN",101,6101,1,1,0)
This protocol will track new and updated observations for HMP.
"KRN",101,6101,20)
D MDC^HMPEVNT(.MDCOBS)
"KRN",101,6101,99)
63971,39356
"KRN",101,6102,-1)
0^14
"KRN",101,6102,0)
HMP PSB EVENTS^BCMA events for HMP^^A^^^^^^^^
"KRN",101,6102,1,0)
^101.06^1^1^3151028^^^^
"KRN",101,6102,1,1,0)
This protocol will track medication administrations for HMP.
"KRN",101,6102,20)
D PSB^HMPEVNT(.PSBIEN)
"KRN",101,6102,99)
63971,39356
"KRN",101,6103,-1)
0^12
"KRN",101,6103,0)
HMP PCMM TEAM^PCMM Team events for HMP^^A^^^^^^^^
"KRN",101,6103,20)
D PCMMT^HMPEVNT(SCPTTMAF,SCPTTMB4)
"KRN",101,6103,99)
63971,39356
"KRN",101,6104,-1)
0^13
"KRN",101,6104,0)
HMP PCMM TEAM POSITION^PCMM Team Position events for HMP^^A^^^^^^^^
"KRN",101,6104,20)
D PCMMTP^HMPEVNT(SCPTTPAF,SCPTTPB4)
"KRN",101,6104,99)
63971,39356
"KRN",101,6105,-1)
0^17
"KRN",101,6105,0)
HMPM EVT QUE MGR MENU^VPR Freshness Queue Viewer^^M^^^^^^^^
"KRN",101,6105,1,0)
^101.06^1^1^3151109^^^
"KRN",101,6105,1,1,0)
Main protocol menu used by the VPRM EVT QUE MGR ListMan template.
"KRN",101,6105,4)
26^4
"KRN",101,6105,10,0)
^101.01PA^9^9
"KRN",101,6105,10,1,0)
6107^^^
"KRN",101,6105,10,1,"^")
HMPM EVT QUE FRESHNESS REPORT
"KRN",101,6105,10,2,0)
6108^^^
"KRN",101,6105,10,2,"^")
HMPM EVT QUE CHANGE DOMAIN
"KRN",101,6105,10,3,0)
6109^^^
"KRN",101,6105,10,3,"^")
HMPM EVT QUE REFRESH
"KRN",101,6105,10,4,0)
6110^^^
"KRN",101,6105,10,4,"^")
HMPM EVT QUE DISPLAY DETAILS
"KRN",101,6105,10,5,0)
6111^^^
"KRN",101,6105,10,5,"^")
HMPM EVT QUE FILTER
"KRN",101,6105,10,6,0)
6112^^^
"KRN",101,6105,10,6,"^")
HMPM EVT QUE SHOW TEMP GLOBALS
"KRN",101,6105,10,7,0)
6113^^^
"KRN",101,6105,10,7,"^")
HMPM EVT QUE SELECT PATIENT
"KRN",101,6105,10,8,0)
6114^^^
"KRN",101,6105,10,8,"^")
HMPM EVT QUE CHANGE MAX LISTED
"KRN",101,6105,10,9,0)
6106^^^
"KRN",101,6105,10,9,"^")
HMPM EVT QUE CHANGE SERVER
"KRN",101,6105,20)
S XQORM("B")="Update"
"KRN",101,6105,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^",1),24)) ^(24)
"KRN",101,6105,26)
D SHOW^VALM
"KRN",101,6105,28)
Select Action:
"KRN",101,6105,99)
63971,39356
"KRN",101,6106,-1)
0^25
"KRN",101,6106,0)
HMPM EVT QUE CHANGE SERVER^Change Server^^A^^^^^^^^
"KRN",101,6106,1,0)
^101.06^2^2^3151109^^
"KRN",101,6106,1,1,0)
Allows user to change which server's freshness queue events to display in 
"KRN",101,6106,1,2,0)
the viewer.
"KRN",101,6106,10,0)
^101.01PA^1^1
"KRN",101,6106,10,1,0)
6107^^^
"KRN",101,6106,10,1,"^")
HMPM EVT QUE FRESHNESS REPORT
"KRN",101,6106,20)
D CS^HMPEQLM
"KRN",101,6106,99)
63971,39356
"KRN",101,6107,-1)
0^22
"KRN",101,6107,0)
HMPM EVT QUE FRESHNESS REPORT^Freshness Report^^A^^^^^^^^
"KRN",101,6107,1,0)
^^1^1^3140716^
"KRN",101,6107,1,1,0)
View overview freshness queue information for all HMP servers.
"KRN",101,6107,20)
D FSHRPT^HMPEQLM
"KRN",101,6107,99)
63971,39356
"KRN",101,6108,-1)
0^16
"KRN",101,6108,0)
HMPM EVT QUE CHANGE DOMAIN^Change Domain^^A^^^^^^^^
"KRN",101,6108,1,0)
^^3^3^3140716^
"KRN",101,6108,1,1,0)
Allows user to indicate only freshness events for a particular domain, 
"KRN",101,6108,1,2,0)
like med, task, visit, etc., or all domains should be listed in 
"KRN",101,6108,1,3,0)
freshness viewer.
"KRN",101,6108,20)
D CD^HMPEQLM
"KRN",101,6108,99)
63971,39356
"KRN",101,6109,-1)
0^24
"KRN",101,6109,0)
HMPM EVT QUE REFRESH^Update^^A^^^^^^^^
"KRN",101,6109,1,0)
^101.06^2^2^3140716^^
"KRN",101,6109,1,1,0)
Refresh/update the current list of freshness queue events using the 
"KRN",101,6109,1,2,0)
current criteria/filters specified.
"KRN",101,6109,20)
D REFRESH^HMPEQLM
"KRN",101,6109,99)
63971,39356
"KRN",101,6110,-1)
0^23
"KRN",101,6110,0)
HMPM EVT QUE DISPLAY DETAILS^Display Details^^A^^^^^^^^
"KRN",101,6110,1,0)
^^1^1^3140716^
"KRN",101,6110,1,1,0)
Display details related to an event listed in the freshness queue viewer.
"KRN",101,6110,20)
D DETAIL^HMPEQLM
"KRN",101,6110,99)
63971,39356
"KRN",101,6111,-1)
0^21
"KRN",101,6111,0)
HMPM EVT QUE FILTER^Filter Events^^A^^^^^^^^
"KRN",101,6111,1,0)
^^3^3^3140716^
"KRN",101,6111,1,1,0)
Allows user to indicate only freshness events with a state of 
"KRN",101,6111,1,2,0)
'processed' or 'waiting to be processed' or all events should be listed in
"KRN",101,6111,1,3,0)
freshness viewer.
"KRN",101,6111,20)
D FILTER^HMPEQLM
"KRN",101,6111,99)
63971,39356
"KRN",101,6112,-1)
0^20
"KRN",101,6112,0)
HMPM EVT QUE SHOW TEMP GLOBALS^Temp Global Usage^^A^^^^^^^^
"KRN",101,6112,1,0)
^101.06^4^4^3140716^^
"KRN",101,6112,1,1,0)
Show VPR temporary global usage report. 
"KRN",101,6112,1,2,0)
 
"KRN",101,6112,1,3,0)
The report displays summary information related to VPR processing use of 
"KRN",101,6112,1,4,0)
^XTMP and ^TMP globals.
"KRN",101,6112,20)
D SHOWHMPN^HMPEQLM
"KRN",101,6112,99)
63971,39356
"KRN",101,6113,-1)
0^19
"KRN",101,6113,0)
HMPM EVT QUE SELECT PATIENT^Select Patient^^A^^^^^^^^
"KRN",101,6113,1,0)
^^2^2^3140716^
"KRN",101,6113,1,1,0)
Allows user to specify that only the freshness events for the selected 
"KRN",101,6113,1,2,0)
patient should be used in the freshness queue event viewer.
"KRN",101,6113,20)
D SELPT^HMPEQLM
"KRN",101,6113,99)
63971,39356
"KRN",101,6114,-1)
0^18
"KRN",101,6114,0)
HMPM EVT QUE CHANGE MAX LISTED^Change Max Limit^^A^^^^^^^^
"KRN",101,6114,1,0)
^^2^2^3140716^
"KRN",101,6114,1,1,0)
Allows user to select the maximum events to display in the freshness 
"KRN",101,6114,1,2,0)
queue viewer. (10 - 1000)
"KRN",101,6114,20)
D CM^HMPEQLM
"KRN",101,6114,99)
63971,39356
"KRN",101,6115,-1)
0^26
"KRN",101,6115,0)
HMP DGPF ASSIGN FLAG^^^A^^^^^^^^HEALTH MANAGEMENT PLATFORM
"KRN",101,6115,1,0)
^101.06^2^2^3150422^^
"KRN",101,6115,1,1,0)
Used to trigger a JDS update when the DGPF ASSIGN FLAG action protocol is used.
"KRN",101,6115,1,2,0)
A patient must have been selected and the DFN value is in DGDFN.
"KRN",101,6115,20)
I $G(DGDFN),$L($T(POST^HMPEVNT)) D POST^HMPEVNT(DGDFN,"patient",DGDFN)
"KRN",409.61,801,-1)
0^1
"KRN",409.61,801,0)
HMPM EVT QUE MGR^1^^80^7^18^1^1^Event^HMPM EVT QUE MGR MENU^HMP Freshness Event Viewer^1^^1
"KRN",409.61,801,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,801,"COL",0)
^409.621^4^4
"KRN",409.61,801,"COL",1,0)
ID^2^4^ITEM
"KRN",409.61,801,"COL",2,0)
SEQ^7^8^SEQ
"KRN",409.61,801,"COL",3,0)
NODE^19^62^Event Node
"KRN",409.61,801,"COL",4,0)
STATE^17^1
"KRN",409.61,801,"COL","B","ID",1)

"KRN",409.61,801,"COL","B","NODE",3)

"KRN",409.61,801,"COL","B","SEQ",2)

"KRN",409.61,801,"COL","B","STATE",4)

"KRN",409.61,801,"FNL")
D EXIT^HMPEQLM
"KRN",409.61,801,"HDR")
D HDR^HMPEQLM
"KRN",409.61,801,"HLP")
D HELP^HMPEQLM
"KRN",409.61,801,"INIT")
D INIT^HMPEQLM
"KRN",771,235,-1)
0^1
"KRN",771,235,0)
HMP HL7^a^^^^^USA
"KRN",8989.5,15362,0)
578;DIC(9.4,^HMP VERSION^1
"KRN",8989.5,15362,1)
2.00
"KRN",8989.5,15363,0)
578;DIC(9.4,^HMP JSON SCHEMA^1
"KRN",8989.5,15363,1)
3.001
"KRN",8989.51,844,-1)
0^9
"KRN",8989.51,844,0)
HMP VERSION^HMP Version^^^Version:
"KRN",8989.51,844,1)
N^1:99:2^Enter the current version number of the HMP data extracts.
"KRN",8989.51,844,6)
F
"KRN",8989.51,844,20,0)
^8989.512^3^3^3141016^^
"KRN",8989.51,844,20,1,0)
This parameter holds the current version number of the eHMP Patient
"KRN",8989.51,844,20,2,0)
Record (HMP) data extract RPC's, in the form V.PP where V is the
"KRN",8989.51,844,20,3,0)
package version number and PP is the latest patch number.
"KRN",8989.51,844,30,0)
^8989.513I^1^1
"KRN",8989.51,844,30,1,0)
1^9.4
"KRN",8989.51,844,30,2,0)
1^200
"KRN",8989.51,845,-1)
0^7
"KRN",8989.51,845,0)
HMP SYSTEM NAME^Hashed System Name
"KRN",8989.51,845,1)
F^1:10^Enter the CRC hashed name for this system.
"KRN",8989.51,845,20,0)
^^3^3^3130905^
"KRN",8989.51,845,20,1,0)
This parameter holds the name of this VistA system, as a hashed base 16
"KRN",8989.51,845,20,2,0)
value.  It is calculated by a HMP patch post-init and stuffed into the
"KRN",8989.51,845,20,3,0)
SYStem level value, and should NOT be modified.
"KRN",8989.51,845,30,0)
^8989.513I^1^1
"KRN",8989.51,845,30,1,0)
1^4.2
"KRN",8989.51,846,-1)
0^4
"KRN",8989.51,846,0)
HMP PARAMETERS^HMP SYSTEM PARAMETERS^1^System Parameters^System Parameters Name
"KRN",8989.51,846,1)
W
"KRN",8989.51,846,6)
F
"KRN",8989.51,846,20,0)
^8989.512^2^2^3120125^^^
"KRN",8989.51,846,20,1,0)
This parameter stores a list of parameters used by the HMP middle teir 
"KRN",8989.51,846,20,2,0)
and the HMP UI.
"KRN",8989.51,846,20,3,0)
whenever the schema changes in a way that requires a conversion or 
"KRN",8989.51,846,20,4,0)
re-extraction of objects.  The fractional piece increments whenever the 
"KRN",8989.51,846,20,5,0)
schema is extended.
"KRN",8989.51,846,30,0)
^8989.513I^2^2
"KRN",8989.51,846,30,1,0)
6^4.2
"KRN",8989.51,846,30,2,0)
1^200
"KRN",8989.51,847,-1)
0^1
"KRN",8989.51,847,0)
HMP CPRS PATH^CPRS Location^0^FREE TEXT^PIV Link Message after success
"KRN",8989.51,847,1)
W
"KRN",8989.51,847,6)
F
"KRN",8989.51,847,30,0)
^8989.513I^2^2
"KRN",8989.51,847,30,1,0)
1^200
"KRN",8989.51,847,30,2,0)
4^4.2
"KRN",8989.51,848,-1)
0^2
"KRN",8989.51,848,0)
HMP JSON SCHEMA^HMP JSON Extract Schema^^^JSON Schema Version
"KRN",8989.51,848,1)
N^1:999:4^Enter the version / build number for the HMP Schema
"KRN",8989.51,848,20,0)
^^5^5^3141022^
"KRN",8989.51,848,20,1,0)
This contains the version number of the HMP schema which describes the
"KRN",8989.51,848,20,2,0)
JSON objects produced by the HMP extracts.  The whole number increments
"KRN",8989.51,848,20,3,0)
whenever the schema changes in a way that requires a conversion or
"KRN",8989.51,848,20,4,0)
re-extraction of objects.  The fractional piece increments whenever the
"KRN",8989.51,848,20,5,0)
schema is extended.
"KRN",8989.51,848,30,0)
^8989.513I^1^1
"KRN",8989.51,848,30,1,0)
1^9.4
"KRN",8989.51,849,-1)
0^3
"KRN",8989.51,849,0)
HMP LOCATIONS^HMP Locations^1^Clinic^Synchronized
"KRN",8989.51,849,1)
Y
"KRN",8989.51,849,6)
P^44^Enter clinic to synch with HMP
"KRN",8989.51,849,30,0)
^8989.513I^1^1
"KRN",8989.51,849,30,1,0)
5^4
"KRN",8989.51,850,-1)
0^8
"KRN",8989.51,850,0)
HMP TASK WAIT TIME^HMP TASK WAIT TIME^^^#SECONDS
"KRN",8989.51,850,1)
N^1:9999^Enter the number of seconds to wait before the HMP Data Monitor re-queues
"KRN",8989.51,850,4,0)
^8989.514^1^1
"KRN",8989.51,850,4,1,0)
HMP
"KRN",8989.51,850,4,"B","HMP",1)

"KRN",8989.51,850,6)
F
"KRN",8989.51,850,20,0)
^^2^2^3141022^
"KRN",8989.51,850,20,1,0)
This is the number of seconds that the system will wait before re-queuing
"KRN",8989.51,850,20,2,0)
the HMP Data Monitor background job.
"KRN",8989.51,850,30,0)
^8989.513I^2^2
"KRN",8989.51,850,30,1,0)
1^9.4
"KRN",8989.51,850,30,2,0)
2^4.2
"KRN",8989.51,851,-1)
0^10
"KRN",8989.51,851,0)
HMP DOMAIN SIZES^HMP Average Domain Sizes^1^Domain^Size (in bytes)
"KRN",8989.51,851,1)
N^0:9999999999:0^Enter the average size in bytes for each domain item.
"KRN",8989.51,851,6)
F^1:30^Enter the internal name for the domain (3rd UID piece).
"KRN",8989.51,851,20,0)
^^3^3^3150225^
"KRN",8989.51,851,20,1,0)
 This parameter contains a list of VPR extract domains and their average
"KRN",8989.51,851,20,2,0)
 sizes.  The sizes are used in computing the approximate size of an item
"KRN",8989.51,851,20,3,0)
 with limiting the freshness calls by size.
"KRN",8989.51,851,30,0)
^8989.513I^1^1
"KRN",8989.51,851,30,1,0)
10^9.4
"KRN",8989.51,852,-1)
0^11
"KRN",8989.51,852,0)
HMP EXTRACT DISK SIZE LIMIT^Extracts Size Limit (MBs)^^^HMP XTMP Megabytes
"KRN",8989.51,852,1)
N^10:2000:0^Enter the # of megabytes of data that triggers a requeue (10-2000)
"KRN",8989.51,852,20,0)
^^16^16^3150225^
"KRN",8989.51,852,20,1,0)
Maximum size (megabytes) of all VPR extracts in ^XTMP("VPRFX~*") waiting
"KRN",8989.51,852,20,2,0)
 to be sent to HMP servers as part of getPtUpdates.
"KRN",8989.51,852,20,3,0)
 
"KRN",8989.51,852,20,4,0)
 If maximum is reached, patient domain extract TasKman jobs will be
"KRN",8989.51,852,20,5,0)
 requeued to a future time, as specified in the VPR EXTRACT TASK REQUEUE
"KRN",8989.51,852,20,6,0)
 SECS parameter. At that time, this maximum check will be performed again.
"KRN",8989.51,852,20,7,0)
 
"KRN",8989.51,852,20,8,0)
 Also, this maximum check occurs when an executing extract job is about to
"KRN",8989.51,852,20,9,0)
 start another domain extract. If maximum size has been reached, the job
"KRN",8989.51,852,20,10,0)
 will hang the number of seconds specified by the VPR EXTRACT TASK REQUEUE
"KRN",8989.51,852,20,11,0)
 SECS parameter. The maximum check will occur again after the hang time
"KRN",8989.51,852,20,12,0)
 has expired.
"KRN",8989.51,852,20,13,0)
 
"KRN",8989.51,852,20,14,0)
 This limit is needed to insure the ^XTMP global does not get too big
"KRN",8989.51,852,20,15,0)
 during initial/resync domain extract processing and cause disk full 
"KRN",8989.51,852,20,16,0)
 errors.
"KRN",8989.51,852,30,0)
^8989.513I^1^1
"KRN",8989.51,852,30,1,0)
1^4.2
"KRN",8989.51,853,-1)
0^12
"KRN",8989.51,853,0)
HMP EXTRACT TASK REQUEUE SECS^seconds to requeue task or hang job^^^Requeue/Hang seconds
"KRN",8989.51,853,1)
N^5:60:0^Enter 5 to 60 seconds
"KRN",8989.51,853,20,0)
^^11^11^3150225^
"KRN",8989.51,853,20,1,0)
When extract task cannot be run because of possible ^XTMP disk concerns,
"KRN",8989.51,853,20,2,0)
 this parameter is used to requeue the task to a future date/time or hang
"KRN",8989.51,853,20,3,0)
 an extract job currently executing.
"KRN",8989.51,853,20,4,0)
 
"KRN",8989.51,853,20,5,0)
 ^XTMP disk space frees up as other already generated extracts are sent to
"KRN",8989.51,853,20,6,0)
 the various HMP servers.
"KRN",8989.51,853,20,7,0)
 
"KRN",8989.51,853,20,8,0)
 Allowed Values:  5 to 60     (5 seconds to 1 minute)
"KRN",8989.51,853,20,9,0)
 
"KRN",8989.51,853,20,10,0)
        Default: 10           (if parameter not set)
"KRN",8989.51,853,20,11,0)
    Initialized: 10           (set in post-init during first install)
"KRN",8989.51,853,30,0)
^8989.513I^1^1
"KRN",8989.51,853,30,1,0)
1^4.2
"KRN",8994,3434,-1)
0^14
"KRN",8994,3434,0)
HMP PATIENT ACTIVITY^ACT^HMPACT^2^S
"KRN",8994,3434,1,0)
^8994.01^2^2^3140903^^^
"KRN",8994,3434,1,1,0)
This remote procedure returns all JSON messages for entries that exist in
"KRN",8994,3434,1,2,0)
 the cross reference ^HMP(800001.5,"PTAPPT,"HMP"
"KRN",8994,3435,-1)
0^1
"KRN",8994,3435,0)
HMP APPOINTMENTS^OUT^HMPPATS^4^S^^^1^^^1
"KRN",8994,3435,1,0)
^8994.01^2^2^3141016^^^^
"KRN",8994,3435,1,1,0)
This RPC finds a list of patients that have scheduled appointments during
"KRN",8994,3435,1,2,0)
the requested timeframe, as XML in ^TMP($J,"HMP",n).
"KRN",8994,3435,2,0)
^8994.02A^2^2
"KRN",8994,3435,2,1,0)
START^1^20^0^1
"KRN",8994,3435,2,1,1,0)
^8994.021^2^2^3101129^^^
"KRN",8994,3435,2,1,1,1,0)
The date/time from which to begin searching for appointments; optional,
"KRN",8994,3435,2,1,1,2,0)
will default to tomorrow if not defined.
"KRN",8994,3435,2,2,0)
STOP^1^20^0^2
"KRN",8994,3435,2,2,1,0)
^8994.021^2^2^3141016^^^
"KRN",8994,3435,2,2,1,1,0)
The date/time at which to end searching for appointments; optional,
"KRN",8994,3435,2,2,1,2,0)
will default to tomorrow if not defined.
"KRN",8994,3435,2,"B","START",1)

"KRN",8994,3435,2,"B","STOP",2)

"KRN",8994,3435,2,"PARAMSEQ",1,1)

"KRN",8994,3435,2,"PARAMSEQ",2,2)

"KRN",8994,3435,3,0)
^8994.03^1^1^3141016^^^
"KRN",8994,3435,3,1,0)
Text array formatted XML
"KRN",8994,3436,-1)
0^2
"KRN",8994,3436,0)
HMP DATA VERSION^VERSION^HMPD^1^S^^^^^^1
"KRN",8994,3436,1,0)
^^2^2^3110613^
"KRN",8994,3436,1,1,0)
This RPC returns the current version of the XML returned by the RPC
"KRN",8994,3436,1,2,0)
'HMP GET PATIENT DATA.'
"KRN",8994,3436,3,0)
^^2^2^3110613^
"KRN",8994,3436,3,1,0)
A string identifying the version of the HMP data extracts and the
"KRN",8994,3436,3,2,0)
resulting XML.
"KRN",8994,3437,-1)
0^3
"KRN",8994,3437,0)
HMP DELETE OBJECT^DEL^HMPDJ2^1^S^^^1^1^^1
"KRN",8994,3437,1,0)
^8994.01^2^2^3130103^^^^
"KRN",8994,3437,1,1,0)
This RPC receives a Uid from the client and deletes the object from the
"KRN",8994,3437,1,2,0)
HMP Object file #800000.11.
"KRN",8994,3437,2,0)
^8994.02A^2^1
"KRN",8994,3437,2,2,0)
UID^1^100^1^1
"KRN",8994,3437,2,2,1,0)
^8994.021^1^1^3130103^^^^
"KRN",8994,3437,2,2,1,1,0)
The Uid of the object being deleted.
"KRN",8994,3437,2,"B","UID",2)

"KRN",8994,3437,2,"PARAMSEQ",1,2)

"KRN",8994,3437,3,0)
^8994.03^1^1^3130103^^^^
"KRN",8994,3437,3,1,0)
Text array formatted as JSON
"KRN",8994,3438,-1)
0^4
"KRN",8994,3438,0)
HMP DELETE ROSTER^DELROS^HMPROS3^1^S^^^^1.2
"KRN",8994,3438,1,0)
^^1^1^3151208^
"KRN",8994,3438,1,1,0)
Used to delete an entry in the HMP ROSTER file (#800001.2).
"KRN",8994,3438,2,0)
^8994.02A^1^1
"KRN",8994,3438,2,1,0)
HMPIEN^1^100^1^1
"KRN",8994,3438,2,1,1,0)
^8994.021^1^1^3151208^^^^
"KRN",8994,3438,2,1,1,1,0)
Roster IEN.
"KRN",8994,3438,2,"B","HMPIEN",1)

"KRN",8994,3438,2,"B","VPRIEN",1)

"KRN",8994,3438,2,"PARAMSEQ",1,1)

"KRN",8994,3439,-1)
0^5
"KRN",8994,3439,0)
HMP GET CHECKSUM^CHECK^HMPDCRC^4^S^^^0^1^^1
"KRN",8994,3439,1,0)
^^1^1^3141016^
"KRN",8994,3439,1,1,0)
This RPC retrieves the requested data from VistA and returns its checksum.
"KRN",8994,3439,2,0)
^8994.02A^1^1
"KRN",8994,3439,2,1,0)
FILTER^2^^0^1
"KRN",8994,3439,2,1,1,0)
^^1^1^3141016^
"KRN",8994,3439,2,1,1,1,0)
List of name-value pairs defining the search.
"KRN",8994,3439,2,"B","FILTER",1)

"KRN",8994,3439,2,"PARAMSEQ",1,1)

"KRN",8994,3439,3,0)
^^1^1^3141016^
"KRN",8994,3439,3,1,0)
The CRC32 checksum value of the data.
"KRN",8994,3440,-1)
0^6
"KRN",8994,3440,0)
HMP GET OBJECT^GET^HMPDJ2^4^S^^^0^1^^1
"KRN",8994,3440,1,0)
^8994.01^2^2^3121219^^^^
"KRN",8994,3440,1,1,0)
This RPC retrieves the requested data from VistA, and returns it in
"KRN",8994,3440,1,2,0)
^TMP("HMP",$J,n) as JSON.
"KRN",8994,3440,2,0)
^8994.02A^1^1
"KRN",8994,3440,2,1,0)
FILTER^2^^0^1
"KRN",8994,3440,2,1,1,0)
^8994.021^1^1^3121219^^^^
"KRN",8994,3440,2,1,1,1,0)
List of name-value pairs defining the search.
"KRN",8994,3440,2,"B","FILTER",1)

"KRN",8994,3440,2,"PARAMSEQ",1,1)

"KRN",8994,3440,3,0)
^8994.03^1^1^3121219^^^^
"KRN",8994,3440,3,1,0)
Text array formatted as JSON
"KRN",8994,3441,-1)
0^7
"KRN",8994,3441,0)
HMP GET OPERATIONAL DATA^GET^HMPEF^4^S^^^0^1^^1
"KRN",8994,3441,1,0)
^8994.01^2^2^3140929^^^^
"KRN",8994,3441,1,1,0)
This RPC retrieves the requested data from VistA, and returns it in
"KRN",8994,3441,1,2,0)
^TMP("HMP",$J,n) as JSON.
"KRN",8994,3441,2,0)
^8994.02A^1^1
"KRN",8994,3441,2,1,0)
FILTER^2^^0^1
"KRN",8994,3441,2,1,1,0)
^8994.021^1^1^3140929^^^^
"KRN",8994,3441,2,1,1,1,0)
List of name-value pairs defining the search.
"KRN",8994,3441,2,"B","FILTER",1)

"KRN",8994,3441,2,"PARAMSEQ",1,1)

"KRN",8994,3441,3,0)
^8994.03^1^1^3140929^^^^
"KRN",8994,3441,3,1,0)
Text array formatted as JSON
"KRN",8994,3442,-1)
0^8
"KRN",8994,3442,0)
HMP GET PATIENT DATA^GET^HMPD^4^S^^^1^1^^1
"KRN",8994,3442,1,0)
^8994.01^2^2^3110606^^^^
"KRN",8994,3442,1,1,0)
This RPC retrieves the requested data from VistA, and returns it in
"KRN",8994,3442,1,2,0)
^TMP("HMP",$J,n) as XML.
"KRN",8994,3442,2,0)
^8994.02A^7^7
"KRN",8994,3442,2,1,0)
DFN^1^20^1^1
"KRN",8994,3442,2,1,1,0)
^8994.021^2^2^3100203^^
"KRN",8994,3442,2,1,1,1,0)
Internal entry number from Patient file #2
"KRN",8994,3442,2,1,1,2,0)
[optionally DFN;ICN for remote calls]
"KRN",8994,3442,2,2,0)
TYPE^1^100^0^2
"KRN",8994,3442,2,2,1,0)
^8994.021^4^4^3110606^^^
"KRN",8994,3442,2,2,1,1,0)
The kind(s) of data to return, which may include:
"KRN",8994,3442,2,2,1,2,0)
  demographics;reactions;problems;vitals;labs;meds;
"KRN",8994,3442,2,2,1,3,0)
  immunizations;visits;appointments;documents;
"KRN",8994,3442,2,2,1,4,0)
  procedures;consults
"KRN",8994,3442,2,3,0)
START^1^20^0^3
"KRN",8994,3442,2,3,1,0)
^8994.021^1^1^3100203^^
"KRN",8994,3442,2,3,1,1,0)
The date/time from which to begin searching for data [optional].
"KRN",8994,3442,2,4,0)
STOP^1^20^0^4
"KRN",8994,3442,2,4,1,0)
^8994.021^1^1^3100203^^
"KRN",8994,3442,2,4,1,1,0)
The date/time at which to end searching for data [optional].
"KRN",8994,3442,2,5,0)
MAX^1^7^0^5
"KRN",8994,3442,2,5,1,0)
^8994.021^1^1^3100203^^
"KRN",8994,3442,2,5,1,1,0)
The maximum number of items to return per data type [optional].
"KRN",8994,3442,2,6,0)
ITEM^1^30^0^6
"KRN",8994,3442,2,6,1,0)
^8994.021^2^2^3100329^^^
"KRN",8994,3442,2,6,1,1,0)
The identifier of a single item to return [optional, but TYPE must
"KRN",8994,3442,2,6,1,2,0)
also be defined when used].
"KRN",8994,3442,2,7,0)
FILTER^2^^0^7
"KRN",8994,3442,2,7,1,0)
^8994.021^1^1^3110606^^^^
"KRN",8994,3442,2,7,1,1,0)
List of name-value pairs, further refining the search.
"KRN",8994,3442,2,"B","DFN",1)

"KRN",8994,3442,2,"B","FILTER",7)

"KRN",8994,3442,2,"B","ITEM",6)

"KRN",8994,3442,2,"B","MAX",5)

"KRN",8994,3442,2,"B","START",3)

"KRN",8994,3442,2,"B","STOP",4)

"KRN",8994,3442,2,"B","TYPE",2)

"KRN",8994,3442,2,"PARAMSEQ",1,1)

"KRN",8994,3442,2,"PARAMSEQ",2,2)

"KRN",8994,3442,2,"PARAMSEQ",3,3)

"KRN",8994,3442,2,"PARAMSEQ",4,4)

"KRN",8994,3442,2,"PARAMSEQ",5,5)

"KRN",8994,3442,2,"PARAMSEQ",6,6)

"KRN",8994,3442,2,"PARAMSEQ",7,7)

"KRN",8994,3442,3,0)
^8994.03^1^1^3110606^^^^
"KRN",8994,3442,3,1,0)
Text array formatted as XML
"KRN",8994,3443,-1)
0^9
"KRN",8994,3443,0)
HMP GET PATIENT DATA JSON^GET^HMPDJ^4^S^^^0^1^^1
"KRN",8994,3443,1,0)
^8994.01^2^2^3131209^^^^
"KRN",8994,3443,1,1,0)
This RPC retrieves the requested data from VistA, and returns it in
"KRN",8994,3443,1,2,0)
^TMP("HMP",$J,n) as JSON.
"KRN",8994,3443,2,0)
^8994.02A^1^1
"KRN",8994,3443,2,1,0)
FILTER^2^^0^1
"KRN",8994,3443,2,1,1,0)
^8994.021^1^1^3131209^^^^
"KRN",8994,3443,2,1,1,1,0)
List of name-value pairs defining the search.
"KRN",8994,3443,2,"B","FILTER",1)

"KRN",8994,3443,2,"PARAMSEQ",1,1)

"KRN",8994,3443,3,0)
^8994.03^1^1^3131209^^^^
"KRN",8994,3443,3,1,0)
Text array formatted as JSON
"KRN",8994,3444,-1)
0^10
"KRN",8994,3444,0)
HMP GET REFERENCE DATA^GET^HMPEF^4^S^^^0^1^^1
"KRN",8994,3444,1,0)
^^2^2^3131105
"KRN",8994,3444,1,1,0)
This RPC retrieves the requested data from VistA, and returns it in
"KRN",8994,3444,1,2,0)
^TMP("HMP",$J,n) as JSON.
"KRN",8994,3444,2,0)
^8994.02A^1^1
"KRN",8994,3444,2,1,0)
FILTER^2^^0^1
"KRN",8994,3444,2,1,1,0)
^^1^1^3131105
"KRN",8994,3444,2,1,1,1,0)
List of name-value pairs defining the search.
"KRN",8994,3444,2,"B","FILTER",1)

"KRN",8994,3444,2,"PARAMSEQ",1,1)

"KRN",8994,3444,3,0)
^^1^1^3131105
"KRN",8994,3444,3,1,0)
Text array formatted as JSON
"KRN",8994,3445,-1)
0^11
"KRN",8994,3445,0)
HMP GET ROSTER LIST^GET^HMPROS7^4^S^^^^1^^1
"KRN",8994,3445,1,0)
^8994.01^2^2^3151208^^^^
"KRN",8994,3445,1,1,0)
Patient identification data passed in and roster identification returned.
"KRN",8994,3445,1,2,0)
List will contain all rosters associated with patient.
"KRN",8994,3445,2,0)
^8994.02A^2^2
"KRN",8994,3445,2,1,0)
HMP^2^3200^1^1
"KRN",8994,3445,2,1,1,0)
^^1^1^3151208^
"KRN",8994,3445,2,1,1,1,0)
This is the returned result.  It is a literal value.
"KRN",8994,3445,2,2,0)
HMPARRAY^2^3200^1^1
"KRN",8994,3445,2,2,1,0)
^8994.021^2^2^3151208^^
"KRN",8994,3445,2,2,1,1,0)
This is the input array of the roster data that was entered through the 
"KRN",8994,3445,2,2,1,2,0)
GUI.
"KRN",8994,3445,2,"B","HMP",1)

"KRN",8994,3445,2,"B","HMPARRAY",2)

"KRN",8994,3445,2,"B","VPR",1)

"KRN",8994,3445,2,"B","VPRARRAY",2)

"KRN",8994,3445,2,"PARAMSEQ",1,1)

"KRN",8994,3445,2,"PARAMSEQ",1,2)

"KRN",8994,3446,-1)
0^12
"KRN",8994,3446,0)
HMP GET SOURCE^GETSRC^HMPROS4^4^S^^^1^1^^1
"KRN",8994,3446,1,0)
^8994.01^2^2^3150923^^^
"KRN",8994,3446,1,1,0)
Get all source information for requested source.  For example, Request is for Clinics.  Transmit all active clinics
"KRN",8994,3446,1,2,0)
include name and IEN's.
"KRN",8994,3446,2,0)
^8994.02A^2^2
"KRN",8994,3446,2,1,0)
HMPSRC^1^30^1^1
"KRN",8994,3446,2,1,1,0)
^^1^1^3111031^
"KRN",8994,3446,2,1,1,1,0)
Identifies which source information to send to the GUI.
"KRN",8994,3446,2,2,0)
HMPFILT^1^30^0^2
"KRN",8994,3446,2,2,1,0)
^8994.021^1^1^3111103^^
"KRN",8994,3446,2,2,1,1,0)
Text identifying what you are looking for.  Will be used when matching for details.
"KRN",8994,3446,2,"B","HMPFILT",2)

"KRN",8994,3446,2,"B","HMPSRC",1)

"KRN",8994,3446,2,"B","VPRFILT",2)

"KRN",8994,3446,2,"B","VPRSRC",1)

"KRN",8994,3446,2,"PARAMSEQ",1,1)

"KRN",8994,3446,2,"PARAMSEQ",2,2)

"KRN",8994,3446,3,0)
^8994.03^1^1^3111101^^
"KRN",8994,3446,3,1,0)
An array containing names and ien's of source data.
"KRN",8994,3447,-1)
0^13
"KRN",8994,3447,0)
HMP INPATIENTS^IN^HMPPATS^4^S^^^1^^^1
"KRN",8994,3447,1,0)
^8994.01^2^2^3101129^^^
"KRN",8994,3447,1,1,0)
This RPC finds a list of patients that are currently admitted,
"KRN",8994,3447,1,2,0)
as XML in ^TMP($J,"HMP",n).
"KRN",8994,3447,3,0)
^8994.03^1^1^3101129^^^
"KRN",8994,3447,3,1,0)
Text array formatted XML
"KRN",8994,3448,-1)
0^15
"KRN",8994,3448,0)
HMP PREVIEW ROSTER^PREVIEW^HMPROS3^4^S^^^1^1^^1
"KRN",8994,3448,1,0)
^8994.01^1^1^3120131^^^^
"KRN",8994,3448,1,1,0)
Compiles Roster based on data passed from GUI Interface.
"KRN",8994,3448,2,0)
^8994.02A^1^1
"KRN",8994,3448,2,1,0)
HMPARRAY^2^32000^1^1
"KRN",8994,3448,2,1,1,0)
^8994.021^1^1^3111022^^^^
"KRN",8994,3448,2,1,1,1,0)
Roster data from GUI.
"KRN",8994,3448,2,"B","HMPARRAY",1)

"KRN",8994,3448,2,"B","VPRARRAY",1)

"KRN",8994,3448,2,"PARAMSEQ",1,1)

"KRN",8994,3448,3,0)
^8994.03^1^1^3111022^^^^
"KRN",8994,3448,3,1,0)
XML formatted Roster.
"KRN",8994,3449,-1)
0^16
"KRN",8994,3449,0)
HMP PUT DEMOGRAPHICS^PUT^HMPUPD^4^S^^^0^1^^1
"KRN",8994,3449,1,0)
^8994.01^2^2^3131119^^
"KRN",8994,3449,1,1,0)
This RPC receives updated phone numbers from the client and calls
"KRN",8994,3449,1,2,0)
VAFCPTED to save them in the Patient file #2.
"KRN",8994,3449,2,0)
^8994.02A^3^3
"KRN",8994,3449,2,1,0)
OBJECT^3^^^3
"KRN",8994,3449,2,1,1,0)
^8994.021^1^1^3131120^^^
"KRN",8994,3449,2,1,1,1,0)
The data, as a JSON object
"KRN",8994,3449,2,2,0)
COMMAND^1^^^2
"KRN",8994,3449,2,2,1,0)
^8994.021^1^1^3131120^^
"KRN",8994,3449,2,2,1,1,0)
The action to take on the object in VistA
"KRN",8994,3449,2,3,0)
PATIENT^1^^^1
"KRN",8994,3449,2,3,1,0)
^^1^1^3131120^
"KRN",8994,3449,2,3,1,1,0)
Patient file #2 ien
"KRN",8994,3449,2,"B","COMMAND",2)

"KRN",8994,3449,2,"B","OBJECT",1)

"KRN",8994,3449,2,"B","PATIENT",3)

"KRN",8994,3449,2,"PARAMSEQ",1,3)

"KRN",8994,3449,2,"PARAMSEQ",2,2)

"KRN",8994,3449,2,"PARAMSEQ",3,1)

"KRN",8994,3449,3,0)
^8994.03^1^1^3131120^^^^
"KRN",8994,3449,3,1,0)
Text array formatted as JSON
"KRN",8994,3450,-1)
0^17
"KRN",8994,3450,0)
HMP PUT OBJECT^PUT^HMPDJ2^1^S^^^1^1^^1
"KRN",8994,3450,1,0)
^8994.01^2^2^3131216^^^^
"KRN",8994,3450,1,1,0)
This RPC receives data from the client and saves it in the HMP Object
"KRN",8994,3450,1,2,0)
file #800000.11 as JSON.
"KRN",8994,3450,2,0)
^8994.02A^3^2
"KRN",8994,3450,2,2,0)
TYPE^1^100^0^1
"KRN",8994,3450,2,2,1,0)
^8994.021^1^1^3121129^^^^
"KRN",8994,3450,2,2,1,1,0)
The kind of data being stored.
"KRN",8994,3450,2,3,0)
OBJECT^3^^0^2
"KRN",8994,3450,2,3,1,0)
^8994.021^1^1^3121129^^^^
"KRN",8994,3450,2,3,1,1,0)
The content of the object, as JSON
"KRN",8994,3450,2,"B","OBJECT",3)

"KRN",8994,3450,2,"B","TYPE",2)

"KRN",8994,3450,2,"PARAMSEQ",1,2)

"KRN",8994,3450,2,"PARAMSEQ",2,3)

"KRN",8994,3450,3,0)
^8994.03^1^1^3121129^^^^
"KRN",8994,3450,3,1,0)
Text array formatted as JSON
"KRN",8994,3451,-1)
0^18
"KRN",8994,3451,0)
HMP PUT PATIENT DATA^PUT^HMPDJ1^1^S^^^1^1^^1
"KRN",8994,3451,1,0)
^8994.01^2^2^3121129^^^^
"KRN",8994,3451,1,1,0)
This RPC receives data from the client and saves it in the HMP Patient
"KRN",8994,3451,1,2,0)
Object file #800000.1 as JSON.
"KRN",8994,3451,2,0)
^8994.02A^3^3
"KRN",8994,3451,2,1,0)
DFN^1^20^1^1
"KRN",8994,3451,2,1,1,0)
^8994.021^2^2^3121010^^^
"KRN",8994,3451,2,1,1,1,0)
Internal entry number from Patient file #2
"KRN",8994,3451,2,1,1,2,0)
[optionally DFN;ICN for remote calls]
"KRN",8994,3451,2,2,0)
TYPE^1^100^0^2
"KRN",8994,3451,2,2,1,0)
^8994.021^1^1^3121010^^^^
"KRN",8994,3451,2,2,1,1,0)
The kind of data being stored.
"KRN",8994,3451,2,3,0)
OBJECT^3^^0^3
"KRN",8994,3451,2,3,1,0)
^8994.021^1^1^3121129^^^^
"KRN",8994,3451,2,3,1,1,0)
The content of the object, as JSON
"KRN",8994,3451,2,"B","DFN",1)

"KRN",8994,3451,2,"B","OBJECT",3)

"KRN",8994,3451,2,"B","TYPE",2)

"KRN",8994,3451,2,"PARAMSEQ",1,1)

"KRN",8994,3451,2,"PARAMSEQ",2,2)

"KRN",8994,3451,2,"PARAMSEQ",3,3)

"KRN",8994,3451,3,0)
^8994.03^1^1^3121129^^^^
"KRN",8994,3451,3,1,0)
Text array formatted as JSON
"KRN",8994,3452,-1)
0^19
"KRN",8994,3452,0)
HMP ROSTER PATIENTS^COMPILE^HMPROS2^4^S^^^1^1^^1
"KRN",8994,3452,1,0)
^8994.01^1^1^3150923^^^^
"KRN",8994,3452,1,1,0)
Provides patients associated with requested Roster.
"KRN",8994,3452,2,0)
^8994.02A^2^2
"KRN",8994,3452,2,1,0)
ROSTER^1^15^0^1
"KRN",8994,3452,2,1,1,0)
^8994.021^1^1^3120105^^^^
"KRN",8994,3452,2,1,1,1,0)
IEN of Roster you are requesting patients for.
"KRN",8994,3452,2,2,0)
OWNER^1^15^0^2
"KRN",8994,3452,2,2,1,0)
^8994.021^1^1^3150923^^^^
"KRN",8994,3452,2,2,1,1,0)
Compile all rosters for this owner.
"KRN",8994,3452,2,"B","OWNER",2)

"KRN",8994,3452,2,"B","ROSTER",1)

"KRN",8994,3452,2,"PARAMSEQ",1,1)

"KRN",8994,3452,2,"PARAMSEQ",2,2)

"KRN",8994,3452,3,0)
^8994.03^1^1^3150923^^^^
"KRN",8994,3452,3,1,0)
Text array formatted XML.
"KRN",8994,3453,-1)
0^20
"KRN",8994,3453,0)
HMP ROSTERS^GETROS^HMPROS2^4^S^^^1^1^^1
"KRN",8994,3453,1,0)
^8994.01^1^1^3111110^^^^
"KRN",8994,3453,1,1,0)
Creates XML list of all Rosters.
"KRN",8994,3453,2,0)
^8994.02A^1^1
"KRN",8994,3453,2,1,0)
HMPFILT^1^30^0^1
"KRN",8994,3453,2,1,1,0)
^8994.021^1^1^3111110^^
"KRN",8994,3453,2,1,1,1,0)
Filter rosters if filter not null.
"KRN",8994,3453,2,"B","HMPFILT",1)

"KRN",8994,3453,2,"B","VPRFILT",1)

"KRN",8994,3453,2,"PARAMSEQ",1,1)

"KRN",8994,3453,3,0)
^8994.03^1^1^3111110^^^^
"KRN",8994,3453,3,1,0)
Text array formatted in XML.
"KRN",8994,3454,-1)
0^21
"KRN",8994,3454,0)
HMP SUBSCRIBE^SUBS^HMPPATS^4^S^^^1^^^1
"KRN",8994,3454,1,0)
^8994.01^3^3^3141006^^^^
"KRN",8994,3454,1,1,0)
This RPC will maintain a list of patients & events to monitor for new data.
"KRN",8994,3454,1,2,0)
The LIST of patients passed into this RPC is returned in ^TMP($J,"HMP",n)
"KRN",8994,3454,1,3,0)
as XML, with a subscription status of 'on', 'off', or 'error'.
"KRN",8994,3454,2,0)
^8994.02A^3^3
"KRN",8994,3454,2,1,0)
SYS^1^^0^1
"KRN",8994,3454,2,1,1,0)
^8994.021^3^3^3130417^^^^
"KRN",8994,3454,2,1,1,1,0)
This is the name of the system calling the RPC; it is used to create
"KRN",8994,3454,2,1,1,2,0)
an entry in the HMP SUBSCRIPTION file, and link a system to a list of
"KRN",8994,3454,2,1,1,3,0)
patients and/or events.
"KRN",8994,3454,2,2,0)
LIST^2^^0^3
"KRN",8994,3454,2,2,1,0)
^8994.021^2^2^3110310^^^
"KRN",8994,3454,2,2,1,1,0)
This is the list of patient identifiers, in the form 'dfn;icn', that
"KRN",8994,3454,2,2,1,2,0)
are to be either added to or removed from the monitor.
"KRN",8994,3454,2,3,0)
STS^1^^0^2
"KRN",8994,3454,2,3,1,0)
^^2^2^3110310^
"KRN",8994,3454,2,3,1,1,0)
This is a boolean value, 1 or 0, indicating if the patient should be
"KRN",8994,3454,2,3,1,2,0)
added to or removed from the data monitor.
"KRN",8994,3454,2,"B","LIST",2)

"KRN",8994,3454,2,"B","STS",3)

"KRN",8994,3454,2,"B","SYS",1)

"KRN",8994,3454,2,"PARAMSEQ",1,1)

"KRN",8994,3454,2,"PARAMSEQ",2,3)

"KRN",8994,3454,2,"PARAMSEQ",3,2)

"KRN",8994,3454,3,0)
^8994.03^1^1^3141006^^^^
"KRN",8994,3454,3,1,0)
Text array formatted as XML.
"KRN",8994,3455,-1)
0^22
"KRN",8994,3455,0)
HMP SUBSCRIBE ROSTERS^SUBS^HMPROS7^4^S^^^1^^^1
"KRN",8994,3455,1,0)
^8994.01^3^3^3130417^^^^
"KRN",8994,3455,1,1,0)
This RPC will maintain a list of rosters to monitor for new patients.
"KRN",8994,3455,1,2,0)
The LIST of rosters passed into this RPC is returned in ^TMP($J,"HMP",n)
"KRN",8994,3455,1,3,0)
as XML, with a subscription status of 'on', 'off', or 'error'.
"KRN",8994,3455,2,0)
^8994.02A^3^3
"KRN",8994,3455,2,1,0)
SYS^1^^0^1
"KRN",8994,3455,2,1,1,0)
^8994.021^3^3^3130417^^^^
"KRN",8994,3455,2,1,1,1,0)
This is the name of the system calling the RPC; it is used to create
"KRN",8994,3455,2,1,1,2,0)
an entry in the HMP SUBSCRIPTION file, and link a system to a list of
"KRN",8994,3455,2,1,1,3,0)
rosters.
"KRN",8994,3455,2,2,0)
LIST^2^^0^3
"KRN",8994,3455,2,2,1,0)
^8994.021^2^2^3130417^^^^
"KRN",8994,3455,2,2,1,1,0)
This is the list of roster identifiers that are to be either added to or
"KRN",8994,3455,2,2,1,2,0)
removed from the monitor.
"KRN",8994,3455,2,3,0)
STS^1^^0^2
"KRN",8994,3455,2,3,1,0)
^8994.021^2^2^3130417^^
"KRN",8994,3455,2,3,1,1,0)
This is a boolean value, 1 or 0, indicating if the roster should be
"KRN",8994,3455,2,3,1,2,0)
added to or removed from the data monitor.
"KRN",8994,3455,2,"B","LIST",2)

"KRN",8994,3455,2,"B","STS",3)

"KRN",8994,3455,2,"B","SYS",1)

"KRN",8994,3455,2,"PARAMSEQ",1,1)

"KRN",8994,3455,2,"PARAMSEQ",2,3)

"KRN",8994,3455,2,"PARAMSEQ",3,2)

"KRN",8994,3455,3,0)
^8994.03^1^1^3130417^^^^
"KRN",8994,3455,3,1,0)
Text array formatted as XML.
"KRN",8994,3456,-1)
0^23
"KRN",8994,3456,0)
HMP UPDATE ROSTER^UPDATE^HMPROS3^4^S^^^1^1^^1
"KRN",8994,3456,1,0)
^8994.01^1^1^3151208^^^^
"KRN",8994,3456,1,1,0)
Updates roster data edited by GUI into VistA.
"KRN",8994,3456,2,0)
^8994.02A^1^1
"KRN",8994,3456,2,1,0)
HMPARRAY^2^32000^1^1
"KRN",8994,3456,2,1,1,0)
^^3^3^3151208^
"KRN",8994,3456,2,1,1,1,0)
This is the array of input data used to update the roster entry in the 
"KRN",8994,3456,2,1,1,2,0)
HMP ROSTER file (#800001.2).
"KRN",8994,3456,2,1,1,3,0)
It's formally structured and is required.
"KRN",8994,3456,2,"B","HMPARRAY",1)

"KRN",8994,3456,2,"B","VPRARRAY",1)

"KRN",8994,3456,2,"PARAMSEQ",1,1)

"KRN",8994,3457,-1)
0^24
"KRN",8994,3457,0)
HMP WRITEBACK PT DEM^FILE^HMPPTDEM^2^S^^^0^1^^1
"KRN",8994,3457,1,0)
^8994.01^1^1^3141015^^
"KRN",8994,3457,1,1,0)
This RPC takes demographic data from an outside system and files it in to the Patient File (#2)
"KRN",8994,3457,2,0)
^8994.02A^1^1
"KRN",8994,3457,2,1,0)
FIL^1^32000^1^1
"KRN",8994,3457,2,1,1,0)
^8994.021^1^1^3141015^^
"KRN",8994,3457,2,1,1,1,0)
"^" delimited set of data to be filed in to the Patient File 
"KRN",8994,3457,2,"B","FIL",1)

"KRN",8994,3457,2,"PARAMSEQ",1,1)

"KRN",8994,3457,3,0)
^8994.03^1^1^3141015^^
"KRN",8994,3457,3,1,0)
Error or Success message
"KRN",8994,3458,-1)
0^25
"KRN",8994,3458,0)
HMPCORD RPC^RPC^HMPCORD^3^S^^^0
"KRN",8994,3458,1,0)
^8994.01^1^1^3151208^^
"KRN",8994,3458,1,1,0)
USED TO RETURN ORDERS INFORMATION
"KRN",8994,3458,2,0)
^8994.02A^1^1
"KRN",8994,3458,2,1,0)
PARAMS^2^^1^1
"KRN",8994,3458,2,1,1,0)
^^1^1^3151208^
"KRN",8994,3458,2,1,1,1,0)
This parameter is no longer used.  It is kept for backwards compatibility.
"KRN",8994,3458,2,"B","PARAMS",1)

"KRN",8994,3458,2,"PARAMSEQ",1,1)

"KRN",8994,3459,-1)
0^26
"KRN",8994,3459,0)
HMPCPAT RPC^RPC^HMPCPAT^4^S
"KRN",8994,3459,1,0)
^8994.01^1^1^3151208^^^
"KRN",8994,3459,1,1,0)
USED TO RETURN PATIENT INFORMATION 
"KRN",8994,3459,2,0)
^8994.02A^1^1
"KRN",8994,3459,2,1,0)
PARAMS^2^^1^1
"KRN",8994,3459,2,1,1,0)
^^1^1^3151208^
"KRN",8994,3459,2,1,1,1,0)
This value is no longer is used.  It remains for backwards compatibility.
"KRN",8994,3459,2,"B","PARAMS",1)

"KRN",8994,3459,2,"PARAMSEQ",1,1)

"KRN",8994,3460,-1)
0^27
"KRN",8994,3460,0)
HMPCPRS RPC^RPC^HMPCPRS^3^S^^^0
"KRN",8994,3460,1,0)
^^1^1^3150812^
"KRN",8994,3460,1,1,0)
USED TO RETURN HEADER INFORMATION TO MIMIC CPRS HEADERS IN EHMP GUI
"KRN",8994,3460,2,0)
^8994.02A^1^1
"KRN",8994,3460,2,1,0)
PARAMS^2^^1^1
"KRN",8994,3460,2,"B","PARAMS",1)

"KRN",8994,3460,2,"PARAMSEQ",1,1)

"KRN",8994,3461,-1)
0^28
"KRN",8994,3461,0)
HMPCRPC RPC^RPC^HMPCRPC^3^S^^^0
"KRN",8994,3461,1,0)
^8994.01^2^2^3151208^^^^
"KRN",8994,3461,1,1,0)
This RPC is used to save and get data from all the HMP PARAMETERS in all the 
"KRN",8994,3461,1,2,0)
all the HMP parameter files.
"KRN",8994,3461,2,0)
^8994.02A^1^1
"KRN",8994,3461,2,1,0)
PARAMS^2^^1^1
"KRN",8994,3461,2,1,1,0)
^^1^1^3151208^
"KRN",8994,3461,2,1,1,1,0)
This contains the list of RPCs that are to be called.
"KRN",8994,3461,2,"B","PARAMS",1)

"KRN",8994,3461,2,"PARAMSEQ",1,1)

"KRN",8994,3462,-1)
0^29
"KRN",8994,3462,0)
HMPCRPC RPCCHAIN^CHAINRPC^HMPCRPC^3^S^0^^0^1^^1
"KRN",8994,3462,1,0)
^8994.01^2^2^3150923^^
"KRN",8994,3462,1,1,0)
Used to chain multiple HMP RPC's together. Flexible framework for invoking
"KRN",8994,3462,1,2,0)
a RPC chain
"KRN",8994,3462,2,0)
^8994.02A^1^1
"KRN",8994,3462,2,1,0)
PARAMS^2^32000^1^1
"KRN",8994,3462,2,"B","PARAMS",1)

"KRN",8994,3462,2,"PARAMSEQ",1,1)

"KRN",8994,3463,-1)
0^30
"KRN",8994,3463,0)
HMPDJFS API^API^HMPDJFS^4^S^^^0
"KRN",8994,3463,1,0)
^8994.01^2^2^3151208^^
"KRN",8994,3463,1,1,0)
This is the primary entry point RPC for all the VX-Sync API. All sync related calls
"KRN",8994,3463,1,2,0)
come through this entry point
"KRN",8994,3463,2,0)
^8994.02A^2^2
"KRN",8994,3463,2,1,0)
RESPONSE^1^^^1
"KRN",8994,3463,2,2,0)
ARGS^2^^1^1
"KRN",8994,3463,2,2,1,0)
^^1^1^3151208^
"KRN",8994,3463,2,2,1,1,0)
The ARGS array contains all the required data to call the appropriate API.
"KRN",8994,3463,2,"B","ARGS",2)

"KRN",8994,3463,2,"B","RESPONSE",1)

"KRN",8994,3463,2,"PARAMSEQ",1,1)

"KRN",8994,3463,2,"PARAMSEQ",1,2)

"KRN",8994,3464,-1)
0^31
"KRN",8994,3464,0)
HMPDJFS DELSUB^DELSUB^HMPDJFS^1^P^0
"KRN",8994,3464,1,0)
^^1^1^3150812^
"KRN",8994,3464,1,1,0)
RPC used to delete eHMP subscriptions from file 800000
"KRN",8994,3465,-1)
0^32
"KRN",8994,3465,0)
HMPFPTC CHKS^CHKS^HMPFPTC^3^S^^^0
"KRN",8994,3465,1,0)
^8994.01^2^2^3150812^^^^
"KRN",8994,3465,1,1,0)
This RPC returns the patient selection checks for a sensitive patient, 
"KRN",8994,3465,1,2,0)
deceased, and PRF.
"KRN",8994,3465,2,0)
^8994.02A^1^1
"KRN",8994,3465,2,1,0)
ICN^1^^1^1
"KRN",8994,3465,2,1,1,0)
^8994.021^1^1^3120629^^
"KRN",8994,3465,2,1,1,1,0)
This is the patient ICN
"KRN",8994,3465,2,"B","ICN",1)

"KRN",8994,3465,2,"PARAMSEQ",1,1)

"KRN",8994,3466,-1)
0^33
"KRN",8994,3466,0)
HMPFPTC LOG^LOG^HMPFPTC^3^S^^^0
"KRN",8994,3466,1,0)
^8994.01^2^2^3120124^
"KRN",8994,3466,1,1,0)
This RPC is used to log a patient when a provider is accessing a 
"KRN",8994,3466,1,2,0)
sensitive record.
"KRN",8994,3466,2,0)
^8994.02A^1^1
"KRN",8994,3466,2,1,0)
ICN^1^^1^1
"KRN",8994,3466,2,1,1,0)
^^1^1^3151208^
"KRN",8994,3466,2,1,1,1,0)
The patient's Integartion Control Number (ICN).
"KRN",8994,3466,2,"B","ICN",1)

"KRN",8994,3466,2,"PARAMSEQ",1,1)

"KRN",8994,3467,-1)
0^35
"KRN",8994,3467,0)
HMP LOCAL GETCORRESPONDINGIDS^TFL^HMPTFU2^3^S^^^1^1
"KRN",8994,3467,1,0)
^8994.01^2^2^3150205^^^^
"KRN",8994,3467,1,1,0)
Given a patient DFN, ICN, or EDIPI, this Remote Procedure Call returns a list of Treating Facilities, including SOURCE   
"KRN",8994,3467,1,2,0)
     ID,  station number, and  IDENTIFIER STATUS. INPUT PARAMETER: Patient Identifier      
"KRN",8994,3467,2,0)
^8994.02A^1^1
"KRN",8994,3467,2,1,0)
Patient Identifier^3^255^1^1
"KRN",8994,3467,2,1,1,0)
^8994.021^11^11^3150205^^^^
"KRN",8994,3467,2,1,1,1,0)
 The patient identifier will either be the PATIENT file (#2) IEN (aka 
"KRN",8994,3467,2,1,1,2,0)
 DFN), Integration Control Number (aka ICN) or the DOD Identifier (aka 
"KRN",8994,3467,2,1,1,3,0)
 EDIPI).  Following this format:
"KRN",8994,3467,2,1,1,4,0)
  
"KRN",8994,3467,2,1,1,5,0)
 Id^IdType^AssigningAuthority^AssigningFacility
"KRN",8994,3467,2,1,1,6,0)
  
"KRN",8994,3467,2,1,1,7,0)
 Examples:
"KRN",8994,3467,2,1,1,8,0)
  
"KRN",8994,3467,2,1,1,9,0)
 ICN example:   1008520438V882204^NI^USVHA^200M
"KRN",8994,3467,2,1,1,10,0)
DFN example:   100000511^PI^USVHA^500
"KRN",8994,3467,2,1,1,11,0)
 EDIPI example: 852043888^NI^USDOD^200DOD
"KRN",8994,3467,2,"B","Patient Identifier",1)

"KRN",8994,3467,2,"PARAMSEQ",1,1)

"KRN",8994,3467,3,0)
^8994.03^14^14^3150205^^^^
"KRN",8994,3467,3,1,0)
 This will return a list of treating facilities in the following format:
"KRN",8994,3467,3,2,0)
 
"KRN",8994,3467,3,3,0)
 ID^IDTYPE^AssigningFacility^AssigningAuthority^IDStatus
"KRN",8994,3467,3,4,0)
 
"KRN",8994,3467,3,5,0)
AssigningFacility is a hashed value based on facility domain,
"KRN",8994,3467,3,6,0)
using $$BASE^XLFUTL($$CRC16^XLFCRC("DOMAIN.EXT"),10,16)
"KRN",8994,3467,3,7,0)
 
"KRN",8994,3467,3,8,0)
 Examples:
"KRN",8994,3467,3,9,0)
 
"KRN",8994,3467,3,10,0)
 RETURN(1)="27^PI^D17^USVHA^H"
"KRN",8994,3467,3,11,0)
 RETURN(2)="7169806^PI^D17^USVHA^A"
"KRN",8994,3467,3,12,0)
 RETURN(3)="^PI^200PS^USVHA"
"KRN",8994,3467,3,13,0)
 RETURN(4)="1^NI^200DOD^USDOD^A"
"KRN",8994,3467,3,14,0)
 RETURN(5)="2^NI^200DOD^USDOD^H"
"KRN",8994,3468,-1)
0^34
"KRN",8994,3468,0)
HMP LOCAL CORRESPONDINGIDS^TFL^HMPTFU2^3^S^^^1^1
"KRN",8994,3468,1,0)
^8994.01^1^1^3150219^^^^
"KRN",8994,3468,1,1,0)
Give a patient DFN, ICN, or EDIPI, this Remote Procedure Call returns a list of Treating Facilities, including SOURCE ID, SITE HASH, and IDENTIFIER STATUS.
"KRN",8994,3468,2,0)
^8994.02A^1^1
"KRN",8994,3468,2,1,0)
Patient Identifier^3^255^1^1
"KRN",8994,3468,2,1,1,0)
^8994.021^7^7^3150219^^^^
"KRN",8994,3468,2,1,1,1,0)
The patient identifier will either be the PATIENT (#2) IEN (aka DFN), Integration Control Number (aka ICN), or the DOD Identifier (aka EDIPI). Following this format:
"KRN",8994,3468,2,1,1,2,0)
Id^IdType^AssigningAuthority^AssigningFacility
"KRN",8994,3468,2,1,1,3,0)
 
"KRN",8994,3468,2,1,1,4,0)
Examples:
"KRN",8994,3468,2,1,1,5,0)
 ICN example:  1008520438V882204^NI^USVHA^200M
"KRN",8994,3468,2,1,1,6,0)
 DFN example:  100000511^PI^USHVA^500
"KRN",8994,3468,2,1,1,7,0)
EDIPI example: 852043888^NI^USDOD^200DOD
"KRN",8994,3468,2,"B","Patient Identifier",1)

"KRN",8994,3468,2,"PARAMSEQ",1,1)

"KRN",8994,3468,3,0)
^8994.03^8^8^3150219^^^
"KRN",8994,3468,3,1,0)
This will return a list of treating facilities in the following format:
"KRN",8994,3468,3,2,0)
 
"KRN",8994,3468,3,3,0)
 ID^IDTYPE^SiteHash^AssigningAuthority^IDSTatus
"KRN",8994,3468,3,4,0)
 
"KRN",8994,3468,3,5,0)
Examples:
"KRN",8994,3468,3,6,0)
 RETURN(1)=27^PI^D17^USVHA^H"
"KRN",8994,3468,3,7,0)
 RETURN(2)=7169806^PI^D17^USHVA^A"
"KRN",8994,3468,3,8,0)
 RETURN(3)=1^NI^200DOD^USDOD^A"
"KRN",8994,3469,-1)
0^36
"KRN",8994,3469,0)
HMP PUT OPERATIONAL DATA^API^HMPWB^1^S^^^^^^1
"KRN",8994,3469,1,0)
^8994.01^1^1^3151208^^^
"KRN",8994,3469,1,1,0)
This RPC accepts writeback data from JDS and returns a JSON formatted acknowledgement message. 
"KRN",8994,3469,2,0)
^8994.02A^3^3
"KRN",8994,3469,2,1,0)
IEN^1^^1^1
"KRN",8994,3469,2,1,1,0)
^^2^2^3151208^
"KRN",8994,3469,2,1,1,1,0)
This is the INTERNAL ENTRY NUMBER in the target file for write backs.  
"KRN",8994,3469,2,1,1,2,0)
The file is determined by the value passed in DATA("domain").
"KRN",8994,3469,2,2,0)
DFN^1^^1^2
"KRN",8994,3469,2,2,1,0)
^^1^1^3151208^
"KRN",8994,3469,2,2,1,1,0)
The IEN of the patient in the PATIENT file (#2).
"KRN",8994,3469,2,3,0)
DATA^2^^1^3
"KRN",8994,3469,2,3,1,0)
^^4^4^3151208^
"KRN",8994,3469,2,3,1,1,0)
An array passed-by-reference.
"KRN",8994,3469,2,3,1,2,0)
 
"KRN",8994,3469,2,3,1,3,0)
DATA("domain") determines the data domain for which the desired write 
"KRN",8994,3469,2,3,1,4,0)
back will occur.  An invalid domain will result in data being returned.
"KRN",8994,3469,2,"B","DATA",3)

"KRN",8994,3469,2,"B","DFN",2)

"KRN",8994,3469,2,"B","IEN",1)

"KRN",8994,3469,2,"PARAMSEQ",1,1)

"KRN",8994,3469,2,"PARAMSEQ",2,2)

"KRN",8994,3469,2,"PARAMSEQ",3,3)

"KRN",8994,3470,-1)
0^39
"KRN",8994,3470,0)
HMP PATIENT SCHED SYNC^APPT^HMPACT^4^P^^^1^1
"KRN",8994,3470,1,0)
^^5^5^3150416^
"KRN",8994,3470,1,1,0)
This RPC looks up patient appointments by date and location and returns 
"KRN",8994,3470,1,2,0)
the following in a global array for patients that are not found in the 
"KRN",8994,3470,1,3,0)
HMP SUBSCRIPTION file (#800000):
"KRN",8994,3470,1,4,0)
 
"KRN",8994,3470,1,5,0)
    DFN^Appointment Date^Location Name^Location IEN
"KRN",8994,3470,2,0)
^8994.02A^3^3
"KRN",8994,3470,2,1,0)
STARTDT^1^20^1^1
"KRN",8994,3470,2,1,1,0)
^^1^1^3150416^
"KRN",8994,3470,2,1,1,1,0)
Start Date for appointment search in VA format.  This is a required field.
"KRN",8994,3470,2,2,0)
ENDDATE^1^20^0^2
"KRN",8994,3470,2,2,1,0)
^^2^2^3150416^
"KRN",8994,3470,2,2,1,1,0)
The ending date for the appointment search in VA format.  This field is 
"KRN",8994,3470,2,2,1,2,0)
optional and will default to the current date if not entered.
"KRN",8994,3470,2,3,0)
LOCIEN^1^20^0^3
"KRN",8994,3470,2,3,1,0)
^^3^3^3150416^
"KRN",8994,3470,2,3,1,1,0)
The IEN for the clinic location in the HOSPITAL LOCATION File (#44).  
"KRN",8994,3470,2,3,1,2,0)
This is an optional field.  Appointments for all locations will be 
"KRN",8994,3470,2,3,1,3,0)
evaluated if not entered.
"KRN",8994,3470,2,"B","ENDDATE",2)

"KRN",8994,3470,2,"B","LOCIEN",3)

"KRN",8994,3470,2,"B","STARTDT",1)

"KRN",8994,3470,2,"PARAMSEQ",1,1)

"KRN",8994,3470,2,"PARAMSEQ",2,2)

"KRN",8994,3470,2,"PARAMSEQ",3,3)

"KRN",8994,3470,3,0)
^^3^3^3150416^
"KRN",8994,3470,3,1,0)
An array of the following patient appointment data:
"KRN",8994,3470,3,2,0)
 
"KRN",8994,3470,3,3,0)
    DFN^Appointment Date^Location Name^Location IEN
"KRN",8994,3471,-1)
0^40
"KRN",8994,3471,0)
HMP PATIENT ADMIT SYNC^ADMIT^HMPACT^4^A^^^1^1
"KRN",8994,3471,1,0)
^8994.01^6^6^3151208^^^
"KRN",8994,3471,1,1,0)
This RPC looks up patient admissions by location and returns the 
"KRN",8994,3471,1,2,0)
following in a global array for patients that are not found in the HMP 
"KRN",8994,3471,1,3,0)
SUBSCRIPTION file (#800000):
"KRN",8994,3471,1,4,0)
 
"KRN",8994,3471,1,5,0)
    DFN^Admission Date^Location Name^Room-Bed^Location IEN
"KRN",8994,3471,1,6,0)
      The Room-Bed may not be populated for all locations.
"KRN",8994,3471,2,0)
^8994.02A^1^1
"KRN",8994,3471,2,1,0)
LOCIEN^1^20^0^1
"KRN",8994,3471,2,1,1,0)
^8994.021^3^3^3151208^^
"KRN",8994,3471,2,1,1,1,0)
The IEN for the ward location in the WARD LOCATION file (#42).  
"KRN",8994,3471,2,1,1,2,0)
This is an optional field.  Admissions for all ward locations will be 
"KRN",8994,3471,2,1,1,3,0)
evaluated if not entered.
"KRN",8994,3471,2,"B","LOCIEN",1)

"KRN",8994,3471,2,"PARAMSEQ",1,1)

"KRN",8994,3471,3,0)
^^3^3^3150416^
"KRN",8994,3471,3,1,0)
An array of the following patient admission data:
"KRN",8994,3471,3,2,0)
 
"KRN",8994,3471,3,3,0)
    DFN^Admission Date^Location Name^Room-Bed^Location IEN
"KRN",8994,3472,-1)
0^37
"KRN",8994,3472,0)
HMP CHKXTMP^CHKXTMP^HMPTOOLS^2^S
"KRN",8994,3472,1,0)
^8994.01^1^1^3150923^^
"KRN",8994,3472,1,1,0)
Returns the status of the entries in ^XTMP (complete, staging).
"KRN",8994,3473,-1)
0^38
"KRN",8994,3473,0)
HMP GLOBAL SIZE^SIZE^HMPTOOLS^2^S
"KRN",8994,3473,1,0)
^8994.01^1^1^3150923^^
"KRN",8994,3473,1,1,0)
Accepts a global name (without the '^') and returns the size of that global
"KRN",8994,3474,-1)
0^41
"KRN",8994,3474,0)
HMP DEFAULT PATIENT LIST^DEFLIST^HMPPDL^2^^^^^1^^1
"KRN",8994,3474,1,0)
^^3^3^3150731^
"KRN",8994,3474,1,1,0)
This RPC will return the default patient list for a specific provider. 
"KRN",8994,3474,1,2,0)
Input parameter is the provider's DUZ. Out put is an array with the 
"KRN",8994,3474,1,3,0)
patient's DFN^Patient Name^Patient Location.
"KRN",8994,3474,2,0)
^8994.02A^1^1
"KRN",8994,3474,2,1,0)
DUZ^1^200^1^1
"KRN",8994,3474,2,1,1,0)
^^1^1^3150731^
"KRN",8994,3474,2,1,1,1,0)
This is the DUZ for the provider. 
"KRN",8994,3474,2,"B","DUZ",1)

"KRN",8994,3474,2,"PARAMSEQ",1,1)

"KRN",8994,3474,3,0)
^^4^4^3150731^
"KRN",8994,3474,3,1,0)
Returns an array containing the default list of patients for the 
"KRN",8994,3474,3,2,0)
requested provider. Array is in the format:
"KRN",8994,3474,3,3,0)
 
"KRN",8994,3474,3,4,0)
DFN^Patient Name^Patient Location
"MBREQ")
0
"ORD",0,9.8)
9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"ORD",0,9.8,0)
ROUTINE
"ORD",3,19.1)
19.1;3;;;KEY^XPDTA1;KEYF1^XPDIA1;KEYE1^XPDIA1;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",11,3.8)
3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1;;MAILGDEL^XPDIA1(%)
"ORD",11,3.8,0)
MAIL GROUP
"ORD",14,771)
771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1;;HLAPDEL^XPDIA1(%)
"ORD",14,771,0)
HL7 APPLICATION PARAMETER
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"ORD",20,8989.51)
8989.51;20;;;PAR1E1^XPDTA2;PAR1F1^XPDIA3;PAR1E1^XPDIA3;PAR1F2^XPDIA3;;PAR1DEL^XPDIA3(%)
"ORD",20,8989.51,0)
PARAMETER DEFINITION
"PKG",578,-1)
1^1
"PKG",578,0)
HEALTH MANAGEMENT PLATFORM^HMP^Access patient medical records from all VistA's
"PKG",578,20,0)
^9.402P^^
"PKG",578,22,0)
^9.49I^1^1
"PKG",578,22,1,0)
2.0^3160223^3160223^1
"PKG",578,22,1,1,0)
^^3^3^3160223
"PKG",578,22,1,1,1,0)
Enterprise Health Management Platform Package Release.
"PKG",578,22,1,1,2,0)
 
"PKG",578,22,1,1,3,0)
See FORUM patch description for details.
"PKG",578,22,1,"PAH",0)
^9.4901^3^3
"PKG",578,22,1,"PAH",1,0)
650223^3150414.062711^1
"PKG",578,22,1,"PAH",1,1,0)
^^1^1^3150414
"PKG",578,22,1,"PAH",1,1,1,0)
Add proxy user for eHMP
"PKG",578,22,1,"PAH",2,0)
650218^3150414.062712^1
"PKG",578,22,1,"PAH",2,1,0)
^^1^1^3150414
"PKG",578,22,1,"PAH",2,1,1,0)
Routine HMPTFU2, converted from VAFCTFU2.
"PKG",578,22,1,"PAH",3,0)
150618^3160210.174818^1
"PKG",578,22,1,"PAH",3,1,0)
^^1^1^3160210
"PKG",578,22,1,"PAH",3,1,1,0)
Merge S68 changes into eHMP.
"PKG",578,22,1,"PAH","B",150618,3)

"PKG",578,22,1,"PAH","B",650218,2)

"PKG",578,22,1,"PAH","B",650223,1)

"PKG",578,"VERSION")
2.0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
147
"RTN","HMP0311P")
0^2^B14101699
"RTN","HMP0311P",1,0)
HMP0311P ;ASMR/hrubovcak - HMP DGPF ASSIGN FLAG Protocol to ITEM;Mar 20, 2015@14:34:08
"RTN","HMP0311P",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;November 30,2015;Build 63
"RTN","HMP0311P",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMP0311P",4,0)
 ;
"RTN","HMP0311P",5,0)
 Q
"RTN","HMP0311P",6,0)
 ; Post-init logic
"RTN","HMP0311P",7,0)
POST ; make HMP DGPF ASSIGN FLAG protocol an ITEM
"RTN","HMP0311P",8,0)
 ;
"RTN","HMP0311P",9,0)
 N HMPDGIEN,HMPERR,HMPEXIT,HMPFDA,HMPIEN,HMPRTCL,J,PRTCLITM,V,X,Y
"RTN","HMP0311P",10,0)
 ;
"RTN","HMP0311P",11,0)
 D MES^XPDUTL($T(+0)_" post-init routine started "_$$HTE^XLFDT($H))
"RTN","HMP0311P",12,0)
 S V=$$SVDATA D MES^XPDUTL("Old data saved in "_V)
"RTN","HMP0311P",13,0)
 S HMPRTCL="HMP DGPF ASSIGN FLAG",HMPIEN=$O(^ORD(101,"B",HMPRTCL,0))
"RTN","HMP0311P",14,0)
 ; protocol missing, write message and exit
"RTN","HMP0311P",15,0)
 I '(HMPIEN>0) D MES^XPDUTL(HMPRTCL_" protocol not found. It must be installed to proceed.") Q
"RTN","HMP0311P",16,0)
 ;
"RTN","HMP0311P",17,0)
 S Y="DGPF ASSIGN FLAG",HMPDGIEN=$O(^ORD(101,"B",Y,0))
"RTN","HMP0311P",18,0)
 ; protocol missing, write message and exit
"RTN","HMP0311P",19,0)
 I '(HMPDGIEN>0) D MES^XPDUTL(Y_" protocol not found.  No ITEM update performed.") Q
"RTN","HMP0311P",20,0)
 ; make DGPF ASSIGN FLAG an extended action
"RTN","HMP0311P",21,0)
 S HMPFDA(101,HMPDGIEN_",",4)="X"
"RTN","HMP0311P",22,0)
 D UPDATE^DIE("","HMPFDA","","HMPERR")
"RTN","HMP0311P",23,0)
 I $D(HMPERR) D  Q  ; something went wrong
"RTN","HMP0311P",24,0)
 .D MES^XPDUTL("FileMan error when editing DGPF ASSIGN FLAG protocol")
"RTN","HMP0311P",25,0)
 .N V S V="HMPERR" F  S V=$Q(@V) Q:V=""  D MES^XPDUTL(V_" = "_@V)
"RTN","HMP0311P",26,0)
 ;
"RTN","HMP0311P",27,0)
 ; is protocol already an item?
"RTN","HMP0311P",28,0)
 S HMPEXIT=$O(^ORD(101,HMPDGIEN,10,"B",HMPIEN,0))
"RTN","HMP0311P",29,0)
 I HMPEXIT D MES^XPDUTL(HMPRTCL_" already an ITEM in "_Y_".  No update needed.") Q
"RTN","HMP0311P",30,0)
 ;
"RTN","HMP0311P",31,0)
 ; add protocol as ITEM
"RTN","HMP0311P",32,0)
 K HMPFDA,HMPERR
"RTN","HMP0311P",33,0)
 S HMPFDA(101.01,"+1,"_HMPDGIEN_",",.01)=HMPIEN
"RTN","HMP0311P",34,0)
 D UPDATE^DIE("","HMPFDA","PRTCLITM","HMPERR")
"RTN","HMP0311P",35,0)
 I $D(HMPERR) D  Q  ; something went wrong
"RTN","HMP0311P",36,0)
 .D MES^XPDUTL("FileMan error when adding ITEM to DGPF ASSIGN FLAG protocol")
"RTN","HMP0311P",37,0)
 .N V S V="HMPERR" F  S V=$Q(@V) Q:V=""  D MES^XPDUTL(V_" = "_@V)
"RTN","HMP0311P",38,0)
 ; new ITEM sub-file IEN will be in PRTCLITM(1)
"RTN","HMP0311P",39,0)
 D MES^XPDUTL(HMPRTCL_" protocol update finished "_$$HTE^XLFDT($H))
"RTN","HMP0311P",40,0)
 ;
"RTN","HMP0311P",41,0)
 Q
"RTN","HMP0311P",42,0)
 ;
"RTN","HMP0311P",43,0)
SVDATA() ; extrinsic variable, save original FileMan data, returns storage node
"RTN","HMP0311P",44,0)
 ;
"RTN","HMP0311P",45,0)
 D DT^DICRW
"RTN","HMP0311P",46,0)
 N FMERRCNT,HMPXTMP,HMPIEN,LN,NTRY,TXT,V,X,Y
"RTN","HMP0311P",47,0)
 S Y=$$NOW^XLFDT,HMPXTMP=$NA(^XTMP("HMP INSTALL LOG",Y))  ; XTMP storage location
"RTN","HMP0311P",48,0)
 ; ^XTMP log data expires in 90 days
"RTN","HMP0311P",49,0)
 S X=$G(@HMPXTMP@(0)) S:X="" @HMPXTMP@(0)=$$FMADD^XLFDT(DT,90)_U_Y_"^HMP installation "_$$FMTE^XLFDT(Y)
"RTN","HMP0311P",50,0)
 ;
"RTN","HMP0311P",51,0)
 S FMERRCNT=0  ; FileMan error counter
"RTN","HMP0311P",52,0)
 ; save entries in FileMan items list
"RTN","HMP0311P",53,0)
 F LN=1:1 S TXT=$P($T(FMITMS+LN),";;",2,99) Q:TXT=""  D
"RTN","HMP0311P",54,0)
 .N FLNO,FMARRY,FMERR  ; file #, FileMan returned value and error message arrays
"RTN","HMP0311P",55,0)
 .S FLNO=+$P(TXT,U),X=$P(TXT,U,2,99)  ; file number and target entry
"RTN","HMP0311P",56,0)
 .Q:'(FLNO>1)!(X="")  ; file and entry required
"RTN","HMP0311P",57,0)
 .S HMPIEN=$$FIND1^DIC(FLNO,"","",X,"","","FMERR")  ; lookup value in X is external format
"RTN","HMP0311P",58,0)
 .I $D(FMERR) D  Q  ; log error message and quit
"RTN","HMP0311P",59,0)
 ..S V="FMERR",FMERRCNT=FMERRCNT+1 F  S V=$Q(@V) Q:V=""  S @HMPXTMP@("FM LOOKUP ERROR",FMERRCNT,V)=@V
"RTN","HMP0311P",60,0)
 .;
"RTN","HMP0311P",61,0)
 .S:'(HMPIEN>0) FMERRCNT=FMERRCNT+1,@HMPXTMP@("FM ENTRY NOT FOUND",FMERRCNT)=TXT  ; entry
"RTN","HMP0311P",62,0)
 .S:HMPIEN>0 @HMPXTMP@("ENTRY",FLNO,HMPIEN)="entry found"
"RTN","HMP0311P",63,0)
 .K FMERR  ; just in case
"RTN","HMP0311P",64,0)
 .D GETS^DIQ(FLNO,HMPIEN_",","**","EN","FMARRY","FMERR")  ; data including sub-files, ignore null values
"RTN","HMP0311P",65,0)
 .I $D(FMERR) D  ; log error message
"RTN","HMP0311P",66,0)
 ..S V="FMERR",FMERRCNT=FMERRCNT+1 F  S V=$Q(@V) Q:V=""  S @HMPXTMP@("FM DATA ERROR",FMERRCNT,V)=@V
"RTN","HMP0311P",67,0)
 .; save the data
"RTN","HMP0311P",68,0)
 .M @HMPXTMP@("ENTRY")=FMARRY
"RTN","HMP0311P",69,0)
 ;
"RTN","HMP0311P",70,0)
 Q HMPXTMP  ; return ^XTMP storage location
"RTN","HMP0311P",71,0)
 ;
"RTN","HMP0311P",72,0)
FMITMS ; list of FileMan entries: "file # ^ .01 field value"
"RTN","HMP0311P",73,0)
 ;;101^DGPF ASSIGN FLAG
"RTN","HMP0311P",74,0)
 ;
"RTN","HMP0311Q")
0^140^B3902876
"RTN","HMP0311Q",1,0)
HMP0311Q ;ASMR/MAT - HMP Subscribe Client Protocols to VAFC;10/1/2015 12:49pm
"RTN","HMP0311Q",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;November 30,2015;Build 63
"RTN","HMP0311Q",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMP0311Q",4,0)
 ;
"RTN","HMP0311Q",5,0)
 ; DE2393 - MAT - Subscribe HMP ADT-A0# CLIENT Protocol to VAFC ADT-A0# SERVER
"RTN","HMP0311Q",6,0)
 ;
"RTN","HMP0311Q",7,0)
 ; Called from POST^HMPP3I.
"RTN","HMP0311Q",8,0)
 Q
"RTN","HMP0311Q",9,0)
 ;
"RTN","HMP0311Q",10,0)
POST ;
"RTN","HMP0311Q",11,0)
 D MES^XPDUTL($T(+0)_" post-init routine started "_$$HTE^XLFDT($H))
"RTN","HMP0311Q",12,0)
 D MES^XPDUTL($$HMPA04())
"RTN","HMP0311Q",13,0)
 D MES^XPDUTL($$HMPA08())
"RTN","HMP0311Q",14,0)
 D MES^XPDUTL("HMP ADT-A0# CLIENT protocols subscribed "_$$HTE^XLFDT($H))
"RTN","HMP0311Q",15,0)
 Q
"RTN","HMP0311Q",16,0)
 ;
"RTN","HMP0311Q",17,0)
HMPA04() ;
"RTN","HMP0311Q",18,0)
 N HMPSUBS
"RTN","HMP0311Q",19,0)
 S HMPSUBS=$$PROTSUBS("HMP ADT-A04 CLIENT","VAFC ADT-A04 SERVER")
"RTN","HMP0311Q",20,0)
 Q HMPSUBS
"RTN","HMP0311Q",21,0)
 ;
"RTN","HMP0311Q",22,0)
HMPA08() ;
"RTN","HMP0311Q",23,0)
 N HMPSUBS
"RTN","HMP0311Q",24,0)
 S HMPSUBS=$$PROTSUBS("HMP ADT-A08 CLIENT","VAFC ADT-A08 SERVER")
"RTN","HMP0311Q",25,0)
 Q HMPSUBS
"RTN","HMP0311Q",26,0)
 ;
"RTN","HMP0311Q",27,0)
 ;=== Subscribe PROTSRC to PROTARG.
"RTN","HMP0311Q",28,0)
 ;
"RTN","HMP0311Q",29,0)
PROTSUBS(PROTSRC,PROTARG) ;
"RTN","HMP0311Q",30,0)
 ;
"RTN","HMP0311Q",31,0)
 ;--- Validate SOURCE and TARGET exist.
"RTN","HMP0311Q",32,0)
 N IENPSRC S IENPSRC=$$YNPROTO(PROTSRC)
"RTN","HMP0311Q",33,0)
 Q:IENPSRC=-1 "SOURCE PROTOCOL "_PROTSRC_" NOT FOUND."
"RTN","HMP0311Q",34,0)
 ;
"RTN","HMP0311Q",35,0)
 N IENPTRG S IENPTRG=$$YNPROTO(PROTARG)
"RTN","HMP0311Q",36,0)
 Q:IENPTRG=-1 "TARGET PROTOCOL "_PROTARG_" NOT FOUND."
"RTN","HMP0311Q",37,0)
 ;
"RTN","HMP0311Q",38,0)
 ;--- Validate SOURCE is not a subscriber of TARGET.
"RTN","HMP0311Q",39,0)
 N IENPSUB S IENPSUB=$$YNSUBSCR(PROTSRC,IENPTRG)
"RTN","HMP0311Q",40,0)
 Q:IENPSUB>0 "PROTOCOL "_PROTSRC_" ALREADY SUBSCRIBED TO "_PROTARG_"."
"RTN","HMP0311Q",41,0)
 ;
"RTN","HMP0311Q",42,0)
 ;--- Subscribe SOURCE to TARGET.
"RTN","HMP0311Q",43,0)
 N FDA S FDA(1,101.0775,"+1,"_IENPTRG_",",.01)=PROTSRC
"RTN","HMP0311Q",44,0)
 D UPDATE^DIE("E","FDA(1)")
"RTN","HMP0311Q",45,0)
 Q "PROTOCOL "_PROTSRC_" IS NOW SUBSCRIBED TO "_PROTARG_"."
"RTN","HMP0311Q",46,0)
 ;
"RTN","HMP0311Q",47,0)
 ;=== Return the PROTOCOL File IEN or -1 if not exist.
"RTN","HMP0311Q",48,0)
 ;
"RTN","HMP0311Q",49,0)
YNPROTO(PROTO) ;
"RTN","HMP0311Q",50,0)
 N DIC,X,Y S X=PROTO,DIC="^ORD(101," D ^DIC
"RTN","HMP0311Q",51,0)
 Q +Y
"RTN","HMP0311Q",52,0)
 ;
"RTN","HMP0311Q",53,0)
 ;=== Return the SUBSCRIBER Sub-File IEN or -1 if not exist.
"RTN","HMP0311Q",54,0)
 ;
"RTN","HMP0311Q",55,0)
YNSUBSCR(PROTSRC,IENPTRG) ;
"RTN","HMP0311Q",56,0)
 N DIC,X,Y S X=PROTSRC,DIC="^ORD(101,"_IENPTRG_",775," D ^DIC
"RTN","HMP0311Q",57,0)
 Q +Y
"RTN","HMP0311Q",58,0)
 ;
"RTN","HMP0311Q",59,0)
 ; HMP0311Q
"RTN","HMPACT")
0^3^B34386179
"RTN","HMPACT",1,0)
HMPACT ;ASMR/EJK - Patient Appointment Broker Call;8/4/14  15:29
"RTN","HMPACT",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Oct 10, 2014;Build 63
"RTN","HMPACT",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPACT",4,0)
 ;
"RTN","HMPACT",5,0)
 Q
"RTN","HMPACT",6,0)
ACT(ROOT,DFN,ID,ALPHA,OMEGA,DTRANGE,REMOTE,MAX,ORFHIE) ;
"RTN","HMPACT",7,0)
 N ERR,ERRMSG,DFN,IEN,DIE,HMSTOP
"RTN","HMPACT",8,0)
 S ERR=0,ERRMSG="",DFN="",IEN="",HMSTOP=0
"RTN","HMPACT",9,0)
 S ROOT="XWBY"
"RTN","HMPACT",10,0)
 K ^TMP("ORDATA",$J)
"RTN","HMPACT",11,0)
 Q:'$D(^HMP(800001.5,"PTAPPT","HMP"))
"RTN","HMPACT",12,0)
 S DIE="^HMP(800001.5,""PTAPPT"","
"RTN","HMPACT",13,0)
 D FETCH
"RTN","HMPACT",14,0)
 D CLEAN
"RTN","HMPACT",15,0)
 Q
"RTN","HMPACT",16,0)
 ;
"RTN","HMPACT",17,0)
FETCH ;GET PENDING JSON MESSAGES AND UPDATE DATE RECORD RETRIEVED
"RTN","HMPACT",18,0)
 S X="[" D SETITEM(.ROOT,X)
"RTN","HMPACT",19,0)
 F  S IEN=$O(^HMP(800001.5,"PTAPPT","HMP",IEN)) Q:IEN=""!(HMSTOP)  D
"RTN","HMPACT",20,0)
 . S X=$G(^HMP(800001.5,"PTAPPT",IEN,"JSON"))
"RTN","HMPACT",21,0)
 . I $O(^HMP(800001.5,"PTAPPT","HMP",IEN))="" S $E(X,$L(X))="",HMSTOP=1
"RTN","HMPACT",22,0)
 . D SETITEM(.ROOT,X)
"RTN","HMPACT",23,0)
 . S DA=IEN,DR="6///1" D ^DIE
"RTN","HMPACT",24,0)
 . Q
"RTN","HMPACT",25,0)
 S X="]" D SETITEM(.ROOT,X)
"RTN","HMPACT",26,0)
 Q
"RTN","HMPACT",27,0)
 ;
"RTN","HMPACT",28,0)
CLEAN ;CLEAN UP STRAY VARIABLES
"RTN","HMPACT",29,0)
 K DA,DR,X
"RTN","HMPACT",30,0)
 Q
"RTN","HMPACT",31,0)
 ;
"RTN","HMPACT",32,0)
SETITEM(ROOT,X) ; -- set item in list - RRB US5872 
"RTN","HMPACT",33,0)
 S @ROOT@($O(@ROOT@(9999),-1)+1)=X
"RTN","HMPACT",34,0)
 Q
"RTN","HMPACT",35,0)
 ;
"RTN","HMPACT",36,0)
APPT(HMPOUT,BEG,END,LOCIEN) ; Lookup appointments by date and location
"RTN","HMPACT",37,0)
 ;
"RTN","HMPACT",38,0)
 ;Associated ICRs:
"RTN","HMPACT",39,0)
 ;  ICR#
"RTN","HMPACT",40,0)
 ;      2051:  Database Server API: Lookup Utilities
"RTN","HMPACT",41,0)
 ;             FIND1^DIC
"RTN","HMPACT",42,0)
 ;      10103: XLFDT Date functions
"RTN","HMPACT",43,0)
 ;             HTFM^XLFDT
"RTN","HMPACT",44,0)
 ;  SUPPORTED: VADPT
"RTN","HMPACT",45,0)
 ;             SDA^VADPT
"RTN","HMPACT",46,0)
 ;             KVA^VADPT
"RTN","HMPACT",47,0)
 ;             KVAR^VADPT
"RTN","HMPACT",48,0)
 ;
"RTN","HMPACT",49,0)
 N DFN,LOC,OVER,PAT,REQ,SD,SCX
"RTN","HMPACT",50,0)
 I '$G(BEG) S BEG=$$HTFM^XLFDT(+$H)  ; Default current day
"RTN","HMPACT",51,0)
 S BEG=$P(BEG,".",1)
"RTN","HMPACT",52,0)
 I BEG'?7N Q -1
"RTN","HMPACT",53,0)
 I '$G(END) S END=$$HTFM^XLFDT(+$H)  ; Default current day
"RTN","HMPACT",54,0)
 S END=$P(END,".",1)
"RTN","HMPACT",55,0)
 I END'?7N Q -1
"RTN","HMPACT",56,0)
 I END<BEG Q -1
"RTN","HMPACT",57,0)
 K ^TMP("HMPAPPT",$J)
"RTN","HMPACT",58,0)
 S HMPOUT=$NA(^TMP("HMPAPPT",$J))
"RTN","HMPACT",59,0)
 I $G(LOCIEN) D SCHED(LOCIEN,BEG,END) G ENDAPPT
"RTN","HMPACT",60,0)
 K LOC
"RTN","HMPACT",61,0)
 ;DE2818, changed location check routine to HMPXGSD
"RTN","HMPACT",62,0)
 D CLINLOC^HMPXGSD(.LOC,"",1)  ; Lookup VistA Clinic Locations
"RTN","HMPACT",63,0)
 ;
"RTN","HMPACT",64,0)
 ; The clinic locations will be returned in the HMPOUT array:
"RTN","HMPACT",65,0)
 ;     LOC(D1)=LOCIEN^LOCNAME
"RTN","HMPACT",66,0)
 ;
"RTN","HMPACT",67,0)
LOCLKUP ;
"RTN","HMPACT",68,0)
 N LOCNAME
"RTN","HMPACT",69,0)
 S SCX=""
"RTN","HMPACT",70,0)
 F  S SCX=$O(LOC(SCX)) Q:SCX=""  D
"RTN","HMPACT",71,0)
 . S LOCIEN=$P(LOC(SCX),U,1),LOCNAME=$P(LOC(SCX),U,2)
"RTN","HMPACT",72,0)
 . D SCHED(LOCIEN,BEG,END)
"RTN","HMPACT",73,0)
 G ENDAPPT
"RTN","HMPACT",74,0)
 ;
"RTN","HMPACT",75,0)
SCHED(LOCIEN,BEG,END) ;
"RTN","HMPACT",76,0)
 ; Get list of patients and appointment dates from the
"RTN","HMPACT",77,0)
 ; using $$SDAPI^SDAMA301 api.
"RTN","HMPACT",78,0)
 ; Inputs are SDARRAY(1)=BEG;END - Beginning and ending dates for the search. 
"RTN","HMPACT",79,0)
 ; BEG must be defined.
"RTN","HMPACT",80,0)
 ; END ending date for the search. If END is undefined, the API returns all appointments starting with the BEG date.
"RTN","HMPACT",81,0)
 ; BEG and END are FileMan Date/Time. Both BEG and END are validated in the calling linetag APPT^HMPACT
"RTN","HMPACT",82,0)
 ; LOCIEN = IEN for the location in the Hospital Location file (#44). LOCIEN is validated in the calling linetag APPT^HMPACT
"RTN","HMPACT",83,0)
 ; 
"RTN","HMPACT",84,0)
 ;S SD=BEG
"RTN","HMPACT",85,0)
 ;F  S SD=$O(^SC(LOCIEN,"S",SD)) Q:SD=""!(SD>END)  D  ; Quit if null or date > END
"RTN","HMPACT",86,0)
 ;. S PAT=0
"RTN","HMPACT",87,0)
 ;. F  S PAT=$O(^SC(LOCIEN,"S",SD,1,PAT)) Q:PAT=""  D
"RTN","HMPACT",88,0)
 ;.. Q:'$D(^SC(LOCIEN,"S",SD,1,1))
"RTN","HMPACT",89,0)
 ;..S DFN=$P(^SC(LOCIEN,"S",SD,1,PAT,0),U,1)
"RTN","HMPACT",90,0)
 ;.. I DFN=$P($G(^HMP(800000,1,1,DFN,0)),U,1) Q  ; Check for subscription and skip if subscribed
"RTN","HMPACT",91,0)
 ;.. ; Use supported SDA^VADPT call to get the appt data from the Patient File (#2)
"RTN","HMPACT",92,0)
 ;.. ; VASD("F")= "From" Appointment Date without timestamp.
"RTN","HMPACT",93,0)
 ;.. ; VASD("T")= "To" Appointment Date without timestamp.  This is set to the "From" date so only
"RTN","HMPACT",94,0)
 ;.. ;            one day is evaluated since we're examining each date entry in ^SC(LOCIEN,"S",SD)
"RTN","HMPACT",95,0)
 ;.. ; VASD("C")= Array of clinic location IENs. This is set to the current location only.
"RTN","HMPACT",96,0)
 ;.. ;
"RTN","HMPACT",97,0)
 ;.. S VASD("F")=$P(SD,".",1),VASD("T")=VASD("F"),VASD("C",LOCIEN)=""
"RTN","HMPACT",98,0)
 ;.. D SDA^VADPT
"RTN","HMPACT",99,0)
 ;.. Q:'$D(^UTILITY("VASD",$J,1))
"RTN","HMPACT",100,0)
 ;.. ; ^UTILITY("VASD",$J) is killed by VADPT0
"RTN","HMPACT",101,0)
 K ^TMP($J,"SDAMA301")  ; kill the TMP global that stores the return data from the $$SDAPI^SDAMA301 call
"RTN","HMPACT",102,0)
 K SDARRAY,SDCNT  ; kill the SDARRAY that stores the input variables to the $$SDAPI^SDAMA301 call, SDCNT flag for data returned, if SDCNT > 0 data is returned in the ^TMP($J,"SDAMA301" temp global
"RTN","HMPACT",103,0)
 S SDARRAY(1)=BEG_";"_$G(END),SDARRAY(2)=$G(LOCIEN),SDARRAY("FLDS")="1;2;4"  ;input variables for $$SDAPI^SDAMA301
"RTN","HMPACT",104,0)
 S SDCNT=$$SDAPI^SDAMA301 I $G(SDCNT)>0 K XDFN,APTDATE F  S XDFN=$O(^TMP($J,"SDAMA301",LOCIEN,XDFN)) Q:XDFN'>0  S APTDATE=0 F  S APTDATE=$O(^TMP($J,"SDAMA301",XDFN,APTDATE)) Q:APTDATE'>0  D
"RTN","HMPACT",105,0)
 . I XDFN=$P($G(^HMP(800000,1,1,XDFN,0)),U,1) Q  ; Check for subscription and skip if subscribed
"RTN","HMPACT",106,0)
 . S LOCNAME=$P(^TMP($J,"SDAMA301",XDFN,APTDATE),";",2)
"RTN","HMPACT",107,0)
 . S ^TMP("HMPAPPT",$J,XDFN,APTDATE,LOCIEN)=XDFN_U_APTDATE_U_LOCNAME_U_LOCIEN  ;^TMP("HMPAPPT" is killed in APPT^HMPACT before calling this linetag (SCHED)
"RTN","HMPACT",108,0)
 K SDFN,APTDATE,LOCNAME,SDCNT,SDARRAY,^TMP($J,"SDAMA301")  ; clean up variables
"RTN","HMPACT",109,0)
 Q
"RTN","HMPACT",110,0)
 ;
"RTN","HMPACT",111,0)
ENDAPPT ;
"RTN","HMPACT",112,0)
 ;
"RTN","HMPACT",113,0)
 M @HMPOUT=^TMP("HMPAPPT",$J)
"RTN","HMPACT",114,0)
 K @HMPOUT@(0)
"RTN","HMPACT",115,0)
 Q
"RTN","HMPACT",116,0)
 ;
"RTN","HMPACT",117,0)
ADMIT(HMPOUT,LOCIEN) ; Lookup admissions by location
"RTN","HMPACT",118,0)
 ;
"RTN","HMPACT",119,0)
 ;Associated ICRs:
"RTN","HMPACT",120,0)
 ;  ICR#
"RTN","HMPACT",121,0)
 ;      2051:  Database Server API: Lookup Utilities
"RTN","HMPACT",122,0)
 ;             FIND1^DIC
"RTN","HMPACT",123,0)
 ;             LIST^DIC
"RTN","HMPACT",124,0)
 ;      10103: XLFDT Date functions
"RTN","HMPACT",125,0)
 ;             HTFM^XLFDT
"RTN","HMPACT",126,0)
 ;  SUPPORTED: VADPT
"RTN","HMPACT",127,0)
 ;             INP^VADPT
"RTN","HMPACT",128,0)
 ;             KVA^VADPT
"RTN","HMPACT",129,0)
 ;             KVAR^VADPT
"RTN","HMPACT",130,0)
 ;
"RTN","HMPACT",131,0)
 N DFROM,DIEN,DOUT,DPART,DRID,FILE,FLDS,FLG,MAX,PIDX,SCRN,SUBSCRP,WARD,XREF
"RTN","HMPACT",132,0)
 K ^TMP("HMPADMIT",$J)
"RTN","HMPACT",133,0)
 S HMPOUT=$NA(^TMP("HMPADMIT",$J))
"RTN","HMPACT",134,0)
 ; Get Patient list by Ward
"RTN","HMPACT",135,0)
 S FILE=2,DIEN="",FLDS="@;.1",FLG="P",MAX="",DFROM="",DPART="",XREF="ACN"
"RTN","HMPACT",136,0)
 S SCRN="I $P($G(^DPT(+Y,.102)),""^"")>0",DRID="",DOUT=""
"RTN","HMPACT",137,0)
 ; The SCRN parameter is set to insure the patient record has a current movement file entry.
"RTN","HMPACT",138,0)
 K ^TMP("DILIST",$J)
"RTN","HMPACT",139,0)
 D LIST^DIC(FILE,DIEN,FLDS,FLG,MAX,.DFROM,DPART,XREF,SCRN,DRID,DOUT)  ; ICR #2051
"RTN","HMPACT",140,0)
 ; The list of patients and associated wards are returned via the ^TMP("DILIST",$J,PIDX,0) global in the following format:
"RTN","HMPACT",141,0)
 ;      ^TMP("DILIST",$J,PIDX,0)=DFN^WARD
"RTN","HMPACT",142,0)
 ;      Note:  The WARD is the ward name, not an internal (IEN) entry
"RTN","HMPACT",143,0)
 S PIDX=0
"RTN","HMPACT",144,0)
 F  S PIDX=$O(^TMP("DILIST",$J,PIDX)) Q:PIDX=""  D
"RTN","HMPACT",145,0)
 . S DFN=$P(^TMP("DILIST",$J,PIDX,0),U,1),WARD=$P(^TMP("DILIST",$J,PIDX,0),U,2)
"RTN","HMPACT",146,0)
 . ; If the calling application passes a ward LOCIEN, Use the WARD LOCATION File (#42) to lookup
"RTN","HMPACT",147,0)
 . ; the ward (location) IEN for comparison to the requested LOCIEN to screen out any entries that don't match the request.
"RTN","HMPACT",148,0)
 . ; 
"RTN","HMPACT",149,0)
 . I LOCIEN'="",LOCIEN'=$$FIND1^DIC(42,"","BX",WARD,"B","","") Q
"RTN","HMPACT",150,0)
 . ; Check patients for HMP subscription, File (#800000) and setup patient data
"RTN","HMPACT",151,0)
 . I DFN=$P($G(^HMP(800000,1,1,DFN,0)),U,1) Q  ; Check for subscription and skip if subscribed
"RTN","HMPACT",152,0)
 . D GETADMIT(DFN)
"RTN","HMPACT",153,0)
 ;
"RTN","HMPACT",154,0)
ENDADMIT ;
"RTN","HMPACT",155,0)
 ;
"RTN","HMPACT",156,0)
 M @HMPOUT=^TMP("HMPADMIT",$J)
"RTN","HMPACT",157,0)
 K @HMPOUT@(0)
"RTN","HMPACT",158,0)
 Q
"RTN","HMPACT",159,0)
 ;
"RTN","HMPACT",160,0)
GETADMIT(DFN) ;
"RTN","HMPACT",161,0)
 N ADMIT,PDATA,LOC,LOCNAME,LRMBD,VAERR,VAIN
"RTN","HMPACT",162,0)
 ; Lookup patient admissions data
"RTN","HMPACT",163,0)
 ; Use supported INP^VADPT call to get the admissions data from the Patient File (#2)
"RTN","HMPACT",164,0)
 D INP^VADPT
"RTN","HMPACT",165,0)
 ; LOC = Ward (Location) IEN, LOCNAME = Ward (Location) Name, LRMBD = Room-Bed Name (Optional depending upon inpatient
"RTN","HMPACT",166,0)
 ; location setup), ADMIT = Admission date.time in VA format
"RTN","HMPACT",167,0)
 S LOC=$P(VAIN(4),U),LOCNAME=$P(VAIN(4),U,2),LRMBD=VAIN(5),ADMIT=$P(VAIN(7),U)
"RTN","HMPACT",168,0)
 K PDATA
"RTN","HMPACT",169,0)
 S PDATA=DFN_U_ADMIT_U_LOCNAME_U_LRMBD_U_LOC
"RTN","HMPACT",170,0)
 S ^TMP("HMPADMIT",$J,DFN,LOC)=PDATA
"RTN","HMPACT",171,0)
 ; Supported calls to Kill VADPT variables
"RTN","HMPACT",172,0)
 D KVAR^VADPT,KVA^VADPT
"RTN","HMPACT",173,0)
 ;
"RTN","HMPACT",174,0)
 Q
"RTN","HMPACT",175,0)
 ;
"RTN","HMPAT")
0^4^B3595282
"RTN","HMPAT",1,0)
HMPAT ;ASMR/EJK,ASF - ASU/TIU Trigger to HMP Activity File;3/31/15  15:29
"RTN","HMPAT",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;November 30,2015;Build 63
"RTN","HMPAT",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPAT",4,0)
 ;
"RTN","HMPAT",5,0)
 ; DE2818 - SQA findings. Newed HMPRSLT in ECLASS+10.  RRB - 10/27/2015
"RTN","HMPAT",6,0)
 Q
"RTN","HMPAT",7,0)
ECLASS(HMPIEN) ; called from EDIT^USRCLASS,ADD^USRRULA
"RTN","HMPAT",8,0)
 N HMPSYS,TYPE,HMPMAX,HMPI,HMPID,HMPERR,HMPRSLT,HMPTN,HMPLAST,HMPCNT,HMPFINI,HMPFRSP,HMPARGS
"RTN","HMPAT",9,0)
 N $ES,$ET,ERRMSG
"RTN","HMPAT",10,0)
 S HMPID=$P($G(USRDATA),U,2)
"RTN","HMPAT",11,0)
 S HMP=$NA(^TMP("HMP",$J)),HMPI=0 K @HMP
"RTN","HMPAT",12,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPAT",13,0)
 S (HMPMAX,HMPLAST,HMPID)="",HMPCNT=0
"RTN","HMPAT",14,0)
 S HMPARGS("server")=$O(^HMP(800000,"B",""))
"RTN","HMPAT",15,0)
 S HMPARGS("command")="startOperationalDataExtract"
"RTN","HMPAT",16,0)
 S HMPARGS("domains")="asu-class"
"RTN","HMPAT",17,0)
 D API^HMPDJFS(.HMPRSLT,.HMPARGS)
"RTN","HMPAT",18,0)
 Q
"RTN","HMPAT",19,0)
 ;
"RTN","HMPAT",20,0)
ERULE ; called from EDIT1^USRRULA
"RTN","HMPAT",21,0)
 N HMPSYS,TYPE,HMPMAX,HMPI,HMPID,HMPERR,HMPTN,HMPLAST,HMPCNT,HMPFINI,HMPFRSP,HMPARGS
"RTN","HMPAT",22,0)
 N $ES,$ET,ERRMSG
"RTN","HMPAT",23,0)
 S HMP=$NA(^TMP("HMP",$J)),HMPI=0 K @HMP
"RTN","HMPAT",24,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPAT",25,0)
 S (HMPMAX,HMPLAST,HMPID)="",HMPCNT=0
"RTN","HMPAT",26,0)
 S HMPARGS("server")=$O(^HMP(800000,"B",""))
"RTN","HMPAT",27,0)
 S HMPARGS("command")="startOperationalDataExtract"
"RTN","HMPAT",28,0)
 S HMPARGS("domains")="asu-rule"
"RTN","HMPAT",29,0)
 D API^HMPDJFS(.HMPRSLT,.HMPARGS)
"RTN","HMPAT",30,0)
 Q
"RTN","HMPAT",31,0)
 ;
"RTN","HMPAT",32,0)
EDEF ; called from option TIU DOCUMENT DEFINITION EDIT
"RTN","HMPAT",33,0)
 N HMPDA
"RTN","HMPAT",34,0)
 S HMPDA=$P(XQLOK,",",2),HMPDA=$TR(HMPDA,")","")
"RTN","HMPAT",35,0)
 ; DE2818 begin change ASF 11/9/15
"RTN","HMPAT",36,0)
 ;I HMPDA?1N.N,$D(^TIU(8925.1,HMPDA)) D POSTX^HMPEVNT("doc-def",HMPDA)
"RTN","HMPAT",37,0)
 ;I HMPDA?1N.N,'$D(^TIU(8925.1,HMPDA)) D POSTX^HMPEVNT("doc-def",HMPDA,"@")
"RTN","HMPAT",38,0)
 N DA,DIC,DIQ,DR,R  ; FileMan variables
"RTN","HMPAT",39,0)
 S DIC=8925.1,DR=.01,DA=HMPDA,DIQ="R" D EN^DIQ1
"RTN","HMPAT",40,0)
 D:$D(R(8925.1,DA,.01)) POSTX^HMPEVNT("doc-def",HMPDA)
"RTN","HMPAT",41,0)
 D:'$D(R(8925.1,DA,.01)) POSTX^HMPEVNT("doc-def",HMPDA,"@")
"RTN","HMPAT",42,0)
 ; DE2818 end change
"RTN","HMPAT",43,0)
 Q
"RTN","HMPATRG")
1^150
"RTN","HMPCAC")
0^6^B97070146
"RTN","HMPCAC",1,0)
HMPCAC ;SLC/AGP,ASMR/RRB - HMP CAC Tools;Nov 24, 2015 20:05:06
"RTN","HMPCAC",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Feb 06, 2014;Build 63
"RTN","HMPCAC",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPCAC",4,0)
 ;
"RTN","HMPCAC",5,0)
 Q
"RTN","HMPCAC",6,0)
 ;
"RTN","HMPCAC",7,0)
ASK(YESNO,PROMPT) ;
"RTN","HMPCAC",8,0)
 N X,Y,TEXT
"RTN","HMPCAC",9,0)
 K DIROUT,DIRUT,DTOUT,DUOUT
"RTN","HMPCAC",10,0)
 S DIR(0)="YA0"
"RTN","HMPCAC",11,0)
 S DIR("A")=PROMPT
"RTN","HMPCAC",12,0)
 S DIR("B")="N"
"RTN","HMPCAC",13,0)
 S DIR("?")="Enter Y or N. For detailed help type ??"
"RTN","HMPCAC",14,0)
 W !
"RTN","HMPCAC",15,0)
 D ^DIR K DIR
"RTN","HMPCAC",16,0)
 I $D(DIROUT) S DTOUT=1
"RTN","HMPCAC",17,0)
 I $D(DTOUT)!($D(DUOUT)) Q
"RTN","HMPCAC",18,0)
 S YESNO=$E(Y(0))
"RTN","HMPCAC",19,0)
 Q
"RTN","HMPCAC",20,0)
 ;
"RTN","HMPCAC",21,0)
ADDSVR() ;
"RTN","HMPCAC",22,0)
 N DEF,DIC,DLAYGO,SITE,SYS,Y
"RTN","HMPCAC",23,0)
 S SITE=$$SITE^VASITE()
"RTN","HMPCAC",24,0)
 S SYS=$$SYS^HMPUTILS()
"RTN","HMPCAC",25,0)
 W !,"Station Number: "_$P(SITE,U,3)
"RTN","HMPCAC",26,0)
 W !,"HMP System Identifier: "_SYS
"RTN","HMPCAC",27,0)
 S DEF=$S($P($G(^HMP(800000,0)),U,4)=1:$P($G(^HMP(800000,1,0)),U),1:"") I DEF'="" S DIC("B")=DEF
"RTN","HMPCAC",28,0)
 S DIC="^HMP(800000,",DIC(0)="AEMQL",DIC("A")="Select HMP server instance: ",DLAYGO=800000
"RTN","HMPCAC",29,0)
 D ^DIC
"RTN","HMPCAC",30,0)
 Q Y
"RTN","HMPCAC",31,0)
 ;
"RTN","HMPCAC",32,0)
 ;DE2818, documented code below
"RTN","HMPCAC",33,0)
OPTASGN() ; called by Option: Add Health Management Platform User [HMPM ADD HMP USER]
"RTN","HMPCAC",34,0)
 N ARGS,DIC,DLAYGO,FDA,HASOPT,HMPERR,HMPOPT,IEN,LIST,MSG,OPTNAME,PAT,RESULT,SVR,Y,YESNO
"RTN","HMPCAC",35,0)
 S OPTNAME="HMP UI CONTEXT"
"RTN","HMPCAC",36,0)
 S HMPOPT=$$FIND1^DIC(19,"","B",OPTNAME,,,"MSG") I HMPOPT'>0 W !,"Error: Could not find 'HMP UI CONTEXT' option." Q
"RTN","HMPCAC",37,0)
 ;
"RTN","HMPCAC",38,0)
 S Y=$$ADDSVR() I Y<0 Q
"RTN","HMPCAC",39,0)
 S SVR=$P($G(^HMP(800000,+Y,0)),U)
"RTN","HMPCAC",40,0)
 ;
"RTN","HMPCAC",41,0)
 K DLAYGO
"RTN","HMPCAC",42,0)
 S DIC="^VA(200,",DIC(0)="AEMQ",DIC("A")="Select user to provide access to HMP: "
"RTN","HMPCAC",43,0)
 D ^DIC
"RTN","HMPCAC",44,0)
 I Y<0 Q
"RTN","HMPCAC",45,0)
 S IEN=+Y
"RTN","HMPCAC",46,0)
 ;
"RTN","HMPCAC",47,0)
 S HASOPT=$$ACCESS^XQCHK(IEN,HMPOPT)
"RTN","HMPCAC",48,0)
 I +HASOPT>0 D  Q
"RTN","HMPCAC",49,0)
 .W !,"User has 'HMP UI CONTEXT' already assigned." D ASK(.YESNO,"Sync user default CPRS patient list: ") I YESNO'="Y" Q
"RTN","HMPCAC",50,0)
 .I $G(YESNO)="Y" D GETPATS(.RESULT,IEN,SVR)
"RTN","HMPCAC",51,0)
 ;
"RTN","HMPCAC",52,0)
 K YESNO
"RTN","HMPCAC",53,0)
 D ASK(.YESNO,"Assign 'HMP UI CONTEXT': ")
"RTN","HMPCAC",54,0)
 I YESNO'="Y" Q
"RTN","HMPCAC",55,0)
 S FDA(200.03,"+2,"_IEN_",",.01)=HMPOPT
"RTN","HMPCAC",56,0)
 D UPDATE^DIE("","FDA","","HMPERR")
"RTN","HMPCAC",57,0)
 I $D(HMPERR) D  Q
"RTN","HMPCAC",58,0)
 .D EN^DDIOL("Update failed, UPDATE^DIE returned the following error message.")
"RTN","HMPCAC",59,0)
 .S IC="HMPERR"
"RTN","HMPCAC",60,0)
 .F  S IC=$Q(@IC) Q:IC=""  W !,IC,"=",@IC
"RTN","HMPCAC",61,0)
 D GETPATS(.RESULT,IEN,SVR)
"RTN","HMPCAC",62,0)
 Q
"RTN","HMPCAC",63,0)
 ;
"RTN","HMPCAC",64,0)
GETPATS(RESULT,IEN,SRV) ;
"RTN","HMPCAC",65,0)
 N ARGS,LIST,PAT
"RTN","HMPCAC",66,0)
 D GETDFLST(.LIST,IEN)
"RTN","HMPCAC",67,0)
 I '$D(LIST) W !,"No default patient list found." Q
"RTN","HMPCAC",68,0)
 S ARGS("command")="putPtSubscription"
"RTN","HMPCAC",69,0)
 S ARGS("server")=SRV
"RTN","HMPCAC",70,0)
 S PAT=0 F  S PAT=$O(LIST(PAT)) Q:PAT'>0  D
"RTN","HMPCAC",71,0)
 .;check to see if patient is already sync for the server.
"RTN","HMPCAC",72,0)
 .I $G(^HMP(800000,"AITEM",PAT,SRV))>0 W !,"Patient "_PAT_" already synced." Q
"RTN","HMPCAC",73,0)
 .S ARGS("localId")=PAT
"RTN","HMPCAC",74,0)
 .W !,"Starting sync on patient: "_PAT
"RTN","HMPCAC",75,0)
 .D API^HMPDJFS(.RESULT,.ARGS)
"RTN","HMPCAC",76,0)
 Q
"RTN","HMPCAC",77,0)
 ;
"RTN","HMPCAC",78,0)
 ;
"RTN","HMPCAC",79,0)
BLDLIST(LIST,HMPY) ;
"RTN","HMPCAC",80,0)
 N I,CNT,NODE
"RTN","HMPCAC",81,0)
 S I=0 F  S I=$O(HMPY(I)) Q:I'>0  D
"RTN","HMPCAC",82,0)
 .S NODE=$G(HMPY(I)) I +NODE'>0 Q
"RTN","HMPCAC",83,0)
 .;S CNT=$O(HMPY(I),-1)+1
"RTN","HMPCAC",84,0)
 .S LIST(+$P(NODE,U))=""
"RTN","HMPCAC",85,0)
 Q
"RTN","HMPCAC",86,0)
 ;
"RTN","HMPCAC",87,0)
 ;
"RTN","HMPCAC",88,0)
 ;The appointment list date range is designed to query for full dates, 
"RTN","HMPCAC",89,0)
 ;so when the search result exceeds 200 appointments, 
"RTN","HMPCAC",90,0)
 ;the display will end with the last appointment of the last day before the maximum was reached. 
"RTN","HMPCAC",91,0)
CLINPTS2(Y,USER,CLIN,BDATE,EDATE) ; WRAPPER FUNCTION FOR USE BY RPC CALL ORQPT CLINIC PATIENTS
"RTN","HMPCAC",92,0)
 N MAXAPPTS,APPTBGN,APPTEND,NUMAPPTS
"RTN","HMPCAC",93,0)
 S MAXAPPTS=200 I BDATE=EDATE S MAXAPPTS=0  ; if we only want one day, don't limit answer.
"RTN","HMPCAC",94,0)
 D CLINPTS(.Y,USER,CLIN,BDATE,EDATE,MAXAPPTS,.APPTBGN,.APPTEND)
"RTN","HMPCAC",95,0)
 S NUMAPPTS=$O(Y(""),-1)
"RTN","HMPCAC",96,0)
 I MAXAPPTS,NUMAPPTS'<MAXAPPTS D
"RTN","HMPCAC",97,0)
 . N ORI
"RTN","HMPCAC",98,0)
 . S ORI=0 S APPTEND=$P(APPTEND,".")
"RTN","HMPCAC",99,0)
 . F  S ORI=$O(Y(ORI)) Q:'ORI  D  ;erase last day's appts since we assume it to be partial
"RTN","HMPCAC",100,0)
 .. I APPTEND<$P(Y(ORI),U,4) K Y(ORI) S NUMAPPTS=NUMAPPTS-1 ;erase an appointment
"RTN","HMPCAC",101,0)
 . S Y(MAXAPPTS+1)="^ *** UNABLE TO SHOW ALL APPOINTMENTS ***"
"RTN","HMPCAC",102,0)
 . S Y(MAXAPPTS+2)="^ Showing the first "_NUMAPPTS_" appointments from "_$$FMTE^XLFDT(APPTBGN,"D")_" to "_$$FMTE^XLFDT(APPTEND-1,"D")
"RTN","HMPCAC",103,0)
 . S Y(MAXAPPTS+3)="^"_$C(160)_" Modify the appointment list date range to start on "_$$FMTE^XLFDT(APPTEND,"D")_" to see additional appointments." ;add blank line
"RTN","HMPCAC",104,0)
 . S Y(MAXAPPTS+4)="^"_$C(160)_$C(160) ;add blank line
"RTN","HMPCAC",105,0)
 ;
"RTN","HMPCAC",106,0)
 Q  ; DE2818, added QUIT here to prevent code falling through
"RTN","HMPCAC",107,0)
 ;
"RTN","HMPCAC",108,0)
CLINPTS(Y,USER,CLIN,BDATE,EDATE,MAXAPPTS,APPTBGN,APPTEND) ; RETURN LIST OF PTS W/CLINIC APPT W/IN BEGINNING AND END DATES
"RTN","HMPCAC",109,0)
 ; PKS-8/2003: Modified for new scheduling pkg APIs.
"RTN","HMPCAC",110,0)
 I $G(CLIN)<1 S Y(1)="^No clinic identified" Q 
"RTN","HMPCAC",111,0)
 I $$ACTLOC^ORWU(CLIN)'=1 S Y(1)="^Clinic is inactive or Occasion Of Service" Q
"RTN","HMPCAC",112,0)
 N ORSRV,ORRESULT,ORERR,ORI,ORPT,ORPTSTAT,ORAPPT,ORCLIN,SDARRAY,NODE
"RTN","HMPCAC",113,0)
 I $L($G(MAXAPPTS))=0 S MAXAPPTS=200
"RTN","HMPCAC",114,0)
 S ORSRV=$G(^VA(200,USER,5)) I +ORSRV>0 S ORSRV=$P(ORSRV,U)
"RTN","HMPCAC",115,0)
 I BDATE="" S BDATE=$$UP^XLFSTR($$GET^XPAR("USR^SRV.`"_+$G(ORSRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC START DATE",1,"E"))
"RTN","HMPCAC",116,0)
 I EDATE="" S EDATE=$$UP^XLFSTR($$GET^XPAR("USR^SRV.`"_+$G(ORSRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC STOP DATE",1,"E"))
"RTN","HMPCAC",117,0)
 ;
"RTN","HMPCAC",118,0)
 ; Convert BDATE, EDATE to FM Date/Time:
"RTN","HMPCAC",119,0)
 D DT^DILF("T",BDATE,.BDATE,"","")
"RTN","HMPCAC",120,0)
 D DT^DILF("T",EDATE,.EDATE,"","")
"RTN","HMPCAC",121,0)
 I (BDATE=-1)!(EDATE=-1) S Y(1)="^Error in date range." Q 
"RTN","HMPCAC",122,0)
 S EDATE=$P(EDATE,".")_.5 ; Add 1/2 day to end date.
"RTN","HMPCAC",123,0)
 ;
"RTN","HMPCAC",124,0)
 K ^TMP($J,"SDAMA301") ; clear residual data
"RTN","HMPCAC",125,0)
 S ORRESULT=""
"RTN","HMPCAC",126,0)
 S ORCLIN=+CLIN
"RTN","HMPCAC",127,0)
 S SDARRAY(1)=BDATE_";"_EDATE
"RTN","HMPCAC",128,0)
 S SDARRAY(2)=+CLIN
"RTN","HMPCAC",129,0)
 S SDARRAY(3)="R;I;NT"
"RTN","HMPCAC",130,0)
 S SDARRAY("SORT")="P" ;no clinic index
"RTN","HMPCAC",131,0)
 S SDARRAY("FLDS")="3;4"  ;ApptStatus^IEN;PtName
"RTN","HMPCAC",132,0)
 I MAXAPPTS S SDARRAY("MAX")=MAXAPPTS
"RTN","HMPCAC",133,0)
 ;
"RTN","HMPCAC",134,0)
 S ORRESULT=$$SDAPI^SDAMA301(.SDARRAY) ; DBIA 4433
"RTN","HMPCAC",135,0)
 ;
"RTN","HMPCAC",136,0)
 ; Deal with server errors:
"RTN","HMPCAC",137,0)
 I ORRESULT<0 D  S Y(1)=U_ORERR Q
"RTN","HMPCAC",138,0)
 .S ORERR=""
"RTN","HMPCAC",139,0)
 .N IDXERR S IDXERR=$O(^TMP($J,"SDAMA301","")) Q:IDXERR'>0
"RTN","HMPCAC",140,0)
 .S ORERR=^TMP($J,"SDAMA301",IDXERR)
"RTN","HMPCAC",141,0)
 ;
"RTN","HMPCAC",142,0)
 ; add ^TMP results to local array
"RTN","HMPCAC",143,0)
 S (ORPT,ORI)=0
"RTN","HMPCAC",144,0)
 I ORRESULT'>0 S Y(1)="^No appointments." Q
"RTN","HMPCAC",145,0)
 F  S ORPT=$O(^TMP($J,"SDAMA301",ORPT)) Q:ORPT=""  D
"RTN","HMPCAC",146,0)
 .S ORAPPT=""
"RTN","HMPCAC",147,0)
 .F  S ORAPPT=$O(^TMP($J,"SDAMA301",ORPT,ORAPPT)) Q:ORAPPT=""  D
"RTN","HMPCAC",148,0)
 ..S ORI=ORI+1
"RTN","HMPCAC",149,0)
 ..S NODE=^TMP($J,"SDAMA301",ORPT,ORAPPT)
"RTN","HMPCAC",150,0)
 ..S Y(ORI)=$TR($P(NODE,U,4),";","^") ; IEN^Name.
"RTN","HMPCAC",151,0)
 ..S Y(ORI)=Y(ORI)_U_ORCLIN ; ^Clinic IEN.
"RTN","HMPCAC",152,0)
 ..S Y(ORI)=Y(ORI)_U_ORAPPT ; App't.
"RTN","HMPCAC",153,0)
 ..I $L($G(APPTEND))=0 S APPTEND=ORAPPT,APPTBGN=ORAPPT
"RTN","HMPCAC",154,0)
 ..I ORAPPT>APPTEND S APPTEND=ORAPPT
"RTN","HMPCAC",155,0)
 ..I ORAPPT<APPTBGN S APPTBGN=ORAPPT
"RTN","HMPCAC",156,0)
 ..S ORPTSTAT=$P($P(NODE,U,3),";",1) ;appt status, will be transformed to pt status.
"RTN","HMPCAC",157,0)
 ..S ORPTSTAT=$S(ORPTSTAT="I":"IPT",ORPTSTAT="R":"OPT",ORPTSTAT="NT":"OPT",1:"") ; Pt Status.
"RTN","HMPCAC",158,0)
 ..S Y(ORI)=Y(ORI)_U_U_U_U_U_ORPTSTAT ; Pt I or O status (or "NT").
"RTN","HMPCAC",159,0)
 K ^TMP($J,"SDAMA301") ; Clean house after finishing.
"RTN","HMPCAC",160,0)
 ;
"RTN","HMPCAC",161,0)
 Q
"RTN","HMPCAC",162,0)
 ;
"RTN","HMPCAC",163,0)
COMBPTS(LIST,USER,PTR,BDATE,EDATE) ;
"RTN","HMPCAC",164,0)
 N FILE,MAXAPPTS,MSG,PTR,RTN,SRC,TXT,HMPERR,HMPY
"RTN","HMPCAC",165,0)
 ;
"RTN","HMPCAC",166,0)
 ; Do preliminary settings, cleanup, look for an existing user record:
"RTN","HMPCAC",167,0)
 S MSG=""                                       ; Default.
"RTN","HMPCAC",168,0)
 S MAXAPPTS=$S(BDATE=EDATE:0,1:200)         ; If date range is only one day then no max, otherwise 200
"RTN","HMPCAC",169,0)
 S RTN=$$FIND1^DIC(100.24,"","QX",USER,"","","HMPERR")
"RTN","HMPCAC",170,0)
 K HMPERR
"RTN","HMPCAC",171,0)
 D CLEAN^DILF ; Clean up after DB call.
"RTN","HMPCAC",172,0)
 ;
"RTN","HMPCAC",173,0)
 ; If no combination record, then punt:
"RTN","HMPCAC",174,0)
 I +RTN<1 S MSG="No combination entry." Q
"RTN","HMPCAC",175,0)
 ;
"RTN","HMPCAC",176,0)
 ;
"RTN","HMPCAC",177,0)
 ; Order through the user's combination source entries:
"RTN","HMPCAC",178,0)
 S SORT="A" ; Required variable for PTSCOMBO^ORQPTQ5.
"RTN","HMPCAC",179,0)
 S SRC=0
"RTN","HMPCAC",180,0)
 ;DE2818, ^OR(100.24) - ICR 6283
"RTN","HMPCAC",181,0)
 F  S SRC=$O(^OR(100.24,RTN,.01,SRC)) Q:'SRC  D
"RTN","HMPCAC",182,0)
 .K ORY  ; Clean up each time.
"RTN","HMPCAC",183,0)
 .S TXT=$G(^OR(100.24,RTN,.01,SRC,0))  ; Get record's value.
"RTN","HMPCAC",184,0)
 .;
"RTN","HMPCAC",185,0)
 .; In case of error, punt:
"RTN","HMPCAC",186,0)
 .I TXT="" S MSG="Combination source entry error." Q
"RTN","HMPCAC",187,0)
 .S PTR=$P(TXT,";")                       ; Get pointer.
"RTN","HMPCAC",188,0)
 .S FILE="^"_$P(TXT,";",2)                ; Get file.
"RTN","HMPCAC",189,0)
 .;
"RTN","HMPCAC",190,0)
 .; Get info for each source entry and build HMPY array accordingly.
"RTN","HMPCAC",191,0)
 .I FILE="^DIC(42," D  Q  ; Wards
"RTN","HMPCAC",192,0)
 ..D WARDPTS^ORQPTQ2(.HMPY,PTR)
"RTN","HMPCAC",193,0)
 ..I $D(HMPY) D BLDLIST(.LIST,.HMPY)
"RTN","HMPCAC",194,0)
 .I FILE="^VA(200," D  Q  ; Providers
"RTN","HMPCAC",195,0)
 ..D PROVPTS^ORQPTQ2(.HMPY,PTR)
"RTN","HMPCAC",196,0)
 ..I $D(HMPY) D BLDLIST(.LIST,.HMPY)
"RTN","HMPCAC",197,0)
 .I FILE="^DIC(45.7," D  Q  ; Specialties
"RTN","HMPCAC",198,0)
 ..D SPECPTS^ORQPTQ2(.HMPY,PTR)
"RTN","HMPCAC",199,0)
 ..I $D(HMPY) D BLDLIST(.LIST,.HMPY)
"RTN","HMPCAC",200,0)
 .I FILE="^OR(100.21," D  Q  ; Team Lists
"RTN","HMPCAC",201,0)
 ..D TEAMPTS^ORQPTQ1(.HMPY,PTR)
"RTN","HMPCAC",202,0)
 ..I $D(HMPY) D BLDLIST(.LIST,.HMPY)
"RTN","HMPCAC",203,0)
 .I FILE="^SC(" D  Q  ; Clinics
"RTN","HMPCAC",204,0)
 ..N APPTBGN,APPTEND S (APPTBGN,APPTEND)=""
"RTN","HMPCAC",205,0)
 ..D CLINPTS^ORQPTQ2(.HMPY,PTR,BDATE,EDATE,MAXAPPTS,.APPTBGN,.APPTEND)
"RTN","HMPCAC",206,0)
 ..I $D(HMPY) D BLDLIST(.LIST,.HMPY)
"RTN","HMPCAC",207,0)
 ;
"RTN","HMPCAC",208,0)
 Q
"RTN","HMPCAC",209,0)
 ;
"RTN","HMPCAC",210,0)
GETDFLST(LIST,USER) ;
"RTN","HMPCAC",211,0)
 N API,BEG,END,IEN,SRC,SRV,HMPSRC,HMPY,X
"RTN","HMPCAC",212,0)
 S SRV=$G(^VA(200,USER,5)) I +SRV>0 S SRV=$P(SRV,U)
"RTN","HMPCAC",213,0)
 S SRC=$$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV),"ORLP DEFAULT LIST SOURCE",1,"Q")
"RTN","HMPCAC",214,0)
 ;
"RTN","HMPCAC",215,0)
 I SRC="T" S IEN=$$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV),"ORLP DEFAULT TEAM",1,"Q") D:+$G(IEN)>0 TEAMPTS^ORQPTQ1(.HMPY,IEN)
"RTN","HMPCAC",216,0)
 I SRC="W" S IEN=$$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV),"ORLP DEFAULT WARD",1,"Q") D:+$G(IEN)>0 BYWARD^ORWPT(.HMPY,IEN)
"RTN","HMPCAC",217,0)
 I SRC="P" S IEN=$$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV),"ORLP DEFAULT PROVIDER",1,"Q") D:+$G(IEN)>0 PROVPTS^ORQPTQ2(.HMPY,IEN)
"RTN","HMPCAC",218,0)
 I SRC="S" S IEN=$$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV),"ORLP DEFAULT SPECIALTY",1,"Q") D:+$G(IEN)>0 SPECPTS^ORQPTQ2(.HMPY,IEN)
"RTN","HMPCAC",219,0)
 I SRC'="C",SRC'="M" D BLDLIST(.LIST,.HMPY) Q
"RTN","HMPCAC",220,0)
 ;
"RTN","HMPCAC",221,0)
 I SRC="C" D  Q
"RTN","HMPCAC",222,0)
 .F X="Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday" D
"RTN","HMPCAC",223,0)
 ..S API="ORLP DEFAULT CLINIC "_$$UP^XLFSTR(X),IEN=$$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV),API,1,"Q") I +$G(IEN)>0 D
"RTN","HMPCAC",224,0)
 ...S BEG=$$UP^XLFSTR($$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC START DATE",1,"E"))
"RTN","HMPCAC",225,0)
 ...I BEG="T+0" S BEG=$$FMTE^XLFDT(DT,BEG)
"RTN","HMPCAC",226,0)
 ...S END=$$UP^XLFSTR($$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC STOP DATE",1,"E"))
"RTN","HMPCAC",227,0)
 ...I END="T+0" S END=$$FMTE^XLFDT(DT,END)
"RTN","HMPCAC",228,0)
 ...D CLINPTS2(.HMPY,USER,+$G(IEN),BEG,END)
"RTN","HMPCAC",229,0)
 ...D BLDLIST(.LIST,.HMPY)
"RTN","HMPCAC",230,0)
 I SRC="M" D  Q  ;DE2818, ^OR(100.24) - ICR 6283
"RTN","HMPCAC",231,0)
 .S IEN=$D(^OR(100.24,USER,0)) I +$G(IEN)>0 S IEN=USER D
"RTN","HMPCAC",232,0)
 ..S BEG=$$UP^XLFSTR($$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC START DATE",1,"E"))
"RTN","HMPCAC",233,0)
 ..I BEG="T+0" S BEG=$$FMTE^XLFDT(DT,BEG)
"RTN","HMPCAC",234,0)
 ..S END=$$UP^XLFSTR($$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC STOP DATE",1,"E"))
"RTN","HMPCAC",235,0)
 ..I END="T+0" S END=$$FMTE^XLFDT(DT,END)
"RTN","HMPCAC",236,0)
 ..D COMBPTS(.LIST,USER,+$G(IEN),BEG,END) ; "0"= GUI RPC call.
"RTN","HMPCAC",237,0)
 Q
"RTN","HMPCAC",238,0)
 ;
"RTN","HMPCAC",239,0)
 ;
"RTN","HMPCAC",240,0)
 ;REMOPT(IEN,OPT) ;
"RTN","HMPCAC",241,0)
 ;Q
"RTN","HMPCAC",242,0)
 ;
"RTN","HMPCORD")
1^151
"RTN","HMPCORD1")
1^152
"RTN","HMPCORD2")
1^153
"RTN","HMPCORD3")
1^154
"RTN","HMPCORD4")
0^11^B141593321
"RTN","HMPCORD4",1,0)
HMPCORD4 ;SLC/AGP,ASMR/RRB -Retrieved Orderable Items;Nov 04, 2015 12:13:23
"RTN","HMPCORD4",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPCORD4",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPCORD4",4,0)
 ;
"RTN","HMPCORD4",5,0)
 Q
"RTN","HMPCORD4",6,0)
 ;
"RTN","HMPCORD4",7,0)
ADDODG ; called by HMPEF
"RTN","HMPCORD4",8,0)
 N CNT,IEN,NUM,NODE,PTR,RESULT,TEMP
"RTN","HMPCORD4",9,0)
 N ERRMSG S ERRMSG="A mumps error occurred while extracting display groups"
"RTN","HMPCORD4",10,0)
 S IEN=0 F  S IEN=$O(^ORD(100.98,IEN)) Q:IEN'>0  D
"RTN","HMPCORD4",11,0)
 .N $ES,$ET
"RTN","HMPCORD4",12,0)
 .S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPCORD4",13,0)
 .I '$D(^ORD(100.98,IEN,1)) D  Q
"RTN","HMPCORD4",14,0)
 ..S NODE=$G(^ORD(100.98,IEN,0)) D SODGNODE(.RESULT,NODE)
"RTN","HMPCORD4",15,0)
 ..S RESULT("uid")=$$SETUID^HMPUTILS("displayGroup","",IEN),RESULT("internal")=IEN
"RTN","HMPCORD4",16,0)
 ..D ADD^HMPEF("RESULT") S HMPCNT=+$G(HMPCNT)+1,HMPLAST=IEN
"RTN","HMPCORD4",17,0)
 .D ADDODG1(IEN,.TEMP)
"RTN","HMPCORD4",18,0)
 .M RESULT=TEMP
"RTN","HMPCORD4",19,0)
 .D ADD^HMPEF("RESULT") S HMPCNT=+$G(HMPCNT)+1,HMPLAST=IEN
"RTN","HMPCORD4",20,0)
 I IEN'>0 S HMPFINI=1
"RTN","HMPCORD4",21,0)
 Q
"RTN","HMPCORD4",22,0)
 ;
"RTN","HMPCORD4",23,0)
ADDODG1(IEN,TEMP) ;
"RTN","HMPCORD4",24,0)
 N CNT,NODE,NUM,PTR
"RTN","HMPCORD4",25,0)
 S NODE=$G(^ORD(100.98,IEN,0)) D SODGNODE(.TEMP,NODE)
"RTN","HMPCORD4",26,0)
 S TEMP("uid")=$$SETUID^HMPUTILS("displayGroup","",IEN),TEMP("internal")=IEN
"RTN","HMPCORD4",27,0)
 I '$D(^ORD(100.98,IEN,1)) Q
"RTN","HMPCORD4",28,0)
 S NUM=0,CNT=0 F  S NUM=$O(^ORD(100.98,IEN,1,NUM)) Q:NUM'>0  D
"RTN","HMPCORD4",29,0)
 .N ARRAY
"RTN","HMPCORD4",30,0)
 .S PTR=$G(^ORD(100.98,IEN,1,NUM,0)) Q:PTR'>0
"RTN","HMPCORD4",31,0)
 .D ADDODG1(PTR,.ARRAY) I '$D(ARRAY) Q
"RTN","HMPCORD4",32,0)
 .S CNT=CNT+1 M TEMP("children",CNT,"item")=ARRAY
"RTN","HMPCORD4",33,0)
 Q
"RTN","HMPCORD4",34,0)
 ;
"RTN","HMPCORD4",35,0)
SODGNODE(RESULT,NODE) ;
"RTN","HMPCORD4",36,0)
 N NAME,TEMP,X
"RTN","HMPCORD4",37,0)
 F X=1:1:4 D
"RTN","HMPCORD4",38,0)
 .S TEMP=$P(NODE,U,X) I X<4,$L(TEMP)>1 S RESULT($S(X=1:"name",X=2:"displayName",X=3:"abbreviation"))=TEMP
"RTN","HMPCORD4",39,0)
 .I X=4,+TEMP>0 S NAME=$P($G(^ORD(101.41,TEMP,0)),U) S RESULT("defaultDialogUid")=$$SETUID^HMPUTILS("orderDialog","",TEMP),RESULT("defaultDialogName")=NAME
"RTN","HMPCORD4",40,0)
 Q
"RTN","HMPCORD4",41,0)
 ;
"RTN","HMPCORD4",42,0)
ADDROUTE ;
"RTN","HMPCORD4",43,0)
 N CNT,IEN,NAME,RESULT,ROUTES,X,UID,VALUE
"RTN","HMPCORD4",44,0)
 N ERRMSG
"RTN","HMPCORD4",45,0)
 S ERRMSG="A mumps error occurred while extracting routes."
"RTN","HMPCORD4",46,0)
 S CNT=1,IEN=0
"RTN","HMPCORD4",47,0)
 I +$G(HMPLAST)>0 S IEN=HMPLAST
"RTN","HMPCORD4",48,0)
 F  S IEN=$O(^PS(51.2,IEN)) Q:IEN'>0  D
"RTN","HMPCORD4",49,0)
 .N $ES,$ET
"RTN","HMPCORD4",50,0)
 .S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPCORD4",51,0)
 .S NODE=$P($G(^PS(51.2,IEN,0)),U,1,6)
"RTN","HMPCORD4",52,0)
 .I $P(NODE,U,5)>0 Q
"RTN","HMPCORD4",53,0)
 .S UID=$$SETUID^HMPUTILS("route","",IEN)
"RTN","HMPCORD4",54,0)
 .S RESULT("uid")=UID,RESULT("internal")=IEN
"RTN","HMPCORD4",55,0)
 .F X=1,2,3,6 D
"RTN","HMPCORD4",56,0)
 ..S VALUE=$P(NODE,U,X) Q:VALUE=""
"RTN","HMPCORD4",57,0)
 ..S NAME=$S(X=1:"name",X=2:"externalName",X=3:"abbreviation",X=6:"useInIV",1:"")
"RTN","HMPCORD4",58,0)
 ..I NAME="" Q
"RTN","HMPCORD4",59,0)
 ..I X=6 S VALUE=$S(VALUE=1:"true",1:"false")
"RTN","HMPCORD4",60,0)
 ..S RESULT(NAME)=VALUE
"RTN","HMPCORD4",61,0)
 .D ADD^HMPEF("RESULT") S HMPCNT=+$G(HMPCNT)+1,HMPLAST=IEN
"RTN","HMPCORD4",62,0)
 .;S CNT=CNT+1
"RTN","HMPCORD4",63,0)
 .K RESULT
"RTN","HMPCORD4",64,0)
 I IEN'>0 S HMPFINI=1
"RTN","HMPCORD4",65,0)
 Q
"RTN","HMPCORD4",66,0)
 ;
"RTN","HMPCORD4",67,0)
ADDSCH ;
"RTN","HMPCORD4",68,0)
 N CNT,IEN,NAME,NODE,NUM,RESULT,UID,HMPSCH
"RTN","HMPCORD4",69,0)
 ;D SCHALL^ORWDPS1(.HMPSCH,0,0)
"RTN","HMPCORD4",70,0)
 D SCHED^PSS51P1(0,.HMPSCH)
"RTN","HMPCORD4",71,0)
 N ERRMSG
"RTN","HMPCORD4",72,0)
 S ERRMSG="A mumps error occurred while extracting schedules."
"RTN","HMPCORD4",73,0)
 S CNT=0 F  S CNT=$O(HMPSCH(CNT)) Q:CNT'>0  D
"RTN","HMPCORD4",74,0)
 .N $ES,$ET
"RTN","HMPCORD4",75,0)
 .S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPCORD4",76,0)
 .S NODE=$G(HMPSCH(CNT))
"RTN","HMPCORD4",77,0)
 .S NAME=$P(NODE,U,2)
"RTN","HMPCORD4",78,0)
 .S IEN=$P(NODE,U)
"RTN","HMPCORD4",79,0)
 .;S IEN=$O(^PS(51.1,"B",NAME,"")) I IEN'>0 Q
"RTN","HMPCORD4",80,0)
 .S UID=$$SETUID^HMPUTILS("schedule","",IEN)
"RTN","HMPCORD4",81,0)
 .S RESULT("uid")=UID,RESULT("internal")=IEN
"RTN","HMPCORD4",82,0)
 .S RESULT("name")=NAME
"RTN","HMPCORD4",83,0)
 .I $P(NODE,U,3)'="" S RESULT("externalValue")=$P(NODE,U,3)
"RTN","HMPCORD4",84,0)
 .I $P(NODE,U,4)'="" S RESULT("scheduleType")=$P(NODE,U,4)
"RTN","HMPCORD4",85,0)
 .D ADD^HMPEF("RESULT") S HMPCNT=+$G(HMPCNT)+1,HMPLAST=IEN
"RTN","HMPCORD4",86,0)
 .K RESULT
"RTN","HMPCORD4",87,0)
 I CNT'>0 S HMPFINI=1
"RTN","HMPCORD4",88,0)
 Q
"RTN","HMPCORD4",89,0)
 ;
"RTN","HMPCORD4",90,0)
LAB(RESULT,OI) ;
"RTN","HMPCORD4",91,0)
 N CNT,I,IEN,NODE,SYN,TEMP,HMPLST
"RTN","HMPCORD4",92,0)
 S RESULT("dialogAdditionalInformation","sendPatientTimes",1,"internal")="LT",RESULT("dialogAdditionalInformation","sendPatientTimes",1,"name")="Today"
"RTN","HMPCORD4",93,0)
 S RESULT("dialogAdditionalInformation","sendPatientTimes",2,"internal")="LT+1",RESULT("dialogAdditionalInformation","sendPatientTimes",2,"name")="Tomorrow"
"RTN","HMPCORD4",94,0)
 ;
"RTN","HMPCORD4",95,0)
 D GETLST^XPAR(.HMPLST,"ALL","ORWD COMMON LAB INPT")  ;DBIA 2263
"RTN","HMPCORD4",96,0)
 S I=0 F  S I=$O(HMPLST(I)) Q:'I  D
"RTN","HMPCORD4",97,0)
 . S IEN=$P(HMPLST(I),U,2)
"RTN","HMPCORD4",98,0)
 . K P1
"RTN","HMPCORD4",99,0)
 . S P1="dialogAdditionalInformation"
"RTN","HMPCORD4",100,0)
 . S RESULT("dialogAdditionalInformation","common",I,"uid")=$$SETUID^HMPUTILS("orderable","",IEN)
"RTN","HMPCORD4",101,0)
 . S RESULT("dialogAdditionalInformation","common",I,"internal")=IEN
"RTN","HMPCORD4",102,0)
 . S RESULT("dialogAdditionalInformation","common",I,"name")=$P(^ORD(101.43,IEN,0),U,1)
"RTN","HMPCORD4",103,0)
 ;
"RTN","HMPCORD4",104,0)
 S NODE=$G(^ORD(101.43,OI,"LR"))
"RTN","HMPCORD4",105,0)
 S RESULT("labDetails","speciman")=$P(NODE,U),RESULT("labDetails","labCollect")=$S($P(NODE,U,2)=1:"true",1:"false"),RESULT("labDetails","sequence")=$P(NODE,U,3)
"RTN","HMPCORD4",106,0)
 S RESULT("labDetails","maxOrderFrequency")=$P(NODE,U,4),RESULT("labDetails","dailyOrderMax")=$P(NODE,U,5)
"RTN","HMPCORD4",107,0)
 ;
"RTN","HMPCORD4",108,0)
 S TEMP=$P(NODE,U,6)
"RTN","HMPCORD4",109,0)
 S RESULT("types",1,"abb")=TEMP,RESULT("types",1,"uid")=$$SETUID^HMPUTILS("labType","",TEMP),RESULT("types",1,"internal")=TEMP,RESULT("types",1,"type")=$$LABTYPE(TEMP)
"RTN","HMPCORD4",110,0)
 S TEMP=$P(NODE,U,7)
"RTN","HMPCORD4",111,0)
 I TEMP'="" S RESULT("labDetails","labTypeInternal")=TEMP,RESULT("labDetails","labTypeName")=$S(TEMP="I":"Input",TEMP="O":"Output",TEMP="B":"Both",TEMP="N":"Neither")
"RTN","HMPCORD4",112,0)
 I '$D(^ORD(101.43,OI,2)) Q
"RTN","HMPCORD4",113,0)
 S CNT=0
"RTN","HMPCORD4",114,0)
 S I=0 F  S I=$O(^ORD(101.43,OI,2,I)) Q:I'>0  D
"RTN","HMPCORD4",115,0)
 .S SYN=$G(^ORD(101.43,OI,2,I,0)) Q:SYN=""
"RTN","HMPCORD4",116,0)
 .S CNT=CNT+1,RESULT("synonym",CNT,"name")=SYN
"RTN","HMPCORD4",117,0)
 Q
"RTN","HMPCORD4",118,0)
 ;
"RTN","HMPCORD4",119,0)
LABTYPE(L) ;
"RTN","HMPCORD4",120,0)
 I L="CH" Q "Chemistry"
"RTN","HMPCORD4",121,0)
 I L="MI" Q "MICROBIOLOGY"
"RTN","HMPCORD4",122,0)
 I L="BB" Q "Blood Bank"
"RTN","HMPCORD4",123,0)
 I L="EM" Q "Electron Microscopy"
"RTN","HMPCORD4",124,0)
 I L="SP" Q "Surgical Pathology"
"RTN","HMPCORD4",125,0)
 I L="AU" Q "Autopsy"
"RTN","HMPCORD4",126,0)
 I L="CY" Q "Cytology"
"RTN","HMPCORD4",127,0)
 Q ""
"RTN","HMPCORD4",128,0)
 ;
"RTN","HMPCORD4",129,0)
OI(OITYPE) ; called by HMPEF
"RTN","HMPCORD4",130,0)
 N CNT,ERROR,IEN,NAME,LINK,LINKTYPE,NODE,RADDET,RADTYPE,RESULT,TCNT,TYPE,UID,HMPTEMP
"RTN","HMPCORD4",131,0)
 N ERRMSG
"RTN","HMPCORD4",132,0)
 S ERRMSG="A mumps error occurred while extracting orderable items."
"RTN","HMPCORD4",133,0)
 S CNT=1,IEN=0
"RTN","HMPCORD4",134,0)
 ;
"RTN","HMPCORD4",135,0)
 D RADTYPE(.RADTYPE,.RADDET)
"RTN","HMPCORD4",136,0)
 I +$G(HMPLAST)>0 S IEN=HMPLAST
"RTN","HMPCORD4",137,0)
 I +$G(HMPID)>0 S IEN=HMPID
"RTN","HMPCORD4",138,0)
 F  S IEN=$O(^ORD(101.43,IEN)) Q:IEN'>0  D  I HMPMAX>0,HMPI'<HMPMAX Q
"RTN","HMPCORD4",139,0)
 .N $ES,$ET
"RTN","HMPCORD4",140,0)
 .S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPCORD4",141,0)
 .K RESULT
"RTN","HMPCORD4",142,0)
 .S TYPE=$$VALIDOI(OITYPE,IEN)
"RTN","HMPCORD4",143,0)
 .I TYPE="" Q
"RTN","HMPCORD4",144,0)
 .S NAME=$P(^ORD(101.43,IEN,0),U),LINK=$P($P(^ORD(101.43,IEN,0),U,2),";99",1),LINKTYPE=$P($P(^ORD(101.43,IEN,0),U,2),";99",2)
"RTN","HMPCORD4",145,0)
 .S UID=$$SETUID^HMPUTILS("orderable","",IEN)
"RTN","HMPCORD4",146,0)
 .S RESULT("uid")=UID,RESULT("internal")=IEN
"RTN","HMPCORD4",147,0)
 .S RESULT("name")=NAME
"RTN","HMPCORD4",148,0)
 .S RESULT("link")=LINK
"RTN","HMPCORD4",149,0)
 .S RESULT("linktype")=LINKTYPE
"RTN","HMPCORD4",150,0)
 .I TYPE["PS" D PS(.RESULT,IEN,CNT)
"RTN","HMPCORD4",151,0)
 .I TYPE["RA" D RA(.RESULT,IEN,CNT,.RADTYPE,.RADDET)
"RTN","HMPCORD4",152,0)
 .I TYPE["LR" D LAB(.RESULT,IEN)
"RTN","HMPCORD4",153,0)
 .D ADD^HMPEF("RESULT") S HMPCNT=+$G(HMPCNT)+1,HMPLAST=IEN
"RTN","HMPCORD4",154,0)
 .S CNT=CNT+1
"RTN","HMPCORD4",155,0)
 I IEN'>0 S HMPFINI=1
"RTN","HMPCORD4",156,0)
 Q
"RTN","HMPCORD4",157,0)
 ;
"RTN","HMPCORD4",158,0)
PS(RESULT,IEN,PLACE) ;
"RTN","HMPCORD4",159,0)
 N CNT,COST,DOSE,DOSES,DRUG,MEDS,NAME,NODE,NUM,PSOI,SIZE,TYPE,UID,HMPDOSE
"RTN","HMPCORD4",160,0)
 S CNT=0
"RTN","HMPCORD4",161,0)
 I $D(^ORD(101.43,IEN,9,"B","NV RX")) S CNT=CNT+1 S RESULT("types",CNT,"type")="NON-VA MEDS" S MEDS("NV RX")=""
"RTN","HMPCORD4",162,0)
 I $D(^ORD(101.43,IEN,9,"B","O RX")) S CNT=CNT+1 S RESULT("types",CNT,"type")="OUTPATIENT MEDS" S MEDS("O RX")=""
"RTN","HMPCORD4",163,0)
 I $D(^ORD(101.43,IEN,9,"B","RX")) S CNT=CNT+1 S RESULT("types",CNT,"type")="MEDS" S MEDS("RX")=""
"RTN","HMPCORD4",164,0)
 I $D(^ORD(101.43,IEN,9,"B","UD RX")) S CNT=CNT+1 S RESULT("types",CNT,"type")="INPATIENT MEDS" S MEDS("UD RX")=""
"RTN","HMPCORD4",165,0)
 ;
"RTN","HMPCORD4",166,0)
 K DOSES
"RTN","HMPCORD4",167,0)
 S PSOI=+$P(^ORD(101.43,IEN,0),U,2)
"RTN","HMPCORD4",168,0)
 S TYPE="" F  S TYPE=$O(MEDS(TYPE)) Q:TYPE=""  D
"RTN","HMPCORD4",169,0)
 .D DOSE^PSSOPKI1(.HMPDOSE,PSOI,TYPE,0)
"RTN","HMPCORD4",170,0)
 .S CNT=0 F  S CNT=$O(HMPDOSE(CNT)) Q:CNT'>0  D
"RTN","HMPCORD4",171,0)
 ..S NODE=$G(HMPDOSE(CNT)),SIZE="",UID=0,DRUG="",COST=""
"RTN","HMPCORD4",172,0)
 ..S DOSE=$P(NODE,U,5)
"RTN","HMPCORD4",173,0)
 ..I $D(DOSES(DOSE)) Q
"RTN","HMPCORD4",174,0)
 ..I $P(NODE,U,3)'="",$P(NODE,U,4)'="" S SIZE=$P(NODE,U,3)_" "_$P(NODE,U,4)
"RTN","HMPCORD4",175,0)
 ..S DRUG=$P(NODE,U,6),COST=$P(NODE,U,7)
"RTN","HMPCORD4",176,0)
 ..S DOSES(DOSE)=$G(SIZE)_U_DRUG_U_COST
"RTN","HMPCORD4",177,0)
 ;
"RTN","HMPCORD4",178,0)
 S DOSE="",CNT=1 F  S DOSE=$O(DOSES(DOSE)) Q:DOSE=""  D
"RTN","HMPCORD4",179,0)
 .S NODE=DOSES(DOSE)
"RTN","HMPCORD4",180,0)
 .S RESULT("possibleDosages",CNT,"dose")=DOSE
"RTN","HMPCORD4",181,0)
 .I $P(NODE,U)'="" S RESULT("possibleDosages",CNT,"size")=$P(NODE,U)
"RTN","HMPCORD4",182,0)
 .I $P(NODE,U,2)>0 D
"RTN","HMPCORD4",183,0)
 ..S NAME=$P($G(^PSDRUG($P(NODE,U,2),0)),U)
"RTN","HMPCORD4",184,0)
 ..S RESULT("possibleDosages",CNT,"drugUid")=$$SETUID^HMPUTILS("drug","",$P(NODE,U,2))
"RTN","HMPCORD4",185,0)
 ..S RESULT("possibleDosages",CNT,"drugInternal")=$P(NODE,U,2)
"RTN","HMPCORD4",186,0)
 ..S RESULT("possibleDosages",CNT,"drugName")=NAME
"RTN","HMPCORD4",187,0)
 .;I $P(NODE,U,3)'="" S RESULT("possibleDosages",CNT,"cost")=$P(NODE,U,3) 
"RTN","HMPCORD4",188,0)
 .S CNT=CNT+1
"RTN","HMPCORD4",189,0)
 Q
"RTN","HMPCORD4",190,0)
 ;
"RTN","HMPCORD4",191,0)
RA(RESULT,IEN,PLACE,RADTYPE,RADDET) ;
"RTN","HMPCORD4",192,0)
 N CNT,NODE,TEMP
"RTN","HMPCORD4",193,0)
 S CNT=0
"RTN","HMPCORD4",194,0)
 S NODE=$G(^ORD(101.43,IEN,0))
"RTN","HMPCORD4",195,0)
 Q:$P(NODE,U,3)=""  ;BL;DE801 NULL SUBSCRIPT FOUND AT TEST SITES
"RTN","HMPCORD4",196,0)
 I $P(NODE,U,3)'="",$P(NODE,U,4)'="" S RESULT("code")=$$SETUID^HMPUTILS($$LOW^XLFSTR($P(NODE,U,4)),"",$P(NODE,U,3))
"RTN","HMPCORD4",197,0)
 S NODE=$G(^ORD(101.43,IEN,"RA"))
"RTN","HMPCORD4",198,0)
 S RESULT("imagingDetails","contractMedia")=$P(NODE,U)
"RTN","HMPCORD4",199,0)
 I $P(NODE,U,2)'="" S TEMP=$P(NODE,U,2),RESULT("imagingDetails","procedureType")=$S(TEMP="B":"Board",TEMP="D":"Detailed",TEMP="S":"Series",TEMP="P":"Parent")
"RTN","HMPCORD4",200,0)
 I $P(NODE,U,3)'="",$D(RADTYPE($P(NODE,U,3))) D
"RTN","HMPCORD4",201,0)
 .S TEMP=$G(RADTYPE($P(NODE,U,3))),RESULT("types",1,"type")=$P(TEMP,U,2),RESULT("types",1,"uid")=$$SETUID^HMPUTILS("radType","",$P(TEMP,U)),RESULT("internal")=$P(TEMP,U),RESULT("types",1,"abb")=$P(NODE,U,3)
"RTN","HMPCORD4",202,0)
 .S RESULT("imagingDetails","commonProcedure")=$S($P(NODE,U,4)=1:"true",1:"false")
"RTN","HMPCORD4",203,0)
 .I $D(RADTYPE($P(NODE,U,3))) M RESULT("dialogAdditionalInformation")=RADDET($P(NODE,U,3))
"RTN","HMPCORD4",204,0)
 Q
"RTN","HMPCORD4",205,0)
 ;
"RTN","HMPCORD4",206,0)
RADTYPE(RADTYPE,RADDET) ;
"RTN","HMPCORD4",207,0)
 ;build radiology type array for reused to load imaging types
"RTN","HMPCORD4",208,0)
 N ABB,CNT,IMGTYP,SUBMIT,TCNT,URG,VALUES,HMPTEMP,HMPX
"RTN","HMPCORD4",209,0)
 D IMTYPSEL^ORWDRA32(.HMPTEMP,"")
"RTN","HMPCORD4",210,0)
 D CAT(.VALUES),TRANS(.VALUES),URGENCY(.VALUES)
"RTN","HMPCORD4",211,0)
 S TCNT=""
"RTN","HMPCORD4",212,0)
 F  S TCNT=$O(HMPTEMP(TCNT)) Q:TCNT=""  D
"RTN","HMPCORD4",213,0)
 .S NODE=HMPTEMP(TCNT)
"RTN","HMPCORD4",214,0)
 .S IMGTYP=$P(NODE,U),ABB=$P(NODE,U,3)
"RTN","HMPCORD4",215,0)
 .D SUBMIT(.VALUES,ABB)
"RTN","HMPCORD4",216,0)
 .S RADTYPE(ABB)=IMGTYP_U_$P(NODE,U,2)_U_$P(NODE,U,4)
"RTN","HMPCORD4",217,0)
 .I $D(VALUES) M RADDET(ABB)=VALUES
"RTN","HMPCORD4",218,0)
 .;Radiology Modifier
"RTN","HMPCORD4",219,0)
 .S I=$O(^RA(79.2,"C",ABB,0)) Q:'I
"RTN","HMPCORD4",220,0)
 .S HMPX=0,CNT=0 F  S HMPX=$O(^RAMIS(71.2,"AB",I,HMPX)) Q:'HMPX  D
"RTN","HMPCORD4",221,0)
 ..S CNT=CNT+1
"RTN","HMPCORD4",222,0)
 ..S RADDET(ABB,"modifier",CNT,"uid")=$$SETUID^HMPUTILS("modifier","",HMPX),RADDET(ABB,"modifier",CNT,"internal")=HMPX
"RTN","HMPCORD4",223,0)
 ..S RADDET(ABB,"modifier",CNT,"name")=$P(^RAMIS(71.2,HMPX,0),U)
"RTN","HMPCORD4",224,0)
 Q
"RTN","HMPCORD4",225,0)
 ;
"RTN","HMPCORD4",226,0)
 ;Transport values
"RTN","HMPCORD4",227,0)
TRANS(RADDET) ;
"RTN","HMPCORD4",228,0)
 N CNT,HMPX
"RTN","HMPCORD4",229,0)
 S CNT=0
"RTN","HMPCORD4",230,0)
 F HMPX="A^AMBULATORY","P^PORTABLE","S^STRETCHER","W^WHEELCHAIR" D
"RTN","HMPCORD4",231,0)
 .S CNT=CNT+1,RADDET("transport",CNT,"uid")=$$SETUID^HMPUTILS("transport","",$P(HMPX,U)),RADDET("transport",CNT,"name")=$P(HMPX,U,2),RADDET("transport",CNT,"internal")=$P(HMPX,U)
"RTN","HMPCORD4",232,0)
 Q
"RTN","HMPCORD4",233,0)
 ;
"RTN","HMPCORD4",234,0)
CAT(RADDET) ;category values
"RTN","HMPCORD4",235,0)
 N CNT,HMPX
"RTN","HMPCORD4",236,0)
 S CNT=0
"RTN","HMPCORD4",237,0)
 F HMPX="I^INPATIENT","O^OUTPATIENT","E^EMPLOYEE","C^CONTRACT","S^SHARING","R^RESEARCH" D
"RTN","HMPCORD4",238,0)
 .S CNT=CNT+1,RADDET("category",CNT,"uid")=$$SETUID^HMPUTILS("transport","",$P(HMPX,U)),RADDET("category",CNT,"name")=$P(HMPX,U,2),RADDET("category",CNT,"internal")=$P(HMPX,U)
"RTN","HMPCORD4",239,0)
 Q
"RTN","HMPCORD4",240,0)
 ;
"RTN","HMPCORD4",241,0)
URGENCY(URG) ; Get the allowable urgencies and default
"RTN","HMPCORD4",242,0)
 N CNT,I,HMPX
"RTN","HMPCORD4",243,0)
 S HMPX="",I=0,CNT=0
"RTN","HMPCORD4",244,0)
 F  S ORX=$O(^ORD(101.42,"S.RA",HMPX)) Q:HMPX=""  D
"RTN","HMPCORD4",245,0)
 . S I=$O(^ORD(101.42,"S.RA",HMPX,0))
"RTN","HMPCORD4",246,0)
 . S URG("urgency",CNT,"uid")=$$SETUID^HMPUTILS("urgency","",I),URG("urgency",CNT,"internal")=I
"RTN","HMPCORD4",247,0)
 . S URG("urgency",CNT,"name")=HMPX
"RTN","HMPCORD4",248,0)
 . S URG("urgency",CNT,"default")="false"
"RTN","HMPCORD4",249,0)
 . S CNT=CNT+1
"RTN","HMPCORD4",250,0)
 S I=$O(^ORD(101.42,"B","ROUTINE",0)) I +I=0 Q
"RTN","HMPCORD4",251,0)
 S CNT=CNT+1
"RTN","HMPCORD4",252,0)
 S URG("urgency",CNT,"uid")=$$SETUID^HMPUTILS("urgency","",I),URG("urgency",CNT,"internal")=I
"RTN","HMPCORD4",253,0)
 S URG("urgency",CNT,"name")="Routine"
"RTN","HMPCORD4",254,0)
 S URG("urgency",CNT,"default")="true"
"RTN","HMPCORD4",255,0)
 Q
"RTN","HMPCORD4",256,0)
 ;
"RTN","HMPCORD4",257,0)
SUBMIT(SUBMIT,IMGTYP) ; Get the locations to which the request may be submitted
"RTN","HMPCORD4",258,0)
 N CNT,FIRST,TMPLST,ASK,HMPX
"RTN","HMPCORD4",259,0)
 S CNT=0
"RTN","HMPCORD4",260,0)
 D EN4^RAO7PC1(IMGTYP,"TMPLST")
"RTN","HMPCORD4",261,0)
 S FIRST=1
"RTN","HMPCORD4",262,0)
 S I=0 F  S I=$O(TMPLST(I)) Q:'I  D
"RTN","HMPCORD4",263,0)
 . S CNT=CNT+1,HMPX=$P(TMPLST(I),U,1,2),SUBMIT("submit",CNT,"name")=$P(HMPX,U,2)
"RTN","HMPCORD4",264,0)
 . S SUBMIT("submit",CNT,"default")=$S(FIRST=1:"true",1:"false")
"RTN","HMPCORD4",265,0)
 . S SUBMIT("submit",CNT,"uid")=$$SETUID^HMPUTILS("imagingLocation","",$P(HMPX,U)),SUBMIT("submit",CNT,"internal")=$P(HMPX,U),FIRST=0
"RTN","HMPCORD4",266,0)
 S HMPX=$$GET^XPAR("ALL","RA SUBMIT PROMPT",1,"Q")
"RTN","HMPCORD4",267,0)
 S ASK=$S($L(HMPX):HMPX,1:1)
"RTN","HMPCORD4",268,0)
 S SUBMIT("askSubmit")=$S(ASK=1:"true",ASK=0:"false",1:"true")
"RTN","HMPCORD4",269,0)
 Q
"RTN","HMPCORD4",270,0)
 ;
"RTN","HMPCORD4",271,0)
QO ;
"RTN","HMPCORD4",272,0)
 N IEN,NAME,NODE,RESULT
"RTN","HMPCORD4",273,0)
 N ERRMSG S ERRMSG="A mumps error occurred while extracting orderable items."
"RTN","HMPCORD4",274,0)
 S IEN=0 F  S IEN=$O(^ORD(101.41,IEN)) Q:IEN'>0  D
"RTN","HMPCORD4",275,0)
 .N $ES,$ET
"RTN","HMPCORD4",276,0)
 .S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPCORD4",277,0)
 .S NODE=$G(^ORD(101.41,IEN,0)) I $P(NODE,U,4)'="Q" Q
"RTN","HMPCORD4",278,0)
 .S NAME=$S($P(NODE,U,2)'="":$P(NODE,U,2),1:$P(NODE,U))
"RTN","HMPCORD4",279,0)
 .S RESULT("name")=NAME
"RTN","HMPCORD4",280,0)
 .S RESULT("uid")=$$SETUID^HMPUTILS("qo","",IEN),RESULT("internal")=IEN
"RTN","HMPCORD4",281,0)
 .S HMPCNT=HMPCNT+1 D ADD^HMPEF("RESULT")
"RTN","HMPCORD4",282,0)
 I IEN'>0 S HMPFINI=1
"RTN","HMPCORD4",283,0)
 Q
"RTN","HMPCORD4",284,0)
 ;
"RTN","HMPCORD4",285,0)
VALIDOI(OITYPE,IEN) ;
"RTN","HMPCORD4",286,0)
 N TEMP,TYPE
"RTN","HMPCORD4",287,0)
 I $G(^ORD(101.43,IEN,0))'=""
"RTN","HMPCORD4",288,0)
 S TEMP=$P(^ORD(101.43,IEN,0),U,2)
"RTN","HMPCORD4",289,0)
 S TYPE=$P(TEMP,";",2)
"RTN","HMPCORD4",290,0)
 S TYPE=$E(TYPE,3,$L(TYPE))
"RTN","HMPCORD4",291,0)
 I OITYPE="" Q TYPE
"RTN","HMPCORD4",292,0)
 I TYPE["PS" Q TYPE
"RTN","HMPCORD4",293,0)
 I OITYPE[TYPE Q TYPE
"RTN","HMPCORD4",294,0)
 Q ""
"RTN","HMPCORD4",295,0)
 ;
"RTN","HMPCORD5")
0^12^B89350961
"RTN","HMPCORD5",1,0)
HMPCORD5 ;SLC/AGP,ASMR/EJK,RRB - Retrieved Orderable Items;Nov 04, 2015 12:13:23
"RTN","HMPCORD5",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPCORD5",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPCORD5",4,0)
 ;
"RTN","HMPCORD5",5,0)
 ; DE2497/RRB - Removed unused variable, HMP777
"RTN","HMPCORD5",6,0)
 Q
"RTN","HMPCORD5",7,0)
 ;
"RTN","HMPCORD5",8,0)
IMMTYPE ;
"RTN","HMPCORD5",9,0)
 N ORWLST,ORDT,HMPIMM
"RTN","HMPCORD5",10,0)
 S (ORWLST,ORDT)=""
"RTN","HMPCORD5",11,0)
 S (HMPCNT,HMPLAST,HMPI)=0
"RTN","HMPCORD5",12,0)
 N IMM
"RTN","HMPCORD5",13,0)
 ;D IMMTYPE^ORWPCE2(.ORWLST,ORDT)   ;use existing broker call ORWPCE GET IMMUNIZATION TYPE
"RTN","HMPCORD5",14,0)
 N IEN,CNT,BINDEX S (IEN,CNT)=0
"RTN","HMPCORD5",15,0)
 S:'$G(ORDT) ORDT=DT
"RTN","HMPCORD5",16,0)
 ; ^AUTTIMM - IMMUNIZATION file #9999999.14, ***DBIA2454 subscription needed***
"RTN","HMPCORD5",17,0)
 F  S IEN=$O(^AUTTIMM(IEN)) Q:IEN=""!(IEN'?1N.N)  D
"RTN","HMPCORD5",18,0)
 . I $D(^AUTTIMM(IEN,0))#2,+$P(^(0),"^",7)=0 S CNT=CNT+1,ORWLST(CNT)=IEN_"^"_$G(^(0))
"RTN","HMPCORD5",19,0)
 . Q
"RTN","HMPCORD5",20,0)
 S IMM="",HMPIMM=""
"RTN","HMPCORD5",21,0)
 F  S IMM=$O(ORWLST(IMM)) Q:IMM=""  D
"RTN","HMPCORD5",22,0)
 . S HMPIMM("localId")=$P(ORWLST(IMM),"^",1)  ;get the ien for each item found
"RTN","HMPCORD5",23,0)
 . S HMPIMM("name")=$P(ORWLST(IMM),"^",2) ;get the name for each item found
"RTN","HMPCORD5",24,0)
 . S HMPIMM("mnemonic")=$P(ORWLST(IMM),"^",3)  ;get the mnemonic for each entry
"RTN","HMPCORD5",25,0)
 . S HMPIMM("uid")=$$SETUID^HMPUTILS("immunization",,HMPIMM("localId"))  ;set the uid string
"RTN","HMPCORD5",26,0)
 . S HMPCNT=HMPCNT+1
"RTN","HMPCORD5",27,0)
 . D ADD^HMPEF("HMPIMM") S HMPLAST=HMPCNT  ;add it to the JSON results array
"RTN","HMPCORD5",28,0)
 . Q
"RTN","HMPCORD5",29,0)
 S HMPFINI=1
"RTN","HMPCORD5",30,0)
 Q
"RTN","HMPCORD5",31,0)
 ;
"RTN","HMPCORD5",32,0)
SIGNS ;
"RTN","HMPCORD5",33,0)
 N IEN,NAME,HMPSS
"RTN","HMPCORD5",34,0)
 S IEN=0,HMPCNT=0,HMPI=0
"RTN","HMPCORD5",35,0)
 F  S IEN=$O(^GMRD(120.83,IEN)) Q:IEN=""!(IEN'?1N.N)  D
"RTN","HMPCORD5",36,0)
 . S NAME=$P($G(^GMRD(120.83,IEN,0)),"^",1)
"RTN","HMPCORD5",37,0)
 . Q:NAME']""
"RTN","HMPCORD5",38,0)
 . S HMPSS("localId")=IEN
"RTN","HMPCORD5",39,0)
 . S HMPSS("name")=NAME
"RTN","HMPCORD5",40,0)
 . S HMPSS("uid")=$$SETUID^HMPUTILS("sign-symptom",,HMPSS("localId"))
"RTN","HMPCORD5",41,0)
 . S HMPCNT=HMPCNT+1
"RTN","HMPCORD5",42,0)
 . D ADD^HMPEF("HMPSS") S HMPLAST=HMPCNT
"RTN","HMPCORD5",43,0)
 . Q
"RTN","HMPCORD5",44,0)
 S HMPFINI=1
"RTN","HMPCORD5",45,0)
 Q
"RTN","HMPCORD5",46,0)
 ;
"RTN","HMPCORD5",47,0)
ALLTYPE ; deprecated
"RTN","HMPCORD5",48,0)
 ;N ORX,ROOT,XP,CNT,ORFILE,ORSRC,ORIEN,ORREAX,ALLCNT,ALLLAST,ALLITEM
"RTN","HMPCORD5",49,0)
 ;S ORIEN=0,CNT=0,ORSRC=0,ORFILE="",ALLCNT=0,ALLLAST=0
"RTN","HMPCORD5",50,0)
 ;S X=""
"RTN","HMPCORD5",51,0)
 ;F ROOT="^GMRD(120.82)","^PSNDF(50.6)","^PSNDF(50.67)","^PSDRUG(""B"")","^PS(50.416)","^PS(50.605)" D
"RTN","HMPCORD5",52,0)
 ;F ROOT="^GMRD(120.82,""B"")","^GMRD(120.82,""D"")","^PSDRUG(""C"")","^PS(50.416,""P"")","^PS(50.605,""C"")",$$B^PSNAPIS,$$T^PSNAPIS,"^PSDRUG(""B"")" D
"RTN","HMPCORD5",53,0)
 ;F ROOT="^GMRD(120.82,""B"")","^PSDRUG(""C"")","^PS(50.416,""P"")","^PS(50.605,""C"")",$$B^PSNAPIS,$$T^PSNAPIS,"^PSDRUG(""B"")" D
"RTN","HMPCORD5",54,0)
 ;. S ORSRC=$G(ORSRC)+1,ORFILE=$P(ROOT,",",1)_")",ORSRC(ORSRC)=$P($T(FILENAME+ORSRC),";;",2)
"RTN","HMPCORD5",55,0)
 ;. I (ORSRC'=2),(ORSRC'=6) S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=ORSRC_U_ORSRC(ORSRC)_U_U_U_"TOP"_U_"+"
"RTN","HMPCORD5",56,0)
 ;. I ORSRC=1!(ORSRC=2) D
"RTN","HMPCORD5",57,0)
 ;.. F  S X=$O(@ROOT@(X)) Q:X=""  D
"RTN","HMPCORD5",58,0)
 ;... I ORSRC=1,X="OTHER ALLERGY/ADVERSE REACTION" Q  ;don't send this entry
"RTN","HMPCORD5",59,0)
 ;... S ORIEN=$O(@ROOT@(X,0))
"RTN","HMPCORD5",60,0)
 ;... I $L($T(SCREEN^XTID)) I $$SCREEN^XTID(120.82,.01,ORIEN_",") Q  ;233 Is term active?
"RTN","HMPCORD5",61,0)
 ;... I ORSRC=2 S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=ORIEN_U_$P($G(^GMRD(120.82,+ORIEN,0)),U,1)_" <"_X_">"_ROOT
"RTN","HMPCORD5",62,0)
 ;... I ORSRC'=2  S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=ORIEN_U_X_ROOT
"RTN","HMPCORD5",63,0)
 ;... S Y(ORIEN_";"_ROOT)=Y(ORIEN_";"_ROOT)_U_$P($G(^GMRD(120.82,+ORIEN,0)),U,2)_U_$S(ORSRC=2:1,1:ORSRC)
"RTN","HMPCORD5",64,0)
 ;.. S XP=X F  S XP=$O(@ROOT@(XP)) Q:XP=""  Q:$E(XP,1,$L(X))'=X  D
"RTN","HMPCORD5",65,0)
 ;... I ORSRC=1,XP="OTHER ALLERGY/ADVERSE REACTION" Q  ;don't send this entry
"RTN","HMPCORD5",66,0)
 ;... S ORIEN=$O(@ROOT@(XP,0))
"RTN","HMPCORD5",67,0)
 ;... I $L($T(SCREEN^XTID)) I $$SCREEN^XTID(120.82,.01,ORIEN_",") Q  ;233 Is term active?
"RTN","HMPCORD5",68,0)
 ;... I ORSRC=2 S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=ORIEN_U_$P($G(^GMRD(120.82,+ORIEN,0)),U,1)_" <"_XP_">"_ROOT ; partial matches
"RTN","HMPCORD5",69,0)
 ;... I ORSRC'=2  S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=ORIEN_U_XP_ROOT
"RTN","HMPCORD5",70,0)
 ;... S:'$D(Y(ORIEN_";"_ROOT)) Y(ORIEN_";"_ROOT)=Y(ORIEN_";"_ROOT)_U_$P($G(^GMRD(120.82,+ORIEN,0)),U,2)_U_$S(ORSRC=2:1,1:ORSRC)
"RTN","HMPCORD5",71,0)
 ;.. I (ORSRC>2),(ORSRC'=4),(ORSRC'=5),(ORSRC'=6) D
"RTN","HMPCORD5",72,0)
 ;.. N CODE,LIST,VAL,NAME
"RTN","HMPCORD5",73,0)
 ;.. S CODE=$S(ORSRC=3:"S VAL=$$TGTOG2^PSNAPIS(X,.LIST)",ORSRC=4:"D TRDNAME(X,.LIST)",ORSRC=7:"D INGSRCH(X,.LIST)",ORSRC=8:"D CLASRCH(X,.LIST)",1:"") Q:'$L(CODE)
"RTN","HMPCORD5",74,0)
 ;.. X CODE I $D(LIST) S ORIEN=0 F  S ORIEN=$O(LIST(ORIEN)) Q:'ORIEN  D
"RTN","HMPCORD5",75,0)
 ;... S NAME=$P(LIST(ORIEN),U,2)
"RTN","HMPCORD5",76,0)
 ;... Q:$E($P(LIST(ORIEN),U,2),1,$L(X))'=X
"RTN","HMPCORD5",77,0)
 ;... I $L($T(SCREEN^XTID)) I $$SCREEN^XTID($S(ORSRC=3:50.6,(ORSRC=4):50.6,ORSRC=7:50.416,ORSRC=8:50.605,1:0),.01,ORIEN_",") Q
"RTN","HMPCORD5",78,0)
 ;... S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=ORIEN_U_NAME_ROOT_U_"D"_U_ORSRC
"RTN","HMPCORD5",79,0)
 ;.. I ORSRC=4 D
"RTN","HMPCORD5",80,0)
 ;.. N CODE,LIST,VAL,NAME
"RTN","HMPCORD5",81,0)
 ;.. S CODE="D TRDNAME(X,.LIST)"
"RTN","HMPCORD5",82,0)
 ;.. X CODE I $D(LIST) S ORIEN=0 F  S ORIEN=$O(LIST(ORIEN)) Q:'ORIEN  D
"RTN","HMPCORD5",83,0)
 ;... S NAME=$P(LIST(ORIEN),U,2)
"RTN","HMPCORD5",84,0)
 ;... Q:$E($P(LIST(ORIEN),U,2),1,$L(X))'=X
"RTN","HMPCORD5",85,0)
 ;... I $L($T(SCREEN^XTID)) I $$SCREEN^XTID(50.6,.01,+LIST(ORIEN)_",") Q
"RTN","HMPCORD5",86,0)
 ;... S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=+LIST(ORIEN)_U_NAME_ROOT_U_"D"_U_ORSRC
"RTN","HMPCORD5",87,0)
 ;S CNT=""
"RTN","HMPCORD5",88,0)
 ;F  S CNT=$O(Y(CNT)) Q:CNT=""  D
"RTN","HMPCORD5",89,0)
 ;. K ALLERGY
"RTN","HMPCORD5",90,0)
 ;. S ALLITEM=$G(Y(CNT))
"RTN","HMPCORD5",91,0)
 ;. I Y(CNT)["^TOP^+" Q
"RTN","HMPCORD5",92,0)
 ;. I Y(CNT)'["^TOP^+" D
"RTN","HMPCORD5",93,0)
 ;.. S ALLERGY("localId")=$P(ALLITEM,"^",1)
"RTN","HMPCORD5",94,0)
 ;.. S ALLERGY("name")=$P(ALLITEM,"^",2)
"RTN","HMPCORD5",95,0)
 ;.. S ALLERGY("root")=$P(ALLITEM,"^",3)
"RTN","HMPCORD5",96,0)
 ;.. S ALLERGY("uid")=$$SETUID^HMPUTILS("allergy-list",,ALLERGY("localId")_";"_$TR(ALLERGY("root"),"""",""))  ;set the uid string
"RTN","HMPCORD5",97,0)
 ;.. S HMPCNT=$G(HMPCNT)+1 D ADD^HMPEF("ALLERGY") S HMPLAST=HMPCNT
"RTN","HMPCORD5",98,0)
 ;.. Q
"RTN","HMPCORD5",99,0)
 ;. Q
"RTN","HMPCORD5",100,0)
 ;S HMPFINI=1
"RTN","HMPCORD5",101,0)
 ;K X,Y
"RTN","HMPCORD5",102,0)
 Q
"RTN","HMPCORD5",103,0)
 ;
"RTN","HMPCORD5",104,0)
VTYPE ; ;VITALS TYPE
"RTN","HMPCORD5",105,0)
 N IEN
"RTN","HMPCORD5",106,0)
 S (HMPCNT,HMPI,HMPLAST,IEN)=0
"RTN","HMPCORD5",107,0)
 F  S IEN=$O(^GMRD(120.51,IEN)) Q:IEN=""!(IEN'?1N.N)  D
"RTN","HMPCORD5",108,0)
 . S VTYPE("localId")=IEN
"RTN","HMPCORD5",109,0)
 . S VTYPE("name")=$P(^GMRD(120.51,IEN,0),"^",1)
"RTN","HMPCORD5",110,0)
 . S VTYPE("abbreviation")=$P(^GMRD(120.51,IEN,0),"^",2)
"RTN","HMPCORD5",111,0)
 . S VTYPE("rate")=$P(^GMRD(120.51,IEN,0),"^",4)
"RTN","HMPCORD5",112,0)
 . I VTYPE("rate")]"" S VTYPE("rate")=$S(VTYPE("rate")=1:"YES",1:"NO")
"RTN","HMPCORD5",113,0)
 . S VTYPE("pce")=$P(^GMRD(120.51,IEN,0),"^",7)
"RTN","HMPCORD5",114,0)
 . S VTYPE("vuid")="urn:va:vuid:"_$P($G(^GMRD(120.51,IEN,"VUID")),"^",1)
"RTN","HMPCORD5",115,0)
 . S VTYPE("masterVuid")=$P($G(^GMRD(120.51,IEN,"VUID")),"^",2)
"RTN","HMPCORD5",116,0)
 . I VTYPE("masterVuid")]"" S VTYPE("masterVuid")=$S(VTYPE("masterVuid")=1:"YES",1:"NO")
"RTN","HMPCORD5",117,0)
 . S VTYPE("effective")=$P($G(^GMRD(120.51,IEN,"TERMSTATUS",1,0)),"^",1)
"RTN","HMPCORD5",118,0)
 . I VTYPE("effective")]"" S VTYPE("effective")=$$JSONDT^HMPUTILS(VTYPE("effective"))
"RTN","HMPCORD5",119,0)
 . S VTYPE("status")=$P($G(^GMRD(120.51,IEN,"TERMSTATUS",1,0)),"^",2)
"RTN","HMPCORD5",120,0)
 . I VTYPE("status")]"" S VTYPE("status")=$S(VTYPE("status")=1:"ACTIVE",1:"INACTIVE")
"RTN","HMPCORD5",121,0)
 . S VTYPE("uid")=$$SETUID^HMPUTILS("vital-type",,VTYPE("localId"))
"RTN","HMPCORD5",122,0)
 . S HMPCNT=HMPCNT+1 D ADD^HMPEF("VTYPE") S HMPLAST=HMPCNT
"RTN","HMPCORD5",123,0)
 S HMPFINI=1
"RTN","HMPCORD5",124,0)
 K VTYPE
"RTN","HMPCORD5",125,0)
 Q
"RTN","HMPCORD5",126,0)
 ;
"RTN","HMPCORD5",127,0)
VQUAL ; VITALS QUALIFIER
"RTN","HMPCORD5",128,0)
 N IEN,I
"RTN","HMPCORD5",129,0)
 S (HMPCNT,HMPI,HMPLAST,IEN)=0
"RTN","HMPCORD5",130,0)
 F  S IEN=$O(^GMRD(120.52,IEN)) Q:IEN=""!(IEN'?1N.N)  D
"RTN","HMPCORD5",131,0)
 . S VQUAL("localId")=IEN
"RTN","HMPCORD5",132,0)
 . S VQUAL("synonym")=$P(^GMRD(120.52,IEN,0),"^",2)
"RTN","HMPCORD5",133,0)
 . S I=0
"RTN","HMPCORD5",134,0)
 . K VQUAL("vtype") ;ejk - stop bleed over from previous extracts. 
"RTN","HMPCORD5",135,0)
 . F  S I=$O(^GMRD(120.52,IEN,1,I)) Q:I=""!(I'?1N.N)  D
"RTN","HMPCORD5",136,0)
 .. S VQUAL("vtype",I,"vitalType")=$P($G(^GMRD(120.52,IEN,1,I,0)),"^",1)
"RTN","HMPCORD5",137,0)
 .. S VQUAL("vtype",I,"category")=$P($G(^GMRD(120.52,IEN,1,I,0)),"^",2)
"RTN","HMPCORD5",138,0)
 .. ;ejk DE294 - vital type and vital category need to be presented as urn entries and not the name
"RTN","HMPCORD5",139,0)
 .. ;I VQUAL("vtype",I,"vitalType")]"" S VQUAL("vtype",I,"vitalType")=$P($G(^GMRD(120.51,I,0)),"^",1)
"RTN","HMPCORD5",140,0)
 .. ;I VQUAL("vtype",I,"category")]"" S VQUAL("vtype",I,"category")=$P($G(^GMRD(120.53,I,0)),"^",1)
"RTN","HMPCORD5",141,0)
 .. I VQUAL("vtype",I,"vitalType")]"" S VQUAL("vtype",I,"vitalType")=$$SETUID^HMPUTILS("vital-type",,VQUAL("vtype",I,"vitalType"))
"RTN","HMPCORD5",142,0)
 .. I VQUAL("vtype",I,"category")]"" S VQUAL("vtype",I,"category")=$$SETUID^HMPUTILS("vital-category",,VQUAL("vtype",I,"category"))
"RTN","HMPCORD5",143,0)
 .. Q
"RTN","HMPCORD5",144,0)
 . S VQUAL("vuid")="urn:va:vuid:"_$P($G(^GMRD(120.52,IEN,"VUID")),"^",1)
"RTN","HMPCORD5",145,0)
 . S VQUAL("masterVuid")=$P($G(^GMRD(120.52,IEN,"VUID")),"^",2)
"RTN","HMPCORD5",146,0)
 . I VQUAL("masterVuid")]"" S VQUAL("masterVuid")=$S(VQUAL("masterVuid")=1:"YES",1:"NO")
"RTN","HMPCORD5",147,0)
 . S VQUAL("effectiveDate")=$P($G(^GMRD(120.52,IEN,"TERMSTATUS",1,0)),"^",1)
"RTN","HMPCORD5",148,0)
 . I VQUAL("effectiveDate")]"" S VQUAL("effectiveDate")=$$JSONDT^HMPUTILS(VQUAL("effectiveDate"))
"RTN","HMPCORD5",149,0)
 . S VQUAL("status")=$P($G(^GMRD(120.52,IEN,"TERMSTATUS",1,0)),"^",2)
"RTN","HMPCORD5",150,0)
 . I VQUAL("status")]"" S VQUAL("status")=$S(VQUAL("status")=1:"ACTIVE",1:"INACTIVE")
"RTN","HMPCORD5",151,0)
 . S VQUAL("uid")=$$SETUID^HMPUTILS("vital-qualifier",,VQUAL("localId"))
"RTN","HMPCORD5",152,0)
 . S VQUAL("qualifier")=$$SETUID^HMPUTILS("vital-qualifier",,VQUAL("localId"))
"RTN","HMPCORD5",153,0)
 . ;ejk DE295 do not include qualifier if it is the same value as the uid
"RTN","HMPCORD5",154,0)
 . I VQUAL("uid")=VQUAL("qualifier") K VQUAL("qualifier")
"RTN","HMPCORD5",155,0)
 . S HMPCNT=HMPCNT+1 D ADD^HMPEF("VQUAL") S HMPLAST=HMPCNT
"RTN","HMPCORD5",156,0)
 S HMPFINI=1
"RTN","HMPCORD5",157,0)
 K VQUAL
"RTN","HMPCORD5",158,0)
 Q
"RTN","HMPCORD5",159,0)
 ;
"RTN","HMPCORD5",160,0)
VCAT ;VITALS CATAGORY
"RTN","HMPCORD5",161,0)
 N IEN,I
"RTN","HMPCORD5",162,0)
 S (HMPCNT,HMPI,HMPLAST,IEN)=0
"RTN","HMPCORD5",163,0)
 F  S IEN=$O(^GMRD(120.53,IEN)) Q:IEN=""!(IEN'?1N.N)  D
"RTN","HMPCORD5",164,0)
 . S VCAT("localId")=IEN
"RTN","HMPCORD5",165,0)
 . I $P($G(^GMRD(120.53,IEN,0)),"^",1)]"" S VCAT("category")=$P(^GMRD(120.53,IEN,0),"^",1)
"RTN","HMPCORD5",166,0)
 . I $P($G(^GMRD(120.53,IEN,0)),"^",2)]"" S VCAT("synonym")=$P(^GMRD(120.53,IEN,0),"^",2)
"RTN","HMPCORD5",167,0)
 . I $G(VCAT("synonym"))="" K VCAT("synonym")
"RTN","HMPCORD5",168,0)
 . S I=0
"RTN","HMPCORD5",169,0)
 . ;EJK - kill off vtype array to stop inheriting values from previous extracts
"RTN","HMPCORD5",170,0)
 . K VCAT("vtype")
"RTN","HMPCORD5",171,0)
 . F  S I=$O(^GMRD(120.53,IEN,1,I)) Q:I=""!(I'?1N.N)  D
"RTN","HMPCORD5",172,0)
 .. ;ejk DE298 do not send null values. 
"RTN","HMPCORD5",173,0)
 .. I $P($G(^GMRD(120.53,IEN,1,I,0)),"^",1)]"" S VCAT("vtype",I,"vitalType")=$P($G(^GMRD(120.53,IEN,1,I,0)),"^",1)
"RTN","HMPCORD5",174,0)
 .. I VCAT("vtype",I,"vitalType")]"" S VCAT("vtype",I,"vitalType")=$$SETUID^HMPUTILS("vital-type",,VCAT("vtype",I,"vitalType"))
"RTN","HMPCORD5",175,0)
 .. I $P($G(^GMRD(120.53,IEN,1,I,0)),"^",3)]"" S VCAT("vtype",I,"maxEntries")=$P($G(^GMRD(120.53,IEN,1,I,0)),"^",3)
"RTN","HMPCORD5",176,0)
 .. I $P($G(^GMRD(120.53,IEN,1,I,0)),"^",5)]"" S VCAT("vtype",I,"printOrder")=$P($G(^GMRD(120.53,IEN,1,I,0)),"^",5)
"RTN","HMPCORD5",177,0)
 .. I $P($G(^GMRD(120.53,IEN,1,I,0)),"^",6)]"" S VCAT("vtype",I,"editOrder")=$P($G(^GMRD(120.53,IEN,1,I,0)),"^",6)
"RTN","HMPCORD5",178,0)
 .. I $P($G(^GMRD(120.53,IEN,1,I,0)),"^",7)]"" S VCAT("vtype",I,"defaultQualifier")=$P($G(^GMRD(120.53,IEN,1,I,0)),"^",7),VCAT("vtype",I,"defaultQualifier")=$$SETUID^HMPUTILS("vital-qualifier",,VCAT("vtype",I,"defaultQualifier"))
"RTN","HMPCORD5",179,0)
 .. Q
"RTN","HMPCORD5",180,0)
 . S VCAT("vuid")="urn:va:vuid:"_$P($G(^GMRD(120.53,IEN,"VUID")),"^",1)
"RTN","HMPCORD5",181,0)
 . S VCAT("masterVuid")=$P($G(^GMRD(120.53,IEN,"VUID")),"^",2)
"RTN","HMPCORD5",182,0)
 . I VCAT("masterVuid")]"" S VCAT("masterVuid")=$S(VCAT("masterVuid")=1:"YES",1:"NO")
"RTN","HMPCORD5",183,0)
 . S VCAT("effectiveDate")=$P($G(^GMRD(120.53,IEN,"TERMSTATUS",1,0)),"^",1)
"RTN","HMPCORD5",184,0)
 . I VCAT("effectiveDate")]"" S VCAT("effectiveDate")=$$JSONDT^HMPUTILS(VCAT("effectiveDate"))
"RTN","HMPCORD5",185,0)
 . S VCAT("status")=$P($G(^GMRD(120.53,IEN,"TERMSTATUS",1,0)),"^",2)
"RTN","HMPCORD5",186,0)
 . I VCAT("status")]"" S VCAT("status")=$S(VCAT("status")=1:"ACTIVE",1:"INACTIVE")
"RTN","HMPCORD5",187,0)
 . S VCAT("uid")=$$SETUID^HMPUTILS("vital-category",,VCAT("localId"))
"RTN","HMPCORD5",188,0)
 . S HMPCNT=HMPCNT+1 D ADD^HMPEF("VCAT") S HMPLAST=HMPCNT
"RTN","HMPCORD5",189,0)
 . Q
"RTN","HMPCORD5",190,0)
 S HMPFINI=1
"RTN","HMPCORD5",191,0)
 K VCAT
"RTN","HMPCORD5",192,0)
 Q
"RTN","HMPCORD5",193,0)
 ;
"RTN","HMPCORD5",194,0)
INGSRCH(NAME,LIST) ;
"RTN","HMPCORD5",195,0)
 K ^TMP($J,"ORWDAL32")
"RTN","HMPCORD5",196,0)
 D NAME^PSN50P41(NAME,"ORWDAL32")
"RTN","HMPCORD5",197,0)
 I $D(^TMP($J,"ORWDAL32","P")) D
"RTN","HMPCORD5",198,0)
 . N I S I="" F  S I=$O(^TMP($J,"ORWDAL32","P",I)) Q:I=""  D
"RTN","HMPCORD5",199,0)
 .. N J S J=0 F  S J=$O(^TMP($J,"ORWDAL32","P",I,J)) Q:'J  S LIST(J)=J_U_I
"RTN","HMPCORD5",200,0)
 K ^TMP($J,"ORWDAL32")
"RTN","HMPCORD5",201,0)
 Q
"RTN","HMPCORD5",202,0)
CLASRCH(NAME,LIST) ;
"RTN","HMPCORD5",203,0)
 K ^TMP($J,"ORWDAL32")
"RTN","HMPCORD5",204,0)
 D C^PSN50P65(,NAME,"ORWDAL32")
"RTN","HMPCORD5",205,0)
 I $D(^TMP($J,"ORWDAL32","C")) D
"RTN","HMPCORD5",206,0)
 . N I S I="" F  S I=$O(^TMP($J,"ORWDAL32","C",I)) Q:I=""  D
"RTN","HMPCORD5",207,0)
 .. N J S J=0 F  S J=$O(^TMP($J,"ORWDAL32","C",I,J)) Q:'J  S LIST(J)=J_U_$G(^TMP($J,"ORWDAL32",J,1))
"RTN","HMPCORD5",208,0)
 K ^TMP($J,"ORWDAL32")
"RTN","HMPCORD5",209,0)
 Q
"RTN","HMPCORD5",210,0)
TRDNAME(NAME,LIST) ;
"RTN","HMPCORD5",211,0)
 K ^TMP($J,"ORWDAL32")
"RTN","HMPCORD5",212,0)
 D ALL^PSN5067(,NAME,,"ORWDAL32")
"RTN","HMPCORD5",213,0)
 I $D(^TMP($J,"ORWDAL32","B")) D
"RTN","HMPCORD5",214,0)
 . N I S I="" F  S I=$O(^TMP($J,"ORWDAL32","B",I)) Q:I=""  D
"RTN","HMPCORD5",215,0)
 .. N J,K S J=$O(^TMP($J,"ORWDAL32","B",I,0)) Q:'J  S K=$$TGTOG^PSNAPIS(I),LIST(J)=K_U_$G(^TMP($J,"ORWDAL32",J,4))
"RTN","HMPCORD5",216,0)
 K ^TMP($J,"ORWDAL32")
"RTN","HMPCORD5",217,0)
 Q
"RTN","HMPCORD5",218,0)
FILENAME ; Display text of filenames for search treeview
"RTN","HMPCORD5",219,0)
 ;;VA Allergies File
"RTN","HMPCORD5",220,0)
 ;;VA Allergies File (Synonyms)  SPACER ONLY - NOT DISPLAYED
"RTN","HMPCORD5",221,0)
 ;;National Drug File - Generic Drug Name
"RTN","HMPCORD5",222,0)
 ;;National Drug file - Trade Name
"RTN","HMPCORD5",223,0)
 ;;Local Drug File
"RTN","HMPCORD5",224,0)
 ;;Local Drug File (Synonyms)  SPACER ONLY - NOT DISPLAYED
"RTN","HMPCORD5",225,0)
 ;;Drug Ingredients File
"RTN","HMPCORD5",226,0)
 ;;VA Drug Class File
"RTN","HMPCORD5",227,0)
 ;;
"RTN","HMPCPAT")
1^155
"RTN","HMPCPAT1")
1^156
"RTN","HMPCPRS")
0^15^B5087431
"RTN","HMPCPRS",1,0)
HMPCPRS ;SLC/AGP,ASMR/RRB - CPRS RPC for;9/21/12 5:57pm
"RTN","HMPCPRS",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPCPRS",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPCPRS",4,0)
 ;
"RTN","HMPCPRS",5,0)
 Q
"RTN","HMPCPRS",6,0)
 ;
"RTN","HMPCPRS",7,0)
RPC(HMPOUT,PARAMS) ; Process request via RPC instead of CSP
"RTN","HMPCPRS",8,0)
 N X,REQ,HMPCNT,HMPSITE,HMPUSER,HMPDBUG,HMPSTA
"RTN","HMPCPRS",9,0)
 S HMPCNT=0
"RTN","HMPCPRS",10,0)
 S HMPUSER=DUZ,HMPSITE=DUZ(2),HMPSTA=$$STA^XUAF4(DUZ(2))
"RTN","HMPCPRS",11,0)
 S X="" F  S X=$O(PARAMS(X)) Q:X=""  S REQ(X,1)=PARAMS(X)
"RTN","HMPCPRS",12,0)
 ;
"RTN","HMPCPRS",13,0)
COMMON ; Come here for both CSP and RPC Mode
"RTN","HMPCPRS",14,0)
 ;
"RTN","HMPCPRS",15,0)
 N CMD
"RTN","HMPCPRS",16,0)
 S CMD=$G(REQ("command",1))
"RTN","HMPCPRS",17,0)
 ;
"RTN","HMPCPRS",18,0)
 ; returns an order structure for change orders
"RTN","HMPCPRS",19,0)
 ; or places an order if auto-accept QO
"RTN","HMPCPRS",20,0)
 I CMD="alerts" D  G OUT
"RTN","HMPCPRS",21,0)
 . D ALERTS(.HMPOUT)
"RTN","HMPCPRS",22,0)
 ;
"RTN","HMPCPRS",23,0)
 I CMD="reminders" D  G OUT
"RTN","HMPCPRS",24,0)
 .D EVALLIST^HMPPXRM(.HMPOUT,$$VAL("patientId"),$$VAL("userId"),$$VAL("location"))
"RTN","HMPCPRS",25,0)
 ;
"RTN","HMPCPRS",26,0)
OUT ;
"RTN","HMPCPRS",27,0)
END ;
"RTN","HMPCPRS",28,0)
 ;
"RTN","HMPCPRS",29,0)
BLDINFO(INFO) ;
"RTN","HMPCPRS",30,0)
 N X
"RTN","HMPCPRS",31,0)
 S X="" F  S X=$O(REQ(X)) Q:X=""  D
"RTN","HMPCPRS",32,0)
 .S INFO(X)=REQ(X,1)
"RTN","HMPCPRS",33,0)
 Q
"RTN","HMPCPRS",34,0)
 ;
"RTN","HMPCPRS",35,0)
VAL(X) ; return value from request
"RTN","HMPCPRS",36,0)
 Q $G(REQ(X,1))
"RTN","HMPCPRS",37,0)
 ;
"RTN","HMPCPRS",38,0)
ALERTS(HMPOUT) ;
"RTN","HMPCPRS",39,0)
 N ALERT,CNT,ERROR,NODE,NUM,RESULT,HMPORY
"RTN","HMPCPRS",40,0)
 K ^TMP("HMPALERTS",$J),^TMP("HMPOUT",$J)
"RTN","HMPCPRS",41,0)
 ;S HMPOUT=$NA(^TMP("HMPOUT",$J))
"RTN","HMPCPRS",42,0)
 D FASTUSER^ORWORB(.HMPORY)
"RTN","HMPCPRS",43,0)
 ;ZW HMPORY
"RTN","HMPCPRS",44,0)
 S CNT=0,NUM=1 F  S CNT=$O(@HMPORY@(CNT)) Q:CNT'>0  D
"RTN","HMPCPRS",45,0)
 .S NODE=$G(@HMPORY@(CNT))
"RTN","HMPCPRS",46,0)
 .K ALERT
"RTN","HMPCPRS",47,0)
 .I $P(NODE,U)="I" S ALERT("infoOnly")="I"
"RTN","HMPCPRS",48,0)
 .S ALERT("patient")=$P(NODE,U,2),ALERT("urgency")=$P(NODE,U,4),ALERT("dateTime")=$P(NODE,U,5)
"RTN","HMPCPRS",49,0)
 .I $P(NODE,U,3)'="" S ALERT("location")=$P(NODE,U,3)
"RTN","HMPCPRS",50,0)
 .S ALERT("message")=$P(NODE,U,6)
"RTN","HMPCPRS",51,0)
 .I $P(NODE,U,8)'="" S ALERT("action")=$P(NODE,U,8)
"RTN","HMPCPRS",52,0)
 .S ALERT("mustBeProcess")=$S($P(NODE,U,9)="yes":"false",1:"true")
"RTN","HMPCPRS",53,0)
 .I $P(NODE,U,10)'="" S ALERT("forwardBy")="true"
"RTN","HMPCPRS",54,0)
 .M ^TMP("HMPALERTS",$J,"data","alerts",NUM,"alert")=ALERT S NUM=NUM+1
"RTN","HMPCPRS",55,0)
 D ENCODE^HMPJSON($NA(^TMP("HMPALERTS",$J)),"HMPOUT","ERROR")
"RTN","HMPCPRS",56,0)
 Q
"RTN","HMPCPRS",57,0)
 ;
"RTN","HMPCRPC")
0^16^B13274810
"RTN","HMPCRPC",1,0)
HMPCRPC ;SLC/AGP,ASMR/RRB - Generic RPC controller for HMP;11/7/12 5:42pm
"RTN","HMPCRPC",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPCRPC",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPCRPC",4,0)
 ;
"RTN","HMPCRPC",5,0)
 Q
"RTN","HMPCRPC",6,0)
 ;
"RTN","HMPCRPC",7,0)
CHAINRPC(HMPRES,PARAMS) ; Chain multiple rpcs into one call
"RTN","HMPCRPC",8,0)
 N CITER,RSP,PID
"RTN","HMPCRPC",9,0)
 S CITER="" F  S CITER=$O(PARAMS("commandList",CITER)) Q:CITER=""  D
"RTN","HMPCRPC",10,0)
 . N SUBCMD,SUBRSP,X
"RTN","HMPCRPC",11,0)
 . S X=""
"RTN","HMPCRPC",12,0)
 . F  S X=$O(PARAMS("commandList",CITER,X)) Q:X=""  M SUBCMD(X)=PARAMS("commandList",CITER,X)
"RTN","HMPCRPC",13,0)
 . D CHAINCMD(.SUBCMD,.SUBRSP)
"RTN","HMPCRPC",14,0)
 . I $D(SUBRSP) D DECODE^HMPJSON("SUBRSP","RSP(SUBCMD(""command""))","^JMCERR") I 1
"RTN","HMPCRPC",15,0)
 . I '$TEST S RSP(SUBCMD("command"))=""
"RTN","HMPCRPC",16,0)
 D ENCODE^HMPJSON("RSP","HMPRES","^JMCERR")
"RTN","HMPCRPC",17,0)
 Q
"RTN","HMPCRPC",18,0)
RPC(HMPRES,PARAMS) ; Process request via RPC instead of CSP
"RTN","HMPCRPC",19,0)
 N X,REQ,HMPVAL,HMPCNT,HMPSITE,HMPUSER,HMPDBUG,HMPSTA
"RTN","HMPCRPC",20,0)
 ;S HMPXML=$NA(^TMP($J,"HMP RESULTS")) K @HMPXML
"RTN","HMPCRPC",21,0)
 S HMPCNT=0
"RTN","HMPCRPC",22,0)
 ;S HMPUSER=DUZ,HMPSITE=DUZ(2),HMPSTA=$$STA^XUAF4(DUZ(2))
"RTN","HMPCRPC",23,0)
 S X="" F  S X=$O(PARAMS(X)) Q:X=""  I X'="value" S REQ(X,1)=PARAMS(X)
"RTN","HMPCRPC",24,0)
 I $D(PARAMS("value")) M HMPVAL=PARAMS("value")
"RTN","HMPCRPC",25,0)
 ;
"RTN","HMPCRPC",26,0)
COMMON ; Come here for both CSP and RPC Mode
"RTN","HMPCRPC",27,0)
 ; 
"RTN","HMPCRPC",28,0)
 N CMD
"RTN","HMPCRPC",29,0)
 S CMD=$G(REQ("command",1))
"RTN","HMPCRPC",30,0)
 ;
"RTN","HMPCRPC",31,0)
 I CMD="saveParam" D  G OUT
"RTN","HMPCRPC",32,0)
 . D PUTPARAM^HMPPARAM(.HMPRES,.HMPVAL,"")
"RTN","HMPCRPC",33,0)
 ;
"RTN","HMPCRPC",34,0)
 I CMD="saveParamByUid" D  G OUT
"RTN","HMPCRPC",35,0)
 . D PUTBYUID^HMPPARAM(.HMPRES,$$VAL("uid"),.HMPVAL)
"RTN","HMPCRPC",36,0)
 ;
"RTN","HMPCRPC",37,0)
 I CMD="getParam" D  G OUT
"RTN","HMPCRPC",38,0)
 . D GETBYUID^HMPPARAM(.HMPRES,$$VAL("uid"))
"RTN","HMPCRPC",39,0)
 ;
"RTN","HMPCRPC",40,0)
 I CMD="clearParam" D  G OUT
"RTN","HMPCRPC",41,0)
 . D DELPARAM^HMPPARAM(.HMPRES,$$VAL("uid"))
"RTN","HMPCRPC",42,0)
 ;
"RTN","HMPCRPC",43,0)
 I CMD="getAllParam" D  G OUT
"RTN","HMPCRPC",44,0)
 .D GETALPAR^HMPPARAM(.HMPRES,$$VAL("entity"),$$VAL("entityId"),$$VAL("getValues"))
"RTN","HMPCRPC",45,0)
 ;
"RTN","HMPCRPC",46,0)
 I CMD="getUserInfo" D  G OUT
"RTN","HMPCRPC",47,0)
 .D GETUSERI^HMPCRPC1(.HMPRES,$$VAL("userId"))
"RTN","HMPCRPC",48,0)
 ;
"RTN","HMPCRPC",49,0)
 I CMD="getPatientInfo" D  G OUT
"RTN","HMPCRPC",50,0)
 .D GETPATI^HMPCRPC1(.HMPRES,$$VAL("patientId"))
"RTN","HMPCRPC",51,0)
 ;
"RTN","HMPCRPC",52,0)
 I CMD="getPatientChecks" D  G OUT
"RTN","HMPCRPC",53,0)
 .D CHKS^HMPFPTC(.HMPRES,$$VAL("patientId"))
"RTN","HMPCRPC",54,0)
 ;
"RTN","HMPCRPC",55,0)
 I CMD="logPatientAccess" D  G OUT
"RTN","HMPCRPC",56,0)
 .D LOG^HMPFPTC(.HMPRES,$$VAL("patientId"))
"RTN","HMPCRPC",57,0)
 ;
"RTN","HMPCRPC",58,0)
 I CMD="addTask" D  G OUT
"RTN","HMPCRPC",59,0)
 .D PUT^HMPDJ1(.HMPRES,$$VAL("patientId"),$$VAL("type"),.HMPVAL)
"RTN","HMPCRPC",60,0)
 ;
"RTN","HMPCRPC",61,0)
 I CMD="getReminderList" D  G OUT
"RTN","HMPCRPC",62,0)
 .D REMLIST^HMPPXRM(.HMPRES,$$VAL("user"),$$VAL("location"))
"RTN","HMPCRPC",63,0)
 ;
"RTN","HMPCRPC",64,0)
 I CMD="evaluateReminder" D  G OUT
"RTN","HMPCRPC",65,0)
 .D EVALREM^HMPPXRM(.HMPRES,$$VAL("patientId"),$$VAL("uid"))
"RTN","HMPCRPC",66,0)
 ;
"RTN","HMPCRPC",67,0)
 I CMD="getDefaultPatientList" D  G OUT
"RTN","HMPCRPC",68,0)
 .D GETDLIST^HMPROS8(.HMPRES,$$VAL("server"))
"RTN","HMPCRPC",69,0)
 ;
"RTN","HMPCRPC",70,0)
 I CMD="getWardList" D  G OUT
"RTN","HMPCRPC",71,0)
 .D GETWLIST^HMPROS8(.HMPRES,$$VAL("server"),$$VAL("id"))
"RTN","HMPCRPC",72,0)
 ;
"RTN","HMPCRPC",73,0)
 I CMD="getClinicList" D  G OUT
"RTN","HMPCRPC",74,0)
 .D GETCLIST^HMPROS8(.HMPRES,$$VAL("server"),$$VAL("id"),$$VAL("start"),$$VAL("end"))
"RTN","HMPCRPC",75,0)
 ;
"RTN","HMPCRPC",76,0)
OUT ; output the XML
"RTN","HMPCRPC",77,0)
 ;S HMPRES=$G(RESULT)
"RTN","HMPCRPC",78,0)
 I '$D(HMPRES) S HMPRES="{}"
"RTN","HMPCRPC",79,0)
END Q
"RTN","HMPCRPC",80,0)
 ;
"RTN","HMPCRPC",81,0)
VAL(X) ; return value from request
"RTN","HMPCRPC",82,0)
 Q $G(REQ(X,1))
"RTN","HMPCRPC",83,0)
 ;
"RTN","HMPCRPC",84,0)
CHAINCMD(HMPCMD,HMPRSP) ; Do one command in chain
"RTN","HMPCRPC",85,0)
 ; 
"RTN","HMPCRPC",86,0)
 N CMD
"RTN","HMPCRPC",87,0)
 S CMD=$G(HMPCMD("command"))
"RTN","HMPCRPC",88,0)
 I CMD="getParam" D GETBYUID^HMPPARAM(.HMPRSP,$G(HMPCMD("uid")))
"RTN","HMPCRPC",89,0)
 I CMD="getPatientInfo" D GETPATI^HMPCRPC1(.HMPRSP,$G(HMPCMD("patientId")))
"RTN","HMPCRPC",90,0)
 I CMD="getPatientChecks" D CHKS^HMPFPTC(.HMPRSP,$G(HMPCMD("patientId")))
"RTN","HMPCRPC",91,0)
 I CMD="saveParam" D PUTPARAM^HMPPARAM(.HMPRSP,$G(HMPCMD("value")),"")
"RTN","HMPCRPC",92,0)
 I CMD="saveParamByUid" D PUTBYUID^HMPPARAM(.HMPRSP,$G(HMPCMD("uid")),$G(HMPCMD("value")))
"RTN","HMPCRPC",93,0)
 Q
"RTN","HMPCRPC1")
0^17^B103567295
"RTN","HMPCRPC1",1,0)
HMPCRPC1 ;SLC/AGP,ASMR/RRB - Patient and User routine;05/01/14
"RTN","HMPCRPC1",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPCRPC1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPCRPC1",4,0)
 ;
"RTN","HMPCRPC1",5,0)
 Q
"RTN","HMPCRPC1",6,0)
 ;
"RTN","HMPCRPC1",7,0)
GETADD(VALUES,DFN) ;
"RTN","HMPCRPC1",8,0)
 D ADD^VADPT
"RTN","HMPCRPC1",9,0)
 N INC,NUM,TEMP
"RTN","HMPCRPC1",10,0)
 I VAPA(12)=1 D
"RTN","HMPCRPC1",11,0)
 .I $L(VAPA(13))>0 S VALUES("confidentIalAddress","street",0)=VAPA(13)
"RTN","HMPCRPC1",12,0)
 .I $L(VAPA(14))>0 S VALUES("confidentIalAddress","street",1)=VAPA(14)
"RTN","HMPCRPC1",13,0)
 .I $L(VAPA(15))>0 S VALUES("confidentIalAddress","street",2)=VAPA(15)
"RTN","HMPCRPC1",14,0)
 .I $L(VAPA(16))>0 S VALUES("confidentIalAddress","city")=VAPA(16)
"RTN","HMPCRPC1",15,0)
 .I $L(VAPA(17))>0 S VALUES("confidentIalAddress","state")=$P(VAPA(17),U,2)
"RTN","HMPCRPC1",16,0)
 .I $L(VAPA(18))>0 S VALUES("confidentIalAddress","zip")=VAPA(18)
"RTN","HMPCRPC1",17,0)
 .I $L(VAPA(20))>0 S VALUES("confidentIalAddress","startDate")=$P(VAPA(20),U,2)
"RTN","HMPCRPC1",18,0)
 .I $L(VAPA(21))>0 S VALUES("confidentIalAddress","stopDate")=$P(VAPA(21),U,2)
"RTN","HMPCRPC1",19,0)
 .S INC=0,NUM=0 F  S INC=$O(VAPA(22,INC)) Q:INC=""  D
"RTN","HMPCRPC1",20,0)
 ..S NUM=NUM+1,VALUES("confidentIalAddress","catgories",NUM,"category")=$P(VAPA(22,INC),U,2)
"RTN","HMPCRPC1",21,0)
 ..S VALUES("confidentIalAddress","catgories",NUM,"status")=$S($P(VAPA(22,INC),U,3)="Y":"true",1:"false")
"RTN","HMPCRPC1",22,0)
 ;
"RTN","HMPCRPC1",23,0)
 ;I $L(VAPA(1))>0 S VALUES("address","street",0)=VAPA(1)
"RTN","HMPCRPC1",24,0)
 ;I $L(VAPA(2))>0 S VALUES("address","street",1)=VAPA(2)
"RTN","HMPCRPC1",25,0)
 ;I $L(VAPA(3))>0 S VALUES("address","street",2)=VAPA(3)
"RTN","HMPCRPC1",26,0)
 ;I $L(VAPA(4))>0 S VALUES("address","city")=VAPA(4)
"RTN","HMPCRPC1",27,0)
 ;I $L(VAPA(5))>0 S VALUES("address","state")=$P(VAPA(5),U,2)
"RTN","HMPCRPC1",28,0)
 ;I $L(VAPA(6))>0 S VALUES("address","zip")=VAPA(6)
"RTN","HMPCRPC1",29,0)
 I VAPA(9)]"" S VALUES("temporaryAddress","startDate")=$P(VAPA(9),U,2)
"RTN","HMPCRPC1",30,0)
 I VAPA(10)]"" S VALUES("temporaryAddress","stopDate")=$P(VAPA(10),U,2)
"RTN","HMPCRPC1",31,0)
ADDX ;
"RTN","HMPCRPC1",32,0)
 ;I $L(VAPA(8))>0 S VALUES("address","phone")=VAPA(8)
"RTN","HMPCRPC1",33,0)
 I $P($G(^DPT(DFN,.13)),U,3)'="" S VALUES("email")=$P($G(^DPT(DFN,.13)),U,3)
"RTN","HMPCRPC1",34,0)
 I +$P($G(^DPT(DFN,.11)),U,16)>0 S VALUES("badAddress")=$$GET1^DIQ(2,DFN_",",.121)
"RTN","HMPCRPC1",35,0)
 D KVAR^VADPT
"RTN","HMPCRPC1",36,0)
 Q
"RTN","HMPCRPC1",37,0)
 ;
"RTN","HMPCRPC1",38,0)
GETBSA(DFN) ;
"RTN","HMPCRPC1",39,0)
 N DATE,DATA,NFOUND,TEST,TEXT
"RTN","HMPCRPC1",40,0)
 S TEST=""
"RTN","HMPCRPC1",41,0)
 D BSA^PXRMBMI(DFN,1,0,DT,.NFOUND,.TEST,.DATE,.DATA,.TEXT)
"RTN","HMPCRPC1",42,0)
 Q +$G(DATA(1,"BSA"))
"RTN","HMPCRPC1",43,0)
 ;
"RTN","HMPCRPC1",44,0)
GETBMI(DFN) ;
"RTN","HMPCRPC1",45,0)
 ;  BMI(DFN,NGET,BDT,EDT,NFOUND,TEST,DATE,DATA,TEXT) 
"RTN","HMPCRPC1",46,0)
 N DATE,DATA,NFOUND,TEST,TEXT
"RTN","HMPCRPC1",47,0)
 D BMI^PXRMBMI(DFN,1,0,DT,.NFOUND,.TEST,.DATE,.DATA,.TEXT)
"RTN","HMPCRPC1",48,0)
 Q +$G(DATA(1,"BMI"))
"RTN","HMPCRPC1",49,0)
 ;
"RTN","HMPCRPC1",50,0)
GETDEM(VALUES,DFN) ;
"RTN","HMPCRPC1",51,0)
 D DEM^VADPT
"RTN","HMPCRPC1",52,0)
 S VALUES("name")=VADM(1)
"RTN","HMPCRPC1",53,0)
 I VADM(2)]"" S VALUES("ssn")=$P(VADM(2),U,2)
"RTN","HMPCRPC1",54,0)
 I VADM(3)]"" S VALUES("dob")=$P(VADM(3),U,2)
"RTN","HMPCRPC1",55,0)
 I VADM(4)]"" S VALUES("age")=VADM(4)
"RTN","HMPCRPC1",56,0)
 I VADM(5)]"" S VALUES("gender")=$P(VADM(5),U,2)
"RTN","HMPCRPC1",57,0)
 I VADM(6)]"" S VALUES("dateDeath")=$P(VADM(6),U,2)
"RTN","HMPCRPC1",58,0)
 I VADM(7)]"" S VALUES("remarks")=VADM(7)
"RTN","HMPCRPC1",59,0)
 I VADM(8)]"" S VALUES("race")=$P(VADM(8),U,2)
"RTN","HMPCRPC1",60,0)
 D KVAR^VADPT
"RTN","HMPCRPC1",61,0)
 Q
"RTN","HMPCRPC1",62,0)
 ;
"RTN","HMPCRPC1",63,0)
GETKEYS(VALUES,USER) ;
"RTN","HMPCRPC1",64,0)
 N NAME,HMPERR,HMPLIST,CNT
"RTN","HMPCRPC1",65,0)
 D LIST^DIC(200.051,","_USER_",",".01",,,,,,,,"HMPLIST","HMPERR")
"RTN","HMPCRPC1",66,0)
 S CNT=0 F  S CNT=$O(HMPLIST("DILIST",1,CNT)) Q:CNT'>0  D
"RTN","HMPCRPC1",67,0)
 . S NAME=$G(HMPLIST("DILIST",1,CNT)) Q:NAME=""
"RTN","HMPCRPC1",68,0)
 . S VALUES("vistaKeys",NAME)="TRUE"
"RTN","HMPCRPC1",69,0)
 Q
"RTN","HMPCRPC1",70,0)
 ;
"RTN","HMPCRPC1",71,0)
GETNOK(VALUES,DFN,TYPE) ;
"RTN","HMPCRPC1",72,0)
 S VAOA("A")=TYPE
"RTN","HMPCRPC1",73,0)
 N CNT,CONTACT
"RTN","HMPCRPC1",74,0)
 S CONTACT=$S(TYPE=3:"secondary",1:"primary")
"RTN","HMPCRPC1",75,0)
 S CNT=$S(TYPE=3:2,1:1)
"RTN","HMPCRPC1",76,0)
 D OAD^VADPT
"RTN","HMPCRPC1",77,0)
 ;
"RTN","HMPCRPC1",78,0)
 I VAOA(9)]"" S VALUES("nok",CNT,"name")=VAOA(9)
"RTN","HMPCRPC1",79,0)
 I VAOA(10)]"" S VALUES("nok",CNT,"relationship")=VAOA(10)
"RTN","HMPCRPC1",80,0)
 I VAOA(1)]"" S VALUES("nok",CNT,"address","street",1)=VAOA(1)
"RTN","HMPCRPC1",81,0)
 I VAOA(2)]"" S VALUES("nok",CNT,"address","street",2)=VAOA(2)
"RTN","HMPCRPC1",82,0)
 I VAOA(3)]"" S VALUES("nok",CNT,"address","street",3)=VAOA(3)
"RTN","HMPCRPC1",83,0)
 I VAOA(4)]"" S VALUES("nok",CNT,"address","city")=VAOA(4)
"RTN","HMPCRPC1",84,0)
 I VAOA(5)]"" S VALUES("nok",CNT,"address","state")=$P(VAOA(5),U,2)
"RTN","HMPCRPC1",85,0)
 I VAOA(6)]"" S VALUES("nok",CNT,"address","zip")=VAOA(6)
"RTN","HMPCRPC1",86,0)
 I VAOA(8)]"" S VALUES("nok",CNT,"address","phone")=VAOA(8)
"RTN","HMPCRPC1",87,0)
 D KVAR^VADPT
"RTN","HMPCRPC1",88,0)
 Q
"RTN","HMPCRPC1",89,0)
 ;
"RTN","HMPCRPC1",90,0)
GETMEANS(VALUES,DFN) ;
"RTN","HMPCRPC1",91,0)
 D ELIG^VADPT
"RTN","HMPCRPC1",92,0)
 I VAEL(9)]"" S VALUES("meanStatus")=$P(VAEL(9),U,2)
"RTN","HMPCRPC1",93,0)
 D KVAR^VADPT
"RTN","HMPCRPC1",94,0)
 Q
"RTN","HMPCRPC1",95,0)
 ;
"RTN","HMPCRPC1",96,0)
GETPATI(RESULT,DFN) ;
"RTN","HMPCRPC1",97,0)
 N TYPE,VALUES,HMPERR,Y,HMPODEM,HMPSYS
"RTN","HMPCRPC1",98,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPCRPC1",99,0)
 D DPT1OD^HMPDJ00(.VALUES)
"RTN","HMPCRPC1",100,0)
 G GPQ
"RTN","HMPCRPC1",101,0)
 S VALUES("pid")=$$PID^HMPDJFS(DFN)
"RTN","HMPCRPC1",102,0)
 ;D BUILDUID^HMPPARAM(.VALUES,"patient",DFN)
"RTN","HMPCRPC1",103,0)
 ;D GETDEM(.VALUES,DFN)
"RTN","HMPCRPC1",104,0)
 D GETADD(.VALUES,DFN)
"RTN","HMPCRPC1",105,0)
 ;F TYPE=1,3 D GETNOK(.VALUES,DFN,TYPE)
"RTN","HMPCRPC1",106,0)
 D GETPATTM(.VALUES,DFN)
"RTN","HMPCRPC1",107,0)
 ;D GETPATVI(.VALUES,DFN)
"RTN","HMPCRPC1",108,0)
 D GETPATIP(.VALUES,DFN)
"RTN","HMPCRPC1",109,0)
 D GETMEANS(.VALUES,DFN)
"RTN","HMPCRPC1",110,0)
 D PRF^HMPFPTC(DFN,.VALUES)
"RTN","HMPCRPC1",111,0)
 S Y=$$CWAD^ORQPT2(DFN)
"RTN","HMPCRPC1",112,0)
 I Y]"" S VALUES("cwad")=Y
"RTN","HMPCRPC1",113,0)
 I $D(VALUES("patientRecordFlags")) S VALUES("cwad")=$G(VALUES("cwad"))_"F"
"RTN","HMPCRPC1",114,0)
 ;D PTINQ^ORWPT(.DEM,DFN)
"RTN","HMPCRPC1",115,0)
 ;S NUM=5,STR=""
"RTN","HMPCRPC1",116,0)
 ;F  S NUM=$O(@DEM@(NUM)) Q:NUM'>0  D
"RTN","HMPCRPC1",117,0)
 ;.S VALUES("patDemDetails","text","\",NUM)=@DEM@(NUM)_$C(13,10)
"RTN","HMPCRPC1",118,0)
 S VALUES("success")="true"
"RTN","HMPCRPC1",119,0)
GPQ D ENCODE^HMPJSON("VALUES","RESULT","HMPERR")
"RTN","HMPCRPC1",120,0)
 I $D(HMPERR) D
"RTN","HMPCRPC1",121,0)
 .K RESULT N TEMP,TXT
"RTN","HMPCRPC1",122,0)
 .S TXT(1)="Problem encoding json output."
"RTN","HMPCRPC1",123,0)
 .D SETERROR^HMPUTILS(.TEMP,.HMPERR,.TXT,.VALUES)
"RTN","HMPCRPC1",124,0)
 .K HMPERR D ENCODE^HMPJSON("TEMP","RESULT","HMPERR")
"RTN","HMPCRPC1",125,0)
 Q
"RTN","HMPCRPC1",126,0)
 ;
"RTN","HMPCRPC1",127,0)
GETPATIP(VALUES,DFN) ;
"RTN","HMPCRPC1",128,0)
 N HMPDATA
"RTN","HMPCRPC1",129,0)
 D INPLOC^ORWPT(.HMPDATA,DFN)
"RTN","HMPCRPC1",130,0)
 I +HMPDATA D
"RTN","HMPCRPC1",131,0)
 . S VALUES("shortInpatientLocation")=$P($G(^SC(+HMPDATA,0)),U,2)
"RTN","HMPCRPC1",132,0)
 . S VALUES("inpatientLocation")=$P(HMPDATA,U,2)
"RTN","HMPCRPC1",133,0)
 I $P($G(^DPT(DFN,.101)),U)'="" S VALUES("roomBed")=$P($G(^DPT(DFN,.101)),U)
"RTN","HMPCRPC1",134,0)
 Q
"RTN","HMPCRPC1",135,0)
 ;
"RTN","HMPCRPC1",136,0)
GETPATVI(VALUES,DFN) ;  DE2818 - PB - Code commented out during SQA review/modifications
"RTN","HMPCRPC1",137,0)
 ;N BMI,DAS,HT,LDATE,HMPTEMP,WT,BSA
"RTN","HMPCRPC1",138,0)
 ;;get weight
"RTN","HMPCRPC1",139,0)
 ;S LDATE=$O(^PXRMINDX(120.5,"PI",DFN,9,""),-1)
"RTN","HMPCRPC1",140,0)
 ;I LDATE>0 D
"RTN","HMPCRPC1",141,0)
 ;.S DAS=$O(^PXRMINDX(120.5,"PI",DFN,9,LDATE,""))
"RTN","HMPCRPC1",142,0)
 ;.I DAS']"" Q
"RTN","HMPCRPC1",143,0)
 ;.D GETDATA^PXRMVITL(DAS,.HMPTEMP)
"RTN","HMPCRPC1",144,0)
 ;.S WT=HMPTEMP("VALUE")
"RTN","HMPCRPC1",145,0)
 ;.S VALUES("lastVitals","weight","value")=WT
"RTN","HMPCRPC1",146,0)
 ;.S VALUES("lastVitals","weight","lastDone")=$$FMTE^XLFDT(LDATE,"D")
"RTN","HMPCRPC1",147,0)
 ;;get height
"RTN","HMPCRPC1",148,0)
 ;K LDATE,DAS
"RTN","HMPCRPC1",149,0)
 ;S LDATE=$O(^PXRMINDX(120.5,"PI",DFN,8,""),-1)
"RTN","HMPCRPC1",150,0)
 ;I LDATE>0 D
"RTN","HMPCRPC1",151,0)
 ;.S DAS=$O(^PXRMINDX(120.5,"PI",DFN,8,LDATE,""))
"RTN","HMPCRPC1",152,0)
 ;.I DAS']"" Q
"RTN","HMPCRPC1",153,0)
 ;.D GETDATA^PXRMVITL(DAS,.HMPTEMP)
"RTN","HMPCRPC1",154,0)
 ;.S HT=HMPTEMP("VALUE")
"RTN","HMPCRPC1",155,0)
 ;.S VALUES("lastVitals","height","value")=HT
"RTN","HMPCRPC1",156,0)
 ;.S VALUES("lastVitals","height","lastDone")=$$FMTE^XLFDT(LDATE,"D")
"RTN","HMPCRPC1",157,0)
 ;S BMI=$$GETBMI(DFN)
"RTN","HMPCRPC1",158,0)
 ;I BMI>0 S VALUES("lastVitals","bmi")=BMI
"RTN","HMPCRPC1",159,0)
 ;S BSA=$$GETBSA(DFN)
"RTN","HMPCRPC1",160,0)
 ;I BSA>0 S VALUES("lastVitals","bsa")=BSA
"RTN","HMPCRPC1",161,0)
 ;Q
"RTN","HMPCRPC1",162,0)
 ;
"RTN","HMPCRPC1",163,0)
GETPATTM(VALUES,DFN) ; -- returns treating team info
"RTN","HMPCRPC1",164,0)
 N CNT,PROV,TEAM,MH,HMPTEAM,MHTEAM
"RTN","HMPCRPC1",165,0)
 S PROV=$$OUTPTPR^SDUTL3(DFN) D NP(+PROV,"primaryProvider")
"RTN","HMPCRPC1",166,0)
 S PROV=$$OUTPTAP^SDUTL3(DFN) D NP(+PROV,"associateProvider")
"RTN","HMPCRPC1",167,0)
 S PROV=$G(^DPT(DFN,.1041)) D NP(+PROV,"attendingProvider")
"RTN","HMPCRPC1",168,0)
 S PROV=$G(^DPT(DFN,.104)) D NP(+PROV,"inpatientProvider")
"RTN","HMPCRPC1",169,0)
 ;
"RTN","HMPCRPC1",170,0)
 S TEAM=$$OUTPTTM^SDUTL3(DFN) I TEAM D
"RTN","HMPCRPC1",171,0)
 . S VALUES("teamInfo","team","uid")=$$SETUID^HMPUTILS("team",,+TEAM)
"RTN","HMPCRPC1",172,0)
 . S VALUES("teamInfo","team","name")=$P(TEAM,U,2)
"RTN","HMPCRPC1",173,0)
 . S VALUES("teamInfo","team","phone")=$P($G(^SCTM(404.51,+TEAM,0)),U,2)
"RTN","HMPCRPC1",174,0)
 I 'TEAM S VALUES("teamInfo","team","name")="unassigned"
"RTN","HMPCRPC1",175,0)
 ;
"RTN","HMPCRPC1",176,0)
 S MH=$$START^SCMCMHTC(DFN) D NP(+MH,"mhCoordinator")
"RTN","HMPCRPC1",177,0)
 S VALUES("teamInfo","mhCoordinator","mhPosition")=$S(MH:$P(MH,U,3),1:"unassigned")
"RTN","HMPCRPC1",178,0)
 S VALUES("teamInfo","mhCoordinator","mhTeam")=$S(MH:$P(MH,U,5),1:"unassigned")
"RTN","HMPCRPC1",179,0)
 ;US5234 - Add Mental Health Team Office Phone - TW
"RTN","HMPCRPC1",180,0)
 I $P($G(MH),U,5)'="" D
"RTN","HMPCRPC1",181,0)
 . S MHTEAM=$O(^SCTM(404.51,"B",$P(MH,U,5),""))
"RTN","HMPCRPC1",182,0)
 . S VALUES("teamInfo","mhCoordinator","mhTeamOfficePhone")=$$GET1^DIQ(404.51,MHTEAM_",",.02)
"RTN","HMPCRPC1",183,0)
 ;
"RTN","HMPCRPC1",184,0)
 D PCDETAIL^ORWPT1(.HMPTEAM,DFN)
"RTN","HMPCRPC1",185,0)
 S CNT=0 F  S CNT=$O(HMPTEAM(CNT)) Q:CNT'>0  D
"RTN","HMPCRPC1",186,0)
 . S VALUES("teamInfo","text","\",CNT)=HMPTEAM(CNT)_$C(13,10)
"RTN","HMPCRPC1",187,0)
 Q
"RTN","HMPCRPC1",188,0)
NP(X,TYPE) ; -- add New Person data to teamInfo array
"RTN","HMPCRPC1",189,0)
 Q:$G(TYPE)=""
"RTN","HMPCRPC1",190,0)
 I $G(X)'>0 S VALUES("teamInfo",TYPE,"name")="unassigned" Q
"RTN","HMPCRPC1",191,0)
 S VALUES("teamInfo",TYPE,"uid")=$$SETUID^HMPUTILS("user",,+X)
"RTN","HMPCRPC1",192,0)
 S VALUES("teamInfo",TYPE,"name")=$P($G(^VA(200,+X,0)),U)
"RTN","HMPCRPC1",193,0)
 S VALUES("teamInfo",TYPE,"analogPager")=$P($G(^VA(200,+X,.13)),U,7)
"RTN","HMPCRPC1",194,0)
 S VALUES("teamInfo",TYPE,"digitalPager")=$P($G(^VA(200,+X,.13)),U,8)
"RTN","HMPCRPC1",195,0)
 S VALUES("teamInfo",TYPE,"officePhone")=$P($G(^VA(200,+X,.13)),U,2)
"RTN","HMPCRPC1",196,0)
 Q
"RTN","HMPCRPC1",197,0)
 ;
"RTN","HMPCRPC1",198,0)
GETPOS(VALUES,USER) ;
"RTN","HMPCRPC1",199,0)
 ; this returns the list of position for an user
"RTN","HMPCRPC1",200,0)
 N CNT,NODE,NUM,ROLEIEN,ROLE,TEAM,TEAMIEN,TEAMPHN,HMPLIST,HMPERR
"RTN","HMPCRPC1",201,0)
 ;$$TPPR^SCAPMC(DUZ,SCDATES,SCPURPA,SCROLEA,"LIST",HMPERR)
"RTN","HMPCRPC1",202,0)
 S NUM=$$TPPR^SCAPMC(USER,"","","","",.HMPERR)
"RTN","HMPCRPC1",203,0)
 F CNT=1:1:NUM D
"RTN","HMPCRPC1",204,0)
 .S NODE=$G(^TMP("SC TMP LIST",$J,CNT))
"RTN","HMPCRPC1",205,0)
 .S VALUES("vistaPositions",CNT,"position")=$P(NODE,U,2)
"RTN","HMPCRPC1",206,0)
 .S VALUES("vistaPositions",CNT,"effectiveDate")=$P(NODE,U,5)
"RTN","HMPCRPC1",207,0)
 .S VALUES("vistaPositions",CNT,"inactiveDate")=$P(NODE,U,6)
"RTN","HMPCRPC1",208,0)
 .S TEAMIEN=$P(NODE,U,3)
"RTN","HMPCRPC1",209,0)
 .S TEAM=$$GET1^DIQ(404.51,(+TEAMIEN_","),.01)
"RTN","HMPCRPC1",210,0)
 .S TEAMPHN=$$GET1^DIQ(404.51,(+TEAMIEN_","),.02)
"RTN","HMPCRPC1",211,0)
 .S VALUES("vistaPositions",CNT,"teamName")=TEAM
"RTN","HMPCRPC1",212,0)
 .S VALUES("vistaPositions",CNT,"teamPhone")=TEAMPHN
"RTN","HMPCRPC1",213,0)
 .I $P(NODE,U,9)>0 D
"RTN","HMPCRPC1",214,0)
 .S VALUES("vistaPositions",CNT,"role")=$$GET1^DIQ(8930,($P(NODE,U,9)_","),.01)
"RTN","HMPCRPC1",215,0)
 Q
"RTN","HMPCRPC1",216,0)
 ;
"RTN","HMPCRPC1",217,0)
GETUSERC(VALUES,USER) ;
"RTN","HMPCRPC1",218,0)
 N ARRAY,CNT,EFFDATE,EXPDATE,ID,IND,LIST,NODE
"RTN","HMPCRPC1",219,0)
 D WHATIS^USRLM(USER,"LIST",1)
"RTN","HMPCRPC1",220,0)
 ;LIST(Uppername_indicator)=UserClassIEN^MembershipIEN^name^EffectDt^ExpireDt
"RTN","HMPCRPC1",221,0)
 S IND=0,CNT=0 F  S IND=$O(LIST(IND)) Q:IND=""  D
"RTN","HMPCRPC1",222,0)
 .S NODE=LIST(IND)
"RTN","HMPCRPC1",223,0)
 .S EFFDATE=$P(NODE,U,4),EXPDATE=$P(NODE,U,5)
"RTN","HMPCRPC1",224,0)
 .I EFFDATE>0,EFFDATE>DT Q
"RTN","HMPCRPC1",225,0)
 .I EXPDATE>0,EXPDATE<DT Q
"RTN","HMPCRPC1",226,0)
 .S CNT=CNT+1
"RTN","HMPCRPC1",227,0)
 .S ID=$P(NODE,U)
"RTN","HMPCRPC1",228,0)
 .S ARRAY(ID)=""
"RTN","HMPCRPC1",229,0)
 .S VALUES("vistaUserClass",CNT,"role")=$P(NODE,U,3)
"RTN","HMPCRPC1",230,0)
 .S VALUES("vistaUserClass",CNT,"uid")=$$SETUID^HMPUTILS("asu-class","",ID,"")
"RTN","HMPCRPC1",231,0)
 .S VALUES("vistaUserClass",CNT,"effectiveDate")=EFFDATE
"RTN","HMPCRPC1",232,0)
 .S VALUES("vistaUserClass",CNT,"expirationDate")=EXPDATE
"RTN","HMPCRPC1",233,0)
 .I $D(^USR(8930,"AD",ID)) D GETUCPAR(.VALUES,ID,.CNT,.ARRAY)
"RTN","HMPCRPC1",234,0)
 I CNT=0 D
"RTN","HMPCRPC1",235,0)
 .S ID=$O(^USR(8930,"B","USER","")) I +ID'>0 Q
"RTN","HMPCRPC1",236,0)
 .S CNT=CNT+1
"RTN","HMPCRPC1",237,0)
 .S VALUES("vistaUserClass",CNT,"role")=$P($G(^USR(8930,ID,0)),U)
"RTN","HMPCRPC1",238,0)
 .S VALUES("vistaUserClass",CNT,"uid")=$$SETUID^HMPUTILS("asu-class","",ID,"")
"RTN","HMPCRPC1",239,0)
 Q
"RTN","HMPCRPC1",240,0)
GETUCPAR(VALUES,ID,CNT,ARRAY) ;
"RTN","HMPCRPC1",241,0)
 N IEN,ROLE
"RTN","HMPCRPC1",242,0)
 S IEN=0 F  S IEN=$O(^USR(8930,"AD",ID,IEN)) Q:IEN'>0  D
"RTN","HMPCRPC1",243,0)
 .I $D(ARRAY(IEN)) Q
"RTN","HMPCRPC1",244,0)
 .S ARRAY(IEN)=""
"RTN","HMPCRPC1",245,0)
 .S ROLE=$P($G(^USR(8930,IEN,0)),U)
"RTN","HMPCRPC1",246,0)
 .S CNT=CNT+1
"RTN","HMPCRPC1",247,0)
 .S VALUES("vistaUserClass",CNT,"role")=ROLE
"RTN","HMPCRPC1",248,0)
 .S VALUES("vistaUserClass",CNT,"uid")=$$SETUID^HMPUTILS("asu-class","",IEN,"")
"RTN","HMPCRPC1",249,0)
 .I $D(^USR(8930,"AD",ID)) D GETUCPAR(.VALUES,IEN,.CNT,.ARRAY)
"RTN","HMPCRPC1",250,0)
 Q
"RTN","HMPCRPC1",251,0)
 ;
"RTN","HMPCRPC1",252,0)
GETUSERI(RESULT,USER) ;
"RTN","HMPCRPC1",253,0)
 N RPCOPT,VALUES,HMPERR,HMPLIST,CPRSPATH
"RTN","HMPCRPC1",254,0)
 D BUILDUID^HMPPARAM(.VALUES,"user",USER)
"RTN","HMPCRPC1",255,0)
 S VALUES("timeout")=$$GET^XPAR("USR^SYS","ORWOR TIMEOUT CHART",1,"I")
"RTN","HMPCRPC1",256,0)
 S VALUES("timeoutCounter")=$$GET^XPAR("USR^SYS^PKG","ORWOR TIMEOUT COUNTDOWN",1,"I")
"RTN","HMPCRPC1",257,0)
 S CPRSPATH=$$GET^XPAR("USR^SYS","HMP CPRS PATH",1,"I")
"RTN","HMPCRPC1",258,0)
 S VALUES("cprsPath")=$S($L($G(CPRSPATH))>0:CPRSPATH,1:"")
"RTN","HMPCRPC1",259,0)
 D FIND^DIC(19,"",1,"X","HMP UI CONTEXT",1,,,,"HMPLIST")
"RTN","HMPCRPC1",260,0)
 S RPCOPT=$S($D(^HMPLIST("DILIST",0)):-1,1:$P(HMPLIST("DILIST","ID",1,1),"version ",2))
"RTN","HMPCRPC1",261,0)
 ;S VALUES("signingPriv")=$S($D(^XUSEC("ORES",DUZ)):3,$D(^XUSEC("ORELSE",DUZ)):2,$D(^XUSEC("OREMAS",DUZ)):1,1:0)
"RTN","HMPCRPC1",262,0)
 S VALUES("orderingRole")=$$ORDROLE(USER)
"RTN","HMPCRPC1",263,0)
 S VALUES("hmpVersion")=RPCOPT
"RTN","HMPCRPC1",264,0)
 S VALUES("domain")=$$KSP^XUPARAM("WHERE")  ; domain
"RTN","HMPCRPC1",265,0)
 S VALUES("service")=+$G(^VA(200,USER,5))     ; service/section
"RTN","HMPCRPC1",266,0)
 D GETUSERC(.VALUES,USER)
"RTN","HMPCRPC1",267,0)
 D GETPOS(.VALUES,USER)
"RTN","HMPCRPC1",268,0)
 D GETKEYS(.VALUES,USER)
"RTN","HMPCRPC1",269,0)
 S VALUES("productionAccount")=$S($$PROD^XUPROD=1:"true",1:"false")
"RTN","HMPCRPC1",270,0)
 ;S RESULT=$$ENCODE^HMPJSON("VALUES","HMPERR")
"RTN","HMPCRPC1",271,0)
 D ENCODE^HMPJSON("VALUES","RESULT","HMPERR")
"RTN","HMPCRPC1",272,0)
 Q
"RTN","HMPCRPC1",273,0)
 ;
"RTN","HMPCRPC1",274,0)
ORDROLE(USER) ; returns the role a person takes in ordering
"RTN","HMPCRPC1",275,0)
 ; VAL: 0=nokey, 1=clerk, 2=nurse, 3=physician, 4=student, 5=bad keys
"RTN","HMPCRPC1",276,0)
 ;I '$G(ORWCLVER) Q 0  ; version of client is to old for ordering
"RTN","HMPCRPC1",277,0)
 I ($D(^XUSEC("OREMAS",USER))+$D(^XUSEC("ORELSE",USER))+$D(^XUSEC("ORES",USER)))>1 Q 5
"RTN","HMPCRPC1",278,0)
 I $D(^XUSEC("OREMAS",USER)) Q 1                           ; clerk
"RTN","HMPCRPC1",279,0)
 I $D(^XUSEC("ORELSE",USER)) Q 2                           ; nurse
"RTN","HMPCRPC1",280,0)
 I $D(^XUSEC("ORES",USER)),$D(^XUSEC("PROVIDER",USER)) Q 3  ; doctor
"RTN","HMPCRPC1",281,0)
 I $D(^XUSEC("PROVIDER",USER)) Q 4                         ; student
"RTN","HMPCRPC1",282,0)
 Q 0
"RTN","HMPCRPC1",283,0)
 ;
"RTN","HMPD")
0^18^B29605922
"RTN","HMPD",1,0)
HMPD ;SLC/MKB,ASMR/RRB - Serve VistA data as XML via RPC ;8/2/11  15:29
"RTN","HMPD",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPD",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPD",4,0)
 ;
"RTN","HMPD",5,0)
 ; External References          DBIA#
"RTN","HMPD",6,0)
 ; -------------------          -----
"RTN","HMPD",7,0)
 ; ^DPT                         10035
"RTN","HMPD",8,0)
 ; ^SC                          10040
"RTN","HMPD",9,0)
 ; DIQ                           2056
"RTN","HMPD",10,0)
 ; MPIF001                       2701
"RTN","HMPD",11,0)
 ; VASITE                       10112
"RTN","HMPD",12,0)
 ; XLFDT                        10103
"RTN","HMPD",13,0)
 ; XLFSTR                       10104
"RTN","HMPD",14,0)
 ; XUAF4                         2171
"RTN","HMPD",15,0)
 ;
"RTN","HMPD",16,0)
 Q
"RTN","HMPD",17,0)
 ;
"RTN","HMPD",18,0)
GET(HMP,DFN,TYPE,START,STOP,MAX,ID,FILTER) ; -- Return search results as XML in @HMP@(n) 
"RTN","HMPD",19,0)
 ; RPC = HMP GET PATIENT DATA
"RTN","HMPD",20,0)
 N ICN,HMPI,HMPTOTL,HMPTEXT
"RTN","HMPD",21,0)
 S HMP=$NA(^TMP("HMP",$J)) K @HMP
"RTN","HMPD",22,0)
 S HMPTEXT=+$G(FILTER("text")) ;include report/document text?
"RTN","HMPD",23,0)
 ;
"RTN","HMPD",24,0)
 ; parse & validate input parameters
"RTN","HMPD",25,0)
 S ICN=+$P($G(DFN),";",2),DFN=+$G(DFN),ID=$G(ID)
"RTN","HMPD",26,0)
 I DFN<1,ICN S DFN=+$$GETDFN^MPIF001(ICN)
"RTN","HMPD",27,0)
 S TYPE=$$LOW^XLFSTR($G(TYPE)) I TYPE="" S TYPE=$$ALL
"RTN","HMPD",28,0)
 I TYPE'="new",DFN<1!'$D(^DPT(DFN)) D ERR(1,DFN) G GTQ ;ICR 10035 ASF 11/2/15 DE2818
"RTN","HMPD",29,0)
 S:'$G(START) START=1410102 S:'$G(STOP) STOP=4141015 S:'$G(MAX) MAX=9999
"RTN","HMPD",30,0)
 I START,STOP,STOP<START N X S X=START,START=STOP,STOP=X  ;switch
"RTN","HMPD",31,0)
 I STOP,$L(STOP,".")<2 S STOP=STOP_".24"
"RTN","HMPD",32,0)
 I ID="",$D(FILTER("id")) S ID=FILTER("id")
"RTN","HMPD",33,0)
 ;
"RTN","HMPD",34,0)
 ; extract data
"RTN","HMPD",35,0)
 N HMPTYPE,HMPP,HMPHDR,HMPTAG,HMPTN
"RTN","HMPD",36,0)
 S HMPTYPE=TYPE D ADD("<results version='1.1' timeZone='"_$$TZ^XLFDT_"' >")
"RTN","HMPD",37,0)
 F HMPP=1:1:$L(HMPTYPE,";") S HMPTAG=$P(HMPTYPE,";",HMPP) I $L(HMPTAG) D
"RTN","HMPD",38,0)
 . S HMPTN="EN^"_$$RTN(.HMPTAG) Q:'$L($T(@HMPTN))  ;D ERR(2) Q
"RTN","HMPD",39,0)
 . D ADD("<"_HMPTAG) S HMPHDR=HMPI,HMPTOTL=0
"RTN","HMPD",40,0)
 . D @(HMPTN_"(DFN,START,STOP,MAX,ID)")
"RTN","HMPD",41,0)
 . S @HMP@(HMPHDR)=@HMP@(HMPHDR)_" total='"_+$G(HMPTOTL)_"' >" D ADD("</"_HMPTAG_">")
"RTN","HMPD",42,0)
 D ADD("</results>")
"RTN","HMPD",43,0)
 ;
"RTN","HMPD",44,0)
GTQ ; end
"RTN","HMPD",45,0)
 Q
"RTN","HMPD",46,0)
 ;
"RTN","HMPD",47,0)
RTN(X) ; -- Return name of HMPDxxxx routine for clinical domain X
"RTN","HMPD",48,0)
 ;  X is also enforced as expected group tag name, if passed by ref
"RTN","HMPD",49,0)
 N Y S Y="HMPD",X=$G(X) I X="" Q Y
"RTN","HMPD",50,0)
 I X["accession"    S Y="HMPDLRA",X="accessions"
"RTN","HMPD",51,0)
 I X["allerg"       S Y="HMPDGMRA",X="reactions"
"RTN","HMPD",52,0)
 I X["appointment"  S Y="HMPDSDAM",X="appointments"
"RTN","HMPD",53,0)
 I X["clinicalProc" S Y="HMPDMC",X="clinicalProcedures"
"RTN","HMPD",54,0)
 I X["consult"      S Y="HMPDGMRC",X="consults"
"RTN","HMPD",55,0)
 I X["demograph"    S Y="HMPDPT",X="demographics"
"RTN","HMPD",56,0)
 I X["document"     S Y="HMPDTIU",X="documents"
"RTN","HMPD",57,0)
 I X["factor"       S Y="HMPDPXHF",X="healthFactors"
"RTN","HMPD",58,0)
 I X["flag"         S Y="HMPDGPF",X="flags"
"RTN","HMPD",59,0)
 I X["immunization" S Y="HMPDPXIM",X="immunizations"
"RTN","HMPD",60,0)
 I X["skin"         S Y="HMPDPXSK",X="skinTests"
"RTN","HMPD",61,0)
 I X?1"exam".E      S Y="HMPDPXAM",X="exams"
"RTN","HMPD",62,0)
 I X["educat"       S Y="HMPDPXED",X="educationTopics"
"RTN","HMPD",63,0)
 I X["insur"        S Y="HMPDIB",X="insurancePolicies"
"RTN","HMPD",64,0)
 I X["polic"        S Y="HMPDIB",X="insurancePolicies"
"RTN","HMPD",65,0)
 I X["lab"          S Y="HMPDLR",X="labs"
"RTN","HMPD",66,0)
 I X["panel"        S Y="HMPDLRO",X="panels"
"RTN","HMPD",67,0)
 I X["med"          S Y="HMPDPS",X="meds"
"RTN","HMPD",68,0)
 I X["pharm"        S Y="HMPDPSOR",X="meds"
"RTN","HMPD",69,0)
 I X["observ"       S Y="HMPDMDC",X="observations"
"RTN","HMPD",70,0)
 I X["order"        S Y="HMPDOR",X="orders"
"RTN","HMPD",71,0)
 I X["patient"      S Y="HMPDPT",X="demographics"
"RTN","HMPD",72,0)
 I X["problem"      S Y="HMPDGMPL",X="problems"
"RTN","HMPD",73,0)
 I X["procedure"    S Y="HMPDPROC",X="procedures"
"RTN","HMPD",74,0)
 I X["reaction"     S Y="HMPDGMRA",X="reactions"
"RTN","HMPD",75,0)
 I X["surg"         S Y="HMPDSR",X="surgeries"
"RTN","HMPD",76,0)
 I X["visit"        S Y="HMPDVSIT",X="visits"
"RTN","HMPD",77,0)
 I X["vital"        S Y="HMPDGMV",X="vitals"
"RTN","HMPD",78,0)
 I X["rad"          S Y="HMPDRA",X="radiologyExams"
"RTN","HMPD",79,0)
 I X["xray"         S Y="HMPDRA",X="radiologyExams"
"RTN","HMPD",80,0)
 I X["new"          S Y="HMPDX",X="patients"
"RTN","HMPD",81,0)
 Q Y
"RTN","HMPD",82,0)
 ;
"RTN","HMPD",83,0)
TAG(X) ; -- return plural name for group tags
"RTN","HMPD",84,0)
 N Y S:X'?1.L X=$$LOW^XLFSTR(X)
"RTN","HMPD",85,0)
 I $E(X,$L(X))="s" S Y=X
"RTN","HMPD",86,0)
 I $E(X,$L(X))="y" S Y=$E(X,1,$L(X)-1)_"ies"
"RTN","HMPD",87,0)
 E  S Y=X_"s"
"RTN","HMPD",88,0)
 Q Y
"RTN","HMPD",89,0)
 ;
"RTN","HMPD",90,0)
ALL() ; -- return string for all types of data
"RTN","HMPD",91,0)
 Q "demographics;reactions;problems;vitals;labs;meds;immunizations;observation;visits;appointments;documents;procedures;consults;flags;factors;skinTests;exams;education;insurance"
"RTN","HMPD",92,0)
 ;
"RTN","HMPD",93,0)
ERR(X,VAL) ; -- return error message
"RTN","HMPD",94,0)
 N MSG  S MSG="Error"
"RTN","HMPD",95,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","HMPD",96,0)
 I X=2  S MSG="Requested domain type '"_$G(VAL)_"' not recognized"
"RTN","HMPD",97,0)
 I X=99 S MSG="Unknown request"
"RTN","HMPD",98,0)
 ;
"RTN","HMPD",99,0)
 D ADD("<error>")
"RTN","HMPD",100,0)
 D ADD("<message>"_MSG_"</message>")
"RTN","HMPD",101,0)
 D ADD("</error>")
"RTN","HMPD",102,0)
 Q
"RTN","HMPD",103,0)
 ;
"RTN","HMPD",104,0)
ESC(X) ; -- escape outgoing XML
"RTN","HMPD",105,0)
 ; Q $ZCONVERT(X,"O","HTML")  ; uncomment for fastest performance on Cache
"RTN","HMPD",106,0)
 ;
"RTN","HMPD",107,0)
 N I,Y,QOT S QOT=""""
"RTN","HMPD",108,0)
 S Y=$P(X,"&") F I=2:1:$L(X,"&") S Y=Y_"&amp;"_$P(X,"&",I)
"RTN","HMPD",109,0)
 S X=Y,Y=$P(X,"<") F I=2:1:$L(X,"<") S Y=Y_"&lt;"_$P(X,"<",I)
"RTN","HMPD",110,0)
 S X=Y,Y=$P(X,">") F I=2:1:$L(X,">") S Y=Y_"&gt;"_$P(X,">",I)
"RTN","HMPD",111,0)
 S X=Y,Y=$P(X,"'") F I=2:1:$L(X,"'") S Y=Y_"&apos;"_$P(X,"'",I)
"RTN","HMPD",112,0)
 S X=Y,Y=$P(X,QOT) F I=2:1:$L(X,QOT) S Y=Y_"&quot;"_$P(X,QOT,I)
"RTN","HMPD",113,0)
 Q Y
"RTN","HMPD",114,0)
 ;
"RTN","HMPD",115,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPD",116,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPD",117,0)
 S @HMP@(HMPI)=X
"RTN","HMPD",118,0)
 Q
"RTN","HMPD",119,0)
 ;
"RTN","HMPD",120,0)
STRING(ARRAY) ; -- Return text in ARRAY(n) or ARRAY(n,0) as a string
"RTN","HMPD",121,0)
 N I,X,Y S Y=""
"RTN","HMPD",122,0)
 S I=+$O(ARRAY("")) I I=0 S I=+$O(ARRAY(0))
"RTN","HMPD",123,0)
 S Y=$S($D(ARRAY(I,0)):ARRAY(I,0),1:$G(ARRAY(I)))
"RTN","HMPD",124,0)
 F  S I=$O(ARRAY(I)) Q:I<1  D
"RTN","HMPD",125,0)
 . S X=$S($D(ARRAY(I,0)):ARRAY(I,0),1:ARRAY(I))
"RTN","HMPD",126,0)
 . I $E(X)=" " S Y=Y_$C(13,10)_X Q
"RTN","HMPD",127,0)
 . S Y=Y_$S($E(Y,$L(Y))=" ":"",1:" ")_X
"RTN","HMPD",128,0)
 Q Y
"RTN","HMPD",129,0)
 ;
"RTN","HMPD",130,0)
FAC(X) ; -- return Institution file station# for location X
"RTN","HMPD",131,0)
 N HLOC,FAC,Y0,Y S Y=""
"RTN","HMPD",132,0)
 S HLOC=$G(^SC(+$G(X),0)),FAC=$P(HLOC,U,4) ;ICR 10040 DE2818 ASF 11/5/15
"RTN","HMPD",133,0)
 ; Get P:4 via Med Ctr Div, if not directly linked
"RTN","HMPD",134,0)
 I 'FAC,$P(HLOC,U,15) S FAC=$$GET1^DIQ(44,+$G(X)_",","3.5:.07","I")
"RTN","HMPD",135,0)
 S Y0=$S(FAC:$$NS^XUAF4(FAC),1:$P($$SITE^VASITE,U,2,3)) ;name^stn#
"RTN","HMPD",136,0)
 S:$L(Y0) Y=$P(Y0,U,2)_U_$P(Y0,U) ;switch to stn#^name
"RTN","HMPD",137,0)
 I $L(Y),'Y S $P(Y,U)=FAC
"RTN","HMPD",138,0)
 Q Y
"RTN","HMPD",139,0)
 ;
"RTN","HMPD",140,0)
VUID(IEN,FILE) ; -- Return VUID for item
"RTN","HMPD",141,0)
 Q $$GET1^DIQ(FILE,IEN_",",99.99)
"RTN","HMPD",142,0)
 ;
"RTN","HMPD",143,0)
VERSION(RET) ; -- Return current version of data extracts
"RTN","HMPD",144,0)
 S RET="1.01"
"RTN","HMPD",145,0)
 Q
"RTN","HMPDCRC")
0^19^B46986534
"RTN","HMPDCRC",1,0)
HMPDCRC ;SLC/MKB,AGP,ASMR/RRB - Compute CRC32 for VistA data;7/26/13 11:09am
"RTN","HMPDCRC",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDCRC",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDCRC",4,0)
 ;
"RTN","HMPDCRC",5,0)
 ; External References          DBIA#
"RTN","HMPDCRC",6,0)
 ; -------------------          -----
"RTN","HMPDCRC",7,0)
 ; ^DPT                         10035
"RTN","HMPDCRC",8,0)
 ; %ZTLOAD                      10063
"RTN","HMPDCRC",9,0)
 ; MPIF001                       2701
"RTN","HMPDCRC",10,0)
 ; XLFCRC                        3156
"RTN","HMPDCRC",11,0)
 ; XLFDT                        10103
"RTN","HMPDCRC",12,0)
 Q
"RTN","HMPDCRC",13,0)
 ;
"RTN","HMPDCRC",14,0)
CHECK(HMPCRC,FILTER) ; -- Return CRC32 checksums of VistA data
"RTN","HMPDCRC",15,0)
 ; RPC = HMP GET CHECKSUM
"RTN","HMPDCRC",16,0)
 ; where FILTER("system")    = name of calling/client system
"RTN","HMPDCRC",17,0)
 ;       FILTER("patientId") = DFN or DFN;ICN
"RTN","HMPDCRC",18,0)
 ;       FILTER("domain")    = name of desired data type (see HMPDJ0)
"RTN","HMPDCRC",19,0)
 ;       FILTER("uid")       = single item id to return  [opt]
"RTN","HMPDCRC",20,0)
 ;       FILTER("start")     = start date.time of search [opt]
"RTN","HMPDCRC",21,0)
 ;       FILTER("stop")      = stop date.time of search  [opt]
"RTN","HMPDCRC",22,0)
 ;       FILTER("queued")    = true or false
"RTN","HMPDCRC",23,0)
 ;
"RTN","HMPDCRC",24,0)
 ; HMPCRC returns the name of the ^TMP array containing the results
"RTN","HMPDCRC",25,0)
 ;
"RTN","HMPDCRC",26,0)
 N DFN,NODE,QUEUED,SYS,HMPSYS
"RTN","HMPDCRC",27,0)
 K ^TMP("HMPDCRC",$J),HMPCRC
"RTN","HMPDCRC",28,0)
 S SYS=$G(FILTER("system")) I SYS="" Q
"RTN","HMPDCRC",29,0)
 S DFN=$G(FILTER("patientId")) I DFN="" Q
"RTN","HMPDCRC",30,0)
 S QUEUED=$G(FILTER("queued"))
"RTN","HMPDCRC",31,0)
 S NODE="HMPDCRC "_SYS_"-"_"-"_DFN
"RTN","HMPDCRC",32,0)
 S FILTER("node")=NODE
"RTN","HMPDCRC",33,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPDCRC",34,0)
 ;
"RTN","HMPDCRC",35,0)
 ; - if not queued, generate checksums and exit w/values in ^TMP
"RTN","HMPDCRC",36,0)
 I QUEUED'="true" D  Q
"RTN","HMPDCRC",37,0)
 . S ^XTMP(NODE,0)=$$FMADD^XLFDT(DT,1)_U_DT_U_"Checksum for Server "_SYS_" patient "_DFN
"RTN","HMPDCRC",38,0)
 . D EN(.FILTER)
"RTN","HMPDCRC",39,0)
 . M ^TMP("HMPDCRC",$J)=^XTMP(NODE,"data")
"RTN","HMPDCRC",40,0)
 . S HMPCRC=$NA(^TMP("HMPDCRC",$J))
"RTN","HMPDCRC",41,0)
 . K ^XTMP(NODE)
"RTN","HMPDCRC",42,0)
 ;
"RTN","HMPDCRC",43,0)
 ; - Queue job if not started, else return data if done
"RTN","HMPDCRC",44,0)
 I +$G(^XTMP(NODE,"start"))=0 D QUEUED(.FILTER,NODE,SYS,DFN) Q
"RTN","HMPDCRC",45,0)
 I +$G(^XTMP(NODE,"stop"))>0 D  K ^XTMP(NODE)
"RTN","HMPDCRC",46,0)
 . I $G(^XTMP(NODE,"error"))'=""  S HMPCRC=^XTMP(NODE,"error") Q
"RTN","HMPDCRC",47,0)
 . S HMPCRC=$NA(^TMP("HMPDCRC",$J))
"RTN","HMPDCRC",48,0)
 . M ^TMP("HMPDCRC",$J)=^XTMP(NODE,"data")
"RTN","HMPDCRC",49,0)
 Q
"RTN","HMPDCRC",50,0)
 ;
"RTN","HMPDCRC",51,0)
QUEUED(FILTER,NODE,SYS,DFN) ; -- start job to generate checksums
"RTN","HMPDCRC",52,0)
 N ZTDESC,ZTIO,ZTRTN,ZTSAVE,ZTDTH,ZTSK
"RTN","HMPDCRC",53,0)
 S ^XTMP(NODE,0)=$$FMADD^XLFDT(DT,1)_U_DT_U_"Checksum for Server "_SYS_" patient "_DFN
"RTN","HMPDCRC",54,0)
 S ZTRTN="EN1^HMPDCRC",ZTDESC="Patient Checksum Extract for "_DFN
"RTN","HMPDCRC",55,0)
 S ZTDTH=$$NOW^XLFDT(),ZTIO="",ZTSAVE("FILTER(")=""
"RTN","HMPDCRC",56,0)
 S ^XTMP(NODE,"start")=$$NOW^XLFDT()
"RTN","HMPDCRC",57,0)
 D ^%ZTLOAD I +$G(ZTSK)>0  S ^XTMP(NODE,"task")=+$G(ZTSK) Q    ;success
"RTN","HMPDCRC",58,0)
 S ^XTMP(NODE,"error")="Cannot start a task job"
"RTN","HMPDCRC",59,0)
 S ^XTMP(NODE,"stop")=$$NOW^XLFDT()
"RTN","HMPDCRC",60,0)
 S ^XTMP(NODE,"task")=ZTSK
"RTN","HMPDCRC",61,0)
 Q
"RTN","HMPDCRC",62,0)
 ;
"RTN","HMPDCRC",63,0)
EN(FILTER) ; -- Return CRC values of requested data in ^XTMP(node,"data") as JSON
"RTN","HMPDCRC",64,0)
EN1 ;           [entry point for queued job]
"RTN","HMPDCRC",65,0)
 ;
"RTN","HMPDCRC",66,0)
 N ICN,DFN,NODE,UID,HMPP,TYPE,HMPTN,CRC
"RTN","HMPDCRC",67,0)
 N HMPCRC,HMPSTART,HMPSTOP,HMPMAX,HMPI,HMPID,HMPTYPE ;for HMPDJ0
"RTN","HMPDCRC",68,0)
 K ^TMP("HMPCRC",$J),^TMP("HMPCRCF",$J)
"RTN","HMPDCRC",69,0)
 ;
"RTN","HMPDCRC",70,0)
 ; parse & validate input parameters
"RTN","HMPDCRC",71,0)
 S DFN=$G(FILTER("patientId")),HMPCRC=""
"RTN","HMPDCRC",72,0)
 S ICN=+$P($G(DFN),";",2),DFN=+$G(DFN)
"RTN","HMPDCRC",73,0)
 I DFN<1,ICN S DFN=+$$GETDFN^MPIF001(ICN)
"RTN","HMPDCRC",74,0)
 Q:DFN<1!'$D(^DPT(DFN))  ;ICR 10035 DE 2818 ASF 11/2/15
"RTN","HMPDCRC",75,0)
 S NODE=$G(FILTER("node")) I NODE="" S NODE="HMPDCRC"
"RTN","HMPDCRC",76,0)
 ;
"RTN","HMPDCRC",77,0)
 S HMPMAX=9999,HMPI=0                                ;for HMPDJ0
"RTN","HMPDCRC",78,0)
 S HMPSTART=+$G(FILTER("start"),1410102)
"RTN","HMPDCRC",79,0)
 S HMPSTOP=+$G(FILTER("stop"),4141015)
"RTN","HMPDCRC",80,0)
 S UID=$G(FILTER("uid")),HMPTYPE=$G(FILTER("domain"))
"RTN","HMPDCRC",81,0)
 I $L(UID) S HMPTYPE=$P(UID,":",3),HMPID=$P(UID,":",6)
"RTN","HMPDCRC",82,0)
 E  S:HMPTYPE="" HMPTYPE=$$ALL
"RTN","HMPDCRC",83,0)
 ;
"RTN","HMPDCRC",84,0)
 F HMPP=1:1:$L(HMPTYPE,";") S TYPE=$P(HMPTYPE,";",HMPP) I $L(TYPE) D
"RTN","HMPDCRC",85,0)
 . S HMPTN=$$TAG^HMPDJ(TYPE)_"^HMPDJ0" Q:'$L($T(@HMPTN))
"RTN","HMPDCRC",86,0)
 . D @HMPTN
"RTN","HMPDCRC",87,0)
 ;
"RTN","HMPDCRC",88,0)
 I $L(UID) D  G ENQ ;single item
"RTN","HMPDCRC",89,0)
 . S CRC=$G(^TMP("HMPCRC",$J,HMPTYPE,UID))
"RTN","HMPDCRC",90,0)
 . S ^XTMP(NODE,"data",1)=CRC,^XTMP(NODE,"stop")=$$NOW^XLFDT()
"RTN","HMPDCRC",91,0)
 ; generate checksum for each domain requested
"RTN","HMPDCRC",92,0)
 S TYPE="" F  S TYPE=$O(^TMP("HMPCRC",$J,TYPE)) Q:TYPE=""  D
"RTN","HMPDCRC",93,0)
 . S CRC="" D GET($NA(^TMP("HMPCRC",$J,TYPE)),.CRC)
"RTN","HMPDCRC",94,0)
 . S ^TMP("HMPCRC",$J,TYPE)=CRC
"RTN","HMPDCRC",95,0)
 I $L(HMPTYPE,";")>1 D  ;get whole-chart checksum
"RTN","HMPDCRC",96,0)
 . S CRC="" D GET($NA(^TMP("HMPCRC",$J)),.CRC)
"RTN","HMPDCRC",97,0)
 . S ^TMP("HMPCRC",$J,"patient")=CRC
"RTN","HMPDCRC",98,0)
 ;
"RTN","HMPDCRC",99,0)
ENCODE ; -- return list(s) of checksums as JSON
"RTN","HMPDCRC",100,0)
 D PREP
"RTN","HMPDCRC",101,0)
 D ENCODE^HMPJSON($NA(^TMP("HMPCRCF",$J)),$NA(^XTMP(NODE,"data")),"ERROR")
"RTN","HMPDCRC",102,0)
 S ^XTMP(NODE,"stop")=$$NOW^XLFDT()
"RTN","HMPDCRC",103,0)
 ;
"RTN","HMPDCRC",104,0)
ENQ K ^TMP("HMPCRC",$J),^TMP("HMPCRCF",$J)
"RTN","HMPDCRC",105,0)
 Q
"RTN","HMPDCRC",106,0)
 ;
"RTN","HMPDCRC",107,0)
PREP ; -- reformat ^TMP("HMPCRC",$J) for JSON utility -> ^TMP("HMPCRCF",$J)
"RTN","HMPDCRC",108,0)
 N DCNT,DOMAIN,UID,UCNT
"RTN","HMPDCRC",109,0)
 S DOMAIN="",DCNT=0
"RTN","HMPDCRC",110,0)
 F  S DOMAIN=$O(^TMP("HMPCRC",$J,DOMAIN)) Q:DOMAIN=""  D
"RTN","HMPDCRC",111,0)
 . S ^TMP("HMPCRCF",$J,DOMAIN,"crc")=^TMP("HMPCRC",$J,DOMAIN)
"RTN","HMPDCRC",112,0)
 . S UCNT=0,UID="" F  S UID=$O(^TMP("HMPCRC",$J,DOMAIN,UID)) Q:UID=""  D
"RTN","HMPDCRC",113,0)
 .. S UCNT=UCNT+1,^TMP("HMPCRCF",$J,DOMAIN,"uids",UCNT,UID)=^TMP("HMPCRC",$J,DOMAIN,UID)
"RTN","HMPDCRC",114,0)
 Q
"RTN","HMPDCRC",115,0)
 ;
"RTN","HMPDCRC",116,0)
GET(LIST,CRC) ; -- compute CRC32 value for LIST of strings
"RTN","HMPDCRC",117,0)
 N I S CRC=$G(CRC),I=""
"RTN","HMPDCRC",118,0)
 F  S I=$O(@LIST@(I)) Q:I=""  I $G(@LIST@(I))'="" S CRC=$$CRC32^XLFCRC(I_":"_@LIST@(I),CRC)
"RTN","HMPDCRC",119,0)
 Q
"RTN","HMPDCRC",120,0)
 ;
"RTN","HMPDCRC",121,0)
ONE(ARRAY,COLL) ; -- process one data item [save result in ^TMP]
"RTN","HMPDCRC",122,0)
 N LIST,UID,ATTR,CRC
"RTN","HMPDCRC",123,0)
 S LIST=$$ATTR(COLL),UID=$G(@ARRAY@("uid")) Q:UID=""
"RTN","HMPDCRC",124,0)
 S ATTR="" F  S ATTR=$O(@ARRAY@(ATTR)) Q:ATTR=""  I LIST'[(U_ATTR_U) K @ARRAY@(ATTR)
"RTN","HMPDCRC",125,0)
 D GET(ARRAY,.CRC)
"RTN","HMPDCRC",126,0)
 S ^TMP("HMPCRC",$J,COLL,UID)=CRC
"RTN","HMPDCRC",127,0)
 S HMPI=HMPI+1
"RTN","HMPDCRC",128,0)
 Q
"RTN","HMPDCRC",129,0)
 ;
"RTN","HMPDCRC",130,0)
GET1(ARRAY,COLL) ; -- process one data item [return result]
"RTN","HMPDCRC",131,0)
 N LIST,ATTR,ITEM,CRC
"RTN","HMPDCRC",132,0)
 S LIST=$$ATTR(COLL)
"RTN","HMPDCRC",133,0)
 S ATTR="" F  S ATTR=$O(@ARRAY@(ATTR)) Q:ATTR=""  I LIST[(U_ATTR_U) S ITEM(ATTR)=@ARRAY@(ATTR)
"RTN","HMPDCRC",134,0)
 D GET(ITEM,.CRC)
"RTN","HMPDCRC",135,0)
 Q CRC
"RTN","HMPDCRC",136,0)
 ;
"RTN","HMPDCRC",137,0)
ALL() ; -- return string for all types of data
"RTN","HMPDCRC",138,0)
 Q "problem;allergy;consult;vital;lab;procedure;obs;order;treatment;med;ptf;factor;immunization;exam;cpt;education;pov;skin;image;appointment;surgery;document;visit;mh"
"RTN","HMPDCRC",139,0)
 ;
"RTN","HMPDCRC",140,0)
ATTR(X) ; -- return list of attributes needed for collection X
"RTN","HMPDCRC",141,0)
 N Y S Y=""
"RTN","HMPDCRC",142,0)
 I X="vital"        S Y="^observed^typeName^result^"
"RTN","HMPDCRC",143,0)
 I X="problem"      S Y="^onset^problemText^statusName^"
"RTN","HMPDCRC",144,0)
 I X="allergy"      S Y="^entered^summary^"
"RTN","HMPDCRC",145,0)
 I X="order"        S Y="^start^name^statusName^"
"RTN","HMPDCRC",146,0)
 I X="treatment"    S Y="^start^name^statusName^"
"RTN","HMPDCRC",147,0)
 I X="med"          S Y="^overallstart^name^vaStatus^"
"RTN","HMPDCRC",148,0)
 I X="consult"      S Y="^startDate^typeName^statusName^"
"RTN","HMPDCRC",149,0)
 I X="procedure"    S Y="^dateTime^name^statusName^"
"RTN","HMPDCRC",150,0)
 I X="obs"          S Y="^observed^typeName^result^"
"RTN","HMPDCRC",151,0)
 I X="lab"          S Y="^observed^typeName^"
"RTN","HMPDCRC",152,0)
 I X="image"        S Y="^dateTime^name^statusName^"
"RTN","HMPDCRC",153,0)
 I X="surgery"      S Y="^dateTime^typeName^statusName^"
"RTN","HMPDCRC",154,0)
 I X="document"     S Y="^referenceDateTime^localTitle^statusName^"
"RTN","HMPDCRC",155,0)
 I X="mh"           S Y="^administeredDateTime^name^"
"RTN","HMPDCRC",156,0)
 I X="immunization" S Y="^administeredDateTime^name^"
"RTN","HMPDCRC",157,0)
 I X="pov"          S Y="^entered^name^"
"RTN","HMPDCRC",158,0)
 I X="skin"         S Y="^entered^name^result^"
"RTN","HMPDCRC",159,0)
 I X="exam"         S Y="^entered^name^result^"
"RTN","HMPDCRC",160,0)
 I X="cpt"          S Y="^entered^name^"
"RTN","HMPDCRC",161,0)
 I X="education"    S Y="^entered^name^result^"
"RTN","HMPDCRC",162,0)
 I X="factor"       S Y="^entered^name^"
"RTN","HMPDCRC",163,0)
 I X="appointment"  S Y="^dateTime^typeName^appointmentStatus^"
"RTN","HMPDCRC",164,0)
 I X="visit"        S Y="^dateTime^typeName^"
"RTN","HMPDCRC",165,0)
 I X="ptf"          S Y="^arrivalDateTime^icdCode^"
"RTN","HMPDCRC",166,0)
 Q Y
"RTN","HMPDCRC",167,0)
 ;
"RTN","HMPDCRC",168,0)
 ;
"RTN","HMPDCRC",169,0)
TEST(FILTER) ;
"RTN","HMPDCRC",170,0)
 N DONE,OUT
"RTN","HMPDCRC",171,0)
 S DONE=0
"RTN","HMPDCRC",172,0)
 F  D  Q:DONE=1
"RTN","HMPDCRC",173,0)
 .D CHECK(.OUT,.FILTER)
"RTN","HMPDCRC",174,0)
 .H 1 W !,$D(OUT)
"RTN","HMPDCRC",175,0)
 .I $D(OUT)>0 S DONE=1
"RTN","HMPDCRC",176,0)
 Q
"RTN","HMPDE811")
1^157
"RTN","HMPDERRH")
0^21^B2044240
"RTN","HMPDERRH",1,0)
HMPDERRH ;SLC/AGP,ASMR/RRB - HMP Error Handler;3/21/12 5:44pm
"RTN","HMPDERRH",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDERRH",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDERRH",4,0)
 ;
"RTN","HMPDERRH",5,0)
 Q
"RTN","HMPDERRH",6,0)
 ;
"RTN","HMPDERRH",7,0)
ERRHDLR ; -- save errors to return in JSON [Expects ERRPAT, ERRMSG]
"RTN","HMPDERRH",8,0)
 N ERROR S ERROR=$$EC^%ZOSV
"RTN","HMPDERRH",9,0)
 ;
"RTN","HMPDERRH",10,0)
 ;Ignore the "errors" the unwinder creates.
"RTN","HMPDERRH",11,0)
 I ERROR["ZTER" D UNWIND^%ZTER
"RTN","HMPDERRH",12,0)
 ;
"RTN","HMPDERRH",13,0)
 ;Make sure we don't loop if there is an error during processing of
"RTN","HMPDERRH",14,0)
 ;the error handler.
"RTN","HMPDERRH",15,0)
 N $ET S $ET="D ^%ZTER,UNWIND^%ZTER"
"RTN","HMPDERRH",16,0)
 ;
"RTN","HMPDERRH",17,0)
 ;Save the error then put it in the error trap, this saves the correct
"RTN","HMPDERRH",18,0)
 ;last global reference.
"RTN","HMPDERRH",19,0)
 D ^%ZTER
"RTN","HMPDERRH",20,0)
 ;
"RTN","HMPDERRH",21,0)
 N CNT,MSGCNT
"RTN","HMPDERRH",22,0)
 S CNT=+$G(^TMP($J,"HMP ERROR","# of Errors"))
"RTN","HMPDERRH",23,0)
 S CNT=CNT+1,^TMP($J,"HMP ERROR","# of Errors")=CNT
"RTN","HMPDERRH",24,0)
 S MSGCNT=+$O(^TMP($J,"HMP ERROR","ERROR MESSAGE",""))
"RTN","HMPDERRH",25,0)
 I $G(ERRPAT)>0,MSGCNT=0 S MSGCNT=MSGCNT+1,^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT)="An error occurred on patient: "_$G(ERRPAT)
"RTN","HMPDERRH",26,0)
 I $L($G(ERRMSG))>0 S MSGCNT=MSGCNT+1,^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT)=ERRMSG
"RTN","HMPDERRH",27,0)
 ;I $D(ERRARRY) D
"RTN","HMPDERRH",28,0)
 ;.S DOMCNT=$O(^TMP($J,"HMP ERROR",ERRPAT,ERRDOM,"DATA",""))+1
"RTN","HMPDERRH",29,0)
 ;.I $D(ERRARRY)>0 M ^TMP($J,"HMP ERROR",ERRPAT,ERRDOM,"DATA",DOMCNT)=ERRARRY
"RTN","HMPDERRH",30,0)
 ;if unwind I lose the entire process, which returns incomplete data to the extract return value.
"RTN","HMPDERRH",31,0)
 ;D GTQ^HMPDJ
"RTN","HMPDERRH",32,0)
 D UNWIND^%ZTER
"RTN","HMPDERRH",33,0)
 Q
"RTN","HMPDGMPL")
0^22^B28172327
"RTN","HMPDGMPL",1,0)
HMPDGMPL ;SLC/MKB,ASMR/RRB - Problem extract;8/2/11  15:29
"RTN","HMPDGMPL",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDGMPL",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDGMPL",4,0)
 ;
"RTN","HMPDGMPL",5,0)
 ; External References          DBIA#
"RTN","HMPDGMPL",6,0)
 ; -------------------          -----
"RTN","HMPDGMPL",7,0)
 ; ^AUPNPROB                     5703
"RTN","HMPDGMPL",8,0)
 ; ^DPT                         10035
"RTN","HMPDGMPL",9,0)
 ; ^VA(200                      10060
"RTN","HMPDGMPL",10,0)
 ; ^WV(790.05                    5772
"RTN","HMPDGMPL",11,0)
 ; %DT                          10003
"RTN","HMPDGMPL",12,0)
 ; DIQ                           2056
"RTN","HMPDGMPL",13,0)
 ; GMPLUTL2                      2741
"RTN","HMPDGMPL",14,0)
 ; SDUTL3                        1252
"RTN","HMPDGMPL",15,0)
 ; XLFDT                        10103
"RTN","HMPDGMPL",16,0)
 ; XUAF4                         2171
"RTN","HMPDGMPL",17,0)
 Q
"RTN","HMPDGMPL",18,0)
 ; ------------ Get problems from VistA ------------
"RTN","HMPDGMPL",19,0)
 ;
"RTN","HMPDGMPL",20,0)
EN(DFN,BEG,END,MAX,IFN) ; -- find patient's problems
"RTN","HMPDGMPL",21,0)
 N HMPSTS,HMPPROB,HMPN,HMPITM,HMPCNT,X
"RTN","HMPDGMPL",22,0)
 ;
"RTN","HMPDGMPL",23,0)
 ; get one problem
"RTN","HMPDGMPL",24,0)
 I $G(IFN)="WV" D WV(.HMPITM,1),XML(.HMPITM):$D(HMPITM) Q
"RTN","HMPDGMPL",25,0)
 I $G(IFN) D EN1(IFN,.HMPITM),XML(.HMPITM) Q
"RTN","HMPDGMPL",26,0)
 ;
"RTN","HMPDGMPL",27,0)
 ; get all patient problems
"RTN","HMPDGMPL",28,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDGMPL",29,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999),HMPCNT=0
"RTN","HMPDGMPL",30,0)
 S HMPSTS=$G(FILTER("status")) ;default = all problems
"RTN","HMPDGMPL",31,0)
 D LIST^GMPLUTL2(.HMPPROB,DFN,HMPSTS)
"RTN","HMPDGMPL",32,0)
 S HMPN=0 F  S HMPN=$O(HMPPROB(HMPN)) Q:(HMPN<1)!(HMPCNT'<MAX)  D
"RTN","HMPDGMPL",33,0)
 . S X=$P(HMPPROB(HMPN),U,5) I X,(X<BEG)!(X>END) Q  ;onset
"RTN","HMPDGMPL",34,0)
 . S X=+HMPPROB(HMPN) K HMPITM ;ien
"RTN","HMPDGMPL",35,0)
 . D EN1(X,.HMPITM),XML(.HMPITM)
"RTN","HMPDGMPL",36,0)
 . S HMPCNT=HMPCNT+1
"RTN","HMPDGMPL",37,0)
 I $P($G(^DPT(DFN,0)),U,2)="F" D WV(.HMPITM),XML(.HMPITM):$D(HMPITM) ;ICR 10035 DE2818 ASF 11/2/15
"RTN","HMPDGMPL",38,0)
 Q
"RTN","HMPDGMPL",39,0)
 ;
"RTN","HMPDGMPL",40,0)
EN1(ID,PROB) ; -- return a problem in PROB("attribute")=value
"RTN","HMPDGMPL",41,0)
 N HMPL,X,I,J K PROB
"RTN","HMPDGMPL",42,0)
 S ID=+$G(ID) Q:ID<1  ;invalid ien
"RTN","HMPDGMPL",43,0)
 D DETAIL^GMPLUTL2(ID,.HMPL) Q:'$D(HMPL)  ;doesn't exist
"RTN","HMPDGMPL",44,0)
 S PROB("id")=ID ;,PROB("lexiconID")=+X1 ;SNOMED?
"RTN","HMPDGMPL",45,0)
 S PROB("name")=$G(HMPL("NARRATIVE"))
"RTN","HMPDGMPL",46,0)
 S X=$G(HMPL("MODIFIED")) S:$L(X) PROB("updated")=$$DATE(X)
"RTN","HMPDGMPL",47,0)
 S PROB("icd")=$G(HMPL("DIAGNOSIS"))
"RTN","HMPDGMPL",48,0)
 S X=$G(HMPL("STATUS")) S:$L(X) PROB("status")=$E(X)_U_X
"RTN","HMPDGMPL",49,0)
 S X=$G(HMPL("HISTORY"))  S:$L(X) PROB("history")=$E(X)_U_X
"RTN","HMPDGMPL",50,0)
 S X=$G(HMPL("PRIORITY")) S:$L(X) PROB("acuity")=$E(X)_U_X
"RTN","HMPDGMPL",51,0)
 S X=$G(HMPL("ONSET")) S:$L(X) PROB("onset")=$$DATE(X)
"RTN","HMPDGMPL",52,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.07,"I") S:X PROB("resolved")=X
"RTN","HMPDGMPL",53,0)
 S X=$P($G(HMPL("ENTERED")),U)  S:$L(X) PROB("entered")=$$DATE(X)
"RTN","HMPDGMPL",54,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.02,"I")
"RTN","HMPDGMPL",55,0)
 S:X="P" PROB("unverified")=0,PROB("removed")=0
"RTN","HMPDGMPL",56,0)
 S:X="T" PROB("unverified")=1,PROB("removed")=0
"RTN","HMPDGMPL",57,0)
 S:X="H" PROB("unverified")=0,PROB("removed")=1
"RTN","HMPDGMPL",58,0)
 S X=$G(HMPL("SC")),X=$S(X="YES":1,X="NO":0,1:"")
"RTN","HMPDGMPL",59,0)
 S:$L(X) PROB("sc")=X I $G(HMPL("EXPOSURE")) D   ;ao^rad^pgulf^hnc^mst^cv
"RTN","HMPDGMPL",60,0)
 . S I=0 F  S I=$O(HMPL("EXPOSURE",I)) Q:I<1  D
"RTN","HMPDGMPL",61,0)
 .. S X=$G(HMPL("EXPOSURE",I))
"RTN","HMPDGMPL",62,0)
 .. S PROB("exposure",I)=$$EXP(X)
"RTN","HMPDGMPL",63,0)
 S X=$G(HMPL("PROVIDER")) S:$L(X) PROB("provider")=$$GET1^DIQ(9000011,ID_",",1.05,"I")_U_X
"RTN","HMPDGMPL",64,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.06) S:$L(X) PROB("service")=X
"RTN","HMPDGMPL",65,0)
 S X=$G(HMPL("CLINIC")) S:$L(X) PROB("location")=X
"RTN","HMPDGMPL",66,0)
 S X=+$$GET1^DIQ(9000011,ID_",",.06,"I")
"RTN","HMPDGMPL",67,0)
 S:X PROB("facility")=$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U)
"RTN","HMPDGMPL",68,0)
 I 'X S PROB("facility")=$$FAC^HMPD ;local stn#^name
"RTN","HMPDGMPL",69,0)
CMT ; comments
"RTN","HMPDGMPL",70,0)
 Q:'$G(HMPL("COMMENT"))
"RTN","HMPDGMPL",71,0)
 S I=0 F  S I=$O(HMPL("COMMENT",I)) Q:I<1  D
"RTN","HMPDGMPL",72,0)
 . S X=$G(HMPL("COMMENT",I))
"RTN","HMPDGMPL",73,0)
 . S PROB("comment",I)=$$DATE($P(X,U))_U_$P(X,U,2,3)
"RTN","HMPDGMPL",74,0)
 . ; = date ^ name of author ^ text
"RTN","HMPDGMPL",75,0)
 Q
"RTN","HMPDGMPL",76,0)
 ;
"RTN","HMPDGMPL",77,0)
WV(PROB,UPD) ; -- return a pregnancy log entry in PROB("attribute")=value
"RTN","HMPDGMPL",78,0)
 N I,X0,Y K PROB
"RTN","HMPDGMPL",79,0)
 S I=$O(^WV(790.05,"C",DFN,""),-1) Q:'I    ;last entry ICR 5772 DE2818 ASF 11/23/15
"RTN","HMPDGMPL",80,0)
 S X0=$G(^WV(790.05,I,0)),Y=0
"RTN","HMPDGMPL",81,0)
 ; status=YES, future due date (allow past 14 days)
"RTN","HMPDGMPL",82,0)
 I $P(X0,U,3),$P(X0,U,4)'<$$FMADD^XLFDT(DT,-14) S Y=1
"RTN","HMPDGMPL",83,0)
 I 'Y,'$G(UPD) Q
"RTN","HMPDGMPL",84,0)
 ; continue if pregnant, or update requested
"RTN","HMPDGMPL",85,0)
 S PROB("id")="WV",PROB("entered")=+X0
"RTN","HMPDGMPL",86,0)
 S PROB("name")="Pregnancy",PROB("icd")="V22.2"
"RTN","HMPDGMPL",87,0)
 ; PROB("problemType")=64572001            ;HITSP/Condition
"RTN","HMPDGMPL",88,0)
 S PROB("status")=$S(Y:"A^ACTIVE",1:"I^INACTIVE")
"RTN","HMPDGMPL",89,0)
 S PROB("resolved")=$P(X0,U,4)             ;due date
"RTN","HMPDGMPL",90,0)
 S PROB("provider")=$$OUTPTPR^SDUTL3(DFN)  ;primary care
"RTN","HMPDGMPL",91,0)
 S PROB("facility")=$$FAC^HMPD
"RTN","HMPDGMPL",92,0)
 Q
"RTN","HMPDGMPL",93,0)
 ;
"RTN","HMPDGMPL",94,0)
DATE(X) ; -- Return internal form of date X
"RTN","HMPDGMPL",95,0)
 N %DT,Y
"RTN","HMPDGMPL",96,0)
 S %DT="" D ^%DT S:Y<1 Y=X
"RTN","HMPDGMPL",97,0)
 Q Y
"RTN","HMPDGMPL",98,0)
 ;
"RTN","HMPDGMPL",99,0)
VA200(X) ; -- Return ien of New Person X
"RTN","HMPDGMPL",100,0)
 N Y S Y=$S($L($G(X)):+$O(^VA(200,"B",X,0)),1:"") ;ICR 10060 DE2818 ASF 11/23/15
"RTN","HMPDGMPL",101,0)
 Q Y
"RTN","HMPDGMPL",102,0)
 ;
"RTN","HMPDGMPL",103,0)
EXP(X) ; -- Return code for exposure name X
"RTN","HMPDGMPL",104,0)
 N Y S Y="",X=$E($G(X))
"RTN","HMPDGMPL",105,0)
 I X="A" S Y="AO"  ;agent orange
"RTN","HMPDGMPL",106,0)
 I X="R" S Y="IR"  ;ionizing radiation
"RTN","HMPDGMPL",107,0)
 I X="E" S Y="PG"  ;persian gulf
"RTN","HMPDGMPL",108,0)
 I X="H" S Y="HNC" ;head/neck cancer
"RTN","HMPDGMPL",109,0)
 I X="M" S Y="MST" ;military sexual trauma
"RTN","HMPDGMPL",110,0)
 I X="C" S Y="CV"  ;combat vet
"RTN","HMPDGMPL",111,0)
 I X="S" S Y="SHAD"
"RTN","HMPDGMPL",112,0)
 Q Y
"RTN","HMPDGMPL",113,0)
 ;
"RTN","HMPDGMPL",114,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDGMPL",115,0)
 ;
"RTN","HMPDGMPL",116,0)
XML(PROB) ; -- Return patient problem as XML in @HMP@(I)
"RTN","HMPDGMPL",117,0)
 N ATT,I,X,Y,P,TAG
"RTN","HMPDGMPL",118,0)
 D ADD("<problem>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDGMPL",119,0)
 S ATT="" F  S ATT=$O(PROB(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDGMPL",120,0)
 . I ATT="exposure" D  S Y="" Q
"RTN","HMPDGMPL",121,0)
 .. S Y="<exposures>" D ADD(Y)
"RTN","HMPDGMPL",122,0)
 .. S I=0 F  S I=$O(PROB(ATT,I)) Q:I<1  S X=$G(PROB(ATT,I)) S:$L(X) Y="<exposure value='"_X_"' />" D ADD(Y)
"RTN","HMPDGMPL",123,0)
 .. D ADD("</exposures>")
"RTN","HMPDGMPL",124,0)
 . I ATT="comment" D  S Y="" Q
"RTN","HMPDGMPL",125,0)
 .. D ADD("<comments>")
"RTN","HMPDGMPL",126,0)
 .. S I=0 F  S I=$O(PROB(ATT,I)) Q:I<1  S X=$G(PROB(ATT,I)) D
"RTN","HMPDGMPL",127,0)
 ... S Y="<comment id='"_I
"RTN","HMPDGMPL",128,0)
 ... S:$L($P(X,U,1)) Y=Y_"' entered='"_$P(X,U)
"RTN","HMPDGMPL",129,0)
 ... S:$L($P(X,U,2)) Y=Y_"' enteredBy='"_$$ESC^HMPD($P(X,U,2))
"RTN","HMPDGMPL",130,0)
 ... S:$L($P(X,U,3)) Y=Y_"' commentText='"_$$ESC^HMPD($P(X,U,3))
"RTN","HMPDGMPL",131,0)
 ... S Y=Y_"' />" D ADD(Y)
"RTN","HMPDGMPL",132,0)
 .. D ADD("</comments>")
"RTN","HMPDGMPL",133,0)
 . S X=$G(PROB(ATT)),Y="" Q:'$L(X)
"RTN","HMPDGMPL",134,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDGMPL",135,0)
 . I $L(X)>1 D  S Y=""
"RTN","HMPDGMPL",136,0)
 .. S Y="<"_ATT_" "
"RTN","HMPDGMPL",137,0)
 .. F P=1:1 S TAG=$P("code^name^Z",U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDGMPL",138,0)
 .. S Y=Y_"/>" D ADD(Y)
"RTN","HMPDGMPL",139,0)
 D ADD("</problem>")
"RTN","HMPDGMPL",140,0)
 Q
"RTN","HMPDGMPL",141,0)
 ;
"RTN","HMPDGMPL",142,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPDGMPL",143,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDGMPL",144,0)
 S @HMP@(HMPI)=X
"RTN","HMPDGMPL",145,0)
 Q
"RTN","HMPDGMRA")
0^23^B22211624
"RTN","HMPDGMRA",1,0)
HMPDGMRA ;SLC/MKB,ASMR/RRB - Allergy/Reaction extract;Nov 02, 2015 19:24:08
"RTN","HMPDGMRA",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDGMRA",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDGMRA",4,0)
 ;
"RTN","HMPDGMRA",5,0)
 ; External References          DBIA#
"RTN","HMPDGMRA",6,0)
 ; -------------------          -----
"RTN","HMPDGMRA",7,0)
 ; ^VA(200                      10060
"RTN","HMPDGMRA",8,0)
 ; %DT                          10003
"RTN","HMPDGMRA",9,0)
 ; GMRADPT                      10099
"RTN","HMPDGMRA",10,0)
 ; EN1^GMRAOR2                   2422
"RTN","HMPDGMRA",11,0)
 ; PSN50P41                      4531
"RTN","HMPDGMRA",12,0)
 ; PSN50P65                      4543
"RTN","HMPDGMRA",13,0)
 Q
"RTN","HMPDGMRA",14,0)
 ; ------------ Get reactions from VistA ------------
"RTN","HMPDGMRA",15,0)
 ;
"RTN","HMPDGMRA",16,0)
EN(DFN,BEG,END,MAX,IFN) ; -- find patient's allergies/reactions
"RTN","HMPDGMRA",17,0)
 N GMRA,GMRAL,HMPN,HMPITM,HMPCNT
"RTN","HMPDGMRA",18,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDGMRA",19,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999),HMPCNT=0
"RTN","HMPDGMRA",20,0)
 D EN1^GMRADPT
"RTN","HMPDGMRA",21,0)
 ;
"RTN","HMPDGMRA",22,0)
 ; get one reaction
"RTN","HMPDGMRA",23,0)
 I $G(IFN) D EN1(IFN,.HMPITM),XML(.HMPITM) Q
"RTN","HMPDGMRA",24,0)
 ;
"RTN","HMPDGMRA",25,0)
 ; get all reactions
"RTN","HMPDGMRA",26,0)
 I 'GMRAL D  Q
"RTN","HMPDGMRA",27,0)
 . S HMPITM("assessment")=$S(GMRAL=0:"nka",1:"not done")
"RTN","HMPDGMRA",28,0)
 . S HMPITM("facility")=$$FAC^HMPD ;local stn#^name
"RTN","HMPDGMRA",29,0)
 . D XML(.HMPITM)
"RTN","HMPDGMRA",30,0)
 S HMPN=0 F  S HMPN=+$O(GMRAL(HMPN)) Q:HMPN<1  D  Q:HMPCNT'<MAX
"RTN","HMPDGMRA",31,0)
 . K HMPITM D EN1(HMPN,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDGMRA",32,0)
 . D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDGMRA",33,0)
 Q
"RTN","HMPDGMRA",34,0)
 ;
"RTN","HMPDGMRA",35,0)
EN1(ID,REAC) ; -- return a reaction in REAC("attribute")=value
"RTN","HMPDGMRA",36,0)
 ;          from EN: expects GMRAL(ID)
"RTN","HMPDGMRA",37,0)
 N HMPY,GMRA,I,J,X,Y,SEV,TXT,SEV K REAC
"RTN","HMPDGMRA",38,0)
 S GMRA=$G(GMRAL(ID)) D EN1^GMRAOR2(ID,"HMPY")
"RTN","HMPDGMRA",39,0)
 S X=$P(HMPY,U,10) I $L(X) S X=$$DATE(X) Q:X<BEG  Q:X>END  S REAC("entered")=X
"RTN","HMPDGMRA",40,0)
 S REAC("facility")=$$FAC^HMPD ;local stn#^name
"RTN","HMPDGMRA",41,0)
 S REAC("id")=ID,REAC("name")=$P(HMPY,U) I $P(GMRA,U,9) D
"RTN","HMPDGMRA",42,0)
 . S X=$P(GMRA,U,9),Y=+$P(X,"(",2) I 'Y,X["PSDRUG" S Y=50
"RTN","HMPDGMRA",43,0)
 . S REAC("localCode")=X,REAC("vuid")=$$VUID^HMPD(+X,Y)
"RTN","HMPDGMRA",44,0)
 S X=$P(HMPY,U,6) S:$L(X) REAC("mechanism")=X
"RTN","HMPDGMRA",45,0)
 S X=$P(HMPY,U,5),REAC("source")=$E(X)
"RTN","HMPDGMRA",46,0)
 S REAC("type")=$S($L(GMRA):$P(GMRA,U,7),1:$$DFO($P(HMPY,U,7)))_U_$P(HMPY,U,7)
"RTN","HMPDGMRA",47,0)
 I $P(HMPY,U,4)="VERIFIED",$P(HMPY,U,9) S REAC("verified")=$P(HMPY,U,9)
"RTN","HMPDGMRA",48,0)
 S I=0,SEV="" F  S I=$O(HMPY("O",I)) Q:I<1  S X=$P(HMPY("O",I),U,2) S:X]SEV SEV=X ;find highest severity
"RTN","HMPDGMRA",49,0)
 S:$L(SEV) REAC("severity")=SEV
"RTN","HMPDGMRA",50,0)
 ; reactions
"RTN","HMPDGMRA",51,0)
 S I=0 F  S I=$O(GMRAL(ID,"S",I)) Q:I<1  D
"RTN","HMPDGMRA",52,0)
 . S X=$G(GMRAL(ID,"S",I)),Y=+$P(X,";",2)
"RTN","HMPDGMRA",53,0)
 . S REAC("reaction",I)=$P(X,";")_U_$$VUID^HMPD(Y,120.83)
"RTN","HMPDGMRA",54,0)
 ; comments
"RTN","HMPDGMRA",55,0)
 S I=0 F  S I=$O(HMPY("C",I)) Q:I<1  D
"RTN","HMPDGMRA",56,0)
 . S X=$G(HMPY("C",I)) K TXT
"RTN","HMPDGMRA",57,0)
 . S Y=$$VA200($P(X,U,3))_U_$P(X,U)
"RTN","HMPDGMRA",58,0)
 . S Y=Y_U_$S($L($P(X,U,2)):$E($P(X,U,2)),1:"E")
"RTN","HMPDGMRA",59,0)
 . S J=0 F  S J=$O(HMPY("C",I,J)) Q:J<1  S X=$G(HMPY("C",I,J,0)),TXT(J)=X
"RTN","HMPDGMRA",60,0)
 . K X S X=$$STRING^HMPD(.TXT)
"RTN","HMPDGMRA",61,0)
 . S REAC("comment",I)=Y_U_X ;ien^name^date^type^text
"RTN","HMPDGMRA",62,0)
 ; drug info
"RTN","HMPDGMRA",63,0)
 I $D(HMPY("I")) D
"RTN","HMPDGMRA",64,0)
 . N ROOT S ROOT=$$B^PSN50P41
"RTN","HMPDGMRA",65,0)
 . S I=0 F  S I=$O(HMPY("I",I)) Q:I<1  S X=$G(HMPY("I",I)) D
"RTN","HMPDGMRA",66,0)
 .. N IEN S IEN=$O(@ROOT@(X,0))
"RTN","HMPDGMRA",67,0)
 .. S REAC("drugIngredient",I)=X_U_$$VUID^HMPD(IEN,50.416)
"RTN","HMPDGMRA",68,0)
 I $D(HMPY("V")) D
"RTN","HMPDGMRA",69,0)
 . S I=0 F  S I=$O(HMPY("V",I)) Q:I<1  S X=$G(HMPY("V",I)) D
"RTN","HMPDGMRA",70,0)
 .. D C^PSN50P65("",$P(X,U,2),"PSN")
"RTN","HMPDGMRA",71,0)
 .. N IEN S IEN=+$O(^TMP($J,"PSN","C",$P(X,U),0))
"RTN","HMPDGMRA",72,0)
 .. S REAC("drugClass",I)=$P(X,U,2)_U_$$VUID^HMPD(IEN,50.605)
"RTN","HMPDGMRA",73,0)
 I GMRA="" S REAC("removed")=1 ;entered in error
"RTN","HMPDGMRA",74,0)
 Q
"RTN","HMPDGMRA",75,0)
 ;
"RTN","HMPDGMRA",76,0)
VA200(NAME) ; -- Return ien^name from #200
"RTN","HMPDGMRA",77,0)
 N Y S NAME=$G(NAME),Y="^"
"RTN","HMPDGMRA",78,0)
 I $L(NAME) S Y=+$O(^VA(200,"B",NAME,0))_U_NAME  ; IA 10060, DE2818
"RTN","HMPDGMRA",79,0)
 Q Y
"RTN","HMPDGMRA",80,0)
 ;
"RTN","HMPDGMRA",81,0)
DATE(X) ; -- Return internal form of date X
"RTN","HMPDGMRA",82,0)
 N %DT,Y
"RTN","HMPDGMRA",83,0)
 S %DT="TX" D ^%DT
"RTN","HMPDGMRA",84,0)
 Q Y
"RTN","HMPDGMRA",85,0)
 ;
"RTN","HMPDGMRA",86,0)
DFO(X) ; -- Return 'DFO' string for mechanism name(s)
"RTN","HMPDGMRA",87,0)
 N I,P,Y S Y=""
"RTN","HMPDGMRA",88,0)
 F I=1:1:$L(X,",") S P=$P(X,",",I),Y=Y_$S($E(P)=" ":$E(P,2),1:$E(P))
"RTN","HMPDGMRA",89,0)
 S:Y="" Y=$G(X)
"RTN","HMPDGMRA",90,0)
 Q Y
"RTN","HMPDGMRA",91,0)
 ;
"RTN","HMPDGMRA",92,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDGMRA",93,0)
 ;
"RTN","HMPDGMRA",94,0)
XML(REAC) ; -- Return patient reaction as XML
"RTN","HMPDGMRA",95,0)
 ;  as <element code='123' displayName='ABC' />
"RTN","HMPDGMRA",96,0)
 N ATT,X,Y,I,P,NM,TAG
"RTN","HMPDGMRA",97,0)
 D ADD("<allergy>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDGMRA",98,0)
 S ATT="" F  S ATT=$O(REAC(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDGMRA",99,0)
 . I ATT="comment" D  S Y="" Q
"RTN","HMPDGMRA",100,0)
 .. S I=0,Y="<comments>" D ADD(Y)
"RTN","HMPDGMRA",101,0)
 .. F  S I=$O(REAC(ATT,I)) Q:I<1  S X=$G(REAC(ATT,I)) D
"RTN","HMPDGMRA",102,0)
 ... S Y="<comment id='"_I
"RTN","HMPDGMRA",103,0)
 ... S:$L($P(X,U,3)) Y=Y_"' entered='"_$P(X,U,3)
"RTN","HMPDGMRA",104,0)
 ... S:$L($P(X,U,2)) Y=Y_"' enteredBy='"_$$ESC^HMPD($P(X,U,2))
"RTN","HMPDGMRA",105,0)
 ... S:$L($P(X,U,4)) Y=Y_"' commentType='"_$P(X,U,4)
"RTN","HMPDGMRA",106,0)
 ... S:$L($P(X,U,5)) Y=Y_"' commentText='"_$$ESC^HMPD($P(X,U,5))
"RTN","HMPDGMRA",107,0)
 ... S Y=Y_"' />" D ADD(Y)
"RTN","HMPDGMRA",108,0)
 .. D ADD("</comments>")
"RTN","HMPDGMRA",109,0)
 . I $O(REAC(ATT,0)) D  S Y="" Q
"RTN","HMPDGMRA",110,0)
 .. S NM=ATT_$S($E(ATT,$L(ATT))="s":"es",1:"s") D ADD("<"_NM_">")
"RTN","HMPDGMRA",111,0)
 .. S I=0 F  S I=$O(REAC(ATT,I)) Q:I<1  D
"RTN","HMPDGMRA",112,0)
 ... S X=$G(REAC(ATT,I)),Y="<"_ATT_" "
"RTN","HMPDGMRA",113,0)
 ... F P=1:1 S TAG=$P("name^vuid^severity^Z",U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDGMRA",114,0)
 ... S Y=Y_"/>" D ADD(Y)
"RTN","HMPDGMRA",115,0)
 .. D ADD("</"_NM_">")
"RTN","HMPDGMRA",116,0)
 . S X=$G(REAC(ATT)),Y="" Q:'$L(X)
"RTN","HMPDGMRA",117,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDGMRA",118,0)
 . I $L(X)>1 D  S Y=""
"RTN","HMPDGMRA",119,0)
 .. S Y="<"_ATT_" "
"RTN","HMPDGMRA",120,0)
 .. F P=1:1 S TAG=$P("code^name^Z",U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDGMRA",121,0)
 .. S Y=Y_"/>" D ADD(Y)
"RTN","HMPDGMRA",122,0)
 D ADD("</allergy>")
"RTN","HMPDGMRA",123,0)
 Q
"RTN","HMPDGMRA",124,0)
 ;
"RTN","HMPDGMRA",125,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPDGMRA",126,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDGMRA",127,0)
 S @HMP@(HMPI)=X
"RTN","HMPDGMRA",128,0)
 Q
"RTN","HMPDGMRC")
1^158
"RTN","HMPDGMV")
0^25^B43285050
"RTN","HMPDGMV",1,0)
HMPDGMV ;SLC/MKB,ASMR/RRB,ASMR/ASF - Vitals extract;8/2/11  15:29
"RTN","HMPDGMV",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDGMV",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDGMV",4,0)
 ;
"RTN","HMPDGMV",5,0)
 ; External References          DBIA#
"RTN","HMPDGMV",6,0)
 ; -------------------          -----
"RTN","HMPDGMV",7,0)
 ; ^SC                          10040
"RTN","HMPDGMV",8,0)
 ; ^VA(200                      10060
"RTN","HMPDGMV",9,0)
 ; DILFD                         2055
"RTN","HMPDGMV",10,0)
 ; GMRVUT0,^UTILITY($J,"GMRVD")  1446
"RTN","HMPDGMV",11,0)
 ; GMVGETQL                      5048
"RTN","HMPDGMV",12,0)
 ; GMVGETVT                      5047
"RTN","HMPDGMV",13,0)
 ; GMVRPCM                       5702
"RTN","HMPDGMV",14,0)
 ; GMVUTL                        5046
"RTN","HMPDGMV",15,0)
 Q
"RTN","HMPDGMV",16,0)
 ; ------------ Get vitals from VistA ------------
"RTN","HMPDGMV",17,0)
 ;
"RTN","HMPDGMV",18,0)
EN(DFN,BEG,END,MAX,IFN) ; -- find patient's vitals
"RTN","HMPDGMV",19,0)
 N HMPITM,HMPPARAM,GMRVSTR,IDT,TYPE,VIT,CNT,X0,X,Y,I,N
"RTN","HMPDGMV",20,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDGMV",21,0)
 ;
"RTN","HMPDGMV",22,0)
 ; get one measurement
"RTN","HMPDGMV",23,0)
 I $G(IFN),IFN?7N1"."1.6N S (BEG,END)=IFN K IFN
"RTN","HMPDGMV",24,0)
 I $G(IFN) D EN1(IFN,.HMPITM),XML(.HMPITM) Q
"RTN","HMPDGMV",25,0)
 ;
"RTN","HMPDGMV",26,0)
 ; get all measurements
"RTN","HMPDGMV",27,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDGMV",28,0)
 S GMRVSTR="BP;T;R;P;HT;WT;CVP;CG;PO2;PN",GMRVSTR(0)=BEG_U_END_U_MAX_"^1"
"RTN","HMPDGMV",29,0)
 K ^UTILITY($J,"GMRVD") D EN1^GMRVUT0
"RTN","HMPDGMV",30,0)
 S (IDT,CNT)=0 F  S IDT=$O(^UTILITY($J,"GMRVD",IDT)) Q:IDT<1  D  Q:CNT'<MAX
"RTN","HMPDGMV",31,0)
 . K VIT S VIT("taken")=9999999-IDT,CNT=CNT+1,N=0
"RTN","HMPDGMV",32,0)
 . S TYPE="" F  S TYPE=$O(^UTILITY($J,"GMRVD",IDT,TYPE)) Q:TYPE=""  D
"RTN","HMPDGMV",33,0)
 .. N NAME,VUID,RESULT,UNIT,MRES,MUNT,HIGH,LOW,QUAL
"RTN","HMPDGMV",34,0)
 .. S IFN=+$O(^UTILITY($J,"GMRVD",IDT,TYPE,0)),X0=$G(^(IFN))
"RTN","HMPDGMV",35,0)
 .. S X=+$P(X0,U,3),NAME=$$FIELD^GMVGETVT(X,1)
"RTN","HMPDGMV",36,0)
 .. S VUID=$$FIELD^GMVGETVT(X,4),RESULT=$P(X0,U,8),UNIT=$$UNIT(TYPE)
"RTN","HMPDGMV",37,0)
 .. S (MRES,MUNT)="" I $L($P(X0,U,13)) D
"RTN","HMPDGMV",38,0)
 ... S X=$S(TYPE="T":"C",TYPE="HT":"cm",TYPE="WT":"kg",TYPE="CG":"cm",1:"")
"RTN","HMPDGMV",39,0)
 ... S MRES=$P(X0,U,13) S:$L(X) MUNT=X
"RTN","HMPDGMV",40,0)
 .. S X=$$RANGE(TYPE),(HIGH,LOW)="" I $L(X) S HIGH=$P(X,U),LOW=$P(X,U,2)
"RTN","HMPDGMV",41,0)
 .. S N=N+1,VIT("measurement",N)=IFN_U_VUID_U_NAME_U_RESULT_U_UNIT_U_MRES_U_MUNT_U_HIGH_U_LOW
"RTN","HMPDGMV",42,0)
 .. S QUAL=$P(X0,U,17) I $L(QUAL) F I=1:1:$L(QUAL,";") D
"RTN","HMPDGMV",43,0)
 ... S X=$P(QUAL,";",I),Y=$$GETIEN^GMVGETQL(X,1)
"RTN","HMPDGMV",44,0)
 ... I Y S VIT("measurement",N,"qualifier",I)=X_U_$$FIELD^GMVGETQL(Y,3)
"RTN","HMPDGMV",45,0)
 . S VIT("entered")=$P($G(X0),U,4) ;use last one
"RTN","HMPDGMV",46,0)
 . S X=+$P($G(X0),U,5) S:X VIT("location")=$$LOC(X)
"RTN","HMPDGMV",47,0)
 . S VIT("facility")=$$FAC^HMPD(X)
"RTN","HMPDGMV",48,0)
 . D XML(.VIT)
"RTN","HMPDGMV",49,0)
 K ^UTILITY($J,"GMRVD")
"RTN","HMPDGMV",50,0)
 Q
"RTN","HMPDGMV",51,0)
 ;
"RTN","HMPDGMV",52,0)
EN1(ID,VIT) ; -- return a vital/measurement in VIT("attribute")
"RTN","HMPDGMV",53,0)
 K VIT S ID=+$G(ID) Q:ID<1  ;invalid ien
"RTN","HMPDGMV",54,0)
 N HMPY,X0,DFN,TYPE,X,Y,NAME,VUID,RESULT,UNIT,MRES,MUNT,HIGH,LOW,I
"RTN","HMPDGMV",55,0)
 D GETREC^GMVUTL(.HMPY,ID,1) S X0=$G(HMPY(0))
"RTN","HMPDGMV",56,0)
 S DFN=+$P(X0,U,2) Q:DFN<1
"RTN","HMPDGMV",57,0)
 S TYPE=$$FIELD^GMVGETVT(+$P(X0,U,3),2)
"RTN","HMPDGMV",58,0)
 S X=+$P(X0,U,5),VIT("location")=$$LOC(X)
"RTN","HMPDGMV",59,0)
 S VIT("facility")=$$FAC^HMPD(X)
"RTN","HMPDGMV",60,0)
 S NAME=$$FIELD^GMVGETVT($P(X0,U,3),1),VUID=$$FIELD^GMVGETVT($P(X0,U,3),4)
"RTN","HMPDGMV",61,0)
 S X=$P(X0,U,8),RESULT=X,UNIT=$$UNIT(TYPE),(MRES,MUNT)=""
"RTN","HMPDGMV",62,0)
 I TYPE="T"  S MUNT="C",MRES=$J(X-32*5/9,0,1) ;EN1^GMRVUTL
"RTN","HMPDGMV",63,0)
 I TYPE="HT" S MUNT="cm",MRES=$J(2.54*X,0,2)  ;EN2^GMRVUTL
"RTN","HMPDGMV",64,0)
 I TYPE="WT" S MUNT="kg",MRES=$J(X/2.2,0,2)   ;EN3^GMRVUTL
"RTN","HMPDGMV",65,0)
 I TYPE="CG" S MUNT="cm",MRES=$J(2.54*X,0,2)
"RTN","HMPDGMV",66,0)
 S VIT("taken")=+X0,VIT("entered")=+$P(X0,U,4),(HIGH,LOW)=""
"RTN","HMPDGMV",67,0)
 S X=$$RANGE(TYPE) I $L(X) S HIGH=$P(X,U),LOW=$P(X,U,2)
"RTN","HMPDGMV",68,0)
 S VIT("measurement",1)=ID_U_VUID_U_NAME_U_RESULT_U_UNIT_U_MRES_U_MUNT_U_HIGH_U_LOW
"RTN","HMPDGMV",69,0)
 F I=1:1:$L(HMPY(5),U) S X=$P(HMPY(5),U,I),VIT("measurement",1,"qualifier",I)=$$FIELD^GMVGETQL(X,1)_U_$$FIELD^GMVGETQL(X,3) ;name^VUID
"RTN","HMPDGMV",70,0)
 I $G(HMPY(2)) D  ;entered in error/reasons
"RTN","HMPDGMV",71,0)
 . S X=$P(HMPY(2),U,3)
"RTN","HMPDGMV",72,0)
 . F I=1:1:$L(X,"~") S VIT("removed",I)=$$EXTERNAL^DILFD(120.506,.01,,$P(X,"~",I))
"RTN","HMPDGMV",73,0)
 Q
"RTN","HMPDGMV",74,0)
 ;
"RTN","HMPDGMV",75,0)
UNIT(X) ; -- Return unit for vital type X
"RTN","HMPDGMV",76,0)
 N Y S Y=""
"RTN","HMPDGMV",77,0)
 I TYPE="BP"  S Y="mm[Hg]"
"RTN","HMPDGMV",78,0)
 I TYPE="T"   S Y="F"
"RTN","HMPDGMV",79,0)
 I TYPE="R"   S Y="/min"
"RTN","HMPDGMV",80,0)
 I TYPE="P"   S Y="/min"
"RTN","HMPDGMV",81,0)
 I TYPE="HT"  S Y="in"
"RTN","HMPDGMV",82,0)
 I TYPE="WT"  S Y="lb"
"RTN","HMPDGMV",83,0)
 I TYPE="CVP" S Y="cmH2O"
"RTN","HMPDGMV",84,0)
 I TYPE="CG"  S Y="in"
"RTN","HMPDGMV",85,0)
 I TYPE="PO2" S Y="%"
"RTN","HMPDGMV",86,0)
 Q Y
"RTN","HMPDGMV",87,0)
 ;
"RTN","HMPDGMV",88,0)
USER(X) ; -- Return ien^name for person# X
"RTN","HMPDGMV",89,0)
 N Y S X=+$G(X)
"RTN","HMPDGMV",90,0)
 S Y=$S(X:X_U_$P($G(^VA(200,X,0)),U),1:"^") ; IA 10060, DE2818 ASF 11/4/15
"RTN","HMPDGMV",91,0)
 Q Y
"RTN","HMPDGMV",92,0)
 ;
"RTN","HMPDGMV",93,0)
LOC(X) ; -- Return ien^name for hospital location X
"RTN","HMPDGMV",94,0)
 N Y S X=+$G(X)
"RTN","HMPDGMV",95,0)
 ; DE2818 begin change ASF 11/4/15
"RTN","HMPDGMV",96,0)
 ;S Y=$S(X:X_U_$P($G(^SC(X,0)),U),1:"^")
"RTN","HMPDGMV",97,0)
 N DA,DIC,DIQ,DR,R  ; FileMan variables
"RTN","HMPDGMV",98,0)
 S DIC=44,DR=.01,DA=X,DIQ="R"
"RTN","HMPDGMV",99,0)
 D EN^DIQ1
"RTN","HMPDGMV",100,0)
 S Y="^"
"RTN","HMPDGMV",101,0)
 S:$D(R(44,DA,.01)) Y=DA_U_R(44,DA,.01)
"RTN","HMPDGMV",102,0)
 ; DE2818 end change
"RTN","HMPDGMV",103,0)
 Q Y
"RTN","HMPDGMV",104,0)
 ;
"RTN","HMPDGMV",105,0)
RANGE(TYPE) ; -- return high^low range of values for TYPE
"RTN","HMPDGMV",106,0)
 N Y I '$D(HMPPARAM(TYPE)) D  ;get parameter values
"RTN","HMPDGMV",107,0)
 . N HMPFLDS,HMPI,HMPY,HMPN,HMPX,X
"RTN","HMPDGMV",108,0)
 . S HMPFLDS=$S(TYPE="T":"5.1^5.2",TYPE="P":"5.3^5.4",TYPE="R":"5.5^5.6",TYPE="CVP":"6.1^6.2",TYPE="PO2":6.3,TYPE="BP":"5.7^5.71^5.8^5.81",1:"") Q:HMPFLDS=""
"RTN","HMPDGMV",109,0)
 . F HMPI=1:1:$L(HMPFLDS,U) S HMPN=$P(HMPFLDS,U,HMPI) D RPC^GMVRPCM(.HMPY,"GETHILO",HMPN) S HMPX(HMPN)=$G(@HMPY@(0))
"RTN","HMPDGMV",110,0)
 . I TYPE="T" S HMPPARAM(TYPE)=$G(HMPX(5.1))_U_$G(HMPX(5.2))
"RTN","HMPDGMV",111,0)
 . I TYPE="P" S HMPPARAM(TYPE)=$G(HMPX(5.3))_U_$G(HMPX(5.4))
"RTN","HMPDGMV",112,0)
 . I TYPE="R" S HMPPARAM(TYPE)=$G(HMPX(5.5))_U_$G(HMPX(5.6))
"RTN","HMPDGMV",113,0)
 . I TYPE="CVP" S HMPPARAM(TYPE)=$G(HMPX(6.1))_U_$G(HMPX(6.2))
"RTN","HMPDGMV",114,0)
 . I TYPE="PO2" S HMPPARAM(TYPE)="100^"_$G(HMPX(6.3))
"RTN","HMPDGMV",115,0)
 . I TYPE="BP" S HMPPARAM(TYPE)=$G(HMPX(5.7))_"/"_$G(HMPX(5.71))_U_$G(HMPX(5.8))_"/"_$G(HMPX(5.81))
"RTN","HMPDGMV",116,0)
 S Y=$G(HMPPARAM(TYPE))
"RTN","HMPDGMV",117,0)
 Q Y
"RTN","HMPDGMV",118,0)
 ;
"RTN","HMPDGMV",119,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDGMV",120,0)
 ;
"RTN","HMPDGMV",121,0)
NAME(X) ; -- Return name of measurement type X for XML element
"RTN","HMPDGMV",122,0)
 N Y S X=$G(X),Y=""
"RTN","HMPDGMV",123,0)
 S Y=$S(X="BP":"bloodPressure",X="T":"temperature",X="R":"respiration",X="P":"pulse",X="HT":"height",X="WT":"weight",X="CVP":"centralVenousPressure",X="CG":"circumferenceGirth",X="PO2":"pulseOximetry",X="PN":"pain",1:"")
"RTN","HMPDGMV",124,0)
 Q Y
"RTN","HMPDGMV",125,0)
 ;
"RTN","HMPDGMV",126,0)
XML(VIT) ; -- Return vital measurement as XML in @HMP@(#)
"RTN","HMPDGMV",127,0)
 N ATT,X,Y,I,J,P,NAMES,TAG
"RTN","HMPDGMV",128,0)
 D ADD("<vital>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDGMV",129,0)
 S ATT="" F  S ATT=$O(VIT(ATT)) Q:ATT=""  D
"RTN","HMPDGMV",130,0)
 . I ATT="measurement" D  Q
"RTN","HMPDGMV",131,0)
 .. D ADD("<measurements>")
"RTN","HMPDGMV",132,0)
 .. S NAMES="id^vuid^name^value^units^metricValue^metricUnits^high^low^Z"
"RTN","HMPDGMV",133,0)
 .. S I=0 F  S I=$O(VIT(ATT,I)) Q:I<1  D
"RTN","HMPDGMV",134,0)
 ... S X=$G(VIT(ATT,I)),Y="<"_ATT_" "
"RTN","HMPDGMV",135,0)
 ... F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDGMV",136,0)
 ... I '$D(VIT(ATT,I,"qualifier")) S Y=Y_"/>" D ADD(Y) Q
"RTN","HMPDGMV",137,0)
 ... S Y=Y_">" D ADD(Y),ADD("<qualifiers>")
"RTN","HMPDGMV",138,0)
 ... S J=0 F  S J=$O(VIT(ATT,I,"qualifier",J)) Q:J<1  D
"RTN","HMPDGMV",139,0)
 .... S Y="<qualifier ",X=$G(VIT(ATT,I,"qualifier",J))
"RTN","HMPDGMV",140,0)
 .... F P=1:1 S TAG=$P("name^vuid^Z",U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDGMV",141,0)
 .... S Y=Y_"/>" D ADD(Y)
"RTN","HMPDGMV",142,0)
 ... D ADD("</qualifiers>"),ADD("</measurement>")
"RTN","HMPDGMV",143,0)
 .. D ADD("</measurements>")
"RTN","HMPDGMV",144,0)
 . I ATT="removed" D  Q
"RTN","HMPDGMV",145,0)
 .. D ADD("<removed>")
"RTN","HMPDGMV",146,0)
 .. S I=0 F  S I=$O(VIT(ATT,I)) Q:I<1  S Y="<reason value='"_$G(VIT(ATT,I))_"' />" D ADD(Y)
"RTN","HMPDGMV",147,0)
 .. D ADD("</removed>")
"RTN","HMPDGMV",148,0)
 . S X=$G(VIT(ATT)),Y="" Q:'$L(X)
"RTN","HMPDGMV",149,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" D ADD(Y) Q
"RTN","HMPDGMV",150,0)
 . I $L(X)>1 D
"RTN","HMPDGMV",151,0)
 .. S Y="<"_ATT_" "
"RTN","HMPDGMV",152,0)
 .. F P=1:1 S TAG=$P("code^name^Z",U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDGMV",153,0)
 .. S Y=Y_"/>" D ADD(Y)
"RTN","HMPDGMV",154,0)
 D ADD("</vital>")
"RTN","HMPDGMV",155,0)
 Q
"RTN","HMPDGMV",156,0)
 ;
"RTN","HMPDGMV",157,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPDGMV",158,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDGMV",159,0)
 S @HMP@(HMPI)=X
"RTN","HMPDGMV",160,0)
 Q
"RTN","HMPDGPF")
1^159
"RTN","HMPDIB")
1^160
"RTN","HMPDJ")
0^28^B36572187
"RTN","HMPDJ",1,0)
HMPDJ ;SLC/MKB,ASMR/RRB -- Serve VistA data as JSON via RPC;Oct 15, 2015 18:39:51
"RTN","HMPDJ",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ",4,0)
 ;
"RTN","HMPDJ",5,0)
 ; External References          DBIA#
"RTN","HMPDJ",6,0)
 ; -------------------          -----
"RTN","HMPDJ",7,0)
 ; ^DPT                         10035
"RTN","HMPDJ",8,0)
 ; MPIF001                       2701
"RTN","HMPDJ",9,0)
 ; XLFDT                        10103
"RTN","HMPDJ",10,0)
 ; XLFSTR                       10104
"RTN","HMPDJ",11,0)
 ; XUPARAM                       2541
"RTN","HMPDJ",12,0)
 ;
"RTN","HMPDJ",13,0)
 ; DE2818/RRB - SQA findings 1st 3 lines of code.
"RTN","HMPDJ",14,0)
 ;
"RTN","HMPDJ",15,0)
 Q
"RTN","HMPDJ",16,0)
GET(HMP,FILTER) ; -- Return search results as JSON in @HMP@(n)
"RTN","HMPDJ",17,0)
 ; RPC = HMP GET PATIENT DATA JSON
"RTN","HMPDJ",18,0)
 ; where FILTER("patientId") = DFN or DFN;ICN
"RTN","HMPDJ",19,0)
 ;       FILTER("domain")    = name of desired data type  (see HMPDJ0)
"RTN","HMPDJ",20,0)
 ;       FILTER("text")      = boolean, to include document text [opt]
"RTN","HMPDJ",21,0)
 ;       FILTER("start")     = start date.time of search         [opt]
"RTN","HMPDJ",22,0)
 ;       FILTER("stop")      = stop date.time of search          [opt]
"RTN","HMPDJ",23,0)
 ;       FILTER("max")       = maximum number of items to return [opt]
"RTN","HMPDJ",24,0)
 ;       FILTER("id")        = single item id to return          [opt]
"RTN","HMPDJ",25,0)
 ;       FILTER("uid")       = single record uid to return       [opt]
"RTN","HMPDJ",26,0)
 ;       FILTER("noHead")    = flag, to omit header and commas   [opt]
"RTN","HMPDJ",27,0)
 ;
"RTN","HMPDJ",28,0)
 N ICN,DFN,HMPI,HMPSYS,HMPTYPE,HMPSTART,HMPSTOP,HMPMAX,HMPID,HMPTEXT,HMPP,TYPE,HMPTN,HMPERR
"RTN","HMPDJ",29,0)
 S HMP=$NA(^TMP("HMP",$J)),HMPI=0 K @HMP
"RTN","HMPDJ",30,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPDJ",31,0)
 S DT=$$DT^XLFDT             ;for crossing midnight boundary
"RTN","HMPDJ",32,0)
 ;
"RTN","HMPDJ",33,0)
 ; parse & validate input parameters
"RTN","HMPDJ",34,0)
 I $G(FILTER("uid"))'="" D SEPUID(.FILTER)
"RTN","HMPDJ",35,0)
 ;
"RTN","HMPDJ",36,0)
 S DFN=$G(FILTER("patientId"))
"RTN","HMPDJ",37,0)
 ;
"RTN","HMPDJ",38,0)
 S ICN=+$P($G(DFN),";",2),DFN=+$G(DFN)
"RTN","HMPDJ",39,0)
 I DFN<1,ICN S DFN=+$$GETDFN^MPIF001(ICN)
"RTN","HMPDJ",40,0)
 ;
"RTN","HMPDJ",41,0)
 S HMPTYPE=$G(FILTER("domain")) S:HMPTYPE="" HMPTYPE=$$ALL
"RTN","HMPDJ",42,0)
 I $D(ZTQUEUED) S HMP=$NA(^XTMP(HMPBATCH,HMPFZTSK,HMPTYPE)) K @HMP
"RTN","HMPDJ",43,0)
 I HMPTYPE'="new",DFN<1!'$D(^DPT(DFN)) S HMPERR=$$ERR(1,DFN) G GTQ ;ICR 10035 DE2818 ASF 11/2/15
"RTN","HMPDJ",44,0)
 ;
"RTN","HMPDJ",45,0)
 ; -- initialize chunking if from DOMPT^HMPDJFSP ; i.e. HMPCHNK defined *S68-JCH*
"RTN","HMPDJ",46,0)
 D CHNKINIT^HMPDJFSP(.HMP,.HMPI) ; *S68-JCH*
"RTN","HMPDJ",47,0)
 ;
"RTN","HMPDJ",48,0)
 S HMPSTART=+$G(FILTER("start"),1410102)
"RTN","HMPDJ",49,0)
 S HMPSTOP=+$G(FILTER("stop"),4141015)
"RTN","HMPDJ",50,0)
 S HMPMAX=+$G(FILTER("max"),999999)
"RTN","HMPDJ",51,0)
 I HMPSTART,HMPSTOP,HMPSTOP<HMPSTART D
"RTN","HMPDJ",52,0)
 . N X S X=HMPSTART,HMPSTART=HMPSTOP,HMPSTOP=X
"RTN","HMPDJ",53,0)
 I HMPSTOP,$L(HMPSTOP,".")<2 S HMPSTOP=HMPSTOP_".24"
"RTN","HMPDJ",54,0)
 ;
"RTN","HMPDJ",55,0)
 S HMPID=$G(FILTER("id"))
"RTN","HMPDJ",56,0)
 S HMPTEXT=+$G(FILTER("text"),1) ;default = true/text
"RTN","HMPDJ",57,0)
 ;
"RTN","HMPDJ",58,0)
 ;set error trap
"RTN","HMPDJ",59,0)
 K ^TMP($J,"HMP ERROR")
"RTN","HMPDJ",60,0)
 ;
"RTN","HMPDJ",61,0)
 ; extract data
"RTN","HMPDJ",62,0)
 I HMPTYPE="new",$L($T(EN^HMPDJX)),'$G(^XTMP("HMP-off","GET")) D EN^HMPDJX(HMPID,HMPMAX) Q  ;data updates
"RTN","HMPDJ",63,0)
 F HMPP=1:1:$L(HMPTYPE,";") S TYPE=$P(HMPTYPE,";",HMPP) I $L(TYPE) D
"RTN","HMPDJ",64,0)
 . S HMPTN=$$TAG(TYPE)_"^HMPDJ0" Q:'$L($T(@HMPTN))  ;D ERR(2) Q
"RTN","HMPDJ",65,0)
 . N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ",66,0)
 . S $ET="D ERRHDLR^HMPDERRH",ERRMSG="A problem occurred when trying to load patient data from an API."
"RTN","HMPDJ",67,0)
 . D @HMPTN
"RTN","HMPDJ",68,0)
 ;
"RTN","HMPDJ",69,0)
GTQ ; add item count and terminating characters
"RTN","HMPDJ",70,0)
 N ERROR I $D(^TMP($J,"HMP ERROR"))>0 D BUILDERR(.ERROR)
"RTN","HMPDJ",71,0)
 I +$G(FILTER("noHead"))=1 D  Q
"RTN","HMPDJ",72,0)
 .S @HMP@("total")=+$G(HMPI)
"RTN","HMPDJ",73,0)
 .I $L($G(ERROR(1)))>1 S @HMP@("error")=ERROR(1)
"RTN","HMPDJ",74,0)
 S @HMP@(.5)="{""apiVersion"":""1.01"",""params"":{"_$$SYS_"},"
"RTN","HMPDJ",75,0)
 I $D(HMPERR) S @HMP@(1)="""error"":{""message"":"""_HMPERR_"""}}" Q
"RTN","HMPDJ",76,0)
 I '$D(@HMP)!'$G(HMPI) D  Q
"RTN","HMPDJ",77,0)
 . I '$D(ERROR) S @HMP@(1)="""data"":{""totalItems"":0,""items"":[]}}" Q
"RTN","HMPDJ",78,0)
 . S @HMP@(1)="""data"":{""totalItems"":0,""items"":[]},"
"RTN","HMPDJ",79,0)
 . S @HMP@(2,1)=ERROR(1)_"}"
"RTN","HMPDJ",80,0)
 ;
"RTN","HMPDJ",81,0)
 S @HMP@(.6)="""data"":{""updated"":"""_$$HL7NOW_""",""totalItems"":"_HMPI_",""items"":["
"RTN","HMPDJ",82,0)
 S HMPI=HMPI+1,@HMP@(HMPI)=$S($D(ERROR):"]}",1:"]}}")
"RTN","HMPDJ",83,0)
 I $D(ERROR)>0 S HMPI=HMPI+1,@HMP@(HMPI,.3)=",",@HMP@(HMPI,1)=ERROR(1)_"}"
"RTN","HMPDJ",84,0)
 K ^TMP($J,"HMP ERROR"),^TMP("HMPTEXT",$J)
"RTN","HMPDJ",85,0)
 Q
"RTN","HMPDJ",86,0)
 ;
"RTN","HMPDJ",87,0)
SEPUID(FILTER) ; -- separate uid into FILTER pieces
"RTN","HMPDJ",88,0)
 N UID
"RTN","HMPDJ",89,0)
 S UID=$G(FILTER("uid")) K FILTER("uid") Q:UID=""
"RTN","HMPDJ",90,0)
 I $P(UID,":",4)'=HMPSYS Q
"RTN","HMPDJ",91,0)
 S FILTER("patientId")=$P(UID,":",5)
"RTN","HMPDJ",92,0)
 S FILTER("domain")=$P(UID,":",3)
"RTN","HMPDJ",93,0)
 S FILTER("id")=$P(UID,":",6)
"RTN","HMPDJ",94,0)
 Q
"RTN","HMPDJ",95,0)
 ;
"RTN","HMPDJ",96,0)
SYS() ; -- return system info for JSON header
"RTN","HMPDJ",97,0)
 Q """domain"":"""_$$KSP^XUPARAM("WHERE")_""",""systemId"":"""_HMPSYS_""""
"RTN","HMPDJ",98,0)
 ;
"RTN","HMPDJ",99,0)
BUILDERR(RESULT,DFN) ; -- build error array
"RTN","HMPDJ",100,0)
 N COUNT,MESSAGE,MSGCNT
"RTN","HMPDJ",101,0)
 S COUNT=$G(^TMP($J,"HMP ERROR","# of Errors"))
"RTN","HMPDJ",102,0)
 S MESSAGE="A mumps error occurred when extracting patient data. A total of "_COUNT_" occurred.\n\r"
"RTN","HMPDJ",103,0)
 S MSGCNT=0 F  S MSGCNT=$O(^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT)) Q:MSGCNT'>0  D
"RTN","HMPDJ",104,0)
 . S MESSAGE=MESSAGE_$G(^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT))_"\n\r"
"RTN","HMPDJ",105,0)
 S RESULT(1)="""error"":{""message"":"""_MESSAGE_"""}"
"RTN","HMPDJ",106,0)
 Q
"RTN","HMPDJ",107,0)
 ;
"RTN","HMPDJ",108,0)
TAG(X) ; -- Return linetag in HMPDJ0 routine for clinical domain X
"RTN","HMPDJ",109,0)
 N Y S X=$G(X,"Z")
"RTN","HMPDJ",110,0)
 S Y=$E($$UP^XLFSTR(X),1,8)
"RTN","HMPDJ",111,0)
 S:'$L($T(@(Y_"^HMPDJ0"))) Y="HMP"
"RTN","HMPDJ",112,0)
 Q Y
"RTN","HMPDJ",113,0)
 ;
"RTN","HMPDJ",114,0)
ALL() ; -- return string for all types of data
"RTN","HMPDJ",115,0)
 Q "patient;problem;allergy;consult;vital;lab;procedure;obs;order;treatment;med;ptf;factor;immunization;exam;cpt;education;pov;skin;image;appointment;surgery;document;visit;mh"
"RTN","HMPDJ",116,0)
 ;
"RTN","HMPDJ",117,0)
ERR(X,VAL) ; -- return error message
"RTN","HMPDJ",118,0)
 N MSG  S MSG="Error"
"RTN","HMPDJ",119,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","HMPDJ",120,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","HMPDJ",121,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","HMPDJ",122,0)
 I X=4  S MSG="Unable to create new object"
"RTN","HMPDJ",123,0)
 I X=99 S MSG="Unknown request"
"RTN","HMPDJ",124,0)
 Q MSG
"RTN","HMPDJ",125,0)
 ;
"RTN","HMPDJ",126,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","HMPDJ",127,0)
 Q $P($$FMTHL7^XLFDT($$NOW^XLFDT),"-")
"RTN","HMPDJ",128,0)
 ;
"RTN","HMPDJ",129,0)
ADD(ITEM,COLL) ; -- add ITEM to results
"RTN","HMPDJ",130,0)
 I $D(HMPCRC),$D(COLL) D ONE^HMPDCRC(ITEM,COLL) Q  ;checksum
"RTN","HMPDJ",131,0)
 ; -- add ITEM to @HMP@(HMPI) to return JSON
"RTN","HMPDJ",132,0)
 N HMPY,HMPERR
"RTN","HMPDJ",133,0)
 D ENCODE^HMPJSON(ITEM,"HMPY","HMPERR")
"RTN","HMPDJ",134,0)
 I $D(HMPERR) D  ;return ERRor instead of ITEM
"RTN","HMPDJ",135,0)
 . N HMPTMP,HMPTXT,HMPITM
"RTN","HMPDJ",136,0)
 . M HMPITM=@ITEM K HMPY
"RTN","HMPDJ",137,0)
 . S HMPTXT(1)="Problem encoding json output."
"RTN","HMPDJ",138,0)
 . D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.HMPITM)
"RTN","HMPDJ",139,0)
 . K HMPERR D ENCODE^HMPJSON("HMPTMP","HMPY","HMPERR")
"RTN","HMPDJ",140,0)
 I $D(HMPY) D
"RTN","HMPDJ",141,0)
 . S HMPI=HMPI+1
"RTN","HMPDJ",142,0)
 . I HMPI>1 S @HMP@(HMPI,.3)=","
"RTN","HMPDJ",143,0)
 . M @HMP@(HMPI)=HMPY
"RTN","HMPDJ",144,0)
 . ;
"RTN","HMPDJ",145,0)
 . ; -- chunk data if from DOMPT^HMPDJFSP ; i.e. HMPCHNK defined ; *S68-JCH*
"RTN","HMPDJ",146,0)
 . D CHNKCHK^HMPDJFSP(.HMP,.HMPI) ; *S68-JCH*
"RTN","HMPDJ",147,0)
 Q
"RTN","HMPDJ",148,0)
 ;
"RTN","HMPDJ",149,0)
TEST(DFN,TYPE,ID,TEXT,IN) ; -- test GET, write results to screen
"RTN","HMPDJ",150,0)
 N OUT,IDX S U="^"
"RTN","HMPDJ",151,0)
 S:'$D(IN("systemID")) IN("systemID")=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPDJ",152,0)
 S IN("patientId")=+$G(DFN)
"RTN","HMPDJ",153,0)
 S IN("domain")=$G(TYPE)
"RTN","HMPDJ",154,0)
 S:$D(ID) IN("id")=ID
"RTN","HMPDJ",155,0)
 S:$D(TEXT) IN("text")=TEXT
"RTN","HMPDJ",156,0)
 D GET(.OUT,.IN)
"RTN","HMPDJ",157,0)
 ;
"RTN","HMPDJ",158,0)
 S IDX=OUT
"RTN","HMPDJ",159,0)
 F  S IDX=$Q(@IDX) Q:IDX'?1"^TMP(""HMP"","1.N.E  Q:+$P(IDX,",",2)'=$J  W !,@IDX
"RTN","HMPDJ",160,0)
 Q
"RTN","HMPDJ",161,0)
 ;
"RTN","HMPDJ0")
0^29^B118417079
"RTN","HMPDJ0",1,0)
HMPDJ0 ;SLC/MKB,ASMR/RRB - Serve VistA data as JSON cont;Nov 18, 2015 14:10:42
"RTN","HMPDJ0",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ0",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ0",4,0)
 ;
"RTN","HMPDJ0",5,0)
 ; External References          DBIA#
"RTN","HMPDJ0",6,0)
 ; -------------------          -----
"RTN","HMPDJ0",7,0)
 ; ^DPT                         10035  <see HMPDJ0* for others>
"RTN","HMPDJ0",8,0)
 ;
"RTN","HMPDJ0",9,0)
 ; All tags expect DFN, HMPSTART, HMPSTOP, HMPMAX, HMPID, HMPTEXT
"RTN","HMPDJ0",10,0)
 Q
"RTN","HMPDJ0",11,0)
 ;
"RTN","HMPDJ0",12,0)
PATIENT ; -- Patient Registration
"RTN","HMPDJ0",13,0)
 D DPT1^HMPDJ00
"RTN","HMPDJ0",14,0)
 Q
"RTN","HMPDJ0",15,0)
 ;
"RTN","HMPDJ0",16,0)
PROBLEM ; -- Problem List
"RTN","HMPDJ0",17,0)
 I $G(HMPID) D GMPL1^HMPDJ02(HMPID) Q
"RTN","HMPDJ0",18,0)
 N ID,HMPSTS,HMPPROB,HMPN,X,POVLST
"RTN","HMPDJ0",19,0)
 S HMPSTS=$G(FILTER("status")) ;default = all problems
"RTN","HMPDJ0",20,0)
 D LIST^GMPLUTL2(.HMPPROB,DFN,HMPSTS)
"RTN","HMPDJ0",21,0)
 D DIAGLIST^HMPDJ02(.POVLST,DFN)
"RTN","HMPDJ0",22,0)
 S HMPN=0 F  S HMPN=$O(HMPPROB(HMPN)) Q:(HMPN<1)!(HMPI'<HMPMAX)  D
"RTN","HMPDJ0",23,0)
 . S X=$P(HMPPROB(HMPN),U,6) I X,(X<HMPSTART)!(X>HMPSTOP) Q  ;last updated
"RTN","HMPDJ0",24,0)
 . S ID=+HMPPROB(HMPN) D GMPL1^HMPDJ02(ID,.POVLST)
"RTN","HMPDJ0",25,0)
 Q
"RTN","HMPDJ0",26,0)
 ;
"RTN","HMPDJ0",27,0)
ALLERGY ; -- Allergies/Adverse Reactions
"RTN","HMPDJ0",28,0)
 N GMRAL,ID D EN1^GMRADPT
"RTN","HMPDJ0",29,0)
 ; This IF statement was disabled to prevent getting "deletes" in the
"RTN","HMPDJ0",30,0)
 ; JSON during a fetch if ALL allergies for a given patient have been marked
"RTN","HMPDJ0",31,0)
 ; as "entered in error". US6021
"RTN","HMPDJ0",32,0)
 ;I 'GMRAL Q  ;D NKA^HMPDJ02 Q
"RTN","HMPDJ0",33,0)
 I $G(HMPID) D GMRA1^HMPDJ02(HMPID) Q
"RTN","HMPDJ0",34,0)
 S ID=0 F  S ID=+$O(GMRAL(ID)) Q:ID<1  D GMRA1^HMPDJ02(ID) Q:HMPI'<HMPMAX
"RTN","HMPDJ0",35,0)
 Q
"RTN","HMPDJ0",36,0)
 ;
"RTN","HMPDJ0",37,0)
CONSULT ; -- Consult/Request Tracking
"RTN","HMPDJ0",38,0)
 N HMPN,HMPX,ID
"RTN","HMPDJ0",39,0)
 D OER^GMRCSLM1(DFN,"",HMPSTART,HMPSTOP,"")
"RTN","HMPDJ0",40,0)
 S HMPN=0 F  S HMPN=$O(^TMP("GMRCR",$J,"CS",HMPN)) Q:HMPN<1!(HMPN>HMPMAX)  S HMPX=$G(^(HMPN,0)) Q:$E(HMPX)="<"  D
"RTN","HMPDJ0",41,0)
 . I $G(HMPID),HMPID'=+HMPX Q
"RTN","HMPDJ0",42,0)
 . D GMRC1^HMPDJ03(+HMPX)
"RTN","HMPDJ0",43,0)
 K ^TMP("GMRCR",$J,"CS")
"RTN","HMPDJ0",44,0)
 Q
"RTN","HMPDJ0",45,0)
 ;
"RTN","HMPDJ0",46,0)
VITAL ; -- GMR Vital Measurements
"RTN","HMPDJ0",47,0)
 I $L($G(HMPID)) D GMV1^HMPDJ02(HMPID) Q
"RTN","HMPDJ0",48,0)
 N GMRVSTR,HMPIDT,HMPTYP,ID
"RTN","HMPDJ0",49,0)
 S GMRVSTR="BP;T;R;P;HT;WT;CVP;CG;PO2;PN"
"RTN","HMPDJ0",50,0)
 S GMRVSTR(0)=HMPSTART_U_HMPSTOP_U_HMPMAX_"^1"
"RTN","HMPDJ0",51,0)
 D EN1^GMRVUT0
"RTN","HMPDJ0",52,0)
 S HMPIDT=0 F  S HMPIDT=$O(^UTILITY($J,"GMRVD",HMPIDT)) Q:HMPIDT<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",53,0)
 . S HMPTYP="" F  S HMPTYP=$O(^UTILITY($J,"GMRVD",HMPIDT,HMPTYP)) Q:HMPTYP=""  D
"RTN","HMPDJ0",54,0)
 .. S ID=$O(^UTILITY($J,"GMRVD",HMPIDT,HMPTYP,0)) D GMV1^HMPDJ02(ID)
"RTN","HMPDJ0",55,0)
 K ^UTILITY($J,"GMRVD")
"RTN","HMPDJ0",56,0)
 Q
"RTN","HMPDJ0",57,0)
 ;
"RTN","HMPDJ0",58,0)
LAB ; -- Lab Results
"RTN","HMPDJ0",59,0)
 N LRDFN,LRID,HMPSUB,HMPIDT,HMPN,HMPP,HMPACC,BEG,END,SUB,ORPK,ID,X
"RTN","HMPDJ0",60,0)
 S LRDFN=$$LRDFN^HMPXGLAB(DFN),HMPSUB=$G(FILTER("category"))  ;DE2818, (#63) LABORATORY REFERENCE
"RTN","HMPDJ0",61,0)
 S BEG=HMPSTART,END=HMPSTOP,LRID=$G(HMPID),ORPK=""
"RTN","HMPDJ0",62,0)
 I $L(LRID) D  ;reset for LR7OR1
"RTN","HMPDJ0",63,0)
 . I LRID S ORPK=LRID,LRID=$P(LRID,";",4,99) Q:LRID=""  ;order
"RTN","HMPDJ0",64,0)
 . S HMPSUB=$P(LRID,";"),HMPIDT=+$P(LRID,";",2)
"RTN","HMPDJ0",65,0)
 . S:HMPIDT (BEG,END)=9999999-HMPIDT
"RTN","HMPDJ0",66,0)
 S SUB=HMPSUB I $L(SUB),"CH^MI"'[SUB S SUB="AP"
"RTN","HMPDJ0",67,0)
 D RR^LR7OR1(DFN,ORPK,BEG,END,SUB,,,HMPMAX)  ; ICR 2503, DE2818
"RTN","HMPDJ0",68,0)
 S HMPSUB="" F  S HMPSUB=$O(^TMP("LRRR",$J,DFN,HMPSUB)) Q:HMPSUB=""  D
"RTN","HMPDJ0",69,0)
 . S HMPIDT=0 F  S HMPIDT=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT)) Q:HMPIDT<1  I $O(^(HMPIDT,0)) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",70,0)
 .. I HMPSUB="MI"  S ID=HMPSUB_";"_HMPIDT D MI^HMPDJ06 Q
"RTN","HMPDJ0",71,0)
 .. I HMPSUB'="CH" S ID=HMPSUB_";"_HMPIDT D AP^HMPDJ06 Q
"RTN","HMPDJ0",72,0)
 .. D ACC^HMPDJ06 ;get chem accession data
"RTN","HMPDJ0",73,0)
 .. S HMPP=0 F  S HMPP=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT,HMPP)) Q:HMPP<1  S X=+$G(^(HMPP)) D
"RTN","HMPDJ0",74,0)
 ... S HMPN=$$LRDN^LRPXAPIU(X) I $L(LRID,";")>2,HMPN'=$P(LRID,";",3) Q
"RTN","HMPDJ0",75,0)
 ... S ID=HMPSUB_";"_HMPIDT_";"_HMPN D CH1^HMPDJ06
"RTN","HMPDJ0",76,0)
 K ^TMP("LRRR",$J),^TMP("LRX",$J)
"RTN","HMPDJ0",77,0)
 Q
"RTN","HMPDJ0",78,0)
 ;
"RTN","HMPDJ0",79,0)
PROCEDUR ; -- Clinical Procedures
"RTN","HMPDJ0",80,0)
 N HMPN,HMPX,BEG,END,ID
"RTN","HMPDJ0",81,0)
 S BEG=HMPSTART,END=HMPSTOP
"RTN","HMPDJ0",82,0)
 I $G(HMPID) D  ;reset dates for HMPID only
"RTN","HMPDJ0",83,0)
 . N HMPMC,IEN,FILE,X
"RTN","HMPDJ0",84,0)
 . S IEN=+HMPID,FILE=+$P(HMPID,"(",2)  Q:FILE=702  Q:'FILE
"RTN","HMPDJ0",85,0)
 . D MEDLKUP^MCARUTL3(.HMPMC,FILE,IEN)
"RTN","HMPDJ0",86,0)
 . S X=$P(HMPMC,U,6) S:X (BEG,END)=X
"RTN","HMPDJ0",87,0)
 D MDPS1^HMPDJ03(DFN,BEG,END,HMPMAX)    ;gets ^TMP("MDHSP",$J)
"RTN","HMPDJ0",88,0)
 S HMPN=0 F  S HMPN=$O(^TMP("MDHSP",$J,HMPN)) Q:HMPN<1  S HMPX=$G(^(HMPN)) D
"RTN","HMPDJ0",89,0)
 . I $G(HMPID),+HMPID'=+$P(HMPX,U,2) Q  ;update 1 procedure
"RTN","HMPDJ0",90,0)
 . D MC1^HMPDJ03($G(HMPID))             ;uses HMPX
"RTN","HMPDJ0",91,0)
 K ^TMP("MDHSP",$J)
"RTN","HMPDJ0",92,0)
 Q
"RTN","HMPDJ0",93,0)
 ;
"RTN","HMPDJ0",94,0)
OBS ; -- Clinical Observations (CLiO)
"RTN","HMPDJ0",95,0)
 N HMPCLIO,HMPN,ID,X
"RTN","HMPDJ0",96,0)
 I $L($G(HMPID)) D MDC1^HMPDJ03(HMPID) Q
"RTN","HMPDJ0",97,0)
 D QRYPT^HMPDMDC("HMPCLIO",DFN,HMPSTART,HMPSTOP) ;all [verified] observations
"RTN","HMPDJ0",98,0)
 S HMPN=0 F  S HMPN=$O(HMPCLIO(HMPN)) Q:(HMPN<1)!(HMPI'<HMPMAX)  D
"RTN","HMPDJ0",99,0)
 . S ID=$G(HMPCLIO(HMPN)) ;GUID
"RTN","HMPDJ0",100,0)
 . D MDC1^HMPDJ03(ID)
"RTN","HMPDJ0",101,0)
 Q
"RTN","HMPDJ0",102,0)
 ;
"RTN","HMPDJ0",103,0)
ORDER ; -- Order Entry
"RTN","HMPDJ0",104,0)
 N DAD,HMPN,HMPORDR,ID,ORLIST,X  ; DE2818, added HMPORDR, removed X3,X4
"RTN","HMPDJ0",105,0)
 I $G(HMPID) S ORLIST=$H D OR1^HMPDJ01(HMPID) G ORQ
"RTN","HMPDJ0",106,0)
 D EN^ORQ1(DFN_";DPT(",,6,,HMPSTART,HMPSTOP,,,,1)
"RTN","HMPDJ0",107,0)
 S HMPN=0 F  S HMPN=$O(^TMP("ORR",$J,ORLIST,HMPN)) Q:HMPN<1  S ID=$G(^(HMPN)) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",108,0)
 . Q:$D(^TMP("ORGOTIT",$J,+ID))  Q:$P(ID,";",2)>1  S ID=+ID    ;actions
"RTN","HMPDJ0",109,0)
 . ;DE2818, begin logic change
"RTN","HMPDJ0",110,0)
 . K HMPORDR D ORDINFO(.HMPORDR,ID)  ; kill it for each iteration
"RTN","HMPDJ0",111,0)
 . ;(#33) PACKAGE REFERENCE,(#5) STATUS: 13=CANCELLED, 12=DISCONTINUED/EDIT, 1=DISCONTINUED
"RTN","HMPDJ0",112,0)
 . Q:$G(HMPORDR(100,ID,5,"I"))=13  I $G(HMPORDR(100,ID,33,"I"))["P",($G(HMPORDR(100,ID,5,"I"))=12)!($G(HMPORDR(100,ID,5,"I"))=1) Q
"RTN","HMPDJ0",113,0)
 . S DAD=$G(HMPORDR(100,ID,36,"I"))  ;(#36) PARENT 
"RTN","HMPDJ0",114,0)
 . I DAD D:'$D(^TMP("ORGOTIT",$J,DAD)) OR1^HMPDJ01(DAD) Q
"RTN","HMPDJ0",115,0)
 . ;DE2818, end logic change
"RTN","HMPDJ0",116,0)
 . D OR1^HMPDJ01(ID)
"RTN","HMPDJ0",117,0)
ORQ ; end
"RTN","HMPDJ0",118,0)
 K ^TMP("ORR",$J),^TMP("ORGOTIT",$J)
"RTN","HMPDJ0",119,0)
 Q
"RTN","HMPDJ0",120,0)
 ;
"RTN","HMPDJ0",121,0)
TREATMEN ; -- Nursing Treatments (orders)
"RTN","HMPDJ0",122,0)
 N HMPN,HMPORDR,ID,ORDG,ORLIST,X  ;DE2818, added HMPORDR, removed X3,X4
"RTN","HMPDJ0",123,0)
 I $G(HMPID) S ORLIST=$H D NTX1^HMPDJ01(HMPID) G TXQ
"RTN","HMPDJ0",124,0)
 ;DE2818, ***replacement for ^ORD reference needed below***
"RTN","HMPDJ0",125,0)
 S ORDG=+$O(^ORD(100.98,"B","NTX",0))
"RTN","HMPDJ0",126,0)
 D EN^ORQ1(DFN_";DPT(",ORDG,6,,HMPSTART,HMPSTOP,,,,1)
"RTN","HMPDJ0",127,0)
 S HMPN=0 F  S HMPN=$O(^TMP("ORR",$J,ORLIST,HMPN)) Q:HMPN<1  S ID=$G(^(HMPN)) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",128,0)
 . Q:$D(^TMP("ORGOTIT",$J,+ID))  Q:$P(ID,";",2)>1  S ID=+ID  ;actions
"RTN","HMPDJ0",129,0)
 . ;DE2818, begin logic change
"RTN","HMPDJ0",130,0)
 . K HMPORDR D ORDINFO(.HMPORDR,ID)  ; kill it for each iteration
"RTN","HMPDJ0",131,0)
 . ;(#33) PACKAGE REFERENCE,(#5) STATUS: 13=CANCELLED, 12=DISCONTINUED/EDIT, 1=DISCONTINUED
"RTN","HMPDJ0",132,0)
 . Q:$G(HMPORDR(100,ID,5,"I"))=13  I $G(HMPORDR(100,ID,33,"I"))["P",($G(HMPORDR(100,ID,5,"I"))=12)!($G(HMPORDR(100,ID,5,"I"))=1) Q
"RTN","HMPDJ0",133,0)
 . ;DE2818, end logic change
"RTN","HMPDJ0",134,0)
 . D NTX1^HMPDJ01(ID)
"RTN","HMPDJ0",135,0)
TXQ ; end
"RTN","HMPDJ0",136,0)
 K ^TMP("ORR",$J),^TMP("ORGOTIT",$J)
"RTN","HMPDJ0",137,0)
 Q
"RTN","HMPDJ0",138,0)
 ;
"RTN","HMPDJ0",139,0)
MED ; -- Pharmacy
"RTN","HMPDJ0",140,0)
 ;DE2818, removed reference to ^OR(100,HMPID) below
"RTN","HMPDJ0",141,0)
 N ORDIALOG I $G(HMPID),$$GET1^DIQ(100,HMPID_",",.01)]"" D PS1^HMPDJ05(HMPID) Q  ;get 1 order
"RTN","HMPDJ0",142,0)
 N DAD,HMPN,HMPORDR,ID,ORDG,ORLIST,ORVP,TYPE  ;DE2818, added HMPORDR, removed extra ORLIST and X3,X4
"RTN","HMPDJ0",143,0)
 S TYPE=$G(FILTER("vaType")) S:$L(TYPE) TYPE=$S(TYPE="N":"NV",TYPE="V":"IV",1:TYPE)_" "
"RTN","HMPDJ0",144,0)
 ;DE2818, ***replacement for ^ORD reference needed below***
"RTN","HMPDJ0",145,0)
 S ORDG=$O(^ORD(100.98,"B",TYPE_"RX",0)),ORVP=DFN_";DPT(" ;CPC removed + 10/30/15 DE2434
"RTN","HMPDJ0",146,0)
 ;If RX group not found, and not overridden by specific type then try PHARMACY CPC 10/30/15 DE2434
"RTN","HMPDJ0",147,0)
 I ORDG="" S ORDG=0 I TYPE="" S ORDG=+$O(^ORD(100.98,"B","PHARMACY",0)) ;CPC 10/30/15 DE2434
"RTN","HMPDJ0",148,0)
 D EN^ORQ1(ORVP,ORDG,6,,HMPSTART,HMPSTOP)
"RTN","HMPDJ0",149,0)
 K ^TMP("HMPOR",$J) S HMPN=0
"RTN","HMPDJ0",150,0)
 F  S HMPN=$O(^TMP("ORR",$J,ORLIST,HMPN)) Q:HMPN<1  S ID=$G(^(HMPN)) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",151,0)
 . Q:$D(^TMP("HMPOR",$J,+ID))  Q:$P(ID,";",2)>1  S ID=+ID
"RTN","HMPDJ0",152,0)
 . ;DE2818, begin logic change
"RTN","HMPDJ0",153,0)
 . K HMPORDR D ORDINFO(.HMPORDR,ID)  ; kill it for each iteration
"RTN","HMPDJ0",154,0)
 . ;(#33) PACKAGE REFERENCE,(#5) STATUS: 13=CANCELLED, 12=DISCONTINUED/EDIT, 1=DISCONTINUED
"RTN","HMPDJ0",155,0)
 . Q:$G(HMPORDR(100,ID,5,"I"))=13  I $G(HMPORDR(100,ID,33,"I"))["P",($G(HMPORDR(100,ID,5,"I"))=12)!($G(HMPORDR(100,ID,5,"I"))=1) Q
"RTN","HMPDJ0",156,0)
 . S DAD=$G(HMPORDR(100,ID,36,"I"))  ;(#36) PARENT  
"RTN","HMPDJ0",157,0)
 . I DAD Q:$D(^TMP("HMPOR",$J,DAD))  S ID=DAD
"RTN","HMPDJ0",158,0)
 . ;DE2818, end logic change
"RTN","HMPDJ0",159,0)
 . D PS1^HMPDJ05(ID) S ^TMP("HMPOR",$J,ID)=""
"RTN","HMPDJ0",160,0)
 K ^TMP("HMPOR",$J),^TMP("ORR",$J),^TMP("ORGOTIT",$J),^TMP($J,"PSOI")
"RTN","HMPDJ0",161,0)
 Q
"RTN","HMPDJ0",162,0)
 ;
"RTN","HMPDJ0",163,0)
PTF ; -- Patient Treatment File
"RTN","HMPDJ0",164,0)
 ;Purpose - Main Patient Treatment File (PTF) RPC
"RTN","HMPDJ0",165,0)
 ;
"RTN","HMPDJ0",166,0)
 ;Called by - PTF RPC
"RTN","HMPDJ0",167,0)
 ;
"RTN","HMPDJ0",168,0)
 ;Assumptions - Expects variables DFN, HMPSTART, HMPSTOP, HMPMAX
"RTN","HMPDJ0",169,0)
 ;
"RTN","HMPDJ0",170,0)
 ;Modification History -
"RTN","HMPDJ0",171,0)
 ;US5630 (TW) - Namespaced variables and enhanced newing
"RTN","HMPDJ0",172,0)
 ;
"RTN","HMPDJ0",173,0)
 N HMPRDT,HMPX,HMPAPI,HMPLID
"RTN","HMPDJ0",174,0)
 K ^TMP("HMPPX",$J)
"RTN","HMPDJ0",175,0)
 ;
"RTN","HMPDJ0",176,0)
 I $G(HMPID),HMPID'=+HMPID D PTFA^HMPDJ04A(HMPID) Q  ; If HMPID and dx type, process and quit
"RTN","HMPDJ0",177,0)
 ;
"RTN","HMPDJ0",178,0)
 I $G(HMPID) D  Q:'$D(^TMP("HMPPX",$J))  ; If HMPID only, set one ^TMP("HMPPX") entry
"RTN","HMPDJ0",179,0)
 . S HMPRDT=9999999
"RTN","HMPDJ0",180,0)
 . D RPC^DGPTFAPI(.HMPAPI,HMPID)
"RTN","HMPDJ0",181,0)
 . S HMPX=$P($G(HMPAPI(1)),U,3)
"RTN","HMPDJ0",182,0)
 . I $L(HMPX) S ^TMP("HMPPX",$J,HMPRDT,HMPID_";70;DXLS")=HMPX_U
"RTN","HMPDJ0",183,0)
 . F HMPAPI=1:1:9 S HMPX=$P($G(HMPY(2)),U,HMPAPI) I $L(HMPX) S ^TMP("HMPPX",$J,HMPRDT,HMPID_";70;D SD"_HMPAPI)=HMPX_U_$G(DISDAT)
"RTN","HMPDJ0",184,0)
 ;
"RTN","HMPDJ0",185,0)
 I '$G(HMPID) D PTF^HMPDJ09  ; If no HMPID, set up ^TMP("HMPPX") for all dx
"RTN","HMPDJ0",186,0)
 ;
"RTN","HMPDJ0",187,0)
 ;Loop through ^TMP("HMPPX",$J) and do PTF1^HMPDJ04A to set PTF array, ^TMP
"RTN","HMPDJ0",188,0)
 S HMPRDT="" F  S HMPRDT=$O(^TMP("HMPPX",$J,HMPRDT)) Q:HMPRDT=""  D
"RTN","HMPDJ0",189,0)
 . S HMPLID="" F  S HMPLID=$O(^TMP("HMPPX",$J,HMPRDT,HMPLID)) Q:HMPLID=""!(HMPI'<HMPMAX)  D
"RTN","HMPDJ0",190,0)
 .. D PTF1^HMPDJ04A
"RTN","HMPDJ0",191,0)
 K ^TMP("HMPPX",$J)
"RTN","HMPDJ0",192,0)
 Q
"RTN","HMPDJ0",193,0)
 ;
"RTN","HMPDJ0",194,0)
FACTOR   D PX^HMPDJ09(9000010.23) Q   ; -- PCE Health Factors
"RTN","HMPDJ0",195,0)
IMMUNIZA D PX^HMPDJ09(9000010.11) Q   ; -- PCE Immunizations
"RTN","HMPDJ0",196,0)
EXAM     D PX^HMPDJ09(9000010.13) Q   ; -- PCE Exams
"RTN","HMPDJ0",197,0)
CPT      D PX^HMPDJ09(9000010.18) Q   ; -- PCE CPT
"RTN","HMPDJ0",198,0)
EDUCATIO D PX^HMPDJ09(9000010.16) Q   ; -- PCE Patient Education
"RTN","HMPDJ0",199,0)
POV      D PX^HMPDJ09(9000010.07) Q   ; -- PCE Purpose of Visit (POV)
"RTN","HMPDJ0",200,0)
SKIN     D PX^HMPDJ09(9000010.12) Q   ; -- PCE Skin Tests
"RTN","HMPDJ0",201,0)
 ;
"RTN","HMPDJ0",202,0)
IMAGE ; -- Radiology/Nuclear Medicine
"RTN","HMPDJ0",203,0)
 D EN1^RAO7PC1(DFN,HMPSTART,HMPSTOP,HMPMAX_"P")
"RTN","HMPDJ0",204,0)
 I $G(HMPID) D RA1^HMPDJ07(HMPID) G IMQ
"RTN","HMPDJ0",205,0)
 N ID S ID=""
"RTN","HMPDJ0",206,0)
 F  S ID=$O(^TMP($J,"RAE1",DFN,ID)) Q:ID=""  D RA1^HMPDJ07(ID)  Q:HMPI'<+HMPMAX
"RTN","HMPDJ0",207,0)
IMQ ; end
"RTN","HMPDJ0",208,0)
 K ^TMP($J,"RAE1")
"RTN","HMPDJ0",209,0)
 Q
"RTN","HMPDJ0",210,0)
 ;
"RTN","HMPDJ0",211,0)
APPOINTM ; -- Scheduling/Appointment Mgt
"RTN","HMPDJ0",212,0)
 N HMPX,HMPNUM,HMPDT,X,HMPA,ID
"RTN","HMPDJ0",213,0)
 S HMPX(1)=HMPSTART_";"_HMPSTOP,HMPX(4)=DFN,ID=$G(HMPID)
"RTN","HMPDJ0",214,0)
 S HMPX("FLDS")="1;2;3;6;9;10;11;13",HMPX("SORT")="P"
"RTN","HMPDJ0",215,0)
 I $L(ID) G:$E(ID)="H" DGS^HMPDJ04 D  Q
"RTN","HMPDJ0",216,0)
 . S HMPDT=$P(ID,";",2),HMPX(1)=$P(ID,";",2)_";"_$P(ID,";",2)
"RTN","HMPDJ0",217,0)
 . S HMPX(2)=$P(ID,";",3)
"RTN","HMPDJ0",218,0)
 . S HMPNUM=$$SDAPI^SDAMA301(.HMPX)
"RTN","HMPDJ0",219,0)
 . D:HMPNUM>0 SDAM1^HMPDJ04
"RTN","HMPDJ0",220,0)
 . K ^TMP($J,"SDAMA301",DFN)
"RTN","HMPDJ0",221,0)
 ; appointments
"RTN","HMPDJ0",222,0)
 S HMPX(3)="R;I;NS;NSR;NT" ;no cancelled appt's
"RTN","HMPDJ0",223,0)
 S HMPNUM=$$SDAPI^SDAMA301(.HMPX),HMPDT=0
"RTN","HMPDJ0",224,0)
 F  S HMPDT=$O(^TMP($J,"SDAMA301",DFN,HMPDT)) Q:HMPDT<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",225,0)
 . S X=$P($G(^TMP($J,"SDAMA301",DFN,HMPDT)),U,3)
"RTN","HMPDJ0",226,0)
 . ;I HMPDT<DT,$P(X,";")'["NS" Q   ;no prior kept appt's
"RTN","HMPDJ0",227,0)
 . D SDAM1^HMPDJ04
"RTN","HMPDJ0",228,0)
 K ^TMP($J,"SDAMA301",DFN)
"RTN","HMPDJ0",229,0)
 Q
"RTN","HMPDJ0",230,0)
 ;
"RTN","HMPDJ0",231,0)
SURGERY ; -- Surgery
"RTN","HMPDJ0",232,0)
 I $G(HMPID) D SR1^HMPDJ07(HMPID) Q
"RTN","HMPDJ0",233,0)
 Q:'$L($T(LIST^SROESTV))
"RTN","HMPDJ0",234,0)
 N SHOWADD S SHOWADD=1 ;to omit leading '+' with note titles
"RTN","HMPDJ0",235,0)
 N HMPN,HMPY,ID D LIST^SROESTV(.HMPY,DFN,HMPSTART,HMPSTOP,HMPMAX,1)
"RTN","HMPDJ0",236,0)
 S HMPN=0 F  S HMPN=$O(@HMPY@(HMPN)) Q:HMPN<1  D
"RTN","HMPDJ0",237,0)
 . S ID=+$G(@HMPY@(HMPN)) D:ID SR1^HMPDJ07(ID)
"RTN","HMPDJ0",238,0)
 K @HMPY
"RTN","HMPDJ0",239,0)
 Q
"RTN","HMPDJ0",240,0)
 ;
"RTN","HMPDJ0",241,0)
DOCUMENT ; -- Text Integration Utilities
"RTN","HMPDJ0",242,0)
 N HMPC,CLS,HMPS,CTXT,HMPY,HMPN,HMPX,ID
"RTN","HMPDJ0",243,0)
 I $L($G(HMPID)) D TIU1^HMPDJ08(HMPID) Q
"RTN","HMPDJ0",244,0)
 N CLASS,SUBCLASS,STATUS
"RTN","HMPDJ0",245,0)
 D SETUP^HMPDJ08 ;define search criteria
"RTN","HMPDJ0",246,0)
 F HMPC=1:1:$L(CLASS,U) S CLS=$P(CLASS,U,HMPC) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",247,0)
 . I CLS="CP" D CP^HMPDJ08A(DFN,HMPSTART,HMPSTOP,HMPMAX) Q
"RTN","HMPDJ0",248,0)
 . I CLS="RA" D RA^HMPDJ08A(DFN,HMPSTART,HMPSTOP,HMPMAX) Q
"RTN","HMPDJ0",249,0)
 . I CLS="LR" D LR^HMPDJ08A(DFN,HMPSTART,HMPSTOP,HMPMAX) Q
"RTN","HMPDJ0",250,0)
 . ; TIU document classes, by sig status
"RTN","HMPDJ0",251,0)
 . F HMPS=1:1:$L(STATUS,U) S CTXT=$P(STATUS,U,HMPS) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",252,0)
 .. ;I $L($G(HMPBATCH)) D GET^TIUHMP(.HMPY,DFN,CLS,HMPSTART,HMPSTOP) I 1 ; <<<< 12.3
"RTN","HMPDJ0",253,0)
 .. I $L($G(HMPBATCH)) D GET^TIUVPR(.HMPY,DFN,CLS,HMPSTART,HMPSTOP) I 1 ;  <<<< 12.3
"RTN","HMPDJ0",254,0)
 .. E  D CONTEXT^TIUSRVLO(.HMPY,CLS,CTXT,DFN,HMPSTART,HMPSTOP,,HMPMAX,,1)
"RTN","HMPDJ0",255,0)
 .. S HMPN=0 F  S HMPN=$O(@HMPY@(HMPN)) Q:HMPN<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",256,0)
 ... S HMPX=$G(@HMPY@(HMPN)) ;Q:'$$MATCH^HMPDJ08(HMPX,CTXT)
"RTN","HMPDJ0",257,0)
 ... Q:$D(^TMP("HMPD",$J,+HMPX))  ;already included
"RTN","HMPDJ0",258,0)
 ... D EN1^HMPDJ08(HMPX,CLS)
"RTN","HMPDJ0",259,0)
 .. K @HMPY
"RTN","HMPDJ0",260,0)
 Q
"RTN","HMPDJ0",261,0)
 ;
"RTN","HMPDJ0",262,0)
VISIT ; -- Visits
"RTN","HMPDJ0",263,0)
 I $L($G(HMPID)) D VSIT1^HMPDJ04(HMPID) Q
"RTN","HMPDJ0",264,0)
 N BEG,END,HMPADMIT,HMPDEMOG,HMPIDT,ID  ;DE2818, added HMPDEMOG
"RTN","HMPDJ0",265,0)
 D TOP^HMPXGDPT("HMPDEMOG",DFN,.105,"I")  ;DE2818, (.105) CURRENT ADMISSION
"RTN","HMPDJ0",266,0)
 S HMPADMIT=+$G(HMPDEMOG(2,DFN,.105,"I")) ;DE2818
"RTN","HMPDJ0",267,0)
 S BEG=HMPSTART,END=HMPSTOP D IDT^HMPDVSIT ;invert dates
"RTN","HMPDJ0",268,0)
 ;DE2818 ***ICR 2028 needed for ^AUPNVSIT references below***
"RTN","HMPDJ0",269,0)
 S HMPIDT=BEG F  S HMPIDT=$O(^AUPNVSIT("AA",DFN,HMPIDT)) Q:HMPIDT<1!(HMPIDT>END)  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",270,0)
 . S ID=0 F  S ID=$O(^AUPNVSIT("AA",DFN,HMPIDT,ID)) Q:ID<1  D VSIT1^HMPDJ04(ID)
"RTN","HMPDJ0",271,0)
 ; kill HMPADMIT in VSIT1 if adm is included, but add unless filtered
"RTN","HMPDJ0",272,0)
 I $G(HMPADMIT),HMPMAX'<9999,HMPSTART'>1410102 D VSIT1^HMPDJ04("H"_HMPADMIT)
"RTN","HMPDJ0",273,0)
 Q
"RTN","HMPDJ0",274,0)
 ;I HMPSTOP,HMPSTOP'["." S END=HMPSTOP_".24" ;assume end of day
"RTN","HMPDJ0",275,0)
 ;S HMPDT=END F  S HMPDT=$O(^AUPNVSIT("AET",DFN,HMPDT),-1)  Q:HMPDT<HMPSTART  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",276,0)
 ;. S HMPLOC=0 F  S HMPLOC=$O(^AUPNVSIT("AET",DFN,HMPDT,HMPLOC)) Q:HMPLOC<1  D
"RTN","HMPDJ0",277,0)
 ;.. S ID=0 F  S ID=$O(^AUPNVSIT("AET",DFN,HMPDT,HMPLOC,"P",ID)) Q:ID<1  D VSIT1^HMPDJ04(ID)
"RTN","HMPDJ0",278,0)
 ;
"RTN","HMPDJ0",279,0)
HMP ; -- HMP Patient Objects
"RTN","HMPDJ0",280,0)
 D HMP^HMPDJ02($G(TYPE))
"RTN","HMPDJ0",281,0)
 Q
"RTN","HMPDJ0",282,0)
 ;
"RTN","HMPDJ0",283,0)
MH ; -- Mental Health
"RTN","HMPDJ0",284,0)
 I $L($T(MH^HMPDJ09M)) D MH^HMPDJ09M
"RTN","HMPDJ0",285,0)
 Q
"RTN","HMPDJ0",286,0)
 ;
"RTN","HMPDJ0",287,0)
ERRQ ; -- Quit for error handling
"RTN","HMPDJ0",288,0)
 Q
"RTN","HMPDJ0",289,0)
 ;
"RTN","HMPDJ0",290,0)
 ;new subroutine for DE2818
"RTN","HMPDJ0",291,0)
ORDINFO(ORRSLT,ORIEN) ; ORDER file (#100), ORRSLT passed by reference
"RTN","HMPDJ0",292,0)
 ; all data returned in internal format
"RTN","HMPDJ0",293,0)
 ;
"RTN","HMPDJ0",294,0)
 ;   fields on ^OR(100,D0,0)
"RTN","HMPDJ0",295,0)
 ;(#.01) ORDER #
"RTN","HMPDJ0",296,0)
 ;(#.02) OBJECT OF ORDER
"RTN","HMPDJ0",297,0)
 ;
"RTN","HMPDJ0",298,0)
 ;   fields on ^OR(100,D0,3)
"RTN","HMPDJ0",299,0)
 ;(#5) STATUS
"RTN","HMPDJ0",300,0)
 ;(#7) ITEM ORDERED
"RTN","HMPDJ0",301,0)
 ;(#8) VEILED
"RTN","HMPDJ0",302,0)
 ;(#8.1) TYPE
"RTN","HMPDJ0",303,0)
 ;(#9) REPLACED ORDER
"RTN","HMPDJ0",304,0)
 ;(#9.1) REPLACEMENT ORDER
"RTN","HMPDJ0",305,0)
 ;(#30) CURRENT ACTION
"RTN","HMPDJ0",306,0)
 ;(#31) DATE OF LAST ACTIVITY
"RTN","HMPDJ0",307,0)
 ;(#32) GRACE DAYS BEFORE PURGE
"RTN","HMPDJ0",308,0)
 ;(#36) PARENT
"RTN","HMPDJ0",309,0)
 ;(#35) ALERT ON RESULTS
"RTN","HMPDJ0",310,0)
 ;
"RTN","HMPDJ0",311,0)
 ;   field on ^OR(100,D0,4)
"RTN","HMPDJ0",312,0)
 ;(#33) PACKAGE REFERENCE
"RTN","HMPDJ0",313,0)
 ;
"RTN","HMPDJ0",314,0)
 Q:'($G(ORIEN)>0)  ; IEN required
"RTN","HMPDJ0",315,0)
 D TOP^HMPXGORD("ORRSLT",ORIEN,".01;.02;5;7;8;8.1;9;9.1;30;31;32;33;35;36","I")
"RTN","HMPDJ0",316,0)
 ;
"RTN","HMPDJ0",317,0)
 Q
"RTN","HMPDJ0",318,0)
 ;end DE2818
"RTN","HMPDJ0",319,0)
 ;
"RTN","HMPDJ00")
0^30^B150294972
"RTN","HMPDJ00",1,0)
HMPDJ00 ;SLC/MKB,ASMR/RRB - Patient demographics;8/11/11  15:29
"RTN","HMPDJ00",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ00",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ00",4,0)
 ;
"RTN","HMPDJ00",5,0)
 ; External References          DBIA#
"RTN","HMPDJ00",6,0)
 ; -------------------          -----
"RTN","HMPDJ00",7,0)
 ; ^AUPNVSIT                     2028
"RTN","HMPDJ00",8,0)
 ; ^DPT                         10035
"RTN","HMPDJ00",9,0)
 ; DGACT                         2248
"RTN","HMPDJ00",10,0)
 ; DGCV                          4156
"RTN","HMPDJ00",11,0)
 ; DGMSTAPI                      2716
"RTN","HMPDJ00",12,0)
 ; DGNTAPI                       3457
"RTN","HMPDJ00",13,0)
 ; DGPFAPI                       3860
"RTN","HMPDJ00",14,0)
 ; DGRPDB                        4807
"RTN","HMPDJ00",15,0)
 ; DIQ                           2056
"RTN","HMPDJ00",16,0)
 ; IBBAPI                        4419
"RTN","HMPDJ00",17,0)
 ; MPIF001                       2701
"RTN","HMPDJ00",18,0)
 ; SDUTL3                        1252
"RTN","HMPDJ00",19,0)
 ; VADPT                        10061
"RTN","HMPDJ00",20,0)
 ; VAFCTFU1                      2990
"RTN","HMPDJ00",21,0)
 ; VASITE                       10112
"RTN","HMPDJ00",22,0)
 ; XUAF4                         2171
"RTN","HMPDJ00",23,0)
 ; SECURITY/SENSITIVE RECORD ACC 3027
"RTN","HMPDJ00",24,0)
 ;
"RTN","HMPDJ00",25,0)
 ; All tags expect DFN
"RTN","HMPDJ00",26,0)
 ; [HMPID, HMPSTART, HMPSTOP, HMPMAX, HMPTEXT not currently used here]
"RTN","HMPDJ00",27,0)
 Q
"RTN","HMPDJ00",28,0)
 ;
"RTN","HMPDJ00",29,0)
DPT1 ; -- Demographics
"RTN","HMPDJ00",30,0)
 N PAT D DPT1OD(.PAT)
"RTN","HMPDJ00",31,0)
 I $D(PAT)>9 D ADD^HMPDJ("PAT")
"RTN","HMPDJ00",32,0)
 Q
"RTN","HMPDJ00",33,0)
 ;
"RTN","HMPDJ00",34,0)
DPT1OD(PAT) ; -- Demographics (data array only)
"RTN","HMPDJ00",35,0)
 N SYS S SYS=$$SITE^VASITE
"RTN","HMPDJ00",36,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ00",37,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ00",38,0)
 S ERRMSG="A problem occurred building the patient "_DFN_" demographic extract."
"RTN","HMPDJ00",39,0)
 D DEM,SVC,PRF,ATC,SUPP,ALIAS,FAC,PC,INPT,INS
"RTN","HMPDJ00",40,0)
 D KVAR^VADPT
"RTN","HMPDJ00",41,0)
 S PAT("stampTime")=$S($G(HMPSTMP)]"":HMPSTMP,1:$$EN^HMPSTMP("NOW")) ;US6734
"RTN","HMPDJ00",42,0)
 S PAT("lastUpdateTime")=PAT("stampTime")
"RTN","HMPDJ00",43,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ00",44,0)
 I $G(HMPMETA) D ADD^HMPMETA("patient",PAT("uid"),PAT("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ00",45,0)
 Q
"RTN","HMPDJ00",46,0)
 ;
"RTN","HMPDJ00",47,0)
LKUP ; patient lookup data
"RTN","HMPDJ00",48,0)
 ; expects HMPSYS,DFN
"RTN","HMPDJ00",49,0)
 N X,X0
"RTN","HMPDJ00",50,0)
 S X0=^DPT(DFN,0),X=$P(X0,U)
"RTN","HMPDJ00",51,0)
 S PAT("fullName")=X
"RTN","HMPDJ00",52,0)
 S PAT("familyName")=$P(X,",")
"RTN","HMPDJ00",53,0)
 S PAT("givenNames")=$P(X,",",2,99)
"RTN","HMPDJ00",54,0)
 S X=$P(X0,U,2)
"RTN","HMPDJ00",55,0)
 S PAT("genderCode")="urn:va:pat-gender:"_X
"RTN","HMPDJ00",56,0)
 S PAT("genderName")=$$NAME(X,"gender")
"RTN","HMPDJ00",57,0)
 S PAT("localId")=DFN
"RTN","HMPDJ00",58,0)
 S PAT("pid")=HMPSYS_";"_DFN
"RTN","HMPDJ00",59,0)
 S PAT("uid")=$$SETUID^HMPUTILS("pt-select",DFN,DFN)
"RTN","HMPDJ00",60,0)
 S X=$$GETICN^MPIF001(DFN)
"RTN","HMPDJ00",61,0)
 S:X>0 PAT("icn")=X
"RTN","HMPDJ00",62,0)
 S PAT("ssn")=$P(X0,U,9)
"RTN","HMPDJ00",63,0)
 S PAT("birthDate")=$$JSONDT^HMPUTILS($P(X0,U,3))
"RTN","HMPDJ00",64,0)
 S X=$P($G(^DPT(DFN,.35)),U)
"RTN","HMPDJ00",65,0)
 S:X PAT("deceased")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ00",66,0)
 D PTSEC^DGSEC4(.LST,DFN)  ; DBIA 3027 DE2818 - PB 30 Oct 2015 changed to use a global reference covered by an active ICR
"RTN","HMPDJ00",67,0)
 S PAT("sensitive")=$$BOOL(LST(1))
"RTN","HMPDJ00",68,0)
 ;US6734 - pre-compile metastamp for OPD
"RTN","HMPDJ00",69,0)
 I $G(HMPMETA),$P($G(HMPFADOM),"#")="pt-select" D ADD^HMPMETA("pt-select",PAT("uid"),$G(HMPSTMP)) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ00",70,0)
 I $G(HMPSTMP)]"" S PAT("stampTime")=HMPSTMP ; US6734 - set stamptime as time of subscription
"RTN","HMPDJ00",71,0)
 E  S PAT("stampTime")=$$EN^HMPSTMP("NOW") ; DE2616 - must add stampTime to receive OPD freshness update from ADHOC^HMPUTIL1
"RTN","HMPDJ00",72,0)
 I $D(PAT)>9 D ADD^HMPDJ("PAT")
"RTN","HMPDJ00",73,0)
 Q
"RTN","HMPDJ00",74,0)
 ;
"RTN","HMPDJ00",75,0)
DEM ;-demographic data
"RTN","HMPDJ00",76,0)
 N VADM,VA,VAERR,X,I
"RTN","HMPDJ00",77,0)
 S PAT("pid")=$$PID^HMPDJFS(DFN)
"RTN","HMPDJ00",78,0)
 S X=$$GETICN^MPIF001(DFN) S:X>1 PAT("icn")=X
"RTN","HMPDJ00",79,0)
 D DEM^VADPT S X=VADM(1),PAT("fullName")=X
"RTN","HMPDJ00",80,0)
 S PAT("familyName")=$P(X,","),PAT("givenNames")=$P(X,",",2,99)
"RTN","HMPDJ00",81,0)
 S PAT("ssn")=$P(VADM(2),U),PAT("localId")=DFN
"RTN","HMPDJ00",82,0)
 S PAT("uid")=$$SETUID^HMPUTILS("patient",DFN,DFN)
"RTN","HMPDJ00",83,0)
 S:$D(VA("BID")) PAT("briefId")=$E(X)_VA("BID")
"RTN","HMPDJ00",84,0)
 S X=+$P($P(VADM(3),U),"."),PAT("birthDate")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ00",85,0)
 S X=$P(VADM(5),U) S:X="" X="UNK"
"RTN","HMPDJ00",86,0)
 S PAT("genderCode")="urn:va:pat-gender:"_X,PAT("genderName")=$$NAME(X,"gender")
"RTN","HMPDJ00",87,0)
 S X=+$P($P(VADM(6),U),".") S:X PAT("deceased")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ00",88,0)
 D PTSEC^DGSEC4(.LST,DFN)  ; DBIA 3027 DE2818 - PB 30 Oct 2015 changed to use a global reference covered by an active ICR
"RTN","HMPDJ00",89,0)
 S PAT("sensitive")=$$BOOL(LST(1))
"RTN","HMPDJ00",90,0)
 S X=+VADM(9) S:X PAT("religionCode")="urn:va:pat-religion:"_X,PAT("religionName")=$$NAME(X,"religion")
"RTN","HMPDJ00",91,0)
 S X=$P(VADM(10),U,2) I $L(X) D
"RTN","HMPDJ00",92,0)
 . S X=$E(X),X=$S(X="S":"L",X="N":"S",1:X)
"RTN","HMPDJ00",93,0)
 . S PAT("maritalStatusCode")="urn:va:pat-maritalStatus:"_X
"RTN","HMPDJ00",94,0)
 . S PAT("maritalStatusName")=$$NAME(X,"maritalStatus")
"RTN","HMPDJ00",95,0)
 I VADM(11) S I=0 F  S I=$O(VADM(11,I)) Q:I<1  D
"RTN","HMPDJ00",96,0)
 . S X=+VADM(11,I)
"RTN","HMPDJ00",97,0)
 . S PAT("ethnicity",X,"code")=$$GET1^DIQ(2.06,X_","_DFN_",",".01:3")
"RTN","HMPDJ00",98,0)
 I VADM(12) S I=0 F  S I=$O(VADM(12,I)) Q:I<1  D
"RTN","HMPDJ00",99,0)
 . S X=+VADM(12,I)
"RTN","HMPDJ00",100,0)
 . S PAT("race",X,"code")=$$GET1^DIQ(2.02,X_","_DFN_",",".01:3")
"RTN","HMPDJ00",101,0)
 Q
"RTN","HMPDJ00",102,0)
 ;
"RTN","HMPDJ00",103,0)
SVC ;-service data
"RTN","HMPDJ00",104,0)
 N VAEL,VASV,VAERR,X,Y,I,P,AO,IR,PGF,HNC,MST,CV,HMPSC
"RTN","HMPDJ00",105,0)
 D 7^VADPT
"RTN","HMPDJ00",106,0)
 S PAT("veteran")=$$BOOL(VAEL(4))
"RTN","HMPDJ00",107,0)
 S PAT("serviceConnected")=$$BOOL(+VAEL(3)) I VAEL(3) D
"RTN","HMPDJ00",108,0)
 . S PAT("scPercent")=+$P(VAEL(3),U,2)
"RTN","HMPDJ00",109,0)
 . D GETS^DIQ(2,DFN_",",".3731*",,"HMPSC")
"RTN","HMPDJ00",110,0)
 . S I="" F  S I=$O(HMPSC(2.05,I)) Q:I=""  D
"RTN","HMPDJ00",111,0)
 .. S PAT("scCondition",+I,"name")=HMPSC(2.05,I,.01)
"RTN","HMPDJ00",112,0)
 .. S PAT("scCondition",+I,"scPercent")=HMPSC(2.05,I,.02)
"RTN","HMPDJ00",113,0)
 S X=+$G(^DPT(DFN,"LR")) S:X PAT("lrdfn")=X
"RTN","HMPDJ00",114,0)
 I VAEL(9)]"" S PAT("meanStatus")=$P(VAEL(9),U,2)
"RTN","HMPDJ00",115,0)
 ;
"RTN","HMPDJ00",116,0)
 ; exposures
"RTN","HMPDJ00",117,0)
 S AO=VASV(2),IR=VASV(3)
"RTN","HMPDJ00",118,0)
 S PGF=VASV(11)!VASV(12)!VASV(13) ;OIF/OEF
"RTN","HMPDJ00",119,0)
 S X=$$GETCUR^DGNTAPI(DFN,"HNC"),X=+($G(HNC("STAT")))
"RTN","HMPDJ00",120,0)
 S HNC=$S(X=4:1,X=5:1,X=1:0,X=6:0,1:"")
"RTN","HMPDJ00",121,0)
 S X=$P($$GETSTAT^DGMSTAPI(DFN),U,2),MST=$S(X="Y":1,X="N":0,1:"")
"RTN","HMPDJ00",122,0)
 S X=$$CVEDT^DGCV(DFN),CV=$S(+X<0:"",+X=0:0,$P(X,U,3):1,1:0)
"RTN","HMPDJ00",123,0)
 S X=AO_U_IR_U_PGF_U_HNC_U_MST_U_CV
"RTN","HMPDJ00",124,0)
 F P=1:1:6 S I=$P(X,U,P),$P(X,U,P)=$S(I:"Yes",I=0:"No",1:"Unknown")
"RTN","HMPDJ00",125,0)
 S NM="agent-orange^ionizing-radiation^sw-asia^head-neck-cancer^mst^combat-vet"
"RTN","HMPDJ00",126,0)
 F P=1:1:6 S PAT("exposure",P,"uid")="urn:va:"_$P(NM,U,P)_":"_$E($P(X,U,P)),PAT("exposure",P,"name")=$P(X,U,P)
"RTN","HMPDJ00",127,0)
 ;
"RTN","HMPDJ00",128,0)
 ; rated disabilities [DGRPDB]
"RTN","HMPDJ00",129,0)
 N HMPDIS,DIS,NM,DX
"RTN","HMPDJ00",130,0)
 D RDIS^DGRPDB(DFN,.HMPDIS)
"RTN","HMPDJ00",131,0)
 S I=0 F  S I=$O(HMPDIS(I)) Q:I<1  D
"RTN","HMPDJ00",132,0)
 . S DIS=HMPDIS(I)
"RTN","HMPDJ00",133,0)
 . S NM=$$GET1^DIQ(31,+DIS_",",.01),DX=$$GET1^DIQ(31,+DIS_",",2)
"RTN","HMPDJ00",134,0)
 . S PAT("disability",+DX,"name")=NM
"RTN","HMPDJ00",135,0)
 . S PAT("disability",+DX,"disPercent")=$P(DIS,U,2)
"RTN","HMPDJ00",136,0)
 . S PAT("disability",+DX,"serviceConnected")=$$BOOL($P(DIS,U,3))
"RTN","HMPDJ00",137,0)
 Q
"RTN","HMPDJ00",138,0)
 ;
"RTN","HMPDJ00",139,0)
PRF ;-patient record flags
"RTN","HMPDJ00",140,0)
 N HMPF,I,N,X
"RTN","HMPDJ00",141,0)
 S X=$$GETACT^DGPFAPI(DFN,"HMPF")
"RTN","HMPDJ00",142,0)
 S I=0 F  S I=$O(HMPF(I)) Q:I<1  D
"RTN","HMPDJ00",143,0)
 . S PAT("patientRecordFlag",I,"assignmentStatus")="Active"
"RTN","HMPDJ00",144,0)
 . S PAT("patientRecordFlag",I,"assignTS")=$$JSONDT^HMPUTILS($P($G(HMPF(I,"ASSIGNDT")),U))
"RTN","HMPDJ00",145,0)
 . S PAT("patientRecordFlag",I,"approved")=$P($G(HMPF(I,"APPRVBY")),U,2)
"RTN","HMPDJ00",146,0)
 . S PAT("patientRecordFlag",I,"nextReviewDT")=$$JSONDT^HMPUTILS($P($G(HMPF(I,"REVIEWDT")),U))
"RTN","HMPDJ00",147,0)
 . S PAT("patientRecordFlag",I,"name")=$P($G(HMPF(I,"FLAG")),U,2)
"RTN","HMPDJ00",148,0)
 . S PAT("patientRecordFlag",I,"type")=$P($G(HMPF(I,"FLAGTYPE")),U,2)
"RTN","HMPDJ00",149,0)
 . S PAT("patientRecordFlag",I,"category")=$P($G(HMPF(I,"CATEGORY")),U,2)
"RTN","HMPDJ00",150,0)
 . S PAT("patientRecordFlag",I,"ownerSite")=$P($G(HMPF(I,"OWNER")),U,2)
"RTN","HMPDJ00",151,0)
 . S PAT("patientRecordFlag",I,"originatingSite")=$P($G(HMPF(I,"ORIGSITE")),U,2)
"RTN","HMPDJ00",152,0)
 . S N=1,X=$G(HMPF(I,"NARR",1,0))
"RTN","HMPDJ00",153,0)
 . F  S N=$O(HMPF(I,"NARR",N)) Q:N<1  S X=X_$C(13,10)_$G(HMPF(I,"NARR",N,0))
"RTN","HMPDJ00",154,0)
 . S PAT("patientRecordFlag",I,"text")=X
"RTN","HMPDJ00",155,0)
 S X=$$CWAD^ORQPT2(DFN)
"RTN","HMPDJ00",156,0)
 I X]"" S PAT("cwadf")=X
"RTN","HMPDJ00",157,0)
 I $D(PAT("patientRecordFlag")) S PAT("cwadf")=$G(PAT("cwadf"))_"F"
"RTN","HMPDJ00",158,0)
 Q
"RTN","HMPDJ00",159,0)
 ;
"RTN","HMPDJ00",160,0)
ATC ;-address & telecom
"RTN","HMPDJ00",161,0)
 N VAPA,CNT,X,I,P,NM
"RTN","HMPDJ00",162,0)
 ; VAPA("P")="" ;permanent address
"RTN","HMPDJ00",163,0)
 D ADD^VADPT S CNT=0 I $$VAPA(1,5) D
"RTN","HMPDJ00",164,0)
 . S CNT=CNT+1
"RTN","HMPDJ00",165,0)
 . D ADD(1,2,3,4,5,11,9,10)
"RTN","HMPDJ00",166,0)
 . S PAT("address",CNT,"use")=$S($L(VAPA(9)):"TMP",1:"H")
"RTN","HMPDJ00",167,0)
 I VAPA(12) D   ;confidential address
"RTN","HMPDJ00",168,0)
 . S CNT=CNT+1
"RTN","HMPDJ00",169,0)
 . D ADD(13,14,15,16,17,18,20,21)
"RTN","HMPDJ00",170,0)
 . S PAT("address",CNT,"use")="CONF"
"RTN","HMPDJ00",171,0)
 . S I=0 F  S I=$O(VAPA(22,I)) Q:I=""  S X=VAPA(22,I) D
"RTN","HMPDJ00",172,0)
 .. S PAT("address",CNT,"category",I,"name")=$P(X,U,2)
"RTN","HMPDJ00",173,0)
 .. S PAT("address",CNT,"category",I,"status")=$$BOOL($P(X,U,3))
"RTN","HMPDJ00",174,0)
 ; 
"RTN","HMPDJ00",175,0)
 ; X=home^cell^work phones
"RTN","HMPDJ00",176,0)
 S X=$$FORMAT(VAPA(8))_U_$$FORMAT($$GET1^DIQ(2,DFN_",",.134))_U_$$FORMAT($$GET1^DIQ(2,DFN_",",.132))
"RTN","HMPDJ00",177,0)
 S NM="H^MC^WP" F P=1:1:3 I $L($P(X,U,P)) D
"RTN","HMPDJ00",178,0)
 . S I=$P(NM,U,P),PAT("telecom",P,"use")=I
"RTN","HMPDJ00",179,0)
 . S PAT("telecom",P,"value")=$P(X,U,P)
"RTN","HMPDJ00",180,0)
 S X=$P($G(^DPT(DFN,.13)),U,3) S:X'="" PAT("email")=X
"RTN","HMPDJ00",181,0)
 I +$P($G(^DPT(DFN,.11)),U,16)>0 S PAT("badAddress")=$$GET1^DIQ(2,DFN_",",.121)
"RTN","HMPDJ00",182,0)
 Q
"RTN","HMPDJ00",183,0)
 ;
"RTN","HMPDJ00",184,0)
ADD(LINE1,LINE2,LINE3,CITY,STATE,ZIP,START,STOP) ; -- address set
"RTN","HMPDJ00",185,0)
 S:$L(VAPA(LINE1)) PAT("address",CNT,"line1")=VAPA(LINE1)
"RTN","HMPDJ00",186,0)
 S:$L(VAPA(LINE2)) PAT("address",CNT,"line2")=VAPA(LINE2)
"RTN","HMPDJ00",187,0)
 S:$L(VAPA(LINE3)) PAT("address",CNT,"line3")=VAPA(LINE3)
"RTN","HMPDJ00",188,0)
 S:$L(VAPA(CITY)) PAT("address",CNT,"city")=VAPA(CITY)
"RTN","HMPDJ00",189,0)
 S X=$P(VAPA(STATE),U) S:X PAT("address",CNT,"state")=$$GET1^DIQ(5,+X_",",1)
"RTN","HMPDJ00",190,0)
 S X=$P(VAPA(ZIP),U,2) S:$L(X) PAT("address",CNT,"zip")=X
"RTN","HMPDJ00",191,0)
 S X=+VAPA(START) S:X PAT("address",CNT,"start")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ00",192,0)
 S X=+VAPA(STOP) S:X PAT("address",CNT,"end")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ00",193,0)
 Q
"RTN","HMPDJ00",194,0)
 ;
"RTN","HMPDJ00",195,0)
VAPA(BEG,END) ; -- VAPA nodes have data?
"RTN","HMPDJ00",196,0)
 N I,Y S Y=0
"RTN","HMPDJ00",197,0)
 F I=BEG:1:END I $L($G(VAPA(I))) S Y=1 Q
"RTN","HMPDJ00",198,0)
 Q Y
"RTN","HMPDJ00",199,0)
 ;
"RTN","HMPDJ00",200,0)
SUPP ;-support contacts
"RTN","HMPDJ00",201,0)
 N VAOA,A,I,X,TYPE,S
"RTN","HMPDJ00",202,0)
 S S=0 F A="",1 K VAOA D
"RTN","HMPDJ00",203,0)
 . S:A VAOA("A")=A D OAD^VADPT Q:'$L($G(VAOA(9)))
"RTN","HMPDJ00",204,0)
 . S S=S+1,TYPE=$S(A=1:"ECON^Emergency Contact",1:"NOK^Next of Kin")
"RTN","HMPDJ00",205,0)
 . S PAT("contact",S,"typeCode")="urn:va:pat-contact:"_$P(TYPE,U)
"RTN","HMPDJ00",206,0)
 . S PAT("contact",S,"typeName")=$P(TYPE,U,2)
"RTN","HMPDJ00",207,0)
 . S:$L(VAOA(9)) PAT("contact",S,"name")=VAOA(9)
"RTN","HMPDJ00",208,0)
 . S:$L(VAOA(10)) PAT("contact",S,"relationship")=VAOA(10)
"RTN","HMPDJ00",209,0)
 . S:$L(VAOA(1)) PAT("contact",S,"address",1,"line1")=VAOA(1)
"RTN","HMPDJ00",210,0)
 . S:$L(VAOA(2)) PAT("contact",S,"address",1,"line2")=VAOA(2)
"RTN","HMPDJ00",211,0)
 . S:$L(VAOA(3)) PAT("contact",S,"address",1,"line3")=VAOA(3)
"RTN","HMPDJ00",212,0)
 . S:$L(VAOA(4)) PAT("contact",S,"address",1,"city")=VAOA(4)
"RTN","HMPDJ00",213,0)
 . S X=$P(VAOA(5),U) S:X PAT("contact",S,"address",1,"state")=$$GET1^DIQ(5,+X_",",1)
"RTN","HMPDJ00",214,0)
 . S X=$P(VAOA(11),U,2) S:$L(X) PAT("contact",S,"address",1,"zip")=X
"RTN","HMPDJ00",215,0)
 . S I=$S(A=1:.33011,1:.21011),X=$$FORMAT(VAOA(8))_U_U_$$FORMAT($$GET1^DIQ(2,DFN_",",I))
"RTN","HMPDJ00",216,0)
 . ; X=home^cell^work phones
"RTN","HMPDJ00",217,0)
 . S NM="H^MC^WP" F P=1:1:3 I $L($P(X,U,P)) D
"RTN","HMPDJ00",218,0)
 .. S I=$P(NM,U,P),PAT("contact",S,"telecom",P,"use")=I
"RTN","HMPDJ00",219,0)
 .. S PAT("contact",S,"telecom",P,"value")=$P(X,U,P)
"RTN","HMPDJ00",220,0)
 Q
"RTN","HMPDJ00",221,0)
 ;
"RTN","HMPDJ00",222,0)
ALIAS ;-other names used
"RTN","HMPDJ00",223,0)
 N I,X
"RTN","HMPDJ00",224,0)
 S I=0 F  S I=$O(^DPT(DFN,.01,I)) Q:I<1  S X=$G(^(I,0)) D
"RTN","HMPDJ00",225,0)
 . S PAT("alias",I,"fullName")=$P(X,U)
"RTN","HMPDJ00",226,0)
 Q
"RTN","HMPDJ00",227,0)
 ;
"RTN","HMPDJ00",228,0)
FAC ;-treating facilities [see FACLIST^ORWCIRN]
"RTN","HMPDJ00",229,0)
 N IFN S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDJ00",230,0)
 N HMPY,HOME,LAST,I,X,IEN,VASITE
"RTN","HMPDJ00",231,0)
 S X=$$ALL^VASITE ;VASITE(stn#)=stn# for all local
"RTN","HMPDJ00",232,0)
 I $L($T(TFL^VAFCTFU1)) D TFL^VAFCTFU1(.HMPY,DFN)
"RTN","HMPDJ00",233,0)
 S HOME=+$P($G(^DPT(DFN,"MPI")),U,3) ;home facility
"RTN","HMPDJ00",234,0)
 I $P($G(HMPY(1)),U)<0 D  ;not setup
"RTN","HMPDJ00",235,0)
 . S X=$O(^AUPNVSIT("AA",DFN,0)),LAST=$S(X:9999999-$P(X,"."),1:"")
"RTN","HMPDJ00",236,0)
 . S X=$$SITE^VASITE
"RTN","HMPDJ00",237,0)
 . S HMPY(1)=$P(X,U,3)_U_$P(X,U,2)_U_LAST_U_$$GET1^DIQ(4,+X_",",60)
"RTN","HMPDJ00",238,0)
 S I=0 F  S I=$O(HMPY(I)) Q:I<1  D
"RTN","HMPDJ00",239,0)
 . S X=HMPY(I) Q:$P(X,U)=""  ;unknown
"RTN","HMPDJ00",240,0)
 . S IEN=+$$IEN^XUAF4($P(X,U))
"RTN","HMPDJ00",241,0)
 . I +X=776!(+X=200) S $P(X,U,2)="DEPT. OF DEFENSE"
"RTN","HMPDJ00",242,0)
 . S PAT("facility",I,"code")=$P(X,U)    ;stn#
"RTN","HMPDJ00",243,0)
 . S PAT("facility",I,"name")=$P(X,U,2)  ;name
"RTN","HMPDJ00",244,0)
 . S:IEN=HOME PAT("facility",I,"homeSite")="true"
"RTN","HMPDJ00",245,0)
 . S:$L($P(X,U,3)) PAT("facility",I,"latestDate")=$$JSONDT^HMPUTILS($P($P(X,U,3),"."))
"RTN","HMPDJ00",246,0)
 . I $D(VASITE(+X)) D
"RTN","HMPDJ00",247,0)
 .. S PAT("facility",I,"localPatientId")=DFN
"RTN","HMPDJ00",248,0)
 .. S PAT("facility",I,"systemId")=HMPSYS
"RTN","HMPDJ00",249,0)
 Q
"RTN","HMPDJ00",250,0)
 ;
"RTN","HMPDJ00",251,0)
PC ;-primary care assignments
"RTN","HMPDJ00",252,0)
 D GETPATTM^HMPCRPC1(.PAT,DFN)
"RTN","HMPDJ00",253,0)
 Q
"RTN","HMPDJ00",254,0)
 N X S X=$$OUTPTPR^SDUTL3(DFN) I X D
"RTN","HMPDJ00",255,0)
 . S PAT("pcProviderUid")=$$SETUID^HMPUTILS("user",,+X)
"RTN","HMPDJ00",256,0)
 . S PAT("pcProviderName")=$P(X,U,2)
"RTN","HMPDJ00",257,0)
 S X=$$OUTPTTM^SDUTL3(DFN) I X D
"RTN","HMPDJ00",258,0)
 . S PAT("pcTeamUid")=$$SETUID^HMPUTILS("team",,+X)
"RTN","HMPDJ00",259,0)
 . S PAT("pcTeamName")=$P(X,U,2)
"RTN","HMPDJ00",260,0)
 Q
"RTN","HMPDJ00",261,0)
 ;
"RTN","HMPDJ00",262,0)
INPT ;-inpatient information
"RTN","HMPDJ00",263,0)
 N ADM,X,Y,Z,I,HL,TS
"RTN","HMPDJ00",264,0)
 S ADM=+$G(^DPT(DFN,.105)) Q:ADM<1  ;current admission mvt
"RTN","HMPDJ00",265,0)
 S PAT("admissionUid")=$$SETUID^HMPUTILS("visit",DFN,"H"_ADM)
"RTN","HMPDJ00",266,0)
 S X=$P($G(^DPT(DFN,.101)),U) S:X]"" PAT("roomBed")=X
"RTN","HMPDJ00",267,0)
 S X=$P($G(^DPT(DFN,.1)),U) I X]"" D
"RTN","HMPDJ00",268,0)
 . S PAT("inpatientLocation")=X
"RTN","HMPDJ00",269,0)
 . S I=+$O(^DIC(42,"B",X,0)),HL=+$G(^DIC(42,I,44)) Q:HL<1
"RTN","HMPDJ00",270,0)
 . S X=$P($G(^SC(HL,0)),U,2) S:X]"" PAT("shortInpatientLocation")=X
"RTN","HMPDJ00",271,0)
 ;
"RTN","HMPDJ00",272,0)
 S TS=$G(^DPT(DFN,.103)) I TS D  ;treating specialty
"RTN","HMPDJ00",273,0)
 . S X=$$TSDATA^DGACT(45.7,+TS,.Y) Q:X<1
"RTN","HMPDJ00",274,0)
 . S PAT("specialty")=$G(Y(1)),X=""
"RTN","HMPDJ00",275,0)
 . I +$G(Y(2))>0 S X=$$TSDATA^DGACT(42.4,+Y(2),.Z)
"RTN","HMPDJ00",276,0)
 . I X>0,$G(Z(3))]"" S PAT("specialtyService")=$P(Z(3),U)
"RTN","HMPDJ00",277,0)
 Q
"RTN","HMPDJ00",278,0)
 ;
"RTN","HMPDJ00",279,0)
INS ;-insurance information
"RTN","HMPDJ00",280,0)
 N X,I,HMPX,HMPINS
"RTN","HMPDJ00",281,0)
 S X=$$INSUR^IBBAPI(DFN,,,.HMPX,"*") Q:X<1
"RTN","HMPDJ00",282,0)
 S I=0 F  S I=$O(HMPX("IBBAPI","INSUR",I)) Q:I<1  D
"RTN","HMPDJ00",283,0)
 . K HMPINS M HMPINS=HMPX("IBBAPI","INSUR",I)
"RTN","HMPDJ00",284,0)
 . S PAT("insurance",I,"id")=DFN_";"_+$G(HMPINS(1))_";"_+$G(HMPINS(8))
"RTN","HMPDJ00",285,0)
 . ; = DFN;COMPANY;POLICY
"RTN","HMPDJ00",286,0)
 . S PAT("insurance",I,"companyName")=$P(HMPINS(1),U,2)
"RTN","HMPDJ00",287,0)
 . ;DE942 - Convert effective and expiration dates to JSON format - TW
"RTN","HMPDJ00",288,0)
 . S:$G(HMPINS(10))]"" PAT("insurance",I,"effectiveDate")=$$JSONDT^HMPUTILS(HMPINS(10))
"RTN","HMPDJ00",289,0)
 . S:$G(HMPINS(11))]"" PAT("insurance",I,"expirationDate")=$$JSONDT^HMPUTILS(HMPINS(11))
"RTN","HMPDJ00",290,0)
 . S:$G(HMPINS(18))]"" PAT("insurance",I,"groupNumber")=HMPINS(18)
"RTN","HMPDJ00",291,0)
 . S:$G(HMPINS(21))]"" PAT("insurance",I,"policyType")=$P(HMPINS(21),U,2)
"RTN","HMPDJ00",292,0)
 . S X=$P($G(HMPINS(12)),U,2) S:X="PATIENT" X="SELF"
"RTN","HMPDJ00",293,0)
 . S:X]"" PAT("insurance",I,"policyHolder")=X
"RTN","HMPDJ00",294,0)
 Q
"RTN","HMPDJ00",295,0)
 ;
"RTN","HMPDJ00",296,0)
FORMAT(X) ; -- enforce (xxx)xxx-xxxx phone format
"RTN","HMPDJ00",297,0)
 S X=$G(X) I X?1"("3N1")"3N1"-"4N.E Q X
"RTN","HMPDJ00",298,0)
 N P,N,I,Y S P=""
"RTN","HMPDJ00",299,0)
 F I=1:1:$L(X) S N=$E(X,I) I N=+N S P=P_N
"RTN","HMPDJ00",300,0)
 S:$L(P)<10 P=$E("0000000000",1,10-$L(P))_P
"RTN","HMPDJ00",301,0)
 S Y=$S(P:"("_$E(P,1,3)_")"_$E(P,4,6)_"-"_$E(P,7,10),1:"")
"RTN","HMPDJ00",302,0)
 Q Y
"RTN","HMPDJ00",303,0)
 ;
"RTN","HMPDJ00",304,0)
NAME(CODE,SET) ; -- Return expanded name for code set
"RTN","HMPDJ00",305,0)
 N Y S Y="",CODE=$G(CODE)
"RTN","HMPDJ00",306,0)
 I $G(SET)="gender" S Y=$S(CODE="F":"Female",CODE="M":"Male",1:"Unknown")
"RTN","HMPDJ00",307,0)
 I $G(SET)="maritalStatus" S Y=$S(CODE="D":"Divorced",CODE="M":"Married",CODE="W":"Widowed",CODE="L":"Legally Separated",CODE="S":"Never Married",1:"Unknown")
"RTN","HMPDJ00",308,0)
 I $G(SET)="religion" S Y=$$GET1^DIQ(13,CODE_",",.01)
"RTN","HMPDJ00",309,0)
 Q Y
"RTN","HMPDJ00",310,0)
 ;
"RTN","HMPDJ00",311,0)
BOOL(X) ;
"RTN","HMPDJ00",312,0)
 I X>0 Q "true"
"RTN","HMPDJ00",313,0)
 S X=$E(X) I X="Y"!(X="y") Q "true"
"RTN","HMPDJ00",314,0)
 Q "false"
"RTN","HMPDJ00A")
1^161
"RTN","HMPDJ01")
0^33^B49806712
"RTN","HMPDJ01",1,0)
HMPDJ01 ;SLC/MKB,ASMR/RRB - Orders;Nov 12, 2015 14:33:52
"RTN","HMPDJ01",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ01",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ01",4,0)
 ;
"RTN","HMPDJ01",5,0)
 ; External References          ICR
"RTN","HMPDJ01",6,0)
 ; -------------------          -----
"RTN","HMPDJ01",7,0)
 ; ^OR(100                       5771
"RTN","HMPDJ01",8,0)
 ; ^ORA(102.4                    5769
"RTN","HMPDJ01",9,0)
 ; ^ORD(100.98                    873
"RTN","HMPDJ01",10,0)
 ; ^PXRMINDX                     4290
"RTN","HMPDJ01",11,0)
 ; ^RADPT                        2480
"RTN","HMPDJ01",12,0)
 ; ^SC                          10040
"RTN","HMPDJ01",13,0)
 ; ^VA(200                      10060
"RTN","HMPDJ01",14,0)
 ; DIC                           2051
"RTN","HMPDJ01",15,0)
 ; DIQ                           2056
"RTN","HMPDJ01",16,0)
 ; GMRCGUIB                      2980
"RTN","HMPDJ01",17,0)
 ; LR7OU1                        2955
"RTN","HMPDJ01",18,0)
 ; ORQ1,^TMP("ORR"               3154
"RTN","HMPDJ01",19,0)
 ; ORQ12,^TMP("ORR"              5704
"RTN","HMPDJ01",20,0)
 ; ORX8                          2467
"RTN","HMPDJ01",21,0)
 ; PSS51P1                       4546
"RTN","HMPDJ01",22,0)
 ;
"RTN","HMPDJ01",23,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ01",24,0)
 Q
"RTN","HMPDJ01",25,0)
 ;
"RTN","HMPDJ01",26,0)
OR1(ID) ; -- order ID >> ^TMP("ORR",$J,ORLIST,HMPN)
"RTN","HMPDJ01",27,0)
 N ORDER,CHILD,HMPC
"RTN","HMPDJ01",28,0)
 D ORX(ID,.ORDER)
"RTN","HMPDJ01",29,0)
 ;DE2818, ^OR(100) - ICR 5771
"RTN","HMPDJ01",30,0)
 S HMPC=0 F  S HMPC=$O(^OR(100,ID,2,HMPC)) Q:HMPC<1  D
"RTN","HMPDJ01",31,0)
 . K CHILD D ORX(HMPC,.CHILD)
"RTN","HMPDJ01",32,0)
 . M ORDER("children",HMPC)=CHILD
"RTN","HMPDJ01",33,0)
 S ORDER("lastUpdateTime")=$$EN^HMPSTMP("order") ;RHL 20141231
"RTN","HMPDJ01",34,0)
 S ORDER("stampTime")=ORDER("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ01",35,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ01",36,0)
 I $G(HMPMETA) D ADD^HMPMETA("order",ORDER("uid"),ORDER("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ01",37,0)
 D ADD^HMPDJ("ORDER","order")
"RTN","HMPDJ01",38,0)
 Q
"RTN","HMPDJ01",39,0)
ORX(IFN,ORD) ; -- extract order IFN into ORD("attribute")
"RTN","HMPDJ01",40,0)
 N ORLIST,ORLST,X0,X8,LOC,X,I,DA
"RTN","HMPDJ01",41,0)
 S ORLST=$S(+$G(HMPN):HMPN-1,1:0) S:'$D(ORLIST) ORLIST=$H
"RTN","HMPDJ01",42,0)
 D GET^ORQ12(IFN,ORLIST,1)
"RTN","HMPDJ01",43,0)
 S X0=$G(^TMP("ORR",$J,ORLIST,ORLST))
"RTN","HMPDJ01",44,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ01",45,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ01",46,0)
 S ERRMSG="A problem occurred converting record "_IFN_" for the orders domain"
"RTN","HMPDJ01",47,0)
 ;
"RTN","HMPDJ01",48,0)
 S ORD("localId")=IFN,ORD("uid")=$$SETUID^HMPUTILS("order",DFN,IFN)
"RTN","HMPDJ01",49,0)
 S X=$$OI^ORX8(+X0) I $L(X) D
"RTN","HMPDJ01",50,0)
 . N ARRAY,NAME
"RTN","HMPDJ01",51,0)
 . S ARRAY("Code")=1_U_"oi",ARRAY("Name")=2,ARRAY("PackageRef")=3
"RTN","HMPDJ01",52,0)
 . D SPLITVAL^HMPUTILS(X,.ARRAY) S ORD("name")=ARRAY("Name")
"RTN","HMPDJ01",53,0)
 . S NAME="" F  S NAME=$O(ARRAY(NAME)) Q:NAME=""  S ORD("oi"_NAME)=$G(ARRAY(NAME))
"RTN","HMPDJ01",54,0)
 S ORD("displayGroup")=$P(X0,U,2)
"RTN","HMPDJ01",55,0)
 S ORD("entered")=$$JSONDT^HMPUTILS($P(X0,U,3))
"RTN","HMPDJ01",56,0)
 S ORD("start")=$$TM($P(X0,U,4)),ORD("stop")=$$TM($P(X0,U,5))
"RTN","HMPDJ01",57,0)
 S ORD("statusCode")="urn:va:order-status:"_$P(X0,U,7)
"RTN","HMPDJ01",58,0)
 S ORD("statusName")=$P(X0,U,6)
"RTN","HMPDJ01",59,0)
 S ORD("statusVuid")="urn:va:vuid:"_$$STS^HMPDOR($P(X0,U,7))
"RTN","HMPDJ01",60,0)
 D SETTEXT^HMPUTILS($NA(^TMP("ORR",$J,ORLIST,ORLST,"TX")),$NA(^TMP("HMPTEXT",$J,IFN)))
"RTN","HMPDJ01",61,0)
 M ORD("content","\")=^TMP("HMPTEXT",$J,IFN)
"RTN","HMPDJ01",62,0)
 S X=$$GET1^DIQ(100,IFN_",",1,"I") I X D
"RTN","HMPDJ01",63,0)
 . S ORD("providerUid")=$$SETUID^HMPUTILS("user",,+X)
"RTN","HMPDJ01",64,0)
 . S ORD("providerName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818, ICR 10060
"RTN","HMPDJ01",65,0)
 S LOC=+$$GET1^DIQ(100,IFN_",",6,"I"),FAC=$$FAC^HMPD(LOC) I LOC D
"RTN","HMPDJ01",66,0)
 . S ORD("locationName")=$$GET1^DIQ(44,LOC_",",.01)  ;DE2818, ICR 10040
"RTN","HMPDJ01",67,0)
 . S ORD("locationUid")=$$SETUID^HMPUTILS("location",,LOC)
"RTN","HMPDJ01",68,0)
 D FACILITY^HMPUTILS(FAC,"ORD")
"RTN","HMPDJ01",69,0)
 S ORD("service")=$$GET1^DIQ(100,IFN_",","12:1")
"RTN","HMPDJ01",70,0)
 S X=$$GET1^DIQ(100,IFN_",",9,"I") S:X ORD("predecessor")=$$SETUID^HMPUTILS("order",DFN,+X)
"RTN","HMPDJ01",71,0)
 S X=$$GET1^DIQ(100,IFN_",",9.1,"I") S:X ORD("successor")=$$SETUID^HMPUTILS("order",DFN,+X)
"RTN","HMPDJ01",72,0)
 D RESULTS
"RTN","HMPDJ01",73,0)
 ;DE2818, ICR 5771 for ^OR(100)
"RTN","HMPDJ01",74,0)
 ; sign/verify
"RTN","HMPDJ01",75,0)
 S X8=$G(^OR(100,IFN,8,1,0)),I=0 I $P(X8,U,6) D       ;(#6) DATE/TIME SIGNED
"RTN","HMPDJ01",76,0)
 . N PROV S PROV=$P(X8,U,5) S:PROV<1 PROV=$P(X8,U,3)  ;(#5) SIGNED BY or (#3) PROVIDER, if on chart,
"RTN","HMPDJ01",77,0)
 . D USER(.I,"S",PROV,$P(X8,U,6))                     ;   use provider
"RTN","HMPDJ01",78,0)
 I $P(X8,U,9)  D USER(.I,"N",$P(X8,U,8),$P(X8,U,9))   ;(#8) VERIFYING NURSE, (#9) DATE/TIME NURSE VERIFIED
"RTN","HMPDJ01",79,0)
 I $P(X8,U,11) D USER(.I,"C",$P(X8,U,10),$P(X8,U,11)) ;(#10) VERIFYING CLERK ,(#11) DATE/TIME CLERK VERIFIED
"RTN","HMPDJ01",80,0)
 I $P(X8,U,19) D USER(.I,"R",$P(X8,U,18),$P(X8,U,19)) ;(#18) CHART REVIEWED BY, (#19) DATE/TIME CHART REVIEWED
"RTN","HMPDJ01",81,0)
 Q
"RTN","HMPDJ01",82,0)
 ; acknowledgements, DE2818,^ORA(102.4) - ICR 5769
"RTN","HMPDJ01",83,0)
 S DA=0 F  S DA=$O(^ORA(102.4,"B",+IFN,DA)) Q:DA<1  D
"RTN","HMPDJ01",84,0)
 . S X0=$G(^ORA(102.4,DA,0)) Q:'$P(X0,U,3)  ;stub - not ack'd
"RTN","HMPDJ01",85,0)
 . S X=+$P(X0,U,2),X=$S(X:X_U_$$GET1^DIQ(200,X_",",.01),1:U)  ;DE2818, ICR 10060
"RTN","HMPDJ01",86,0)
 . S ORD("acknowledgement",DA)=X_U_$P(X0,U,3)
"RTN","HMPDJ01",87,0)
 Q
"RTN","HMPDJ01",88,0)
 ;
"RTN","HMPDJ01",89,0)
RESULTS ; -- add ORD("results",n,"uid") list
"RTN","HMPDJ01",90,0)
 N ORPK,ORPKG,ORDG
"RTN","HMPDJ01",91,0)
 ;DE2818, ^OR(100) - ICR 5771
"RTN","HMPDJ01",92,0)
 S ORPK=$G(^OR(100,IFN,4)),ORPKG=ORD("service"),ORDG=ORD("displayGroup")
"RTN","HMPDJ01",93,0)
 I ORPKG="GMRC" D  Q
"RTN","HMPDJ01",94,0)
 . N HMPD,I,N,X D DOCLIST^GMRCGUIB(.HMPD,+ORPK)
"RTN","HMPDJ01",95,0)
 . S N=1,ORD("results",N,"uid")=$$SETUID^HMPUTILS("consult",DFN,+ORPK)
"RTN","HMPDJ01",96,0)
 . S I=0 F  S I=$O(HMPD(50,I)) Q:I<1  S X=$G(HMPD(50,I)) D
"RTN","HMPDJ01",97,0)
 .. Q:'$D(@(U_$P(X,";",2)_+X_")"))  ;text deleted
"RTN","HMPDJ01",98,0)
 .. S N=N+1,ORD("results",N,"uid")=$$SETUID^HMPUTILS("document",DFN,+X)
"RTN","HMPDJ01",99,0)
 . Q:ORDG'="PROC"
"RTN","HMPDJ01",100,0)
 . N HMPC D FIND^DIC(702,,"@","Q",+ORPK,,"ACON",,,"HMPC") ;CP
"RTN","HMPDJ01",101,0)
 . S I=0 F  S I=$O(HMPC("DILIST",2,I)) Q:I<1  D
"RTN","HMPDJ01",102,0)
 .. S X=+$G(HMPC("DILIST",2,I))_";MDD(702,"
"RTN","HMPDJ01",103,0)
 .. S N=N+1,ORD("results",N,"uid")=$$SETUID^HMPUTILS("procedure",DFN,X)
"RTN","HMPDJ01",104,0)
 I ORPKG="LR" D  Q
"RTN","HMPDJ01",105,0)
 . Q:$L(ORPK,";")'>3  ;no results yet, or parent order
"RTN","HMPDJ01",106,0)
 . N SUB,IDT,CDT,ITM,HMPT,ID,T,N,LRDFN,IDX
"RTN","HMPDJ01",107,0)
 . S SUB=$P(ORPK,";",4),IDT=$P(ORPK,";",5),CDT=9999999-IDT
"RTN","HMPDJ01",108,0)
 . I SUB="CH" D  Q
"RTN","HMPDJ01",109,0)
 .. S ITM=+$G(ORD("oiPackageRef")) D EXPAND^LR7OU1(ITM,.HMPT)
"RTN","HMPDJ01",110,0)
 .. S (T,N)=0 F  S T=$O(HMPT(T)) Q:T<1  S ID=$O(^PXRMINDX(63,"PI",DFN,T,CDT,"")) I $L(ID) S N=N+1,ORD("results",N,"uid")=$$SETUID^HMPUTILS("lab",DFN,$P(ID,";",2,9))
"RTN","HMPDJ01",111,0)
 . I SUB="MI" D  Q
"RTN","HMPDJ01",112,0)
 .. S ITM="M;A;",N=0,LRDFN=$$LRDFN^HMPXGLAB(DFN)  ;DE2818
"RTN","HMPDJ01",113,0)
 .. F  S ITM=$O(^PXRMINDX(63,"PI",DFN,ITM)) Q:$E(ITM,1,4)'="M;A;"  I $D(^(ITM,CDT)) D
"RTN","HMPDJ01",114,0)
 ... S IDX=LRDFN_";MI;"_IDT
"RTN","HMPDJ01",115,0)
 ... F  S IDX=$O(^PXRMINDX(63,"PI",DFN,ITM,CDT,IDX)) Q:IDX=""  S ID=$P(IDX,";",2,99),N=N+1,ORD("results",N,"uid")=$$SETUID^HMPUTILS("lab",DFN,ID)
"RTN","HMPDJ01",116,0)
 .. S N=N+1,ORD("results",N,"uid")=$$SETUID^HMPUTILS("document",DFN,SUB_";"_IDT)
"RTN","HMPDJ01",117,0)
 . ; SUB:"AP" [AU,CY,EM,SP]
"RTN","HMPDJ01",118,0)
 . S ORD("results",1,"uid")=$$SETUID^HMPUTILS("lab",DFN,SUB_";"_IDT)
"RTN","HMPDJ01",119,0)
 . S ORD("results",2,"uid")=$$SETUID^HMPUTILS("document",DFN,SUB_";"_IDT)
"RTN","HMPDJ01",120,0)
 I ORPKG["PS" D  Q
"RTN","HMPDJ01",121,0)
 . S:ORPK ORD("results",1,"uid")=$$SETUID^HMPUTILS("med",DFN,IFN)
"RTN","HMPDJ01",122,0)
 ;DE2818, ^RADPT - ICR 2480
"RTN","HMPDJ01",123,0)
 I ORPKG="RA" D  Q
"RTN","HMPDJ01",124,0)
 . N IDT,CN S IDT=+$O(^RADPT("AO",+ORPK,DFN,0)) Q:'IDT
"RTN","HMPDJ01",125,0)
 . S CN=0 F  S CN=$O(^RADPT("AO",+ORPK,DFN,IDT,CN)) Q:CN<1  S ORD("results",CN,"uid")=$$SETUID^HMPUTILS("image",DFN,IDT_"-"_CN)
"RTN","HMPDJ01",126,0)
 ; rest should be generic (OR) orders
"RTN","HMPDJ01",127,0)
 I ORDG="NTX" S ORD("results",1,"uid")=$$SETUID^HMPUTILS("treatment",DFN,IFN) Q
"RTN","HMPDJ01",128,0)
 I ORDG="V/M" Q  ;no link
"RTN","HMPDJ01",129,0)
 Q
"RTN","HMPDJ01",130,0)
 ;
"RTN","HMPDJ01",131,0)
NTX1(IFN) ; -- extract nursing treatment order IFN into NTX("attribute")
"RTN","HMPDJ01",132,0)
 N NTX,X
"RTN","HMPDJ01",133,0)
 D ORX(IFN,.NTX) ;get basic order info
"RTN","HMPDJ01",134,0)
 S NTX("orderUid")=NTX("uid")
"RTN","HMPDJ01",135,0)
 S NTX("uid")=$$SETUID^HMPUTILS("treatment",DFN,IFN)
"RTN","HMPDJ01",136,0)
 S X=$$VALUE^ORX8(IFN,"COMMENT") S:$L(X) NTX("instructions")=X
"RTN","HMPDJ01",137,0)
 S X=$$VALUE^ORX8(IFN,"SCHEDULE") I X D
"RTN","HMPDJ01",138,0)
 . D ZERO^PSS51P1(X,,,,"HMPS")
"RTN","HMPDJ01",139,0)
 . S NTX("scheduleName")=$G(^TMP($J,"HMPS",X,.01))
"RTN","HMPDJ01",140,0)
 . S NTX("adminTimes")=$G(^TMP($J,"HMPS",X,1))
"RTN","HMPDJ01",141,0)
 . K ^TMP($J,"HMPS")
"RTN","HMPDJ01",142,0)
 S NTX("lastUpdateTime")=$$EN^HMPSTMP("treatment") ;RHL 20141231
"RTN","HMPDJ01",143,0)
 S NTX("stampTime")=NTX("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ01",144,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ01",145,0)
 I $G(HMPMETA) D ADD^HMPMETA("treatment",NTX("uid"),NTX("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ01",146,0)
 D ADD^HMPDJ("NTX","treatment")
"RTN","HMPDJ01",147,0)
 Q
"RTN","HMPDJ01",148,0)
 ;
"RTN","HMPDJ01",149,0)
USER(N,ROLE,IEN,DATE) ; -- add signature/verification data
"RTN","HMPDJ01",150,0)
 S N=+$G(N)+1
"RTN","HMPDJ01",151,0)
 S ORD("clinicians",N,"signedDateTime")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ01",152,0)
 S ORD("clinicians",N,"role")=$G(ROLE)
"RTN","HMPDJ01",153,0)
 Q:+$G(IEN)<1
"RTN","HMPDJ01",154,0)
 S ORD("clinicians",N,"uid")=$$SETUID^HMPUTILS("user",,IEN)
"RTN","HMPDJ01",155,0)
 S ORD("clinicians",N,"name")=$$GET1^DIQ(200,IEN_",",.01)  ;DE2818, ICR 10060
"RTN","HMPDJ01",156,0)
 Q
"RTN","HMPDJ01",157,0)
 ;
"RTN","HMPDJ01",158,0)
TM(X) ; -- strip seconds off a FM time
"RTN","HMPDJ01",159,0)
 N D,T,Y S D=$P(X,"."),T=$P(X,".",2)
"RTN","HMPDJ01",160,0)
 S Y=D_$S(T:"."_$E(T,1,4),1:"")
"RTN","HMPDJ01",161,0)
 S Y=$$JSONDT^HMPUTILS(Y)
"RTN","HMPDJ01",162,0)
 Q Y
"RTN","HMPDJ01",163,0)
 ;
"RTN","HMPDJ02")
0^35^B178043401
"RTN","HMPDJ02",1,0)
HMPDJ02 ;SLC/MKB,ASMR/RRB - Problems,Allergies,Vitals;Nov 12, 2015 14:52:13
"RTN","HMPDJ02",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ02",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ02",4,0)
 ;
"RTN","HMPDJ02",5,0)
 ; External References          DBIA#
"RTN","HMPDJ02",6,0)
 ; -------------------          -----
"RTN","HMPDJ02",7,0)
 ; ^PXRMINDX                     4290
"RTN","HMPDJ02",8,0)
 ; DIC                           2051
"RTN","HMPDJ02",9,0)
 ; DIQ                           2056
"RTN","HMPDJ02",10,0)
 ; GMPLUTL2                      2741
"RTN","HMPDJ02",11,0)
 ; GMRADPT                      10099
"RTN","HMPDJ02",12,0)
 ; GMRAOR2                       2422
"RTN","HMPDJ02",13,0)
 ; GMRVUT0,^UTILITY($J           1446
"RTN","HMPDJ02",14,0)
 ; GMVGETQL                      5048
"RTN","HMPDJ02",15,0)
 ; GMVGETVT                      5047
"RTN","HMPDJ02",16,0)
 ; GMVUTL                        5046
"RTN","HMPDJ02",17,0)
 ; ICDCODE                       3990
"RTN","HMPDJ02",18,0)
 ; XLFSTR                       10104
"RTN","HMPDJ02",19,0)
 ; XUAF4                         2171
"RTN","HMPDJ02",20,0)
 ;
"RTN","HMPDJ02",21,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ02",22,0)
 ;
"RTN","HMPDJ02",23,0)
 Q
"RTN","HMPDJ02",24,0)
 ;
"RTN","HMPDJ02",25,0)
GMPL1(ID,POVLST) ; -- problem
"RTN","HMPDJ02",26,0)
 N HMPL,PROB,X,I,DATE,USER,FAC
"RTN","HMPDJ02",27,0)
 D DETAIL^GMPLUTL2(ID,.HMPL) Q:'$D(HMPL)  ;doesn't exist
"RTN","HMPDJ02",28,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ02",29,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ02",30,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the problem domain"
"RTN","HMPDJ02",31,0)
 ;
"RTN","HMPDJ02",32,0)
 S PROB("uid")=$$SETUID^HMPUTILS("problem",DFN,ID),PROB("localId")=ID
"RTN","HMPDJ02",33,0)
 S PROB("problemText")=$G(HMPL("NARRATIVE"))
"RTN","HMPDJ02",34,0)
 S DATE=$P($G(HMPL("ENTERED")),U)
"RTN","HMPDJ02",35,0)
 S:$L(DATE) DATE=$$DATE^HMPDGMPL(DATE),PROB("entered")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ02",36,0)
 S X=$G(HMPL("DIAGNOSIS")) I $L(X) D
"RTN","HMPDJ02",37,0)
 . N ICD9ZN,DIAG
"RTN","HMPDJ02",38,0)
 . I DATE'>0 S DATE=DT
"RTN","HMPDJ02",39,0)
 . S ICD9ZN=$$ICDDX^ICDCODE(X,DATE),DIAG=$S($P($G(ICD9ZN),U,4)'="":$P(ICD9ZN,U,4),1:X)
"RTN","HMPDJ02",40,0)
 . ; BEGIN MOD ASF 09/8/15 US 9239 DE 2082
"RTN","HMPDJ02",41,0)
 . ; Only set icdCode and icdName if it is ICD9 (ICD10 is only available in codes array)
"RTN","HMPDJ02",42,0)
 . I HMPL("CSYS")="ICD" S PROB("icdCode")=$$SETNCS^HMPUTILS("icd",HMPL("DIAGNOSIS")),PROB("icdName")=DIAG
"RTN","HMPDJ02",43,0)
 . ; Create codes array for both ICD9 or ICD10
"RTN","HMPDJ02",44,0)
 . S PROB("codes",1,"code")=HMPL("DIAGNOSIS")
"RTN","HMPDJ02",45,0)
 . S PROB("codes",1,"display")=$S(HMPL("CSYS")="ICD":DIAG,HMPL("CSYS")="10D":HMPL("ICDD"))
"RTN","HMPDJ02",46,0)
 . S PROB("codes",1,"system")=$S(HMPL("CSYS")="ICD":"urn:oid:2.16.840.1.113883.6.42",HMPL("CSYS")="10D":"urn:oid:2.16.840.1.113883.6.3",1:"codesystem error")
"RTN","HMPDJ02",47,0)
 . ;SNOMED CT codes
"RTN","HMPDJ02",48,0)
 . S SCTCODE=$$GET1^DIQ(9000011,ID_",",80001) ;9000011,80001 SNOMED CT CONCEPT CODE
"RTN","HMPDJ02",49,0)
 . D:SCTCODE EN^LEXCODE(SCTCODE) ; ICR 1614
"RTN","HMPDJ02",50,0)
 . I $D(LEXS("SCT",1)) D
"RTN","HMPDJ02",51,0)
 . . S PROB("codes",2,"code")=SCTCODE
"RTN","HMPDJ02",52,0)
 . . S PROB("codes",2,"code","\s")="" ; Ensure code is sent as a string
"RTN","HMPDJ02",53,0)
 . . S PROB("codes",2,"display")=$P(LEXS("SCT",1),U,2)
"RTN","HMPDJ02",54,0)
 . . S PROB("codes",2,"system")="http://snomed.info/sct"
"RTN","HMPDJ02",55,0)
 . ; END MOD ASF US 9239 DE 2082
"RTN","HMPDJ02",56,0)
 S X=$G(HMPL("ONSET")) S:$L(X) X=$$DATE^HMPDGMPL(X),PROB("onset")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ02",57,0)
 S X=$G(HMPL("MODIFIED")) S:$L(X) X=$$DATE^HMPDGMPL(X),PROB("updated")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ02",58,0)
 S X=$G(HMPL("STATUS")) I $L(X) D
"RTN","HMPDJ02",59,0)
 . S PROB("statusName")=X,X=$E(X)
"RTN","HMPDJ02",60,0)
 . S X=$S(X="A":55561003,X="I":73425007,1:"")
"RTN","HMPDJ02",61,0)
 . S PROB("statusCode")=$$SETNCS^HMPUTILS("sct",X)
"RTN","HMPDJ02",62,0)
 S X=$G(HMPL("PRIORITY")) I X]"" D
"RTN","HMPDJ02",63,0)
 . S X=$$LOW^XLFSTR(X),PROB("acuityName")=X
"RTN","HMPDJ02",64,0)
 . S PROB("acuityCode")=$$SETVURN^HMPUTILS("prob-acuity",$E(X))
"RTN","HMPDJ02",65,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.07,"I") S:X PROB("resolved")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ02",66,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.02,"I")
"RTN","HMPDJ02",67,0)
 S:X="P" PROB("unverified")="false",PROB("removed")="false"
"RTN","HMPDJ02",68,0)
 S:X="T" PROB("unverified")="true",PROB("removed")="false"
"RTN","HMPDJ02",69,0)
 S:X="H" PROB("unverified")="false",PROB("removed")="true"
"RTN","HMPDJ02",70,0)
 S X=$G(HMPL("SC")),X=$S(X="YES":"",X="NO":"false",1:"")
"RTN","HMPDJ02",71,0)
 S:$L(X) PROB("serviceConnected")=X
"RTN","HMPDJ02",72,0)
 S X=$G(HMPL("PROVIDER")) I $L(X) D
"RTN","HMPDJ02",73,0)
 . S PROB("providerName")=X,X=$$GET1^DIQ(9000011,ID_",",1.05,"I")
"RTN","HMPDJ02",74,0)
 . S PROB("providerUid")=$$SETUID^HMPUTILS("user",,+X)
"RTN","HMPDJ02",75,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.06) S:$L(X) PROB("service")=X
"RTN","HMPDJ02",76,0)
 S X=$G(HMPL("CLINIC")) I $L(X) D
"RTN","HMPDJ02",77,0)
 . S PROB("locationName")=X
"RTN","HMPDJ02",78,0)
 . N LOC S LOC=+$$FIND1^DIC(44,,"QX",X)
"RTN","HMPDJ02",79,0)
 . S:LOC PROB("locationUid")=$$SETUID^HMPUTILS("location",,LOC)
"RTN","HMPDJ02",80,0)
 S X=+$$GET1^DIQ(9000011,ID_",",.06,"I")
"RTN","HMPDJ02",81,0)
 S:X FAC=$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U)
"RTN","HMPDJ02",82,0)
 I 'X S FAC=$$FAC^HMPD ;local stn#^name
"RTN","HMPDJ02",83,0)
 D FACILITY^HMPUTILS(FAC,"PROB")
"RTN","HMPDJ02",84,0)
 S I=0 F  S I=$O(HMPL("COMMENT",I)) Q:I<1  D
"RTN","HMPDJ02",85,0)
 . S X=$G(HMPL("COMMENT",I))
"RTN","HMPDJ02",86,0)
 . S USER=$$VA200^HMPDGMPL($P(X,U,2)),DATE=$$DATE^HMPDGMPL($P(X,U))
"RTN","HMPDJ02",87,0)
 . S PROB("comments",I,"enteredByCode")=$$SETUID^HMPUTILS("user",,+USER)
"RTN","HMPDJ02",88,0)
 . S PROB("comments",I,"enteredByName")=$P(X,U,2)
"RTN","HMPDJ02",89,0)
 . S PROB("comments",I,"entered")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ02",90,0)
 . S PROB("comments",I,"comment")=$P(X,U,3)
"RTN","HMPDJ02",91,0)
 I $D(POVLST) D GMPLVST(ID,"PROB",.POVLST)  ;JL;add encounter information. 
"RTN","HMPDJ02",92,0)
 S PROB("lastUpdateTime")=$$EN^HMPSTMP("problem")
"RTN","HMPDJ02",93,0)
 S PROB("stampTime")=PROB("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ02",94,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ02",95,0)
 I $G(HMPMETA) D ADD^HMPMETA("problem",PROB("uid"),PROB("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ02",96,0)
 D ADD^HMPDJ("PROB","problem")
"RTN","HMPDJ02",97,0)
 Q
"RTN","HMPDJ02",98,0)
 ;
"RTN","HMPDJ02",99,0)
GMPLVST(ID,Y,POVLST)  ; --- JL;associate problem with visit and notes
"RTN","HMPDJ02",100,0)
 ; DE2818, ^AUPNPROB( - ICR 1253
"RTN","HMPDJ02",101,0)
 Q:'$G(ID)!'$G(^AUPNPROB(ID,0))!'$D(POVLST)  ;invalid id or no data
"RTN","HMPDJ02",102,0)
 N ICDCODE
"RTN","HMPDJ02",103,0)
 S ICDCODE=$$CODEC^ICDCODE($P(^AUPNPROB(ID,0),U,1)) Q:ICDCODE=-1  ;invalid icdcode
"RTN","HMPDJ02",104,0)
 Q:$D(POVLST(ICDCODE))=0
"RTN","HMPDJ02",105,0)
 N IDX,VCNT,NCNT,DIEN,VIEN,FAC,STCODE
"RTN","HMPDJ02",106,0)
 S IDX="",VCNT=0,NCNT=0 F  S IDX=$O(POVLST(ICDCODE,IDX)) Q:IDX=""  D
"RTN","HMPDJ02",107,0)
 . S VCNT=VCNT+1
"RTN","HMPDJ02",108,0)
 . S VIEN=+$G(POVLST(ICDCODE,IDX)),FAC=$$FAC^HMPDJ04(VIEN),STCODE=$$STCODE^HMPDJ04(VIEN)
"RTN","HMPDJ02",109,0)
 . I FAC D FACILITY^HMPUTILS(FAC,Y_"(""encounters"","_VCNT_")")  ; facility info
"RTN","HMPDJ02",110,0)
 . I STCODE D STOPCODE^HMPDJ04(STCODE,Y_"(""encounters"","_VCNT_")") ; stop code
"RTN","HMPDJ02",111,0)
 . S @Y@("encounters",VCNT,"dateTime")=$$JSONDT^HMPUTILS($$DATE^HMPDGMPL(+IDX))
"RTN","HMPDJ02",112,0)
 . S @Y@("encounters",VCNT,"visitUid")=$$SETUID^HMPUTILS("visit",DFN,VIEN)
"RTN","HMPDJ02",113,0)
 . N ENINFO S ENINFO=$G(POVLST(ICDCODE,IDX))
"RTN","HMPDJ02",114,0)
 . S DIEN=+$P(ENINFO,U,2)
"RTN","HMPDJ02",115,0)
 . ;W "DIEN is "_DIEN,!
"RTN","HMPDJ02",116,0)
 . I DIEN D
"RTN","HMPDJ02",117,0)
 . . S NCNT=NCNT+1
"RTN","HMPDJ02",118,0)
 . . ; extract the extra data from the document
"RTN","HMPDJ02",119,0)
 . . N DOCINFO S DOCINFO=$E(ENINFO,$F($G(ENINFO),U),$L(ENINFO))
"RTN","HMPDJ02",120,0)
 . . N OUTPUT S OUTPUT="" D EN1^HMPDJ08(DOCINFO,3,.OUTPUT)
"RTN","HMPDJ02",121,0)
 . . N NAME F NAME="documentTypeName","entered","summary","facilityName","authorDisplayName" D
"RTN","HMPDJ02",122,0)
 . . . S:$D(OUTPUT(NAME)) @Y@("documents",NCNT,NAME)=$G(OUTPUT(NAME))
"RTN","HMPDJ02",123,0)
 . . S @Y@("documents",NCNT,"documentUid")=$$SETUID^HMPUTILS("document",DFN,DIEN)
"RTN","HMPDJ02",124,0)
 Q
"RTN","HMPDJ02",125,0)
 ;
"RTN","HMPDJ02",126,0)
GMPLPOV(DFNN,POVLST,DONTKILL) ; -- JL;All problem of visit related to the patient from V POV file
"RTN","HMPDJ02",127,0)
 ;INPUT: Patient's DFN
"RTN","HMPDJ02",128,0)
 ;OUTPUT: Patient's VISIT list in the format of
"RTN","HMPDJ02",129,0)
 ;        OUTPUT(DIAGNOSIS,DATATIME)="VISITIEN"
"RTN","HMPDJ02",130,0)
 ;
"RTN","HMPDJ02",131,0)
 Q:'$G(DFNN)
"RTN","HMPDJ02",132,0)
 N INVVST
"RTN","HMPDJ02",133,0)
 K:'DONTKILL POVLST ; clear the output
"RTN","HMPDJ02",134,0)
 ;DE2818, ^AUPNVPOV( - ICR 3094, ^AUPNVSIT( - ICR 2028
"RTN","HMPDJ02",135,0)
 ; Query V POV(^AUPNVPOV() by using "AA" Cross Reference.
"RTN","HMPDJ02",136,0)
 S INVVST="",CURVST="" F  S INVVST=$O(^AUPNVPOV("AA",DFNN,INVVST)) Q:INVVST=""  D
"RTN","HMPDJ02",137,0)
 . N CURVST,DIEN
"RTN","HMPDJ02",138,0)
 . S CURVST=INVVST,DIEN="" F  S DIEN=$O(^AUPNVPOV("AA",DFNN,CURVST,DIEN)) Q:DIEN=""  D
"RTN","HMPDJ02",139,0)
 . . N ICDIEN,PVISIT
"RTN","HMPDJ02",140,0)
 . . S ICDIEN=+$P(^AUPNVPOV(DIEN,0),U,1),PVISIT=$P(^AUPNVPOV(DIEN,0),U,3)
"RTN","HMPDJ02",141,0)
 . . N VISITDT
"RTN","HMPDJ02",142,0)
 . . S VISITDT=+$G(^AUPNVSIT(PVISIT,0)) Q:'$L(VISITDT)  ;quit if no visit is found, bad data entry.
"RTN","HMPDJ02",143,0)
 . . N ICDCODE,VIEN
"RTN","HMPDJ02",144,0)
 . . S ICDCODE=$$CODEC^ICDCODE(ICDIEN) Q:ICDCODE=-1  ;convert to ICD code, quit if not valid
"RTN","HMPDJ02",145,0)
 . . I $D(POVLST(ICDCODE,VISITDT))'=0 D  Q
"RTN","HMPDJ02",146,0)
 . . . S VIEN=$$GETVIEN(DFNN,VISITDT)
"RTN","HMPDJ02",147,0)
 . . . ; W:VIEN=-1 "Can not find VISIT IEN for "_VISITDT,!
"RTN","HMPDJ02",148,0)
 . . . S:VIEN'=-1 POVLST(ICDCODE,VISITDT)=VIEN
"RTN","HMPDJ02",149,0)
 Q
"RTN","HMPDJ02",150,0)
 ;
"RTN","HMPDJ02",151,0)
GETVIEN(DFNN,VISITDT)  ;JL; get the Visit IEN from VISIT file based on patient ID and Datetime
"RTN","HMPDJ02",152,0)
 Q:'+$G(DFNN)!'$L(VISITDT) -1  ;return -1 if bad parameter
"RTN","HMPDJ02",153,0)
 N REVDT,VISITIEN
"RTN","HMPDJ02",154,0)
 S REVDT=9999999-$P(VISITDT,".",1)_$S($P(VISITDT,".",2)'="":"."_$P(VISITDT,".",2),1:"")
"RTN","HMPDJ02",155,0)
 ; ;DE2818, ^AUPNVSIT( - ICR 2028
"RTN","HMPDJ02",156,0)
 S VISITIEN=$O(^AUPNVSIT("AA",DFNN,REVDT,""))  ; using "AA" cross-reference
"RTN","HMPDJ02",157,0)
 Q:VISITIEN="" -1
"RTN","HMPDJ02",158,0)
 Q VISITIEN
"RTN","HMPDJ02",159,0)
 ;
"RTN","HMPDJ02",160,0)
DIAGLIST(DIAGS,DFN,ORDATE,ORPRCNT) ;BL,JL; get list diagnosis on past notes
"RTN","HMPDJ02",161,0)
 S:'+$G(ORDATE) ORDATE=DT
"RTN","HMPDJ02",162,0)
 S:'+$G(ORPRCNT) ORPRCNT=1
"RTN","HMPDJ02",163,0)
 ;Use TIU DOCUMENTS BY CONTEXT to retrieve all notes associated with patient (CONTEXT^TIUSRVLO)
"RTN","HMPDJ02",164,0)
 K ENC,DIAGCODE,CNT,DIAG,DIAGNUM,DIAGLINE,ENCNUM,LINE,IEN,CLASS,CONTEXT,EARLY,LATE,PERSON,OCCLIM,SEQUENCE,SHOWADD,INCUND,LSTNUM,NOTEINFO
"RTN","HMPDJ02",165,0)
 K NEWCNT,OLDLST,DIAGCNT
"RTN","HMPDJ02",166,0)
 S CLASS=3,CONTEXT=1,EARLY=-1,LATE=-1,PERSON=0,OCCLIM=0,SEQUENCE="D",SHOWADD=0,INCUND=0,OLDLST=""
"RTN","HMPDJ02",167,0)
 ;TAKE EXISTING LIST FROM ENCOUNTER CALL AND PRESERVE TO BE APPENDED AFTERWARD
"RTN","HMPDJ02",168,0)
 K DIAGS S DIAGS=""
"RTN","HMPDJ02",169,0)
 D CONTEXT^TIUSRVLO(.DIAGS,CLASS,CONTEXT,DFN,EARLY,LATE,PERSON,OCCLIM,SEQUENCE,SHOWADD,INCUND)
"RTN","HMPDJ02",170,0)
 M DIAGS=^TMP("TIUR",$J)
"RTN","HMPDJ02",171,0)
 ;Go through notes list and use ORWPCE PCE4NOTE to extract diagnosis associated with each encounter to previous problem list (PCE4NOTE^ORWPCE3)
"RTN","HMPDJ02",172,0)
 S LSTNUM=""
"RTN","HMPDJ02",173,0)
 ;THIS CALL WILL EXTRACT ALL THE VISIT INFORMATION TO ^TMP(PXKENC,$J,VISIT)
"RTN","HMPDJ02",174,0)
 N VIEN
"RTN","HMPDJ02",175,0)
 F  S LSTNUM=$O(DIAGS(LSTNUM)) Q:LSTNUM=""  D
"RTN","HMPDJ02",176,0)
 . S NOTEINFO=""
"RTN","HMPDJ02",177,0)
 . S IEN=$P(DIAGS(LSTNUM),"^",1)
"RTN","HMPDJ02",178,0)
 . D PCE4NOTE^ORWPCE3(.NOTEINFO,IEN,DFN)
"RTN","HMPDJ02",179,0)
 . S CNT=0,DIAGCNT=0
"RTN","HMPDJ02",180,0)
 . F  S CNT=$O(NOTEINFO(CNT)) Q:CNT=""  D
"RTN","HMPDJ02",181,0)
 . . Q:$P(NOTEINFO(CNT),"^",1)'["POV"
"RTN","HMPDJ02",182,0)
 . . S DIAGCNT=DIAGCNT+1
"RTN","HMPDJ02",183,0)
 . . S VISITDT=$P($G(NOTEINFO(2)),U,3)  ; get the visit datetime
"RTN","HMPDJ02",184,0)
 . . S ICDCODE=$P(NOTEINFO(CNT),U,2)  ; get the diagnosis code
"RTN","HMPDJ02",185,0)
 . . I $D(ENC(ICDCODE,VISITDT))=0 D
"RTN","HMPDJ02",186,0)
 . . . S VIEN=$$GETVIEN(DFN,VISITDT)
"RTN","HMPDJ02",187,0)
 . . . ;W:VIEN=-1 "Can not find Visit ID for "_NOTEINFO(CNT),!
"RTN","HMPDJ02",188,0)
 . . . S:VIEN'=-1 ENC(ICDCODE,VISITDT)=VIEN_U_$G(DIAGS(LSTNUM)) ;  add to list only if visit ien is valid
"RTN","HMPDJ02",189,0)
 ; KILL DIAGS BECAUSE IT NOW CONTAINS NOTE INFO
"RTN","HMPDJ02",190,0)
 K DIAGS
"RTN","HMPDJ02",191,0)
 M DIAGS=ENC
"RTN","HMPDJ02",192,0)
 ;CLEAN UP ARRAYS
"RTN","HMPDJ02",193,0)
 K NOTEINFO,ENC,DIAG,^TMP("TIUR",$J)
"RTN","HMPDJ02",194,0)
 D GMPLPOV(DFN,.DIAGS,1)  ; Also loop thru V POV file to find extra encounter
"RTN","HMPDJ02",195,0)
 Q
"RTN","HMPDJ02",196,0)
 ;
"RTN","HMPDJ02",197,0)
GMRA1(ID) ; -- allergy/reaction GMRAL(ID)
"RTN","HMPDJ02",198,0)
 N GMRA,HMPY,REAC,X,Y,I,USER,CMMT
"RTN","HMPDJ02",199,0)
 S GMRA=$G(GMRAL(ID)) D EN1^GMRAOR2(ID,"HMPY")
"RTN","HMPDJ02",200,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ02",201,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ02",202,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the allergy domain"
"RTN","HMPDJ02",203,0)
 ;
"RTN","HMPDJ02",204,0)
 S X=$P(HMPY,U,10) I $L(X) S X=$$DATE^HMPDGMRA(X) Q:X<HMPSTART  Q:X>HMPSTOP  S REAC("entered")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ02",205,0)
 S X=$$FAC^HMPD D FACILITY^HMPUTILS(X,"REAC")
"RTN","HMPDJ02",206,0)
 S REAC("kind")="Allergy / Adverse Reaction"
"RTN","HMPDJ02",207,0)
 S REAC("localId")=ID,REAC("uid")=$$SETUID^HMPUTILS("allergy",DFN,ID)
"RTN","HMPDJ02",208,0)
 S (REAC("summary"),REAC("products",1,"name"))=$P(HMPY,U) I $P(GMRA,U,9) D
"RTN","HMPDJ02",209,0)
 . S X=$P(GMRA,U,9),REAC("reference")=X
"RTN","HMPDJ02",210,0)
 . S Y=+$P(X,"(",2) I 'Y,X["PSDRUG" S Y=50
"RTN","HMPDJ02",211,0)
 . S I=$$VUID^HMPD(+X,Y),REAC("products",1,"vuid")=$$SETVURN^HMPUTILS("vuid",I)
"RTN","HMPDJ02",212,0)
 S X=$P(HMPY,U,2) S:$L(X) REAC("originatorName")=X
"RTN","HMPDJ02",213,0)
 S REAC("historical")=$S($E($P(HMPY,U,5))="H":"true",1:"false")
"RTN","HMPDJ02",214,0)
 S X=$P(HMPY,U,6) S:$L(X) REAC("mechanism")=X
"RTN","HMPDJ02",215,0)
 S X=$P(HMPY,U,7) S:$L(X) REAC("typeName")=X
"RTN","HMPDJ02",216,0)
 ; REAC("adverseEventTypeName")=$P(HMPY,U,7)_" "_$P(HMPY,U,6) ;TYPE_MECH
"RTN","HMPDJ02",217,0)
 I $P(HMPY,U,4)="VERIFIED",$P(HMPY,U,9) D
"RTN","HMPDJ02",218,0)
 . S REAC("verified")=$$JSONDT^HMPUTILS($P(HMPY,U,9))
"RTN","HMPDJ02",219,0)
 . S REAC("verifierName")=$P(HMPY,U,8)
"RTN","HMPDJ02",220,0)
 ; severity
"RTN","HMPDJ02",221,0)
 S I=0 F  S I=$O(HMPY("O",I)) Q:I<1  D
"RTN","HMPDJ02",222,0)
 . S X=$G(HMPY("O",I))
"RTN","HMPDJ02",223,0)
 . S REAC("observations",I,"date")=$$JSONDT^HMPUTILS(+X)
"RTN","HMPDJ02",224,0)
 . S REAC("observations",I,"severity")=$P(X,U,2)
"RTN","HMPDJ02",225,0)
 ; reactions
"RTN","HMPDJ02",226,0)
 S I=0 F  S I=$O(GMRAL(ID,"S",I)) Q:I<1  D
"RTN","HMPDJ02",227,0)
 . S X=$G(GMRAL(ID,"S",I))
"RTN","HMPDJ02",228,0)
 . S REAC("reactions",I,"name")=$P(X,";")
"RTN","HMPDJ02",229,0)
 . S Y=$$VUID^HMPD(+$P(X,";",2),120.83)
"RTN","HMPDJ02",230,0)
 . S REAC("reactions",I,"vuid")=$$SETVURN^HMPUTILS("vuid",Y)
"RTN","HMPDJ02",231,0)
 ; drug classes
"RTN","HMPDJ02",232,0)
 S I=0 F  S I=$O(HMPY("V",I)) Q:I<1  D
"RTN","HMPDJ02",233,0)
 . S X=$G(HMPY("V",I))
"RTN","HMPDJ02",234,0)
 . S REAC("drugClasses",I,"code")=$P(X,U)
"RTN","HMPDJ02",235,0)
 . S REAC("drugClasses",I,"name")=$P(X,U,2)
"RTN","HMPDJ02",236,0)
 S I=0 F  S I=$O(HMPY("C",I)) Q:I<1  D
"RTN","HMPDJ02",237,0)
 . S X=$G(HMPY("C",I)),USER=$$VA200^HMPDGMPL($P(X,U,3))
"RTN","HMPDJ02",238,0)
 . S REAC("comments",I,"enteredByUid")=$$SETUID^HMPUTILS("user",,+USER)
"RTN","HMPDJ02",239,0)
 . S REAC("comments",I,"enteredByName")=$P(X,U,3)
"RTN","HMPDJ02",240,0)
 . S REAC("comments",I,"entered")=$$JSONDT^HMPUTILS(+X)
"RTN","HMPDJ02",241,0)
 . K CMMT M CMMT=HMPY("C",I)
"RTN","HMPDJ02",242,0)
 . S REAC("comments",I,"comment")=$$STRING^HMPD(.CMMT)
"RTN","HMPDJ02",243,0)
 I GMRA="" S REAC("removed")="true" ;entered in error
"RTN","HMPDJ02",244,0)
 ; next
"RTN","HMPDJ02",245,0)
 S REAC("lastUpdateTime")=$$EN^HMPSTMP("allergy")
"RTN","HMPDJ02",246,0)
 S REAC("stampTime")=REAC("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ02",247,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ02",248,0)
 I $G(HMPMETA) D ADD^HMPMETA("allergy",REAC("uid"),REAC("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ02",249,0)
 D ADD^HMPDJ("REAC","allergy")
"RTN","HMPDJ02",250,0)
 Q
"RTN","HMPDJ02",251,0)
 ;
"RTN","HMPDJ02",252,0)
NKA ; -- no assessment or NKA [GMRAL=0 or ""]
"RTN","HMPDJ02",253,0)
 N REAC,X
"RTN","HMPDJ02",254,0)
 ;DE2818, ^GMR(120.86 - ICR 3449
"RTN","HMPDJ02",255,0)
 S X=$G(^GMR(120.86,DFN,0)) Q:GMRAL=""!'$P(X,U,2)  ;DE2818, ICR 3449
"RTN","HMPDJ02",256,0)
 S REAC("uid")=$$SETUID^HMPUTILS("obs",DFN,"120.86;"_DFN)
"RTN","HMPDJ02",257,0)
 S REAC("typeCode")="urn:sct:160244002"
"RTN","HMPDJ02",258,0)
 S REAC("typeName")="No known allergies"
"RTN","HMPDJ02",259,0)
 S X=$$FAC^HMPD D FACILITY^HMPUTILS(X,"REAC")
"RTN","HMPDJ02",260,0)
 D ADD^HMPDJ("REAC","allergy")
"RTN","HMPDJ02",261,0)
 Q
"RTN","HMPDJ02",262,0)
 ;
"RTN","HMPDJ02",263,0)
GMV1(ID) ; -- vital/measurement ^UTILITY($J,"GMRVD",HMPIDT,HMPTYP,ID)
"RTN","HMPDJ02",264,0)
 N VIT,HMPY,X0,TYPE,LOC,FAC,X,Y,MRES,MUNT,HIGH,LOW,I
"RTN","HMPDJ02",265,0)
 D GETREC^GMVUTL(.HMPY,ID,1) S X0=$G(HMPY(0))
"RTN","HMPDJ02",266,0)
 ; DE281, ^PXRMINDX(120.5 - ICR 4290
"RTN","HMPDJ02",267,0)
 ; GMRVUT0 returns CLiO data with a pseudo-ID >> get real ID
"RTN","HMPDJ02",268,0)
 I X0="",$G(HMPIDT),$D(HMPTYP) D  ;[from HMPDJ0]
"RTN","HMPDJ02",269,0)
 . N GMRVD S GMRVD=$G(^UTILITY($J,"GMRVD",HMPIDT,HMPTYP,ID))
"RTN","HMPDJ02",270,0)
 . S ID=$O(^PXRMINDX(120.5,"PI",DFN,$P(GMRVD,U,3),+GMRVD,""))
"RTN","HMPDJ02",271,0)
 . I $L(ID) D GETREC^GMVUTL(.HMPY,ID,1) S X0=$G(HMPY(0))
"RTN","HMPDJ02",272,0)
 Q:X0=""
"RTN","HMPDJ02",273,0)
 ;
"RTN","HMPDJ02",274,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ02",275,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ02",276,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the vitals domain"
"RTN","HMPDJ02",277,0)
 S VIT("localId")=ID,VIT("kind")="Vital Sign"
"RTN","HMPDJ02",278,0)
 S VIT("uid")=$$SETUID^HMPUTILS("vital",DFN,ID)
"RTN","HMPDJ02",279,0)
 S VIT("observed")=$$JSONDT^HMPUTILS(+X0)
"RTN","HMPDJ02",280,0)
 S VIT("resulted")=$$JSONDT^HMPUTILS(+$P(X0,U,4))
"RTN","HMPDJ02",281,0)
 S TYPE=$$FIELD^GMVGETVT(+$P(X0,U,3),2)
"RTN","HMPDJ02",282,0)
 S VIT("displayName")=TYPE
"RTN","HMPDJ02",283,0)
 S VIT("typeName")=$$FIELD^GMVGETVT($P(X0,U,3),1)
"RTN","HMPDJ02",284,0)
 S VIT("typeCode")="urn:va:vuid:"_$$FIELD^GMVGETVT($P(X0,U,3),4)
"RTN","HMPDJ02",285,0)
 S X=$P(X0,U,8),VIT("result")=X
"RTN","HMPDJ02",286,0)
 S VIT("units")=$$UNIT^HMPDGMV(TYPE),(MRES,MUNT)=""
"RTN","HMPDJ02",287,0)
 I TYPE="T"  S MUNT="C",MRES=$J(X-32*5/9,0,1) ;EN1^GMRVUTL
"RTN","HMPDJ02",288,0)
 I TYPE="HT" S MUNT="cm",MRES=$J(2.54*X,0,2)  ;EN2^GMRVUTL
"RTN","HMPDJ02",289,0)
 I TYPE="WT" S MUNT="kg",MRES=$J(X/2.2,0,2)   ;EN3^GMRVUTL
"RTN","HMPDJ02",290,0)
 I TYPE="CG" S MUNT="cm",MRES=$J(2.54*X,0,2)
"RTN","HMPDJ02",291,0)
 S:MRES VIT("metricResult")=MRES,VIT("metricUnits")=MUNT
"RTN","HMPDJ02",292,0)
 S X=$$RANGE^HMPDGMV(TYPE) I $L(X) S VIT("high")=$P(X,U),VIT("low")=$P(X,U,2)
"RTN","HMPDJ02",293,0)
 S VIT("summary")=VIT("typeName")_" "_VIT("result")_" "_VIT("units")
"RTN","HMPDJ02",294,0)
 F I=1:1:$L(HMPY(5),U) S X=$P(HMPY(5),U,I) I X D
"RTN","HMPDJ02",295,0)
 . S VIT("qualifiers",I,"name")=$$FIELD^GMVGETQL(X,1)
"RTN","HMPDJ02",296,0)
 . S VIT("qualifiers",I,"vuid")=$$FIELD^GMVGETQL(X,3)
"RTN","HMPDJ02",297,0)
 ;US4338 - add pulse ox qualifier if it exists. name component is required. vuid is not per Thomas Loth
"RTN","HMPDJ02",298,0)
 I $P(X0,U,10) S VIT("qualifiers",I+1,"name")=$P(X0,U,10)
"RTN","HMPDJ02",299,0)
 I $G(HMPY(2)) S VIT("removed")="true"        ;entered in error
"RTN","HMPDJ02",300,0)
 S LOC=+$P(X0,U,5),FAC=$$FAC^HMPD(LOC)
"RTN","HMPDJ02",301,0)
 S VIT("locationUid")=$$SETUID^HMPUTILS("location",,LOC)
"RTN","HMPDJ02",302,0)
 S VIT("locationName")=$S(LOC:$$GET1^DIQ(44,LOC_",",.01),1:"unknown")  ;DE2818, ICR 10040
"RTN","HMPDJ02",303,0)
 N USERID S USERID=$P(HMPY(0),U,6)
"RTN","HMPDJ02",304,0)
 I $G(USERID) D
"RTN","HMPDJ02",305,0)
 . S VIT("enteredByUid")=$$SETUID^HMPUTILS("user",,USERID)
"RTN","HMPDJ02",306,0)
 . S VIT("enteredByName")=$$GET1^DIQ(200,USERID_",",.01)  ;DE2818, ICR 10060
"RTN","HMPDJ02",307,0)
 D FACILITY^HMPUTILS(FAC,"VIT")
"RTN","HMPDJ02",308,0)
 S VIT("lastUpdateTime")=$$EN^HMPSTMP("vital")
"RTN","HMPDJ02",309,0)
 S VIT("stampTime")=VIT("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ02",310,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ02",311,0)
 I $G(HMPMETA) D ADD^HMPMETA("vital",VIT("uid"),VIT("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ02",312,0)
 D ADD^HMPDJ("VIT","vital")
"RTN","HMPDJ02",313,0)
 Q
"RTN","HMPDJ02",314,0)
 ;
"RTN","HMPDJ02",315,0)
HMP(COLL) ; -- HMP Patient Objects
"RTN","HMPDJ02",316,0)
 N ID I $L($G(HMPID)) D  Q
"RTN","HMPDJ02",317,0)
 . S ID=+HMPID I 'ID S ID=+$O(^HMP(800000.1,"B",HMPID,0)) ;IEN or UID
"RTN","HMPDJ02",318,0)
 . D:ID HMP1(800000.1,ID)
"RTN","HMPDJ02",319,0)
 Q:$G(COLL)=""  ;error
"RTN","HMPDJ02",320,0)
 S ID=0 F  S ID=$O(^HMP(800000.1,"C",DFN,COLL,ID)) Q:ID<1  D HMP1(800000.1,ID)
"RTN","HMPDJ02",321,0)
 Q
"RTN","HMPDJ02",322,0)
HMP1(FNUM,ID) ; -- [patient] object
"RTN","HMPDJ02",323,0)
 N I,X,HMPY
"RTN","HMPDJ02",324,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ02",325,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=$G(DFN)
"RTN","HMPDJ02",326,0)
 S ERRMSG="A problem occurred retreiving record "_ID_" for the HMP domain"
"RTN","HMPDJ02",327,0)
 S I=0 F  S I=$O(^HMP(FNUM,ID,1,I)) Q:I<1  S X=$G(^(I,0)),HMPY(I)=X
"RTN","HMPDJ02",328,0)
 I $D(HMPY) D  ;already encoded JSON
"RTN","HMPDJ02",329,0)
 . S HMPI=HMPI+1 S:HMPI>1 @HMP@(HMPI,.3)=","
"RTN","HMPDJ02",330,0)
 . M @HMP@(HMPI)=HMPY
"RTN","HMPDJ02",331,0)
 . ; -- chunk data if from DQINIT^HMPDJFSP ; i.e. HMPCHNK defined ;*S68-JCH*
"RTN","HMPDJ02",332,0)
 . D CHNKCHK^HMPDJFSP(.HMP,.HMPI) ;*S68-JCH*
"RTN","HMPDJ02",333,0)
 Q
"RTN","HMPDJ03")
0^36^B97739485
"RTN","HMPDJ03",1,0)
HMPDJ03 ;SLC/MKB,ASMR/RRB - Consults,ClinProcedures,CLiO;Nov 09, 2015 13:00:03
"RTN","HMPDJ03",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ03",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ03",4,0)
 ;
"RTN","HMPDJ03",5,0)
 ; External References          DBIA#
"RTN","HMPDJ03",6,0)
 ; -------------------          -----
"RTN","HMPDJ03",7,0)
 ; ^SC(                         10040
"RTN","HMPDJ03",8,0)
 ; ^TIU(8925.1                   5677
"RTN","HMPDJ03",9,0)
 ; ^VA(200                      10060
"RTN","HMPDJ03",10,0)
 ; %DT                          10003
"RTN","HMPDJ03",11,0)
 ; DILFD                         2055
"RTN","HMPDJ03",12,0)
 ; DIQ                           2056
"RTN","HMPDJ03",13,0)
 ; GMRCAPI                       6082
"RTN","HMPDJ03",14,0)
 ; GMRCGUIB                      2980
"RTN","HMPDJ03",15,0)
 ; GMRCSLM1,^TMP("GMRCR"         2740
"RTN","HMPDJ03",16,0)
 ; MCARUTL3                      3280
"RTN","HMPDJ03",17,0)
 ; MDPS1,^TMP("MDHSP"            4230
"RTN","HMPDJ03",18,0)
 ; ORX8                          2467
"RTN","HMPDJ03",19,0)
 ; TIULQ                         2693
"RTN","HMPDJ03",20,0)
 ; TIUSRVLO                      2834
"RTN","HMPDJ03",21,0)
 ; XLFSTR                       10104
"RTN","HMPDJ03",22,0)
 ; XUAF4                         2171
"RTN","HMPDJ03",23,0)
 ;
"RTN","HMPDJ03",24,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ03",25,0)
 Q
"RTN","HMPDJ03",26,0)
 ;
"RTN","HMPDJ03",27,0)
GMRC1(ID) ; -- consult/request HMPX=^TMP("GMRCR",$J,"CS",HMPN,0)
"RTN","HMPDJ03",28,0)
 N CONS,ORDER,HMPD,X0,X,HMPA,DA,ACT0,ACT2,ACT3,ACT,HMPEASON,HMPJ,HMPTIU
"RTN","HMPDJ03",29,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ03",30,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ03",31,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the consults domain"
"RTN","HMPDJ03",32,0)
 ;
"RTN","HMPDJ03",33,0)
 S CONS("localId")=+HMPX,CONS("uid")=$$SETUID^HMPUTILS("consult",DFN,+HMPX)
"RTN","HMPDJ03",34,0)
 S CONS("dateTime")=$$JSONDT^HMPUTILS($P(HMPX,U,2))
"RTN","HMPDJ03",35,0)
 S CONS("statusName")=$P(HMPX,U,3),CONS("service")=$P(HMPX,U,4)
"RTN","HMPDJ03",36,0)
 S CONS("consultProcedure")=$P(HMPX,U,5)
"RTN","HMPDJ03",37,0)
 I $P(HMPX,U,6)="*" S CONS("interpretation")="SIGNIFICANT FINDINGS"
"RTN","HMPDJ03",38,0)
 S CONS("typeName")=$P(HMPX,U,7),CONS("category")=$P(HMPX,U,9)
"RTN","HMPDJ03",39,0)
 S ORDER=+$P(HMPX,U,8),CONS("orderName")=$P($$OI^ORX8(ORDER),U,2)
"RTN","HMPDJ03",40,0)
 S CONS("orderUid")=$$SETUID^HMPUTILS("order",DFN,ORDER)
"RTN","HMPDJ03",41,0)
 D GET^GMRCAPI(.HMPD,+HMPX) S X0=$G(HMPD(0)) ;=^GMR(123,ID,0)
"RTN","HMPDJ03",42,0)
 S X=$P(X0,U,6) S:X CONS("fromService")=$$GET1^DIQ(44,X_",",.01)  ;DE2818
"RTN","HMPDJ03",43,0)
 S X=$P(X0,U,9) S:X]"" CONS("urgency")=X
"RTN","HMPDJ03",44,0)
 S X=$P(X0,U,10) S:X]"" CONS("place")=X
"RTN","HMPDJ03",45,0)
 S X=$P(X0,U,11) S:X CONS("attention")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ03",46,0)
 S X=$P(X0,U,13) S:X]"" CONS("lastAction")=X
"RTN","HMPDJ03",47,0)
 S X=$P(X0,U,14) I X D  ;ordering provider
"RTN","HMPDJ03",48,0)
 . S CONS("providerUid")=$$SETUID^HMPUTILS("user",,+X)
"RTN","HMPDJ03",49,0)
 . S CONS("providerName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ03",50,0)
 S X=$P(X0,U,18) I $L(X) D
"RTN","HMPDJ03",51,0)
 . S CONS("patientClassCode")="urn:va:patient-class:"_$S(X="I":"IMP",1:"AMB")
"RTN","HMPDJ03",52,0)
 . S CONS("patientClassName")=$S(X="I":"Inpatient",1:"Ambulatory")
"RTN","HMPDJ03",53,0)
 S X=+$P(X0,U,24) S:X CONS("earliestDate")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ03",54,0)
 I $P(HMPX,U,9)="M" S CONS("clinicalProcedure")=$G(HMPD(1))
"RTN","HMPDJ03",55,0)
 I $D(HMPD(20)) M HMPEASON=HMPD(20) S CONS("reason")=$$STRING^HMPD(.HMPEASON)
"RTN","HMPDJ03",56,0)
 S X=$G(HMPD(30)) S:$L(X) CONS("provisionalDx")=X
"RTN","HMPDJ03",57,0)
 ; 
"RTN","HMPDJ03",58,0)
 I $P(X0,U,23) D  ;inter-facility
"RTN","HMPDJ03",59,0)
 . N IFC S X=$$NS^XUAF4($P(X0,U,23))
"RTN","HMPDJ03",60,0)
 . S CONS("remote","facilityCode")=$P(X,U,2),CONS("remote","facilityName")=$P(X,U)
"RTN","HMPDJ03",61,0)
 . S:$P(X0,U,22) CONS("remote","id")=$P(X0,U,22)
"RTN","HMPDJ03",62,0)
 . S IFC=$$IFC^GMRCAPI(ID)
"RTN","HMPDJ03",63,0)
 . S X=$P(IFC,U) S:$L(X) CONS("remote","service")=X
"RTN","HMPDJ03",64,0)
 . S X=$P(IFC,U,5) S:$L(X) CONS("remote","role")=$S(X="P":"Requesting facility",1:"Consulting facility")
"RTN","HMPDJ03",65,0)
 . S CONS("remote","providerName")=$P(IFC,U,6)
"RTN","HMPDJ03",66,0)
 . S X=$P(IFC,U,2) S:$L(X) CONS("remote","providerphone")=X
"RTN","HMPDJ03",67,0)
 . S X=$P(IFC,U,3) S:$L(X) CONS("remote","providerpager")=X
"RTN","HMPDJ03",68,0)
 ;
"RTN","HMPDJ03",69,0)
 D ACT^GMRCAPI(.HMPA,ID)
"RTN","HMPDJ03",70,0)
 S DA=0 F  S DA=$O(HMPA(DA)) Q:DA<1  D
"RTN","HMPDJ03",71,0)
 . S ACT0=$G(HMPA(DA,0)),ACT2=$G(HMPA(DA,2)),ACT3=$G(HMPA(DA,3)) K ACT
"RTN","HMPDJ03",72,0)
 . I $L(ACT2),$P(X0,U,23) S X=$$NS^XUAF4($P(X0,U,23)),ACT("facilityCode")=$P(X,U,2),ACT("facilityName")=$P(X,U)
"RTN","HMPDJ03",73,0)
 . S ACT("name")=$P(ACT0,U,2)
"RTN","HMPDJ03",74,0)
 . S ACT("entered")=$$JSONDT^HMPUTILS($P(ACT0,U))
"RTN","HMPDJ03",75,0)
 . S ACT("dateTime")=$$JSONDT^HMPUTILS($P(ACT0,U,3))
"RTN","HMPDJ03",76,0)
 . S:$L($P(ACT2,U,3)) ACT("timeZone")=$P(ACT2,U,3)
"RTN","HMPDJ03",77,0)
 . I $L(ACT2) S ACT("enteredBy")=$P(ACT2,U),ACT("responsible")=$P(ACT2,U,2)
"RTN","HMPDJ03",78,0)
 . E  D  ;remote vs. local users
"RTN","HMPDJ03",79,0)
 .. S X=+$P(ACT0,U,4) S:X ACT("responsible")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ03",80,0)
 .. S X=+$P(ACT0,U,5) S:X ACT("enteredBy")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ03",81,0)
 . S X=$S($L(ACT3):ACT3,1:$P(ACT0,U,6)) S:$L(X) ACT("forwardedFrom")=X
"RTN","HMPDJ03",82,0)
 . S X=$P(ACT0,U,7) S:X ACT("previousAttention")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ03",83,0)
 . S X=$P(ACT0,U,8) S:X ACT("device")=$$GET1^DIQ(3.5,X_",",.01)
"RTN","HMPDJ03",84,0)
 . S X=$P(ACT0,U,9) I X,X["TIU" S ACT("resultUid")=$$SETUID^HMPUTILS("document",DFN,+X)
"RTN","HMPDJ03",85,0)
 . I $D(HMPA(DA,1)) M HMPEASON=HMPA(DA,1) S ACT("comment")=$$STRING^HMPD(.HMPEASON)
"RTN","HMPDJ03",86,0)
 . M CONS("activity",DA)=ACT
"RTN","HMPDJ03",87,0)
 ;
"RTN","HMPDJ03",88,0)
 S HMPJ=0 F  S HMPJ=$O(HMPD(50,HMPJ)) Q:HMPJ<1  S X=$G(HMPD(50,HMPJ)) D
"RTN","HMPDJ03",89,0)
 . Q:'$D(@(U_$P(X,";",2)_+X_")"))  ;text deleted
"RTN","HMPDJ03",90,0)
 . S CONS("results",HMPJ,"uid")=$$SETUID^HMPUTILS("document",DFN,+X)
"RTN","HMPDJ03",91,0)
 . D EXTRACT^TIULQ(+X,"HMPTIU",,.01)
"RTN","HMPDJ03",92,0)
 . S CONS("results",HMPJ,"localTitle")=$G(HMPTIU(+X,.01,"E"))
"RTN","HMPDJ03",93,0)
 S X=$P(X0,U,21),X=$S(X:$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U),1:$$FAC^HMPD)
"RTN","HMPDJ03",94,0)
 D FACILITY^HMPUTILS(X,"CONS")
"RTN","HMPDJ03",95,0)
 S CONS("lastUpdateTime")=$$EN^HMPSTMP("consult")
"RTN","HMPDJ03",96,0)
 S CONS("stampTime")=CONS("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ03",97,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ03",98,0)
 I $G(HMPMETA) D ADD^HMPMETA("consult",CONS("uid"),CONS("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ03",99,0)
 D ADD^HMPDJ("CONS","consult")
"RTN","HMPDJ03",100,0)
 Q
"RTN","HMPDJ03",101,0)
 ;
"RTN","HMPDJ03",102,0)
MDPS1(DFN,BEG,END,MAX) ; -- perform CP search (scope variables)
"RTN","HMPDJ03",103,0)
 N MCARCODE,MCARDT,MCARPROC,MCESKEY,MCESSEC,MCFILE,MDC,MDIMG,RES
"RTN","HMPDJ03",104,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDJ03",105,0)
 K ^TMP("MDHSP",$J) S RES=""
"RTN","HMPDJ03",106,0)
 D EN1^MDPS1(.RES,DFN,BEG,END,MAX,"",0) ;RES=^TMP("MDHSP",$J)
"RTN","HMPDJ03",107,0)
 Q
"RTN","HMPDJ03",108,0)
 ;
"RTN","HMPDJ03",109,0)
MC1(ID) ; -- clinical procedure HMPX=^TMP("MDHSP",$J,HMPN)
"RTN","HMPDJ03",110,0)
 N X,Y,%DT,DATE,RTN,GBL,CONS,TIUN,HMPD,X0,PROC,HMPT,LOC,FAC
"RTN","HMPDJ03",111,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ03",112,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ03",113,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the clinical procedure domain"
"RTN","HMPDJ03",114,0)
 ;
"RTN","HMPDJ03",115,0)
 S RTN=$P(HMPX,U,3,4) Q:RTN="PRPRO^MDPS4"  ;skip non-CP items
"RTN","HMPDJ03",116,0)
 S X=$P(HMPX,U,6),%DT="TXS" D ^%DT Q:Y'>0  S DATE=Y
"RTN","HMPDJ03",117,0)
 S GBL=+$P(HMPX,U,2)_";"_$S(RTN="PR702^MDPS1":"MDD(702,",1:$$ROOT^HMPDMC(DFN,$P(HMPX,U,11),DATE))
"RTN","HMPDJ03",118,0)
 Q:'GBL  I $G(ID),ID'=GBL Q                ;unknown, or not requested
"RTN","HMPDJ03",119,0)
 ;
"RTN","HMPDJ03",120,0)
 S CONS=+$P(HMPX,U,13) D:CONS DOCLIST^GMRCGUIB(.HMPD,CONS) S X0=$G(HMPD(0)) ;=^GMR(123,ID,0)
"RTN","HMPDJ03",121,0)
 S TIUN=+$P(HMPX,U,14) S:TIUN TIUN=TIUN_U_$$RESOLVE^TIUSRVLO(TIUN)
"RTN","HMPDJ03",122,0)
 S PROC("localId")=GBL,PROC("category")="CP"
"RTN","HMPDJ03",123,0)
 S PROC("uid")=$$SETUID^HMPUTILS("procedure",DFN,GBL)
"RTN","HMPDJ03",124,0)
 S PROC("name")=$P(HMPX,U),PROC("dateTime")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ03",125,0)
 S X=$P(HMPX,U,7) S:$L(X) PROC("interpretation")=X
"RTN","HMPDJ03",126,0)
 S PROC("kind")="Procedure"
"RTN","HMPDJ03",127,0)
 I CONS,X0 D
"RTN","HMPDJ03",128,0)
 . N HMPJ S PROC("requested")=$$JSONDT^HMPUTILS(+X0)
"RTN","HMPDJ03",129,0)
 . S PROC("consultUid")=$$SETUID^HMPUTILS("consult",DFN,CONS)
"RTN","HMPDJ03",130,0)
 . S PROC("orderUid")=$$SETUID^HMPUTILS("order",DFN,+$P(X0,U,3))
"RTN","HMPDJ03",131,0)
 . S PROC("statusName")=$$EXTERNAL^DILFD(123,8,,$P(X0,U,12))
"RTN","HMPDJ03",132,0)
 . S HMPJ=0 F  S HMPJ=$O(HMPD(50,HMPJ)) Q:HMPJ<1  S X=+$G(HMPD(50,HMPJ)) D
"RTN","HMPDJ03",133,0)
 .. D NOTE(X)
"RTN","HMPDJ03",134,0)
 .. S:'TIUN TIUN=X_U_$$RESOLVE^TIUSRVLO(X)
"RTN","HMPDJ03",135,0)
 I TIUN D
"RTN","HMPDJ03",136,0)
 . S X=$P(TIUN,U,5) I X D
"RTN","HMPDJ03",137,0)
 .. S PROC("providers",1,"providerUid")=$$SETUID^HMPUTILS("user",,+X)
"RTN","HMPDJ03",138,0)
 .. S PROC("providers",1,"providerName")=$P(X,";",3)
"RTN","HMPDJ03",139,0)
 . S:$P(TIUN,U,11) PROC("hasImages")="true"
"RTN","HMPDJ03",140,0)
 . K HMPT D EXTRACT^TIULQ(+TIUN,"HMPT",,".03;.05;1211",,,"I")
"RTN","HMPDJ03",141,0)
 . S X=+$G(HMPT(+TIUN,.03,"I")),PROC("encounterUid")=$$SETUID^HMPUTILS("visit",DFN,X)
"RTN","HMPDJ03",142,0)
 . S LOC=+$G(HMPT(+TIUN,1211,"I")) I LOC S LOC=LOC_U_$$GET1^DIQ(44,LOC_",",.01)  ;DE2818
"RTN","HMPDJ03",143,0)
 . E  S X=$P(TIUN,U,6) S:$L(X) LOC=+$O(^SC("B",X,0))_U_X  ; DE2818, ICR 10040
"RTN","HMPDJ03",144,0)
 . S:LOC PROC("locationUid")=$$SETUID^HMPUTILS("location",,+LOC),PROC("locationName")=$P(LOC,U,2),FAC=$$FAC^HMPD(+LOC)
"RTN","HMPDJ03",145,0)
 . I '$D(PROC("statusName")) S X=+$G(HMPT(+TIUN,.05,"I")),PROC("statusName")=$S(X<6:"PARTIAL RESULTS",1:"COMPLETE")
"RTN","HMPDJ03",146,0)
 . I '$G(PROC("results",+TIUN)) D NOTE(+TIUN)
"RTN","HMPDJ03",147,0)
 ; if no consult or note/visit ...
"RTN","HMPDJ03",148,0)
 S:'$D(PROC("statusName")) PROC("statusName")="COMPLETE"
"RTN","HMPDJ03",149,0)
 I '$D(FAC) S X=$P(X0,U,21),FAC=$S(X:$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U),1:$$FAC^HMPD)
"RTN","HMPDJ03",150,0)
 D FACILITY^HMPUTILS(FAC,"PROC")
"RTN","HMPDJ03",151,0)
 S PROC("lastUpdateTime")=$$EN^HMPSTMP("procedure")
"RTN","HMPDJ03",152,0)
 S PROC("stampTime")=PROC("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ03",153,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ03",154,0)
 I $G(HMPMETA) D ADD^HMPMETA("procedure",PROC("uid"),PROC("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ03",155,0)
 D ADD^HMPDJ("PROC","procedure")
"RTN","HMPDJ03",156,0)
 Q
"RTN","HMPDJ03",157,0)
 ;
"RTN","HMPDJ03",158,0)
NOTE(DA) ; -- add TIU note info
"RTN","HMPDJ03",159,0)
 N HMPT,TEXT
"RTN","HMPDJ03",160,0)
 D EXTRACT^TIULQ(DA,"HMPT",,.01)
"RTN","HMPDJ03",161,0)
 S PROC("results",DA,"uid")=$$SETUID^HMPUTILS("document",+$G(DFN),DA)
"RTN","HMPDJ03",162,0)
 S PROC("results",DA,"localTitle")=$G(HMPT(DA,.01,"E"))
"RTN","HMPDJ03",163,0)
 Q
"RTN","HMPDJ03",164,0)
 ;
"RTN","HMPDJ03",165,0)
MDC1(ID) ; -- clinical observation
"RTN","HMPDJ03",166,0)
 N GUID,CLIO,HMPC,HMPT,LOC,FAC,I,X,Y
"RTN","HMPDJ03",167,0)
 S GUID=$G(ID) Q:GUID=""  ;invalid GUID
"RTN","HMPDJ03",168,0)
 D QRYOBS^HMPDMDC("HMPC",GUID) Q:'$D(HMPC)  ;doesn't exist
"RTN","HMPDJ03",169,0)
 Q:$L($G(HMPC("PARENT_ID","E")))            ;PARENT also in list
"RTN","HMPDJ03",170,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ03",171,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ03",172,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the clinical observation domain"
"RTN","HMPDJ03",173,0)
 ;
"RTN","HMPDJ03",174,0)
 S CLIO("localId")=GUID,CLIO("uid")=$$SETUID^HMPUTILS("obs",DFN,GUID)
"RTN","HMPDJ03",175,0)
 S X=$G(HMPC("TERM_ID","I")) S:X CLIO("typeVuid")="urn:va:vuid:"_X
"RTN","HMPDJ03",176,0)
 S CLIO("typeCode")="urn:va:clioterminology:"_$G(HMPC("TERM_ID","GUID"))
"RTN","HMPDJ03",177,0)
 S CLIO("typeName")=$G(HMPC("TERM_ID","E"))
"RTN","HMPDJ03",178,0)
 S CLIO("result")=$G(HMPC("SVALUE","E"))
"RTN","HMPDJ03",179,0)
 S X=$G(HMPC("UNIT_ID","ABBV")) S:$L(X) CLIO("units")=X
"RTN","HMPDJ03",180,0)
 S X=$G(HMPC("ENTERED_DATE_TIME","I")),CLIO("entered")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ03",181,0)
 S X=$G(HMPC("OBSERVED_DATE_TIME","I")),CLIO("observed")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ03",182,0)
 D QRYTYPES^HMPDMDC("HMPT")
"RTN","HMPDJ03",183,0)
 F I=3,5 S X=$G(HMPT(I,"XML")) I $L($G(HMPC(X,"E"))) D
"RTN","HMPDJ03",184,0)
 . S Y=HMPT(I,"NAME"),Y=$S(Y="LOCATION":"bodySite",1:$$LOW^XLFSTR(Y))
"RTN","HMPDJ03",185,0)
 . S CLIO(Y_"Code")=HMPC(X,"I"),CLIO(Y_"Name")=HMPC(X,"E")
"RTN","HMPDJ03",186,0)
 F I=4,6,7 S X=$G(HMPT(I,"XML")) I $L($G(HMPC(X,"E"))) D
"RTN","HMPDJ03",187,0)
 . S CLIO("qualifiers",I,"type")=$$LOW^XLFSTR(HMPT(I,"NAME"))
"RTN","HMPDJ03",188,0)
 . S CLIO("qualifiers",I,"code")=HMPC(X,"I")
"RTN","HMPDJ03",189,0)
 . S CLIO("qualifiers",I,"name")=HMPC(X,"E")
"RTN","HMPDJ03",190,0)
 S X=$G(HMPC("RANGE","E")) I $L(X) D
"RTN","HMPDJ03",191,0)
 . S Y=$S(X="Out of Bounds Low":"<",X="Out of Bounds High":">",1:$E(X))
"RTN","HMPDJ03",192,0)
 . S CLIO("interpretationCode")="urn:hl7:observation-interpretation:"_Y
"RTN","HMPDJ03",193,0)
 . S CLIO("interpretationName")=$S(X="<":"Low off scale",X=">":"High off scale",1:X)
"RTN","HMPDJ03",194,0)
 ; X=$G(HMPC("STATUS","E")) S:$L(X) CLIO("resultStatus")=$S(X="unverified":"active",1:"complete")
"RTN","HMPDJ03",195,0)
 I $D(HMPC("SUPP_PAGE")) D  ;add set info
"RTN","HMPDJ03",196,0)
 . S CLIO("setID")=$G(HMPC("SUPP_PAGE","GUID"))
"RTN","HMPDJ03",197,0)
 . S CLIO("setName")=$G(HMPC("SUPP_PAGE","DISPLAY_NAME"))
"RTN","HMPDJ03",198,0)
 . S X=$G(HMPC("SUPP_PAGE","TYPE")) S:$L(X) CLIO("setType")=X
"RTN","HMPDJ03",199,0)
 . S X=$G(HMPC("SUPP_PAGE","ACTIVATED_DATE_TIME")) S:X CLIO("setStart")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ03",200,0)
 . S X=$G(HMPC("SUPP_PAGE","DEACTIVATED_DATE_TIME")) S:X CLIO("setStop")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ03",201,0)
 S CLIO("statusCode")="urn:va:observation-status:complete",CLIO("statusName")="complete"
"RTN","HMPDJ03",202,0)
 S LOC=$G(HMPC("HOSPITAL_LOCATION_ID","I")),FAC=$$FAC^HMPD(LOC)
"RTN","HMPDJ03",203,0)
 S CLIO("locationUid")=$$SETUID^HMPUTILS("location",,LOC)
"RTN","HMPDJ03",204,0)
 S CLIO("locationName")=$G(HMPC("HOSPITAL_LOCATION_ID","E"))
"RTN","HMPDJ03",205,0)
 D FACILITY^HMPUTILS(FAC,"CLIO")
"RTN","HMPDJ03",206,0)
 S X=$G(HMPC("COMMENT","E")) S:$L(X) CLIO("comment")=X
"RTN","HMPDJ03",207,0)
 S CLIO("lastUpdateTime")=$$EN^HMPSTMP("obs") ; RHL 20141231
"RTN","HMPDJ03",208,0)
 S CLIO("stampTime")=CLIO("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ03",209,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ03",210,0)
 I $G(HMPMETA) D ADD^HMPMETA("obs",CLIO("uid"),CLIO("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ03",211,0)
 D ADD^HMPDJ("CLIO","obs")
"RTN","HMPDJ03",212,0)
 Q
"RTN","HMPDJ04")
0^37^B86219849
"RTN","HMPDJ04",1,0)
HMPDJ04 ;SLC/MKB,ASMR/RRB - Appointments,Visits;Nov 12, 2015 15:21:17
"RTN","HMPDJ04",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ04",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ04",4,0)
 ;
"RTN","HMPDJ04",5,0)
 ; External References          DBIA#
"RTN","HMPDJ04",6,0)
 ; -------------------          -----
"RTN","HMPDJ04",7,0)
 ; ^AUPNVSIT                     2028
"RTN","HMPDJ04",8,0)
 ; ^DGS(41.1                     3796
"RTN","HMPDJ04",9,0)
 ; ^DIC(42                      10039
"RTN","HMPDJ04",10,0)
 ; ^SC                          10040
"RTN","HMPDJ04",11,0)
 ; ^VA(200                      10060
"RTN","HMPDJ04",12,0)
 ; DIQ                           2056
"RTN","HMPDJ04",13,0)
 ; ICPTCOD                       1995
"RTN","HMPDJ04",14,0)
 ; PXAPI,^TMP("PXKENC"           1894
"RTN","HMPDJ04",15,0)
 ; SDAMA301                      4433
"RTN","HMPDJ04",16,0)
 ; XLFDT                        10103
"RTN","HMPDJ04",17,0)
 ; XUAF4                         2171
"RTN","HMPDJ04",18,0)
 ; EDP(230                       6275
"RTN","HMPDJ04",19,0)
 ;
"RTN","HMPDJ04",20,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ04",21,0)
 Q
"RTN","HMPDJ04",22,0)
 ;
"RTN","HMPDJ04",23,0)
SDAM1 ; -- appointment ^TMP($J,"SDAMA301",DFN,HMPDT)
"RTN","HMPDJ04",24,0)
 N NODE,HLOC,APPT,X,STS,CLS,FAC,SV,PRV
"RTN","HMPDJ04",25,0)
 S NODE=$G(^TMP($J,"SDAMA301",DFN,HMPDT))
"RTN","HMPDJ04",26,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ04",27,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ04",28,0)
 S ERRMSG="A problem occurred converting a record for the appointment domain"
"RTN","HMPDJ04",29,0)
 ;
"RTN","HMPDJ04",30,0)
 S HLOC=$P(NODE,U,2),X="A;"_HMPDT_";"_+HLOC
"RTN","HMPDJ04",31,0)
 I $L($G(ID)),$P(ID,";",1,3)'=X Q
"RTN","HMPDJ04",32,0)
 S APPT("localId")=X,APPT("uid")=$$SETUID^HMPUTILS("appointment",DFN,X)
"RTN","HMPDJ04",33,0)
 S X=$P(NODE,U,10),APPT("typeCode")=$P(X,";"),APPT("typeName")=$P(X,";",2)
"RTN","HMPDJ04",34,0)
 S STS=$P(NODE,U,3),CLS=$S($E(STS)="I":"I",1:"O")
"RTN","HMPDJ04",35,0)
 S STS=$P($$STATUS^SDAMA308(DFN,HMPDT,+HLOC),";",1,2) ;DE2552 ASF 2015/11/16 handles "scheduled/kept" issue; ICR in-progress
"RTN","HMPDJ04",36,0)
 S APPT("dateTime")=$$JSONDT^HMPUTILS(HMPDT)
"RTN","HMPDJ04",37,0)
 S:$L($P(NODE,U,6)) APPT("comment")=$P(NODE,U,6)
"RTN","HMPDJ04",38,0)
 S:$P(NODE,U,9) APPT("checkIn")=$$JSONDT^HMPUTILS($P(NODE,U,9))
"RTN","HMPDJ04",39,0)
 S:$P(NODE,U,11) APPT("checkOut")=$$JSONDT^HMPUTILS($P(NODE,U,11))
"RTN","HMPDJ04",40,0)
 I $L(ID,";")>3 S APPT("reasonName")=$P(ID,";",4),PRV=+$P(ID,";",5) ;from SDAM event
"RTN","HMPDJ04",41,0)
 S FAC=$$FAC^HMPD(+HLOC) D FACILITY^HMPUTILS(FAC,"APPT") I HLOC D
"RTN","HMPDJ04",42,0)
 . S APPT("locationName")=$P(HLOC,";",2)
"RTN","HMPDJ04",43,0)
 . S APPT("locationUid")=$$SETUID^HMPUTILS("location",,+HLOC)
"RTN","HMPDJ04",44,0)
 . S X=$$GET1^DIQ(44,(+HLOC)_",",1) S:X]"" APPT("shortLocationName")=X  ;DE2818, (#1) ABBREVIATION
"RTN","HMPDJ04",45,0)
 . S X=$$AMIS^HMPDVSIT(+$P(NODE,U,13))
"RTN","HMPDJ04",46,0)
 . S:$L(X) APPT("stopCodeUid")="urn:va:stop-code:"_$P(X,U),APPT("stopCodeName")=$P(X,U,2)
"RTN","HMPDJ04",47,0)
 . S SV=$$GET1^DIQ(44,+HLOC_",",9.5,"I")
"RTN","HMPDJ04",48,0)
 . I SV S APPT("service")=$$SERV^HMPDSDAM(SV)
"RTN","HMPDJ04",49,0)
 . ;find default provider
"RTN","HMPDJ04",50,0)
 . S:'$G(PRV) PRV=+$$GET1^DIQ(44,+HLOC_",",16,"I") I 'PRV D
"RTN","HMPDJ04",51,0)
 .. N HMPP,I,FIRST
"RTN","HMPDJ04",52,0)
 .. D GETS^DIQ(44,+HLOC_",","2600*","I","HMPP")
"RTN","HMPDJ04",53,0)
 .. S FIRST=$O(HMPP(44.1,"")),I=""
"RTN","HMPDJ04",54,0)
 .. F  S I=$O(HMPP(44.1,I)) Q:I=""  I $G(HMPP(44.1,I,.02,"I")) S PRV=$G(HMPP(44.1,I,.01,"I")) Q
"RTN","HMPDJ04",55,0)
 .. I 'PRV,FIRST S PRV=$G(HMPP(44.1,FIRST,.01,"I"))
"RTN","HMPDJ04",56,0)
 I $G(PRV) S APPT("providers",1,"providerUid")=$$SETUID^HMPUTILS("user",,PRV),APPT("providers",1,"providerName")=$$GET1^DIQ(200,PRV_",",.01)  ;DE2818
"RTN","HMPDJ04",57,0)
 S APPT("patientClassCode")="urn:va:patient-class:"_$S(CLS="I":"IMP",1:"AMB")
"RTN","HMPDJ04",58,0)
 S APPT("patientClassName")=$S(CLS="I":"Inpatient",1:"Ambulatory")
"RTN","HMPDJ04",59,0)
 S APPT("categoryCode")="urn:va:encounter-category:OV",APPT("categoryName")="Outpatient Visit"
"RTN","HMPDJ04",60,0)
 S APPT("appointmentStatus")=$P(STS,";",2)
"RTN","HMPDJ04",61,0)
 S APPT("lastUpdateTime")=$$EN^HMPSTMP("appointment") ;RHL 20150102
"RTN","HMPDJ04",62,0)
 S APPT("stampTime")=APPT("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ04",63,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ04",64,0)
 I $G(HMPMETA) D ADD^HMPMETA("appointment",APPT("uid"),APPT("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04",65,0)
 D ADD^HMPDJ("APPT","appointment")
"RTN","HMPDJ04",66,0)
 Q
"RTN","HMPDJ04",67,0)
 ;
"RTN","HMPDJ04",68,0)
DGS ; scheduled admissions [from APPOINTM^HMPDJ0]
"RTN","HMPDJ04",69,0)
 ;DE2818, ^DGS(41.1) references ICR 3796
"RTN","HMPDJ04",70,0)
 S HMPA=0 F  S HMPA=$O(^DGS(41.1,"B",DFN,HMPA)) Q:HMPA<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ04",71,0)
 . S HMPX=$G(^DGS(41.1,HMPA,0))
"RTN","HMPDJ04",72,0)
 . I $L($G(ID)),+$P(ID,";",2)=+$P(HMPX,U,2) D DGS1(HMPA) Q
"RTN","HMPDJ04",73,0)
 . Q:$P(HMPX,U,13)  Q:$P(HMPX,U,17)  ;cancelled or admitted
"RTN","HMPDJ04",74,0)
 . S X=$P(HMPX,U,2) Q:X<HMPSTART!(X>HMPSTOP)  ;out of date range
"RTN","HMPDJ04",75,0)
 . D DGS1(HMPA)
"RTN","HMPDJ04",76,0)
 Q
"RTN","HMPDJ04",77,0)
 ;
"RTN","HMPDJ04",78,0)
DGS1(IFN) ; -- scheduled admission
"RTN","HMPDJ04",79,0)
 N ADM,X0,DATE,HLOC,FAC,SV,X
"RTN","HMPDJ04",80,0)
 S X0=$G(^DGS(41.1,+$G(IFN),0)) Q:X0=""  ;deleted (DE2818, ICR 3796)
"RTN","HMPDJ04",81,0)
 ;
"RTN","HMPDJ04",82,0)
 S DATE=+$P(X0,U,2),HLOC=+$$GET1^DIQ(42,+$P(X0,U,8)_",",.01)  ;DE2818, ICR 10039
"RTN","HMPDJ04",83,0)
 S X="H;"_DATE,ADM("localId")=X,ADM("uid")=$$SETUID^HMPUTILS("appointment",DFN,X)
"RTN","HMPDJ04",84,0)
 S ADM("dateTime")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ04",85,0)
 S FAC=$$FAC^HMPD(+HLOC) D FACILITY^HMPUTILS(FAC,"ADM") I HLOC D
"RTN","HMPDJ04",86,0)
 . S HLOC=$$GET1^DIQ(44,(+HLOC)_",",.01)  ;DE2818, (#.01) NAME
"RTN","HMPDJ04",87,0)
 . S ADM("uid")=ADM("uid")_";"_+HLOC
"RTN","HMPDJ04",88,0)
 . S ADM("locationName")=$P(HLOC,";",2)
"RTN","HMPDJ04",89,0)
 . S X=$$GET1^DIQ(44,(+HLOC)_",",1)  S:X]"" ADM("shortLocationName")=X  ;DE2818, (#1) ABBREVIATION
"RTN","HMPDJ04",90,0)
 . S ADM("locationUid")=$$SETUID^HMPUTILS("location",,+HLOC)
"RTN","HMPDJ04",91,0)
 . S X=$$GET1^DIQ(44,+HLOC_",",8,"I"),X=$$AMIS^HMPDVSIT(X)
"RTN","HMPDJ04",92,0)
 . S:$L(X) ADM("stopCodeUid")="urn:va:stop-code:"_$P(X,U),ADM("stopCodeName")=$P(X,U,2)
"RTN","HMPDJ04",93,0)
 . S SV=$$GET1^DIQ(44,+HLOC_",",9.5,"I")
"RTN","HMPDJ04",94,0)
 . I SV S ADM("service")=$$SERV^HMPDSDAM(SV)
"RTN","HMPDJ04",95,0)
 S X=+$P(X0,U,5) I X D
"RTN","HMPDJ04",96,0)
 . S ADM("providers",1,"providerUid")=$$SETUID^HMPUTILS("user",,X)
"RTN","HMPDJ04",97,0)
 . S ADM("providers",1,"providerName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ04",98,0)
 S ADM("patientClassCode")="urn:va:patient-class:IMP",ADM("patientClassName")="Inpatient"
"RTN","HMPDJ04",99,0)
 S ADM("categoryCode")="urn:va:encounter-category:AD",ADM("categoryName")="Admission"
"RTN","HMPDJ04",100,0)
 S ADM("appointmentStatus")=$S($P(X0,U,17):"ADMITTED",$P(X0,U,13):"CANCELLED",1:"SCHEDULED")
"RTN","HMPDJ04",101,0)
 S ADM("lastUpdateTime")=$$EN^HMPSTMP("adm") ;RHL 20150102
"RTN","HMPDJ04",102,0)
 S ADM("stampTime")=ADM("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ04",103,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ04",104,0)
 I $G(HMPMETA) D ADD^HMPMETA("appointment",ADM("uid"),ADM("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04",105,0)
 D ADD^HMPDJ("ADM","appointment")
"RTN","HMPDJ04",106,0)
 Q
"RTN","HMPDJ04",107,0)
 ;
"RTN","HMPDJ04",108,0)
VSIT1(ID) ; -- visit
"RTN","HMPDJ04",109,0)
 N VST,X0,X15,X,FAC,LOC,CATG,AMIS,INPT,DA,PS
"RTN","HMPDJ04",110,0)
 I $G(ID)?1"H"1.N D ADM^HMPDJ04A(ID) Q
"RTN","HMPDJ04",111,0)
 ;DE2818, ICR 6275
"RTN","HMPDJ04",112,0)
 I $D(^EDP(230,"V",ID)),$L($T(EDP1^HMPDJ04E)) D EDP1^HMPDJ04E(ID) Q
"RTN","HMPDJ04",113,0)
 ; ENCEVENT^PXAPI(ID)
"RTN","HMPDJ04",114,0)
 ; DE2818, ^AUPNVSIT - ICR 2028
"RTN","HMPDJ04",115,0)
 S X0=$G(^AUPNVSIT(ID,0)),X15=$G(^(150)) Q:X0=""  ;pjh - quit if visit already deleted
"RTN","HMPDJ04",116,0)
 ; X0=$G(^TMP("PXKENC",$J,ID,"VST",ID,0)),X15=$G(^(150))
"RTN","HMPDJ04",117,0)
 ;Q:$P(X15,U,3)'="P"  Q:$P(X0,U,7)="E"  Q:$P(X0,U,12)  ;primary, not historical or child
"RTN","HMPDJ04",118,0)
 I $P(X0,U,7)="H" D ADM^HMPDJ04A(ID,+X0) Q
"RTN","HMPDJ04",119,0)
 S VST("localId")=ID,VST("uid")=$$SETUID^HMPUTILS("visit",DFN,ID)
"RTN","HMPDJ04",120,0)
 S VST("dateTime")=$$JSONDT^HMPUTILS(+X0)  ;(#.01) VISIT/ADMIT DATE&TIME
"RTN","HMPDJ04",121,0)
 S:$P(X0,U,18) VST("checkOut")=$$JSONDT^HMPUTILS($P(X0,U,18))  ;(#.18) CHECK OUT DATE&TIME
"RTN","HMPDJ04",122,0)
 S:$P(X0,U,12) VST("parentUid")=$$SETUID^HMPUTILS("visit",DFN,$P(X0,U,12))  ;(#.12) PARENT VISIT LINK
"RTN","HMPDJ04",123,0)
 ;(#.06) LOC. OF ENCOUNTER, (#.07) SERVICE CATEGORY, (#.22) HOSPITAL LOCATION
"RTN","HMPDJ04",124,0)
 S FAC=+$P(X0,U,6),CATG=$P(X0,U,7),LOC=+$P(X0,U,22)
"RTN","HMPDJ04",125,0)
 S:FAC X=$$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","HMPDJ04",126,0)
 S:'FAC X=$$FAC^HMPD(LOC) D FACILITY^HMPUTILS(X,"VST")
"RTN","HMPDJ04",127,0)
 S X=$S(CATG="H":"AD",CATG="C":"CR",CATG="T":"TC",CATG="N":"U",CATG="R":"NH","D^X"[CATG:"O",1:"OV")
"RTN","HMPDJ04",128,0)
 S VST("categoryCode")="urn:va:encounter-category:"_X
"RTN","HMPDJ04",129,0)
 S VST("categoryName")=$S(X="AD":"Admission",X="CR":"Chart Review",X="TC":"Phone Contact",X="U":"Unknown",X="NH":"Nursing Home",X="O":"Other",1:"Outpatient Visit")
"RTN","HMPDJ04",130,0)
 S INPT=$P(X15,U,2) S:INPT="" INPT=$S("H^I^R^D"[CATG:1,1:0)  ;(#15002) PATIENT STATUS IN/OUT
"RTN","HMPDJ04",131,0)
 S X=$P(X15,U,3) S:$L(X) VST("encounterType")=X  ;(#15003) ENCOUNTER TYPE
"RTN","HMPDJ04",132,0)
 S X=$$CPT(ID) S:X VST("typeName")=$P($$CPT^ICPTCOD(X),U,3)
"RTN","HMPDJ04",133,0)
 I 'X S VST("typeName")=$S('INPT&LOC:$$GET1^DIQ(44,LOC_",",.01)_" VISIT",1:$$CATG^HMPDVSIT(CATG))  ;DE2818
"RTN","HMPDJ04",134,0)
 S VST("patientClassCode")="urn:va:patient-class:"_$S(INPT:"IMP",1:"AMB")
"RTN","HMPDJ04",135,0)
 S VST("patientClassName")=$S(INPT:"Inpatient",1:"Ambulatory")
"RTN","HMPDJ04",136,0)
 ;(#.08) DSS ID
"RTN","HMPDJ04",137,0)
 S X=$P(X0,U,8) S:X AMIS=$$AMIS^HMPDVSIT(X) I LOC D
"RTN","HMPDJ04",138,0)
 . ;DE2818, calls changed $$GET1^DIQ
"RTN","HMPDJ04",139,0)
 . I 'X S AMIS=$$GET1^DIQ(44,LOC_",",8)  ;DE2818, (#8) STOP CODE NUMBER
"RTN","HMPDJ04",140,0)
 . S VST("locationUid")=$$SETUID^HMPUTILS("location",,+LOC)
"RTN","HMPDJ04",141,0)
 . S X=$$GET1^DIQ(44,LOC_",",1) S:X]"" VST("shortLocationName")=X  ;DE2818, (#1) ABBREVIATION
"RTN","HMPDJ04",142,0)
 . S VST("locationName")=$$GET1^DIQ(44,LOC_",",.01)  ;DE2818, (#.01) NAME
"RTN","HMPDJ04",143,0)
 . S VST("locationOos")=$S($$GET1^DIQ(44,LOC_",",50.01,"I"):"true",1:"false")  ;DE2818, (#50.01) OCCASION OF SERVICE CLINIC?
"RTN","HMPDJ04",144,0)
 . S X=$$SERV^HMPDVSIT($$GET1^DIQ(44,LOC_",",9.5,"I")) S:$L(X) VST("service")=X  ;DE2818, (#9.5) TREATING SPECIALTY
"RTN","HMPDJ04",145,0)
 S:$D(AMIS) VST("stopCodeUid")="urn:va:stop-code:"_$P(AMIS,U),VST("stopCodeName")=$P(AMIS,U,2)
"RTN","HMPDJ04",146,0)
 S X=$$POV(ID) S:$L(X) VST("reasonUid")=$$SETNCS^HMPUTILS("icd",$P(X,U)),VST("reasonName")=$P(X,U,2)
"RTN","HMPDJ04",147,0)
 ; provider(s), DE2818 - ^AUPNVPRV references - ICR 2316
"RTN","HMPDJ04",148,0)
 S DA=0 F  S DA=$O(^AUPNVPRV("AD",ID,DA)) Q:DA<1  D
"RTN","HMPDJ04",149,0)
 . S X0=$G(^AUPNVPRV(DA,0))
"RTN","HMPDJ04",150,0)
 . I $P(X0,U,4)="P" D PROV("VST",DA,+X0,"P",1) Q  ;primary
"RTN","HMPDJ04",151,0)
 . D:'$D(PS(+X0)) PROV("VST",DA,+X0,"S")          ;secondary
"RTN","HMPDJ04",152,0)
 . S PS(+X0)=""                                   ; (no duplicates)
"RTN","HMPDJ04",153,0)
 K ^TMP("PXKENC",$J,ID)
"RTN","HMPDJ04",154,0)
 S VST("lastUpdateTime")=$$EN^HMPSTMP("visit") ;RHL 20150103
"RTN","HMPDJ04",155,0)
 S VST("stampTime")=VST("lastUpdateTime") ; RHL 20150103
"RTN","HMPDJ04",156,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ04",157,0)
 I $G(HMPMETA) D ADD^HMPMETA("visit",VST("uid"),VST("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04",158,0)
 D ADD^HMPDJ("VST","visit")
"RTN","HMPDJ04",159,0)
 Q
"RTN","HMPDJ04",160,0)
 ;
"RTN","HMPDJ04",161,0)
CPT(VISIT) ; -- Return CPT code of encounter type
"RTN","HMPDJ04",162,0)
 ;DE2818 - Change to use API and not directly access the global
"RTN","HMPDJ04",163,0)
 N DA,Y S Y=""
"RTN","HMPDJ04",164,0)
 ;DE2818, ICR 2048 for ^AUPNVCPT references
"RTN","HMPDJ04",165,0)
 S DA=0 F  S DA=$O(^AUPNVCPT("AD",VISIT,DA)) Q:DA<1  D  Q:$L(Y)
"RTN","HMPDJ04",166,0)
 . D ENCEVENT^PXAPI(VISIT,1)
"RTN","HMPDJ04",167,0)
 . I +$G(^TMP("PXKENC",$J,VISIT,"CPT",DA,0))?1"992"2N S Y=+$G(^TMP("PXKENC",$J,VISIT,"CPT",DA,0))
"RTN","HMPDJ04",168,0)
 Q Y
"RTN","HMPDJ04",169,0)
 ;
"RTN","HMPDJ04",170,0)
POV(VISIT) ; -- return the primary Purpose of Visit as ICD^ProviderNarrative
"RTN","HMPDJ04",171,0)
 N DA,Y,X,X0,ICD S Y=""
"RTN","HMPDJ04",172,0)
 ;DE2818, ^AUPNVPOV( - ICR 3094
"RTN","HMPDJ04",173,0)
 S DA=0 F  S DA=$O(^AUPNVPOV("AD",VISIT,DA)) Q:DA<1  D  Q:$L(Y)
"RTN","HMPDJ04",174,0)
 . S X0=$G(^AUPNVPOV(DA,0)) Q:$P(X0,U,12)'="P"
"RTN","HMPDJ04",175,0)
 . S X=+$P(X0,U,4),ICD=$$ICD^HMPDVSIT(+X0)
"RTN","HMPDJ04",176,0)
 . S Y=ICD_U_$$EXTERNAL^DILFD(9000010.07,.04,,X)
"RTN","HMPDJ04",177,0)
 Q Y
"RTN","HMPDJ04",178,0)
 ;
"RTN","HMPDJ04",179,0)
PROV(ARR,I,IEN,ROLE,PRIM) ; -- add providers
"RTN","HMPDJ04",180,0)
 S @ARR@("providers",I,"providerUid")=$$SETUID^HMPUTILS("user",,+IEN)
"RTN","HMPDJ04",181,0)
 S @ARR@("providers",I,"providerName")=$$GET1^DIQ(200,(+IEN)_",",.01)  ;DE2818
"RTN","HMPDJ04",182,0)
 S @ARR@("providers",I,"role")=ROLE
"RTN","HMPDJ04",183,0)
 S:$G(PRIM) @ARR@("providers",I,"primary")="true"
"RTN","HMPDJ04",184,0)
 Q
"RTN","HMPDJ04",185,0)
 ;
"RTN","HMPDJ04",186,0)
NAME(IEN) ; -- Return a string 'name' for the visit
"RTN","HMPDJ04",187,0)
 N Y,X0,LOC,DATE
"RTN","HMPDJ04",188,0)
 S X0=$G(^AUPNVSIT(+$G(IEN),0)),Y=""  ;DE2818, ICR 2028
"RTN","HMPDJ04",189,0)
 S DATE=+X0,LOC=+$P(X0,U,22) S:LOC LOC=$$GET1^DIQ(44,LOC_",",.01)_" "  ;DE2818
"RTN","HMPDJ04",190,0)
 S Y=LOC_$$FMTE^XLFDT(DATE,"1D") ;Mon DD, YYYY
"RTN","HMPDJ04",191,0)
 Q Y
"RTN","HMPDJ04",192,0)
 ;
"RTN","HMPDJ04",193,0)
FAC(IEN)  ; -- Return Facility for the visit
"RTN","HMPDJ04",194,0)
 Q:'+$G(IEN) ""
"RTN","HMPDJ04",195,0)
 N FAC S FAC=+$$GET1^DIQ(9000010,IEN_",",.06,"I")
"RTN","HMPDJ04",196,0)
 Q:FAC $$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","HMPDJ04",197,0)
 S FAC=+$$GET1^DIQ(9000010,IEN_",",.22,"I")
"RTN","HMPDJ04",198,0)
 Q $$FAC^HMPD(FAC)
"RTN","HMPDJ04",199,0)
 ;
"RTN","HMPDJ04",200,0)
STCODE(IEN)  ;  -- Return stop code information for the visit Q:'+$G(IEN) ""
"RTN","HMPDJ04",201,0)
 Q:'+$G(IEN) ""
"RTN","HMPDJ04",202,0)
 N STCODE,LIEN S STCODE=+$$GET1^DIQ(9000010,IEN_",",.08,"I")
"RTN","HMPDJ04",203,0)
 Q:STCODE $$AMIS^HMPDVSIT(STCODE)
"RTN","HMPDJ04",204,0)
 S LIEN=+$$GET1^DIQ(9000010,IEN_",",.22,"I")
"RTN","HMPDJ04",205,0)
 I LIEN S STCODE=+$$GET1^DIQ(44,LIEN_",",8,"I")
"RTN","HMPDJ04",206,0)
 Q:STCODE $$AMIS^HMPDVSIT(STCODE)
"RTN","HMPDJ04",207,0)
 Q ""
"RTN","HMPDJ04",208,0)
 ;
"RTN","HMPDJ04",209,0)
STOPCODE(X,Y)  ;  -- Return stop code info for JSON
"RTN","HMPDJ04",210,0)
 S @Y@("stopCodeUid")="urn:va:stop-code:"_$P(X,U)
"RTN","HMPDJ04",211,0)
 S @Y@("stopCodeName")=$P(X,U,2)
"RTN","HMPDJ04",212,0)
 Q
"RTN","HMPDJ04",213,0)
 ;
"RTN","HMPDJ04A")
0^38^B59768993
"RTN","HMPDJ04A",1,0)
HMPDJ04A ;ASMR/MKB - Admissions,PTF;Nov 12, 2015 16:42:22
"RTN","HMPDJ04A",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ04A",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ04A",4,0)
 ;
"RTN","HMPDJ04A",5,0)
 ; External References          DBIA#
"RTN","HMPDJ04A",6,0)
 ; -------------------          -----
"RTN","HMPDJ04A",7,0)
 ; ^AUPNVSIT                     2028
"RTN","HMPDJ04A",8,0)
 ; ^DGPM                         1865
"RTN","HMPDJ04A",9,0)
 ; ^DIC(42                      10039
"RTN","HMPDJ04A",10,0)
 ; ^DPT                         10035
"RTN","HMPDJ04A",11,0)
 ; ^SC                          10040
"RTN","HMPDJ04A",12,0)
 ; ^VA(200                      10060
"RTN","HMPDJ04A",13,0)
 ; DGPTFAPI                      3157
"RTN","HMPDJ04A",14,0)
 ; DIC                           2051
"RTN","HMPDJ04A",15,0)
 ; DILFD                         2055
"RTN","HMPDJ04A",16,0)
 ; DIQ                           2056
"RTN","HMPDJ04A",17,0)
 ; ICDCODE                       3990
"RTN","HMPDJ04A",18,0)
 ; ICPTCOD                       1995
"RTN","HMPDJ04A",19,0)
 ; VADPT                        10061
"RTN","HMPDJ04A",20,0)
 ; XUAF4                         2171
"RTN","HMPDJ04A",21,0)
 ;
"RTN","HMPDJ04A",22,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ04A",23,0)
 Q
"RTN","HMPDJ04A",24,0)
 ;
"RTN","HMPDJ04A",25,0)
ADM(ID,DATE) ; -- admission [from VSIT1]
"RTN","HMPDJ04A",26,0)
 N ADM,VADMVT,VAIP,VAERR,MVT,SPEC,HLOC,FAC,ICD,I
"RTN","HMPDJ04A",27,0)
 S ID=$G(ID),DATE=+$G(DATE) Q:ID=""  ;Q:DATE<1
"RTN","HMPDJ04A",28,0)
 I ID S VAIP("D")=DATE,VST=+ID
"RTN","HMPDJ04A",29,0)
 I ID?1"H"1.N S VAIP("E")=+$E(ID,2,99),VST=0
"RTN","HMPDJ04A",30,0)
 D IN5^VADPT Q:'$G(VAIP(1))  ;deleted
"RTN","HMPDJ04A",31,0)
 S VADMVT=+$G(VAIP(13)),ID="H"_VADMVT
"RTN","HMPDJ04A",32,0)
 S ADM("localId")=ID,ADM("uid")=$$SETUID^HMPUTILS("visit",DFN,ID)
"RTN","HMPDJ04A",33,0)
 S:'DATE DATE=+$G(VAIP(13,1)) S:'VST VST=$$VISIT(DFN,DATE)
"RTN","HMPDJ04A",34,0)
 S (ADM("dateTime"),ADM("stay","arrivalDateTime"))=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ04A",35,0)
 S:$L($P(VAIP(6),U,2)) ADM("roomBed")=$P(VAIP(6),U,2)
"RTN","HMPDJ04A",36,0)
 ;DE2818, (#.105) CURRENT ADMISSION, changed ^DPT to FileMan, ICR 10035
"RTN","HMPDJ04A",37,0)
 S MVT=13,I=0 I VADMVT=$$GET1^DIQ(2,DFN_",",.105,"I") D  ;if current admission,
"RTN","HMPDJ04A",38,0)
 . S ADM("current")="true",MVT=14  ; use last movement info
"RTN","HMPDJ04A",39,0)
 . S X=$$GET1^DIQ(2,DFN_",",.101,"I") S:$L(X) ADM("roomBed")=X  ;(#.101) ROOM-BED, DE2818
"RTN","HMPDJ04A",40,0)
 . K HMPADMIT  ;kill flag from HMPDJ0
"RTN","HMPDJ04A",41,0)
 S SPEC=$G(VAIP(MVT,6)),ADM("specialty")=$P(SPEC,U,2)
"RTN","HMPDJ04A",42,0)
 S X=$$SERV^HMPDVSIT(+SPEC),ADM("service")=X
"RTN","HMPDJ04A",43,0)
 ;DE2818, changed from ^DIC(42) to FileMan, ICR 10039
"RTN","HMPDJ04A",44,0)
 S HLOC=+$$GET1^DIQ(42,+$G(VAIP(MVT,4))_",",44,"I"),FAC=$$FAC^HMPD(+HLOC) I HLOC D
"RTN","HMPDJ04A",45,0)
 . S ADM("locationUid")=$$SETUID^HMPUTILS("location",,+HLOC)
"RTN","HMPDJ04A",46,0)
 . ;DE2818 begin, changed ^SC to FileMan, ICR 10040
"RTN","HMPDJ04A",47,0)
 . S X=$$GET1^DIQ(44,HLOC_",",1) S:X]"" ADM("shortLocationName")=X  ;(#1) ABBREVIATION
"RTN","HMPDJ04A",48,0)
 . S ADM("locationName")=$$GET1^DIQ(44,HLOC_",",.01)  ;(#.01) NAME
"RTN","HMPDJ04A",49,0)
 . S X=$$AMIS^HMPDVSIT($$GET1^DIQ(44,HLOC_",",8,"I"))  ;(#8) STOP CODE NUMBER
"RTN","HMPDJ04A",50,0)
 . ;DE2818, end
"RTN","HMPDJ04A",51,0)
 . S:$L($G(X)) ADM("stopCodeUid")="urn:va:stop-code:"_$P(X,U),ADM("stopCodeName")=$P(X,U,2)
"RTN","HMPDJ04A",52,0)
 . S ADM("summary")="${"_ADM("service")_"}:"_ADM("locationName")
"RTN","HMPDJ04A",53,0)
 D FACILITY^HMPUTILS(FAC,"ADM")
"RTN","HMPDJ04A",54,0)
 S ADM("categoryCode")="urn:va:encounter-category:AD",ADM("categoryName")="Admission"
"RTN","HMPDJ04A",55,0)
 S ADM("patientClassCode")="urn:va:patient-class:IMP",ADM("patientClassName")="Inpatient"
"RTN","HMPDJ04A",56,0)
 I $G(VAIP(17)) S ADM("stay","dischargeDateTime")=$$JSONDT^HMPUTILS(+$G(VAIP(17,1)))
"RTN","HMPDJ04A",57,0)
 I $G(VAIP(18)) S I=I+1 D PROV("ADM",I,+VAIP(18),"A")         ;attending
"RTN","HMPDJ04A",58,0)
 I $G(VAIP(MVT,5)) S I=I+1 D PROV("ADM",I,+VAIP(MVT,5),"P",1) ;primary
"RTN","HMPDJ04A",59,0)
 S ICD=$$POV^HMPDJ04(VST) S:'ICD ICD=$$PTF^HMPDVSIT(DFN,VAIP(12)) ;PTF>ICD
"RTN","HMPDJ04A",60,0)
 I $L(ICD)<2 S ADM("reasonName")=$G(VAIP(MVT,7))
"RTN","HMPDJ04A",61,0)
 E  S ADM("reasonUid")=$$SETNCS^HMPUTILS("icd",ICD),ADM("reasonName")=$P(ICD,U,2)
"RTN","HMPDJ04A",62,0)
 S X=$$CPT^HMPDJ04(VST),ADM("typeName")=$S(X:$P($$CPT^ICPTCOD(X),U,3),1:$$CATG^HMPDVSIT("H"))
"RTN","HMPDJ04A",63,0)
 D MVT(VADMVT)   ;sub-movements
"RTN","HMPDJ04A",64,0)
 ; TIU(VST,.ADM) ;notes/summary
"RTN","HMPDJ04A",65,0)
 ; Next 2 lines added for visits whose IDs start with an "H".  JD - 1/26/15
"RTN","HMPDJ04A",66,0)
 S ADM("lastUpdateTime")=$$EN^HMPSTMP("adm") ;RHL 20150102
"RTN","HMPDJ04A",67,0)
 S ADM("stampTime")=ADM("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ04A",68,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ04A",69,0)
 I $G(HMPMETA) D ADD^HMPMETA("visit",ADM("uid"),ADM("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04A",70,0)
 D ADD^HMPDJ("ADM","visit")
"RTN","HMPDJ04A",71,0)
 Q
"RTN","HMPDJ04A",72,0)
 ;
"RTN","HMPDJ04A",73,0)
TIU(VISIT,ARR) ; -- add notes to ARR("document")
"RTN","HMPDJ04A",74,0)
 N X,Y,I,HMPX,LT,NT,DA,CNT,HMPY
"RTN","HMPDJ04A",75,0)
 D FIND^DIC(8925,,.01,"QX",+$G(VISIT),,"V",,,"HMPX")
"RTN","HMPDJ04A",76,0)
 S Y="",(I,CNT)=0
"RTN","HMPDJ04A",77,0)
 F  S I=$O(HMPX("DILIST",1,I)) Q:I<1  D
"RTN","HMPDJ04A",78,0)
 . S LT=$G(HMPX("DILIST","ID",I,.01)) Q:$P(LT," ")="Addendum"
"RTN","HMPDJ04A",79,0)
 . S DA=$G(HMPX("DILIST",2,I))
"RTN","HMPDJ04A",80,0)
 . S NT=$$GET1^DIQ(8925,+DA_",",".01:1501")
"RTN","HMPDJ04A",81,0)
 . S CNT=CNT+1,ARR("documents",CNT,"uid")=$$SETUID^HMPUTILS("document",DFN,+DA)
"RTN","HMPDJ04A",82,0)
 . S ARR("documents",CNT,"localTitle")=LT
"RTN","HMPDJ04A",83,0)
 . S:$L(NT) ARR("documents",CNT,"nationalTitle")=NT
"RTN","HMPDJ04A",84,0)
 Q
"RTN","HMPDJ04A",85,0)
 ;
"RTN","HMPDJ04A",86,0)
PROV(ARR,I,IEN,ROLE,PRIM) ; -- add providers
"RTN","HMPDJ04A",87,0)
 S @ARR@("providers",I,"providerUid")=$$SETUID^HMPUTILS("user",,+IEN)
"RTN","HMPDJ04A",88,0)
 S @ARR@("providers",I,"providerName")=$$GET1^DIQ(200,IEN_",",.01)  ;DE2818, changed ^VA(200) to FileMan ICR 10060
"RTN","HMPDJ04A",89,0)
 S @ARR@("providers",I,"role")=ROLE
"RTN","HMPDJ04A",90,0)
 S:$G(PRIM) @ARR@("providers",I,"primary")="true"
"RTN","HMPDJ04A",91,0)
 Q
"RTN","HMPDJ04A",92,0)
 ;
"RTN","HMPDJ04A",93,0)
MVT(CA) ; -- add movements to ADM("movement",i,"attribute")
"RTN","HMPDJ04A",94,0)
 N DATE,DA,CNT,X S (DATE,CNT)=0
"RTN","HMPDJ04A",95,0)
 ;DE2818, ^DGPM( - ICR 1865
"RTN","HMPDJ04A",96,0)
 F  S DATE=$O(^DGPM("APCA",DFN,CA,DATE)) Q:DATE<1  S DA=+$O(^(DATE,0)) I DA'=CA D
"RTN","HMPDJ04A",97,0)
 . S X0=$G(^DGPM(DA,0)),CNT=CNT+1
"RTN","HMPDJ04A",98,0)
 . S ADM("movements",CNT,"localId")=DA
"RTN","HMPDJ04A",99,0)
 . S ADM("movements",CNT,"dateTime")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ04A",100,0)
 . S ADM("movements",CNT,"movementType")=$$EXTERNAL^DILFD(405,.02,,$P(X0,U,2))
"RTN","HMPDJ04A",101,0)
 . S X=+$P(X0,U,19) I X D
"RTN","HMPDJ04A",102,0)
 .. S ADM("movements",CNT,"providerUid")=$$SETUID^HMPUTILS("user",,X)
"RTN","HMPDJ04A",103,0)
 .. S ADM("movements",CNT,"providerName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818, changed ^VA(200) to FileMan ICR 10060
"RTN","HMPDJ04A",104,0)
 . S X=+$P(X0,U,9)
"RTN","HMPDJ04A",105,0)
 . S:X ADM("movements",CNT,"specialty")=$$EXTERNAL^DILFD(405,.09,,X)
"RTN","HMPDJ04A",106,0)
 . ;DE2818, changed ^DIC(42) to FileMan, ICR 10039
"RTN","HMPDJ04A",107,0)
 . S HLOC=+$$GET1^DIQ(42,+$P(X0,U,6)_",",44,"I"),FAC=$$FAC^HMPD(HLOC) I HLOC D
"RTN","HMPDJ04A",108,0)
 .. S ADM("movements",CNT,"locationUid")=$$SETUID^HMPUTILS("location",,HLOC)
"RTN","HMPDJ04A",109,0)
 .. ;DE2818, changed ^SC to FileMan, ICR 10040
"RTN","HMPDJ04A",110,0)
 .. S ADM("movements",CNT,"locationName")=$$GET1^DIQ(44,HLOC_",",.01)  ;(#.01) NAME
"RTN","HMPDJ04A",111,0)
 Q
"RTN","HMPDJ04A",112,0)
 ;
"RTN","HMPDJ04A",113,0)
PTFA(HMPLID) ; -- find ID in ^PXRMINDX(45) and call PTF1 if successful
"RTN","HMPDJ04A",114,0)
 ;Purpose - Build ^TMP("HMPPX") from ^PXRMINDX(45,HMPISYS,"PNI",DFN)
"RTN","HMPDJ04A",115,0)
 ;
"RTN","HMPDJ04A",116,0)
 ;Called by - PTF^HMPDJ0 (if HMPID is set)
"RTN","HMPDJ04A",117,0)
 ;
"RTN","HMPDJ04A",118,0)
 ;Assumptions -
"RTN","HMPDJ04A",119,0)
 ;1. ID is being passed and DFN variable exists
"RTN","HMPDJ04A",120,0)
 ;2. ^TMP("HMPPX") does not already exist
"RTN","HMPDJ04A",121,0)
 ;
"RTN","HMPDJ04A",122,0)
 ;              
"RTN","HMPDJ04A",123,0)
 ;Modification History -
"RTN","HMPDJ04A",124,0)
 ;US5630 (TW)  1. HMPISYS can be either "ICD" (ICD-9) or "10D" (ICD-10)
"RTN","HMPDJ04A",125,0)
 ;             2. Namespaced variables and enhanced newing
"RTN","HMPDJ04A",126,0)
 ; 
"RTN","HMPDJ04A",127,0)
 N HMPLEN,HMPTYP,HMPID,HMPISYS,HMPTYP,HMPDX,HMPDT,HMPITEM,HMPRDT,HMPX
"RTN","HMPDJ04A",128,0)
 S HMPLEN=$L(HMPLID,";"),HMPTYP=$P(HMPLID,";",HMPLEN),HMPID=$P(HMPLID,";",1,HMPLEN-1)
"RTN","HMPDJ04A",129,0)
 ; DE2818, ^PXRMINDX - ICR 4290
"RTN","HMPDJ04A",130,0)
 ;Get ICD System from ^PXRMINDX Xref and loop for remaining subscripts
"RTN","HMPDJ04A",131,0)
 S HMPISYS="" F  S HMPISYS=$O(^PXRMINDX(45,HMPISYS)) Q:HMPISYS=""  D
"RTN","HMPDJ04A",132,0)
 . I '$D(^PXRMINDX(45,HMPISYS,"PNI",+$G(DFN),HMPTYP)) Q
"RTN","HMPDJ04A",133,0)
 . S HMPDX="" F  S HMPDX=$O(^PXRMINDX(45,HMPISYS,"PNI",+$G(DFN),HMPTYP,HMPDX)) Q:HMPDX=""  D
"RTN","HMPDJ04A",134,0)
 .. S HMPDT=0  F  S HMPDT=$O(^PXRMINDX(45,HMPISYS,"PNI",+$G(DFN),HMPTYP,HMPDX,HMPDT)) Q:HMPDT=""  D
"RTN","HMPDJ04A",135,0)
 ... S HMPITEM=""  F  S HMPITEM=$O(^PXRMINDX(45,HMPISYS,"PNI",+$G(DFN),HMPTYP,HMPDX,HMPDT,HMPITEM)) Q:HMPITEM=""  D
"RTN","HMPDJ04A",136,0)
 .... I HMPITEM'[HMPID Q
"RTN","HMPDJ04A",137,0)
 .... S HMPRDT=9999999-HMPDT
"RTN","HMPDJ04A",138,0)
 .... S HMPX=HMPDX_U_HMPDT_U_HMPISYS
"RTN","HMPDJ04A",139,0)
 .... S ^TMP("HMPPX",$J,HMPRDT,HMPLID)=HMPX
"RTN","HMPDJ04A",140,0)
 Q:'$D(^TMP("HMPPX",$J))
"RTN","HMPDJ04A",141,0)
 D PTF1
"RTN","HMPDJ04A",142,0)
 K ^TMP("HMPPX",$J)
"RTN","HMPDJ04A",143,0)
 Q
"RTN","HMPDJ04A",144,0)
 ;
"RTN","HMPDJ04A",145,0)
PTF1 ; Set PTF data into PTF array
"RTN","HMPDJ04A",146,0)
 ;Purpose - Get data from ^TMP("HMPPX"), lookup addl PTF, set into PTF array and ^TMP
"RTN","HMPDJ04A",147,0)
 ;
"RTN","HMPDJ04A",148,0)
 ;Called by - PTFA^HMPDJ04A if HMPID is set, otherwise PTF^HMPDJ0
"RTN","HMPDJ04A",149,0)
 ;
"RTN","HMPDJ04A",150,0)
 ;Assumptions -
"RTN","HMPDJ04A",151,0)
 ;1. HMPLID (local ID) is being passed and DFN,HMPRDT variables exist
"RTN","HMPDJ04A",152,0)
 ;2. ^TMP("HMPPX",$J,HMPRDT,ID)=DxCode^[Discharge]Date exists
"RTN","HMPDJ04A",153,0)
 ;
"RTN","HMPDJ04A",154,0)
 ;Modification History -
"RTN","HMPDJ04A",155,0)
 ;US5630 (TW)- HMPISYS can be either "ICD9" or "10D" (ICD-10)
"RTN","HMPDJ04A",156,0)
 ;
"RTN","HMPDJ04A",157,0)
 N HMPTMP,PTF,HMPP,HMPTYP,HMPDIS,VAIN,HMPADM,VAINDT,HMPLOC,HMPFAC,HMPX,HMPISYS
"RTN","HMPDJ04A",158,0)
 S HMPTMP=$G(^TMP("HMPPX",$J,HMPRDT,HMPLID))
"RTN","HMPDJ04A",159,0)
 S PTF("localId")=HMPLID
"RTN","HMPDJ04A",160,0)
 S PTF("uid")=$$SETUID^HMPUTILS("ptf",DFN,HMPLID)
"RTN","HMPDJ04A",161,0)
 S HMPP=$L(HMPLID,";")
"RTN","HMPDJ04A",162,0)
 S HMPTYP=$P(HMPLID,";",HMPP)
"RTN","HMPDJ04A",163,0)
 I HMPTYP="DXLS" S PTF("principalDx")="true"  ; Is this the principal dx?
"RTN","HMPDJ04A",164,0)
 I $P(HMPTYP," ")="M" Q  ; Quit if movement dx
"RTN","HMPDJ04A",165,0)
 S HMPDIS=$P(HMPTMP,U,2)
"RTN","HMPDJ04A",166,0)
 I HMPDIS S VAINDT=HMPDIS-.0001
"RTN","HMPDJ04A",167,0)
 D INP^VADPT  ; Get inpatient VAIN array
"RTN","HMPDJ04A",168,0)
 I '$G(VAIN(1)) Q  ; Quit if not inpatient
"RTN","HMPDJ04A",169,0)
 ;US5630 - TW - Extract Calculated DRG for PTF
"RTN","HMPDJ04A",170,0)
 S PTF("drg")=$$GET1^DIQ(45,+HMPLID_",",9,"")
"RTN","HMPDJ04A",171,0)
 S PTF("admissionUid")=$$SETUID^HMPUTILS("visit",DFN,"H"_VAIN(1))
"RTN","HMPDJ04A",172,0)
 S HMPADM=+$G(VAIN(7))  ; Admission date
"RTN","HMPDJ04A",173,0)
 ;DE2818, changed from ^DIC(42) to FileMan, ICR 10039
"RTN","HMPDJ04A",174,0)
 S HMPLOC=+$$GET1^DIQ(42,+$G(VAIN(4))_",",44,"I")  ; Get location
"RTN","HMPDJ04A",175,0)
 S:HMPADM PTF("arrivalDateTime")=$$JSONDT^HMPUTILS(HMPADM)
"RTN","HMPDJ04A",176,0)
 S:HMPDIS PTF("dischargeDateTime")=$$JSONDT^HMPUTILS(HMPDIS)
"RTN","HMPDJ04A",177,0)
 S HMPFAC=$$FAC^HMPD(HMPLOC) D:HMPFAC FACILITY^HMPUTILS(HMPFAC,"PTF")
"RTN","HMPDJ04A",178,0)
 S PTF("lastUpdateTime")=$$EN^HMPSTMP("ptf") ;RHL 20150102
"RTN","HMPDJ04A",179,0)
 S PTF("stampTime")=PTF("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ04A",180,0)
 ;US5630 - TW - Check for ICD Coding System
"RTN","HMPDJ04A",181,0)
 S HMPDX=$P(HMPTMP,U)
"RTN","HMPDJ04A",182,0)
 S HMPISYS=$P(HMPTMP,U,3)
"RTN","HMPDJ04A",183,0)
 S HMPISYS=$S(HMPISYS="ICD":1,"ICP":2,"10D":30,"10P":31,1:1)  ; Identify ICD coding system for correct lookup
"RTN","HMPDJ04A",184,0)
 S HMPX=$$ICDDX^ICDEX(HMPDX,"",HMPISYS)
"RTN","HMPDJ04A",185,0)
 S PTF("icdCode")=$$SETNCS^HMPUTILS("icd",$P(HMPX,U,2))
"RTN","HMPDJ04A",186,0)
 S PTF("icdName")=$P(HMPX,U,4)
"RTN","HMPDJ04A",187,0)
  ;US6734 - pre-compile metastamp
"RTN","HMPDJ04A",188,0)
 I $G(HMPMETA) D ADD^HMPMETA("ptf",PTF("uid"),PTF("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04A",189,0)
 D ADD^HMPDJ("PTF","ptf")
"RTN","HMPDJ04A",190,0)
 Q
"RTN","HMPDJ04A",191,0)
 ;
"RTN","HMPDJ04A",192,0)
VISIT(DFN,DATE) ; -- Return visit# for admission
"RTN","HMPDJ04A",193,0)
 N X,Y
"RTN","HMPDJ04A",194,0)
 S X=9999999-$P(DATE,".")_"."_$P(DATE,".",2)
"RTN","HMPDJ04A",195,0)
 S Y=+$O(^AUPNVSIT("AAH",DFN,X,0))  ;DE2818, ICR 2028
"RTN","HMPDJ04A",196,0)
 Q Y
"RTN","HMPDJ04E")
0^39^B18074806
"RTN","HMPDJ04E",1,0)
HMPDJ04E ;SLC/MKB,ASMR/RRB - EDIS VISIT;6/25/12  16:11
"RTN","HMPDJ04E",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ04E",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ04E",4,0)
 ;
"RTN","HMPDJ04E",5,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ04E",6,0)
 ;
"RTN","HMPDJ04E",7,0)
 ; External References          DBIA#
"RTN","HMPDJ04E",8,0)
 ; -------------------          -----
"RTN","HMPDJ04E",9,0)
 ; EDP(230                       6275
"RTN","HMPDJ04E",10,0)
 ;
"RTN","HMPDJ04E",11,0)
 ; DE2818/RRB SQA findings changed top line from EDIS to EDIS VISITS
"RTN","HMPDJ04E",12,0)
 Q
"RTN","HMPDJ04E",13,0)
 ;
"RTN","HMPDJ04E",14,0)
EDP1(ID) ; -- ED visit
"RTN","HMPDJ04E",15,0)
 ;DE2818 modified to use FM calls to pull data from the EDP files
"RTN","HMPDJ04E",16,0)
 N IENS,EDP,X0,FAC,VST,LOC,LOC0,X,I,ICD,FILE,FLDS,FLGS,ARR,ERR
"RTN","HMPDJ04E",17,0)
 S IENS=$$FIND1^DIC(230,"","Q",ID,"V","") Q:IENS<1
"RTN","HMPDJ04E",18,0)
 S IENS=IENS_",",FLGS="IE",ARR="EDP",ERR="EDPERR",FLDS=".01;3.5;3.6;3.7;3.8;3.3;.08;.09;1.1;.02;.14;3.2"
"RTN","HMPDJ04E",19,0)
 D GETS^DIQ(230,IENS,FLDS,FLGS,ARR,ERR)
"RTN","HMPDJ04E",20,0)
 S X0=$G(^AUPNVSIT(ID,0))
"RTN","HMPDJ04E",21,0)
 ;.01 LOG ENTRY TIME
"RTN","HMPDJ04E",22,0)
 ;.08 TIME IN
"RTN","HMPDJ04E",23,0)
 ;.08 TIME OUT
"RTN","HMPDJ04E",24,0)
 ;1.1 COMPLAINT
"RTN","HMPDJ04E",25,0)
 ;.02 INSTITUTION
"RTN","HMPDJ04E",26,0)
 ;.14 CLINIC
"RTN","HMPDJ04E",27,0)
 ;#3.2) STATUS [2P:233.1]
"RTN","HMPDJ04E",28,0)
 ;(#3.3) ACUITY [3P:233.1] ^ 
"RTN","HMPDJ04E",29,0)
 ;(#3.4) LOC [4P:231.8] 
"RTN","HMPDJ04E",30,0)
 ;(#3.5) MD ASSIGNED [5P:200]
"RTN","HMPDJ04E",31,0)
 ;(#3.6) NURSE ASSIGNED [6P:200]
"RTN","HMPDJ04E",32,0)
 ;(#3.7) RESIDENT ASSIGNED [7P:200] ^ 
"RTN","HMPDJ04E",33,0)
 ;#3.8) COMMENT [8F]
"RTN","HMPDJ04E",34,0)
 ;(#3.9) HELD LOC [9P:231.8] ^ 
"RTN","HMPDJ04E",35,0)
 S VST("localId")=ID,VST("uid")=$$SETUID^HMPUTILS("visit",DFN,ID)
"RTN","HMPDJ04E",36,0)
 S VST("dateTime")=$$JSONDT^HMPUTILS(+X0)
"RTN","HMPDJ04E",37,0)
 S:$G(EDP(230,IENS,.08,"I"))'="" VST("stay","arrivalDateTime")=$$JSONDT^HMPUTILS($G(EDP(230,IENS,.08,"I")))
"RTN","HMPDJ04E",38,0)
 S:$G(EDP(230,IENS,.09,"I"))'="" VST("stay","dischargeDateTime")=$$JSONDT^HMPUTILS($G(EDP(230,IENS,.09,"I")))
"RTN","HMPDJ04E",39,0)
 S:$G(EDP(230,IENS,.02,"I"))'="" FAC=$G(EDP(230,IENS,.02,"I"))
"RTN","HMPDJ04E",40,0)
 S:$G(EDP(230,IENS,.14,"I"))'="" LOC=$G(EDP(230,IENS,.14,"I")),LOC0=$S(LOC:$G(^SC(LOC,0)),1:"")
"RTN","HMPDJ04E",41,0)
 S:FAC X=$$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","HMPDJ04E",42,0)
 S:'FAC X=$$FAC^HMPD(LOC) D FACILITY^HMPUTILS(X,"VST")
"RTN","HMPDJ04E",43,0)
 S VST("categoryCode")="urn:va:encounter-category:OV"
"RTN","HMPDJ04E",44,0)
 S VST("categoryName")="Outpatient Visit"
"RTN","HMPDJ04E",45,0)
 S VST("patientClassCode")="urn:va:patient-class:EMER"
"RTN","HMPDJ04E",46,0)
 S VST("patientClassName")="Emergency"
"RTN","HMPDJ04E",47,0)
 ;
"RTN","HMPDJ04E",48,0)
 S X=$$CPT^HMPDJ04(ID) S:$G(X)'="" VST("typeName")=$P($$CPT^ICPTCOD(X),U,3)
"RTN","HMPDJ04E",49,0)
 I 'X S VST("typeName")=$S(LOC:$P(LOC0,U)_" VISIT",1:"EMERGENCY")
"RTN","HMPDJ04E",50,0)
 S X=$P(X0,U,8) S:X AMIS=$$AMIS^HMPDVSIT(X) I LOC D
"RTN","HMPDJ04E",51,0)
 . I 'X S AMIS=$$AMIS^HMPDVSIT($P(LOC0,U,7))
"RTN","HMPDJ04E",52,0)
 . S VST("locationUid")=$$SETUID^HMPUTILS("location",,+LOC)
"RTN","HMPDJ04E",53,0)
 . S VST("locationName")=$P(LOC0,U)
"RTN","HMPDJ04E",54,0)
 . S X=$$SERV^HMPDVSIT($P(LOC0,U,20)) Q:X=""
"RTN","HMPDJ04E",55,0)
 . S:$L(X) VST("service")=X,VST("summary")="${"_VST("service")_"}:"_$P(LOC0,U)
"RTN","HMPDJ04E",56,0)
 S:$G(AMIS) VST("stopCodeUid")="urn:va:stop-code:"_$P(AMIS,U),VST("stopCodeName")=$P(AMIS,U,2)
"RTN","HMPDJ04E",57,0)
 ;
"RTN","HMPDJ04E",58,0)
 S:$G(EDP(230,IENS,1.1,"E"))'="" VST("reasonName")=$G(EDP(230,IENS,1.1,"E"))
"RTN","HMPDJ04E",59,0)
 S I=0 F  S I=$O(^EDP(230,+IENS,4,I)) Q:I<1  I $P($G(^(I,0)),U,3) D  ;primary Dx
"RTN","HMPDJ04E",60,0)
 . S X=$G(^EDP(230,+IENS,4,I,0)),VST("reasonName")=$P(X,U) Q:'$P(X,U,2)
"RTN","HMPDJ04E",61,0)
 . S ICD=$$ICD^HMPDVSIT($P(X,U,2)) Q:$L(ICD)'>1
"RTN","HMPDJ04E",62,0)
 . S VST("reasonUid")=$$SETNCS^HMPUTILS("icd",$P(ICD,U)),VST("reasonName")=$P(ICD,U,2)
"RTN","HMPDJ04E",63,0)
 ;
"RTN","HMPDJ04E",64,0)
 ; provider(s)
"RTN","HMPDJ04E",65,0)
 S I=0
"RTN","HMPDJ04E",66,0)
 I $G(EDP(230,IENS,3.5,"I"))'="" S I=I+1 D PROV("VST",I,$G(EDP(230,IENS,3.5,"I")),"P",1) ;primary/MD
"RTN","HMPDJ04E",67,0)
 I $G(EDP(230,IENS,3.6,"I"))'="" S I=I+1 D PROV("VST",I,$G(EDP(230,IENS,3.6,"I")),"P",1) ;nurse
"RTN","HMPDJ04E",68,0)
 I $G(EDP(230,IENS,3.7,"I"))'="" S I=I+1 D PROV("VST",I,$G(EDP(230,IENS,3.7,"I")),"P",1) ;resident
"RTN","HMPDJ04E",69,0)
 S:$G(EDP(230,IENS,3.8,"I"))'="" VST("comment")=$G(EDP(230,IENS,3.8,"I"))
"RTN","HMPDJ04E",70,0)
 S:$G(EDP(230,IENS,3.3,"E")) VST("appointmentStatus")=$G(EDP(230,IENS,3.3,"E"))
"RTN","HMPDJ04E",71,0)
 ;
"RTN","HMPDJ04E",72,0)
 ; note(s)
"RTN","HMPDJ04E",73,0)
 ; TIU^HMPDJ04A(ID,.VST)
"RTN","HMPDJ04E",74,0)
 K ^TMP("PXKENC",$J,ID)
"RTN","HMPDJ04E",75,0)
 S VST("lastUpdateTime")=$$EN^HMPSTMP("visit") ;RHL 20150102
"RTN","HMPDJ04E",76,0)
 S VST("stampTime")=VST("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ04E",77,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ04E",78,0)
 I $G(HMPMETA) D ADD^HMPMETA("visit",VST("uid"),VST("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04E",79,0)
 D ADD^HMPDJ("VST","visit")
"RTN","HMPDJ04E",80,0)
 Q
"RTN","HMPDJ04E",81,0)
 ;
"RTN","HMPDJ04E",82,0)
PROV(ARR,I,IEN,ROLE,PRIM) ; -- add providers
"RTN","HMPDJ04E",83,0)
 S @ARR@("providers",I,"providerUid")=$$SETUID^HMPUTILS("user",,+IEN)
"RTN","HMPDJ04E",84,0)
 S @ARR@("providers",I,"providerName")=$$GET1^DIQ(200,(+IEN)_",",.01)  ;DE2818, ICR 10060
"RTN","HMPDJ04E",85,0)
 S @ARR@("providers",I,"role")=ROLE
"RTN","HMPDJ04E",86,0)
 S:$G(PRIM) @ARR@("providers",I,"primary")="true"
"RTN","HMPDJ04E",87,0)
 Q
"RTN","HMPDJ04E",88,0)
 ;
"RTN","HMPDJ04E",89,0)
NAME(X) ; -- name of a code in #233.1
"RTN","HMPDJ04E",90,0)
 Q
"RTN","HMPDJ04E",91,0)
 N Y S Y=$P($G(^EDPB(233.1,+$G(X),0)),U,2)
"RTN","HMPDJ04E",92,0)
 Q Y
"RTN","HMPDJ05")
0^40^B85682186
"RTN","HMPDJ05",1,0)
HMPDJ05 ;SLC/MKB,ASMR/RRB - Medications by order;Nov 09, 2015 15:12:10
"RTN","HMPDJ05",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ05",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ05",4,0)
 ;
"RTN","HMPDJ05",5,0)
 ; External References: see HMPDJ05V for DBIA list
"RTN","HMPDJ05",6,0)
 ; ^OR(100) references - ICR 5771
"RTN","HMPDJ05",7,0)
 ;
"RTN","HMPDJ05",8,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ05",9,0)
 Q
"RTN","HMPDJ05",10,0)
 ;
"RTN","HMPDJ05",11,0)
PS1(ID) ; -- med order
"RTN","HMPDJ05",12,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ05",13,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ05",14,0)
 S ERRMSG="A problem occurred converting order "_ID_" for the medication domain"
"RTN","HMPDJ05",15,0)
 N ORPK,TYPE S ID=+$G(ID)
"RTN","HMPDJ05",16,0)
 S ORPK=$$PKGID^ORX8(ID),TYPE=$E(ORPK,$L(ORPK)) S:TYPE=+TYPE TYPE="R"
"RTN","HMPDJ05",17,0)
 ;
"RTN","HMPDJ05",18,0)
 N ORUPCHUK,ORVP,ORPCL,ORDUZ,ORODT,ORSTRT,ORSTOP,ORL,ORTO,ORSTS,ORNP,ORPV,ORTX
"RTN","HMPDJ05",19,0)
 N MED,CLS,OI,X,LOC,FAC,DRUG,DA,CNT,HMPESP
"RTN","HMPDJ05",20,0)
 S X=$S(ORPK:$E(ORPK,$L(ORPK)),1:"Z") S:X=+X X="R" ;last char = PS file
"RTN","HMPDJ05",21,0)
 S CLS=$S("RSN"[X:"O","UV"[X:"I",1:$$GET1^DIQ(100,ID_",",10,"I"))
"RTN","HMPDJ05",22,0)
 S MED("uid")=$$SETUID^HMPUTILS("med",DFN,ID)
"RTN","HMPDJ05",23,0)
 S MED("orders",1,"orderUid")=$$SETUID^HMPUTILS("order",DFN,ID)
"RTN","HMPDJ05",24,0)
 S X=$$GET1^DIQ(100,ID_",",9,"I") S:X MED("orders",1,"predecessor")=$$SETUID^HMPUTILS("med",DFN,+X)
"RTN","HMPDJ05",25,0)
 S X=$$GET1^DIQ(100,ID_",",9.1,"I") S:X MED("orders",1,"successor")=$$SETUID^HMPUTILS("med",DFN,+X)
"RTN","HMPDJ05",26,0)
 S:ORPK MED("localId")=ORPK_";"_CLS
"RTN","HMPDJ05",27,0)
 D EN^ORX8(ID) S X="" F  S X=$O(ORUPCHUK(X)) Q:X=""  S:$D(ORUPCHUK(X))#2 @X=ORUPCHUK(X)
"RTN","HMPDJ05",28,0)
 S:$G(ORODT) MED("orders",1,"ordered")=$$JSONDT^HMPUTILS(ORODT)
"RTN","HMPDJ05",29,0)
 S:$G(ORNP) MED("orders",1,"providerUid")=$$SETUID^HMPUTILS("user",,+ORNP),MED("orders",1,"providerName")=$P(ORNP,U,2)
"RTN","HMPDJ05",30,0)
 S LOC=+$G(ORL),FAC=$$FAC^HMPD(LOC) I LOC D
"RTN","HMPDJ05",31,0)
 . S MED("orders",1,"locationUid")=$$SETUID^HMPUTILS("location",,LOC)
"RTN","HMPDJ05",32,0)
 . S MED("orders",1,"locationName")=$$GET1^DIQ(44,LOC_",",.01)  ;DE2818, ICR 10040
"RTN","HMPDJ05",33,0)
 D FACILITY^HMPUTILS(FAC,"MED")
"RTN","HMPDJ05",34,0)
 S:$G(ORSTRT) MED("overallStart")=$$JSONDT^HMPUTILS(ORSTRT)
"RTN","HMPDJ05",35,0)
 S:$G(ORSTOP) (MED("stopped"),MED("overallStop"))=$$JSONDT^HMPUTILS(ORSTOP)
"RTN","HMPDJ05",36,0)
 S MED("vaStatus")=$P($G(ORSTS),U,2)
"RTN","HMPDJ05",37,0)
 S MED("medStatusName")=$$STATUS^HMPDPSOR(+$G(ORSTS))
"RTN","HMPDJ05",38,0)
 S MED("medStatus")=$$MEDSTAT^HMPDJ05V(MED("medStatusName"))
"RTN","HMPDJ05",39,0)
 I CLS="I" D
"RTN","HMPDJ05",40,0)
 . S:$$GET1^DIQ(44,LOC_",",2802,"I") MED("IMO")="true"  ;DE2818, ICR 10040, (#2802) ADMINISTER INPATIENT MEDS? [25S]
"RTN","HMPDJ05",41,0)
 . S X=$$GET1^DIQ(100,ID_",",36) S:X MED("parent")=X  ;DE2818, ICR 5771, (#36) PARENT
"RTN","HMPDJ05",42,0)
 I ORPK D OEL^PSOORRL(DFN,ORPK_";"_CLS)
"RTN","HMPDJ05",43,0)
 S X=$S(ORPK["N":"N",1:CLS),MED("vaType")=X,MED("medType")=$$TYPE^HMPDJ05V(X)
"RTN","HMPDJ05",44,0)
 I CLS="O" S MED("type")=$S(ORPK["N":"OTC",1:"Prescription")
"RTN","HMPDJ05",45,0)
 S X=$G(HMPESP("COMMENT",1)) S:$L(X) MED("comment")=X
"RTN","HMPDJ05",46,0)
 I $$ISIV^HMPDJ05V G IV1^HMPDJ05V
"RTN","HMPDJ05",47,0)
 ;
"RTN","HMPDJ05",48,0)
A ; - Get order responses
"RTN","HMPDJ05",49,0)
 S OI=$$OI^ORX8(ID) I OI D
"RTN","HMPDJ05",50,0)
 . S X=$P(OI,U,2) S:$E(X,$L(X))=" " X=$E(X,1,$L(X)-1)
"RTN","HMPDJ05",51,0)
 . S MED("name")=X
"RTN","HMPDJ05",52,0)
 . D ZERO^PSS50P7(+$P(OI,U,3),,,"PSOI")
"RTN","HMPDJ05",53,0)
 . S MED("productFormName")=$P($G(^TMP($J,"PSOI",+$P(OI,U,3),.02)),U,2)
"RTN","HMPDJ05",54,0)
 . S:+$G(^TMP($J,"PSOI",+$P(OI,U,3),.09)) MED("supply")="true"
"RTN","HMPDJ05",55,0)
 D RESP^HMPDPSOR(ID,.HMPESP) ;order responses
"RTN","HMPDJ05",56,0)
 S DRUG=+$G(^TMP("PS",$J,"DD",1,0)) S:'DRUG DRUG=+$G(HMPESP("DRUG",1))
"RTN","HMPDJ05",57,0)
 S MED("sig")=$S(CLS="I":"Give: ",1:"")_$G(HMPESP("SIG",1)) ;ORTX(2)
"RTN","HMPDJ05",58,0)
 I CLS="O",'$L($G(HMPESP("SIG",1))),'$D(HMPESP("INSTR")) S MED("sig")=$G(HMPESP("COMMENT",1)) ;old Rx
"RTN","HMPDJ05",59,0)
 ;
"RTN","HMPDJ05",60,0)
B ; - Get dosages
"RTN","HMPDJ05",61,0)
 ;DE2818 begin, ^OR(100) references - ICR 5771
"RTN","HMPDJ05",62,0)
 I '$O(^OR(100,ID,2,0)) D  ;single dose or OP
"RTN","HMPDJ05",63,0)
 . N HMPY,START,STOP,DUR,CONJ,MIN
"RTN","HMPDJ05",64,0)
 . S START=$G(ORSTRT),STOP=$G(ORSTOP),MIN=0
"RTN","HMPDJ05",65,0)
 . S CNT=0 F  S CNT=$O(HMPESP("INSTR",CNT)) Q:CNT<1  D
"RTN","HMPDJ05",66,0)
 .. K HMPY D DOSE(.HMPY,CNT) M MED("dosages",CNT)=HMPY
"RTN","HMPDJ05",67,0)
 .. ;determine start & stop per dose
"RTN","HMPDJ05",68,0)
 .. S MED("dosages",CNT,"relativeStart")=MIN
"RTN","HMPDJ05",69,0)
 .. S DUR=$G(HMPY("complexDuration")),CONJ=$G(HMPY("complexConjunction"))
"RTN","HMPDJ05",70,0)
 .. S STOP=$S(DUR:$$STOP(START,DUR),1:STOP)
"RTN","HMPDJ05",71,0)
 .. S:START MED("dosages",CNT,"start")=$$JSONDT^HMPUTILS(START)
"RTN","HMPDJ05",72,0)
 .. S:STOP MED("dosages",CNT,"stop")=$$JSONDT^HMPUTILS(STOP)
"RTN","HMPDJ05",73,0)
 .. S X=$$RELTIME(START,STOP,DUR,MIN),MED("dosages",CNT,"relativeStop")=$S($E(X)=".":0_X,1:X)
"RTN","HMPDJ05",74,0)
 .. I $E(CONJ)="T",DUR S START=STOP,MIN=X
"RTN","HMPDJ05",75,0)
 I $O(^OR(100,ID,2,0)) D
"RTN","HMPDJ05",76,0)
 . N DD,CONJ,HMPY,MIN
"RTN","HMPDJ05",77,0)
 . M CONJ=HMPESP("CONJ"),DUR=HMPESP("DAYS") S MIN=0
"RTN","HMPDJ05",78,0)
 . S (DA,CNT)=0 F  S DA=$O(^OR(100,ID,2,DA)) Q:DA<1  D  ;child orders
"RTN","HMPDJ05",79,0)
 .. K HMPESP,HMPY D RESP^HMPDPSOR(DA,.HMPESP),DOSE(.HMPY,1)
"RTN","HMPDJ05",80,0)
 .. S CNT=CNT+1 M MED("dosages",CNT)=HMPY
"RTN","HMPDJ05",81,0)
 .. S MED("dosages",CNT,"relativeStart")=MIN
"RTN","HMPDJ05",82,0)
 .. S MED("dosages",CNT,"complexConjunction")=$G(CONJ(CNT))
"RTN","HMPDJ05",83,0)
 .. S MED("dosages",CNT,"complexDuration")=$G(DUR(CNT))
"RTN","HMPDJ05",84,0)
 .. S MED("dosages",CNT,"relatedOrder")=DA
"RTN","HMPDJ05",85,0)
 .. S X=$P($G(^OR(100,DA,0)),U,8,9)
"RTN","HMPDJ05",86,0)
 .. S:$P(X,U) MED("dosages",CNT,"start")=$$JSONDT^HMPUTILS($P(X,U))
"RTN","HMPDJ05",87,0)
 .. S:$P(X,U,2) MED("dosages",CNT,"stop")=$$JSONDT^HMPUTILS($P(X,U,2))
"RTN","HMPDJ05",88,0)
 .. I $P(X,U,2)>$G(ORSTOP) S ORSTOP=$P(X,U,2) ;get last stop time
"RTN","HMPDJ05",89,0)
 .. S X=$$RELTIME($P(X,U),$P(X,U,2),$G(DUR(CNT)),MIN)
"RTN","HMPDJ05",90,0)
 .. S MED("dosages",CNT,"relativeStop")=$S($E(X)=".":0_X,1:X) S:$G(CONJ(CNT))="T" MIN=X
"RTN","HMPDJ05",91,0)
 .. S:'DRUG DD=+$G(HMPESP("DRUG",1)),DD(DD,DA)="" ;dispense drug(s)
"RTN","HMPDJ05",92,0)
 .. ; get ^TMP("PS",$J) from 1st child, if Inpt parent:
"RTN","HMPDJ05",93,0)
 .. I '$D(^TMP("PS",$J)) S ORPK=$$PKGID^ORX8(DA) D OEL^PSOORRL(DFN,ORPK_";"_CLS)
"RTN","HMPDJ05",94,0)
 . S MED("stopped")=$$JSONDT^HMPUTILS($G(ORSTOP)) ;reset from last child order
"RTN","HMPDJ05",95,0)
 . S DD=$O(DD(0)) I DD,'$O(DD(DD)) S DRUG=DD Q    ;1 drug for order
"RTN","HMPDJ05",96,0)
 . S (DD,CNT)=0 F  S DD=$O(DD(DD)) Q:DD<1  S DA=0 F  S DA=$O(DD(DD,DA)) Q:DA<1  S CNT=CNT+1 D NDF(DD,CNT,DA)
"RTN","HMPDJ05",97,0)
 ;
"RTN","HMPDJ05",98,0)
 ;DE2818 end
"RTN","HMPDJ05",99,0)
C ; - Get OP data
"RTN","HMPDJ05",100,0)
 I CLS="O",ORPK'["N" D
"RTN","HMPDJ05",101,0)
 . S MED("orders",1,"quantityOrdered")=$G(HMPESP("QTY",1))
"RTN","HMPDJ05",102,0)
 . S MED("orders",1,"daysSupply")=$G(HMPESP("SUPPLY",1))
"RTN","HMPDJ05",103,0)
 . S MED("orders",1,"vaRouting")=$G(HMPESP("PICKUP",1))
"RTN","HMPDJ05",104,0)
 . S MED("orders",1,"fillsAllowed")=$G(HMPESP("REFILLS",1))
"RTN","HMPDJ05",105,0)
 . S MED("patientInstruction")=$G(HMPESP("PI",1))
"RTN","HMPDJ05",106,0)
 . Q:ORPK["P"!(ORPK["S")  ;pending
"RTN","HMPDJ05",107,0)
 . N HMP,RX0,RX1,FILL,RFD,MW,REL
"RTN","HMPDJ05",108,0)
 . K ^TMP("PSOR",$J) D EN^PSOORDER(DFN,+ORPK)
"RTN","HMPDJ05",109,0)
 . S RX0=$G(^TMP("PSOR",$J,+ORPK,0)),RX1=$G(^(1)),MED("orders",1,"prescriptionId")=$P(RX0,U,5)
"RTN","HMPDJ05",110,0)
 . I '$G(HMPESP("QTY",1)) S MED("orders",1,"quantityOrdered")=$P(RX0,U,6)
"RTN","HMPDJ05",111,0)
 . I '$G(HMPESP("SUPPLY",1)) S MED("orders",1,"daysSupply")=$P(RX0,U,7)
"RTN","HMPDJ05",112,0)
 . S MED("orders",1,"fillsRemaining")=$P(RX0,U,9),MED("lastFilled")=$$JSONDT^HMPUTILS($P(RX0,U,3))
"RTN","HMPDJ05",113,0)
 . S I=$P(RX0,U,2) I I S FILL(I)=I_"^^^"_$P(RX0,U,6,7)_"^^^"_$P(RX0,U,13)_"^^"_$P(RX1,U,6) ;original fill
"RTN","HMPDJ05",114,0)
 . S I=0 F  S I=$O(^TMP("PSOR",$J,+ORPK,"REF",I)) Q:I<1  S X=$G(^(I,0)),FILL(+X)=X
"RTN","HMPDJ05",115,0)
 . S I=0 F  S I=$O(^TMP("PSOR",$J,+ORPK,"RPAR",I)) Q:I<1  S X=$G(^(I,0)),$P(X,U,14)=1,FILL(+X)=X
"RTN","HMPDJ05",116,0)
 . S (I,RFD)=0 F  S RFD=$O(FILL(RFD)) Q:RFD<1  S X=$G(FILL(RFD)) D  ;sort 1st
"RTN","HMPDJ05",117,0)
 .. S I=I+1,MW=$P($P(X,U,10),";"),REL=$P($P(X,U,8),".")
"RTN","HMPDJ05",118,0)
 .. S MED("fills",I,"dispenseDate")=$$JSONDT^HMPUTILS($P(RFD,"."))
"RTN","HMPDJ05",119,0)
 .. S MED("fills",I,"releaseDate")=$$JSONDT^HMPUTILS(REL)
"RTN","HMPDJ05",120,0)
 .. S MED("fills",I,"routing")=MW
"RTN","HMPDJ05",121,0)
 .. S MED("fills",I,"quantityDispensed")=$P(X,U,4)
"RTN","HMPDJ05",122,0)
 .. S MED("fills",I,"daysSupplyDispensed")=$P(X,U,5)
"RTN","HMPDJ05",123,0)
 .. S:$P(X,U,14) MED("fills",I,"partial")=1 ;"true"
"RTN","HMPDJ05",124,0)
 . S X=$S($P(RX0,U,11):$P(RX0,U,11),$P(RX0,U,10):$P(RX0,U,10),1:0)
"RTN","HMPDJ05",125,0)
 . S:X MED("orders",1,"fillCost")=X
"RTN","HMPDJ05",126,0)
 . S X=$$GET1^PSODI(52,+ORPK_",",26,"I") S:X MED("overallStop")=$$JSONDT^HMPUTILS($P(X,U,2)) ;1^expirationDate
"RTN","HMPDJ05",127,0)
 I CLS="I" D
"RTN","HMPDJ05",128,0)
 . S X=$$GET1^DIQ(55.06,+ORPK_","_DFN_",",25,"I")
"RTN","HMPDJ05",129,0)
 . S:X MED("overallStop")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ05",130,0)
 . D BCMA^HMPDJ05V(.MED,DFN,ORPK)
"RTN","HMPDJ05",131,0)
 ;
"RTN","HMPDJ05",132,0)
PSQ ; finish
"RTN","HMPDJ05",133,0)
 D:DRUG NDF(+DRUG)
"RTN","HMPDJ05",134,0)
 S MED("qualifiedName")=$G(MED("name"))
"RTN","HMPDJ05",135,0)
 S X=+$P($G(^TMP("PS",$J,"RXN",0)),U,5)
"RTN","HMPDJ05",136,0)
 S:X MED("orders",1,"pharmacistUid")=$$SETUID^HMPUTILS("user",,X),MED("orders",1,"pharmacistName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818, ICR 10035
"RTN","HMPDJ05",137,0)
 K ^TMP("PS",$J),^TMP($J,"PSOI"),^TMP("PSOR",$J)
"RTN","HMPDJ05",138,0)
 S MED("lastUpdateTime")=$$EN^HMPSTMP("med") ;RHL 20150102
"RTN","HMPDJ05",139,0)
 S MED("stampTime")=MED("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ05",140,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ05",141,0)
 I $G(HMPMETA) D ADD^HMPMETA("med",MED("uid"),MED("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ05",142,0)
 D ADD^HMPDJ("MED","med")
"RTN","HMPDJ05",143,0)
 Q
"RTN","HMPDJ05",144,0)
 ;
"RTN","HMPDJ05",145,0)
DOSE(Y,N) ; -- return dosage data from HMPESP(ID,N) to Y("name")
"RTN","HMPDJ05",146,0)
 N X,DOSE,DUR,CONJ S N=+$G(N,1) K Y
"RTN","HMPDJ05",147,0)
 S Y("instructions")=$G(HMPESP("INSTR",N))
"RTN","HMPDJ05",148,0)
 S DOSE=$G(HMPESP("DOSE",N)),X=$P(DOSE,"&",1,2)
"RTN","HMPDJ05",149,0)
 S:$L(X)>1 Y("dose")=$P(X,"&"),Y("units")=$P(X,"&",2)
"RTN","HMPDJ05",150,0)
 S X=$P(DOSE,"&",3,4) S:X Y("amount")=$P(X,"&"),Y("noun")=$P(X,"&",2)
"RTN","HMPDJ05",151,0)
 ; Y("dose")=$S($L(X)>2:$TR(X,"&"," "),1:$P(X,"&"))
"RTN","HMPDJ05",152,0)
 S X=+$G(HMPESP("ROUTE",N)) D ALL^PSS51P2(X,,,,"HMPTE")
"RTN","HMPDJ05",153,0)
 S Y("routeName")=$G(^TMP($J,"HMPTE",X,1))
"RTN","HMPDJ05",154,0)
 S X=$G(HMPESP("SCHEDULE",N)) I $L(X) S Y("scheduleName")=X D SCH^HMPDJ05V(X)
"RTN","HMPDJ05",155,0)
 S X=$G(HMPESP("ADMIN",N)) S:$L(X) Y("adminTimes")=X
"RTN","HMPDJ05",156,0)
 S X=$G(HMPESP("DAYS",N)) S:$L(X) Y("complexDuration")=X,DUR=X
"RTN","HMPDJ05",157,0)
 S X=$G(HMPESP("CONJ",N)) S:$L(X) Y("complexConjunction")=X,CONJ=X
"RTN","HMPDJ05",158,0)
 I $L($G(CONJ)),'$L($G(DUR)) D  ;look ahead to find duration
"RTN","HMPDJ05",159,0)
 . N I,D S I=$O(HMPESP("DAYS",N)),D=$S(I:$G(HMPESP("DAYS",I)),1:"")
"RTN","HMPDJ05",160,0)
 . S:$L(D) Y("complexDuration")=D
"RTN","HMPDJ05",161,0)
 K ^TMP($J,"HMPTE")
"RTN","HMPDJ05",162,0)
 Q
"RTN","HMPDJ05",163,0)
 ;
"RTN","HMPDJ05",164,0)
STOP(BEG,X) ; -- Return date after adding X to BEG
"RTN","HMPDJ05",165,0)
 N D,H,M,UNT,Y
"RTN","HMPDJ05",166,0)
 S Y=BEG,(D,H,M)=0,UNT=$P(X,+X,2),X=+X
"RTN","HMPDJ05",167,0)
 S UNT=$S($E(UNT)=" ":$E(UNT,2),1:$E(UNT)) I UNT="" S UNT="D"
"RTN","HMPDJ05",168,0)
 S:UNT="L" D=30*X
"RTN","HMPDJ05",169,0)
 S:UNT="W" D=7*X
"RTN","HMPDJ05",170,0)
 S:UNT="D" D=X
"RTN","HMPDJ05",171,0)
 S:UNT="H" H=X
"RTN","HMPDJ05",172,0)
 S:UNT="M" M=X
"RTN","HMPDJ05",173,0)
 S Y=$$FMADD^XLFDT(BEG,D,H,M)
"RTN","HMPDJ05",174,0)
 Q Y
"RTN","HMPDJ05",175,0)
 ;
"RTN","HMPDJ05",176,0)
NDF(DRUG,VPI,ORD) ; -- Set NDF data for dispense DRUG ien
"RTN","HMPDJ05",177,0)
 ; code ^ name ^ vuid [^ role ^ concentration ^ order]
"RTN","HMPDJ05",178,0)
 N LEN,HMPX,STR,VUID,X,I
"RTN","HMPDJ05",179,0)
 S DRUG=+$G(DRUG) Q:'DRUG
"RTN","HMPDJ05",180,0)
 D EN^PSSDI(50,,50,"901;902",DRUG,"HMPX")
"RTN","HMPDJ05",181,0)
 S STR=$S($G(HMPX(50,DRUG,901)):$G(HMPX(50,DRUG,901))_" "_$G(HMPX(50,DRUG,902)),1:"")
"RTN","HMPDJ05",182,0)
 D NDF^PSS50(DRUG,,,,,"NDF") S VPI=+$G(VPI,1)
"RTN","HMPDJ05",183,0)
 ;
"RTN","HMPDJ05",184,0)
 S MED("products",VPI,"ingredientRole")="urn:sct:410942007" ;Drug
"RTN","HMPDJ05",185,0)
 S:$G(ORD) MED("products",VPI,"relatedOrder")=ORD
"RTN","HMPDJ05",186,0)
 S:$G(STR) MED("products",VPI,"strength")=STR
"RTN","HMPDJ05",187,0)
 S X=$G(MED("name")) S:$L(X) MED("products",VPI,"ingredientName")=X
"RTN","HMPDJ05",188,0)
 ;
"RTN","HMPDJ05",189,0)
 S X=$G(^TMP($J,"NDF",DRUG,20)) ;VA Generic
"RTN","HMPDJ05",190,0)
 S MED("products",VPI,"ingredientCode")="urn:va:vuid:"_$$VUID^HMPD(+X,50.6)
"RTN","HMPDJ05",191,0)
 S MED("products",VPI,"ingredientCodeName")=$P(X,U,2)
"RTN","HMPDJ05",192,0)
 ;
"RTN","HMPDJ05",193,0)
 S X=$G(^TMP($J,"NDF",DRUG,22)) ;VA Product
"RTN","HMPDJ05",194,0)
 S MED("products",VPI,"suppliedCode")="urn:va:vuid:"_$$VUID^HMPD(+X,50.68)
"RTN","HMPDJ05",195,0)
 S MED("products",VPI,"suppliedName")=$P(X,U,2)
"RTN","HMPDJ05",196,0)
 ;
"RTN","HMPDJ05",197,0)
 S X=$G(^TMP($J,"NDF",DRUG,25)) ;VA Drug Class
"RTN","HMPDJ05",198,0)
 S MED("products",VPI,"drugClassCode")="urn:vadc:"_$P(X,U,2)
"RTN","HMPDJ05",199,0)
 S MED("products",VPI,"drugClassName")=$P(X,U,3)
"RTN","HMPDJ05",200,0)
 ;
"RTN","HMPDJ05",201,0)
 K ^TMP($J,"NDF")
"RTN","HMPDJ05",202,0)
 Q
"RTN","HMPDJ05",203,0)
 ;
"RTN","HMPDJ05",204,0)
RELTIME(START,STOP,DUR,MIN) ; -- Return #min for dose
"RTN","HMPDJ05",205,0)
 N Y S Y=0
"RTN","HMPDJ05",206,0)
 I START>0,STOP>0 S Y=$$FMDIFF^XLFDT(STOP,START,2)\60 I 1
"RTN","HMPDJ05",207,0)
 E  I DUR S Y=$$TOMIN(DUR) I 1
"RTN","HMPDJ05",208,0)
 E  S Y=$G(HMPESP("SUPPLY",1))*1440
"RTN","HMPDJ05",209,0)
 S Y=$S(Y:Y+MIN,1:MIN)
"RTN","HMPDJ05",210,0)
 Q Y
"RTN","HMPDJ05",211,0)
 ;
"RTN","HMPDJ05",212,0)
TOMIN(DUR) ;
"RTN","HMPDJ05",213,0)
 N RESULT,TIME,UNIT
"RTN","HMPDJ05",214,0)
 S UNIT=$$UP^XLFSTR($E($P(DUR," ",2)))
"RTN","HMPDJ05",215,0)
 I UNIT="" Q 0
"RTN","HMPDJ05",216,0)
 S TIME=$P(DUR," ")
"RTN","HMPDJ05",217,0)
 S RESULT=$S(UNIT="M":TIME,UNIT="H":TIME*60,UNIT="D":TIME*1440,UNIT="W":TIME*10080,UNIT="L":TIME*43200,1:0)
"RTN","HMPDJ05",218,0)
 Q RESULT
"RTN","HMPDJ05V")
0^41^B69065747
"RTN","HMPDJ05V",1,0)
HMPDJ05V ;SLC/MKB,ASMR/RRB - IV/Infusions;Nov 09, 2015 15:40:35
"RTN","HMPDJ05V",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ05V",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ05V",4,0)
 ;
"RTN","HMPDJ05V",5,0)
 ; External References          DBIA#
"RTN","HMPDJ05V",6,0)
 ; -------------------          -----
"RTN","HMPDJ05V",7,0)
 ; ^OR(100                       5771
"RTN","HMPDJ05V",8,0)
 ; ^ORD(100.98                    873
"RTN","HMPDJ05V",9,0)
 ; ^ORD(101.43                   2843
"RTN","HMPDJ05V",10,0)
 ; ^PSB(53.79                    5909
"RTN","HMPDJ05V",11,0)
 ; ^SC                          10040
"RTN","HMPDJ05V",12,0)
 ; ^VA(200                      10060
"RTN","HMPDJ05V",13,0)
 ; DIQ                           2056
"RTN","HMPDJ05V",14,0)
 ; ORQ1,^TMP("ORR"               3154
"RTN","HMPDJ05V",15,0)
 ; ORX8                     2467,3071
"RTN","HMPDJ05V",16,0)
 ; PSODI                         4858
"RTN","HMPDJ05V",17,0)
 ; PSOORDER,^TMP("PSOR"          1878
"RTN","HMPDJ05V",18,0)
 ; PSOORRL,^TMP("PS"             2400
"RTN","HMPDJ05V",19,0)
 ; PSS50                         4533
"RTN","HMPDJ05V",20,0)
 ; PSS50P7                       4662
"RTN","HMPDJ05V",21,0)
 ; PSS51P1                       4546
"RTN","HMPDJ05V",22,0)
 ; PSS51P2                       4548
"RTN","HMPDJ05V",23,0)
 ; PSS52P6                       4549
"RTN","HMPDJ05V",24,0)
 ; PSS52P7                       4550
"RTN","HMPDJ05V",25,0)
 ; PSSDI                         4551
"RTN","HMPDJ05V",26,0)
 ; XLFDT                        10103
"RTN","HMPDJ05V",27,0)
 ; XLFSTR                       10104
"RTN","HMPDJ05V",28,0)
 ;
"RTN","HMPDJ05V",29,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ05V",30,0)
 Q
"RTN","HMPDJ05V",31,0)
 ;
"RTN","HMPDJ05V",32,0)
ISIV() ; -- Return 1 or 0, if order is for IV/infusion
"RTN","HMPDJ05V",33,0)
 I ORPK["V" Q 1
"RTN","HMPDJ05V",34,0)
 I $P($G(ORTO),U,2)?1"IV".E Q 1
"RTN","HMPDJ05V",35,0)
 I +$G(ORPCL)=130 Q 1
"RTN","HMPDJ05V",36,0)
 I $G(^TMP("PS",$J,"B",0)) Q 1
"RTN","HMPDJ05V",37,0)
 Q 0
"RTN","HMPDJ05V",38,0)
 ;
"RTN","HMPDJ05V",39,0)
IV1 ; -- IV fluid, Infusion order [continued from HMPDJ05]
"RTN","HMPDJ05V",40,0)
 ; [Also expects ORPK, OEL^PSOORRL data]
"RTN","HMPDJ05V",41,0)
 N PS,PS0,X,X0,RTE,I,ADD,BASE
"RTN","HMPDJ05V",42,0)
 S MED("vaType")="V",MED("medType")="urn:sct:105903003"
"RTN","HMPDJ05V",43,0)
 S (ADD,BASE)=""
"RTN","HMPDJ05V",44,0)
 I ORPK,$D(^TMP("PS",$J)) D  G IVQ
"RTN","HMPDJ05V",45,0)
 . M PS=^TMP("PS",$J) S PS0=$G(PS(0)),MED("name")=$P(PS0,U)
"RTN","HMPDJ05V",46,0)
 . S X=$G(PS("MDR",1,0)) S:$L(X) MED("dosages",1,"routeName")=X
"RTN","HMPDJ05V",47,0)
 . S X=$P($G(PS("SCH",1,0)),U) I $L(X) D
"RTN","HMPDJ05V",48,0)
 .. S MED("dosages",1,"scheduleName")=X
"RTN","HMPDJ05V",49,0)
 .. N Y D SCH(X)
"RTN","HMPDJ05V",50,0)
 .. M MED("dosages",1)=Y
"RTN","HMPDJ05V",51,0)
 . S X=$G(PS("ADM",1,0)) S:$L(X) MED("dosages",1,"adminTimes")=X
"RTN","HMPDJ05V",52,0)
 . S X=$P(PS0,U,2) I X["INFUSE OVER" S MED("dosages",1,"duration")=X
"RTN","HMPDJ05V",53,0)
 . E  S MED("dosages",1,"ivRate")=X
"RTN","HMPDJ05V",54,0)
 . S X=$G(PS("IVLIM",0)) S:$L(X) MED("dosages",1,"restriction")=$$IVLIM(X)
"RTN","HMPDJ05V",55,0)
 . S X=+$P($G(PS("RXN",0)),U,5)
"RTN","HMPDJ05V",56,0)
 . S:X MED("orders",1,"pharmacistUid")=$$SETUID^HMPUTILS("user",,X),MED("orders",1,"pharmacistName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ05V",57,0)
 . D IVP
"RTN","HMPDJ05V",58,0)
 ; no med in PS (pending or cancelled), so use Order values
"RTN","HMPDJ05V",59,0)
 S RTE=+$$VALUE^ORX8(ID,"ROUTE") I RTE D
"RTN","HMPDJ05V",60,0)
 . D ALL^PSS51P2(RTE,,,,"HMPTE")
"RTN","HMPDJ05V",61,0)
 . S MED("dosages",1,"routeName")=$G(^TMP($J,"HMPTE",RTE,1))
"RTN","HMPDJ05V",62,0)
 S X=$$VALUE^ORX8(ID,"SCHEDULE") I $L(X) D
"RTN","HMPDJ05V",63,0)
 . S MED("dosages",1,"scheduleName")=X
"RTN","HMPDJ05V",64,0)
 . N Y D SCH(X)
"RTN","HMPDJ05V",65,0)
 . M MED("dosages",1)=Y
"RTN","HMPDJ05V",66,0)
 S X=$$VALUE^ORX8(ID,"ADMIN") S:$L(X) MED("dosages",1,"adminTimes")=X
"RTN","HMPDJ05V",67,0)
 S X=$$VALUE^ORX8(ID,"RATE")
"RTN","HMPDJ05V",68,0)
 I X["INFUSE OVER" S MED("dosages",1,"duration")=X
"RTN","HMPDJ05V",69,0)
 E  S MED("dosages",1,"ivRate")=X
"RTN","HMPDJ05V",70,0)
 ;DE2818, ^OR(100) references - ICR 5771
"RTN","HMPDJ05V",71,0)
 S I=0 F  S I=$O(^OR(100,ID,.1,I)) Q:I<1  S X=+$G(^(I,0)) D
"RTN","HMPDJ05V",72,0)
 . S X0=$$GET1^DIQ(101.43,X_",",.01),MED("name")=$P(X0,U)  ;DE2818, ICR 2843
"RTN","HMPDJ05V",73,0)
 . S MED("products",I,"ingredientName")=$P(X0,U)
"RTN","HMPDJ05V",74,0)
 S X=$$VALUE^ORX8(ID,"DAYS") I $L(X) D  S MED("dosages",1,"restriction")=X
"RTN","HMPDJ05V",75,0)
 . I X?1.A1.N S X=$$IVLIM(X) Q
"RTN","HMPDJ05V",76,0)
 . ; CPRS format = "for a total of 3 doses" or "with total volume 100ml"
"RTN","HMPDJ05V",77,0)
 . F I=1:1:$L(X) I $E(X,I)=+$E(X,I) S X=$E(X,I,$L(X)) Q
"RTN","HMPDJ05V",78,0)
IVQ ; done
"RTN","HMPDJ05V",79,0)
 K ^TMP("PS",$J),^TMP($J,"HMPTE")
"RTN","HMPDJ05V",80,0)
 S MED("qualifiedName")=ADD_$S($L(ADD)&$L(BASE):" in ",1:"")_BASE
"RTN","HMPDJ05V",81,0)
 S MED("lastUpdateTime")=$$EN^HMPSTMP("med") ;RHL 20150102
"RTN","HMPDJ05V",82,0)
 S MED("stampTime")=MED("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ05V",83,0)
 D BCMA(.MED,DFN,ORPK)
"RTN","HMPDJ05V",84,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ05V",85,0)
 I $G(HMPMETA) D ADD^HMPMETA("med",MED("uid"),MED("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ05V",86,0)
 D ADD^HMPDJ("MED","med")
"RTN","HMPDJ05V",87,0)
 Q
"RTN","HMPDJ05V",88,0)
 ;
"RTN","HMPDJ05V",89,0)
IVP ; -- add IV products
"RTN","HMPDJ05V",90,0)
 ; [expects PS("A") & PS("B") data arrays from IV1]
"RTN","HMPDJ05V",91,0)
 N VPI,N,NAME,IEN,DRUG,OI,X S N=0
"RTN","HMPDJ05V",92,0)
 ; IV Additives
"RTN","HMPDJ05V",93,0)
 S VPI=0 F  S VPI=$O(PS("A",VPI)) Q:VPI<1  D
"RTN","HMPDJ05V",94,0)
 . K ^TMP($J,"HMPPSIV") S NAME=$P($G(PS("A",VPI,0)),U)
"RTN","HMPDJ05V",95,0)
 . D ZERO^PSS52P6("",NAME,"","HMPPSIV")
"RTN","HMPDJ05V",96,0)
 . S IEN=$O(^TMP($J,"HMPPSIV",0)),DRUG=+$G(^(IEN,1)) Q:IEN<1
"RTN","HMPDJ05V",97,0)
 . S OI=$G(^TMP($J,"HMPPSIV",IEN,15)) S:OI NAME=$$NAME(+OI)
"RTN","HMPDJ05V",98,0)
 . S N=N+1 D:DRUG NDF(DRUG,N,"A",NAME)
"RTN","HMPDJ05V",99,0)
 . S MED("products",N,"strength")=$P($G(PS("A",VPI,0)),U,2)
"RTN","HMPDJ05V",100,0)
 ; IV Base Solutions
"RTN","HMPDJ05V",101,0)
 S VPI=0 F  S VPI=$O(PS("B",VPI)) Q:VPI<1  D
"RTN","HMPDJ05V",102,0)
 . K ^TMP($J,"HMPPSIV") S NAME=$P($G(PS("B",VPI,0)),U)
"RTN","HMPDJ05V",103,0)
 . D ZERO^PSS52P7("",NAME,"","HMPPSIV")
"RTN","HMPDJ05V",104,0)
 . S IEN=$O(^TMP($J,"HMPPSIV",0)),DRUG=+$G(^(IEN,1)) Q:IEN<1
"RTN","HMPDJ05V",105,0)
 . S OI=$G(^TMP($J,"HMPPSIV",IEN,9)) S:OI NAME=$$NAME(+OI)
"RTN","HMPDJ05V",106,0)
 . S N=N+1 D:DRUG NDF(DRUG,N,"B",NAME)
"RTN","HMPDJ05V",107,0)
 . S MED("products",N,"volume")=$P($G(PS("B",VPI,0)),U,2)
"RTN","HMPDJ05V",108,0)
 K ^TMP($J,"HMPPSIV")
"RTN","HMPDJ05V",109,0)
 Q 
"RTN","HMPDJ05V",110,0)
 ;
"RTN","HMPDJ05V",111,0)
NAME(PSOI) ; -- return name_form of PS orderable item
"RTN","HMPDJ05V",112,0)
 N Y,HMPX S PSOI=+$G(PSOI),Y=""
"RTN","HMPDJ05V",113,0)
 D EN^PSSDI(50.7,,50.7,".01;.02",PSOI,"HMPX")
"RTN","HMPDJ05V",114,0)
 S:$D(HMPX) Y=$G(HMPX(50.7,PSOI,.01))_" "_$G(HMPX(50.7,PSOI,.02))
"RTN","HMPDJ05V",115,0)
 Q Y
"RTN","HMPDJ05V",116,0)
 ;
"RTN","HMPDJ05V",117,0)
NDF(DRUG,VPI,ROLE,OI) ; -- Set NDF data for dispense DRUG ien
"RTN","HMPDJ05V",118,0)
 ; code ^ name ^ vuid ^ role ^ concentration
"RTN","HMPDJ05V",119,0)
 N HMPX,VUID,X,I,CONC,NM
"RTN","HMPDJ05V",120,0)
 S DRUG=+$G(DRUG) Q:'DRUG
"RTN","HMPDJ05V",121,0)
 D NDF^PSS50(DRUG,,,,,"NDF")
"RTN","HMPDJ05V",122,0)
 S CONC=$P($G(PS(ROLE,VPI,0)),U,2),NM=""
"RTN","HMPDJ05V",123,0)
 ;
"RTN","HMPDJ05V",124,0)
 S MED("products",VPI,"ingredientRole")=$$ROLE(ROLE)
"RTN","HMPDJ05V",125,0)
 S OI=$G(OI) S:$L(OI) MED("products",VPI,"ingredientName")=OI,NM=OI
"RTN","HMPDJ05V",126,0)
 ; NM=X
"RTN","HMPDJ05V",127,0)
 ;
"RTN","HMPDJ05V",128,0)
 S X=$G(^TMP($J,"NDF",DRUG,20)) I X D  ;VA Generic
"RTN","HMPDJ05V",129,0)
 . S MED("products",VPI,"ingredientCode")="urn:va:vuid:"_$$VUID^HMPD(+X,50.6)
"RTN","HMPDJ05V",130,0)
 . S MED("products",VPI,"ingredientCodeName")=$P(X,U,2)
"RTN","HMPDJ05V",131,0)
 ;
"RTN","HMPDJ05V",132,0)
 S X=$G(^TMP($J,"NDF",DRUG,22)) I X D  ;VA Product
"RTN","HMPDJ05V",133,0)
 . S MED("products",VPI,"suppliedCode")="urn:va:vuid:"_$$VUID^HMPD(+X,50.68)
"RTN","HMPDJ05V",134,0)
 . S MED("products",VPI,"suppliedName")=$P(X,U,2)_" "_CONC
"RTN","HMPDJ05V",135,0)
 . S:NM="" NM=$P(X,U,2)
"RTN","HMPDJ05V",136,0)
 ;
"RTN","HMPDJ05V",137,0)
 S X=$G(^TMP($J,"NDF",DRUG,25)) I X D  ;VA Drug Class
"RTN","HMPDJ05V",138,0)
 . S MED("products",VPI,"drugClassCode")="urn:vadc:"_$P(X,U,2)
"RTN","HMPDJ05V",139,0)
 . S MED("products",VPI,"drugClassName")=$P(X,U,3)
"RTN","HMPDJ05V",140,0)
 . S:NM="" NM=$P(X,U,3)
"RTN","HMPDJ05V",141,0)
 ;
"RTN","HMPDJ05V",142,0)
 I $L(NM),ROLE="A" S ADD=ADD_$S($L(ADD):", ",1:"")_NM
"RTN","HMPDJ05V",143,0)
 I $L(NM),ROLE="B" S BASE=BASE_$S($L(BASE):", ",1:"")_NM
"RTN","HMPDJ05V",144,0)
 K ^TMP($J,"NDF",DRUG)
"RTN","HMPDJ05V",145,0)
 Q
"RTN","HMPDJ05V",146,0)
 ;
"RTN","HMPDJ05V",147,0)
IVLIM(X) ; -- Return expanded version of IV Limit X
"RTN","HMPDJ05V",148,0)
 I '$L($G(X)) Q ""
"RTN","HMPDJ05V",149,0)
 N Y,VAL,UNT,I
"RTN","HMPDJ05V",150,0)
 S Y="",X=$$UP^XLFSTR(X)
"RTN","HMPDJ05V",151,0)
 I X?1"DOSES".E S X="A"_$P(X,"DOSES",2)
"RTN","HMPDJ05V",152,0)
 S UNT=$E(X),VAL=0 F I=2:1:$L(X) I $E(X,I) S VAL=$E(X,I,$L(X)) Q
"RTN","HMPDJ05V",153,0)
 I UNT="A" S Y=+VAL_$S(+VAL>1:" doses",1:" dose")
"RTN","HMPDJ05V",154,0)
 I UNT="D" S Y=+VAL_$S(+VAL>1:" days",1:" day")
"RTN","HMPDJ05V",155,0)
 I UNT="H" S Y=+VAL_$S(+VAL>1:" hours",1:" hour")
"RTN","HMPDJ05V",156,0)
 I UNT="C" S Y=+VAL_" CC"
"RTN","HMPDJ05V",157,0)
 I UNT="M" S Y=+VAL_" ml"
"RTN","HMPDJ05V",158,0)
 I UNT="L" S Y=+VAL_" L"
"RTN","HMPDJ05V",159,0)
 Q Y
"RTN","HMPDJ05V",160,0)
 ;
"RTN","HMPDJ05V",161,0)
ROLE(X) ;
"RTN","HMPDJ05V",162,0)
 N RESULT,TXT,Y
"RTN","HMPDJ05V",163,0)
 S RESULT="",TXT="urn:sct:"
"RTN","HMPDJ05V",164,0)
 S RESULT=$S(X="A":TXT_"418804003",X="B":TXT_"418297009",1:TXT_"410942007")
"RTN","HMPDJ05V",165,0)
 Q RESULT
"RTN","HMPDJ05V",166,0)
 ;
"RTN","HMPDJ05V",167,0)
MEDSTAT(X) ;
"RTN","HMPDJ05V",168,0)
 N Y S Y="urn:sct:"
"RTN","HMPDJ05V",169,0)
 S Y=Y_$S(X="active":"55561003",X="historical":"392521001","hold":"421139008",1:"73425007")
"RTN","HMPDJ05V",170,0)
 Q Y
"RTN","HMPDJ05V",171,0)
 ;
"RTN","HMPDJ05V",172,0)
TYPE(VA) ;
"RTN","HMPDJ05V",173,0)
 N RESULT,TXT,Y
"RTN","HMPDJ05V",174,0)
 S RESULT="",TXT="urn:sct:"
"RTN","HMPDJ05V",175,0)
 S RESULT=$S(VA="N":TXT_"329505003",VA="O":TXT_"73639000",1:TXT_"105903003")
"RTN","HMPDJ05V",176,0)
 Q RESULT
"RTN","HMPDJ05V",177,0)
 ;
"RTN","HMPDJ05V",178,0)
SCH(NAME) ; -- Return other schedule info
"RTN","HMPDJ05V",179,0)
 N I K ^TMP($J,"HMPS")
"RTN","HMPDJ05V",180,0)
 I NAME?.E1" PRN" S NAME=$P(NAME," PRN") Q:NAME=""  ;strip off PRN for search
"RTN","HMPDJ05V",181,0)
 D ZERO^PSS51P1("",NAME,"PSJ",,"HMPS")
"RTN","HMPDJ05V",182,0)
 S I=+$O(^TMP($J,"HMPS","B",NAME,0)) Q:'I
"RTN","HMPDJ05V",183,0)
 S Y("scheduleFreq")=+$G(^TMP($J,"HMPS",I,2))
"RTN","HMPDJ05V",184,0)
 S Y("scheduleType")=$P($G(^TMP($J,"HMPS",I,5)),U,2)
"RTN","HMPDJ05V",185,0)
 K ^TMP($J,"HMPS")
"RTN","HMPDJ05V",186,0)
 Q
"RTN","HMPDJ05V",187,0)
 ;
"RTN","HMPDJ05V",188,0)
BCMA(RET,DFN,ORPK) ; -- administration times
"RTN","HMPDJ05V",189,0)
 Q:$G(DFN)<1  Q:$G(ORPK)<1
"RTN","HMPDJ05V",190,0)
 N LAST,ADT,DA,CNT,X,Y,N,NODE,X0,DRUG,HMPDT
"RTN","HMPDJ05V",191,0)
 ;DE2818 begin, ^PSB(53.79) references - ICR 5909
"RTN","HMPDJ05V",192,0)
 S LAST=$P($O(^PSB(53.79,"AORDX",DFN,ORPK,9999999),-1),".")
"RTN","HMPDJ05V",193,0)
 S ADT=$$FMADD^XLFDT(LAST,-90) ;return most recent 90 days
"RTN","HMPDJ05V",194,0)
 S CNT=0 F  S ADT=$O(^PSB(53.79,"AORDX",DFN,ORPK,ADT)) Q:ADT<1  D
"RTN","HMPDJ05V",195,0)
 . S DA=0 F  S DA=+$O(^PSB(53.79,"AORDX",DFN,ORPK,ADT,DA)) Q:DA<1  D
"RTN","HMPDJ05V",196,0)
 .. S X=$$GET1^DIQ(53.79,DA_",",.09) Q:X="REMOVED"  ;status
"RTN","HMPDJ05V",197,0)
 .. S Y("status")=X,Y("dateTime")=$$JSONDT^HMPUTILS(ADT)
"RTN","HMPDJ05V",198,0)
 .. S X=+$P($G(^PSB(53.79,DA,0)),U,7) I X D
"RTN","HMPDJ05V",199,0)
 ... S Y("administeredByUid")=$$SETUID^HMPUTILS("user",,X)
"RTN","HMPDJ05V",200,0)
 ... S Y("administeredByName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ05V",201,0)
 .. S X=$P($G(^PSB(53.79,DA,.1)),U,6) S:$L(X) Y("injectionSite")=X
"RTN","HMPDJ05V",202,0)
 .. S X=$G(^PSB(53.79,DA,.2)) ;PRN
"RTN","HMPDJ05V",203,0)
 .. S:$L($P(X,U,1)) Y("prnReason")=$P(X,U)
"RTN","HMPDJ05V",204,0)
 .. S:$L($P(X,U,2)) Y("prnEffectiveness")=$P(X,U,2)
"RTN","HMPDJ05V",205,0)
 .. ; comments
"RTN","HMPDJ05V",206,0)
 .. S N=0 F  S N=$O(^PSB(53.79,DA,.3,N)) Q:N<1  S X=$G(^(N,0)) D
"RTN","HMPDJ05V",207,0)
 ... S Y("comment",N,"text")=$P(X,U)
"RTN","HMPDJ05V",208,0)
 ... S:$P(X,U,3) Y("comment",N,"dateTime")=$$JSONDT^HMPUTILS($P(X,U,3))
"RTN","HMPDJ05V",209,0)
 ... S X=+$P(X,U,2) Q:X<1
"RTN","HMPDJ05V",210,0)
 ... S Y("comment",N,"enteredByUid")=$$SETUID^HMPUTILS("user",,X)
"RTN","HMPDJ05V",211,0)
 ... S Y("comment",N,"enteredByName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ05V",212,0)
 .. ; drugs administered
"RTN","HMPDJ05V",213,0)
 .. F NODE=.5,.6,.7 S N=0 F  S N=$O(^PSB(53.79,DA,NODE,N)) Q:N<1  S X0=$G(^(N,0)) D
"RTN","HMPDJ05V",214,0)
 ... S X=$P(X0,U,2)
"RTN","HMPDJ05V",215,0)
 ... I NODE=.5 S X=$G(DRUG(+X0)) S:X="" X=$$EXTERNAL^DILFD(53.795,.01,,+X0),DRUG(+X0)=X
"RTN","HMPDJ05V",216,0)
 ... S:$L(X) Y("medication",N,"name")=X
"RTN","HMPDJ05V",217,0)
 ... S X=$P(X0,U,3) S:$L(X) Y("medication",N,"amount")=X
"RTN","HMPDJ05V",218,0)
 ... S X=$P(X0,U,4) S:$L(X) Y("medication",N,"units")=X
"RTN","HMPDJ05V",219,0)
 .. S CNT=CNT+1 M RET("administrations",CNT)=Y
"RTN","HMPDJ05V",220,0)
 ;DE2818 end, ^PSB(53.79) references - ICR 5909
"RTN","HMPDJ05V",221,0)
 ; get next scheduled administration time
"RTN","HMPDJ05V",222,0)
 ;D ADMIN^PSBHMP(.HMPDT,DFN,ORPK) ; <<< 12.3
"RTN","HMPDJ05V",223,0)
 D ADMIN^PSBVPR(.HMPDT,DFN,ORPK) ; <<<< 12.3 
"RTN","HMPDJ05V",224,0)
 S:$G(HMPDT) RET("nextAdminTime")=HMPDT
"RTN","HMPDJ05V",225,0)
 Q
"RTN","HMPDJ06")
0^42^B64037338
"RTN","HMPDJ06",1,0)
HMPDJ06 ;SLC/MKB,ASMR/RRB - Laboratory;Nov 12, 2015 18:20:53
"RTN","HMPDJ06",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ06",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ06",4,0)
 ;
"RTN","HMPDJ06",5,0)
 ; External References          DBIA#
"RTN","HMPDJ06",6,0)
 ; -------------------          -----
"RTN","HMPDJ06",7,0)
 ; ^LAB(60                         91
"RTN","HMPDJ06",8,0)
 ; ^LR                            525
"RTN","HMPDJ06",9,0)
 ; ^PXRMINDX                     4290
"RTN","HMPDJ06",10,0)
 ; ^TMP("LRRR" [LR7OR1]          2503
"RTN","HMPDJ06",11,0)
 ; DIQ                           2056
"RTN","HMPDJ06",12,0)
 ; LR7OR1,^TMP("LRRR"            2503
"RTN","HMPDJ06",13,0)
 ; LRPXAPI                       4245
"RTN","HMPDJ06",14,0)
 ; LRPXAPIU                      4246
"RTN","HMPDJ06",15,0)
 ; XLFSTR                       10104
"RTN","HMPDJ06",16,0)
 ; XUAF4                         2171
"RTN","HMPDJ06",17,0)
 ;
"RTN","HMPDJ06",18,0)
 ; All tags expect DFN, ID, LRDFN, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ06",19,0)
 ;               & ^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT,HMPP),HMPN
"RTN","HMPDJ06",20,0)
 Q
"RTN","HMPDJ06",21,0)
 ;
"RTN","HMPDJ06",22,0)
CH1 ; -- lab ID = CH;HMPIDT;HMPN
"RTN","HMPDJ06",23,0)
 N LAB,LRI,X,X0,SPC,LOINC,ORD,CMMT
"RTN","HMPDJ06",24,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ06",25,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ06",26,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the chemistry domain"
"RTN","HMPDJ06",27,0)
 ;
"RTN","HMPDJ06",28,0)
 M LAB=HMPACC ;get accession info
"RTN","HMPDJ06",29,0)
 S LAB("localId")=ID,LAB("uid")=$$SETUID^HMPUTILS("lab",DFN,ID)
"RTN","HMPDJ06",30,0)
 S LAB("categoryCode")="urn:va:lab-category:CH"
"RTN","HMPDJ06",31,0)
 S LAB("categoryName")="Laboratory"
"RTN","HMPDJ06",32,0)
 S LAB("displayOrder")=HMPP
"RTN","HMPDJ06",33,0)
 S LRI=$G(^LR(LRDFN,"CH",HMPIDT,HMPN))  ;DE2818, ^LR( - ICR525
"RTN","HMPDJ06",34,0)
 S X0=$G(^TMP("LRRR",$J,DFN,"CH",HMPIDT,HMPP)),SPC=+$P(X0,U,19)
"RTN","HMPDJ06",35,0)
 ;DE2818 - ^LAB(60) references - ICR 91
"RTN","HMPDJ06",36,0)
 S LAB("typeId")=+X0,LAB("typeName")=$P($G(^LAB(60,+X0,0)),U)
"RTN","HMPDJ06",37,0)
 S:$L($P(X0,U,2)) LAB("result")=$P(X0,U,2)
"RTN","HMPDJ06",38,0)
 S:$L($P(X0,U,4)) LAB("units")=$P(X0,U,4)
"RTN","HMPDJ06",39,0)
 S X=$P(X0,U,5) I $L(X),X["-" S LAB("low")=$$TRIM^XLFSTR($P(X,"-")),LAB("high")=$$TRIM^XLFSTR($P(X,"-",2))
"RTN","HMPDJ06",40,0)
 S X=$P(X0,U,3) I $L(X) D
"RTN","HMPDJ06",41,0)
 . S:X["*" X=$S(X["L":"LL",1:"HH")
"RTN","HMPDJ06",42,0)
 . S LAB("interpretationCode")="urn:hl7:observation-interpretation:"_X
"RTN","HMPDJ06",43,0)
 . S LAB("interpretationName")=$S(X["L":"Low",1:"High")_$S($L(X)>1:" alert",1:"")
"RTN","HMPDJ06",44,0)
 S LAB("displayName")=$S($L($P(X0,U,15)):$P(X0,U,15),1:LAB("test"))
"RTN","HMPDJ06",45,0)
 S ORD=+$P(X0,U,17) S:ORD LAB("labOrderId")=ORD
"RTN","HMPDJ06",46,0)
 S X=$$ORDER^HMPDLR(ORD,+X0) S:X LAB("orderUid")=$$SETUID^HMPUTILS("order",DFN,X)
"RTN","HMPDJ06",47,0)
 S LOINC=$P($P(LRI,U,3),"!",3) ;S:'LOINC LOINC=$$LOINC^HMPDJ06X(+X0,SPC)
"RTN","HMPDJ06",48,0)
 I LOINC S LAB("typeCode")="urn:lnc:"_$$GET1^DIQ(95.3,+LOINC_",",.01),LAB("vuid")="urn:va:vuid:"_$$VUID^HMPD(+LOINC,95.3)
"RTN","HMPDJ06",49,0)
 I 'LOINC S LAB("typeCode")="urn:va:ien:60:"_+X0_":"_SPC
"RTN","HMPDJ06",50,0)
 I $D(^TMP("LRRR",$J,DFN,"CH",HMPIDT,"N")) M CMMT=^("N") S LAB("comment")=$$STRING^HMPD(.CMMT)
"RTN","HMPDJ06",51,0)
 S LAB("statusCode")="urn:va:lab-status:completed",LAB("statusName")="completed"
"RTN","HMPDJ06",52,0)
 S LAB("lastUpdateTime")=$$EN^HMPSTMP("lab") ;RHL 20150102
"RTN","HMPDJ06",53,0)
 S LAB("stampTime")=LAB("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ06",54,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ06",55,0)
 I $G(HMPMETA) D ADD^HMPMETA("lab",LAB("uid"),LAB("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ06",56,0)
 D ADD^HMPDJ("LAB","lab")
"RTN","HMPDJ06",57,0)
 Q
"RTN","HMPDJ06",58,0)
 ;
"RTN","HMPDJ06",59,0)
ACC ; -- put accession-level data in HMPACC("attribute")
"RTN","HMPDJ06",60,0)
 N LR0,CDT,SPC,X K HMPACC
"RTN","HMPDJ06",61,0)
 S LR0=$G(^LR(LRDFN,HMPSUB,HMPIDT,0))  ;DE2818, ^LR( - ICR525
"RTN","HMPDJ06",62,0)
 S CDT=9999999-HMPIDT,HMPACC("observed")=$$DATE(CDT)
"RTN","HMPDJ06",63,0)
 S HMPACC("resulted")=$$DATE($P(LR0,U,3)),SPC=+$P(LR0,U,5) I SPC D
"RTN","HMPDJ06",64,0)
 . N IENS,HMPY S IENS=SPC_","
"RTN","HMPDJ06",65,0)
 . D GETS^DIQ(61,IENS,".01;4.1",,"HMPY")
"RTN","HMPDJ06",66,0)
 . S HMPACC("specimen")=$G(HMPY(61,IENS,.01))
"RTN","HMPDJ06",67,0)
 . S HMPACC("sample")=$G(HMPY(61,IENS,4.1))
"RTN","HMPDJ06",68,0)
 S HMPACC("groupUid")=$$SETUID^HMPUTILS("accession",DFN,HMPSUB_";"_HMPIDT)
"RTN","HMPDJ06",69,0)
 S HMPACC("groupName")=$P(LR0,U,6)
"RTN","HMPDJ06",70,0)
 S X=+$P(LR0,U,14) D  D FACILITY^HMPUTILS(X,"HMPACC")
"RTN","HMPDJ06",71,0)
 . S:X X=$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U)
"RTN","HMPDJ06",72,0)
 . I 'X S X=$$FAC^HMPD ;local stn#^name
"RTN","HMPDJ06",73,0)
 Q
"RTN","HMPDJ06",74,0)
 ;
"RTN","HMPDJ06",75,0)
MI ; -- microbiology accession ID = MI;HMPIDT
"RTN","HMPDJ06",76,0)
 N LAB,CDT,LR0,X,ACC,FAC,X0,X1,X2,IDX,HMPM,HMPPX,HMPITM,DA,FLD
"RTN","HMPDJ06",77,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ06",78,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ06",79,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the microbiology domain"
"RTN","HMPDJ06",80,0)
 ;
"RTN","HMPDJ06",81,0)
 S LAB("localId")=ID,LAB("uid")=$$SETUID^HMPUTILS("lab",DFN,ID)
"RTN","HMPDJ06",82,0)
 S LAB("categoryCode")="urn:va:lab-category:MI"
"RTN","HMPDJ06",83,0)
 S LAB("categoryName")="Microbiology"
"RTN","HMPDJ06",84,0)
 S LAB("statusCode")="urn:va:lab-status:completed",LAB("statusName")="completed"
"RTN","HMPDJ06",85,0)
 S CDT=9999999-HMPIDT,LAB("observed")=$$DATE(CDT)
"RTN","HMPDJ06",86,0)
 S LR0=$G(^LR(LRDFN,"MI",HMPIDT,0))  ; DE2818, ^LR( - ICR525
"RTN","HMPDJ06",87,0)
 S:$P(LR0,U,3) LAB("resulted")=$$DATE($P(LR0,U,3))
"RTN","HMPDJ06",88,0)
 S X=+$P(LR0,U,5) I X D  ;specimen
"RTN","HMPDJ06",89,0)
 . N IENS,HMPY S IENS=X_","
"RTN","HMPDJ06",90,0)
 . D GETS^DIQ(61,IENS,".01;2",,"HMPY")
"RTN","HMPDJ06",91,0)
 . S LAB("specimen")=$G(HMPY(61,IENS,.01))
"RTN","HMPDJ06",92,0)
 . S LAB("sample")=$$GET1^DIQ(61,X_",",4.1)
"RTN","HMPDJ06",93,0)
 S LAB("groupName")=$P(LR0,U,6),ACC=$P(ID,";",1,2) ;accession#
"RTN","HMPDJ06",94,0)
 S LAB("groupUid")=$$SETUID^HMPUTILS("accession",DFN,ACC)
"RTN","HMPDJ06",95,0)
 S X=$P(LR0,U,14),FAC=$S(X:$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U),1:$$FAC^HMPD)
"RTN","HMPDJ06",96,0)
 D FACILITY^HMPUTILS(FAC,"LAB")
"RTN","HMPDJ06",97,0)
 ; get results from ^TMP
"RTN","HMPDJ06",98,0)
 S HMPN=0 F  S HMPN=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT,HMPN)) Q:HMPN<1  D
"RTN","HMPDJ06",99,0)
 . S X0=$G(^TMP("LRRR",$J,DFN,"MI",HMPIDT,HMPN)),X1=$P(X0,U),X2=$P(X0,U,2)
"RTN","HMPDJ06",100,0)
 . I X1="URINE SCREEN" S LAB("urineScreen")=X2 Q
"RTN","HMPDJ06",101,0)
 . ; X1="ORGANISM" S LAB("organism")=$P(X2,";"),LAB("organismQty")=$P(X2,";",2)
"RTN","HMPDJ06",102,0)
 . I X1="GRAM STAIN" S LAB("gramStain",HMPN,"result")=X2 Q
"RTN","HMPDJ06",103,0)
 . I X1="Bacteriology Remark(s)" S LAB("bactRemarks")=X2 Q
"RTN","HMPDJ06",104,0)
 ; get other results from ^PXRMINDX
"RTN","HMPDJ06",105,0)
 S X=$O(^PXRMINDX(63,"PDI",DFN,CDT,"M;T;0")) I X?1"M;T;"1.N D
"RTN","HMPDJ06",106,0)
 . S IDX=$O(^PXRMINDX(63,"PDI",DFN,CDT,X,"")) K HMPM
"RTN","HMPDJ06",107,0)
 . D LRPXRM^LRPXAPI(.HMPM,IDX,X) Q:HMPM<1
"RTN","HMPDJ06",108,0)
 . S LAB("typeName")=$P(HMPM,U,2)
"RTN","HMPDJ06",109,0)
 . S LAB("typeCode")="urn:va:ien:60:"_+HMPM_":"_+$P(HMPM,U,7)
"RTN","HMPDJ06",110,0)
 F HMPPX="M;O;","M;A;" D
"RTN","HMPDJ06",111,0)
 . S HMPITM=HMPPX F  S HMPITM=$O(^PXRMINDX(63,"PDI",DFN,CDT,HMPITM)) Q:$E(HMPITM,1,4)'=HMPPX  D
"RTN","HMPDJ06",112,0)
 .. S IDX=$O(^PXRMINDX(63,"PDI",DFN,CDT,HMPITM,"")) K HMPM
"RTN","HMPDJ06",113,0)
 .. S DA=$P(IDX,";",5),FLD=$P(IDX,";",6)
"RTN","HMPDJ06",114,0)
 .. D LRPXRM^LRPXAPI(.HMPM,IDX,HMPITM) Q:'$L($G(HMPM))
"RTN","HMPDJ06",115,0)
 .. I HMPPX["O" S LAB("organisms",DA,"name")=$P(HMPM,U,2),LAB("organisms",DA,"qty")=$P(HMPM,U,4) Q
"RTN","HMPDJ06",116,0)
 .. I HMPPX["A" D  Q
"RTN","HMPDJ06",117,0)
 ... S LAB("organisms",DA,"drugs",FLD,"name")=$P(HMPM,U,2)
"RTN","HMPDJ06",118,0)
 ... S LAB("organisms",DA,"drugs",FLD,"result")=$P(HMPM,U,3)
"RTN","HMPDJ06",119,0)
 ... S LAB("organisms",DA,"drugs",FLD,"interp")=$P(HMPM,U,4)
"RTN","HMPDJ06",120,0)
 ... S:$L($P(HMPM,U,5)) LAB("organisms",DA,"drugs",FLD,"restrict")=$P(HMPM,U,5)
"RTN","HMPDJ06",121,0)
 ;
"RTN","HMPDJ06",122,0)
 S LAB("results",1,"uid")=ACC
"RTN","HMPDJ06",123,0)
 S LAB("results",1,"resultUid")=$$SETUID^HMPUTILS("document",DFN,ACC)
"RTN","HMPDJ06",124,0)
 S LAB("results",1,"localTitle")="LR MICROBIOLOGY REPORT"
"RTN","HMPDJ06",125,0)
 I $L($G(^LR(LRDFN,"MI",HMPIDT,99))) S LAB("comment")=^(99)  ; DE2818, ^LR( - ICR525
"RTN","HMPDJ06",126,0)
 S LAB("lastUpdateTime")=$$EN^HMPSTMP("lab") ;RHL 20150102
"RTN","HMPDJ06",127,0)
 S LAB("stampTime")=LAB("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ06",128,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ06",129,0)
 I $G(HMPMETA) D ADD^HMPMETA("lab",LAB("uid"),LAB("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ06",130,0)
 D ADD^HMPDJ("LAB","lab")
"RTN","HMPDJ06",131,0)
 Q
"RTN","HMPDJ06",132,0)
 ;
"RTN","HMPDJ06",133,0)
ITEM() ; -- find ITEM string from ^PXRMINDX [uses LRDFN,ID,DFN,CDT]
"RTN","HMPDJ06",134,0)
 N ITM,IDX,Y S Y=""
"RTN","HMPDJ06",135,0)
 S IDX=LRDFN_";"_ID,ITM="M"
"RTN","HMPDJ06",136,0)
 F  S ITM=$O(^PXRMINDX(63,"PI",DFN,ITM)) Q:$E(ITM)'="M"  I $D(^PXRMINDX(63,"PI",DFN,ITM,CDT,IDX)) S Y=ITM Q
"RTN","HMPDJ06",137,0)
 Q Y
"RTN","HMPDJ06",138,0)
 ;
"RTN","HMPDJ06",139,0)
AP ; -- pathology ID = HMPSUB;HMPIDT
"RTN","HMPDJ06",140,0)
 N LAB,LR0,X,I,NODE
"RTN","HMPDJ06",141,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ06",142,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ06",143,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the pathology domain"
"RTN","HMPDJ06",144,0)
 ;
"RTN","HMPDJ06",145,0)
 S LAB("localId")=ID,LAB("organizerType")="accession"
"RTN","HMPDJ06",146,0)
 S LAB("uid")=$$SETUID^HMPUTILS("lab",DFN,ID)
"RTN","HMPDJ06",147,0)
 S LAB("categoryCode")="urn:va:lab-category:"_HMPSUB
"RTN","HMPDJ06",148,0)
 S LAB("categoryName")=$S(HMPSUB="BB":"Blood Bank",HMPSUB="SP":"Surgical Pathology",1:"Pathology")
"RTN","HMPDJ06",149,0)
 S LAB("statusCode")="urn:va:lab-status:completed",LAB("statusName")="completed"
"RTN","HMPDJ06",150,0)
 S CDT=9999999-HMPIDT,LAB("observed")=$$DATE(CDT)
"RTN","HMPDJ06",151,0)
 ;DE2818 begin, ^LR( references - ICR525
"RTN","HMPDJ06",152,0)
 S LR0=$G(^LR(LRDFN,HMPSUB,HMPIDT,0))
"RTN","HMPDJ06",153,0)
 S LAB("resulted")=$$DATE($P(LR0,U,11)),LAB("groupName")=$P(LR0,U,6)
"RTN","HMPDJ06",154,0)
 S X="",I=0 F  S I=$O(^LR(LRDFN,HMPSUB,HMPIDT,.1,I)) Q:I<1  S X=X_$S($L(X):", ",1:"")_$P($G(^(I,0)),U)
"RTN","HMPDJ06",155,0)
 S:$L(X) LAB("specimen")=X
"RTN","HMPDJ06",156,0)
 D FACILITY^HMPUTILS($$FAC^HMPD,"LAB")
"RTN","HMPDJ06",157,0)
 S NODE=$S(HMPSUB="AU":$NA(^LR(LRDFN,101)),1:$NA(^LR(LRDFN,HMPSUB,HMPIDT,.05)))
"RTN","HMPDJ06",158,0)
 S I=0 F  S I=$O(@NODE@(I)) Q:I<1  S X=+$P($G(@NODE@(I,0)),U,2) I X D
"RTN","HMPDJ06",159,0)
 . N LT S LT=$$GET1^DIQ(8925,+X_",",.01) Q:$P(LT," ")="Addendum"
"RTN","HMPDJ06",160,0)
 . S LAB("results",I,"uid")=LAB("uid")
"RTN","HMPDJ06",161,0)
 . S LAB("results",I,"resultUid")=$$SETUID^HMPUTILS("document",DFN,X)
"RTN","HMPDJ06",162,0)
 . S LAB("results",I,"localTitle")=LT
"RTN","HMPDJ06",163,0)
 I '$O(LAB("results",0)) D  ;non-TIU reports
"RTN","HMPDJ06",164,0)
 . S LAB("results",1,"uid")=LAB("uid")
"RTN","HMPDJ06",165,0)
 . S LAB("results",1,"resultUid")=$$SETUID^HMPUTILS("document",DFN,ID)
"RTN","HMPDJ06",166,0)
 . S LAB("results",1,"localTitle")="LR "_$$NAME^HMPDLRA(HMPSUB)_" REPORT"
"RTN","HMPDJ06",167,0)
 ; ;DE2818 end, ^LR( references - ICR525
"RTN","HMPDJ06",168,0)
 S LAB("lastUpdateTime")=$$EN^HMPSTMP("lab") ;RHL 20150102
"RTN","HMPDJ06",169,0)
 S LAB("stampTime")=LAB("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ06",170,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ06",171,0)
 I $G(HMPMETA) D ADD^HMPMETA("lab",LAB("uid"),LAB("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ06",172,0)
 D ADD^HMPDJ("LAB","lab")
"RTN","HMPDJ06",173,0)
 ;
"RTN","HMPDJ06",174,0)
DATE(X) ; -- strip off seconds, return JSON format
"RTN","HMPDJ06",175,0)
 N Y S Y=$G(X)
"RTN","HMPDJ06",176,0)
 I $L($P(Y,".",2))>4 S Y=$P(Y,".")_"."_$E($P(Y,".",2),1,4) ;strip seconds
"RTN","HMPDJ06",177,0)
 S:Y Y=$$JSONDT^HMPUTILS(Y)
"RTN","HMPDJ06",178,0)
 Q Y
"RTN","HMPDJ07")
0^43^B26955013
"RTN","HMPDJ07",1,0)
HMPDJ07 ;SLC/MKB,ASMR/RRB - Radiology,Surgery;6/25/12  16:11
"RTN","HMPDJ07",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ07",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ07",4,0)
 ;
"RTN","HMPDJ07",5,0)
 ; External References          DBIA#
"RTN","HMPDJ07",6,0)
 ; -------------------          -----
"RTN","HMPDJ07",7,0)
 ; ^SC                          10040
"RTN","HMPDJ07",8,0)
 ; ^VA(200                      10060
"RTN","HMPDJ07",9,0)
 ; DIC                           2051
"RTN","HMPDJ07",10,0)
 ; DIQ                           2056
"RTN","HMPDJ07",11,0)
 ; RAO7PC1                  2043,2265
"RTN","HMPDJ07",12,0)
 ; SROESTV                       3533
"RTN","HMPDJ07",13,0)
 ;
"RTN","HMPDJ07",14,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ07",15,0)
 Q
"RTN","HMPDJ07",16,0)
 ;
"RTN","HMPDJ07",17,0)
RA1(ID) ; -- radiology exam ^TMP($J,"RAE1",DFN,ID)
"RTN","HMPDJ07",18,0)
 N EXAM,X0,SET,PROC,DATE,LOC,X,Y,IENS,ID3,N
"RTN","HMPDJ07",19,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ07",20,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ07",21,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the radiology domain"
"RTN","HMPDJ07",22,0)
 ;
"RTN","HMPDJ07",23,0)
 S X0=$G(^TMP($J,"RAE1",DFN,ID)),SET=$G(^(ID,"CPRS")),PROC=$P(X0,U) Q:X0=""
"RTN","HMPDJ07",24,0)
 S EXAM("localId")=ID,EXAM("uid")=$$SETUID^HMPUTILS("image",DFN,ID)
"RTN","HMPDJ07",25,0)
 S EXAM("name")=PROC,EXAM("case")=$P(X0,U,2),EXAM("category")="RA"
"RTN","HMPDJ07",26,0)
 S DATE=9999999.9999-+ID,EXAM("dateTime")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ07",27,0)
 I $P(X0,U,5) D  ;report exists
"RTN","HMPDJ07",28,0)
 . N NM S NM=$S(+SET=2:$P(SET,U,2),1:PROC) ;2 = shared report
"RTN","HMPDJ07",29,0)
 . S EXAM("results",1,"uid")=$$SETUID^HMPUTILS("document",DFN,ID)
"RTN","HMPDJ07",30,0)
 . S EXAM("results",1,"localTitle")=NM
"RTN","HMPDJ07",31,0)
 . S EXAM("verified")=$S($E($P(X0,U,3))="V":"true",1:"false")
"RTN","HMPDJ07",32,0)
 S:$L($P(X0,U,6)) EXAM("statusName")=$P($P(X0,U,6),"~",2)
"RTN","HMPDJ07",33,0)
 S X=$P(X0,U,7),LOC="" I $L(X) D
"RTN","HMPDJ07",34,0)
 . S EXAM("imageLocation")=X,EXAM("locationName")=X
"RTN","HMPDJ07",35,0)
 . S LOC=+$O(^SC("B",X,0)) ;ICR 10040 DE2818 ASF 11/10/15
"RTN","HMPDJ07",36,0)
 . S EXAM("locationUid")=$$SETUID^HMPUTILS("location",,LOC)
"RTN","HMPDJ07",37,0)
 S X=$$FAC^HMPD(LOC) D FACILITY^HMPUTILS(X,"EXAM")
"RTN","HMPDJ07",38,0)
 I $L($P(X0,U,8)) S X=$P($P(X0,U,8),"~",2),EXAM("imagingTypeUid")=$$SETVURN^HMPUTILS("imaging-Type",X)
"RTN","HMPDJ07",39,0)
 S X=$P(X0,U,10) I X D
"RTN","HMPDJ07",40,0)
 . N CPT S CPT=$$CPT^HMPDRA(X)
"RTN","HMPDJ07",41,0)
 . S (EXAM("typeName"),EXAM("summary"))=$P(CPT,U,2)
"RTN","HMPDJ07",42,0)
 . ;I $D(^TMP($J,"RAE1",DFN,ID,"CMOD")) M EXAM("modifier")=^("CMOD")
"RTN","HMPDJ07",43,0)
 I $P(X0,U,11) D
"RTN","HMPDJ07",44,0)
 . S EXAM("orderUid")=$$SETUID^HMPUTILS("order",DFN,+$P(X0,U,11))
"RTN","HMPDJ07",45,0)
 . S EXAM("orderName")=$S($L(SET):$P(SET,U,2),1:PROC)
"RTN","HMPDJ07",46,0)
 S EXAM("hasImages")=$S($P(X0,U,12)="Y":"true",1:"false")
"RTN","HMPDJ07",47,0)
 I $P(X0,U,4)="Y"!($P(X0,U,9)="Y") S EXAM("interpretation")="ABNORMAL"
"RTN","HMPDJ07",48,0)
 S IENS=$P(ID,"-",2)_","_+ID_","_DFN_","
"RTN","HMPDJ07",49,0)
 S X=$$GET1^DIQ(70.03,IENS,27,"I") I X D
"RTN","HMPDJ07",50,0)
 . S EXAM("encounterUid")=$$SETUID^HMPUTILS("visit",DFN,+X)
"RTN","HMPDJ07",51,0)
 . S EXAM("encounterName")=$$NAME^HMPDJ04(+X)
"RTN","HMPDJ07",52,0)
 S ID3=DFN_U_$TR(ID,"-","^") D EN3^RAO7PC1(ID3) D  ;get additional values
"RTN","HMPDJ07",53,0)
 . S EXAM("reason")=$G(^TMP($J,"RAE2",DFN,+$P(ID3,U,3),PROC,"RFS"))
"RTN","HMPDJ07",54,0)
 . S X=+$G(^TMP($J,"RAE2",DFN,+$P(ID3,U,3),PROC,"P")) D:X
"RTN","HMPDJ07",55,0)
 .. S EXAM("providers",1,"providerUid")=$$SETUID^HMPUTILS("user",,X)
"RTN","HMPDJ07",56,0)
 .. S EXAM("providers",1,"providerName")=$P($G(^VA(200,X,0)),U) ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ07",57,0)
 . S N=0 F  S N=$O(^TMP($J,"RAE2",DFN,+$P(ID3,U,3),PROC,"D",N)) Q:N<1  S X=$G(^(N)) D
"RTN","HMPDJ07",58,0)
 .. S EXAM("diagnosis",N,"code")=X
"RTN","HMPDJ07",59,0)
 .. S:N=1 EXAM("diagnosis",N,"primary")="true"
"RTN","HMPDJ07",60,0)
 .. N EXP S EXP=$$LEX(X) S:EXP EXAM("diagnosis",N,"lexicon")=X
"RTN","HMPDJ07",61,0)
 . K ^TMP($J,"RAE2",DFN)
"RTN","HMPDJ07",62,0)
 S EXAM("kind")="Imaging"
"RTN","HMPDJ07",63,0)
 S EXAM("lastUpdateTime")=$$EN^HMPSTMP("image") ;RHL 20150102
"RTN","HMPDJ07",64,0)
 S EXAM("stampTime")=EXAM("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ07",65,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ07",66,0)
 I $G(HMPMETA) D ADD^HMPMETA("image",EXAM("uid"),EXAM("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ07",67,0)
 D ADD^HMPDJ("EXAM","image")
"RTN","HMPDJ07",68,0)
 Q
"RTN","HMPDJ07",69,0)
 ;
"RTN","HMPDJ07",70,0)
LEX(X) ; -- Return Lexicon ptr for a Dx Code
"RTN","HMPDJ07",71,0)
 N Y,DIC,LEX
"RTN","HMPDJ07",72,0)
 S DIC=78.3,DIC(0)="BFOXZ" D ^DIC
"RTN","HMPDJ07",73,0)
 S LEX=$P($G(Y(0)),U,6)
"RTN","HMPDJ07",74,0)
 Q LEX
"RTN","HMPDJ07",75,0)
 ;
"RTN","HMPDJ07",76,0)
SR1(ID) ; -- surgery
"RTN","HMPDJ07",77,0)
 N SURG,HMPX,HMPY,X,Y,I
"RTN","HMPDJ07",78,0)
 D ONE^SROESTV("HMPY",ID) S HMPX=$G(HMPY(ID)) Q:HMPX=""
"RTN","HMPDJ07",79,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ07",80,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ07",81,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the surgery domain"
"RTN","HMPDJ07",82,0)
 ;
"RTN","HMPDJ07",83,0)
 S SURG("localId")=ID,SURG("uid")=$$SETUID^HMPUTILS("surgery",DFN,ID)
"RTN","HMPDJ07",84,0)
 S X=$P(HMPX,U,2),SURG("statusName")="COMPLETED"
"RTN","HMPDJ07",85,0)
 I X?1"* Aborted * ".E S X=$E(X,13,999),SURG("statusName")="ABORTED"
"RTN","HMPDJ07",86,0)
 S (SURG("typeName"),SURG("summary"))=X
"RTN","HMPDJ07",87,0)
 S SURG("dateTime")=$$JSONDT^HMPUTILS($P(HMPX,U,3))
"RTN","HMPDJ07",88,0)
 S X=$P(HMPX,U,4) I X D
"RTN","HMPDJ07",89,0)
 . S SURG("providers",1,"providerUid")=$$SETUID^HMPUTILS("user",,+X)
"RTN","HMPDJ07",90,0)
 . S SURG("providers",1,"providerName")=$P(X,";",2)
"RTN","HMPDJ07",91,0)
 S X=$$GET1^DIQ(130,ID_",",50,"I"),X=$$FAC^HMPD(X)
"RTN","HMPDJ07",92,0)
 D FACILITY^HMPUTILS(X,"SURG")
"RTN","HMPDJ07",93,0)
 S X=$$GET1^DIQ(130,ID_",",.015,"I") I X D
"RTN","HMPDJ07",94,0)
 . S SURG("encounterUid")=$$SETUID^HMPUTILS("visit",DFN,+X)
"RTN","HMPDJ07",95,0)
 . S SURG("encounterName")=$$NAME^HMPDJ04(+X)
"RTN","HMPDJ07",96,0)
 S X=$$GET1^DIQ(136,ID_",",.02,"I") I X D
"RTN","HMPDJ07",97,0)
 . S X=$$CPT^HMPDSR(X)
"RTN","HMPDJ07",98,0)
 . S (SURG("typeName"),SURG("summary"))=$P(X,U,2)
"RTN","HMPDJ07",99,0)
 . S SURG("typeCode")=$$SETNCS^HMPUTILS("cpt",+X)
"RTN","HMPDJ07",100,0)
 S I=0 F  S I=$O(HMPY(ID,I)) Q:I<1  S X=$G(HMPY(ID,I)) I X D
"RTN","HMPDJ07",101,0)
 . N LT S LT=$P(X,U,2) Q:$P(LT," ")="Addendum"
"RTN","HMPDJ07",102,0)
 . S SURG("results",I,"uid")=$$SETUID^HMPUTILS("document",DFN,+X)
"RTN","HMPDJ07",103,0)
 . S SURG("results",I,"localTitle")=LT
"RTN","HMPDJ07",104,0)
 S SURG("kind")="Surgery",SURG("category")="SR"
"RTN","HMPDJ07",105,0)
 K ^TMP("TIULIST",$J)
"RTN","HMPDJ07",106,0)
 S SURG("lastUpdateTime")=$$EN^HMPSTMP("surgery") ;RHL 20150102
"RTN","HMPDJ07",107,0)
 S SURG("stampTime")=SURG("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ07",108,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ07",109,0)
 I $G(HMPMETA) D ADD^HMPMETA("surgery",SURG("uid"),SURG("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ07",110,0)
 D ADD^HMPDJ("SURG","surgery")
"RTN","HMPDJ07",111,0)
 Q
"RTN","HMPDJ08")
0^44^B73570854
"RTN","HMPDJ08",1,0)
HMPDJ08 ;SLC/MKB,ASMR/RRB - TIU Documents;6/25/12  16:11
"RTN","HMPDJ08",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ08",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ08",4,0)
 ;
"RTN","HMPDJ08",5,0)
 ;11/19/14 - Fix missing MCAR documents tag EN1+4, EN1+13  js
"RTN","HMPDJ08",6,0)
 ;
"RTN","HMPDJ08",7,0)
 ; External References          DBIA#
"RTN","HMPDJ08",8,0)
 ; -------------------          -----
"RTN","HMPDJ08",9,0)
 ; ^SC                          10040
"RTN","HMPDJ08",10,0)
 ; ^TIU(8925.1              2321,5677
"RTN","HMPDJ08",11,0)
 ; ^TIU(8926.1                   5678
"RTN","HMPDJ08",12,0)
 ; ^VA(200                      10060
"RTN","HMPDJ08",13,0)
 ; DIQ                           2056
"RTN","HMPDJ08",14,0)
 ; RAO7PC1                       2043
"RTN","HMPDJ08",15,0)
 ; TIUCNSLT                      5546
"RTN","HMPDJ08",16,0)
 ; TIUCP                         3568
"RTN","HMPDJ08",17,0)
 ; TIULQ                         2693
"RTN","HMPDJ08",18,0)
 ; TIULX                         3058
"RTN","HMPDJ08",19,0)
 ; TIUSROI                       5676
"RTN","HMPDJ08",20,0)
 ; TIUSRVLO                 2834,2865
"RTN","HMPDJ08",21,0)
 ; XLFSTR                       10104
"RTN","HMPDJ08",22,0)
 ;
"RTN","HMPDJ08",23,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ08",24,0)
 Q
"RTN","HMPDJ08",25,0)
 ;
"RTN","HMPDJ08",26,0)
TIU1(ID) ; -- document
"RTN","HMPDJ08",27,0)
 I ID[";" D   Q
"RTN","HMPDJ08",28,0)
 . I ID D EN1($$CP1^HMPDJ08A(DFN,ID),"CP") Q  ;CP
"RTN","HMPDJ08",29,0)
 . D EN1($$LR1^HMPDJ08A(DFN,ID),"LR") Q       ;Lab
"RTN","HMPDJ08",30,0)
 I ID["-" D  Q                                ;Radiology
"RTN","HMPDJ08",31,0)
 . S (BEG,END)=9999999.9999-+ID D EN1^RAO7PC1(DFN,BEG,END,"99P")
"RTN","HMPDJ08",32,0)
 . Q:'$D(^TMP($J,"RAE1",DFN,ID))              ;deleted
"RTN","HMPDJ08",33,0)
 . D EN1($$RA1^HMPDJ08A(DFN,ID),"RA") K ^TMP($J,"RAE1")
"RTN","HMPDJ08",34,0)
 D EN1(ID,38)
"RTN","HMPDJ08",35,0)
 Q
"RTN","HMPDJ08",36,0)
 ;
"RTN","HMPDJ08",37,0)
EN1(HMPX,TIU,OUTPUT) ; -- document
"RTN","HMPDJ08",38,0)
 ;  Expects DFN, HMPX=IEN^$$RESOLVE^TIUSRVLO(IEN) or equivalent
"RTN","HMPDJ08",39,0)
 ;          TIU = document class#, or code (CP, RA, LR) if non-TIU
"RTN","HMPDJ08",40,0)
 ;          OUTPUT = store the result in the output array instead (by reference)
"RTN","HMPDJ08",41,0)
 N DOC,IEN,X,HMPTIU,NT,ES,I,TEXT,SUB,HMPY,ERR
"RTN","HMPDJ08",42,0)
 ; --- CP HMPX records with $p1 not the file ien  --- 
"RTN","HMPDJ08",43,0)
 S IEN=$P($G(HMPX),U),TIU=$G(TIU) I TIU="CP" I IEN="" D  Q:IEN=""  ;invalid ien
"RTN","HMPDJ08",44,0)
 . S HMPIEN=+$P(HMPX,$J_",""",2)
"RTN","HMPDJ08",45,0)
 . I +HMPIEN>0 S IEN=+HMPIEN
"RTN","HMPDJ08",46,0)
 . Q
"RTN","HMPDJ08",47,0)
 ; ---
"RTN","HMPDJ08",48,0)
 I +HMPX=HMPX,TIU D  ;get TIU data string, if needed
"RTN","HMPDJ08",49,0)
 . N SHOWADD,DA S SHOWADD=1,DA=+HMPX
"RTN","HMPDJ08",50,0)
 . S HMPX=DA_U_$$RESOLVE^TIUSRVLO(DA)
"RTN","HMPDJ08",51,0)
 ; --- CP HMPX records with $p1 not the file ien  ---
"RTN","HMPDJ08",52,0)
 I +HMPX="" I TIU="CP" D  ;get TIU data string, if needed
"RTN","HMPDJ08",53,0)
 . N SHOWADD,DA S SHOWADD=1,DA=+IEN
"RTN","HMPDJ08",54,0)
 . S HMPX=DA_U_$$RESOLVE^TIUSRVLO(DA)
"RTN","HMPDJ08",55,0)
 ; ---
"RTN","HMPDJ08",56,0)
 Q:"UNKNOWN"[$P($G(HMPX),U,2)  ;null or invalid
"RTN","HMPDJ08",57,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ08",58,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ08",59,0)
 S ERRMSG="A problem occurred converting record "_IEN_" for the document domain"
"RTN","HMPDJ08",60,0)
 S DOC("localId")=IEN,DOC("uid")=$$SETUID^HMPUTILS("document",DFN,IEN)
"RTN","HMPDJ08",61,0)
 S DOC("localTitle")=$P(HMPX,U,2)
"RTN","HMPDJ08",62,0)
 S DOC("referenceDateTime")=$$JSONDT^HMPUTILS($P(HMPX,U,3))
"RTN","HMPDJ08",63,0)
 S X=$P(HMPX,U,6) D  ;S:$L(X) DOC("location")=X
"RTN","HMPDJ08",64,0)
 . N LOC,FAC S LOC=$S($L(X):+$O(^SC("B",X,0)),1:0) ;ICR 10040 DE2818 ASF 11/10/15
"RTN","HMPDJ08",65,0)
 . S X=$$FAC^HMPD(LOC)
"RTN","HMPDJ08",66,0)
 . S DOC("facilityCode")=$P(X,U),DOC("facilityName")=$P(X,U,2)
"RTN","HMPDJ08",67,0)
 S X=$P(HMPX,U,7) I $L(X) S DOC("status")=$$UP^XLFSTR(X)
"RTN","HMPDJ08",68,0)
 S:$P(HMPX,U,11) DOC("images")=+$P(HMPX,U,11)
"RTN","HMPDJ08",69,0)
 S:$L($P(HMPX,U,12)) DOC("subject")=$P(HMPX,U,12)
"RTN","HMPDJ08",70,0)
 I $P(HMPX,U,14)>5 S DOC("parentUid")=$$SETUID^HMPUTILS("document",DFN,$P(HMPX,U,14)) ;ID notes
"RTN","HMPDJ08",71,0)
B ; other TIU data
"RTN","HMPDJ08",72,0)
 D:TIU EXTRACT^TIULQ(IEN,"HMPTIU",,,,1,,1) ;".01:.04;1501:1508")
"RTN","HMPDJ08",73,0)
 S X=$G(HMPTIU(IEN,.01,"I")) S:X DOC("documentDefUid")=$$SETUID^HMPUTILS("doc-def",,X)
"RTN","HMPDJ08",74,0)
 S NT=$S(X:+$G(^TIU(8925.1,X,15)),1:$P(HMPX,U,10)) I NT D  ;ICR 2321 DE2818 ASF 11/110/15
"RTN","HMPDJ08",75,0)
 . S DOC("nationalTitle","vuid")="urn:va:vuid:"_$$VUID^HMPD(NT,8926.1)
"RTN","HMPDJ08",76,0)
 . S DOC("nationalTitle","name")=$$GET1^DIQ(8926.1,NT_",",.01)
"RTN","HMPDJ08",77,0)
 S X=$G(HMPTIU(IEN,1201,"I")) S:X DOC("entered")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ08",78,0)
 S X=$G(HMPTIU(IEN,.09,"E")) S:$L(X) DOC("urgency")=X
"RTN","HMPDJ08",79,0)
 S X=TIU I TIU S X=+$G(HMPTIU(IEN,.01,"I")),X=$$CATG^HMPDTIU(X) ;2U type code
"RTN","HMPDJ08",80,0)
 S DOC("documentTypeCode")=X,DOC("documentTypeName")=$$TYPE(X)
"RTN","HMPDJ08",81,0)
 S DOC("documentClass")=$S(X="LR":"LR LABORATORY REPORTS",X="SR":"SURGICAL REPORTS",X="CP":"CLINICAL PROCEDURES",X="RA":"RADIOLOGY REPORTS",X="DS":"DISCHARGE SUMMARY",1:"PROGRESS NOTES")
"RTN","HMPDJ08",82,0)
 S X=$S(TIU:$G(HMPTIU(IEN,.03,"I")),1:$P(HMPX,U,8)) ;visit#
"RTN","HMPDJ08",83,0)
 S:X DOC("encounterUid")=$$SETUID^HMPUTILS("visit",DFN,X),DOC("encounterName")=$$NAME^HMPDJ04(X)
"RTN","HMPDJ08",84,0)
C ; text blocks, signatures
"RTN","HMPDJ08",85,0)
 N HMPT,HMPA,HMPADD
"RTN","HMPDJ08",86,0)
 S DOC("text",1,"dateTime")=DOC("referenceDateTime")
"RTN","HMPDJ08",87,0)
 S DOC("text",1,"status")=$G(DOC("status"))
"RTN","HMPDJ08",88,0)
 S DOC("text",1,"uid")=DOC("uid")
"RTN","HMPDJ08",89,0)
 S HMPT=1,X=$P(HMPX,U,5),I=0
"RTN","HMPDJ08",90,0)
 I X D USER(.I,+X,$P(X,";",3),"AU")    ;author
"RTN","HMPDJ08",91,0)
 M ES=HMPTIU(IEN) S X=$P(HMPX,"//",2) ;non-TIU, put into ES for use:
"RTN","HMPDJ08",92,0)
 I $L(X) S ES(1502,"I")=+X,ES(1502,"E")=$P(X,";",2),ES(1501,"I")=$P(X,";",3)
"RTN","HMPDJ08",93,0)
 I $G(ES(1501,"I")) D USER(.I,ES(1502,"I"),ES(1502,"E"),"S",ES(1501,"I"),$G(ES(1503,"E")),$G(ES(1504,"E")))
"RTN","HMPDJ08",94,0)
 I $G(ES(1507,"I")) D USER(.I,ES(1508,"I"),ES(1508,"E"),"C",ES(1507,"I"),$G(ES(1509,"E")),$G(ES(1510,"E")))
"RTN","HMPDJ08",95,0)
 I $G(ES(1204,"I")) D USER(.I,ES(1204,"I"),ES(1204,"E"),"ES")    ;expected signer
"RTN","HMPDJ08",96,0)
 I $G(ES(1208,"I")) D USER(.I,ES(1208,"I"),ES(1208,"E"),"EC")    ;expected cosigner
"RTN","HMPDJ08",97,0)
 I $G(ES(1302,"I")) D USER(.I,ES(1302,"I"),ES(1302,"E"),"E")     ;entered
"RTN","HMPDJ08",98,0)
 I $G(ES(1209,"I")) D USER(.I,ES(1209,"I"),ES(1209,"E"),"ATT")   ;attending
"RTN","HMPDJ08",99,0)
 I $G(HMPTEXT) D
"RTN","HMPDJ08",100,0)
 . S X=$S(TIU:$NA(HMPTIU(IEN,"TEXT")),1:$NA(^TMP("HMPTEXT",$J,IEN)))
"RTN","HMPDJ08",101,0)
 . K ^TMP($J,"HMP TIU TEXT")
"RTN","HMPDJ08",102,0)
 . D SETTEXT^HMPUTILS(X,$NA(^TMP($J,"HMP TIU TEXT")))
"RTN","HMPDJ08",103,0)
 . M DOC("text",1,"content","\")=^TMP($J,"HMP TIU TEXT")
"RTN","HMPDJ08",104,0)
D ; addenda
"RTN","HMPDJ08",105,0)
 S HMPA=0 F  S HMPA=$O(HMPTIU(IEN,"ZADD",HMPA)) Q:HMPA<1  D
"RTN","HMPDJ08",106,0)
 . S HMPT=HMPT+1,I=0 K HMPADD M HMPADD=HMPTIU(IEN,"ZADD",HMPA)
"RTN","HMPDJ08",107,0)
 . S DOC("text",HMPT,"status")=$G(HMPADD(.05,"E"))
"RTN","HMPDJ08",108,0)
 . S DOC("text",HMPT,"uid")=$$SETUID^HMPUTILS("document",DFN,HMPA)
"RTN","HMPDJ08",109,0)
 . S DOC("text",HMPT,"dateTime")=$$JSONDT^HMPUTILS($G(HMPADD(1301,"I")))
"RTN","HMPDJ08",110,0)
 . I $G(HMPADD(1302,"I")) D USER(.I,HMPADD(1302,"I"),HMPADD(1302,"E"),"E")
"RTN","HMPDJ08",111,0)
 . I $G(HMPADD(1202,"I")) D USER(.I,HMPADD(1202,"I"),HMPADD(1202,"E"),"AU")
"RTN","HMPDJ08",112,0)
 . I $G(HMPADD(1501,"I")) D USER(.I,HMPADD(1502,"I"),HMPADD(1502,"E"),"S",HMPADD(1501,"I"))
"RTN","HMPDJ08",113,0)
 . I $G(HMPADD(1507,"I")) D USER(.I,HMPADD(1508,"I"),HMPADD(1508,"E"),"C",HMPADD(1507,"I"))
"RTN","HMPDJ08",114,0)
 . I $G(HMPADD(1204,"I")) D USER(.I,HMPADD(1204,"I"),HMPADD(1204,"E"),"ES")
"RTN","HMPDJ08",115,0)
 . I $G(HMPADD(1208,"I")) D USER(.I,HMPADD(1208,"I"),HMPADD(1208,"E"),"EC")
"RTN","HMPDJ08",116,0)
 . I $G(HMPADD(1209,"I")) D USER(.I,HMPADD(1209,"I"),HMPADD(1209,"E"),"ATT")
"RTN","HMPDJ08",117,0)
 . Q:'$G(HMPTEXT)  K ^TMP($J,"HMP TIU TEXT")
"RTN","HMPDJ08",118,0)
 . S X=$NA(HMPTIU(IEN,"ZADD",HMPA,"TEXT"))
"RTN","HMPDJ08",119,0)
 . D SETTEXT^HMPUTILS(X,$NA(^TMP($J,"HMP TIU TEXT")))
"RTN","HMPDJ08",120,0)
 . M DOC("text",HMPT,"content","\")=^TMP($J,"HMP TIU TEXT")
"RTN","HMPDJ08",121,0)
ENQ ; end
"RTN","HMPDJ08",122,0)
 K ^TMP($J,"HMP TIU TEXT")
"RTN","HMPDJ08",123,0)
 S DOC("lastUpdateTime")=$$EN^HMPSTMP("document") ;RHL 20150102
"RTN","HMPDJ08",124,0)
 S DOC("stampTime")=DOC("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ08",125,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ08",126,0)
 I '$D(OUTPUT),$G(HMPMETA) D ADD^HMPMETA("document",DOC("uid"),DOC("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ08",127,0)
 I '$D(OUTPUT) D ADD^HMPDJ("DOC","document") Q
"RTN","HMPDJ08",128,0)
 M OUTPUT=DOC
"RTN","HMPDJ08",129,0)
 Q
"RTN","HMPDJ08",130,0)
 ;
"RTN","HMPDJ08",131,0)
USER(N,IEN,NAME,ROLE,DATE,SBN,SBT) ; -- set author, signer(s)
"RTN","HMPDJ08",132,0)
 Q:'$G(IEN)  S N=+$G(N)+1
"RTN","HMPDJ08",133,0)
 S DOC("text",HMPT,"clinicians",N,"uid")=$$SETUID^HMPUTILS("user",,IEN)
"RTN","HMPDJ08",134,0)
 S DOC("text",HMPT,"clinicians",N,"name")=$S($L($G(NAME)):NAME,1:$P($G(^VA(200,IEN,0)),U)) ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ08",135,0)
 S DOC("text",HMPT,"clinicians",N,"role")=$G(ROLE)
"RTN","HMPDJ08",136,0)
 Q:'$G(DATE)  ;not co/signed
"RTN","HMPDJ08",137,0)
 S DOC("text",HMPT,"clinicians",N,"signedDateTime")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ08",138,0)
 I '$D(SBN) S SBN=NAME
"RTN","HMPDJ08",139,0)
 S DOC("text",HMPT,"clinicians",N,"signature")=SBN_$S($L($G(SBT)):" "_SBT,1:"")
"RTN","HMPDJ08",140,0)
 ;$$SIG^HMPDTIU(IEN)
"RTN","HMPDJ08",141,0)
 Q
"RTN","HMPDJ08",142,0)
 ;
"RTN","HMPDJ08",143,0)
 ;
"RTN","HMPDJ08",144,0)
 ; ------------ Get/apply search criteria ------------
"RTN","HMPDJ08",145,0)
 ;               [from DOCUMENT^HMPDJ0]
"RTN","HMPDJ08",146,0)
 ;
"RTN","HMPDJ08",147,0)
SETUP ; -- convert FILTER("attribute") = value to TIU criteria
"RTN","HMPDJ08",148,0)
 ; Expects: FILTER("category") = code (see $$CATG)
"RTN","HMPDJ08",149,0)
 ;          FILTER("status")   = 'signed','unsigned','all'
"RTN","HMPDJ08",150,0)
 ; Returns: CLASS,[SUBCLASS,STATUS]
"RTN","HMPDJ08",151,0)
 ;
"RTN","HMPDJ08",152,0)
 N TYPE,STS,CP
"RTN","HMPDJ08",153,0)
 S TYPE=$$UP^XLFSTR($G(FILTER("category")))
"RTN","HMPDJ08",154,0)
 S CLASS=0,(SUBCLASS,STATUS)=""
"RTN","HMPDJ08",155,0)
 ;
"RTN","HMPDJ08",156,0)
 ; status [default='signed']
"RTN","HMPDJ08",157,0)
 S STS=$$LOW^XLFSTR($G(FILTER("status")))
"RTN","HMPDJ08",158,0)
 S STATUS=$S(STS?1"unsig".E:2,STS="all":"5^2",1:5)     ;TIUSRVLO statuses
"RTN","HMPDJ08",159,0)
 ;
"RTN","HMPDJ08",160,0)
 ; all documents
"RTN","HMPDJ08",161,0)
 S:TYPE="" TYPE="ALL"
"RTN","HMPDJ08",162,0)
 I TYPE="ALL" S CLASS="3^244^"_+$$CLASS^TIUSROI("SURGICAL REPORTS")_"^CP^LR^RA" Q
"RTN","HMPDJ08",163,0)
 ;
"RTN","HMPDJ08",164,0)
 I TYPE="PN"   S CLASS=3 Q                            ;Progress Notes
"RTN","HMPDJ08",165,0)
 I TYPE="CR"   S CLASS=3,SUBCLASS=$$CLASS^TIUCNSLT Q  ;Consults
"RTN","HMPDJ08",166,0)
 I TYPE="CWAD" S CLASS=3,SUBCLASS="25^27^30^31" Q     ;CWAD
"RTN","HMPDJ08",167,0)
 I TYPE="C"    S CLASS=3,SUBCLASS=30 Q                ;Crisis Note
"RTN","HMPDJ08",168,0)
 I TYPE="W"    S CLASS=3,SUBCLASS=31 Q                ;Clinical Warning
"RTN","HMPDJ08",169,0)
 I TYPE="A"    S CLASS=3,SUBCLASS=25 Q                ;Allergy Note
"RTN","HMPDJ08",170,0)
 I TYPE="D"    S CLASS=3,SUBCLASS=27 Q                ;Advance Directive
"RTN","HMPDJ08",171,0)
 ;
"RTN","HMPDJ08",172,0)
 I TYPE="DS"   S CLASS=244 Q                          ;Discharge Summary
"RTN","HMPDJ08",173,0)
 ;
"RTN","HMPDJ08",174,0)
 I TYPE="SR"   S CLASS=$$CLASS^TIUSROI("SURGICAL REPORTS") Q
"RTN","HMPDJ08",175,0)
 I TYPE="CP" D  Q                                     ;Clin Procedures
"RTN","HMPDJ08",176,0)
 . I STATUS'=2 S CLASS="CP"                           ; if unsigned,
"RTN","HMPDJ08",177,0)
 . E  D CPCLASS^TIUCP(.CP) S CLASS=CP                 ; use TIU class#
"RTN","HMPDJ08",178,0)
 ;
"RTN","HMPDJ08",179,0)
 I TYPE="LR"   S CLASS=$S(STATUS=2:$$LR,1:"LR") Q     ;Lab/Pathology
"RTN","HMPDJ08",180,0)
 ;
"RTN","HMPDJ08",181,0)
 I TYPE="RA"   S CLASS="RA" Q                         ;Radiology
"RTN","HMPDJ08",182,0)
 ;
"RTN","HMPDJ08",183,0)
 Q
"RTN","HMPDJ08",184,0)
 ;
"RTN","HMPDJ08",185,0)
LR() ; -- Return ien of Lab class
"RTN","HMPDJ08",186,0)
 N Y S Y=+$O(^TIU(8925.1,"B","LR LABORATORY REPORTS",0)) ;ICR 2321 DE2818 ASF 11/10/15
"RTN","HMPDJ08",187,0)
 I Y>0,$S($P($G(^TIU(8925.1,Y,0)),U,4)="CL":0,$P($G(^(0)),U,4)="DC":0,1:1) S Y=0
"RTN","HMPDJ08",188,0)
 Q Y
"RTN","HMPDJ08",189,0)
 ;
"RTN","HMPDJ08",190,0)
MATCH(DOC,STS) ; -- Return 1 or 0, if document DA matches search criteria
"RTN","HMPDJ08",191,0)
 N Y,DA,LOCAL,OK S Y=0
"RTN","HMPDJ08",192,0)
 S DA=+$G(DOC) G:DA<1 MQ
"RTN","HMPDJ08",193,0)
 ; include addenda if pulling only unsigned items
"RTN","HMPDJ08",194,0)
 I $P(DOC,U,2)?1"Addendum ".E,STATUS'=2 G MQ
"RTN","HMPDJ08",195,0)
 ; TIU unsigned list can include completed parent notes
"RTN","HMPDJ08",196,0)
 I $G(STS)=2,$P(DOC,U,7)'="unsigned" G MQ
"RTN","HMPDJ08",197,0)
 S LOCAL=$$GET1^DIQ(8925,DA_",",.01,"I") ;local Title 8925.1 ien
"RTN","HMPDJ08",198,0)
 I $L(SUBCLASS) D  G:'OK MQ
"RTN","HMPDJ08",199,0)
 . N I,X S OK=0
"RTN","HMPDJ08",200,0)
 . F I=1:1:$L(SUBCLASS,"^") S X=$P(SUBCLASS,U,I) I $$ISA^TIULX(LOCAL,X) S OK=1 Q
"RTN","HMPDJ08",201,0)
 S Y=1
"RTN","HMPDJ08",202,0)
MQ Q Y
"RTN","HMPDJ08",203,0)
 ;
"RTN","HMPDJ08",204,0)
TYPE(X) ; -- Return name of category type X
"RTN","HMPDJ08",205,0)
 S X=$G(X)
"RTN","HMPDJ08",206,0)
 I X="PN" Q "Progress Note"
"RTN","HMPDJ08",207,0)
 I X="DS" Q "Discharge Summary"
"RTN","HMPDJ08",208,0)
 I X="CP" Q "Clinical Procedure"
"RTN","HMPDJ08",209,0)
 I X="SR" Q "Surgery Report"
"RTN","HMPDJ08",210,0)
 I X="LR" Q "Laboratory Report"
"RTN","HMPDJ08",211,0)
 I X="RA" Q "Radiology Report"
"RTN","HMPDJ08",212,0)
 I X="CR" Q "Consult Report"
"RTN","HMPDJ08",213,0)
 I X="C"  Q "Crisis Note"
"RTN","HMPDJ08",214,0)
 I X="W"  Q "Clinical Warning"
"RTN","HMPDJ08",215,0)
 I X="A"  Q "Allergy/Adverse Reaction"
"RTN","HMPDJ08",216,0)
 I X="D"  Q "Advance Directive"
"RTN","HMPDJ08",217,0)
 Q ""
"RTN","HMPDJ08A")
0^45^B50353978
"RTN","HMPDJ08A",1,0)
HMPDJ08A ;SLC/MKB,ASMR/RRB - TIU Documents continued;10/29/2015 12:08:30
"RTN","HMPDJ08A",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ08A",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ08A",4,0)
 ;
"RTN","HMPDJ08A",5,0)
 ; Called by HMPDJ08
"RTN","HMPDJ08A",6,0)
 ;
"RTN","HMPDJ08A",7,0)
 ;pass HMPXX from CP1 section 12.2.14 agilex/js
"RTN","HMPDJ08A",8,0)
 ;
"RTN","HMPDJ08A",9,0)
 ; External References          DBIA#
"RTN","HMPDJ08A",10,0)
 ; -------------------          -----
"RTN","HMPDJ08A",11,0)
 ; ^DPT                         10035
"RTN","HMPDJ08A",12,0)
 ; ^LR                            525
"RTN","HMPDJ08A",13,0)
 ; ^RADPT                        2480
"RTN","HMPDJ08A",14,0)
 ; ^RARPT                        8000005
"RTN","HMPDJ08A",15,0)
 ; ^SC                          10040
"RTN","HMPDJ08A",16,0)
 ; ^TMP("MDHSP" [MDPS1]          4230
"RTN","HMPDJ08A",17,0)
 ; ^VA(200                      10060
"RTN","HMPDJ08A",18,0)
 ; %DT                          10003
"RTN","HMPDJ08A",19,0)
 ; DIQ                           2056
"RTN","HMPDJ08A",20,0)
 ; GMRCGUIB                      2980
"RTN","HMPDJ08A",21,0)
 ; LR7OR1,^TMP("LRRR"            2503
"RTN","HMPDJ08A",22,0)
 ; MCARUTL3                      3280
"RTN","HMPDJ08A",23,0)
 ; PXAPI                         1894
"RTN","HMPDJ08A",24,0)
 ; RAO7PC1                  2043,2265
"RTN","HMPDJ08A",25,0)
 ; RAO7PC3                       2877
"RTN","HMPDJ08A",26,0)
 ;
"RTN","HMPDJ08A",27,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ08A",28,0)
 ;
"RTN","HMPDJ08A",29,0)
 ; ------------------------------------------------------------------
"RTN","HMPDJ08A",30,0)
 ; documentClass = CLINICAL PROCEDURES
"RTN","HMPDJ08A",31,0)
 ; nationalTitle = 4696566^PROCEDURE REPORT
"RTN","HMPDJ08A",32,0)
 ;       Service = 4696471^PROCEDURE
"RTN","HMPDJ08A",33,0)
 ;          Type = 4696123^REPORT
"RTN","HMPDJ08A",34,0)
 Q
"RTN","HMPDJ08A",35,0)
 ;
"RTN","HMPDJ08A",36,0)
CP(DFN,BEG,END,MAX) ; -- Medicine reports
"RTN","HMPDJ08A",37,0)
 N HMPN,HMPX,RTN,TIUN,CONS,HMPD,I,DA,X,Y,%DT,DATE,GBL
"RTN","HMPDJ08A",38,0)
 S DFN=+$G(DFN) Q:$G(DFN)<1
"RTN","HMPDJ08A",39,0)
 D MDPS1^HMPDJ03(DFN,BEG,END,MAX)             ;gets ^TMP("MDHSP",$J)
"RTN","HMPDJ08A",40,0)
 S HMPN=0 F  S HMPN=$O(^TMP("MDHSP",$J,HMPN)) Q:HMPN<1  S HMPX=$G(^(HMPN)) D
"RTN","HMPDJ08A",41,0)
 . N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ08A",42,0)
 . S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ08A",43,0)
 . S ERRMSG="A problem occurred converting a medicine report."
"RTN","HMPDJ08A",44,0)
 . S RTN=$P(HMPX,U,3,4)  Q:RTN="PRPRO^MDPS4"  ;skip non-CP items
"RTN","HMPDJ08A",45,0)
 . S TIUN=+$P(HMPX,U,14)
"RTN","HMPDJ08A",46,0)
 . I TIUN D EN1^HMPDJ08(TIUN,38)              ;38=TIU Clinical Document
"RTN","HMPDJ08A",47,0)
 . S CONS=+$P(HMPX,U,13) D:CONS DOCLIST^GMRCGUIB(.HMPD,CONS)
"RTN","HMPDJ08A",48,0)
 . K DA S I=0 F  S I=$O(HMPD(50,I)) Q:I<1  D
"RTN","HMPDJ08A",49,0)
 .. S DA=+HMPD(50,I) Q:DA=TIUN
"RTN","HMPDJ08A",50,0)
 .. D EN1^HMPDJ08(DA,38)
"RTN","HMPDJ08A",51,0)
 . Q:TIUN!$G(DA)                              ;done [got TIU note(s)]
"RTN","HMPDJ08A",52,0)
 . Q:RTN="PR702^MDPS1"                        ;CP, but no TIU note yet
"RTN","HMPDJ08A",53,0)
 . Q:RTN="PRPRO^MDPS4"                        ;non-CP procedure
"RTN","HMPDJ08A",54,0)
 . ; find ID for pre-TIU report
"RTN","HMPDJ08A",55,0)
 . S X=$P(HMPX,U,6),%DT="TXS" D ^%DT Q:Y'>0  S DATE=Y
"RTN","HMPDJ08A",56,0)
 . S GBL=+$P(HMPX,U,2)_";"_$$ROOT^HMPDMC(DFN,$P(HMPX,U,11),DATE)
"RTN","HMPDJ08A",57,0)
 . I GBL S X=$$CP1(DFN,GBL)
"RTN","HMPDJ08A",58,0)
 . I $G(HMPXX)]"" D EN1^HMPDJ08(HMPXX,"CP") ;  pass HMPXX from CP1 section 12.2.14 js
"RTN","HMPDJ08A",59,0)
 K ^TMP("MDHSP",$J),^TMP("HMPTEXT",$J)
"RTN","HMPDJ08A",60,0)
 K HMPXX
"RTN","HMPDJ08A",61,0)
 Q
"RTN","HMPDJ08A",62,0)
 ;
"RTN","HMPDJ08A",63,0)
CP1(DFN,ID) ; -- return report data as TIU string [$$RESOLVE] /DE2818
"RTN","HMPDJ08A",64,0)
 S DFN=+$G(DFN),ID=$G(ID) I DFN<1!'$L(ID) Q ""
"RTN","HMPDJ08A",65,0)
 N Y,HMPY,HMPFN,X,NAME,DATE,STS,USER,SIGN,TEXT
"RTN","HMPDJ08A",66,0)
 S HMPFN=+$P(ID,"(",2) ; example 699.5
"RTN","HMPDJ08A",67,0)
 D MEDLKUP^MCARUTL3(.HMPY,HMPFN,+ID)
"RTN","HMPDJ08A",68,0)
 I HMPY<1 Q ""  ;error in CP
"RTN","HMPDJ08A",69,0)
 S NAME=$P(HMPY,U,9),DATE=$P(HMPY,U,6)
"RTN","HMPDJ08A",70,0)
 S X=$$GET1^DIQ(HMPFN,+ID_",",1506)
"RTN","HMPDJ08A",71,0)
 S STS=$S($L(X):X,1:"COMPLETED")
"RTN","HMPDJ08A",72,0)
 S X=+$$GET1^DIQ(HMPFN,+ID_",",701,"I"),(USER,SIGN)=""
"RTN","HMPDJ08A",73,0)
 S:X USER=X_";;"_$P($G(^VA(200,X,0)),U) ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",74,0)
 S X=+$$GET1^DIQ(HMPFN,+ID_",",1503,"I")
"RTN","HMPDJ08A",75,0)
 S:X SIGN="//"_X_";"_$P($G(^VA(200,X,0)),U)_";"_$$GET1^DIQ(HMPFN,+ID_",",1505,"I") ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",76,0)
 ; VST=$$GET1^DIQ(HMPFN,+ID_",",900,"I")
"RTN","HMPDJ08A",77,0)
 S Y=ID_U_NAME_U_DATE_U_U_USER_U_U_STS_"^^^2461^"_SIGN
"RTN","HMPDJ08A",78,0)
 S HMPXX=ID_U_NAME_U_DATE_U_U_USER_U_U_STS_"^^^2461^"_SIGN ; 12.2.14 js
"RTN","HMPDJ08A",79,0)
 S:$G(HMPTEXT) TEXT=$$TEXT^HMPDMC(DFN,ID,NAME) ;^TMP("HMPTEXT",$J,ID)
"RTN","HMPDJ08A",80,0)
 Q Y
"RTN","HMPDJ08A",81,0)
 ;
"RTN","HMPDJ08A",82,0)
 ; ------------------------------------------------------------------
"RTN","HMPDJ08A",83,0)
 ; documentClass = LR LABORATORY REPORTS
"RTN","HMPDJ08A",84,0)
 ; nationalTitle = 4697105^LABORATORY NOTE
"RTN","HMPDJ08A",85,0)
 ;       Subject = 4697104^LABORATORY
"RTN","HMPDJ08A",86,0)
 ;          Type = 4696120^NOTE
"RTN","HMPDJ08A",87,0)
 ;
"RTN","HMPDJ08A",88,0)
LR(DFN,BEG,END,MAX) ; -- Lab reports
"RTN","HMPDJ08A",89,0)
 N HMPSUB,HMPIDT,HMPITM,HMPTIU,HMPXID,LRDFN,IVDT,HMPN,DA
"RTN","HMPDJ08A",90,0)
 S DFN=+$G(DFN) Q:$G(DFN)<1
"RTN","HMPDJ08A",91,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDJ08A",92,0)
 S LRDFN=+$G(^DPT(DFN,"LR")),IVDT=9999999-+$G(^LR(LRDFN,"AU")) ;LR7OB63D error
"RTN","HMPDJ08A",93,0)
 K ^TMP("LRRR",$J,DFN) D RR^LR7OR1(DFN,,BEG,END,"MIAP",,,MAX)
"RTN","HMPDJ08A",94,0)
 S HMPSUB="" F  S HMPSUB=$O(^TMP("LRRR",$J,DFN,HMPSUB)) Q:HMPSUB=""  D
"RTN","HMPDJ08A",95,0)
 . S HMPIDT=0 F  S HMPIDT=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT)) Q:HMPIDT<1  I $O(^(HMPIDT,0)) D
"RTN","HMPDJ08A",96,0)
 .. S HMPTIU=$S(HMPSUB="AU":$NA(^LR(LRDFN,101)),1:$NA(^LR(LRDFN,HMPSUB,HMPIDT,.05)))
"RTN","HMPDJ08A",97,0)
 .. K HMPITM S HMPXID=HMPSUB_";"_HMPIDT
"RTN","HMPDJ08A",98,0)
 .. I '$O(@HMPTIU@(0)) S HMPX=$$LR1(DFN,HMPXID) D EN1^HMPDJ08(HMPX,"LR") Q
"RTN","HMPDJ08A",99,0)
 .. S HMPN=0 F  S HMPN=$O(@HMPTIU@(HMPN)) Q:HMPN<1  D  ;38=TIU Clin Doc
"RTN","HMPDJ08A",100,0)
 ... S DA=+$P($G(@HMPTIU@(HMPN,0)),U,2)
"RTN","HMPDJ08A",101,0)
 ... D:DA EN1^HMPDJ08(DA,38)
"RTN","HMPDJ08A",102,0)
 K ^TMP("LRRR",$J,DFN),^TMP("HMPTEXT",$J)
"RTN","HMPDJ08A",103,0)
 Q
"RTN","HMPDJ08A",104,0)
 ;
"RTN","HMPDJ08A",105,0)
LR1(DFN,ID) ; -- return report data as TIU string [$$RESOLVE]
"RTN","HMPDJ08A",106,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ08A",107,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ08A",108,0)
 S ERRMSG="A problem occurred converting lab report "_ID
"RTN","HMPDJ08A",109,0)
 S DFN=+$G(DFN),ID=$G(ID) I DFN<1!'$L(ID) Q ""
"RTN","HMPDJ08A",110,0)
 N Y,SUB,IDT,LRDFN,LR,NAME,LOC,USER,VST,SIGN,TEXT
"RTN","HMPDJ08A",111,0)
 K ^TMP("HMPTEXT",$J,ID)
"RTN","HMPDJ08A",112,0)
 S SUB=$P(ID,";"),IDT=+$P(ID,";",2),LRDFN=$G(^DPT(DFN,"LR")) ;ICR 10035 DE 2818 ASF 11/10/15
"RTN","HMPDJ08A",113,0)
 S LR=$S(SUB="AU":$G(^LR(LRDFN,"AU")),1:$G(^LR(LRDFN,SUB,IDT,0)))
"RTN","HMPDJ08A",114,0)
 S NAME="LR "_$$NAME^HMPDLRA(SUB)_" REPORT"
"RTN","HMPDJ08A",115,0)
 S LOC=$P(LR,U,$S(SUB="AU":5,1:8)) D  ;look-up visit
"RTN","HMPDJ08A",116,0)
 . N CDT,SC S CDT=9999999-IDT,SC="",X=0
"RTN","HMPDJ08A",117,0)
 . S:$L(LOC) SC=+$O(^SC("B",LOC,0)) ;ICR 10040 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",118,0)
 . I CDT,LOC S X=$$GETENC^PXAPI(DFN,CDT,SC)
"RTN","HMPDJ08A",119,0)
 . S:X VST=+X
"RTN","HMPDJ08A",120,0)
 S X=+$P(LR,U,$S(SUB="AU":10,SUB="MI":4,1:2)) ;pathologist[author]
"RTN","HMPDJ08A",121,0)
 S USER=$S(X:X_";;"_$P($G(^VA(200,X,0)),U),1:""),SIGN="" ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",122,0)
 S X=$S(SUB="AU":$P(LR,U,15,16),SUB="MI":$P(LR,U,3,4),1:$P(LR,U,11)_U_$P(LR,U,13)) ;released
"RTN","HMPDJ08A",123,0)
 S:X SIGN="//"_+$P(X,U,2)_";"_$P($G(^VA(200,+$P(X,U,2),0)),U)_";"_+X ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",124,0)
 S Y=ID_U_NAME_U_(9999999-IDT)_U_U_USER_U_LOC_"^COMPLETED^"_$G(VST)_"^^2753^"_SIGN
"RTN","HMPDJ08A",125,0)
 S:$G(HMPTEXT) TEXT=$$TEXT^HMPDLRA(DFN,SUB,IDT) ;^TMP("HMPTEXT",$J,ID)
"RTN","HMPDJ08A",126,0)
 Q Y
"RTN","HMPDJ08A",127,0)
 ;
"RTN","HMPDJ08A",128,0)
 ; ------------------------------------------------------------------
"RTN","HMPDJ08A",129,0)
 ; nationalTitle = 4695068^RADIOLOGY REPORT
"RTN","HMPDJ08A",130,0)
 ;       Subject = 4693357^RADIOLOGY
"RTN","HMPDJ08A",131,0)
 ;          Type = 4696123^REPORT
"RTN","HMPDJ08A",132,0)
 ;
"RTN","HMPDJ08A",133,0)
RA(DFN,BEG,END,MAX) ; -- Radiology reports
"RTN","HMPDJ08A",134,0)
 N HMPXID,STS,PSET
"RTN","HMPDJ08A",135,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDJ08A",136,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)_"P"
"RTN","HMPDJ08A",137,0)
 K ^TMP($J,"RAE1") D EN1^RAO7PC1(DFN,BEG,END,MAX)
"RTN","HMPDJ08A",138,0)
 S HMPXID="" F  S HMPXID=$O(^TMP($J,"RAE1",DFN,HMPXID)) Q:HMPXID=""  D
"RTN","HMPDJ08A",139,0)
 . S STS=$P($G(^TMP($J,"RAE1",DFN,HMPXID)),U,3),PSET=$G(^(HMPXID,"CPRS"))
"RTN","HMPDJ08A",140,0)
 . Q:STS="No Report"!(STS="Deleted")  ;!(STS["Draft")
"RTN","HMPDJ08A",141,0)
 . I +PSET=2,$G(PSET(+HMPXID,$P(PSET,U,2))) Q  ;already have report
"RTN","HMPDJ08A",142,0)
 . S HMPX=$$RA1(DFN,HMPXID) D EN1^HMPDJ08(HMPX,"RA")
"RTN","HMPDJ08A",143,0)
 . I +PSET=2 S PSET(+HMPXID,$P(PSET,U,2))=$P(HMPXID,"-",2) ;parent
"RTN","HMPDJ08A",144,0)
 K ^TMP($J,"RAE1"),^TMP("HMPTEXT",$J)
"RTN","HMPDJ08A",145,0)
 Q
"RTN","HMPDJ08A",146,0)
 ;
"RTN","HMPDJ08A",147,0)
RA1(DFN,ID) ; -- return report data as TIU string [$$RESOLVE]
"RTN","HMPDJ08A",148,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ08A",149,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ08A",150,0)
 S ERRMSG="A problem occurred converting radiology report "_ID
"RTN","HMPDJ08A",151,0)
 S DFN=+$G(DFN),ID=$G(ID) I DFN<1!'$L(ID) Q ""
"RTN","HMPDJ08A",152,0)
 N EXAM,CASE,PROC,RAE3,RAE1,TEXT,I,X,Y,DATE,LOC,STS,IENS,VST,USER,SIGN
"RTN","HMPDJ08A",153,0)
 K RPT,^TMP("HMPTEXT",$J,ID)
"RTN","HMPDJ08A",154,0)
 S EXAM=DFN_U_$TR(ID,"-","^") D
"RTN","HMPDJ08A",155,0)
 . N DFN D EN3^RAO7PC3(EXAM) ;report
"RTN","HMPDJ08A",156,0)
 . D EN3^RAO7PC1(EXAM)       ;add'l values
"RTN","HMPDJ08A",157,0)
 S CASE=$O(^TMP($J,"RAE3",DFN,0)),PROC=$O(^(CASE,"")),RAE3=$G(^(PROC))
"RTN","HMPDJ08A",158,0)
 S RAE1=$G(^TMP($J,"RAE1",DFN,ID))
"RTN","HMPDJ08A",159,0)
 I $G(HMPTEXT) D
"RTN","HMPDJ08A",160,0)
 . S TEXT=$NA(^TMP("HMPTEXT",$J,ID))
"RTN","HMPDJ08A",161,0)
 . S I=0 F  S I=$O(^TMP($J,"RAE3",DFN,CASE,PROC,I)) Q:I<1  S X=^(I),@TEXT@(I)=X
"RTN","HMPDJ08A",162,0)
 S DATE=9999999.9999-(+ID),LOC=$P(RAE1,U,7),STS=$P(RAE3,U)
"RTN","HMPDJ08A",163,0)
 S IENS=$P(ID,"-",2)_","_+ID_","_DFN_","
"RTN","HMPDJ08A",164,0)
 S VST=$$GET1^DIQ(70.03,IENS,27,"I")
"RTN","HMPDJ08A",165,0)
 S X=+$G(^TMP($J,"RAE2",DFN,CASE,PROC,"P")),(USER,SIGN)=""
"RTN","HMPDJ08A",166,0)
 S:X USER=X_";;"_$P($G(^VA(200,X,0)),U) ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",167,0)
 S X=$G(^TMP($J,"RAE2",DFN,CASE,PROC,"V"))
"RTN","HMPDJ08A",168,0)
 S:X SIGN="//"_+X_";"_$P($G(^VA(200,+X,0)),U)_";"_$$GET1^DIQ(74,+$P(RAE1,U,5)_",",7,"I") ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",169,0)
 I $D(^TMP($J,"RAE3",DFN,"PRINT_SET")) S PROC=$G(^("ORD")) ;use parent, if printset
"RTN","HMPDJ08A",170,0)
 S Y=ID_U_PROC_U_DATE_U_U_USER_U_LOC_U_STS_U_VST_"^^1901^"_SIGN
"RTN","HMPDJ08A",171,0)
 K ^TMP($J,"RAE3",DFN),^TMP($J,"RAE2",DFN)
"RTN","HMPDJ08A",172,0)
 Q Y
"RTN","HMPDJ09")
0^46^B47251770
"RTN","HMPDJ09",1,0)
HMPDJ09 ;SLC/MKB,ASMR/RRB - PCE;Nov 16, 2015 14:08:57
"RTN","HMPDJ09",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ09",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ09",4,0)
 ;
"RTN","HMPDJ09",5,0)
 ; External References          DBIA#
"RTN","HMPDJ09",6,0)
 ; -------------------          -----
"RTN","HMPDJ09",7,0)
 ; ^AUPNVSIT                     2028
"RTN","HMPDJ09",8,0)
 ; ^PXRMINDX                     4290
"RTN","HMPDJ09",9,0)
 ; ^SC                          10040
"RTN","HMPDJ09",10,0)
 ; ^VA(200                      10060
"RTN","HMPDJ09",11,0)
 ; DIC                           2051
"RTN","HMPDJ09",12,0)
 ; DILFD                         2055
"RTN","HMPDJ09",13,0)
 ; DIQ                           2056
"RTN","HMPDJ09",14,0)
 ; PXAPI,^TMP("PXKENC"           1894
"RTN","HMPDJ09",15,0)
 ; VALM1                        10116
"RTN","HMPDJ09",16,0)
 ; XUAF4                         2171
"RTN","HMPDJ09",17,0)
 ;
"RTN","HMPDJ09",18,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ09",19,0)
 Q
"RTN","HMPDJ09",20,0)
 ;
"RTN","HMPDJ09",21,0)
PX(FNUM) ; -- PCE item(s)
"RTN","HMPDJ09",22,0)
 I $G(HMPID) D PXA(HMPID) Q
"RTN","HMPDJ09",23,0)
 N HMPIDT,ID D SORT ;sort ^PXRMINDX into ^TMP("HMPPX",$J,IDT)
"RTN","HMPDJ09",24,0)
 S HMPIDT=0 F  S HMPIDT=$O(^TMP("HMPPX",$J,HMPIDT)) Q:HMPIDT<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ09",25,0)
 . S ID=0 F  S ID=$O(^TMP("HMPPX",$J,HMPIDT,ID)) Q:ID<1  D PX1 Q:HMPI'<HMPMAX
"RTN","HMPDJ09",26,0)
 K ^TMP("HMPPX",$J)
"RTN","HMPDJ09",27,0)
 Q
"RTN","HMPDJ09",28,0)
 ;
"RTN","HMPDJ09",29,0)
PXA(ID) ; -- find ID in ^PXRMINDX(FNUM), fall thru to PX1 if successful
"RTN","HMPDJ09",30,0)
 N N,ROOT,IDX,P,ITEM,DATE,HMPIDT
"RTN","HMPDJ09",31,0)
 S N=+$P(FNUM,".",2) K ^TMP("HMPPX",$J)
"RTN","HMPDJ09",32,0)
 I N=7!(N=18) S ROOT="^PXRMINDX("_FNUM_",""PPI"","_+$G(DFN)
"RTN","HMPDJ09",33,0)
 E  S ROOT="^PXRMINDX("_FNUM_",""PI"","_+$G(DFN)
"RTN","HMPDJ09",34,0)
 S IDX=ROOT_")" F  S IDX=$Q(@IDX) Q:$P(IDX,",",1,3)'=ROOT  D
"RTN","HMPDJ09",35,0)
 . S P=$L(IDX,",") Q:ID'=+$P(IDX,",",P)  ;last subscript
"RTN","HMPDJ09",36,0)
 . S DATE=+$P(IDX,",",P-1),ITEM=+$P(IDX,",",P-2)
"RTN","HMPDJ09",37,0)
 . S HMPIDT=9999999-DATE,^TMP("HMPPX",$J,HMPIDT,ID)=ITEM_U_DATE
"RTN","HMPDJ09",38,0)
 Q:'$D(^TMP("HMPPX",$J))  ;not found
"RTN","HMPDJ09",39,0)
PX1 ; -- PCE ^TMP("HMPPX",$J,HMPIDT,ID)=ITM^DATE for FNUM
"RTN","HMPDJ09",40,0)
 N N,COLL,TAG,HMPF,FLD,TMP,VISIT,X0,X12,FAC,LOC,X,Y,PCE
"RTN","HMPDJ09",41,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ09",42,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ09",43,0)
 S N=+$P(FNUM,".",2),TAG=$S(N=7:"VPOV",N=11:"VIMM",N=12:"VSKIN",N=13:"VXAM",N=16:"VPEDU",N=18:"VCPT",1:"VHF")
"RTN","HMPDJ09",44,0)
 S ERRMSG="A problem occurred converting record "_ID_" for "_TAG
"RTN","HMPDJ09",45,0)
 D @(TAG_"^PXPXRM(ID,.HMPF)")
"RTN","HMPDJ09",46,0)
 ;
"RTN","HMPDJ09",47,0)
 S PCE("localId")=ID,TMP=$G(^TMP("HMPPX",$J,HMPIDT,ID))
"RTN","HMPDJ09",48,0)
 S COLL=$S(N=7:"pov",N=11:"immunization",N=12:"skin",N=13:"exam",N=16:"education",N=18:"cpt",1:"factor")
"RTN","HMPDJ09",49,0)
 S PCE("uid")=$$SETUID^HMPUTILS(COLL,DFN,ID)
"RTN","HMPDJ09",50,0)
 ; TAG=$S(N=23:"recorded",N=11:"administeredDateTime",1:"dateTimeEntered")
"RTN","HMPDJ09",51,0)
 S TAG=$S(N=11:"administeredDateTime",1:"entered")
"RTN","HMPDJ09",52,0)
 S PCE(TAG)=$$JSONDT^HMPUTILS($P(TMP,U,2))
"RTN","HMPDJ09",53,0)
 S PCE("name")=$$EXTERNAL^DILFD(FNUM,.01,,+TMP)
"RTN","HMPDJ09",54,0)
 S VISIT=+$G(HMPF("VISIT")),PCE("encounterUid")=$$SETUID^HMPUTILS("visit",DFN,VISIT)
"RTN","HMPDJ09",55,0)
 S PCE("encounterName")=$$NAME^HMPDJ04(VISIT)
"RTN","HMPDJ09",56,0)
 ;DE2818, ^AUPNVSIT - ICR 2028
"RTN","HMPDJ09",57,0)
 S X0=$G(^AUPNVSIT(+VISIT,0)),FAC=+$P(X0,U,6),LOC=+$P(X0,U,22)  ;(#.06) LOC. OF ENCOUNTER, (#.22) HOSPITAL LOCATION
"RTN","HMPDJ09",58,0)
 S:FAC X=$$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","HMPDJ09",59,0)
 S:'FAC X=$$FAC^HMPD(LOC)
"RTN","HMPDJ09",60,0)
 D FACILITY^HMPUTILS(X,"PCE")
"RTN","HMPDJ09",61,0)
 ;DE2818 ^SC global reference changed to FileMan
"RTN","HMPDJ09",62,0)
 S:LOC PCE("locationUid")=$$SETUID^HMPUTILS("location",,LOC),PCE("locationName")=$$GET1^DIQ(44,LOC_",",.01)
"RTN","HMPDJ09",63,0)
 S X=$G(HMPF("COMMENTS")) S:$L(X) PCE("comment")=X
"RTN","HMPDJ09",64,0)
POV I FNUM=9000010.07 D  G PXQ
"RTN","HMPDJ09",65,0)
 . S X=$G(HMPF("PRIMARY/SECONDARY")),PCE("type")=$S($L(X):X,1:"U")
"RTN","HMPDJ09",66,0)
 . S X=PCE("name"),PCE("icdCode")=$$SETNCS^HMPUTILS("icd",X)
"RTN","HMPDJ09",67,0)
 . S X=$G(HMPF("PROVIDER NARRATIVE")),PCE("name")=$$EXTERNAL^DILFD(9000010.07,.04,,X)
"RTN","HMPDJ09",68,0)
CPT I FNUM=9000010.18 D  G PXQ
"RTN","HMPDJ09",69,0)
 . S X=$G(HMPF("PRINCIPAL PROCEDURE")),PCE("type")=$S($L(X):X,1:"U")
"RTN","HMPDJ09",70,0)
 . S X=PCE("name"),PCE("cptCode")=$$SETNCS^HMPUTILS("cpt",X)
"RTN","HMPDJ09",71,0)
 . S X=$G(HMPF("PROVIDER NARRATIVE")),PCE("name")=$$EXTERNAL^DILFD(9000010.18,.04,,X)
"RTN","HMPDJ09",72,0)
 . S PCE("quantity")=HMPF("QUANTITY")
"RTN","HMPDJ09",73,0)
 S X=$G(HMPF("VALUE")),FLD=$S(FNUM=9000010.16:.06,1:.04)
"RTN","HMPDJ09",74,0)
 S Y=$$EXTERNAL^DILFD(FNUM,FLD,,X)
"RTN","HMPDJ09",75,0)
IM I FNUM=9000010.11 D  G PXQ ;immunization
"RTN","HMPDJ09",76,0)
 . S:$L(Y) PCE("seriesName")=Y,PCE("seriesCode")=$$SETUID^HMPUTILS("series",DFN,Y)
"RTN","HMPDJ09",77,0)
 . S X=$G(HMPF("REACTION")) I $L(X) D
"RTN","HMPDJ09",78,0)
 .. S PCE("reactionName")=$$EXTERNAL^DILFD(9000010.11,.06,,X)
"RTN","HMPDJ09",79,0)
 .. S PCE("reactionCode")=$$SETUID^HMPUTILS("reaction",DFN,X)
"RTN","HMPDJ09",80,0)
 . S PCE("contraindicated")=$S(+$G(HMPF("CONTRAINDICATED")):"true",1:"false")
"RTN","HMPDJ09",81,0)
 . I '$D(^TMP("PXKENC",$J,VISIT)) D ENCEVENT^PXAPI(VISIT,1)
"RTN","HMPDJ09",82,0)
 . S X12=$G(^TMP("PXKENC",$J,VISIT,"IMM",ID,12))
"RTN","HMPDJ09",83,0)
 . S X=$P(X12,U,4) S:'X X=$P(X12,U,2)
"RTN","HMPDJ09",84,0)
 . I 'X S I=0 F  S I=$O(^TMP("PXKENC",$J,VISIT,"PRV",I)) Q:I<1  I $P($G(^(I,0)),U,4)="P" S X=+^(0) Q
"RTN","HMPDJ09",85,0)
 . ;DE2818, ^VA(200 reference changed to FileMan
"RTN","HMPDJ09",86,0)
 . S:X PCE("performerUid")=$$SETUID^HMPUTILS("user",,+X),PCE("performerName")=$$GET1^DIQ(200,X_",",.01)
"RTN","HMPDJ09",87,0)
 . ; CPT mapping
"RTN","HMPDJ09",88,0)
 . S X=+$$FIND1^DIC(811.1,,"QX",+TMP_";AUTTIMM(","B") I X>0 D
"RTN","HMPDJ09",89,0)
 .. S Y=$$GET1^DIQ(811.1,X_",",.02,"I") Q:Y<1
"RTN","HMPDJ09",90,0)
 .. N CPT S CPT=$G(@(U_$P(Y,";",2)_+Y_",0)"))
"RTN","HMPDJ09",91,0)
 .. S PCE("cptCode")=$$SETNCS^HMPUTILS("cpt",+CPT)
"RTN","HMPDJ09",92,0)
 .. S (PCE("summary"),PCE("cptName"))=$P(CPT,U,2)
"RTN","HMPDJ09",93,0)
HF I FNUM=9000010.23 D  G PXQ ;health factor
"RTN","HMPDJ09",94,0)
 . S:$L(X) PCE("severityUid")=$$SETVURN^HMPUTILS("factor-severity",X),PCE("severityName")=$$LOWER^VALM1(Y)
"RTN","HMPDJ09",95,0)
 . S X=$$GET1^DIQ(9999999.64,+TMP_",",.03,"I") I X D
"RTN","HMPDJ09",96,0)
 .. S PCE("categoryUid")=$$SETVURN^HMPUTILS("factor-category",X)
"RTN","HMPDJ09",97,0)
 .. S PCE("categoryName")=$$EXTERNAL^DILFD(9999999.64,.03,"",X)
"RTN","HMPDJ09",98,0)
 . S X=$$GET1^DIQ(9999999.64,+TMP_",",.08)
"RTN","HMPDJ09",99,0)
 . I $E(X)="Y" S PCE("display")="true"
"RTN","HMPDJ09",100,0)
 . S PCE("kind")="Health Factor",PCE("summary")=PCE("name")
"RTN","HMPDJ09",101,0)
SK I FNUM=9000010.12 D  ;skin test [fall thru to set result]
"RTN","HMPDJ09",102,0)
 . S X=$G(HMPF("READING")) S:$L(X) PCE("reading")=X
"RTN","HMPDJ09",103,0)
 . S X=$G(HMPF("DATE READ")) S:X PCE("dateRead")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ09",104,0)
 S:$L(Y) PCE("result")=Y
"RTN","HMPDJ09",105,0)
PXQ ;finish
"RTN","HMPDJ09",106,0)
 S PCE("lastUpdateTime")=$$EN^HMPSTMP(COLL) ; RHL 20150115
"RTN","HMPDJ09",107,0)
 S PCE("stampTime")=PCE("lastUpdateTime")   ; RHL 20150115
"RTN","HMPDJ09",108,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ09",109,0)
 I $G(HMPMETA) D ADD^HMPMETA(COLL,PCE("uid"),PCE("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ09",110,0)
 D ADD^HMPDJ("PCE",COLL)
"RTN","HMPDJ09",111,0)
 Q
"RTN","HMPDJ09",112,0)
 ;
"RTN","HMPDJ09",113,0)
SORT ; -- build ^TMP("HMPPX",$J,9999999-DATE,DA)=ITEM^DATE in range
"RTN","HMPDJ09",114,0)
 N TYPE,ITEM,DATE,DA,IDT K ^TMP("HMPPX",$J)
"RTN","HMPDJ09",115,0)
 I FNUM=9000010.07!(FNUM=9000010.18) G PPI
"RTN","HMPDJ09",116,0)
PI ; from ^PXRMINDX(FNUM,"PI",DFN,ITEM,DATE,DA)
"RTN","HMPDJ09",117,0)
 ;DE2818, ^PXRMINDX - ICR 4290
"RTN","HMPDJ09",118,0)
 S ITEM=0 F  S ITEM=$O(^PXRMINDX(FNUM,"PI",+$G(DFN),ITEM)) Q:ITEM<1  D
"RTN","HMPDJ09",119,0)
 . S DATE=0 F  S DATE=$O(^PXRMINDX(FNUM,"PI",+$G(DFN),ITEM,DATE)) Q:DATE<1  D
"RTN","HMPDJ09",120,0)
 .. Q:DATE<HMPSTART  Q:DATE>HMPSTOP  S IDT=9999999-DATE
"RTN","HMPDJ09",121,0)
 .. S DA=0 F  S DA=$O(^PXRMINDX(FNUM,"PI",+$G(DFN),ITEM,DATE,DA)) Q:DA<1  S ^TMP("HMPPX",$J,IDT,DA)=ITEM_U_DATE
"RTN","HMPDJ09",122,0)
 Q
"RTN","HMPDJ09",123,0)
PPI ; from ^PXRMINDX(FNUM,"PPI",DFN,TYPE,ITEM,DATE,DA)
"RTN","HMPDJ09",124,0)
 S TYPE="" F  S TYPE=$O(^PXRMINDX(FNUM,"PPI",+$G(DFN),TYPE)) Q:TYPE=""  D
"RTN","HMPDJ09",125,0)
 . S ITEM=0 F  S ITEM=$O(^PXRMINDX(FNUM,"PPI",+$G(DFN),TYPE,ITEM)) Q:ITEM<1  D
"RTN","HMPDJ09",126,0)
 .. S DATE=0 F  S DATE=$O(^PXRMINDX(FNUM,"PPI",+$G(DFN),TYPE,ITEM,DATE)) Q:DATE<1  D
"RTN","HMPDJ09",127,0)
 ... Q:DATE<HMPSTART  Q:DATE>HMPSTOP  S IDT=9999999-DATE
"RTN","HMPDJ09",128,0)
 ... S DA=0 F  S DA=$O(^PXRMINDX(FNUM,"PPI",+$G(DFN),TYPE,ITEM,DATE,DA)) Q:DA<1  S ^TMP("HMPPX",$J,IDT,DA)=ITEM_U_DATE
"RTN","HMPDJ09",129,0)
 Q
"RTN","HMPDJ09",130,0)
PTF ; from ^PXRMINDX(45,"ICD9","PNI",DFN,TYPE,ITEM,DATE,DA)
"RTN","HMPDJ09",131,0)
 ;Purpose - Build ^TMP("HMPPX") from ^PXRMINDX(45,HMPISYS,"PNI",DFN)
"RTN","HMPDJ09",132,0)
 ;
"RTN","HMPDJ09",133,0)
 ;Called by - PTF^HMPDJ0 (if HMPID is not set)
"RTN","HMPDJ09",134,0)
 ;
"RTN","HMPDJ09",135,0)
 ;Assumptions -
"RTN","HMPDJ09",136,0)
 ;1. DFN, HMPSTART and HMPSTOP variables have been set in prior code
"RTN","HMPDJ09",137,0)
 ;2. ^TMP("HMPPX") does not exist and needs to be built
"RTN","HMPDJ09",138,0)
 ;3. '$G(HMPID)
"RTN","HMPDJ09",139,0)
 ;
"RTN","HMPDJ09",140,0)
 ;Modification History -
"RTN","HMPDJ09",141,0)
 ;US5630 (TW) - HMPISYS can be either "ICD" or "10D" (ICD-10)
"RTN","HMPDJ09",142,0)
 ;
"RTN","HMPDJ09",143,0)
 N HMPISYS,HMPTYP,HMPDX,HMPDT,HMPITEM
"RTN","HMPDJ09",144,0)
 S HMPISYS="" F  S HMPISYS=$O(^PXRMINDX(45,HMPISYS)) Q:HMPISYS=""  D 
"RTN","HMPDJ09",145,0)
 . Q:'$D(^PXRMINDX(45,HMPISYS,"PNI",+$G(DFN)))
"RTN","HMPDJ09",146,0)
 . S HMPTYP="" F  S HMPTYP=$O(^PXRMINDX(45,HMPISYS,"PNI",+$G(DFN),HMPTYP)) Q:HMPTYP=""  D
"RTN","HMPDJ09",147,0)
 .. S HMPDX=0 F  S HMPDX=$O(^PXRMINDX(45,HMPISYS,"PNI",+$G(DFN),HMPTYP,HMPDX)) Q:HMPDX=""  D
"RTN","HMPDJ09",148,0)
 ... S HMPDT=0 F  S HMPDT=$O(^PXRMINDX(45,HMPISYS,"PNI",+$G(DFN),HMPTYP,HMPDX,HMPDT)) Q:HMPDT<1  D
"RTN","HMPDJ09",149,0)
 .... Q:HMPDT<HMPSTART  Q:HMPDT>HMPSTOP  S HMPRDT=9999999-HMPDT
"RTN","HMPDJ09",150,0)
 .... S HMPITEM="" F  S HMPITEM=$O(^PXRMINDX(45,HMPISYS,"PNI",+$G(DFN),HMPTYP,HMPDX,HMPDT,HMPITEM)) Q:HMPITEM=""  S ^TMP("HMPPX",$J,HMPRDT,HMPITEM_";"_HMPTYP)=HMPDX_U_HMPDT_U_HMPISYS
"RTN","HMPDJ09",151,0)
 Q
"RTN","HMPDJ09M")
0^47^B14316939
"RTN","HMPDJ09M",1,0)
HMPDJ09M ;SLC/MKB,ASMR/RRB - Mental Health;Nov 16, 2015 17:15:13
"RTN","HMPDJ09M",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ09M",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ09M",4,0)
 ;
"RTN","HMPDJ09M",5,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ09M",6,0)
 Q
"RTN","HMPDJ09M",7,0)
 ;
"RTN","HMPDJ09M",8,0)
MH ; -- Mental Health Administrations [from ^HMPDJ0]
"RTN","HMPDJ09M",9,0)
 I $G(HMPID) D MH1(HMPID) Q
"RTN","HMPDJ09M",10,0)
 N CNT,HMPIDT,ID,FNUM,TOTAL,HMPOUT,HMPYS,IEN
"RTN","HMPDJ09M",11,0)
 ;
"RTN","HMPDJ09M",12,0)
 ;DE2818, for ^YTT(601.71), subscription needed to ICR 5044
"RTN","HMPDJ09M",13,0)
 S IEN=0 F  S IEN=$O(^YTT(601.71,IEN)) Q:IEN'>0  D
"RTN","HMPDJ09M",14,0)
 .S HMPYS("CODE")=IEN,HMPYS("DFN")=+$G(DFN),HMPYS("LIMIT")=999
"RTN","HMPDJ09M",15,0)
 .K HMPOUT
"RTN","HMPDJ09M",16,0)
 .D PTTEST^YTQPXRM2(.HMPOUT,.HMPYS)
"RTN","HMPDJ09M",17,0)
 .I HMPOUT(1)["[ERROR]" Q
"RTN","HMPDJ09M",18,0)
 .S TOTAL=$P(HMPOUT(1),U,2)+1
"RTN","HMPDJ09M",19,0)
 .I $P(HMPOUT(1),U,2)<1 Q
"RTN","HMPDJ09M",20,0)
 .;S CNT=1 F  S CNT=$O(HMPOUT(CNT)) Q:CNT'>0  D
"RTN","HMPDJ09M",21,0)
 .F CNT=2:1:TOTAL D
"RTN","HMPDJ09M",22,0)
 ..I $G(HMPOUT(CNT))="" Q
"RTN","HMPDJ09M",23,0)
 ..S ID=$P(HMPOUT(CNT),U)
"RTN","HMPDJ09M",24,0)
 ..D MH1(ID,IEN)
"RTN","HMPDJ09M",25,0)
 ;handle old MH test before the latest revision to their package
"RTN","HMPDJ09M",26,0)
 ;S FNUM=601.2 D SORT^HMPDJ09 ;sort ^PXRMINDX into ^TMP("HMPPX",$J,IDT)
"RTN","HMPDJ09M",27,0)
 ;S HMPIDT=0 F  S HMPIDT=$O(^TMP("HMPPX",$J,HMPIDT)) Q:HMPIDT<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ09M",28,0)
 ;. S ID=0 F  S ID=$O(^TMP("HMPPX",$J,HMPIDT,ID)) Q:ID<1  D YT1^HMPDJ09(ID) Q:HMPI'<HMPMAX
"RTN","HMPDJ09M",29,0)
 ;I HMPI'<HMPMAX Q
"RTN","HMPDJ09M",30,0)
 ;handle new MH test  after revision to their package
"RTN","HMPDJ09M",31,0)
 ;S FNUM=601.84 D SORT^HMPDJ09 ;sort ^PXRMINDX into ^TMP("HMPPX",$J,IDT)
"RTN","HMPDJ09M",32,0)
 ;S HMPIDT=0 F  S HMPIDT=$O(^TMP("HMPPX",$J,HMPIDT)) Q:HMPIDT<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ09M",33,0)
 ;. S ID=0 F  S ID=$O(^TMP("HMPPX",$J,HMPIDT,ID)) Q:ID<1  D YT1^HMPDJ09(ID) Q:HMPI'<HMPMAX
"RTN","HMPDJ09M",34,0)
 K ^TMP("HMPPX",$J)
"RTN","HMPDJ09M",35,0)
 Q
"RTN","HMPDJ09M",36,0)
 ;
"RTN","HMPDJ09M",37,0)
MH1(ID,IEN) ; -- MH Administration
"RTN","HMPDJ09M",38,0)
 N HMPY,COPY,GBL,ISCOPY,MH,NAME,NODE,CNT,I,X2,X,Y,TEMP,TEXT
"RTN","HMPDJ09M",39,0)
 D ENDAS71^YTQPXRM6(.HMPY,ID)
"RTN","HMPDJ09M",40,0)
 ;DE2818, for ^YTT(601.71), subscription needed to ICR 5044
"RTN","HMPDJ09M",41,0)
 S NAME=$P($G(^YTT(601.71,IEN,0)),U)  ;(#.01) NAME
"RTN","HMPDJ09M",42,0)
 S COPY=$G(^YTT(601.71,IEN,7))  ;(#21) COPYRIGHT TEXT
"RTN","HMPDJ09M",43,0)
 S ISCOPY=+$P($G(^YTT(601.71,IEN,8)),U,5)  ;(#25) IS COPYRIGHTED
"RTN","HMPDJ09M",44,0)
 ;HMPY(2) = Patient Name (1)^Test Code (2)^Test Title (3)^Internal Admin date (4)^External Admin Date (5)^Ordered by (6)
"RTN","HMPDJ09M",45,0)
 S MH("localId")=ID,X2=$G(HMPY(2))
"RTN","HMPDJ09M",46,0)
 S MH("uid")=$$SETUID^HMPUTILS("mh",DFN,ID)
"RTN","HMPDJ09M",47,0)
 S MH("displayName")=$P(X2,U,2),MH("name")=$S(NAME'="":NAME,1:$P(X2,U,3))
"RTN","HMPDJ09M",48,0)
 S MH("administeredDateTime")=$$JSONDT^HMPUTILS($P(X2,U,4))
"RTN","HMPDJ09M",49,0)
 S X=$P(X2,U,6) I $L(X) D  ;ordered by
"RTN","HMPDJ09M",50,0)
 . N HMPERR,HMPOUT  ;DE2818, changed ^VA(200,"B") global reference to FileMan
"RTN","HMPDJ09M",51,0)
 . D FIND^DIC(200,"","@;.01","X",X,"","B","","","HMPOUT","HMPERR")
"RTN","HMPDJ09M",52,0)
 . ; if single result found save it in Y, else zero
"RTN","HMPDJ09M",53,0)
 . S Y=$S($P($G(HMPOUT("DILIST",0)),U)=1:$G(HMPOUT("DILIST",2,1)),1:0)
"RTN","HMPDJ09M",54,0)
 . S MH("providerName")=X
"RTN","HMPDJ09M",55,0)
 . S:Y MH("providerUid")=$$SETUID^HMPUTILS("user",,Y)
"RTN","HMPDJ09M",56,0)
 ;get questions/answers for test
"RTN","HMPDJ09M",57,0)
 S I=0,CNT=0 F  S I=$O(HMPY("R",I)) Q:I'>0  D
"RTN","HMPDJ09M",58,0)
 .S NODE=$G(HMPY("R",I))
"RTN","HMPDJ09M",59,0)
 .S CNT=CNT+1
"RTN","HMPDJ09M",60,0)
 .K TEMP,^TMP($J,"HMP MH TEXT")
"RTN","HMPDJ09M",61,0)
 .;answers
"RTN","HMPDJ09M",62,0)
 .S TEMP=$P(NODE,U,2) I TEMP>0 D
"RTN","HMPDJ09M",63,0)
 ..S MH("responses",CNT,"answer","uid")=$$SETVURN^HMPUTILS("mha-answer",TEMP)
"RTN","HMPDJ09M",64,0)
 ..S MH("responses",CNT,"answer","text")=$P(NODE,U,6)
"RTN","HMPDJ09M",65,0)
 .;questions
"RTN","HMPDJ09M",66,0)
 .S TEMP=$P(NODE,U,3) I TEMP>0 D
"RTN","HMPDJ09M",67,0)
 ..S MH("responses",CNT,"question","uid")=$$SETVURN^HMPUTILS("mha-question",TEMP)
"RTN","HMPDJ09M",68,0)
 ..;DE2818 - ^YTT(601.72,D0,1,D1,0)= (#.01) QUESTION TEXT [1W], ICR 6277
"RTN","HMPDJ09M",69,0)
 ..S GBL=$NA(^YTT(601.72,TEMP,1))
"RTN","HMPDJ09M",70,0)
 ..D SETTEXT^HMPUTILS(GBL,$NA(^TMP($J,"HMP MH TEXT")))
"RTN","HMPDJ09M",71,0)
 ..M MH("responses",CNT,"question","text","\")=^TMP($J,"HMP MH TEXT")
"RTN","HMPDJ09M",72,0)
 ; get scale(s) for test
"RTN","HMPDJ09M",73,0)
 S I=0,CNT=0 F  S I=$O(HMPY("SI",I)) Q:I'>0  D
"RTN","HMPDJ09M",74,0)
 .S NODE=$G(HMPY("SI",I))
"RTN","HMPDJ09M",75,0)
 .S CNT=CNT+1
"RTN","HMPDJ09M",76,0)
 .S MH("scales",CNT,"scale","uid")=$$SETVURN^HMPUTILS("mha-scale",I)
"RTN","HMPDJ09M",77,0)
 .S MH("scales",CNT,"scale","name")=$P(NODE,U,2)
"RTN","HMPDJ09M",78,0)
 .S MH("scales",CNT,"scale","rawScore")=$P(NODE,U,3)
"RTN","HMPDJ09M",79,0)
 .I $P(NODE,U,4)'="" S MH("scales",CNT,"scale","transformScore")=$P(NODE,U,4)
"RTN","HMPDJ09M",80,0)
 S MH("isCopyright")=$S(ISCOPY=1:"true",1:"false")
"RTN","HMPDJ09M",81,0)
 I ISCOPY=1 S MH("copyrightText")=COPY
"RTN","HMPDJ09M",82,0)
 S MH("lastUpdateTime")=$$EN^HMPSTMP("mh") ;RHL 20150103
"RTN","HMPDJ09M",83,0)
 S MH("stampTime")=MH("lastUpdateTime") ; RHL 20150103
"RTN","HMPDJ09M",84,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ09M",85,0)
 I $G(HMPMETA) D ADD^HMPMETA("mh",MH("uid"),MH("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ09M",86,0)
 D ADD^HMPDJ("MH","mh")
"RTN","HMPDJ09M",87,0)
 Q
"RTN","HMPDJ1")
0^32^B18644090
"RTN","HMPDJ1",1,0)
HMPDJ1 ;SLC/MKB,ASMR/RRB - HMP Patient Object RPCs;Nov 04, 2015 17:37
"RTN","HMPDJ1",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ1",4,0)
 ;
"RTN","HMPDJ1",5,0)
 Q
"RTN","HMPDJ1",6,0)
 ;
"RTN","HMPDJ1",7,0)
PUT(HMP,PAT,TYPE,JSON) ; -- Save/update JSON OBJECT in ^HMP(800000.1), return UID if successful
"RTN","HMPDJ1",8,0)
 ; RPC = HMP PUT PATIENT DATA
"RTN","HMPDJ1",9,0)
 ;
"RTN","HMPDJ1",10,0)
 N ARRAY,CNT,ERR,HMPERR,UID,DA,X,I,DFN,HMPSYS
"RTN","HMPDJ1",11,0)
 ;M JSON=INPUT(0)
"RTN","HMPDJ1",12,0)
 D DECODE^HMPJSON("JSON","ARRAY","HMPERR")
"RTN","HMPDJ1",13,0)
 ;N XCNT S XCNT=$O(^XTMP("AGPARRAY",""),-1),XCNT=XCNT+1
"RTN","HMPDJ1",14,0)
 ;M ^XTMP("AGPARRAY",XCNT,"DATA")=ARRAY
"RTN","HMPDJ1",15,0)
 ;S ^XTMP("AGPARRAY",XCNT,"TYPE")=TYPE
"RTN","HMPDJ1",16,0)
 ;M ^XTMP("AGPARRAY")=ARRAY
"RTN","HMPDJ1",17,0)
 I $D(HMPERR) D  Q  ;S X=$G(ERR(1)) K ERR S ERR=X G PTQ
"RTN","HMPDJ1",18,0)
 . K ARRAY N HMPTMP,HMPTXT
"RTN","HMPDJ1",19,0)
 . S HMPTXT(1)="Problem decoding json input."
"RTN","HMPDJ1",20,0)
 . D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.JSON)
"RTN","HMPDJ1",21,0)
 . K HMPERR D ENCODE^HMPJSON("HMPTMP","ARRAY","HMPERR")
"RTN","HMPDJ1",22,0)
 . S HMP(.5)="{""apiVersion"":""1.01"",""error"":{"
"RTN","HMPDJ1",23,0)
 . M HMP(1)=ARRAY
"RTN","HMPDJ1",24,0)
 . S HMP(2)="}}"
"RTN","HMPDJ1",25,0)
 ;
"RTN","HMPDJ1",26,0)
 S UID=$G(ARRAY("uid")),HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPDJ1",27,0)
 I $L(UID) S DA=+$O(^HMP(800000.1,"B",UID,0)) I DA<1 S ERR=$$ERR(3,UID) G PTQ
"RTN","HMPDJ1",28,0)
 I '$L(UID) D  G:$D(ERR) PTQ Q:$D(HMPERR)
"RTN","HMPDJ1",29,0)
 . D NEW Q:$D(ERR)
"RTN","HMPDJ1",30,0)
 . S ARRAY("uid")=UID K JSON
"RTN","HMPDJ1",31,0)
 . D ENCODE^HMPJSON("ARRAY","JSON","HMPERR")
"RTN","HMPDJ1",32,0)
 . I $D(HMPERR) D  Q  ;S X=$G(ERR(1)) K ERR S ERR=X Q
"RTN","HMPDJ1",33,0)
 .. K JSON N HMPTMP,HMPTXT
"RTN","HMPDJ1",34,0)
 .. S HMPTXT(1)="Problem encoding json output."
"RTN","HMPDJ1",35,0)
 .. D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.ARRAY)
"RTN","HMPDJ1",36,0)
 .. K HMPERR D ENCODE^HMPJSON("HMPTMP","JSON","HMPERR")
"RTN","HMPDJ1",37,0)
 .. S HMP(.5)="{""apiVersion"":""1.01"",""error"":{"
"RTN","HMPDJ1",38,0)
 .. M HMP(1)=JSON
"RTN","HMPDJ1",39,0)
 .. S HMP(2)="}}"
"RTN","HMPDJ1",40,0)
 ;
"RTN","HMPDJ1",41,0)
 K ^HMP(800000.1,DA,1) S ^(1,0)="^800000.101^^",CNT=0
"RTN","HMPDJ1",42,0)
 S I="" F  S I=$O(JSON(I)) Q:I=""  S CNT=CNT+1,^HMP(800000.1,DA,1,CNT,0)=JSON(I)
"RTN","HMPDJ1",43,0)
 S:$G(CNT) ^HMP(800000.1,DA,1,0)="^800000.101^"_CNT_U_CNT
"RTN","HMPDJ1",44,0)
 ;
"RTN","HMPDJ1",45,0)
PTQ ; add item count and terminating characters
"RTN","HMPDJ1",46,0)
 I $D(ERR) S HMP="{""apiVersion"":""1.01"",""error"":{""message"":"""_ERR_"""},""success"":false}" Q
"RTN","HMPDJ1",47,0)
 S HMP="{""apiVersion"":""1.01"",""data"":{""updated"":"_""""_$$HL7NOW_""""_",""uid"":"""_UID_"""},""success"":true}"
"RTN","HMPDJ1",48,0)
 S DFN=+$P(UID,":",5)
"RTN","HMPDJ1",49,0)
 D POST^HMPEVNT(DFN,TYPE,DA) ;UID)
"RTN","HMPDJ1",50,0)
 Q
"RTN","HMPDJ1",51,0)
 ;
"RTN","HMPDJ1",52,0)
NEW ; -- create new entry in ^HMP(800000.1) from PAT,TYPE,HMPSYS
"RTN","HMPDJ1",53,0)
 ;  Return UID & DA, or ERR
"RTN","HMPDJ1",54,0)
 N DFN,ICN
"RTN","HMPDJ1",55,0)
 S DFN=+$G(PAT),ICN="",TYPE=$G(TYPE)
"RTN","HMPDJ1",56,0)
 I DFN<1,DFN[";" S ICN=+$P($G(DFN),";",2),DFN=+$G(DFN)
"RTN","HMPDJ1",57,0)
 I DFN<1,ICN S DFN=+$$GETDFN^MPIF001(ICN)
"RTN","HMPDJ1",58,0)
 I DFN<1!'$D(^DPT(DFN)) S ERR=$$ERR(1,DFN) Q  ; IA 10035, DE2818
"RTN","HMPDJ1",59,0)
 I TYPE="" S ERR=$$ERR(2,"null") Q
"RTN","HMPDJ1",60,0)
 ;
"RTN","HMPDJ1",61,0)
 S DA=$$NEXTIFN I DA<1 S ERR=$$ERR(4) Q
"RTN","HMPDJ1",62,0)
 S UID="urn:va:"_TYPE_":"_HMPSYS_":"_DFN_":"_DA
"RTN","HMPDJ1",63,0)
 S ^HMP(800000.1,DA,0)=UID_U_DFN_U_TYPE
"RTN","HMPDJ1",64,0)
 S ^HMP(800000.1,"B",UID,DA)=""
"RTN","HMPDJ1",65,0)
 S ^HMP(800000.1,"C",DFN,TYPE,DA)=""
"RTN","HMPDJ1",66,0)
 Q
"RTN","HMPDJ1",67,0)
 ;
"RTN","HMPDJ1",68,0)
NEXTIFN() ; -- Returns next available IFN
"RTN","HMPDJ1",69,0)
 N I,HDR,TOTAL,DA
"RTN","HMPDJ1",70,0)
 L +^HMP(800000.1,0):$S($G(DILOCKTM)>0:DILOCKTM,1:5)
"RTN","HMPDJ1",71,0)
 I '$T Q "^"
"RTN","HMPDJ1",72,0)
 S HDR=$G(^HMP(800000.1,0)),TOTAL=+$P(HDR,U,4),I=$O(^HMP(800000.1,"?"),-1)
"RTN","HMPDJ1",73,0)
 F I=(I+1):1 Q:'$D(^HMP(800000.1,I,0))
"RTN","HMPDJ1",74,0)
 S DA=I,$P(HDR,U,3,4)=DA_U_(TOTAL+1) S ^HMP(800000.1,0)=HDR
"RTN","HMPDJ1",75,0)
 L -^HMP(800000.1,0)
"RTN","HMPDJ1",76,0)
 Q DA
"RTN","HMPDJ1",77,0)
 ;
"RTN","HMPDJ1",78,0)
ERR(X,VAL) ; -- return error message
"RTN","HMPDJ1",79,0)
 N MSG  S MSG="Error"
"RTN","HMPDJ1",80,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","HMPDJ1",81,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","HMPDJ1",82,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","HMPDJ1",83,0)
 I X=4  S MSG="Unable to create new object"
"RTN","HMPDJ1",84,0)
 I X=99 S MSG="Unknown request"
"RTN","HMPDJ1",85,0)
 Q MSG
"RTN","HMPDJ1",86,0)
 ;
"RTN","HMPDJ1",87,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","HMPDJ1",88,0)
 Q $P($$FMTHL7^XLFDT($$NOW^XLFDT),"-")
"RTN","HMPDJ1",89,0)
 ;
"RTN","HMPDJ1",90,0)
CONV ; -- convert uid format
"RTN","HMPDJ1",91,0)
 N DA,X0,UID,HMPSYS,DFN,COLL,NEW,I,JSON,HMPY,ERR,CNT
"RTN","HMPDJ1",92,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPDJ1",93,0)
 S DA=0 F  S DA=$O(^HMP(800000.1,DA)) Q:DA<1  D
"RTN","HMPDJ1",94,0)
 . S X0=$G(^HMP(800000.1,DA,0)),UID=$P(X0,U)
"RTN","HMPDJ1",95,0)
 . K ^HMP(800000.1,"B",UID,DA),JSON
"RTN","HMPDJ1",96,0)
 . S DFN=$P(X0,"^",2),COLL=$P(X0,"^",3)
"RTN","HMPDJ1",97,0)
 . S NEW="urn:va:"_COLL_":"_HMPSYS_":"_DFN_":"_DA
"RTN","HMPDJ1",98,0)
 . S $P(^HMP(800000.1,DA,0),U)=NEW,^HMP(800000.1,"B",NEW,DA)=""
"RTN","HMPDJ1",99,0)
 . ;decode JSON object, reset uid
"RTN","HMPDJ1",100,0)
 . S I=0 F  S I=$O(^HMP(800000.1,DA,1,I)) Q:I<1  S JSON(I)=$G(^(I,0))
"RTN","HMPDJ1",101,0)
 . Q:'$D(JSON)  K HMPY,ERR
"RTN","HMPDJ1",102,0)
 . D DECODE^HMPJSON("JSON","HMPY","ERR") I $D(ERR) W !,DA Q
"RTN","HMPDJ1",103,0)
 . S HMPY("uid")=NEW K JSON
"RTN","HMPDJ1",104,0)
 . D ENCODE^HMPJSON("HMPY","JSON","ERR") I $D(ERR) W !,DA Q
"RTN","HMPDJ1",105,0)
 . K ^HMP(800000.1,DA,1) S ^(1,0)="^800000.101^^",CNT=0
"RTN","HMPDJ1",106,0)
 . S I="" F  S I=$O(JSON(I)) Q:I=""  S CNT=CNT+1,^HMP(800000.1,DA,1,CNT,0)=JSON(I)
"RTN","HMPDJ1",107,0)
 . S:$G(CNT) ^HMP(800000.1,DA,1,0)="^800000.101^"_CNT_U_CNT
"RTN","HMPDJ1",108,0)
 Q
"RTN","HMPDJ2")
0^34^B21439862
"RTN","HMPDJ2",1,0)
HMPDJ2 ;SLC/MKB,ASMR/RRB - HMP Object RPCs;1/18/13 3:54pm
"RTN","HMPDJ2",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJ2",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ2",4,0)
 ;
"RTN","HMPDJ2",5,0)
 Q
"RTN","HMPDJ2",6,0)
 ;
"RTN","HMPDJ2",7,0)
GET(HMP,FILTER) ; -- Return search results as JSON in @HMP@(n)
"RTN","HMPDJ2",8,0)
 ; RPC = HMP GET OBJECT
"RTN","HMPDJ2",9,0)
 N TYPE,HMPMAX,HMPI,HMPID,HMPERR,IEN
"RTN","HMPDJ2",10,0)
 S HMP=$NA(^TMP("HMP",$J)),HMPI=0 K @HMP
"RTN","HMPDJ2",11,0)
 ;
"RTN","HMPDJ2",12,0)
 ; parse & validate input parameters
"RTN","HMPDJ2",13,0)
 S TYPE=$G(FILTER("collection")),TYPE=$$LOW^XLFSTR(TYPE)
"RTN","HMPDJ2",14,0)
 S HMPMAX=+$G(FILTER("max"),9999) ;??
"RTN","HMPDJ2",15,0)
 S HMPID=$G(FILTER("id"))
"RTN","HMPDJ2",16,0)
 ;
"RTN","HMPDJ2",17,0)
 ;set error trap
"RTN","HMPDJ2",18,0)
 N $ES,$ET,ERRARRY,ERRDOM,ERRPAT,ERRMSG
"RTN","HMPDJ2",19,0)
 ;S $ET="D ERRHDLR^HMPDERRH G ERRQ^HMPDJ0"
"RTN","HMPDJ2",20,0)
 S ERRDOM="hmp",ERRMSG=$G(TYPE)
"RTN","HMPDJ2",21,0)
 K ^TMP($J,"HMP ERROR")
"RTN","HMPDJ2",22,0)
 ;
"RTN","HMPDJ2",23,0)
 ; extract data
"RTN","HMPDJ2",24,0)
 I $L(HMPID) D  G GQ
"RTN","HMPDJ2",25,0)
 . S IEN=+HMPID I 'IEN S IEN=+$O(^HMP(800000.11,"B",HMPID,0)) ;IEN or UID
"RTN","HMPDJ2",26,0)
 . D:IEN HMP1^HMPDJ02(800000.11,IEN)
"RTN","HMPDJ2",27,0)
 I TYPE="" S HMPERR="Missing or invalid collection type" G GQ
"RTN","HMPDJ2",28,0)
 S IEN=0 F  S IEN=$O(^HMP(800000.11,"C",TYPE,IEN)) Q:IEN<1  D HMP1^HMPDJ02(800000.11,IEN)
"RTN","HMPDJ2",29,0)
 ;
"RTN","HMPDJ2",30,0)
GQ ;build return JSON
"RTN","HMPDJ2",31,0)
 D GTQ^HMPDJ
"RTN","HMPDJ2",32,0)
 Q
"RTN","HMPDJ2",33,0)
 ;
"RTN","HMPDJ2",34,0)
DEL(HMP,HMPID) ; -- Delete object HMPID from ^HMP(800000.11)
"RTN","HMPDJ2",35,0)
 ; RPC = HMP DELETE OBJECT
"RTN","HMPDJ2",36,0)
 ;
"RTN","HMPDJ2",37,0)
 N ACTION,ERR,UID,DA,DIK,TYPE
"RTN","HMPDJ2",38,0)
 S UID=$G(HMPID) I '$L(UID) S ERR=$$ERR(3,"null") G PTQ
"RTN","HMPDJ2",39,0)
 S DA=+$O(^HMP(800000.11,"B",UID,0)) I DA<1 S ERR=$$ERR(3,UID) G PTQ
"RTN","HMPDJ2",40,0)
 S DIK="^HMP(800000.11," D ^DIK
"RTN","HMPDJ2",41,0)
 S ACTION="@",TYPE=$P(UID,":",3)
"RTN","HMPDJ2",42,0)
 G PTQ
"RTN","HMPDJ2",43,0)
 Q
"RTN","HMPDJ2",44,0)
 ;
"RTN","HMPDJ2",45,0)
PUT(HMP,TYPE,JSON) ; -- Save/update JSON OBJECT in ^HMP(800000.11), return UID if successful
"RTN","HMPDJ2",46,0)
 ; RPC = HMP PUT OBJECT
"RTN","HMPDJ2",47,0)
 ;
"RTN","HMPDJ2",48,0)
 N ACTION,ARRAY,CNT,ERR,HMPERR,UID,DA,X,I,HMPSYS
"RTN","HMPDJ2",49,0)
 D DECODE^HMPJSON("JSON","ARRAY","HMPERR")
"RTN","HMPDJ2",50,0)
 ;N XCNT S XCNT=$O(^XTMP("AGPARRAY",""),-1),XCNT=XCNT+1
"RTN","HMPDJ2",51,0)
 ;M ^XTMP("AGPARRAY",XCNT,"DATA")=ARRAY
"RTN","HMPDJ2",52,0)
 ;S ^XTMP("AGPARRAY",XCNT,"TYPE")=TYPE
"RTN","HMPDJ2",53,0)
 I $D(HMPERR) D  Q  ;S X=$G(ERR(1)) K ERR S ERR=X G PTQ
"RTN","HMPDJ2",54,0)
 . K ARRAY N HMPTMP,HMPTXT
"RTN","HMPDJ2",55,0)
 . S HMPTXT(1)="Problem decoding json input."
"RTN","HMPDJ2",56,0)
 . D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.JSON)
"RTN","HMPDJ2",57,0)
 . K HMPERR D ENCODE^HMPJSON("HMPTMP","ARRAY","HMPERR")
"RTN","HMPDJ2",58,0)
 . S HMP(.5)="{""apiVersion"":""1.01"",""error"":{"
"RTN","HMPDJ2",59,0)
 . M HMP(1)=ARRAY
"RTN","HMPDJ2",60,0)
 . S HMP(2)="}}"
"RTN","HMPDJ2",61,0)
 ;
"RTN","HMPDJ2",62,0)
 S UID=$G(ARRAY("uid")),HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPDJ2",63,0)
 I $L(UID) S DA=+$O(^HMP(800000.11,"B",UID,0)) I DA<1 S ERR=$$ERR(3,UID) G PTQ
"RTN","HMPDJ2",64,0)
 ;I $L(UID) S DA=+$O(^HMP(800000.11,"B",UID,0)) I DA<1 D NEW1(UID)
"RTN","HMPDJ2",65,0)
 I '$L(UID) D  G:$D(ERR) PTQ Q:$D(HMPERR)
"RTN","HMPDJ2",66,0)
 . D NEW Q:$D(ERR)
"RTN","HMPDJ2",67,0)
 . S ARRAY("uid")=UID K JSON
"RTN","HMPDJ2",68,0)
 . D ENCODE^HMPJSON("ARRAY","JSON","HMPERR")
"RTN","HMPDJ2",69,0)
 . I $D(HMPERR) D  Q  ;S X=$G(ERR(1)) K ERR S ERR=X Q
"RTN","HMPDJ2",70,0)
 .. K JSON N HMPTMP,HMPTXT
"RTN","HMPDJ2",71,0)
 .. S HMPTXT(1)="Problem encoding json output."
"RTN","HMPDJ2",72,0)
 .. D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.ARRAY)
"RTN","HMPDJ2",73,0)
 .. K HMPERR D ENCODE^HMPJSON("HMPTMP","JSON","HMPERR")
"RTN","HMPDJ2",74,0)
 .. S HMP(.5)="{""apiVersion"":""1.01"",""error"":{"
"RTN","HMPDJ2",75,0)
 .. M HMP(1)=JSON
"RTN","HMPDJ2",76,0)
 .. S HMP(2)="}}"
"RTN","HMPDJ2",77,0)
 ;
"RTN","HMPDJ2",78,0)
 K ^HMP(800000.11,DA,1) S ^(1,0)="^800000.111^^",CNT=0
"RTN","HMPDJ2",79,0)
 S I="" F  S I=$O(JSON(I)) Q:I=""  S CNT=CNT+1,^HMP(800000.11,DA,1,CNT,0)=JSON(I)
"RTN","HMPDJ2",80,0)
 S:$G(CNT) ^HMP(800000.11,DA,1,0)="^800000.111^"_CNT_U_CNT
"RTN","HMPDJ2",81,0)
 ;
"RTN","HMPDJ2",82,0)
PTQ ; add item count and terminating characters
"RTN","HMPDJ2",83,0)
 I $D(ERR) S HMP="{""apiVersion"":""1.01"",""error"":{""message"":"""_ERR_"""},""success"":false}" Q
"RTN","HMPDJ2",84,0)
 S HMP="{""apiVersion"":""1.01"",""data"":{""updated"":"_""""_$$HL7NOW_""""_",""uid"":"""_UID_"""},""success"":true}"
"RTN","HMPDJ2",85,0)
 D POSTX^HMPEVNT(TYPE,DA,$G(ACTION)) ;UID)
"RTN","HMPDJ2",86,0)
 Q
"RTN","HMPDJ2",87,0)
 ;
"RTN","HMPDJ2",88,0)
NEW1(UID) ; -- create new entry in ^HMP(800000.11) from PAT,TYPE,HMPSYS
"RTN","HMPDJ2",89,0)
 ;  Return UID & DA, or ERR
"RTN","HMPDJ2",90,0)
 S TYPE=$G(TYPE)
"RTN","HMPDJ2",91,0)
 I TYPE="" S ERR=$$ERR(2,"null") Q
"RTN","HMPDJ2",92,0)
 ;
"RTN","HMPDJ2",93,0)
 S DA=$$NEXTIFN I DA<1 S ERR=$$ERR(4) Q
"RTN","HMPDJ2",94,0)
 S UID="urn:va:"_TYPE_":"_HMPSYS_":"_DA
"RTN","HMPDJ2",95,0)
 S ^HMP(800000.11,DA,0)=UID_U_U_TYPE
"RTN","HMPDJ2",96,0)
 S ^HMP(800000.11,"B",UID,DA)=""
"RTN","HMPDJ2",97,0)
 S ^HMP(800000.11,"C",TYPE,DA)=""
"RTN","HMPDJ2",98,0)
 Q
"RTN","HMPDJ2",99,0)
 ;
"RTN","HMPDJ2",100,0)
NEW ; -- create new entry in ^HMP(800000.11) from PAT,TYPE,HMPSYS
"RTN","HMPDJ2",101,0)
 ;  Return UID & DA, or ERR
"RTN","HMPDJ2",102,0)
 S TYPE=$G(TYPE)
"RTN","HMPDJ2",103,0)
 I TYPE="" S ERR=$$ERR(2,"null") Q
"RTN","HMPDJ2",104,0)
 ;
"RTN","HMPDJ2",105,0)
 S DA=$$NEXTIFN I DA<1 S ERR=$$ERR(4) Q
"RTN","HMPDJ2",106,0)
 S UID="urn:va:"_TYPE_":"_HMPSYS_":"_DA
"RTN","HMPDJ2",107,0)
 S ^HMP(800000.11,DA,0)=UID_U_U_TYPE
"RTN","HMPDJ2",108,0)
 S ^HMP(800000.11,"B",UID,DA)=""
"RTN","HMPDJ2",109,0)
 S ^HMP(800000.11,"C",TYPE,DA)=""
"RTN","HMPDJ2",110,0)
 Q
"RTN","HMPDJ2",111,0)
 ;
"RTN","HMPDJ2",112,0)
NEXTIFN() ; -- Returns next available IFN
"RTN","HMPDJ2",113,0)
 N I,HDR,TOTAL,DA
"RTN","HMPDJ2",114,0)
 L +^HMP(800000.11,0):$S($G(DILOCKTM)>0:DILOCKTM,1:5)
"RTN","HMPDJ2",115,0)
 I '$T Q "^"
"RTN","HMPDJ2",116,0)
 S HDR=$G(^HMP(800000.11,0)),TOTAL=+$P(HDR,U,4),I=$O(^HMP(800000.11,"?"),-1)
"RTN","HMPDJ2",117,0)
 F I=(I+1):1 Q:'$D(^HMP(800000.11,I,0))
"RTN","HMPDJ2",118,0)
 S DA=I,$P(HDR,U,3,4)=DA_U_(TOTAL+1) S ^HMP(800000.11,0)=HDR
"RTN","HMPDJ2",119,0)
 L -^HMP(800000.11,0)
"RTN","HMPDJ2",120,0)
 Q DA
"RTN","HMPDJ2",121,0)
 ;
"RTN","HMPDJ2",122,0)
ERR(X,VAL) ; -- return error message
"RTN","HMPDJ2",123,0)
 N MSG  S MSG="Error"
"RTN","HMPDJ2",124,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","HMPDJ2",125,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","HMPDJ2",126,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","HMPDJ2",127,0)
 I X=4  S MSG="Unable to create new object"
"RTN","HMPDJ2",128,0)
 I X=99 S MSG="Unknown request"
"RTN","HMPDJ2",129,0)
 Q MSG
"RTN","HMPDJ2",130,0)
 ;
"RTN","HMPDJ2",131,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","HMPDJ2",132,0)
 Q $P($$FMTHL7^XLFDT($$NOW^XLFDT),"-")
"RTN","HMPDJFS")
0^48^B74871558
"RTN","HMPDJFS",1,0)
HMPDJFS ;SLC/KCM,ASMR/RRB -- Asynchronous Extracts and Freshness via stream;Oct 15, 2015 18:39:51
"RTN","HMPDJFS",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJFS",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFS",4,0)
 ;
"RTN","HMPDJFS",5,0)
 ; JD - 1/14/15 - Removed "+" from "$$GETICN^MPIF001(DFN)" so that the
"RTN","HMPDJFS",6,0)
 ;                full value of icn (<icn>V<checksum>) could be captured. US4194.
"RTN","HMPDJFS",7,0)
 ; JD - 3/16/15 - Added checks to prevent restaging of data if the data has
"RTN","HMPDJFS",8,0)
 ;                already been staged.  US4304
"RTN","HMPDJFS",9,0)
 ;
"RTN","HMPDJFS",10,0)
 ; PUT/POST   call $$TAG^ROUTINE(.args,.body)
"RTN","HMPDJFS",11,0)
 ; GET/DELETE call   TAG^ROUTINE(.response,.args)
"RTN","HMPDJFS",12,0)
 ;
"RTN","HMPDJFS",13,0)
 ; TODO: create function to build ARGS from PATH
"RTN","HMPDJFS",14,0)
 ; TODO: create function to return TAG^ROUTINE from MTHD,PATH
"RTN","HMPDJFS",15,0)
 ;
"RTN","HMPDJFS",16,0)
 ; todo: get the big sync working
"RTN","HMPDJFS",17,0)
 ; todo: change to use RPC calls
"RTN","HMPDJFS",18,0)
 ; todo: add in freshness 
"RTN","HMPDJFS",19,0)
 ;
"RTN","HMPDJFS",20,0)
 ; DE2818/RRB SQA findings 1st 2 lines of code
"RTN","HMPDJFS",21,0)
 ;
"RTN","HMPDJFS",22,0)
 Q
"RTN","HMPDJFS",23,0)
 ;
"RTN","HMPDJFS",24,0)
API(HMPFRSP,ARGS) ;
"RTN","HMPDJFS",25,0)
 N HMPFERR,HMPFHMP,HMPFLOG,CNT,ACNT
"RTN","HMPDJFS",26,0)
 K ^TMP("HMPF",$J)
"RTN","HMPDJFS",27,0)
 S HMPFHMP=$TR($G(ARGS("server")),"~","=")
"RTN","HMPDJFS",28,0)
 S HMPFRSP=$NA(^TMP("HMPF",$J))
"RTN","HMPDJFS",29,0)
 S HMPFLOG=+$$GET^XPAR("ALL","HMP LOG LEVEL")
"RTN","HMPDJFS",30,0)
 I HMPFLOG D LOGREQ(HMPFHMP,.ARGS)
"RTN","HMPDJFS",31,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPDJFS",32,0)
 I '$L(HMPFHMP) D SETERR("Missing HMP Server ID") QUIT
"RTN","HMPDJFS",33,0)
 I '$O(^HMP(800000,"B",HMPFHMP,0)) D SETERR("HMP Server not registered") QUIT
"RTN","HMPDJFS",34,0)
 ;
"RTN","HMPDJFS",35,0)
 ; begin select case
"RTN","HMPDJFS",36,0)
 I ARGS("command")="putPtSubscription" D  G XAPI
"RTN","HMPDJFS",37,0)
 . N LOC
"RTN","HMPDJFS",38,0)
 . S LOC=$$PUTSUB^HMPDJFSP(.ARGS) ; Added ELSE for US4304
"RTN","HMPDJFS",39,0)
 . I $L(LOC) S ^TMP("HMPF",$J,1)="{""apiVersion"":""1.0"",""location"":"""_LOC_""""_$$PROGRESS_"}"
"RTN","HMPDJFS",40,0)
 I ARGS("command")="startOperationalDataExtract" D  G XAPI
"RTN","HMPDJFS",41,0)
 . N HMPX2,LOC
"RTN","HMPDJFS",42,0)
 . S ARGS("localId")="OPD"  ; use OPD to indicate "sync operational"
"RTN","HMPDJFS",43,0)
 . ; Next 2 lines added for US4304
"RTN","HMPDJFS",44,0)
 . S HMPX2="HMPFX~"_$G(HMPFHMP)_"~OPD"
"RTN","HMPDJFS",45,0)
 . I $D(^XTMP(HMPX2)) S LOC="/hmp/subscription/operational data/"
"RTN","HMPDJFS",46,0)
 . E  S LOC=$$PUTSUB^HMPDJFSP(.ARGS) ; Added ELSE for US4304
"RTN","HMPDJFS",47,0)
 . I $L(LOC) S ^TMP("HMPF",$J,1)="{""apiVersion"":""1.0"",""location"":"""_LOC_"""}"
"RTN","HMPDJFS",48,0)
 I ARGS("command")="getPtUpdates" D  G XAPI
"RTN","HMPDJFS",49,0)
 . D GETSUB^HMPDJFSG(HMPFRSP,.ARGS)
"RTN","HMPDJFS",50,0)
 I ARGS("command")="resetAllSubscriptions" D  G XAPI
"RTN","HMPDJFS",51,0)
 . D RESETSVR(.ARGS)
"RTN","HMPDJFS",52,0)
 . S ^TMP("HMPF",$J,1)="{""apiVersion"":""1.0"",""removed"":""true""}"
"RTN","HMPDJFS",53,0)
 I ARGS("command")="checkHealth" D  G XAPI
"RTN","HMPDJFS",54,0)
 . D HLTHCHK^HMPDJFSM(.ARGS)
"RTN","HMPDJFS",55,0)
 ; else
"RTN","HMPDJFS",56,0)
 D SETERR("command not recognized")  ; should not get this far
"RTN","HMPDJFS",57,0)
 ;
"RTN","HMPDJFS",58,0)
XAPI ; end select case
"RTN","HMPDJFS",59,0)
 ;
"RTN","HMPDJFS",60,0)
 I HMPFLOG=2 D LOGRSP(HMPFHMP)
"RTN","HMPDJFS",61,0)
 Q
"RTN","HMPDJFS",62,0)
 ;
"RTN","HMPDJFS",63,0)
LOGREQ(SRV,ARGS) ; Log the request
"RTN","HMPDJFS",64,0)
 I $D(^XTMP("HMPFLOG",0,"start")) D  Q:'$$GET^XPAR("ALL","HMP LOG LEVEL")
"RTN","HMPDJFS",65,0)
 . N ELAPSED S ELAPSED=$$HDIFF^XLFDT($H,^XTMP("HMPFLOG",0,"start"),2)
"RTN","HMPDJFS",66,0)
 . I ELAPSED>$$GET^XPAR("ALL","HMP LOG LIMIT") D PUT^XPAR("SYS","HMP LOG LEVEL",1,0)
"RTN","HMPDJFS",67,0)
 E  D
"RTN","HMPDJFS",68,0)
 . D NEWXTMP("HMPFLOG",1,"HMP Freshness Logging")
"RTN","HMPDJFS",69,0)
 . S ^XTMP("HMPFLOG",0,"start")=$H
"RTN","HMPDJFS",70,0)
 S ^XTMP("HMPFLOG",0,"total")=$G(^XTMP("HMPFLOG",0,"total"))+1
"RTN","HMPDJFS",71,0)
 S:'$L(SRV) SRV="unknown"
"RTN","HMPDJFS",72,0)
 N SEQ
"RTN","HMPDJFS",73,0)
 S SEQ=+$G(^XTMP("HMPFLOG",SRV))+1,^XTMP("HMPFLOG",SRV)=SEQ
"RTN","HMPDJFS",74,0)
 M ^XTMP("HMPFLOG",SRV,SEQ,"request")=ARGS
"RTN","HMPDJFS",75,0)
 S HMPFLOG("seq")=SEQ
"RTN","HMPDJFS",76,0)
 Q
"RTN","HMPDJFS",77,0)
LOGRSP(SRV) ; Log the response
"RTN","HMPDJFS",78,0)
 M ^XTMP("HMPFLOG",SRV,HMPFLOG("seq"),"response")=^TMP("HMPF",$J)
"RTN","HMPDJFS",79,0)
 Q
"RTN","HMPDJFS",80,0)
 ;
"RTN","HMPDJFS",81,0)
 ; delete a patient subscription
"RTN","HMPDJFS",82,0)
DELSUB(RSP,ARGS) ; cancel a subscription
"RTN","HMPDJFS",83,0)
 ; DELETE with: /hmp/subscription/{hmpSrvId}/patient/{pid}
"RTN","HMPDJFS",84,0)
 ; remove patient from HMP SUBSCRIPTION file
"RTN","HMPDJFS",85,0)
 ; remove ^XTMP(HMPX and ^XTMP(HMPH nodes
"RTN","HMPDJFS",86,0)
 ; look ahead (from lastId) and remove any nodes for the patient
"RTN","HMPDJFS",87,0)
 N DFN,HMPSRV,BATCH,HMPSRVID
"RTN","HMPDJFS",88,0)
 K ^TMP("HMPF",$J)
"RTN","HMPDJFS",89,0)
 S DFN=$$DFN(ARGS("pid")) Q:$D(HMPFERR)
"RTN","HMPDJFS",90,0)
 S HMPSRV=ARGS("hmpSrvId")
"RTN","HMPDJFS",91,0)
 S BATCH="HMPFX~"_HMPSRV_"~"_DFN
"RTN","HMPDJFS",92,0)
 L +^XTMP("HMPFP",DFN,HMPSRV):20 E  D SETERR("unable to get lock") Q
"RTN","HMPDJFS",93,0)
 ; if extract still running, it should remove itself when it finishes
"RTN","HMPDJFS",94,0)
 K ^XTMP("HMPFX~"_HMPSRV_"~"_DFN) ; kill extract nodes
"RTN","HMPDJFS",95,0)
 K ^XTMP("HMPFH~"_HMPSRV_"~"_DFN) ; kill held freshness updates
"RTN","HMPDJFS",96,0)
 ; remove all nodes for this patient between "last" and "next"
"RTN","HMPDJFS",97,0)
 ; loop forward from "last" in ^XTMP("HMPFP",0,hmpSrv) and remove nodes for this DFN
"RTN","HMPDJFS",98,0)
 K ^XTMP("HMPFP",DFN,HMPSRV)      ; kill subscription
"RTN","HMPDJFS",99,0)
 D DELPT(DFN,HMPSRV)
"RTN","HMPDJFS",100,0)
 L -^XTMP("HMPFP",DFN,HMPSRV)
"RTN","HMPDJFS",101,0)
 S RSP="{""apiVersion"":""1.0"",""success"":""true""}" ; if successful
"RTN","HMPDJFS",102,0)
 Q
"RTN","HMPDJFS",103,0)
DELPT(DFN,SRV) ; delete patient DFN for server SRV
"RTN","HMPDJFS",104,0)
 N DIK,DA
"RTN","HMPDJFS",105,0)
 S DA(1)=$O(^HMP(800000,"B",SRV,"")) Q:'DA(1)
"RTN","HMPDJFS",106,0)
 S DA=DFN Q:'DA
"RTN","HMPDJFS",107,0)
 S DIK="^HMP(800000,"_DA(1)_",1,"
"RTN","HMPDJFS",108,0)
 D ^DIK
"RTN","HMPDJFS",109,0)
 Q
"RTN","HMPDJFS",110,0)
 ;
"RTN","HMPDJFS",111,0)
 ; --- post freshness updates (internal to VistA)
"RTN","HMPDJFS",112,0)
 ;
"RTN","HMPDJFS",113,0)
POST(DFN,TYPE,ID,ACT,SERVER,NODES) ; adds new freshness item, return DT-seq
"RTN","HMPDJFS",114,0)
 ; if initializing use: ^XTMP("HMPFH-hmpserverid-dfn",seq#)    -hold
"RTN","HMPDJFS",115,0)
 ;       otherwise use: ^XTMP("HMPFS-hmpserverid-date",seq#)   -stream
"RTN","HMPDJFS",116,0)
 ;
"RTN","HMPDJFS",117,0)
 ; loop through subscribing streams for this patient
"RTN","HMPDJFS",118,0)
 ; if patient is initialized for an hmp server send events directly to stream
"RTN","HMPDJFS",119,0)
 ; otherwise, events go to temporary holding area
"RTN","HMPDJFS",120,0)
 ; initial extracts always sent directly to stream
"RTN","HMPDJFS",121,0)
 N HMPSRV,INIT,STREAM,DATE,SEQ,CNT
"RTN","HMPDJFS",122,0)
 S DATE=$$DT^XLFDT
"RTN","HMPDJFS",123,0)
 S HMPSRV="" F  S HMPSRV=$O(^HMP(800000,"AITEM",DFN,HMPSRV)) Q:'$L(HMPSRV)  D
"RTN","HMPDJFS",124,0)
 . I SERVER'="",HMPSRV'=SERVER Q
"RTN","HMPDJFS",125,0)
 . I '$D(^HMP(800000,"AITEM",DFN,HMPSRV)) Q          ; patient not subscribed
"RTN","HMPDJFS",126,0)
 . S INIT=(^HMP(800000,"AITEM",DFN,HMPSRV)=2),CNT=1  ; 2 means patient initialized
"RTN","HMPDJFS",127,0)
 . I $E(TYPE,1,4)="sync" S INIT=1                 ; sync* goes to main stream
"RTN","HMPDJFS",128,0)
 . I TYPE="syncDomain" S CNT=+$P(ID,":",3) S:CNT<1 CNT=1 ; CNT must be >0
"RTN","HMPDJFS",129,0)
 . S STREAM=$S(INIT:"HMPFS~",1:"HMPFH~")_HMPSRV_"~"_$S(INIT:DATE,1:DFN)
"RTN","HMPDJFS",130,0)
 . I '$D(^XTMP(STREAM)) D NEWXTMP(STREAM,8,"HMP Freshness Stream")
"RTN","HMPDJFS",131,0)
 . L +^XTMP(STREAM):5 E  S $EC=",Uno lock obtained," Q  ; throw error
"RTN","HMPDJFS",132,0)
 . S SEQ=$G(^XTMP(STREAM,"last"),0)+CNT
"RTN","HMPDJFS",133,0)
 . S ^XTMP(STREAM,SEQ)=DFN_U_TYPE_U_ID_U_$G(ACT)_U_$P($H,",",2)
"RTN","HMPDJFS",134,0)
 . S ^XTMP(STREAM,"last")=SEQ
"RTN","HMPDJFS",135,0)
 . L -^XTMP(STREAM)
"RTN","HMPDJFS",136,0)
 . ; NODES(hmpserverid)=streamDate^sequence -- optionally returned
"RTN","HMPDJFS",137,0)
 . S NODES($P(STREAM,"~",2))=$S(INIT:DATE,1:0)_U_SEQ
"RTN","HMPDJFS",138,0)
 Q
"RTN","HMPDJFS",139,0)
 ;
"RTN","HMPDJFS",140,0)
NEWXTMP(NODE,DAYS,DESC) ; Set a new node in ^XTMP
"RTN","HMPDJFS",141,0)
 K ^XTMP(NODE)
"RTN","HMPDJFS",142,0)
 S ^XTMP(NODE,0)=$$HTFM^XLFDT(+$H+DAYS)_U_$$HTFM^XLFDT(+$H)_U_DESC
"RTN","HMPDJFS",143,0)
 Q
"RTN","HMPDJFS",144,0)
PIDS(DFN) ; return string containing patient id's ready for JSON
"RTN","HMPDJFS",145,0)
 ; expects HMPFSYS, HMPFHMP
"RTN","HMPDJFS",146,0)
 Q:'DFN ""
"RTN","HMPDJFS",147,0)
 ;
"RTN","HMPDJFS",148,0)
 N X
"RTN","HMPDJFS",149,0)
 S X=",""pid"":"""_$$PID(DFN)_""""
"RTN","HMPDJFS",150,0)
 S X=X_",""systemId"":"""_HMPSYS_""""
"RTN","HMPDJFS",151,0)
 S X=X_",""localId"":"""_DFN_""""
"RTN","HMPDJFS",152,0)
 S X=X_",""icn"":"""_$$GETICN^MPIF001(DFN)_"""" ; US4194
"RTN","HMPDJFS",153,0)
 Q X
"RTN","HMPDJFS",154,0)
 ;
"RTN","HMPDJFS",155,0)
PID(DFN) ; return most likely PID (ICN or SYS;DFN)
"RTN","HMPDJFS",156,0)
 Q:'DFN ""
"RTN","HMPDJFS",157,0)
 I '$D(HMPSYS) S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPDJFS",158,0)
 Q HMPSYS_";"_DFN            ; otherwise use SysId;DFN
"RTN","HMPDJFS",159,0)
 ;
"RTN","HMPDJFS",160,0)
DFN(PID) ; return the DFN given the PID (ICN or SYS;DFN)
"RTN","HMPDJFS",161,0)
 N DFN
"RTN","HMPDJFS",162,0)
 S PID=$TR(PID,":",";")
"RTN","HMPDJFS",163,0)
 I PID'[";" D  Q DFN  ; treat as ICN
"RTN","HMPDJFS",164,0)
 . S DFN=$$GETDFN^MPIF001(PID)
"RTN","HMPDJFS",165,0)
 . I DFN<0 D SETERR($P(DFN,"^",2))
"RTN","HMPDJFS",166,0)
 ; otherwise
"RTN","HMPDJFS",167,0)
 I $P(PID,";")'=$$GET^XPAR("SYS","HMP SYSTEM NAME") D SETERR("DFN unknown to this system") Q 0
"RTN","HMPDJFS",168,0)
 Q $P(PID,";",2)
"RTN","HMPDJFS",169,0)
 ;
"RTN","HMPDJFS",170,0)
PROGRESS(LASTITM) ; set the node in REF with progress properties
"RTN","HMPDJFS",171,0)
 ; expects HMPFHMP,HMPSYS
"RTN","HMPDJFS",172,0)
 N RSLT,HMPIEN,CNT,STS,TS,DFN,FIRST
"RTN","HMPDJFS",173,0)
 S HMPIEN=$O(^HMP(800000,"B",HMPFHMP,0)) Q:'HMPIEN ""
"RTN","HMPDJFS",174,0)
 S CNT=0,RSLT=""
"RTN","HMPDJFS",175,0)
 F STS=0,1 D  ; 0=uninitialized, 1=initializing
"RTN","HMPDJFS",176,0)
 . S FIRST=1
"RTN","HMPDJFS",177,0)
 . S RSLT=$S(STS=0:",""waitingPids"":[",1:RSLT_"],""processingPids"":[")
"RTN","HMPDJFS",178,0)
 . S TS=0 F  S TS=$O(^HMP(800000,HMPIEN,1,"AP",STS,TS)) Q:'TS  D  Q:CNT>99
"RTN","HMPDJFS",179,0)
 . . S DFN=0 F  S DFN=$O(^HMP(800000,HMPIEN,1,"AP",STS,TS,DFN)) Q:'DFN  D
"RTN","HMPDJFS",180,0)
 . . . S CNT=CNT+1
"RTN","HMPDJFS",181,0)
 . . . S RSLT=RSLT_$S(FIRST=1:"",1:",")_""""_HMPSYS_";"_DFN_""""
"RTN","HMPDJFS",182,0)
 . . . S FIRST=0
"RTN","HMPDJFS",183,0)
 S RSLT=RSLT_"]"
"RTN","HMPDJFS",184,0)
 ;
"RTN","HMPDJFS",185,0)
 N STRM,STRMDT,CURRDT
"RTN","HMPDJFS",186,0)
 I $G(LASTITM)="" S LASTITM=$P(^HMP(800000,HMPIEN,0),U,2)
"RTN","HMPDJFS",187,0)
 I $L(LASTITM,"-")<2 S LASTITM=$$DT^XLFDT_"-"_+LASTITM
"RTN","HMPDJFS",188,0)
 S STRMDT=$P(LASTITM,"-"),CURRDT=$$DT^XLFDT,SEQ=$P(LASTITM,"-",2)
"RTN","HMPDJFS",189,0)
 S CNT=0 F  D  Q:$$FMDIFF^XLFDT(STRMDT,CURRDT,1)'<0
"RTN","HMPDJFS",190,0)
 . S STRM="HMPFS~"_HMPFHMP_"~"_STRMDT
"RTN","HMPDJFS",191,0)
 . S CNT=CNT+$G(^XTMP(STRM,"last"))-SEQ
"RTN","HMPDJFS",192,0)
 . S STRMDT=$$FMADD^XLFDT(STRMDT,1),SEQ=0
"RTN","HMPDJFS",193,0)
 S RSLT=RSLT_",""remainingObjects"":"_CNT
"RTN","HMPDJFS",194,0)
 Q RSLT
"RTN","HMPDJFS",195,0)
 ;
"RTN","HMPDJFS",196,0)
 ; --- handle errors
"RTN","HMPDJFS",197,0)
 ;
"RTN","HMPDJFS",198,0)
SETERR(MSG) ; create error object in ^TMP("HMPFERR",$J) and set HMPFERR
"RTN","HMPDJFS",199,0)
 ; TODO: escape MSG for JSON
"RTN","HMPDJFS",200,0)
 S @HMPFRSP@(1)="{""apiVersion"":""1.0"",""error"":{""message"":"""_MSG_"""}}"
"RTN","HMPDJFS",201,0)
 S ^TMP("HMPFERR",$J,$H)=MSG
"RTN","HMPDJFS",202,0)
 S HMPFERR=1
"RTN","HMPDJFS",203,0)
 Q
"RTN","HMPDJFS",204,0)
 ;
"RTN","HMPDJFS",205,0)
DEBUG(MSG) ;
"RTN","HMPDJFS",206,0)
 S ^TMP("HMPDEBUG",$J,0)=$G(^TMP("HMPDEBUG",$J,0),0)+1
"RTN","HMPDJFS",207,0)
 I $D(MSG)'=1 M ^TMP("HMPDEBUG",$J,^TMP("HMPDEBUG",$J,0))=MSG Q
"RTN","HMPDJFS",208,0)
 S ^TMP("HMPDEBUG",$J,^TMP("HMPDEBUG",$J,0))=MSG
"RTN","HMPDJFS",209,0)
 Q
"RTN","HMPDJFS",210,0)
RESETSVR(ARGS) ;
"RTN","HMPDJFS",211,0)
 N DA,DIE,DIK,DR,IEN,SRV,SRVIEN,X
"RTN","HMPDJFS",212,0)
 S SRV=$G(ARGS("server")) I SRV="" Q
"RTN","HMPDJFS",213,0)
 S DA=$O(^HMP(800000,"B",SRV,"")) I DA'>0 Q
"RTN","HMPDJFS",214,0)
 S SRVIEN=DA
"RTN","HMPDJFS",215,0)
 L +^HMP(800000,SRVIEN):5 E  S $EC=",Uno lock obtained," Q
"RTN","HMPDJFS",216,0)
 ;delete operational data field
"RTN","HMPDJFS",217,0)
 S DIE="^HMP(800000,",DR=".03///@" D ^DIE
"RTN","HMPDJFS",218,0)
 S DA(1)=DA,DA=0
"RTN","HMPDJFS",219,0)
 ;delete patient multiple values
"RTN","HMPDJFS",220,0)
 S DIK="^HMP(800000,"_DA(1)_",1,"
"RTN","HMPDJFS",221,0)
 F  S DA=$O(^HMP(800000,DA(1),1,DA)) Q:DA'>0  D ^DIK
"RTN","HMPDJFS",222,0)
 ;kill server ^XTMP
"RTN","HMPDJFS",223,0)
 S X="HMPF" F  S X=$O(^XTMP(X)) Q:$E(X,1,4)'="HMPF"  D
"RTN","HMPDJFS",224,0)
 . I X[SRV K ^XTMP(X) I 1
"RTN","HMPDJFS",225,0)
 ;kill tidy node
"RTN","HMPDJFS",226,0)
 K ^XTMP("HMPFP","tidy",SRV)
"RTN","HMPDJFS",227,0)
 L -^HMP(800000,SRVIEN)
"RTN","HMPDJFS",228,0)
 Q
"RTN","HMPDJFS",229,0)
 ;
"RTN","HMPDJFS",230,0)
CLEARDOM(SVR,PAT) ;
"RTN","HMPDJFS",231,0)
 Q
"RTN","HMPDJFS",232,0)
 ;
"RTN","HMPDJFS",233,0)
CLEARPAT(SVR,PAT) ;
"RTN","HMPDJFS",234,0)
 I '$D(^XTMP("HMPFP",PAT,SVR)) Q
"RTN","HMPDJFS",235,0)
 ;do we need a check for patient initialized?
"RTN","HMPDJFS",236,0)
 K ^XTMP("HMPFP",PAT,SVR)
"RTN","HMPDJFS",237,0)
 Q
"RTN","HMPDJFS",238,0)
 ;
"RTN","HMPDJFS",239,0)
HMPSET(DA,NEW) ;
"RTN","HMPDJFS",240,0)
 N IEN,NAME
"RTN","HMPDJFS",241,0)
 S IEN=0 F  S IEN=$O(^HMP(800000,IEN)) Q:IEN'>0  D
"RTN","HMPDJFS",242,0)
 .S NAME=$P(^HMP(800000,IEN,0),U)
"RTN","HMPDJFS",243,0)
 .I $D(^HMP(800000,IEN,1,NEW(1)))>0 S ^HMP(800000,"AITEM",NEW(1),NAME)=NEW(2)
"RTN","HMPDJFS",244,0)
 Q
"RTN","HMPDJFS",245,0)
 ;
"RTN","HMPDJFS",246,0)
HMPKILL(DA,OLD) ;
"RTN","HMPDJFS",247,0)
 N NAME
"RTN","HMPDJFS",248,0)
 S NAME=$P($G(^HMP(800000,DA(1),0)),U) I NAME="" Q
"RTN","HMPDJFS",249,0)
 K ^HMP(800000,"AITEM",OLD(1),NAME)
"RTN","HMPDJFS",250,0)
 Q
"RTN","HMPDJFS",251,0)
 ;
"RTN","HMPDJFS",252,0)
HMPOSET(DA,NEW) ;
"RTN","HMPDJFS",253,0)
 N IEN,NAME
"RTN","HMPDJFS",254,0)
 S IEN=0 F  S IEN=$O(^HMP(800000,IEN)) Q:IEN'>0  D
"RTN","HMPDJFS",255,0)
 .S NAME=$P(^HMP(800000,IEN,0),U)
"RTN","HMPDJFS",256,0)
 .S ^HMP(800000,"AITEM","OPD",NAME)=NEW
"RTN","HMPDJFS",257,0)
 Q
"RTN","HMPDJFS",258,0)
 ;
"RTN","HMPDJFS",259,0)
HMPOKILL(DA) ;
"RTN","HMPDJFS",260,0)
 N NAME
"RTN","HMPDJFS",261,0)
 S NAME=$P($G(^HMP(800000,DA,0)),U) I NAME="" Q
"RTN","HMPDJFS",262,0)
 K ^HMP(800000,"AITEM","OPD",NAME)
"RTN","HMPDJFS",263,0)
 Q
"RTN","HMPDJFS",264,0)
KILL ; clear out all ^XTMP nodes
"RTN","HMPDJFS",265,0)
 N X
"RTN","HMPDJFS",266,0)
 S X="HMPF" F  S X=$O(^XTMP(X)) Q:$E(X,1,4)'="HMPF"  W !,X  K ^XTMP(X)
"RTN","HMPDJFS",267,0)
 Q
"RTN","HMPDJFS",268,0)
KILLSVR(SVR) ; clear out for specific machine
"RTN","HMPDJFS",269,0)
 N X
"RTN","HMPDJFS",270,0)
 S X="HMPF" F  S X=$O(^XTMP(X)) Q:$E(X,1,4)'="HMPF"  D
"RTN","HMPDJFS",271,0)
 . I X[SVR W !,X  K ^XTMP(X) I 1
"RTN","HMPDJFS",272,0)
 S X="" F  S X=$O(^XTMP("HMPFP",X)) Q:X=""  D
"RTN","HMPDJFS",273,0)
 . I $D(^XTMP("HMPFP",X,SVR)) K ^XTMP("HMPFP",X,SVR)
"RTN","HMPDJFS",274,0)
 Q
"RTN","HMPDJFS1")
0^148^B1887278
"RTN","HMPDJFS1",1,0)
HMPDJFS1 ;ASMR/CPC,hrubovcak - for Extract and Freshness Stream;Oct 15, 2015 18:39:51
"RTN","HMPDJFS1",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJFS1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFS1",4,0)
 ;
"RTN","HMPDJFS1",5,0)
 Q
"RTN","HMPDJFS1",6,0)
 ; continuation code for HMPDJFSP
"RTN","HMPDJFS1",7,0)
 ;
"RTN","HMPDJFS1",8,0)
BACKDOM ; task patient domain to the background, called from HMPDJFSP
"RTN","HMPDJFS1",9,0)
 N ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","HMPDJFS1",10,0)
 S ZTRTN="DQBACKDM^HMPDJFS1",ZTIO="",ZTDTH=$H
"RTN","HMPDJFS1",11,0)
 S ZTSAVE("HMPBATCH")="",ZTSAVE("HMPFDFN")=""
"RTN","HMPDJFS1",12,0)
 S ZTSAVE("HMPFDOMI")="",ZTSAVE("ZTQUEUED")="",ZTSAVE("HMPMETA")="",ZTSAVE("HMPFDOM(")=""
"RTN","HMPDJFS1",13,0)
 S ZTSAVE("HMPFZTSK")=""
"RTN","HMPDJFS1",14,0)
 S ZTSAVE("HMPENVIR(")=""  ; environment information
"RTN","HMPDJFS1",15,0)
 S ZTSAVE("HMPSTMP")=""  ; Operational data stamptime US6734
"RTN","HMPDJFS1",16,0)
 S ZTDESC="Build HMP subdomains for a patient"
"RTN","HMPDJFS1",17,0)
 D ^%ZTLOAD
"RTN","HMPDJFS1",18,0)
 I $G(ZTSK) S ^XTMP(HMPBATCH,0,"task","b",ZTSK)="" Q
"RTN","HMPDJFS1",19,0)
 ; no task, log error
"RTN","HMPDJFS1",20,0)
 D SETERR^HMPDJFS("Task not created")
"RTN","HMPDJFS1",21,0)
 Q
"RTN","HMPDJFS1",22,0)
 ;
"RTN","HMPDJFS1",23,0)
DQBACKDM ; TaskMan entry point
"RTN","HMPDJFS1",24,0)
 ; patient's domain has been "chunked"
"RTN","HMPDJFS1",25,0)
 N HMPFBJ S HMPFBJ=1  ; flag, background job
"RTN","HMPDJFS1",26,0)
 D DOMPT^HMPDJFSP(HMPFDOM(HMPFDOMI))
"RTN","HMPDJFS1",27,0)
 K ^XTMP(HMPBATCH,0,"task","b",ZTSK)
"RTN","HMPDJFS1",28,0)
 Q
"RTN","HMPDJFS1",29,0)
 ;
"RTN","HMPDJFSD")
0^49^B6635230
"RTN","HMPDJFSD",1,0)
HMPDJFSD ;SLC/KCM,ASMR/RRB -- Domain Lists for Extract and Freshness Stream;Oct 15, 2015 18:39:51
"RTN","HMPDJFSD",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJFSD",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSD",4,0)
 ;
"RTN","HMPDJFSD",5,0)
 ; DE2818/RRB: SQA findings 1st 3 lines
"RTN","HMPDJFSD",6,0)
 ;
"RTN","HMPDJFSD",7,0)
 Q
"RTN","HMPDJFSD",8,0)
 ;
"RTN","HMPDJFSD",9,0)
PTDOMS(LIST) ; load default patient domains (put in parameter?); cpc modded order 9/29/2015
"RTN","HMPDJFSD",10,0)
 ;;order
"RTN","HMPDJFSD",11,0)
 ;;vital
"RTN","HMPDJFSD",12,0)
 ;;lab
"RTN","HMPDJFSD",13,0)
 ;;med
"RTN","HMPDJFSD",14,0)
 ;;document
"RTN","HMPDJFSD",15,0)
 ;;allergy
"RTN","HMPDJFSD",16,0)
 ;;auxiliary
"RTN","HMPDJFSD",17,0)
 ;;appointment
"RTN","HMPDJFSD",18,0)
 ;;diagnosis
"RTN","HMPDJFSD",19,0)
 ;;visit
"RTN","HMPDJFSD",20,0)
 ;;factor
"RTN","HMPDJFSD",21,0)
 ;;immunization
"RTN","HMPDJFSD",22,0)
 ;;obs
"RTN","HMPDJFSD",23,0)
 ;;problem
"RTN","HMPDJFSD",24,0)
 ;;procedure
"RTN","HMPDJFSD",25,0)
 ;;consult
"RTN","HMPDJFSD",26,0)
 ;;image
"RTN","HMPDJFSD",27,0)
 ;;surgery
"RTN","HMPDJFSD",28,0)
 ;;task
"RTN","HMPDJFSD",29,0)
 ;;ptf
"RTN","HMPDJFSD",30,0)
 ;;exam
"RTN","HMPDJFSD",31,0)
 ;;cpt
"RTN","HMPDJFSD",32,0)
 ;;education
"RTN","HMPDJFSD",33,0)
 ;;pov
"RTN","HMPDJFSD",34,0)
 ;;skin
"RTN","HMPDJFSD",35,0)
 ;;treatment
"RTN","HMPDJFSD",36,0)
 ;;roadtrip
"RTN","HMPDJFSD",37,0)
 ;;patient
"RTN","HMPDJFSD",38,0)
 ;;zzzzz
"RTN","HMPDJFSD",39,0)
 ;
"RTN","HMPDJFSD",40,0)
 ;;mh
"RTN","HMPDJFSD",41,0)
 ;
"RTN","HMPDJFSD",42,0)
 N I,X
"RTN","HMPDJFSD",43,0)
 F I=1:1 S X=$P($T(PTDOMS+I),";;",2,99) Q:X="zzzzz"  S LIST(I)=X
"RTN","HMPDJFSD",44,0)
 Q
"RTN","HMPDJFSD",45,0)
 ;
"RTN","HMPDJFSD",46,0)
OPDOMS(LIST) ; load default operational domains (put in parameter?)
"RTN","HMPDJFSD",47,0)
 ;;asu-class;^USR(8930)
"RTN","HMPDJFSD",48,0)
 ;;asu-rule;^USR(8930.1)
"RTN","HMPDJFSD",49,0)
 ;;category;^HMP(800000.11)
"RTN","HMPDJFSD",50,0)
 ;;charttab;^HMP(800000.11)
"RTN","HMPDJFSD",51,0)
 ;;displaygroup;^ORD(100.98)
"RTN","HMPDJFSD",52,0)
 ;;doc-def;^TIU(8925.1)
"RTN","HMPDJFSD",53,0)
 ;;labgroup;^LAB(64.5,1,1)
"RTN","HMPDJFSD",54,0)
 ;;labpanel;^LAB(60)
"RTN","HMPDJFSD",55,0)
 ;;location;^SC
"RTN","HMPDJFSD",56,0)
 ;;orderable;^ORD(101.43)
"RTN","HMPDJFSD",57,0)
 ;;page;^HMP(800000.11)
"RTN","HMPDJFSD",58,0)
 ;;pt-select;^DPT
"RTN","HMPDJFSD",59,0)
 ;;personphoto;^HMP(800000.11)
"RTN","HMPDJFSD",60,0)
 ;;pointofcare;^HMP(800000.11)
"RTN","HMPDJFSD",61,0)
 ;;quick;^ORD(101.41)
"RTN","HMPDJFSD",62,0)
 ;;roster;^HMPROSTR
"RTN","HMPDJFSD",63,0)
 ;;route;^PS(51.2)
"RTN","HMPDJFSD",64,0)
 ;;schedule;^PS(51.1)
"RTN","HMPDJFSD",65,0)
 ;;team;^HMP(800000.11)
"RTN","HMPDJFSD",66,0)
 ;;teamposition;^HMP(800000.11)
"RTN","HMPDJFSD",67,0)
 ;;user;^VA(200)
"RTN","HMPDJFSD",68,0)
 ;;usertabprefs;^HMP(800000.11)
"RTN","HMPDJFSD",69,0)
 ;;viewdefdef;^HMP(800000.11)
"RTN","HMPDJFSD",70,0)
 ;;viewdefdefcoldefconfigtemplate;^HMP(800000.11)
"RTN","HMPDJFSD",71,0)
 ;;immunization;^AUTTIMM
"RTN","HMPDJFSD",72,0)
 ;;allergy-list;^GMRD(120.82)
"RTN","HMPDJFSD",73,0)
 ;;sign-symptom;^GMRD(120.83)
"RTN","HMPDJFSD",74,0)
 ;;vital-type;^GMRD(120.51)
"RTN","HMPDJFSD",75,0)
 ;;vital-qualifier;^GMRD(120.52)
"RTN","HMPDJFSD",76,0)
 ;;vital-category;^GMRD(120.53)
"RTN","HMPDJFSD",77,0)
 ;;zzzzz
"RTN","HMPDJFSD",78,0)
 ;
"RTN","HMPDJFSD",79,0)
 ;;problem-list;^LEX(757.01)
"RTN","HMPDJFSD",80,0)
 ;;clioterminology
"RTN","HMPDJFSD",81,0)
 ;;doc-action
"RTN","HMPDJFSD",82,0)
 ;;doc-status
"RTN","HMPDJFSD",83,0)
 ;
"RTN","HMPDJFSD",84,0)
 N I,X
"RTN","HMPDJFSD",85,0)
 F I=1:1 S X=$P($T(OPDOMS+I),";",3) Q:X="zzzzz"  S LIST(I)=X
"RTN","HMPDJFSD",86,0)
 Q
"RTN","HMPDJFSD",87,0)
 ;
"RTN","HMPDJFSG")
0^50^B216382035
"RTN","HMPDJFSG",1,0)
HMPDJFSG ;SLC/KCM,ASMR/RRB,CPC -- GET for Extract and Freshness Stream;Jan 29, 2016 13:05:21
"RTN","HMPDJFSG",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJFSG",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSG",4,0)
 ;
"RTN","HMPDJFSG",5,0)
 ; US3907 - Allow for jobId and rootJobId to be retrieved from ^XTMP.  JD - 1/20/15
"RTN","HMPDJFSG",6,0)
 ; DE2818 - SQA findings. Newed ERRCNT in BLDSERR+2.  RRB - 10/24/2015
"RTN","HMPDJFSG",7,0)
 ;
"RTN","HMPDJFSG",8,0)
 ; --- retrieve updates for an HMP server's subscriptions
"RTN","HMPDJFSG",9,0)
 ;
"RTN","HMPDJFSG",10,0)
GETSUB(HMPFRSP,ARGS) ; retrieve items from stream
"RTN","HMPDJFSG",11,0)
 ;      GET from: /hmp/subscription/{hmpSrvId}/{last}?limit={limit}
"RTN","HMPDJFSG",12,0)
 ; ARGS("last") : date-seq of last item retrieved (ex. 3131206-27)
"RTN","HMPDJFSG",13,0)
 ; ARGS("max")    : maximum number of items to return (default 99999)   *S68-JCH*
"RTN","HMPDJFSG",14,0)
 ; ARGS("maxSize"): approximate number bytes to return                  *S68-JCH*
"RTN","HMPDJFSG",15,0)
 ;
"RTN","HMPDJFSG",16,0)
 ; HMPFSYS : the id (hash) of the VistA system
"RTN","HMPDJFSG",17,0)
 ; HMPFHMP : the name of the HMP server 
"RTN","HMPDJFSG",18,0)
 ; HMPFSEQ : final sequence (becomes next LASTSEQ)
"RTN","HMPDJFSG",19,0)
 ; HMPFIDX : index to iterate from LASTSEQ to final sequence
"RTN","HMPDJFSG",20,0)
 ; HMPFLAST: used to clean up extracts prior to this
"RTN","HMPDJFSG",21,0)
 ; HMPFSTRM: the extract/freshness stream (HMPFS~hmpSrvId~fmDate) 
"RTN","HMPDJFSG",22,0)
 ; (most variables namespaced since calling variety of extracts)
"RTN","HMPDJFSG",23,0)
 ;
"RTN","HMPDJFSG",24,0)
 K ^TMP("HMPF",$J)
"RTN","HMPDJFSG",25,0)
 N HMPFSYS,HMPFSTRM,HMPFLAST,HMPFDT,HMPFLIM,HMPFMAX,HMPFSIZE,HMPCLFLG
"RTN","HMPDJFSG",26,0)
 N HMPFSEQ,HMPFIDX,HMPFCNT,SNODE,STYPE,HMPFERR,HMPDEL,HMPERR,HMPSTGET,HMPLITEM  ;*S68-JCH*, DE3502
"RTN","HMPDJFSG",27,0)
 S HMPFRSP=$NA(^TMP("HMPF",$J))
"RTN","HMPDJFSG",28,0)
 ; Next line added for US6734 - Make sure OPD metastamp data has been completed before fetching.
"RTN","HMPDJFSG",29,0)
 I '$$OPD^HMPMETA(HMPFHMP) S @HMPFRSP@(1)="{""warning"":""Staging is not complete yet!""}" Q
"RTN","HMPDJFSG",30,0)
 ;
"RTN","HMPDJFSG",31,0)
 S HMPFSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME") ; TODO -- switch to HMPSYS
"RTN","HMPDJFSG",32,0)
 S HMPFHMP("ien")=$O(^HMP(800000,"B",HMPFHMP,0))
"RTN","HMPDJFSG",33,0)
 S HMPFDT=$P($G(ARGS("lastUpdate")),"-")
"RTN","HMPDJFSG",34,0)
 S HMPFSEQ=+$P($G(ARGS("lastUpdate")),"-",2)
"RTN","HMPDJFSG",35,0)
 S HMPSTGET=$G(ARGS("getStatus"))
"RTN","HMPDJFSG",36,0)
 S HMPLITEM="" ; DE3502 initialise tracking of last item type
"RTN","HMPDJFSG",37,0)
 ; stream goes back a maximum of 8 days
"RTN","HMPDJFSG",38,0)
 I HMPFDT<$$FMADD^XLFDT($$DT^XLFDT,-8) S HMPFDT=$$HTFM^XLFDT(+$H-8),HMPFSEQ=0
"RTN","HMPDJFSG",39,0)
 S HMPFLAST=HMPFDT_"-"_HMPFSEQ
"RTN","HMPDJFSG",40,0)
 D LASTUPD(HMPFHMP,HMPFLAST)
"RTN","HMPDJFSG",41,0)
 D SETLIMIT(.ARGS)                            ; set HMPFLIM, HMPFMAX, HMPFSIZE ;*S68-PJH*
"RTN","HMPDJFSG",42,0)
 S HMPFLIM=$G(ARGS("max"),99999)
"RTN","HMPDJFSG",43,0)
 S HMPFSTRM="HMPFS~"_HMPFHMP_"~"_HMPFDT       ; stream identifier
"RTN","HMPDJFSG",44,0)
 I '$D(^XTMP(HMPFSTRM,"job",$J)) S ^XTMP(HMPFSTRM,"job",$J,"start")=$H
"RTN","HMPDJFSG",45,0)
 S ^XTMP(HMPFSTRM,"job",$J)=$H                ; record connection info
"RTN","HMPDJFSG",46,0)
 I '$$VERMATCH(HMPFHMP("ien"),$G(ARGS("extractSchema"))) D NOOP(HMPFLAST) QUIT
"RTN","HMPDJFSG",47,0)
 S HMPFCNT=0,HMPFIDX=HMPFSEQ
"RTN","HMPDJFSG",48,0)
 F  D  Q:HMPFSIZE'<HMPFMAX  D NXTSTRM Q:HMPFSTRM=""  ; *S68-JCH*
"RTN","HMPDJFSG",49,0)
 . F  S HMPFIDX=$O(^XTMP(HMPFSTRM,HMPFIDX)) Q:'HMPFIDX  D  Q:HMPFCNT'<HMPFLIM
"RTN","HMPDJFSG",50,0)
 ..  S SNODE=^XTMP(HMPFSTRM,HMPFIDX),STYPE=$P(SNODE,U,2)
"RTN","HMPDJFSG",51,0)
 ..  ;===JD START===
"RTN","HMPDJFSG",52,0)
 ..  K ARGS("hmp-fst") I $P(SNODE,U,4)="@" S ARGS("hmp-fst")=$P(SNODE,U,5)
"RTN","HMPDJFSG",53,0)
 ..  ;===JD END===
"RTN","HMPDJFSG",54,0)
 ..  S $P(^XTMP(HMPFSTRM,HMPFIDX),U,6)=$P($H,",",2) ; timestamp when sent
"RTN","HMPDJFSG",55,0)
 ..  I STYPE="syncNoop" Q                      ; skip, patient was unsubscribed
"RTN","HMPDJFSG",56,0)
 ..  I STYPE="syncDomain" D DOMITMS Q          ; add multiple extract items
"RTN","HMPDJFSG",57,0)
 ..  S HMPFSEQ=HMPFIDX
"RTN","HMPDJFSG",58,0)
 ..  I STYPE="syncCommand" D SYNCCMD(SNODE) Q  ; command to middle tier
"RTN","HMPDJFSG",59,0)
 ..  I STYPE="syncError" D SYNCERR(SNODE,.HMPERR) Q
"RTN","HMPDJFSG",60,0)
 ..  I STYPE="syncStart" D SYNCSTRT(SNODE) S HMPLITEM="SYNC" Q  ; begin initial extraction ;DE3502
"RTN","HMPDJFSG",61,0)
 ..  I STYPE="syncMeta" D SYNCMETA(SNODE) S HMPLITEM="SYNC" Q   ; US11019 - Build replacement syncstart ;DE3502
"RTN","HMPDJFSG",62,0)
 ..  I STYPE="syncDone" D SYNCDONE(SNODE) S HMPLITEM="SYNC" Q   ; end of initial extraction ;DE3502
"RTN","HMPDJFSG",63,0)
 ..  D FRESHITM(SNODE,.HMPDEL,.HMPERR) S HMPLITEM="FRESH"       ; otherwise, freshness item ;DE3502
"RTN","HMPDJFSG",64,0)
 Q:$G(HMPFERR)
"RTN","HMPDJFSG",65,0)
 D FINISH(.HMPDEL,.HMPERR)
"RTN","HMPDJFSG",66,0)
 ;Check if HMP GLOBAL USAGE MONITOR mail message is required - US8228
"RTN","HMPDJFSG",67,0)
 D CHECK^HMPMETA(HMPFHMP) ; US8228
"RTN","HMPDJFSG",68,0)
 Q
"RTN","HMPDJFSG",69,0)
DOMITMS ; loop thru extract items, OFFSET is last sent
"RTN","HMPDJFSG",70,0)
 ; expects HMPFSTRM,HMPFIDX,HMPFHMP,HMPFSYS
"RTN","HMPDJFSG",71,0)
 ; changes HMPFSEQ,HMPFCNT,HMPFSIZE as each item added  ; *S68-JCH*
"RTN","HMPDJFSG",72,0)
 N X,OFFSET,DFN,PIDS,DOMAIN,TASK,BATCH,COUNT,ITEMNUM,DOMSIZE,SECSIZE
"RTN","HMPDJFSG",73,0)
 S X=^XTMP(HMPFSTRM,HMPFIDX),DFN=$P(X,U),X=$P(X,U,3)
"RTN","HMPDJFSG",74,0)
 S PIDS=$S(DFN:$$PIDS^HMPDJFS(DFN),1:"")
"RTN","HMPDJFSG",75,0)
 S DOMAIN=$P(X,":")               ; domain{#sectionNumber}
"RTN","HMPDJFSG",76,0)
 S TASK=$P(X,":",2)               ; task number in ^XTMP
"RTN","HMPDJFSG",77,0)
 S COUNT=$P(X,":",3)              ; count in this section
"RTN","HMPDJFSG",78,0)
 S DOMSIZE=$P(X,":",4)            ; estimated total for the domain
"RTN","HMPDJFSG",79,0)
 S SECSIZE=$P(X,":",5)            ; section size (for operational)
"RTN","HMPDJFSG",80,0)
 S BATCH="HMPFX~"_HMPFHMP_"~"_DFN ; extract node in ^XTMP
"RTN","HMPDJFSG",81,0)
 S OFFSET=COUNT-(HMPFIDX-HMPFSEQ)
"RTN","HMPDJFSG",82,0)
 F  S OFFSET=$O(^XTMP(BATCH,TASK,DOMAIN,OFFSET)) Q:'OFFSET  D  Q:HMPFCNT'<HMPFLIM
"RTN","HMPDJFSG",83,0)
 . ;;PJH;;S HMPFCNT=HMPFCNT+1            ; increment the count of returned items
"RTN","HMPDJFSG",84,0)
 . S HMPFSEQ=HMPFSEQ+1            ; increment the sequence number in the stream
"RTN","HMPDJFSG",85,0)
 . S HMPFSIZE=$$INCITEM($P(DOMAIN,"#"))  ;                  *S68-JCH*
"RTN","HMPDJFSG",86,0)
 . S ITEMNUM=OFFSET+($P(DOMAIN,"#",2)*SECSIZE)
"RTN","HMPDJFSG",87,0)
 . M ^TMP("HMPF",$J,HMPFCNT)=^XTMP(BATCH,TASK,DOMAIN,OFFSET)
"RTN","HMPDJFSG",88,0)
 . ;S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER(DOMAIN,PIDS,$S('COUNT:0,1:ITEMNUM),+DOMSIZE)
"RTN","HMPDJFSG",89,0)
 . S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER(DOMAIN,PIDS,$S('COUNT:0,1:ITEMNUM),+DOMSIZE,1)  ; *S68-JCH*
"RTN","HMPDJFSG",90,0)
 . S HMPLITEM="SYNC",HMPCLFLG=0 ; DE3502
"RTN","HMPDJFSG",91,0)
 Q
"RTN","HMPDJFSG",92,0)
MIDXTRCT() ; Return true if mid-extract
"RTN","HMPDJFSG",93,0)
 ; from GETSUB expects HMPFSTRM,HMPFSEQ
"RTN","HMPDJFSG",94,0)
 I 'HMPFSEQ Q 0
"RTN","HMPDJFSG",95,0)
 I '$D(^XTMP(HMPFSTRM,HMPFSEQ)) Q 1                  ; middle of extract
"RTN","HMPDJFSG",96,0)
 I $P(^XTMP(HMPFSTRM,HMPFSEQ),U,2)="syncDomain" Q 1  ; just starting extract
"RTN","HMPDJFSG",97,0)
 Q 0
"RTN","HMPDJFSG",98,0)
 ;
"RTN","HMPDJFSG",99,0)
NXTSTRM ; Reset variables for next date in this HMP stream
"RTN","HMPDJFSG",100,0)
 ; from GETSUB expects HMPFSTRM,HMPFDT,HMPFIDX
"RTN","HMPDJFSG",101,0)
 ; HMPFSTRM set to "" if no next stream
"RTN","HMPDJFSG",102,0)
 ; HMPFIDX  set to 0 if next stream, or left as is
"RTN","HMPDJFSG",103,0)
 ; HMPFDT   set to last date actually used
"RTN","HMPDJFSG",104,0)
 N NEXTDT,DONE
"RTN","HMPDJFSG",105,0)
 S NEXTDT=HMPFDT,DONE=0
"RTN","HMPDJFSG",106,0)
 F  D  Q:DONE
"RTN","HMPDJFSG",107,0)
 . S NEXTDT=$$FMADD^XLFDT(NEXTDT,1)
"RTN","HMPDJFSG",108,0)
 . I NEXTDT>$$DT^XLFDT S HMPFSTRM="" S DONE=1 Q
"RTN","HMPDJFSG",109,0)
 . S $P(HMPFSTRM,"~",3)=NEXTDT
"RTN","HMPDJFSG",110,0)
 . I '+$O(^XTMP(HMPFSTRM,0)) Q  ; nothing here, try next date
"RTN","HMPDJFSG",111,0)
 . S HMPFDT=NEXTDT,HMPFIDX=0,HMPFSEQ=0,DONE=1
"RTN","HMPDJFSG",112,0)
 Q
"RTN","HMPDJFSG",113,0)
 ;
"RTN","HMPDJFSG",114,0)
SETLIMIT(ARGS) ; sets HMPFLIM, HMPFMAX, HMPFSIZE variables  *BEGIN*S68-JCH*
"RTN","HMPDJFSG",115,0)
 I $G(ARGS("maxSize")) D  Q
"RTN","HMPDJFSG",116,0)
 . S HMPFLIM="s"
"RTN","HMPDJFSG",117,0)
 . S HMPFMAX=ARGS("maxSize")
"RTN","HMPDJFSG",118,0)
 . D GETLST^XPAR(.HMPFSIZE,"PKG","HMP DOMAIN SIZES","I")
"RTN","HMPDJFSG",119,0)
 . S HMPFSIZE=0
"RTN","HMPDJFSG",120,0)
 ; otherwise
"RTN","HMPDJFSG",121,0)
 S HMPFLIM="c"
"RTN","HMPDJFSG",122,0)
 S HMPFMAX=$G(ARGS("max"),99999)
"RTN","HMPDJFSG",123,0)
 S HMPFSIZE=0
"RTN","HMPDJFSG",124,0)
 Q
"RTN","HMPDJFSG",125,0)
 ;
"RTN","HMPDJFSG",126,0)
INCITEM(DOMAIN) ; increment counters as item added *BEGIN*S68-JCH*
"RTN","HMPDJFSG",127,0)
 S HMPFCNT=HMPFCNT+1
"RTN","HMPDJFSG",128,0)
 I HMPFLIM="s" Q HMPFSIZE+$G(HMPFSIZE(DOMAIN),1200)
"RTN","HMPDJFSG",129,0)
 I HMPFLIM="c" Q HMPFCNT
"RTN","HMPDJFSG",130,0)
 Q 0
"RTN","HMPDJFSG",131,0)
 ;                                                     *END*S68-JCH*
"RTN","HMPDJFSG",132,0)
 ;
"RTN","HMPDJFSG",133,0)
FINISH(HMPDEL,HMPERR) ;reset the FIRST object delimiter, add header and tail
"RTN","HMPDJFSG",134,0)
 ; expects HMPFCNT,HMPFDT,HMPFSEQ,HMPFHMP,HMPFLAST
"RTN","HMPDJFSG",135,0)
 N CLOSE,I,START,TEXT,UID,X,II
"RTN","HMPDJFSG",136,0)
 S X=$G(^TMP("HMPF",$J,1,.3))
"RTN","HMPDJFSG",137,0)
 I $E(X,1,2)="}," S X=$E(X,3,$L(X)),^TMP("HMPF",$J,1,.3)=X
"RTN","HMPDJFSG",138,0)
 S ^TMP("HMPF",$J,.5)=$$APIHDR(HMPFCNT,HMPFDT_"-"_HMPFSEQ)
"RTN","HMPDJFSG",139,0)
 I $D(HMPERR) D
"RTN","HMPDJFSG",140,0)
 .S CLOSE=$S(HMPFCNT:"},",1:""),START=1
"RTN","HMPDJFSG",141,0)
 .S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)=CLOSE_"{""error"":["
"RTN","HMPDJFSG",142,0)
 .S I=0 F  S I=$O(HMPERR(I)) Q:I'>0  D
"RTN","HMPDJFSG",143,0)
 ..S TEXT=HMPERR(I)
"RTN","HMPDJFSG",144,0)
 ..S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)=$S(START:"",1:",")_TEXT S START=0
"RTN","HMPDJFSG",145,0)
 .S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)="]"
"RTN","HMPDJFSG",146,0)
 ; operational sync item or patient
"RTN","HMPDJFSG",147,0)
 ; Check for closing flag & HMPFCNT and if it doesn't exist add a closing brace, always close array
"RTN","HMPDJFSG",148,0)
 S ^TMP("HMPF",$J,HMPFCNT+1)=$S(HMPFCNT&('$G(HMPCLFLG)):"}",1:"")_"]",HMPFCNT=HMPFCNT+1
"RTN","HMPDJFSG",149,0)
 ; modified
"RTN","HMPDJFSG",150,0)
 I $G(HMPSTGET)="true" D  ; true if "getStatus" argument passed in
"RTN","HMPDJFSG",151,0)
 . S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)=",""syncStatii"":[",START=1
"RTN","HMPDJFSG",152,0)
 . S I=0 F  S I=$O(^HMP(800000,I)) Q:+I=0  D
"RTN","HMPDJFSG",153,0)
 . . I $P($G(^HMP(800000,I,0)),"^",1)=HMPFHMP D
"RTN","HMPDJFSG",154,0)
 . . . S II=0 F  S II=$O(^HMP(800000,I,1,II)) Q:+II=0  D
"RTN","HMPDJFSG",155,0)
 . . . . S TEXT="{""pid"":"_II_",""status"":"_$P(^HMP(800000,I,1,II,0),"^",2)_"}"
"RTN","HMPDJFSG",156,0)
 . . . . S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)=$S(START:"",1:",")_TEXT S START=0
"RTN","HMPDJFSG",157,0)
 . S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)="]"
"RTN","HMPDJFSG",158,0)
 ;
"RTN","HMPDJFSG",159,0)
 S ^TMP("HMPF",$J,HMPFCNT+1)="}}"
"RTN","HMPDJFSG",160,0)
 ; remove any ^XTMP nodes that have been successfully sent based on LAST
"RTN","HMPDJFSG",161,0)
 N DATE,SEQ,LASTDT,LASTSEQ,STRM,LSTRM,RSTRM
"RTN","HMPDJFSG",162,0)
 S LASTDT=+$P(HMPFLAST,"-"),LASTSEQ=+$P(HMPFLAST,"-",2)
"RTN","HMPDJFSG",163,0)
 S RSTRM="HMPFS~"_HMPFHMP_"~",LSTRM=$L(RSTRM),STRM=RSTRM
"RTN","HMPDJFSG",164,0)
 F  S STRM=$O(^XTMP(STRM)) Q:'$L(STRM)  Q:$E(STRM,1,LSTRM)'=RSTRM  D
"RTN","HMPDJFSG",165,0)
 . S DATE=$P(STRM,"~",3) Q:DATE>LASTDT
"RTN","HMPDJFSG",166,0)
 . S SEQ=0 F  S SEQ=$O(^XTMP(STRM,"tidy",SEQ)) Q:'SEQ  Q:(DATE=LASTDT)&(SEQ>LASTSEQ)  D TIDYX(STRM,SEQ)
"RTN","HMPDJFSG",167,0)
 Q
"RTN","HMPDJFSG",168,0)
TIDYX(STREAM,SEQ) ; clean up extracts after they have been retrieved
"RTN","HMPDJFSG",169,0)
 ; from FINISH
"RTN","HMPDJFSG",170,0)
 N BATCH,DOMAIN,TASK
"RTN","HMPDJFSG",171,0)
 S BATCH=^XTMP(STREAM,"tidy",SEQ,"batch")
"RTN","HMPDJFSG",172,0)
 S DOMAIN=^XTMP(STREAM,"tidy",SEQ,"domain")
"RTN","HMPDJFSG",173,0)
 S TASK=^XTMP(STREAM,"tidy",SEQ,"task")
"RTN","HMPDJFSG",174,0)
 I DOMAIN="<done>" K ^XTMP(BATCH) I 1
"RTN","HMPDJFSG",175,0)
 E  K ^XTMP(BATCH,TASK,DOMAIN)
"RTN","HMPDJFSG",176,0)
 K ^XTMP(STREAM,"tidy",SEQ)
"RTN","HMPDJFSG",177,0)
 Q
"RTN","HMPDJFSG",178,0)
SYNCCMD(SEQNODE) ; Build syncCommand object and stick in ^TMP
"RTN","HMPDJFSG",179,0)
 ; expects: HMPSYS, HMPFCNT
"RTN","HMPDJFSG",180,0)
 N DFN,CMD,CMDJSON,ERR
"RTN","HMPDJFSG",181,0)
 S DFN=+SEQNODE
"RTN","HMPDJFSG",182,0)
 S CMD("command")=$P($P(SEQNODE,U,3),":")
"RTN","HMPDJFSG",183,0)
 S CMD("domain")=$P($P(SEQNODE,U,3),":",2)
"RTN","HMPDJFSG",184,0)
 S:DFN CMD("pid")=$$PID^HMPDJFS(DFN)
"RTN","HMPDJFSG",185,0)
 S CMD("system")=HMPSYS
"RTN","HMPDJFSG",186,0)
 D ENCODE^HMPJSON("CMD","CMDJSON","ERR")
"RTN","HMPDJFSG",187,0)
 I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","HMPDJFSG",188,0)
 S HMPFSIZE=$$INCITEM("syncCommand")  ; *S68-JCH*
"RTN","HMPDJFSG",189,0)
 M ^TMP("HMPF",$J,HMPFCNT)=CMDJSON
"RTN","HMPDJFSG",190,0)
 S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER("syncCommand",$$PIDS^HMPDJFS(DFN),1,1)
"RTN","HMPDJFSG",191,0)
 Q
"RTN","HMPDJFSG",192,0)
SYNCSTRT(SEQNODE) ; Build syncStart object with demograhics
"RTN","HMPDJFSG",193,0)
 ; expects HMPFSYS, HMPFHMP, HMPFCNT, HMPFSIZE   *S68-JCH*
"RTN","HMPDJFSG",194,0)
 S HMPFSIZE=$$INCITEM("patient")  ;              *S68-JCH*
"RTN","HMPDJFSG",195,0)
 N DFN,FILTER,DFN,WRAP
"RTN","HMPDJFSG",196,0)
 S DFN=$P($P(SEQNODE,U,3),"~",3) ; HMPFX~hmpSrvId~dfn
"RTN","HMPDJFSG",197,0)
 I DFN D
"RTN","HMPDJFSG",198,0)
 . N RSLT ;cpc 2015/10/01
"RTN","HMPDJFSG",199,0)
 . S FILTER("patientId")=DFN,FILTER("domain")="patient"
"RTN","HMPDJFSG",200,0)
 . D GET^HMPDJ(.RSLT,.FILTER)
"RTN","HMPDJFSG",201,0)
 . M ^TMP("HMPF",$J,HMPFCNT)=^TMP("HMP",$J,1)
"RTN","HMPDJFSG",202,0)
 ; for OPD there is no object, so 4th argument is 0 
"RTN","HMPDJFSG",203,0)
 S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER("syncStart",$$PIDS^HMPDJFS(DFN),$S(DFN:1,1:-1),$S(DFN:1,1:-1))
"RTN","HMPDJFSG",204,0)
 Q
"RTN","HMPDJFSG",205,0)
SYNCDONE(SEQNODE) ; Build syncStatus object and stick in ^TMP
"RTN","HMPDJFSG",206,0)
 ;  expects: HMPFSYS, HMPFCNT, HMPFHMP, HMPFSIZE  *S68-JCH*
"RTN","HMPDJFSG",207,0)
 N HMPBATCH,DFN,STS,STSJSON,X,ERR
"RTN","HMPDJFSG",208,0)
 S HMPBATCH=$P(SEQNODE,U,3) ; HMPFX~hmpSrvId~dfn
"RTN","HMPDJFSG",209,0)
 S DFN=$P(HMPBATCH,"~",3)
"RTN","HMPDJFSG",210,0)
 S STS("uid")="urn:va:syncStatus:"_HMPFSYS_":"_DFN
"RTN","HMPDJFSG",211,0)
 S STS("initialized")="true"
"RTN","HMPDJFSG",212,0)
 I DFN S STS("localId")=DFN
"RTN","HMPDJFSG",213,0)
 S X="" F  S X=$O(^XTMP(HMPBATCH,0,"count",X)) Q:'$L(X)  D
"RTN","HMPDJFSG",214,0)
 . S STS("domainTotals",X)=^XTMP(HMPBATCH,0,"count",X)
"RTN","HMPDJFSG",215,0)
 ;===JD START===
"RTN","HMPDJFSG",216,0)
 ; If resubscribing a patient, just send demographics
"RTN","HMPDJFSG",217,0)
 I DFN'="OPD",$D(^HMP(800000,"AITEM",DFN)) D
"RTN","HMPDJFSG",218,0)
 . N HMP99
"RTN","HMPDJFSG",219,0)
 . S HMP99=""
"RTN","HMPDJFSG",220,0)
 . ; Reset all domain counts to zero except for demographics
"RTN","HMPDJFSG",221,0)
 . F  S HMP99=$O(STS("domainTotals",HMP99)) Q:'HMP99  I HMP99'="patient" S STS("domainTotals",HMP99)=0
"RTN","HMPDJFSG",222,0)
 ;===JD   END===
"RTN","HMPDJFSG",223,0)
 D ENCODE^HMPJSON("STS","STSJSON","ERR")
"RTN","HMPDJFSG",224,0)
 I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","HMPDJFSG",225,0)
 S HMPFSIZE=$$INCITEM("syncstatus")  ; *S68-JCH*
"RTN","HMPDJFSG",226,0)
 M ^TMP("HMPF",$J,HMPFCNT)=STSJSON
"RTN","HMPDJFSG",227,0)
 S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER("syncStatus",$$PIDS^HMPDJFS(DFN),1,1)
"RTN","HMPDJFSG",228,0)
 Q
"RTN","HMPDJFSG",229,0)
 ;
"RTN","HMPDJFSG",230,0)
SYNCMETA(SNODE) ; US11019 Build NEW syncStart object
"RTN","HMPDJFSG",231,0)
 ; expects HMPFSYS, HMPFHMP, HMPFCNT
"RTN","HMPDJFSG",232,0)
 ; need to rebuild SNODE because WRAPPER expects it to fall in
"RTN","HMPDJFSG",233,0)
 N BATCH,DFN,WRAP,METADOM
"RTN","HMPDJFSG",234,0)
 S DFN=$P(SNODE,U,1)
"RTN","HMPDJFSG",235,0)
 S METADOM=$P(SNODE,U,3)
"RTN","HMPDJFSG",236,0)
 S BATCH="HMPFX~"_HMPFHMP_"~"_DFN
"RTN","HMPDJFSG",237,0)
 S $P(SNODE,U,3)=BATCH
"RTN","HMPDJFSG",238,0)
 S HMPFSIZE=$$INCITEM("syncmeta") ;need to increment count
"RTN","HMPDJFSG",239,0)
 S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER("syncStart"_"#"_METADOM,$$PIDS^HMPDJFS(DFN),$S(DFN:1,1:-1),$S(DFN:1,1:-1))
"RTN","HMPDJFSG",240,0)
 S ^TMP("HMPF",$J,HMPFCNT,1)="null" ;always null object with this record
"RTN","HMPDJFSG",241,0)
 S HMPCLFLG=0 ; DE3502
"RTN","HMPDJFSG",242,0)
 Q
"RTN","HMPDJFSG",243,0)
 ;
"RTN","HMPDJFSG",244,0)
SYNCERR(SNODE,HMPERR) ;
"RTN","HMPDJFSG",245,0)
 N BATCH,CNT,DFN,NUM,OFFSET,PIDS,TASK,TOTAL,X
"RTN","HMPDJFSG",246,0)
 S DFN=$P(SNODE,U),X=$P(SNODE,U,3)
"RTN","HMPDJFSG",247,0)
 S PIDS=$$PIDS^HMPDJFS(DFN)
"RTN","HMPDJFSG",248,0)
 S TASK=$P(X,":",2),TOTAL=$P(X,":",4)
"RTN","HMPDJFSG",249,0)
 S BATCH="HMPFX~"_HMPFHMP_"~"_DFN       ; extract node in ^XTMP
"RTN","HMPDJFSG",250,0)
 S CNT=$O(HMPERR(""),-1)
"RTN","HMPDJFSG",251,0)
 S NUM=0 F  S NUM=$O(^XTMP(BATCH,TASK,"error",NUM)) Q:NUM'>0  D
"RTN","HMPDJFSG",252,0)
 .S CNT=CNT+1 S HMPERR(CNT)=$G(^XTMP(BATCH,TASK,"error",NUM,1))
"RTN","HMPDJFSG",253,0)
 Q
"RTN","HMPDJFSG",254,0)
 ;
"RTN","HMPDJFSG",255,0)
FRESHITM(SEQNODE,DELETE,ERROR) ; Get freshness item and stick in ^TMP
"RTN","HMPDJFSG",256,0)
 ; expects HMPFSYS, HMPFHMP
"RTN","HMPDJFSG",257,0)
 N ACT,DFN,DOMAIN,ECNT,FILTER,ID,RSLT,UID,HMP97,HMPI,WRAP,HMPPAT7,HMPPAT8
"RTN","HMPDJFSG",258,0)
 S FILTER("noHead")=1
"RTN","HMPDJFSG",259,0)
 S DFN=$P(SEQNODE,U),DOMAIN=$P(SEQNODE,U,2),ID=$P(SEQNODE,U,3),ACT=$P(SEQNODE,U,4)
"RTN","HMPDJFSG",260,0)
 ;==JD START
"RTN","HMPDJFSG",261,0)
 ;Create a phantom "patient" if visit is the domain
"RTN","HMPDJFSG",262,0)
 I DOMAIN="visit" D
"RTN","HMPDJFSG",263,0)
 .S HMPPAT7=HMPFIDX_".99",HMPPAT8=^XTMP(HMPFSTRM,HMPFIDX),$P(HMPPAT8,U,2)="patient"  ;BL;DE2280
"RTN","HMPDJFSG",264,0)
 .S ^XTMP(HMPFSTRM,HMPPAT7)=HMPPAT8
"RTN","HMPDJFSG",265,0)
 ;==JD END
"RTN","HMPDJFSG",266,0)
 ;
"RTN","HMPDJFSG",267,0)
 I ACT'="@" D
"RTN","HMPDJFSG",268,0)
 . S FILTER("id")=ID
"RTN","HMPDJFSG",269,0)
 . S FILTER("domain")=DOMAIN
"RTN","HMPDJFSG",270,0)
 . I DFN="OPD" D GET^HMPEF(.RSLT,.FILTER)
"RTN","HMPDJFSG",271,0)
 . I +DFN>0 D
"RTN","HMPDJFSG",272,0)
 . . S FILTER("patientId")=DFN
"RTN","HMPDJFSG",273,0)
 . . D GET^HMPDJ(.RSLT,.FILTER)
"RTN","HMPDJFSG",274,0)
 I ACT'="@",$L($G(^TMP("HMP",$J,"error")))>0 D BLDSERR(DFN,.ERROR)  Q
"RTN","HMPDJFSG",275,0)
 I '$D(^TMP("HMP",$J,1)) S ACT="@"
"RTN","HMPDJFSG",276,0)
 I ACT="@" D
"RTN","HMPDJFSG",277,0)
 . S UID=$$SETUID^HMPUTILS(DOMAIN,$S(+DFN>0:DFN,1:""),ID)
"RTN","HMPDJFSG",278,0)
 . S HMP97=UID
"RTN","HMPDJFSG",279,0)
 . K ^TMP("HMP",$J) S ^TMP("HMP",$J,1)="" ; Need to dummy this up or it will never get set later
"RTN","HMPDJFSG",280,0)
 ;
"RTN","HMPDJFSG",281,0)
 ;Add syncstart, data and syncstatus to JSON for unsolicited updates - US4588 & US3682
"RTN","HMPDJFSG",282,0)
 I (DOMAIN="pt-select")!(DOMAIN="user")!(DOMAIN["asu-")!(DOMAIN="doc-def")!(DFN=+DFN) D  Q
"RTN","HMPDJFSG",283,0)
 .D ADHOC^HMPUTIL1(DOMAIN,.HMPFCNT,DFN)
"RTN","HMPDJFSG",284,0)
 .I $P(HMPFIDX,".",2)=99 K ^XTMP(HMPFSTRM,HMPFIDX) ;Remove the phantom "patient"; JD
"RTN","HMPDJFSG",285,0)
 .S HMPLITEM="FRESH" ; DE3502
"RTN","HMPDJFSG",286,0)
 ;
"RTN","HMPDJFSG",287,0)
 S WRAP=$$WRAPPER(DOMAIN,$$PIDS^HMPDJFS(DFN),1,1) ; N.B. this updates the .3 node on this HMPFCNT
"RTN","HMPDJFSG",288,0)
 F HMPI=1:1 Q:'$D(^TMP("HMP",$J,HMPI))  D
"RTN","HMPDJFSG",289,0)
 . S HMPFCNT=HMPFCNT+1
"RTN","HMPDJFSG",290,0)
 . M ^TMP("HMPF",$J,HMPFCNT)=^TMP("HMP",$J,HMPI)
"RTN","HMPDJFSG",291,0)
 . I HMPLITEM="SYNC" S HMPLITEM="FRESH" I WRAP="," S ^TMP("HMPF",$J,HMPFCNT,.3)="}," Q  ; DE3502 add closing
"RTN","HMPDJFSG",292,0)
 . S ^TMP("HMPF",$J,HMPFCNT,.3)=WRAP
"RTN","HMPDJFSG",293,0)
 Q
"RTN","HMPDJFSG",294,0)
 ;
"RTN","HMPDJFSG",295,0)
BLDSERR(DFN,ERROR) ; Create syncError object in ERRJSON
"RTN","HMPDJFSG",296,0)
 ; expects: HMPBATCH, HMPFSYS, HMPFZTSK
"RTN","HMPDJFSG",297,0)
 N COUNT,ERRVAL,ERROBJ,ERR,ERRCNT,ERRMSG,SYNCERR
"RTN","HMPDJFSG",298,0)
 M ERRVAL=^TMP("HMP",$J,"error")
"RTN","HMPDJFSG",299,0)
 I $G(ERRVAL)="" Q
"RTN","HMPDJFSG",300,0)
 S ERRVAL="{"_ERRVAL_"}"
"RTN","HMPDJFSG",301,0)
 D DECODE^HMPJSON("ERRVAL","ERROBJ","ERR")
"RTN","HMPDJFSG",302,0)
 I $D(ERR) S $EC=",UJSON decode error,"
"RTN","HMPDJFSG",303,0)
 S ERRMSG=ERROBJ("error","message")
"RTN","HMPDJFSG",304,0)
 Q:'$L(ERRMSG)
"RTN","HMPDJFSG",305,0)
 S SYNCERR("uid")="urn:va:syncError:"_HMPFSYS_":"_DFN_":FRESHNESS"
"RTN","HMPDJFSG",306,0)
 S SYNCERR("collection")=DOMAIN
"RTN","HMPDJFSG",307,0)
 S SYNCERR("error")=ERRMSG
"RTN","HMPDJFSG",308,0)
 D ENCODE^HMPJSON("SYNCERR","ERRJSON","ERR") I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","HMPDJFSG",309,0)
 S COUNT=$O(ERROR(""),-1)  ;                      *BEGIN*S68-JCH*
"RTN","HMPDJFSG",310,0)
 S ERRCNT=0 F  S ERRCNT=$O(ERRJSON(ERRCNT)) Q:ERRCNT'>0  D
"RTN","HMPDJFSG",311,0)
 .S COUNT=COUNT+1 M ERROR(COUNT)=ERRJSON(COUNT)  ;  *END*S68-JCH*
"RTN","HMPDJFSG",312,0)
 Q
"RTN","HMPDJFSG",313,0)
WRAPPER(DOMAIN,PIDS,OFFSET,DOMSIZE,FROMXTR) ; return JSON wrapper for each item *S68-JCH*
"RTN","HMPDJFSG",314,0)
 ; add object tag if extract total not zero or if total passed as -1
"RTN","HMPDJFSG",315,0)
 ; seq and total tags only added if non-zero
"RTN","HMPDJFSG",316,0)
 N X,Y,Z,HMPSVERS ;US11019
"RTN","HMPDJFSG",317,0)
 ; Ensure that X exists
"RTN","HMPDJFSG",318,0)
 S X=""
"RTN","HMPDJFSG",319,0)
 S Z=$P(SNODE,U,3)
"RTN","HMPDJFSG",320,0)
 S HMPSVERS=$G(^XTMP(Z,"HMPSVERS")) ;US11019 If HMPSVERS=0 then running in previous mode
"RTN","HMPDJFSG",321,0)
 S HMPSTMP=$G(^XTMP(Z,"HMPSTMP")) ;; PJH - THIS USED ONLY FOR OPD COMPILE IN PRIOR VERSION - NEEDS REMOVING US6734
"RTN","HMPDJFSG",322,0)
 ; This was working for operational data, not patient data
"RTN","HMPDJFSG",323,0)
 ; DFN will be OPD if this is operational data (non-obvious I know)
"RTN","HMPDJFSG",324,0)
 I DFN="OPD" D
"RTN","HMPDJFSG",325,0)
 . S:$P($G(DOMAIN),"#")'="syncStart" X="},{""collection"":"""_$P(DOMAIN,"#")_""""_PIDS ;US11019
"RTN","HMPDJFSG",326,0)
 E  S X="},{""collection"":"""_$P(DOMAIN,"#")_""""_PIDS  ; If ONLY patient data exists
"RTN","HMPDJFSG",327,0)
 I HMPLITEM="FRESH" I $E(X)="}" S X=$E(X,2,$L(X)) ; DE3502 - remove closing when coming from Fresh
"RTN","HMPDJFSG",328,0)
 I $P(DOMAIN,"#")="syncStart",$O(^XTMP(Z,0))]"" D  Q X
"RTN","HMPDJFSG",329,0)
 .; --- Start US3907 ---
"RTN","HMPDJFSG",330,0)
 .; Pass JobId and RootJobId back in the response if we were given them
"RTN","HMPDJFSG",331,0)
 .; This bridges the gap between Job status and Sync Status (since VistA will be giving the syncStatus)
"RTN","HMPDJFSG",332,0)
 .; US11019 use domain specific Job id
"RTN","HMPDJFSG",333,0)
 .S Y=$S($P(DOMAIN,"#",2)="":$G(^XTMP(Z,"JOBID")),1:$G(^XTMP(Z,"JOBID",$P(DOMAIN,"#",2)))) ;US11019
"RTN","HMPDJFSG",334,0)
 .I Y]"" S X=X_",""jobId"":"""_Y_""""
"RTN","HMPDJFSG",335,0)
 .S Y=$G(^XTMP(Z,"ROOTJOBID"))
"RTN","HMPDJFSG",336,0)
 .I Y]"" S X=X_",""rootJobId"":"""_Y_""""
"RTN","HMPDJFSG",337,0)
 .; --- End US3907 ---
"RTN","HMPDJFSG",338,0)
 .I DFN'="OPD" D METAPT^HMPMETA(SNODE,$S(HMPSVERS:$P(DOMAIN,"#",2),1:"")) Q  ; US11019 extra para ;Collect Patient metastamp data from XTMP - US6734
"RTN","HMPDJFSG",339,0)
 .D METAOP^HMPMETA(SNODE) ; Collect OPD metastamp data from XTMP - US6734
"RTN","HMPDJFSG",340,0)
 S X=X_","
"RTN","HMPDJFSG",341,0)
 ; if batched by extract  *S68-JCH*
"RTN","HMPDJFSG",342,0)
 I $G(OFFSET)>-1 S X=X_"""seq"":"_OFFSET_","
"RTN","HMPDJFSG",343,0)
 I $G(DOMSIZE)>-1 S X=X_"""total"":"_DOMSIZE_","
"RTN","HMPDJFSG",344,0)
 I $G(OFFSET)>-1 S X=X_"""object"":"
"RTN","HMPDJFSG",345,0)
 Q X
"RTN","HMPDJFSG",346,0)
 ;
"RTN","HMPDJFSG",347,0)
APIHDR(COUNT,LASTITM) ; return JSON
"RTN","HMPDJFSG",348,0)
 ; expects HMPFSYS
"RTN","HMPDJFSG",349,0)
 I $P($G(LASTITM),".",2)="99" S LASTITM=$P(LASTITM,".")  ;make sure lastUpdate is correct;JD;BL;DE2280
"RTN","HMPDJFSG",350,0)
 N X
"RTN","HMPDJFSG",351,0)
 S X="{""apiVersion"":1.02,""params"":{""domain"":"""_$$KSP^XUPARAM("WHERE")_""""
"RTN","HMPDJFSG",352,0)
 S X=X_",""systemId"":"""_HMPFSYS_"""},""data"":{""updated"":"""_$$HL7NOW^HMPDJ_""""
"RTN","HMPDJFSG",353,0)
 S X=X_",""totalItems"":"_COUNT_",""lastUpdate"":"""_LASTITM_""""_$$PROGRESS^HMPDJFS(LASTITM)
"RTN","HMPDJFSG",354,0)
 S X=X_",""items"":["
"RTN","HMPDJFSG",355,0)
 Q X
"RTN","HMPDJFSG",356,0)
 ;
"RTN","HMPDJFSG",357,0)
NOOP(LASTITM) ; No-op, don't return any items
"RTN","HMPDJFSG",358,0)
 S ^TMP("HMPF",$J,.5)=$$APIHDR(0,LASTITM)_"]}}"
"RTN","HMPDJFSG",359,0)
 Q
"RTN","HMPDJFSG",360,0)
VERMATCH(HMPIEN,VERSION) ; true if middle tier HMP and VistA version match
"RTN","HMPDJFSG",361,0)
 ; versions match, queue any patients waiting for match
"RTN","HMPDJFSG",362,0)
 I $P($$GET^XPAR("PKG","HMP JSON SCHEMA"),".")=$P(VERSION,".") D  QUIT 1
"RTN","HMPDJFSG",363,0)
 . Q:'$G(^XTMP("HMPFS~"_HMPIEN,"waiting"))  ; no patients awaiting queuing
"RTN","HMPDJFSG",364,0)
 . S ^XTMP("HMPFS~"_HMPIEN,"waiting")=0
"RTN","HMPDJFSG",365,0)
 . N DOMAINS,BATCH,HMPNAME
"RTN","HMPDJFSG",366,0)
 . S HMPNAME=$P(^HMP(800000,HMPIEN,0),U)
"RTN","HMPDJFSG",367,0)
 . D PTDOMS^HMPDJFSD(.DOMAINS)
"RTN","HMPDJFSG",368,0)
 . S DFN=0 F  S DFN=$O(^XTMP("HMPFS~"_HMPIEN,"waiting",DFN)) Q:'DFN  D
"RTN","HMPDJFSG",369,0)
 . . Q:'$D(^HMP(800000,HMPIEN,1,DFN))  ; subscription cancelled while waiting  *S68-JCH*
"RTN","HMPDJFSG",370,0)
 . . S BATCH="HMPFX~"_HMPNAME_"~"_DFN
"RTN","HMPDJFSG",371,0)
 . . D QUINIT^HMPDJFSP(BATCH,DFN,.DOMAINS)
"RTN","HMPDJFSG",372,0)
 . K ^XTMP("HMPFS~"_HMPIEN)
"RTN","HMPDJFSG",373,0)
 ;
"RTN","HMPDJFSG",374,0)
 ; otherwise, hold things
"RTN","HMPDJFSG",375,0)
 D NEWXTMP^HMPDJFS("HMPFS~"_HMPIEN,8,"HMP Awaiting Version Match")
"RTN","HMPDJFSG",376,0)
 S ^XTMP("HMPFS~"_HMPIEN,"waiting")=1
"RTN","HMPDJFSG",377,0)
 Q 0
"RTN","HMPDJFSG",378,0)
 ;
"RTN","HMPDJFSG",379,0)
LASTUPD(HMPSRV,LASTUPD) ; save the last update
"RTN","HMPDJFSG",380,0)
 ; TODO: change this to use Fileman call
"RTN","HMPDJFSG",381,0)
 N IEN,CURRUPD,REPEAT
"RTN","HMPDJFSG",382,0)
 S IEN=$O(^HMP(800000,"B",HMPSRV,0)) Q:'IEN
"RTN","HMPDJFSG",383,0)
 Q:LASTUPD["^"
"RTN","HMPDJFSG",384,0)
 S CURRUPD=$P(^HMP(800000,IEN,0),"^",2),REPEAT=$P(^HMP(800000,IEN,0),"^",4)
"RTN","HMPDJFSG",385,0)
 I LASTUPD=CURRUPD S $P(^HMP(800000,IEN,0),"^",4)=REPEAT+1 QUIT
"RTN","HMPDJFSG",386,0)
 S $P(^HMP(800000,IEN,0),"^",2)=LASTUPD,$P(^HMP(800000,IEN,0),"^",4)=0
"RTN","HMPDJFSG",387,0)
 Q
"RTN","HMPDJFSG",388,0)
JSONOUT ; Write out JSON in ^TMP
"RTN","HMPDJFSG",389,0)
 N X
"RTN","HMPDJFSG",390,0)
 S X=$NA(^TMP("HMPF",$J))
"RTN","HMPDJFSG",391,0)
 F  S X=$Q(@X) Q:($QS(X,1)'="HMPF")!($QS(X,2)'=$J)  W !,@X
"RTN","HMPDJFSG",392,0)
 Q
"RTN","HMPDJFSG",393,0)
 ;
"RTN","HMPDJFSM")
0^51^B91943836
"RTN","HMPDJFSM",1,0)
HMPDJFSM ;SLC/KCM,ASMR/RRB - Monitoring Tools for Extracts;Nov 04, 2015 17:46:48
"RTN","HMPDJFSM",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJFSM",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSM",4,0)
 ;
"RTN","HMPDJFSM",5,0)
 Q
"RTN","HMPDJFSM",6,0)
 ;
"RTN","HMPDJFSM",7,0)
EN ; Show information for one server
"RTN","HMPDJFSM",8,0)
 N IEN
"RTN","HMPDJFSM",9,0)
 S IEN=$$GETSRV() Q:IEN'>0
"RTN","HMPDJFSM",10,0)
 D LOOP(IEN)
"RTN","HMPDJFSM",11,0)
 Q
"RTN","HMPDJFSM",12,0)
ALL ; Show information for all servers
"RTN","HMPDJFSM",13,0)
 S IEN=0 F  S IEN=$O(^HMP(800000,IEN)) Q:'IEN  W ! D SHOWSRV(IEN)
"RTN","HMPDJFSM",14,0)
 Q
"RTN","HMPDJFSM",15,0)
ADDPT(PAT) ; Add patient to server
"RTN","HMPDJFSM",16,0)
 N SRV,ARGS,RESULT
"RTN","HMPDJFSM",17,0)
 I '$G(PAT) S PAT=$$GETPAT() Q:'PAT
"RTN","HMPDJFSM",18,0)
 S SRV=$$GETSRV() Q:SRV'>0
"RTN","HMPDJFSM",19,0)
 I $G(^HMP(800000,"AITEM",PAT,SRV))>0 W !,"Patient "_PAT_" already synced."
"RTN","HMPDJFSM",20,0)
 ;
"RTN","HMPDJFSM",21,0)
 S ARGS("command")="putPtSubscription"
"RTN","HMPDJFSM",22,0)
 S ARGS("server")=$P(^HMP(800000,SRV,0),"^")
"RTN","HMPDJFSM",23,0)
 S ARGS("localId")=PAT
"RTN","HMPDJFSM",24,0)
 D API^HMPDJFS(.RESULT,.ARGS)
"RTN","HMPDJFSM",25,0)
 I ^TMP("HMPF",$J,1)["location" W !,$P($G(^DPT(PAT,0)),"^")," is being synced."  ; IA10035, DE2818
"RTN","HMPDJFSM",26,0)
 E  W !,"Subscription failed."
"RTN","HMPDJFSM",27,0)
 Q
"RTN","HMPDJFSM",28,0)
LOGLVL ; Set log level
"RTN","HMPDJFSM",29,0)
 N DIR,DTOUT,DUOUT,DIRUT,Y,ERR
"RTN","HMPDJFSM",30,0)
 W !,"Set freshness logging level."
"RTN","HMPDJFSM",31,0)
 W !,"Current level is ",$$GET^XPAR("ALL","HMP LOG LEVEL")
"RTN","HMPDJFSM",32,0)
 S DIR(0)="S^0:no logging;1:request logging;2:response logging;C:clear logs"
"RTN","HMPDJFSM",33,0)
 D ^DIR
"RTN","HMPDJFSM",34,0)
 I $D(DTOUT)!$D(DUOUT)!$D(DIRUT) Q
"RTN","HMPDJFSM",35,0)
 I Y="C" K ^XTMP("HMPFLOG") Q
"RTN","HMPDJFSM",36,0)
 I Y>0 K ^XTMP("HMPFLOG")
"RTN","HMPDJFSM",37,0)
 D PUT^XPAR("SYS","HMP LOG LEVEL",1,Y,.ERR)
"RTN","HMPDJFSM",38,0)
 I $G(ERR) W !,"Error saving log level"
"RTN","HMPDJFSM",39,0)
 Q
"RTN","HMPDJFSM",40,0)
THLTH ; test health
"RTN","HMPDJFSM",41,0)
 K ^TMP("HMPF",$J)
"RTN","HMPDJFSM",42,0)
 N ARGS,HMPFHMP,HMPSYS,HMPFRSP
"RTN","HMPDJFSM",43,0)
 S ARGS("server")="Test-Server-1"
"RTN","HMPDJFSM",44,0)
 S HMPFRSP=$NA(^TMP("HMPF",$J))
"RTN","HMPDJFSM",45,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPDJFSM",46,0)
 S HMPFHMP=$TR($G(ARGS("server")),"~","=")
"RTN","HMPDJFSM",47,0)
 D HLTHCHK(.ARGS)
"RTN","HMPDJFSM",48,0)
 N I S I=0 F  S I=$O(^TMP("HMPF",$J,I)) Q:'I  W !,^TMP("HMPF",$J,I)
"RTN","HMPDJFSM",49,0)
 Q
"RTN","HMPDJFSM",50,0)
HLTHCHK(ARGS) ; Check health of VistA Server subscription
"RTN","HMPDJFSM",51,0)
 ; expect HMPFRSP, HMPFHMP, HMPSYS to be created by API^HMPDJFS
"RTN","HMPDJFSM",52,0)
 ; . ARGS("server")=HMP Server Id
"RTN","HMPDJFSM",53,0)
 ; return a list of extracts that are currently active
"RTN","HMPDJFSM",54,0)
 ; {pid="ABCD;229",domainsCompleted=8,domainsPending=20,objectCount=137,
"RTN","HMPDJFSM",55,0)
 ;  subscribeTime=20140609112734,extractStatus="initializing"}
"RTN","HMPDJFSM",56,0)
 ; ^TMP("HMPF",$J,1)=results
"RTN","HMPDJFSM",57,0)
 ;
"RTN","HMPDJFSM",58,0)
 N HMPIEN,STS,TIME,DFN
"RTN","HMPDJFSM",59,0)
 S HMPIEN=$O(^HMP(800000,"B",HMPFHMP,0))
"RTN","HMPDJFSM",60,0)
 I 'HMPIEN D SETERR^HMPDJFS("Server not registered") QUIT
"RTN","HMPDJFSM",61,0)
 S NODE=0
"RTN","HMPDJFSM",62,0)
 S STS="" F  S STS=$O(^HMP(800000,HMPIEN,1,"AP",STS)) Q:'$L(STS)  D
"RTN","HMPDJFSM",63,0)
 . S TIME="" F  S TIME=$O(^HMP(800000,HMPIEN,1,"AP",STS,TIME)) Q:'$L(TIME)  D
"RTN","HMPDJFSM",64,0)
 . . S DFN="" F  S DFN=$O(^HMP(800000,HMPIEN,1,"AP",STS,TIME,DFN)) Q:'DFN  D
"RTN","HMPDJFSM",65,0)
 . . . S NODE=NODE+1
"RTN","HMPDJFSM",66,0)
 . . . S ^TMP("HMPF",$J,NODE)=$$HLTHINFO(HMPFHMP,HMPIEN,DFN)
"RTN","HMPDJFSM",67,0)
 S ^TMP("HMPF",$J,.5)=$$HLTHHDR(NODE)
"RTN","HMPDJFSM",68,0)
 S ^TMP("HMPF",$J,NODE+1)="]}}"
"RTN","HMPDJFSM",69,0)
 Q
"RTN","HMPDJFSM",70,0)
HLTHINFO(SRV,SRVIEN,DFN) ; Return a string of JSON reporting progress for this domain
"RTN","HMPDJFSM",71,0)
 ; {pid,domainsCompleted,domainsPending,objectCount,queuedTime,phase(waiting,extracting)
"RTN","HMPDJFSM",72,0)
 N BATCH,QTIME,DONE,PEND,CNT,DOM,INFO,STS,JSON
"RTN","HMPDJFSM",73,0)
 S BATCH="HMPFX~"_SRV_"~"_DFN
"RTN","HMPDJFSM",74,0)
 S QTIME=$G(^XTMP(BATCH,0,"time")) S:$L(QTIME) QTIME=$$HTFM^XLFDT(QTIME)
"RTN","HMPDJFSM",75,0)
 S DONE=0,PEND=0,CNT=0
"RTN","HMPDJFSM",76,0)
 S DOM="" F  S DOM=$O(^XTMP(BATCH,0,"status",DOM)) Q:DOM=""  D
"RTN","HMPDJFSM",77,0)
 . S CNT=CNT+$G(^XTMP(BATCH,0,"count",DOM))
"RTN","HMPDJFSM",78,0)
 . I $G(^XTMP(BATCH,0,"status",DOM)) S DONE=DONE+1 QUIT
"RTN","HMPDJFSM",79,0)
 . S PEND=PEND+1
"RTN","HMPDJFSM",80,0)
 S INFO("pid")=$$PID^HMPDJFS(DFN)
"RTN","HMPDJFSM",81,0)
 S INFO("domainsCompleted")=DONE
"RTN","HMPDJFSM",82,0)
 S INFO("domainsPending")=PEND
"RTN","HMPDJFSM",83,0)
 S INFO("objectCount")=CNT
"RTN","HMPDJFSM",84,0)
 I $L(QTIME) S INFO("queuedTime")=$P($$FMTHL7^XLFDT(QTIME),"-")
"RTN","HMPDJFSM",85,0)
 S STS=$P($G(^HMP(800000,SRVIEN,1,DFN,0)),"^",2)
"RTN","HMPDJFSM",86,0)
 S INFO("extractStatus")=$S(STS=1:"initializing",STS=2:"initialized",1:"uninitialized")
"RTN","HMPDJFSM",87,0)
 D ENCODE^HMPJSON("INFO","JSON")
"RTN","HMPDJFSM",88,0)
 Q JSON(1)
"RTN","HMPDJFSM",89,0)
 ;
"RTN","HMPDJFSM",90,0)
HLTHHDR(COUNT) ; return JSON
"RTN","HMPDJFSM",91,0)
 ; expects HMPFSYS
"RTN","HMPDJFSM",92,0)
 N X
"RTN","HMPDJFSM",93,0)
 S X="{""apiVersion"":1.02,""params"":{""domain"":"""_$$KSP^XUPARAM("WHERE")_""""
"RTN","HMPDJFSM",94,0)
 S X=X_",""systemId"":"""_HMPSYS_"""},""data"":{""updated"":"""_$$HL7NOW^HMPDJ_""""
"RTN","HMPDJFSM",95,0)
 S X=X_",""totalItems"":"_COUNT
"RTN","HMPDJFSM",96,0)
 S X=X_",""items"":["
"RTN","HMPDJFSM",97,0)
 Q X
"RTN","HMPDJFSM",98,0)
 ;
"RTN","HMPDJFSM",99,0)
LOOP(SRV) ; Monitor refresh loop
"RTN","HMPDJFSM",100,0)
 D HOME^%ZIS
"RTN","HMPDJFSM",101,0)
 N ACT,IEN
"RTN","HMPDJFSM",102,0)
 S ACT="R" F  D  Q:"RV"'[ACT
"RTN","HMPDJFSM",103,0)
 . I ACT="R" D SHOWMAIN(SRV)
"RTN","HMPDJFSM",104,0)
 . I ACT="V" D SHOWHMPN
"RTN","HMPDJFSM",105,0)
 . W ! S ACT=$$GETCMD
"RTN","HMPDJFSM",106,0)
 Q
"RTN","HMPDJFSM",107,0)
GETSRV() ; Return the IEN for the server to monitor
"RTN","HMPDJFSM",108,0)
 N DIC,Y
"RTN","HMPDJFSM",109,0)
 S DIC="^HMP(800000,",DIC(0)="AEMQ",DIC("A")="Select HMP server instance: "
"RTN","HMPDJFSM",110,0)
 D ^DIC
"RTN","HMPDJFSM",111,0)
 Q +Y
"RTN","HMPDJFSM",112,0)
 ;
"RTN","HMPDJFSM",113,0)
GETPAT() ; Return DFN for a patient
"RTN","HMPDJFSM",114,0)
 N DIC,Y
"RTN","HMPDJFSM",115,0)
 S DIC=2,DIC(0)="AEMQ"  ; DE2818, changed to file number, not global
"RTN","HMPDJFSM",116,0)
 D ^DIC
"RTN","HMPDJFSM",117,0)
 Q +Y
"RTN","HMPDJFSM",118,0)
 ;
"RTN","HMPDJFSM",119,0)
GETCMD() ; Get the next command
"RTN","HMPDJFSM",120,0)
 N X,Y,DIR,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","HMPDJFSM",121,0)
 S DIR(0)="SB^R:Refresh;V:View HMP Nodes;Q:Quit"
"RTN","HMPDJFSM",122,0)
 S DIR("B")="Refresh"
"RTN","HMPDJFSM",123,0)
 D ^DIR
"RTN","HMPDJFSM",124,0)
 I $D(DIRUT)!$D(DIROUT) S Y="Q"
"RTN","HMPDJFSM",125,0)
 Q Y
"RTN","HMPDJFSM",126,0)
 ;
"RTN","HMPDJFSM",127,0)
SHOWHMPN ; Show HMP global nodes
"RTN","HMPDJFSM",128,0)
 W !!,"Current HMP temporary nodes",?40,"High Numeric or Last Subscript",!
"RTN","HMPDJFSM",129,0)
 N X,Y,J
"RTN","HMPDJFSM",130,0)
 S X="VPQ~" F  S X=$O(^XTMP(X)) Q:$E(X,1,3)'="HMP"  D
"RTN","HMPDJFSM",131,0)
 . W !,"^XTMP("""_X_""")"
"RTN","HMPDJFSM",132,0)
 . S Y=$O(^XTMP(X," "),-1) S:'$L(Y) Y=$O(^XTMP(X,""),-1) W ?40,Y
"RTN","HMPDJFSM",133,0)
 W !
"RTN","HMPDJFSM",134,0)
 S X="VPQ~" F  S X=$O(^TMP(X)) Q:$E(X,1,3)'="HMP"  D
"RTN","HMPDJFSM",135,0)
 . S J=0 F  S J=$O(^TMP(X,J)) Q:'J  D
"RTN","HMPDJFSM",136,0)
 . . W !,"^TMP("""_X_""","_J_")"
"RTN","HMPDJFSM",137,0)
 . . S Y=$O(^TMP(X,J," "),-1) S:'$L(Y) Y=$O(^TMP(X,J,""),-1) W ?40,Y
"RTN","HMPDJFSM",138,0)
 S J=0 F  S J=$O(^TMP(J)) Q:'J  D
"RTN","HMPDJFSM",139,0)
 . S X="VPQ~" F  S X=$O(^TMP(J,X)) Q:$E(X,1,3)'="HMP"  D
"RTN","HMPDJFSM",140,0)
 . . W !,"^TMP("_J_","""_X_""")"
"RTN","HMPDJFSM",141,0)
 . . S Y=$O(^TMP(J,X," "),-1) S:'$L(Y) Y=$O(^TMP(J,X,""),-1) W ?40,Y
"RTN","HMPDJFSM",142,0)
 Q
"RTN","HMPDJFSM",143,0)
SHOWMAIN(SRV) ; Show main information for server
"RTN","HMPDJFSM",144,0)
 N STREAM
"RTN","HMPDJFSM",145,0)
 S STREAM=$$LSTREAM(SRV)
"RTN","HMPDJFSM",146,0)
 W @IOF
"RTN","HMPDJFSM",147,0)
 W !,$$HTE^XLFDT($H),?64,"Slots Open: ",$$SLOTS,!
"RTN","HMPDJFSM",148,0)
 I STREAM="" W !,"No HMP extract stream found." Q
"RTN","HMPDJFSM",149,0)
 D SHOWSRV(SRV)
"RTN","HMPDJFSM",150,0)
 D LJOBS(SRV)
"RTN","HMPDJFSM",151,0)
 D LQUEUE(SRV,10)
"RTN","HMPDJFSM",152,0)
 Q 
"RTN","HMPDJFSM",153,0)
SHOWSRV(IEN) ; Show information for a server
"RTN","HMPDJFSM",154,0)
 N X0,ROOT,BATCH,STREAM,SRVNM,LASTUP,REPEAT,TASK,TASKS
"RTN","HMPDJFSM",155,0)
 S X0=^HMP(800000,IEN,0)
"RTN","HMPDJFSM",156,0)
 S SRVNM=$P(X0,"^"),LASTUP=$P(X0,"^",2),REPEAT=$P(X0,"^",4)
"RTN","HMPDJFSM",157,0)
 S STREAM=$$LSTREAM(IEN)
"RTN","HMPDJFSM",158,0)
 W !,SRVNM,?30,"Last Update: ",LASTUP W:REPEAT "  x",REPEAT
"RTN","HMPDJFSM",159,0)
 I $D(^XTMP(STREAM)) D
"RTN","HMPDJFSM",160,0)
 . W !,?29,"End of Queue: ",$P(STREAM,"~",3),"-",$G(^XTMP(STREAM,"last"))
"RTN","HMPDJFSM",161,0)
 ; loop thru extracts for this server
"RTN","HMPDJFSM",162,0)
 S ROOT="HMPFX~"_SRVNM_"~",BATCH=ROOT
"RTN","HMPDJFSM",163,0)
 S BATCH=ROOT F  S BATCH=$O(^XTMP(BATCH)) Q:$E(BATCH,1,$L(ROOT))'=ROOT  D
"RTN","HMPDJFSM",164,0)
 . W !,$J($P(BATCH,"~",3),12)
"RTN","HMPDJFSM",165,0)
 . S TASK=0,TASKS=""
"RTN","HMPDJFSM",166,0)
 . F  S TASK=$O(^XTMP(BATCH,0,"task",TASK)) Q:'TASK  S TASKS=TASKS_$S($L(TASKS):",",1:"")_TASK
"RTN","HMPDJFSM",167,0)
 . W ?14,"Task(s)"_TASKS
"RTN","HMPDJFSM",168,0)
 . I '$D(^XTMP(BATCH,0,"wait")) W ?34,"waiting: ",$$WAIT(BATCH)," seconds" Q
"RTN","HMPDJFSM",169,0)
 . W ?31,"extracting: ",$$LOBJ(BATCH,TASK)
"RTN","HMPDJFSM",170,0)
 Q
"RTN","HMPDJFSM",171,0)
WAIT(BATCH) ; Return the number of seconds the batch has been waiting
"RTN","HMPDJFSM",172,0)
 N START
"RTN","HMPDJFSM",173,0)
 S START=$G(^XTMP(BATCH,0,"time")) Q:'START 0
"RTN","HMPDJFSM",174,0)
 Q $$HDIFF^XLFDT($H,START,2)
"RTN","HMPDJFSM",175,0)
 ;
"RTN","HMPDJFSM",176,0)
LOBJ(BATCH,TASK) ; Return the last domain>count retrieved for this batch
"RTN","HMPDJFSM",177,0)
 Q:'TASK "no task"
"RTN","HMPDJFSM",178,0)
 N LASTITM,DOMAIN,NUM
"RTN","HMPDJFSM",179,0)
 S LASTITM=""
"RTN","HMPDJFSM",180,0)
 S DOMAIN="",LASTITM=""
"RTN","HMPDJFSM",181,0)
 F  S DOMAIN=$O(^XTMP(BATCH,0,"status",DOMAIN)) Q:'$L(DOMAIN)  D  Q:$L(LASTITM)
"RTN","HMPDJFSM",182,0)
 . I $G(^XTMP(BATCH,0,"status",DOMAIN)) Q  ; domain complete
"RTN","HMPDJFSM",183,0)
 . S NUM=$O(^XTMP(BATCH,TASK,DOMAIN,""),-1)
"RTN","HMPDJFSM",184,0)
 . S LASTITM=DOMAIN_$S(NUM:" #"_NUM,1:"")
"RTN","HMPDJFSM",185,0)
 Q $S('$L(LASTITM):"<finished>",1:LASTITM)
"RTN","HMPDJFSM",186,0)
 ;
"RTN","HMPDJFSM",187,0)
SLOTS() ; Return the number of slots available
"RTN","HMPDJFSM",188,0)
 N OUT
"RTN","HMPDJFSM",189,0)
 D FIND^DIC(3.54,"","1","BX","HMP EXTRACT RESOURCE","","","","","OUT")
"RTN","HMPDJFSM",190,0)
 Q $G(OUT("DILIST","ID",1,1))
"RTN","HMPDJFSM",191,0)
 ;
"RTN","HMPDJFSM",192,0)
LJOBS(SRV) ; Show jobs polling in this stream
"RTN","HMPDJFSM",193,0)
 N STREAM,JOBLIST,JOBNUM,JOBNA,X,Y
"RTN","HMPDJFSM",194,0)
 S STREAM=$$LSTREAM(SRV),JOBLIST="",JOBNA=0
"RTN","HMPDJFSM",195,0)
 S JOBNUM="" F  S JOBNUM=$O(^XTMP(STREAM,"job",JOBNUM)) Q:'JOBNUM  D
"RTN","HMPDJFSM",196,0)
 . ; check if job is still active
"RTN","HMPDJFSM",197,0)
 . S X=JOBNUM X ^%ZOSF("JOBPARAM") I '$L(Y) S JOBNA=JOBNA+1 QUIT  ; check if job active
"RTN","HMPDJFSM",198,0)
 . S JOBLIST=JOBLIST_$S($L(JOBLIST):", ",1:"")_JOBNUM
"RTN","HMPDJFSM",199,0)
 W !!,"Polling job number(s):  "_JOBLIST
"RTN","HMPDJFSM",200,0)
 I JOBNA W "  ("_JOBNA_" no longer active)"
"RTN","HMPDJFSM",201,0)
 Q
"RTN","HMPDJFSM",202,0)
LQUEUE(SRV,MAX) ; Show last MAX items in freshness queue
"RTN","HMPDJFSM",203,0)
 W !!,"Last items in the queue ---"
"RTN","HMPDJFSM",204,0)
 N CNT,SEQ,LIST,STREAM
"RTN","HMPDJFSM",205,0)
 S STREAM=$$LSTREAM(SRV)
"RTN","HMPDJFSM",206,0)
 S CNT=0,SEQ=" " ; reverse from space to get numeric entries
"RTN","HMPDJFSM",207,0)
 F  S SEQ=$O(^XTMP(STREAM,SEQ),-1) Q:'SEQ  D  Q:CNT>9
"RTN","HMPDJFSM",208,0)
 . S CNT=CNT+1
"RTN","HMPDJFSM",209,0)
 . S LIST(SEQ)=^XTMP(STREAM,SEQ)
"RTN","HMPDJFSM",210,0)
 S SEQ="" F  S SEQ=$O(LIST(SEQ)) Q:'SEQ  W !,SEQ,?8,LIST(SEQ)
"RTN","HMPDJFSM",211,0)
 Q
"RTN","HMPDJFSM",212,0)
LSTREAM(SRV) ; Return the latest stream for this server
"RTN","HMPDJFSM",213,0)
 N STREAM
"RTN","HMPDJFSM",214,0)
 S STREAM="HMPFS~"_$P($G(^HMP(800000,SRV,0)),"^")_"~9999999"
"RTN","HMPDJFSM",215,0)
 S STREAM=$O(^XTMP(STREAM),-1)
"RTN","HMPDJFSM",216,0)
 Q STREAM
"RTN","HMPDJFSM",217,0)
 ;
"RTN","HMPDJFSM",218,0)
EMERSTOP ; Emergency Stop for Freshness
"RTN","HMPDJFSM",219,0)
 D SETFRUP(0)
"RTN","HMPDJFSM",220,0)
 Q
"RTN","HMPDJFSM",221,0)
RSTRTFR ; Re-start freshness updates
"RTN","HMPDJFSM",222,0)
 D SETFRUP(1)
"RTN","HMPDJFSM",223,0)
 Q
"RTN","HMPDJFSM",224,0)
SETFRUP(START) ; Set flag for freshness updates
"RTN","HMPDJFSM",225,0)
 I 'START D
"RTN","HMPDJFSM",226,0)
 . W !,"WARNING!  This will stop freshness updates for the HMP."
"RTN","HMPDJFSM",227,0)
 . W !,"          It will be necessary to re-synch patient data.",!
"RTN","HMPDJFSM",228,0)
 I START D
"RTN","HMPDJFSM",229,0)
 . W !,"This will --RESUME-- freshness updates for the HMP."
"RTN","HMPDJFSM",230,0)
 . W !,"It may be necessary to re-synch patient and operational data.",!
"RTN","HMPDJFSM",231,0)
 N TYPLST,ALPHA,I,TYPE
"RTN","HMPDJFSM",232,0)
 D EVNTYPS(.TYPLST)
"RTN","HMPDJFSM",233,0)
 S I=0 F  S I=$O(TYPLST(I)) Q:'I  S ALPHA(TYPLST(I))=""
"RTN","HMPDJFSM",234,0)
 S TYPE=$$GETFTYP(.ALPHA,START)
"RTN","HMPDJFSM",235,0)
 Q:TYPE=""
"RTN","HMPDJFSM",236,0)
 I TYPE="*" D  Q
"RTN","HMPDJFSM",237,0)
 . S TYPE="" F  S TYPE=$O(ALPHA(TYPE)) Q:TYPE=""  D CHGFTYP(TYPE,START)
"RTN","HMPDJFSM",238,0)
 D CHGFTYP(TYPE,START)
"RTN","HMPDJFSM",239,0)
 Q
"RTN","HMPDJFSM",240,0)
CHGFTYP(TYPE,START) ; Change the freshness update flag for a type
"RTN","HMPDJFSM",241,0)
 I START D STRTFTYP(TYPE) Q
"RTN","HMPDJFSM",242,0)
 ; otherwise
"RTN","HMPDJFSM",243,0)
 D STOPFTYP(TYPE)
"RTN","HMPDJFSM",244,0)
 Q
"RTN","HMPDJFSM",245,0)
STOPFTYP(TYPE) ; Stop freshness updates for type
"RTN","HMPDJFSM",246,0)
 I '$D(^XTMP("HMP-off",0)) D NEWXTMP^HMPDJFS("HMP-off",999,"Switch off HMP freshness updates")
"RTN","HMPDJFSM",247,0)
 W !,"Stopping freshness updates for: ",TYPE
"RTN","HMPDJFSM",248,0)
 S ^XTMP("HMP-off",TYPE)=1
"RTN","HMPDJFSM",249,0)
 Q
"RTN","HMPDJFSM",250,0)
STRTFTYP(TYPE) ; Resume freshness updates for type
"RTN","HMPDJFSM",251,0)
 W !,"Resuming freshness updates for: ",TYPE
"RTN","HMPDJFSM",252,0)
 K ^XTMP("HMP-off",TYPE)
"RTN","HMPDJFSM",253,0)
 Q
"RTN","HMPDJFSM",254,0)
GETFTYP(ALPHA,START) ; Return item from the list
"RTN","HMPDJFSM",255,0)
 N X,T,P
"RTN","HMPDJFSM",256,0)
 S P=$S(START:"start",1:"stop")
"RTN","HMPDJFSM",257,0)
 F  D  Q:X'["?"
"RTN","HMPDJFSM",258,0)
 . D SHOWFTYP(.ALPHA)
"RTN","HMPDJFSM",259,0)
 . W !!,"Choose domain to "_P_" (* "_P_"s all): "
"RTN","HMPDJFSM",260,0)
 . R X:300 S:$E(X)="^" X="" Q:X=""  Q:X="*"
"RTN","HMPDJFSM",261,0)
 . S X=$$LOW^XLFSTR(X)
"RTN","HMPDJFSM",262,0)
 . Q:$D(ALPHA(X))
"RTN","HMPDJFSM",263,0)
 . S T=$O(ALPHA(X))
"RTN","HMPDJFSM",264,0)
 . I X=$E(T,1,$L(X)) W "  ",T S X=T Q
"RTN","HMPDJFSM",265,0)
 . W "  ??",! S X="?"
"RTN","HMPDJFSM",266,0)
 Q X
"RTN","HMPDJFSM",267,0)
 ;
"RTN","HMPDJFSM",268,0)
SHOWFTYP(ALPHA) ; Show freshness types
"RTN","HMPDJFSM",269,0)
 N I,X,P
"RTN","HMPDJFSM",270,0)
 S I=0,X="" F  S X=$O(ALPHA(X)) Q:'$L(X)  D
"RTN","HMPDJFSM",271,0)
 . S I=I+1,P=I#3
"RTN","HMPDJFSM",272,0)
 . W:P=1 !,X
"RTN","HMPDJFSM",273,0)
 . W:P=2 ?26,X
"RTN","HMPDJFSM",274,0)
 . W:P=0 ?52,X
"RTN","HMPDJFSM",275,0)
 Q
"RTN","HMPDJFSM",276,0)
EVNTYPS(LIST) ; load event types
"RTN","HMPDJFSM",277,0)
 ;;allergy
"RTN","HMPDJFSM",278,0)
 ;;med
"RTN","HMPDJFSM",279,0)
 ;;auxiliary
"RTN","HMPDJFSM",280,0)
 ;;appointment
"RTN","HMPDJFSM",281,0)
 ;;diagnosis
"RTN","HMPDJFSM",282,0)
 ;;document
"RTN","HMPDJFSM",283,0)
 ;;factor
"RTN","HMPDJFSM",284,0)
 ;;immunization
"RTN","HMPDJFSM",285,0)
 ;;lab
"RTN","HMPDJFSM",286,0)
 ;;obs
"RTN","HMPDJFSM",287,0)
 ;;order
"RTN","HMPDJFSM",288,0)
 ;;problem
"RTN","HMPDJFSM",289,0)
 ;;procedure
"RTN","HMPDJFSM",290,0)
 ;;consult
"RTN","HMPDJFSM",291,0)
 ;;image
"RTN","HMPDJFSM",292,0)
 ;;surgery
"RTN","HMPDJFSM",293,0)
 ;;task
"RTN","HMPDJFSM",294,0)
 ;;visit
"RTN","HMPDJFSM",295,0)
 ;;vital
"RTN","HMPDJFSM",296,0)
 ;;mh
"RTN","HMPDJFSM",297,0)
 ;;ptf
"RTN","HMPDJFSM",298,0)
 ;;exam
"RTN","HMPDJFSM",299,0)
 ;;cpt
"RTN","HMPDJFSM",300,0)
 ;;education
"RTN","HMPDJFSM",301,0)
 ;;pov
"RTN","HMPDJFSM",302,0)
 ;;skin
"RTN","HMPDJFSM",303,0)
 ;;treatment
"RTN","HMPDJFSM",304,0)
 ;;roadtrip
"RTN","HMPDJFSM",305,0)
 ;;diet
"RTN","HMPDJFSM",306,0)
 ;;pt-select
"RTN","HMPDJFSM",307,0)
 ;;patient
"RTN","HMPDJFSM",308,0)
 ;;roster
"RTN","HMPDJFSM",309,0)
 ;;user
"RTN","HMPDJFSM",310,0)
 ;;zzzzz
"RTN","HMPDJFSM",311,0)
 N I,X
"RTN","HMPDJFSM",312,0)
 F I=1:1 S X=$P($T(EVNTYPS+I),";;",2,99) Q:X="zzzzz"  S LIST(I)=X
"RTN","HMPDJFSM",313,0)
 Q
"RTN","HMPDJFSM",314,0)
 ;
"RTN","HMPDJFSP")
0^52^B228347665
"RTN","HMPDJFSP",1,0)
HMPDJFSP ;SLC/KCM,ASMR/RRB -- PUT/POST for Extract and Freshness Stream;Nov 04, 2015 17:46:48
"RTN","HMPDJFSP",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJFSP",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSP",4,0)
 ;
"RTN","HMPDJFSP",5,0)
 ; DE2818/RRB: SQA findings 1st 3 lines
"RTN","HMPDJFSP",6,0)
 Q
"RTN","HMPDJFSP",7,0)
 ;
"RTN","HMPDJFSP",8,0)
 ; --- create a new patient subscription
"RTN","HMPDJFSP",9,0)
 ;
"RTN","HMPDJFSP",10,0)
PUTSUB(ARGS) ; return location after creating a new subscription
"RTN","HMPDJFSP",11,0)
 ;  fn returns      : /hmp/subscription/{hmpSrvId}/patient/{sysId;dfn}
"RTN","HMPDJFSP",12,0)
 ;                  : "" if error, errors in ^TMP("HMPFERR",$J)
"RTN","HMPDJFSP",13,0)
 ; .ARGS("server")  : name of HMP server
"RTN","HMPDJFSP",14,0)
 ; .ARGS("localId") : dfn for patient to subscribe or "OPD" (operational data)
"RTN","HMPDJFSP",15,0)
 ; .ARGS("icn")     : icn for patient to subscribe
"RTN","HMPDJFSP",16,0)
 ; .ARGS("domains") : optional array of domains to initialize (deprecated)
"RTN","HMPDJFSP",17,0)
 ;
"RTN","HMPDJFSP",18,0)
 I '$$TM^%ZTLOAD D SETERR^HMPDJFS("Taskman not running") Q ""
"RTN","HMPDJFSP",19,0)
 ;
"RTN","HMPDJFSP",20,0)
 N HMPSRV,HMPFDFN,HMPBATCH,HMPFERR,I,NEWSUB,DOMAINS,HMPSVERS,HMPSTMP
"RTN","HMPDJFSP",21,0)
 ;
"RTN","HMPDJFSP",22,0)
 ; make sure we can identify the patient ("OPD" signals sync operational)
"RTN","HMPDJFSP",23,0)
 S HMPFDFN=$G(ARGS("localId"))
"RTN","HMPDJFSP",24,0)
 S HMPSVERS=+$G(ARGS("HMPSVERS")) ;US11019 get sync version
"RTN","HMPDJFSP",25,0)
 I HMPFDFN'="OPD" D  Q:$G(HMPFERR) ""
"RTN","HMPDJFSP",26,0)
 . I '$L(HMPFDFN),$L(ARGS("icn")) S HMPFDFN=+$$GETDFN^MPIF001(ARGS("icn"))
"RTN","HMPDJFSP",27,0)
 . I 'HMPFDFN D SETERR^HMPDJFS("No patient specified") Q
"RTN","HMPDJFSP",28,0)
 . I '$D(^DPT(HMPFDFN)) D SETERR^HMPDJFS("Patient not found")  ; IA 10035, DE2818
"RTN","HMPDJFSP",29,0)
 ;
"RTN","HMPDJFSP",30,0)
 ; make sure server is known and create batch id
"RTN","HMPDJFSP",31,0)
 S HMPSRV=HMPFHMP  ; TODO: switch to HMPFHMP as server ien
"RTN","HMPDJFSP",32,0)
 I '$L(HMPSRV) D SETERR^HMPDJFS("Missing HMP Server ID") Q ""
"RTN","HMPDJFSP",33,0)
 S HMPSRV("ien")=$O(^HMP(800000,"B",HMPSRV,0))
"RTN","HMPDJFSP",34,0)
 I 'HMPSRV("ien") D SETERR^HMPDJFS("HMP Server not registered") Q ""
"RTN","HMPDJFSP",35,0)
 S HMPBATCH="HMPFX~"_HMPSRV_"~"_HMPFDFN
"RTN","HMPDJFSP",36,0)
 ;
"RTN","HMPDJFSP",37,0)
 ; set up domains to extract
"RTN","HMPDJFSP",38,0)
 D @($S(HMPFDFN="OPD":"OPDOMS",1:"PTDOMS")_"^HMPDJFSD(.DOMAINS)")
"RTN","HMPDJFSP",39,0)
 ;
"RTN","HMPDJFSP",40,0)
 ; ejk US5647
"RTN","HMPDJFSP",41,0)
 ; code below restores selective domain functionality. 
"RTN","HMPDJFSP",42,0)
 ; once the complete list of domains is returned from HMPDJFSD,
"RTN","HMPDJFSP",43,0)
 ; if ARGS("domains") is passed in, anything not in that parameter
"RTN","HMPDJFSP",44,0)
 ; will be excluded from the ODS extract.
"RTN","HMPDJFSP",45,0)
 I $G(ARGS("domains"))'="" D
"RTN","HMPDJFSP",46,0)
 .F I=1:1 Q:'$D(DOMAINS(I))  I ARGS("domains")'[DOMAINS(I) K DOMAINS(I)
"RTN","HMPDJFSP",47,0)
 ;
"RTN","HMPDJFSP",48,0)
 ; see if this is new subscription and task extract if new
"RTN","HMPDJFSP",49,0)
 D SETPAT(HMPFDFN,HMPSRV,.NEWSUB) Q:$G(HMPFERR) ""
"RTN","HMPDJFSP",50,0)
 ;For operational data set stamptime as time subscription placed US6734
"RTN","HMPDJFSP",51,0)
 S HMPSTMP=$$EN^HMPSTMP("NOW") ;DE3377
"RTN","HMPDJFSP",52,0)
 ;
"RTN","HMPDJFSP",53,0)
 ;cpc US11019 following chunk of code moved out of QUINIT as was being called multiple times
"RTN","HMPDJFSP",54,0)
 ;US11019 get array of job ids by domain
"RTN","HMPDJFSP",55,0)
 ; only done once when beginning the batch, no matter how many tasked jobs
"RTN","HMPDJFSP",56,0)
 L +^XTMP(HMPBATCH):5 E  D SETERR^HMPDJFS("Cannot lock batch:"_HMPBATCH) QUIT
"RTN","HMPDJFSP",57,0)
 I '$D(^XTMP(HMPBATCH)) D
"RTN","HMPDJFSP",58,0)
 . D NEWXTMP^HMPDJFS(HMPBATCH,2,"HMP Patient Extract")
"RTN","HMPDJFSP",59,0)
 . ;US11019 - store domain specific job ids
"RTN","HMPDJFSP",60,0)
 . N EMPB S EMPB="jobDomainId-" ;US11019
"RTN","HMPDJFSP",61,0)
 . F  S EMPB=$O(ARGS(EMPB)) Q:EMPB=""  Q:EMPB'["jobDomainId-"  S:'HMPSVERS HMPSVERS=1 S ^XTMP(HMPBATCH,"JOBID",$P(EMPB,"jobDomainId-",2))=ARGS(EMPB) ; US11019 3rd version
"RTN","HMPDJFSP",62,0)
 . S ^XTMP(HMPBATCH,"HMPSVERS")=HMPSVERS ;US11019 store sync version
"RTN","HMPDJFSP",63,0)
 . I $G(ARGS("jobId"))]"" S ^XTMP(HMPBATCH,"JOBID")=ARGS("jobId")  ;US3907 /US11019
"RTN","HMPDJFSP",64,0)
 . I $G(ARGS("rootJobId"))]"" S ^XTMP(HMPBATCH,"ROOTJOBID")=ARGS("rootJobId")  ;US3907
"RTN","HMPDJFSP",65,0)
 . S ^XTMP(HMPBATCH,0,"time")=$H
"RTN","HMPDJFSP",66,0)
 . ; US6734 - setting of syncStart for OPD only
"RTN","HMPDJFSP",67,0)
 . I HMPFDFN="OPD" D SETMARK("Start",HMPFDFN,HMPBATCH),INIT^HMPMETA(HMPBATCH,HMPFDFN,.ARGS) ; US6734 
"RTN","HMPDJFSP",68,0)
 L -^XTMP(HMPBATCH)
"RTN","HMPDJFSP",69,0)
 ;cpc US11019 end moved code
"RTN","HMPDJFSP",70,0)
 ;Every Domain in it's own task (unless running in original mode)
"RTN","HMPDJFSP",71,0)
 I NEWSUB D  Q:$G(HMPFERR) ""
"RTN","HMPDJFSP",72,0)
 . ; if patient's extracts are held (version mismatch), put DFN on wait list
"RTN","HMPDJFSP",73,0)
 . I +HMPFDFN,$G(^XTMP("HMPFS~"_HMPSRV("ien"),"waiting")) S ^XTMP("HMPFS~"_HMPSRV("ien"),"waiting",HMPFDFN)="" QUIT
"RTN","HMPDJFSP",74,0)
 . D UPDSTS(HMPFDFN,$P(HMPBATCH,"~",2),1) ;moved from background job to once in foreground 12/17/2015
"RTN","HMPDJFSP",75,0)
 . I 'HMPSVERS N HMPFDOM M HMPFDOM=DOMAINS D QUINIT(HMPBATCH,HMPFDFN,.HMPFDOM) Q  ;US11019 Enable previous behavior
"RTN","HMPDJFSP",76,0)
 . S I="" F  S I=$O(DOMAINS(I)) Q:'I  D
"RTN","HMPDJFSP",77,0)
 ..  N HMPFDOM
"RTN","HMPDJFSP",78,0)
 ..  S HMPFDOM(1)=DOMAINS(I)
"RTN","HMPDJFSP",79,0)
 ..  D QUINIT(HMPBATCH,HMPFDFN,.HMPFDOM)
"RTN","HMPDJFSP",80,0)
 ;===JD START===
"RTN","HMPDJFSP",81,0)
 ; For patient resubscribes, need to send demographics ONLY
"RTN","HMPDJFSP",82,0)
 I 'NEWSUB,HMPFDFN'="OPD",'$D(^XTMP(HMPBATCH,0,"status")) D  ;DE3331 check expanded to ensure not current
"RTN","HMPDJFSP",83,0)
 . N HMPFDOM,HMPDSAVE ;DE3331
"RTN","HMPDJFSP",84,0)
 . M HMPDSAVE=DOMAINS ;DE3331
"RTN","HMPDJFSP",85,0)
 . K DOMAINS S DOMAINS(1)="patient"
"RTN","HMPDJFSP",86,0)
 . M HMPFDOM=DOMAINS
"RTN","HMPDJFSP",87,0)
 . D QUINIT(HMPBATCH,HMPFDFN,.HMPFDOM)
"RTN","HMPDJFSP",88,0)
 . I $G(HMPSVERS) S I="" F  S I=$O(HMPDSAVE(I)) Q:'I  D  ;DE3331 create empty metastamp entries for remaining domains
"RTN","HMPDJFSP",89,0)
 ..  I HMPDSAVE(I)'="patient" D SETMARK("Meta",HMPFDFN,HMPDSAVE(I))
"RTN","HMPDJFSP",90,0)
 ;===JD END===
"RTN","HMPDJFSP",91,0)
 Q "/hmp/subscription/"_HMPSRV_"/patient/"_$$PID^HMPDJFS(HMPFDFN)
"RTN","HMPDJFSP",92,0)
 ;
"RTN","HMPDJFSP",93,0)
QUINIT(HMPBATCH,HMPFDFN,HMPFDOM) ; Queue the initial extracts for a patient
"RTN","HMPDJFSP",94,0)
 ; HMPBATCH="HMPFX~hmpsrvid~dfn"  example: HMPFX~hmpXYZ~229
"RTN","HMPDJFSP",95,0)
 ; HMPFDOM(n)="domainName"
"RTN","HMPDJFSP",96,0)
 ; 
"RTN","HMPDJFSP",97,0)
 ; ^XTMP("HMPFX~hmpsrvid~dfn",0)=expires^created^HMP Patient Extract
"RTN","HMPDJFSP",98,0)
 ;                           ,0,"status",domain)=0:waiting;1:ready
"RTN","HMPDJFSP",99,0)
 ;                           ,0,"task",taskIen)=""
"RTN","HMPDJFSP",100,0)
 ;                           ,taskIen,domain,... (extract data)
"RTN","HMPDJFSP",101,0)
 ;
"RTN","HMPDJFSP",102,0)
 ; set up the domains to be done by this task
"RTN","HMPDJFSP",103,0)
 N I S I=0 F  S I=$O(HMPFDOM(I)) Q:'I  D SETDOM("status",HMPFDOM(I),0)
"RTN","HMPDJFSP",104,0)
 ;
"RTN","HMPDJFSP",105,0)
 ; create task for this set of domains within the batch
"RTN","HMPDJFSP",106,0)
 N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTSAVE,ZTSK
"RTN","HMPDJFSP",107,0)
 S ZTRTN="DQINIT^HMPDJFSP",ZTIO="HMP EXTRACT RESOURCE",ZTDTH=$H
"RTN","HMPDJFSP",108,0)
 S ZTSAVE("HMPBATCH")="",ZTSAVE("HMPFDFN")="",ZTSAVE("HMPFDOM(")=""
"RTN","HMPDJFSP",109,0)
 S ZTSAVE("HMPENVIR(")=""  ; environment information
"RTN","HMPDJFSP",110,0)
 S ZTSAVE("HMPSTMP")="" ; Operational data stamptime US6734
"RTN","HMPDJFSP",111,0)
 S ZTSAVE("HMPSVERS")="" ;sync version US11019
"RTN","HMPDJFSP",112,0)
 S ZTDESC="Build HMP domains for a patient"
"RTN","HMPDJFSP",113,0)
 D ^%ZTLOAD
"RTN","HMPDJFSP",114,0)
 I $G(ZTSK) S ^XTMP(HMPBATCH,0,"task",ZTSK)="" Q
"RTN","HMPDJFSP",115,0)
 D SETERR^HMPDJFS("Task not created")
"RTN","HMPDJFSP",116,0)
 Q
"RTN","HMPDJFSP",117,0)
SETDOM(ATTRIB,DOMAIN,VALUE,HMPMETA) ; Set value for a domain ; cpc TA41760
"RTN","HMPDJFSP",118,0)
 ; ATTRIB: "status" or "count" attribute
"RTN","HMPDJFSP",119,0)
 ; for status, VALUE: 0=waiting, 1=ready
"RTN","HMPDJFSP",120,0)
 ; for count,  VALUE: count of items
"RTN","HMPDJFSP",121,0)
 ;don't update to finished value if just tracking metastamp
"RTN","HMPDJFSP",122,0)
 I $G(HMPMETA)'="" S ^XTMP(HMPBATCH,0,ATTRIB,DOMAIN,$S(HMPMETA=1:"MetaStamp",HMPMETA=2:"Combined",1:"Staging"),$S(VALUE:"Stop",1:"Start"))=$H Q:(HMPMETA=1&VALUE)  ;cpc TA41760 10/7/2015 add time logging
"RTN","HMPDJFSP",123,0)
 S ^XTMP(HMPBATCH,0,ATTRIB,DOMAIN)=VALUE
"RTN","HMPDJFSP",124,0)
 Q
"RTN","HMPDJFSP",125,0)
SETMARK(TYPE,HMPFDFN,HMPBATCH) ; Post markers for begin and end of initial synch
"RTN","HMPDJFSP",126,0)
 ; ^XTMP("HMPFP","tidy",hmpServer,fmDate,sequence)=batch
"RTN","HMPDJFSP",127,0)
 Q:$G(HMPENVIR("converting"))  ; don't set markers during conversion
"RTN","HMPDJFSP",128,0)
 N HPMSRV,NODES,X
"RTN","HMPDJFSP",129,0)
 S HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSP",130,0)
 D POST^HMPDJFS(HMPFDFN,"sync"_TYPE,HMPBATCH,"",HMPSRV,.NODES)
"RTN","HMPDJFSP",131,0)
 Q:TYPE="Start"!(TYPE="Meta")  ; US11019
"RTN","HMPDJFSP",132,0)
 D SETTIDY("<done>",.NODES)
"RTN","HMPDJFSP",133,0)
 Q
"RTN","HMPDJFSP",134,0)
 ;
"RTN","HMPDJFSP",135,0)
DQINIT ; Dequeue initial extracts
"RTN","HMPDJFSP",136,0)
 ; expects:  HMPBATCH, HMPFDFN, HMPFDOM, ZTSK
"RTN","HMPDJFSP",137,0)
 N COUNT,HMPFDOMI,HMPFSYS,HMPFZTSK
"RTN","HMPDJFSP",138,0)
 F COUNT=1:1:10 Q:$D(^XTMP(HMPBATCH,0,"task",ZTSK))  H .5 ;cpc 9/18/2015 In case job running too quickly
"RTN","HMPDJFSP",139,0)
 I '$D(^XTMP(HMPBATCH,0,"task",ZTSK)) Q  ; extract was superceded
"RTN","HMPDJFSP",140,0)
 K ^TMP("HMPERR",$J)
"RTN","HMPDJFSP",141,0)
 S HMPFSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPDJFSP",142,0)
 S HMPFZTSK=ZTSK ; just in case the unexpected happens to ZTSK
"RTN","HMPDJFSP",143,0)
 S ^XTMP(HMPBATCH,0,"task",ZTSK,"job")=$J
"RTN","HMPDJFSP",144,0)
 S ^XTMP(HMPBATCH,0,"task",ZTSK,"wait")=$$HDIFF^XLFDT($H,$G(^XTMP(HMPBATCH,0,"time")),2)
"RTN","HMPDJFSP",145,0)
 ;
"RTN","HMPDJFSP",146,0)
 ;  S68 check space
"RTN","HMPDJFSP",147,0)
 D CHKSP^HMPUTILS($P(HMPBATCH,"~",2)) ; US8228
"RTN","HMPDJFSP",148,0)
 N HMPMETA ; US6734
"RTN","HMPDJFSP",149,0)
 F HMPMETA=$S(HMPSVERS:2,1:1):-1:0 D  Q:HMPMETA=2  ;
"RTN","HMPDJFSP",150,0)
 . I HMPMETA=0,+HMPFDFN D SETMARK("Start",HMPFDFN,HMPBATCH) ; US6734
"RTN","HMPDJFSP",151,0)
 . S HMPFDOMI=""
"RTN","HMPDJFSP",152,0)
 . F  S HMPFDOMI=$O(HMPFDOM(HMPFDOMI)) Q:'HMPFDOMI  D
"RTN","HMPDJFSP",153,0)
 ..  D SETDOM("status",HMPFDOM(HMPFDOMI),0,HMPMETA) ; cpc TA41760
"RTN","HMPDJFSP",154,0)
 ..  I HMPFDFN="OPD" D
"RTN","HMPDJFSP",155,0)
 ...   D DOMOPD(HMPFDOM(HMPFDOMI))
"RTN","HMPDJFSP",156,0)
 ...   I HMPMETA=2 D UPD^HMPMETA(HMPFDOM(HMPFDOMI)) ; US6734 - mark OPD domain as complete in metastamp
"RTN","HMPDJFSP",157,0)
 ..  I +HMPFDFN D DOMPT(HMPFDOM(HMPFDOMI))
"RTN","HMPDJFSP",158,0)
 ..  I HMPMETA=1 D:'$O(HMPFDOM(HMPFDOMI)) MERGE^HMPMETA(HMPBATCH) D:HMPFDFN="OPD" UPD^HMPMETA(HMPFDOM(HMPFDOMI)) Q
"RTN","HMPDJFSP",159,0)
 ..  I HMPMETA=2 D
"RTN","HMPDJFSP",160,0)
 ...   D MERGE1^HMPMETA(HMPBATCH,HMPFDOM(HMPFDOMI)) ;US11019 - merge data into metastamp
"RTN","HMPDJFSP",161,0)
 ...   I +HMPFDFN D SETMARK("Meta",HMPFDFN,HMPFDOM(HMPFDOMI)) ;US11019 - new freshness entry replacing syncStart
"RTN","HMPDJFSP",162,0)
 ...   I HMPFDFN="OPD" D:'$O(HMPFDOM(HMPFDOMI)) MERGE^HMPMETA(HMPBATCH) ; US6734 - merge data into metastamp
"RTN","HMPDJFSP",163,0)
 ..  D SETDOM("status",HMPFDOM(HMPFDOMI),1,HMPMETA) ; ready ; cpc TA41760
"RTN","HMPDJFSP",164,0)
 ..  ; if superceded, stop processing domains
"RTN","HMPDJFSP",165,0)
 ..  I '$D(^XTMP(HMPBATCH,0,"task",HMPFZTSK)) S HMPFDOMI=999 Q
"RTN","HMPDJFSP",166,0)
 ..  ; -- if more domains, check ^XTMP size before continuing; may have to HANG if too big  *BEGIN*S68-JCH*
"RTN","HMPDJFSP",167,0)
 ..  I +HMPFDFN,HMPFDOMI'=+$O(HMPFDOM(""),-1) D CHKXTMP(HMPBATCH,HMPFZTSK) ;; US 5074 - removed
"RTN","HMPDJFSP",168,0)
 ; if superceded, remove extracts produced by this task
"RTN","HMPDJFSP",169,0)
 I '$D(^XTMP(HMPBATCH,0,"task",HMPFZTSK)) K ^XTMP(HMPBATCH,HMPFZTSK) Q
"RTN","HMPDJFSP",170,0)
 ; don't assume initialized, since we may split domains to other tasks
"RTN","HMPDJFSP",171,0)
 I $$INITDONE(HMPBATCH) D  ; if all domains extracted
"RTN","HMPDJFSP",172,0)
 . S COUNT=$O(^TMP("HMPERR",$J,"")) I COUNT>0 D POSTERR(COUNT,HMPFDFN)
"RTN","HMPDJFSP",173,0)
 . D SETMARK("Done",HMPFDFN,HMPBATCH) ; - add updated syncStatus
"RTN","HMPDJFSP",174,0)
 . D MVFRUPD(HMPBATCH,HMPFDFN)        ; - move freshness updates over
"RTN","HMPDJFSP",175,0)
 ;
"RTN","HMPDJFSP",176,0)
 K ^XTMP(HMPBATCH,0,"task",HMPFZTSK)  ; this task is done
"RTN","HMPDJFSP",177,0)
 Q
"RTN","HMPDJFSP",178,0)
 ;
"RTN","HMPDJFSP",179,0)
DOMPT(HMPFADOM) ; Load a patient domain
"RTN","HMPDJFSP",180,0)
 N FILTER,RSLT,HMPFEST,HMPCHNK  ; *S68-JCH*
"RTN","HMPDJFSP",181,0)
 S FILTER("noHead")=1
"RTN","HMPDJFSP",182,0)
 S FILTER("domain")=HMPFADOM
"RTN","HMPDJFSP",183,0)
 S FILTER("patientId")=HMPFDFN
"RTN","HMPDJFSP",184,0)
 ; -- domain var used for chunking patient objects using <domain>#<number> construct  *BEGIN*S68-JCH*
"RTN","HMPDJFSP",185,0)
 S HMPCHNK=HMPFADOM
"RTN","HMPDJFSP",186,0)
 S HMPCHNK("trigger count")=$$CHNKCNT(HMPFADOM)  ; *END*S68-JCH*
"RTN","HMPDJFSP",187,0)
 D GET^HMPDJ(.RSLT,.FILTER) ;US11019 I $G(HMPMETA) D SETDOM("status",HMPFADOM,1,1) Q  ;US11019/US6734 - do not update stream if compiling metastamp ; CPC TA41760
"RTN","HMPDJFSP",188,0)
 I $G(HMPMETA)=1 D SETDOM("status",HMPFADOM,1,1) Q  ;US11019/US6734 - do not update stream if compiling metastamp ; CPC TA41760
"RTN","HMPDJFSP",189,0)
 ; add to HMPFS queue if total>0 OR this is the first chunck (#0) section  *S68-JCH*
"RTN","HMPDJFSP",190,0)
 I ($G(@RSLT@("total"),0)>0)!($P(HMPCHNK,"#",2)=0) D CHNKFIN  ; *S68-JCH*
"RTN","HMPDJFSP",191,0)
 Q
"RTN","HMPDJFSP",192,0)
 ;
"RTN","HMPDJFSP",193,0)
DOMOPD(HMPFADOM) ; Load an operational domain in smaller batches
"RTN","HMPDJFSP",194,0)
 ; expects HMPBATCH,HMPFZTSK
"RTN","HMPDJFSP",195,0)
 N FILTER,RSLT,NEXTID,DONE,HMPFEST,HMPFSEC,HMPFSIZE,HMPFLDON ; cpc
"RTN","HMPDJFSP",196,0)
 S HMPFSIZE=1000               ; section size (adjust to taste)
"RTN","HMPDJFSP",197,0)
 S HMPFEST=$$TOTAL(HMPFADOM)   ; set estimated domain total
"RTN","HMPDJFSP",198,0)
 S NEXTID=0,HMPFSEC=0,DONE=0,HMPFLDON=0 ;cpc
"RTN","HMPDJFSP",199,0)
 S HMPFADOM=HMPFADOM_"#"_HMPFSEC
"RTN","HMPDJFSP",200,0)
 F  D  Q:DONE
"RTN","HMPDJFSP",201,0)
 . N FILTER,RSLT
"RTN","HMPDJFSP",202,0)
 . S FILTER("noHead")=1
"RTN","HMPDJFSP",203,0)
 . S FILTER("domain")=HMPFADOM ; include section for ^XTMP location
"RTN","HMPDJFSP",204,0)
 . S FILTER("start")=NEXTID
"RTN","HMPDJFSP",205,0)
 . S FILTER("limit")=HMPFSIZE
"RTN","HMPDJFSP",206,0)
 . D GET^HMPEF(.RSLT,.FILTER)
"RTN","HMPDJFSP",207,0)
 . I $G(HMPMETA)=1 S DONE=1 Q  ;US6734 - do not update stream if compiling metastamp
"RTN","HMPDJFSP",208,0)
 . I '$D(^XTMP(HMPBATCH,0,"task",HMPFZTSK)) S DONE=1 QUIT  ; superceded
"RTN","HMPDJFSP",209,0)
 . I $G(^XTMP(HMPBATCH,HMPFZTSK,HMPFADOM,"total"),0)=0,(HMPFSEC>0) S DONE=1 QUIT
"RTN","HMPDJFSP",210,0)
 . I $G(^XTMP(HMPBATCH,HMPFZTSK,HMPFADOM,"finished")) S DONE=1
"RTN","HMPDJFSP",211,0)
 . D MOD4STRM(HMPFADOM)
"RTN","HMPDJFSP",212,0)
 . I DONE S HMPFEST=^XTMP(HMPBATCH,0,"count",$P(HMPFADOM,"#")) S:'HMPFEST HMPFEST=1
"RTN","HMPDJFSP",213,0)
 . D POSTSEC(HMPFADOM,HMPFEST,HMPFSIZE)
"RTN","HMPDJFSP",214,0)
 . Q:DONE
"RTN","HMPDJFSP",215,0)
 . S NEXTID=$G(^XTMP(HMPBATCH,HMPFZTSK,HMPFADOM,"last"),0)
"RTN","HMPDJFSP",216,0)
 . S HMPFSEC=HMPFSEC+1
"RTN","HMPDJFSP",217,0)
 . S $P(HMPFADOM,"#",2)=HMPFSEC
"RTN","HMPDJFSP",218,0)
 Q
"RTN","HMPDJFSP",219,0)
 ;
"RTN","HMPDJFSP",220,0)
CHNKCNT(DOMAIN) ; -- get patient object chunk count trigger                        *BEGIN*S68-JCH*
"RTN","HMPDJFSP",221,0)
 ; input: DOMAIN := current domain name being processed
"RTN","HMPDJFSP",222,0)
 Q $S(+$$GET^XPAR("PKG","HMP DOMAIN SIZES",$P($G(DOMAIN),"#"),"Q")>3000:500,1:1000)  ; *END*S68-JCH*
"RTN","HMPDJFSP",223,0)
 ;
"RTN","HMPDJFSP",224,0)
CHNKINIT(HMP,HMPI) ; -- init chunk section callback  *BEGIN*S68-JCH*
"RTN","HMPDJFSP",225,0)
 ; input by ref:  HMP := $NA of location for chunk of objects
"RTN","HMPDJFSP",226,0)
 ;               HMPI := number of objects in @HMP
"RTN","HMPDJFSP",227,0)
 ; -- quit if not in chunking mode
"RTN","HMPDJFSP",228,0)
 Q:'$D(HMPCHNK)
"RTN","HMPDJFSP",229,0)
 ;
"RTN","HMPDJFSP",230,0)
 S $P(HMPCHNK,"#",2)=$S(HMPCHNK["#":$P(HMPCHNK,"#",2)+1,1:0)
"RTN","HMPDJFSP",231,0)
 S HMP=$NA(^XTMP(HMPBATCH,HMPFZTSK,HMPCHNK))
"RTN","HMPDJFSP",232,0)
 K @HMP
"RTN","HMPDJFSP",233,0)
 S HMPI=0
"RTN","HMPDJFSP",234,0)
 Q  ; *END*S68-JCH*
"RTN","HMPDJFSP",235,0)
 ;
"RTN","HMPDJFSP",236,0)
CHNKCHK(HMP,HMPI) ; -- check if chunk should be queued callback *BEGIN*S68-JCH*
"RTN","HMPDJFSP",237,0)
 ; (called by ADD^HMPDJ & HMP1^HMPDJ02)
"RTN","HMPDJFSP",238,0)
 ; input by ref:  HMP := $NA of location for chunk of objects
"RTN","HMPDJFSP",239,0)
 ;               HMPI := number of objects in @HMP
"RTN","HMPDJFSP",240,0)
 ; quit if not in chunking mode
"RTN","HMPDJFSP",241,0)
 Q:'$D(HMPCHNK)
"RTN","HMPDJFSP",242,0)
 ;
"RTN","HMPDJFSP",243,0)
 ; execute 'whether to chunk' criteria
"RTN","HMPDJFSP",244,0)
 Q:HMPI<HMPCHNK("trigger count")
"RTN","HMPDJFSP",245,0)
 ; -- add tail to json to section
"RTN","HMPDJFSP",246,0)
 D GTQ^HMPDJ
"RTN","HMPDJFSP",247,0)
 ; -- finish section and put on HMPFS~ queue
"RTN","HMPDJFSP",248,0)
 D CHNKFIN
"RTN","HMPDJFSP",249,0)
 ; -- check ^XTMP size before continuing; may have to HANG if too big
"RTN","HMPDJFSP",250,0)
 D CHKXTMP(HMPBATCH,HMPFZTSK)  ; US5074 disable loopback
"RTN","HMPDJFSP",251,0)
 ; -- initialize for next section
"RTN","HMPDJFSP",252,0)
 D CHNKINIT(.HMP,.HMPI)
"RTN","HMPDJFSP",253,0)
 Q  ; *END*S68-JCH*
"RTN","HMPDJFSP",254,0)
 ;
"RTN","HMPDJFSP",255,0)
CHNKFIN ; -- finish chunk section callback *BEGIN*S68-JCH*
"RTN","HMPDJFSP",256,0)
 ; -- quit if not in chunking mode
"RTN","HMPDJFSP",257,0)
 Q:'$D(HMPCHNK)
"RTN","HMPDJFSP",258,0)
 ;
"RTN","HMPDJFSP",259,0)
 D MOD4STRM(HMPCHNK)
"RTN","HMPDJFSP",260,0)
 ; -- domain#number, <no estimated do> , chunk trigger count for domain
"RTN","HMPDJFSP",261,0)
 D POSTSEC(HMPCHNK,,HMPCHNK("trigger count"))
"RTN","HMPDJFSP",262,0)
 Q  ; *END*S68-JCH*
"RTN","HMPDJFSP",263,0)
 ;
"RTN","HMPDJFSP",264,0)
MOD4STRM(DOMAIN) ; modify extract to be ready for stream
"RTN","HMPDJFSP",265,0)
 ; expects: HMPBATCH, HMPFSYS, HMPFZTSK
"RTN","HMPDJFSP",266,0)
 ; results are in ^XTMP("HMPFX~hmpsrv~dfn",DFN,DOMAIN,...)
"RTN","HMPDJFSP",267,0)
 ; syncError: {uid,collection,error}  uid=urn:va:syncError:sysId:dfn:extract
"RTN","HMPDJFSP",268,0)
 N DFN,HMPSRV,COUNT,DOMONLY
"RTN","HMPDJFSP",269,0)
 S DOMONLY=$P(DOMAIN,"#")
"RTN","HMPDJFSP",270,0)
 S DFN=$P(HMPBATCH,"~",3),HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSP",271,0)
 S COUNT=+$G(^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,"total"),0)
"RTN","HMPDJFSP",272,0)
 I COUNT=0 S ^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,1,1)="null"
"RTN","HMPDJFSP",273,0)
 ;
"RTN","HMPDJFSP",274,0)
 S ^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,"total")=COUNT  ; include errors and/or empty
"RTN","HMPDJFSP",275,0)
 D SETDOM("count",DOMONLY,$G(^XTMP(HMPBATCH,0,"count",DOMONLY),0)+COUNT)
"RTN","HMPDJFSP",276,0)
 Q
"RTN","HMPDJFSP",277,0)
 ;
"RTN","HMPDJFSP",278,0)
POSTSEC(DOMAIN,ETOTAL,SECSIZE) ; post domain section to stream and set tidy nodes
"RTN","HMPDJFSP",279,0)
 N DFN,HMPSRV,COUNT,X,NODES
"RTN","HMPDJFSP",280,0)
 S COUNT=^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,"total")
"RTN","HMPDJFSP",281,0)
 S ETOTAL=$G(ETOTAL,COUNT)
"RTN","HMPDJFSP",282,0)
 s SECSIZE=$G(SECSIZE,0)
"RTN","HMPDJFSP",283,0)
 S DFN=$P(HMPBATCH,"~",3)
"RTN","HMPDJFSP",284,0)
 S HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSP",285,0)
 D POST^HMPDJFS(DFN,"syncDomain",DOMAIN_":"_HMPFZTSK_":"_COUNT_":"_ETOTAL_":"_SECSIZE,"",HMPSRV,.NODES)
"RTN","HMPDJFSP",286,0)
 D SETTIDY(DOMAIN,.NODES)
"RTN","HMPDJFSP",287,0)
 Q
"RTN","HMPDJFSP",288,0)
 ;
"RTN","HMPDJFSP",289,0)
SETTIDY(DOMAIN,NODES) ; Set tidy nodes for clean-up of the extracts in ^XTMP
"RTN","HMPDJFSP",290,0)
 ; expects HMPBATCH,HMPFZTSK
"RTN","HMPDJFSP",291,0)
 N X,STREAM,SEQ
"RTN","HMPDJFSP",292,0)
 S X="" F  S X=$O(NODES(X)) Q:X=""  D      ; iterate hmp servers
"RTN","HMPDJFSP",293,0)
 . S STREAM="HMPFS~"_X_"~"_$P(NODES(X),U)  ; HMPFS~hmpSrv~fmDate
"RTN","HMPDJFSP",294,0)
 . S SEQ=$P(NODES(X),U,2)
"RTN","HMPDJFSP",295,0)
 . S ^XTMP(STREAM,"tidy",SEQ,"batch")=HMPBATCH
"RTN","HMPDJFSP",296,0)
 . S ^XTMP(STREAM,"tidy",SEQ,"domain")=DOMAIN
"RTN","HMPDJFSP",297,0)
 . S ^XTMP(STREAM,"tidy",SEQ,"task")=HMPFZTSK
"RTN","HMPDJFSP",298,0)
 Q
"RTN","HMPDJFSP",299,0)
 ;
"RTN","HMPDJFSP",300,0)
MVFRUPD(HMPBATCH,HMPFDFN) ; Move freshness updates over active stream
"RTN","HMPDJFSP",301,0)
 N I,X,FROM,HMPSRV,DFN,TYPE,ID,ACT
"RTN","HMPDJFSP",302,0)
 S HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSP",303,0)
 D UPDSTS(HMPFDFN,HMPSRV,2)              ; now initialized 
"RTN","HMPDJFSP",304,0)
 S FROM="HMPFH~"_HMPSRV_"~"_HMPFDFN
"RTN","HMPDJFSP",305,0)
 S I=0 F  S I=$O(^XTMP(FROM,I)) Q:'I  D  ; move over held updates
"RTN","HMPDJFSP",306,0)
 . S X=^XTMP(FROM,I)
"RTN","HMPDJFSP",307,0)
 . S DFN=$P(X,U),TYPE=$P(X,U,2),ID=$P(X,U,3),ACT=$P(X,U,4)
"RTN","HMPDJFSP",308,0)
 . D POST^HMPDJFS(DFN,TYPE,ID,ACT,HMPSRV)
"RTN","HMPDJFSP",309,0)
 K ^XTMP(FROM)
"RTN","HMPDJFSP",310,0)
 Q
"RTN","HMPDJFSP",311,0)
 ;
"RTN","HMPDJFSP",312,0)
BLDSERR(DFN,DOMAIN,ERRJSON) ; Create syncError object in ERRJSON
"RTN","HMPDJFSP",313,0)
 ; expects: HMPBATCH, HMPFSYS, HMPFZTSK
"RTN","HMPDJFSP",314,0)
 N COUNT,ERRVAL,ERROBJ,ERR,ERRMSG,SYNCERR
"RTN","HMPDJFSP",315,0)
 M ERRVAL=^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,"error")
"RTN","HMPDJFSP",316,0)
 I $G(ERRVAL)="" Q
"RTN","HMPDJFSP",317,0)
 S ERRVAL="{"_ERRVAL_"}"
"RTN","HMPDJFSP",318,0)
 D DECODE^HMPJSON("ERRVAL","ERROBJ","ERR")
"RTN","HMPDJFSP",319,0)
 I $D(ERR) S $EC=",UJSON decode error,"
"RTN","HMPDJFSP",320,0)
 K ^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,"error")
"RTN","HMPDJFSP",321,0)
 S ERRMSG=ERROBJ("error","message")
"RTN","HMPDJFSP",322,0)
 Q:'$L(ERRMSG)
"RTN","HMPDJFSP",323,0)
 S SYNCERR("uid")="urn:va:syncError:"_HMPFSYS_":"_DFN_":"_DOMAIN
"RTN","HMPDJFSP",324,0)
 S SYNCERR("collection")=DOMAIN
"RTN","HMPDJFSP",325,0)
 S SYNCERR("error")=ERRMSG
"RTN","HMPDJFSP",326,0)
 D ENCODE^HMPJSON("SYNCERR","ERRJSON","ERR") I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","HMPDJFSP",327,0)
 S COUNT=$O(^TMP("HMPERR",$J,""),-1)+1
"RTN","HMPDJFSP",328,0)
 M ^TMP("HMPERR",$J,COUNT)=ERRJSON
"RTN","HMPDJFSP",329,0)
 Q
"RTN","HMPDJFSP",330,0)
 ;
"RTN","HMPDJFSP",331,0)
POSTERR(COUNT,DFN) ; put error into ^XTMP(batch)
"RTN","HMPDJFSP",332,0)
 N CNT,NODE,HMPSRV
"RTN","HMPDJFSP",333,0)
 S HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSP",334,0)
 S CNT=0 F  S CNT=$O(^TMP("HMPERR",$J,CNT)) Q:CNT'>0  D
"RTN","HMPDJFSP",335,0)
 .S NODE=$G(^TMP("HMPERR",$J,CNT,1))
"RTN","HMPDJFSP",336,0)
 .S ^XTMP(HMPBATCH,HMPFZTSK,"error",CNT,1)=NODE
"RTN","HMPDJFSP",337,0)
 .I CNT>1 S ^XTMP(HMPBATCH,HMPFZTSK,"error",CNT,.3)=","
"RTN","HMPDJFSP",338,0)
 D POST^HMPDJFS(DFN,"syncError","error:"_HMPFZTSK_":"_COUNT_":"_COUNT,"",HMPSRV)
"RTN","HMPDJFSP",339,0)
 Q
"RTN","HMPDJFSP",340,0)
 ;
"RTN","HMPDJFSP",341,0)
INITDONE(HMPBATCH) ; Return 1 if all domains are done
"RTN","HMPDJFSP",342,0)
 N X,DONE
"RTN","HMPDJFSP",343,0)
 S X="",DONE=1
"RTN","HMPDJFSP",344,0)
 F  S X=$O(^XTMP(HMPBATCH,0,"status",X)) Q:'$L(X)  I '^(X) S DONE=0
"RTN","HMPDJFSP",345,0)
 Q DONE
"RTN","HMPDJFSP",346,0)
 ;
"RTN","HMPDJFSP",347,0)
SETPAT(DFN,SRV,NEWSUB) ; Add patient to 800000 if not there
"RTN","HMPDJFSP",348,0)
 N ERR,FDA,IEN,IENROOT
"RTN","HMPDJFSP",349,0)
 S IEN=$O(^HMP(800000,"B",SRV,0))
"RTN","HMPDJFSP",350,0)
 I 'IEN D SETERR^HMPDJFS("Unable to find server: "_SRV) QUIT
"RTN","HMPDJFSP",351,0)
 ; for operational, only start sync if not yet subscribed
"RTN","HMPDJFSP",352,0)
 I DFN="OPD" D  QUIT
"RTN","HMPDJFSP",353,0)
 . L +^HMP(800000,IEN):5 E  D SETERR^HMPDJFS("Unable to lock server: "_SRV) Q
"RTN","HMPDJFSP",354,0)
 . ; status is empty string (not 0) when unsubscribed
"RTN","HMPDJFSP",355,0)
 . S NEWSUB='$L($P($G(^HMP(800000,IEN,0)),U,3))
"RTN","HMPDJFSP",356,0)
 . I NEWSUB D UPDOPD(IEN,1) ; set to subscribed
"RTN","HMPDJFSP",357,0)
 . L -^HMP(800000,IEN)
"RTN","HMPDJFSP",358,0)
 ;
"RTN","HMPDJFSP",359,0)
 ; for patient, check subscribed and get the PID
"RTN","HMPDJFSP",360,0)
 L +^HMP(800000,IEN,1,DFN):5 E  D SETERR^HMPDJFS("Unable to lock patient: "_DFN) Q
"RTN","HMPDJFSP",361,0)
 S NEWSUB='$D(^HMP(800000,IEN,1,DFN))
"RTN","HMPDJFSP",362,0)
 I NEWSUB D ADDPAT(DFN,IEN)
"RTN","HMPDJFSP",363,0)
 L -^HMP(800000,IEN,1,DFN)
"RTN","HMPDJFSP",364,0)
 Q
"RTN","HMPDJFSP",365,0)
 ;
"RTN","HMPDJFSP",366,0)
UPDOPD(SRV,STS) ; Update status of operational synch
"RTN","HMPDJFSP",367,0)
 N FDA,ERR,DIERR
"RTN","HMPDJFSP",368,0)
 S FDA(800000,SRV_",",.03)=STS
"RTN","HMPDJFSP",369,0)
 D FILE^DIE("","FDA","ERR")
"RTN","HMPDJFSP",370,0)
 I $D(ERR) D SETERR^HMPDJFS("Error changing operational status")
"RTN","HMPDJFSP",371,0)
 D CLEAN^DILF
"RTN","HMPDJFSP",372,0)
 Q
"RTN","HMPDJFSP",373,0)
ADDPAT(DFN,SRV) ; Add a patient as subscribed for server
"RTN","HMPDJFSP",374,0)
 N FDA,FDAIEN,DIERR,ERR,IENS
"RTN","HMPDJFSP",375,0)
 S IENS="?+"_DFN_","_SRV_","
"RTN","HMPDJFSP",376,0)
 S FDAIEN(DFN)=DFN  ; help DINUM to work
"RTN","HMPDJFSP",377,0)
 S FDA(800000.01,IENS,.01)=DFN
"RTN","HMPDJFSP",378,0)
 S FDA(800000.01,IENS,2)=0
"RTN","HMPDJFSP",379,0)
 S FDA(800000.01,IENS,3)=$$NOW^XLFDT
"RTN","HMPDJFSP",380,0)
 D UPDATE^DIE("","FDA","FDAIEN","ERR")
"RTN","HMPDJFSP",381,0)
 I $D(ERR) D SETERR^HMPDJFS("Error adding patient subscription")
"RTN","HMPDJFSP",382,0)
 D CLEAN^DILF
"RTN","HMPDJFSP",383,0)
 Q
"RTN","HMPDJFSP",384,0)
 ;
"RTN","HMPDJFSP",385,0)
UPDSTS(DFN,SRVNM,STS) ; Update the sync status
"RTN","HMPDJFSP",386,0)
 N SRV,ERR ;US11019
"RTN","HMPDJFSP",387,0)
 S SRV=$O(^HMP(800000,"B",SRVNM,0)) I 'SRV D SETERR^HMPDJFS("Missing Server") Q
"RTN","HMPDJFSP",388,0)
 I DFN="OPD" D UPDOPD(SRV,STS) QUIT
"RTN","HMPDJFSP",389,0)
 ;
"RTN","HMPDJFSP",390,0)
 S FDA(800000.01,DFN_","_SRV_",",2)=STS
"RTN","HMPDJFSP",391,0)
 S FDA(800000.01,DFN_","_SRV_",",3)=$$NOW^XLFDT
"RTN","HMPDJFSP",392,0)
 D FILE^DIE("","FDA","ERR")
"RTN","HMPDJFSP",393,0)
 I $D(ERR) D SETERR^HMPDJFS("Error updating patient sync status")
"RTN","HMPDJFSP",394,0)
 D CLEAN^DILF
"RTN","HMPDJFSP",395,0)
 Q
"RTN","HMPDJFSP",396,0)
 ;
"RTN","HMPDJFSP",397,0)
UPDPAT(DFN,SRV,STS) ; DEPRECATED?
"RTN","HMPDJFSP",398,0)
 N ERR,FDA,IEN
"RTN","HMPDJFSP",399,0)
 S IEN=$O(^HMP(800000,"B",SRV,"")) I +IEN'>0 Q
"RTN","HMPDJFSP",400,0)
 I DFN="OPD" D
"RTN","HMPDJFSP",401,0)
 . S FDA(800000,"?"_IEN_",",.01)=SRV
"RTN","HMPDJFSP",402,0)
 . S FDA(800000,"?"_IEN_",",.03)=STS
"RTN","HMPDJFSP",403,0)
 I +DFN>0 D
"RTN","HMPDJFSP",404,0)
 .S FDA(800000.01,"?"_DFN_","_IEN_",",.01)=DFN
"RTN","HMPDJFSP",405,0)
 .S FDA(800000.01,"?"_DFN_","_IEN_",",2)=STS
"RTN","HMPDJFSP",406,0)
 D UPDATE^DIE("","FDA","","ERR")
"RTN","HMPDJFSP",407,0)
 Q
"RTN","HMPDJFSP",408,0)
 ;
"RTN","HMPDJFSP",409,0)
TOTAL(DOMAIN) ; return size total
"RTN","HMPDJFSP",410,0)
 N I,X,SIZE,ROOT
"RTN","HMPDJFSP",411,0)
 S SIZE=0
"RTN","HMPDJFSP",412,0)
 F I=1:1 S X=$T(OPDOMS+I^HMPDJFSD) Q:$P(X,";",3)="zzzzz"  D  Q:SIZE
"RTN","HMPDJFSP",413,0)
 . I $P(X,";",3)'=DOMAIN Q
"RTN","HMPDJFSP",414,0)
 . S ROOT=$P(X,";",4)
"RTN","HMPDJFSP",415,0)
 . I ROOT="^HMP(800000.11)" S SIZE=$G(^HMP(800000.11,"ACNT",DOMAIN)) Q
"RTN","HMPDJFSP",416,0)
 . I $L(ROOT) S SIZE=$P($G(@ROOT@(0)),U,4)
"RTN","HMPDJFSP",417,0)
 Q $S(SIZE:SIZE,1:9999)
"RTN","HMPDJFSP",418,0)
 ;
"RTN","HMPDJFSP",419,0)
 ;
"RTN","HMPDJFSP",420,0)
OKTORUN(HMPTTYPE) ;execute 'ok to run' strategy
"RTN","HMPDJFSP",421,0)
 ; input: HMPTTYPE := type of task [ 'redoer' | 'extractor' | 'hangLoop']
"RTN","HMPDJFSP",422,0)
 ;          - currently not used but may become useful for strategy algorithms
"RTN","HMPDJFSP",423,0)
 ; returns: 1 - ok to run task | 0 - do not run task
"RTN","HMPDJFSP",424,0)
 Q $$CHKSIZE
"RTN","HMPDJFSP",425,0)
 ;
"RTN","HMPDJFSP",426,0)
CHKSIZE() ; aggregate extract ^XTMP size strategy
"RTN","HMPDJFSP",427,0)
 ; returns: 1 - ^XTMP extract size within limit  | 0 - ^XTMP size over limit
"RTN","HMPDJFSP",428,0)
 ; Note: logic used regardless of HMP server
"RTN","HMPDJFSP",429,0)
 Q $$GETMAX>+$$GETSIZE^HMPUTILS()
"RTN","HMPDJFSP",430,0)
 ;
"RTN","HMPDJFSP",431,0)
CHKXTMP(HMPBATCH,HMPFZTSK) ; -- ^XTMP check at end each domain loop iteration ; if too big HANG
"RTN","HMPDJFSP",432,0)
 N HMPOK
"RTN","HMPDJFSP",433,0)
 S HMPOK=0
"RTN","HMPDJFSP",434,0)
 F  D  Q:HMPOK
"RTN","HMPDJFSP",435,0)
 . ; -- if ok to run, continue
"RTN","HMPDJFSP",436,0)
 . I $$OKTORUN("hangLoop") K ^XTMP(HMPBATCH,0,"task",HMPFZTSK,"hanging") S HMPOK=1 Q
"RTN","HMPDJFSP",437,0)
 . S ^("hanging")=$G(^XTMP(HMPBATCH,0,"task",HMPFZTSK,"hanging"))+1
"RTN","HMPDJFSP",438,0)
 . H $$GETSECS
"RTN","HMPDJFSP",439,0)
 Q
"RTN","HMPDJFSP",440,0)
 ;
"RTN","HMPDJFSP",441,0)
GETMAX() ; return the max allowable aggregate extract size
"RTN","HMPDJFSP",442,0)
 N HMPLIM
"RTN","HMPDJFSP",443,0)
 S HMPLIM=$$GET^XPAR("SYS","HMP EXTRACT DISK SIZE LIMIT")*1000000
"RTN","HMPDJFSP",444,0)
 Q $S(HMPLIM:HMPLIM,1:20000000)  ; if not set, 20mb characters
"RTN","HMPDJFSP",445,0)
 ;
"RTN","HMPDJFSP",446,0)
GETSECS() ; return default # of seconds to requeue in future or hang when processing domains
"RTN","HMPDJFSP",447,0)
 N SECS
"RTN","HMPDJFSP",448,0)
 S SECS=+$$GET^XPAR("SYS","HMP EXTRACT TASK REQUEUE SECS")
"RTN","HMPDJFSP",449,0)
 Q $S(SECS:SECS,1:10)   ; not set, wait 10 seconds
"RTN","HMPDJFSP",450,0)
 ;
"RTN","HMPDJFST")
1^162
"RTN","HMPDJT")
1^163
"RTN","HMPDJX")
0^55^B36089287
"RTN","HMPDJX",1,0)
HMPDJX ;SLC/MKB,ASMR/RRB - New data update;11/5/13 7:02pm
"RTN","HMPDJX",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDJX",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJX",4,0)
 ;
"RTN","HMPDJX",5,0)
 ; External References          DBIA#
"RTN","HMPDJX",6,0)
 ; -------------------          -----
"RTN","HMPDJX",7,0)
 ; ^DPT                         10035
"RTN","HMPDJX",8,0)
 ; MPIF001                       2701
"RTN","HMPDJX",9,0)
 ; XLFSTR                       10104
"RTN","HMPDJX",10,0)
 Q
"RTN","HMPDJX",11,0)
 ;
"RTN","HMPDJX",12,0)
EN(LAST,MAX) ; -- get data from ^XTMP("HMP-<date>",n)
"RTN","HMPDJX",13,0)
 ; Expects HMP=$NA(^TMP("HMP",$J))
"RTN","HMPDJX",14,0)
 ;
"RTN","HMPDJX",15,0)
 N SYS,X,Y,HMPTOTL,DFN,PATCNT,ICN,DOMCNT,TYPE,RTN,HMPLASTI,HMPID,DATA,DELETE,UID,CNT,TSTART,TSTOP
"RTN","HMPDJX",16,0)
 S TSTART=$$NOW^XLFDT()
"RTN","HMPDJX",17,0)
 S LAST=$G(LAST),SYS=$G(FILTER("systemID")) Q:SYS=""
"RTN","HMPDJX",18,0)
 S MAX=$G(MAX,999)
"RTN","HMPDJX",19,0)
 D GETLIST(LAST,SYS,MAX)
"RTN","HMPDJX",20,0)
 ;
"RTN","HMPDJX",21,0)
 S (DFN,PATCNT,HMPTOTL)=0 F  S DFN=$O(^TMP("HMPX",$J,DFN)) Q:DFN<1  D
"RTN","HMPDJX",22,0)
 . K ^TMP($J,"HMP ERROR")
"RTN","HMPDJX",23,0)
 . S PATCNT=PATCNT+1,ICN=+$$GETICN^MPIF001(DFN),ERRPAT=DFN
"RTN","HMPDJX",24,0)
 . S DOMCNT=0 K DATA,DELETE
"RTN","HMPDJX",25,0)
 . S TYPE="" F  S TYPE=$O(^TMP("HMPX",$J,DFN,TYPE)) Q:TYPE=""  D
"RTN","HMPDJX",26,0)
 .. S RTN=$$TAG^HMPDJ(TYPE)_"^HMPDJ0" Q:'$L($T(@RTN))
"RTN","HMPDJX",27,0)
 .. S DOMCNT=DOMCNT+1
"RTN","HMPDJX",28,0)
 .. ;
"RTN","HMPDJX",29,0)
 .. N HMP S HMP=$NA(^TMP("HMP",$J,PATCNT,DOMCNT)),HMPI=0,HMPID=""
"RTN","HMPDJX",30,0)
 .. F  S HMPID=$O(^TMP("HMPX",$J,DFN,TYPE,HMPID)) Q:HMPID=""  S X=$G(^(HMPID)) D
"RTN","HMPDJX",31,0)
 ... N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJX",32,0)
 ... S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJX",33,0)
 ... S ERRMSG="A problem occurred when trying to refresh patient data from an API."
"RTN","HMPDJX",34,0)
 ... ;
"RTN","HMPDJX",35,0)
 ... I X="@" D DELETE(TYPE,DFN,HMPID) Q
"RTN","HMPDJX",36,0)
 ... S HMPLASTI=HMPI D @RTN   ;creates @HMP@(HMPI+1)
"RTN","HMPDJX",37,0)
 ... ;
"RTN","HMPDJX",38,0)
 ... ; if no new item, assume the record has been deleted
"RTN","HMPDJX",39,0)
 ... I HMPI'>HMPLASTI D DELETE(TYPE,DFN,HMPID) Q
"RTN","HMPDJX",40,0)
 ... S HMPTOTL=HMPTOTL+1,DATA=1
"RTN","HMPDJX",41,0)
 .. I 'HMPI S DOMCNT=DOMCNT-1 Q   ;no data, or error
"RTN","HMPDJX",42,0)
 .. ;
"RTN","HMPDJX",43,0)
 .. S:DOMCNT>1 @HMP@(.3)=","
"RTN","HMPDJX",44,0)
 .. S @HMP@(.5)="{""domainName"":"""_TYPE_""",""total"":"_HMPI_",""items"":["
"RTN","HMPDJX",45,0)
 .. S HMPI=HMPI+1,@HMP@(HMPI)="]}"
"RTN","HMPDJX",46,0)
 . ;
"RTN","HMPDJX",47,0)
A . ; HMP=$NA(^TMP("HMP",$J)) again
"RTN","HMPDJX",48,0)
 . S:PATCNT>1 @HMP@(PATCNT,.3)=","
"RTN","HMPDJX",49,0)
 . S @HMP@(PATCNT,.5)="{""patientDfn"":"_DFN_",""patientIcn"":"""_ICN_""""
"RTN","HMPDJX",50,0)
 . I DOMCNT D
"RTN","HMPDJX",51,0)
 .. S @HMP@(PATCNT,.6)=",""domains"":["
"RTN","HMPDJX",52,0)
 .. S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT)="]"
"RTN","HMPDJX",53,0)
 . ;
"RTN","HMPDJX",54,0)
 . I $D(DELETE) D
"RTN","HMPDJX",55,0)
 .. S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT,.5)=",""deletes"":["
"RTN","HMPDJX",56,0)
 .. S HMPI=0,UID="" F  S UID=$O(DELETE(UID)) Q:UID=""  D
"RTN","HMPDJX",57,0)
 ... S TYPE=DELETE(UID),HMPI=HMPI+1
"RTN","HMPDJX",58,0)
 ... S:HMPI>1 @HMP@(PATCNT,DOMCNT,HMPI,.3)=","
"RTN","HMPDJX",59,0)
 ... S @HMP@(PATCNT,DOMCNT,HMPI,1)="{""uid"":"""_UID_""",""domainName"":"""_TYPE_"""}"
"RTN","HMPDJX",60,0)
 .. S HMPI=HMPI+1,@HMP@(PATCNT,DOMCNT,HMPI)="]"
"RTN","HMPDJX",61,0)
 . ;
"RTN","HMPDJX",62,0)
 . I $D(^TMP($J,"HMP ERROR")) D
"RTN","HMPDJX",63,0)
 .. N ERROR D BUILDERR^HMPDJ(.ERROR)
"RTN","HMPDJX",64,0)
 .. S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT,.3)=","
"RTN","HMPDJX",65,0)
 .. M @HMP@(PATCNT,DOMCNT)=ERROR
"RTN","HMPDJX",66,0)
 .. K ^TMP($J,"HMP ERROR")
"RTN","HMPDJX",67,0)
 . ;
"RTN","HMPDJX",68,0)
 . S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT)="}"
"RTN","HMPDJX",69,0)
 ;
"RTN","HMPDJX",70,0)
 S Y=$G(^TMP("HMPX",$J,0)) S:Y="" Y=LAST
"RTN","HMPDJX",71,0)
 S T=$$NOW^XLFDT()
"RTN","HMPDJX",72,0)
 S @HMP@(.5)="{""apiVersion"":""1.01"",""data"":{""lastUpdate"":"""_Y_""",""startDateTime"":"""_TSTART_""",""totalPatients"":"_PATCNT
"RTN","HMPDJX",73,0)
 S:PATCNT @HMP@(.6)=",""patients"":[",PATCNT=PATCNT+1,@HMP@(PATCNT)="]"
"RTN","HMPDJX",74,0)
 ;
"RTN","HMPDJX",75,0)
B ;
"RTN","HMPDJX",76,0)
 I $D(^TMP("HMPX",$J,"OP")) D         ;operational data
"RTN","HMPDJX",77,0)
 . S (HMPTOTL,DOMCNT)=0,PATCNT=PATCNT+1 K DATA,DELETE
"RTN","HMPDJX",78,0)
 . S TYPE="" F  S TYPE=$O(^TMP("HMPX",$J,"OP",TYPE)) Q:TYPE=""  D
"RTN","HMPDJX",79,0)
 .. S RTN=$$TAG^HMPEF(TYPE)_"^HMPEF" Q:'$L($T(@RTN))
"RTN","HMPDJX",80,0)
 .. S DOMCNT=DOMCNT+1,DFN=""
"RTN","HMPDJX",81,0)
 .. ;
"RTN","HMPDJX",82,0)
 .. N HMP S HMP=$NA(^TMP("HMP",$J,PATCNT,DOMCNT)),HMPI=0,HMPID=""
"RTN","HMPDJX",83,0)
 .. F  S HMPID=$O(^TMP("HMPX",$J,"OP",TYPE,HMPID)) Q:HMPID=""  S X=$G(^(HMPID)) D
"RTN","HMPDJX",84,0)
 ... I X="@" D DELETE(TYPE,DFN,HMPID) Q
"RTN","HMPDJX",85,0)
 ... S HMPLASTI=HMPI D @RTN           ;creates @HMP@(HMPI+1)
"RTN","HMPDJX",86,0)
 ... ; if no new item, assume the record has been deleted
"RTN","HMPDJX",87,0)
 ... I HMPI'>HMPLASTI D DELETE(TYPE,DFN,HMPID) Q
"RTN","HMPDJX",88,0)
 ... S HMPTOTL=HMPTOTL+1,DATA=1
"RTN","HMPDJX",89,0)
 .. I 'HMPI S DOMCNT=DOMCNT-1 Q       ;no data, or error
"RTN","HMPDJX",90,0)
 .. ;
"RTN","HMPDJX",91,0)
 .. S:DOMCNT>1 @HMP@(.3)=","
"RTN","HMPDJX",92,0)
 .. S @HMP@(.5)="{""domainName"":"""_TYPE_""",""total"":"_HMPI_",""items"":["
"RTN","HMPDJX",93,0)
 .. S HMPI=HMPI+1,@HMP@(HMPI)="]}"
"RTN","HMPDJX",94,0)
 . ;
"RTN","HMPDJX",95,0)
C . ; HMP=$NA(^TMP("HMP",$J)) again
"RTN","HMPDJX",96,0)
 . I 'DOMCNT,'$D(DELETE) Q  ;no data, or error
"RTN","HMPDJX",97,0)
 . S @HMP@(PATCNT,.5)=",""operational"":{"
"RTN","HMPDJX",98,0)
 . I DOMCNT D
"RTN","HMPDJX",99,0)
 .. S @HMP@(PATCNT,.6)="""domains"":["
"RTN","HMPDJX",100,0)
 .. S DOMCNT=DOMCNT+1 S @HMP@(PATCNT,DOMCNT)="]"
"RTN","HMPDJX",101,0)
 . ;
"RTN","HMPDJX",102,0)
 . I $D(DELETE) D
"RTN","HMPDJX",103,0)
 .. S DOMCNT=DOMCNT+1 S:DOMCNT>1 @HMP@(PATCNT,DOMCNT,.3)=","
"RTN","HMPDJX",104,0)
 .. S @HMP@(PATCNT,DOMCNT,.5)="""deletes"":["
"RTN","HMPDJX",105,0)
 .. S HMPI=0,UID="" F  S UID=$O(DELETE(UID)) Q:UID=""  D
"RTN","HMPDJX",106,0)
 ... S TYPE=DELETE(UID),HMPI=HMPI+1
"RTN","HMPDJX",107,0)
 ... S:HMPI>1 @HMP@(PATCNT,DOMCNT,HMPI,.3)=","
"RTN","HMPDJX",108,0)
 ... S @HMP@(PATCNT,DOMCNT,HMPI,1)="{""uid"":"""_UID_""",""domainName"":"""_TYPE_"""}"
"RTN","HMPDJX",109,0)
 .. S HMPI=HMPI+1,@HMP@(PATCNT,DOMCNT,HMPI)="]"
"RTN","HMPDJX",110,0)
 . ;
"RTN","HMPDJX",111,0)
 . S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT)="}"
"RTN","HMPDJX",112,0)
 ; 
"RTN","HMPDJX",113,0)
 S TSTOP=$$NOW^XLFDT()
"RTN","HMPDJX",114,0)
 S PATCNT=PATCNT+1,@HMP@(PATCNT)=",""endDateTime"":"""_TSTOP_"""}}" ;close JSON
"RTN","HMPDJX",115,0)
 K ^TMP("HMPX",$J),^TMP("HMPTEXT",$J)
"RTN","HMPDJX",116,0)
 Q
"RTN","HMPDJX",117,0)
 ;
"RTN","HMPDJX",118,0)
DELETE(NAME,DFN,ID) ; -- set DELETE nodes
"RTN","HMPDJX",119,0)
 N UID
"RTN","HMPDJX",120,0)
 S UID=$$SETUID^HMPUTILS(NAME,DFN,ID)
"RTN","HMPDJX",121,0)
 S DELETE(UID)=NAME
"RTN","HMPDJX",122,0)
 Q
"RTN","HMPDJX",123,0)
 ;
"RTN","HMPDJX",124,0)
GETLIST(LAST,SYS,MAX) ; -- build list of updates for client
"RTN","HMPDJX",125,0)
 ; Returns ^TMP("HMPX",$J,0) = last DATE:SEQ included
"RTN","HMPDJX",126,0)
 ;         ^TMP("HMPX",$J,DFN,TYPE,ID)=ACT
"RTN","HMPDJX",127,0)
 N DATE,SEQ,DA,END,IDX,X0,DFN,TYPE,ID,ACT,D,N,CNT
"RTN","HMPDJX",128,0)
 K ^TMP("HMPX",$J)
"RTN","HMPDJX",129,0)
 S DATE=+LAST,SEQ=+$P(LAST,":",2),CNT=0
"RTN","HMPDJX",130,0)
 S DA=$$FIND^HMPPATS(SYS) Q:'DA
"RTN","HMPDJX",131,0)
 ;
"RTN","HMPDJX",132,0)
 ; generate list ID, and end point
"RTN","HMPDJX",133,0)
 S D=DT,N=+$O(^XTMP("HMP-"_DT,"A"),-1)       ;last entry, as of now
"RTN","HMPDJX",134,0)
 I DATE=DT,SEQ=N S ^TMP("HMPX",$J,0)=LAST Q  ;no new items
"RTN","HMPDJX",135,0)
 ;
"RTN","HMPDJX",136,0)
 S IDX=$NA(^XTMP("HMP-"_DATE,SEQ)),END=N     ;init loop where left off
"RTN","HMPDJX",137,0)
 F  S IDX=$Q(@IDX) Q:$$DONE  D  Q:CNT'<MAX
"RTN","HMPDJX",138,0)
 . S D=+$P(IDX,"-",2),N=+$P(IDX,",",2)
"RTN","HMPDJX",139,0)
 . S X0=@IDX,DFN=$P(X0,U) S:DFN="" DFN="OP"
"RTN","HMPDJX",140,0)
 . I DFN,'$D(^HMP(800000,"ADFN",DFN,DA)) Q
"RTN","HMPDJX",141,0)
 . S TYPE=$P(X0,U,2),ID=$P(X0,U,3),ACT=$P(X0,U,4)
"RTN","HMPDJX",142,0)
 . I TYPE=""!(ID="") Q  ;error
"RTN","HMPDJX",143,0)
 . I TYPE="ROSTER",'$D(^HMP(800000,"AROS",ID,DA)) Q
"RTN","HMPDJX",144,0)
 . S:'$D(^TMP("HMPX",$J,DFN,TYPE,ID)) CNT=CNT+1
"RTN","HMPDJX",145,0)
 . S ^TMP("HMPX",$J,DFN,TYPE,ID)=ACT
"RTN","HMPDJX",146,0)
 S ^TMP("HMPX",$J,0)=D_":"_N                 ;final date:seq
"RTN","HMPDJX",147,0)
 Q
"RTN","HMPDJX",148,0)
 ;
"RTN","HMPDJX",149,0)
DONE() ; -- Return 1 or 0, if loop has finished
"RTN","HMPDJX",150,0)
 I IDX'?1"^XTMP(""HMP-"7N.E  Q 1       ;end of ^XTMP("HMP")
"RTN","HMPDJX",151,0)
 N D,N S D=+$P(IDX,"-",2),N=+$P(IDX,",",2)
"RTN","HMPDJX",152,0)
 ; check HMP-DATE subscript
"RTN","HMPDJX",153,0)
 I D<DT Q 0                            ;prior day: keep going
"RTN","HMPDJX",154,0)
 I D>DT Q 1                            ;next day:  stop loop
"RTN","HMPDJX",155,0)
 ; D=DT: check sequence# subscript
"RTN","HMPDJX",156,0)
 I N>END Q 1
"RTN","HMPDJX",157,0)
 Q 0
"RTN","HMPDLR")
0^56^B24262347
"RTN","HMPDLR",1,0)
HMPDLR ;SLC/MKB,ASMR/RRB - Laboratory extract;Nov 05, 2015 19:21:53
"RTN","HMPDLR",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDLR",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDLR",4,0)
 ;
"RTN","HMPDLR",5,0)
 ; External References          DBIA#
"RTN","HMPDLR",6,0)
 ; -------------------          -----
"RTN","HMPDLR",7,0)
 ; ^LAB(61                        524
"RTN","HMPDLR",8,0)
 ; ^LRO(69                       2407
"RTN","HMPDLR",9,0)
 ; ^LR                            525
"RTN","HMPDLR",10,0)
 ; DIC                           2051
"RTN","HMPDLR",11,0)
 ; DIQ                           2056
"RTN","HMPDLR",12,0)
 ; LR7OR1,^TMP("LRRR",$J)        2503
"RTN","HMPDLR",13,0)
 ; XUAF4                         2171
"RTN","HMPDLR",14,0)
 Q
"RTN","HMPDLR",15,0)
 ; ------------ Get results from VistA ------------
"RTN","HMPDLR",16,0)
 ;
"RTN","HMPDLR",17,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's lab results, DE2818
"RTN","HMPDLR",18,0)
 N HMPSUB,HMPIDT,HMPN,HMPITM,LRDFN,SUB
"RTN","HMPDLR",19,0)
 S DFN=+$G(DFN) Q:$G(DFN)<1
"RTN","HMPDLR",20,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDLR",21,0)
 K ^TMP("LRRR",$J,DFN)
"RTN","HMPDLR",22,0)
 S LRDFN=$$LRDFN^HMPXGLAB(DFN),HMPSUB="CH"  ;DE2818, (#63) LABORATORY REFERENCE
"RTN","HMPDLR",23,0)
 ;
"RTN","HMPDLR",24,0)
 ; get result(s)
"RTN","HMPDLR",25,0)
 I $L($G(ID)) D  Q:HMPN  ;done
"RTN","HMPDLR",26,0)
 . S HMPSUB=$P(ID,";"),HMPIDT=+$P(ID,";",2),(BEG,END)=9999999-HMPIDT
"RTN","HMPDLR",27,0)
 . S HMPN=$P(ID,";",3) I HMPN D  ;skip loop - single result
"RTN","HMPDLR",28,0)
 .. D RR^LR7OR1(DFN,,BEG,END,HMPSUB)
"RTN","HMPDLR",29,0)
 .. S SUB=$S("CH^MI"[HMPSUB:HMPSUB,1:"AP")_"(.HMPITM)"
"RTN","HMPDLR",30,0)
 .. D @SUB,XML(.HMPITM)
"RTN","HMPDLR",31,0)
 .. K ^TMP("LRRR",$J,DFN)
"RTN","HMPDLR",32,0)
 ;
"RTN","HMPDLR",33,0)
 D RR^LR7OR1(DFN,,BEG,END,HMPSUB,,,MAX)
"RTN","HMPDLR",34,0)
 S HMPSUB="" F  S HMPSUB=$O(^TMP("LRRR",$J,DFN,HMPSUB)) Q:HMPSUB=""  D
"RTN","HMPDLR",35,0)
 . S HMPIDT=0 F  S HMPIDT=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT)) Q:HMPIDT<1  D
"RTN","HMPDLR",36,0)
 .. S HMPN=0 F  S HMPN=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT,HMPN)) Q:HMPN<1  D
"RTN","HMPDLR",37,0)
 ... K HMPITM S SUB=$S("CH^MI"[HMPSUB:HMPSUB,1:"AP")_"(.HMPITM)"
"RTN","HMPDLR",38,0)
 ... D @SUB,XML(.HMPITM)
"RTN","HMPDLR",39,0)
 K ^TMP("LRRR",$J,DFN)
"RTN","HMPDLR",40,0)
 Q
"RTN","HMPDLR",41,0)
 ;
"RTN","HMPDLR",42,0)
CH(LAB) ; -- return a Chemistry result in LAB("attribute")=value
"RTN","HMPDLR",43,0)
 ;      Expects ^TMP("LRRR",$J,DFN,"CH",HMPIDT,HMPN),LRDFN
"RTN","HMPDLR",44,0)
 N CDT,LR0,LRI,X0,X,LOINC,ORD,CMMT K LAB
"RTN","HMPDLR",45,0)
 S LAB("id")="CH;"_HMPIDT_";"_HMPN,LAB("type")="CH"
"RTN","HMPDLR",46,0)
 S CDT=9999999-HMPIDT,LAB("collected")=CDT
"RTN","HMPDLR",47,0)
 S LR0=$G(^LR(LRDFN,"CH",HMPIDT,0)),LRI=$G(^(HMPN))
"RTN","HMPDLR",48,0)
 S LAB("status")="completed",LAB("resulted")=$P(LR0,U,3)
"RTN","HMPDLR",49,0)
 S X0=$G(^TMP("LRRR",$J,DFN,"CH",HMPIDT,HMPN))
"RTN","HMPDLR",50,0)
 S LAB("test")=$$LABTSTNM^HMPXGLAB(+X0)  ; DE2818
"RTN","HMPDLR",51,0)
 S:$L($P(X0,U,2)) LAB("result")=$P(X0,U,2)
"RTN","HMPDLR",52,0)
 S:$L($P(X0,U,4)) LAB("units")=$P(X0,U,4)
"RTN","HMPDLR",53,0)
 S:$L($P(X0,U,3)) LAB("interpretation")=$P(X0,U,3)
"RTN","HMPDLR",54,0)
 S X=$P(X0,U,5) I $L(X),X["-" S LAB("low")=$P(X,"-"),LAB("high")=$P(X,"-",2)
"RTN","HMPDLR",55,0)
 S LAB("localName")=$S($L($P(X0,U,15)):$P(X0,U,15),1:LAB("test"))
"RTN","HMPDLR",56,0)
 S LAB("groupName")=$P(X0,U,16) ;accession#
"RTN","HMPDLR",57,0)
 S X=+$P(X0,U,19) I X D  ;specimen
"RTN","HMPDLR",58,0)
 . N IENS,HMPY S IENS=X_","
"RTN","HMPDLR",59,0)
 . D GETS^DIQ(61,IENS,".01;2",,"HMPY")
"RTN","HMPDLR",60,0)
 . S LAB("specimen")=$G(HMPY(61,IENS,2))_U_$G(HMPY(61,IENS,.01)) ;SNOMED^name
"RTN","HMPDLR",61,0)
 . S LAB("sample")=$$GET1^DIQ(61,X_",",4.1) ;name
"RTN","HMPDLR",62,0)
 S ORD=+$P(X0,U,17) S:ORD LAB("labOrderID")=ORD
"RTN","HMPDLR",63,0)
 S X=$$ORDER(ORD,+X0) S:X LAB("orderID")=X
"RTN","HMPDLR",64,0)
 S X=$P($P(LRI,U,3),"!",3) S:X LOINC=$$GET1^DIQ(95.3,X_",",.01)
"RTN","HMPDLR",65,0)
 I $G(LOINC) S LAB("loinc")=LOINC,LAB("vuid")=$$VUID^HMPD(+LOINC,95.3)
"RTN","HMPDLR",66,0)
 S X=$P(LR0,U,14)
"RTN","HMPDLR",67,0)
 S:X LAB("facility")=$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U)
"RTN","HMPDLR",68,0)
 I 'X S LAB("facility")=$$FAC^HMPD ;local stn#^name
"RTN","HMPDLR",69,0)
 I $D(^TMP("LRRR",$J,DFN,"CH",HMPIDT,"N")) M CMMT=^("N") S LAB("comment")=$$STRING^HMPD(.CMMT)
"RTN","HMPDLR",70,0)
 Q
"RTN","HMPDLR",71,0)
 ;
"RTN","HMPDLR",72,0)
ORDER(LABORD,TEST) ; -- return #100 order for Lab order# & Test
"RTN","HMPDLR",73,0)
 N Y,D,S,T S Y=""
"RTN","HMPDLR",74,0)
 S D=$O(^LRO(69,"C",LABORD,0)) I D D
"RTN","HMPDLR",75,0)
 . S S=0 F  S S=$O(^LRO(69,"C",LABORD,D,S)) Q:S<1  D
"RTN","HMPDLR",76,0)
 .. S T=0 F  S T=$O(^LRO(69,D,1,S,2,T)) Q:T<1  I +$G(^(T,0))=TEST S Y=+$P(^(0),U,7)
"RTN","HMPDLR",77,0)
 Q Y
"RTN","HMPDLR",78,0)
 ;
"RTN","HMPDLR",79,0)
MI(LAB) ; -- return a Microbiology result in LAB("attribute")=value
"RTN","HMPDLR",80,0)
 ;    Expects ^TMP("LRRR",$J,DFN,"MI",HMPIDT,HMPN),LRDFN
"RTN","HMPDLR",81,0)
 N ID,CDT,X0,X,CMMT,LR0 K LAB
"RTN","HMPDLR",82,0)
 S X0=$G(^TMP("LRRR",$J,DFN,"MI",HMPIDT,HMPN)) Q:$L($P(X0,U))'>1
"RTN","HMPDLR",83,0)
 S LAB("id")="MI;"_HMPIDT_"#"_HMPN,LAB("status")="completed"
"RTN","HMPDLR",84,0)
 S LAB("type")="MI",CDT=9999999-HMPIDT,LAB("collected")=CDT
"RTN","HMPDLR",85,0)
 S LR0=$G(^LR(LRDFN,"MI",HMPIDT,0)),LAB("resulted")=$P(LR0,U,3)
"RTN","HMPDLR",86,0)
 S:$L($P(X0,U,2)) LAB("result")=$P(X0,U,2)
"RTN","HMPDLR",87,0)
 S:$L($P(X0,U,4)) LAB("units")=$P(X0,U,4)
"RTN","HMPDLR",88,0)
 S:$L($P(X0,U,3)) LAB("interpretation")=$P(X0,U,3)
"RTN","HMPDLR",89,0)
 S (LAB("test"),LAB("localName"))=$P(X0,U,15)
"RTN","HMPDLR",90,0)
 S X=+$P(X0,U,19) I X D  ;specimen
"RTN","HMPDLR",91,0)
 . N IENS,HMPY S IENS=X_","
"RTN","HMPDLR",92,0)
 . D GETS^DIQ(61,IENS,".01;2",,"HMPY")
"RTN","HMPDLR",93,0)
 . S LAB("specimen")=$G(HMPY(61,IENS,2))_U_$G(HMPY(61,IENS,.01)) ;SNOMED^name
"RTN","HMPDLR",94,0)
 . S LAB("sample")=$$GET1^DIQ(61,X_",",4.1) ;name
"RTN","HMPDLR",95,0)
 S X=$P(LR0,U,14)
"RTN","HMPDLR",96,0)
 S:X LAB("facility")=$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U)
"RTN","HMPDLR",97,0)
 I 'X S LAB("facility")=$$FAC^HMPD ;local stn#^name
"RTN","HMPDLR",98,0)
 I $D(^TMP("LRRR",$J,DFN,"MI",HMPIDT,"N")) M CMMT=^("N") S LAB("comment")=$$STRING^HMPD(.CMMT)
"RTN","HMPDLR",99,0)
 Q
"RTN","HMPDLR",100,0)
 ;
"RTN","HMPDLR",101,0)
AP(LAB) ; -- return a Pathology result in LAB("attribute")=value
"RTN","HMPDLR",102,0)
 K LAB  ;implemented in HMPDLRA
"RTN","HMPDLR",103,0)
 Q
"RTN","HMPDLR",104,0)
 ;
"RTN","HMPDLR",105,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDLR",106,0)
 ;
"RTN","HMPDLR",107,0)
XML(LAB) ; -- Return result as XML in @HMP@(#)
"RTN","HMPDLR",108,0)
 N ATT,X,Y,P,NAMES,TAG
"RTN","HMPDLR",109,0)
 D ADD("<lab>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDLR",110,0)
 S ATT="" F  S ATT=$O(LAB(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDLR",111,0)
 . S X=$G(LAB(ATT)),Y="" Q:'$L(X)
"RTN","HMPDLR",112,0)
 . I ATT="comment" S Y="<"_ATT_" xml:space='preserve'>"_$$ESC^HMPD(X)_"</"_ATT_">" Q
"RTN","HMPDLR",113,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDLR",114,0)
 . I $L(X)>1 D  S Y=""
"RTN","HMPDLR",115,0)
 .. S Y="<"_ATT_" ",NAMES="code^name^Z"
"RTN","HMPDLR",116,0)
 .. F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDLR",117,0)
 .. S Y=Y_"/>" D ADD(Y)
"RTN","HMPDLR",118,0)
 D ADD("</lab>")
"RTN","HMPDLR",119,0)
 Q
"RTN","HMPDLR",120,0)
 ;
"RTN","HMPDLR",121,0)
ADD(X) ; -- Add a line @HMP@(n)=X
"RTN","HMPDLR",122,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDLR",123,0)
 S @HMP@(HMPI)=X
"RTN","HMPDLR",124,0)
 Q
"RTN","HMPDLR",125,0)
 ;
"RTN","HMPDLRA")
0^57^B79686061
"RTN","HMPDLRA",1,0)
HMPDLRA ;SLC/MKB,ASMR/RRB - Laboratory extract by accession;Nov 05, 2015 19:21:53
"RTN","HMPDLRA",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDLRA",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDLRA",4,0)
 ;
"RTN","HMPDLRA",5,0)
 ; External References          DBIA#
"RTN","HMPDLRA",6,0)
 ; -------------------          -----
"RTN","HMPDLRA",7,0)
 ; ^DPT                         10035
"RTN","HMPDLRA",8,0)
 ; ^LAB(61                        524
"RTN","HMPDLRA",9,0)
 ; ^LRO(68                       1963
"RTN","HMPDLRA",10,0)
 ; ^LRO(69                       2407
"RTN","HMPDLRA",11,0)
 ; ^LR                            525
"RTN","HMPDLRA",12,0)
 ; ^SC                          10040
"RTN","HMPDLRA",13,0)
 ; ^VA(200                      10060
"RTN","HMPDLRA",14,0)
 ; DIC                           2051
"RTN","HMPDLRA",15,0)
 ; DIQ                           2056
"RTN","HMPDLRA",16,0)
 ; LR7OR1,^TMP("LRRR",$J)        2503
"RTN","HMPDLRA",17,0)
 ; LR7OSUM,^TMP("LRC",$J),       2766
"RTN","HMPDLRA",18,0)
 ;  ^TMP("LRH",$J),^TMP("LRT",$J)
"RTN","HMPDLRA",19,0)
 ; ORX8                          2467
"RTN","HMPDLRA",20,0)
 ; PXAPI                         1894
"RTN","HMPDLRA",21,0)
 ; XUAF4                         2171
"RTN","HMPDLRA",22,0)
 Q
"RTN","HMPDLRA",23,0)
 ; ------------ Get results from VistA ------------
"RTN","HMPDLRA",24,0)
 ;
"RTN","HMPDLRA",25,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's lab results
"RTN","HMPDLRA",26,0)
 N HMPSUB,HMPIDT,HMPN,HMPITM,LRDFN,LR0,ORD,X
"RTN","HMPDLRA",27,0)
 S DFN=+$G(DFN) Q:$G(DFN)<1
"RTN","HMPDLRA",28,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDLRA",29,0)
 S HMPSUB=$G(FILTER("type")),LRDFN=$$LRDFN^HMPXGLAB(DFN)  ;DE2818, (#63) LABORATORY REFERENCE
"RTN","HMPDLRA",30,0)
 K ^TMP("LRRR",$J,DFN)
"RTN","HMPDLRA",31,0)
 ;
"RTN","HMPDLRA",32,0)
 ; get result(s)
"RTN","HMPDLRA",33,0)
 I $L($G(ID)) D  ;reset search parameters
"RTN","HMPDLRA",34,0)
 . S HMPSUB=$P(ID,";"),HMPIDT=+$P(ID,";",2)
"RTN","HMPDLRA",35,0)
 . S:HMPIDT (BEG,END)=9999999-HMPIDT
"RTN","HMPDLRA",36,0)
 ;
"RTN","HMPDLRA",37,0)
 D RR^LR7OR1(DFN,,BEG,END,HMPSUB,,,MAX)
"RTN","HMPDLRA",38,0)
 S HMPSUB="" F  S HMPSUB=$O(^TMP("LRRR",$J,DFN,HMPSUB)) Q:HMPSUB=""  D
"RTN","HMPDLRA",39,0)
 . S HMPIDT=0 F  S HMPIDT=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT)) Q:HMPIDT<1  I $O(^(HMPIDT,0)) D
"RTN","HMPDLRA",40,0)
 .. K HMPITM,ORD,CMMT,^TMP("HMPTEXT",$J)
"RTN","HMPDLRA",41,0)
 .. I "CH^MI"'[HMPSUB D AP(.HMPITM),XML(.HMPITM) Q
"RTN","HMPDLRA",42,0)
 .. S HMPITM("type")=HMPSUB,HMPITM("id")=HMPSUB_";"_HMPIDT
"RTN","HMPDLRA",43,0)
 .. S HMPITM("collected")=9999999-HMPIDT,HMPITM("status")="completed"
"RTN","HMPDLRA",44,0)
 .. S LR0=$G(^LR(LRDFN,HMPSUB,HMPIDT,0))
"RTN","HMPDLRA",45,0)
 .. S HMPITM("resulted")=$P(LR0,U,3),X=+$P(LR0,U,5) I X D
"RTN","HMPDLRA",46,0)
 ... N IENS,HMPY S IENS=X_","
"RTN","HMPDLRA",47,0)
 ... D GETS^DIQ(61,IENS,".01;2;4.1",,"HMPY")
"RTN","HMPDLRA",48,0)
 ... S HMPITM("specimen")=$G(HMPY(61,IENS,2))_U_$G(HMPY(61,IENS,.01)) ;SNOMED^name
"RTN","HMPDLRA",49,0)
 ... S HMPITM("sample")=$G(HMPY(61,IENS,4.1)) ;name
"RTN","HMPDLRA",50,0)
 .. S X=$P(LR0,U,6),HMPITM("name")=$$AREA(X),HMPITM("groupName")=X
"RTN","HMPDLRA",51,0)
 .. S X=+$P(LR0,U,14) S:X HMPITM("facility")=$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U)
"RTN","HMPDLRA",52,0)
 .. I 'X S HMPITM("facility")=$$FAC^HMPD ;local stn#^name
"RTN","HMPDLRA",53,0)
 .. I HMPSUB="MI" D  ;report
"RTN","HMPDLRA",54,0)
 ... S HMPITM("document",1)=HMPSUB_";"_HMPIDT_"^LR MICROBIOLOGY REPORT^LABORATORY NOTE"
"RTN","HMPDLRA",55,0)
 ... S:$G(HMPTEXT) HMPITM("document",1,"content")=$$TEXT(DFN,HMPSUB,HMPIDT)
"RTN","HMPDLRA",56,0)
 .. S HMPN=0 F  S HMPN=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT,HMPN)) Q:HMPN<1  D
"RTN","HMPDLRA",57,0)
 ... S X=$S(HMPSUB="MI":$$MI,1:$$CH)
"RTN","HMPDLRA",58,0)
 ... S:$L(X) HMPITM("value",HMPN)=X
"RTN","HMPDLRA",59,0)
 ... S:$G(ORD) HMPITM("labOrderID")=ORD
"RTN","HMPDLRA",60,0)
 .. I $D(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT,"N")) M CMMT=^("N") S HMPITM("comment")=$$STRING^HMPD(.CMMT)
"RTN","HMPDLRA",61,0)
 .. D XML(.HMPITM)
"RTN","HMPDLRA",62,0)
 K ^TMP("LRRR",$J,DFN),^TMP("HMPTEXT",$J)
"RTN","HMPDLRA",63,0)
 Q
"RTN","HMPDLRA",64,0)
 ;
"RTN","HMPDLRA",65,0)
CH() ; -- return a Chemistry result as:
"RTN","HMPDLRA",66,0)
 ;   id^test^result^interpretation^units^low^high^localName^loinc^vuid^order
"RTN","HMPDLRA",67,0)
 ;   Expects ^TMP("LRRR",$J,DFN,"CH",HMPIDT,HMPN),LRDFN
"RTN","HMPDLRA",68,0)
 N X,Y,X0,NODE,CMMT,LOINC
"RTN","HMPDLRA",69,0)
 S X0=$G(^TMP("LRRR",$J,DFN,"CH",HMPIDT,HMPN)),NODE=$G(^LR(LRDFN,"CH",HMPIDT,HMPN))
"RTN","HMPDLRA",70,0)
 S X=$$LABTSTNM^HMPXGLAB(+X0)  ; DE2818
"RTN","HMPDLRA",71,0)
 S Y="CH;"_HMPIDT_";"_HMPN_U_X_U_$P(X0,U,2,4)
"RTN","HMPDLRA",72,0)
 S X=$P(X0,U,5) I $L(X),X["-" S X=$TR(X,"- ","^"),$P(Y,U,6,7)=X
"RTN","HMPDLRA",73,0)
 S $P(Y,U,8)=$P(X0,U,15) ;test short name
"RTN","HMPDLRA",74,0)
 S X=$P($P(NODE,U,3),"!",3) S:X LOINC=$$GET1^DIQ(95.3,X_",",.01)
"RTN","HMPDLRA",75,0)
 S:$G(LOINC) $P(Y,U,9,10)=LOINC_U_$$VUID^HMPD(+LOINC,95.3)
"RTN","HMPDLRA",76,0)
 S ORD=+$P(X0,U,17),X=$$ORDER(ORD,+X0) S:X $P(Y,U,11)=X
"RTN","HMPDLRA",77,0)
 Q Y
"RTN","HMPDLRA",78,0)
 ;
"RTN","HMPDLRA",79,0)
MI() ; -- return a Microbiology result as:
"RTN","HMPDLRA",80,0)
 ;   id^test^result^interpretation^units
"RTN","HMPDLRA",81,0)
 ;   Expects ^TMP("LRRR",$J,DFN,"MI",HMPIDT,HMPN)
"RTN","HMPDLRA",82,0)
 N Y,X0
"RTN","HMPDLRA",83,0)
 S X0=$G(^TMP("LRRR",$J,DFN,"MI",HMPIDT,HMPN)),Y=""
"RTN","HMPDLRA",84,0)
 S:$L($P(X0,U))>1 Y="MI;"_HMPIDT_";"_HMPN_U_$P(X0,U,1,4)
"RTN","HMPDLRA",85,0)
 S ORD=+$P(X0,U,17)
"RTN","HMPDLRA",86,0)
 Q Y
"RTN","HMPDLRA",87,0)
 ;
"RTN","HMPDLRA",88,0)
AP(LAB) ; -- return a Pathology result in LAB("attribute")=value
"RTN","HMPDLRA",89,0)
 N LR0,X,I,NODE
"RTN","HMPDLRA",90,0)
 S LR0=$G(^LR(LRDFN,HMPSUB,HMPIDT,0))
"RTN","HMPDLRA",91,0)
 S LAB("type")=HMPSUB,LAB("id")=HMPSUB_";"_HMPIDT
"RTN","HMPDLRA",92,0)
 S LAB("collected")=9999999-HMPIDT,LAB("status")="completed"
"RTN","HMPDLRA",93,0)
 S LAB("resulted")=$P(LR0,U,11),LAB("groupName")=$P(LR0,U,6)
"RTN","HMPDLRA",94,0)
 S X="",I=0 F  S I=$O(^LR(LRDFN,HMPSUB,HMPIDT,.1,I)) Q:I<1  S X=X_$S($L(X):", ",1:"")_$P($G(^(I,0)),U)
"RTN","HMPDLRA",95,0)
 S:$L(X) LAB("specimen")=U_X
"RTN","HMPDLRA",96,0)
 S LAB("facility")=$$FAC^HMPD
"RTN","HMPDLRA",97,0)
 S NODE=$S(HMPSUB="AU":$NA(^LR(LRDFN,101)),1:$NA(^LR(LRDFN,HMPSUB,HMPIDT,.05)))
"RTN","HMPDLRA",98,0)
 S I=0 F  S I=$O(@NODE@(I)) Q:I<1  S X=+$P($G(@NODE@(I,0)),U,2) I X D
"RTN","HMPDLRA",99,0)
 . N LT,NT,HMPY
"RTN","HMPDLRA",100,0)
 . S LT=$$GET1^DIQ(8925,+X_",",.01) Q:$P(LT," ")="Addendum"
"RTN","HMPDLRA",101,0)
 . S NT=$$GET1^DIQ(8925,+X_",",".01:1501") S:NT="" NT="LABORATORY NOTE"
"RTN","HMPDLRA",102,0)
 . S LAB("document",I)=+X_U_LT_U_NT
"RTN","HMPDLRA",103,0)
 . S:$G(HMPTEXT) LAB("document",I,"content")=$$TEXT^HMPDTIU(+X)
"RTN","HMPDLRA",104,0)
 I '$O(LAB("document",0)) D  ;non-TIU reports
"RTN","HMPDLRA",105,0)
 . S LAB("document",1)=HMPSUB_";"_HMPIDT_"^LR "_$$NAME(HMPSUB)_" REPORT^LABORATORY NOTE"
"RTN","HMPDLRA",106,0)
 . S:$G(HMPTEXT) LAB("document",1,"content")=$$TEXT(DFN,HMPSUB,HMPIDT)
"RTN","HMPDLRA",107,0)
 Q
"RTN","HMPDLRA",108,0)
 ;
"RTN","HMPDLRA",109,0)
ORDER(LABORD,TEST) ; -- return #100 order^name for Lab order# & Test
"RTN","HMPDLRA",110,0)
 N Y,D,S,T
"RTN","HMPDLRA",111,0)
 S D=$P(9999999-HMPIDT,"."),Y=""
"RTN","HMPDLRA",112,0)
 S S=0 F  S S=$O(^LRO(69,"C",LABORD,D,S)) Q:S<1  D  Q:Y
"RTN","HMPDLRA",113,0)
 . S T=0 F  S T=$O(^LRO(69,D,1,S,2,T)) Q:T<1  I 'TEST!(+$G(^(T,0))=TEST) S Y=+$P(^(0),U,7)
"RTN","HMPDLRA",114,0)
 ;I Y S Y=Y_U_$P($$OI^ORX8(Y),U,2)
"RTN","HMPDLRA",115,0)
 Q Y
"RTN","HMPDLRA",116,0)
 ;
"RTN","HMPDLRA",117,0)
NAME(X) ; -- Return name of subscript X
"RTN","HMPDLRA",118,0)
 I X="AU" Q "AUTOPSY"
"RTN","HMPDLRA",119,0)
 I X="BB" Q "BLOOD BANK"
"RTN","HMPDLRA",120,0)
 I X="CH" Q "CHEM,HEM,TOX,RIA,SER,etc."
"RTN","HMPDLRA",121,0)
 I X="CY" Q "CYTOPATHOLOGY"
"RTN","HMPDLRA",122,0)
 I X="EM" Q "ELECTRON MICROSCOPY"
"RTN","HMPDLRA",123,0)
 I X="MI" Q "MICROBIOLOGY"
"RTN","HMPDLRA",124,0)
 I X="SP" Q "SURGICAL PATHOLOGY"
"RTN","HMPDLRA",125,0)
 Q "ANATOMIC PATHOLOGY"
"RTN","HMPDLRA",126,0)
 ;
"RTN","HMPDLRA",127,0)
AREA(ACCNUM) ; -- Return name of accession area
"RTN","HMPDLRA",128,0)
 N X,Y,HMPA
"RTN","HMPDLRA",129,0)
 S X=$P($G(ACCNUM)," "),Y=""
"RTN","HMPDLRA",130,0)
 I $L(X) D FIND^DIC(68,,.01,"QX",X,,,,,"HMPA")
"RTN","HMPDLRA",131,0)
 S Y=$G(HMPA("DILIST",1,1))
"RTN","HMPDLRA",132,0)
 Q Y
"RTN","HMPDLRA",133,0)
 ;
"RTN","HMPDLRA",134,0)
 ; ------------ Get report(s) [via HMPDTIU] ------------
"RTN","HMPDLRA",135,0)
 ;
"RTN","HMPDLRA",136,0)
RPTS(DFN,BEG,END,MAX) ; -- find patient's lab reports
"RTN","HMPDLRA",137,0)
 N HMPSUB,HMPIDT,HMPITM,HMPTIU,HMPXID,LRDFN,HMPN,DA
"RTN","HMPDLRA",138,0)
 S DFN=+$G(DFN) Q:$G(DFN)<1
"RTN","HMPDLRA",139,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDLRA",140,0)
 S LRDFN=$$LRDFN^HMPXGLAB(DFN)  ;DE2818, (#63) LABORATORY REFERENCE
"RTN","HMPDLRA",141,0)
 K ^TMP("LRRR",$J,DFN) D RR^LR7OR1(DFN,,BEG,END,"AP",,,MAX)
"RTN","HMPDLRA",142,0)
 S HMPSUB="" F  S HMPSUB=$O(^TMP("LRRR",$J,DFN,HMPSUB)) Q:HMPSUB=""  D
"RTN","HMPDLRA",143,0)
 . S HMPIDT=0 F  S HMPIDT=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT)) Q:HMPIDT<1  I $O(^(HMPIDT,0)) D
"RTN","HMPDLRA",144,0)
 .. S HMPTIU=$S(HMPSUB="AU":$NA(^LR(LRDFN,101)),1:$NA(^LR(LRDFN,HMPSUB,HMPIDT,.05)))
"RTN","HMPDLRA",145,0)
 .. K HMPITM S HMPXID=HMPSUB_";"_HMPIDT
"RTN","HMPDLRA",146,0)
 .. I '$O(@HMPTIU@(0)) D RPT1(DFN,HMPXID,.HMPITM),XML^HMPDTIU(.HMPITM):$D(HMPITM) Q
"RTN","HMPDLRA",147,0)
 .. S HMPN=0 F  S HMPN=$O(@HMPTIU@(HMPN)) Q:HMPN<1  D
"RTN","HMPDLRA",148,0)
 ... S DA=+$P($G(@HMPTIU@(HMPN,0)),U,2) Q:DA<1  K HMPITM
"RTN","HMPDLRA",149,0)
 ... D EN1^HMPDTIU(DA,.HMPITM),XML^HMPDTIU(.HMPITM):$D(HMPITM)
"RTN","HMPDLRA",150,0)
 K ^TMP("LRRR",$J,DFN),^TMP("HMPTEXT",$J)
"RTN","HMPDLRA",151,0)
 Q
"RTN","HMPDLRA",152,0)
 ;
"RTN","HMPDLRA",153,0)
RPT1(DFN,ID,RPT) ; -- return report as a TIU document
"RTN","HMPDLRA",154,0)
 S DFN=+$G(DFN),ID=$G(ID) Q:DFN<1  Q:'$L(ID)
"RTN","HMPDLRA",155,0)
 N SUB,IDT,LRDFN,LR0,X,LOC
"RTN","HMPDLRA",156,0)
 K RPT,^TMP("HMPTEXT",$J)
"RTN","HMPDLRA",157,0)
 S SUB=$P(ID,";"),IDT=+$P(ID,";",2),LRDFN=$$LRDFN^HMPXGLAB(DFN)  ;DE2818, (#63) LABORATORY REFERENCE
"RTN","HMPDLRA",158,0)
 S LR0=$S(SUB="AU":$G(^LR(LRDFN,"AU")),1:$G(^LR(LRDFN,SUB,IDT,0)))
"RTN","HMPDLRA",159,0)
 S RPT("id")=ID,RPT("referenceDateTime")=9999999-IDT
"RTN","HMPDLRA",160,0)
 S RPT("localTitle")="LR "_$$NAME(SUB)_" REPORT"
"RTN","HMPDLRA",161,0)
 S RPT("documentClass")="LR LABORATORY REPORTS"
"RTN","HMPDLRA",162,0)
 S RPT("nationalTitle")="4697105^LABORATORY NOTE"
"RTN","HMPDLRA",163,0)
 S RPT("nationalTitleSubject")="4697104^LABORATORY"
"RTN","HMPDLRA",164,0)
 S RPT("nationalTitleType")="4696120^NOTE"
"RTN","HMPDLRA",165,0)
 S RPT("type")="LR",RPT("status")="COMPLETED"
"RTN","HMPDLRA",166,0)
 S:$G(FILTER("loinc")) RPT("loinc")=$P(FILTER("loinc"),U)
"RTN","HMPDLRA",167,0)
 S X=$P(LR0,U,$S(SUB="AU":5,1:8)),LOC="" S:$L(X) LOC=+$O(^SC("B",X,0))  ;DE2818, ***fix needed to get location IEN***
"RTN","HMPDLRA",168,0)
 S RPT("facility")=$$FAC^HMPD(LOC)
"RTN","HMPDLRA",169,0)
 I LOC D  ;look-up visit
"RTN","HMPDLRA",170,0)
 . N CDT S CDT=9999999-IDT
"RTN","HMPDLRA",171,0)
 . S X=$$GETENC^PXAPI(DFN,CDT,LOC)
"RTN","HMPDLRA",172,0)
 . S:X RPT("encounter")=+X
"RTN","HMPDLRA",173,0)
 S X=+$P(LR0,U,$S(SUB="AU":10,1:2)) ;pathologist
"RTN","HMPDLRA",174,0)
 S:X RPT("clinician",1)=X_U_$$GET1^DIQ(200,X_",",.01)_"^A"  ;DE2818, changed global read to FileMan
"RTN","HMPDLRA",175,0)
 S X=$S(SUB="AU":$P(LR0,U,15,16),1:$P(LR0,U,11)_U_$P(LR0,U,13)) I X D
"RTN","HMPDLRA",176,0)
 . N Y S Y=$P(X,U,2)
"RTN","HMPDLRA",177,0)
 . ;DE2818, changed global read to FileMan - (#.01) NAME and (#1) INITIAL
"RTN","HMPDLRA",178,0)
 . S RPT("clinician",2)=Y_U_$$GET1^DIQ(200,+Y_",",.01)_"^S^"_+X_U_$$GET1^DIQ(200,+Y_",",1)
"RTN","HMPDLRA",179,0)
 S:$G(HMPTEXT) RPT("content")=$$TEXT(DFN,SUB,IDT)
"RTN","HMPDLRA",180,0)
 Q
"RTN","HMPDLRA",181,0)
 ;
"RTN","HMPDLRA",182,0)
TEXT(DFN,SUB,IDT) ; -- Get report text, return temp array name
"RTN","HMPDLRA",183,0)
 N LRDFN,DATE,NAME,HMPS,HMPY,I,X,Y
"RTN","HMPDLRA",184,0)
 K ^TMP("LRC",$J),^TMP("LRH",$J),^TMP("LRT",$J)
"RTN","HMPDLRA",185,0)
 S DATE=9999999-+$G(IDT),NAME=$$NAME(SUB),HMPS(NAME)=""
"RTN","HMPDLRA",186,0)
 D EN^LR7OSUM(.HMPY,DFN,DATE,DATE,,,.HMPS)
"RTN","HMPDLRA",187,0)
 S Y=$NA(^TMP("HMPTEXT",$J,SUB_";"_IDT)) K @Y
"RTN","HMPDLRA",188,0)
 S I=+$G(^TMP("LRH",$J,NAME)) ;LRH=header
"RTN","HMPDLRA",189,0)
 F  S I=$O(^TMP("LRC",$J,I)) Q:I<1  S X=$G(^(I,0)) Q:X?1."="  S @Y@(I)=X
"RTN","HMPDLRA",190,0)
 K ^TMP("LRC",$J),^TMP("LRH",$J),^TMP("LRT",$J)
"RTN","HMPDLRA",191,0)
 Q Y
"RTN","HMPDLRA",192,0)
 ;
"RTN","HMPDLRA",193,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDLRA",194,0)
 ;
"RTN","HMPDLRA",195,0)
XML(LAB) ; -- Return result as XML in @HMP@(#)
"RTN","HMPDLRA",196,0)
 N ATT,X,Y,NAMES,I,J
"RTN","HMPDLRA",197,0)
 D ADD("<accession>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDLRA",198,0)
 S ATT="" F  S ATT=$O(LAB(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDLRA",199,0)
 . I $O(LAB(ATT,0)) D  S Y="" Q
"RTN","HMPDLRA",200,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDLRA",201,0)
 .. S NAMES=$S(ATT="document":"id^localTitle^nationalTitle^Z",ATT="value":"id^test^result^interpretation^units^low^high^localName^loinc^vuid^order^Z",1:"code^name^Z")
"RTN","HMPDLRA",202,0)
 .. S I=0 F  S I=$O(LAB(ATT,I)) Q:I<1  D
"RTN","HMPDLRA",203,0)
 ... S X=$G(LAB(ATT,I))
"RTN","HMPDLRA",204,0)
 ... S Y="<"_ATT_" "_$$LOOP ;_"/>" D ADD(Y)
"RTN","HMPDLRA",205,0)
 ... S X=$G(LAB(ATT,I,"content")) I '$L(X) S Y=Y_"/>" D ADD(Y) Q
"RTN","HMPDLRA",206,0)
 ... S Y=Y_">" D ADD(Y)
"RTN","HMPDLRA",207,0)
 ... S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDLRA",208,0)
 ... S J=0 F  S J=$O(@X@(J)) Q:J<1  S Y=$$ESC^HMPD(@X@(J)) D ADD(Y)
"RTN","HMPDLRA",209,0)
 ... D ADD("</content>"),ADD("</"_ATT_">")
"RTN","HMPDLRA",210,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDLRA",211,0)
 . S X=$G(LAB(ATT)),Y="" Q:'$L(X)
"RTN","HMPDLRA",212,0)
 . I ATT="comment" S Y="<"_ATT_" xml:space='preserve'>"_$$ESC^HMPD(X)_"</"_ATT_">" Q
"RTN","HMPDLRA",213,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDLRA",214,0)
 . I $L(X)>1 D  S Y=""
"RTN","HMPDLRA",215,0)
 .. S NAMES="code^name^Z"
"RTN","HMPDLRA",216,0)
 .. S Y="<"_ATT_" "_$$LOOP_"/>" D ADD(Y)
"RTN","HMPDLRA",217,0)
 D ADD("</accession>")
"RTN","HMPDLRA",218,0)
 Q
"RTN","HMPDLRA",219,0)
 ;
"RTN","HMPDLRA",220,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDLRA",221,0)
 N STR,P,TAG S STR=""
"RTN","HMPDLRA",222,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDLRA",223,0)
 Q STR
"RTN","HMPDLRA",224,0)
 ;
"RTN","HMPDLRA",225,0)
ADD(X) ; -- Add a line @HMP@(n)=X
"RTN","HMPDLRA",226,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDLRA",227,0)
 S @HMP@(HMPI)=X
"RTN","HMPDLRA",228,0)
 Q
"RTN","HMPDLRO")
1^164
"RTN","HMPDMC")
0^59^B58181283
"RTN","HMPDMC",1,0)
HMPDMC ;SLC/MKB,ASMR/RRB - Clinical Procedures (Medicine);Nov 05, 2015 19:31:41
"RTN","HMPDMC",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDMC",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDMC",4,0)
 ;
"RTN","HMPDMC",5,0)
 ; DE2818, ^SC and ^VA(200) references supprted
"RTN","HMPDMC",6,0)
 ; External References          DBIA#
"RTN","HMPDMC",7,0)
 ; -------------------          -----
"RTN","HMPDMC",8,0)
 ; ^SC                          10040
"RTN","HMPDMC",9,0)
 ; ^TIU(8925.1                   5677
"RTN","HMPDMC",10,0)
 ; ^VA(200                      10060
"RTN","HMPDMC",11,0)
 ; %DT                          10003
"RTN","HMPDMC",12,0)
 ; DILFD                         2055
"RTN","HMPDMC",13,0)
 ; DIQ                           2056
"RTN","HMPDMC",14,0)
 ; GMRCGUIB                      2980
"RTN","HMPDMC",15,0)
 ; ICPTCOD                       1995
"RTN","HMPDMC",16,0)
 ; MCARUTL2                      3279
"RTN","HMPDMC",17,0)
 ; MCARUTL3                      3280
"RTN","HMPDMC",18,0)
 ; MDPS1,^TMP("MDHSP"/"MDPTXT"   4230
"RTN","HMPDMC",19,0)
 ; TIULQ                         2693
"RTN","HMPDMC",20,0)
 ; TIUSRVLO                      2834
"RTN","HMPDMC",21,0)
 ; XUAF4                         2171
"RTN","HMPDMC",22,0)
 Q
"RTN","HMPDMC",23,0)
 ; ------------ Get procedures from VistA ------------
"RTN","HMPDMC",24,0)
 ;
"RTN","HMPDMC",25,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's procedures
"RTN","HMPDMC",26,0)
 N HMPITM,RES,HMPN,HMPX,RTN,DATE,CONS,TIUN,X0,DA,GBL,X,Y,%DT,HMPT,LT,NT,LOC
"RTN","HMPDMC",27,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDMC",28,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDMC",29,0)
 ;
"RTN","HMPDMC",30,0)
 ; get one procedure
"RTN","HMPDMC",31,0)
 I $G(ID) D  ;reset dates for MDPS1
"RTN","HMPDMC",32,0)
 . N HMPMC,IEN,FILE
"RTN","HMPDMC",33,0)
 . S IEN=+ID,FILE=+$P(ID,"(",2) Q:FILE=702
"RTN","HMPDMC",34,0)
 . D MEDLKUP^MCARUTL3(.HMPMC,FILE,IEN)
"RTN","HMPDMC",35,0)
 . S X=$P(HMPMC,U,6) S:X (BEG,END)=X
"RTN","HMPDMC",36,0)
 ;
"RTN","HMPDMC",37,0)
 ; get all procedures
"RTN","HMPDMC",38,0)
 K ^TMP("MDHSP",$J) S RES=""
"RTN","HMPDMC",39,0)
 D EN1^MDPS1(RES,DFN,BEG,END,MAX,"",0)
"RTN","HMPDMC",40,0)
 S HMPN=0 F  S HMPN=$O(^TMP("MDHSP",$J,HMPN)) Q:HMPN<1  S HMPX=$G(^(HMPN)) D
"RTN","HMPDMC",41,0)
 . I $G(ID),ID'=+$P(HMPX,U,2) Q              ;update one procedure
"RTN","HMPDMC",42,0)
 . S RTN=$P(HMPX,U,3,4) Q:RTN="PRPRO^MDPS4"  ;skip non-CP items
"RTN","HMPDMC",43,0)
 . S X=$P(HMPX,U,6),%DT="TX" D ^%DT S:Y>0 DATE=Y
"RTN","HMPDMC",44,0)
 . S GBL=+$P(HMPX,U,2)_";"_$S(RTN="PR702^MDPS1":"MDD(702,",1:$$ROOT(DFN,$P(HMPX,U,11),DATE))
"RTN","HMPDMC",45,0)
 . Q:'GBL  I $G(ID),ID'=GBL Q                ;unknown, or not requested
"RTN","HMPDMC",46,0)
 . ;
"RTN","HMPDMC",47,0)
 . S CONS=+$P(HMPX,U,13) D:CONS DOCLIST^GMRCGUIB(.HMPD,CONS) S X0=$G(HMPD(0)) ;=^GMR(123,ID,0)
"RTN","HMPDMC",48,0)
 . S TIUN=+$P(HMPX,U,14) S:TIUN TIUN=TIUN_U_$$RESOLVE^TIUSRVLO(TIUN)
"RTN","HMPDMC",49,0)
A . ;
"RTN","HMPDMC",50,0)
 . K HMPITM S HMPITM("id")=GBL,HMPITM("name")=$P(HMPX,U)
"RTN","HMPDMC",51,0)
 . S HMPITM("dateTime")=DATE,HMPITM("category")="CP"
"RTN","HMPDMC",52,0)
 . S X=$P(HMPX,U,7) S:$L(X) HMPITM("interpretation")=X
"RTN","HMPDMC",53,0)
 . I CONS,X0 D
"RTN","HMPDMC",54,0)
 .. N HMPJ S HMPITM("consult")=CONS
"RTN","HMPDMC",55,0)
 .. S HMPITM("requested")=+X0,HMPITM("order")=+$P(X0,U,3)
"RTN","HMPDMC",56,0)
 .. S HMPITM("status")=$$EXTERNAL^DILFD(123,8,,$P(X0,U,12))
"RTN","HMPDMC",57,0)
 .. S HMPJ=0 F  S HMPJ=$O(HMPD(50,HMPJ)) Q:HMPJ<1  S X=+$G(HMPD(50,HMPJ)) D
"RTN","HMPDMC",58,0)
 ... K HMPT D EXTRACT^TIULQ(X,"HMPT",,.01) S LT=$G(HMPT(X,.01,"E"))
"RTN","HMPDMC",59,0)
 ... S NT=$$GET1^DIQ(8925.1,+$G(HMPT(X,.01,"I"))_",",1501)
"RTN","HMPDMC",60,0)
 ... S HMPITM("document",X)=X_U_LT_U_NT  ;ien^local^national title
"RTN","HMPDMC",61,0)
 ... S:$G(HMPTEXT) HMPITM("document",X,"content")=$$TEXT^HMPDTIU(X)
"RTN","HMPDMC",62,0)
 ... S:'TIUN TIUN=X ;get supporting fields
"RTN","HMPDMC",63,0)
B . ;
"RTN","HMPDMC",64,0)
 . I TIUN D
"RTN","HMPDMC",65,0)
 .. S X=$P(TIUN,U,5) S:X HMPITM("provider")=+X_U_$P(X,";",3)
"RTN","HMPDMC",66,0)
 .. S:$P(TIUN,U,11) HMPITM("hasImages")=1
"RTN","HMPDMC",67,0)
 .. K HMPT D EXTRACT^TIULQ(+TIUN,"HMPT",,".03;.05;1211",,,"I")
"RTN","HMPDMC",68,0)
 .. S HMPITM("encounter")=+$G(HMPT(+TIUN,.03,"I"))
"RTN","HMPDMC",69,0)
 .. S LOC=+$G(HMPT(+TIUN,1211,"I")) I LOC S LOC=LOC_U_$P($G(^SC(LOC,0)),U)
"RTN","HMPDMC",70,0)
 .. E  S X=$P(TIUN,U,6) S:$L(X) LOC=+$O(^SC("B",X,0))_U_X
"RTN","HMPDMC",71,0)
 .. S:LOC HMPITM("location")=LOC,HMPITM("facility")=$$FAC^HMPD(+LOC)
"RTN","HMPDMC",72,0)
 .. I '$D(HMPITM("status")) S X=+$G(HMPT(+TIUN,.05,"I")),HMPITM("status")=$S(X<6:"PARTIAL RESULTS",1:"COMPLETE")
"RTN","HMPDMC",73,0)
 .. I '$G(HMPITM("document",+TIUN)) D
"RTN","HMPDMC",74,0)
 ... K HMPT D EXTRACT^TIULQ(+TIUN,"HMPT",,.01,,,"I")
"RTN","HMPDMC",75,0)
 ... S NT=$$GET1^DIQ(8925.1,+$G(HMPT(+TIUN,.01,"I"))_",",1501)
"RTN","HMPDMC",76,0)
 ... S HMPITM("document",+TIUN)=$P(TIUN,U,1,2)_U_NT  ;ien^local^national title
"RTN","HMPDMC",77,0)
 ... S:$G(HMPTEXT) HMPITM("document",+TIUN,"content")=$$TEXT^HMPDTIU(+TIUN)
"RTN","HMPDMC",78,0)
C . ;
"RTN","HMPDMC",79,0)
 . ; if no consult or note/visit ...
"RTN","HMPDMC",80,0)
 . I '$D(HMPITM("facility")) S X=$P(X0,U,21),HMPITM("facility")=$S(X:$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U),1:$$FAC^HMPD)
"RTN","HMPDMC",81,0)
 . I '$D(HMPITM("status")) S HMPITM("status")="COMPLETE"
"RTN","HMPDMC",82,0)
 . ;I DA D  ;get CPT code from #697.2
"RTN","HMPDMC",83,0)
 . ;. K HMPT D GETS^DIQ(697.2,DA_",","1000*",,"HMPT")
"RTN","HMPDMC",84,0)
 . ;. N IENS S IENS=$O(HMPT(697.21,"")) Q:IENS=""
"RTN","HMPDMC",85,0)
 . ;. S X=HMPT(697.21,IENS,.01),HMPITM("type")=$$CPT(X)
"RTN","HMPDMC",86,0)
 . ;
"RTN","HMPDMC",87,0)
 . D XML(.HMPITM)
"RTN","HMPDMC",88,0)
ENQ ;
"RTN","HMPDMC",89,0)
 K ^TMP("MDHSP",$J),^TMP("HMPTEXT",$J)
"RTN","HMPDMC",90,0)
 Q
"RTN","HMPDMC",91,0)
 ;
"RTN","HMPDMC",92,0)
ROOT(DFN,NAME,DATE) ; -- return vptr ID for procedure instance
"RTN","HMPDMC",93,0)
 N HMPMC,Y
"RTN","HMPDMC",94,0)
 D SUB^MCARUTL2(.HMPMC,DFN,NAME,DATE,DATE)
"RTN","HMPDMC",95,0)
 S Y=$S(+$G(HMPMC):$P($G(HMPMC(HMPMC)),U,4)_",",1:"")
"RTN","HMPDMC",96,0)
 Q Y
"RTN","HMPDMC",97,0)
 ;
"RTN","HMPDMC",98,0)
CPT(IEN) ; -- return code^description for CPT code, or "^" if error
"RTN","HMPDMC",99,0)
 N X0,HMPX,N,I,X,Y S IEN=+$G(IEN)
"RTN","HMPDMC",100,0)
 S X0=$$CPT^ICPTCOD(IEN) I X0<0 Q "^"
"RTN","HMPDMC",101,0)
 S Y=$P(X0,U,2,3)                   ;CPT Code^Short Name
"RTN","HMPDMC",102,0)
 S N=$$CPTD^ICPTCOD($P(Y,U),"HMPX") ;CPT Description
"RTN","HMPDMC",103,0)
 I N>0,$L($G(HMPX(1))) D
"RTN","HMPDMC",104,0)
 . S X=$G(HMPX(1)),I=1
"RTN","HMPDMC",105,0)
 . F  S I=$O(HMPX(I)) Q:I<1  Q:HMPX(I)=" "  S X=X_" "_HMPX(I)
"RTN","HMPDMC",106,0)
 . S $P(Y,U,2)=X
"RTN","HMPDMC",107,0)
 Q Y
"RTN","HMPDMC",108,0)
 ;
"RTN","HMPDMC",109,0)
 ; ------------ Get report(s) [via HMPDTIU] ------------
"RTN","HMPDMC",110,0)
 ;
"RTN","HMPDMC",111,0)
RPTS(DFN,BEG,END,MAX) ; -- find patient's medicine reports
"RTN","HMPDMC",112,0)
 N HMPITM,HMPN,HMPX,RTN,TIUN,CONS,HMPD,I,DA,X,Y,%DT,DATE,GBL,RES
"RTN","HMPDMC",113,0)
 S DFN=+$G(DFN) Q:$G(DFN)<1
"RTN","HMPDMC",114,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999),RES=""
"RTN","HMPDMC",115,0)
 K ^TMP("MDHSP",$J) D EN1^MDPS1(RES,DFN,BEG,END,MAX,"",0)
"RTN","HMPDMC",116,0)
 S HMPN=0 F  S HMPN=$O(^TMP("MDHSP",$J,HMPN)) Q:HMPN<1  S HMPX=$G(^(HMPN)) D
"RTN","HMPDMC",117,0)
 . S RTN=$P(HMPX,U,3,4) ;Q:RTN="PRPRO^MDPS4"  ;skip non-CP items
"RTN","HMPDMC",118,0)
 . S TIUN=+$P(HMPX,U,14) K HMPITM
"RTN","HMPDMC",119,0)
 . I TIUN D EN1^HMPDTIU(TIUN,.HMPITM),XML^HMPDTIU(.HMPITM):$D(HMPITM)
"RTN","HMPDMC",120,0)
 . S CONS=+$P(HMPX,U,13) D:CONS DOCLIST^GMRCGUIB(.HMPD,CONS)
"RTN","HMPDMC",121,0)
 . S I=0 F  S I=$O(HMPD(50,I)) Q:I<1  D
"RTN","HMPDMC",122,0)
 .. K HMPITM S DA=+HMPD(50,I) Q:DA=TIUN
"RTN","HMPDMC",123,0)
 .. D EN1^HMPDTIU(DA,.HMPITM),XML^HMPDTIU(.HMPITM):$D(HMPITM)
"RTN","HMPDMC",124,0)
 . Q:TIUN!$G(DA)                             ;done [got TIU note(s)]
"RTN","HMPDMC",125,0)
 . Q:RTN="PR702^MDPS1"                       ;CP, but no TIU note yet
"RTN","HMPDMC",126,0)
 . Q:RTN="PRPRO^MDPS4"                       ;non-CP procedure
"RTN","HMPDMC",127,0)
 . ; find ID for pre-TIU report
"RTN","HMPDMC",128,0)
 . S X=$P(HMPX,U,6),%DT="TX" D ^%DT S:Y>0 DATE=Y
"RTN","HMPDMC",129,0)
 . S GBL=+$P(HMPX,U,2)_";"_$$ROOT(DFN,$P(HMPX,U,11),DATE)
"RTN","HMPDMC",130,0)
 . I GBL D RPT1(DFN,GBL,.HMPITM),XML^HMPDTIU(.HMPITM):$D(HMPITM)
"RTN","HMPDMC",131,0)
 K ^TMP("MDHSP",$J),^TMP("HMPTEXT",$J)
"RTN","HMPDMC",132,0)
 Q
"RTN","HMPDMC",133,0)
 ;
"RTN","HMPDMC",134,0)
RPT1(DFN,ID,RPT) ; -- return report as a TIU document
"RTN","HMPDMC",135,0)
 S DFN=+$G(DFN),ID=$G(ID) Q:DFN<1  Q:'$L(ID)
"RTN","HMPDMC",136,0)
 N HMPY,HMPFN,X
"RTN","HMPDMC",137,0)
 S HMPFN=+$P(ID,"(",2)
"RTN","HMPDMC",138,0)
 D MEDLKUP^MCARUTL3(.HMPY,HMPFN,+ID)
"RTN","HMPDMC",139,0)
 S RPT("id")=ID,RPT("referenceDateTime")=$P(HMPY,U,6)
"RTN","HMPDMC",140,0)
 S RPT("localTitle")=$P(HMPY,U,9),RPT("category")="CP"
"RTN","HMPDMC",141,0)
 S RPT("documentClass")="CLINICAL PROCEDURES"
"RTN","HMPDMC",142,0)
 S RPT("nationalTitle")="4696566^PROCEDURE REPORT"
"RTN","HMPDMC",143,0)
 S RPT("nationalTitleService")="4696471^PROCEDURE"
"RTN","HMPDMC",144,0)
 S RPT("nationalTitleType")="4696123^REPORT"
"RTN","HMPDMC",145,0)
 S:$G(FILTER("loinc")) RPT("loinc")=$P(FILTER("loinc"),U)
"RTN","HMPDMC",146,0)
 S X=$$GET1^DIQ(HMPFN,+ID_",",1506)
"RTN","HMPDMC",147,0)
 S RPT("status")=$S($L(X):X,1:"COMPLETED")
"RTN","HMPDMC",148,0)
 S X=+$$GET1^DIQ(HMPFN,+ID_",",701,"I")
"RTN","HMPDMC",149,0)
 S:X RPT("clinician",1)=X_U_$P($G(^VA(200,X,0)),U)_"^A"
"RTN","HMPDMC",150,0)
 S X=+$$GET1^DIQ(HMPFN,+ID_",",1503,"I")
"RTN","HMPDMC",151,0)
 S:X RPT("clinician",2)=X_U_$P($G(^VA(200,X,0)),U)_"^S^"_$$GET1^DIQ(HMPFN,+ID_",",1505,"I")_U_$$SIG^HMPDTIU(X)
"RTN","HMPDMC",152,0)
 ; RPT("encounter")=$$GET1^DIQ(HMPFN,+ID_",",900,"I")
"RTN","HMPDMC",153,0)
 S RPT("facility")=$$FAC^HMPD
"RTN","HMPDMC",154,0)
 S:$G(HMPTEXT) RPT("content")=$$TEXT(DFN,ID,$P(HMPY,U,9))
"RTN","HMPDMC",155,0)
 Q
"RTN","HMPDMC",156,0)
 ;
"RTN","HMPDMC",157,0)
TEXT(DFN,ID,NAME) ; -- Get report text, return temp array name
"RTN","HMPDMC",158,0)
 N MCARGDA,MCPRO,MDALL,I,X
"RTN","HMPDMC",159,0)
 S MCARGDA=+$G(ID),MCPRO=NAME,MDALL=1 D PR690^MDPS1
"RTN","HMPDMC",160,0)
 K ^TMP("HMPTEXT",$J,ID)
"RTN","HMPDMC",161,0)
 S I=0 F  S I=$O(^TMP("MDPTXT",$J,MCARGDA,MCPRO,I)) Q:I<1  S X=$G(^(I,0)),^TMP("HMPTEXT",$J,ID,I)=X
"RTN","HMPDMC",162,0)
 S Y=$NA(^TMP("HMPTEXT",$J,ID))
"RTN","HMPDMC",163,0)
 Q Y
"RTN","HMPDMC",164,0)
 ;
"RTN","HMPDMC",165,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDMC",166,0)
 ;
"RTN","HMPDMC",167,0)
XML(PROC) ; -- Return patient procedure as XML
"RTN","HMPDMC",168,0)
 ;  as <element code='123' displayName='ABC' />
"RTN","HMPDMC",169,0)
 N ATT,X,Y,I,J,NAMES
"RTN","HMPDMC",170,0)
 D ADD("<procedure>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDMC",171,0)
 S ATT="" F  S ATT=$O(PROC(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDMC",172,0)
 . S NAMES=$S(ATT="document":"id^localTitle^nationalTitle^Z",1:"code^name^Z")
"RTN","HMPDMC",173,0)
 . I $O(PROC(ATT,0)) D  S Y="" Q  ;multiples
"RTN","HMPDMC",174,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDMC",175,0)
 .. S I=0 F  S I=$O(PROC(ATT,I)) Q:I<1  D
"RTN","HMPDMC",176,0)
 ... S X=$G(PROC(ATT,I)),Y="<"_ATT_" "_$$LOOP
"RTN","HMPDMC",177,0)
 ... S X=$G(PROC(ATT,I,"content")) I '$L(X) S Y=Y_"/>" D ADD(Y) Q
"RTN","HMPDMC",178,0)
 ... S Y=Y_">" D ADD(Y)
"RTN","HMPDMC",179,0)
 ... S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDMC",180,0)
 ... S J=0 F  S J=$O(@X@(J)) Q:J<1  S Y=$$ESC^HMPD(@X@(J)) D ADD(Y)
"RTN","HMPDMC",181,0)
 ... D ADD("</content>"),ADD("</"_ATT_">")
"RTN","HMPDMC",182,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDMC",183,0)
 . S X=$G(PROC(ATT)),Y="" Q:'$L(X)
"RTN","HMPDMC",184,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDMC",185,0)
 . I $L(X)>1 S Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDMC",186,0)
 D ADD("</procedure>")
"RTN","HMPDMC",187,0)
 Q
"RTN","HMPDMC",188,0)
 ;
"RTN","HMPDMC",189,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDMC",190,0)
 N STR,P,TAG S STR=""
"RTN","HMPDMC",191,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDMC",192,0)
 Q STR
"RTN","HMPDMC",193,0)
 ;
"RTN","HMPDMC",194,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPDMC",195,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDMC",196,0)
 S @HMP@(HMPI)=X
"RTN","HMPDMC",197,0)
 Q
"RTN","HMPDMDC")
0^60^B45041787
"RTN","HMPDMDC",1,0)
HMPDMDC ;SLC/MKB,DP,ASMR/RRB - CLiO extract;8/2/11  15:29
"RTN","HMPDMDC",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDMDC",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDMDC",4,0)
 ;
"RTN","HMPDMDC",5,0)
 ; External References          DBIA#
"RTN","HMPDMDC",6,0)
 ; -------------------          -----
"RTN","HMPDMDC",7,0)
 ; ^MDC(704.101                 5748 (Private)
"RTN","HMPDMDC",8,0)
 ; ^MDC(704.102                 5748 (Private)
"RTN","HMPDMDC",9,0)
 ; ^MDC(704.117                 5748 (Private)
"RTN","HMPDMDC",10,0)
 ; ^MDC(704.118                 5811 (Private)
"RTN","HMPDMDC",11,0)
 ; DIC                          2051
"RTN","HMPDMDC",12,0)
 ; DIQ                          2056
"RTN","HMPDMDC",13,0)
 ; XLFDT                       10103
"RTN","HMPDMDC",14,0)
 ; XLFSTR                      10104
"RTN","HMPDMDC",15,0)
 Q
"RTN","HMPDMDC",16,0)
 ; ------------ Get observations from VistA ------------
"RTN","HMPDMDC",17,0)
 ;
"RTN","HMPDMDC",18,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's observations
"RTN","HMPDMDC",19,0)
 N HMPCLIO,HMPN,HMPITM,HMPCNT,X
"RTN","HMPDMDC",20,0)
 ;
"RTN","HMPDMDC",21,0)
 ; get one observation
"RTN","HMPDMDC",22,0)
 I $L($G(ID)) D EN1(ID,.HMPITM),XML(.HMPITM) Q
"RTN","HMPDMDC",23,0)
 ;
"RTN","HMPDMDC",24,0)
 ; get all patient observations
"RTN","HMPDMDC",25,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDMDC",26,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999),HMPCNT=0
"RTN","HMPDMDC",27,0)
 ;D QRYPT^MDCLIO1("HMPCLIO",DFN,BEG,END) ;all [verified] observations
"RTN","HMPDMDC",28,0)
 D QRYPT("HMPCLIO",DFN,BEG,END) ;all [verified] observations
"RTN","HMPDMDC",29,0)
 S HMPN=0 F  S HMPN=$O(HMPCLIO(HMPN)) Q:(HMPN<1)!(HMPCNT'<MAX)  D
"RTN","HMPDMDC",30,0)
 . S ID=$G(HMPCLIO(HMPN)) K HMPITM ;GUID
"RTN","HMPDMDC",31,0)
 . D EN1(ID,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDMDC",32,0)
 . D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDMDC",33,0)
 Q
"RTN","HMPDMDC",34,0)
 ;
"RTN","HMPDMDC",35,0)
EN1(GUID,CLIO) ; -- return an observation in CLIO("attribute")=value
"RTN","HMPDMDC",36,0)
 N HMPT,HMPC,LOC,I,X,Y K CLIO
"RTN","HMPDMDC",37,0)
 S GUID=$G(GUID) Q:GUID=""  ;invalid GUID
"RTN","HMPDMDC",38,0)
 ;D QRYOBS^MDCLIO1("HMPC",GUID) Q:'$D(HMPC)  ;doesn't exist
"RTN","HMPDMDC",39,0)
 D QRYOBS("HMPC",GUID) Q:'$D(HMPC)  ;doesn't exist
"RTN","HMPDMDC",40,0)
 Q:$L($G(HMPC("PARENT_ID","E")))            ;PARENT also in list
"RTN","HMPDMDC",41,0)
 S CLIO("id")=GUID,CLIO("vuid")=$G(HMPC("TERM_ID","I"))
"RTN","HMPDMDC",42,0)
 S CLIO("name")=$G(HMPC("TERM_ID","E"))
"RTN","HMPDMDC",43,0)
 S CLIO("value")=$G(HMPC("SVALUE","E"))
"RTN","HMPDMDC",44,0)
 S CLIO("units")=$G(HMPC("UNIT_ID","ABBV"))
"RTN","HMPDMDC",45,0)
 S CLIO("entered")=$G(HMPC("ENTERED_DATE_TIME","I"))
"RTN","HMPDMDC",46,0)
 S CLIO("observed")=$G(HMPC("OBSERVED_DATE_TIME","I"))
"RTN","HMPDMDC",47,0)
 ;D QRYTYPES^MDCLIO1("HMPT")
"RTN","HMPDMDC",48,0)
 D QRYTYPES("HMPT")
"RTN","HMPDMDC",49,0)
 F I=3:1:7 S X=$G(HMPT(I,"XML")) Q:I<1  I $L($G(HMPC(X,"E"))) D
"RTN","HMPDMDC",50,0)
 . S Y=HMPT(I,"NAME"),Y=$S(Y="LOCATION":"bodySite",1:$$LOW^XLFSTR(Y))
"RTN","HMPDMDC",51,0)
 . S CLIO(Y)=HMPC(X,"I")_U_HMPC(X,"E")
"RTN","HMPDMDC",52,0)
 S CLIO("range")=$G(HMPC("RANGE","E"))
"RTN","HMPDMDC",53,0)
 S CLIO("status")=$G(HMPC("STATUS","E"))
"RTN","HMPDMDC",54,0)
 S LOC=$G(HMPC("HOSPITAL_LOCATION_ID","I")),CLIO("facility")=$$FAC^HMPD(LOC)
"RTN","HMPDMDC",55,0)
 S CLIO("location")=LOC_U_$G(HMPC("HOSPITAL_LOCATION_ID","E"))
"RTN","HMPDMDC",56,0)
 S CLIO("comment")=$G(HMPC("COMMENT","E"))
"RTN","HMPDMDC",57,0)
 Q
"RTN","HMPDMDC",58,0)
 ;
"RTN","HMPDMDC",59,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDMDC",60,0)
 ;
"RTN","HMPDMDC",61,0)
XML(OBS) ; -- Return observation as XML in @HMP@(#)
"RTN","HMPDMDC",62,0)
 N ATT,X,Y,I,J,P,NAMES,TAG
"RTN","HMPDMDC",63,0)
 D ADD("<observation>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDMDC",64,0)
 S ATT="" F  S ATT=$O(OBS(ATT)) Q:ATT=""  D
"RTN","HMPDMDC",65,0)
 . S X=$G(OBS(ATT)),Y="" Q:'$L(X)
"RTN","HMPDMDC",66,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" D ADD(Y) Q
"RTN","HMPDMDC",67,0)
 . I $L(X)>1 D
"RTN","HMPDMDC",68,0)
 .. S Y="<"_ATT_" "
"RTN","HMPDMDC",69,0)
 .. F P=1:1 S TAG=$P("code^name^Z",U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDMDC",70,0)
 .. S Y=Y_"/>" D ADD(Y)
"RTN","HMPDMDC",71,0)
 D ADD("</observation>")
"RTN","HMPDMDC",72,0)
 Q
"RTN","HMPDMDC",73,0)
 ;
"RTN","HMPDMDC",74,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDMDC",75,0)
 N STR,P,TAG S STR=""
"RTN","HMPDMDC",76,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDMDC",77,0)
 Q STR
"RTN","HMPDMDC",78,0)
 ;
"RTN","HMPDMDC",79,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPDMDC",80,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDMDC",81,0)
 S @HMP@(HMPI)=X
"RTN","HMPDMDC",82,0)
 Q
"RTN","HMPDMDC",83,0)
 ;
"RTN","HMPDMDC",84,0)
 ; -- CliO specific code accessing the ^MDC( global for data
"RTN","HMPDMDC",85,0)
 ; 
"RTN","HMPDMDC",86,0)
QRYPT(HMPRET,HMPDFN,HMPFR,HMPTO,HMPSTAT) ; List of observations by pt, datetime, status
"RTN","HMPDMDC",87,0)
 K @HMPRET
"RTN","HMPDMDC",88,0)
 N HMPDT,HMPIEN
"RTN","HMPDMDC",89,0)
 S HMPSTAT=$G(HMPSTAT,1) ; Default to Verified
"RTN","HMPDMDC",90,0)
 F HMPDT=HMPFR-.0000001:0 S HMPDT=$O(^MDC(704.117,"AS",HMPSTAT,HMPDFN,HMPDT)) Q:'HMPDT!(HMPDT>HMPTO)  D
"RTN","HMPDMDC",91,0)
 . F HMPIEN=0:0 S HMPIEN=$O(^MDC(704.117,"AS",HMPSTAT,HMPDFN,HMPDT,HMPIEN)) Q:'HMPIEN  D
"RTN","HMPDMDC",92,0)
 . . S:$P(^MDC(704.117,HMPIEN,0),U,9)=HMPSTAT @HMPRET@(HMPIEN)=$P(^MDC(704.117,HMPIEN,0),U)
"RTN","HMPDMDC",93,0)
 Q
"RTN","HMPDMDC",94,0)
 ;
"RTN","HMPDMDC",95,0)
QRYOBS(HMPRET,HMPID) ; Return a single observation
"RTN","HMPDMDC",96,0)
 K @HMPRET
"RTN","HMPDMDC",97,0)
 N HMPTMP,HMPIEN
"RTN","HMPDMDC",98,0)
 S HMPIEN=$$FIND1^DIC(704.117,"","PKX",HMPID,"PK")
"RTN","HMPDMDC",99,0)
 I HMPIEN<1 S @HMPRET@(0)="-1^No such observation '"_HMPID_"'" Q
"RTN","HMPDMDC",100,0)
 D GETS^DIQ(704.117,HMPIEN_",","*","EIR","HMPTMP")
"RTN","HMPDMDC",101,0)
 M @HMPRET=HMPTMP(704.117,HMPIEN_",") K HMPTMP
"RTN","HMPDMDC",102,0)
 S @HMPRET@("TERM_ID","I")=$$GET1^DIQ(704.117,HMPIEN_",",".07:99.99")
"RTN","HMPDMDC",103,0)
 S @HMPRET@("TERM_ID","E")=$$GET1^DIQ(704.117,HMPIEN_",",".07:.02")
"RTN","HMPDMDC",104,0)
 S @HMPRET@("TERM_ID","GUID")=$$GET1^DIQ(704.117,HMPIEN_",",".07")
"RTN","HMPDMDC",105,0)
 S @HMPRET@("TERM_ID","ABBV")=$$GET1^DIQ(704.117,HMPIEN_",",".07:.03")
"RTN","HMPDMDC",106,0)
 D:$$GET1^DIQ(704.117,HMPIEN_",",".07:.06","I")=3  ; Coded data values
"RTN","HMPDMDC",107,0)
 . S HMPTMP=$$FIND1^DIC(704.101,"","PKX",@HMPRET@("SVALUE","I"),"PK")
"RTN","HMPDMDC",108,0)
 . S @HMPRET@("SVALUE","E")=$$GET1^DIQ(704.101,HMPTMP_",",.02)
"RTN","HMPDMDC",109,0)
 D QRYQUAL(HMPRET,HMPIEN)
"RTN","HMPDMDC",110,0)
 D QRYCTX($NA(@HMPRET@("CONTEXT")),HMPID)
"RTN","HMPDMDC",111,0)
 Q
"RTN","HMPDMDC",112,0)
 ;
"RTN","HMPDMDC",113,0)
QRYQUAL(HMPRET,HMPIEN) ; Returns the qualifiers for obs in HMPIEN
"RTN","HMPDMDC",114,0)
 ; We do NOT want to kill HMPRET here because it points at the parent node of the return
"RTN","HMPDMDC",115,0)
 N HMPQUAL
"RTN","HMPDMDC",116,0)
 F Y=0:0 S Y=$O(^MDC(704.118,"PK",HMPIEN,Y)) Q:'Y  D  ;ICR 5811 DE2818 ASF 11/25/15
"RTN","HMPDMDC",117,0)
 . S HMPQUAL=$$GET1^DIQ(704.101,Y_",",".05:.02")
"RTN","HMPDMDC",118,0)
 . S @HMPRET@(HMPQUAL,"I")=$$GET1^DIQ(704.101,Y_",","99.99")
"RTN","HMPDMDC",119,0)
 . S @HMPRET@(HMPQUAL,"E")=$$GET1^DIQ(704.101,Y_",",".02")
"RTN","HMPDMDC",120,0)
 . S @HMPRET@(HMPQUAL,"GUID")=$$GET1^DIQ(704.101,Y_",",".01")
"RTN","HMPDMDC",121,0)
 . S @HMPRET@(HMPQUAL,"ABBV")=$$GET1^DIQ(704.101,Y_",",".03")
"RTN","HMPDMDC",122,0)
 Q
"RTN","HMPDMDC",123,0)
 ;
"RTN","HMPDMDC",124,0)
QRYCTX(HMPRET,HMPID) ; We need a terminology based context observation relationship here
"RTN","HMPDMDC",125,0)
 N HMPIEN,HMPCTX,HMPDT,HMPFR,HMPTO,HMPDFN,HMPTERM,HMPCNT,HMPXID,HMPOBS
"RTN","HMPDMDC",126,0)
 S HMPIEN=+$$FIND1^DIC(704.117,"","PKX",HMPID,"PK") Q:HMPIEN<1
"RTN","HMPDMDC",127,0)
 S HMPCTX=$$GET1^DIQ(704.117,HMPIEN_",",.07) ; GET THE PRIMARY TERM (GUID)
"RTN","HMPDMDC",128,0)
 ; FILTER OUT EVERYTHING BUT SpO2 for now
"RTN","HMPDMDC",129,0)
 Q:HMPCTX'="{5F84DD55-3CCF-094C-2536-B51EB7FAD999}"
"RTN","HMPDMDC",130,0)
 S HMPDFN=+$$GET1^DIQ(704.117,HMPIEN_",",.08,"I") ; GET THE PATIENT
"RTN","HMPDMDC",131,0)
 S HMPDT=+$$GET1^DIQ(704.117,HMPIEN_",",.05,"I") ; GET THE OBS DATE
"RTN","HMPDMDC",132,0)
 S HMPFR=$$FMADD^XLFDT(HMPDT,0,0,0,-30) ; PREVIOUS 30 SECONDS
"RTN","HMPDMDC",133,0)
 S HMPTO=$$FMADD^XLFDT(HMPDT,0,0,0,30) ; NEXT 30 SECONDS
"RTN","HMPDMDC",134,0)
 ; Now we find the context observations
"RTN","HMPDMDC",135,0)
 F HMPDT=HMPFR:0 S HMPDT=$O(^MDC(704.117,"PT",HMPDFN,HMPDT)) Q:'HMPDT!(HMPDT>HMPTO)  D  ;ICR 5810 DE2818 ASF 11/25/15 
"RTN","HMPDMDC",136,0)
 . F HMPOBS=0:0 S HMPOBS=$O(^MDC(704.117,"PT",HMPDFN,HMPDT,HMPOBS)) Q:'HMPOBS  D
"RTN","HMPDMDC",137,0)
 . . Q:$$GET1^DIQ(704.117,HMPOBS_",",.09,"I")'=1  ; Verified Only
"RTN","HMPDMDC",138,0)
 . . S HMPXID=$$GET1^DIQ(704.117,HMPOBS_",",.01)
"RTN","HMPDMDC",139,0)
 . . Q:HMPXID=HMPID  ; You should ignore yourself in this loop
"RTN","HMPDMDC",140,0)
 . . S HMPTERM=$$GET1^DIQ(704.117,HMPOBS_",",".07")
"RTN","HMPDMDC",141,0)
 . . ; INSERT FILTER CODE FOR O2 Flowrate and Concentration here - In the future we will find all context terms for an observation in terminology
"RTN","HMPDMDC",142,0)
 . . Q:(HMPTERM'="{56F82CAC-3564-46CE-A520-1025020DADE9}")&(HMPTERM'="{3BB314E8-9BBB-480E-B34E-B56EDE43BAC4}")
"RTN","HMPDMDC",143,0)
 . . S HMPCNT=$O(@HMPRET@(""),-1)+1,@HMPRET@(0)=HMPCNT
"RTN","HMPDMDC",144,0)
 . . S @HMPRET@(HMPCNT,"OBS_ID","I")=HMPXID
"RTN","HMPDMDC",145,0)
 . . S @HMPRET@(HMPCNT,"OBS_ID","E")=HMPXID
"RTN","HMPDMDC",146,0)
 . . S @HMPRET@(HMPCNT,"TERM_ID","I")=$$GET1^DIQ(704.117,HMPOBS_",",".07:99.99")
"RTN","HMPDMDC",147,0)
 . . S @HMPRET@(HMPCNT,"TERM_ID","E")=$$GET1^DIQ(704.117,HMPOBS_",",".07:.02")
"RTN","HMPDMDC",148,0)
 . . S @HMPRET@(HMPCNT,"SVALUE","I")=$$GET1^DIQ(704.117,HMPOBS_",",".1","I")
"RTN","HMPDMDC",149,0)
 . . S @HMPRET@(HMPCNT,"SVALUE","E")=$$GET1^DIQ(704.117,HMPOBS_",",".1","E")
"RTN","HMPDMDC",150,0)
 . . D QRYQUAL($NA(@HMPRET@(HMPCNT)),HMPOBS)
"RTN","HMPDMDC",151,0)
 Q
"RTN","HMPDMDC",152,0)
 ;
"RTN","HMPDMDC",153,0)
QRYTYPES(HMPRET) ; Return the terminology Term Types
"RTN","HMPDMDC",154,0)
 K @HMPRET
"RTN","HMPDMDC",155,0)
 N X
"RTN","HMPDMDC",156,0)
 F X=0:0 S X=$O(^MDC(704.102,X)) Q:'X  D  ;ICR 5748 DE2818 ASF 11/25/15
"RTN","HMPDMDC",157,0)
 . S @HMPRET@(X,"NAME")=$P(^MDC(704.102,X,0),U,1)
"RTN","HMPDMDC",158,0)
 . S @HMPRET@(X,"XML")=$P(^MDC(704.102,X,0),U,2)
"RTN","HMPDMDC",159,0)
 . S @HMPRET@("B",$P(^MDC(704.102,X,0),U,1),X)=""
"RTN","HMPDMDC",160,0)
 Q
"RTN","HMPDMDC",161,0)
 ;
"RTN","HMPDOR")
0^61^B13574723
"RTN","HMPDOR",1,0)
HMPDOR ;SLC/MKB,ASMR/RRB - Orders extract;8/2/11  15:29
"RTN","HMPDOR",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDOR",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDOR",4,0)
 ;
"RTN","HMPDOR",5,0)
 ; External References          DBIA#
"RTN","HMPDOR",6,0)
 ; -------------------          -----
"RTN","HMPDOR",7,0)
 ; ^ORA(102.4)                   5769
"RTN","HMPDOR",8,0)
 ; ^SC                          10040
"RTN","HMPDOR",9,0)
 ; ^VA(200)                     10060
"RTN","HMPDOR",10,0)
 ; DIQ                           2056
"RTN","HMPDOR",11,0)
 ; ORQ1,^TMP("ORR",$J)           3154
"RTN","HMPDOR",12,0)
 ; ORQ12,^TMP("ORGOTIT",$J)      5704
"RTN","HMPDOR",13,0)
 ; ORX8                          2467
"RTN","HMPDOR",14,0)
 Q
"RTN","HMPDOR",15,0)
 ; ------------ Get data from VistA ------------
"RTN","HMPDOR",16,0)
 ;
"RTN","HMPDOR",17,0)
EN(DFN,BEG,END,MAX,IFN) ; -- find a patient's orders
"RTN","HMPDOR",18,0)
 S DFN=+$G(DFN) Q:DFN<1  ;invalid patient
"RTN","HMPDOR",19,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDOR",20,0)
 N ORLIST,HMPN,HMPITM,HMPCNT
"RTN","HMPDOR",21,0)
 ;
"RTN","HMPDOR",22,0)
 ; get one order
"RTN","HMPDOR",23,0)
 I $G(IFN) D  G ENQ
"RTN","HMPDOR",24,0)
 . N ORLST S ORLST=0,ORLIST=$H
"RTN","HMPDOR",25,0)
 . D GET^ORQ12(IFN,ORLIST,1) S HMPN=1
"RTN","HMPDOR",26,0)
 . D EN1(HMPN,.HMPITM),XML(.HMPITM)
"RTN","HMPDOR",27,0)
 . K ^TMP("ORGOTIT",$J)
"RTN","HMPDOR",28,0)
 ;
"RTN","HMPDOR",29,0)
 ; get all orders
"RTN","HMPDOR",30,0)
 D EN^ORQ1(DFN_";DPT(",,6,,BEG,END,1) S HMPCNT=0
"RTN","HMPDOR",31,0)
 S HMPN=0 F  S HMPN=$O(^TMP("ORR",$J,ORLIST,HMPN)) Q:HMPN<1  D  Q:HMPCNT'<MAX
"RTN","HMPDOR",32,0)
 . K HMPITM D EN1(HMPN,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDOR",33,0)
 . D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDOR",34,0)
ENQ ; end
"RTN","HMPDOR",35,0)
 K ^TMP("ORR",$J),^TMP("HMPTEXT",$J)
"RTN","HMPDOR",36,0)
 Q
"RTN","HMPDOR",37,0)
 ;
"RTN","HMPDOR",38,0)
EN1(NUM,ORD) ; -- return an order in ORD("attribute")=value
"RTN","HMPDOR",39,0)
 ;  from EN: expects ^TMP("ORR",$J,ORLIST,HMPN)
"RTN","HMPDOR",40,0)
 N X0,IFN,LOC,X,DA
"RTN","HMPDOR",41,0)
 K ORD,^TMP("HMPTEXT",$J)
"RTN","HMPDOR",42,0)
 S X0=$G(^TMP("ORR",$J,ORLIST,NUM)),IFN=+X0
"RTN","HMPDOR",43,0)
 S ORD("id")=IFN,ORD("name")=$$OI^ORX8(+X0)
"RTN","HMPDOR",44,0)
 S ORD("group")=$P(X0,U,2),ORD("entered")=$P(X0,U,3)
"RTN","HMPDOR",45,0)
 S ORD("start")=$P(X0,U,4),ORD("stop")=$P(X0,U,5)
"RTN","HMPDOR",46,0)
 S ORD("status")=$P(X0,U,7)_U_$P(X0,U,6)_U_$$STS($P(X0,U,7))
"RTN","HMPDOR",47,0)
 M ^TMP("HMPTEXT",$J,IFN)=^TMP("ORR",$J,ORLIST,HMPN,"TX")
"RTN","HMPDOR",48,0)
 S ORD("content")=$NA(^TMP("HMPTEXT",$J,IFN))
"RTN","HMPDOR",49,0)
 S X=$$GET1^DIQ(100,IFN_",",1,"I"),ORD("provider")=X_U_$P($G(^VA(200,+X,0)),U) ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDOR",50,0)
 S X=$$GET1^DIQ(100,IFN_",",6),LOC="" I $L(X) D
"RTN","HMPDOR",51,0)
 . S LOC=+$O(^SC("B",X,0)),ORD("location")=LOC_U_X ;ICR 10040 DE2818 ASF 11/9/15
"RTN","HMPDOR",52,0)
 S ORD("facility")=$$FAC^HMPD(LOC)
"RTN","HMPDOR",53,0)
 S ORD("service")=$$GET1^DIQ(100,IFN_",","12:1")
"RTN","HMPDOR",54,0)
 ; acknowledgements
"RTN","HMPDOR",55,0)
 S DA=0 F  S DA=$O(^ORA(102.4,"B",+IFN,DA)) Q:DA<1  D  ;ICR 5769 DE2818 ASF 11/9/15
"RTN","HMPDOR",56,0)
 . S X0=$G(^ORA(102.4,DA,0)) Q:'$P(X0,U,3)  ;stub - not ack'd
"RTN","HMPDOR",57,0)
 . S X=+$P(X0,U,2),X=$S(X:X_U_$P($G(^VA(200,X,0)),U),1:U)
"RTN","HMPDOR",58,0)
 . S ORD("acknowledgement",DA)=X_U_$P(X0,U,3)
"RTN","HMPDOR",59,0)
 Q
"RTN","HMPDOR",60,0)
 ;
"RTN","HMPDOR",61,0)
STS(X) ; -- return VUID for status abbreviation X
"RTN","HMPDOR",62,0)
 N Y,I,STS
"RTN","HMPDOR",63,0)
 S STS="dc^comp^hold^flag^pend^actv^exp^schd^part^dlay^unr^dc/e^canc^laps^rnew^none"
"RTN","HMPDOR",64,0)
 F I=1:1:16 Q:$P(STS,U,I)=X
"RTN","HMPDOR",65,0)
 S Y=$$VUID^HMPD(I,100.01)
"RTN","HMPDOR",66,0)
 Q Y
"RTN","HMPDOR",67,0)
 ;
"RTN","HMPDOR",68,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDOR",69,0)
 ;
"RTN","HMPDOR",70,0)
XML(ORD) ; -- Return patient data as XML in @HMP@(n)
"RTN","HMPDOR",71,0)
 ; as <element code='123' displayName='ABC' />
"RTN","HMPDOR",72,0)
 N ATT,X,Y,I,NAMES
"RTN","HMPDOR",73,0)
 D ADD("<order>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDOR",74,0)
 S ATT="" F  S ATT=$O(ORD(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDOR",75,0)
 . S NAMES="code^name^"_$S(ATT?1"ack".E:"date",1:"vuid")_"^Z"
"RTN","HMPDOR",76,0)
 . I ATT?1"ack".E D  S Y="" Q
"RTN","HMPDOR",77,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDOR",78,0)
 .. S I=0 F  S I=$O(ORD(ATT,I)) Q:I<1  D
"RTN","HMPDOR",79,0)
 ... S X=$G(ORD(ATT,I))
"RTN","HMPDOR",80,0)
 ... S Y="<"_ATT_" "_$$LOOP_"/>" D ADD(Y)
"RTN","HMPDOR",81,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDOR",82,0)
 . S X=$G(ORD(ATT)),Y="" Q:'$L(X)
"RTN","HMPDOR",83,0)
 . I ATT="content" D  S Y="" Q  ;text
"RTN","HMPDOR",84,0)
 .. S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDOR",85,0)
 .. S I=0 F  S I=$O(@X@(I)) Q:I<1  S Y=$$ESC^HMPD(@X@(I)) D ADD(Y)
"RTN","HMPDOR",86,0)
 .. D ADD("</content>")
"RTN","HMPDOR",87,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDOR",88,0)
 . I $L(X)>1 S Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDOR",89,0)
 D ADD("</order>")
"RTN","HMPDOR",90,0)
 Q
"RTN","HMPDOR",91,0)
 ;
"RTN","HMPDOR",92,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDOR",93,0)
 N STR,P,TAG S STR=""
"RTN","HMPDOR",94,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDOR",95,0)
 Q STR
"RTN","HMPDOR",96,0)
 ;
"RTN","HMPDOR",97,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPDOR",98,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDOR",99,0)
 S @HMP@(HMPI)=X
"RTN","HMPDOR",100,0)
 Q
"RTN","HMPDPROC")
1^165
"RTN","HMPDPS")
1^200
"RTN","HMPDPSI")
1^201
"RTN","HMPDPSO")
1^202
"RTN","HMPDPSOR")
0^66^B2311665
"RTN","HMPDPSOR",1,0)
HMPDPSOR ;SLC/MKB,ASMR/RRB,SRG - Medication extract by order;8/2/11  15:29
"RTN","HMPDPSOR",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDPSOR",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDPSOR",4,0)
 ;
"RTN","HMPDPSOR",5,0)
 ; External References          DBIA#
"RTN","HMPDPSOR",6,0)
 ; -------------------          -----
"RTN","HMPDPSOR",7,0)
 ; ^OR(100                       5771
"RTN","HMPDPSOR",8,0)
 ; ^ORD(100.98                    873
"RTN","HMPDPSOR",9,0)
 ; ^SC                          10040
"RTN","HMPDPSOR",10,0)
 ; ^VA(200                      10060
"RTN","HMPDPSOR",11,0)
 ; DIQ                           2056
"RTN","HMPDPSOR",12,0)
 ; ORCD                          5493
"RTN","HMPDPSOR",13,0)
 ; ORQ1,^TMP("ORR",$J)           3154
"RTN","HMPDPSOR",14,0)
 ; ORX8                 871,2467,3071
"RTN","HMPDPSOR",15,0)
 ; PSOORRL,^TMP("PS",$J)         2400
"RTN","HMPDPSOR",16,0)
 ; PSS50P7                       4662
"RTN","HMPDPSOR",17,0)
 ; PSS51P2                       4548
"RTN","HMPDPSOR",18,0)
 Q
"RTN","HMPDPSOR",19,0)
 ; ------------ Get data from VistA ------------
"RTN","HMPDPSOR",20,0)
 ;
"RTN","HMPDPSOR",21,0)
STATUS(X) ; -- return HITSP status for 100.01 #X
"RTN","HMPDPSOR",22,0)
 S X=+$G(X) S:'X X=99  ;no status
"RTN","HMPDPSOR",23,0)
 I X=3 Q "hold"
"RTN","HMPDPSOR",24,0)
 I X=10!(X=11)!(X=5) Q "not active"
"RTN","HMPDPSOR",25,0)
 I X=1!(X=12)!(X=13) Q "not active"
"RTN","HMPDPSOR",26,0)
 I X=14!(X=99)       Q "not active"
"RTN","HMPDPSOR",27,0)
 I X=2!(X=7)!(X=15)  Q "historical"
"RTN","HMPDPSOR",28,0)
 Q "active"
"RTN","HMPDPSOR",29,0)
 ;
"RTN","HMPDPSOR",30,0)
RESP(ORIFN,RESP) ; -- return order responses [internal form]
"RTN","HMPDPSOR",31,0)
 N HMPDLG,I,J,W,ID,TYPE,X,Y
"RTN","HMPDPSOR",32,0)
 I '$D(ORDIALOG) S ORDIALOG=129 D GETDLG1^ORCD(129)
"RTN","HMPDPSOR",33,0)
 D GETORDER^ORCD(+$G(ORIFN),"HMPDLG")
"RTN","HMPDPSOR",34,0)
 S I=0 F  S I=$O(HMPDLG(I)) Q:I<1  D
"RTN","HMPDPSOR",35,0)
 . S ID=$P($G(ORDIALOG(I)),U,2) Q:'$L(ID)
"RTN","HMPDPSOR",36,0)
 . S TYPE=$P($G(ORDIALOG(I,0)),U)
"RTN","HMPDPSOR",37,0)
 . S J=0 F  S J=$O(HMPDLG(I,J)) Q:J<1  I $D(HMPDLG(I,J)) D
"RTN","HMPDPSOR",38,0)
 .. S X=HMPDLG(I,J) I TYPE'="W" S RESP(ID,J)=X Q
"RTN","HMPDPSOR",39,0)
 .. S Y=$G(@X@(1,0)),W=1 F  S W=$O(@X@(W)) Q:W<1  S Y=Y_$S($E(Y,$L(Y))'=" ":" ",1:"")_$G(@X@(W,0))
"RTN","HMPDPSOR",40,0)
 .. S:$L(Y) RESP(ID,J)=Y
"RTN","HMPDPSOR",41,0)
 Q
"RTN","HMPDPT")
1^166
"RTN","HMPDPXAM")
1^167
"RTN","HMPDPXED")
1^168
"RTN","HMPDPXHF")
1^169
"RTN","HMPDPXIM")
1^170
"RTN","HMPDPXSK")
1^171
"RTN","HMPDRA")
0^73^B42792632
"RTN","HMPDRA",1,0)
HMPDRA ;SLC/MKB,ASMR/RRB - Radiology extract;8/2/11  15:29
"RTN","HMPDRA",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDRA",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDRA",4,0)
 ;
"RTN","HMPDRA",5,0)
 ; External References          DBIA#
"RTN","HMPDRA",6,0)
 ; -------------------          -----
"RTN","HMPDRA",7,0)
 ; ^RADPT                        2480
"RTN","HMPDRA",8,0)
 ; ^RARPT                        8000005
"RTN","HMPDRA",9,0)
 ; ^SC(                         10040
"RTN","HMPDRA",10,0)
 ; ^VA(200                      10060
"RTN","HMPDRA",11,0)
 ; DIQ                           2056
"RTN","HMPDRA",12,0)
 ; ICPTCOD                       1995
"RTN","HMPDRA",13,0)
 ; RAO7PC1                  2043,2265
"RTN","HMPDRA",14,0)
 ; RAO7PC3                       2877
"RTN","HMPDRA",15,0)
 Q
"RTN","HMPDRA",16,0)
 ; ------------ Get exam(s) from VistA ------------
"RTN","HMPDRA",17,0)
 ;
"RTN","HMPDRA",18,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's radiology exams
"RTN","HMPDRA",19,0)
 N HMPITM,HMPXID
"RTN","HMPDRA",20,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDRA",21,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)_"P"
"RTN","HMPDRA",22,0)
 K ^TMP($J,"RAE1") D EN1^RAO7PC1(DFN,BEG,END,MAX)
"RTN","HMPDRA",23,0)
 ;
"RTN","HMPDRA",24,0)
 ; get exam(s)
"RTN","HMPDRA",25,0)
 I $G(ID) D EN1(ID,.HMPITM),XML(.HMPITM) G ENQ
"RTN","HMPDRA",26,0)
 ;
"RTN","HMPDRA",27,0)
 ; get all exams
"RTN","HMPDRA",28,0)
 S HMPXID="" F  S HMPXID=$O(^TMP($J,"RAE1",DFN,HMPXID)) Q:HMPXID=""  D
"RTN","HMPDRA",29,0)
 . K HMPITM D EN1(HMPXID,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDRA",30,0)
 . D XML(.HMPITM)
"RTN","HMPDRA",31,0)
ENQ ; end
"RTN","HMPDRA",32,0)
 K ^TMP($J,"RAE1"),^TMP("HMPTEXT",$J)
"RTN","HMPDRA",33,0)
 Q
"RTN","HMPDRA",34,0)
 ;
"RTN","HMPDRA",35,0)
EN1(ID,EXAM) ; -- return an exam in EXAM("attribute")=value
"RTN","HMPDRA",36,0)
 ;   Expects ^TMP($J,"RAE1",DFN,ID) from EN1^RAO7PC1
"RTN","HMPDRA",37,0)
 N X0,SET,PROC,DATE,LOC,X,Y,IENS
"RTN","HMPDRA",38,0)
 K EXAM,^TMP("HMPTEXT",$J)
"RTN","HMPDRA",39,0)
 S X0=$G(^TMP($J,"RAE1",DFN,ID)),SET=$G(^(ID,"CPRS")),PROC=$P(X0,U)
"RTN","HMPDRA",40,0)
 S EXAM("id")=ID,EXAM("name")=PROC,EXAM("case")=$P(X0,U,2)
"RTN","HMPDRA",41,0)
 S DATE=9999999.9999-+ID,EXAM("dateTime")=DATE
"RTN","HMPDRA",42,0)
 I $P(X0,U,5) D  ;report exists
"RTN","HMPDRA",43,0)
 . N NM S NM=$S(+SET=2:$P(SET,U,2),1:PROC)     ;2 = shared report
"RTN","HMPDRA",44,0)
 . S EXAM("document",1)=ID_U_NM_"^^"_$P(X0,U,3) ;id^localTitle^^status
"RTN","HMPDRA",45,0)
 . S:$G(HMPTEXT) EXAM("document",1,"content")=$$TEXT(DFN,ID)
"RTN","HMPDRA",46,0)
 S:$L($P(X0,U,6)) EXAM("status")=$P($P(X0,U,6),"~",2)
"RTN","HMPDRA",47,0)
 S X=$P(X0,U,7),LOC="" I $L(X) D
"RTN","HMPDRA",48,0)
 . S LOC=+$O(^SC("B",X,0)),EXAM("location")=LOC_U_X ;ICR 10040 DE2818 ASF 11/18/15
"RTN","HMPDRA",49,0)
 S EXAM("facility")=$$FAC^HMPD(LOC)
"RTN","HMPDRA",50,0)
 I $L($P(X0,U,8)) S X=$TR($P(X0,U,8),"~","^"),EXAM("imagingType")=X
"RTN","HMPDRA",51,0)
 S IENS=$P(ID,"-",2)_","_+ID_","_DFN_","
"RTN","HMPDRA",52,0)
 S X=$P(X0,U,10) I X D
"RTN","HMPDRA",53,0)
 . S EXAM("type")=$$CPT(X)
"RTN","HMPDRA",54,0)
 . I $D(^TMP($J,"RAE1",DFN,ID,"CMOD")) M EXAM("modifier")=^("CMOD")
"RTN","HMPDRA",55,0)
 I $P(X0,U,11) S EXAM("order")=+$P(X0,U,11)_U_$S($L(SET):$P(SET,U,2),1:PROC)
"RTN","HMPDRA",56,0)
 S EXAM("hasImages")=$S($P(X0,U,12)="Y":1,1:0)
"RTN","HMPDRA",57,0)
 I $P(X0,U,4)="Y"!($P(X0,U,9)="Y") S EXAM("interpretation")="ABNORMAL"
"RTN","HMPDRA",58,0)
 S EXAM("encounter")=$$GET1^DIQ(70.03,IENS,27,"I")
"RTN","HMPDRA",59,0)
 S ID=DFN_U_$TR(ID,"-","^") D EN3^RAO7PC1(ID) D  ;get additional values
"RTN","HMPDRA",60,0)
 . S X=+$G(^TMP($J,"RAE2",DFN,+$P(ID,U,3),PROC,"P"))
"RTN","HMPDRA",61,0)
 . I X S EXAM("provider")=X_U_$P($G(^VA(200,X,0)),U) ;ICR10060 DE2818 ASF 11/18/15
"RTN","HMPDRA",62,0)
 S EXAM("category")="RA"
"RTN","HMPDRA",63,0)
 Q
"RTN","HMPDRA",64,0)
 ;
"RTN","HMPDRA",65,0)
CPT(IEN) ; -- return code^description for CPT code, or "^" if error
"RTN","HMPDRA",66,0)
 N X0,HMPX,N,I,X,Y S IEN=+$G(IEN)
"RTN","HMPDRA",67,0)
 S X0=$$CPT^ICPTCOD(IEN) I X0<0 Q "^"
"RTN","HMPDRA",68,0)
 S Y=$P(X0,U,2,3)                  ;CPT Code^Short Name
"RTN","HMPDRA",69,0)
 S N=$$CPTD^ICPTCOD($P(Y,U),"HMPX") ;CPT Description
"RTN","HMPDRA",70,0)
 I N>0,$L($G(HMPX(1))) D
"RTN","HMPDRA",71,0)
 . S X=$G(HMPX(1)),I=1
"RTN","HMPDRA",72,0)
 . F  S I=$O(HMPX(I)) Q:I<1  Q:HMPX(I)=" "  S X=X_" "_HMPX(I)
"RTN","HMPDRA",73,0)
 . S $P(Y,U,2)=X
"RTN","HMPDRA",74,0)
 Q Y
"RTN","HMPDRA",75,0)
 ;
"RTN","HMPDRA",76,0)
TEXT(PAT,ID) ; -- Get report text, return temp array name
"RTN","HMPDRA",77,0)
 S PAT=+$G(PAT),ID=$G(ID) I PAT<1!(ID<1) Q ""
"RTN","HMPDRA",78,0)
 N DFN,EXAM,CASE,PROC,I,X,Y
"RTN","HMPDRA",79,0)
 S EXAM=PAT_U_$TR(ID,"-","^") D EN3^RAO7PC3(EXAM)
"RTN","HMPDRA",80,0)
 S Y=$NA(^TMP("HMPTEXT",$J,ID)) K @Y
"RTN","HMPDRA",81,0)
 S CASE=$O(^TMP($J,"RAE3",PAT,0)),PROC=$O(^(CASE,""))
"RTN","HMPDRA",82,0)
 S I=0 F  S I=$O(^TMP($J,"RAE3",PAT,CASE,PROC,I)) Q:I<1  S X=^(I),@Y@(I)=X
"RTN","HMPDRA",83,0)
 K ^TMP($J,"RAE3",PAT)
"RTN","HMPDRA",84,0)
 Q Y
"RTN","HMPDRA",85,0)
 ;
"RTN","HMPDRA",86,0)
 ; ------------ Get report(s) [via HMPDTIU] ------------
"RTN","HMPDRA",87,0)
 ;
"RTN","HMPDRA",88,0)
RPTS(DFN,BEG,END,MAX) ; -- find patient's radiology reports
"RTN","HMPDRA",89,0)
 N HMPITM,HMPXID,STS,PSET
"RTN","HMPDRA",90,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDRA",91,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)_"P"
"RTN","HMPDRA",92,0)
 K ^TMP($J,"RAE1") D EN1^RAO7PC1(DFN,BEG,END,MAX)
"RTN","HMPDRA",93,0)
 S HMPXID="" F  S HMPXID=$O(^TMP($J,"RAE1",DFN,HMPXID)) Q:HMPXID=""  D
"RTN","HMPDRA",94,0)
 . S STS=$P($G(^TMP($J,"RAE1",DFN,HMPXID)),U,3),PSET=$G(^(HMPXID,"CPRS"))
"RTN","HMPDRA",95,0)
 . Q:STS="No Report"!(STS="Deleted")  ;!(STS["Draft") ??
"RTN","HMPDRA",96,0)
 . I +PSET=2,$G(PSET(+HMPXID,$P(PSET,U,2))) Q  ;already have report
"RTN","HMPDRA",97,0)
 . K HMPITM D RPT1(DFN,HMPXID,.HMPITM) D:$D(HMPITM) XML^HMPDTIU(.HMPITM)
"RTN","HMPDRA",98,0)
 . I +PSET=2 S PSET(+HMPXID,$P(PSET,U,2))=$P(HMPXID,"-",2) ;parent
"RTN","HMPDRA",99,0)
 K ^TMP($J,"RAE1"),^TMP("HMPTEXT",$J)
"RTN","HMPDRA",100,0)
 Q
"RTN","HMPDRA",101,0)
 ;
"RTN","HMPDRA",102,0)
RPT1(DFN,ID,RPT) ; -- return report as a TIU document
"RTN","HMPDRA",103,0)
 S DFN=+$G(DFN),ID=$G(ID) Q:DFN<1  Q:ID<1
"RTN","HMPDRA",104,0)
 N EXAM,CASE,PROC,RAE3,RAE1,I,X,Y,IENS,LOC
"RTN","HMPDRA",105,0)
 K RPT,^TMP("HMPTEXT",$J)
"RTN","HMPDRA",106,0)
 S EXAM=DFN_U_$TR(ID,"-","^") D
"RTN","HMPDRA",107,0)
 . N DFN D EN3^RAO7PC3(EXAM) ;report
"RTN","HMPDRA",108,0)
 . D EN3^RAO7PC1(EXAM)       ;add'l values
"RTN","HMPDRA",109,0)
 S CASE=$O(^TMP($J,"RAE3",DFN,0)),PROC=$O(^(CASE,"")),RAE3=$G(^(PROC))
"RTN","HMPDRA",110,0)
 S RAE1=$G(^TMP($J,"RAE1",DFN,ID))
"RTN","HMPDRA",111,0)
 I $G(HMPTEXT) D
"RTN","HMPDRA",112,0)
 . S Y=$NA(^TMP("HMPTEXT",$J,ID))
"RTN","HMPDRA",113,0)
 . S I=0 F  S I=$O(^TMP($J,"RAE3",DFN,CASE,PROC,I)) Q:I<1  S X=^(I),@Y@(I)=X
"RTN","HMPDRA",114,0)
 . S RPT("content")=Y
"RTN","HMPDRA",115,0)
 S RPT("id")=ID,RPT("status")=$P(RAE3,U)
"RTN","HMPDRA",116,0)
 S X=9999999.9999-(+ID),RPT("referenceDateTime")=X
"RTN","HMPDRA",117,0)
 S X=+$G(^TMP($J,"RAE2",DFN,CASE,PROC,"P"))
"RTN","HMPDRA",118,0)
 I X S RPT("clinician",1)=X_U_$P($G(^VA(200,X,0)),U)_"^A" ;ICR10060 DE2818 ASF 11/18/15
"RTN","HMPDRA",119,0)
 S X=$G(^TMP($J,"RAE2",DFN,CASE,PROC,"V")) I X D
"RTN","HMPDRA",120,0)
 . N Y S Y=$$GET1^DIQ(74,+$P(RAE1,U,5)_",",7,"I")
"RTN","HMPDRA",121,0)
 . S RPT("clinician",2)=+X_U_$P($G(^VA(200,+X,0)),U)_"^S^"_Y_U_$P(X,U,2) ;ICR10060 DE2818 ASF 11/18/15
"RTN","HMPDRA",122,0)
 I $D(^TMP($J,"RAE3",DFN,"PRINT_SET")) S PROC=$G(^("ORD")) ;use parent, if printset
"RTN","HMPDRA",123,0)
 S RPT("localTitle")=PROC,RPT("category")="RA"
"RTN","HMPDRA",124,0)
 S RPT("nationalTitle")="4695068^RADIOLOGY REPORT"
"RTN","HMPDRA",125,0)
 S RPT("nationalTitleSubject")="4693357^RADIOLOGY"
"RTN","HMPDRA",126,0)
 S RPT("nationalTitleType")="4696123^REPORT"
"RTN","HMPDRA",127,0)
 S X=$P(RAE1,U,7),LOC="" I $L(X) D
"RTN","HMPDRA",128,0)
 . S LOC=+$O(^SC("B",X,0)) ;,EXAM("location")=LOC_U_X ICR 10040 DE2818 ASF 11/18/15
"RTN","HMPDRA",129,0)
 S RPT("facility")=$$FAC^HMPD(LOC)
"RTN","HMPDRA",130,0)
 S IENS=$P(ID,"-",2)_","_+ID_","_DFN_","
"RTN","HMPDRA",131,0)
 S RPT("encounter")=$$GET1^DIQ(70.03,IENS,27,"I")
"RTN","HMPDRA",132,0)
 S:$G(FILTER("loinc")) RPT("loinc")=$P(FILTER("loinc"),U)
"RTN","HMPDRA",133,0)
 K ^TMP($J,"RAE3",DFN),^TMP($J,"RAE2",DFN)
"RTN","HMPDRA",134,0)
 Q
"RTN","HMPDRA",135,0)
 ;
"RTN","HMPDRA",136,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDRA",137,0)
 ;
"RTN","HMPDRA",138,0)
XML(EXAM) ; -- Return exams as XML
"RTN","HMPDRA",139,0)
 N ATT,X,Y,NAMES,I,J
"RTN","HMPDRA",140,0)
 D ADD("<radiology>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDRA",141,0)
 S ATT="" F  S ATT=$O(EXAM(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDRA",142,0)
 . S NAMES=$S(ATT="document":"id^localTitle^nationalTitle^status^Z",1:"code^name^Z")
"RTN","HMPDRA",143,0)
 . I $O(EXAM(ATT,0)) D  S Y="" Q  ;multiples
"RTN","HMPDRA",144,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDRA",145,0)
 .. S I=0 F  S I=$O(EXAM(ATT,I)) Q:I<1  D
"RTN","HMPDRA",146,0)
 ... S X=$G(EXAM(ATT,I))
"RTN","HMPDRA",147,0)
 ... S Y="<"_ATT_" "_$$LOOP ;_"/>" D ADD(Y)
"RTN","HMPDRA",148,0)
 ... S X=$G(EXAM(ATT,I,"content")) I '$L(X) S Y=Y_"/>" D ADD(Y) Q
"RTN","HMPDRA",149,0)
 ... S Y=Y_">" D ADD(Y)
"RTN","HMPDRA",150,0)
 ... S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDRA",151,0)
 ... S J=0 F  S J=$O(@X@(J)) Q:J<1  S Y=$$ESC^HMPD(@X@(J)) D ADD(Y)
"RTN","HMPDRA",152,0)
 ... D ADD("</content>"),ADD("</"_ATT_">")
"RTN","HMPDRA",153,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDRA",154,0)
 . S X=$G(EXAM(ATT)),Y="" Q:'$L(X)
"RTN","HMPDRA",155,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDRA",156,0)
 . I $L(X)>1 S Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDRA",157,0)
 D ADD("</radiology>")
"RTN","HMPDRA",158,0)
 Q
"RTN","HMPDRA",159,0)
 ;
"RTN","HMPDRA",160,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDRA",161,0)
 N STR,P,TAG S STR=""
"RTN","HMPDRA",162,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDRA",163,0)
 Q STR
"RTN","HMPDRA",164,0)
 ;
"RTN","HMPDRA",165,0)
ADD(X) ; -- Add a line @HMP@(n)=X
"RTN","HMPDRA",166,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDRA",167,0)
 S @HMP@(HMPI)=X
"RTN","HMPDRA",168,0)
 Q
"RTN","HMPDSDAM")
0^74^B21275067
"RTN","HMPDSDAM",1,0)
HMPDSDAM ;SLC/MKB,ASMR/RRB - Appointment extract;8/2/11  15:29
"RTN","HMPDSDAM",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDSDAM",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDSDAM",4,0)
 ;
"RTN","HMPDSDAM",5,0)
 ; External References          DBIA#
"RTN","HMPDSDAM",6,0)
 ; -------------------          -----
"RTN","HMPDSDAM",7,0)
 ; ^DGS(41.1                     3796
"RTN","HMPDSDAM",8,0)
 ; ^DIC(42                      10039
"RTN","HMPDSDAM",9,0)
 ; ^SC                          10040
"RTN","HMPDSDAM",10,0)
 ; ^VA(200                      10060
"RTN","HMPDSDAM",11,0)
 ; DIQ                           2056
"RTN","HMPDSDAM",12,0)
 ; SDAMA301                      4433
"RTN","HMPDSDAM",13,0)
 Q
"RTN","HMPDSDAM",14,0)
 ; ------------ Get appointment(s) from VistA ------------
"RTN","HMPDSDAM",15,0)
 ;
"RTN","HMPDSDAM",16,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's [future] appointments
"RTN","HMPDSDAM",17,0)
 N HMPX,HMPNUM,HMPDT,HMPCNT,HMPITM,HMPA,X
"RTN","HMPDSDAM",18,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDSDAM",19,0)
 S BEG=$G(BEG,DT),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDSDAM",20,0)
 S HMPX(1)=BEG_";"_END,HMPX(4)=DFN,HMPX("FLDS")="1;2;3;10;13",HMPX("SORT")="P"
"RTN","HMPDSDAM",21,0)
 ;
"RTN","HMPDSDAM",22,0)
 ; get one appt
"RTN","HMPDSDAM",23,0)
 I $L($G(ID)) D  Q
"RTN","HMPDSDAM",24,0)
 . S (BEG,END)=$P(ID,";",2),HMPX(1)=BEG_";"_END,HMPX(2)=$P(ID,";",3)
"RTN","HMPDSDAM",25,0)
 . S HMPNUM=$$SDAPI^SDAMA301(.HMPX) Q:HMPNUM<1
"RTN","HMPDSDAM",26,0)
 . D EN1(BEG,.HMPITM),XML(.HMPITM)
"RTN","HMPDSDAM",27,0)
 . K ^TMP($J,"SDAMA301",DFN)
"RTN","HMPDSDAM",28,0)
 ;
"RTN","HMPDSDAM",29,0)
 ; get all [future] appointments
"RTN","HMPDSDAM",30,0)
 S HMPX(3)="R;I;NS;NSR;NT" ;no cancelled appt's
"RTN","HMPDSDAM",31,0)
 S HMPNUM=$$SDAPI^SDAMA301(.HMPX),(HMPDT,HMPCNT)=0
"RTN","HMPDSDAM",32,0)
 F  S HMPDT=$O(^TMP($J,"SDAMA301",DFN,HMPDT)) Q:HMPDT<1  D  Q:HMPCNT'<MAX
"RTN","HMPDSDAM",33,0)
 . S X=$P($G(^TMP($J,"SDAMA301",DFN,HMPDT)),U,3)
"RTN","HMPDSDAM",34,0)
 . I HMPDT<DT,$P(X,";")'["NS" Q   ;no prior kept appt's
"RTN","HMPDSDAM",35,0)
 . K HMPITM D EN1(HMPDT,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDSDAM",36,0)
 . D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDSDAM",37,0)
 K ^TMP($J,"SDAMA301",DFN)
"RTN","HMPDSDAM",38,0)
 ;
"RTN","HMPDSDAM",39,0)
 ; get scheduled admissions
"RTN","HMPDSDAM",40,0)
 S HMPA=0 F  S HMPA=$O(^DGS(41.1,"B",DFN,HMPA)) Q:HMPA<1  D  Q:HMPCNT'<MAX  ;ICR 3796 DE2818 ASF 11/20/15
"RTN","HMPDSDAM",41,0)
 . S HMPX=$G(^DGS(41.1,HMPA,0))
"RTN","HMPDSDAM",42,0)
 . Q:$P(HMPX,U,13)  Q:$P(HMPX,U,17)  ;cancelled or admitted
"RTN","HMPDSDAM",43,0)
 . S X=$P(HMPX,U,2) Q:X<BEG!(X>END)  ;out of date range
"RTN","HMPDSDAM",44,0)
 . K HMPITM D DGS(HMPA,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDSDAM",45,0)
 . D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDSDAM",46,0)
 Q
"RTN","HMPDSDAM",47,0)
 ;
"RTN","HMPDSDAM",48,0)
EN1(DATE,APPT) ; -- return an appointment in APPT("attribute")=value
"RTN","HMPDSDAM",49,0)
 ;  Expects ^TMP($J,"SDAMA301",DFN,DATE)
"RTN","HMPDSDAM",50,0)
 N X,HLOC,STS,CLS,SV,PRV K APPT
"RTN","HMPDSDAM",51,0)
 S X=$G(^TMP($J,"SDAMA301",DFN,DATE))
"RTN","HMPDSDAM",52,0)
 S DATE=+$G(DATE),HLOC=$P(X,U,2),APPT("type")=$TR($P(X,U,10),";","^")
"RTN","HMPDSDAM",53,0)
 S STS=$P(X,U,3),CLS=$S($E(STS)="I":"I",1:"O")
"RTN","HMPDSDAM",54,0)
 S APPT("id")="A;"_DATE_";"_+HLOC,APPT("dateTime")=DATE I HLOC D
"RTN","HMPDSDAM",55,0)
 . S APPT("location")=$P(HLOC,";",2)
"RTN","HMPDSDAM",56,0)
 . S APPT("clinicStop")=$$AMIS^HMPDVSIT(+$P(X,U,13))
"RTN","HMPDSDAM",57,0)
 . S SV=$$GET1^DIQ(44,+HLOC_",",9.5,"I")
"RTN","HMPDSDAM",58,0)
 . I SV S APPT("service")=$$SERV(SV)
"RTN","HMPDSDAM",59,0)
 . ;find default provider
"RTN","HMPDSDAM",60,0)
 . S PRV=+$$GET1^DIQ(44,+HLOC_",",16,"I") I 'PRV D
"RTN","HMPDSDAM",61,0)
 .. N HMPP,I,FIRST
"RTN","HMPDSDAM",62,0)
 .. D GETS^DIQ(44,+HLOC_",","2600*","I","HMPP")
"RTN","HMPDSDAM",63,0)
 .. S FIRST=$O(HMPP(44.1,"")),I=""
"RTN","HMPDSDAM",64,0)
 .. F  S I=$O(HMPP(44.1,I)) Q:I=""  I $G(HMPP(44.1,I,.02,"I")) S PRV=$G(HMPP(44.1,I,.01,"I")) Q
"RTN","HMPDSDAM",65,0)
 .. I 'PRV,FIRST S PRV=$G(HMPP(44.1,FIRST,.01,"I"))
"RTN","HMPDSDAM",66,0)
 . I PRV S APPT("provider")=PRV_U_$P($G(^VA(200,PRV,0)),U) Q  ;ICR 10060 DEE2818 ASF 11/20/15
"RTN","HMPDSDAM",67,0)
 S APPT("facility")=$$FAC^HMPD(+HLOC)
"RTN","HMPDSDAM",68,0)
 S APPT("patientClass")=$S(CLS="I":"IMP",1:"AMB")
"RTN","HMPDSDAM",69,0)
 S APPT("serviceCategory")=$S(CLS="I":"I^INPATIENT VISIT",1:"A^AMBULATORY")
"RTN","HMPDSDAM",70,0)
 S APPT("apptStatus")=$P(STS,";",2)
"RTN","HMPDSDAM",71,0)
 S APPT("visitString")=+HLOC_";"_DATE_";A"
"RTN","HMPDSDAM",72,0)
 Q
"RTN","HMPDSDAM",73,0)
 ;
"RTN","HMPDSDAM",74,0)
SERV(FTS) ; -- Return #42.4 Service for a Facility Treating Specialty
"RTN","HMPDSDAM",75,0)
 N Y S Y="",FTS=+$G(FTS)
"RTN","HMPDSDAM",76,0)
 S Y=$$GET1^DIQ(45.7,FTS_",","1:3","E")
"RTN","HMPDSDAM",77,0)
 Q Y
"RTN","HMPDSDAM",78,0)
 ;
"RTN","HMPDSDAM",79,0)
DGS(IFN,ADM) ; -- return a scheduled admission in ADM("attribute")=value
"RTN","HMPDSDAM",80,0)
 N X0,DATE,HLOC,SV,X K ADM
"RTN","HMPDSDAM",81,0)
 S X0=$G(^DGS(41.1,+$G(IFN),0)) Q:X0=""  ;deleted ICR 3796 DE2818 ASF 11/20/15
"RTN","HMPDSDAM",82,0)
 S DATE=+$P(X0,U,2),HLOC=+$G(^DIC(42,+$P(X0,U,8),44)) ;ICR 10039 DE2818 ASF 11/20/15
"RTN","HMPDSDAM",83,0)
 S ADM("id")="H;"_DATE,ADM("dateTime")=DATE I HLOC D
"RTN","HMPDSDAM",84,0)
 . S ADM("id")=ADM("id")_";"_HLOC,ADM("visitString")=HLOC_";"_DATE_";H"
"RTN","HMPDSDAM",85,0)
 . S ADM("location")=HLOC_U_$P($G(^SC(HLOC,0)),U) ;ICR 10040 DE2818 ASF 11/20/15
"RTN","HMPDSDAM",86,0)
 . S X=$$GET1^DIQ(44,HLOC_",",8,"I"),ADM("clinicStop")=$$AMIS^HMPDVSIT(X)
"RTN","HMPDSDAM",87,0)
 . S SV=$$GET1^DIQ(44,HLOC_",",9.5,"I")
"RTN","HMPDSDAM",88,0)
 . I SV S ADM("service")=$$SERV(SV)
"RTN","HMPDSDAM",89,0)
 S ADM("facility")=$$FAC^HMPD(HLOC)
"RTN","HMPDSDAM",90,0)
 S X=$P(X0,U,5) I X S ADM("provider")=X_U_$P($G(^VA(200,X,0)),U) ;ICR 10060 DEE2818 ASF 11/20/15
"RTN","HMPDSDAM",91,0)
 S ADM("patientClass")="IMP",ADM("serviceCategory")="H^HOSPITALIZATION"
"RTN","HMPDSDAM",92,0)
 S ADM("apptStatus")=$S($P(X0,U,17):"ADMITTED",$P(X0,U,13):"CANCELLED",1:"SCHEDULED")
"RTN","HMPDSDAM",93,0)
 Q
"RTN","HMPDSDAM",94,0)
 ;
"RTN","HMPDSDAM",95,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDSDAM",96,0)
 ;
"RTN","HMPDSDAM",97,0)
XML(APPT) ; -- Return appointment as XML
"RTN","HMPDSDAM",98,0)
 N ATT,X,Y,NAMES
"RTN","HMPDSDAM",99,0)
 D ADD("<appointment>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDSDAM",100,0)
 S ATT="" F  S ATT=$O(APPT(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDSDAM",101,0)
 . S X=$G(APPT(ATT)),Y="" Q:'$L(X)
"RTN","HMPDSDAM",102,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDSDAM",103,0)
 . I $L(X)>1 S NAMES="code^name^Z",Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDSDAM",104,0)
 D ADD("</appointment>")
"RTN","HMPDSDAM",105,0)
 Q
"RTN","HMPDSDAM",106,0)
 ;
"RTN","HMPDSDAM",107,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDSDAM",108,0)
 N STR,P,TAG S STR=""
"RTN","HMPDSDAM",109,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDSDAM",110,0)
 Q STR
"RTN","HMPDSDAM",111,0)
 ;
"RTN","HMPDSDAM",112,0)
ADD(X) ; -- Add a line @HMP@(n)=X
"RTN","HMPDSDAM",113,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDSDAM",114,0)
 S @HMP@(HMPI)=X
"RTN","HMPDSDAM",115,0)
 Q
"RTN","HMPDSR")
0^75^B30022036
"RTN","HMPDSR",1,0)
HMPDSR ;SLC/MKB,ASMR/RRB - Surgical Procedures;8/2/11  15:29
"RTN","HMPDSR",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDSR",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDSR",4,0)
 ;
"RTN","HMPDSR",5,0)
 ; External References          DBIA#
"RTN","HMPDSR",6,0)
 ; -------------------          -----
"RTN","HMPDSR",7,0)
 ; ^SRF(130                      5675
"RTN","HMPDSR",8,0)
 ; ^SRO(136                      4872
"RTN","HMPDSR",9,0)
 ; DIQ                           2056
"RTN","HMPDSR",10,0)
 ; ICPTCOD                       1995
"RTN","HMPDSR",11,0)
 ; ICPTMOD                       1996
"RTN","HMPDSR",12,0)
 ; SROESTV                       3533
"RTN","HMPDSR",13,0)
 Q
"RTN","HMPDSR",14,0)
 ; ------------ Get surgery(ies) from VistA ------------
"RTN","HMPDSR",15,0)
 ;
"RTN","HMPDSR",16,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's surgeries
"RTN","HMPDSR",17,0)
 N HMPN,HMPCNT,HMPITM,HMPY
"RTN","HMPDSR",18,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDSR",19,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDSR",20,0)
 ;
"RTN","HMPDSR",21,0)
 ; get one surgery
"RTN","HMPDSR",22,0)
 I $G(ID) D EN1(ID,.HMPITM),XML(.HMPITM) G ENQ
"RTN","HMPDSR",23,0)
 ;
"RTN","HMPDSR",24,0)
 ; get all surgeries
"RTN","HMPDSR",25,0)
 Q:'$L($T(LIST^SROESTV))
"RTN","HMPDSR",26,0)
 N SHOWADD S SHOWADD=1 ;to omit leading '+' with note titles
"RTN","HMPDSR",27,0)
 D LIST^SROESTV(.HMPY,DFN,BEG,END,MAX,1)
"RTN","HMPDSR",28,0)
 S HMPN=0 F  S HMPN=$O(@HMPY@(HMPN)) Q:HMPN<1  D
"RTN","HMPDSR",29,0)
 . K HMPITM D ONE(HMPN,.HMPITM)
"RTN","HMPDSR",30,0)
 . I $D(HMPITM) D XML(.HMPITM)
"RTN","HMPDSR",31,0)
 K @HMPY
"RTN","HMPDSR",32,0)
ENQ ; end
"RTN","HMPDSR",33,0)
 K ^TMP("HMPTEXT",$J)
"RTN","HMPDSR",34,0)
 Q
"RTN","HMPDSR",35,0)
 ;
"RTN","HMPDSR",36,0)
ONE(NUM,SURG) ; -- return a surgery in SURG("attribute")=value
"RTN","HMPDSR",37,0)
 ;  Expects DFN, @HMPY@(NUM) from LIST^SROESTV
"RTN","HMPDSR",38,0)
 N IEN,HMPX,X,Y,I,HMPMOD,HMPOTH
"RTN","HMPDSR",39,0)
 K SURG,^TMP("HMPTEXT",$J)
"RTN","HMPDSR",40,0)
 S HMPX=$G(@HMPY@(NUM)),IEN=+$P(HMPX,U) Q:IEN<1
"RTN","HMPDSR",41,0)
 S SURG("id")=IEN,X=$P(HMPX,U,2),SURG("status")="COMPLETED"
"RTN","HMPDSR",42,0)
 I X?1"* Aborted * ".E S X=$E(X,13,999),SURG("status")="ABORTED"
"RTN","HMPDSR",43,0)
 S SURG("name")=X,SURG("dateTime")=$P(HMPX,U,3)
"RTN","HMPDSR",44,0)
 S X=$P(HMPX,U,4) S:X SURG("provider")=$TR(X,";","^")
"RTN","HMPDSR",45,0)
 S X=$$GET1^DIQ(130,IEN_",",50,"I"),SURG("facility")=$$FAC^HMPD(X)
"RTN","HMPDSR",46,0)
 S SURG("encounter")=$$GET1^DIQ(130,IEN_",",.015,"I")
"RTN","HMPDSR",47,0)
 S X=$$GET1^DIQ(136,IEN_",",.02,"I") I X D
"RTN","HMPDSR",48,0)
 . S SURG("type")=$$CPT(X)
"RTN","HMPDSR",49,0)
 . D GETS^DIQ(136,IEN_",","1*","I","HMPMOD") ;CPT modifiers
"RTN","HMPDSR",50,0)
 . S I="" F  S I=$O(HMPMOD(136.01,I)) Q:I=""  D
"RTN","HMPDSR",51,0)
 .. S X=+$G(HMPMOD(136.01,I,.01,"I")),Y=$$MOD^ICPTMOD(X,"I")
"RTN","HMPDSR",52,0)
 .. S SURG("modifier",+I)=$P(Y,U,2,3)
"RTN","HMPDSR",53,0)
 D GETS^DIQ(136,IEN_",","3*","I","HMPOTH") ;other procedures
"RTN","HMPDSR",54,0)
 S I="" F  S I=$O(HMPOTH(136.03,I)) Q:I=""  D
"RTN","HMPDSR",55,0)
 . S X=+$G(HMPOTH(136.03,I,.01,"I")) Q:'X
"RTN","HMPDSR",56,0)
 . S SURG("otherProcedure",+I)=$$CPT(X)
"RTN","HMPDSR",57,0)
 S I=0 F  S I=$O(@HMPY@(NUM,I)) Q:I<1  S X=$G(@HMPY@(NUM,I)) I X D
"RTN","HMPDSR",58,0)
 . N LT,NT S LT=$P(X,U,2) Q:$P(LT," ")="Addendum"
"RTN","HMPDSR",59,0)
 . S NT=$$GET1^DIQ(8925,+X_",",".01:1501")
"RTN","HMPDSR",60,0)
 . S SURG("document",I)=+X_U_LT_U_NT
"RTN","HMPDSR",61,0)
 . S:$G(HMPTEXT) SURG("document",I,"content")=$$TEXT^HMPDTIU(+X)
"RTN","HMPDSR",62,0)
 . I LT["OPERATION REPORT"!(LT["PROCEDURE REPORT") S SURG("opReport")=+X_U_LT_U_NT
"RTN","HMPDSR",63,0)
 S SURG("category")="SR"
"RTN","HMPDSR",64,0)
 Q
"RTN","HMPDSR",65,0)
 ;
"RTN","HMPDSR",66,0)
EN1(IEN,SURG) ; -- return a surgery in SURG("attribute")=value
"RTN","HMPDSR",67,0)
 N HMPX,HMPY,X,Y,I,HMPMOD,HMPOTH,SHOWADD
"RTN","HMPDSR",68,0)
 K SURG,^TMP("HMPTEXT",$J)
"RTN","HMPDSR",69,0)
 S SHOWADD=1 ;to omit leading '+' with note titles
"RTN","HMPDSR",70,0)
 D ONE^SROESTV("HMPY",IEN) S HMPX=$G(HMPY(IEN)) Q:HMPX=""
"RTN","HMPDSR",71,0)
 S SURG("id")=IEN,X=$P(HMPX,U,2),SURG("status")="COMPLETED"
"RTN","HMPDSR",72,0)
 I X?1"* Aborted * ".E S X=$E(X,13,999),SURG("status")="ABORTED"
"RTN","HMPDSR",73,0)
 S SURG("name")=X,SURG("dateTime")=$P(HMPX,U,3)
"RTN","HMPDSR",74,0)
 S X=$P(HMPX,U,4) S:X SURG("provider")=$TR(X,";","^")
"RTN","HMPDSR",75,0)
 S X=$$GET1^DIQ(130,IEN_",",50,"I"),SURG("facility")=$$FAC^HMPD(X)
"RTN","HMPDSR",76,0)
 S SURG("encounter")=$$GET1^DIQ(130,IEN_",",.015,"I")
"RTN","HMPDSR",77,0)
 S X=$$GET1^DIQ(136,IEN_",",.02,"I") I X D
"RTN","HMPDSR",78,0)
 . S SURG("type")=$$CPT(X)
"RTN","HMPDSR",79,0)
 . D GETS^DIQ(136,IEN_",","1*","I","HMPMOD") ;CPT modifiers
"RTN","HMPDSR",80,0)
 . S I="" F  S I=$O(HMPMOD(136.01,I)) Q:I=""  D
"RTN","HMPDSR",81,0)
 .. S X=+$G(HMPMOD(136.01,I,.01,"I")),Y=$$MOD^ICPTMOD(X,"I")
"RTN","HMPDSR",82,0)
 .. S SURG("modifier",+I)=$P(Y,U,2,3)
"RTN","HMPDSR",83,0)
 D GETS^DIQ(136,IEN_",","3*","I","HMPOTH") ;other procedures
"RTN","HMPDSR",84,0)
 S I="" F  S I=$O(HMPOTH(136.03,I)) Q:I=""  D
"RTN","HMPDSR",85,0)
 . S X=+$G(HMPOTH(136.03,I,.01,"I")) Q:'X
"RTN","HMPDSR",86,0)
 . S SURG("otherProcedure",+I)=$$CPT(X)
"RTN","HMPDSR",87,0)
 S I=0 F  S I=$O(HMPY(IEN,I)) Q:I<1  S X=$G(HMPY(IEN,I)) I X D
"RTN","HMPDSR",88,0)
 . N LT,NT S LT=$P(X,U,2) Q:$P(LT," ")="Addendum"
"RTN","HMPDSR",89,0)
 . S NT=$$GET1^DIQ(8925,+X_",",".01:1501")
"RTN","HMPDSR",90,0)
 . S SURG("document",I)=+X_U_LT_U_NT
"RTN","HMPDSR",91,0)
 . S:$G(HMPTEXT) SURG("document",I,"content")=$$TEXT^HMPDTIU(+X)
"RTN","HMPDSR",92,0)
 . I LT["OPERATION REPORT"!(LT["PROCEDURE REPORT") S SURG("opReport")=+X_U_LT_U_NT
"RTN","HMPDSR",93,0)
 S SURG("category")="SR"
"RTN","HMPDSR",94,0)
 Q
"RTN","HMPDSR",95,0)
 ;
"RTN","HMPDSR",96,0)
CPT(IEN) ; -- return code^description for CPT code, or "^" if error
"RTN","HMPDSR",97,0)
 N X0,HMPX,N,I,X,Y S IEN=+$G(IEN)
"RTN","HMPDSR",98,0)
 S X0=$$CPT^ICPTCOD(IEN) I X0<0 Q "^"
"RTN","HMPDSR",99,0)
 S Y=$P(X0,U,2,3)                  ;CPT Code^Short Name
"RTN","HMPDSR",100,0)
 S N=$$CPTD^ICPTCOD($P(Y,U),"HMPX") ;CPT Description
"RTN","HMPDSR",101,0)
 I N>0,$L($G(HMPX(1))) D
"RTN","HMPDSR",102,0)
 . S X=$G(HMPX(1)),I=1
"RTN","HMPDSR",103,0)
 . F  S I=$O(HMPX(I)) Q:I<1  Q:HMPX(I)=" "  S X=X_" "_HMPX(I)
"RTN","HMPDSR",104,0)
 . S $P(Y,U,2)=X
"RTN","HMPDSR",105,0)
 Q Y
"RTN","HMPDSR",106,0)
 ;
"RTN","HMPDSR",107,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDSR",108,0)
 ;
"RTN","HMPDSR",109,0)
XML(SURG) ; -- Return surgery as XML
"RTN","HMPDSR",110,0)
 N ATT,X,Y,NAMES,I,J
"RTN","HMPDSR",111,0)
 D ADD("<surgery>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDSR",112,0)
 S ATT="" F  S ATT=$O(SURG(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDSR",113,0)
 . I $O(SURG(ATT,0)) D  S Y="" Q  ;multiples
"RTN","HMPDSR",114,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDSR",115,0)
 .. S I=0 F  S I=$O(SURG(ATT,I)) Q:I<1  D
"RTN","HMPDSR",116,0)
 ... S X=$G(SURG(ATT,I)),NAMES=""
"RTN","HMPDSR",117,0)
 ... S NAMES=$S(ATT="document":"id^localTitle^nationalTitle^Z",1:"code^name^Z")
"RTN","HMPDSR",118,0)
 ... S Y="<"_ATT_" "_$$LOOP ;_"/>" D ADD(Y)
"RTN","HMPDSR",119,0)
 ... S X=$G(SURG(ATT,I,"content")) I '$L(X) S Y=Y_"/>" D ADD(Y) Q
"RTN","HMPDSR",120,0)
 ... S Y=Y_">" D ADD(Y)
"RTN","HMPDSR",121,0)
 ... S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDSR",122,0)
 ... S J=0 F  S J=$O(@X@(J)) Q:J<1  S Y=$$ESC^HMPD(@X@(J)) D ADD(Y)
"RTN","HMPDSR",123,0)
 ... D ADD("</content>"),ADD("</"_ATT_">")
"RTN","HMPDSR",124,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDSR",125,0)
 . S X=$G(SURG(ATT)),Y="" Q:'$L(X)
"RTN","HMPDSR",126,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDSR",127,0)
 . S NAMES=$S(ATT="opReport":"id^localTitle^nationalTitle^Z",1:"code^name^Z")
"RTN","HMPDSR",128,0)
 . I $L(X)>1 S Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDSR",129,0)
 D ADD("</surgery>")
"RTN","HMPDSR",130,0)
 Q
"RTN","HMPDSR",131,0)
 ;
"RTN","HMPDSR",132,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDSR",133,0)
 N STR,P,TAG S STR=""
"RTN","HMPDSR",134,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDSR",135,0)
 Q STR
"RTN","HMPDSR",136,0)
 ;
"RTN","HMPDSR",137,0)
ADD(X) ; -- Add a line @HMP@(n)=X
"RTN","HMPDSR",138,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDSR",139,0)
 S @HMP@(HMPI)=X
"RTN","HMPDSR",140,0)
 Q
"RTN","HMPDTIU")
0^76^B83859727
"RTN","HMPDTIU",1,0)
HMPDTIU ;SLC/MKB,ASMR/RRB - TIU extract;Nov 23, 2015 18:02:20
"RTN","HMPDTIU",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDTIU",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDTIU",4,0)
 ;
"RTN","HMPDTIU",5,0)
 ; External References          DBIA#
"RTN","HMPDTIU",6,0)
 ; -------------------          -----
"RTN","HMPDTIU",7,0)
 ; ^SC(                         10040
"RTN","HMPDTIU",8,0)
 ; ^TIU(8925.1              2321,5677
"RTN","HMPDTIU",9,0)
 ; ^TIU(8926.1                   5678
"RTN","HMPDTIU",10,0)
 ; ^VA(200                      10060
"RTN","HMPDTIU",11,0)
 ; DIQ                           2056
"RTN","HMPDTIU",12,0)
 ; RAO7PC1                       2043
"RTN","HMPDTIU",13,0)
 ; TIUCNSLT                      5546
"RTN","HMPDTIU",14,0)
 ; TIUCP                         3568
"RTN","HMPDTIU",15,0)
 ; TIULQ                         2693
"RTN","HMPDTIU",16,0)
 ; TIULX                         3058
"RTN","HMPDTIU",17,0)
 ; TIUSROI                       5676
"RTN","HMPDTIU",18,0)
 ; TIUSRVLO                 2834,2865
"RTN","HMPDTIU",19,0)
 ; TIUSRVR1                      2944
"RTN","HMPDTIU",20,0)
 ; XLFSTR                       10104
"RTN","HMPDTIU",21,0)
 Q
"RTN","HMPDTIU",22,0)
 ; ------------ Get documents from VistA ------------
"RTN","HMPDTIU",23,0)
 ;
"RTN","HMPDTIU",24,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's documents
"RTN","HMPDTIU",25,0)
 N HMPITM,HMPN,HMPX,HMPY,HMPCNT
"RTN","HMPDTIU",26,0)
 S DFN=+$G(DFN) Q:$G(DFN)<1
"RTN","HMPDTIU",27,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDTIU",28,0)
 ;
"RTN","HMPDTIU",29,0)
 ; get one document
"RTN","HMPDTIU",30,0)
 I $L($G(ID)),ID[";" D  G ENQ
"RTN","HMPDTIU",31,0)
 . I ID D RPT1^HMPDMC(DFN,ID,.HMPITM),XML(.HMPITM) Q  ;CP
"RTN","HMPDTIU",32,0)
 . D RPT1^HMPDLRA(DFN,ID,.HMPITM),XML(.HMPITM) Q      ;Lab
"RTN","HMPDTIU",33,0)
 I $G(ID),ID["-" D  G ENQ                             ;Radiology
"RTN","HMPDTIU",34,0)
 . S (BEG,END)=9999999.9999-+ID D EN1^RAO7PC1(DFN,BEG,END,"99P")
"RTN","HMPDTIU",35,0)
 . D RPT1^HMPDRA(DFN,ID,.HMPITM),XML(.HMPITM)
"RTN","HMPDTIU",36,0)
 . K ^TMP($J,"RAE1")
"RTN","HMPDTIU",37,0)
 I $G(ID) D EN1(ID,.HMPITM),XML(.HMPITM):$D(HMPITM) G ENQ
"RTN","HMPDTIU",38,0)
 ;
"RTN","HMPDTIU",39,0)
 ; get all documents
"RTN","HMPDTIU",40,0)
 N CLASS,SUBCLASS,TITLE,SERVICE,SUBJECT,NOTSUBJ,STATUS,HMPC,CLS,HMPS,CTXT
"RTN","HMPDTIU",41,0)
 D SETUP S HMPCNT=0 ;define search criteria
"RTN","HMPDTIU",42,0)
 I CLASS="CP" D RPTS^HMPDMC(DFN,BEG,END,MAX) Q
"RTN","HMPDTIU",43,0)
 I CLASS="RA" D RPTS^HMPDRA(DFN,BEG,END,MAX) Q
"RTN","HMPDTIU",44,0)
 I CLASS="LR" D RPTS^HMPDLRA(DFN,BEG,END,MAX) Q
"RTN","HMPDTIU",45,0)
 F HMPC=1:1:$L(CLASS,U) S CLS=$P(CLASS,U,HMPC) D  Q:HMPCNT'<MAX
"RTN","HMPDTIU",46,0)
 . F HMPS=1:1:$L(STATUS,U) S CTXT=$P(STATUS,U,HMPS) D  Q:HMPCNT'<MAX
"RTN","HMPDTIU",47,0)
 .. D CONTEXT^TIUSRVLO(.HMPY,CLS,CTXT,DFN,BEG,END,,MAX,,1)
"RTN","HMPDTIU",48,0)
 .. S HMPN=0 F  S HMPN=$O(@HMPY@(HMPN)) Q:HMPN<1  D  Q:HMPCNT'<MAX
"RTN","HMPDTIU",49,0)
 ... S HMPX=$G(@HMPY@(HMPN)) Q:'$$MATCH(HMPX,$G(SUBCLASS),$G(SERVICE),$G(SUBJECT),$G(NOTSUBJ))
"RTN","HMPDTIU",50,0)
 ... Q:$D(^TMP("HMPD",$J,+HMPX))  ;already included
"RTN","HMPDTIU",51,0)
 ... K HMPITM D EN1(HMPX,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDTIU",52,0)
 ... D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDTIU",53,0)
 .. K @HMPY
"RTN","HMPDTIU",54,0)
ENQ ; end
"RTN","HMPDTIU",55,0)
 K ^TMP("HMPTEXT",$J)
"RTN","HMPDTIU",56,0)
 Q
"RTN","HMPDTIU",57,0)
 ;
"RTN","HMPDTIU",58,0)
EN1(HMPX,DOC) ; -- return a document in DOC("attribute")=value
"RTN","HMPDTIU",59,0)
 ;  Expects DFN, HMPX=IEN^$$RESOLVE^TIUSRVLO(IEN)
"RTN","HMPDTIU",60,0)
 N IEN,X,NAME,HMPTIU,ES,I,HMPY
"RTN","HMPDTIU",61,0)
 K DOC,^TMP("HMPTEXT",$J)
"RTN","HMPDTIU",62,0)
 S IEN=+$G(HMPX) Q:IEN<1  ;invalid ien
"RTN","HMPDTIU",63,0)
 I +HMPX=HMPX D  ;get data string, if needed
"RTN","HMPDTIU",64,0)
 . N SHOWADD,DA S SHOWADD=1,DA=+HMPX
"RTN","HMPDTIU",65,0)
 . S HMPX=DA_U_$$RESOLVE^TIUSRVLO(DA)
"RTN","HMPDTIU",66,0)
 Q:"UNKNOWN"[$P($G(HMPX),U,2)  ;null or invalid
"RTN","HMPDTIU",67,0)
 S NAME=$P(HMPX,U,2) ;I $P(HMPX,U,14),$P(NAME," ")="Addendum" Q
"RTN","HMPDTIU",68,0)
 S DOC("id")=IEN,DOC("localTitle")=NAME
"RTN","HMPDTIU",69,0)
 D EXTRACT^TIULQ(IEN,"HMPTIU",,".01:.04;1501:1508")
"RTN","HMPDTIU",70,0)
 S X=$$GET1^DIQ(8925,IEN_",",".01:1501","I") I X D
"RTN","HMPDTIU",71,0)
 . N IENS,TIU,Y,FNUM
"RTN","HMPDTIU",72,0)
 . S IENS=X_"," D GETS^DIQ(8926.1,IENS,"*","IE","TIU")
"RTN","HMPDTIU",73,0)
 . S DOC("nationalTitle")=$G(TIU(8926.1,IENS,99.99,"E"))_U_$G(TIU(8926.1,IENS,.01,"E"))
"RTN","HMPDTIU",74,0)
 . F I=".04^Subject^2",".05^Role^3",".06^Setting^4",".07^Service^5",".08^Type^6" D
"RTN","HMPDTIU",75,0)
 .. S Y=+$G(TIU(8926.1,IENS,+I,"I")) Q:Y'>0
"RTN","HMPDTIU",76,0)
 .. S FNUM="8926."_+$P(I,U,3)
"RTN","HMPDTIU",77,0)
 .. S DOC("nationalTitle"_$P(I,U,2))=$$VUID^HMPD(Y,FNUM)_U_$G(TIU(8926.1,IENS,+I,"E"))
"RTN","HMPDTIU",78,0)
 S:$G(FILTER("loinc")) DOC("loinc")=$P(FILTER("loinc"),U)
"RTN","HMPDTIU",79,0)
 S X=+$G(HMPTIU(IEN,.01,"I")),X=$$CATG(X),(DOC("type"),DOC("category"))=X
"RTN","HMPDTIU",80,0)
 S DOC("documentClass")=$S(X="LR":"LR LABORATORY REPORTS",X="SR":"SURGICAL REPORTS",X="CP":"CLINICAL PROCEDURES",X="DS":"DISCHARGE SUMMARY",1:"PROGRESS NOTES")
"RTN","HMPDTIU",81,0)
 S DOC("referenceDateTime")=$P(HMPX,U,3)
"RTN","HMPDTIU",82,0)
 S X=$P(HMPX,U,6) D  ;S:$L(X) DOC("location")=X
"RTN","HMPDTIU",83,0)
 . ; DE2818, ICR 10040 for ^SC, this doesn't handle duplicate entries and should be corrected
"RTN","HMPDTIU",84,0)
 . N LOC S LOC=$S($L(X):+$O(^SC("B",X,0)),1:0)
"RTN","HMPDTIU",85,0)
 . S DOC("facility")=$$FAC^HMPD(LOC)
"RTN","HMPDTIU",86,0)
 S X=$P(HMPX,U,7) S:$L(X) DOC("status")=X
"RTN","HMPDTIU",87,0)
 S:$P(HMPX,U,11) DOC("images")=+$P(HMPX,U,11)
"RTN","HMPDTIU",88,0)
 S:$L($P(HMPX,U,12)) DOC("subject")=$P(HMPX,U,12)
"RTN","HMPDTIU",89,0)
 ; X=$S($P(HMPX,U,13)[">":"C",$P(HMPX,U,13)["<":"I",1:"") ;componentType
"RTN","HMPDTIU",90,0)
 I $P(HMPX,U,14)>5 S DOC("parent")=$P(HMPX,U,14) ;ID notes
"RTN","HMPDTIU",91,0)
 S DOC("encounter")=$G(HMPTIU(IEN,.03,"I"))
"RTN","HMPDTIU",92,0)
 S:$G(HMPTEXT) DOC("content")=$$TEXT(IEN)
"RTN","HMPDTIU",93,0)
 ; providers &/or signatures
"RTN","HMPDTIU",94,0)
 S X=$P(HMPX,U,5),I=0 S:X I=I+1,DOC("clinician",I)=+X_U_$P(X,";",3)_"^A" ;author
"RTN","HMPDTIU",95,0)
 M ES=HMPTIU(IEN) I ES(1501,"I") D
"RTN","HMPDTIU",96,0)
 . S I=I+1
"RTN","HMPDTIU",97,0)
 . S DOC("clinician",I)=ES(1502,"I")_U_ES(1502,"E")_"^S^"_ES(1501,"I")_U_$$SIG(ES(1502,"I"))
"RTN","HMPDTIU",98,0)
 I ES(1507,"I") D  ; cosigner
"RTN","HMPDTIU",99,0)
 . S I=I+1
"RTN","HMPDTIU",100,0)
 . S DOC("clinician",I)=ES(1508,"I")_U_ES(1508,"E")_"^C^"_ES(1507,"I")_U_$$SIG(ES(1508,"I"))
"RTN","HMPDTIU",101,0)
 Q
"RTN","HMPDTIU",102,0)
 ;
"RTN","HMPDTIU",103,0)
CATG(DA) ; -- Return a code for document type #8925.1 DA
"RTN","HMPDTIU",104,0)
 N X
"RTN","HMPDTIU",105,0)
 D ISCNSLT^TIUCNSLT(.X,DA) I X Q "CR"  ;consult result
"RTN","HMPDTIU",106,0)
 I $$ISA^TIULX(DA,25) Q "A"            ;CWAD note/Allergy
"RTN","HMPDTIU",107,0)
 I $$ISA^TIULX(DA,27) Q "D"            ;CWAD note/Advance Directive
"RTN","HMPDTIU",108,0)
 I $$ISA^TIULX(DA,30) Q "C"            ;CWAD note/Crisis Note
"RTN","HMPDTIU",109,0)
 I $$ISA^TIULX(DA,31) Q "W"            ;CWAD note/Clinical Warning
"RTN","HMPDTIU",110,0)
 I $$ISA^TIULX(DA,3) Q "PN"            ;progress note
"RTN","HMPDTIU",111,0)
 ;
"RTN","HMPDTIU",112,0)
 I $$ISA^TIULX(DA,244) Q "DS"          ;discharge summary
"RTN","HMPDTIU",113,0)
 D ISCP^TIUCP(.X,DA) I X Q "CP"        ;clinical procedure
"RTN","HMPDTIU",114,0)
 D ISSURG^TIUSROI(.X,DA) I X Q "SR"    ;surgery
"RTN","HMPDTIU",115,0)
 I $$ISA^TIULX(DA,$$LR) Q "LR"         ;laboratory
"RTN","HMPDTIU",116,0)
 Q ""
"RTN","HMPDTIU",117,0)
 ;
"RTN","HMPDTIU",118,0)
LR() ; -- Return ien of Lab class
"RTN","HMPDTIU",119,0)
 N Y S Y=+$O(^TIU(8925.1,"B","LR LABORATORY REPORTS",0))  ;DE2818, ICRs 2700 and 5677
"RTN","HMPDTIU",120,0)
 I Y>0,$S($P($G(^TIU(8925.1,Y,0)),U,4)="CL":0,$P($G(^(0)),U,4)="DC":0,1:1) S Y=0
"RTN","HMPDTIU",121,0)
 Q Y
"RTN","HMPDTIU",122,0)
 ;
"RTN","HMPDTIU",123,0)
SIG(X) ; -- Return Signature Block Name_Title
"RTN","HMPDTIU",124,0)
 N X20,Y S X20=$G(^VA(200,+$G(X),20))
"RTN","HMPDTIU",125,0)
 S Y=$P(X20,U,2)_" "_$P(X20,U,3)
"RTN","HMPDTIU",126,0)
 Q Y
"RTN","HMPDTIU",127,0)
 ;
"RTN","HMPDTIU",128,0)
RPT(HMPY,IFN) ; -- Return text of document in @HMPY@(n)
"RTN","HMPDTIU",129,0)
 N I,J ;protect for calling loops
"RTN","HMPDTIU",130,0)
 D TGET^TIUSRVR1(.HMPY,IFN)
"RTN","HMPDTIU",131,0)
 Q
"RTN","HMPDTIU",132,0)
 ;
"RTN","HMPDTIU",133,0)
TEXT(IFN) ; -- Get document IFN text, return temp array name
"RTN","HMPDTIU",134,0)
 N HMPY,Y,I,J ;protect I&J for calling loops
"RTN","HMPDTIU",135,0)
 S IFN=+$G(IFN) D TGET^TIUSRVR1(.HMPY,IFN)
"RTN","HMPDTIU",136,0)
 M ^TMP("HMPTEXT",$J,IFN)=@HMPY K @HMPY
"RTN","HMPDTIU",137,0)
 S Y=$NA(^TMP("HMPTEXT",$J,IFN))
"RTN","HMPDTIU",138,0)
 Q Y
"RTN","HMPDTIU",139,0)
 ;
"RTN","HMPDTIU",140,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDTIU",141,0)
 ;
"RTN","HMPDTIU",142,0)
XML(DOC) ; -- Return patient documents as XML
"RTN","HMPDTIU",143,0)
 N ATT,X,Y,NAMES,TYPE,I
"RTN","HMPDTIU",144,0)
 D ADD("<document>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDTIU",145,0)
 S ATT="" F  S ATT=$O(DOC(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDTIU",146,0)
 . I $O(DOC(ATT,0)) D  S Y="" Q  ;multiples
"RTN","HMPDTIU",147,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDTIU",148,0)
 .. S I=0 F  S I=$O(DOC(ATT,I)) Q:I<1  D
"RTN","HMPDTIU",149,0)
 ... S X=$G(DOC(ATT,I)),NAMES=""
"RTN","HMPDTIU",150,0)
 ... I ATT="clinician" S NAMES="code^name^role^dateTime^signature^Z"
"RTN","HMPDTIU",151,0)
 ... S Y="<"_ATT_" "_$$LOOP_"/>" D ADD(Y)
"RTN","HMPDTIU",152,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDTIU",153,0)
 . S X=$G(DOC(ATT)),Y="" Q:'$L(X)
"RTN","HMPDTIU",154,0)
 . I ATT="content" D  S Y="" Q  ;text
"RTN","HMPDTIU",155,0)
 .. S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDTIU",156,0)
 .. S I=0 F  S I=$O(@X@(I)) Q:I<1  S Y=$$ESC^HMPD(@X@(I)) D ADD(Y)
"RTN","HMPDTIU",157,0)
 .. D ADD("</content>")
"RTN","HMPDTIU",158,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDTIU",159,0)
 . I $L(X)>1 S NAMES="code^name^Z",Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDTIU",160,0)
 D ADD("</document>")
"RTN","HMPDTIU",161,0)
 Q
"RTN","HMPDTIU",162,0)
 ;
"RTN","HMPDTIU",163,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDTIU",164,0)
 N STR,P,TAG S STR=""
"RTN","HMPDTIU",165,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDTIU",166,0)
 Q STR
"RTN","HMPDTIU",167,0)
 ;
"RTN","HMPDTIU",168,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPDTIU",169,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDTIU",170,0)
 S @HMP@(HMPI)=X
"RTN","HMPDTIU",171,0)
 Q
"RTN","HMPDTIU",172,0)
 ;
"RTN","HMPDTIU",173,0)
 ; ------------ Get/apply search criteria ------------
"RTN","HMPDTIU",174,0)
 ;
"RTN","HMPDTIU",175,0)
SETUP ; -- convert FILTER("attribute") = value to TIU criteria
"RTN","HMPDTIU",176,0)
 ; Expects: FILTER("category") = code (see $$CATG)
"RTN","HMPDTIU",177,0)
 ;          FILTER("loinc")    = LOINC
"RTN","HMPDTIU",178,0)
 ;          FILTER("status")   = 'all','completed','unsigned'
"RTN","HMPDTIU",179,0)
 ; Returns CLASS,[SUBCLASS,TITLE,SERVICE,SUBJECT,STATUS]
"RTN","HMPDTIU",180,0)
 ;
"RTN","HMPDTIU",181,0)
 N LOINC,TYPE,STS,CP
"RTN","HMPDTIU",182,0)
 S LOINC=+$G(FILTER("loinc")),TYPE=$$UP^XLFSTR($G(FILTER("category")))
"RTN","HMPDTIU",183,0)
 S CLASS="3^244",(SUBCLASS,TITLE,SERVICE,SUBJECT,NOTSUBJ,STATUS)=""
"RTN","HMPDTIU",184,0)
 ;
"RTN","HMPDTIU",185,0)
 ; status [default='complete']
"RTN","HMPDTIU",186,0)
 S STS=$$LOW^XLFSTR($G(FILTER("status")))
"RTN","HMPDTIU",187,0)
 S STATUS=$S(STS?1"unsig".E:2,STS="all":"5^2",1:5)  ;TIUSRVLO statuses
"RTN","HMPDTIU",188,0)
 ;
"RTN","HMPDTIU",189,0)
 ; progress notes
"RTN","HMPDTIU",190,0)
 I TYPE="PN" S CLASS=3 Q
"RTN","HMPDTIU",191,0)
 I TYPE="CR"!(LOINC=11488) S CLASS=3,SUBCLASS=+$$CLASS^TIUCNSLT Q
"RTN","HMPDTIU",192,0)
 ; LOINC=26442 S CLASS=3,SUBJECT="^114^" Q         ;OB/GYN
"RTN","HMPDTIU",193,0)
 I LOINC=34117 S CLASS=3,SERVICE="^88^" Q          ;H&P
"RTN","HMPDTIU",194,0)
 I TYPE="CWAD" S CLASS=3,SUBCLASS="25^27^30^31" Q  ;CWAD
"RTN","HMPDTIU",195,0)
 I TYPE="C" S CLASS=3,SUBCLASS=30 Q                ;Crisis Note
"RTN","HMPDTIU",196,0)
 I TYPE="W" S CLASS=3,SUBCLASS=31 Q                ;Clinical Warning
"RTN","HMPDTIU",197,0)
 I TYPE="A" S CLASS=3,SUBCLASS=25 Q                ;Allergy Note
"RTN","HMPDTIU",198,0)
 I TYPE="D"!(LOINC=42348) S CLASS=3,SUBCLASS=27 Q  ;Advance Directive
"RTN","HMPDTIU",199,0)
 ;
"RTN","HMPDTIU",200,0)
 ; discharge summaries
"RTN","HMPDTIU",201,0)
 I TYPE="DS"!(LOINC=18842) S CLASS=244 Q
"RTN","HMPDTIU",202,0)
 ;
"RTN","HMPDTIU",203,0)
 ; procedures
"RTN","HMPDTIU",204,0)
 I TYPE="SR"!(LOINC=29752) S CLASS=+$$CLASS^TIUSROI("SURGICAL REPORTS") Q
"RTN","HMPDTIU",205,0)
 D CPCLASS^TIUCP(.CP)
"RTN","HMPDTIU",206,0)
 I TYPE="CP" S CLASS=$S(STATUS=2:CP,1:"CP") Q       ;CLINICAL PROCEDURES
"RTN","HMPDTIU",207,0)
 I LOINC=26441 D  Q                                 ;CARDIOLOGY
"RTN","HMPDTIU",208,0)
 . S CLASS=CP_"^3"
"RTN","HMPDTIU",209,0)
 . S SUBJECT="^18^142^174^",SERVICE="^75^76^115^"
"RTN","HMPDTIU",210,0)
 I LOINC=27896 D  Q                                 ;PULMONARY
"RTN","HMPDTIU",211,0)
 . S CLASS=CP_"^3"
"RTN","HMPDTIU",212,0)
 . S SUBJECT="^23^142^",SERVICE="^75^76^115^"
"RTN","HMPDTIU",213,0)
 I LOINC=27895 D  Q                                 ;GASTROENTEROLOGY
"RTN","HMPDTIU",214,0)
 . S CLASS=CP_"^3"
"RTN","HMPDTIU",215,0)
 . S SUBJECT="^20^",SERVICE="^75^76^115^"
"RTN","HMPDTIU",216,0)
 I LOINC=27897 D  Q                                 ;NEUROLOGY
"RTN","HMPDTIU",217,0)
 . S CLASS=CP_"^3"
"RTN","HMPDTIU",218,0)
 . S SUBJECT="^44^45^52^111^112^143^146^",SERVICE="^75^76^115^"
"RTN","HMPDTIU",219,0)
 I LOINC=28619 D  Q                                 ;OPHTH/OPTOMETRY
"RTN","HMPDTIU",220,0)
 . S CLASS=CP_"^3"
"RTN","HMPDTIU",221,0)
 . S SUBJECT="^13^14^103^",SERVICE="^75^76^115^"
"RTN","HMPDTIU",222,0)
 I LOINC=28634 D  Q                                 ;MISC/ALL OTHERS
"RTN","HMPDTIU",223,0)
 . S CLASS=CP_"^3",SERVICE="^75^76^115^"
"RTN","HMPDTIU",224,0)
 . S NOTSUBJ="^18^142^174^23^142^20^44^45^52^111^112^143^146^13^14^103^"
"RTN","HMPDTIU",225,0)
 I LOINC=28570 D  Q                                 ;UNSPECIFIED/ALL
"RTN","HMPDTIU",226,0)
 . S CLASS=CP_"^3"
"RTN","HMPDTIU",227,0)
 . S SERVICE="^75^76^115^"
"RTN","HMPDTIU",228,0)
 ;
"RTN","HMPDTIU",229,0)
 ; pathology/lab
"RTN","HMPDTIU",230,0)
 I TYPE="LR"!(LOINC=27898) S CLASS=$S(STATUS=2:$$LR,1:"LR") Q
"RTN","HMPDTIU",231,0)
 ;
"RTN","HMPDTIU",232,0)
 ; radiology
"RTN","HMPDTIU",233,0)
 I TYPE="RA"!(LOINC=18726) S CLASS="RA" Q
"RTN","HMPDTIU",234,0)
 ;
"RTN","HMPDTIU",235,0)
 ; unknown
"RTN","HMPDTIU",236,0)
 I $L(TYPE)!LOINC S CLASS=0
"RTN","HMPDTIU",237,0)
 Q
"RTN","HMPDTIU",238,0)
 ;
"RTN","HMPDTIU",239,0)
 ;DE2818 begin, changed function below to use FileMan for ^TIU(8926.1) references, ICR 5678
"RTN","HMPDTIU",240,0)
MATCH(DOC,SBCLSS,SRVC,SBJCT,NTSBJ) ; Boolean function, Return 1 or 0, if document matches search criteria
"RTN","HMPDTIU",241,0)
 ; DOC - IEN in TIU DOCUMENT file (#8925)
"RTN","HMPDTIU",242,0)
 ; SBCLSS - subclass
"RTN","HMPDTIU",243,0)
 ; SRVC - service
"RTN","HMPDTIU",244,0)
 ; two pointers to TIU LOINC SUBJECT MATTER DOMAIN (#8926.2):
"RTN","HMPDTIU",245,0)
 ;    SBJCT - subject to include, NTSUBJ - subject to exclude
"RTN","HMPDTIU",246,0)
 N DA,HMSBJMD,LOCAL,NATL,OK,Y
"RTN","HMPDTIU",247,0)
 ; Y is the return value
"RTN","HMPDTIU",248,0)
 S Y=0,DA=+$G(DOC) G:DA<1 MQ
"RTN","HMPDTIU",249,0)
 ; include addenda if pulling only unsigned items
"RTN","HMPDTIU",250,0)
 I $P(DOC,U,2)?1"Addendum ".E,STATUS'=2 G MQ
"RTN","HMPDTIU",251,0)
 ; TIU unsigned list can include completed parent notes
"RTN","HMPDTIU",252,0)
 I CTXT=2,$P(DOC,U,7)'="unsigned" G MQ
"RTN","HMPDTIU",253,0)
 S LOCAL=$$GET1^DIQ(8925,DA_",",.01,"I") ;local Title 8925.1 ien
"RTN","HMPDTIU",254,0)
 I $L(SBCLSS) D  G:'OK MQ
"RTN","HMPDTIU",255,0)
 . N I,X S OK=0
"RTN","HMPDTIU",256,0)
 . F I=1:1:$L(SBCLSS,U) S X=$P(SBCLSS,U,I) I $$ISA^TIULX(LOCAL,X) S OK=1 Q
"RTN","HMPDTIU",257,0)
 S NATL=+$$GET1^DIQ(8925.1,LOCAL_",",1501,"I") ;Natl Title 8926.1 ien
"RTN","HMPDTIU",258,0)
 I $L(TITLE) G:TITLE'[(U_+NATL_U) MQ
"RTN","HMPDTIU",259,0)
 ;S X0=$G(^TIU(8926.1,NATL,0))
"RTN","HMPDTIU",260,0)
 I $L(SRVC) G:SRVC'[(U_$$GET1^DIQ(8926.1,NATL_",",.07,"I")_U) MQ  ;(#.07) SERVICE
"RTN","HMPDTIU",261,0)
 S HMSBJMD=+$$GET1^DIQ(8926.1,NATL_",",.07,"I")  ;(#.04) SUBJECT MATTER DOMAIN
"RTN","HMPDTIU",262,0)
 I $L(SBJCT) G:SBJCT'[(U_HMSBJMD_U) MQ
"RTN","HMPDTIU",263,0)
 I $L(NTSBJ) G:NTSBJ[(U_HMSBJMD_U) MQ
"RTN","HMPDTIU",264,0)
 S Y=1
"RTN","HMPDTIU",265,0)
MQ Q Y
"RTN","HMPDTIU",266,0)
 ;
"RTN","HMPDTIUX")
1^172
"RTN","HMPDVSIT")
0^78^B93496568
"RTN","HMPDVSIT",1,0)
HMPDVSIT ;SLC/MKB,ASMR/RRB - Visit/Encounter extract;8/2/11  15:29
"RTN","HMPDVSIT",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPDVSIT",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDVSIT",4,0)
 ;
"RTN","HMPDVSIT",5,0)
 ; External References          DBIA#
"RTN","HMPDVSIT",6,0)
 ; -------------------          -----
"RTN","HMPDVSIT",7,0)
 ; ^AUPNVSIT                     2028
"RTN","HMPDVSIT",8,0)
 ; ^DIC(40.7                      557
"RTN","HMPDVSIT",9,0)
 ; ^DIC(42                      10039
"RTN","HMPDVSIT",10,0)
 ; ^DIC(45.7                     1154
"RTN","HMPDVSIT",11,0)
 ; ^DPT(                        10035
"RTN","HMPDVSIT",12,0)
 ; ^SC                          10040
"RTN","HMPDVSIT",13,0)
 ; ^VA(200                      10060
"RTN","HMPDVSIT",14,0)
 ; DGPTFAPI                      3157
"RTN","HMPDVSIT",15,0)
 ; DIC                           2051
"RTN","HMPDVSIT",16,0)
 ; DILFD                         2055
"RTN","HMPDVSIT",17,0)
 ; DIQ                           2056
"RTN","HMPDVSIT",18,0)
 ; ICDCODE                       3990
"RTN","HMPDVSIT",19,0)
 ; ICPTCOD                       1995
"RTN","HMPDVSIT",20,0)
 ; PXAPI,^TMP("PXKENC",$J        1894
"RTN","HMPDVSIT",21,0)
 ; SDOE                          2546
"RTN","HMPDVSIT",22,0)
 ; VADPT                        10061
"RTN","HMPDVSIT",23,0)
 ; VADPT2                         325
"RTN","HMPDVSIT",24,0)
 ; XUAF4                         2171
"RTN","HMPDVSIT",25,0)
 Q
"RTN","HMPDVSIT",26,0)
 ; ------------ Get encounter(s) from VistA ------------
"RTN","HMPDVSIT",27,0)
 ;
"RTN","HMPDVSIT",28,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's visits and appointments
"RTN","HMPDVSIT",29,0)
 N HMPCNT,HMPITM,HMPDT,HMPLOC,HMPDA
"RTN","HMPDVSIT",30,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDVSIT",31,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDVSIT",32,0)
 ;
"RTN","HMPDVSIT",33,0)
 ; get one visit
"RTN","HMPDVSIT",34,0)
 I $G(ID) D EN1(ID,.HMPITM),XML(.HMPITM) G ENQ
"RTN","HMPDVSIT",35,0)
 ;
"RTN","HMPDVSIT",36,0)
 ; -- get all visits
"RTN","HMPDVSIT",37,0)
 I END,END'["." S END=END_".24" ;assume end of day
"RTN","HMPDVSIT",38,0)
 S HMPCNT=0
"RTN","HMPDVSIT",39,0)
 ;F  S IDX=$Q(@IDX,-1) Q:DFN'=$P(IDX,",",2)  Q:$P(IDX,",",3)<BEG  I $P(IDX,",",5)["P" D
"RTN","HMPDVSIT",40,0)
 S HMPDT=END F  S HMPDT=$O(^AUPNVSIT("AET",DFN,HMPDT),-1)  Q:HMPDT<BEG  D  Q:HMPCNT'<MAX  ;ICR 2028 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",41,0)
 . S HMPLOC=0 F  S HMPLOC=$O(^AUPNVSIT("AET",DFN,HMPDT,HMPLOC)) Q:HMPLOC<1  D
"RTN","HMPDVSIT",42,0)
 .. S HMPDA=0 F  S HMPDA=$O(^AUPNVSIT("AET",DFN,HMPDT,HMPLOC,"P",HMPDA)) Q:HMPDA<1  D
"RTN","HMPDVSIT",43,0)
 ... K HMPITM D EN1(HMPDA,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDVSIT",44,0)
 ... D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDVSIT",45,0)
ENQ ; end
"RTN","HMPDVSIT",46,0)
 K ^TMP("HMPTEXT",$J)
"RTN","HMPDVSIT",47,0)
 Q
"RTN","HMPDVSIT",48,0)
 ;
"RTN","HMPDVSIT",49,0)
ENAA(DFN,BEG,END,MAX,ID) ; -- find patient's visits and appointments [AA]
"RTN","HMPDVSIT",50,0)
 N IDT,DA,HMPCNT,HMPITM
"RTN","HMPDVSIT",51,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDVSIT",52,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDVSIT",53,0)
 I $G(ID) D EN1(ID,.HMPITM),XML(.HMPITM) Q  ;one visit
"RTN","HMPDVSIT",54,0)
 D IDT S HMPCNT=0
"RTN","HMPDVSIT",55,0)
 S IDT=BEG F  S IDT=$O(^AUPNVSIT("AA",DFN,IDT)) Q:IDT<1!(IDT>END)  D  Q:HMPCNT'<MAX  ;ICR 2028 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",56,0)
 . S DA=0 F  S DA=$O(^AUPNVSIT("AA",DFN,IDT,DA)) Q:DA<1  D
"RTN","HMPDVSIT",57,0)
 .. K HMPITM D EN1(DA,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDVSIT",58,0)
 .. D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDVSIT",59,0)
 Q
"RTN","HMPDVSIT",60,0)
IDT ; -- invert BEG and END dates for visit format:
"RTN","HMPDVSIT",61,0)
 ;  IDT=(9999999-$P(VDT,"."))_"."_$P(VDT,".",2)
"RTN","HMPDVSIT",62,0)
 N X S X=BEG
"RTN","HMPDVSIT",63,0)
 S BEG=(9999999-$P(END,"."))
"RTN","HMPDVSIT",64,0)
 S END=(9999999-$P(X,"."))_".2359"
"RTN","HMPDVSIT",65,0)
 Q
"RTN","HMPDVSIT",66,0)
 ;
"RTN","HMPDVSIT",67,0)
EN1(IEN,VST) ; -- return a visit in VST("attribute")=value
"RTN","HMPDVSIT",68,0)
 N X0,X15,X,FAC,LOC,CATG,INPT,DA
"RTN","HMPDVSIT",69,0)
 K VST,^TMP("HMPTEXT",$J)
"RTN","HMPDVSIT",70,0)
 S IEN=+$G(IEN) Q:IEN<1  ;invalid
"RTN","HMPDVSIT",71,0)
 D ENCEVENT^PXAPI(IEN)
"RTN","HMPDVSIT",72,0)
 S X0=$G(^TMP("PXKENC",$J,IEN,"VST",IEN,0)),X15=$G(^(150))
"RTN","HMPDVSIT",73,0)
 Q:$P(X15,U,3)'="P"  Q:$P(X0,U,7)="E"  ;want primary, not historical
"RTN","HMPDVSIT",74,0)
 I $P(X0,U,7)="H" D ADM(IEN,+X0,.VST) Q
"RTN","HMPDVSIT",75,0)
 S VST("id")=IEN,VST("dateTime")=+X0
"RTN","HMPDVSIT",76,0)
 S FAC=+$P(X0,U,6),CATG=$P(X0,U,7),LOC=+$P(X0,U,22)
"RTN","HMPDVSIT",77,0)
 S:FAC VST("facility")=$$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","HMPDVSIT",78,0)
 S:'FAC VST("facility")=$$FAC^HMPD(LOC)
"RTN","HMPDVSIT",79,0)
 S VST("serviceCategory")=CATG_U_$$CATG(CATG)
"RTN","HMPDVSIT",80,0)
 S VST("visitString")=LOC_";"_+X0_";"_CATG
"RTN","HMPDVSIT",81,0)
 S INPT=$P(X15,U,2) S:INPT="" INPT=$S("H^I^R^D"[CATG:1,1:0)
"RTN","HMPDVSIT",82,0)
 S X=$$CPT(IEN) S:X VST("type")=$P($$CPT^ICPTCOD(X),U,2,3)
"RTN","HMPDVSIT",83,0)
 I 'X S VST("type")=U_$S('INPT&LOC:$P($G(^SC(LOC,0)),U)_" VISIT",1:$$CATG(CATG)) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",84,0)
 S VST("patientClass")=$S(INPT:"IMP",1:"AMB")
"RTN","HMPDVSIT",85,0)
 S X=$P(X0,U,8) S:X VST("stopCode")=$$AMIS(X) I LOC D
"RTN","HMPDVSIT",86,0)
 . N L0 S L0=$G(^SC(LOC,0)) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",87,0)
 . I 'X S VST("stopCode")=$$AMIS($P(L0,U,7))
"RTN","HMPDVSIT",88,0)
 . S VST("location")=$P(L0,U),VST("service")=$$SERV($P(L0,U,20))
"RTN","HMPDVSIT",89,0)
 . S X=$P(L0,U,18) S:X VST("creditStopCode")=$$AMIS(X)
"RTN","HMPDVSIT",90,0)
 S VST("reason")=$$POV(IEN)
"RTN","HMPDVSIT",91,0)
 ; provider(s)
"RTN","HMPDVSIT",92,0)
 S DA=0 F  S DA=$O(^TMP("PXKENC",$J,IEN,"PRV",DA)) Q:DA<1  S X0=$G(^(DA,0)) D
"RTN","HMPDVSIT",93,0)
 . S VST("provider",DA)=+X0_U_$P($G(^VA(200,+X0,0)),U)_$S($P(X0,U,4)="P":"^P^1",1:"^S^") ;ICR 10060 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",94,0)
 ; note(s)
"RTN","HMPDVSIT",95,0)
 D TIU(IEN)
"RTN","HMPDVSIT",96,0)
 K ^TMP("PXKENC",$J,IEN)
"RTN","HMPDVSIT",97,0)
 Q
"RTN","HMPDVSIT",98,0)
 ;
"RTN","HMPDVSIT",99,0)
TIU(VISIT) ; -- add notes to VST("document")
"RTN","HMPDVSIT",100,0)
 N X,Y,I,HMPX,LT,NT,DA,CNT,HMPY
"RTN","HMPDVSIT",101,0)
 D FIND^DIC(8925,,.01,"QX",+$G(VISIT),,"V",,,"HMPX")
"RTN","HMPDVSIT",102,0)
 S Y="",(I,CNT)=0
"RTN","HMPDVSIT",103,0)
 F  S I=$O(HMPX("DILIST",1,I)) Q:I<1  D
"RTN","HMPDVSIT",104,0)
 . S LT=$G(HMPX("DILIST","ID",I,.01)) Q:$P(LT," ")="Addendum"
"RTN","HMPDVSIT",105,0)
 . S DA=$G(HMPX("DILIST",2,I))
"RTN","HMPDVSIT",106,0)
 . S NT=$$GET1^DIQ(8925,+DA_",",".01:1501")
"RTN","HMPDVSIT",107,0)
 . S CNT=CNT+1,VST("document",CNT)=DA_U_LT_U_NT
"RTN","HMPDVSIT",108,0)
 . S:$G(HMPTEXT) VST("document",CNT,"content")=$$TEXT^HMPDTIU(DA)
"RTN","HMPDVSIT",109,0)
 Q
"RTN","HMPDVSIT",110,0)
 ;
"RTN","HMPDVSIT",111,0)
POV(VISIT) ; -- return the primary Purpose of Visit as ICD^ProviderNarrative
"RTN","HMPDVSIT",112,0)
 N DA,Y,X,X0,ICD S Y=""
"RTN","HMPDVSIT",113,0)
 S DA=0 F  S DA=$O(^TMP("PXKENC",$J,VISIT,"POV",DA)) Q:DA<1  S X0=$G(^(DA,0)) I $P(X0,U,12)="P" D  Q:$L(Y)
"RTN","HMPDVSIT",114,0)
 . S X=+$P(X0,U,4),ICD=$$ICD(+X0)
"RTN","HMPDVSIT",115,0)
 . S Y=ICD_U_$$EXTERNAL^DILFD(9000010.07,.04,,X)
"RTN","HMPDVSIT",116,0)
 Q Y
"RTN","HMPDVSIT",117,0)
 ;
"RTN","HMPDVSIT",118,0)
ICD(IEN) ; -- return code^description for ICD code, or "^" if error
"RTN","HMPDVSIT",119,0)
 N X0,HMPX,N,I,X,Y S IEN=+$G(IEN)
"RTN","HMPDVSIT",120,0)
 S X0=$$ICDDX^ICDCODE(IEN) I X0<0 Q "^"
"RTN","HMPDVSIT",121,0)
 S Y=$P(X0,U,2)_U_$P(X0,U,4)       ;ICD Code^Dx name
"RTN","HMPDVSIT",122,0)
 S N=$$ICDD^ICDCODE($P(Y,U),"HMPX") ;ICD Description
"RTN","HMPDVSIT",123,0)
 I N>0,$L($G(HMPX(1))) S $P(Y,U,2)=HMPX(1)
"RTN","HMPDVSIT",124,0)
 Q Y
"RTN","HMPDVSIT",125,0)
 ;
"RTN","HMPDVSIT",126,0)
CPT(VISIT) ; -- Return CPT code of encounter type
"RTN","HMPDVSIT",127,0)
 N DA,Y,X,X0 S Y=""
"RTN","HMPDVSIT",128,0)
 S DA=0 F  S DA=$O(^TMP("PXKENC",$J,VISIT,"CPT",DA)) Q:DA<1  S X0=$G(^(DA,0)) D  Q:$L(Y)
"RTN","HMPDVSIT",129,0)
 . S X=$P(X0,U) I X?1"992"2N S Y=X Q
"RTN","HMPDVSIT",130,0)
 Q Y
"RTN","HMPDVSIT",131,0)
 ;
"RTN","HMPDVSIT",132,0)
AMIS(X) ; -- return the AMIS code^name of Credit Stop X
"RTN","HMPDVSIT",133,0)
 N Y,X0 S Y=""
"RTN","HMPDVSIT",134,0)
 S X0=$G(^DIC(40.7,+$G(X),0)) S:$L(X0) Y=$P(X0,U,2)_U_$P(X0,U) ;ICR 557 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",135,0)
 Q Y
"RTN","HMPDVSIT",136,0)
 ;
"RTN","HMPDVSIT",137,0)
CATG(X) ; -- Return name of visit Service Category code X
"RTN","HMPDVSIT",138,0)
 N Y S Y=""
"RTN","HMPDVSIT",139,0)
 I X="A" S Y="AMBULATORY"
"RTN","HMPDVSIT",140,0)
 I X="H" S Y="HOSPITALIZATION"
"RTN","HMPDVSIT",141,0)
 I X="I" S Y="IN HOSPITAL"
"RTN","HMPDVSIT",142,0)
 I X="C" S Y="CHART REVIEW"
"RTN","HMPDVSIT",143,0)
 I X="T" S Y="TELECOMMUNICATIONS"
"RTN","HMPDVSIT",144,0)
 I X="N" S Y="NOT FOUND"
"RTN","HMPDVSIT",145,0)
 I X="S" S Y="DAY SURGERY"
"RTN","HMPDVSIT",146,0)
 I X="O" S Y="OBSERVATION"
"RTN","HMPDVSIT",147,0)
 I X="E" S Y="EVENT (HISTORICAL)"
"RTN","HMPDVSIT",148,0)
 I X="R" S Y="NURSING HOME"
"RTN","HMPDVSIT",149,0)
 I X="D" S Y="DAILY HOSPITALIZATION DATA"
"RTN","HMPDVSIT",150,0)
 I X="X" S Y="ANCILLARY PACKAGE DAILY DATA"
"RTN","HMPDVSIT",151,0)
 Q Y
"RTN","HMPDVSIT",152,0)
 ;
"RTN","HMPDVSIT",153,0)
SERV(FTS) ; -- Return #42.4 Service for a Facility Treating Specialty
"RTN","HMPDVSIT",154,0)
 N Y S Y="",FTS=+$G(FTS)
"RTN","HMPDVSIT",155,0)
 S Y=$$GET1^DIQ(45.7,FTS_",","1:3","E")
"RTN","HMPDVSIT",156,0)
 Q Y
"RTN","HMPDVSIT",157,0)
 ;
"RTN","HMPDVSIT",158,0)
ADM(IEN,DATE,ADM) ; -- return an admission in ADM("attribute")=value
"RTN","HMPDVSIT",159,0)
 N VAINDT,VADMVT,VAIP,VAIN,VAERR,HLOC,ICD,I K ADM
"RTN","HMPDVSIT",160,0)
 S IEN=+$G(IEN),DATE=+$G(DATE) Q:IEN<1  Q:DATE<1
"RTN","HMPDVSIT",161,0)
 S VAINDT=DATE D ADM^VADPT2 Q:VADMVT<1
"RTN","HMPDVSIT",162,0)
 I VADMVT=$G(^DPT(DFN,.105)) D INPT Q  ;current inpatient ICR 10035 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",163,0)
 S VAIP("E")=VADMVT D IN5^VADPT Q:'$G(VAIP(1))  ;deleted
"RTN","HMPDVSIT",164,0)
 S ADM("id")=IEN,ADM("patientClass")="IMP"
"RTN","HMPDVSIT",165,0)
 ; ADM("admitType")=$P($G(VAIP(4)),U,2)
"RTN","HMPDVSIT",166,0)
 S DATE=+$G(VAIP(13,1)),(ADM("dateTime"),ADM("arrivalDateTime"))=DATE,I=0
"RTN","HMPDVSIT",167,0)
 S:$G(VAIP(7)) I=I+1,ADM("provider",I)=VAIP(7)_"^P^1" ;primary
"RTN","HMPDVSIT",168,0)
 S:$G(VAIP(18)) I=I+1,ADM("provider",I)=VAIP(18)_"^A" ;attending
"RTN","HMPDVSIT",169,0)
 S ADM("specialty")=$P($G(VAIP(8)),U,2)
"RTN","HMPDVSIT",170,0)
 S X=$$SERV(+$G(VAIP(8))),ADM("service")=X
"RTN","HMPDVSIT",171,0)
 S ICD=$$POV(IEN) S:'ICD ICD=$$PTF(DFN,VAIP(12)) ;PTF>ICD
"RTN","HMPDVSIT",172,0)
 S ADM("reason")=ICD_U_$G(VAIP(9)) ;ICD code^description^Dx text
"RTN","HMPDVSIT",173,0)
 S HLOC=+$G(^DIC(42,+$G(VAIP(5)),44)) ;ICR 10039 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",174,0)
 S:HLOC ADM("location")=$P($G(^SC(HLOC,0)),U) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",175,0)
 S ADM("facility")=$$FAC^HMPD(+HLOC),ADM("roomBed")=$P(VAIP(6),U,2)
"RTN","HMPDVSIT",176,0)
 S ADM("serviceCategory")="H^HOSPITALIZATION"
"RTN","HMPDVSIT",177,0)
 S X=$$CPT(IEN),ADM("type")=$S(X:$P($$CPT^ICPTCOD(X),U,2,3),1:U_$$CATG("H"))
"RTN","HMPDVSIT",178,0)
 I $G(VAIP(17)) D
"RTN","HMPDVSIT",179,0)
 . S ADM("departureDateTime")=+$G(VAIP(17,1))
"RTN","HMPDVSIT",180,0)
 . ; ADM("disposition")=$G(VAIP(17,3)) ;Discharge Mvt Type
"RTN","HMPDVSIT",181,0)
 S ADM("visitString")=HLOC_";"_DATE_";H"
"RTN","HMPDVSIT",182,0)
 D TIU(IEN) ;notes/summary
"RTN","HMPDVSIT",183,0)
 Q
"RTN","HMPDVSIT",184,0)
 ;
"RTN","HMPDVSIT",185,0)
INPT ; -- return current admission in ADM("attribute")=value [from ADM]
"RTN","HMPDVSIT",186,0)
 K VAINDT D INP^VADPT Q:VAIN(1)<1
"RTN","HMPDVSIT",187,0)
 S ADM("id")=IEN,ADM("patientClass")="IMP"
"RTN","HMPDVSIT",188,0)
 ; ADM("admitType")=$P($G(VAIN(8)),U,2)
"RTN","HMPDVSIT",189,0)
 S DATE=+$G(VAIN(7)),(ADM("dateTime"),ADM("arrivalDateTime"))=DATE,I=0
"RTN","HMPDVSIT",190,0)
 S:$G(VAIN(2)) I=I+1,ADM("provider",I)=VAIN(2)_"^P^1" ;primary
"RTN","HMPDVSIT",191,0)
 S:$G(VAIN(11)) I=I+1,ADM("provider",I)=VAIN(11)_"^A" ;attending
"RTN","HMPDVSIT",192,0)
 S ADM("specialty")=$P($G(VAIN(3)),U,2)
"RTN","HMPDVSIT",193,0)
 S X=$$SERV(+$G(VAIN(3))),ADM("service")=X
"RTN","HMPDVSIT",194,0)
 S ICD=$$POV(IEN) S:'ICD ICD=$$PTF(DFN,VAIN(10)) ;PTF>ICD
"RTN","HMPDVSIT",195,0)
 S ADM("reason")=ICD_U_$G(VAIN(9)) ;ICD code^description^Dx text
"RTN","HMPDVSIT",196,0)
 S HLOC=+$G(^DIC(42,+$G(VAIN(4)),44)) ;ICR 10039 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",197,0)
 S:HLOC ADM("location")=$P($G(^SC(HLOC,0)),U) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",198,0)
 S ADM("facility")=$$FAC^HMPD(+HLOC),ADM("roomBed")=$P(VAIN(5),U,2)
"RTN","HMPDVSIT",199,0)
 S ADM("serviceCategory")="H^HOSPITALIZATION"
"RTN","HMPDVSIT",200,0)
 S X=$$CPT(IEN),ADM("type")=$S(X:$P($$CPT^ICPTCOD(X),U,2,3),1:U_$$CATG("H"))
"RTN","HMPDVSIT",201,0)
 ; ADM("visitString")=HLOC_";"_DATE_";H"
"RTN","HMPDVSIT",202,0)
 D TIU(IEN) ;notes/summary
"RTN","HMPDVSIT",203,0)
 Q
"RTN","HMPDVSIT",204,0)
 ;
"RTN","HMPDVSIT",205,0)
PTF(DFN,PTF) ; -- return ICD code^description for a PTF record
"RTN","HMPDVSIT",206,0)
 N HMPPTF,N,HMPX
"RTN","HMPDVSIT",207,0)
 D:$G(PTF) RPC^DGPTFAPI(.HMPPTF,+PTF) I $G(HMPPTF(0))<1 Q "^"
"RTN","HMPDVSIT",208,0)
 S Y=$P($G(HMPPTF(1)),U,3)_U
"RTN","HMPDVSIT",209,0)
 S N=$$ICDD^ICDCODE(Y,"HMPX") ;ICD Description
"RTN","HMPDVSIT",210,0)
 I N>0,$L($G(HMPX(1))) S Y=Y_HMPX(1)
"RTN","HMPDVSIT",211,0)
 Q Y
"RTN","HMPDVSIT",212,0)
 ;
"RTN","HMPDVSIT",213,0)
ENC(IEN,ENC) ; -- return an encounter in ENC("attribute")=value
"RTN","HMPDVSIT",214,0)
 N X0,DATE,HLOC,TYPE,STS,X,Y K ENC
"RTN","HMPDVSIT",215,0)
 S IEN=+$G(IEN) Q:IEN<1  ;invalid ien
"RTN","HMPDVSIT",216,0)
 S ENC("id")="E"_IEN,X0=$$GETOE^SDOE(IEN) ;^SCE(IEN,0) node ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",217,0)
 S DATE=+X0,ENC("dateTime")=DATE
"RTN","HMPDVSIT",218,0)
 S HLOC=+$P(X0,U,4) I HLOC D
"RTN","HMPDVSIT",219,0)
 . S HLOC=HLOC_U_$P($G(^SC(HLOC,0)),U) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",220,0)
 . S ENC("location")=$P(HLOC,U,2)
"RTN","HMPDVSIT",221,0)
 . S X=$$GET1^DIQ(44,+HLOC_",",9.5,"I")
"RTN","HMPDVSIT",222,0)
 . I X S ENC("service")=$$SERV(X)
"RTN","HMPDVSIT",223,0)
 S ENC("facility")=$$FAC^HMPD(+HLOC)
"RTN","HMPDVSIT",224,0)
 S STS=$$EXTERNAL^DILFD(409.68,.12,,$P(X0,U,12))
"RTN","HMPDVSIT",225,0)
 S X=$S(STS?1"INP".E:"IMP",1:"AMB"),ENC("patientClass")=X,TYPE=$E(X)
"RTN","HMPDVSIT",226,0)
 S ENC("type")=U_$S(HLOC:$P(HLOC,U,2)_" VISIT",1:$$CATG(TYPE))
"RTN","HMPDVSIT",227,0)
 S ENC("serviceCategory")=TYPE_U_$$CATG(TYPE)
"RTN","HMPDVSIT",228,0)
 S ENC("visitString")=+HLOC_";"_DATE_";"_TYPE
"RTN","HMPDVSIT",229,0)
 Q
"RTN","HMPDVSIT",230,0)
 ;
"RTN","HMPDVSIT",231,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDVSIT",232,0)
 ;
"RTN","HMPDVSIT",233,0)
XML(VISIT) ; -- Return patient visit as XML
"RTN","HMPDVSIT",234,0)
 N ATT,X,Y,NAMES,I,J
"RTN","HMPDVSIT",235,0)
 D ADD("<visit>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDVSIT",236,0)
 S ATT="" F  S ATT=$O(VISIT(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDVSIT",237,0)
 . I $O(VISIT(ATT,0)) D  S Y="" Q  ;multiples
"RTN","HMPDVSIT",238,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDVSIT",239,0)
 .. S I=0 F  S I=$O(VISIT(ATT,I)) Q:I<1  D
"RTN","HMPDVSIT",240,0)
 ... S X=$G(VISIT(ATT,I)),NAMES=""
"RTN","HMPDVSIT",241,0)
 ... I ATT="document" S NAMES="id^localTitle^nationalTitle^Z"
"RTN","HMPDVSIT",242,0)
 ... I ATT="provider" S NAMES="code^name^role^primary^Z"
"RTN","HMPDVSIT",243,0)
 ... S Y="<"_ATT_" "_$$LOOP ;_"/>" D ADD(Y)
"RTN","HMPDVSIT",244,0)
 ... S X=$G(VISIT(ATT,I,"content")) I '$L(X) S Y=Y_"/>" D ADD(Y) Q
"RTN","HMPDVSIT",245,0)
 ... S Y=Y_">" D ADD(Y)
"RTN","HMPDVSIT",246,0)
 ... S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDVSIT",247,0)
 ... S J=0 F  S J=$O(@X@(J)) Q:J<1  S Y=$$ESC^HMPD(@X@(J)) D ADD(Y)
"RTN","HMPDVSIT",248,0)
 ... D ADD("</content>"),ADD("</"_ATT_">")
"RTN","HMPDVSIT",249,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDVSIT",250,0)
 . S X=$G(VISIT(ATT)),Y="" Q:'$L(X)
"RTN","HMPDVSIT",251,0)
 . S NAMES="code^name^"_$S(ATT="reason":"narrative^",1:"")_"Z"
"RTN","HMPDVSIT",252,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDVSIT",253,0)
 . I $L(X)>1 S Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDVSIT",254,0)
 D ADD("</visit>")
"RTN","HMPDVSIT",255,0)
 Q
"RTN","HMPDVSIT",256,0)
 ;
"RTN","HMPDVSIT",257,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDVSIT",258,0)
 N STR,P,TAG S STR=""
"RTN","HMPDVSIT",259,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDVSIT",260,0)
 Q STR
"RTN","HMPDVSIT",261,0)
 ;
"RTN","HMPDVSIT",262,0)
ADD(X) ; -- Add a line @HMP@(n)=X
"RTN","HMPDVSIT",263,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDVSIT",264,0)
 S @HMP@(HMPI)=X
"RTN","HMPDVSIT",265,0)
 Q
"RTN","HMPEASU")
0^79^B29036042
"RTN","HMPEASU",1,0)
HMPEASU ;SLC/GRR,ASMR/RRB - Serve VistA reference data as JSON via RPC;10/18/12 6:26pm
"RTN","HMPEASU",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPEASU",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEASU",4,0)
 ;
"RTN","HMPEASU",5,0)
 Q
"RTN","HMPEASU",6,0)
 ;
"RTN","HMPEASU",7,0)
CLASS ; -- USR Class file #8930
"RTN","HMPEASU",8,0)
 N PRV S PRV=+$G(HMPLAST)
"RTN","HMPEASU",9,0)
 S HMPCNT=$$TOTAL^HMPEF("^USR(8930)")
"RTN","HMPEASU",10,0)
 I PRV=0 S PRV=.9
"RTN","HMPEASU",11,0)
 I $L(HMPID) D CLS1(HMPID) Q
"RTN","HMPEASU",12,0)
 F  S PRV=$O(^USR(8930,PRV)) Q:PRV'>0  D CLS1(PRV) I HMPMAX,HMPI'<HMPMAX Q
"RTN","HMPEASU",13,0)
 I PRV'>0 S HMPFINI=1
"RTN","HMPEASU",14,0)
 Q
"RTN","HMPEASU",15,0)
 ;
"RTN","HMPEASU",16,0)
CLS1(IEN) ;
"RTN","HMPEASU",17,0)
 N $ES,$ET,ERRMSG
"RTN","HMPEASU",18,0)
 S ERRMSG=$$ERRMSG^HMPEF("User Class",IEN)
"RTN","HMPEASU",19,0)
 S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPEASU",20,0)
 N HMPV,FLDS,X,Y,INREC
"RTN","HMPEASU",21,0)
 K HMPV S FLDS=".01:.05;1*"
"RTN","HMPEASU",22,0)
 D GETS^DIQ(8930,IEN_",",FLDS,"IEN","HMPV")
"RTN","HMPEASU",23,0)
 S Y=$NA(HMPV(8930,IEN_","))
"RTN","HMPEASU",24,0)
 S INREC("name")=$G(@Y@(.01,"E"))
"RTN","HMPEASU",25,0)
 S INREC("localId")=IEN,INREC("uid")=$$SETUID^HMPUTILS("asu-class",,IEN)
"RTN","HMPEASU",26,0)
 S INREC("abbreviation")=$G(@Y@(.02,"E")),INREC("active")=$S($G(@Y@(.03,"I"))=1:"true",1:"false")
"RTN","HMPEASU",27,0)
 S INREC("displayName")=$G(@Y@(.04,"E"))
"RTN","HMPEASU",28,0)
 I $D(HMPV("8930.01")) D
"RTN","HMPEASU",29,0)
 . N IEN2,ID,CNT
"RTN","HMPEASU",30,0)
 . S IEN2="",CNT=0
"RTN","HMPEASU",31,0)
 . F  S IEN2=$O(HMPV(8930.01,IEN2)) Q:IEN2=""  D
"RTN","HMPEASU",32,0)
 . . S CNT=CNT+1,INREC("subClass",CNT,"name")=HMPV("8930.01",IEN2,".01","E")
"RTN","HMPEASU",33,0)
 . . S ID=HMPV(8930.01,IEN2,.01,"I"),INREC("subClass",CNT,"uid")=$$SETUID^HMPUTILS("asu-class",,ID)
"RTN","HMPEASU",34,0)
 D ADD^HMPEF("INREC") S HMPLAST=IEN
"RTN","HMPEASU",35,0)
 Q
"RTN","HMPEASU",36,0)
 ;
"RTN","HMPEASU",37,0)
RULE ; -- USR Authorization/Subscription file #8930.1
"RTN","HMPEASU",38,0)
 N PRV S PRV=+$G(HMPLAST)
"RTN","HMPEASU",39,0)
 S HMPCNT=$$TOTAL^HMPEF("^USR(8930.1)")
"RTN","HMPEASU",40,0)
 I PRV=0 S PRV=.9
"RTN","HMPEASU",41,0)
 I $L(HMPID) D RULE1(HMPID) Q
"RTN","HMPEASU",42,0)
 F  S PRV=$O(^USR(8930.1,PRV)) Q:PRV'>0  D RULE1(PRV) I HMPMAX,HMPI'<HMPMAX Q
"RTN","HMPEASU",43,0)
 I PRV'>0 S HMPFINI=1
"RTN","HMPEASU",44,0)
 Q
"RTN","HMPEASU",45,0)
 ;
"RTN","HMPEASU",46,0)
RULE1(IEN) ;
"RTN","HMPEASU",47,0)
 N $ES,$ET,ERRMSG
"RTN","HMPEASU",48,0)
 S ERRMSG=$$ERRMSG^HMPEF("ASU Rule",IEN)
"RTN","HMPEASU",49,0)
 S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPEASU",50,0)
 N HMPV,FLDS,X,Y,INREC,DESC
"RTN","HMPEASU",51,0)
 K HMPV S FLDS=".01:1"
"RTN","HMPEASU",52,0)
 D GETS^DIQ(8930.1,IEN_",",FLDS,"IEN","HMPV")
"RTN","HMPEASU",53,0)
 S Y=$NA(HMPV(8930.1,IEN_","))
"RTN","HMPEASU",54,0)
 S INREC("localId")=IEN,INREC("uid")=$$SETUID^HMPUTILS("asu-rule",,IEN)
"RTN","HMPEASU",55,0)
 S X=$G(@Y@(.01,"I")) S:X INREC("docDefUid")=$$SETUID^HMPUTILS("doc-def",,X),INREC("docDefName")=$G(@Y@(.01,"E"))
"RTN","HMPEASU",56,0)
 S X=$G(@Y@(.02,"I")) S:X INREC("statusUid")=$$SETUID^HMPUTILS("doc-status",,X),INREC("statusName")=$G(@Y@(.02,"E"))
"RTN","HMPEASU",57,0)
 S X=$G(@Y@(.03,"I")) S:X INREC("actionUid")=$$SETUID^HMPUTILS("doc-action",,X),INREC("actionName")=$G(@Y@(.03,"E"))
"RTN","HMPEASU",58,0)
 S X=$G(@Y@(.04,"I")) S:X INREC("userClassUid")=$$SETUID^HMPUTILS("asu-class",,X),INREC("userClassName")=$G(@Y@(.04,"E"))
"RTN","HMPEASU",59,0)
 S X=$G(@Y@(.05,"I")),INREC("isAnd")=$S(X="&":"true",1:"false") ;,INREC("isOr")=$S(X="!":"true",1:"false")
"RTN","HMPEASU",60,0)
 S X=$G(@Y@(.06,"I")) S:X INREC("userRoleUid")=$$SETUID^HMPUTILS("asu-role",,X),INREC("userRoleName")=$G(@Y@(.06,"E"))
"RTN","HMPEASU",61,0)
 I $D(@Y@(1)) D
"RTN","HMPEASU",62,0)
 . N I S I=0 F  S I=$O(@Y@(1,I)) Q:I<1  S DESC(I)=@Y@(1,I)
"RTN","HMPEASU",63,0)
 . S INREC("description")=$$STRING^HMPD(.DESC)
"RTN","HMPEASU",64,0)
 D ADD^HMPEF("INREC") S HMPLAST=IEN
"RTN","HMPEASU",65,0)
 Q
"RTN","HMPEASU",66,0)
 ;
"RTN","HMPEASU",67,0)
DEF ; -- TIU Document Definition file #8925.1
"RTN","HMPEASU",68,0)
 N PRV S PRV=+$G(HMPLAST)
"RTN","HMPEASU",69,0)
 S HMPCNT=$$TOTAL^HMPEF("^TIU(8925.1)")
"RTN","HMPEASU",70,0)
 I PRV=0 S PRV=.9
"RTN","HMPEASU",71,0)
 I $L(HMPID) D DEF1(HMPID) Q
"RTN","HMPEASU",72,0)
 F  S PRV=$O(^TIU(8925.1,PRV)) Q:PRV'>0  D DEF1(PRV) I HMPMAX,HMPI'<HMPMAX Q  ;ICR 2700 DE2818 ASF 11/21/15
"RTN","HMPEASU",73,0)
 I PRV'>0 S HMPFINI=1
"RTN","HMPEASU",74,0)
 Q
"RTN","HMPEASU",75,0)
 ;
"RTN","HMPEASU",76,0)
DEF1(IEN) ;
"RTN","HMPEASU",77,0)
 N $ES,$ET,ERRMSG
"RTN","HMPEASU",78,0)
 S ERRMSG=$$ERRMSG^HMPEF("TIU Doc Def",IEN)
"RTN","HMPEASU",79,0)
 S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPEASU",80,0)
 N HMPV,FLDS,X,Y,I,INREC
"RTN","HMPEASU",81,0)
 K HMPV S FLDS=".01:.14;1501"
"RTN","HMPEASU",82,0)
 D GETS^DIQ(8925.1,IEN_",",FLDS,"IEN","HMPV")
"RTN","HMPEASU",83,0)
 S Y=$NA(HMPV(8925.1,IEN_","))
"RTN","HMPEASU",84,0)
 S INREC("name")=$G(@Y@(.01,"E"))
"RTN","HMPEASU",85,0)
 S INREC("uid")=$$SETUID^HMPUTILS("doc-def",,IEN)
"RTN","HMPEASU",86,0)
 S INREC("abbreviation")=$G(@Y@(.02,"E"))
"RTN","HMPEASU",87,0)
 S INREC("displayName")=$G(@Y@(.03,"E"))
"RTN","HMPEASU",88,0)
 S INREC("typeName")=$G(@Y@(.04,"E"))
"RTN","HMPEASU",89,0)
 S INREC("typeUid")=$$SETUID^HMPUTILS("doc-type",,$G(@Y@(.04,"I")))
"RTN","HMPEASU",90,0)
 S X=$G(@Y@(.05,"I")) I X D
"RTN","HMPEASU",91,0)
 . S INREC("ownerUid")=$$SETUID^HMPUTILS("user",,X)
"RTN","HMPEASU",92,0)
 . S INREC("ownerName")=$G(@Y@(.05,"E"))
"RTN","HMPEASU",93,0)
 S X=$G(@Y@(.06,"I")) S:X INREC("classOwner")=$$SETUID^HMPUTILS("asu-class",,X)
"RTN","HMPEASU",94,0)
 S X=$G(@Y@(.07,"I")) I X D
"RTN","HMPEASU",95,0)
 . S INREC("statusUid")=$$SETUID^HMPUTILS("doc-status",,X)
"RTN","HMPEASU",96,0)
 . S INREC("statusName")=$G(@Y@(.07,"E"))
"RTN","HMPEASU",97,0)
 S X=$G(@Y@(.1,"I")) S:X INREC("shared")="true"
"RTN","HMPEASU",98,0)
 S X=$G(@Y@(.13,"I")) S:X INREC("nationalStandard")="true"
"RTN","HMPEASU",99,0)
 S X=$G(@Y@(.14,"I")) S:X INREC("postingCode")=$$SETUID^HMPUTILS("doc-posting",,X)
"RTN","HMPEASU",100,0)
 S I=0 F  S I=$O(^TIU(8925.1,IEN,10,I)) Q:I<1  S X=+$G(^(I,0)) D  ;ICR 2700 DE2818 ASF 11/21/15
"RTN","HMPEASU",101,0)
 . S INREC("item",I,"uid")=$$SETUID^HMPUTILS("doc-def",,X)
"RTN","HMPEASU",102,0)
 . S INREC("item",I,"name")=$$GET1^DIQ(8925.1,X_",",.01)
"RTN","HMPEASU",103,0)
 ; national title info
"RTN","HMPEASU",104,0)
 S X=$G(@Y@(1501,"I")) I X D  ;National Title + attributes
"RTN","HMPEASU",105,0)
 . N IENS,TIU,DA,FNUM,NAME
"RTN","HMPEASU",106,0)
 . S IENS=X_"," D GETS^DIQ(8926.1,IENS,"*","IE","TIU")
"RTN","HMPEASU",107,0)
 . S INREC("nationalTitle","vuid")="urn:va:vuid:"_$G(TIU(8926.1,IENS,99.99,"E"))
"RTN","HMPEASU",108,0)
 . S INREC("nationalTitle","name")=$G(TIU(8926.1,IENS,.01,"E"))
"RTN","HMPEASU",109,0)
 . F I=".04^Subject^2",".05^Role^3",".06^Setting^4",".07^Service^5",".08^Type^6" D
"RTN","HMPEASU",110,0)
 .. S DA=+$G(TIU(8926.1,IENS,+I,"I")) Q:DA'>0
"RTN","HMPEASU",111,0)
 .. S FNUM="8926."_+$P(I,U,3),NAME=$$LOW^XLFSTR($P(I,U,2))
"RTN","HMPEASU",112,0)
 .. S INREC("nationalTitle"_$P(I,U,2),"vuid")="urn:va:vuid:"_$$VUID^HMPD(DA,FNUM)
"RTN","HMPEASU",113,0)
 .. S INREC("nationalTitle"_$P(I,U,2),"name")=$G(TIU(8926.1,IENS,+I,"E"))
"RTN","HMPEASU",114,0)
 ;
"RTN","HMPEASU",115,0)
 D ADD^HMPEF("INREC") S HMPLAST=IEN
"RTN","HMPEASU",116,0)
 Q
"RTN","HMPEF")
0^80^B86254671
"RTN","HMPEF",1,0)
HMPEF ;SLC/MKB,ASMR/RRB,JD,SRG - Serve VistA operational data as JSON via RPC;Nov 24, 2015 16:00:27
"RTN","HMPEF",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPEF",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEF",4,0)
 ;
"RTN","HMPEF",5,0)
 ; DE2818 - SQA findings. Newed L42 and L44 in LOC+1.  RRB - 10/30/2015
"RTN","HMPEF",6,0)
 ;
"RTN","HMPEF",7,0)
 ; ^SC references - IA 10040, HOSPITAL LOCATION file (#44)
"RTN","HMPEF",8,0)
 ; ^DIC(42) references - IA #10039, WARD LOCATION file
"RTN","HMPEF",9,0)
 Q
"RTN","HMPEF",10,0)
 ;
"RTN","HMPEF",11,0)
 ; The following variables can not be newed or killed because they are used
"RTN","HMPEF",12,0)
 ; from upstream by scope (NOT as input parameters):
"RTN","HMPEF",13,0)
 ;      HMPBATCH, HMPFADOM, HMPFLDON, HMPFZTSK, HMPMETA, HMPSTMP, LEX("LIST", and ZTQUEUED.
"RTN","HMPEF",14,0)
GET(HMP,FILTER) ; -- Return search results as JSON in @HMP@(n)
"RTN","HMPEF",15,0)
 ; RPC = HMP GET OPERATIONAL DATA
"RTN","HMPEF",16,0)
 ; where FILTER("domain")  = name of desired data type (see $$TAG)
"RTN","HMPEF",17,0)
 ;       FILTER("limit")   = maximum number of items to return [opt]
"RTN","HMPEF",18,0)
 ;       FILTER("start")   = ien to start search from          [opt]
"RTN","HMPEF",19,0)
 ;       FILTER("id")      = single item id to return          [opt]
"RTN","HMPEF",20,0)
 ;
"RTN","HMPEF",21,0)
 ; HMPLAST - last record processed
"RTN","HMPEF",22,0)
 N HMPSYS,TYPE,HMPMAX,HMPI,HMPID,HMPERR,HMPTN,HMPLAST,HMPCNT,HMPFINI
"RTN","HMPEF",23,0)
 S HMP=$NA(^TMP("HMP",$J)),HMPI=0 K @HMP
"RTN","HMPEF",24,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPEF",25,0)
 ;
"RTN","HMPEF",26,0)
 ; parse & validate input parameters
"RTN","HMPEF",27,0)
 S TYPE=$P($G(FILTER("domain")),"#") ;,TYPE=$$LOW^XLFSTR(TYPE)
"RTN","HMPEF",28,0)
 S HMPMAX=+$G(FILTER("limit")),HMPCNT=0
"RTN","HMPEF",29,0)
 S HMPLAST=+$G(FILTER("start"))
"RTN","HMPEF",30,0)
 S HMPID=$G(FILTER("id"))
"RTN","HMPEF",31,0)
 ;
"RTN","HMPEF",32,0)
 K ^TMP($J,"HMP ERROR")
"RTN","HMPEF",33,0)
 ;
"RTN","HMPEF",34,0)
 ; extract data
"RTN","HMPEF",35,0)
 I TYPE="" S HMPERR="Missing or invalid reference type" G GTQ
"RTN","HMPEF",36,0)
 ; *** convert code below to use $$HANDLE^XUSRB4 for zero node in ^XTMP, IA 4770***
"RTN","HMPEF",37,0)
 I $D(ZTQUEUED) S HMP=$NA(^XTMP(HMPBATCH,HMPFZTSK,FILTER("domain"))) K @HMP
"RTN","HMPEF",38,0)
 I TYPE="new",$L($T(EN^HMPEFX)) D EN^HMPEFX(HMPID,HMPMAX) Q
"RTN","HMPEF",39,0)
 S HMPTN=$$TAG(TYPE) Q:'$L(HMPTN)  ;D ERR(2) Q
"RTN","HMPEF",40,0)
 D @HMPTN
"RTN","HMPEF",41,0)
 ;
"RTN","HMPEF",42,0)
GTQ ; add item count and terminating characters
"RTN","HMPEF",43,0)
 N ERROR I $D(^TMP($J,"HMP ERROR"))>0 D BUILDERR(.ERROR) S ERROR(1)=ERROR(1)_"}"
"RTN","HMPEF",44,0)
 I +$G(FILTER("noHead"))=1 D  Q
"RTN","HMPEF",45,0)
 .S @HMP@("total")=+$G(HMPI)
"RTN","HMPEF",46,0)
 .S @HMP@("last")=HMPLAST
"RTN","HMPEF",47,0)
 .S @HMP@("finished")=+$G(HMPFINI)
"RTN","HMPEF",48,0)
 .I $L($G(ERROR(1)))>1 S @HMP@("error")=ERROR(1)
"RTN","HMPEF",49,0)
 I '$D(@HMP)!'$G(HMPI) D  Q
"RTN","HMPEF",50,0)
 .I '$D(^TMP($J,"HMP ERROR")) S @HMP@(1)="""data"":{""totalItems"":0,""items"":[]}}" Q
"RTN","HMPEF",51,0)
 .S @HMP@(1)="""data"":{""totalItems"":0,""items"":[]},"
"RTN","HMPEF",52,0)
 .M @HMP@(2)=ERROR
"RTN","HMPEF",53,0)
 ;
"RTN","HMPEF",54,0)
 I $D(@HMP),$G(HMPI) D
"RTN","HMPEF",55,0)
 . S @HMP@(.5)="{""apiVersion"":""1.01"",""data"":{""updated"":"""_$$HL7NOW_""",""currentItemCount"":"_HMPI
"RTN","HMPEF",56,0)
 . S:$G(HMPCNT) @HMP@(.5)=@HMP@(.5)_",""totalItems"":"_HMPCNT
"RTN","HMPEF",57,0)
 . S:$G(HMPLAST) @HMP@(.5)=@HMP@(.5)_",""last"":"_HMPLAST
"RTN","HMPEF",58,0)
 . S @HMP@(.5)=@HMP@(.5)_",""items"":["
"RTN","HMPEF",59,0)
 . S HMPI=HMPI+1,@HMP@(HMPI)=$S($D(^TMP($J,"HMP ERROR"))>0:"]}",1:"]}}")
"RTN","HMPEF",60,0)
 I $D(^TMP($J,"HMP ERROR"))>0 S HMPI=HMPI+1,@HMP@(HMPI,.3)="," M @HMP@(HMPI)=ERROR ;S HMPI=HMPI+1,@HMP@(HMPI)="}"
"RTN","HMPEF",61,0)
 K ^TMP($J,"HMP ERROR")
"RTN","HMPEF",62,0)
 Q
"RTN","HMPEF",63,0)
 ;
"RTN","HMPEF",64,0)
BUILDERR(RESULT) ;  error array
"RTN","HMPEF",65,0)
 N CNT,COUNT,DOM,DOMCNT,ERRMSG,ERROR,FIELD,MESSAGE,MSG,MSGCNT,T,TEMP
"RTN","HMPEF",66,0)
 S COUNT=$G(^TMP($J,"HMP ERROR","# of Errors"))
"RTN","HMPEF",67,0)
 S MESSAGE="A mumps error occurred when extracting data. A total of "_COUNT_" occurred.\n\r"
"RTN","HMPEF",68,0)
 S CNT=1,ERROR("error","message","\",CNT)="A mumps error occurred when extracting patient data. A total of "_COUNT_" occurred.\n\r"
"RTN","HMPEF",69,0)
 S MSGCNT=0 F  S MSGCNT=$O(^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT)) Q:MSGCNT'>0  D
"RTN","HMPEF",70,0)
 . S CNT=CNT+1,MESSAGE=MESSAGE_$G(^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT))_"\n\r"
"RTN","HMPEF",71,0)
 S RESULT(1)="""error"":{""message"":"_""""_MESSAGE_""""_"}"
"RTN","HMPEF",72,0)
 Q
"RTN","HMPEF",73,0)
 ;
"RTN","HMPEF",74,0)
TAG(X) ; -- linetag for reference domain X
"RTN","HMPEF",75,0)
 N Y S Y="HMP",X=$G(X)
"RTN","HMPEF",76,0)
 ; default = HMP Object (various types)
"RTN","HMPEF",77,0)
 I X="location"      S Y="LOC"
"RTN","HMPEF",78,0)
 I X="pt-select"     S Y="PAT"
"RTN","HMPEF",79,0)
 I X="person"        S Y="NP"
"RTN","HMPEF",80,0)
 I X="user"          S Y="NP"
"RTN","HMPEF",81,0)
 I X="labgroup"      S Y="LABGRP"
"RTN","HMPEF",82,0)
 I X="labpanel"      S Y="LABPNL"
"RTN","HMPEF",83,0)
 I X["orderable"     S Y="OI"
"RTN","HMPEF",84,0)
 I X["schedule"      S Y="SCHEDULE"
"RTN","HMPEF",85,0)
 I X["route"         S Y="ROUTE"
"RTN","HMPEF",86,0)
 I X["quick"         S Y="QO"
"RTN","HMPEF",87,0)
 I X="displayGroup"  S Y="ODG"
"RTN","HMPEF",88,0)
 I X["asu-"          S Y="ASU"
"RTN","HMPEF",89,0)
 I X["doc-"          S Y="ASU"
"RTN","HMPEF",90,0)
 I X="immunization"    S Y="IMMTYPE"
"RTN","HMPEF",91,0)
 I X="allergy-list"         S Y="ALLTYPE"
"RTN","HMPEF",92,0)
 ;I X="problem-list"        S Y="PROB"
"RTN","HMPEF",93,0)
 I X="sign-symptom"   S Y="SIGNS"
"RTN","HMPEF",94,0)
 I X="vital-type"      S Y="VTYPE"
"RTN","HMPEF",95,0)
 I X="vital-qualifier"  S Y="VQUAL"
"RTN","HMPEF",96,0)
 I X="vital-category"   S Y="VCAT"
"RTN","HMPEF",97,0)
 I X["clioterm"      S Y="MDTERMS"
"RTN","HMPEF",98,0)
 Q Y
"RTN","HMPEF",99,0)
 ;
"RTN","HMPEF",100,0)
ERR(X,VAL) ;  return error message
"RTN","HMPEF",101,0)
 N MSG  S MSG="Error"
"RTN","HMPEF",102,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","HMPEF",103,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","HMPEF",104,0)
 I X=99 S MSG="Unknown request"
"RTN","HMPEF",105,0)
 Q MSG
"RTN","HMPEF",106,0)
 ;
"RTN","HMPEF",107,0)
ERRMSG(X,VAL) ; -- return error message
"RTN","HMPEF",108,0)
 N Y S Y="A MUMPS error occurred while extracting "_X_" data"
"RTN","HMPEF",109,0)
 S:$G(VAL) Y=Y_", ien "_VAL
"RTN","HMPEF",110,0)
 Q Y
"RTN","HMPEF",111,0)
 ;
"RTN","HMPEF",112,0)
ERRQ ; -- Quit on error
"RTN","HMPEF",113,0)
 Q
"RTN","HMPEF",114,0)
 ;
"RTN","HMPEF",115,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","HMPEF",116,0)
 Q $P($$FMTHL7^XLFDT($$NOW^XLFDT),"-")
"RTN","HMPEF",117,0)
 ;
"RTN","HMPEF",118,0)
ALL() ;
"RTN","HMPEF",119,0)
 Q "location;patient;person;orderable;schedule;route;quick;displayGroup;asu-class;asu-rule;asu-role;doc-action;doc-status;clioterm;immunization;allergy-list;sign-symptom;vital-type;vital-qualifier;vital-category"
"RTN","HMPEF",120,0)
 ;
"RTN","HMPEF",121,0)
ADD(ITEM) ; -- add ITEM to @HMP@(HMPI)
"RTN","HMPEF",122,0)
 N HMPY,HMPERR
"RTN","HMPEF",123,0)
 I $G(HMPSTMP)]"" S @ITEM@("stampTime")=HMPSTMP ; US6734
"RTN","HMPEF",124,0)
 E  S @ITEM@("stampTime")=$$EN^HMPSTMP("NOW") ; DE2616 - must add stampTime to receive OPD freshness update from ADHOC^HMPUTIL1
"RTN","HMPEF",125,0)
 D ENCODE^HMPJSON(ITEM,"HMPY","HMPERR")
"RTN","HMPEF",126,0)
 I $D(HMPERR) D  ;return ERRor instead of ITEM
"RTN","HMPEF",127,0)
 . N HMPTMP,HMPTXT,HMPITM
"RTN","HMPEF",128,0)
 . M HMPITM=@ITEM K HMPY
"RTN","HMPEF",129,0)
 . S HMPTXT(1)="Problem encoding json output."
"RTN","HMPEF",130,0)
 . D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.HMPITM)
"RTN","HMPEF",131,0)
 . K HMPERR D ENCODE^HMPJSON("HMPTMP","HMPY","HMPERR")
"RTN","HMPEF",132,0)
 I $D(HMPY) D
"RTN","HMPEF",133,0)
 . Q:'$D(@ITEM@("uid"))
"RTN","HMPEF",134,0)
 . I $G(HMPMETA) D ADD^HMPMETA($P(HMPFADOM,"#"),@ITEM@("uid"),HMPSTMP) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPEF",135,0)
 . I HMPI D COMMA(HMPI)
"RTN","HMPEF",136,0)
 . ;I HMPI,'$G(FILTER("noHead")) D COMMA(HMPI)
"RTN","HMPEF",137,0)
 . S HMPI=HMPI+1 M @HMP@(HMPI)=HMPY
"RTN","HMPEF",138,0)
 Q
"RTN","HMPEF",139,0)
 ;
"RTN","HMPEF",140,0)
COMMA(I) ; -- add comma between items
"RTN","HMPEF",141,0)
 I $D(ZTQUEUED) Q
"RTN","HMPEF",142,0)
 N J S J=+$O(@HMP@(I,"A"),-1) ;last sub-node for item I
"RTN","HMPEF",143,0)
 S J=J+1,@HMP@(I,J)=","
"RTN","HMPEF",144,0)
 Q
"RTN","HMPEF",145,0)
 ;
"RTN","HMPEF",146,0)
TOTAL(ROOT) ; -- Return total #items in @ROOT@(n)
"RTN","HMPEF",147,0)
 Q $P($G(@ROOT@(0)),U,4)
"RTN","HMPEF",148,0)
 ;
"RTN","HMPEF",149,0)
TEST(TYPE,ID,IN) ; -- test GET, write results to screen
"RTN","HMPEF",150,0)
 N OUT,IDX
"RTN","HMPEF",151,0)
 S U="^"
"RTN","HMPEF",152,0)
 S IN("domain")=$G(TYPE)
"RTN","HMPEF",153,0)
 S:$D(ID) IN("id")=ID
"RTN","HMPEF",154,0)
 D GET(.OUT,.IN)
"RTN","HMPEF",155,0)
 ;
"RTN","HMPEF",156,0)
 S IDX=OUT
"RTN","HMPEF",157,0)
 F  S IDX=$Q(@IDX) Q:IDX'?1"^TMP(""HMP"","1.N.E  Q:+$P(IDX,",",2)'=$J  W !,@IDX
"RTN","HMPEF",158,0)
 Q
"RTN","HMPEF",159,0)
 ;
"RTN","HMPEF",160,0)
 ; ** Reference file searches, using FILTER("parameter")
"RTN","HMPEF",161,0)
 ;
"RTN","HMPEF",162,0)
PAT ;Patients
"RTN","HMPEF",163,0)
 N DFN,PAT,HMPPOPD
"RTN","HMPEF",164,0)
 S HMPPOPD=1
"RTN","HMPEF",165,0)
 S HMPCNT=$$TOTAL("^DPT")
"RTN","HMPEF",166,0)
 I $G(HMPID) S DFN=+HMPID D LKUP^HMPDJ00 Q
"RTN","HMPEF",167,0)
 N ERRMSG S ERRMSG="A mumps error occurred while extracting patients."
"RTN","HMPEF",168,0)
 S DFN=+$G(HMPLAST) F  S DFN=$O(^DPT(DFN)) Q:DFN<1  D  I HMPMAX>0,HMPI'<HMPMAX Q
"RTN","HMPEF",169,0)
 . N $ES,$ET
"RTN","HMPEF",170,0)
 . S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPEF",171,0)
 . I $P($G(^DPT(DFN,0)),U)="" Q
"RTN","HMPEF",172,0)
 . S ERRMSG=$$ERRMSG("Patient",DFN)
"RTN","HMPEF",173,0)
 . K PAT D LKUP^HMPDJ00
"RTN","HMPEF",174,0)
 . S HMPLAST=DFN
"RTN","HMPEF",175,0)
 I DFN<1 S HMPFINI=1
"RTN","HMPEF",176,0)
 Q
"RTN","HMPEF",177,0)
LOC ; Hospital Location (#44) and Ward Location (#42)  /DE2818
"RTN","HMPEF",178,0)
 D LOC^HMPEF1(.HMPFINI,.HMPFLDON,$G(HMPMETA))
"RTN","HMPEF",179,0)
 Q
"RTN","HMPEF",180,0)
 ;
"RTN","HMPEF",181,0)
ACTWRD(IEN) ;Boolean TRUE if active WARD LOCATION
"RTN","HMPEF",182,0)
 ; IEN - IEN in file 42
"RTN","HMPEF",183,0)
 S D0=IEN D WIN^DGPMDDCF Q 'X  ; SRG: need DBIA
"RTN","HMPEF",184,0)
 ;
"RTN","HMPEF",185,0)
ACTLOC(LOC) ;Boolean TRUE if active hospital location
"RTN","HMPEF",186,0)
 ; ^SC - IA 10040
"RTN","HMPEF",187,0)
 N D0,X I +$G(^SC(LOC,"OOS")) Q 0                ; screen out OOS entry
"RTN","HMPEF",188,0)
 S D0=+$G(^SC(LOC,42)) I D0 D WIN^DGPMDDCF Q 'X  ; chk out of svc wards
"RTN","HMPEF",189,0)
 S X=$G(^SC(LOC,"I")) I +X=0 Q 1                 ; no inactivate date
"RTN","HMPEF",190,0)
 I DT>$P(X,U)&($P(X,U,2)=""!(DT<$P(X,U,2))) Q 0  ; chk reactivate date
"RTN","HMPEF",191,0)
 Q 1                                             ; must still be active
"RTN","HMPEF",192,0)
 ;
"RTN","HMPEF",193,0)
NP ;New Persons
"RTN","HMPEF",194,0)
 D NP^HMPEF1
"RTN","HMPEF",195,0)
 Q
"RTN","HMPEF",196,0)
 ;
"RTN","HMPEF",197,0)
KEYS(IEN) ;user's keys
"RTN","HMPEF",198,0)
 N HMPKEY,IENS,X,CNT
"RTN","HMPEF",199,0)
 D GETS^DIQ(200,IEN_",","51*","IE","HMPKEY") S CNT=0
"RTN","HMPEF",200,0)
 S IENS="" F  S IENS=$O(HMPKEY(200.051,IENS)) Q:IENS=""  D
"RTN","HMPEF",201,0)
 . S X=$G(HMPKEY(200.051,IENS,.01,"E")),CNT=CNT+1
"RTN","HMPEF",202,0)
 . S USER("vistaKeys",CNT,"name")=X
"RTN","HMPEF",203,0)
 . S X=$G(HMPKEY(200.051,IENS,3,"I"))
"RTN","HMPEF",204,0)
 . S:X USER("vistaKeys",CNT,"reviewDate")=$$JSONDT^HMPUTILS(X)
"RTN","HMPEF",205,0)
 Q
"RTN","HMPEF",206,0)
 ;
"RTN","HMPEF",207,0)
ODG ;
"RTN","HMPEF",208,0)
 D ADDODG^HMPCORD4
"RTN","HMPEF",209,0)
 Q
"RTN","HMPEF",210,0)
 ;
"RTN","HMPEF",211,0)
OI ;
"RTN","HMPEF",212,0)
 D OI^HMPCORD4("PS^RAP^LRT")
"RTN","HMPEF",213,0)
 Q
"RTN","HMPEF",214,0)
 ;
"RTN","HMPEF",215,0)
PROB ;get problem list OPD store
"RTN","HMPEF",216,0)
 D PROB^HMPEF1(.HMPFINI,LEX)
"RTN","HMPEF",217,0)
 Q
"RTN","HMPEF",218,0)
 ;
"RTN","HMPEF",219,0)
QO ;
"RTN","HMPEF",220,0)
 D QO^HMPCORD4
"RTN","HMPEF",221,0)
 Q
"RTN","HMPEF",222,0)
 ;
"RTN","HMPEF",223,0)
SCHEDULE ;
"RTN","HMPEF",224,0)
 N RESULT
"RTN","HMPEF",225,0)
 D ADDSCH^HMPCORD4
"RTN","HMPEF",226,0)
 Q
"RTN","HMPEF",227,0)
 ;
"RTN","HMPEF",228,0)
ROUTE ;
"RTN","HMPEF",229,0)
 N RESULT
"RTN","HMPEF",230,0)
 D ADDROUTE^HMPCORD4
"RTN","HMPEF",231,0)
 Q
"RTN","HMPEF",232,0)
 ;
"RTN","HMPEF",233,0)
HMP ; HMP Objects
"RTN","HMPEF",234,0)
 N IEN
"RTN","HMPEF",235,0)
 S HMPCNT=$$TOTAL("^HMP(800000.11)")
"RTN","HMPEF",236,0)
 I $L(HMPID) D  Q
"RTN","HMPEF",237,0)
 . I HMPID=+HMPID S IEN=HMPID
"RTN","HMPEF",238,0)
 . E  S IEN=+$O(^HMP(800000.11,"B",HMPID,0))
"RTN","HMPEF",239,0)
 . S ERRMSG=$$ERRMSG("HMP Object",IEN)
"RTN","HMPEF",240,0)
 . D:IEN HMP1^HMPDJ02(800000.11,IEN)
"RTN","HMPEF",241,0)
 S IEN=+$G(HMPLAST) F  S IEN=$O(^HMP(800000.11,"C",TYPE,IEN)) Q:IEN<1  D  I HMPMAX>0,HMPI'<HMPMAX Q
"RTN","HMPEF",242,0)
 . S ERRMSG=$$ERRMSG("HMP Object",IEN)
"RTN","HMPEF",243,0)
 . D HMP1^HMPDJ02(800000.11,IEN) S HMPLAST=IEN
"RTN","HMPEF",244,0)
 I IEN<1 S HMPFINI=1
"RTN","HMPEF",245,0)
 Q
"RTN","HMPEF",246,0)
 ;
"RTN","HMPEF",247,0)
SOURCE(SRC) ;
"RTN","HMPEF",248,0)
 N X S X=""
"RTN","HMPEF",249,0)
 I SRC["SC("        S X="clinic"
"RTN","HMPEF",250,0)
 I SRC["DPT("       S X="patient"
"RTN","HMPEF",251,0)
 I SRC["DIC(42"     S X="ward"
"RTN","HMPEF",252,0)
 I SRC["SCTM"       S X="pcmm"
"RTN","HMPEF",253,0)
 I SRC["OR(100.21"  S X="cprs"
"RTN","HMPEF",254,0)
 I SRC["DIC(45.7"   S X="specialty"
"RTN","HMPEF",255,0)
 I SRC["VA(200"     S X="provider"
"RTN","HMPEF",256,0)
 I SRC["PXRM(810.4" S X="pxrm"
"RTN","HMPEF",257,0)
 Q X
"RTN","HMPEF",258,0)
 ;
"RTN","HMPEF",259,0)
ASU ; ASU files
"RTN","HMPEF",260,0)
 N X,RTN S X=$P($G(TYPE),"-",2)
"RTN","HMPEF",261,0)
 S RTN=$$UP^XLFSTR(X)_"^HMPEASU"
"RTN","HMPEF",262,0)
 I X'="",$L($T(@RTN)) D @RTN
"RTN","HMPEF",263,0)
 Q
"RTN","HMPEF",264,0)
 ;
"RTN","HMPEF",265,0)
MDTERMS ; CP Terminology
"RTN","HMPEF",266,0)
 D:$L($T(TERM^HMPMDUTL)) TERM^HMPMDUTL
"RTN","HMPEF",267,0)
 Q
"RTN","HMPEF",268,0)
LABGRP ;
"RTN","HMPEF",269,0)
 D SHWCUMR2^HMPELAB
"RTN","HMPEF",270,0)
 Q
"RTN","HMPEF",271,0)
LABPNL ;
"RTN","HMPEF",272,0)
 D SHWORPNL^HMPELAB
"RTN","HMPEF",273,0)
 Q
"RTN","HMPEF",274,0)
 ;
"RTN","HMPEF",275,0)
 ;DE2818, changed reference to ^VA(201) to a FileMan call
"RTN","HMPEF",276,0)
ISPROXY(IEN) ; Boolean function, is NEW PERSON entry an APPLICATION PROXY?
"RTN","HMPEF",277,0)
 N APP,HMPMSG,HMPUCLS,T,V
"RTN","HMPEF",278,0)
 ; APP - returned value
"RTN","HMPEF",279,0)
 ; HMPUCLS - user class array
"RTN","HMPEF",280,0)
 ; HMPMSG - FileMan message array
"RTN","HMPEF",281,0)
 ;
"RTN","HMPEF",282,0)
 D GETS^DIQ(200,IEN_",","9.5*","E","HMPUCLS","HMPMSG")  ; get external format
"RTN","HMPEF",283,0)
 S APP=0,T="APPLICATION PROXY",V="HMPUCLS"
"RTN","HMPEF",284,0)
 ; search returned array for value equal to T
"RTN","HMPEF",285,0)
 F  S V=$Q(@V) Q:V=""!APP  S:@V=T APP=1
"RTN","HMPEF",286,0)
 Q APP
"RTN","HMPEF",287,0)
 ;
"RTN","HMPEF",288,0)
IMMTYPE ;immunization types
"RTN","HMPEF",289,0)
 D IMMTYPE^HMPCORD5
"RTN","HMPEF",290,0)
 Q
"RTN","HMPEF",291,0)
 ;
"RTN","HMPEF",292,0)
SIGNS ;SIGNS/SYMPTONS file
"RTN","HMPEF",293,0)
 D SIGNS^HMPCORD5
"RTN","HMPEF",294,0)
 Q
"RTN","HMPEF",295,0)
 ;
"RTN","HMPEF",296,0)
ALLTYPE ;allergy-list types
"RTN","HMPEF",297,0)
 ;BL;REMOVE FROM ODS
"RTN","HMPEF",298,0)
 ;D ALLTYPE^HMPCORD5
"RTN","HMPEF",299,0)
 Q
"RTN","HMPEF",300,0)
 ;
"RTN","HMPEF",301,0)
VTYPE ;vital types
"RTN","HMPEF",302,0)
 D VTYPE^HMPCORD5
"RTN","HMPEF",303,0)
 Q
"RTN","HMPEF",304,0)
 ;
"RTN","HMPEF",305,0)
VQUAL ;vital qualifiers
"RTN","HMPEF",306,0)
 D VQUAL^HMPCORD5
"RTN","HMPEF",307,0)
 Q
"RTN","HMPEF",308,0)
 ;
"RTN","HMPEF",309,0)
VCAT ;vital categories
"RTN","HMPEF",310,0)
 D VCAT^HMPCORD5
"RTN","HMPEF",311,0)
 Q
"RTN","HMPEF",312,0)
 ;
"RTN","HMPEF",313,0)
FILENAME ; text of filenames for search treeview
"RTN","HMPEF",314,0)
 ;;VA Allergies File
"RTN","HMPEF",315,0)
 ;;VA Allergies File (Synonyms)  SPACER ONLY - NOT DISPLAYED
"RTN","HMPEF",316,0)
 ;;National Drug File - Generic Drug Name
"RTN","HMPEF",317,0)
 ;;National Drug file - Trade Name
"RTN","HMPEF",318,0)
 ;;Local Drug File
"RTN","HMPEF",319,0)
 ;;Local Drug File (Synonyms)  SPACER ONLY - NOT DISPLAYED
"RTN","HMPEF",320,0)
 ;;Drug Ingredients File
"RTN","HMPEF",321,0)
 ;;VA Drug Class File
"RTN","HMPEF",322,0)
 ;;
"RTN","HMPEF1")
0^147^B36268404
"RTN","HMPEF1",1,0)
HMPEF1 ;SLC/MKB,ASMR/RRB,JD,SRG - Serve VistA operational data as JSON via RPC;Nov 24, 2015 13:17:46
"RTN","HMPEF1",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPEF1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEF1",4,0)
 ;
"RTN","HMPEF1",5,0)
 ; HMPEF (cont'd)
"RTN","HMPEF1",6,0)
 ;
"RTN","HMPEF1",7,0)
LOC(HMPFINI,HMPFLDON,HMPMETA) ; Hospital Location (#44) and Ward Location (#42)  /DE2818
"RTN","HMPEF1",8,0)
 N L42,L44
"RTN","HMPEF1",9,0)
 ;BL;DE2188 This line tag has to make two complete passes through 
"RTN","HMPEF1",10,0)
 ;the two FOR loops. In order to do this it is necessary to clearly 
"RTN","HMPEF1",11,0)
 ;define the loop we are doing. The file 44 and 
"RTN","HMPEF1",12,0)
 ;file 42 loops cannot be done at the same time
"RTN","HMPEF1",13,0)
 ;
"RTN","HMPEF1",14,0)
 ; Need variables to clearly define which pass we are on.
"RTN","HMPEF1",15,0)
 ; 
"RTN","HMPEF1",16,0)
 ; HMPFLDON indicates the loop
"RTN","HMPEF1",17,0)
 ; HMPFLDON=0 means we are on L44
"RTN","HMPEF1",18,0)
 ; HMPFLDON=1 means we are on L42
"RTN","HMPEF1",19,0)
 ;
"RTN","HMPEF1",20,0)
 S HMPCNT=$$TOTAL^HMPEF("^SC")+$$TOTAL^HMPEF("^DIC(42)") ; total file counts will be inaccurate for location domain
"RTN","HMPEF1",21,0)
 ;
"RTN","HMPEF1",22,0)
 ;BL/CPC - Handle single location or ward for restart
"RTN","HMPEF1",23,0)
 I $G(HMPID) I $G(HMPID)'["w" D LOC44(HMPID) Q
"RTN","HMPEF1",24,0)
 I $D(HMPID) I $G(HMPID)["w" D LOC42($TR(HMPID,"w","")) Q
"RTN","HMPEF1",25,0)
 ;
"RTN","HMPEF1",26,0)
 ;BL/CPC - determine if location or ward for restart
"RTN","HMPEF1",27,0)
 I '$G(HMPFLDON) S L44=+$G(HMPLAST),L42=0  ; HMPFLDON=0 means we are on L44
"RTN","HMPEF1",28,0)
 I $G(HMPFLDON) S L44=0,L42=+$G(HMPLAST)  ;  HMPFLDON=1 means we are on L42
"RTN","HMPEF1",29,0)
 ; ^SC - IA 10040
"RTN","HMPEF1",30,0)
 I '$G(HMPFLDON) F  S L44=$O(^SC(L44)) Q:L44<1  D LOC44(L44) I HMPMAX>0,HMPI'<HMPMAX Q  ;BL/cpc
"RTN","HMPEF1",31,0)
 I HMPMAX>0,HMPI'<HMPMAX Q  ;BL/CPC prevents drop through
"RTN","HMPEF1",32,0)
 I $G(HMPMETA)'=1 S HMPFLDON=1 ;BL/cpc mark locations complete ;US11019
"RTN","HMPEF1",33,0)
 ; ^DIC(42) - IA 10039 DE2818
"RTN","HMPEF1",34,0)
 F  S L42=$O(^DIC(42,L42)) Q:L42<1  D LOC42(L42) I HMPMAX>0,HMPI'<HMPMAX Q  ;BL/cpc
"RTN","HMPEF1",35,0)
 I (L44<1)&(L42<1) S HMPFINI=1 ;BL/cpc - fix boolean error
"RTN","HMPEF1",36,0)
 Q
"RTN","HMPEF1",37,0)
 ;
"RTN","HMPEF1",38,0)
LOC44(IEN) ; get one hospital location
"RTN","HMPEF1",39,0)
 N $ES,$ET,ERRMSG
"RTN","HMPEF1",40,0)
 S ERRMSG=$$ERRMSG^HMPEF("Location",IEN)
"RTN","HMPEF1",41,0)
 S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPEF1",42,0)
 N LOC,X0,X,Y
"RTN","HMPEF1",43,0)
 ; if location is a WARD, ignore because file #42 will be used for wards
"RTN","HMPEF1",44,0)
 S X0=$G(^SC(IEN,0)) I $P(X0,U,3)="W" Q  ; ^SC - IA 10040
"RTN","HMPEF1",45,0)
 S LOC("name")=$P(X0,U)
"RTN","HMPEF1",46,0)
 S LOC("localId")=IEN,LOC("uid")=$$SETUID^HMPUTILS("location",,IEN)
"RTN","HMPEF1",47,0)
 S X=$P(X0,U,2) S:$L(X) LOC("shortName")=X S LOC("type")=$P(X0,U,3)
"RTN","HMPEF1",48,0)
 S LOC("refId")=IEN,LOC("oos")=$S(+$G(^SC(IEN,"OOS")):"true",1:"false")
"RTN","HMPEF1",49,0)
 S X=+$P(X0,U,4) I X D
"RTN","HMPEF1",50,0)
 . S Y=$$NS^XUAF4(X),X=$P(Y,U,2)_U_$P(Y,U)
"RTN","HMPEF1",51,0)
 . D FACILITY^HMPUTILS(X,"LOC")
"RTN","HMPEF1",52,0)
 I '$$ACTLOC^HMPEF(IEN) S LOC("inactive")="true"
"RTN","HMPEF1",53,0)
 D ADD^HMPEF("LOC") S HMPLAST=IEN
"RTN","HMPEF1",54,0)
 Q
"RTN","HMPEF1",55,0)
 ;
"RTN","HMPEF1",56,0)
LOC42(IEN) ; get one ward location
"RTN","HMPEF1",57,0)
 ; IEN - file 42 IEN
"RTN","HMPEF1",58,0)
 ; references to ^DIC(42) via IA #10039
"RTN","HMPEF1",59,0)
 ;
"RTN","HMPEF1",60,0)
 N $ES,$ET,DIV,ERRMSG
"RTN","HMPEF1",61,0)
 S ERRMSG=$$ERRMSG^HMPEF("Ward Location",IEN)
"RTN","HMPEF1",62,0)
 S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPEF1",63,0)
 N LOC,X,X0,Y
"RTN","HMPEF1",64,0)
 S X0=$G(^DIC(42,IEN,0))
"RTN","HMPEF1",65,0)
 S:$G(^DIC(42,IEN,0))'="" LOC("name")=$P(^DIC(42,IEN,0),U)  ;IA #10039
"RTN","HMPEF1",66,0)
 S LOC("localId")=IEN,LOC("uid")=$$SETUID^HMPUTILS("location",,"w"_IEN)  ; wards have a "w"
"RTN","HMPEF1",67,0)
 S LOC("type")="W"  ; always 'W' for ward
"RTN","HMPEF1",68,0)
 S LOC("refId")=IEN
"RTN","HMPEF1",69,0)
 S LOC("oos")="false" ; occasion of service is always false for ward locations
"RTN","HMPEF1",70,0)
 S DIV=+$P(X0,U,11)
"RTN","HMPEF1",71,0)
 S X=+$P($G(^DG(40.8,DIV,0)),U,7) I X D  ;ICR 417 DE2818 ASF 11/21/15
"RTN","HMPEF1",72,0)
 . S Y=$$NS^XUAF4(X),X=$P(Y,U,2)_U_$P(Y,U)
"RTN","HMPEF1",73,0)
 . D FACILITY^HMPUTILS(X,"LOC")
"RTN","HMPEF1",74,0)
 ; out-of-service flag
"RTN","HMPEF1",75,0)
 I '$$ACTWRD^HMPEF(IEN) S LOC("inactive")="true"  ; boolean field only exists if ward is inactive
"RTN","HMPEF1",76,0)
 D ADD^HMPEF("LOC") S HMPLAST=IEN
"RTN","HMPEF1",77,0)
 Q
"RTN","HMPEF1",78,0)
 ;
"RTN","HMPEF1",79,0)
NP ;New Persons
"RTN","HMPEF1",80,0)
 ; Variables from HMPEF: HMPCNT,HMPID,HMPMAX,HMPI,HMPFINI
"RTN","HMPEF1",81,0)
 N PRV
"RTN","HMPEF1",82,0)
 S HMPCNT=$$TOTAL^HMPEF("^VA(200)")  ; IA 10035
"RTN","HMPEF1",83,0)
 I $G(HMPID) D NP1(HMPID) Q
"RTN","HMPEF1",84,0)
 S PRV=+$G(HMPLAST) ;$S(HMPLAST:HMPLAST,1:.9)
"RTN","HMPEF1",85,0)
 I PRV=0 S PRV=.9
"RTN","HMPEF1",86,0)
 F  S PRV=$O(^VA(200,PRV)) Q:PRV<1  D NP1(PRV) I HMPMAX>0,HMPI'<HMPMAX Q
"RTN","HMPEF1",87,0)
 I PRV<1 S HMPFINI=1
"RTN","HMPEF1",88,0)
 Q
"RTN","HMPEF1",89,0)
 ;
"RTN","HMPEF1",90,0)
NP1(IEN) ;one person
"RTN","HMPEF1",91,0)
 N $ES,$ET,ERRMSG
"RTN","HMPEF1",92,0)
 S ERRMSG=$$ERRMSG^HMPEF("person",IEN)
"RTN","HMPEF1",93,0)
 S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPEF1",94,0)
 N HMPV,FLDS,USER,X,Y
"RTN","HMPEF1",95,0)
 I $$ISPROXY^HMPEF(IEN)=1 Q
"RTN","HMPEF1",96,0)
 K HMPV S FLDS=".01;4:9.2;9.5*;19:53.8;654.3;.132:.138"
"RTN","HMPEF1",97,0)
 D GETS^DIQ(200,IEN_",",FLDS,"IEN","HMPV")
"RTN","HMPEF1",98,0)
 S Y=$NA(HMPV(200,IEN_","))
"RTN","HMPEF1",99,0)
 S USER("name")=$G(@Y@(.01,"E"))
"RTN","HMPEF1",100,0)
 S USER("localId")=IEN,USER("uid")=$$SETUID^HMPUTILS("user",,IEN)
"RTN","HMPEF1",101,0)
 S:$D(@Y@(4)) USER("genderCode")="urn:va:gender:"_@Y@(4,"I"),USER("genderName")=@Y@(4,"E")
"RTN","HMPEF1",102,0)
 S X=+$P($G(@Y@(5,"I")),".") S:X USER("dateOfBirth")=$$JSONDT^HMPUTILS(X)
"RTN","HMPEF1",103,0)
 S X=$G(@Y@(7,"I")) S:$L(X) USER("disuser")=$S(X:"true",1:"false")
"RTN","HMPEF1",104,0)
 S X=$G(@Y@(8,"E")) S:$L(X) USER("title")=X
"RTN","HMPEF1",105,0)
 S X=$G(@Y@(9,"E")) S:$L(X) USER("ssn")=X
"RTN","HMPEF1",106,0)
 S X=$G(@Y@(9.2,"I")) S:$L(X) USER("terminated")=$$JSONDT^HMPUTILS(X)
"RTN","HMPEF1",107,0)
 S X=+$G(@Y@(19,"I")) S:X USER("delegateCode")=$$SETUID^HMPUTILS("user",,X),USER("delegateName")=$G(@Y@(19,"E"))
"RTN","HMPEF1",108,0)
 S X=$G(@Y@(29,"E")) S:$L(X) USER("service")=X
"RTN","HMPEF1",109,0)
 S X=$G(@Y@(53.5,"E")) S:$L(X) USER("providerClass")=X
"RTN","HMPEF1",110,0)
 S X=$G(@Y@(53.6,"E")) S:$L(X) USER("providerType")=X
"RTN","HMPEF1",111,0)
 S X=+$G(@Y@(654.3,"I")) S:X USER("surrogateCode")=$$SETUID^HMPUTILS("user",,X),USER("surrogateName")=$G(@Y@(654.3,"E"))
"RTN","HMPEF1",112,0)
 S X=$G(@Y@(.132,"E")) S:$L(X) USER("officePhone")=X
"RTN","HMPEF1",113,0)
 S X=$G(@Y@(.133,"E")) S:$L(X) USER("phone3")=X
"RTN","HMPEF1",114,0)
 S X=$G(@Y@(.134,"E")) S:$L(X) USER("phone4")=X
"RTN","HMPEF1",115,0)
 S X=$G(@Y@(.135,"E")) S:$L(X) USER("commercialPhone")=X
"RTN","HMPEF1",116,0)
 S X=$G(@Y@(.136,"E")) S:$L(X) USER("fax")=X
"RTN","HMPEF1",117,0)
 S X=$G(@Y@(.137,"E")) S:$L(X) USER("voicePager")=X
"RTN","HMPEF1",118,0)
 S X=$G(@Y@(.138,"E")) S:$L(X) USER("digitalPager")=X
"RTN","HMPEF1",119,0)
 D KEYS^HMPEF(IEN)
"RTN","HMPEF1",120,0)
 D ADD^HMPEF("USER") S HMPLAST=IEN
"RTN","HMPEF1",121,0)
 Q
"RTN","HMPEF1",122,0)
 ;
"RTN","HMPEF1",123,0)
PROB(HMPFINI,LEX) ;get problem list OPD store
"RTN","HMPEF1",124,0)
 N APP,ORAPP,ORDT,ORELEM,ORWLST,IEN,ELEMENT,PLIST,HMPCNT,HMPLAST,LST
"RTN","HMPEF1",125,0)
 S (ORWLST,ORDT,ORELEM)=""
"RTN","HMPEF1",126,0)
 S ORDT=DT
"RTN","HMPEF1",127,0)
 S IEN=0,HMPCNT=0
"RTN","HMPEF1",128,0)
 S LST=$NA(^TMP("ORLEX",$J))
"RTN","HMPEF1",129,0)
 S APP="GMPX"
"RTN","HMPEF1",130,0)
 D CONFIG^LEXSET(APP,"PLS",ORDT)
"RTN","HMPEF1",131,0)
 S (HMPCNT,HMPLAST)=0
"RTN","HMPEF1",132,0)
 ; ^LEX(757.01) - IA 1571 DE2818 ASF 11/21/15
"RTN","HMPEF1",133,0)
 F  S IEN=$O(^LEX(757.01,IEN)) Q:IEN=""!(IEN'?1N.N)  D
"RTN","HMPEF1",134,0)
 . S ORELEM=$G(^LEX(757.01,IEN,0))
"RTN","HMPEF1",135,0)
 . Q:'$D(^LEX(757.01,IEN,1))
"RTN","HMPEF1",136,0)
 . D LOOK^LEXA(ORELEM,,1,,ORDT)
"RTN","HMPEF1",137,0)
 . S ELEMENT=$G(LEX("LIST",1))
"RTN","HMPEF1",138,0)
 . Q:ELEMENT=""
"RTN","HMPEF1",139,0)
 . S ELEMENT=$$LEXXFRM^ORQQPL4(ELEMENT,ORDT,"GMPX")
"RTN","HMPEF1",140,0)
 . S PLIST("uid")=$$SETUID^HMPUTILS("problem-list","",IEN)
"RTN","HMPEF1",141,0)
 . S PLIST("lexIen")=$P(ELEMENT,"^",1)
"RTN","HMPEF1",142,0)
 . S PLIST("lexName")=$P(ELEMENT,"^",2)
"RTN","HMPEF1",143,0)
 . S PLIST("icd")=$P(ELEMENT,"^",3)
"RTN","HMPEF1",144,0)
 . S PLIST("icdIen")=$P(ELEMENT,"^",4)
"RTN","HMPEF1",145,0)
 . S PLIST("codeSys")=$P(ELEMENT,"^",5)
"RTN","HMPEF1",146,0)
 . S PLIST("cCode")=$P(ELEMENT,"^",6)
"RTN","HMPEF1",147,0)
 . S PLIST("dCode")=$P(ELEMENT,"^",7)
"RTN","HMPEF1",148,0)
 . S PLIST("impDt")=$P(ELEMENT,"^",8)
"RTN","HMPEF1",149,0)
 . S HMPCNT=HMPCNT+1 D ADD^HMPEF("PLIST") S HMPLAST=HMPCNT
"RTN","HMPEF1",150,0)
 . Q
"RTN","HMPEF1",151,0)
 S HMPFINI=1
"RTN","HMPEF1",152,0)
 Q
"RTN","HMPEF1",153,0)
 ;
"RTN","HMPEFSG")
1^173
"RTN","HMPEFSP")
1^174
"RTN","HMPEFST")
1^175
"RTN","HMPEFX")
0^84^B8398930
"RTN","HMPEFX",1,0)
HMPEFX ;SLC/MKB,ASMR/RRB - Reference data update;7/19/12 2:26pm
"RTN","HMPEFX",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPEFX",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEFX",4,0)
 ;
"RTN","HMPEFX",5,0)
 ; External References          DBIA#
"RTN","HMPEFX",6,0)
 ; -------------------          -----
"RTN","HMPEFX",7,0)
 ; ^DPT                         10035
"RTN","HMPEFX",8,0)
 ; MPIF001                       2701
"RTN","HMPEFX",9,0)
 ; XLFSTR                       10104
"RTN","HMPEFX",10,0)
 Q
"RTN","HMPEFX",11,0)
 ;
"RTN","HMPEFX",12,0)
EN(LAST,MAX) ; -- get data from ^XTMP("HMPEF-<date>",n)
"RTN","HMPEFX",13,0)
 ;[MAX not used yet]
"RTN","HMPEFX",14,0)
 N X,Y,HMPTOTL,DOMCNT,TYPE,NAME,RTN,HMPID
"RTN","HMPEFX",15,0)
 S LAST=$G(LAST) D GETLIST(LAST)
"RTN","HMPEFX",16,0)
 G ENQ:$G(^TMP("HMPX",$J,0))<1 ;no data
"RTN","HMPEFX",17,0)
 ;
"RTN","HMPEFX",18,0)
 S (HMPTOTL,DOMCNT)=0
"RTN","HMPEFX",19,0)
 S TYPE="" F  S TYPE=$O(^TMP("HMPX",$J,TYPE)) Q:TYPE=""  D
"RTN","HMPEFX",20,0)
 . S NAME=$$LOW^XLFSTR(TYPE)
"RTN","HMPEFX",21,0)
 . S RTN=$$TAG^HMPEF(NAME)_"^HMPEF" Q:'$L($T(@RTN))
"RTN","HMPEFX",22,0)
 . S DOMCNT=DOMCNT+1
"RTN","HMPEFX",23,0)
 . ;
"RTN","HMPEFX",24,0)
 . N HMP,HMPI
"RTN","HMPEFX",25,0)
 . S HMP=$NA(^TMP("HMP",$J,DOMCNT)),HMPI=0,HMPID=""
"RTN","HMPEFX",26,0)
 . F  S HMPID=$O(^TMP("HMPX",$J,TYPE,HMPID)) Q:HMPID=""  D
"RTN","HMPEFX",27,0)
 .. D @RTN S HMPTOTL=HMPTOTL+1
"RTN","HMPEFX",28,0)
 . ;
"RTN","HMPEFX",29,0)
 . I 'HMPI S DOMCNT=DOMCNT-1 Q   ;no data, or error
"RTN","HMPEFX",30,0)
 . S:DOMCNT>1 @HMP@(.3)=","
"RTN","HMPEFX",31,0)
 . S @HMP@(.5)="{""domainName"":"""_NAME_""",""total"":"_HMPI_",""items"":["
"RTN","HMPEFX",32,0)
 . S HMPI=HMPI+1,@HMP@(HMPI)="]}"
"RTN","HMPEFX",33,0)
 ;
"RTN","HMPEFX",34,0)
ENQ ;
"RTN","HMPEFX",35,0)
 S Y=$G(^TMP("HMPX",$J,0)) K ^TMP("HMPX",$J)
"RTN","HMPEFX",36,0)
 I '$G(DOMCNT) S @HMP@(.5)="{""apiVersion"":""1.01"",""data"":{""lastUpdate"":"""_LAST_""",""totalItems"":0,""items"":[]}}" Q
"RTN","HMPEFX",37,0)
 ;
"RTN","HMPEFX",38,0)
 S @HMP@(.5)="{""apiVersion"":""1.01"",""data"":{""lastUpdate"":"""_Y_""",""totalItems"":"_DOMCNT_",""items"":["
"RTN","HMPEFX",39,0)
 S HMPI=DOMCNT I $D(^TMP($J,"HMP ERROR")) D
"RTN","HMPEFX",40,0)
 . N ERROR,CNT
"RTN","HMPEFX",41,0)
 . D BUILDERR^HMPEF(.ERROR)
"RTN","HMPEFX",42,0)
 . S HMPI=HMPI+1,@HMP@(HMPI)=",",CNT=0
"RTN","HMPEFX",43,0)
 . F  S CNT=$O(ERROR(CNT)) Q:CNT'>0  S HMPI=HMPI+1,@HMP@(HMPI)=ERROR(CNT)
"RTN","HMPEFX",44,0)
 . K ^TMP($J,"HMP ERROR")
"RTN","HMPEFX",45,0)
 S HMPI=HMPI+1,@HMP@(HMPI)="]}}"
"RTN","HMPEFX",46,0)
 Q
"RTN","HMPEFX",47,0)
 ;
"RTN","HMPEFX",48,0)
GETLIST(LAST) ; -- build list of updates for client
"RTN","HMPEFX",49,0)
 ; Returns ^TMP("HMPX",$J,0) = last DATE:SEQ included
"RTN","HMPEFX",50,0)
 ;         ^TMP("HMPX",$J,TYPE,ID)=ACT
"RTN","HMPEFX",51,0)
 N DATE,SEQ,BEG,END,IDX,X0,DFN,TYPE,ID,ACT
"RTN","HMPEFX",52,0)
 K ^TMP("HMPX",$J)
"RTN","HMPEFX",53,0)
 S DATE=+LAST,SEQ=+$P(LAST,":",2)
"RTN","HMPEFX",54,0)
 ; generate list ID, and end point
"RTN","HMPEFX",55,0)
 S BEG=$NA(^XTMP("HMPEF-"_DATE,SEQ))         ;init loop where left off
"RTN","HMPEFX",56,0)
 ; END=$Q(^XTMP("HMPEF-"_(DT+1),9999999),-1) ;last node
"RTN","HMPEFX",57,0)
 S END=+$O(^XTMP("HMPEF-"_DT,"A"),-1)        ;last node
"RTN","HMPEFX",58,0)
 S ^TMP("HMPX",$J,0)=DT_":"_END              ;date:seq
"RTN","HMPEFX",59,0)
 ;
"RTN","HMPEFX",60,0)
 S IDX=BEG F  S IDX=$Q(@IDX) Q:$$DONE  D
"RTN","HMPEFX",61,0)
 . S X0=@IDX,TYPE=$P(X0,U),ID=$P(X0,U,2),ACT=$P(X0,U,3)
"RTN","HMPEFX",62,0)
 . I TYPE=""!(ID="") Q  ;error
"RTN","HMPEFX",63,0)
 . S ^TMP("HMPX",$J,TYPE,ID)=ACT
"RTN","HMPEFX",64,0)
 Q
"RTN","HMPEFX",65,0)
 ;
"RTN","HMPEFX",66,0)
DONE() ; -- Return 1 or 0, if loop has finished
"RTN","HMPEFX",67,0)
 I IDX'?1"^XTMP(""HMPEF-"7N.E  Q 1  ;end of ^XTMP
"RTN","HMPEFX",68,0)
 N D,N S D=+$P(IDX,"-",2),N=+$P(IDX,",",2)
"RTN","HMPEFX",69,0)
 ; check HMP-DATE subscript
"RTN","HMPEFX",70,0)
 I D<DT Q 0                         ;prior day: keep going
"RTN","HMPEFX",71,0)
 I D>DT Q 1                         ;next day:  stop loop
"RTN","HMPEFX",72,0)
 ; D=DT: check sequence# subscript
"RTN","HMPEFX",73,0)
 I N>END Q 1
"RTN","HMPEFX",74,0)
 Q 0
"RTN","HMPEHL7")
0^85^B3570530
"RTN","HMPEHL7",1,0)
HMPEHL7 ;SLC/MJK,ASMR/RRB - HMP HL7 ADT Message Processor;03/25/2014 16:50:09
"RTN","HMPEHL7",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPEHL7",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEHL7",4,0)
 ;
"RTN","HMPEHL7",5,0)
 ; DE2818 SQA Findings.  Changed ADT entry to accept parameters ASMR/RRB
"RTN","HMPEHL7",6,0)
 Q
"RTN","HMPEHL7",7,0)
 ;
"RTN","HMPEHL7",8,0)
ADT(HLFS,HLNEXT,HLNODE,HLQUIT) ; -- main entry point for the following HMP ADT client/router protocols:
"RTN","HMPEHL7",9,0)
 ;          - HMP ADT-A04 CLIENT protocol
"RTN","HMPEHL7",10,0)
 ;             o  subscribes to VAFC ADT-A04 SERVER 
"RTN","HMPEHL7",11,0)
 ;          - HMP ADT-A08 CLIENT protocol
"RTN","HMPEHL7",12,0)
 ;             o  subscribes to VAFC ADT-A08 SERVER 
"RTN","HMPEHL7",13,0)
 ;
"RTN","HMPEHL7",14,0)
 ; Note: These variables are provided by the VistA HL7 system when a
"RTN","HMPEHL7",15,0)
 ;       subscriber protocol's ROUTING LOGIC is called:
"RTN","HMPEHL7",16,0)
 ;            - HLNEXT
"RTN","HMPEHL7",17,0)
 ;            - HLQUIT
"RTN","HMPEHL7",18,0)
 ;            - HLNODE
"RTN","HMPEHL7",19,0)
 ;            - HL("FS")
"RTN","HMPEHL7",20,0)
 ;            - HL("ECH")
"RTN","HMPEHL7",21,0)
 ;
"RTN","HMPEHL7",22,0)
 ; -- Filters ADT/A04(registration) & A08 (patient security level change) events
"RTN","HMPEHL7",23,0)
 ;    Scans for PID segment and uses embedded DFN
"RTN","HMPEHL7",24,0)
 ;    Sets ^XTMP("HMPFS~... freshness queue
"RTN","HMPEHL7",25,0)
 ;
"RTN","HMPEHL7",26,0)
 NEW DONE,HMPSEG,HMPEVT
"RTN","HMPEHL7",27,0)
 SET DONE=0
"RTN","HMPEHL7",28,0)
 FOR  XECUTE HLNEXT QUIT:HLQUIT'>0  DO  QUIT:DONE
"RTN","HMPEHL7",29,0)
 . SET HMPSEG=$EXTRACT(HLNODE,1,3)
"RTN","HMPEHL7",30,0)
 . ;
"RTN","HMPEHL7",31,0)
 . IF HMPSEG="EVN" DO  QUIT
"RTN","HMPEHL7",32,0)
 . . SET HMPEVT=$PIECE(HLNODE,HLFS,2)
"RTN","HMPEHL7",33,0)
 . . IF HMPEVT="A04" QUIT
"RTN","HMPEHL7",34,0)
 . . ; -- 97 reason = sensitive patient change occurred
"RTN","HMPEHL7",35,0)
 . . IF HMPEVT="A08",$PIECE(HLNODE,HLFS,5)=97 QUIT
"RTN","HMPEHL7",36,0)
 . . ; -- not an event HMP is interested in so done with message
"RTN","HMPEHL7",37,0)
 . . SET DONE=1
"RTN","HMPEHL7",38,0)
 . ; -- PID segment always comes after EVN segment
"RTN","HMPEHL7",39,0)
 . IF HMPSEG'="PID" QUIT
"RTN","HMPEHL7",40,0)
 . SET DONE=1
"RTN","HMPEHL7",41,0)
 . ; -- HMPEVT should always be defined at this point
"RTN","HMPEHL7",42,0)
 . IF $G(HMPEVT)="" QUIT
"RTN","HMPEHL7",43,0)
 . NEW DFN
"RTN","HMPEHL7",44,0)
 . SET DFN=+$PIECE($PIECE(HLNODE,HL("FS"),4),$EXTRACT(HL("ECH")))
"RTN","HMPEHL7",45,0)
 . IF 'DFN QUIT
"RTN","HMPEHL7",46,0)
 . DO POSTX^HMPEVNT("pt-select",DFN_"&"_HMPEVT)  ;Ref File event
"RTN","HMPEHL7",47,0)
 . IF $DATA(^HMP(800000,"AITEM",DFN)) DO POST^HMPEVNT(DFN,"patient",DFN)
"RTN","HMPEHL7",48,0)
 QUIT
"RTN","HMPEHL7",49,0)
 ;
"RTN","HMPELAB")
0^86^B7483676
"RTN","HMPELAB",1,0)
HMPELAB ;SLC/JMC,ASMR/RRB - Lab extract utilities;Nov 24, 2015 13:08:23
"RTN","HMPELAB",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 1913;Build 63
"RTN","HMPELAB",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPELAB",4,0)
 ;
"RTN","HMPELAB",5,0)
 Q
"RTN","HMPELAB",6,0)
 ;
"RTN","HMPELAB",7,0)
SHWORPNL ; Ordering panels (ends in "panel")
"RTN","HMPELAB",8,0)
 ;
"RTN","HMPELAB",9,0)
 ;DE2818, ICR 2387, fields being read are:
"RTN","HMPELAB",10,0)
 ; ^LAB(60,D0,0)= (#.01) NAME [1F] ^
"RTN","HMPELAB",11,0)
 ; ^LAB(60,D0,2,0)=^60.02P^^  (#200) LAB TEST INCLUDED IN PANEL
"RTN","HMPELAB",12,0)
 ; ^LAB(60,D0,2,D1,0)= (#.01) LAB TEST [1P:60] ^ (#.02) AP MULTIPLY FACTOR [2N] ^ 
"RTN","HMPELAB",13,0)
 ;
"RTN","HMPELAB",14,0)
 N X,COUNT,LABDAT
"RTN","HMPELAB",15,0)
 S X=$NA(^LAB(60))
"RTN","HMPELAB",16,0)
 F  S X=$Q(@X) Q:($QS(X,1)'=60)!($QS(X,2)'=+$QS(X,2))  D
"RTN","HMPELAB",17,0)
 . I $QS(X,3)=0  D
"RTN","HMPELAB",18,0)
 . . I $D(LABDAT),COUNT>0 S HMPCNT=HMPCNT+1 D ADD^HMPEF("LABDAT") K LABDAT
"RTN","HMPELAB",19,0)
 . . S COUNT=0,LABDAT("name")=$P(@X,"^",1),LABDAT("uid")=$$SETUID^HMPUTILS("labpanel","",$QS(X,2))
"RTN","HMPELAB",20,0)
 . I $QS(X,3)=2,$QS(X,4)>0  D
"RTN","HMPELAB",21,0)
 . . S LABDAT("labs",$QS(X,4),"id")=@X,LABDAT("labs",$QS(X,4),"name")=$P(^LAB(60,+@X,0),"^",1),COUNT=COUNT+1
"RTN","HMPELAB",22,0)
 I $D(LABDAT),COUNT>0 S HMPCNT=HMPCNT+1 D ADD^HMPEF("LABDAT") K LABDAT
"RTN","HMPELAB",23,0)
 S HMPFINI=1
"RTN","HMPELAB",24,0)
 Q
"RTN","HMPELAB",25,0)
 ;
"RTN","HMPELAB",26,0)
SHWCUMR2 ; All Cumulative Reports and the labs they point to (for UI pick on labs view)
"RTN","HMPELAB",27,0)
 ;
"RTN","HMPELAB",28,0)
 ;DE2818,  fields being read are:
"RTN","HMPELAB",29,0)
 ;^LAB(64.5,D0,0)= (#.01) NAME [1F] ^
"RTN","HMPELAB",30,0)
 ;^LAB(64.5,D0,1,0)=^64.51^^  (#10) MAJOR HEADER
"RTN","HMPELAB",31,0)
 ;^LAB(64.5,D0,1,D1,0)= (#.01) MAJOR HEADER [1F] ^ (#5) MEDICAL CENTER [2F] ^ 
"RTN","HMPELAB",32,0)
 ;^LAB(64.5,D0,1,D1,1,0)=^64.52I^^  (#10) MINOR HEADER
"RTN","HMPELAB",33,0)
 ;^LAB(64.5,D0,1,D1,1,D2,0)= (#.01) MINOR HEADER [1F] ^ (#1) PROFILE SITE/SPECIMEN [2P:61] ^ (#2) TYPE OF DISPLAY [3S] ^ (#3) 
"RTN","HMPELAB",34,0)
 ;                       ==>LOCALE FIELD [4S] ^ 
"RTN","HMPELAB",35,0)
 ;^LAB(64.5,D0,1,D1,1,D2,1,0)=^64.53IP^^  (#10) LAB TEST
"RTN","HMPELAB",36,0)
 ;^LAB(64.5,D0,1,D1,1,D2,1,D3,0)= (#.01) LAB TEST [1P:60] ^ (#1) TEST FIELD LENGTH [2N] ^ (#2) PRINT TEST NAME [3F] ^ (#3) TEST 
"RTN","HMPELAB",37,0)
 ;                           ==>PRINT CODE [4F] ^ (#4) TEST LOCATION [5F] ^ (#5) DECIMAL PLACES [6N] ^
"RTN","HMPELAB",38,0)
 ;   and
"RTN","HMPELAB",39,0)
 ;
"RTN","HMPELAB",40,0)
 ;^LAB(60,D0,0)= (#.01) NAME [1F] ^
"RTN","HMPELAB",41,0)
 ;
"RTN","HMPELAB",42,0)
 N X,LASTSUB,LASTLAB,LABDAT
"RTN","HMPELAB",43,0)
 S LASTSUB=0,LASTLAB=0,X=$NA(^LAB(64.5,1,1))
"RTN","HMPELAB",44,0)
 F  S X=$Q(@X) Q:($QS(X,4)="B")!($QS(X,3)'=1)!($QS(X,2)'=1)!($QS(X,1)'=64.5)  D
"RTN","HMPELAB",45,0)
 . I $QS(X,5)=0  D
"RTN","HMPELAB",46,0)
 . . I $D(LABDAT) S HMPCNT=HMPCNT+1 D ADD^HMPEF("LABDAT") K LABDAT
"RTN","HMPELAB",47,0)
 . . S LASTSUB=0,LASTLAB=0,LABDAT("name")=$P(@X,"^",1)
"RTN","HMPELAB",48,0)
 . I $QS(X,7)=0 S LASTSUB=LASTSUB+1,LASTLAB=0,LABDAT("uid")=$$SETUID^HMPUTILS("labgroup",,$QS(X,4)),LABDAT("groups",LASTSUB,"name")=$P(@X,"^",1)
"RTN","HMPELAB",49,0)
 . I $QS(X,9)=0  D
"RTN","HMPELAB",50,0)
 . . S LASTLAB=LASTLAB+1
"RTN","HMPELAB",51,0)
 . . S LABDAT("groups",LASTSUB,"labs",LASTLAB,"name")=$P(^LAB(60,$P(@X,"^",1),0),"^",1)
"RTN","HMPELAB",52,0)
 . . S LABDAT("groups",LASTSUB,"labs",LASTLAB,"id")=$P(@X,"^",1)
"RTN","HMPELAB",53,0)
 I $D(LABDAT) S HMPCNT=HMPCNT+1 D ADD^HMPEF("LABDAT") K LABDAT
"RTN","HMPELAB",54,0)
 S HMPFINI=1
"RTN","HMPELAB",55,0)
 Q
"RTN","HMPELAB",56,0)
LABPNL ; Lab ordering panels
"RTN","HMPELAB",57,0)
 ; {name:panelName,uid:panelUid,labs:[{id:labIEN,name:labName},...]}
"RTN","HMPELAB",58,0)
 N IEN
"RTN","HMPELAB",59,0)
 F  S IEN=$O(^LAB(60,IEN)) Q:'IEN  D
"RTN","HMPELAB",60,0)
 . N X0,LAB
"RTN","HMPELAB",61,0)
 . S X0=$G(^LAB(60,IEN,0))
"RTN","HMPELAB",62,0)
 . Q:"IB"'[$P(X0,U,3)       ; not for ordering
"RTN","HMPELAB",63,0)
 . Q:'$O(^LAB(60,IEN,2,0))  ; not panel
"RTN","HMPELAB",64,0)
 . S LAB("name")=$P(X0,U)
"RTN","HMPELAB",65,0)
 . S LAB("uid")=$$SETUID^HMPUTILS("labpanel","",IEN)
"RTN","HMPELAB",66,0)
 . ; recursively expand to individual tests
"RTN","HMPELAB",67,0)
 . D ADD^HMPEF("LAB")
"RTN","HMPELAB",68,0)
 I 'IEN S HMPFINI=1
"RTN","HMPELAB",69,0)
 Q
"RTN","HMPELAB",70,0)
 ;
"RTN","HMPELAB",71,0)
 ;DE2818, code below removed as it does nothing
"RTN","HMPELAB",72,0)
 ;LABGRP ; Lab groups on cumulative report
"RTN","HMPELAB",73,0)
 ; {name:groupName,uid:groupUid,labs:[{name:labName,id:labIEN},...]}
"RTN","HMPELAB",74,0)
 ;F  S IEN=$O(^LAB(60,IEN)) Q:'IEN  D
"RTN","HMPELAB",75,0)
 ;. Q
"RTN","HMPELAB",76,0)
 ;Q
"RTN","HMPENSZ")
1^176
"RTN","HMPENSZ1")
1^177
"RTN","HMPEQ")
0^89^B27101202
"RTN","HMPEQ",1,0)
HMPEQ ;SLC/MJK,ASMR/RRB - HMP Freshness Utilities;02-JUL-2014
"RTN","HMPEQ",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPEQ",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEQ",4,0)
 ;
"RTN","HMPEQ",5,0)
 Q
"RTN","HMPEQ",6,0)
 ;
"RTN","HMPEQ",7,0)
EN ; -- go to event queue viewer (convenience tag)
"RTN","HMPEQ",8,0)
 D EN^HMPEQLM
"RTN","HMPEQ",9,0)
 Q
"RTN","HMPEQ",10,0)
 ;
"RTN","HMPEQ",11,0)
EVTS(DATA,PARAMS) ; -- return events for server's last stream in inverse sequence # order
"RTN","HMPEQ",12,0)
 ; input: PARAMS("server") := ien of 800000
"RTN","HMPEQ",13,0)
 ;               "filter") := event state filter [ P:processed | W:waiting ]
"RTN","HMPEQ",14,0)
 ;               "domain") := domain of interest or "ALL'
"RTN","HMPEQ",15,0)
 ;                  "dfn") := dfn of desired patient
"RTN","HMPEQ",16,0)
 ;                  "max") := max number events to return
"RTN","HMPEQ",17,0)
 ;
"RTN","HMPEQ",18,0)
 ; output: @DATA@("stream") := name of stream for server
"RTN","HMPEQ",19,0)
 ;                 "count") := number of events returned
"RTN","HMPEQ",20,0)
 ; "events",<n>,"sequence") := sequence # / node in stream for event
"RTN","HMPEQ",21,0)
 ;     "events",<n>,"node") := event node for sequence
"RTN","HMPEQ",22,0)
 ;
"RTN","HMPEQ",23,0)
 N STREAM,DOMAIN,FILTER,PAT,SEQ,MAX,CNT,X
"RTN","HMPEQ",24,0)
 S STREAM=$$LSTREAM^HMPDJFSM(+$G(PARAMS("server")))
"RTN","HMPEQ",25,0)
 S DOMAIN=$G(PARAMS("domain"))
"RTN","HMPEQ",26,0)
 S FILTER=$G(PARAMS("filter"))
"RTN","HMPEQ",27,0)
 S PAT=+$G(PARAMS("dfn"))
"RTN","HMPEQ",28,0)
 S MAX=$G(PARAMS("max"),10)
"RTN","HMPEQ",29,0)
 S CNT=0
"RTN","HMPEQ",30,0)
 S SEQ=" "
"RTN","HMPEQ",31,0)
 F  S SEQ=$O(^XTMP(STREAM,SEQ),-1) Q:'SEQ  S X=^(SEQ) D  Q:CNT=MAX
"RTN","HMPEQ",32,0)
 . I DOMAIN'="ALL",DOMAIN'=$P(X,"^",2) Q
"RTN","HMPEQ",33,0)
 . ; quit if waiting and want processed
"RTN","HMPEQ",34,0)
 . I FILTER["P",'$P(X,"^",6) Q
"RTN","HMPEQ",35,0)
 . ; quit if processed and want waiting
"RTN","HMPEQ",36,0)
 . I FILTER["W",'$P(X,"^",6) Q
"RTN","HMPEQ",37,0)
 . ; quit if not patient desired
"RTN","HMPEQ",38,0)
 . I PAT,PAT'=+X Q
"RTN","HMPEQ",39,0)
 . S CNT=CNT+1
"RTN","HMPEQ",40,0)
 . S @DATA@("events",CNT,"sequence")=SEQ
"RTN","HMPEQ",41,0)
 . S @DATA@("events",CNT,"node")=X
"RTN","HMPEQ",42,0)
 ;
"RTN","HMPEQ",43,0)
 S @DATA@("stream")=STREAM
"RTN","HMPEQ",44,0)
 S @DATA@("count")=CNT
"RTN","HMPEQ",45,0)
 Q
"RTN","HMPEQ",46,0)
 ;
"RTN","HMPEQ",47,0)
GETEVTS(RET,PARAMS) ; -- get events for server's last stream in inverse sequence # order
"RTN","HMPEQ",48,0)
 ; RPC: HMPM EVT QUE GET EVTS (future)
"RTN","HMPEQ",49,0)
 N HMPDATA,HMPERR
"RTN","HMPEQ",50,0)
 S HMPDATA=$NA(^TMP("HMPM EVT QUE GET EVTS",$J))
"RTN","HMPEQ",51,0)
 K @HMPDATA
"RTN","HMPEQ",52,0)
 D EVTS(HMPDATA,.PARAMS)
"RTN","HMPEQ",53,0)
 D ENCODE^HMPJSON(HMPDATA,RET,"HMPERR")
"RTN","HMPEQ",54,0)
 K @HMPDATA
"RTN","HMPEQ",55,0)
 Q
"RTN","HMPEQ",56,0)
 ;
"RTN","HMPEQ",57,0)
SRVS(DATA) ; -- loop thru & sort by server names and return summary freshness queue info for each
"RTN","HMPEQ",58,0)
 ; output:        @DATA@("servers",<n>,"name")      := server name
"RTN","HMPEQ",59,0)
 ;                       "server",<n>,"lastUpdate") := date server last updated
"RTN","HMPEQ",60,0)
 ;                       "server",<n>,"repeated")   := how many times updated
"RTN","HMPEQ",61,0)
 ;                       "server",<n>,"stream")     := stream name
"RTN","HMPEQ",62,0)
 ;                       "server",<n>,"queueEnd")   := current end of queue
"RTN","HMPEQ",63,0)
 ;         "server",<n>,"extracts",<n>,"domain")    := domain name
"RTN","HMPEQ",64,0)
 ;         "server",<n>,"extracts",<n>,"tasks")     := tasks waiting to be processed
"RTN","HMPEQ",65,0)
 ;         "server",<n>,"extracts",<n>,"waiting")   := how many seconds waiting
"RTN","HMPEQ",66,0)
 ;         "server",<n>,"extracts",<n>,"lastCount") := last count retrieved or <finished>
"RTN","HMPEQ",67,0)
 ;
"RTN","HMPEQ",68,0)
 N HMPSRVNM,HMPCNT,IEN
"RTN","HMPEQ",69,0)
 S HMPSRVNM=""
"RTN","HMPEQ",70,0)
 S HMPCNT=0
"RTN","HMPEQ",71,0)
 F  S HMPSRVNM=$O(^HMP(800000,"B",HMPSRVNM)) Q:HMPSRVNM=""  S IEN=$O(^(HMPSRVNM,"")) D
"RTN","HMPEQ",72,0)
 . S HMPCNT=HMPCNT+1
"RTN","HMPEQ",73,0)
 . D SRV($NA(@DATA@("servers",HMPCNT)),IEN)
"RTN","HMPEQ",74,0)
 Q
"RTN","HMPEQ",75,0)
 ;
"RTN","HMPEQ",76,0)
SRV(DATA,SRV) ; -- process one server
"RTN","HMPEQ",77,0)
 N X0,ROOT,BATCH,STREAM,SRVNM,TASK,TASKS,ENDQ,EXTRACT,CNT
"RTN","HMPEQ",78,0)
 S X0=$G(^HMP(800000,SRV,0))
"RTN","HMPEQ",79,0)
 Q:X0=""
"RTN","HMPEQ",80,0)
 S SRVNM=$P(X0,"^")
"RTN","HMPEQ",81,0)
 S @DATA@("name")=$P(X0,"^")
"RTN","HMPEQ",82,0)
 S @DATA@("lastUpdate")=$P(X0,"^",2)
"RTN","HMPEQ",83,0)
 S @DATA@("repeated")=$P(X0,"^",4)
"RTN","HMPEQ",84,0)
 S STREAM=$$LSTREAM^HMPDJFSM(SRV)
"RTN","HMPEQ",85,0)
 S @DATA@("stream")=STREAM
"RTN","HMPEQ",86,0)
 S @DATA@("queueEnd")=$S($D(^XTMP(STREAM)):$P(STREAM,"~",3)_"-"_$G(^XTMP(STREAM,"last")),1:"")
"RTN","HMPEQ",87,0)
 ;
"RTN","HMPEQ",88,0)
 ; -- loop thru extracts for this server
"RTN","HMPEQ",89,0)
 S ROOT="HMPFX~"_SRVNM_"~"
"RTN","HMPEQ",90,0)
 S BATCH=ROOT
"RTN","HMPEQ",91,0)
 S CNT=0
"RTN","HMPEQ",92,0)
 F  S BATCH=$O(^XTMP(BATCH)) Q:$E(BATCH,1,$L(ROOT))'=ROOT  D
"RTN","HMPEQ",93,0)
 . S CNT=CNT+1
"RTN","HMPEQ",94,0)
 . S @DATA@("extracts",CNT,"domain")=$P(BATCH,"~",3)
"RTN","HMPEQ",95,0)
 . S TASK=0,TASKS=""
"RTN","HMPEQ",96,0)
 . F  S TASK=$O(^XTMP(BATCH,0,"task",TASK)) Q:'TASK  S TASKS=TASKS_$S($L(TASKS):",",1:"")_TASK
"RTN","HMPEQ",97,0)
 . S @DATA@("extracts",CNT,"tasks")=TASKS
"RTN","HMPEQ",98,0)
 . I '$D(^XTMP(BATCH,0,"wait")) S @DATA@("extracts",CNT,"waiting")=$$WAIT^HMPDJFSM(BATCH) Q
"RTN","HMPEQ",99,0)
 . S @DATA@("extracts",CNT,"lastCount")=$$LOBJ^HMPDJFSM(BATCH,TASK)
"RTN","HMPEQ",100,0)
 Q
"RTN","HMPEQ",101,0)
 ;
"RTN","HMPEQ",102,0)
GETSRVS(RET) ; -- get summary freshness event queue info for all servers
"RTN","HMPEQ",103,0)
 ; RPC: HMPM EVT QUE GET SVRS (future)
"RTN","HMPEQ",104,0)
 N HMPDATA,HMPERR
"RTN","HMPEQ",105,0)
 S HMPDATA=$NA(^TMP("HMPM EVT QUE GET SVRS",$J))
"RTN","HMPEQ",106,0)
 K @HMPDATA
"RTN","HMPEQ",107,0)
 D SRVS(HMPDATA)
"RTN","HMPEQ",108,0)
 D ENCODE^HMPJSON(HMPDATA,RET,"HMPERR")
"RTN","HMPEQ",109,0)
 K @HMPDATA
"RTN","HMPEQ",110,0)
 Q
"RTN","HMPEQ",111,0)
 ;
"RTN","HMPEQ",112,0)
GLBS(DATA) ; -- return summary info on HMP related temp globals
"RTN","HMPEQ",113,0)
 ; output: @HMPDATA@(    "xtmpNodes",<n>,"server")     := server name
"RTN","HMPEQ",114,0)
 ;                       "xtmpNodes",<n>,"rootNode")   := ^XTMP root node for server/stream
"RTN","HMPEQ",115,0)
 ;                       "xtmpNodes",<n>,"lastNode")   := last sequence in root structure
"RTN","HMPEQ",116,0)
 ;
"RTN","HMPEQ",117,0)
 ;                       "tmpJobNodes",<n>,"rootNode") := root ^TMP("HMP*",$J) node
"RTN","HMPEQ",118,0)
 ;                       "tmpJobNodes",<n>,"lastNode") := last sequence in root structure
"RTN","HMPEQ",119,0)
 ;
"RTN","HMPEQ",120,0)
 ;                       "jobTmpNodes",<n>,"rootNode") := root ^TMP($J,"HMP*") node
"RTN","HMPEQ",121,0)
 ;                       "jobTmpNodes",<n>,"lastNode") := last sequence in root structure
"RTN","HMPEQ",122,0)
 ;
"RTN","HMPEQ",123,0)
 N HMPX,CNT,J,Y,RNODE
"RTN","HMPEQ",124,0)
 S HMPX="VPQ~"
"RTN","HMPEQ",125,0)
 S CNT=0
"RTN","HMPEQ",126,0)
 F  S HMPX=$O(^XTMP(HMPX)) Q:$E(HMPX,1,3)'="HMP"  D
"RTN","HMPEQ",127,0)
 . S CNT=CNT+1
"RTN","HMPEQ",128,0)
 . S @DATA@("xtmpNodes",CNT,"server")=$P(HMPX,"~",2)
"RTN","HMPEQ",129,0)
 . S @DATA@("xtmpNodes",CNT,"rootNode")="^XTMP("""_HMPX_""")"
"RTN","HMPEQ",130,0)
 . S Y=$O(^XTMP(HMPX," "),-1)
"RTN","HMPEQ",131,0)
 . S:'$L(Y) Y=$O(^XTMP(HMPX,""),-1)
"RTN","HMPEQ",132,0)
 . S @DATA@("xtmpNodes",CNT,"lastNode")=Y
"RTN","HMPEQ",133,0)
 ;
"RTN","HMPEQ",134,0)
 S HMPX="VPQ~"
"RTN","HMPEQ",135,0)
 S CNT=0
"RTN","HMPEQ",136,0)
 F  S HMPX=$O(^TMP(HMPX)) Q:$E(HMPX,1,3)'="HMP"  D
"RTN","HMPEQ",137,0)
 . S J=0
"RTN","HMPEQ",138,0)
 . F  S J=$O(^TMP(HMPX,J)) Q:'J  D
"RTN","HMPEQ",139,0)
 . . ; -- don't include this report's ^TMP
"RTN","HMPEQ",140,0)
 . . S RNODE="^TMP("""_HMPX_""","_J_")"
"RTN","HMPEQ",141,0)
 . . I RNODE=DATA,J=$J Q
"RTN","HMPEQ",142,0)
 . . S CNT=CNT+1
"RTN","HMPEQ",143,0)
 . . S @DATA@("tmpJobNodes",CNT,"rootNode")=RNODE
"RTN","HMPEQ",144,0)
 . . S Y=$O(^TMP(HMPX,J," "),-1)
"RTN","HMPEQ",145,0)
 . . S:'$L(Y) Y=$O(^TMP(HMPX,J,""),-1)
"RTN","HMPEQ",146,0)
 . . S @DATA@("tmpJobNodes",CNT,"lastNode")=Y
"RTN","HMPEQ",147,0)
 ;
"RTN","HMPEQ",148,0)
 S (J,CNT)=0
"RTN","HMPEQ",149,0)
 F  S J=$O(^TMP(J)) Q:'J  D
"RTN","HMPEQ",150,0)
 . S HMPX="VPQ~"
"RTN","HMPEQ",151,0)
 . F  S HMPX=$O(^TMP(J,HMPX)) Q:$E(HMPX,1,3)'="HMP"  D
"RTN","HMPEQ",152,0)
 . . S CNT=CNT+1
"RTN","HMPEQ",153,0)
 . . S @DATA@("jobTmpNodes",CNT,"rootNode")="^TMP("_J_","""_HMPX_""")"
"RTN","HMPEQ",154,0)
 . . S Y=$O(^TMP(J,HMPX," "),-1)
"RTN","HMPEQ",155,0)
 . . S:'$L(Y) Y=$O(^TMP(J,HMPX,""),-1)
"RTN","HMPEQ",156,0)
 . . S @DATA@("jobTmpNodes",CNT,"lastNode")=Y
"RTN","HMPEQ",157,0)
 ;
"RTN","HMPEQ",158,0)
 Q
"RTN","HMPEQ",159,0)
 ;
"RTN","HMPEQ",160,0)
GETGLBS(RET) ; -- get summary info on HMP related temp globals
"RTN","HMPEQ",161,0)
 ; RPC: HMPM EVT QUE GET GLBS (future)
"RTN","HMPEQ",162,0)
 N HMPDATA,HMPERR
"RTN","HMPEQ",163,0)
 S HMPDATA=$NA(^TMP("HMPM EVT QUE GET GLBS",$J))
"RTN","HMPEQ",164,0)
 K @HMPDATA
"RTN","HMPEQ",165,0)
 D GLBS(HMPDATA)
"RTN","HMPEQ",166,0)
 D ENCODE^HMPJSON(HMPDATA,RET,"HMPERR")
"RTN","HMPEQ",167,0)
 K @HMPDATA
"RTN","HMPEQ",168,0)
 Q
"RTN","HMPEQ",169,0)
 ;
"RTN","HMPEQ",170,0)
NOROWS(MSG) ; -- add standard text lines to indicate no rows to display
"RTN","HMPEQ",171,0)
 S VALMCNT=1
"RTN","HMPEQ",172,0)
 S @VALMAR@(VALMCNT,0)=""
"RTN","HMPEQ",173,0)
 S VALMCNT=2
"RTN","HMPEQ",174,0)
 S @VALMAR@(VALMCNT,0)="     o  "_MSG
"RTN","HMPEQ",175,0)
 D CNTRL^VALM10(VALMCNT,2,78,IOINHI,IOINORM)
"RTN","HMPEQ",176,0)
 Q
"RTN","HMPEQ",177,0)
 ;
"RTN","HMPEQLM")
0^90^B113676837
"RTN","HMPEQLM",1,0)
HMPEQLM ;SLC/MJK,ASMR/RRB - Event Queue Manager;30-JUN-2014
"RTN","HMPEQLM",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPEQLM",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEQLM",4,0)
 ;
"RTN","HMPEQLM",5,0)
 Q
"RTN","HMPEQLM",6,0)
 ;
"RTN","HMPEQLM",7,0)
EN ; -- main entry point for HMPM EVT QUE MGR
"RTN","HMPEQLM",8,0)
 N HMPSRV,HMPCSTRM,HMPDOM,HMPFIL,HMPWAIT,HMPDFN,HMPLIM
"RTN","HMPEQLM",9,0)
 ;
"RTN","HMPEQLM",10,0)
 D DFLTS
"RTN","HMPEQLM",11,0)
 ;
"RTN","HMPEQLM",12,0)
 S HMPSRV=$$GETSRV($G(HMPSRV))
"RTN","HMPEQLM",13,0)
 Q:$G(HMPSRV)<1
"RTN","HMPEQLM",14,0)
 ;
"RTN","HMPEQLM",15,0)
 S:$G(HMPDOM)="" HMPDOM="ALL"
"RTN","HMPEQLM",16,0)
 S:$G(HMPFIL)="" HMPFIL="A"
"RTN","HMPEQLM",17,0)
 D EN^VALM("HMPM EVT QUE MGR")
"RTN","HMPEQLM",18,0)
 Q
"RTN","HMPEQLM",19,0)
 ;
"RTN","HMPEQLM",20,0)
HDR ; -- header code
"RTN","HMPEQLM",21,0)
 N X,SRV0,SRVNM,LASTUP,REPEAT,FILLER  K VALMHDR
"RTN","HMPEQLM",22,0)
 S $P(FILLER," ",80)=" "
"RTN","HMPEQLM",23,0)
 S SRV0=$G(^HMP(800000,+$G(HMPSRV),0))
"RTN","HMPEQLM",24,0)
 S SRVNM=$P(SRV0,"^"),LASTUP=$P(SRV0,"^",2),REPEAT=$P(SRV0,"^",4)
"RTN","HMPEQLM",25,0)
 S X="       Server: "_SRVNM_$E(FILLER,1,30-$L(SRVNM))_"Last Update: "_LASTUP
"RTN","HMPEQLM",26,0)
 S:REPEAT X=X_" x"_REPEAT
"RTN","HMPEQLM",27,0)
 S VALMHDR(1)=X
"RTN","HMPEQLM",28,0)
 S X=$E(FILLER,1,44)_"End of Queue: "
"RTN","HMPEQLM",29,0)
 S X=X_$S(HMPCSTRM]"":$P(HMPCSTRM,"~",3)_"-"_$G(^XTMP(HMPCSTRM,"last")),1:"n/a")
"RTN","HMPEQLM",30,0)
 S VALMHDR(2)=X
"RTN","HMPEQLM",31,0)
 S VALMHDR(3)="  Last Stream: "_HMPCSTRM
"RTN","HMPEQLM",32,0)
 S X="Event Filters: "
"RTN","HMPEQLM",33,0)
 S X=X_"State="_$S(HMPFIL="A":"All",HMPFIL="W":"Waiting",1:"Processed")
"RTN","HMPEQLM",34,0)
 S X=X_"   Domain="_HMPDOM_$S(HMPDOM="ALL"!(HMPDOM["sync"):"",1:$S($G(^XTMP("HMP-off",HMPDOM)):" (stopped)",1:" (active)"))
"RTN","HMPEQLM",35,0)
 S X=X_"   Max="_HMPLIM
"RTN","HMPEQLM",36,0)
 S X=X_$S($G(HMPDFN):"   Patient="_HMPDFN,1:"")
"RTN","HMPEQLM",37,0)
 S VALMHDR(4)=X
"RTN","HMPEQLM",38,0)
 Q
"RTN","HMPEQLM",39,0)
 ;
"RTN","HMPEQLM",40,0)
INIT ; -- init variables and list array
"RTN","HMPEQLM",41,0)
 S:'$G(HMPLIM) HMPLIM=$$LIMIT
"RTN","HMPEQLM",42,0)
 D BUILD
"RTN","HMPEQLM",43,0)
 D HDR
"RTN","HMPEQLM",44,0)
 D MSG
"RTN","HMPEQLM",45,0)
 Q
"RTN","HMPEQLM",46,0)
 ;
"RTN","HMPEQLM",47,0)
BUILD ; -- build list
"RTN","HMPEQLM",48,0)
 N SEQ,SEQNODE,X,PARAMS,HMPEVTS,HMPCNT
"RTN","HMPEQLM",49,0)
 S HMPEVTS=$NA(^TMP("HMPM EVT QUE MGR",$J))
"RTN","HMPEQLM",50,0)
 K @HMPEVTS
"RTN","HMPEQLM",51,0)
 ;
"RTN","HMPEQLM",52,0)
 S PARAMS("server")=HMPSRV
"RTN","HMPEQLM",53,0)
 S PARAMS("domain")=HMPDOM
"RTN","HMPEQLM",54,0)
 S PARAMS("filter")=HMPFIL
"RTN","HMPEQLM",55,0)
 S PARAMS("dfn")=$G(HMPDFN)
"RTN","HMPEQLM",56,0)
 S PARAMS("max")=HMPLIM
"RTN","HMPEQLM",57,0)
 ;
"RTN","HMPEQLM",58,0)
 D EVTS^HMPEQ(HMPEVTS,.PARAMS)
"RTN","HMPEQLM",59,0)
 S HMPCSTRM=$G(@HMPEVTS@("stream"),"**** No Stream Found ****")
"RTN","HMPEQLM",60,0)
 ;
"RTN","HMPEQLM",61,0)
 S HMPWAIT=0
"RTN","HMPEQLM",62,0)
 D KILL
"RTN","HMPEQLM",63,0)
 S (VALMCNT,HMPCNT)=0
"RTN","HMPEQLM",64,0)
 S HMPI=0 F  S HMPI=$O(@HMPEVTS@("events",HMPI)) Q:'HMPI  D
"RTN","HMPEQLM",65,0)
 . S SEQNODE=$G(@HMPEVTS@("events",HMPI,"node"))
"RTN","HMPEQLM",66,0)
 . S SEQ=$G(@HMPEVTS@("events",HMPI,"sequence"))
"RTN","HMPEQLM",67,0)
 . S HMPCNT=HMPCNT+1
"RTN","HMPEQLM",68,0)
 . S X=""
"RTN","HMPEQLM",69,0)
 . S X=$$SETFLD^VALM1($J(HMPCNT,3),X,"ID")
"RTN","HMPEQLM",70,0)
 . I '$P(SEQNODE,"^",6) S HMPWAIT=1,X=$$SETFLD^VALM1("*",X,"STATE")
"RTN","HMPEQLM",71,0)
 . S X=$$SETFLD^VALM1($J(SEQ,5),X,"SEQ")
"RTN","HMPEQLM",72,0)
 . S X=$$SETFLD^VALM1(SEQNODE,X,"NODE")
"RTN","HMPEQLM",73,0)
 . D SET(X,SEQNODE)
"RTN","HMPEQLM",74,0)
 ;
"RTN","HMPEQLM",75,0)
 I VALMCNT=0 D NOROWS^HMPEQ("No events to display for specified criteria")
"RTN","HMPEQLM",76,0)
 K VALMBG
"RTN","HMPEQLM",77,0)
 S VALMBG=1
"RTN","HMPEQLM",78,0)
 K @HMPEVTS
"RTN","HMPEQLM",79,0)
 Q
"RTN","HMPEQLM",80,0)
 ;
"RTN","HMPEQLM",81,0)
SET(X,IDX) ; -- set the ListMan array and indexes
"RTN","HMPEQLM",82,0)
 K VALMCNT
"RTN","HMPEQLM",83,0)
 S VALMCNT=VALMCNT+1
"RTN","HMPEQLM",84,0)
 S @VALMAR@(VALMCNT,0)=X
"RTN","HMPEQLM",85,0)
 S @VALMAR@("IDX",VALMCNT,HMPCNT)=IDX
"RTN","HMPEQLM",86,0)
 S @VALMAR@("ENTRY",HMPCNT)=IDX
"RTN","HMPEQLM",87,0)
 Q
"RTN","HMPEQLM",88,0)
 ;
"RTN","HMPEQLM",89,0)
KILL ; -- kill off build data
"RTN","HMPEQLM",90,0)
 K @VALMAR
"RTN","HMPEQLM",91,0)
 ; clean up video control data
"RTN","HMPEQLM",92,0)
 D KILL^VALM10()
"RTN","HMPEQLM",93,0)
 Q
"RTN","HMPEQLM",94,0)
 ;
"RTN","HMPEQLM",95,0)
MSG ; -- set default message
"RTN","HMPEQLM",96,0)
 K VALMSG
"RTN","HMPEQLM",97,0)
 S VALMSG=$S(HMPWAIT:"   * waiting to be processed",1:"")
"RTN","HMPEQLM",98,0)
 Q
"RTN","HMPEQLM",99,0)
 ;
"RTN","HMPEQLM",100,0)
HELP ; -- help code
"RTN","HMPEQLM",101,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","HMPEQLM",102,0)
 Q
"RTN","HMPEQLM",103,0)
 ;
"RTN","HMPEQLM",104,0)
EXIT ; -- exit code
"RTN","HMPEQLM",105,0)
 ; -- save user criteria fro 7 days
"RTN","HMPEQLM",106,0)
 Q:'$G(DUZ)
"RTN","HMPEQLM",107,0)
 N NODE,X
"RTN","HMPEQLM",108,0)
 S NODE="HMPM EVT QUE MGR"
"RTN","HMPEQLM",109,0)
 K ^DISV(DUZ,NODE)
"RTN","HMPEQLM",110,0)
 F X="HMPSRV","HMPDOM","HMPFIL","HMPDFN","HMPLIM" I $G(@X)]"" S ^DISV(DUZ,NODE,X)=@X
"RTN","HMPEQLM",111,0)
 Q
"RTN","HMPEQLM",112,0)
 ;
"RTN","HMPEQLM",113,0)
DFLTS ; -- get user defaults
"RTN","HMPEQLM",114,0)
 Q:'$G(DUZ)
"RTN","HMPEQLM",115,0)
 N NODE,X
"RTN","HMPEQLM",116,0)
 S NODE="HMPM EVT QUE MGR"
"RTN","HMPEQLM",117,0)
 Q:'$D(^DISV(DUZ,NODE))
"RTN","HMPEQLM",118,0)
 S X=0 F  S X=$O(^DISV(DUZ,NODE,X)) Q:X=""  S @X=^(X)
"RTN","HMPEQLM",119,0)
 Q
"RTN","HMPEQLM",120,0)
 ;
"RTN","HMPEQLM",121,0)
EXPND ; -- expand code
"RTN","HMPEQLM",122,0)
 Q
"RTN","HMPEQLM",123,0)
 ;
"RTN","HMPEQLM",124,0)
REFRESH ; -- refresh display
"RTN","HMPEQLM",125,0)
 ; protocol: HMPM EVT QUE REFRESH
"RTN","HMPEQLM",126,0)
 D WAIT^DICD
"RTN","HMPEQLM",127,0)
 D BUILD
"RTN","HMPEQLM",128,0)
 D HDR
"RTN","HMPEQLM",129,0)
 D MSG
"RTN","HMPEQLM",130,0)
 S VALMBCK="R"
"RTN","HMPEQLM",131,0)
 Q
"RTN","HMPEQLM",132,0)
 ;
"RTN","HMPEQLM",133,0)
CS ; -- change server
"RTN","HMPEQLM",134,0)
 ; protocol: HMPM EVT QUE CHANGE SERVER
"RTN","HMPEQLM",135,0)
 D FULL^VALM1
"RTN","HMPEQLM",136,0)
 N SRV
"RTN","HMPEQLM",137,0)
 S SRV=$$GETSRV^HMPDJFSM()
"RTN","HMPEQLM",138,0)
 I +SRV>0 S HMPSRV=+SRV
"RTN","HMPEQLM",139,0)
 D REFRESH
"RTN","HMPEQLM",140,0)
 Q
"RTN","HMPEQLM",141,0)
 ;
"RTN","HMPEQLM",142,0)
CD ; -- change domain
"RTN","HMPEQLM",143,0)
 ; protocol: HMPM EVT QUE CHANGE DOMAIN
"RTN","HMPEQLM",144,0)
 N DIR,Y,X,DOMAINS,I,LIST,Y
"RTN","HMPEQLM",145,0)
 D FULL^VALM1
"RTN","HMPEQLM",146,0)
 D EVNTYPS^HMPDJFSM(.LIST)
"RTN","HMPEQLM",147,0)
 S I=0 F  S I=$O(LIST(I)) Q:'I  S Y(LIST(I))=""
"RTN","HMPEQLM",148,0)
 F X="syncNoop","syncDomain","syncError","syncStart","syncDone" S Y(X)=""
"RTN","HMPEQLM",149,0)
 S X="",I=0
"RTN","HMPEQLM",150,0)
 F  S X=$O(Y(X)) Q:X=""  S I=I+1 S DOMAINS(I)=X
"RTN","HMPEQLM",151,0)
 S DOMAINS(999)="ALL"
"RTN","HMPEQLM",152,0)
 S X="S^"
"RTN","HMPEQLM",153,0)
 S I=0 F  S I=$O(DOMAINS(I)) Q:I=""  S X=X_I_":"_$G(DOMAINS(I))_";"
"RTN","HMPEQLM",154,0)
 S DIR(0)=X
"RTN","HMPEQLM",155,0)
 S DIR("A")="Select Domain"
"RTN","HMPEQLM",156,0)
 S DIR("B")="ALL"
"RTN","HMPEQLM",157,0)
 D ^DIR
"RTN","HMPEQLM",158,0)
 I +Y>0 S HMPDOM=$G(DOMAINS(+Y))
"RTN","HMPEQLM",159,0)
 D REFRESH
"RTN","HMPEQLM",160,0)
 Q
"RTN","HMPEQLM",161,0)
 ;
"RTN","HMPEQLM",162,0)
LIMIT() ; -- get freshness events display limit
"RTN","HMPEQLM",163,0)
 ; -- set high testing in order to see many event types 
"RTN","HMPEQLM",164,0)
 Q $S($$PROD^XUPROD():10,1:200)
"RTN","HMPEQLM",165,0)
 ;
"RTN","HMPEQLM",166,0)
FILTER ; -- allows user to filter list
"RTN","HMPEQLM",167,0)
 ; protocol: HMPM EVT QUE FILTER
"RTN","HMPEQLM",168,0)
 N DIR,Y,X
"RTN","HMPEQLM",169,0)
 D FULL^VALM1
"RTN","HMPEQLM",170,0)
 S X="S^"
"RTN","HMPEQLM",171,0)
 S X=X_"A:All events;"
"RTN","HMPEQLM",172,0)
 S X=X_"P:Processed events;"
"RTN","HMPEQLM",173,0)
 S X=X_"W:Waiting to be processed events"
"RTN","HMPEQLM",174,0)
 S DIR(0)=X
"RTN","HMPEQLM",175,0)
 S DIR("A")="Select Event State"
"RTN","HMPEQLM",176,0)
 S DIR("B")="All events"
"RTN","HMPEQLM",177,0)
 D ^DIR
"RTN","HMPEQLM",178,0)
 I Y="P" S HMPFIL=Y
"RTN","HMPEQLM",179,0)
 I Y="W" S HMPFIL=Y
"RTN","HMPEQLM",180,0)
 I Y="A" S HMPFIL=Y
"RTN","HMPEQLM",181,0)
 D REFRESH
"RTN","HMPEQLM",182,0)
 Q
"RTN","HMPEQLM",183,0)
 ;
"RTN","HMPEQLM",184,0)
SELPT ; select patient
"RTN","HMPEQLM",185,0)
 ; protocol" HMPM EVT QUE SELECT PATIENT
"RTN","HMPEQLM",186,0)
 D FULL^VALM1
"RTN","HMPEQLM",187,0)
 N Y,DIC
"RTN","HMPEQLM",188,0)
 S DIC="^DPT("
"RTN","HMPEQLM",189,0)
 S DIC(0)="AEMQ"
"RTN","HMPEQLM",190,0)
 D ^DIC
"RTN","HMPEQLM",191,0)
 S HMPDFN=$S(+Y>0:+Y,1:"")
"RTN","HMPEQLM",192,0)
 D REFRESH
"RTN","HMPEQLM",193,0)
 Q
"RTN","HMPEQLM",194,0)
 ;
"RTN","HMPEQLM",195,0)
CM ; change max
"RTN","HMPEQLM",196,0)
 ; protocol: HMPM EVT QUE CHANGE MAX LISTED
"RTN","HMPEQLM",197,0)
 D FULL^VALM1
"RTN","HMPEQLM",198,0)
 N DIR
"RTN","HMPEQLM",199,0)
 S DIR(0)="N^10:1000:0"
"RTN","HMPEQLM",200,0)
 S DIR("B")=$$LIMIT
"RTN","HMPEQLM",201,0)
 S DIR("A")="Set Limit: "
"RTN","HMPEQLM",202,0)
 D ^DIR
"RTN","HMPEQLM",203,0)
 I +Y>0 S HMPLIM=+Y
"RTN","HMPEQLM",204,0)
 D REFRESH
"RTN","HMPEQLM",205,0)
 Q
"RTN","HMPEQLM",206,0)
 ;
"RTN","HMPEQLM",207,0)
DETAIL ; -- detailed display
"RTN","HMPEQLM",208,0)
 ; protocol: HMPM EVT QUE DISPLAY DETAILS
"RTN","HMPEQLM",209,0)
 N HMPI,VALMY,HMPDASH,POST,DOMAIN,HMPREF,HMPDATA
"RTN","HMPEQLM",210,0)
 S $P(HMPDASH,"=",80)=""
"RTN","HMPEQLM",211,0)
 D FULL^VALM1
"RTN","HMPEQLM",212,0)
 D EN^VALM2(XQORNOD(0),"OS")
"RTN","HMPEQLM",213,0)
 S HMPI=+$O(VALMY(""))
"RTN","HMPEQLM",214,0)
 I HMPI>0 D
"RTN","HMPEQLM",215,0)
 . S HMPREF="HMPDATA"
"RTN","HMPEQLM",216,0)
 . S POST=$G(@VALMAR@("ENTRY",HMPI))
"RTN","HMPEQLM",217,0)
 . W !!,HMPDASH
"RTN","HMPEQLM",218,0)
 . W !!,"Posted Event Data: ",POST
"RTN","HMPEQLM",219,0)
 . I $P(POST,"^",5) D
"RTN","HMPEQLM",220,0)
 . . K HMPDATA
"RTN","HMPEQLM",221,0)
 . . S HMPDATA(1,"label")="Added To Stream"
"RTN","HMPEQLM",222,0)
 . . S HMPDATA(1,"value")=$$GETIME($P(HMPCSTRM,"~",3),$P(POST,"^",5))
"RTN","HMPEQLM",223,0)
 . . D RENDER
"RTN","HMPEQLM",224,0)
 . ;
"RTN","HMPEQLM",225,0)
 . I $P(POST,"^",6) D
"RTN","HMPEQLM",226,0)
 . . K HMPDATA
"RTN","HMPEQLM",227,0)
 . . S HMPDATA(1,"label")="Processed Time"
"RTN","HMPEQLM",228,0)
 . . S HMPDATA(1,"value")=$$GETIME($P(HMPCSTRM,"~",3),$P(POST,"^",6))
"RTN","HMPEQLM",229,0)
 . . I $P(POST,"^",6)<$P(POST,"^",5) D
"RTN","HMPEQLM",230,0)
 . . . S HMPDATA(2,"label")=""
"RTN","HMPEQLM",231,0)
 . . . S HMPDATA(2,"value")="       - time before 'add' time means processed on a different date"
"RTN","HMPEQLM",232,0)
 . . D RENDER
"RTN","HMPEQLM",233,0)
 . ;
"RTN","HMPEQLM",234,0)
 . ; -- domain info parsing and display
"RTN","HMPEQLM",235,0)
 . S DOMAIN=$P(POST,"^",2)
"RTN","HMPEQLM",236,0)
 . ;
"RTN","HMPEQLM",237,0)
 . I +POST D PAT(HMPREF,+POST),RENDER
"RTN","HMPEQLM",238,0)
 . I 'POST,DOMAIN="patient"!(DOMAIN="pt-select") D PAT(HMPREF,+$P(POST,"^",3)),RENDER
"RTN","HMPEQLM",239,0)
 . ;
"RTN","HMPEQLM",240,0)
 . I DOMAIN="med"!(DOMAIN="order") D MED(HMPREF,+$P(POST,"^",3)),RENDER
"RTN","HMPEQLM",241,0)
 . I DOMAIN="consult" D CONSULT(HMPREF,+$P(POST,"^",3)),RENDER
"RTN","HMPEQLM",242,0)
 . ; -- TODO: Need to understand HL7-type messages parsed in XQOR^HMPEVNT
"RTN","HMPEQLM",243,0)
 . ;I DOMAIN="document" D TIU(+$P(POST,"^",3))
"RTN","HMPEQLM",244,0)
 . ;I DOMAIN="lab" D LAB()
"RTN","HMPEQLM",245,0)
 . ;I DOMAIN="image" D IMAGE()
"RTN","HMPEQLM",246,0)
 . ;
"RTN","HMPEQLM",247,0)
 . I DOMAIN="visit" D
"RTN","HMPEQLM",248,0)
 . . N IEN
"RTN","HMPEQLM",249,0)
 . . S IEN=$P(POST,"^",3)
"RTN","HMPEQLM",250,0)
 . . I $E(IEN)="H" D ADM(HMPREF,+$E(IEN,2,999)),RENDER Q
"RTN","HMPEQLM",251,0)
 . . D VISIT(HMPREF,+IEN),RENDER
"RTN","HMPEQLM",252,0)
 . ;
"RTN","HMPEQLM",253,0)
 . I DOMAIN="appointment" D APPT(HMPREF,$P(POST,"^",3)),RENDER
"RTN","HMPEQLM",254,0)
 . ;
"RTN","HMPEQLM",255,0)
 . I DOMAIN="user" D USER(HMPREF,+$P(POST,"^",3)),RENDER
"RTN","HMPEQLM",256,0)
 . ;
"RTN","HMPEQLM",257,0)
 . I DOMAIN="roster" D ROSTER(HMPREF,+$P(POST,"^",3)),RENDER
"RTN","HMPEQLM",258,0)
 . ;
"RTN","HMPEQLM",259,0)
 . ; -- HMP PATIENT OBJECT (#800000.1) domains
"RTN","HMPEQLM",260,0)
 . I DOMAIN="auxiliary" D AUX(HMPREF,+$P(POST,"^",3)),RENDER
"RTN","HMPEQLM",261,0)
 . I DOMAIN="diagnosis" D DIAG(HMPREF,+$P(POST,"^",3)),RENDER
"RTN","HMPEQLM",262,0)
 . I DOMAIN="roadtrip" D ROAD(HMPREF,+$P(POST,"^",3)),RENDER
"RTN","HMPEQLM",263,0)
 . I DOMAIN="task" D TASK(HMPREF,+$P(POST,"^",3)),RENDER
"RTN","HMPEQLM",264,0)
 . ;
"RTN","HMPEQLM",265,0)
 . W !!,HMPDASH
"RTN","HMPEQLM",266,0)
 . D PAUSE^VALM1
"RTN","HMPEQLM",267,0)
 ;
"RTN","HMPEQLM",268,0)
 K VALMBCK
"RTN","HMPEQLM",269,0)
 S VALMBCK="R"
"RTN","HMPEQLM",270,0)
 Q
"RTN","HMPEQLM",271,0)
 ;
"RTN","HMPEQLM",272,0)
GETIME(DATE,SECS) ; -- get time
"RTN","HMPEQLM",273,0)
 N X
"RTN","HMPEQLM",274,0)
 S X=$$FMTH^XLFDT(DATE),$P(X,",",2)=SECS
"RTN","HMPEQLM",275,0)
 Q $P($$HTE^XLFDT(X,"S"),"@",2)
"RTN","HMPEQLM",276,0)
 ;
"RTN","HMPEQLM",277,0)
PAT(HMPZ,DFN) ; -- get patient info
"RTN","HMPEQLM",278,0)
 N VA,HMPY,VAROOT
"RTN","HMPEQLM",279,0)
 S VAROOT="HMPY"
"RTN","HMPEQLM",280,0)
 D DEM^VADPT
"RTN","HMPEQLM",281,0)
 K @HMPZ
"RTN","HMPEQLM",282,0)
 S @HMPZ@(1,"label")="Patient Short ID"
"RTN","HMPEQLM",283,0)
 S @HMPZ@(1,"value")=$G(VA("BID"))
"RTN","HMPEQLM",284,0)
 Q
"RTN","HMPEQLM",285,0)
 ;
"RTN","HMPEQLM",286,0)
MED(HMPZ,ORDER) ; -- display order info
"RTN","HMPEQLM",287,0)
 N IEN,ORDABLE,CNT
"RTN","HMPEQLM",288,0)
 K @HMPZ
"RTN","HMPEQLM",289,0)
 S (CNT,IEN)=0
"RTN","HMPEQLM",290,0)
 F  S IEN=$O(^OR(100,+$G(ORDER),.1,IEN)) Q:'IEN  S ORDABLE=+$G(^(IEN,0)) D
"RTN","HMPEQLM",291,0)
 . S CNT=CNT+1
"RTN","HMPEQLM",292,0)
 . S @HMPZ@(CNT,"label")="Orderable"
"RTN","HMPEQLM",293,0)
 . S @HMPZ@(CNT,"value")=$P($G(^ORD(101.43,ORDABLE,0)),"^")
"RTN","HMPEQLM",294,0)
 Q
"RTN","HMPEQLM",295,0)
 ;
"RTN","HMPEQLM",296,0)
TIU(HMPZ,IEN) ; -- get TIU document type
"RTN","HMPEQLM",297,0)
 K @HMPZ
"RTN","HMPEQLM",298,0)
 S @HMPZ@(1,"label")="Document Type"
"RTN","HMPEQLM",299,0)
 S @HMPZ@(1,"value")=$$GET1^DIQ(8925.1,+$$GET1^DIQ(8925,IEN_",",.01)_",",.01)
"RTN","HMPEQLM",300,0)
 Q
"RTN","HMPEQLM",301,0)
 ;
"RTN","HMPEQLM",302,0)
USER(HMPZ,IEN) ; -- get user name
"RTN","HMPEQLM",303,0)
 K @HMPZ
"RTN","HMPEQLM",304,0)
 S @HMPZ@(1,"label")="User"
"RTN","HMPEQLM",305,0)
 S @HMPZ@(1,"value")=$$GET1^DIQ(200,IEN_",",.01)
"RTN","HMPEQLM",306,0)
 Q
"RTN","HMPEQLM",307,0)
 ;
"RTN","HMPEQLM",308,0)
ROSTER(HMPZ,IEN) ; -- get roster name
"RTN","HMPEQLM",309,0)
 K @HMPZ
"RTN","HMPEQLM",310,0)
 S @HMPZ@(1,"label")="Roster"
"RTN","HMPEQLM",311,0)
 S @HMPZ@(1,"value")=$$GET1^DIQ(800001.2,IEN_",",.01)
"RTN","HMPEQLM",312,0)
 Q
"RTN","HMPEQLM",313,0)
 ;
"RTN","HMPEQLM",314,0)
 ; -- TODO: is this real or just a dev anomaly
"RTN","HMPEQLM",315,0)
AUX(HMPZ,IEN) ; -- get auxiliary uid
"RTN","HMPEQLM",316,0)
 K @HMPZ
"RTN","HMPEQLM",317,0)
 S @HMPZ@(1,"label")="Auxiliary UID"
"RTN","HMPEQLM",318,0)
 S @HMPZ@(1,"value")=$$GET1^DIQ(800000.1,IEN_",",.01)
"RTN","HMPEQLM",319,0)
 Q
"RTN","HMPEQLM",320,0)
 ;
"RTN","HMPEQLM",321,0)
 ; -- TODO: is this real or just a dev anomaly
"RTN","HMPEQLM",322,0)
DIAG(HMPZ,IEN) ; -- get diagnosis uid
"RTN","HMPEQLM",323,0)
 K @HMPZ
"RTN","HMPEQLM",324,0)
 S @HMPZ@(1,"label")="Diagnosis UID"
"RTN","HMPEQLM",325,0)
 S @HMPZ@(1,"value")=$$GET1^DIQ(800000.1,IEN_",",.01)
"RTN","HMPEQLM",326,0)
 Q
"RTN","HMPEQLM",327,0)
 ;
"RTN","HMPEQLM",328,0)
 ; -- TODO: is this real or just a dev anomaly
"RTN","HMPEQLM",329,0)
ROAD(HMPZ,IEN) ; -- get roadtrip uid
"RTN","HMPEQLM",330,0)
 K @HMPZ
"RTN","HMPEQLM",331,0)
 S @HMPZ@(1,"label")="Road Trip UID"
"RTN","HMPEQLM",332,0)
 S @HMPZ@(1,"value")=$$GET1^DIQ(800000.1,IEN_",",.01)
"RTN","HMPEQLM",333,0)
 Q
"RTN","HMPEQLM",334,0)
 ;
"RTN","HMPEQLM",335,0)
TASK(HMPZ,IEN) ; -- get task uid
"RTN","HMPEQLM",336,0)
 K @HMPZ
"RTN","HMPEQLM",337,0)
 S @HMPZ@(1,"label")="Task UID"
"RTN","HMPEQLM",338,0)
 S @HMPZ@(1,"value")=$$GET1^DIQ(800000.1,IEN_",",.01)
"RTN","HMPEQLM",339,0)
 Q
"RTN","HMPEQLM",340,0)
 ;
"RTN","HMPEQLM",341,0)
CONSULT(HMPZ,IEN) ; -- get consult date
"RTN","HMPEQLM",342,0)
 K @HMPZ
"RTN","HMPEQLM",343,0)
 S @HMPZ@(1,"label")="Consult Date/Time"
"RTN","HMPEQLM",344,0)
 S @HMPZ@(1,"value")=$$GET1^DIQ(123,IEN_",",.01)
"RTN","HMPEQLM",345,0)
 Q
"RTN","HMPEQLM",346,0)
 ;
"RTN","HMPEQLM",347,0)
VISIT(HMPZ,IEN) ; -- get visit date/time
"RTN","HMPEQLM",348,0)
 K @HMPZ
"RTN","HMPEQLM",349,0)
 S @HMPZ@(1,"label")="Visit date/time"
"RTN","HMPEQLM",350,0)
 S @HMPZ@(1,"value")=$$GET1^DIQ(9000010,IEN_",",.01)
"RTN","HMPEQLM",351,0)
 Q
"RTN","HMPEQLM",352,0)
 ;
"RTN","HMPEQLM",353,0)
ADM(HMPZ,IEN) ; -- get admission date/time
"RTN","HMPEQLM",354,0)
 K @HMPZ
"RTN","HMPEQLM",355,0)
 S @HMPZ@(1,"label")="Admission date/time"
"RTN","HMPEQLM",356,0)
 S @HMPZ@(1,"value")=$$GET1^DIQ(405,IEN_",",.01)
"RTN","HMPEQLM",357,0)
 Q
"RTN","HMPEQLM",358,0)
 ;
"RTN","HMPEQLM",359,0)
APPT(HMPZ,MAP) ; -- get appointment data/time and clinic
"RTN","HMPEQLM",360,0)
 N IENS
"RTN","HMPEQLM",361,0)
 S IENS=+$P(MAP,";",3)_","_+$P(MAP,";",2)_","
"RTN","HMPEQLM",362,0)
 K @HMPZ
"RTN","HMPEQLM",363,0)
 S @HMPZ@(1,"label")="Appointment date/time"
"RTN","HMPEQLM",364,0)
 S @HMPZ@(1,"value")=$$GET1^DIQ(2.98,IENS,.001)
"RTN","HMPEQLM",365,0)
 S @HMPZ@(2,"label")="Clinic"
"RTN","HMPEQLM",366,0)
 S @HMPZ@(2,"value")=$$GET1^DIQ(2.98,IENS,.01)
"RTN","HMPEQLM",367,0)
 Q
"RTN","HMPEQLM",368,0)
 ;
"RTN","HMPEQLM",369,0)
RENDER ; -- write info
"RTN","HMPEQLM",370,0)
 N I
"RTN","HMPEQLM",371,0)
 S I=0 F  S I=$O(HMPDATA(I)) Q:'I  W !,"  o  ",$G(HMPDATA(I,"label")),": ",$G(HMPDATA(I,"value"))
"RTN","HMPEQLM",372,0)
 Q
"RTN","HMPEQLM",373,0)
 ;
"RTN","HMPEQLM",374,0)
SHOWHMPN ; -- show HMP global nodes
"RTN","HMPEQLM",375,0)
 ; protocol: HMPM EVT QUE SHOW TEMP GLOBALS
"RTN","HMPEQLM",376,0)
 D FULL^VALM1
"RTN","HMPEQLM",377,0)
 D EN^HMPEQLM2($G(HMPSRV))
"RTN","HMPEQLM",378,0)
 D REFRESH
"RTN","HMPEQLM",379,0)
 Q
"RTN","HMPEQLM",380,0)
 ;
"RTN","HMPEQLM",381,0)
FSHRPT ; -- show overall freshness report
"RTN","HMPEQLM",382,0)
 ; protocol: HMPM EVT QUE FRESHNESS REPORT
"RTN","HMPEQLM",383,0)
 D FULL^VALM1
"RTN","HMPEQLM",384,0)
 D EN^HMPEQLM1($G(HMPSRV))
"RTN","HMPEQLM",385,0)
 D REFRESH
"RTN","HMPEQLM",386,0)
 Q
"RTN","HMPEQLM",387,0)
 ;
"RTN","HMPEQLM",388,0)
EMERSTOP ; -- stop freshness
"RTN","HMPEQLM",389,0)
 ; protocol: HMPM EVT QUE EMERGENCY STOP (not distributed)
"RTN","HMPEQLM",390,0)
 D FULL^VALM1
"RTN","HMPEQLM",391,0)
 ;D EMERSTOP^HMPDJFSM
"RTN","HMPEQLM",392,0)
 D REFRESH
"RTN","HMPEQLM",393,0)
 Q
"RTN","HMPEQLM",394,0)
 ;
"RTN","HMPEQLM",395,0)
RSTRTFR ; -- re-start freshness
"RTN","HMPEQLM",396,0)
 ; protocol: HMPM EVT QUE RESTART FRESHNESS (not distributed)
"RTN","HMPEQLM",397,0)
 D FULL^VALM1
"RTN","HMPEQLM",398,0)
 ;D RSTRTFR^HMPDJFSM
"RTN","HMPEQLM",399,0)
 D REFRESH
"RTN","HMPEQLM",400,0)
 Q
"RTN","HMPEQLM",401,0)
 ;
"RTN","HMPEQLM",402,0)
GETSRV(DFLT) ; Return the IEN for the server to monitor
"RTN","HMPEQLM",403,0)
 N DIC,Y
"RTN","HMPEQLM",404,0)
 S DIC="^HMP(800000,",DIC(0)="AEMQ",DIC("A")="Select HMP server instance: "
"RTN","HMPEQLM",405,0)
 I $G(DFLT) S DIC("B")=$P($G(^HMP(800000,$G(DFLT),0)),"^")
"RTN","HMPEQLM",406,0)
 D ^DIC
"RTN","HMPEQLM",407,0)
 Q +Y
"RTN","HMPEQLM",408,0)
 ;
"RTN","HMPEQLM1")
0^91^B7071509
"RTN","HMPEQLM1",1,0)
HMPEQLM1 ;SLC/MJK,ASMR/RRB - HMP Freshness Report;02-JUL-2014
"RTN","HMPEQLM1",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPEQLM1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEQLM1",4,0)
 ;
"RTN","HMPEQLM1",5,0)
 Q
"RTN","HMPEQLM1",6,0)
 ;
"RTN","HMPEQLM1",7,0)
EN(HMPSRV) ; -- main entry point for HMPM EVT QUE FRESHNESS REPORT
"RTN","HMPEQLM1",8,0)
 D EN^VALM("HMPM EVT QUE FRESHNESS REPORT")
"RTN","HMPEQLM1",9,0)
 Q
"RTN","HMPEQLM1",10,0)
 ;
"RTN","HMPEQLM1",11,0)
HDR ; -- header code
"RTN","HMPEQLM1",12,0)
 Q
"RTN","HMPEQLM1",13,0)
 ;
"RTN","HMPEQLM1",14,0)
INIT ; -- init variables and list array
"RTN","HMPEQLM1",15,0)
 N IEN,SRVNM,HMPDATA,SEQ,X
"RTN","HMPEQLM1",16,0)
 ;
"RTN","HMPEQLM1",17,0)
 D KILL
"RTN","HMPEQLM1",18,0)
 S VALMCNT=0
"RTN","HMPEQLM1",19,0)
 ;
"RTN","HMPEQLM1",20,0)
 ; -- show current server and then the rest
"RTN","HMPEQLM1",21,0)
 I +$G(HMPSRV) D SRV^HMPEQ("HMPDATA",+HMPSRV),SRV(.HMPDATA)
"RTN","HMPEQLM1",22,0)
 D SET("   ")
"RTN","HMPEQLM1",23,0)
 ;
"RTN","HMPEQLM1",24,0)
 ; -- loop & sort thru defined HMP servers
"RTN","HMPEQLM1",25,0)
 K HMPDATA
"RTN","HMPEQLM1",26,0)
 S HMPDATA=$NA(^TMP("HMP FRESHNESS RPT",$J))
"RTN","HMPEQLM1",27,0)
 K @HMPDATA
"RTN","HMPEQLM1",28,0)
 D SRVS^HMPEQ(HMPDATA)
"RTN","HMPEQLM1",29,0)
 S SEQ=0
"RTN","HMPEQLM1",30,0)
 F  S SEQ=$O(@HMPDATA@("servers",SEQ)) Q:'SEQ  d
"RTN","HMPEQLM1",31,0)
 . M X=@HMPDATA@("servers",SEQ) D SRV(.X)
"RTN","HMPEQLM1",32,0)
 ;
"RTN","HMPEQLM1",33,0)
 I VALMCNT=0 D NOROWS^HMPEQ("No HMP server information to display")
"RTN","HMPEQLM1",34,0)
 S VALMBG=1
"RTN","HMPEQLM1",35,0)
 S VALMSG="* updates waiting"
"RTN","HMPEQLM1",36,0)
 K @HMPDATA
"RTN","HMPEQLM1",37,0)
 Q
"RTN","HMPEQLM1",38,0)
 ;
"RTN","HMPEQLM1",39,0)
SRV(SRV) ; -- process one server
"RTN","HMPEQLM1",40,0)
 N X,SEQ
"RTN","HMPEQLM1",41,0)
 S X=""
"RTN","HMPEQLM1",42,0)
 S X=$$SETFLD^VALM1($G(SRV("name")),X,"SERVER")
"RTN","HMPEQLM1",43,0)
 S X=$$SETFLD^VALM1($G(SRV("lastUpdate")),X,"LAST")
"RTN","HMPEQLM1",44,0)
 S X=$$SETFLD^VALM1($S($G(SRV("repeated")):" x"_$G(SRV("repeated")),1:""),X,"REPEATED")
"RTN","HMPEQLM1",45,0)
 S X=$$SETFLD^VALM1($G(SRV("queueEnd")),X,"END")
"RTN","HMPEQLM1",46,0)
 I $G(SRV("lastUpdate")),$G(SRV("lastUpdate"))'=$G(SRV("queueEnd")) S X=$$SETFLD^VALM1("*",X,"BEHIND")
"RTN","HMPEQLM1",47,0)
 D SET(X)
"RTN","HMPEQLM1",48,0)
 D FLDCTRL^VALM10(VALMCNT,"SERVER",IOINHI,IOINORM)
"RTN","HMPEQLM1",49,0)
 ;
"RTN","HMPEQLM1",50,0)
 I '$D(SRV("extracts")) Q
"RTN","HMPEQLM1",51,0)
 ; -- loop thru extracts for this server
"RTN","HMPEQLM1",52,0)
 D SET($J("Extract Information:",25))
"RTN","HMPEQLM1",53,0)
 S SEQ=0
"RTN","HMPEQLM1",54,0)
 F  S SEQ=$O(SRV("extracts",SEQ)) Q:'SEQ  D
"RTN","HMPEQLM1",55,0)
 . S X=$J($G(SRV("extracts",SEQ,"domain")),15)
"RTN","HMPEQLM1",56,0)
 . S X=X_"     Task(s): "_$G(SRV("extracts",SEQ,"tasks"))
"RTN","HMPEQLM1",57,0)
 . D SET(X)
"RTN","HMPEQLM1",58,0)
 . I $G(SRV("extracts",SEQ,"waiting")) D SET($J("Waiting: ",29)_$G(SRV("extracts",SEQ,"waiting"))_" seconds") Q
"RTN","HMPEQLM1",59,0)
 . D SET($J("Extracting: "_$G(SRV("extracts",SEQ,"lastCount")),40))
"RTN","HMPEQLM1",60,0)
 Q
"RTN","HMPEQLM1",61,0)
 ;
"RTN","HMPEQLM1",62,0)
SET(X,BOLD) ; -- add line
"RTN","HMPEQLM1",63,0)
 S VALMCNT=VALMCNT+1
"RTN","HMPEQLM1",64,0)
 S @VALMAR@(VALMCNT,0)=X
"RTN","HMPEQLM1",65,0)
 Q
"RTN","HMPEQLM1",66,0)
 ;
"RTN","HMPEQLM1",67,0)
KILL ; -- kill off build data
"RTN","HMPEQLM1",68,0)
 K @VALMAR
"RTN","HMPEQLM1",69,0)
 ; clean up video control data
"RTN","HMPEQLM1",70,0)
 D KILL^VALM10()
"RTN","HMPEQLM1",71,0)
 Q
"RTN","HMPEQLM1",72,0)
 ;
"RTN","HMPEQLM1",73,0)
HELP ; -- help code
"RTN","HMPEQLM1",74,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","HMPEQLM1",75,0)
 Q
"RTN","HMPEQLM1",76,0)
 ;
"RTN","HMPEQLM1",77,0)
EXIT ; -- exit code
"RTN","HMPEQLM1",78,0)
 Q
"RTN","HMPEQLM1",79,0)
 ;
"RTN","HMPEQLM1",80,0)
EXPND ; -- expand code
"RTN","HMPEQLM1",81,0)
 Q
"RTN","HMPEQLM1",82,0)
 ;
"RTN","HMPEQLM2")
0^92^B3277771
"RTN","HMPEQLM2",1,0)
HMPEQLM2 ;SLC/MJK,ASMR/RRB - HMP Temporary Global Lister;01-JUL-2014
"RTN","HMPEQLM2",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPEQLM2",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEQLM2",4,0)
 ;
"RTN","HMPEQLM2",5,0)
 Q
"RTN","HMPEQLM2",6,0)
 ;
"RTN","HMPEQLM2",7,0)
EN(HMPSRV) ; -- main entry point for HMPM EVT QUE GLOBALS
"RTN","HMPEQLM2",8,0)
 D EN^VALM("HMPM EVT QUE GLOBALS")
"RTN","HMPEQLM2",9,0)
 Q
"RTN","HMPEQLM2",10,0)
 ;
"RTN","HMPEQLM2",11,0)
HDR ; -- header code
"RTN","HMPEQLM2",12,0)
 Q
"RTN","HMPEQLM2",13,0)
 ;
"RTN","HMPEQLM2",14,0)
INIT ; -- init variables and list array
"RTN","HMPEQLM2",15,0)
 N SRVNM,HMPDATA,X,SEQ,TYPE
"RTN","HMPEQLM2",16,0)
 K HMPDATA
"RTN","HMPEQLM2",17,0)
 S HMPDATA=$NA(^TMP("HMP TEMP GLOBALS RPT",$J))
"RTN","HMPEQLM2",18,0)
 K @HMPDATA
"RTN","HMPEQLM2",19,0)
 D GLBS^HMPEQ(HMPDATA)
"RTN","HMPEQLM2",20,0)
 ;
"RTN","HMPEQLM2",21,0)
 D KILL
"RTN","HMPEQLM2",22,0)
 S VALMCNT=0
"RTN","HMPEQLM2",23,0)
 ;
"RTN","HMPEQLM2",24,0)
 ; -- just get selected server info if defined
"RTN","HMPEQLM2",25,0)
 S SRVNM=$S('$G(HMPSRV):"",1:$P($G(^HMP(800000,+$G(HMPSRV),0)),"^"))
"RTN","HMPEQLM2",26,0)
 S SEQ=0 F  S SEQ=$O(@HMPDATA@("xtmpNodes",SEQ)) Q:'SEQ  D
"RTN","HMPEQLM2",27,0)
 . M X=@HMPDATA@("xtmpNodes",SEQ) D:$G(X("server"))=SRVNM GLB(.X)
"RTN","HMPEQLM2",28,0)
 ;
"RTN","HMPEQLM2",29,0)
 S TYPE="" F  S TYPE=$O(@HMPDATA@(TYPE)) Q:TYPE=""  D
"RTN","HMPEQLM2",30,0)
 . D SET("  ")
"RTN","HMPEQLM2",31,0)
 . S SEQ=0 F  S SEQ=$O(@HMPDATA@(TYPE,SEQ)) Q:'SEQ  D
"RTN","HMPEQLM2",32,0)
 . . M X=@HMPDATA@(TYPE,SEQ) D GLB(.X)
"RTN","HMPEQLM2",33,0)
 ;
"RTN","HMPEQLM2",34,0)
 I VALMCNT=0 D NOROWS^HMPEQ("No globals to display")
"RTN","HMPEQLM2",35,0)
 S VALMBG=1
"RTN","HMPEQLM2",36,0)
 K @HMPDATA
"RTN","HMPEQLM2",37,0)
 Q
"RTN","HMPEQLM2",38,0)
 ;
"RTN","HMPEQLM2",39,0)
GLB(GLB) ; --
"RTN","HMPEQLM2",40,0)
 S X=""
"RTN","HMPEQLM2",41,0)
 S X=$$SETFLD^VALM1($$DOTS($G(GLB("rootNode"))),X,"SUBSCRIPT")
"RTN","HMPEQLM2",42,0)
 S X=$$SETFLD^VALM1($G(GLB("lastNode")),X,"LAST")
"RTN","HMPEQLM2",43,0)
 D SET(X)
"RTN","HMPEQLM2",44,0)
 Q
"RTN","HMPEQLM2",45,0)
 ;
"RTN","HMPEQLM2",46,0)
SET(X) ; -- add line
"RTN","HMPEQLM2",47,0)
 S VALMCNT=VALMCNT+1
"RTN","HMPEQLM2",48,0)
 S @VALMAR@(VALMCNT,0)=X
"RTN","HMPEQLM2",49,0)
 Q
"RTN","HMPEQLM2",50,0)
 ;
"RTN","HMPEQLM2",51,0)
DOTS(Z) ; -- use dots
"RTN","HMPEQLM2",52,0)
 N DOTS
"RTN","HMPEQLM2",53,0)
 S $P(DOTS,".   ",20)=""
"RTN","HMPEQLM2",54,0)
 Q Z_$E(DOTS,$L(Z),65)
"RTN","HMPEQLM2",55,0)
 ;
"RTN","HMPEQLM2",56,0)
KILL ; -- kill off build data
"RTN","HMPEQLM2",57,0)
 K @VALMAR
"RTN","HMPEQLM2",58,0)
 ; clean up video control data
"RTN","HMPEQLM2",59,0)
 D KILL^VALM10()
"RTN","HMPEQLM2",60,0)
 Q
"RTN","HMPEQLM2",61,0)
 ;
"RTN","HMPEQLM2",62,0)
HELP ; -- help code
"RTN","HMPEQLM2",63,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","HMPEQLM2",64,0)
 Q
"RTN","HMPEQLM2",65,0)
 ;
"RTN","HMPEQLM2",66,0)
EXIT ; -- exit code
"RTN","HMPEQLM2",67,0)
 Q
"RTN","HMPEQLM2",68,0)
 ;
"RTN","HMPEQLM2",69,0)
EXPND ; -- expand code
"RTN","HMPEQLM2",70,0)
 Q
"RTN","HMPEQLM2",71,0)
 ;
"RTN","HMPEVNT")
0^93^B129413290
"RTN","HMPEVNT",1,0)
HMPEVNT ;SLC/MKB,ASMR/JD,RRB -- VistA event listeners;Oct 29, 2015 08:04:30
"RTN","HMPEVNT",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPEVNT",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEVNT",4,0)
 ;
"RTN","HMPEVNT",5,0)
 ; DE2818 - SQA findings.
"RTN","HMPEVNT",6,0)
 ;          1) Correct unkilled variables by modifying line tags to accept variables as
"RTN","HMPEVNT",7,0)
 ;          parameters and modifying associated protocol routine calls to pass variables
"RTN","HMPEVNT",8,0)
 ;          as parameters. RRB - 10/28/2015
"RTN","HMPEVNT",9,0)
 ;
"RTN","HMPEVNT",10,0)
 ; External References          DBIA#
"RTN","HMPEVNT",11,0)
 ; -------------------          -----
"RTN","HMPEVNT",12,0)
 ; DG FIELD MONITOR              3344
"RTN","HMPEVNT",13,0)
 ; DGPM MOVEMENT EVENTS          1181
"RTN","HMPEVNT",14,0)
 ; GMRA ENTERED IN ERROR         1467
"RTN","HMPEVNT",15,0)
 ; GMRA SIGN-OFF ON DATA         1469
"RTN","HMPEVNT",16,0)
 ; GMRC EVSEND OR                3140
"RTN","HMPEVNT",17,0)
 ; LR70 CH EVSEND OR             6087
"RTN","HMPEVNT",18,0)
 ; MDC OBSERVATION UPDATE        6084
"RTN","HMPEVNT",19,0)
 ; PS EVSEND OR                  2415
"RTN","HMPEVNT",20,0)
 ; PSB EVSEND HMP                6085
"RTN","HMPEVNT",21,0)
 ; PXK VISIT DATA EVENT          1298
"RTN","HMPEVNT",22,0)
 ; RA EVSEND OR                  6086
"RTN","HMPEVNT",23,0)
 ; SDAM APPOINTMENT EVENTS       1320
"RTN","HMPEVNT",24,0)
 ; ^AUPNVSIT                     2028
"RTN","HMPEVNT",25,0)
 ; ^DPT                         10035
"RTN","HMPEVNT",26,0)
 ; ^OR(100                       5771
"RTN","HMPEVNT",27,0)
 ; DIQ                           2056
"RTN","HMPEVNT",28,0)
 ; GMVUTL                        5046
"RTN","HMPEVNT",29,0)
 ; TIUSRVLO                      2834
"RTN","HMPEVNT",30,0)
 ; VADPT                        10061
"RTN","HMPEVNT",31,0)
 ; VASITE                       10112
"RTN","HMPEVNT",32,0)
 ; XLFDT                        10103
"RTN","HMPEVNT",33,0)
 ; XTHC10                        5515
"RTN","HMPEVNT",34,0)
 Q
"RTN","HMPEVNT",35,0)
 ;
"RTN","HMPEVNT",36,0)
DG(DGDA,DGFIELD,DGFILE) ; -- DG FIELD MONITOR protocol listener  /DE2818 
"RTN","HMPEVNT",37,0)
 Q:$G(DGFILE)'=2         ;Patient file only
"RTN","HMPEVNT",38,0)
 N DFN S DFN=+$G(DGDA)
"RTN","HMPEVNT",39,0)
 ; operational pt-select - *s68 BEGIN
"RTN","HMPEVNT",40,0)
 I "^.01^.02^.03^.09^.101^.351^.361^"[(U_+$G(DGFIELD)_U) D
"RTN","HMPEVNT",41,0)
 . ; -- if patient entry has been deleted, delete pt-select object
"RTN","HMPEVNT",42,0)
 . I $G(DGFIELD)=".01",'$D(^DPT(DFN)) D POSTX("pt-select",DFN,"@") Q  ; *s68 - END
"RTN","HMPEVNT",43,0)
 . D POSTX("pt-select",DFN_"&"_$G(DGFIELD))
"RTN","HMPEVNT",44,0)
 ; subscribed patient
"RTN","HMPEVNT",45,0)
 I $D(^HMP(800000,"AITEM",DFN)),$$FLD(+$G(DGFIELD)) D POST(DFN,"patient",DFN)
"RTN","HMPEVNT",46,0)
 Q
"RTN","HMPEVNT",47,0)
 ;
"RTN","HMPEVNT",48,0)
FLD(X) ; --Return 1 or 0, if X is a field tracked by HMP
"RTN","HMPEVNT",49,0)
 S X=U_+$G(X)_U
"RTN","HMPEVNT",50,0)
 I "^.01^.02^.03^.05^.08^.09^.351^.361^.364^"[X Q 1         ;demographic
"RTN","HMPEVNT",51,0)
 I "^.111^.1112^.112^.113^.114^.115^.131^.132^.134^"[X Q 1  ;addr/phone
"RTN","HMPEVNT",52,0)
 I "^.211^.212^.213^.214^.216^.217^.218^.219^"[X Q 1        ;NOK
"RTN","HMPEVNT",53,0)
 I "^.301^.302^1901^.32102^.32103^.32201^.5295^"[X Q 1      ;serv conn
"RTN","HMPEVNT",54,0)
 ;New fields.  JD - 9/24/15
"RTN","HMPEVNT",55,0)
 I "^.133^"[X Q 1                                           ;email address
"RTN","HMPEVNT",56,0)
 I "^.1211^.1212^.1213^.1214^.1215^.1216^"[X Q 1            ;temporary address
"RTN","HMPEVNT",57,0)
 I "^.331^.332^.333^.334^.335^.336^.337^.338^.339^.33011^"[X Q 1  ;emergency contact addr/phone
"RTN","HMPEVNT",58,0)
 I "^.215^.21011^"[X Q 1                                    ;NOK addr line 3 and work phone
"RTN","HMPEVNT",59,0)
 I "^.3731^"[X Q 1                                          ;service connected conditions
"RTN","HMPEVNT",60,0)
 I "^.18^3^8^16^"[X Q 1                                     ;insurance  
"RTN","HMPEVNT",61,0)
 Q 0
"RTN","HMPEVNT",62,0)
 ;
"RTN","HMPEVNT",63,0)
DGPM(DGPMA,DGPMDA,DGPMP,DGPMT) ; -- DGPM MOVEMENT EVENTS protocol listener  /DE2818
"RTN","HMPEVNT",64,0)
 ;    [expects DFN,DGPM* variables]
"RTN","HMPEVNT",65,0)
 N ADM,ACT S ADM=DGPMDA
"RTN","HMPEVNT",66,0)
 I DGPMT'=1 S ADM=$S(DGPMA:$P(DGPMA,U,14),1:$P(DGPMP,U,14)) Q:ADM<1
"RTN","HMPEVNT",67,0)
 S ACT=$S(DGPMA:"",1:"@")
"RTN","HMPEVNT",68,0)
 I $D(^HMP(800000,"AITEM",DFN)) D POST(DFN,"visit","H"_ADM,ACT)
"RTN","HMPEVNT",69,0)
 ; update roster(s) if current movement
"RTN","HMPEVNT",70,0)
 N ADMX,MVTX,PREV,NEW,OLD,WARD
"RTN","HMPEVNT",71,0)
 S ADMX=$Q(^DGPM("ATID1",DFN)) Q:$QS(ADMX,4)'=ADM
"RTN","HMPEVNT",72,0)
 S MVTX=$Q(^DGPM("APMV",DFN,ADM)) Q:$QS(MVTX,5)'=DGPMDA
"RTN","HMPEVNT",73,0)
 S PREV=$G(DGPMP) I 'PREV,DGPMT'=1 D  ;previous or edited mvt
"RTN","HMPEVNT",74,0)
 . S MVTX=$Q(@MVTX) Q:DFN'=$QS(MVTX,2)  Q:ADM'=$QS(MVTX,3)
"RTN","HMPEVNT",75,0)
 . S PREV=$G(^DGPM(+$QS(MVTX,5),0))
"RTN","HMPEVNT",76,0)
 S NEW=$P(DGPMA,U,6),OLD=$P(PREV,U,6)
"RTN","HMPEVNT",77,0)
 I NEW'=OLD F WARD=NEW,OLD I WARD D
"RTN","HMPEVNT",78,0)
 . S I=0 F  S I=$O(^HMPROSTR("AD",WARD_";DIC(42,",I)) Q:I<1  D POSTX("roster",I)
"RTN","HMPEVNT",79,0)
 Q
"RTN","HMPEVNT",80,0)
 ;-find visit# for corresponding admission [not used]
"RTN","HMPEVNT",81,0)
 N ADM,PTF,IDT,ID,ACT
"RTN","HMPEVNT",82,0)
 I DGPMA S ADM=+DGPMA,PTF=+$P(DGPMA,U,16)
"RTN","HMPEVNT",83,0)
 E  S ADM=+DGPMP,PTF=+$P(DGPMP,U,16)
"RTN","HMPEVNT",84,0)
 I DGPMT'=1 D  Q:ADM<1
"RTN","HMPEVNT",85,0)
 . N VAIP S VAIP("E")=DGPMDA
"RTN","HMPEVNT",86,0)
 . D IN5^VADPT S ADM=+VAIP(13,1),PTF=+VAIP(12)
"RTN","HMPEVNT",87,0)
 S IDT=9999999-$P(ADM,".") S:ADM["." IDT=IDT_"."_$P(ADM,".",2)
"RTN","HMPEVNT",88,0)
 S ID=+$O(^AUPNVSIT("AAH",DFN,IDT,0)) Q:'ID
"RTN","HMPEVNT",89,0)
 S ACT=$S(DGPMA:"",1:"@")
"RTN","HMPEVNT",90,0)
 D POST(DFN,"visit",ID,ACT)
"RTN","HMPEVNT",91,0)
 ; POST(DFN,"ptf",PTF,ACT):DGPMT=3
"RTN","HMPEVNT",92,0)
 Q
"RTN","HMPEVNT",93,0)
 ;
"RTN","HMPEVNT",94,0)
NEWINPT() ; -- is DFN newly admitted?
"RTN","HMPEVNT",95,0)
 N Y S Y=0
"RTN","HMPEVNT",96,0)
 I DGPMT=1,DGPMA,'DGPMP,+$G(^DPT(DFN,.105))=DGPMDA S Y=1 ;new admission
"RTN","HMPEVNT",97,0)
 Q Y
"RTN","HMPEVNT",98,0)
 ;
"RTN","HMPEVNT",99,0)
PCMMT(SCPTTMAF,SCPTTMB4) ; -- SCMC PATIENT TEAM CHANGES protocol listener /DE2818
"RTN","HMPEVNT",100,0)
 I '$P($G(SCPTTMB4),U,8),'$P($G(SCPTTMAF),U,8) Q  ;not pc change
"RTN","HMPEVNT",101,0)
 N DFN S DFN=$S($G(SCPTTMAF):+SCPTTMAF,1:+$G(SCPTTMB4)) Q:'DFN
"RTN","HMPEVNT",102,0)
 D POST(DFN,"patient",DFN)
"RTN","HMPEVNT",103,0)
 Q
"RTN","HMPEVNT",104,0)
 ;
"RTN","HMPEVNT",105,0)
PCMMTP(SCPTTPAF,SCPTTPB4) ; -- SCMC PATIENT TEAM POSITION CHANGES protocol listener /DE2818
"RTN","HMPEVNT",106,0)
 I '$P($G(SCPTTPB4),U,5),'$P($G(SCPTTPAF),U,5) Q  ;not pc change
"RTN","HMPEVNT",107,0)
 N TM,DFN
"RTN","HMPEVNT",108,0)
 S TM=$S($G(SCPTTPAF):+SCPTTPAF,1:+$G(SCPTTPB4)) Q:'TM
"RTN","HMPEVNT",109,0)
 ;DE2818
"RTN","HMPEVNT",110,0)
 S DFN=$$GET1^DIQ(404.42,+TM_",",.01,"I")  ;ICR 1922
"RTN","HMPEVNT",111,0)
 D POST(DFN,"patient",DFN)
"RTN","HMPEVNT",112,0)
 Q
"RTN","HMPEVNT",113,0)
 ;
"RTN","HMPEVNT",114,0)
SDAM(SDATA) ; -- SDAM APPOINTMENT EVENTS protocol listener /DE2818
"RTN","HMPEVNT",115,0)
 I $G(SDATA) D  Q  ;appointments
"RTN","HMPEVNT",116,0)
 . N DFN,DATE,HLOC,STS,REASON,PROV
"RTN","HMPEVNT",117,0)
 . S DFN=+$P(SDATA,U,2) Q:DFN<1
"RTN","HMPEVNT",118,0)
 . Q:'$D(^HMP(800000,"AITEM",DFN))
"RTN","HMPEVNT",119,0)
 . S DATE=+$P(SDATA,U,3),HLOC=+$P(SDATA,U,4),(PROV,REASON)=""
"RTN","HMPEVNT",120,0)
 . ;I SDAMEVT=1 K DIR S DIR(0)="F^3:20",DIR("A")="Enter Reason for Appointment: ",DIR("?")="Answer must be 2-20 characters" D ^DIR S REASON=Y
"RTN","HMPEVNT",121,0)
 . ;I SDAMEVT=1 K DIC S DIC="^VA(200,",DIC("A")="Select Patient's Provider: ",DIC(0)="AEQ",D="AK.PROVIDER" D IX^DIC S PROV=$P(Y,"^",1,2)
"RTN","HMPEVNT",122,0)
 . D POST(DFN,"appointment","A;"_DATE_";"_HLOC_";"_REASON_";"_$TR($P(PROV,U,1,2),"^",";"))
"RTN","HMPEVNT",123,0)
 Q
"RTN","HMPEVNT",124,0)
 ;
"RTN","HMPEVNT",125,0)
PCE ; -- PXK VISIT DATA EVENT protocol listener
"RTN","HMPEVNT",126,0)
 N IEN,PX0A,PX0B,DFN,DA,ACT
"RTN","HMPEVNT",127,0)
 S IEN=+$O(^TMP("PXKCO",$J,0)) Q:IEN<1
"RTN","HMPEVNT",128,0)
 S PX0A=$G(^TMP("PXKCO",$J,IEN,"VST",IEN,0,"AFTER")),PX0B=$G(^("BEFORE"))
"RTN","HMPEVNT",129,0)
 S DFN=$S($L(PX0A):+$P(PX0A,U,5),1:+$P(PX0B,U,5))
"RTN","HMPEVNT",130,0)
 Q:DFN<1  Q:'$D(^HMP(800000,"AITEM",DFN))
"RTN","HMPEVNT",131,0)
 ; Visit file
"RTN","HMPEVNT",132,0)
 S ACT=$S(PX0A="":"@",1:"")
"RTN","HMPEVNT",133,0)
 D POST(DFN,"visit",IEN,ACT)
"RTN","HMPEVNT",134,0)
 ; check V-files
"RTN","HMPEVNT",135,0)
 F SUB="HF","IMM","XAM","CPT","PED","POV","SK" D
"RTN","HMPEVNT",136,0)
 . S DA=0 F  S DA=$O(^TMP("PXKCO",$J,IEN,SUB,DA)) Q:DA<1  D
"RTN","HMPEVNT",137,0)
 .. S ACT=$S($G(^TMP("PXKCO",$J,IEN,SUB,DA,0,"AFTER"))="":"@",1:"")
"RTN","HMPEVNT",138,0)
 .. D POST(DFN,$$NAME(SUB),DA,ACT)
"RTN","HMPEVNT",139,0)
 Q
"RTN","HMPEVNT",140,0)
 ;
"RTN","HMPEVNT",141,0)
NAME(X) ; -- return object name for V-files
"RTN","HMPEVNT",142,0)
 N Y S Y=""
"RTN","HMPEVNT",143,0)
 I X="HF"  S Y="factor"
"RTN","HMPEVNT",144,0)
 I X="IMM" S Y="immunization"
"RTN","HMPEVNT",145,0)
 I X="XAM" S Y="exam"
"RTN","HMPEVNT",146,0)
 I X="CPT" S Y="cpt"
"RTN","HMPEVNT",147,0)
 I X="PED" S Y="education"
"RTN","HMPEVNT",148,0)
 I X="POV" S Y="pov"
"RTN","HMPEVNT",149,0)
 I X="SK"  S Y="skin"
"RTN","HMPEVNT",150,0)
 Q Y
"RTN","HMPEVNT",151,0)
 ;
"RTN","HMPEVNT",152,0)
ZPCE ; -- old PXK VISIT DATA EVENT protocol listener [not in use]
"RTN","HMPEVNT",153,0)
 N IEN,PX0,PX150,DFN,DA
"RTN","HMPEVNT",154,0)
 S IEN=+$O(^TMP("PXKCO",$J,0)) Q:IEN<1
"RTN","HMPEVNT",155,0)
 S PX0=$G(^TMP("PXKCO",$J,IEN,"VST",IEN,0,"AFTER")) Q:$P(PX0,U,7)="E"
"RTN","HMPEVNT",156,0)
 I PX0="" D POST(DFN,"visit",IEN,"@") Q  ;deleted
"RTN","HMPEVNT",157,0)
 S PX150=$G(^TMP("PXKCO",$J,IEN,"VST",IEN,150,"AFTER")) Q:$P(PX150,U,3)'="P"
"RTN","HMPEVNT",158,0)
 S DFN=+$P(PX0,U,5) Q:DFN<1  Q:'$D(^HMP(800000,"AITEM",DFN))
"RTN","HMPEVNT",159,0)
 D POST(DFN,"visit",IEN)
"RTN","HMPEVNT",160,0)
 S DA=0 F  S DA=$O(^TMP("PXKCO",$J,IEN,"IMM",DA)) Q:DA<1  D POST(DFN,"immunization",DA)
"RTN","HMPEVNT",161,0)
 S DA=0 F  S DA=$O(^TMP("PXKCO",$J,IEN,"HF",DA)) Q:DA<1  D POST(DFN,"factor",DA)
"RTN","HMPEVNT",162,0)
 Q
"RTN","HMPEVNT",163,0)
 ;
"RTN","HMPEVNT",164,0)
XQOR(MSG) ; -- messaging listener (update meds, labs, xrays, consults)
"RTN","HMPEVNT",165,0)
 N HMPMSG,HMPPKG,MSH,ORC,DFN
"RTN","HMPEVNT",166,0)
 S HMPMSG=$S($L($G(MSG)):MSG,1:"MSG") Q:'$O(@HMPMSG@(0))
"RTN","HMPEVNT",167,0)
 S MSH=0 F  S MSH=$O(@HMPMSG@(MSH)) Q:MSH'>0  Q:$E(@HMPMSG@(MSH),1,3)="MSH"
"RTN","HMPEVNT",168,0)
 Q:'MSH  Q:'$L($G(@HMPMSG@(MSH)))
"RTN","HMPEVNT",169,0)
 S HMPPKG=$$TYPE($P(@HMPMSG@(MSH),"|",3))  Q:'$L(HMPPKG)
"RTN","HMPEVNT",170,0)
 S DFN=$$PID Q:DFN<1  Q:'$D(^HMP(800000,"AITEM",DFN))
"RTN","HMPEVNT",171,0)
 S ORC=MSH F  S ORC=$O(@HMPMSG@(+ORC)) Q:ORC'>0  I $E(@HMPMSG@(ORC),1,3)="ORC" D
"RTN","HMPEVNT",172,0)
 . N ORDCNTRL,PKGIFN,ORIFN
"RTN","HMPEVNT",173,0)
 . S ORC=ORC_U_@HMPMSG@(ORC),ORDCNTRL=$TR($P(ORC,"|",2),"@","P")
"RTN","HMPEVNT",174,0)
 . ; QUIT if action failed, conversion, purge, or backdoor verify/new
"RTN","HMPEVNT",175,0)
 . I ORDCNTRL["U"!("DE^ZC^ZP^ZR^ZV^SN"[ORDCNTRL) Q
"RTN","HMPEVNT",176,0)
 . S ORIFN=+$P($P(ORC,"|",3),U),PKGIFN=$P($P(ORC,"|",4),U)
"RTN","HMPEVNT",177,0)
 . ; if order has a parent, use parent# and update entire order
"RTN","HMPEVNT",178,0)
 . S ORIFN=$S($P($G(^OR(100,ORIFN,3)),U,9):$P(^(3),U,9),1:ORIFN)
"RTN","HMPEVNT",179,0)
 . I $$RESULT D  ;update ancillary domains
"RTN","HMPEVNT",180,0)
 .. D POST(DFN,HMPPKG,PKGIFN)
"RTN","HMPEVNT",181,0)
 .. D:HMPPKG="image" POST(DFN,"document",PKGIFN)
"RTN","HMPEVNT",182,0)
 .. I HMPPKG="lab",PKGIFN'["CH",'$$LRTIU(DFN,PKGIFN) D POST(DFN,"document",$P(PKGIFN,";",4,5))
"RTN","HMPEVNT",183,0)
 . I ORIFN,ORDCNTRL'="ZD" D  ;update order(s)
"RTN","HMPEVNT",184,0)
 .. D POST(DFN,"order",ORIFN)
"RTN","HMPEVNT",185,0)
 .. N ORIG S ORIG=+$P($G(^OR(100,ORIFN,3)),U,5)
"RTN","HMPEVNT",186,0)
 .. I ORIG D POST(DFN,"order",ORIG) ;need fwd ptrs, sig flds
"RTN","HMPEVNT",187,0)
 Q
"RTN","HMPEVNT",188,0)
 ;
"RTN","HMPEVNT",189,0)
RESULT() ; -- Return 1 or 0, if message broadcasts a result
"RTN","HMPEVNT",190,0)
 ;           [may modify PKGIFN for use in POST]
"RTN","HMPEVNT",191,0)
 N Y S Y=0
"RTN","HMPEVNT",192,0)
 I HMPPKG="consult" S Y=1,PKGIFN=+PKGIFN G RQ
"RTN","HMPEVNT",193,0)
 I HMPPKG="med"     S Y=1,PKGIFN=ORIFN G RQ
"RTN","HMPEVNT",194,0)
 I HMPPKG="lab"     S:ORDCNTRL="RE"&($L(PKGIFN,";")>3) Y=1 G RQ
"RTN","HMPEVNT",195,0)
 I HMPPKG="image"   S:PKGIFN["~" Y=1,PKGIFN=$TR($P(PKGIFN,"~",2,3),"~","-") G RQ
"RTN","HMPEVNT",196,0)
RQ Q Y
"RTN","HMPEVNT",197,0)
 ;
"RTN","HMPEVNT",198,0)
LRTIU(DFN,ORPK) ; -- Return 1 or 0, if LR report is in TIU
"RTN","HMPEVNT",199,0)
 I $G(DFN)<1!'$L($G(ORPK)) Q 0
"RTN","HMPEVNT",200,0)
 I ORPK["CH"!(ORPK["MI") Q 0
"RTN","HMPEVNT",201,0)
 N SUB,IDT,LRDFN
"RTN","HMPEVNT",202,0)
 S SUB=$P(ORPK,";",4),IDT=+$P(ORPK,";",5),LRDFN=+$G(^DPT(+DFN,"LR"))
"RTN","HMPEVNT",203,0)
 I $O(^LR(LRDFN,SUB,IDT,.05,0)) Q 1
"RTN","HMPEVNT",204,0)
 Q 0
"RTN","HMPEVNT",205,0)
 ;
"RTN","HMPEVNT",206,0)
NA(MSG) ; -- messaging listener (new backdoor orders)
"RTN","HMPEVNT",207,0)
 N HMPMSG,HMPPKG,MSH,ORC,DFN
"RTN","HMPEVNT",208,0)
 S HMPMSG=$S($L($G(MSG)):MSG,1:"MSG") Q:'$O(@HMPMSG@(0))
"RTN","HMPEVNT",209,0)
 S MSH=0 F  S MSH=$O(@HMPMSG@(MSH)) Q:MSH'>0  Q:$E(@HMPMSG@(MSH),1,3)="MSH"
"RTN","HMPEVNT",210,0)
 Q:'MSH  Q:'$L($G(@HMPMSG@(MSH)))
"RTN","HMPEVNT",211,0)
 S HMPPKG=$$TYPE($P(@HMPMSG@(MSH),"|",5))  Q:'$L(HMPPKG)
"RTN","HMPEVNT",212,0)
 S DFN=$$PID Q:DFN<1  Q:'$D(^HMP(800000,"AITEM",DFN))
"RTN","HMPEVNT",213,0)
 S ORC=MSH F  S ORC=$O(@HMPMSG@(+ORC)) Q:ORC'>0  I $E(@HMPMSG@(ORC),1,3)="ORC" D
"RTN","HMPEVNT",214,0)
 . N ORDCNTRL,ORIFN
"RTN","HMPEVNT",215,0)
 . S ORC=ORC_U_@HMPMSG@(ORC),ORDCNTRL=$TR($P(ORC,"|",2),"@","P")
"RTN","HMPEVNT",216,0)
 . Q:ORDCNTRL'="NA"
"RTN","HMPEVNT",217,0)
 . S ORIFN=+$P($P(ORC,"|",3),U) D POST(DFN,"order",ORIFN)
"RTN","HMPEVNT",218,0)
 . I HMPPKG="med" D POST(DFN,HMPPKG,ORIFN)
"RTN","HMPEVNT",219,0)
 Q
"RTN","HMPEVNT",220,0)
 ;
"RTN","HMPEVNT",221,0)
TYPE(NAME) ; -- Returns type name for XML
"RTN","HMPEVNT",222,0)
 I NAME="LABORATORY"  Q "lab"
"RTN","HMPEVNT",223,0)
 I NAME="PHARMACY"    Q "med"
"RTN","HMPEVNT",224,0)
 I NAME="CONSULTS"    Q "consult"
"RTN","HMPEVNT",225,0)
 I NAME="PROCEDURES"  Q "consult"
"RTN","HMPEVNT",226,0)
 I NAME="RADIOLOGY"   Q "image"
"RTN","HMPEVNT",227,0)
 I NAME="IMAGING"     Q "image"
"RTN","HMPEVNT",228,0)
 I NAME="ORDER ENTRY" Q "order"
"RTN","HMPEVNT",229,0)
 I NAME="DIETETICS"   Q "diet"
"RTN","HMPEVNT",230,0)
 Q ""
"RTN","HMPEVNT",231,0)
 ;
"RTN","HMPEVNT",232,0)
PID() ; -- Returns patient from PID segment in current msg
"RTN","HMPEVNT",233,0)
 N I,SEG,Y S I=MSH
"RTN","HMPEVNT",234,0)
 F  S I=$O(@HMPMSG@(I)) Q:I'>0  S SEG=$E(@HMPMSG@(I),1,3) Q:SEG="ORC"  I SEG="PID" D  Q
"RTN","HMPEVNT",235,0)
 . S Y=+$P(@HMPMSG@(I),"|",4)
"RTN","HMPEVNT",236,0)
 .;I '$D(^DPT(Y,0)) S:$L($P(@HMPMSG@(I),"|",5)) Y=+$P(@HMPMSG@(I),"|",5) ;alt ID for Lab
"RTN","HMPEVNT",237,0)
 Q Y
"RTN","HMPEVNT",238,0)
 ;
"RTN","HMPEVNT",239,0)
PV1() ; -- Returns patient class from PV1 segment in current msg
"RTN","HMPEVNT",240,0)
 N I,SEG,Y S I=MSH,Y=""
"RTN","HMPEVNT",241,0)
 F  S I=$O(@HMPMSG@(I)) Q:I'>0  S SEG=$E(@HMPMSG@(I),1,3) Q:SEG="ORC"  I SEG="PV1" D  Q
"RTN","HMPEVNT",242,0)
 . S Y=$P(@HMPMSG@(I),"|",3)
"RTN","HMPEVNT",243,0)
 I Y="",$G(ORIFN) S Y=$$GET1^DIQ(100,+ORIFN_",",10,"I")
"RTN","HMPEVNT",244,0)
 Q Y
"RTN","HMPEVNT",245,0)
 ;
"RTN","HMPEVNT",246,0)
GMRA(ACT) ; -- GMRA SIGN-OFF ON DATA protocol listener
"RTN","HMPEVNT",247,0)
 ;   also GMRA ENTERED IN ERROR [ACT=@]
"RTN","HMPEVNT",248,0)
 N DFN,IEN
"RTN","HMPEVNT",249,0)
 S DFN=+$G(GMRAPA(0)),IEN=+$G(GMRAPA)
"RTN","HMPEVNT",250,0)
 D POST(DFN,"allergy",IEN,$G(ACT))
"RTN","HMPEVNT",251,0)
 Q
"RTN","HMPEVNT",252,0)
 ;
"RTN","HMPEVNT",253,0)
GMPL(DFN,IEN) ; -- GMPL EVENT protocol listener
"RTN","HMPEVNT",254,0)
 S DFN=+$G(DFN),IEN=+$G(IEN)
"RTN","HMPEVNT",255,0)
 ;N ACT S ACT=$S($P($G(^AUPNPROB(IEN,1)),U,2)="H":"@",1:"")
"RTN","HMPEVNT",256,0)
 D POST(DFN,"problem",IEN) ;,ACT)
"RTN","HMPEVNT",257,0)
 Q
"RTN","HMPEVNT",258,0)
 ;
"RTN","HMPEVNT",259,0)
GMRV(DFN,IEN,ERR) ; -- Vital Measurement file #120.5 AHMP index
"RTN","HMPEVNT",260,0)
 S DFN=+$G(DFN),IEN=+$G(IEN)
"RTN","HMPEVNT",261,0)
 N ACT S ACT=$S($G(ERR):"@",1:"")
"RTN","HMPEVNT",262,0)
 D POST(DFN,"vital",IEN,ACT)
"RTN","HMPEVNT",263,0)
 Q
"RTN","HMPEVNT",264,0)
 ;
"RTN","HMPEVNT",265,0)
MDC(OBS) ; -- MDC OBSERVATION UPDATE protocol listener
"RTN","HMPEVNT",266,0)
 N DFN,ID,ACT
"RTN","HMPEVNT",267,0)
 S DFN=+$G(OBS("PATIENT_ID","I")) Q:DFN<1
"RTN","HMPEVNT",268,0)
 S ID=$G(OBS("OBS_ID","I")) Q:'$L(ID)
"RTN","HMPEVNT",269,0)
 S ACT=$S('$G(OBS("STATUS","I")):"@",1:"")
"RTN","HMPEVNT",270,0)
 D POST(DFN,"obs",ID,ACT)
"RTN","HMPEVNT",271,0)
 I $G(OBS("DOMAIN","VITALS")) D POST(DFN,"vital",ID,ACT)
"RTN","HMPEVNT",272,0)
 Q
"RTN","HMPEVNT",273,0)
 ;
"RTN","HMPEVNT",274,0)
CP(DFN,ID,ACT) ; -- CP Transaction file #702 AHMP index
"RTN","HMPEVNT",275,0)
 S DFN=+$G(DFN),ID=$G(ID)
"RTN","HMPEVNT",276,0)
 D POST(DFN,"procedure",ID,$G(ACT))
"RTN","HMPEVNT",277,0)
 Q
"RTN","HMPEVNT",278,0)
 ;
"RTN","HMPEVNT",279,0)
SR(DFN,IEN,ACT) ; -- Surgery [SROERR] update
"RTN","HMPEVNT",280,0)
 S DFN=+$G(DFN),IEN=+$G(IEN)
"RTN","HMPEVNT",281,0)
 D POST(DFN,"surgery",IEN,$G(ACT))
"RTN","HMPEVNT",282,0)
 Q
"RTN","HMPEVNT",283,0)
 ;*s68 - BEGINS
"RTN","HMPEVNT",284,0)
TIU(DFN,IEN) ; -- TIU Document file #8925 AHMP index
"RTN","HMPEVNT",285,0)
 N ACT,STS,DAD
"RTN","HMPEVNT",286,0)
 S DFN=+$G(DFN),IEN=+$G(IEN),ACT=""
"RTN","HMPEVNT",287,0)
 S STS=$G(X(2)),DAD=$G(X(3)) ;X = FM data array for index
"RTN","HMPEVNT",288,0)
 S:DAD IEN=DAD I 'DAD D      ;if addendum, repull entire note
"RTN","HMPEVNT",289,0)
 . I STS=15 S ACT="@"        ;retracted
"RTN","HMPEVNT",290,0)
 . I $G(X2(1))="" S ACT="@"  ;deleted (new title = null)
"RTN","HMPEVNT",291,0)
 D POST(DFN,"document",IEN,ACT)
"RTN","HMPEVNT",292,0)
 Q
"RTN","HMPEVNT",293,0)
 ; Deprecated calls
"RTN","HMPEVNT",294,0)
DOCDEF ;
"RTN","HMPEVNT",295,0)
DOCITEM ;
"RTN","HMPEVNT",296,0)
USR ;
"RTN","HMPEVNT",297,0)
 Q
"RTN","HMPEVNT",298,0)
 ; *s68 - END
"RTN","HMPEVNT",299,0)
PSB(PSBIEN) ; -- HMP PSB EVENTS protocol listener (BCMA) /DE2818
"RTN","HMPEVNT",300,0)
 N IEN,DFN,ORPK,TYPE,ORIFN
"RTN","HMPEVNT",301,0)
 S IEN=$S($P($G(PSBIEN),",",2)'="":+$P(PSBIEN,",",2),$G(PSBIEN)="+1":+$G(PSBIEN(1)),1:+$G(PSBIEN))
"RTN","HMPEVNT",302,0)
 S DFN=+$G(^PSB(53.79,IEN,0)),ORPK=$P($G(^(.1)),U)
"RTN","HMPEVNT",303,0)
 Q:DFN<1  Q:ORPK<1  S TYPE=$S(ORPK["V":"IV",ORPK["U":5,1:"") Q:TYPE=""
"RTN","HMPEVNT",304,0)
 S ORIFN=+$P($G(^PS(55,DFN,TYPE,+ORPK,0)),U,21)
"RTN","HMPEVNT",305,0)
 D:ORIFN POST(DFN,"med",ORIFN)
"RTN","HMPEVNT",306,0)
 Q
"RTN","HMPEVNT",307,0)
 ;
"RTN","HMPEVNT",308,0)
XU(IEN,ACT) ; -- XU USER ADD/CHANGE/TERMINATE option listener
"RTN","HMPEVNT",309,0)
 S IEN=+$G(IEN) Q:IEN<1
"RTN","HMPEVNT",310,0)
 D POSTX("user",IEN,$G(ACT))
"RTN","HMPEVNT",311,0)
 Q
"RTN","HMPEVNT",312,0)
 ;
"RTN","HMPEVNT",313,0)
POST(DFN,TYPE,ID,ACT) ; -- track updated patient data
"RTN","HMPEVNT",314,0)
 S DFN=+$G(DFN),TYPE=$G(TYPE),ID=$G(ID)
"RTN","HMPEVNT",315,0)
 Q:DFN<1  Q:TYPE=""  Q:ID=""   ;incomplete request
"RTN","HMPEVNT",316,0)
 Q:$G(^XTMP("HMP-off",TYPE))   ;domain turned 'off'
"RTN","HMPEVNT",317,0)
 Q:'$D(^HMP(800000,"AITEM",DFN))  ;patient not subscribed to
"RTN","HMPEVNT",318,0)
 N HMPDT S HMPDT="HMP-"_DT
"RTN","HMPEVNT",319,0)
 ;S ^XTMP(HMPDT,$$NEXT)=DFN_U_TYPE_U_ID_U_$G(ACT)
"RTN","HMPEVNT",320,0)
 N NODES
"RTN","HMPEVNT",321,0)
 D POST^HMPDJFS(DFN,TYPE,ID,$G(ACT),"",.NODES)
"RTN","HMPEVNT",322,0)
 Q
"RTN","HMPEVNT",323,0)
 ;
"RTN","HMPEVNT",324,0)
POSTX(TYPE,ID,ACT) ; -- track updated reference items
"RTN","HMPEVNT",325,0)
 S TYPE=$G(TYPE),ID=$G(ID)
"RTN","HMPEVNT",326,0)
 Q:TYPE=""  Q:ID=""            ;incomplete request
"RTN","HMPEVNT",327,0)
 Q:$G(^XTMP("HMP-off",TYPE))   ;domain turned 'off'
"RTN","HMPEVNT",328,0)
 N HMPDT S HMPDT="HMP-"_DT ;"HMPEF-"_DT
"RTN","HMPEVNT",329,0)
 ;S ^XTMP(HMPDT,$$NEXT)=U_TYPE_U_ID_U_$G(ACT)
"RTN","HMPEVNT",330,0)
 N NODES
"RTN","HMPEVNT",331,0)
 D POST^HMPDJFS("OPD",TYPE,ID,$G(ACT),"",.NODES)
"RTN","HMPEVNT",332,0)
 Q
"RTN","HMPEVNT",333,0)
 ;
"RTN","HMPEVNT",334,0)
NEXT() ; -- Return next sequential number in ^XTMP(HMPDT,n)
"RTN","HMPEVNT",335,0)
 L +^XTMP(HMPDT):5 ;I'$T ??
"RTN","HMPEVNT",336,0)
 N Y S Y=+$O(^XTMP(HMPDT,"A"),-1)+1
"RTN","HMPEVNT",337,0)
 I '$D(^XTMP(HMPDT,0)) S ^(0)=$$FMADD^XLFDT(DT,3)_U_DT_"^HMP Updates"
"RTN","HMPEVNT",338,0)
 L -^XTMP(HMPDT)
"RTN","HMPEVNT",339,0)
 Q Y
"RTN","HMPEVNT",340,0)
 ;
"RTN","HMPEVNT",341,0)
HTTP(URL,DFN,TYPE,ID) ; -- send message that TYPE/ID has been updated [not in use]
"RTN","HMPEVNT",342,0)
 N DIV,X,HMPX
"RTN","HMPEVNT",343,0)
 S DFN=+$G(DFN) Q:DFN<1  ;patient req'd
"RTN","HMPEVNT",344,0)
 S DIV=$P($$SITE^VASITE,U,3) ;station number
"RTN","HMPEVNT",345,0)
 S URL=$G(URL)_"?division="_DIV_"&dfn="_+$G(DFN)
"RTN","HMPEVNT",346,0)
 I $L($G(TYPE)) S URL=URL_"&type="_TYPE
"RTN","HMPEVNT",347,0)
 I $L($G(ID))   S URL=URL_"&id="_ID
"RTN","HMPEVNT",348,0)
 S ^XTMP("HMP",DFN,"HTTP")=$H
"RTN","HMPEVNT",349,0)
 S X=$$GETURL^XTHC10(URL,,"HMPX")
"RTN","HMPEVNT",350,0)
 ; I X>200 = ERROR
"RTN","HMPEVNT",351,0)
 Q
"RTN","HMPFPTC")
0^94^B15382684
"RTN","HMPFPTC",1,0)
HMPFPTC ;SLC/MKB,AGP,ASMR/RRB - Patient look-up Utilities at Facility;Nov 04, 2015 18:37:39
"RTN","HMPFPTC",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPFPTC",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPFPTC",4,0)
 ;
"RTN","HMPFPTC",5,0)
 Q
"RTN","HMPFPTC",6,0)
 ;
"RTN","HMPFPTC",7,0)
CHKS(HMPZ,DFN) ; perform patient select checks
"RTN","HMPFPTC",8,0)
 ;
"RTN","HMPFPTC",9,0)
 N ACCESS,CHKS,CNT,DEATHDT,ERR,I,IEN,STR,X,HMPY
"RTN","HMPFPTC",10,0)
 ; check for sensitive record
"RTN","HMPFPTC",11,0)
 S STR="patientChecks"
"RTN","HMPFPTC",12,0)
 S ACCESS=0
"RTN","HMPFPTC",13,0)
 D PTSEC^DGSEC4(.HMPY,DFN)  ;IA #3027
"RTN","HMPFPTC",14,0)
 S ACCESS=1
"RTN","HMPFPTC",15,0)
 I HMPY(1)>0 D
"RTN","HMPFPTC",16,0)
 .S CHKS("sensitive","dfn")=DFN
"RTN","HMPFPTC",17,0)
 .S ACCESS=(HMPY(1)<3)
"RTN","HMPFPTC",18,0)
 .S CHKS("sensitive","mayAccess")=$S(ACCESS=1:"true",1:"false")
"RTN","HMPFPTC",19,0)
 .S CHKS("sensitive","logAccess")=$S(HMPY(1)>1:"true",1:"false")
"RTN","HMPFPTC",20,0)
 .S CNT=2,X=""
"RTN","HMPFPTC",21,0)
 .F  S CNT=$O(HMPY(CNT)) Q:CNT'>0  S X=X_$C(13)_$C(10)_$G(HMPY(CNT))
"RTN","HMPFPTC",22,0)
 .S CHKS("sensitive","text")=X
"RTN","HMPFPTC",23,0)
 ;
"RTN","HMPFPTC",24,0)
 ; check for deceased patient, DE2818 changed from direct global reference
"RTN","HMPFPTC",25,0)
 D TOP^HMPXGDPT("DEATHDT",DFN,.351,"E")
"RTN","HMPFPTC",26,0)
 D:$L($G(DEATHDT(2,DFN,.351,"E")))
"RTN","HMPFPTC",27,0)
 . S CHKS("deceased","text")="This patient died on "_DEATHDT(2,DFN,.351,"E")_"."_$C(13)_$C(10)_" Do you wish to continue?"
"RTN","HMPFPTC",28,0)
 ;
"RTN","HMPFPTC",29,0)
 ; check for similar patients
"RTN","HMPFPTC",30,0)
 K HMPY
"RTN","HMPFPTC",31,0)
 N MSG,SIM,SIMPAT,TEXT S MSG=0,SIM=0
"RTN","HMPFPTC",32,0)
 D GUIBS5A^DPTLK6(.HMPY,DFN)  ;IA #3593
"RTN","HMPFPTC",33,0)
 I HMPY(1)>0 D
"RTN","HMPFPTC",34,0)
 .S TEXT=""
"RTN","HMPFPTC",35,0)
 .S I=1 F  S I=$O(HMPY(I)) Q:'I  S X=HMPY(I) D
"RTN","HMPFPTC",36,0)
 .. S SIM=SIM+1
"RTN","HMPFPTC",37,0)
 .. I $E(X)=0 S TEXT=$S($L(TEXT):TEXT_$C(13)_$C(10)_$P(X,U,2),1:$P(X,U,2))
"RTN","HMPFPTC",38,0)
 .. I $E(X)=1 D
"RTN","HMPFPTC",39,0)
 ... ;S CHKS("similar",SIM,"dfn")=$P(X,U,2)
"RTN","HMPFPTC",40,0)
 ... ;S CHKS("similar",SIM,"name")=$P(X,U,3)
"RTN","HMPFPTC",41,0)
 ... ;S CHKS("similar",SIM,"dob")=$$FMTE^XLFDT($P(X,U,4),"D")
"RTN","HMPFPTC",42,0)
 ... ;S CHKS("similar",SIM,"ssn")=$P(X,U,5)
"RTN","HMPFPTC",43,0)
 ... S SIMPAT="Patient Name: "_$P(X,U,3)_" Date of Birth: "_$$FMTE^XLFDT($P(X,U,4),"D")_" SSN: "_$P(X,U,5)
"RTN","HMPFPTC",44,0)
 ... S TEXT=TEXT_$C(13)_$C(10)_SIMPAT
"RTN","HMPFPTC",45,0)
 .S CHKS("similar","text")=TEXT
"RTN","HMPFPTC",46,0)
 ;
"RTN","HMPFPTC",47,0)
 ; possibly check means test: GUIMTD^DPTLK6
"RTN","HMPFPTC",48,0)
 ; possibly check legacy data: I $L($T(HXDATA^A7RDPAGU)...
"RTN","HMPFPTC",49,0)
 ;
"RTN","HMPFPTC",50,0)
 I ACCESS D PRF(DFN,.CHKS)
"RTN","HMPFPTC",51,0)
 S ERR(0)=""
"RTN","HMPFPTC",52,0)
 ;S HMP=$$ENCODE^HMPJSON("CHKS","ERR")
"RTN","HMPFPTC",53,0)
 D ENCODE^HMPJSON("CHKS","HMPZ","ERR")
"RTN","HMPFPTC",54,0)
 Q
"RTN","HMPFPTC",55,0)
 ;
"RTN","HMPFPTC",56,0)
PRF(DFN,CHKS) ; get Patient Record Flags
"RTN","HMPFPTC",57,0)
 N HMPY,EDI,PRF,N,X
"RTN","HMPFPTC",58,0)
 Q:$$GETACT^DGPFAPI(DFN,"HMPY")'>0
"RTN","HMPFPTC",59,0)
 S EDI=0 F  S EDI=$O(HMPY(EDI)) Q:EDI<1  K PRF D
"RTN","HMPFPTC",60,0)
 . S CHKS("patientRecordFlags",EDI,"assignmentStatus")="Active"
"RTN","HMPFPTC",61,0)
 . S CHKS("patientRecordFlags",EDI,"assignTS")=$$JSONDT^HMPUTILS($P($G(HMPY(EDI,"ASSIGNDT")),U))
"RTN","HMPFPTC",62,0)
 . S CHKS("patientRecordFlags",EDI,"approved")=$P($G(HMPY(EDI,"APPRVBY")),U,2)
"RTN","HMPFPTC",63,0)
 . S CHKS("patientRecordFlags",EDI,"nextReviewDT")=$$JSONDT^HMPUTILS($P($G(HMPY(EDI,"REVIEWDT")),U))
"RTN","HMPFPTC",64,0)
 . S CHKS("patientRecordFlags",EDI,"name")=$P($G(HMPY(EDI,"FLAG")),U,2)
"RTN","HMPFPTC",65,0)
 . S CHKS("patientRecordFlags",EDI,"type")=$P($G(HMPY(EDI,"FLAGTYPE")),U,2)
"RTN","HMPFPTC",66,0)
 . S CHKS("patientRecordFlags",EDI,"category")=$P($G(HMPY(EDI,"CATEGORY")),U,2)
"RTN","HMPFPTC",67,0)
 . S CHKS("patientRecordFlags",EDI,"ownerSite")=$P($G(HMPY(EDI,"OWNER")),U,2)
"RTN","HMPFPTC",68,0)
 . S CHKS("patientRecordFlags",EDI,"originatingSite")=$P($G(HMPY(EDI,"ORIGSITE")),U,2)
"RTN","HMPFPTC",69,0)
 . S N=1,X=$G(HMPY(EDI,"NARR",1,0))
"RTN","HMPFPTC",70,0)
 . F  S N=$O(HMPY(EDI,"NARR",N)) Q:N<1  S X=X_$C(13)_$C(10)_$G(HMPY(EDI,"NARR",N,0))
"RTN","HMPFPTC",71,0)
 . S CHKS("patientRecordFlags",EDI,"text")=X
"RTN","HMPFPTC",72,0)
 Q
"RTN","HMPFPTC",73,0)
 ;
"RTN","HMPFPTC",74,0)
LOG(HMPZ,DFN) ; Make entry in security log for sensitive patient access
"RTN","HMPFPTC",75,0)
 N ERR,RESULTS,HMPY,X
"RTN","HMPFPTC",76,0)
 D NOTICE^DGSEC4(.HMPY,DFN) ;IA #3027
"RTN","HMPFPTC",77,0)
 S X=$S(HMPY:"ok",1:"fail")
"RTN","HMPFPTC",78,0)
 S RESULTS("result")=X
"RTN","HMPFPTC",79,0)
 ;S HMP=$$ENCODE^HMPJSON("RESULTS","ERR")
"RTN","HMPFPTC",80,0)
 D ENCODE^HMPJSON("RESULTS","HMPZ","ERR")
"RTN","HMPFPTC",81,0)
 Q
"RTN","HMPFPTC",82,0)
 ;
"RTN","HMPFPTC",83,0)
ENROS(HMPZ,DFNARRAY) ;PROCESS PATIENTS FROM A ROSTER
"RTN","HMPFPTC",84,0)
 N DFN S DFN=0
"RTN","HMPFPTC",85,0)
 F  S DFN=$O(DFNARRAY(DFN)) Q:DFN'>0  D CHKS(.HMPZ,DFN)
"RTN","HMPFPTC",86,0)
 Q
"RTN","HMPFPTC",87,0)
 ;
"RTN","HMPFPTC",88,0)
TEST ;
"RTN","HMPFPTC",89,0)
 K EDPSITE
"RTN","HMPFPTC",90,0)
 S EDPSITE=$$IEN^XUAF4(442),NAME="doe,john"
"RTN","HMPFPTC",91,0)
 D CHKS(1,"",NAME)
"RTN","HMPFPTC",92,0)
 ;N PID S EDPSITE=$$IEN^XUAF4(442)
"RTN","HMPFPTC",93,0)
 ;R "DFN:",PID Q:PID=""  W !
"RTN","HMPFPTC",94,0)
 ;D CHK(1,PID,$P(^DPT(PID,0),U))
"RTN","HMPFPTC",95,0)
 N I S I=0 F  S I=$O(EDPXML(I)) Q:'I  W !,EDPXML(I)
"RTN","HMPFPTC",96,0)
 K EDPXML
"RTN","HMPFPTC",97,0)
 Q
"RTN","HMPFPTC",98,0)
TEST1 ;
"RTN","HMPFPTC",99,0)
 S EDPSITE=$$IEN^XUAF4(442),NAME="doe,john"
"RTN","HMPFPTC",100,0)
 D CHKS(1,"",NAME)
"RTN","HMPFPTC",101,0)
 ;
"RTN","HMPFPTC",102,0)
 ;DO LATER?  -- linked progress notes
"RTN","HMPFPTC",103,0)
 ;D GETTITLE^TIUPRF2(.EDPT,DFN,EDI),GETNOTES^TIUPRF2(.EDPN,DFN,EDPT,1)
"RTN","HMPFPTC",104,0)
 ;I $O(EDPN(0)) D
"RTN","HMPFPTC",105,0)
 ;. D XML^EDPX("<notes>")
"RTN","HMPFPTC",106,0)
 ;. S N=0 F  S N=$O(EDPN(N)) Q:N<1  K PN S X=EDPN(N) D
"RTN","HMPFPTC",107,0)
 ;.. S PN("id")=+X,PN("action")=$P(X,U,2),PN("author")=$P(X,U,4)
"RTN","HMPFPTC",108,0)
 ;.. S PN("noteTS")=9999999-N
"RTN","HMPFPTC",109,0)
 ;.. D TGET^TIUSRVR1(.EDPX,+X)
"RTN","HMPFPTC",110,0)
 ;.. S X=$$XMLA^EDPX("note",.PN),X=$TR(X,"/") D XML^EDPX(X)
"RTN","HMPFPTC",111,0)
 ;.. S I=1,X=$G(@EDPX@(1))
"RTN","HMPFPTC",112,0)
 ;.. F  S I=$O(@EDPX@(I)) Q:I<1  S X=X_$C(13,10)_$G(@EDPX@(I))
"RTN","HMPFPTC",113,0)
 ;.. S X="<text>"_$$ESC^EDPX(X)_"</text>" D XML^EDPX(X)
"RTN","HMPFPTC",114,0)
 ;.. D XML^EDPX("</note>")
"RTN","HMPFPTC",115,0)
 ;. D XML^EDPX("</notes>")
"RTN","HMPHTTP")
0^95^B14631122
"RTN","HMPHTTP",1,0)
HMPHTTP ;SLC/MKB,ASMR/RRB - HTTP interface;9/25/2015 10:14
"RTN","HMPHTTP",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPHTTP",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPHTTP",4,0)
 ;
"RTN","HMPHTTP",5,0)
 ; External References          DBIA#
"RTN","HMPHTTP",6,0)
 ; -------------------          -----
"RTN","HMPHTTP",7,0)
 ; %ZTLOAD                      10063
"RTN","HMPHTTP",8,0)
 ; DIR                          10026
"RTN","HMPHTTP",9,0)
 ; VASITE                       10112
"RTN","HMPHTTP",10,0)
 ; XLFCRC                        3156
"RTN","HMPHTTP",11,0)
 ; XLFUTL                        2622
"RTN","HMPHTTP",12,0)
 ; XPAR                          2263
"RTN","HMPHTTP",13,0)
 ; XTHC10                        5515
"RTN","HMPHTTP",14,0)
 ; XUPARAM                       2541
"RTN","HMPHTTP",15,0)
 Q
"RTN","HMPHTTP",16,0)
 ;
"RTN","HMPHTTP",17,0)
EN ; -- manage the background job
"RTN","HMPHTTP",18,0)
 N ZTSK,STS
"RTN","HMPHTTP",19,0)
 S ZTSK=+$G(^XTMP("HMP","ZTSK")),STS=$$STS
"RTN","HMPHTTP",20,0)
 W !,?24,"--- HMP Patient Data Monitor ---"
"RTN","HMPHTTP",21,0)
 W !!,"Task"_$S(ZTSK:" #"_ZTSK,1:"")_" is "_$P(STS,U,2)_".",!
"RTN","HMPHTTP",22,0)
 ;
"RTN","HMPHTTP",23,0)
 I ZTSK,+STS=1!(+STS=2) D:$$STOP  Q
"RTN","HMPHTTP",24,0)
 . N X S X=$$ASKSTOP^%ZTLOAD(ZTSK)
"RTN","HMPHTTP",25,0)
 . W !,$P(X,U,2),!
"RTN","HMPHTTP",26,0)
 ;
"RTN","HMPHTTP",27,0)
 I $$START D
"RTN","HMPHTTP",28,0)
 . W !!,"Starting HMP Patient Data Monitor ... " D QUE
"RTN","HMPHTTP",29,0)
 . I $G(ZTSK) W "task #"_ZTSK_" started.",!
"RTN","HMPHTTP",30,0)
 . E  W !,"ERROR: task NOT created.  Try again later.",!
"RTN","HMPHTTP",31,0)
 . S ^XTMP("HMP","ZTSK")=$G(ZTSK)
"RTN","HMPHTTP",32,0)
 Q
"RTN","HMPHTTP",33,0)
 ;
"RTN","HMPHTTP",34,0)
STS() ; -- get the status of ZTSK
"RTN","HMPHTTP",35,0)
 D STAT^%ZTLOAD
"RTN","HMPHTTP",36,0)
 N Y S Y=+$G(ZTSK(1))_U_$G(ZTSK(2))
"RTN","HMPHTTP",37,0)
 Q Y
"RTN","HMPHTTP",38,0)
 ;
"RTN","HMPHTTP",39,0)
STOP() ; -- stop the task?
"RTN","HMPHTTP",40,0)
 N X,Y,DIR
"RTN","HMPHTTP",41,0)
 S DIR("A")="Do you want to stop the data monitor? ",DIR(0)="YA",DIR("B")="NO"
"RTN","HMPHTTP",42,0)
 S DIR("?",1)="Enter YES to stop or cancel the data monitor; please restart ASAP!"
"RTN","HMPHTTP",43,0)
 S DIR("?",3)="This job must be running in the background for AViVA to be notified"
"RTN","HMPHTTP",44,0)
 S DIR("?")="when new patient data is available.",DIR("?",2)="  "
"RTN","HMPHTTP",45,0)
 D ^DIR S:Y<1 Y=0
"RTN","HMPHTTP",46,0)
 Q Y
"RTN","HMPHTTP",47,0)
 ;
"RTN","HMPHTTP",48,0)
START() ; -- [re]start the task?
"RTN","HMPHTTP",49,0)
 N X,Y,DIR
"RTN","HMPHTTP",50,0)
 S DIR(0)="YA",DIR("B")="YES"
"RTN","HMPHTTP",51,0)
 S DIR("A")="Do you want to "_$S(STS:"re",1:"")_"start the data monitor? "
"RTN","HMPHTTP",52,0)
 S DIR("?",1)="Enter YES to "_$S(STS:"re",1:"")_"start the HMP Patient Data Monitor."
"RTN","HMPHTTP",53,0)
 S DIR("?",3)="This job must be running in the background for AViVA to be notified"
"RTN","HMPHTTP",54,0)
 S DIR("?")="when new patient data is available.",DIR("?",2)="  "
"RTN","HMPHTTP",55,0)
 D ^DIR S:Y<1 Y=0
"RTN","HMPHTTP",56,0)
 Q Y
"RTN","HMPHTTP",57,0)
 ;
"RTN","HMPHTTP",58,0)
QUE ; -- create the background task: returns ZTSK
"RTN","HMPHTTP",59,0)
 N IO,IOP,ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTKIL,ZTSYNC,ZTSAVE,%ZIS
"RTN","HMPHTTP",60,0)
 S %ZIS="0H",IOP="NULL" D ^%ZIS I POP W !,"Null Device Not Found" Q
"RTN","HMPHTTP",61,0)
 S ZTDESC="HMP new data monitor for AViVA",ZTDTH=$H,ZTIO=""
"RTN","HMPHTTP",62,0)
 S ZTRTN="POKE^HMPHTTP" K ZTSK
"RTN","HMPHTTP",63,0)
 D ^%ZTLOAD
"RTN","HMPHTTP",64,0)
 Q
"RTN","HMPHTTP",65,0)
 ;
"RTN","HMPHTTP",66,0)
POKE ; -- background job to poke the client when new data is available
"RTN","HMPHTTP",67,0)
 ; ^XTMP("HMP",DFN,TYPE,ID) = new data since last update
"RTN","HMPHTTP",68,0)
 N DIV,ID,DFN,DATA,IOP,X,DA,TOKEN,NEW K ZTSTOP,ZTREQ
"RTN","HMPHTTP",69,0)
 S IOP="NULL" D ^%ZIS
"RTN","HMPHTTP",70,0)
 S ID=(+$H)+$P($H,",",2)
"RTN","HMPHTTP",71,0)
 S DFN=0 F  S DFN=$O(^XTMP("HMP",DFN)) Q:DFN<1  I $D(^(DFN))>9 D
"RTN","HMPHTTP",72,0)
 . L +^XTMP("HMP",DFN):5 Q:'$T  ;try again next cycle
"RTN","HMPHTTP",73,0)
 . K DATA M DATA=^XTMP("HMP",DFN)
"RTN","HMPHTTP",74,0)
 . S X=$G(^XTMP("HMP",DFN)) K ^(DFN) S ^(DFN)=X ;clear list, keep subscription
"RTN","HMPHTTP",75,0)
 . L -^XTMP("HMP",DFN)
"RTN","HMPHTTP",76,0)
 . ; add to list for URL
"RTN","HMPHTTP",77,0)
 . S DA=0 F  S DA=$O(^HMP(800000,"ADFN",DFN,DA)) Q:DA<1  D
"RTN","HMPHTTP",78,0)
 .. S TOKEN=DA_"~"_ID,NEW(TOKEN)=""
"RTN","HMPHTTP",79,0)
 .. M ^XTMP("HMPX",TOKEN,DFN)=DATA
"RTN","HMPHTTP",80,0)
 D SEND(.NEW)
"RTN","HMPHTTP",81,0)
 I $$S^%ZTLOAD S ZTSTOP=1,ZTREQ="@" Q
"RTN","HMPHTTP",82,0)
 D HANG S ZTREQ="" ;re-queue
"RTN","HMPHTTP",83,0)
 Q
"RTN","HMPHTTP",84,0)
 ;
"RTN","HMPHTTP",85,0)
SEND(LIST) ; send each list ID to its URL
"RTN","HMPHTTP",86,0)
 N SYS,ID,DA,URL,X
"RTN","HMPHTTP",87,0)
 S SYS=$$SYS
"RTN","HMPHTTP",88,0)
 ; DIV=$P($$SITE^VASITE,U,3) ;station#
"RTN","HMPHTTP",89,0)
 S ID="" F  S ID=$O(LIST(ID)) Q:ID=""  D
"RTN","HMPHTTP",90,0)
 . S DA=+ID,URL=$G(^HMP(800000,DA,.1)) Q:URL=""
"RTN","HMPHTTP",91,0)
 . S URL=URL_"?vistaId="_SYS_"&id="_ID
"RTN","HMPHTTP",92,0)
 . S X=$$GETURL^XTHC10(URL,,"HMPX") ;I X>200 = ERROR
"RTN","HMPHTTP",93,0)
 Q
"RTN","HMPHTTP",94,0)
 ;
"RTN","HMPHTTP",95,0)
SYS() ; -- return hashed system name
"RTN","HMPHTTP",96,0)
 Q $$BASE^XLFUTL($$CRC16^XLFCRC($$KSP^XUPARAM("WHERE")),10,16)
"RTN","HMPHTTP",97,0)
 ;
"RTN","HMPHTTP",98,0)
HANG ; -- wait #seconds
"RTN","HMPHTTP",99,0)
 N X S X=$$GET^XPAR("ALL","HMP TASK WAIT TIME") S:'X X=99
"RTN","HMPHTTP",100,0)
 H X
"RTN","HMPHTTP",101,0)
 Q
"RTN","HMPHTTP",102,0)
 ;
"RTN","HMPHTTP",103,0)
KILL ; -- kill/reset ^HMP(800000) for testing
"RTN","HMPHTTP",104,0)
 K ^HMP(800000)
"RTN","HMPHTTP",105,0)
 S ^HMP(800000,0)="HMP SUBSCRIPTION^800000^^"
"RTN","HMPHTTP",106,0)
 Q
"RTN","HMPIDX")
0^96^B2980358
"RTN","HMPIDX",1,0)
HMPIDX ;SLC/MKB,ASMR/RRB,SRG - Create HMP triggers;Feb 01, 2016 14:22:27
"RTN","HMPIDX",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPIDX",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPIDX",4,0)
 ;
"RTN","HMPIDX",5,0)
 Q
"RTN","HMPIDX",6,0)
 ;
"RTN","HMPIDX",7,0)
 ;DE2818 documentation:
"RTN","HMPIDX",8,0)
 ;  CREIXN^DDMOD - ICR 2916
"RTN","HMPIDX",9,0)
 ;  EN^XPAR - ICR 2263
"RTN","HMPIDX",10,0)
 ;
"RTN","HMPIDX",11,0)
EN ; -- create index triggers
"RTN","HMPIDX",12,0)
 ; Other indexes are created in HMP 2.0 PREREQUISITE BUNDLE patches
"RTN","HMPIDX",13,0)
 ; Problems -- GMPL*2*36 provides protocol event
"RTN","HMPIDX",14,0)
 ; CLiO     -- MD*2*38 provides protocol event
"RTN","HMPIDX",15,0)
 ; TIU      -- TIU*2*106 provides index event
"RTN","HMPIDX",16,0)
 D GMRV     ;Vitals            
"RTN","HMPIDX",17,0)
 ;
"RTN","HMPIDX",18,0)
 D EN^XPAR("PKG.VIRTUAL PATIENT RECORD","HMP TASK WAIT TIME",1,99)
"RTN","HMPIDX",19,0)
 ;S ^XTMP("HMP",0)="3991231^3110101^HMP Patient Data Monitor"
"RTN","HMPIDX",20,0)
 Q
"RTN","HMPIDX",21,0)
 ;
"RTN","HMPIDX",22,0)
GMRV ; -- create AHMP index on GMRV Measurement file #120.5
"RTN","HMPIDX",23,0)
 ; DE3640: quit if index already exists, as deletion of old index by DIKCR will take a long time
"RTN","HMPIDX",24,0)
 Q:$O(^DD("IX","BB",120.5,"AHMP",0))
"RTN","HMPIDX",25,0)
 N HMPX,HMPY
"RTN","HMPIDX",26,0)
 S HMPX("FILE")=120.5,HMPX("NAME")="AHMP"
"RTN","HMPIDX",27,0)
 S HMPX("TYPE")="MU",HMPX("USE")="A"
"RTN","HMPIDX",28,0)
 S HMPX("EXECUTION")="R",HMPX("ACTIVITY")=""
"RTN","HMPIDX",29,0)
 S HMPX("SHORT DESCR")="Event for HMP"
"RTN","HMPIDX",30,0)
 S HMPX("DESCR",1)="This index invokes a HMP event point when vitals are modified."
"RTN","HMPIDX",31,0)
 S HMPX("DESCR",2)="No actual cross-reference nodes are set or killed."
"RTN","HMPIDX",32,0)
 S HMPX("SET")="Q:$D(DIU(0))!($G(XDRDVALF)=1)  D GMRV^HMPEVNT(X,DA,$G(X(3)))"
"RTN","HMPIDX",33,0)
 S HMPX("KILL")="Q",HMPX("WHOLE KILL")="Q"
"RTN","HMPIDX",34,0)
 S HMPX("VAL",1)=.02            ;Patient
"RTN","HMPIDX",35,0)
 S HMPX("VAL",2)=1.2            ;Rate
"RTN","HMPIDX",36,0)
 S HMPX("VAL",3)=2              ;Entered in Error
"RTN","HMPIDX",37,0)
 D CREIXN^DDMOD(.HMPX,"",.HMPY) ;HMPY=ien^name of index
"RTN","HMPIDX",38,0)
 Q
"RTN","HMPIDX",39,0)
 ;
"RTN","HMPJSON")
0^97^B11632331
"RTN","HMPJSON",1,0)
HMPJSON ;SLC/KCM,ASMR/RRB - Decode/Encode JSON;9/25/2015 10:15
"RTN","HMPJSON",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPJSON",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPJSON",4,0)
 ;
"RTN","HMPJSON",5,0)
 Q
"RTN","HMPJSON",6,0)
 ;
"RTN","HMPJSON",7,0)
 ; Note:  Since the routines use closed array references, VVROOT and VVERR
"RTN","HMPJSON",8,0)
 ;        are used to reduce risk of naming conflicts on the closed array.
"RTN","HMPJSON",9,0)
 ;
"RTN","HMPJSON",10,0)
DECODE(VVJSON,VVROOT,VVERR)  ; Set JSON object into closed array ref VVROOT
"RTN","HMPJSON",11,0)
 ; Examples: D DECODE^HMPJSON("MYJSON","LOCALVAR","LOCALERR")
"RTN","HMPJSON",12,0)
 ;           D DECODE^HMPJSON("^MYJSON(1)","^GLO(99)","^TMP($J)")
"RTN","HMPJSON",13,0)
 ;
"RTN","HMPJSON",14,0)
 ; VVJSON: string/array containing serialized JSON object
"RTN","HMPJSON",15,0)
 ; VVROOT: closed array reference for M representation of object
"RTN","HMPJSON",16,0)
 ;  VVERR: contains error messages, defaults to ^TMP("HMPJERR",$J)
"RTN","HMPJSON",17,0)
 ;
"RTN","HMPJSON",18,0)
 ;   VVIDX: points to next character in JSON string to process
"RTN","HMPJSON",19,0)
 ; VVSTACK: manages stack of subscripts
"RTN","HMPJSON",20,0)
 ;  VHMPOP: true if next string is property name, otherwise treat as value
"RTN","HMPJSON",21,0)
 ;
"RTN","HMPJSON",22,0)
 G DIRECT^HMPJSOND
"RTN","HMPJSON",23,0)
 ;
"RTN","HMPJSON",24,0)
ENCODE(VVROOT,VVJSON,VVERR) ; VVROOT (M structure) --> VVJSON (array of strings)
"RTN","HMPJSON",25,0)
 ; Examples:  D ENCODE^HMPJSON("^GLO(99,2)","^TMP($J)")
"RTN","HMPJSON",26,0)
 ;            D ENCODE^HMPJSON("LOCALVAR","MYJSON","LOCALERR")
"RTN","HMPJSON",27,0)
 ;
"RTN","HMPJSON",28,0)
 ; VVROOT: closed array reference for M representation of object
"RTN","HMPJSON",29,0)
 ; VVJSON: destination variable for the string array formatted as JSON
"RTN","HMPJSON",30,0)
 ;  VVERR: contains error messages, defaults to ^TMP("HMPJERR",$J)
"RTN","HMPJSON",31,0)
 ;
"RTN","HMPJSON",32,0)
 G DIRECT^HMPJSONE
"RTN","HMPJSON",33,0)
 ;
"RTN","HMPJSON",34,0)
 ;
"RTN","HMPJSON",35,0)
ESC(X) ; Escape string for JSON
"RTN","HMPJSON",36,0)
 Q $$ESC^HMPJSONE(X)
"RTN","HMPJSON",37,0)
 ;
"RTN","HMPJSON",38,0)
UES(X) ; Unescape JSON string
"RTN","HMPJSON",39,0)
 Q $$UES^HMPJSOND(X)
"RTN","HMPJSON",40,0)
 ;
"RTN","HMPJSON",41,0)
ERRX(ID,VAL) ; Set the appropriate error message
"RTN","HMPJSON",42,0)
 ; switch (ID) -- XERRX ends statement
"RTN","HMPJSON",43,0)
 N ERRMSG
"RTN","HMPJSON",44,0)
 ;
"RTN","HMPJSON",45,0)
 ; Decode Error Messages
"RTN","HMPJSON",46,0)
 ;
"RTN","HMPJSON",47,0)
 I ID="STL{" S ERRMSG="Stack too large for new object." G XERRX
"RTN","HMPJSON",48,0)
 I ID="SUF}" S ERRMSG="Stack Underflow - extra } found" G XERRX
"RTN","HMPJSON",49,0)
 I ID="STL[" S ERRMSG="Stack too large for new array." G XERRX
"RTN","HMPJSON",50,0)
 I ID="SUF]" S ERRMSG="Stack Underflow - extra ] found." G XERRX
"RTN","HMPJSON",51,0)
 I ID="OBM" S ERRMSG="Array mismatch - expected ] got }." G XERRX
"RTN","HMPJSON",52,0)
 I ID="ARM" S ERRMSG="Object mismatch - expected } got ]." G XERRX
"RTN","HMPJSON",53,0)
 I ID="MPN" S ERRMSG="Missing property name." G XERRX
"RTN","HMPJSON",54,0)
 I ID="EXT" S ERRMSG="Expected true, got "_VAL G XERRX
"RTN","HMPJSON",55,0)
 I ID="EXF" S ERRMSG="Expected false, got "_VAL G XERRX
"RTN","HMPJSON",56,0)
 I ID="EXN" S ERRMSG="Expected null, got "_VAL G XERRX
"RTN","HMPJSON",57,0)
 I ID="TKN" S ERRMSG="Unable to identify type of token, value was "_VAL G XERRX
"RTN","HMPJSON",58,0)
 I ID="SCT" S ERRMSG="Stack mismatch - exit stack level was  "_VAL G XERRX
"RTN","HMPJSON",59,0)
 I ID="EIQ" S ERRMSG="Close quote not found before end of input." G XERRX
"RTN","HMPJSON",60,0)
 I ID="EIU" S ERRMSG="Unexpected end of input while unescaping." G XERRX
"RTN","HMPJSON",61,0)
 I ID="RSB" S ERRMSG="Reverse search for \ past beginning of input." G XERRX
"RTN","HMPJSON",62,0)
 I ID="ORN" S ERRMSG="Overrun while scanning name." G XERRX
"RTN","HMPJSON",63,0)
 I ID="OR#" S ERRMSG="Overrun while scanning number." G XERRX
"RTN","HMPJSON",64,0)
 I ID="ORB" S ERRMSG="Overrun while scanning boolean." G XERRX
"RTN","HMPJSON",65,0)
 I ID="ESC" S ERRMSG="Escaped character not recognized"_VAL G XERRX
"RTN","HMPJSON",66,0)
 ;
"RTN","HMPJSON",67,0)
 ; Encode Error Messages
"RTN","HMPJSON",68,0)
 ;
"RTN","HMPJSON",69,0)
 I ID="SOB" S ERRMSG="Unable to serialize node as object, value was "_VAL G XERRX
"RTN","HMPJSON",70,0)
 I ID="SAR" S ERRMSG="Unable to serialize node as array, value was "_VAL G XERRX
"RTN","HMPJSON",71,0)
 S ERRMSG="Unspecified error "_ID_" "_$G(VAL)
"RTN","HMPJSON",72,0)
XERRX ; end switch
"RTN","HMPJSON",73,0)
 S @VVERR@(0)=$G(@VVERR@(0))+1
"RTN","HMPJSON",74,0)
 S @VVERR@(@VVERR@(0))=ERRMSG
"RTN","HMPJSON",75,0)
 S VVERRORS=VVERRORS+1
"RTN","HMPJSON",76,0)
 Q
"RTN","HMPJSOND")
0^98^B71688388
"RTN","HMPJSOND",1,0)
HMPJSOND ;SLC/KCM,ASMR/RRB - Decode JSON;9/25/2015 10:16
"RTN","HMPJSOND",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPJSOND",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPJSOND",4,0)
 ;
"RTN","HMPJSOND",5,0)
 Q
"RTN","HMPJSOND",6,0)
 ;
"RTN","HMPJSOND",7,0)
DECODE(VVJSON,VVROOT,VVERR) ; Set JSON object into closed array ref VVROOT
"RTN","HMPJSOND",8,0)
 ;
"RTN","HMPJSOND",9,0)
DIRECT ; TAG for use by DECODE^HMPJSON
"RTN","HMPJSOND",10,0)
 ;
"RTN","HMPJSOND",11,0)
 ; Examples: D DECODE^HMPJSON("MYJSON","LOCALVAR","LOCALERR")
"RTN","HMPJSOND",12,0)
 ;           D DECODE^HMPJSON("^MYJSON(1)","^GLO(99)","^TMP($J)")
"RTN","HMPJSOND",13,0)
 ;
"RTN","HMPJSOND",14,0)
 ; VVJSON: string/array containing serialized JSON object
"RTN","HMPJSOND",15,0)
 ; VVROOT: closed array reference for M representation of object
"RTN","HMPJSOND",16,0)
 ;  VVERR: contains error messages, defaults to ^TMP("HMPJERR",$J)
"RTN","HMPJSOND",17,0)
 ;
"RTN","HMPJSOND",18,0)
 ;   VVIDX: points to next character in JSON string to process
"RTN","HMPJSOND",19,0)
 ; VVSTACK: manages stack of subscripts
"RTN","HMPJSOND",20,0)
 ;  VHMPOP: true if next string is property name, otherwise treat as value
"RTN","HMPJSOND",21,0)
 ;
"RTN","HMPJSOND",22,0)
 N VVMAX S VVMAX=4000 ; limit document lines to 4000 characters
"RTN","HMPJSOND",23,0)
 S VVERR=$G(VVERR,"^TMP(""HMPJERR"",$J)")
"RTN","HMPJSOND",24,0)
 ; If a simple string is passed in, move it to an temp array (VVINPUT)
"RTN","HMPJSOND",25,0)
 ; so that the processing is consistently on an array.
"RTN","HMPJSOND",26,0)
 I $D(@VVJSON)=1 N VVINPUT S VVINPUT(1)=@VVJSON,VVJSON="VVINPUT"
"RTN","HMPJSOND",27,0)
 S VVROOT=$NA(@VVROOT@("Z")),VVROOT=$E(VVROOT,1,$L(VVROOT)-4) ; make open array ref
"RTN","HMPJSOND",28,0)
 N VVLINE,VVIDX,VVSTACK,VHMPOP,VVTYPE,VVERRORS
"RTN","HMPJSOND",29,0)
 S VVLINE=$O(@VVJSON@("")),VVIDX=1,VVSTACK=0,VHMPOP=0,VVERRORS=0
"RTN","HMPJSOND",30,0)
 F  S VVTYPE=$$NXTKN() Q:VVTYPE=""  D  I VVERRORS Q
"RTN","HMPJSOND",31,0)
 . I VVTYPE="{" S VVSTACK=VVSTACK+1,VVSTACK(VVSTACK)="",VHMPOP=1 D:VVSTACK>64 ERRX("STL{") Q
"RTN","HMPJSOND",32,0)
 . I VVTYPE="}" D  QUIT
"RTN","HMPJSOND",33,0)
 . . I +VVSTACK(VVSTACK)=VVSTACK(VVSTACK),VVSTACK(VVSTACK) D ERRX("OBM") ; Numeric and true only
"RTN","HMPJSOND",34,0)
 . . S VVSTACK=VVSTACK-1 D:VVSTACK<0 ERRX("SUF}")
"RTN","HMPJSOND",35,0)
 . I VVTYPE="[" S VVSTACK=VVSTACK+1,VVSTACK(VVSTACK)=1 D:VVSTACK>64 ERRX("STL[") Q
"RTN","HMPJSOND",36,0)
 . I VVTYPE="]" D:'VVSTACK(VVSTACK) ERRX("ARM") S VVSTACK=VVSTACK-1 D:VVSTACK<0 ERRX("SUF]") Q
"RTN","HMPJSOND",37,0)
 . I VVTYPE="," D  Q
"RTN","HMPJSOND",38,0)
 . . I +VVSTACK(VVSTACK)=VVSTACK(VVSTACK),VVSTACK(VVSTACK) S VVSTACK(VVSTACK)=VVSTACK(VVSTACK)+1  ; VEN/SMH - next in array 
"RTN","HMPJSOND",39,0)
 . . E  S VHMPOP=1                                   ; or next property name
"RTN","HMPJSOND",40,0)
 . I VVTYPE=":" S VHMPOP=0 D:'$L($G(VVSTACK(VVSTACK))) ERRX("MPN") Q
"RTN","HMPJSOND",41,0)
 . I VVTYPE="""" D  Q
"RTN","HMPJSOND",42,0)
 . . I VHMPOP S VVSTACK(VVSTACK)=$$NAMPARS() I 1
"RTN","HMPJSOND",43,0)
 . . E  D ADDSTR
"RTN","HMPJSOND",44,0)
 . S VVTYPE=$TR(VVTYPE,"TFN","tfn")
"RTN","HMPJSOND",45,0)
 . I VVTYPE="t" D SETBOOL("t") Q
"RTN","HMPJSOND",46,0)
 . I VVTYPE="f" D SETBOOL("f") Q
"RTN","HMPJSOND",47,0)
 . I VVTYPE="n" D SETBOOL("n") Q
"RTN","HMPJSOND",48,0)
 . I "0123456789+-.eE"[VVTYPE D SETNUM(VVTYPE) Q  ;S @$$CURNODE()=$$NUMPARS(VVTYPE) Q
"RTN","HMPJSOND",49,0)
 . D ERRX("TKN",VVTYPE)
"RTN","HMPJSOND",50,0)
 I VVSTACK'=0 D ERRX("SCT",VVSTACK)
"RTN","HMPJSOND",51,0)
 Q
"RTN","HMPJSOND",52,0)
NXTKN() ; Move the pointers to the beginning of the next token
"RTN","HMPJSOND",53,0)
 N VVDONE,VVEOF,VVTOKEN
"RTN","HMPJSOND",54,0)
 S VVDONE=0,VVEOF=0 F  D  Q:VVDONE!VVEOF  ; eat spaces & new lines until next visible char
"RTN","HMPJSOND",55,0)
 . I VVIDX>$L(@VVJSON@(VVLINE)) S VVLINE=$O(@VVJSON@(VVLINE)),VVIDX=1 I 'VVLINE S VVEOF=1 Q
"RTN","HMPJSOND",56,0)
 . I $A(@VVJSON@(VVLINE),VVIDX)>32 S VVDONE=1 Q
"RTN","HMPJSOND",57,0)
 . S VVIDX=VVIDX+1
"RTN","HMPJSOND",58,0)
 Q:VVEOF ""  ; we're at the end of input
"RTN","HMPJSOND",59,0)
 S VVTOKEN=$E(@VVJSON@(VVLINE),VVIDX),VVIDX=VVIDX+1
"RTN","HMPJSOND",60,0)
 Q VVTOKEN
"RTN","HMPJSOND",61,0)
 ;
"RTN","HMPJSOND",62,0)
ADDSTR ; Add string value to current node, escaping text along the way
"RTN","HMPJSOND",63,0)
 ; Expects VVLINE,VVIDX to reference that starting point of the index
"RTN","HMPJSOND",64,0)
 ; TODO: add a mechanism to specify names that should not be escaped
"RTN","HMPJSOND",65,0)
 ;       just store as ":")= and ":",n)=
"RTN","HMPJSOND",66,0)
 ;
"RTN","HMPJSOND",67,0)
 ; Happy path -- we find the end quote in the same line
"RTN","HMPJSOND",68,0)
 N VVEND,VVX
"RTN","HMPJSOND",69,0)
 S VVEND=$F(@VVJSON@(VVLINE),"""",VVIDX)
"RTN","HMPJSOND",70,0)
 I VVEND,($E(@VVJSON@(VVLINE),VVEND-2)'="\") D SETSTR  QUIT  ;normal
"RTN","HMPJSOND",71,0)
 I VVEND,$$ISCLOSEQ(VVLINE) D SETSTR QUIT  ;close quote preceded by escaped \
"RTN","HMPJSOND",72,0)
 ;
"RTN","HMPJSOND",73,0)
 ; Less happy path -- first quote wasn't close quote
"RTN","HMPJSOND",74,0)
 N VVDONE,VVTLINE
"RTN","HMPJSOND",75,0)
 S VVDONE=0,VVTLINE=VVLINE ; VVTLINE for temporary increment of VVLINE
"RTN","HMPJSOND",76,0)
 F  D  Q:VVDONE  Q:VVERRORS
"RTN","HMPJSOND",77,0)
 . ;if no quote on current line advance line, scan again
"RTN","HMPJSOND",78,0)
 . I 'VVEND S VVTLINE=VVTLINE+1,VVEND=1 I '$D(@VVJSON@(VVTLINE)) D ERRX("EIQ") Q
"RTN","HMPJSOND",79,0)
 . S VVEND=$F(@VVJSON@(VVTLINE),"""",VVEND)
"RTN","HMPJSOND",80,0)
 . Q:'VVEND  ; continue on to next line if no quote found on this one
"RTN","HMPJSOND",81,0)
 . I (VVEND>2),($E(@VVJSON@(VVTLINE),VVEND-2)'="\") S VVDONE=1 Q  ; found quote position
"RTN","HMPJSOND",82,0)
 . S VVDONE=$$ISCLOSEQ(VVTLINE) ; see if this is an escaped quote or closing quote
"RTN","HMPJSOND",83,0)
 Q:VVERRORS
"RTN","HMPJSOND",84,0)
 ; unescape from VVIDX to VVEND, using \-extension nodes as necessary
"RTN","HMPJSOND",85,0)
 D UESEXT
"RTN","HMPJSOND",86,0)
 ; now we need to move VVLINE and VVIDX to next parsing point
"RTN","HMPJSOND",87,0)
 S VVLINE=VVTLINE,VVIDX=VVEND
"RTN","HMPJSOND",88,0)
 Q
"RTN","HMPJSOND",89,0)
SETSTR ; Set simple string value from within same line
"RTN","HMPJSOND",90,0)
 ; expects VVJSON, VVLINE, VVINX, VVEND
"RTN","HMPJSOND",91,0)
 N VVX
"RTN","HMPJSOND",92,0)
 S VVX=$E(@VVJSON@(VVLINE),VVIDX,VVEND-2),VVIDX=VVEND
"RTN","HMPJSOND",93,0)
 S @$$CURNODE()=$$UES(VVX)
"RTN","HMPJSOND",94,0)
 ; "\s" node indicates value is really a string in case value 
"RTN","HMPJSOND",95,0)
 ;      collates as numeric or equals boolean keywords
"RTN","HMPJSOND",96,0)
 I VVX']]$C(1) S @$$CURNODE()@("\s")=""
"RTN","HMPJSOND",97,0)
 I VVX="true"!(VVX="false")!(VVX="null") S @$$CURNODE()@("\s")=""
"RTN","HMPJSOND",98,0)
 I VVIDX>$L(@VVJSON@(VVLINE)) S VVLINE=VVLINE+1,VVIDX=1
"RTN","HMPJSOND",99,0)
 Q
"RTN","HMPJSOND",100,0)
UESEXT ; unescape from VVLINE,VVIDX to VVTLINE,VVEND & extend (\) if necessary
"RTN","HMPJSOND",101,0)
 ; expects VVLINE,VVIDX,VVTLINE,VVEND
"RTN","HMPJSOND",102,0)
 N VVI,VVY,VVSTART,VVSTOP,VVDONE,VVBUF,VVNODE,VVMORE,VVTO
"RTN","HMPJSOND",103,0)
 S VVNODE=$$CURNODE(),VVBUF="",VVMORE=0,VVSTOP=VVEND-2
"RTN","HMPJSOND",104,0)
 S VVI=VVIDX,VVY=VVLINE,VVDONE=0
"RTN","HMPJSOND",105,0)
 F  D  Q:VVDONE  Q:VVERRORS
"RTN","HMPJSOND",106,0)
 . S VVSTART=VVI,VVI=$F(@VVJSON@(VVY),"\",VVI)
"RTN","HMPJSOND",107,0)
 . ; if we are on the last line, don't extract past VVSTOP
"RTN","HMPJSOND",108,0)
 . I (VVY=VVTLINE) S VVTO=$S('VVI:VVSTOP,VVI>VVSTOP:VVSTOP,1:VVI-2) I 1
"RTN","HMPJSOND",109,0)
 . E  S VVTO=$S('VVI:99999,1:VVI-2)
"RTN","HMPJSOND",110,0)
 . D ADDBUF($E(@VVJSON@(VVY),VVSTART,VVTO))
"RTN","HMPJSOND",111,0)
 . I (VVY'<VVTLINE),(('VVI)!(VVI>VVSTOP)) S VVDONE=1 QUIT  ; now past close quote
"RTN","HMPJSOND",112,0)
 . I 'VVI S VVY=VVY+1,VVI=1 QUIT  ; nothing escaped, go to next line
"RTN","HMPJSOND",113,0)
 . I VVI>$L(@VVJSON@(VVY)) S VVY=VVY+1,VVI=1 I '$D(@VVJSON@(VVY)) D ERRX("EIU")
"RTN","HMPJSOND",114,0)
 . N VVTGT S VVTGT=$E(@VVJSON@(VVY),VVI)
"RTN","HMPJSOND",115,0)
 . I VVTGT="u" D  I 1
"RTN","HMPJSOND",116,0)
 . . N VVTGTC S VVTGTC=$E(@VVJSON@(VVY),VVI+1,VVI+4),VVI=VVI+4
"RTN","HMPJSOND",117,0)
 . . I $L(VVTGTC)<4 S VVY=VVY+1,VVI=4-$L(VVTGTC),VVTGTC=VVTGTC_$E(@VVJSON@(VVY),1,VVI)
"RTN","HMPJSOND",118,0)
 . . D ADDBUF($C($$DEC^XLFUTL(VVTGTC,16)))
"RTN","HMPJSOND",119,0)
 . E  D ADDBUF($$REALCHAR(VVTGT))
"RTN","HMPJSOND",120,0)
 . S VVI=VVI+1
"RTN","HMPJSOND",121,0)
 . I (VVY'<VVTLINE),(VVI>VVSTOP) S VVDONE=1 ; VVI incremented past stop
"RTN","HMPJSOND",122,0)
 Q:VVERRORS
"RTN","HMPJSOND",123,0)
 D SAVEBUF
"RTN","HMPJSOND",124,0)
 Q
"RTN","HMPJSOND",125,0)
ADDBUF(VVX) ; add buffer of characters to destination
"RTN","HMPJSOND",126,0)
 ; expects VVBUF,VVMAX,VVNODE,VVMORE to be defined
"RTN","HMPJSOND",127,0)
 ; used directly by ADDSTR
"RTN","HMPJSOND",128,0)
 I $L(VVX)+$L(VVBUF)>VVMAX D SAVEBUF
"RTN","HMPJSOND",129,0)
 S VVBUF=VVBUF_VVX
"RTN","HMPJSOND",130,0)
 Q
"RTN","HMPJSOND",131,0)
SAVEBUF ; write out buffer to destination
"RTN","HMPJSOND",132,0)
 ; expects VVBUF,VVMAX,VVNODE,VVMORE to be defined
"RTN","HMPJSOND",133,0)
 ; used directly by ADDSTR,ADDBUF
"RTN","HMPJSOND",134,0)
 I VVMORE S @VVNODE@("\",VVMORE)=VVBUF
"RTN","HMPJSOND",135,0)
 I 'VVMORE S @VVNODE=VVBUF I $L(VVBUF)<19,+$E(VVBUF,1,18) S @VVNODE@("\s")=""
"RTN","HMPJSOND",136,0)
 S VVMORE=VVMORE+1,VVBUF=""
"RTN","HMPJSOND",137,0)
 Q
"RTN","HMPJSOND",138,0)
ISCLOSEQ(VVBLINE) ; return true if this is a closing, rather than escaped, quote
"RTN","HMPJSOND",139,0)
 ; expects
"RTN","HMPJSOND",140,0)
 ;   VVJSON: lines of the JSON encoded string
"RTN","HMPJSOND",141,0)
 ;    VVIDX: points to 1st character of the segment
"RTN","HMPJSOND",142,0)
 ;   VVLINE: points to the line in which the segment starts
"RTN","HMPJSOND",143,0)
 ;    VVEND: points to 1st character after the " (may be past the end of the line)
"RTN","HMPJSOND",144,0)
 ; used directly by ADDSTR
"RTN","HMPJSOND",145,0)
 N VVBS,VVBIDX,VVBDONE
"RTN","HMPJSOND",146,0)
 S VVBS=0,VVBIDX=VVEND-2,VVBDONE=0 ; VVBIDX starts at 1st character before quote
"RTN","HMPJSOND",147,0)
 ; count the backslashes preceding the quote (odd number means the quote was escaped)
"RTN","HMPJSOND",148,0)
 F  D  Q:VVBDONE!VVERRORS
"RTN","HMPJSOND",149,0)
 . I VVBIDX<1 D  Q  ; when VVBIDX<1 go back a line
"RTN","HMPJSOND",150,0)
 . . S VVBLINE=VVBLINE-1 I VVBLINE<VVLINE D ERRX("RSB") Q
"RTN","HMPJSOND",151,0)
 . . S VVBIDX=$L(@VVJSON@(VVBLINE))
"RTN","HMPJSOND",152,0)
 . I $E(@VVJSON@(VVBLINE),VVBIDX)'="\" S VVBDONE=1 Q
"RTN","HMPJSOND",153,0)
 . S VVBS=VVBS+1,VVBIDX=VVBIDX-1
"RTN","HMPJSOND",154,0)
 Q VVBS#2=0  ; VVBS is even if this is a close quote
"RTN","HMPJSOND",155,0)
 ;
"RTN","HMPJSOND",156,0)
NAMPARS() ; Return parsed name, advancing index past the close quote
"RTN","HMPJSOND",157,0)
 ; -- This assumes no embedded quotes are in the name itself --
"RTN","HMPJSOND",158,0)
 N VVEND,VVDONE,VVNAME
"RTN","HMPJSOND",159,0)
 S VVDONE=0,VVNAME=""
"RTN","HMPJSOND",160,0)
 F  D  Q:VVDONE  Q:VVERRORS
"RTN","HMPJSOND",161,0)
 . S VVEND=$F(@VVJSON@(VVLINE),"""",VVIDX)
"RTN","HMPJSOND",162,0)
 . I VVEND S VVNAME=VVNAME_$E(@VVJSON@(VVLINE),VVIDX,VVEND-2),VVIDX=VVEND,VVDONE=1
"RTN","HMPJSOND",163,0)
 . I 'VVEND S VVNAME=VVNAME_$E(@VVJSON@(VVLINE),VVIDX,$L(@VVJSON@(VVLINE)))
"RTN","HMPJSOND",164,0)
 . I 'VVEND!(VVEND>$L(@VVJSON@(VVLINE))) S VVLINE=VVLINE+1,VVIDX=1 I '$D(@VVJSON@(VVLINE)) D ERRX("ORN")
"RTN","HMPJSOND",165,0)
 ; prepend quote if label collates as numeric -- assumes no quotes in label
"RTN","HMPJSOND",166,0)
 I VVNAME']]$C(1) S VVNAME=""""""_VVNAME
"RTN","HMPJSOND",167,0)
 Q VVNAME
"RTN","HMPJSOND",168,0)
 ;
"RTN","HMPJSOND",169,0)
SETNUM(VVDIGIT) ; Set numeric along with any necessary modifier
"RTN","HMPJSOND",170,0)
 N VVX
"RTN","HMPJSOND",171,0)
 S VVX=$$NUMPARS(VVDIGIT)
"RTN","HMPJSOND",172,0)
 S @$$CURNODE()=+VVX
"RTN","HMPJSOND",173,0)
 ; if numeric is exponent, "0.nnn" or "-0.nnn" store original string
"RTN","HMPJSOND",174,0)
 I +VVX'=VVX S @$$CURNODE()@("\n")=VVX
"RTN","HMPJSOND",175,0)
 Q
"RTN","HMPJSOND",176,0)
NUMPARS(VVDIGIT) ; Return parsed number, advancing index past end of number
"RTN","HMPJSOND",177,0)
 ; VVIDX initially references the second digit
"RTN","HMPJSOND",178,0)
 N VVDONE,VVNUM
"RTN","HMPJSOND",179,0)
 S VVDONE=0,VVNUM=VVDIGIT
"RTN","HMPJSOND",180,0)
 F  D  Q:VVDONE  Q:VVERRORS
"RTN","HMPJSOND",181,0)
 . I '("0123456789+-.eE"[$E(@VVJSON@(VVLINE),VVIDX)) S VVDONE=1 Q
"RTN","HMPJSOND",182,0)
 . S VVNUM=VVNUM_$E(@VVJSON@(VVLINE),VVIDX)
"RTN","HMPJSOND",183,0)
 . S VVIDX=VVIDX+1 I VVIDX>$L(@VVJSON@(VVLINE)) S VVLINE=VVLINE+1,VVIDX=1 I '$D(@VVJSON@(VVLINE)) D ERRX("OR#")
"RTN","HMPJSOND",184,0)
 Q VVNUM
"RTN","HMPJSOND",185,0)
 ;
"RTN","HMPJSOND",186,0)
SETBOOL(VVLTR) ; Parse and set boolean value, advancing index past end of value
"RTN","HMPJSOND",187,0)
 N VVDONE,VVBOOL,VVX
"RTN","HMPJSOND",188,0)
 S VVDONE=0,VVBOOL=VVLTR
"RTN","HMPJSOND",189,0)
 F  D  Q:VVDONE  Q:VVERRORS
"RTN","HMPJSOND",190,0)
 . S VVX=$TR($E(@VVJSON@(VVLINE),VVIDX),"TRUEFALSN","truefalsn")
"RTN","HMPJSOND",191,0)
 . I '("truefalsn"[VVX) S VVDONE=1 Q
"RTN","HMPJSOND",192,0)
 . S VVBOOL=VVBOOL_VVX
"RTN","HMPJSOND",193,0)
 . S VVIDX=VVIDX+1 I VVIDX>$L(@VVJSON@(VVLINE)) S VVLINE=VVLINE+1,VVIDX=1 I '$D(@VVJSON@(VVLINE)) D ERRX("ORB")
"RTN","HMPJSOND",194,0)
 I VVLTR="t",(VVBOOL'="true") D ERRX("EXT",VVTYPE)
"RTN","HMPJSOND",195,0)
 I VVLTR="f",(VVBOOL'="false") D ERRX("EXF",VVTYPE)
"RTN","HMPJSOND",196,0)
 I VVLTR="n",(VVBOOL'="null") D ERRX("EXN",VVTYPE)
"RTN","HMPJSOND",197,0)
 S @$$CURNODE()=VVBOOL
"RTN","HMPJSOND",198,0)
 Q
"RTN","HMPJSOND",199,0)
 ;
"RTN","HMPJSOND",200,0)
OSETBOOL(VVX) ; set a value and increment VVIDX
"RTN","HMPJSOND",201,0)
 S @$$CURNODE()=VVX
"RTN","HMPJSOND",202,0)
 S VVIDX=VVIDX+$L(VVX)-1
"RTN","HMPJSOND",203,0)
 N VVDIFF S VVDIFF=VVIDX-$L(@VVJSON@(VVLINE))  ; in case VVIDX moves to next line
"RTN","HMPJSOND",204,0)
 I VVDIFF>0 S VVLINE=VVLINE+1,VVIDX=VVDIFF I '$D(@VVJSON@(VVLINE)) D ERRX("ORB")
"RTN","HMPJSOND",205,0)
 Q
"RTN","HMPJSOND",206,0)
CURNODE() ; Return a global/local variable name based on VVSTACK
"RTN","HMPJSOND",207,0)
 ; Expects VVSTACK to be defined already
"RTN","HMPJSOND",208,0)
 N VVI,VVSUBS
"RTN","HMPJSOND",209,0)
 S VVSUBS=""
"RTN","HMPJSOND",210,0)
 F VVI=1:1:VVSTACK S:VVI>1 VVSUBS=VVSUBS_"," D
"RTN","HMPJSOND",211,0)
 . I VVSTACK(VVI)=+VVSTACK(VVI) S VVSUBS=VVSUBS_VVSTACK(VVI) ; VEN/SMH Fix pseudo array bug.
"RTN","HMPJSOND",212,0)
 . E  S VVSUBS=VVSUBS_""""_VVSTACK(VVI)_""""
"RTN","HMPJSOND",213,0)
 Q VVROOT_VVSUBS_")"
"RTN","HMPJSOND",214,0)
 ;
"RTN","HMPJSOND",215,0)
UES(X) ; Unescape JSON string
"RTN","HMPJSOND",216,0)
 ; copy segments from START to POS-2 (right before \)
"RTN","HMPJSOND",217,0)
 ; translate target character (which is at $F position)
"RTN","HMPJSOND",218,0)
 N POS,Y,START
"RTN","HMPJSOND",219,0)
 S POS=0,Y=""
"RTN","HMPJSOND",220,0)
 F  S START=POS+1 D  Q:START>$L(X)
"RTN","HMPJSOND",221,0)
 . S POS=$F(X,"\",START) ; find next position
"RTN","HMPJSOND",222,0)
 . I 'POS S Y=Y_$E(X,START,$L(X)),POS=$L(X) Q
"RTN","HMPJSOND",223,0)
 . ; otherwise handle escaped char
"RTN","HMPJSOND",224,0)
 . N TGT
"RTN","HMPJSOND",225,0)
 . S TGT=$E(X,POS),Y=Y_$E(X,START,POS-2)
"RTN","HMPJSOND",226,0)
 . I TGT="u" S Y=Y_$C($$DEC^XLFUTL($E(X,POS+1,POS+4),16)),POS=POS+4 Q
"RTN","HMPJSOND",227,0)
 . S Y=Y_$$REALCHAR(TGT)
"RTN","HMPJSOND",228,0)
 Q Y
"RTN","HMPJSOND",229,0)
 ;
"RTN","HMPJSOND",230,0)
REALCHAR(C) ; Return actual character from escaped
"RTN","HMPJSOND",231,0)
 I C="""" Q """"
"RTN","HMPJSOND",232,0)
 I C="/" Q "/"
"RTN","HMPJSOND",233,0)
 I C="\" Q "\"
"RTN","HMPJSOND",234,0)
 I C="b" Q $C(8)
"RTN","HMPJSOND",235,0)
 I C="f" Q $C(12)
"RTN","HMPJSOND",236,0)
 I C="n" Q $C(10)
"RTN","HMPJSOND",237,0)
 I C="r" Q $C(13)
"RTN","HMPJSOND",238,0)
 I C="t" Q $C(9)
"RTN","HMPJSOND",239,0)
 I C="u" ;case covered above in $$DEC^XLFUTL calls
"RTN","HMPJSOND",240,0)
 ;otherwise
"RTN","HMPJSOND",241,0)
 I $L($G(VVERR)) D ERRX("ESC",C)
"RTN","HMPJSOND",242,0)
 Q C
"RTN","HMPJSOND",243,0)
 ;
"RTN","HMPJSOND",244,0)
ERRX(ID,VAL) ; Set the appropriate error message
"RTN","HMPJSOND",245,0)
 D ERRX^HMPJSON(ID,$G(VAL))
"RTN","HMPJSOND",246,0)
 Q
"RTN","HMPJSONE")
0^99^B27506711
"RTN","HMPJSONE",1,0)
HMPJSONE ;SLC/KCM,ASMR/RRB - Encode JSON;9/25/2015 10:17
"RTN","HMPJSONE",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPJSONE",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPJSONE",4,0)
 ;
"RTN","HMPJSONE",5,0)
 Q
"RTN","HMPJSONE",6,0)
 ;
"RTN","HMPJSONE",7,0)
ENCODE(VVROOT,VVJSON,VVERR) ; VVROOT (M structure) --> VVJSON (array of strings)
"RTN","HMPJSONE",8,0)
 ;
"RTN","HMPJSONE",9,0)
DIRECT ; TAG for use by ENCODE^HMPJSON
"RTN","HMPJSONE",10,0)
 ;
"RTN","HMPJSONE",11,0)
 ; Examples:  D ENCODE^HMPJSON("^GLO(99,2)","^TMP($J)")
"RTN","HMPJSONE",12,0)
 ;            D ENCODE^HMPJSON("LOCALVAR","MYJSON","LOCALERR")
"RTN","HMPJSONE",13,0)
 ;
"RTN","HMPJSONE",14,0)
 ; VVROOT: closed array reference for M representation of object
"RTN","HMPJSONE",15,0)
 ; VVJSON: destination variable for the string array formatted as JSON
"RTN","HMPJSONE",16,0)
 ;  VVERR: contains error messages, defaults to ^TMP("HMPJERR",$J)
"RTN","HMPJSONE",17,0)
 ;
"RTN","HMPJSONE",18,0)
 S VVERR=$G(VVERR,"^TMP(""HMPJERR"",$J)")
"RTN","HMPJSONE",19,0)
 I '$L($G(VVROOT)) ; set error info
"RTN","HMPJSONE",20,0)
 I '$L($G(VVJSON)) ; set error info
"RTN","HMPJSONE",21,0)
 N VVLINE,VVMAX,VVERRORS
"RTN","HMPJSONE",22,0)
 S VVLINE=1,VVMAX=4000,VVERRORS=0  ; 96 more bytes of wiggle room
"RTN","HMPJSONE",23,0)
 S @VVJSON@(VVLINE)=""
"RTN","HMPJSONE",24,0)
 D SEROBJ(VVROOT)
"RTN","HMPJSONE",25,0)
 Q
"RTN","HMPJSONE",26,0)
 ;
"RTN","HMPJSONE",27,0)
SEROBJ(VVROOT) ; Serialize into a JSON object
"RTN","HMPJSONE",28,0)
 N VVFIRST,VVSUB,VVNXT
"RTN","HMPJSONE",29,0)
 S @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_"{"
"RTN","HMPJSONE",30,0)
 S VVFIRST=1
"RTN","HMPJSONE",31,0)
 S VVSUB="" F  S VVSUB=$O(@VVROOT@(VVSUB)) Q:VVSUB=""  D
"RTN","HMPJSONE",32,0)
 . S:'VVFIRST @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_"," S VVFIRST=0
"RTN","HMPJSONE",33,0)
 . ; get the name part
"RTN","HMPJSONE",34,0)
 . D SERNAME(VVSUB)
"RTN","HMPJSONE",35,0)
 . ; if this is a value, serialize it
"RTN","HMPJSONE",36,0)
 . I $$ISVALUE(VVROOT,VVSUB) D SERVAL(VVROOT,VVSUB) Q
"RTN","HMPJSONE",37,0)
 . ; otherwise navigate to the next child object or array
"RTN","HMPJSONE",38,0)
 . I $D(@VVROOT@(VVSUB))=10 S VVNXT=$O(@VVROOT@(VVSUB,"")) D  Q
"RTN","HMPJSONE",39,0)
 . . ; Need to check if numeric representation matches string representation to decide if it is an array
"RTN","HMPJSONE",40,0)
 . . I +VVNXT=VVNXT D SERARY($NA(@VVROOT@(VVSUB))) I 1
"RTN","HMPJSONE",41,0)
 . . E  D SEROBJ($NA(@VVROOT@(VVSUB)))
"RTN","HMPJSONE",42,0)
 . D ERRX("SOB",VVSUB)  ; should quit loop before here
"RTN","HMPJSONE",43,0)
 S @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_"}"
"RTN","HMPJSONE",44,0)
 Q
"RTN","HMPJSONE",45,0)
SERARY(VVROOT) ; Serialize into a JSON array
"RTN","HMPJSONE",46,0)
 N VVFIRST,VVI,VVNXT
"RTN","HMPJSONE",47,0)
 S @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_"["
"RTN","HMPJSONE",48,0)
 S VVFIRST=1
"RTN","HMPJSONE",49,0)
 S VVI=0 F  S VVI=$O(@VVROOT@(VVI)) Q:'VVI  D
"RTN","HMPJSONE",50,0)
 . S:'VVFIRST @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_"," S VVFIRST=0
"RTN","HMPJSONE",51,0)
 . I $$ISVALUE(VVROOT,VVI) D SERVAL(VVROOT,VVI) Q  ; write value
"RTN","HMPJSONE",52,0)
 . I $D(@VVROOT@(VVI))=10 S VVNXT=$O(@VVROOT@(VVI,"")) D  Q
"RTN","HMPJSONE",53,0)
 . . ; Need to check if numeric representation matches string representation to decide if it is an array
"RTN","HMPJSONE",54,0)
 . . I +VVNXT=VVNXT D SERARY($NA(@VVROOT@(VVI))) I 1
"RTN","HMPJSONE",55,0)
 . . E  D SEROBJ($NA(@VVROOT@(VVI)))
"RTN","HMPJSONE",56,0)
 . D ERRX("SAR",VVI)  ; should quit loop before here
"RTN","HMPJSONE",57,0)
 S @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_"]"
"RTN","HMPJSONE",58,0)
 Q
"RTN","HMPJSONE",59,0)
SERNAME(VVSUB) ; Serialize the object name into JSON string
"RTN","HMPJSONE",60,0)
 I $E(VVSUB)="""" S VVSUB=$E(VVSUB,2,$L(VVSUB)) ; quote indicates numeric label
"RTN","HMPJSONE",61,0)
 I ($L(VVSUB)+$L(@VVJSON@(VVLINE)))>VVMAX S VVLINE=VVLINE+1,@VVJSON@(VVLINE)=""
"RTN","HMPJSONE",62,0)
 S @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_""""_VVSUB_""""_":"
"RTN","HMPJSONE",63,0)
 Q
"RTN","HMPJSONE",64,0)
SERVAL(VVROOT,VVSUB) ; Serialize X into appropriate JSON representation
"RTN","HMPJSONE",65,0)
 N VVX,VVI,VVDONE
"RTN","HMPJSONE",66,0)
 ; if the node is already in JSON format, just add it
"RTN","HMPJSONE",67,0)
 I $D(@VVROOT@(VVSUB,":")) D  QUIT  ; <-- jump out here if preformatted
"RTN","HMPJSONE",68,0)
 . S VVX=$G(@VVROOT@(VVSUB,":")) D:$L(VVX) CONCAT
"RTN","HMPJSONE",69,0)
 . S VVI=0 F  S VVI=$O(@VVROOT@(VVSUB,":",VVI)) Q:'VVI  S VVX=@VVROOT@(VVSUB,":",VVI) D CONCAT
"RTN","HMPJSONE",70,0)
 ;
"RTN","HMPJSONE",71,0)
 S VVX=$G(@VVROOT@(VVSUB)),VVDONE=0
"RTN","HMPJSONE",72,0)
 ; handle the numeric, boolean, and null types
"RTN","HMPJSONE",73,0)
 I $D(@VVROOT@(VVSUB,"\n")) S:$L(@VVROOT@(VVSUB,"\n")) VVX=@VVROOT@(VVSUB,"\n") D CONCAT QUIT  ; when +X'=X
"RTN","HMPJSONE",74,0)
 I '$D(@VVROOT@(VVSUB,"\s")),$L(VVX) D  QUIT:VVDONE
"RTN","HMPJSONE",75,0)
 . I VVX']]$C(1) S VVX=$$JNUM(VVX) D CONCAT S VVDONE=1 QUIT
"RTN","HMPJSONE",76,0)
 . I VVX="true"!(VVX="false")!(VVX="null") D CONCAT S VVDONE=1 QUIT
"RTN","HMPJSONE",77,0)
 ; otherwise treat it as a string type
"RTN","HMPJSONE",78,0)
 S VVX=""""_$$ESC(VVX) ; open quote
"RTN","HMPJSONE",79,0)
 D CONCAT
"RTN","HMPJSONE",80,0)
 I $D(@VVROOT@(VVSUB,"\")) D  ; handle continuation nodes
"RTN","HMPJSONE",81,0)
 . S VVI=0 F  S VVI=$O(@VVROOT@(VVSUB,"\",VVI)) Q:'VVI   D
"RTN","HMPJSONE",82,0)
 . . S VVX=$$ESC(@VVROOT@(VVSUB,"\",VVI))
"RTN","HMPJSONE",83,0)
 . . D CONCAT
"RTN","HMPJSONE",84,0)
 S VVX="""" D CONCAT    ; close quote
"RTN","HMPJSONE",85,0)
 Q
"RTN","HMPJSONE",86,0)
CONCAT ; come here to concatenate to JSON string
"RTN","HMPJSONE",87,0)
 I ($L(VVX)+$L(@VVJSON@(VVLINE)))>VVMAX S VVLINE=VVLINE+1,@VVJSON@(VVLINE)=""
"RTN","HMPJSONE",88,0)
 S @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_VVX
"RTN","HMPJSONE",89,0)
 Q
"RTN","HMPJSONE",90,0)
ISVALUE(VVROOT,VVSUB) ; Return true if this is a value node
"RTN","HMPJSONE",91,0)
 I $D(@VVROOT@(VVSUB))#2 Q 1
"RTN","HMPJSONE",92,0)
 N VVX S VVX=$O(@VVROOT@(VVSUB,""))
"RTN","HMPJSONE",93,0)
 Q:VVX="\" 1  ; word processing continuation node
"RTN","HMPJSONE",94,0)
 Q:VVX=":" 1  ; pre-formatted JSON node
"RTN","HMPJSONE",95,0)
 Q 0
"RTN","HMPJSONE",96,0)
 ;
"RTN","HMPJSONE",97,0)
NUMERIC(X) ; Return true if the numeric
"RTN","HMPJSONE",98,0)
 I $L(X)>18 Q 0        ; string (too long for numeric)
"RTN","HMPJSONE",99,0)
 I X=0 Q 1             ; numeric (value is zero)
"RTN","HMPJSONE",100,0)
 I +X=0 Q 0            ; string
"RTN","HMPJSONE",101,0)
 I $E(X,1)="." Q 0     ; not a JSON number (although numeric in M)
"RTN","HMPJSONE",102,0)
 I $E(X,1,2)="-." Q 0  ; not a JSON number
"RTN","HMPJSONE",103,0)
 I +X=X Q 1            ; numeric
"RTN","HMPJSONE",104,0)
 I X?1"0."1.n Q 1      ; positive fraction
"RTN","HMPJSONE",105,0)
 I X?1"-0."1.N Q 1     ; negative fraction
"RTN","HMPJSONE",106,0)
 S X=$TR(X,"e","E")
"RTN","HMPJSONE",107,0)
 I X?.1"-"1.N.1".".N1"E".1"+"1.N Q 1  ; {-}99{.99}E{+}99
"RTN","HMPJSONE",108,0)
 I X?.1"-"1.N.1".".N1"E-"1.N Q 1      ; {-}99{.99}E-99
"RTN","HMPJSONE",109,0)
 Q 0
"RTN","HMPJSONE",110,0)
 ;
"RTN","HMPJSONE",111,0)
ESC(X) ; Escape string for JSON
"RTN","HMPJSONE",112,0)
 N Y,I,PAIR,FROM,TO
"RTN","HMPJSONE",113,0)
 S Y=X
"RTN","HMPJSONE",114,0)
 F PAIR="\\","""""","//",$C(8,98),$C(12,102),$C(10,110),$C(13,114),$C(9,116) D
"RTN","HMPJSONE",115,0)
 . S FROM=$E(PAIR),TO=$E(PAIR,2)
"RTN","HMPJSONE",116,0)
 . S X=Y,Y=$P(X,FROM) F I=2:1:$L(X,FROM) S Y=Y_"\"_TO_$P(X,FROM,I)
"RTN","HMPJSONE",117,0)
 I Y?.E1.C.E S X=Y,Y="" F I=1:1:$L(X) S FROM=$A(X,I) D
"RTN","HMPJSONE",118,0)
 . ; skip NUL character, otherwise encode ctrl-char
"RTN","HMPJSONE",119,0)
 . I FROM<32 Q:FROM=0  S Y=Y_$$UCODE(FROM) Q
"RTN","HMPJSONE",120,0)
 . I FROM>126,(FROM<160) S Y=Y_$$UCODE(FROM) Q
"RTN","HMPJSONE",121,0)
 . S Y=Y_$E(X,I)
"RTN","HMPJSONE",122,0)
 Q Y
"RTN","HMPJSONE",123,0)
 ;
"RTN","HMPJSONE",124,0)
JNUM(N) ; Return JSON representation of a number
"RTN","HMPJSONE",125,0)
 I N'<1 Q N
"RTN","HMPJSONE",126,0)
 I N'>-1 Q N
"RTN","HMPJSONE",127,0)
 I N>0 Q "0"_N
"RTN","HMPJSONE",128,0)
 I N<0 Q "-0"_$P(N,"-",2,9)
"RTN","HMPJSONE",129,0)
 Q N
"RTN","HMPJSONE",130,0)
 ;
"RTN","HMPJSONE",131,0)
UCODE(C) ; Return \u00nn representation of decimal character value
"RTN","HMPJSONE",132,0)
 N H S H="0000"_$$CNV^XLFUTL(C,16)
"RTN","HMPJSONE",133,0)
 Q "\u"_$E(H,$L(H)-3,$L(H))
"RTN","HMPJSONE",134,0)
 ;
"RTN","HMPJSONE",135,0)
ERRX(ID,VAL) ; Set the appropriate error message
"RTN","HMPJSONE",136,0)
 D ERRX^HMPJSON(ID,$G(VAL))
"RTN","HMPJSONE",137,0)
 Q
"RTN","HMPLIST")
0^100^B62846538
"RTN","HMPLIST",1,0)
HMPLIST ;HOIFO/DP,ASMR/RRB - List Manager;02 Nov 2012
"RTN","HMPLIST",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPLIST",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPLIST",4,0)
 ;
"RTN","HMPLIST",5,0)
 Q
"RTN","HMPLIST",6,0)
 ;
"RTN","HMPLIST",7,0)
EN(TARGET,NAME,FORMAT,PARAMS) ; OlD sKOoL entry point
"RTN","HMPLIST",8,0)
 Kill @TARGET
"RTN","HMPLIST",9,0)
 New HMPLIST,HMPROOT,HMPXECUTE
"RTN","HMPLIST",10,0)
 If NAME="*" Do
"RTN","HMPLIST",11,0)
 . Do ALL(TARGET)
"RTN","HMPLIST",12,0)
 Else  Do
"RTN","HMPLIST",13,0)
 . Set HMPLIST=$$LIST(NAME) If 'HMPLIST Set Y=$$ADD("-1^No Such List '"_NAME_"'") Quit
"RTN","HMPLIST",14,0)
 . If $Piece(HMPLIST,U,3)=0 Do  ; Static list
"RTN","HMPLIST",15,0)
 . . Set X=$$GET1^DIQ(800000.2,+HMPLIST_",",.9,"",TARGET)
"RTN","HMPLIST",16,0)
 . Else  Set HMPXECUTE=$$GET1^DIQ(800000.2,HMPLIST_",",.11,"I") Xecute:HMPXECUTE]"" HMPXECUTE
"RTN","HMPLIST",17,0)
 . Set @TARGET@(0)=NAME_U_$Order(@TARGET@(""),-1)_U_$$COLS(+HMPLIST)
"RTN","HMPLIST",18,0)
 ; Process alternate format before leaving
"RTN","HMPLIST",19,0)
 Set FORMAT=$Get(FORMAT,"DEFAULT")
"RTN","HMPLIST",20,0)
 Do @$Select(FORMAT="XML":"XML",FORMAT="JSON":"JSON",FORMAT="DEFAULT":"DEFAULT",1:"UNKNOWN")
"RTN","HMPLIST",21,0)
 Quit
"RTN","HMPLIST",22,0)
 ;
"RTN","HMPLIST",23,0)
RPC(RESULT,NAME,FORMAT,PARAMS) ; Accessed via HMP LIST Remote Procedure
"RTN","HMPLIST",24,0)
 Set RESULT=$Name(^TMP($J)) Kill @RESULT
"RTN","HMPLIST",25,0)
 If $Data(PARAMS) Do EN(RESULT,NAME,$Get(FORMAT,"DEFAULT"),.PARAMS)
"RTN","HMPLIST",26,0)
 Else  Do EN(RESULT,NAME,$Get(FORMAT,"DEFAULT"))
"RTN","HMPLIST",27,0)
 Quit
"RTN","HMPLIST",28,0)
 ;
"RTN","HMPLIST",29,0)
VALUE(NAME,ID) ; Return the item from a list by ID
"RTN","HMPLIST",30,0)
 New HMPLIST
"RTN","HMPLIST",31,0)
 Set HMPLIST=$$LIST(NAME) If 'HMPLIST Quit "^No Such List"
"RTN","HMPLIST",32,0)
 For X=0:0 Set X=$Order(^HMPD(800000.2,+HMPLIST,9,X)) Quit:'X  Quit:$Piece(^(X,0),U)=ID
"RTN","HMPLIST",33,0)
 Quit $Select(X:^HMPD(800000.2,+HMPLIST,9,X,0),1:"^No Such ID")
"RTN","HMPLIST",34,0)
 ;
"RTN","HMPLIST",35,0)
EDIT ; Edit a list definition
"RTN","HMPLIST",36,0)
 New DDSFILE,DA,DR
"RTN","HMPLIST",37,0)
 Do HOME^%ZIS Write @IOF
"RTN","HMPLIST",38,0)
 Set DDSFILE=800000.2,DR="[HMP LIST]"
"RTN","HMPLIST",39,0)
 Do ^DDS
"RTN","HMPLIST",40,0)
 Quit
"RTN","HMPLIST",41,0)
 ;
"RTN","HMPLIST",42,0)
DISPLAY ; Display a list definition
"RTN","HMPLIST",43,0)
 New DIC,HMP,BY,FR,TO,FLDS
"RTN","HMPLIST",44,0)
 Set DIC=800000.2,DIC(0)="AEQM",DIC("A")="Select List Definition to Display: " Do ^DIC Quit:+Y<1
"RTN","HMPLIST",45,0)
 Set BY="@NUMBER",FR=+Y,TO=+Y,FLDS="[HMP LIST DISPLAY]" Do EN1^DIP
"RTN","HMPLIST",46,0)
 Quit
"RTN","HMPLIST",47,0)
 ;
"RTN","HMPLIST",48,0)
DEFAULT ; Just return as is, a simple array
"RTN","HMPLIST",49,0)
 Quit
"RTN","HMPLIST",50,0)
 ;
"RTN","HMPLIST",51,0)
UNKNOWN ; You've got no idea, and neither do I
"RTN","HMPLIST",52,0)
 Quit
"RTN","HMPLIST",53,0)
 ;
"RTN","HMPLIST",54,0)
JSON ; Convert @TARGET@(1..n) to JSON
"RTN","HMPLIST",55,0)
 New HMPCOLS,HMPX,HMPY
"RTN","HMPLIST",56,0)
 Set HMPCOLS=$Piece(@TARGET@(0),U,3),HMPX=@TARGET@(0)
"RTN","HMPLIST",57,0)
 Set @TARGET@(0)="{ name : """_$Piece(HMPX,U,1)_""", count : """_$Piece(HMPX,U,2)_""""_$Select($Order(@TARGET@(0)):", [",1:"}")
"RTN","HMPLIST",58,0)
 For X=0:0 Set X=$Order(@TARGET@(X)) Quit:'X  Do
"RTN","HMPLIST",59,0)
 . Set HMPX=@TARGET@(X),HMPY="{ "
"RTN","HMPLIST",60,0)
 . For Y=1:1:$Length(HMPCOLS,";") Set HMPY=HMPY_""""_$Piece(HMPCOLS,";",Y)_""":"""_$Piece(HMPX,U,Y)_""""_$Select(Y<$Length(HMPCOLS,";"):", ",1:" ")
"RTN","HMPLIST",61,0)
 . Set HMPY=HMPY_"}"
"RTN","HMPLIST",62,0)
 . If $Order(@TARGET@(X)) Set @TARGET@(X)=HMPY_"," Quit
"RTN","HMPLIST",63,0)
 . Set @TARGET@(X)=HMPY
"RTN","HMPLIST",64,0)
 Set @TARGET@($Order(@TARGET@(""),-1)+1)="]}"
"RTN","HMPLIST",65,0)
 Quit
"RTN","HMPLIST",66,0)
 ;
"RTN","HMPLIST",67,0)
XML ; Convert @TARGET@(1..n) to XML
"RTN","HMPLIST",68,0)
 New HMPCOLD,HMPX,HMPY
"RTN","HMPLIST",69,0)
 Set HMPCOLS=$Piece(@TARGET@(0),U,3)
"RTN","HMPLIST",70,0)
 For X=0:0 Set X=$Order(@TARGET@(X)) Quit:'X  Do
"RTN","HMPLIST",71,0)
 . Set HMPX=@TARGET@(X),HMPY="<item "
"RTN","HMPLIST",72,0)
 . For Y=1:1:$Length(HMPCOLS,";") Set HMPY=HMPY_$Piece(HMPCOLS,";",Y)_"="""_$Piece(HMPX,U,Y)_""" "
"RTN","HMPLIST",73,0)
 . Set HMPY=HMPY_"/>"
"RTN","HMPLIST",74,0)
 . Set @TARGET@(X)=HMPY
"RTN","HMPLIST",75,0)
 Set HMPX=@TARGET@(0)
"RTN","HMPLIST",76,0)
 Set @TARGET@(0)="<list name="""_$Piece(HMPX,U,1)_""" count="""_$Piece(HMPX,U,2)_""">"
"RTN","HMPLIST",77,0)
 Set @TARGET@($Order(@TARGET@(""),-1)+1)="</list>"
"RTN","HMPLIST",78,0)
 Quit
"RTN","HMPLIST",79,0)
 ;
"RTN","HMPLIST",80,0)
XMLSAFE(X) ; Transform X into XML safe data
"RTN","HMPLIST",81,0)
 ; Strip off the spaces and make life easier
"RTN","HMPLIST",82,0)
 For  Quit:$Extract(X)'=" "  Set X=$Extract(X,2,$Length(X))
"RTN","HMPLIST",83,0)
 For  Quit:$Extract(X,$Length(X))'=" "  Set X=$Extract(X,1,$Length(X)-1)
"RTN","HMPLIST",84,0)
 Set X=$$TRNSLT(X,"&","&amp;")
"RTN","HMPLIST",85,0)
 Set X=$$TRNSLT(X,"<","&lt;")
"RTN","HMPLIST",86,0)
 Set X=$$TRNSLT(X,">","&gt;")
"RTN","HMPLIST",87,0)
 Set X=$$TRNSLT(X,"'","&apos;")
"RTN","HMPLIST",88,0)
 Set X=$$TRNSLT(X,"""","&quot;")
"RTN","HMPLIST",89,0)
 Set X=$$TRNSLT(X,":","&#58;")
"RTN","HMPLIST",90,0)
 Quit X
"RTN","HMPLIST",91,0)
 ;
"RTN","HMPLIST",92,0)
JSONSAFE(X) ; Transform X into JSON safe data
"RTN","HMPLIST",93,0)
 ; Strip the spaces
"RTN","HMPLIST",94,0)
 For  Quit:$Extract(X)'=" "  Set X=$Extract(X,2,$Length(X))
"RTN","HMPLIST",95,0)
 For  Quit:$Extract(X,$Length(X))'=" "  Set X=$Extract(X,1,$Length(X)-1)
"RTN","HMPLIST",96,0)
 Set X=$$TRNSLT(X,"""","\""")
"RTN","HMPLIST",97,0)
 Quit X
"RTN","HMPLIST",98,0)
 ;
"RTN","HMPLIST",99,0)
TRNSLT(X,X1,X2) ; Translate every Y to Z in X
"RTN","HMPLIST",100,0)
 New Y
"RTN","HMPLIST",101,0)
 Quit:X'[X1 X  ; Nothing to translate
"RTN","HMPLIST",102,0)
 Set Y="" For  Quit:X=""  Do
"RTN","HMPLIST",103,0)
 . If X[X1 Set Y=Y_$Piece(X,X1)_X2,X=$Piece(X,X1,2,250) Quit
"RTN","HMPLIST",104,0)
 . Set Y=Y_X,X=""
"RTN","HMPLIST",105,0)
 Quit Y
"RTN","HMPLIST",106,0)
 ;
"RTN","HMPLIST",107,0)
LIST(NAME) ; Return List by name
"RTN","HMPLIST",108,0)
 Set X=$$FIND1^DIC(800000.2,,"KX",NAME) Quit:X<1 X
"RTN","HMPLIST",109,0)
 Quit X_U_^HMPD(800000.2,X,0)
"RTN","HMPLIST",110,0)
 ;
"RTN","HMPLIST",111,0)
ALL(RETURN) ; Return All lists in RETURN()
"RTN","HMPLIST",112,0)
 Kill @RETURN
"RTN","HMPLIST",113,0)
 Do LIST^DIC(800000.2,,"@;.01;.02","P")
"RTN","HMPLIST",114,0)
 For X=0:0 Set X=$Order(^TMP("DILIST",$J,X)) Quit:'X  Set @RETURN@(X)=^TMP("DILIST",$J,X,0)
"RTN","HMPLIST",115,0)
 Set @RETURN@(0)="ALL LISTS^"_+$Order(@RETURN@(""),-1)_"^ID;name;type"
"RTN","HMPLIST",116,0)
 Kill ^TMP("DILIST",$J)
"RTN","HMPLIST",117,0)
 Quit
"RTN","HMPLIST",118,0)
 ;
"RTN","HMPLIST",119,0)
COLS(LIST) ; Return the col names (ID^Name) + any custom col specs
"RTN","HMPLIST",120,0)
 New RESULT,X,Y
"RTN","HMPLIST",121,0)
 Set RESULT="ID;name"
"RTN","HMPLIST",122,0)
 For X=0:0 Set X=$Order(^HMPD(800000.2,+LIST,2,X)) Quit:'X  Set Y=^(X,0) Do
"RTN","HMPLIST",123,0)
 . Set $Piece(RESULT,";",$Piece(Y,U,2))=$Piece(Y,U,1)
"RTN","HMPLIST",124,0)
 Quit RESULT
"RTN","HMPLIST",125,0)
 ;
"RTN","HMPLIST",126,0)
CODE(LIST) ; Return Generation Code for a list
"RTN","HMPLIST",127,0)
 Quit $Get(^HMPD(800000.2,+LIST,.11))
"RTN","HMPLIST",128,0)
 ;
"RTN","HMPLIST",129,0)
SET(DD,FLD) ; Build a list from a Set Of Codes DD and Field number combination
"RTN","HMPLIST",130,0)
 Kill @TARGET
"RTN","HMPLIST",131,0)
 Quit:$$GET1^DID(DD,FLD,,"TYPE")'="SET"
"RTN","HMPLIST",132,0)
 Set X=$$GET1^DID(DD,FLD,,"POINTER")
"RTN","HMPLIST",133,0)
 For Y=1:1:$Length(X,";")-1 Set @TARGET@(Y)=$Translate($Piece(X,";",Y),":","^")
"RTN","HMPLIST",134,0)
 Quit
"RTN","HMPLIST",135,0)
 ;
"RTN","HMPLIST",136,0)
REBUILD(NAME) ;
"RTN","HMPLIST",137,0)
 New LIST,ALL,CODE,FDA,HMPFDA,HMPX
"RTN","HMPLIST",138,0)
 ;
"RTN","HMPLIST",139,0)
 If NAME="?" Do  Quit
"RTN","HMPLIST",140,0)
 . Set DIC=800000.2,DIC(0)="AEQMZ",DIC("A")="Rebuild List: ",DIC("S")="I '$P(^(0),U,2)"
"RTN","HMPLIST",141,0)
 . Do ^DIC Do:+Y REBUILD(Y(0,0))
"RTN","HMPLIST",142,0)
 ;
"RTN","HMPLIST",143,0)
 If +NAME=NAME Do  Quit  ; Rebuild all for a DD number
"RTN","HMPLIST",144,0)
 . For HMPX=0:0 Set HMPX=$Order(^HMPD(800000.2,"ADD",NAME,HMPX)) Quit:'HMPX  Do REBUILD($Piece(^HMPD(800000.2,HMPX,0),U))
"RTN","HMPLIST",145,0)
 ;
"RTN","HMPLIST",146,0)
 If NAME="*" Do  Quit  ; Rebuild all
"RTN","HMPLIST",147,0)
 . For HMPX=0:0 Set HMPX=$Order(^HMPD(800000.2,HMPX)) Quit:'HMPX  Do REBUILD($Piece(^HMPD(800000.2,HMPX,0),U))
"RTN","HMPLIST",148,0)
 ;
"RTN","HMPLIST",149,0)
 Set LIST=$$LIST(NAME) Quit:+LIST<1  ; No Such List
"RTN","HMPLIST",150,0)
 ;
"RTN","HMPLIST",151,0)
 If $Piece(LIST,U,2) Quit  ; Dynamic list - fired every time
"RTN","HMPLIST",152,0)
 Set CODE=$$CODE(LIST) Quit:CODE=""  ; No rebuild code, must be manual
"RTN","HMPLIST",153,0)
 ;
"RTN","HMPLIST",154,0)
 Set TARGET=$Name(^TMP($J))
"RTN","HMPLIST",155,0)
 Set FDA=$Name(HMPFDA(800000.2,(+LIST)_","))
"RTN","HMPLIST",156,0)
 Kill @TARGET
"RTN","HMPLIST",157,0)
 Xecute CODE
"RTN","HMPLIST",158,0)
 Set @FDA@(.09)="NOW"
"RTN","HMPLIST",159,0)
 Set @FDA@(.9)=TARGET
"RTN","HMPLIST",160,0)
 Do FILE^DIE("E","HMPFDA")
"RTN","HMPLIST",161,0)
 Quit
"RTN","HMPLIST",162,0)
 ;
"RTN","HMPLIST",163,0)
DQ ; Called via Taskman to build any list that has expired
"RTN","HMPLIST",164,0)
 New HMPNOW,HMPLIST,HMPMIN
"RTN","HMPLIST",165,0)
 Kill HMPNEXT
"RTN","HMPLIST",166,0)
 ; Nothing set to refresh automatically
"RTN","HMPLIST",167,0)
 Quit:'$Order(^HMPD(800000.2,"AREFRESH",0))
"RTN","HMPLIST",168,0)
 Do NOW^%DTC Set HMPNOW=%
"RTN","HMPLIST",169,0)
 For HMPLIST=0:0 Set HMPLIST=$Order(^HMPD(800000.2,HMPLIST)) Quit:'HMPLIST  Do:'$Piece(^HMPD(800000.2,HMPLIST,0),U,2)  ; Not Dynamic
"RTN","HMPLIST",170,0)
 . Quit:'$Piece(^HMPD(800000.2,HMPLIST,0),U,8)  ; Doesn't have a refresh limit
"RTN","HMPLIST",171,0)
 . New $ESTACK,$ETRAP Set $ETRAP="D ERR^HMPLIST" ; Will prevent a list error from cratering the entire build
"RTN","HMPLIST",172,0)
 . Set HMPMIN=$Piece(^HMPD(800000.2,HMPLIST,0),U,8)
"RTN","HMPLIST",173,0)
 . Set HMPLAST=$$GET1^DIQ(800000.2,HMPLIST_",",.09,"I")
"RTN","HMPLIST",174,0)
 . Set HMPNEXT=$$FMADD^XLFDT(HMPLAST,0,0,HMPMIN,0)
"RTN","HMPLIST",175,0)
 . Quit:HMPNEXT>HMPNOW
"RTN","HMPLIST",176,0)
 . Quit:($$FMADD^XLFDT(HMPNOW,0,0,HMPMIN*-1,0)<$Piece(^HMPD(800000.2,HMPLIST,0),U,9))  ; Not yet stale :)
"RTN","HMPLIST",177,0)
 . Do REBUILD($Piece(^HMPD(800000.2,HMPLIST,0),U))
"RTN","HMPLIST",178,0)
 ; Get the shortest refresh threshold and reschedule for that
"RTN","HMPLIST",179,0)
 Set HMPNEXT=$$FMADD^XLFDT(+$Extract(HMPNOW,1,12),0,0,$Order(^HMPD(800000.2,"AREFRESH",0)),0)
"RTN","HMPLIST",180,0)
 Kill ZTREQ
"RTN","HMPLIST",181,0)
 Set ZTREQ=$$FMTH^XLFDT(HMPNEXT)
"RTN","HMPLIST",182,0)
 Quit
"RTN","HMPLIST",183,0)
 ;
"RTN","HMPLIST",184,0)
ADD(X) ; Adds an item to the list automatically
"RTN","HMPLIST",185,0)
 Set @TARGET@($Order(@TARGET@(""),-1)+1)=X
"RTN","HMPLIST",186,0)
 Quit $Order(@TARGET@(""),-1)
"RTN","HMPLIST",187,0)
 ;
"RTN","HMPLIST",188,0)
WARDS ; Get list of wards, clinics and non-stops
"RTN","HMPLIST",189,0)
 Do LOC("W")
"RTN","HMPLIST",190,0)
 Quit
"RTN","HMPLIST",191,0)
 ;
"RTN","HMPLIST",192,0)
CLINICS ; Get Active Clinics
"RTN","HMPLIST",193,0)
 Do LOC("NC")
"RTN","HMPLIST",194,0)
 Quit
"RTN","HMPLIST",195,0)
 ;
"RTN","HMPLIST",196,0)
LOC(TYPES) ; Build list of locations by type
"RTN","HMPLIST",197,0)
 New HMPDT,HMPNOW
"RTN","HMPLIST",198,0)
 Do NOW^%DTC Set HMPNOW=%
"RTN","HMPLIST",199,0)
 For X=0:0 Set X=$Order(^SC(X)) Quit:'X  Do:TYPES[$Piece(^(X,0),U,3)  ;DE2818 ICR 10040 ASF 11/16/15
"RTN","HMPLIST",200,0)
 . Set HMPDT=$Get(^SC(X,"I"),U) ; Deactivation and Reactivation dates
"RTN","HMPLIST",201,0)
 . If +HMPDT Quit:(+HMPDT<HMPNOW&('$Piece(HMPDT,U,2)))!(+HMPDT<HMPNOW&($Piece(HMPDT,U,2)>HMPNOW))
"RTN","HMPLIST",202,0)
 . Set Y=$$ADD^HMPLIST(X_U_$Piece(^SC(X,0),U,1,3)) ; Full tag^rtn used for demonstration purposes
"RTN","HMPLIST",203,0)
 Quit
"RTN","HMPLIST",204,0)
 ;
"RTN","HMPLIST",205,0)
INPT ; Rebuild the inpatient list
"RTN","HMPLIST",206,0)
 Do LIST^DIC(2,,"@;.01;.02;.03;.09;.1;.101","P",,,,"CN")
"RTN","HMPLIST",207,0)
 For X=0:0 Set X=$Order(^TMP("DILIST",$J,X)) Quit:'X  Set Y=$$ADD(^(X,0))
"RTN","HMPLIST",208,0)
 Do CLEAN^DILF
"RTN","HMPLIST",209,0)
 Quit
"RTN","HMPLIST",210,0)
 ;
"RTN","HMPLIST",211,0)
ERR ; This is the application specific error trap for the DQ loop
"RTN","HMPLIST",212,0)
 Do ^%ZTER ; record the error
"RTN","HMPLIST",213,0)
 Do UNWIND^%ZTER ; unwind the stack, return to caller.
"RTN","HMPLIST",214,0)
 Quit
"RTN","HMPLIST",215,0)
 ;
"RTN","HMPMDUTL")
0^101^B53381465
"RTN","HMPMDUTL",1,0)
HMPMDUTL ;DSS/BLJ,ASMR/RRB - FileMan JSON utilities for HMP;4 November 2015 @16:51:35
"RTN","HMPMDUTL",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPMDUTL",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMDUTL",4,0)
 ;
"RTN","HMPMDUTL",5,0)
 ;DE2818 SQA findings Newed HMPCNT, HMPFINI, HMPLAST, TERMCHLD, TERMUNIT, and TERMQUAL ASMR/RRB
"RTN","HMPMDUTL",6,0)
 ;
"RTN","HMPMDUTL",7,0)
 Q
"RTN","HMPMDUTL",8,0)
 ;
"RTN","HMPMDUTL",9,0)
EN Q  ; Only call via linetag.
"RTN","HMPMDUTL",10,0)
TERM ; Retrieves list of terms
"RTN","HMPMDUTL",11,0)
  ; NOTE: This tag will NOT support paged retrieves unless necessary.
"RTN","HMPMDUTL",12,0)
  ;         Do not expect them.
"RTN","HMPMDUTL",13,0)
  ;
"RTN","HMPMDUTL",14,0)
  ; DE2818 SQA findings HMPCNT, HMPFINI, HMPLAST
"RTN","HMPMDUTL",15,0)
  ;
"RTN","HMPMDUTL",16,0)
  ; Gets terminology.
"RTN","HMPMDUTL",17,0)
  N HMPFINI,TERMIENS,TERMCNT,X
"RTN","HMPMDUTL",18,0)
  D LIST^DIC("704.101",,,,,,,,"I $P(^(0),U,5)=1")
"RTN","HMPMDUTL",19,0)
  M TERMIENS=^TMP("DILIST",$J,2)
"RTN","HMPMDUTL",20,0)
  S TERMCNT=$P($G(^TMP("DILIST",$J,0)),U,1)
"RTN","HMPMDUTL",21,0)
  K ^TMP("DILIST",$J)
"RTN","HMPMDUTL",22,0)
  ;
"RTN","HMPMDUTL",23,0)
  F X=0:0 S X=$O(TERMIENS(X)) Q:'X  D
"RTN","HMPMDUTL",24,0)
  . N HMPCNT,HMPLAST,RESULT
"RTN","HMPMDUTL",25,0)
  . ; term
"RTN","HMPMDUTL",26,0)
  . D ONETERM($G(TERMIENS(X)),"RESULT")
"RTN","HMPMDUTL",27,0)
  . ;
"RTN","HMPMDUTL",28,0)
  . D ADD^HMPEF("RESULT")
"RTN","HMPMDUTL",29,0)
  . S HMPCNT=X,HMPLAST=X
"RTN","HMPMDUTL",30,0)
  I 'X S HMPFINI=1
"RTN","HMPMDUTL",31,0)
  Q
"RTN","HMPMDUTL",32,0)
ONETERM(ID,TARGET) ; load one term
"RTN","HMPMDUTL",33,0)
  Q:+ID<1  ; Validate integer/id.
"RTN","HMPMDUTL",34,0)
  N $ES,$ET,ERRMSG
"RTN","HMPMDUTL",35,0)
  S ERRMSG=$$ERRMSG^HMPEF("CLiO Term",ID)
"RTN","HMPMDUTL",36,0)
  S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPMDUTL",37,0)
  N TERM,TRM,TERMTYPE
"RTN","HMPMDUTL",38,0)
  ;
"RTN","HMPMDUTL",39,0)
  D GETS^DIQ("704.101",ID_",","*","IE","TERM")
"RTN","HMPMDUTL",40,0)
  N TRM S TRM=$NA(TERM(704.101,""_ID_","))
"RTN","HMPMDUTL",41,0)
  S @TARGET@("id")=$G(@TRM@(.01,"E"))
"RTN","HMPMDUTL",42,0)
  S @TARGET@("uid")="urn:va:clioterminology:"_$G(@TARGET@("id"))
"RTN","HMPMDUTL",43,0)
  S @TARGET@("term")=$$SANITIZE($G(@TRM@(.02,"E")))
"RTN","HMPMDUTL",44,0)
  S @TARGET@("abbreviation")=$$SANITIZE($G(@TRM@(.03,"E")))
"RTN","HMPMDUTL",45,0)
  S @TARGET@("displayName")=$$SANITIZE($G(@TRM@(.04,"E")))
"RTN","HMPMDUTL",46,0)
  ; Get Term Type
"RTN","HMPMDUTL",47,0)
  S TERMTYPE=$$SANITIZE($G(@TRM@(.05,"I")))
"RTN","HMPMDUTL",48,0)
  D TERMTYPE(TERMTYPE,.TARGET)
"RTN","HMPMDUTL",49,0)
  ;
"RTN","HMPMDUTL",50,0)
  S @TARGET@("dataType")=$$SANITIZE($G(@TRM@(.06,"I")))
"RTN","HMPMDUTL",51,0)
  S @TARGET@("valueType")=$$SANITIZE($G(@TRM@(.07,"I")))
"RTN","HMPMDUTL",52,0)
  S @TARGET@("active")=$$SANITIZE($G(@TRM@(.09,"E")))
"RTN","HMPMDUTL",53,0)
  S @TARGET@("description")=$$SANITIZE($G(@TRM@(.1,"E")))
"RTN","HMPMDUTL",54,0)
  S @TARGET@("helpText")=$$SANITIZE($G(@TRM@(.2,"E")))
"RTN","HMPMDUTL",55,0)
  S @TARGET@("booleanValueTrue")=$$SANITIZE($G(@TRM@(.31,"E")))
"RTN","HMPMDUTL",56,0)
  S @TARGET@("booleanValueFalse")=$$SANITIZE($G(@TRM@(.32,"E")))
"RTN","HMPMDUTL",57,0)
  S @TARGET@("multiSelectPicklist")=$$SANITIZE($G(@TRM@(.33,"E")))
"RTN","HMPMDUTL",58,0)
  S @TARGET@("VUID")="urn:va:vuid:"_$$SANITIZE($G(@TRM@(99.99,"E")))
"RTN","HMPMDUTL",59,0)
  ; term -> child terms
"RTN","HMPMDUTL",60,0)
  ;
"RTN","HMPMDUTL",61,0)
  ; NOTE: As coded, the initial load is a function of DFN. But this load
"RTN","HMPMDUTL",62,0)
  ;        is a function of UID. May become normed either to UID or IFN.
"RTN","HMPMDUTL",63,0)
  ;
"RTN","HMPMDUTL",64,0)
  D TERMCHLD($G(@TRM@(.01,"E")),.TARGET)
"RTN","HMPMDUTL",65,0)
  ;
"RTN","HMPMDUTL",66,0)
  ; term -> unit pair
"RTN","HMPMDUTL",67,0)
  D TERMUNIT($G(@TRM@(.01,"E")),.TARGET)
"RTN","HMPMDUTL",68,0)
  ;
"RTN","HMPMDUTL",69,0)
  ; term -> qualifier pair
"RTN","HMPMDUTL",70,0)
  ;
"RTN","HMPMDUTL",71,0)
  D TERMQUAL($G(@TRM@(.01,"E")),.TARGET,ID)
"RTN","HMPMDUTL",72,0)
  ;
"RTN","HMPMDUTL",73,0)
  ; NOTE: As coded, term -> unit conversions are not retrieved.
"RTN","HMPMDUTL",74,0)
  ;        That will be part of future development.
"RTN","HMPMDUTL",75,0)
  ;
"RTN","HMPMDUTL",76,0)
  K TERMTYPE,TRM
"RTN","HMPMDUTL",77,0)
  Q
"RTN","HMPMDUTL",78,0)
  ;
"RTN","HMPMDUTL",79,0)
TERMTYPE(ID,TARGET) ; Load term types.
"RTN","HMPMDUTL",80,0)
  ;
"RTN","HMPMDUTL",81,0)
  ; TARGET is passed by reference.  
"RTN","HMPMDUTL",82,0)
  ;
"RTN","HMPMDUTL",83,0)
  Q:+ID<1  ; Validate for direct IFN lookup.
"RTN","HMPMDUTL",84,0)
  N TERMTYPE
"RTN","HMPMDUTL",85,0)
  D GETS^DIQ("704.102",ID_",","*","E","TERMTYPE") ;ICR 5748 DE2818 ASF 11/25/15
"RTN","HMPMDUTL",86,0)
  N HMPNAME S HMPNAME=$T(TTFLDS+1)
"RTN","HMPMDUTL",87,0)
  ;
"RTN","HMPMDUTL",88,0)
  N HMPEPLAC S HMPEPLAC("""")="\"""
"RTN","HMPMDUTL",89,0)
  S @TARGET@("termType",$P(HMPNAME,";",3))=ID
"RTN","HMPMDUTL",90,0)
  S @TARGET@("termType",$P(HMPNAME,";",4))=$$SANITIZE($$REPLACE^XLFSTR(TERMTYPE("704.102",ID_",",.01,"E"),.HMPEPLAC)) ;ICR 5748 DE2818 ASF 11/25/15
"RTN","HMPMDUTL",91,0)
  S @TARGET@("termType",$P(HMPNAME,";",5))=$$SANITIZE($$REPLACE^XLFSTR(TERMTYPE("704.102",ID_",",.02,"E"),.HMPEPLAC))
"RTN","HMPMDUTL",92,0)
  S @TARGET@("termType",$P(HMPNAME,";",6))=$$SANITIZE($$REPLACE^XLFSTR(TERMTYPE("704.102",ID_",",.03,"E"),.HMPEPLAC))
"RTN","HMPMDUTL",93,0)
  K TERMTYPE
"RTN","HMPMDUTL",94,0)
  Q
"RTN","HMPMDUTL",95,0)
TERMCHLD(ID,TARGET) ;Loads child terms for a term
"RTN","HMPMDUTL",96,0)
  ;
"RTN","HMPMDUTL",97,0)
  ;DE2818 SQA findings Newed TERMCHLD
"RTN","HMPMDUTL",98,0)
  N MSGROOT,TERMCHLD
"RTN","HMPMDUTL",99,0)
  S MSGROOT="TERMCHLD("""_ID_""")"
"RTN","HMPMDUTL",100,0)
  D FIND^DIC("704.106",,".02E;.03I;.04I;.05E;.06E;.07E;.08E;.09E","M",ID,,,,,MSGROOT)
"RTN","HMPMDUTL",101,0)
  ; Check to see if we actually have any children.
"RTN","HMPMDUTL",102,0)
  I +$P(TERMCHLD(ID,"DILIST",0),U,1)<1 K @MSGROOT Q
"RTN","HMPMDUTL",103,0)
  N X F X=0:0 S X=($O(TERMCHLD(ID,"DILIST","ID",X))) Q:'X  D
"RTN","HMPMDUTL",104,0)
  . ; .01 is the Term ID
"RTN","HMPMDUTL",105,0)
  . S @TARGET@("termChild",X,"childOrder")=$$SANITIZE($G(TERMCHLD(ID,"DILIST","ID",X,.02)))
"RTN","HMPMDUTL",106,0)
  . ; .03 is the Child ID
"RTN","HMPMDUTL",107,0)
  . N CHILD S CHILD=$NA(@TARGET@("termChild",X,"childTerm"))
"RTN","HMPMDUTL",108,0)
  . D ONETERM($G(TERMCHLD(ID,"DILIST","ID",X,.03)),.CHILD)
"RTN","HMPMDUTL",109,0)
  . S @TARGET@("termChild",X,"valueType")=$$SANITIZE($G(TERMCHLD(ID,"DILIST","ID",X,.05)))
"RTN","HMPMDUTL",110,0)
  . S @TARGET@("termChild",X,"valueDelimiter")=$$SANITIZE($G(TERMCHLD(ID,"DILIST","ID",X,.06)))
"RTN","HMPMDUTL",111,0)
  . S @TARGET@("termChild",X,"valueStart")=$$SANITIZE($G(TERMCHLD(ID,"DILIST","ID",X,.07)))
"RTN","HMPMDUTL",112,0)
  . S @TARGET@("termChild",X,"valueStop")=$$SANITIZE($G(TERMCHLD(ID,"DILIST","ID",X,.08)))
"RTN","HMPMDUTL",113,0)
  . S @TARGET@("termChild",X,"description")=$$SANITIZE($G(TERMCHLD(ID,"DILIST","ID",X,.09)))
"RTN","HMPMDUTL",114,0)
  K @MSGROOT
"RTN","HMPMDUTL",115,0)
  Q
"RTN","HMPMDUTL",116,0)
TERMUNIT(ID,TARGET) ;Loads Units for a term.
"RTN","HMPMDUTL",117,0)
 ;
"RTN","HMPMDUTL",118,0)
 ;DE2818 SQA findings Newed TERMUNIT
"RTN","HMPMDUTL",119,0)
 N MSGROOT,TERMUNIT
"RTN","HMPMDUTL",120,0)
 S MSGROOT="TERMUNIT("""_ID_""")"
"RTN","HMPMDUTL",121,0)
 D FIND^DIC("704.105",,".02I;.03E;.04E;.05E;.06E;.07E","M",ID,,,,,MSGROOT)
"RTN","HMPMDUTL",122,0)
 ; Check to see if we actually have any children.
"RTN","HMPMDUTL",123,0)
 I +$P(TERMUNIT(ID,"DILIST",0),U,1)<1 K @MSGROOT Q
"RTN","HMPMDUTL",124,0)
 N X F X=0:0 S X=($O(TERMUNIT(ID,"DILIST","ID",X))) Q:'X  D
"RTN","HMPMDUTL",125,0)
 . ; .01 is the Term ID
"RTN","HMPMDUTL",126,0)
 . ; .02 is the Unit ID
"RTN","HMPMDUTL",127,0)
 . N UNIT S UNIT=$NA(@TARGET@("units",X,"unitTerm"))
"RTN","HMPMDUTL",128,0)
 . D ONETERM($G(TERMUNIT(ID,"DILIST","ID",X,.02)),.UNIT)
"RTN","HMPMDUTL",129,0)
 . S @TARGET@("units",X,"minValue")=$$SANITIZE($G(TERMUNIT(ID,"DILIST","ID",X,.03)))
"RTN","HMPMDUTL",130,0)
 . S @TARGET@("units",X,"maxValue")=$$SANITIZE($G(TERMUNIT(ID,"DILIST","ID",X,.04)))
"RTN","HMPMDUTL",131,0)
 . S @TARGET@("units",X,"decPrecision")=$$SANITIZE($G(TERMUNIT(ID,"DILIST","ID",X,.05)))
"RTN","HMPMDUTL",132,0)
 . S @TARGET@("units",X,"refLow")=$$SANITIZE($G(TERMUNIT(ID,"DILIST","ID",X,.06)))
"RTN","HMPMDUTL",133,0)
 . S @TARGET@("units",X,"refHigh")=$$SANITIZE($G(TERMUNIT(ID,"DILIST","ID",X,.07)))
"RTN","HMPMDUTL",134,0)
 K @MSGROOT
"RTN","HMPMDUTL",135,0)
 Q
"RTN","HMPMDUTL",136,0)
TERMQUAL(ID,TARGET,IFN) ;Loads Qualifiers for a term
"RTN","HMPMDUTL",137,0)
 ;
"RTN","HMPMDUTL",138,0)
 ;DE2818 SQA findings Newed TERQUAL
"RTN","HMPMDUTL",139,0)
 N MSGROOT,TERMQUAL
"RTN","HMPMDUTL",140,0)
 S MSGROOT="TERMQUAL("""_ID_""")"
"RTN","HMPMDUTL",141,0)
 D FIND^DIC("704.103",,".02E;.03I;.04E","M",ID,,,,,MSGROOT)
"RTN","HMPMDUTL",142,0)
 ; Check to see if we actually have any qualifiers.
"RTN","HMPMDUTL",143,0)
 I +$P(TERMQUAL(ID,"DILIST",0),U,1)<1 K @MSGROOT Q
"RTN","HMPMDUTL",144,0)
 N X F X=0:0 S X=($O(TERMQUAL(ID,"DILIST","ID",X))) Q:'X  D
"RTN","HMPMDUTL",145,0)
 . ; .01 is the Term ID
"RTN","HMPMDUTL",146,0)
 . ; .03 is the Qualifier ID
"RTN","HMPMDUTL",147,0)
 . N QUAL S QUAL=$NA(@TARGET@("qualifiers",X,"qualTerm"))
"RTN","HMPMDUTL",148,0)
 . ; blj 28 Feb 2014: bandaid to prevent recursive calls if someone has messed up the structure of the TERM_QUALIFIER file.
"RTN","HMPMDUTL",149,0)
 . I IFN'=$G(TERMQUAL(ID,"DILIST","ID",X,.03)) D ONETERM($G(TERMQUAL(ID,"DILIST","ID",X,.03)),.QUAL)
"RTN","HMPMDUTL",150,0)
 . S @TARGET@("qualifiers",X,"qualOrder")=$$SANITIZE($G(TERMQUAL(ID,"DILIST","ID",X,.02)))
"RTN","HMPMDUTL",151,0)
 . S @TARGET@("qualifiers",X,"ranking")=$$SANITIZE($G(TERMQUAL(ID,"DILIST","ID",X,.04)))
"RTN","HMPMDUTL",152,0)
 K @MSGROOT
"RTN","HMPMDUTL",153,0)
 Q
"RTN","HMPMDUTL",154,0)
SANITIZE(VALUE) ; Makes sure values are formatted correctly.
"RTN","HMPMDUTL",155,0)
 I +VALUE'=VALUE Q VALUE
"RTN","HMPMDUTL",156,0)
 I VALUE?1".".N S VALUE="0"_VALUE
"RTN","HMPMDUTL",157,0)
 I VALUE?1"-.".N S VALUE="-0"_$E(VALUE,2,$LENGTH(VALUE))
"RTN","HMPMDUTL",158,0)
 Q VALUE
"RTN","HMPMDUTL",159,0)
 ;
"RTN","HMPMDUTL",160,0)
GENGUID() ;
"RTN","HMPMDUTL",161,0)
 N X,AB
"RTN","HMPMDUTL",162,0)
 S X="",AB=$R(4),AB=$S(AB=0:"8",AB=1:"9",AB=2:"A",1:"B")
"RTN","HMPMDUTL",163,0)
 F  S X=X_$$BASE^XLFUTL($R(16),10,16) Q:$L(X)>31
"RTN","HMPMDUTL",164,0)
 S X="{"_$E(X,1,8)_"-"_$E(X,9,12)_"-"_"4"_$E(X,14,16)_"-"_AB_$E(X,18,20)_"-"_$E(X,21,32)_"}"
"RTN","HMPMDUTL",165,0)
 Q X
"RTN","HMPMDUTL",166,0)
TRMFLDS ;Fields for terminology
"RTN","HMPMDUTL",167,0)
  ;;.01;id
"RTN","HMPMDUTL",168,0)
  ;;.02;term
"RTN","HMPMDUTL",169,0)
  ;;.03;abbreviation
"RTN","HMPMDUTL",170,0)
  ;;.04;displayName
"RTN","HMPMDUTL",171,0)
  ;;.05;termType
"RTN","HMPMDUTL",172,0)
  ;;.06;dataType
"RTN","HMPMDUTL",173,0)
  ;;.07;valueType
"RTN","HMPMDUTL",174,0)
  ;;.09;active
"RTN","HMPMDUTL",175,0)
  ;;.1;description
"RTN","HMPMDUTL",176,0)
  ;;.2;helpText;
"RTN","HMPMDUTL",177,0)
  ;;.31;booleanValueTrue
"RTN","HMPMDUTL",178,0)
  ;;.32;booleanValueFalse;
"RTN","HMPMDUTL",179,0)
  ;;.33;multiSelectPicklist
"RTN","HMPMDUTL",180,0)
  ;;99.99;VUID
"RTN","HMPMDUTL",181,0)
  ;;***
"RTN","HMPMDUTL",182,0)
TTFLDS ;Fields for Term Typea
"RTN","HMPMDUTL",183,0)
  ;;id;type;xmlTag;VUID
"RTN","HMPMETA")
0^102^B122279349
"RTN","HMPMETA",1,0)
HMPMETA ;SLC/PJH,ASMR/RRB - Utility to collect Domains, UID's and stamptimes for a patient;8/14/13  11:22
"RTN","HMPMETA",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPMETA",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMETA",4,0)
 ;
"RTN","HMPMETA",5,0)
 Q
"RTN","HMPMETA",6,0)
 ; New routine for US6734
"RTN","HMPMETA",7,0)
 ;
"RTN","HMPMETA",8,0)
ADD(HMPDMNM,HMPUID,HMPSTMP) ; Build array for metastamp - called from HMPDJ0* routines
"RTN","HMPMETA",9,0)
 I ($G(HMPUID)="")!($G(HMPDMNM)="") Q
"RTN","HMPMETA",10,0)
 ;For quick orders the JDS domain is 'qo'
"RTN","HMPMETA",11,0)
 S:HMPDMNM="quick" HMPDMNM="qo"
"RTN","HMPMETA",12,0)
 S ^TMP("HMPMETA",$J,HMPDMNM,HMPUID)=HMPSTMP
"RTN","HMPMETA",13,0)
 ;unit tests use following nodes
"RTN","HMPMETA",14,0)
 S ^TMP("HMPMETA",$J,HMPDMNM)=$G(^TMP("HMPMETA",$J,HMPDMNM))+1
"RTN","HMPMETA",15,0)
 S ^TMP("HMPMETA",$J,"PATIENT")=$G(^TMP("HMPMETA",$J,"PATIENT"))+1
"RTN","HMPMETA",16,0)
 Q
"RTN","HMPMETA",17,0)
 ;
"RTN","HMPMETA",18,0)
DONE(HMPFDFN,HMPBATCH) ; Check if metastamp compile is complete
"RTN","HMPMETA",19,0)
 ;For patients this will always be true since all patient domains compiled by one task
"RTN","HMPMETA",20,0)
 Q:+$G(HMPFDFN) 1
"RTN","HMPMETA",21,0)
 ;For OPD requires to check that all domain compiles are completed
"RTN","HMPMETA",22,0)
 N HMPDOM,HMPCOMP
"RTN","HMPMETA",23,0)
 S HMPDOM="",HMPCOMP=1 F  S HMPDOM=$O(^XTMP(HMPBATCH,0,"MSTA",HMPDOM)) Q:HMPDOM=""  D  Q:'HMPCOMP
"RTN","HMPMETA",24,0)
 .S:$G(^XTMP(HMPBATCH,0,"MSTA",HMPDOM))=0 HMPCOMP=0
"RTN","HMPMETA",25,0)
 Q HMPCOMP
"RTN","HMPMETA",26,0)
 ;
"RTN","HMPMETA",27,0)
OPD(HMPFHMP) ;Check if OPD metastamp is ready to collect
"RTN","HMPMETA",28,0)
 Q $S($$DONE("OPD","HMPFX~"_HMPFHMP_"~OPD"):1,1:0)
"RTN","HMPMETA",29,0)
 ; 
"RTN","HMPMETA",30,0)
INIT(HMPBATCH,HMPFDFN,ARGS) ; Set metastamp status as in progress
"RTN","HMPMETA",31,0)
 N DOMAINS
"RTN","HMPMETA",32,0)
 ; set up domains to extract
"RTN","HMPMETA",33,0)
 D @($S(HMPFDFN="OPD":"OPDOMS",1:"PTDOMS")_"^HMPDJFSD(.DOMAINS)")
"RTN","HMPMETA",34,0)
 I $G(ARGS("domains"))'="" D
"RTN","HMPMETA",35,0)
 . S I=""
"RTN","HMPMETA",36,0)
 . F I=1:1 Q:'$D(DOMAINS(I))  D
"RTN","HMPMETA",37,0)
 .. I ARGS("domains")'[DOMAINS(I) K DOMAINS(I)
"RTN","HMPMETA",38,0)
 N HMPDOM,I
"RTN","HMPMETA",39,0)
 F I=1:1 S HMPDOM=$G(DOMAINS(I)) Q:HMPDOM=""  S ^XTMP(HMPBATCH,0,"MSTA",HMPDOM)=0
"RTN","HMPMETA",40,0)
 Q
"RTN","HMPMETA",41,0)
 ;
"RTN","HMPMETA",42,0)
UPD(HMPDOM) ; Update metastamp domain as complete
"RTN","HMPMETA",43,0)
 S ^XTMP(HMPBATCH,0,"MSTA",HMPDOM)=1
"RTN","HMPMETA",44,0)
 Q
"RTN","HMPMETA",45,0)
 ;
"RTN","HMPMETA",46,0)
MERGE1(HMPBATCH,HMPDOM) ; US11019 Merge a single domain
"RTN","HMPMETA",47,0)
 M ^XTMP(HMPBATCH,0,"META",HMPDOM)=^TMP("HMPMETA",$J,HMPDOM)
"RTN","HMPMETA",48,0)
 K ^TMP("HMPMETA",$J,HMPDOM)
"RTN","HMPMETA",49,0)
 Q
"RTN","HMPMETA",50,0)
 ;
"RTN","HMPMETA",51,0)
MERGE(HMPBATCH) ; Merge metastamp data into XTMP and mark domain complete in metastamp
"RTN","HMPMETA",52,0)
 ;Formatting of metastamp into JSON format by HMPMETA goes here when ready
"RTN","HMPMETA",53,0)
 N HMPDOM
"RTN","HMPMETA",54,0)
 S HMPDOM="PATIENT"
"RTN","HMPMETA",55,0)
 F  S HMPDOM=$O(^TMP("HMPMETA",$J,HMPDOM)) Q:HMPDOM=""  D
"RTN","HMPMETA",56,0)
 .M ^XTMP(HMPBATCH,0,"META",HMPDOM)=^TMP("HMPMETA",$J,HMPDOM)
"RTN","HMPMETA",57,0)
 K ^TMP("HMPMETA",$J)
"RTN","HMPMETA",58,0)
 Q
"RTN","HMPMETA",59,0)
 ;
"RTN","HMPMETA",60,0)
METAPT(A,HMPCDOM) ; MetaStamp for patient data (within its own syncStart chunk).;US11019 added second parameter
"RTN","HMPMETA",61,0)
 ; --Input parameter
"RTN","HMPMETA",62,0)
 ; A = "^^HMPFX~hmp-development-box~"<DFN> (e.g. ^^HMPFX~hmp-development-box~3)
"RTN","HMPMETA",63,0)
 ; HMPCDOM = Single domain US11019
"RTN","HMPMETA",64,0)
 ;
"RTN","HMPMETA",65,0)
 ; --Expects
"RTN","HMPMETA",66,0)
 ; DOMSIZE,OFFSET,HMPFCNT ;US11019 comment added not variables
"RTN","HMPMETA",67,0)
 ;
"RTN","HMPMETA",68,0)
 ; --Local variables
"RTN","HMPMETA",69,0)
 ; HMPA = "HMPFX~hmp-development-box~"<DFN>
"RTN","HMPMETA",70,0)
 ; HMPB = ZTASK# --> ^XTMP(HMPA,<ZTASK#>
"RTN","HMPMETA",71,0)
 ; HMPC = Domain (e.g. "allergy") --> ^XTMP(HMPA,HMPB,<Domain>
"RTN","HMPMETA",72,0)
 ; HMPD = Counter (sequential number) --> ^XTMP(HMPA,HMPB,HMPC,<Counter>
"RTN","HMPMETA",73,0)
 ; HMPN = Subscript --> ^XTMP(HMPA,HMPB,HMPC,HMPD,<Subscript>
"RTN","HMPMETA",74,0)
 ; HMPE = ^XTMP(HMPA,HMPB,HMPC,HMPD,HMPN)
"RTN","HMPMETA",75,0)
 ; HMPF = Domain id (e.g. the "C877:3:751" part of "urn:va:allergy:C877:3:751"
"RTN","HMPMETA",76,0)
 ; HMPID = pid --> <site-hash>;DFN (e.g. C877;3)
"RTN","HMPMETA",77,0)
 ; HMPZ1 = DFN
"RTN","HMPMETA",78,0)
 ; HMPP = $$PIDS^HMPDJFS(HMPZ1)  --> JSON construct containing pid, systemId, localId, icn
"RTN","HMPMETA",79,0)
 ; HMPQ = " (double quote literal)
"RTN","HMPMETA",80,0)
 ; HMPT = The "total" node from ^XTMP --> ^XTMP(HMPA,HMPB,HMPC,"total")
"RTN","HMPMETA",81,0)
 ; HMPX = JSON construct for the entire metaStamp
"RTN","HMPMETA",82,0)
 ; HMPW = Event timeStamp
"RTN","HMPMETA",83,0)
 ; HMPY = $$EN^HMPSTMP("NOW")
"RTN","HMPMETA",84,0)
 ; HMPZ = Counter for breaking up the large nodes into sub-nodes in ^TMP
"RTN","HMPMETA",85,0)
 ; 
"RTN","HMPMETA",86,0)
 I '$D(U) S U="^"
"RTN","HMPMETA",87,0)
 N HMPA,HMPB,HMPC,HMPC1,HMPD,HMPE,HMPF,HMPID,HMPM,HMPN
"RTN","HMPMETA",88,0)
 N HMPP,HMPQ,HMPT,HMPW,HMPX,HMPY,HMPZ,HMPZ1
"RTN","HMPMETA",89,0)
 S HMPA=$P(A,U,3),HMPB=$O(^XTMP(HMPA,0)),HMPZ1=$P(HMPA,"~",3)
"RTN","HMPMETA",90,0)
 S HMPE="",HMPQ="""",HMPZ=0 ;US11019
"RTN","HMPMETA",91,0)
 S HMPC=$G(HMPCDOM) ;US11019
"RTN","HMPMETA",92,0)
 S HMPP=$$PIDS^HMPDJFS(HMPZ1)
"RTN","HMPMETA",93,0)
 S HMPY=$$EN^HMPSTMP("NOW")
"RTN","HMPMETA",94,0)
 S HMPX=",""metaStamp"":"_"{""icn"":"""_$$GETICN^MPIF001(HMPZ1)_""""_","
"RTN","HMPMETA",95,0)
 S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_",""sourceMetaStamp"":"_"{"
"RTN","HMPMETA",96,0)
 S HMPID=$TR($P($P(HMPP,"pid",2),","),""":")
"RTN","HMPMETA",97,0)
 S HMPX=HMPX_""""_$P(HMPID,";")_""""_":{"
"RTN","HMPMETA",98,0)
 S HMPX=HMPX_"""pid"":"""_HMPID_""""_","
"RTN","HMPMETA",99,0)
 S HMPX=HMPX_"""localId"":"""_$P(HMPID,";",2)_""""_","
"RTN","HMPMETA",100,0)
 S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_","
"RTN","HMPMETA",101,0)
 S HMPX=HMPX_"""domainMetaStamp"""_":"_"{"
"RTN","HMPMETA",102,0)
 ;Scan Domains
"RTN","HMPMETA",103,0)
 D:HMPC'=""  I HMPC="" F  S HMPC=$O(^XTMP(HMPA,0,"META",HMPC)) Q:HMPC']""  D  ;US11019 allow process by single domain
"RTN","HMPMETA",104,0)
 .S HMPX=HMPX_""""_HMPC_""""_":{"
"RTN","HMPMETA",105,0)
 .S HMPX=HMPX_"""domain"":"""_HMPC_""""_","
"RTN","HMPMETA",106,0)
 .S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_","
"RTN","HMPMETA",107,0)
 .S HMPD=0
"RTN","HMPMETA",108,0)
 .S HMPX=HMPX_"""eventMetaStamp"""_":"_"{" ; Patient data
"RTN","HMPMETA",109,0)
 .N HMPU,HMPS S HMPU=""
"RTN","HMPMETA",110,0)
 .I $O(^XTMP(HMPA,0,"META",HMPC,HMPU))="" S HMPX=HMPX_"}" ;US11019 - cater for zero entries
"RTN","HMPMETA",111,0)
 .F  S HMPU=$O(^XTMP(HMPA,0,"META",HMPC,HMPU)) Q:HMPU']""  D
"RTN","HMPMETA",112,0)
 ..N VAR0,VAR1
"RTN","HMPMETA",113,0)
 ..S HMPS=$G(^XTMP(HMPA,0,"META",HMPC,HMPU)),VAR0=$P(HMPU,":",3),VAR1=$P(HMPU,":",4,99)
"RTN","HMPMETA",114,0)
 ..I $L(HMPX)>20000 S HMPZ=HMPZ+1,^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX,HMPX=""
"RTN","HMPMETA",115,0)
 ..S HMPX=HMPX_"""urn:va:"_VAR0_":"_VAR1_""""_":{"
"RTN","HMPMETA",116,0)
 ..S HMPX=HMPX_"""stampTime"":"""_HMPS_""""_"}"
"RTN","HMPMETA",117,0)
 ..S HMPX=HMPX_$S($O(^XTMP(HMPA,0,"META",HMPC,HMPU))="":"}",1:",")
"RTN","HMPMETA",118,0)
 .S HMPX=HMPX_"},"
"RTN","HMPMETA",119,0)
 .I $L(HMPX)>20000 S HMPZ=HMPZ+1,^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX,HMPX=""
"RTN","HMPMETA",120,0)
 I $L(HMPX)>0 D
"RTN","HMPMETA",121,0)
 .S HMPZ=HMPZ+1
"RTN","HMPMETA",122,0)
 .S HMPX=$E(HMPX,1,$L(HMPX)-1)_"}}}}" D
"RTN","HMPMETA",123,0)
 ..I $E(HMPX,$L(HMPX))="{" S HMPX=HMPX_"""seq"":"_OFFSET_",""total"":"_DOMSIZE
"RTN","HMPMETA",124,0)
 ..E  S HMPX=HMPX_",""seq"":"_OFFSET_",""total"":"_DOMSIZE
"RTN","HMPMETA",125,0)
 .S HMPX=HMPX_",""object"":"
"RTN","HMPMETA",126,0)
 .S ^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX
"RTN","HMPMETA",127,0)
 Q
"RTN","HMPMETA",128,0)
 ;
"RTN","HMPMETA",129,0)
METAOP(A) ; MetaStamp for operational data (within its own syncStart chunk)
"RTN","HMPMETA",130,0)
 ; A = HMPFX~hmp-development-box~OPD
"RTN","HMPMETA",131,0)
 ; --Local variables
"RTN","HMPMETA",132,0)
 ; HMPA = "HMPFX~hmp-development-box~"<DFN>
"RTN","HMPMETA",133,0)
 ; HMPB = ZTASK# --> ^XTMP(HMPA,<ZTASK#>
"RTN","HMPMETA",134,0)
 ; HMPC = Domain (e.g. "allergy") --> ^XTMP(HMPA,HMPB,<Domain>
"RTN","HMPMETA",135,0)
 ; HMPD = Counter (sequential number) --> ^XTMP(HMPA,HMPB,HMPC,<Counter>
"RTN","HMPMETA",136,0)
 ; HMPN = Subscript --> ^XTMP(HMPA,HMPB,HMPC,HMPD,<Subscript>
"RTN","HMPMETA",137,0)
 ; HMPE = ^XTMP(HMPA,HMPB,HMPC,HMPD,HMPN)
"RTN","HMPMETA",138,0)
 ; HMPF = Domain id (e.g. the "C877:3:751" part of "urn:va:allergy:C877:3:751"
"RTN","HMPMETA",139,0)
 ; HMPID = pid --> <site-hash>;DFN (e.g. C877;3)
"RTN","HMPMETA",140,0)
 ; HMPZ1 = DFN
"RTN","HMPMETA",141,0)
 ; HMPP = $$PIDS^HMPDJFS(HMPZ1)  --> JSON construct containing pid, systemId, localId, icn
"RTN","HMPMETA",142,0)
 ; HMPQ = " (double quote literal)
"RTN","HMPMETA",143,0)
 ; HMPT = The "total" node from ^XTMP --> ^XTMP(HMPA,HMPB,HMPC,"total")
"RTN","HMPMETA",144,0)
 ; HMPX = JSON construct for the entire metaStamp
"RTN","HMPMETA",145,0)
 ; HMPW = Event timeStamp
"RTN","HMPMETA",146,0)
 ; HMPY = $$EN^HMPSTMP("NOW")
"RTN","HMPMETA",147,0)
 ; HMPZ = Counter for breaking up the large nodes into sub-nodes in ^TMP
"RTN","HMPMETA",148,0)
 ; 
"RTN","HMPMETA",149,0)
 ;
"RTN","HMPMETA",150,0)
 I '$D(U) S U="^"
"RTN","HMPMETA",151,0)
 N HMPA,HMPJ,HMPQ,HMPSEP,HMPZ,HMPDAT,HMPDAT1,HMPDOM,HMPDOM1,HMPEVT,HMPX,HMPTOT,HMPTSK,HMPMOR,HMPLAS,HMPMOR,HMPLAS
"RTN","HMPMETA",152,0)
 S HMPA=$P(A,U,3),HMPQ="""",HMPZ=0,HMPSEP=","""
"RTN","HMPMETA",153,0)
 S HMPCNT=$G(HMPCNT)+1,HMPJ=$P(HMPA,"~",1,2)_"~OPD"
"RTN","HMPMETA",154,0)
 S HMPSEP=HMPQ
"RTN","HMPMETA",155,0)
 S HMPTSK=$O(^XTMP(A,0)),HMPY=$$EN^HMPSTMP("NOW"),HMPID=$$SYS^HMPUTILS
"RTN","HMPMETA",156,0)
 S HMPX="{""collection"":"""_"OPDsyncStart"_""""_","
"RTN","HMPMETA",157,0)
 S HMPX=HMPX_"""metaStamp"":"_"{"
"RTN","HMPMETA",158,0)
 S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_",""sourceMetaStamp"":"_"{"
"RTN","HMPMETA",159,0)
 S HMPX=HMPX_""""_$P(HMPID,";")_""""_":{"
"RTN","HMPMETA",160,0)
 S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_","
"RTN","HMPMETA",161,0)
 S HMPX=HMPX_"""domainMetaStamp"""_":"_"{"
"RTN","HMPMETA",162,0)
 ;Scan Domains
"RTN","HMPMETA",163,0)
 S HMPC=""
"RTN","HMPMETA",164,0)
 F  S HMPC=$O(^XTMP(HMPA,0,"META",HMPC)) Q:HMPC']""  D
"RTN","HMPMETA",165,0)
 .S HMPX=HMPX_""""_HMPC_""""_":{"
"RTN","HMPMETA",166,0)
 .S HMPX=HMPX_"""domain"":"""_HMPC_""""_","
"RTN","HMPMETA",167,0)
 .S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_","
"RTN","HMPMETA",168,0)
 .S HMPD=0
"RTN","HMPMETA",169,0)
 .S HMPX=HMPX_"""itemMetaStamp"""_":"_"{" ; Patient data
"RTN","HMPMETA",170,0)
 .N HMPU,HMPS S HMPU=""
"RTN","HMPMETA",171,0)
 .F  S HMPU=$O(^XTMP(HMPA,0,"META",HMPC,HMPU)) Q:HMPU']""  D
"RTN","HMPMETA",172,0)
 ..N VAR0,VAR1
"RTN","HMPMETA",173,0)
 ..S HMPS=$G(^XTMP(HMPA,0,"META",HMPC,HMPU)),VAR0=$P(HMPU,":",3),VAR1=$P(HMPU,":",4,99)
"RTN","HMPMETA",174,0)
 ..I $L(HMPX)>20000 S HMPZ=HMPZ+1,^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX,HMPX=""
"RTN","HMPMETA",175,0)
 ..S HMPX=HMPX_"""urn:va:"_VAR0_":"_VAR1_""""_":{"
"RTN","HMPMETA",176,0)
 ..S HMPX=HMPX_"""stampTime"":"""_HMPS_""""_"}"
"RTN","HMPMETA",177,0)
 ..S HMPX=HMPX_$S($O(^XTMP(HMPA,0,"META",HMPC,HMPU))="":"}",1:",")
"RTN","HMPMETA",178,0)
 .S HMPX=HMPX_"},"
"RTN","HMPMETA",179,0)
 .I $L(HMPX)>20000 S HMPZ=HMPZ+1,^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX,HMPX=""
"RTN","HMPMETA",180,0)
 I $L(HMPX)>0 D
"RTN","HMPMETA",181,0)
 .S HMPZ=HMPZ+1
"RTN","HMPMETA",182,0)
 .S HMPX=$E(HMPX,1,$L(HMPX)-1)_"}}}}},{"
"RTN","HMPMETA",183,0)
 .S ^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX
"RTN","HMPMETA",184,0)
 Q
"RTN","HMPMETA",185,0)
 ;
"RTN","HMPMETA",186,0)
STATUS(STOP,HMPFHMP) ; Set HMP GLOBAL USAGE MONITOR status
"RTN","HMPMETA",187,0)
 Q:$G(STOP)=""  Q:$G(HMPFHMP)=""
"RTN","HMPMETA",188,0)
 N HMPFLG,HMPSTMP,HMPSRV
"RTN","HMPMETA",189,0)
 S HMPSRV=$O(^HMP(800000,"B",HMPFHMP,"")) Q:'HMPSRV
"RTN","HMPMETA",190,0)
 S HMPFLG=$P($G(^HMP(800000,HMPSRV,0)),U,5),HMPSTMP=$P($G(^HMP(800000,HMPSRV,0)),U,6)
"RTN","HMPMETA",191,0)
 ;If stopped and already flagged as stopped do nothing
"RTN","HMPMETA",192,0)
 I STOP,HMPFLG Q
"RTN","HMPMETA",193,0)
 ;If stopped but not flagged as stopped set flag and timestamp
"RTN","HMPMETA",194,0)
 I STOP,'HMPFLG D SET(STOP,HMPSRV) Q
"RTN","HMPMETA",195,0)
 ;If running and flagged as stopped flag as running
"RTN","HMPMETA",196,0)
 I 'STOP,HMPFLG D SET(STOP,HMPSRV) Q
"RTN","HMPMETA",197,0)
 ;No action needed if running and not flagged as stop
"RTN","HMPMETA",198,0)
 Q
"RTN","HMPMETA",199,0)
 ;
"RTN","HMPMETA",200,0)
SET(STOP,HMPSRV) ; Flag set/reset, Stamptime set
"RTN","HMPMETA",201,0)
 Q:'$G(HMPSRV)
"RTN","HMPMETA",202,0)
 L +^HMP(800000,HMPSRV,0):5 E  Q
"RTN","HMPMETA",203,0)
 S $P(^HMP(800000,HMPSRV,0),U,5,6)=STOP_U_$$NOW^XLFDT
"RTN","HMPMETA",204,0)
 L -^HMP(800000,HMPSRV,0)
"RTN","HMPMETA",205,0)
 Q
"RTN","HMPMETA",206,0)
 ;
"RTN","HMPMETA",207,0)
CHECK(HMPFHMP) ; Check status and send HMP GLOBAL USAGE MONITOR message if appropriate
"RTN","HMPMETA",208,0)
 ; Input HMPFHMP - server name
"RTN","HMPMETA",209,0)
 Q:$G(HMPFHMP)=""
"RTN","HMPMETA",210,0)
 N HMPFLG,HMPSTMP,HMPDIFF,HMPSRV
"RTN","HMPMETA",211,0)
 S HMPSRV=$O(^HMP(800000,"B",HMPFHMP,"")) Q:'HMPSRV
"RTN","HMPMETA",212,0)
 S HMPFLG=$P($G(^HMP(800000,HMPSRV,0)),U,5)
"RTN","HMPMETA",213,0)
 ;No action required if status is not set
"RTN","HMPMETA",214,0)
 I HMPFLG="" Q
"RTN","HMPMETA",215,0)
 ;Get stamptime
"RTN","HMPMETA",216,0)
 S HMPSTMP=$P($G(^HMP(800000,HMPSRV,0)),U,6) Q:HMPSTMP=""
"RTN","HMPMETA",217,0)
 ;If stamptime < five minutes ago no action
"RTN","HMPMETA",218,0)
 I $$FMDIFF^XLFDT($$NOW^XLFDT,HMPSTMP,2)<300 Q
"RTN","HMPMETA",219,0)
 ;Otherwise send message
"RTN","HMPMETA",220,0)
 D:HMPFLG MESNOK
"RTN","HMPMETA",221,0)
 D:'HMPFLG MESOK
"RTN","HMPMETA",222,0)
 ;Clear DISK USAGE STATUS and DISK USAGE STATUS TIME in subscription file
"RTN","HMPMETA",223,0)
 L +^HMP(800000,HMPSRV,0):5 E  Q
"RTN","HMPMETA",224,0)
 S $P(^HMP(800000,HMPSRV,0),U,5,6)=""
"RTN","HMPMETA",225,0)
 L -^HMP(800000,HMPSRV,0):5
"RTN","HMPMETA",226,0)
 Q
"RTN","HMPMETA",227,0)
 ;
"RTN","HMPMETA",228,0)
MESNOK ; Mail Message if space limit on XTMP is breached
"RTN","HMPMETA",229,0)
 ;
"RTN","HMPMETA",230,0)
 N MAX,RCT,SIZE,XMSUBJ,XMBODY,XMDUZ,XMTO,XMZ
"RTN","HMPMETA",231,0)
 ;Determine estimated usage of XTMP
"RTN","HMPMETA",232,0)
 S SIZE=$J($P($$GETSIZE^HMPUTILS(),",")/1000000,2,2)
"RTN","HMPMETA",233,0)
 S MAX=$J($$GETMAX^HMPDJFSP()/1000000,2,2)
"RTN","HMPMETA",234,0)
 ;Construct Mail Message
"RTN","HMPMETA",235,0)
 S RCT(1)="Alert: eHMP usage of global ^XTMP has exceeded "_MAX_" Mb for more than 5 minutes."
"RTN","HMPMETA",236,0)
 S RCT(2)=" "
"RTN","HMPMETA",237,0)
 S RCT(3)="       eHMP subscribing is paused."
"RTN","HMPMETA",238,0)
 S RCT(4)=" "
"RTN","HMPMETA",239,0)
 S RCT(5)="       eHMP usage of global ^XTMP is "_SIZE_" Mb."
"RTN","HMPMETA",240,0)
 S RCT(6)=" "
"RTN","HMPMETA",241,0)
 S RCT(7)="       Disk space check at "_$$FMTE^XLFDT($$NOW^XLFDT)
"RTN","HMPMETA",242,0)
 S RCT(8)=" " ;Send warning to IRM VistA mail group
"RTN","HMPMETA",243,0)
 S XMSUBJ="HMP GLOBAL USAGE MONITOR",XMBODY="RCT",XMDUZ="",XMTO("HMP IRM GROUP")=""
"RTN","HMPMETA",244,0)
 S XMDUZ=.5,XMDUZ(0)="@"
"RTN","HMPMETA",245,0)
 D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","HMPMETA",246,0)
 Q
"RTN","HMPMETA",247,0)
 ;
"RTN","HMPMETA",248,0)
MESOK ; Mail Message if space limit on XTMP returns to normal
"RTN","HMPMETA",249,0)
 ;
"RTN","HMPMETA",250,0)
 N MAX,RCT,XMSUBJ,XMBODY,XMDUZ,XMTO,XMZ
"RTN","HMPMETA",251,0)
 S MAX=$J($$GETMAX^HMPDJFSP()/1000000,2,2)
"RTN","HMPMETA",252,0)
 ;Construct Mail Message
"RTN","HMPMETA",253,0)
 S RCT(1)="Alert: eHMP usage of global ^XTMP has been below "_MAX_" Mb. for more than 5 minutes."
"RTN","HMPMETA",254,0)
 S RCT(2)=" "
"RTN","HMPMETA",255,0)
 S RCT(3)="       eHMP subscribing is restarted."
"RTN","HMPMETA",256,0)
 S RCT(4)=" "
"RTN","HMPMETA",257,0)
 S RCT(5)="       Disk space check at "_$$FMTE^XLFDT($$NOW^XLFDT)
"RTN","HMPMETA",258,0)
 S RCT(6)=" "
"RTN","HMPMETA",259,0)
 ;Send message to IRM VistA mail group
"RTN","HMPMETA",260,0)
 S XMSUBJ="HMP GLOBAL USAGE MONITOR",XMBODY="RCT",XMDUZ="",XMTO("IRM GROUP")=""
"RTN","HMPMETA",261,0)
 S XMDUZ=.5,XMDUZ(0)="@"
"RTN","HMPMETA",262,0)
 D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","HMPMETA",263,0)
 Q
"RTN","HMPMETA",264,0)
 ;
"RTN","HMPMETA",265,0)
 ;Following tags used by VPRJTT0 unit test routines
"RTN","HMPMETA",266,0)
 ;-------------------------------------------------
"RTN","HMPMETA",267,0)
EN(HMPFDFN) ;Build XTMP for patient
"RTN","HMPMETA",268,0)
 I $G(HMPFDFN)="" D MES^XPDUTL("No patient specified, call as D EN^HMPMETA(DFN)") Q
"RTN","HMPMETA",269,0)
 N ARGS,DOMAINS,HMPSRV,NEWSUB,HMPFERR,HMPBATCH,HMPSTMP,SEQNODE,ZTSK,ZTQUEUED
"RTN","HMPMETA",270,0)
 ;Select domains to compile
"RTN","HMPMETA",271,0)
 ;OPD domains
"RTN","HMPMETA",272,0)
 ;asu-class#asu-rule#category#charttab#displaygroup#doc-def#labgroup#labpanel#location#orderable#page#pt-select#
"RTN","HMPMETA",273,0)
 ;personphoto#pointofcare#quick#roster#route#schedule#team#teamposition#user#usertabprefs#viewdefdef#
"RTN","HMPMETA",274,0)
 ;viewdefdefcoldefconfigtemplate#immunization-list#allergy-list#signssymptoms-list#vitaltypes-list#
"RTN","HMPMETA",275,0)
 ;vitalqualifier-list#vitalcategory-list
"RTN","HMPMETA",276,0)
 ;Patient domains
"RTN","HMPMETA",277,0)
 ;allergy#vital#problem#order#treatment#patient#consult#procedure#obs#visit#appointment#ptf#med#lab#
"RTN","HMPMETA",278,0)
 ;image#surgery#document#mh#
"RTN","HMPMETA",279,0)
 ;Patient PCE domains
"RTN","HMPMETA",280,0)
 ;auxiliary#diagnosis#factor#immunization#task#vital#exam#cpt#education#pov#skin
"RTN","HMPMETA",281,0)
 ;S ARGS("domains")="allergy#asu-class"
"RTN","HMPMETA",282,0)
 ;
"RTN","HMPMETA",283,0)
 ;Modify SEQNODE to extract required patient
"RTN","HMPMETA",284,0)
 S SEQNODE=HMPFDFN_"^syncStart^HMPFX~hmp-development-box~"_HMPFDFN_"^^64671"
"RTN","HMPMETA",285,0)
 S HMPBATCH=$P(SEQNODE,U,3),HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPMETA",286,0)
 S HMPSRV("ien")=$O(^HMP(800000,"B",HMPSRV,0)) Q:'HMPSRV("ien")
"RTN","HMPMETA",287,0)
 ;Unsubscribe patient and clear cache
"RTN","HMPMETA",288,0)
 D UNSUB(HMPFDFN,HMPSRV("ien")) K ^XTMP(HMPBATCH)
"RTN","HMPMETA",289,0)
 ;Clear metastamp array
"RTN","HMPMETA",290,0)
 K ^TMP("HMPMETA",$J)
"RTN","HMPMETA",291,0)
 ; set up domains to extract
"RTN","HMPMETA",292,0)
 D @($S(HMPFDFN="OPD":"OPDOMS",1:"PTDOMS")_"^HMPDJFSD(.DOMAINS)")
"RTN","HMPMETA",293,0)
 ;Clear unwanted domains
"RTN","HMPMETA",294,0)
 I $G(ARGS("domains"))'="" N I F I=1:1 Q:'$D(DOMAINS(I))  K:ARGS("domains")'[DOMAINS(I) DOMAINS(I)
"RTN","HMPMETA",295,0)
 ;
"RTN","HMPMETA",296,0)
 ; see if this is new subscription and task extract if new
"RTN","HMPMETA",297,0)
 D SETPAT^HMPDJFSP(HMPFDFN,HMPSRV,.NEWSUB) Q:$G(HMPFERR) ""
"RTN","HMPMETA",298,0)
 ;For operational data set stamptime as time subscription placed
"RTN","HMPMETA",299,0)
 S:HMPFDFN="OPD" HMPSTMP=$$JSONDT^HMPUTILS($$NOW^XLFDT)
"RTN","HMPMETA",300,0)
 I NEWSUB D  Q:$G(HMPFERR) ""
"RTN","HMPMETA",301,0)
 . I HMPFDFN="OPD" D  ; queue each operational domain
"RTN","HMPMETA",302,0)
 . . S I="" F  S I=$O(DOMAINS(I)) Q:'I  D
"RTN","HMPMETA",303,0)
 . . . N HMPFDOM
"RTN","HMPMETA",304,0)
 . . . S HMPFDOM(1)=DOMAINS(I)
"RTN","HMPMETA",305,0)
 . . . D QUINIT(HMPBATCH,HMPFDFN,.HMPFDOM)
"RTN","HMPMETA",306,0)
 . E  D  ; queue all domains for patient
"RTN","HMPMETA",307,0)
 . . N HMPFDOM
"RTN","HMPMETA",308,0)
 . . M HMPFDOM=DOMAINS
"RTN","HMPMETA",309,0)
 . . ; if patients extracts are held (version mismatch), put DFN on wait list
"RTN","HMPMETA",310,0)
 . . I $G(^XTMP("HMPFS~"_HMPSRV("ien"),"waiting")) S ^XTMP("HMPFS~"_HMPSRV("ien"),"waiting",HMPFDFN)="" QUIT
"RTN","HMPMETA",311,0)
 . . ; otherwise queue patient
"RTN","HMPMETA",312,0)
 . . D QUINIT(HMPBATCH,HMPFDFN,.HMPFDOM)
"RTN","HMPMETA",313,0)
 Q
"RTN","HMPMETA",314,0)
 ;
"RTN","HMPMETA",315,0)
QUINIT(HMPBATCH,HMPFDFN,HMPFDOM) ; Queue the initial extracts for a patient
"RTN","HMPMETA",316,0)
 ; HMPBATCH="HMPFX~hmpsrvid~dfn"  example: HMPFX~hmpXYZ~229
"RTN","HMPMETA",317,0)
 ; HMPFDOM(n)="domainName"
"RTN","HMPMETA",318,0)
 ; 
"RTN","HMPMETA",319,0)
 ; ^XTMP("HMPFX~hmpsrvid~dfn",0)=expires^created^HMP Patient Extract
"RTN","HMPMETA",320,0)
 ;                           ,0,"status",domain)=0:waiting;1:ready
"RTN","HMPMETA",321,0)
 ;                           ,0,"task",taskIen)=""
"RTN","HMPMETA",322,0)
 ;                           ,taskIen,domain,... (extract data)
"RTN","HMPMETA",323,0)
 ;
"RTN","HMPMETA",324,0)
 ; only done once when beginning the batch, no matter how many tasked jobs
"RTN","HMPMETA",325,0)
 L +^XTMP(HMPBATCH):5 E  D SETERR^HMPDJFS("Cannot lock batch:"_HMPBATCH) QUIT
"RTN","HMPMETA",326,0)
 I '$D(^XTMP(HMPBATCH)) D
"RTN","HMPMETA",327,0)
 . D NEWXTMP^HMPDJFS(HMPBATCH,2,"HMP Patient Extract")
"RTN","HMPMETA",328,0)
 . I $G(ARGS("jobId"))]"" S ^XTMP(HMPBATCH,"JOBID")=ARGS("jobId")  ;US3907
"RTN","HMPMETA",329,0)
 . I $G(ARGS("rootJobId"))]"" S ^XTMP(HMPBATCH,"ROOTJOBID")=ARGS("rootJobId")  ;US3907
"RTN","HMPMETA",330,0)
 . S ^XTMP(HMPBATCH,0,"time")=$H
"RTN","HMPMETA",331,0)
 . D SETMARK^HMPDJFSP("Start",HMPFDFN,HMPBATCH) ; sends full demographics
"RTN","HMPMETA",332,0)
 L -^XTMP(HMPBATCH)
"RTN","HMPMETA",333,0)
 ;
"RTN","HMPMETA",334,0)
 ; set up the domains to be done by this task
"RTN","HMPMETA",335,0)
 N I S I=0 F  S I=$O(HMPFDOM(I)) Q:'I  D SETDOM^HMPDJFSP("status",HMPFDOM(I),0)
"RTN","HMPMETA",336,0)
 ;
"RTN","HMPMETA",337,0)
 ;Call compile in foreground
"RTN","HMPMETA",338,0)
 S ZTSK=$J,^XTMP(HMPBATCH,0,"task",ZTSK)=$H,ZTQUEUED="1" D DQINIT^HMPDJFSP U 0
"RTN","HMPMETA",339,0)
 Q
"RTN","HMPMETA",340,0)
 ;
"RTN","HMPMETA",341,0)
UNSUB(DFN,SRV) ;Unsubscribe
"RTN","HMPMETA",342,0)
 ;Operational Data subscription
"RTN","HMPMETA",343,0)
 I DFN="OPD" D UPDOPD^HMPDJFSP(SRV,"@") Q
"RTN","HMPMETA",344,0)
 ;Patient subscription
"RTN","HMPMETA",345,0)
 N DA,DIK
"RTN","HMPMETA",346,0)
 S DA=DFN,DA(1)=SRV
"RTN","HMPMETA",347,0)
 S DIK="^HMP(800000,"_DA(1)_",1,"
"RTN","HMPMETA",348,0)
 D ^DIK
"RTN","HMPMETA",349,0)
 Q
"RTN","HMPP2I")
1^178
"RTN","HMPP3I")
0^104^B129333471
"RTN","HMPP3I",1,0)
HMPP3I ;SLC/AGP,ASMR/RRB,ASF,SRG - HMP patch 3 post install ; Jan 21, 2015 16:50:00
"RTN","HMPP3I",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Oct 10, 2014;Build 63
"RTN","HMPP3I",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPP3I",4,0)
 ;
"RTN","HMPP3I",5,0)
 ; ^XTV(8989.51 - ICR 2992
"RTN","HMPP3I",6,0)
 ; ^XTV(8989.5 - ICR 2682
"RTN","HMPP3I",7,0)
 ;
"RTN","HMPP3I",8,0)
 Q
"RTN","HMPP3I",9,0)
 ;
"RTN","HMPP3I",10,0)
ENV ; -- environment check to prevent production installation
"RTN","HMPP3I",11,0)
 N XPDABORT  ; DE2818 SQA findings ASMR/RRB
"RTN","HMPP3I",12,0)
 I $$PROD^XUPROD D
"RTN","HMPP3I",13,0)
 .W !,"Production account installation is not permitted at this time."
"RTN","HMPP3I",14,0)
 .W !!,"Please verify the target installation account is a non-production account."
"RTN","HMPP3I",15,0)
 .W !!,"*** INSTALLATION ABORTED! ***"
"RTN","HMPP3I",16,0)
 .S XPDABORT=1
"RTN","HMPP3I",17,0)
 Q
"RTN","HMPP3I",18,0)
 ;
"RTN","HMPP3I",19,0)
PRE ; -- clean out HMP SUBSCRIPTION and ^XTMP("HMP") entries for testing
"RTN","HMPP3I",20,0)
 N HMPDT S HMPDT="HMP-1111111"
"RTN","HMPP3I",21,0)
 F  S HMPDT=$O(^XTMP(HMPDT)) Q:HMPDT'?1"HMP-"7N  K ^XTMP(HMPDT)
"RTN","HMPP3I",22,0)
 S HMPDT="HMPEF-1111111"
"RTN","HMPP3I",23,0)
 F  S HMPDT=$O(^XTMP(HMPDT)) Q:HMPDT'?1"HMPEF-"7N  K ^XTMP(HMPDT)
"RTN","HMPP3I",24,0)
 K ^XTMP("HMP"),^TMP("HMPX")
"RTN","HMPP3I",25,0)
 ;I $$VERCMP($$VERSRV(),"0.7-S54")>0 D  ; if current < S54
"RTN","HMPP3I",26,0)
 ;. K ^HMP(800000)
"RTN","HMPP3I",27,0)
 ;. S ^HMP(800000,0)="HMP SUBSCRIPTION^800000^^"
"RTN","HMPP3I",28,0)
 ;D CLEARPAR
"RTN","HMPP3I",29,0)
 ;D TASKCONV
"RTN","HMPP3I",30,0)
 D ADDRSRC ; add resource for throttling extract tasks
"RTN","HMPP3I",31,0)
 S ^XTMP("HMP-LAST-SCHEMA",0)=$$HTFM^XLFDT(+$H+7)_U_$$HTFM^XLFDT(+$H)_U_"JSON schema before install"
"RTN","HMPP3I",32,0)
 S ^XTMP("HMP-LAST-SCHEMA",1)=+$P($$GET^XPAR("PKG","HMP JSON SCHEMA"),".")
"RTN","HMPP3I",33,0)
 Q
"RTN","HMPP3I",34,0)
 ;
"RTN","HMPP3I",35,0)
CLEARPAR ;
"RTN","HMPP3I",36,0)
 N ENT,ERROR,INST,LIST,PAR,TYPE,X,UID
"RTN","HMPP3I",37,0)
 ;S PAR="" F  S PAR=$O(^XTV(8989.51,"B","HMP PARAMETERS","")) I PAR>0 Q
"RTN","HMPP3I",38,0)
 S PAR=$O(^XTV(8989.51,"B","HMP PARAMETERS","")) Q:PAR'>0
"RTN","HMPP3I",39,0)
 S X="" F  S X=$O(^XTV(8989.5,"AC",PAR,X)) Q:X=""  D
"RTN","HMPP3I",40,0)
 .S TYPE=$S(X["VA":"USR",X["DIC":"SYS",1:"") I TYPE="" Q
"RTN","HMPP3I",41,0)
 .S ENT=TYPE_".`"_+X
"RTN","HMPP3I",42,0)
 .S UID="" F  S UID=$O(^XTV(8989.5,"AC",PAR,X,UID)) Q:UID=""  D
"RTN","HMPP3I",43,0)
 ..D DEL^XPAR(ENT,"HMP PARAMETERS",UID,.ERROR)
"RTN","HMPP3I",44,0)
 Q
"RTN","HMPP3I",45,0)
 ;
"RTN","HMPP3I",46,0)
 ; VERSRV and VERCMP are also in HMPUTILS, but not until after the install
"RTN","HMPP3I",47,0)
 ; of this patch (HMP*2*3), so they are reproduced here.
"RTN","HMPP3I",48,0)
 ;
"RTN","HMPP3I",49,0)
VERSRV()   ; Return server version of option name
"RTN","HMPP3I",50,0)
 N HMPLST,VAL
"RTN","HMPP3I",51,0)
 D FIND^DIC(19,"",1,"X","HMP UI CONTEXT",1,,,,"HMPLST")
"RTN","HMPP3I",52,0)
 S VAL=$G(HMPLST("DILIST","ID",1,1))
"RTN","HMPP3I",53,0)
 Q $$UP^XLFSTR($P(VAL,"version ",2))
"RTN","HMPP3I",54,0)
 ;
"RTN","HMPP3I",55,0)
VERCMP(CUR,VAL) ; Returns 1 if CUR<VAL, -1 if CUR>VAL, 0 if equal
"RTN","HMPP3I",56,0)
 N CURMAJOR,CURMINOR,CURSNAP,VALMAJOR,VALMINOR,VALSNAP
"RTN","HMPP3I",57,0)
 S CURMAJOR=$P(CUR,"-"),CURMINOR=$P(CUR,"-",2),CURSNAP=$E($P(CUR,"-",3),1,4)="SNAP"
"RTN","HMPP3I",58,0)
 S VALMAJOR=$P(VAL,"-"),VALMINOR=$P(VAL,"-",2),VALSNAP=$E($P(VAL,"-",3),1,4)="SNAP"
"RTN","HMPP3I",59,0)
 I $E(VALMINOR)="P" S VALMINOR=$E(VALMINOR,2,99)     ; "P"ilot versions (old)
"RTN","HMPP3I",60,0)
 I $E(CURMINOR)="P" S CURMINOR=$E(VALMINOR,2,99)
"RTN","HMPP3I",61,0)
 I $E(VALMINOR)="S" S VALMINOR=$E(VALMINOR,2,99)*10  ; "S"print versions
"RTN","HMPP3I",62,0)
 I $E(CURMINOR)="S" S CURMINOR=$E(CURMINOR,2,99)*10
"RTN","HMPP3I",63,0)
 Q:VALMAJOR>CURMAJOR 1   Q:VALMAJOR<CURMAJOR -1  ; compare major versions
"RTN","HMPP3I",64,0)
 Q:VALMINOR>CURMINOR 1   Q:VALMINOR<CURMINOR -1  ; compare minor versions
"RTN","HMPP3I",65,0)
 Q:(CURSNAP&'VALSNAP) 1  Q:(VALSNAP&'CURSNAP) -1 ; "SNAPSHOT" < released
"RTN","HMPP3I",66,0)
 Q 0
"RTN","HMPP3I",67,0)
 ;
"RTN","HMPP3I",68,0)
 ;
"RTN","HMPP3I",69,0)
POST ; -- set up new Tx data
"RTN","HMPP3I",70,0)
 ;D CREATEUS
"RTN","HMPP3I",71,0)
 N HMPLVER
"RTN","HMPP3I",72,0)
 S HMPLVER=$$VERSRV()
"RTN","HMPP3I",73,0)
 D VERSION
"RTN","HMPP3I",74,0)
 D EN^HMPIDX
"RTN","HMPP3I",75,0)
 D OBJCNT
"RTN","HMPP3I",76,0)
 I $$VERCMP(HMPLVER,"0.7-S58")>0 D PARPID            ; if current < S58
"RTN","HMPP3I",77,0)
 I $G(^XTMP("HMP-LAST-SCHEMA",1))<2 D CVTPAT,CVTSEL  ; if existing schema < 2.0
"RTN","HMPP3I",78,0)
 K ^XTMP("HMP-LAST-SCHEMA")
"RTN","HMPP3I",79,0)
 ;D CREATE^HMPAP1  ;BL;V5-6 Protocols now attached via KIDs build not post routine
"RTN","HMPP3I",80,0)
 D POST^HMPPRXY2
"RTN","HMPP3I",81,0)
 D DISABLE^HMPZ0218 ;BL;US5021
"RTN","HMPP3I",82,0)
 D POST^HMP0311P
"RTN","HMPP3I",83,0)
 D POST^HMP0311Q ;DE2393 - Subscribe HMP ADT CLIENT P'cols to VAFC ATD SERVERS
"RTN","HMPP3I",84,0)
 D SETPARMS ;US7724 - set throttling parameter values
"RTN","HMPP3I",85,0)
 D MENUADD  ;NEED TO ADD HMP XU EVENTS OPTION to menu XU USER ADD
"RTN","HMPP3I",86,0)
 Q
"RTN","HMPP3I",87,0)
 ;
"RTN","HMPP3I",88,0)
VERSION ; -- update V# parameter
"RTN","HMPP3I",89,0)
 D PUT^XPAR("PKG","HMP VERSION",1,"2.00")
"RTN","HMPP3I",90,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME") I HMPSYS'=$$SYS^HMPUTILS D PUT^XPAR("SYS","HMP SYSTEM NAME",1,$$SYS^HMPUTILS) ;ASF 12/19/15
"RTN","HMPP3I",91,0)
 Q
"RTN","HMPP3I",92,0)
 ;
"RTN","HMPP3I",93,0)
OBJCNT ; -- create count index for HMP OBJECT file
"RTN","HMPP3I",94,0)
 Q:$D(^HMP(800000.11,"ACNT"))
"RTN","HMPP3I",95,0)
 N DIK,DA
"RTN","HMPP3I",96,0)
 S DIK="^HMP(800000.11,"
"RTN","HMPP3I",97,0)
 S DIK(1)=".03^ACNT"
"RTN","HMPP3I",98,0)
 D ENALL^DIK
"RTN","HMPP3I",99,0)
 Q
"RTN","HMPP3I",100,0)
CREATEUS ;
"RTN","HMPP3I",101,0)
 N DIV,FDA,IC,IEN,IENS,NAME,SER,HMPERR
"RTN","HMPP3I",102,0)
 ;do not create the user if the patch is already installed or if the user is already created
"RTN","HMPP3I",103,0)
 I $$PATCH^XPDUTL("HMP*1.0*3") Q
"RTN","HMPP3I",104,0)
 D EN^DDIOL("Creating HMP Sync User")
"RTN","HMPP3I",105,0)
 ;
"RTN","HMPP3I",106,0)
 S NAME="HMP,USER SYNC"
"RTN","HMPP3I",107,0)
 S IEN=$$CREATE^XUSAP(NAME,"","HMP SYNCHRONIZATION CONTEXT")
"RTN","HMPP3I",108,0)
 I IEN=0 D EN^DDIOL("User already exists") Q
"RTN","HMPP3I",109,0)
 I IEN<0 D EN^DDIOL("Cannot create user") Q
"RTN","HMPP3I",110,0)
 S IENS="?"_IEN_","
"RTN","HMPP3I",111,0)
 S DIV=$$ASK(4) I DIV'>0 D EN^DDIOL("A division needs to be selected.") Q
"RTN","HMPP3I",112,0)
 S SER=$$ASK(49) I SER'>0 D EN^DDIOL("A service needs to be selected.") Q
"RTN","HMPP3I",113,0)
 S FDA(200,IENS,.01)=NAME
"RTN","HMPP3I",114,0)
 S FDA(200,IENS,7.2)=1
"RTN","HMPP3I",115,0)
 S FDA(200,IENS,29)=$P(SER,U)
"RTN","HMPP3I",116,0)
 S FDA(200,IENS,200.04)=1
"RTN","HMPP3I",117,0)
 S FDA(200,IENS,200.1)=99999
"RTN","HMPP3I",118,0)
 ;S FDA(200.03,"?+2,"_IENS,.01)="HMP SYNCHRONIZATION CONTEXT"
"RTN","HMPP3I",119,0)
 ;S FDA(200.03,"?+3,"_IENS,.01)="HMP UI CONTEXT"
"RTN","HMPP3I",120,0)
 S FDA(200.02,"?+4,"_IENS,.01)=$P(DIV,U)
"RTN","HMPP3I",121,0)
 S FDA(200.02,"?+4,"_IENS,1)=1
"RTN","HMPP3I",122,0)
 D UPDATE^DIE("","FDA","","HMPERR")
"RTN","HMPP3I",123,0)
 I $D(HMPERR) D  Q
"RTN","HMPP3I",124,0)
 .D EN^DDIOL("Update failed, UPDATE^DIE returned the following error message.")
"RTN","HMPP3I",125,0)
 .S IC="HMPERR"
"RTN","HMPP3I",126,0)
 .F  S IC=$Q(@IC) Q:IC=""  W !,IC,"=",@IC
"RTN","HMPP3I",127,0)
 .D EN^DDIOL("Examine the above error message for the reason.")
"RTN","HMPP3I",128,0)
 .H 2
"RTN","HMPP3I",129,0)
 D EN^DDIOL("Add ACCESS/VERIFY codes to the "_NAME)
"RTN","HMPP3I",130,0)
 Q
"RTN","HMPP3I",131,0)
 ;
"RTN","HMPP3I",132,0)
ASK(FILENUM) ;
"RTN","HMPP3I",133,0)
 N DIC,Y
"RTN","HMPP3I",134,0)
 S DIC=FILENUM,DIC(0)="AEQMZ",DIC("A")="Select "_$S(FILENUM=4:"division: ",1:"service/section: ")
"RTN","HMPP3I",135,0)
 I FILENUM=4 S DIC("S")="S DINUM=X K:$S($D(^XUSEC(""XUMGR"",DUZ)):0,'$$TF^XUAF4(X):1,1:0) X,DINUM"
"RTN","HMPP3I",136,0)
 D ^DIC
"RTN","HMPP3I",137,0)
 Q Y
"RTN","HMPP3I",138,0)
 ;
"RTN","HMPP3I",139,0)
TASKCONV ;
"RTN","HMPP3I",140,0)
 N COLL,I,IEN,NODE,PAT,TEMP,UID,UPDATE,HMPY
"RTN","HMPP3I",141,0)
 K ^TMP($J,"HMPY"),^TMP($J,"HMPTEMP")
"RTN","HMPP3I",142,0)
 S HMPY=$NA(^TMP($J,"HMPY")),TEMP=$NA(^TMP($J,"HMPTEMP"))
"RTN","HMPP3I",143,0)
 S PAT=0 F  S PAT=$O(^HMP(800000.1,"C",PAT)) Q:PAT'>0  D
"RTN","HMPP3I",144,0)
 .S IEN=0 F  S IEN=$O(^HMP(800000.1,"C",PAT,"task",IEN)) Q:IEN'>0  D
"RTN","HMPP3I",145,0)
 ..S NODE=$G(^HMP(800000.1,IEN,0))
"RTN","HMPP3I",146,0)
 ..S UID=$P(NODE,U) I UID="" Q
"RTN","HMPP3I",147,0)
 ..S UPDATE=0
"RTN","HMPP3I",148,0)
 ..S I=0 F  S I=$O(^HMP(800000.1,IEN,1,I)) Q:I<1  S X=$G(^(I,0)),HMPY(I)=X
"RTN","HMPP3I",149,0)
 ..D DECODE^HMPJSON("HMPY","TEMP","ERROR")
"RTN","HMPP3I",150,0)
 ..I $D(ERROR) D EN^DDIOL("Error in decoding JSON Object") Q
"RTN","HMPP3I",151,0)
 ..K HMPY,^TMP($J,"HMPY")
"RTN","HMPP3I",152,0)
 ..I $G(@TEMP@("assignToCode"))'="" S @TEMP@("createdByCode")=@TEMP@("assignToCode"),UPDATE=1 K @TEMP@("assignToCode")
"RTN","HMPP3I",153,0)
 ..I $G(@TEMP@("assignToName"))'="" S @TEMP@("createdByName")=@TEMP@("assignToName"),UPDATE=1 K @TEMP@("assignToName")
"RTN","HMPP3I",154,0)
 ..I $G(@TEMP@("ownerName"))'="" S UPDATE=1 K @TEMP@("ownerName")
"RTN","HMPP3I",155,0)
 ..I $G(@TEMP@("ownerCode"))'="" S UPDATE=1 K @TEMP@("ownerCode")
"RTN","HMPP3I",156,0)
 ..I UPDATE=0 Q
"RTN","HMPP3I",157,0)
 ..;
"RTN","HMPP3I",158,0)
 ..S HMPY=$NA(^TMP($J,"HMPY"))
"RTN","HMPP3I",159,0)
 ..D ENCODE^HMPJSON("TEMP","HMPY","ERROR")
"RTN","HMPP3I",160,0)
 ..I $D(ERROR) D EN^DDIOL("Error in encoding JSON Object") Q
"RTN","HMPP3I",161,0)
 ..D EN^DDIOL("Updating task uid: "_UID)
"RTN","HMPP3I",162,0)
 ..D PUT^HMPDJ1(.HMP,PAT,"task",.HMPY)
"RTN","HMPP3I",163,0)
 K ^TMP($J,"HMPY"),^TMP($J,"HMPTEMP")
"RTN","HMPP3I",164,0)
 Q
"RTN","HMPP3I",165,0)
ADDRSRC ; Add resource device
"RTN","HMPP3I",166,0)
 N RNAME,RDESC,RSLOT,RTYPE,RIEN
"RTN","HMPP3I",167,0)
 S RNAME="HMP EXTRACT RESOURCE"
"RTN","HMPP3I",168,0)
 S RDESC="Controls the number of HMP extract jobs that run simultaneously."
"RTN","HMPP3I",169,0)
 S RSLOT=10
"RTN","HMPP3I",170,0)
 S RTYPE="P-OTHER"
"RTN","HMPP3I",171,0)
 S RIEN=$$RES^XUDHSET(RNAME,RNAME,RSLOT,RDESC,RTYPE)
"RTN","HMPP3I",172,0)
 Q
"RTN","HMPP3I",173,0)
CVTPAT ; resend all the patient objects
"RTN","HMPP3I",174,0)
 D BMES^XPDUTL("Updating HMP patient objects")
"RTN","HMPP3I",175,0)
 N HMPIEN,DFN,CNT
"RTN","HMPP3I",176,0)
 K ^TMP("HMPCVT",$J)
"RTN","HMPP3I",177,0)
 S CNT=0
"RTN","HMPP3I",178,0)
 S HMPIEN=0 F  S HMPIEN=$O(^HMP(800000,HMPIEN)) Q:'HMPIEN  D
"RTN","HMPP3I",179,0)
 . S DFN=0 F  S DFN=$O(^HMP(800000,HMPIEN,1,DFN)) Q:'DFN  D
"RTN","HMPP3I",180,0)
 . . Q:$D(^TMP("HMPCVT",$J,DFN))
"RTN","HMPP3I",181,0)
 . . D POST^HMPDJFS(DFN,"patient",DFN,"","")
"RTN","HMPP3I",182,0)
 . . S ^TMP("HMPCVT",$J,DFN)=""
"RTN","HMPP3I",183,0)
 . . S CNT=CNT+1 I '(CNT#1000) D MES^XPDUTL("  "_CNT_" patient objects converted")
"RTN","HMPP3I",184,0)
 K ^TMP("HMPCVT",$J)
"RTN","HMPP3I",185,0)
 Q
"RTN","HMPP3I",186,0)
CVTSEL ; resend all patient selection objects
"RTN","HMPP3I",187,0)
 N HMPIEN
"RTN","HMPP3I",188,0)
 D BMES^XPDUTL("Updating patient select objects")
"RTN","HMPP3I",189,0)
 S HMPIEN=0 F  S HMPIEN=$O(^HMP(800000,HMPIEN)) Q:'HMPIEN  D
"RTN","HMPP3I",190,0)
 . Q:$P(^HMP(800000,HMPIEN,0),U,3)'=2  ; operational sync not completed
"RTN","HMPP3I",191,0)
 . N HMPSRV,BATCH,DOMAINS,HMPFERR
"RTN","HMPP3I",192,0)
 . S HMPSRV=$P(^HMP(800000,HMPIEN,0),U)
"RTN","HMPP3I",193,0)
 . S BATCH="HMPFX~"_HMPSRV_"~OPD"
"RTN","HMPP3I",194,0)
 . S DOMAINS(1)="pt-select"
"RTN","HMPP3I",195,0)
 . D QUINIT^HMPDJFSP(BATCH,"OPD",.DOMAINS)
"RTN","HMPP3I",196,0)
 . I $D(HMPFERR) D MES^XPDUTL("Error tasking pt-select objects for server "_HMPSRV)
"RTN","HMPP3I",197,0)
 Q
"RTN","HMPP3I",198,0)
PARPID ; Loop thru HMP PARAMETERS and switch ICN to qualified DFN
"RTN","HMPP3I",199,0)
 N PAR,ENT,UID,HMPWP,HMPERR,I,HMPSYS
"RTN","HMPP3I",200,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPP3I",201,0)
 S PAR=$O(^XTV(8989.51,"B","HMP PARAMETERS","")) Q:PAR'>0
"RTN","HMPP3I",202,0)
 S ENT="" F  S ENT=$O(^XTV(8989.5,"AC",PAR,ENT)) Q:ENT=""  D
"RTN","HMPP3I",203,0)
 . S UID="" F  S UID=$O(^XTV(8989.5,"AC",PAR,ENT,UID)) Q:UID=""  D  ;INST=UID
"RTN","HMPP3I",204,0)
 . . I $P(UID,":",6,7)'="HMP USER PREF:0" Q
"RTN","HMPP3I",205,0)
 . . N HMPWP,HMPERR,JSON,OBJ,ERR,DFN,RSLT
"RTN","HMPP3I",206,0)
 . . D GETWP^XPAR(.HMPWP,ENT,PAR,UID,.HMPERR)
"RTN","HMPP3I",207,0)
 . . I +HMPERR D WRERR(UID,$P(HMPERR,U,2,99)) Q
"RTN","HMPP3I",208,0)
 . . I $D(HMPWP)<10 Q                         ; no JSON found
"RTN","HMPP3I",209,0)
 . . S I=0 F  S I=$O(HMPWP(I)) Q:'I  S JSON(I)=HMPWP(I,0)
"RTN","HMPP3I",210,0)
 . . D DECODE^HMPJSON("JSON","OBJ","ERR")
"RTN","HMPP3I",211,0)
 . . I $D(ERR) D WRERR(UID,"Error decoding JSON") Q
"RTN","HMPP3I",212,0)
 . . I '$L($G(OBJ("cpe.context.patient"))) Q  ; nothing there
"RTN","HMPP3I",213,0)
 . . I OBJ("cpe.context.patient")[";" Q       ; already DFN
"RTN","HMPP3I",214,0)
 . . S DFN=$$GETDFN^MPIF001(OBJ("cpe.context.patient"))
"RTN","HMPP3I",215,0)
 . . I DFN<1 D WRERR(UID,"Error converting ICN: "_$P(DFN,U,2)) Q
"RTN","HMPP3I",216,0)
 . . S OBJ("cpe.context.patient")=HMPSYS_";"_DFN
"RTN","HMPP3I",217,0)
 . . K JSON
"RTN","HMPP3I",218,0)
 . . D ENCODE^HMPJSON("OBJ","JSON","ERR")
"RTN","HMPP3I",219,0)
 . . I $D(ERR) D WRERR(UID,"Error encoding JSON") Q
"RTN","HMPP3I",220,0)
 . . D PUTBYUID^HMPPARAM(.RSLT,UID,.JSON)
"RTN","HMPP3I",221,0)
 Q
"RTN","HMPP3I",222,0)
WRERR(UID,MSG) ; Write out error (from post-init in KIDS build)
"RTN","HMPP3I",223,0)
 D MES^XPDUTL("Error: "_MSG_" for UID "_UID)
"RTN","HMPP3I",224,0)
 Q
"RTN","HMPP3I",225,0)
 ;
"RTN","HMPP3I",226,0)
SETPARMS ; -- set various XPAR parameter values      US7724
"RTN","HMPP3I",227,0)
 ; 
"RTN","HMPP3I",228,0)
 ; -- add/edit latest domain object average size in bytes
"RTN","HMPP3I",229,0)
 D BMES^XPDUTL(" Adding domain object average sizes to HMP DOMAIN SIZES parameter...")
"RTN","HMPP3I",230,0)
 D PTADD
"RTN","HMPP3I",231,0)
 D ODCADD
"RTN","HMPP3I",232,0)
 ;
"RTN","HMPP3I",233,0)
 ; -- set to 100 megabytes if not currently defined
"RTN","HMPP3I",234,0)
 I $$GET^XPAR("SYS","HMP EXTRACT DISK SIZE LIMIT",1,"Q")="" D
"RTN","HMPP3I",235,0)
 . D EN^XPAR("SYS","HMP EXTRACT DISK SIZE LIMIT",1,100)
"RTN","HMPP3I",236,0)
 ;
"RTN","HMPP3I",237,0)
 ; -- set to 10 seconds if not currently defined
"RTN","HMPP3I",238,0)
 I $$GET^XPAR("SYS","HMP EXTRACT TASK REQUEUE SECS",1,"Q")="" D
"RTN","HMPP3I",239,0)
 . D EN^XPAR("SYS","HMP EXTRACT TASK REQUEUE SECS",1,10)
"RTN","HMPP3I",240,0)
 Q
"RTN","HMPP3I",241,0)
 ;
"RTN","HMPP3I",242,0)
PTADD ; -- add patient domain average sizes
"RTN","HMPP3I",243,0)
 N I,X,DOMAIN,SIZE,ERR
"RTN","HMPP3I",244,0)
 S I=0 F  S I=I+1,X=$P($T(PTDOM+I),";;",2) Q:X="zzzzz"  D
"RTN","HMPP3I",245,0)
 . S DOMAIN=$P(X,";",1),SIZE=$P(X,";",2)
"RTN","HMPP3I",246,0)
 . D PUT^XPAR("PKG","HMP DOMAIN SIZES",DOMAIN,SIZE,.ERR)
"RTN","HMPP3I",247,0)
 . I $G(ERR) D BMES^XPDUTL("Error: "_ERR)
"RTN","HMPP3I",248,0)
 D MES^XPDUTL("   o  patient domain sizes added")
"RTN","HMPP3I",249,0)
 Q
"RTN","HMPP3I",250,0)
 ;
"RTN","HMPP3I",251,0)
ODCADD ; -- add OPD domain average sizes
"RTN","HMPP3I",252,0)
 N I,X,DOMAIN,SIZE,ERR
"RTN","HMPP3I",253,0)
 S I=0 F  S I=I+1,X=$P($T(ODCDOM+I),";;",2) Q:X="zzzzz"  D
"RTN","HMPP3I",254,0)
 . S DOMAIN=$P(X,";",1),SIZE=$P(X,";",2)
"RTN","HMPP3I",255,0)
 . D PUT^XPAR("PKG","HMP DOMAIN SIZES",DOMAIN,SIZE,.ERR)
"RTN","HMPP3I",256,0)
 . I $G(ERR) D BMES^XPDUTL("Error: "_ERR)
"RTN","HMPP3I",257,0)
 D MES^XPDUTL("   o  operational domain sizes added")
"RTN","HMPP3I",258,0)
 Q
"RTN","HMPP3I",259,0)
 ;
"RTN","HMPP3I",260,0)
MENUADD  ;BL;Post processor to add option HMP XU EVENTS to Option XU USER ADD
"RTN","HMPP3I",261,0)
 N XUMENU,HMPMENU,FDA,QFLG,X
"RTN","HMPP3I",262,0)
 ;Get IEN of XU USER ADD
"RTN","HMPP3I",263,0)
 S XUMENU="",XUMENU=$O(^DIC(19,"B","XU USER ADD",XUMENU))
"RTN","HMPP3I",264,0)
 Q:XUMENU=""
"RTN","HMPP3I",265,0)
 ;Get IEN of HMP XU EVENTS
"RTN","HMPP3I",266,0)
 S HMPMENU="",HMPMENU=$O(^DIC(19,"B","HMP XU EVENTS",HMPMENU))
"RTN","HMPP3I",267,0)
 Q:HMPMENU=""
"RTN","HMPP3I",268,0)
 ;Check if already installed
"RTN","HMPP3I",269,0)
 S X=0,QFLG=0
"RTN","HMPP3I",270,0)
 F  S X=$O(^DIC(19,XUMENU,10,X)) Q:X'=+X  D
"RTN","HMPP3I",271,0)
 . I $P(^DIC(19,XUMENU,10,X,0),"^",1)=HMPMENU S QFLG=1
"RTN","HMPP3I",272,0)
 Q:QFLG  ;If HMPMENU found silently quit
"RTN","HMPP3I",273,0)
 ;Now insert new menu item HMPMENU, into 
"RTN","HMPP3I",274,0)
 ; file 19.01  field .01
"RTN","HMPP3I",275,0)
 S FDA(1,19.01,"+1,"_XUMENU_",",.01)=HMPMENU
"RTN","HMPP3I",276,0)
 D UPDATE^DIE("","FDA(1)","","HMPERR")
"RTN","HMPP3I",277,0)
 I $D(HMPERR) D  Q
"RTN","HMPP3I",278,0)
 .D EN^DDIOL("XU USER ADD menu not updated, UPDATE^DIE returned the following error message.")
"RTN","HMPP3I",279,0)
 .S IC="HMPERR"
"RTN","HMPP3I",280,0)
 .F  S IC=$Q(@IC) Q:IC=""  W !,IC,"=",@IC
"RTN","HMPP3I",281,0)
 .D EN^DDIOL("Examine the above error message for the reason.") Q
"RTN","HMPP3I",282,0)
 ;
"RTN","HMPP3I",283,0)
PTDOM ; patient domains
"RTN","HMPP3I",284,0)
 ;;allergy;690
"RTN","HMPP3I",285,0)
 ;;appointment;742
"RTN","HMPP3I",286,0)
 ;;auxiliary;749
"RTN","HMPP3I",287,0)
 ;;consult;545
"RTN","HMPP3I",288,0)
 ;;cpt;487
"RTN","HMPP3I",289,0)
 ;;diagnosis;331
"RTN","HMPP3I",290,0)
 ;;document;3993
"RTN","HMPP3I",291,0)
 ;;education;415
"RTN","HMPP3I",292,0)
 ;;exam;338
"RTN","HMPP3I",293,0)
 ;;factor;550
"RTN","HMPP3I",294,0)
 ;;image;1038
"RTN","HMPP3I",295,0)
 ;;immunization;550
"RTN","HMPP3I",296,0)
 ;;lab;1231
"RTN","HMPP3I",297,0)
 ;;med;5340
"RTN","HMPP3I",298,0)
 ;;mh;4827
"RTN","HMPP3I",299,0)
 ;;obs;754
"RTN","HMPP3I",300,0)
 ;;order;999
"RTN","HMPP3I",301,0)
 ;;patient;3294
"RTN","HMPP3I",302,0)
 ;;pov;450
"RTN","HMPP3I",303,0)
 ;;problem;756
"RTN","HMPP3I",304,0)
 ;;procedure;278
"RTN","HMPP3I",305,0)
 ;;ptf;397
"RTN","HMPP3I",306,0)
 ;;roadtrip;370
"RTN","HMPP3I",307,0)
 ;;skin;388
"RTN","HMPP3I",308,0)
 ;;surgery;852
"RTN","HMPP3I",309,0)
 ;;task;401
"RTN","HMPP3I",310,0)
 ;;treatment;1071
"RTN","HMPP3I",311,0)
 ;;visit;911
"RTN","HMPP3I",312,0)
 ;;vital;462
"RTN","HMPP3I",313,0)
 ;;zzzzz
"RTN","HMPP3I",314,0)
 ;
"RTN","HMPP3I",315,0)
ODCDOM ; operational domains
"RTN","HMPP3I",316,0)
 ;;asu-class;226
"RTN","HMPP3I",317,0)
 ;;asu-rule;509
"RTN","HMPP3I",318,0)
 ;;category;117
"RTN","HMPP3I",319,0)
 ;;charttab;991
"RTN","HMPP3I",320,0)
 ;;doc-def;381
"RTN","HMPP3I",321,0)
 ;;labgroup;737
"RTN","HMPP3I",322,0)
 ;;labpanel;267
"RTN","HMPP3I",323,0)
 ;;location;278
"RTN","HMPP3I",324,0)
 ;;orderable;773
"RTN","HMPP3I",325,0)
 ;;page;901
"RTN","HMPP3I",326,0)
 ;;personphoto;15445
"RTN","HMPP3I",327,0)
 ;;pointofcare;241
"RTN","HMPP3I",328,0)
 ;;pt-select;419
"RTN","HMPP3I",329,0)
 ;;qo;97
"RTN","HMPP3I",330,0)
 ;;roster;3862
"RTN","HMPP3I",331,0)
 ;;route;157
"RTN","HMPP3I",332,0)
 ;;schedule;116
"RTN","HMPP3I",333,0)
 ;;syncerror;18323
"RTN","HMPP3I",334,0)
 ;;syncstatus;1207
"RTN","HMPP3I",335,0)
 ;;team;812
"RTN","HMPP3I",336,0)
 ;;teamposition;533
"RTN","HMPP3I",337,0)
 ;;user;639
"RTN","HMPP3I",338,0)
 ;;usertabprefs;3029
"RTN","HMPP3I",339,0)
 ;;viewdefdef;5742
"RTN","HMPP3I",340,0)
 ;;viewdefdefcoldefconfigtemplate;440
"RTN","HMPP3I",341,0)
 ;;HMPupdate;128
"RTN","HMPP3I",342,0)
 ;;zzzzz
"RTN","HMPPANEL")
1^179
"RTN","HMPPARAM")
0^106^B16541840
"RTN","HMPPARAM",1,0)
HMPPARAM ;SLC/AGP,ASMR/RRB - Parameter routine. ; 8/16/12 7:09pm
"RTN","HMPPARAM",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPPARAM",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPPARAM",4,0)
 ;
"RTN","HMPPARAM",5,0)
 ; DE2818 - SQA findings. Newed HMPAR in GETPARAM +1.  RRB - 10/27/2015
"RTN","HMPPARAM",6,0)
 ; External References          DBIA#
"RTN","HMPPARAM",7,0)
 ; -------------------          -----
"RTN","HMPPARAM",8,0)
 ; ^XTV(8989.51                  2992
"RTN","HMPPARAM",9,0)
 ;
"RTN","HMPPARAM",10,0)
 Q
"RTN","HMPPARAM",11,0)
 ;
"RTN","HMPPARAM",12,0)
BLDENT(UID,ENTITY) ;
"RTN","HMPPARAM",13,0)
 ;urn:va:param:F484:1120:HMP USER PREF
"RTN","HMPPARAM",14,0)
 ;urn:va:param:F484:1120:HMP ROSTER PREF:13
"RTN","HMPPARAM",15,0)
 ;urn:va:param:F484:SYS:HMP USER PREF
"RTN","HMPPARAM",16,0)
 S ENTITY("uid")=UID
"RTN","HMPPARAM",17,0)
 I +$P(UID,":",5)>0 D  Q
"RTN","HMPPARAM",18,0)
 .S ENTITY("entity")="USR"
"RTN","HMPPARAM",19,0)
 .S ENTITY("entityId")=$P(UID,":",5)
"RTN","HMPPARAM",20,0)
 S ENTITY("entity")="SYS"
"RTN","HMPPARAM",21,0)
 Q
"RTN","HMPPARAM",22,0)
 ;
"RTN","HMPPARAM",23,0)
BUILDUID(VALUES,TYPE,ID) ;
"RTN","HMPPARAM",24,0)
 N DOMAIN
"RTN","HMPPARAM",25,0)
 S DOMAIN=$$BASE^XLFUTL($$CRC16^XLFCRC($$KSP^XUPARAM("WHERE")),10,16)
"RTN","HMPPARAM",26,0)
 S VALUES("uid")="urn:va:"_TYPE_":"_DOMAIN_":"_ID
"RTN","HMPPARAM",27,0)
 Q
"RTN","HMPPARAM",28,0)
 ;
"RTN","HMPPARAM",29,0)
DELPARAM(RESULT,UID) ;
"RTN","HMPPARAM",30,0)
 N ARRAY,ENT,ENTITY,ENTVALUE,ERR,STR,HMPERR
"RTN","HMPPARAM",31,0)
 D BLDENT(UID,.ARRAY)
"RTN","HMPPARAM",32,0)
 ;delete old parameter
"RTN","HMPPARAM",33,0)
 S ENTITY=ARRAY("entity")
"RTN","HMPPARAM",34,0)
 S ENTVALUE=ARRAY("entityId")
"RTN","HMPPARAM",35,0)
 S ENT=$S($G(ENTVALUE)>0:ENTITY_".`"_ENTVALUE,1:ENTITY)
"RTN","HMPPARAM",36,0)
 I $G(ARRAY("uid"))="" Q
"RTN","HMPPARAM",37,0)
 I $G(ENT)="" Q
"RTN","HMPPARAM",38,0)
 D DEL^XPAR(ENT,"HMP PARAMETERS",ARRAY("uid"),.HMPERR)
"RTN","HMPPARAM",39,0)
 Q
"RTN","HMPPARAM",40,0)
 ;
"RTN","HMPPARAM",41,0)
GETALPAR(JSONRES,ENTITY,ENTVALUE,RETVALUE) ;
"RTN","HMPPARAM",42,0)
 N CNT,DECODE,ENT,GETVAL,INST,PARAM,RESULT,HMPERR,HMPLIST
"RTN","HMPPARAM",43,0)
 S ENT=$S($G(ENTVALUE)'="":ENTITY_".`"_ENTVALUE,1:ENTITY)
"RTN","HMPPARAM",44,0)
 D GETLST^XPAR(.HMPLIST,ENT,"HMP PARAMETERS","I")
"RTN","HMPPARAM",45,0)
 I HMPLIST=0 Q
"RTN","HMPPARAM",46,0)
 S GETVAL=$S(RETVALUE="true":1,1:0)
"RTN","HMPPARAM",47,0)
 I GETVAL=0 D   Q
"RTN","HMPPARAM",48,0)
 .S CNT=0,INST="" F  S INST=$O(HMPLIST(INST)) Q:INST=""  S JSONRES(CNT)=INST,CNT=CNT+1
"RTN","HMPPARAM",49,0)
 S CNT=0,INST="" F  S INST=$O(HMPLIST(INST)) Q:INST=""  D
"RTN","HMPPARAM",50,0)
 .S CNT=CNT+1
"RTN","HMPPARAM",51,0)
 .S RESULT("params",CNT,"uid")=INST
"RTN","HMPPARAM",52,0)
 .D GETPARAM(.PARAM,"HMP PARAMETERS",ENTITY,ENTVALUE,INST)
"RTN","HMPPARAM",53,0)
 .I '$D(PARAM) Q
"RTN","HMPPARAM",54,0)
 .M RESULT("params",CNT,"value",":")=PARAM
"RTN","HMPPARAM",55,0)
 .K PARAM
"RTN","HMPPARAM",56,0)
 I '$D(RESULT) Q ""
"RTN","HMPPARAM",57,0)
 S RESULT("success")="true"
"RTN","HMPPARAM",58,0)
 D ENCODE^HMPJSON("RESULT","JSONRES","HMPERR")
"RTN","HMPPARAM",59,0)
 I $D(HMPERR) K JSONRES S TXT(1)="Problem encoding results to json format." D SETERROR(.RESULT,.HMPERR,.TXT,.JSONRES) Q
"RTN","HMPPARAM",60,0)
 Q
"RTN","HMPPARAM",61,0)
 ;
"RTN","HMPPARAM",62,0)
GETPARAM(RESULT,NAME,ENTITY,ENTVALUE,INST) ; Get value for a param
"RTN","HMPPARAM",63,0)
 N CNT,ENT,FORMAT,IEN,HMPAR,HMPPAR,HMPERR
"RTN","HMPPARAM",64,0)
 ;S IEN=$O(^XTV(8989.51,"B",NAME,"")) Q:IEN'>0
"RTN","HMPPARAM",65,0)
 S FORMAT="I"
"RTN","HMPPARAM",66,0)
 ;D BLDLST^XPAREDIT(.HMPPAR,IEN
"RTN","HMPPARAM",67,0)
 S ENT=$S($G(ENTVALUE)'="":ENTITY_".`"_ENTVALUE,1:ENTITY)
"RTN","HMPPARAM",68,0)
 D GETWP^XPAR(.HMPAR,ENT,NAME,INST,.HMPERR)
"RTN","HMPPARAM",69,0)
 S CNT=0 F  S CNT=$O(HMPAR(CNT)) Q:CNT'>0  D
"RTN","HMPPARAM",70,0)
 .S RESULT(CNT)=HMPAR(CNT,0)
"RTN","HMPPARAM",71,0)
 Q
"RTN","HMPPARAM",72,0)
 ;
"RTN","HMPPARAM",73,0)
GETBYUID(RESULT,UID) ;
"RTN","HMPPARAM",74,0)
 N ENTITY
"RTN","HMPPARAM",75,0)
 D BLDENT(UID,.ENTITY)
"RTN","HMPPARAM",76,0)
 D GETPARAM(.RESULT,"HMP PARAMETERS",$G(ENTITY("entity")),$G(ENTITY("entityId")),$G(ENTITY("uid")))
"RTN","HMPPARAM",77,0)
 ;I $D(RESULT)<10 S RESULT(0)="{}"
"RTN","HMPPARAM",78,0)
 Q
"RTN","HMPPARAM",79,0)
 ;
"RTN","HMPPARAM",80,0)
PARSEJSN(VALUE,ARRAY,ERR) ;
"RTN","HMPPARAM",81,0)
 N ERROR,JSON,TXT
"RTN","HMPPARAM",82,0)
 D DECODE^HMPJSON("VALUE","ARRAY","ERROR")
"RTN","HMPPARAM",83,0)
 I $D(ERR) K ARRAY S TXT(1)="Problem decoding json value." D SETERROR(.VALUE,.ERROR,.TXT,.ERR) Q 0
"RTN","HMPPARAM",84,0)
 Q 1
"RTN","HMPPARAM",85,0)
 ;
"RTN","HMPPARAM",86,0)
PUTPARAM(RESULT,VALUE,ENTARR) ;
"RTN","HMPPARAM",87,0)
 N CNT,ENT,ENTITY,ENTVALUE,ERR,STR,HMPERR,X
"RTN","HMPPARAM",88,0)
 I $D(ENTARR)<10 I $$PARSEJSN(.VALUE,.ENTARR,.ERR)=0 M RESULT=ERR Q
"RTN","HMPPARAM",89,0)
 ;delete old parameter
"RTN","HMPPARAM",90,0)
 S ENTITY=ENTARR("entity")
"RTN","HMPPARAM",91,0)
 S ENTVALUE=ENTARR("entityId")
"RTN","HMPPARAM",92,0)
 S ENT=$S($G(ENTVALUE)>0:ENTITY_".`"_ENTVALUE,1:ENTITY)
"RTN","HMPPARAM",93,0)
 D DEL^XPAR(ENT,"HMP PARAMETERS",ENTARR("uid"),.HMPERR)
"RTN","HMPPARAM",94,0)
 S CNT=$O(VALUE(""),-1) I CNT="" S STR(1,0)=VALUE
"RTN","HMPPARAM",95,0)
 I CNT>0 F X=0:1:CNT S STR(X+1,0)=VALUE(X)
"RTN","HMPPARAM",96,0)
 D PUT^XPAR(ENT,"HMP PARAMETERS",ENTARR("uid"),.STR,.HMPERR)
"RTN","HMPPARAM",97,0)
 S RESULT(0)="{""success"":""true""}"
"RTN","HMPPARAM",98,0)
 Q
"RTN","HMPPARAM",99,0)
 ;
"RTN","HMPPARAM",100,0)
PUTBYUID(RESULT,UID,VALUE) ;
"RTN","HMPPARAM",101,0)
 N ENTITY
"RTN","HMPPARAM",102,0)
 D BLDENT(UID,.ENTITY)
"RTN","HMPPARAM",103,0)
 D PUTPARAM(.RESULT,.VALUE,.ENTITY)
"RTN","HMPPARAM",104,0)
 Q
"RTN","HMPPARAM",105,0)
 ;
"RTN","HMPPARAM",106,0)
SETERROR(INPDATA,ERRORMSG,TXT,OUTPUT) ;
"RTN","HMPPARAM",107,0)
 N ERRARR
"RTN","HMPPARAM",108,0)
 D SETERROR^HMPUTILS(.ERRARR,.ERRORMSG,.TXT,.INPDATA)
"RTN","HMPPARAM",109,0)
 D ENCODE^HMPJSON("ERRARR","OUTPUT","ERROR")
"RTN","HMPPARAM",110,0)
 Q
"RTN","HMPPATS")
0^107^B3116859
"RTN","HMPPATS",1,0)
HMPPATS ;SLC/MKB,ASMR/RRB,SRG - Patient Management Utilities ;Nov 16, 2015 19:11:53
"RTN","HMPPATS",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPPATS",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPPATS",4,0)
 ;
"RTN","HMPPATS",5,0)
 ; External References          DBIA#
"RTN","HMPPATS",6,0)
 ; -------------------          -----
"RTN","HMPPATS",7,0)
 ; ^SC                          10040
"RTN","HMPPATS",8,0)
 ; DICN                         10009
"RTN","HMPPATS",9,0)
 ; SDAMA301                      4433
"RTN","HMPPATS",10,0)
 ; XLFDT                        10103
"RTN","HMPPATS",11,0)
 ; XPAR                          2263
"RTN","HMPPATS",12,0)
 Q
"RTN","HMPPATS",13,0)
 ;
"RTN","HMPPATS",14,0)
APPT ; -- Return patients w/appointments tomorrow
"RTN","HMPPATS",15,0)
 ; OPT = HMP APPOINTMENTS
"RTN","HMPPATS",16,0)
 N NOW,NOW1,HMPX,HMPL,HMPN,DFN,DA,TOKEN,NEW,X
"RTN","HMPPATS",17,0)
 S NOW=$$NOW^XLFDT,NOW1=$$FMADD^XLFDT(NOW,1)
"RTN","HMPPATS",18,0)
 S HMPX(1)=NOW_";"_NOW1 ;next 24hours
"RTN","HMPPATS",19,0)
 S HMPX("FLDS")=1,HMPX("SORT")="P",HMPX(3)="R;I;NT"
"RTN","HMPPATS",20,0)
 ; ck parameter for desired location(s): HMPX(2)="loc1;loc2;...;loc#"
"RTN","HMPPATS",21,0)
 D GETLST^XPAR(.HMPL,"ALL","HMP LOCATIONS") I +$G(HMPL) D
"RTN","HMPPATS",22,0)
 . ;DE2818, ^SC reference - ICR 10040, changed loop below to begin at 1
"RTN","HMPPATS",23,0)
 . F I=1:1:+HMPL S X=+$G(HMPL(I)) S:$D(^SC(X,0)) HMPX(2)=HMPX(2)_";"_X
"RTN","HMPPATS",24,0)
 S HMPN=$$SDAPI^SDAMA301(.HMPX) Q:HMPN<1
"RTN","HMPPATS",25,0)
 S DFN=0 F  S DFN=$O(^TMP($J,"SDAMA301",DFN)) Q:DFN<1  D
"RTN","HMPPATS",26,0)
 . S DA=0 F  S DA=$O(^HMP(800000,DA)) Q:DA<1  I $P($G(^(DA,0)),U,2) D
"RTN","HMPPATS",27,0)
 .. Q:$D(^HMP(800000,"ADFN",DFN,DA))  ;already subscribed
"RTN","HMPPATS",28,0)
 .. S TOKEN=DA_"~"_NOW,NEW(TOKEN)=""
"RTN","HMPPATS",29,0)
 .. S ^XTMP("HMPX",TOKEN,DFN)=""
"RTN","HMPPATS",30,0)
 I $D(NEW) D SEND^HMPHTTP(.NEW) ;send poke to each URL with list TOKEN
"RTN","HMPPATS",31,0)
 Q
"RTN","HMPPATS",32,0)
 ;
"RTN","HMPPATS",33,0)
FIND(ID) ; -- Return ien of system ID in ^HMP
"RTN","HMPPATS",34,0)
 N DA,DO,DIC,X,Y
"RTN","HMPPATS",35,0)
 I $G(ID)="" Q 0                        ;error
"RTN","HMPPATS",36,0)
 S DA=+$O(^HMP(800000,"B",ID,0)) I DA<1 D  ;add
"RTN","HMPPATS",37,0)
 . S DIC="^HMP(800000,",DIC(0)="F",X=ID
"RTN","HMPPATS",38,0)
 . D FILE^DICN S DA=+Y
"RTN","HMPPATS",39,0)
 Q DA
"RTN","HMPPATS",40,0)
 ;
"RTN","HMPPDL")
0^139^B23790480
"RTN","HMPPDL",1,0)
HMPPDL ;ASMR/PB - Get a users default patient list for HMP ; 07/31/2015
"RTN","HMPPDL",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Jul 31, 2015;Build 63
"RTN","HMPPDL",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPPDL",4,0)
 ;
"RTN","HMPPDL",5,0)
 ; External References      DBIA#
"RTN","HMPPDL",6,0)
 ; ------------------------------
"RTN","HMPPDL",7,0)
 ;  $$BROKER^XWBLID          2190
"RTN","HMPPDL",8,0)
 ;  $$GET^XPAR               2263
"RTN","HMPPDL",9,0)
 ;  CLINPTS2^ORQPTQ2         4207
"RTN","HMPPDL",10,0)
 ;  BYWARD^ORWPT             4904
"RTN","HMPPDL",11,0)
 ;  PROVPTS^ORQPTQ2          4207
"RTN","HMPPDL",12,0)
 ;  SPECPTS^ORQPTQ2          4207
"RTN","HMPPDL",13,0)
 ;  $$UP^XLFSTR             10104
"RTN","HMPPDL",14,0)
 ;  $$FMTE^XLDFT            10103
"RTN","HMPPDL",15,0)
 ;  $$GET1^DIQ               2056
"RTN","HMPPDL",16,0)
 ;
"RTN","HMPPDL",17,0)
 Q
"RTN","HMPPDL",18,0)
 ;
"RTN","HMPPDL",19,0)
DEFLIST(Y,DUZ) ; return current user's default patient list
"RTN","HMPPDL",20,0)
 I $$BROKER^XWBLIB S Y=$NA(^TMP("OR",$J,"PATIENTS")) ; GUI = global.  ICR 2190
"RTN","HMPPDL",21,0)
 I '$$BROKER^XWBLIB S ^TMP("OR",$J,"PATIENTS",0)=""  ;ICR 2190
"RTN","HMPPDL",22,0)
 Q:'$D(DUZ)  ;DUZ is required in order to get the list of patients for the user
"RTN","HMPPDL",23,0)
 N FROM,IEN,BEG,END,API,ORSRV,ORQDAT,ORQCNT,ORGUI
"RTN","HMPPDL",24,0)
 ;S ORSRV=$G(^VA(200,DUZ,5)) I +ORSRV>0 S ORSRV=$P(ORSRV,U) ; get the users Network Identifier for the user
"RTN","HMPPDL",25,0)
 S ORSRV=$$GET1^DIQ(200,DUZ_",",29,"I") ; get the users Network Identifier for the user  ICR 2056
"RTN","HMPPDL",26,0)
 S FROM=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT LIST SOURCE",1,"Q") ; gets the users default preference for patient list source. ICR 2263
"RTN","HMPPDL",27,0)
 ;FROM - T:Team/Personal List, W:Ward List, C:Clinic List, P:Provider List, S:Specialty List; M:Combination List.
"RTN","HMPPDL",28,0)
 ;FROM must be defined
"RTN","HMPPDL",29,0)
 Q:'$L($G(FROM))
"RTN","HMPPDL",30,0)
 I FROM="T" S IEN=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT TEAM",1,"Q") D:+$G(IEN)>0 TEAMPTS^ORQPTQ1(.Y,IEN)  ;returns the list of patients assigned to a team.  ICR 2263
"RTN","HMPPDL",31,0)
 I FROM="W" S IEN=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT WARD",1,"Q") D:+$G(IEN)>0 BYWARD^ORWPT(.Y,IEN)  ;returns the list of patients on a ward  ICR 4904 ICR 2263
"RTN","HMPPDL",32,0)
 I FROM="P" S IEN=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT PROVIDER",1,"Q") D:+$G(IEN)>0 PROVPTS^ORQPTQ2(.Y,IEN)  ;returns the list of patients assigned to a provider  ICR 4207 ICR 2263
"RTN","HMPPDL",33,0)
 I FROM="S" S IEN=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT SPECIALTY",1,"Q") D:+$G(IEN)>0 SPECPTS^ORQPTQ2(.Y,IEN)  ;returns the list of patients assigned to a specialty  ICR 4207 ICR 2263
"RTN","HMPPDL",34,0)
 I FROM="C" D
"RTN","HMPPDL",35,0)
 .S API="ORLP DEFAULT CLINIC "_$$UP^XLFSTR($$DOW^XLFDT(DT)),IEN=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),API,1,"Q") I +$G(IEN)>0 D  ;returns a list of patients for the clinic based on the user's default start and end dates ICR 2263, ICR 10104
"RTN","HMPPDL",36,0)
 ..S BEG=$$UP^XLFSTR($$GET^XPAR("USR^SRV.`"_+$G(ORSRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC START DATE",1,"E"))  ;returns the user's default start date ICR 2263,  ICR 10104
"RTN","HMPPDL",37,0)
 ..I BEG="T+0" S BEG=$$FMTE^XLFDT(DT,BEG)  ;ICR 10103
"RTN","HMPPDL",38,0)
 ..S END=$$UP^XLFSTR($$GET^XPAR("USR^SRV.`"_+$G(ORSRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC STOP DATE",1,"E"))  ;returns the user's default end date  ICR 2263,  ICR 10104
"RTN","HMPPDL",39,0)
 ..I END="T+0" S END=$$FMTE^XLFDT(DT,END)  ;ICR 10103
"RTN","HMPPDL",40,0)
 ..D CLINPTS2^ORQPTQ2(.Y,+$G(IEN),BEG,END) ;returns the patient list ICR 4207
"RTN","HMPPDL",41,0)
 ;The code below will pull a list of patients for the user based on the combinations of lists set up for the user in
"RTN","HMPPDL",42,0)
 ;OR(100.24, OE/RR PT SEL COMBO FILE. This file stores the users combinations use to pull a combined list of patients from multiple files. 
"RTN","HMPPDL",43,0)
 ;The COMBINATION ITEM multiple stores the file's IEN and the file root for the files that store the patient list.
"RTN","HMPPDL",44,0)
 ;The user can create lists from the WARD LOCATIONS (#42), NEW PERSON (#200), FACILITY TREATING SPECIALTY (#45.7), OE/RR LIST (#101.21) and the HOSPITAL LOCATION(#44)
"RTN","HMPPDL",45,0)
 ;or any combinations of these files. Each list is stored in a separate row in the COMBINATION ITEM multiple. The code
"RTN","HMPPDL",46,0)
 ;loops through this multiple and the pulls the lists based on the entries. 
"RTN","HMPPDL",47,0)
 I FROM="M" D
"RTN","HMPPDL",48,0)
 .;S IEN=$D(^OR(100.24,DUZ,0)) I +$G(IEN)>0 S IEN=DUZ D
"RTN","HMPPDL",49,0)
 .S IEN=$$GET1^DIQ(100.24,DUZ_",",.01,"I") I +$G(IEN)>0 S IEN=DUZ D   ;ICR 2056 
"RTN","HMPPDL",50,0)
 ..S BEG=$$UP^XLFSTR($$GET^XPAR("USR^SRV.`"_+$G(ORSRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC START DATE",1,"E"))  ;returns the user's default start date ICR 10104
"RTN","HMPPDL",51,0)
 ..I BEG="T+0" S BEG=$$FMTE^XLFDT(DT,BEG)
"RTN","HMPPDL",52,0)
 ..S END=$$UP^XLFSTR($$GET^XPAR("USR^SRV.`"_+$G(ORSRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC STOP DATE",1,"E"))  ;returns the user's default end date ICR 10104
"RTN","HMPPDL",53,0)
 ..I END="T+0" S END=$$FMTE^XLFDT(DT,END)
"RTN","HMPPDL",54,0)
 ..D COMBPTS^ORQPTQ6(0,+$G(IEN),BEG,END) ; first parameter "0"= GUI RPC call. Returns the lists patients for each entry in the COMBINATION ITEM multiple
"RTN","HMPPDL",55,0)
 I ($$BROKER^XWBLIB)&(FROM'="M") D  ; Combinations already written to global. ICR 2190
"RTN","HMPPDL",56,0)
 .S ORQDAT="",ORQCNT=0
"RTN","HMPPDL",57,0)
 .F  S ORQCNT=$O(Y(ORQCNT)) Q:ORQCNT=""  S ORQDAT=Y(ORQCNT) D
"RTN","HMPPDL",58,0)
 ..S ^TMP("OR",$J,"PATIENTS",ORQCNT,0)=ORQDAT
"RTN","HMPPDL",59,0)
 I ('$$BROKER^XWBLIB) S Y=FROM_";"_+$G(IEN)_";"_$G(BEG)_";"_$G(END) ;   ICR 2190
"RTN","HMPPDL",60,0)
 Q
"RTN","HMPPI")
1^180
"RTN","HMPPRODC")
1^181
"RTN","HMPPRXY2")
0^110^B16933808
"RTN","HMPPRXY2",1,0)
HMPPRXY2 ;ASMR/JCH,PB - Post-Install Routine to Create HMP User ; 02/01/16 11:56
"RTN","HMPPRXY2",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Feb 03, 2015;Build 63
"RTN","HMPPRXY2",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPPRXY2",4,0)
 ;
"RTN","HMPPRXY2",5,0)
 ;Jan 29, 2016 - PB added code to add the APPLICATION PROXY user class to the HMP,APPLILCATION PROXY proxy account
"RTN","HMPPRXY2",6,0)
 Q
"RTN","HMPPRXY2",7,0)
 ;
"RTN","HMPPRXY2",8,0)
POST ; Entry point for post install
"RTN","HMPPRXY2",9,0)
 D BMES^XPDUTL("  Starting post-install")
"RTN","HMPPRXY2",10,0)
 D ADDUSR
"RTN","HMPPRXY2",11,0)
 Q
"RTN","HMPPRXY2",12,0)
 ;
"RTN","HMPPRXY2",13,0)
ADDUSR() ; FileMan calls to add user, update fields, update sub-files
"RTN","HMPPRXY2",14,0)
 N DIC ; DIC(0) is required by the LAGYO code attached to NAME (#.01) field in NEW  PERSON (#200) file (see below)
"RTN","HMPPRXY2",15,0)
 ;  NEW PERSON (#200 file :          ^DD(200,.01,"LAYGO",1,0)="D LAYGO^XUA4A7"
"RTN","HMPPRXY2",16,0)
 ;  Routine XUA4A7 :        LAYGO    ;Called from ^DD(200,.01,"LAYGO",1,0)
"RTN","HMPPRXY2",17,0)
 ;                                   Q:DIC(0)'["E"
"RTN","HMPPRXY2",18,0)
 N FDA ; The name of the root of a VA FileMan Data Array, which describes the entries to add to the database.
"RTN","HMPPRXY2",19,0)
 N ERR ; Array containing error messages.
"RTN","HMPPRXY2",20,0)
 N HMPERTXT ; Array containing generic user message text indicating fields/files that were not updated
"RTN","HMPPRXY2",21,0)
 N USRIEN ; The Internal Entry Number (IEN) of the 
"RTN","HMPPRXY2",22,0)
 N FDAIEN ; The IEN of HMP,APPLICATION PROXY user found in the NEW PERSON (#200) file
"RTN","HMPPRXY2",23,0)
 N HMPERR ; The full reference to each ERR error node, including the array with subscripts and data (i.e., ERR("DIERR",1,"TEXT")="Error Message")
"RTN","HMPPRXY2",24,0)
 ;
"RTN","HMPPRXY2",25,0)
 ; Add new user to ^VA(200
"RTN","HMPPRXY2",26,0)
 S DIC(0)="" ; Define DIC(0) so DD(200,.01,"LAGYO" code doesn't blow up (LAYGO^XUA4A7)
"RTN","HMPPRXY2",27,0)
 S FDA(200,"?+1,",.01)="HMP,APPLICATION PROXY"
"RTN","HMPPRXY2",28,0)
 D UPDATE^DIE("E","FDA","FDAIEN","ERR")
"RTN","HMPPRXY2",29,0)
 ; Quit if user not added
"RTN","HMPPRXY2",30,0)
 S USRIEN=$G(FDAIEN(1))
"RTN","HMPPRXY2",31,0)
 I '$G(USRIEN) D  Q
"RTN","HMPPRXY2",32,0)
 .D BMES^XPDUTL("HMP,APPLICATION PROXY user not added")
"RTN","HMPPRXY2",33,0)
 .I $D(ERR) D ERROUT(.ERR)
"RTN","HMPPRXY2",34,0)
 ;
"RTN","HMPPRXY2",35,0)
 S HMPERTXT=$S($G(FDAIEN(1,0))="?":"User HMP,APPLICATION PROXY already on file.",$G(FDAIEN(1,0))="+":"User HMP,APPLICATION PROXY added",1:"")
"RTN","HMPPRXY2",36,0)
 D BMES^XPDUTL(HMPERTXT)
"RTN","HMPPRXY2",37,0)
 ;
"RTN","HMPPRXY2",38,0)
 ; Add fields for new user file entry
"RTN","HMPPRXY2",39,0)
 K FDA,ERR
"RTN","HMPPRXY2",40,0)
 S FDA(200,USRIEN_",",1)="PU"                ; Initials
"RTN","HMPPRXY2",41,0)
 S FDA(200,USRIEN_",",7.2)="Y"
"RTN","HMPPRXY2",42,0)
 S FDA(200,USRIEN_",",20.2)="HMPPROXY USER"  ; Signature Block
"RTN","HMPPRXY2",43,0)
 S FDA(200,USRIEN_",",101.01)="NO"           ; Restrict Patient Selection
"RTN","HMPPRXY2",44,0)
 S FDA(200,USRIEN_",",201)="XMUSER"             ; Primary Menu Option
"RTN","HMPPRXY2",45,0)
 D FILE^DIE("E","FDA","ERR")
"RTN","HMPPRXY2",46,0)
 ;
"RTN","HMPPRXY2",47,0)
 ;  display progress (Data is refiled each time post-install is run - updated message will display each time)
"RTN","HMPPRXY2",48,0)
 K HMPERTXT
"RTN","HMPPRXY2",49,0)
 S HMPERTXT(1)="The following HMP,APPLICATION PROXY fields were "_$S($D(ERR):"NOT updated: ",1:"updated: ")
"RTN","HMPPRXY2",50,0)
 S HMPERTXT(2)="INITIALS, ACCESS CODE, SIGNATURE BLOCK, RESTRICT PATIENT SELECTION, PRIMARY MENU OPTION"
"RTN","HMPPRXY2",51,0)
 D BMES^XPDUTL(.HMPERTXT)
"RTN","HMPPRXY2",52,0)
 ;
"RTN","HMPPRXY2",53,0)
 ; If failure, provide details
"RTN","HMPPRXY2",54,0)
 I $D(ERR) D ERROUT(.ERR)
"RTN","HMPPRXY2",55,0)
 ;
"RTN","HMPPRXY2",56,0)
 ; Update sub-files for new user file entry
"RTN","HMPPRXY2",57,0)
 K FDA,ERR
"RTN","HMPPRXY2",58,0)
 S FDA(200.051,"?+1,"_USRIEN_",",.01)="HMP ADMIN"
"RTN","HMPPRXY2",59,0)
 S FDA(200.051,"?+2,"_USRIEN_",",.01)="PROVIDER"
"RTN","HMPPRXY2",60,0)
 S FDA(200.010113,"?+3,"_USRIEN_",",.01)="COR"
"RTN","HMPPRXY2",61,0)
 S FDA(200.03,"?+5,"_USRIEN_",",.01)="HMP UI CONTEXT"
"RTN","HMPPRXY2",62,0)
 S FDA(200.03,"?+6,"_USRIEN_",",.01)="HMP SYNCHRONIZATION CONTEXT"
"RTN","HMPPRXY2",63,0)
 D UPDATE^DIE("E","FDA",,"ERR")
"RTN","HMPPRXY2",64,0)
 ;
"RTN","HMPPRXY2",65,0)
 ; It's an all or nothing transaction - display progress (Data is refiled each time post-install is run - updated message will display each time)
"RTN","HMPPRXY2",66,0)
 K HMPERTXT
"RTN","HMPPRXY2",67,0)
 S HMPERTXT(1)="The following sub-files for user HMP,APPLICATION PROXY were "_$S($D(ERR):"NOT updated: ",1:"updated: ")
"RTN","HMPPRXY2",68,0)
 S HMPERTXT(2)="  KEYS, CPRS TAB, SECONDARY MENU OPTIONS"
"RTN","HMPPRXY2",69,0)
 D BMES^XPDUTL(.HMPERTXT)
"RTN","HMPPRXY2",70,0)
 ; 
"RTN","HMPPRXY2",71,0)
 ; If failure, provide details
"RTN","HMPPRXY2",72,0)
 I $D(ERR) D ERROUT(.ERR)
"RTN","HMPPRXY2",73,0)
 ;
"RTN","HMPPRXY2",74,0)
 ;JAN 29, 2016 - PB - Add User Class, APPLICATION PROXY to the HMP,APPLICATION PROXY account
"RTN","HMPPRXY2",75,0)
 ;get pointers for classes in file 201
"RTN","HMPPRXY2",76,0)
 K FDA,ERR
"RTN","HMPPRXY2",77,0)
 S FDA(200.07,"?+1,"_USRIEN_",",.01)="APPLICATION PROXY"
"RTN","HMPPRXY2",78,0)
 S FDA(200.07,"?+1,"_USRIEN_",",2)="1"
"RTN","HMPPRXY2",79,0)
 D UPDATE^DIE("E","FDA",,"ERR")
"RTN","HMPPRXY2",80,0)
 ;if user class, APPLICATION PROXY is not added notify users
"RTN","HMPPRXY2",81,0)
 K HMPERTXT
"RTN","HMPPRXY2",82,0)
 S HMPERTXT(1)="The following sub-files for user HMP,APPLICATION PROXY were "_$S($D(ERR):"NOT updated: ",1:"updated: ")
"RTN","HMPPRXY2",83,0)
 S HMPERTXT(2)="  User Class - APPLICATION PROXY"
"RTN","HMPPRXY2",84,0)
 D BMES^XPDUTL(.HMPERTXT)
"RTN","HMPPRXY2",85,0)
 Q
"RTN","HMPPRXY2",86,0)
 ;end changes to add user classes to the HMP,APPLICATION PROXY proxy user account.
"RTN","HMPPRXY2",87,0)
 ;
"RTN","HMPPRXY2",88,0)
ERROUT(ERR) ; Output ERR array
"RTN","HMPPRXY2",89,0)
 D BMES^XPDUTL("Error Details:")
"RTN","HMPPRXY2",90,0)
 S HMPERR="ERR(""DIERR"")" F  S HMPERR=$Q(@HMPERR) Q:HMPERR=""  D MES^XPDUTL(HMPERR_"="_@HMPERR)
"RTN","HMPPRXY2",91,0)
 Q
"RTN","HMPPTDEM")
0^111^B12665908
"RTN","HMPPTDEM",1,0)
HMPPTDEM  ;ASMR/EJK,JD - File Patient Demographic Information passed via RPC ; 09/16/2014
"RTN","HMPPTDEM",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Oct 10, 2014;Build 63
"RTN","HMPPTDEM",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPPTDEM",4,0)
 ;
"RTN","HMPPTDEM",5,0)
 ; RPC = HMP WRITEBACK PT DEM
"RTN","HMPPTDEM",6,0)
 ;
"RTN","HMPPTDEM",7,0)
 ; *** NOTES ***
"RTN","HMPPTDEM",8,0)
 ; Return variable must be an ARRAY
"RTN","HMPPTDEM",9,0)
 ; A success MUST be sent as a 1
"RTN","HMPPTDEM",10,0)
 ; A failure may take any form
"RTN","HMPPTDEM",11,0)
 ; *************
"RTN","HMPPTDEM",12,0)
 ;
"RTN","HMPPTDEM",13,0)
 Q  ;Must come in at a tag.
"RTN","HMPPTDEM",14,0)
 ;
"RTN","HMPPTDEM",15,0)
FILE(RSP,HMPDEM) ;File Patient Demographic information.
"RTN","HMPPTDEM",16,0)
 ;Inbound data layout:
"RTN","HMPPTDEM",17,0)
 ; "^" delimited
"RTN","HMPPTDEM",18,0)
 ; Piece 1: DFN
"RTN","HMPPTDEM",19,0)
 ; Piece 2: Home Phone Number - ^DD(2,.131 - ^DPT(DFN,.13) piece 1
"RTN","HMPPTDEM",20,0)
 ; Piece 3: Cell Phone Number - ^DD(2,.134 - ^DPT(DFN,.13) piece 4
"RTN","HMPPTDEM",21,0)
 ; Piece 4: Work Phone Number - ^DD(2,.132 - ^DPT(DFN,.13) piece 2
"RTN","HMPPTDEM",22,0)
 ; Piece 5: Emergency Phone Number - ^DD(2,.339 - ^DPT(DFN,.33) piece 9
"RTN","HMPPTDEM",23,0)
 ; Piece 6: NOK Phone Number - ^DD(2,.219 - ^DPT(DFN,.21) piece 9
"RTN","HMPPTDEM",24,0)
 ;
"RTN","HMPPTDEM",25,0)
 ; If a piece contains -1, it means DELETE it
"RTN","HMPPTDEM",26,0)
 ; If a piece is null, it means LEAVE it ALONE
"RTN","HMPPTDEM",27,0)
 ; If a piece is not -1 and not null, it means UPDATE it
"RTN","HMPPTDEM",28,0)
 ; 
"RTN","HMPPTDEM",29,0)
 ;D BEFORE  ; testing ONLY
"RTN","HMPPTDEM",30,0)
 D PROC
"RTN","HMPPTDEM",31,0)
 ;D AFTER  ; testing ONLY
"RTN","HMPPTDEM",32,0)
 Q
"RTN","HMPPTDEM",33,0)
 ;
"RTN","HMPPTDEM",34,0)
PROC ;
"RTN","HMPPTDEM",35,0)
 N HMPDFN,HMPHPN,HMPCPN,HMPWPN,HMPEPN,HMPNPN,RSPCNT
"RTN","HMPPTDEM",36,0)
 N HMPER,HMPX
"RTN","HMPPTDEM",37,0)
 K HMPX
"RTN","HMPPTDEM",38,0)
 S RSPCNT=0,HMPER=""
"RTN","HMPPTDEM",39,0)
 S HMPDFN=$P(HMPDEM,"^",1)
"RTN","HMPPTDEM",40,0)
 S HMPHPN=$P(HMPDEM,"^",2)
"RTN","HMPPTDEM",41,0)
 S HMPCPN=$P(HMPDEM,"^",3)
"RTN","HMPPTDEM",42,0)
 S HMPWPN=$P(HMPDEM,"^",4)
"RTN","HMPPTDEM",43,0)
 S HMPEPN=$P(HMPDEM,"^",5)
"RTN","HMPPTDEM",44,0)
 S HMPNPN=$P(HMPDEM,"^",6)
"RTN","HMPPTDEM",45,0)
 S DA=HMPDFN
"RTN","HMPPTDEM",46,0)
 K RSP
"RTN","HMPPTDEM",47,0)
 S RSP(0)=1 ;"Writeback was successful"  ; default to good news!
"RTN","HMPPTDEM",48,0)
 I HMPDFN']"" S RSP(0)="No DFN" Q
"RTN","HMPPTDEM",49,0)
 I '$D(^DPT(HMPDFN)) S RSP(0)="Patient does not exist.  DFN: "_HMPDFN Q  ;ICR 10035 DE2818 ASF 11/12/15
"RTN","HMPPTDEM",50,0)
 I $$GET1^DIQ(2,HMPDFN_",",.331)']"",HMPEPN]"" S RSP(0)="Setting EM CO PH w/o EM CO Name" Q
"RTN","HMPPTDEM",51,0)
 I $$GET1^DIQ(2,HMPDFN_",",.211)']"",HMPNPN]"" S RSP(0)="Setting NOK PH w/o NOK Name" Q
"RTN","HMPPTDEM",52,0)
 S HMPX(2,DA_",",.131)=$S(HMPHPN=-1:"",HMPHPN="":$$GET1^DIQ(2,HMPDFN_",",.131),1:HMPHPN)
"RTN","HMPPTDEM",53,0)
 S HMPX(2,DA_",",.132)=$S(HMPWPN=-1:"",HMPWPN="":$$GET1^DIQ(2,HMPDFN_",",.132),1:HMPWPN)
"RTN","HMPPTDEM",54,0)
 S HMPX(2,DA_",",.134)=$S(HMPCPN=-1:"",HMPCPN="":$$GET1^DIQ(2,HMPDFN_",",.134),1:HMPCPN)
"RTN","HMPPTDEM",55,0)
 S HMPX(2,DA_",",.219)=$S(HMPNPN=-1:"",HMPNPN="":$$GET1^DIQ(2,HMPDFN_",",.219),1:HMPNPN)
"RTN","HMPPTDEM",56,0)
 S HMPX(2,DA_",",.339)=$S(HMPEPN=-1:"",HMPEPN="":$$GET1^DIQ(2,HMPDFN_",",.339),1:HMPEPN)
"RTN","HMPPTDEM",57,0)
 D UPDATE^DIE(,"HMPX",,"HMPER")
"RTN","HMPPTDEM",58,0)
 I HMPER]"" S RSP(0)=HMPER
"RTN","HMPPTDEM",59,0)
 Q
"RTN","HMPPTDEM",60,0)
BEFORE ;
"RTN","HMPPTDEM",61,0)
 S DFN=$P(HMPDEM,"^",1)
"RTN","HMPPTDEM",62,0)
 K HPN,CPN,WPN,EPN,NPN,PTNAME
"RTN","HMPPTDEM",63,0)
 S (HPN,CPN,WPN,EPN,NPN)=""
"RTN","HMPPTDEM",64,0)
 S PTNAME=$$GET1^DIQ(2,DFN_",",.01,"E")
"RTN","HMPPTDEM",65,0)
 S HPN=$$GET1^DIQ(2,DFN_",",.131,"E")
"RTN","HMPPTDEM",66,0)
 S CPN=$$GET1^DIQ(2,DFN_",",.134,"E")
"RTN","HMPPTDEM",67,0)
 S WPN=$$GET1^DIQ(2,DFN_",",.132,"E")
"RTN","HMPPTDEM",68,0)
 S EPN=$$GET1^DIQ(2,DFN_",",.339,"E")
"RTN","HMPPTDEM",69,0)
 S NPN=$$GET1^DIQ(2,DFN_",",.219,"E")
"RTN","HMPPTDEM",70,0)
 U 0 W "Patient: "_PTNAME,!
"RTN","HMPPTDEM",71,0)
 U 0 W "Before executing input string:",!
"RTN","HMPPTDEM",72,0)
 U 0 W ?5,"Home Phone: "_HPN,!
"RTN","HMPPTDEM",73,0)
 U 0 W ?5,"Cell Phone: "_CPN,!
"RTN","HMPPTDEM",74,0)
 U 0 W ?5,"Work Phone: "_WPN,!
"RTN","HMPPTDEM",75,0)
 U 0 W ?5,"Emergency Phone: "_EPN,!
"RTN","HMPPTDEM",76,0)
 U 0 W ?5,"NOK Phone: "_NPN,!!
"RTN","HMPPTDEM",77,0)
 Q
"RTN","HMPPTDEM",78,0)
AFTER ;
"RTN","HMPPTDEM",79,0)
 S (HPN,CPN,WPN,EPN,NPN)=""
"RTN","HMPPTDEM",80,0)
 S PTNAME=$$GET1^DIQ(2,DFN_",",.01,"E")
"RTN","HMPPTDEM",81,0)
 S HPN=$$GET1^DIQ(2,DFN_",",.131,"E")
"RTN","HMPPTDEM",82,0)
 S CPN=$$GET1^DIQ(2,DFN_",",.134,"E")
"RTN","HMPPTDEM",83,0)
 S WPN=$$GET1^DIQ(2,DFN_",",.132,"E")
"RTN","HMPPTDEM",84,0)
 S EPN=$$GET1^DIQ(2,DFN_",",.339,"E")
"RTN","HMPPTDEM",85,0)
 S NPN=$$GET1^DIQ(2,DFN_",",.219,"E")
"RTN","HMPPTDEM",86,0)
 U 0 W "After executing input string:",!
"RTN","HMPPTDEM",87,0)
 U 0 W "Patient: "_PTNAME,!
"RTN","HMPPTDEM",88,0)
 U 0 W ?5,"Home Phone: "_HPN,!
"RTN","HMPPTDEM",89,0)
 U 0 W ?5,"Cell Phone: "_CPN,!
"RTN","HMPPTDEM",90,0)
 U 0 W ?5,"Work Phone: "_WPN,!
"RTN","HMPPTDEM",91,0)
 U 0 W ?5,"Emergency Phone: "_EPN,!
"RTN","HMPPTDEM",92,0)
 U 0 W ?5,"NOK Phone: "_NPN
"RTN","HMPPTDEM",93,0)
 Q
"RTN","HMPPXPR1")
1^182
"RTN","HMPPXRM")
0^113^B14531240
"RTN","HMPPXRM",1,0)
HMPPXRM ;SLC/AGP,ASMR/RRB - Clinical Reminders routine. ; 8/16/12 7:09pm
"RTN","HMPPXRM",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPPXRM",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPPXRM",4,0)
 ;
"RTN","HMPPXRM",5,0)
 Q
"RTN","HMPPXRM",6,0)
 ;
"RTN","HMPPXRM",7,0)
EVALLIST(RESULT,PT,USER,LOC) ;
"RTN","HMPPXRM",8,0)
 N CNT,NUM,RIEN,TMP,UID,HMPTMP,HMPSYS
"RTN","HMPPXRM",9,0)
 N DUEDATE,I,J,LASTDONE,NAME,NODE,STATUS,TXT
"RTN","HMPPXRM",10,0)
 ;S USER=$P(USERUID,":",5)
"RTN","HMPPXRM",11,0)
 D GETLIST^ORQQPX(.HMPTMP,LOC)
"RTN","HMPPXRM",12,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPPXRM",13,0)
 S CNT=0,NUM=0 F  S CNT=$O(HMPTMP(CNT)) Q:CNT'>0  D
"RTN","HMPPXRM",14,0)
 .S RIEN=$G(HMPTMP(CNT)) I RIEN'>0 Q
"RTN","HMPPXRM",15,0)
 .;begin fix DE 2818 ICR 6113 ASF 11/16
"RTN","HMPPXRM",16,0)
 .;S NAME="" S NAME=$P($G(^PXD(811.9,RIEN,0)),U,3)
"RTN","HMPPXRM",17,0)
 .;I NAME="" S NAME=$P($G(^PXD(811.9,RIEN,0)),U)
"RTN","HMPPXRM",18,0)
 .S NAME=$$GET1^DIQ(811.9,REIN_",",1.2)
"RTN","HMPPXRM",19,0)
 .I NAME="" S NAME=$$GET1^DIQ(811.9,REIN_",",.01)
"RTN","HMPPXRM",20,0)
 .; end DE2818 fix
"RTN","HMPPXRM",21,0)
 .S UID="urn:va:pxrm:"_HMPSYS_":"_RIEN
"RTN","HMPPXRM",22,0)
 .S NUM=NUM+1,TMP("reminders",NUM,"uid")=UID,TMP("reminders",NUM,"name")=NAME
"RTN","HMPPXRM",23,0)
 .K ^TMP("PXRHM",$J)
"RTN","HMPPXRM",24,0)
 .D MAIN^PXRM(PT,RIEN,5)     ; 5 returns all reminder info
"RTN","HMPPXRM",25,0)
 .S I=1,TXT=""
"RTN","HMPPXRM",26,0)
 .S NAME="",NAME=$O(^TMP("PXRHM",$J,RIEN,NAME)) Q:NAME=""  D
"RTN","HMPPXRM",27,0)
 ..S NODE=$G(^TMP("PXRHM",$J,RIEN,NAME))
"RTN","HMPPXRM",28,0)
 ..S STATUS=$P(NODE,U),DUEDATE=$$JSONDT^HMPUTILS($P(NODE,U,2)),LASTDONE=$$JSONDT^HMPUTILS($P(NODE,U,3))
"RTN","HMPPXRM",29,0)
 ..S J=0 F  S J=$O(^TMP("PXRHM",$J,RIEN,NAME,"TXT",J)) Q:J=""  D
"RTN","HMPPXRM",30,0)
 ...S TXT=$G(TXT)_^TMP("PXRHM",$J,RIEN,NAME,"TXT",J)_$C(13)_$C(10),I=I+1
"RTN","HMPPXRM",31,0)
 .K ^TMP("PXRHM",$J)
"RTN","HMPPXRM",32,0)
 .S TMP("reminders",NUM,"status")=STATUS
"RTN","HMPPXRM",33,0)
 .S TMP("reminders",NUM,"dueDate")=DUEDATE
"RTN","HMPPXRM",34,0)
 .S TMP("reminders",NUM,"lastDone")=LASTDONE
"RTN","HMPPXRM",35,0)
 .S TMP("reminders",NUM,"clinicalMaintenance")=TXT
"RTN","HMPPXRM",36,0)
 S TMP("success")="true"
"RTN","HMPPXRM",37,0)
 D ENCODE^HMPJSON("TMP","RESULT","ERROR")
"RTN","HMPPXRM",38,0)
 I $D(ERROR) D SETERROR(.TMP,.ERROR,.RESULT)
"RTN","HMPPXRM",39,0)
 Q
"RTN","HMPPXRM",40,0)
 ;
"RTN","HMPPXRM",41,0)
EVALREM(RESULT,PT,UID) ;return detail for a pt's clinical reminder
"RTN","HMPPXRM",42,0)
 K ^TMP("PXRHM",$J)
"RTN","HMPPXRM",43,0)
 N DUEDATE,I,J,LASTDONE,NAME,NODE,RIEN,STATUS,TMP,TXT
"RTN","HMPPXRM",44,0)
 S RIEN=$P(UID,":",5)
"RTN","HMPPXRM",45,0)
 D MAIN^PXRM(PT,RIEN,5)     ; 5 returns all reminder info
"RTN","HMPPXRM",46,0)
 S I=1,TXT=""
"RTN","HMPPXRM",47,0)
 S NAME="",NAME=$O(^TMP("PXRHM",$J,RIEN,NAME)) Q:NAME=""  D
"RTN","HMPPXRM",48,0)
 .S NODE=$G(^TMP("PXRHM",$J,RIEN,NAME))
"RTN","HMPPXRM",49,0)
 .S STATUS=$P(NODE,U),DUEDATE=$$JSONDT^HMPUTILS($P(NODE,U,2)),LASTDONE=$$JSONDT^HMPUTILS($P(NODE,U,3))
"RTN","HMPPXRM",50,0)
 .S J=0 F  S J=$O(^TMP("PXRHM",$J,RIEN,NAME,"TXT",J)) Q:J=""  D
"RTN","HMPPXRM",51,0)
 ..S TXT=$G(TXT)_^TMP("PXRHM",$J,RIEN,NAME,"TXT",J)_$C(13)_$C(10),I=I+1
"RTN","HMPPXRM",52,0)
 K ^TMP("PXRHM",$J)
"RTN","HMPPXRM",53,0)
 S TMP("uid")=UID
"RTN","HMPPXRM",54,0)
 S TMP("status")=STATUS
"RTN","HMPPXRM",55,0)
 S TMP("dueDate")=DUEDATE
"RTN","HMPPXRM",56,0)
 S TMP("lastDone")=LASTDONE
"RTN","HMPPXRM",57,0)
 S TMP("clinicalMaintenance")=TXT
"RTN","HMPPXRM",58,0)
 S TMP("success")="true"
"RTN","HMPPXRM",59,0)
 D ENCODE^HMPJSON("TMP","RESULT","ERROR")
"RTN","HMPPXRM",60,0)
 I $D(ERROR) D SETERROR(.TMP,.ERROR,.RESULT)
"RTN","HMPPXRM",61,0)
 Q
"RTN","HMPPXRM",62,0)
 ;
"RTN","HMPPXRM",63,0)
REMLIST(RESULT,USERUID,LOC) ;
"RTN","HMPPXRM",64,0)
 N CNT,NUM,RIEN,TMP,UID,USER,HMPTMP,HMPSYS
"RTN","HMPPXRM",65,0)
 S USER=$P(USERUID,":",5)
"RTN","HMPPXRM",66,0)
 D GETLIST^ORQQPX(.HMPTMP,LOC)
"RTN","HMPPXRM",67,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPPXRM",68,0)
 S CNT=0,NUM=0 F  S CNT=$O(HMPTMP(CNT)) Q:CNT'>0  D
"RTN","HMPPXRM",69,0)
 .S RIEN=$G(HMPTMP(CNT)) I RIEN'>0 Q
"RTN","HMPPXRM",70,0)
 .;begin fix DE 2818 ICR 6113 ASF 11/16
"RTN","HMPPXRM",71,0)
 .;S NAME="" S NAME=$P($G(^PXD(811.9,RIEN,0)),U,3)
"RTN","HMPPXRM",72,0)
 .;I NAME="" S NAME=$P($G(^PXD(811.9,RIEN,0)),U)
"RTN","HMPPXRM",73,0)
 .S NAME=$$GET1^DIQ(811.9,REIN_",",1.2)
"RTN","HMPPXRM",74,0)
 .I NAME="" S NAME=$$GET1^DIQ(811.9,REIN_",",.01)
"RTN","HMPPXRM",75,0)
 .; end DE2818 fix
"RTN","HMPPXRM",76,0)
 .S UID="urn:va:pxrm:"_HMPSYS_":"_RIEN
"RTN","HMPPXRM",77,0)
 .S NUM=NUM+1,TMP("reminders",NUM,"uid")=UID,TMP("reminders",NUM,"name")=NAME
"RTN","HMPPXRM",78,0)
 S TMP("success")="true"
"RTN","HMPPXRM",79,0)
 D ENCODE^HMPJSON("TMP","RESULT","ERROR")
"RTN","HMPPXRM",80,0)
 I $D(ERROR) D SETERROR(.TMP,.ERROR,.RESULT)
"RTN","HMPPXRM",81,0)
 Q
"RTN","HMPPXRM",82,0)
 ;
"RTN","HMPPXRM",83,0)
SETERROR(INPDATA,ERRORMSG,OUTPUT) ;
"RTN","HMPPXRM",84,0)
 N ERRARR,TXT
"RTN","HMPPXRM",85,0)
 S TXT(1)="Problem encoding json output"
"RTN","HMPPXRM",86,0)
 D SETERROR^HMPUTILS(.ERRARR,.ERRORMSG,.TXT,.INPDATA)
"RTN","HMPPXRM",87,0)
 D ENCODE^HMPJSON("ERRARR","OUTPUT","ERROR")
"RTN","HMPPXRM",88,0)
 Q
"RTN","HMPPXRM",89,0)
 ;
"RTN","HMPROS2")
1^183
"RTN","HMPROS3")
1^184
"RTN","HMPROS4")
1^185
"RTN","HMPROS5")
1^186
"RTN","HMPROS6")
1^187
"RTN","HMPROS7")
1^188
"RTN","HMPROS8")
0^149^B82143309
"RTN","HMPROS8",1,0)
HMPROS8 ;SLC/AGP,ASMR/RRB - Get CPRS User Default Roster List ; 6/11/14 8:38pm
"RTN","HMPROS8",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;AUG 17, 2011;Build 63
"RTN","HMPROS8",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPROS8",4,0)
 ;
"RTN","HMPROS8",5,0)
 Q
"RTN","HMPROS8",6,0)
 ;
"RTN","HMPROS8",7,0)
BLDSORT(NODE,SRC,SORT,SEQ) ; emulate TStringList Sort found in CPRS
"RTN","HMPROS8",8,0)
 ; append separator to ensure string sort (rather than numeric)
"RTN","HMPROS8",9,0)
 ; append SEQ to avoid dropping node where SORTKEY is duplicated
"RTN","HMPROS8",10,0)
 ; SORT:  A:Alphabetic;R:Room/Bed;P:Appointment Date;T:Terminal Digit;S:Source
"RTN","HMPROS8",11,0)
 I $E(NODE)=U QUIT  ; i.e., "^No patients found"
"RTN","HMPROS8",12,0)
 N SORTKEY,S
"RTN","HMPROS8",13,0)
 S NODE=$G(NODE),S=" "
"RTN","HMPROS8",14,0)
 S SORTKEY=$P(NODE,U,2)_S_SEQ ; default alphabetic by name
"RTN","HMPROS8",15,0)
 I SRC="C",(SORT="P") S SORTKEY=$P(NODE,U,4)_S_SEQ
"RTN","HMPROS8",16,0)
 I SRC="M" D
"RTN","HMPROS8",17,0)
 .I SORT="S" S SORTKEY=$P(NODE,U,3)_S_$P(NODE,U,8)_S_$P(NODE,U,2)_S_SEQ
"RTN","HMPROS8",18,0)
 .I SORT="P" S SORTKEY=$P(NODE,U,8)_S_$P(NODE,U,2)_S_SEQ
"RTN","HMPROS8",19,0)
 .I SORT="T" S SORTKEY=$P(NODE,U,5)_S_SEQ
"RTN","HMPROS8",20,0)
 I SRC="W",(SORT="R") S SORTKEY=$P(NODE,U,3)_S_$P(NODE,U,2)_S_SEQ
"RTN","HMPROS8",21,0)
 I '$L(SORTKEY) S SORTKEY=S_SEQ
"RTN","HMPROS8",22,0)
 S ^TMP("HMPSORT",$J,$P(SRC,U,2)_":"_SORT,SORTKEY)=NODE
"RTN","HMPROS8",23,0)
 Q
"RTN","HMPROS8",24,0)
 ;
"RTN","HMPROS8",25,0)
CHKPAT(PATIENTS,SERVER) ;
"RTN","HMPROS8",26,0)
 N ARGS,OUT,PAT,STATUS
"RTN","HMPROS8",27,0)
 S ARGS("command")="putPtSubscription"
"RTN","HMPROS8",28,0)
 S ARGS("server")=SERVER
"RTN","HMPROS8",29,0)
 S PAT="" F  S PAT=$O(PATIENTS(PAT)) Q:PAT'>0  D
"RTN","HMPROS8",30,0)
 .S STATUS=$G(^HMP(800000,"AITEM",PAT,SERVER))
"RTN","HMPROS8",31,0)
 .I STATUS'="",STATUS>0 Q
"RTN","HMPROS8",32,0)
 .S ARGS("localId")=PAT
"RTN","HMPROS8",33,0)
 .D API^HMPDJFS(.OUT,.ARGS)
"RTN","HMPROS8",34,0)
 Q
"RTN","HMPROS8",35,0)
 ;
"RTN","HMPROS8",36,0)
GETDLIST(RESULT,SERVER) ;
"RTN","HMPROS8",37,0)
 N APPT,ARRAY,DFN,CNT,ERROR,GBL,GSOURCE,ISOUT,LISTIEN,LROOT,NAME,NODE,PATIENTS
"RTN","HMPROS8",38,0)
 N PATTYPE,PATUID,PID,ROOM,ROOT,SOURCE,SOURCETYPE,TYPE,TYPEI,HMPSRC,HMPSORT,HMPOUT
"RTN","HMPROS8",39,0)
 N XOBDATA S XOBDATA(0)=1
"RTN","HMPROS8",40,0)
 N XWBOS S XWBOS(0)=1
"RTN","HMPROS8",41,0)
 K ^TMP("OR",$J)
"RTN","HMPROS8",42,0)
 S HMPSRC=$$LSTSRC(DUZ)
"RTN","HMPROS8",43,0)
 S LISTIEN=$P(HMPSRC,U,2),HMPSRC=$P(HMPSRC,U)
"RTN","HMPROS8",44,0)
 D DEFSORT^ORQPTQ11(.HMPSORT)
"RTN","HMPROS8",45,0)
 D DEFLIST^ORQPTQ11(.HMPOUT)
"RTN","HMPROS8",46,0)
 S GSOURCE=$S(LISTIEN>0:$$STGSRCE(HMPSRC,LISTIEN),1:"")
"RTN","HMPROS8",47,0)
 K ^TMP("HMPRESULT",$J),^TMP("HMPTEMP",$J),^TMP("HMPSORT",$J)
"RTN","HMPROS8",48,0)
 S CNT=0 F  S CNT=$O(^TMP("OR",$J,"PATIENTS",CNT)) Q:CNT'>0  D
"RTN","HMPROS8",49,0)
 .S NODE=$G(^TMP("OR",$J,"PATIENTS",CNT,0))
"RTN","HMPROS8",50,0)
 .D BLDSORT(NODE,HMPSRC,HMPSORT,CNT)
"RTN","HMPROS8",51,0)
 K ^TMP("OR",$J)
"RTN","HMPROS8",52,0)
 D SRTSRC(HMPSORT,HMPSRC,$P($$FDEFSRC^ORQPTQ11(DUZ),U,2))
"RTN","HMPROS8",53,0)
 S GBL=$NA(^TMP("HMPSORT",$J)),CNT=0,LROOT=$L(GBL)-1,ROOT=$E(GBL,1,LROOT)
"RTN","HMPROS8",54,0)
 F  S GBL=$Q(@GBL) Q:$E(GBL,1,LROOT)'=ROOT  D
"RTN","HMPROS8",55,0)
 .S NODE=@GBL
"RTN","HMPROS8",56,0)
 .S CNT=CNT+1
"RTN","HMPROS8",57,0)
 .S DFN=$P(NODE,U),ROOM=$G(^DPT(DFN,.101)) ;ICR 10035 DE2818 ASF 11/12/15
"RTN","HMPROS8",58,0)
 .S PATIENTS(DFN)=""
"RTN","HMPROS8",59,0)
 .S PID=$$PID^HMPDJFS(DFN)
"RTN","HMPROS8",60,0)
 .S PATTYPE=$P(NODE,U,9)
"RTN","HMPROS8",61,0)
 .S APPT=$S(HMPSRC="M":$P(NODE,U,8),1:$P(NODE,U,4)),TYPE=$P(NODE,U,3),TYPEI=$P(NODE,U,7)
"RTN","HMPROS8",62,0)
 .S SOURCE=$S($G(GSOURCE)'="":GSOURCE,1:$$GTSOURCE(TYPE,TYPEI))
"RTN","HMPROS8",63,0)
 .S ISOUT=$S(PATTYPE="OPT":1,1:0)
"RTN","HMPROS8",64,0)
 .I $P(NODE,U,3)'="" S ^TMP("HMPTEMP",$J,"data","patients",CNT,"sourceDisplayName")=$P(NODE,U,3)
"RTN","HMPROS8",65,0)
 .S ^TMP("HMPTEMP",$J,"data","patients",CNT,"pid")=PID
"RTN","HMPROS8",66,0)
 .S ^TMP("HMPTEMP",$J,"data","patients",CNT,"patientType")=$S(PATTYPE="OPT":"Outpatient",1:"Inpatient")
"RTN","HMPROS8",67,0)
 .I $G(APPT)'="" D SETAPPT(SOURCE,APPT,DFN,CNT)
"RTN","HMPROS8",68,0)
 .;S ^TMP("HMPTEMP",$J,"data","patients",CNT,"appointment")=$$JSONDT^HMPUTILS(APPT)
"RTN","HMPROS8",69,0)
 .I $G(ROOM)'=""!(PATTYPE'="OPT") D STINP(DFN,CNT,ROOM)
"RTN","HMPROS8",70,0)
 .;S ^TMP("HMPTEMP",$J,"data","patients",CNT,"roomBed")=ROOM
"RTN","HMPROS8",71,0)
 .D STPTSRC(SOURCE,CNT)
"RTN","HMPROS8",72,0)
 ;
"RTN","HMPROS8",73,0)
GETDLSTX ;
"RTN","HMPROS8",74,0)
 D ENCODE^HMPJSON($NA(^TMP("HMPTEMP",$J)),"RESULT","ERROR")
"RTN","HMPROS8",75,0)
 I SERVER'="" D CHKPAT(.PATIENTS,SERVER)
"RTN","HMPROS8",76,0)
 K ^TMP("HMPSORT",$J)
"RTN","HMPROS8",77,0)
 K ^TMP("HMPTEMP",$J)
"RTN","HMPROS8",78,0)
 Q
"RTN","HMPROS8",79,0)
 ;
"RTN","HMPROS8",80,0)
SETAPPT(SOURCE,APPT,DFN,CNT) ;
"RTN","HMPROS8",81,0)
 N LOC,UID,X
"RTN","HMPROS8",82,0)
 S ^TMP("HMPTEMP",$J,"data","patients",CNT,"appointment")=$$JSONDT^HMPUTILS(APPT)
"RTN","HMPROS8",83,0)
 S UID=$P(SOURCE,U,2),LOC=$P($G(UID),":",5) I LOC'>0 Q
"RTN","HMPROS8",84,0)
 S X="A;"_APPT_";"_+LOC
"RTN","HMPROS8",85,0)
 S ^TMP("HMPTEMP",$J,"data","patients",CNT,"appointmentUid")=$$SETUID^HMPUTILS("appointment",DFN,X)
"RTN","HMPROS8",86,0)
 Q
"RTN","HMPROS8",87,0)
 ;
"RTN","HMPROS8",88,0)
STINP(DFN,CNT,ROOM) ;
"RTN","HMPROS8",89,0)
 N LOC,NODE,UID,VAIN,WIEN
"RTN","HMPROS8",90,0)
 I ROOM'="" S ^TMP("HMPTEMP",$J,"data","patients",CNT,"roomBed")=ROOM
"RTN","HMPROS8",91,0)
 D INP^VADPT I $G(VAIN(1))="" D KVA^VADPT Q
"RTN","HMPROS8",92,0)
 S ^TMP("HMPTEMP",$J,"data","patients",CNT,"admissionUid")=$$SETUID^HMPUTILS("visit",DFN,"H"_VAIN(1))
"RTN","HMPROS8",93,0)
 S WIEN=+$G(VAIN(4)) I WIEN'>0 D KVA^VADPT Q
"RTN","HMPROS8",94,0)
 S LOC=+$G(^DIC(42,WIEN,44)) ;ICR 10040 DE2818 ASF 11/12/15
"RTN","HMPROS8",95,0)
 S NODE=$P($G(^SC(+LOC,0)),U,1,2) ;ICR 10040 DE2818 ASF 11/12/15
"RTN","HMPROS8",96,0)
 S ^TMP("HMPTEMP",$J,"data","patients",CNT,"locationUid")=$$SETUID^HMPUTILS("location","",LOC,"")
"RTN","HMPROS8",97,0)
 I $P(NODE,U)'="" S ^TMP("HMPTEMP",$J,"data","patients",CNT,"locationName")=$P(NODE,U)
"RTN","HMPROS8",98,0)
 I $P(NODE,U,2)'="" S ^TMP("HMPTEMP",$J,"data","patients",CNT,"locationShortName")=$P(NODE,U,2)
"RTN","HMPROS8",99,0)
 D KVA^VADPT
"RTN","HMPROS8",100,0)
 Q
"RTN","HMPROS8",101,0)
 ;
"RTN","HMPROS8",102,0)
STPTSRC(SOURCE,CNT) ;
"RTN","HMPROS8",103,0)
 N UID,VAIN
"RTN","HMPROS8",104,0)
 S UID=$P(SOURCE,U,2)
"RTN","HMPROS8",105,0)
 S ^TMP("HMPTEMP",$J,"data","patients",CNT,"sourceUid")=UID
"RTN","HMPROS8",106,0)
 I UID'["location" Q
"RTN","HMPROS8",107,0)
 S ^TMP("HMPTEMP",$J,"data","patients",CNT,"locationUid")=UID
"RTN","HMPROS8",108,0)
 I $P(SOURCE,U,3)'="" S ^TMP("HMPTEMP",$J,"data","patients",CNT,"sourceName")=$P(SOURCE,U,3),^TMP("HMPTEMP",$J,"data","patients",CNT,"locationName")=$P(SOURCE,U,3)
"RTN","HMPROS8",109,0)
 I $P(SOURCE,U,4)'="" S ^TMP("HMPTEMP",$J,"data","patients",CNT,"sourceShortName")=$P(SOURCE,U,4),^TMP("HMPTEMP",$J,"data","patients",CNT,"locationShortName")=$P(SOURCE,U,4)
"RTN","HMPROS8",110,0)
 Q
"RTN","HMPROS8",111,0)
 ;
"RTN","HMPROS8",112,0)
LSTSRC(ADUZ) ; Return type of list source
"RTN","HMPROS8",113,0)
 ; T:TeamList, W:Ward List, P:Provider List, S:Specialty List, C:Clinic List, M:Combination
"RTN","HMPROS8",114,0)
 N FROM,IEN,SRV
"RTN","HMPROS8",115,0)
 S:'$G(ADUZ) ADUZ=DUZ
"RTN","HMPROS8",116,0)
 S SRV=$G(^VA(200,ADUZ,5)) I +SRV>0 S SRV=$P(SRV,U) ;ICR 10060 DE2818 ASF 11/12/15
"RTN","HMPROS8",117,0)
 S FROM=$$GET^XPAR("USR.`"_ADUZ_"^SRV.`"_+$G(SRV),"ORLP DEFAULT LIST SOURCE",1,"Q")
"RTN","HMPROS8",118,0)
 I FROM="M" Q FROM
"RTN","HMPROS8",119,0)
 I FROM="T" S IEN=$$GET^XPAR("USR^SRV.`"_+$G(SRV),"ORLP DEFAULT TEAM",1,"Q") Q FROM_U_+$G(IEN)
"RTN","HMPROS8",120,0)
 I FROM="W" S IEN=$$GET^XPAR("USR^SRV.`"_+$G(SRV),"ORLP DEFAULT WARD",1,"Q") Q FROM_U_+$G(IEN)
"RTN","HMPROS8",121,0)
 I FROM="P" S IEN=$$GET^XPAR("USR^SRV.`"_+$G(SRV),"ORLP DEFAULT PROVIDER",1,"Q") Q FROM_U_+$G(IEN)
"RTN","HMPROS8",122,0)
 I FROM="S" S IEN=$$GET^XPAR("USR^SRV.`"_+$G(SRV),"ORLP DEFAULT SPECIALTY",1,"Q") Q FROM_U_+$G(IEN)
"RTN","HMPROS8",123,0)
 I FROM="C" S API="ORLP DEFAULT CLINIC "_$$UP^XLFSTR($$DOW^XLFDT(DT)),IEN=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),API,1,"Q") Q FROM_U_+$G(IEN)
"RTN","HMPROS8",124,0)
 Q FROM
"RTN","HMPROS8",125,0)
 ;
"RTN","HMPROS8",126,0)
GETCLIST(RESULT,SERVER,ID,START,END) ;
"RTN","HMPROS8",127,0)
 N APPT,CNT,DFN,ITR,NODE,PATIENTS,PID,SOURCE,TEMP,ERROR,HMPARRAY,HMPSORT,S
"RTN","HMPROS8",128,0)
 K ^TMP("HMPTEMP",$J)
"RTN","HMPROS8",129,0)
 D DEFSORT^ORQPTQ11(.HMPSORT)
"RTN","HMPROS8",130,0)
 D CLINPTS2^ORQPTQ2(.HMPARRAY,ID,START,END)
"RTN","HMPROS8",131,0)
 S SOURCE=$$GTSOURCE("Cl",ID)
"RTN","HMPROS8",132,0)
 S S=" " ; separator for sort
"RTN","HMPROS8",133,0)
 S CNT=0 F  S CNT=$O(HMPARRAY(CNT)) Q:CNT'>0  D
"RTN","HMPROS8",134,0)
 . S NODE=$G(HMPARRAY(CNT))
"RTN","HMPROS8",135,0)
 . Q:$E(NODE)=U  ; i.e., "^No appointments"
"RTN","HMPROS8",136,0)
 . I HMPSORT="P" S TEMP($P(NODE,U,4)_S_CNT)=NODE Q
"RTN","HMPROS8",137,0)
 . S TEMP($P(NODE,U,2)_S_$P(NODE,U,4)_S_CNT)=NODE
"RTN","HMPROS8",138,0)
 S CNT=0,ITR="" F  S ITR=$O(TEMP(ITR)) Q:ITR=""  D
"RTN","HMPROS8",139,0)
 . S NODE=TEMP(ITR),CNT=CNT+1
"RTN","HMPROS8",140,0)
 . S DFN=$P(NODE,U),APPT=$P(NODE,U,4)
"RTN","HMPROS8",141,0)
 . S PATIENTS(DFN)="",PID=$$PID^HMPDJFS(DFN)
"RTN","HMPROS8",142,0)
 . S ^TMP("HMPTEMP",$J,"data","patients",CNT,"pid")=PID
"RTN","HMPROS8",143,0)
 . S ^TMP("HMPTEMP",$J,"data","patients",CNT,"patientType")=$S($P(NODE,U,9)="OPT":"Outpatient",1:"Inpatient")
"RTN","HMPROS8",144,0)
 . I $G(APPT)'="" D SETAPPT(SOURCE,APPT,DFN,CNT)
"RTN","HMPROS8",145,0)
 . ;S ^TMP("HMPTEMP",$J,"data","patients",CNT,"appointment")=$$JSONDT^HMPUTILS(APPT)
"RTN","HMPROS8",146,0)
 D SRTSRC(HMPSORT,"C",$P($G(^SC(ID,0)),U)) ;ICR 10040 DE2818 ASF 11/12/15
"RTN","HMPROS8",147,0)
 D ENCODE^HMPJSON($NA(^TMP("HMPTEMP",$J)),"RESULT","ERROR")
"RTN","HMPROS8",148,0)
 ;I SERVER'="" D CHKPAT(.PATIENTS,SERVER)    ;    *S68-JCH*
"RTN","HMPROS8",149,0)
 Q
"RTN","HMPROS8",150,0)
 ;
"RTN","HMPROS8",151,0)
GTSOURCE(TYPE,INT) ;
"RTN","HMPROS8",152,0)
 N REC,RESULT,SPEC,SPECTYPE,UID
"RTN","HMPROS8",153,0)
 S SPEC=$P(TYPE," ")
"RTN","HMPROS8",154,0)
 S SPECTYPE=$S(SPEC="Cl":"Clinic",SPEC="Wd":"Ward",SPEC="Sp":"Treating Specality",SPEC="Pr":"Provider",SPEC="Tm":"OR Team",1:SPEC)
"RTN","HMPROS8",155,0)
 I SPECTYPE=SPEC Q SPEC_U_""
"RTN","HMPROS8",156,0)
 I SPECTYPE="Ward" S REC=+$G(^DIC(42,INT,44)) I REC'=INT S INT=REC ;ICR 10039 DE2818 ASF 11/12/15
"RTN","HMPROS8",157,0)
 S UID=$$SETUID^HMPUTILS($S(SPEC="Cl":"location",SPEC="Wd":"location",SPEC="Sp":"treatingSpecialty",SPEC="Pr":"provider",SPEC="Tm":"orTeam",1:SPEC),"",INT,"")
"RTN","HMPROS8",158,0)
 S RESULT=SPECTYPE_U_UID
"RTN","HMPROS8",159,0)
 I UID["location" S RESULT=RESULT_U_$P($G(^SC(+INT,0)),U,1,2)
"RTN","HMPROS8",160,0)
 Q RESULT
"RTN","HMPROS8",161,0)
 ;
"RTN","HMPROS8",162,0)
STGSRCE(SPEC,INT) ;
"RTN","HMPROS8",163,0)
 N REC,RESULT,SPECTYPE,UID
"RTN","HMPROS8",164,0)
 ;T:TeamList, W:Ward List, P:Provider List, S:Specialty List, C:Clinic List, M:Combination
"RTN","HMPROS8",165,0)
 S RESULT=""
"RTN","HMPROS8",166,0)
 I "TWPSC"'[SPEC Q RESULT
"RTN","HMPROS8",167,0)
 S SPECTYPE=$S(SPEC="C":"Clinic",SPEC="W":"Ward",SPEC="S":"Treating Specality",SPEC="P":"Provider",SPEC="T":"OR Team",1:SPEC) I SPECTYPE=SPEC Q RESULT
"RTN","HMPROS8",168,0)
 I SPECTYPE="Ward" S REC=+$G(^DIC(42,INT,44)) I REC'=INT S INT=REC ;ICR 10039 DE2818 ASF 11/12/15
"RTN","HMPROS8",169,0)
 S UID=$$SETUID^HMPUTILS($S(SPEC="C":"location",SPEC="W":"location",SPEC="S":"treatingSpecialty",SPEC="P":"provider",SPEC="T":"orTeam",1:SPEC),"",INT,"")
"RTN","HMPROS8",170,0)
 S RESULT=SPECTYPE_U_UID
"RTN","HMPROS8",171,0)
 I UID["location" S RESULT=RESULT_U_$P($G(^SC(+INT,0)),U,1,2) ;ICR 10060 DE2818 ASF 11/12/15
"RTN","HMPROS8",172,0)
 Q RESULT
"RTN","HMPROS8",173,0)
 ;        
"RTN","HMPROS8",174,0)
GETWLIST(RESULT,SERVER,ID) ;
"RTN","HMPROS8",175,0)
 N CNT,DFN,ITR,NODE,PATIENTS,PID,ROOM,TEMP,WARD,ERROR,HMPARRAY,HMPSORT
"RTN","HMPROS8",176,0)
 K ^TMP("HMPTEMP",$J)
"RTN","HMPROS8",177,0)
 D DEFSORT^ORQPTQ11(.HMPSORT)
"RTN","HMPROS8",178,0)
 D BYWARD^ORWPT(.HMPARRAY,ID)
"RTN","HMPROS8",179,0)
 S CNT=0 F  S CNT=$O(HMPARRAY(CNT)) Q:CNT'>0  D
"RTN","HMPROS8",180,0)
 . S NODE=$G(HMPARRAY(CNT))
"RTN","HMPROS8",181,0)
 . Q:$E(NODE)=U  ; i.e., "^No patients found"
"RTN","HMPROS8",182,0)
 . I HMPSORT="R" S TEMP($P(NODE,U,3)_" "_CNT)=NODE Q
"RTN","HMPROS8",183,0)
 . S TEMP($P(NODE,U,2)_" "_CNT)=NODE
"RTN","HMPROS8",184,0)
 S ITR="",CNT=0 F  S ITR=$O(TEMP(ITR)) Q:ITR=""  D
"RTN","HMPROS8",185,0)
 .S NODE=TEMP(ITR),CNT=CNT+1
"RTN","HMPROS8",186,0)
 .S DFN=$P(NODE,U),ROOM=$P(NODE,U,3)
"RTN","HMPROS8",187,0)
 .S PATIENTS(DFN)="",PID=$$PID^HMPDJFS(DFN)
"RTN","HMPROS8",188,0)
 .S ^TMP("HMPTEMP",$J,"data","patients",CNT,"pid")=PID
"RTN","HMPROS8",189,0)
 .D STINP(DFN,CNT,ROOM)
"RTN","HMPROS8",190,0)
 .;S ^TMP("HMPTEMP",$J,"data","patients",CNT,"roomBed")=ROOM
"RTN","HMPROS8",191,0)
 D SRTSRC(HMPSORT,"W",$P($G(^DIC(42,ID,0)),U)) ;ICR 10039 DE2818 ASF 11/12/15
"RTN","HMPROS8",192,0)
 D ENCODE^HMPJSON($NA(^TMP("HMPTEMP",$J)),"RESULT","ERROR")
"RTN","HMPROS8",193,0)
 ;I SERVER'="" D CHKPAT(.PATIENTS,SERVER)    ;    *S68-JCH*
"RTN","HMPROS8",194,0)
 Q
"RTN","HMPROS8",195,0)
SRTSRC(SORT,SRCTYPE,SRCNAME) ; Set sort type, source type, source name
"RTN","HMPROS8",196,0)
 S ^TMP("HMPTEMP",$J,"data","defaultPatientListSourceType")=SRCTYPE
"RTN","HMPROS8",197,0)
 S ^TMP("HMPTEMP",$J,"data","defaultPatientListSourceName")=SRCNAME
"RTN","HMPROS8",198,0)
 S ^TMP("HMPTEMP",$J,"data","defaultPatientListSourceSort")=SORT
"RTN","HMPROS8",199,0)
 Q
"RTN","HMPSR")
1^189
"RTN","HMPSTMP")
0^122^B70461106
"RTN","HMPSTMP",1,0)
HMPSTMP ;ASMR/JD,BL - MetaStamp ;Feb 01, 2016 12:10
"RTN","HMPSTMP",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPSTMP",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPSTMP",4,0)
 ;
"RTN","HMPSTMP",5,0)
 ; Returns the most recent date/time
"RTN","HMPSTMP",6,0)
 ; JD - 6/5/15 - Added code to the DOC section to consider the attachment date
"RTN","HMPSTMP",7,0)
 ;               as one of the dates if it exists
"RTN","HMPSTMP",8,0)
 Q
"RTN","HMPSTMP",9,0)
 ;
"RTN","HMPSTMP",10,0)
EN(A) ; extrinsic function, used to create "stampTime" or "lastUpdateTime" subscript in arrays
"RTN","HMPSTMP",11,0)
 K B
"RTN","HMPSTMP",12,0)
 N C
"RTN","HMPSTMP",13,0)
 ; A is either "now" or a domain name (per PTDOMS^HMPDJFSD)
"RTN","HMPSTMP",14,0)
 ; B is the return value (stampTime)
"RTN","HMPSTMP",15,0)
 S C=$$UP^XLFSTR(A)
"RTN","HMPSTMP",16,0)
 I C="NOW" G NOW
"RTN","HMPSTMP",17,0)
 I C="ADM" G ADM
"RTN","HMPSTMP",18,0)
 I C="ALLERGY" G ALL
"RTN","HMPSTMP",19,0)
 I C="AUXILIARY" G AUX
"RTN","HMPSTMP",20,0)
 I C="APPOINTMENT" G APP
"RTN","HMPSTMP",21,0)
 I C="DIAGNOSIS" G DIA
"RTN","HMPSTMP",22,0)
 I C="DOCUMENT" G DOC
"RTN","HMPSTMP",23,0)
 I C="FACTOR" G FAC
"RTN","HMPSTMP",24,0)
 I C="IMMUNIZATION" G IMM
"RTN","HMPSTMP",25,0)
 I C="LAB" G LAB
"RTN","HMPSTMP",26,0)
 I C="MED" G MED
"RTN","HMPSTMP",27,0)
 I C="OBS" G OBS
"RTN","HMPSTMP",28,0)
 I C="ORDER" G ORD
"RTN","HMPSTMP",29,0)
 I C="PROBLEM" G PRO
"RTN","HMPSTMP",30,0)
 I C="PROCEDURE" G PRC
"RTN","HMPSTMP",31,0)
 I C="CONSULT" G CON
"RTN","HMPSTMP",32,0)
 I C="IMAGE" G IMA
"RTN","HMPSTMP",33,0)
 I C="SURGERY" G SUR
"RTN","HMPSTMP",34,0)
 I C="TASK" G TAS
"RTN","HMPSTMP",35,0)
 I C="VISIT" G VIS
"RTN","HMPSTMP",36,0)
 I C="VITAL" G VIT
"RTN","HMPSTMP",37,0)
 I C="PTF" G PTF
"RTN","HMPSTMP",38,0)
 I C="EXAM" G EXA
"RTN","HMPSTMP",39,0)
 I C="CPT" G CPT
"RTN","HMPSTMP",40,0)
 I C="EDUCATION" G EDU
"RTN","HMPSTMP",41,0)
 I C="POV" G POV
"RTN","HMPSTMP",42,0)
 I C="SKIN" G SKI
"RTN","HMPSTMP",43,0)
 I C="TREATMENT" G TRE
"RTN","HMPSTMP",44,0)
 I C="MH" G MH
"RTN","HMPSTMP",45,0)
 ;
"RTN","HMPSTMP",46,0)
 ;DE2818, changed code to fall through instead of "Q B", which would be undefined at this point
"RTN","HMPSTMP",47,0)
 ;fall through to NOW
"RTN","HMPSTMP",48,0)
NOW ;
"RTN","HMPSTMP",49,0)
 ; Set stamp time in YYYYMMDDHHMMSS format (FMTHL7 will return time zone)
"RTN","HMPSTMP",50,0)
 S B=$P($$FMTHL7^XLFDT($$NOW^XLFDT),"-")
"RTN","HMPSTMP",51,0)
 S B=$E(B_"000000",1,14)  ; Need padding to force YYYYMMDDHHMMSS precision
"RTN","HMPSTMP",52,0)
 Q B
"RTN","HMPSTMP",53,0)
ADM ; Admissions (these are visits whose ID starts with an "H").  JD - January 26, 2015
"RTN","HMPSTMP",54,0)
 K DATA
"RTN","HMPSTMP",55,0)
 S DATE(1)=$G(ADM("dateTime"))
"RTN","HMPSTMP",56,0)
 S DATE(2)=$G(ADM("stay","dischargeDateTime"))
"RTN","HMPSTMP",57,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",58,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",59,0)
ALL ; Allergy ; rhl 20141231
"RTN","HMPSTMP",60,0)
 K DATE
"RTN","HMPSTMP",61,0)
 S DATE(1)=$G(REAC("entered"))
"RTN","HMPSTMP",62,0)
 S DATE(2)=$G(REAC("verified"))
"RTN","HMPSTMP",63,0)
 ;  dates in observations array
"RTN","HMPSTMP",64,0)
 N I,J
"RTN","HMPSTMP",65,0)
 S J="",J=$O(DATE(J),-1)
"RTN","HMPSTMP",66,0)
 S I=0
"RTN","HMPSTMP",67,0)
 F  S I=$O(REAC("observations",I)) Q:I=""  D
"RTN","HMPSTMP",68,0)
 . I $G(REAC("observations",I,"date"))]"" S J=J+1,DATE(J)=REAC("observations",I,"date")
"RTN","HMPSTMP",69,0)
 ;  dates in comment array
"RTN","HMPSTMP",70,0)
 N I,J
"RTN","HMPSTMP",71,0)
 S J="",J=$O(DATE(J),-1)
"RTN","HMPSTMP",72,0)
 S I=0
"RTN","HMPSTMP",73,0)
 F  S I=$O(REAC("comments",I)) Q:I=""  D
"RTN","HMPSTMP",74,0)
 . I $G(REAC("comments",I,"entered"))]"" S J=J+1,DATE(J)=REAC("comments",I,"entered")
"RTN","HMPSTMP",75,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",76,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",77,0)
AUX ; Auxiliary
"RTN","HMPSTMP",78,0)
 Q ""
"RTN","HMPSTMP",79,0)
 K DATE
"RTN","HMPSTMP",80,0)
 ;S DATE(1)=$G(
"RTN","HMPSTMP",81,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",82,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",83,0)
APP ; Appointment
"RTN","HMPSTMP",84,0)
 K DATE
"RTN","HMPSTMP",85,0)
 S DATE(1)=$G(APPT("dateTime"))
"RTN","HMPSTMP",86,0)
 S DATE(2)=$G(APPT("checkIn"))
"RTN","HMPSTMP",87,0)
 S DATE(3)=$G(APPT("checkOut"))
"RTN","HMPSTMP",88,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",89,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",90,0)
DIA ; Diagnosis
"RTN","HMPSTMP",91,0)
 Q ""
"RTN","HMPSTMP",92,0)
 K DATE
"RTN","HMPSTMP",93,0)
 ;S DATE(1)=$G(
"RTN","HMPSTMP",94,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",95,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",96,0)
DOC ; Document
"RTN","HMPSTMP",97,0)
 N AUDDT
"RTN","HMPSTMP",98,0)
 S AUDDT=""  ; Audit trail date/time
"RTN","HMPSTMP",99,0)
 K DATE
"RTN","HMPSTMP",100,0)
 S DATE(1)=$G(DOC("referenceDateTime"))
"RTN","HMPSTMP",101,0)
 S DATE(2)=$G(DOC("entered"))
"RTN","HMPSTMP",102,0)
 ;DE2818, ^TIU(8925.5) references - ICR 6279
"RTN","HMPSTMP",103,0)
 ; Find the most recent audit trail entry for the document
"RTN","HMPSTMP",104,0)
 S:$G(DOC("localId")) AUDDT=$O(^TIU(8925.5,"B",DOC("localId"),""),-1)
"RTN","HMPSTMP",105,0)
 ; Get the audit trail date/time
"RTN","HMPSTMP",106,0)
 S:AUDDT AUDDT=$P($G(^TIU(8925.5,AUDDT,3)),"^",2)
"RTN","HMPSTMP",107,0)
 S:AUDDT DATE(3)=$$JSONDT^HMPUTILS(AUDDT)
"RTN","HMPSTMP",108,0)
 ;go through HMPDJ array
"RTN","HMPSTMP",109,0)
 N I,II,J
"RTN","HMPSTMP",110,0)
 S J=""
"RTN","HMPSTMP",111,0)
 S J=$O(DATE(J),-1)
"RTN","HMPSTMP",112,0)
 S I=0
"RTN","HMPSTMP",113,0)
 F  S I=$O(DOC("text",I)) Q:I=""  D
"RTN","HMPSTMP",114,0)
 . I $G(DOC("text",I,"dateTime"))]"" S J=J+1,DATE(J)=DOC("text",I,"dateTime")
"RTN","HMPSTMP",115,0)
 . S II=0 F  S II=$O(DOC("text",I,"clinicians",II)) Q:II=""  D
"RTN","HMPSTMP",116,0)
 . . I $G(DOC("text",I,"clinicians",II,"signedDateTime"))]"" S J=J+1,DATE(J)=DOC("text",I,"clinicians",II,"signedDateTime")
"RTN","HMPSTMP",117,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",118,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",119,0)
FAC ; Factor
"RTN","HMPSTMP",120,0)
 K DATE
"RTN","HMPSTMP",121,0)
 S DATE(1)=$G(PCE("entered"))
"RTN","HMPSTMP",122,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",123,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",124,0)
IMM ; Immunization
"RTN","HMPSTMP",125,0)
 K DATE
"RTN","HMPSTMP",126,0)
 S DATE(1)=$G(PCE("administeredDateTime"))
"RTN","HMPSTMP",127,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",128,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",129,0)
LAB ; Lab
"RTN","HMPSTMP",130,0)
 K DATE
"RTN","HMPSTMP",131,0)
 S DATE(1)=$G(LAB("observed"))
"RTN","HMPSTMP",132,0)
 S DATE(2)=$G(LAB("resulted"))
"RTN","HMPSTMP",133,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",134,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",135,0)
MED ; Med
"RTN","HMPSTMP",136,0)
 K DATE
"RTN","HMPSTMP",137,0)
 S DATE(1)=$G(MED("orders",1,"ordered"))
"RTN","HMPSTMP",138,0)
 S DATE(2)=$G(MED("overallStart"))
"RTN","HMPSTMP",139,0)
 S DATE(3)=$G(MED("overallStop"))
"RTN","HMPSTMP",140,0)
 S DATE(4)=$G(MED("stopped"))
"RTN","HMPSTMP",141,0)
 S DATE(5)=$G(MED("lastFilled"))
"RTN","HMPSTMP",142,0)
 ;go through value array
"RTN","HMPSTMP",143,0)
 N I,J
"RTN","HMPSTMP",144,0)
 S J="",J=$O(DATE(J),-1)
"RTN","HMPSTMP",145,0)
 S I=0
"RTN","HMPSTMP",146,0)
 F  S I=$O(MED("dosages",I)) Q:I=""  D
"RTN","HMPSTMP",147,0)
 . I $G(MED("dosages",I,"start"))]"" S J=J+1,DATE(J)=MED("dosages",I,"start")
"RTN","HMPSTMP",148,0)
 . I $G(MED("dosages",I,"stop"))]"" S J=J+1,DATE(J)=MED("dosages",I,"stop")
"RTN","HMPSTMP",149,0)
 S J="",J=$O(DATE(J),-1)
"RTN","HMPSTMP",150,0)
 S I=0
"RTN","HMPSTMP",151,0)
 F  S I=$O(MED("fills",I)) Q:I=""  D
"RTN","HMPSTMP",152,0)
 . I $G(MED("fills",I,"dispenseDate"))]"" S J=J+1,DATE(J)=MED("fills",I,"dispenseDate")
"RTN","HMPSTMP",153,0)
 . I $G(MED("fills",I,"releaseDate"))]"" S J=J+1,DATE(J)=MED("fills",I,"releaseDate")
"RTN","HMPSTMP",154,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",155,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",156,0)
OBS ; Obs ; rhl 20141231
"RTN","HMPSTMP",157,0)
 K DATE
"RTN","HMPSTMP",158,0)
 S DATE(1)=$G(CLIO("entered"))
"RTN","HMPSTMP",159,0)
 S DATE(2)=$G(CLIO("observed"))
"RTN","HMPSTMP",160,0)
 S DATE(3)=$G(CLIO("setStart"))
"RTN","HMPSTMP",161,0)
 S DATE(4)=$G(CLIO("setStop"))
"RTN","HMPSTMP",162,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",163,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",164,0)
ORD ; Order ; RHL 20141231
"RTN","HMPSTMP",165,0)
 K DATE
"RTN","HMPSTMP",166,0)
 S DATE(1)=$G(ORDER("entered"))
"RTN","HMPSTMP",167,0)
 ;S DATE(2)=$G(ORDER("start"))
"RTN","HMPSTMP",168,0)
 ;S DATE(3)=$G(ORDER("stop"))
"RTN","HMPSTMP",169,0)
 ;these are dates in signature/verification dates
"RTN","HMPSTMP",170,0)
 I $G(ORDER("clinicians")) D
"RTN","HMPSTMP",171,0)
 . N I,J
"RTN","HMPSTMP",172,0)
 . S J="",J=$O(DATE(J),-1)
"RTN","HMPSTMP",173,0)
 . S I=0
"RTN","HMPSTMP",174,0)
 . F  S I=$O(ORDER("clinicians",I)) Q:I=""  D
"RTN","HMPSTMP",175,0)
 . . I $G(ORDER("clinicians",I,"signedDateTime"))]"" S J=J+1,DATE(J)=ORDER("clinicians",I,"signedDateTime")
"RTN","HMPSTMP",176,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",177,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",178,0)
PRO ; Problem
"RTN","HMPSTMP",179,0)
 K DATE
"RTN","HMPSTMP",180,0)
 S DATE(1)=$G(PROB("entered"))
"RTN","HMPSTMP",181,0)
 S DATE(2)=$G(PROB("updated"))
"RTN","HMPSTMP",182,0)
 S DATE(3)=$G(PROB("onset"))
"RTN","HMPSTMP",183,0)
 S DATE(4)=$G(PROB("resolved"))
"RTN","HMPSTMP",184,0)
 ;these are dates in possible comments
"RTN","HMPSTMP",185,0)
 N I,J
"RTN","HMPSTMP",186,0)
 S J="",J=$O(DATE(J),-1)
"RTN","HMPSTMP",187,0)
 S I=0
"RTN","HMPSTMP",188,0)
 F  S I=$O(PROB("comments",I)) Q:I=""  D
"RTN","HMPSTMP",189,0)
 . I $G(PROB("comments",I,"entered"))]"" S J=J+1,DATE(J)=PROB("comments",I,"entered")
"RTN","HMPSTMP",190,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",191,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",192,0)
PRC ; Procedure
"RTN","HMPSTMP",193,0)
 K DATE
"RTN","HMPSTMP",194,0)
 S DATE(1)=$G(PROC("dateTime"))
"RTN","HMPSTMP",195,0)
 S DATE(2)=$G(PROC("requested"))
"RTN","HMPSTMP",196,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",197,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",198,0)
CON ; Consult
"RTN","HMPSTMP",199,0)
 K DATE
"RTN","HMPSTMP",200,0)
 S DATE(1)=$G(CONS("dateTime"))
"RTN","HMPSTMP",201,0)
 S DATE(2)=$G(CONS("earliestDate"))
"RTN","HMPSTMP",202,0)
 S DATE(3)=$G(ACT("entered"))
"RTN","HMPSTMP",203,0)
 S DATE(4)=$G(ACT("dateTime"))
"RTN","HMPSTMP",204,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",205,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",206,0)
IMA ; Image ; RHL 20150102
"RTN","HMPSTMP",207,0)
 K DATE
"RTN","HMPSTMP",208,0)
 S DATE(1)=$G(EXAM("dateTime"))
"RTN","HMPSTMP",209,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",210,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",211,0)
SUR ; Surgery ; RHL 20150102
"RTN","HMPSTMP",212,0)
 K DATE
"RTN","HMPSTMP",213,0)
 S DATE(1)=$G(SURG("dateTime"))
"RTN","HMPSTMP",214,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",215,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",216,0)
TAS ; Task
"RTN","HMPSTMP",217,0)
 Q ""
"RTN","HMPSTMP",218,0)
 K DATE
"RTN","HMPSTMP",219,0)
 ;S DATE(1)=$G(
"RTN","HMPSTMP",220,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",221,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",222,0)
VIS ; Visit
"RTN","HMPSTMP",223,0)
 K DATE
"RTN","HMPSTMP",224,0)
 S DATE(1)=$G(VST("dateTime"))
"RTN","HMPSTMP",225,0)
 S DATE(2)=$G(VST("checkOut"))
"RTN","HMPSTMP",226,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",227,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",228,0)
VIT ; Vital
"RTN","HMPSTMP",229,0)
 K DATE
"RTN","HMPSTMP",230,0)
 S DATE(1)=$G(VIT("observed"))
"RTN","HMPSTMP",231,0)
 S DATE(2)=$G(VIT("resulted"))
"RTN","HMPSTMP",232,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",233,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",234,0)
PTF ; Ptf ; RHL 20150102
"RTN","HMPSTMP",235,0)
 K DATE
"RTN","HMPSTMP",236,0)
 S DATE(1)=$G(PTF("arrivalDateTime"))
"RTN","HMPSTMP",237,0)
 S DATE(2)=$G(PTF("dischargeDateTime"))
"RTN","HMPSTMP",238,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",239,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",240,0)
EXA ; Exam
"RTN","HMPSTMP",241,0)
 K DATE
"RTN","HMPSTMP",242,0)
 S DATE(1)=$G(PCE("entered"))
"RTN","HMPSTMP",243,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",244,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",245,0)
CPT ; CPT
"RTN","HMPSTMP",246,0)
 K DATE
"RTN","HMPSTMP",247,0)
 S DATE(1)=$G(PCE("entered"))
"RTN","HMPSTMP",248,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",249,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",250,0)
EDU ; Education
"RTN","HMPSTMP",251,0)
 K DATE
"RTN","HMPSTMP",252,0)
 S DATE(1)=$G(PCE("entered"))
"RTN","HMPSTMP",253,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",254,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",255,0)
POV ; Pov
"RTN","HMPSTMP",256,0)
 K DATE
"RTN","HMPSTMP",257,0)
 S DATE(1)=$G(PCE("entered"))
"RTN","HMPSTMP",258,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",259,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",260,0)
SKI ; Skin
"RTN","HMPSTMP",261,0)
 K DATE
"RTN","HMPSTMP",262,0)
 S DATE(1)=$G(PCE("entered"))
"RTN","HMPSTMP",263,0)
 S DATE(2)=$G(PCE("dateRead"))
"RTN","HMPSTMP",264,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",265,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",266,0)
TRE ; Treatment ; RHL 20150102
"RTN","HMPSTMP",267,0)
 K DATE
"RTN","HMPSTMP",268,0)
 S DATE(1)=$G(NTX("entered"))
"RTN","HMPSTMP",269,0)
 S DATE(2)=$G(NTX("start"))
"RTN","HMPSTMP",270,0)
 S DATE(3)=$G(NTX("stop"))
"RTN","HMPSTMP",271,0)
 ;these are dates in signature/verification dates; is this used for NTX orders
"RTN","HMPSTMP",272,0)
 I $G(NTX("clinicians")) D
"RTN","HMPSTMP",273,0)
 . N I,J
"RTN","HMPSTMP",274,0)
 . S J="",J=$O(DATE(J),-1)
"RTN","HMPSTMP",275,0)
 . S I=0
"RTN","HMPSTMP",276,0)
 . F  S I=$O(NTX("clinicians",I)) Q:I=""  D
"RTN","HMPSTMP",277,0)
 . . I $G(NTX("clinicians",I,"signedDateTime"))]"" S J=J+1,DATE(J)=NTX("clinicians",I,"signedDateTime")
"RTN","HMPSTMP",278,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",279,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",280,0)
MH ; Mh   ; RHL 20150103
"RTN","HMPSTMP",281,0)
 K DATE
"RTN","HMPSTMP",282,0)
 S DATE(1)=$G(MH("administeredDateTime"))
"RTN","HMPSTMP",283,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",284,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",285,0)
FINDNEW(DATE)  ; function, find the latest date from DATE array
"RTN","HMPSTMP",286,0)
 ;DATE array has following format DATE(1)=DATE DATE(2)=DATE
"RTN","HMPSTMP",287,0)
 N ADATE,COMDATE,NDATE,X
"RTN","HMPSTMP",288,0)
 ; Jan 28, 2016, DE3519;bl set date for comparison, now plus 60 seconds padded with zeroes, no time zone offset
"RTN","HMPSTMP",289,0)
 S NDATE=$E($P($$FMTHL7^XLFDT($$FMADD^XLFDT($$NOW^XLFDT,0,0,0,60)),"-")_"000000",1,14)
"RTN","HMPSTMP",290,0)
 S X=0,COMDATE=0  ; initialize starting date to zero
"RTN","HMPSTMP",291,0)
 F  S X=$O(DATE(X)) Q:'X  D:$E(DATE(X),7,8)  ; evaluate only if precise date. DE3548
"RTN","HMPSTMP",292,0)
 . S ADATE=$E(DATE(X)_"000000",1,14) ; Need padding down to the second (YYYYMMDDHHMM). JD-1/23/15
"RTN","HMPSTMP",293,0)
 . I ADATE>NDATE Q  ; DE3519;bl prevent future date/times in lastUpdateTime
"RTN","HMPSTMP",294,0)
 . I ADATE>COMDATE S COMDATE=ADATE
"RTN","HMPSTMP",295,0)
 I 'COMDATE S COMDATE=$E($P($$FMTHL7^XLFDT($$NOW^XLFDT),"-")_"000000",1,14)
"RTN","HMPSTMP",296,0)
 Q COMDATE
"RTN","HMPSTMP",297,0)
 ;
"RTN","HMPTFU2")
0^123^B40086168
"RTN","HMPTFU2",1,0)
HMPTFU2 ;ASMR/JCH - Utilities for the Treating Facility file 391.91 ; 02/05/15 15:25
"RTN","HMPTFU2",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Feb 05, 2015;Build 63
"RTN","HMPTFU2",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPTFU2",4,0)
 ;
"RTN","HMPTFU2",5,0)
 ; Reference to ^DGCN(391.91 is NOT currently supported; see ICR #2911 for an existing Private ICR between 
"RTN","HMPTFU2",6,0)
 ;  Registration and CIRN that would meet the needs of this routine, or provide an example for a new ICR.
"RTN","HMPTFU2",7,0)
 ;
"RTN","HMPTFU2",8,0)
 Q
"RTN","HMPTFU2",9,0)
 ;
"RTN","HMPTFU2",10,0)
TFL(LIST,PT) ;for this PT [patient] (either DFN, ICN or EDIPI) return the list of treating facilities
"RTN","HMPTFU2",11,0)
 ; CALLED FROM RPC HMP LOCAL GET CORRESPONDINGIDS
"RTN","HMPTFU2",12,0)
 ; PT values :   Source ID^Source ID Type^Assigning Authority^Assigning Facility
"RTN","HMPTFU2",13,0)
 ;  ICN example:   1008520438V882204^NI^USVHA^200M
"RTN","HMPTFU2",14,0)
 ;  DFN example:   100000511^PI^USVHA^500
"RTN","HMPTFU2",15,0)
 ;  EDIPI example: 852043888^NI^USDOD^200DOD
"RTN","HMPTFU2",16,0)
 ;
"RTN","HMPTFU2",17,0)
 ; SOURCE ID:      SOURCE ID is the unique system assigned identifier at the identified facility for the
"RTN","HMPTFU2",18,0)
 ;                 patient record.  The value of SOURCE ID varies, depending on the source facility. 
"RTN","HMPTFU2",19,0)
 ;                 If SOURCE ID is from the Master Patient Index, the value is the Integration 
"RTN","HMPTFU2",20,0)
 ;                 Control Number (ICN).  If SOURCE ID is from the Department of Defense (DOD), the
"RTN","HMPTFU2",21,0)
 ;                 value is the Electronic Data Interchange Personal Identifier (EDIPI), which is 
"RTN","HMPTFU2",22,0)
 ;                 their equivalent of an ICN. In the future, SOURCE ID may come from other sources 
"RTN","HMPTFU2",23,0)
 ;                 due to additional initiatives.
"RTN","HMPTFU2",24,0)
 ;
"RTN","HMPTFU2",25,0)
 ; SOURCE ID TYPE: SOURCE ID TYPE defines the data source for the TREATING FACILITY LIST file (#391.91) entry.
"RTN","HMPTFU2",26,0)
 ;                 The source ID type is a reference to the HL7 Table 0203, Identifier Type, and the VA
"RTN","HMPTFU2",27,0)
 ;                 Identity Management user defined values: NI (National Identifier), PI (Patient Identifier)
"RTN","HMPTFU2",28,0)
 ; 
"RTN","HMPTFU2",29,0)
 ; Return:
"RTN","HMPTFU2",30,0)
 ; This will return the ICN and the list of treating facilities in the following format:
"RTN","HMPTFU2",31,0)
 ;   RESULT(n)=Id^IdType^AssigningFacility^AssigningAuthority^IdStatus
"RTN","HMPTFU2",32,0)
 ;     Examples:
"RTN","HMPTFU2",33,0)
 ;      RESULT(1)="1011232151V598646^NI^200M^A"
"RTN","HMPTFU2",34,0)
 ;      RESULT(2)="7168937^PI^91E3^USVHA^A"
"RTN","HMPTFU2",35,0)
 ;      RESULT(3)="852043888^NI^200DOD^USDOD^A"
"RTN","HMPTFU2",36,0)
 ;
"RTN","HMPTFU2",37,0)
 ; ID STATUS:      ID STATUS supports joint VA/DoD medical centers, Veteran's Record Management (VRM), and Virtual 
"RTN","HMPTFU2",38,0)
 ;                 Lifetime Electronic Record (VLER) initiatives.  This field allows the capture of resolved 
"RTN","HMPTFU2",39,0)
 ;                 duplicate events and exposes the related identifier and identifier status to the consuming 
"RTN","HMPTFU2",40,0)
 ;                 applications. A value of ""A"" indicates that the patient record is an active record on 
"RTN","HMPTFU2",41,0)
 ;                 the identifying system (e.g., VAMC or DoD). A value of "H" indicates that the patient 
"RTN","HMPTFU2",42,0)
 ;                 record was identified as part of a duplicate pair, has been merged, and is no longer active 
"RTN","HMPTFU2",43,0)
 ;                 on the identifying system (e.g., VAMC or DoD).
"RTN","HMPTFU2",44,0)
 ;
"RTN","HMPTFU2",45,0)
 N X,ICN,DFN,EDIPI,ASSIGN,ID,SITE,TYPE,SITEIEN,TFIEN
"RTN","HMPTFU2",46,0)
 ;
"RTN","HMPTFU2",47,0)
 ; Master Patient Index (MPI) must be installed to continue
"RTN","HMPTFU2",48,0)
 S X="MPIF001" X ^%ZOSF("TEST") I '$T S LIST(1)="-1^MPI Not Installed" Q
"RTN","HMPTFU2",49,0)
 ;
"RTN","HMPTFU2",50,0)
 K LIST ; Clear "return" variable
"RTN","HMPTFU2",51,0)
 ;
"RTN","HMPTFU2",52,0)
 ; what do we have
"RTN","HMPTFU2",53,0)
 S TYPE=$P(PT,"^",2) ; SOURCE ID TYPE
"RTN","HMPTFU2",54,0)
 S SITE=$P(PT,"^",4) ; 
"RTN","HMPTFU2",55,0)
 S ID=$P(PT,"^")
"RTN","HMPTFU2",56,0)
 S ASSIGN=$P(PT,"^",3)
"RTN","HMPTFU2",57,0)
 ; check input data
"RTN","HMPTFU2",58,0)
 I ID']"" S LIST(1)="-1^Id is not defined." Q
"RTN","HMPTFU2",59,0)
 I TYPE'="NI",TYPE'="PI" S LIST(1)="-1^Invalid Id Type." Q
"RTN","HMPTFU2",60,0)
 I ASSIGN'="USVHA",ASSIGN'="USDOD" S LIST(1)="-1^Invalid Assigning Authority." Q
"RTN","HMPTFU2",61,0)
 I SITE']"" S LIST(1)="-1^Missing Assigning Facility." Q
"RTN","HMPTFU2",62,0)
 ; find the ien for the station number
"RTN","HMPTFU2",63,0)
 S SITEIEN=$O(^DIC(4,"D",SITE,0))
"RTN","HMPTFU2",64,0)
 I 'SITEIEN S LIST(1)="-1^Assigning Facility is not defined in database." Q
"RTN","HMPTFU2",65,0)
 ;
"RTN","HMPTFU2",66,0)
 I TYPE="PI",ASSIGN="USVHA" S DFN=ID
"RTN","HMPTFU2",67,0)
 I TYPE="NI",ASSIGN="USVHA",SITE="200M" S ICN=ID
"RTN","HMPTFU2",68,0)
 I TYPE="NI",ASSIGN="USDOD",SITE="200DOD" S EDIPI=ID
"RTN","HMPTFU2",69,0)
 I $D(ICN) S DFN=$$GETDFN^MPIF001(ICN) D  Q:$D(LIST(1))
"RTN","HMPTFU2",70,0)
 . I +DFN<0 S LIST(1)="-1^ICN is not known" Q
"RTN","HMPTFU2",71,0)
 . S SITEIEN=$$IEN^XUAF4($P($$SITE^VASITE,"^",3))
"RTN","HMPTFU2",72,0)
 ;
"RTN","HMPTFU2",73,0)
 I $D(DFN) S ICN=$$GETICN^MPIF001(DFN)
"RTN","HMPTFU2",74,0)
 ; DFN should be defined, but ICN may not.
"RTN","HMPTFU2",75,0)
 ;Use new xref AISS appropriately to retrieve DFN from EDIPI
"RTN","HMPTFU2",76,0)
 I $D(EDIPI)=""!(ASSIGN="")!(TYPE="")!(SITEIEN="") S LIST(1)="-1^Insufficient data" Q
"RTN","HMPTFU2",77,0)
 I $D(EDIPI),'$D(^DGCN(391.91,"AISS",EDIPI,ASSIGN,TYPE,SITEIEN)) D  Q
"RTN","HMPTFU2",78,0)
 . S LIST(1)="-1^EDIPI Record is unknown at this facility"
"RTN","HMPTFU2",79,0)
 I $D(EDIPI),$D(^DGCN(391.91,"AISS",EDIPI,ASSIGN,TYPE,SITEIEN)) D
"RTN","HMPTFU2",80,0)
 .S EN=$O(^DGCN(391.91,"AISS",EDIPI,ASSIGN,TYPE,SITEIEN,0))
"RTN","HMPTFU2",81,0)
 .S DFN=$P($G(^DGCN(391.91,EN,0)),"^")
"RTN","HMPTFU2",82,0)
 ;
"RTN","HMPTFU2",83,0)
 ; if ICN is not defined, it is OK, but DFN should be defined
"RTN","HMPTFU2",84,0)
 ; bad input, such as Id^NI^USVHA^123
"RTN","HMPTFU2",85,0)
 I '$G(DFN) S LIST(1)="-1^Invalid input" Q
"RTN","HMPTFU2",86,0)
 ; check DFN and Site to be matching an entry in file #391.91
"RTN","HMPTFU2",87,0)
 I '$O(^DGCN(391.91,"APAT",DFN,SITEIEN,0)) D  Q
"RTN","HMPTFU2",88,0)
 . S LIST(1)="-1^Id as '"_ID_"'"_" is not in database"
"RTN","HMPTFU2",89,0)
 ; DFN should be defined, but ICN may not.
"RTN","HMPTFU2",90,0)
 S X=$$QUERYTF($P($G(ICN),"V"),"LIST")
"RTN","HMPTFU2",91,0)
 I $P(X,U)="1" S LIST(1)="-1"_U_$P(X,U,2) Q
"RTN","HMPTFU2",92,0)
 Q
"RTN","HMPTFU2",93,0)
 ;
"RTN","HMPTFU2",94,0)
GETICN(EDIPI) ;return the ICN when EDIPI is passed
"RTN","HMPTFU2",95,0)
 N EN,DFN,ICN,IEN
"RTN","HMPTFU2",96,0)
 S IEN=$$IEN^XUAF4("200DOD")
"RTN","HMPTFU2",97,0)
 I 'IEN Q "-1^Unknown Assigning Facility."
"RTN","HMPTFU2",98,0)
 I '$D(^DGCN(391.91,"ASCR",EDIPI,IEN)) Q "-1^EDIPI Record is unknown at this facility"
"RTN","HMPTFU2",99,0)
 I $D(^DGCN(391.91,"ASCR",EDIPI,IEN)) D
"RTN","HMPTFU2",100,0)
 .S EN=$O(^DGCN(391.91,"ASCR",EDIPI,$$IEN^XUAF4("200DOD"),""))
"RTN","HMPTFU2",101,0)
 .S DFN=$P($G(^DGCN(391.91,EN,0)),"^")
"RTN","HMPTFU2",102,0)
 .I DFN'="" S ICN=$$GETICN^MPIF001(DFN)
"RTN","HMPTFU2",103,0)
 .I DFN="" S ICN="-1^No Site Record associated with this entry"
"RTN","HMPTFU2",104,0)
 Q ICN
"RTN","HMPTFU2",105,0)
 ;
"RTN","HMPTFU2",106,0)
QUERYTF(PAT,ARY) ;a query for Treating Facility.
"RTN","HMPTFU2",107,0)
 ;INPUT   PAT - The patient's ICN
"RTN","HMPTFU2",108,0)
 ;        ARY - The array in which to return the Treating facility info.
"RTN","HMPTFU2",109,0)
 ;OUTPUT  A list of the Treating Facilities in the array provided from
"RTN","HMPTFU2",110,0)
 ;        the parameter.  It will be in the structure of x(1), x(2) etc.
"RTN","HMPTFU2",111,0)
 ;  Ex  X(1)=<ID> ^ <ID TYPE> ^ <Assigning Authority> ^ <Assigning Facility> ^ <ID Status>
"RTN","HMPTFU2",112,0)
 ;
"RTN","HMPTFU2",113,0)
 ; This is also a function call.  If there is an error then "1^error description" will be returned. 
"RTN","HMPTFU2",114,0)
 ; If no data is found the array will not be populated and "1^error description" will be returned.
"RTN","HMPTFU2",115,0)
 ;
"RTN","HMPTFU2",116,0)
 N PDFN,HMPER,LP,CTR
"RTN","HMPTFU2",117,0)
 ;
"RTN","HMPTFU2",118,0)
 ; ICN is not required
"RTN","HMPTFU2",119,0)
 I ('$D(ARY)) S HMPER="1^Parameter missing." G QUERYTFQ
"RTN","HMPTFU2",120,0)
 S HMPER=0,CTR=1
"RTN","HMPTFU2",121,0)
 S X="MPIF001" X ^%ZOSF("TEST") I '$T G QUERYTFQ
"RTN","HMPTFU2",122,0)
 S PDFN=$G(DFN)
"RTN","HMPTFU2",123,0)
 I '$G(PDFN) S HMPER="1^DFN is not defined." G QUERYTFQ
"RTN","HMPTFU2",124,0)
 ;SET FIRST ENTRY TO BE THE ICN - FULL ICN - PAT IS NOT THE ICN
"RTN","HMPTFU2",125,0)
 S @ARY@(CTR)=$$GETICN^MPIF001(PDFN)_"^NI^200M^USVHA^A"
"RTN","HMPTFU2",126,0)
 ;**856 - MVI 1371 (ckn)
"RTN","HMPTFU2",127,0)
 ;Loop through all TFIENs for site
"RTN","HMPTFU2",128,0)
 ;F LP=0:0 S LP=$O(^DGCN(391.91,"APAT",PDFN,LP)) Q:'LP  S TFIEN=$O(^(LP,"")) D SET(TFIEN,ARY,.CTR)
"RTN","HMPTFU2",129,0)
 F LP=0:0 S LP=$O(^DGCN(391.91,"APAT",PDFN,LP)) Q:'LP  D
"RTN","HMPTFU2",130,0)
 .S TFIEN=0 F  S TFIEN=$O(^DGCN(391.91,"APAT",PDFN,LP,TFIEN)) Q:'TFIEN  D
"RTN","HMPTFU2",131,0)
 ..D SET(TFIEN,ARY,.CTR)
"RTN","HMPTFU2",132,0)
 I $D(@ARY)'>9 S HMPER="1^Could not find Treating Facilities"
"RTN","HMPTFU2",133,0)
QUERYTFQ Q HMPER
"RTN","HMPTFU2",134,0)
 ;
"RTN","HMPTFU2",135,0)
SET(TFIEN,ARY,CTR) ;This sets the array with the treating facility list.
"RTN","HMPTFU2",136,0)
 ;  Ex  ARY(1)=<ID> ^ <ID TYPE> ^ <Assigning Facility> ^ <Assigning Authority> ^ <ID Status>
"RTN","HMPTFU2",137,0)
 N DGCN,INSTIEN,SOURCE,EN,SDFN,STATUS,SITEN,ID,IDTYPE,SITE,ASSAUTH,FOUND,NODE,NODE0,NODE2
"RTN","HMPTFU2",138,0)
 S DGCN(0)=$G(^DGCN(391.91,TFIEN,0)),SITEN=""
"RTN","HMPTFU2",139,0)
 ;
"RTN","HMPTFU2",140,0)
 S INSTIEN=$P($G(DGCN(0)),"^",2) ;            TREATING FACILITY LIST (#391.91) INSTITUTION field (#.02)
"RTN","HMPTFU2",141,0)
 I INSTIEN'="" S SITEN=$$STA^XUAF4(INSTIEN) ; STATION from Institution IEN
"RTN","HMPTFU2",142,0)
 S ID=$P(DGCN(0),"^") ;                       ID=Patient DFN field (#.01)
"RTN","HMPTFU2",143,0)
 ;
"RTN","HMPTFU2",144,0)
 S NODE2=$G(^DGCN(391.91,TFIEN,2))
"RTN","HMPTFU2",145,0)
 S SDFN=$P(NODE2,"^",2) ; SDFN="SOURCE ID"
"RTN","HMPTFU2",146,0)
 S STATUS=$P(NODE2,"^",3) ; STATUS="IDENTIFIER STATUS"
"RTN","HMPTFU2",147,0)
 S ASSAUTH=$P(NODE2,"^") ; Assigning Authority
"RTN","HMPTFU2",148,0)
 ;
"RTN","HMPTFU2",149,0)
 S NODE0=$G(^DGCN(391.91,TFIEN,0))
"RTN","HMPTFU2",150,0)
 S IDTYPE=$P(NODE0,"^",9) ; SOURCE ID TYPE
"RTN","HMPTFU2",151,0)
 ;
"RTN","HMPTFU2",152,0)
 I SITEN="200DOD"!(SITEN["200N") S IDTYPE="NI"
"RTN","HMPTFU2",153,0)
 I SITEN="200DOD" S ASSAUTH="USDOD"
"RTN","HMPTFU2",154,0)
 I IDTYPE="" S IDTYPE="PI"
"RTN","HMPTFU2",155,0)
 I ASSAUTH="" S ASSAUTH="USVHA"
"RTN","HMPTFU2",156,0)
 I SITEN["200N"&(IDTYPE="NI")&(ASSAUTH="USVHA") S ASSAUTH=""
"RTN","HMPTFU2",157,0)
 I IDTYPE="PI" S SITEN=$$TF2SITEN(TFIEN) Q:SITEN=""
"RTN","HMPTFU2",158,0)
 ;
"RTN","HMPTFU2",159,0)
 ; If VA Internal Patient ID, get site hash from domain associated with Treating Facility
"RTN","HMPTFU2",160,0)
 S NODE0=$G(^DGCN(391.91,TFIEN,0))
"RTN","HMPTFU2",161,0)
 S NODE2=$G(^DGCN(391.91,TFIEN,2))
"RTN","HMPTFU2",162,0)
 S SDFN=$P(NODE2,"^",2),STATUS=$P(NODE2,"^",3),IDTYPE=$P(NODE0,"^",9)
"RTN","HMPTFU2",163,0)
 ; DE2345 - MBS 9/15/2015; Only return active entries
"RTN","HMPTFU2",164,0)
 I STATUS'="A" Q
"RTN","HMPTFU2",165,0)
 S ASSAUTH=$P(NODE2,"^")
"RTN","HMPTFU2",166,0)
 I SITEN="200DOD"!(SITEN["200N") S IDTYPE="NI"
"RTN","HMPTFU2",167,0)
 I SITEN="200DOD" S ASSAUTH="USDOD"
"RTN","HMPTFU2",168,0)
 I IDTYPE="" S IDTYPE="PI"
"RTN","HMPTFU2",169,0)
 I ASSAUTH="" S ASSAUTH="USVHA"
"RTN","HMPTFU2",170,0)
 I SITEN["200N"&(IDTYPE="NI")&(ASSAUTH="USVHA") S ASSAUTH=""
"RTN","HMPTFU2",171,0)
 I SDFN'="" S CTR=CTR+1,@ARY@(CTR)=SDFN_"^"_IDTYPE_"^"_SITEN_"^"_ASSAUTH_"^"_STATUS,FOUND=1
"RTN","HMPTFU2",172,0)
 Q
"RTN","HMPTFU2",173,0)
TF2SITEN(TFIEN) ;Find the DOMAIN associated with the TREATING FACILITY and return the station number.
"RTN","HMPTFU2",174,0)
 ;Currently, our test systems' station numbers are not set up for local DOMAINs. This would result in these
"RTN","HMPTFU2",175,0)
 ;entries failing all the time, thus breaking existing behavior. For the time being, we will default to
"RTN","HMPTFU2",176,0)
 ;the old behavior if we cannot locate a station number as a temporary measure. In the future, we need to
"RTN","HMPTFU2",177,0)
 ;fix the test systems to set up the station numbers correctly, and then change this code to return
"RTN","HMPTFU2",178,0)
 ;an empty string if the DOMAIN could not be resolved.
"RTN","HMPTFU2",179,0)
 S SITEN=""
"RTN","HMPTFU2",180,0)
 ;S SITEN=$$SYS^HMPUTILS ;<--NOT DEAD CODE
"RTN","HMPTFU2",181,0)
 Q:'+$G(TFIEN) ""
"RTN","HMPTFU2",182,0)
 Q:'$D(^DGCN(391.91,TFIEN)) ""
"RTN","HMPTFU2",183,0)
 ;Get station number from Institution file (pointed to from Treating Facility List)
"RTN","HMPTFU2",184,0)
 N INSTNUM,STNNUM,DONE,I
"RTN","HMPTFU2",185,0)
 S INSTNUM=$P($G(^DGCN(391.91,TFIEN,0)),U,2) Q:'+INSTNUM SITEN
"RTN","HMPTFU2",186,0)
 S STNNUM=$P($G(^DIC(4,INSTNUM,99)),U) Q:'+STNNUM SITEN
"RTN","HMPTFU2",187,0)
 ;DE2345 - MBS 9/15/2015; Do not return entries with station numbers=+200
"RTN","HMPTFU2",188,0)
 I STNNUM?1"200".A Q ""
"RTN","HMPTFU2",189,0)
 ;Domain file doesn't have an x-ref on station number, so we have to brute-force it
"RTN","HMPTFU2",190,0)
 S (I,DONE)=0 F  S I=$O(^DIC(4.2,I)) Q:'+I  D  Q:DONE
"RTN","HMPTFU2",191,0)
 . I $P(^DIC(4.2,I,0),U,13)=STNNUM S SITEN=$$BASE^XLFUTL($$CRC16^XLFCRC($P(^DIC(4.2,I,0),U)),10,16),DONE=1
"RTN","HMPTFU2",192,0)
 Q SITEN
"RTN","HMPTFU2",193,0)
 ;
"RTN","HMPTOOLS")
0^1^B11387818
"RTN","HMPTOOLS",1,0)
HMPTOOLS ;ASMR/JD - More HMP utilities ; 9/25/15 10:59am
"RTN","HMPTOOLS",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPTOOLS",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPTOOLS",4,0)
 ;
"RTN","HMPTOOLS",5,0)
 Q
"RTN","HMPTOOLS",6,0)
 ;
"RTN","HMPTOOLS",7,0)
CHKXTMP(RSLT) ; RPC(HMP CHKXTMP) to return the state of ^XTMP data
"RTN","HMPTOOLS",8,0)
 ; RSLT - Return array:
"RTN","HMPTOOLS",9,0)
 ;        "There are a total of xxx patients in queue.  yyy Complete  zzz Staging"
"RTN","HMPTOOLS",10,0)
 ;        Where xxx,yyy, and zzz are zero or greater.
"RTN","HMPTOOLS",11,0)
 ;        NOTE: If xxx is zero, then the sentence after "queue." will NOT be displayed
"RTN","HMPTOOLS",12,0)
 ;
"RTN","HMPTOOLS",13,0)
 ; Goes through ^XTMP and figures out the total number of patients, how many
"RTN","HMPTOOLS",14,0)
 ; have completed data staging, and how many are still staging.
"RTN","HMPTOOLS",15,0)
 ; There is code to allow a bit more information than requested to be stored
"RTN","HMPTOOLS",16,0)
 ; in a global (^TMP("FINDSTATUS",$J)) for future needs (e.g. Complete/staging
"RTN","HMPTOOLS",17,0)
 ; is broken down by domain).  *** This currently commented out ***.
"RTN","HMPTOOLS",18,0)
 ;
"RTN","HMPTOOLS",19,0)
 ; ^XTMP("HMPFX~<server id>~DFN",0,"status",<domain>)=STATUS, where STATUS=1 means
"RTN","HMPTOOLS",20,0)
 ; data is completely staged and 0 means data is being staged but not complete yet.
"RTN","HMPTOOLS",21,0)
 ;
"RTN","HMPTOOLS",22,0)
 ; GLB    = ^TMP("FINDSTATUS",$J)  (FUTURE USE)
"RTN","HMPTOOLS",23,0)
 ; HMPBAT = "HMPFX~<sever id>~DFN"
"RTN","HMPTOOLS",24,0)
 ; HMPCM  = Number of patients who have completed staging
"RTN","HMPTOOLS",25,0)
 ; HMPCMP = Number of domains that have completed staging for a patient
"RTN","HMPTOOLS",26,0)
 ; HMPCNT = Domain status (1 = complete; 0 = staging)
"RTN","HMPTOOLS",27,0)
 ; HMPDFN = Patient IEN
"RTN","HMPTOOLS",28,0)
 ; HMPDOM = Patient domain (e.g. lab, med, allergy, etc.)
"RTN","HMPTOOLS",29,0)
 ; HMPST  = Number of patients who are still in the staging state
"RTN","HMPTOOLS",30,0)
 ; HMPSTG = Number of domains that are still staging for a patient
"RTN","HMPTOOLS",31,0)
 ; HMPT   = HMPCM+HMPST
"RTN","HMPTOOLS",32,0)
 ;
"RTN","HMPTOOLS",33,0)
 N GLB,HMPBAT,HMPCM,HMPCMP,HMPCNT,HMPDFN,HMPDOM,HMPST,HMPSTG,HMPT
"RTN","HMPTOOLS",34,0)
 ;S GLB=$NA(^TMP("FINDSTATUS",$J))
"RTN","HMPTOOLS",35,0)
 ;K @GLB
"RTN","HMPTOOLS",36,0)
 S HMPBAT="HMPFX",(HMPCM,HMPST)=0
"RTN","HMPTOOLS",37,0)
 F  S HMPBAT=$O(^XTMP(HMPBAT)) Q:$E(HMPBAT,1,5)'="HMPFX"  D
"RTN","HMPTOOLS",38,0)
 .S HMPDOM="",HMPDFN=$P(HMPBAT,"~",3),(HMPCMP,HMPSTG)=0
"RTN","HMPTOOLS",39,0)
 .I HMPDFN'=+HMPDFN Q  ; Patients ONLY!
"RTN","HMPTOOLS",40,0)
 .F  S HMPDOM=$O(^XTMP(HMPBAT,0,"status",HMPDOM)) Q:HMPDOM']""  D
"RTN","HMPTOOLS",41,0)
 ..S HMPCNT=^XTMP(HMPBAT,0,"status",HMPDOM)
"RTN","HMPTOOLS",42,0)
 ..I HMPCNT=1 D
"RTN","HMPTOOLS",43,0)
 ...S HMPCMP=HMPCMP+1
"RTN","HMPTOOLS",44,0)
 ...;S @GLB@(HMPDFN,HMPDOM)="Complete"
"RTN","HMPTOOLS",45,0)
 ..I HMPCNT'=1 D
"RTN","HMPTOOLS",46,0)
 ...S HMPSTG=HMPSTG+1
"RTN","HMPTOOLS",47,0)
 ...;S @GLB@(HMPDFN,HMPDOM)="Staging"
"RTN","HMPTOOLS",48,0)
 .I HMPSTG>0 D
"RTN","HMPTOOLS",49,0)
 ..S HMPST=HMPST+1
"RTN","HMPTOOLS",50,0)
 ..;S @GLB@(HMPDFN)="Staging"
"RTN","HMPTOOLS",51,0)
 .I HMPSTG'>0 D
"RTN","HMPTOOLS",52,0)
 ..S HMPCM=HMPCM+1
"RTN","HMPTOOLS",53,0)
 ..;S @GLB@(HMPDFN)="Complete"
"RTN","HMPTOOLS",54,0)
 S HMPT=HMPCM+HMPST
"RTN","HMPTOOLS",55,0)
 K RSLT
"RTN","HMPTOOLS",56,0)
 S RSLT(1)="There are a total of "_HMPT_" patient"_$S(HMPT=1:"",1:"s")_" in queue."
"RTN","HMPTOOLS",57,0)
 I HMPCM>0 S RSLT(1)=RSLT(1)_"  "_HMPCM_" Complete"
"RTN","HMPTOOLS",58,0)
 I HMPST>0 S RSLT(1)=RSLT(1)_"  "_HMPST_" Staging"
"RTN","HMPTOOLS",59,0)
 Q
"RTN","HMPTOOLS",60,0)
 ;
"RTN","HMPTOOLS",61,0)
MON ; Monitor the progress of ^XTMP growth.  JD - 6/11/15
"RTN","HMPTOOLS",62,0)
 N DONE,SIZE,RES
"RTN","HMPTOOLS",63,0)
 D HOME^%ZIS
"RTN","HMPTOOLS",64,0)
 S DONE=-1
"RTN","HMPTOOLS",65,0)
 F  Q:DONE'=-1  D
"RTN","HMPTOOLS",66,0)
 .S SIZE=+$P($P($$GETSIZE(),U)/1000+.5,".")
"RTN","HMPTOOLS",67,0)
 .W @IOF,"eHMP usage of ^XTMP = "_SIZE_"  kilo byte(s)"
"RTN","HMPTOOLS",68,0)
 .D CHKXTMP(.RES)
"RTN","HMPTOOLS",69,0)
 .W !!,RES(1)
"RTN","HMPTOOLS",70,0)
 .W !!,"Hit any key to exit the monitor"
"RTN","HMPTOOLS",71,0)
 .X "R *DONE:2"
"RTN","HMPTOOLS",72,0)
 Q
"RTN","HMPTOOLS",73,0)
 ;
"RTN","HMPTOOLS",74,0)
SIZE(RSLT) ; calculate the size of XTMP global
"RTN","HMPTOOLS",75,0)
 S RSLT(1)=$P($$GETSIZE(),"^")
"RTN","HMPTOOLS",76,0)
 Q
"RTN","HMPTOOLS",77,0)
 ;
"RTN","HMPTOOLS",78,0)
GETSIZE(HMPMODE,HMPSRVN) ; -- returns current aggregate extract size for extracts waiting to be sent to HMP servers
"RTN","HMPTOOLS",79,0)
 ; input: HMPMODE := [ estimate - use estimated domain average sizes (default) |
"RTN","HMPTOOLS",80,0)
 ;                     actual - walk though object nodes to calculate using $LENGTH ]
"RTN","HMPTOOLS",81,0)
 ;        HMPSRVN := name of HMP server [optional - defaults to all HMP servers]
"RTN","HMPTOOLS",82,0)
 ; returns: total size in bytes ^ object count
"RTN","HMPTOOLS",83,0)
 ;
"RTN","HMPTOOLS",84,0)
 ; -- loop thru extracts for server(s) 
"RTN","HMPTOOLS",85,0)
 N ROOT,BATCH,TASK,DOMAIN,OBJS,OBJCNT,OBJSIZES,TOTAL
"RTN","HMPTOOLS",86,0)
 S (OBJCNT,TOTAL)=0
"RTN","HMPTOOLS",87,0)
 S ROOT="HMPFX~"_$S($G(HMPSRVN)]"":HMPSRVN_"~",1:"")
"RTN","HMPTOOLS",88,0)
 S BATCH=ROOT
"RTN","HMPTOOLS",89,0)
 F  S BATCH=$O(^XTMP(BATCH)) Q:$E(BATCH,1,$L(ROOT))'=ROOT  D
"RTN","HMPTOOLS",90,0)
 . S TASK=0 F  S TASK=$O(^XTMP(BATCH,TASK)) Q:'TASK  D
"RTN","HMPTOOLS",91,0)
 . . S DOMAIN="" F  S DOMAIN=$O(^XTMP(BATCH,TASK,DOMAIN)) Q:DOMAIN=""  D
"RTN","HMPTOOLS",92,0)
 . . . S OBJS=+$O(^XTMP(BATCH,TASK,DOMAIN," "),-1)
"RTN","HMPTOOLS",93,0)
 . . . S OBJCNT=OBJCNT+OBJS
"RTN","HMPTOOLS",94,0)
 . . . S TOTAL=TOTAL+$$WALK(BATCH,TASK,DOMAIN) Q
"RTN","HMPTOOLS",95,0)
 . . . S TOTAL=TOTAL+(OBJS*$G(OBJSIZES($P(DOMAIN,"#")),1000))
"RTN","HMPTOOLS",96,0)
 Q TOTAL_"^"_OBJCNT
"RTN","HMPTOOLS",97,0)
 ;
"RTN","HMPTOOLS",98,0)
WALK(BATCH,TASK,DOMAIN) ; -- walk through domain objectS in task to get actual size
"RTN","HMPTOOLS",99,0)
 N OBJ,SIZE,NODE
"RTN","HMPTOOLS",100,0)
 S (OBJ,SIZE)=0
"RTN","HMPTOOLS",101,0)
 F  S OBJ=$O(^XTMP(BATCH,TASK,DOMAIN,OBJ)) Q:'OBJ  D
"RTN","HMPTOOLS",102,0)
 . S NODE=0 F  S NODE=$O(^XTMP(BATCH,TASK,DOMAIN,OBJ,NODE)) Q:'NODE  S SIZE=SIZE+$L($G(^(NODE)))
"RTN","HMPTOOLS",103,0)
 Q SIZE
"RTN","HMPTRPC")
1^190
"RTN","HMPTRPC1")
1^191
"RTN","HMPUPD")
0^126^B25123694
"RTN","HMPUPD",1,0)
HMPUPD ;SLC/MKB,ASMR/RRB - Update local data ;11/13/13 2:11pm
"RTN","HMPUPD",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPUPD",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPUPD",4,0)
 ;
"RTN","HMPUPD",5,0)
 Q
"RTN","HMPUPD",6,0)
 ;
"RTN","HMPUPD",7,0)
PHONE(HMP,JSON) ; RPC = HMP PUT PHONE
"RTN","HMPUPD",8,0)
 Q
"RTN","HMPUPD",9,0)
PUT(HMP,DFN,CMD,JSON) ; -- update phone numbers
"RTN","HMPUPD",10,0)
 ; RPC = HMP PUT DEMOGRAPHICS
"RTN","HMPUPD",11,0)
 ;
"RTN","HMPUPD",12,0)
 N ARRAY,HMPERR,ERR,HOME,CELL,WORK,NOK,ECON,X,OK,HMPSYS
"RTN","HMPUPD",13,0)
 S HMPSYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPUPD",14,0)
 D DECODE^HMPJSON("JSON","ARRAY","HMPERR")
"RTN","HMPUPD",15,0)
 I $D(HMPERR) D  G PQ
"RTN","HMPUPD",16,0)
 . K ARRAY N HMPTMP,HMPTXT
"RTN","HMPUPD",17,0)
 . S HMPTXT(1)="Problem decoding json input."
"RTN","HMPUPD",18,0)
 . D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.JSON)
"RTN","HMPUPD",19,0)
 . K HMPERR D ENCODE^HMPJSON("HMPTMP","ARRAY","HMPERR")
"RTN","HMPUPD",20,0)
 . S HMP(.5)="{""apiVersion"":""1.01"",""error"":{"
"RTN","HMPUPD",21,0)
 . M HMP(1)=ARRAY
"RTN","HMPUPD",22,0)
 . S HMP(2)="}}"
"RTN","HMPUPD",23,0)
 ;
"RTN","HMPUPD",24,0)
 S DFN=+$G(DFN) I DFN<1 S ERR=$$ERR(1,DFN) G PHQ
"RTN","HMPUPD",25,0)
 S CMD=$G(CMD) ;can only update phone#
"RTN","HMPUPD",26,0)
 N HMPX,HMPDR,I,J S (HMPDR,HOME,CELL,WORK,NOK,ECON)=""
"RTN","HMPUPD",27,0)
 D VAL("old")
"RTN","HMPUPD",28,0)
 S I="" F  S I=$O(ARRAY("telecom",I)) Q:I<1  D
"RTN","HMPUPD",29,0)
 . I $G(ARRAY("telecom",I,"use"))="H" D  Q
"RTN","HMPUPD",30,0)
 .. S HOME=$G(ARRAY("telecom",I,"value"))
"RTN","HMPUPD",31,0)
 .. I HOME=HOME("old") S HOME="" Q           ;no change
"RTN","HMPUPD",32,0)
 .. I "@"[HOME S:$L(HOME("old")) HOME="@" Q  ;delete
"RTN","HMPUPD",33,0)
 .. S HOME=$$FORMAT(HOME),ARRAY("telecom",I,"value")=HOME
"RTN","HMPUPD",34,0)
 . I $G(ARRAY("telecom",I,"use"))="MC" D  Q
"RTN","HMPUPD",35,0)
 .. S CELL=$G(ARRAY("telecom",I,"value"))
"RTN","HMPUPD",36,0)
 .. I CELL=CELL("old") S CELL="" Q           ;no change
"RTN","HMPUPD",37,0)
 .. I "@"[CELL S:$L(CELL("old")) CELL="@" Q  ;delete
"RTN","HMPUPD",38,0)
 .. S CELL=$$FORMAT(CELL),ARRAY("telecom",I,"value")=CELL
"RTN","HMPUPD",39,0)
 . I $G(ARRAY("telecom",I,"use"))="WP" D  Q
"RTN","HMPUPD",40,0)
 .. S WORK=$G(ARRAY("telecom",I,"value"))
"RTN","HMPUPD",41,0)
 .. I WORK=WORK("old") S WORK="" Q           ;no change
"RTN","HMPUPD",42,0)
 .. I "@"[WORK S:$L(WORK("old")) WORK="@" Q  ;delete
"RTN","HMPUPD",43,0)
 .. S WORK=$$FORMAT(WORK),ARRAY("telecom",I,"value")=WORK
"RTN","HMPUPD",44,0)
 S I="" F  S I=$O(ARRAY("contact",I)) Q:I<1  D
"RTN","HMPUPD",45,0)
 . S X=$P($G(ARRAY("contact",I,"typeCode")),":",4) Q:X=""  ;NOK or ECON
"RTN","HMPUPD",46,0)
 . S J="" F  S J=$O(ARRAY("contact",I,"telecom",J)) Q:J<1  D
"RTN","HMPUPD",47,0)
 .. Q:$G(ARRAY("contact",I,"telecom",J,"use"))'="H"
"RTN","HMPUPD",48,0)
 .. S @X=$G(ARRAY("contact",I,"telecom",J,"value"))
"RTN","HMPUPD",49,0)
 .. I @X=@X@("old") S @X="" Q           ;no change
"RTN","HMPUPD",50,0)
 .. I "@"[@X S:$L(@X@("old")) @X="@" Q  ;delete
"RTN","HMPUPD",51,0)
 .. S @X=$$FORMAT(@X),ARRAY("contact",I,"telecom",J,"value")=@X
"RTN","HMPUPD",52,0)
 .. ; X="NOK" S NOK=$$FORMAT(NOK),ARRAY("contact",I,"telecom",J,"value")=NOK
"RTN","HMPUPD",53,0)
 ;
"RTN","HMPUPD",54,0)
 S:$L(HOME) HMPX(.131)=HOME,HMPDR=".131"
"RTN","HMPUPD",55,0)
 S:$L(CELL) HMPX(.134)=CELL,HMPDR=HMPDR_$S($L(HMPDR):";",1:"")_".134"
"RTN","HMPUPD",56,0)
 S:$L(WORK) HMPX(.132)=WORK,HMPDR=HMPDR_$S($L(HMPDR):";",1:"")_".132"
"RTN","HMPUPD",57,0)
 S:$L(ECON) HMPX(.339)=ECON,HMPDR=HMPDR_$S($L(HMPDR):";",1:"")_".339"
"RTN","HMPUPD",58,0)
 S:$L(NOK) HMPX(.219)=NOK,HMPDR=HMPDR_$S($L(HMPDR):";",1:"")_".219"
"RTN","HMPUPD",59,0)
 I '$O(HMPX(0)) S ERR=$$ERR(3) G PHQ
"RTN","HMPUPD",60,0)
 D EDIT^VAFCPTED(DFN,"HMPX",HMPDR)
"RTN","HMPUPD",61,0)
 S X=$G(^DPT(DFN,.13)),OK=1 D  ;check global ;ICR 10035 DE2818 ASF 11/12/15
"RTN","HMPUPD",62,0)
 . I $L(HOME),$S(HOME="@":$L($P(X,U)),1:(HMPX(.131)'=$P(X,U))) S OK=0
"RTN","HMPUPD",63,0)
 . I $L(CELL),$S(CELL="@":$L($P(X,U,4)),1:(HMPX(.134)'=$P(X,U,4))) S OK=0
"RTN","HMPUPD",64,0)
 . I $L(WORK),$S(WORK="@":$L($P(X,U,2)),1:(HMPX(.132)'=$P(X,U,2))) S OK=0
"RTN","HMPUPD",65,0)
 . I $L(ECON) S X=$G(^DPT(DFN,.33)) I $S(ECON="@":$L($P(X,U,9)),1:(HMPX(.339)'=$P(X,U,9))) S OK=0 ;ICR 10035 DE2818 ASF 11/12/15
"RTN","HMPUPD",66,0)
 . I $L(NOK) S X=$G(^DPT(DFN,.21)) I $S(NOK="@":$L($P(X,U,9)),1:(HMPX(.219)'=$P(X,U,9))) S OK=0 ;ICR 10035 DE2818 ASF 11/12/15
"RTN","HMPUPD",67,0)
 S:'OK ERR=$$ERR(5)
"RTN","HMPUPD",68,0)
 ;
"RTN","HMPUPD",69,0)
PHQ ; add item count and terminating characters
"RTN","HMPUPD",70,0)
 I $D(ERR) S HMP(1)="{""apiVersion"":""1.01"",""error"":{""message"":"""_ERR_"""},""success"":false}" G PQ
"RTN","HMPUPD",71,0)
 ; HMP="{""apiVersion"":""1.01"",""data"":{""updated"":"_""""_$$HL7NOW_""""_",""localId"":"""_DFN_"""},""success"":true}"
"RTN","HMPUPD",72,0)
 D POSTX^HMPEVNT("patient",DFN)
"RTN","HMPUPD",73,0)
 D ENCODE^HMPJSON("ARRAY","HMP","HMPERR")
"RTN","HMPUPD",74,0)
 I $D(HMPERR) D  G PQ
"RTN","HMPUPD",75,0)
 . K HMP N HMPTMP,HMPTXT
"RTN","HMPUPD",76,0)
 . S HMPTXT(1)="Problem encoding json output."
"RTN","HMPUPD",77,0)
 . D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.ARRAY)
"RTN","HMPUPD",78,0)
 . K HMPERR D ENCODE^HMPJSON("HMPTMP","HMP","HMPERR")
"RTN","HMPUPD",79,0)
 . S HMP(.5)="{""apiVersion"":""1.01"",""error"":{",HMP(99)="}}"
"RTN","HMPUPD",80,0)
 S HMP(.5)="{""apiVersion"":""1.01"",""params"":{"_$$SYS^HMPDJ_"},""success"":true,"
"RTN","HMPUPD",81,0)
 S HMP(.6)="""data"":{""updated"":"""_$$HL7NOW^HMPDJ_""",""totalItems"":1,""items"":["
"RTN","HMPUPD",82,0)
 S HMP(99)="]}}"
"RTN","HMPUPD",83,0)
PQ ; exit
"RTN","HMPUPD",84,0)
 K ^TMP($J,"HMP")
"RTN","HMPUPD",85,0)
 M ^TMP($J,"HMP")=HMP
"RTN","HMPUPD",86,0)
 K HMP S HMP=$NA(^TMP($J,"HMP"))
"RTN","HMPUPD",87,0)
 Q
"RTN","HMPUPD",88,0)
 ;
"RTN","HMPUPD",89,0)
FORMAT(X) ; -- enforce (xxx)xxx-xxxx phone format
"RTN","HMPUPD",90,0)
 S X=$G(X) I X?1"("3N1")"3N1"-"4N.E Q X
"RTN","HMPUPD",91,0)
 N P,N,I,Y S P=""
"RTN","HMPUPD",92,0)
 F I=1:1:$L(X) S N=$E(X,I) I N=+N S P=P_N
"RTN","HMPUPD",93,0)
 S:$L(P)<10 P=$E("0000000000",1,10-$L(P))_P
"RTN","HMPUPD",94,0)
 S Y=$S(P:"("_$E(P,1,3)_")"_$E(P,4,6)_"-"_$E(P,7,10),1:"")
"RTN","HMPUPD",95,0)
 Q Y
"RTN","HMPUPD",96,0)
 ;
"RTN","HMPUPD",97,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","HMPUPD",98,0)
 Q $P($$FMTHL7^XLFDT($$NOW^XLFDT),"-")
"RTN","HMPUPD",99,0)
 ;
"RTN","HMPUPD",100,0)
ERR(X,VAL) ; -- return error message
"RTN","HMPUPD",101,0)
 N MSG  S MSG="Error"
"RTN","HMPUPD",102,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","HMPUPD",103,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","HMPUPD",104,0)
 I X=3  S MSG="Data not changed"
"RTN","HMPUPD",105,0)
 I X=4  S MSG="Unable to create new object"
"RTN","HMPUPD",106,0)
 I X=5  S MSG="Update failed"
"RTN","HMPUPD",107,0)
 I X=99 S MSG="Unknown request"
"RTN","HMPUPD",108,0)
 Q MSG
"RTN","HMPUPD",109,0)
 ;
"RTN","HMPUPD",110,0)
VAL(SUB) ; -- pull values from ^DPT
"RTN","HMPUPD",111,0)
 N X S X=$G(^DPT(DFN,.13)) ;ICR 10035 DE2818 ASF 11/12/15
"RTN","HMPUPD",112,0)
 S HOME(SUB)=$P(X,U),CELL(SUB)=$P(X,U,4),WORK(SUB)=$P(X,U,2)
"RTN","HMPUPD",113,0)
 S X=$G(^DPT(DFN,.33)),ECON(SUB)=$P(X,U,9) ;ICR 10035 DE2818 ASF 11/12/15
"RTN","HMPUPD",114,0)
 S X=$G(^DPT(DFN,.21)),NOK(SUB)=$P(X,U,9) ;ICR 10035 DE2818 ASF 11/12/15
"RTN","HMPUPD",115,0)
 Q
"RTN","HMPUTIL1")
0^127^B42764058
"RTN","HMPUTIL1",1,0)
HMPUTIL1 ;SLC/AGP,ASMR/RRB,CPC - HMP utilities routine ; Jan 29, 2016 13:09:59
"RTN","HMPUTIL1",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPUTIL1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPUTIL1",4,0)
 ;
"RTN","HMPUTIL1",5,0)
 Q
"RTN","HMPUTIL1",6,0)
 ;
"RTN","HMPUTIL1",7,0)
 ; ADHOC subroutine refactored for DE1788
"RTN","HMPUTIL1",8,0)
ADHOC(HMPDMINP,HMPFCNT,DFN) ; Add syncStart metastamp and syncStatus to unsolicited updates
"RTN","HMPUTIL1",9,0)
 Q:($G(HMPDMINP)="")!($G(DFN)="")  ; domain and DFN required
"RTN","HMPUTIL1",10,0)
 ; HMPFCNT = count of objects, passed by ref.
"RTN","HMPUTIL1",11,0)
 ; expects HMPFSTR (set in HMPDJFSG) is ^XTMP freshness stream subscript 
"RTN","HMPUTIL1",12,0)
 ; the heading from APIHDR^HMPDJFSG is in ^TMP("HMPF",$J) already
"RTN","HMPUTIL1",13,0)
 ; the JSON built here is placed inside a JSON array, with a '[' after the heading
"RTN","HMPUTIL1",14,0)
 ;
"RTN","HMPUTIL1",15,0)
 N HMPA4JSN,HMPDAT,HMPDMTOT,HMPDOM,HMPID,HMPJSERR,HMPJSON,HMPSUB,I,J,LSTLN,QTE,SUB,X,Y,DELJSON
"RTN","HMPUTIL1",16,0)
 N HMPJSNSY
"RTN","HMPUTIL1",17,0)
 ; HMPA4JSN, HMPJSON, HMPJSERR - used for JSON encoder
"RTN","HMPUTIL1",18,0)
 ; HMPA4JSN - array to encode
"RTN","HMPUTIL1",19,0)
 ; HMPJSON - JSON result
"RTN","HMPUTIL1",20,0)
 ; HMPJSERR - error text from encoder
"RTN","HMPUTIL1",21,0)
 ; QTE - " character
"RTN","HMPUTIL1",22,0)
 ; HMPJSNSY - The system id value for the JSON Encoder, If fully numeric it needs a " prepended
"RTN","HMPUTIL1",23,0)
 S HMPDAT("DELDATE")="",QTE=$C(34)
"RTN","HMPUTIL1",24,0)
 S HMPDMTOT=0  ; domain total
"RTN","HMPUTIL1",25,0)
 ; Save delete date/time for later use.
"RTN","HMPUTIL1",26,0)
 I $G(ACT)="@" D
"RTN","HMPUTIL1",27,0)
 .S Y=$$FMTH^XLFDT($P(HMPFSTRM,"~",3))  ; Get the date from fresh stream (HMPFS~<server>~<date>)
"RTN","HMPUTIL1",28,0)
 .S Y=$$HTFM^XLFDT($P(Y,",")_","_$G(ARGS("hmp-fst"),0))  ; Add delete time stored in ARGS("hmp-fst")
"RTN","HMPUTIL1",29,0)
 .S HMPDAT("DELDATE")=$$JSONDT^HMPUTILS(Y)  ; delete date/time into JSON format
"RTN","HMPUTIL1",30,0)
 .S DELJSON="{""pid"":"""_$$PID^HMPDJFS(DFN)_""",""removed"":""true"",""stampTime"":"_$$JSONDT^HMPUTILS(Y)_",""uid"":"""_$G(HMP97)_"""}"
"RTN","HMPUTIL1",31,0)
 ;
"RTN","HMPUTIL1",32,0)
 S HMPA4JSN=$NA(^TMP($J,"ARRAY4JSON")) K @HMPA4JSN ; data array for JSON
"RTN","HMPUTIL1",33,0)
 S HMPJSON=$NA(^TMP($J,"JSONRESULT")) K @HMPJSON  ; JSON result
"RTN","HMPUTIL1",34,0)
 ;
"RTN","HMPUTIL1",35,0)
 S HMPDAT("STAMPTIME")=$$EN^HMPSTMP("NOW"),HMPID=$$SYS^HMPUTILS,HMPJSNSY=$S(+HMPID=HMPID:""""_HMPID,1:HMPID)
"RTN","HMPUTIL1",36,0)
 ;
"RTN","HMPUTIL1",37,0)
 D:DFN'="OPD"  ; get PID data for patient
"RTN","HMPUTIL1",38,0)
 .N ITM,VAL  ; $$PIDS returns: ,"pid":"9E4B;3","systemId":"9E4B","localId":"3","icn":"10207V420718"
"RTN","HMPUTIL1",39,0)
 .S Y=$$PIDS^HMPDJFS(DFN)  ; parse Y, remove quotes save values in HMPID('item')
"RTN","HMPUTIL1",40,0)
 .F J=2:1:$L(Y,",") S X=$P(Y,",",J),ITM=$TR($P(X,":"),QTE),VAL=$TR($P(X,":",2),QTE) S:ITM]"" HMPID(ITM)=VAL
"RTN","HMPUTIL1",41,0)
 ;
"RTN","HMPUTIL1",42,0)
 ; transform domain name for quick orders to match the uid
"RTN","HMPUTIL1",43,0)
 S HMPDOM=HMPDMINP I HMPDOM="quick" S HMPDOM="qo"
"RTN","HMPUTIL1",44,0)
 ;
"RTN","HMPUTIL1",45,0)
 ; stamp time put into HMPDAT("STAMPTIME")
"RTN","HMPUTIL1",46,0)
 S HMPSUB=""
"RTN","HMPUTIL1",47,0)
 S HMPDAT("STAMPTIME")=""
"RTN","HMPUTIL1",48,0)
 F  S HMPSUB=$O(^TMP("HMP",$J,HMPSUB)) Q:'HMPSUB  D
"RTN","HMPUTIL1",49,0)
 .N DONE,HMPN,NEXT,SRCH,HMPDATP ;cpc 2015/10/21
"RTN","HMPUTIL1",50,0)
 .S SRCH="""uid"""_":"_""""_"urn:va:"_HMPDOM_":"
"RTN","HMPUTIL1",51,0)
 .; Search back from last record - but include start of next to cover crossovers
"RTN","HMPUTIL1",52,0)
 .S HMPDAT="" ;cpc 2015/10/21
"RTN","HMPUTIL1",53,0)
 .S HMPN="",HMPDAT("UID")="",DONE=""
"RTN","HMPUTIL1",54,0)
 .F  S HMPN=$O(^TMP("HMP",$J,HMPSUB,HMPN),-1) Q:'HMPN  D  Q:DONE
"RTN","HMPUTIL1",55,0)
 ..S HMPDATP=$E(HMPDAT,1,100) ;cpc 2015/10/21
"RTN","HMPUTIL1",56,0)
 ..S HMPDAT=$G(^TMP("HMP",$J,HMPSUB,HMPN)) Q:HMPDAT="null"!'$L(HMPDAT)
"RTN","HMPUTIL1",57,0)
 ..S HMPDAT=HMPDAT_HMPDATP ;cpc 2015/10/21 - look for crossover data
"RTN","HMPUTIL1",58,0)
 ..;Search for last occurrence of uid in record (this will be parent)
"RTN","HMPUTIL1",59,0)
 ..I '$G(HMPDAT(HMPSUB,"UID")),$F(HMPDAT,SRCH) F I=2:1 S NEXT=$P($P(HMPDAT,SRCH,I),QTE) Q:NEXT=""  S HMPDAT(HMPSUB,"UID")=NEXT ;cpc 2015/10/21
"RTN","HMPUTIL1",60,0)
 ..;BL;CPC Extract stamptime if present (patient data ONLY)
"RTN","HMPUTIL1",61,0)
 ..;cpc 2015/10/09 - conditionalize tests
"RTN","HMPUTIL1",62,0)
 ..I '$G(HMPDAT(HMPSUB,"STAMPTIME")),$F(HMPDAT,"stampTime") D  ;cpc 2015/10/21
"RTN","HMPUTIL1",63,0)
 ...S HMPDAT(HMPSUB,"STAMPTIME")=$P($P(HMPDAT,"""stampTime"":",2),",")
"RTN","HMPUTIL1",64,0)
 ...;Keep the latest stamptime so that we can use it for the overall metastamp
"RTN","HMPUTIL1",65,0)
 ...I HMPDAT(HMPSUB,"STAMPTIME")>HMPDAT("STAMPTIME") S HMPDAT("STAMPTIME")=HMPDAT(HMPSUB,"STAMPTIME")
"RTN","HMPUTIL1",66,0)
 ..;Patient data requires both UID and stampTime to be complete
"RTN","HMPUTIL1",67,0)
 ..S:$G(HMPDAT(HMPSUB,"UID"))&$G(HMPDAT(HMPSUB,"STAMPTIME")) DONE=1
"RTN","HMPUTIL1",68,0)
 ..;cpc 2015/10/09 - end
"RTN","HMPUTIL1",69,0)
 ;
"RTN","HMPUTIL1",70,0)
 ; HMP97 is uid, SET in FRESHITM^HMPDJFSG
"RTN","HMPUTIL1",71,0)
 I $G(ACT)="@" S HMPDAT("UID")=$P($G(HMP97),":",4,99)
"RTN","HMPUTIL1",72,0)
 ;
"RTN","HMPUTIL1",73,0)
 S @HMPA4JSN@("collection")=$S(DFN="OPD":"OPDsyncStart",1:"syncStart")
"RTN","HMPUTIL1",74,0)
 I DFN="OPD" S @HMPA4JSN@("systemId")=$P(HMPID,";") ; set systemId for OPD
"RTN","HMPUTIL1",75,0)
 S X="" F  S X=$O(HMPID(X)) Q:X=""  S @HMPA4JSN@(X)=HMPID(X)  ; add pid, systemId, localId, icn
"RTN","HMPUTIL1",76,0)
 ;
"RTN","HMPUTIL1",77,0)
 ; build metastamp components
"RTN","HMPUTIL1",78,0)
 S SUB="metaStamp"
"RTN","HMPUTIL1",79,0)
 S X="" F  S X=$O(HMPID(X)) Q:X=""  S @HMPA4JSN@(SUB,X)=HMPID(X)  ; add pid, systemId, localId, icn
"RTN","HMPUTIL1",80,0)
 S @HMPA4JSN@(SUB,"stampTime")=HMPDAT("STAMPTIME")
"RTN","HMPUTIL1",81,0)
 ;
"RTN","HMPUTIL1",82,0)
 S SUB(1)="sourceMetaStamp",X=""
"RTN","HMPUTIL1",83,0)
 F  S X=$O(HMPID(X)) Q:X=""  S @HMPA4JSN@(SUB,SUB(1),HMPID,X)=HMPID(X)  ; add pid, systemId, localId, icn
"RTN","HMPUTIL1",84,0)
 S @HMPA4JSN@(SUB,SUB(1),HMPJSNSY,"stampTime")=HMPDAT("STAMPTIME")
"RTN","HMPUTIL1",85,0)
 ;
"RTN","HMPUTIL1",86,0)
 S SUB(2)="domainMetaStamp"
"RTN","HMPUTIL1",87,0)
 S @HMPA4JSN@(SUB,SUB(1),HMPJSNSY,SUB(2),HMPDOM,"domain")=HMPDOM
"RTN","HMPUTIL1",88,0)
 S @HMPA4JSN@(SUB,SUB(1),HMPJSNSY,SUB(2),HMPDOM,"stampTime")=$S($L($G(HMPDAT("DELDATE"))):HMPDAT("DELDATE"),1:HMPDAT("STAMPTIME"))
"RTN","HMPUTIL1",89,0)
 ;
"RTN","HMPUTIL1",90,0)
 ; Loop through HMPSUB to generate the eventMetastamp
"RTN","HMPUTIL1",91,0)
 S SUB(3)=$S(DFN="OPD":"itemMetaStamp",1:"eventMetaStamp"),HMPSUB="" ;cpc 2015/10/22
"RTN","HMPUTIL1",92,0)
 F  S HMPSUB=$O(HMPDAT(HMPSUB)) Q:'HMPSUB  D
"RTN","HMPUTIL1",93,0)
 .S SUB(4)="urn:va:"_HMPDOM_":"_$S($G(ACT)="@":HMPDAT("UID"),1:HMPDAT(HMPSUB,"UID")) ;CPC won't exist for deletion
"RTN","HMPUTIL1",94,0)
 .S @HMPA4JSN@(SUB,SUB(1),HMPJSNSY,SUB(2),HMPDOM,SUB(3),SUB(4),"stampTime")=$S($L($G(HMPDAT("DELDATE"))):HMPDAT("DELDATE"),1:HMPDAT(HMPSUB,"STAMPTIME"))
"RTN","HMPUTIL1",95,0)
 ;
"RTN","HMPUTIL1",96,0)
 D ENCODE^HMPJSON(HMPA4JSN,HMPJSON,"HMPJSERR")
"RTN","HMPUTIL1",97,0)
 I $D(HMPJSERR) S $EC=",JSON encode error in unsolicited update," Q
"RTN","HMPUTIL1",98,0)
 ; find last line of JSON
"RTN","HMPUTIL1",99,0)
 S LSTLN=0 F J=1:1 Q:'$D(@HMPJSON@(J))  S LSTLN=J
"RTN","HMPUTIL1",100,0)
 ; Merge in data section from FRESHITM^HMPDJFSG
"RTN","HMPUTIL1",101,0)
 ; Add a comma after the syncStart Message for the actual data
"RTN","HMPUTIL1",102,0)
 S @HMPJSON@(LSTLN,.3)=","
"RTN","HMPUTIL1",103,0)
 S HMPSUB=""
"RTN","HMPUTIL1",104,0)
 ;
"RTN","HMPUTIL1",105,0)
 ; do the merge
"RTN","HMPUTIL1",106,0)
 F  S HMPSUB=$O(^TMP("HMP",$J,HMPSUB)) Q:'HMPSUB  D
"RTN","HMPUTIL1",107,0)
 .N HMPX,HMPDATA
"RTN","HMPUTIL1",108,0)
 .S LSTLN=LSTLN+1
"RTN","HMPUTIL1",109,0)
 .; If it is patient data add the wrapper with pid
"RTN","HMPUTIL1",110,0)
 .I DFN'="OPD" S @HMPJSON@(LSTLN,.4)="{""collection"":"""_HMPDOM_""""_$$PIDS^HMPDJFS(DFN)_",""seq"":1,""total"":1,""object"":"_$S($G(ACT)="@":DELJSON,1:"")
"RTN","HMPUTIL1",111,0)
 .; If it is operational data add the wrapper without pid
"RTN","HMPUTIL1",112,0)
 .I DFN="OPD",$G(ACT)="@" S @HMPJSON@(LSTLN,.4)="{""collection"":"""_HMPDOM_""",""seq"":1,""total"":1,""object"":"_DELJSON ;;US5647
"RTN","HMPUTIL1",113,0)
 .; If it is operational data and to be deleted
"RTN","HMPUTIL1",114,0)
 .I DFN="OPD",$G(ACT)'="@"  D  ;US5859
"RTN","HMPUTIL1",115,0)
 ..S @HMPJSON@(LSTLN,.4)="{""collection"":"""_HMPDOM_""",""seq"":1,""total"":1,""object"":"
"RTN","HMPUTIL1",116,0)
 ..S HMPX="""stampTime"":"_QTE_$S($L($G(HMPDAT("DELDATE"))):HMPDAT("DELDATE"),1:HMPDAT("STAMPTIME"))_QTE_","
"RTN","HMPUTIL1",117,0)
 ..S HMPDATA=^TMP("HMP",$J,HMPSUB,1)
"RTN","HMPUTIL1",118,0)
 ..S ^TMP("HMP",$J,HMPSUB,1)="{"_HMPX_$P(HMPDATA,"{",2,999)
"RTN","HMPUTIL1",119,0)
 .M @HMPJSON@(LSTLN)=^TMP("HMP",$J,HMPSUB)
"RTN","HMPUTIL1",120,0)
 .; Close the wrapper
"RTN","HMPUTIL1",121,0)
 .S HMPCLFLG=1
"RTN","HMPUTIL1",122,0)
 .; Add the closing brace for the wrapper
"RTN","HMPUTIL1",123,0)
 .S @HMPJSON@(LSTLN+1,.1)="}"
"RTN","HMPUTIL1",124,0)
 .; Increment the domain total
"RTN","HMPUTIL1",125,0)
 .S HMPDMTOT=HMPDMTOT+1
"RTN","HMPUTIL1",126,0)
 ;
"RTN","HMPUTIL1",127,0)
 S HMPFCNT=$G(HMPFCNT)+1
"RTN","HMPUTIL1",128,0)
 M ^TMP("HMPF",$J,HMPFCNT)=@HMPJSON
"RTN","HMPUTIL1",129,0)
 ; need a comma if more than one item
"RTN","HMPUTIL1",130,0)
 I HMPFCNT>1 S ^TMP("HMPF",$J,HMPFCNT,.3)=$S(HMPLITEM="SYNC":"},",1:",") S HMPLITEM="FRESH" ; DE3502
"RTN","HMPUTIL1",131,0)
 ;
"RTN","HMPUTIL1",132,0)
 ; clean up residual data in ^TMP($J), may be quite a lot
"RTN","HMPUTIL1",133,0)
 K @HMPA4JSN,@HMPJSON
"RTN","HMPUTIL1",134,0)
 Q
"RTN","HMPUTIL1",135,0)
 ;
"RTN","HMPUTILS")
0^128^B39059234
"RTN","HMPUTILS",1,0)
HMPUTILS ;SLC/AGP,ASMR/RRB -- HMP utilities routine ;8/14/13  11:22
"RTN","HMPUTILS",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPUTILS",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPUTILS",4,0)
 ;
"RTN","HMPUTILS",5,0)
 ; External References          DBIA#
"RTN","HMPUTILS",6,0)
 ; -------------------          -----
"RTN","HMPUTILS",7,0)
 ; XLFCRC                        3156
"RTN","HMPUTILS",8,0)
 ; XLFDT                        10103
"RTN","HMPUTILS",9,0)
 ; XLFUTL                        2622
"RTN","HMPUTILS",10,0)
 ; XUPARAM                       2541
"RTN","HMPUTILS",11,0)
 ;
"RTN","HMPUTILS",12,0)
 ; DE2818/RRB: SQA findings 1st 3 lines
"RTN","HMPUTILS",13,0)
 Q
"RTN","HMPUTILS",14,0)
 ;
"RTN","HMPUTILS",15,0)
CHKSP(HMPFHMP) ; -- ^XTMP check before patient subscription starts to cache   *BEGIN*S68-PJH
"RTN","HMPUTILS",16,0)
 ; Input HMPFHMP - server name
"RTN","HMPUTILS",17,0)
 N HMPOK
"RTN","HMPUTILS",18,0)
 S HMPOK=0
"RTN","HMPUTILS",19,0)
 F  D  Q:HMPOK
"RTN","HMPUTILS",20,0)
 . ; -- if ok to run, reset DISK USAGE STATUS to 'WITHIN LIMIT' and continue ; US8228
"RTN","HMPUTILS",21,0)
 . I $$OKTORUN^HMPDJFSP("subscribe") S HMPOK=1 D STATUS^HMPMETA(HMPOK,HMPFHMP) Q  ; US8228
"RTN","HMPUTILS",22,0)
 . ; -- otherwise make sure DISK USAGE STATUS is 'EXCEEDED LIMIT' and wait ; US8228
"RTN","HMPUTILS",23,0)
 . D STATUS^HMPMETA(HMPOK,HMPFHMP) H $$GETSECS^HMPDJFSP  ; US8228
"RTN","HMPUTILS",24,0)
 Q  ;  *END*S68-PJH
"RTN","HMPUTILS",25,0)
 ;
"RTN","HMPUTILS",26,0)
SETERROR(RESULT,ERROR,EXTERROR,DATA) ; -- error text for JSON
"RTN","HMPUTILS",27,0)
 N CNT,TEMP,HMPTEMP,XCNT
"RTN","HMPUTILS",28,0)
 S HMPTEMP="HMPXTEMP ERRORS"
"RTN","HMPUTILS",29,0)
 I '$D(^XTMP(HMPTEMP,0)) S ^XTMP(HMPTEMP,0)=$$FMADD^XLFDT(DT,7)_U_DT_U_"HMP ERROR GLOBAL"
"RTN","HMPUTILS",30,0)
 S RESULT("success")="false"
"RTN","HMPUTILS",31,0)
 I $D(DATA) S XCNT=$O(^XTMP(HMPTEMP,""),-1)+1 M ^XTMP(HMPTEMP,XCNT,"ERROR")=DATA
"RTN","HMPUTILS",32,0)
 I $D(ERROR) D SETERRTX(.TEMP,.ERROR) S RESULT("error","code")=TEMP
"RTN","HMPUTILS",33,0)
 I +$G(XCNT)>0 S RESULT("error","code")=$G(RESULT("error","code"))_" See ^XTMP("_HMPTEMP_","_XCNT_",DATA) for data"
"RTN","HMPUTILS",34,0)
 I $D(EXTERROR) D SETERRTX(.TEMP,.EXTERROR) I TEMP'="" S RESULT("error","message")=TEMP
"RTN","HMPUTILS",35,0)
 ;
"RTN","HMPUTILS",36,0)
 Q
"RTN","HMPUTILS",37,0)
 ;
"RTN","HMPUTILS",38,0)
SETERRTX(TEMP,ERROR) ;
"RTN","HMPUTILS",39,0)
 S TEMP=""
"RTN","HMPUTILS",40,0)
 S CNT=0 F  S CNT=$O(ERROR(CNT)) Q:CNT'>0  D
"RTN","HMPUTILS",41,0)
 .S TEMP=$S(TEMP'="":TEMP=TEMP_$C(13,10)_ERROR(CNT),1:ERROR(CNT))
"RTN","HMPUTILS",42,0)
 Q
"RTN","HMPUTILS",43,0)
 ;
"RTN","HMPUTILS",44,0)
SETTEXT(X,VALUE) ; -- format word processing
"RTN","HMPUTILS",45,0)
 N FIRST,I,LINE
"RTN","HMPUTILS",46,0)
 S FIRST=1
"RTN","HMPUTILS",47,0)
 S I=0 F  S I=$O(@X@(I)) Q:I<1  D
"RTN","HMPUTILS",48,0)
 .S LINE=$S($D(@X@(I,0)):@X@(I,0),1:@X@(I))
"RTN","HMPUTILS",49,0)
 .; FIRST=1 S @VALUE@(I)=LINE,FIRST=0 Q
"RTN","HMPUTILS",50,0)
 .S @VALUE@(I)=LINE_$C(13)_$C(10)
"RTN","HMPUTILS",51,0)
 Q
"RTN","HMPUTILS",52,0)
 ;
"RTN","HMPUTILS",53,0)
SPLITVAL(NODE,ARRAY) ; -- split a value into a list
"RTN","HMPUTILS",54,0)
 N CNT,NAME,VALUE,FIELD
"RTN","HMPUTILS",55,0)
 S NAME="" F  S NAME=$O(ARRAY(NAME)) Q:NAME=""  D
"RTN","HMPUTILS",56,0)
 .S CNT=+ARRAY(NAME)
"RTN","HMPUTILS",57,0)
 .S VALUE=$P($G(NODE),U,CNT)
"RTN","HMPUTILS",58,0)
 .I NAME="Code" S FIELD=$P(ARRAY(NAME),U,2) S VALUE=$$SETVURN(FIELD,VALUE)
"RTN","HMPUTILS",59,0)
 .S ARRAY(NAME)=VALUE
"RTN","HMPUTILS",60,0)
 Q
"RTN","HMPUTILS",61,0)
 ;
"RTN","HMPUTILS",62,0)
SETPROV(NODE,PROV) ; -- providers
"RTN","HMPUTILS",63,0)
 S PROV("providerUid")=$$SETUID("user",,+NODE)
"RTN","HMPUTILS",64,0)
 S PROV("providerName")=$P(NODE,U,2)
"RTN","HMPUTILS",65,0)
 Q
"RTN","HMPUTILS",66,0)
 ;
"RTN","HMPUTILS",67,0)
SETUID(DOMAIN,PAT,ID,ADDDATA) ; -- create uid string
"RTN","HMPUTILS",68,0)
 N RESULT,SYS
"RTN","HMPUTILS",69,0)
 S SYS=$S($D(HMPSYS):HMPSYS,1:$$GET^XPAR("SYS","HMP SYSTEM NAME"))
"RTN","HMPUTILS",70,0)
 S RESULT="urn:va:"_DOMAIN_":"_SYS_":"_$S($G(PAT):PAT_":",1:"")_ID
"RTN","HMPUTILS",71,0)
 I $L($G(ADDDATA)) S RESULT=RESULT_":"_ADDDATA
"RTN","HMPUTILS",72,0)
 Q RESULT
"RTN","HMPUTILS",73,0)
 ;
"RTN","HMPUTILS",74,0)
SETFCURN(DOMAIN,FACILITY,VALUE) ; -- create facility urn
"RTN","HMPUTILS",75,0)
 Q "urn:va:"_DOMAIN_":"_FACILITY_":"_VALUE
"RTN","HMPUTILS",76,0)
 ;
"RTN","HMPUTILS",77,0)
SETVURN(DOMAIN,VALUE) ; -- create VA urn
"RTN","HMPUTILS",78,0)
 N RESULT S RESULT=""
"RTN","HMPUTILS",79,0)
 S RESULT="urn:va:"_DOMAIN_":"_VALUE
"RTN","HMPUTILS",80,0)
 Q RESULT
"RTN","HMPUTILS",81,0)
 ;
"RTN","HMPUTILS",82,0)
SYS() ; -- return hashed system name
"RTN","HMPUTILS",83,0)
 Q $$BASE^XLFUTL($$CRC16^XLFCRC($$KSP^XUPARAM("WHERE")),10,16)
"RTN","HMPUTILS",84,0)
 ;
"RTN","HMPUTILS",85,0)
SETNCS(CODESET,VALUE) ; -- create national codeset urn
"RTN","HMPUTILS",86,0)
 Q "urn:"_CODESET_":"_VALUE
"RTN","HMPUTILS",87,0)
 ;
"RTN","HMPUTILS",88,0)
JSONDT(X) ; -- convert FileMan DT to HL7 DT for JSON
"RTN","HMPUTILS",89,0)
 N D,DATE,M,TIME,Y
"RTN","HMPUTILS",90,0)
 S DATE=$P($$FMTHL7^XLFDT(X),"-")
"RTN","HMPUTILS",91,0)
 I $L(DATE)>8 S TIME=$E(DATE,9,$L(DATE))
"RTN","HMPUTILS",92,0)
 S Y=$E(DATE,1,4),M=$E(DATE,5,6),D=$E(DATE,7,8)
"RTN","HMPUTILS",93,0)
 K DATE
"RTN","HMPUTILS",94,0)
 S DATE=Y I M>0 S DATE=DATE_M S:D>0 DATE=DATE_D
"RTN","HMPUTILS",95,0)
 I $G(TIME)'="" D  S DATE=DATE_TIME
"RTN","HMPUTILS",96,0)
 . N S S S=$E(TIME_"000000",5,6)
"RTN","HMPUTILS",97,0)
 . I S,S>59 S TIME=$E(TIME,1,4) ;strip bad seconds
"RTN","HMPUTILS",98,0)
 Q DATE
"RTN","HMPUTILS",99,0)
 ;
"RTN","HMPUTILS",100,0)
FACILITY(X,Y) ; -- add facility info to array for JSON
"RTN","HMPUTILS",101,0)
 ;  X=STATION NUMBER^STATION NAME
"RTN","HMPUTILS",102,0)
 ;  Y=Variable array name
"RTN","HMPUTILS",103,0)
 ; >D FACILITY^HMPUTILS("500^CAMP MASTER","LAB")
"RTN","HMPUTILS",104,0)
 ;
"RTN","HMPUTILS",105,0)
 S @Y@("facilityCode")=$P(X,"^")
"RTN","HMPUTILS",106,0)
 S @Y@("facilityName")=$P(X,"^",2)
"RTN","HMPUTILS",107,0)
 Q
"RTN","HMPUTILS",108,0)
VERSRV()   ; Return server version of option name
"RTN","HMPUTILS",109,0)
 N HMPLST,VAL
"RTN","HMPUTILS",110,0)
 D FIND^DIC(19,"",1,"X","HMP UI CONTEXT",1,,,,"HMPLST")
"RTN","HMPUTILS",111,0)
 S VAL=$G(HMPLST("DILIST","ID",1,1))
"RTN","HMPUTILS",112,0)
 Q $$UP^XLFSTR($P(VAL,"version ",2))
"RTN","HMPUTILS",113,0)
 ;
"RTN","HMPUTILS",114,0)
VERCMP(CUR,VAL) ; Returns 1 if CUR<VAL, -1 if CUR>VAL, 0 if equal
"RTN","HMPUTILS",115,0)
 N CURMAJOR,CURMINOR,CURSNAP,VALMAJOR,VALMINOR,VALSNAP
"RTN","HMPUTILS",116,0)
 S CURMAJOR=$P(CUR,"-"),CURMINOR=$P(CUR,"-",2),CURSNAP=$E($P(CUR,"-",3),1,4)="SNAP"
"RTN","HMPUTILS",117,0)
 S VALMAJOR=$P(VAL,"-"),VALMINOR=$P(VAL,"-",2),VALSNAP=$E($P(VAL,"-",3),1,4)="SNAP"
"RTN","HMPUTILS",118,0)
 I $E(VALMINOR)="P" S VALMINOR=$E(VALMINOR,2,99)     ; "P"ilot versions (old)
"RTN","HMPUTILS",119,0)
 I $E(CURMINOR)="P" S CURMINOR=$E(VALMINOR,2,99)
"RTN","HMPUTILS",120,0)
 I $E(VALMINOR)="S" S VALMINOR=$E(VALMINOR,2,99)*10  ; "S"print versions
"RTN","HMPUTILS",121,0)
 I $E(CURMINOR)="S" S CURMINOR=$E(CURMINOR,2,99)*10
"RTN","HMPUTILS",122,0)
 Q:VALMAJOR>CURMAJOR 1   Q:VALMAJOR<CURMAJOR -1  ; compare major versions
"RTN","HMPUTILS",123,0)
 Q:VALMINOR>CURMINOR 1   Q:VALMINOR<CURMINOR -1  ; compare minor versions
"RTN","HMPUTILS",124,0)
 Q:(CURSNAP&'VALSNAP) 1  Q:(VALSNAP&'CURSNAP) -1 ; "SNAPSHOT" < released
"RTN","HMPUTILS",125,0)
 Q 0
"RTN","HMPUTILS",126,0)
 ;
"RTN","HMPUTILS",127,0)
WDWH() ; What kind of data exists?
"RTN","HMPUTILS",128,0)
 ; HMPA   = loop counter
"RTN","HMPUTILS",129,0)
 ; HMPB   = dummy variable
"RTN","HMPUTILS",130,0)
 ; HMPOPD = 1 if operational data exists
"RTN","HMPUTILS",131,0)
 ;         "" otherwise
"RTN","HMPUTILS",132,0)
 ; HMPPAT = 1 if patient data exists
"RTN","HMPUTILS",133,0)
 ;         "" otherwise
"RTN","HMPUTILS",134,0)
 ; HMPRET = return variable - 0 if no data exists
"RTN","HMPUTILS",135,0)
 ;                            1 if ONLY patient data exists
"RTN","HMPUTILS",136,0)
 ;                            2 if ONLY operational data exists
"RTN","HMPUTILS",137,0)
 ;                            3 if BOTH patient and operational data exist
"RTN","HMPUTILS",138,0)
 N HMPA,HMPOPD,HMPPAT,HMPRET
"RTN","HMPUTILS",139,0)
 S (HMPOPD,HMPPAT)="",HMPA="HMPFX",HMPRET=0
"RTN","HMPUTILS",140,0)
 F  S HMPA=$O(^XTMP(HMPA)) Q:HMPA']""  D
"RTN","HMPUTILS",141,0)
 .S HMPB=$P(HMPA,"~",3)
"RTN","HMPUTILS",142,0)
 .I HMPB="OPD" S HMPOPD=1 Q
"RTN","HMPUTILS",143,0)
 .I HMPB=+HMPB S HMPPAT=1
"RTN","HMPUTILS",144,0)
 I HMPPAT,'HMPOPD S HMPRET=1
"RTN","HMPUTILS",145,0)
 I 'HMPPAT,HMPOPD S HMPRET=2
"RTN","HMPUTILS",146,0)
 I HMPPAT,HMPOPD S HMPRET=3
"RTN","HMPUTILS",147,0)
 Q HMPRET
"RTN","HMPUTILS",148,0)
 ;
"RTN","HMPUTILS",149,0)
NODATA(A) ; Is there any patient data; JD - 2/23/15
"RTN","HMPUTILS",150,0)
 ; Returns 1 if there is no patient data
"RTN","HMPUTILS",151,0)
 ;          0 Otherwise
"RTN","HMPUTILS",152,0)
 ; HMPA = Loop counter
"RTN","HMPUTILS",153,0)
 ; HMPF = Dummy variable
"RTN","HMPUTILS",154,0)
 N HMPA,HMPF
"RTN","HMPUTILS",155,0)
 S HMPF=0,HMPA=""
"RTN","HMPUTILS",156,0)
 F  S HMPA=$O(^XTMP(A,0,"count",HMPA)) Q:HMPF!(HMPA']"")  D
"RTN","HMPUTILS",157,0)
 .I +$G(^XTMP(A,0,"count",HMPA))>0 S HMPF=1 Q
"RTN","HMPUTILS",158,0)
 Q $S(HMPF:0,1:1)
"RTN","HMPUTILS",159,0)
 ;
"RTN","HMPUTILS",160,0)
GETSIZE(HMPMODE,HMPSRVN) ; -- returns current aggregate extract size for extracts waiting to be sent to HMP servers
"RTN","HMPUTILS",161,0)
 ; input: HMPMODE := [ estimate - use estimated domain average sizes (default) |
"RTN","HMPUTILS",162,0)
 ;                     actual - walk though object nodes to calculate using $LENGTH ]
"RTN","HMPUTILS",163,0)
 ;        HMPSRVN := name of HMP server [optional - defaults to all HMP servers]
"RTN","HMPUTILS",164,0)
 ; returns: total size ^ object count
"RTN","HMPUTILS",165,0)
 ;
"RTN","HMPUTILS",166,0)
 ; -- loop thru extracts for server(s) 
"RTN","HMPUTILS",167,0)
 N ROOT,BATCH,TASK,DOMAIN,OBJS,OBJCNT,OBJSIZES,TOTAL
"RTN","HMPUTILS",168,0)
 S HMPMODE=$G(HMPMODE,"estimate")
"RTN","HMPUTILS",169,0)
 I HMPMODE="estimate" D GETLST^XPAR(.OBJSIZES,"PKG","HMP DOMAIN SIZES","I")
"RTN","HMPUTILS",170,0)
 S (OBJCNT,TOTAL)=0
"RTN","HMPUTILS",171,0)
 S ROOT="HMPFX~"_$S($G(HMPSRVN)]"":HMPSRVN_"~",1:"")
"RTN","HMPUTILS",172,0)
 S BATCH=ROOT
"RTN","HMPUTILS",173,0)
 F  S BATCH=$O(^XTMP(BATCH)) Q:$E(BATCH,1,$L(ROOT))'=ROOT  D
"RTN","HMPUTILS",174,0)
 . S TASK=0 F  S TASK=$O(^XTMP(BATCH,TASK)) Q:'TASK  D
"RTN","HMPUTILS",175,0)
 . . S DOMAIN="" F  S DOMAIN=$O(^XTMP(BATCH,TASK,DOMAIN)) Q:DOMAIN=""  D
"RTN","HMPUTILS",176,0)
 . . . S OBJS=+$O(^XTMP(BATCH,TASK,DOMAIN," "),-1)
"RTN","HMPUTILS",177,0)
 . . . S OBJCNT=OBJCNT+OBJS
"RTN","HMPUTILS",178,0)
 . . . I HMPMODE="actual" S TOTAL=TOTAL+$$WALK(BATCH,TASK,DOMAIN) Q
"RTN","HMPUTILS",179,0)
 . . . S TOTAL=TOTAL+(OBJS*$G(OBJSIZES($P(DOMAIN,"#")),1000))
"RTN","HMPUTILS",180,0)
 Q TOTAL_"^"_OBJCNT
"RTN","HMPUTILS",181,0)
 ;
"RTN","HMPUTILS",182,0)
WALK(BATCH,TASK,DOMAIN) ; -- walk through domain objectS in task to get actual size
"RTN","HMPUTILS",183,0)
 N OBJ,SIZE,NODE
"RTN","HMPUTILS",184,0)
 S (OBJ,SIZE)=0
"RTN","HMPUTILS",185,0)
 F  S OBJ=$O(^XTMP(BATCH,TASK,DOMAIN,OBJ)) Q:'OBJ  D
"RTN","HMPUTILS",186,0)
 . S NODE=0 F  S NODE=$O(^XTMP(BATCH,TASK,DOMAIN,OBJ,NODE)) Q:'NODE  S SIZE=SIZE+$L(^(NODE))
"RTN","HMPUTILS",187,0)
 Q SIZE
"RTN","HMPWB")
1^192
"RTN","HMPWB1")
1^193
"RTN","HMPWB2")
1^194
"RTN","HMPXGDPT")
0^142^B2019789
"RTN","HMPXGDPT",1,0)
HMPXGDPT ; ASMR/PB - Patient File Utilities;Nov 03, 2015 18:23:03
"RTN","HMPXGDPT",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;November 30,2015;Build 63
"RTN","HMPXGDPT",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPXGDPT",4,0)
 ;
"RTN","HMPXGDPT",5,0)
 ; External References
"RTN","HMPXGDPT",6,0)
 ; -------------------
"RTN","HMPXGDPT",7,0)
 ; Patient File - IA 10035
"RTN","HMPXGDPT",8,0)
 ; DBIA3327
"RTN","HMPXGDPT",9,0)
 ;
"RTN","HMPXGDPT",10,0)
 Q
"RTN","HMPXGDPT",11,0)
 ;
"RTN","HMPXGDPT",12,0)
TOP(HMPARRAY,HMPDFN,HMPFLDS,HMPFLG) ; returns data based on the DFN and the list of fields supplied.
"RTN","HMPXGDPT",13,0)
 ;This API only returns fields that are at the top level of the record.
"RTN","HMPXGDPT",14,0)
 ;It will not return data from multiples, use the LOWER API to return fields from a multiple in the Patient file.
"RTN","HMPXGDPT",15,0)
 ;Data is returned in the array passed in the ARRAY parameter. Data is returned for both internal and external values.
"RTN","HMPXGDPT",16,0)
 ;
"RTN","HMPXGDPT",17,0)
 ; HMPARRAY - result array, passed by reference
"RTN","HMPXGDPT",18,0)
 ; HMPDFN - IEN of the Patient, required
"RTN","HMPXGDPT",19,0)
 ; HMPFLDS - FileMan field list (optional), if not passed all fields returned 
"RTN","HMPXGDPT",20,0)
 ; HMPFLG - FileMan data flag (optional)
"RTN","HMPXGDPT",21,0)
 ; 
"RTN","HMPXGDPT",22,0)
 N DA,DR,DIQ,DIC,FLAGS
"RTN","HMPXGDPT",23,0)
 Q:$G(HMPDFN)=""  ;DFN must be defined
"RTN","HMPXGDPT",24,0)
 Q:$G(HMPFLDS)=""  ;FLDS must have a least one field defined. Fields are listed by field number and separated by a semi colon
"RTN","HMPXGDPT",25,0)
 S:'$G(HMPFLG) FLAGS="IE"
"RTN","HMPXGDPT",26,0)
 S DIC=2,DR=HMPFLDS,DA=HMPDFN,DIQ=HMPARRAY,DIQ(0)=$G(HMPFLG)
"RTN","HMPXGDPT",27,0)
 D EN^DIQ1
"RTN","HMPXGDPT",28,0)
 Q
"RTN","HMPXGDPT",29,0)
 ;
"RTN","HMPXGDPT",30,0)
INOUT(HMPDFN) ; Boolean function, 1 for inpatient, else zero
"RTN","HMPXGDPT",31,0)
 N LOC S LOC=$G(^DPT(+$G(HMPDFN),.1)) Q $S($L(LOC):1,1:0)  ;ICR 10035, (#.1) WARD LOCATION [E1,30F]
"RTN","HMPXGDPT",32,0)
 ;
"RTN","HMPXGLAB")
0^143^B1064430
"RTN","HMPXGLAB",1,0)
HMPXGLAB ; ASMR/hrubovcak - Lab data retrieval ;Nov 05, 2015 15:27:37
"RTN","HMPXGLAB",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPXGLAB",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPXGLAB",4,0)
 ;
"RTN","HMPXGLAB",5,0)
 Q
"RTN","HMPXGLAB",6,0)
 ;
"RTN","HMPXGLAB",7,0)
LABTSTNM(HMPLTIEN) ;function, return NAME field (#.01) from LABORATORY TEST file (#60)
"RTN","HMPXGLAB",8,0)
 ; IA 10054 - NAME can be read with FileMan
"RTN","HMPXGLAB",9,0)
 ; HMPLTIEN - Lab Test IEN (required)
"RTN","HMPXGLAB",10,0)
 Q:'($G(HMPLTIEN)>0) "ERROR: Lab Test IEN missing"
"RTN","HMPXGLAB",11,0)
 ;
"RTN","HMPXGLAB",12,0)
 N DA,DIC,DIQ,DR,FLAGS,HMPRSLT,HMPTSTNM
"RTN","HMPXGLAB",13,0)
 S DIC=60,DR=".01",DA=HMPLTIEN,DIQ="HMPRSLT",DIQ(0)="E",FLAGS="E"
"RTN","HMPXGLAB",14,0)
 D EN^DIQ1
"RTN","HMPXGLAB",15,0)
 ;
"RTN","HMPXGLAB",16,0)
 Q $G(HMPRSLT(60,HMPLTIEN,.01,"E"))
"RTN","HMPXGLAB",17,0)
 ;
"RTN","HMPXGLAB",18,0)
LRDFN(HMPDFN) ;function, return LRDFN from PATIENT file
"RTN","HMPXGLAB",19,0)
 ;
"RTN","HMPXGLAB",20,0)
 Q:'($G(HMPDFN)>0) ""  ; patient's DFN required
"RTN","HMPXGLAB",21,0)
 ;
"RTN","HMPXGLAB",22,0)
 N HMPDEMOG
"RTN","HMPXGLAB",23,0)
 D TOP^HMPXGDPT("HMPDEMOG",HMPDFN,"63","I")  ; (#63) LABORATORY REFERENCE
"RTN","HMPXGLAB",24,0)
 Q $G(HMPDEMOG(2,HMPDFN,63,"I"))
"RTN","HMPXGLAB",25,0)
 ;
"RTN","HMPXGNP")
0^145^B1299808
"RTN","HMPXGNP",1,0)
HMPXGNP ; ASMR/hrubovcak - NEW PERSON file (#200) data retrieval ;Nov 03, 2015 18:23:03
"RTN","HMPXGNP",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPXGNP",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPXGNP",4,0)
 ;
"RTN","HMPXGNP",5,0)
 Q
"RTN","HMPXGNP",6,0)
 ; IA 10060 - All NEW PERSON fields supported for read via FileMan
"RTN","HMPXGNP",7,0)
 ;
"RTN","HMPXGNP",8,0)
TOP(HMPRSLT,HMPNPIEN,HMPFLDS,HMPFLG) ; return top-level fields, null fields not returned
"RTN","HMPXGNP",9,0)
 ; HMPRSLT - result array, closed reference, required
"RTN","HMPXGNP",10,0)
 ; HMPNPIEN - IEN of NEW PERSON, required
"RTN","HMPXGNP",11,0)
 ; HMPFLDS - field list, required, FileMan convention 
"RTN","HMPXGNP",12,0)
 ; HMPFLG - data flag, optional, FileMan convention
"RTN","HMPXGNP",13,0)
 ;
"RTN","HMPXGNP",14,0)
 Q:'$L($G(HMPRSLT))
"RTN","HMPXGNP",15,0)
 ;
"RTN","HMPXGNP",16,0)
 K @HMPRSLT  ; clear all results
"RTN","HMPXGNP",17,0)
 ; error data is found in -1 subscript
"RTN","HMPXGNP",18,0)
 I '($G(HMPNPIEN)>0) S @HMPRSLT@(-1,$T(+0))="NEW PERSON IEN required" Q
"RTN","HMPXGNP",19,0)
 I $G(HMPFLDS)="" S @HMPRSLT@(-1,$T(+0))="NEW PERSON fields required" Q
"RTN","HMPXGNP",20,0)
 I '$L($G(HMPFLG)) N HMPFLG S HMPFLG="EIN"
"RTN","HMPXGNP",21,0)
 N DA,DIC,DIQ,DR,FLAGS  ; FileMan variables
"RTN","HMPXGNP",22,0)
 S DIC=200,DR=HMPFLDS,DA=HMPNPIEN,DIQ=HMPRSLT,DIQ(0)=HMPFLG,FLAGS=HMPFLG
"RTN","HMPXGNP",23,0)
 D EN^DIQ1
"RTN","HMPXGNP",24,0)
 Q
"RTN","HMPXGNP",25,0)
 ;
"RTN","HMPXGORD")
0^144^B2568884
"RTN","HMPXGORD",1,0)
HMPXGORD ; ASMR/hrubovcak - ORDER file (#100) data retrieval ;Nov 03, 2015 18:23:03
"RTN","HMPXGORD",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPXGORD",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPXGORD",4,0)
 ;
"RTN","HMPXGORD",5,0)
 Q
"RTN","HMPXGORD",6,0)
 ;
"RTN","HMPXGORD",7,0)
TOP(HMPRSLT,HMPORIEN,HMPFLDS,HMPFLG) ; return top-level fields
"RTN","HMPXGORD",8,0)
 ; HMPRSLT - result array, closed reference, required
"RTN","HMPXGORD",9,0)
 ; HMPORIEN - IEN of NEW PERSON, required
"RTN","HMPXGORD",10,0)
 ; HMPFLDS - field list, required, FileMan convention 
"RTN","HMPXGORD",11,0)
 ; HMPFLG - data flag, optional, FileMan convention
"RTN","HMPXGORD",12,0)
 ;
"RTN","HMPXGORD",13,0)
 Q:'$L($G(HMPRSLT))
"RTN","HMPXGORD",14,0)
 ;
"RTN","HMPXGORD",15,0)
 K @HMPRSLT  ; clear all results
"RTN","HMPXGORD",16,0)
 ; error data is found in -1 subscript
"RTN","HMPXGORD",17,0)
 I '($G(HMPORIEN)>0) S @HMPRSLT@(-1,$T(+0))="ORDER IEN required" Q
"RTN","HMPXGORD",18,0)
 I $G(HMPFLDS)="" S @HMPRSLT@(-1,$T(+0))="ORDER fields required" Q
"RTN","HMPXGORD",19,0)
 I '$L($G(HMPFLG)) N HMPFLG S HMPFLG="EIN"  ; default is external and internal, skip nulls
"RTN","HMPXGORD",20,0)
 N DA,DIC,DIQ,DR,FLAGS  ; FileMan variables
"RTN","HMPXGORD",21,0)
 S DIC=100,DR=HMPFLDS,DA=HMPORIEN,DIQ=HMPRSLT,DIQ(0)=HMPFLG,FLAGS=HMPFLG
"RTN","HMPXGORD",22,0)
 D EN^DIQ1
"RTN","HMPXGORD",23,0)
 Q
"RTN","HMPXGORD",24,0)
 ;
"RTN","HMPXGORD",25,0)
DIALOG(HMPORIEN) ; function, return (#2) DIALOG [5V] for ORDER
"RTN","HMPXGORD",26,0)
 Q $P($G(^OR(100,+$G(HMPORIEN),0)),"^",5)
"RTN","HMPXGORD",27,0)
 ;
"RTN","HMPXGORD",28,0)
ORDTOP(HMPORDFL,HMPORDIEN,HMPORDND) ; function, return top-level node from a file in ^ORD (file list below)
"RTN","HMPXGORD",29,0)
 ;
"RTN","HMPXGORD",30,0)
 I '($G(HMPORDFL)>0)!'($G(HMPORDIEN)>0)!'$L($G(HMPORDND)) Q ""  ; all required
"RTN","HMPXGORD",31,0)
 ;
"RTN","HMPXGORD",32,0)
 Q $G(^ORD(HMPORDFL,HMPORDIEN,HMPORDND))  ; returns internal format
"RTN","HMPXGORD",33,0)
 ;
"RTN","HMPXGORD",34,0)
 ;
"RTN","HMPXGORD",35,0)
 ; files in the ^ORD global:
"RTN","HMPXGORD",36,0)
 ;
"RTN","HMPXGORD",37,0)
 ;ORDER STATUS (#100.01)
"RTN","HMPXGORD",38,0)
 ;NATURE OF ORDER (#100.02)
"RTN","HMPXGORD",39,0)
 ;ORDER REASON (#100.03)
"RTN","HMPXGORD",40,0)
 ;ORDER CHECK INSTANCES (#100.05)
"RTN","HMPXGORD",41,0)
 ;OE/RR PRINT FIELDS (#100.22)
"RTN","HMPXGORD",42,0)
 ;OE/RR PRINT FORMATS (#100.23)
"RTN","HMPXGORD",43,0)
 ;OE/RR RELEASE EVENTS (#100.5)
"RTN","HMPXGORD",44,0)
 ;OE/RR AUTO-DC RULES (#100.6)
"RTN","HMPXGORD",45,0)
 ;OE/RR EPCS PARAMETERS (#100.7)
"RTN","HMPXGORD",46,0)
 ;ORDER CHECKS (#100.8)
"RTN","HMPXGORD",47,0)
 ;OE/RR NOTIFICATIONS (#100.9)
"RTN","HMPXGORD",48,0)
 ;DISPLAY GROUP (#100.98)
"RTN","HMPXGORD",49,0)
 ;ORDER PARAMETERS (#100.99)
"RTN","HMPXGORD",50,0)
 ;PROTOCOL (#101)
"RTN","HMPXGORD",51,0)
 ;OR CPRS TABS (#101.13)
"RTN","HMPXGORD",52,0)
 ;OE/RR COM OBJECTS (#101.15)
"RTN","HMPXGORD",53,0)
 ;OE/RR REPORT (#101.24)
"RTN","HMPXGORD",54,0)
 ;ORDER EXECUTE CODES (#101.3)
"RTN","HMPXGORD",55,0)
 ;ORDER DIALOG (#101.41)
"RTN","HMPXGORD",56,0)
 ;ORDER URGENCY (#101.42)
"RTN","HMPXGORD",57,0)
 ;ORDERABLE ITEMS (#101.43)
"RTN","HMPXGORD",58,0)
 ;ORDER QUICK VIEW (#101.44)
"RTN","HMPXGORD",59,0)
 ;CPRS QUERY DEFINITION (#102.21)
"RTN","HMPXGORD",60,0)
 ;CPRS QUERY CONSTRAINT (#102.22)
"RTN","HMPXGORD",61,0)
 ;CPRS QUERY EDIT CONTROL (#102.23)
"RTN","HMPXGORD",62,0)
 ;CPRS QUERY DISPLAY FIELDS (#102.24)
"RTN","HMPXGORD",63,0)
 ;
"RTN","HMPXGSD")
0^146^B2602100
"RTN","HMPXGSD",1,0)
HMPXGSD ; ASMR/hrubovcak - Scheduling data retrieval ;Nov 20, 2015 01:49:50
"RTN","HMPXGSD",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPXGSD",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPXGSD",4,0)
 ;
"RTN","HMPXGSD",5,0)
 Q
"RTN","HMPXGSD",6,0)
 ;
"RTN","HMPXGSD",7,0)
 ; DE2818, code below adapted from CLINLOC^ORWU
"RTN","HMPXGSD",8,0)
CLINLOC(RSLT,FROM,DIR) ; return list of clinics from HOSPITAL LOCATION file (#44)
"RTN","HMPXGSD",9,0)
 ; all 3 arguments required
"RTN","HMPXGSD",10,0)
 ; RSLT=returned list (passed by reference), FROM=text to $ORDER from, DIR=$ORDER direction
"RTN","HMPXGSD",11,0)
 ; RSLT(counter) = IEN^location name
"RTN","HMPXGSD",12,0)
 N I,IEN,LOCNM  ; counter, internal entry number, location name
"RTN","HMPXGSD",13,0)
 S I=0,LOCNM=$G(FROM)
"RTN","HMPXGSD",14,0)
 F  S LOCNM=$O(^SC("B",LOCNM),DIR) Q:LOCNM=""  D  ; ICR 10040
"RTN","HMPXGSD",15,0)
 . S IEN="" F  S IEN=$O(^SC("B",LOCNM,IEN),DIR) Q:'IEN  D
"RTN","HMPXGSD",16,0)
 ..  Q:'($P($G(^SC(IEN,0)),U,3)="C")  ; check (#2) TYPE [3S], must be clinic
"RTN","HMPXGSD",17,0)
 ..  Q:'$$ACTLOC(IEN)  ; must be active
"RTN","HMPXGSD",18,0)
 ..  S I=I+1,RSLT(I)=IEN_"^"_LOCNM
"RTN","HMPXGSD",19,0)
 ;
"RTN","HMPXGSD",20,0)
 Q
"RTN","HMPXGSD",21,0)
 ;
"RTN","HMPXGSD",22,0)
 ; DE2818, code below adapted from ACTLOC^ORWU
"RTN","HMPXGSD",23,0)
ACTLOC(LOC) ; Boolean function, TRUE if active hospital location
"RTN","HMPXGSD",24,0)
 ; LOC - IEN in HOSPITAL LOCATION file, ICR 10040
"RTN","HMPXGSD",25,0)
 ; IND - the "I" node, ^SC(D0,I) = (#2505) INACTIVATE DATE [1D] ^ (#2506) REACTIVATE DATE [2D] ^
"RTN","HMPXGSD",26,0)
 ; D0, X - used by WIN^DGPMDDCF
"RTN","HMPXGSD",27,0)
 N D0,IND,X
"RTN","HMPXGSD",28,0)
 Q:+$G(^SC(LOC,"OOS")) 0  ; (#50.01) OCCASION OF SERVICE CLINIC?, screen entry
"RTN","HMPXGSD",29,0)
 S D0=+$G(^SC(LOC,42)) I D0 D WIN^DGPMDDCF Q 'X  ; check out-of-service wards, ICR 1246
"RTN","HMPXGSD",30,0)
 S IND=$G(^SC(LOC,"I")) Q:'IND 1  ; INACTIVATE DATE not found
"RTN","HMPXGSD",31,0)
 I DT>$P(IND,U)&($P(IND,U,2)=""!(DT<$P(IND,U,2))) Q 0  ; check REACTIVATE DATE
"RTN","HMPXGSD",32,0)
 Q 1  ; active
"RTN","HMPXGSD",33,0)
 ;
"RTN","HMPYCSI")
1^195
"RTN","HMPYCSO")
0^133^B22000106
"RTN","HMPYCSO",1,0)
HMPYCSO ;SLC/MJK,ASMR/RRB - Convert system objects utility ;8/2/11  15:29
"RTN","HMPYCSO",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Sep 01, 2011;Build 63
"RTN","HMPYCSO",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPYCSO",4,0)
 ;
"RTN","HMPYCSO",5,0)
 ; *S68-JCH* This routine introduced with S68
"RTN","HMPYCSO",6,0)
 Q
"RTN","HMPYCSO",7,0)
 ;
"RTN","HMPYCSO",8,0)
CONV(HMPDATA,HMPCNTS) ; -- execute conversion over a system object type
"RTN","HMPYCSO",9,0)
 ; input: HMPDATA("type") := object type
"RTN","HMPYCSO",10,0)
 ;                             - [ OPD - operational (file #800000.11) | PT - HMP (file #800000.1) / default ]
"RTN","HMPYCSO",11,0)
 ;
"RTN","HMPYCSO",12,0)
 ;         ("collection") := object collection name as it appears in "C" xref
"RTN","HMPYCSO",13,0)
 ;                                - ex. "task"
"RTN","HMPYCSO",14,0)
 ;
"RTN","HMPYCSO",15,0)
 ;           ("callback") := callback code to execute conversion on single object
"RTN","HMPYCSO",16,0)
 ;                             - callback should expect decoded array containing object to convert and IEN of object
"RTN","HMPYCSO",17,0)
 ;                                   - TAG^ROUTINE
"RTN","HMPYCSO",18,0)
 ;                                   - ex. TASK^HMPP3I
"RTN","HMPYCSO",19,0)
 ;                             - callback must return indicator on how to proceed
"RTN","HMPYCSO",20,0)
 ;                                   - 1 : update converted object
"RTN","HMPYCSO",21,0)
 ;                                   - 0 : stop processing this object; no conversion needed
"RTN","HMPYCSO",22,0)
 ;
"RTN","HMPYCSO",23,0)
 ;         HMPCNTS : returns array of counts related to conversion [optional]
"RTN","HMPYCSO",24,0)
 ;                    - closed array reference 
"RTN","HMPYCSO",25,0)
 ;                    - Counts:
"RTN","HMPYCSO",26,0)
 ;                        - HMPTALLY("converted") -> conversion performed
"RTN","HMPYCSO",27,0)
 ;                                  ("errored")   -> errored at some point in process
"RTN","HMPYCSO",28,0)
 ;                                  ("passed")    -> no conversion needed
"RTN","HMPYCSO",29,0)
 ;                                  ("reviewed")  -> count of objects reviewed for conversion
"RTN","HMPYCSO",30,0)
 ;
"RTN","HMPYCSO",31,0)
 N HMPTYPE,HMPCOLL,HMPCB,X,HMPFILE,HMPZCNTS
"RTN","HMPYCSO",32,0)
 S HMPTYPE=$G(HMPDATA("type"),"PT")
"RTN","HMPYCSO",33,0)
 S HMPCOLL=$G(HMPDATA("collection"))
"RTN","HMPYCSO",34,0)
 S HMPCB=$G(HMPDATA("callback"))
"RTN","HMPYCSO",35,0)
 ;
"RTN","HMPYCSO",36,0)
 ; - collection name and callback must be defined
"RTN","HMPYCSO",37,0)
 I HMPCOLL=""!(HMPCB="") Q
"RTN","HMPYCSO",38,0)
 ;
"RTN","HMPYCSO",39,0)
 I HMPTYPE'="PT",HMPTYPE'="OPD" Q
"RTN","HMPYCSO",40,0)
 ;
"RTN","HMPYCSO",41,0)
 ; -- currently only supports PT, as OPD has not been tested
"RTN","HMPYCSO",42,0)
 I HMPTYPE'="PT" Q
"RTN","HMPYCSO",43,0)
 ;
"RTN","HMPYCSO",44,0)
 ; -- initialize counts
"RTN","HMPYCSO",45,0)
 F X="reviewed","errored","converted","passed" S HMPZCNTS(X)=0
"RTN","HMPYCSO",46,0)
 ;
"RTN","HMPYCSO",47,0)
 I HMPTYPE="PT" D
"RTN","HMPYCSO",48,0)
 . N DFN,IEN
"RTN","HMPYCSO",49,0)
 . S HMPFILE=800000.1
"RTN","HMPYCSO",50,0)
 . S DFN=0 F  S DFN=$O(^HMP(HMPFILE,"C",DFN)) Q:DFN'>0  D
"RTN","HMPYCSO",51,0)
 . . S IEN=0 F  S IEN=$O(^HMP(HMPFILE,"C",DFN,HMPCOLL,IEN)) Q:IEN'>0  D CONVOBJ(HMPFILE,IEN,HMPCB)
"RTN","HMPYCSO",52,0)
 E  D
"RTN","HMPYCSO",53,0)
 . N IEN
"RTN","HMPYCSO",54,0)
 . S HMPFILE=800000.11
"RTN","HMPYCSO",55,0)
 . S IEN=0 F  S IEN=$O(^HMP(HMPFILE,"C",HMPCOLL,IEN)) Q:IEN'>0  D CONVOBJ(HMPFILE,IEN,HMPCB)
"RTN","HMPYCSO",56,0)
 ;
"RTN","HMPYCSO",57,0)
 I $G(HMPCNTS)]"" M @HMPCNTS=HMPZCNTS
"RTN","HMPYCSO",58,0)
 Q
"RTN","HMPYCSO",59,0)
 ;
"RTN","HMPYCSO",60,0)
CONVOBJ(HMPFILE,IEN,HMPCB) ; -- convert object
"RTN","HMPYCSO",61,0)
 N HMPY,HMPTEMP,ERROR,UID,I,HMP0,HMPCOLL
"RTN","HMPYCSO",62,0)
 S HMPY=$NA(^TMP($J,"HMPY"))
"RTN","HMPYCSO",63,0)
 S HMPTEMP=$NA(^TMP($J,"HMPTEMP"))
"RTN","HMPYCSO",64,0)
 K @HMPY,@HMPTEMP
"RTN","HMPYCSO",65,0)
 D TALLY("reviewed")
"RTN","HMPYCSO",66,0)
 ;
"RTN","HMPYCSO",67,0)
 S HMP0=$G(^HMP(HMPFILE,IEN,0))
"RTN","HMPYCSO",68,0)
 S HMPCOLL=$P(HMP0,U,3)
"RTN","HMPYCSO",69,0)
 S UID=$P(HMP0,U)
"RTN","HMPYCSO",70,0)
 I UID="" D ERROR("Error:  JSON "_HMPCOLL_" Object (IEN: "_IEN_") missing UID") Q
"RTN","HMPYCSO",71,0)
 ;
"RTN","HMPYCSO",72,0)
 S I=0 F  S I=$O(^HMP(HMPFILE,IEN,1,I)) Q:I<1  S X=$G(^(I,0)),@HMPY@(I)=X
"RTN","HMPYCSO",73,0)
 ;
"RTN","HMPYCSO",74,0)
 D DECODE^HMPJSON(HMPY,HMPTEMP,"ERROR")
"RTN","HMPYCSO",75,0)
 I $D(ERROR) D ERROR("Error in decoding JSON "_HMPCOLL_" Object (IEN: "_IEN_")") Q
"RTN","HMPYCSO",76,0)
 ;
"RTN","HMPYCSO",77,0)
 ; -- execute type conversion callback ; quit if object passed w/o needing conversion
"RTN","HMPYCSO",78,0)
 I @("'$$"_HMPCB_"(HMPTEMP,IEN)") D TALLY("passed") Q
"RTN","HMPYCSO",79,0)
 ;
"RTN","HMPYCSO",80,0)
 K @HMPY
"RTN","HMPYCSO",81,0)
 D ENCODE^HMPJSON(HMPTEMP,HMPY,"ERROR")
"RTN","HMPYCSO",82,0)
 I $D(ERROR) D ERROR("Error in encoding JSON "_HMPCOLL_" object (IEN: "_IEN_")") Q
"RTN","HMPYCSO",83,0)
 ;
"RTN","HMPYCSO",84,0)
 D MES^XPDUTL("Updating "_HMPCOLL_" uid: "_UID)
"RTN","HMPYCSO",85,0)
 I '$$UPDATE(HMPFILE,IEN,HMPY) D  Q
"RTN","HMPYCSO",86,0)
 . D ERROR("Error: Unable to obtain lock on DATA node for JSON "_HMPCOLL_" object (IEN: "_IEN_")")
"RTN","HMPYCSO",87,0)
 E  D
"RTN","HMPYCSO",88,0)
 . D TALLY("converted")
"RTN","HMPYCSO",89,0)
 ;
"RTN","HMPYCSO",90,0)
 K @HMPY,@HMPTEMP
"RTN","HMPYCSO",91,0)
 ;
"RTN","HMPYCSO",92,0)
 Q
"RTN","HMPYCSO",93,0)
 ;
"RTN","HMPYCSO",94,0)
ERROR(MSG) ; -- write out error message and inc error tally
"RTN","HMPYCSO",95,0)
 ;D EN^DDIOL(MSG)
"RTN","HMPYCSO",96,0)
 D BMES^XPDUTL(MSG)
"RTN","HMPYCSO",97,0)
 D TALLY("errored")
"RTN","HMPYCSO",98,0)
 Q
"RTN","HMPYCSO",99,0)
 ;
"RTN","HMPYCSO",100,0)
TALLY(CNTYP) ; -- inc counter
"RTN","HMPYCSO",101,0)
 S HMPZCNTS(CNTYP)=$G(HMPZCNTS(CNTYP))+1
"RTN","HMPYCSO",102,0)
 Q
"RTN","HMPYCSO",103,0)
 ;
"RTN","HMPYCSO",104,0)
UPDATE(HMPFILE,DA,JSON) ; -- update DATA wp field on patient object
"RTN","HMPYCSO",105,0)
 ;  input:  DA - internal entry number in 800000.1
"RTN","HMPYCSO",106,0)
 ;        JSON - closed array reference for M representation of object
"RTN","HMPYCSO",107,0)
 ; return:   1 - update successful | 0 - update not successful (unable to obtain lock)
"RTN","HMPYCSO",108,0)
 L +^HMP(HMPFILE,DA,1):$S($G(DILOCKTM)>0:DILOCKTM,1:5)
"RTN","HMPYCSO",109,0)
 I '$T Q 0
"RTN","HMPYCSO",110,0)
 ;
"RTN","HMPYCSO",111,0)
 N CNT,I,HMPSUB
"RTN","HMPYCSO",112,0)
 S CNT=0
"RTN","HMPYCSO",113,0)
 ; -- derive subfile number
"RTN","HMPYCSO",114,0)
 S HMPSUB=HMPFILE_$S(HMPFILE=800000.1:"01",1:"1")
"RTN","HMPYCSO",115,0)
 K ^HMP(HMPFILE,DA,1) S ^(1,0)="^"_HMPSUB_"^^"
"RTN","HMPYCSO",116,0)
 S I="" F  S I=$O(@JSON@(I)) Q:I=""  S CNT=CNT+1,^HMP(HMPFILE,DA,1,CNT,0)=@JSON@(I)
"RTN","HMPYCSO",117,0)
 I CNT S ^HMP(HMPFILE,DA,1,0)="^800000.101^"_CNT_U_CNT
"RTN","HMPYCSO",118,0)
 ;
"RTN","HMPYCSO",119,0)
 L -^HMP(HMPFILE,DA,1)
"RTN","HMPYCSO",120,0)
 Q 1
"RTN","HMPYCSO",121,0)
 ;
"RTN","HMPYCSO",122,0)
TASKCONV ; -- convert patient task objects 
"RTN","HMPYCSO",123,0)
 ;               - converts 'pid' property to SYSID;DFN (ex. F484;237)
"RTN","HMPYCSO",124,0)
 ;               - removes 'patientId' property if it exists
"RTN","HMPYCSO",125,0)
 ;
"RTN","HMPYCSO",126,0)
 N HMPAMS,HMPSTATS
"RTN","HMPYCSO",127,0)
 S HMPAMS("type")="PT"
"RTN","HMPYCSO",128,0)
 S HMPAMS("collection")="task"
"RTN","HMPYCSO",129,0)
 S HMPAMS("callback")="TASKCB^HMPYCSO"
"RTN","HMPYCSO",130,0)
 D CONV^HMPYCSO(.HMPAMS,"HMPSTATS")
"RTN","HMPYCSO",131,0)
 D BMES^XPDUTL("Task object conversion statistics:")
"RTN","HMPYCSO",132,0)
 D MES^XPDUTL("  Reviewed: "_$J($G(HMPSTATS("reviewed")),8))
"RTN","HMPYCSO",133,0)
 D MES^XPDUTL("    Passed: "_$J($G(HMPSTATS("passed")),8))
"RTN","HMPYCSO",134,0)
 D MES^XPDUTL(" Converted: "_$J($G(HMPSTATS("converted")),8))
"RTN","HMPYCSO",135,0)
 D MES^XPDUTL("   Errored: "_$J($G(HMPSTATS("errored")),8))
"RTN","HMPYCSO",136,0)
 K HMPB4
"RTN","HMPYCSO",137,0)
 Q
"RTN","HMPYCSO",138,0)
 ;
"RTN","HMPYCSO",139,0)
TASKCB(OBJREF,IEN) ; -- callback that converts a 'task' object's if necessary
"RTN","HMPYCSO",140,0)
 ;                       - converts 'pid' property to SYSID;DFN (ex. F484;237)
"RTN","HMPYCSO",141,0)
 ;                       - removes 'patientId' property if it exists
"RTN","HMPYCSO",142,0)
 ;
"RTN","HMPYCSO",143,0)
 ;  input: OBJREF := JSON decoded task object for DATA field in 800000.1
"RTN","HMPYCSO",144,0)
 ;            IEN := internal entry number in 800000.1
"RTN","HMPYCSO",145,0)
 ;
"RTN","HMPYCSO",146,0)
 ; return: 1 - task was converted | 0 - no conversion required
"RTN","HMPYCSO",147,0)
 ;
"RTN","HMPYCSO",148,0)
 N HMPOK,DFN,PID
"RTN","HMPYCSO",149,0)
 S HMPOK=0
"RTN","HMPYCSO",150,0)
 S DFN=+$P($G(^HMP(800000.1,+$G(IEN),0)),"^",2)
"RTN","HMPYCSO",151,0)
 I 'DFN Q 0
"RTN","HMPYCSO",152,0)
 S PID=$$SYS^HMPUTILS_";"_DFN
"RTN","HMPYCSO",153,0)
 ; -- if pid different, first kill 'pid' to get rid of possible ...,"pid","\s") node
"RTN","HMPYCSO",154,0)
 I $G(@OBJREF@("pid"))'=PID K @OBJREF@("pid") S @OBJREF@("pid")=PID,HMPOK=1
"RTN","HMPYCSO",155,0)
 I $D(@OBJREF@("patientId")) K @OBJREF@("patientId") S HMPOK=1
"RTN","HMPYCSO",156,0)
 Q HMPOK
"RTN","HMPYFRP")
1^196
"RTN","HMPYFRP1")
1^197
"RTN","HMPYFRP2")
1^198
"RTN","HMPYPAR")
1^199
"RTN","HMPZ0218")
0^141^B5632129
"RTN","HMPZ0218",1,0)
HMPZ0218 ;ASMR/JCH - Clinical Procedures failing TIU patch quick fix ;Feb 18, 2015@14:29:52
"RTN","HMPZ0218",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**;Feb 18, 2015;Build 63
"RTN","HMPZ0218",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPZ0218",4,0)
 ;
"RTN","HMPZ0218",5,0)
 Q
"RTN","HMPZ0218",6,0)
 ;
"RTN","HMPZ0218",7,0)
 ; temporary fix for Clinical Procedures issue (User Story 5021)
"RTN","HMPZ0218",8,0)
DISABLE ;
"RTN","HMPZ0218",9,0)
 ;
"RTN","HMPZ0218",10,0)
 D BMES^XPDUTL("Disabling INDEX entries for Clinical Procedures "_$$NOW),MES^XPDUTL("routine: "_$T(+0))
"RTN","HMPZ0218",11,0)
 ;
"RTN","HMPZ0218",12,0)
 ; HMPARY - IEN array for INDEX
"RTN","HMPZ0218",13,0)
 ; HMPINDX - target INDEX entry
"RTN","HMPZ0218",14,0)
 N F,G,HMPARY,HMPINDX,I,J,Q,X,Y
"RTN","HMPZ0218",15,0)
 ;
"RTN","HMPZ0218",16,0)
 S Q=$C(34)
"RTN","HMPZ0218",17,0)
 F J=1:1 S HMPINDX=$P($T(INDXLST+J),";;",2,99) Q:HMPINDX=""  D  ; find INDEX file (#.11) entries
"RTN","HMPZ0218",18,0)
 .D MES^XPDUTL("looking for INDEX: "_HMPINDX)
"RTN","HMPZ0218",19,0)
 .N FL,I,NTRY,Y
"RTN","HMPZ0218",20,0)
 .S NTRY=0  ; INDEX enrty IEN
"RTN","HMPZ0218",21,0)
 .S FL=+$P(HMPINDX,U)  ; file #
"RTN","HMPZ0218",22,0)
 .S I=0 F  S I=$O(^DD("IX","B",FL,I)) Q:'I!(NTRY)  D  ; find entry and save it
"RTN","HMPZ0218",23,0)
 ..S Y=$G(^DD("IX",I,0)) S:$P(HMPINDX,U,1,3)=$P(Y,U,1,3) NTRY=I,HMPINDX(FL,I)=Y,HMPINDX(0)=$G(HMPINDX(0))+1
"RTN","HMPZ0218",24,0)
 ;
"RTN","HMPZ0218",25,0)
 I '($G(HMPINDX(0))=1) D  Q  ; must locate both entries, exit if not found
"RTN","HMPZ0218",26,0)
 .D BMES^XPDUTL("Unable to find INDEX file entries"),MES^XPDUTL("exiting routine "_$T(+0)_" "_$$NOW)
"RTN","HMPZ0218",27,0)
 ;
"RTN","HMPZ0218",28,0)
 S F=0 F  S F=$O(HMPINDX(F)) Q:'F  D
"RTN","HMPZ0218",29,0)
 .N GLB,ND,UPDT
"RTN","HMPZ0218",30,0)
 .S I=+$O(HMPINDX(F,0)) Q:'I
"RTN","HMPZ0218",31,0)
 .S GLB=$NA(^DD("IX",I,0)),Y=$G(@GLB) D BMES^XPDUTL("examining "_GLB),MES^XPDUTL("   "_Q_Y_Q)
"RTN","HMPZ0218",32,0)
 .S UPDT=0  ; updated flag, false if index not changed
"RTN","HMPZ0218",33,0)
 .F ND=1,2 D
"RTN","HMPZ0218",34,0)
 ..S Y=$G(^DD("IX",I,ND)),GLB=$NA(^(ND))
"RTN","HMPZ0218",35,0)
 ..D MES^XPDUTL("value found in "_GLB_" was: "),MES^XPDUTL("   "_Q_Y_Q)
"RTN","HMPZ0218",36,0)
 ..I $E(Y)'="Q" S UPDT=1,Y="Q  ;"_Y
"RTN","HMPZ0218",37,0)
 ..S:UPDT @GLB=Y
"RTN","HMPZ0218",38,0)
 ..D MES^XPDUTL($S(UPDT:"updated to "_Q_Y_Q,1:"* NOT CHANGED *"))
"RTN","HMPZ0218",39,0)
 ;
"RTN","HMPZ0218",40,0)
 ;
"RTN","HMPZ0218",41,0)
 D BMES^XPDUTL("INDEX entry completed "_$$NOW)
"RTN","HMPZ0218",42,0)
 ;
"RTN","HMPZ0218",43,0)
 Q
"RTN","HMPZ0218",44,0)
 ;
"RTN","HMPZ0218",45,0)
NOW() ; extrinsic variable, now in external format
"RTN","HMPZ0218",46,0)
 Q $$HTE^XLFDT($H)
"RTN","HMPZ0218",47,0)
 ;
"RTN","HMPZ0218",48,0)
INDXLST ; *S68 - disable of AEVT index on file 8925 removed US5074 
"RTN","HMPZ0218",49,0)
 ;;702^AVPR^Trigger updates to VPR^
"RTN","HMPZ0218",50,0)
 ;
"SEC","^DIC",800000,800000,0,"AUDIT")
@
"SEC","^DIC",800000,800000,0,"DD")
@
"SEC","^DIC",800000,800000,0,"DEL")
@
"SEC","^DIC",800000,800000,0,"LAYGO")
@
"SEC","^DIC",800000,800000,0,"RD")
@
"SEC","^DIC",800000,800000,0,"WR")
@
"SEC","^DIC",800000.1,800000.1,0,"AUDIT")
@
"SEC","^DIC",800000.1,800000.1,0,"DD")
@
"SEC","^DIC",800000.1,800000.1,0,"DEL")
@
"SEC","^DIC",800000.1,800000.1,0,"LAYGO")
@
"SEC","^DIC",800000.1,800000.1,0,"RD")
@
"SEC","^DIC",800000.1,800000.1,0,"WR")
@
"SEC","^DIC",800000.11,800000.11,0,"AUDIT")
@
"SEC","^DIC",800000.11,800000.11,0,"DD")
@
"SEC","^DIC",800000.11,800000.11,0,"DEL")
@
"SEC","^DIC",800000.11,800000.11,0,"LAYGO")
@
"SEC","^DIC",800000.11,800000.11,0,"RD")
@
"SEC","^DIC",800000.11,800000.11,0,"WR")
@
"SEC","^DIC",800000.2,800000.2,0,"AUDIT")
@
"SEC","^DIC",800000.2,800000.2,0,"DD")
@
"SEC","^DIC",800000.2,800000.2,0,"DEL")
@
"SEC","^DIC",800000.2,800000.2,0,"LAYGO")
@
"SEC","^DIC",800000.2,800000.2,0,"RD")
@
"SEC","^DIC",800000.2,800000.2,0,"WR")
@
"SEC","^DIC",800000.21,800000.21,0,"AUDIT")
@
"SEC","^DIC",800000.21,800000.21,0,"DD")
@
"SEC","^DIC",800000.21,800000.21,0,"DEL")
@
"SEC","^DIC",800000.21,800000.21,0,"LAYGO")
@
"SEC","^DIC",800000.21,800000.21,0,"RD")
@
"SEC","^DIC",800000.21,800000.21,0,"WR")
@
"SEC","^DIC",800000.22,800000.22,0,"AUDIT")
@
"SEC","^DIC",800000.22,800000.22,0,"DD")
@
"SEC","^DIC",800000.22,800000.22,0,"DEL")
@
"SEC","^DIC",800000.22,800000.22,0,"LAYGO")
@
"SEC","^DIC",800000.22,800000.22,0,"RD")
@
"SEC","^DIC",800000.22,800000.22,0,"WR")
@
"SEC","^DIC",800001,800001,0,"AUDIT")
@
"SEC","^DIC",800001,800001,0,"DD")
@
"SEC","^DIC",800001,800001,0,"DEL")
@
"SEC","^DIC",800001,800001,0,"LAYGO")
@
"SEC","^DIC",800001,800001,0,"RD")
@
"SEC","^DIC",800001,800001,0,"WR")
@
"SEC","^DIC",800001.2,800001.2,0,"AUDIT")
@
"SEC","^DIC",800001.2,800001.2,0,"DD")
@
"SEC","^DIC",800001.2,800001.2,0,"DEL")
@
"SEC","^DIC",800001.2,800001.2,0,"LAYGO")
@
"SEC","^DIC",800001.2,800001.2,0,"RD")
@
"SEC","^DIC",800001.2,800001.2,0,"WR")
@
"SEC","^DIC",800001.5,800001.5,0,"AUDIT")
@
"SEC","^DIC",800001.5,800001.5,0,"DD")
@
"SEC","^DIC",800001.5,800001.5,0,"DEL")
@
"SEC","^DIC",800001.5,800001.5,0,"LAYGO")
@
"SEC","^DIC",800001.5,800001.5,0,"RD")
@
"SEC","^DIC",800001.5,800001.5,0,"WR")
@
"VER")
8.0^22.0
"^DD",800000,800000,0)
FIELD^^.04^10
"^DD",800000,800000,0,"DDA")
N
"^DD",800000,800000,0,"DT")
3160126
"^DD",800000,800000,0,"IX","B",800000,.01)

"^DD",800000,800000,0,"NM","HMP SUBSCRIPTION")

"^DD",800000,800000,0,"VRPK")
HMP
"^DD",800000,800000,.01,0)
SERVER^RF^^0;1^K:$L(X)>64!($L(X)<1)!'(X'?1P.E) X
"^DD",800000,800000,.01,1,0)
^.1^^-1
"^DD",800000,800000,.01,1,1,0)
800000^B
"^DD",800000,800000,.01,1,1,1)
S ^HMP(800000,"B",$E(X,1,64),DA)=""
"^DD",800000,800000,.01,1,1,2)
K ^HMP(800000,"B",$E(X,1,64),DA)
"^DD",800000,800000,.01,1,1,"%D",0)
^^1^1^3150922^
"^DD",800000,800000,.01,1,1,"%D",1,0)
Cross-reference, by DFN, of patients subscribed to eHMP.
"^DD",800000,800000,.01,3)
Answer must be 1-64 characters in length.
"^DD",800000,800000,.01,21,0)
^.001^1^1^3150922^^^^
"^DD",800000,800000,.01,21,1,0)
This is the name of the client system that is subscribing to data updates.
"^DD",800000,800000,.01,"DT")
3141028
"^DD",800000,800000,.02,0)
LASTUPDATE^F^^0;2^K:$L(X)>100!($L(X)<3) X
"^DD",800000,800000,.02,3)
Answer must be 3-100 characters in length. (Do not modified)
"^DD",800000,800000,.02,21,0)
^.001^3^3^3150922^^
"^DD",800000,800000,.02,21,1,0)
This field holds a flag indicating if this URL should be notified via the
"^DD",800000,800000,.02,21,2,0)
nightly scheduled option HMP APPOINTMENTS of the list of patients expected
"^DD",800000,800000,.02,21,3,0)
to be seen tomorrow.
"^DD",800000,800000,.02,"DT")
3141028
"^DD",800000,800000,.03,0)
OPERATION DATA^S^0:UNSUBCRIBED;1:SUBSCRIBED;2:INITIALIZED;^0;3^Q
"^DD",800000,800000,.03,3)
This field should not be edited manually without consulting the development team.
"^DD",800000,800000,.03,21,0)
^.001^2^2^3151203^^^^
"^DD",800000,800000,.03,21,1,0)
This field holds a flag indicating if this URL should be notified via http
"^DD",800000,800000,.03,21,2,0)
when a patient is admitted.
"^DD",800000,800000,.03,"DT")
3141028
"^DD",800000,800000,.04,0)
REPEAT POLLS^NJ8,0^^0;4^K:+X'=X!(X>99999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",800000,800000,.04,3)
Type a number between 0 and 99999999, 0 decimal digits.
"^DD",800000,800000,.04,21,0)
^.001^2^2^3150922^^
"^DD",800000,800000,.04,21,1,0)
This tracks the number of times the same "last update" value has been
"^DD",800000,800000,.04,21,2,0)
repeated. A high repeat may be normal if data are not changing.
"^DD",800000,800000,.04,"DT")
3141028
"^DD",800000,800000,.05,0)
DISK USAGE STATUS^S^0:WITHIN LIMIT;1:EXCEEDED LIMIT;^0;5^Q
"^DD",800000,800000,.05,3)
Enter current status of eHMP disk usage.
"^DD",800000,800000,.05,21,0)
^.001^5^5^3150922^^
"^DD",800000,800000,.05,21,1,0)
The DISK USAGE STATUS flag is an indicator set automatically in the eHMP 
"^DD",800000,800000,.05,21,2,0)
subscription process. If the disk space usage in global ^XTMP by eHMP 
"^DD",800000,800000,.05,21,3,0)
subscriptions is above the threshold in the HMP EXTRACT DISK SIZE LIMIT 
"^DD",800000,800000,.05,21,4,0)
is exceeded this flag will be set. Similarly the flag is reset if usage 
"^DD",800000,800000,.05,21,5,0)
later falls below the threshold.
"^DD",800000,800000,.05,23,0)
^.001^4^4^3150922^^
"^DD",800000,800000,.05,23,1,0)
The field is updated from subscription process by the STATUS^HMPMETA
"^DD",800000,800000,.05,23,2,0)
routine.
"^DD",800000,800000,.05,23,3,0)
 
"^DD",800000,800000,.05,23,4,0)
The field is referenced by the fetch process using CHECK^HMPMETA routine.
"^DD",800000,800000,.05,"DT")
3150624
"^DD",800000,800000,.06,0)
DISK USAGE STATUS TIME^D^^0;6^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",800000,800000,.06,3)
Enter the time the DISK USAGE STATUS field was updated.
"^DD",800000,800000,.06,21,0)
^.001^6^6^3150922^^
"^DD",800000,800000,.06,21,1,0)
The DISK USAGE STATUS TIME is a field set automatically in the eHMP 
"^DD",800000,800000,.06,21,2,0)
subscription process. If the disk space usage in global ^XTMP by eHMP 
"^DD",800000,800000,.06,21,3,0)
subscriptions is above the threshold in the HMP EXTRACT DISK SIZE LIMIT is
"^DD",800000,800000,.06,21,4,0)
exceeded the DISK USAGE STATUS field will be set and the time of the 
"^DD",800000,800000,.06,21,5,0)
change recorded in this field. Similarly the flag and time fields will be
"^DD",800000,800000,.06,21,6,0)
reset if usage later falls below the threshold.
"^DD",800000,800000,.06,23,0)
^.001^4^4^3150922^^
"^DD",800000,800000,.06,23,1,0)
The field is updated from subscription process by the STATUS^HMPMETA
"^DD",800000,800000,.06,23,2,0)
routine.
"^DD",800000,800000,.06,23,3,0)
 
"^DD",800000,800000,.06,23,4,0)
The field is referenced by the fetch process using CHECK^HMPMETA routine.
"^DD",800000,800000,.06,"DT")
3150624
"^DD",800000,800000,.1,0)
URL^F^^.1;1^K:$L(X)>250!($L(X)<1) X
"^DD",800000,800000,.1,3)
Answer must be 1-250 characters in length.
"^DD",800000,800000,.1,21,0)
^^1^1^3110706^
"^DD",800000,800000,.1,21,1,0)
This is the fully specified URL to call when updates are available.
"^DD",800000,800000,.1,"DT")
3141028
"^DD",800000,800000,1,0)
PATIENT^800000.01P^^1;0
"^DD",800000,800000,1,21,0)
^.001^1^1^3151203^^^^
"^DD",800000,800000,1,21,1,0)
These are patients that will be monitored for new data and updates.
"^DD",800000,800000,2,0)
ROSTER^800000.02P^^2;0
"^DD",800000,800000,2,21,0)
^.001^1^1^3150922^^^^
"^DD",800000,800000,2,21,1,0)
These are rosters that will be monitored for new patients and updates.
"^DD",800000,800000,2,"DT")
3130417
"^DD",800000,800000,91,0)
CONCURRENT UPDATE CALLS^NJ3,0^^91;1^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X
"^DD",800000,800000,91,3)
Type a number between 0 and 999, 0 decimal digits.
"^DD",800000,800000,91,21,0)
^^3^3^3150218^
"^DD",800000,800000,91,21,1,0)
This field is used to track the number of simultaneous calls to 
"^DD",800000,800000,91,21,2,0)
getPtUpdates in API^HMPDJFS. This allows checkHealth to report if a 
"^DD",800000,800000,91,21,3,0)
getPtUpdates RPC is in progress.
"^DD",800000,800000,91,"DT")
3150218
"^DD",800000,800000.01,0)
PATIENT SUB-FIELD^^3^4
"^DD",800000,800000.01,0,"DT")
3160126
"^DD",800000,800000.01,0,"NM","PATIENT")

"^DD",800000,800000.01,0,"UP")
800000
"^DD",800000,800000.01,.01,0)
PATIENT NAME^MP2'X^DPT(^0;1^S DINUM=X
"^DD",800000,800000.01,.01,1,0)
^.1^^0
"^DD",800000,800000.01,.01,3)
Enter the name of a patient to be tracked.
"^DD",800000,800000.01,.01,21,0)
^.001^1^1^3140212^^
"^DD",800000,800000.01,.01,21,1,0)
This is the name of the patient being monitored for new data.
"^DD",800000,800000.01,.01,"DT")
3140226
"^DD",800000,800000.01,2,0)
STATUS^S^0:UNINITIALIZED;1:INITIALIZING;2:INITIALIZED;^0;2^Q
"^DD",800000,800000.01,2,3)
Enter the tracking status of a patient sync. (Do Not Modify)
"^DD",800000,800000.01,2,21,0)
^.001^4^4^3151203^^^^
"^DD",800000,800000.01,2,21,1,0)
This field tracks the initialization progress of the patient.  When a 
"^DD",800000,800000.01,2,21,2,0)
patient is initially subscribed, they are added to this multiple.  The 
"^DD",800000,800000.01,2,21,3,0)
status is "1" when the extracts start and "2" when they finish.  At that 
"^DD",800000,800000.01,2,21,4,0)
point, freshness updates are moved into the stream.
"^DD",800000,800000.01,2,"DT")
3140521
"^DD",800000,800000.01,3,0)
STATUS DATE-TIME^D^^0;3^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.01,3,.1)
/LABEL
"^DD",800000,800000.01,3,3)
Enter the date.time the status changed.
"^DD",800000,800000.01,3,21,0)
^.001^1^1^3151116^^^
"^DD",800000,800000.01,3,21,1,0)
This is the date.time of the last change in extract status.
"^DD",800000,800000.01,3,"DT")
3151116
"^DD",800000,800000.01,4,0)
ORDERS^800000.14PA^^1;0
"^DD",800000,800000.01,4,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.01,4,21,1,0)
All data in this sub-file are to be manipulated by software only.
"^DD",800000,800000.01,4,21,2,0)
Users should not edit any data without consulting with the developers.
"^DD",800000,800000.02,0)
ROSTER SUB-FIELD^^2^2
"^DD",800000,800000.02,0,"NM","ROSTER")

"^DD",800000,800000.02,0,"UP")
800000
"^DD",800000,800000.02,.01,0)
NAME^MP800001.2'X^HMPROSTR(800001.2,^0;1^S DINUM=X
"^DD",800000,800000.02,.01,1,0)
^.1^^0
"^DD",800000,800000.02,.01,3)
Enter the name of a roster to be tracked.
"^DD",800000,800000.02,.01,21,0)
^.001^1^1^3130417^^
"^DD",800000,800000.02,.01,21,1,0)
This is the name of the roster being monitored for new patients.
"^DD",800000,800000.02,.01,"DT")
3130417
"^DD",800000,800000.02,2,0)
ON^S^1:YES;0:NO;^0;2^Q
"^DD",800000,800000.02,2,3)
Enter YES to turn on data tracking for this roster.
"^DD",800000,800000.02,2,21,0)
^.001^3^3^3130417^^
"^DD",800000,800000.02,2,21,1,0)
This field turns on the Data Monitor for this roster and client system.
"^DD",800000,800000.02,2,21,2,0)
If ON=true, a new snapshot of this roster will be sent to the client
"^DD",800000,800000.02,2,21,3,0)
when new data updates are requested.
"^DD",800000,800000.02,2,"DT")
3130417
"^DD",800000,800000.14,0)
ORDERS SUB-FIELD^^1.01^17
"^DD",800000,800000.14,0,"DT")
3160126
"^DD",800000,800000.14,0,"IX","B",800000.14,.01)

"^DD",800000,800000.14,0,"NM","ORDERS")

"^DD",800000,800000.14,0,"UP")
800000.01
"^DD",800000,800000.14,.01,0)
ORDER NUMBER^P100'X^OR(100,^0;1^S DINUM=X
"^DD",800000,800000.14,.01,1,0)
^.1
"^DD",800000,800000.14,.01,1,1,0)
800000.14^B
"^DD",800000,800000.14,.01,1,1,1)
S ^HMP(800000,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",800000,800000.14,.01,1,1,2)
K ^HMP(800000,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)
"^DD",800000,800000.14,.01,3)
Enter the Order number.
"^DD",800000,800000.14,.01,21,0)
^.001^15^15^3151217^^^^
"^DD",800000,800000.14,.01,21,1,0)
All the data in this sub-file are entered programmatically.
"^DD",800000,800000.14,.01,21,2,0)
 
"^DD",800000,800000.14,.01,21,3,0)
The data are used to create timestamps with seconds in order to correctly 
"^DD",800000,800000.14,.01,21,4,0)
sequence orders that are sync'd with the eHMP system. Timestamps with 
"^DD",800000,800000.14,.01,21,5,0)
seconds captured are necessary in order to sequence order activity when 
"^DD",800000,800000.14,.01,21,6,0)
using the lastUpdateTime. The lastUpdateTime is passed with the order 
"^DD",800000,800000.14,.01,21,7,0)
data during a sync operation. Currently the VA Order file (#100) only 
"^DD",800000,800000.14,.01,21,8,0)
captures a timestamp that includes hrs and minutes but not seconds. It is 
"^DD",800000,800000.14,.01,21,9,0)
possible for two activities such as saving and signing to occur in the 
"^DD",800000,800000.14,.01,21,10,0)
same minute, without seconds added the the activity timestamp it is 
"^DD",800000,800000.14,.01,21,11,0)
impossible to determine which activity occured first. 
"^DD",800000,800000.14,.01,21,12,0)
 
"^DD",800000,800000.14,.01,21,13,0)
The PURGE DATETIME is the date time to purge this record. The PURGE 
"^DD",800000,800000.14,.01,21,14,0)
DATETIME is 24 hours after the record is created. Purging the data after 
"^DD",800000,800000.14,.01,21,15,0)
24 hours will prevent the file from growing too large.
"^DD",800000,800000.14,.01,"DT")
3151102
"^DD",800000,800000.14,.02,0)
CREATE DATE/TIME^D^^0;2^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,.02,3)
Enter the date and time the order was created.
"^DD",800000,800000.14,.02,21,0)
^.001^2^2^3151217^^^
"^DD",800000,800000.14,.02,21,1,0)
The date/time to include seconds that the order was created.
"^DD",800000,800000.14,.02,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.02,"DT")
3151216
"^DD",800000,800000.14,.03,0)
SIGNED BY^P200'^VA(200,^0;3^Q
"^DD",800000,800000.14,.03,3)
Enter the User who signed the order.
"^DD",800000,800000.14,.03,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.14,.03,21,1,0)
The person signing the order.
"^DD",800000,800000.14,.03,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.03,"DT")
3151216
"^DD",800000,800000.14,.04,0)
SIGNED DATE/TIME^D^^0;4^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,.04,3)
Enter the date and time the order was signed.
"^DD",800000,800000.14,.04,21,0)
^.001^2^2^3151217^^^
"^DD",800000,800000.14,.04,21,1,0)
The date/time with seconds the order was signed.
"^DD",800000,800000.14,.04,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.04,"DT")
3151216
"^DD",800000,800000.14,.05,0)
VERIFYING NURSE^P200'^VA(200,^0;5^Q
"^DD",800000,800000.14,.05,3)
Enter the nurse who verified the order.
"^DD",800000,800000.14,.05,21,0)
^.001^2^2^3151217^^^
"^DD",800000,800000.14,.05,21,1,0)
The date/time, including seconds, the nurse verified the order.
"^DD",800000,800000.14,.05,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.05,"DT")
3151216
"^DD",800000,800000.14,.06,0)
NURSE VERIFY DATE/TIME^D^^0;6^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,.06,3)
Enter the date and time the nurse verified the order.
"^DD",800000,800000.14,.06,21,0)
^.001^2^2^3151217^^^
"^DD",800000,800000.14,.06,21,1,0)
The date/time, including seconds, the nurse verified the order.
"^DD",800000,800000.14,.06,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.06,"DT")
3151216
"^DD",800000,800000.14,.07,0)
VERIFYING CLERK^P200'^VA(200,^0;7^Q
"^DD",800000,800000.14,.07,3)
Enter the clerk who verified the order.
"^DD",800000,800000.14,.07,21,0)
^.001^2^2^3151217^^^
"^DD",800000,800000.14,.07,21,1,0)
The clerk who verified the order.
"^DD",800000,800000.14,.07,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.07,"DT")
3151216
"^DD",800000,800000.14,.08,0)
CLERK VERIFY DATE/TIME^D^^0;8^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,.08,3)
Enter the date and time the clerk verified the order.
"^DD",800000,800000.14,.08,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.14,.08,21,1,0)
The date/time, including seconds, the clerk verified the order.
"^DD",800000,800000.14,.08,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.08,"DT")
3151217
"^DD",800000,800000.14,.09,0)
REVIEWED BY^P200'^VA(200,^0;9^Q
"^DD",800000,800000.14,.09,3)
Enter the user who reviewed the order.
"^DD",800000,800000.14,.09,21,0)
^.001^2^2^3151217^^^
"^DD",800000,800000.14,.09,21,1,0)
The user who reviewed the order.
"^DD",800000,800000.14,.09,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.09,"DT")
3151216
"^DD",800000,800000.14,.1,0)
REVIEWED DATE/TIME^D^^0;10^S %DT="ESTR" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,.1,3)
Enter the date and time the order was reviewed.
"^DD",800000,800000.14,.1,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.14,.1,21,1,0)
The date/time, including seconds, the order was reviewed.
"^DD",800000,800000.14,.1,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.1,"DT")
3151216
"^DD",800000,800000.14,.11,0)
RELEASED BY^P200'^VA(200,^0;11^Q
"^DD",800000,800000.14,.11,3)
Enter the user who released the order.
"^DD",800000,800000.14,.11,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.14,.11,21,1,0)
The user who released the order.
"^DD",800000,800000.14,.11,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.11,"DT")
3151216
"^DD",800000,800000.14,.12,0)
RELEASED DATE/TIME^D^^0;12^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,.12,3)
Enter the date and time the order was released.
"^DD",800000,800000.14,.12,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.14,.12,21,1,0)
The date/time, including seconds, the order was released.
"^DD",800000,800000.14,.12,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.12,"DT")
3151216
"^DD",800000,800000.14,.13,0)
PURGE DATE/TIME^D^^0;13^S %DT="EST" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,.13,3)
Enter the date and time after which this entry can be purged.
"^DD",800000,800000.14,.13,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.14,.13,21,1,0)
The earliest date/time the order data can be purged.
"^DD",800000,800000.14,.13,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.13,"DT")
3151216
"^DD",800000,800000.14,.14,0)
ORDER ACTION^S^NW:NEW;DC:DISCONTINUED;HD:HOLD;RL:RELEASE HOLD;XX:CHANGE;VA:VALIDATE;IP:TRANSFERRED TO IP;OP:TRANSFERRED TO OP;^0;14^Q
"^DD",800000,800000.14,.14,3)
Enter the action performed on this order.
"^DD",800000,800000.14,.14,21,0)
^.001^2^2^3151217^^^
"^DD",800000,800000.14,.14,21,1,0)
The action taken on the order.
"^DD",800000,800000.14,.14,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.14,"DT")
3151216
"^DD",800000,800000.14,.15,0)
ACTION DATE/TIME^D^^0;15^S %DT="EST" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,.15,3)
Enter the date and time this order action was performed.
"^DD",800000,800000.14,.15,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.14,.15,21,1,0)
The date/time of the order action.
"^DD",800000,800000.14,.15,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.14,.15,"DT")
3151216
"^DD",800000,800000.14,1.01,0)
TRACKING START^DI^^1;1^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.14,1.01,3)
Enter the date and time that eHMP started tracking this Order.
"^DD",800000,800000.14,1.01,21,0)
^^2^2^3160126^
"^DD",800000,800000.14,1.01,21,1,0)
This field is set to NOW when the Order is first added to this sub-file.
"^DD",800000,800000.14,1.01,21,2,0)
It is uneditable.
"^DD",800000,800000.14,1.01,"DT")
3160126
"^DD",800000,800000.14,2,0)
ORDER FLAG/UNFLAG DATE/TIME^800000.142DA^^2;0
"^DD",800000,800000.14,2,21,0)
^^1^1^3151217^
"^DD",800000,800000.14,2,21,1,0)
This sub-file contains flagging /unflagging actions on orders.
"^DD",800000,800000.14,2,"DT")
3151216
"^DD",800000,800000.142,0)
ORDER FLAG/UNFLAG DATE/TIME SUB-FIELD^^.04^4
"^DD",800000,800000.142,0,"DT")
3151216
"^DD",800000,800000.142,0,"IX","B",800000.142,.01)

"^DD",800000,800000.142,0,"NM","ORDER FLAG/UNFLAG DATE/TIME")

"^DD",800000,800000.142,0,"UP")
800000.14
"^DD",800000,800000.142,.01,0)
ORDER FLAG/UNFLAG DATE/TIME^D^^0;1^S %DT="ESTR" D ^%DT S X=Y K:Y<1 X
"^DD",800000,800000.142,.01,1,0)
^.1
"^DD",800000,800000.142,.01,1,1,0)
800000.142^B
"^DD",800000,800000.142,.01,1,1,1)
S ^HMP(800000,DA(3),1,DA(2),1,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",800000,800000.142,.01,1,1,2)
K ^HMP(800000,DA(3),1,DA(2),1,DA(1),2,"B",$E(X,1,30),DA)
"^DD",800000,800000.142,.01,3)
Enter the date and time the order was flagged or unflagged.
"^DD",800000,800000.142,.01,21,0)
^.001^3^3^3151217^^
"^DD",800000,800000.142,.01,21,1,0)
This is the date/time with seconds that an order was flagged /unflagged.
"^DD",800000,800000.142,.01,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.142,.01,21,3,0)
An order can be flagged or unflagged multiple times.
"^DD",800000,800000.142,.01,"DT")
3151216
"^DD",800000,800000.142,.02,0)
FLAG ACTION^S^F:FLAGGED;U:UNFLAGGED;^0;2^Q
"^DD",800000,800000.142,.02,3)
Indicate whether the order was flagged or unflagged.
"^DD",800000,800000.142,.02,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.142,.02,21,1,0)
The date/time, with seconds, the order was flagged /unflagged.
"^DD",800000,800000.142,.02,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.142,.02,"DT")
3151216
"^DD",800000,800000.142,.03,0)
FLAG/UNFLAG USER^P200'^VA(200,^0;3^Q
"^DD",800000,800000.142,.03,3)
Enter the user who flagged or unflagged the order.
"^DD",800000,800000.142,.03,21,0)
^.001^2^2^3151217^^
"^DD",800000,800000.142,.03,21,1,0)
The user who flagged /unflagged the order.
"^DD",800000,800000.142,.03,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.142,.03,"DT")
3151216
"^DD",800000,800000.142,.04,0)
FLAG/UNFLAG REASON^F^^0;4^K:$L(X)>80!($L(X)<1) X
"^DD",800000,800000.142,.04,.1)
REASON FOR FLAGGING /UNFLAGGING
"^DD",800000,800000.142,.04,3)
Answer must be 1-80 characters.
"^DD",800000,800000.142,.04,21,0)
^.001^2^2^3151217^^^
"^DD",800000,800000.142,.04,21,1,0)
This is why the order was flagged /unflagged.
"^DD",800000,800000.142,.04,21,2,0)
This field is entered programmatically.
"^DD",800000,800000.142,.04,"DT")
3151216
"^DD",800000.1,800000.1,0)
FIELD^^1^4
"^DD",800000.1,800000.1,0,"DDA")
N
"^DD",800000.1,800000.1,0,"IX","B",800000.1,.01)

"^DD",800000.1,800000.1,0,"NM","HMP PATIENT OBJECT")

"^DD",800000.1,800000.1,0,"VRPK")
HMP
"^DD",800000.1,800000.1,.01,0)
UID^RF^^0;1^K:$L(X)>63!($L(X)<3)!'(X'?1P.E) X
"^DD",800000.1,800000.1,.01,1,0)
^.1
"^DD",800000.1,800000.1,.01,1,1,0)
800000.1^B
"^DD",800000.1,800000.1,.01,1,1,1)
S ^HMP(800000.1,"B",$E(X,1,63),DA)=""
"^DD",800000.1,800000.1,.01,1,1,2)
K ^HMP(800000.1,"B",$E(X,1,63),DA)
"^DD",800000.1,800000.1,.01,1,1,"%D",0)
^^1^1^3151116^
"^DD",800000.1,800000.1,.01,1,1,"%D",1,0)
Index of COLLECTION by PATIENT (DFN).
"^DD",800000.1,800000.1,.01,3)
Answer must be 3-63 characters in length.
"^DD",800000.1,800000.1,.01,21,0)
^^1^1^3121129^
"^DD",800000.1,800000.1,.01,21,1,0)
The fully specified Universal ID string for this object.
"^DD",800000.1,800000.1,.01,23,0)
^^1^1^3121129^
"^DD",800000.1,800000.1,.01,23,1,0)
urn:va:{systemId}:{DFN}:{collection}:{ien}
"^DD",800000.1,800000.1,.01,"DT")
3150812
"^DD",800000.1,800000.1,.02,0)
PATIENT^RP2'^DPT(^0;2^Q
"^DD",800000.1,800000.1,.02,3)
Enter the patient that owns this object.
"^DD",800000.1,800000.1,.02,21,0)
^^1^1^3121129^
"^DD",800000.1,800000.1,.02,21,1,0)
Patient file #2 ien
"^DD",800000.1,800000.1,.02,"DT")
3121129
"^DD",800000.1,800000.1,.03,0)
COLLECTION^F^^0;3^K:$L(X)>30!($L(X)<3) X
"^DD",800000.1,800000.1,.03,3)
Answer must be 3-30 characters in length.
"^DD",800000.1,800000.1,.03,21,0)
^^1^1^3121129^
"^DD",800000.1,800000.1,.03,21,1,0)
The name of the type or kind of data this object belongs to.
"^DD",800000.1,800000.1,.03,"DT")
3121129
"^DD",800000.1,800000.1,1,0)
DATA^800000.101^^1;0
"^DD",800000.1,800000.101,0)
DATA SUB-FIELD^^.01^1
"^DD",800000.1,800000.101,0,"NM","DATA")

"^DD",800000.1,800000.101,0,"UP")
800000.1
"^DD",800000.1,800000.101,.01,0)
DATA^Wx^^0;1^Q
"^DD",800000.1,800000.101,.01,21,0)
^^1^1^3121129^
"^DD",800000.1,800000.101,.01,21,1,0)
JSON data object
"^DD",800000.1,800000.101,.01,"DT")
3121129
"^DD",800000.11,800000.11,0)
FIELD^^1^3
"^DD",800000.11,800000.11,0,"IX","ACNT",800000.11,.03)

"^DD",800000.11,800000.11,0,"IX","B",800000.11,.01)

"^DD",800000.11,800000.11,0,"IX","C",800000.11,.03)

"^DD",800000.11,800000.11,0,"NM","HMP OBJECT")

"^DD",800000.11,800000.11,0,"VRPK")
HMP
"^DD",800000.11,800000.11,.01,0)
UID^RF^^0;1^K:$L(X)>63!($L(X)<3)!'(X'?1P.E) X
"^DD",800000.11,800000.11,.01,1,0)
^.1
"^DD",800000.11,800000.11,.01,1,1,0)
800000.11^B
"^DD",800000.11,800000.11,.01,1,1,1)
S ^HMP(800000.11,"B",$E(X,1,63),DA)=""
"^DD",800000.11,800000.11,.01,1,1,2)
K ^HMP(800000.11,"B",$E(X,1,63),DA)
"^DD",800000.11,800000.11,.01,1,1,"%D",0)
^.101^1^1^3150923^^
"^DD",800000.11,800000.11,.01,1,1,"%D",1,0)
Cross-reference by Universal IDentifier (UID).
"^DD",800000.11,800000.11,.01,3)
Answer must be 3-63 characters in length.
"^DD",800000.11,800000.11,.01,21,0)
^^1^1^3121129^
"^DD",800000.11,800000.11,.01,21,1,0)
The fully specified Universal ID string for this object.
"^DD",800000.11,800000.11,.01,23,0)
^^1^1^3121129^
"^DD",800000.11,800000.11,.01,23,1,0)
urn:va:{collection}:{systemId}:{ien}
"^DD",800000.11,800000.11,.01,"DT")
3121129
"^DD",800000.11,800000.11,.03,0)
COLLECTION^F^^0;3^K:$L(X)>30!($L(X)<3) X
"^DD",800000.11,800000.11,.03,1,0)
^.1
"^DD",800000.11,800000.11,.03,1,1,0)
800000.11^C
"^DD",800000.11,800000.11,.03,1,1,1)
S ^HMP(800000.11,"C",$E(X,1,30),DA)=""
"^DD",800000.11,800000.11,.03,1,1,2)
K ^HMP(800000.11,"C",$E(X,1,30),DA)
"^DD",800000.11,800000.11,.03,1,1,"%D",0)
^^1^1^3150923^
"^DD",800000.11,800000.11,.03,1,1,"%D",1,0)
Cross-reference by collection, VistA extracted domains.
"^DD",800000.11,800000.11,.03,1,1,"DT")
3121129
"^DD",800000.11,800000.11,.03,1,2,0)
800000.11^ACNT^MUMPS
"^DD",800000.11,800000.11,.03,1,2,1)
S ^HMP(800000.11,"ACNT",$E(X,1,30))=$G(^HMP(800000.11,"ACNT",$E(X,1,30)))+1
"^DD",800000.11,800000.11,.03,1,2,2)
S ^HMP(800000.11,"ACNT",$E(X,1,30))=$G(^HMP(800000.11,"ACNT",$E(X,1,30)))-1
"^DD",800000.11,800000.11,.03,1,2,"%D",0)
^.101^1^1^3150923^^^
"^DD",800000.11,800000.11,.03,1,2,"%D",1,0)
Maintain a count of the number of items in each collection.
"^DD",800000.11,800000.11,.03,1,2,"DT")
3140503
"^DD",800000.11,800000.11,.03,3)
Answer must be 3-30 characters in length.
"^DD",800000.11,800000.11,.03,21,0)
^^1^1^3121129^
"^DD",800000.11,800000.11,.03,21,1,0)
The name of the type or kind of data this object belongs to.
"^DD",800000.11,800000.11,.03,"DT")
3140503
"^DD",800000.11,800000.11,1,0)
DATA^800000.111^^1;0
"^DD",800000.11,800000.11,1,21,0)
^^1^1^3150923^
"^DD",800000.11,800000.11,1,21,1,0)
Actual VistA domain data to be transmitted.
"^DD",800000.11,800000.111,0)
DATA SUB-FIELD^^.01^1
"^DD",800000.11,800000.111,0,"NM","DATA")

"^DD",800000.11,800000.111,0,"UP")
800000.11
"^DD",800000.11,800000.111,.01,0)
DATA^Wx^^0;1^Q
"^DD",800000.11,800000.111,.01,21,0)
^.001^1^1^3150923^^
"^DD",800000.11,800000.111,.01,21,1,0)
JSON data object.
"^DD",800000.11,800000.111,.01,"DT")
3121129
"^DD",800000.2,800000.2,0)
FIELD^^.3^11
"^DD",800000.2,800000.2,0,"DT")
3151117
"^DD",800000.2,800000.2,0,"IX","ADD",800000.2,.03)

"^DD",800000.2,800000.2,0,"IX","AREFRESH",800000.2,.08)

"^DD",800000.2,800000.2,0,"IX","B",800000.2,.01)

"^DD",800000.2,800000.2,0,"NM","HMP LIST")

"^DD",800000.2,800000.2,0,"VRPK")
HMP
"^DD",800000.2,800000.2,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",800000.2,800000.2,.01,1,0)
^.1
"^DD",800000.2,800000.2,.01,1,1,0)
800000.2^B
"^DD",800000.2,800000.2,.01,1,1,1)
S ^HMPD(800000.2,"B",$E(X,1,30),DA)=""
"^DD",800000.2,800000.2,.01,1,1,2)
K ^HMPD(800000.2,"B",$E(X,1,30),DA)
"^DD",800000.2,800000.2,.01,1,1,"%D",0)
^^1^1^3150923^
"^DD",800000.2,800000.2,.01,1,1,"%D",1,0)
Cross-reference by VistA domain name.
"^DD",800000.2,800000.2,.01,3)
Answer must be 3-30 characters in length.
"^DD",800000.2,800000.2,.01,21,0)
^^1^1^3150923^
"^DD",800000.2,800000.2,.01,21,1,0)
This is the name of the HMP List.
"^DD",800000.2,800000.2,.01,"DT")
3150923
"^DD",800000.2,800000.2,.02,0)
TYPE^S^0:STATIC;1:DYNAMIC;^0;2^Q
"^DD",800000.2,800000.2,.02,3)
This field should not be edited manually without consulting the development team.
"^DD",800000.2,800000.2,.02,21,0)
^^1^1^3150923^
"^DD",800000.2,800000.2,.02,21,1,0)
This field defines a data entry as static or dynamic.
"^DD",800000.2,800000.2,.02,"DT")
3121011
"^DD",800000.2,800000.2,.03,0)
DD NUMBER^NJ14,5^^0;3^K:+X'=X!(X>99999999)!(X<1)!(X?.E1"."6N.N) X
"^DD",800000.2,800000.2,.03,1,0)
^.1
"^DD",800000.2,800000.2,.03,1,1,0)
800000.2^ADD
"^DD",800000.2,800000.2,.03,1,1,1)
S ^HMPD(800000.2,"ADD",$E(X,1,30),DA)=""
"^DD",800000.2,800000.2,.03,1,1,2)
K ^HMPD(800000.2,"ADD",$E(X,1,30),DA)
"^DD",800000.2,800000.2,.03,1,1,"%D",0)
^^1^1^3150923^
"^DD",800000.2,800000.2,.03,1,1,"%D",1,0)
Cross-reference by the File's Data Dictionary number.
"^DD",800000.2,800000.2,.03,1,1,"DT")
3121022
"^DD",800000.2,800000.2,.03,3)
Type a number between 1 and 99999999, 5 decimal digits.
"^DD",800000.2,800000.2,.03,21,0)
^^1^1^3150923^
"^DD",800000.2,800000.2,.03,21,1,0)
This is the NUMBER of the File being referenced.
"^DD",800000.2,800000.2,.03,"DT")
3121022
"^DD",800000.2,800000.2,.04,0)
DOMAIN^RP800000.21'^HMPD(800000.21,^0;4^Q
"^DD",800000.2,800000.2,.04,3)
Enter a VistA data domain from the HMP LIST DOMAIN File.
"^DD",800000.2,800000.2,.04,21,0)
^^1^1^3150923^
"^DD",800000.2,800000.2,.04,21,1,0)
A VistA data domain from the HMP LIST DOMAIN File.
"^DD",800000.2,800000.2,.04,"DT")
3121031
"^DD",800000.2,800000.2,.05,0)
ATTRIBUTE^RP800000.22'^HMPD(800000.22,^0;5^Q
"^DD",800000.2,800000.2,.05,3)
Enter an ATTRIBUTE from the HMP LIST ATTRIBUTE File.
"^DD",800000.2,800000.2,.05,21,0)
^^1^1^3150923^
"^DD",800000.2,800000.2,.05,21,1,0)
This is a pointer to the HMP ATTRIBUTE File.
"^DD",800000.2,800000.2,.05,"DT")
3121107
"^DD",800000.2,800000.2,.08,0)
REFRESH THRESHOLD^NJ4,0^^0;8^K:+X'=X!(X>1440)!(X<0)!(X?.E1"."1N.N) X
"^DD",800000.2,800000.2,.08,1,0)
^.1
"^DD",800000.2,800000.2,.08,1,1,0)
800000.2^AREFRESH
"^DD",800000.2,800000.2,.08,1,1,1)
S ^HMPD(800000.2,"AREFRESH",$E(X,1,30),DA)=""
"^DD",800000.2,800000.2,.08,1,1,2)
K ^HMPD(800000.2,"AREFRESH",$E(X,1,30),DA)
"^DD",800000.2,800000.2,.08,1,1,"%D",0)
^^1^1^3150923^
"^DD",800000.2,800000.2,.08,1,1,"%D",1,0)
Cross-reference by time (in days) until a refresh happens.
"^DD",800000.2,800000.2,.08,1,1,"DT")
3121031
"^DD",800000.2,800000.2,.08,3)
Type a number between 0 and 1440, 0 decimal digits.
"^DD",800000.2,800000.2,.08,21,0)
^^2^2^3150923^
"^DD",800000.2,800000.2,.08,21,1,0)
Amount of time, in days, required to pass before an automatic
"^DD",800000.2,800000.2,.08,21,2,0)
refresh will occur.
"^DD",800000.2,800000.2,.08,"DT")
3121031
"^DD",800000.2,800000.2,.09,0)
NEXT REFRESH DATE^D^^0;9^S %DT="ETXR" D ^%DT S X=Y K:Y<1 X
"^DD",800000.2,800000.2,.09,3)
Enter a date up to T+1440.
"^DD",800000.2,800000.2,.09,21,0)
^^1^1^3150923^
"^DD",800000.2,800000.2,.09,21,1,0)
Date of next refresh based on the value of REFRESH THRESHOLD.
"^DD",800000.2,800000.2,.09,"DT")
3150923
"^DD",800000.2,800000.2,.11,0)
GENERATION CODE^K^^.11;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",800000.2,800000.2,.11,3)
This is Standard MUMPS code.
"^DD",800000.2,800000.2,.11,9)
@
"^DD",800000.2,800000.2,.11,21,0)
^^1^1^3150923^
"^DD",800000.2,800000.2,.11,21,1,0)
MUMPS code to implement the refresh of a domain.
"^DD",800000.2,800000.2,.11,"DT")
3121011
"^DD",800000.2,800000.2,.2,0)
COLUMNS^800000.202^^2;0
"^DD",800000.2,800000.2,.2,21,0)
^.001^1^1^3150923^^
"^DD",800000.2,800000.2,.2,21,1,0)
These are references to data which will be extracted.
"^DD",800000.2,800000.2,.3,0)
DESCRIPTION^800000.203^^3;0
"^DD",800000.2,800000.2,.3,21,0)
^.001^1^1^3151117^^^^
"^DD",800000.2,800000.2,.3,21,1,0)
Description of the data to be extracted.
"^DD",800000.2,800000.2,.3,"DT")
3151117
"^DD",800000.2,800000.2,.9,0)
DATA^800000.209^^9;0
"^DD",800000.2,800000.2,.9,21,0)
^.001^1^1^3151117^^^
"^DD",800000.2,800000.2,.9,21,1,0)
The actual data being sent.
"^DD",800000.2,800000.2,.9,"DT")
3151117
"^DD",800000.2,800000.202,0)
COLUMNS SUB-FIELD^^.02^2
"^DD",800000.2,800000.202,0,"IX","AORD",800000.202,.02)

"^DD",800000.2,800000.202,0,"IX","B",800000.202,.01)

"^DD",800000.2,800000.202,0,"NM","COLUMNS")

"^DD",800000.2,800000.202,0,"UP")
800000.2
"^DD",800000.2,800000.202,.01,0)
COLUMN NAME^MF^^0;1^K:$L(X)>30!($L(X)<3)!'(X?1UL.29ULN) X
"^DD",800000.2,800000.202,.01,1,0)
^.1
"^DD",800000.2,800000.202,.01,1,1,0)
800000.202^B
"^DD",800000.2,800000.202,.01,1,1,1)
S ^HMPD(800000.2,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",800000.2,800000.202,.01,1,1,2)
K ^HMPD(800000.2,DA(1),2,"B",$E(X,1,30),DA)
"^DD",800000.2,800000.202,.01,1,1,"%D",0)
^^1^1^3150923^
"^DD",800000.2,800000.202,.01,1,1,"%D",1,0)
COLUMN cross-reference by name.
"^DD",800000.2,800000.202,.01,3)
Answer must be 3-30 characters in length.
"^DD",800000.2,800000.202,.01,21,0)
^^1^1^3150923^
"^DD",800000.2,800000.202,.01,21,1,0)
Name of the data column to be extracted.
"^DD",800000.2,800000.202,.01,"DT")
3141015
"^DD",800000.2,800000.202,.02,0)
ORDER^RNJ2,0^^0;2^K:+X'=X!(X>99)!(X<3)!(X?.E1"."1N.N) X
"^DD",800000.2,800000.202,.02,1,0)
^.1
"^DD",800000.2,800000.202,.02,1,1,0)
800000.202^AORD
"^DD",800000.2,800000.202,.02,1,1,1)
S ^HMPD(800000.2,DA(1),2,"AORD",$E(X,1,30),DA)=""
"^DD",800000.2,800000.202,.02,1,1,2)
K ^HMPD(800000.2,DA(1),2,"AORD",$E(X,1,30),DA)
"^DD",800000.2,800000.202,.02,1,1,"%D",0)
^^1^1^3150923^
"^DD",800000.2,800000.202,.02,1,1,"%D",1,0)
Cross-reference of data column extraction order.
"^DD",800000.2,800000.202,.02,1,1,"DT")
3121031
"^DD",800000.2,800000.202,.02,3)
Type a number between 3 and 99, 0 decimal digits.
"^DD",800000.2,800000.202,.02,21,0)
^^1^1^3150923^
"^DD",800000.2,800000.202,.02,21,1,0)
Order in which data columns will be extracted.
"^DD",800000.2,800000.202,.02,"DT")
3121031
"^DD",800000.2,800000.203,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",800000.2,800000.203,0,"DT")
3151117
"^DD",800000.2,800000.203,0,"NM","DESCRIPTION")

"^DD",800000.2,800000.203,0,"UP")
800000.2
"^DD",800000.2,800000.203,.01,0)
Description of JSON^WLx^^0;1^Q
"^DD",800000.2,800000.203,.01,3)

"^DD",800000.2,800000.203,.01,21,0)
^.001^1^1^3151117^^^^
"^DD",800000.2,800000.203,.01,21,1,0)
Description of the data to be extracted.
"^DD",800000.2,800000.203,.01,"DT")
3151117
"^DD",800000.2,800000.209,0)
DATA SUB-FIELD^^.01^1
"^DD",800000.2,800000.209,0,"NM","DATA")

"^DD",800000.2,800000.209,0,"UP")
800000.2
"^DD",800000.2,800000.209,.01,0)
DATA^WLx^^0;1^Q
"^DD",800000.2,800000.209,.01,3)

"^DD",800000.2,800000.209,.01,21,0)
^.001^1^1^3151117^^^
"^DD",800000.2,800000.209,.01,21,1,0)
The actual data being sent.
"^DD",800000.2,800000.209,.01,"DT")
3121030
"^DD",800000.21,800000.21,0)
FIELD^^.01^3
"^DD",800000.21,800000.21,0,"DT")
3150923
"^DD",800000.21,800000.21,0,"IX","B",800000.21,.01)

"^DD",800000.21,800000.21,0,"NM","HMP LIST DOMAIN")

"^DD",800000.21,800000.21,0,"PT",800000.2,.04)

"^DD",800000.21,800000.21,0,"VRPK")
HMP
"^DD",800000.21,800000.21,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",800000.21,800000.21,.01,1,0)
^.1
"^DD",800000.21,800000.21,.01,1,1,0)
800000.21^B
"^DD",800000.21,800000.21,.01,1,1,1)
S ^HMPD(800000.21,"B",$E(X,1,30),DA)=""
"^DD",800000.21,800000.21,.01,1,1,2)
K ^HMPD(800000.21,"B",$E(X,1,30),DA)
"^DD",800000.21,800000.21,.01,1,1,"%D",0)
^^1^1^3150923^
"^DD",800000.21,800000.21,.01,1,1,"%D",1,0)
The name cross-reference by its domain.
"^DD",800000.21,800000.21,.01,3)
Answer must be 3-30 characters in length.
"^DD",800000.21,800000.21,.01,21,0)
^^2^2^3150923^
"^DD",800000.21,800000.21,.01,21,1,0)
This is the name of a VistA data domain which can be
"^DD",800000.21,800000.21,.01,21,2,0)
extracted for transmission.
"^DD",800000.21,800000.21,.01,"DT")
3150923
"^DD",800000.21,800000.21,.02,0)
ABBREVIATION^F^^0;2^K:$L(X)>10!($L(X)<1) X
"^DD",800000.21,800000.21,.02,3)
Answer must be 1-10 characters in length.
"^DD",800000.21,800000.21,.02,21,0)
^^1^1^3150923^
"^DD",800000.21,800000.21,.02,21,1,0)
This is the short name of the VistA data domain.
"^DD",800000.21,800000.21,.02,"DT")
3121031
"^DD",800000.21,800000.21,.03,0)
DISPLAY NAME^F^^0;3^K:$L(X)>50!($L(X)<1) X
"^DD",800000.21,800000.21,.03,3)
Answer must be 1-50 characters in length.
"^DD",800000.21,800000.21,.03,21,0)
^^1^1^3150923^
"^DD",800000.21,800000.21,.03,21,1,0)
This is the actual name of the VistA data domain.
"^DD",800000.21,800000.21,.03,"DT")
3121031
"^DD",800000.22,800000.22,0)
FIELD^^.01^3
"^DD",800000.22,800000.22,0,"DT")
3150923
"^DD",800000.22,800000.22,0,"IX","B",800000.22,.01)

"^DD",800000.22,800000.22,0,"NM","HMP LIST ATTRIBUTE")

"^DD",800000.22,800000.22,0,"PT",800000.2,.05)

"^DD",800000.22,800000.22,0,"VRPK")
HMP
"^DD",800000.22,800000.22,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",800000.22,800000.22,.01,1,0)
^.1
"^DD",800000.22,800000.22,.01,1,1,0)
800000.22^B
"^DD",800000.22,800000.22,.01,1,1,1)
S ^HMPD(800000.22,"B",$E(X,1,30),DA)=""
"^DD",800000.22,800000.22,.01,1,1,2)
K ^HMPD(800000.22,"B",$E(X,1,30),DA)
"^DD",800000.22,800000.22,.01,1,1,"%D",0)
^^1^1^3150923^
"^DD",800000.22,800000.22,.01,1,1,"%D",1,0)
This is the cross-reference of the attribute by its name.
"^DD",800000.22,800000.22,.01,3)
Answer must be 3-30 characters in length.
"^DD",800000.22,800000.22,.01,21,0)
^^1^1^3150923^
"^DD",800000.22,800000.22,.01,21,1,0)
This is the name of an eHMP data domain's attribute.
"^DD",800000.22,800000.22,.01,"DT")
3150923
"^DD",800000.22,800000.22,.02,0)
ABBREVIATION^F^^0;2^K:$L(X)>10!($L(X)<1) X
"^DD",800000.22,800000.22,.02,3)
Answer must be 1-10 characters in length.
"^DD",800000.22,800000.22,.02,21,0)
^^1^1^3150923^
"^DD",800000.22,800000.22,.02,21,1,0)
This is the short name of an eHMP data domain's attribute.
"^DD",800000.22,800000.22,.02,"DT")
3121031
"^DD",800000.22,800000.22,.03,0)
DISPLAY NAME^F^^0;3^K:$L(X)>50!($L(X)<1) X
"^DD",800000.22,800000.22,.03,3)
Answer must be 1-50 characters in length.
"^DD",800000.22,800000.22,.03,21,0)
^^1^1^3150923^
"^DD",800000.22,800000.22,.03,21,1,0)
This is the actual name of an eHMP data domain's attribute.
"^DD",800000.22,800000.22,.03,"DT")
3121031
"^DD",800001,800001,0)
FIELD^^.03^4
"^DD",800001,800001,0,"DDA")
N
"^DD",800001,800001,0,"IX","B",800001,.01)

"^DD",800001,800001,0,"IX","C",800001,.03)

"^DD",800001,800001,0,"NM","HMP PANEL")

"^DD",800001,800001,0,"PT",800001.21,.02)

"^DD",800001,800001,0,"VRPK")
HMP
"^DD",800001,800001,.01,0)
NAME^R*P810.4'^PXRM(810.4,^0;1^S DIC("S")="I $P(^(0),U,3)=3" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",800001,800001,.01,1,0)
^.1
"^DD",800001,800001,.01,1,1,0)
800001^B
"^DD",800001,800001,.01,1,1,1)
S ^HMPPANEL("B",$E(X,1,30),DA)=""
"^DD",800001,800001,.01,1,1,2)
K ^HMPPANEL("B",$E(X,1,30),DA)
"^DD",800001,800001,.01,1,1,"%D",0)
^^1^1^3150923^
"^DD",800001,800001,.01,1,1,"%D",1,0)
This is the cross-reference of rule sets by name.
"^DD",800001,800001,.01,3)
Enter a Reminder List Rule.
"^DD",800001,800001,.01,12)
Only select RULE SET types
"^DD",800001,800001,.01,12.1)
S DIC("S")="I $P(^(0),U,3)=3"
"^DD",800001,800001,.01,21,0)
^^1^1^3150923^
"^DD",800001,800001,.01,21,1,0)
This is the name of an applied rule set.
"^DD",800001,800001,.01,"DT")
3110629
"^DD",800001,800001,.02,0)
DISPLAY NAME^RF^^0;2^K:$L(X)>50!($L(X)<3) X
"^DD",800001,800001,.02,3)
Answer must be 3-50 characters in length.
"^DD",800001,800001,.02,21,0)
^^1^1^3150923^
"^DD",800001,800001,.02,21,1,0)
This is the full name of the applied rule set.
"^DD",800001,800001,.02,"DT")
3110630
"^DD",800001,800001,.03,0)
PATIENT LIST NAME^F^^0;3^K:$L(X)>40!($L(X)<3) X
"^DD",800001,800001,.03,1,0)
^.1
"^DD",800001,800001,.03,1,1,0)
800001^C
"^DD",800001,800001,.03,1,1,1)
S ^HMPPANEL("C",$E(X,1,30),DA)=""
"^DD",800001,800001,.03,1,1,2)
K ^HMPPANEL("C",$E(X,1,30),DA)
"^DD",800001,800001,.03,1,1,"%D",0)
^^1^1^3150923^
"^DD",800001,800001,.03,1,1,"%D",1,0)
This is the cross-reference by the name of the patient list.
"^DD",800001,800001,.03,1,1,"DT")
3111006
"^DD",800001,800001,.03,3)
Answer must be 3-40 characters in length.
"^DD",800001,800001,.03,21,0)
^^1^1^3150923^
"^DD",800001,800001,.03,21,1,0)
This is the name of the patient list.
"^DD",800001,800001,.03,"DT")
3111006
"^DD",800001,800001,5,0)
ORDER DIALOGS^800001.05P^^ORDER DIALOGS;0
"^DD",800001,800001,5,21,0)
^.001^1^1^3151204^^^^
"^DD",800001,800001,5,21,1,0)
This sub-file contains ORDER DIALOG entries.
"^DD",800001,800001.05,0)
ORDER DIALOGS SUB-FIELD^^.01^1
"^DD",800001,800001.05,0,"IX","B",800001.05,.01)

"^DD",800001,800001.05,0,"NM","ORDER DIALOGS")

"^DD",800001,800001.05,0,"UP")
800001
"^DD",800001,800001.05,.01,0)
ORDER DIALOGS^MP101.41'^ORD(101.41,^0;1^Q
"^DD",800001,800001.05,.01,1,0)
^.1
"^DD",800001,800001.05,.01,1,1,0)
800001.05^B
"^DD",800001,800001.05,.01,1,1,1)
S ^HMPPANEL(DA(1),"ORDER DIALOGS","B",$E(X,1,30),DA)=""
"^DD",800001,800001.05,.01,1,1,2)
K ^HMPPANEL(DA(1),"ORDER DIALOGS","B",$E(X,1,30),DA)
"^DD",800001,800001.05,.01,1,1,"%D",0)
^^1^1^3150923^
"^DD",800001,800001.05,.01,1,1,"%D",1,0)
This is the cross-reference by the name of the order dialog.
"^DD",800001,800001.05,.01,3)
Select an entry in the ORDER DIALOG File.
"^DD",800001,800001.05,.01,21,0)
^.001^2^2^3151204^^^^
"^DD",800001,800001.05,.01,21,1,0)
This is the IEN of an entry in the ORDER DIALOG File.
"^DD",800001,800001.05,.01,21,2,0)
LAYGO is not allowed, the ORDER DIALOG must be created first.
"^DD",800001,800001.05,.01,"DT")
3110629
"^DD",800001.2,800001.2,0)
FIELD^^3^10
"^DD",800001.2,800001.2,0,"DT")
3150923
"^DD",800001.2,800001.2,0,"IX","AB",800001.23,.01)

"^DD",800001.2,800001.2,0,"IX","AC",800001.2,.04)

"^DD",800001.2,800001.2,0,"IX","AD",800001.21,.02)

"^DD",800001.2,800001.2,0,"IX","ATS",800001.2,99)

"^DD",800001.2,800001.2,0,"IX","B",800001.2,.01)

"^DD",800001.2,800001.2,0,"NM","HMP ROSTER")

"^DD",800001.2,800001.2,0,"PT",800000.02,.01)

"^DD",800001.2,800001.2,0,"PT",800001.21,.02)

"^DD",800001.2,800001.2,0,"VRPK")
HMP
"^DD",800001.2,800001.2,.01,0)
NAME^RF^^0;1^K:$L(X)>104!($L(X)<3)!'(X'?1P.E) X
"^DD",800001.2,800001.2,.01,1,0)
^.1
"^DD",800001.2,800001.2,.01,1,1,0)
800001.2^B
"^DD",800001.2,800001.2,.01,1,1,1)
S ^HMPROSTR(800001.2,"B",$E(X,1,30),DA)=""
"^DD",800001.2,800001.2,.01,1,1,2)
K ^HMPROSTR(800001.2,"B",$E(X,1,30),DA)
"^DD",800001.2,800001.2,.01,1,1,"%D",0)
^^1^1^3150923^
"^DD",800001.2,800001.2,.01,1,1,"%D",1,0)
This is the cross-reference of eHMP rosters by name.
"^DD",800001.2,800001.2,.01,3)
Answer must be 3-104 characters in length.
"^DD",800001.2,800001.2,.01,21,0)
^^1^1^3150923^
"^DD",800001.2,800001.2,.01,21,1,0)
This is the name of an eHMP roster.
"^DD",800001.2,800001.2,.01,"DT")
3130220
"^DD",800001.2,800001.2,.02,0)
DISPLAY NAME^F^^0;2^K:$L(X)>45!($L(X)<3) X
"^DD",800001.2,800001.2,.02,3)
Answer must be 3-45 characters in length.
"^DD",800001.2,800001.2,.02,21,0)
^^1^1^3150923^
"^DD",800001.2,800001.2,.02,21,1,0)
This is the actual name of an eHMP roster.
"^DD",800001.2,800001.2,.02,"DT")
3110830
"^DD",800001.2,800001.2,.03,0)
DISABLE^S^1:YES;^0;3^Q
"^DD",800001.2,800001.2,.03,3)
Enter '1' or 'Yes' to disable this roster.
"^DD",800001.2,800001.2,.03,21,0)
^^1^1^3150923^
"^DD",800001.2,800001.2,.03,21,1,0)
This is a setting to disable an eHMP roster.
"^DD",800001.2,800001.2,.03,"DT")
3110830
"^DD",800001.2,800001.2,.04,0)
OWNER^P200'^VA(200,^0;4^Q
"^DD",800001.2,800001.2,.04,1,0)
^.1
"^DD",800001.2,800001.2,.04,1,1,0)
800001.2^AC
"^DD",800001.2,800001.2,.04,1,1,1)
S ^HMPROSTR(800001.2,"AC",$E(X,1,30),DA)=""
"^DD",800001.2,800001.2,.04,1,1,2)
K ^HMPROSTR(800001.2,"AC",$E(X,1,30),DA)
"^DD",800001.2,800001.2,.04,1,1,"%D",0)
^.101^1^1^3150923^^
"^DD",800001.2,800001.2,.04,1,1,"%D",1,0)
Cross-reference of rosters by owner.
"^DD",800001.2,800001.2,.04,1,1,"DT")
3120105
"^DD",800001.2,800001.2,.04,3)
Enter the owner of this roster.
"^DD",800001.2,800001.2,.04,21,0)
^^1^1^3150923^
"^DD",800001.2,800001.2,.04,21,1,0)
This is the DUZ of the HMP roster's owner.
"^DD",800001.2,800001.2,.04,"DT")
3120105
"^DD",800001.2,800001.2,.05,0)
TYPE^RS^PU:PUBLIC;PR:PRIVATE;^0;5^Q
"^DD",800001.2,800001.2,.05,3)
Enter internally stored code for type of HMP roster.
"^DD",800001.2,800001.2,.05,21,0)
^.001^1^1^3151117^^^
"^DD",800001.2,800001.2,.05,21,1,0)
The type of an HMP roster.
"^DD",800001.2,800001.2,.05,"DT")
3111115
"^DD",800001.2,800001.2,.06,0)
PATIENT LIST NAME^F^^0;6^K:$L(X)>40!($L(X)<3) X
"^DD",800001.2,800001.2,.06,3)
Answer must be 3-40 characters in length.
"^DD",800001.2,800001.2,.06,21,0)
^^1^1^3150923^
"^DD",800001.2,800001.2,.06,21,1,0)
The file containing the patient list names.
"^DD",800001.2,800001.2,.06,"DT")
3120120
"^DD",800001.2,800001.2,1,0)
SOURCES^800001.21^^1;0
"^DD",800001.2,800001.2,1,21,0)
^^1^1^3150923^
"^DD",800001.2,800001.2,1,21,1,0)
The sources of the patient list.
"^DD",800001.2,800001.2,2,0)
SPECIAL HANDLING^K^^3;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",800001.2,800001.2,2,3)
XXXX--CAN'T BE ALTERED EXCEPT BY PROGRAMMER.
"^DD",800001.2,800001.2,2,9)
@
"^DD",800001.2,800001.2,2,21,0)
^.001^1^1^3151116^^^
"^DD",800001.2,800001.2,2,21,1,0)
This is MUMPS code for filtering and refreshing patient lists.
"^DD",800001.2,800001.2,2,"DT")
3120103
"^DD",800001.2,800001.2,3,0)
PATIENT^800001.23P^^4;0
"^DD",800001.2,800001.2,3,21,0)
^^1^1^3150923^
"^DD",800001.2,800001.2,3,21,1,0)
Patients which are members of this roster.
"^DD",800001.2,800001.2,99,0)
TIMESTAMP^D^^2;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",800001.2,800001.2,99,1,0)
^.1
"^DD",800001.2,800001.2,99,1,1,0)
800001.2^ATS
"^DD",800001.2,800001.2,99,1,1,1)
S ^HMPROSTR(800001.2,"ATS",$E(X,1,30),DA)=""
"^DD",800001.2,800001.2,99,1,1,2)
K ^HMPROSTR(800001.2,"ATS",$E(X,1,30),DA)
"^DD",800001.2,800001.2,99,1,1,"%D",0)
^.101^2^2^3150923^^
"^DD",800001.2,800001.2,99,1,1,"%D",1,0)
The date.time cross-reference of patients in the HMP
"^DD",800001.2,800001.2,99,1,1,"%D",2,0)
Roster file.
"^DD",800001.2,800001.2,99,1,1,"DT")
3110831
"^DD",800001.2,800001.2,99,3)
Type a date not earlier than AUG 30, 2011@08:39.
"^DD",800001.2,800001.2,99,21,0)
^.001^1^1^3151116^^
"^DD",800001.2,800001.2,99,21,1,0)
The date.time of a patient's entry in the HMP Roster file.
"^DD",800001.2,800001.2,99,"DT")
3150923
"^DD",800001.2,800001.21,0)
SOURCES SUB-FIELD^^.05^5
"^DD",800001.2,800001.21,0,"DT")
3150923
"^DD",800001.2,800001.21,0,"IX","AS",800001.21,.01)

"^DD",800001.2,800001.21,0,"IX","B",800001.21,.01)

"^DD",800001.2,800001.21,0,"NM","SOURCES")

"^DD",800001.2,800001.21,0,"UP")
800001.2
"^DD",800001.2,800001.21,.01,0)
SEQUENCE^MNJ8,0^^0;1^K:+X'=X!(X>99999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",800001.2,800001.21,.01,1,0)
^.1
"^DD",800001.2,800001.21,.01,1,1,0)
800001.21^B
"^DD",800001.2,800001.21,.01,1,1,1)
S ^HMPROSTR(800001.2,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",800001.2,800001.21,.01,1,1,2)
K ^HMPROSTR(800001.2,DA(1),1,"B",$E(X,1,30),DA)
"^DD",800001.2,800001.21,.01,1,1,"%D",0)
^^1^1^3150923^
"^DD",800001.2,800001.21,.01,1,1,"%D",1,0)
The name cross-reference of patient lists.
"^DD",800001.2,800001.21,.01,1,2,0)
800001.21^AS
"^DD",800001.2,800001.21,.01,1,2,1)
S ^HMPROSTR(800001.2,DA(1),1,"AS",$E(X,1,30),DA)=""
"^DD",800001.2,800001.21,.01,1,2,2)
K ^HMPROSTR(800001.2,DA(1),1,"AS",$E(X,1,30),DA)
"^DD",800001.2,800001.21,.01,1,2,"%D",0)
^^1^1^3150923^
"^DD",800001.2,800001.21,.01,1,2,"%D",1,0)
The sequence cross-reference of patient lists.
"^DD",800001.2,800001.21,.01,1,2,"DT")
3110901
"^DD",800001.2,800001.21,.01,3)
Type a number between 1 and 99999999, 0 decimal digits.
"^DD",800001.2,800001.21,.01,21,0)
^.001^1^1^3150923^^
"^DD",800001.2,800001.21,.01,21,1,0)
The sequence number of a patient list source.
"^DD",800001.2,800001.21,.01,"DT")
3150923
"^DD",800001.2,800001.21,.02,0)
SOURCE^RV^^0;2^Q
"^DD",800001.2,800001.21,.02,1,0)
^.1
"^DD",800001.2,800001.21,.02,1,1,0)
800001.2^AD
"^DD",800001.2,800001.21,.02,1,1,1)
S ^HMPROSTR(800001.2,"AD",$E(X,1,30),DA(1),DA)=""
"^DD",800001.2,800001.21,.02,1,1,2)
K ^HMPROSTR(800001.2,"AD",$E(X,1,30),DA(1),DA)
"^DD",800001.2,800001.21,.02,1,1,"%D",0)
^^1^1^3150923^
"^DD",800001.2,800001.21,.02,1,1,"%D",1,0)
The file number cross-reference of patient lists.
"^DD",800001.2,800001.21,.02,1,1,"DT")
3131126
"^DD",800001.2,800001.21,.02,3)
Enter the file which will be the source for this roster.
"^DD",800001.2,800001.21,.02,21,0)
^^1^1^3150923^
"^DD",800001.2,800001.21,.02,21,1,0)
The source of the patient list.
"^DD",800001.2,800001.21,.02,"DT")
3131126
"^DD",800001.2,800001.21,.02,"V",0)
^.12P^12^10
"^DD",800001.2,800001.21,.02,"V",1,0)
2^PATIENT^1^PAT^n^n
"^DD",800001.2,800001.21,.02,"V",1,1)

"^DD",800001.2,800001.21,.02,"V",1,2)

"^DD",800001.2,800001.21,.02,"V",2,0)
42^WARD LOCATION^2^WARD^n^n
"^DD",800001.2,800001.21,.02,"V",2,1)

"^DD",800001.2,800001.21,.02,"V",2,2)

"^DD",800001.2,800001.21,.02,"V",3,0)
44^CLINIC^3^CL^n^n
"^DD",800001.2,800001.21,.02,"V",3,1)

"^DD",800001.2,800001.21,.02,"V",3,2)

"^DD",800001.2,800001.21,.02,"V",5,0)
200^PROVIDER^5^PROV^n^n
"^DD",800001.2,800001.21,.02,"V",5,1)

"^DD",800001.2,800001.21,.02,"V",5,2)

"^DD",800001.2,800001.21,.02,"V",6,0)
100.21^CPRS^6^CPRS^n^n
"^DD",800001.2,800001.21,.02,"V",6,1)

"^DD",800001.2,800001.21,.02,"V",6,2)

"^DD",800001.2,800001.21,.02,"V",7,0)
404.51^PCMM TEAM^7^PCMM^n^n
"^DD",800001.2,800001.21,.02,"V",7,1)

"^DD",800001.2,800001.21,.02,"V",7,2)

"^DD",800001.2,800001.21,.02,"V",8,0)
810.4^REMINDER'S LIST RULE FILE^22^PXRM^y^n
"^DD",800001.2,800001.21,.02,"V",8,1)
S DIC("S")="I $P(^(0),U,3)=3"
"^DD",800001.2,800001.21,.02,"V",8,2)
Only select Rule Set types
"^DD",800001.2,800001.21,.02,"V",9,0)
800001.2^HMP ROSTER FILE^9^ROST^^n
"^DD",800001.2,800001.21,.02,"V",11,0)
45.7^SPECIALTY^70^SPEC^n^n
"^DD",800001.2,800001.21,.02,"V",12,0)
800001^Select HMP Panel List Rule^80^HMPPAN^n^n
"^DD",800001.2,800001.21,.03,0)
OPERATION^S^0:UNION;1:INTERSECTION;2:DIFFERENCE;^0;3^Q
"^DD",800001.2,800001.21,.03,3)
This code is used to determine which operation is to be performed on the Patient List.
"^DD",800001.2,800001.21,.03,21,0)
^^2^2^3150923^
"^DD",800001.2,800001.21,.03,21,1,0)
This is the type of operation to be performed on the
"^DD",800001.2,800001.21,.03,21,2,0)
patient list file.
"^DD",800001.2,800001.21,.03,"DT")
3110830
"^DD",800001.2,800001.21,.04,0)
FILTER^S^T:TODAY;^0;4^Q
"^DD",800001.2,800001.21,.04,3)
Enter 'T' to set the filter.
"^DD",800001.2,800001.21,.04,21,0)
^^1^1^3150923^
"^DD",800001.2,800001.21,.04,21,1,0)
This is a date filter for the patient list file.
"^DD",800001.2,800001.21,.04,"DT")
3110901
"^DD",800001.2,800001.21,.05,0)
REFRESH FREQUENCY^S^D:DAILY;H:HOURLY;^0;5^Q
"^DD",800001.2,800001.21,.05,3)
This code is used to specify the refresh rate for the Patient List.
"^DD",800001.2,800001.21,.05,21,0)
^^1^1^3150923^
"^DD",800001.2,800001.21,.05,21,1,0)
The frequency by which to refresh the patient list.
"^DD",800001.2,800001.21,.05,"DT")
3120119
"^DD",800001.2,800001.23,0)
PATIENT SUB-FIELD^^.02^2
"^DD",800001.2,800001.23,0,"IX","B",800001.23,.01)

"^DD",800001.2,800001.23,0,"NM","PATIENT")

"^DD",800001.2,800001.23,0,"UP")
800001.2
"^DD",800001.2,800001.23,.01,0)
PATIENT^MP2'^DPT(^0;1^Q
"^DD",800001.2,800001.23,.01,1,0)
^.1
"^DD",800001.2,800001.23,.01,1,1,0)
800001.23^B
"^DD",800001.2,800001.23,.01,1,1,1)
S ^HMPROSTR(800001.2,DA(1),4,"B",$E(X,1,30),DA)=""
"^DD",800001.2,800001.23,.01,1,1,2)
K ^HMPROSTR(800001.2,DA(1),4,"B",$E(X,1,30),DA)
"^DD",800001.2,800001.23,.01,1,1,"%D",0)
^^1^1^3150923^
"^DD",800001.2,800001.23,.01,1,1,"%D",1,0)
HMP Roster File cross-reference by patient name.
"^DD",800001.2,800001.23,.01,1,2,0)
800001.2^AB
"^DD",800001.2,800001.23,.01,1,2,1)
S ^HMPROSTR(800001.2,"AB",$E(X,1,30),DA(1),DA)=""
"^DD",800001.2,800001.23,.01,1,2,2)
K ^HMPROSTR(800001.2,"AB",$E(X,1,30),DA(1),DA)
"^DD",800001.2,800001.23,.01,1,2,"%D",0)
^.101^1^1^3150923^^
"^DD",800001.2,800001.23,.01,1,2,"%D",1,0)
Index of all rosters patient is in.
"^DD",800001.2,800001.23,.01,1,2,"DT")
3121220
"^DD",800001.2,800001.23,.01,3)
Select an entry from the PATIENT File (#2).
"^DD",800001.2,800001.23,.01,21,0)
^^2^2^3150923^
"^DD",800001.2,800001.23,.01,21,1,0)
This field identifies a roster member patient by its DFN
"^DD",800001.2,800001.23,.01,21,2,0)
in the PATIENT File (#2).
"^DD",800001.2,800001.23,.01,"DT")
3121220
"^DD",800001.2,800001.23,.02,0)
SRCSEQ^NJ6,0^^0;2^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",800001.2,800001.23,.02,3)
Type a number between 1 and 999999, 0 decimal digits.
"^DD",800001.2,800001.23,.02,21,0)
^^1^1^3150923^
"^DD",800001.2,800001.23,.02,21,1,0)
The sequence number of this patient roster.
"^DD",800001.2,800001.23,.02,"DT")
3130717
"^DD",800001.5,800001.5,0)
FIELD^^7^7
"^DD",800001.5,800001.5,0,"DDA")
N
"^DD",800001.5,800001.5,0,"IX","B",800001.5,.01)

"^DD",800001.5,800001.5,0,"IX","HMP",800001.5,6)

"^DD",800001.5,800001.5,0,"NM","HMP ACTIVITY")

"^DD",800001.5,800001.5,0,"VRPK")
HMP
"^DD",800001.5,800001.5,.01,0)
PATIENT NAME^RP2'^DPT(^0;1^Q
"^DD",800001.5,800001.5,.01,1,0)
^.1
"^DD",800001.5,800001.5,.01,1,1,0)
800001.5^B
"^DD",800001.5,800001.5,.01,1,1,1)
S ^HMP(800001.5,"PTAPPT","B",$E(X,1,30),DA)=""
"^DD",800001.5,800001.5,.01,1,1,2)
K ^HMP(800001.5,"PTAPPT","B",$E(X,1,30),DA)
"^DD",800001.5,800001.5,.01,1,1,"%D",0)
^^1^1^3150923^
"^DD",800001.5,800001.5,.01,1,1,"%D",1,0)
PATIENT File (#2) DFN cross-reference of the HMP Activity File.
"^DD",800001.5,800001.5,.01,3)
Select a patient from the PATIENT File (#2).
"^DD",800001.5,800001.5,.01,21,0)
^^2^2^3150923^
"^DD",800001.5,800001.5,.01,21,1,0)
The PATIENT File (#2) DFN of an eHMP subscribed patient with
"^DD",800001.5,800001.5,.01,21,2,0)
appointments.
"^DD",800001.5,800001.5,.01,"DT")
3140731
"^DD",800001.5,800001.5,2,0)
APPOINTMENT DATE^D^^0;2^S %DT="EST" D ^%DT S X=Y K:Y<1 X
"^DD",800001.5,800001.5,2,3)
Enter the date.time of the appointment.
"^DD",800001.5,800001.5,2,21,0)
^.001^1^1^3150923^^
"^DD",800001.5,800001.5,2,21,1,0)
The date.time of a patient's appointment.
"^DD",800001.5,800001.5,2,"DT")
3140804
"^DD",800001.5,800001.5,3,0)
APPOINTMENT STATUS^F^^0;3^K:$L(X)>5!($L(X)<1) X
"^DD",800001.5,800001.5,3,3)
Answer must be 1-5 characters in length.
"^DD",800001.5,800001.5,3,21,0)
^^1^1^3150923^
"^DD",800001.5,800001.5,3,21,1,0)
This is the status of a patient's appointment.
"^DD",800001.5,800001.5,3,"DT")
3140804
"^DD",800001.5,800001.5,4,0)
DATE RECORD CREATED^D^^0;4^S %DT="EST" D ^%DT S X=Y K:Y<1 X
"^DD",800001.5,800001.5,4,3)
Enter the date.time the activity record was created.
"^DD",800001.5,800001.5,4,21,0)
^^1^1^3150923^
"^DD",800001.5,800001.5,4,21,1,0)
The date.time of creation of the activity record.
"^DD",800001.5,800001.5,4,"DT")
3140804
"^DD",800001.5,800001.5,5,0)
DATE RECORD RETREIVED^D^^0;5^S %DT="EST" D ^%DT S X=Y K:Y<1 X
"^DD",800001.5,800001.5,5,3)
Do not prompt. Field is stuffed by [TBD].
"^DD",800001.5,800001.5,5,5,1,0)
800001.5^6^2
"^DD",800001.5,800001.5,5,21,0)
^^1^1^3150923^
"^DD",800001.5,800001.5,5,21,1,0)
This is the date.time that activity data was retrieved from VistA.
"^DD",800001.5,800001.5,5,"DT")
3140804
"^DD",800001.5,800001.5,6,0)
HMP PROCESS FLAG^NJ1,0^^0;6^K:+X'=X!(X>1)!(X<0)!(X?.E1"."1N.N) X
"^DD",800001.5,800001.5,6,1,0)
^.1
"^DD",800001.5,800001.5,6,1,1,0)
800001.5^HMP^MUMPS
"^DD",800001.5,800001.5,6,1,1,1)
I +X=0 S ^HMP(800001.5,"PTAPPT","HMP",+DA)=""
"^DD",800001.5,800001.5,6,1,1,2)
K ^HMP(800001.5,"PTAPPT","HMP",+DA)
"^DD",800001.5,800001.5,6,1,1,"%D",0)
^.101^1^1^3151029^^
"^DD",800001.5,800001.5,6,1,1,"%D",1,0)
This is a cross-reference of patient activities by process flag.
"^DD",800001.5,800001.5,6,1,1,"DT")
3140901
"^DD",800001.5,800001.5,6,1,2,0)
^^TRIGGER^800001.5^5
"^DD",800001.5,800001.5,6,1,2,1)
Q
"^DD",800001.5,800001.5,6,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^HMP(800001.5,"PTAPPT",D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X=DIV N %I,%H,% D NOW^%DTC S X=% X ^DD(800001.5,6,1,2,2.4)
"^DD",800001.5,800001.5,6,1,2,2.4)
S DIH=$G(^HMP(800001.5,"PTAPPT",DIV(0),0)),DIV=X S $P(^(0),U,5)=DIV,DIH=800001.5,DIG=5 D ^DICR
"^DD",800001.5,800001.5,6,1,2,"%D",0)
^.101^2^2^3151029^^^
"^DD",800001.5,800001.5,6,1,2,"%D",1,0)
This trigger causes an activity file entry to be skipped,
"^DD",800001.5,800001.5,6,1,2,"%D",2,0)
deleted, or processed.
"^DD",800001.5,800001.5,6,1,2,"CREATE VALUE")
NO EFFECT
"^DD",800001.5,800001.5,6,1,2,"DELETE VALUE")
NOW
"^DD",800001.5,800001.5,6,1,2,"DT")
3140804
"^DD",800001.5,800001.5,6,1,2,"FIELD")
DATE RECORD RETREIVED
"^DD",800001.5,800001.5,6,3)
Type a number between 0 and 1, 0 decimal digits.
"^DD",800001.5,800001.5,6,21,0)
^.001^2^2^3151029^^
"^DD",800001.5,800001.5,6,21,1,0)
This is a system HMP Process Flag indicating an activity
"^DD",800001.5,800001.5,6,21,2,0)
was processed.
"^DD",800001.5,800001.5,6,"DT")
3140804
"^DD",800001.5,800001.5,7,0)
JSON MESSAGE^F^^JSON;1^K:$L(X)>200!($L(X)<1) X
"^DD",800001.5,800001.5,7,3)
Answer must be 1-200 characters in length.
"^DD",800001.5,800001.5,7,21,0)
^^2^2^3150923^
"^DD",800001.5,800001.5,7,21,1,0)
This is a JSON message indicating the status of the
"^DD",800001.5,800001.5,7,21,2,0)
corresponding patient activity record.
"^DD",800001.5,800001.5,7,"DT")
3140805
"^DIC",800000,800000,0)
HMP SUBSCRIPTION^800000
"^DIC",800000,800000,0,"GL")
^HMP(800000,
"^DIC",800000,800000,"%",0)
^1.005^^0
"^DIC",800000,800000,"%D",0)
^^4^4^3151116^
"^DIC",800000,800000,"%D",1,0)
This file contains the data needed for eHMP data retrieval.
"^DIC",800000,800000,"%D",2,0)
The top level fields store information about servers known to eHMP.
"^DIC",800000,800000,"%D",3,0)
Each patient's subscription is stored in #800000.01 sub-file for
"^DIC",800000,800000,"%D",4,0)
a server
"^DIC",800000,"B","HMP SUBSCRIPTION",800000)

"^DIC",800000.1,800000.1,0)
HMP PATIENT OBJECT^800000.1
"^DIC",800000.1,800000.1,0,"GL")
^HMP(800000.1,
"^DIC",800000.1,800000.1,"%",0)
^1.005^^0
"^DIC",800000.1,800000.1,"%D",0)
^1.001^2^2^3150923^^
"^DIC",800000.1,800000.1,"%D",1,0)
This file is used when transferring specific patient objects
"^DIC",800000.1,800000.1,"%D",2,0)
to JDS.
"^DIC",800000.1,"B","HMP PATIENT OBJECT",800000.1)

"^DIC",800000.11,800000.11,0)
HMP OBJECT^800000.11
"^DIC",800000.11,800000.11,0,"GL")
^HMP(800000.11,
"^DIC",800000.11,800000.11,"%D",0)
^^1^1^3150923^
"^DIC",800000.11,800000.11,"%D",1,0)
This file is a staging area for JSON uid objects.
"^DIC",800000.11,"B","HMP OBJECT",800000.11)

"^DIC",800000.2,800000.2,0)
HMP LIST^800000.2
"^DIC",800000.2,800000.2,0,"GL")
^HMPD(800000.2,
"^DIC",800000.2,800000.2,"%D",0)
^1.001^2^2^3151116^^
"^DIC",800000.2,800000.2,"%D",1,0)
A translation table for use by eHMP to connect VistA
"^DIC",800000.2,800000.2,"%D",2,0)
data domains to JSON objects for transmission.
"^DIC",800000.2,"B","HMP LIST",800000.2)

"^DIC",800000.21,800000.21,0)
HMP LIST DOMAIN^800000.21
"^DIC",800000.21,800000.21,0,"GL")
^HMPD(800000.21,
"^DIC",800000.21,800000.21,"%",0)
^1.005^^0
"^DIC",800000.21,800000.21,"%D",0)
^^2^2^3150923^
"^DIC",800000.21,800000.21,"%D",1,0)
This File contains the extraction domains which can be
"^DIC",800000.21,800000.21,"%D",2,0)
transmitted.
"^DIC",800000.21,"B","HMP LIST DOMAIN",800000.21)

"^DIC",800000.22,800000.22,0)
HMP LIST ATTRIBUTE^800000.22
"^DIC",800000.22,800000.22,0,"GL")
^HMPD(800000.22,
"^DIC",800000.22,800000.22,"%D",0)
^^2^2^3150923^
"^DIC",800000.22,800000.22,"%D",1,0)
This file contains a list of the attributes of the eHMP
"^DIC",800000.22,800000.22,"%D",2,0)
data domains.
"^DIC",800000.22,"B","HMP LIST ATTRIBUTE",800000.22)

"^DIC",800001,800001,0)
HMP PANEL^800001
"^DIC",800001,800001,0,"GL")
^HMPPANEL(
"^DIC",800001,800001,"%D",0)
^1.001^4^4^3110701^^^
"^DIC",800001,800001,"%D",1,0)
Contains the Rule Sets that contain the cohorts for creating patient panels.
"^DIC",800001,800001,"%D",2,0)
For example, panel which includes Diabetic patients will be created
"^DIC",800001,800001,"%D",3,0)
nightly to update the list of patients.  All panels in this file will be
"^DIC",800001,800001,"%D",4,0)
updated nightly.
"^DIC",800001,"B","HMP PANEL",800001)

"^DIC",800001.2,800001.2,0)
HMP ROSTER^800001.2
"^DIC",800001.2,800001.2,0,"GL")
^HMPROSTR(800001.2,
"^DIC",800001.2,800001.2,"%D",0)
^^2^2^3150923^
"^DIC",800001.2,800001.2,"%D",1,0)
This file contains eHMP rosters which can be used by
"^DIC",800001.2,800001.2,"%D",2,0)
subscribed patients.
"^DIC",800001.2,"B","HMP ROSTER",800001.2)

"^DIC",800001.5,800001.5,0)
HMP ACTIVITY^800001.5
"^DIC",800001.5,800001.5,0,"GL")
^HMP(800001.5,"PTAPPT",
"^DIC",800001.5,800001.5,"%D",0)
^1.001^2^2^3151029^^^
"^DIC",800001.5,800001.5,"%D",1,0)
The HMP Activity File contains appointments for patients
"^DIC",800001.5,800001.5,"%D",2,0)
which are subscribed to eHMP.
"^DIC",800001.5,"B","HMP ACTIVITY",800001.5)

**END**
**END**

KIDS Distribution saved on Nov 03, 2010@09:54:42
xu 523
**KIDS**:XU*8.0*523^

**INSTALL NAME**
XU*8.0*523
"BLD",1234,0)
XU*8.0*523^KERNEL^0^3100211^y
"BLD",1234,1,0)
^^3^3^3100211^^^
"BLD",1234,1,1,0)
Patch XU*8*523 BROKER SECURITY ENCHANCEMENT FOR IMAGING
"BLD",1234,1,2,0)
 
"BLD",1234,1,3,0)
See the description in the patch module on Forum.
"BLD",1234,4,0)
^9.64PA^3.081^2
"BLD",1234,4,3.081,0)
3.081
"BLD",1234,4,3.081,2,0)
^9.641^3.081^1
"BLD",1234,4,3.081,2,3.081,0)
SIGN-ON LOG  (File-top level)
"BLD",1234,4,3.081,2,3.081,1,0)
^9.6411^18^1
"BLD",1234,4,3.081,2,3.081,1,18,0)
Remote App
"BLD",1234,4,3.081,222)
y^n^p^^^^n^^n
"BLD",1234,4,3.081,224)

"BLD",1234,4,8994.5,0)
8994.5
"BLD",1234,4,8994.5,222)
y^y^f^^^^n
"BLD",1234,4,"APDD",3.081,3.081)

"BLD",1234,4,"APDD",3.081,3.081,18)

"BLD",1234,4,"B",3.081,3.081)

"BLD",1234,4,"B",8994.5,8994.5)

"BLD",1234,6)
^433
"BLD",1234,6.3)
16
"BLD",1234,"KRN",0)
^9.67PA^9002226^21
"BLD",1234,"KRN",.4,0)
.4
"BLD",1234,"KRN",.401,0)
.401
"BLD",1234,"KRN",.402,0)
.402
"BLD",1234,"KRN",.403,0)
.403
"BLD",1234,"KRN",.5,0)
.5
"BLD",1234,"KRN",.84,0)
.84
"BLD",1234,"KRN",3.6,0)
3.6
"BLD",1234,"KRN",3.8,0)
3.8
"BLD",1234,"KRN",9.2,0)
9.2
"BLD",1234,"KRN",9.8,0)
9.8
"BLD",1234,"KRN",9.8,"NM",0)
^9.68A^6^6
"BLD",1234,"KRN",9.8,"NM",1,0)
XUSBSE1^^0^B46486369
"BLD",1234,"KRN",9.8,"NM",2,0)
XUSBSE2^^0^B17916276
"BLD",1234,"KRN",9.8,"NM",3,0)
XUSRB4^^0^B16820466
"BLD",1234,"KRN",9.8,"NM",4,0)
XUSRB^^0^B33401626
"BLD",1234,"KRN",9.8,"NM",5,0)
XUS1^^0^B26024789
"BLD",1234,"KRN",9.8,"NM",6,0)
XUESSO1^^0^B41206647
"BLD",1234,"KRN",9.8,"NM","B","XUESSO1",6)

"BLD",1234,"KRN",9.8,"NM","B","XUS1",5)

"BLD",1234,"KRN",9.8,"NM","B","XUSBSE1",1)

"BLD",1234,"KRN",9.8,"NM","B","XUSBSE2",2)

"BLD",1234,"KRN",9.8,"NM","B","XUSRB",4)

"BLD",1234,"KRN",9.8,"NM","B","XUSRB4",3)

"BLD",1234,"KRN",19,0)
19
"BLD",1234,"KRN",19.1,0)
19.1
"BLD",1234,"KRN",101,0)
101
"BLD",1234,"KRN",409.61,0)
409.61
"BLD",1234,"KRN",771,0)
771
"BLD",1234,"KRN",779.2,0)
779.2
"BLD",1234,"KRN",870,0)
870
"BLD",1234,"KRN",8989.51,0)
8989.51
"BLD",1234,"KRN",8989.52,0)
8989.52
"BLD",1234,"KRN",8994,0)
8994
"BLD",1234,"KRN",9002226,0)
9002226
"BLD",1234,"KRN","B",.4,.4)

"BLD",1234,"KRN","B",.401,.401)

"BLD",1234,"KRN","B",.402,.402)

"BLD",1234,"KRN","B",.403,.403)

"BLD",1234,"KRN","B",.5,.5)

"BLD",1234,"KRN","B",.84,.84)

"BLD",1234,"KRN","B",3.6,3.6)

"BLD",1234,"KRN","B",3.8,3.8)

"BLD",1234,"KRN","B",9.2,9.2)

"BLD",1234,"KRN","B",9.8,9.8)

"BLD",1234,"KRN","B",19,19)

"BLD",1234,"KRN","B",19.1,19.1)

"BLD",1234,"KRN","B",101,101)

"BLD",1234,"KRN","B",409.61,409.61)

"BLD",1234,"KRN","B",771,771)

"BLD",1234,"KRN","B",779.2,779.2)

"BLD",1234,"KRN","B",870,870)

"BLD",1234,"KRN","B",8989.51,8989.51)

"BLD",1234,"KRN","B",8989.52,8989.52)

"BLD",1234,"KRN","B",8994,8994)

"BLD",1234,"KRN","B",9002226,9002226)

"BLD",1234,"QDEF")
^^^^YES^^^^NO^^NO
"BLD",1234,"QUES",0)
^9.62^^
"BLD",1234,"REQB",0)
^9.611^4^4
"BLD",1234,"REQB",1,0)
XWB*1.1*53^2
"BLD",1234,"REQB",2,0)
XU*8.0*439^0
"BLD",1234,"REQB",3,0)
XU*8.0*469^0
"BLD",1234,"REQB",4,0)
XU*8.0*499^2
"BLD",1234,"REQB","B","XU*8.0*439",2)

"BLD",1234,"REQB","B","XU*8.0*469",3)

"BLD",1234,"REQB","B","XU*8.0*499",4)

"BLD",1234,"REQB","B","XWB*1.1*53",1)

"FIA",3.081)
SIGN-ON LOG
"FIA",3.081,0)
^XUSEC(0,
"FIA",3.081,0,0)
3.081P
"FIA",3.081,0,1)
y^n^p^^^^n^^n
"FIA",3.081,0,10)

"FIA",3.081,0,11)

"FIA",3.081,0,"RLRO")

"FIA",3.081,0,"VR")
8.0^XU
"FIA",3.081,3.081)
1
"FIA",3.081,3.081,18)

"FIA",8994.5)
REMOTE APPLICATION
"FIA",8994.5,0)
^XWB(8994.5,
"FIA",8994.5,0,0)
8994.5
"FIA",8994.5,0,1)
y^y^f^^^^n
"FIA",8994.5,0,10)

"FIA",8994.5,0,11)

"FIA",8994.5,0,"RLRO")

"FIA",8994.5,0,"VR")
8.0^XU
"FIA",8994.5,8994.5)
0
"FIA",8994.5,8994.51)
0
"MBREQ")
0
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,20,0)
^9.402P^^0
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^3090706^3090706^6
"PKG",3,22,1,"PAH",1,0)
523^3100211^20
"PKG",3,22,1,"PAH",1,1,0)
^^3^3^3100211
"PKG",3,22,1,"PAH",1,1,1,0)
Patch XU*8*523 BROKER SECURITY ENCHANCEMENT FOR IMAGING
"PKG",3,22,1,"PAH",1,1,2,0)
 
"PKG",3,22,1,"PAH",1,1,3,0)
See the description in the patch module on Forum.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
6
"RTN","XUESSO1")
0^6^B41206647^B38935544
"RTN","XUESSO1",1,0)
XUESSO1 ;LUKE/SEA Single Sign-on utilities;02/11/10  14:57;08/18/09  14:29
"RTN","XUESSO1",2,0)
 ;;8.0;KERNEL;**165,183,196,245,254,269,337,395,466,523**;Jul 10, 1995;Build 16
"RTN","XUESSO1",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XUESSO1",4,0)
 ;
"RTN","XUESSO1",5,0)
GET(INDUZ) ;Gather identifying data from user's home site.
"RTN","XUESSO1",6,0)
 ;Must have Name, Access&Verify codes, SSN (no pseudo), station name&number
"RTN","XUESSO1",7,0)
 N %,NAME,SITE,SSN,PHONE,X,N,VPID
"RTN","XUESSO1",8,0)
 I '$D(DUZ) G BOMB
"RTN","XUESSO1",9,0)
 I '$D(DUZ(2)) G BOMB
"RTN","XUESSO1",10,0)
 ;I '$D(INDUZ) S INDUZ=DUZ
"RTN","XUESSO1",11,0)
 S N=$G(^VA(200,DUZ,0))
"RTN","XUESSO1",12,0)
 I '$L(N) G BOMB
"RTN","XUESSO1",13,0)
 S %=$P(N,U,3) I $L(%)<1 G BOMB ;No Access Code
"RTN","XUESSO1",14,0)
 S %=$P($G(^VA(200,DUZ,.1)),U,2) I $L(%)<1 G BOMB ;No Verify Code
"RTN","XUESSO1",15,0)
 S %=$P(N,U,11) I $L(%)>1,(DT>%) G BOMB ;Terminated
"RTN","XUESSO1",16,0)
 S NAME=$P(N,U)
"RTN","XUESSO1",17,0)
 I '$L(NAME) G BOMB
"RTN","XUESSO1",18,0)
 ;
"RTN","XUESSO1",19,0)
 S SITE=$$NS^XUAF4(DUZ(2)) ;Site is name^station#
"RTN","XUESSO1",20,0)
 I $P(SITE,U,2)="" G BOMB ;Need a station number
"RTN","XUESSO1",21,0)
 ;
"RTN","XUESSO1",22,0)
 S SSN=$P($G(^VA(200,DUZ,1)),U,9)
"RTN","XUESSO1",23,0)
 I $$SPECIAL($P(SITE,"^",2)) S SSN=999999999 G G4 ;Manila RO doesn't need SSN
"RTN","XUESSO1",24,0)
 I 'SSN G BOMB
"RTN","XUESSO1",25,0)
 ;Don't allow if the SSN is pseudo
"RTN","XUESSO1",26,0)
 I $E(SSN,10)="P" G BOMB
"RTN","XUESSO1",27,0)
 ;Don't allow if the SSN is not real, (e.g. 00000NNNN)
"RTN","XUESSO1",28,0)
 I $E(SSN,1,5)="00000" G BOMB
"RTN","XUESSO1",29,0)
 ;
"RTN","XUESSO1",30,0)
G4 S PHONE=$$PH
"RTN","XUESSO1",31,0)
 S VPID=$$VPID^XUPS(DUZ) ;(p337)
"RTN","XUESSO1",32,0)
 S X=SSN_U_NAME_U_SITE_U_DUZ
"RTN","XUESSO1",33,0)
 I $L(PHONE)>2&($L(PHONE<20)) S X=X_U_PHONE
"RTN","XUESSO1",34,0)
 S $P(X,U,7)=VPID ;(p337)
"RTN","XUESSO1",35,0)
 ;ssn^name^station name^station number^DUZ^phone^vpid
"RTN","XUESSO1",36,0)
 Q X
"RTN","XUESSO1",37,0)
 ;
"RTN","XUESSO1",38,0)
 ;
"RTN","XUESSO1",39,0)
BOMB ;Insufficient information to allow visiting
"RTN","XUESSO1",40,0)
 S X="-1^Insufficient User Information On File.  ssn,name,station name,station number,DUZ,phone"
"RTN","XUESSO1",41,0)
 Q X
"RTN","XUESSO1",42,0)
 ;
"RTN","XUESSO1",43,0)
 ;
"RTN","XUESSO1",44,0)
PH() ; Try for a phone number or pager
"RTN","XUESSO1",45,0)
 N %,X
"RTN","XUESSO1",46,0)
 S %=""
"RTN","XUESSO1",47,0)
 S X=$G(^VA(200,DUZ,.13))
"RTN","XUESSO1",48,0)
 I '$L(X) Q ""
"RTN","XUESSO1",49,0)
 ;
"RTN","XUESSO1",50,0)
 S %=$P(X,U,5) I $L(%)>6 Q %  ;Commercial #
"RTN","XUESSO1",51,0)
 S %=$P(X,U,2) I $L(%)>2 Q %  ;Office
"RTN","XUESSO1",52,0)
 S %=$P(X,U,8) I $L(%)>6 Q %  ;Digital Pager
"RTN","XUESSO1",53,0)
 S %=$P(X,U,7) I $L(%)>6 Q %  ;Pager
"RTN","XUESSO1",54,0)
 S %=$P(X,U,3) I $L(%)>2 Q %  ;Phone #3
"RTN","XUESSO1",55,0)
 S %=$P(X,U,4) I $L(%)>2 Q %  ;Phone #4
"RTN","XUESSO1",56,0)
 S %=$P(X,U,1) I $L(%)>2 Q %  ;Home Phone
"RTN","XUESSO1",57,0)
 Q "" ;Couldn't find one.
"RTN","XUESSO1",58,0)
 ;
"RTN","XUESSO1",59,0)
SPECIAL(SN) ;Special Manila RO site
"RTN","XUESSO1",60,0)
 Q 358=SN
"RTN","XUESSO1",61,0)
 ;
"RTN","XUESSO1",62,0)
 ;
"RTN","XUESSO1",63,0)
PUT(DATIN) ;;Setup data from authenticating site GET() at receiving site
"RTN","XUESSO1",64,0)
 ;Return: 0=fail, 1=OK
"RTN","XUESSO1",65,0)
 N NEWDUZ,FDR,TODAY,IEN,DIC,USER,X,%T
"RTN","XUESSO1",66,0)
 N SSN,NAME,SITE,SITENUM,RMTDUZ,PHONE,VPID,XUMF
"RTN","XUESSO1",67,0)
 S U="^",TODAY=$$HTFM^XLFDT($H),DT=$P(TODAY,"."),NEWDUZ=0
"RTN","XUESSO1",68,0)
 K ^TMP("DIERR",$J)
"RTN","XUESSO1",69,0)
 ;
"RTN","XUESSO1",70,0)
 S SSN=$P(DATIN,U,1),NAME=$P(DATIN,U,2),SITE=$P(DATIN,U,3)
"RTN","XUESSO1",71,0)
 S SITENUM=$P(DATIN,U,4),RMTDUZ=$P(DATIN,U,5),PHONE=$P(DATIN,U,6)
"RTN","XUESSO1",72,0)
 S VPID=$P(DATIN,U,7) ;(p337)
"RTN","XUESSO1",73,0)
 ;Format checks
"RTN","XUESSO1",74,0)
 I NAME'?1U.E1","1U.E Q 0
"RTN","XUESSO1",75,0)
 I SSN'?9N Q 0
"RTN","XUESSO1",76,0)
 I '$L(SITE)!('$L(SITENUM)) Q 0
"RTN","XUESSO1",77,0)
 S XUMF=1 D CHK^DIE(4,99,,SITENUM,.%T) I %T=U Q 0 ;p533
"RTN","XUESSO1",78,0)
 D CHK^DIE(200.06,1,,SITE,.%T) I %T=U Q 0 ;p533
"RTN","XUESSO1",79,0)
 I RMTDUZ'>0 Q 0 ;p337
"RTN","XUESSO1",80,0)
 ;
"RTN","XUESSO1",81,0)
 ;Get a LOCK. Block if can't get.
"RTN","XUESSO1",82,0)
 L +^VA(200,"HL7"):10 Q:'$T 0
"RTN","XUESSO1",83,0)
 S %T=$$TALL($G(DUZ,0)) L -^VA(200,"HL7")
"RTN","XUESSO1",84,0)
 I %T Q $$SET(NEWDUZ) ;Return 1 if OK.
"RTN","XUESSO1",85,0)
 Q 0
"RTN","XUESSO1",86,0)
 ;
"RTN","XUESSO1",87,0)
 ;Per PSIM don't load VPID's, Only done by PSIM.
"RTN","XUESSO1",88,0)
 ;Code for adding VPID removed in p466.
"RTN","XUESSO1",89,0)
TALL(DUZ) ;Test for existing user or adds a new one
"RTN","XUESSO1",90,0)
 N FLAG,NEWREC
"RTN","XUESSO1",91,0)
 S FLAG=0,DUZ(0)="@" ;Make sure we can add the entry
"RTN","XUESSO1",92,0)
 ;See if match VPID, Per PSIM only use for lookup.
"RTN","XUESSO1",93,0)
 I $L(VPID) D
"RTN","XUESSO1",94,0)
 . S NEWDUZ=+$$IEN^XUPS(VPID) Q:NEWDUZ<1
"RTN","XUESSO1",95,0)
 . I '$D(^VA(200,NEWDUZ,8910,"B",SITENUM)) D VISM
"RTN","XUESSO1",96,0)
 . D UPDT S FLAG=1
"RTN","XUESSO1",97,0)
 . Q
"RTN","XUESSO1",98,0)
 I FLAG Q 1 ;Quit here if we found a match on VPID
"RTN","XUESSO1",99,0)
 ;See if the SSN is in the NPF cross reference
"RTN","XUESSO1",100,0)
 I '$$SPECIAL(SITENUM),$D(^VA(200,"SSN",SSN)) D
"RTN","XUESSO1",101,0)
 .S NEWDUZ=$O(^VA(200,"SSN",SSN,0))
"RTN","XUESSO1",102,0)
 .I '$D(^VA(200,NEWDUZ,8910,"B",SITENUM)) D VISM
"RTN","XUESSO1",103,0)
 .D UPDT
"RTN","XUESSO1",104,0)
 .S FLAG=1
"RTN","XUESSO1",105,0)
 .Q
"RTN","XUESSO1",106,0)
 ;See if in the AVISIT cross reference
"RTN","XUESSO1",107,0)
 I 'FLAG,$$SPECIAL(SITENUM) D
"RTN","XUESSO1",108,0)
 . S NEWDUZ=$O(^VA(200,"AVISIT",SITENUM,RMTDUZ,0))
"RTN","XUESSO1",109,0)
 . Q:NEWDUZ'>0
"RTN","XUESSO1",110,0)
 . D UPDT S FLAG=1
"RTN","XUESSO1",111,0)
 . Q
"RTN","XUESSO1",112,0)
 I FLAG Q 1 ;Quit here if we found a match for SSN or AVISIT
"RTN","XUESSO1",113,0)
 ;
"RTN","XUESSO1",114,0)
 ;
"RTN","XUESSO1",115,0)
 ;There is no matching SSN, try for a NAME match in "B"
"RTN","XUESSO1",116,0)
 S FLAG=0,NAME=$$UP^XLFSTR(NAME)
"RTN","XUESSO1",117,0)
 I $D(^VA(200,"B",NAME)) D
"RTN","XUESSO1",118,0)
 .N %,USER,USER2
"RTN","XUESSO1",119,0)
 .S NEWDUZ=$O(^VA(200,"B",NAME,0))
"RTN","XUESSO1",120,0)
 .S USER2=$O(^VA(200,"B",NAME,NEWDUZ)) ;More then one?
"RTN","XUESSO1",121,0)
 .Q:$L(USER2)>0
"RTN","XUESSO1",122,0)
 .;
"RTN","XUESSO1",123,0)
 .S %=$P($G(^VA(200,NEWDUZ,1)),U,9)
"RTN","XUESSO1",124,0)
 .Q:%'=SSN  ;Don't use this name if it has a different SSN
"RTN","XUESSO1",125,0)
 .;
"RTN","XUESSO1",126,0)
 .I '$L($P(^VA(200,NEWDUZ,1),U,9)) D ADDS
"RTN","XUESSO1",127,0)
 .I '$D(^VA(200,NEWDUZ,8910,"B",SITENUM)) D VISM
"RTN","XUESSO1",128,0)
 .D UPDT S FLAG=1
"RTN","XUESSO1",129,0)
 .Q
"RTN","XUESSO1",130,0)
 I FLAG Q 1 ;Quit here if we found an exact match for NAME (w/o SSN)
"RTN","XUESSO1",131,0)
 ;
"RTN","XUESSO1",132,0)
NEWU ;We didn't find anybody under SSN or NAME so we add a new user
"RTN","XUESSO1",133,0)
 ;
"RTN","XUESSO1",134,0)
 S DIC(0)="" ;Turn off ^XUA4A7 (work around)
"RTN","XUESSO1",135,0)
 ;
"RTN","XUESSO1",136,0)
 ;Put the name in the .01 field first.
"RTN","XUESSO1",137,0)
 D ADDU ;ADDU will set NEWDUZ
"RTN","XUESSO1",138,0)
 ;If NEWDUZ is still 0, the User add didn't work so exit.
"RTN","XUESSO1",139,0)
 I NEWDUZ=0 Q 0
"RTN","XUESSO1",140,0)
 ; Add SSN and Alias.
"RTN","XUESSO1",141,0)
 D ADDS,ADDA ;(p337)
"RTN","XUESSO1",142,0)
 ; Fill in the  VISITED FROM multiple
"RTN","XUESSO1",143,0)
 D VISM,UPDT ;Do update for all data in UPDT
"RTN","XUESSO1",144,0)
 ;
"RTN","XUESSO1",145,0)
 I $D(^TMP("DIERR",$J)) Q 0  ;FileMan Error
"RTN","XUESSO1",146,0)
 ;
"RTN","XUESSO1",147,0)
 I NEWDUZ D BULL Q 1  ;Every thing OK
"RTN","XUESSO1",148,0)
 Q 0  ;Couldn't add user
"RTN","XUESSO1",149,0)
 ;
"RTN","XUESSO1",150,0)
 ;
"RTN","XUESSO1",151,0)
 ;              *****Subroutines*****
"RTN","XUESSO1",152,0)
 ;
"RTN","XUESSO1",153,0)
 ;
"RTN","XUESSO1",154,0)
SET(NEWDUZ) ;Set the user up to go
"RTN","XUESSO1",155,0)
 Q:NEWDUZ'>0 0
"RTN","XUESSO1",156,0)
 N XUSER,XOPT
"RTN","XUESSO1",157,0)
 S DUZ=NEWDUZ,U="^",DUZ("VISITOR")=SITENUM_U_RMTDUZ ;p533
"RTN","XUESSO1",158,0)
 D DUZ^XUS1A
"RTN","XUESSO1",159,0)
 Q 1
"RTN","XUESSO1",160,0)
 ;
"RTN","XUESSO1",161,0)
ADDU ;Add a new name to the New Person File
"RTN","XUESSO1",162,0)
 N DD,DO,DIC,DA,X,Y
"RTN","XUESSO1",163,0)
 S DIC="^VA(200,",DIC(0)="L",X=NAME,NEWREC=1 ;p533
"RTN","XUESSO1",164,0)
 D FILE^DICN
"RTN","XUESSO1",165,0)
 S:Y>0 NEWDUZ=+Y
"RTN","XUESSO1",166,0)
 Q
"RTN","XUESSO1",167,0)
 ;
"RTN","XUESSO1",168,0)
ADDS ;Add a SSN to the file
"RTN","XUESSO1",169,0)
 Q:$$SPECIAL(SITENUM)
"RTN","XUESSO1",170,0)
 S IEN=NEWDUZ_","
"RTN","XUESSO1",171,0)
 S FDR(200,IEN,9)=SSN
"RTN","XUESSO1",172,0)
 ;Do update for all data in UPDT
"RTN","XUESSO1",173,0)
 Q
"RTN","XUESSO1",174,0)
 ;
"RTN","XUESSO1",175,0)
ADDA ;Add a new Alias to file 200.04
"RTN","XUESSO1",176,0)
 Q:$D(^VA(200,NEWDUZ,3,"B","VISITOR"))
"RTN","XUESSO1",177,0)
 S IEN="+2,"_NEWDUZ_","
"RTN","XUESSO1",178,0)
 S FDR("200.04",IEN,.01)="VISITOR"
"RTN","XUESSO1",179,0)
 ;Do update for all data in UPDT
"RTN","XUESSO1",180,0)
 Q
"RTN","XUESSO1",181,0)
 ;
"RTN","XUESSO1",182,0)
VISM ;Create a multiple for this site number in the VISTED FROM file
"RTN","XUESSO1",183,0)
 S IEN="+3,"_NEWDUZ_","
"RTN","XUESSO1",184,0)
 S FDR("200.06",IEN,.01)=SITENUM
"RTN","XUESSO1",185,0)
 ;
"RTN","XUESSO1",186,0)
 S FDR("200.06",IEN,1)=SITE
"RTN","XUESSO1",187,0)
 S FDR("200.06",IEN,2)=RMTDUZ
"RTN","XUESSO1",188,0)
 S FDR("200.06",IEN,3)=TODAY
"RTN","XUESSO1",189,0)
 ;I $D(PHONE),($L(PHONE)>2) S FDR("200.06",IEN,5)=PHONE
"RTN","XUESSO1",190,0)
 ;Do update for all data in UPDT
"RTN","XUESSO1",191,0)
 Q
"RTN","XUESSO1",192,0)
 ;
"RTN","XUESSO1",193,0)
UPDT ;Update the LAST VISIT field
"RTN","XUESSO1",194,0)
 I $D(FDR(200.06)) S IEN=$O(FDR(200.06,""))
"RTN","XUESSO1",195,0)
 E  S IEN=$O(^VA(200,NEWDUZ,8910,"B",SITENUM,0))_","_NEWDUZ_","
"RTN","XUESSO1",196,0)
 S FDR(200.06,IEN,4)=TODAY
"RTN","XUESSO1",197,0)
 ;Update the phone each time
"RTN","XUESSO1",198,0)
 I $D(PHONE),($L(PHONE)>2) S FDR("200.06",IEN,5)=PHONE ;p466
"RTN","XUESSO1",199,0)
 K IEN D UPDATE^DIE("E","FDR","IEN") ;File all the data
"RTN","XUESSO1",200,0)
 I $D(^TMP("DIERR",$J)) D
"RTN","XUESSO1",201,0)
 . N DIK,DA
"RTN","XUESSO1",202,0)
 . D FAIL
"RTN","XUESSO1",203,0)
 . I $D(NEWREC) S DIK="^VA(200,",DA=NEWDUZ D ^DIK ;Remove partial entry ;p533
"RTN","XUESSO1",204,0)
 . S NEWDUZ=0 ;Tell failed
"RTN","XUESSO1",205,0)
 Q
"RTN","XUESSO1",206,0)
 ;
"RTN","XUESSO1",207,0)
BULL ;Set up the bulletin and fire it off, Let MM see if bulletin is there
"RTN","XUESSO1",208,0)
 N XMB
"RTN","XUESSO1",209,0)
 S XMB="XUVISIT"
"RTN","XUESSO1",210,0)
 S XMB(1)=$$FMTE^XLFDT(TODAY)
"RTN","XUESSO1",211,0)
 S XMB(2)=NAME,XMB(3)=NEWDUZ,XMB(4)=SITE
"RTN","XUESSO1",212,0)
 S XMB(5)=SITENUM,XMB(6)=RMTDUZ,XMB(7)=PHONE
"RTN","XUESSO1",213,0)
 D ^XMB
"RTN","XUESSO1",214,0)
 Q
"RTN","XUESSO1",215,0)
 ;
"RTN","XUESSO1",216,0)
FAIL ;Send bulletin if fail to add user.
"RTN","XUESSO1",217,0)
 N I,XMTEXT,XMY,XUTEXT,XMSUB,XMZ,XMMG,ZTQUEUED
"RTN","XUESSO1",218,0)
 S XMSUB="XUESSO-VISIT ADD FAILED",ZTQUEUED=1
"RTN","XUESSO1",219,0)
 D MSG^DIALOG("AEST",.XMTEXT)
"RTN","XUESSO1",220,0)
 S XUTEXT(1)="Attempting to add "_NAME_" from "_SITE
"RTN","XUESSO1",221,0)
 S XUTEXT(2)=$G(DATIN),XUTEXT(3)=" ",XUTEXT=3,I=0
"RTN","XUESSO1",222,0)
 F  S I=$O(XMTEXT(I)) Q:'I  S XUTEXT=XUTEXT+1,XUTEXT(XUTEXT)=XMTEXT(I)
"RTN","XUESSO1",223,0)
 S XMTEXT="XUTEXT(",XMY("G.XUSVISITFAIL@FO-OAKLAND.MED.VA.GOV")=""
"RTN","XUESSO1",224,0)
 D ^XMD
"RTN","XUESSO1",225,0)
 Q
"RTN","XUS1")
0^5^B26024789^B24609205
"RTN","XUS1",1,0)
XUS1 ;SF-ISC/STAFF - SIGNON ;02/03/10  16:01
"RTN","XUS1",2,0)
 ;;8.0;KERNEL;**9,59,111,165,150,252,265,419,469,523**;Jul 10, 1995;Build 16
"RTN","XUS1",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XUS1",4,0)
 ;User setup
"RTN","XUS1",5,0)
USER ;
"RTN","XUS1",6,0)
 K XUTEXT S XUM=$$USER^XUS1A(),$Y=0
"RTN","XUS1",7,0)
 ;Show post sign-on text
"RTN","XUS1",8,0)
 F I=0:0 S I=$O(XUTEXT(I)) Q:I'>0  D:$Y>20  W:$E(XUTEXT(I),1)="!" ! W $E(XUTEXT(I),2,999)
"RTN","XUS1",9,0)
 . N DIR S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR W @IOF Q
"RTN","XUS1",10,0)
 ;if XUM=9 multi sign-on NOT allowed
"RTN","XUS1",11,0)
 I XUM=9 W !!,?8,$$EZBLD^DIALOG(30810.45)
"RTN","XUS1",12,0)
 Q:XUM  ;User can't sign-on.
"RTN","XUS1",13,0)
SET ;
"RTN","XUS1",14,0)
 S Y=$$CHKDIV()
"RTN","XUS1",15,0)
 I $P(Y,U,2)>0,$D(^DIC(4,0)) D ASKDIV
"RTN","XUS1",16,0)
 S DUZ(2)=+Y D DUZ^XUS1A
"RTN","XUS1",17,0)
 ;Check verify code
"RTN","XUS1",18,0)
 I $$VCHG D CVC^XUS2 G:$D(DUOUT) H^XUS
"RTN","XUS1",19,0)
 S:$P(XOPT,"^",5) XUTT=1 ;Ask Device
"RTN","XUS1",20,0)
 D ENQ ;Inquire to Terminal Type
"RTN","XUS1",21,0)
 Q
"RTN","XUS1",22,0)
 ;
"RTN","XUS1",23,0)
VCHG() ;Check if the Verify code needs to be changed
"RTN","XUS1",24,0)
 I $D(DUZ("ASH")) Q 0 ;rwf 403
"RTN","XUS1",25,0)
 D:'$D(XUSER) USER^XUS(DUZ)
"RTN","XUS1",26,0)
 Q:'$L($P(XUSER(1),U,2)) 1 ;Null VC
"RTN","XUS1",27,0)
 I $$BROKER^XWBLIB Q:$P(XUSER(0),U,8)=1 0 ;VC never expires, only for BROKER
"RTN","XUS1",28,0)
 Q (XUSER(1)+$P(XOPT,U,15))'>$H ;Time to change
"RTN","XUS1",29,0)
 ;
"RTN","XUS1",30,0)
ASKDIV ;Ask the user for the Division, return Y
"RTN","XUS1",31,0)
 N X
"RTN","XUS1",32,0)
 S DIC="^VA(200,DUZ,2,",DIC(0)="AEMQ",DIC("P")="200.02P",X=$O(^VA(200,DUZ,2,"AX1",1,0)) S:X>0 DIC("B")=$P($$NS^XUAF4(X),U)
"RTN","XUS1",33,0)
 D ^DIC I Y'>0 W !,*7,"You must select one." G ASKDIV
"RTN","XUS1",34,0)
 Q
"RTN","XUS1",35,0)
 ;
"RTN","XUS1",36,0)
CHKDIV(CD) ;ef,sr Check if user needs to select Division.
"RTN","XUS1",37,0)
 N %,%1,%2,%3,%4
"RTN","XUS1",38,0)
 I $G(DUZ("DIV"))>0 Q DUZ("DIV") ;p469 Set outside
"RTN","XUS1",39,0)
 S %=$O(^VA(200,DUZ,2,0)),%1=$O(^(%))
"RTN","XUS1",40,0)
 I %1,$D(CD) D
"RTN","XUS1",41,0)
 . S %2=0,%3=0,CD=0
"RTN","XUS1",42,0)
 . F  S %2=$O(^VA(200,DUZ,2,%2)) Q:%2'>0  S %4=^(%2,0),%3=%3+1,CD(%3)=%2_"^"_$$NS^XUAF4(%2)_$S($P(%4,"^",2):"^1",1:"")
"RTN","XUS1",43,0)
 . S CD=%3
"RTN","XUS1",44,0)
 Q %_"^"_%1
"RTN","XUS1",45,0)
 ;
"RTN","XUS1",46,0)
ENQ ;Get terminal type
"RTN","XUS1",47,0)
 S XUT1="" I XUTT X XUEOFF R X:0 X ^%ZOSF("TYPE-AHEAD") W $C(27,91,99) R *X:2 I X=27 F  R X#1:2 S XUT1=XUT1_X Q:'$T!(X="c")
"RTN","XUS1",48,0)
 ;Commented out the next line as Wyse 75 are not used
"RTN","XUS1",49,0)
 ;I XUTT,(XUT1'["[") R X:0 S XUT1="" W *5 R *X:2 R:$T XUT1:2 S X=$S(X=6:"C-WYSE 75",1:$C(X)_XUT1),XUT1=""
"RTN","XUS1",50,0)
 X XUEON I XUTT,XUT1["[" S Y=$O(^%ZIS(3.22,"B",XUT1,0)) I Y>0 S X=$P($G(^%ZIS(3.22,Y,0)),"^",2)
"RTN","XUS1",51,0)
 I X?1.ANP S DIC="^%ZIS(2,",DIC(0)="MO" D ^DIC I Y>0 S XUIOP(1)=$P(Y,U,2),$P(XUIOP,";",2)=XUIOP(1),^VA(200,DUZ,1.2)=+Y
"RTN","XUS1",52,0)
 I '$D(XUIOP(1)),$D(^VA(200,DUZ,1.2)) S X=+^(1.2) I X>0,$D(^%ZIS(2,X,0)) S $P(XUIOP,";",2)=$P(^(0),U)
"RTN","XUS1",53,0)
 Q
"RTN","XUS1",54,0)
 ;
"RTN","XUS1",55,0)
NEXT ;Jump to the next routine
"RTN","XUS1",56,0)
 S IOP=XUIOP D ^%ZIS D SAVE ;Save off device/user info
"RTN","XUS1",57,0)
 S X=$G(^DISV(DUZ)) ;Add kill by session or day here
"RTN","XUS1",58,0)
 S ^DISV(DUZ)=$H
"RTN","XUS1",59,0)
 ;Removed UCI jump p469
"RTN","XUS1",60,0)
 ;S X=%UCI,N1=XUCI I PGM["[" S X=$P(PGM,"[",2,4),PGM=$P(PGM,"[",1)
"RTN","XUS1",61,0)
 ;S:X["""" X=$P(X,"""",2) S:X?.E1"]"&(X'["[") X=$E(X,1,$L(X)-1) S XUM=14,XUM(0)=X
"RTN","XUS1",62,0)
 ;S %UCI=X I "PRODMGR"'[X,$D(^%ZOSF("UCICHECK")) X ^("UCICHECK") G NO:Y="" S:N1=Y %UCI=""
"RTN","XUS1",63,0)
 ;S XUM=15,XUM(0)=PGM G NO:PGM'?1AP.AN
"RTN","XUS1",64,0)
 ;G NO:":"_XUA_":"'[(":"_PGM_":")
"RTN","XUS1",65,0)
 D AUDIT
"RTN","XUS1",66,0)
 S X=$S($D(^VA(200,DUZ,0)):$P($P(^(0),U),","),1:"Unk"),X=$E(X,1,10)_"_"_($J#10000) D SETENV^%ZOSV ;Set Process Name
"RTN","XUS1",67,0)
 ;S X=$P(XOPT,U,16) X:X ^%ZOSF("PRIORITY")
"RTN","XUS1",68,0)
 D LOG:DUZ,KILL
"RTN","XUS1",69,0)
 ;I %UCI]"" K ^XUTL("XQ",$J) S $P(^VA(200,DUZ,1.1),U,3)=0 G GO^%XUCI
"RTN","XUS1",70,0)
 K ^XUTL("OR",$J),^UTILITY($J),%UCI
"RTN","XUS1",71,0)
 G ^XQ ;@(U_PGM)
"RTN","XUS1",72,0)
 ;
"RTN","XUS1",73,0)
SAVE ;
"RTN","XUS1",74,0)
 N X
"RTN","XUS1",75,0)
 S X="DUZ" F  S X=$Q(@X) Q:X=""  I $D(@X) S ^XUTL("XQ",$J,$TR(X,""""))=@X
"RTN","XUS1",76,0)
 F X="DUZ","IO","IO(""IP"")","IO(""CLNM"")","XQVOL" I $D(@X) S ^XUTL("XQ",$J,X)=@X
"RTN","XUS1",77,0)
 D SAVEVAR^%ZIS ;Save the HOME device variables
"RTN","XUS1",78,0)
 Q
"RTN","XUS1",79,0)
 ;
"RTN","XUS1",80,0)
LOG ;used by R/S and Broker
"RTN","XUS1",81,0)
 N %,XP1,XP2
"RTN","XUS1",82,0)
 S XQXFLG("LLOG")=$P($G(^VA(200,DUZ,1.1)),U) ;Save for LOGIN templates
"RTN","XUS1",83,0)
 S XP1=$$SLOG($P(XUVOL,U,1),,XUDEV,XUCI,$P(XUENV,U,3))
"RTN","XUS1",84,0)
 S %=$$COOKIE($P(^VA(200,DUZ,0),U),XP1) I $L(%) S XQXFLG("ZEBRA")=XP1_"~"_%,$P(^XUSEC(0,XP1,0),U,13)=% L +^XWB("SESSION",XQXFLG("ZEBRA")):60
"RTN","XUS1",85,0)
 Q
"RTN","XUS1",86,0)
 ;
"RTN","XUS1",87,0)
 ;Division updated in DIVSET^XUSRB2
"RTN","XUS1",88,0)
 ;The other parameters are in the symbol table with known names.
"RTN","XUS1",89,0)
 ;P1=DUZ,P2=$I,P3=$J,P4=EXIT D/T,P5=VOLUME,P6=TASKMAN,P7=XUDEV,P8=UCI,P9=ZIO,P10=NODE,P11=IP,P12=CLNM,P13=HANDLE,P14=REMOTE SITE,P15=REMOTE IEN
"RTN","XUS1",90,0)
SLOG(P5,P6,P7,P8,P10,P14,P15) ;
"RTN","XUS1",91,0)
 N %,I,DA,DIK,N,XL1,XL2 S XL1=$$NOW^XLFDT
"RTN","XUS1",92,0)
 S P5=$G(P5),P6=$G(P6),P7=$G(P7),P8=$G(P8),P10=$G(P10)
"RTN","XUS1",93,0)
 S N=DUZ_"^"_$I_"^"_$J_"^^"_P5_"^"_P6_"^"_P7_"^"_P8_"^"_$G(IO("ZIO"))_"^"_P10_"^"_$G(IO("IP"))_"^"_$G(IO("CLNM"))
"RTN","XUS1",94,0)
 S:$D(DUZ("VISITOR")) $P(N,U,14,15)=DUZ("VISITOR") ;p523
"RTN","XUS1",95,0)
 S:$G(DUZ(2))>0 $P(N,"^",17)=DUZ(2)
"RTN","XUS1",96,0)
 S:$D(DUZ("REMAPP")) $P(N,U,18)=$P(DUZ("REMAPP"),U) ;p523
"RTN","XUS1",97,0)
 F I=XL1:.00000001 L +^XUSEC(0,I):1 Q:'$D(^XUSEC(0,I))  L -^XUSEC(0,I)
"RTN","XUS1",98,0)
 S ^XUSEC(0,I,0)=N
"RTN","XUS1",99,0)
 L -^XUSEC(0,I)
"RTN","XUS1",100,0)
 S $P(^XUSEC(0,0),"^",3,4)=I_U_(1+$P(^XUSEC(0,0),"^",4))
"RTN","XUS1",101,0)
 S (XL1,DA)=I,DIK="^XUSEC(0," D IX^DIK ;index new entry
"RTN","XUS1",102,0)
 S ^XUTL("XQ",$J,0)=XL1 ;save for sign-off
"RTN","XUS1",103,0)
 I 'P6 S XL2=$G(^VA(200,DUZ,1.1)),$P(XL2,U,1,3)=XL1_"^0^1",$P(XL2,U,5)="",^VA(200,DUZ,1.1)=XL2  ;Set last Sign-on
"RTN","XUS1",104,0)
 Q XL1
"RTN","XUS1",105,0)
 ;
"RTN","XUS1",106,0)
COOKIE(J1,J2) ;Call VAdeamon for a cookie
"RTN","XUS1",107,0)
 N ZZ,%
"RTN","XUS1",108,0)
 I $G(XQXFLG("ZEBRA"))=-1 K XQXFLG("ZEBRA") Q "" ;Disabled
"RTN","XUS1",109,0)
 Q:$G(IO("IP"))="" "" ;Not using Telnet
"RTN","XUS1",110,0)
 Q:$D(DUZ("VISITOR")) "" ;Don't create Handles for visitors p523
"RTN","XUS1",111,0)
 ;
"RTN","XUS1",112,0)
 S %=$$CMD^XWBCAGNT(.ZZ,"XWB CREATE HANDLE",J1_"^"_J2) Q:'% ""
"RTN","XUS1",113,0)
 Q $G(ZZ(1))
"RTN","XUS1",114,0)
 ;
"RTN","XUS1",115,0)
AUDIT ;Set-up Audit info
"RTN","XUS1",116,0)
 N I,I1,I2
"RTN","XUS1",117,0)
 S I=$G(^XTV(8989.3,1,19)),I1=$P(I,U),I2=$P(I,U,2) Q:"asu"'[I1  I (I2>XUNOW)!($P(I,U,3)<XUNOW) Q
"RTN","XUS1",118,0)
 I "au"[I1 S:(I1="a")!($D(^XTV(8989.3,1,19.3,"B",DUZ))>1) XQAUDIT=1 Q
"RTN","XUS1",119,0)
 S XQAUDIT="" F I=0:0 S I=$O(^XTV(8989.3,1,19.1,"B",I)) Q:I'>0!($L(XQAUDIT)>245)  S XQAUDIT=XQAUDIT_"2^"_I_U
"RTN","XUS1",120,0)
 S I1="" F I=0:0 S I1=$O(^XTV(8989.3,1,19.2,"B",I1)) Q:I1']""!($L(XQAUDIT)>245)  S XQAUDIT=XQAUDIT_"3^"_I1_U
"RTN","XUS1",121,0)
 Q
"RTN","XUS1",122,0)
 ;
"RTN","XUS1",123,0)
DD(Y) Q $$FMTE^XLFDT(Y,1)
"RTN","XUS1",124,0)
 ;
"RTN","XUS1",125,0)
KILL N %UCI,PGM,U,XQUR,XMCHAN G KILL1^XUSCLEAN
"RTN","XUS1",126,0)
 Q
"RTN","XUS1",127,0)
NO G NO^XUS
"RTN","XUSBSE1")
0^1^B46486369^B25570327
"RTN","XUSBSE1",1,0)
XUSBSE1 ;JLI/OAK-OIFO - MODIFICATIONS FOR BSE ;02/01/10  07:35
"RTN","XUSBSE1",2,0)
 ;;8.0;KERNEL;**404,439,523**;Jul 10, 1995;Build 16
"RTN","XUSBSE1",3,0)
 ; SETVISIT - returns a BSE token
"RTN","XUSBSE1",4,0)
SETVISIT(RES) ; .RPC
"RTN","XUSBSE1",5,0)
 N TOKEN,O
"RTN","XUSBSE1",6,0)
 S TOKEN=$$HANDLE^XUSRB4("XUSBSE",1)
"RTN","XUSBSE1",7,0)
 S ^XTMP(TOKEN,1)=$$ENCRYP^XUSRB1($$GET^XUESSO1(DUZ))
"RTN","XUSBSE1",8,0)
 S ^XTMP(TOKEN,3)=+$H ;Set expiration day
"RTN","XUSBSE1",9,0)
 L -^XTMP(TOKEN) ;Lock set in $$HANDLE
"RTN","XUSBSE1",10,0)
 S RES=TOKEN
"RTN","XUSBSE1",11,0)
 Q
"RTN","XUSBSE1",12,0)
 ;
"RTN","XUSBSE1",13,0)
 ; GETVISIT - returns demographics for user indicated by TOKEN
"RTN","XUSBSE1",14,0)
 ;   output - RES - passed by reference, contains global location on return
"RTN","XUSBSE1",15,0)
 ;   input  - TOKEN - token value returned by remote site
"RTN","XUSBSE1",16,0)
GETVISIT(RES,TOKEN) ; .RPC
"RTN","XUSBSE1",17,0)
 N O
"RTN","XUSBSE1",18,0)
 S RES="",O=0
"RTN","XUSBSE1",19,0)
 ; shouldn't come in with a null token ; JLI 091218
"RTN","XUSBSE1",20,0)
 I TOKEN="" Q  ; JLI 091218
"RTN","XUSBSE1",21,0)
 ;Check expiration time, and if it has passed.
"RTN","XUSBSE1",22,0)
 L +^XTMP(TOKEN):10 I '$T Q
"RTN","XUSBSE1",23,0)
 I ($G(^XTMP(TOKEN,3))-$H) K ^XTMP(TOKEN)
"RTN","XUSBSE1",24,0)
 S RES=$G(^XTMP(TOKEN,1)) S:$L(RES) RES=$$DECRYP^XUSRB1(RES)
"RTN","XUSBSE1",25,0)
 L -^XTMP(TOKEN)
"RTN","XUSBSE1",26,0)
 Q
"RTN","XUSBSE1",27,0)
 ;
"RTN","XUSBSE1",28,0)
OLDCAPRI(XWBUSRNM) ;The OLD CAPRI code, Remove next patch
"RTN","XUSBSE1",29,0)
 ; Return 1 if a valid user, else 0.
"RTN","XUSBSE1",30,0)
 N XVAL,XOPTION
"RTN","XUSBSE1",31,0)
 S XVAL=$$PUT^XUESSO1($P(XWBUSRNM,U,3,99)) ; Sign in as Visitor
"RTN","XUSBSE1",32,0)
 I XVAL D
"RTN","XUSBSE1",33,0)
 . S XOPTION=$$FIND1^DIC(19,"","X","DVBA CAPRI GUI")
"RTN","XUSBSE1",34,0)
 . D SETCNTXT(XOPTION) S DTIME=$$DTIME^XUP(DUZ),DUZ("REMAPP")="^Old CAPRI"
"RTN","XUSBSE1",35,0)
 Q $S(XVAL>0:1,1:0)
"RTN","XUSBSE1",36,0)
 ;
"RTN","XUSBSE1",37,0)
 ; CHKUSER - determines if a BSE sign-on is valid
"RTN","XUSBSE1",38,0)
 ;   INPUTSTR - input - String of characters from client
"RTN","XUSBSE1",39,0)
 ;   return value - 1 if a valid user, else 0
"RTN","XUSBSE1",40,0)
 ; called from XUSRB
"RTN","XUSBSE1",41,0)
CHKUSER(INPUTSTR) ;
"RTN","XUSBSE1",42,0)
 N XUCODE,XUENTRY,XUSTR,XUTOKEN
"RTN","XUSBSE1",43,0)
 ; ZEXCEPT: XUREMAPP - global variable naming the REMOTE APPLICATION in use
"RTN","XUSBSE1",44,0)
 I +INPUTSTR=-31,INPUTSTR["DVBA_" Q $$OLDCAPRI(INPUTSTR)
"RTN","XUSBSE1",45,0)
 I +INPUTSTR'=-35 Q 0
"RTN","XUSBSE1",46,0)
 S INPUTSTR=$P(INPUTSTR,U,2,99)
"RTN","XUSBSE1",47,0)
 K ^TMP("XUSBSE1",$J)
"RTN","XUSBSE1",48,0)
 S XUCODE=$$DECRYP^XUSRB1(INPUTSTR) ;TMP
"RTN","XUSBSE1",49,0)
 S XUCODE=$$EN^XUSHSH($P(XUCODE,U))
"RTN","XUSBSE1",50,0)
 S XUENTRY=$$FIND1^DIC(8994.5,"","X",XUCODE,"ACODE") D:XUENTRY>0
"RTN","XUSBSE1",51,0)
 . S DUZ("REMAPP")=XUENTRY_U_$$GET1^DIQ(8994.5,XUENTRY_",",.01)
"RTN","XUSBSE1",52,0)
 . S XUTOKEN=$P($$DECRYP^XUSRB1(INPUTSTR),U,2)
"RTN","XUSBSE1",53,0)
 . S XUSTR=$P($$DECRYP^XUSRB1(INPUTSTR),U,3,4)
"RTN","XUSBSE1",54,0)
 . S XUENTRY=$$BSEUSER(XUENTRY,XUTOKEN,XUSTR)
"RTN","XUSBSE1",55,0)
 . Q
"RTN","XUSBSE1",56,0)
 S DTIME=$$DTIME^XUP(DUZ) ;p523
"RTN","XUSBSE1",57,0)
 Q $S(XUENTRY'>0:0,1:XUENTRY)
"RTN","XUSBSE1",58,0)
 ;
"RTN","XUSBSE1",59,0)
 ; BSEUSER - returns internal entry number for authenicated user or 0
"RTN","XUSBSE1",60,0)
 ;   ENTRY - input - internal entry number in REMOTE APPLICATION file
"RTN","XUSBSE1",61,0)
 ;   TOKEN - input - token from authenticaing site
"RTN","XUSBSE1",62,0)
 ;   STR   - input - remainder of input string (2 pieces)
"RTN","XUSBSE1",63,0)
BSEUSER(ENTRY,TOKEN,STR) ;
"RTN","XUSBSE1",64,0)
 N XUIEN,XUCONTXT,XUDEMOG,XCNT,XVAL,ARRAY
"RTN","XUSBSE1",65,0)
 S XUIEN=0,XUDEMOG=""
"RTN","XUSBSE1",66,0)
 S XCNT=0 F  S XCNT=$O(^XWB(8994.5,ENTRY,1,XCNT)) Q:XCNT'>0  S XVAL=^(XCNT,0) D  Q:XUDEMOG'=""
"RTN","XUSBSE1",67,0)
 . ; CODE TO HANDLE CONNECTION TYPE AND CONNECTIONS
"RTN","XUSBSE1",68,0)
 . I $P(XVAL,U)="M" S XUDEMOG=$$M2M($P(XVAL,U,3),$P(XVAL,U,2),TOKEN) D CLOSE^XWBM2MC() Q
"RTN","XUSBSE1",69,0)
 . I $P(XVAL,U)="R" S XUDEMOG=$$XWB($P(XVAL,U,3),$P(XVAL,U,2),TOKEN) Q
"RTN","XUSBSE1",70,0)
 . I $P(XVAL,U)="H" S XUDEMOG=$$POST1^XUSBSE2(.ARRAY,$P(XVAL,U,3),$P(XVAL,U,2),$P(XVAL,U,4),"xVAL="_TOKEN) Q
"RTN","XUSBSE1",71,0)
 . I $P(XVAL,U)="S" S XUDEMOG=$$HOME(TOKEN,XVAL,STR) Q  ;p522
"RTN","XUSBSE1",72,0)
 . Q
"RTN","XUSBSE1",73,0)
 ; if invalid set XWBSEC so an error is reported in the GUI application
"RTN","XUSBSE1",74,0)
 I +XUDEMOG=-1 S XWBSEC="BSE ERROR - "_$P(XUDEMOG,"^",2)
"RTN","XUSBSE1",75,0)
 I $L(XUDEMOG,"^")>2 D
"RTN","XUSBSE1",76,0)
 . S XUCONTXT=$P($G(^XWB(8994.5,ENTRY,0)),U,2)
"RTN","XUSBSE1",77,0)
 . S XUIEN=$$SETUP(XUDEMOG,XUCONTXT)
"RTN","XUSBSE1",78,0)
 Q $S(XUIEN'>0:0,1:XUIEN)
"RTN","XUSBSE1",79,0)
 ;
"RTN","XUSBSE1",80,0)
XWB(SERVER,PORT,TOKEN) ;Special Broker service
"RTN","XUSBSE1",81,0)
 N DEMOSTR,IO,XWBTDEV,XWBRBUF
"RTN","XUSBSE1",82,0)
 Q $$CALLBSE^XWBTCPM2(SERVER,PORT,TOKEN)
"RTN","XUSBSE1",83,0)
 ;
"RTN","XUSBSE1",84,0)
M2M(SERVER,PORT,TOKEN) ;
"RTN","XUSBSE1",85,0)
 N DEMOGSTR,XWBCRLFL,RETRNVAL,XUSBSARR
"RTN","XUSBSE1",86,0)
 S DEMOGSTR=""
"RTN","XUSBSE1",87,0)
 N XWBSTAT,XWBPARMS,XWBTDEV,XWBNULL
"RTN","XUSBSE1",88,0)
 S XWBPARMS("ADDRESS")=SERVER,XWBPARMS("PORT")=PORT
"RTN","XUSBSE1",89,0)
 S XWBPARMS("RETRIES")=3 ;Retries 3 times to open
"RTN","XUSBSE1",90,0)
 ;
"RTN","XUSBSE1",91,0)
 I '$$OPEN^XWBRL(.XWBPARMS) Q "NO OPEN"
"RTN","XUSBSE1",92,0)
 S XWBPARMS("URI")="XUS GET VISITOR"
"RTN","XUSBSE1",93,0)
 D CLEARP^XWBM2MEZ
"RTN","XUSBSE1",94,0)
 D SETPARAM^XWBM2MEZ(1,"STRING",TOKEN)
"RTN","XUSBSE1",95,0)
 S XWBPARMS("URI")="XUS GET VISITOR"
"RTN","XUSBSE1",96,0)
 S XWBPARMS("RESULTS")=$NA(^TMP("XUSBSE1",$J))
"RTN","XUSBSE1",97,0)
 S XWBCRLFL=0
"RTN","XUSBSE1",98,0)
 D REQUEST^XWBRPCC(.XWBPARMS)
"RTN","XUSBSE1",99,0)
 I XWBCRLFL S RETRNVAL="XWBCRLFL IS TRUE" G M2MEXIT ; S @M2MLOC="XWBCRLFL IS TRUE" Q  ; Q 0
"RTN","XUSBSE1",100,0)
 ;
"RTN","XUSBSE1",101,0)
 I '$$EXECUTE^XWBVLC(.XWBPARMS) S RETRNVAL="FAILURE ON EXECUTE" G M2MEXIT ; S @M2MLOC="failure on execute" Q  ;Run RPC and place raw XML results in ^TMP("XWBM2MVLC"
"RTN","XUSBSE1",102,0)
 D PARSE^XWBRPC(.XWBPARMS,"XUSBSARR") ;Parse out raw XML and place results in ^TMP("XWBM2MRPC"
"RTN","XUSBSE1",103,0)
 S RETRNVAL=$G(XUSBSARR(1))
"RTN","XUSBSE1",104,0)
M2MEXIT ;
"RTN","XUSBSE1",105,0)
 D CLOSE^XWBM2MEZ
"RTN","XUSBSE1",106,0)
 Q RETRNVAL
"RTN","XUSBSE1",107,0)
 ;
"RTN","XUSBSE1",108,0)
 ; HOME - return value = string of demographic characteristics
"RTN","XUSBSE1",109,0)
 ;   input SERVER - server address
"RTN","XUSBSE1",110,0)
 ;   input PORT   - port number for connection
"RTN","XUSBSE1",111,0)
 ;   input TOKEN  - token to identify user to authenticating server
"RTN","XUSBSE1",112,0)
 ;   input BSE    - Parts 3 and 4 of string passed in.
"RTN","XUSBSE1",113,0)
 ;   input RAD    - Data from Remote application file.
"RTN","XUSBSE1",114,0)
HOME(TOKEN,RAD,BSE) ;Call home for token.
"RTN","XUSBSE1",115,0)
 N X,XUESSO,PORT,STN,IP
"RTN","XUSBSE1",116,0)
 D:$G(XWBDEBUG) LOG^XWBDLOG("ENTERED HOME BSE: "_BSE) ; JLI 091007 DEBUG
"RTN","XUSBSE1",117,0)
 Q:$P(RAD,U,2)'=-1 "" ;Not setup right
"RTN","XUSBSE1",118,0)
 ;Set Station #, port from passed in data
"RTN","XUSBSE1",119,0)
 S STN=$P(BSE,U),PORT=$P(BSE,U,2),XUESSO=""
"RTN","XUSBSE1",120,0)
 S IP=$$IPFLOC(STN) I '$L(IP) S XUESSO="-1^ADDRESS FOR STN "_STN_" NOT FOUND"
"RTN","XUSBSE1",121,0)
 D:$G(XWBDEBUG) LOG^XWBDLOG("HOME BSE IP: "_IP_" PORT:"_PORT)
"RTN","XUSBSE1",122,0)
 I $L(IP) S XUESSO=$$CALLBSE^XWBTCPM2(IP,PORT,TOKEN,STN)
"RTN","XUSBSE1",123,0)
 D:$G(XWBDEBUG) LOG^XWBDLOG("LEAVING HOME XUESSO: "_XUESSO)
"RTN","XUSBSE1",124,0)
 I XUESSO="Didn't open connection." S XUESSO="-1^COULD NOT CONNECT TO STN "_STN_" USING PORT "_PORT
"RTN","XUSBSE1",125,0)
 I XUESSO="No Response" S XUESSO="-1^BSE TOKEN EXPIRED"
"RTN","XUSBSE1",126,0)
 Q XUESSO
"RTN","XUSBSE1",127,0)
 ;
"RTN","XUSBSE1",128,0)
IPFLOC(L) ;Get the addess from the station number
"RTN","XUSBSE1",129,0)
 N XUSBSE,I,RET,ADD,IP
"RTN","XUSBSE1",130,0)
 ; next line added to handle IP input directly
"RTN","XUSBSE1",131,0)
 D:$G(XWBDEBUG) LOG^XWBDLOG("L IN IPFLOC: "_L)
"RTN","XUSBSE1",132,0)
 I L?1.3N1"."1.3N1"."1.3N1"."1.3N Q L ; JLI 091007
"RTN","XUSBSE1",133,0)
 D FIND^DIC(870,,".03;.08","MO",L,,,,,"XUSBSE")
"RTN","XUSBSE1",134,0)
 Q:+$G(XUSBSE("DILIST",0))=0 ""
"RTN","XUSBSE1",135,0)
 S I=0,ADD="",IP=""
"RTN","XUSBSE1",136,0)
 F  S I=$O(XUSBSE("DILIST","ID",I)) Q:'I  D  Q:IP
"RTN","XUSBSE1",137,0)
 . ;New DNS field
"RTN","XUSBSE1",138,0)
 . S ADD=XUSBSE("DILIST","ID",I,.08) I $L(ADD) D  Q:IP'=""
"RTN","XUSBSE1",139,0)
 . . I ADD?1.3N1"."1.3N1"."1.3N1"."1.3N S IP=ADD Q
"RTN","XUSBSE1",140,0)
 . . S IP=$$ADDRESS^XLFNSLK(ADD)
"RTN","XUSBSE1",141,0)
 . . Q
"RTN","XUSBSE1",142,0)
 . ;Mail Domain
"RTN","XUSBSE1",143,0)
 . S ADD=XUSBSE("DILIST","ID",I,.03) I $L(ADD) D  Q:IP'=""
"RTN","XUSBSE1",144,0)
 . . I ADD?1.3N1"."1.3N1"."1.3N1"."1.3N S IP=ADD Q
"RTN","XUSBSE1",145,0)
 . . S IP=$$ADDRESS^XLFNSLK("VISTA."_ADD) S:IP="" IP=$$ADDRESS^XLFNSLK(ADD)
"RTN","XUSBSE1",146,0)
 . . Q
"RTN","XUSBSE1",147,0)
 I IP="" S IP=$$WEBADDRS(L)
"RTN","XUSBSE1",148,0)
 Q IP
"RTN","XUSBSE1",149,0)
 ;
"RTN","XUSBSE1",150,0)
WEBADDRS(STNNUM) ;
"RTN","XUSBSE1",151,0)
 N IP,URL,XUSBSE,RESULTS,I,X
"RTN","XUSBSE1",152,0)
 D FIND^DIC(2005.2,,"1","MO","VISTASITESERVICE",,,,,"XUSBSE")
"RTN","XUSBSE1",153,0)
 S URL=$G(XUSBSE("DILIST","ID",1,1))
"RTN","XUSBSE1",154,0)
 D EN1^XUSBSE2(URL_"/getSite?siteID="_STNNUM,.RESULTS)
"RTN","XUSBSE1",155,0)
 S X="" F I=1:1 Q:'$D(RESULTS(I))  I RESULTS(I)["hostname>" S X=$P($P(RESULTS(I),"<hostname>",2),"</hostname>") Q
"RTN","XUSBSE1",156,0)
 Q X
"RTN","XUSBSE1",157,0)
 ;
"RTN","XUSBSE1",158,0)
 ; SETUP - setup user as visitor, add context option
"RTN","XUSBSE1",159,0)
 ; return value = internal entry number for user, or 0
"RTN","XUSBSE1",160,0)
 ;   input XUDEMOG  - string of demographic characteristics
"RTN","XUSBSE1",161,0)
 ;   input XUCONTXT - context option to be given to user
"RTN","XUSBSE1",162,0)
SETUP(XUDEMOG,XUCONTXT) ;
"RTN","XUSBSE1",163,0)
 I '$$PUT^XUESSO1(XUDEMOG) Q 0
"RTN","XUSBSE1",164,0)
 I $G(DUZ)'>0 Q 0
"RTN","XUSBSE1",165,0)
 D SETCNTXT(XUCONTXT)
"RTN","XUSBSE1",166,0)
 Q DUZ
"RTN","XUSBSE1",167,0)
 ;
"RTN","XUSBSE1",168,0)
SETCNTXT(XOPT) ;
"RTN","XUSBSE1",169,0)
 N OPT,XUCONTXT
"RTN","XUSBSE1",170,0)
 S XUCONTXT="`"_XOPT
"RTN","XUSBSE1",171,0)
 I $$FIND1^DIC(19,"","X",XUCONTXT)'>0 Q  ; context option not in option file
"RTN","XUSBSE1",172,0)
 ;Have to use $D because of screen in 200.03 keeps FIND1^DIC from working.
"RTN","XUSBSE1",173,0)
 I '$D(^VA(200,DUZ,203,"B",XOPT)) D
"RTN","XUSBSE1",174,0)
 . ; Have to give the user a delegated option
"RTN","XUSBSE1",175,0)
 . N XARR S XARR(200.19,"+1,"_DUZ_",",.01)=XUCONTXT
"RTN","XUSBSE1",176,0)
 . D UPDATE^DIE("E","XARR")
"RTN","XUSBSE1",177,0)
 . ; And now she can give himself the context option
"RTN","XUSBSE1",178,0)
 . K XARR S XARR(200.03,"+1,"_DUZ_",",.01)=XUCONTXT
"RTN","XUSBSE1",179,0)
 . D UPDATE^DIE("E","XARR") ; Give context option as a secondary menu item
"RTN","XUSBSE1",180,0)
 . S ^XUTL("XQ",$J,"DUZ(BSE)")=XUCONTXT
"RTN","XUSBSE1",181,0)
 . ; But now we have to remove the delegated option
"RTN","XUSBSE1",182,0)
 . S OPT=$$FIND1^DIC(200.19,","_DUZ_",","X",XUCONTXT)
"RTN","XUSBSE1",183,0)
 . I OPT>0 D
"RTN","XUSBSE1",184,0)
 . . K XARR S XARR(200.19,(OPT_","_DUZ_","),.01)="@"
"RTN","XUSBSE1",185,0)
 . . D FILE^DIE("E","XARR")
"RTN","XUSBSE1",186,0)
 . . Q
"RTN","XUSBSE1",187,0)
 . Q
"RTN","XUSBSE1",188,0)
 Q
"RTN","XUSBSE1",189,0)
 ;
"RTN","XUSBSE2")
0^2^B17916276^B10222984
"RTN","XUSBSE2",1,0)
XUSBSE2 ;FO-OAK/JLI-CONNECT WITH HTTP SERVER AND GET REPLY ;04/29/09  12:47
"RTN","XUSBSE2",2,0)
 ;;8.0;KERNEL;**404,439,523**;Jul 10, 1995;Build 16
"RTN","XUSBSE2",3,0)
 Q
"RTN","XUSBSE2",4,0)
 ;
"RTN","XUSBSE2",5,0)
 ; Original version, returns only first line after headers
"RTN","XUSBSE2",6,0)
POST(SERVER,PORT,PAGE,DATA) ;
"RTN","XUSBSE2",7,0)
 N RESULTS
"RTN","XUSBSE2",8,0)
 Q $$ENTRY1(.RESULTS,SERVER,$G(PORT),$G(PAGE),"POST",$G(DATA))
"RTN","XUSBSE2",9,0)
 ;
"RTN","XUSBSE2",10,0)
 ; updated, returns entire conversation
"RTN","XUSBSE2",11,0)
POST1(RESULTS,SERVER,PORT,PAGE,DATA) ;
"RTN","XUSBSE2",12,0)
 Q $$ENTRY1(.RESULTS,SERVER,$G(PORT),$G(PAGE),"POST",$G(DATA))
"RTN","XUSBSE2",13,0)
 ;
"RTN","XUSBSE2",14,0)
GET(SERVER,PORT,PAGE) ;
"RTN","XUSBSE2",15,0)
 N RESULTS
"RTN","XUSBSE2",16,0)
 Q $$ENTRY1(.RESULTS,SERVER,$G(PORT),$G(PAGE),"GET")
"RTN","XUSBSE2",17,0)
 ;
"RTN","XUSBSE2",18,0)
GET1(RESULTS,SERVER,PORT,PAGE) ;
"RTN","XUSBSE2",19,0)
 Q $$ENTRY1(.RESULTS,SERVER,$G(PORT),$G(PAGE),"GET")
"RTN","XUSBSE2",20,0)
 ;
"RTN","XUSBSE2",21,0)
ENTRY(SERVER,PORT,PAGE,HTTPTYPE,DATA) ;
"RTN","XUSBSE2",22,0)
 N RESULTS
"RTN","XUSBSE2",23,0)
 S HTTPTYPE=$G(HTTPTYPE,"GET")
"RTN","XUSBSE2",24,0)
 Q $$ENTRY1(.RESULTS,SERVER,$G(PORT),$G(PAGE),HTTPTYPE,$G(DATA))
"RTN","XUSBSE2",25,0)
 ;
"RTN","XUSBSE2",26,0)
ENTRY1(RESULTS,SERVER,PORT,PAGE,HTTPTYPE,DATA) ;
"RTN","XUSBSE2",27,0)
 N DONE,XVALUE,XWBICNT,XWBRBUF,XWBSBUF,XWBTDEV,I
"RTN","XUSBSE2",28,0)
 N XWBDEBUG,XWBOS,XWBT,XWBTIME,POP,RESLTCNT,LINEBUF,OVERFLOW
"RTN","XUSBSE2",29,0)
 N $ESTACK,$ETRAP S $ETRAP="D TRAP^XUSBSE2"
"RTN","XUSBSE2",30,0)
 K RESULTS
"RTN","XUSBSE2",31,0)
 S PAGE=$G(PAGE,"/") I PAGE="" S PAGE="/"
"RTN","XUSBSE2",32,0)
 S HTTPTYPE=$G(HTTPTYPE,"GET")
"RTN","XUSBSE2",33,0)
 S DATA=$G(DATA),PORT=$G(PORT,80)
"RTN","XUSBSE2",34,0)
 D SAVDEV^%ZISUTL("XUSBSE") ;S IO(0)=$P
"RTN","XUSBSE2",35,0)
 D INIT^XWBTCPM
"RTN","XUSBSE2",36,0)
 D OPEN^XWBTCPM2(SERVER,PORT)
"RTN","XUSBSE2",37,0)
 I POP Q "DIDN'T OPEN CONNECTION"
"RTN","XUSBSE2",38,0)
 S XWBSBUF=""
"RTN","XUSBSE2",39,0)
 U XWBTDEV
"RTN","XUSBSE2",40,0)
 D WRITE^XWBRW(HTTPTYPE_" "_PAGE_" HTTP/1.0"_$C(13,10))
"RTN","XUSBSE2",41,0)
 I HTTPTYPE="POST" D
"RTN","XUSBSE2",42,0)
 . D WRITE^XWBRW("Referer: http://"_$$KSP^XUPARAM("WHERE")_$C(13,10))
"RTN","XUSBSE2",43,0)
 . D WRITE^XWBRW("Content-Type: application/x-www-form-urlencoded"_$C(13,10))
"RTN","XUSBSE2",44,0)
 . D WRITE^XWBRW("Cache-Control: no-cache"_$C(13,10))
"RTN","XUSBSE2",45,0)
 . D WRITE^XWBRW("Content-Length: "_$L(DATA)_$C(13,10,13,10))
"RTN","XUSBSE2",46,0)
 . D WRITE^XWBRW(DATA)
"RTN","XUSBSE2",47,0)
 D WRITE^XWBRW($C(13,10))
"RTN","XUSBSE2",48,0)
 D WBF^XWBRW
"RTN","XUSBSE2",49,0)
 S XWBRBUF="",DONE=0,XWBICNT=0
"RTN","XUSBSE2",50,0)
 S OVERFLOW=""
"RTN","XUSBSE2",51,0)
 S XVALUE=$$DREAD($C(13,10)) I $G(RESULTS(1))'[200 S XVALUE=$P($G(RESULTS(1))," ",2,5)
"RTN","XUSBSE2",52,0)
 D CLOSE ;I IO="|TCP|80" U IO D ^%ZISC
"RTN","XUSBSE2",53,0)
 I LINEBUF'="" S RESLTCNT=RESLTCNT+1,RESULTS(RESLTCNT)=LINEBUF
"RTN","XUSBSE2",54,0)
 I $G(RESULTS(1))[200 F I=1:1 I RESULTS(I)="" S XVALUE=$G(RESULTS(I+1)) Q
"RTN","XUSBSE2",55,0)
 Q XVALUE
"RTN","XUSBSE2",56,0)
 ;
"RTN","XUSBSE2",57,0)
CLOSE ;
"RTN","XUSBSE2",58,0)
 D CLOSE^%ZISTCP,GETDEV^%ZISUTL("XUSBSE") I $L(IO) U IO
"RTN","XUSBSE2",59,0)
 Q
"RTN","XUSBSE2",60,0)
 ;
"RTN","XUSBSE2",61,0)
DREAD(D,TO) ;Delimiter Read
"RTN","XUSBSE2",62,0)
 N R,S,DONE,C,L
"RTN","XUSBSE2",63,0)
 ; ZEXCEPT: LINEBUF,OVERFLOW,RESLTCNT,RESULTS,XWBRBUF - NEWed and set in ENTRY
"RTN","XUSBSE2",64,0)
 ; ZEXCEPT: XWBDEBUG,XWBTDEV,XWBTIME - XWB global variables
"RTN","XUSBSE2",65,0)
 N $ES,$ET S $ET="S DONE=1,$EC="""" Q"
"RTN","XUSBSE2",66,0)
 S R="",DONE=0,D=$G(D,$C(13)),C=0
"RTN","XUSBSE2",67,0)
 S TO=$S($G(TO)>0:TO,$G(XWBTIME(1))>0:XWBTIME(1),1:60)/2+1
"RTN","XUSBSE2",68,0)
 U XWBTDEV
"RTN","XUSBSE2",69,0)
 F  D  Q:DONE
"RTN","XUSBSE2",70,0)
 . S L=$F(XWBRBUF,D),L=$S(L>0:L,1:$L(XWBRBUF)+1),R=R_$E(XWBRBUF,1,L-1),XWBRBUF=$E(XWBRBUF,L,32000)
"RTN","XUSBSE2",71,0)
 . ; I (R[D)!(C>TO) S DONE=1 Q
"RTN","XUSBSE2",72,0)
 . I C>TO S DONE=1 Q
"RTN","XUSBSE2",73,0)
 . R XWBRBUF:2 S:'$T C=C+1 S:$L(XWBRBUF) C=0
"RTN","XUSBSE2",74,0)
 . S LINEBUF=OVERFLOW_XWBRBUF F  S L=$F(LINEBUF,D) Q:'L  S RESLTCNT=$G(RESLTCNT)+1,RESULTS(RESLTCNT)=$E(LINEBUF,1,L-3),LINEBUF=$E(LINEBUF,L,32000)
"RTN","XUSBSE2",75,0)
 . S OVERFLOW=LINEBUF
"RTN","XUSBSE2",76,0)
 . I $G(XWBDEBUG)>2,$L(XWBRBUF) D LOG^XWBDLOG($E("rd ("_$L(XWBRBUF)_"): "_XWBRBUF,1,255))
"RTN","XUSBSE2",77,0)
 . Q
"RTN","XUSBSE2",78,0)
 Q R
"RTN","XUSBSE2",79,0)
 ;
"RTN","XUSBSE2",80,0)
TRAP ;
"RTN","XUSBSE2",81,0)
 I '(($EC["READ")!($EC["WRITE")) D ^%ZTER
"RTN","XUSBSE2",82,0)
 D CLOSE,LOG^XWBDLOG("Error: "_$$EC^%ZOSV):$G(XWBDEBUG),UNWIND^%ZTER
"RTN","XUSBSE2",83,0)
 Q
"RTN","XUSBSE2",84,0)
 ;
"RTN","XUSBSE2",85,0)
EN(ADDRESS) ;  test with input address or 10.161.12.182 if none entered
"RTN","XUSBSE2",86,0)
 N RESULTS
"RTN","XUSBSE2",87,0)
 D EN1(ADDRESS,.RESULTS)
"RTN","XUSBSE2",88,0)
 Q
"RTN","XUSBSE2",89,0)
 ;
"RTN","XUSBSE2",90,0)
EN1(ADDRESS,RESULTS,NOHEADERS) ;
"RTN","XUSBSE2",91,0)
 N VALUE,PAGE,SERVER,PORT
"RTN","XUSBSE2",92,0)
 S NOHEADERS=$G(NOHEADERS,1)
"RTN","XUSBSE2",93,0)
 S PAGE="/",SERVER=ADDRESS,PORT=80
"RTN","XUSBSE2",94,0)
 I SERVER["/" D
"RTN","XUSBSE2",95,0)
 . I SERVER["//" S SERVER=$P(SERVER,"//",2)
"RTN","XUSBSE2",96,0)
 . I SERVER["/" S PAGE="/"_$P(SERVER,"/",2,99),SERVER=$P(SERVER,"/")
"RTN","XUSBSE2",97,0)
 . I SERVER[":" S PORT=$P(SERVER,":",2),SERVER=$P(SERVER,":")
"RTN","XUSBSE2",98,0)
 . Q
"RTN","XUSBSE2",99,0)
 S VALUE=$$ENTRY1(.RESULTS,SERVER,PORT,PAGE)
"RTN","XUSBSE2",100,0)
 D HOME^%ZIS ;I IO="|TCP|80" U IO D ^%ZISC
"RTN","XUSBSE2",101,0)
 ; if NOHEADERS selected (default) remove the headers and first blank line
"RTN","XUSBSE2",102,0)
 I NOHEADERS D
"RTN","XUSBSE2",103,0)
 . N I,J,X
"RTN","XUSBSE2",104,0)
 . ; remove header lines and first blank line
"RTN","XUSBSE2",105,0)
 . F I=1:1 Q:'$D(RESULTS(I))  S X=(RESULTS(I)="") K:'X RESULTS(I) I X K RESULTS(I) Q
"RTN","XUSBSE2",106,0)
 . ; move lines down to start at 1 again
"RTN","XUSBSE2",107,0)
 . S J=I,I=0 F  S J=J+1,I=I+1 Q:'$D(RESULTS(J))  S RESULTS(I)=RESULTS(J) K RESULTS(J)
"RTN","XUSBSE2",108,0)
 . Q
"RTN","XUSBSE2",109,0)
 Q
"RTN","XUSBSE2",110,0)
 ;
"RTN","XUSRB")
0^4^B33401626^B30600707
"RTN","XUSRB",1,0)
XUSRB ;ISCSF/RWF - Request Broker ;02/03/10  16:07
"RTN","XUSRB",2,0)
 ;;8.0;KERNEL;**11,16,28,32,59,70,82,109,115,165,150,180,213,234,238,265,337,395,404,437,523**;Jul 10, 1995;Build 16
"RTN","XUSRB",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified
"RTN","XUSRB",4,0)
 Q  ;No entry from top
"RTN","XUSRB",5,0)
 ;
"RTN","XUSRB",6,0)
 ;RPC BROKER calls, First parameter is always call-by-reference
"RTN","XUSRB",7,0)
VALIDAV(RET,AVCODE) ;Check a users access
"RTN","XUSRB",8,0)
 ;Return R(0)=DUZ, R(1)=(0=OK, 1,2...=Can't sign-on for some reason)
"RTN","XUSRB",9,0)
 ; R(2)=verify needs changing, R(3)=Message, R(4)=0, R(5)=msg cnt, R(5+n)
"RTN","XUSRB",10,0)
 ; R(R(5)+6)=# div user must select from, R(R(5)+6+n)=div
"RTN","XUSRB",11,0)
 ;
"RTN","XUSRB",12,0)
 N X,XUSER,XUNOW,XUDEV,XUM,XUMSG,%1,VCCH K DUZ
"RTN","XUSRB",13,0)
 S U="^",RET(0)=0,RET(5)=0,XUF=$G(XUF,0),XUM=0,XUMSG=0,XUDEV=0
"RTN","XUSRB",14,0)
 S DUZ=0,DUZ(0)="",VCCH=0 D NOW
"RTN","XUSRB",15,0)
 S XOPT=$$STATE^XWBSEC("XUS XOPT")
"RTN","XUSRB",16,0)
 S XUMSG=$$INHIBIT() I XUMSG S XUM=1 G VAX ;Logon inhibited
"RTN","XUSRB",17,0)
 ;3 Strikes
"RTN","XUSRB",18,0)
 I $$LKCHECK^XUSTZIP($G(IO("IP"))) S XUMSG=7 G VAX ;IP locked
"RTN","XUSRB",19,0)
 ;Check type of sign-on code
"RTN","XUSRB",20,0)
 I $L(AVCODE) D
"RTN","XUSRB",21,0)
 . I $E(AVCODE,1,2)="~1" S DUZ=$$CHKASH^XUSRB4(AVCODE) Q
"RTN","XUSRB",22,0)
 . I $E(AVCODE,1,2)="~2" S DUZ=$$CHKCCOW^XUSRB4(AVCODE) Q
"RTN","XUSRB",23,0)
 . S DUZ=$$CHECKAV^XUS($$DECRYP^XUSRB1(AVCODE))
"RTN","XUSRB",24,0)
 . Q
"RTN","XUSRB",25,0)
 I DUZ'>0,$$FAIL^XUS3 D  G VAX
"RTN","XUSRB",26,0)
 . S XUM=1,XUMSG=7,X=$$RA^XUSTZ H 5 ;3 Strikes
"RTN","XUSRB",27,0)
 S XUMSG=$$UVALID^XUS() G:XUMSG VAX ;Check User
"RTN","XUSRB",28,0)
 S VCCH=$$VCVALID() ;Check VC
"RTN","XUSRB",29,0)
 I DUZ>0 S XUMSG=$$POST(1)
"RTN","XUSRB",30,0)
 I XUMSG>0 S DUZ=0,VCCH=0 ;If can't sign-on, don't tell need to change VC
"RTN","XUSRB",31,0)
 I 'XUMSG,VCCH S XUMSG=12 D SET^XWBSEC("XUS DUZ",DUZ) ;Need to change VC
"RTN","XUSRB",32,0)
VAX S:XUMSG>0 DUZ=0 ;Can't sign-on, Clear DUZ.
"RTN","XUSRB",33,0)
 D:DUZ>0 POST2
"RTN","XUSRB",34,0)
 S RET(0)=DUZ,RET(1)=XUM,RET(2)=VCCH,RET(3)=$S(XUMSG:$$TXT^XUS3(XUMSG),1:""),RET(4)=0
"RTN","XUSRB",35,0)
 K DUZ("CCOW")
"RTN","XUSRB",36,0)
 Q
"RTN","XUSRB",37,0)
 ;
"RTN","XUSRB",38,0)
NOW S U="^",XUNOW=$$NOW^XLFDT(),DT=$P(XUNOW,".")
"RTN","XUSRB",39,0)
 Q
"RTN","XUSRB",40,0)
 ;
"RTN","XUSRB",41,0)
INTRO(RET) ;Return INTRO TEXT.
"RTN","XUSRB",42,0)
 D INTRO^XUS1A("RET")
"RTN","XUSRB",43,0)
 Q
"RTN","XUSRB",44,0)
 ;
"RTN","XUSRB",45,0)
VCVALID() ;Return 1 if the Verify code needs changing.
"RTN","XUSRB",46,0)
 Q:'$G(DUZ) 1
"RTN","XUSRB",47,0)
 Q:$P($G(^VA(200,DUZ,.1)),U,2)="" 1 ;VC is empty
"RTN","XUSRB",48,0)
 Q:$P(^VA(200,DUZ,0),U,8)=1 0 ;VC never expires
"RTN","XUSRB",49,0)
 N XUSER D USER^XUS(DUZ)
"RTN","XUSRB",50,0)
 Q $$VCHG^XUS1
"RTN","XUSRB",51,0)
 ;
"RTN","XUSRB",52,0)
CVC(RET,XU1) ;change VC, Return 0 = success
"RTN","XUSRB",53,0)
 N XU2,XU3,XU4 S DUZ=$G(DUZ),RET(0)=99,XU4=$$STATE^XWBSEC("XUS DUZ") S:(DUZ=0)&(XU4>0) DUZ=XU4 Q:DUZ'>0
"RTN","XUSRB",54,0)
 S U="^",XU2=$P(XU1,U,2),XU3=$P(XU1,U,3),XU1=$P(XU1,U)
"RTN","XUSRB",55,0)
 S XU1=$$DECRYP^XUSRB1(XU1),XU2=$$DECRYP^XUSRB1(XU2),XU3=$$DECRYP^XUSRB1(XU3)
"RTN","XUSRB",56,0)
 S XU3=$$BRCVC^XUS2(XU1,XU2),RET(0)=+XU3,RET(1)=$P(XU3,U,2,9)
"RTN","XUSRB",57,0)
 I XU3>0 S DUZ=0 ;Clean-up if not changed.
"RTN","XUSRB",58,0)
 I 'XU3,XU4 D KILL^XWBSEC("XUS DUZ"),POST2
"RTN","XUSRB",59,0)
 Q
"RTN","XUSRB",60,0)
 ;
"RTN","XUSRB",61,0)
SHOWPOST() ;EF. Check if should send the POST SIGN-ON msg.
"RTN","XUSRB",62,0)
 Q +$P($G(^XTV(8989.3,1,"XWB")),"^",2)
"RTN","XUSRB",63,0)
 ;
"RTN","XUSRB",64,0)
POST(CVC) ;Finish setup partition, I CVC don't log yet
"RTN","XUSRB",65,0)
 N X,XUM,XUDIV S:$D(IO)[0 IO=$I S IO(0)=IO
"RTN","XUSRB",66,0)
 K ^UTILITY($J),^TMP($J)
"RTN","XUSRB",67,0)
 I '$D(XUSER(0)),DUZ D USER^XUS(DUZ)
"RTN","XUSRB",68,0)
 S XUM=$$USER^XUS1A Q:XUM>0 XUM ;User can't sign on for some reason.
"RTN","XUSRB",69,0)
 S RET(5)=0 ;The next line sends the post sign-on msg
"RTN","XUSRB",70,0)
 F %=1:1 Q:'$D(XUTEXT(%))  S RET(5+%)=$E(XUTEXT(%),2,256),RET(5)=%
"RTN","XUSRB",71,0)
 I '$$SHOWPOST S RET(5)=0 ;This line stops the sending/display of the msg.
"RTN","XUSRB",72,0)
 D:'$G(CVC) POST2
"RTN","XUSRB",73,0)
 Q 0
"RTN","XUSRB",74,0)
 ;
"RTN","XUSRB",75,0)
POST2 ;Finish User Setup for silent log-on
"RTN","XUSRB",76,0)
 D:'$D(XUNOW) NOW
"RTN","XUSRB",77,0)
 D DUZ^XUS1A,SAVE^XUS1,LOG^XUS1,ABT^XQ12
"RTN","XUSRB",78,0)
 D KILL^XWBSEC("XUS XOPT"),CLRFAC^XUS3($G(IO("IP"))) ;p265
"RTN","XUSRB",79,0)
 D SETTIME^XWBTCPM() ;Set normal Broker time-out
"RTN","XUSRB",80,0)
 S DTIME=$$DTIME^XUP(DUZ) ;See DTIME set for user
"RTN","XUSRB",81,0)
 K:$G(XWBVER)<1.106 XQY,XQY0 ;Delete the sign-on context.
"RTN","XUSRB",82,0)
 K XUTEXT,XOPT,XUEON,XUEOFF,XUTT,XUDEV,XUSER
"RTN","XUSRB",83,0)
 Q
"RTN","XUSRB",84,0)
 ;
"RTN","XUSRB",85,0)
INHIBIT() ;Is Logon to this system Inhibited?
"RTN","XUSRB",86,0)
 I $$INHIB1() Q 1
"RTN","XUSRB",87,0)
 I $$INHIB2() Q 2
"RTN","XUSRB",88,0)
 Q 0
"RTN","XUSRB",89,0)
 ;
"RTN","XUSRB",90,0)
INHIB1() ;The LOGON check
"RTN","XUSRB",91,0)
 I $G(^%ZIS(14.5,"LOGON",XQVOL)) Q 1
"RTN","XUSRB",92,0)
 Q 0
"RTN","XUSRB",93,0)
 ;
"RTN","XUSRB",94,0)
INHIB2() ;The Max User Check
"RTN","XUSRB",95,0)
 I $D(^%ZOSF("ACTJ")) X ^("ACTJ") I $P(XUVOL,U,3),($P(XUVOL,U,3)'>Y) Q 2
"RTN","XUSRB",96,0)
 Q 0
"RTN","XUSRB",97,0)
 ;
"RTN","XUSRB",98,0)
LOGOUT ;Finish logout of user.
"RTN","XUSRB",99,0)
 N XU1
"RTN","XUSRB",100,0)
 D CLEARALL^XWBDRPC(.XU1)
"RTN","XUSRB",101,0)
 ;Remove CCOW sign-on data
"RTN","XUSRB",102,0)
 S HDL=$G(^XUTL("XQ",$J,"HDL")) I $L(HDL) D
"RTN","XUSRB",103,0)
 . K ^XTMP(HDL,"JOB",$J)
"RTN","XUSRB",104,0)
 . I $O(^XTMP(HDL,"JOB",0))="" K ^XTMP(HDL)
"RTN","XUSRB",105,0)
 ;
"RTN","XUSRB",106,0)
 D BYE^XUSCLEAN,XUTL^XUSCLEAN ;Mark the sign-on log, File cleanup.
"RTN","XUSRB",107,0)
 Q
"RTN","XUSRB",108,0)
 ;D1,D2 are place holders for now
"RTN","XUSRB",109,0)
SETUP(RET,XWBUSRNM,ASOSKIP,D2) ;sets up environment for GUI signon
"RTN","XUSRB",110,0)
 N X1 K DUZ
"RTN","XUSRB",111,0)
 S XWBUSRNM=$G(XWBUSRNM),ASOSKIP=$G(ASOSKIP)
"RTN","XUSRB",112,0)
 I $L($G(XWBTIP)) S IO("IP")=XWBTIP
"RTN","XUSRB",113,0)
 S IO("CLNM")=$$LOW^XLFSTR($G(XWBCLMAN)) D ZIO^%ZIS4
"RTN","XUSRB",114,0)
 ;Setup needed variables
"RTN","XUSRB",115,0)
 D SET1^XUS(0),SET^XWBSEC("XUS XOPT",XOPT) ;p265
"RTN","XUSRB",116,0)
 ;I '$D(IO("HOME")) S %ZIS="0H",IOP="NULL" D ^%ZIS ;Setup NULL as the home device
"RTN","XUSRB",117,0)
 D SAVE^XUS1 ;save the home device
"RTN","XUSRB",118,0)
 ;0=server name, 1=volume, 2=uci, 3=device, 4=# attempts, 5=skip signon-screen,6=Domain Name, 7=Production (0=no, 1=Yes)
"RTN","XUSRB",119,0)
 S RET(0)=$P(XUENV,U,3),RET(1)=$P(XUVOL,U),RET(2)=XUCI
"RTN","XUSRB",120,0)
 S RET(3)=$I,RET(4)=$P(XOPT,U,2),RET(5)=0
"RTN","XUSRB",121,0)
 S RET(6)=$G(^XMB("NETNAME")) ;DBIA #1131
"RTN","XUSRB",122,0)
 S RET(7)=$$PROD^XUPROD ;Tell if production.
"RTN","XUSRB",123,0)
 S X1=$$INHIBIT() I X1 S XWBERR=$S(X1=1:"Logons Inhibited",1:"Max Users") Q  ;p523
"RTN","XUSRB",124,0)
 ; Code for DBA Capri Type Program
"RTN","XUSRB",125,0)
 I (+XWBUSRNM<-30),$$CHKUSER^XUSBSE1(XWBUSRNM) S RET(5)=1 D POST2 Q  ;p523 BSE CHANGE
"RTN","XUSRB",126,0)
 ; End of Code for DBA Capri Program
"RTN","XUSRB",127,0)
 ;Auto sign-on check only for Broker v1.1
"RTN","XUSRB",128,0)
 I $G(ASOSKIP) S XQXFLG("ASO")=1 ;Skip the ASO check, Not for VISITORS p523
"RTN","XUSRB",129,0)
 I $G(XWBVER)<1.1 S XQXFLG("ZEBRA")=-1 ;Disable for v1.0
"RTN","XUSRB",130,0)
 I $L(IO("CLNM")),'$G(DUZ) S DUZ=$$AUTOXWB^XUS1B() ;Only check when 1.1 CL.
"RTN","XUSRB",131,0)
 I $G(DUZ)>0 D  ;p523
"RTN","XUSRB",132,0)
 . I '$D(XUSER(0)),DUZ D USER^XUS(DUZ)
"RTN","XUSRB",133,0)
 . N %T S %T=$$USER^XUS1A I %T S DUZ=0 Q
"RTN","XUSRB",134,0)
 . D NOW,POST2 S RET(5)=1
"RTN","XUSRB",135,0)
 Q
"RTN","XUSRB",136,0)
 ;
"RTN","XUSRB",137,0)
OWNSKEY(RET,LIST,IEN) ;Does user have Key
"RTN","XUSRB",138,0)
 N I,K S I=""
"RTN","XUSRB",139,0)
 I $G(IEN)'>0 S IEN=$G(DUZ)
"RTN","XUSRB",140,0)
 I $G(IEN)'>0 S RET(0)=0 Q
"RTN","XUSRB",141,0)
 I $O(LIST(""))="" S RET(0)=$$KCHK(LIST,IEN) Q
"RTN","XUSRB",142,0)
 F  S I=$O(LIST(I)) Q:I=""  S RET(I)=$$KCHK(LIST(I),IEN)
"RTN","XUSRB",143,0)
 Q
"RTN","XUSRB",144,0)
 ;
"RTN","XUSRB",145,0)
KCHK(%,IEN) ;Key Check
"RTN","XUSRB",146,0)
 S:$G(IEN)'>0 IEN=$G(DUZ) Q $S($G(IEN)>0:$D(^XUSEC(%,IEN)),1:0)
"RTN","XUSRB",147,0)
 ;
"RTN","XUSRB",148,0)
ALLKEYS(RET,IEN,FLG) ;Return ALL or most KEYS that a user has.
"RTN","XUSRB",149,0)
 N I,J,K,L K ^TMP("XU",$J)
"RTN","XUSRB",150,0)
 S RET=$NA(^TMP("XU",$J))
"RTN","XUSRB",151,0)
 S:'$D(IEN) IEN=DUZ I IEN'>0 S @RET@(0)=-1 Q
"RTN","XUSRB",152,0)
 S I=0,L=0
"RTN","XUSRB",153,0)
 F  S I=$O(^VA(200,IEN,51,I)) Q:I'>0  S K=$G(^DIC(19.1,I,0)) D
"RTN","XUSRB",154,0)
 . Q:'$P(K,U,5)  ;Check 'Send to J2EE' field.
"RTN","XUSRB",155,0)
 . S L=L+1,@RET@(L,0)=$P(K,U,1)
"RTN","XUSRB",156,0)
 . Q
"RTN","XUSRB",157,0)
 Q
"RTN","XUSRB",158,0)
 ;
"RTN","XUSRB",159,0)
AVHELP(RET) ; send access/verify code instructions.
"RTN","XUSRB",160,0)
 S RET(0)=$$AVHLPTXT^XUS2()
"RTN","XUSRB",161,0)
 Q
"RTN","XUSRB",162,0)
 ;
"RTN","XUSRB",163,0)
OPTACCES(RET,USER,OPTIONS,MODE) ;Checks or sets user's access for passed in options
"RTN","XUSRB",164,0)
 S MODE="CHECK" ;only CHECK mode supported for now
"RTN","XUSRB",165,0)
 N I S I=""
"RTN","XUSRB",166,0)
 I $G(USER)'>0 S RET(0)=0 Q
"RTN","XUSRB",167,0)
 F  S I=$O(OPTIONS(I)) Q:I=""  S RET(I)=$$CHK^XQCS(USER,OPTIONS(I))=1
"RTN","XUSRB",168,0)
 Q
"RTN","XUSRB",169,0)
 ;
"RTN","XUSRB",170,0)
CHECKAV(AVC) ;SR. EF. to check an A/V code, Separate w/ ";", return IEN or 0
"RTN","XUSRB",171,0)
 N XUF,XUSER S XUF=0,U="^"
"RTN","XUSRB",172,0)
 Q $$CHECKAV^XUS(AVC)
"RTN","XUSRB4")
0^3^B16820466^B15887142
"RTN","XUSRB4",1,0)
XUSRB4 ;ISF/RWF - Build a temporary sign-on token ;01/06/10  09:26
"RTN","XUSRB4",2,0)
 ;;8.0;KERNEL;**150,337,395,419,437,499,523**;Jul 10, 1995;Build 16
"RTN","XUSRB4",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified
"RTN","XUSRB4",4,0)
 Q
"RTN","XUSRB4",5,0)
 ;
"RTN","XUSRB4",6,0)
ASH(RET) ;rpc. Auto Signon Handle
"RTN","XUSRB4",7,0)
 N HDL
"RTN","XUSRB4",8,0)
 S HDL=$$HANDLE("XWBAS",1),RET="~1"_HDL
"RTN","XUSRB4",9,0)
 ;Now place user info in it.
"RTN","XUSRB4",10,0)
 D TOK(HDL)
"RTN","XUSRB4",11,0)
 Q
"RTN","XUSRB4",12,0)
 ;
"RTN","XUSRB4",13,0)
CCOW(RET) ;rpc. CCOW Auto Signon Handle
"RTN","XUSRB4",14,0)
 N HDL,HDL2,X
"RTN","XUSRB4",15,0)
 S RET(0)="NO PROXY USER",RET(1)="ERROR"
"RTN","XUSRB4",16,0)
 I $$USERTYPE^XUSAP(DUZ,"APPLICATION PROXY") Q  ;No Proxy
"RTN","XUSRB4",17,0)
 I $$USERTYPE^XUSAP(DUZ,"CONNECTOR PROXY") Q  ;No Proxy
"RTN","XUSRB4",18,0)
 S X=$$ACTIVE^XUSER(DUZ) I 'X S RET(0)=X Q  ;User must be active
"RTN","XUSRB4",19,0)
 S HDL=$$HANDLE("XWBCCW",1)
"RTN","XUSRB4",20,0)
 ;Return RET(0) the CCOW token, RET(1) the domain name and the Station #
"RTN","XUSRB4",21,0)
 S RET(0)="~2"_$$LOW^XLFSTR(HDL),RET(1)=$G(^XMB("NETNAME"))_"^"_$$STA^XUAF4(DUZ(2))
"RTN","XUSRB4",22,0)
 ;Now place user info in it.
"RTN","XUSRB4",23,0)
 D TOK(HDL)
"RTN","XUSRB4",24,0)
 S ^XUTL("XQ",$J,"HDL")=HDL ;Save handle with job
"RTN","XUSRB4",25,0)
 Q
"RTN","XUSRB4",26,0)
 ;
"RTN","XUSRB4",27,0)
HANDLE(NS,LT) ;Return a unique handle into ^XTMP (ef. sup)
"RTN","XUSRB4",28,0)
 ;NS is the namespace, LT is the Handle Lifetime in days
"RTN","XUSRB4",29,0)
 N %H,A,J,HL
"RTN","XUSRB4",30,0)
 I $G(NS)="" Q "" ;Return null if no namespace
"RTN","XUSRB4",31,0)
 S LT=$G(LT,1) S:LT>7 LT=7 ;Default to 1
"RTN","XUSRB4",32,0)
 S %H=$H,J=NS_($J#2048)_"-"_(%H#7*86400+$P(%H,",",2))_"_",A=$R(10)
"RTN","XUSRB4",33,0)
 F  S HL=J_A,A=A+1 L +^XTMP(HL):1 I $T Q:'$D(^XTMP(HL))  L -^XTMP(HL)
"RTN","XUSRB4",34,0)
 S ^XTMP(HL,0)=$$HTFM^XLFDT(%H+LT)_"^"_$$DT^XLFDT()
"RTN","XUSRB4",35,0)
 ;L -^XTMP(HL) Leave the unLock to tha caller
"RTN","XUSRB4",36,0)
 Q HL
"RTN","XUSRB4",37,0)
 ;
"RTN","XUSRB4",38,0)
TOK(H) ;Store a Token
"RTN","XUSRB4",39,0)
 ;H is handle into XTMP
"RTN","XUSRB4",40,0)
 N J,T,R,%
"RTN","XUSRB4",41,0)
 S T=$$H3^%ZTM($H)
"RTN","XUSRB4",42,0)
 S R=$J_"|"_T_"|"_$G(DUZ)_"|"_H
"RTN","XUSRB4",43,0)
 S ^XTMP(H,"D",0)="|"_$$ENCRYP^XUSRB1(R)_"|"
"RTN","XUSRB4",44,0)
 S ^XTMP(H,"D2")=$G(DUZ(2))
"RTN","XUSRB4",45,0)
 S %=$G(IO("IP")) I $L(%),%'?1.3N1P1.3N1P1.3N1P1.3N S %=$P($$ADDRESS^XLFNSLK(%),",")
"RTN","XUSRB4",46,0)
 S ^XTMP(H,"D3")=%
"RTN","XUSRB4",47,0)
 S ^XTMP(H,"CLNM")=$G(IO("CLNM"))
"RTN","XUSRB4",48,0)
 S ^XTMP(H,"JOB",$J)=$G(IO("IP"))
"RTN","XUSRB4",49,0)
 S ^XTMP(H,"STATUS")="0^New",^("CNT")=0
"RTN","XUSRB4",50,0)
 L -^XTMP(H) ;Clear Lock
"RTN","XUSRB4",51,0)
 Q
"RTN","XUSRB4",52,0)
 ;
"RTN","XUSRB4",53,0)
REMOVE(HL) ;Remove (kill) a Handle. p523
"RTN","XUSRB4",54,0)
 I $L($G(HL)) K ^XTMP(HL)
"RTN","XUSRB4",55,0)
 Q
"RTN","XUSRB4",56,0)
 ;
"RTN","XUSRB4",57,0)
CHKASH(HL) ;rpc. Check a Auto Signon Handle
"RTN","XUSRB4",58,0)
 N HDL,RET,FDA,IEN S HDL=$E(HL,3,999)
"RTN","XUSRB4",59,0)
 S RET=$$CHECK(HDL)
"RTN","XUSRB4",60,0)
 I RET>0 D
"RTN","XUSRB4",61,0)
 . S DUZ("ASH")=1,IEN=DUZ_","
"RTN","XUSRB4",62,0)
 . I $$GET1^DIQ(200,IEN,7,"I") S FDA(200,DUZ_",",7)=0 D FILE^DIE("K","FDA") ;rwf 403
"RTN","XUSRB4",63,0)
 D REMOVE(HDL) ;Token only good for one try.
"RTN","XUSRB4",64,0)
 Q RET
"RTN","XUSRB4",65,0)
 ;
"RTN","XUSRB4",66,0)
CHKCCOW(HL) ;rpc. Check a CCOW Auto Signon Handle
"RTN","XUSRB4",67,0)
 N HDL,RET,T
"RTN","XUSRB4",68,0)
 S HDL=$$UP^XLFSTR($E(HL,3,999)),T=$P($G(^XTV(8989.3,1,30),5400),U)
"RTN","XUSRB4",69,0)
 S RET=$$CHECK(HDL,T)
"RTN","XUSRB4",70,0)
 I RET>0 D
"RTN","XUSRB4",71,0)
 . ;This CCOW Token good for more that one try.
"RTN","XUSRB4",72,0)
 . S ^XTMP(HDL,"JOB",$J)=$G(IO("IP"))
"RTN","XUSRB4",73,0)
 . S ^XTMP(HDL,"STATUS")=(^XTMP(HDL,"STATUS")+1)_"^Active"
"RTN","XUSRB4",74,0)
 . S ^XUTL("XQ",$J,"HDL")=HDL ;Save handle with job
"RTN","XUSRB4",75,0)
 . S DUZ("CCOW")=1 ;Flag a CCOW sign-on.
"RTN","XUSRB4",76,0)
 Q RET
"RTN","XUSRB4",77,0)
 ;
"RTN","XUSRB4",78,0)
CHECK(HL,TOUT) ;Check a Token
"RTN","XUSRB4",79,0)
 N %,J,D,L,M,S,T,CLNM
"RTN","XUSRB4",80,0)
 S S=$G(^XTMP(HL,0)) I '$L(S) Q "0^Bad Handle"
"RTN","XUSRB4",81,0)
 S S=$G(^XTMP(HL,"D",0)) I '$L(S) Q "0^Bad Handle" ;Now have real token
"RTN","XUSRB4",82,0)
 I $E(S)'="|" Q "0^Bad Token"
"RTN","XUSRB4",83,0)
 S S=$$DECRYP^XUSRB1($E(S,2,$L(S)-1)) I S="" Q "0^Bad Token"
"RTN","XUSRB4",84,0)
 S J=$P(S,"|"),T=$P(S,"|",2),D=$P(S,"|",3),M=$P(S,"|",4)
"RTN","XUSRB4",85,0)
 ;Check token time
"RTN","XUSRB4",86,0)
 S %=$$H3^%ZTM($H),TOUT=$G(TOUT,20)
"RTN","XUSRB4",87,0)
 I T+TOUT<% D REMOVE(HL) Q "0^Token Expired" ;Token good for TOUT or 20 seconds
"RTN","XUSRB4",88,0)
 ;Check job
"RTN","XUSRB4",89,0)
 ;Check that token has handle
"RTN","XUSRB4",90,0)
 I M'=HL Q "0^Bad Token"
"RTN","XUSRB4",91,0)
 ;Check User
"RTN","XUSRB4",92,0)
 I $G(^VA(200,D,0))="" Q "0^Bad User"
"RTN","XUSRB4",93,0)
 ;Do IP check
"RTN","XUSRB4",94,0)
 S %=$G(IO("IP")),T=0,CLNM=""
"RTN","XUSRB4",95,0)
 I $L(%),%'?1.3N1P1.3N1P1.3N1P1.3N S CLNM=%,%=$P($$ADDRESS^XLFNSLK(%),",")
"RTN","XUSRB4",96,0)
 S CLNM=$S($L($G(IO("CLNM"))):IO("CLNM"),$L(CLNM):CLNM,1:"") ;p499
"RTN","XUSRB4",97,0)
 I $L($G(^XTMP(HL,"D3"))),^XTMP(HL,"D3")=% S T=1
"RTN","XUSRB4",98,0)
 I 'T,$L(CLNM),$G(^XTMP(HL,"CLNM"))=IO("CLNM") S T=1
"RTN","XUSRB4",99,0)
 I 'T Q "0^Different IP" ;p499
"RTN","XUSRB4",100,0)
 I $D(^XTMP(HL,"D2")),D>0 S DUZ(2)=^XTMP(HL,"D2")
"RTN","XUSRB4",101,0)
 D USER^XUS(D)
"RTN","XUSRB4",102,0)
 Q D
"RTN","XUSRB4",103,0)
 ;
"RTN","XUSRB4",104,0)
 ;
"RTN","XUSRB4",105,0)
CCOWPC(RET) ;Return ap
"RTN","XUSRB4",106,0)
 N I,XU4
"RTN","XUSRB4",107,0)
 S RET(0)="" I '$$BROKER^XWBLIB Q
"RTN","XUSRB4",108,0)
 D GETLST^XPAR(.XU4,"SYS","XUS CCOW VAULT PARAM","Q")
"RTN","XUSRB4",109,0)
 F I=0,1 S RET(I)=$P($G(XU4(I+1)),"^",2,99)
"RTN","XUSRB4",110,0)
 Q
"RTN","XUSRB4",111,0)
 ;
"RTN","XUSRB4",112,0)
 ;p500
"RTN","XUSRB4",113,0)
CCOWIP(RET,CLIENTIP) ;rpc. CCOW Auto Signon Handle for middle tiered application servers
"RTN","XUSRB4",114,0)
 N %
"RTN","XUSRB4",115,0)
 S %=$G(IO("IP")) ; save original
"RTN","XUSRB4",116,0)
 ; get actual ip address instead of localhost address if possible
"RTN","XUSRB4",117,0)
 S IO("IP")=$S($G(CLIENTIP)="127.0.0.1":%,$G(CLIENTIP)="":%,1:$G(CLIENTIP))
"RTN","XUSRB4",118,0)
 D CCOW(.RET)
"RTN","XUSRB4",119,0)
 S IO("IP")=% ; revert to original
"RTN","XUSRB4",120,0)
 Q
"RTN","XUSRB4",121,0)
 ;
"SEC","^DIC",8994.5,8994.5,0,"AUDIT")
@
"SEC","^DIC",8994.5,8994.5,0,"DD")
@
"SEC","^DIC",8994.5,8994.5,0,"DEL")
@
"SEC","^DIC",8994.5,8994.5,0,"LAYGO")
@
"SEC","^DIC",8994.5,8994.5,0,"RD")
@
"SEC","^DIC",8994.5,8994.5,0,"WR")
@
"VER")
8.0^22.0
"^DD",3.081,3.081,18,0)
REMOTE APP^P8994.5'^XWB(8994.5,^0;18^Q
"^DD",3.081,3.081,18,.1)
Remote App
"^DD",3.081,3.081,18,21,0)
^^3^3^3091027^
"^DD",3.081,3.081,18,21,1,0)
If the user came into the system by a remote application like CAPRI
"^DD",3.081,3.081,18,21,2,0)
or VistAWeb then this will point to the entry in the remote application
"^DD",3.081,3.081,18,21,3,0)
file they used.
"^DD",3.081,3.081,18,"DT")
3091027
"^DD",8994.5,8994.5,0)
FIELD^^1^4
"^DD",8994.5,8994.5,0,"DDA")
N
"^DD",8994.5,8994.5,0,"DT")
3090409
"^DD",8994.5,8994.5,0,"IX","ACODE",8994.5,.03)

"^DD",8994.5,8994.5,0,"IX","B",8994.5,.01)

"^DD",8994.5,8994.5,0,"NM","REMOTE APPLICATION")

"^DD",8994.5,8994.5,0,"PT",3.081,18)

"^DD",8994.5,8994.5,0,"VRPK")
XU
"^DD",8994.5,8994.5,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",8994.5,8994.5,.01,1,0)
^.1
"^DD",8994.5,8994.5,.01,1,1,0)
8994.5^B
"^DD",8994.5,8994.5,.01,1,1,1)
S ^XWB(8994.5,"B",$E(X,1,30),DA)=""
"^DD",8994.5,8994.5,.01,1,1,2)
K ^XWB(8994.5,"B",$E(X,1,30),DA)
"^DD",8994.5,8994.5,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",8994.5,8994.5,.01,21,0)
^.001^2^2^3060328^^
"^DD",8994.5,8994.5,.01,21,1,0)
This is the NAME of the REMOTE GUI APPLICATION for which the data in this 
"^DD",8994.5,8994.5,.01,21,2,0)
entry pertains.
"^DD",8994.5,8994.5,.02,0)
CONTEXTOPTION^RP19'^DIC(19,^0;2^Q
"^DD",8994.5,8994.5,.02,3)
This is the option which should be given to the signed in visitor as the Context Option for this application.
"^DD",8994.5,8994.5,.02,21,0)
^^7^7^3060403^
"^DD",8994.5,8994.5,.02,21,1,0)
The name of the context (Client/Server or B-type) option that the 
"^DD",8994.5,8994.5,.02,21,2,0)
application users will need that will be added as a secondary menu item.
"^DD",8994.5,8994.5,.02,21,3,0)
 
"^DD",8994.5,8994.5,.02,21,4,0)
The user is signed on as a visitor and given the Context Option specified
"^DD",8994.5,8994.5,.02,21,5,0)
in this field as a secondary menu option.  The application still needs to
"^DD",8994.5,8994.5,.02,21,6,0)
set the Context Option using the CreateContext method, but the visitor has
"^DD",8994.5,8994.5,.02,21,7,0)
it as a valid option so that it can be used.
"^DD",8994.5,8994.5,.02,"DT")
3060403
"^DD",8994.5,8994.5,.03,0)
APPLICATIONCODE^RF^^0;3^K:$L(X)>60!($L(X)<3) X
"^DD",8994.5,8994.5,.03,1,0)
^.1
"^DD",8994.5,8994.5,.03,1,1,0)
8994.5^ACODE
"^DD",8994.5,8994.5,.03,1,1,1)
S ^XWB(8994.5,"ACODE",$E(X,1,30),DA)=""
"^DD",8994.5,8994.5,.03,1,1,2)
K ^XWB(8994.5,"ACODE",$E(X,1,30),DA)
"^DD",8994.5,8994.5,.03,1,1,3)
THIS CROSS-REFERENCE IS USED AS ENTRY BY THE APPLICATION CODE FOR THE APPLICATION.
"^DD",8994.5,8994.5,.03,1,1,"DT")
3060210
"^DD",8994.5,8994.5,.03,3)
This value is the HASHED value of the application's code phrase.
"^DD",8994.5,8994.5,.03,21,0)
^^51^51^3060403^
"^DD",8994.5,8994.5,.03,21,1,0)
This is the hashed value for a security phrase for the application and is 
"^DD",8994.5,8994.5,.03,21,2,0)
described below.
"^DD",8994.5,8994.5,.03,21,3,0)
 
"^DD",8994.5,8994.5,.03,21,4,0)
Security Phrase
"^DD",8994.5,8994.5,.03,21,5,0)
 
"^DD",8994.5,8994.5,.03,21,6,0)
The security phrase is an application's entry into the REMOTE APPLICATION 
"^DD",8994.5,8994.5,.03,21,7,0)
file (#8994.5) for accessing the information necessary to permit the 
"^DD",8994.5,8994.5,.03,21,8,0)
application to enroll a remote user.   Create a security phrase, case 
"^DD",8994.5,8994.5,.03,21,9,0)
sensitive, and at programmer mode use the command (assuming the security 
"^DD",8994.5,8994.5,.03,21,10,0)
phrase is "My Special Phrase")
"^DD",8994.5,8994.5,.03,21,11,0)
 
"^DD",8994.5,8994.5,.03,21,12,0)
   W $$EN^XUSHSH("My Special Phrase")
"^DD",8994.5,8994.5,.03,21,13,0)
 
"^DD",8994.5,8994.5,.03,21,14,0)
The resulting value:
"^DD",8994.5,8994.5,.03,21,15,0)
   "I&f).c`u:7@01#tL((x" 
"^DD",8994.5,8994.5,.03,21,16,0)
 
"^DD",8994.5,8994.5,.03,21,17,0)
This is the one-way hash value for the security phrase.  It is this 
"^DD",8994.5,8994.5,.03,21,18,0)
hashed value that will be entered into the ApplicationCode field (#.03) 
"^DD",8994.5,8994.5,.03,21,19,0)
in the REMOTE APPLICATION file (#8994.5) for the application.
"^DD",8994.5,8994.5,.03,21,20,0)
 
"^DD",8994.5,8994.5,.03,21,21,0)
To make a remote connection, the application will have the user sign onto 
"^DD",8994.5,8994.5,.03,21,22,0)
the application's authenticating server (the one entered as 
"^DD",8994.5,8994.5,.03,21,23,0)
CallbackServer) and then obtain a Token for the user (similar to 
"^DD",8994.5,8994.5,.03,21,24,0)
"XWBHDL977-124367_0") using the "XUS SET VISITOR" RPC.  The application 
"^DD",8994.5,8994.5,.03,21,25,0)
will then disconnect from the authenticating server and set the new 
"^DD",8994.5,8994.5,.03,21,26,0)
SecurityPhrase property for the TRPCBroker component to the unhashed 
"^DD",8994.5,8994.5,.03,21,27,0)
security phrase concatenated with a caret ("^") and the token for the user
"^DD",8994.5,8994.5,.03,21,28,0)
(e.g.,  "My Special Phrase^XWBHDL977-124367_0")
"^DD",8994.5,8994.5,.03,21,29,0)
 
"^DD",8994.5,8994.5,.03,21,30,0)
This property will be encoded and passed to the remote server for 
"^DD",8994.5,8994.5,.03,21,31,0)
authentication; it will hash the security phrase and use the resulting 
"^DD",8994.5,8994.5,.03,21,32,0)
value to identify the application's entry in the REMOTE APPLICATION file 
"^DD",8994.5,8994.5,.03,21,33,0)
(#8994.5).  The mechanism(s) for contacting the authenticating server 
"^DD",8994.5,8994.5,.03,21,34,0)
will be identified and the authentication server will be requested to 
"^DD",8994.5,8994.5,.03,21,35,0)
provide the demographic information necessary to identify the user and 
"^DD",8994.5,8994.5,.03,21,36,0)
create or match an entry in the NEW PERSON file (#200) based on the token 
"^DD",8994.5,8994.5,.03,21,37,0)
provided.  With this information the user will be set up as a visitor 
"^DD",8994.5,8994.5,.03,21,38,0)
entry and provided the context option specified.  The application will 
"^DD",8994.5,8994.5,.03,21,39,0)
then be notified that the user is connected.  If there is no entry for 
"^DD",8994.5,8994.5,.03,21,40,0)
the application, no match for the token, or the authenticating server can 
"^DD",8994.5,8994.5,.03,21,41,0)
not be connected, the user will be prompted with a regular sign on screen 
"^DD",8994.5,8994.5,.03,21,42,0)
(i.e., required to enter their Access and Verify codes).
"^DD",8994.5,8994.5,.03,21,43,0)
 
"^DD",8994.5,8994.5,.03,21,44,0)
Since the security phrase is the application's identifier, we recommend 
"^DD",8994.5,8994.5,.03,21,45,0)
that the security phrase in RPCBroker Delphi-based programs be identified 
"^DD",8994.5,8994.5,.03,21,46,0)
as a const value in an include file.  And that a substitute include file 
"^DD",8994.5,8994.5,.03,21,47,0)
containing a phrase similar to that used above be included with release 
"^DD",8994.5,8994.5,.03,21,48,0)
of the source code.  It must be realized that the security phrase 
"^DD",8994.5,8994.5,.03,21,49,0)
identifies any application that uses it as your application, and it 
"^DD",8994.5,8994.5,.03,21,50,0)
would, of course, be desirable that rogue applications not appear to be 
"^DD",8994.5,8994.5,.03,21,51,0)
your application.
"^DD",8994.5,8994.5,.03,"DT")
3060210
"^DD",8994.5,8994.5,1,0)
CALLBACKTYPE^8994.51S^^1;0
"^DD",8994.5,8994.5,1,21,0)
^^10^10^3060403^
"^DD",8994.5,8994.5,1,21,1,0)
This is a multiple field.  It may contain multiple values describing 
"^DD",8994.5,8994.5,1,21,2,0)
mechanisms by which the remote site can contact the application's 
"^DD",8994.5,8994.5,1,21,3,0)
authenticating site to obtain the demographic information. 
"^DD",8994.5,8994.5,1,21,4,0)
 
"^DD",8994.5,8994.5,1,21,5,0)
It consists of the following subfields:
"^DD",8994.5,8994.5,1,21,6,0)
 
"^DD",8994.5,8994.5,1,21,7,0)
   .01 CALLBACKTYPE
"^DD",8994.5,8994.5,1,21,8,0)
   .02 CALLBACKPORT
"^DD",8994.5,8994.5,1,21,9,0)
   .03 CALLBACKSERVER
"^DD",8994.5,8994.5,1,21,10,0)
   .04 URLSTRING
"^DD",8994.5,8994.5,1,"DT")
3060403
"^DD",8994.5,8994.51,0)
CALLBACKTYPE SUB-FIELD^^.04^4
"^DD",8994.5,8994.51,0,"DT")
3090409
"^DD",8994.5,8994.51,0,"IX","B",8994.51,.01)

"^DD",8994.5,8994.51,0,"NM","CALLBACKTYPE")

"^DD",8994.5,8994.51,0,"UP")
8994.5
"^DD",8994.5,8994.51,.01,0)
CALLBACKTYPE^MRS^R:RPC-BROKER;M:M2M-BROKER;H:HTTP;S:STATION-NUMBER;^0;1^Q
"^DD",8994.5,8994.51,.01,1,0)
^.1
"^DD",8994.5,8994.51,.01,1,1,0)
8994.51^B
"^DD",8994.5,8994.51,.01,1,1,1)
S ^XWB(8994.5,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",8994.5,8994.51,.01,1,1,2)
K ^XWB(8994.5,DA(1),1,"B",$E(X,1,30),DA)
"^DD",8994.5,8994.51,.01,3)
Select one of the indicators for a Call back type for this Remote GUI Application
"^DD",8994.5,8994.51,.01,21,0)
^.001^3^3^3090409^^^^
"^DD",8994.5,8994.51,.01,21,1,0)
This field indicates the mechanism(s) by which the server should contact 
"^DD",8994.5,8994.51,.01,21,2,0)
the authenticating server to obtain information necessary to sign the 
"^DD",8994.5,8994.51,.01,21,3,0)
current user on to the current server.
"^DD",8994.5,8994.51,.01,"DT")
3090409
"^DD",8994.5,8994.51,.02,0)
CALLBACKPORT^RF^^0;2^K:$L(X)>5!($L(X)<2) X
"^DD",8994.5,8994.51,.02,3)
Answer must be 2-5 characters in length.
"^DD",8994.5,8994.51,.02,21,0)
^.001^2^2^3060403^^
"^DD",8994.5,8994.51,.02,21,1,0)
This is the port to be used for the callback to the authenticating server 
"^DD",8994.5,8994.51,.02,21,2,0)
for the CALLBACKTYPE specified.
"^DD",8994.5,8994.51,.02,"DT")
3060407
"^DD",8994.5,8994.51,.03,0)
CALLBACKSERVER^RF^^0;3^K:$L(X)>60!($L(X)<3) X
"^DD",8994.5,8994.51,.03,3)
This should be the server name to be used to contact the authenticating server for accessing the data to authenticate the user for this Remote GUI Application.
"^DD",8994.5,8994.51,.03,21,0)
^.001^2^2^3060403^^
"^DD",8994.5,8994.51,.03,21,1,0)
This is the server designation to be used for the callback to the 
"^DD",8994.5,8994.51,.03,21,2,0)
authenticating server for the CALLBACKTYPE specified.
"^DD",8994.5,8994.51,.03,"DT")
3060123
"^DD",8994.5,8994.51,.04,0)
URLSTRING^F^^0;4^K:$L(X)>60!($L(X)<1) X
"^DD",8994.5,8994.51,.04,3)
Answer must be 1-60 characters in length.
"^DD",8994.5,8994.51,.04,21,0)
^^14^14^3060403^
"^DD",8994.5,8994.51,.04,21,1,0)
This field holds the text that should follow the server address (field 
"^DD",8994.5,8994.51,.04,21,2,0)
#.03) for HTTP connections to obtain the information for the user token 
"^DD",8994.5,8994.51,.04,21,3,0)
passed in for a REMOTE APPLICATION connection.
"^DD",8994.5,8994.51,.04,21,4,0)
 
"^DD",8994.5,8994.51,.04,21,5,0)
If the complete URL to be used for the callback is
"^DD",8994.5,8994.51,.04,21,6,0)
   http://myserver.med.va.gov/some/kind/of/location/somePage.aspx
"^DD",8994.5,8994.51,.04,21,7,0)
 
"^DD",8994.5,8994.51,.04,21,8,0)
The CALLBACKSERVER (#.03) field could be
"^DD",8994.5,8994.51,.04,21,9,0)
   myserver.med.va.gov
"^DD",8994.5,8994.51,.04,21,10,0)
 
"^DD",8994.5,8994.51,.04,21,11,0)
and the URLSTRING would be
"^DD",8994.5,8994.51,.04,21,12,0)
   some/kind/of/location/somePage.aspx
"^DD",8994.5,8994.51,.04,21,13,0)
 
"^DD",8994.5,8994.51,.04,21,14,0)
This field is only used if the CALLBACKTYPE (#.01) value is H for HTTP
"^DD",8994.5,8994.51,.04,"DT")
3060407
"^DIC",8994.5,8994.5,0)
REMOTE APPLICATION^8994.5
"^DIC",8994.5,8994.5,0,"GL")
^XWB(8994.5,
"^DIC",8994.5,8994.5,"%D",0)
^^20^20^3060328^
"^DIC",8994.5,8994.5,"%D",1,0)
The REMOTE APPLICATION file was introduced as part of the Broker Security 
"^DIC",8994.5,8994.5,"%D",2,0)
Enhancement to secure access via the remote user or visitor approach by 
"^DIC",8994.5,8994.5,"%D",3,0)
GUI applications (formerly known as the CAPRI approach for the first 
"^DIC",8994.5,8994.5,"%D",4,0)
application to use this access style).  The remote visitor access permits 
"^DIC",8994.5,8994.5,"%D",5,0)
applications where users need to access a large number of sites to do so 
"^DIC",8994.5,8994.5,"%D",6,0)
without requiring a separate access code and verify code at each site.
"^DIC",8994.5,8994.5,"%D",7,0)
 
"^DIC",8994.5,8994.5,"%D",8,0)
Following the Broker Security Enhancement, applications will be able to 
"^DIC",8994.5,8994.5,"%D",9,0)
use the remote visitor access only if they have an entry in this file with
"^DIC",8994.5,8994.5,"%D",10,0)
a one-way hash of a secure phrase.  Identification of an entry in the file
"^DIC",8994.5,8994.5,"%D",11,0)
is based on the application passing in the original phrase which is then
"^DIC",8994.5,8994.5,"%D",12,0)
hashed and used for a cross-reference lookup. The application must have at
"^DIC",8994.5,8994.5,"%D",13,0)
least one entry in the CALLBACKTYPE sub-file indicating a connection type,
"^DIC",8994.5,8994.5,"%D",14,0)
a valid address for the authenticating server, and a connection port
"^DIC",8994.5,8994.5,"%D",15,0)
number.  This information is necessary for the remote server to directly
"^DIC",8994.5,8994.5,"%D",16,0)
connect the authenticating server to obtain the demographic information
"^DIC",8994.5,8994.5,"%D",17,0)
necessary to create or match the visitor entry in the NEW PERSON file
"^DIC",8994.5,8994.5,"%D",18,0)
(#200).  The application will also specify the desired context option for
"^DIC",8994.5,8994.5,"%D",19,0)
the user and this will be given to the remote visitor instead of the
"^DIC",8994.5,8994.5,"%D",20,0)
application having to figure out how to set this value.
"^DIC",8994.5,"B","REMOTE APPLICATION",8994.5)

**END**
**END**

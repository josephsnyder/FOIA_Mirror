KIDS Distribution saved on Nov 03, 2010@09:25:57
XU 474
**KIDS**:XU*8.0*474^

**INSTALL NAME**
XU*8.0*474
"BLD",7704,0)
XU*8.0*474^KERNEL^0^3101103^y
"BLD",7704,4,0)
^9.64PA^^
"BLD",7704,6)
^430
"BLD",7704,6.3)
13
"BLD",7704,"ABNS",0)
^9.66A^1^1
"BLD",7704,"ABNS",1,0)
XU
"BLD",7704,"ABNS",1,1,0)
^9.661A^^
"BLD",7704,"ABNS","B","XU",1)

"BLD",7704,"ABPKG")
n^n
"BLD",7704,"KRN",0)
^9.67PA^8989.52^19
"BLD",7704,"KRN",.4,0)
.4
"BLD",7704,"KRN",.401,0)
.401
"BLD",7704,"KRN",.402,0)
.402
"BLD",7704,"KRN",.403,0)
.403
"BLD",7704,"KRN",.5,0)
.5
"BLD",7704,"KRN",.84,0)
.84
"BLD",7704,"KRN",3.6,0)
3.6
"BLD",7704,"KRN",3.8,0)
3.8
"BLD",7704,"KRN",9.2,0)
9.2
"BLD",7704,"KRN",9.8,0)
9.8
"BLD",7704,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",7704,"KRN",9.8,"NM",1,0)
XUMF0^^0^B29733190
"BLD",7704,"KRN",9.8,"NM",2,0)
XUMF1H^^0^B144186923
"BLD",7704,"KRN",9.8,"NM","B","XUMF0",1)

"BLD",7704,"KRN",9.8,"NM","B","XUMF1H",2)

"BLD",7704,"KRN",19,0)
19
"BLD",7704,"KRN",19,"NM",0)
^9.68A^^
"BLD",7704,"KRN",19.1,0)
19.1
"BLD",7704,"KRN",101,0)
101
"BLD",7704,"KRN",101,"NM",0)
^9.68A^1^1
"BLD",7704,"KRN",101,"NM",1,0)
XUMF MFS EVENTS^^3
"BLD",7704,"KRN",101,"NM","B","XUMF MFS EVENTS",1)

"BLD",7704,"KRN",409.61,0)
409.61
"BLD",7704,"KRN",771,0)
771
"BLD",7704,"KRN",870,0)
870
"BLD",7704,"KRN",8989.51,0)
8989.51
"BLD",7704,"KRN",8989.52,0)
8989.52
"BLD",7704,"KRN",8994,0)
8994
"BLD",7704,"KRN","B",.4,.4)

"BLD",7704,"KRN","B",.401,.401)

"BLD",7704,"KRN","B",.402,.402)

"BLD",7704,"KRN","B",.403,.403)

"BLD",7704,"KRN","B",.5,.5)

"BLD",7704,"KRN","B",.84,.84)

"BLD",7704,"KRN","B",3.6,3.6)

"BLD",7704,"KRN","B",3.8,3.8)

"BLD",7704,"KRN","B",9.2,9.2)

"BLD",7704,"KRN","B",9.8,9.8)

"BLD",7704,"KRN","B",19,19)

"BLD",7704,"KRN","B",19.1,19.1)

"BLD",7704,"KRN","B",101,101)

"BLD",7704,"KRN","B",409.61,409.61)

"BLD",7704,"KRN","B",771,771)

"BLD",7704,"KRN","B",870,870)

"BLD",7704,"KRN","B",8989.51,8989.51)

"BLD",7704,"KRN","B",8989.52,8989.52)

"BLD",7704,"KRN","B",8994,8994)

"BLD",7704,"QUES",0)
^9.62^^
"BLD",7704,"REQB",0)
^9.611^2^2
"BLD",7704,"REQB",1,0)
XU*8.0*407^2
"BLD",7704,"REQB",2,0)
XT*7.3*111^2
"BLD",7704,"REQB","B","XT*7.3*111",2)

"BLD",7704,"REQB","B","XU*8.0*407",1)

"KRN",101,5791,-1)
3^1
"KRN",101,5791,0)
XUMF MFS EVENTS^MFS event driver^^X^^^^^^^^
"KRN",101,5791,1,0)
^^2^2^3071218^
"KRN",101,5791,1,1,0)
This protocol allows applications to subscribe to MFS update (push and
"KRN",101,5791,1,2,0)
unsolicited updates) events.
"KRN",101,5791,10,0)
^101.01PA^1^1
"KRN",101,5791,15)
I $T(MFSEXIT^HDISVAP)'="" D MFSEXIT^HDISVAP
"KRN",101,5791,99)
61817,51592
"MBREQ")
0
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",163,-1)
1^1
"PKG",163,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",163,22,0)
^9.49I^1^1
"PKG",163,22,1,0)
8.0^2950703^2951019^1039
"PKG",163,22,1,"PAH",1,0)
474^3101103
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","XUMF0")
0^1^B29733190
"RTN","XUMF0",1,0)
XUMF0 ;ISS/RAM - XUMF API's;04/15/02
"RTN","XUMF0",2,0)
 ;;8.0;KERNEL;**407,474**;Jul 10, 1995;Build 13
"RTN","XUMF0",3,0)
 ;Per VHA Directive 10-92-142, this routine should not be modified
"RTN","XUMF0",4,0)
 ;
"RTN","XUMF0",5,0)
 Q
"RTN","XUMF0",6,0)
 ;
"RTN","XUMF0",7,0)
 ;
"RTN","XUMF0",8,0)
MFE(IFN,VUID,IEN,ERROR) ; -- update
"RTN","XUMF0",9,0)
 ;
"RTN","XUMF0",10,0)
 I 'IFN S ERROR="1^Error - IFN required HLNODE: "_HLNODE Q
"RTN","XUMF0",11,0)
 I IFN=4.009 S IEN=$$FIND1^DIC(IFN,,"B","GLOBAL VERSION") Q
"RTN","XUMF0",12,0)
 I 'VUID S ERROR="1^Error - VUID required HLNODE: "_HLNODE Q
"RTN","XUMF0",13,0)
 ;
"RTN","XUMF0",14,0)
 S ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMF0",15,0)
 S IEN=$O(@ROOT@("AMASTERVUID",VUID,1,0))
"RTN","XUMF0",16,0)
 ;
"RTN","XUMF0",17,0)
 ;reactivate an existing inactive VUID
"RTN","XUMF0",18,0)
 I 'IEN D
"RTN","XUMF0",19,0)
 .S IEN=$O(@ROOT@("AMASTERVUID",VUID,0,0)) Q:'IEN
"RTN","XUMF0",20,0)
 .K FDA,ERR
"RTN","XUMF0",21,0)
 .S IENS=IEN_","
"RTN","XUMF0",22,0)
 .S FDA(IFN,IENS,99.98)=1
"RTN","XUMF0",23,0)
 .D FILE^DIE("E","FDA","ERR")
"RTN","XUMF0",24,0)
 .I $D(ERR) D
"RTN","XUMF0",25,0)
 ..S ERROR="1^flag update error for IFN: "_IFN_" IEN: "_IEN_" PKV: "_PKV
"RTN","XUMF0",26,0)
 ..D EM^XUMF1H(ERROR,.ERR) K ERR
"RTN","XUMF0",27,0)
 ;
"RTN","XUMF0",28,0)
 Q
"RTN","XUMF0",29,0)
 ;
"RTN","XUMF0",30,0)
STUB ; -- create record and update VUID with master flag
"RTN","XUMF0",31,0)
 ;
"RTN","XUMF0",32,0)
 S XREF="B"
"RTN","XUMF0",33,0)
 S NAME=$$UNESC($P(HLNODE,HLFS,3),.HL)
"RTN","XUMF0",34,0)
 S ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMF0",35,0)
 S IEN=$O(@ROOT@(XREF,NAME,0))
"RTN","XUMF0",36,0)
 ;
"RTN","XUMF0",37,0)
 I IEN D
"RTN","XUMF0",38,0)
 .N ROOT
"RTN","XUMF0",39,0)
 .S ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMF0",40,0)
 .M RECORD("BEFORE")=@ROOT@(IEN)
"RTN","XUMF0",41,0)
 .S RECORD("STATUS")=$$GETSTAT^XTID(IFN,,IEN_",")
"RTN","XUMF0",42,0)
 ;
"RTN","XUMF0",43,0)
 I 'IEN D  Q:ERROR
"RTN","XUMF0",44,0)
 .D CHK^DIE(IFN,.01,,NAME,.X)
"RTN","XUMF0",45,0)
 .I X="^" S ERROR="1^Error - .01 is invalid"_" File #: "_IFN_" HLNODE="_HLNODE Q
"RTN","XUMF0",46,0)
 .K DIC S DIC=IFN,DIC(0)="F" D FILE^DICN K DIC
"RTN","XUMF0",47,0)
 .I Y="-1" S ERROR="1^Error - stub entry IFN: "_IFN_" failed HLNODE: "_HLNODE Q
"RTN","XUMF0",48,0)
 .S IEN=+Y,RECORD("NEW")=1
"RTN","XUMF0",49,0)
 ;
"RTN","XUMF0",50,0)
 S:'$G(RECORD("NEW")) ^TMP("XUMF EVENT",$J,IFN,"BEFORE",IEN,"REPLACED BY")=""
"RTN","XUMF0",51,0)
 S:'$G(RECORD("NEW")) ^TMP("XUMF EVENT",$J,IFN,"BEFORE",IEN,"INHERITS FROM")=""
"RTN","XUMF0",52,0)
 ;
"RTN","XUMF0",53,0)
 S IENS=IEN_","
"RTN","XUMF0",54,0)
 ;
"RTN","XUMF0",55,0)
 ;I $L($P(MFE,U)),$P(MFE,U)'=99.99 Q
"RTN","XUMF0",56,0)
 S FDA(IFN,IENS,99.99)=VUID
"RTN","XUMF0",57,0)
 S FDA(IFN,IENS,99.98)=1
"RTN","XUMF0",58,0)
 ;
"RTN","XUMF0",59,0)
 K ERR
"RTN","XUMF0",60,0)
 ;
"RTN","XUMF0",61,0)
 D FILE^DIE("E","FDA","ERR")
"RTN","XUMF0",62,0)
 I $D(ERR) D
"RTN","XUMF0",63,0)
 .S ERROR="1^VUID update error IFN: "_IFN_" IEN: "_IEN_" VUID: "_VUID_" HLNODE: "_HLNODE
"RTN","XUMF0",64,0)
 .D EM^XUMF1H(ERROR,.ERR) K ERR
"RTN","XUMF0",65,0)
 ;
"RTN","XUMF0",66,0)
 D ADD^XUMF1H
"RTN","XUMF0",67,0)
 ;
"RTN","XUMF0",68,0)
 ; clean multiple flag
"RTN","XUMF0",69,0)
 K:'$D(XIEN(IEN)) XIEN
"RTN","XUMF0",70,0)
 S XIEN(IEN)=$G(XIEN(IEN))+1
"RTN","XUMF0",71,0)
 ;
"RTN","XUMF0",72,0)
 Q
"RTN","XUMF0",73,0)
 ;
"RTN","XUMF0",74,0)
VUID(FILE,FIELD,VUID1,X) ; -- If value type pointer and VUID may be used,
"RTN","XUMF0",75,0)
 ; get IEN and set it as internal value
"RTN","XUMF0",76,0)
 N X1
"RTN","XUMF0",77,0)
 Q:'$L(FILE)!'FIELD!'$L(VUID1) 0
"RTN","XUMF0",78,0)
 D FIELD^DID(FILE,FIELD,,"POINTER","X1")
"RTN","XUMF0",79,0)
 S X1=$G(X1("POINTER"))
"RTN","XUMF0",80,0)
 Q:'$L(X1) 0
"RTN","XUMF0",81,0)
 S X1=U_X1_"""AMASTERVUID"",X,1,0)"
"RTN","XUMF0",82,0)
 S X1=$O(@X1)
"RTN","XUMF0",83,0)
 Q +X1
"RTN","XUMF0",84,0)
 ;
"RTN","XUMF0",85,0)
VAL(FILE,FIELD,VUID1,VALUE,IENS) ; convert to internal
"RTN","XUMF0",86,0)
 ;
"RTN","XUMF0",87,0)
 N RESULT,ERR
"RTN","XUMF0",88,0)
 ;
"RTN","XUMF0",89,0)
 I $G(VALUE)="" Q "^"
"RTN","XUMF0",90,0)
 I $G(VALUE)="""""" Q ""
"RTN","XUMF0",91,0)
 ;
"RTN","XUMF0",92,0)
 I $L(VUID1) D  Q RESULT
"RTN","XUMF0",93,0)
 .S RESULT=$$VUID(FILE,FIELD,VUID,VALUE)
"RTN","XUMF0",94,0)
 .I 'RESULT S RESULT="^",ERROR="1^VUID lookup failed on "_VALUE
"RTN","XUMF0",95,0)
 ;
"RTN","XUMF0",96,0)
 D VAL^DIE(FILE,IENS,FIELD,,VALUE,.RESULT,,"ERR")
"RTN","XUMF0",97,0)
 I $D(ERR)!(RESULT="^") D
"RTN","XUMF0",98,0)
 .S ERROR="1^data validation error"
"RTN","XUMF0",99,0)
 .D EM^XUMF1H(ERROR,.ERR)
"RTN","XUMF0",100,0)
 ;
"RTN","XUMF0",101,0)
 Q RESULT
"RTN","XUMF0",102,0)
 ;
"RTN","XUMF0",103,0)
UNESC(VALUE,HL) ;Unescape value
"RTN","XUMF0",104,0)
 N RESULT,ESC,ESCFS,ESCCMP,ESCSUB,ESCREP,ESCESC,ESCSEQ,CVRT
"RTN","XUMF0",105,0)
 S ESC=$E(HL("ECH"),3)
"RTN","XUMF0",106,0)
 S ESCFS=ESC_"F"_ESC S CVRT(ESCFS)=HL("FS")
"RTN","XUMF0",107,0)
 S ESCCMP=ESC_"S"_ESC S CVRT(ESCCMP)=$E(HL("ECH"),1)
"RTN","XUMF0",108,0)
 S ESCREP=ESC_"R"_ESC S CVRT(ESCREP)=$E(HL("ECH"),2)
"RTN","XUMF0",109,0)
 S ESCESC=ESC_"E"_ESC S CVRT(ESCESC)=ESC
"RTN","XUMF0",110,0)
 S ESCSUB=ESC_"T"_ESC S CVRT(ESCSUB)=$E(HL("ECH"),4)
"RTN","XUMF0",111,0)
 F ESCSEQ=ESCFS,ESCCMP,ESCSUB,ESCREP,ESCESC D
"RTN","XUMF0",112,0)
 .F  Q:VALUE'[ESCSEQ  D
"RTN","XUMF0",113,0)
 ..S VALUE=$P(VALUE,ESCSEQ,1)_CVRT(ESCSEQ)_$P(VALUE,ESCSEQ,2,9999)
"RTN","XUMF0",114,0)
 Q VALUE
"RTN","XUMF0",115,0)
 ;
"RTN","XUMF0",116,0)
UNESCWP(TEXT,HL) ;Unescape word processing field
"RTN","XUMF0",117,0)
 N ESC,NODE,NXTNODE,BNDBEG,BNDEND,CHECK,SPOT
"RTN","XUMF0",118,0)
 S ESC=$E(HL("ECH"),3)
"RTN","XUMF0",119,0)
 S NODE=0
"RTN","XUMF0",120,0)
 F  S NODE=+$O(TEXT(NODE)) Q:'NODE  D
"RTN","XUMF0",121,0)
 .S TEXT(NODE)=$$UNESC(TEXT(NODE),.HL)
"RTN","XUMF0",122,0)
 .S BNDBEG=$E(TEXT(NODE),$L(TEXT(NODE))-1,$L(TEXT(NODE)))
"RTN","XUMF0",123,0)
 .I BNDBEG[ESC D
"RTN","XUMF0",124,0)
 ..S NXTNODE=$O(TEXT(NODE)) Q:'NXTNODE
"RTN","XUMF0",125,0)
 ..S BNDEND=$E(TEXT(NXTNODE),1,2)
"RTN","XUMF0",126,0)
 ..Q:(BNDEND'[ESC)
"RTN","XUMF0",127,0)
 ..S CHECK=$$UNESC(BNDBEG_BNDEND,.HL)
"RTN","XUMF0",128,0)
 ..Q:($L(CHECK)=4)
"RTN","XUMF0",129,0)
 ..I $E(BNDBEG,1)=ESC D  Q
"RTN","XUMF0",130,0)
 ...S TEXT(NODE)=$E(TEXT(NODE),1,$L(TEXT(NODE))-2)_$E(CHECK,1)
"RTN","XUMF0",131,0)
 ...S TEXT(NXTNODE)=$E(CHECK,2)_$E(TEXT(NXTNODE),3,$L(TEXT(NXTNODE)))
"RTN","XUMF0",132,0)
 ..S TEXT(NODE)=$E(TEXT(NODE),1,$L(TEXT(NODE))-2)_CHECK
"RTN","XUMF0",133,0)
 ..S TEXT(NXTNODE)=$E(TEXT(NXTNODE),3,$L(TEXT(NXTNODE)))
"RTN","XUMF0",134,0)
 Q
"RTN","XUMF0",135,0)
 ;
"RTN","XUMF0",136,0)
EM ; -- error message
"RTN","XUMF0",137,0)
 ;
"RTN","XUMF0",138,0)
 N X,XMTEXT,XMDUZ,GROUP,XMSUB,XMY
"RTN","XUMF0",139,0)
 ;
"RTN","XUMF0",140,0)
 D MSG^DIALOG("AM",.X,80,,"ERR")
"RTN","XUMF0",141,0)
 ;
"RTN","XUMF0",142,0)
 S X(.1)="HL7 message ID: "_$G(HL("MID"))
"RTN","XUMF0",143,0)
 S X(.11)="",X(.12)="This message was generated by the NTRT process and MFS.  No action is required on your part."
"RTN","XUMF0",144,0)
 S X(.13)="This message is informational and may be used in some instances as a troubleshooting tool."
"RTN","XUMF0",145,0)
 S X(.2)="",X(.3)=$G(ERROR)
"RTN","XUMF0",146,0)
 S X(.4)="",X(.5)="VUID: "_$G(VUID),X(.6)=""
"RTN","XUMF0",147,0)
 S:$G(XMSUB)="" XMSUB="MFS ERROR/WARNING/INFO"
"RTN","XUMF0",148,0)
 S XMY("G.XUMF ERROR")="",XMDUZ=.5
"RTN","XUMF0",149,0)
 S GROUP=$P($G(^DIC(4.001,+IFN,0)),U,6)
"RTN","XUMF0",150,0)
 I GROUP'="" S GROUP="G."_GROUP,XMY(GROUP)=""
"RTN","XUMF0",151,0)
 S XMTEXT="X("
"RTN","XUMF0",152,0)
 ;
"RTN","XUMF0",153,0)
 M X=^TMP("XUMF ERROR",$J)
"RTN","XUMF0",154,0)
 ;
"RTN","XUMF0",155,0)
 D ^XMD
"RTN","XUMF0",156,0)
 ;
"RTN","XUMF0",157,0)
 Q
"RTN","XUMF0",158,0)
 ;
"RTN","XUMF0",159,0)
 ;
"RTN","XUMF0",160,0)
EVT ; -- calls the MFS event protocol
"RTN","XUMF0",161,0)
 ;
"RTN","XUMF0",162,0)
 N OROLD,X
"RTN","XUMF0",163,0)
 K DTOUT,DIROUT
"RTN","XUMF0",164,0)
 ;
"RTN","XUMF0",165,0)
 I '$D(^TMP("XUMF EVENT")) Q
"RTN","XUMF0",166,0)
 ;
"RTN","XUMF0",167,0)
 S X=+$O(^ORD(101,"B","XUMF MFS EVENTS",0))_";ORD(101,"
"RTN","XUMF0",168,0)
 D EN^XQOR
"RTN","XUMF0",169,0)
 ;
"RTN","XUMF0",170,0)
 K XQORPOP,X,^TMP("XUMF EVENT",$J) Q
"RTN","XUMF0",171,0)
 ;
"RTN","XUMF0",172,0)
 Q
"RTN","XUMF0",173,0)
 ;
"RTN","XUMF1H")
0^2^B144186923
"RTN","XUMF1H",1,0)
XUMF1H ;ISS/RAM - MFS Handler ;6/27/06  07:50
"RTN","XUMF1H",2,0)
 ;;8.0;KERNEL;**407,474**;Jul 10, 1995;Build 13
"RTN","XUMF1H",3,0)
 ;Per VHA Directive 10-92-142, this routine should not be modified
"RTN","XUMF1H",4,0)
 ;
"RTN","XUMF1H",5,0)
 ; This routine handles Master File HL7 messages.
"RTN","XUMF1H",6,0)
 ;
"RTN","XUMF1H",7,0)
MAIN ; -- entry point
"RTN","XUMF1H",8,0)
 ;
"RTN","XUMF1H",9,0)
 N CNT,ERR,I,X,HLFS,HLCS,ERROR,HLRESLTA,IFN,IEN,MTPE,TYPE,ARRAY
"RTN","XUMF1H",10,0)
 N HDT,KEY,MID,REASON,VALUE,XREF,ALL,GROUP,PARAM,ROOT,SEG,QRD,XUMF
"RTN","XUMF1H",11,0)
 N QID,WHAT,WHO,HLSCS,CDSYS,EXIT,HLREP,NUMBER,Y,XXX,YYY,XIEN
"RTN","XUMF1H",12,0)
 N XUMFSDS,FDA,LIST,ERRCNT,PKV,MKEY,MKEY1,TYP,MFI,IMPLY,RECORD,OUT
"RTN","XUMF1H",13,0)
 ;
"RTN","XUMF1H",14,0)
 D INIT,PROCESS,REPLY,EXIT
"RTN","XUMF1H",15,0)
 ;
"RTN","XUMF1H",16,0)
 Q
"RTN","XUMF1H",17,0)
 ;
"RTN","XUMF1H",18,0)
INIT ; -- initialize
"RTN","XUMF1H",19,0)
 ;
"RTN","XUMF1H",20,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J)
"RTN","XUMF1H",21,0)
 K ^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMF1H",22,0)
 K ^TMP("XUMF MFS",$J),^TMP("XUMF ERROR",$J)
"RTN","XUMF1H",23,0)
 K ^TMP("XUMF EVENT",$J)
"RTN","XUMF1H",24,0)
 ;
"RTN","XUMF1H",25,0)
 S XUMF=1,DUZ(0)="@"
"RTN","XUMF1H",26,0)
 ;
"RTN","XUMF1H",27,0)
 S (ERROR,CNT,TYPE,ARRAY,EXIT,ERRCNT)=0
"RTN","XUMF1H",28,0)
 S HLFS=HL("FS"),HLCS=$E(HL("ECH"))
"RTN","XUMF1H",29,0)
 S HLSCS=$E(HL("ECH"),4),HLREP=$E(HL("ECH"),2)
"RTN","XUMF1H",30,0)
 ;
"RTN","XUMF1H",31,0)
 Q
"RTN","XUMF1H",32,0)
 ;
"RTN","XUMF1H",33,0)
PROCESS ; -- pull message text
"RTN","XUMF1H",34,0)
 ;
"RTN","XUMF1H",35,0)
 F  X HLNEXT Q:HLQUIT'>0  D
"RTN","XUMF1H",36,0)
 .Q:$P(HLNODE,HLFS)=""
"RTN","XUMF1H",37,0)
 .Q:"^MSH^MSA^QRD^MFI^MFE^ZRT^"'[(U_$P(HLNODE,HLFS)_U)
"RTN","XUMF1H",38,0)
 .D @($P(HLNODE,HLFS))
"RTN","XUMF1H",39,0)
 I $D(LIST) D LIST
"RTN","XUMF1H",40,0)
 I $D(FDA) D UPDATE
"RTN","XUMF1H",41,0)
 I $D(RECORD) D RECORD
"RTN","XUMF1H",42,0)
 I $D(IFN) D EVT^XUMF0,POST
"RTN","XUMF1H",43,0)
 ;
"RTN","XUMF1H",44,0)
 Q
"RTN","XUMF1H",45,0)
 ;
"RTN","XUMF1H",46,0)
MSH ; -- MSH segment
"RTN","XUMF1H",47,0)
 ;
"RTN","XUMF1H",48,0)
 Q
"RTN","XUMF1H",49,0)
 ;
"RTN","XUMF1H",50,0)
MSA ; -- MSA segment
"RTN","XUMF1H",51,0)
 ;
"RTN","XUMF1H",52,0)
 N CODE
"RTN","XUMF1H",53,0)
 ;
"RTN","XUMF1H",54,0)
 S CODE=$P(HLNODE,HLFS,2)
"RTN","XUMF1H",55,0)
 ;
"RTN","XUMF1H",56,0)
 I CODE="AE"!(CODE="AR") D
"RTN","XUMF1H",57,0)
 .S ERROR=ERROR_U_$P(HLNODE,HLFS,4)_U_$G(ERR)
"RTN","XUMF1H",58,0)
 .D EM^XUMFX(ERROR,.ERR)
"RTN","XUMF1H",59,0)
 ;
"RTN","XUMF1H",60,0)
 Q
"RTN","XUMF1H",61,0)
 ;
"RTN","XUMF1H",62,0)
MFI ; -- MFI segment
"RTN","XUMF1H",63,0)
 ;
"RTN","XUMF1H",64,0)
 Q:ERROR
"RTN","XUMF1H",65,0)
 Q:EXIT
"RTN","XUMF1H",66,0)
 ;
"RTN","XUMF1H",67,0)
 Q
"RTN","XUMF1H",68,0)
 ;
"RTN","XUMF1H",69,0)
MFE ; -- MFE SEGMENT
"RTN","XUMF1H",70,0)
 ;
"RTN","XUMF1H",71,0)
 Q:ERROR
"RTN","XUMF1H",72,0)
 Q:EXIT
"RTN","XUMF1H",73,0)
 ;
"RTN","XUMF1H",74,0)
 S PKV=$P(HLNODE,HLFS,5),MFI=$P(PKV,"@")
"RTN","XUMF1H",75,0)
 ;
"RTN","XUMF1H",76,0)
 I $D(LIST) D LIST K LIST,LISTVUID
"RTN","XUMF1H",77,0)
 I $D(FDA) D UPDATE K FDA
"RTN","XUMF1H",78,0)
 I $D(RECORD) D RECORD
"RTN","XUMF1H",79,0)
 I $D(IFN),(IFN'=$O(^DIC(4.001,"MFID",MFI,0))) D POST
"RTN","XUMF1H",80,0)
 ;
"RTN","XUMF1H",81,0)
 K IFN,IEN,PRE,POST,VUID,IMPLY,RECORD
"RTN","XUMF1H",82,0)
 K ^TMP("XUMF IMPLIED LOGIC",$J)
"RTN","XUMF1H",83,0)
 ;
"RTN","XUMF1H",84,0)
 I MFI="" S ERROR="1^MFI not resolved HLNODE: "_HLNODE Q
"RTN","XUMF1H",85,0)
 S IFN=$O(^DIC(4.001,"MFID",MFI,0))
"RTN","XUMF1H",86,0)
 I 'IFN S ERROR="1^IFN not resolved HLNODE: "_HLNODE Q
"RTN","XUMF1H",87,0)
 ;
"RTN","XUMF1H",88,0)
 S VUID=$P($P(PKV,"@",2),HLCS)
"RTN","XUMF1H",89,0)
 ;
"RTN","XUMF1H",90,0)
 Q:ARRAY
"RTN","XUMF1H",91,0)
 ;
"RTN","XUMF1H",92,0)
 ;MFE processing
"RTN","XUMF1H",93,0)
 D MFE0 Q:ERROR
"RTN","XUMF1H",94,0)
 ;
"RTN","XUMF1H",95,0)
 D:'$G(IEN) MFE^XUMF0(IFN,VUID,.IEN,.ERROR) Q:ERROR
"RTN","XUMF1H",96,0)
 ;
"RTN","XUMF1H",97,0)
 ;D MFE0
"RTN","XUMF1H",98,0)
 ;
"RTN","XUMF1H",99,0)
 ;Implied logic flag - must be set by MFE-Processing Logic field (#4)
"RTN","XUMF1H",100,0)
 S IMPLY=+$G(^TMP("XUMF IMPLIED LOGIC",$J))
"RTN","XUMF1H",101,0)
 S IMPLY("KILL")=0
"RTN","XUMF1H",102,0)
 K ^TMP("XUMF IMPLIED LOGIC",$J)
"RTN","XUMF1H",103,0)
 ;
"RTN","XUMF1H",104,0)
 I IEN D
"RTN","XUMF1H",105,0)
 .; clean multiple flag
"RTN","XUMF1H",106,0)
 .K:'$D(XIEN(IFN,IEN)) XIEN
"RTN","XUMF1H",107,0)
 .S XIEN(IFN,IEN)=$G(XIEN(IFN,IEN))+1
"RTN","XUMF1H",108,0)
 .;
"RTN","XUMF1H",109,0)
 .N ROOT
"RTN","XUMF1H",110,0)
 .S ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMF1H",111,0)
 .M RECORD("BEFORE")=@ROOT@(IEN)
"RTN","XUMF1H",112,0)
 .S RECORD("STATUS")=$$GETSTAT^XTID(IFN,,IEN_",")
"RTN","XUMF1H",113,0)
 .;
"RTN","XUMF1H",114,0)
 .S ^TMP("XUMF EVENT",$J,IFN,"BEFORE",IEN,"REPLACED BY")=$P($G(@ROOT@(IEN,"VUID")),U,3)
"RTN","XUMF1H",115,0)
 .S ^TMP("XUMF EVENT",$J,IFN,"BEFORE",IEN,"INHERITS FROM")=$$RPLCMNT^XTIDTRM(IFN,IEN)
"RTN","XUMF1H",116,0)
 ;
"RTN","XUMF1H",117,0)
 Q
"RTN","XUMF1H",118,0)
 ;
"RTN","XUMF1H",119,0)
ZRT ; -- data segments
"RTN","XUMF1H",120,0)
 ;
"RTN","XUMF1H",121,0)
 Q:ERROR
"RTN","XUMF1H",122,0)
 Q:EXIT
"RTN","XUMF1H",123,0)
 ;
"RTN","XUMF1H",124,0)
 I $G(ARRAY) D ARRAY Q
"RTN","XUMF1H",125,0)
 ;
"RTN","XUMF1H",126,0)
 N COL,X,Y,Z,DTYP,IDX,SEQ,DATA,NAME,VUID1,LIST1
"RTN","XUMF1H",127,0)
 N FIELD,SUBFILE,LKUP,REPEAT,CLEAN,TIMEZONE,WP
"RTN","XUMF1H",128,0)
 ;
"RTN","XUMF1H",129,0)
 S NAME=$P(HLNODE,HLFS,2)
"RTN","XUMF1H",130,0)
 ;
"RTN","XUMF1H",131,0)
 D ZRT0 Q:ERROR  I $G(OUT) K OUT Q
"RTN","XUMF1H",132,0)
 ;
"RTN","XUMF1H",133,0)
 I 'IEN,NAME="Term" D STUB^XUMF0 Q
"RTN","XUMF1H",134,0)
 I 'IEN S ERROR="1^IEN not defined IFN: "_IFN_" VUID: "_VUID Q
"RTN","XUMF1H",135,0)
 ;
"RTN","XUMF1H",136,0)
 ;D ZRT0 Q:ERROR
"RTN","XUMF1H",137,0)
 ;
"RTN","XUMF1H",138,0)
 S IENS=IEN_","
"RTN","XUMF1H",139,0)
 ;
"RTN","XUMF1H",140,0)
 S IDX=$O(^DIC(4.001,+IFN,1,"B",NAME,0))
"RTN","XUMF1H",141,0)
 I 'IDX S ERROR="1^parameter "_NAME_" not defined IFN: "_IFN Q
"RTN","XUMF1H",142,0)
 S DATA=$G(^DIC(4.001,+IFN,1,+IDX,0))
"RTN","XUMF1H",143,0)
 S TYP=$P(DATA,U,3),TYP=$$GET1^DIQ(771.4,(+TYP_","),.01)
"RTN","XUMF1H",144,0)
 S FIELD=$P(DATA,U,2),SUBFILE=$P(DATA,U,4),MKEY=$P(DATA,U,6)
"RTN","XUMF1H",145,0)
 S LKUP=$P(DATA,U,7),TIMEZONE=$P(DATA,U,14),LIST1=$P(DATA,U,8)
"RTN","XUMF1H",146,0)
 S REPEAT=$P(DATA,U,11),CLEAN=$P(DATA,U,12),VUID1=$P(DATA,U,13)
"RTN","XUMF1H",147,0)
 S WP=$P(DATA,U,16)
"RTN","XUMF1H",148,0)
 ;
"RTN","XUMF1H",149,0)
 I WP D WP Q
"RTN","XUMF1H",150,0)
 ;
"RTN","XUMF1H",151,0)
 S VALUE=$$UNESC^XUMF0($P(HLNODE,HLFS,3),.HL)
"RTN","XUMF1H",152,0)
 S VALUE=$$DTYP^XUMFXP(VALUE,TYP,HLCS,0,TIMEZONE)
"RTN","XUMF1H",153,0)
 ;
"RTN","XUMF1H",154,0)
 I NAME="Status" D STATUS Q
"RTN","XUMF1H",155,0)
 ;
"RTN","XUMF1H",156,0)
 I 'SUBFILE D  Q
"RTN","XUMF1H",157,0)
 .S VALUE=$$VAL^XUMF0(IFN,FIELD,VUID1,VALUE,IENS) Q:VALUE="^"
"RTN","XUMF1H",158,0)
 .S FDA(IFN,IENS,FIELD)=VALUE
"RTN","XUMF1H",159,0)
 ;
"RTN","XUMF1H",160,0)
 N IENS1
"RTN","XUMF1H",161,0)
 ;
"RTN","XUMF1H",162,0)
 I LIST1 D  Q
"RTN","XUMF1H",163,0)
 .S VALUE=$$VAL^XUMF0(SUBFILE,FIELD,VUID1,VALUE,"?+1,"_IENS) Q:VALUE="^"
"RTN","XUMF1H",164,0)
 .I MKEY=NAME S ZKEY=VALUE ;S:VUID1'="" LISTVUID(SUBFILE)=1
"RTN","XUMF1H",165,0)
 .I '$D(ZKEY) S ERROR="1^ZKEY error "_SUBFILE_" VUID: "_VUID Q
"RTN","XUMF1H",166,0)
 .I ((ZKEY="")!(ZKEY=$C(34,34))) S LIST(SUBFILE)="" Q
"RTN","XUMF1H",167,0)
 .S LIST(SUBFILE,ZKEY,FIELD)=VALUE
"RTN","XUMF1H",168,0)
 .I IMPLY D IMPLY
"RTN","XUMF1H",169,0)
 ;
"RTN","XUMF1H",170,0)
 I CLEAN,$G(XIEN(IFN,IEN))'>1 D
"RTN","XUMF1H",171,0)
 .N ROOT,IDX
"RTN","XUMF1H",172,0)
 .S ROOT=$$ROOT^DILFD(SUBFILE,","_IENS,1)
"RTN","XUMF1H",173,0)
 .S IDX=0 F  S IDX=$O(@ROOT@(IDX)) Q:'IDX  D
"RTN","XUMF1H",174,0)
 ..D
"RTN","XUMF1H",175,0)
 ...N DA,DIK,DIC S DA(1)=+IENS,DA=IDX,DIK=$P(ROOT,")")_"," D ^DIK
"RTN","XUMF1H",176,0)
 ;
"RTN","XUMF1H",177,0)
 I MKEY=NAME Q:VALUE=""  D
"RTN","XUMF1H",178,0)
 .N FDA,IEN
"RTN","XUMF1H",179,0)
 .;
"RTN","XUMF1H",180,0)
 .S VALUE=$$VAL^XUMF0(SUBFILE,FIELD,VUID1,VALUE,"?+1,"_IENS) Q:VALUE="^"
"RTN","XUMF1H",181,0)
 .S FDA(SUBFILE,"?+1,"_IENS,.01)=VALUE
"RTN","XUMF1H",182,0)
 .D UPDATE^DIE(,"FDA","IEN","ERR")
"RTN","XUMF1H",183,0)
 .I $D(ERR) D  Q
"RTN","XUMF1H",184,0)
 ..S ERROR="1^subfile update error SUBFILE#: "_SUBFILE
"RTN","XUMF1H",185,0)
 ..D EM(ERROR,.ERR) K ERR
"RTN","XUMF1H",186,0)
 .S IENS1=IEN(1)_","_IENS,MKEY(NAME)=IENS1
"RTN","XUMF1H",187,0)
 ;
"RTN","XUMF1H",188,0)
 I MKEY'="",MKEY'=NAME S IENS1=$G(MKEY(MKEY)) Q:IENS1=""
"RTN","XUMF1H",189,0)
 S:MKEY'=NAME VALUE=$$VAL^XUMF0(SUBFILE,FIELD,VUID1,VALUE,"?+1,"_IENS) Q:VALUE="^"
"RTN","XUMF1H",190,0)
 S:$D(IENS1) FDA(SUBFILE,IENS1,FIELD)=VALUE
"RTN","XUMF1H",191,0)
 I IMPLY D IMPLY
"RTN","XUMF1H",192,0)
 ;
"RTN","XUMF1H",193,0)
 Q
"RTN","XUMF1H",194,0)
 ;
"RTN","XUMF1H",195,0)
IMPLY ; -- Implied value logic
"RTN","XUMF1H",196,0)
 N PREV,ARR
"RTN","XUMF1H",197,0)
 S ARR=$S(LIST1:"LIST",1:"FDA")
"RTN","XUMF1H",198,0)
 S PREV=$S(LIST1:ZKEY,1:IENS1)
"RTN","XUMF1H",199,0)
 I MKEY=NAME D  Q
"RTN","XUMF1H",200,0)
 .I IMPLY("KILL") K IMPLY("PREV") S IMPLY("KILL")=0
"RTN","XUMF1H",201,0)
 .S IMPLY("PREV",PREV)=""
"RTN","XUMF1H",202,0)
 S PREV="" F  S PREV=$O(IMPLY("PREV",PREV)) Q:PREV=""  D
"RTN","XUMF1H",203,0)
 .S @ARR@(SUBFILE,PREV,FIELD)=VALUE
"RTN","XUMF1H",204,0)
 S IMPLY("KILL")=1
"RTN","XUMF1H",205,0)
 Q
"RTN","XUMF1H",206,0)
 ;
"RTN","XUMF1H",207,0)
LIST ; -- process list
"RTN","XUMF1H",208,0)
 ;
"RTN","XUMF1H",209,0)
 N SUBFILE,ZKEY,FIELD,VALUE,IENS,CNT
"RTN","XUMF1H",210,0)
 ;
"RTN","XUMF1H",211,0)
 S IENS=IEN_","
"RTN","XUMF1H",212,0)
 ;
"RTN","XUMF1H",213,0)
 ;remove non-standard sub-records (not in message)
"RTN","XUMF1H",214,0)
 S SUBFILE=0
"RTN","XUMF1H",215,0)
 F  S SUBFILE=$O(LIST(SUBFILE)) Q:'SUBFILE  D
"RTN","XUMF1H",216,0)
 .N ROOT,IDX
"RTN","XUMF1H",217,0)
 .S ROOT=$$ROOT^DILFD(SUBFILE,","_IENS,1)
"RTN","XUMF1H",218,0)
 .S IDX=0 F  S IDX=$O(@ROOT@(IDX)) Q:'IDX  D
"RTN","XUMF1H",219,0)
 ..S VALUE=$$GET1^DIQ(SUBFILE,IDX_","_IENS,.01,"I")
"RTN","XUMF1H",220,0)
 ..I '$D(LIST(SUBFILE,VALUE)) D
"RTN","XUMF1H",221,0)
 ...N DA,DIK,DIC S DA(1)=+IENS,DA=IDX,DIK=$P(ROOT,")")_"," D ^DIK
"RTN","XUMF1H",222,0)
 ;
"RTN","XUMF1H",223,0)
 ;update sub-records
"RTN","XUMF1H",224,0)
 S SUBFILE=0
"RTN","XUMF1H",225,0)
 F  S SUBFILE=$O(LIST(SUBFILE)) Q:'SUBFILE  D
"RTN","XUMF1H",226,0)
 .S ZKEY="",CNT=0
"RTN","XUMF1H",227,0)
 .F  S ZKEY=$O(LIST(SUBFILE,ZKEY)) Q:ZKEY=""  D
"RTN","XUMF1H",228,0)
 ..N IDX,ROOT
"RTN","XUMF1H",229,0)
 ..S ROOT=$$ROOT^DILFD(SUBFILE,","_IENS,1)
"RTN","XUMF1H",230,0)
 ..S IDX=$O(@ROOT@("B",ZKEY,0))
"RTN","XUMF1H",231,0)
 ..I $O(@ROOT@("B",ZKEY,IDX)) D DELLIST(IDX)
"RTN","XUMF1H",232,0)
 ..I 'IDX D ADDLIST Q
"RTN","XUMF1H",233,0)
 ..S FIELD=0
"RTN","XUMF1H",234,0)
 ..F  S FIELD=$O(LIST(SUBFILE,ZKEY,FIELD)) Q:'FIELD  D
"RTN","XUMF1H",235,0)
 ...N X S X=$$GET1^DIQ(SUBFILE,IDX_","_IENS,FIELD)
"RTN","XUMF1H",236,0)
 ...S VALUE=LIST(SUBFILE,ZKEY,FIELD)
"RTN","XUMF1H",237,0)
 ...Q:VALUE=X  Q:(VALUE=""""&X="")
"RTN","XUMF1H",238,0)
 ...S FDA(SUBFILE,IDX_","_IENS,FIELD)=VALUE
"RTN","XUMF1H",239,0)
 ;
"RTN","XUMF1H",240,0)
 Q
"RTN","XUMF1H",241,0)
 ;
"RTN","XUMF1H",242,0)
ADDLIST ; -- add new sub-record
"RTN","XUMF1H",243,0)
 ;
"RTN","XUMF1H",244,0)
 N FDA
"RTN","XUMF1H",245,0)
 ;
"RTN","XUMF1H",246,0)
 S CNT=$G(CNT)+1
"RTN","XUMF1H",247,0)
 S FIELD=0
"RTN","XUMF1H",248,0)
 F  S FIELD=$O(LIST(SUBFILE,ZKEY,FIELD)) Q:'FIELD  D
"RTN","XUMF1H",249,0)
 .S VALUE=LIST(SUBFILE,ZKEY,FIELD) Q:VALUE=""
"RTN","XUMF1H",250,0)
 .S FDA(SUBFILE,"+"_CNT_","_IENS,FIELD)=VALUE
"RTN","XUMF1H",251,0)
 ;
"RTN","XUMF1H",252,0)
 Q:'$D(FDA)
"RTN","XUMF1H",253,0)
 ;
"RTN","XUMF1H",254,0)
 D UPDATE^DIE(,"FDA",,"ERR")
"RTN","XUMF1H",255,0)
 I $D(ERR) D  Q
"RTN","XUMF1H",256,0)
 .S ERROR="1^subfile update error SUBFILE#: "_SUBFILE
"RTN","XUMF1H",257,0)
 .D EM(ERROR,.ERR) K ERR
"RTN","XUMF1H",258,0)
 ;
"RTN","XUMF1H",259,0)
 Q
"RTN","XUMF1H",260,0)
 ;
"RTN","XUMF1H",261,0)
DELLIST(IDX) ; -- delete duplicate
"RTN","XUMF1H",262,0)
 ;
"RTN","XUMF1H",263,0)
 F  S IDX=$O(@ROOT@("B",ZKEY,IDX)) Q:'IDX  D
"RTN","XUMF1H",264,0)
 .N DA,DIK,DIC S DA(1)=+IENS,DA=IDX,DIK=$P(ROOT,")")_"," D ^DIK
"RTN","XUMF1H",265,0)
 ;
"RTN","XUMF1H",266,0)
 Q
"RTN","XUMF1H",267,0)
 ;
"RTN","XUMF1H",268,0)
UPDATE ; -- FileMan update
"RTN","XUMF1H",269,0)
 ;
"RTN","XUMF1H",270,0)
 Q:ERROR
"RTN","XUMF1H",271,0)
 Q:EXIT
"RTN","XUMF1H",272,0)
 ;
"RTN","XUMF1H",273,0)
 D:$D(FDA) FILE^DIE(,"FDA","ERR")
"RTN","XUMF1H",274,0)
 I $D(ERR) D
"RTN","XUMF1H",275,0)
 .S ERROR="1^updating error"
"RTN","XUMF1H",276,0)
 .D EM(ERROR,.ERR) K ERR
"RTN","XUMF1H",277,0)
 ;
"RTN","XUMF1H",278,0)
 Q
"RTN","XUMF1H",279,0)
 ;
"RTN","XUMF1H",280,0)
ARRAY ; -- query data stored in array (not filed)
"RTN","XUMF1H",281,0)
 ;
"RTN","XUMF1H",282,0)
 S ^TMP("XUMF ARRAY",$J,IFN,VUID,$P(HLNODE,HLFS,2))=$P(HLNODE,HLFS,3)
"RTN","XUMF1H",283,0)
 ;
"RTN","XUMF1H",284,0)
 Q
"RTN","XUMF1H",285,0)
 ;
"RTN","XUMF1H",286,0)
ADD ; -- ADD-processing logic
"RTN","XUMF1H",287,0)
 ;
"RTN","XUMF1H",288,0)
 N X
"RTN","XUMF1H",289,0)
 ;
"RTN","XUMF1H",290,0)
 S X=$G(^DIC(4.001,+IFN,3)) X:X'="" X
"RTN","XUMF1H",291,0)
 ;
"RTN","XUMF1H",292,0)
 Q
"RTN","XUMF1H",293,0)
 ;
"RTN","XUMF1H",294,0)
MFE0 ; -- MFE-processing logic
"RTN","XUMF1H",295,0)
 ;if creating a new entry you must set IEN and other tasks performed in STUB^XUMF0 (if appropriate)
"RTN","XUMF1H",296,0)
 ;
"RTN","XUMF1H",297,0)
 N X
"RTN","XUMF1H",298,0)
 ;
"RTN","XUMF1H",299,0)
 S X=$G(^DIC(4.001,+IFN,4)) X:X'="" X
"RTN","XUMF1H",300,0)
 ;
"RTN","XUMF1H",301,0)
 Q
"RTN","XUMF1H",302,0)
 ;
"RTN","XUMF1H",303,0)
ZRT0 ; -- ZRT-processing logic
"RTN","XUMF1H",304,0)
 ;
"RTN","XUMF1H",305,0)
 N X
"RTN","XUMF1H",306,0)
 ;
"RTN","XUMF1H",307,0)
 S X=$G(^DIC(4.001,+IFN,5)) X:X'="" X
"RTN","XUMF1H",308,0)
 ;
"RTN","XUMF1H",309,0)
 Q
"RTN","XUMF1H",310,0)
 ;
"RTN","XUMF1H",311,0)
POST ; -- post-processing logic
"RTN","XUMF1H",312,0)
 ;
"RTN","XUMF1H",313,0)
 N X
"RTN","XUMF1H",314,0)
 ;
"RTN","XUMF1H",315,0)
 S X=$G(^DIC(4.001,+IFN,2)) X:X'="" X
"RTN","XUMF1H",316,0)
 ;
"RTN","XUMF1H",317,0)
 Q
"RTN","XUMF1H",318,0)
 ;
"RTN","XUMF1H",319,0)
EXIT ; -- cleanup, and quit
"RTN","XUMF1H",320,0)
 ;
"RTN","XUMF1H",321,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J),^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMF1H",322,0)
 ;
"RTN","XUMF1H",323,0)
 K ^TMP("XUMF MFS",$J),^TMP("XUMF ERROR",$J),^TMP("XUMF EVENT",$J)
"RTN","XUMF1H",324,0)
 ;
"RTN","XUMF1H",325,0)
 Q
"RTN","XUMF1H",326,0)
 ;
"RTN","XUMF1H",327,0)
REPLY ; -- MFK
"RTN","XUMF1H",328,0)
 ;
"RTN","XUMF1H",329,0)
 N X,I,I1,I2,CNT
"RTN","XUMF1H",330,0)
 ;
"RTN","XUMF1H",331,0)
 S CNT=1
"RTN","XUMF1H",332,0)
 S X="MSA"_HLFS_$S(ERROR:"AE",1:"AA")_HLFS_HL("MID")_HLFS_$P(ERROR,U,2)
"RTN","XUMF1H",333,0)
 S ^TMP("HLA",$J,CNT)=X
"RTN","XUMF1H",334,0)
 S CNT=CNT+1
"RTN","XUMF1H",335,0)
 ;
"RTN","XUMF1H",336,0)
 S I1="",I=0
"RTN","XUMF1H",337,0)
 F  S I1=$O(^TMP("XUMF ERROR",$J,I1)) Q:'$L(I1)  D
"RTN","XUMF1H",338,0)
 .S I2="" F  S I2=$O(^TMP("XUMF ERROR",$J,I1,I2)) Q:'$L(I2)  D
"RTN","XUMF1H",339,0)
 ..S X=$G(^(I2))
"RTN","XUMF1H",340,0)
 ..Q:'$L(X)
"RTN","XUMF1H",341,0)
 ..S I=I+1
"RTN","XUMF1H",342,0)
 ..S X="ERR"_HLFS_I_HLFS_$S($O(^TMP("XUMF ERROR",$J,I1))!$O(^TMP("XUMF ERROR",$J,I1,I2)):1,1:0)_HLFS_X
"RTN","XUMF1H",343,0)
 ..S ^TMP("HLA",$J,CNT)=X
"RTN","XUMF1H",344,0)
 ..S CNT=CNT+1
"RTN","XUMF1H",345,0)
 ;
"RTN","XUMF1H",346,0)
 D:ERROR EM^XUMF0
"RTN","XUMF1H",347,0)
 ;
"RTN","XUMF1H",348,0)
 D GENACK^HLMA1($G(HL("EID")),$G(HLMTIENS),$G(HL("EIDS")),"GM",1,.HLRESLT)
"RTN","XUMF1H",349,0)
 ;
"RTN","XUMF1H",350,0)
 Q
"RTN","XUMF1H",351,0)
 ;
"RTN","XUMF1H",352,0)
EM(ERROR,ERR) ; -- error message
"RTN","XUMF1H",353,0)
 ;
"RTN","XUMF1H",354,0)
 N X,I,Y
"RTN","XUMF1H",355,0)
 ;
"RTN","XUMF1H",356,0)
 D MSG^DIALOG("AM",.X,80,,"ERR")
"RTN","XUMF1H",357,0)
 ;
"RTN","XUMF1H",358,0)
 S ERRCNT=ERRCNT+1
"RTN","XUMF1H",359,0)
 ;
"RTN","XUMF1H",360,0)
 S ^TMP("XUMF ERROR",$J,ERRCNT_".01")=""
"RTN","XUMF1H",361,0)
 S ^TMP("XUMF ERROR",$J,ERRCNT_".02")=""
"RTN","XUMF1H",362,0)
 S ^TMP("XUMF ERROR",$J,ERRCNT_".03")=$G(ERROR)
"RTN","XUMF1H",363,0)
 S ^TMP("XUMF ERROR",$J,ERRCNT_".04")=""
"RTN","XUMF1H",364,0)
 S ^TMP("XUMF ERROR",$J,ERRCNT_".05")="VUID: "_$G(VUID)_"   IFN: "_$G(IFN)_"   IEN: "_IEN
"RTN","XUMF1H",365,0)
 S ^TMP("XUMF ERROR",$J,ERRCNT_".06")=""
"RTN","XUMF1H",366,0)
 S X=.9 F  S X=$O(X(X)) Q:'X  D
"RTN","XUMF1H",367,0)
 .S ^TMP("XUMF ERROR",$J,ERRCNT_"."_X)=X(X)
"RTN","XUMF1H",368,0)
 ;
"RTN","XUMF1H",369,0)
 Q
"RTN","XUMF1H",370,0)
 ;
"RTN","XUMF1H",371,0)
STATUS ;
"RTN","XUMF1H",372,0)
 ;
"RTN","XUMF1H",373,0)
 I VALUE=$P($$GETSTAT^XTID(IFN,,IEN_","),U) Q
"RTN","XUMF1H",374,0)
 ;
"RTN","XUMF1H",375,0)
 I SUBFILE="" S ERROR="1^status parameter error" Q
"RTN","XUMF1H",376,0)
 ;
"RTN","XUMF1H",377,0)
 N FDA
"RTN","XUMF1H",378,0)
 S FDA(SUBFILE,"?+1,"_IENS,.01)=$$NOW^XLFDT
"RTN","XUMF1H",379,0)
 S FDA(SUBFILE,"?+1,"_IENS,.02)=VALUE
"RTN","XUMF1H",380,0)
 D UPDATE^DIE(,"FDA",,"ERR")
"RTN","XUMF1H",381,0)
 I $D(ERR) D
"RTN","XUMF1H",382,0)
 .S ERROR="1^effective date and status error"
"RTN","XUMF1H",383,0)
 .D EM(ERROR,.ERR) K ERR
"RTN","XUMF1H",384,0)
 ;
"RTN","XUMF1H",385,0)
 Q
"RTN","XUMF1H",386,0)
 ;
"RTN","XUMF1H",387,0)
WP ;
"RTN","XUMF1H",388,0)
 ;
"RTN","XUMF1H",389,0)
 N X,Y,A,I,CNT,X1,X2,ESC
"RTN","XUMF1H",390,0)
 D SEGPRSE^XUMFXHL7("HLNODE","X",HLFS,60)
"RTN","XUMF1H",391,0)
 ;
"RTN","XUMF1H",392,0)
 S CNT=1
"RTN","XUMF1H",393,0)
 S A(CNT)=X(2)
"RTN","XUMF1H",394,0)
 S I=0
"RTN","XUMF1H",395,0)
 F  S I=$O(X(2,I)) Q:'I  D
"RTN","XUMF1H",396,0)
 .S Y=X(2,I)
"RTN","XUMF1H",397,0)
 .I $E(Y,1)=" " D  Q
"RTN","XUMF1H",398,0)
 ..S A(CNT)=A(CNT)_" "
"RTN","XUMF1H",399,0)
 ..Q:$P(Y," ",2)=""
"RTN","XUMF1H",400,0)
 ..S CNT=CNT+1
"RTN","XUMF1H",401,0)
 ..S A(CNT)=$P(Y," ",2,99)
"RTN","XUMF1H",402,0)
 .S X1=$P(Y," ",1)
"RTN","XUMF1H",403,0)
 .S X2=$P(Y," ",2,99)
"RTN","XUMF1H",404,0)
 .S A(CNT)=A(CNT)_X1_$S(X2="":"",1:" ")
"RTN","XUMF1H",405,0)
 .Q:X2=""
"RTN","XUMF1H",406,0)
 .S CNT=CNT+1
"RTN","XUMF1H",407,0)
 .S A(CNT)=X2
"RTN","XUMF1H",408,0)
 ;
"RTN","XUMF1H",409,0)
 D UNESCWP^XUMF0(.A,.HL)
"RTN","XUMF1H",410,0)
 ;
"RTN","XUMF1H",411,0)
 D WP^DIE(IFN,IENS,FIELD,"K","A","ERR")
"RTN","XUMF1H",412,0)
 ;
"RTN","XUMF1H",413,0)
 I $D(ERR) D
"RTN","XUMF1H",414,0)
 .S ERROR="1^wp field error"
"RTN","XUMF1H",415,0)
 .D EM(ERROR,.ERR) K ERR
"RTN","XUMF1H",416,0)
 ;
"RTN","XUMF1H",417,0)
 Q
"RTN","XUMF1H",418,0)
 ;
"RTN","XUMF1H",419,0)
RECORD ;MFS event protocol data
"RTN","XUMF1H",420,0)
 ;
"RTN","XUMF1H",421,0)
 N ROOT,NODE,NODE1,CHANGE,STATUS
"RTN","XUMF1H",422,0)
 ;
"RTN","XUMF1H",423,0)
 I $G(ERROR) D  Q
"RTN","XUMF1H",424,0)
 .S ^TMP("XUMF EVENT",$J,"ERROR")=ERROR
"RTN","XUMF1H",425,0)
 .S ^TMP("XUMF EVENT",$J,"ERROR",1)=$G(IFN)_U_$G(IEN)
"RTN","XUMF1H",426,0)
 ;
"RTN","XUMF1H",427,0)
 S ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMF1H",428,0)
 M RECORD("AFTER")=@ROOT@(IEN)
"RTN","XUMF1H",429,0)
 ;
"RTN","XUMF1H",430,0)
 I $G(RECORD("NEW")) M ^TMP("XUMF EVENT",$J,IFN,"NEW",IEN)=RECORD("AFTER") Q
"RTN","XUMF1H",431,0)
 ;
"RTN","XUMF1H",432,0)
 S ^TMP("XUMF EVENT",$J,IFN,"AFTER",IEN,"REPLACED BY")=$P($G(@ROOT@(IEN,"VUID")),U,3)
"RTN","XUMF1H",433,0)
 S ^TMP("XUMF EVENT",$J,IFN,"AFTER",IEN,"INHERITS FROM")=$$RPLCMNT^XTIDTRM(IFN,IEN)
"RTN","XUMF1H",434,0)
 ;
"RTN","XUMF1H",435,0)
 S STATUS=$$GETSTAT^XTID(IFN,,IEN_",")
"RTN","XUMF1H",436,0)
 I RECORD("STATUS")'=STATUS D
"RTN","XUMF1H",437,0)
 .S ^TMP("XUMF EVENT",$J,IFN,"STATUS",IEN)=$P(RECORD("STATUS"),U,1,2)_U_$P(STATUS,U,1,2)
"RTN","XUMF1H",438,0)
 ;
"RTN","XUMF1H",439,0)
 S NODE=$Q(RECORD("AFTER","")),NODE1=$Q(RECORD("BEFORE","")),CHANGE=0
"RTN","XUMF1H",440,0)
 I $P(NODE,"RECORD(""AFTER")'=$P(NODE1,"RECORD(""BEFORE") S CHANGE=1
"RTN","XUMF1H",441,0)
 I @NODE'=@NODE1 S CHANGE=1
"RTN","XUMF1H",442,0)
 I 'CHANGE FOR  SET NODE=$Q(@NODE) Q:NODE=""!(NODE["(""BEFORE")  D  Q:CHANGE
"RTN","XUMF1H",443,0)
 .S NODE1=$Q(@NODE1) I NODE1="" S CHANGE=1 Q
"RTN","XUMF1H",444,0)
 .I $P(NODE,"RECORD(""AFTER")'=$P(NODE1,"RECORD(""BEFORE") S CHANGE=1 Q
"RTN","XUMF1H",445,0)
 .I @NODE'=@NODE1 S CHANGE=1 Q
"RTN","XUMF1H",446,0)
 ;
"RTN","XUMF1H",447,0)
 I CHANGE D
"RTN","XUMF1H",448,0)
 .M ^TMP("XUMF EVENT",$J,IFN,"AFTER",IEN)=RECORD("AFTER")
"RTN","XUMF1H",449,0)
 .M ^TMP("XUMF EVENT",$J,IFN,"BEFORE",IEN)=RECORD("BEFORE")
"RTN","XUMF1H",450,0)
 ;
"RTN","XUMF1H",451,0)
 Q
"RTN","XUMF1H",452,0)
 ;
"VER")
8.0^22.0
**END**
**END**

Released ROR*1.5*10 SEQ #10
Extracted from mail message
**KIDS**:ROR*1.5*10^

**INSTALL NAME**
ROR*1.5*10
"BLD",7577,0)
ROR*1.5*10^CLINICAL CASE REGISTRIES^0^3100323^y
"BLD",7577,1,0)
^^2^2^3091008^^
"BLD",7577,1,1,0)
Clinical Case Registries patch ROR*1.5*10.  See Patch Description for
"BLD",7577,1,2,0)
details.
"BLD",7577,4,0)
^9.64PA^798^2
"BLD",7577,4,798,0)
798
"BLD",7577,4,798,2,0)
^9.641^798^1
"BLD",7577,4,798,2,798,0)
ROR REGISTRY RECORD  (File-top level)
"BLD",7577,4,798,2,798,1,0)
^9.6411^11^1
"BLD",7577,4,798,2,798,1,11,0)
DON'T SEND
"BLD",7577,4,798,222)
y^n^p^^^^n^^n
"BLD",7577,4,798,224)

"BLD",7577,4,799.1,0)
799.1
"BLD",7577,4,799.1,2,0)
^9.641^799.1^1
"BLD",7577,4,799.1,2,799.1,0)
ROR LIST ITEM  (File-top level)
"BLD",7577,4,799.1,2,799.1,1,0)
^9.6411^.02^1
"BLD",7577,4,799.1,2,799.1,1,.02,0)
TYPE
"BLD",7577,4,799.1,222)
y^n^p^^^^n^^n
"BLD",7577,4,799.1,224)

"BLD",7577,4,"APDD",798,798)

"BLD",7577,4,"APDD",798,798,11)

"BLD",7577,4,"APDD",799.1,799.1)

"BLD",7577,4,"APDD",799.1,799.1,.02)

"BLD",7577,4,"B",798,798)

"BLD",7577,4,"B",799.1,799.1)

"BLD",7577,6.3)
32
"BLD",7577,"INID")
^y
"BLD",7577,"INIT")
RORP010
"BLD",7577,"KRN",0)
^9.67PA^779.2^20
"BLD",7577,"KRN",.4,0)
.4
"BLD",7577,"KRN",.401,0)
.401
"BLD",7577,"KRN",.402,0)
.402
"BLD",7577,"KRN",.403,0)
.403
"BLD",7577,"KRN",.5,0)
.5
"BLD",7577,"KRN",.84,0)
.84
"BLD",7577,"KRN",.84,"NM",0)
^9.68A^28^24
"BLD",7577,"KRN",.84,"NM",1,0)
7981001.001^^0
"BLD",7577,"KRN",.84,"NM",5,0)
7981018.001^^0
"BLD",7577,"KRN",.84,"NM",7,0)
7981018.002^^0
"BLD",7577,"KRN",.84,"NM",8,0)
7981019.001^^0
"BLD",7577,"KRN",.84,"NM",9,0)
7981019.002^^0
"BLD",7577,"KRN",.84,"NM",10,0)
7981020.001^^0
"BLD",7577,"KRN",.84,"NM",11,0)
7981020.002^^0
"BLD",7577,"KRN",.84,"NM",12,0)
7981998.001^^0
"BLD",7577,"KRN",.84,"NM",13,0)
7981999.001^^0
"BLD",7577,"KRN",.84,"NM",14,0)
7981002.001^^0
"BLD",7577,"KRN",.84,"NM",15,0)
7981003.001^^0
"BLD",7577,"KRN",.84,"NM",16,0)
7981004.001^^0
"BLD",7577,"KRN",.84,"NM",17,0)
7981005.001^^0
"BLD",7577,"KRN",.84,"NM",18,0)
7981006.001^^0
"BLD",7577,"KRN",.84,"NM",19,0)
7981007.001^^0
"BLD",7577,"KRN",.84,"NM",20,0)
7981008.001^^0
"BLD",7577,"KRN",.84,"NM",21,0)
7981009.001^^0
"BLD",7577,"KRN",.84,"NM",22,0)
7981010.001^^0
"BLD",7577,"KRN",.84,"NM",23,0)
7981011.001^^0
"BLD",7577,"KRN",.84,"NM",24,0)
7981012.001^^0
"BLD",7577,"KRN",.84,"NM",25,0)
7981013.001^^0
"BLD",7577,"KRN",.84,"NM",26,0)
7981014.001^^0
"BLD",7577,"KRN",.84,"NM",27,0)
7981015.001^^0
"BLD",7577,"KRN",.84,"NM",28,0)
7981016.001^^0
"BLD",7577,"KRN",.84,"NM","B",7981001.001,1)

"BLD",7577,"KRN",.84,"NM","B",7981002.001,14)

"BLD",7577,"KRN",.84,"NM","B",7981003.001,15)

"BLD",7577,"KRN",.84,"NM","B",7981004.001,16)

"BLD",7577,"KRN",.84,"NM","B",7981005.001,17)

"BLD",7577,"KRN",.84,"NM","B",7981006.001,18)

"BLD",7577,"KRN",.84,"NM","B",7981007.001,19)

"BLD",7577,"KRN",.84,"NM","B",7981008.001,20)

"BLD",7577,"KRN",.84,"NM","B",7981009.001,21)

"BLD",7577,"KRN",.84,"NM","B",7981010.001,22)

"BLD",7577,"KRN",.84,"NM","B",7981011.001,23)

"BLD",7577,"KRN",.84,"NM","B",7981012.001,24)

"BLD",7577,"KRN",.84,"NM","B",7981013.001,25)

"BLD",7577,"KRN",.84,"NM","B",7981014.001,26)

"BLD",7577,"KRN",.84,"NM","B",7981015.001,27)

"BLD",7577,"KRN",.84,"NM","B",7981016.001,28)

"BLD",7577,"KRN",.84,"NM","B",7981018.001,5)

"BLD",7577,"KRN",.84,"NM","B",7981018.002,7)

"BLD",7577,"KRN",.84,"NM","B",7981019.001,8)

"BLD",7577,"KRN",.84,"NM","B",7981019.002,9)

"BLD",7577,"KRN",.84,"NM","B",7981020.001,10)

"BLD",7577,"KRN",.84,"NM","B",7981020.002,11)

"BLD",7577,"KRN",.84,"NM","B",7981998.001,12)

"BLD",7577,"KRN",.84,"NM","B",7981999.001,13)

"BLD",7577,"KRN",3.6,0)
3.6
"BLD",7577,"KRN",3.8,0)
3.8
"BLD",7577,"KRN",9.2,0)
9.2
"BLD",7577,"KRN",9.8,0)
9.8
"BLD",7577,"KRN",9.8,"NM",0)
^9.68A^19^19
"BLD",7577,"KRN",9.8,"NM",1,0)
RORRP016^^0^B71590151
"BLD",7577,"KRN",9.8,"NM",2,0)
RORHL12^^0^B62261520
"BLD",7577,"KRN",9.8,"NM",3,0)
RORHL17^^0^B29156798
"BLD",7577,"KRN",9.8,"NM",4,0)
RORX005A^^0^B34309932
"BLD",7577,"KRN",9.8,"NM",5,0)
RORDD^^0^B41565322
"BLD",7577,"KRN",9.8,"NM",6,0)
RORX001^^0^B38212048
"BLD",7577,"KRN",9.8,"NM",7,0)
RORX018^^0^B143613581
"BLD",7577,"KRN",9.8,"NM",8,0)
RORX019^^0^B207206529
"BLD",7577,"KRN",9.8,"NM",9,0)
RORX020^^0^B197363387
"BLD",7577,"KRN",9.8,"NM",10,0)
ROREXT02^^0^B43142852
"BLD",7577,"KRN",9.8,"NM",11,0)
RORXU002^^0^B85745413
"BLD",7577,"KRN",9.8,"NM",12,0)
RORHL18^^0^B14567197
"BLD",7577,"KRN",9.8,"NM",13,0)
RORHL19^^0^B14660598
"BLD",7577,"KRN",9.8,"NM",14,0)
ROREXT01^^0^B52017424
"BLD",7577,"KRN",9.8,"NM",15,0)
RORX020A^^0^B38074904
"BLD",7577,"KRN",9.8,"NM",16,0)
RORX019A^^0^B8227463
"BLD",7577,"KRN",9.8,"NM",17,0)
RORHDT04^^0^B57779616
"BLD",7577,"KRN",9.8,"NM",18,0)
RORUPD50^^0^B15673892
"BLD",7577,"KRN",9.8,"NM",19,0)
RORRP030^^0^B2779702
"BLD",7577,"KRN",9.8,"NM","B","RORDD",5)

"BLD",7577,"KRN",9.8,"NM","B","ROREXT01",14)

"BLD",7577,"KRN",9.8,"NM","B","ROREXT02",10)

"BLD",7577,"KRN",9.8,"NM","B","RORHDT04",17)

"BLD",7577,"KRN",9.8,"NM","B","RORHL12",2)

"BLD",7577,"KRN",9.8,"NM","B","RORHL17",3)

"BLD",7577,"KRN",9.8,"NM","B","RORHL18",12)

"BLD",7577,"KRN",9.8,"NM","B","RORHL19",13)

"BLD",7577,"KRN",9.8,"NM","B","RORRP016",1)

"BLD",7577,"KRN",9.8,"NM","B","RORRP030",19)

"BLD",7577,"KRN",9.8,"NM","B","RORUPD50",18)

"BLD",7577,"KRN",9.8,"NM","B","RORX001",6)

"BLD",7577,"KRN",9.8,"NM","B","RORX005A",4)

"BLD",7577,"KRN",9.8,"NM","B","RORX018",7)

"BLD",7577,"KRN",9.8,"NM","B","RORX019",8)

"BLD",7577,"KRN",9.8,"NM","B","RORX019A",16)

"BLD",7577,"KRN",9.8,"NM","B","RORX020",9)

"BLD",7577,"KRN",9.8,"NM","B","RORX020A",15)

"BLD",7577,"KRN",9.8,"NM","B","RORXU002",11)

"BLD",7577,"KRN",19,0)
19
"BLD",7577,"KRN",19.1,0)
19.1
"BLD",7577,"KRN",101,0)
101
"BLD",7577,"KRN",409.61,0)
409.61
"BLD",7577,"KRN",771,0)
771
"BLD",7577,"KRN",779.2,0)
779.2
"BLD",7577,"KRN",870,0)
870
"BLD",7577,"KRN",8989.51,0)
8989.51
"BLD",7577,"KRN",8989.51,"NM",0)
^9.68A^^0
"BLD",7577,"KRN",8989.52,0)
8989.52
"BLD",7577,"KRN",8989.52,"NM",0)
^9.68A^^
"BLD",7577,"KRN",8994,0)
8994
"BLD",7577,"KRN","B",.4,.4)

"BLD",7577,"KRN","B",.401,.401)

"BLD",7577,"KRN","B",.402,.402)

"BLD",7577,"KRN","B",.403,.403)

"BLD",7577,"KRN","B",.5,.5)

"BLD",7577,"KRN","B",.84,.84)

"BLD",7577,"KRN","B",3.6,3.6)

"BLD",7577,"KRN","B",3.8,3.8)

"BLD",7577,"KRN","B",9.2,9.2)

"BLD",7577,"KRN","B",9.8,9.8)

"BLD",7577,"KRN","B",19,19)

"BLD",7577,"KRN","B",19.1,19.1)

"BLD",7577,"KRN","B",101,101)

"BLD",7577,"KRN","B",409.61,409.61)

"BLD",7577,"KRN","B",771,771)

"BLD",7577,"KRN","B",779.2,779.2)

"BLD",7577,"KRN","B",870,870)

"BLD",7577,"KRN","B",8989.51,8989.51)

"BLD",7577,"KRN","B",8989.52,8989.52)

"BLD",7577,"KRN","B",8994,8994)

"BLD",7577,"QUES",0)
^9.62^^
"BLD",7577,"REQB",0)
^9.611^2^2
"BLD",7577,"REQB",1,0)
ROR*1.5*8^2
"BLD",7577,"REQB",2,0)
GMRV*5.0*23^2
"BLD",7577,"REQB","B","GMRV*5.0*23",2)

"BLD",7577,"REQB","B","ROR*1.5*8",1)

"FIA",798)
ROR REGISTRY RECORD
"FIA",798,0)
^RORDATA(798,
"FIA",798,0,0)
798PAs
"FIA",798,0,1)
y^n^p^^^^n^^n
"FIA",798,0,10)

"FIA",798,0,11)

"FIA",798,0,"RLRO")

"FIA",798,0,"VR")
1.5^ROR
"FIA",798,798)
1
"FIA",798,798,11)

"FIA",799.1)
ROR LIST ITEM
"FIA",799.1,0)
^ROR(799.1,
"FIA",799.1,0,0)
799.1
"FIA",799.1,0,1)
y^n^p^^^^n^^n
"FIA",799.1,0,10)

"FIA",799.1,0,11)

"FIA",799.1,0,"RLRO")

"FIA",799.1,0,"VR")
1.5^ROR
"FIA",799.1,799.1)
1
"FIA",799.1,799.1,.02)

"INIT")
RORP010
"IX",799.1,799.1,"KEY",0)
799.1^KEY^Uniqueness Index for the "A" Key of File #799.1^R^^R^IR^I^799.1^^^^^LS
"IX",799.1,799.1,"KEY",1)
S ^ROR(799.1,"KEY",X(1),X(2),X(3),DA)=""
"IX",799.1,799.1,"KEY",2)
K ^ROR(799.1,"KEY",X(1),X(2),X(3),DA)
"IX",799.1,799.1,"KEY",2.5)
K ^ROR(799.1,"KEY")
"IX",799.1,799.1,"KEY",11.1,0)
^.114IA^3^3
"IX",799.1,799.1,"KEY",11.1,1,0)
1^F^799.1^.02^^1
"IX",799.1,799.1,"KEY",11.1,2,0)
2^F^799.1^.03^^2
"IX",799.1,799.1,"KEY",11.1,3,0)
3^F^799.1^.04^^3
"KEY",799.1,799.1,"A",0)
799.1^A^P^150
"KEY",799.1,799.1,"A",2,0)
^.312IA^3^3
"KEY",799.1,799.1,"A",2,1,0)
.02^799.1^1
"KEY",799.1,799.1,"A",2,2,0)
.03^799.1^2
"KEY",799.1,799.1,"A",2,3,0)
.04^799.1^3
"KEYPTR",799.1,799.1,"A")
799.1^KEY
"KRN",.84,7981001.001,-1)
0^1
"KRN",.84,7981001.001,0)
7981001.001^2^^CLINICAL CASE REGISTRIES^List of Registry Patients (HTML)
"KRN",.84,7981001.001,2,0)
^.844^91^91^3100218^^
"KRN",.84,7981001.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981001.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981001.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981001.001,2,4,0)
>
"KRN",.84,7981001.001,2,5,0)
 
"KRN",.84,7981001.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981001.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981001.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981001.001,2,9,0)
 
"KRN",.84,7981001.001,2,10,0)
<xsl:template match="/">
"KRN",.84,7981001.001,2,11,0)
 <html>
"KRN",.84,7981001.001,2,12,0)
  <head>
"KRN",.84,7981001.001,2,13,0)
   <title>List of Registry Patients</title>
"KRN",.84,7981001.001,2,14,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981001.001,2,15,0)
  </head>
"KRN",.84,7981001.001,2,16,0)
  <body>
"KRN",.84,7981001.001,2,17,0)
   <h1>List of Registry Patients</h1>
"KRN",.84,7981001.001,2,18,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981001.001,2,19,0)
   <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981001.001,2,20,0)
   <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981001.001,2,21,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981001.001,2,22,0)
   <div>
"KRN",.84,7981001.001,2,23,0)
    <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981001.001,2,24,0)
   </div>
"KRN",.84,7981001.001,2,25,0)
  </body>
"KRN",.84,7981001.001,2,26,0)
 </html>
"KRN",.84,7981001.001,2,27,0)
</xsl:template>
"KRN",.84,7981001.001,2,28,0)
 
"KRN",.84,7981001.001,2,29,0)
<!--[ COLUMN HEADERS ]--> 
"KRN",.84,7981001.001,2,30,0)
 
"KRN",.84,7981001.001,2,31,0)
<xsl:template match="COLUMN[@NAME='SELDT']">
"KRN",.84,7981001.001,2,32,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981001.001,2,33,0)
  <xsl:with-param name="title" select="'Selection Date'"/>
"KRN",.84,7981001.001,2,34,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981001.001,2,35,0)
 </xsl:call-template>
"KRN",.84,7981001.001,2,36,0)
</xsl:template>
"KRN",.84,7981001.001,2,37,0)
 
"KRN",.84,7981001.001,2,38,0)
<xsl:template match="COLUMN[@NAME='CONFDT']">
"KRN",.84,7981001.001,2,39,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981001.001,2,40,0)
  <xsl:with-param name="title" select="'Confirmation Date'"/>
"KRN",.84,7981001.001,2,41,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981001.001,2,42,0)
 </xsl:call-template>
"KRN",.84,7981001.001,2,43,0)
</xsl:template>
"KRN",.84,7981001.001,2,44,0)
 
"KRN",.84,7981001.001,2,45,0)
<xsl:template match="COLUMN[@NAME='SELRULES']">
"KRN",.84,7981001.001,2,46,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981001.001,2,47,0)
  <xsl:with-param name="title" select="'Reasons'"/>
"KRN",.84,7981001.001,2,48,0)
  <xsl:with-param name="sort" select="''"/>                   
"KRN",.84,7981001.001,2,49,0)
 </xsl:call-template>
"KRN",.84,7981001.001,2,50,0)
</xsl:template>
"KRN",.84,7981001.001,2,51,0)
 
"KRN",.84,7981001.001,2,52,0)
<xsl:template match="COLUMN[@NAME='PENDCOMM']">
"KRN",.84,7981001.001,2,53,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981001.001,2,54,0)
  <xsl:with-param name="title" select="'Pending Comments'"/>
"KRN",.84,7981001.001,2,55,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981001.001,2,56,0)
 </xsl:call-template>
"KRN",.84,7981001.001,2,57,0)
</xsl:template>
"KRN",.84,7981001.001,2,58,0)
 
"KRN",.84,7981001.001,2,59,0)
 
"KRN",.84,7981001.001,2,60,0)
<!--[ CELL VALUES ]--> 
"KRN",.84,7981001.001,2,61,0)
 
"KRN",.84,7981001.001,2,62,0)
<xsl:template match="PATIENT/SELDT">
"KRN",.84,7981001.001,2,63,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981001.001,2,64,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981001.001,2,65,0)
 </xsl:call-template>
"KRN",.84,7981001.001,2,66,0)
</xsl:template>
"KRN",.84,7981001.001,2,67,0)
 
"KRN",.84,7981001.001,2,68,0)
<xsl:template match="PATIENT/CONFDT">
"KRN",.84,7981001.001,2,69,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981001.001,2,70,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981001.001,2,71,0)
 </xsl:call-template>
"KRN",.84,7981001.001,2,72,0)
</xsl:template>
"KRN",.84,7981001.001,2,73,0)
 
"KRN",.84,7981001.001,2,74,0)
<xsl:template match="PATIENT/SELRULES">
"KRN",.84,7981001.001,2,75,0)
 <td class="selectionRules">
"KRN",.84,7981001.001,2,76,0)
  <xsl:for-each select="RULE">
"KRN",.84,7981001.001,2,77,0)
   <xsl:value-of select="@DESCR"/>
"KRN",.84,7981001.001,2,78,0)
   <xsl:if test="@DESCR=''"><xsl:text>&#160;</xsl:text></xsl:if>
"KRN",.84,7981001.001,2,79,0)
   <br/>
"KRN",.84,7981001.001,2,80,0)
  </xsl:for-each>
"KRN",.84,7981001.001,2,81,0)
 </td>
"KRN",.84,7981001.001,2,82,0)
</xsl:template>
"KRN",.84,7981001.001,2,83,0)
 
"KRN",.84,7981001.001,2,84,0)
<xsl:template match="PATIENT/PENDCOMM">
"KRN",.84,7981001.001,2,85,0)
  <td class="aLeft">
"KRN",.84,7981001.001,2,86,0)
   <xsl:value-of select="."/>
"KRN",.84,7981001.001,2,87,0)
   <xsl:if test="current()=''"><xsl:text>&#160;</xsl:text></xsl:if>
"KRN",.84,7981001.001,2,88,0)
  </td>
"KRN",.84,7981001.001,2,89,0)
</xsl:template>
"KRN",.84,7981001.001,2,90,0)
 
"KRN",.84,7981001.001,2,91,0)
</xsl:stylesheet>
"KRN",.84,7981002.001,-1)
0^14
"KRN",.84,7981002.001,0)
7981002.001^2^^CLINICAL CASE REGISTRIES^Current Inpatient List (HTML)
"KRN",.84,7981002.001,2,0)
^^45^45^3100218^
"KRN",.84,7981002.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981002.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981002.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981002.001,2,4,0)
>
"KRN",.84,7981002.001,2,5,0)
 
"KRN",.84,7981002.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981002.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981002.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981002.001,2,9,0)
 
"KRN",.84,7981002.001,2,10,0)
<xsl:template match="/">
"KRN",.84,7981002.001,2,11,0)
 <html>
"KRN",.84,7981002.001,2,12,0)
  <head>
"KRN",.84,7981002.001,2,13,0)
   <title>Current Inpatient List</title>
"KRN",.84,7981002.001,2,14,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981002.001,2,15,0)
  </head>
"KRN",.84,7981002.001,2,16,0)
  <body>
"KRN",.84,7981002.001,2,17,0)
   <h1>Current Inpatient List</h1>
"KRN",.84,7981002.001,2,18,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981002.001,2,19,0)
   <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981002.001,2,20,0)
   <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981002.001,2,21,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981002.001,2,22,0)
   <div>
"KRN",.84,7981002.001,2,23,0)
    <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981002.001,2,24,0)
   </div>
"KRN",.84,7981002.001,2,25,0)
  </body>
"KRN",.84,7981002.001,2,26,0)
 </html>
"KRN",.84,7981002.001,2,27,0)
</xsl:template>
"KRN",.84,7981002.001,2,28,0)
 
"KRN",.84,7981002.001,2,29,0)
<!--[ COLUMN HEADERS ]--> 
"KRN",.84,7981002.001,2,30,0)
 
"KRN",.84,7981002.001,2,31,0)
<xsl:template match="COLUMN[@NAME='ROOM-BED']">
"KRN",.84,7981002.001,2,32,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981002.001,2,33,0)
  <xsl:with-param name="title" select="'Room-Bed'"/>
"KRN",.84,7981002.001,2,34,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981002.001,2,35,0)
 </xsl:call-template>
"KRN",.84,7981002.001,2,36,0)
</xsl:template>
"KRN",.84,7981002.001,2,37,0)
 
"KRN",.84,7981002.001,2,38,0)
<xsl:template match="COLUMN[@NAME='WARD']">
"KRN",.84,7981002.001,2,39,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981002.001,2,40,0)
  <xsl:with-param name="title" select="'Ward'"/>
"KRN",.84,7981002.001,2,41,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981002.001,2,42,0)
 </xsl:call-template>
"KRN",.84,7981002.001,2,43,0)
</xsl:template>
"KRN",.84,7981002.001,2,44,0)
 
"KRN",.84,7981002.001,2,45,0)
</xsl:stylesheet>
"KRN",.84,7981003.001,-1)
0^15
"KRN",.84,7981003.001,0)
7981003.001^2^^CLINICAL CASE REGISTRIES^General Utiliz. and Demogr. (HTML)
"KRN",.84,7981003.001,2,0)
^^295^295^3100218^
"KRN",.84,7981003.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981003.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981003.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981003.001,2,4,0)
>
"KRN",.84,7981003.001,2,5,0)
 
"KRN",.84,7981003.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981003.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981003.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->            
"KRN",.84,7981003.001,2,9,0)
 
"KRN",.84,7981003.001,2,10,0)
<xsl:template match="/">
"KRN",.84,7981003.001,2,11,0)
 <xsl:variable name="sum" select="/REPORT/SUMMARY"/>
"KRN",.84,7981003.001,2,12,0)
 <xsl:variable name="wide_summaries" 
"KRN",.84,7981003.001,2,13,0)
      select="$sum/RISK_FACTORS|$sum/RACE_SUMMARY|$sum/ETHN_SUMMARY|
"KRN",.84,7981003.001,2,14,0)
              $sum/UTIL_CODES"/>
"KRN",.84,7981003.001,2,15,0)
 <xsl:variable name="narrow_summaries"
"KRN",.84,7981003.001,2,16,0)
      select="$sum/AGE_SUMMARY|$sum/SEX_SUMMARY|
"KRN",.84,7981003.001,2,17,0)
              $sum/DOB_SUMMARY|$sum/DOD_SUMMARY|
"KRN",.84,7981003.001,2,18,0)
              $sum/SELDT_SUMMARY|$sum/CONFDT_SUMMARY"/>
"KRN",.84,7981003.001,2,19,0)
 <html>
"KRN",.84,7981003.001,2,20,0)
  <head>
"KRN",.84,7981003.001,2,21,0)
   <title>General Utilization and Demographics</title>
"KRN",.84,7981003.001,2,22,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981003.001,2,23,0)
  </head>
"KRN",.84,7981003.001,2,24,0)
  <body>
"KRN",.84,7981003.001,2,25,0)
   <h1>General Utilization and Demographics</h1>
"KRN",.84,7981003.001,2,26,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981003.001,2,27,0)
   <xsl:choose>
"KRN",.84,7981003.001,2,28,0)
    <xsl:when test="/REPORT/PATIENTS/*[1]">
"KRN",.84,7981003.001,2,29,0)
     <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981003.001,2,30,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981003.001,2,31,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981003.001,2,32,0)
     <div>
"KRN",.84,7981003.001,2,33,0)
      <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981003.001,2,34,0)
     </div>
"KRN",.84,7981003.001,2,35,0)
    </xsl:when>
"KRN",.84,7981003.001,2,36,0)
    <xsl:otherwise>
"KRN",.84,7981003.001,2,37,0)
     <xsl:call-template name="TableNoData"/>
"KRN",.84,7981003.001,2,38,0)
    </xsl:otherwise>
"KRN",.84,7981003.001,2,39,0)
   </xsl:choose>
"KRN",.84,7981003.001,2,40,0)
   <xsl:if test="$sum/*[1]">
"KRN",.84,7981003.001,2,41,0)
    <div class="reportSummary">
"KRN",.84,7981003.001,2,42,0)
     <xsl:if test="$wide_summaries">
"KRN",.84,7981003.001,2,43,0)
      <div style="float:left; width:68%; margin-right:1%">
"KRN",.84,7981003.001,2,44,0)
       <xsl:apply-templates select="$wide_summaries"/>
"KRN",.84,7981003.001,2,45,0)
      </div>
"KRN",.84,7981003.001,2,46,0)
     </xsl:if>
"KRN",.84,7981003.001,2,47,0)
     <xsl:if test="$narrow_summaries">
"KRN",.84,7981003.001,2,48,0)
      <div style="float:left; width:30%">
"KRN",.84,7981003.001,2,49,0)
       <xsl:apply-templates select="$narrow_summaries"/>
"KRN",.84,7981003.001,2,50,0)
      </div>
"KRN",.84,7981003.001,2,51,0)
     </xsl:if>
"KRN",.84,7981003.001,2,52,0)
    </div>
"KRN",.84,7981003.001,2,53,0)
   </xsl:if>
"KRN",.84,7981003.001,2,54,0)
  </body>
"KRN",.84,7981003.001,2,55,0)
 </html>
"KRN",.84,7981003.001,2,56,0)
</xsl:template>
"KRN",.84,7981003.001,2,57,0)
 
"KRN",.84,7981003.001,2,58,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981003.001,2,59,0)
 
"KRN",.84,7981003.001,2,60,0)
<xsl:template name="SummaryLine">
"KRN",.84,7981003.001,2,61,0)
 <xsl:param name="line" select="."/>
"KRN",.84,7981003.001,2,62,0)
 <td class="aLeft"><xsl:value-of select="$line"/></td>
"KRN",.84,7981003.001,2,63,0)
 <td>
"KRN",.84,7981003.001,2,64,0)
  <xsl:value-of select="$line/@COUNT"/>
"KRN",.84,7981003.001,2,65,0)
  <xsl:if test="$line/@COUNT=''">&#160;</xsl:if>
"KRN",.84,7981003.001,2,66,0)
 </td>
"KRN",.84,7981003.001,2,67,0)
</xsl:template>
"KRN",.84,7981003.001,2,68,0)
 
"KRN",.84,7981003.001,2,69,0)
<!--[ COLUMN HEADERS ]-->
"KRN",.84,7981003.001,2,70,0)
 
"KRN",.84,7981003.001,2,71,0)
<xsl:template match="COLUMN[@NAME='RISK']">
"KRN",.84,7981003.001,2,72,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981003.001,2,73,0)
  <xsl:with-param name="title" select="'Risk Factors'"/>
"KRN",.84,7981003.001,2,74,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981003.001,2,75,0)
 </xsl:call-template>
"KRN",.84,7981003.001,2,76,0)
</xsl:template>
"KRN",.84,7981003.001,2,77,0)
 
"KRN",.84,7981003.001,2,78,0)
<xsl:template match="COLUMN[@NAME='UTIL']">
"KRN",.84,7981003.001,2,79,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981003.001,2,80,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981003.001,2,81,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981003.001,2,82,0)
 </xsl:call-template>
"KRN",.84,7981003.001,2,83,0)
</xsl:template>
"KRN",.84,7981003.001,2,84,0)
 
"KRN",.84,7981003.001,2,85,0)
<!--[ SUMMARY TABLES ]--> 
"KRN",.84,7981003.001,2,86,0)
 
"KRN",.84,7981003.001,2,87,0)
<xsl:template match="SUMMARY/AGE_SUMMARY">
"KRN",.84,7981003.001,2,88,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.001,2,89,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.001,2,90,0)
  <table cellpadding="3" cellspacing="0">
"KRN",.84,7981003.001,2,91,0)
   <caption>Age Summary</caption>
"KRN",.84,7981003.001,2,92,0)
   <thead>
"KRN",.84,7981003.001,2,93,0)
    <tr>
"KRN",.84,7981003.001,2,94,0)
     <th>Age</th>
"KRN",.84,7981003.001,2,95,0)
     <th width="30">Count<br/>(Value)</th>
"KRN",.84,7981003.001,2,96,0)
    </tr>
"KRN",.84,7981003.001,2,97,0)
   </thead>
"KRN",.84,7981003.001,2,98,0)
   <tbody>
"KRN",.84,7981003.001,2,99,0)
    <xsl:for-each select="$summary/AGE">
"KRN",.84,7981003.001,2,100,0)
     <tr><xsl:call-template name="SummaryLine"/></tr>
"KRN",.84,7981003.001,2,101,0)
    </xsl:for-each>
"KRN",.84,7981003.001,2,102,0)
   </tbody>
"KRN",.84,7981003.001,2,103,0)
  </table>
"KRN",.84,7981003.001,2,104,0)
 </xsl:if>
"KRN",.84,7981003.001,2,105,0)
</xsl:template>
"KRN",.84,7981003.001,2,106,0)
 
"KRN",.84,7981003.001,2,107,0)
<xsl:template match="SUMMARY/CONFDT_SUMMARY">
"KRN",.84,7981003.001,2,108,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.001,2,109,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.001,2,110,0)
  <table cellpadding="3" cellspacing="0">
"KRN",.84,7981003.001,2,111,0)
   <caption>Confirmation Date Summary</caption>
"KRN",.84,7981003.001,2,112,0)
   <thead>
"KRN",.84,7981003.001,2,113,0)
    <tr>
"KRN",.84,7981003.001,2,114,0)
     <th>Confirmation Date</th>
"KRN",.84,7981003.001,2,115,0)
     <th width="30">Count</th>
"KRN",.84,7981003.001,2,116,0)
    </tr>
"KRN",.84,7981003.001,2,117,0)
   </thead>
"KRN",.84,7981003.001,2,118,0)
   <tbody>
"KRN",.84,7981003.001,2,119,0)
    <xsl:for-each select="$summary/CONFDT">
"KRN",.84,7981003.001,2,120,0)
     <tr><xsl:call-template name="SummaryLine"/></tr>
"KRN",.84,7981003.001,2,121,0)
    </xsl:for-each>
"KRN",.84,7981003.001,2,122,0)
   </tbody>
"KRN",.84,7981003.001,2,123,0)
  </table>
"KRN",.84,7981003.001,2,124,0)
 </xsl:if>
"KRN",.84,7981003.001,2,125,0)
</xsl:template>
"KRN",.84,7981003.001,2,126,0)
 
"KRN",.84,7981003.001,2,127,0)
<xsl:template match="SUMMARY/DOB_SUMMARY">
"KRN",.84,7981003.001,2,128,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.001,2,129,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.001,2,130,0)
  <table cellpadding="3" cellspacing="0">
"KRN",.84,7981003.001,2,131,0)
   <caption>Date of Birth Summary</caption>
"KRN",.84,7981003.001,2,132,0)
   <thead>
"KRN",.84,7981003.001,2,133,0)
    <tr>
"KRN",.84,7981003.001,2,134,0)
     <th>Date of Birth</th>
"KRN",.84,7981003.001,2,135,0)
     <th width="30">Count</th>
"KRN",.84,7981003.001,2,136,0)
    </tr>
"KRN",.84,7981003.001,2,137,0)
   </thead>
"KRN",.84,7981003.001,2,138,0)
   <tbody>
"KRN",.84,7981003.001,2,139,0)
    <xsl:for-each select="$summary/DOB">
"KRN",.84,7981003.001,2,140,0)
     <tr><xsl:call-template name="SummaryLine"/></tr>
"KRN",.84,7981003.001,2,141,0)
    </xsl:for-each>
"KRN",.84,7981003.001,2,142,0)
   </tbody>
"KRN",.84,7981003.001,2,143,0)
  </table>
"KRN",.84,7981003.001,2,144,0)
 </xsl:if>
"KRN",.84,7981003.001,2,145,0)
</xsl:template>
"KRN",.84,7981003.001,2,146,0)
 
"KRN",.84,7981003.001,2,147,0)
<xsl:template match="SUMMARY/DOD_SUMMARY">
"KRN",.84,7981003.001,2,148,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.001,2,149,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.001,2,150,0)
  <table cellpadding="3" cellspacing="0">
"KRN",.84,7981003.001,2,151,0)
   <caption>Date of Death Summary</caption>
"KRN",.84,7981003.001,2,152,0)
   <thead>
"KRN",.84,7981003.001,2,153,0)
    <tr>
"KRN",.84,7981003.001,2,154,0)
     <th>Date of Death</th>
"KRN",.84,7981003.001,2,155,0)
     <th width="30">Count</th>
"KRN",.84,7981003.001,2,156,0)
    </tr>
"KRN",.84,7981003.001,2,157,0)
   </thead>
"KRN",.84,7981003.001,2,158,0)
   <tbody>
"KRN",.84,7981003.001,2,159,0)
    <xsl:for-each select="$summary/DOD">
"KRN",.84,7981003.001,2,160,0)
     <tr><xsl:call-template name="SummaryLine"/></tr>
"KRN",.84,7981003.001,2,161,0)
    </xsl:for-each>
"KRN",.84,7981003.001,2,162,0)
   </tbody>
"KRN",.84,7981003.001,2,163,0)
  </table>
"KRN",.84,7981003.001,2,164,0)
 </xsl:if>
"KRN",.84,7981003.001,2,165,0)
</xsl:template>
"KRN",.84,7981003.001,2,166,0)
 
"KRN",.84,7981003.001,2,167,0)
<xsl:template match="SUMMARY/ETHN_SUMMARY">
"KRN",.84,7981003.001,2,168,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.001,2,169,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.001,2,170,0)
  <table cellpadding="3" cellspacing="0">
"KRN",.84,7981003.001,2,171,0)
   <caption>Ethnicity Summary</caption>
"KRN",.84,7981003.001,2,172,0)
   <thead>
"KRN",.84,7981003.001,2,173,0)
    <tr>
"KRN",.84,7981003.001,2,174,0)
     <th>Ethnicity</th>
"KRN",.84,7981003.001,2,175,0)
     <th width="30">Count</th>
"KRN",.84,7981003.001,2,176,0)
    </tr>
"KRN",.84,7981003.001,2,177,0)
   </thead>
"KRN",.84,7981003.001,2,178,0)
   <tbody>
"KRN",.84,7981003.001,2,179,0)
    <xsl:for-each select="$summary/ETHN">
"KRN",.84,7981003.001,2,180,0)
     <tr><xsl:call-template name="SummaryLine"/></tr>
"KRN",.84,7981003.001,2,181,0)
    </xsl:for-each>
"KRN",.84,7981003.001,2,182,0)
   </tbody>
"KRN",.84,7981003.001,2,183,0)
  </table>
"KRN",.84,7981003.001,2,184,0)
 </xsl:if>
"KRN",.84,7981003.001,2,185,0)
</xsl:template>
"KRN",.84,7981003.001,2,186,0)
 
"KRN",.84,7981003.001,2,187,0)
<xsl:template match="SUMMARY/RACE_SUMMARY">
"KRN",.84,7981003.001,2,188,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.001,2,189,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.001,2,190,0)
  <table cellpadding="3" cellspacing="0">
"KRN",.84,7981003.001,2,191,0)
   <caption>Race Summary</caption>
"KRN",.84,7981003.001,2,192,0)
   <thead>
"KRN",.84,7981003.001,2,193,0)
    <tr>
"KRN",.84,7981003.001,2,194,0)
     <th>Race</th>
"KRN",.84,7981003.001,2,195,0)
     <th width="30">Count</th>
"KRN",.84,7981003.001,2,196,0)
    </tr>
"KRN",.84,7981003.001,2,197,0)
   </thead>
"KRN",.84,7981003.001,2,198,0)
   <tbody>
"KRN",.84,7981003.001,2,199,0)
    <xsl:for-each select="$summary/RACE">
"KRN",.84,7981003.001,2,200,0)
     <tr><xsl:call-template name="SummaryLine"/></tr>
"KRN",.84,7981003.001,2,201,0)
    </xsl:for-each>
"KRN",.84,7981003.001,2,202,0)
   </tbody>
"KRN",.84,7981003.001,2,203,0)
  </table>
"KRN",.84,7981003.001,2,204,0)
 </xsl:if>
"KRN",.84,7981003.001,2,205,0)
</xsl:template>
"KRN",.84,7981003.001,2,206,0)
 
"KRN",.84,7981003.001,2,207,0)
<xsl:template match="SUMMARY/RISK_FACTORS">
"KRN",.84,7981003.001,2,208,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.001,2,209,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.001,2,210,0)
  <table cellpadding="3" cellspacing="0">
"KRN",.84,7981003.001,2,211,0)
   <caption>Risk Factors</caption>
"KRN",.84,7981003.001,2,212,0)
   <thead>
"KRN",.84,7981003.001,2,213,0)
    <tr>
"KRN",.84,7981003.001,2,214,0)
     <th width="30">Code</th>
"KRN",.84,7981003.001,2,215,0)
     <th>Description</th>
"KRN",.84,7981003.001,2,216,0)
     <th width="30">Count</th>
"KRN",.84,7981003.001,2,217,0)
    </tr>
"KRN",.84,7981003.001,2,218,0)
   </thead>
"KRN",.84,7981003.001,2,219,0)
   <tbody>
"KRN",.84,7981003.001,2,220,0)
    <xsl:for-each select="$summary/RISK">
"KRN",.84,7981003.001,2,221,0)
     <tr>
"KRN",.84,7981003.001,2,222,0)
      <td align="center"><xsl:value-of select="@ID"/></td>
"KRN",.84,7981003.001,2,223,0)
      <xsl:call-template name="SummaryLine"/>
"KRN",.84,7981003.001,2,224,0)
     </tr>
"KRN",.84,7981003.001,2,225,0)
    </xsl:for-each>
"KRN",.84,7981003.001,2,226,0)
   </tbody>
"KRN",.84,7981003.001,2,227,0)
  </table>
"KRN",.84,7981003.001,2,228,0)
 </xsl:if>
"KRN",.84,7981003.001,2,229,0)
</xsl:template>
"KRN",.84,7981003.001,2,230,0)
 
"KRN",.84,7981003.001,2,231,0)
<xsl:template match="SUMMARY/SELDT_SUMMARY">
"KRN",.84,7981003.001,2,232,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.001,2,233,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.001,2,234,0)
  <table cellpadding="3" cellspacing="0">
"KRN",.84,7981003.001,2,235,0)
   <caption>Selection Date Summary</caption>
"KRN",.84,7981003.001,2,236,0)
   <thead>
"KRN",.84,7981003.001,2,237,0)
    <tr>
"KRN",.84,7981003.001,2,238,0)
     <th>Selection Date</th>
"KRN",.84,7981003.001,2,239,0)
     <th width="30">Count</th>
"KRN",.84,7981003.001,2,240,0)
    </tr>
"KRN",.84,7981003.001,2,241,0)
   </thead>
"KRN",.84,7981003.001,2,242,0)
   <tbody>
"KRN",.84,7981003.001,2,243,0)
    <xsl:for-each select="$summary/SELDT">
"KRN",.84,7981003.001,2,244,0)
     <tr><xsl:call-template name="SummaryLine"/></tr>
"KRN",.84,7981003.001,2,245,0)
    </xsl:for-each>
"KRN",.84,7981003.001,2,246,0)
   </tbody>
"KRN",.84,7981003.001,2,247,0)
  </table>
"KRN",.84,7981003.001,2,248,0)
 </xsl:if>
"KRN",.84,7981003.001,2,249,0)
</xsl:template>
"KRN",.84,7981003.001,2,250,0)
 
"KRN",.84,7981003.001,2,251,0)
<xsl:template match="SUMMARY/SEX_SUMMARY">
"KRN",.84,7981003.001,2,252,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.001,2,253,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.001,2,254,0)
  <table cellpadding="3" cellspacing="0">
"KRN",.84,7981003.001,2,255,0)
   <caption>Sex Summary</caption>
"KRN",.84,7981003.001,2,256,0)
   <thead>
"KRN",.84,7981003.001,2,257,0)
    <tr>
"KRN",.84,7981003.001,2,258,0)
     <th>Sex</th>
"KRN",.84,7981003.001,2,259,0)
     <th width="30">Count</th>
"KRN",.84,7981003.001,2,260,0)
    </tr>
"KRN",.84,7981003.001,2,261,0)
   </thead>
"KRN",.84,7981003.001,2,262,0)
   <tbody>
"KRN",.84,7981003.001,2,263,0)
    <xsl:for-each select="$summary/SEX">
"KRN",.84,7981003.001,2,264,0)
     <tr><xsl:call-template name="SummaryLine"/></tr>
"KRN",.84,7981003.001,2,265,0)
    </xsl:for-each>
"KRN",.84,7981003.001,2,266,0)
   </tbody>
"KRN",.84,7981003.001,2,267,0)
  </table>
"KRN",.84,7981003.001,2,268,0)
 </xsl:if>
"KRN",.84,7981003.001,2,269,0)
</xsl:template>
"KRN",.84,7981003.001,2,270,0)
 
"KRN",.84,7981003.001,2,271,0)
<xsl:template match="SUMMARY/UTIL_CODES">
"KRN",.84,7981003.001,2,272,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.001,2,273,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.001,2,274,0)
  <table cellpadding="3" cellspacing="0">
"KRN",.84,7981003.001,2,275,0)
   <caption>Utilization</caption>
"KRN",.84,7981003.001,2,276,0)
   <thead>
"KRN",.84,7981003.001,2,277,0)
    <tr>
"KRN",.84,7981003.001,2,278,0)
     <th width="30">Code</th>
"KRN",.84,7981003.001,2,279,0)
     <th>Description</th>
"KRN",.84,7981003.001,2,280,0)
     <th width="30">Count</th>
"KRN",.84,7981003.001,2,281,0)
    </tr>
"KRN",.84,7981003.001,2,282,0)
   </thead>
"KRN",.84,7981003.001,2,283,0)
   <tbody>
"KRN",.84,7981003.001,2,284,0)
    <xsl:for-each select="$summary/UTIL">
"KRN",.84,7981003.001,2,285,0)
     <tr>
"KRN",.84,7981003.001,2,286,0)
      <td align="center"><xsl:value-of select="@ID"/></td>
"KRN",.84,7981003.001,2,287,0)
      <xsl:call-template name="SummaryLine"/>
"KRN",.84,7981003.001,2,288,0)
     </tr>
"KRN",.84,7981003.001,2,289,0)
    </xsl:for-each>
"KRN",.84,7981003.001,2,290,0)
   </tbody>
"KRN",.84,7981003.001,2,291,0)
  </table>
"KRN",.84,7981003.001,2,292,0)
 </xsl:if>
"KRN",.84,7981003.001,2,293,0)
</xsl:template>
"KRN",.84,7981003.001,2,294,0)
 
"KRN",.84,7981003.001,2,295,0)
</xsl:stylesheet>
"KRN",.84,7981004.001,-1)
0^16
"KRN",.84,7981004.001,0)
7981004.001^2^^CLINICAL CASE REGISTRIES^Clinic Follow Up (HTML)
"KRN",.84,7981004.001,2,0)
^^58^58^3100218^
"KRN",.84,7981004.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981004.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981004.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981004.001,2,4,0)
>
"KRN",.84,7981004.001,2,5,0)
 
"KRN",.84,7981004.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981004.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981004.001,2,8,0)
 
"KRN",.84,7981004.001,2,9,0)
<xsl:template match="/">
"KRN",.84,7981004.001,2,10,0)
 <html>
"KRN",.84,7981004.001,2,11,0)
  <head>
"KRN",.84,7981004.001,2,12,0)
   <title>Clinic Follow Up</title>
"KRN",.84,7981004.001,2,13,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981004.001,2,14,0)
  </head>
"KRN",.84,7981004.001,2,15,0)
  <body>
"KRN",.84,7981004.001,2,16,0)
   <h1>Clinic Follow Up</h1>
"KRN",.84,7981004.001,2,17,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981004.001,2,18,0)
   <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981004.001,2,19,0)
   <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981004.001,2,20,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981004.001,2,21,0)
   <div>
"KRN",.84,7981004.001,2,22,0)
    <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981004.001,2,23,0)
   </div>
"KRN",.84,7981004.001,2,24,0)
  </body>
"KRN",.84,7981004.001,2,25,0)
 </html>
"KRN",.84,7981004.001,2,26,0)
</xsl:template>
"KRN",.84,7981004.001,2,27,0)
 
"KRN",.84,7981004.001,2,28,0)
<!--[ COLUMN HEADERS ]-->
"KRN",.84,7981004.001,2,29,0)
 
"KRN",.84,7981004.001,2,30,0)
<xsl:template match="COLUMN[@NAME='LSNDT']">
"KRN",.84,7981004.001,2,31,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981004.001,2,32,0)
  <xsl:with-param name="title" select="'Last Seen Date'"/>
"KRN",.84,7981004.001,2,33,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981004.001,2,34,0)
 </xsl:call-template>
"KRN",.84,7981004.001,2,35,0)
</xsl:template>
"KRN",.84,7981004.001,2,36,0)
 
"KRN",.84,7981004.001,2,37,0)
<xsl:template match="COLUMN[@NAME='SEEN']">
"KRN",.84,7981004.001,2,38,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981004.001,2,39,0)
  <xsl:with-param name="title" select="'Seen'"/>
"KRN",.84,7981004.001,2,40,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981004.001,2,41,0)
 </xsl:call-template>
"KRN",.84,7981004.001,2,42,0)
</xsl:template>
"KRN",.84,7981004.001,2,43,0)
 
"KRN",.84,7981004.001,2,44,0)
<!--[ CELL VALUES ]-->
"KRN",.84,7981004.001,2,45,0)
 
"KRN",.84,7981004.001,2,46,0)
<xsl:template match="PATIENT/LSNDT">
"KRN",.84,7981004.001,2,47,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981004.001,2,48,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981004.001,2,49,0)
 </xsl:call-template>
"KRN",.84,7981004.001,2,50,0)
</xsl:template>
"KRN",.84,7981004.001,2,51,0)
 
"KRN",.84,7981004.001,2,52,0)
<xsl:template match="PATIENT/SEEN">
"KRN",.84,7981004.001,2,53,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981004.001,2,54,0)
  <xsl:with-param name="yesno" select="1"/>
"KRN",.84,7981004.001,2,55,0)
 </xsl:call-template>
"KRN",.84,7981004.001,2,56,0)
</xsl:template>
"KRN",.84,7981004.001,2,57,0)
 
"KRN",.84,7981004.001,2,58,0)
</xsl:stylesheet>
"KRN",.84,7981005.001,-1)
0^17
"KRN",.84,7981005.001,0)
7981005.001^2^^CLINICAL CASE REGISTRIES^Inpatient Utilization (HTML)
"KRN",.84,7981005.001,2,0)
^^202^202^3100218^
"KRN",.84,7981005.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981005.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981005.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981005.001,2,4,0)
>
"KRN",.84,7981005.001,2,5,0)
 
"KRN",.84,7981005.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981005.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981005.001,2,8,0)
 
"KRN",.84,7981005.001,2,9,0)
<xsl:template match="/">
"KRN",.84,7981005.001,2,10,0)
 <html>
"KRN",.84,7981005.001,2,11,0)
  <head>
"KRN",.84,7981005.001,2,12,0)
   <title>Inpatient Utilization</title>
"KRN",.84,7981005.001,2,13,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981005.001,2,14,0)
  </head>
"KRN",.84,7981005.001,2,15,0)
  <body>
"KRN",.84,7981005.001,2,16,0)
   <h1>Inpatient Utilization</h1>
"KRN",.84,7981005.001,2,17,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981005.001,2,18,0)
   <xsl:choose>
"KRN",.84,7981005.001,2,19,0)
    <xsl:when test="REPORT/INPATIENTS">
"KRN",.84,7981005.001,2,20,0)
 
"KRN",.84,7981005.001,2,21,0)
     <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981005.001,2,22,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981005.001,2,23,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981005.001,2,24,0)
     <div>
"KRN",.84,7981005.001,2,25,0)
     <xsl:call-template name="InpatientSummary"/>
"KRN",.84,7981005.001,2,26,0)
      <xsl:apply-templates select="REPORT/INPATIENTS/*[@TABLE]"/>
"KRN",.84,7981005.001,2,27,0)
     </div>
"KRN",.84,7981005.001,2,28,0)
    </xsl:when>
"KRN",.84,7981005.001,2,29,0)
    <xsl:otherwise>
"KRN",.84,7981005.001,2,30,0)
     <xsl:call-template name="TableNoData"/>
"KRN",.84,7981005.001,2,31,0)
    </xsl:otherwise>
"KRN",.84,7981005.001,2,32,0)
   </xsl:choose>
"KRN",.84,7981005.001,2,33,0)
   <xsl:if test="REPORT/HIGHUTIL">
"KRN",.84,7981005.001,2,34,0)
 
"KRN",.84,7981005.001,2,35,0)
     <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981005.001,2,36,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981005.001,2,37,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981005.001,2,38,0)
     <div>
"KRN",.84,7981005.001,2,39,0)
    <h2>Highest Utilization</h2>
"KRN",.84,7981005.001,2,40,0)
     <xsl:apply-templates select="REPORT/HIGHUTIL/*"/>
"KRN",.84,7981005.001,2,41,0)
    </div>
"KRN",.84,7981005.001,2,42,0)
   </xsl:if>
"KRN",.84,7981005.001,2,43,0)
  </body>
"KRN",.84,7981005.001,2,44,0)
 </html>
"KRN",.84,7981005.001,2,45,0)
</xsl:template>
"KRN",.84,7981005.001,2,46,0)
 
"KRN",.84,7981005.001,2,47,0)
<xsl:template match="HIGHUTIL/HU_DAYS">
"KRN",.84,7981005.001,2,48,0)
 <h3><xsl:call-template name="HUPatientsHeader"/> by number of days</h3>
"KRN",.84,7981005.001,2,49,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981005.001,2,50,0)
</xsl:template>
"KRN",.84,7981005.001,2,51,0)
 
"KRN",.84,7981005.001,2,52,0)
<xsl:template match="HIGHUTIL/HU_STAYS">
"KRN",.84,7981005.001,2,53,0)
 <h3><xsl:call-template name="HUPatientsHeader"/> by number of stays</h3>
"KRN",.84,7981005.001,2,54,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981005.001,2,55,0)
</xsl:template>
"KRN",.84,7981005.001,2,56,0)
 
"KRN",.84,7981005.001,2,57,0)
<xsl:template match="INPATIENTS/BEDSECTIONS">
"KRN",.84,7981005.001,2,58,0)
 <h3>Distribution of Utilization among Bed Sections</h3>
"KRN",.84,7981005.001,2,59,0)
 <div>
"KRN",.84,7981005.001,2,60,0)
  Because of hospital stays split among multiple bed sections,
"KRN",.84,7981005.001,2,61,0)
  information by bed section may not match the totals for complete
"KRN",.84,7981005.001,2,62,0)
  hospital stays presented in the summary and highest utilization tables.
"KRN",.84,7981005.001,2,63,0)
 </div>
"KRN",.84,7981005.001,2,64,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981005.001,2,65,0)
</xsl:template>
"KRN",.84,7981005.001,2,66,0)
 
"KRN",.84,7981005.001,2,67,0)
<xsl:template match="INPATIENTS/NOBS">
"KRN",.84,7981005.001,2,68,0)
 <h3>Occurrences of Missing Bed Section ID</h3>
"KRN",.84,7981005.001,2,69,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981005.001,2,70,0)
</xsl:template>
"KRN",.84,7981005.001,2,71,0)
 
"KRN",.84,7981005.001,2,72,0)
<xsl:template match="INPATIENTS/STAYS">
"KRN",.84,7981005.001,2,73,0)
 <br clear="both"/>
"KRN",.84,7981005.001,2,74,0)
 <xsl:call-template name="DataGrid">
"KRN",.84,7981005.001,2,75,0)
  <xsl:with-param name="divstyle" select="'width:50%'"/>
"KRN",.84,7981005.001,2,76,0)
 </xsl:call-template>
"KRN",.84,7981005.001,2,77,0)
</xsl:template>
"KRN",.84,7981005.001,2,78,0)
 
"KRN",.84,7981005.001,2,79,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981005.001,2,80,0)
 
"KRN",.84,7981005.001,2,81,0)
<xsl:template name="InpatientSummary">
"KRN",.84,7981005.001,2,82,0)
 <xsl:variable name="IP" select="/REPORT/INPATIENTS"/>
"KRN",.84,7981005.001,2,83,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981005.001,2,84,0)
  <thead>
"KRN",.84,7981005.001,2,85,0)
   <tr>
"KRN",.84,7981005.001,2,86,0)
    <th width="16%">Number of Patients</th>
"KRN",.84,7981005.001,2,87,0)
    <th width="16%">Number of Stays</th>
"KRN",.84,7981005.001,2,88,0)
    <th width="16%">Number of Days</th>
"KRN",.84,7981005.001,2,89,0)
    <th width="16%">Median Length of Stay (MLOS)</th>
"KRN",.84,7981005.001,2,90,0)
    <th width="16%">Average Length of Stay</th>
"KRN",.84,7981005.001,2,91,0)
    <th width="16%">Number of Short Stays</th>
"KRN",.84,7981005.001,2,92,0)
   </tr>
"KRN",.84,7981005.001,2,93,0)
  </thead>
"KRN",.84,7981005.001,2,94,0)
  <tbody>
"KRN",.84,7981005.001,2,95,0)
   <tr>
"KRN",.84,7981005.001,2,96,0)
    <td><xsl:value-of select="$IP/NP"/></td>
"KRN",.84,7981005.001,2,97,0)
    <td><xsl:value-of select="$IP/NST"/></td>
"KRN",.84,7981005.001,2,98,0)
    <td><xsl:value-of select="$IP/ND"/></td>
"KRN",.84,7981005.001,2,99,0)
    <td><xsl:value-of select="$IP/MLOS"/></td>
"KRN",.84,7981005.001,2,100,0)
    <td><xsl:value-of select="$IP/ALOS"/></td>
"KRN",.84,7981005.001,2,101,0)
    <td><xsl:value-of select="$IP/NSS"/></td>
"KRN",.84,7981005.001,2,102,0)
   </tr>
"KRN",.84,7981005.001,2,103,0)
  </tbody>
"KRN",.84,7981005.001,2,104,0)
 </table>
"KRN",.84,7981005.001,2,105,0)
</xsl:template>
"KRN",.84,7981005.001,2,106,0)
 
"KRN",.84,7981005.001,2,107,0)
<!--[ COLUMN HEADERS ]-->
"KRN",.84,7981005.001,2,108,0)
 
"KRN",.84,7981005.001,2,109,0)
<xsl:template match="TBLDEF[@NAME='NOBS']/COLUMN[@NAME='DATE']">
"KRN",.84,7981005.001,2,110,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981005.001,2,111,0)
  <xsl:with-param name="title" select="'Movement Date'"/>
"KRN",.84,7981005.001,2,112,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981005.001,2,113,0)
 </xsl:call-template>
"KRN",.84,7981005.001,2,114,0)
</xsl:template>
"KRN",.84,7981005.001,2,115,0)
 
"KRN",.84,7981005.001,2,116,0)
<xsl:template match="COLUMN[@NAME='MLOS']">
"KRN",.84,7981005.001,2,117,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981005.001,2,118,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981005.001,2,119,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981005.001,2,120,0)
 </xsl:call-template>
"KRN",.84,7981005.001,2,121,0)
</xsl:template>
"KRN",.84,7981005.001,2,122,0)
 
"KRN",.84,7981005.001,2,123,0)
<xsl:template match="COLUMN[@NAME='NAME']">
"KRN",.84,7981005.001,2,124,0)
 <xsl:variable name="tblname" select="../@NAME"/>
"KRN",.84,7981005.001,2,125,0)
 <xsl:choose>
"KRN",.84,7981005.001,2,126,0)
  <xsl:when test="$tblname='BEDSECTIONS'">
"KRN",.84,7981005.001,2,127,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981005.001,2,128,0)
    <xsl:with-param name="title" select="'Bed Section'"/>
"KRN",.84,7981005.001,2,129,0)
   </xsl:call-template> 
"KRN",.84,7981005.001,2,130,0)
  </xsl:when>
"KRN",.84,7981005.001,2,131,0)
  <xsl:when test="contains($tblname,'HU_') or ($tblname='NOBS')">
"KRN",.84,7981005.001,2,132,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981005.001,2,133,0)
    <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981005.001,2,134,0)
   </xsl:call-template> 
"KRN",.84,7981005.001,2,135,0)
  </xsl:when>
"KRN",.84,7981005.001,2,136,0)
  <xsl:otherwise>
"KRN",.84,7981005.001,2,137,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981005.001,2,138,0)
    <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981005.001,2,139,0)
   </xsl:call-template> 
"KRN",.84,7981005.001,2,140,0)
  </xsl:otherwise>
"KRN",.84,7981005.001,2,141,0)
 </xsl:choose>
"KRN",.84,7981005.001,2,142,0)
</xsl:template>
"KRN",.84,7981005.001,2,143,0)
 
"KRN",.84,7981005.001,2,144,0)
<xsl:template match="COLUMN[@NAME='ND']">
"KRN",.84,7981005.001,2,145,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981005.001,2,146,0)
  <xsl:with-param name="title" select="'Number of Days'"/>
"KRN",.84,7981005.001,2,147,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981005.001,2,148,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981005.001,2,149,0)
 </xsl:call-template>
"KRN",.84,7981005.001,2,150,0)
</xsl:template>
"KRN",.84,7981005.001,2,151,0)
 
"KRN",.84,7981005.001,2,152,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981005.001,2,153,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981005.001,2,154,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981005.001,2,155,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981005.001,2,156,0)
 </xsl:call-template>
"KRN",.84,7981005.001,2,157,0)
</xsl:template>
"KRN",.84,7981005.001,2,158,0)
 
"KRN",.84,7981005.001,2,159,0)
<xsl:template match="COLUMN[@NAME='NSS']">
"KRN",.84,7981005.001,2,160,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981005.001,2,161,0)
  <xsl:with-param name="title" select="'Number of Short Stays'"/>
"KRN",.84,7981005.001,2,162,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981005.001,2,163,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981005.001,2,164,0)
 </xsl:call-template>
"KRN",.84,7981005.001,2,165,0)
</xsl:template>
"KRN",.84,7981005.001,2,166,0)
 
"KRN",.84,7981005.001,2,167,0)
<xsl:template match="COLUMN[@NAME='NST']">
"KRN",.84,7981005.001,2,168,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981005.001,2,169,0)
  <xsl:with-param name="title" select="'Number of Stays'"/>
"KRN",.84,7981005.001,2,170,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981005.001,2,171,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981005.001,2,172,0)
 </xsl:call-template>
"KRN",.84,7981005.001,2,173,0)
</xsl:template>
"KRN",.84,7981005.001,2,174,0)
 
"KRN",.84,7981005.001,2,175,0)
<xsl:template match="COLUMN[@NAME='PTF']">
"KRN",.84,7981005.001,2,176,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981005.001,2,177,0)
  <xsl:with-param name="title" select="'PTF#'"/>
"KRN",.84,7981005.001,2,178,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981005.001,2,179,0)
 </xsl:call-template>
"KRN",.84,7981005.001,2,180,0)
</xsl:template>
"KRN",.84,7981005.001,2,181,0)
 
"KRN",.84,7981005.001,2,182,0)
<!--[ CELL VALUES ]-->
"KRN",.84,7981005.001,2,183,0)
 
"KRN",.84,7981005.001,2,184,0)
<xsl:template match="NOBS/PATIENT/DATE">
"KRN",.84,7981005.001,2,185,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981005.001,2,186,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981005.001,2,187,0)
 </xsl:call-template>
"KRN",.84,7981005.001,2,188,0)
</xsl:template>
"KRN",.84,7981005.001,2,189,0)
 
"KRN",.84,7981005.001,2,190,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981005.001,2,191,0)
 
"KRN",.84,7981005.001,2,192,0)
<xsl:template match="PARAMETERS/MAXUTNUM">
"KRN",.84,7981005.001,2,193,0)
 <tr>
"KRN",.84,7981005.001,2,194,0)
  <th scope="row">MaxUtil:&#160;</th>
"KRN",.84,7981005.001,2,195,0)
  <td>
"KRN",.84,7981005.001,2,196,0)
   <xsl:value-of select="."/>
"KRN",.84,7981005.001,2,197,0)
   (maximum number of patients with highest utilization to display)
"KRN",.84,7981005.001,2,198,0)
  </td>
"KRN",.84,7981005.001,2,199,0)
 </tr>
"KRN",.84,7981005.001,2,200,0)
</xsl:template>
"KRN",.84,7981005.001,2,201,0)
 
"KRN",.84,7981005.001,2,202,0)
</xsl:stylesheet>
"KRN",.84,7981006.001,-1)
0^18
"KRN",.84,7981006.001,0)
7981006.001^2^^CLINICAL CASE REGISTRIES^Laboratory Utilization (HTML)
"KRN",.84,7981006.001,2,0)
^^166^166^3100218^
"KRN",.84,7981006.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981006.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981006.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981006.001,2,4,0)
>
"KRN",.84,7981006.001,2,5,0)
 
"KRN",.84,7981006.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981006.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981006.001,2,8,0)
<xsl:include href="template://report/995/1"/>  <!-- Lab Data -->
"KRN",.84,7981006.001,2,9,0)
 
"KRN",.84,7981006.001,2,10,0)
<xsl:template match="/">
"KRN",.84,7981006.001,2,11,0)
 <html>
"KRN",.84,7981006.001,2,12,0)
  <head>
"KRN",.84,7981006.001,2,13,0)
   <title>Laboratory Utilization</title>
"KRN",.84,7981006.001,2,14,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981006.001,2,15,0)
  </head>
"KRN",.84,7981006.001,2,16,0)
  <body>
"KRN",.84,7981006.001,2,17,0)
   <h1>Laboratory Utilization</h1>
"KRN",.84,7981006.001,2,18,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981006.001,2,19,0)
   <xsl:choose>
"KRN",.84,7981006.001,2,20,0)
    <xsl:when test="REPORT/*[@TABLE]">
"KRN",.84,7981006.001,2,21,0)
     <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981006.001,2,22,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981006.001,2,23,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981006.001,2,24,0)
     <div>
"KRN",.84,7981006.001,2,25,0)
     <xsl:call-template name="CategorySummary"/>
"KRN",.84,7981006.001,2,26,0)
      <xsl:apply-templates select="REPORT/RESULTS"/>
"KRN",.84,7981006.001,2,27,0)
      <xsl:apply-templates select="REPORT/LABTESTS"/>
"KRN",.84,7981006.001,2,28,0)
      <xsl:apply-templates select="REPORT/PATIENTS"/>
"KRN",.84,7981006.001,2,29,0)
     </div>
"KRN",.84,7981006.001,2,30,0)
    </xsl:when>
"KRN",.84,7981006.001,2,31,0)
    <xsl:otherwise>
"KRN",.84,7981006.001,2,32,0)
     <xsl:call-template name="TableNoData"/>
"KRN",.84,7981006.001,2,33,0)
    </xsl:otherwise>
"KRN",.84,7981006.001,2,34,0)
   </xsl:choose>
"KRN",.84,7981006.001,2,35,0)
  </body>
"KRN",.84,7981006.001,2,36,0)
 </html>
"KRN",.84,7981006.001,2,37,0)
</xsl:template>
"KRN",.84,7981006.001,2,38,0)
 
"KRN",.84,7981006.001,2,39,0)
<!--[ TABLES ]-->
"KRN",.84,7981006.001,2,40,0)
 
"KRN",.84,7981006.001,2,41,0)
<xsl:template match="REPORT/LABTESTS">
"KRN",.84,7981006.001,2,42,0)
 <xsl:variable name="minrpnum" select="/REPORT/PARAMETERS/MINRPNUM"/>
"KRN",.84,7981006.001,2,43,0)
 <h3>
"KRN",.84,7981006.001,2,44,0)
  Laboratory tests performed
"KRN",.84,7981006.001,2,45,0)
  <xsl:choose>
"KRN",.84,7981006.001,2,46,0)
   <xsl:when test="$minrpnum>1">
"KRN",.84,7981006.001,2,47,0)
    <xsl:value-of select="$minrpnum"/> times or more
"KRN",.84,7981006.001,2,48,0)
   </xsl:when>
"KRN",.84,7981006.001,2,49,0)
   <xsl:otherwise>at least once</xsl:otherwise>
"KRN",.84,7981006.001,2,50,0)
  </xsl:choose>
"KRN",.84,7981006.001,2,51,0)
 </h3>
"KRN",.84,7981006.001,2,52,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981006.001,2,53,0)
</xsl:template>
"KRN",.84,7981006.001,2,54,0)
 
"KRN",.84,7981006.001,2,55,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981006.001,2,56,0)
 <h3><xsl:call-template name="HUPatientsHeader"/> by number of results</h3>
"KRN",.84,7981006.001,2,57,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981006.001,2,58,0)
</xsl:template>
"KRN",.84,7981006.001,2,59,0)
 
"KRN",.84,7981006.001,2,60,0)
<xsl:template match="REPORT/RESULTS">
"KRN",.84,7981006.001,2,61,0)
 <br clear="both"/>
"KRN",.84,7981006.001,2,62,0)
 <xsl:call-template name="DataGrid">
"KRN",.84,7981006.001,2,63,0)
  <xsl:with-param name="divstyle" select="'width:50%'"/>
"KRN",.84,7981006.001,2,64,0)
 </xsl:call-template>
"KRN",.84,7981006.001,2,65,0)
</xsl:template>
"KRN",.84,7981006.001,2,66,0)
 
"KRN",.84,7981006.001,2,67,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981006.001,2,68,0)
 
"KRN",.84,7981006.001,2,69,0)
<xsl:template name="CategorySummary">
"KRN",.84,7981006.001,2,70,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981006.001,2,71,0)
  <thead>
"KRN",.84,7981006.001,2,72,0)
   <tr>
"KRN",.84,7981006.001,2,73,0)
    <th width="25%">Number of Patients</th>
"KRN",.84,7981006.001,2,74,0)
    <th width="25%">Number of Orders</th>
"KRN",.84,7981006.001,2,75,0)
    <th width="25%">Number of Results</th>
"KRN",.84,7981006.001,2,76,0)
    <th width="25%">Number of Different Tests</th>
"KRN",.84,7981006.001,2,77,0)
   </tr>
"KRN",.84,7981006.001,2,78,0)
  </thead>
"KRN",.84,7981006.001,2,79,0)
  <tbody>
"KRN",.84,7981006.001,2,80,0)
   <tr>
"KRN",.84,7981006.001,2,81,0)
    <td><xsl:value-of select="/REPORT/NP"/></td>
"KRN",.84,7981006.001,2,82,0)
    <td><xsl:value-of select="/REPORT/NO"/></td>
"KRN",.84,7981006.001,2,83,0)
    <td><xsl:value-of select="/REPORT/NR"/></td>
"KRN",.84,7981006.001,2,84,0)
    <td><xsl:value-of select="/REPORT/NDT"/></td>
"KRN",.84,7981006.001,2,85,0)
   </tr>
"KRN",.84,7981006.001,2,86,0)
  </tbody>
"KRN",.84,7981006.001,2,87,0)
 </table>
"KRN",.84,7981006.001,2,88,0)
</xsl:template>
"KRN",.84,7981006.001,2,89,0)
 
"KRN",.84,7981006.001,2,90,0)
<!--[ COLUMN HEADERS ]-->
"KRN",.84,7981006.001,2,91,0)
 
"KRN",.84,7981006.001,2,92,0)
<xsl:template match="COLUMN[@NAME='MAXNP']">
"KRN",.84,7981006.001,2,93,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981006.001,2,94,0)
  <xsl:with-param name="title"
"KRN",.84,7981006.001,2,95,0)
       select="'Number of Patients with Max. Utilization'"/>
"KRN",.84,7981006.001,2,96,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981006.001,2,97,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981006.001,2,98,0)
 </xsl:call-template>
"KRN",.84,7981006.001,2,99,0)
</xsl:template>
"KRN",.84,7981006.001,2,100,0)
 
"KRN",.84,7981006.001,2,101,0)
<xsl:template match="COLUMN[@NAME='MAXNRPP']">
"KRN",.84,7981006.001,2,102,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981006.001,2,103,0)
  <xsl:with-param name="title"
"KRN",.84,7981006.001,2,104,0)
       select="'Maximum Number of Results per Patient'"/>
"KRN",.84,7981006.001,2,105,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981006.001,2,106,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981006.001,2,107,0)
 </xsl:call-template>
"KRN",.84,7981006.001,2,108,0)
</xsl:template>
"KRN",.84,7981006.001,2,109,0)
 
"KRN",.84,7981006.001,2,110,0)
<xsl:template match="COLUMN[@NAME='NDT']">
"KRN",.84,7981006.001,2,111,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981006.001,2,112,0)
  <xsl:with-param name="title" select="'Number of Different Tests'"/>
"KRN",.84,7981006.001,2,113,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981006.001,2,114,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981006.001,2,115,0)
 </xsl:call-template>
"KRN",.84,7981006.001,2,116,0)
</xsl:template>
"KRN",.84,7981006.001,2,117,0)
 
"KRN",.84,7981006.001,2,118,0)
<xsl:template match="COLUMN[@NAME='NO']">
"KRN",.84,7981006.001,2,119,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981006.001,2,120,0)
  <xsl:with-param name="title" select="'Number of Orders'"/>
"KRN",.84,7981006.001,2,121,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981006.001,2,122,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981006.001,2,123,0)
 </xsl:call-template>
"KRN",.84,7981006.001,2,124,0)
</xsl:template>
"KRN",.84,7981006.001,2,125,0)
 
"KRN",.84,7981006.001,2,126,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981006.001,2,127,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981006.001,2,128,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981006.001,2,129,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981006.001,2,130,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981006.001,2,131,0)
 </xsl:call-template>
"KRN",.84,7981006.001,2,132,0)
</xsl:template>
"KRN",.84,7981006.001,2,133,0)
 
"KRN",.84,7981006.001,2,134,0)
<xsl:template match="COLUMN[@NAME='NR']">
"KRN",.84,7981006.001,2,135,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981006.001,2,136,0)
  <xsl:with-param name="title" select="'Number of Results'"/>
"KRN",.84,7981006.001,2,137,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981006.001,2,138,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981006.001,2,139,0)
 </xsl:call-template>
"KRN",.84,7981006.001,2,140,0)
</xsl:template>
"KRN",.84,7981006.001,2,141,0)
 
"KRN",.84,7981006.001,2,142,0)
 
"KRN",.84,7981006.001,2,143,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981006.001,2,144,0)
 
"KRN",.84,7981006.001,2,145,0)
<xsl:template match="PARAMETERS/MAXUTNUM">
"KRN",.84,7981006.001,2,146,0)
 <tr>
"KRN",.84,7981006.001,2,147,0)
  <th scope="row">MaxUtil:&#160;</th>
"KRN",.84,7981006.001,2,148,0)
  <td>
"KRN",.84,7981006.001,2,149,0)
   <xsl:value-of select="."/>
"KRN",.84,7981006.001,2,150,0)
   (maximum number of patients with highest utilization to display)
"KRN",.84,7981006.001,2,151,0)
  </td>
"KRN",.84,7981006.001,2,152,0)
 </tr>
"KRN",.84,7981006.001,2,153,0)
</xsl:template>
"KRN",.84,7981006.001,2,154,0)
 
"KRN",.84,7981006.001,2,155,0)
<xsl:template match="PARAMETERS/MINRPNUM">
"KRN",.84,7981006.001,2,156,0)
 <tr>
"KRN",.84,7981006.001,2,157,0)
  <th scope="row">MinTest:&#160;</th>
"KRN",.84,7981006.001,2,158,0)
  <td>
"KRN",.84,7981006.001,2,159,0)
   <xsl:value-of select="."/>
"KRN",.84,7981006.001,2,160,0)
   (minimum number of times a Lab test should be performed
"KRN",.84,7981006.001,2,161,0)
   to be included in the report)
"KRN",.84,7981006.001,2,162,0)
  </td>
"KRN",.84,7981006.001,2,163,0)
 </tr>
"KRN",.84,7981006.001,2,164,0)
</xsl:template>
"KRN",.84,7981006.001,2,165,0)
 
"KRN",.84,7981006.001,2,166,0)
</xsl:stylesheet>
"KRN",.84,7981007.001,-1)
0^19
"KRN",.84,7981007.001,0)
7981007.001^2^^CLINICAL CASE REGISTRIES^Radiology Utilization (HTML)
"KRN",.84,7981007.001,2,0)
^^126^126^3100218^
"KRN",.84,7981007.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981007.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981007.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981007.001,2,4,0)
>
"KRN",.84,7981007.001,2,5,0)
 
"KRN",.84,7981007.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981007.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981007.001,2,8,0)
 
"KRN",.84,7981007.001,2,9,0)
<xsl:template match="/">
"KRN",.84,7981007.001,2,10,0)
 <html>
"KRN",.84,7981007.001,2,11,0)
  <head>
"KRN",.84,7981007.001,2,12,0)
   <title>Radiology Utilization</title>
"KRN",.84,7981007.001,2,13,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981007.001,2,14,0)
  </head>
"KRN",.84,7981007.001,2,15,0)
  <body>
"KRN",.84,7981007.001,2,16,0)
   <h1>Radiology Utilization</h1>
"KRN",.84,7981007.001,2,17,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981007.001,2,18,0)
   <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981007.001,2,19,0)
   <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981007.001,2,20,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981007.001,2,21,0)
   <div>
"KRN",.84,7981007.001,2,22,0)
    <xsl:call-template name="CategorySummary"/>
"KRN",.84,7981007.001,2,23,0)
    <xsl:apply-templates select="REPORT/PROCEDURES"/>
"KRN",.84,7981007.001,2,24,0)
    <xsl:apply-templates select="REPORT/PATIENTS"/>
"KRN",.84,7981007.001,2,25,0)
   </div>
"KRN",.84,7981007.001,2,26,0)
  </body>
"KRN",.84,7981007.001,2,27,0)
 </html>
"KRN",.84,7981007.001,2,28,0)
</xsl:template>
"KRN",.84,7981007.001,2,29,0)
 
"KRN",.84,7981007.001,2,30,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981007.001,2,31,0)
 <h3><xsl:call-template name="HUPatientsHeader"/> by number of procedures</h3>
"KRN",.84,7981007.001,2,32,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981007.001,2,33,0)
</xsl:template>
"KRN",.84,7981007.001,2,34,0)
 
"KRN",.84,7981007.001,2,35,0)
<xsl:template match="REPORT/PROCEDURES">
"KRN",.84,7981007.001,2,36,0)
 <xsl:variable name="minrpnum" select="/REPORT/PARAMETERS/MINRPNUM"/>
"KRN",.84,7981007.001,2,37,0)
 <h3>
"KRN",.84,7981007.001,2,38,0)
  Procedures performed
"KRN",.84,7981007.001,2,39,0)
  <xsl:choose>
"KRN",.84,7981007.001,2,40,0)
   <xsl:when test="$minrpnum>1">
"KRN",.84,7981007.001,2,41,0)
    <xsl:value-of select="$minrpnum"/> times or more
"KRN",.84,7981007.001,2,42,0)
   </xsl:when>
"KRN",.84,7981007.001,2,43,0)
   <xsl:otherwise>at least once</xsl:otherwise>
"KRN",.84,7981007.001,2,44,0)
  </xsl:choose>
"KRN",.84,7981007.001,2,45,0)
 </h3>
"KRN",.84,7981007.001,2,46,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981007.001,2,47,0)
</xsl:template>
"KRN",.84,7981007.001,2,48,0)
 
"KRN",.84,7981007.001,2,49,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981007.001,2,50,0)
 
"KRN",.84,7981007.001,2,51,0)
<xsl:template name="CategorySummary">
"KRN",.84,7981007.001,2,52,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981007.001,2,53,0)
  <thead>
"KRN",.84,7981007.001,2,54,0)
   <tr>
"KRN",.84,7981007.001,2,55,0)
    <th width="33%">Number of Patients</th>
"KRN",.84,7981007.001,2,56,0)
    <th width="33%">Number of Procedures</th>
"KRN",.84,7981007.001,2,57,0)
    <th width="33%">Number of Different Procedures</th>
"KRN",.84,7981007.001,2,58,0)
   </tr>
"KRN",.84,7981007.001,2,59,0)
  </thead>
"KRN",.84,7981007.001,2,60,0)
  <tbody>
"KRN",.84,7981007.001,2,61,0)
   <tr>
"KRN",.84,7981007.001,2,62,0)
    <td><xsl:value-of select="/REPORT/NP"/></td>
"KRN",.84,7981007.001,2,63,0)
    <td><xsl:value-of select="/REPORT/NPR"/></td>
"KRN",.84,7981007.001,2,64,0)
    <td><xsl:value-of select="/REPORT/NDP"/></td>
"KRN",.84,7981007.001,2,65,0)
   </tr>
"KRN",.84,7981007.001,2,66,0)
  </tbody>
"KRN",.84,7981007.001,2,67,0)
 </table>
"KRN",.84,7981007.001,2,68,0)
</xsl:template>
"KRN",.84,7981007.001,2,69,0)
 
"KRN",.84,7981007.001,2,70,0)
<!--[ COLUMN HEADERS ]-->
"KRN",.84,7981007.001,2,71,0)
 
"KRN",.84,7981007.001,2,72,0)
<xsl:template match="COLUMN[@NAME='CPT']">
"KRN",.84,7981007.001,2,73,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981007.001,2,74,0)
  <xsl:with-param name="title" select="'CPT'"/>
"KRN",.84,7981007.001,2,75,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981007.001,2,76,0)
 </xsl:call-template>
"KRN",.84,7981007.001,2,77,0)
</xsl:template>
"KRN",.84,7981007.001,2,78,0)
 
"KRN",.84,7981007.001,2,79,0)
<xsl:template match="COLUMN[@NAME='PATIENTS']">
"KRN",.84,7981007.001,2,80,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981007.001,2,81,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981007.001,2,82,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981007.001,2,83,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981007.001,2,84,0)
 </xsl:call-template>
"KRN",.84,7981007.001,2,85,0)
</xsl:template>
"KRN",.84,7981007.001,2,86,0)
 
"KRN",.84,7981007.001,2,87,0)
<xsl:template match="COLUMN[@NAME='TOTAL']">
"KRN",.84,7981007.001,2,88,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981007.001,2,89,0)
  <xsl:with-param name="title" select="'Number of Procedures'"/>
"KRN",.84,7981007.001,2,90,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981007.001,2,91,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981007.001,2,92,0)
 </xsl:call-template>
"KRN",.84,7981007.001,2,93,0)
</xsl:template>
"KRN",.84,7981007.001,2,94,0)
 
"KRN",.84,7981007.001,2,95,0)
<xsl:template match="COLUMN[@NAME='UNIQUE']">
"KRN",.84,7981007.001,2,96,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981007.001,2,97,0)
  <xsl:with-param name="title" select="'Number of Different Procedures'"/>
"KRN",.84,7981007.001,2,98,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981007.001,2,99,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981007.001,2,100,0)
 </xsl:call-template>
"KRN",.84,7981007.001,2,101,0)
</xsl:template>
"KRN",.84,7981007.001,2,102,0)
 
"KRN",.84,7981007.001,2,103,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981007.001,2,104,0)
 
"KRN",.84,7981007.001,2,105,0)
<xsl:template match="PARAMETERS/MAXUTNUM">
"KRN",.84,7981007.001,2,106,0)
 <tr>
"KRN",.84,7981007.001,2,107,0)
  <th scope="row">MaxUtil:&#160;</th>
"KRN",.84,7981007.001,2,108,0)
  <td>
"KRN",.84,7981007.001,2,109,0)
   <xsl:value-of select="."/>
"KRN",.84,7981007.001,2,110,0)
   (maximum number of patients with highest utilization to display)
"KRN",.84,7981007.001,2,111,0)
  </td>
"KRN",.84,7981007.001,2,112,0)
 </tr>
"KRN",.84,7981007.001,2,113,0)
</xsl:template>
"KRN",.84,7981007.001,2,114,0)
 
"KRN",.84,7981007.001,2,115,0)
<xsl:template match="PARAMETERS/MINRPNUM">
"KRN",.84,7981007.001,2,116,0)
 <tr>
"KRN",.84,7981007.001,2,117,0)
  <th scope="row">MinProc:&#160;</th>
"KRN",.84,7981007.001,2,118,0)
  <td>
"KRN",.84,7981007.001,2,119,0)
   <xsl:value-of select="."/>
"KRN",.84,7981007.001,2,120,0)
   (minimum number of times a procedure should be performed
"KRN",.84,7981007.001,2,121,0)
   to be included in the report)
"KRN",.84,7981007.001,2,122,0)
  </td>
"KRN",.84,7981007.001,2,123,0)
 </tr>
"KRN",.84,7981007.001,2,124,0)
</xsl:template>
"KRN",.84,7981007.001,2,125,0)
 
"KRN",.84,7981007.001,2,126,0)
</xsl:stylesheet>
"KRN",.84,7981008.001,-1)
0^20
"KRN",.84,7981008.001,0)
7981008.001^2^^CLINICAL CASE REGISTRIES^VERA Reimbursement Report (HTML)
"KRN",.84,7981008.001,2,0)
^^120^120^3100218^
"KRN",.84,7981008.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981008.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981008.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981008.001,2,4,0)
>
"KRN",.84,7981008.001,2,5,0)
 
"KRN",.84,7981008.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981008.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981008.001,2,8,0)
<xsl:import  href="template://report/996/1"/>  <!-- Pharmacy -->
"KRN",.84,7981008.001,2,9,0)
 
"KRN",.84,7981008.001,2,10,0)
<xsl:template match="/">
"KRN",.84,7981008.001,2,11,0)
 <html>
"KRN",.84,7981008.001,2,12,0)
  <head>
"KRN",.84,7981008.001,2,13,0)
   <title>VERA Reimbursement Report</title>
"KRN",.84,7981008.001,2,14,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981008.001,2,15,0)
  </head>
"KRN",.84,7981008.001,2,16,0)
  <body>
"KRN",.84,7981008.001,2,17,0)
   <h1>VERA Reimbursement Report</h1>
"KRN",.84,7981008.001,2,18,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981008.001,2,19,0)
   <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981008.001,2,20,0)
   <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981008.001,2,21,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981008.001,2,22,0)
   <div>
"KRN",.84,7981008.001,2,23,0)
    <xsl:call-template name="ReportSummary"/>
"KRN",.84,7981008.001,2,24,0)
    <xsl:apply-templates select="/REPORT/DRUGS"/>
"KRN",.84,7981008.001,2,25,0)
    <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981008.001,2,26,0)
   </div>
"KRN",.84,7981008.001,2,27,0)
  </body>
"KRN",.84,7981008.001,2,28,0)
 </html>
"KRN",.84,7981008.001,2,29,0)
</xsl:template>
"KRN",.84,7981008.001,2,30,0)
 
"KRN",.84,7981008.001,2,31,0)
<xsl:template match="REPORT/DRUGS">
"KRN",.84,7981008.001,2,32,0)
 <h2>ARV Drugs</h2>
"KRN",.84,7981008.001,2,33,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981008.001,2,34,0)
</xsl:template>
"KRN",.84,7981008.001,2,35,0)
 
"KRN",.84,7981008.001,2,36,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981008.001,2,37,0)
 <h2>Patients</h2>
"KRN",.84,7981008.001,2,38,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981008.001,2,39,0)
</xsl:template>
"KRN",.84,7981008.001,2,40,0)
 
"KRN",.84,7981008.001,2,41,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981008.001,2,42,0)
 
"KRN",.84,7981008.001,2,43,0)
<xsl:template match="COLUMN[@NAME='AIDSTAT']">
"KRN",.84,7981008.001,2,44,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981008.001,2,45,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981008.001,2,46,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981008.001,2,47,0)
  <xsl:with-param name="title" select="'AIDS&#160;OI'"/>
"KRN",.84,7981008.001,2,48,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981008.001,2,49,0)
 </xsl:call-template>
"KRN",.84,7981008.001,2,50,0)
</xsl:template>
"KRN",.84,7981008.001,2,51,0)
 
"KRN",.84,7981008.001,2,52,0)
<xsl:template match="COLUMN[@NAME='ARV']">
"KRN",.84,7981008.001,2,53,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981008.001,2,54,0)
  <xsl:with-param name="title" select="'ARV Drugs'"/>
"KRN",.84,7981008.001,2,55,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981008.001,2,56,0)
 </xsl:call-template>
"KRN",.84,7981008.001,2,57,0)
</xsl:template>
"KRN",.84,7981008.001,2,58,0)
 
"KRN",.84,7981008.001,2,59,0)
<xsl:template match="COLUMN[@NAME='COMPLEX']">
"KRN",.84,7981008.001,2,60,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981008.001,2,61,0)
  <xsl:with-param name="title" select="'Complex Care'"/>
"KRN",.84,7981008.001,2,62,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981008.001,2,63,0)
 </xsl:call-template>
"KRN",.84,7981008.001,2,64,0)
</xsl:template>
"KRN",.84,7981008.001,2,65,0)
 
"KRN",.84,7981008.001,2,66,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981008.001,2,67,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981008.001,2,68,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981008.001,2,69,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981008.001,2,70,0)
 </xsl:call-template>
"KRN",.84,7981008.001,2,71,0)
</xsl:template>
"KRN",.84,7981008.001,2,72,0)
 
"KRN",.84,7981008.001,2,73,0)
<xsl:template match="COLUMN[@NAME='NPAIDS']">
"KRN",.84,7981008.001,2,74,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981008.001,2,75,0)
  <xsl:with-param name="title" select="'Number of AIDS OI Patients'"/>
"KRN",.84,7981008.001,2,76,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981008.001,2,77,0)
 </xsl:call-template>
"KRN",.84,7981008.001,2,78,0)
</xsl:template>
"KRN",.84,7981008.001,2,79,0)
 
"KRN",.84,7981008.001,2,80,0)
<xsl:template match="COLUMN[@NAME='NPHIV']">
"KRN",.84,7981008.001,2,81,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981008.001,2,82,0)
  <xsl:with-param name="title"
"KRN",.84,7981008.001,2,83,0)
                  select="'Number of HIV+ (no AIDS OI) Patients'"/>
"KRN",.84,7981008.001,2,84,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981008.001,2,85,0)
 </xsl:call-template>
"KRN",.84,7981008.001,2,86,0)
</xsl:template>
"KRN",.84,7981008.001,2,87,0)
 
"KRN",.84,7981008.001,2,88,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981008.001,2,89,0)
 
"KRN",.84,7981008.001,2,90,0)
<xsl:template match="PATIENT/ARV|PATIENT/COMPLEX|PATIENT/AIDSTAT">
"KRN",.84,7981008.001,2,91,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981008.001,2,92,0)
  <xsl:with-param name="yesno" select="1"/>
"KRN",.84,7981008.001,2,93,0)
 </xsl:call-template>
"KRN",.84,7981008.001,2,94,0)
</xsl:template>
"KRN",.84,7981008.001,2,95,0)
 
"KRN",.84,7981008.001,2,96,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981008.001,2,97,0)
 
"KRN",.84,7981008.001,2,98,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981008.001,2,99,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981008.001,2,100,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981008.001,2,101,0)
  <thead>
"KRN",.84,7981008.001,2,102,0)
   <tr>
"KRN",.84,7981008.001,2,103,0)
    <th width="25%">Number of Patients</th>
"KRN",.84,7981008.001,2,104,0)
    <th width="25%">Number of Basic Care Patients</th>
"KRN",.84,7981008.001,2,105,0)
    <th width="25%">Number of Complex Care Patients</th>
"KRN",.84,7981008.001,2,106,0)
    <th width="25%">Number of Patients Received ARV Drugs</th>
"KRN",.84,7981008.001,2,107,0)
   </tr>
"KRN",.84,7981008.001,2,108,0)
  </thead>
"KRN",.84,7981008.001,2,109,0)
  <tbody>
"KRN",.84,7981008.001,2,110,0)
   <tr>
"KRN",.84,7981008.001,2,111,0)
    <td><xsl:value-of select="$summary/NP"/></td>
"KRN",.84,7981008.001,2,112,0)
    <td><xsl:value-of select="$summary/NPBASIC"/></td>
"KRN",.84,7981008.001,2,113,0)
    <td><xsl:value-of select="$summary/NPCOMPLEX"/></td>
"KRN",.84,7981008.001,2,114,0)
    <td><xsl:value-of select="$summary/NPARV"/></td>
"KRN",.84,7981008.001,2,115,0)
   </tr>
"KRN",.84,7981008.001,2,116,0)
  </tbody>
"KRN",.84,7981008.001,2,117,0)
 </table>
"KRN",.84,7981008.001,2,118,0)
</xsl:template>
"KRN",.84,7981008.001,2,119,0)
 
"KRN",.84,7981008.001,2,120,0)
</xsl:stylesheet>
"KRN",.84,7981009.001,-1)
0^21
"KRN",.84,7981009.001,0)
7981009.001^2^^CLINICAL CASE REGISTRIES^Pharmacy Prescription Utilization (HTML)
"KRN",.84,7981009.001,2,0)
^^226^226^3100218^
"KRN",.84,7981009.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981009.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981009.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981009.001,2,4,0)
>
"KRN",.84,7981009.001,2,5,0)
 
"KRN",.84,7981009.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981009.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981009.001,2,8,0)
<xsl:import  href="template://report/996/1"/>  <!-- Pharmacy -->
"KRN",.84,7981009.001,2,9,0)
 
"KRN",.84,7981009.001,2,10,0)
<xsl:template match="/">
"KRN",.84,7981009.001,2,11,0)
 <html>
"KRN",.84,7981009.001,2,12,0)
  <head>
"KRN",.84,7981009.001,2,13,0)
   <title>Pharmacy Prescription Utilization</title>
"KRN",.84,7981009.001,2,14,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981009.001,2,15,0)
  </head>
"KRN",.84,7981009.001,2,16,0)
  <body>
"KRN",.84,7981009.001,2,17,0)
   <h1>Pharmacy Prescription Utilization</h1>
"KRN",.84,7981009.001,2,18,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981009.001,2,19,0)
   <xsl:choose>
"KRN",.84,7981009.001,2,20,0)
    <xsl:when test="/REPORT/INPATIENTS/*[1]|/REPORT/OUTPATIENTS/*[1]">
"KRN",.84,7981009.001,2,21,0)
     <xsl:apply-templates select="/REPORT/OUTPATIENTS"/>
"KRN",.84,7981009.001,2,22,0)
     <xsl:apply-templates select="/REPORT/INPATIENTS"/>
"KRN",.84,7981009.001,2,23,0)
     <xsl:apply-templates select="/REPORT/SUMMARY"/>
"KRN",.84,7981009.001,2,24,0)
    </xsl:when>
"KRN",.84,7981009.001,2,25,0)
    <xsl:otherwise>
"KRN",.84,7981009.001,2,26,0)
     <xsl:call-template name="TableNoData"/>
"KRN",.84,7981009.001,2,27,0)
    </xsl:otherwise>
"KRN",.84,7981009.001,2,28,0)
   </xsl:choose>
"KRN",.84,7981009.001,2,29,0)
  </body>
"KRN",.84,7981009.001,2,30,0)
 </html>
"KRN",.84,7981009.001,2,31,0)
</xsl:template>
"KRN",.84,7981009.001,2,32,0)
 
"KRN",.84,7981009.001,2,33,0)
<xsl:template match="REPORT/INPATIENTS">
"KRN",.84,7981009.001,2,34,0)
 <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981009.001,2,35,0)
 <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981009.001,2,36,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981009.001,2,37,0)
 <div>
"KRN",.84,7981009.001,2,38,0)
  <h2>Selected Inpatient Activity</h2>
"KRN",.84,7981009.001,2,39,0)
  <xsl:call-template name="InpatientSummary"/>
"KRN",.84,7981009.001,2,40,0)
  <xsl:apply-templates select="*"/>
"KRN",.84,7981009.001,2,41,0)
 </div>
"KRN",.84,7981009.001,2,42,0)
</xsl:template>
"KRN",.84,7981009.001,2,43,0)
 
"KRN",.84,7981009.001,2,44,0)
<xsl:template match="REPORT/OUTPATIENTS">
"KRN",.84,7981009.001,2,45,0)
 <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981009.001,2,46,0)
 <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981009.001,2,47,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981009.001,2,48,0)
 <div>
"KRN",.84,7981009.001,2,49,0)
  <h2>Selected Outpatient Activity</h2>
"KRN",.84,7981009.001,2,50,0)
  <xsl:call-template name="OutpatientSummary"/>
"KRN",.84,7981009.001,2,51,0)
  <xsl:apply-templates select="*"/>
"KRN",.84,7981009.001,2,52,0)
 </div>
"KRN",.84,7981009.001,2,53,0)
</xsl:template>
"KRN",.84,7981009.001,2,54,0)
 
"KRN",.84,7981009.001,2,55,0)
<xsl:template match="REPORT/SUMMARY/HU_NRX">
"KRN",.84,7981009.001,2,56,0)
 <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981009.001,2,57,0)
 <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981009.001,2,58,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981009.001,2,59,0)
 <div>
"KRN",.84,7981009.001,2,60,0)
  <h2>Highest Combined OP and IP Utilization Summary</h2>
"KRN",.84,7981009.001,2,61,0)
  <xsl:call-template name="DataGrid"/>
"KRN",.84,7981009.001,2,62,0)
 </div>
"KRN",.84,7981009.001,2,63,0)
</xsl:template>
"KRN",.84,7981009.001,2,64,0)
 
"KRN",.84,7981009.001,2,65,0)
<xsl:template match="INPATIENTS/*">
"KRN",.84,7981009.001,2,66,0)
 <xsl:variable name="name" select="name(.)"/>
"KRN",.84,7981009.001,2,67,0)
 <xsl:choose>
"KRN",.84,7981009.001,2,68,0)
  <xsl:when test="$name='DOSES'">
"KRN",.84,7981009.001,2,69,0)
   <br clear="both"/>
"KRN",.84,7981009.001,2,70,0)
   <xsl:call-template name="DataGrid">
"KRN",.84,7981009.001,2,71,0)
    <xsl:with-param name="divstyle" select="'width:50%'"/>
"KRN",.84,7981009.001,2,72,0)
   </xsl:call-template>
"KRN",.84,7981009.001,2,73,0)
  </xsl:when>
"KRN",.84,7981009.001,2,74,0)
  <xsl:when test="$name='DRUGS_DOSES'">
"KRN",.84,7981009.001,2,75,0)
   <h3>Inpatient Medications</h3>
"KRN",.84,7981009.001,2,76,0)
   <xsl:call-template name="DataGrid"/>
"KRN",.84,7981009.001,2,77,0)
  </xsl:when>
"KRN",.84,7981009.001,2,78,0)
  <xsl:when test="$name='HU_DOSES'">
"KRN",.84,7981009.001,2,79,0)
   <h3><xsl:call-template name="HUPatientsHeader"/> by number of doses</h3>
"KRN",.84,7981009.001,2,80,0)
   <xsl:call-template name="DataGrid"/>
"KRN",.84,7981009.001,2,81,0)
  </xsl:when>
"KRN",.84,7981009.001,2,82,0)
 </xsl:choose>
"KRN",.84,7981009.001,2,83,0)
</xsl:template>
"KRN",.84,7981009.001,2,84,0)
 
"KRN",.84,7981009.001,2,85,0)
<xsl:template match="OUTPATIENTS/*">
"KRN",.84,7981009.001,2,86,0)
 <xsl:variable name="name" select="name(.)"/>
"KRN",.84,7981009.001,2,87,0)
 <xsl:choose>
"KRN",.84,7981009.001,2,88,0)
  <xsl:when test="$name='FILLS'">
"KRN",.84,7981009.001,2,89,0)
   <br clear="both"/>
"KRN",.84,7981009.001,2,90,0)
   <xsl:call-template name="DataGrid">
"KRN",.84,7981009.001,2,91,0)
    <xsl:with-param name="divstyle" select="'width:50%'"/>
"KRN",.84,7981009.001,2,92,0)
   </xsl:call-template>
"KRN",.84,7981009.001,2,93,0)
  </xsl:when>
"KRN",.84,7981009.001,2,94,0)
  <xsl:when test="$name='DRUGS_FILLS'">
"KRN",.84,7981009.001,2,95,0)
   <h3>Outpatient Medications</h3>
"KRN",.84,7981009.001,2,96,0)
   <xsl:call-template name="DataGrid"/>
"KRN",.84,7981009.001,2,97,0)
  </xsl:when>
"KRN",.84,7981009.001,2,98,0)
  <xsl:when test="$name='HU_FILLS'">
"KRN",.84,7981009.001,2,99,0)
   <h3><xsl:call-template name="HUPatientsHeader"/> by number of fills</h3>
"KRN",.84,7981009.001,2,100,0)
   <xsl:call-template name="DataGrid"/>
"KRN",.84,7981009.001,2,101,0)
  </xsl:when>
"KRN",.84,7981009.001,2,102,0)
 </xsl:choose>
"KRN",.84,7981009.001,2,103,0)
</xsl:template>
"KRN",.84,7981009.001,2,104,0)
 
"KRN",.84,7981009.001,2,105,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981009.001,2,106,0)
 
"KRN",.84,7981009.001,2,107,0)
<xsl:template name="InpatientSummary">
"KRN",.84,7981009.001,2,108,0)
 <xsl:variable name="IP" select="."/>
"KRN",.84,7981009.001,2,109,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981009.001,2,110,0)
  <thead>
"KRN",.84,7981009.001,2,111,0)
   <tr>
"KRN",.84,7981009.001,2,112,0)
    <th width="33%">Number of Patients</th>
"KRN",.84,7981009.001,2,113,0)
    <th width="33%">Number of Doses</th>
"KRN",.84,7981009.001,2,114,0)
    <th width="33%">Number of Different Medications</th>
"KRN",.84,7981009.001,2,115,0)
   </tr>
"KRN",.84,7981009.001,2,116,0)
  </thead>
"KRN",.84,7981009.001,2,117,0)
  <tbody>
"KRN",.84,7981009.001,2,118,0)
   <tr>
"KRN",.84,7981009.001,2,119,0)
    <td><xsl:value-of select="$IP/NP"/></td>
"KRN",.84,7981009.001,2,120,0)
    <td><xsl:value-of select="$IP/IPNRX"/></td>
"KRN",.84,7981009.001,2,121,0)
    <td><xsl:value-of select="$IP/ND"/></td>
"KRN",.84,7981009.001,2,122,0)
   </tr>
"KRN",.84,7981009.001,2,123,0)
  </tbody>
"KRN",.84,7981009.001,2,124,0)
 </table>
"KRN",.84,7981009.001,2,125,0)
</xsl:template>
"KRN",.84,7981009.001,2,126,0)
 
"KRN",.84,7981009.001,2,127,0)
<xsl:template name="OutpatientSummary">
"KRN",.84,7981009.001,2,128,0)
 <xsl:variable name="OP" select="."/>
"KRN",.84,7981009.001,2,129,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981009.001,2,130,0)
  <thead>
"KRN",.84,7981009.001,2,131,0)
   <tr>
"KRN",.84,7981009.001,2,132,0)
    <th width="33%">Number of Patients</th>
"KRN",.84,7981009.001,2,133,0)
    <th width="33%">Number of Fills</th>
"KRN",.84,7981009.001,2,134,0)
    <th width="33%">Number of Different Medications</th>
"KRN",.84,7981009.001,2,135,0)
   </tr>
"KRN",.84,7981009.001,2,136,0)
  </thead>
"KRN",.84,7981009.001,2,137,0)
  <tbody>
"KRN",.84,7981009.001,2,138,0)
   <tr>
"KRN",.84,7981009.001,2,139,0)
    <td><xsl:value-of select="$OP/NP"/></td>
"KRN",.84,7981009.001,2,140,0)
    <td><xsl:value-of select="$OP/OPNRX"/></td>
"KRN",.84,7981009.001,2,141,0)
    <td><xsl:value-of select="$OP/ND"/></td>
"KRN",.84,7981009.001,2,142,0)
   </tr>
"KRN",.84,7981009.001,2,143,0)
  </tbody>
"KRN",.84,7981009.001,2,144,0)
 </table>
"KRN",.84,7981009.001,2,145,0)
</xsl:template>
"KRN",.84,7981009.001,2,146,0)
 
"KRN",.84,7981009.001,2,147,0)
<!--[ COLUMN HEADERS ]-->
"KRN",.84,7981009.001,2,148,0)
 
"KRN",.84,7981009.001,2,149,0)
<xsl:template match="COLUMN[@NAME='IPNRX']">
"KRN",.84,7981009.001,2,150,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981009.001,2,151,0)
  <xsl:with-param name="title" select="'Number of Doses'"/>
"KRN",.84,7981009.001,2,152,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981009.001,2,153,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981009.001,2,154,0)
 </xsl:call-template> 
"KRN",.84,7981009.001,2,155,0)
</xsl:template>
"KRN",.84,7981009.001,2,156,0)
 
"KRN",.84,7981009.001,2,157,0)
<xsl:template match="COLUMN[@NAME='MAXNP']">
"KRN",.84,7981009.001,2,158,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981009.001,2,159,0)
  <xsl:with-param name="title"
"KRN",.84,7981009.001,2,160,0)
       select="'Number of Patients with Max. Utilization'"/>
"KRN",.84,7981009.001,2,161,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981009.001,2,162,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981009.001,2,163,0)
 </xsl:call-template>
"KRN",.84,7981009.001,2,164,0)
</xsl:template>
"KRN",.84,7981009.001,2,165,0)
 
"KRN",.84,7981009.001,2,166,0)
<xsl:template match="COLUMN[@NAME='MAXNRPP']">
"KRN",.84,7981009.001,2,167,0)
 <xsl:variable name="tblname" select="../@NAME"/>
"KRN",.84,7981009.001,2,168,0)
 <xsl:variable name="title">
"KRN",.84,7981009.001,2,169,0)
  <xsl:text>Maximum Number of </xsl:text>
"KRN",.84,7981009.001,2,170,0)
  <xsl:choose>
"KRN",.84,7981009.001,2,171,0)
   <xsl:when test="contains($tblname,'DOSE')">Doses</xsl:when>
"KRN",.84,7981009.001,2,172,0)
   <xsl:when test="contains($tblname,'FILL')">Fills</xsl:when>
"KRN",.84,7981009.001,2,173,0)
   <xsl:otherwise>Doses/Fills</xsl:otherwise>
"KRN",.84,7981009.001,2,174,0)
  </xsl:choose>
"KRN",.84,7981009.001,2,175,0)
  <xsl:text> per Patient</xsl:text>
"KRN",.84,7981009.001,2,176,0)
 </xsl:variable>
"KRN",.84,7981009.001,2,177,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981009.001,2,178,0)
  <xsl:with-param name="title" select="$title"/>
"KRN",.84,7981009.001,2,179,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981009.001,2,180,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981009.001,2,181,0)
 </xsl:call-template>
"KRN",.84,7981009.001,2,182,0)
</xsl:template>
"KRN",.84,7981009.001,2,183,0)
 
"KRN",.84,7981009.001,2,184,0)
<xsl:template match="TBLDEF[contains(@NAME,'HU_')]/COLUMN[@NAME='NAME']">
"KRN",.84,7981009.001,2,185,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981009.001,2,186,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981009.001,2,187,0)
 </xsl:call-template>
"KRN",.84,7981009.001,2,188,0)
</xsl:template>
"KRN",.84,7981009.001,2,189,0)
 
"KRN",.84,7981009.001,2,190,0)
<xsl:template match="COLUMN[@NAME='ND']">
"KRN",.84,7981009.001,2,191,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981009.001,2,192,0)
  <xsl:with-param name="title" select="'Number of Different Medications'"/>
"KRN",.84,7981009.001,2,193,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981009.001,2,194,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981009.001,2,195,0)
 </xsl:call-template>
"KRN",.84,7981009.001,2,196,0)
</xsl:template>
"KRN",.84,7981009.001,2,197,0)
 
"KRN",.84,7981009.001,2,198,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981009.001,2,199,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981009.001,2,200,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981009.001,2,201,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981009.001,2,202,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981009.001,2,203,0)
 </xsl:call-template>
"KRN",.84,7981009.001,2,204,0)
</xsl:template>
"KRN",.84,7981009.001,2,205,0)
 
"KRN",.84,7981009.001,2,206,0)
<xsl:template match="COLUMN[@NAME='OPNRX']">
"KRN",.84,7981009.001,2,207,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981009.001,2,208,0)
  <xsl:with-param name="title" select="'Number of Fills'"/>
"KRN",.84,7981009.001,2,209,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981009.001,2,210,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981009.001,2,211,0)
 </xsl:call-template> 
"KRN",.84,7981009.001,2,212,0)
</xsl:template>
"KRN",.84,7981009.001,2,213,0)
 
"KRN",.84,7981009.001,2,214,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981009.001,2,215,0)
 
"KRN",.84,7981009.001,2,216,0)
<xsl:template match="PARAMETERS/MAXUTNUM">
"KRN",.84,7981009.001,2,217,0)
 <tr>
"KRN",.84,7981009.001,2,218,0)
  <th scope="row">MaxUtil:&#160;</th>
"KRN",.84,7981009.001,2,219,0)
  <td>
"KRN",.84,7981009.001,2,220,0)
   <xsl:value-of select="."/>
"KRN",.84,7981009.001,2,221,0)
   (maximum number of patients with highest utilization to display)
"KRN",.84,7981009.001,2,222,0)
  </td>
"KRN",.84,7981009.001,2,223,0)
 </tr>
"KRN",.84,7981009.001,2,224,0)
</xsl:template>
"KRN",.84,7981009.001,2,225,0)
 
"KRN",.84,7981009.001,2,226,0)
</xsl:stylesheet>
"KRN",.84,7981010.001,-1)
0^22
"KRN",.84,7981010.001,0)
7981010.001^2^^CLINICAL CASE REGISTRIES^Registry Lab Tests by Range (HTML)
"KRN",.84,7981010.001,2,0)
^^97^97^3100218^
"KRN",.84,7981010.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981010.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981010.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981010.001,2,4,0)
>
"KRN",.84,7981010.001,2,5,0)
 
"KRN",.84,7981010.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981010.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981010.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->            
"KRN",.84,7981010.001,2,9,0)
<xsl:include href="template://report/995/1"/>  <!-- Lab Data -->
"KRN",.84,7981010.001,2,10,0)
 
"KRN",.84,7981010.001,2,11,0)
<xsl:template match="/">
"KRN",.84,7981010.001,2,12,0)
 <html>
"KRN",.84,7981010.001,2,13,0)
  <head>
"KRN",.84,7981010.001,2,14,0)
   <title>Registry Lab Tests by Range</title>
"KRN",.84,7981010.001,2,15,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981010.001,2,16,0)
  </head>
"KRN",.84,7981010.001,2,17,0)
  <body>
"KRN",.84,7981010.001,2,18,0)
   <h1>Registry Lab Tests by Range</h1>
"KRN",.84,7981010.001,2,19,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981010.001,2,20,0)
   <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981010.001,2,21,0)
  </body>
"KRN",.84,7981010.001,2,22,0)
 </html>
"KRN",.84,7981010.001,2,23,0)
</xsl:template>
"KRN",.84,7981010.001,2,24,0)
 
"KRN",.84,7981010.001,2,25,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981010.001,2,26,0)
 <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981010.001,2,27,0)
 <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981010.001,2,28,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981010.001,2,29,0)
 <div>
"KRN",.84,7981010.001,2,30,0)
  <xsl:call-template name="DataGrid">
"KRN",.84,7981010.001,2,31,0)
   <xsl:with-param name="scroll" select="descendant::LT[31]"/>
"KRN",.84,7981010.001,2,32,0)
  </xsl:call-template>
"KRN",.84,7981010.001,2,33,0)
 </div>
"KRN",.84,7981010.001,2,34,0)
</xsl:template>
"KRN",.84,7981010.001,2,35,0)
 
"KRN",.84,7981010.001,2,36,0)
<!--[ TABLE HEADER ]-->
"KRN",.84,7981010.001,2,37,0)
 
"KRN",.84,7981010.001,2,38,0)
<xsl:template match="TBLDEF[@NAME='PATIENTS']/@HEADER">
"KRN",.84,7981010.001,2,39,0)
 <xsl:variable name="PTLRL" select="../COLUMN[@NAME='PTLRL']"/>
"KRN",.84,7981010.001,2,40,0)
 <thead>
"KRN",.84,7981010.001,2,41,0)
  <tr>
"KRN",.84,7981010.001,2,42,0)
   <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981010.001,2,43,0)
    <xsl:with-param name="rowspan" select="2"/>
"KRN",.84,7981010.001,2,44,0)
   </xsl:call-template>
"KRN",.84,7981010.001,2,45,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981010.001,2,46,0)
    <xsl:with-param name="column" select="$PTLRL"/>
"KRN",.84,7981010.001,2,47,0)
    <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981010.001,2,48,0)
    <xsl:with-param name="title" select="'Laboratory Tests'"/>                                  
"KRN",.84,7981010.001,2,49,0)
    <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981010.001,2,50,0)
    <xsl:with-param name="width" select="'60%'"/>
"KRN",.84,7981010.001,2,51,0)
   </xsl:call-template>
"KRN",.84,7981010.001,2,52,0)
  </tr>
"KRN",.84,7981010.001,2,53,0)
  <tr>
"KRN",.84,7981010.001,2,54,0)
   <xsl:call-template name="BasicLRHeader">
"KRN",.84,7981010.001,2,55,0)
    <xsl:with-param name="group" select="1"/>
"KRN",.84,7981010.001,2,56,0)
   </xsl:call-template>
"KRN",.84,7981010.001,2,57,0)
  </tr>
"KRN",.84,7981010.001,2,58,0)
 </thead>
"KRN",.84,7981010.001,2,59,0)
</xsl:template>
"KRN",.84,7981010.001,2,60,0)
 
"KRN",.84,7981010.001,2,61,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981010.001,2,62,0)
 
"KRN",.84,7981010.001,2,63,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981010.001,2,64,0)
 <xsl:variable name="rowspan" select="count(PTLRL/LT)"/>
"KRN",.84,7981010.001,2,65,0)
 <tr>
"KRN",.84,7981010.001,2,66,0)
  <xsl:call-template name="BasicPatientData">
"KRN",.84,7981010.001,2,67,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981010.001,2,68,0)
  </xsl:call-template>
"KRN",.84,7981010.001,2,69,0)
  <xsl:for-each select="PTLRL/LT[1]">
"KRN",.84,7981010.001,2,70,0)
   <xsl:call-template name="BasicLRData">
"KRN",.84,7981010.001,2,71,0)
    <xsl:with-param name="group" select="1"/>
"KRN",.84,7981010.001,2,72,0)
   </xsl:call-template>
"KRN",.84,7981010.001,2,73,0)
  </xsl:for-each>
"KRN",.84,7981010.001,2,74,0)
 </tr>
"KRN",.84,7981010.001,2,75,0)
 <xsl:for-each select="PTLRL/LT[position()>1]">
"KRN",.84,7981010.001,2,76,0)
  <tr>
"KRN",.84,7981010.001,2,77,0)
   <xsl:call-template name="BasicLRData">
"KRN",.84,7981010.001,2,78,0)
    <xsl:with-param name="group" select="1"/>
"KRN",.84,7981010.001,2,79,0)
   </xsl:call-template>
"KRN",.84,7981010.001,2,80,0)
  </tr>
"KRN",.84,7981010.001,2,81,0)
 </xsl:for-each>
"KRN",.84,7981010.001,2,82,0)
</xsl:template>
"KRN",.84,7981010.001,2,83,0)
 
"KRN",.84,7981010.001,2,84,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981010.001,2,85,0)
<!-- 
"KRN",.84,7981010.001,2,86,0)
<xsl:template match="PARAMETERS/LRGRANGES">
"KRN",.84,7981010.001,2,87,0)
 <tr>
"KRN",.84,7981010.001,2,88,0)
  <th scope="row">Lab Results:&#160;</th>
"KRN",.84,7981010.001,2,89,0)
  <td>
"KRN",.84,7981010.001,2,90,0)
   <xsl:for-each select="LRGRANGE">
"KRN",.84,7981010.001,2,91,0)
    <xsl:value-of select="."/><br/>
"KRN",.84,7981010.001,2,92,0)
   </xsl:for-each>
"KRN",.84,7981010.001,2,93,0)
  </td>
"KRN",.84,7981010.001,2,94,0)
 </tr>
"KRN",.84,7981010.001,2,95,0)
</xsl:template>
"KRN",.84,7981010.001,2,96,0)
--> 
"KRN",.84,7981010.001,2,97,0)
</xsl:stylesheet>
"KRN",.84,7981011.001,-1)
0^23
"KRN",.84,7981011.001,0)
7981011.001^2^^CLINICAL CASE REGISTRIES^Patient Medication History (HTML)
"KRN",.84,7981011.001,2,0)
^^154^154^3100218^
"KRN",.84,7981011.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981011.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981011.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981011.001,2,4,0)
>
"KRN",.84,7981011.001,2,5,0)
 
"KRN",.84,7981011.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981011.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981011.001,2,8,0)
<xsl:import  href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981011.001,2,9,0)
<xsl:include href="template://report/996/1"/>  <!-- Pharmacy -->
"KRN",.84,7981011.001,2,10,0)
 
"KRN",.84,7981011.001,2,11,0)
<xsl:template match="/">
"KRN",.84,7981011.001,2,12,0)
 <html>
"KRN",.84,7981011.001,2,13,0)
  <head>
"KRN",.84,7981011.001,2,14,0)
   <title>Patient Medication History</title>
"KRN",.84,7981011.001,2,15,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981011.001,2,16,0)
  </head>
"KRN",.84,7981011.001,2,17,0)
  <body>
"KRN",.84,7981011.001,2,18,0)
   <h1>Patient Medication History</h1>
"KRN",.84,7981011.001,2,19,0)
   <xsl:call-template name="ReportHeader"/> 
"KRN",.84,7981011.001,2,20,0)
   <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981011.001,2,21,0)
  </body>
"KRN",.84,7981011.001,2,22,0)
 </html>
"KRN",.84,7981011.001,2,23,0)
</xsl:template>
"KRN",.84,7981011.001,2,24,0)
 
"KRN",.84,7981011.001,2,25,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981011.001,2,26,0)
 <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981011.001,2,27,0)
 <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981011.001,2,28,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981011.001,2,29,0)
 <div>
"KRN",.84,7981011.001,2,30,0)
  <h2><xsl:value-of select="NAME"/></h2>
"KRN",.84,7981011.001,2,31,0)
  <table width="70%" cellpadding="5" cellspacing="0">
"KRN",.84,7981011.001,2,32,0)
   <thead>
"KRN",.84,7981011.001,2,33,0)
    <tr>
"KRN",.84,7981011.001,2,34,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,35,0)
      <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981011.001,2,36,0)
      <xsl:with-param name="title" select="'#'"/>
"KRN",.84,7981011.001,2,37,0)
      <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981011.001,2,38,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,39,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,40,0)
      <xsl:with-param name="sort" select="'PATIENTS=NAME'"/>
"KRN",.84,7981011.001,2,41,0)
      <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981011.001,2,42,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,43,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,44,0)
      <xsl:with-param name="sort" select="'PATIENTS=LAST4'"/>
"KRN",.84,7981011.001,2,45,0)
      <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981011.001,2,46,0)
      <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981011.001,2,47,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,48,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,49,0)
      <xsl:with-param name="sort" select="'PATIENTS=DOB'"/>
"KRN",.84,7981011.001,2,50,0)
      <xsl:with-param name="title" select="'Date of Birth'"/>
"KRN",.84,7981011.001,2,51,0)
      <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981011.001,2,52,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,53,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,54,0)
      <xsl:with-param name="sort" select="'PATIENTS=AGE'"/>
"KRN",.84,7981011.001,2,55,0)
      <xsl:with-param name="title" select="'Age'"/>
"KRN",.84,7981011.001,2,56,0)
      <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981011.001,2,57,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,58,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,59,0)
      <xsl:with-param name="sort" select="'PATIENTS=DOD'"/>
"KRN",.84,7981011.001,2,60,0)
      <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981011.001,2,61,0)
      <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981011.001,2,62,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,63,0)
    </tr>
"KRN",.84,7981011.001,2,64,0)
   </thead>
"KRN",.84,7981011.001,2,65,0)
   <tbody>
"KRN",.84,7981011.001,2,66,0)
    <tr>
"KRN",.84,7981011.001,2,67,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,68,0)
      <xsl:with-param name="value" select="position()"/>
"KRN",.84,7981011.001,2,69,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,70,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,71,0)
      <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981011.001,2,72,0)
      <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981011.001,2,73,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,74,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,75,0)
      <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981011.001,2,76,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,77,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,78,0)
      <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981011.001,2,79,0)
      <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.001,2,80,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,81,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,82,0)
      <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981011.001,2,83,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,84,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,85,0)
      <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981011.001,2,86,0)
      <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.001,2,87,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,88,0)
    </tr>
"KRN",.84,7981011.001,2,89,0)
   </tbody>
"KRN",.84,7981011.001,2,90,0)
  </table>
"KRN",.84,7981011.001,2,91,0)
  <h3>Drug History</h3>
"KRN",.84,7981011.001,2,92,0)
  <xsl:apply-templates select="PTRXL"/>
"KRN",.84,7981011.001,2,93,0)
 </div>
"KRN",.84,7981011.001,2,94,0)
</xsl:template>
"KRN",.84,7981011.001,2,95,0)
 
"KRN",.84,7981011.001,2,96,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981011.001,2,97,0)
 
"KRN",.84,7981011.001,2,98,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981011.001,2,99,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,100,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981011.001,2,101,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981011.001,2,102,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,103,0)
</xsl:template>
"KRN",.84,7981011.001,2,104,0)
 
"KRN",.84,7981011.001,2,105,0)
<xsl:template match="COLUMN[@NAME='DAYSPLY']">
"KRN",.84,7981011.001,2,106,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,107,0)
  <xsl:with-param name="title" select="'Days Supply'"/>
"KRN",.84,7981011.001,2,108,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981011.001,2,109,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,110,0)
</xsl:template>
"KRN",.84,7981011.001,2,111,0)
 
"KRN",.84,7981011.001,2,112,0)
<xsl:template match="COLUMN[@NAME='FILLTYPE']">
"KRN",.84,7981011.001,2,113,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,114,0)
  <xsl:with-param name="title" select="'Fill Type'"/>
"KRN",.84,7981011.001,2,115,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981011.001,2,116,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,117,0)
</xsl:template>
"KRN",.84,7981011.001,2,118,0)
 
"KRN",.84,7981011.001,2,119,0)
<xsl:template match="COLUMN[@NAME='GENERIC']">
"KRN",.84,7981011.001,2,120,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,121,0)
  <xsl:with-param name="title" select="'Generic Name'"/>
"KRN",.84,7981011.001,2,122,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,123,0)
</xsl:template>
"KRN",.84,7981011.001,2,124,0)
 
"KRN",.84,7981011.001,2,125,0)
<xsl:template match="COLUMN[@NAME='ORDER']">
"KRN",.84,7981011.001,2,126,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,127,0)
  <xsl:with-param name="title" select="'Rx#'"/>
"KRN",.84,7981011.001,2,128,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981011.001,2,129,0)
  <xsl:with-param name="sort" select="'PTRXL=ORDER'"/>
"KRN",.84,7981011.001,2,130,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,131,0)
</xsl:template>
"KRN",.84,7981011.001,2,132,0)
 
"KRN",.84,7981011.001,2,133,0)
<xsl:template match="COLUMN[@NAME='TYPE']">
"KRN",.84,7981011.001,2,134,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,135,0)
  <xsl:with-param name="title" select="'Type'"/>
"KRN",.84,7981011.001,2,136,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981011.001,2,137,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,138,0)
</xsl:template>
"KRN",.84,7981011.001,2,139,0)
 
"KRN",.84,7981011.001,2,140,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981011.001,2,141,0)
 
"KRN",.84,7981011.001,2,142,0)
<xsl:template match="DRUG/DATE">
"KRN",.84,7981011.001,2,143,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,144,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.001,2,145,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,146,0)
</xsl:template>
"KRN",.84,7981011.001,2,147,0)
 
"KRN",.84,7981011.001,2,148,0)
<xsl:template match="DRUG/GENERIC">
"KRN",.84,7981011.001,2,149,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,150,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981011.001,2,151,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,152,0)
</xsl:template>
"KRN",.84,7981011.001,2,153,0)
 
"KRN",.84,7981011.001,2,154,0)
</xsl:stylesheet>
"KRN",.84,7981012.001,-1)
0^24
"KRN",.84,7981012.001,0)
7981012.001^2^^CLINICAL CASE REGISTRIES^Combined Meds and Labs Report (HTML)
"KRN",.84,7981012.001,2,0)
^^385^385^3100218^
"KRN",.84,7981012.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981012.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981012.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981012.001,2,4,0)
>
"KRN",.84,7981012.001,2,5,0)
 
"KRN",.84,7981012.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981012.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981012.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->            
"KRN",.84,7981012.001,2,9,0)
<xsl:include href="template://report/996/1"/>  <!-- Pharmacy -->
"KRN",.84,7981012.001,2,10,0)
<xsl:include href="template://report/995/1"/>  <!-- Lab Data -->
"KRN",.84,7981012.001,2,11,0)
 
"KRN",.84,7981012.001,2,12,0)
<xsl:key name="patient-drug" match="/REPORT/DRUGS/DRUG"  use="@ID"/>
"KRN",.84,7981012.001,2,13,0)
<xsl:key name="patient-lt"   match="/REPORT/LABTESTS/LT" use="@ID"/>
"KRN",.84,7981012.001,2,14,0)
<xsl:key name="patient-both" match="/REPORT/DRUGS/DRUG|/REPORT/LABTESTS/LT" use="@ID"/>
"KRN",.84,7981012.001,2,15,0)
 
"KRN",.84,7981012.001,2,16,0)
<!-- Determine if the Meds and/or Labs table is not empty. -->
"KRN",.84,7981012.001,2,17,0)
<xsl:variable name="D1" select="/REPORT/DRUGS/DRUG[1]"/>
"KRN",.84,7981012.001,2,18,0)
<xsl:variable name="L1" select="/REPORT/LABTESTS/LT[1]"/>
"KRN",.84,7981012.001,2,19,0)
 
"KRN",.84,7981012.001,2,20,0)
<!-- Determine if the Meds and/or Labs table is sorted by a patient data field. -->
"KRN",.84,7981012.001,2,21,0)
<xsl:variable name="PTCOLS"   select="',DOD,LAST4,NAME,'"/>
"KRN",.84,7981012.001,2,22,0)
<xsl:variable name="PTSDRUGS" select="contains($PTCOLS,concat(',',/REPORT/DRUGS/@SORT,','))"/>
"KRN",.84,7981012.001,2,23,0)
<xsl:variable name="PTSLABS"  select="contains($PTCOLS,concat(',',/REPORT/LABTESTS/@SORT,','))"/>
"KRN",.84,7981012.001,2,24,0)
 
"KRN",.84,7981012.001,2,25,0)
<xsl:template match="/">
"KRN",.84,7981012.001,2,26,0)
 <html>
"KRN",.84,7981012.001,2,27,0)
  <head>
"KRN",.84,7981012.001,2,28,0)
   <title>Combined Meds and Labs Report</title>
"KRN",.84,7981012.001,2,29,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981012.001,2,30,0)
  </head>
"KRN",.84,7981012.001,2,31,0)
  <body>
"KRN",.84,7981012.001,2,32,0)
   <h1>Combined Meds and Labs Report</h1>
"KRN",.84,7981012.001,2,33,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981012.001,2,34,0)
   <xsl:choose>
"KRN",.84,7981012.001,2,35,0)
    <!-- 
"KRN",.84,7981012.001,2,36,0)
     If both Meds and Labs tables are not empty and at least one of them
"KRN",.84,7981012.001,2,37,0)
     is sorted by patient data field, then group the data by patients.
"KRN",.84,7981012.001,2,38,0)
    -->
"KRN",.84,7981012.001,2,39,0)
    <xsl:when test="$D1 and $L1 and ($PTSDRUGS or $PTSLABS)">
"KRN",.84,7981012.001,2,40,0)
     <xsl:call-template name="MedsAndLabs"/>
"KRN",.84,7981012.001,2,41,0)
    </xsl:when>
"KRN",.84,7981012.001,2,42,0)
    <!-- 
"KRN",.84,7981012.001,2,43,0)
     Otherwise, format available data using separate tables.
"KRN",.84,7981012.001,2,44,0)
    -->
"KRN",.84,7981012.001,2,45,0)
    <xsl:when test="$D1 or $L1 or /REPORT/PATIENTS/PATIENT[1]">
"KRN",.84,7981012.001,2,46,0)
     <xsl:apply-templates select="/REPORT/DRUGS"/>
"KRN",.84,7981012.001,2,47,0)
     <xsl:apply-templates select="/REPORT/LABTESTS"/>
"KRN",.84,7981012.001,2,48,0)
     <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981012.001,2,49,0)
    </xsl:when>
"KRN",.84,7981012.001,2,50,0)
    <xsl:otherwise>
"KRN",.84,7981012.001,2,51,0)
     <xsl:call-template name="TableNoData"/>
"KRN",.84,7981012.001,2,52,0)
    </xsl:otherwise>
"KRN",.84,7981012.001,2,53,0)
   </xsl:choose>
"KRN",.84,7981012.001,2,54,0)
  </body>
"KRN",.84,7981012.001,2,55,0)
 </html>
"KRN",.84,7981012.001,2,56,0)
</xsl:template>
"KRN",.84,7981012.001,2,57,0)
 
"KRN",.84,7981012.001,2,58,0)
<xsl:template name="MedsAndLabs">
"KRN",.84,7981012.001,2,59,0)
 <xsl:variable name="SORT">
"KRN",.84,7981012.001,2,60,0)
  <xsl:choose>
"KRN",.84,7981012.001,2,61,0)
   <xsl:when test="$PTSDRUGS"><xsl:value-of select="/REPORT/DRUGS/@SORT"/></xsl:when>
"KRN",.84,7981012.001,2,62,0)
   <xsl:when test="$PTSLABS"><xsl:value-of select="/REPORT/LABTESTS/@SORT"/></xsl:when>
"KRN",.84,7981012.001,2,63,0)
   <xsl:otherwise>NAME</xsl:otherwise>
"KRN",.84,7981012.001,2,64,0)
  </xsl:choose>
"KRN",.84,7981012.001,2,65,0)
 </xsl:variable>
"KRN",.84,7981012.001,2,66,0)
 <xsl:variable name="SORTORD">
"KRN",.84,7981012.001,2,67,0)
  <xsl:choose>
"KRN",.84,7981012.001,2,68,0)
   <xsl:when test="($PTSDRUGS and boolean(/REPORT/DRUGS/@SORTDESC)) or 
"KRN",.84,7981012.001,2,69,0)
    ($PTSLABS and boolean(/REPORT/LABTESTS/@SORTDESC))">descending</xsl:when>
"KRN",.84,7981012.001,2,70,0)
   <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981012.001,2,71,0)
  </xsl:choose>
"KRN",.84,7981012.001,2,72,0)
 </xsl:variable>
"KRN",.84,7981012.001,2,73,0)
 <xsl:for-each select="/REPORT//*[generate-id(.)=generate-id(key('patient-both',@ID))]">
"KRN",.84,7981012.001,2,74,0)
  <!--
"KRN",.84,7981012.001,2,75,0)
  <xsl:sort select="concat(*[name()=$SORT],' ')" order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,76,0)
  <xsl:sort select="NAME"/>
"KRN",.84,7981012.001,2,77,0)
  -->
"KRN",.84,7981012.001,2,78,0)
  <xsl:sort select="concat(*[name()=$SORT],'&#10;',NAME)" order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,79,0)
  <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981012.001,2,80,0)
  <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981012.001,2,81,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981012.001,2,82,0)
  <div>
"KRN",.84,7981012.001,2,83,0)
   <table style="width:100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981012.001,2,84,0)
    <thead>
"KRN",.84,7981012.001,2,85,0)
     <tr>
"KRN",.84,7981012.001,2,86,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,87,0)
       <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981012.001,2,88,0)
       <xsl:with-param name="title" select="'#'"/>
"KRN",.84,7981012.001,2,89,0)
       <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981012.001,2,90,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,91,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,92,0)
       <xsl:with-param name="sort" select="'DRUGS=NAME&amp;LABTESTS=NAME'"/>
"KRN",.84,7981012.001,2,93,0)
       <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981012.001,2,94,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,95,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,96,0)
       <xsl:with-param name="sort" select="'DRUGS=LAST4&amp;LABTESTS=LAST4'"/>
"KRN",.84,7981012.001,2,97,0)
       <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981012.001,2,98,0)
       <xsl:with-param name="width" select="'20%'"/>
"KRN",.84,7981012.001,2,99,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,100,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,101,0)
       <xsl:with-param name="sort" select="'DRUGS=DOD&amp;LABTESTS=DOD'"/>
"KRN",.84,7981012.001,2,102,0)
       <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981012.001,2,103,0)
       <xsl:with-param name="width" select="'20%'"/>
"KRN",.84,7981012.001,2,104,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,105,0)
     </tr>
"KRN",.84,7981012.001,2,106,0)
    </thead>
"KRN",.84,7981012.001,2,107,0)
    <tr>
"KRN",.84,7981012.001,2,108,0)
     <xsl:call-template name="BasicPatientData">
"KRN",.84,7981012.001,2,109,0)
      <xsl:with-param name="seqnum" select="1"/>
"KRN",.84,7981012.001,2,110,0)
     </xsl:call-template>
"KRN",.84,7981012.001,2,111,0)
    </tr>
"KRN",.84,7981012.001,2,112,0)
   </table>
"KRN",.84,7981012.001,2,113,0)
   <br/>
"KRN",.84,7981012.001,2,114,0)
   <table cellpadding="5" cellspacing="0" style="float:left;width:43%;">
"KRN",.84,7981012.001,2,115,0)
    <thead>
"KRN",.84,7981012.001,2,116,0)
     <tr>
"KRN",.84,7981012.001,2,117,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,118,0)
       <xsl:with-param name="colname" select="'RXNAME'"/>
"KRN",.84,7981012.001,2,119,0)
       <xsl:with-param name="sort" select="'DRUGS=RXNAME:ASC&amp;LABTESTS=LTNAME:ASC'"/>
"KRN",.84,7981012.001,2,120,0)
       <xsl:with-param name="title" select="'Medication Name'"/>
"KRN",.84,7981012.001,2,121,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,122,0)
     </tr>
"KRN",.84,7981012.001,2,123,0)
    </thead>
"KRN",.84,7981012.001,2,124,0)
    <xsl:call-template name="DataGridFooter">
"KRN",.84,7981012.001,2,125,0)
     <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981012.001,2,126,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,127,0)
    <tbody>
"KRN",.84,7981012.001,2,128,0)
     <xsl:for-each select="key('patient-drug',@ID)">
"KRN",.84,7981012.001,2,129,0)
      <xsl:sort select="RXNAME"/>
"KRN",.84,7981012.001,2,130,0)
      <tr><xsl:call-template name="DrugData"/></tr>
"KRN",.84,7981012.001,2,131,0)
     </xsl:for-each>
"KRN",.84,7981012.001,2,132,0)
    </tbody>
"KRN",.84,7981012.001,2,133,0)
   </table>
"KRN",.84,7981012.001,2,134,0)
   <table cellpadding="5" cellspacing="0" style="float:right;width:55%;">
"KRN",.84,7981012.001,2,135,0)
    <thead>
"KRN",.84,7981012.001,2,136,0)
     <tr>
"KRN",.84,7981012.001,2,137,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,138,0)
       <xsl:with-param name="sort" select="'LABTESTS=DATE:DESC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981012.001,2,139,0)
       <xsl:with-param name="title" select="'Date'"/>    
"KRN",.84,7981012.001,2,140,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981012.001,2,141,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,142,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,143,0)
       <xsl:with-param name="sort" select="'LABTESTS=LTNAME:ASC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981012.001,2,144,0)
       <xsl:with-param name="title" select="'Test Name'"/>    
"KRN",.84,7981012.001,2,145,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,146,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,147,0)
       <xsl:with-param name="sort" select="'LABTESTS=RESULT:ASC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981012.001,2,148,0)
       <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981012.001,2,149,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981012.001,2,150,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,151,0)
     </tr>
"KRN",.84,7981012.001,2,152,0)
    </thead>
"KRN",.84,7981012.001,2,153,0)
    <xsl:call-template name="DataGridFooter">
"KRN",.84,7981012.001,2,154,0)
     <xsl:with-param name="colspan" select="3"/>
"KRN",.84,7981012.001,2,155,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,156,0)
    <tbody>
"KRN",.84,7981012.001,2,157,0)
     <xsl:for-each select="key('patient-lt',@ID)">
"KRN",.84,7981012.001,2,158,0)
      <!--
"KRN",.84,7981012.001,2,159,0)
      <xsl:sort select="LTNAME"/>
"KRN",.84,7981012.001,2,160,0)
      <xsl:sort select="DATE" data-type="number"/>
"KRN",.84,7981012.001,2,161,0)
      -->
"KRN",.84,7981012.001,2,162,0)
      <xsl:sort select="concat(LTNAME,'&#10;',DATE)"/>
"KRN",.84,7981012.001,2,163,0)
      <tr>
"KRN",.84,7981012.001,2,164,0)
       <xsl:call-template name="BasicLRData">
"KRN",.84,7981012.001,2,165,0)
        <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981012.001,2,166,0)
       </xsl:call-template>
"KRN",.84,7981012.001,2,167,0)
      </tr>
"KRN",.84,7981012.001,2,168,0)
     </xsl:for-each>
"KRN",.84,7981012.001,2,169,0)
    </tbody>
"KRN",.84,7981012.001,2,170,0)
   </table>
"KRN",.84,7981012.001,2,171,0)
   <br clear="all"/><br/>
"KRN",.84,7981012.001,2,172,0)
  </div>
"KRN",.84,7981012.001,2,173,0)
 </xsl:for-each>
"KRN",.84,7981012.001,2,174,0)
</xsl:template>
"KRN",.84,7981012.001,2,175,0)
 
"KRN",.84,7981012.001,2,176,0)
<!--[ TABLES ]-->
"KRN",.84,7981012.001,2,177,0)
 
"KRN",.84,7981012.001,2,178,0)
<xsl:template match="REPORT/DRUGS">
"KRN",.84,7981012.001,2,179,0)
 <div style="page-break-before:always">
"KRN",.84,7981012.001,2,180,0)
  <h2>Medications</h2>
"KRN",.84,7981012.001,2,181,0)
  <xsl:choose>
"KRN",.84,7981012.001,2,182,0)
   <xsl:when test="$D1">
"KRN",.84,7981012.001,2,183,0)
    <xsl:variable name="SORT" select="/REPORT/DRUGS/@SORT"/>
"KRN",.84,7981012.001,2,184,0)
    <xsl:variable name="SORTORD">
"KRN",.84,7981012.001,2,185,0)
     <xsl:choose>
"KRN",.84,7981012.001,2,186,0)
      <xsl:when test="/REPORT/DRUGS/@SORTDESC">descending</xsl:when>
"KRN",.84,7981012.001,2,187,0)
      <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981012.001,2,188,0)
     </xsl:choose>
"KRN",.84,7981012.001,2,189,0)
    </xsl:variable>
"KRN",.84,7981012.001,2,190,0)
    <div>
"KRN",.84,7981012.001,2,191,0)
     <xsl:call-template name="MakeScrollable">
"KRN",.84,7981012.001,2,192,0)
      <xsl:with-param name="condition" select="DRUG[31]"/>
"KRN",.84,7981012.001,2,193,0)
     </xsl:call-template>
"KRN",.84,7981012.001,2,194,0)
     <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981012.001,2,195,0)
      <thead>
"KRN",.84,7981012.001,2,196,0)
       <tr>
"KRN",.84,7981012.001,2,197,0)
        <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981012.001,2,198,0)
         <xsl:with-param name="tblname" select="'DRUGS'"/>
"KRN",.84,7981012.001,2,199,0)
        </xsl:call-template>
"KRN",.84,7981012.001,2,200,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,201,0)
         <xsl:with-param name="colname" select="'RXNAME'"/>
"KRN",.84,7981012.001,2,202,0)
         <xsl:with-param name="sort" select="'DRUGS=RXNAME'"/>
"KRN",.84,7981012.001,2,203,0)
         <xsl:with-param name="title" select="'Medication Name'"/>
"KRN",.84,7981012.001,2,204,0)
        </xsl:call-template>
"KRN",.84,7981012.001,2,205,0)
       </tr>
"KRN",.84,7981012.001,2,206,0)
      </thead>
"KRN",.84,7981012.001,2,207,0)
      <xsl:call-template name="DataGridFooter">
"KRN",.84,7981012.001,2,208,0)
       <xsl:with-param name="colspan" select="5"/>
"KRN",.84,7981012.001,2,209,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,210,0)
      <tbody>
"KRN",.84,7981012.001,2,211,0)
       <xsl:choose>
"KRN",.84,7981012.001,2,212,0)
        <xsl:when test="$PTSDRUGS">
"KRN",.84,7981012.001,2,213,0)
         <xsl:for-each select="DRUG[generate-id(.)=generate-id(key('patient-drug',@ID))]">
"KRN",.84,7981012.001,2,214,0)
          <xsl:call-template name="PatientDrugData">
"KRN",.84,7981012.001,2,215,0)
           <xsl:with-param name="group" select="key('patient-drug',@ID)"/>
"KRN",.84,7981012.001,2,216,0)
          </xsl:call-template>
"KRN",.84,7981012.001,2,217,0)
         </xsl:for-each>
"KRN",.84,7981012.001,2,218,0)
        </xsl:when>
"KRN",.84,7981012.001,2,219,0)
        <xsl:otherwise> 
"KRN",.84,7981012.001,2,220,0)
         <xsl:for-each select="DRUG">
"KRN",.84,7981012.001,2,221,0)
          <!--
"KRN",.84,7981012.001,2,222,0)
          <xsl:sort select="concat(*[name()=$SORT],' ')" order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,223,0)
          <xsl:sort select="NAME"/>
"KRN",.84,7981012.001,2,224,0)
          -->
"KRN",.84,7981012.001,2,225,0)
          <xsl:sort select="concat(*[name()=$SORT],'&#10;',NAME)" order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,226,0)
          <tr>
"KRN",.84,7981012.001,2,227,0)
           <xsl:call-template name="BasicPatientData"/>
"KRN",.84,7981012.001,2,228,0)
           <xsl:call-template name="DrugData"/>
"KRN",.84,7981012.001,2,229,0)
          </tr>
"KRN",.84,7981012.001,2,230,0)
         </xsl:for-each>
"KRN",.84,7981012.001,2,231,0)
        </xsl:otherwise>
"KRN",.84,7981012.001,2,232,0)
       </xsl:choose>
"KRN",.84,7981012.001,2,233,0)
      </tbody>
"KRN",.84,7981012.001,2,234,0)
     </table>
"KRN",.84,7981012.001,2,235,0)
    </div>
"KRN",.84,7981012.001,2,236,0)
   </xsl:when>
"KRN",.84,7981012.001,2,237,0)
   <xsl:otherwise>
"KRN",.84,7981012.001,2,238,0)
    <xsl:call-template name="TableNoData"/>
"KRN",.84,7981012.001,2,239,0)
   </xsl:otherwise>
"KRN",.84,7981012.001,2,240,0)
  </xsl:choose>
"KRN",.84,7981012.001,2,241,0)
 </div>
"KRN",.84,7981012.001,2,242,0)
</xsl:template>
"KRN",.84,7981012.001,2,243,0)
 
"KRN",.84,7981012.001,2,244,0)
<xsl:template match="REPORT/LABTESTS">
"KRN",.84,7981012.001,2,245,0)
 <div style="page-break-before:always">
"KRN",.84,7981012.001,2,246,0)
  <h2>Lab Results</h2>
"KRN",.84,7981012.001,2,247,0)
  <xsl:choose>
"KRN",.84,7981012.001,2,248,0)
   <xsl:when test="$L1">
"KRN",.84,7981012.001,2,249,0)
    <xsl:variable name="SORT" select="/REPORT/LABTESTS/@SORT"/>
"KRN",.84,7981012.001,2,250,0)
    <xsl:variable name="SORTORD">
"KRN",.84,7981012.001,2,251,0)
     <xsl:choose>
"KRN",.84,7981012.001,2,252,0)
      <xsl:when test="/REPORT/LABTESTS/@SORTDESC">descending</xsl:when>
"KRN",.84,7981012.001,2,253,0)
      <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981012.001,2,254,0)
     </xsl:choose>
"KRN",.84,7981012.001,2,255,0)
    </xsl:variable>
"KRN",.84,7981012.001,2,256,0)
    <div>
"KRN",.84,7981012.001,2,257,0)
    <xsl:call-template name="MakeScrollable">
"KRN",.84,7981012.001,2,258,0)
     <xsl:with-param name="condition" select="LT[31]"/>
"KRN",.84,7981012.001,2,259,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,260,0)
     <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981012.001,2,261,0)
      <thead>
"KRN",.84,7981012.001,2,262,0)
       <tr>
"KRN",.84,7981012.001,2,263,0)
        <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981012.001,2,264,0)
         <xsl:with-param name="tblname" select="'LABTESTS'"/>
"KRN",.84,7981012.001,2,265,0)
        </xsl:call-template>
"KRN",.84,7981012.001,2,266,0)
        <xsl:call-template name="BasicLRHeader">
"KRN",.84,7981012.001,2,267,0)
         <xsl:with-param name="colname" select="'LTNAME'"/>
"KRN",.84,7981012.001,2,268,0)
         <xsl:with-param name="tblname" select="'LABTESTS'"/>
"KRN",.84,7981012.001,2,269,0)
        </xsl:call-template>
"KRN",.84,7981012.001,2,270,0)
       </tr>
"KRN",.84,7981012.001,2,271,0)
      </thead>
"KRN",.84,7981012.001,2,272,0)
      <xsl:call-template name="DataGridFooter">
"KRN",.84,7981012.001,2,273,0)
       <xsl:with-param name="colspan" select="7"/>
"KRN",.84,7981012.001,2,274,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,275,0)
      <tbody>
"KRN",.84,7981012.001,2,276,0)
       <xsl:choose>
"KRN",.84,7981012.001,2,277,0)
        <xsl:when test="$PTSLABS">
"KRN",.84,7981012.001,2,278,0)
         <xsl:for-each select="LT[generate-id(.)=generate-id(key('patient-lt',@ID))]">
"KRN",.84,7981012.001,2,279,0)
          <xsl:call-template name="PatientLabData">
"KRN",.84,7981012.001,2,280,0)
           <xsl:with-param name="group" select="key('patient-lt',@ID)"/>
"KRN",.84,7981012.001,2,281,0)
          </xsl:call-template>
"KRN",.84,7981012.001,2,282,0)
         </xsl:for-each>
"KRN",.84,7981012.001,2,283,0)
        </xsl:when>
"KRN",.84,7981012.001,2,284,0)
        <xsl:otherwise>
"KRN",.84,7981012.001,2,285,0)
         <xsl:for-each select="LT">
"KRN",.84,7981012.001,2,286,0)
          <!--
"KRN",.84,7981012.001,2,287,0)
          <xsl:sort select="concat(*[name()=$SORT],' ')" order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,288,0)
          <xsl:sort select="NAME"/>
"KRN",.84,7981012.001,2,289,0)
          -->
"KRN",.84,7981012.001,2,290,0)
          <xsl:sort select="concat(./*[name()=$SORT],'&#10;',NAME)" order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,291,0)
          <tr>
"KRN",.84,7981012.001,2,292,0)
           <xsl:call-template name="BasicPatientData"/>
"KRN",.84,7981012.001,2,293,0)
           <xsl:call-template name="BasicLRData">
"KRN",.84,7981012.001,2,294,0)
            <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981012.001,2,295,0)
           </xsl:call-template>
"KRN",.84,7981012.001,2,296,0)
          </tr>
"KRN",.84,7981012.001,2,297,0)
         </xsl:for-each>
"KRN",.84,7981012.001,2,298,0)
        </xsl:otherwise>
"KRN",.84,7981012.001,2,299,0)
       </xsl:choose>
"KRN",.84,7981012.001,2,300,0)
      </tbody>
"KRN",.84,7981012.001,2,301,0)
     </table>
"KRN",.84,7981012.001,2,302,0)
    </div>
"KRN",.84,7981012.001,2,303,0)
   </xsl:when>
"KRN",.84,7981012.001,2,304,0)
   <xsl:otherwise>
"KRN",.84,7981012.001,2,305,0)
    <xsl:call-template name="TableNoData"/>
"KRN",.84,7981012.001,2,306,0)
   </xsl:otherwise>
"KRN",.84,7981012.001,2,307,0)
  </xsl:choose>
"KRN",.84,7981012.001,2,308,0)
 </div>
"KRN",.84,7981012.001,2,309,0)
</xsl:template>
"KRN",.84,7981012.001,2,310,0)
 
"KRN",.84,7981012.001,2,311,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981012.001,2,312,0)
 <div style="page-break-before:always">
"KRN",.84,7981012.001,2,313,0)
  <h2>Patients</h2>
"KRN",.84,7981012.001,2,314,0)
  <xsl:call-template name="DataGrid"/>
"KRN",.84,7981012.001,2,315,0)
 </div>
"KRN",.84,7981012.001,2,316,0)
</xsl:template>
"KRN",.84,7981012.001,2,317,0)
 
"KRN",.84,7981012.001,2,318,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981012.001,2,319,0)
 
"KRN",.84,7981012.001,2,320,0)
<xsl:template name="DrugData">
"KRN",.84,7981012.001,2,321,0)
 <xsl:param name="rowspan" select="'1'"/>
"KRN",.84,7981012.001,2,322,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981012.001,2,323,0)
  <xsl:with-param name="value" select="RXNAME"/>
"KRN",.84,7981012.001,2,324,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981012.001,2,325,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981012.001,2,326,0)
 </xsl:call-template>
"KRN",.84,7981012.001,2,327,0)
</xsl:template>
"KRN",.84,7981012.001,2,328,0)
 
"KRN",.84,7981012.001,2,329,0)
<xsl:template name="PatientDrugData">
"KRN",.84,7981012.001,2,330,0)
 <xsl:param name="group"/>
"KRN",.84,7981012.001,2,331,0)
 <xsl:param name="number" select="position()"/>
"KRN",.84,7981012.001,2,332,0)
 <xsl:variable name="rowspan" select="count($group)"/>
"KRN",.84,7981012.001,2,333,0)
 <xsl:for-each select="$group">
"KRN",.84,7981012.001,2,334,0)
  <tr>
"KRN",.84,7981012.001,2,335,0)
   <xsl:if test="position()=1">
"KRN",.84,7981012.001,2,336,0)
    <xsl:call-template name="BasicPatientData">
"KRN",.84,7981012.001,2,337,0)
     <xsl:with-param name="number" select="$number"/>
"KRN",.84,7981012.001,2,338,0)
     <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981012.001,2,339,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,340,0)
   </xsl:if>
"KRN",.84,7981012.001,2,341,0)
   <xsl:call-template name="DrugData"/>
"KRN",.84,7981012.001,2,342,0)
  </tr>
"KRN",.84,7981012.001,2,343,0)
 </xsl:for-each>
"KRN",.84,7981012.001,2,344,0)
</xsl:template>
"KRN",.84,7981012.001,2,345,0)
 
"KRN",.84,7981012.001,2,346,0)
<xsl:template name="PatientLabData">
"KRN",.84,7981012.001,2,347,0)
 <xsl:param name="group"/>
"KRN",.84,7981012.001,2,348,0)
 <xsl:param name="number" select="position()"/>
"KRN",.84,7981012.001,2,349,0)
 <xsl:variable name="rowspan" select="count($group)"/>
"KRN",.84,7981012.001,2,350,0)
 <xsl:for-each select="$group">
"KRN",.84,7981012.001,2,351,0)
  <tr>
"KRN",.84,7981012.001,2,352,0)
   <xsl:if test="position()=1">
"KRN",.84,7981012.001,2,353,0)
    <xsl:call-template name="BasicPatientData">
"KRN",.84,7981012.001,2,354,0)
     <xsl:with-param name="number" select="$number"/>
"KRN",.84,7981012.001,2,355,0)
     <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981012.001,2,356,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,357,0)
   </xsl:if>
"KRN",.84,7981012.001,2,358,0)
   <xsl:call-template name="BasicLRData">
"KRN",.84,7981012.001,2,359,0)
    <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981012.001,2,360,0)
   </xsl:call-template>
"KRN",.84,7981012.001,2,361,0)
  </tr>
"KRN",.84,7981012.001,2,362,0)
 </xsl:for-each>
"KRN",.84,7981012.001,2,363,0)
</xsl:template>
"KRN",.84,7981012.001,2,364,0)
 
"KRN",.84,7981012.001,2,365,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981012.001,2,366,0)
 
"KRN",.84,7981012.001,2,367,0)
<xsl:template match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981012.001,2,368,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981012.001,2,369,0)
  <xsl:with-param name="title" select="'Meds'"/>
"KRN",.84,7981012.001,2,370,0)
 </xsl:call-template>
"KRN",.84,7981012.001,2,371,0)
</xsl:template>
"KRN",.84,7981012.001,2,372,0)
 
"KRN",.84,7981012.001,2,373,0)
<xsl:template match="PARAMETERS/DATE_RANGE_2">
"KRN",.84,7981012.001,2,374,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981012.001,2,375,0)
  <xsl:with-param name="title" select="'Labs'"/>
"KRN",.84,7981012.001,2,376,0)
 </xsl:call-template>
"KRN",.84,7981012.001,2,377,0)
</xsl:template>
"KRN",.84,7981012.001,2,378,0)
 
"KRN",.84,7981012.001,2,379,0)
<xsl:template match="PARAMETERS/DATE_RANGE_3">
"KRN",.84,7981012.001,2,380,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981012.001,2,381,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981012.001,2,382,0)
 </xsl:call-template>
"KRN",.84,7981012.001,2,383,0)
</xsl:template>
"KRN",.84,7981012.001,2,384,0)
 
"KRN",.84,7981012.001,2,385,0)
</xsl:stylesheet>
"KRN",.84,7981013.001,-1)
0^25
"KRN",.84,7981013.001,0)
7981013.001^2^^CLINICAL CASE REGISTRIES^Diagnoses (HTML)
"KRN",.84,7981013.001,2,0)
^^202^202^3100218^
"KRN",.84,7981013.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981013.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981013.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981013.001,2,4,0)
>
"KRN",.84,7981013.001,2,5,0)
 
"KRN",.84,7981013.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981013.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981013.001,2,8,0)
 
"KRN",.84,7981013.001,2,9,0)
<xsl:template match="/">
"KRN",.84,7981013.001,2,10,0)
 <html>
"KRN",.84,7981013.001,2,11,0)
  <head>
"KRN",.84,7981013.001,2,12,0)
   <title>Diagnoses</title>
"KRN",.84,7981013.001,2,13,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981013.001,2,14,0)
  </head>
"KRN",.84,7981013.001,2,15,0)
  <body>
"KRN",.84,7981013.001,2,16,0)
   <h1>Diagnoses</h1>
"KRN",.84,7981013.001,2,17,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981013.001,2,18,0)
   <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981013.001,2,19,0)
   <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981013.001,2,20,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981013.001,2,21,0)
   <div>
"KRN",.84,7981013.001,2,22,0)
    <xsl:call-template name="ReportSummary"/>
"KRN",.84,7981013.001,2,23,0)
    <xsl:apply-templates select="/REPORT/ICD9LST"/>
"KRN",.84,7981013.001,2,24,0)
   </div>
"KRN",.84,7981013.001,2,25,0)
   <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981013.001,2,26,0)
  </body>
"KRN",.84,7981013.001,2,27,0)
 </html>
"KRN",.84,7981013.001,2,28,0)
</xsl:template>
"KRN",.84,7981013.001,2,29,0)
 
"KRN",.84,7981013.001,2,30,0)
<xsl:template match="REPORT/ICD9LST">
"KRN",.84,7981013.001,2,31,0)
 <h2>ICD-9 Codes</h2>
"KRN",.84,7981013.001,2,32,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981013.001,2,33,0)
</xsl:template>
"KRN",.84,7981013.001,2,34,0)
 
"KRN",.84,7981013.001,2,35,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981013.001,2,36,0)
 <div style="page-break-before:always">
"KRN",.84,7981013.001,2,37,0)
  <h2>Patients</h2>
"KRN",.84,7981013.001,2,38,0)
  <xsl:call-template name="DataGrid">
"KRN",.84,7981013.001,2,39,0)
   <xsl:with-param name="scroll" select="descendant::ICD9[31]"/>
"KRN",.84,7981013.001,2,40,0)
  </xsl:call-template>
"KRN",.84,7981013.001,2,41,0)
 </div>
"KRN",.84,7981013.001,2,42,0)
 <div class="reportSummary">
"KRN",.84,7981013.001,2,43,0)
  <div style="float:left; width:30%">
"KRN",.84,7981013.001,2,44,0)
   <table cellpadding="3" cellspacing="0">
"KRN",.84,7981013.001,2,45,0)
    <caption>Source</caption>
"KRN",.84,7981013.001,2,46,0)
    <thead>
"KRN",.84,7981013.001,2,47,0)
     <tr>
"KRN",.84,7981013.001,2,48,0)
      <th width="30">Code</th>
"KRN",.84,7981013.001,2,49,0)
      <th>Description</th>
"KRN",.84,7981013.001,2,50,0)
     </tr>
"KRN",.84,7981013.001,2,51,0)
    </thead>
"KRN",.84,7981013.001,2,52,0)
    <tbody>
"KRN",.84,7981013.001,2,53,0)
     <tr>
"KRN",.84,7981013.001,2,54,0)
      <td align="center">I</td>
"KRN",.84,7981013.001,2,55,0)
      <td class="aLeft">Inpatient file</td>
"KRN",.84,7981013.001,2,56,0)
     </tr>
"KRN",.84,7981013.001,2,57,0)
     <tr>
"KRN",.84,7981013.001,2,58,0)
      <td align="center">O</td>
"KRN",.84,7981013.001,2,59,0)
      <td class="aLeft">Outpatient file</td>
"KRN",.84,7981013.001,2,60,0)
     </tr>
"KRN",.84,7981013.001,2,61,0)
     <tr>
"KRN",.84,7981013.001,2,62,0)
      <td align="center">PB</td>
"KRN",.84,7981013.001,2,63,0)
      <td class="aLeft">Problem list</td>
"KRN",.84,7981013.001,2,64,0)
     </tr>
"KRN",.84,7981013.001,2,65,0)
    </tbody>
"KRN",.84,7981013.001,2,66,0)
   </table>
"KRN",.84,7981013.001,2,67,0)
  </div>
"KRN",.84,7981013.001,2,68,0)
 </div>
"KRN",.84,7981013.001,2,69,0)
</xsl:template>
"KRN",.84,7981013.001,2,70,0)
 
"KRN",.84,7981013.001,2,71,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981013.001,2,72,0)
 
"KRN",.84,7981013.001,2,73,0)
<xsl:template match="HEADER/TBLDEF[@NAME='PATIENTS']/@HEADER">
"KRN",.84,7981013.001,2,74,0)
 <xsl:variable name="PTICDL" select="../COLUMN[@NAME='PTICDL']"/>
"KRN",.84,7981013.001,2,75,0)
 <thead>
"KRN",.84,7981013.001,2,76,0)
  <tr>
"KRN",.84,7981013.001,2,77,0)
   <xsl:apply-templates select="../COLUMN[@NAME!='PTICDL']">
"KRN",.84,7981013.001,2,78,0)
    <xsl:with-param name="rowspan" select="2"/>
"KRN",.84,7981013.001,2,79,0)
   </xsl:apply-templates>
"KRN",.84,7981013.001,2,80,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,81,0)
    <xsl:with-param name="column" select="$PTICDL"/>
"KRN",.84,7981013.001,2,82,0)
    <xsl:with-param name="title" select="'ICD-9'"/>                 
"KRN",.84,7981013.001,2,83,0)
    <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981013.001,2,84,0)
    <xsl:with-param name="width" select="'52%'"/>
"KRN",.84,7981013.001,2,85,0)
    <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981013.001,2,86,0)
   </xsl:call-template>
"KRN",.84,7981013.001,2,87,0)
  </tr>
"KRN",.84,7981013.001,2,88,0)
  <tr>
"KRN",.84,7981013.001,2,89,0)
   <xsl:apply-templates select="$PTICDL/*"/>
"KRN",.84,7981013.001,2,90,0)
  </tr>
"KRN",.84,7981013.001,2,91,0)
 </thead>
"KRN",.84,7981013.001,2,92,0)
</xsl:template>
"KRN",.84,7981013.001,2,93,0)
 
"KRN",.84,7981013.001,2,94,0)
<xsl:template match="COLUMN[@NAME='CODE']">
"KRN",.84,7981013.001,2,95,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,96,0)
  <xsl:with-param name="title" select="'Code'"/>
"KRN",.84,7981013.001,2,97,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981013.001,2,98,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,99,0)
</xsl:template>
"KRN",.84,7981013.001,2,100,0)
 
"KRN",.84,7981013.001,2,101,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981013.001,2,102,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,103,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981013.001,2,104,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981013.001,2,105,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,106,0)
</xsl:template>
"KRN",.84,7981013.001,2,107,0)
 
"KRN",.84,7981013.001,2,108,0)
<xsl:template match="COLUMN[@NAME='DIAG']">
"KRN",.84,7981013.001,2,109,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,110,0)
  <xsl:with-param name="title" select="'Diagnosis'"/>
"KRN",.84,7981013.001,2,111,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,112,0)
</xsl:template>
"KRN",.84,7981013.001,2,113,0)
 
"KRN",.84,7981013.001,2,114,0)
<xsl:template match="COLUMN[@NAME='NC']">
"KRN",.84,7981013.001,2,115,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,116,0)
  <xsl:with-param name="title" select="'Number of Codes'"/>
"KRN",.84,7981013.001,2,117,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981013.001,2,118,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,119,0)
</xsl:template>
"KRN",.84,7981013.001,2,120,0)
 
"KRN",.84,7981013.001,2,121,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981013.001,2,122,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,123,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981013.001,2,124,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981013.001,2,125,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,126,0)
</xsl:template>
"KRN",.84,7981013.001,2,127,0)
 
"KRN",.84,7981013.001,2,128,0)
<xsl:template match="COLUMN[@NAME='SOURCE']">
"KRN",.84,7981013.001,2,129,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,130,0)
  <xsl:with-param name="title" select="'Source'"/>
"KRN",.84,7981013.001,2,131,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,132,0)
</xsl:template>
"KRN",.84,7981013.001,2,133,0)
 
"KRN",.84,7981013.001,2,134,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981013.001,2,135,0)
 
"KRN",.84,7981013.001,2,136,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981013.001,2,137,0)
 <xsl:variable name="rowspan" select="count(PTICDL/ICD9)"/>
"KRN",.84,7981013.001,2,138,0)
 <tr>
"KRN",.84,7981013.001,2,139,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.001,2,140,0)
   <xsl:with-param name="value" select="position()"/>
"KRN",.84,7981013.001,2,141,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981013.001,2,142,0)
  </xsl:call-template>
"KRN",.84,7981013.001,2,143,0)
  <xsl:apply-templates select="*[name(.)!='PTICDL']">
"KRN",.84,7981013.001,2,144,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981013.001,2,145,0)
  </xsl:apply-templates>
"KRN",.84,7981013.001,2,146,0)
  <xsl:for-each select="PTICDL/ICD9[1]">
"KRN",.84,7981013.001,2,147,0)
   <xsl:call-template name="ICD9Data"/>
"KRN",.84,7981013.001,2,148,0)
  </xsl:for-each>
"KRN",.84,7981013.001,2,149,0)
 </tr>
"KRN",.84,7981013.001,2,150,0)
 <xsl:for-each select="PTICDL/ICD9[position()>1]">
"KRN",.84,7981013.001,2,151,0)
  <tr>
"KRN",.84,7981013.001,2,152,0)
   <xsl:call-template name="ICD9Data"/>
"KRN",.84,7981013.001,2,153,0)
  </tr>
"KRN",.84,7981013.001,2,154,0)
 </xsl:for-each>
"KRN",.84,7981013.001,2,155,0)
</xsl:template>
"KRN",.84,7981013.001,2,156,0)
 
"KRN",.84,7981013.001,2,157,0)
<xsl:template match="DIAG">
"KRN",.84,7981013.001,2,158,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981013.001,2,159,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981013.001,2,160,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,161,0)
</xsl:template>
"KRN",.84,7981013.001,2,162,0)
 
"KRN",.84,7981013.001,2,163,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981013.001,2,164,0)
 
"KRN",.84,7981013.001,2,165,0)
<xsl:template name="ICD9Data">
"KRN",.84,7981013.001,2,166,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981013.001,2,167,0)
  <xsl:with-param name="value" select="CODE"/>
"KRN",.84,7981013.001,2,168,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,169,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981013.001,2,170,0)
  <xsl:with-param name="value" select="DIAG"/>
"KRN",.84,7981013.001,2,171,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981013.001,2,172,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,173,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981013.001,2,174,0)
  <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981013.001,2,175,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981013.001,2,176,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,177,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981013.001,2,178,0)
  <xsl:with-param name="value" select="SOURCE"/>
"KRN",.84,7981013.001,2,179,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,180,0)
</xsl:template>
"KRN",.84,7981013.001,2,181,0)
 
"KRN",.84,7981013.001,2,182,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981013.001,2,183,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981013.001,2,184,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981013.001,2,185,0)
  <thead>
"KRN",.84,7981013.001,2,186,0)
   <tr>
"KRN",.84,7981013.001,2,187,0)
    <th width="33%">Number of Patients</th>
"KRN",.84,7981013.001,2,188,0)
    <th width="33%">Number of Codes</th>
"KRN",.84,7981013.001,2,189,0)
    <th width="33%">Number of Different Codes </th>
"KRN",.84,7981013.001,2,190,0)
   </tr>
"KRN",.84,7981013.001,2,191,0)
  </thead>
"KRN",.84,7981013.001,2,192,0)
  <tbody>
"KRN",.84,7981013.001,2,193,0)
   <tr>
"KRN",.84,7981013.001,2,194,0)
    <td><xsl:value-of select="$summary/NP"/></td>
"KRN",.84,7981013.001,2,195,0)
    <td><xsl:value-of select="$summary/NC"/></td>
"KRN",.84,7981013.001,2,196,0)
    <td><xsl:value-of select="$summary/NDC"/></td>
"KRN",.84,7981013.001,2,197,0)
   </tr>
"KRN",.84,7981013.001,2,198,0)
  </tbody>
"KRN",.84,7981013.001,2,199,0)
 </table>
"KRN",.84,7981013.001,2,200,0)
</xsl:template>
"KRN",.84,7981013.001,2,201,0)
 
"KRN",.84,7981013.001,2,202,0)
</xsl:stylesheet>
"KRN",.84,7981014.001,-1)
0^26
"KRN",.84,7981014.001,0)
7981014.001^2^^CLINICAL CASE REGISTRIES^Registry Medications Report (HTML)
"KRN",.84,7981014.001,2,0)
^^125^125^3100218^
"KRN",.84,7981014.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981014.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981014.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981014.001,2,4,0)
>
"KRN",.84,7981014.001,2,5,0)
 
"KRN",.84,7981014.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981014.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981014.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->            
"KRN",.84,7981014.001,2,9,0)
<xsl:include href="template://report/996/1"/>  <!-- Pharmacy -->
"KRN",.84,7981014.001,2,10,0)
 
"KRN",.84,7981014.001,2,11,0)
<xsl:variable name="complete" select="/REPORT/PARAMETERS/OPTIONS/@COMPLETE"/>
"KRN",.84,7981014.001,2,12,0)
 
"KRN",.84,7981014.001,2,13,0)
<xsl:template match="/">
"KRN",.84,7981014.001,2,14,0)
 <html>
"KRN",.84,7981014.001,2,15,0)
  <head>
"KRN",.84,7981014.001,2,16,0)
   <title>Registry Medications Report</title>
"KRN",.84,7981014.001,2,17,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981014.001,2,18,0)
   <style type="text/css">
"KRN",.84,7981014.001,2,19,0)
    td.DrugComb {
"KRN",.84,7981014.001,2,20,0)
     font-weight: bold;
"KRN",.84,7981014.001,2,21,0)
     text-align: left;
"KRN",.84,7981014.001,2,22,0)
     background-color: #EEEEEE;
"KRN",.84,7981014.001,2,23,0)
    }
"KRN",.84,7981014.001,2,24,0)
   </style>
"KRN",.84,7981014.001,2,25,0)
  </head>
"KRN",.84,7981014.001,2,26,0)
  <body>
"KRN",.84,7981014.001,2,27,0)
   <h1>Registry Medications Report</h1>
"KRN",.84,7981014.001,2,28,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981014.001,2,29,0)
   <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981014.001,2,30,0)
   <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981014.001,2,31,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981014.001,2,32,0)
   <div>
"KRN",.84,7981014.001,2,33,0)
    <xsl:apply-templates select="/REPORT/RXCOMBLST"/>
"KRN",.84,7981014.001,2,34,0)
   </div>
"KRN",.84,7981014.001,2,35,0)
  </body>
"KRN",.84,7981014.001,2,36,0)
 </html>
"KRN",.84,7981014.001,2,37,0)
</xsl:template>
"KRN",.84,7981014.001,2,38,0)
 
"KRN",.84,7981014.001,2,39,0)
<xsl:template match="RXCOMBLST">
"KRN",.84,7981014.001,2,40,0)
 <xsl:call-template name="DataGrid">
"KRN",.84,7981014.001,2,41,0)
  <xsl:with-param name="scroll" select="*[31] or descendant::PATIENT[31]"/>
"KRN",.84,7981014.001,2,42,0)
 </xsl:call-template>
"KRN",.84,7981014.001,2,43,0)
</xsl:template>
"KRN",.84,7981014.001,2,44,0)
 
"KRN",.84,7981014.001,2,45,0)
<xsl:template match="HEADER/TBLDEF[@NAME='RXCOMBLST']/@HEADER">
"KRN",.84,7981014.001,2,46,0)
 <thead>
"KRN",.84,7981014.001,2,47,0)
  <xsl:choose>
"KRN",.84,7981014.001,2,48,0)
   <xsl:when test="$complete">
"KRN",.84,7981014.001,2,49,0)
    <tr>
"KRN",.84,7981014.001,2,50,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981014.001,2,51,0)
      <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981014.001,2,52,0)
      <xsl:with-param name="rowspan" select="2"/>
"KRN",.84,7981014.001,2,53,0)
      <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981014.001,2,54,0)
     </xsl:call-template>
"KRN",.84,7981014.001,2,55,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981014.001,2,56,0)
      <xsl:with-param name="title" select="'Combination of Drugs'"/>
"KRN",.84,7981014.001,2,57,0)
      <xsl:with-param name="colspan" select="3"/>
"KRN",.84,7981014.001,2,58,0)
      <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981014.001,2,59,0)
     </xsl:call-template>
"KRN",.84,7981014.001,2,60,0)
    </tr>
"KRN",.84,7981014.001,2,61,0)
    <tr>
"KRN",.84,7981014.001,2,62,0)
     <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981014.001,2,63,0)
      <xsl:with-param name="seqnum" select="0"/>
"KRN",.84,7981014.001,2,64,0)
     </xsl:call-template>
"KRN",.84,7981014.001,2,65,0)
    </tr>
"KRN",.84,7981014.001,2,66,0)
   </xsl:when>
"KRN",.84,7981014.001,2,67,0)
   <xsl:otherwise>
"KRN",.84,7981014.001,2,68,0)
    <tr>
"KRN",.84,7981014.001,2,69,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981014.001,2,70,0)
      <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981014.001,2,71,0)
      <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981014.001,2,72,0)
     </xsl:call-template>
"KRN",.84,7981014.001,2,73,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981014.001,2,74,0)
      <xsl:with-param name="title" select="'Combination of Drugs'"/>
"KRN",.84,7981014.001,2,75,0)
      <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981014.001,2,76,0)
     </xsl:call-template>
"KRN",.84,7981014.001,2,77,0)
    </tr>
"KRN",.84,7981014.001,2,78,0)
   </xsl:otherwise>
"KRN",.84,7981014.001,2,79,0)
  </xsl:choose>
"KRN",.84,7981014.001,2,80,0)
 </thead>
"KRN",.84,7981014.001,2,81,0)
</xsl:template>
"KRN",.84,7981014.001,2,82,0)
 
"KRN",.84,7981014.001,2,83,0)
<xsl:template match="RXCOMBLST/RXCOMB">
"KRN",.84,7981014.001,2,84,0)
 <xsl:choose>
"KRN",.84,7981014.001,2,85,0)
  <xsl:when test="$complete">
"KRN",.84,7981014.001,2,86,0)
   <xsl:variable name="rowspan" select="count(PATIENTS/PATIENT)+1"/>
"KRN",.84,7981014.001,2,87,0)
   <tr>
"KRN",.84,7981014.001,2,88,0)
    <xsl:call-template name="TableCell">
"KRN",.84,7981014.001,2,89,0)
     <xsl:with-param name="value" select="NP"/>
"KRN",.84,7981014.001,2,90,0)
     <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981014.001,2,91,0)
     <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981014.001,2,92,0)
    </xsl:call-template>
"KRN",.84,7981014.001,2,93,0)
    <td class="DrugComb" colspan="3">
"KRN",.84,7981014.001,2,94,0)
     <xsl:call-template name="DrugCombination"/>
"KRN",.84,7981014.001,2,95,0)
    </td>
"KRN",.84,7981014.001,2,96,0)
   </tr>
"KRN",.84,7981014.001,2,97,0)
   <xsl:for-each select="PATIENTS/PATIENT">
"KRN",.84,7981014.001,2,98,0)
    <tr>
"KRN",.84,7981014.001,2,99,0)
     <xsl:call-template name="BasicPatientData">
"KRN",.84,7981014.001,2,100,0)
      <xsl:with-param name="seqnum" select="0"/>
"KRN",.84,7981014.001,2,101,0)
     </xsl:call-template>
"KRN",.84,7981014.001,2,102,0)
    </tr>
"KRN",.84,7981014.001,2,103,0)
   </xsl:for-each>
"KRN",.84,7981014.001,2,104,0)
  </xsl:when>
"KRN",.84,7981014.001,2,105,0)
  <xsl:otherwise>
"KRN",.84,7981014.001,2,106,0)
   <tr>
"KRN",.84,7981014.001,2,107,0)
    <xsl:call-template name="TableCell">
"KRN",.84,7981014.001,2,108,0)
     <xsl:with-param name="value" select="NP"/>
"KRN",.84,7981014.001,2,109,0)
     <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981014.001,2,110,0)
    </xsl:call-template>
"KRN",.84,7981014.001,2,111,0)
    <td class="aLeft">
"KRN",.84,7981014.001,2,112,0)
     <xsl:call-template name="DrugCombination"/>
"KRN",.84,7981014.001,2,113,0)
    </td>
"KRN",.84,7981014.001,2,114,0)
   </tr>
"KRN",.84,7981014.001,2,115,0)
  </xsl:otherwise>
"KRN",.84,7981014.001,2,116,0)
 </xsl:choose>
"KRN",.84,7981014.001,2,117,0)
</xsl:template>
"KRN",.84,7981014.001,2,118,0)
 
"KRN",.84,7981014.001,2,119,0)
<xsl:template name="DrugCombination">
"KRN",.84,7981014.001,2,120,0)
 <xsl:for-each select="DRUGS/NAME">
"KRN",.84,7981014.001,2,121,0)
  <xsl:if test="position()>1">; </xsl:if><xsl:value-of select="."/>
"KRN",.84,7981014.001,2,122,0)
 </xsl:for-each>
"KRN",.84,7981014.001,2,123,0)
</xsl:template>
"KRN",.84,7981014.001,2,124,0)
 
"KRN",.84,7981014.001,2,125,0)
</xsl:stylesheet>
"KRN",.84,7981015.001,-1)
0^27
"KRN",.84,7981015.001,0)
7981015.001^2^^CLINICAL CASE REGISTRIES^Procedures (HTML)
"KRN",.84,7981015.001,2,0)
^^300^300^3100218^
"KRN",.84,7981015.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981015.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981015.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981015.001,2,4,0)
>
"KRN",.84,7981015.001,2,5,0)
 
"KRN",.84,7981015.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981015.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981015.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981015.001,2,9,0)
 
"KRN",.84,7981015.001,2,10,0)
<xsl:key name="patient-cpt" match="/REPORT/PROCEDURES/PROCEDURE" use="@ID"/>
"KRN",.84,7981015.001,2,11,0)
 
"KRN",.84,7981015.001,2,12,0)
<xsl:template match="/">
"KRN",.84,7981015.001,2,13,0)
 <html>
"KRN",.84,7981015.001,2,14,0)
  <head>
"KRN",.84,7981015.001,2,15,0)
   <title>Procedures</title>
"KRN",.84,7981015.001,2,16,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981015.001,2,17,0)
  </head>
"KRN",.84,7981015.001,2,18,0)
  <body>
"KRN",.84,7981015.001,2,19,0)
   <h1>Procedures</h1>
"KRN",.84,7981015.001,2,20,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981015.001,2,21,0)
   <xsl:choose>
"KRN",.84,7981015.001,2,22,0)
    <xsl:when test="/REPORT/SUMMARY/NP > 0">
"KRN",.84,7981015.001,2,23,0)
     <xsl:call-template name="ReportSummary"/>
"KRN",.84,7981015.001,2,24,0)
     <xsl:apply-templates select="/REPORT/PROCLST"/>
"KRN",.84,7981015.001,2,25,0)
     <xsl:apply-templates select="/REPORT/PROCEDURES"/>
"KRN",.84,7981015.001,2,26,0)
     <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981015.001,2,27,0)
    </xsl:when>
"KRN",.84,7981015.001,2,28,0)
    <xsl:otherwise>
"KRN",.84,7981015.001,2,29,0)
     <xsl:call-template name="TableNoData"/>
"KRN",.84,7981015.001,2,30,0)
    </xsl:otherwise>
"KRN",.84,7981015.001,2,31,0)
   </xsl:choose>
"KRN",.84,7981015.001,2,32,0)
  </body>
"KRN",.84,7981015.001,2,33,0)
 </html>
"KRN",.84,7981015.001,2,34,0)
</xsl:template>
"KRN",.84,7981015.001,2,35,0)
 
"KRN",.84,7981015.001,2,36,0)
<!--[ TABLES ]-->
"KRN",.84,7981015.001,2,37,0)
 
"KRN",.84,7981015.001,2,38,0)
<xsl:template match="REPORT/PROCEDURES">
"KRN",.84,7981015.001,2,39,0)
 <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981015.001,2,40,0)
 <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981015.001,2,41,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981015.001,2,42,0)
 <div>
"KRN",.84,7981015.001,2,43,0)
  <h2>Patients</h2>
"KRN",.84,7981015.001,2,44,0)
  <xsl:choose>
"KRN",.84,7981015.001,2,45,0)
   <xsl:when test="PROCEDURE[1]">
"KRN",.84,7981015.001,2,46,0)
    <div>
"KRN",.84,7981015.001,2,47,0)
     <xsl:call-template name="MakeScrollable">
"KRN",.84,7981015.001,2,48,0)
      <xsl:with-param name="condition" select="PROCEDURE[31]"/>
"KRN",.84,7981015.001,2,49,0)
     </xsl:call-template>
"KRN",.84,7981015.001,2,50,0)
     <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981015.001,2,51,0)
      <thead>
"KRN",.84,7981015.001,2,52,0)
       <tr>
"KRN",.84,7981015.001,2,53,0)
        <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981015.001,2,54,0)
         <xsl:with-param name="tblname" select="'PROCEDURES'"/>
"KRN",.84,7981015.001,2,55,0)
        </xsl:call-template>
"KRN",.84,7981015.001,2,56,0)
        <xsl:call-template name="ProcHeader"/>
"KRN",.84,7981015.001,2,57,0)
       </tr>
"KRN",.84,7981015.001,2,58,0)
      </thead>
"KRN",.84,7981015.001,2,59,0)
      <xsl:call-template name="DataGridFooter">
"KRN",.84,7981015.001,2,60,0)
       <xsl:with-param name="colspan" select="8"/>
"KRN",.84,7981015.001,2,61,0)
      </xsl:call-template>
"KRN",.84,7981015.001,2,62,0)
      <tbody>
"KRN",.84,7981015.001,2,63,0)
       <xsl:choose>
"KRN",.84,7981015.001,2,64,0)
        <xsl:when test="contains(',DOD,LAST4,NAME,',concat(',',@SORT,','))">
"KRN",.84,7981015.001,2,65,0)
         <xsl:for-each select="PROCEDURE[generate-id(.)=generate-id(key('patient-cpt',@ID))]">
"KRN",.84,7981015.001,2,66,0)
          <xsl:call-template name="PatientProcData">
"KRN",.84,7981015.001,2,67,0)
           <xsl:with-param name="group" select="key('patient-cpt',@ID)"/>
"KRN",.84,7981015.001,2,68,0)
          </xsl:call-template>
"KRN",.84,7981015.001,2,69,0)
         </xsl:for-each>
"KRN",.84,7981015.001,2,70,0)
        </xsl:when>
"KRN",.84,7981015.001,2,71,0)
        <xsl:otherwise> 
"KRN",.84,7981015.001,2,72,0)
         <xsl:for-each select="PROCEDURE">
"KRN",.84,7981015.001,2,73,0)
          <tr>
"KRN",.84,7981015.001,2,74,0)
           <xsl:call-template name="PatientData"/>
"KRN",.84,7981015.001,2,75,0)
           <xsl:call-template name="ProcData"/>
"KRN",.84,7981015.001,2,76,0)
          </tr>
"KRN",.84,7981015.001,2,77,0)
         </xsl:for-each>
"KRN",.84,7981015.001,2,78,0)
        </xsl:otherwise>
"KRN",.84,7981015.001,2,79,0)
       </xsl:choose>
"KRN",.84,7981015.001,2,80,0)
      </tbody>
"KRN",.84,7981015.001,2,81,0)
     </table>
"KRN",.84,7981015.001,2,82,0)
    </div>
"KRN",.84,7981015.001,2,83,0)
    <div class="reportSummary">
"KRN",.84,7981015.001,2,84,0)
     <div style="float:left; width:30%">
"KRN",.84,7981015.001,2,85,0)
      <table cellpadding="3" cellspacing="0">
"KRN",.84,7981015.001,2,86,0)
       <caption>Source</caption>
"KRN",.84,7981015.001,2,87,0)
       <thead>
"KRN",.84,7981015.001,2,88,0)
        <tr>
"KRN",.84,7981015.001,2,89,0)
         <th width="30">Code</th>
"KRN",.84,7981015.001,2,90,0)
         <th>Description</th>
"KRN",.84,7981015.001,2,91,0)
        </tr>
"KRN",.84,7981015.001,2,92,0)
       </thead>
"KRN",.84,7981015.001,2,93,0)
       <tbody>
"KRN",.84,7981015.001,2,94,0)
        <tr>
"KRN",.84,7981015.001,2,95,0)
         <td align="center">I</td>
"KRN",.84,7981015.001,2,96,0)
         <td class="aLeft">Inpatient file</td>
"KRN",.84,7981015.001,2,97,0)
        </tr>
"KRN",.84,7981015.001,2,98,0)
        <tr>
"KRN",.84,7981015.001,2,99,0)
         <td align="center">O</td>
"KRN",.84,7981015.001,2,100,0)
         <td class="aLeft">Outpatient file</td>
"KRN",.84,7981015.001,2,101,0)
        </tr>
"KRN",.84,7981015.001,2,102,0)
       </tbody>
"KRN",.84,7981015.001,2,103,0)
      </table>
"KRN",.84,7981015.001,2,104,0)
     </div>
"KRN",.84,7981015.001,2,105,0)
    </div>
"KRN",.84,7981015.001,2,106,0)
   </xsl:when>
"KRN",.84,7981015.001,2,107,0)
   <xsl:otherwise>
"KRN",.84,7981015.001,2,108,0)
    <xsl:call-template name="TableNoData"/>
"KRN",.84,7981015.001,2,109,0)
   </xsl:otherwise>
"KRN",.84,7981015.001,2,110,0)
  </xsl:choose>
"KRN",.84,7981015.001,2,111,0)
 </div>
"KRN",.84,7981015.001,2,112,0)
</xsl:template>
"KRN",.84,7981015.001,2,113,0)
 
"KRN",.84,7981015.001,2,114,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981015.001,2,115,0)
 <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981015.001,2,116,0)
 <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981015.001,2,117,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981015.001,2,118,0)
 <div>
"KRN",.84,7981015.001,2,119,0)
  <h2>Patients</h2>
"KRN",.84,7981015.001,2,120,0)
  <xsl:call-template name="DataGrid"/>
"KRN",.84,7981015.001,2,121,0)
 </div>
"KRN",.84,7981015.001,2,122,0)
</xsl:template>
"KRN",.84,7981015.001,2,123,0)
 
"KRN",.84,7981015.001,2,124,0)
<xsl:template match="REPORT/PROCLST">
"KRN",.84,7981015.001,2,125,0)
 <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981015.001,2,126,0)
 <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981015.001,2,127,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981015.001,2,128,0)
 <div>
"KRN",.84,7981015.001,2,129,0)
  <h2>Procedure Codes</h2>
"KRN",.84,7981015.001,2,130,0)
  <xsl:call-template name="DataGrid"/>
"KRN",.84,7981015.001,2,131,0)
 </div>
"KRN",.84,7981015.001,2,132,0)
</xsl:template>
"KRN",.84,7981015.001,2,133,0)
 
"KRN",.84,7981015.001,2,134,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981015.001,2,135,0)
 
"KRN",.84,7981015.001,2,136,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981015.001,2,137,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,138,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981015.001,2,139,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981015.001,2,140,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,141,0)
</xsl:template>
"KRN",.84,7981015.001,2,142,0)
 
"KRN",.84,7981015.001,2,143,0)
<xsl:template match="COLUMN[@NAME='NC']">
"KRN",.84,7981015.001,2,144,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,145,0)
  <xsl:with-param name="title" select="'Number of Codes'"/>
"KRN",.84,7981015.001,2,146,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981015.001,2,147,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,148,0)
</xsl:template>
"KRN",.84,7981015.001,2,149,0)
 
"KRN",.84,7981015.001,2,150,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981015.001,2,151,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,152,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981015.001,2,153,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981015.001,2,154,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,155,0)
</xsl:template>
"KRN",.84,7981015.001,2,156,0)
 
"KRN",.84,7981015.001,2,157,0)
<xsl:template match="COLUMN[@NAME='PROCNAME']">
"KRN",.84,7981015.001,2,158,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,159,0)
  <xsl:with-param name="title" select="'Procedure Name'"/>
"KRN",.84,7981015.001,2,160,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,161,0)
</xsl:template>
"KRN",.84,7981015.001,2,162,0)
 
"KRN",.84,7981015.001,2,163,0)
<xsl:template match="COLUMN[@NAME='PROCODE']">
"KRN",.84,7981015.001,2,164,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,165,0)
  <xsl:with-param name="title" select="'Code'"/>
"KRN",.84,7981015.001,2,166,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981015.001,2,167,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,168,0)
</xsl:template>
"KRN",.84,7981015.001,2,169,0)
 
"KRN",.84,7981015.001,2,170,0)
<xsl:template match="COLUMN[@NAME='SOURCE']">
"KRN",.84,7981015.001,2,171,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,172,0)
  <xsl:with-param name="title" select="'Source'"/>
"KRN",.84,7981015.001,2,173,0)
  <xsl:with-param name="width" select="'1%'"/>
"KRN",.84,7981015.001,2,174,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,175,0)
</xsl:template>
"KRN",.84,7981015.001,2,176,0)
 
"KRN",.84,7981015.001,2,177,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981015.001,2,178,0)
 
"KRN",.84,7981015.001,2,179,0)
<xsl:template match="PROCNAME">
"KRN",.84,7981015.001,2,180,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,181,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981015.001,2,182,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,183,0)
</xsl:template>
"KRN",.84,7981015.001,2,184,0)
 
"KRN",.84,7981015.001,2,185,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981015.001,2,186,0)
 
"KRN",.84,7981015.001,2,187,0)
<xsl:template name="PatientData">
"KRN",.84,7981015.001,2,188,0)
 <xsl:param name="number" select="position()"/>
"KRN",.84,7981015.001,2,189,0)
 <xsl:param name="ref"/>
"KRN",.84,7981015.001,2,190,0)
 <xsl:param name="rowspan" select="1"/>
"KRN",.84,7981015.001,2,191,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,192,0)
  <xsl:with-param name="value" select="$number"/>
"KRN",.84,7981015.001,2,193,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981015.001,2,194,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,195,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,196,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981015.001,2,197,0)
  <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981015.001,2,198,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981015.001,2,199,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,200,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,201,0)
  <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981015.001,2,202,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981015.001,2,203,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,204,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,205,0)
  <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981015.001,2,206,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981015.001,2,207,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981015.001,2,208,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,209,0)
</xsl:template>
"KRN",.84,7981015.001,2,210,0)
 
"KRN",.84,7981015.001,2,211,0)
<xsl:template name="PatientProcData">
"KRN",.84,7981015.001,2,212,0)
 <xsl:param name="group"/>
"KRN",.84,7981015.001,2,213,0)
 <xsl:param name="number" select="position()"/>
"KRN",.84,7981015.001,2,214,0)
 <xsl:variable name="rowspan" select="count($group)"/>
"KRN",.84,7981015.001,2,215,0)
 <xsl:for-each select="$group">
"KRN",.84,7981015.001,2,216,0)
  <xsl:sort select="PROCNAME"/>
"KRN",.84,7981015.001,2,217,0)
  <tr>
"KRN",.84,7981015.001,2,218,0)
   <xsl:if test="position()=1">
"KRN",.84,7981015.001,2,219,0)
    <xsl:call-template name="PatientData">
"KRN",.84,7981015.001,2,220,0)
     <xsl:with-param name="number" select="$number"/>
"KRN",.84,7981015.001,2,221,0)
     <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981015.001,2,222,0)
    </xsl:call-template>
"KRN",.84,7981015.001,2,223,0)
   </xsl:if>
"KRN",.84,7981015.001,2,224,0)
   <xsl:call-template name="ProcData"/>
"KRN",.84,7981015.001,2,225,0)
  </tr>
"KRN",.84,7981015.001,2,226,0)
 </xsl:for-each>
"KRN",.84,7981015.001,2,227,0)
</xsl:template>
"KRN",.84,7981015.001,2,228,0)
 
"KRN",.84,7981015.001,2,229,0)
<xsl:template name="ProcData">
"KRN",.84,7981015.001,2,230,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,231,0)
  <xsl:with-param name="value" select="PROCODE"/>
"KRN",.84,7981015.001,2,232,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,233,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,234,0)
  <xsl:with-param name="value" select="PROCNAME"/>
"KRN",.84,7981015.001,2,235,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981015.001,2,236,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,237,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,238,0)
  <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981015.001,2,239,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981015.001,2,240,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,241,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,242,0)
  <xsl:with-param name="value" select="SOURCE"/>
"KRN",.84,7981015.001,2,243,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,244,0)
</xsl:template>
"KRN",.84,7981015.001,2,245,0)
 
"KRN",.84,7981015.001,2,246,0)
<xsl:template name="ProcHeader">
"KRN",.84,7981015.001,2,247,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,248,0)
  <xsl:with-param name="colname" select="'PROCODE'"/>
"KRN",.84,7981015.001,2,249,0)
  <xsl:with-param name="sort" select="'PROCEDURES=PROCODE'"/>
"KRN",.84,7981015.001,2,250,0)
  <xsl:with-param name="title" select="'Code'"/>    
"KRN",.84,7981015.001,2,251,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981015.001,2,252,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,253,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,254,0)
  <xsl:with-param name="colname" select="'PROCNAME'"/>
"KRN",.84,7981015.001,2,255,0)
  <xsl:with-param name="sort" select="'PROCEDURES=PROCNAME'"/>
"KRN",.84,7981015.001,2,256,0)
  <xsl:with-param name="title" select="'Procedure Name'"/>
"KRN",.84,7981015.001,2,257,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,258,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,259,0)
  <xsl:with-param name="colname" select="'DATE'"/>
"KRN",.84,7981015.001,2,260,0)
  <xsl:with-param name="sort" select="'PROCEDURES=DATE'"/>
"KRN",.84,7981015.001,2,261,0)
  <xsl:with-param name="title" select="'Date'"/>    
"KRN",.84,7981015.001,2,262,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981015.001,2,263,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,264,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,265,0)
  <xsl:with-param name="colname" select="'SOURCE'"/>
"KRN",.84,7981015.001,2,266,0)
  <xsl:with-param name="sort" select="'PROCEDURES=SOURCE'"/>
"KRN",.84,7981015.001,2,267,0)
  <xsl:with-param name="title" select="'Source'"/>    
"KRN",.84,7981015.001,2,268,0)
  <xsl:with-param name="width" select="'1%'"/>
"KRN",.84,7981015.001,2,269,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,270,0)
</xsl:template>
"KRN",.84,7981015.001,2,271,0)
 
"KRN",.84,7981015.001,2,272,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981015.001,2,273,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981015.001,2,274,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981015.001,2,275,0)
  <thead>
"KRN",.84,7981015.001,2,276,0)
   <tr>
"KRN",.84,7981015.001,2,277,0)
    <th width="33%">Number of Patients</th>
"KRN",.84,7981015.001,2,278,0)
    <th width="33%">Number of Codes</th>
"KRN",.84,7981015.001,2,279,0)
    <th width="33%">Number of Different Codes </th>
"KRN",.84,7981015.001,2,280,0)
   </tr>
"KRN",.84,7981015.001,2,281,0)
  </thead>
"KRN",.84,7981015.001,2,282,0)
  <tbody>
"KRN",.84,7981015.001,2,283,0)
   <tr>
"KRN",.84,7981015.001,2,284,0)
    <td><xsl:value-of select="$summary/NP"/></td>
"KRN",.84,7981015.001,2,285,0)
    <td><xsl:value-of select="$summary/NC"/></td>
"KRN",.84,7981015.001,2,286,0)
    <td><xsl:value-of select="$summary/NDC"/></td>
"KRN",.84,7981015.001,2,287,0)
   </tr>
"KRN",.84,7981015.001,2,288,0)
  </tbody>
"KRN",.84,7981015.001,2,289,0)
 </table>
"KRN",.84,7981015.001,2,290,0)
</xsl:template>
"KRN",.84,7981015.001,2,291,0)
 
"KRN",.84,7981015.001,2,292,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981015.001,2,293,0)
 
"KRN",.84,7981015.001,2,294,0)
<xsl:template match="PARAMETERS/DATE_RANGE_3">
"KRN",.84,7981015.001,2,295,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981015.001,2,296,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981015.001,2,297,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,298,0)
</xsl:template>
"KRN",.84,7981015.001,2,299,0)
 
"KRN",.84,7981015.001,2,300,0)
</xsl:stylesheet>
"KRN",.84,7981016.001,-1)
0^28
"KRN",.84,7981016.001,0)
7981016.001^2^^CLINICAL CASE REGISTRIES^Outpatient Utilization (HTML)
"KRN",.84,7981016.001,2,0)
^.844^172^172^3100218^^
"KRN",.84,7981016.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981016.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981016.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981016.001,2,4,0)
>
"KRN",.84,7981016.001,2,5,0)
 
"KRN",.84,7981016.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981016.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981016.001,2,8,0)
 
"KRN",.84,7981016.001,2,9,0)
<xsl:template match="/">
"KRN",.84,7981016.001,2,10,0)
 <html>
"KRN",.84,7981016.001,2,11,0)
  <head>
"KRN",.84,7981016.001,2,12,0)
   <title>Outpatient Utilization</title>
"KRN",.84,7981016.001,2,13,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981016.001,2,14,0)
  </head>
"KRN",.84,7981016.001,2,15,0)
  <body>
"KRN",.84,7981016.001,2,16,0)
   <h1>Outpatient Utilization</h1>
"KRN",.84,7981016.001,2,17,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981016.001,2,18,0)
   <xsl:choose>
"KRN",.84,7981016.001,2,19,0)
    <xsl:when test="REPORT/OUTPATIENTS">
"KRN",.84,7981016.001,2,20,0)
     <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981016.001,2,21,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981016.001,2,22,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981016.001,2,23,0)
     <div>
"KRN",.84,7981016.001,2,24,0)
      <xsl:call-template name="OutpatientSummary"/>
"KRN",.84,7981016.001,2,25,0)
      <xsl:apply-templates select="REPORT/OUTPATIENTS/*[@TABLE]"/>
"KRN",.84,7981016.001,2,26,0)
     </div>
"KRN",.84,7981016.001,2,27,0)
    </xsl:when>
"KRN",.84,7981016.001,2,28,0)
    <xsl:otherwise>
"KRN",.84,7981016.001,2,29,0)
     <xsl:call-template name="TableNoData"/>
"KRN",.84,7981016.001,2,30,0)
    </xsl:otherwise>
"KRN",.84,7981016.001,2,31,0)
   </xsl:choose>
"KRN",.84,7981016.001,2,32,0)
   <xsl:if test="REPORT/HIGHUTIL">
"KRN",.84,7981016.001,2,33,0)
     <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981016.001,2,34,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981016.001,2,35,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981016.001,2,36,0)
     <div>
"KRN",.84,7981016.001,2,37,0)
     <h2>Highest Utilization</h2>
"KRN",.84,7981016.001,2,38,0)
     <xsl:apply-templates select="REPORT/HIGHUTIL/*"/>
"KRN",.84,7981016.001,2,39,0)
    </div>
"KRN",.84,7981016.001,2,40,0)
   </xsl:if>
"KRN",.84,7981016.001,2,41,0)
  </body>
"KRN",.84,7981016.001,2,42,0)
 </html>
"KRN",.84,7981016.001,2,43,0)
</xsl:template>
"KRN",.84,7981016.001,2,44,0)
 
"KRN",.84,7981016.001,2,45,0)
<xsl:template match="HIGHUTIL/HU_STOPS">
"KRN",.84,7981016.001,2,46,0)
 <h3><xsl:call-template name="HUPatientsHeader"/> by number of stop codes</h3>
"KRN",.84,7981016.001,2,47,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981016.001,2,48,0)
</xsl:template>
"KRN",.84,7981016.001,2,49,0)
 
"KRN",.84,7981016.001,2,50,0)
<xsl:template match="OUTPATIENTS/CLINICS">
"KRN",.84,7981016.001,2,51,0)
 <h3>Distribution of Utilization among Clinics</h3>
"KRN",.84,7981016.001,2,52,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981016.001,2,53,0)
</xsl:template>
"KRN",.84,7981016.001,2,54,0)
 
"KRN",.84,7981016.001,2,55,0)
<xsl:template match="OUTPATIENTS/STOPS">
"KRN",.84,7981016.001,2,56,0)
 <br clear="both"/>
"KRN",.84,7981016.001,2,57,0)
 <xsl:call-template name="DataGrid">
"KRN",.84,7981016.001,2,58,0)
  <xsl:with-param name="divstyle" select="'width:50%'"/>
"KRN",.84,7981016.001,2,59,0)
 </xsl:call-template>
"KRN",.84,7981016.001,2,60,0)
</xsl:template>
"KRN",.84,7981016.001,2,61,0)
 
"KRN",.84,7981016.001,2,62,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981016.001,2,63,0)
 
"KRN",.84,7981016.001,2,64,0)
<xsl:template name="OutpatientSummary">
"KRN",.84,7981016.001,2,65,0)
 <xsl:variable name="OP" select="/REPORT/OUTPATIENTS"/>
"KRN",.84,7981016.001,2,66,0)
 <xsl:text>
"KRN",.84,7981016.001,2,67,0)
  A total of 1.00 visit is given for outpatient activity on a given date.
"KRN",.84,7981016.001,2,68,0)
  A 'stop' is credited for each entry of a stop code, while a 'visit' is
"KRN",.84,7981016.001,2,69,0)
  split among each stop credited on a given date. Thus, a single visit with
"KRN",.84,7981016.001,2,70,0)
  two stop codes credited will show as 0.5 visit for each stop code. 
"KRN",.84,7981016.001,2,71,0)
 </xsl:text>
"KRN",.84,7981016.001,2,72,0)
 <br/>
"KRN",.84,7981016.001,2,73,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981016.001,2,74,0)
  <thead>
"KRN",.84,7981016.001,2,75,0)
   <tr>
"KRN",.84,7981016.001,2,76,0)
    <th width="33%">Number of Patients</th>
"KRN",.84,7981016.001,2,77,0)
    <th width="33%">Number of Visits</th>
"KRN",.84,7981016.001,2,78,0)
    <th width="33%">Number of Stops</th>
"KRN",.84,7981016.001,2,79,0)
   </tr>
"KRN",.84,7981016.001,2,80,0)
  </thead>
"KRN",.84,7981016.001,2,81,0)
  <tbody>
"KRN",.84,7981016.001,2,82,0)
   <tr>
"KRN",.84,7981016.001,2,83,0)
    <td><xsl:value-of select="$OP/NP"/></td>
"KRN",.84,7981016.001,2,84,0)
    <td><xsl:value-of select="$OP/NV"/></td>
"KRN",.84,7981016.001,2,85,0)
    <td><xsl:value-of select="$OP/NSC"/></td>
"KRN",.84,7981016.001,2,86,0)
   </tr>
"KRN",.84,7981016.001,2,87,0)
  </tbody>
"KRN",.84,7981016.001,2,88,0)
 </table>
"KRN",.84,7981016.001,2,89,0)
</xsl:template>
"KRN",.84,7981016.001,2,90,0)
 
"KRN",.84,7981016.001,2,91,0)
<!--[ COLUMN HEADERS ]-->
"KRN",.84,7981016.001,2,92,0)
 
"KRN",.84,7981016.001,2,93,0)
<xsl:template match="COLUMN[@NAME='NAME']">
"KRN",.84,7981016.001,2,94,0)
 <xsl:variable name="tblname" select="../@NAME"/>
"KRN",.84,7981016.001,2,95,0)
 <xsl:choose>
"KRN",.84,7981016.001,2,96,0)
  <xsl:when test="$tblname='CLINICS'">
"KRN",.84,7981016.001,2,97,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981016.001,2,98,0)
    <xsl:with-param name="title" select="'Clinic'"/>
"KRN",.84,7981016.001,2,99,0)
   </xsl:call-template> 
"KRN",.84,7981016.001,2,100,0)
  </xsl:when>
"KRN",.84,7981016.001,2,101,0)
  <xsl:when test="contains($tblname,'HU_')">
"KRN",.84,7981016.001,2,102,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981016.001,2,103,0)
    <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981016.001,2,104,0)
   </xsl:call-template> 
"KRN",.84,7981016.001,2,105,0)
  </xsl:when>
"KRN",.84,7981016.001,2,106,0)
  <xsl:otherwise>
"KRN",.84,7981016.001,2,107,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981016.001,2,108,0)
    <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981016.001,2,109,0)
   </xsl:call-template> 
"KRN",.84,7981016.001,2,110,0)
  </xsl:otherwise>
"KRN",.84,7981016.001,2,111,0)
 </xsl:choose>
"KRN",.84,7981016.001,2,112,0)
</xsl:template>
"KRN",.84,7981016.001,2,113,0)
 
"KRN",.84,7981016.001,2,114,0)
<xsl:template match="COLUMN[@NAME='NDS']">
"KRN",.84,7981016.001,2,115,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981016.001,2,116,0)
  <xsl:with-param name="title" select="'Number of Different Stops'"/>
"KRN",.84,7981016.001,2,117,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981016.001,2,118,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981016.001,2,119,0)
 </xsl:call-template>
"KRN",.84,7981016.001,2,120,0)
</xsl:template>
"KRN",.84,7981016.001,2,121,0)
 
"KRN",.84,7981016.001,2,122,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981016.001,2,123,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981016.001,2,124,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981016.001,2,125,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981016.001,2,126,0)
 </xsl:call-template>
"KRN",.84,7981016.001,2,127,0)
</xsl:template>
"KRN",.84,7981016.001,2,128,0)
 
"KRN",.84,7981016.001,2,129,0)
<xsl:template match="COLUMN[@NAME='NSC']">
"KRN",.84,7981016.001,2,130,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981016.001,2,131,0)
  <xsl:with-param name="title" select="'Number of Stops'"/>
"KRN",.84,7981016.001,2,132,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981016.001,2,133,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981016.001,2,134,0)
 </xsl:call-template>
"KRN",.84,7981016.001,2,135,0)
</xsl:template>
"KRN",.84,7981016.001,2,136,0)
 
"KRN",.84,7981016.001,2,137,0)
<xsl:template match="COLUMN[@NAME='NV']">
"KRN",.84,7981016.001,2,138,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981016.001,2,139,0)
  <xsl:with-param name="title" select="'Number of Visits'"/>
"KRN",.84,7981016.001,2,140,0)
  <xsl:with-param name="sortmode" select="':DESC'"/>
"KRN",.84,7981016.001,2,141,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981016.001,2,142,0)
 </xsl:call-template>
"KRN",.84,7981016.001,2,143,0)
</xsl:template>
"KRN",.84,7981016.001,2,144,0)
 
"KRN",.84,7981016.001,2,145,0)
<xsl:template match="COLUMN[@NAME='STOP']">
"KRN",.84,7981016.001,2,146,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981016.001,2,147,0)
  <xsl:with-param name="title" select="'Stop Code'"/>
"KRN",.84,7981016.001,2,148,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981016.001,2,149,0)
 </xsl:call-template>
"KRN",.84,7981016.001,2,150,0)
</xsl:template>
"KRN",.84,7981016.001,2,151,0)
 
"KRN",.84,7981016.001,2,152,0)
<!--[ CELL VALUES ]-->
"KRN",.84,7981016.001,2,153,0)
 
"KRN",.84,7981016.001,2,154,0)
<xsl:template match="NOBS/PATIENT/DATE">
"KRN",.84,7981016.001,2,155,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981016.001,2,156,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981016.001,2,157,0)
 </xsl:call-template>
"KRN",.84,7981016.001,2,158,0)
</xsl:template>
"KRN",.84,7981016.001,2,159,0)
 
"KRN",.84,7981016.001,2,160,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981016.001,2,161,0)
 
"KRN",.84,7981016.001,2,162,0)
<xsl:template match="PARAMETERS/MAXUTNUM">
"KRN",.84,7981016.001,2,163,0)
 <tr>
"KRN",.84,7981016.001,2,164,0)
  <th scope="row">MaxUtil:&#160;</th>
"KRN",.84,7981016.001,2,165,0)
  <td>
"KRN",.84,7981016.001,2,166,0)
   <xsl:value-of select="."/>
"KRN",.84,7981016.001,2,167,0)
   (maximum number of patients with highest utilization to display)
"KRN",.84,7981016.001,2,168,0)
  </td>
"KRN",.84,7981016.001,2,169,0)
 </tr>
"KRN",.84,7981016.001,2,170,0)
</xsl:template>
"KRN",.84,7981016.001,2,171,0)
 
"KRN",.84,7981016.001,2,172,0)
</xsl:stylesheet>
"KRN",.84,7981018.001,-1)
0^5
"KRN",.84,7981018.001,0)
7981018.001^2^^CLINICAL CASE REGISTRIES^BMI Report by Range (HTML)
"KRN",.84,7981018.001,2,0)
^^131^131^3100218^
"KRN",.84,7981018.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981018.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981018.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981018.001,2,4,0)
 
"KRN",.84,7981018.001,2,5,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981018.001,2,6,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981018.001,2,7,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients --> 
"KRN",.84,7981018.001,2,8,0)
 
"KRN",.84,7981018.001,2,9,0)
<xsl:template match="/">
"KRN",.84,7981018.001,2,10,0)
 <html>
"KRN",.84,7981018.001,2,11,0)
  <head>
"KRN",.84,7981018.001,2,12,0)
   <title>BMI by Range</title>
"KRN",.84,7981018.001,2,13,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981018.001,2,14,0)
  </head>
"KRN",.84,7981018.001,2,15,0)
  <body>
"KRN",.84,7981018.001,2,16,0)
   <h1>BMI by Range</h1>
"KRN",.84,7981018.001,2,17,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981018.001,2,18,0)
    <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981018.001,2,19,0)
     *For this report, height values that are &lt;36 inches or
"KRN",.84,7981018.001,2,20,0)
&gt;96 inches are assumed to be erroneous and are ignored.
"KRN",.84,7981018.001,2,21,0)
    </div>
"KRN",.84,7981018.001,2,22,0)
   <xsl:call-template name="BMIReportSummary"/>
"KRN",.84,7981018.001,2,23,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981018.001,2,24,0)
     <br />
"KRN",.84,7981018.001,2,25,0)
     <!-- The following line changed to fix page break issue in IE 7 -->
"KRN",.84,7981018.001,2,26,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981018.001,2,27,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981018.001,2,28,0)
     <div>
"KRN",.84,7981018.001,2,29,0)
       <xsl:call-template name="MakeScrollable">
"KRN",.84,7981018.001,2,30,0)
         <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981018.001,2,31,0)
       </xsl:call-template>
"KRN",.84,7981018.001,2,32,0)
       <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981018.001,2,33,0)
   </div>
"KRN",.84,7981018.001,2,34,0)
   </xsl:if>
"KRN",.84,7981018.001,2,35,0)
  </body>
"KRN",.84,7981018.001,2,36,0)
 </html>
"KRN",.84,7981018.001,2,37,0)
</xsl:template>
"KRN",.84,7981018.001,2,38,0)
 
"KRN",.84,7981018.001,2,39,0)
<xsl:template name="BMIReportSummary">
"KRN",.84,7981018.001,2,40,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981018.001,2,41,0)
 <table width="45%" cellpadding="5" cellspacing="0">
"KRN",.84,7981018.001,2,42,0)
  <thead>
"KRN",.84,7981018.001,2,43,0)
   <tr>
"KRN",.84,7981018.001,2,44,0)
    <th width="33%">BMI Categories</th>
"KRN",.84,7981018.001,2,45,0)
    <th width="33%">BMI Values</th>
"KRN",.84,7981018.001,2,46,0)
    <th width="33%">Number of Patients</th>
"KRN",.84,7981018.001,2,47,0)
   </tr>
"KRN",.84,7981018.001,2,48,0)
  </thead>
"KRN",.84,7981018.001,2,49,0)
  <tbody>
"KRN",.84,7981018.001,2,50,0)
    <xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981018.001,2,51,0)
    <tr>
"KRN",.84,7981018.001,2,52,0)
      <td class="aLeft"><xsl:value-of select="./DESC"/></td>
"KRN",.84,7981018.001,2,53,0)
      <td><xsl:value-of select="./VALUES"/></td>
"KRN",.84,7981018.001,2,54,0)
      <td><xsl:value-of select="./NP"/></td>
"KRN",.84,7981018.001,2,55,0)
    </tr>
"KRN",.84,7981018.001,2,56,0)
   </xsl:for-each>
"KRN",.84,7981018.001,2,57,0)
  </tbody>
"KRN",.84,7981018.001,2,58,0)
 </table>
"KRN",.84,7981018.001,2,59,0)
</xsl:template>
"KRN",.84,7981018.001,2,60,0)
 
"KRN",.84,7981018.001,2,61,0)
 
"KRN",.84,7981018.001,2,62,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981018.001,2,63,0)
 
"KRN",.84,7981018.001,2,64,0)
<xsl:template match="COLUMN[@NAME='VITAL']">
"KRN",.84,7981018.001,2,65,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981018.001,2,66,0)
  <xsl:with-param name="title" select="'Vital'"/>
"KRN",.84,7981018.001,2,67,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981018.001,2,68,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981018.001,2,69,0)
 </xsl:call-template>
"KRN",.84,7981018.001,2,70,0)
</xsl:template>
"KRN",.84,7981018.001,2,71,0)
 
"KRN",.84,7981018.001,2,72,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981018.001,2,73,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981018.001,2,74,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981018.001,2,75,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981018.001,2,76,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981018.001,2,77,0)
 </xsl:call-template>
"KRN",.84,7981018.001,2,78,0)
</xsl:template>
"KRN",.84,7981018.001,2,79,0)
 
"KRN",.84,7981018.001,2,80,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981018.001,2,81,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981018.001,2,82,0)
  <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981018.001,2,83,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981018.001,2,84,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981018.001,2,85,0)
 </xsl:call-template>
"KRN",.84,7981018.001,2,86,0)
</xsl:template>
"KRN",.84,7981018.001,2,87,0)
 
"KRN",.84,7981018.001,2,88,0)
<xsl:template match="COLUMN[@NAME='BMI']">
"KRN",.84,7981018.001,2,89,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981018.001,2,90,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981018.001,2,91,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981018.001,2,92,0)
 </xsl:call-template>
"KRN",.84,7981018.001,2,93,0)
</xsl:template>
"KRN",.84,7981018.001,2,94,0)
 
"KRN",.84,7981018.001,2,95,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981018.001,2,96,0)
 
"KRN",.84,7981018.001,2,97,0)
<xsl:template match="PATIENT/BMIDATA">
"KRN",.84,7981018.001,2,98,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981018.001,2,99,0)
 <td class="aLeft">
"KRN",.84,7981018.001,2,100,0)
   <xsl:text>Height</xsl:text><br/>  
"KRN",.84,7981018.001,2,101,0)
   <xsl:text>Weight</xsl:text>  
"KRN",.84,7981018.001,2,102,0)
 </td>
"KRN",.84,7981018.001,2,103,0)
 <td>
"KRN",.84,7981018.001,2,104,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981018.001,2,105,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.001,2,106,0)
     <xsl:with-param name="value" select="HEIGHT/DATE"/>
"KRN",.84,7981018.001,2,107,0)
     <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981018.001,2,108,0)
   </xsl:call-template><br/>
"KRN",.84,7981018.001,2,109,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981018.001,2,110,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.001,2,111,0)
     <xsl:with-param name="value" select="WEIGHT/DATE"/>
"KRN",.84,7981018.001,2,112,0)
   </xsl:call-template>
"KRN",.84,7981018.001,2,113,0)
 </td>
"KRN",.84,7981018.001,2,114,0)
 <td class="aRight">
"KRN",.84,7981018.001,2,115,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981018.001,2,116,0)
     <xsl:with-param name="value" select="HEIGHT/RESULT"/>
"KRN",.84,7981018.001,2,117,0)
     <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981018.001,2,118,0)
   </xsl:call-template><br/>
"KRN",.84,7981018.001,2,119,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981018.001,2,120,0)
     <xsl:with-param name="value" select="WEIGHT/RESULT"/>
"KRN",.84,7981018.001,2,121,0)
   </xsl:call-template>
"KRN",.84,7981018.001,2,122,0)
 </td>
"KRN",.84,7981018.001,2,123,0)
 <td class="aRight">
"KRN",.84,7981018.001,2,124,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981018.001,2,125,0)
     <xsl:with-param name="value" select="BMI"/>
"KRN",.84,7981018.001,2,126,0)
     <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981018.001,2,127,0)
   </xsl:call-template>
"KRN",.84,7981018.001,2,128,0)
 </td>
"KRN",.84,7981018.001,2,129,0)
</xsl:template>
"KRN",.84,7981018.001,2,130,0)
 
"KRN",.84,7981018.001,2,131,0)
</xsl:stylesheet>
"KRN",.84,7981018.002,-1)
0^7
"KRN",.84,7981018.002,0)
7981018.002^2^^CLINICAL CASE REGISTRIES^BMI Report by Range (CSV)
"KRN",.84,7981018.002,2,0)
^^87^87^3100216^
"KRN",.84,7981018.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981018.002,2,2,0)
 <xsl:stylesheet version="1.0"
"KRN",.84,7981018.002,2,3,0)
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981018.002,2,4,0)
 >
"KRN",.84,7981018.002,2,5,0)
 
"KRN",.84,7981018.002,2,6,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981018.002,2,7,0)
 
"KRN",.84,7981018.002,2,8,0)
<xsl:template match="/">
"KRN",.84,7981018.002,2,9,0)
  <xsl:call-template name="BMIReportSummary"/>
"KRN",.84,7981018.002,2,10,0)
  <xsl:text>BMI by Range</xsl:text>
"KRN",.84,7981018.002,2,11,0)
  <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981018.002,2,12,0)
</xsl:template>
"KRN",.84,7981018.002,2,13,0)
 
"KRN",.84,7981018.002,2,14,0)
<xsl:template name="BMIReportSummary">
"KRN",.84,7981018.002,2,15,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981018.002,2,16,0)
 <xsl:text>BMI by Range (Summary)</xsl:text>
"KRN",.84,7981018.002,2,17,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,18,0)
 <xsl:text>BMI Categories</xsl:text>
"KRN",.84,7981018.002,2,19,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,20,0)
 <xsl:text>BMI Values</xsl:text>
"KRN",.84,7981018.002,2,21,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,22,0)
 <xsl:text>Number of Patients</xsl:text>
"KRN",.84,7981018.002,2,23,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,24,0)
 <xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981018.002,2,25,0)
   <xsl:value-of select="./DESC"/>
"KRN",.84,7981018.002,2,26,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,27,0)
   <xsl:value-of select="./VALUES"/>
"KRN",.84,7981018.002,2,28,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,29,0)
   <xsl:value-of select="./NP"/>
"KRN",.84,7981018.002,2,30,0)
   <xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,31,0)
 </xsl:for-each>
"KRN",.84,7981018.002,2,32,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981018.002,2,33,0)
</xsl:template>
"KRN",.84,7981018.002,2,34,0)
 
"KRN",.84,7981018.002,2,35,0)
 <xsl:template match="COLUMN[@NAME='VITAL']">
"KRN",.84,7981018.002,2,36,0)
  <xsl:value-of select="''"/>
"KRN",.84,7981018.002,2,37,0)
 </xsl:template>
"KRN",.84,7981018.002,2,38,0)
 
"KRN",.84,7981018.002,2,39,0)
 <xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981018.002,2,40,0)
  <xsl:value-of select="'Height Date'"/>
"KRN",.84,7981018.002,2,41,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,42,0)
  <xsl:value-of select="'Height'"/>
"KRN",.84,7981018.002,2,43,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,44,0)
 </xsl:template>
"KRN",.84,7981018.002,2,45,0)
 
"KRN",.84,7981018.002,2,46,0)
 <xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981018.002,2,47,0)
  <xsl:value-of select="'Weight Date'"/>
"KRN",.84,7981018.002,2,48,0)
  <xsl:value-of select="$DELIMITER"/>  
"KRN",.84,7981018.002,2,49,0)
  <xsl:value-of select="'Weight'"/>
"KRN",.84,7981018.002,2,50,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,51,0)
 </xsl:template>
"KRN",.84,7981018.002,2,52,0)
 
"KRN",.84,7981018.002,2,53,0)
 <xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981018.002,2,54,0)
  <xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981018.002,2,55,0)
  <xsl:variable name="ssn" select="LAST4"/>
"KRN",.84,7981018.002,2,56,0)
  <xsl:variable name="dod" select="DOD"/>
"KRN",.84,7981018.002,2,57,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,58,0)
   <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981018.002,2,59,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,60,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,61,0)
   <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981018.002,2,62,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,63,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,64,0)
   <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981018.002,2,65,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,66,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,67,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,68,0)
   <xsl:with-param name="value" select="BMIDATA/HEIGHT/DATE"/>
"KRN",.84,7981018.002,2,69,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,70,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,71,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,72,0)
   <xsl:with-param name="value" select="BMIDATA/HEIGHT/RESULT"/>
"KRN",.84,7981018.002,2,73,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,74,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,75,0)
   <xsl:with-param name="value" select="BMIDATA/WEIGHT/DATE"/>
"KRN",.84,7981018.002,2,76,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,77,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,78,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,79,0)
   <xsl:with-param name="value" select="BMIDATA/WEIGHT/RESULT"/>
"KRN",.84,7981018.002,2,80,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,81,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,82,0)
   <xsl:with-param name="value" select="BMIDATA/BMI"/>
"KRN",.84,7981018.002,2,83,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,84,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,85,0)
 </xsl:template>
"KRN",.84,7981018.002,2,86,0)
 
"KRN",.84,7981018.002,2,87,0)
</xsl:stylesheet>
"KRN",.84,7981019.001,-1)
0^8
"KRN",.84,7981019.001,0)
7981019.001^2^^CLINICAL CASE REGISTRIES^MELD Report by Range (HTML)
"KRN",.84,7981019.001,2,0)
^^176^176^3100218^
"KRN",.84,7981019.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981019.001,2,2,0)
 <xsl:stylesheet version="1.0"
"KRN",.84,7981019.001,2,3,0)
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981019.001,2,4,0)
 >
"KRN",.84,7981019.001,2,5,0)
 
"KRN",.84,7981019.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981019.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981019.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981019.001,2,9,0)
<xsl:include href="template://report/995/1"/>  <!-- Lab Data -->
"KRN",.84,7981019.001,2,10,0)
 
"KRN",.84,7981019.001,2,11,0)
<xsl:template match="/">
"KRN",.84,7981019.001,2,12,0)
 <html>
"KRN",.84,7981019.001,2,13,0)
  <head>
"KRN",.84,7981019.001,2,14,0)
   <title>MELD Score by Range</title>
"KRN",.84,7981019.001,2,15,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981019.001,2,16,0)
  </head>
"KRN",.84,7981019.001,2,17,0)
  <body>
"KRN",.84,7981019.001,2,18,0)
   <h1>MELD Score by Range</h1>
"KRN",.84,7981019.001,2,19,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981019.001,2,20,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981019.001,2,21,0)
     <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981019.001,2,22,0)
       Lab tests used to calculate MELD scores are identified by LOINC 
"KRN",.84,7981019.001,2,23,0)
code. 
"KRN",.84,7981019.001,2,24,0)
       Your local lab ADPAC should be contacted regarding errors in LOINC 
"KRN",.84,7981019.001,2,25,0)
codes.
"KRN",.84,7981019.001,2,26,0)
     </div>
"KRN",.84,7981019.001,2,27,0)
     <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981019.001,2,28,0)
       *For this report, creatinine values &gt;12 mg/dL are assumed to be 
"KRN",.84,7981019.001,2,29,0)
       erroneous and are ignored.  Sodium values &lt;100 or &gt;180 meq/L 
"KRN",.84,7981019.001,2,30,0)
are also assumed to be erroneous and are ignored.
"KRN",.84,7981019.001,2,31,0)
     </div>
"KRN",.84,7981019.001,2,32,0)
     <br />
"KRN",.84,7981019.001,2,33,0)
     <!-- The following line changed to fix page break issue in IE 7 -->
"KRN",.84,7981019.001,2,34,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981019.001,2,35,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981019.001,2,36,0)
     <div>
"KRN",.84,7981019.001,2,37,0)
       <xsl:call-template name="MakeScrollable">
"KRN",.84,7981019.001,2,38,0)
         <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981019.001,2,39,0)
       </xsl:call-template>
"KRN",.84,7981019.001,2,40,0)
       <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981019.001,2,41,0)
     </div>
"KRN",.84,7981019.001,2,42,0)
     <xsl:call-template name="ExplainFormula"/>
"KRN",.84,7981019.001,2,43,0)
   </xsl:if>
"KRN",.84,7981019.001,2,44,0)
  </body>
"KRN",.84,7981019.001,2,45,0)
 </html>
"KRN",.84,7981019.001,2,46,0)
</xsl:template>
"KRN",.84,7981019.001,2,47,0)
 
"KRN",.84,7981019.001,2,48,0)
<xsl:template name="ExplainFormula">
"KRN",.84,7981019.001,2,49,0)
 <br/>
"KRN",.84,7981019.001,2,50,0)
 <div class="reportSummary">
"KRN",.84,7981019.001,2,51,0)
  <div style="float:left">
"KRN",.84,7981019.001,2,52,0)
   <table cellpadding="3" cellspacing="0">
"KRN",.84,7981019.001,2,53,0)
    <caption>Calculation Formulas</caption>
"KRN",.84,7981019.001,2,54,0)
    <thead>
"KRN",.84,7981019.001,2,55,0)
     <tr>
"KRN",.84,7981019.001,2,56,0)
      <th width="30">Description</th>
"KRN",.84,7981019.001,2,57,0)
      <th>Formula</th>
"KRN",.84,7981019.001,2,58,0)
     </tr>
"KRN",.84,7981019.001,2,59,0)
    </thead>
"KRN",.84,7981019.001,2,60,0)
    <tbody>
"KRN",.84,7981019.001,2,61,0)
     <tr>
"KRN",.84,7981019.001,2,62,0)
      <td align="center">MELD</td>
"KRN",.84,7981019.001,2,63,0)
      <td class="aLeft"> (0.957*Ln(Serum Cr) + 0.378*Ln(Serum Bilirubin) 
"KRN",.84,7981019.001,2,64,0)
+ 1.120*Ln(INR) + 0.643) * 10<br/><br/>
"KRN",.84,7981019.001,2,65,0)
       <b>NOTES:</b>  Ln is 'natural log'<br/>
"KRN",.84,7981019.001,2,66,0)
      Lower limit of 1 for all variables with creatinine capped at 4
"KRN",.84,7981019.001,2,67,0)
      </td>
"KRN",.84,7981019.001,2,68,0)
     </tr>
"KRN",.84,7981019.001,2,69,0)
     <xsl:if 
"KRN",.84,7981019.001,2,70,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MELDNA']
"KRN",.84,7981019.001,2,71,0)
) > 0">
"KRN",.84,7981019.001,2,72,0)
    <tr>
"KRN",.84,7981019.001,2,73,0)
      <td align="center">MELD-Na</td>
"KRN",.84,7981019.001,2,74,0)
      <td class="aLeft">MELD calculation + 1.59 *(135 - Serum 
"KRN",.84,7981019.001,2,75,0)
Na)<br/><br/>
"KRN",.84,7981019.001,2,76,0)
       <b>NOTE:</b>  Mininum value for Serum Na is 120 mmol/L and the 
"KRN",.84,7981019.001,2,77,0)
maximum is 135 mmol/L      
"KRN",.84,7981019.001,2,78,0)
      </td>
"KRN",.84,7981019.001,2,79,0)
     </tr>
"KRN",.84,7981019.001,2,80,0)
     </xsl:if>
"KRN",.84,7981019.001,2,81,0)
    </tbody>
"KRN",.84,7981019.001,2,82,0)
   </table>
"KRN",.84,7981019.001,2,83,0)
  </div>
"KRN",.84,7981019.001,2,84,0)
 </div>
"KRN",.84,7981019.001,2,85,0)
</xsl:template>
"KRN",.84,7981019.001,2,86,0)
 
"KRN",.84,7981019.001,2,87,0)
 
"KRN",.84,7981019.001,2,88,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981019.001,2,89,0)
 
"KRN",.84,7981019.001,2,90,0)
<xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981019.001,2,91,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,92,0)
  <xsl:with-param name="title" select="'Test'"/>
"KRN",.84,7981019.001,2,93,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981019.001,2,94,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,95,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,96,0)
</xsl:template>
"KRN",.84,7981019.001,2,97,0)
 
"KRN",.84,7981019.001,2,98,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981019.001,2,99,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,100,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981019.001,2,101,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981019.001,2,102,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981019.001,2,103,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,104,0)
</xsl:template>
"KRN",.84,7981019.001,2,105,0)
 
"KRN",.84,7981019.001,2,106,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981019.001,2,107,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,108,0)
  <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981019.001,2,109,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981019.001,2,110,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981019.001,2,111,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,112,0)
</xsl:template>
"KRN",.84,7981019.001,2,113,0)
 
"KRN",.84,7981019.001,2,114,0)
<xsl:template match="COLUMN[@NAME='MELD']">
"KRN",.84,7981019.001,2,115,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,116,0)
  <xsl:with-param name="sort" select="''"/> 
"KRN",.84,7981019.001,2,117,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,118,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,119,0)
</xsl:template>
"KRN",.84,7981019.001,2,120,0)
 
"KRN",.84,7981019.001,2,121,0)
<xsl:template match="COLUMN[@NAME='MELDNA']">
"KRN",.84,7981019.001,2,122,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,123,0)
  <xsl:with-param name="title" select="'MELD-Na'"/>
"KRN",.84,7981019.001,2,124,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981019.001,2,125,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981019.001,2,126,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,127,0)
</xsl:template>
"KRN",.84,7981019.001,2,128,0)
 
"KRN",.84,7981019.001,2,129,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981019.001,2,130,0)
 
"KRN",.84,7981019.001,2,131,0)
<xsl:template match="PATIENT/MELDDATA">
"KRN",.84,7981019.001,2,132,0)
 <td class="aLeft">
"KRN",.84,7981019.001,2,133,0)
   <xsl:for-each select="TEST/TNAME">
"KRN",.84,7981019.001,2,134,0)
    <xsl:value-of select="."/><br/>
"KRN",.84,7981019.001,2,135,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,136,0)
 </td>
"KRN",.84,7981019.001,2,137,0)
 <td>
"KRN",.84,7981019.001,2,138,0)
   <xsl:for-each select="TEST/DATE">
"KRN",.84,7981019.001,2,139,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981019.001,2,140,0)
       <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.001,2,141,0)
       <xsl:with-param name="value" select="."/>
"KRN",.84,7981019.001,2,142,0)
       <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,143,0)
     </xsl:call-template><br/>
"KRN",.84,7981019.001,2,144,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,145,0)
 </td>
"KRN",.84,7981019.001,2,146,0)
 <td class="aRight">
"KRN",.84,7981019.001,2,147,0)
   <xsl:for-each select="TEST/RESULT">
"KRN",.84,7981019.001,2,148,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981019.001,2,149,0)
       <xsl:with-param name="value" select="."/>
"KRN",.84,7981019.001,2,150,0)
       <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,151,0)
     </xsl:call-template><br/>
"KRN",.84,7981019.001,2,152,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,153,0)
 </td>
"KRN",.84,7981019.001,2,154,0)
<xsl:if 
"KRN",.84,7981019.001,2,155,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MELD']) 
"KRN",.84,7981019.001,2,156,0)
> 0">
"KRN",.84,7981019.001,2,157,0)
 <td class="aRight">
"KRN",.84,7981019.001,2,158,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981019.001,2,159,0)
     <xsl:with-param name="value" select="MELD"/>
"KRN",.84,7981019.001,2,160,0)
     <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981019.001,2,161,0)
   </xsl:call-template>
"KRN",.84,7981019.001,2,162,0)
 </td>
"KRN",.84,7981019.001,2,163,0)
 </xsl:if>
"KRN",.84,7981019.001,2,164,0)
 <xsl:if 
"KRN",.84,7981019.001,2,165,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MELDNA']
"KRN",.84,7981019.001,2,166,0)
) > 0">
"KRN",.84,7981019.001,2,167,0)
  <td class="aRight">
"KRN",.84,7981019.001,2,168,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981019.001,2,169,0)
      <xsl:with-param name="value" select="MELDNA"/>
"KRN",.84,7981019.001,2,170,0)
      <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981019.001,2,171,0)
    </xsl:call-template>
"KRN",.84,7981019.001,2,172,0)
  </td>
"KRN",.84,7981019.001,2,173,0)
 </xsl:if>
"KRN",.84,7981019.001,2,174,0)
</xsl:template> 
"KRN",.84,7981019.001,2,175,0)
 
"KRN",.84,7981019.001,2,176,0)
</xsl:stylesheet>
"KRN",.84,7981019.002,-1)
0^9
"KRN",.84,7981019.002,0)
7981019.002^2^^CLINICAL CASE REGISTRIES^MELD Report by Range (CSV)
"KRN",.84,7981019.002,2,0)
^^71^71^3091006^
"KRN",.84,7981019.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981019.002,2,2,0)
 <xsl:stylesheet version="1.0"
"KRN",.84,7981019.002,2,3,0)
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981019.002,2,4,0)
 
"KRN",.84,7981019.002,2,5,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981019.002,2,6,0)
 
"KRN",.84,7981019.002,2,7,0)
<xsl:template match="/">
"KRN",.84,7981019.002,2,8,0)
 <xsl:text>MELD Score by Range</xsl:text>
"KRN",.84,7981019.002,2,9,0)
 <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981019.002,2,10,0)
</xsl:template>
"KRN",.84,7981019.002,2,11,0)
 
"KRN",.84,7981019.002,2,12,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981019.002,2,13,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,14,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981019.002,2,15,0)
 </xsl:call-template>
"KRN",.84,7981019.002,2,16,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,17,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981019.002,2,18,0)
 </xsl:call-template>
"KRN",.84,7981019.002,2,19,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,20,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981019.002,2,21,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.002,2,22,0)
 </xsl:call-template>
"KRN",.84,7981019.002,2,23,0)
 <xsl:for-each select="MELDDATA/TEST">
"KRN",.84,7981019.002,2,24,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,25,0)
    <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981019.002,2,26,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.002,2,27,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,28,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,29,0)
    <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981019.002,2,30,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,31,0)
 </xsl:for-each>
"KRN",.84,7981019.002,2,32,0)
 <xsl:if 
"KRN",.84,7981019.002,2,33,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MELD']) 
"KRN",.84,7981019.002,2,34,0)
> 0">
"KRN",.84,7981019.002,2,35,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,36,0)
    <xsl:with-param name="value" select="MELDDATA/MELD"/>
"KRN",.84,7981019.002,2,37,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,38,0)
 </xsl:if>
"KRN",.84,7981019.002,2,39,0)
 <xsl:if 
"KRN",.84,7981019.002,2,40,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MELDNA']
"KRN",.84,7981019.002,2,41,0)
) > 0">
"KRN",.84,7981019.002,2,42,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,43,0)
    <xsl:with-param name="value" select="MELDDATA/MELDNA"/>
"KRN",.84,7981019.002,2,44,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,45,0)
 </xsl:if>
"KRN",.84,7981019.002,2,46,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981019.002,2,47,0)
</xsl:template>
"KRN",.84,7981019.002,2,48,0)
 
"KRN",.84,7981019.002,2,49,0)
<xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981019.002,2,50,0)
 <xsl:for-each select="/REPORT/PATIENTS/PATIENT[1]/MELDDATA/TEST/TNAME">
"KRN",.84,7981019.002,2,51,0)
  <xsl:variable name="tname" select="."/>
"KRN",.84,7981019.002,2,52,0)
  <xsl:value-of select="concat($tname, ' Date', $DELIMITER)"/>
"KRN",.84,7981019.002,2,53,0)
  <xsl:value-of select="concat($tname, ' Result', $DELIMITER)"/>
"KRN",.84,7981019.002,2,54,0)
 </xsl:for-each>
"KRN",.84,7981019.002,2,55,0)
</xsl:template>
"KRN",.84,7981019.002,2,56,0)
 
"KRN",.84,7981019.002,2,57,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981019.002,2,58,0)
 <xsl:text></xsl:text>
"KRN",.84,7981019.002,2,59,0)
</xsl:template>
"KRN",.84,7981019.002,2,60,0)
 
"KRN",.84,7981019.002,2,61,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981019.002,2,62,0)
 <xsl:text></xsl:text>
"KRN",.84,7981019.002,2,63,0)
</xsl:template>
"KRN",.84,7981019.002,2,64,0)
 
"KRN",.84,7981019.002,2,65,0)
<xsl:template match="COLUMN[@NAME='MELDNA']">
"KRN",.84,7981019.002,2,66,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.002,2,67,0)
  <xsl:with-param name="title" select="'MELD-Na'"/>
"KRN",.84,7981019.002,2,68,0)
 </xsl:call-template>
"KRN",.84,7981019.002,2,69,0)
</xsl:template>
"KRN",.84,7981019.002,2,70,0)
 
"KRN",.84,7981019.002,2,71,0)
</xsl:stylesheet>
"KRN",.84,7981020.001,-1)
0^10
"KRN",.84,7981020.001,0)
7981020.001^2^^CLINICAL CASE REGISTRIES^Renal Function by Range (HTML)
"KRN",.84,7981020.001,2,0)
^^218^218^3100218^
"KRN",.84,7981020.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981020.001,2,2,0)
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
"KRN",.84,7981020.001,2,3,0)
version="1.0">
"KRN",.84,7981020.001,2,4,0)
 
"KRN",.84,7981020.001,2,5,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981020.001,2,6,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981020.001,2,7,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981020.001,2,8,0)
 
"KRN",.84,7981020.001,2,9,0)
<xsl:template match="/">
"KRN",.84,7981020.001,2,10,0)
 <html>
"KRN",.84,7981020.001,2,11,0)
  <head>
"KRN",.84,7981020.001,2,12,0)
   <title>Renal Function by Range</title>
"KRN",.84,7981020.001,2,13,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981020.001,2,14,0)
  </head>
"KRN",.84,7981020.001,2,15,0)
  <body>
"KRN",.84,7981020.001,2,16,0)
   <h1>Renal Function by Range</h1>
"KRN",.84,7981020.001,2,17,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981020.001,2,18,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981020.001,2,19,0)
    <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981020.001,2,20,0)
       Lab tests used to calculate Cockcroft-Gault and/or eGFR by MDRD 
"KRN",.84,7981020.001,2,21,0)
scores are identified by LOINC code. 
"KRN",.84,7981020.001,2,22,0)
       Your local lab ADPAC should be 
"KRN",.84,7981020.001,2,23,0)
contacted regarding errors in LOINC codes.
"KRN",.84,7981020.001,2,24,0)
    </div>
"KRN",.84,7981020.001,2,25,0)
    <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981020.001,2,26,0)
       *For this report, creatinine values &gt;12 mg/dL are assumed to be 
"KRN",.84,7981020.001,2,27,0)
erroneous and are ignored.  Height values on the CrCL report that are
"KRN",.84,7981020.001,2,28,0)
&lt;36 inches or &gt;96 inches are also assumed to be erroneous and are
"KRN",.84,7981020.001,2,29,0)
ignored.
"KRN",.84,7981020.001,2,30,0)
    </div>
"KRN",.84,7981020.001,2,31,0)
   </xsl:if>
"KRN",.84,7981020.001,2,32,0)
     <xsl:if 
"KRN",.84,7981020.001,2,33,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='EGFR']) 
"KRN",.84,7981020.001,2,34,0)
> 0">
"KRN",.84,7981020.001,2,35,0)
       <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981020.001,2,36,0)
         Please note eGFR results &gt;60 are imprecise.
"KRN",.84,7981020.001,2,37,0)
      </div>
"KRN",.84,7981020.001,2,38,0)
     <xsl:call-template name="RenalReportSummary"/>
"KRN",.84,7981020.001,2,39,0)
    </xsl:if>
"KRN",.84,7981020.001,2,40,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981020.001,2,41,0)
     <br />
"KRN",.84,7981020.001,2,42,0)
     <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981020.001,2,43,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981020.001,2,44,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981020.001,2,45,0)
     <div>
"KRN",.84,7981020.001,2,46,0)
       <xsl:call-template name="MakeScrollable">
"KRN",.84,7981020.001,2,47,0)
         <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981020.001,2,48,0)
       </xsl:call-template>
"KRN",.84,7981020.001,2,49,0)
       <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981020.001,2,50,0)
     </div>
"KRN",.84,7981020.001,2,51,0)
     <xsl:call-template name="ExplainFormula"/>
"KRN",.84,7981020.001,2,52,0)
   </xsl:if>
"KRN",.84,7981020.001,2,53,0)
  </body>
"KRN",.84,7981020.001,2,54,0)
 </html>
"KRN",.84,7981020.001,2,55,0)
</xsl:template>
"KRN",.84,7981020.001,2,56,0)
 
"KRN",.84,7981020.001,2,57,0)
<xsl:template name="RenalReportSummary">
"KRN",.84,7981020.001,2,58,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981020.001,2,59,0)
 <table cellpadding="5" cellspacing="0">
"KRN",.84,7981020.001,2,60,0)
  <thead>
"KRN",.84,7981020.001,2,61,0)
   <tr>
"KRN",.84,7981020.001,2,62,0)
    <th>Chronic Kidney Disease Stages</th>
"KRN",.84,7981020.001,2,63,0)
    <th>GFR</th>
"KRN",.84,7981020.001,2,64,0)
    <th>Number of Patients</th>
"KRN",.84,7981020.001,2,65,0)
   </tr>
"KRN",.84,7981020.001,2,66,0)
  </thead>
"KRN",.84,7981020.001,2,67,0)
  <tbody>
"KRN",.84,7981020.001,2,68,0)
    <xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981020.001,2,69,0)
    <tr>
"KRN",.84,7981020.001,2,70,0)
      <td class="aLeft"><xsl:value-of select="./DESC"/></td>
"KRN",.84,7981020.001,2,71,0)
      <td><xsl:value-of select="./VALUES"/><sup>2</sup></td>
"KRN",.84,7981020.001,2,72,0)
      <td><xsl:value-of select="./NP"/></td>
"KRN",.84,7981020.001,2,73,0)
    </tr>
"KRN",.84,7981020.001,2,74,0)
   </xsl:for-each>
"KRN",.84,7981020.001,2,75,0)
  </tbody>
"KRN",.84,7981020.001,2,76,0)
 </table>
"KRN",.84,7981020.001,2,77,0)
</xsl:template>
"KRN",.84,7981020.001,2,78,0)
 
"KRN",.84,7981020.001,2,79,0)
<xsl:template name="ExplainFormula">
"KRN",.84,7981020.001,2,80,0)
 <br/>
"KRN",.84,7981020.001,2,81,0)
 <div class="reportSummary">
"KRN",.84,7981020.001,2,82,0)
  <div style="float:left; width:50%">
"KRN",.84,7981020.001,2,83,0)
   <table cellpadding="3" cellspacing="0">
"KRN",.84,7981020.001,2,84,0)
    <caption>Calculation Formulas</caption>
"KRN",.84,7981020.001,2,85,0)
    <thead>
"KRN",.84,7981020.001,2,86,0)
     <tr>
"KRN",.84,7981020.001,2,87,0)
      <th width="60">Description</th>
"KRN",.84,7981020.001,2,88,0)
      <th>Formula</th>
"KRN",.84,7981020.001,2,89,0)
     </tr>
"KRN",.84,7981020.001,2,90,0)
    </thead>
"KRN",.84,7981020.001,2,91,0)
    <tbody>
"KRN",.84,7981020.001,2,92,0)
     <xsl:if 
"KRN",.84,7981020.001,2,93,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CRCL']) 
"KRN",.84,7981020.001,2,94,0)
> 0">
"KRN",.84,7981020.001,2,95,0)
     <tr>
"KRN",.84,7981020.001,2,96,0)
      <td align="center">Cockcroft-Gault</td>
"KRN",.84,7981020.001,2,97,0)
      <td class="aLeft"> (140-age) * ideal weight in kg (*.85 if 
"KRN",.84,7981020.001,2,98,0)
female)/(Cr*72)<br/><br/>
"KRN",.84,7981020.001,2,99,0)
       Ideal weight in kg calculated as:<br />
"KRN",.84,7981020.001,2,100,0)
       male = 51.65+(1.85*(height-60))<br/>
"KRN",.84,7981020.001,2,101,0)
       female = 48.67+(1.65*(height-60))
"KRN",.84,7981020.001,2,102,0)
      </td>
"KRN",.84,7981020.001,2,103,0)
     </tr>
"KRN",.84,7981020.001,2,104,0)
     </xsl:if>
"KRN",.84,7981020.001,2,105,0)
     <xsl:if 
"KRN",.84,7981020.001,2,106,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='EGFR']) 
"KRN",.84,7981020.001,2,107,0)
> 0">
"KRN",.84,7981020.001,2,108,0)
      <tr>
"KRN",.84,7981020.001,2,109,0)
       <td align="center">eGFR by MDRD</td>
"KRN",.84,7981020.001,2,110,0)
       <td class="aLeft"> (175 * (Cr<sup>-1.154</sup>) * 
"KRN",.84,7981020.001,2,111,0)
(age<sup>-.203</sup>) *1.212 (if Black) * .742 (if female)</td>
"KRN",.84,7981020.001,2,112,0)
      </tr>
"KRN",.84,7981020.001,2,113,0)
     </xsl:if>
"KRN",.84,7981020.001,2,114,0)
    </tbody>
"KRN",.84,7981020.001,2,115,0)
   </table>
"KRN",.84,7981020.001,2,116,0)
  </div>
"KRN",.84,7981020.001,2,117,0)
 </div>
"KRN",.84,7981020.001,2,118,0)
</xsl:template>
"KRN",.84,7981020.001,2,119,0)
 
"KRN",.84,7981020.001,2,120,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981020.001,2,121,0)
 
"KRN",.84,7981020.001,2,122,0)
<xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981020.001,2,123,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,124,0)
  <xsl:with-param name="title" select="'Test'"/>
"KRN",.84,7981020.001,2,125,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,126,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981020.001,2,127,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,128,0)
</xsl:template>
"KRN",.84,7981020.001,2,129,0)
 
"KRN",.84,7981020.001,2,130,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981020.001,2,131,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,132,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981020.001,2,133,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,134,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981020.001,2,135,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,136,0)
</xsl:template>
"KRN",.84,7981020.001,2,137,0)
 
"KRN",.84,7981020.001,2,138,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981020.001,2,139,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,140,0)
  <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981020.001,2,141,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,142,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981020.001,2,143,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,144,0)
</xsl:template>
"KRN",.84,7981020.001,2,145,0)
 
"KRN",.84,7981020.001,2,146,0)
<xsl:template match="COLUMN[@NAME='CRCL']">
"KRN",.84,7981020.001,2,147,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,148,0)
  <xsl:with-param name="title" select="'CrCL'"/>
"KRN",.84,7981020.001,2,149,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,150,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981020.001,2,151,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,152,0)
</xsl:template>
"KRN",.84,7981020.001,2,153,0)
 
"KRN",.84,7981020.001,2,154,0)
<xsl:template match="COLUMN[@NAME='EGFR']">
"KRN",.84,7981020.001,2,155,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,156,0)
  <xsl:with-param name="title" select="'eGFR'"/>
"KRN",.84,7981020.001,2,157,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,158,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981020.001,2,159,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,160,0)
</xsl:template>
"KRN",.84,7981020.001,2,161,0)
 
"KRN",.84,7981020.001,2,162,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981020.001,2,163,0)
 
"KRN",.84,7981020.001,2,164,0)
<xsl:template match="PATIENT/RNLDATA">
"KRN",.84,7981020.001,2,165,0)
 <xsl:variable name="CRCL" 
"KRN",.84,7981020.001,2,166,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CRCL']
"KRN",.84,7981020.001,2,167,0)
)"/>
"KRN",.84,7981020.001,2,168,0)
 <td class="aLeft">
"KRN",.84,7981020.001,2,169,0)
   <xsl:text>Cr</xsl:text>
"KRN",.84,7981020.001,2,170,0)
   <xsl:if test="$CRCL>0">
"KRN",.84,7981020.001,2,171,0)
    <br/><xsl:text>Height</xsl:text>
"KRN",.84,7981020.001,2,172,0)
   </xsl:if>
"KRN",.84,7981020.001,2,173,0)
 </td>
"KRN",.84,7981020.001,2,174,0)
 <td>
"KRN",.84,7981020.001,2,175,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,176,0)
     <xsl:with-param name="value" select="TEST/DATE"/>
"KRN",.84,7981020.001,2,177,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.001,2,178,0)
   </xsl:call-template>
"KRN",.84,7981020.001,2,179,0)
   <xsl:if test="$CRCL>0">
"KRN",.84,7981020.001,2,180,0)
     <br/>
"KRN",.84,7981020.001,2,181,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,182,0)
       <xsl:with-param name="value" select="HEIGHT/DATE"/>
"KRN",.84,7981020.001,2,183,0)
       <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.001,2,184,0)
     </xsl:call-template>
"KRN",.84,7981020.001,2,185,0)
   </xsl:if>
"KRN",.84,7981020.001,2,186,0)
 </td>
"KRN",.84,7981020.001,2,187,0)
 <td class="aRight">
"KRN",.84,7981020.001,2,188,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,189,0)
     <xsl:with-param name="value" select="TEST/RESULT"/>
"KRN",.84,7981020.001,2,190,0)
   </xsl:call-template>
"KRN",.84,7981020.001,2,191,0)
   <xsl:if test="$CRCL>0">
"KRN",.84,7981020.001,2,192,0)
     <br/>
"KRN",.84,7981020.001,2,193,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,194,0)
       <xsl:with-param name="value" select="HEIGHT/RESULT"/>
"KRN",.84,7981020.001,2,195,0)
     </xsl:call-template>
"KRN",.84,7981020.001,2,196,0)
   </xsl:if>
"KRN",.84,7981020.001,2,197,0)
 </td>
"KRN",.84,7981020.001,2,198,0)
 <xsl:if test="$CRCL>0">
"KRN",.84,7981020.001,2,199,0)
  <td class="aRight">
"KRN",.84,7981020.001,2,200,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,201,0)
      <xsl:with-param name="value" select="CRCL"/>
"KRN",.84,7981020.001,2,202,0)
      <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981020.001,2,203,0)
    </xsl:call-template>
"KRN",.84,7981020.001,2,204,0)
  </td>
"KRN",.84,7981020.001,2,205,0)
 </xsl:if>
"KRN",.84,7981020.001,2,206,0)
 <xsl:if 
"KRN",.84,7981020.001,2,207,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='EGFR'])>
"KRN",.84,7981020.001,2,208,0)
0">
"KRN",.84,7981020.001,2,209,0)
   <td class="aRight">
"KRN",.84,7981020.001,2,210,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,211,0)
       <xsl:with-param name="value" select="EGFR"/>
"KRN",.84,7981020.001,2,212,0)
       <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981020.001,2,213,0)
     </xsl:call-template>
"KRN",.84,7981020.001,2,214,0)
   </td>
"KRN",.84,7981020.001,2,215,0)
 </xsl:if>
"KRN",.84,7981020.001,2,216,0)
</xsl:template>
"KRN",.84,7981020.001,2,217,0)
 
"KRN",.84,7981020.001,2,218,0)
</xsl:stylesheet>
"KRN",.84,7981020.001,3,0)
^.845
"KRN",.84,7981020.002,-1)
0^11
"KRN",.84,7981020.002,0)
7981020.002^2^^CLINICAL CASE REGISTRIES^Renal Function by Range (CSV)
"KRN",.84,7981020.002,2,0)
^^117^117^3100216^
"KRN",.84,7981020.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981020.002,2,2,0)
 <xsl:stylesheet version="1.0"
"KRN",.84,7981020.002,2,3,0)
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981020.002,2,4,0)
 
"KRN",.84,7981020.002,2,5,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981020.002,2,6,0)
 
"KRN",.84,7981020.002,2,7,0)
<xsl:variable name="CRCLUSED" 
"KRN",.84,7981020.002,2,8,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CRCL']
"KRN",.84,7981020.002,2,9,0)
)"/>
"KRN",.84,7981020.002,2,10,0)
 
"KRN",.84,7981020.002,2,11,0)
<xsl:template match="/">
"KRN",.84,7981020.002,2,12,0)
  <xsl:if 
"KRN",.84,7981020.002,2,13,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='EGFR']) 
"KRN",.84,7981020.002,2,14,0)
> 0">
"KRN",.84,7981020.002,2,15,0)
    <xsl:call-template name="RenalReportSummary"/>
"KRN",.84,7981020.002,2,16,0)
  </xsl:if>
"KRN",.84,7981020.002,2,17,0)
  <xsl:text>Renal Function by Range</xsl:text>
"KRN",.84,7981020.002,2,18,0)
  <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981020.002,2,19,0)
</xsl:template>
"KRN",.84,7981020.002,2,20,0)
 
"KRN",.84,7981020.002,2,21,0)
<xsl:template name="RenalReportSummary">
"KRN",.84,7981020.002,2,22,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981020.002,2,23,0)
 <xsl:text>Renal Function by Range (Summary)</xsl:text>
"KRN",.84,7981020.002,2,24,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,25,0)
 <xsl:text>Chronic Kidney Disease Stages</xsl:text>
"KRN",.84,7981020.002,2,26,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,27,0)
 <xsl:text>GFR</xsl:text>
"KRN",.84,7981020.002,2,28,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,29,0)
 <xsl:text>Number of Patients</xsl:text>
"KRN",.84,7981020.002,2,30,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,31,0)
 <xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981020.002,2,32,0)
   <xsl:value-of select="./DESC"/>
"KRN",.84,7981020.002,2,33,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,34,0)
   <xsl:value-of select="./VALUES"/>
"KRN",.84,7981020.002,2,35,0)
   <xsl:text> sq</xsl:text>
"KRN",.84,7981020.002,2,36,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,37,0)
   <xsl:value-of select="./NP"/>
"KRN",.84,7981020.002,2,38,0)
   <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,39,0)
 </xsl:for-each>
"KRN",.84,7981020.002,2,40,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981020.002,2,41,0)
</xsl:template>
"KRN",.84,7981020.002,2,42,0)
 
"KRN",.84,7981020.002,2,43,0)
 <xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981020.002,2,44,0)
  <xsl:value-of select="''"/>
"KRN",.84,7981020.002,2,45,0)
 </xsl:template>
"KRN",.84,7981020.002,2,46,0)
 
"KRN",.84,7981020.002,2,47,0)
 <xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981020.002,2,48,0)
  <xsl:value-of select="'Cr Date'"/>
"KRN",.84,7981020.002,2,49,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,50,0)
  <xsl:value-of select="'Cr'"/>
"KRN",.84,7981020.002,2,51,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,52,0)
 </xsl:template>
"KRN",.84,7981020.002,2,53,0)
 
"KRN",.84,7981020.002,2,54,0)
 <xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981020.002,2,55,0)
  <xsl:if test="$CRCLUSED > 0">
"KRN",.84,7981020.002,2,56,0)
    <xsl:value-of select="'Height Date'"/>
"KRN",.84,7981020.002,2,57,0)
    <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,58,0)
    <xsl:value-of select="'Height'"/>
"KRN",.84,7981020.002,2,59,0)
    <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,60,0)
  </xsl:if>
"KRN",.84,7981020.002,2,61,0)
 </xsl:template>
"KRN",.84,7981020.002,2,62,0)
 
"KRN",.84,7981020.002,2,63,0)
<xsl:template match="COLUMN[@NAME='CRCL']">
"KRN",.84,7981020.002,2,64,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.002,2,65,0)
  <xsl:with-param name="title" select="'CrCL'"/>
"KRN",.84,7981020.002,2,66,0)
 </xsl:call-template>
"KRN",.84,7981020.002,2,67,0)
</xsl:template>
"KRN",.84,7981020.002,2,68,0)
 
"KRN",.84,7981020.002,2,69,0)
<xsl:template match="COLUMN[@NAME='EGFR']">
"KRN",.84,7981020.002,2,70,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.002,2,71,0)
  <xsl:with-param name="title" select="'eGFR'"/>
"KRN",.84,7981020.002,2,72,0)
 </xsl:call-template>
"KRN",.84,7981020.002,2,73,0)
</xsl:template>
"KRN",.84,7981020.002,2,74,0)
 
"KRN",.84,7981020.002,2,75,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981020.002,2,76,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,77,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981020.002,2,78,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,79,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,80,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981020.002,2,81,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,82,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,83,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981020.002,2,84,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,85,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,86,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,87,0)
   <xsl:with-param name="value" select="RNLDATA/TEST/DATE"/>
"KRN",.84,7981020.002,2,88,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,89,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,90,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,91,0)
    <xsl:with-param name="value" select="RNLDATA/TEST/RESULT"/>
"KRN",.84,7981020.002,2,92,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,93,0)
  <xsl:if test="$CRCLUSED > 0">
"KRN",.84,7981020.002,2,94,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,95,0)
     <xsl:with-param name="value" select="RNLDATA/HEIGHT/DATE"/>
"KRN",.84,7981020.002,2,96,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,97,0)
   </xsl:call-template>
"KRN",.84,7981020.002,2,98,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,99,0)
     <xsl:with-param name="value" select="RNLDATA/HEIGHT/RESULT"/>
"KRN",.84,7981020.002,2,100,0)
   </xsl:call-template>
"KRN",.84,7981020.002,2,101,0)
  </xsl:if>
"KRN",.84,7981020.002,2,102,0)
  <xsl:if test="$CRCLUSED > 0">
"KRN",.84,7981020.002,2,103,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,104,0)
     <xsl:with-param name="value" select="RNLDATA/CRCL"/>
"KRN",.84,7981020.002,2,105,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,106,0)
  </xsl:if>
"KRN",.84,7981020.002,2,107,0)
  <xsl:if 
"KRN",.84,7981020.002,2,108,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='EGFR']) 
"KRN",.84,7981020.002,2,109,0)
> 0">
"KRN",.84,7981020.002,2,110,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,111,0)
     <xsl:with-param name="value" select="RNLDATA/EGFR"/>
"KRN",.84,7981020.002,2,112,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,113,0)
  </xsl:if>
"KRN",.84,7981020.002,2,114,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,115,0)
 </xsl:template>
"KRN",.84,7981020.002,2,116,0)
 
"KRN",.84,7981020.002,2,117,0)
</xsl:stylesheet>
"KRN",.84,7981998.001,-1)
0^12
"KRN",.84,7981998.001,0)
7981998.001^2^^CLINICAL CASE REGISTRIES^CSS and Scripts
"KRN",.84,7981998.001,2,0)
^.844^149^149^3100209^^^^
"KRN",.84,7981998.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981998.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981998.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981998.001,2,4,0)
>
"KRN",.84,7981998.001,2,5,0)
 
"KRN",.84,7981998.001,2,6,0)
<xsl:template name="StyleSheet">
"KRN",.84,7981998.001,2,7,0)
 
"KRN",.84,7981998.001,2,8,0)
 <script type="text/javascript">
"KRN",.84,7981998.001,2,9,0)
  function windowHeight()
"KRN",.84,7981998.001,2,10,0)
  {
"KRN",.84,7981998.001,2,11,0)
   var wh = 600;
"KRN",.84,7981998.001,2,12,0)
   if (parseInt(navigator.appVersion)>3) {
"KRN",.84,7981998.001,2,13,0)
    if (navigator.appName=="Netscape") {
"KRN",.84,7981998.001,2,14,0)
     wh = window.innerHeight; 
"KRN",.84,7981998.001,2,15,0)
    } 
"KRN",.84,7981998.001,2,16,0)
    if (navigator.appName.indexOf("Microsoft")!=-1) {
"KRN",.84,7981998.001,2,17,0)
     wh = document.body.offsetHeight;
"KRN",.84,7981998.001,2,18,0)
    }
"KRN",.84,7981998.001,2,19,0)
   }
"KRN",.84,7981998.001,2,20,0)
   return wh;
"KRN",.84,7981998.001,2,21,0)
  }
"KRN",.84,7981998.001,2,22,0)
 </script>
"KRN",.84,7981998.001,2,23,0)
 
"KRN",.84,7981998.001,2,24,0)
 <style type="text/css">  /* Default Style Sheet */
"KRN",.84,7981998.001,2,25,0)
 
"KRN",.84,7981998.001,2,26,0)
  body  { text-align: center }
"KRN",.84,7981998.001,2,27,0)
  table { border: 1px solid gray }
"KRN",.84,7981998.001,2,28,0)
  th    { border: 1px solid gray }
"KRN",.84,7981998.001,2,29,0)
  thead { background-color: #E0E0E0 }
"KRN",.84,7981998.001,2,30,0)
  tfoot { background-color: #E0E0E0; font-size: 0px; }
"KRN",.84,7981998.001,2,31,0)
 
"KRN",.84,7981998.001,2,32,0)
  td {
"KRN",.84,7981998.001,2,33,0)
   border: 1px solid gray;
"KRN",.84,7981998.001,2,34,0)
   text-align: center;
"KRN",.84,7981998.001,2,35,0)
   vertical-align: middle;
"KRN",.84,7981998.001,2,36,0)
  }
"KRN",.84,7981998.001,2,37,0)
 
"KRN",.84,7981998.001,2,38,0)
  table caption     { text-align: left; font-weight: bold; } 
"KRN",.84,7981998.001,2,39,0)
  table td.aBottom  { vertical-align: text-bottom }
"KRN",.84,7981998.001,2,40,0)
  table td.aLeft    { text-align: left }
"KRN",.84,7981998.001,2,41,0)
  table td.aRight   { text-align: right } 
"KRN",.84,7981998.001,2,42,0)
  table td.aTopLeft { vertical-align: top; text-align: left }
"KRN",.84,7981998.001,2,43,0)
  table td.aTop     { vertical-align: top }
"KRN",.84,7981998.001,2,44,0)
  table td.selectionRules { text-align: left; white-space: nowrap }
"KRN",.84,7981998.001,2,45,0)
 
"KRN",.84,7981998.001,2,46,0)
  div.reportHeader {
"KRN",.84,7981998.001,2,47,0)
   clear: both;
"KRN",.84,7981998.001,2,48,0)
   width: 100%;
"KRN",.84,7981998.001,2,49,0)
   margin-bottom: 1%;
"KRN",.84,7981998.001,2,50,0)
  }
"KRN",.84,7981998.001,2,51,0)
 
"KRN",.84,7981998.001,2,52,0)
  div.reportHeader table { border: 0 }
"KRN",.84,7981998.001,2,53,0)
  div.reportHeader th { width: 8em }
"KRN",.84,7981998.001,2,54,0)
 
"KRN",.84,7981998.001,2,55,0)
  div.reportHeader td, div.reportHeader th {
"KRN",.84,7981998.001,2,56,0)
   border: 0;
"KRN",.84,7981998.001,2,57,0)
   text-align: left;
"KRN",.84,7981998.001,2,58,0)
   vertical-align:text-top;
"KRN",.84,7981998.001,2,59,0)
  }
"KRN",.84,7981998.001,2,60,0)
 
"KRN",.84,7981998.001,2,61,0)
  div.simpleContainer {
"KRN",.84,7981998.001,2,62,0)
   width:  100%;
"KRN",.84,7981998.001,2,63,0)
   border-top:    1px solid gray;
"KRN",.84,7981998.001,2,64,0)
   border-bottom: 1px solid gray;
"KRN",.84,7981998.001,2,65,0)
   clear: both;
"KRN",.84,7981998.001,2,66,0)
   overflow: visible;
"KRN",.84,7981998.001,2,67,0)
  }
"KRN",.84,7981998.001,2,68,0)
 
"KRN",.84,7981998.001,2,69,0)
  div.scrollableContainer {
"KRN",.84,7981998.001,2,70,0)
   width:  100%;
"KRN",.84,7981998.001,2,71,0)
   height: expression(windowHeight()-200);
"KRN",.84,7981998.001,2,72,0)
   border-top:    1px solid gray;
"KRN",.84,7981998.001,2,73,0)
   border-bottom: 1px solid gray;
"KRN",.84,7981998.001,2,74,0)
   clear: both;
"KRN",.84,7981998.001,2,75,0)
   overflow: auto;
"KRN",.84,7981998.001,2,76,0)
 
"KRN",.84,7981998.001,2,77,0)
   /* Non-standard (IE 5.5+ only) */
"KRN",.84,7981998.001,2,78,0)
   scrollbar-3dlight-color:    #606060;
"KRN",.84,7981998.001,2,79,0)
   scrollbar-arrow-color:      #000000;
"KRN",.84,7981998.001,2,80,0)
   scrollbar-base-color:       #C0C0C0;
"KRN",.84,7981998.001,2,81,0)
   scrollbar-darkshadow-color: #C0C0C0;
"KRN",.84,7981998.001,2,82,0)
   scrollbar-face-color:       #C0C0C0;
"KRN",.84,7981998.001,2,83,0)
   scrollbar-highlight-color:  #C0C0C0;
"KRN",.84,7981998.001,2,84,0)
   scrollbar-shadow-color:     #606060;
"KRN",.84,7981998.001,2,85,0)
  }
"KRN",.84,7981998.001,2,86,0)
 
"KRN",.84,7981998.001,2,87,0)
  table.dataGrid {
"KRN",.84,7981998.001,2,88,0)
   width: 100%;
"KRN",.84,7981998.001,2,89,0)
   border-top:    0px;
"KRN",.84,7981998.001,2,90,0)
   border-bottom: 0px;
"KRN",.84,7981998.001,2,91,0)
  }
"KRN",.84,7981998.001,2,92,0)
 
"KRN",.84,7981998.001,2,93,0)
  /* Fixes the table header in place */
"KRN",.84,7981998.001,2,94,0)
  table.dataGrid thead th, table.dataGrid thead td {
"KRN",.84,7981998.001,2,95,0)
   position: relative;
"KRN",.84,7981998.001,2,96,0)
   top: expression(parentNode.parentNode.parentNode.parentNode.scrollTop);
"KRN",.84,7981998.001,2,97,0)
  }
"KRN",.84,7981998.001,2,98,0)
 
"KRN",.84,7981998.001,2,99,0)
  table.dataGrid td { vertical-align: top }
"KRN",.84,7981998.001,2,100,0)
  table.dataGrid tfoot td { border-top: 0 }
"KRN",.84,7981998.001,2,101,0)
 
"KRN",.84,7981998.001,2,102,0)
  div.reportSummary {
"KRN",.84,7981998.001,2,103,0)
   clear: both;
"KRN",.84,7981998.001,2,104,0)
   width: 100%;
"KRN",.84,7981998.001,2,105,0)
   page-break-before: always;
"KRN",.84,7981998.001,2,106,0)
  }
"KRN",.84,7981998.001,2,107,0)
 
"KRN",.84,7981998.001,2,108,0)
  div.reportSummary table {
"KRN",.84,7981998.001,2,109,0)
   margin-top: 1ex;
"KRN",.84,7981998.001,2,110,0)
   width: 100%;
"KRN",.84,7981998.001,2,111,0)
  }
"KRN",.84,7981998.001,2,112,0)
 
"KRN",.84,7981998.001,2,113,0)
  /*--- Mozilla (Netscape) specific ---*/
"KRN",.84,7981998.001,2,114,0)
 
"KRN",.84,7981998.001,2,115,0)
  /* Any tbody which is a child of table element */
"KRN",.84,7981998.001,2,116,0)
  table.dataGrid > tbody {
"KRN",.84,7981998.001,2,117,0)
   overflow: auto;
"KRN",.84,7981998.001,2,118,0)
   height: 70%;
"KRN",.84,7981998.001,2,119,0)
  }
"KRN",.84,7981998.001,2,120,0)
 
"KRN",.84,7981998.001,2,121,0)
  /* Prevent scrollbar from hiding cell content */
"KRN",.84,7981998.001,2,122,0)
  td:last-child { padding-right: 18px; }
"KRN",.84,7981998.001,2,123,0)
 
"KRN",.84,7981998.001,2,124,0)
 </style>
"KRN",.84,7981998.001,2,125,0)
 
"KRN",.84,7981998.001,2,126,0)
 <style type="text/css" media="print">  /* Print Style Sheet */
"KRN",.84,7981998.001,2,127,0)
 
"KRN",.84,7981998.001,2,128,0)
  div.scrollableContainer {
"KRN",.84,7981998.001,2,129,0)
   overflow: visible;
"KRN",.84,7981998.001,2,130,0)
   border: 0px;
"KRN",.84,7981998.001,2,131,0)
  }
"KRN",.84,7981998.001,2,132,0)
 
"KRN",.84,7981998.001,2,133,0)
  a { text-decoration: none; color: black }
"KRN",.84,7981998.001,2,134,0)
  table.dataGrid { border: solid gray 1px }
"KRN",.84,7981998.001,2,135,0)
  tfoot { display: table-footer-group }
"KRN",.84,7981998.001,2,136,0)
  thead { display: table-header-group }
"KRN",.84,7981998.001,2,137,0)
 
"KRN",.84,7981998.001,2,138,0)
  table.dataGrid thead th, table.dataGrid thead td {
"KRN",.84,7981998.001,2,139,0)
   position: static;
"KRN",.84,7981998.001,2,140,0)
  }
"KRN",.84,7981998.001,2,141,0)
 
"KRN",.84,7981998.001,2,142,0)
  /*--- Mozilla (Netscape) specific ---*/
"KRN",.84,7981998.001,2,143,0)
  table.dataGrid > tbody { overflow: visible }
"KRN",.84,7981998.001,2,144,0)
 
"KRN",.84,7981998.001,2,145,0)
 </style>
"KRN",.84,7981998.001,2,146,0)
 
"KRN",.84,7981998.001,2,147,0)
</xsl:template>
"KRN",.84,7981998.001,2,148,0)
 
"KRN",.84,7981998.001,2,149,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,-1)
0^13
"KRN",.84,7981999.001,0)
7981999.001^2^^CLINICAL CASE REGISTRIES^Common XSL templates (HTML)
"KRN",.84,7981999.001,2,0)
^^766^766^3100216^
"KRN",.84,7981999.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981999.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981999.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981999.001,2,4,0)
 
"KRN",.84,7981999.001,2,5,0)
<xsl:param name="REMOVE_URLS"/>
"KRN",.84,7981999.001,2,6,0)
 
"KRN",.84,7981999.001,2,7,0)
<xsl:output method="html" indent="yes" encoding="iso-8859-1"/>
"KRN",.84,7981999.001,2,8,0)
<xsl:strip-space elements="*"/>
"KRN",.84,7981999.001,2,9,0)
 
"KRN",.84,7981999.001,2,10,0)
<xsl:template match="REPORT/HEADER//*"></xsl:template>
"KRN",.84,7981999.001,2,11,0)
<xsl:template match="REPORT/PARAMETERS//*"></xsl:template>
"KRN",.84,7981999.001,2,12,0)
 
"KRN",.84,7981999.001,2,13,0)
<xsl:key name="TableDefs" match="/REPORT/HEADER/TBLDEF" use="@NAME"/>
"KRN",.84,7981999.001,2,14,0)
 
"KRN",.84,7981999.001,2,15,0)
<!--
"KRN",.84,7981999.001,2,16,0)
=========================================================================
"KRN",.84,7981999.001,2,17,0)
                                UTILITIES
"KRN",.84,7981999.001,2,18,0)
=========================================================================
"KRN",.84,7981999.001,2,19,0)
-->
"KRN",.84,7981999.001,2,20,0)
 
"KRN",.84,7981999.001,2,21,0)
<!-- Formats the value of table cell -->
"KRN",.84,7981999.001,2,22,0)
 
"KRN",.84,7981999.001,2,23,0)
<xsl:template name="CellValue">
"KRN",.84,7981999.001,2,24,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,25,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,26,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,27,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,28,0)
  <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,29,0)
  <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,30,0)
   <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,31,0)
    <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,32,0)
   </xsl:call-template>
"KRN",.84,7981999.001,2,33,0)
  </xsl:when>
"KRN",.84,7981999.001,2,34,0)
  <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,35,0)
   <xsl:choose>
"KRN",.84,7981999.001,2,36,0)
    <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,37,0)
    <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,38,0)
   </xsl:choose>
"KRN",.84,7981999.001,2,39,0)
  </xsl:when>
"KRN",.84,7981999.001,2,40,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,41,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,42,0)
</xsl:template>
"KRN",.84,7981999.001,2,43,0)
 
"KRN",.84,7981999.001,2,44,0)
<!-- Converts the FileMan date/time in printable format -->
"KRN",.84,7981999.001,2,45,0)
 
"KRN",.84,7981999.001,2,46,0)
<xsl:template name="DateTime">
"KRN",.84,7981999.001,2,47,0)
 <xsl:param name="dt" select="."/>
"KRN",.84,7981999.001,2,48,0)
 <!--
"KRN",.84,7981999.001,2,49,0)
     Date (YYYMMDD)
"KRN",.84,7981999.001,2,50,0)
 -->
"KRN",.84,7981999.001,2,51,0)
 <xsl:variable name="date"
"KRN",.84,7981999.001,2,52,0)
               select="substring-before(concat($dt,'.'),'.')"/>
"KRN",.84,7981999.001,2,53,0)
 <xsl:if test="$date!=''">
"KRN",.84,7981999.001,2,54,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,55,0)
   <xsl:when test="string-length($date)=7">
"KRN",.84,7981999.001,2,56,0)
    <xsl:variable name="year"
"KRN",.84,7981999.001,2,57,0)
                  select="string(number(substring($date,1,3))+1700)"/>
"KRN",.84,7981999.001,2,58,0)
    <xsl:variable name="month" select="substring($date,4,2)"/>
"KRN",.84,7981999.001,2,59,0)
    <xsl:variable name="day" select="substring($date,6,2)"/>
"KRN",.84,7981999.001,2,60,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,61,0)
     <xsl:when test="$day!='00'">
"KRN",.84,7981999.001,2,62,0)
      <xsl:value-of select="concat($month,'/',$day,'/',$year)"/>
"KRN",.84,7981999.001,2,63,0)
     </xsl:when>
"KRN",.84,7981999.001,2,64,0)
     <xsl:when test="$month!='00'">
"KRN",.84,7981999.001,2,65,0)
      <xsl:value-of select="concat($month,'/',$year)"/>
"KRN",.84,7981999.001,2,66,0)
     </xsl:when>
"KRN",.84,7981999.001,2,67,0)
     <xsl:otherwise><xsl:value-of select="$year"/></xsl:otherwise>
"KRN",.84,7981999.001,2,68,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,69,0)
   </xsl:when>
"KRN",.84,7981999.001,2,70,0)
   <xsl:otherwise>{error}</xsl:otherwise>
"KRN",.84,7981999.001,2,71,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,72,0)
  <!--
"KRN",.84,7981999.001,2,73,0)
      Time (HHMMSS)
"KRN",.84,7981999.001,2,74,0)
  -->
"KRN",.84,7981999.001,2,75,0)
  <xsl:variable name="time"
"KRN",.84,7981999.001,2,76,0)
                select="concat(substring-after($dt,'.'),'000000')"/>
"KRN",.84,7981999.001,2,77,0)
  <xsl:if test="number($time)>0">
"KRN",.84,7981999.001,2,78,0)
   <xsl:text>@</xsl:text>
"KRN",.84,7981999.001,2,79,0)
   <xsl:value-of select="substring($time,1,2)"/>
"KRN",.84,7981999.001,2,80,0)
   <xsl:text>:</xsl:text>
"KRN",.84,7981999.001,2,81,0)
   <xsl:value-of select="substring($time,3,2)"/>
"KRN",.84,7981999.001,2,82,0)
  </xsl:if>
"KRN",.84,7981999.001,2,83,0)
 </xsl:if>
"KRN",.84,7981999.001,2,84,0)
</xsl:template>
"KRN",.84,7981999.001,2,85,0)
 
"KRN",.84,7981999.001,2,86,0)
<xsl:template name="HUPatientsHeader">
"KRN",.84,7981999.001,2,87,0)
 <xsl:value-of select="/REPORT/PARAMETERS/MAXUTNUM"/>
"KRN",.84,7981999.001,2,88,0)
 <xsl:text> patient(s) with highest utilization</xsl:text>
"KRN",.84,7981999.001,2,89,0)
</xsl:template>
"KRN",.84,7981999.001,2,90,0)
 
"KRN",.84,7981999.001,2,91,0)
<!-- Conditional hyperlink -->
"KRN",.84,7981999.001,2,92,0)
 
"KRN",.84,7981999.001,2,93,0)
<xsl:template name="HyperLink">
"KRN",.84,7981999.001,2,94,0)
 <xsl:param name="href" select="''"/>
"KRN",.84,7981999.001,2,95,0)
 <xsl:param name="keep" select="0"/>
"KRN",.84,7981999.001,2,96,0)
 <xsl:param name="name" select="''"/>
"KRN",.84,7981999.001,2,97,0)
 <xsl:param name="text" select="."/>
"KRN",.84,7981999.001,2,98,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,99,0)
  <xsl:when test="$text=''"><xsl:text>&#160;</xsl:text></xsl:when>
"KRN",.84,7981999.001,2,100,0)
  <xsl:when test="boolean($keep) or not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,101,0)
   <a>
"KRN",.84,7981999.001,2,102,0)
    <xsl:if test="$name!=''">
"KRN",.84,7981999.001,2,103,0)
     <xsl:attribute name="name">
"KRN",.84,7981999.001,2,104,0)
      <xsl:value-of select="$name"/>
"KRN",.84,7981999.001,2,105,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,106,0)
    </xsl:if>
"KRN",.84,7981999.001,2,107,0)
    <xsl:if test="$href!=''">
"KRN",.84,7981999.001,2,108,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,109,0)
      <xsl:value-of select="$href"/>
"KRN",.84,7981999.001,2,110,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,111,0)
    </xsl:if>
"KRN",.84,7981999.001,2,112,0)
    <xsl:value-of select="$text"/>
"KRN",.84,7981999.001,2,113,0)
   </a>
"KRN",.84,7981999.001,2,114,0)
  </xsl:when>
"KRN",.84,7981999.001,2,115,0)
  <xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
"KRN",.84,7981999.001,2,116,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,117,0)
</xsl:template>
"KRN",.84,7981999.001,2,118,0)
 
"KRN",.84,7981999.001,2,119,0)
<!-- Makes the parent container scrollable -->
"KRN",.84,7981999.001,2,120,0)
 
"KRN",.84,7981999.001,2,121,0)
<xsl:template name="MakeScrollable">
"KRN",.84,7981999.001,2,122,0)
 <xsl:param name="condition" select="0"/>
"KRN",.84,7981999.001,2,123,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,124,0)
  <xsl:when test="$condition">
"KRN",.84,7981999.001,2,125,0)
   <xsl:attribute name="class">scrollableContainer</xsl:attribute>
"KRN",.84,7981999.001,2,126,0)
  </xsl:when>
"KRN",.84,7981999.001,2,127,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,128,0)
   <xsl:attribute name="class">simpleContainer</xsl:attribute>
"KRN",.84,7981999.001,2,129,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,130,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,131,0)
</xsl:template>
"KRN",.84,7981999.001,2,132,0)
 
"KRN",.84,7981999.001,2,133,0)
<!-- Outputs content of the multivalued report parameter -->
"KRN",.84,7981999.001,2,134,0)
 
"KRN",.84,7981999.001,2,135,0)
<xsl:template name="ParamsList">
"KRN",.84,7981999.001,2,136,0)
 <xsl:param name="heading"/>
"KRN",.84,7981999.001,2,137,0)
 <xsl:param name="list" select="."/>
"KRN",.84,7981999.001,2,138,0)
 <tr>
"KRN",.84,7981999.001,2,139,0)
  <th scope="row">
"KRN",.84,7981999.001,2,140,0)
   <xsl:value-of select="concat($heading,':&#160;')"/>
"KRN",.84,7981999.001,2,141,0)
  </th>
"KRN",.84,7981999.001,2,142,0)
  <td>
"KRN",.84,7981999.001,2,143,0)
   <xsl:if test="$list/@DESCR">
"KRN",.84,7981999.001,2,144,0)
    <xsl:value-of select="$list/@DESCR"/><br/>
"KRN",.84,7981999.001,2,145,0)
   </xsl:if>
"KRN",.84,7981999.001,2,146,0)
   <xsl:if test="$list='ALL'">ALL</xsl:if>
"KRN",.84,7981999.001,2,147,0)
   <xsl:for-each select="$list/*">
"KRN",.84,7981999.001,2,148,0)
    <xsl:sort select="."/>
"KRN",.84,7981999.001,2,149,0)
    <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,150,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,151,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,152,0)
  </td>
"KRN",.84,7981999.001,2,153,0)
 </tr>
"KRN",.84,7981999.001,2,154,0)
</xsl:template>
"KRN",.84,7981999.001,2,155,0)
 
"KRN",.84,7981999.001,2,156,0)
<!-- Outputs singular or plural form of the word -->
"KRN",.84,7981999.001,2,157,0)
 
"KRN",.84,7981999.001,2,158,0)
<xsl:template name="Plural">
"KRN",.84,7981999.001,2,159,0)
 <xsl:param name="qnty" select="0"/>
"KRN",.84,7981999.001,2,160,0)
 <xsl:param name="sq" select="0"/>
"KRN",.84,7981999.001,2,161,0)
 <xsl:param name="word" select="."/>
"KRN",.84,7981999.001,2,162,0)
 <xsl:if test="$sq=0">
"KRN",.84,7981999.001,2,163,0)
  <xsl:value-of select="$qnty"/><xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,164,0)
 </xsl:if>
"KRN",.84,7981999.001,2,165,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,166,0)
  <xsl:when test="$qnty=1">
"KRN",.84,7981999.001,2,167,0)
   <xsl:value-of select="substring-before($word,'^')"/>
"KRN",.84,7981999.001,2,168,0)
  </xsl:when>
"KRN",.84,7981999.001,2,169,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,170,0)
   <xsl:value-of select="substring-after($word,'^')"/>
"KRN",.84,7981999.001,2,171,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,172,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,173,0)
</xsl:template>
"KRN",.84,7981999.001,2,174,0)
 
"KRN",.84,7981999.001,2,175,0)
<!-- Formats basic information about the report -->
"KRN",.84,7981999.001,2,176,0)
 
"KRN",.84,7981999.001,2,177,0)
<xsl:template name="ReportInfo">
"KRN",.84,7981999.001,2,178,0)
 <xsl:variable name="HDR" select="/REPORT/HEADER"/>
"KRN",.84,7981999.001,2,179,0)
 <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,180,0)
  <tr>
"KRN",.84,7981999.001,2,181,0)
   <th scope="row">Report&#160;Created:&#160;</th>
"KRN",.84,7981999.001,2,182,0)
   <td>
"KRN",.84,7981999.001,2,183,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,184,0)
     <xsl:with-param name="dt" select="$HDR/DATE"/>
"KRN",.84,7981999.001,2,185,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,186,0)
   </td>
"KRN",.84,7981999.001,2,187,0)
  </tr>
"KRN",.84,7981999.001,2,188,0)
  <tr>
"KRN",.84,7981999.001,2,189,0)
   <th scope="row">Task&#160;Number:&#160;</th>
"KRN",.84,7981999.001,2,190,0)
   <td>
"KRN",.84,7981999.001,2,191,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981999.001,2,192,0)
     <xsl:with-param name="value" select="$HDR/TASK_NUMBER"/>
"KRN",.84,7981999.001,2,193,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,194,0)
   </td>
"KRN",.84,7981999.001,2,195,0)
  </tr>
"KRN",.84,7981999.001,2,196,0)
  <tr>
"KRN",.84,7981999.001,2,197,0)
   <th scope="row">Last&#160;Registry&#160;Update:&#160;</th>
"KRN",.84,7981999.001,2,198,0)
   <td>
"KRN",.84,7981999.001,2,199,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,200,0)
     <xsl:with-param name="dt" select="$HDR/UPDATED_UNTIL"/>
"KRN",.84,7981999.001,2,201,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,202,0)
   </td>
"KRN",.84,7981999.001,2,203,0)
  </tr>
"KRN",.84,7981999.001,2,204,0)
  <tr>
"KRN",.84,7981999.001,2,205,0)
   <th scope="row">Last&#160;Data&#160;Extraction:&#160;</th>
"KRN",.84,7981999.001,2,206,0)
   <td>
"KRN",.84,7981999.001,2,207,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,208,0)
     <xsl:with-param name="dt" select="$HDR/EXTRACTED_UNTIL"/>
"KRN",.84,7981999.001,2,209,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,210,0)
   </td>
"KRN",.84,7981999.001,2,211,0)
  </tr>
"KRN",.84,7981999.001,2,212,0)
 </table>
"KRN",.84,7981999.001,2,213,0)
</xsl:template>
"KRN",.84,7981999.001,2,214,0)
 
"KRN",.84,7981999.001,2,215,0)
<!-- Default report summary -->
"KRN",.84,7981999.001,2,216,0)
 
"KRN",.84,7981999.001,2,217,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981999.001,2,218,0)
 <xsl:variable name="SUMMARY" select="/REPORT/SUMMARY"/>
"KRN",.84,7981999.001,2,219,0)
 <xsl:if test="$SUMMARY/*[1]">
"KRN",.84,7981999.001,2,220,0)
  <div class="reportSummary">
"KRN",.84,7981999.001,2,221,0)
   <xsl:apply-templates select="$SUMMARY"/>
"KRN",.84,7981999.001,2,222,0)
  </div>
"KRN",.84,7981999.001,2,223,0)
 </xsl:if>
"KRN",.84,7981999.001,2,224,0)
</xsl:template>
"KRN",.84,7981999.001,2,225,0)
 
"KRN",.84,7981999.001,2,226,0)
<!-- Indicator of an empty table -->
"KRN",.84,7981999.001,2,227,0)
 
"KRN",.84,7981999.001,2,228,0)
<xsl:template name="TableNoData">
"KRN",.84,7981999.001,2,229,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,230,0)
   <tr><td>No data has been found.</td></tr>
"KRN",.84,7981999.001,2,231,0)
 </table>
"KRN",.84,7981999.001,2,232,0)
</xsl:template>
"KRN",.84,7981999.001,2,233,0)
 
"KRN",.84,7981999.001,2,234,0)
<!--
"KRN",.84,7981999.001,2,235,0)
=========================================================================
"KRN",.84,7981999.001,2,236,0)
                              REPORT HEADER
"KRN",.84,7981999.001,2,237,0)
=========================================================================
"KRN",.84,7981999.001,2,238,0)
-->
"KRN",.84,7981999.001,2,239,0)
 
"KRN",.84,7981999.001,2,240,0)
<xsl:template name="ReportHeader">
"KRN",.84,7981999.001,2,241,0)
 <xsl:variable name="mvplist" select="/REPORT/PARAMETERS/*[*[1]]"/>
"KRN",.84,7981999.001,2,242,0)
 <xsl:variable name="notecnt" select="count(/REPORT/HEADER/NOTES/*)"/>
"KRN",.84,7981999.001,2,243,0)
 <div class="reportHeader">
"KRN",.84,7981999.001,2,244,0)
  <table width="100%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,245,0)
   <tr>
"KRN",.84,7981999.001,2,246,0)
    <td style="text-align:left">
"KRN",.84,7981999.001,2,247,0)
     <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,248,0)
      <xsl:apply-templates select="/REPORT/PARAMETERS/*[not(*[1])]"/>
"KRN",.84,7981999.001,2,249,0)
     </table>
"KRN",.84,7981999.001,2,250,0)
    </td>
"KRN",.84,7981999.001,2,251,0)
    <td style="text-align:right; padding-left:3%; width:10%">
"KRN",.84,7981999.001,2,252,0)
     <xsl:call-template name="ReportInfo"/>
"KRN",.84,7981999.001,2,253,0)
    </td>
"KRN",.84,7981999.001,2,254,0)
   </tr>
"KRN",.84,7981999.001,2,255,0)
  </table>
"KRN",.84,7981999.001,2,256,0)
  <xsl:if test="$mvplist[1]">
"KRN",.84,7981999.001,2,257,0)
   <table style="width:100%; margin-top:1%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,258,0)
    <xsl:apply-templates select="$mvplist"/>
"KRN",.84,7981999.001,2,259,0)
   </table>
"KRN",.84,7981999.001,2,260,0)
  </xsl:if>
"KRN",.84,7981999.001,2,261,0)
  <xsl:if test="/REPORT//PATIENT[1]">
"KRN",.84,7981999.001,2,262,0)
   <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981999.001,2,263,0)
    This report contains confidential patient information and must be
"KRN",.84,7981999.001,2,264,0)
    handled in accordance with established policies.
"KRN",.84,7981999.001,2,265,0)
   </div>
"KRN",.84,7981999.001,2,266,0)
  </xsl:if>
"KRN",.84,7981999.001,2,267,0)
  <xsl:if test="$notecnt>0">
"KRN",.84,7981999.001,2,268,0)
   <dl style="text-align:left">
"KRN",.84,7981999.001,2,269,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,270,0)
     <xsl:when test="$notecnt>1">
"KRN",.84,7981999.001,2,271,0)
      <xsl:for-each select="/REPORT/HEADER/NOTES/*">
"KRN",.84,7981999.001,2,272,0)
       <dt>Note #<xsl:value-of select="position()"/>:</dt>
"KRN",.84,7981999.001,2,273,0)
       <dd><xsl:apply-templates select="."/></dd>
"KRN",.84,7981999.001,2,274,0)
      </xsl:for-each>
"KRN",.84,7981999.001,2,275,0)
     </xsl:when>
"KRN",.84,7981999.001,2,276,0)
     <xsl:otherwise>
"KRN",.84,7981999.001,2,277,0)
      <dt>Note:</dt>
"KRN",.84,7981999.001,2,278,0)
      <dd><xsl:apply-templates select="/REPORT/HEADER/NOTES/*"/></dd>
"KRN",.84,7981999.001,2,279,0)
     </xsl:otherwise>
"KRN",.84,7981999.001,2,280,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,281,0)
   </dl>
"KRN",.84,7981999.001,2,282,0)
  </xsl:if>
"KRN",.84,7981999.001,2,283,0)
 </div>
"KRN",.84,7981999.001,2,284,0)
</xsl:template>
"KRN",.84,7981999.001,2,285,0)
 
"KRN",.84,7981999.001,2,286,0)
<xsl:template match="HEADER/NOTES/AGE">
"KRN",.84,7981999.001,2,287,0)
 Age of patients is calculated as of the date when the report is run
"KRN",.84,7981999.001,2,288,0)
 (<xsl:call-template name="DateTime"/>). If a patient died then the
"KRN",.84,7981999.001,2,289,0)
 age is calculated as of date of death.
"KRN",.84,7981999.001,2,290,0)
</xsl:template>
"KRN",.84,7981999.001,2,291,0)
 
"KRN",.84,7981999.001,2,292,0)
<xsl:template match="HEADER/NOTES/AGE_BASE_DATE">
"KRN",.84,7981999.001,2,293,0)
 Age of patients is calculated as of <xsl:call-template name="DateTime"/>,
"KRN",.84,7981999.001,2,294,0)
 which is the middle of the report date range. If a patient was born after
"KRN",.84,7981999.001,2,295,0)
 this date then the field will be empty. If a patient died before this
"KRN",.84,7981999.001,2,296,0)
 date then the age is calculated as of date of death.
"KRN",.84,7981999.001,2,297,0)
</xsl:template>
"KRN",.84,7981999.001,2,298,0)
 
"KRN",.84,7981999.001,2,299,0)
<xsl:template match="PARAMETERS/CLINICS">
"KRN",.84,7981999.001,2,300,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,301,0)
  <xsl:with-param name="heading" select="'Clinics'"/>
"KRN",.84,7981999.001,2,302,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,303,0)
</xsl:template>
"KRN",.84,7981999.001,2,304,0)
 
"KRN",.84,7981999.001,2,305,0)
<xsl:template match="PARAMETERS/CPTLST">
"KRN",.84,7981999.001,2,306,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,307,0)
  <xsl:with-param name="heading" select="'CPT'"/>
"KRN",.84,7981999.001,2,308,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,309,0)
</xsl:template>
"KRN",.84,7981999.001,2,310,0)
 
"KRN",.84,7981999.001,2,311,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,312,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,313,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,314,0)
 <xsl:if test="($dtr/@START!='') and ($dtr/@END!='')">
"KRN",.84,7981999.001,2,315,0)
  <tr>
"KRN",.84,7981999.001,2,316,0)
   <th scope="row">
"KRN",.84,7981999.001,2,317,0)
    <xsl:if test="$title!=''">
"KRN",.84,7981999.001,2,318,0)
     <xsl:value-of select="concat($title,'&#160;')"/>
"KRN",.84,7981999.001,2,319,0)
    </xsl:if>
"KRN",.84,7981999.001,2,320,0)
    <xsl:text>Date&#160;Range:&#160;</xsl:text>
"KRN",.84,7981999.001,2,321,0)
   </th>
"KRN",.84,7981999.001,2,322,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,323,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,324,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,325,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,326,0)
    <xsl:text>&#160;-&#160;</xsl:text>
"KRN",.84,7981999.001,2,327,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,328,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>  
"KRN",.84,7981999.001,2,329,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,330,0)
   </td>
"KRN",.84,7981999.001,2,331,0)
  </tr>
"KRN",.84,7981999.001,2,332,0)
 </xsl:if>
"KRN",.84,7981999.001,2,333,0)
</xsl:template>
"KRN",.84,7981999.001,2,334,0)
 
"KRN",.84,7981999.001,2,335,0)
<!-- 
"KRN",.84,7981999.001,2,336,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,337,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,338,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,339,0)
 <xsl:if test="$dtr/@START!=''">
"KRN",.84,7981999.001,2,340,0)
  <tr>
"KRN",.84,7981999.001,2,341,0)
   <th scope="row"><xsl:value-of select="$title"/> Start&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,342,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,343,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,344,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,345,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,346,0)
   </td>
"KRN",.84,7981999.001,2,347,0)
  </tr>
"KRN",.84,7981999.001,2,348,0)
 </xsl:if>
"KRN",.84,7981999.001,2,349,0)
 <xsl:if test="$dtr/@END!=''">
"KRN",.84,7981999.001,2,350,0)
  <tr>
"KRN",.84,7981999.001,2,351,0)
   <th scope="row"><xsl:value-of select="$title"/> End&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,352,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,353,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,354,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>
"KRN",.84,7981999.001,2,355,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,356,0)
   </td>
"KRN",.84,7981999.001,2,357,0)
  </tr>
"KRN",.84,7981999.001,2,358,0)
 </xsl:if>
"KRN",.84,7981999.001,2,359,0)
</xsl:template>
"KRN",.84,7981999.001,2,360,0)
-->
"KRN",.84,7981999.001,2,361,0)
 
"KRN",.84,7981999.001,2,362,0)
<xsl:template match="PARAMETERS/DIVISIONS">
"KRN",.84,7981999.001,2,363,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,364,0)
  <xsl:with-param name="heading" select="'Divisions'"/>
"KRN",.84,7981999.001,2,365,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,366,0)
</xsl:template>
"KRN",.84,7981999.001,2,367,0)
 
"KRN",.84,7981999.001,2,368,0)
<xsl:template match="PARAMETERS/ICD9LST">
"KRN",.84,7981999.001,2,369,0)
 <tr>
"KRN",.84,7981999.001,2,370,0)
  <th scope="row">ICD-9:&#160;</th>
"KRN",.84,7981999.001,2,371,0)
  <td>
"KRN",.84,7981999.001,2,372,0)
   <dl>
"KRN",.84,7981999.001,2,373,0)
    <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,374,0)
     <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,375,0)
    </xsl:if>
"KRN",.84,7981999.001,2,376,0)
    <xsl:if test=".='ALL'"><dt>ALL</dt></xsl:if>
"KRN",.84,7981999.001,2,377,0)
    <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,378,0)
   </dl>
"KRN",.84,7981999.001,2,379,0)
  </td>
"KRN",.84,7981999.001,2,380,0)
 </tr>
"KRN",.84,7981999.001,2,381,0)
</xsl:template>
"KRN",.84,7981999.001,2,382,0)
 
"KRN",.84,7981999.001,2,383,0)
<xsl:template match="PARAMETERS/ICD9LST/GROUP">
"KRN",.84,7981999.001,2,384,0)
 <dt><b><xsl:value-of select="@NAME"/></b></dt>
"KRN",.84,7981999.001,2,385,0)
 <dd><dl>
"KRN",.84,7981999.001,2,386,0)
  <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,387,0)
   <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,388,0)
  </xsl:if>
"KRN",.84,7981999.001,2,389,0)
  <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,390,0)
   <xsl:sort select="."/>
"KRN",.84,7981999.001,2,391,0)
   <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,392,0)
   <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,393,0)
  </xsl:for-each>
"KRN",.84,7981999.001,2,394,0)
 </dl></dd>
"KRN",.84,7981999.001,2,395,0)
</xsl:template>
"KRN",.84,7981999.001,2,396,0)
 
"KRN",.84,7981999.001,2,397,0)
<xsl:template match="PARAMETERS/ICD9FILT">
"KRN",.84,7981999.001,2,398,0)
 <tr>
"KRN",.84,7981999.001,2,399,0)
  <th scope="row">Other Diagnoses:&#160;</th>
"KRN",.84,7981999.001,2,400,0)
  <td>
"KRN",.84,7981999.001,2,401,0)
   <dl>
"KRN",.84,7981999.001,2,402,0)
    <xsl:if test="@FILTER!=''">
"KRN",.84,7981999.001,2,403,0)
      <xsl:choose>
"KRN",.84,7981999.001,2,404,0)
        <xsl:when test="@FILTER='EXCLUDE'">
"KRN",.84,7981999.001,2,405,0)
          <dt><xsl:text>Exclude</xsl:text></dt>
"KRN",.84,7981999.001,2,406,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,407,0)
        </xsl:when>
"KRN",.84,7981999.001,2,408,0)
        <xsl:when test="@FILTER='INCLUDE'">
"KRN",.84,7981999.001,2,409,0)
          <dt><xsl:text>Include</xsl:text></dt>
"KRN",.84,7981999.001,2,410,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,411,0)
        </xsl:when>
"KRN",.84,7981999.001,2,412,0)
        <xsl:otherwise>
"KRN",.84,7981999.001,2,413,0)
          <dt><xsl:text>All</xsl:text></dt>
"KRN",.84,7981999.001,2,414,0)
        </xsl:otherwise>
"KRN",.84,7981999.001,2,415,0)
      </xsl:choose>
"KRN",.84,7981999.001,2,416,0)
    </xsl:if>
"KRN",.84,7981999.001,2,417,0)
   </dl>
"KRN",.84,7981999.001,2,418,0)
  </td>
"KRN",.84,7981999.001,2,419,0)
 </tr>
"KRN",.84,7981999.001,2,420,0)
</xsl:template>
"KRN",.84,7981999.001,2,421,0)
 
"KRN",.84,7981999.001,2,422,0)
<xsl:template match="PARAMETERS/ICD9FILT/GROUP">
"KRN",.84,7981999.001,2,423,0)
 <dt><b><xsl:value-of select="@ID"/></b></dt>
"KRN",.84,7981999.001,2,424,0)
 <dd><dl>
"KRN",.84,7981999.001,2,425,0)
  <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,426,0)
   <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,427,0)
   <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,428,0)
   <xsl:value-of select="@ID"/>
"KRN",.84,7981999.001,2,429,0)
  </xsl:for-each>
"KRN",.84,7981999.001,2,430,0)
 </dl></dd>
"KRN",.84,7981999.001,2,431,0)
</xsl:template> 
"KRN",.84,7981999.001,2,432,0)
 
"KRN",.84,7981999.001,2,433,0)
<xsl:template match="PARAMETERS/LOCAL_FIELDS">
"KRN",.84,7981999.001,2,434,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,435,0)
  <xsl:with-param name="heading" select="'Local Fields'"/>
"KRN",.84,7981999.001,2,436,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,437,0)
</xsl:template>
"KRN",.84,7981999.001,2,438,0)
 
"KRN",.84,7981999.001,2,439,0)
<xsl:template match="PARAMETERS/OPTIONS">
"KRN",.84,7981999.001,2,440,0)
 <tr>
"KRN",.84,7981999.001,2,441,0)
  <th scope="row">Options:&#160;</th>
"KRN",.84,7981999.001,2,442,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,443,0)
 </tr>
"KRN",.84,7981999.001,2,444,0)
 <xsl:if test="@MOST_RECENT='1'">
"KRN",.84,7981999.001,2,445,0)
  <tr>
"KRN",.84,7981999.001,2,446,0)
   <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,447,0)
   <td><xsl:text>Most Recent</xsl:text></td>
"KRN",.84,7981999.001,2,448,0)
  </tr>
"KRN",.84,7981999.001,2,449,0)
 </xsl:if>
"KRN",.84,7981999.001,2,450,0)
 <xsl:if test="@MAX_DATE='1'">
"KRN",.84,7981999.001,2,451,0)
  <tr>
"KRN",.84,7981999.001,2,452,0)
   <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,453,0)
   <td>
"KRN",.84,7981999.001,2,454,0)
    <xsl:text>As of </xsl:text>
"KRN",.84,7981999.001,2,455,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,456,0)
     <xsl:with-param name="dt" select="../MAX_DATE"/>
"KRN",.84,7981999.001,2,457,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,458,0)
   </td>
"KRN",.84,7981999.001,2,459,0)
  </tr>
"KRN",.84,7981999.001,2,460,0)
 </xsl:if>
"KRN",.84,7981999.001,2,461,0)
</xsl:template>
"KRN",.84,7981999.001,2,462,0)
 
"KRN",.84,7981999.001,2,463,0)
<xsl:template match="PARAMETERS/OTHER_REGISTRIES">
"KRN",.84,7981999.001,2,464,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,465,0)
  <xsl:with-param name="heading" select="'Other Registries'"/>
"KRN",.84,7981999.001,2,466,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,467,0)
</xsl:template>
"KRN",.84,7981999.001,2,468,0)
 
"KRN",.84,7981999.001,2,469,0)
<xsl:template match="PARAMETERS/PATIENTS">
"KRN",.84,7981999.001,2,470,0)
 <tr>
"KRN",.84,7981999.001,2,471,0)
  <th scope="row">Patients:&#160;</th>
"KRN",.84,7981999.001,2,472,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,473,0)
 </tr>
"KRN",.84,7981999.001,2,474,0)
</xsl:template>
"KRN",.84,7981999.001,2,475,0)
 
"KRN",.84,7981999.001,2,476,0)
<xsl:template match="PARAMETERS/REGNAME">
"KRN",.84,7981999.001,2,477,0)
 <tr>
"KRN",.84,7981999.001,2,478,0)
  <th scope="row">Registry:&#160;</th>
"KRN",.84,7981999.001,2,479,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,480,0)
 </tr>
"KRN",.84,7981999.001,2,481,0)
</xsl:template>
"KRN",.84,7981999.001,2,482,0)
 
"KRN",.84,7981999.001,2,483,0)
<xsl:template match="PARAMETERS/TASK_COMMENT">
"KRN",.84,7981999.001,2,484,0)
 <tr>
"KRN",.84,7981999.001,2,485,0)
  <th scope="row">Comment:&#160;</th>
"KRN",.84,7981999.001,2,486,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,487,0)
 </tr>
"KRN",.84,7981999.001,2,488,0)
</xsl:template>
"KRN",.84,7981999.001,2,489,0)
 
"KRN",.84,7981999.001,2,490,0)
<xsl:template match="PARAMETERS/UTIL_TYPES">
"KRN",.84,7981999.001,2,491,0)
 <tr>
"KRN",.84,7981999.001,2,492,0)
  <th scope="row">Utilization:&#160;</th>
"KRN",.84,7981999.001,2,493,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,494,0)
 </tr>
"KRN",.84,7981999.001,2,495,0)
</xsl:template>
"KRN",.84,7981999.001,2,496,0)
 
"KRN",.84,7981999.001,2,497,0)
<xsl:template match="PARAMETERS/LRGRANGES">
"KRN",.84,7981999.001,2,498,0)
 <tr>
"KRN",.84,7981999.001,2,499,0)
  <th scope="row">Results:&#160;</th>
"KRN",.84,7981999.001,2,500,0)
  <td>
"KRN",.84,7981999.001,2,501,0)
   <xsl:for-each select="LRGRANGE">
"KRN",.84,7981999.001,2,502,0)
    <xsl:value-of select="."/><br/>
"KRN",.84,7981999.001,2,503,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,504,0)
  </td>
"KRN",.84,7981999.001,2,505,0)
 </tr>
"KRN",.84,7981999.001,2,506,0)
</xsl:template>
"KRN",.84,7981999.001,2,507,0)
 
"KRN",.84,7981999.001,2,508,0)
<xsl:template match="PARAMETERS/DATE_RANGE_3">
"KRN",.84,7981999.001,2,509,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981999.001,2,510,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981999.001,2,511,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,512,0)
</xsl:template>
"KRN",.84,7981999.001,2,513,0)
 
"KRN",.84,7981999.001,2,514,0)
 
"KRN",.84,7981999.001,2,515,0)
<!--
"KRN",.84,7981999.001,2,516,0)
=========================================================================
"KRN",.84,7981999.001,2,517,0)
                       DEFAULT DATA GRID TEMPLATES
"KRN",.84,7981999.001,2,518,0)
=========================================================================
"KRN",.84,7981999.001,2,519,0)
-->
"KRN",.84,7981999.001,2,520,0)
 
"KRN",.84,7981999.001,2,521,0)
<xsl:template name="DataGrid" match="*[@TABLE!='']">
"KRN",.84,7981999.001,2,522,0)
 <xsl:param name="divstyle" select="''"/>
"KRN",.84,7981999.001,2,523,0)
 <xsl:param name="scroll" select="*[31]"/>
"KRN",.84,7981999.001,2,524,0)
 <xsl:variable name="tbldef" select="key('TableDefs',@TABLE)"/>
"KRN",.84,7981999.001,2,525,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,526,0)
  <xsl:when test="*[1]">
"KRN",.84,7981999.001,2,527,0)
   <div>
"KRN",.84,7981999.001,2,528,0)
    <xsl:if test="$divstyle!=''">
"KRN",.84,7981999.001,2,529,0)
     <xsl:attribute name="style">
"KRN",.84,7981999.001,2,530,0)
      <xsl:value-of select="$divstyle"/>
"KRN",.84,7981999.001,2,531,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,532,0)
    </xsl:if>
"KRN",.84,7981999.001,2,533,0)
    <xsl:call-template name="MakeScrollable">
"KRN",.84,7981999.001,2,534,0)
     <xsl:with-param name="condition" select="$scroll"/>
"KRN",.84,7981999.001,2,535,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,536,0)
    <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,537,0)
     <xsl:apply-templates select="$tbldef/@HEADER"/>
"KRN",.84,7981999.001,2,538,0)
     <xsl:apply-templates select="$tbldef/@FOOTER"/>
"KRN",.84,7981999.001,2,539,0)
     <tbody>
"KRN",.84,7981999.001,2,540,0)
      <xsl:apply-templates select="*">
"KRN",.84,7981999.001,2,541,0)
       <xsl:with-param name="seqnum"
"KRN",.84,7981999.001,2,542,0)
            select="count($tbldef/COLUMN[@NAME='#'])"/>
"KRN",.84,7981999.001,2,543,0)
      </xsl:apply-templates>
"KRN",.84,7981999.001,2,544,0)
     </tbody>
"KRN",.84,7981999.001,2,545,0)
    </table>
"KRN",.84,7981999.001,2,546,0)
   </div>
"KRN",.84,7981999.001,2,547,0)
  </xsl:when>
"KRN",.84,7981999.001,2,548,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,549,0)
   <xsl:call-template name="TableNoData"/>
"KRN",.84,7981999.001,2,550,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,551,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,552,0)
</xsl:template>
"KRN",.84,7981999.001,2,553,0)
 
"KRN",.84,7981999.001,2,554,0)
<!-- Default data grid header -->
"KRN",.84,7981999.001,2,555,0)
 
"KRN",.84,7981999.001,2,556,0)
<xsl:template match="HEADER/TBLDEF/@HEADER">
"KRN",.84,7981999.001,2,557,0)
 <thead>
"KRN",.84,7981999.001,2,558,0)
  <tr><xsl:apply-templates select="../COLUMN"/></tr>
"KRN",.84,7981999.001,2,559,0)
 </thead>
"KRN",.84,7981999.001,2,560,0)
</xsl:template>
"KRN",.84,7981999.001,2,561,0)
 
"KRN",.84,7981999.001,2,562,0)
<!-- Default column heading cell -->
"KRN",.84,7981999.001,2,563,0)
 
"KRN",.84,7981999.001,2,564,0)
<xsl:template name="ColumnHeader" match="HEADER/TBLDEF/COLUMN">
"KRN",.84,7981999.001,2,565,0)
 <xsl:param name="column" select="."/>
"KRN",.84,7981999.001,2,566,0)
 <xsl:param name="colname" select="$column/@NAME"/>
"KRN",.84,7981999.001,2,567,0)
 <xsl:param name="sortmode"/>
"KRN",.84,7981999.001,2,568,0)
 <xsl:param name="sort" 
"KRN",.84,7981999.001,2,569,0)
      select="concat($column/../@NAME,'=',$colname,$sortmode)"/>
"KRN",.84,7981999.001,2,570,0)
 <xsl:param name="title" select="$colname"/>
"KRN",.84,7981999.001,2,571,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,572,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,573,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,574,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,575,0)
 <th scope="col">
"KRN",.84,7981999.001,2,576,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,577,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,578,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,579,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,580,0)
  </xsl:if>
"KRN",.84,7981999.001,2,581,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,582,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,583,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,584,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,585,0)
  </xsl:if>
"KRN",.84,7981999.001,2,586,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,587,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,588,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,589,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,590,0)
  </xsl:if>
"KRN",.84,7981999.001,2,591,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,592,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,593,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,594,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,595,0)
  </xsl:if>
"KRN",.84,7981999.001,2,596,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,597,0)
   <xsl:when test="$title=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,598,0)
   <xsl:when test="($sort!='') and not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,599,0)
    <xsl:element name="a">
"KRN",.84,7981999.001,2,600,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,601,0)
      <xsl:text>http://vista/report/sort?</xsl:text>
"KRN",.84,7981999.001,2,602,0)
      <xsl:value-of select="$sort"/>
"KRN",.84,7981999.001,2,603,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,604,0)
     <xsl:value-of select="$title"/>
"KRN",.84,7981999.001,2,605,0)
    </xsl:element>
"KRN",.84,7981999.001,2,606,0)
   </xsl:when>
"KRN",.84,7981999.001,2,607,0)
   <xsl:otherwise><xsl:value-of select="$title"/></xsl:otherwise>
"KRN",.84,7981999.001,2,608,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,609,0)
 </th>
"KRN",.84,7981999.001,2,610,0)
</xsl:template>
"KRN",.84,7981999.001,2,611,0)
 
"KRN",.84,7981999.001,2,612,0)
<!-- Default Footer -->
"KRN",.84,7981999.001,2,613,0)
 
"KRN",.84,7981999.001,2,614,0)
<xsl:template name="DataGridFooter" match="TBLDEF/@FOOTER">
"KRN",.84,7981999.001,2,615,0)
 <xsl:param name="colspan"
"KRN",.84,7981999.001,2,616,0)
      select="count(..//COLUMN[not(child::COLUMN[1])])"/>
"KRN",.84,7981999.001,2,617,0)
 <tfoot><tr><td>
"KRN",.84,7981999.001,2,618,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,619,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,620,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,621,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,622,0)
  </xsl:if>
"KRN",.84,7981999.001,2,623,0)
  <xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,624,0)
 </td></tr></tfoot>
"KRN",.84,7981999.001,2,625,0)
</xsl:template>
"KRN",.84,7981999.001,2,626,0)
 
"KRN",.84,7981999.001,2,627,0)
<!-- Default data grid row -->
"KRN",.84,7981999.001,2,628,0)
 
"KRN",.84,7981999.001,2,629,0)
<xsl:template match="*[@TABLE!='']/*">
"KRN",.84,7981999.001,2,630,0)
 <xsl:param name="seqnum" select="0"/>
"KRN",.84,7981999.001,2,631,0)
 <tr>
"KRN",.84,7981999.001,2,632,0)
  <xsl:if test="$seqnum">
"KRN",.84,7981999.001,2,633,0)
   <td><xsl:value-of select="position()"/></td>
"KRN",.84,7981999.001,2,634,0)
  </xsl:if>
"KRN",.84,7981999.001,2,635,0)
  <xsl:apply-templates select="child::*"/>
"KRN",.84,7981999.001,2,636,0)
 </tr>
"KRN",.84,7981999.001,2,637,0)
</xsl:template>
"KRN",.84,7981999.001,2,638,0)
 
"KRN",.84,7981999.001,2,639,0)
<!-- Data grid cell -->
"KRN",.84,7981999.001,2,640,0)
 
"KRN",.84,7981999.001,2,641,0)
<xsl:template name="TableCell" match="*[@TABLE!='']/*/*">
"KRN",.84,7981999.001,2,642,0)
 <xsl:param name="class"/>
"KRN",.84,7981999.001,2,643,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,644,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,645,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,646,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,647,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,648,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,649,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,650,0)
 <td>
"KRN",.84,7981999.001,2,651,0)
  <xsl:if test="string($class)!=''">
"KRN",.84,7981999.001,2,652,0)
   <xsl:attribute name="class">
"KRN",.84,7981999.001,2,653,0)
    <xsl:value-of select="$class"/>
"KRN",.84,7981999.001,2,654,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,655,0)
  </xsl:if>
"KRN",.84,7981999.001,2,656,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,657,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,658,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,659,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,660,0)
  </xsl:if>
"KRN",.84,7981999.001,2,661,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,662,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,663,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,664,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,665,0)
  </xsl:if>
"KRN",.84,7981999.001,2,666,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,667,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,668,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,669,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,670,0)
  </xsl:if>
"KRN",.84,7981999.001,2,671,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,672,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,673,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,674,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,675,0)
  </xsl:if>
"KRN",.84,7981999.001,2,676,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,677,0)
   <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,678,0)
   <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,679,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,680,0)
     <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,681,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,682,0)
   </xsl:when>
"KRN",.84,7981999.001,2,683,0)
   <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,684,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,685,0)
     <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,686,0)
     <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,687,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,688,0)
   </xsl:when>
"KRN",.84,7981999.001,2,689,0)
   <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,690,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,691,0)
 </td>
"KRN",.84,7981999.001,2,692,0)
</xsl:template>
"KRN",.84,7981999.001,2,693,0)
 
"KRN",.84,7981999.001,2,694,0)
<!-- Default column headings -->
"KRN",.84,7981999.001,2,695,0)
 
"KRN",.84,7981999.001,2,696,0)
<xsl:template match="TBLDEF/COLUMN[@NAME='#']">
"KRN",.84,7981999.001,2,697,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,698,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,699,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,700,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981999.001,2,701,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981999.001,2,702,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,703,0)
</xsl:template>
"KRN",.84,7981999.001,2,704,0)
 
"KRN",.84,7981999.001,2,705,0)
<xsl:template match="COLUMN[@NAME='DATE']">                                    
"KRN",.84,7981999.001,2,706,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,707,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,708,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,709,0)
  <xsl:with-param name="title" select="'Date'"/>                               
"KRN",.84,7981999.001,2,710,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981999.001,2,711,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,712,0)
</xsl:template>
"KRN",.84,7981999.001,2,713,0)
 
"KRN",.84,7981999.001,2,714,0)
<xsl:template match="COLUMN[@NAME='DOD']">
"KRN",.84,7981999.001,2,715,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,716,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,717,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,718,0)
  <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981999.001,2,719,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,720,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,721,0)
</xsl:template>
"KRN",.84,7981999.001,2,722,0)
 
"KRN",.84,7981999.001,2,723,0)
<xsl:template match="COLUMN[@NAME='LAST4']">
"KRN",.84,7981999.001,2,724,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,725,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,726,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,727,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981999.001,2,728,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,729,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,730,0)
</xsl:template>
"KRN",.84,7981999.001,2,731,0)
 
"KRN",.84,7981999.001,2,732,0)
<xsl:template match="COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,733,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,734,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,735,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,736,0)
  <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981999.001,2,737,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,738,0)
</xsl:template>
"KRN",.84,7981999.001,2,739,0)
 
"KRN",.84,7981999.001,2,740,0)
<xsl:template match="TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,741,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,742,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,743,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,744,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981999.001,2,745,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,746,0)
</xsl:template>
"KRN",.84,7981999.001,2,747,0)
 
"KRN",.84,7981999.001,2,748,0)
<!-- Default cells -->
"KRN",.84,7981999.001,2,749,0)
 
"KRN",.84,7981999.001,2,750,0)
<xsl:template match="PATIENT/DOD">
"KRN",.84,7981999.001,2,751,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,752,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,753,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981999.001,2,754,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,755,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,756,0)
</xsl:template>
"KRN",.84,7981999.001,2,757,0)
 
"KRN",.84,7981999.001,2,758,0)
<xsl:template match="*[@TABLE!='']/*/NAME">
"KRN",.84,7981999.001,2,759,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,760,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,761,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981999.001,2,762,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,763,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,764,0)
</xsl:template>
"KRN",.84,7981999.001,2,765,0)
 
"KRN",.84,7981999.001,2,766,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,3,0)
^.845
"MBREQ")
0
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"PKG",618,-1)
1^1
"PKG",618,0)
CLINICAL CASE REGISTRIES^ROR^CLINICAL REGISTRIES
"PKG",618,20,0)
^9.402P^^
"PKG",618,22,0)
^9.49I^1^1
"PKG",618,22,1,0)
1.5^3060208^3060419^568
"PKG",618,22,1,"PAH",1,0)
10^3100323
"PKG",618,22,1,"PAH",1,1,0)
^^2^2^3100323
"PKG",618,22,1,"PAH",1,1,1,0)
Clinical Case Registries patch ROR*1.5*10.  See Patch Description for
"PKG",618,22,1,"PAH",1,1,2,0)
details.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
20
"RTN","RORDD")
0^5^B41565322^B33607447
"RTN","RORDD",1,0)
RORDD ;HCIOFO/SG - DATA DICTIONARY UTILITIES ;9/2/05 10:58am
"RTN","RORDD",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","RORDD",3,0)
 ;
"RTN","RORDD",4,0)
 ; This routine uses the following IAs:
"RTN","RORDD",5,0)
 ;
"RTN","RORDD",6,0)
 ; #10076  ^XUSEC(KEY,DUZ (supported)
"RTN","RORDD",7,0)
 ; #10142  EN^DDIOL (supported)
"RTN","RORDD",8,0)
 ; #10008  DQ^DICQ (supported)
"RTN","RORDD",9,0)
 ; #2052   $$GET1^DID (supported)
"RTN","RORDD",10,0)
 ; #2055   $$ROOT^DILFD (supported)
"RTN","RORDD",11,0)
 ; #2056   $$GET1^DIQ (supported)
"RTN","RORDD",12,0)
 ; #10044  H^XUS (supported)
"RTN","RORDD",13,0)
 ; #2198   $$BROKER^XWBLIB (supported)
"RTN","RORDD",14,0)
 ; #10096  ^%ZOSF("TEST" (supported)
"RTN","RORDD",15,0)
 ;
"RTN","RORDD",16,0)
 Q
"RTN","RORDD",17,0)
 ;
"RTN","RORDD",18,0)
 ;***** CHECKS USER KEYS AND LOGS ATTEMPTS OF UNAUTHORIZED ACCESS
"RTN","RORDD",19,0)
 ;
"RTN","RORDD",20,0)
 ; FILE          File number
"RTN","RORDD",21,0)
 ;
"RTN","RORDD",22,0)
 ; [REGISTRY]    Either a registry name or a registry IEN.
"RTN","RORDD",23,0)
 ;               By default ($G(REGISTRY)=""), the function checks if
"RTN","RORDD",24,0)
 ;               the user has any Clinical Case Registries keys.
"RTN","RORDD",25,0)
 ;
"RTN","RORDD",26,0)
 ; [STRICT]      If this parameter is defined and not zero then an
"RTN","RORDD",27,0)
 ;               access violation event is recorded even if the user
"RTN","RORDD",28,0)
 ;               has other Clinical Case Registries keys.
"RTN","RORDD",29,0)
 ;
"RTN","RORDD",30,0)
 ;               This mode can be used to restrict access to a file,
"RTN","RORDD",31,0)
 ;               which is solely associated with a single registry
"RTN","RORDD",32,0)
 ;               (for example, the ROR HIV STUDY file).
"RTN","RORDD",33,0)
 ;
"RTN","RORDD",34,0)
 ; Return Values:
"RTN","RORDD",35,0)
 ;        0  Access denied
"RTN","RORDD",36,0)
 ;        1  Access granted
"RTN","RORDD",37,0)
 ;
"RTN","RORDD",38,0)
ACCESS(FILE,REGISTRY,STRICT) ;
"RTN","RORDD",39,0)
 Q:$G(DUZ)'>0 0               ; Unknown user
"RTN","RORDD",40,0)
 Q:$E($G(XPDNM),1,3)="ROR" 1  ; KIDS
"RTN","RORDD",41,0)
 N ANYKEY,REGKEY
"RTN","RORDD",42,0)
 S (REGKEY,ANYKEY)=1
"RTN","RORDD",43,0)
 ;--- Check the user's security keys
"RTN","RORDD",44,0)
 I $G(REGISTRY)'=""  D:$D(^ROR(798.1,"ACL",DUZ,REGISTRY))<10
"RTN","RORDD",45,0)
 . Q:$D(^XUSEC("ROR VA IRM",DUZ))
"RTN","RORDD",46,0)
 . S REGKEY=0,ANYKEY=($D(^ROR(798.1,"ACL",DUZ))>1)
"RTN","RORDD",47,0)
 E  D:$D(^ROR(798.1,"ACL",DUZ))<10
"RTN","RORDD",48,0)
 . S:'$D(^XUSEC("ROR VA IRM",DUZ)) (REGKEY,ANYKEY)=0
"RTN","RORDD",49,0)
 Q:REGKEY 1
"RTN","RORDD",50,0)
 ;--- Do not record an access violation event if the user has
"RTN","RORDD",51,0)
 ;    any Clinical Case Registries key and the "strict" mode
"RTN","RORDD",52,0)
 ;--- has not been requested by the caller.
"RTN","RORDD",53,0)
 I '$G(STRICT)  Q:ANYKEY 0
"RTN","RORDD",54,0)
 N RORMSG,X
"RTN","RORDD",55,0)
 ;--- Record the access violation event (if the API is available)
"RTN","RORDD",56,0)
 S X="RORLOG"  X ^%ZOSF("TEST")
"RTN","RORDD",57,0)
 I $T  D  D ACVIOLTN^RORLOG(X,$G(REGISTRY))
"RTN","RORDD",58,0)
 . S X="Attempt of unauthorized access to the file #"_FILE
"RTN","RORDD",59,0)
 ;--- Display the message (if the current device is a display)
"RTN","RORDD",60,0)
 I $E($G(IOST),1,2)="C-"  D  H 4
"RTN","RORDD",61,0)
 . D TEXT^RORTXT(7980000.003,.RORMSG)
"RTN","RORDD",62,0)
 . W !!!  S X=""
"RTN","RORDD",63,0)
 . F  S X=$O(RORMSG(X))  Q:X=""  D
"RTN","RORDD",64,0)
 . . W ?($G(IOM,80)-$L(RORMSG(X))\2),RORMSG(X),!
"RTN","RORDD",65,0)
 ;--- Log Off the user (if not an RPC Broker session)
"RTN","RORDD",66,0)
 D:'$$BROKER^XWBLIB H^XUS
"RTN","RORDD",67,0)
 Q 0
"RTN","RORDD",68,0)
 ;
"RTN","RORDD",69,0)
 ;***** "ACL" CROSS-REFERENCE UTILITIES
"RTN","RORDD",70,0)
 ;
"RTN","RORDD",71,0)
 ; These two procedures are used by the kill and set logic of the
"RTN","RORDD",72,0)
 ; "ACL" cross-reference (MUMPS type) of the .01 field of the SECURITY
"RTN","RORDD",73,0)
 ; KEY multiple of the ROR REGISTRY PARAMETERS file (#798.1).
"RTN","RORDD",74,0)
 ;
"RTN","RORDD",75,0)
 ; FileMan initializes the X variable (name of the security key) and
"RTN","RORDD",76,0)
 ; the DA array before calling these procedures.
"RTN","RORDD",77,0)
 ;
"RTN","RORDD",78,0)
ACLKILL ;
"RTN","RORDD",79,0)
 N RORDUZ,RORREG
"RTN","RORDD",80,0)
 S RORREG=$P($G(^ROR(798.1,DA(1),0)),U)
"RTN","RORDD",81,0)
 S RORDUZ=""
"RTN","RORDD",82,0)
 F  S RORDUZ=$O(^XUSEC(X,RORDUZ))  Q:RORDUZ=""  D
"RTN","RORDD",83,0)
 . K ^ROR(798.1,"ACL",RORDUZ,DA(1),X,DA)
"RTN","RORDD",84,0)
 . K:RORREG'="" ^ROR(798.1,"ACL",RORDUZ,RORREG,X,DA)
"RTN","RORDD",85,0)
 Q
"RTN","RORDD",86,0)
 ;
"RTN","RORDD",87,0)
ACLSET ;
"RTN","RORDD",88,0)
 N RORDUZ,RORREG
"RTN","RORDD",89,0)
 S RORREG=$P($G(^ROR(798.1,DA(1),0)),U)
"RTN","RORDD",90,0)
 S RORDUZ=""
"RTN","RORDD",91,0)
 F  S RORDUZ=$O(^XUSEC(X,RORDUZ))  Q:RORDUZ=""  D
"RTN","RORDD",92,0)
 . S ^ROR(798.1,"ACL",RORDUZ,DA(1),X,DA)=""
"RTN","RORDD",93,0)
 . S:RORREG'="" ^ROR(798.1,"ACL",RORDUZ,RORREG,X,DA)=""
"RTN","RORDD",94,0)
 Q
"RTN","RORDD",95,0)
 ;
"RTN","RORDD",96,0)
 ;***** CHECKS IF THE REGISTRY RECORD IS 'ACTIVE'
"RTN","RORDD",97,0)
 ;NOTE: With patch 10, pending patients are included in the extractions
"RTN","RORDD",98,0)
 ;(nightly and historical), so this API is not called anymore to
"RTN","RORDD",99,0)
 ;determine whether to include the patient in the extracts.  The DEL API
"RTN","RORDD",100,0)
 ;is called instead.  But this 'ACTIVE' API is still used in the CCR application
"RTN","RORDD",101,0)
 ;for other things.
"RTN","RORDD",102,0)
 ;
"RTN","RORDD",103,0)
 ;
"RTN","RORDD",104,0)
 ; IEN           IEN of the registry record
"RTN","RORDD",105,0)
 ;
"RTN","RORDD",106,0)
 ; [CHKDT]       Date/Time for status calculation. The current date
"RTN","RORDD",107,0)
 ;               and time are used by default.
"RTN","RORDD",108,0)
 ;               Currently, this parameter has no effect .
"RTN","RORDD",109,0)
 ;
"RTN","RORDD",110,0)
 ; [.STATUS]     Status code is returned via this parameter.
"RTN","RORDD",111,0)
 ;               It explains the reason for inactivity:
"RTN","RORDD",112,0)
 ;                 ""  Status unknown or no record
"RTN","RORDD",113,0)
 ;                  4  Patient is pending
"RTN","RORDD",114,0)
 ;                  5  Patient is marked for deletion
"RTN","RORDD",115,0)
 ;
"RTN","RORDD",116,0)
 ; Return Values:
"RTN","RORDD",117,0)
 ;        0  The record is not confirmed
"RTN","RORDD",118,0)
 ;        1  The record is confirmed
"RTN","RORDD",119,0)
 ;
"RTN","RORDD",120,0)
ACTIVE(IEN,CHKDT,STATUS) ;
"RTN","RORDD",121,0)
 N NODE0
"RTN","RORDD",122,0)
 S NODE0=$G(^RORDATA(798,+IEN,0))
"RTN","RORDD",123,0)
 I NODE0=""  S STATUS=""  Q 0
"RTN","RORDD",124,0)
 S STATUS=+$P(NODE0,U,5)
"RTN","RORDD",125,0)
 Q:STATUS=4 0  ; Pending
"RTN","RORDD",126,0)
 Q:STATUS=5 0  ; Marked for deletion
"RTN","RORDD",127,0)
 Q 1           ; Confirmed/Active
"RTN","RORDD",128,0)
 ;
"RTN","RORDD",129,0)
 ;***** CHECKS IF THE REGISTRY RECORD IS MARKED FOR DELETION
"RTN","RORDD",130,0)
 ;NOTE: these records are excluded from the historical extract
"RTN","RORDD",131,0)
 ;
"RTN","RORDD",132,0)
 ; IEN           IEN of the registry record
"RTN","RORDD",133,0)
 ;
"RTN","RORDD",134,0)
 ; Return Values:
"RTN","RORDD",135,0)
 ;        1       The record is marked for deletion
"RTN","RORDD",136,0)
 ;        0       The record is not marked for deletion
"RTN","RORDD",137,0)
 ;
"RTN","RORDD",138,0)
DEL(IEN) ;
"RTN","RORDD",139,0)
 N NODE0,STATUS
"RTN","RORDD",140,0)
 S NODE0=$G(^RORDATA(798,+IEN,0))
"RTN","RORDD",141,0)
 I NODE0=""  Q 0
"RTN","RORDD",142,0)
 S STATUS=+$P(NODE0,U,5)
"RTN","RORDD",143,0)
 Q:STATUS=5 1  ; Marked for deletion
"RTN","RORDD",144,0)
 Q 0           ; Not marked for deletion
"RTN","RORDD",145,0)
 ;
"RTN","RORDD",146,0)
 ;***** DISPLAYS A LIST OF APIs DEFINED IN THE SUBFILE #799.23
"RTN","RORDD",147,0)
 ;
"RTN","RORDD",148,0)
 ; IEN           IEN of the current record of the file #799.2
"RTN","RORDD",149,0)
 ;
"RTN","RORDD",150,0)
APILST(IEN) ;
"RTN","RORDD",151,0)
 N D,DIC,DLAYGO,DZ,RORMSG
"RTN","RORDD",152,0)
 S DIC=$$ROOT^DILFD(799.23,","_(+IEN)_",")  Q:DIC=""
"RTN","RORDD",153,0)
 S D=$$GET1^DID(799.23,.01,,"FIELD LENGTH",,"RORMSG")
"RTN","RORDD",154,0)
 D EN^DDIOL($J(1,D),,"?2"),EN^DDIOL("GETS^DIQ",,"?10")
"RTN","RORDD",155,0)
 S DIC(0)="",D="B",DZ="??"
"RTN","RORDD",156,0)
 S DIC("W")="D EN^DDIOL($P(^(0),U,3)_""^""_$P(^(0),U,2),,""?10"")" ;Naked Ref: ^ROR(799.2,IEN
"RTN","RORDD",157,0)
 D DQ^DICQ
"RTN","RORDD",158,0)
 Q
"RTN","RORDD",159,0)
 ;
"RTN","RORDD",160,0)
 ;***** VALIDATES A NAME OF THE CALLBACK FUNCTION
"RTN","RORDD",161,0)
 ;
"RTN","RORDD",162,0)
 ; MNFP          Minimal number of formal parameters (opt'l).
"RTN","RORDD",163,0)
 ;               If this parameter has a value greater than 1, the
"RTN","RORDD",164,0)
 ;               function makes very simple check of the number of
"RTN","RORDD",165,0)
 ;               formal parameters in the source code.
"RTN","RORDD",166,0)
 ;
"RTN","RORDD",167,0)
 ; This function is intended for use in the input transforms
"RTN","RORDD",168,0)
 ; of registry definition fields. It kills the X variable if it
"RTN","RORDD",169,0)
 ; contains illegal value.
"RTN","RORDD",170,0)
 ;
"RTN","RORDD",171,0)
 ; The function does not allow to use '%' in the routine and
"RTN","RORDD",172,0)
 ; tag names (this is prohibited by VistA SAC).
"RTN","RORDD",173,0)
 ;
"RTN","RORDD",174,0)
 ; If the function cannot obtain the source code of the callback
"RTN","RORDD",175,0)
 ; function (because the code does not exist yet or has been stripped)
"RTN","RORDD",176,0)
 ; or there are not enough formal parameters in the definition of the
"RTN","RORDD",177,0)
 ; function, it issues a warning but does not reject the value.
"RTN","RORDD",178,0)
 ;
"RTN","RORDD",179,0)
 ; Return Values:
"RTN","RORDD",180,0)
 ;        0  Ok
"RTN","RORDD",181,0)
 ;        1  Illegal name (X is killed)
"RTN","RORDD",182,0)
 ;
"RTN","RORDD",183,0)
EP(MNFP) ;
"RTN","RORDD",184,0)
 Q:$G(X)="" 0
"RTN","RORDD",185,0)
 N ENTPNT,TMP
"RTN","RORDD",186,0)
 ;--- Check if the value has the "$$TAG^ROUTINE" format
"RTN","RORDD",187,0)
 I '(X?2"$"1.8UN1"^"1.8UN)  K X  Q 1
"RTN","RORDD",188,0)
 ;--- Check if the routine exists
"RTN","RORDD",189,0)
 S ENTPNT=X,X=$P(X,U,2)
"RTN","RORDD",190,0)
 X ^%ZOSF("TEST")  E  D  K X  Q 1
"RTN","RORDD",191,0)
 . D EN^DDIOL("The '"_X_"' routine does not exist!")
"RTN","RORDD",192,0)
 S X=ENTPNT
"RTN","RORDD",193,0)
 ;--- Skip the enhanced checks when verifying fields
"RTN","RORDD",194,0)
 Q:$G(DIUTIL)="VERIFY FIELDS" 0
"RTN","RORDD",195,0)
 ;--- Get the line of source code
"RTN","RORDD",196,0)
 S ENTPNT=$P(X,"$$",2),TMP=$TR($P($T(@ENTPNT),";")," ")
"RTN","RORDD",197,0)
 ;--- Display a warning if there is no source line
"RTN","RORDD",198,0)
 I TMP=""  D  Q 0
"RTN","RORDD",199,0)
 . S TMP="Make sure that the '"_$P(ENTPNT,U)_"' tag"
"RTN","RORDD",200,0)
 . D EN^DDIOL(TMP_" exists in the '"_$P(ENTPNT,U,2)_"' routine.")
"RTN","RORDD",201,0)
 ;--- Display a warning if there are not enough formal parameters
"RTN","RORDD",202,0)
 I $G(MNFP)>1,$L(TMP,",")<MNFP  D  Q 0
"RTN","RORDD",203,0)
 . S TMP="Make sure that the entry point has at least "_MNFP
"RTN","RORDD",204,0)
 . D EN^DDIOL(TMP_" formal parameter(s).")
"RTN","RORDD",205,0)
 Q 0
"RTN","RORDD",206,0)
 ;
"RTN","RORDD",207,0)
 ;***** VALIDATES A SELECTION RULE EXPRESSION
"RTN","RORDD",208,0)
 ;
"RTN","RORDD",209,0)
 ; FILE          File number that the expression is associated with
"RTN","RORDD",210,0)
 ;
"RTN","RORDD",211,0)
 ; This function is intended for use in the input transforms
"RTN","RORDD",212,0)
 ; of registry definition fields. It kills the X variable if
"RTN","RORDD",213,0)
 ; it contains an illegal value.
"RTN","RORDD",214,0)
 ;
"RTN","RORDD",215,0)
 ; Return Values:
"RTN","RORDD",216,0)
 ;        0  Ok
"RTN","RORDD",217,0)
 ;        1  Illegal expression (X is killed)
"RTN","RORDD",218,0)
 ;
"RTN","RORDD",219,0)
EXPR(FILE) ;
"RTN","RORDD",220,0)
 Q:($G(FILE)'>0)!($G(X)="") 0
"RTN","RORDD",221,0)
 N EXPR,RC,RESULT,RORERROR,RORLOG,RORPARM,TMP
"RTN","RORDD",222,0)
 ;--- Check if the parser routine exists in the UCI
"RTN","RORDD",223,0)
 S EXPR=X,X="RORUPEX"  X ^%ZOSF("TEST")  S X=EXPR  E  Q 0
"RTN","RORDD",224,0)
 ;--- Parse and validate the expression
"RTN","RORDD",225,0)
 S RC=$$PARSER^RORUPEX(FILE,X,.RESULT)
"RTN","RORDD",226,0)
 Q:RC'<0 0  K X
"RTN","RORDD",227,0)
 ;--- Field does not exist
"RTN","RORDD",228,0)
 I RC=-7   D  Q 1
"RTN","RORDD",229,0)
 . S TMP="One of the referenced fields"
"RTN","RORDD",230,0)
 . D EN^DDIOL(TMP_" does not exist in the file #"_FILE_"!")
"RTN","RORDD",231,0)
 ;--- Syntax error in the expression
"RTN","RORDD",232,0)
 I RC=-21  D  Q 1
"RTN","RORDD",233,0)
 . D EN^DDIOL("Invalid expression: '"_EXPR_"'")
"RTN","RORDD",234,0)
 . D EN^DDIOL("Parsed to: '"_$G(RESULT)_"' ")
"RTN","RORDD",235,0)
 ;--- File does not exist
"RTN","RORDD",236,0)
 I RC=-58  D  Q 1
"RTN","RORDD",237,0)
 . D EN^DDIOL("Referenced file #"_FILE_" does not exist!")
"RTN","RORDD",238,0)
 Q 1
"RTN","RORDD",239,0)
 ;
"RTN","RORDD",240,0)
 ;***** CHECKS IF A FIELD OF A NATIONAL DEFINITION CAN BE DELETED
"RTN","RORDD",241,0)
 ;
"RTN","RORDD",242,0)
 ; FILE          Top-level file number
"RTN","RORDD",243,0)
 ; [IEN]         IEN of the current record of the top-level file
"RTN","RORDD",244,0)
 ; [FIELD]       Number of the NATIONAL field.
"RTN","RORDD",245,0)
 ;               If value of this parameter less than zero, local
"RTN","RORDD",246,0)
 ;               modifications of all records will be prohibited.
"RTN","RORDD",247,0)
 ;               By default, the .09 field is used.
"RTN","RORDD",248,0)
 ;
"RTN","RORDD",249,0)
 ; This function is intended for use in the "DEL" node logic
"RTN","RORDD",250,0)
 ; of registry definition fields.
"RTN","RORDD",251,0)
 ;
"RTN","RORDD",252,0)
 ; Return Values:
"RTN","RORDD",253,0)
 ;        0  The value of the field can be deleted
"RTN","RORDD",254,0)
 ;        1  Deletion is prohibited
"RTN","RORDD",255,0)
 ;
"RTN","RORDD",256,0)
VADEL(FILE,IEN,FIELD) ;
"RTN","RORDD",257,0)
 Q:$G(XPDNM)'="" 0
"RTN","RORDD",258,0)
 ;--- An authorized developer can delete anything
"RTN","RORDD",259,0)
 Q:$G(RORPARM("DEVELOPER")) 0
"RTN","RORDD",260,0)
 ;--- Check if the registry definition is a national one
"RTN","RORDD",261,0)
 N RC,RORMSG
"RTN","RORDD",262,0)
 I $G(FIELD)'<0  S RC=0  D:$G(IEN)>0  Q:'RC 0
"RTN","RORDD",263,0)
 . S:'$G(FIELD) FIELD=.09
"RTN","RORDD",264,0)
 . S RC=$$GET1^DIQ(FILE,IEN_",",FIELD,"I",,"RORMSG")
"RTN","RORDD",265,0)
 D EN^DDIOL("You cannot edit a national registry definition!")
"RTN","RORDD",266,0)
 Q 1
"RTN","RORDD",267,0)
 ;
"RTN","RORDD",268,0)
 ;***** CHECKS IF A FIELD OF A NATIONAL DEFINITION CAN BE EDITED
"RTN","RORDD",269,0)
 ;
"RTN","RORDD",270,0)
 ; FILE          Top-level file number
"RTN","RORDD",271,0)
 ; [IEN]         IEN of the current record of the top-level file
"RTN","RORDD",272,0)
 ; [FIELD]       Number of the NATIONAL field.
"RTN","RORDD",273,0)
 ;               If value of this parameter less than zero, local
"RTN","RORDD",274,0)
 ;               modifications of all records will be prohibited.
"RTN","RORDD",275,0)
 ;               By default, the .09 field is used.
"RTN","RORDD",276,0)
 ;
"RTN","RORDD",277,0)
 ; This function is intended for use in the input transforms
"RTN","RORDD",278,0)
 ; of registry definition fields. It kills the X variable if
"RTN","RORDD",279,0)
 ; it contains illegal value.
"RTN","RORDD",280,0)
 ;
"RTN","RORDD",281,0)
 ; Return Values:
"RTN","RORDD",282,0)
 ;        0  The field can be edited
"RTN","RORDD",283,0)
 ;        1  Editing is prohibited (X is killed)
"RTN","RORDD",284,0)
 ;
"RTN","RORDD",285,0)
VAEDT(FILE,IEN,FIELD) ;
"RTN","RORDD",286,0)
 Q:($G(DIUTIL)="VERIFY FIELDS")!($G(XPDNM)'="") 0
"RTN","RORDD",287,0)
 ;--- An authorized developer can edit anything
"RTN","RORDD",288,0)
 Q:$G(RORPARM("DEVELOPER")) 0
"RTN","RORDD",289,0)
 ;--- Check if the registry definition is a national one
"RTN","RORDD",290,0)
 N RC,RORMSG
"RTN","RORDD",291,0)
 I $G(FIELD)'<0  S RC=0  D:$G(IEN)>0  Q:'RC 0
"RTN","RORDD",292,0)
 . S:'$G(FIELD) FIELD=.09
"RTN","RORDD",293,0)
 . S RC=$$GET1^DIQ(FILE,IEN_",",FIELD,"I",,"RORMSG")
"RTN","RORDD",294,0)
 K X
"RTN","RORDD",295,0)
 D EN^DDIOL("You cannot edit a national registry definition!")
"RTN","RORDD",296,0)
 Q 1
"RTN","ROREXT01")
0^14^B52017424^B49949802
"RTN","ROREXT01",1,0)
ROREXT01 ;HCIOFO/SG - EXTRACTION & TRANSMISSION PROCESS ;1/22/06 12:40pm
"RTN","ROREXT01",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","ROREXT01",3,0)
 ;
"RTN","ROREXT01",4,0)
 ; This routine uses the following IAs:
"RTN","ROREXT01",5,0)
 ;
"RTN","ROREXT01",6,0)
 ; #10063  $$S^%ZTLOAD (supported)
"RTN","ROREXT01",7,0)
 ; #10103  $$FMDIFF^XLFDT (supported)
"RTN","ROREXT01",8,0)
 ; #10103  $$NOW^XLFDT (supported)
"RTN","ROREXT01",9,0)
 Q
"RTN","ROREXT01",10,0)
 ;
"RTN","ROREXT01",11,0)
 ;***** INTERNAL ENTRY POINT FOR DATA EXTRACTION
"RTN","ROREXT01",12,0)
 ;
"RTN","ROREXT01",13,0)
 ; .REGLST       Reference to a local array containing registry
"RTN","ROREXT01",14,0)
 ;               names as subscripts and registry IENs as values
"RTN","ROREXT01",15,0)
 ;
"RTN","ROREXT01",16,0)
 ; [RORTASK]     Task Number (if the data extraction is performed
"RTN","ROREXT01",17,0)
 ;               by a separate process)
"RTN","ROREXT01",18,0)
 ;
"RTN","ROREXT01",19,0)
 ; Return Values:
"RTN","ROREXT01",20,0)
 ;       <0  Error code (see MSGLIST^RORERR20)
"RTN","ROREXT01",21,0)
 ;        0  Ok
"RTN","ROREXT01",22,0)
 ;
"RTN","ROREXT01",23,0)
 ; NOTE: The ROREXT and RORPARM local arrays must be properly
"RTN","ROREXT01",24,0)
 ;       initialized before calling this function.
"RTN","ROREXT01",25,0)
 ;
"RTN","ROREXT01",26,0)
INTEXT(REGLST,RORTASK) ;
"RTN","ROREXT01",27,0)
 N RORHL         ; HL7 variables
"RTN","ROREXT01",28,0)
 N RORLOG        ; Log subsystem constants & variables
"RTN","ROREXT01",29,0)
 N RORLRC        ; List of codes of Lab results to be extracted
"RTN","ROREXT01",30,0)
 ;
"RTN","ROREXT01",31,0)
 N COUNTERS,DXBEG,DXEND,HDTIEN,MID,RC,TMP
"RTN","ROREXT01",32,0)
 D INIT^RORUTL01("ROREXT")
"RTN","ROREXT01",33,0)
 S DXBEG=$G(ROREXT("DXBEG")),DXEND="",HDTIEN=0
"RTN","ROREXT01",34,0)
 K ^TMP("RORPTF",$J)
"RTN","ROREXT01",35,0)
 ;--- Open a new log
"RTN","ROREXT01",36,0)
 S TMP=$$SETUP^RORLOG(.REGLST)
"RTN","ROREXT01",37,0)
 S TMP=$S($G(RORTASK)'="":" TASK #"_RORTASK,1:"")
"RTN","ROREXT01",38,0)
 S TMP=$$OPEN^RORLOG(.REGLST,2,"DATA EXTRACTION"_TMP_" STARTED")
"RTN","ROREXT01",39,0)
 D
"RTN","ROREXT01",40,0)
 . ;--- Check the list of registries
"RTN","ROREXT01",41,0)
 . I $D(REGLST)<10  D  Q
"RTN","ROREXT01",42,0)
 . . S RC=$$ERROR^RORERR(-28,,,,"extract data")
"RTN","ROREXT01",43,0)
 . ;--- Lock parameters of the registries being processed
"RTN","ROREXT01",44,0)
 . S RC=$$LOCKREG^RORUTL02(.REGLST,1,,"DATA EXTRACTION")  Q:RC<0
"RTN","ROREXT01",45,0)
 . I 'RC  D  Q
"RTN","ROREXT01",46,0)
 . . S RC=$$ERROR^RORERR(-11,,,,"registries being processed")
"RTN","ROREXT01",47,0)
 . ;--- Check for pending historical data extraction
"RTN","ROREXT01",48,0)
 . I DXBEG'>0  D  I HDTIEN<0  S RC=+HDTIEN  Q
"RTN","ROREXT01",49,0)
 . . S HDTIEN=$$FIND^RORHDT06(.REGLST,.DXBEG,.DXEND)
"RTN","ROREXT01",50,0)
 . ;--- Load and process data extraction rules
"RTN","ROREXT01",51,0)
 . S RC=$$PREPARE^ROREXPR(.REGLST,DXBEG,DXEND)
"RTN","ROREXT01",52,0)
 . I RC<0  S RC=$$ERROR^RORERR(-22)  Q
"RTN","ROREXT01",53,0)
 . ;--- Load and process the historical data extraction parameters
"RTN","ROREXT01",54,0)
 . I HDTIEN>0  D  Q:RC<0
"RTN","ROREXT01",55,0)
 . . S RC=$$PREPARE^RORHDT06(HDTIEN)
"RTN","ROREXT01",56,0)
 . ;--- Reference the historical data extraction definition
"RTN","ROREXT01",57,0)
 . S RC=$$REGREF^RORHDT06(.REGLST,HDTIEN)  Q:RC<0
"RTN","ROREXT01",58,0)
 . ;--- Display the debug information
"RTN","ROREXT01",59,0)
 . D:$G(RORPARM("DEBUG"))>1 DEBUG^ROREXTUT
"RTN","ROREXT01",60,0)
 . ;--- Extract and send the data
"RTN","ROREXT01",61,0)
 . S RC=$$PROCESS(.REGLST)  Q:RC<0
"RTN","ROREXT01",62,0)
 . S COUNTERS=RC,RC=0
"RTN","ROREXT01",63,0)
 . ;--- Update registry parameters
"RTN","ROREXT01",64,0)
 . S TMP=$$TMSTMP^ROREXTUT(.REGLST)
"RTN","ROREXT01",65,0)
 ;--- Unlock parameters of processed registries
"RTN","ROREXT01",66,0)
 S TMP=$$LOCKREG^RORUTL02(.REGLST,0)
"RTN","ROREXT01",67,0)
 ;
"RTN","ROREXT01",68,0)
 ;--- Statistics & Cleanup
"RTN","ROREXT01",69,0)
 S TMP="DATA EXTRACTION "_$S(RC<0:"ABORTED",1:"COMPLETED")
"RTN","ROREXT01",70,0)
 D CLOSE^RORLOG(TMP,$G(COUNTERS))
"RTN","ROREXT01",71,0)
 D:'$G(RORPARM("DEBUG")) INIT^RORUTL01("ROREXT")
"RTN","ROREXT01",72,0)
 K ^TMP("RORPTF",$J)
"RTN","ROREXT01",73,0)
 ;---
"RTN","ROREXT01",74,0)
 Q $S($G(RC)<0:RC,1:0)
"RTN","ROREXT01",75,0)
 ;
"RTN","ROREXT01",76,0)
 ;***** RETURNS THE NEXT PATIENT FOR DATA EXTRACTION
"RTN","ROREXT01",77,0)
 ;
"RTN","ROREXT01",78,0)
 ; PTIEN         Patient IEN (DFN in file #2)
"RTN","ROREXT01",79,0)
 ;
"RTN","ROREXT01",80,0)
 ; .RGIENLST     Reference to a local array containing registry
"RTN","ROREXT01",81,0)
 ;               IENs as subscripts. The IENs of the corresponding
"RTN","ROREXT01",82,0)
 ;               patient's registry records are returned as values.
"RTN","ROREXT01",83,0)
 ;
"RTN","ROREXT01",84,0)
 ; Return Values:
"RTN","ROREXT01",85,0)
 ;        0  No more patients
"RTN","ROREXT01",86,0)
 ;       >0  IEN (DFN) of the next patient who belongs to at least
"RTN","ROREXT01",87,0)
 ;           one of the registries defined by the RGIENLST parameter.
"RTN","ROREXT01",88,0)
 ;
"RTN","ROREXT01",89,0)
NEXTPAT(PTIEN,RGIENLST) ;
"RTN","ROREXT01",90,0)
 N CNT,IEN,REGIEN,STATUS
"RTN","ROREXT01",91,0)
 S CNT=0
"RTN","ROREXT01",92,0)
 F  S PTIEN=$O(^RORDATA(798,"KEY",PTIEN))  Q:PTIEN'>0  D  Q:CNT
"RTN","ROREXT01",93,0)
 . S REGIEN=0
"RTN","ROREXT01",94,0)
 . F  S REGIEN=$O(RGIENLST(REGIEN))  Q:REGIEN'>0  D
"RTN","ROREXT01",95,0)
 . . S RGIENLST(REGIEN)=0
"RTN","ROREXT01",96,0)
 . . S IEN=+$O(^RORDATA(798,"KEY",PTIEN,REGIEN,""))
"RTN","ROREXT01",97,0)
 . . Q:IEN'>0
"RTN","ROREXT01",98,0)
 . . ;With patch 10, status is irrelevant
"RTN","ROREXT01",99,0)
 . . ;I '$$ACTIVE^RORDD(IEN,,.STATUS)  Q:STATUS'=5
"RTN","ROREXT01",100,0)
 . . ;--- Skip a record tagged as "DON'T SEND" or if test patient
"RTN","ROREXT01",101,0)
 . . I (($P($G(^RORDATA(798,IEN,2)),U,4))!($$TESTPAT^RORUTL01(PTIEN))) Q
"RTN","ROREXT01",102,0)
 . . ;--- Consider the record
"RTN","ROREXT01",103,0)
 . . S RGIENLST(REGIEN)=IEN,CNT=CNT+1
"RTN","ROREXT01",104,0)
 Q $S(PTIEN>0:PTIEN,1:0)
"RTN","ROREXT01",105,0)
 ;
"RTN","ROREXT01",106,0)
 ;***** SCANS THE REGISTRY AND EXTRACTS THE DATA
"RTN","ROREXT01",107,0)
 ;
"RTN","ROREXT01",108,0)
 ; .REGLST       Reference to a local array containing registry
"RTN","ROREXT01",109,0)
 ;               names as subscripts and registry IENs as values
"RTN","ROREXT01",110,0)
 ;
"RTN","ROREXT01",111,0)
 ; Return Values:
"RTN","ROREXT01",112,0)
 ;       <0  Error Code
"RTN","ROREXT01",113,0)
 ;      >=0  Statistics
"RTN","ROREXT01",114,0)
 ;             ^1: Total number of processed patients
"RTN","ROREXT01",115,0)
 ;             ^2: Number of patients processed with errors
"RTN","ROREXT01",116,0)
 ;
"RTN","ROREXT01",117,0)
 ; In normal mode this function processes all patients and returns
"RTN","ROREXT01",118,0)
 ; total number of patients and number of patients processed with
"RTN","ROREXT01",119,0)
 ; errors.
"RTN","ROREXT01",120,0)
 ;
"RTN","ROREXT01",121,0)
 ; However, in debug mode 3 the function stops after the first
"RTN","ROREXT01",122,0)
 ; patient processed with error and returns an error code.
"RTN","ROREXT01",123,0)
 ;
"RTN","ROREXT01",124,0)
PROCESS(REGLST) ;
"RTN","ROREXT01",125,0)
 N CNT,DTNEXT,ECNT,PTIEN,RC,REGIEN,REGNAME,RGIENLST,RORBUF,RORMSG,TH,TMP
"RTN","ROREXT01",126,0)
 ;--- Prepare the list of registry IENs
"RTN","ROREXT01",127,0)
 S REGNAME="",REGIEN=0
"RTN","ROREXT01",128,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D  Q:REGIEN<0
"RTN","ROREXT01",129,0)
 . S REGIEN=+REGLST(REGNAME)
"RTN","ROREXT01",130,0)
 . S:REGIEN'>0 REGIEN=$$REGIEN^RORUTL02(REGNAME)
"RTN","ROREXT01",131,0)
 . S:REGIEN>0 RGIENLST(REGIEN)=""
"RTN","ROREXT01",132,0)
 Q:REGIEN<0 REGIEN
"RTN","ROREXT01",133,0)
 ;--- Initialize environment variables
"RTN","ROREXT01",134,0)
 S RC=$$INIT^RORHL7()  Q:RC<0 RC
"RTN","ROREXT01",135,0)
 ;
"RTN","ROREXT01",136,0)
 ;--- Generate the registry state message
"RTN","ROREXT01",137,0)
 S RC=$$CREATE^RORHL7()  Q:RC<0 RC
"RTN","ROREXT01",138,0)
 S REGIEN=0
"RTN","ROREXT01",139,0)
 F  S REGIEN=$O(RGIENLST(REGIEN))  Q:REGIEN'>0  D  Q:RC<0
"RTN","ROREXT01",140,0)
 . S RC=$$REGSTATE^ROREXT03(REGIEN)
"RTN","ROREXT01",141,0)
 Q:RC<0 RC
"RTN","ROREXT01",142,0)
 ;
"RTN","ROREXT01",143,0)
 ;--- Loop through the patients of the registries
"RTN","ROREXT01",144,0)
 S (CNT,ECNT,PTIEN,RC)=0
"RTN","ROREXT01",145,0)
 F  S PTIEN=$$NEXTPAT(PTIEN,.RGIENLST)  Q:PTIEN'>0  D  Q:RC
"RTN","ROREXT01",146,0)
 . ;--- For a queued task only
"RTN","ROREXT01",147,0)
 . I $D(ZTQUEUED)  S RC=0  D  Q:RC<0
"RTN","ROREXT01",148,0)
 . . ;--- Check if task stop has been requested
"RTN","ROREXT01",149,0)
 . . I $$S^%ZTLOAD  S RC=$$ERROR^RORERR(-42)  Q
"RTN","ROREXT01",150,0)
 . . ;--- Check if the task should be suspended
"RTN","ROREXT01",151,0)
 . . Q:'$G(ROREXT("SUSPEND"))
"RTN","ROREXT01",152,0)
 . . Q:$$NOW^XLFDT<$G(DTNEXT)
"RTN","ROREXT01",153,0)
 . . Q:'$$SUSPEND(.DTNEXT)
"RTN","ROREXT01",154,0)
 . . ;--- Suspend the task during the peak hours
"RTN","ROREXT01",155,0)
 . . F  D  Q:'TH!(RC<0)
"RTN","ROREXT01",156,0)
 . . . S TH=$$FMDIFF^XLFDT(DTNEXT,$$NOW^XLFDT,2)
"RTN","ROREXT01",157,0)
 . . . I TH<60  S TH=0  Q       ; Do not HANG for less than a
"RTN","ROREXT01",158,0)
 . . . H $S(TH>3600:3600,1:TH)  ; minute and more than an hour
"RTN","ROREXT01",159,0)
 . . . ;--- Check if task stop has been requested
"RTN","ROREXT01",160,0)
 . . . S:$$S^%ZTLOAD RC=$$ERROR^RORERR(-42)
"RTN","ROREXT01",161,0)
 . ;--- Process the patient's records
"RTN","ROREXT01",162,0)
 . S CNT=CNT+1
"RTN","ROREXT01",163,0)
 . I $G(RORPARM("DEBUG"))>1  W:$E($G(IOST),1,2)="C-" *13,CNT
"RTN","ROREXT01",164,0)
 . S RC=$$PROCPAT(PTIEN,.RGIENLST)
"RTN","ROREXT01",165,0)
 . ;--- Process the error (if any)
"RTN","ROREXT01",166,0)
 . I RC<0  D  S:$G(RORPARM("DEBUG"))<3 RC=0  Q
"RTN","ROREXT01",167,0)
 . . S ECNT=ECNT+1,RC=$$ERROR^RORERR(-15,,,$G(PTIEN))
"RTN","ROREXT01",168,0)
 . ;--- Send the batch HL7 message when the maximum size is reached
"RTN","ROREXT01",169,0)
 . S:$$ISMAXSZ^RORHL7() RC=$$SEND^ROREXT03(.RGIENLST)
"RTN","ROREXT01",170,0)
 Q:RC<0 RC
"RTN","ROREXT01",171,0)
 ;
"RTN","ROREXT01",172,0)
 ;--- Send the remaining data (flush the buffer)
"RTN","ROREXT01",173,0)
 S RC=$$SEND^ROREXT03(.RGIENLST)  Q:RC<0 RC
"RTN","ROREXT01",174,0)
 ;
"RTN","ROREXT01",175,0)
 ;--- Return number of processed patients and number of errors
"RTN","ROREXT01",176,0)
 Q CNT_U_ECNT
"RTN","ROREXT01",177,0)
 ;
"RTN","ROREXT01",178,0)
 ;***** PROCESS THE PATIENT'S REGISTRY RECORDS
"RTN","ROREXT01",179,0)
 ;
"RTN","ROREXT01",180,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","ROREXT01",181,0)
 ;
"RTN","ROREXT01",182,0)
 ; .RGIENLST     Reference to a local array containing registry
"RTN","ROREXT01",183,0)
 ;               IENs as subscripts and IENs of the corresponding
"RTN","ROREXT01",184,0)
 ;               patient's registry records as values.
"RTN","ROREXT01",185,0)
 ;
"RTN","ROREXT01",186,0)
 ; Return Values:
"RTN","ROREXT01",187,0)
 ;       <0  Error Code
"RTN","ROREXT01",188,0)
 ;        0  Ok
"RTN","ROREXT01",189,0)
 ;
"RTN","ROREXT01",190,0)
PROCPAT(PTIEN,RGIENLST) ;
"RTN","ROREXT01",191,0)
 N RORERRDL      ; Default error location
"RTN","ROREXT01",192,0)
 ;
"RTN","ROREXT01",193,0)
 N BATCHID,CNT,DXDTS,IEN,MSHPTR,RC,REGIEN,RORMSH,TMP
"RTN","ROREXT01",194,0)
 D CLEAR^RORERR("PROCPAT^ROREXT01")
"RTN","ROREXT01",195,0)
 ;
"RTN","ROREXT01",196,0)
 ;--- Compile the data extraction time frames
"RTN","ROREXT01",197,0)
 S (CNT,RC,REGIEN)=0
"RTN","ROREXT01",198,0)
 F  S REGIEN=$O(RGIENLST(REGIEN))  Q:REGIEN'>0  D  Q:RC<0
"RTN","ROREXT01",199,0)
 . S IEN=+RGIENLST(REGIEN)  Q:IEN'>0
"RTN","ROREXT01",200,0)
 . S RC=$$DXPERIOD^ROREXTUT(.DXDTS,IEN,PTIEN)
"RTN","ROREXT01",201,0)
 . S:'RC CNT=CNT+1
"RTN","ROREXT01",202,0)
 . S:RC>0 RGIENLST(REGIEN)=0
"RTN","ROREXT01",203,0)
 Q:RC<0 RC
"RTN","ROREXT01",204,0)
 ;--- If the patient should be skipped in all registries
"RTN","ROREXT01",205,0)
 ;    that are being processed, then do not perform the data
"RTN","ROREXT01",206,0)
 ;--- extraction for this patient at all.
"RTN","ROREXT01",207,0)
 I 'CNT  D:$G(RORPARM("DEBUG"))  Q 0
"RTN","ROREXT01",208,0)
 . D LOG^RORLOG(4,"There is no data to extract.",PTIEN)
"RTN","ROREXT01",209,0)
 ;
"RTN","ROREXT01",210,0)
 ;--- Create an HL7 message for the patient
"RTN","ROREXT01",211,0)
 S MSHPTR=$$CREATE^RORHL7(.RORMSH)  Q:MSHPTR<0 MSHPTR
"RTN","ROREXT01",212,0)
 S RC=$$MESSAGE^ROREXT02(PTIEN,.RGIENLST,.DXDTS,$G(ROREXT("HDTIEN")))
"RTN","ROREXT01",213,0)
 ;
"RTN","ROREXT01",214,0)
 ;--- Delete the unfinished message from the ^TMP("HLS",$J)
"RTN","ROREXT01",215,0)
 ;    if there is no data to send (RC>0) or there was an error
"RTN","ROREXT01",216,0)
 ;    during the data extraction (RC<0). Return the error code
"RTN","ROREXT01",217,0)
 ;--- in the latter case.
"RTN","ROREXT01",218,0)
 I RC!($O(^TMP("HLS",$J,""),-1)=MSHPTR)  D  Q:RC<0 RC
"RTN","ROREXT01",219,0)
 . D ROLLBACK^RORHL7(MSHPTR)  S:'RC RC=1
"RTN","ROREXT01",220,0)
 ;
"RTN","ROREXT01",221,0)
 ;--- Do not change state of the record(s) during the
"RTN","ROREXT01",222,0)
 ;--- historical data extraction
"RTN","ROREXT01",223,0)
 I $G(ROREXT("HDTIEN"))'>0  D  Q:RC<0 RC
"RTN","ROREXT01",224,0)
 . S TMP=$S('RC:$P(RORMSH,$E(RORMSH,4),10),1:"")
"RTN","ROREXT01",225,0)
 . S RC=$$UPDRECS^ROREXT03(PTIEN,.RGIENLST,TMP,$P(DXDTS,U,2))
"RTN","ROREXT01",226,0)
 ;---
"RTN","ROREXT01",227,0)
 Q 0
"RTN","ROREXT01",228,0)
 ;
"RTN","ROREXT01",229,0)
 ;***** CHECKS IF THE TASK SHOULD BE SUSPENDED
"RTN","ROREXT01",230,0)
 ;
"RTN","ROREXT01",231,0)
 ; .DTNEXT       Date/Time of the next event (suspend/resume)
"RTN","ROREXT01",232,0)
 ;               is returned via this parameter
"RTN","ROREXT01",233,0)
 ;
"RTN","ROREXT01",234,0)
 ; Return Values:
"RTN","ROREXT01",235,0)
 ;        0  Continue/Resume
"RTN","ROREXT01",236,0)
 ;        1  Suspend
"RTN","ROREXT01",237,0)
 ;
"RTN","ROREXT01",238,0)
SUSPEND(DTNEXT) ;
"RTN","ROREXT01",239,0)
 N DATE,NOW,SUSPEND,TIME,TS,TR
"RTN","ROREXT01",240,0)
 S TS=$P(ROREXT("SUSPEND"),U,1)
"RTN","ROREXT01",241,0)
 S TR=$P(ROREXT("SUSPEND"),U,2)
"RTN","ROREXT01",242,0)
 S NOW=$$NOW^XLFDT,DATE=NOW\1
"RTN","ROREXT01",243,0)
 ;--- A work day
"RTN","ROREXT01",244,0)
 I $$WDCHK^RORUTL01(DATE)  D  Q SUSPEND
"RTN","ROREXT01",245,0)
 . S TIME=NOW-DATE,SUSPEND=0
"RTN","ROREXT01",246,0)
 . I TIME<TS   S DTNEXT=DATE+TS  Q
"RTN","ROREXT01",247,0)
 . I TIME'<TR  S DTNEXT=$$WDNEXT^RORUTL01(DATE)+TS  Q
"RTN","ROREXT01",248,0)
 . S DTNEXT=DATE+TR,SUSPEND=1
"RTN","ROREXT01",249,0)
 ;--- Saturday, Sunday or Holiday
"RTN","ROREXT01",250,0)
 S DTNEXT=$$WDNEXT^RORUTL01(DATE)+TS
"RTN","ROREXT01",251,0)
 Q 0
"RTN","ROREXT02")
0^10^B43142852^B40742469
"RTN","ROREXT02",1,0)
ROREXT02 ;HCIOFO/SG - DEFAULT MESSAGE BUILDER ;12/7/05 10:44am
"RTN","ROREXT02",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","ROREXT02",3,0)
 ;
"RTN","ROREXT02",4,0)
 ; This routine uses the following IAs:
"RTN","ROREXT02",5,0)
 ;
"RTN","ROREXT02",6,0)
 ; #2056    $$GET1^DIQ (supported)
"RTN","ROREXT02",7,0)
 Q
"RTN","ROREXT02",8,0)
 ;
"RTN","ROREXT02",9,0)
 ;***** CHECKS IF DEMOGRAPHIC DATA HAS BEEN UPDATED
"RTN","ROREXT02",10,0)
 ;
"RTN","ROREXT02",11,0)
 ; .RGIENLST     Reference to a local array containing registry
"RTN","ROREXT02",12,0)
 ;               IENs as subscripts and IENs of the corresponding
"RTN","ROREXT02",13,0)
 ;               patient's registry records as values.
"RTN","ROREXT02",14,0)
 ;
"RTN","ROREXT02",15,0)
 ; Return Values:
"RTN","ROREXT02",16,0)
 ;       <0  Error Code
"RTN","ROREXT02",17,0)
 ;        0  Demographic data is unchanged
"RTN","ROREXT02",18,0)
 ;       >0  Demographic data has been updated
"RTN","ROREXT02",19,0)
 ;
"RTN","ROREXT02",20,0)
DEMCHK(RGIENLST) ;
"RTN","ROREXT02",21,0)
 N DEM,IENS,RC,REGIEN,RORMSG
"RTN","ROREXT02",22,0)
 S (DEM,RC,REGIEN)=0
"RTN","ROREXT02",23,0)
 F  S REGIEN=$O(RGIENLST(REGIEN))  Q:REGIEN'>0  D  Q:DEM!(RC<0)
"RTN","ROREXT02",24,0)
 . S IENS=+RGIENLST(REGIEN)_","  Q:IENS'>0
"RTN","ROREXT02",25,0)
 . S DEM=+$$GET1^DIQ(798,IENS,4,"I",,"RORMSG")
"RTN","ROREXT02",26,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","ROREXT02",27,0)
 Q $S(RC<0:RC,1:DEM)
"RTN","ROREXT02",28,0)
 ;
"RTN","ROREXT02",29,0)
 ;***** EXTRACTS AND PREPARES LABORATORY DATA
"RTN","ROREXT02",30,0)
 ;
"RTN","ROREXT02",31,0)
 ; PTIEN         Patient IEN
"RTN","ROREXT02",32,0)
 ;
"RTN","ROREXT02",33,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","ROREXT02",34,0)
 ;               data extraction time frames are stored.
"RTN","ROREXT02",35,0)
 ;
"RTN","ROREXT02",36,0)
 ; [HDTMODE]     If this parameter is defined and non-zero, start and
"RTN","ROREXT02",37,0)
 ;               end dates are specimen collection dates. Otherwise,
"RTN","ROREXT02",38,0)
 ;               they are dates of the results.
"RTN","ROREXT02",39,0)
 ;
"RTN","ROREXT02",40,0)
 ; The function uses node ^TMP("RORTMP",$J) as a temporary storage.
"RTN","ROREXT02",41,0)
 ;
"RTN","ROREXT02",42,0)
 ; Return Values:
"RTN","ROREXT02",43,0)
 ;       <0  Error Code
"RTN","ROREXT02",44,0)
 ;        0  Ok
"RTN","ROREXT02",45,0)
 ;
"RTN","ROREXT02",46,0)
LABDATA(PTIEN,DXDTS,HDTMODE) ;
"RTN","ROREXT02",47,0)
 N ENDT,IDX,RC,RORTMP,STDT,TMP
"RTN","ROREXT02",48,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","ROREXT02",49,0)
 S (IDX,RC)=0
"RTN","ROREXT02",50,0)
 F  S IDX=$O(DXDTS(1,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","ROREXT02",51,0)
 . S STDT=$P(DXDTS(1,IDX),U),ENDT=$P(DXDTS(1,IDX),U,2)
"RTN","ROREXT02",52,0)
 . ;--- Get the Lab results
"RTN","ROREXT02",53,0)
 . K @RORTMP  S TMP=$S($G(HDTMODE):"^CD",1:"^RAD")
"RTN","ROREXT02",54,0)
 . S RC=$$LABRSLTS^RORUTL02(PTIEN,STDT_TMP,ENDT_TMP,RORTMP)
"RTN","ROREXT02",55,0)
 . Q:RC<0
"RTN","ROREXT02",56,0)
 . ;--- Call the Lab data post-processor
"RTN","ROREXT02",57,0)
 . S RC=$$LABPROC(RORTMP,PTIEN)
"RTN","ROREXT02",58,0)
 . ;---
"RTN","ROREXT02",59,0)
 D FREE^RORTMP(RORTMP)
"RTN","ROREXT02",60,0)
 Q $S(RC<0:RC,1:0)
"RTN","ROREXT02",61,0)
 ;
"RTN","ROREXT02",62,0)
 ;***** LABORATORY DATA POST-PROCESSOR
"RTN","ROREXT02",63,0)
 ;
"RTN","ROREXT02",64,0)
 ; ROR8TMP       Closed root of the array (local or global), which
"RTN","ROREXT02",65,0)
 ;               contains the data loaded by the $$GCPR^LA7QRY
"RTN","ROREXT02",66,0)
 ;
"RTN","ROREXT02",67,0)
 ; PTIEN         Patient IEN
"RTN","ROREXT02",68,0)
 ;
"RTN","ROREXT02",69,0)
 ; Return Values:
"RTN","ROREXT02",70,0)
 ;       <0  Error Code
"RTN","ROREXT02",71,0)
 ;        0  Ok
"RTN","ROREXT02",72,0)
 ;
"RTN","ROREXT02",73,0)
LABPROC(ROR8TMP,PTIEN) ;
"RTN","ROREXT02",74,0)
 N BUF,CS,DFLTSITE,FS,I,J,LABC,SEG,TMP
"RTN","ROREXT02",75,0)
 ;--- Extract separators from the MSH segment
"RTN","ROREXT02",76,0)
 S BUF=$G(@ROR8TMP@(1))
"RTN","ROREXT02",77,0)
 S:$E(BUF,1,3)="MSH" CS=$E(BUF,5)
"RTN","ROREXT02",78,0)
 S:$G(CS)="" CS="^"
"RTN","ROREXT02",79,0)
 ;--- Initialize constants and variables
"RTN","ROREXT02",80,0)
 S LABC="LABC"_CS_"Lab Comment"_CS_"VA080"
"RTN","ROREXT02",81,0)
 ;--- Get the default station number and name
"RTN","ROREXT02",82,0)
 S DFLTSITE=$$SITE^RORUTL03(CS)
"RTN","ROREXT02",83,0)
 ;
"RTN","ROREXT02",84,0)
 ;--- Add the results to the message
"RTN","ROREXT02",85,0)
 S I=0
"RTN","ROREXT02",86,0)
 F  S I=$O(@ROR8TMP@(I))  Q:I=""  D
"RTN","ROREXT02",87,0)
 . ;--- Load the full segment
"RTN","ROREXT02",88,0)
 . D LOADSEG^RORHL7A(.SEG,$NA(@ROR8TMP@(I)))  Q:$G(SEG(0))=""
"RTN","ROREXT02",89,0)
 . D
"RTN","ROREXT02",90,0)
 . . ;--- Use the default station if the local one is missing
"RTN","ROREXT02",91,0)
 . . I SEG(0)="OBX"  D  Q
"RTN","ROREXT02",92,0)
 . . . S:$P($G(SEG(15)),CS)="" SEG(15)=DFLTSITE
"RTN","ROREXT02",93,0)
 . . ;--- Leave only the code of the Provider
"RTN","ROREXT02",94,0)
 . . I SEG(0)="OBR"  D  Q
"RTN","ROREXT02",95,0)
 . . . S SEG(16)=+$G(SEG(16)),SEG(24)="LAB"
"RTN","ROREXT02",96,0)
 . . ;--- Replace NTE's with OBX's
"RTN","ROREXT02",97,0)
 . . I SEG(0)="NTE"  D  Q
"RTN","ROREXT02",98,0)
 . . . K TMP  M TMP=SEG(3)  K SEG
"RTN","ROREXT02",99,0)
 . . . S SEG(0)="OBX"
"RTN","ROREXT02",100,0)
 . . . S SEG(2)="ST",SEG(3)=LABC,SEG(4)="LCOMM"
"RTN","ROREXT02",101,0)
 . . . M SEG(5)=TMP
"RTN","ROREXT02",102,0)
 . . . S SEG(11)="F"
"RTN","ROREXT02",103,0)
 . . ;--- Skip all other segments
"RTN","ROREXT02",104,0)
 . . K SEG
"RTN","ROREXT02",105,0)
 . ;--- Store the segment
"RTN","ROREXT02",106,0)
 . D:$D(SEG)>1 ADDSEG^RORHL7(.SEG)
"RTN","ROREXT02",107,0)
 Q 0
"RTN","ROREXT02",108,0)
 ;
"RTN","ROREXT02",109,0)
 ;***** EXTRACTS PATIENT'S DATA AND CREATES THE MESSAGE BODY
"RTN","ROREXT02",110,0)
 ;
"RTN","ROREXT02",111,0)
 ; PTIEN         Patient IEN
"RTN","ROREXT02",112,0)
 ;
"RTN","ROREXT02",113,0)
 ; .RGIENLST     Reference to a local array containing registry
"RTN","ROREXT02",114,0)
 ;               IENs as subscripts and IENs of the corresponding
"RTN","ROREXT02",115,0)
 ;               patient's registry records as values.
"RTN","ROREXT02",116,0)
 ;
"RTN","ROREXT02",117,0)
 ; .DXDTS        Either a single time frame in StartDate^EndDate
"RTN","ROREXT02",118,0)
 ;               format or a reference to a local variable containing
"RTN","ROREXT02",119,0)
 ;               the list of data extraction time frames. The main
"RTN","ROREXT02",120,0)
 ;               time frame should be stored in the root node:
"RTN","ROREXT02",121,0)
 ;
"RTN","ROREXT02",122,0)
 ;  DXDTS(         MainStartDate^MainEndDate  (FileMan)
"RTN","ROREXT02",123,0)
 ;    DataArea,
"RTN","ROREXT02",124,0)
 ;      i)         StartDate^EndDate          (FileMan)
"RTN","ROREXT02",125,0)
 ;
"RTN","ROREXT02",126,0)
 ;               See the $$DXPERIOD^ROREXTUT function for details.
"RTN","ROREXT02",127,0)
 ;
"RTN","ROREXT02",128,0)
 ; [HDTMODE]     This parameter is defined and non-zero during the
"RTN","ROREXT02",129,0)
 ;               historical data extraction.
"RTN","ROREXT02",130,0)
 ;
"RTN","ROREXT02",131,0)
 ; Return Values:
"RTN","ROREXT02",132,0)
 ;       <0  Error Code
"RTN","ROREXT02",133,0)
 ;        0  Ok
"RTN","ROREXT02",134,0)
 ;       >0  Nothing to send
"RTN","ROREXT02",135,0)
 ;
"RTN","ROREXT02",136,0)
MESSAGE(PTIEN,RGIENLST,DXDTS,HDTMODE) ;
"RTN","ROREXT02",137,0)
 N RORDEM        ; Update demographics
"RTN","ROREXT02",138,0)
 ;
"RTN","ROREXT02",139,0)
 N CLINPTR,CSRPTR,DEMPTR,PV1PTR,RC,REGIEN,RORMSG,RORPTR,TMP
"RTN","ROREXT02",140,0)
 S HDTMODE=+$G(HDTMODE)
"RTN","ROREXT02",141,0)
 ;--- If only the main time frame is provided then
"RTN","ROREXT02",142,0)
 ;--- generate the data-specific ones automatically
"RTN","ROREXT02",143,0)
 I $D(DXDTS)<10  D  D DXMERGE^ROREXTUT(.DXDTS)
"RTN","ROREXT02",144,0)
 . D DXADD^ROREXTUT(.DXDTS,$P(DXDTS,U),$P(DXDTS,U,2),0,1)
"RTN","ROREXT02",145,0)
 ;--- Initialize variables
"RTN","ROREXT02",146,0)
 S RC=$$INIT^RORHL7()  Q:RC<0 RC
"RTN","ROREXT02",147,0)
 S RORDEM=$$DEMCHK(.RGIENLST)
"RTN","ROREXT02",148,0)
 ;
"RTN","ROREXT02",149,0)
 ;=== Demographic data segments
"RTN","ROREXT02",150,0)
 S DEMPTR=$$PTR^RORHL7
"RTN","ROREXT02",151,0)
 S RC=$$PID^RORHL01(PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",152,0)
 ;--- Period of Service
"RTN","ROREXT02",153,0)
 S RC=$$ZSP^RORHL01(PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",154,0)
 ;--- Rated Disabilities
"RTN","ROREXT02",155,0)
 S RC=$$ZRD^RORHL01(PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",156,0)
 ;
"RTN","ROREXT02",157,0)
 ;=== Inpatient and Outpatient Encounter Data
"RTN","ROREXT02",158,0)
 S PV1PTR=$$PTR^RORHL7
"RTN","ROREXT02",159,0)
 ;--- Inpatient
"RTN","ROREXT02",160,0)
 S RC=$$EN1^RORHL08(PTIEN,.DXDTS,"PV1")  Q:RC<0 RC
"RTN","ROREXT02",161,0)
 ;--- Outpatient
"RTN","ROREXT02",162,0)
 S RC=$$EN1^RORHL09(PTIEN,.DXDTS,"PV1")  Q:RC<0 RC
"RTN","ROREXT02",163,0)
 ;
"RTN","ROREXT02",164,0)
 ;=== Required CSR segment (dummy)
"RTN","ROREXT02",165,0)
 S CSRPTR=$$PTR^RORHL7
"RTN","ROREXT02",166,0)
 S RC=$$CSR^RORHL02(,PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",167,0)
 ;
"RTN","ROREXT02",168,0)
 ;=== Add other encounter data segments
"RTN","ROREXT02",169,0)
 S CLINPTR=$$PTR^RORHL7
"RTN","ROREXT02",170,0)
 ;---Inpatient
"RTN","ROREXT02",171,0)
 S RC=$$EN1^RORHL08(PTIEN,.DXDTS,"OBR")    Q:RC<0 RC
"RTN","ROREXT02",172,0)
 ;--- Outpatient
"RTN","ROREXT02",173,0)
 S RC=$$EN1^RORHL09(PTIEN,.DXDTS,"OBR")    Q:RC<0 RC
"RTN","ROREXT02",174,0)
 ;--- Radiology
"RTN","ROREXT02",175,0)
 S RC=$$EN1^RORHL04(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",176,0)
 ;--- Autopsy
"RTN","ROREXT02",177,0)
 S RC=$$EN1^RORHL05(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",178,0)
 ;--- Surgical Pathology
"RTN","ROREXT02",179,0)
 S RC=$$EN1^RORHL10(PTIEN,.DXDTS,HDTMODE)  Q:RC<0 RC
"RTN","ROREXT02",180,0)
 ;--- Cytopathology
"RTN","ROREXT02",181,0)
 S RC=$$EN1^RORHL11(PTIEN,.DXDTS,HDTMODE)  Q:RC<0 RC
"RTN","ROREXT02",182,0)
 ;--- Microbiology
"RTN","ROREXT02",183,0)
 S RC=$$EN1^RORHL12(PTIEN,.DXDTS,HDTMODE)  Q:RC<0 RC
"RTN","ROREXT02",184,0)
 ;--- EKG (Medical Procedures)
"RTN","ROREXT02",185,0)
 S RC=$$EN1^RORHL13(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",186,0)
 ;--- Allergy
"RTN","ROREXT02",187,0)
 S RC=$$EN1^RORHL14(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",188,0)
 ;--- IV
"RTN","ROREXT02",189,0)
 S RC=$$EN1^RORHL15(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",190,0)
 ;--- Vitals
"RTN","ROREXT02",191,0)
 S RC=$$EN1^RORHL16(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",192,0)
 ;--- Problem List
"RTN","ROREXT02",193,0)
 S RC=$$EN1^RORHL17(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",194,0)
 ;--- Lab data
"RTN","ROREXT02",195,0)
 S RC=$$LABDATA(PTIEN,.DXDTS,HDTMODE)      Q:RC<0 RC
"RTN","ROREXT02",196,0)
 ;--- Pharmacy
"RTN","ROREXT02",197,0)
 S RC=$$EN1^RORHL03(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",198,0)
 ;--- Immunization
"RTN","ROREXT02",199,0)
 S RC=$$EN1^RORHL18(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",200,0)
 ;--- Skin Test Results
"RTN","ROREXT02",201,0)
 S RC=$$EN1^RORHL19(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",202,0)
 ;
"RTN","ROREXT02",203,0)
 ;=== Analyze the structure of the message
"RTN","ROREXT02",204,0)
 S RORPTR=$$PTR^RORHL7
"RTN","ROREXT02",205,0)
 ;--- If the demographic data has not changed since the previous
"RTN","ROREXT02",206,0)
 ;    data extraction and no clinical data has been added to the
"RTN","ROREXT02",207,0)
 ;--- message, then remove the demographic section completely.
"RTN","ROREXT02",208,0)
 I 'RORDEM,RORPTR'>CLINPTR,CSRPTR'>PV1PTR  D
"RTN","ROREXT02",209,0)
 . D ROLLBACK^RORHL7(DEMPTR,1)  S CLINPTR=0
"RTN","ROREXT02",210,0)
 ;
"RTN","ROREXT02",211,0)
 ;=== Registry Data
"RTN","ROREXT02",212,0)
 S REGIEN=0
"RTN","ROREXT02",213,0)
 F  S REGIEN=$O(RGIENLST(REGIEN)),RC=0  Q:REGIEN'>0  D  Q:RC<0
"RTN","ROREXT02",214,0)
 . S IEN=+RGIENLST(REGIEN)  Q:IEN'>0
"RTN","ROREXT02",215,0)
 . ;--- If no clinical or demographics data is sent and the local
"RTN","ROREXT02",216,0)
 . ;    registry data has not been modified since the last data
"RTN","ROREXT02",217,0)
 . ;--- extraction, then do not include the registry data section.
"RTN","ROREXT02",218,0)
 . I 'CLINPTR  D  Q:RC
"RTN","ROREXT02",219,0)
 . . S RC='$$GET1^DIQ(798,IEN_",",5,"I",,"RORMSG")
"RTN","ROREXT02",220,0)
 . . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,PTIEN,798,IEN_",")
"RTN","ROREXT02",221,0)
 . ;---
"RTN","ROREXT02",222,0)
 . I $G(ROREXT("MSGBLD",REGIEN))'=""  D
"RTN","ROREXT02",223,0)
 . . X "S RC="_ROREXT("MSGBLD",REGIEN)_"(IEN,PTIEN,.DXDTS)"
"RTN","ROREXT02",224,0)
 . E  S RC=$$REGDATA(IEN,PTIEN,.DXDTS)
"RTN","ROREXT02",225,0)
 ;
"RTN","ROREXT02",226,0)
 ;=== Analyze the structure of the message
"RTN","ROREXT02",227,0)
 S RORPTR=$$PTR^RORHL7
"RTN","ROREXT02",228,0)
 Q (RORPTR'>DEMPTR)
"RTN","ROREXT02",229,0)
 ;
"RTN","ROREXT02",230,0)
 ;***** EXTRACTS REGISTRY-SPECIFIC DATA
"RTN","ROREXT02",231,0)
 ;
"RTN","ROREXT02",232,0)
 ; RORIEN        IEN of the patient record in the registry
"RTN","ROREXT02",233,0)
 ;
"RTN","ROREXT02",234,0)
 ; PTIEN         Patient IEN
"RTN","ROREXT02",235,0)
 ;
"RTN","ROREXT02",236,0)
 ; .DXDTS        Data extraction time frames
"RTN","ROREXT02",237,0)
 ;
"RTN","ROREXT02",238,0)
 ; [HDTMODE]     This parameter is defined and non-zero during the
"RTN","ROREXT02",239,0)
 ;               historical data extraction.
"RTN","ROREXT02",240,0)
 ;
"RTN","ROREXT02",241,0)
 ; Return Values:
"RTN","ROREXT02",242,0)
 ;       <0  Error Code
"RTN","ROREXT02",243,0)
 ;        0  Ok
"RTN","ROREXT02",244,0)
 ;       >0  Nothing to send
"RTN","ROREXT02",245,0)
 ;
"RTN","ROREXT02",246,0)
REGDATA(RORIEN,PTIEN,DXDTS,HDTMODE) ;
"RTN","ROREXT02",247,0)
 N IENS,RC
"RTN","ROREXT02",248,0)
 S IENS=RORIEN_","
"RTN","ROREXT02",249,0)
 S RC=$$PID^RORHL01(PTIEN)       Q:RC<0 RC
"RTN","ROREXT02",250,0)
 S RC=$$CSR^RORHL02(IENS,PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",251,0)
 S RC=$$CSP^RORHL02(IENS,DXDTS)  Q:RC<0 RC
"RTN","ROREXT02",252,0)
 Q 0
"RTN","RORHDT04")
0^17^B57779616^B50817494
"RTN","RORHDT04",1,0)
RORHDT04 ;HCIOFO/SG - HISTORICAL DATA EXTRACTION PROCESS ;1/22/06 8:18pm
"RTN","RORHDT04",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","RORHDT04",3,0)
 ;
"RTN","RORHDT04",4,0)
 ; This routine uses the following IAs:
"RTN","RORHDT04",5,0)
 ;
"RTN","RORHDT04",6,0)
 ; #2320  CLOSE^ZISH (supported)
"RTN","RORHDT04",7,0)
 ; #2053  FILE^DIE (supported)
"RTN","RORHDT04",8,0)
 ; #2055  $$ROOT^DILFD (supported)
"RTN","RORHDT04",9,0)
 Q
"RTN","RORHDT04",10,0)
 ;
"RTN","RORHDT04",11,0)
 ;***** DATA EXTRACTION PROCESS
"RTN","RORHDT04",12,0)
 ;
"RTN","RORHDT04",13,0)
 ; .REGLST       Reference to a local array containing registry
"RTN","RORHDT04",14,0)
 ;               names as subscripts and registry IENs as values
"RTN","RORHDT04",15,0)
 ;
"RTN","RORHDT04",16,0)
 ; HDEIEN        Data Extract IEN
"RTN","RORHDT04",17,0)
 ; TASKIEN       Task IEN
"RTN","RORHDT04",18,0)
 ;
"RTN","RORHDT04",19,0)
 ; FAM           File Access Mode
"RTN","RORHDT04",20,0)
 ;
"RTN","RORHDT04",21,0)
 ; Return Values:
"RTN","RORHDT04",22,0)
 ;       <0  Error code
"RTN","RORHDT04",23,0)
 ;      >=0  Statistics
"RTN","RORHDT04",24,0)
 ;             ^1: Total number of processed patients
"RTN","RORHDT04",25,0)
 ;             ^2: Number of patients processed with errors
"RTN","RORHDT04",26,0)
 ;
"RTN","RORHDT04",27,0)
EXTRACT(REGLST,HDEIEN,TASKIEN,FAM) ;
"RTN","RORHDT04",28,0)
 N ROREXT        ; Data extraction descriptor
"RTN","RORHDT04",29,0)
 N RORHL         ; HL7 variables
"RTN","RORHDT04",30,0)
 N RORLRC        ; List of codes of Lab results to be extracted
"RTN","RORHDT04",31,0)
 ;
"RTN","RORHDT04",32,0)
 N CNT           ; Number of processed registry records
"RTN","RORHDT04",33,0)
 N ECNT          ; Number of records processed with errors
"RTN","RORHDT04",34,0)
 N FILE          ; Name of the output file
"RTN","RORHDT04",35,0)
 N OUTDIR        ; Name of the output directory
"RTN","RORHDT04",36,0)
 ;
"RTN","RORHDT04",37,0)
 N BDT,EDT,NEXT,POP,RC,REGIEN,REGNAME,RGIENLST,RRBIEN,RREIEN,STOP,TMP
"RTN","RORHDT04",38,0)
 K ^TMP("RORHDT",$J,"PR"),^TMP("HLS",$J),^TMP("RORPTF",$J)
"RTN","RORHDT04",39,0)
 S (CNT,ECNT,STOP)=0,RORHDT("BHS")=1
"RTN","RORHDT04",40,0)
 ;--- Prepare the list of registry IENs
"RTN","RORHDT04",41,0)
 S REGNAME="",REGIEN=0
"RTN","RORHDT04",42,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D  Q:REGIEN<0
"RTN","RORHDT04",43,0)
 . S REGIEN=+REGLST(REGNAME)
"RTN","RORHDT04",44,0)
 . S:REGIEN'>0 REGIEN=$$REGIEN^RORUTL02(REGNAME)
"RTN","RORHDT04",45,0)
 . S:REGIEN>0 RGIENLST(REGIEN)=""
"RTN","RORHDT04",46,0)
 Q:REGIEN<0 REGIEN
"RTN","RORHDT04",47,0)
 ;
"RTN","RORHDT04",48,0)
 ;=== Load parameters
"RTN","RORHDT04",49,0)
 S RC=$$HDEPARM^RORHDT05(HDEIEN,.BDT,.EDT,.OUTDIR)
"RTN","RORHDT04",50,0)
 Q:RC<0 RC
"RTN","RORHDT04",51,0)
 S RC=$$TASKPARM^RORHDT05(HDEIEN,TASKIEN,.RRBIEN,.RREIEN,.FILE)
"RTN","RORHDT04",52,0)
 Q:RC<0 RC
"RTN","RORHDT04",53,0)
 ;
"RTN","RORHDT04",54,0)
 ;=== Prepare data extraction rules
"RTN","RORHDT04",55,0)
 S RC=$$PREPARE^ROREXPR(.REGLST,BDT,EDT)
"RTN","RORHDT04",56,0)
 Q:RC<0 $$ERROR^RORERR(-22)
"RTN","RORHDT04",57,0)
 ;--- Load and process historical data extraction parameters
"RTN","RORHDT04",58,0)
 S RC=$$PREPARE^RORHDT06(HDEIEN)  Q:RC<0 RC
"RTN","RORHDT04",59,0)
 K ROREXT("MAXHL7SIZE")  ; Do not limit the size
"RTN","RORHDT04",60,0)
 ;
"RTN","RORHDT04",61,0)
 ;=== Initialize the HL7 environment
"RTN","RORHDT04",62,0)
 S RC=$$INIT^RORHL7()  Q:RC<0 RC
"RTN","RORHDT04",63,0)
 ;
"RTN","RORHDT04",64,0)
 ;=== Delete the old output host file(s)
"RTN","RORHDT04",65,0)
 S TMP=$$DELFILES^RORHDT05(OUTDIR,FILE)
"RTN","RORHDT04",66,0)
 ;
"RTN","RORHDT04",67,0)
 D
"RTN","RORHDT04",68,0)
 . N COMMIT,IENS,NODE,NRTC,PTIEN
"RTN","RORHDT04",69,0)
 . S NRTC=100 ; Number of records to commit
"RTN","RORHDT04",70,0)
 . ;
"RTN","RORHDT04",71,0)
 . ;=== Try to re-extract the erroneous records
"RTN","RORHDT04",72,0)
 . S NODE=$$ROOT^DILFD(799.641,","_(+TASKIEN)_","_(+HDEIEN)_",",1)
"RTN","RORHDT04",73,0)
 . S NODE=$NA(@NODE@("B"))
"RTN","RORHDT04",74,0)
 . S PTIEN=0,RC=0
"RTN","RORHDT04",75,0)
 . F  D  Q:RC!STOP!(PTIEN'>0)
"RTN","RORHDT04",76,0)
 . . K ^TMP("HLS",$J)
"RTN","RORHDT04",77,0)
 . . F  S PTIEN=$O(@NODE@(PTIEN))  Q:PTIEN'>0  D  Q:RC!'((CNT-ECNT)#NRTC)
"RTN","RORHDT04",78,0)
 . . . S RC=$$LOOP^RORTSK01()
"RTN","RORHDT04",79,0)
 . . . I RC<0  S:RC=-42 STOP=1  Q
"RTN","RORHDT04",80,0)
 . . . S RC=$$PROCREC(PTIEN,.RGIENLST),CNT=CNT+1
"RTN","RORHDT04",81,0)
 . . . S ^TMP("RORHDT",$J,"PR",PTIEN)=RC
"RTN","RORHDT04",82,0)
 . . . I RC'<0  S RC=0  Q
"RTN","RORHDT04",83,0)
 . . . ;--- Process the error
"RTN","RORHDT04",84,0)
 . . . S RC=$$ERROR^RORERR(-15,,,PTIEN),ECNT=ECNT+1
"RTN","RORHDT04",85,0)
 . . . S:$G(RORPARM("DEBUG"))<3 RC=0
"RTN","RORHDT04",86,0)
 . . I RC<0  Q:'STOP
"RTN","RORHDT04",87,0)
 . . ;--- Commit the data
"RTN","RORHDT04",88,0)
 . . S TMP=$$COMMIT^RORHDT05(OUTDIR,FILE)
"RTN","RORHDT04",89,0)
 . . S:TMP<0 RC=TMP
"RTN","RORHDT04",90,0)
 . Q:STOP!(RC=-34)
"RTN","RORHDT04",91,0)
 . ;
"RTN","RORHDT04",92,0)
 . ;=== Extract the remaining registry data
"RTN","RORHDT04",93,0)
 . S PTIEN=$S(RRBIEN>0:+$O(^RORDATA(798,"KEY",RRBIEN),-1),1:0)
"RTN","RORHDT04",94,0)
 . S RC=0
"RTN","RORHDT04",95,0)
 . F  D  Q:RC!STOP!(PTIEN'>0)
"RTN","RORHDT04",96,0)
 . . K ^TMP("HLS",$J)  S COMMIT=0
"RTN","RORHDT04",97,0)
 . . F  S PTIEN=$$NEXTPAT(PTIEN,.RGIENLST)  Q:PTIEN'>0  D  Q:RC!COMMIT
"RTN","RORHDT04",98,0)
 . . . S RC=$$LOOP^RORTSK01()
"RTN","RORHDT04",99,0)
 . . . I RC<0  S:RC=-42 STOP=1  Q
"RTN","RORHDT04",100,0)
 . . . I RREIEN>0,PTIEN'<RREIEN  S PTIEN="",RC=1  Q
"RTN","RORHDT04",101,0)
 . . . Q:$D(^TMP("RORHDT",$J,"PR",PTIEN))
"RTN","RORHDT04",102,0)
 . . . S RC=$$PROCREC(PTIEN,.RGIENLST),CNT=CNT+1
"RTN","RORHDT04",103,0)
 . . . I RC'<0  S COMMIT='((CNT-ECNT)#NRTC),RC=0  Q
"RTN","RORHDT04",104,0)
 . . . ;--- Process the error
"RTN","RORHDT04",105,0)
 . . . S RC=$$ERROR^RORERR(-15,,,PTIEN),ECNT=ECNT+1
"RTN","RORHDT04",106,0)
 . . . S:$G(RORPARM("DEBUG"))<3 RC=0
"RTN","RORHDT04",107,0)
 . . . S TMP=$$ADDERR^RORHDT05(HDEIEN,TASKIEN,PTIEN)
"RTN","RORHDT04",108,0)
 . . . S:TMP<0 RC=TMP
"RTN","RORHDT04",109,0)
 . . I RC<0  Q:'STOP
"RTN","RORHDT04",110,0)
 . . ;--- Commit the data
"RTN","RORHDT04",111,0)
 . . S NEXT=$S(COMMIT:$$NEXTPAT(PTIEN,.RGIENLST),1:PTIEN)
"RTN","RORHDT04",112,0)
 . . S TMP=$$COMMIT^RORHDT05(OUTDIR,FILE)
"RTN","RORHDT04",113,0)
 . . S:TMP<0 RC=TMP
"RTN","RORHDT04",114,0)
 ;
"RTN","RORHDT04",115,0)
 ;--- The $$COMMIT^RORHDT05 returns -34 if it was not able to create
"RTN","RORHDT04",116,0)
 ;--- the output file (wrong directory name, protection error, etc.).
"RTN","RORHDT04",117,0)
 D:RC'=-34
"RTN","RORHDT04",118,0)
 . N NODE,RORFDA,RORMSG
"RTN","RORHDT04",119,0)
 . ;
"RTN","RORHDT04",120,0)
 . ;=== Write the batch trailer segment and close the file if
"RTN","RORHDT04",121,0)
 . ;=== the batch is not empty. Otherwise, record a warning.
"RTN","RORHDT04",122,0)
 . I '$G(RORHDT("BHS"))  D
"RTN","RORHDT04",123,0)
 . . S TMP=$S(ECNT!(RC<0):"Completed with errors",STOP:"Stopped",1:"")
"RTN","RORHDT04",124,0)
 . . U IO  W $$BTS^RORHL7A($$MSGCNT^RORHL7,TMP),$C(13)
"RTN","RORHDT04",125,0)
 . . D CLOSE^%ZISH("HL7FILE")
"RTN","RORHDT04",126,0)
 . E  D ERROR^RORERR(-89)
"RTN","RORHDT04",127,0)
 . ;
"RTN","RORHDT04",128,0)
 . ;=== Update the NEXT RECORD IEN field in the task record
"RTN","RORHDT04",129,0)
 . I $D(NEXT)  D:NEXT'>0
"RTN","RORHDT04",130,0)
 . . ;--- If the task completed successfully, the NEXT RECORD IEN
"RTN","RORHDT04",131,0)
 . . ;    field is set to an empty string. If the task is restarted
"RTN","RORHDT04",132,0)
 . . ;--- afterwards, it will re-extract all data again.
"RTN","RORHDT04",133,0)
 . . I 'ECNT  S NEXT=""  Q
"RTN","RORHDT04",134,0)
 . . ;--- If completed with errors, use IEN of the last record
"RTN","RORHDT04",135,0)
 . . ;--- processed by the task incremented by 1.
"RTN","RORHDT04",136,0)
 . . I RREIEN>0  S NEXT=RREIEN+1  Q
"RTN","RORHDT04",137,0)
 . . ;--- Or the IEN of the last patient record incremented by 1
"RTN","RORHDT04",138,0)
 . . ;--- (in case of the last/single task).
"RTN","RORHDT04",139,0)
 . . S NEXT=$O(^RORDATA(798,"KEY",""),-1)+1
"RTN","RORHDT04",140,0)
 . . ;--- When the task is restarted, it will try to re-extract only
"RTN","RORHDT04",141,0)
 . . ;    erroneous records and will not process already extracted
"RTN","RORHDT04",142,0)
 . . ;    data (the PTIEN will not be less than the RREIEN or the
"RTN","RORHDT04",143,0)
 . . ;--- $ORDER function will not return a value greater than zero).
"RTN","RORHDT04",144,0)
 . E  Q:(RC<0)!ECNT!STOP  S NEXT=""
"RTN","RORHDT04",145,0)
 . ;
"RTN","RORHDT04",146,0)
 . ;=== Update the task record
"RTN","RORHDT04",147,0)
 . S IENS=(+TASKIEN)_","_(+HDEIEN)_","
"RTN","RORHDT04",148,0)
 . S RORFDA(799.64,IENS,.04)=NEXT
"RTN","RORHDT04",149,0)
 . D FILE^DIE("K","RORFDA","RORMSG")
"RTN","RORHDT04",150,0)
 . S TMP=$$DBS^RORERR("RORMSG",-9,,,799.64,IENS)
"RTN","RORHDT04",151,0)
 ;
"RTN","RORHDT04",152,0)
 ;=== Cleanup
"RTN","RORHDT04",153,0)
 K ^TMP("RORPTF",$J)
"RTN","RORHDT04",154,0)
 S:RC'<0 RC=$$CLRERRS^RORHDT05(HDEIEN,TASKIEN)
"RTN","RORHDT04",155,0)
 Q $S(RC<0:RC,1:CNT_U_ECNT)
"RTN","RORHDT04",156,0)
 ;
"RTN","RORHDT04",157,0)
 ;***** RETURNS THE NEXT PATIENT FOR DATA EXTRACTION
"RTN","RORHDT04",158,0)
 ;
"RTN","RORHDT04",159,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORHDT04",160,0)
 ;
"RTN","RORHDT04",161,0)
 ; .RGIENLST     Reference to a local array containing registry
"RTN","RORHDT04",162,0)
 ;               IENs as subscripts. The IENs of the corresponding
"RTN","RORHDT04",163,0)
 ;               patient's registry records are returned as values.
"RTN","RORHDT04",164,0)
 ;
"RTN","RORHDT04",165,0)
 ; Return Values:
"RTN","RORHDT04",166,0)
 ;        0  No more patients
"RTN","RORHDT04",167,0)
 ;       >0  IEN (DFN) of the next patient who belongs to at least
"RTN","RORHDT04",168,0)
 ;           one of the registries defined by the RGIENLST parameter.
"RTN","RORHDT04",169,0)
 ;
"RTN","RORHDT04",170,0)
NEXTPAT(PTIEN,RGIENLST) ;
"RTN","RORHDT04",171,0)
 N CNT,IEN,REGIEN
"RTN","RORHDT04",172,0)
 S CNT=0
"RTN","RORHDT04",173,0)
 F  S PTIEN=$O(^RORDATA(798,"KEY",PTIEN))  Q:PTIEN'>0  D  Q:CNT
"RTN","RORHDT04",174,0)
 . S REGIEN=0
"RTN","RORHDT04",175,0)
 . F  S REGIEN=$O(RGIENLST(REGIEN))  Q:REGIEN'>0  D
"RTN","RORHDT04",176,0)
 . . S RGIENLST(REGIEN)=0
"RTN","RORHDT04",177,0)
 . . S IEN=+$O(^RORDATA(798,"KEY",PTIEN,REGIEN,""))
"RTN","RORHDT04",178,0)
 . . Q:IEN'>0
"RTN","RORHDT04",179,0)
 . . ;************************************************************
"RTN","RORHDT04",180,0)
 . . ; Patch 10: also include pending patients
"RTN","RORHDT04",181,0)
 . . ;--- Skip inactive records (pending and marked for deletion)
"RTN","RORHDT04",182,0)
 . . ;Q:'$$ACTIVE^RORDD(IEN)
"RTN","RORHDT04",183,0)
 . . ;************************************************************
"RTN","RORHDT04",184,0)
 . . ;--- skip patients marked for deletion
"RTN","RORHDT04",185,0)
 . . I $$DEL^RORDD(IEN) Q
"RTN","RORHDT04",186,0)
 . . ;--- Skip records tagged as "DON'T SEND" and skip test patients
"RTN","RORHDT04",187,0)
 . . I (($P($G(^RORDATA(798,IEN,2)),U,4))!($$TESTPAT^RORUTL01(PTIEN))) Q
"RTN","RORHDT04",188,0)
 . . ;--- Consider the record
"RTN","RORHDT04",189,0)
 . . S RGIENLST(REGIEN)=IEN,CNT=CNT+1
"RTN","RORHDT04",190,0)
 Q $S(PTIEN>0:PTIEN,1:0)
"RTN","RORHDT04",191,0)
 ;
"RTN","RORHDT04",192,0)
 ;***** PROCESSES A RECORD IN THE REGISTRY
"RTN","RORHDT04",193,0)
 ;
"RTN","RORHDT04",194,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORHDT04",195,0)
 ;
"RTN","RORHDT04",196,0)
 ; .RGIENLST     Reference to a local array containing registry
"RTN","RORHDT04",197,0)
 ;               IENs as subscripts and IENs of the corresponding
"RTN","RORHDT04",198,0)
 ;               patient's registry records as values.
"RTN","RORHDT04",199,0)
 ;
"RTN","RORHDT04",200,0)
 ; Return Values:
"RTN","RORHDT04",201,0)
 ;       <0  Error code
"RTN","RORHDT04",202,0)
 ;        0  Ok
"RTN","RORHDT04",203,0)
 ;        1  Nothing has been extracted
"RTN","RORHDT04",204,0)
 ;
"RTN","RORHDT04",205,0)
PROCREC(PTIEN,RGIENLST) ;
"RTN","RORHDT04",206,0)
 N RORERRDL      ; Default error location
"RTN","RORHDT04",207,0)
 ;
"RTN","RORHDT04",208,0)
 N BATCHID,CNT,DXDTS,IEN,MSHPTR,RC,REGIEN,RORMSH,TMP
"RTN","RORHDT04",209,0)
 D CLEAR^RORERR("PROCREC^RORHDT04")
"RTN","RORHDT04",210,0)
 ;
"RTN","RORHDT04",211,0)
 ;--- Compile the data extraction time frames
"RTN","RORHDT04",212,0)
 S (CNT,RC,REGIEN)=0
"RTN","RORHDT04",213,0)
 F  S REGIEN=$O(RGIENLST(REGIEN))  Q:REGIEN'>0  D  Q:RC<0
"RTN","RORHDT04",214,0)
 . S IEN=+RGIENLST(REGIEN)  Q:IEN'>0
"RTN","RORHDT04",215,0)
 . S RC=$$DXPERIOD^ROREXTUT(.DXDTS,IEN,PTIEN)
"RTN","RORHDT04",216,0)
 . S:'RC CNT=CNT+1
"RTN","RORHDT04",217,0)
 . S:RC>0 RGIENLST(REGIEN)=0
"RTN","RORHDT04",218,0)
 Q:RC<0 RC
"RTN","RORHDT04",219,0)
 ;--- If the patient should be skipped in all registries
"RTN","RORHDT04",220,0)
 ;    that are being processed, then do not perform the data
"RTN","RORHDT04",221,0)
 ;--- extraction for this patient at all.
"RTN","RORHDT04",222,0)
 I 'CNT  D:$G(RORPARM("DEBUG"))  Q 0
"RTN","RORHDT04",223,0)
 . D LOG^RORLOG(4,"There is no data to extract.",PTIEN)
"RTN","RORHDT04",224,0)
 ;
"RTN","RORHDT04",225,0)
 ;--- Create an HL7 message for the patient
"RTN","RORHDT04",226,0)
 S MSHPTR=$$CREATE^RORHL7(.RORMSH)  Q:MSHPTR<0 MSHPTR
"RTN","RORHDT04",227,0)
 S RC=$$MESSAGE^ROREXT02(PTIEN,.RGIENLST,.DXDTS,$G(ROREXT("HDTIEN")))
"RTN","RORHDT04",228,0)
 ;
"RTN","RORHDT04",229,0)
 ;--- Delete the unfinished message from the ^TMP("HLS",$J)
"RTN","RORHDT04",230,0)
 ;    if there is no data to send (RC>0) or there was an error
"RTN","RORHDT04",231,0)
 ;    during the data extraction (RC<0). Return the error code
"RTN","RORHDT04",232,0)
 ;--- in the latter case.
"RTN","RORHDT04",233,0)
 I RC!($O(^TMP("HLS",$J,""),-1)=MSHPTR)  D  Q:RC<0 RC
"RTN","RORHDT04",234,0)
 . D ROLLBACK^RORHL7(MSHPTR)  S:'RC RC=1
"RTN","RORHDT04",235,0)
 ;---
"RTN","RORHDT04",236,0)
 Q RC
"RTN","RORHL12")
0^2^B62261520^B9125680
"RTN","RORHL12",1,0)
RORHL12 ;HOIFO/BH,SG - HL7 MICROBIOLOGY DATA: OBR ;3/13/06 9:24am
"RTN","RORHL12",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,10**;Feb 17, 2006;Build 32
"RTN","RORHL12",3,0)
 ;
"RTN","RORHL12",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL12",5,0)
 ;
"RTN","RORHL12",6,0)
 ; #4335         $$GETDATA^LA7UTL1A (controlled)
"RTN","RORHL12",7,0)
 ; #10000        C^%DTC (supported)
"RTN","RORHL12",8,0)
 ; #10103        FMTHL7^XLFDT (supported)
"RTN","RORHL12",9,0)
 ; #2056         GET1^DIQ (supported)
"RTN","RORHL12",10,0)
 ;
"RTN","RORHL12",11,0)
 Q
"RTN","RORHL12",12,0)
 ;
"RTN","RORHL12",13,0)
 ;***** SEARCH FOR MICROBIOLOGY DATA
"RTN","RORHL12",14,0)
 ;
"RTN","RORHL12",15,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL12",16,0)
 ;
"RTN","RORHL12",17,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL12",18,0)
 ;               data extraction time frames are stored.
"RTN","RORHL12",19,0)
 ;
"RTN","RORHL12",20,0)
 ; RORMODE       The type of extract to be performed:
"RTN","RORHL12",21,0)
 ;                 0  Nightly extract
"RTN","RORHL12",22,0)
 ;                 1  Historical extract
"RTN","RORHL12",23,0)
 ;
"RTN","RORHL12",24,0)
 ; Return Values:
"RTN","RORHL12",25,0)
 ;       <0  Error code
"RTN","RORHL12",26,0)
 ;        0  Ok
"RTN","RORHL12",27,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL12",28,0)
 ;       
"RTN","RORHL12",29,0)
 ;-----------------------------------------------------------------------------
"RTN","RORHL12",30,0)
 ; NIGHTLY EXTRACT FOR A PATIENT THAT HAS NOT BEEN INCLUDED IN A PREVIOUS
"RTN","RORHL12",31,0)
 ; EXTRACT:
"RTN","RORHL12",32,0)
 ; This will consist of 1 call to the Lab API to retrieve all micro data
"RTN","RORHL12",33,0)
 ; collected during the extraction date range.
"RTN","RORHL12",34,0)
 ; 
"RTN","RORHL12",35,0)
 ;     st                                      end
"RTN","RORHL12",36,0)
 ;     |----------------------------------------| 
"RTN","RORHL12",37,0)
 ;     <========================================> collection date
"RTN","RORHL12",38,0)
 ;
"RTN","RORHL12",39,0)
 ;-----------------------------------------------------------------------------
"RTN","RORHL12",40,0)
 ; NIGHTLY EXTRACT FOR A PATIENT THAT HAS BEEN INCLUDED IN A PREVIOUS EXTRACT:
"RTN","RORHL12",41,0)
 ; This will consist of 3 calls to the Lab API.   It will pull micro data with
"RTN","RORHL12",42,0)
 ; a completion date in the date range, and it also pulls micro data that was 
"RTN","RORHL12",43,0)
 ; collected exactly 60 days before the start date but has no completion date.
"RTN","RORHL12",44,0)
 ; 
"RTN","RORHL12",45,0)
 ; 1. Call using a COMPLETION date in the original date range, but only
"RTN","RORHL12",46,0)
 ; include records in the extract from this call that have a collection date
"RTN","RORHL12",47,0)
 ; on or after the start date minus 60 days.
"RTN","RORHL12",48,0)
 ; 
"RTN","RORHL12",49,0)
 ;       st-60 days             st   end
"RTN","RORHL12",50,0)
 ;          |--------------------|----| 
"RTN","RORHL12",51,0)
 ;          <=========================> collection date
"RTN","RORHL12",52,0)
 ;                               <====> completion date
"RTN","RORHL12",53,0)
 ; 
"RTN","RORHL12",54,0)
 ; 2. Call using a COMPLETION date range of 60 days prior to the extraction
"RTN","RORHL12",55,0)
 ; start date through the original end date.  Records returned from this call
"RTN","RORHL12",56,0)
 ; are completed, and will be compared to the records returned in the next call.
"RTN","RORHL12",57,0)
 ; 
"RTN","RORHL12",58,0)
 ; 3. Call again to get all records COLLECTED exactly 60 days from the 
"RTN","RORHL12",59,0)
 ; extraction date range.  Only send the records from call #3 that were NOT
"RTN","RORHL12",60,0)
 ; returned from call #2.  This sends all records that were collected at
"RTN","RORHL12",61,0)
 ; exactly 60 days before the extraction date range, but have not yet been
"RTN","RORHL12",62,0)
 ; completed.
"RTN","RORHL12",63,0)
 ; 
"RTN","RORHL12",64,0)
 ;       st-60      end-60      st   end
"RTN","RORHL12",65,0)
 ;          |-----------|--------|----| 
"RTN","RORHL12",66,0)
 ;          ==============              collection date 60 days prior to date range
"RTN","RORHL12",67,0)
 ;                                      no completion date
"RTN","RORHL12",68,0)
 ; 
"RTN","RORHL12",69,0)
 ;-----------------------------------------------------------------------------
"RTN","RORHL12",70,0)
 ; HISTORICAL EXTRACT:
"RTN","RORHL12",71,0)
 ; This will consist of 1 call to the Lab API to retrieve all micro data
"RTN","RORHL12",72,0)
 ; collected during the extraction date range.
"RTN","RORHL12",73,0)
 ; 
"RTN","RORHL12",74,0)
 ;     st                                      end
"RTN","RORHL12",75,0)
 ;     |----------------------------------------| 
"RTN","RORHL12",76,0)
 ;     <========================================> collection date
"RTN","RORHL12",77,0)
 ;
"RTN","RORHL12",78,0)
 ;-----------------------------------------------------------------------------
"RTN","RORHL12",79,0)
EN1(RORDFN,DXDTS,RORMODE) ;
"RTN","RORHL12",80,0)
 N ERRCNT,IDX,LRDFN,RC,RCL,RORENDT,RORMIIEN,RORREF,RORSTDT,RORTMP,TMP
"RTN","RORHL12",81,0)
 S (ERRCNT,RC)=0
"RTN","RORHL12",82,0)
 ;--- Which is being requested - historical or nightly extract?
"RTN","RORHL12",83,0)
 S RORMODE=$S($G(RORMODE):"HIST",1:"NIGHT")
"RTN","RORHL12",84,0)
 ;
"RTN","RORHL12",85,0)
 S LRDFN=+$$LABREF^RORUTL18(RORDFN)  Q:LRDFN'>0 0
"RTN","RORHL12",86,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","RORHL12",87,0)
 ;
"RTN","RORHL12",88,0)
 S IDX=0
"RTN","RORHL12",89,0)
 F  S IDX=$O(DXDTS(11,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","RORHL12",90,0)
 . S RORSTDT=$P(DXDTS(11,IDX),U),RORENDT=$P(DXDTS(11,IDX),U,2)
"RTN","RORHL12",91,0)
 . K @RORTMP
"RTN","RORHL12",92,0)
 . ;---NIGHTLY EXTRACTION---
"RTN","RORHL12",93,0)
 . I RORMODE="NIGHT" D
"RTN","RORHL12",94,0)
 .. ;get 798 IEN (ROR REGISTRY RECORD)
"RTN","RORHL12",95,0)
 .. N ROR798 S ROR798=$O(^RORDATA(798,"B",RORDFN,0))
"RTN","RORHL12",96,0)
 .. Q:'$G(ROR798)
"RTN","RORHL12",97,0)
 .. ;get DATA ACKNOWLEDGED UNTIL field (#9.1) in 798
"RTN","RORHL12",98,0)
 .. N RORACK K RORMSG S RORACK=$$GET1^DIQ(798,ROR798_",",9.1,,,"RORMSG")
"RTN","RORHL12",99,0)
 .. Q:$D(RORMSG("DIERR"))
"RTN","RORHL12",100,0)
 .. ;--------------------------------------------------------------------------
"RTN","RORHL12",101,0)
 .. I $G(RORACK)="" D  Q  ;patient has not been included in a previous extract
"RTN","RORHL12",102,0)
 ... ;call lab api using 'collection date' mode
"RTN","RORHL12",103,0)
 ... S RCL=$$GETDATA^LA7UTL1A(LRDFN,RORSTDT,RORENDT,"CD",RORTMP)
"RTN","RORHL12",104,0)
 ... I RCL<0  D  Q
"RTN","RORHL12",105,0)
 .... S TMP="$$GETDATA^LA7UTL1A"
"RTN","RORHL12",106,0)
 .... S RC=$$ERROR^RORERR(-56,,$P(RCL,U,2),RORDFN,+RCL,TMP)
"RTN","RORHL12",107,0)
 ... ;--- Process the returned data and build the message segments
"RTN","RORHL12",108,0)
 ... S RORMIIEN=""  F  S RORMIIEN=$O(@RORTMP@(LRDFN,RORMIIEN))  Q:RORMIIEN=""  D
"RTN","RORHL12",109,0)
 .... S RORREF=$NA(@RORTMP@(LRDFN,RORMIIEN))
"RTN","RORHL12",110,0)
 .... S TMP=$$OBR(RORREF)
"RTN","RORHL12",111,0)
 .... I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL12",112,0)
 .... S TMP=$$OBX^RORHL121(RORREF)
"RTN","RORHL12",113,0)
 .... I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL12",114,0)
 .... Q
"RTN","RORHL12",115,0)
 ... Q
"RTN","RORHL12",116,0)
 .. ;--------------------------------------------------------------------------
"RTN","RORHL12",117,0)
 .. I $L(RORACK)>0 D  Q  ;patient has been included in a previous extract
"RTN","RORHL12",118,0)
 ... N X,X1,X2,RORST60
"RTN","RORHL12",119,0)
 ... ;subtract 60 from start date
"RTN","RORHL12",120,0)
 ... S X1=RORSTDT,X2=-60 D C^%DTC S RORST60=X K X,X1,X2
"RTN","RORHL12",121,0)
 ... ;subtract 60 from end date
"RTN","RORHL12",122,0)
 ... N X,X1,X2,ROREND60
"RTN","RORHL12",123,0)
 ... S X1=RORENDT,X2=-60 D C^%DTC S ROREND60=X K X,X1,X2
"RTN","RORHL12",124,0)
 ... K @RORTMP
"RTN","RORHL12",125,0)
 ... ;CALL #1 using 'completion date' mode
"RTN","RORHL12",126,0)
 ... S RCL=$$GETDATA^LA7UTL1A(LRDFN,RORSTDT,RORENDT,"RAD",RORTMP)
"RTN","RORHL12",127,0)
 ... I RCL<0  D  Q
"RTN","RORHL12",128,0)
 .... S TMP="$$GETDATA^LA7UTL1A"
"RTN","RORHL12",129,0)
 .... S RC=$$ERROR^RORERR(-56,,$P(RCL,U,2),RORDFN,+RCL,TMP)
"RTN","RORHL12",130,0)
 ... ;--- Process the returned data and get the collection date
"RTN","RORHL12",131,0)
 ... S RORMIIEN=""
"RTN","RORHL12",132,0)
 ... F  S RORMIIEN=$O(@RORTMP@(LRDFN,RORMIIEN))  Q:RORMIIEN=""  D
"RTN","RORHL12",133,0)
 .... S RORREF=$NA(@RORTMP@(LRDFN,RORMIIEN))
"RTN","RORHL12",134,0)
 .... N RORCOLLDT S RORCOLLDT=$G(@RORREF@(0,.01,"I")) ;collection date
"RTN","RORHL12",135,0)
 .... Q:$G(RORCOLLDT)'>0  ;quit if collection date is null
"RTN","RORHL12",136,0)
 .... ;If the collection date was in the 60 days prior to the extraction start
"RTN","RORHL12",137,0)
 .... ;date, build the segments.
"RTN","RORHL12",138,0)
 .... I RORCOLLDT'<RORST60 D  Q
"RTN","RORHL12",139,0)
 ..... S TMP=$$OBR(RORREF)
"RTN","RORHL12",140,0)
 ..... I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL12",141,0)
 ..... S TMP=$$OBX^RORHL121(RORREF)
"RTN","RORHL12",142,0)
 ..... I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL12",143,0)
 ..... Q
"RTN","RORHL12",144,0)
 .... Q
"RTN","RORHL12",145,0)
 ... N RORTMP2,RCL2
"RTN","RORHL12",146,0)
 ... S RORTMP2=$$ALLOC^RORTMP() K @RORTMP2
"RTN","RORHL12",147,0)
 ... ;CALL #2 using 'completion date' mode.  Will be used further down.
"RTN","RORHL12",148,0)
 ... S RCL2=$$GETDATA^LA7UTL1A(LRDFN,RORST60,RORENDT,"RAD",RORTMP2)
"RTN","RORHL12",149,0)
 ... I RCL2<0  D  Q
"RTN","RORHL12",150,0)
 .... S TMP="$$GETDATA^LA7UTL1A"
"RTN","RORHL12",151,0)
 .... S RC=$$ERROR^RORERR(-56,,$P(RCL2,U,2),RORDFN,+RCL2,TMP)
"RTN","RORHL12",152,0)
 ... N RORTMP3,RCL3
"RTN","RORHL12",153,0)
 ... S RORTMP3=$$ALLOC^RORTMP() K @RORTMP3
"RTN","RORHL12",154,0)
 ... ;CALL #3 using 'collection date' mode - 60 days prior to range
"RTN","RORHL12",155,0)
 ... S RCL3=$$GETDATA^LA7UTL1A(LRDFN,RORST60,ROREND60,"CD",RORTMP3)
"RTN","RORHL12",156,0)
 ... I RCL3<0  D  Q
"RTN","RORHL12",157,0)
 .... S TMP="$$GETDATA^LA7UTL1A"
"RTN","RORHL12",158,0)
 .... S RC=$$ERROR^RORERR(-56,,$P(RCL2,U,2),RORDFN,+RCL2,TMP)
"RTN","RORHL12",159,0)
 ... ;--- Process the returned records from call #3 and compare them
"RTN","RORHL12",160,0)
 ... ;to the records returned from call #2
"RTN","RORHL12",161,0)
 ... S RORMIIEN=""
"RTN","RORHL12",162,0)
 ... F  S RORMIIEN=$O(@RORTMP3@(LRDFN,RORMIIEN))  Q:RORMIIEN=""  D
"RTN","RORHL12",163,0)
 .... S RORREF=$NA(@RORTMP3@(LRDFN,RORMIIEN))
"RTN","RORHL12",164,0)
 .... N RORCOLLDT
"RTN","RORHL12",165,0)
 .... S RORCOLLDT=$G(@RORREF@(0,.01,"I")) ;collection date
"RTN","RORHL12",166,0)
 .... ;quit if the record is on the "completed" output from call #2
"RTN","RORHL12",167,0)
 .... Q:$D(@RORTMP2@(LRDFN,RORMIIEN))
"RTN","RORHL12",168,0)
 .... ;otherwise, build message segments
"RTN","RORHL12",169,0)
 .... S TMP=$$OBR(RORREF)
"RTN","RORHL12",170,0)
 .... I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL12",171,0)
 .... S TMP=$$OBX^RORHL121(RORREF)
"RTN","RORHL12",172,0)
 .... I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL12",173,0)
 .... D FREE^RORTMP(RORTMP2)
"RTN","RORHL12",174,0)
 .... D FREE^RORTMP(RORTMP3)
"RTN","RORHL12",175,0)
 ... Q
"RTN","RORHL12",176,0)
 . ;--------------------------------------------------------------------------
"RTN","RORHL12",177,0)
 . I RORMODE="HIST" D  ;historical extract
"RTN","RORHL12",178,0)
 .. ;call lab api using 'collection date' mode
"RTN","RORHL12",179,0)
 .. S RCL=$$GETDATA^LA7UTL1A(LRDFN,RORSTDT,RORENDT,"CD",RORTMP)
"RTN","RORHL12",180,0)
 .. ;--- Process the returned data and build the message segments
"RTN","RORHL12",181,0)
 .. S RORMIIEN=""
"RTN","RORHL12",182,0)
 .. F  S RORMIIEN=$O(@RORTMP@(LRDFN,RORMIIEN))  Q:RORMIIEN=""  D
"RTN","RORHL12",183,0)
 ... S RORREF=$NA(@RORTMP@(LRDFN,RORMIIEN))
"RTN","RORHL12",184,0)
 ... S TMP=$$OBR(RORREF) ;build OBR segment
"RTN","RORHL12",185,0)
 ... I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL12",186,0)
 ... S TMP=$$OBX^RORHL121(RORREF) ;build OBX segment
"RTN","RORHL12",187,0)
 ... I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL12",188,0)
 .. Q
"RTN","RORHL12",189,0)
 . Q
"RTN","RORHL12",190,0)
 ;
"RTN","RORHL12",191,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORHL12",192,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL12",193,0)
 ;
"RTN","RORHL12",194,0)
 ;***** MICROBIOLOGY OBR SEGMENT BUILDER
"RTN","RORHL12",195,0)
 ;
"RTN","RORHL12",196,0)
 ; RORREF        Global reference for MI entry
"RTN","RORHL12",197,0)
 ;
"RTN","RORHL12",198,0)
 ; Return Values:
"RTN","RORHL12",199,0)
 ;       <0  Error code
"RTN","RORHL12",200,0)
 ;        0  Ok
"RTN","RORHL12",201,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL12",202,0)
 ;
"RTN","RORHL12",203,0)
OBR(RORREF) ;
"RTN","RORHL12",204,0)
 N CS,ERRCNT,RC,RORSEG
"RTN","RORHL12",205,0)
 S (ERRCNT,RC)=0
"RTN","RORHL12",206,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL12",207,0)
 ;
"RTN","RORHL12",208,0)
 ;--- Initialize the segment
"RTN","RORHL12",209,0)
 S RORSEG(0)="OBR"
"RTN","RORHL12",210,0)
 ;
"RTN","RORHL12",211,0)
 ;--- OBR-3 - Accession Number
"RTN","RORHL12",212,0)
 S TMP=$G(@RORREF@(0,.06,"I"))
"RTN","RORHL12",213,0)
 I TMP=""  D  Q RC
"RTN","RORHL12",214,0)
 . S RC=$$ERROR^RORERR(-100,,,,"No accession #","$$GETDATA^LA7UTL1A")
"RTN","RORHL12",215,0)
 S RORSEG(3)=TMP
"RTN","RORHL12",216,0)
 ;
"RTN","RORHL12",217,0)
 ;--- OBR-4 - Universal Service ID
"RTN","RORHL12",218,0)
 S RORSEG(4)="87999"_CS_"MICROBIOLOGY"_CS_"C4"
"RTN","RORHL12",219,0)
 ;
"RTN","RORHL12",220,0)
 ;--- OBR-7 - Accession Date
"RTN","RORHL12",221,0)
 S TMP=$$FMTHL7^XLFDT($G(@RORREF@(0,.01,"I")))
"RTN","RORHL12",222,0)
 I TMP'>0  D  Q RC
"RTN","RORHL12",223,0)
 . S RC=$$ERROR^RORERR(-100,,,,"No accession date","$$GETDATA^LA7UTL1A")
"RTN","RORHL12",224,0)
 S RORSEG(7)=TMP
"RTN","RORHL12",225,0)
 ;
"RTN","RORHL12",226,0)
 ;--- OBR-11 - Urine Screen
"RTN","RORHL12",227,0)
 S RORSEG(11)=$G(@RORREF@(0,11.57,"I"))
"RTN","RORHL12",228,0)
 ;
"RTN","RORHL12",229,0)
 ;--- OBR-13 - Site/Specimen
"RTN","RORHL12",230,0)
 S RORSEG(13)=$$ESCAPE^RORHL7($G(@RORREF@(0,.05,"E")))
"RTN","RORHL12",231,0)
 ;
"RTN","RORHL12",232,0)
 ;--- OBR-20 - Collection Sample
"RTN","RORHL12",233,0)
 S RORSEG(20)=$$ESCAPE^RORHL7($G(@RORREF@(0,.055,"E")))
"RTN","RORHL12",234,0)
 ;
"RTN","RORHL12",235,0)
 ;--- OBR-21 - Sputum Screen
"RTN","RORHL12",236,0)
 S RORSEG(21)=$$ESCAPE^RORHL7($G(@RORREF@(0,11.58,"E")))
"RTN","RORHL12",237,0)
 ;
"RTN","RORHL12",238,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL12",239,0)
 S RORSEG(24)="MB"
"RTN","RORHL12",240,0)
 ;
"RTN","RORHL12",241,0)
 ;--- OBR-25 - Sterility Control
"RTN","RORHL12",242,0)
 S TMP=$G(@RORREF@(0,11.51,"I"))
"RTN","RORHL12",243,0)
 S RORSEG(25)=$S(TMP="P":"F",TMP="N":"R",1:"")
"RTN","RORHL12",244,0)
 ;
"RTN","RORHL12",245,0)
 ;--- OBR-44 - Division
"RTN","RORHL12",246,0)
 S RORSEG(44)=$$SITE^RORUTL03(CS)
"RTN","RORHL12",247,0)
 ;
"RTN","RORHL12",248,0)
 ;--- Store the segment
"RTN","RORHL12",249,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL12",250,0)
 Q ERRCNT
"RTN","RORHL17")
0^3^B29156798^B29166670
"RTN","RORHL17",1,0)
RORHL17 ;HOIFO/BH,SG - HL7 PROBLEM LIST: OBR,OBX ;1/23/06 2:22pm
"RTN","RORHL17",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","RORHL17",3,0)
 ;
"RTN","RORHL17",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL17",5,0)
 ;
"RTN","RORHL17",6,0)
 ; #2308         ^AUPNPROB - PROBLEM file #9000011 (controlled)
"RTN","RORHL17",7,0)
 ; #2644         $$MOD^GMPLUTL3 (controlled)
"RTN","RORHL17",8,0)
 ; #3990         $$CODEC^ICDCODE (supported)
"RTN","RORHL17",9,0)
 ; #2056         $$GET1^DIQ
"RTN","RORHL17",10,0)
 ; #10103        FMTHL7^XLFDT (supported)
"RTN","RORHL17",11,0)
 ;
"RTN","RORHL17",12,0)
 Q
"RTN","RORHL17",13,0)
 ;
"RTN","RORHL17",14,0)
 ;***** SEARCHES FOR Problem List DATA
"RTN","RORHL17",15,0)
 ;
"RTN","RORHL17",16,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL17",17,0)
 ;
"RTN","RORHL17",18,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL17",19,0)
 ;               data extraction time frames are stored.
"RTN","RORHL17",20,0)
 ;
"RTN","RORHL17",21,0)
 ; Return Values:
"RTN","RORHL17",22,0)
 ;       <0  Error code
"RTN","RORHL17",23,0)
 ;        0  Ok
"RTN","RORHL17",24,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL17",25,0)
 ;
"RTN","RORHL17",26,0)
 ;
"RTN","RORHL17",27,0)
EN1(RORDFN,DXDTS) ;
"RTN","RORHL17",28,0)
 N CS,DFN,GMRVSTR,IDX,PROBIEN,RC,RORARR,RORBUF,RORENDT,RORMSG,RORSTDT,RORTMP,TMP
"RTN","RORHL17",29,0)
 S (ERRCNT,RC)=0
"RTN","RORHL17",30,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL17",31,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","RORHL17",32,0)
 ;
"RTN","RORHL17",33,0)
 S IDX=0
"RTN","RORHL17",34,0)
 F  S IDX=$O(DXDTS(16,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","RORHL17",35,0)
 . S RORSTDT=$P(DXDTS(16,IDX),U),RORENDT=$P(DXDTS(16,IDX),U,2)
"RTN","RORHL17",36,0)
 . ;--- Check to see is any problems have been entered/modified
"RTN","RORHL17",37,0)
 . ;--- during the data extraction time frame
"RTN","RORHL17",38,0)
 . S MDATE=$$MOD^GMPLUTL3(RORDFN)
"RTN","RORHL17",39,0)
 . Q:(MDATE<RORSTDT)!(MDATE'<RORENDT)
"RTN","RORHL17",40,0)
 . ;--- Find newly entered problems or modified problems
"RTN","RORHL17",41,0)
 . S PROBIEN=""
"RTN","RORHL17",42,0)
 . F  S PROBIEN=$O(^AUPNPROB("AC",RORDFN,PROBIEN)) Q:'PROBIEN  D
"RTN","RORHL17",43,0)
 . . S TMP=$$LOAD(.RORARR,PROBIEN)  Q:TMP="S"
"RTN","RORHL17",44,0)
 . . S:TMP>0 ERRCNT=ERRCNT+TMP
"RTN","RORHL17",45,0)
 . . ;---
"RTN","RORHL17",46,0)
 . . S TMP=$$OBR(.RORARR)
"RTN","RORHL17",47,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL17",48,0)
 . . S TMP=$$OBX(.RORARR)
"RTN","RORHL17",49,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL17",50,0)
 ;
"RTN","RORHL17",51,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORHL17",52,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL17",53,0)
 ;
"RTN","RORHL17",54,0)
 ;***** VALIDATES THE DATE
"RTN","RORHL17",55,0)
CHECK(DATE) ;
"RTN","RORHL17",56,0)
 Q:DATE'>0 ""
"RTN","RORHL17",57,0)
 Q:$E(DATE,1,3)>$E(DT,1,3) ""
"RTN","RORHL17",58,0)
 S:$E(DATE,4,5)="00" $E(DATE,4,5)="01"
"RTN","RORHL17",59,0)
 S:$E(DATE,6,7)="00" $E(DATE,6,7)="01"
"RTN","RORHL17",60,0)
 Q $$FM2HL^RORHL7(DATE)
"RTN","RORHL17",61,0)
 ;
"RTN","RORHL17",62,0)
 ;I $E(DATE,1,2)="20",$E(DATE,3,4)>$E(DT,2,3) Q ""
"RTN","RORHL17",63,0)
 ;
"RTN","RORHL17",64,0)
 ;*****
"RTN","RORHL17",65,0)
LOAD(RORARR,PROBIEN) ;
"RTN","RORHL17",66,0)
 N CNT,ERRCNT,IENS,MDATE,NOTE,REC,REC1,SUB3,SUB5,STAT
"RTN","RORHL17",67,0)
 K RORARR,@RORTMP  S ERRCNT=0
"RTN","RORHL17",68,0)
 ;
"RTN","RORHL17",69,0)
 S REC=$G(^AUPNPROB(PROBIEN,0))
"RTN","RORHL17",70,0)
 S REC1=$G(^AUPNPROB(PROBIEN,1))
"RTN","RORHL17",71,0)
 S MDATE=$P(REC,U,3)
"RTN","RORHL17",72,0)
 Q:(MDATE<RORSTDT)!(MDATE'<RORENDT) "S"
"RTN","RORHL17",73,0)
 ;
"RTN","RORHL17",74,0)
 S RORARR("OBR","FACIL")=$P(REC,U,6)
"RTN","RORHL17",75,0)
 S RORARR("OBR","NMBR")=$P(REC,U,7)
"RTN","RORHL17",76,0)
 S RORARR("OBR","COND")=$P(REC1,U,2)
"RTN","RORHL17",77,0)
 S RORARR("OBR","DE")=$$FMTHL7^XLFDT($P(REC,U,8))
"RTN","RORHL17",78,0)
 S RORARR("OBR","DOO")=$$CHECK($P(REC,U,13))
"RTN","RORHL17",79,0)
 S RORARR("OBR","DRES")=$$CHECK($P(REC1,U,7)) ;date resolved
"RTN","RORHL17",80,0)
 ;
"RTN","RORHL17",81,0)
 S DIAG=$$CODEC^ICDCODE(+$P(REC,U))
"RTN","RORHL17",82,0)
 S:DIAG<0 DIAG=""
"RTN","RORHL17",83,0)
 ;
"RTN","RORHL17",84,0)
 S RORARR("OBR","DIAG")=DIAG
"RTN","RORHL17",85,0)
 S RORARR("OBR","DREC")=$$FMTHL7^XLFDT($P(REC1,U,9)) ;date recorded
"RTN","RORHL17",86,0)
 S RORARR("OBR","RP")=$P(REC1,U,4)
"RTN","RORHL17",87,0)
 S RORARR("OBR","DLM")=$$FMTHL7^XLFDT(MDATE)
"RTN","RORHL17",88,0)
 S RORARR("OBR","ST")=$P(REC,U,12)
"RTN","RORHL17",89,0)
 ;
"RTN","RORHL17",90,0)
 S RORARR("OBX","PR")=$$GET1^DIQ(9000011,PROBIEN,.05,"E")
"RTN","RORHL17",91,0)
 S RORARR("OBX","PROB")=$$GET1^DIQ(9000011,PROBIEN,1.01,"E")
"RTN","RORHL17",92,0)
 ;
"RTN","RORHL17",93,0)
 I $D(^AUPNPROB(PROBIEN,11))>1  D
"RTN","RORHL17",94,0)
 . S SUB3=0,CNT=0
"RTN","RORHL17",95,0)
 . F  S SUB3=$O(^AUPNPROB(PROBIEN,11,SUB3))  Q:'SUB3  D
"RTN","RORHL17",96,0)
 . . S SUB5=0
"RTN","RORHL17",97,0)
 . . F  S SUB5=$O(^AUPNPROB(PROBIEN,11,SUB3,11,SUB5))  Q:'SUB5  D
"RTN","RORHL17",98,0)
 . . . S IENS=SUB5_","_SUB3_","_PROBIEN_","
"RTN","RORHL17",99,0)
 . . . S NOTE=$$GET1^DIQ(9000011.1111,IENS,.03,,,"RORMSG")
"RTN","RORHL17",100,0)
 . . . S CNT=CNT+1,@RORTMP@(CNT)=NOTE
"RTN","RORHL17",101,0)
 ;
"RTN","RORHL17",102,0)
 Q ERRCNT
"RTN","RORHL17",103,0)
 ;
"RTN","RORHL17",104,0)
 ;***** PROBLEM LIST OBR SEGMENT BUILDER
"RTN","RORHL17",105,0)
 ;
"RTN","RORHL17",106,0)
 ; Return Values:
"RTN","RORHL17",107,0)
 ;       <0  Error code
"RTN","RORHL17",108,0)
 ;        0  Ok
"RTN","RORHL17",109,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL17",110,0)
 ;
"RTN","RORHL17",111,0)
OBR(RORARR) ;
"RTN","RORHL17",112,0)
 N CLASS,CS,ERRCNT,PRV,RC,RORMSG,RORSEG,TMP,TMP1
"RTN","RORHL17",113,0)
 S (ERRCNT,RC)=0
"RTN","RORHL17",114,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL17",115,0)
 ;
"RTN","RORHL17",116,0)
 ;--- Initialize the segment
"RTN","RORHL17",117,0)
 S RORSEG(0)="OBR"
"RTN","RORHL17",118,0)
 ;
"RTN","RORHL17",119,0)
 ;--- OBR-3 - Filler Order Number
"RTN","RORHL17",120,0)
 S RORSEG(3)=RORARR("OBR","FACIL")_RORARR("OBR","NMBR")
"RTN","RORHL17",121,0)
 ;
"RTN","RORHL17",122,0)
 ;--- OBR-4 - Problem List CPT Code
"RTN","RORHL17",123,0)
 S RORSEG(4)="90125"_CS_"HOSPITAL CARE,NEW, INTERMED."_CS_"C4"
"RTN","RORHL17",124,0)
 ;
"RTN","RORHL17",125,0)
 ;--- OBR-6 - Requested Date/time (Date Entered)
"RTN","RORHL17",126,0)
 S RORSEG(6)=RORARR("OBR","DE")
"RTN","RORHL17",127,0)
 ;
"RTN","RORHL17",128,0)
 ;--- OBR-7 - Observation Date/Time (Date Appeared)
"RTN","RORHL17",129,0)
 S RORSEG(7)=RORARR("OBR","DOO")
"RTN","RORHL17",130,0)
 ;
"RTN","RORHL17",131,0)
 ;--- OBR-8 - Observation End Date/Time (Date Resolved/Inactivated)
"RTN","RORHL17",132,0)
 S RORSEG(8)=RORARR("OBR","DRES")
"RTN","RORHL17",133,0)
 ;
"RTN","RORHL17",134,0)
 ;--- OBR-13 -  Relevant Clinical Info. (Diagnosis Code)
"RTN","RORHL17",135,0)
 S RORSEG(13)=RORARR("OBR","DIAG")
"RTN","RORHL17",136,0)
 ;
"RTN","RORHL17",137,0)
 ;--- OBR-14 - Specimen Received Date/time (Date Recorded)
"RTN","RORHL17",138,0)
 S RORSEG(14)=RORARR("OBR","DREC")
"RTN","RORHL17",139,0)
 ;
"RTN","RORHL17",140,0)
 ;--- OBR-16 - Ordering Provider
"RTN","RORHL17",141,0)
 S PRV=RORARR("OBR","RP")
"RTN","RORHL17",142,0)
 S TMP=$$GET1^DIQ(200,PRV_",",53.5,"E",,"RORMSG")
"RTN","RORHL17",143,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL17",144,0)
 . D DBS^RORERR("RORMSG",-99,,RORDFN,200,PRV_",")
"RTN","RORHL17",145,0)
 E  S $P(PRV,CS,13)=$$ESCAPE^RORHL7(TMP)
"RTN","RORHL17",146,0)
 S RORSEG(16)=PRV
"RTN","RORHL17",147,0)
 ;
"RTN","RORHL17",148,0)
 ;--- OBR-20 - Filler Field 1 (Condition of the Record)
"RTN","RORHL17",149,0)
 S RORSEG(20)=RORARR("OBR","COND")
"RTN","RORHL17",150,0)
 ;
"RTN","RORHL17",151,0)
 ;--- OBR-22 - Results Rpt/Status Change Date/time  (Last Modified)
"RTN","RORHL17",152,0)
 S RORSEG(22)=RORARR("OBR","DLM")
"RTN","RORHL17",153,0)
 ;
"RTN","RORHL17",154,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL17",155,0)
 S RORSEG(24)="TX"
"RTN","RORHL17",156,0)
 ;
"RTN","RORHL17",157,0)
 ;--- OBR-25 - Result Status (Status of the Problem)
"RTN","RORHL17",158,0)
 S TMP1=RORARR("OBR","ST")
"RTN","RORHL17",159,0)
 S TMP=$S(TMP1="A":"F",TMP1="I":"R",1:"")
"RTN","RORHL17",160,0)
 S RORSEG(25)=TMP
"RTN","RORHL17",161,0)
 ;
"RTN","RORHL17",162,0)
 ;--- OBR-44 - Division
"RTN","RORHL17",163,0)
 S RORSEG(44)=$$SITE^RORUTL03(CS)
"RTN","RORHL17",164,0)
 ;
"RTN","RORHL17",165,0)
 ;--- Store the segment
"RTN","RORHL17",166,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL17",167,0)
 Q ERRCNT
"RTN","RORHL17",168,0)
 ;
"RTN","RORHL17",169,0)
 ;***** PROBLEM LIST OBX SEGMENT(S) BUILDER
"RTN","RORHL17",170,0)
 ;
"RTN","RORHL17",171,0)
 ; Return Values:
"RTN","RORHL17",172,0)
 ;       <0  Error code
"RTN","RORHL17",173,0)
 ;        0  Ok
"RTN","RORHL17",174,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL17",175,0)
 ;
"RTN","RORHL17",176,0)
OBX(RORARR) ;
"RTN","RORHL17",177,0)
 N BR,CS,ERRCNT,NDX,OBX3,RC
"RTN","RORHL17",178,0)
 S (ERRCNT,RC)=0
"RTN","RORHL17",179,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL17",180,0)
 S BR=$E(HLECH,3)_".br"_$E(HLECH,3)
"RTN","RORHL17",181,0)
 ;
"RTN","RORHL17",182,0)
 I $D(RORARR("OBX","PR")) D
"RTN","RORHL17",183,0)
 . S OBX3="PRVN"_CS_"Provider Narrative"_CS_"VA080"
"RTN","RORHL17",184,0)
 . D SETOBX(OBX3,"",$$ESCAPE^RORHL7(RORARR("OBX","PR")))
"RTN","RORHL17",185,0)
 ;
"RTN","RORHL17",186,0)
 I $D(RORARR("OBX","PROB")) D
"RTN","RORHL17",187,0)
 . S OBX3="EXPR"_CS_"Expression"_CS_"VA080"
"RTN","RORHL17",188,0)
 . D SETOBX(OBX3,"",$$ESCAPE^RORHL7(RORARR("OBX","PROB")))
"RTN","RORHL17",189,0)
 ;
"RTN","RORHL17",190,0)
 S OBX3="NOTE"_CS_"Note Narrative"_CS_"VA080"
"RTN","RORHL17",191,0)
 D SETOBXWP^RORHLUT1(RORTMP,OBX3)
"RTN","RORHL17",192,0)
 ;
"RTN","RORHL17",193,0)
 Q ERRCNT
"RTN","RORHL17",194,0)
 ;
"RTN","RORHL17",195,0)
 ;*** CREATES AND STORES THE OBX SEGMENT
"RTN","RORHL17",196,0)
SETOBX(OBX3,OBX4,OBX5) ;
"RTN","RORHL17",197,0)
 N RORSEG
"RTN","RORHL17",198,0)
 ;--- Initialize the segment
"RTN","RORHL17",199,0)
 S RORSEG(0)="OBX"
"RTN","RORHL17",200,0)
 ;--- OBX-2
"RTN","RORHL17",201,0)
 S RORSEG(2)="FT"
"RTN","RORHL17",202,0)
 ;--- OBX-3
"RTN","RORHL17",203,0)
 S RORSEG(3)=OBX3
"RTN","RORHL17",204,0)
 ;--- OBX-4
"RTN","RORHL17",205,0)
 S:$G(OBX4)'="" RORSEG(4)=OBX4
"RTN","RORHL17",206,0)
 ;--- OBX-5
"RTN","RORHL17",207,0)
 S RORSEG(5)=OBX5
"RTN","RORHL17",208,0)
 ;--- OBX-11
"RTN","RORHL17",209,0)
 S RORSEG(11)="F"
"RTN","RORHL17",210,0)
 ;--- Store the segment
"RTN","RORHL17",211,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL17",212,0)
 Q
"RTN","RORHL18")
0^12^B14567197^n/a
"RTN","RORHL18",1,0)
RORHL18 ;BPOIFO/ACS - HL7 IMMUNIZATION DATA: OBR,OBX ;11/1/09
"RTN","RORHL18",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","RORHL18",3,0)
 ;
"RTN","RORHL18",4,0)
 ; DBIA #5521 :  ^AUPNVIMM (private)
"RTN","RORHL18",5,0)
 ; DBIA #2028 :  ^AUPNVSIT (controlled)
"RTN","RORHL18",6,0)
 ; DBIA #10060:  Read access to file #200 (supported)
"RTN","RORHL18",7,0)
 ; DBIA #2056 :  $$GET1^DIQ,GETS^DIQ (supported)
"RTN","RORHL18",8,0)
 Q
"RTN","RORHL18",9,0)
 ;
"RTN","RORHL18",10,0)
 ;***** SEARCH FOR IMMUNIZATION DATA
"RTN","RORHL18",11,0)
 ;
"RTN","RORHL18",12,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL18",13,0)
 ;
"RTN","RORHL18",14,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL18",15,0)
 ;               data extraction time frames are stored.
"RTN","RORHL18",16,0)
 ;
"RTN","RORHL18",17,0)
 ; Return Values:
"RTN","RORHL18",18,0)
 ;        0  Ok
"RTN","RORHL18",19,0)
 ;
"RTN","RORHL18",20,0)
EN1(RORDFN,DXDTS) ;
"RTN","RORHL18",21,0)
 N DFN,IDX,RORENDT,RORSTDT,ROR1,ROREVDT,RORSKIP
"RTN","RORHL18",22,0)
 ;
"RTN","RORHL18",23,0)
 S DFN=RORDFN
"RTN","RORHL18",24,0)
 S IDX=0
"RTN","RORHL18",25,0)
 F  S ROR1=0 S IDX=$O(DXDTS(17,IDX)) Q:IDX'>0  D
"RTN","RORHL18",26,0)
 . S RORSTDT=$P(DXDTS(17,IDX),U),RORENDT=$P(DXDTS(17,IDX),U,2)
"RTN","RORHL18",27,0)
 . ;--- Look for Immunization data
"RTN","RORHL18",28,0)
 . S RORSKIP=0 F  S ROR1=$O(^AUPNVIMM("C",DFN,ROR1)) Q:'ROR1  D
"RTN","RORHL18",29,0)
 .. N RORIDATA,RORIERR,ROREVDT
"RTN","RORHL18",30,0)
 .. ;get immunization data for the HL7 message
"RTN","RORHL18",31,0)
 .. K RORIDATA,RORIERR D GETS^DIQ(9000010.11,ROR1_",",".01;.03;.06;.07;1201;1202;81101","IE","RORIDATA","RORIERR")
"RTN","RORHL18",32,0)
 .. Q:$D(RORIERR("DIERR"))
"RTN","RORHL18",33,0)
 .. S ROREVDT=$G(RORIDATA(9000010.11,ROR1_",",1201,"I")) ;get event date/time
"RTN","RORHL18",34,0)
 .. Q:$G(ROREVDT)>(RORENDT_.999999)  ;event date/time can't be in the future
"RTN","RORHL18",35,0)
 .. N RORVSIT ;get VISIT IEN from immunization file
"RTN","RORHL18",36,0)
 .. S RORVSIT=$G(RORIDATA(9000010.11,ROR1_",",".03","I")) ;visit IEN
"RTN","RORHL18",37,0)
 .. ;get FM internal DATE LAST MODIFIED from visit file
"RTN","RORHL18",38,0)
 .. N RORIDLM,RORIERR,RORDLM
"RTN","RORHL18",39,0)
 .. K RORIDLM,RORIERR D GETS^DIQ(9000010,RORVSIT_",",".13","I","RORIDLM","RORIERR")
"RTN","RORHL18",40,0)
 .. S RORDLM=$G(RORIDLM(9000010,RORVSIT_",",".13","I")) ;date last modified
"RTN","RORHL18",41,0)
 .. S RORDLM=RORDLM\1 ;exclude 'time'
"RTN","RORHL18",42,0)
 .. Q:RORDLM<RORSTDT  ;quit if date last modified is before extraction start date
"RTN","RORHL18",43,0)
 .. Q:RORDLM>RORENDT  ;quit if date last modified is after extraction end date
"RTN","RORHL18",44,0)
 .. S RORVSIT=+$G(^AUPNVSIT(RORVSIT,0)) ;get visit date/time in FM format
"RTN","RORHL18",45,0)
 .. ;--- Process the data
"RTN","RORHL18",46,0)
 .. D OBR(.RORIDATA,DFN,RORVSIT,ROR1)
"RTN","RORHL18",47,0)
 .. D OBX(.RORIDATA,DFN,RORVSIT,ROR1)
"RTN","RORHL18",48,0)
 ;
"RTN","RORHL18",49,0)
 Q 0
"RTN","RORHL18",50,0)
 ;
"RTN","RORHL18",51,0)
 ;***** IMMUNIZATION OBR SEGMENT BUILDER
"RTN","RORHL18",52,0)
 ;
"RTN","RORHL18",53,0)
 ; Return Values:
"RTN","RORHL18",54,0)
 ;       <0  Error code
"RTN","RORHL18",55,0)
 ;        0  Ok
"RTN","RORHL18",56,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL18",57,0)
 ;
"RTN","RORHL18",58,0)
OBR(RORIDATA,DFN,RORVSIT,ROR1) ;
"RTN","RORHL18",59,0)
 N CS,RORSEG
"RTN","RORHL18",60,0)
 D ECH^RORHL7(.CS) ;component separator = ^
"RTN","RORHL18",61,0)
 ;
"RTN","RORHL18",62,0)
 ;--- Initialize the segment
"RTN","RORHL18",63,0)
 S RORSEG(0)="OBR"
"RTN","RORHL18",64,0)
 ;
"RTN","RORHL18",65,0)
 ;--- OBR-3 - Immunization IEN in V IMMUNIZATION file
"RTN","RORHL18",66,0)
 ;S RORSEG(3)=$G(RORIDATA(9000010.11,ROR1_",",.01,"I"))
"RTN","RORHL18",67,0)
 S RORSEG(3)=$G(ROR1)
"RTN","RORHL18",68,0)
 ;
"RTN","RORHL18",69,0)
 ;--- OBR-4 - Universal Service ID
"RTN","RORHL18",70,0)
 S RORSEG(4)="90749"_CS_"IMMUNIZATION"_CS_"C4"
"RTN","RORHL18",71,0)
 ;
"RTN","RORHL18",72,0)
 ;--- OBR-13 - 'COMMENTS'
"RTN","RORHL18",73,0)
 S RORSEG(13)=$G(RORIDATA(9000010.11,ROR1_",",81101,"E"))
"RTN","RORHL18",74,0)
 ;
"RTN","RORHL18",75,0)
 ;--- OBR-16 - 'ORDERING PROVIDER': IEN and PROVIDER CLASS
"RTN","RORHL18",76,0)
 N ROROPIEN,RORDATA,RORMSG
"RTN","RORHL18",77,0)
 S ROROPIEN=$G(RORIDATA(9000010.11,ROR1_",",1202,"I"))
"RTN","RORHL18",78,0)
 I ROROPIEN>0  D
"RTN","RORHL18",79,0)
 . ;get provider class
"RTN","RORHL18",80,0)
 . N DIERR S $P(RORDATA,CS,13)=$$GET1^DIQ(200,+ROROPIEN_",",53.5,"E",,"RORMSG")
"RTN","RORHL18",81,0)
 . Q:$G(RORMSG(("DIERR")))
"RTN","RORHL18",82,0)
 . S $P(RORDATA,CS,1)=ROROPIEN ;provider IEN
"RTN","RORHL18",83,0)
 . S RORSEG(16)=$G(RORDATA)
"RTN","RORHL18",84,0)
 ;
"RTN","RORHL18",85,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL18",86,0)
 S RORSEG(24)="OTH"
"RTN","RORHL18",87,0)
 ;
"RTN","RORHL18",88,0)
 ;--- Store the segment
"RTN","RORHL18",89,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL18",90,0)
 Q
"RTN","RORHL18",91,0)
 ;
"RTN","RORHL18",92,0)
 ;***** IMMUNIZATION OBX SEGMENT BUILDER
"RTN","RORHL18",93,0)
 ;
"RTN","RORHL18",94,0)
 ;
"RTN","RORHL18",95,0)
OBX(RORIDATA,DFN,RORVSIT,ROR1) ;
"RTN","RORHL18",96,0)
 N CS,RORSEG
"RTN","RORHL18",97,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL18",98,0)
 ;
"RTN","RORHL18",99,0)
 ;--- Initialize the segment
"RTN","RORHL18",100,0)
 S RORSEG(0)="OBX"
"RTN","RORHL18",101,0)
 ;
"RTN","RORHL18",102,0)
 ;--- OBX-2 - Value Type of OBX-5
"RTN","RORHL18",103,0)
 S RORSEG(2)="FT"
"RTN","RORHL18",104,0)
 ;
"RTN","RORHL18",105,0)
 ;--- OBX-3 - Immunization 'NAME' from IMMUNIZATION file #9999999.14
"RTN","RORHL18",106,0)
 S RORSEG(3)=CS_$G(RORIDATA(9000010.11,ROR1_",",.01,"E"))
"RTN","RORHL18",107,0)
 ;
"RTN","RORHL18",108,0)
 ;--- OBX-5 - 'REACTION'_CS_'CONTRAINDICATED'
"RTN","RORHL18",109,0)
 N TMP1,TMP2
"RTN","RORHL18",110,0)
 S TMP1=$G(RORIDATA(9000010.11,ROR1_",",.06,"I"))
"RTN","RORHL18",111,0)
 S TMP2=$G(RORIDATA(9000010.11,ROR1_",",.07,"I"))
"RTN","RORHL18",112,0)
 S RORSEG(5)=$G(TMP1)_CS_$G(TMP2)
"RTN","RORHL18",113,0)
 ;
"RTN","RORHL18",114,0)
 ;--- OBX-14 - 'EVENT DATE AND TIME'
"RTN","RORHL18",115,0)
 N TMP1 S TMP1=$G(RORIDATA(9000010.11,ROR1_",",1201,"I"))
"RTN","RORHL18",116,0)
 I $G(TMP1)>0 S RORSEG(14)=$$FM2HL^RORHL7(TMP1)
"RTN","RORHL18",117,0)
 ;
"RTN","RORHL18",118,0)
 ;--- OBX-19 - 'VISIT'
"RTN","RORHL18",119,0)
 I $G(RORVSIT)>0 S RORSEG(19)=$$FM2HL^RORHL7(RORVSIT) ;convert to HL7 format
"RTN","RORHL18",120,0)
 ;
"RTN","RORHL18",121,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL18",122,0)
 Q
"RTN","RORHL19")
0^13^B14660598^n/a
"RTN","RORHL19",1,0)
RORHL19 ;BPOIFO/ACS - HL7 SKIN TEST DATA: OBR,OBX ;11/1/09
"RTN","RORHL19",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","RORHL19",3,0)
 ;
"RTN","RORHL19",4,0)
 ; DBIA #5520 :  ^AUPNVSK (private)
"RTN","RORHL19",5,0)
 ; DBIA #2028 :  ^AUPNVSIT (controlled)
"RTN","RORHL19",6,0)
 ; DBIA #2056 :  $$GET1^DIQ,GETS^DIQ (supported)
"RTN","RORHL19",7,0)
 Q
"RTN","RORHL19",8,0)
 ;
"RTN","RORHL19",9,0)
 ;***** SEARCH FOR SKIN TEST DATA
"RTN","RORHL19",10,0)
 ;
"RTN","RORHL19",11,0)
 ; DFN           DFN of the patient in the PATIENT file (#2)
"RTN","RORHL19",12,0)
 ;
"RTN","RORHL19",13,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL19",14,0)
 ;               data extraction time frames are stored.
"RTN","RORHL19",15,0)
 ;
"RTN","RORHL19",16,0)
 ; Return Values:
"RTN","RORHL19",17,0)
 ;       <0  Error code
"RTN","RORHL19",18,0)
 ;        0  Ok
"RTN","RORHL19",19,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL19",20,0)
 ;
"RTN","RORHL19",21,0)
EN1(DFN,DXDTS) ;
"RTN","RORHL19",22,0)
 N IDX,RORENDT,RORSTDT,ROR1,ROREVDT
"RTN","RORHL19",23,0)
 S IDX=0
"RTN","RORHL19",24,0)
 F  S ROR1=0 S IDX=$O(DXDTS(18,IDX))  Q:IDX'>0  D
"RTN","RORHL19",25,0)
 . S RORSTDT=$P(DXDTS(18,IDX),U),RORENDT=$P(DXDTS(18,IDX),U,2)
"RTN","RORHL19",26,0)
 . ;--- Find Skin Test data
"RTN","RORHL19",27,0)
 . F  S ROR1=$O(^AUPNVSK("C",DFN,ROR1)) Q:'ROR1  D
"RTN","RORHL19",28,0)
 .. N RORIDATA,RORIERR,ROREVDT K RORIDATA,RORIERR
"RTN","RORHL19",29,0)
 .. ;get skin test data for the HL7 message
"RTN","RORHL19",30,0)
 .. D GETS^DIQ(9000010.12,ROR1_",",".01;.03;.04;.05;.06;1201;1202;81101","IE","RORIDATA","RORIERR")
"RTN","RORHL19",31,0)
 .. Q:$D(RORIERR("DIERR"))
"RTN","RORHL19",32,0)
 .. S ROREVDT=$G(RORIDATA(9000010.12,ROR1_",",1201,"I")) ;get event date/time
"RTN","RORHL19",33,0)
 .. ;Q:$G(ROREVDT)>(RORENDT_.999999)  ;event date/time can't be in the future
"RTN","RORHL19",34,0)
 .. N RORVSIT ;get VISIT IEN from immunization file
"RTN","RORHL19",35,0)
 .. S RORVSIT=$G(RORIDATA(9000010.12,ROR1_",",".03","I")) ;visit IEN
"RTN","RORHL19",36,0)
 .. ;get FM internal DATE LAST MODIFIED from visit file
"RTN","RORHL19",37,0)
 .. N RORIDLM,RORIERR,RORDLM K RORIDLM,RORIERR D GETS^DIQ(9000010,RORVSIT_",",".13","I","RORIDLM","RORIERR")
"RTN","RORHL19",38,0)
 .. S RORDLM=$G(RORIDLM(9000010,RORVSIT_",",".13","I")) ;date last modified
"RTN","RORHL19",39,0)
 .. S RORDLM=RORDLM\1 ;exclude 'time'
"RTN","RORHL19",40,0)
 .. Q:RORDLM<RORSTDT  ;quit if date last modified is before extraction start date
"RTN","RORHL19",41,0)
 .. Q:RORDLM>RORENDT  ;quit if date last modified is after extraction end date
"RTN","RORHL19",42,0)
 .. S RORVSIT=+$G(^AUPNVSIT(RORVSIT,0)) ;get visit date/time in FM format
"RTN","RORHL19",43,0)
 .. ;--- Process the data
"RTN","RORHL19",44,0)
 .. D OBR(.RORIDATA,DFN,RORVSIT,ROR1)
"RTN","RORHL19",45,0)
 .. D OBX(.RORIDATA,DFN,RORVSIT,ROR1)
"RTN","RORHL19",46,0)
 ;
"RTN","RORHL19",47,0)
 Q 0
"RTN","RORHL19",48,0)
 ;
"RTN","RORHL19",49,0)
 ;***** SKIN TEST OBR SEGMENT BUILDER
"RTN","RORHL19",50,0)
 ;
"RTN","RORHL19",51,0)
 ; Return Values:
"RTN","RORHL19",52,0)
 ;        0  Ok
"RTN","RORHL19",53,0)
 ;
"RTN","RORHL19",54,0)
OBR(RORIDATA,DFN,RORVSIT,ROR1) ;
"RTN","RORHL19",55,0)
 N CS,RORSEG
"RTN","RORHL19",56,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL19",57,0)
 ;
"RTN","RORHL19",58,0)
 ;--- Initialize the segment
"RTN","RORHL19",59,0)
 S RORSEG(0)="OBR"
"RTN","RORHL19",60,0)
 ;
"RTN","RORHL19",61,0)
 ;--- OBR-3 - Skin Test IEN in the V SKIN TEST file
"RTN","RORHL19",62,0)
 S RORSEG(3)=$G(ROR1)
"RTN","RORHL19",63,0)
 ;
"RTN","RORHL19",64,0)
 ;--- OBR-4 - Universal Service ID
"RTN","RORHL19",65,0)
 S RORSEG(4)="86486"_CS_"SKIN TEST"_CS_"C4"
"RTN","RORHL19",66,0)
 ;
"RTN","RORHL19",67,0)
 ;--- OBR-7 - DATE READ
"RTN","RORHL19",68,0)
 N RORDR S RORDR=$G(RORIDATA(9000010.12,ROR1_",",".06","I"))
"RTN","RORHL19",69,0)
 I $G(RORDR)>0 S RORSEG(7)=$$FM2HL^RORHL7(RORDR)
"RTN","RORHL19",70,0)
 ;
"RTN","RORHL19",71,0)
 ;--- OBR-13 - 'COMMENTS'
"RTN","RORHL19",72,0)
 S RORSEG(13)=$G(RORIDATA(9000010.12,ROR1_",",81101,"E"))
"RTN","RORHL19",73,0)
 ;
"RTN","RORHL19",74,0)
 ;--- OBR-16 - 'ORDERING PROVIDER': IEN and PROVIDER CLASS
"RTN","RORHL19",75,0)
 N ROROPIEN,RORDATA,RORMSG
"RTN","RORHL19",76,0)
 S ROROPIEN=$G(RORIDATA(9000010.12,ROR1_",",1202,"I"))
"RTN","RORHL19",77,0)
 I ROROPIEN>0  D
"RTN","RORHL19",78,0)
 . ;get provider class
"RTN","RORHL19",79,0)
 . S $P(RORDATA,CS,13)=$$GET1^DIQ(200,+ROROPIEN_",",53.5,"E",,"RORMSG")
"RTN","RORHL19",80,0)
 . Q:$G(RORMSG(("DIERR")))
"RTN","RORHL19",81,0)
 . S $P(RORDATA,CS,1)=ROROPIEN ;provider IEN 
"RTN","RORHL19",82,0)
 . S RORSEG(16)=$G(RORDATA)
"RTN","RORHL19",83,0)
 ;
"RTN","RORHL19",84,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL19",85,0)
 S RORSEG(24)="OTH"
"RTN","RORHL19",86,0)
 ;
"RTN","RORHL19",87,0)
 ;--- Store the segment
"RTN","RORHL19",88,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL19",89,0)
 Q 0
"RTN","RORHL19",90,0)
 ;
"RTN","RORHL19",91,0)
 ;***** SKIN TEST OBX SEGMENT BUILDER
"RTN","RORHL19",92,0)
 ;
"RTN","RORHL19",93,0)
 ; Return Values:
"RTN","RORHL19",94,0)
 ;       <0  Error code
"RTN","RORHL19",95,0)
 ;        0  Ok
"RTN","RORHL19",96,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL19",97,0)
 ;
"RTN","RORHL19",98,0)
OBX(RORIDATA,DFN,RORVSIT,ROR1) ;
"RTN","RORHL19",99,0)
 N CS,RORSEG
"RTN","RORHL19",100,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL19",101,0)
 ;
"RTN","RORHL19",102,0)
 ;--- Initialize the segment
"RTN","RORHL19",103,0)
 S RORSEG(0)="OBX"
"RTN","RORHL19",104,0)
 ;
"RTN","RORHL19",105,0)
 ;--- OBX-2 - Value Type of OBX-5
"RTN","RORHL19",106,0)
 S RORSEG(2)="FT"
"RTN","RORHL19",107,0)
 ;
"RTN","RORHL19",108,0)
 ;--- OBX-3 - 'SKIN TEST' name
"RTN","RORHL19",109,0)
 S RORSEG(3)=CS_$G(RORIDATA(9000010.12,ROR1_",",.01,"E"))
"RTN","RORHL19",110,0)
 ;
"RTN","RORHL19",111,0)
 ;--- OBX-5 - 'RESULTS'_CS_'READING'
"RTN","RORHL19",112,0)
 N TMP1,TMP2
"RTN","RORHL19",113,0)
 S TMP1=$G(RORIDATA(9000010.12,ROR1_",",.04,"I"))
"RTN","RORHL19",114,0)
 S TMP2=$G(RORIDATA(9000010.12,ROR1_",",.05,"I"))
"RTN","RORHL19",115,0)
 S RORSEG(5)=$G(TMP1)_CS_$G(TMP2)
"RTN","RORHL19",116,0)
 ;
"RTN","RORHL19",117,0)
 ;--- OBX-14 - 'EVENT DATE AND TIME'
"RTN","RORHL19",118,0)
 N TMP1 S TMP1=$G(RORIDATA(9000010.12,ROR1_",",1201,"I"))
"RTN","RORHL19",119,0)
 I $G(TMP1)>0 S RORSEG(14)=$$FM2HL^RORHL7(TMP1)
"RTN","RORHL19",120,0)
 ;
"RTN","RORHL19",121,0)
 ;--- OBX-19 - 'VISIT' DATE AND TIME
"RTN","RORHL19",122,0)
 I $G(RORVSIT)>0 S RORSEG(19)=$$FM2HL^RORHL7(RORVSIT) ;convert to HL7 format
"RTN","RORHL19",123,0)
 ;
"RTN","RORHL19",124,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL19",125,0)
 Q 0
"RTN","RORP010")
0^^B95576679^n/a
"RTN","RORP010",1,0)
RORP010 ;BP/ACS CCR POST-INIT PATCH 10 ;08/31/09
"RTN","RORP010",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","RORP010",3,0)
 ;
"RTN","RORP010",4,0)
 ; This routine uses the following IAs:
"RTN","RORP010",5,0)
 ;
"RTN","RORP010",6,0)
 ; #2263    EN^XPAR,ADD^XPAR,DEL^XPAR (supported)
"RTN","RORP010",7,0)
 ; #2053    UPDATE^DIE (supported)
"RTN","RORP010",8,0)
 ; #2053    FILE^DIE (supported)
"RTN","RORP010",9,0)
 ; #2056    GETS^DIQ (supported)
"RTN","RORP010",10,0)
 ; #2054    CLEAN^DILF (supported)
"RTN","RORP010",11,0)
 ; #10013   ^DIK (supported)
"RTN","RORP010",12,0)
 ;
"RTN","RORP010",13,0)
 N DA,DIK
"RTN","RORP010",14,0)
 ;******************************************************************************
"RTN","RORP010",15,0)
 ;Change DON'T SEND field in ROR REGISTRY RECORD file to null if not a
"RTN","RORP010",16,0)
 ;test patient in file 2
"RTN","RORP010",17,0)
 ;******************************************************************************
"RTN","RORP010",18,0)
 N RORI,RORDFN
"RTN","RORP010",19,0)
 S RORI=0 F  S RORI=$O(^RORDATA(798,RORI)) Q:(RORI'>0)  D
"RTN","RORP010",20,0)
 . I $P($G(^RORDATA(798,RORI,2)),U,4) D
"RTN","RORP010",21,0)
 .. S RORDFN=+$G(^RORDATA(798,RORI,0)) I $G(RORDFN) D
"RTN","RORP010",22,0)
 ... ;change DON'T SEND to null if not a test patient
"RTN","RORP010",23,0)
 ... I '$$TESTPAT^RORUTL01(RORDFN) S $P(^RORDATA(798,RORI,2),U,4)=""
"RTN","RORP010",24,0)
 ;
"RTN","RORP010",25,0)
 ;******************************************************************************
"RTN","RORP010",26,0)
 ;Add 3 new entries to the ROR REPORT PARAMETERS file (#799.34) for the new reports
"RTN","RORP010",27,0)
 ;New Reports: BMI, MELD, Renal Function by Range
"RTN","RORP010",28,0)
 ;******************************************************************************
"RTN","RORP010",29,0)
 N RORRPT,RORFDA,RORIEN,RORERR,RORARY1,RORARY2
"RTN","RORP010",30,0)
 ;*** BMI report ***
"RTN","RORP010",31,0)
 S RORRPT="BMI by Range" D
"RTN","RORP010",32,0)
 . ;delete first
"RTN","RORP010",33,0)
 . S DIK="^ROR(799.34,",DA=18 D ^DIK
"RTN","RORP010",34,0)
 . K RORFDA
"RTN","RORP010",35,0)
 . S RORIEN(1)=18 ;BMI is report #18
"RTN","RORP010",36,0)
 . S RORFDA(799.34,"+1,",.01)=RORRPT ;name
"RTN","RORP010",37,0)
 . S RORFDA(799.34,"+1,",.02)=1 ;background processing? = yes
"RTN","RORP010",38,0)
 . S RORFDA(799.34,"+1,",.03)=1 ;shared templates = yes
"RTN","RORP010",39,0)
 . S RORFDA(799.34,"+1,",.04)="18" ;code
"RTN","RORP010",40,0)
 . S RORFDA(799.34,"+1,",.09)=1 ;national = yes
"RTN","RORP010",41,0)
 . S RORFDA(799.34,"+1,",1)="14,22,62,201,47,12,180,70,100" ;parameter panels
"RTN","RORP010",42,0)
 . S RORFDA(799.34,"+1,",10.01)="$$BMIRANGE^RORX018" ;report builder
"RTN","RORP010",43,0)
 . K RORARY1
"RTN","RORP010",44,0)
 . S RORARY1(1)="<DATE_RANGE_3 TYPE=""YEAR""/>" ;default parameters
"RTN","RORP010",45,0)
 . S RORARY1(2)="<PATIENTS DE_BEFORE=""1"" DE_DURING=""1"" DE_AFTER=""1""/>" ;default parameters
"RTN","RORP010",46,0)
 . S RORARY1(3)="<OPTIONS MOST_RECENT=""1"" COMPLETE=""1""/>" ;default parameters
"RTN","RORP010",47,0)
 . S RORFDA(799.34,"+1,",11)="RORARY1"
"RTN","RORP010",48,0)
 . K RORARY2
"RTN","RORP010",49,0)
 . S RORARY2(1)="<SM TABLE=""PATIENTS"" FIELD=""NAME""/>" ;default sorting
"RTN","RORP010",50,0)
 . S RORFDA(799.34,"+1,",12)="RORARY2"
"RTN","RORP010",51,0)
 . D UPDATE^DIE(,"RORFDA","RORIEN","RORERR")
"RTN","RORP010",52,0)
 ;***MELD report ***
"RTN","RORP010",53,0)
 S RORRPT="MELD Score by Range" D
"RTN","RORP010",54,0)
 . ;delete first
"RTN","RORP010",55,0)
 . S DIK="^ROR(799.34,",DA=19 D ^DIK
"RTN","RORP010",56,0)
 . K RORFDA
"RTN","RORP010",57,0)
 . S RORIEN(1)=19 ;MELD is report #19
"RTN","RORP010",58,0)
 . S RORFDA(799.34,"+1,",.01)=RORRPT ;name
"RTN","RORP010",59,0)
 . S RORFDA(799.34,"+1,",.02)=1 ;background processing? = yes
"RTN","RORP010",60,0)
 . S RORFDA(799.34,"+1,",.03)=1 ;shared templates = yes
"RTN","RORP010",61,0)
 . S RORFDA(799.34,"+1,",.04)="19" ;code
"RTN","RORP010",62,0)
 . S RORFDA(799.34,"+1,",.09)=1 ;national = yes
"RTN","RORP010",63,0)
 . S RORFDA(799.34,"+1,",1)="14,22,201,47,12,180,70,100" ;parameter panels
"RTN","RORP010",64,0)
 . S RORFDA(799.34,"+1,",10.01)="$$MLDRANGE^RORX019" ;report builder
"RTN","RORP010",65,0)
 . K RORARY1
"RTN","RORP010",66,0)
 . S RORARY1(1)="<DATE_RANGE_3 TYPE=""YEAR""/>" ;default parameters
"RTN","RORP010",67,0)
 . S RORARY1(2)="<PATIENTS DE_BEFORE=""1"" DE_DURING=""1"" DE_AFTER=""1""/>" ;default parameters
"RTN","RORP010",68,0)
 . S RORARY1(3)="<OPTIONS MOST_RECENT=""1"" COMPLETE=""1""/>" ;default parameters
"RTN","RORP010",69,0)
 . S RORFDA(799.34,"+1,",11)="RORARY1"
"RTN","RORP010",70,0)
 . K RORARY2
"RTN","RORP010",71,0)
 . S RORARY2(1)="<SM TABLE=""PATIENTS"" FIELD=""NAME""/>" ;default sorting
"RTN","RORP010",72,0)
 . S RORFDA(799.34,"+1,",12)="RORARY2"
"RTN","RORP010",73,0)
 . D UPDATE^DIE(,"RORFDA","RORIEN","RORERR")
"RTN","RORP010",74,0)
 ;*** Renal report ***
"RTN","RORP010",75,0)
 S RORRPT="Renal Function by Range" D
"RTN","RORP010",76,0)
 . ;delete first 
"RTN","RORP010",77,0)
 . S DIK="^ROR(799.34,",DA=20 D ^DIK
"RTN","RORP010",78,0)
 . K RORFDA
"RTN","RORP010",79,0)
 . S RORIEN(1)=20 ;Renal is report #20
"RTN","RORP010",80,0)
 . S RORFDA(799.34,"+1,",.01)=RORRPT ;name
"RTN","RORP010",81,0)
 . S RORFDA(799.34,"+1,",.02)=1 ;background processing? = yes
"RTN","RORP010",82,0)
 . S RORFDA(799.34,"+1,",.03)=1 ;shared templates = yes
"RTN","RORP010",83,0)
 . S RORFDA(799.34,"+1,",.04)="20" ;code
"RTN","RORP010",84,0)
 . S RORFDA(799.34,"+1,",.09)=1 ;national = yes
"RTN","RORP010",85,0)
 . S RORFDA(799.34,"+1,",1)="14,22,62,201,47,12,180,70,100" ;parameter panels
"RTN","RORP010",86,0)
 . S RORFDA(799.34,"+1,",10.01)="$$RFRANGE^RORX020" ;report builder
"RTN","RORP010",87,0)
 . K RORARY1
"RTN","RORP010",88,0)
 . S RORARY1(1)="<DATE_RANGE_3 TYPE=""YEAR""/>" ;default parameters
"RTN","RORP010",89,0)
 . S RORARY1(2)="<PATIENTS DE_BEFORE=""1"" DE_DURING=""1"" DE_AFTER=""1""/>" ;default parameters
"RTN","RORP010",90,0)
 . S RORARY1(3)="<OPTIONS MOST_RECENT=""1"" COMPLETE=""1""/>" ;default parameters
"RTN","RORP010",91,0)
 . S RORFDA(799.34,"+1,",11)="RORARY1"
"RTN","RORP010",92,0)
 . K RORARY2
"RTN","RORP010",93,0)
 . S RORARY2(1)="<SM TABLE=""PATIENTS"" FIELD=""NAME""/>" ;default sorting
"RTN","RORP010",94,0)
 . S RORFDA(799.34,"+1,",12)="RORARY2"
"RTN","RORP010",95,0)
 . D UPDATE^DIE(,"RORFDA","RORIEN","RORERR")
"RTN","RORP010",96,0)
 K RORFDA,RORIEN,RORERR
"RTN","RORP010",97,0)
 ;
"RTN","RORP010",98,0)
 ;******************************************************************************
"RTN","RORP010",99,0)
 ;Add new entries to the ROR LIST ITEM file (#799.1) for the 3 new reports
"RTN","RORP010",100,0)
 ;New TYPEs are 5=BMI, 6=MELD, and 7=Renal
"RTN","RORP010",101,0)
 ;******************************************************************************
"RTN","RORP010",102,0)
 N RORDATA,RORTAG,RORFDA,I,TEXT,TYPE,REGISTRY,CODE
"RTN","RORP010",103,0)
 F I=1:1:10  S RORTAG="LI"_I D
"RTN","RORP010",104,0)
 . S RORDATA=$P($T(@RORTAG),";;",2)
"RTN","RORP010",105,0)
 . S TEXT=$P(RORDATA,"^",1) ;TEXT to add
"RTN","RORP010",106,0)
 . S TYPE=$P(RORDATA,"^",2) ;TYPE to add
"RTN","RORP010",107,0)
 . S REGISTRY=$P(RORDATA,"^",3) ;REGISTRY to add
"RTN","RORP010",108,0)
 . S CODE=$P(RORDATA,"^",4) ;CODE to add
"RTN","RORP010",109,0)
 . ;don't add if it's already in the global
"RTN","RORP010",110,0)
 . Q:$D(^ROR(799.1,"KEY",TYPE,REGISTRY,CODE))
"RTN","RORP010",111,0)
 . S RORFDA(799.1,"+1,",.01)=TEXT
"RTN","RORP010",112,0)
 . S RORFDA(799.1,"+1,",.02)=TYPE
"RTN","RORP010",113,0)
 . S RORFDA(799.1,"+1,",.03)=REGISTRY
"RTN","RORP010",114,0)
 . S RORFDA(799.1,"+1,",.04)=CODE
"RTN","RORP010",115,0)
 . D UPDATE^DIE(,"RORFDA",,"RORERR")
"RTN","RORP010",116,0)
 K RORFDA,RORERR
"RTN","RORP010",117,0)
 ;
"RTN","RORP010",118,0)
 ;******************************************************************************
"RTN","RORP010",119,0)
 ;Add new ICD9 entry/group "HCC" to the PARAMETERS file #8989.5
"RTN","RORP010",120,0)
 ;ADD^XPAR(entity,parameter[,instance],value[,.error])
"RTN","RORP010",121,0)
 ;DBIA 2263
"RTN","RORP010",122,0)
 ;*****************************************************************************
"RTN","RORP010",123,0)
 N RORPARAMETER,RORENTITY,RORINSTANCE,RORVALUE,RORERR
"RTN","RORP010",124,0)
 S RORENTITY="PKG.CLINICAL CASE REGISTRIES"
"RTN","RORP010",125,0)
 S RORPARAMETER="ROR REPORT PARAMS TEMPLATE"
"RTN","RORP010",126,0)
 S RORINSTANCE="13::HCC"
"RTN","RORP010",127,0)
 ;delete it first (in case it already exists)
"RTN","RORP010",128,0)
 D DEL^XPAR(RORENTITY,RORPARAMETER,RORINSTANCE,.RORERR)
"RTN","RORP010",129,0)
 S RORVALUE="CCR Predefined Report Template"
"RTN","RORP010",130,0)
 S RORVALUE(1,0)="<?xml version="_"""1.0"""_" encoding="_"""UTF-8"""_"?>"
"RTN","RORP010",131,0)
 S RORVALUE(2,0)="<PARAMS>"
"RTN","RORP010",132,0)
 S RORVALUE(3,0)="<ICD9LST>"
"RTN","RORP010",133,0)
 S RORVALUE(4,0)="<GROUP ID="_"""HCC"""_">"
"RTN","RORP010",134,0)
 S RORVALUE(5,0)="<ICD9 ID="_"""155.0"""_">MAL NEO LIVER, PRIMARY</ICD9>"
"RTN","RORP010",135,0)
 S RORVALUE(6,0)="</GROUP>"
"RTN","RORP010",136,0)
 S RORVALUE(7,0)="</ICD9LST>"
"RTN","RORP010",137,0)
 S RORVALUE(8,0)="<PANELS>"
"RTN","RORP010",138,0)
 S RORVALUE(9,0)="<PANEL ID="_"""160"""_"/>"
"RTN","RORP010",139,0)
 S RORVALUE(10,0)="</PANELS>"
"RTN","RORP010",140,0)
 S RORVALUE(11,0)="</PARAMS>"
"RTN","RORP010",141,0)
 ;add it
"RTN","RORP010",142,0)
 D ADD^XPAR(RORENTITY,RORPARAMETER,RORINSTANCE,.RORVALUE,.RORERR)
"RTN","RORP010",143,0)
 ;
"RTN","RORP010",144,0)
 ;******************************************************************************
"RTN","RORP010",145,0)
 ;Add new ICD9 entry/group "Esophageal Varices" to the PARAMETERS file #8989.5
"RTN","RORP010",146,0)
 ;ADD^XPAR(entity,parameter[,instance],value[,.error])
"RTN","RORP010",147,0)
 ;DBIA 2263
"RTN","RORP010",148,0)
 ;******************************************************************************
"RTN","RORP010",149,0)
 N RORVALUE,RORERR,RORENTITY,RORPARAMETER,RORINSTANCE
"RTN","RORP010",150,0)
 S RORENTITY="PKG.CLINICAL CASE REGISTRIES"
"RTN","RORP010",151,0)
 S RORPARAMETER="ROR REPORT PARAMS TEMPLATE"
"RTN","RORP010",152,0)
 S RORINSTANCE="13::Esophageal Varices"
"RTN","RORP010",153,0)
 ;delete it first (in case it already exists)
"RTN","RORP010",154,0)
 D DEL^XPAR(RORENTITY,RORPARAMETER,RORINSTANCE,.RORERR)
"RTN","RORP010",155,0)
 S RORVALUE="CCR Predefined Report Template"
"RTN","RORP010",156,0)
 S RORVALUE(1,0)="<?xml version="_"""1.0"""_" encoding="_"""UTF-8"""_"?>"
"RTN","RORP010",157,0)
 S RORVALUE(2,0)="<PARAMS>"
"RTN","RORP010",158,0)
 S RORVALUE(3,0)="<ICD9LST>"
"RTN","RORP010",159,0)
 S RORVALUE(4,0)="<GROUP ID="_"""Esophageal Varices"""_">"
"RTN","RORP010",160,0)
 S RORVALUE(5,0)="<ICD9 ID="_"""456.0"""_">ESOPHAG VARICES W BLEED</ICD9>"
"RTN","RORP010",161,0)
 S RORVALUE(6,0)="<ICD9 ID="_"""456.1"""_">ESOPH VARICES W/O BLEED</ICD9>"
"RTN","RORP010",162,0)
 S RORVALUE(7,0)="<ICD9 ID="_"""456.20"""_">BLEED ESOPH VAR OTH DIS</ICD9>"
"RTN","RORP010",163,0)
 S RORVALUE(8,0)="<ICD9 ID="_"""456.21"""_">ESOPH VARICE OTH DIS NOS</ICD9>"
"RTN","RORP010",164,0)
 S RORVALUE(9,0)="</GROUP>"
"RTN","RORP010",165,0)
 S RORVALUE(10,0)="</ICD9LST>"
"RTN","RORP010",166,0)
 S RORVALUE(11,0)="<PANELS>"
"RTN","RORP010",167,0)
 S RORVALUE(12,0)="<PANEL ID="_"""160"""_"/>"
"RTN","RORP010",168,0)
 S RORVALUE(13,0)="</PANELS>"
"RTN","RORP010",169,0)
 S RORVALUE(14,0)="</PARAMS>"
"RTN","RORP010",170,0)
 ;add it
"RTN","RORP010",171,0)
 D ADD^XPAR(RORENTITY,RORPARAMETER,RORINSTANCE,.RORVALUE,.RORERR)
"RTN","RORP010",172,0)
 ;
"RTN","RORP010",173,0)
 ;******************************************************************************
"RTN","RORP010",174,0)
 ;Add new entries to the ROR DATA AREA file (#799.33) for the 2 new data areas
"RTN","RORP010",175,0)
 ;New Data Areas: V Immunization, V Skin Test
"RTN","RORP010",176,0)
 ;******************************************************************************
"RTN","RORP010",177,0)
 ;remove old entries if they exist
"RTN","RORP010",178,0)
 S DIK="^ROR(799.33,",DA=$O(^ROR(799.33,"B","Immunization",0)) I $G(DA)>0 D ^DIK
"RTN","RORP010",179,0)
 S DIK="^ROR(799.33,",DA=$O(^ROR(799.33,"B","Skin Test",0)) I $G(DA)>0 D ^DIK
"RTN","RORP010",180,0)
 N RORDA F RORDA="V Immunization","V Skin Test" D
"RTN","RORP010",181,0)
 . Q:$D(^ROR(799.33,"B",RORDA))  ;don't add if it's already in the global
"RTN","RORP010",182,0)
 . N RORFDA,RORERR,RORIEN
"RTN","RORP010",183,0)
 . S RORFDA(799.33,"+1,",.01)=RORDA
"RTN","RORP010",184,0)
 . S RORIEN(1)=$S(RORDA="V Immunization":17,1:18)
"RTN","RORP010",185,0)
 . D UPDATE^DIE(,"RORFDA","RORIEN","RORERR")
"RTN","RORP010",186,0)
 . K RORFDA,RORERR,RORIEN
"RTN","RORP010",187,0)
 ;
"RTN","RORP010",188,0)
 ;******************************************************************************
"RTN","RORP010",189,0)
 ;Add new entries to the ROR XML ITEM file (#799.31)
"RTN","RORP010",190,0)
 ;******************************************************************************
"RTN","RORP010",191,0)
 N RORXML,RORTAG,RORFDA,RORERR
"RTN","RORP010",192,0)
 ;--- add codes
"RTN","RORP010",193,0)
 F I=1:1:20  S RORTAG="XML"_I D 
"RTN","RORP010",194,0)
 . S RORXML=$P($T(@RORTAG),";;",2)
"RTN","RORP010",195,0)
 . ;don't add if it's already in the global
"RTN","RORP010",196,0)
 . Q:$D(^ROR(799.31,"B",RORXML))
"RTN","RORP010",197,0)
 . S RORFDA(799.31,"+1,",.01)=RORXML
"RTN","RORP010",198,0)
 . D UPDATE^DIE(,"RORFDA",,"RORERR")
"RTN","RORP010",199,0)
 K RORFDA,RORERR
"RTN","RORP010",200,0)
 ;
"RTN","RORP010",201,0)
 ;******************************************************************************
"RTN","RORP010",202,0)
 ;Add reports 18-20 to the list of available reports in ROR REGISTRY PARAMETERS
"RTN","RORP010",203,0)
 ;file.  Field #27: AVAILABLE REPORTS
"RTN","RORP010",204,0)
 ;******************************************************************************
"RTN","RORP010",205,0)
 N REGNAME,REGIEN,RORERR,RORDATA,OLDLIST,NEWLIST S (REGNAME,REGIEN)=0
"RTN","RORP010",206,0)
 F  S REGNAME=$O(^ROR(798.1,"B",REGNAME)) Q:$G(REGNAME)=""  D
"RTN","RORP010",207,0)
 . S REGIEN=$O(^ROR(798.1,"B",REGNAME,0))
"RTN","RORP010",208,0)
 . Q:$G(REGIEN)=""
"RTN","RORP010",209,0)
 . K RORDATA,RORERR D GETS^DIQ(798.1,REGIEN_",",27,"I","RORDATA","RORERR")
"RTN","RORP010",210,0)
 . Q:$D(RORERR("DIERR"))
"RTN","RORP010",211,0)
 . S OLDLIST=$G(RORDATA(798.1,REGIEN_",",27,"I"))
"RTN","RORP010",212,0)
 . Q:$G(OLDLIST)=""
"RTN","RORP010",213,0)
 . I OLDLIST[",18,19,20" Q
"RTN","RORP010",214,0)
 . ;update AVAILABLE REPORTS with the 3 additional reports
"RTN","RORP010",215,0)
 . S NEWLIST=OLDLIST_",18,19,20"
"RTN","RORP010",216,0)
 . N FLAG,FDA,IENS,FIELD S IENS=REGIEN_",",FIELD=27,FLAG="E"
"RTN","RORP010",217,0)
 . S FDA(798.1,IENS,FIELD)=NEWLIST
"RTN","RORP010",218,0)
 . K RORERR D FILE^DIE(FLAG,"FDA","RORERR")
"RTN","RORP010",219,0)
 D CLEAN^DILF
"RTN","RORP010",220,0)
 ;
"RTN","RORP010",221,0)
 ;******************************************************************************
"RTN","RORP010",222,0)
 ;Add new LOINC codes to the VA HEPC and VA HIV lab search criterion in the
"RTN","RORP010",223,0)
 ;ROR LAB SEARCH file #798.9.  Don't add them if they already exist.  Do not
"RTN","RORP010",224,0)
 ;add the 'dash' or the number following it
"RTN","RORP010",225,0)
 ;******************************************************************************
"RTN","RORP010",226,0)
 N I,HEPCIEN,HIVIEN,RORDATA,RORLOINC,RORTAG K RORMSG1,RORMSG2
"RTN","RORP010",227,0)
 N HEPCNT,HIVCNT S HEPCNT=0,HIVCNT=0
"RTN","RORP010",228,0)
 S HIVIEN=$O(^ROR(798.9,"B","VA HIV",0)) ;HIV top level IEN
"RTN","RORP010",229,0)
 S HEPCIEN=$O(^ROR(798.9,"B","VA HEPC",0)) ;HEPC top level IEN
"RTN","RORP010",230,0)
 ;--- add LOINC codes to the VA HIV search criteria
"RTN","RORP010",231,0)
 F I=1:1:14  S RORTAG="HIV"_I D 
"RTN","RORP010",232,0)
 . S RORLOINC=$P($P($T(@RORTAG),";;",2),"-",1)
"RTN","RORP010",233,0)
 . ;don't add if it's already in the global
"RTN","RORP010",234,0)
 . Q:($D(^ROR(798.9,HIVIEN,1,"B",RORLOINC)))
"RTN","RORP010",235,0)
 . S RORDATA(1,798.92,"+2,"_HIVIEN_",",.01)=$G(RORLOINC)
"RTN","RORP010",236,0)
 . S RORDATA(1,798.92,"+2,"_HIVIEN_",",1)=6
"RTN","RORP010",237,0)
 . D UPDATE^DIE("","RORDATA(1)",,"RORMSG1")
"RTN","RORP010",238,0)
 . S HIVCNT=HIVCNT+1
"RTN","RORP010",239,0)
 K RORDATA(1)
"RTN","RORP010",240,0)
 ;--- add LOINC codes to the VA HEPC search criteria
"RTN","RORP010",241,0)
 F I=1:1:5  S RORTAG="HEP"_I D
"RTN","RORP010",242,0)
 . S RORLOINC=$P($P($T(@RORTAG),";;",2),"-",1)
"RTN","RORP010",243,0)
 . ;don't add if it's already in the global
"RTN","RORP010",244,0)
 . Q:($D(^ROR(798.9,HEPCIEN,1,"B",RORLOINC)))
"RTN","RORP010",245,0)
 . S RORDATA(1,798.92,"+2,"_HEPCIEN_",",.01)=$G(RORLOINC)
"RTN","RORP010",246,0)
 . S RORDATA(1,798.92,"+2,"_HEPCIEN_",",1)=6
"RTN","RORP010",247,0)
 . D UPDATE^DIE("","RORDATA(1)",,"RORMSG2")
"RTN","RORP010",248,0)
 . S HEPCNT=HEPCNT+1
"RTN","RORP010",249,0)
 K RORDATA,RORMSG1,RORMSG2
"RTN","RORP010",250,0)
 ;
"RTN","RORP010",251,0)
 Q
"RTN","RORP010",252,0)
 ;
"RTN","RORP010",253,0)
 ;******************************************************************************
"RTN","RORP010",254,0)
 ;New LOINC codes
"RTN","RORP010",255,0)
 ;******************************************************************************
"RTN","RORP010",256,0)
 ;HIV LOINC codes
"RTN","RORP010",257,0)
HIV1 ;;34591-8
"RTN","RORP010",258,0)
HIV2 ;;34592-6
"RTN","RORP010",259,0)
HIV3 ;;43009-0
"RTN","RORP010",260,0)
HIV4 ;;43010-8
"RTN","RORP010",261,0)
HIV5 ;;43185-8
"RTN","RORP010",262,0)
HIV6 ;;43599-0
"RTN","RORP010",263,0)
HIV7 ;;44533-8
"RTN","RORP010",264,0)
HIV8 ;;44607-0
"RTN","RORP010",265,0)
HIV9 ;;44873-8
"RTN","RORP010",266,0)
HIV10 ;;49580-4
"RTN","RORP010",267,0)
HIV11 ;;49905-3
"RTN","RORP010",268,0)
HIV12 ;;5221-7
"RTN","RORP010",269,0)
HIV13 ;;53379-4
"RTN","RORP010",270,0)
HIV14 ;;54086-4
"RTN","RORP010",271,0)
 ;HEPC LOINC codes 
"RTN","RORP010",272,0)
HEP1 ;;47365-2
"RTN","RORP010",273,0)
HEP2 ;;47441-1
"RTN","RORP010",274,0)
HEP3 ;;48576-3
"RTN","RORP010",275,0)
HEP4 ;;51655-9
"RTN","RORP010",276,0)
HEP5 ;;51657-5
"RTN","RORP010",277,0)
 ;
"RTN","RORP010",278,0)
 ;******************************************************************************
"RTN","RORP010",279,0)
 ; Data to be added to ROR LIST ITEM file (#799.1)
"RTN","RORP010",280,0)
 ; TEXT^TYPE^REGIEN^CODE
"RTN","RORP010",281,0)
 ;******************************************************************************
"RTN","RORP010",282,0)
LI1 ;;BMI^5^1^1
"RTN","RORP010",283,0)
LI2 ;;BMI^5^2^1
"RTN","RORP010",284,0)
LI3 ;;MELD^6^1^1
"RTN","RORP010",285,0)
LI4 ;;MELD-Na^6^1^2
"RTN","RORP010",286,0)
LI5 ;;MELD^6^2^1
"RTN","RORP010",287,0)
LI6 ;;MELD-Na^6^2^2
"RTN","RORP010",288,0)
LI7 ;;Creatinine clearance by Cockcroft-Gault^7^1^1
"RTN","RORP010",289,0)
LI8 ;;eGFR by MDRD^7^1^2
"RTN","RORP010",290,0)
LI9 ;;Creatinine clearance by Cockcroft-Gault^7^2^1
"RTN","RORP010",291,0)
LI10 ;;eGFR by MDRD^7^2^2
"RTN","RORP010",292,0)
 ;
"RTN","RORP010",293,0)
 ;******************************************************************************
"RTN","RORP010",294,0)
 ;new XML tags to be added to ROR XML ITEM file (#799.31)
"RTN","RORP010",295,0)
 ;******************************************************************************
"RTN","RORP010",296,0)
XML1 ;;PENDCOMM
"RTN","RORP010",297,0)
XML2 ;;ICD9FILT
"RTN","RORP010",298,0)
XML3 ;;FILTER
"RTN","RORP010",299,0)
XML4 ;;DESC
"RTN","RORP010",300,0)
XML5 ;;VALUES
"RTN","RORP010",301,0)
XML6 ;;BMI
"RTN","RORP010",302,0)
XML7 ;;HEIGHT
"RTN","RORP010",303,0)
XML8 ;;WEIGHT
"RTN","RORP010",304,0)
XML9 ;;DATA
"RTN","RORP010",305,0)
XML10 ;;MOST_RECENT
"RTN","RORP010",306,0)
XML11 ;;MAX_DATE
"RTN","RORP010",307,0)
XML12 ;;BMIDATA
"RTN","RORP010",308,0)
XML13 ;;MELDDATA
"RTN","RORP010",309,0)
XML14 ;;MELD
"RTN","RORP010",310,0)
XML15 ;;MELDNA
"RTN","RORP010",311,0)
XML16 ;;TNAME
"RTN","RORP010",312,0)
XML17 ;;RNLDATA
"RTN","RORP010",313,0)
XML18 ;;CRCL
"RTN","RORP010",314,0)
XML19 ;;EGFR
"RTN","RORP010",315,0)
XML20 ;;TEST
"RTN","RORRP016")
0^1^B71590151^B43771782
"RTN","RORRP016",1,0)
RORRP016 ;HCIOFO/SG - RPC: LIST OF ICD-9 CODES ;6/16/06 2:16pm
"RTN","RORRP016",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,10**;Feb 17, 2006;Build 32
"RTN","RORRP016",3,0)
 ;
"RTN","RORRP016",4,0)
 ; This routine uses the following IAs:
"RTN","RORRP016",5,0)
 ;
"RTN","RORRP016",6,0)
 ; #3990         $$ICDDX^ICDCODE, $$ICDOP^ICDCODE, and
"RTN","RORRP016",7,0)
 ;               $$ICDD^ICDCODE (supported)
"RTN","RORRP016",8,0)
 ; #2051         LIST^DIC (supported)
"RTN","RORRP016",9,0)
 ;
"RTN","RORRP016",10,0)
 Q
"RTN","RORRP016",11,0)
 ;
"RTN","RORRP016",12,0)
 ;***** RETURNS THE LIST OF ICD-9 CODES (DIAGNOSES OR PROCEDURES)
"RTN","RORRP016",13,0)
 ; RPC: [ROR LIST ICD-9]
"RTN","RORRP016",14,0)
 ;
"RTN","RORRP016",15,0)
 ; .RORESULT     Reference to a local variable where the results
"RTN","RORRP016",16,0)
 ;               are returned to.
"RTN","RORRP016",17,0)
 ;
"RTN","RORRP016",18,0)
 ; [DATE]        Date for the code set versioning.
"RTN","RORRP016",19,0)
 ;
"RTN","RORRP016",20,0)
 ; [PART]        The partial match restriction.
"RTN","RORRP016",21,0)
 ;
"RTN","RORRP016",22,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORRP016",23,0)
 ;                 A  Exclude active codes
"RTN","RORRP016",24,0)
 ;                 B  Backwards. Traverses the index in the opposite
"RTN","RORRP016",25,0)
 ;                    direction of normal traversal
"RTN","RORRP016",26,0)
 ;                 D  Full search by description
"RTN","RORRP016",27,0)
 ;                 F  Exclude codes applicable to females only
"RTN","RORRP016",28,0)
 ;                 I  Exclude inactive codes
"RTN","RORRP016",29,0)
 ;                 K  Search in description keywords
"RTN","RORRP016",30,0)
 ;                 M  Exclude codes applicable to males only
"RTN","RORRP016",31,0)
 ;                 O  Return operation/procedure codes from file #80.1
"RTN","RORRP016",32,0)
 ;                    instead of diagnosis codes from the file #80
"RTN","RORRP016",33,0)
 ;                 P  Exclude codes that are not acceptable
"RTN","RORRP016",34,0)
 ;                    as primary diagnoses
"RTN","RORRP016",35,0)
 ;
"RTN","RORRP016",36,0)
 ; [NUMBER]      Maximum number of entries to return. A value of "*"
"RTN","RORRP016",37,0)
 ;               or no value in this parameter designates all entries.
"RTN","RORRP016",38,0)
 ;
"RTN","RORRP016",39,0)
 ; [FROM]        The index entry(s) from which to begin the list
"RTN","RORRP016",40,0)
 ;                 ^01: FromName
"RTN","RORRP016",41,0)
 ;                 ^02: FromIEN
"RTN","RORRP016",42,0)
 ;
"RTN","RORRP016",43,0)
 ;               For example, a FROM value of "51" would list entries
"RTN","RORRP016",44,0)
 ;               following 51. You can use the 2-nd and 3-rd "^"-
"RTN","RORRP016",45,0)
 ;               pieces of the @RORESULT@(0) node to continue the
"RTN","RORRP016",46,0)
 ;               listing in the subsequent procedure calls.
"RTN","RORRP016",47,0)
 ;
"RTN","RORRP016",48,0)
 ;               NOTE: The FROM value itself is not included in
"RTN","RORRP016",49,0)
 ;                     the resulting list.
"RTN","RORRP016",50,0)
 ;
"RTN","RORRP016",51,0)
 ; See description of the LIST^DIC for more details about the
"RTN","RORRP016",52,0)
 ; PART, NUMBER and FROM parameters.
"RTN","RORRP016",53,0)
 ;
"RTN","RORRP016",54,0)
 ; The ^TMP("RORRP016",$J) global node is used by this procedure.
"RTN","RORRP016",55,0)
 ;
"RTN","RORRP016",56,0)
 ; Return Values:
"RTN","RORRP016",57,0)
 ;
"RTN","RORRP016",58,0)
 ; A negative value of the first "^"-piece of the @RORESULT@(0)
"RTN","RORRP016",59,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP016",60,0)
 ; details).
"RTN","RORRP016",61,0)
 ;
"RTN","RORRP016",62,0)
 ; Otherwise, number of ICD-9 codes and the value of the FROM
"RTN","RORRP016",63,0)
 ; parameter for the next procedure call are returned in the
"RTN","RORRP016",64,0)
 ; @RORESULT@(0) and the subsequent nodes of the global array
"RTN","RORRP016",65,0)
 ; contain the codes.
"RTN","RORRP016",66,0)
 ; 
"RTN","RORRP016",67,0)
 ; @RORESULT@(0)         Result Descriptor
"RTN","RORRP016",68,0)
 ;                         ^01: Number of codes
"RTN","RORRP016",69,0)
 ;                         ^02: FromName
"RTN","RORRP016",70,0)
 ;                         ^03: FromIEN
"RTN","RORRP016",71,0)
 ;
"RTN","RORRP016",72,0)
 ; @RORESULT@(i)         ICD-9
"RTN","RORRP016",73,0)
 ;                         ^01: IEN
"RTN","RORRP016",74,0)
 ;                         ^02: Diagnosis or operation/procedure
"RTN","RORRP016",75,0)
 ;                         ^03: Code
"RTN","RORRP016",76,0)
 ;                         ^04: Use only with Sex
"RTN","RORRP016",77,0)
 ;                         ^05: Inactive {0|1}
"RTN","RORRP016",78,0)
 ;                         ^06: Inactivation Date (FileMan)
"RTN","RORRP016",79,0)
 ;
"RTN","RORRP016",80,0)
 ; @RORESULT@(i+1)       ICD-9 Description
"RTN","RORRP016",81,0)
 ;
"RTN","RORRP016",82,0)
ICD9LIST(RORESULT,DATE,PART,FLAGS,NUMBER,FROM) ;
"RTN","RORRP016",83,0)
 N BUF,RC,RORERRDL,TMP
"RTN","RORRP016",84,0)
 D CLEAR^RORERR("ICD9LIST^RORRP016",1)
"RTN","RORRP016",85,0)
 K RORESULT  S RORESULT=$NA(^TMP("RORRP016",$J))  K @RORESULT
"RTN","RORRP016",86,0)
 ;--- Check the parameters
"RTN","RORRP016",87,0)
 S PART=$G(PART),FLAGS=$G(FLAGS)
"RTN","RORRP016",88,0)
 S NUMBER=$S($G(NUMBER)>0:+NUMBER,1:"*")
"RTN","RORRP016",89,0)
 ;--- Setup the start point
"RTN","RORRP016",90,0)
 I $G(FROM)'=""  D  S FROM=$P(FROM,U)
"RTN","RORRP016",91,0)
 . S:$P(FROM,U,2)>0 FROM("IEN")=+$P(FROM,U,2)
"RTN","RORRP016",92,0)
 ;--- Compile the list
"RTN","RORRP016",93,0)
 I FLAGS["O"  D
"RTN","RORRP016",94,0)
 . ;--- Get the list of operation/procedure codes
"RTN","RORRP016",95,0)
 . S RC=$$QUERY1(PART,FLAGS,NUMBER,.FROM)  Q:RC<0
"RTN","RORRP016",96,0)
 . S RORESULT=$NA(@RORESULT@("DILIST"))
"RTN","RORRP016",97,0)
 . ;--- Load remaining data and refine the list
"RTN","RORRP016",98,0)
 . D REFINE1(PART,FLAGS,$G(DATE))
"RTN","RORRP016",99,0)
 E  D
"RTN","RORRP016",100,0)
 . ;--- Get the list of diagnosis codes
"RTN","RORRP016",101,0)
 . S RC=$$QUERY(PART,FLAGS,NUMBER,.FROM)  Q:RC<0
"RTN","RORRP016",102,0)
 . S RORESULT=$NA(@RORESULT@("DILIST"))
"RTN","RORRP016",103,0)
 . ;--- Load remaining data and refine the list
"RTN","RORRP016",104,0)
 . D REFINE(PART,FLAGS,$G(DATE))
"RTN","RORRP016",105,0)
 I RC<0  D RPCSTK^RORERR(.RORESULT,RC)  Q
"RTN","RORRP016",106,0)
 ;--- Success
"RTN","RORRP016",107,0)
 S TMP=$G(@RORESULT@(0)),BUF=+$P(TMP,U)
"RTN","RORRP016",108,0)
 S:$P(TMP,U,3) $P(BUF,U,2,3)=$G(FROM)_U_$G(FROM("IEN"))
"RTN","RORRP016",109,0)
 K @RORESULT@(0)  S @RORESULT@(0)=BUF
"RTN","RORRP016",110,0)
 Q
"RTN","RORRP016",111,0)
 ;
"RTN","RORRP016",112,0)
 ;***** QUERIES THE ICD DIAGNOSIS FILE (#80)
"RTN","RORRP016",113,0)
QUERY(PART,FLAGS,NR,FROM) ;
"RTN","RORRP016",114,0)
 N FLDS,RORMSG,SCR,TMP,XREF
"RTN","RORRP016",115,0)
 ;--- Compile the screen logic (be careful with naked references)
"RTN","RORRP016",116,0)
 S SCR=""
"RTN","RORRP016",117,0)
 I FLAGS["D"  S:PART'="" SCR=SCR_"I $P(D,U,3)["""_PART_""" ",PART=""
"RTN","RORRP016",118,0)
 S:FLAGS["F" SCR=SCR_"I $P(D,U,10)'=""F"" "
"RTN","RORRP016",119,0)
 S:FLAGS["M" SCR=SCR_"I $P(D,U,10)'=""M"" "
"RTN","RORRP016",120,0)
 S:FLAGS["P" SCR=SCR_"I '$P(D,U,4) "
"RTN","RORRP016",121,0)
 S:SCR'="" SCR="S D=$G(^(0)) "_SCR ;Naked Ref: ^ICD9(
"RTN","RORRP016",122,0)
 ;--- Get the list of codes and some data
"RTN","RORRP016",123,0)
 ;S FLDS="@;3;.01;9.5I;IXI",TMP="P"_$S(FLAGS["B":"B",1:"")
"RTN","RORRP016",124,0)
 S FLDS="@;.01;9.5I;IXI",TMP="P"_$S(FLAGS["B":"B",1:"")
"RTN","RORRP016",125,0)
 S XREF=$S(FLAGS["D":"#",FLAGS["K":"D",1:"BA")
"RTN","RORRP016",126,0)
 D LIST^DIC(80,,FLDS,TMP,NR,.FROM,PART,XREF,SCR,,RORESULT,"RORMSG")
"RTN","RORRP016",127,0)
 I $G(DIERR)  K @RORESULT  Q $$DBS^RORERR("RORMSG",-9,,,80)
"RTN","RORRP016",128,0)
 ;--- Add Diagnosis code to RORESULT using API
"RTN","RORRP016",129,0)
 D GETDIAG
"RTN","RORRP016",130,0)
 ;--- Success
"RTN","RORRP016",131,0)
 Q 0
"RTN","RORRP016",132,0)
 ;
"RTN","RORRP016",133,0)
 ;***** QUERIES THE ICD OPERATION/PROCEDURE FILE (#80.1)
"RTN","RORRP016",134,0)
QUERY1(PART,FLAGS,NR,FROM) ;
"RTN","RORRP016",135,0)
 N FLDS,RORMSG,SCR,TMP,XREF
"RTN","RORRP016",136,0)
 ;--- Compile the screen logic (be careful with naked references)
"RTN","RORRP016",137,0)
 S SCR=""
"RTN","RORRP016",138,0)
 I FLAGS["D"  S:PART'="" SCR=SCR_"I $P(D,U,4)["""_PART_""" ",PART=""
"RTN","RORRP016",139,0)
 S:FLAGS["F" SCR=SCR_"I $P(D,U,10)'=""F"" "
"RTN","RORRP016",140,0)
 S:FLAGS["M" SCR=SCR_"I $P(D,U,10)'=""M"" "
"RTN","RORRP016",141,0)
 S:SCR'="" SCR="S D=$G(^(0)) "_SCR ;Naked Ref: ^ICD0(
"RTN","RORRP016",142,0)
 ;--- Get the list of codes and some data
"RTN","RORRP016",143,0)
 ;S FLDS="@;4;.01;9.5I;IXI",TMP="P"_$S(FLAGS["B":"B",1:"")
"RTN","RORRP016",144,0)
 S FLDS="@;.01;9.5I;IXI",TMP="P"_$S(FLAGS["B":"B",1:"")
"RTN","RORRP016",145,0)
 S XREF=$S(FLAGS["D":"#",FLAGS["K":"D",1:"BA")
"RTN","RORRP016",146,0)
 D LIST^DIC(80.1,,FLDS,TMP,NR,.FROM,PART,XREF,SCR,,RORESULT,"RORMSG")
"RTN","RORRP016",147,0)
 I $G(DIERR)  K @RORESULT  Q $$DBS^RORERR("RORMSG",-9,,,80.1)
"RTN","RORRP016",148,0)
 ;--- Add Operation/Procedure  to RORESULT using API
"RTN","RORRP016",149,0)
 D GETOPPR
"RTN","RORRP016",150,0)
 ;--- Success
"RTN","RORRP016",151,0)
 Q 0
"RTN","RORRP016",152,0)
 ;
"RTN","RORRP016",153,0)
 ;***** REFINES THE LIST OF DIAGNOSES
"RTN","RORRP016",154,0)
REFINE(PART,FLAGS,DATE) ;
"RTN","RORRP016",155,0)
 N BUF,CNT,ICDINFO,MODE,RORDESC,SUBS,TMP
"RTN","RORRP016",156,0)
 S MODE=($TR(FLAGS,"DK")=FLAGS)
"RTN","RORRP016",157,0)
 S (CNT,SUBS)=0
"RTN","RORRP016",158,0)
 F  S SUBS=$O(@RORESULT@(SUBS)) Q:SUBS'>0  D
"RTN","RORRP016",159,0)
 . S BUF=@RORESULT@(SUBS,0)
"RTN","RORRP016",160,0)
 . ;--- Remove duplicates created by the logic of the "BAA" xref
"RTN","RORRP016",161,0)
 . I MODE  D  I '(TMP?1.E1" ")  K @RORESULT@(SUBS)  Q
"RTN","RORRP016",162,0)
 . . S TMP=$P(BUF,U,5)
"RTN","RORRP016",163,0)
 . ;--- Load the additional data
"RTN","RORRP016",164,0)
 . S ICDINFO=$$ICDDX^ICDCODE(+$P(BUF,U),DATE)
"RTN","RORRP016",165,0)
 . I ICDINFO<0  K @RORESULT@(SUBS)  Q
"RTN","RORRP016",166,0)
 . ;--- Screen active/inactive records
"RTN","RORRP016",167,0)
 . S TMP=+$P(ICDINFO,U,10)                      ; Status
"RTN","RORRP016",168,0)
 . I $S(TMP:FLAGS["A",1:FLAGS["I")  K @RORESULT@(SUBS)  Q
"RTN","RORRP016",169,0)
 . S $P(BUF,U,5)=TMP
"RTN","RORRP016",170,0)
 . S $P(BUF,U,6)=$S(TMP:$P(ICDINFO,U,12),1:"")  ; Inactivation Date
"RTN","RORRP016",171,0)
 . ;--- Versioned diagnosis
"RTN","RORRP016",172,0)
 . S TMP=$P(ICDINFO,U,4)  S:TMP'="" $P(BUF,U,2)=TMP
"RTN","RORRP016",173,0)
 . ;--- Store the data
"RTN","RORRP016",174,0)
 . S CNT=CNT+1,@RORESULT@(SUBS,0)=BUF
"RTN","RORRP016",175,0)
 . ;--- Versioned description
"RTN","RORRP016",176,0)
 . S TMP=$$ICDD^ICDCODE($P(BUF,U,3),"RORDESC")
"RTN","RORRP016",177,0)
 . S @RORESULT@(SUBS,1)=$S($G(RORDESC(1))'="":RORDESC(1),1:$P(BUF,U,2))
"RTN","RORRP016",178,0)
 . K RORDESC
"RTN","RORRP016",179,0)
 ;---
"RTN","RORRP016",180,0)
 S $P(@RORESULT@(0),U)=CNT
"RTN","RORRP016",181,0)
 Q
"RTN","RORRP016",182,0)
 ;
"RTN","RORRP016",183,0)
 ;***** REFINES THE LIST OF OPERATION/PROCEDURES
"RTN","RORRP016",184,0)
REFINE1(PART,FLAGS,DATE) ;
"RTN","RORRP016",185,0)
 N BUF,CNT,ICDINFO,MODE,RORDESC,SUBS,TMP
"RTN","RORRP016",186,0)
 S MODE=($TR(FLAGS,"DK")=FLAGS)
"RTN","RORRP016",187,0)
 S (CNT,SUBS)=0
"RTN","RORRP016",188,0)
 F  S SUBS=$O(@RORESULT@(SUBS)) Q:SUBS'>0  D
"RTN","RORRP016",189,0)
 . S BUF=@RORESULT@(SUBS,0)
"RTN","RORRP016",190,0)
 . ;--- Remove duplicates created by the logic of the "BAA" xref
"RTN","RORRP016",191,0)
 . I MODE  D  I '(TMP?1.E1" ")  K @RORESULT@(SUBS)  Q
"RTN","RORRP016",192,0)
 . . S TMP=$P(BUF,U,5)
"RTN","RORRP016",193,0)
 . ;--- Load the additional data
"RTN","RORRP016",194,0)
 . S ICDINFO=$$ICDOP^ICDCODE(+$P(BUF,U),DATE)
"RTN","RORRP016",195,0)
 . I ICDINFO<0  K @RORESULT@(SUBS)  Q
"RTN","RORRP016",196,0)
 . ;--- Screen active/inactive records
"RTN","RORRP016",197,0)
 . S TMP=+$P(ICDINFO,U,10)                      ; Status
"RTN","RORRP016",198,0)
 . I $S(TMP:FLAGS["A",1:FLAGS["I")  K @RORESULT@(SUBS)  Q
"RTN","RORRP016",199,0)
 . S $P(BUF,U,5)=TMP
"RTN","RORRP016",200,0)
 . S $P(BUF,U,6)=$S(TMP:$P(ICDINFO,U,12),1:"")  ; Inactivation Date
"RTN","RORRP016",201,0)
 . ;--- Versioned operation/procedure
"RTN","RORRP016",202,0)
 . S TMP=$P(ICDINFO,U,5)  S:TMP'="" $P(BUF,U,2)=TMP
"RTN","RORRP016",203,0)
 . ;--- Store the data
"RTN","RORRP016",204,0)
 . S CNT=CNT+1,@RORESULT@(SUBS,0)=BUF
"RTN","RORRP016",205,0)
 . ;--- Versioned description
"RTN","RORRP016",206,0)
 . S TMP=$$ICDD^ICDCODE($P(BUF,U,3),"RORDESC")
"RTN","RORRP016",207,0)
 . S @RORESULT@(SUBS,1)=$S($G(RORDESC(1))'="":RORDESC(1),1:$P(BUF,U,2))
"RTN","RORRP016",208,0)
 . K RORDESC
"RTN","RORRP016",209,0)
 ;---
"RTN","RORRP016",210,0)
 S $P(@RORESULT@(0),U)=CNT
"RTN","RORRP016",211,0)
 Q
"RTN","RORRP016",212,0)
 ;
"RTN","RORRP016",213,0)
 ;***** Get Diagnosis code and add to the @RORESULT@("DILIST") array
"RTN","RORRP016",214,0)
GETDIAG ;
"RTN","RORRP016",215,0)
 N RORI,RORIEN,RORDIAG,ROR1,RORALL,RORNUM S RORI=0
"RTN","RORRP016",216,0)
 F  S RORI=$O(@RORESULT@("DILIST",RORI)) Q:RORI=""  D
"RTN","RORRP016",217,0)
 . S RORIEN=$P(@RORESULT@("DILIST",RORI,0),U,1)
"RTN","RORRP016",218,0)
 . S RORDIAG=$P($$ICDDX^ICDCODE(RORIEN,,,0),U,4)
"RTN","RORRP016",219,0)
 . ;get number of pieces in RORESULT
"RTN","RORRP016",220,0)
 . S RORNUM=$L(@RORESULT@("DILIST",RORI,0),U)
"RTN","RORRP016",221,0)
 . S ROR1=$P(@RORESULT@("DILIST",RORI,0),U,1) ;1st piece
"RTN","RORRP016",222,0)
 . S RORALL=$P(@RORESULT@("DILIST",RORI,0),U,2,RORNUM) ;all other pieces
"RTN","RORRP016",223,0)
 . S @RORESULT@("DILIST",RORI,0)=$G(ROR1)_U_$G(RORDIAG)_U_$G(RORALL)
"RTN","RORRP016",224,0)
 ;Update the 'map' in RORESULT to include field #3
"RTN","RORRP016",225,0)
 S RORNUM=$L(@RORESULT@("DILIST",0,"MAP"),U) ;number of pieces
"RTN","RORRP016",226,0)
 S ROR1=$P(@RORESULT@("DILIST",0,"MAP"),U,1) ;first piece
"RTN","RORRP016",227,0)
 S RORALL=$P(@RORESULT@("DILIST",0,"MAP"),U,2,RORNUM) ;all other pieces
"RTN","RORRP016",228,0)
 S @RORESULT@("DILIST",0,"MAP")=$G(ROR1)_U_"3"_U_$G(RORALL)
"RTN","RORRP016",229,0)
 Q
"RTN","RORRP016",230,0)
 ;***** Get Operation/Procedure and add to the RORESULT("DILIST") array
"RTN","RORRP016",231,0)
GETOPPR ;
"RTN","RORRP016",232,0)
 N RORI,RORIEN,ROROPPR,ROR1,RORALL,RORNUM S RORI=0
"RTN","RORRP016",233,0)
 F  S RORI=$O(@RORESULT@("DILIST",RORI)) Q:RORI=""  D
"RTN","RORRP016",234,0)
 . S RORIEN=$P(@RORESULT@("DILIST",RORI,0),U,1)
"RTN","RORRP016",235,0)
 . S ROROPPR=$P($$ICDOP^ICDCODE(RORIEN,,,0),U,5)
"RTN","RORRP016",236,0)
 . ;get number of pieces in RORESULT to reflect field #3
"RTN","RORRP016",237,0)
 . S RORNUM=$L(@RORESULT@("DILIST",RORI,0),U)
"RTN","RORRP016",238,0)
 . S ROR1=$P(@RORESULT@("DILIST",RORI,0),U,1) ;1st piece
"RTN","RORRP016",239,0)
 . S RORALL=$P(@RORESULT@("DILIST",RORI,0),U,2,RORNUM) ;all other pieces
"RTN","RORRP016",240,0)
 . S @RORESULT@("DILIST",RORI,0)=$G(ROR1)_U_$G(ROROPPR)_U_$G(RORALL)
"RTN","RORRP016",241,0)
 ;Update the 'map' in RORESULT to include field #4
"RTN","RORRP016",242,0)
 S RORNUM=$L(@RORESULT@("DILIST",0,"MAP"),U) ;number of pieces
"RTN","RORRP016",243,0)
 S ROR1=$P(@RORESULT@("DILIST",0,"MAP"),U,1) ;first piece
"RTN","RORRP016",244,0)
 S RORALL=$P(@RORESULT@("DILIST",0,"MAP"),U,2,RORNUM) ;all other pieces
"RTN","RORRP016",245,0)
 S @RORESULT@("DILIST",0,"MAP")=$G(ROR1)_U_"4"_U_$G(RORALL)
"RTN","RORRP016",246,0)
 Q
"RTN","RORRP030")
0^19^B2779702^B3261693
"RTN","RORRP030",1,0)
RORRP030 ;HCIOFO/SG - RPC: PATIENT DELETE ;11/29/05 3:04pm
"RTN","RORRP030",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","RORRP030",3,0)
 ;
"RTN","RORRP030",4,0)
 ; This routine uses the following IAs:
"RTN","RORRP030",5,0)
 ;
"RTN","RORRP030",6,0)
 ; #2053    FILE^DIE (supported)
"RTN","RORRP030",7,0)
 Q
"RTN","RORRP030",8,0)
 ;
"RTN","RORRP030",9,0)
 ;***** MARKS THE PATIENT'S RECORD AS DELETED FROM THE REGISTRY
"RTN","RORRP030",10,0)
 ; RPC: [ROR PATIENT DELETE]
"RTN","RORRP030",11,0)
 ;
"RTN","RORRP030",12,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP030",13,0)
 ;               are returned to.
"RTN","RORRP030",14,0)
 ;
"RTN","RORRP030",15,0)
 ; REGIEN        Registry IEN
"RTN","RORRP030",16,0)
 ;
"RTN","RORRP030",17,0)
 ; RORDFN        IEN of the patient
"RTN","RORRP030",18,0)
 ;
"RTN","RORRP030",19,0)
 ; [FORCE]       Deprecated
"RTN","RORRP030",20,0)
 ;
"RTN","RORRP030",21,0)
 ; Return Values:
"RTN","RORRP030",22,0)
 ;
"RTN","RORRP030",23,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP030",24,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP030",25,0)
 ; details).
"RTN","RORRP030",26,0)
 ;
"RTN","RORRP030",27,0)
 ; Otherwise, the following codes can be returned in the RESULTS(0):
"RTN","RORRP030",28,0)
 ;
"RTN","RORRP030",29,0)
 ;         0  The record cannot be deleted
"RTN","RORRP030",30,0)
 ;         9  The record has been marked as deleted
"RTN","RORRP030",31,0)
 ;
"RTN","RORRP030",32,0)
DELETE(RESULTS,REGIEN,RORDFN,FORCE) ;
"RTN","RORRP030",33,0)
 N IENS,RC,REGNAME,RORFDA,RORMSG,TMP
"RTN","RORRP030",34,0)
 D CLEAR^RORERR("DELETE^RORRP030",1)
"RTN","RORRP030",35,0)
 K RESULTS  S RESULTS(0)=0
"RTN","RORRP030",36,0)
 ;
"RTN","RORRP030",37,0)
 ;--- Get the registry description/name
"RTN","RORRP030",38,0)
 S TMP=$$REGNAME^RORUTL01(REGIEN)
"RTN","RORRP030",39,0)
 I TMP=""  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP030",40,0)
 . S RC=$$ERROR^RORERR(-1,,,RORDFN)
"RTN","RORRP030",41,0)
 S REGNAME=$S($P(TMP,U,2)'="":$P(TMP,U,2),1:$P(TMP,U))
"RTN","RORRP030",42,0)
 ;
"RTN","RORRP030",43,0)
 ;--- Get IENS of the registry record
"RTN","RORRP030",44,0)
 S IENS=$$PRRIEN^RORUTL01(RORDFN,REGIEN)_","
"RTN","RORRP030",45,0)
 I IENS'>0  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP030",46,0)
 . S RC=$$ERROR^RORERR(-97,,,RORDFN,REGNAME)
"RTN","RORRP030",47,0)
 ;
"RTN","RORRP030",48,0)
 ;I $$PENDING^RORUTL18(+IENS)  D
"RTN","RORRP030",49,0)
 ;. ;--- Delete the pending record immediately
"RTN","RORRP030",50,0)
 ;. N DA,DIK  S DIK=$$ROOT^DILFD(798),DA=+IENS  D ^DIK
"RTN","RORRP030",51,0)
 ;E  D
"RTN","RORRP030",52,0)
 ;
"RTN","RORRP030",53,0)
 ;Patch 10: mark any deleted record as deleted (don't delete pending record immediately)
"RTN","RORRP030",54,0)
 D
"RTN","RORRP030",55,0)
 . ;--- Mark the record as deleted
"RTN","RORRP030",56,0)
 . S RORFDA(798,IENS,3)=5
"RTN","RORRP030",57,0)
 . D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORRP030",58,0)
 . I $G(DIERR)  D  D RPCSTK^RORERR(.RESULTS,RC)
"RTN","RORRP030",59,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,RORDFN,798,IENS)
"RTN","RORRP030",60,0)
 ;---
"RTN","RORRP030",61,0)
 S RESULTS(0)=9
"RTN","RORRP030",62,0)
 Q
"RTN","RORUPD50")
0^18^B15673892^B14024739
"RTN","RORUPD50",1,0)
RORUPD50 ;HCIOFO/SG - UPDATE THE PATIENT IN THE REGISTRIES ;8/2/05 9:14am
"RTN","RORUPD50",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","RORUPD50",3,0)
 ;
"RTN","RORUPD50",4,0)
 ; This routine uses the following IAs:
"RTN","RORUPD50",5,0)
 ;
"RTN","RORUPD50",6,0)
 ; #2051  FIND^DIC (supported)
"RTN","RORUPD50",7,0)
 ; #10013 ^DIK (supported)
"RTN","RORUPD50",8,0)
 ; #2056  $$GET1^DIQ (supported)
"RTN","RORUPD50",9,0)
 ; #2055  $$ROOT^DILFD (supported)
"RTN","RORUPD50",10,0)
 ; #2053  UPDATE^DIE (supported)
"RTN","RORUPD50",11,0)
 Q
"RTN","RORUPD50",12,0)
 ;
"RTN","RORUPD50",13,0)
 ;***** ADDS THE PATIENT TO THE REGISTRY
"RTN","RORUPD50",14,0)
 ;
"RTN","RORUPD50",15,0)
 ; PATIEN        Patient IEN
"RTN","RORUPD50",16,0)
 ; REGIEN        Registry IEN
"RTN","RORUPD50",17,0)
 ;
"RTN","RORUPD50",18,0)
 ; [ROR8RULS]    Closed root of a local array containing list of
"RTN","RORUPD50",19,0)
 ;               triggered selection rules:
"RTN","RORUPD50",20,0)
 ;                 @ROR8RULS@(RuleIEN)=Date
"RTN","RORUPD50",21,0)
 ;               If this parameter is not defined or equals to
"RTN","RORUPD50",22,0)
 ;               an empty string, selection rules are loaded from
"RTN","RORUPD50",23,0)
 ;               corresponding sub-node of the ^TMP("RORUPD",$J,"U").
"RTN","RORUPD50",24,0)
 ;
"RTN","RORUPD50",25,0)
 ; [[.]DOD]      Date of death. If this parameter is undefined,
"RTN","RORUPD50",26,0)
 ;               its value will be taken from the ROR PATIENT file.
"RTN","RORUPD50",27,0)
 ;               If you are going to call this function several times
"RTN","RORUPD50",28,0)
 ;               for the same patient (for different registries),
"RTN","RORUPD50",29,0)
 ;               pass a reference to undefined local variable (the
"RTN","RORUPD50",30,0)
 ;               DOD will be read from the file only once).
"RTN","RORUPD50",31,0)
 ;
"RTN","RORUPD50",32,0)
 ; Return values:
"RTN","RORUPD50",33,0)
 ;       <0  Error code
"RTN","RORUPD50",34,0)
 ;        0  Ok
"RTN","RORUPD50",35,0)
 ;        1  Patient has already existed in the registry
"RTN","RORUPD50",36,0)
 ;
"RTN","RORUPD50",37,0)
ADD(PATIEN,REGIEN,ROR8RULS,DOD) ;
"RTN","RORUPD50",38,0)
 N I,IENS,IENS01,RC,RORFDA,RORIEN,RORMSG,RULEIEN,TMP
"RTN","RORUPD50",39,0)
 ;--- Quit if the patient is already in the registry
"RTN","RORUPD50",40,0)
 Q:$$PRRIEN^RORUTL01(PATIEN,REGIEN)>0 1
"RTN","RORUPD50",41,0)
 ;
"RTN","RORUPD50",42,0)
 ;--- Prepare registry data
"RTN","RORUPD50",43,0)
 K RORFDA  S IENS="+1,"
"RTN","RORUPD50",44,0)
 S RORFDA(798,IENS,.01)=PATIEN           ; Patient Name
"RTN","RORUPD50",45,0)
 S RORFDA(798,IENS,.02)=REGIEN           ; Registry
"RTN","RORUPD50",46,0)
 S RORFDA(798,IENS,3)=4                  ; Pending
"RTN","RORUPD50",47,0)
 S RORFDA(798,IENS,4)=1                  ; Update Demographics
"RTN","RORUPD50",48,0)
 S RORFDA(798,IENS,5)=1                  ; Update Local Data
"RTN","RORUPD50",49,0)
 I $$TESTPAT^RORUTL01(PATIEN) S RORFDA(798,IENS,11)=1 ; Don't Send = 1 if test patient
"RTN","RORUPD50",50,0)
 ;--- Get the date of death
"RTN","RORUPD50",51,0)
 S:'($D(DOD)#10) DOD=$$GET1^DIQ(798.4,PATIEN_",",.351,"I",,"RORMSG")
"RTN","RORUPD50",52,0)
 ;--- Load list of triggered rules
"RTN","RORUPD50",53,0)
 S:$G(ROR8RULS)="" ROR8RULS=$NA(@RORUPDPI@("U",PATIEN,2,REGIEN))
"RTN","RORUPD50",54,0)
 S RULEIEN=""
"RTN","RORUPD50",55,0)
 F I=1:1  S RULEIEN=$O(@ROR8RULS@(RULEIEN))  Q:RULEIEN=""  D
"RTN","RORUPD50",56,0)
 . S IENS01="+"_(1000+I)_","_IENS
"RTN","RORUPD50",57,0)
 . S RORFDA(798.01,IENS01,.01)=RULEIEN  ; SELECTION RULE
"RTN","RORUPD50",58,0)
 . S TMP=$P(@ROR8RULS@(RULEIEN),U)\1
"RTN","RORUPD50",59,0)
 . S:TMP>0 RORFDA(798.01,IENS01,1)=TMP  ; DATE
"RTN","RORUPD50",60,0)
 . S TMP=+$P(@ROR8RULS@(RULEIEN),U,2)
"RTN","RORUPD50",61,0)
 . S:TMP>0 RORFDA(798.01,IENS01,2)=TMP  ; LOCATION
"RTN","RORUPD50",62,0)
 ;
"RTN","RORUPD50",63,0)
 ;--- Registry update transaction
"RTN","RORUPD50",64,0)
 S RC=0  D
"RTN","RORUPD50",65,0)
 . ;--- Call "before update" entry point
"RTN","RORUPD50",66,0)
 . S ENTRY=$G(RORUPD("UPD",REGIEN,1))
"RTN","RORUPD50",67,0)
 . I ENTRY'=""  X "S RC="_ENTRY_"(.RORFDA,PATIEN,REGIEN)"  Q:RC<0
"RTN","RORUPD50",68,0)
 . ;--- Make sure that the DON'T SEND flag is set for 'test' patient
"RTN","RORUPD50",69,0)
 . S:$$TESTPAT^RORUTL01(PATIEN) RORFDA(798,IENS,11)=1
"RTN","RORUPD50",70,0)
 . ;--- Update the registry
"RTN","RORUPD50",71,0)
 . D UPDATE^DIE(,"RORFDA","RORIEN","RORMSG")
"RTN","RORUPD50",72,0)
 . I $G(RORMSG("DIERR"))  S RC=$$DBS^RORERR("RORMSG",-9)  Q
"RTN","RORUPD50",73,0)
 . ;--- Call "after update" entry point
"RTN","RORUPD50",74,0)
 . S ENTRY=$G(RORUPD("UPD",REGIEN,2))
"RTN","RORUPD50",75,0)
 . I ENTRY'=""  X "S RC="_ENTRY_"(RORIEN(1),PATIEN,REGIEN)"  Q:RC<0
"RTN","RORUPD50",76,0)
 Q:RC'<0 0
"RTN","RORUPD50",77,0)
 ;
"RTN","RORUPD50",78,0)
 ;--- Rollback the update in case of error(s)
"RTN","RORUPD50",79,0)
 N DA,DIK
"RTN","RORUPD50",80,0)
 S DIK=$$ROOT^DILFD(798),DA=$G(RORIEN(1))
"RTN","RORUPD50",81,0)
 D:DA>0 ^DIK
"RTN","RORUPD50",82,0)
 Q RC
"RTN","RORUPD50",83,0)
 ;
"RTN","RORUPD50",84,0)
 ;***** ADDS PATIENT DATA TO THE 'ROR PATIENT' FILE
"RTN","RORUPD50",85,0)
 ;
"RTN","RORUPD50",86,0)
 ; PATIEN        Patient IEN
"RTN","RORUPD50",87,0)
 ;
"RTN","RORUPD50",88,0)
 ; Return values:
"RTN","RORUPD50",89,0)
 ;       <0  Error code
"RTN","RORUPD50",90,0)
 ;        0  Ok
"RTN","RORUPD50",91,0)
 ;        1  Patient data have already existed
"RTN","RORUPD50",92,0)
 ;
"RTN","RORUPD50",93,0)
ADDPDATA(PATIEN) ;
"RTN","RORUPD50",94,0)
 N IENS,RC,RORBUF,RORPAT,RORIEN,RORMSG
"RTN","RORUPD50",95,0)
 ;--- Try to find patient data
"RTN","RORUPD50",96,0)
 D FIND^DIC(798.4,,"@","QUX",PATIEN,1,"B",,,"RORBUF","RORMSG")
"RTN","RORUPD50",97,0)
 Q:$G(RORMSG("DIERR")) $$DBS^RORERR("RORMSG",-9,,,798.4)
"RTN","RORUPD50",98,0)
 ;--- Patient data already exists in the file
"RTN","RORUPD50",99,0)
 Q:$G(RORBUF("DILIST",0)) 1
"RTN","RORUPD50",100,0)
 ;--- Check if the patient record in the file #2 is valid
"RTN","RORUPD50",101,0)
 S RC=$$CHKPTR^RORUTL05(PATIEN)  Q:RC<0 RC
"RTN","RORUPD50",102,0)
 ;--- Prepare patient data
"RTN","RORUPD50",103,0)
 S IENS="+1,"
"RTN","RORUPD50",104,0)
 S RC=$$PATDATA^RORUPD52(PATIEN_",",.RORPAT,IENS)  Q:RC<0 RC
"RTN","RORUPD50",105,0)
 S RORIEN(1)=PATIEN                      ; IEN of the new record
"RTN","RORUPD50",106,0)
 S RORPAT(798.4,IENS,.01)=PATIEN         ; Patient Name
"RTN","RORUPD50",107,0)
 ;--- Add the patient record to the file
"RTN","RORUPD50",108,0)
 D UPDATE^DIE(,"RORPAT","RORIEN","RORMSG")
"RTN","RORUPD50",109,0)
 I $G(RORMSG("DIERR"))  D  Q:RC
"RTN","RORUPD50",110,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,PATIEN,798.4)
"RTN","RORUPD50",111,0)
 Q 0
"RTN","RORUPD50",112,0)
 ;
"RTN","RORUPD50",113,0)
 ;***** ADDS THE PATIENT TO MARKED REGISTRIES
"RTN","RORUPD50",114,0)
 ;
"RTN","RORUPD50",115,0)
 ; PATIEN        Patient IEN
"RTN","RORUPD50",116,0)
 ;
"RTN","RORUPD50",117,0)
 ; Return values:
"RTN","RORUPD50",118,0)
 ;       <0  Error code
"RTN","RORUPD50",119,0)
 ;        0  Patient should not be added to the registry
"RTN","RORUPD50",120,0)
 ;       >0  Patient has been added to the registry
"RTN","RORUPD50",121,0)
 ;
"RTN","RORUPD50",122,0)
UPDREG(PATIEN) ;
"RTN","RORUPD50",123,0)
 N DOD,ENTRY,INCTVDT,RC,REGIEN
"RTN","RORUPD50",124,0)
 ;--- Check if patient should be added to any registry
"RTN","RORUPD50",125,0)
 Q:$D(@RORUPDPI@("U",PATIEN,2))<10 0
"RTN","RORUPD50",126,0)
 ;--- Add patient data
"RTN","RORUPD50",127,0)
 S RC=$$ADDPDATA(PATIEN)  Q:RC<0 RC
"RTN","RORUPD50",128,0)
 ;--- Update all marked registries
"RTN","RORUPD50",129,0)
 S REGIEN="",RC=0
"RTN","RORUPD50",130,0)
 F  D  Q:REGIEN=""  S RC=$$ADD(PATIEN,REGIEN,,.DOD)  Q:RC<0
"RTN","RORUPD50",131,0)
 . S REGIEN=$O(@RORUPDPI@("U",PATIEN,2,REGIEN))
"RTN","RORUPD50",132,0)
 Q $S(RC<0:RC,1:1)
"RTN","RORX001")
0^6^B38212048^B34927586
"RTN","RORX001",1,0)
RORX001 ;HOIFO/SG,VAC - LIST OF REGISTRY PATIENTS ;4/16/09 11:53am
"RTN","RORX001",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,10**;Feb 17, 2006;Build 32
"RTN","RORX001",3,0)
 ;
"RTN","RORX001",4,0)
 ; This routine uses the following IAs:
"RTN","RORX001",5,0)
 ;
"RTN","RORX001",6,0)
 ; #2051         LIST^DIC (supported)
"RTN","RORX001",7,0)
 ; #2056         GET1^DIQ, GETS^DIQ (supported)
"RTN","RORX001",8,0)
 ; #10061        DEM^VADPT (supported)
"RTN","RORX001",9,0)
 ;
"RTN","RORX001",10,0)
 ; This routine modified March 2009 to handle ICD9 Filter for Include
"RTN","RORX001",11,0)
 ;    or Exclude
"RTN","RORX001",12,0)
 Q
"RTN","RORX001",13,0)
 ;
"RTN","RORX001",14,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX001",15,0)
 ;
"RTN","RORX001",16,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX001",17,0)
 ;
"RTN","RORX001",18,0)
 ; Return Values:
"RTN","RORX001",19,0)
 ;       <0  Error code
"RTN","RORX001",20,0)
 ;        0  Ok
"RTN","RORX001",21,0)
 ;
"RTN","RORX001",22,0)
HEADER(PARTAG) ;
"RTN","RORX001",23,0)
 N COL,COLUMNS,HEADER,TMP
"RTN","RORX001",24,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX001",25,0)
 S COLUMNS=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORX001",26,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"NAME","PATIENTS")
"RTN","RORX001",27,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"HEADER","1")
"RTN","RORX001",28,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"FOOTER","1")
"RTN","RORX001",29,0)
 S RORFLDS=".01"
"RTN","RORX001",30,0)
 ;--- Required columns
"RTN","RORX001",31,0)
 F COL="#","NAME"  D
"RTN","RORX001",32,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX001",33,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX001",34,0)
 ;--- Additional columns
"RTN","RORX001",35,0)
 F COL="DOD","CSSN","LAST4","SELRULES","SELDT","CONFDT","PENDCOMM"  D
"RTN","RORX001",36,0)
 . Q:'$$OPTCOL^RORXU006(COL)
"RTN","RORX001",37,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX001",38,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX001",39,0)
 ;---
"RTN","RORX001",40,0)
 S:$$OPTCOL^RORXU006("CONFDT") RORFLDS=RORFLDS_";2"
"RTN","RORX001",41,0)
 S:$$OPTCOL^RORXU006("SELDT") RORFLDS=RORFLDS_";3.2"
"RTN","RORX001",42,0)
 S:$$OPTCOL^RORXU006("PENDCOMM") RORFLDS=RORFLDS_";12"
"RTN","RORX001",43,0)
 Q 0
"RTN","RORX001",44,0)
 ;
"RTN","RORX001",45,0)
 ;***** ADDS THE PATIENT DATA TO THE REPORT
"RTN","RORX001",46,0)
 ;
"RTN","RORX001",47,0)
 ; IENS          IENS of the patient's record in the registry
"RTN","RORX001",48,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX001",49,0)
 ;
"RTN","RORX001",50,0)
 ; Return Values:
"RTN","RORX001",51,0)
 ;       <0  Error code
"RTN","RORX001",52,0)
 ;        0  Ok
"RTN","RORX001",53,0)
 ;
"RTN","RORX001",54,0)
PATIENT(IENS,PARTAG) ;
"RTN","RORX001",55,0)
 N DFN,IATIME,NAME,RC,RORBUF,RORMSG,TMP,VA,VADM,VAHOW,VAROOT
"RTN","RORX001",56,0)
 K RORMSG D GETS^DIQ(798,IENS,RORFLDS,"I","RORBUF","RORMSG")
"RTN","RORX001",57,0)
 ;Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORX001",58,0)
 Q:$G(RORMSG("DIERR")) $$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORX001",59,0)
 S DFN=$G(RORBUF(798,IENS,.01,"I"))
"RTN","RORX001",60,0)
 ;--- Load the demographic data
"RTN","RORX001",61,0)
 D DEM^VADPT
"RTN","RORX001",62,0)
 ;--- The <PATIENT> tag
"RTN","RORX001",63,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PARTAG,,DFN)
"RTN","RORX001",64,0)
 ;--- Patient Name
"RTN","RORX001",65,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX001",66,0)
 ;--- Date of Death
"RTN","RORX001",67,0)
 D:$$OPTCOL^RORXU006("DOD")
"RTN","RORX001",68,0)
 . S TMP=$$DATE^RORXU002(VADM(6)\1)
"RTN","RORX001",69,0)
 . D ADDVAL^RORTSK11(RORTSK,"DOD",TMP,PTAG,1)
"RTN","RORX001",70,0)
 ;--- Coded SSN
"RTN","RORX001",71,0)
 D:$$OPTCOL^RORXU006("CSSN")
"RTN","RORX001",72,0)
 . S TMP=$$XOR^RORUTL03($P(VADM(2),U))
"RTN","RORX001",73,0)
 . D ADDVAL^RORTSK11(RORTSK,"CSSN",TMP,PTAG,1)
"RTN","RORX001",74,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX001",75,0)
 D:$$OPTCOL^RORXU006("LAST4")
"RTN","RORX001",76,0)
 . D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX001",77,0)
 ;--- Selection Rules
"RTN","RORX001",78,0)
 I $$OPTCOL^RORXU006("SELRULES")  D  Q:RC<0 RC
"RTN","RORX001",79,0)
 . S RC=$$SELRULES(IENS,PTAG)
"RTN","RORX001",80,0)
 ;--- Date Selected for the Registry
"RTN","RORX001",81,0)
 D:$$OPTCOL^RORXU006("SELDT")
"RTN","RORX001",82,0)
 . S TMP=$$DATE^RORXU002($G(RORBUF(798,IENS,3.2,"I"))\1)
"RTN","RORX001",83,0)
 . D ADDVAL^RORTSK11(RORTSK,"SELDT",TMP,PTAG,1)
"RTN","RORX001",84,0)
 ;--- Date Confirmed in the Registry
"RTN","RORX001",85,0)
 D:$$OPTCOL^RORXU006("CONFDT")
"RTN","RORX001",86,0)
 . S TMP=$$DATE^RORXU002($G(RORBUF(798,IENS,2,"I"))\1)
"RTN","RORX001",87,0)
 . D ADDVAL^RORTSK11(RORTSK,"CONFDT",TMP,PTAG,1)
"RTN","RORX001",88,0)
 ;--- Patient IEN (DFN)
"RTN","RORX001",89,0)
 ;S:$$OPTCOL^RORXU006("DFN") TMP=$$ADDVAL^RORTSK11(RORTSK,"DFN",DFN,PTAG)
"RTN","RORX001",90,0)
 ;--- Integration Control Number
"RTN","RORX001",91,0)
 ;D:$$OPTCOL^RORXU006("ICN")
"RTN","RORX001",92,0)
 ;. S TMP=$$ICN^RORUTL02(DFN)
"RTN","RORX001",93,0)
 ;. D ADDVAL^RORTSK11(RORTSK,"ICN",$P(TMP,"V"),PTAG,1)
"RTN","RORX001",94,0)
 ;--- Pending Comment
"RTN","RORX001",95,0)
 D:$$OPTCOL^RORXU006("PENDCOMM")
"RTN","RORX001",96,0)
 . S TMP=$G(RORBUF(798,IENS,12,"I"))
"RTN","RORX001",97,0)
 . ;I $L($G(TMP))>0 D ADDVAL^RORTSK11(RORTSK,"PENDCOMM",TMP,PTAG,1)
"RTN","RORX001",98,0)
 . S TMP=$S($L(TMP)>0:TMP,1:"")
"RTN","RORX001",99,0)
 . D ADDVAL^RORTSK11(RORTSK,"PENDCOMM",TMP,PTAG,1)
"RTN","RORX001",100,0)
 ;
"RTN","RORX001",101,0)
 Q 0
"RTN","RORX001",102,0)
 ;
"RTN","RORX001",103,0)
 ;***** COMPILES A LIST OF REGISTRY PATIENTS
"RTN","RORX001",104,0)
 ; REPORT CODE: 001
"RTN","RORX001",105,0)
 ;
"RTN","RORX001",106,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX001",107,0)
 ;
"RTN","RORX001",108,0)
 ; Return Values:
"RTN","RORX001",109,0)
 ;       <0  Error code
"RTN","RORX001",110,0)
 ;        0  Ok
"RTN","RORX001",111,0)
 ;
"RTN","RORX001",112,0)
REGPTLST(RORTSK) ;
"RTN","RORX001",113,0)
 N RORFLDS       ; Fields to load from the file #798
"RTN","RORX001",114,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX001",115,0)
 N RORREG        ; Registry IEN
"RTN","RORX001",116,0)
 ;
"RTN","RORX001",117,0)
 N BODY,CNT,ECNT,IEN,IENS,MODE,PTNAME,RC,REPORT,SFLAGS,TMP,XREFNODE
"RTN","RORX001",118,0)
 N RCC,FLAG
"RTN","RORX001",119,0)
 ;--- Root node of the report
"RTN","RORX001",120,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX001",121,0)
 Q:REPORT<0 REPORT
"RTN","RORX001",122,0)
 ;
"RTN","RORX001",123,0)
 ;--- Get and prepare the report parameters
"RTN","RORX001",124,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")
"RTN","RORX001",125,0)
 S RC=$$PARAMS^RORXU002(.RORTSK,REPORT,,,.SFLAGS)  Q:RC<0 RC
"RTN","RORX001",126,0)
 S SFLAGS=$TR(SFLAGS,"DG")
"RTN","RORX001",127,0)
 S:'$$PARAM^RORTSK01("PATIENTS","CONFIRMED") SFLAGS=SFLAGS_"C"
"RTN","RORX001",128,0)
 S:'$$PARAM^RORTSK01("PATIENTS","PENDING") SFLAGS=SFLAGS_"G"
"RTN","RORX001",129,0)
 D ADDVAL^RORTSK11(RORTSK,"TYPE",SFLAGS,REPORT)
"RTN","RORX001",130,0)
 ;
"RTN","RORX001",131,0)
 ;--- Initialize constants and variables
"RTN","RORX001",132,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX001",133,0)
 S ECNT=0,XREFNODE=$NA(^RORDATA(798,"ARP",RORREG_"#"))
"RTN","RORX001",134,0)
 ;
"RTN","RORX001",135,0)
 ;--- The report header and list of patients
"RTN","RORX001",136,0)
 S RC=$$HEADER(REPORT)  Q:RC<0 RC
"RTN","RORX001",137,0)
 S BODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX001",138,0)
 D ADDATTR^RORTSK11(RORTSK,BODY,"TABLE","PATIENTS")
"RTN","RORX001",139,0)
 Q:BODY<0 BODY
"RTN","RORX001",140,0)
 ;
"RTN","RORX001",141,0)
 ;--- Browse through the registry records
"RTN","RORX001",142,0)
 S PTNAME="",(CNT,RC)=0
"RTN","RORX001",143,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX001",144,0)
 F  S PTNAME=$O(@XREFNODE@(PTNAME))  Q:PTNAME=""  D  Q:RC<0
"RTN","RORX001",145,0)
 . S IEN=0
"RTN","RORX001",146,0)
 . F  S IEN=$O(@XREFNODE@(PTNAME,IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX001",147,0)
 . . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX001",148,0)
 . . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX001",149,0)
 . . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX001",150,0)
 . . ;--- Check if the patient should be skipped
"RTN","RORX001",151,0)
 . . Q:$$SKIP^RORXU005(IEN,SFLAGS)
"RTN","RORX001",152,0)
 . .;--- Check the patient against the ICD9 Filter
"RTN","RORX001",153,0)
 . . S DFN=$$PTIEN^RORUTL01(+IENS)
"RTN","RORX001",154,0)
 . . S RCC=0
"RTN","RORX001",155,0)
 . . I FLAG'="ALL" D
"RTN","RORX001",156,0)
 . . . S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX001",157,0)
 . . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX001",158,0)
 . . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX001",159,0)
 . .;--- End of filter check
"RTN","RORX001",160,0)
 . . ;--- Process the registry record
"RTN","RORX001",161,0)
 . . I $$PATIENT(IENS,BODY)<0  S ECNT=ECNT+1  Q
"RTN","RORX001",162,0)
 ;---
"RTN","RORX001",163,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX001",164,0)
 ;
"RTN","RORX001",165,0)
 ;***** ADDS THE SELECTION RULES TO THE REPORT
"RTN","RORX001",166,0)
 ;
"RTN","RORX001",167,0)
 ; IENS          IENS of the patient's record in the registry
"RTN","RORX001",168,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX001",169,0)
 ;
"RTN","RORX001",170,0)
 ; Return Values:
"RTN","RORX001",171,0)
 ;       <0  Error code
"RTN","RORX001",172,0)
 ;        0  Ok
"RTN","RORX001",173,0)
 ;
"RTN","RORX001",174,0)
SELRULES(IENS,PARTAG) ;
"RTN","RORX001",175,0)
 N CNT,I,RORBUF,RORMSG,RT,SRLTAG,TMP
"RTN","RORX001",176,0)
 ;--- Load the list of selection rules
"RTN","RORX001",177,0)
 K RORMSG D LIST^DIC(798.01,","_IENS,"@;.01I;1I",,,,,"B",,,"RORBUF","RORMSG")
"RTN","RORX001",178,0)
 ;Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.01,IENS)
"RTN","RORX001",179,0)
 Q:$G(RORMSG("DIERR")) $$DBS^RORERR("RORMSG",-9,,,798.01,IENS)
"RTN","RORX001",180,0)
 ;--- The <SELRULES> ... </SELRULES> tags
"RTN","RORX001",181,0)
 S SRLTAG=$$ADDVAL^RORTSK11(RORTSK,"SELRULES",,PARTAG)
"RTN","RORX001",182,0)
 ;--- Add the selection rules to the report
"RTN","RORX001",183,0)
 S I="",CNT=0
"RTN","RORX001",184,0)
 F  S I=$O(RORBUF("DILIST","ID",I))  Q:I=""  D
"RTN","RORX001",185,0)
 . S RT=$$ADDVAL^RORTSK11(RORTSK,"RULE",,SRLTAG),CNT=CNT+1
"RTN","RORX001",186,0)
 . S TMP=$G(RORBUF("DILIST","ID",I,.01))
"RTN","RORX001",187,0)
 . K RORMSG S TMP=$$GET1^DIQ(798.2,TMP_",",4,,,"RORMSG")
"RTN","RORX001",188,0)
 . ;Q:$G(DIERR)!(TMP="")
"RTN","RORX001",189,0)
 . Q:$G(RORMSG("DIERR"))!(TMP="")
"RTN","RORX001",190,0)
 . D ADDATTR^RORTSK11(RORTSK,RT,"DESCR",TMP)
"RTN","RORX001",191,0)
 . S TMP=$$DATE^RORXU002($G(RORBUF("DILIST","ID",I,1))\1)
"RTN","RORX001",192,0)
 . D:TMP'="" ADDATTR^RORTSK11(RORTSK,RT,"DATE",TMP)
"RTN","RORX001",193,0)
 ;--- Add the default item if no selection rules have been found
"RTN","RORX001",194,0)
 D:CNT'>0
"RTN","RORX001",195,0)
 . S RT=$$ADDVAL^RORTSK11(RORTSK,"RULE",,SRLTAG)
"RTN","RORX001",196,0)
 . D ADDATTR^RORTSK11(RORTSK,RT,"DESCR","Manual Entry")
"RTN","RORX001",197,0)
 Q 0
"RTN","RORX005A")
0^4^B34309932^B34579924
"RTN","RORX005A",1,0)
RORX005A ;HOIFO/BH,SG - INPATIENT UTILIZATION (QUERY) ;4/21/09 2:20pm
"RTN","RORX005A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,8,10**;Feb 17, 2006;Build 32
"RTN","RORX005A",3,0)
 ;
"RTN","RORX005A",4,0)
 ; This routine was modified March 2009 to handle ICD9 Filter to 
"RTN","RORX005A",5,0)
 ;     Include or Exclude patients
"RTN","RORX005A",6,0)
 ;
"RTN","RORX005A",7,0)
 ; This routine uses the following IAs:
"RTN","RORX005A",8,0)
 ;
"RTN","RORX005A",9,0)
 ; #92           ^DGPT(  #45.7 (controlled)
"RTN","RORX005A",10,0)
 ; #417          .01 field and "C" x-ref of file #40.8 (controlled)
"RTN","RORX005A",11,0)
 ; #2056         $$GET1^DIQ (supported)
"RTN","RORX005A",12,0)
 ; #3545         ^DGPT("AAD" (private)
"RTN","RORX005A",13,0)
 ; #10061        IN5^VADPT (supported) 
"RTN","RORX005A",14,0)
 ; #10103        FMADD^XLFDT, FMDIFF^XLFDT (supported)
"RTN","RORX005A",15,0)
 ;
"RTN","RORX005A",16,0)
 Q
"RTN","RORX005A",17,0)
 ;
"RTN","RORX005A",18,0)
 ;***** ADDS THE INPATIENT STAY
"RTN","RORX005A",19,0)
 ;
"RTN","RORX005A",20,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORX005A",21,0)
 ; PTFIEN        IEN of the PTF record
"RTN","RORX005A",22,0)
 ; LOS           Length of stay
"RTN","RORX005A",23,0)
 ; BSID          Bed section ID
"RTN","RORX005A",24,0)
 ; DATE          Movement date/time (FileMan)
"RTN","RORX005A",25,0)
 ;
"RTN","RORX005A",26,0)
ADDSTAY(DFN,PTFIEN,LOS,BSID,DATE) ;
"RTN","RORX005A",27,0)
 N DST,I,TMP
"RTN","RORX005A",28,0)
 S:$G(BSID)="" BSID=0
"RTN","RORX005A",29,0)
 ;--- Number of patients for the bedsection
"RTN","RORX005A",30,0)
 I 'BSID  S DST=$NA(@RORDST@("IP",DFN))
"RTN","RORX005A",31,0)
 E  S DST=$NA(@RORDST@("IPB",BSID))  D:'$D(@DST@("P",DFN))
"RTN","RORX005A",32,0)
 . S @DST@("P")=$G(@DST@("P"))+1,@DST@("P",DFN)=""
"RTN","RORX005A",33,0)
 ;--- No bed section ID
"RTN","RORX005A",34,0)
 S:BSID<0 @RORDST@("IPNOBS",RORPNAME,DATE,PTFIEN,DFN)=""
"RTN","RORX005A",35,0)
 ;--- Short stays (visits)
"RTN","RORX005A",36,0)
 I LOS'>0  S @DST@("V")=$G(@DST@("V"))+1  Q
"RTN","RORX005A",37,0)
 ;--- Days and stays
"RTN","RORX005A",38,0)
 S @DST@("D")=$G(@DST@("D"))+LOS
"RTN","RORX005A",39,0)
 S @DST@("S")=$G(@DST@("S"))+1
"RTN","RORX005A",40,0)
 ;--- Lengths of stay for median value calculations
"RTN","RORX005A",41,0)
 S I=$O(@RORDST@("IPMLOS",BSID,LOS,""),-1)+1
"RTN","RORX005A",42,0)
 S @RORDST@("IPMLOS",BSID,LOS,I)=""
"RTN","RORX005A",43,0)
 Q
"RTN","RORX005A",44,0)
 ;
"RTN","RORX005A",45,0)
 ;***** LOADS AND PROCESSES THE INPATIENT DATA
"RTN","RORX005A",46,0)
 ;
"RTN","RORX005A",47,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORX005A",48,0)
 ;
"RTN","RORX005A",49,0)
 ; Return Values:
"RTN","RORX005A",50,0)
 ;       <0  Error code
"RTN","RORX005A",51,0)
 ;        0  Ok
"RTN","RORX005A",52,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX005A",53,0)
 ;
"RTN","RORX005A",54,0)
IPDATA(DFN) ;
"RTN","RORX005A",55,0)
 N RORDST        ; Closed reference to the category node in ^TMP
"RTN","RORX005A",56,0)
 ;
"RTN","RORX005A",57,0)
 N BSID,DATE,DISDT,ENDT,FACILITY,LOS,PTFIEN,RC,RORMSG,STDT,SUFFIX,TMP,VAHOW,VAIP,VAROOT,XDATE
"RTN","RORX005A",58,0)
 S RORDST=$NA(^TMP("RORX005",$J))
"RTN","RORX005A",59,0)
 ;---
"RTN","RORX005A",60,0)
 S XDATE=RORSDT
"RTN","RORX005A",61,0)
 F  S RC=0  D  Q:RC<2  S XDATE=$O(^DGPT("AAD",DFN,XDATE))  Q:XDATE'>0
"RTN","RORX005A",62,0)
 . I XDATE'<ROREDT1  S RC=1  Q
"RTN","RORX005A",63,0)
 . K DATE,LOS,VAIP  S VAIP(16,1)=XDATE
"RTN","RORX005A",64,0)
 . F  D  Q:RC
"RTN","RORX005A",65,0)
 . . S VAIP("D")=+$G(VAIP(16,1))
"RTN","RORX005A",66,0)
 . . I VAIP("D")'>0  S RC=2  Q
"RTN","RORX005A",67,0)
 . . D IN5^VADPT
"RTN","RORX005A",68,0)
 . . I $G(VAIP(1))'>0  S RC=2  Q
"RTN","RORX005A",69,0)
 . . S DATE=+VAIP(3)
"RTN","RORX005A",70,0)
 . . Q:+$G(VAIP(4))=3
"RTN","RORX005A",71,0)
 . . ;--- Check the movement date
"RTN","RORX005A",72,0)
 . . I DATE'<ROREDT1  S RC=1  Q
"RTN","RORX005A",73,0)
 . . S:DATE<RORSDT DATE=RORSDT
"RTN","RORX005A",74,0)
 . . ;--- Check the PTF record - Task removed April 2009
"RTN","RORX005A",75,0)
 . . S PTFIEN=+$G(VAIP(12))  Q:PTFIEN'>0
"RTN","RORX005A",76,0)
 . . I '$D(PTFIEN(PTFIEN))  D  Q:RC
"RTN","RORX005A",77,0)
 . . . S PTFIEN(PTFIEN)=0
"RTN","RORX005A",78,0)
 . . . Q:$$PTF^RORXU001(PTFIEN,"FP",,,.SUFFIX,,.FACILITY)
"RTN","RORX005A",79,0)
 . . . ;--- Check the suffix
"RTN","RORX005A",80,0)
 . . . ;I SUFFIX'=""  Q:$$VSUFFIX(SUFFIX)  ; ROR 1.5
"RTN","RORX005A",81,0)
 . . . ;--- Check the division
"RTN","RORX005A",82,0)
 . . . S TMP=$$PARAM^RORTSK01("DIVISIONS","ALL")
"RTN","RORX005A",83,0)
 . . . I 'TMP  D  Q:'$D(RORTSK("PARAMS","DIVISIONS","C",DIVIEN))
"RTN","RORX005A",84,0)
 . . . . S TMP=FACILITY_SUFFIX
"RTN","RORX005A",85,0)
 . . . . S DIVIEN=$S(TMP'="":+$O(^DG(40.8,"C",TMP,"")),1:0)
"RTN","RORX005A",86,0)
 . . . K DIVIEN ;kill statement added
"RTN","RORX005A",87,0)
 . . . S PTFIEN(PTFIEN)=1
"RTN","RORX005A",88,0)
 . . ;--- Skip the PTF record if necessary
"RTN","RORX005A",89,0)
 . . Q:'PTFIEN(PTFIEN)
"RTN","RORX005A",90,0)
 . . ;--- Process the admission (only once)
"RTN","RORX005A",91,0)
 . . I '$D(LOS)  D  Q:RC
"RTN","RORX005A",92,0)
 . . . S LOS=$$LOS(+$G(VAIP(13,1)),+$G(VAIP(17,1)))
"RTN","RORX005A",93,0)
 . . . D ADDSTAY(DFN,PTFIEN,LOS)
"RTN","RORX005A",94,0)
 . . ;--- Process the movement
"RTN","RORX005A",95,0)
 . . S ENDT=$G(VAIP(16,1))\1
"RTN","RORX005A",96,0)
 . . S:(ENDT'>0)!(ENDT'<ROREDT1) ENDT=ROREDT,RC=2
"RTN","RORX005A",97,0)
 . . Q:ENDT<RORSDT
"RTN","RORX005A",98,0)
 . . S LOS=$$FMDIFF^XLFDT(ENDT,DATE\1,1)  S:LOS'>0 LOS=0
"RTN","RORX005A",99,0)
 . . ;--- Use the IEN in the SPECIALTY file (#42.4) as the Bedsection 
"RTN","RORX005A",100,0)
 . . ;    ID if it is available (it should be). Otherwise, use the
"RTN","RORX005A",101,0)
 . . ;--- IEN in the FACILITY TREATING SPECIALTY file (#45.7).
"RTN","RORX005A",102,0)
 . . I $G(VAIP(8))>0  D
"RTN","RORX005A",103,0)
 . . . K RORMSG S TMP=$$GET1^DIQ(45.7,+VAIP(8),1,"I",,"RORMSG")
"RTN","RORX005A",104,0)
 . . . ;D:$G(DIERR) DBS^RORERR("RORMSG",-9,,DFN,45.7,+VAIP(8))
"RTN","RORX005A",105,0)
 . . . D:$G(RORMSG("DIERR")) DBS^RORERR("RORMSG",-9,,DFN,45.7,+VAIP(8))
"RTN","RORX005A",106,0)
 . . . S BSID=$S(TMP>0:TMP_";42.4",1:+VAIP(8)_";45.7")
"RTN","RORX005A",107,0)
 . . E  S BSID=-1
"RTN","RORX005A",108,0)
 . . D ADDSTAY(DFN,PTFIEN,LOS,BSID,+VAIP(3))
"RTN","RORX005A",109,0)
 . S:$G(DATE)>XDATE XDATE=DATE
"RTN","RORX005A",110,0)
 ;---
"RTN","RORX005A",111,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX005A",112,0)
 ;
"RTN","RORX005A",113,0)
 ;***** CALCULATES THE LENGTH OF STAY
"RTN","RORX005A",114,0)
LOS(STDT,ENDT) ;
"RTN","RORX005A",115,0)
 N DAYS
"RTN","RORX005A",116,0)
 S:STDT<RORSDT STDT=RORSDT
"RTN","RORX005A",117,0)
 S:(ENDT'>0)!(ENDT>ROREDT) ENDT=ROREDT
"RTN","RORX005A",118,0)
 S DAYS=$$FMDIFF^XLFDT(ENDT\1,STDT\1,1)
"RTN","RORX005A",119,0)
 Q $S(DAYS'<0:DAYS,1:0)
"RTN","RORX005A",120,0)
 ;
"RTN","RORX005A",121,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX005A",122,0)
 ;
"RTN","RORX005A",123,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX005A",124,0)
 ;
"RTN","RORX005A",125,0)
 ; Return Values:
"RTN","RORX005A",126,0)
 ;       <0  Error code
"RTN","RORX005A",127,0)
 ;        0  Ok
"RTN","RORX005A",128,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX005A",129,0)
 ;
"RTN","RORX005A",130,0)
QUERY(FLAGS) ;
"RTN","RORX005A",131,0)
 N ROREDT1       ; Day after the end date
"RTN","RORX005A",132,0)
 N RORLAST4      ; Last 4 digits of the current patient's SSN
"RTN","RORX005A",133,0)
 N RORPNAME      ; Name of the current patient
"RTN","RORX005A",134,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX005A",135,0)
 ;
"RTN","RORX005A",136,0)
 N CNT,ECNT,IEN,IENS,PATIEN,RC,TMP,VA,VADM,XREFNODE
"RTN","RORX005A",137,0)
 N RCC,FLAG
"RTN","RORX005A",138,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX005A",139,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX005A",140,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT,1)
"RTN","RORX005A",141,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX005A",142,0)
 ;--- Browse through the registry records
"RTN","RORX005A",143,0)
 S IEN=0
"RTN","RORX005A",144,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX005A",145,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX005A",146,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX005A",147,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX005A",148,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX005A",149,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX005A",150,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX005A",151,0)
 . ;
"RTN","RORX005A",152,0)
 . ;--- Get the patient IEN (DFN)
"RTN","RORX005A",153,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX005A",154,0)
 . ;
"RTN","RORX005A",155,0)
 . ;--- Filter patient on ICD9 codes
"RTN","RORX005A",156,0)
 . S RCC=0
"RTN","RORX005A",157,0)
 . I FLAG'="ALL" D
"RTN","RORX005A",158,0)
 . . S RCC=$$ICD^RORXU010(PATIEN,RORREG)
"RTN","RORX005A",159,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX005A",160,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX005A",161,0)
 . ;--- End of filter
"RTN","RORX005A",162,0)
 . ;
"RTN","RORX005A",163,0)
 . ;--- Get the patient's data
"RTN","RORX005A",164,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX005A",165,0)
 . S RORPNAME=VADM(1),RORLAST4=VA("BID")
"RTN","RORX005A",166,0)
 . ;
"RTN","RORX005A",167,0)
 . ;--- Get the inpatient data
"RTN","RORX005A",168,0)
 . S RC=$$IPDATA(PATIEN)
"RTN","RORX005A",169,0)
 . I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX005A",170,0)
 . ;
"RTN","RORX005A",171,0)
 . ;--- Calculate intermediate totals
"RTN","RORX005A",172,0)
 . S RC=$$TOTALS^RORX005B(PATIEN)
"RTN","RORX005A",173,0)
 . I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX005A",174,0)
 ;---
"RTN","RORX005A",175,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX005A",176,0)
 ;
"RTN","RORX005A",177,0)
 ;***** CHECKS THE SUFFIX FOR VALIDITY
"RTN","RORX005A",178,0)
 ;
"RTN","RORX005A",179,0)
 ; SUFFIX        Suffix
"RTN","RORX005A",180,0)
 ;
"RTN","RORX005A",181,0)
 ; Return Values:
"RTN","RORX005A",182,0)
 ;        0  Ok
"RTN","RORX005A",183,0)
 ;        1  Invalid suffix
"RTN","RORX005A",184,0)
VSUFFIX(SUFFIX) ;
"RTN","RORX005A",185,0)
 Q '("9AA,9AB,9AC,9AD,9AE,9BB,A0,A4,A5,BU,BV,PA"[SUFFIX)
"RTN","RORX018")
0^7^B143613581^n/a
"RTN","RORX018",1,0)
RORX018 ;BPOIFO/ACS - BMI BY RANGE REPORT ;11/1/09
"RTN","RORX018",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","RORX018",3,0)
 ;
"RTN","RORX018",4,0)
 ;
"RTN","RORX018",5,0)
 ; This routine uses the following IAs:
"RTN","RORX018",6,0)
 ;
"RTN","RORX018",7,0)
 ; #4290  ^PXRMINDX(120.5 (controlled)
"RTN","RORX018",8,0)
 ; #3647   $$EN^GMVPXRM (controlled)
"RTN","RORX018",9,0)
 ; #5047   $$GETIEN^GMVGETVT (supported)
"RTN","RORX018",10,0)
 ;
"RTN","RORX018",11,0)
 Q
"RTN","RORX018",12,0)
 ;*****************************************************************************
"RTN","RORX018",13,0)
 ;COMPILE THE "BMI BY RANGE" REPORT
"RTN","RORX018",14,0)
 ;REPORT CODE: 018
"RTN","RORX018",15,0)
 ;
"RTN","RORX018",16,0)
 ;Called by entry "BMI by Range" in ROR REPORT PARAMETERS (#799.34)
"RTN","RORX018",17,0)
 ;
"RTN","RORX018",18,0)
 ;INPUT
"RTN","RORX018",19,0)
 ;  RORTSK     Task number and task parameters
"RTN","RORX018",20,0)
 ;
"RTN","RORX018",21,0)
 ;  Below is a sample RORTSK input array for utilization in 2003, most recent
"RTN","RORX018",22,0)
 ;  scores, BMI range from 30 to 45:
"RTN","RORX018",23,0)
 ;
"RTN","RORX018",24,0)
 ;  RORTSK=nnn   (task number)
"RTN","RORX018",25,0)
 ;  RORTSK("EP")="$$BMIRANGE^RORX018"
"RTN","RORX018",26,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","END")=3031231
"RTN","RORX018",27,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","START")=3030101
"RTN","RORX018",28,0)
 ;  RORTSK("PARAMS","ICD9FILT","A","FILTER")="ALL"
"RTN","RORX018",29,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1)=""
"RTN","RORX018",30,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"H")=45
"RTN","RORX018",31,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"L")=30
"RTN","RORX018",32,0)
 ;  RORTSK("PARAMS","OPTIONS","A","COMPLETE")=1
"RTN","RORX018",33,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX018",34,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_AFTER")=1
"RTN","RORX018",35,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_BEFORE")=1
"RTN","RORX018",36,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_DURING")=1
"RTN","RORX018",37,0)
 ;  RORTSK("PARAMS","REGIEN")=1
"RTN","RORX018",38,0)
 ;
"RTN","RORX018",39,0)
 ;  If the user selected an 'as of' date = 12/31/2005:
"RTN","RORX018",40,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX018",41,0)
 ;  is replaced with:  
"RTN","RORX018",42,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MAX_DATE")=3051231
"RTN","RORX018",43,0)
 ;
"RTN","RORX018",44,0)
 ;OUTPUT
"RTN","RORX018",45,0)
 ;  <0  Error code
"RTN","RORX018",46,0)
 ;   0  Ok
"RTN","RORX018",47,0)
 ;*****************************************************************************
"RTN","RORX018",48,0)
BMIRANGE(RORTSK) ;
"RTN","RORX018",49,0)
 N RORDATA       ; array to hold ROR data and summary totals
"RTN","RORX018",50,0)
 N RORREG        ; Registry IEN
"RTN","RORX018",51,0)
 N RORSDT        ; report start date
"RTN","RORX018",52,0)
 N ROREDT        ; report end date
"RTN","RORX018",53,0)
 N RORPTIEN      ; IEN of patient in the ROR registry
"RTN","RORX018",54,0)
 N DFN           ; DFN of patient in the PATIENT file (#2)
"RTN","RORX018",55,0)
 ;
"RTN","RORX018",56,0)
 N REPORT,PARAMS,SFLAGS,RC,CNT,ECNT,UTSDT,UTEDT,SKIPSDT,SKIPEDT,RORBODY,RORPTN
"RTN","RORX018",57,0)
 N RCC,FLAG,TMP,DFN,SKIP
"RTN","RORX018",58,0)
 ;--- Establish the root XML Node of the report and put into output
"RTN","RORX018",59,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX018",60,0)
 Q:REPORT<0 REPORT
"RTN","RORX018",61,0)
 ;
"RTN","RORX018",62,0)
 ;--- Get registry IEN
"RTN","RORX018",63,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX018",64,0)
 ;
"RTN","RORX018",65,0)
 ;--- Set standard report parameters data into output:
"RTN","RORX018",66,0)
 ;registry, comment, patients (before, during, after), options (summary vs.
"RTN","RORX018",67,0)
 ;complete), other registries, and other diagnoses
"RTN","RORX018",68,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS) Q:PARAMS<0 PARAMS
"RTN","RORX018",69,0)
 ;
"RTN","RORX018",70,0)
 ;--- Add range parameters to output
"RTN","RORX018",71,0)
 S RC=$$PARAMS(PARAMS,.RORDATA) Q:RC<0 RC
"RTN","RORX018",72,0)
 ;
"RTN","RORX018",73,0)
 ;--- Put report header data into output:
"RTN","RORX018",74,0)
 ;report creation date, task number, last registry update date, and
"RTN","RORX018",75,0)
 ;last data extraction date
"RTN","RORX018",76,0)
 S RC=$$HEADER(REPORT) Q:RC<0 RC
"RTN","RORX018",77,0)
 ;
"RTN","RORX018",78,0)
 ;--- Set the number of BMI ranges and initialize their values to 0
"RTN","RORX018",79,0)
 S RORDATA("RCNT")=6 D INIT(.RORDATA)
"RTN","RORX018",80,0)
 ;
"RTN","RORX018",81,0)
 ;--- Get GMRV VITAL TYPE pointer for HEIGHT and WEIGHT
"RTN","RORX018",82,0)
 S RORDATA("HGTP")=$$GETIEN^GMVGETVT("HEIGHT",1)
"RTN","RORX018",83,0)
 S RORDATA("WGTP")=$$GETIEN^GMVGETVT("WEIGHT",1)
"RTN","RORX018",84,0)
 I '$G(RORDATA("HGTP")) Q -1
"RTN","RORX018",85,0)
 I '$G(RORDATA("WGTP")) Q -1
"RTN","RORX018",86,0)
 ;
"RTN","RORX018",87,0)
 ;--- 'Most recent' vs. max date requested
"RTN","RORX018",88,0)
 S RORDATA("DATE")=0
"RTN","RORX018",89,0)
 I $$PARAM^RORTSK01("OPTIONS","MOST_RECENT") S RORDATA("DATE")=DT_.9
"RTN","RORX018",90,0)
 I '$G(RORDATA("DATE")) S RORDATA("DATE")=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")_.9
"RTN","RORX018",91,0)
 ;
"RTN","RORX018",92,0)
 ;--- Summary vs. complete report requested
"RTN","RORX018",93,0)
 S RORDATA("SUMMARY")=0
"RTN","RORX018",94,0)
 I $$PARAM^RORTSK01("OPTIONS","SUMMARY") S RORDATA("SUMMARY")=1
"RTN","RORX018",95,0)
 ;
"RTN","RORX018",96,0)
 ;--- Get BMI range requested (there is currently only 1 BMI test)
"RTN","RORX018",97,0)
 S I=0 F  S I=$O(RORTSK("PARAMS","LRGRANGES","C",I)) Q:I=""  D
"RTN","RORX018",98,0)
 . S RORDATA("L",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"L")) ;low BMI range
"RTN","RORX018",99,0)
 . S RORDATA("H",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"H")) ;high BMI range
"RTN","RORX018",100,0)
 ;
"RTN","RORX018",101,0)
 ;--- Create 'patients' table
"RTN","RORX018",102,0)
 S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX018",103,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX018",104,0)
 ;
"RTN","RORX018",105,0)
 ;--- Get utilization date range (always sent in)
"RTN","RORX018",106,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX018",107,0)
 S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX018",108,0)
 S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX018",109,0)
 ; Combined date range
"RTN","RORX018",110,0)
 S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,$G(UTSDT))
"RTN","RORX018",111,0)
 S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,$G(UTEDT))
"RTN","RORX018",112,0)
 ;
"RTN","RORX018",113,0)
 ;--- Number of patients in the registry - used for calculating the
"RTN","RORX018",114,0)
 ;task progress percentage - shown on the GUI screen
"RTN","RORX018",115,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG) S:RORPTN<0 RORPTN=0
"RTN","RORX018",116,0)
 ;
"RTN","RORX018",117,0)
 ;--- Get registry records
"RTN","RORX018",118,0)
 S (CNT,RORPTIEN,RC)=0
"RTN","RORX018",119,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX018",120,0)
 F  S RORPTIEN=$O(^RORDATA(798,"AC",RORREG,RORPTIEN))  Q:RORPTIEN'>0  D  Q:RC<0
"RTN","RORX018",121,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX018",122,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX018",123,0)
 . S CNT=CNT+1
"RTN","RORX018",124,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX018",125,0)
 . Q:$$SKIP^RORXU005(RORPTIEN,SFLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX018",126,0)
 . ;--- Get the patient DFN
"RTN","RORX018",127,0)
 . S DFN=$$PTIEN^RORUTL01(RORPTIEN)  Q:DFN'>0
"RTN","RORX018",128,0)
 . ;--- Check if patient has passed the ICD9 filter
"RTN","RORX018",129,0)
 . S RCC=0
"RTN","RORX018",130,0)
 . I FLAG'="ALL" D
"RTN","RORX018",131,0)
 . . S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX018",132,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX018",133,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX018",134,0)
 . ;
"RTN","RORX018",135,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX018",136,0)
 . S SKIP=0 I $G(UTSDT)>0 D
"RTN","RORX018",137,0)
 .. N UTIL K TMP S TMP("ALL")=1
"RTN","RORX018",138,0)
 .. S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,DFN,.TMP)
"RTN","RORX018",139,0)
 .. S:'UTIL SKIP=1
"RTN","RORX018",140,0)
 . ;--- Skip the patient if they have no utilization in the range
"RTN","RORX018",141,0)
 . Q:$G(SKIP)
"RTN","RORX018",142,0)
 . ;
"RTN","RORX018",143,0)
 . ;--- For each patient, process the registry record
"RTN","RORX018",144,0)
 . I $$PATIENT(DFN,RORBODY,.RORDATA)<0 S ECNT=ECNT+1 ;error count
"RTN","RORX018",145,0)
 ;
"RTN","RORX018",146,0)
 ;--- Always create BMI summary report
"RTN","RORX018",147,0)
 S RC=$$SUMMARY(RORTSK,REPORT,.RORDATA) Q:RC<0 RC
"RTN","RORX018",148,0)
 K ^TMP("RORX018",$J)
"RTN","RORX018",149,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX018",150,0)
 ;
"RTN","RORX018",151,0)
 ;*****************************************************************************
"RTN","RORX018",152,0)
 ;ADD THE PATIENT DATA TO THE REPORT
"RTN","RORX018",153,0)
 ;
"RTN","RORX018",154,0)
 ;INPUT
"RTN","RORX018",155,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX018",156,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX018",157,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX018",158,0)
 ;
"RTN","RORX018",159,0)
 ;OUTPUT
"RTN","RORX018",160,0)
 ;  1        ok
"RTN","RORX018",161,0)
 ; <0        error
"RTN","RORX018",162,0)
 ;*****************************************************************************
"RTN","RORX018",163,0)
PATIENT(DFN,PTAG,RORDATA) ;
"RTN","RORX018",164,0)
 I $$CALCBMI(DFN,PTAG,.RORDATA)<0 Q 0  ;calculate the BMI
"RTN","RORX018",165,0)
 I '$$INRANGE(.RORDATA) Q 0 ;if range sent, BMI must be in the requested range
"RTN","RORX018",166,0)
 D BMICAT(.RORDATA) ;add 1 to appropriate category count
"RTN","RORX018",167,0)
 Q:RORDATA("SUMMARY") 1  ;stop if only the 'summary' report was requested
"RTN","RORX018",168,0)
 ;
"RTN","RORX018",169,0)
 ;--- Get patient data and put into the report
"RTN","RORX018",170,0)
 N VADM,VA,RORDOD,BTAG,HTAG,WTAG
"RTN","RORX018",171,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX018",172,0)
 ;--- The <PATIENT> tag
"RTN","RORX018",173,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTAG,,DFN)
"RTN","RORX018",174,0)
 I PTAG<0 Q PTAG
"RTN","RORX018",175,0)
 ;--- Patient Name
"RTN","RORX018",176,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX018",177,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX018",178,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX018",179,0)
 ;--- Date of death
"RTN","RORX018",180,0)
 S RORDOD=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX018",181,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$G(RORDOD),PTAG,1)
"RTN","RORX018",182,0)
 ;--- 'BMIDATA' tag
"RTN","RORX018",183,0)
 S BTAG=$$ADDVAL^RORTSK11(RORTSK,"BMIDATA",,PTAG)
"RTN","RORX018",184,0)
 Q:BTAG<0 BTAG
"RTN","RORX018",185,0)
 ;--- Height tag
"RTN","RORX018",186,0)
 S HTAG=$$ADDVAL^RORTSK11(RORTSK,"HEIGHT",,BTAG)
"RTN","RORX018",187,0)
 Q:HTAG<0 HTAG
"RTN","RORX018",188,0)
 ;---  Date Height Taken
"RTN","RORX018",189,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("HDATE")),HTAG)
"RTN","RORX018",190,0)
 ;---  Height value
"RTN","RORX018",191,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("HGT")),HTAG)
"RTN","RORX018",192,0)
 ;---  Weight tag
"RTN","RORX018",193,0)
 S WTAG=$$ADDVAL^RORTSK11(RORTSK,"WEIGHT",,BTAG)
"RTN","RORX018",194,0)
 Q:WTAG<0 WTAG
"RTN","RORX018",195,0)
 ;---  Date Weight Taken
"RTN","RORX018",196,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("WDATE")),WTAG)
"RTN","RORX018",197,0)
 ;---  Weight value
"RTN","RORX018",198,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("WGT")),WTAG)
"RTN","RORX018",199,0)
 ;---  Calculated BMI value goes on BMIDATA tag
"RTN","RORX018",200,0)
 D ADDVAL^RORTSK11(RORTSK,"BMI",$G(RORDATA("SCORE",1)),BTAG,3)
"RTN","RORX018",201,0)
 Q 1
"RTN","RORX018",202,0)
 ;
"RTN","RORX018",203,0)
 ;*****************************************************************************
"RTN","RORX018",204,0)
 ;CALCULATE THE BMI FOR CURRENT PATIENT
"RTN","RORX018",205,0)
 ;
"RTN","RORX018",206,0)
 ;INPUT
"RTN","RORX018",207,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX018",208,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX018",209,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX018",210,0)
 ;  
"RTN","RORX018",211,0)
 ;OUTPUT
"RTN","RORX018",212,0)
 ;  1        BMI calculated successfully
"RTN","RORX018",213,0)
 ; -1        Patient does not have vital measurements or BMI is out of range
"RTN","RORX018",214,0)
 ;  RORDATA  Array with ROR data:
"RTN","RORX018",215,0)
 ;           RORDATA("WGT")   - weight measurement
"RTN","RORX018",216,0)
 ;           RORDATA("WDATE") - date of weight measurement
"RTN","RORX018",217,0)
 ;           RORDATA("HGT")   - height measurement
"RTN","RORX018",218,0)
 ;           RORDATA("HDATE") - date of height measurement
"RTN","RORX018",219,0)
 ;           RORDATA("SCORE",N) - calculated BMI value for test N
"RTN","RORX018",220,0)
 ;*****************************************************************************
"RTN","RORX018",221,0)
CALCBMI(DFN,PTAG,RORDATA) ;
"RTN","RORX018",222,0)
 ;-- get vital measurements for BMI calculation
"RTN","RORX018",223,0)
 S RORDATA("CALC")=1 ;default - the score for this patient should be calculated
"RTN","RORX018",224,0)
 N RORDATE,I,RORVMDT,RORVMIEN,RORARY,TMP1,TMP2,TMP3
"RTN","RORX018",225,0)
 K RORDATA("HGT"),RORDATA("WGT"),RORDATA("SCORE",1)
"RTN","RORX018",226,0)
 S RORDATE=RORDATA("DATE")
"RTN","RORX018",227,0)
 F I="HGTP","WGTP" D  ;height and weight pointers
"RTN","RORX018",228,0)
 . ;get vital measurement date and IEN
"RTN","RORX018",229,0)
 . S RORVMDT=$O(^PXRMINDX(120.5,"PI",DFN,RORDATA(I),RORDATE),-1) ;vm date
"RTN","RORX018",230,0)
 . Q:$G(RORVMDT)=""
"RTN","RORX018",231,0)
 . S RORVMIEN=$O(^PXRMINDX(120.5,"PI",DFN,RORDATA(I),RORVMDT,0)) ;vm IEN
"RTN","RORX018",232,0)
 . Q:$G(RORVMIEN)=""
"RTN","RORX018",233,0)
 . ;call API to get patient's vital measurement value
"RTN","RORX018",234,0)
 . K RORARY D EN^GMVPXRM(.RORARY,RORVMIEN,"I")
"RTN","RORX018",235,0)
 . ; set values into RORDATA("WGT"), ("HGT"), ("WDATE"), & ("HDATE")
"RTN","RORX018",236,0)
 . S RORDATA($E(I,1,3))=$G(RORARY(7)),RORDATA($E(I,1)_"DATE")=$P(RORVMDT,".",1)
"RTN","RORX018",237,0)
 ;quit if height or weight is not > 0
"RTN","RORX018",238,0)
 I (($G(RORDATA("HGT"))'>0)!($G(RORDATA("WGT"))'>0)) Q -1
"RTN","RORX018",239,0)
 ;strip out characters "IN", ",E"
"RTN","RORX018",240,0)
 I ((RORDATA("HGT")["IN")!(RORDATA("HGT")[",E")) S RORDATA("HGT")=+RORDATA("HGT")
"RTN","RORX018",241,0)
 ;mark as 'invalid' if height not between 36 and 96 inches
"RTN","RORX018",242,0)
 I ((RORDATA("HGT")<36)!(RORDATA("HGT")>96)) D  Q 1
"RTN","RORX018",243,0)
 . S RORDATA("CALC")=0 ;no score calculations can be done on 'invalid' data
"RTN","RORX018",244,0)
 . S RORDATA("HGT")=RORDATA("HGT")_"*"
"RTN","RORX018",245,0)
 ;mark as 'invalid' if height contains "CM", or "'" or double quote
"RTN","RORX018",246,0)
 I ((RORDATA("HGT")["CM")!(RORDATA("HGT")["'")!(RORDATA("HGT")["""")) D  Q 1
"RTN","RORX018",247,0)
 . S RORDATA("CALC")=0 ;no score calculations can be done on 'invalid' data
"RTN","RORX018",248,0)
 . S RORDATA("HGT")=RORDATA("HGT")_"*"
"RTN","RORX018",249,0)
 ;
"RTN","RORX018",250,0)
 ;BMI calculation: (weight * 703) / (height*height)
"RTN","RORX018",251,0)
 S TMP1=703*($G(RORDATA("WGT")))
"RTN","RORX018",252,0)
 S TMP2=$G(RORDATA("HGT"))*($G(RORDATA("HGT")))
"RTN","RORX018",253,0)
 S TMP3=TMP1/TMP2
"RTN","RORX018",254,0)
 S RORDATA("SCORE",1)=$J(TMP3,0,1) ;round to 1 decimal point
"RTN","RORX018",255,0)
 Q 1
"RTN","RORX018",256,0)
 ;
"RTN","RORX018",257,0)
 ;************************************************************************
"RTN","RORX018",258,0)
 ;DETERMINE IF THE SCORE IS WITHIN THE REQUESTED RANGE
"RTN","RORX018",259,0)
 ;
"RTN","RORX018",260,0)
 ;INPUT:
"RTN","RORX018",261,0)
 ;  RORDATA  RORDATA("SCORE",I) contains computed test score for test ID 'I'
"RTN","RORX018",262,0)
 ;
"RTN","RORX018",263,0)
 ;OUTPUT:
"RTN","RORX018",264,0)
 ;  1  computed test score in range
"RTN","RORX018",265,0)
 ;  0  computed test score not in range
"RTN","RORX018",266,0)
 ;************************************************************************
"RTN","RORX018",267,0)
INRANGE(RORDATA) ;
"RTN","RORX018",268,0)
 ;if range exists for the test, and any result is considered 'invalid',
"RTN","RORX018",269,0)
 ;then skip the range check and exclude data from report
"RTN","RORX018",270,0)
 I $G(RORDATA("RANGE")),'$G(RORDATA("CALC")) Q 0
"RTN","RORX018",271,0)
 ;if range does not exist for test, and any result is considered 'invalid',
"RTN","RORX018",272,0)
 ;then skip the range check and include data in the report
"RTN","RORX018",273,0)
 I '$G(RORDATA("RANGE")),'$G(RORDATA("CALC")) Q 1
"RTN","RORX018",274,0)
 ;
"RTN","RORX018",275,0)
 N I,RETURN S RETURN=1 ;default is set to 'within range'
"RTN","RORX018",276,0)
 S I=0
"RTN","RORX018",277,0)
 F  S I=$O(RORDATA("SCORE",I)) Q:I=""  D
"RTN","RORX018",278,0)
 . I $G(RORDATA("L",I))'="" D
"RTN","RORX018",279,0)
 .. I $G(RORDATA("SCORE",I))<RORDATA("L",I) S RETURN=0
"RTN","RORX018",280,0)
 . I $G(RORDATA("H",I))'="" D
"RTN","RORX018",281,0)
 .. I $G(RORDATA("SCORE",I))>RORDATA("H",I) S RETURN=0
"RTN","RORX018",282,0)
 Q RETURN
"RTN","RORX018",283,0)
 ;
"RTN","RORX018",284,0)
 ;*****************************************************************************
"RTN","RORX018",285,0)
 ;ADD 1 TO APPROPRIATE BMI CATEGORY
"RTN","RORX018",286,0)
 ;
"RTN","RORX018",287,0)
 ;INPUT
"RTN","RORX018",288,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX018",289,0)
 ;           RORDATA("SCORE",N) - calculated BMI value for test N
"RTN","RORX018",290,0)
 ;OUTPUT
"RTN","RORX018",291,0)
 ;  RORDATA("NP",N) - incremented by 1 if BMI in Nth range
"RTN","RORX018",292,0)
 ;           
"RTN","RORX018",293,0)
 ;*****************************************************************************
"RTN","RORX018",294,0)
BMICAT(RORDATA) ;
"RTN","RORX018",295,0)
 I '$G(RORDATA("SCORE",1)) Q
"RTN","RORX018",296,0)
 I $G(RORDATA("SCORE",1))<18.5 S RORDATA("NP",1)=$G(RORDATA("NP",1))+1 Q
"RTN","RORX018",297,0)
 I $G(RORDATA("SCORE",1))<25 S RORDATA("NP",2)=$G(RORDATA("NP",2))+1 Q
"RTN","RORX018",298,0)
 I $G(RORDATA("SCORE",1))<30 S RORDATA("NP",3)=$G(RORDATA("NP",3))+1 Q
"RTN","RORX018",299,0)
 I $G(RORDATA("SCORE",1))<35 S RORDATA("NP",4)=$G(RORDATA("NP",4))+1 Q
"RTN","RORX018",300,0)
 I $G(RORDATA("SCORE",1))<40 S RORDATA("NP",5)=$G(RORDATA("NP",5))+1 Q
"RTN","RORX018",301,0)
 I $G(RORDATA("SCORE",1))>39 S RORDATA("NP",6)=$G(RORDATA("NP",6))+1 Q
"RTN","RORX018",302,0)
 Q
"RTN","RORX018",303,0)
 ;
"RTN","RORX018",304,0)
 ;*****************************************************************************
"RTN","RORX018",305,0)
 ;ADD THE SUMMARY DATA TO THE REPORT
"RTN","RORX018",306,0)
 ;
"RTN","RORX018",307,0)
 ;INPUT
"RTN","RORX018",308,0)
 ;  RORTSK   Task number and task parameters
"RTN","RORX018",309,0)
 ;  REPORT   'Report' XML tag number
"RTN","RORX018",310,0)
 ;  RORDATA  Array with summary data:
"RTN","RORX018",311,0)
 ;           RORDATA("NP",N) - total count of patients in Nth range
"RTN","RORX018",312,0)
 ;
"RTN","RORX018",313,0)
 ;OUTPUT
"RTN","RORX018",314,0)
 ;  DATA     'Data' XML tag number or error code
"RTN","RORX018",315,0)
 ;*****************************************************************************
"RTN","RORX018",316,0)
SUMMARY(RORTSK,REPORT,RORDATA) ; Add the summary values to the report
"RTN","RORX018",317,0)
 N SUMMARY,I,STAG,RORCATNUM,RORNAME,RORRANGE
"RTN","RORX018",318,0)
 S SUMMARY=$$ADDVAL^RORTSK11(RORTSK,"SUMMARY",,REPORT)
"RTN","RORX018",319,0)
 Q:SUMMARY<0 SUMMARY
"RTN","RORX018",320,0)
 ;add data for the summary entries
"RTN","RORX018",321,0)
 F I=1:1:RORDATA("RCNT")  D  Q:STAG<0
"RTN","RORX018",322,0)
 . S STAG=$$ADDVAL^RORTSK11(RORTSK,"DATA",,SUMMARY)
"RTN","RORX018",323,0)
 . Q:STAG<0
"RTN","RORX018",324,0)
 . ;get each value
"RTN","RORX018",325,0)
 . S RORCATNUM="S"_I S RORNAME=$P($T(@RORCATNUM),";;",2)
"RTN","RORX018",326,0)
 . S RORRANGE=$P($T(@RORCATNUM),";;",3)
"RTN","RORX018",327,0)
 . D ADDVAL^RORTSK11(RORTSK,"DESC",$G(RORNAME),STAG) ;severity
"RTN","RORX018",328,0)
 . D ADDVAL^RORTSK11(RORTSK,"VALUES",$G(RORRANGE),STAG) ;range
"RTN","RORX018",329,0)
 . D ADDVAL^RORTSK11(RORTSK,"NP",$G(RORDATA("NP",I)),STAG) ;count
"RTN","RORX018",330,0)
 Q STAG
"RTN","RORX018",331,0)
 ;
"RTN","RORX018",332,0)
 ;*****************************************************************************
"RTN","RORX018",333,0)
 ;OUTPUT THE REPORT 'RANGE' PARAMETERS
"RTN","RORX018",334,0)
 ;
"RTN","RORX018",335,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX018",336,0)
 ;
"RTN","RORX018",337,0)
 ; Return Values:
"RTN","RORX018",338,0)
 ;       <0  Error code
"RTN","RORX018",339,0)
 ;        0  Ok
"RTN","RORX018",340,0)
 ;*****************************************************************************
"RTN","RORX018",341,0)
PARAMS(PARTAG,RORDATA) ;
"RTN","RORX018",342,0)
 N PARAMS,TMP,RC S RC=0
"RTN","RORX018",343,0)
 S RORDATA("RANGE")=0 ;initialize to 'no range passed in'
"RTN","RORX018",344,0)
 ;--- Lab test ranges
"RTN","RORX018",345,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORX018",346,0)
 . N GRC,ELEMENT,NODE,RTAG,RANGE
"RTN","RORX018",347,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX018",348,0)
 . S RTAG=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGES",,PARTAG)
"RTN","RORX018",349,0)
 . S (GRC,RC)=0
"RTN","RORX018",350,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORX018",351,0)
 . . S RANGE=0,TMP=$$RTEXT(GRC)
"RTN","RORX018",352,0)
 . . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGE",TMP,RTAG)
"RTN","RORX018",353,0)
 . . I ELEMENT<0  S RC=ELEMENT  Q
"RTN","RORX018",354,0)
 . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"ID",GRC)
"RTN","RORX018",355,0)
 . . ;--- Process the range values
"RTN","RORX018",356,0)
 . . S TMP=$G(@NODE@(GRC,"L"))
"RTN","RORX018",357,0)
 . . I TMP'=""  D  S RANGE=1
"RTN","RORX018",358,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"LOW",TMP)
"RTN","RORX018",359,0)
 . . S TMP=$G(@NODE@(GRC,"H"))
"RTN","RORX018",360,0)
 . . I TMP'=""  D  S RANGE=1
"RTN","RORX018",361,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"HIGH",TMP)
"RTN","RORX018",362,0)
 . . I RANGE D
"RTN","RORX018",363,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"RANGE",1)
"RTN","RORX018",364,0)
 . . . S RORDATA("RANGE")=1 ;range exists
"RTN","RORX018",365,0)
 ;--- Success
"RTN","RORX018",366,0)
 Q RC
"RTN","RORX018",367,0)
 ;
"RTN","RORX018",368,0)
 ;*****************************************************************************
"RTN","RORX018",369,0)
 ;RETURN RANGE TEXT
"RTN","RORX018",370,0)
 ;
"RTN","RORX018",371,0)
 ; GRC   Test ID
"RTN","RORX018",372,0)
 ;
"RTN","RORX018",373,0)
 ; Return Values:
"RTN","RORX018",374,0)
 ;       Description - <range>
"RTN","RORX018",375,0)
 ;*****************************************************************************
"RTN","RORX018",376,0)
RTEXT(GRC) ;
"RTN","RORX018",377,0)
 N RANGE,TMP
"RTN","RORX018",378,0)
 S RANGE=""
"RTN","RORX018",379,0)
 ;--- Range
"RTN","RORX018",380,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C",GRC))>1 D
"RTN","RORX018",381,0)
 . ;--- Low
"RTN","RORX018",382,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"L"))
"RTN","RORX018",383,0)
 . S:TMP'="" RANGE=RANGE_" not less than "_TMP
"RTN","RORX018",384,0)
 . ;--- High
"RTN","RORX018",385,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"H"))
"RTN","RORX018",386,0)
 . I TMP'=""  D:RANGE'=""  S RANGE=RANGE_" not greater than "_TMP
"RTN","RORX018",387,0)
 . . S RANGE=RANGE_" and"
"RTN","RORX018",388,0)
 ;--- Description
"RTN","RORX018",389,0)
 S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC))
"RTN","RORX018",390,0)
 S:TMP="" TMP="Unknown ("_GRC_")"
"RTN","RORX018",391,0)
 Q TMP_" - "_$S(RANGE'="":"numeric results"_RANGE,1:"all results")
"RTN","RORX018",392,0)
 ;
"RTN","RORX018",393,0)
 ;*****************************************************************************
"RTN","RORX018",394,0)
 ;ADD THE HEADERS TO THE REPORT
"RTN","RORX018",395,0)
 ;
"RTN","RORX018",396,0)
 ;INPUT
"RTN","RORX018",397,0)
 ;  PARTAG  Reference IEN to the 'report' parent XML tag
"RTN","RORX018",398,0)
 ;
"RTN","RORX018",399,0)
 ;OUTPUT
"RTN","RORX018",400,0)
 ;  <0      error
"RTN","RORX018",401,0)
 ;  >0      'Header' XML tag number or error code
"RTN","RORX018",402,0)
 ;*****************************************************************************
"RTN","RORX018",403,0)
HEADER(PARTAG) ;
"RTN","RORX018",404,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,VITAL,DATE,RESULT,BMI)
"RTN","RORX018",405,0)
 ;
"RTN","RORX018",406,0)
 N HEADER,RC
"RTN","RORX018",407,0)
 ;call to $$HEADER^RORXU002 will populate the report created date, task number,
"RTN","RORX018",408,0)
 ;last registry update, and last data extraction.
"RTN","RORX018",409,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX018",410,0)
 Q:HEADER<0 HEADER
"RTN","RORX018",411,0)
 ;automatically build the table defintion(s) listed under the header tag above
"RTN","RORX018",412,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX018",HEADER)
"RTN","RORX018",413,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX018",414,0)
 ;
"RTN","RORX018",415,0)
 ;*****************************************************************************
"RTN","RORX018",416,0)
 ;INITIALIZE THE NUMBER OF PATIENTS IN EACH CATEGORY TO 0
"RTN","RORX018",417,0)
 ;
"RTN","RORX018",418,0)
 ;INPUT
"RTN","RORX018",419,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX018",420,0)
 ;           RORDATA("RCNT") Number of categories to initialize
"RTN","RORX018",421,0)
 ;*****************************************************************************
"RTN","RORX018",422,0)
INIT(RORDATA) ;
"RTN","RORX018",423,0)
 I $G(RORDATA("RCNT"))="" Q
"RTN","RORX018",424,0)
 F I=1:1:RORDATA("RCNT") D
"RTN","RORX018",425,0)
 . S RORDATA("NP",I)=0
"RTN","RORX018",426,0)
 Q
"RTN","RORX018",427,0)
 ;
"RTN","RORX018",428,0)
 ;*****************************************************************************
"RTN","RORX018",429,0)
 ;BMI Categories and Values for the summary table.
"RTN","RORX018",430,0)
 ;NOTE: the number of entries below must match the value of RORDATA("RCNT")
"RTN","RORX018",431,0)
 ;*****************************************************************************
"RTN","RORX018",432,0)
S1 ;;Underweight;;<18.5
"RTN","RORX018",433,0)
S2 ;;Normal weight;;18.5-24.9
"RTN","RORX018",434,0)
S3 ;;Overweight;;25.0-29.99
"RTN","RORX018",435,0)
S4 ;;Class I Obesity;;30.0-34.9
"RTN","RORX018",436,0)
S5 ;;Class II Obesity;;35-39.9
"RTN","RORX018",437,0)
S6 ;;Class III Obesity;;>=40
"RTN","RORX019")
0^8^B207206529^n/a
"RTN","RORX019",1,0)
RORX019 ;BPOIFO/ACS - MELD SCORE BY RANGE ;11/1/09
"RTN","RORX019",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","RORX019",3,0)
 ;
"RTN","RORX019",4,0)
 ; This routine uses the following IAs:
"RTN","RORX019",5,0)
 ;
"RTN","RORX019",6,0)
 ; #2056  GETS^DIQ (supported)
"RTN","RORX019",7,0)
 ; #10105 $$LN^XLFMTH (supported)
"RTN","RORX019",8,0)
 ; #3556  GCPR^LA7QRY (supported)
"RTN","RORX019",9,0)
 ;
"RTN","RORX019",10,0)
 Q
"RTN","RORX019",11,0)
 ;
"RTN","RORX019",12,0)
 ;************************************************************************
"RTN","RORX019",13,0)
 ;COMPILE THE "MELD SCORE BY RANGE" REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",14,0)
 ;REPORT CODE: 019
"RTN","RORX019",15,0)
 ;
"RTN","RORX019",16,0)
 ;Called by entry "MELD Score by Range" in ROR REPORT PARAMETERS (#799.34)
"RTN","RORX019",17,0)
 ;
"RTN","RORX019",18,0)
 ;INPUT
"RTN","RORX019",19,0)
 ;  RORTSK     Task number and task parameters
"RTN","RORX019",20,0)
 ;
"RTN","RORX019",21,0)
 ;
"RTN","RORX019",22,0)
 ;  Below is a sample RORTSK input array for utilization in 2003, most recent
"RTN","RORX019",23,0)
 ;  scores, MELD range from 10 to 30, MELD Na range from 20 to 50:
"RTN","RORX019",24,0)
 ;  
"RTN","RORX019",25,0)
 ;  RORTSK=nnn   (the task number)
"RTN","RORX019",26,0)
 ;  RORTSK("EP")="$$MLDRANGE^RORX019"
"RTN","RORX019",27,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","END")=3031231
"RTN","RORX019",28,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","START")=3030101
"RTN","RORX019",29,0)
 ;  RORTSK("PARAMS","ICD9FILT","A","FILTER")="ALL"
"RTN","RORX019",30,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1)=""
"RTN","RORX019",31,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"H")=30
"RTN","RORX019",32,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"L")=10
"RTN","RORX019",33,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2)=""
"RTN","RORX019",34,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"H")=50
"RTN","RORX019",35,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"L")=20
"RTN","RORX019",36,0)
 ;  RORTSK("PARAMS","OPTIONS","A","COMPLETE")=1
"RTN","RORX019",37,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX019",38,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_AFTER")=1
"RTN","RORX019",39,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_BEFORE")=1
"RTN","RORX019",40,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_DURING")=1
"RTN","RORX019",41,0)
 ;  RORTSK("PARAMS","REGIEN")=1
"RTN","RORX019",42,0)
 ;  
"RTN","RORX019",43,0)
 ;  If the user selected an 'as of' date = 12/31/2005:
"RTN","RORX019",44,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX019",45,0)
 ;     is replaced with:  
"RTN","RORX019",46,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MAX_DATE")=3051231
"RTN","RORX019",47,0)
 ;
"RTN","RORX019",48,0)
 ;
"RTN","RORX019",49,0)
 ;OUTPUT
"RTN","RORX019",50,0)
 ;  <0  Error code
"RTN","RORX019",51,0)
 ;   0  Ok
"RTN","RORX019",52,0)
 ;************************************************************************
"RTN","RORX019",53,0)
MLDRANGE(RORTSK) ;
"RTN","RORX019",54,0)
 N RORREG        ; Registry IEN
"RTN","RORX019",55,0)
 N RORSDT        ; report start date
"RTN","RORX019",56,0)
 N ROREDT        ; report end date
"RTN","RORX019",57,0)
 N RORDATA       ; array to hold ROR data and summary totals
"RTN","RORX019",58,0)
 N RORPTIEN      ; IEN of patient in the ROR registry
"RTN","RORX019",59,0)
 N DFN           ; DFN of patient in the PATIENT file (#2)
"RTN","RORX019",60,0)
 N RORLC         ; sub-file and array of LOINC codes to search Lab data
"RTN","RORX019",61,0)
 ;
"RTN","RORX019",62,0)
 N REPORT,RC,I,TMP,SFLAGS,PARAMS
"RTN","RORX019",63,0)
 ;--- Establish the root XML Node of the report and put into output
"RTN","RORX019",64,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX019",65,0)
 Q:REPORT<0 REPORT
"RTN","RORX019",66,0)
 ;
"RTN","RORX019",67,0)
 ;--- Get registry IEN
"RTN","RORX019",68,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX019",69,0)
 ;
"RTN","RORX019",70,0)
 ;--- Set standard report parameters data into output:
"RTN","RORX019",71,0)
 ;registry, comment, patients (before, during, after), options (summary vs.
"RTN","RORX019",72,0)
 ;complete), other registries, and other diagnoses
"RTN","RORX019",73,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS) Q:PARAMS<0 PARAMS
"RTN","RORX019",74,0)
 ;
"RTN","RORX019",75,0)
 ;--- Add range parameters to output
"RTN","RORX019",76,0)
 S RC=$$PARAMS^RORX019A(PARAMS,.RORDATA,.RORTSK) Q:RC<0 RC
"RTN","RORX019",77,0)
 ;
"RTN","RORX019",78,0)
 ;--- Put report header data into output:
"RTN","RORX019",79,0)
 ;report creation date, task number, last registry update date, and
"RTN","RORX019",80,0)
 ;last data extraction date
"RTN","RORX019",81,0)
 S RC=$$HEADER(REPORT) Q:RC<0 RC
"RTN","RORX019",82,0)
 ;
"RTN","RORX019",83,0)
 ;--- Get MELD ranges requested
"RTN","RORX019",84,0)
 ;I=1 ==> report = MELD      I=2 ==> report = MELD Na
"RTN","RORX019",85,0)
 S I=0 F  S I=$O(RORTSK("PARAMS","LRGRANGES","C",I)) Q:I=""  D
"RTN","RORX019",86,0)
 . S RORDATA("L",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"L")) ;low range
"RTN","RORX019",87,0)
 . S RORDATA("H",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"H")) ;high range
"RTN","RORX019",88,0)
 ;
"RTN","RORX019",89,0)
 ;--- Get Max Date for test results  OUTPUT: RORDATA("DATE")
"RTN","RORX019",90,0)
 S RORDATA("DATE")=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORX019",91,0)
 I $G(RORDATA("DATE"))="" S RORDATA("DATE")=DT
"RTN","RORX019",92,0)
 ;
"RTN","RORX019",93,0)
 ;--- Create 'patients' table
"RTN","RORX019",94,0)
 N RORBODY S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX019",95,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX019",96,0)
 ;
"RTN","RORX019",97,0)
 ;--- Check utilization
"RTN","RORX019",98,0)
 N CNT,ECNT,UTSDT,UTEDT,SKIPSDT,SKIPEDT
"RTN","RORX019",99,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX019",100,0)
 ; Utilization date range is always sent
"RTN","RORX019",101,0)
 S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX019",102,0)
 S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX019",103,0)
 ; Combined date range
"RTN","RORX019",104,0)
 S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,$G(UTSDT))
"RTN","RORX019",105,0)
 S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,$G(UTEDT))
"RTN","RORX019",106,0)
 ;
"RTN","RORX019",107,0)
 ;--- Number of patients in the registry - used for calculating the
"RTN","RORX019",108,0)
 ;task progress percentage (shown on the GUI screen)
"RTN","RORX019",109,0)
 N RORPTCNT S RORPTCNT=$$REGSIZE^RORUTL02(+RORREG) S:RORPTCNT<0 RORPTCNT=0
"RTN","RORX019",110,0)
 ;
"RTN","RORX019",111,0)
 ;--- LOINC codes
"RTN","RORX019",112,0)
 ;create list for future comparison
"RTN","RORX019",113,0)
 S RORDATA("CR_LOINC")=";15045-8;21232-4;2160-0;" ;Creatinine
"RTN","RORX019",114,0)
 S RORDATA("BIL_LOINC")=";14631-6;1975-2;" ;Bilirubin
"RTN","RORX019",115,0)
 S RORDATA("SOD_LOINC")=";2947-0;2951-2;32717-1;" ;Sodium
"RTN","RORX019",116,0)
 S RORDATA("INR_LOINC")=";34714-6;6301-6;" ;INR
"RTN","RORX019",117,0)
 ;set up array for future call to Lab API
"RTN","RORX019",118,0)
 S RORLC="CH" ;chemistry sub-file to search in #63
"RTN","RORX019",119,0)
 S RORLC(1)="15045-8^LN" ;Creatinine LOINC
"RTN","RORX019",120,0)
 S RORLC(2)="21232-4^LN" ;Creatinine LOINC
"RTN","RORX019",121,0)
 S RORLC(3)="2160-0^LN"  ;Creatinine LOINC
"RTN","RORX019",122,0)
 S RORLC(4)="14631-6^LN" ;Bilirubin LOINC
"RTN","RORX019",123,0)
 S RORLC(5)="1975-2^LN"  ;Bilirubin LOINC
"RTN","RORX019",124,0)
 S RORLC(6)="2947-0^LN"  ;Sodium LOINC
"RTN","RORX019",125,0)
 S RORLC(7)="2951-2^LN"  ;Sodium LOINC
"RTN","RORX019",126,0)
 S RORLC(8)="32717-1^LN" ;Sodium LOINC
"RTN","RORX019",127,0)
 S RORLC(9)="34714-6^LN" ;INR LOINC
"RTN","RORX019",128,0)
 S RORLC(10)="6301-6^LN" ;INR LOINC
"RTN","RORX019",129,0)
 ;
"RTN","RORX019",130,0)
 ;--- Get registry records
"RTN","RORX019",131,0)
 N RCC,FLAG,TMP,DFN,SKIP
"RTN","RORX019",132,0)
 S (CNT,RORPTIEN,RC)=0
"RTN","RORX019",133,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX019",134,0)
 F  S RORPTIEN=$O(^RORDATA(798,"AC",RORREG,RORPTIEN))  Q:RORPTIEN'>0  D  Q:RC<0
"RTN","RORX019",135,0)
 . ;--- Calculate 'progress' for the GUI display
"RTN","RORX019",136,0)
 . S TMP=$S(RORPTCNT>0:CNT/RORPTCNT,1:"")
"RTN","RORX019",137,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX019",138,0)
 . S CNT=CNT+1
"RTN","RORX019",139,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX019",140,0)
 . Q:$$SKIP^RORXU005(RORPTIEN,SFLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX019",141,0)
 . ;--- Get the patient DFN
"RTN","RORX019",142,0)
 . S DFN=$$PTIEN^RORUTL01(RORPTIEN)  Q:DFN'>0
"RTN","RORX019",143,0)
 . ;--- Check if patient has passed the ICD9 filter
"RTN","RORX019",144,0)
 . S RCC=0
"RTN","RORX019",145,0)
 . I FLAG'="ALL" D
"RTN","RORX019",146,0)
 . . S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX019",147,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX019",148,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX019",149,0)
 . ;
"RTN","RORX019",150,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX019",151,0)
 . S SKIP=0 I $G(UTSDT)>0 D
"RTN","RORX019",152,0)
 .. N UTIL K TMP S TMP("ALL")=1
"RTN","RORX019",153,0)
 .. S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,DFN,.TMP)
"RTN","RORX019",154,0)
 .. S:'UTIL SKIP=1
"RTN","RORX019",155,0)
 . ;--- Skip the patient if they have no utilization in the range
"RTN","RORX019",156,0)
 . I $G(SKIP) Q
"RTN","RORX019",157,0)
 . ;
"RTN","RORX019",158,0)
 . ;--- For each patient, process the registry record and create report
"RTN","RORX019",159,0)
 . I $$PATIENT(DFN,RORBODY,.RORDATA,RORPTIEN,.RORLC)<0 S ECNT=ECNT+1 ;error count
"RTN","RORX019",160,0)
 ;
"RTN","RORX019",161,0)
 K ^TMP("RORX019",$J)
"RTN","RORX019",162,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX019",163,0)
 ;
"RTN","RORX019",164,0)
 ;************************************************************************
"RTN","RORX019",165,0)
 ;ADD PATIENT DATA TO THE REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",166,0)
 ;
"RTN","RORX019",167,0)
 ;INPUT
"RTN","RORX019",168,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX019",169,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX019",170,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019",171,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX019",172,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX019",173,0)
 ;
"RTN","RORX019",174,0)
 ;OUTPUT
"RTN","RORX019",175,0)
 ;  1        ok
"RTN","RORX019",176,0)
 ; <0        error
"RTN","RORX019",177,0)
 ;************************************************************************
"RTN","RORX019",178,0)
PATIENT(DFN,PTAG,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX019",179,0)
 I $$CALCMLD(DFN,PTAG,.RORDATA,RORPTIEN,.RORLC)<0 Q 1 ;quit if no MELD score can be calculated
"RTN","RORX019",180,0)
 I '$$INRANGE(.RORDATA) Q 1  ;exclude patient if score is out of range
"RTN","RORX019",181,0)
 ;--- Get patient data and put into the report
"RTN","RORX019",182,0)
 N VADM,VA,RORDOD,MTAG,TTAG
"RTN","RORX019",183,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX019",184,0)
 ;--- The <PATIENT> tag
"RTN","RORX019",185,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTAG,,DFN)
"RTN","RORX019",186,0)
 I PTAG<0 Q PTAG
"RTN","RORX019",187,0)
 ;--- Patient Name
"RTN","RORX019",188,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX019",189,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX019",190,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX019",191,0)
 ;--- Date of death
"RTN","RORX019",192,0)
 S RORDOD=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX019",193,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$G(RORDOD),PTAG,1)
"RTN","RORX019",194,0)
 ;--- MELDDATA tag
"RTN","RORX019",195,0)
 S MTAG=$$ADDVAL^RORTSK11(RORTSK,"MELDDATA",,PTAG)
"RTN","RORX019",196,0)
 I MTAG<0 Q MTAG
"RTN","RORX019",197,0)
 ;--- Test Result Values
"RTN","RORX019",198,0)
 N TNAME,TNAMEMIX F TNAME="BILI","CR","INR","NA" D
"RTN","RORX019",199,0)
 . ;--- TEST tag
"RTN","RORX019",200,0)
 . S TTAG=$$ADDVAL^RORTSK11(RORTSK,"TEST",,MTAG)
"RTN","RORX019",201,0)
 . I TTAG<0 Q
"RTN","RORX019",202,0)
 . ;--- Mixed case test name for GUI application
"RTN","RORX019",203,0)
 . I TNAME="BILI" S TNAMEMIX="Bili"
"RTN","RORX019",204,0)
 . I TNAME="CR" S TNAMEMIX="Cr"
"RTN","RORX019",205,0)
 . I TNAME="INR" S TNAMEMIX="INR"
"RTN","RORX019",206,0)
 . I TNAME="NA" S TNAMEMIX="Na"
"RTN","RORX019",207,0)
 . ;---  Test Name
"RTN","RORX019",208,0)
 . D ADDVAL^RORTSK11(RORTSK,"TNAME",TNAMEMIX,TTAG)
"RTN","RORX019",209,0)
 . ;---  Test Date
"RTN","RORX019",210,0)
 . D ADDVAL^RORTSK11(RORTSK,"DATE",$P($G(RORDATA(TNAME)),U,2),TTAG)
"RTN","RORX019",211,0)
 . ;---  Test Result Value
"RTN","RORX019",212,0)
 . D ADDVAL^RORTSK11(RORTSK,"RESULT",$P($G(RORDATA(TNAME)),U,1),TTAG)
"RTN","RORX019",213,0)
 ;---  MELD score
"RTN","RORX019",214,0)
 I RORDATA("IDLST")[1 D ADDVAL^RORTSK11(RORTSK,"MELD",$G(RORDATA("SCORE",1)),MTAG,3)
"RTN","RORX019",215,0)
 ;---  MELD-Na Score
"RTN","RORX019",216,0)
 I RORDATA("IDLST")[2 D ADDVAL^RORTSK11(RORTSK,"MELDNA",$G(RORDATA("SCORE",2)),MTAG,3)
"RTN","RORX019",217,0)
 Q ($S($G(TTAG)<0:TTAG,1:1))
"RTN","RORX019",218,0)
 ;
"RTN","RORX019",219,0)
 ;************************************************************************
"RTN","RORX019",220,0)
 ;CALCULATE THE MELD SCORE(S)
"RTN","RORX019",221,0)
 ;
"RTN","RORX019",222,0)
 ;INPUT
"RTN","RORX019",223,0)
 ;  DFN      Patient DFN in LAB DATA file (#63)
"RTN","RORX019",224,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX019",225,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019",226,0)
 ;           RORDATA("FIELDS") - Field list for retrieving the test results
"RTN","RORX019",227,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX019",228,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX019",229,0)
 ;           
"RTN","RORX019",230,0)
 ;OUTPUT
"RTN","RORX019",231,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019",232,0)
 ;           RORDATA("BVAL",DATE)=VALUE    - Bilirubin results
"RTN","RORX019",233,0)
 ;           RORDATA("CVAL",DATE)=VALUE    - Creatinine results
"RTN","RORX019",234,0)
 ;           RORDATA("IVAL",DATE)=VALUE    - INR results
"RTN","RORX019",235,0)
 ;           RORDATA("SVAL",DATE)=VALUE    - Sodium results
"RTN","RORX019",236,0)
 ;           RORDATA("CINV",DATE)=VALUE      - 'invalid' Creatinine result
"RTN","RORX019",237,0)
 ;           RORDATA("SINV",DATE)=VALUE      - 'invalid' Sodium result
"RTN","RORX019",238,0)
 ;           RORDATA("SCORE",1) - MELD score
"RTN","RORX019",239,0)
 ;           RORDATA("SCORE",2) - MELD-Na score
"RTN","RORX019",240,0)
 ;    1      Patient should appear on report
"RTN","RORX019",241,0)
 ;   -1      Patient should NOT appear on report
"RTN","RORX019",242,0)
 ;   
"RTN","RORX019",243,0)
 ;   NOTE: the 'invalid' results will be stored as 'backup' results, in
"RTN","RORX019",244,0)
 ;   case no valid result is found for Creatinine or Sodium.  An invalid
"RTN","RORX019",245,0)
 ;   creatinine result is >12.  An invalid Sodium result is <100 or >180.
"RTN","RORX019",246,0)
 ;   These results will be displayed on the report if no MELD range was 
"RTN","RORX019",247,0)
 ;   specifically requested by the user, but the score will not be calculated.
"RTN","RORX019",248,0)
 ;   They will not be displayed on the report if the user requested a MELD
"RTN","RORX019",249,0)
 ;   range.
"RTN","RORX019",250,0)
 ;************************************************************************
"RTN","RORX019",251,0)
CALCMLD(DFN,PTAG,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX019",252,0)
 N RORID,RORST,ROREND,RORLAB,RORMSG,RC
"RTN","RORX019",253,0)
 S RORDATA("CALC")=0,RORDATA("CALCNA")=0 ;default: don't calculate scores
"RTN","RORX019",254,0)
 K RORDATA("SCORE",1),RORDATA("SCORE",2) ;test scores
"RTN","RORX019",255,0)
 K RORDATA("BVAL"),RORDATA("CVAL"),RORDATA("IVAL"),RORDATA("SVAL") ;test results
"RTN","RORX019",256,0)
 K RORDATA("CINV"),RORDATA("SINV") ;test results
"RTN","RORX019",257,0)
 ;get patient ICN or SSN
"RTN","RORX019",258,0)
 S RORID=$$PTID^RORUTL02(DFN)
"RTN","RORX019",259,0)
 Q:'$G(RORID) -1
"RTN","RORX019",260,0)
 ;---SET UP LAB API INPUT/OUTPUT PARMS---
"RTN","RORX019",261,0)
 S RORST="2000101^CD" ;start date 1/1/1900
"RTN","RORX019",262,0)
 S ROREND=$G(RORDATA("DATE"))\1 ;end date
"RTN","RORX019",263,0)
 ;add 1 to the end date so the Lab API INCLUDES the end date correctly
"RTN","RORX019",264,0)
 N X1,X2,X3 S X1=ROREND,X2=1 D C^%DTC S ROREND=X K X,X1,X2
"RTN","RORX019",265,0)
 S ROREND=ROREND_"^CD"
"RTN","RORX019",266,0)
 S RORLAB=$NA(^TMP("ROROUT",$J)) ;lab API output global
"RTN","RORX019",267,0)
 K RORMSG,@RORLAB ;initialize prior to call
"RTN","RORX019",268,0)
 ;---CALL LAB API---
"RTN","RORX019",269,0)
 S RC=$$GCPR^LA7QRY(RORID,RORST,ROREND,.RORLC,"*",.RORMSG,RORLAB)
"RTN","RORX019",270,0)
 I RC="",$D(RORMSG)>1  D  ;quit if error returned
"RTN","RORX019",271,0)
 . N ERR,I,LST,TMP
"RTN","RORX019",272,0)
 . S (ERR,LST)=""
"RTN","RORX019",273,0)
 . F I=1:1  S ERR=$O(RORMSG(ERR))  Q:ERR=""  D
"RTN","RORX019",274,0)
 . . S LST=LST_","_ERR,TMP=RORMSG(ERR)
"RTN","RORX019",275,0)
 . . K RORMSG(ERR)  S RORMSG(I)=TMP
"RTN","RORX019",276,0)
 . S LST=$P(LST,",",2,999)  Q:(LST=3)!(LST=99)
"RTN","RORX019",277,0)
 . S RC=$$ERROR^RORERR(-27,,.RORMSG,RORPTIEN)
"RTN","RORX019",278,0)
 I RC<0 Q -1
"RTN","RORX019",279,0)
 ;Note: the Lab API returns data in the form of HL7 segments
"RTN","RORX019",280,0)
 N TMP,RORSPEC,RORVAL,RORNODE,RORSEG,SEGTYPE,RORLOINC,RORDONE,RORDATE,RORTEST
"RTN","RORX019",281,0)
 N RORCR,RORBIL,RORSOD,RORINR,FS
"RTN","RORX019",282,0)
 S FS="|" ;HL7 field separator for lab data
"RTN","RORX019",283,0)
 S (RORCR,RORBIL,RORSOD,RORINR,RORDONE,RORNODE)=0
"RTN","RORX019",284,0)
 F  S RORNODE=$O(^TMP("ROROUT",$J,RORNODE)) Q:((RORNODE="")!(RORDONE))  D
"RTN","RORX019",285,0)
 . S RORSEG=$G(^TMP("ROROUT",$J,RORNODE)) ;get entire HL7 segment
"RTN","RORX019",286,0)
 . S SEGTYPE=$P(RORSEG,FS,1) ;get segment type (PID,OBR,OBX,etc.)
"RTN","RORX019",287,0)
 . Q:SEGTYPE'="OBX"  ;we want OBX segments only
"RTN","RORX019",288,0)
 . S RORSPEC=$P($P(RORSEG,FS,4),U,2) ;specimen type string (urine, serum, etc.)
"RTN","RORX019",289,0)
 . S RORSPEC=":"_RORSPEC_":" ;append ":" as prefix and suffix
"RTN","RORX019",290,0)
 . I ((RORSPEC[":UA:")!(RORSPEC[":UR:")) Q  ;quit if specimen type is urine
"RTN","RORX019",291,0)
 . S RORLOINC=$P($P(RORSEG,FS,4),U,1) ;get LOINC code for test
"RTN","RORX019",292,0)
 . S RORVAL=$P(RORSEG,FS,6) ;test result value
"RTN","RORX019",293,0)
 . S RORVAL=$TR(RORVAL,"""","") ;get rid of double quotes around values
"RTN","RORX019",294,0)
 . Q:($G(RORVAL)'>0)  ;quit if no value
"RTN","RORX019",295,0)
 . S RORDATE=$$HL7TFM^XLFDT($P(RORSEG,FS,15)) ;get date collected
"RTN","RORX019",296,0)
 . S RORDATE=RORDATE\1
"RTN","RORX019",297,0)
 . ;---check for Creatinine match on LOINC---
"RTN","RORX019",298,0)
 . I 'RORCR,RORDATA("CR_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019",299,0)
 .. ;store 'valid' value (12 or less) if no 'valid' value has been stored yet
"RTN","RORX019",300,0)
 .. I RORVAL'>12,$O(RORDATA("CVAL",0))="" S RORDATA("CVAL",RORDATE)=RORVAL,RORCR=1 Q
"RTN","RORX019",301,0)
 .. ;store 'invalid' value (>12) if no other value has been stored
"RTN","RORX019",302,0)
 .. I RORVAL>12,$O(RORDATA("CVAL",0))="",$O(RORDATA("CINV",0))="" D
"RTN","RORX019",303,0)
 ... S RORDATA("CINV",RORDATE)=$G(RORVAL)_"*" ;mark as 'invalid' value
"RTN","RORX019",304,0)
 . ;---check for Sodium match on LOINC---
"RTN","RORX019",305,0)
 . I 'RORSOD,RORDATA("SOD_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019",306,0)
 .. ;store 'valid' value (100 to 180) if no other 'valid' value has been stored
"RTN","RORX019",307,0)
 .. I RORVAL'<100,RORVAL'>180,$O(RORDATA("SVAL",0))="" D  Q
"RTN","RORX019",308,0)
 ... S RORDATA("SVAL",RORDATE)=$G(RORVAL),RORSOD=1
"RTN","RORX019",309,0)
 .. ;store 'invalid' value (<100 or >180) if no other value has been stored yet
"RTN","RORX019",310,0)
 .. I ((RORVAL<100)!(RORVAL>180)),$O(RORDATA("SVAL",0))="",$O(RORDATA("SINV",0))="" D  Q
"RTN","RORX019",311,0)
 ... S RORDATA("SINV",RORDATE)=RORVAL_"*" Q   ;mark as 'invalid' value
"RTN","RORX019",312,0)
 . ;---check for Bilirubin match on LOINC---
"RTN","RORX019",313,0)
 . I 'RORBIL,RORDATA("BIL_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019",314,0)
 .. ;store first Bilirubin value
"RTN","RORX019",315,0)
 .. I $O(RORDATA("BVAL",0))="" S RORDATA("BVAL",RORDATE)=RORVAL,RORBIL=1
"RTN","RORX019",316,0)
 . ;---check for INR match on LOINC---
"RTN","RORX019",317,0)
 . I 'RORINR,RORDATA("INR_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019",318,0)
 .. ;store first INR value
"RTN","RORX019",319,0)
 .. I $O(RORDATA("IVAL",0))="" S RORDATA("IVAL",RORDATE)=RORVAL,RORINR=1
"RTN","RORX019",320,0)
 . I RORCR,RORBIL,RORINR S RORDATA("CALC")=1 D
"RTN","RORX019",321,0)
 .. I RORSOD D
"RTN","RORX019",322,0)
 ... S RORDATA("CALCNA")=1,RORDONE=1
"RTN","RORX019",323,0)
 .. E  S RORDATA("CALCNA")=0
"RTN","RORX019",324,0)
 ;
"RTN","RORX019",325,0)
 ;--- put test date and result into array: RORDATA(<test>)=value^date
"RTN","RORX019",326,0)
 N DATE
"RTN","RORX019",327,0)
 ;Bilirubin:
"RTN","RORX019",328,0)
 S DATE=$O(RORDATA("BVAL",0))
"RTN","RORX019",329,0)
 S RORDATA("BILI")=$S($G(DATE)="":U,1:$G(RORDATA("BVAL",DATE))_U_$G(DATE))
"RTN","RORX019",330,0)
 ;Creatinine:
"RTN","RORX019",331,0)
 S DATE=$O(RORDATA("CVAL",0))
"RTN","RORX019",332,0)
 I $G(DATE)="" D  ;if regular Creatinine value is null, take invalid value
"RTN","RORX019",333,0)
 . S DATE=$O(RORDATA("CINV",0)) I $G(DATE)>0 S RORDATA("CVAL",DATE)=$G(RORDATA("CINV",DATE))
"RTN","RORX019",334,0)
 S RORDATA("CR")=$S($G(DATE)="":U,1:$G(RORDATA("CVAL",DATE))_U_$G(DATE))
"RTN","RORX019",335,0)
 ;INR:
"RTN","RORX019",336,0)
 S DATE=$O(RORDATA("IVAL",0))
"RTN","RORX019",337,0)
 S RORDATA("INR")=$S($G(DATE)="":U,1:$G(RORDATA("IVAL",DATE))_U_$G(DATE))
"RTN","RORX019",338,0)
 ;Sodium:
"RTN","RORX019",339,0)
 S DATE=$O(RORDATA("SVAL",0))
"RTN","RORX019",340,0)
 I $G(DATE)="" D  ;if regular Sodium value is null, take invalid value
"RTN","RORX019",341,0)
 . S DATE=$O(RORDATA("SINV",0)) I $G(DATE)>0 S RORDATA("SVAL",DATE)=$G(RORDATA("SINV",DATE))
"RTN","RORX019",342,0)
 S RORDATA("NA")=$S($G(DATE)="":U,1:$G(RORDATA("SVAL",DATE))_U_$G(DATE))
"RTN","RORX019",343,0)
 ;
"RTN","RORX019",344,0)
 N TEST,BILI,CR,INR,NA
"RTN","RORX019",345,0)
 ;set lower limits for Bili, Cr, and INR to 1 if there's a value in there
"RTN","RORX019",346,0)
 F TEST="BILI","CR","INR" D
"RTN","RORX019",347,0)
 . S @TEST=$P($G(RORDATA(TEST)),U,1) Q:$G(@TEST)["*"  I $G(@TEST),@TEST<1 S @TEST=1
"RTN","RORX019",348,0)
 ;for valid creatinine, use max=4 for calculations
"RTN","RORX019",349,0)
 I $G(CR)'["*" D
"RTN","RORX019",350,0)
 . I $G(CR)>4 S CR=4
"RTN","RORX019",351,0)
 S NA=$P($G(RORDATA("NA")),U,1)
"RTN","RORX019",352,0)
 ;for valid sodium, use min=120, max=135 for calculations
"RTN","RORX019",353,0)
 I $G(NA)'["*" D
"RTN","RORX019",354,0)
 . I $G(NA)>135 S NA=135 Q
"RTN","RORX019",355,0)
 . I $G(NA)'="" I NA<120 S NA=120
"RTN","RORX019",356,0)
 ;
"RTN","RORX019",357,0)
 N TMP1,TMP2
"RTN","RORX019",358,0)
 ;RORDATA("SCORE",1) will hold the calculated MELD score
"RTN","RORX019",359,0)
 ;RORDATA("SCORE",2) will hold the calculated MELD Na score
"RTN","RORX019",360,0)
 S (RORDATA("SCORE",1),RORDATA("SCORE",2))="" ;init calculated scores to null
"RTN","RORX019",361,0)
 D
"RTN","RORX019",362,0)
 . Q:($G(CR)["*")  ;quit if no calculation should occur
"RTN","RORX019",363,0)
 . I $G(BILI),$G(CR),$G(INR) D
"RTN","RORX019",364,0)
 .. ;MELD forumula: (.957*lne(Cr) + .378*lne(Bili) + 1.120*lne(Inr) + .643) * 10
"RTN","RORX019",365,0)
 .. S TMP1=(.957*($$LN^XLFMTH(CR))+(.378*($$LN^XLFMTH(BILI)))+(1.120*($$LN^XLFMTH(INR)))+.643)*10
"RTN","RORX019",366,0)
 .. S RORDATA("SCORE",1)=$J($G(TMP1),0,0) ;round MELD to whole number
"RTN","RORX019",367,0)
 .. Q:($G(NA)["*")  ;quit if no calculation should occur
"RTN","RORX019",368,0)
 .. ;if meld NA requested, sodium test must have a valid value
"RTN","RORX019",369,0)
 .. I $G(NA),RORDATA("SCORE",1),RORDATA("IDLST")[2 D
"RTN","RORX019",370,0)
 ... ;MELD-Na forumula: MELD + (1.59 *(135-Na))
"RTN","RORX019",371,0)
 ... S TMP2=$G(RORDATA("SCORE",1))+(1.59*(135-NA))
"RTN","RORX019",372,0)
 ... S RORDATA("SCORE",2)=$J($G(TMP2),0,0)
"RTN","RORX019",373,0)
 Q 1
"RTN","RORX019",374,0)
 ;
"RTN","RORX019",375,0)
 ;************************************************************************
"RTN","RORX019",376,0)
 ;DETERMINE IF THE SCORES ARE WITHIN THE REQUESTED RANGES
"RTN","RORX019",377,0)
 ;-- If both tests contain ranges: scores for BOTH tests must fall in the
"RTN","RORX019",378,0)
 ;ranges...treated like an 'AND'
"RTN","RORX019",379,0)
 ;-- If 1 test contains a range: only patients with scores in the requested range
"RTN","RORX019",380,0)
 ;will be displayed, and the test without the range will also be displayed
"RTN","RORX019",381,0)
 ;with the calculated score (if applicable)
"RTN","RORX019",382,0)
 ;-- If neither test contains a range: all patients and their test results
"RTN","RORX019",383,0)
 ;and scores (null if they can't be calculated) are returned
"RTN","RORX019",384,0)
 ;
"RTN","RORX019",385,0)
 ;INPUT
"RTN","RORX019",386,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019",387,0)
 ;OUTPUT
"RTN","RORX019",388,0)
 ;  1        include on report
"RTN","RORX019",389,0)
 ;  0        exclude from report
"RTN","RORX019",390,0)
 ;************************************************************************
"RTN","RORX019",391,0)
INRANGE(RORDATA) ;
"RTN","RORX019",392,0)
 ;include all data and quit if no range was sent in
"RTN","RORX019",393,0)
 I ('$G(RORDATA("RANGE",1))&('$G(RORDATA("RANGE",2)))) Q 1
"RTN","RORX019",394,0)
 ;
"RTN","RORX019",395,0)
 N I,RETURN,SCORE S RETURN=1 ;default is set to 'within range'
"RTN","RORX019",396,0)
 S I=0 F  S I=$O(RORDATA("RANGE",I)) Q:I=""  D
"RTN","RORX019",397,0)
 . I $G(RORDATA("L",I))'="" D
"RTN","RORX019",398,0)
 .. S SCORE=$G(RORDATA("SCORE",I))
"RTN","RORX019",399,0)
 .. I $G(SCORE)="" S RETURN=0 Q
"RTN","RORX019",400,0)
 .. I SCORE<RORDATA("L",I) S RETURN=0
"RTN","RORX019",401,0)
 . I $G(RORDATA("H",I))'="" D
"RTN","RORX019",402,0)
 .. S SCORE=$G(RORDATA("SCORE",I))
"RTN","RORX019",403,0)
 .. I $G(SCORE)="" S RETURN=0 Q
"RTN","RORX019",404,0)
 .. I SCORE>$G(RORDATA("H",I)) S RETURN=0
"RTN","RORX019",405,0)
 ;
"RTN","RORX019",406,0)
 Q RETURN
"RTN","RORX019",407,0)
 ;
"RTN","RORX019",408,0)
 ;************************************************************************
"RTN","RORX019",409,0)
 ;ADD THE HEADERS TO THE REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",410,0)
 ;
"RTN","RORX019",411,0)
 ;INPUT
"RTN","RORX019",412,0)
 ;  PARTAG  Reference IEN to the 'report' parent XML tag
"RTN","RORX019",413,0)
 ;
"RTN","RORX019",414,0)
 ;OUTPUT
"RTN","RORX019",415,0)
 ;  <0      error
"RTN","RORX019",416,0)
 ;  >0      'Header' XML tag number or error code
"RTN","RORX019",417,0)
 ;************************************************************************
"RTN","RORX019",418,0)
HEADER(PARTAG) ;
"RTN","RORX019",419,0)
 N HEADER,RC,COL,COLUMNS,TMP S RC=0
"RTN","RORX019",420,0)
 ;call to $$HEADER^RORXU002 will populate the report created date, task number,
"RTN","RORX019",421,0)
 ;last registry update, and last data extraction.
"RTN","RORX019",422,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX019",423,0)
 Q:HEADER<0 HEADER
"RTN","RORX019",424,0)
 ;manually build the table defintion(s) listed below
"RTN","RORX019",425,0)
 ;PATIENTS(#,NAME,LAST4,DOD,TEST,DATE,RESULT,MELD,MELDNA)
"RTN","RORX019",426,0)
 S COLUMNS=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORX019",427,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"NAME","PATIENTS")
"RTN","RORX019",428,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"HEADER","1")
"RTN","RORX019",429,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"FOOTER","1")
"RTN","RORX019",430,0)
 ;--- Required columns
"RTN","RORX019",431,0)
 F COL="#","NAME","LAST4","DOD","TEST","DATE","RESULT"  D
"RTN","RORX019",432,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",433,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX019",434,0)
 ;--- Additional columns
"RTN","RORX019",435,0)
 I RORDATA("IDLST")[1 D
"RTN","RORX019",436,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",437,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","MELD")
"RTN","RORX019",438,0)
 I RORDATA("IDLST")[2 D
"RTN","RORX019",439,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",440,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","MELDNA")
"RTN","RORX019",441,0)
 ;---
"RTN","RORX019",442,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX019",443,0)
 ;
"RTN","RORX019A")
0^16^B8227463^n/a
"RTN","RORX019A",1,0)
RORX019A ;BPOIFO/ACS - MELD SCORE BY RANGE (CONT.) ;11/1/09
"RTN","RORX019A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","RORX019A",3,0)
 ;
"RTN","RORX019A",4,0)
 ;
"RTN","RORX019A",5,0)
 Q
"RTN","RORX019A",6,0)
 ;
"RTN","RORX019A",7,0)
 ;*****************************************************************************
"RTN","RORX019A",8,0)
 ;OUTPUT REPORT 'RANGE' PARAMETERS, SET UP REPORT ID LIST (EXTRINISIC FUNCTION)
"RTN","RORX019A",9,0)
 ;
"RTN","RORX019A",10,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX019A",11,0)
 ;
"RTN","RORX019A",12,0)
 ; Return Values:
"RTN","RORX019A",13,0)
 ;        RORDATA("IDLST") - list of IDs for tests requested
"RTN","RORX019A",14,0)
 ;       <0  Error code
"RTN","RORX019A",15,0)
 ;        0  Ok
"RTN","RORX019A",16,0)
 ;*****************************************************************************
"RTN","RORX019A",17,0)
PARAMS(PARTAG,RORDATA,RORTSK) ;
"RTN","RORX019A",18,0)
 N PARAMS,DESC,TMP,RC S RC=0
"RTN","RORX019A",19,0)
 ;--- Lab test ranges
"RTN","RORX019A",20,0)
 S RORDATA("RANGE",1)=0 ;initialize MELD to 'no range passed in'
"RTN","RORX019A",21,0)
 S RORDATA("RANGE",2)=0 ;initialize MELD Na to 'no range passed in'
"RTN","RORX019A",22,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORX019A",23,0)
 . N GRC,ELEMENT,NODE,RTAG,RANGE
"RTN","RORX019A",24,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX019A",25,0)
 . S RTAG=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGES",,PARTAG)
"RTN","RORX019A",26,0)
 . S (GRC,RC)=0
"RTN","RORX019A",27,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORX019A",28,0)
 .. S RANGE=0,DESC=$$RTEXT(GRC,.RORDATA,.RORTSK) ;get range description
"RTN","RORX019A",29,0)
 .. S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGE",DESC,RTAG) ;add desc to output
"RTN","RORX019A",30,0)
 .. I ELEMENT<0 S RC=ELEMENT Q
"RTN","RORX019A",31,0)
 .. D ADDATTR^RORTSK11(RORTSK,ELEMENT,"ID",GRC)
"RTN","RORX019A",32,0)
 .. ;add test ID to the test ID 'list'
"RTN","RORX019A",33,0)
 .. S RORDATA("IDLST")=$G(RORDATA("IDLST"))_$S($G(RORDATA("IDLST"))'="":","_GRC,1:GRC)
"RTN","RORX019A",34,0)
 .. ;--- Process the range values
"RTN","RORX019A",35,0)
 .. S TMP=$G(@NODE@(GRC,"L"))
"RTN","RORX019A",36,0)
 .. I TMP'="" D  S RANGE=1
"RTN","RORX019A",37,0)
 ... D ADDATTR^RORTSK11(RORTSK,ELEMENT,"LOW",TMP) S RORDATA("RANGE",GRC)=1
"RTN","RORX019A",38,0)
 .. S TMP=$G(@NODE@(GRC,"H"))
"RTN","RORX019A",39,0)
 .. I TMP'="" D  S RANGE=1
"RTN","RORX019A",40,0)
 ... D ADDATTR^RORTSK11(RORTSK,ELEMENT,"HIGH",TMP) S RORDATA("RANGE",GRC)=1
"RTN","RORX019A",41,0)
 .. I RANGE D ADDATTR^RORTSK11(RORTSK,ELEMENT,"RANGE",1)
"RTN","RORX019A",42,0)
 ;if user didn't select any tests, default to both tests
"RTN","RORX019A",43,0)
 I $G(RORDATA("IDLST"))="" S RORDATA("IDLST")="1,2"
"RTN","RORX019A",44,0)
 ;--- Success
"RTN","RORX019A",45,0)
 Q RC
"RTN","RORX019A",46,0)
 ;
"RTN","RORX019A",47,0)
 ;*****************************************************************************
"RTN","RORX019A",48,0)
 ;RETURN RANGE TEXT, ADD RANGE VALUES TO RORDATA (EXTRINISIC FUNCTION)
"RTN","RORX019A",49,0)
 ;ID=1: MELD
"RTN","RORX019A",50,0)
 ;ID=2: MELD-Na
"RTN","RORX019A",51,0)
 ;
"RTN","RORX019A",52,0)
 ;INPUT:
"RTN","RORX019A",53,0)
 ;  GRC   Test ID number
"RTN","RORX019A",54,0)
 ;  RORDATA - Array with ROR data
"RTN","RORX019A",55,0)
 ;
"RTN","RORX019A",56,0)
 ;OUTPUT:
"RTN","RORX019A",57,0)
 ;  RORDATA(ID,"L") - test ID low range
"RTN","RORX019A",58,0)
 ;  RORDATA(ID,"H") - test ID high range
"RTN","RORX019A",59,0)
 ;  Description - <range>
"RTN","RORX019A",60,0)
 ;*****************************************************************************
"RTN","RORX019A",61,0)
RTEXT(GRC,RORDATA,RORTSK) ;
"RTN","RORX019A",62,0)
 N RANGE,TMP
"RTN","RORX019A",63,0)
 S RANGE=""
"RTN","RORX019A",64,0)
 ;--- Range
"RTN","RORX019A",65,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C",GRC))>1 D
"RTN","RORX019A",66,0)
 . ;--- Low
"RTN","RORX019A",67,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"L"))
"RTN","RORX019A",68,0)
 . S RORDATA(GRC,"L")=$G(TMP)
"RTN","RORX019A",69,0)
 . S:TMP'="" RANGE=RANGE_" not less than "_TMP
"RTN","RORX019A",70,0)
 . ;--- High
"RTN","RORX019A",71,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"H"))
"RTN","RORX019A",72,0)
 . S RORDATA(GRC,"H")=$G(TMP)
"RTN","RORX019A",73,0)
 . I TMP'=""  D:RANGE'=""  S RANGE=RANGE_" not greater than "_TMP
"RTN","RORX019A",74,0)
 . . S RANGE=RANGE_" and"
"RTN","RORX019A",75,0)
 ;--- Description
"RTN","RORX019A",76,0)
 S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC))
"RTN","RORX019A",77,0)
 S:TMP="" TMP="Unknown ("_GRC_")"
"RTN","RORX019A",78,0)
 Q TMP_" - "_$S(RANGE'="":"numeric results"_RANGE,1:"all results")
"RTN","RORX019A",79,0)
 ;
"RTN","RORX020")
0^9^B197363387^n/a
"RTN","RORX020",1,0)
RORX020 ;BPOIFO/ACS - RENAL FUNCTION BY RANGE ;11/1/09
"RTN","RORX020",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","RORX020",3,0)
 ;
"RTN","RORX020",4,0)
 ; This routine uses the following IAs:
"RTN","RORX020",5,0)
 ;
"RTN","RORX020",6,0)
 ; #4290         ^PXRMINDX(120.5 (controlled)
"RTN","RORX020",7,0)
 ; #3647         $$EN^GMVPXRM (controlled)
"RTN","RORX020",8,0)
 ; #2056         GETS^DIQ (supported)
"RTN","RORX020",9,0)
 ; #10061        DEM^VADPT (supported)
"RTN","RORX020",10,0)
 ; #10105        PWR^XLFMTH (supported)
"RTN","RORX020",11,0)
 ; #5047         $$GETIEN^GMVGETVT (supported)
"RTN","RORX020",12,0)
 ; #3556         GCPR^LA7QRY (supported)
"RTN","RORX020",13,0)
 ; #10103        $$HL7TFM^XLFDT
"RTN","RORX020",14,0)
 Q
"RTN","RORX020",15,0)
 ;
"RTN","RORX020",16,0)
 ;************************************************************************
"RTN","RORX020",17,0)
 ;COMPILE THE "RENAL FUNCTION BY RANGE" REPORT
"RTN","RORX020",18,0)
 ;REPORT CODE: 020
"RTN","RORX020",19,0)
 ;
"RTN","RORX020",20,0)
 ;Called by entry "Renal Function by Range" in ROR REPORT PARAMETERS (#799.34)
"RTN","RORX020",21,0)
 ;
"RTN","RORX020",22,0)
 ;INPUT
"RTN","RORX020",23,0)
 ;  RORTSK     Task number and task parameters
"RTN","RORX020",24,0)
 ;  
"RTN","RORX020",25,0)
 ;  Below is a sample RORTSK input array for utilization in 2003, most recent
"RTN","RORX020",26,0)
 ;  scores, CrCL range from 20 to 50, eGFR range from 30 to 60:
"RTN","RORX020",27,0)
 ;  
"RTN","RORX020",28,0)
 ;  RORTSK=nnn   (the task number)
"RTN","RORX020",29,0)
 ;  RORTSK("EP")="$$RFRANGE^RORX020"
"RTN","RORX020",30,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","END")=3031231
"RTN","RORX020",31,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","START")=3030101
"RTN","RORX020",32,0)
 ;  RORTSK("PARAMS","ICD9FILT","A","FILTER")="ALL"
"RTN","RORX020",33,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1)=""
"RTN","RORX020",34,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"H")=50
"RTN","RORX020",35,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"L")=20
"RTN","RORX020",36,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2)=""
"RTN","RORX020",37,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"H")=60
"RTN","RORX020",38,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"L")=30
"RTN","RORX020",39,0)
 ;  RORTSK("PARAMS","OPTIONS","A","COMPLETE")=1
"RTN","RORX020",40,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX020",41,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_AFTER")=1
"RTN","RORX020",42,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_BEFORE")=1
"RTN","RORX020",43,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_DURING")=1
"RTN","RORX020",44,0)
 ;  RORTSK("PARAMS","REGIEN")=1
"RTN","RORX020",45,0)
 ;  
"RTN","RORX020",46,0)
 ;  If the user selected an 'as of' date = 12/31/2005:
"RTN","RORX020",47,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX020",48,0)
 ;  is replaced with:  
"RTN","RORX020",49,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MAX_DATE")=3051231
"RTN","RORX020",50,0)
 ;
"RTN","RORX020",51,0)
 ;OUTPUT
"RTN","RORX020",52,0)
 ;  <0  Error code
"RTN","RORX020",53,0)
 ;   0  Ok
"RTN","RORX020",54,0)
 ;************************************************************************
"RTN","RORX020",55,0)
RFRANGE(RORTSK) ;
"RTN","RORX020",56,0)
 N RORDATA       ; array to hold ROR data and summary totals
"RTN","RORX020",57,0)
 N RORREG        ; Registry IEN
"RTN","RORX020",58,0)
 N RORSDT        ; report start date
"RTN","RORX020",59,0)
 N ROREDT        ; report end date
"RTN","RORX020",60,0)
 N RORPTIEN      ; IEN of patient in the ROR registry
"RTN","RORX020",61,0)
 N DFN           ; DFN of patient in the PATIENT file (#2)
"RTN","RORX020",62,0)
 N RORLC         ; sub-file and array of LOINC codes to search Lab data
"RTN","RORX020",63,0)
 ;
"RTN","RORX020",64,0)
 N REPORT,RC,I,SFLAGS,PARAMS
"RTN","RORX020",65,0)
 ;--- Establish the root XML Node of the report and put into output
"RTN","RORX020",66,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX020",67,0)
 Q:REPORT<0 REPORT
"RTN","RORX020",68,0)
 ;
"RTN","RORX020",69,0)
 ;--- Get registry IEN
"RTN","RORX020",70,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX020",71,0)
 ;
"RTN","RORX020",72,0)
 ;--- Set standard report parameters data into output:
"RTN","RORX020",73,0)
 ;registry, comment, patients (before, during, after), options (summary vs.
"RTN","RORX020",74,0)
 ;complete), other registries, and other diagnoses
"RTN","RORX020",75,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS) Q:PARAMS<0 PARAMS
"RTN","RORX020",76,0)
 ;
"RTN","RORX020",77,0)
 ;--- Add range parameters to output
"RTN","RORX020",78,0)
 S RC=$$PARAMS^RORX020A(PARAMS,.RORDATA) Q:RC<0 RC
"RTN","RORX020",79,0)
 ;
"RTN","RORX020",80,0)
 ;--- Put report header data into output:
"RTN","RORX020",81,0)
 ;report creation date, task number, last registry update date, and
"RTN","RORX020",82,0)
 ;last data extraction date
"RTN","RORX020",83,0)
 S RC=$$HEADER^RORX020A(REPORT,.RORTSK) Q:RC<0 RC
"RTN","RORX020",84,0)
 ;
"RTN","RORX020",85,0)
 ;--- Get Renal ranges requested
"RTN","RORX020",86,0)
 ;I=1 ==> report = CrCL      I=2 ==> report = eGFR by MDRD
"RTN","RORX020",87,0)
 S I=0 F  S I=$O(RORTSK("PARAMS","LRGRANGES","C",I)) Q:I=""  D
"RTN","RORX020",88,0)
 . S RORDATA("L",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"L")) ;low range
"RTN","RORX020",89,0)
 . S RORDATA("H",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"H")) ;high range
"RTN","RORX020",90,0)
 ;
"RTN","RORX020",91,0)
 ;--- Get GMRV VITAL TYPE pointer for HEIGHT
"RTN","RORX020",92,0)
 S RORDATA("HGTP")=$$GETIEN^GMVGETVT("HEIGHT",1)
"RTN","RORX020",93,0)
 I '$G(RORDATA("HGTP")) Q -1
"RTN","RORX020",94,0)
 ;
"RTN","RORX020",95,0)
 ;--- Get Max Date  OUTPUT: RORDATA("DATE")  - Max Date for test scores
"RTN","RORX020",96,0)
 S RORDATA("DATE")=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORX020",97,0)
 I $G(RORDATA("DATE"))="" S RORDATA("DATE")=DT
"RTN","RORX020",98,0)
 ;
"RTN","RORX020",99,0)
 ;--- Summary vs. complete report requested
"RTN","RORX020",100,0)
 S RORDATA("COMPLETE")=0 ;default to 'summary' only
"RTN","RORX020",101,0)
 I $$PARAM^RORTSK01("OPTIONS","COMPLETE") S RORDATA("COMPLETE")=1
"RTN","RORX020",102,0)
 ;
"RTN","RORX020",103,0)
 ;--- Set the number of Renal ranges and initialize their values to 0
"RTN","RORX020",104,0)
 S RORDATA("RCNT")=5 D INIT^RORX020A(.RORDATA)
"RTN","RORX020",105,0)
 ;
"RTN","RORX020",106,0)
 ;--- Create 'patients' table
"RTN","RORX020",107,0)
 N RORBODY S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX020",108,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX020",109,0)
 ;
"RTN","RORX020",110,0)
 ;--- Check utilization
"RTN","RORX020",111,0)
 N CNT,ECNT,UTSDT,UTEDT,SKIPSDT,SKIPEDT
"RTN","RORX020",112,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX020",113,0)
 ; Utilization date range is always sent
"RTN","RORX020",114,0)
 S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX020",115,0)
 S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX020",116,0)
 ; Combined date range
"RTN","RORX020",117,0)
 S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,$G(UTSDT))
"RTN","RORX020",118,0)
 S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,$G(UTEDT))
"RTN","RORX020",119,0)
 ;
"RTN","RORX020",120,0)
 ;--- Number of patients in the registry - used for calculating the
"RTN","RORX020",121,0)
 ;task progress percentage (shown on the GUI screen)
"RTN","RORX020",122,0)
 N RORPTCNT S RORPTCNT=$$REGSIZE^RORUTL02(+RORREG) S:RORPTCNT<0 RORPTCNT=0
"RTN","RORX020",123,0)
 ;
"RTN","RORX020",124,0)
 ;--- LOINC codes for Creatinine
"RTN","RORX020",125,0)
 ;create list for future comparison
"RTN","RORX020",126,0)
 S RORDATA("LOINC")=";15045-8;21232-4;2160-0;"
"RTN","RORX020",127,0)
 ;set up array for future call to Lab API
"RTN","RORX020",128,0)
 S RORLC="CH" ;chemistry sub-file to search in #63
"RTN","RORX020",129,0)
 S RORLC(1)="15045-8^LN" ;Creatinine LOINC
"RTN","RORX020",130,0)
 S RORLC(2)="21232-4^LN" ;Creatinine LOINC
"RTN","RORX020",131,0)
 S RORLC(3)="2160-0^LN"  ;Creatinine LOINC
"RTN","RORX020",132,0)
 ;
"RTN","RORX020",133,0)
 ;--- RACE code 2054-5 = 'black or african american' in RACE file (IEN=9)
"RTN","RORX020",134,0)
 S RORDATA("BAM")=";9;"
"RTN","RORX020",135,0)
 ;
"RTN","RORX020",136,0)
 ;--- Get registry records
"RTN","RORX020",137,0)
 N RCC,FLAG,SKIP,TMP
"RTN","RORX020",138,0)
 S (CNT,RORPTIEN,RC)=0
"RTN","RORX020",139,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX020",140,0)
 F  S RORPTIEN=$O(^RORDATA(798,"AC",RORREG,RORPTIEN))  Q:RORPTIEN'>0  D  Q:RC<0
"RTN","RORX020",141,0)
 . ;--- Calculate 'progress' for the GUI display
"RTN","RORX020",142,0)
 . S TMP=$S(RORPTCNT>0:CNT/RORPTCNT,1:"")
"RTN","RORX020",143,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX020",144,0)
 . S CNT=CNT+1
"RTN","RORX020",145,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX020",146,0)
 . Q:$$SKIP^RORXU005(RORPTIEN,SFLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX020",147,0)
 . ;--- Get the patient DFN
"RTN","RORX020",148,0)
 . S DFN=$$PTIEN^RORUTL01(RORPTIEN)  Q:DFN'>0
"RTN","RORX020",149,0)
 . ;--- Check if patient has passed the ICD9 filter
"RTN","RORX020",150,0)
 . S RCC=0
"RTN","RORX020",151,0)
 . I FLAG'="ALL" D
"RTN","RORX020",152,0)
 . . S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX020",153,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX020",154,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX020",155,0)
 . ;
"RTN","RORX020",156,0)
 . ;--- Check for utilization in the corresponding 'utilization' date range
"RTN","RORX020",157,0)
 . S SKIP=0 I $G(UTSDT)>0 D
"RTN","RORX020",158,0)
 .. N UTIL K TMP S TMP("ALL")=1
"RTN","RORX020",159,0)
 .. S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,DFN,.TMP)
"RTN","RORX020",160,0)
 .. I 'UTIL S SKIP=1
"RTN","RORX020",161,0)
 . ;--- Skip the patient if they have no utilization in the range
"RTN","RORX020",162,0)
 . I $G(SKIP) Q
"RTN","RORX020",163,0)
 . ;
"RTN","RORX020",164,0)
 . ;--- For each patient, process the registry record and create report
"RTN","RORX020",165,0)
 . I $$PATIENT(DFN,RORBODY,.RORDATA,RORPTIEN,.RORLC)<0 S ECNT=ECNT+1 ;error count
"RTN","RORX020",166,0)
 ;
"RTN","RORX020",167,0)
 ;--- If user selected eGFR by MDRD (ID=2), create summary report
"RTN","RORX020",168,0)
 I RORDATA("IDLST")[2 S RC=$$SUMMARY^RORX020A(RORTSK,REPORT,.RORDATA)
"RTN","RORX020",169,0)
 Q:RC<0 RC
"RTN","RORX020",170,0)
 K ^TMP("RORX020",$J),^TMP("ROROUT",$J)
"RTN","RORX020",171,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX020",172,0)
 ;
"RTN","RORX020",173,0)
 ;************************************************************************
"RTN","RORX020",174,0)
 ;ADD THE PATIENT DATA TO THE REPORT
"RTN","RORX020",175,0)
 ;
"RTN","RORX020",176,0)
 ;INPUT
"RTN","RORX020",177,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX020",178,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX020",179,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020",180,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX020",181,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX020",182,0)
 ;
"RTN","RORX020",183,0)
 ;OUTPUT
"RTN","RORX020",184,0)
 ;  1        ok
"RTN","RORX020",185,0)
 ; <0        error
"RTN","RORX020",186,0)
 ;************************************************************************
"RTN","RORX020",187,0)
PATIENT(DFN,PTAG,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX020",188,0)
 ;calculate Renal Function scores
"RTN","RORX020",189,0)
 I $$CALCRF(DFN,.RORDATA,RORPTIEN,.RORLC)<0 Q 1  ;quit if patient data not available
"RTN","RORX020",190,0)
 I '$$INRANGE^RORX020A(.RORDATA) Q 1  ;quit if score(s) out of requested range
"RTN","RORX020",191,0)
 ;if eGFR by MDRD requested, add 1 to appropriate category count
"RTN","RORX020",192,0)
 I RORDATA("IDLST")[2 D EGFRCAT^RORX020A(.RORDATA)
"RTN","RORX020",193,0)
 Q:'RORDATA("COMPLETE") 1  ;continue only if 'complete' report is requested
"RTN","RORX020",194,0)
 ;--- Get patient data and put into the report
"RTN","RORX020",195,0)
 N VADM,VA,RORDOD,TTAG,RTAG
"RTN","RORX020",196,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX020",197,0)
 ;--- The <PATIENT> tag
"RTN","RORX020",198,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTAG,,DFN)
"RTN","RORX020",199,0)
 I PTAG<0 Q PTAG
"RTN","RORX020",200,0)
 ;--- Patient Name
"RTN","RORX020",201,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX020",202,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX020",203,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX020",204,0)
 ;--- Date of death
"RTN","RORX020",205,0)
 S RORDOD=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX020",206,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$G(RORDOD),PTAG,1)
"RTN","RORX020",207,0)
 ;--- RENAL DATA tag
"RTN","RORX020",208,0)
 S RTAG=$$ADDVAL^RORTSK11(RORTSK,"RNLDATA",,PTAG)
"RTN","RORX020",209,0)
 Q:RTAG<0 RTAG
"RTN","RORX020",210,0)
 ;---  CR Test Tag
"RTN","RORX020",211,0)
 S TTAG=$$ADDVAL^RORTSK11(RORTSK,"TEST",,RTAG)
"RTN","RORX020",212,0)
 Q:TTAG<0 TTAG
"RTN","RORX020",213,0)
 ;---  Date Cr Test Taken
"RTN","RORX020",214,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("CRDATE")),TTAG)
"RTN","RORX020",215,0)
 ;---  Cr Test Value
"RTN","RORX020",216,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("CR")),TTAG)
"RTN","RORX020",217,0)
 ;--- Height tag
"RTN","RORX020",218,0)
 S TTAG=$$ADDVAL^RORTSK11(RORTSK,"HEIGHT",,RTAG)
"RTN","RORX020",219,0)
 Q:TTAG<0 TTAG
"RTN","RORX020",220,0)
 ;---  Date Height Taken
"RTN","RORX020",221,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("HDATE")),TTAG)
"RTN","RORX020",222,0)
 ;---  Height value
"RTN","RORX020",223,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("HGT")),TTAG)
"RTN","RORX020",224,0)
 ;---  Calculated CRCL
"RTN","RORX020",225,0)
 I RORDATA("IDLST")[1 D ADDVAL^RORTSK11(RORTSK,"CRCL",$G(RORDATA("SCORE",1)),RTAG)
"RTN","RORX020",226,0)
 ;---  Calculated eGFR
"RTN","RORX020",227,0)
 I RORDATA("IDLST")[2 D ADDVAL^RORTSK11(RORTSK,"EGFR",$G(RORDATA("SCORE",2)),RTAG)
"RTN","RORX020",228,0)
 ;
"RTN","RORX020",229,0)
 Q ($S(TTAG<0:TTAG,1:1))
"RTN","RORX020",230,0)
 ;
"RTN","RORX020",231,0)
 ;************************************************************************
"RTN","RORX020",232,0)
 ;CALCULATE THE RENAL FUNCTION VALUE(S)
"RTN","RORX020",233,0)
 ;Note1: If no range has been passed in and a patient has a Creatinine 
"RTN","RORX020",234,0)
 ;       result > 12, the patient will be listed on the report with an 
"RTN","RORX020",235,0)
 ;       asterisk (*) next to the test result value, but no scores will be 
"RTN","RORX020",236,0)
 ;       calculated.
"RTN","RORX020",237,0)
 ;Note2: If no range has been passed in and a patient has an invalid Height
"RTN","RORX020",238,0)
 ;       result, the patient will be listed on the report with an asterisk (*)
"RTN","RORX020",239,0)
 ;       next to the test result value, but no CrCl score will be calculated. 
"RTN","RORX020",240,0)
 ;Note3: If a range has been passed in and the patient has a Creatinine result 
"RTN","RORX020",241,0)
 ;       >12, the patient will NOT be listed on the report.
"RTN","RORX020",242,0)
 ;
"RTN","RORX020",243,0)
 ;INPUT
"RTN","RORX020",244,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX020",245,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020",246,0)
 ;           RORDATA("BAM") - 'black' or 'african american' race pointers
"RTN","RORX020",247,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX020",248,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX020",249,0)
 ;  
"RTN","RORX020",250,0)
 ;OUTPUT
"RTN","RORX020",251,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020",252,0)
 ;  1        Patient will be listed on report
"RTN","RORX020",253,0)
 ; -1        Patient will not be listed on report
"RTN","RORX020",254,0)
 ;************************************************************************
"RTN","RORX020",255,0)
CALCRF(DFN,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX020",256,0)
 N RORID,RORST,ROREND,RORLAB,RORMSG,RC
"RTN","RORX020",257,0)
 S RORDATA("CALC")=1 ;default - the score for this patient should be calculated
"RTN","RORX020",258,0)
 K RORDATA("SCORE",1),RORDATA("SCORE",2) ;test scores
"RTN","RORX020",259,0)
 K RORDATA("CVAL"),RORDATA("CINV"),RORDATA("CR"),RORDATA("CRDATE") ;Cr data
"RTN","RORX020",260,0)
 K RORDATA("HGT"),RORDATA("HDATE") ;height data
"RTN","RORX020",261,0)
 ;get patient ICN or SSN
"RTN","RORX020",262,0)
 S RORID=$$PTID^RORUTL02(DFN)
"RTN","RORX020",263,0)
 Q:'$G(RORID) -1
"RTN","RORX020",264,0)
 ;---SET UP LAB API INPUT/OUTPUT PARMS---
"RTN","RORX020",265,0)
 S RORST="2000101^CD" ;start date 1/1/1900
"RTN","RORX020",266,0)
 S ROREND=$G(RORDATA("DATE"))\1 ;end date
"RTN","RORX020",267,0)
 ;add 1 to the end date so the Lab API INCLUDES tests on that date
"RTN","RORX020",268,0)
 N X1,X2,X3 S X1=ROREND,X2=1 D C^%DTC S ROREND=X K X,X1,X2
"RTN","RORX020",269,0)
 S ROREND=ROREND_"^CD"
"RTN","RORX020",270,0)
 S RORLAB=$NA(^TMP("ROROUT",$J)) ;lab API output global
"RTN","RORX020",271,0)
 K RORMSG,@RORLAB ;initialize prior to call
"RTN","RORX020",272,0)
 ;---CALL LAB API USING COLLECTION DATE AND LOINC CODE LIST---
"RTN","RORX020",273,0)
 S RC=$$GCPR^LA7QRY(RORID,RORST,ROREND,.RORLC,"*",.RORMSG,RORLAB)
"RTN","RORX020",274,0)
 I $G(RC)="",$D(RORMSG)>1  D  ;quit if error returned
"RTN","RORX020",275,0)
 . N ERR,I,LST,TMP
"RTN","RORX020",276,0)
 . S (ERR,LST)=""
"RTN","RORX020",277,0)
 . F I=1:1  S ERR=$O(RORMSG(ERR))  Q:ERR=""  D
"RTN","RORX020",278,0)
 . . S LST=LST_","_ERR,TMP=RORMSG(ERR)
"RTN","RORX020",279,0)
 . . K RORMSG(ERR)  S RORMSG(I)=TMP
"RTN","RORX020",280,0)
 . S LST=$P(LST,",",2,999)  Q:(LST=3)!(LST=99)
"RTN","RORX020",281,0)
 . S RC=$$ERROR^RORERR(-27,,.RORMSG,RORPTIEN)
"RTN","RORX020",282,0)
 I RC<0 Q -1
"RTN","RORX020",283,0)
 ;Note: the Lab API returns data in the form of HL7 segments
"RTN","RORX020",284,0)
 N TMP,RORSPEC,RORVAL,RORNODE,RORSEG,SEGTYPE,RORLOINC,RORDONE,RORDATE,FS
"RTN","RORX020",285,0)
 S FS="|" ;default HL7 field separator for lab data
"RTN","RORX020",286,0)
 S RORDONE=0 ;flag to indicate if 'valid' data has been found
"RTN","RORX020",287,0)
 S RORNODE=0 F  S RORNODE=$O(^TMP("ROROUT",$J,RORNODE)) Q:((RORNODE="")!(RORDONE))  D
"RTN","RORX020",288,0)
 . S RORSEG=$G(^TMP("ROROUT",$J,RORNODE)) ;get entire HL7 segment
"RTN","RORX020",289,0)
 . S SEGTYPE=$P(RORSEG,FS,1) ;get segment type (PID,OBR,OBX,etc.)
"RTN","RORX020",290,0)
 . Q:SEGTYPE'="OBX"  ;we want OBX segments only
"RTN","RORX020",291,0)
 . S RORSPEC=$P($P(RORSEG,FS,4),U,2) ;specimen type string (urine, serum, etc.)
"RTN","RORX020",292,0)
 . S RORSPEC=":"_RORSPEC_":" ;append ":" as prefix and suffix
"RTN","RORX020",293,0)
 . I ((RORSPEC[":UA:")!(RORSPEC[":UR:")) Q  ;quit if specimen type is urine
"RTN","RORX020",294,0)
 . S RORLOINC=$P($P(RORSEG,FS,4),"^",1) ;get LOINC code
"RTN","RORX020",295,0)
 . Q:(RORDATA("LOINC")'[(";"_RORLOINC_";"))  ;LOINC must match Creatinine
"RTN","RORX020",296,0)
 . ;test result found
"RTN","RORX020",297,0)
 . S RORVAL=$P(RORSEG,FS,6) ;Creatinine test result value
"RTN","RORX020",298,0)
 . Q:($G(RORVAL)'>0)  ;quit if no value
"RTN","RORX020",299,0)
 . S RORDATE=$$HL7TFM^XLFDT($P(RORSEG,FS,15)) ;get date collected
"RTN","RORX020",300,0)
 . S RORDATE=RORDATE\1
"RTN","RORX020",301,0)
 . ;store 'valid' (12 or less) value if no 'valid' value has been stored yet
"RTN","RORX020",302,0)
 . I RORVAL'>12,$O(RORDATA("CVAL",0))="" S RORDATA("CVAL",RORDATE)=RORVAL,RORDONE=1 Q
"RTN","RORX020",303,0)
 . ;store 'invalid' (>12) value if no other value has been stored
"RTN","RORX020",304,0)
 . I RORVAL>12,$O(RORDATA("CVAL",0))="",$O(RORDATA("CINV",0))="" D
"RTN","RORX020",305,0)
 .. S RORDATA("CINV",RORDATE)=$G(RORVAL)_"*" ;mark as 'invalid' value
"RTN","RORX020",306,0)
 ;
"RTN","RORX020",307,0)
 ;quit if patient had no Creatinine results (valid or invalid)
"RTN","RORX020",308,0)
 Q:(($D(RORDATA("CVAL"))'>1)&($D(RORDATA("CINV"))'>1)) -1
"RTN","RORX020",309,0)
 ;
"RTN","RORX020",310,0)
 ;--- set Creatinine result and date into data array
"RTN","RORX020",311,0)
 N DATE
"RTN","RORX020",312,0)
 S DATE=$O(RORDATA("CVAL",0)) ;'valid' Cr date
"RTN","RORX020",313,0)
 I $G(DATE)="" D  ;if no 'valid' Cr value, get 'invalid' value
"RTN","RORX020",314,0)
 . S DATE=$O(RORDATA("CINV",0))
"RTN","RORX020",315,0)
 . S RORDATA("CVAL",DATE)=$G(RORDATA("CINV",DATE))
"RTN","RORX020",316,0)
 . S RORDATA("CALC")=0 ;no score calculations can be done on 'invalid' data
"RTN","RORX020",317,0)
 S RORDATA("CR")=$G(RORDATA("CVAL",DATE))
"RTN","RORX020",318,0)
 ;S RORDATA("CRDATE")=$P((9999999-$G(DATE)),".",1)
"RTN","RORX020",319,0)
 S RORDATA("CRDATE")=DATE\1
"RTN","RORX020",320,0)
 ;
"RTN","RORX020",321,0)
 ;--- get height date and height IEN
"RTN","RORX020",322,0)
 N RORHTDT,RORHTIEN,RORARY
"RTN","RORX020",323,0)
 S RORDATE=RORDATA("DATE")
"RTN","RORX020",324,0)
 S RORHTDT=$O(^PXRMINDX(120.5,"PI",DFN,RORDATA("HGTP"),RORDATE),-1) ;height date
"RTN","RORX020",325,0)
 Q:$G(RORHTDT)="" -1
"RTN","RORX020",326,0)
 S RORHTIEN=$O(^PXRMINDX(120.5,"PI",DFN,RORDATA("HGTP"),RORHTDT,0)) ;height IEN
"RTN","RORX020",327,0)
 Q:$G(RORHTIEN)="" -1
"RTN","RORX020",328,0)
 ;--- call API to get get height measurement
"RTN","RORX020",329,0)
 K RORARY D EN^GMVPXRM(.RORARY,RORHTIEN,"I")
"RTN","RORX020",330,0)
 S RORDATA("HGT")=$G(RORARY(7)),RORDATA("HDATE")=$P(RORHTDT,".",1)
"RTN","RORX020",331,0)
 I ($G(RORDATA("HGT"))'>0) Q -1  ;quit if height not > 0
"RTN","RORX020",332,0)
 ;strip out characters "IN", ",E"
"RTN","RORX020",333,0)
 I ((RORDATA("HGT")["IN")!(RORDATA("HGT")[",E")) S RORDATA("HGT")=+RORDATA("HGT")
"RTN","RORX020",334,0)
 ;mark as 'invalid' if height contains "CM", or "'" or double quote
"RTN","RORX020",335,0)
 I ((RORDATA("HGT")["CM")!(RORDATA("HGT")["'")!(RORDATA("HGT")["""")) D
"RTN","RORX020",336,0)
 . I RORDATA("IDLST")[1 S RORDATA("CALC")=0 ;no CrCl calculations can be done on 'invalid' data
"RTN","RORX020",337,0)
 . S RORDATA("HGT")=RORDATA("HGT")_"*" ;mark as 'invalid' value
"RTN","RORX020",338,0)
 ;set CALC flag to 0 and add "*" if invalid height: not between 36 and 96 inches
"RTN","RORX020",339,0)
 I ((RORDATA("HGT")'["*")&((RORDATA("HGT")<36)!(RORDATA("HGT")>96))) D
"RTN","RORX020",340,0)
 . I RORDATA("IDLST")[1 S RORDATA("CALC")=0 ;no CrCl calculations can be done on 'invalid' data
"RTN","RORX020",341,0)
 . S RORDATA("HGT")=RORDATA("HGT")_"*" ;mark as 'invalid' value
"RTN","RORX020",342,0)
 ;
"RTN","RORX020",343,0)
 ;include patient on reports but don't calculate score if no high/low
"RTN","RORX020",344,0)
 ;range passed in and invalid CR data exists
"RTN","RORX020",345,0)
 I RORDATA("CR")["*",RORDATA("RANGE")=0 Q 1
"RTN","RORX020",346,0)
 ;don't include patient on report if range IS passed in and invalid Cr data
"RTN","RORX020",347,0)
 ;exists since neither score can't be calculated
"RTN","RORX020",348,0)
 I RORDATA("CR")["*",RORDATA("RANGE")=1 Q -1
"RTN","RORX020",349,0)
 ;
"RTN","RORX020",350,0)
 ;---CALCULATE RENAL TEST SCORES USING VALID CR VALUE
"RTN","RORX020",351,0)
 ;
"RTN","RORX020",352,0)
 ;--- get patient race, gender, age, and dob using DEM^VADPT
"RTN","RORX020",353,0)
 N RORDEM,RORGENDER,RORRACE,RORM,RORF,RORDOB,RORAGE,VAROOT
"RTN","RORX020",354,0)
 S (RORF,RORM)=0
"RTN","RORX020",355,0)
 S VAROOT="RORDEM" D DEM^VADPT
"RTN","RORX020",356,0)
 S RORGENDER=$P($G(RORDEM(5)),U,1) ;M or F
"RTN","RORX020",357,0)
 Q:$G(RORGENDER)="" -1
"RTN","RORX020",358,0)
 S:RORGENDER="F" RORF=1 S:RORGENDER="M" RORM=1
"RTN","RORX020",359,0)
 ;--- get age
"RTN","RORX020",360,0)
 ;if 'most recent' date, use age returned from DEM^VADPT
"RTN","RORX020",361,0)
 ;if not 'most recent', get dob and calculate age
"RTN","RORX020",362,0)
 I $$PARAM^RORTSK01("OPTIONS","MOST_RECENT") S RORAGE=RORDEM(4)
"RTN","RORX020",363,0)
 E  D
"RTN","RORX020",364,0)
 . S RORDOB=$P($G(RORDEM(3)),U,1) ;date of birth
"RTN","RORX020",365,0)
 . S RORAGE=RORDATE-RORDOB ;age using 'as of' date
"RTN","RORX020",366,0)
 . S RORAGE=$S($L(RORAGE)=6:$E(RORAGE,1,2),1:$E(RORAGE,1,3))
"RTN","RORX020",367,0)
 ;
"RTN","RORX020",368,0)
 ;--- Cockcroft-Gault CrCl ---
"RTN","RORX020",369,0)
 ;Calculation: (140-age) x ideal weight in kg (*.85 if female)/(creatinine*72)
"RTN","RORX020",370,0)
 ;Ideal weight in kg:
"RTN","RORX020",371,0)
 ;  males   = 51.65+(1.85*(height-60))
"RTN","RORX020",372,0)
 ;  females = 48.67+(1.65*(height-60))
"RTN","RORX020",373,0)
 ;  
"RTN","RORX020",374,0)
 N RORMIW,RORFIW,MULT2,TMP
"RTN","RORX020",375,0)
 D
"RTN","RORX020",376,0)
 . ;if male, use this calculation
"RTN","RORX020",377,0)
 . I RORM=1 D  ;get male ideal weight in kg 
"RTN","RORX020",378,0)
 .. S MULT2=1 ;no additional multiplier if male
"RTN","RORX020",379,0)
 .. Q:RORDATA("HGT")["*"  ;quit if invalid height value
"RTN","RORX020",380,0)
 .. S RORMIW=51.65+(1.85*(RORDATA("HGT")-60)) ;male ideal weight
"RTN","RORX020",381,0)
 .. S TMP=(140-RORAGE)*RORMIW/(RORDATA("CR")*72) ;CrCl score
"RTN","RORX020",382,0)
 . ;if female, use this calculation
"RTN","RORX020",383,0)
 . I RORF=1 D
"RTN","RORX020",384,0)
 .. S MULT2=.742 ;set multiplier for eGFR calculation if female
"RTN","RORX020",385,0)
 .. Q:RORDATA("HGT")["*"  ;quit if invalid height value
"RTN","RORX020",386,0)
 .. S RORFIW=48.67+(1.65*(RORDATA("HGT")-60)) ;female ideal weight
"RTN","RORX020",387,0)
 .. S TMP=(140-RORAGE)*RORFIW*.85/(RORDATA("CR")*72) ;CrCl score
"RTN","RORX020",388,0)
 . ;
"RTN","RORX020",389,0)
 . I RORDATA("IDLST")[1 S RORDATA("SCORE",1)=$S($G(TMP)>0:$J($G(TMP),0,0),1:"") ;round CrCl score to whole number
"RTN","RORX020",390,0)
 ;
"RTN","RORX020",391,0)
 ;--- eGFR by MDRD ---
"RTN","RORX020",392,0)
 ;default race multiplier set to 1 (i.e. no multiplier)
"RTN","RORX020",393,0)
 N RORCNT,MULT1,I S MULT1=1
"RTN","RORX020",394,0)
 D
"RTN","RORX020",395,0)
 . ;get count of race values (could be more than 1 entry)
"RTN","RORX020",396,0)
 . S RORCNT=$G(RORDEM(12)) I RORCNT>0 D
"RTN","RORX020",397,0)
 .. ;check each race value for match on 'black or 'african american'
"RTN","RORX020",398,0)
 .. F I=1:1:RORCNT D  Q:MULT1=1.212
"RTN","RORX020",399,0)
 ... S RORRACE=$P($G(RORDEM(12,I)),U,1) ;race pointer value
"RTN","RORX020",400,0)
 ... ;if any of the race values are black or african american, set multiplier
"RTN","RORX020",401,0)
 ... I $G(RORDATA("BAM"))[(";"_$G(RORRACE)_";") S MULT1=1.212
"RTN","RORX020",402,0)
 . ;--- calculate eGFR by MDRD score  Calculation:
"RTN","RORX020",403,0)
 . ;(175 * (creatinine ^ -1.154) * (age ^ -.203) *1.212 (if black) * .742 (if female)
"RTN","RORX020",404,0)
 . S TMP=175*($$PWR^XLFMTH(RORDATA("CR"),-1.154))*($$PWR^XLFMTH(RORAGE,-0.203))*MULT1*MULT2 ;eGFR
"RTN","RORX020",405,0)
 . ;
"RTN","RORX020",406,0)
 . I RORDATA("IDLST")[2 S RORDATA("SCORE",2)=$J($G(TMP),0,0) ;round eGFR score to whole number
"RTN","RORX020",407,0)
 ;
"RTN","RORX020",408,0)
 Q 1
"RTN","RORX020A")
0^15^B38074904^n/a
"RTN","RORX020A",1,0)
RORX020A ;BPOIFO/ACS - RENAL FUNCTION BY RANGE (CONT.) ;11/1/09
"RTN","RORX020A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10**;Feb 17, 2006;Build 32
"RTN","RORX020A",3,0)
 ;
"RTN","RORX020A",4,0)
 Q
"RTN","RORX020A",5,0)
 ;
"RTN","RORX020A",6,0)
 ;************************************************************************
"RTN","RORX020A",7,0)
 ;ADD THE HEADERS TO THE REPORT (EXTRINSIC FUNCTION)
"RTN","RORX020A",8,0)
 ;
"RTN","RORX020A",9,0)
 ;INPUT
"RTN","RORX020A",10,0)
 ;  PARTAG  Reference IEN to the 'report' parent XML tag
"RTN","RORX020A",11,0)
 ;
"RTN","RORX020A",12,0)
 ;OUTPUT
"RTN","RORX020A",13,0)
 ;  <0      error
"RTN","RORX020A",14,0)
 ;  >0      'Header' XML tag number or error code
"RTN","RORX020A",15,0)
 ;************************************************************************
"RTN","RORX020A",16,0)
HEADER(PARTAG,RORTSK) ;
"RTN","RORX020A",17,0)
 N HEADER,RC,COL,COLUMNS,TMP S RC=0
"RTN","RORX020A",18,0)
 ;call to $$HEADER^RORXU002 will populate the report created date, task number,
"RTN","RORX020A",19,0)
 ;last registry update, and last data extraction.
"RTN","RORX020A",20,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX020A",21,0)
 Q:HEADER<0 HEADER
"RTN","RORX020A",22,0)
 ;manually build the table definition(s) listed below
"RTN","RORX020A",23,0)
 ;PATIENTS(#,NAME,LAST4,DOD,TEST,DATE,RESULT,CRCL,EGFR)
"RTN","RORX020A",24,0)
 S COLUMNS=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORX020A",25,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"NAME","PATIENTS")
"RTN","RORX020A",26,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"HEADER","1")
"RTN","RORX020A",27,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"FOOTER","1")
"RTN","RORX020A",28,0)
 ;--- Required columns
"RTN","RORX020A",29,0)
 F COL="#","NAME","LAST4","DOD","TEST","DATE","RESULT"  D
"RTN","RORX020A",30,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX020A",31,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX020A",32,0)
 ;--- Additional columns
"RTN","RORX020A",33,0)
 I RORDATA("IDLST")[1 D
"RTN","RORX020A",34,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX020A",35,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","CRCL")
"RTN","RORX020A",36,0)
 I RORDATA("IDLST")[2 D
"RTN","RORX020A",37,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX020A",38,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","EGFR")
"RTN","RORX020A",39,0)
 ;---
"RTN","RORX020A",40,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX020A",41,0)
 ;
"RTN","RORX020A",42,0)
 ;*****************************************************************************
"RTN","RORX020A",43,0)
 ;INITIALIZE THE RANGE COUNTS TO 0
"RTN","RORX020A",44,0)
 ;
"RTN","RORX020A",45,0)
 ;INPUT
"RTN","RORX020A",46,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020A",47,0)
 ;           RORDATA("RCNT") Number of ranges/groupings to initialize
"RTN","RORX020A",48,0)
 ;*****************************************************************************
"RTN","RORX020A",49,0)
INIT(RORDATA) ;
"RTN","RORX020A",50,0)
 I $G(RORDATA("RCNT"))="" Q
"RTN","RORX020A",51,0)
 N I
"RTN","RORX020A",52,0)
 F I=1:1:RORDATA("RCNT") D
"RTN","RORX020A",53,0)
 . S RORDATA("NP",I)=0
"RTN","RORX020A",54,0)
 Q
"RTN","RORX020A",55,0)
 ;
"RTN","RORX020A",56,0)
 ;*****************************************************************************
"RTN","RORX020A",57,0)
 ;OUTPUT REPORT 'RANGE' PARAMETERS, SET UP REPORT ID LIST (EXTRINISIC FUNCTION)
"RTN","RORX020A",58,0)
 ;
"RTN","RORX020A",59,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX020A",60,0)
 ;
"RTN","RORX020A",61,0)
 ; Return Values:
"RTN","RORX020A",62,0)
 ;        RORDATA("IDLST") - list of IDs for tests requested
"RTN","RORX020A",63,0)
 ;        RORDATA("RANGE") - 1 if range passed in for either test, else 0
"RTN","RORX020A",64,0)
 ;       <0  Error code
"RTN","RORX020A",65,0)
 ;        0  Ok
"RTN","RORX020A",66,0)
 ;*****************************************************************************
"RTN","RORX020A",67,0)
PARAMS(PARTAG,RORDATA) ;
"RTN","RORX020A",68,0)
 N PARAMS,DESC,TMP,RC,RANGE S RC=0
"RTN","RORX020A",69,0)
 S RORDATA("RANGE")=0 ;initialize to 'no range passed in'
"RTN","RORX020A",70,0)
 ;--- Lab test ranges
"RTN","RORX020A",71,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORX020A",72,0)
 . N GRC,ELEMENT,NODE,RTAG,RANGE
"RTN","RORX020A",73,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX020A",74,0)
 . S RTAG=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGES",,PARTAG)
"RTN","RORX020A",75,0)
 . S (GRC,RC)=0
"RTN","RORX020A",76,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORX020A",77,0)
 . . S RANGE=0,DESC=$$RTEXT(GRC,.RORDATA)
"RTN","RORX020A",78,0)
 . . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGE",DESC,RTAG)
"RTN","RORX020A",79,0)
 . . I ELEMENT<0 S RC=ELEMENT Q
"RTN","RORX020A",80,0)
 . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"ID",GRC)
"RTN","RORX020A",81,0)
 . . ;add the user-requested test ID to the test ID 'list'
"RTN","RORX020A",82,0)
 . . S RORDATA("IDLST")=$G(RORDATA("IDLST"))_$S($G(RORDATA("IDLST"))'="":","_GRC,1:GRC)
"RTN","RORX020A",83,0)
 . . ;--- Process the range values
"RTN","RORX020A",84,0)
 . . S TMP=$G(@NODE@(GRC,"L"))
"RTN","RORX020A",85,0)
 . . I TMP'="" D  S RANGE=1
"RTN","RORX020A",86,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"LOW",TMP)
"RTN","RORX020A",87,0)
 . . S TMP=$G(@NODE@(GRC,"H"))
"RTN","RORX020A",88,0)
 . . I TMP'="" D  S RANGE=1
"RTN","RORX020A",89,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"HIGH",TMP)
"RTN","RORX020A",90,0)
 . . I RANGE D 
"RTN","RORX020A",91,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"RANGE",1)
"RTN","RORX020A",92,0)
 . . . S RORDATA("RANGE")=1
"RTN","RORX020A",93,0)
 ;--- Success
"RTN","RORX020A",94,0)
 ;if user didn't select any tests, default to both tests
"RTN","RORX020A",95,0)
 I $G(RORDATA("IDLST"))="" S RORDATA("IDLST")="1,2"
"RTN","RORX020A",96,0)
 Q RC
"RTN","RORX020A",97,0)
 ;
"RTN","RORX020A",98,0)
 ;*****************************************************************************
"RTN","RORX020A",99,0)
 ;RETURN RANGE TEXT AND ADD RANGE VALUES TO RORDATA (EXTRINISIC FUNCTION) 
"RTN","RORX020A",100,0)
 ;ID=1: MELD
"RTN","RORX020A",101,0)
 ;ID=2: MELD-Na
"RTN","RORX020A",102,0)
 ;
"RTN","RORX020A",103,0)
 ;INPUT:
"RTN","RORX020A",104,0)
 ;  GRC   Test ID number
"RTN","RORX020A",105,0)
 ;  RORDATA - Array with ROR data
"RTN","RORX020A",106,0)
 ;
"RTN","RORX020A",107,0)
 ;OUTPUT:
"RTN","RORX020A",108,0)
 ;  RORDATA("L",ID) - test ID low range
"RTN","RORX020A",109,0)
 ;  RORDATA("H",ID) - test ID high range
"RTN","RORX020A",110,0)
 ;  Description - <range>
"RTN","RORX020A",111,0)
 ;*****************************************************************************
"RTN","RORX020A",112,0)
RTEXT(GRC,RORDATA) ;
"RTN","RORX020A",113,0)
 N RANGE,TMP
"RTN","RORX020A",114,0)
 S RANGE=""
"RTN","RORX020A",115,0)
 ;--- Range
"RTN","RORX020A",116,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C",GRC))>1 D
"RTN","RORX020A",117,0)
 . ;--- Low
"RTN","RORX020A",118,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"L"))
"RTN","RORX020A",119,0)
 . S RORDATA("L",GRC)=$G(TMP)
"RTN","RORX020A",120,0)
 . S:TMP'="" RANGE=RANGE_" not less than "_TMP
"RTN","RORX020A",121,0)
 . ;--- High
"RTN","RORX020A",122,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"H"))
"RTN","RORX020A",123,0)
 . S RORDATA("H",GRC)=$G(TMP)
"RTN","RORX020A",124,0)
 . I TMP'=""  D:RANGE'=""  S RANGE=RANGE_" not greater than "_TMP
"RTN","RORX020A",125,0)
 . . S RANGE=RANGE_" and"
"RTN","RORX020A",126,0)
 ;--- Description
"RTN","RORX020A",127,0)
 S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC))
"RTN","RORX020A",128,0)
 S:TMP="" TMP="Unknown ("_GRC_")"
"RTN","RORX020A",129,0)
 Q TMP_" - "_$S(RANGE'="":"numeric results"_RANGE,1:"all results")
"RTN","RORX020A",130,0)
 ;
"RTN","RORX020A",131,0)
 ;************************************************************************
"RTN","RORX020A",132,0)
 ;DETERMINE IF THE SCORES ARE WITHIN THE REQUESTED RANGES (EXTRINSIC FUNCTION)
"RTN","RORX020A",133,0)
 ;If not in the range, exclude from report
"RTN","RORX020A",134,0)
 ;
"RTN","RORX020A",135,0)
 ;INPUT:
"RTN","RORX020A",136,0)
 ;  RORDATA  RORDATA("SCORE",I) contains computed test score for test ID 'I'
"RTN","RORX020A",137,0)
 ;
"RTN","RORX020A",138,0)
 ;OUTPUT:
"RTN","RORX020A",139,0)
 ;  1  include on report
"RTN","RORX020A",140,0)
 ;  0  exclude from report
"RTN","RORX020A",141,0)
 ;************************************************************************
"RTN","RORX020A",142,0)
INRANGE(RORDATA) ;
"RTN","RORX020A",143,0)
 ;if range exists for either test, and any result is considered 'invalid',
"RTN","RORX020A",144,0)
 ;then skip the range check and exclude data from report
"RTN","RORX020A",145,0)
 ;I $G(RORDATA("RANGE")),'$G(RORDATA("CALC")) Q 0
"RTN","RORX020A",146,0)
 ;if range does not exist for either test, and any result is considered 'invalid',
"RTN","RORX020A",147,0)
 ;then skip the range check and include data in the report
"RTN","RORX020A",148,0)
 I '$G(RORDATA("RANGE")),'$G(RORDATA("CALC")) Q 1
"RTN","RORX020A",149,0)
 ;
"RTN","RORX020A",150,0)
 ;---Range Check
"RTN","RORX020A",151,0)
 N I,RETURN S RETURN=1 ;default is set to 'within range'
"RTN","RORX020A",152,0)
 S I=0 F  S I=$O(RORDATA("SCORE",I)) Q:I=""  D
"RTN","RORX020A",153,0)
 . I $G(RORDATA("L",I))'="" D
"RTN","RORX020A",154,0)
 .. ;if score is less than 'low' range, do not include on report 
"RTN","RORX020A",155,0)
 .. I $G(RORDATA("SCORE",I))<RORDATA("L",I) S RETURN=0
"RTN","RORX020A",156,0)
 . I $G(RORDATA("H",I))'="" D
"RTN","RORX020A",157,0)
 .. ;if score is higher than 'high' range, do not include on report 
"RTN","RORX020A",158,0)
 .. I $G(RORDATA("SCORE",I))>RORDATA("H",I) S RETURN=0
"RTN","RORX020A",159,0)
 ;
"RTN","RORX020A",160,0)
 Q RETURN
"RTN","RORX020A",161,0)
 ;
"RTN","RORX020A",162,0)
 ;************************************************************************
"RTN","RORX020A",163,0)
 ;ADD 1 TO APPROPRIATE eGFR CATEGORY
"RTN","RORX020A",164,0)
 ;
"RTN","RORX020A",165,0)
 ;INPUT
"RTN","RORX020A",166,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020A",167,0)
 ;************************************************************************
"RTN","RORX020A",168,0)
EGFRCAT(RORDATA) ;
"RTN","RORX020A",169,0)
 I '$G(RORDATA("SCORE",2)) Q  ;quit if no score was calculated
"RTN","RORX020A",170,0)
 I $G(RORDATA("SCORE",2))>89 S RORDATA("NP",1)=$G(RORDATA("NP",1))+1 Q
"RTN","RORX020A",171,0)
 I $G(RORDATA("SCORE",2))>59 S RORDATA("NP",2)=$G(RORDATA("NP",2))+1 Q
"RTN","RORX020A",172,0)
 I $G(RORDATA("SCORE",2))>29 S RORDATA("NP",3)=$G(RORDATA("NP",3))+1 Q
"RTN","RORX020A",173,0)
 I $G(RORDATA("SCORE",2))>14 S RORDATA("NP",4)=$G(RORDATA("NP",4))+1 Q
"RTN","RORX020A",174,0)
 S RORDATA("NP",5)=$G(RORDATA("NP",5))+1 Q
"RTN","RORX020A",175,0)
 Q
"RTN","RORX020A",176,0)
 ;
"RTN","RORX020A",177,0)
 ;*****************************************************************************
"RTN","RORX020A",178,0)
 ;ADD SUMMARY DATA TO THE REPORT (EXTRINSIC FUNCTION)
"RTN","RORX020A",179,0)
 ;
"RTN","RORX020A",180,0)
 ;INPUT
"RTN","RORX020A",181,0)
 ;  RORTSK   Task number and task parameters
"RTN","RORX020A",182,0)
 ;  REPORT   'Report' XML tag number
"RTN","RORX020A",183,0)
 ;  RORDATA  Array with summary data:
"RTN","RORX020A",184,0)
 ;           RORDATA("NP",1) - total count of patients in 1st range
"RTN","RORX020A",185,0)
 ;           RORDATA("NP",2) - total count of patients in 2nd range
"RTN","RORX020A",186,0)
 ;           RORDATA("NP",3) - total count of patients in 3rd range
"RTN","RORX020A",187,0)
 ;           RORDATA("NP",4) - total count of patients in 4th range
"RTN","RORX020A",188,0)
 ;           RORDATA("NP",5) - total count of patients in 5th range
"RTN","RORX020A",189,0)
 ;
"RTN","RORX020A",190,0)
 ;OUTPUT
"RTN","RORX020A",191,0)
 ;  STAG     XML 'summary' tag number or error code
"RTN","RORX020A",192,0)
 ;*****************************************************************************
"RTN","RORX020A",193,0)
SUMMARY(RORTSK,REPORT,RORDATA) ; Add the summary values to the report
"RTN","RORX020A",194,0)
 N SUMMARY,I,STAG,RORTAG,RORNAME,RORRANGE
"RTN","RORX020A",195,0)
 S SUMMARY=$$ADDVAL^RORTSK11(RORTSK,"SUMMARY",,REPORT)
"RTN","RORX020A",196,0)
 Q:SUMMARY<0 SUMMARY
"RTN","RORX020A",197,0)
 ;add data for the summary entries
"RTN","RORX020A",198,0)
 F I=1:1:RORDATA("RCNT")  D  Q:STAG<0
"RTN","RORX020A",199,0)
 . S STAG=$$ADDVAL^RORTSK11(RORTSK,"DATA",,SUMMARY)
"RTN","RORX020A",200,0)
 . Q:STAG<0
"RTN","RORX020A",201,0)
 . ;get each value
"RTN","RORX020A",202,0)
 . S RORTAG="S"_I S RORNAME=$P($T(@RORTAG),";;",2)
"RTN","RORX020A",203,0)
 . S RORRANGE=$P($T(@RORTAG),";;",3)
"RTN","RORX020A",204,0)
 . D ADDVAL^RORTSK11(RORTSK,"DESC",$G(RORNAME),STAG) ;severity
"RTN","RORX020A",205,0)
 . D ADDVAL^RORTSK11(RORTSK,"VALUES",$G(RORRANGE),STAG) ;range
"RTN","RORX020A",206,0)
 . D ADDVAL^RORTSK11(RORTSK,"NP",$G(RORDATA("NP",I)),STAG) ;count
"RTN","RORX020A",207,0)
 Q STAG
"RTN","RORX020A",208,0)
 ;************************************************************************
"RTN","RORX020A",209,0)
 ;eGFR by MDRD Categories and Values for the summary table.
"RTN","RORX020A",210,0)
 ;NOTE: the number of entries below must match the value of RORDATA("RCNT")
"RTN","RORX020A",211,0)
 ;************************************************************************
"RTN","RORX020A",212,0)
S1 ;;Normal or CKD1;;>=90 mL/min/1.73m
"RTN","RORX020A",213,0)
S2 ;;CKD2 (Mild);;60-89 mL/min/1.73m
"RTN","RORX020A",214,0)
S3 ;;CKD3 (Moderate);;30-59 mL/min/1.73m
"RTN","RORX020A",215,0)
S4 ;;CKD4 (Severe);;15-29 mL/min/1.73m
"RTN","RORX020A",216,0)
S5 ;;CKD5 (Kidney failure);;<15 mL/min/1.73m
"RTN","RORXU002")
0^11^B85745413^B55243922
"RTN","RORXU002",1,0)
RORXU002 ;HCIOFO/SG - REPORT BUILDER UTILITIES ;5/18/06 11:13am
"RTN","RORXU002",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,10**;Feb 17, 2006;Build 32
"RTN","RORXU002",3,0)
 ;
"RTN","RORXU002",4,0)
 ; This routine uses the following IAs:
"RTN","RORXU002",5,0)
 ;
"RTN","RORXU002",6,0)
 ; #3990   $$ICDD^ICDCODE (supported)
"RTN","RORXU002",7,0)
 ; #2050   BLD^DIALOG (supported)
"RTN","RORXU002",8,0)
 ; #2056   GETS^DIQ (supported)
"RTN","RORXU002",9,0)
 ; #2056   $$GET1^DIQ (supported)
"RTN","RORXU002",10,0)
 ; #10103  $$NOW^XLFDT  (supported)
"RTN","RORXU002",11,0)
 ; #10104  $$TRIM^XLFSTR (supported)
"RTN","RORXU002",12,0)
 Q
"RTN","RORXU002",13,0)
 ;
"RTN","RORXU002",14,0)
 ;***** SCANS THE TABLE DEFINITION (RORSRC) FOR COLUMN NAMES
"RTN","RORXU002",15,0)
 ;
"RTN","RORXU002",16,0)
 ; .TERM         Reference to a local variable where
"RTN","RORXU002",17,0)
 ;               is terminator is returned
"RTN","RORXU002",18,0)
 ;
"RTN","RORXU002",19,0)
 ; Return Values:
"RTN","RORXU002",20,0)
 ;       ""  End of definition
"RTN","RORXU002",21,0)
 ;      ...  Name of the column
"RTN","RORXU002",22,0)
 ;
"RTN","RORXU002",23,0)
COLSCAN(TERM) ;
"RTN","RORXU002",24,0)
 N CH,I,TOKEN
"RTN","RORXU002",25,0)
 F I=1:1  S TERM=$E(RORSRC,I)  Q:"(,)"[TERM
"RTN","RORXU002",26,0)
 S TOKEN=$E(RORSRC,1,I-1)
"RTN","RORXU002",27,0)
 F I=I+1:1  S CH=$E(RORSRC,I)  Q:(CH="")!("(,)"'[CH)
"RTN","RORXU002",28,0)
 S $E(RORSRC,1,I-1)=""
"RTN","RORXU002",29,0)
 Q TOKEN
"RTN","RORXU002",30,0)
 ;
"RTN","RORXU002",31,0)
 ;***** CHECKS THE FILEMAN DATE/TIME VALUE
"RTN","RORXU002",32,0)
DATE(DT) ;
"RTN","RORXU002",33,0)
 Q $S(DT>0:+DT,1:"")
"RTN","RORXU002",34,0)
 ;
"RTN","RORXU002",35,0)
 ;***** OUTPUTS THE BASIC HEADER TO THE REPORT
"RTN","RORXU002",36,0)
 ;
"RTN","RORXU002",37,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",38,0)
 ;
"RTN","RORXU002",39,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",40,0)
 ;
"RTN","RORXU002",41,0)
 ; Return Values:
"RTN","RORXU002",42,0)
 ;       <0  Error code
"RTN","RORXU002",43,0)
 ;       >0  IEN of the HEADER element
"RTN","RORXU002",44,0)
 ;
"RTN","RORXU002",45,0)
HEADER(RORTSK,PARTAG) ;
"RTN","RORXU002",46,0)
 N HEADER,IENS,REGIEN,RORBUF,RORMSG,TMP
"RTN","RORXU002",47,0)
 S HEADER=$$ADDVAL^RORTSK11(RORTSK,"HEADER",,PARTAG)
"RTN","RORXU002",48,0)
 Q:HEADER<0 HEADER
"RTN","RORXU002",49,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$$DATE($$NOW^XLFDT),HEADER)
"RTN","RORXU002",50,0)
 D ADDVAL^RORTSK11(RORTSK,"TASK_NUMBER",RORTSK,HEADER)
"RTN","RORXU002",51,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",52,0)
 ;---
"RTN","RORXU002",53,0)
 S IENS=REGIEN_","
"RTN","RORXU002",54,0)
 D GETS^DIQ(798.1,IENS,"1;2","I","RORBUF","RORMSG")
"RTN","RORXU002",55,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1,IENS)
"RTN","RORXU002",56,0)
 S TMP=$G(RORBUF(798.1,IENS,1,"I"))
"RTN","RORXU002",57,0)
 D ADDVAL^RORTSK11(RORTSK,"UPDATED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",58,0)
 S TMP=$G(RORBUF(798.1,IENS,2,"I"))
"RTN","RORXU002",59,0)
 D ADDVAL^RORTSK11(RORTSK,"EXTRACTED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",60,0)
 Q HEADER
"RTN","RORXU002",61,0)
 ;
"RTN","RORXU002",62,0)
 ;***** PARSES THE COMMA-SEPARATED LIST
"RTN","RORXU002",63,0)
 ;
"RTN","RORXU002",64,0)
 ; .LIST         Reference to a local variable that contains a list.
"RTN","RORXU002",65,0)
 ;               Items of the list are returned as the subscripts of
"RTN","RORXU002",66,0)
 ;               this variable.
"RTN","RORXU002",67,0)
 ;
"RTN","RORXU002",68,0)
LIST(LIST) ;
"RTN","RORXU002",69,0)
 N I,TMP,VAL
"RTN","RORXU002",70,0)
 F I=1:1  S VAL=$P(LIST,",",I)  Q:VAL=""  D
"RTN","RORXU002",71,0)
 . S TMP=$$TRIM^XLFSTR(VAL)
"RTN","RORXU002",72,0)
 . S:TMP'="" LIST(TMP)=""
"RTN","RORXU002",73,0)
 Q
"RTN","RORXU002",74,0)
 ;
"RTN","RORXU002",75,0)
 ;***** COMPILES A TEXT DESCRIPTION FOR THE REPORT OPTIONS
"RTN","RORXU002",76,0)
 ;
"RTN","RORXU002",77,0)
 ; .OPTIONS      Reference to a local variable containing
"RTN","RORXU002",78,0)
 ;               the options as subscripts
"RTN","RORXU002",79,0)
 ;
"RTN","RORXU002",80,0)
 ; [DLGNUM]      Number of the dialog that contains the template
"RTN","RORXU002",81,0)
 ;               (7980000.018, by default).
"RTN","RORXU002",82,0)
 ;
"RTN","RORXU002",83,0)
 ; Return Values:
"RTN","RORXU002",84,0)
 ;      ...  Text description of the options
"RTN","RORXU002",85,0)
 ;
"RTN","RORXU002",86,0)
OPTXT(OPTIONS,DLGNUM) ;
"RTN","RORXU002",87,0)
 N I,J,NS,RORBUF,TEXT,TMP
"RTN","RORXU002",88,0)
 S:$G(DLGNUM)'>0 DLGNUM=7980000.018
"RTN","RORXU002",89,0)
 D BLD^DIALOG(DLGNUM,,,"RORBUF")
"RTN","RORXU002",90,0)
 S TEXT="",I=0
"RTN","RORXU002",91,0)
 F  S I=$O(RORBUF(I))  Q:I=""  D:$E(RORBUF(I),1)'=" "
"RTN","RORXU002",92,0)
 . S NS=0
"RTN","RORXU002",93,0)
 . F J=1:1  S TMP=$TR($P(RORBUF(I),",",J)," ")  Q:TMP=""  D
"RTN","RORXU002",94,0)
 . . S:$D(OPTIONS(TMP)) NS=2**(J-1)+NS
"RTN","RORXU002",95,0)
 . Q:'NS
"RTN","RORXU002",96,0)
 . S TMP=$$TRIM^XLFSTR($G(RORBUF(I+NS)))
"RTN","RORXU002",97,0)
 . S:TMP'="" TEXT=TEXT_", "_TMP
"RTN","RORXU002",98,0)
 Q $P(TEXT,", ",2,999)
"RTN","RORXU002",99,0)
 ;
"RTN","RORXU002",100,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORXU002",101,0)
 ;
"RTN","RORXU002",102,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",103,0)
 ;
"RTN","RORXU002",104,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",105,0)
 ;
"RTN","RORXU002",106,0)
 ; .STDT         Start and end dates of the report
"RTN","RORXU002",107,0)
 ; .ENDT         are returned via these parameters
"RTN","RORXU002",108,0)
 ;
"RTN","RORXU002",109,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are returned via this
"RTN","RORXU002",110,0)
 ;               parameter. The "D" (skip deceased patients) and "G"
"RTN","RORXU002",111,0)
 ;               (skip pending patients) flags are always added.
"RTN","RORXU002",112,0)
 ;
"RTN","RORXU002",113,0)
 ; Return Values:
"RTN","RORXU002",114,0)
 ;       <0  Error code
"RTN","RORXU002",115,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORXU002",116,0)
 ;
"RTN","RORXU002",117,0)
PARAMS(RORTSK,PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORXU002",118,0)
 N BUF,ELEMENT,I,LTAG,MODE,NAME,PARAMS,RC,REGIEN,RORMSG,TMP
"RTN","RORXU002",119,0)
 S PARAMS=$$ADDVAL^RORTSK11(RORTSK,"PARAMETERS",,PARTAG)
"RTN","RORXU002",120,0)
 S RC=0,(ENDT,STDT)="",FLAGS=""
"RTN","RORXU002",121,0)
 ;
"RTN","RORXU002",122,0)
 ;=== Registry name
"RTN","RORXU002",123,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",124,0)
 I REGIEN>0  D  Q:RC<0 RC
"RTN","RORXU002",125,0)
 . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U)
"RTN","RORXU002",126,0)
 . I TMP=""  S RC=-1  Q
"RTN","RORXU002",127,0)
 . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,PARAMS)
"RTN","RORXU002",128,0)
 ;
"RTN","RORXU002",129,0)
 ;=== Alternate date ranges
"RTN","RORXU002",130,0)
 F I=2:1:3  D  Q:RC<0
"RTN","RORXU002",131,0)
 . S STDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"START")\1  Q:STDT'>0
"RTN","RORXU002",132,0)
 . S ENDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"END")\1    Q:ENDT'>0
"RTN","RORXU002",133,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE_"_I,,PARAMS)
"RTN","RORXU002",134,0)
 . I ELEMENT<0  S RC=+ELEMENT  Q
"RTN","RORXU002",135,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT)  Q:RC<0
"RTN","RORXU002",136,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",137,0)
 Q:RC<0 RC
"RTN","RORXU002",138,0)
 ;
"RTN","RORXU002",139,0)
 ;=== Main date range
"RTN","RORXU002",140,0)
 S STDT=$$PARAM^RORTSK01("DATE_RANGE","START")\1
"RTN","RORXU002",141,0)
 S ENDT=$$PARAM^RORTSK01("DATE_RANGE","END")\1
"RTN","RORXU002",142,0)
 I STDT>0,ENDT>0  D  Q:RC<0 RC
"RTN","RORXU002",143,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE",,PARAMS)
"RTN","RORXU002",144,0)
 . I ELEMENT<0  S RC=+ELEMENT  Q
"RTN","RORXU002",145,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT)  Q:RC<0
"RTN","RORXU002",146,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",147,0)
 E  S (ENDT,STDT)=""
"RTN","RORXU002",148,0)
 ;
"RTN","RORXU002",149,0)
 ;=== Task comment
"RTN","RORXU002",150,0)
 S TMP=$$PARAM^RORTSK01("TASK_COMMENT")
"RTN","RORXU002",151,0)
 D:TMP'="" ADDVAL^RORTSK11(RORTSK,"TASK_COMMENT",TMP,PARAMS)
"RTN","RORXU002",152,0)
 ;
"RTN","RORXU002",153,0)
 ;=== Patient selection and Options
"RTN","RORXU002",154,0)
 F NAME="PATIENTS","OPTIONS"  D  Q:RC<0
"RTN","RORXU002",155,0)
 . K BUF  M BUF=RORTSK("PARAMS",NAME,"A")  Q:$D(BUF)<10
"RTN","RORXU002",156,0)
 . ;--- Generate the XML tags
"RTN","RORXU002",157,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,NAME,$$OPTXT(.BUF),PARAMS)
"RTN","RORXU002",158,0)
 . I ELEMENT'>0  S RC=ELEMENT  Q
"RTN","RORXU002",159,0)
 . S TMP=""
"RTN","RORXU002",160,0)
 . F  S TMP=$O(BUF(TMP))  Q:TMP=""  D  Q:RC<0
"RTN","RORXU002",161,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,TMP,"1")
"RTN","RORXU002",162,0)
 . ;--- Compile the flags
"RTN","RORXU002",163,0)
 . D:NAME="PATIENTS"
"RTN","RORXU002",164,0)
 . . S:'$D(BUF("DE_BEFORE")) FLAGS=FLAGS_"P"
"RTN","RORXU002",165,0)
 . . S:'$D(BUF("DE_DURING")) FLAGS=FLAGS_"N"
"RTN","RORXU002",166,0)
 . . S:'$D(BUF("DE_AFTER")) FLAGS=FLAGS_"F"
"RTN","RORXU002",167,0)
 Q:RC<0 RC
"RTN","RORXU002",168,0)
 ;
"RTN","RORXU002",169,0)
 ;=== Other Registries
"RTN","RORXU002",170,0)
 I $D(RORTSK("PARAMS","OTHER_REGISTRIES","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",171,0)
 . N NODE,REGIEN
"RTN","RORXU002",172,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"OTHER_REGISTRIES",,PARAMS)
"RTN","RORXU002",173,0)
 . I LTAG<0  S RC=+LTAG  Q
"RTN","RORXU002",174,0)
 . S NODE=$NA(RORTSK("PARAMS","OTHER_REGISTRIES","C"))
"RTN","RORXU002",175,0)
 . S REGIEN=0
"RTN","RORXU002",176,0)
 . F  S REGIEN=$O(@NODE@(REGIEN))  Q:REGIEN'>0  D  Q:RC<0
"RTN","RORXU002",177,0)
 . . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U,2)
"RTN","RORXU002",178,0)
 . . S MODE=+$G(@NODE@(REGIEN))
"RTN","RORXU002",179,0)
 . . I 'MODE!(TMP="")  K @NODE@(REGIEN)  Q
"RTN","RORXU002",180,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",181,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,LTAG)
"RTN","RORXU002",182,0)
 . S FLAGS=FLAGS_"R"
"RTN","RORXU002",183,0)
 ;
"RTN","RORXU002",184,0)
 ;=== Local Fields
"RTN","RORXU002",185,0)
 I $D(RORTSK("PARAMS","LOCAL_FIELDS","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",186,0)
 . N NODE,IEN,IENS
"RTN","RORXU002",187,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOCAL_FIELDS",,PARAMS)
"RTN","RORXU002",188,0)
 . I LTAG<0  S RC=+LTAG  Q
"RTN","RORXU002",189,0)
 . S NODE=$NA(RORTSK("PARAMS","LOCAL_FIELDS","C"))
"RTN","RORXU002",190,0)
 . S IEN=0
"RTN","RORXU002",191,0)
 . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORXU002",192,0)
 . . S TMP=$$GET1^DIQ(799.53,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",193,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,799.53,IEN_",")
"RTN","RORXU002",194,0)
 . . S MODE=+$G(@NODE@(IEN))
"RTN","RORXU002",195,0)
 . . I 'MODE!(TMP="")  K @NODE@(IEN)  Q
"RTN","RORXU002",196,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",197,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"FIELD",TMP,LTAG)
"RTN","RORXU002",198,0)
 . S FLAGS=FLAGS_"O"
"RTN","RORXU002",199,0)
 ;
"RTN","RORXU002",200,0)
 ;=== Lab test ranges
"RTN","RORXU002",201,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",202,0)
 . N TYPE S TYPE=3 ;default = 3 for 'lab by range' report
"RTN","RORXU002",203,0)
 . I $G(RORTSK("EP"))["BMIRANGE" S TYPE=5 ;change to 5 if BMI
"RTN","RORXU002",204,0)
 . I $G(RORTSK("EP"))["MLDRANGE" S TYPE=6 ;change to 6 if MELD
"RTN","RORXU002",205,0)
 . I $G(RORTSK("EP"))["RFRANGE" S TYPE=7 ;change to 7 if Renal
"RTN","RORXU002",206,0)
 . N GRC,NODE
"RTN","RORXU002",207,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORXU002",208,0)
 . S GRC=0
"RTN","RORXU002",209,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORXU002",210,0)
 . . S RC=$$ITEMIEN^RORUTL09(TYPE,REGIEN,GRC,.TMP)
"RTN","RORXU002",211,0)
 . . S:RC'<0 @NODE@(GRC)=TMP
"RTN","RORXU002",212,0)
 ;
"RTN","RORXU002",213,0)
 ;=== ICD-9 filter/group/codes
"RTN","RORXU002",214,0)
 N LEV1FILT,LEV2GRP,LEV3ICD9,ICD9IEN,ICD9CODE,GRPNAME,FILTER,ICD9DESC
"RTN","RORXU002",215,0)
 S FILTER=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORXU002",216,0)
 I $L(FILTER)>0 D  ;quit if no ICD9 filter exists
"RTN","RORXU002",217,0)
 . S LEV1FILT=$$ADDVAL^RORTSK11(RORTSK,"ICD9FILT",,PARAMS)
"RTN","RORXU002",218,0)
 . I LEV1FILT<0 S RC=LEV1FILT Q
"RTN","RORXU002",219,0)
 . ;add filter value to the output
"RTN","RORXU002",220,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,LEV1FILT,"FILTER",FILTER)
"RTN","RORXU002",221,0)
 . ;if there's an ICD9 group, process it
"RTN","RORXU002",222,0)
 . I $D(RORTSK("PARAMS","ICD9FILT","G"))>1 D  Q:RC<0
"RTN","RORXU002",223,0)
 .. S NODE=$NA(RORTSK("PARAMS","ICD9FILT","G"))
"RTN","RORXU002",224,0)
 .. S GRPNAME=0,RC=0
"RTN","RORXU002",225,0)
 .. F  S GRPNAME=$O(@NODE@(GRPNAME)) Q:GRPNAME=""  D  Q:RC<0
"RTN","RORXU002",226,0)
 ... S LEV2GRP=$$ADDVAL^RORTSK11(RORTSK,"GROUP",,LEV1FILT)
"RTN","RORXU002",227,0)
 ... I LEV2GRP'>0  S RC=LEV2GRP Q 
"RTN","RORXU002",228,0)
 ... ;add group name to the output
"RTN","RORXU002",229,0)
 ... D ADDATTR^RORTSK11(RORTSK,LEV2GRP,"ID",GRPNAME)
"RTN","RORXU002",230,0)
 ... S ICD9IEN=0
"RTN","RORXU002",231,0)
 ... F  S ICD9IEN=$O(@NODE@(GRPNAME,"C",ICD9IEN)) Q:ICD9IEN'>0  D
"RTN","RORXU002",232,0)
 .... S ICD9CODE=+$G(@NODE@(GRPNAME,"C",ICD9IEN)) Q:ICD9CODE'>0
"RTN","RORXU002",233,0)
 .... ;get diagnosis description
"RTN","RORXU002",234,0)
 .... N RORDESC K RORDESC S TMP=$$ICDD^ICDCODE(ICD9CODE,"RORDESC")
"RTN","RORXU002",235,0)
 .... S ICD9DESC=$G(RORDESC(1))
"RTN","RORXU002",236,0)
 .... S LEV3ICD9=$$ADDVAL^RORTSK11(RORTSK,"ICD9",$G(ICD9DESC),LEV2GRP)
"RTN","RORXU002",237,0)
 .... D ADDATTR^RORTSK11(RORTSK,LEV3ICD9,"ID",$G(ICD9CODE))
"RTN","RORXU002",238,0)
 .... K RORDESC
"RTN","RORXU002",239,0)
 ;
"RTN","RORXU002",240,0)
 ;=== get Max Date
"RTN","RORXU002",241,0)
 N MAXDT S MAXDT=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORXU002",242,0)
 I $G(MAXDT)>0 D ADDVAL^RORTSK11(RORTSK,"MAX_DATE",MAXDT,PARAMS)
"RTN","RORXU002",243,0)
 ;
"RTN","RORXU002",244,0)
 ;=== Defaults
"RTN","RORXU002",245,0)
 S TMP=$TR(FLAGS,"FNP")  S:$L(FLAGS)-$L(TMP)=3 FLAGS=TMP
"RTN","RORXU002",246,0)
 S FLAGS=FLAGS_"DG"
"RTN","RORXU002",247,0)
 ;
"RTN","RORXU002",248,0)
 ;=== Success
"RTN","RORXU002",249,0)
 Q PARAMS
"RTN","RORXU002",250,0)
 ;
"RTN","RORXU002",251,0)
 ;***** GENERATES TABLE DEFINITION
"RTN","RORXU002",252,0)
 ;
"RTN","RORXU002",253,0)
 ; TBLREF        Reference to the definition table in the source
"RTN","RORXU002",254,0)
 ;               code (TAG^ROUTINE). See the HEADER^RORX013 for
"RTN","RORXU002",255,0)
 ;               examples of table definitions.
"RTN","RORXU002",256,0)
 ;
"RTN","RORXU002",257,0)
 ; HEADER        IEN of the HEADER element
"RTN","RORXU002",258,0)
 ;
"RTN","RORXU002",259,0)
 ; Return Values:
"RTN","RORXU002",260,0)
 ;       <0  Error code
"RTN","RORXU002",261,0)
 ;        0  Ok
"RTN","RORXU002",262,0)
 ;
"RTN","RORXU002",263,0)
TBLDEF(TBLREF,HEADER) ;
"RTN","RORXU002",264,0)
 N COND,IT,NAME,RC,RORSRC,TBLDEF,TERM,TGET
"RTN","RORXU002",265,0)
 S TGET="S RORSRC=$T("_$P(TBLREF,"^")_"+IT^"_$P(TBLREF,"^",2)_")"
"RTN","RORXU002",266,0)
 S RC=0
"RTN","RORXU002",267,0)
 F IT=1:1  X TGET  S RORSRC=$P(RORSRC,";;",2)  Q:RORSRC=""  D  Q:RC<0
"RTN","RORXU002",268,0)
 . S COND=$$TRIM^XLFSTR($P(RORSRC,U,2,999))
"RTN","RORXU002",269,0)
 . I COND'=""  X COND  E  Q
"RTN","RORXU002",270,0)
 . S RORSRC=$$TRIM^XLFSTR($P(RORSRC,U))
"RTN","RORXU002",271,0)
 . S NAME=$$COLSCAN(.TERM)  Q:(NAME="")!(TERM'="(")
"RTN","RORXU002",272,0)
 . S TBLDEF=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORXU002",273,0)
 . I TBLDEF<0  S RC=TBLDEF  Q
"RTN","RORXU002",274,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"NAME",NAME)
"RTN","RORXU002",275,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"HEADER","1")
"RTN","RORXU002",276,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"FOOTER","1")
"RTN","RORXU002",277,0)
 . D TBLDEF1(TBLDEF)
"RTN","RORXU002",278,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORXU002",279,0)
 ;
"RTN","RORXU002",280,0)
 ;***** GENERATES <COLUMN> ELEMENTS FROM TABLE DEFINITION (RORSRC)
"RTN","RORXU002",281,0)
 ;
"RTN","RORXU002",282,0)
 ; PTAG          IEN of the parent element
"RTN","RORXU002",283,0)
 ;
"RTN","RORXU002",284,0)
TBLDEF1(PTAG) ;
"RTN","RORXU002",285,0)
 N COLUMN,NAME,TERM
"RTN","RORXU002",286,0)
 F  S NAME=$$COLSCAN(.TERM)  Q:NAME=""  D  Q:")"[TERM
"RTN","RORXU002",287,0)
 . S COLUMN=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,PTAG)
"RTN","RORXU002",288,0)
 . D ADDATTR^RORTSK11(RORTSK,COLUMN,"NAME",NAME)
"RTN","RORXU002",289,0)
 . D:TERM="(" TBLDEF1(COLUMN)
"RTN","RORXU002",290,0)
 Q
"VER")
8.0^22.0
"^DD",798,798,11,0)
DON'T SEND^S^0:NO;1:YES;^2;4^Q
"^DD",798,798,11,20,0)
^.3LA^1^1
"^DD",798,798,11,20,1,0)
ENTRY
"^DD",798,798,11,21,0)
^^3^3^3091117^^
"^DD",798,798,11,21,1,0)
Set this field to "YES" if you do not want any 
"^DD",798,798,11,21,2,0)
data to be sent to the national registry for this
"^DD",798,798,11,21,3,0)
record.
"^DD",798,798,11,23,0)
^^4^4^3091117^
"^DD",798,798,11,23,1,0)
Usually, this field is populated only automatically by
"^DD",798,798,11,23,2,0)
the registry update processing if a patient is defined
"^DD",798,798,11,23,3,0)
in the PATIENT file as a "test patient" (internal value
"^DD",798,798,11,23,4,0)
of the TEST PATIENT INDICATOR field equals to 1).
"^DD",798,798,11,"DT")
3091117
"^DD",799.1,799.1,.02,0)
TYPE^RSX^3:Lab Group;4:Drug Group;5:BMI Group;6:MELD Group;7:Renal Group;^0;2^Q:$$VAEDT^RORDD(799.1,,-1)
"^DD",799.1,799.1,.02,8.5)
@
"^DD",799.1,799.1,.02,9)
@
"^DD",799.1,799.1,.02,21,0)
^.001^3^3^3090825^^^^
"^DD",799.1,799.1,.02,21,1,0)
An internal value of this field links the item to
"^DD",799.1,799.1,.02,21,2,0)
the registry field. The items with the same type
"^DD",799.1,799.1,.02,21,3,0)
define the possible values of the registry field.
"^DD",799.1,799.1,.02,23,0)
^.001^3^3^3090825^^^^
"^DD",799.1,799.1,.02,23,1,0)
When a new registry field needs to be added, add
"^DD",799.1,799.1,.02,23,2,0)
another code to the definition of this field and create
"^DD",799.1,799.1,.02,23,3,0)
the corresponding item records.
"^DD",799.1,799.1,.02,"DT")
3011112
"BLD",7577,6)
^10
**END**
**END**

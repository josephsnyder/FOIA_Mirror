Released VPS*1*2 SEQ #2
Extracted from mail message
**KIDS**:VPS*1.0*2^

**INSTALL NAME**
VPS*1.0*2
"BLD",8153,0)
VPS*1.0*2^VPS KIOSK^0^3131118^y
"BLD",8153,4,0)
^9.64PA^^0
"BLD",8153,6.3)
41
"BLD",8153,"ABPKG")
n
"BLD",8153,"KRN",0)
^9.67PA^779.2^20
"BLD",8153,"KRN",.4,0)
.4
"BLD",8153,"KRN",.401,0)
.401
"BLD",8153,"KRN",.402,0)
.402
"BLD",8153,"KRN",.403,0)
.403
"BLD",8153,"KRN",.5,0)
.5
"BLD",8153,"KRN",.84,0)
.84
"BLD",8153,"KRN",3.6,0)
3.6
"BLD",8153,"KRN",3.8,0)
3.8
"BLD",8153,"KRN",9.2,0)
9.2
"BLD",8153,"KRN",9.8,0)
9.8
"BLD",8153,"KRN",9.8,"NM",0)
^9.68A^18^6
"BLD",8153,"KRN",9.8,"NM",13,0)
VPSRPC1^^0^B195601675
"BLD",8153,"KRN",9.8,"NM",14,0)
VPSRPC2^^0^B128001842
"BLD",8153,"KRN",9.8,"NM",15,0)
VPSRPC3^^0^B12419287
"BLD",8153,"KRN",9.8,"NM",16,0)
VPSRPC4^^0^B10148978
"BLD",8153,"KRN",9.8,"NM",17,0)
VPSRPC5^^0^B7561611
"BLD",8153,"KRN",9.8,"NM",18,0)
VPSRPC21^^0^B63643512
"BLD",8153,"KRN",9.8,"NM","B","VPSRPC1",13)

"BLD",8153,"KRN",9.8,"NM","B","VPSRPC2",14)

"BLD",8153,"KRN",9.8,"NM","B","VPSRPC21",18)

"BLD",8153,"KRN",9.8,"NM","B","VPSRPC3",15)

"BLD",8153,"KRN",9.8,"NM","B","VPSRPC4",16)

"BLD",8153,"KRN",9.8,"NM","B","VPSRPC5",17)

"BLD",8153,"KRN",19,0)
19
"BLD",8153,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",8153,"KRN",19,"NM",1,0)
VPS KIOSK INTERFACE^^0
"BLD",8153,"KRN",19,"NM","B","VPS KIOSK INTERFACE",1)

"BLD",8153,"KRN",19.1,0)
19.1
"BLD",8153,"KRN",101,0)
101
"BLD",8153,"KRN",409.61,0)
409.61
"BLD",8153,"KRN",771,0)
771
"BLD",8153,"KRN",779.2,0)
779.2
"BLD",8153,"KRN",870,0)
870
"BLD",8153,"KRN",870,"NM",0)
^9.68A^^0
"BLD",8153,"KRN",8989.51,0)
8989.51
"BLD",8153,"KRN",8989.52,0)
8989.52
"BLD",8153,"KRN",8994,0)
8994
"BLD",8153,"KRN",8994,"NM",0)
^9.68A^15^10
"BLD",8153,"KRN",8994,"NM",1,0)
VPS EDIT PATIENT DEMOGRAPHIC^^0
"BLD",8153,"KRN",8994,"NM",2,0)
VPS FULLSSN^^0
"BLD",8153,"KRN",8994,"NM",7,0)
VPS GET DFN^^0
"BLD",8153,"KRN",8994,"NM",9,0)
VPS GET PATIENT DEMOGRAPHIC^^0
"BLD",8153,"KRN",8994,"NM",10,0)
VPS GET SITES^^0
"BLD",8153,"KRN",8994,"NM",11,0)
VPS GET2 PATIENT DEMOGRAPHIC^^0
"BLD",8153,"KRN",8994,"NM",12,0)
VPS LAST5^^0
"BLD",8153,"KRN",8994,"NM",13,0)
VPS LIST ALL^^0
"BLD",8153,"KRN",8994,"NM",14,0)
VPS PATIENT CHECK-IN^^0
"BLD",8153,"KRN",8994,"NM",15,0)
VPS PATIENT PRE-REGISTRATION^^0
"BLD",8153,"KRN",8994,"NM","B","VPS EDIT PATIENT DEMOGRAPHIC",1)

"BLD",8153,"KRN",8994,"NM","B","VPS FULLSSN",2)

"BLD",8153,"KRN",8994,"NM","B","VPS GET DFN",7)

"BLD",8153,"KRN",8994,"NM","B","VPS GET PATIENT DEMOGRAPHIC",9)

"BLD",8153,"KRN",8994,"NM","B","VPS GET SITES",10)

"BLD",8153,"KRN",8994,"NM","B","VPS GET2 PATIENT DEMOGRAPHIC",11)

"BLD",8153,"KRN",8994,"NM","B","VPS LAST5",12)

"BLD",8153,"KRN",8994,"NM","B","VPS LIST ALL",13)

"BLD",8153,"KRN",8994,"NM","B","VPS PATIENT CHECK-IN",14)

"BLD",8153,"KRN",8994,"NM","B","VPS PATIENT PRE-REGISTRATION",15)

"BLD",8153,"KRN","B",.4,.4)

"BLD",8153,"KRN","B",.401,.401)

"BLD",8153,"KRN","B",.402,.402)

"BLD",8153,"KRN","B",.403,.403)

"BLD",8153,"KRN","B",.5,.5)

"BLD",8153,"KRN","B",.84,.84)

"BLD",8153,"KRN","B",3.6,3.6)

"BLD",8153,"KRN","B",3.8,3.8)

"BLD",8153,"KRN","B",9.2,9.2)

"BLD",8153,"KRN","B",9.8,9.8)

"BLD",8153,"KRN","B",19,19)

"BLD",8153,"KRN","B",19.1,19.1)

"BLD",8153,"KRN","B",101,101)

"BLD",8153,"KRN","B",409.61,409.61)

"BLD",8153,"KRN","B",771,771)

"BLD",8153,"KRN","B",779.2,779.2)

"BLD",8153,"KRN","B",870,870)

"BLD",8153,"KRN","B",8989.51,8989.51)

"BLD",8153,"KRN","B",8989.52,8989.52)

"BLD",8153,"KRN","B",8994,8994)

"BLD",8153,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",8153,"QUES",0)
^9.62^^
"BLD",8153,"REQB",0)
^9.611^2^2
"BLD",8153,"REQB",1,0)
VPS*1.0*1^1
"BLD",8153,"REQB",2,0)
DG*5.3*857^1
"BLD",8153,"REQB","B","DG*5.3*857",2)

"BLD",8153,"REQB","B","VPS*1.0*1",1)

"KRN",19,2929398,-1)
0^1
"KRN",19,2929398,0)
VPS KIOSK INTERFACE^VPS KIOSK INTERFACE^^B^^^^^^^y^
"KRN",19,2929398,1,0)
^19.06^3^3^3130515^^^^
"KRN",19,2929398,1,1,0)
The RPCs that support the Vetlink Point of Service (Kiosk) system which
"KRN",19,2929398,1,2,0)
will will call upon these RPCs for specific events triggered by the
"KRN",19,2929398,1,3,0)
Vetlink patient-facing and staff-facing interfaces.
"KRN",19,2929398,10.1)
VPS KIOSK INTERFACE
"KRN",19,2929398,99.1)
62881,50549
"KRN",19,2929398,"RPC",0)
^19.05P^21^20
"KRN",19,2929398,"RPC",1,0)
VPS GET CLINIC
"KRN",19,2929398,"RPC",2,0)
VPS GET PATIENT DEMOGRAPHIC
"KRN",19,2929398,"RPC",3,0)
XWB GET VARIABLE VALUE
"KRN",19,2929398,"RPC",6,0)
VPS EDIT PATIENT DEMOGRAPHIC
"KRN",19,2929398,"RPC",7,0)
VPS FULLSSN
"KRN",19,2929398,"RPC",8,0)
VPS GET DFN
"KRN",19,2929398,"RPC",9,0)
VPS GET SITES
"KRN",19,2929398,"RPC",10,0)
VPS LAST5
"KRN",19,2929398,"RPC",11,0)
VPS PATIENT CHECK-IN
"KRN",19,2929398,"RPC",12,0)
VPS PATIENT PRE-REGISTRATION
"KRN",19,2929398,"RPC",13,0)
VPS LIST ALL
"KRN",19,2929398,"RPC",19,0)
ORWRP PRINT REPORT
"KRN",19,2929398,"RPC",21,0)
VPS GET2 PATIENT DEMOGRAPHIC
"KRN",19,2929398,"U")
VPS KIOSK INTERFACE
"KRN",8994,2887,-1)
0^9
"KRN",8994,2887,0)
VPS GET PATIENT DEMOGRAPHIC^GETDATA^VPSRPC1^2^P^0^^1^1^^1
"KRN",8994,2887,1,0)
^8994.01^3^3^3130306^^^
"KRN",8994,2887,1,1,0)
Called by the Vetlink Kiosk system.  The RPC will accept a single input
"KRN",8994,2887,1,2,0)
value whic is the patient SSN.  The RPC returns the patient demographics,
"KRN",8994,2887,1,3,0)
insurance, and up-coming appointments.
"KRN",8994,2887,1,4,0)
returns the patient demographics, insurance, and up-coming appointments.
"KRN",8994,2887,2,0)
^8994.02A^1^1
"KRN",8994,2887,2,1,0)
SSN^1^12^1^1
"KRN",8994,2887,2,1,1,0)
^8994.021^1^1^3130306^^^^
"KRN",8994,2887,2,1,1,1,0)
Social Security Number
"KRN",8994,2887,2,"B","SSN",1)

"KRN",8994,2887,2,"PARAMSEQ",1,1)

"KRN",8994,2887,3,0)
^8994.03^5^5^3130306^^^^
"KRN",8994,2887,3,1,0)
Single dimensional array that represents the patient demographics, 
"KRN",8994,2887,3,2,0)
appointments, insurance information.
"KRN",8994,2887,3,3,0)
ARRAY(n)=File#^dfn;multiple entries^field#^Data^Fieldname"
"KRN",8994,2887,3,4,0)
exception data string:
"KRN",8994,2887,3,5,0)
ARRAY(n)="-1^Error text message"
"KRN",8994,2888,-1)
0^14
"KRN",8994,2888,0)
VPS PATIENT CHECK-IN^CHK^VPSRPC4^2^P^0^^^1^^1
"KRN",8994,2888,1,0)
^^4^4^3120709^
"KRN",8994,2888,1,1,0)
Called by Vetlink Kiosk system.  The RPC will accept a single value as
"KRN",8994,2888,1,2,0)
input representing the string of pending appointments that the patient is
"KRN",8994,2888,1,3,0)
to be checked-in.; and the output produced will be an array that returns
"KRN",8994,2888,1,4,0)
the results of each attempted check-in.
"KRN",8994,2888,2,0)
^8994.02A^2^1
"KRN",8994,2888,2,2,0)
VPSAPPTS^1^225^1^1
"KRN",8994,2888,2,2,1,0)
^8994.021^11^11^3120709^^^^
"KRN",8994,2888,2,2,1,1,0)
Input: string that represents the appt(s) to be checked in.  Since more 
"KRN",8994,2888,2,2,1,2,0)
than one appt can be checked-in, each appt consists of the DFN, CLINIC 
"KRN",8994,2888,2,2,1,3,0)
ien, and appt date/timestamp.  Each appt is delimited by ";" and the 3 
"KRN",8994,2888,2,2,1,4,0)
pieces of data are separated by "-".   All 3 data elements in the appt 
"KRN",8994,2888,2,2,1,5,0)
representation are required input.
"KRN",8994,2888,2,2,1,6,0)
Syntax: 
"KRN",8994,2888,2,2,1,7,0)
          input=DFN_"-"_clinic IEN_"-"_date/timestamp of scheduled 
"KRN",8994,2888,2,2,1,8,0)
appt_";"
"KRN",8994,2888,2,2,1,9,0)
 
"KRN",8994,2888,2,2,1,10,0)
example of data string (represents 2 appts):
"KRN",8994,2888,2,2,1,11,0)
          "308165-1218-3120420.1215;308165-4569-3120420.1030"
"KRN",8994,2888,2,"B","VPSAPPTS",2)

"KRN",8994,2888,2,"PARAMSEQ",1,2)

"KRN",8994,2888,3,0)
^8994.03^9^9^3120709^^^^
"KRN",8994,2888,3,1,0)
single-dimensional array that represents the result of attempted check-in
"KRN",8994,2888,3,2,0)
for each appt: 
"KRN",8994,2888,3,3,0)
       1 if check-in successful or '99' if there was a problem.
"KRN",8994,2888,3,4,0)
Syntax:
"KRN",8994,2888,3,5,0)
RESULT(n)= DFN_"-"_clinicIEN_"-"_date/time of appt_"-"_return value
"KRN",8994,2888,3,6,0)
example of data output:
"KRN",8994,2888,3,7,0)
                   RESULT(1)="308165-1218-3120420.1215-1"
"KRN",8994,2888,3,8,0)
                   RESULT(2)="308165-4569-3120420.1030-99"
"KRN",8994,2888,3,9,0)
                   RESULT(3)="308165-2312-3120420.1430-1"
"KRN",8994,2889,-1)
0^15
"KRN",8994,2889,0)
VPS PATIENT PRE-REGISTRATION^PREREG^VPSRPC3^1^P^0^^^1^^1
"KRN",8994,2889,1,0)
^^29^29^3121011^
"KRN",8994,2889,1,1,0)
There are  2 input parameters for the RPC call  sent by the Vetlink kiosk 
"KRN",8994,2889,1,2,0)
Pre-registration event.
"KRN",8994,2889,1,3,0)
Inputs:  DFN and Status Code.
"KRN",8994,2889,1,4,0)
Patient DFN -1st input parameter of the RPC call, required. 
"KRN",8994,2889,1,5,0)
Status Code - code that represents the outcome of the pre-registration 
"KRN",8994,2889,1,6,0)
interview with the patient, required.  List of possible codes that could 
"KRN",8994,2889,1,7,0)
be sent:
"KRN",8994,2889,1,8,0)
B = BUSY
"KRN",8994,2889,1,9,0)
C = CONNECTED
"KRN",8994,2889,1,10,0)
D = DEATH
"KRN",8994,2889,1,11,0)
K = CALL BACK
"KRN",8994,2889,1,12,0)
M =LEFT CALLBACK MESSAGE
"KRN",8994,2889,1,13,0)
N = NO ANSWER
"KRN",8994,2889,1,14,0)
P = NO PHONE
"KRN",8994,2889,1,15,0)
T = DON'T CALL
"KRN",8994,2889,1,16,0)
U = UNCOOPERATIVE
"KRN",8994,2889,1,17,0)
V = PREVIOUSLY UPDATED
"KRN",8994,2889,1,18,0)
W =WRONG NUMBER
"KRN",8994,2889,1,19,0)
X = CHANGE INFORMATION
"KRN",8994,2889,1,20,0)
 
"KRN",8994,2889,1,21,0)
Output:  string consisting of a single digit to denote success or failure 
"KRN",8994,2889,1,22,0)
of the pre-registration, followed by a short message:     1 if 
"KRN",8994,2889,1,23,0)
pre-registration was successful or 0 if there was a problem.
"KRN",8994,2889,1,24,0)
Syntax to indicate success:
"KRN",8994,2889,1,25,0)
 VPSRES="1,Pre-Registration completed."
"KRN",8994,2889,1,26,0)
Syntax to indicate a failure:
"KRN",8994,2889,1,27,0)
 VPSRES="0,Patient nof found."
"KRN",8994,2889,1,28,0)
 VPSRES="0,Invalid SSN for this patient."
"KRN",8994,2889,1,29,0)
 VPSRES="0,Unable to add Pre-Registration."
"KRN",8994,2889,2,0)
^8994.02A^2^2
"KRN",8994,2889,2,1,0)
DFN^1^30^1^1
"KRN",8994,2889,2,1,1,0)
^8994.021^2^2^3120705^^^^
"KRN",8994,2889,2,1,1,1,0)
Input: the patient's internal entry number (IEN) from file #2. Only one 
"KRN",8994,2889,2,1,1,2,0)
DFN is allowed to be passed in, required.
"KRN",8994,2889,2,2,0)
VPSCST^1^1^1^2
"KRN",8994,2889,2,2,1,0)
^^2^2^3121011^
"KRN",8994,2889,2,2,1,1,0)
Input: the call status code, either 'C' (Connected) or 'X' (Change 
"KRN",8994,2889,2,2,1,2,0)
Information), required.
"KRN",8994,2889,2,"B","DFN",1)

"KRN",8994,2889,2,"B","VPSCST",2)

"KRN",8994,2889,2,"PARAMSEQ",1,1)

"KRN",8994,2889,2,"PARAMSEQ",2,2)

"KRN",8994,2889,3,0)
^8994.03^11^11^3121011^^^^
"KRN",8994,2889,3,1,0)
Output: string consisting of a single digit to denote success or failure 
"KRN",8994,2889,3,2,0)
of the pre-registration, followed by a short message:
"KRN",8994,2889,3,3,0)
 1 if pre-registration was successful or 0 if there was a problem.
"KRN",8994,2889,3,4,0)
 
"KRN",8994,2889,3,5,0)
Syntax to indicate success:
"KRN",8994,2889,3,6,0)
VPSRES="1, Pre-Registration completed."
"KRN",8994,2889,3,7,0)
 
"KRN",8994,2889,3,8,0)
Syntax to indicate a failure:
"KRN",8994,2889,3,9,0)
VPSRES="0, Patient not found."
"KRN",8994,2889,3,10,0)
VPSRES="0, Invalid SSN for this patient."
"KRN",8994,2889,3,11,0)
VPSRES="0, Unable to add Pre-Registration."
"KRN",8994,2890,-1)
0^1
"KRN",8994,2890,0)
VPS EDIT PATIENT DEMOGRAPHIC^EDIT^VPSRPC2^2^P^0^1^1^1^^1
"KRN",8994,2890,1,0)
^8994.01^8^8^3130306^^
"KRN",8994,2890,1,1,0)
Called by the Vetlink Kiosk system. The VAMC staff will make changes to
"KRN",8994,2890,1,2,0)
the patient demographic record via the Vecna Kiosk and submit the changes
"KRN",8994,2890,1,3,0)
to VistA.  The RPC will accept 3 parameters.  The first parameter
"KRN",8994,2890,1,4,0)
represents the return value as required by RPC Broker, the 2nd parameter
"KRN",8994,2890,1,5,0)
is an input value which is the patient DFN, and the 3rd parameter is an
"KRN",8994,2890,1,6,0)
input value which is the list of data changes that will update one to many
"KRN",8994,2890,1,7,0)
fields in the PATIENT file (#2).  Integration Agreement 5799 identifies
"KRN",8994,2890,1,8,0)
the fields that could potentially be edited.
"KRN",8994,2890,2,0)
^8994.02A^2^2
"KRN",8994,2890,2,1,0)
VPSDFN^1^30^1^1
"KRN",8994,2890,2,1,1,0)
^8994.021^2^2^3120705^^^
"KRN",8994,2890,2,1,1,1,0)
The patient DFN which is to be used in processing the changes and updating
"KRN",8994,2890,2,1,1,2,0)
the associated patient record in the PATIENT file (#2).
"KRN",8994,2890,2,2,0)
VPSLST^2^^1^2
"KRN",8994,2890,2,2,1,0)
^8994.021^6^6^3130306^^^^
"KRN",8994,2890,2,2,1,1,0)
Local array where each field that is to be updated in the PATIENT file 
"KRN",8994,2890,2,2,1,2,0)
(#2) is assigned as a string to the data element in the array along with 
"KRN",8994,2890,2,2,1,3,0)
the field value.
"KRN",8994,2890,2,2,1,4,0)
input structure: 
"KRN",8994,2890,2,2,1,5,0)
 LocalArray(n)=field label^data  
"KRN",8994,2890,2,2,1,6,0)
where n is an incremental number and field label^data  are literal values
"KRN",8994,2890,2,"B","VPSDFN",1)

"KRN",8994,2890,2,"B","VPSLST",2)

"KRN",8994,2890,2,"PARAMSEQ",1,1)

"KRN",8994,2890,2,"PARAMSEQ",2,2)

"KRN",8994,2890,3,0)
^8994.03^9^9^3130306^^^^
"KRN",8994,2890,3,1,0)
Local ARRAY that returns the outcome of the EDIT operation.
"KRN",8994,2890,3,2,0)
output structure:
"KRN",8994,2890,3,3,0)
LocalArray(n)="field label^data^1"  
"KRN",8994,2890,3,4,0)
where 1 equals successful update to the database of the specific field 
"KRN",8994,2890,3,5,0)
declared at field label.  
"KRN",8994,2890,3,6,0)
 
"KRN",8994,2890,3,7,0)
LocalArray(n)="99^field label^data ^exception message"  
"KRN",8994,2890,3,8,0)
where 99 means an exception and no update was made to the database for 
"KRN",8994,2890,3,9,0)
that specific field and exception message describes the error.
"KRN",8994,2891,-1)
0^10
"KRN",8994,2891,0)
VPS GET SITES^GETSITES^VPSRPC5^2^P^0^^^1^^1
"KRN",8994,2891,1,0)
^^3^3^3120709^
"KRN",8994,2891,1,1,0)
Called by the Vetlink Kiosk system.  Patient SSN is the input value.  
"KRN",8994,2891,1,2,0)
Return value is a list of treating facilities associated with the patient 
"KRN",8994,2891,1,3,0)
given the SSN.
"KRN",8994,2891,2,0)
^8994.02A^2^1
"KRN",8994,2891,2,2,0)
VPSSN^1^12^1^1
"KRN",8994,2891,2,2,1,0)
^8994.021^1^1^3120709^^^
"KRN",8994,2891,2,2,1,1,0)
Patient SSN
"KRN",8994,2891,2,"B","VPSSN",2)

"KRN",8994,2891,2,"PARAMSEQ",1,2)

"KRN",8994,2891,3,0)
^8994.03^11^11^3120709^^
"KRN",8994,2891,3,1,0)
Local ARRAY that returns the list of treating facilities by a given 
"KRN",8994,2891,3,2,0)
patient.
"KRN",8994,2891,3,3,0)
output structure:
"KRN",8994,2891,3,4,0)
 LocalArray(n)="1^SITE ID"
"KRN",8994,2891,3,5,0)
 
"KRN",8994,2891,3,6,0)
where 1 equals successful return of facility's site id at which the 
"KRN",8994,2891,3,7,0)
patient has been treated(e.g.,500 for Albany VAMC).
"KRN",8994,2891,3,8,0)
 
"KRN",8994,2891,3,9,0)
LocalArray(n)="99^text"  
"KRN",8994,2891,3,10,0)
where 99 means an exception has occurred and text is a description of the
"KRN",8994,2891,3,11,0)
exception.
"KRN",8994,2892,-1)
0^7
"KRN",8994,2892,0)
VPS GET DFN^GETDFN^VPSRPC5^1^P^0^^^^^1
"KRN",8994,2892,1,0)
^8994.01^2^2^3130501^^^
"KRN",8994,2892,1,1,0)
Called by the Vetlink Kiosk system.  Patient SSN is the input value.  
"KRN",8994,2892,1,2,0)
Returns patient DFN associated with SSN on record.
"KRN",8994,2892,2,0)
^8994.02A^1^1
"KRN",8994,2892,2,1,0)
VPSSN^1^12^1^2
"KRN",8994,2892,2,"B","VPSSN",1)

"KRN",8994,2892,2,"PARAMSEQ",2,1)

"KRN",8994,2892,3,0)
^8994.03^8^8^3130501^^
"KRN",8994,2892,3,1,0)
Patient DFN will be returned.  Otherwise if no record found using the 
"KRN",8994,2892,3,2,0)
passed in SSN value then exception value is returned.
"KRN",8994,2892,3,3,0)
 
"KRN",8994,2892,3,4,0)
Success:
"KRN",8994,2892,3,5,0)
="1^"_DFN
"KRN",8994,2892,3,6,0)
 
"KRN",8994,2892,3,7,0)
Exception:
"KRN",8994,2892,3,8,0)
="99^"_exception text
"KRN",8994,2894,-1)
0^2
"KRN",8994,2894,0)
VPS FULLSSN^FULLSSN^VPSRPC5^2^R^0
"KRN",8994,2894,1,0)
^8994.01^1^1^3120915^^^
"KRN",8994,2894,1,1,0)
Returns a list of patients with SSNs that match the value stored in ID.
"KRN",8994,2894,2,0)
^8994.02A^1^1
"KRN",8994,2894,2,1,0)
SSN^1^10^1^1
"KRN",8994,2894,2,1,1,0)
^8994.021^1^1^3120915^^
"KRN",8994,2894,2,1,1,1,0)
Patient's 9-digit SSN value.
"KRN",8994,2894,2,"B","SSN",1)

"KRN",8994,2894,2,"PARAMSEQ",1,1)

"KRN",8994,2894,3,0)
^8994.03^4^4^3120915^^^
"KRN",8994,2894,3,1,0)
LST is an array passed by reference and will contain a list of patients
"KRN",8994,2894,3,2,0)
 that have an SSN matching the value in SSN.  The results will have
"KRN",8994,2894,3,3,0)
 for each matching patient the patient's IEN in file #2, full name,
"KRN",8994,2894,3,4,0)
 date of birth, and SSN.
"KRN",8994,2902,-1)
0^12
"KRN",8994,2902,0)
VPS LAST5^LAST5^VPSRPC5^2^R^0^^^1
"KRN",8994,2902,1,0)
^^2^2^3120915^
"KRN",8994,2902,1,1,0)
 Returns a list of patients matching LastNameInitial_Last4SSN based on
"KRN",8994,2902,1,2,0)
Restricted Patient List.
"KRN",8994,2902,2,0)
^8994.02A^1^1
"KRN",8994,2902,2,1,0)
VPSID^1^30^1^1
"KRN",8994,2902,2,1,1,0)
^8994.021^2^2^3120915^^
"KRN",8994,2902,2,1,1,1,0)
String literal containing patient's last name initial and last 4-digits of
"KRN",8994,2902,2,1,1,2,0)
the SSN i.e., "T9999".
"KRN",8994,2902,2,"B","VPSID",1)

"KRN",8994,2902,2,"PARAMSEQ",1,1)

"KRN",8994,2902,3,0)
^^3^3^3120915^
"KRN",8994,2902,3,1,0)
LIST is an array, passed by reference, containing patients with last name
"KRN",8994,2902,3,2,0)
initial and last 4-digits that match the input parameter, ID, value. Each
"KRN",8994,2902,3,3,0)
element of list will contain the IEN^FULLNAME^DOB^SSN.
"KRN",8994,2903,-1)
0^13
"KRN",8994,2903,0)
VPS LIST ALL^LISTALL^VPSRPC5^2^R^0^^^1
"KRN",8994,2903,1,0)
^8994.01^19^19^3121213^^
"KRN",8994,2903,1,1,0)
Returns a list of patients with names start with (** NOT PREFIXED BY **) 
"KRN",8994,2903,1,2,0)
the input value. Only 44 records will be returned to the caller.
"KRN",8994,2903,1,3,0)
 
"KRN",8994,2903,1,4,0)
e.q: 
"KRN",8994,2903,1,5,0)
If Patient File contains patient names 'AA', 'AB', 'BB', 'BC, 'CC', 'CD'
"KRN",8994,2903,1,6,0)
in this order and caller passes in 'A', all of those patients will be
"KRN",8994,2903,1,7,0)
included in the list.
"KRN",8994,2903,1,8,0)
If 'GG', 'KK', 'LL' are the 44th, 45th, and 46th patients in the 
"KRN",8994,2903,1,9,0)
patient name order, 'KK' and 'LL' will not be included.
"KRN",8994,2903,1,10,0)
 
"KRN",8994,2903,1,11,0)
To get the next patients, caller must request the next batch of 44 
"KRN",8994,2903,1,12,0)
records. For this reason, this RPC accepts two different format of
"KRN",8994,2903,1,13,0)
'LIST FROM' text:
"KRN",8994,2903,1,14,0)
 
"KRN",8994,2903,1,15,0)
1. FROM = PATIENT NAME. This format will return records start with 
"KRN",8994,2903,1,16,0)
(** NOT PREFIXED BY **) FROM (PATIENT NAME)
"KRN",8994,2903,1,17,0)
 
"KRN",8994,2903,1,18,0)
2. FROM = LAST IEN^LAST PATIENT NAME. This format with return the 
"KRN",8994,2903,1,19,0)
next batch of 44 records after the LAST PATIENT NAME.
"KRN",8994,2903,2,0)
^8994.02A^7^2
"KRN",8994,2903,2,1,0)
FROM^1^30^1^1
"KRN",8994,2903,2,1,1,0)
^^3^3^3120915^
"KRN",8994,2903,2,1,1,1,0)
Contains the patient's name or contains the patient's file #2 IEN and
"KRN",8994,2903,2,1,1,2,0)
name. Name part of the input may be a partial or full name.  Examples:  
"KRN",8994,2903,2,1,1,3,0)
"DOE,J"  OR "99999^DOE,J".
"KRN",8994,2903,2,2,0)
DIR^1^2^1^2
"KRN",8994,2903,2,2,1,0)
^8994.021^2^2^3120915^^
"KRN",8994,2903,2,2,1,1,0)
The value of DIR can be 1 or -1.  This parameter determines the $ORDER 
"KRN",8994,2903,2,2,1,2,0)
search direction, 1 is ascending and -1 is descending.
"KRN",8994,2903,2,6,0)
FROM^1^30^1^1
"KRN",8994,2903,2,6,1,0)
^8994.021^14^14^3121213^^
"KRN",8994,2903,2,6,1,1,0)
FORM is the 'Start With' or 'List From' input parametr. This is 
"KRN",8994,2903,2,6,1,2,0)
**NOT** a 'Prefixed by' input parameter.
"KRN",8994,2903,2,6,1,3,0)
This is a required field and can have two different formats.
"KRN",8994,2903,2,6,1,4,0)
 
"KRN",8994,2903,2,6,1,5,0)
1. FORM  = PATIENT NAME. This format will return a batch of 44 
"KRN",8994,2903,2,6,1,6,0)
patient records in patient name order start with PATIENT NAME. This is 
"KRN",8994,2903,2,6,1,7,0)
*NOT* a 'Prefixed by' input parameter. Any records in that batch 
"KRN",8994,2903,2,6,1,8,0)
including patient names *not* prefixed by the FORM will be included.
"KRN",8994,2903,2,6,1,9,0)
 
"KRN",8994,2903,2,6,1,10,0)
2. FORM = LAST IEN^LAST PATIENT NAME. This format is to provide a 
"KRN",8994,2903,2,6,1,11,0)
caller to get the next batch of 44 records. The list returned will 
"KRN",8994,2903,2,6,1,12,0)
NOT include the LAST PATIENT NAME. Commonly, RPC caller will set LAST 
"KRN",8994,2903,2,6,1,13,0)
IEN^LAST PATIENT NAME with the last record returned in the previous RPC 
"KRN",8994,2903,2,6,1,14,0)
call.
"KRN",8994,2903,2,7,0)
DIR^1^2^1^2
"KRN",8994,2903,2,7,1,0)
^8994.021^3^3^3121213^^
"KRN",8994,2903,2,7,1,1,0)
Input parameter DIR determines the order of the output array returned. The
"KRN",8994,2903,2,7,1,2,0)
value is either 1 (ascending order = default value) or -1 (
"KRN",8994,2903,2,7,1,3,0)
descending order).
"KRN",8994,2903,2,"B","DIR",2)

"KRN",8994,2903,2,"B","DIR",7)

"KRN",8994,2903,2,"B","FROM",1)

"KRN",8994,2903,2,"B","FROM",6)

"KRN",8994,2903,2,"PARAMSEQ",1,1)

"KRN",8994,2903,2,"PARAMSEQ",1,6)

"KRN",8994,2903,2,"PARAMSEQ",2,2)

"KRN",8994,2903,2,"PARAMSEQ",2,7)

"KRN",8994,2903,3,0)
^8994.03^2^2^3121213^^^^
"KRN",8994,2903,3,1,0)
The parameter Y is an array passed by reference and will contain a list of
"KRN",8994,2903,3,2,0)
patients whose NAME or IEN^NAME match the input value stored in FROM.
"KRN",8994,3385,-1)
0^11
"KRN",8994,3385,0)
VPS GET2 PATIENT DEMOGRAPHIC^GETDATA2^VPSRPC1^2^P^0^^1^1
"KRN",8994,3385,1,0)
^^1^1^3130306^
"KRN",8994,3385,1,1,0)
Called by the Vetlink Kiosk system. The RPC will accept two input parameters which are the patient SSN or DFN and the patient type. The RPC returns the patient demographics,insurance, and up-coming appointments.
"KRN",8994,3385,2,0)
^8994.02A^2^2
"KRN",8994,3385,2,1,0)
VPSNUM^1^12^1^1
"KRN",8994,3385,2,1,1,0)
^^1^1^3130306^
"KRN",8994,3385,2,1,1,1,0)
Patient Social Security Number or Patient IEN.
"KRN",8994,3385,2,2,0)
VPSTYP^1^10^1^2
"KRN",8994,3385,2,2,1,0)
^^1^1^3130306^
"KRN",8994,3385,2,2,1,1,0)
SSN or DFN
"KRN",8994,3385,2,"B","VPSNUM",1)

"KRN",8994,3385,2,"B","VPSTYP",2)

"KRN",8994,3385,2,"PARAMSEQ",1,1)

"KRN",8994,3385,2,"PARAMSEQ",2,2)

"MBREQ")
0
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",515,-1)
1^1
"PKG",515,0)
VPS KIOSK^VPS^RPC components that support VPS Kiosk.
"PKG",515,20,0)
^9.402P^^
"PKG",515,22,0)
^9.49I^1^1
"PKG",515,22,1,0)
1.0
"PKG",515,22,1,"PAH",1,0)
2^3131118^123457008
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
6
"RTN","VPSRPC1")
0^13^B195601675^B145653820
"RTN","VPSRPC1",1,0)
VPSRPC1  ;BPOIFO/EL,WOIFO/BT - Patient Demographic and Appointment RPC;11/20/11 15:30
"RTN","VPSRPC1",2,0)
 ;;1.0;VA POINT OF SERVICE (KIOSKS);**1,2**;Oct 21, 2011;Build 41
"RTN","VPSRPC1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPSRPC1",4,0)
 ;
"RTN","VPSRPC1",5,0)
 ; External Reference DBIA#
"RTN","VPSRPC1",6,0)
 ; ------------------------
"RTN","VPSRPC1",7,0)
 ; #2462 - ^DGEN( reference       (Controlled Sub) 
"RTN","VPSRPC1",8,0)
 ; #4425 - ^DGS( references       (Controlled Sub)
"RTN","VPSRPC1",9,0)
 ; #10035 - ^DPT( references      (Supported)
"RTN","VPSRPC1",10,0)
 ; #10040 - ^SC( references       (Supported)
"RTN","VPSRPC1",11,0)
 ; #2052 - DID call               (Supported)
"RTN","VPSRPC1",12,0)
 ; #2056 - DIQ call               (Supported)
"RTN","VPSRPC1",13,0)
 ; #3402 - DGSEC4 call            (Supported)
"RTN","VPSRPC1",14,0)
 ; #3403 - DGSEC4 call            (Supported)
"RTN","VPSRPC1",15,0)
 ; #4419 - IBBAPI call            (Supported)
"RTN","VPSRPC1",16,0)
 ; #2701 - MPIF001 call           (Supported)
"RTN","VPSRPC1",17,0)
 ; #4433 - SDAMA301 call          (Supported)
"RTN","VPSRPC1",18,0)
 ; #10061 - VADPT call            (Supported)
"RTN","VPSRPC1",19,0)
 ; #10103 - XLFDT call            (Supported)
"RTN","VPSRPC1",20,0)
 ; #10104 - XLFSTR call           (Supported)
"RTN","VPSRPC1",21,0)
 ; #4289 - PRCAHV call            (Controlled Sub)
"RTN","VPSRPC1",22,0)
 ; #3860 - DGPFAPI call           (Controlled Sub)
"RTN","VPSRPC1",23,0)
 ; #2701 - MPIF001                (Supported)
"RTN","VPSRPC1",24,0)
 ; #5888 - RPCVIC^DPTLK           (Controlled Sub)
"RTN","VPSRPC1",25,0)
 Q
"RTN","VPSRPC1",26,0)
GETCLN(VPSARR,CLNAM) ; VPS GET CLINIC - RPC CLINIC NAME ENTRY
"RTN","VPSRPC1",27,0)
 ; VPSARR - passed in by reference; return array of clinics that matched input string (CLNAM)
"RTN","VPSRPC1",28,0)
 ; CLNAM - partial or full name of clinic; 
"RTN","VPSRPC1",29,0)
 ; Called by Vetlink Kiosk system.     
"RTN","VPSRPC1",30,0)
 ; The RPC will accept 2 parameters.  The first parameter represents the 
"RTN","VPSRPC1",31,0)
 ; return value as required by RPC Broker, and the 2nd parameter is
"RTN","VPSRPC1",32,0)
 ; single input value representing the name of the clinic (full or partial 
"RTN","VPSRPC1",33,0)
 ; name).  The output produced will be an array that returns all the 
"RTN","VPSRPC1",34,0)
 ; possible matches for the clinic (one to many clinics).  Values returned 
"RTN","VPSRPC1",35,0)
 ; will be the name of the clinic and the ien of the clinic.
"RTN","VPSRPC1",36,0)
 N CNT,VPSCLN,VPSCNAM,VPSFL,VPSIEN,VPSUPNAM,X,Y
"RTN","VPSRPC1",37,0)
 S CNT=0 K VPSARR
"RTN","VPSRPC1",38,0)
 I $G(CLNAM)="" S X="-1^CLINIC NAME NOT SENT" D WR G QUIT
"RTN","VPSRPC1",39,0)
 S VPSUPNAM=$$UP^XLFSTR(CLNAM)
"RTN","VPSRPC1",40,0)
 S VPSCNAM="",VPSFL=44
"RTN","VPSRPC1",41,0)
 F   S VPSCNAM=$O(^SC("B",VPSCNAM)) Q:$G(VPSCNAM)=""  I VPSCNAM[VPSUPNAM D
"RTN","VPSRPC1",42,0)
 . S VPSCLN="" F   S VPSCLN=$O(^SC("B",VPSCNAM,VPSCLN)) Q:$G(VPSCLN)=""  D
"RTN","VPSRPC1",43,0)
 . . S VPSIEN=VPSCLN
"RTN","VPSRPC1",44,0)
 . . S X=$$SET(VPSFL,VPSIEN,".001",VPSCLN,"CLINIC NUMBER") D WR
"RTN","VPSRPC1",45,0)
 . . S X=$$SET(VPSFL,VPSIEN,".01",VPSCNAM) D WR
"RTN","VPSRPC1",46,0)
 . . S Y=$$GET1^DIQ(VPSFL,VPSCLN_",",10,"E"),X=$$SET(VPSFL,VPSIEN,10,Y) D WR
"RTN","VPSRPC1",47,0)
 I $G(CNT)'>1 S X="-1^CLINIC COULD NOT BE FOUND." D WR G QUIT
"RTN","VPSRPC1",48,0)
 Q
"RTN","VPSRPC1",49,0)
 ;
"RTN","VPSRPC1",50,0)
GETDATA(VPSARR,SSN) ; VPS GET PATIENT DEMOGRAPHIC - RPC SSN ENTRY
"RTN","VPSRPC1",51,0)
 ; This RPC is called  by the Vetlink Kiosk (point of service) system.  
"RTN","VPSRPC1",52,0)
 ; Given Patient SSN, this RPC returns the patient demographics,insurance,and up-coming appointments.
"RTN","VPSRPC1",53,0)
 ;
"RTN","VPSRPC1",54,0)
 ; INPUT
"RTN","VPSRPC1",55,0)
 ;   SSN    - patient SSN 
"RTN","VPSRPC1",56,0)
 ; OUTPUT
"RTN","VPSRPC1",57,0)
 ;   VPSARR - passed in by reference; return array of patient demographics,appts
"RTN","VPSRPC1",58,0)
 ;
"RTN","VPSRPC1",59,0)
 K VPSARR
"RTN","VPSRPC1",60,0)
 N X
"RTN","VPSRPC1",61,0)
 N CNT S CNT=0
"RTN","VPSRPC1",62,0)
 ; 
"RTN","VPSRPC1",63,0)
 I $G(SSN)="" S X="-1"_U_"SSN NOT SENT." D WR Q
"RTN","VPSRPC1",64,0)
 S VPSSSN=$TR(SSN,"- ")
"RTN","VPSRPC1",65,0)
 I VPSSSN'?1.N S X="-1"_U_"SSN SHOULD BE NUMERIC: "_SSN D WR Q
"RTN","VPSRPC1",66,0)
 N DFN S DFN=$O(^DPT("SSN",VPSSSN,0))
"RTN","VPSRPC1",67,0)
 I +DFN'>0 S X="-1"_U_"NO PATIENT FOUND WITH SSN: "_SSN D WR Q
"RTN","VPSRPC1",68,0)
 D GETPAT(.VPSARR,DFN)
"RTN","VPSRPC1",69,0)
 Q
"RTN","VPSRPC1",70,0)
 ;
"RTN","VPSRPC1",71,0)
GETDATA2(VPSARR,VPSNUM,VPSTYP) ; VPS GET2 PATIENT DEMOGRAPHIC - RPC SSN/DFN/ICN/VIC/CAC ENTRY
"RTN","VPSRPC1",72,0)
 ; This RPC is called  by the Vetlink Kiosk (point of service) system.  
"RTN","VPSRPC1",73,0)
 ; Given Patient SSN or DFN or ICN or VIC/CAC, this RPC returns the patient demographics,insurance,and up-coming appointments.
"RTN","VPSRPC1",74,0)
 ;
"RTN","VPSRPC1",75,0)
 ; OUTPUT
"RTN","VPSRPC1",76,0)
 ;   VPSARR  - passed in by reference; return array of patient demographics,appts
"RTN","VPSRPC1",77,0)
 ; INPUT
"RTN","VPSRPC1",78,0)
 ;   VPSNUM  - Parameter Value - patient SSN OR DFN OR ICN OR VIC/CAC (REQUIRED)
"RTN","VPSRPC1",79,0)
 ;   VPSTYP  - Parameter TYPE - SSN or DFN OR ICN OR VIC/CAC (REQUIRED)
"RTN","VPSRPC1",80,0)
 ;
"RTN","VPSRPC1",81,0)
 K VPSARR
"RTN","VPSRPC1",82,0)
 N CM S CM=","
"RTN","VPSRPC1",83,0)
 N DFN,ER S ER=""
"RTN","VPSRPC1",84,0)
 ;
"RTN","VPSRPC1",85,0)
 I $G(VPSNUM)="" S VPSARR(1)="-1^SSN, DFN, ICN OR VIC/CAC IS REQUIRED" Q
"RTN","VPSRPC1",86,0)
 I $G(VPSTYP)="" S VPSARR(1)="-1^TYPE IS REQUIRED (VALID TYPE: SSN, DFN, ICN OR VIC/CAC)" Q
"RTN","VPSRPC1",87,0)
 I '$F(",SSN,DFN,ICN,VIC/CAC,",CM_VPSTYP_CM) S VPSARR(1)="-1^INVALID TYPE (VALID TYPE: SSN, DFN, ICN OR VIC/CAC)" Q
"RTN","VPSRPC1",88,0)
 ;
"RTN","VPSRPC1",89,0)
 I VPSTYP="SSN" D GETDATA(.VPSARR,VPSNUM) Q  ; get data based on SSN
"RTN","VPSRPC1",90,0)
 ; 
"RTN","VPSRPC1",91,0)
 I VPSTYP="DFN" D
"RTN","VPSRPC1",92,0)
 . S DFN=VPSNUM
"RTN","VPSRPC1",93,0)
 I VPSTYP="VIC/CAC" D
"RTN","VPSRPC1",94,0)
 . D RPCVIC^DPTLK(.DFN,VPSNUM) ; get DFN given VIC/CAC number - IA 5888
"RTN","VPSRPC1",95,0)
 . S:DFN=-1 ER="-1^NO DFN FOR VIC/CAC NUMBER"
"RTN","VPSRPC1",96,0)
 I VPSTYP="ICN" D
"RTN","VPSRPC1",97,0)
 . S DFN=$$GETDFN^MPIF001(VPSNUM) ; get DFN given ICN in the Patient file  - IA 2701
"RTN","VPSRPC1",98,0)
 . S:+DFN=-1 ER=DFN
"RTN","VPSRPC1",99,0)
 ;
"RTN","VPSRPC1",100,0)
 I ER="" D GETPAT(.VPSARR,DFN) ; get data based on DFN
"RTN","VPSRPC1",101,0)
 I ER'="" S VPSARR(1)=ER
"RTN","VPSRPC1",102,0)
 Q
"RTN","VPSRPC1",103,0)
 ;
"RTN","VPSRPC1",104,0)
GETPAT(VPSARR,DFN) ;given DFN, returns the patient demographics, insurance, and up-coming appointments.
"RTN","VPSRPC1",105,0)
 ; INPUT
"RTN","VPSRPC1",106,0)
 ;   DFN    - patient DFN
"RTN","VPSRPC1",107,0)
 ; OUTPUT
"RTN","VPSRPC1",108,0)
 ;   VPSARR - passed in by reference; return array of patient demographics,appts
"RTN","VPSRPC1",109,0)
 ;
"RTN","VPSRPC1",110,0)
 I '$D(^DPT(DFN)) S VPSARR(1)="-1"_U_"NO PATIENT FOUND WITH DFN: "_DFN Q
"RTN","VPSRPC1",111,0)
 ;
"RTN","VPSRPC1",112,0)
 N I,ICN,TMP,X,Y,VPSAPT,VPSCL,VPSCLN,VPSCNAM,VPSDA
"RTN","VPSRPC1",113,0)
 N VPSDS,VPSDT,VPSFL,VPSFLD,VPSFR,VPSIBB,VPSIBFLD,VPSICN,VPSIEN,VPSOUT
"RTN","VPSRPC1",114,0)
 N VPSREC,VPSSD,VPSTO,VADM,VAEL,VAOA,VAPA,VAPD,VACNTRY,VAERR
"RTN","VPSRPC1",115,0)
 N DGOPT,DGMSG,DGRES,ACTION
"RTN","VPSRPC1",116,0)
 N CNT S CNT=0
"RTN","VPSRPC1",117,0)
 N TODAY S TODAY=$$DT^XLFDT()
"RTN","VPSRPC1",118,0)
 ;
"RTN","VPSRPC1",119,0)
 S X=$$SET(2,DFN,".001",DFN,"DFN") D WR
"RTN","VPSRPC1",120,0)
 S VPSICN=$$GETICN^MPIF001(DFN),ICN=$P(VPSICN,"V")
"RTN","VPSRPC1",121,0)
 I $G(ICN)'="" S X=$$SET(2,DFN,"991.01",ICN) D WR
"RTN","VPSRPC1",122,0)
 D DEM,SENLOG,ELIG,ENR,ADD,OAD,IBB,APT,REC,DGS,BAL
"RTN","VPSRPC1",123,0)
 K ^TMP($J,"SDAMA301")
"RTN","VPSRPC1",124,0)
 Q
"RTN","VPSRPC1",125,0)
 ;
"RTN","VPSRPC1",126,0)
DEM ; Patient Demographic Data
"RTN","VPSRPC1",127,0)
 K VADM D DEM^VADPT
"RTN","VPSRPC1",128,0)
 I $G(VADM(1))'="" S X=$$SET(2,DFN,".01",VADM(1)) D WR
"RTN","VPSRPC1",129,0)
 S Y=$P(VADM(2),U) I $G(Y)'="" S X=$$SET(2,DFN,".09",Y) D WR
"RTN","VPSRPC1",130,0)
 S Y=$P(VADM(3),U) I $G(Y)'="" S X=$$SET(2,DFN,".03",Y) D WR  ; kiosk needs internal (FM) format for all dates
"RTN","VPSRPC1",131,0)
 S Y=$P(VADM(5),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".02",Y) D WR
"RTN","VPSRPC1",132,0)
 S Y=$P(VADM(9),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".08",Y) D WR
"RTN","VPSRPC1",133,0)
 S Y=$P(VADM(10),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".05",Y) D WR
"RTN","VPSRPC1",134,0)
 I $G(VADM(11))'="" D
"RTN","VPSRPC1",135,0)
 . S I="",VPSFL="2.06"
"RTN","VPSRPC1",136,0)
 . F  S I=$O(VADM(11,I)) Q:$G(I)=""  S Y=$P(VADM(11,I),U,2) I $G(Y)'="" D
"RTN","VPSRPC1",137,0)
 . . S VPSIEN=DFN_";"_I,X=$$SET(VPSFL,VPSIEN,".01",Y) D WR
"RTN","VPSRPC1",138,0)
 I $G(VADM(12))'="" D
"RTN","VPSRPC1",139,0)
 . S I="",VPSFL="2.02"
"RTN","VPSRPC1",140,0)
 . F  S I=$O(VADM(12,I)) Q:$G(I)=""  S Y=$P(VADM(12,I),U,2) I $G(Y)'="" D
"RTN","VPSRPC1",141,0)
 . . S VPSIEN=DFN_";"_I,X=$$SET(VPSFL,VPSIEN,".01",Y) D WR
"RTN","VPSRPC1",142,0)
 Q
"RTN","VPSRPC1",143,0)
 ;
"RTN","VPSRPC1",144,0)
SENLOG ; Check Patient Sensitive Record File-38.1
"RTN","VPSRPC1",145,0)
 K DGRES S DGOPT=U_"VPS KIOSK-PATIENT-SELF-CHECKIN",DGMSG=1
"RTN","VPSRPC1",146,0)
 D PTSEC^DGSEC4(.DGRES,DFN,DGMSG,DGOPT)
"RTN","VPSRPC1",147,0)
 I $G(DGRES(1))=0 S Y="0;NON-SENSITIVE" G WRSEN
"RTN","VPSRPC1",148,0)
 I $G(DGRES(1))=1 D  G WRSEN
"RTN","VPSRPC1",149,0)
 . S Y="1;SENSITIVE & SEC-AUDIT LOG & KIOSK MACHINE LOGIN-DUZ HOLDING SECURITY KEY"
"RTN","VPSRPC1",150,0)
 I $G(DGRES(1))=2 D  D WR Q
"RTN","VPSRPC1",151,0)
 . S ACTION=1 D NOTICE^DGSEC4(.DGRES,DFN,DGOPT,ACTION)
"RTN","VPSRPC1",152,0)
 . S Y="2;SENSITIVE & SEC-AUDIT LOG & KIOSK MACHINE LOGIN-DUZ HOLDING NOSECURITY KEY"
"RTN","VPSRPC1",153,0)
 . S X=$$SET(38.1,DFN,"IA3403",Y,"SENSITIVE")
"RTN","VPSRPC1",154,0)
 I $G(DGRES(1))=3 D  G WRSEN
"RTN","VPSRPC1",155,0)
 . S Y="3;CANNOT CHECK SENSITIVE DUE TO KIOSK MACHINE LOGIN-DUZ ACCESSING OWN RECORD"
"RTN","VPSRPC1",156,0)
 I $G(DGRES(1))=4 D  G WRSEN
"RTN","VPSRPC1",157,0)
 . S Y="4;CANNOT CHECK SENSITIVE DUE TO KIOSK MACHINE LOGIN-DUZ MISSING SSN"
"RTN","VPSRPC1",158,0)
 S Y="-1;MISSING DFN IN SENSITIVE CHECK"
"RTN","VPSRPC1",159,0)
WRSEN ;
"RTN","VPSRPC1",160,0)
 I $G(Y)'="" S X=$$SET(38.1,DFN,"IA3402",Y,"SENSITIVE") D WR
"RTN","VPSRPC1",161,0)
 Q
"RTN","VPSRPC1",162,0)
 ;
"RTN","VPSRPC1",163,0)
ELIG ;
"RTN","VPSRPC1",164,0)
 K VAEL D ELIG^VADPT
"RTN","VPSRPC1",165,0)
 S Y=$$GET1^DIQ(2,DFN_",",.381,"E")
"RTN","VPSRPC1",166,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".381",Y) D WR
"RTN","VPSRPC1",167,0)
 I $G(VAEL(5,1))'="" S Y=$P(VAEL(5,1),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".152",Y) D WR
"RTN","VPSRPC1",168,0)
 I $G(VAEL(8))'="" S Y=$P(VAEL(8),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".3611",Y) D WR
"RTN","VPSRPC1",169,0)
 I $G(VAEL(9))'="" S Y=$P(VAEL(9),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".14",Y) D WR
"RTN","VPSRPC1",170,0)
 Q
"RTN","VPSRPC1",171,0)
 ;
"RTN","VPSRPC1",172,0)
ENR ; Enrollment
"RTN","VPSRPC1",173,0)
 S X="",X=$O(^DGEN(27.11,"C",DFN,X),-1) Q:$G(X)=""
"RTN","VPSRPC1",174,0)
 S Y="",Y=$$GET1^DIQ(27.11,X_",",.04,"E")
"RTN","VPSRPC1",175,0)
 I $G(Y)'="" S X=$$SET(27.11,DFN,".04",Y) D WR
"RTN","VPSRPC1",176,0)
 Q
"RTN","VPSRPC1",177,0)
 ;
"RTN","VPSRPC1",178,0)
ADD ;
"RTN","VPSRPC1",179,0)
 K VAPA D ADD^VADPT
"RTN","VPSRPC1",180,0)
 S Y=$P(VAPA(9),U) I $G(Y)="" G SETPERM
"RTN","VPSRPC1",181,0)
 I TODAY<$G(Y) G SETPERM
"RTN","VPSRPC1",182,0)
 S Y=$P(VAPA(10),U) I $G(Y)=""!(TODAY'>$G(Y)) G SETMP
"RTN","VPSRPC1",183,0)
SETPERM ;  PERM ADDRESS
"RTN","VPSRPC1",184,0)
 I $G(VAPA(1))'="" S Y=VAPA(1) S X=$$SET(2,DFN,".111",Y) D WR
"RTN","VPSRPC1",185,0)
 I $G(VAPA(2))'="" S Y=VAPA(2) S X=$$SET(2,DFN,".112",Y) D WR
"RTN","VPSRPC1",186,0)
 I $G(VAPA(3))'="" S Y=VAPA(3) S X=$$SET(2,DFN,".113",Y) D WR
"RTN","VPSRPC1",187,0)
 I $G(VAPA(4))'="" S Y=VAPA(4) S X=$$SET(2,DFN,".114",Y) D WR
"RTN","VPSRPC1",188,0)
 S Y=$P(VAPA(5),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".115",Y) D WR
"RTN","VPSRPC1",189,0)
 S Y=$P(VAPA(7),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".117",Y) D WR
"RTN","VPSRPC1",190,0)
 I $G(VAPA(8))'="" S Y=VAPA(8) S X=$$SET(2,DFN,".131",Y) D WR
"RTN","VPSRPC1",191,0)
 S Y=$P(VAPA(11),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".1112",Y) D WR
"RTN","VPSRPC1",192,0)
 S Y=$P(VAPA(25),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".1173",Y) D WR
"RTN","VPSRPC1",193,0)
 S Y=$$GET1^DIQ(2,DFN_",",.1171,"E")
"RTN","VPSRPC1",194,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".1171",Y) D WR
"RTN","VPSRPC1",195,0)
 S Y=$$GET1^DIQ(2,DFN_",",.1172,"E")
"RTN","VPSRPC1",196,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".1172",Y) D WR
"RTN","VPSRPC1",197,0)
 S Y=$$GET1^DIQ(2,DFN_",",.121,"E")
"RTN","VPSRPC1",198,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".121",Y) D WR
"RTN","VPSRPC1",199,0)
 S Y=$$GET1^DIQ(2,DFN_",",.132,"E")
"RTN","VPSRPC1",200,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".132",Y) D WR
"RTN","VPSRPC1",201,0)
 S Y=$$GET1^DIQ(2,DFN_",",.134,"E")
"RTN","VPSRPC1",202,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".134",Y) D WR
"RTN","VPSRPC1",203,0)
 S Y=$$GET1^DIQ(2,DFN_",",.133,"E")
"RTN","VPSRPC1",204,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".133",Y) D WR
"RTN","VPSRPC1",205,0)
 Q
"RTN","VPSRPC1",206,0)
 ;
"RTN","VPSRPC1",207,0)
SETMP ; SET TEMP ADD
"RTN","VPSRPC1",208,0)
 I $G(VAPA(1))'="" S Y=VAPA(1) S X=$$SET(2,DFN,".1211",Y) D WR
"RTN","VPSRPC1",209,0)
 I $G(VAPA(2))'="" S Y=VAPA(2) S X=$$SET(2,DFN,".1212",Y) D WR
"RTN","VPSRPC1",210,0)
 I $G(VAPA(3))'="" S Y=VAPA(3) S X=$$SET(2,DFN,".1213",Y) D WR
"RTN","VPSRPC1",211,0)
 I $G(VAPA(4))'="" S Y=VAPA(4) S X=$$SET(2,DFN,".1214",Y) D WR
"RTN","VPSRPC1",212,0)
 S Y=$P(VAPA(5),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".1215",Y) D WR
"RTN","VPSRPC1",213,0)
 S Y=$P(VAPA(7),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".12111",Y) D WR
"RTN","VPSRPC1",214,0)
 I $G(VAPA(8))'="" S Y=VAPA(8) S X=$$SET(2,DFN,".1219",Y) D WR
"RTN","VPSRPC1",215,0)
 S Y=$P(VAPA(9),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".1217",Y) D WR
"RTN","VPSRPC1",216,0)
 S Y=$P(VAPA(10),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".1218",Y) D WR
"RTN","VPSRPC1",217,0)
 S Y=$P(VAPA(11),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".12112",Y) D WR
"RTN","VPSRPC1",218,0)
 S Y=$P(VAPA(25),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".1223",Y) D WR
"RTN","VPSRPC1",219,0)
 S Y=$$GET1^DIQ(2,DFN_",",.1221,"E")
"RTN","VPSRPC1",220,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".1221",Y) D WR
"RTN","VPSRPC1",221,0)
 S Y=$$GET1^DIQ(2,DFN_",",.1222,"E")
"RTN","VPSRPC1",222,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".1222",Y) D WR
"RTN","VPSRPC1",223,0)
 K VAPA S VAPA("P")="" D ADD^VADPT
"RTN","VPSRPC1",224,0)
 G SETPERM
"RTN","VPSRPC1",225,0)
 ;
"RTN","VPSRPC1",226,0)
OAD ;
"RTN","VPSRPC1",227,0)
 K VAOA S VAOA("A")=7 D OAD^VADPT    ; NOK
"RTN","VPSRPC1",228,0)
 I $G(VAOA(1))'="" S Y=VAOA(1) S X=$$SET(2,DFN,".213",Y) D WR
"RTN","VPSRPC1",229,0)
 I $G(VAOA(2))'="" S Y=VAOA(2) S X=$$SET(2,DFN,".214",Y) D WR
"RTN","VPSRPC1",230,0)
 I $G(VAOA(3))'="" S Y=VAOA(3) S X=$$SET(2,DFN,".215",Y) D WR
"RTN","VPSRPC1",231,0)
 I $G(VAOA(4))'="" S Y=VAOA(4) S X=$$SET(2,DFN,".216",Y) D WR
"RTN","VPSRPC1",232,0)
 S Y=$P(VAOA(5),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".217",Y) D WR
"RTN","VPSRPC1",233,0)
 I $G(VAOA(11))'="" S Y=$P(VAOA(11),U,2) S X=$$SET(2,DFN,".2207",Y) D WR
"RTN","VPSRPC1",234,0)
 I $G(VAOA(8))'="" S Y=VAOA(8) S X=$$SET(2,DFN,".219",Y) D WR
"RTN","VPSRPC1",235,0)
 I $G(VAOA(9))'="" S Y=VAOA(9) S X=$$SET(2,DFN,".211",Y) D WR
"RTN","VPSRPC1",236,0)
 I $G(VAOA(10))'="" S Y=VAOA(10) S X=$$SET(2,DFN,".212",Y) D WR
"RTN","VPSRPC1",237,0)
 S Y=$$GET1^DIQ(2,DFN_",",.21011,"E")
"RTN","VPSRPC1",238,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".21011",Y) D WR
"RTN","VPSRPC1",239,0)
 ;
"RTN","VPSRPC1",240,0)
 K VAOA S VAOA("A")=3 D OAD^VADPT    ; Second NOK
"RTN","VPSRPC1",241,0)
 I $G(VAOA(1))'="" S Y=VAOA(1) S X=$$SET(2,DFN,".2193",Y) D WR
"RTN","VPSRPC1",242,0)
 I $G(VAOA(2))'="" S Y=VAOA(2) S X=$$SET(2,DFN,".2194",Y) D WR
"RTN","VPSRPC1",243,0)
 I $G(VAOA(3))'="" S Y=VAOA(3) S X=$$SET(2,DFN,".2195",Y) D WR
"RTN","VPSRPC1",244,0)
 I $G(VAOA(4))'="" S Y=VAOA(4) S X=$$SET(2,DFN,".2196",Y) D WR
"RTN","VPSRPC1",245,0)
 S Y=$P(VAOA(5),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".2197",Y) D WR
"RTN","VPSRPC1",246,0)
 I $G(VAOA(11))'="" S Y=$P(VAOA(11),U,2) S X=$$SET(2,DFN,".2203",Y) D WR
"RTN","VPSRPC1",247,0)
 I $G(VAOA(8))'="" S Y=VAOA(8) S X=$$SET(2,DFN,".2199",Y) D WR
"RTN","VPSRPC1",248,0)
 I $G(VAOA(9))'="" S Y=VAOA(9) S X=$$SET(2,DFN,".2191",Y) D WR
"RTN","VPSRPC1",249,0)
 I $G(VAOA(10))'="" S Y=VAOA(10) S X=$$SET(2,DFN,".2192",Y) D WR
"RTN","VPSRPC1",250,0)
 S Y=$$GET1^DIQ(2,DFN_",",.211011,"E")
"RTN","VPSRPC1",251,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".211011",Y) D WR
"RTN","VPSRPC1",252,0)
 ;
"RTN","VPSRPC1",253,0)
 K VAOA S VAOA("A")=1 D OAD^VADPT    ; Emergency Contact
"RTN","VPSRPC1",254,0)
 I $G(VAOA(1))'="" S Y=VAOA(1) S X=$$SET(2,DFN,".333",Y) D WR
"RTN","VPSRPC1",255,0)
 I $G(VAOA(2))'="" S Y=VAOA(2) S X=$$SET(2,DFN,".334",Y) D WR
"RTN","VPSRPC1",256,0)
 I $G(VAOA(3))'="" S Y=VAOA(3) S X=$$SET(2,DFN,".335",Y) D WR
"RTN","VPSRPC1",257,0)
 I $G(VAOA(4))'="" S Y=VAOA(4) S X=$$SET(2,DFN,".336",Y) D WR
"RTN","VPSRPC1",258,0)
 S Y=$P(VAOA(5),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".337",Y) D WR
"RTN","VPSRPC1",259,0)
 I $G(VAOA(11))'="" S Y=$P(VAOA(11),U,2) S X=$$SET(2,DFN,".2201",Y) D WR
"RTN","VPSRPC1",260,0)
 I $G(VAOA(8))'="" S Y=VAOA(8) S X=$$SET(2,DFN,".339",Y) D WR
"RTN","VPSRPC1",261,0)
 I $G(VAOA(9))'="" S Y=VAOA(9) S X=$$SET(2,DFN,".331",Y) D WR
"RTN","VPSRPC1",262,0)
 I $G(VAOA(10))'="" S Y=VAOA(10) S X=$$SET(2,DFN,".332",Y) D WR
"RTN","VPSRPC1",263,0)
 S Y=$$GET1^DIQ(2,DFN_",",.33011,"E")
"RTN","VPSRPC1",264,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".33011",Y) D WR
"RTN","VPSRPC1",265,0)
 ;
"RTN","VPSRPC1",266,0)
 K VAOA S VAOA("A")=4 D OAD^VADPT    ; Second Emergency Contact
"RTN","VPSRPC1",267,0)
 I $G(VAOA(1))'="" S Y=VAOA(1) S X=$$SET(2,DFN,".3313",Y) D WR
"RTN","VPSRPC1",268,0)
 I $G(VAOA(2))'="" S Y=VAOA(2) S X=$$SET(2,DFN,".3314",Y) D WR
"RTN","VPSRPC1",269,0)
 I $G(VAOA(3))'="" S Y=VAOA(3) S X=$$SET(2,DFN,".3315",Y) D WR
"RTN","VPSRPC1",270,0)
 I $G(VAOA(4))'="" S Y=VAOA(4) S X=$$SET(2,DFN,".3316",Y) D WR
"RTN","VPSRPC1",271,0)
 S Y=$P(VAOA(5),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".3317",Y) D WR
"RTN","VPSRPC1",272,0)
 I $G(VAOA(11))'="" S Y=$P(VAOA(11),U,2) S X=$$SET(2,DFN,".2204",Y) D WR
"RTN","VPSRPC1",273,0)
 I $G(VAOA(8))'="" S Y=VAOA(8) S X=$$SET(2,DFN,".3319",Y) D WR
"RTN","VPSRPC1",274,0)
 I $G(VAOA(9))'="" S Y=VAOA(9) S X=$$SET(2,DFN,".3311",Y) D WR
"RTN","VPSRPC1",275,0)
 I $G(VAOA(10))'="" S Y=VAOA(10) S X=$$SET(2,DFN,".3312",Y) D WR
"RTN","VPSRPC1",276,0)
 S Y=$$GET1^DIQ(2,DFN_",",.331011,"E")
"RTN","VPSRPC1",277,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".331011",Y) D WR
"RTN","VPSRPC1",278,0)
 ;
"RTN","VPSRPC1",279,0)
 K VAOA S VAOA("A")=5 D OAD^VADPT    ; Patient Employer
"RTN","VPSRPC1",280,0)
 I $G(VAOA(8))'="" S Y=VAOA(8) S X=$$SET(2,DFN,".3119",Y) D WR
"RTN","VPSRPC1",281,0)
 I $G(VAOA(9))'="" S Y=VAOA(9) S X=$$SET(2,DFN,".3111",Y) D WR
"RTN","VPSRPC1",282,0)
 K VAPD D OPD^VADPT
"RTN","VPSRPC1",283,0)
 S Y=$P(VAPD(7),U,2) I $G(Y)'="" S X=$$SET(2,DFN,".31115",Y) D WR
"RTN","VPSRPC1",284,0)
 S Y=$$GET1^DIQ(2,DFN_",",.31116,"E")
"RTN","VPSRPC1",285,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".31116",Y) D WR
"RTN","VPSRPC1",286,0)
 ;
"RTN","VPSRPC1",287,0)
 K VAOA S VAOA("A")=6 D OAD^VADPT    ; Spouse's Employer
"RTN","VPSRPC1",288,0)
 I $G(VAOA(8))'="" S Y=VAOA(8) S X=$$SET(2,DFN,".258",Y) D WR
"RTN","VPSRPC1",289,0)
 I $G(VAOA(9))'="" S Y=VAOA(9) S X=$$SET(2,DFN,".251",Y) D WR
"RTN","VPSRPC1",290,0)
 S Y=$$GET1^DIQ(2,DFN_",",.2515,"E")
"RTN","VPSRPC1",291,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".2515",Y) D WR
"RTN","VPSRPC1",292,0)
 S Y=$$GET1^DIQ(2,DFN_",",.2516,"E")
"RTN","VPSRPC1",293,0)
 I $G(Y)'="" S X=$$SET(2,DFN,".2516",Y) D WR
"RTN","VPSRPC1",294,0)
 Q
"RTN","VPSRPC1",295,0)
 ;
"RTN","VPSRPC1",296,0)
IBB ; Insurance Info
"RTN","VPSRPC1",297,0)
 S VPSIBFLD="1,10,11,13,14,21" K VPSIBB
"RTN","VPSRPC1",298,0)
 S Y=$$INSUR^IBBAPI(DFN,,"ABR",.VPSIBB,VPSIBFLD)
"RTN","VPSRPC1",299,0)
 I $G(Y)'>0 Q
"RTN","VPSRPC1",300,0)
 S (I,Y)=""
"RTN","VPSRPC1",301,0)
IBB2 ;
"RTN","VPSRPC1",302,0)
 S I=$O(VPSIBB("IBBAPI","INSUR",I)) Q:$G(I)=""
"RTN","VPSRPC1",303,0)
 S VPSFL="2.312",VPSIEN=DFN_";"_I
"RTN","VPSRPC1",304,0)
 ; Insurance Company Name
"RTN","VPSRPC1",305,0)
 S Y=$G(VPSIBB("IBBAPI","INSUR",I,1))
"RTN","VPSRPC1",306,0)
 I $G(Y)'="" S Y=$P(Y,U,2) S X=$$SET(36,VPSIEN,.01,Y) D WR
"RTN","VPSRPC1",307,0)
 ; Policy Effective Date
"RTN","VPSRPC1",308,0)
 S Y=$G(VPSIBB("IBBAPI","INSUR",I,10))
"RTN","VPSRPC1",309,0)
 I $G(Y)'="" S X=$$SET(VPSFL,VPSIEN,8,Y) D WR
"RTN","VPSRPC1",310,0)
 ; Policy Expiration Date
"RTN","VPSRPC1",311,0)
 S Y=$G(VPSIBB("IBBAPI","INSUR",I,11))
"RTN","VPSRPC1",312,0)
 I $G(Y)'="" S X=$$SET(VPSFL,VPSIEN,3,Y) D WR
"RTN","VPSRPC1",313,0)
 ; Subscribe Name
"RTN","VPSRPC1",314,0)
 S Y=$G(VPSIBB("IBBAPI","INSUR",I,13))
"RTN","VPSRPC1",315,0)
 I $G(Y)'="" S X=$$SET(VPSFL,VPSIEN,17,Y) D WR
"RTN","VPSRPC1",316,0)
 ; Subscribe ID
"RTN","VPSRPC1",317,0)
 S Y=$G(VPSIBB("IBBAPI","INSUR",I,14))
"RTN","VPSRPC1",318,0)
 I $G(Y)'="" S X=$$SET(VPSFL,VPSIEN,1,Y) D WR
"RTN","VPSRPC1",319,0)
 G IBB2
"RTN","VPSRPC1",320,0)
 ;
"RTN","VPSRPC1",321,0)
APT ;  Appointment Info
"RTN","VPSRPC1",322,0)
 K VPSSD S Y=""
"RTN","VPSRPC1",323,0)
 S VPSFR=TODAY,VPSTO=TODAY+20000,VPSSD(1)=VPSFR_":"_VPSTO
"RTN","VPSRPC1",324,0)
 S VPSSD(3)="R;I;NS;NSR;R;CP;CPR;CC;CCR;NT"
"RTN","VPSRPC1",325,0)
 S VPSSD(4)=DFN
"RTN","VPSRPC1",326,0)
 S VPSSD("FLDS")="1;2;3;10;16;19;20;21;22"
"RTN","VPSRPC1",327,0)
 S Y=$$SDAPI^SDAMA301(.VPSSD)
"RTN","VPSRPC1",328,0)
 I $G(Y)'>0 Q
"RTN","VPSRPC1",329,0)
SD10 S (VPSCL,VPSIEN)=""
"RTN","VPSRPC1",330,0)
SD20 S VPSCL=$O(^TMP($J,"SDAMA301",DFN,VPSCL)) Q:VPSCL=""
"RTN","VPSRPC1",331,0)
 S VPSDT=""
"RTN","VPSRPC1",332,0)
SD30 ;     
"RTN","VPSRPC1",333,0)
 S VPSDT=$O(^TMP($J,"SDAMA301",DFN,VPSCL,VPSDT)) G:VPSDT="" SD20
"RTN","VPSRPC1",334,0)
 S VPSAPT=^TMP($J,"SDAMA301",DFN,VPSCL,VPSDT)
"RTN","VPSRPC1",335,0)
 S VPSIEN=DFN_";"_VPSCL_";"_VPSDT
"RTN","VPSRPC1",336,0)
 ;
"RTN","VPSRPC1",337,0)
 ;   Clinic Info
"RTN","VPSRPC1",338,0)
 ; APPT CLINIC IEN/NAME #2
"RTN","VPSRPC1",339,0)
 S Y=$P(VPSAPT,U,2),VPSCLN=$P(Y,";"),VPSCNAM=$P(Y,";",2)
"RTN","VPSRPC1",340,0)
 I $G(VPSCLN)'=""  S X=$$SET(2.98,VPSIEN,".01",VPSCLN) D WR
"RTN","VPSRPC1",341,0)
 S VPSFL="44"
"RTN","VPSRPC1",342,0)
 I $G(VPSCNAM)'="" S X=$$SET(VPSFL,VPSIEN,".01",VPSCNAM) D WR
"RTN","VPSRPC1",343,0)
 ; HOSPITAL PHYSICAL LOCATION
"RTN","VPSRPC1",344,0)
 S Y=$$GET1^DIQ(VPSFL,VPSCLN_",",10,"E")
"RTN","VPSRPC1",345,0)
 I $G(Y)'="" S X=$$SET(VPSFL,VPSIEN,10,Y) D WR
"RTN","VPSRPC1",346,0)
 ;
"RTN","VPSRPC1",347,0)
 ;   Appt Info
"RTN","VPSRPC1",348,0)
 ; APPT DATE/TIME #1
"RTN","VPSRPC1",349,0)
 S VPSFL="2.98"
"RTN","VPSRPC1",350,0)
 S Y=$P(VPSAPT,U,1) I $G(Y)'="" D
"RTN","VPSRPC1",351,0)
 . S X=$$SET(VPSFL,VPSIEN,".001",Y,"APPOINTMENT DATE/TIME") D WR
"RTN","VPSRPC1",352,0)
 ; CURRENT STATUS #22
"RTN","VPSRPC1",353,0)
 S Y=$P($P(VPSAPT,U,22),";",3) I $G(Y)'="" S X=$$SET(VPSFL,VPSIEN,100,Y) D WR
"RTN","VPSRPC1",354,0)
 ; APPT TYPE IEN/NAME #10
"RTN","VPSRPC1",355,0)
 S Y=$P($P(VPSAPT,U,10),";",2) I $G(Y)'="" S X=$$SET(44,VPSIEN,2507,Y) D WR
"RTN","VPSRPC1",356,0)
 ; DATE APPT MADE #16
"RTN","VPSRPC1",357,0)
 S Y=$P(VPSAPT,U,16) I $G(Y)'="" S X=$$SET(VPSFL,VPSIEN,20,Y) D WR
"RTN","VPSRPC1",358,0)
 ; EKG DATE/TIME #19
"RTN","VPSRPC1",359,0)
 S Y=$P(VPSAPT,U,19) I $G(Y)'="" S X=$$SET(VPSFL,VPSIEN,7,Y) D WR
"RTN","VPSRPC1",360,0)
 ; X-RAY DATE/TIME #20
"RTN","VPSRPC1",361,0)
 S Y=$P(VPSAPT,U,20) I $G(Y)'=""  S X=$$SET(VPSFL,VPSIEN,6,Y) D WR
"RTN","VPSRPC1",362,0)
 ; LAB DATE/TIME #21
"RTN","VPSRPC1",363,0)
 S Y=$P(VPSAPT,U,21) I $G(Y)'=""  S X=$$SET(VPSFL,VPSIEN,5,Y) D WR
"RTN","VPSRPC1",364,0)
 G SD30
"RTN","VPSRPC1",365,0)
 ;
"RTN","VPSRPC1",366,0)
REC ; Patient Record Flag
"RTN","VPSRPC1",367,0)
 N PRF,NPRF,PRFFIL,PRFLAG
"RTN","VPSRPC1",368,0)
 S NPRF=$$GETACT^DGPFAPI(DFN,"VPSREC") ;Retrieve all ACTIVE Patient record flag assignments
"RTN","VPSRPC1",369,0)
 ; Store all Patient Record Flags and Assigment Narratives into result array (VPSARR)
"RTN","VPSRPC1",370,0)
 F PRF=1:1:NPRF D
"RTN","VPSRPC1",371,0)
 . ;store flag type
"RTN","VPSRPC1",372,0)
 . S Y=$P(VPSREC(PRF,"FLAGTYPE"),U,2)
"RTN","VPSRPC1",373,0)
 . S PRFLAG=$P(VPSREC(PRF,"FLAG"),U)
"RTN","VPSRPC1",374,0)
 . I Y'="",PRFLAG'="" D
"RTN","VPSRPC1",375,0)
 . . S PRFFIL=$P($P(PRFLAG,"DGPF(",2),",")
"RTN","VPSRPC1",376,0)
 . . I PRFFIL'="" S X=$$SET(PRFFIL,DFN,".03",Y,"FLAG TYPE") D WR
"RTN","VPSRPC1",377,0)
 . ;store flag name
"RTN","VPSRPC1",378,0)
 . S Y=$P(VPSREC(PRF,"FLAG"),U,2) I Y'="" S X=$$SET("26.13",DFN,".02",Y) D WR
"RTN","VPSRPC1",379,0)
 . D STNARR(PRF) ; Store ASSIGNMENT NARRATIVE (word-processing) for this counter
"RTN","VPSRPC1",380,0)
 Q
"RTN","VPSRPC1",381,0)
 ;
"RTN","VPSRPC1",382,0)
STNARR(PRF) ; Store ASSIGNMENT NARRATIVE (word-processing) into result array (VPSARR)
"RTN","VPSRPC1",383,0)
 N NARRCNT S NARRCNT=""
"RTN","VPSRPC1",384,0)
 F  S NARRCNT=$O(VPSREC(PRF,"NARR",NARRCNT)) Q:NARRCNT=""  D
"RTN","VPSRPC1",385,0)
 . S Y=$G(VPSREC(PRF,"NARR",NARRCNT,0)) I $G(Y)'="" S X=$$SET("26.132",DFN,".01",Y) D WR
"RTN","VPSRPC1",386,0)
 Q
"RTN","VPSRPC1",387,0)
 ;
"RTN","VPSRPC1",388,0)
DGS ; Pre-Registration Audit
"RTN","VPSRPC1",389,0)
 S VPSFL="41.41"
"RTN","VPSRPC1",390,0)
 S (TMP,Y)="",TMP=$O(^DGS(VPSFL,"ADC",DFN,TMP),-1) I $G(TMP)="" Q
"RTN","VPSRPC1",391,0)
 I $G(TMP)'="" S X=$$SET(VPSFL,DFN,1,TMP) D WR
"RTN","VPSRPC1",392,0)
 Q 
"RTN","VPSRPC1",393,0)
 ;
"RTN","VPSRPC1",394,0)
BAL ; BALANCE-OWED
"RTN","VPSRPC1",395,0)
 S X=$$BALANCE^PRCAHV(.Y,ICN,"ALL") I $G(X)=1 S X=$$SET(430,DFN,"COMPUTED",Y,"BALANCE") D WR
"RTN","VPSRPC1",396,0)
 Q
"RTN","VPSRPC1",397,0)
 ;
"RTN","VPSRPC1",398,0)
SET(VPSFL,VPSIEN,VPSFLD,VPSDA,VPSDS) ;
"RTN","VPSRPC1",399,0)
 S X="" K VPSOUT
"RTN","VPSRPC1",400,0)
 I $G(VPSDS)="" D FIELD^DID(VPSFL,VPSFLD,"","LABEL","VPSOUT") S VPSDS=VPSOUT("LABEL")
"RTN","VPSRPC1",401,0)
 S X=VPSFL_U_VPSIEN_U_VPSFLD_U_VPSDA_U_VPSDS
"RTN","VPSRPC1",402,0)
 Q X
"RTN","VPSRPC1",403,0)
 ;
"RTN","VPSRPC1",404,0)
WR ;
"RTN","VPSRPC1",405,0)
 S CNT=CNT+1
"RTN","VPSRPC1",406,0)
 S VPSARR(CNT)=X
"RTN","VPSRPC1",407,0)
 Q
"RTN","VPSRPC1",408,0)
 ;
"RTN","VPSRPC1",409,0)
QUIT Q
"RTN","VPSRPC2")
0^14^B128001842^n/a
"RTN","VPSRPC2",1,0)
VPSRPC2  ;DALOI/KML - Update of Patient Demographics RPC;11/20/11 15:30
"RTN","VPSRPC2",2,0)
 ;;1.0;VA POINT OF SERVICE (KIOSKS);**2**;Oct 21, 2011;Build 41
"RTN","VPSRPC2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPSRPC2",4,0)
 ;
"RTN","VPSRPC2",5,0)
 ; External Reference DBIA#
"RTN","VPSRPC2",6,0)
 ; ------------------------
"RTN","VPSRPC2",7,0)
 ; ICR# 5799 - Edit existing entry in PATIENT file (#2).
"RTN","VPSRPC2",8,0)
 Q
"RTN","VPSRPC2",9,0)
EDIT(RESULT,VPSDFN,VPSLST) ;
"RTN","VPSRPC2",10,0)
 ; RPC=VPS EDIT PATIENT DEMOGRAPHICS
"RTN","VPSRPC2",11,0)
 ; Vetlink Kiosk allows edit of patient data (PATIENT File (#2)) 
"RTN","VPSRPC2",12,0)
 ; Kiosk identifies the field to be updated along with the respective data changes and serves to RPC
"RTN","VPSRPC2",13,0)
 ; INPUT - RESULT represents the results of processing and passed in by reference  
"RTN","VPSRPC2",14,0)
 ;         VPSDFN=(patient) DFN
"RTN","VPSRPC2",15,0)
 ;         VPSLST=contains the  imported and pre-validated data from Vecna that is intended to update the patient record in file 2 
"RTN","VPSRPC2",16,0)
 ; OUTPUT - RESULT=local array that returns the results of each updated field per array data element.
"RTN","VPSRPC2",17,0)
 ;
"RTN","VPSRPC2",18,0)
 ; structure of VPSLST input parameter: 
"RTN","VPSRPC2",19,0)
 ;       VPSLST(n)=field name^data  
"RTN","VPSRPC2",20,0)
 ;        where n is an incremental number and field label^data  are literal values
"RTN","VPSRPC2",21,0)
 ;        e.g., array(1)="MARITAL STATUS^SINGLE"
"RTN","VPSRPC2",22,0)
 ;  output structure:
"RTN","VPSRPC2",23,0)
 ;       RESULT(n)="field label^data^1"
"RTN","VPSRPC2",24,0)
 ;         where n equals to the incremental number belonging to the incoming array element  
"RTN","VPSRPC2",25,0)
 ;         where 1 equals successful update to the database of the specific field declared at field label.  
"RTN","VPSRPC2",26,0)
 ;      RESULT(n)="field label^data^99^exception message"  
"RTN","VPSRPC2",27,0)
 ;         where 99 means an exception and no update was made to the database for that specific field and exception message describes the error.  
"RTN","VPSRPC2",28,0)
 N RN,DDFLDS,DDFIELD,FIELD,FILE,X1,REQFLDS
"RTN","VPSRPC2",29,0)
 N VPSERR,VPSFDA
"RTN","VPSRPC2",30,0)
 I '+$G(VPSDFN) S RESULT(0)="99^PATIENT DFN not sent" Q
"RTN","VPSRPC2",31,0)
 I '$D(^DPT(VPSDFN)) S RESULT(0)="99^PATIENT not in VistA database" Q
"RTN","VPSRPC2",32,0)
 I '$D(VPSLST) S RESULT(0)="99^FIELD CHANGES WERE NOT SENT" Q
"RTN","VPSRPC2",33,0)
 K RESULT
"RTN","VPSRPC2",34,0)
 S RN=0
"RTN","VPSRPC2",35,0)
 L +^DPT(VPSDFN):30 E  S RESULT(0)=VPSDFN_"^99^Patient record cannot be locked.  UPdate to patient record cannot occur at this time." Q
"RTN","VPSRPC2",36,0)
 D TABLE(.DDFLDS,.REQFLDS,.VPSLST)
"RTN","VPSRPC2",37,0)
 D DDVAL(.RN,.VPSLST,.DDFLDS,.RESULT)
"RTN","VPSRPC2",38,0)
 D ADDRVAL^VPSRPC21(VPSDFN,.RN,.REQFLDS,.VPSLST,.RESULT)
"RTN","VPSRPC2",39,0)
 D SPVAL(VPSDFN,.RN,.REQFLDS,.VPSLST,.RESULT)
"RTN","VPSRPC2",40,0)
 D ECONT(VPSDFN,.RN,.REQFLDS,.VPSLST,.RESULT)
"RTN","VPSRPC2",41,0)
 ; read thru input array sent in by Vecna that has undergone pre-validation in PREVAL and ADDRVAL procedures
"RTN","VPSRPC2",42,0)
 ; Some subscripts may have been removed due to the results of validation processing to support
"RTN","VPSRPC2",43,0)
 ; patient record integrity (invalid or incomplete data should not be filed into patient record)
"RTN","VPSRPC2",44,0)
 S X1=-1 F  S X1=$O(VPSLST(X1)) Q:X1=""  D
"RTN","VPSRPC2",45,0)
 . S RN=RN+1
"RTN","VPSRPC2",46,0)
 . I $P(VPSLST(X1),U,2)="" S RESULT(RN)=VPSLST(X1)_"99^data was not sent for this field.  Write to Patient record not performed for this field." Q  ; data not was not sent by Vecna; no update to occur for this field
"RTN","VPSRPC2",47,0)
 . S DDFIELD=$P(VPSLST(X1),U)  ; name of field label passed in by Vecna 
"RTN","VPSRPC2",48,0)
 . S FILE=$P(DDFLDS(DDFIELD),U),FIELD=$P(DDFLDS(DDFIELD),U,2)  ; file and field number
"RTN","VPSRPC2",49,0)
 . I FILE>2 S RESULT(RN)=$$FILERACE(VPSDFN,FILE,FIELD,VPSLST(X1),.RN) Q  ;RACE and ETHNICITY multiples need special handling at write to patient record
"RTN","VPSRPC2",50,0)
 . S RESULT(RN)=$$FILE(VPSDFN,FILE,FIELD,VPSLST(X1),.RN)
"RTN","VPSRPC2",51,0)
 L -^DPT(VPSDFN)
"RTN","VPSRPC2",52,0)
 Q
"RTN","VPSRPC2",53,0)
 ;
"RTN","VPSRPC2",54,0)
FILE(PTIEN,FIL,FLD,DATA,N) ; write to patient record
"RTN","VPSRPC2",55,0)
 ; PTIEN=DFN
"RTN","VPSRPC2",56,0)
 ; FIL=FILE NUMBER (e.g., 2.02 or 2.06)
"RTN","VPSRPC2",57,0)
 ; FLD=FIELD NUMBER
"RTN","VPSRPC2",58,0)
 ; DATA=Data that gets populated at that field (sent from client)
"RTN","VPSRPC2",59,0)
 ; N=sequential number associated with the array element sent in by Vecna
"RTN","VPSRPC2",60,0)
 N VALUE,RIEN,PIEN,VPSFDA
"RTN","VPSRPC2",61,0)
 K RES
"RTN","VPSRPC2",62,0)
 S VPSFDA(FIL,PTIEN_",",FLD)=$P(DATA,U,2)  ; build the FDA array needed when filing the changes via Fileman; assign with the value brought in by Vecna
"RTN","VPSRPC2",63,0)
 D FILE^DIE("E","VPSFDA","VPSERR") K VPSFDA
"RTN","VPSRPC2",64,0)
 I '$D(VPSERR) S RES(N)=DATA_"^1"   ; data for specific field was filed successfully into patient record
"RTN","VPSRPC2",65,0)
 E  S RES(N)=$$ERROR(.VPSERR,N,DATA)
"RTN","VPSRPC2",66,0)
 Q RES(N)
"RTN","VPSRPC2",67,0)
 ;
"RTN","VPSRPC2",68,0)
FILERACE(PTIEN,FIL,FLD,DATA,N) ; write to patient record at the RACE or ETHNICITY multiple
"RTN","VPSRPC2",69,0)
 ; PTIEN=DFN
"RTN","VPSRPC2",70,0)
 ; FIL=FILE NUMBER (e.g., 2.02 or 2.06)
"RTN","VPSRPC2",71,0)
 ; FLD=FIELD NUMBER
"RTN","VPSRPC2",72,0)
 ; DATA=Data that gets populated at that field (sent from client)
"RTN","VPSRPC2",73,0)
 ; N=sequential number associated with the array element sent in by Vecna
"RTN","VPSRPC2",74,0)
 N VALUE,RIEN,PIEN,VPSFDA
"RTN","VPSRPC2",75,0)
 K RES
"RTN","VPSRPC2",76,0)
 I $E($P(DATA,U,2),1)="@" D  Q RES(N)  ; delete existing entries
"RTN","VPSRPC2",77,0)
 . S (RIEN,PIEN)=0
"RTN","VPSRPC2",78,0)
 . S VALUE=$E($P(DATA,U,2),2,99)
"RTN","VPSRPC2",79,0)
 . I VALUE']"" S RES(N)=DATA_"^99^no value provided for the Race or Ethnicity delete action.  Data deletion did not occur." Q
"RTN","VPSRPC2",80,0)
 . F  S RIEN=$O(^DPT(PTIEN,"."_$P(FIL,".",2),"B",RIEN)) Q:'RIEN  F  S PIEN=$O(^DPT(PTIEN,"."_$P(FIL,".",2),"B",RIEN,PIEN)) Q:'PIEN  D
"RTN","VPSRPC2",81,0)
 . . I $$GET1^DIQ(FIL,PIEN_","_PTIEN_",",.01,"E")=VALUE S VPSFDA(FIL,PIEN_","_PTIEN_",",FLD)="@"
"RTN","VPSRPC2",82,0)
 . I '$D(VPSFDA) S RES(N)=DATA_"^99^Race value does not exist for patient.  Delete did not occur."
"RTN","VPSRPC2",83,0)
 . D FILE^DIE("E","VPSFDA","VPSERR") K VPSFDA
"RTN","VPSRPC2",84,0)
 . I '$D(VPSERR) S RES(N)=DATA_"^1"
"RTN","VPSRPC2",85,0)
 . E  S RES(N)=$$ERROR(.VPSERR,N,DATA)
"RTN","VPSRPC2",86,0)
 ; if not deleting existing entries, then assumption is to add
"RTN","VPSRPC2",87,0)
 S VPSFDA(FIL,"+1,"_PTIEN_",",FLD)=$P(DATA,U,2)
"RTN","VPSRPC2",88,0)
 D UPDATE^DIE("E","VPSFDA","","VPSERR") K VPSFDA
"RTN","VPSRPC2",89,0)
 I '$D(VPSERR) S RES(N)=DATA_"^1"
"RTN","VPSRPC2",90,0)
 E  S RES(N)=$$ERROR(.VPSERR,N,DATA)
"RTN","VPSRPC2",91,0)
 Q RES(N)
"RTN","VPSRPC2",92,0)
 ;
"RTN","VPSRPC2",93,0)
ERROR(VERR,N,STRING) ; 
"RTN","VPSRPC2",94,0)
 ; VERR=error array that was created when attempting to file the changes
"RTN","VPSRPC2",95,0)
 ; N=seq number associated with the array element sent in by Vecna
"RTN","VPSRPC2",96,0)
 ; STRING=the string of data that could not be updated in patient record sent by Vecna
"RTN","VPSRPC2",97,0)
 ; RETURNS results string
"RTN","VPSRPC2",98,0)
 N ERRNUM,ERRTXT
"RTN","VPSRPC2",99,0)
 K ERRSTR
"RTN","VPSRPC2",100,0)
 S ERRNUM=0
"RTN","VPSRPC2",101,0)
 S ERRNUM=$O(VERR("DIERR",ERRNUM)),ERRTXT=VERR("DIERR",ERRNUM,"TEXT",1)
"RTN","VPSRPC2",102,0)
 I ERRTXT["already exists" S ERRSTR(N)=STRING_"^1"  ; not an exception as far as Vecna is concerned.
"RTN","VPSRPC2",103,0)
 E  S ERRSTR(N)=STRING_"^99^"_ERRTXT
"RTN","VPSRPC2",104,0)
 K VERR
"RTN","VPSRPC2",105,0)
 Q ERRSTR(N)
"RTN","VPSRPC2",106,0)
 ;
"RTN","VPSRPC2",107,0)
DDVAL(REC,ILST,DDEFS,VRES) ; Validate that incoming field labels sent by Vecna exist in patient file data definition
"RTN","VPSRPC2",108,0)
 ; INPUT - all input parameters passed in by reference
"RTN","VPSRPC2",109,0)
 ; REC = incremental number assigned to each subscript built in the OUTPUT array
"RTN","VPSRPC2",110,0)
 ; ILST = validate the data passed in by Vecna
"RTN","VPSRPC2",111,0)
 ; DDEFS = Data definitions as defined in PATIENT file (#2) to be used during validation 
"RTN","VPSRPC2",112,0)
 ; OUTPUT -
"RTN","VPSRPC2",113,0)
 ; VRES = the array to return the results of pre-validation processing. Exceptions (only) made available as RPC output for client
"RTN","VPSRPC2",114,0)
 N DDFLD,X2
"RTN","VPSRPC2",115,0)
 S X2=0 F  S X2=$O(ILST(X2)) Q:'X2  D
"RTN","VPSRPC2",116,0)
 . S DDFLD=$P(ILST(X2),U)
"RTN","VPSRPC2",117,0)
 . I '$D(DDEFS(DDFLD)) S REC=REC+1,VRES(REC)=ILST(X2)_"^99^"_DDFLD_" does not exist in VistA PATIENT file. Write to Patient record cannot be performed" K ILST(X2)
"RTN","VPSRPC2",118,0)
 Q
"RTN","VPSRPC2",119,0)
 ;
"RTN","VPSRPC2",120,0)
SPVAL(PTIEN,REC,REQLST,ILST,VRES) ; pre-validate on conditions related to spouse's information
"RTN","VPSRPC2",121,0)
 ; If marital status is NOT MARRIED, UNKNOWN, or WIDOWED then SPOUSE'S data elements should not be submitted for update. Exception message needs to 
"RTN","VPSRPC2",122,0)
 ; be returned.
"RTN","VPSRPC2",123,0)
 ;INPUT - all input parameters except PTIEN passed in by reference
"RTN","VPSRPC2",124,0)
 ; PTIEN = DFN
"RTN","VPSRPC2",125,0)
 ; REC = incremental number assigned to each subscript built in the OUTPUT array
"RTN","VPSRPC2",126,0)
 ; REQLST = array to be used when validating the spouse's info data
"RTN","VPSRPC2",127,0)
 ; ILST = data passed in by Vecna (VPSLST array)
"RTN","VPSRPC2",128,0)
 ; OUTPUT -
"RTN","VPSRPC2",129,0)
 ; RES = the array to return the VRESults of ADDVRESS validation processing.  Exceptions (only) made available as RPC output for client
"RTN","VPSRPC2",130,0)
 ; 
"RTN","VPSRPC2",131,0)
 ; marital status needs to be checked in 2 places.  First check the input array and then if needed check the patient record.
"RTN","VPSRPC2",132,0)
 ; Input array check -   vet can update marital status at kiosk so check needs to occur in the input array for a value in the MARITAL STATUS element for a 
"RTN","VPSRPC2",133,0)
 ; value of DIVORCED, MARRIED, or SEPARATED.  If that value in the input array does equal any of those 3 values then quit this validation procedure
"RTN","VPSRPC2",134,0)
 ;  since any spousal information update would be rationale.
"RTN","VPSRPC2",135,0)
 ; Patient record check  -   If the value in the MARITAL STATUS input array is null then an alternative check for NEVER MARRIED,
"RTN","VPSRPC2",136,0)
 ; UNKNOWN, or WIDOWNED would need to be performed to the patient record.  If the patient record does not contain any one of those 3 values then 
"RTN","VPSRPC2",137,0)
 ; quit this validation procedure since any spousal information update would be rationale.
"RTN","VPSRPC2",138,0)
 ; When NEVER MARRIED, UNKNOW, or WIDOWED marital status exist for a patient then this procedure needs to ensure that the SPOUSE'S EMPLOYER NAME,
"RTN","VPSRPC2",139,0)
 ; SPOUSE'S EMP PHONE NUMBER, SPOUSE'S EMPLOYMENT STATUS and SPOUSE'S RETIREMENT DATE has not been submitted to the patient record.
"RTN","VPSRPC2",140,0)
 ;
"RTN","VPSRPC2",141,0)
 N QUIT,MARITAL,X2,NUM
"RTN","VPSRPC2",142,0)
 S MARITAL=$P(REQLST(.05),U,3)
"RTN","VPSRPC2",143,0)
 S QUIT=$S(MARITAL="MARRIED":1,MARITAL="SEPARATED":1,1:0)  ; leave the procedure if any one of these values are submitted
"RTN","VPSRPC2",144,0)
 Q:QUIT
"RTN","VPSRPC2",145,0)
 S MARITAL=$S(MARITAL="":$$GET1^DIQ(2,PTIEN_",",.05),1:MARITAL)  ; need to get marital status from patient record if MARITAL is null
"RTN","VPSRPC2",146,0)
 S QUIT=$S(MARITAL="NEVER MARRIED":0,MARITAL="UNKNOWN":0,MARITAL="WIDOWED":0,MARITAL="DIVORCED":0,1:1)
"RTN","VPSRPC2",147,0)
 Q:QUIT
"RTN","VPSRPC2",148,0)
 F NUM=.251,.258,.2515,.2516 I $P(REQLST(NUM),U,3)]"" D
"RTN","VPSRPC2",149,0)
 . S X2=$P(REQLST(NUM),U),REC=REC+1,VRES(REC)=ILST(X2)_"^99^"_$P(REQLST(NUM),U,2)_" should not be sent when patient MARITAL STATUS is "_MARITAL
"RTN","VPSRPC2",150,0)
 . K ILST(X2)  ; remove from input array so they are not processed for filing into patient record
"RTN","VPSRPC2",151,0)
 Q
"RTN","VPSRPC2",152,0)
 ;
"RTN","VPSRPC2",153,0)
ECONT(PTIEN,REC,REQLST,ILST,VRES) ;  pre-validate emergency contact and next of kin fields
"RTN","VPSRPC2",154,0)
 ;'NEXT OF KIN' name must EXIST in order to update the NOK-2 set of fields
"RTN","VPSRPC2",155,0)
 ;'EMERGENCY CONTACT' name must EXIST in order to update the EMERGENCY CONTACT-2 set of fields
"RTN","VPSRPC2",156,0)
 ;INPUT - all input parameters except PTIEN passed in by reference
"RTN","VPSRPC2",157,0)
 ; PTIEN = DFN
"RTN","VPSRPC2",158,0)
 ; REC = incremental number assigned to each subscript built in the OUTPUT array
"RTN","VPSRPC2",159,0)
 ; REQLST = array to be used when validating the spouse's info data
"RTN","VPSRPC2",160,0)
 ; ILST = data passed in by Vecna (VPSLST array)
"RTN","VPSRPC2",161,0)
 ; OUTPUT -
"RTN","VPSRPC2",162,0)
 ; VRES = the array to return the results of ADDRESS validation processing.  Exceptions (only) made available as RPC output for client
"RTN","VPSRPC2",163,0)
 ; 
"RTN","VPSRPC2",164,0)
 ; Name check existence for NEXT OF KIN and EMERGENCY CONTACT needs to be checked first at the patient record and if needed  at the input array 
"RTN","VPSRPC2",165,0)
 ; Patient record check -   If name values do exist for both these fields, then quit the validation procedure since any update to the NOK-2 
"RTN","VPSRPC2",166,0)
 ;and EMERGENCY CONTACT 2 set of fields would be appropriate.  If these 2 fields are null in the patient record then existence of these 2 values needs 
"RTN","VPSRPC2",167,0)
 ; to be performed on the input array submitted by VPS kiosk.
"RTN","VPSRPC2",168,0)
 ; Input array check - patient can update NEXT OF KIN and EMERGENCY CONTACT information at the VPS kiosk, so first check is at the K-NAME OF PRIMARY NOK 
"RTN","VPSRPC2",169,0)
 ; and E-NAME data elements of the input array.  If a value exists for those 2 data elements then quit the validation procedure since any update to
"RTN","VPSRPC2",170,0)
 ; the NOK-2 and EMERGENCY CONTACT 2 set of fields would be appropriate.
"RTN","VPSRPC2",171,0)
 N NOK,ENAM,X2,NUM
"RTN","VPSRPC2",172,0)
NOK S NOK=$$GET1^DIQ(2,PTIEN_",",.211)
"RTN","VPSRPC2",173,0)
 I NOK="",$P(REQLST(.211),U,3)]"" D
"RTN","VPSRPC2",174,0)
 . S X2=$P(REQLST(.211),U),REC=REC+1,VRES(REC)=$$FILE(PTIEN,2,.211,ILST(X2),.REC) ; need to file the NOK name before filing of any submitted NOK 2 fields
"RTN","VPSRPC2",175,0)
 . K ILST(X2)  ; remove the already processed input array subscript
"RTN","VPSRPC2",176,0)
 . S NOK=$$GET1^DIQ(2,PTIEN_",",.211)   ;  retrieve the newly filed name. If any data filing exceptions occurred then any NOK-2 fields submitted cannot be filed
"RTN","VPSRPC2",177,0)
 I NOK="" D  ; next of kin name doesn't exist at the patient record or at the input array so any NOK-2 fields submitted need to be rejected
"RTN","VPSRPC2",178,0)
 . F NUM=.2191,.2192,.2193,.2194,.2195,.2196,.2197,.2203,.2199,.211011 I $P(REQLST(NUM),U,3)]"" D
"RTN","VPSRPC2",179,0)
 . . S X2=$P(REQLST(NUM),U),REC=REC+1,VRES(REC)=ILST(X2)_"^99^NEXT OF KIN name must exist before sending NOK-2 field "_$P(REQLST(NUM),U,2)
"RTN","VPSRPC2",180,0)
 . . K ILST(X2)
"RTN","VPSRPC2",181,0)
EMER S ENAM=$$GET1^DIQ(2,PTIEN_",",.331)
"RTN","VPSRPC2",182,0)
 I ENAM="",$P(REQLST(.331),U,3)]"" D
"RTN","VPSRPC2",183,0)
 . S X2=$P(REQLST(.331),U),REC=REC+1,VRES(REC)=$$FILE(PTIEN,2,.331,ILST(X2),.REC) ; need to file the EMERGENCY name before filing of any submitted E2 fields
"RTN","VPSRPC2",184,0)
 . K ILST(X2)  ; remove the already processed input array subscript
"RTN","VPSRPC2",185,0)
 . S ENAM=$$GET1^DIQ(2,PTIEN_",",.331)   ;  retrieve the newly filed name. If any data filing exceptions occurred then any E2 fields submitted cannot be filed
"RTN","VPSRPC2",186,0)
 I ENAM="" D  ; emergency name doesn't exist at the patient record or at the input array so any EMERGENCY 2 fields submitted need to be rejected
"RTN","VPSRPC2",187,0)
 . F NUM=.3311,.3312,.3313,.3314,.3315,.3316,.3317,.2204,.3319,.331011 I $P(REQLST(NUM),U,3)]"" D
"RTN","VPSRPC2",188,0)
 . . S X2=$P(REQLST(NUM),U),REC=REC+1,VRES(REC)=ILST(X2)_"^99^EMERGENCY CONTACT name must exist before sending E2 field "_$P(REQLST(NUM),U,2)
"RTN","VPSRPC2",189,0)
 . . K ILST(X2)
"RTN","VPSRPC2",190,0)
 Q
"RTN","VPSRPC2",191,0)
 ;
"RTN","VPSRPC2",192,0)
TABLE(ARRAY1,ARRAY2,VLST) ;build array of valid fields defined to PATIENT file (#2)
"RTN","VPSRPC2",193,0)
 ;input/output - 
"RTN","VPSRPC2",194,0)
 ; all input parameters passed in by reference
"RTN","VPSRPC2",195,0)
 ; ARRAY1, ARRAY2 will be built in this subroutine; and returned as output
"RTN","VPSRPC2",196,0)
 ; ARRAY1 = Data definitions as defined in PATIENT file (#2) to be used for pre-validation and filing procedures 
"RTN","VPSRPC2",197,0)
 ;  structure example:  DDFLDS("CITY")="2^.114"
"RTN","VPSRPC2",198,0)
 ;                      DDFLDS("COUNTRY")="2^.1173"
"RTN","VPSRPC2",199,0)
 ; ARRAY2 = array to be used during pre-validation of required address sets.
"RTN","VPSRPC2",200,0)
 ;        Structure example of a subscript having data:       ARRAY2(".111")="3^STREET ADDRESS [LINE 1]^123 MARIGOLD
"RTN","VPSRPC2",201,0)
 ;        Structure example of a subscript not having data:   ARRAY2(".114")="^CITY"   
"RTN","VPSRPC2",202,0)
 ; VLST contains the  imported and unvalidated data from Vecna that is intended to update the patient record in file 2
"RTN","VPSRPC2",203,0)
 N LN,LINE,STRING,REC,INTARRY
"RTN","VPSRPC2",204,0)
 S REC=-1
"RTN","VPSRPC2",205,0)
 F  S REC=$O(VLST(REC)) Q:REC=""  S INTARRY($P(VLST(REC),U))=REC_U_VLST(REC)
"RTN","VPSRPC2",206,0)
 F LN=2:1 S LINE=$T(FIELDLST+LN),STRING=$P(LINE,";;",2) Q:STRING=""  D
"RTN","VPSRPC2",207,0)
 . S ARRAY1($P(STRING,U,3))=$P(STRING,U)_U_$P(STRING,U,2),ARRAY2($P(STRING,U,2))=U_$P(STRING,U,3)
"RTN","VPSRPC2",208,0)
 . I $D(INTARRY($P(STRING,U,3))) S ARRAY2($P(STRING,U,2))=INTARRY($P(STRING,U,3))
"RTN","VPSRPC2",209,0)
 Q
"RTN","VPSRPC2",210,0)
 ;
"RTN","VPSRPC2",211,0)
 ;
"RTN","VPSRPC2",212,0)
FIELDLST ; list of fields defined in PATIENT file (#2)
"RTN","VPSRPC2",213,0)
 ;;FILE NUMBER^FIELD NUMBER^FIELD NAME^REQUIRED FIELD (DOCUMENTATION PURPOSES ONLY)
"RTN","VPSRPC2",214,0)
 ;;2^.05^MARITAL STATUS
"RTN","VPSRPC2",215,0)
 ;;2^.08^RELIGIOUS PREFERENCE
"RTN","VPSRPC2",216,0)
 ;;2^.111^STREET ADDRESS [LINE 1]
"RTN","VPSRPC2",217,0)
 ;;2^.112^STREET ADDRESS [LINE 2]
"RTN","VPSRPC2",218,0)
 ;;2^.113^STREET ADDRESS [LINE 3]
"RTN","VPSRPC2",219,0)
 ;;2^.114^CITY
"RTN","VPSRPC2",220,0)
 ;;2^.115^STATE
"RTN","VPSRPC2",221,0)
 ;;2^.117^COUNTY
"RTN","VPSRPC2",222,0)
 ;;2^.1171^PROVINCE
"RTN","VPSRPC2",223,0)
 ;;2^.1172^POSTAL CODE
"RTN","VPSRPC2",224,0)
 ;;2^.1173^COUNTRY^Required permanent address field
"RTN","VPSRPC2",225,0)
 ;;2^.1112^ZIP+4^R
"RTN","VPSRPC2",226,0)
 ;;2^.121^BAD ADDRESS INDICATOR
"RTN","VPSRPC2",227,0)
 ;;2^.131^PHONE NUMBER [RESIDENCE]
"RTN","VPSRPC2",228,0)
 ;;2^.132^PHONE NUMBER [WORK]
"RTN","VPSRPC2",229,0)
 ;;2^.134^PHONE NUMBER [CELLULAR]
"RTN","VPSRPC2",230,0)
 ;;2^.133^EMAIL ADDRESS
"RTN","VPSRPC2",231,0)
 ;;2^.1211^TEMPORARY STREET [LINE 1]^Required temporary address field
"RTN","VPSRPC2",232,0)
 ;;2^.1212^TEMPORARY STREET [LINE 2]
"RTN","VPSRPC2",233,0)
 ;;2^.1213^TEMPORARY STREET [LINE 3]
"RTN","VPSRPC2",234,0)
 ;;2^.1214^TEMPORARY CITY^Required temporary address field
"RTN","VPSRPC2",235,0)
 ;;2^.1215^TEMPORARY STATE^Required temporary address field if country = united states
"RTN","VPSRPC2",236,0)
 ;;2^.1217^TEMPORARY ADDRESS START DATE^Required temporary address field
"RTN","VPSRPC2",237,0)
 ;;2^.1218^TEMPORARY ADDRESS END DATE^Required temporary address field
"RTN","VPSRPC2",238,0)
 ;;2^.12111^TEMPORARY ADDRESS COUNTY^Required when country is USA
"RTN","VPSRPC2",239,0)
 ;;2^.12112^TEMPORARY ZIP+4^Required when country is USA
"RTN","VPSRPC2",240,0)
 ;;2^.1221^TEMPORARY ADDRESS PROVINCE
"RTN","VPSRPC2",241,0)
 ;;2^.1222^TEMPORARY ADDRESS POSTAL CODE
"RTN","VPSRPC2",242,0)
 ;;2^.1223^TEMPORARY ADDRESS COUNTRY^Required temporary address field
"RTN","VPSRPC2",243,0)
 ;;2^.1219^TEMPORARY PHONE NUMBER
"RTN","VPSRPC2",244,0)
 ;;2^.211^K-NAME OF PRIMARY NOK
"RTN","VPSRPC2",245,0)
 ;;2^.212^K-RELATIONSHIP TO PATIENT
"RTN","VPSRPC2",246,0)
 ;;2^.213^K-STREET ADDRESS [LINE 1]
"RTN","VPSRPC2",247,0)
 ;;2^.214^K-STREET ADDRESS [LINE 2]
"RTN","VPSRPC2",248,0)
 ;;2^.215^K-STREET ADDRESS [LINE 3]
"RTN","VPSRPC2",249,0)
 ;;2^.216^K-CITY
"RTN","VPSRPC2",250,0)
 ;;2^.217^K-STATE
"RTN","VPSRPC2",251,0)
 ;;2^.2207^K-ZIP+4
"RTN","VPSRPC2",252,0)
 ;;2^.219^K-PHONE NUMBER
"RTN","VPSRPC2",253,0)
 ;;2^.21011^K-WORK PHONE NUMBER
"RTN","VPSRPC2",254,0)
 ;;2^.2191^K2-NAME OF SECONDARY NOK
"RTN","VPSRPC2",255,0)
 ;;2^.2192^K2-RELATIONSHIP TO PATIENT
"RTN","VPSRPC2",256,0)
 ;;2^.2193^K2-STREET ADDRESS [LINE 1]
"RTN","VPSRPC2",257,0)
 ;;2^.2194^K2-STREET ADDRESS [LINE 2]
"RTN","VPSRPC2",258,0)
 ;;2^.2195^K2-STREET ADDRESS [LINE 3]
"RTN","VPSRPC2",259,0)
 ;;2^.2196^K2-CITY
"RTN","VPSRPC2",260,0)
 ;;2^.2197^K2-STATE
"RTN","VPSRPC2",261,0)
 ;;2^.2203^K2-ZIP+4
"RTN","VPSRPC2",262,0)
 ;;2^.2199^K2-PHONE NUMBER
"RTN","VPSRPC2",263,0)
 ;;2^.211011^K2-WORK PHONE NUMBER
"RTN","VPSRPC2",264,0)
 ;;2^.331^E-NAME
"RTN","VPSRPC2",265,0)
 ;;2^.332^E-RELATIONSHIP TO PATIENT
"RTN","VPSRPC2",266,0)
 ;;2^.333^E-STREET ADDRESS [LINE 1]
"RTN","VPSRPC2",267,0)
 ;;2^.334^E-STREET ADDRESS [LINE 2]
"RTN","VPSRPC2",268,0)
 ;;2^.335^E-STREET ADDRESS [LINE 3]
"RTN","VPSRPC2",269,0)
 ;;2^.336^E-CITY
"RTN","VPSRPC2",270,0)
 ;;2^.337^E-STATE
"RTN","VPSRPC2",271,0)
 ;;2^.2201^E-ZIP+4
"RTN","VPSRPC2",272,0)
 ;;2^.339^E-PHONE NUMBER
"RTN","VPSRPC2",273,0)
 ;;2^.33011^E-WORK PHONE NUMBER
"RTN","VPSRPC2",274,0)
 ;;2^.3311^E2-NAME OF SECONDARY CONTACT
"RTN","VPSRPC2",275,0)
 ;;2^.3312^E2-RELATIONSHIP TO PATIENT
"RTN","VPSRPC2",276,0)
 ;;2^.3313^E2-STREET ADDRESS [LINE 1]
"RTN","VPSRPC2",277,0)
 ;;2^.3314^E2-STREET ADDRESS [LINE 2]
"RTN","VPSRPC2",278,0)
 ;;2^.3315^E2-STREET ADDRESS [LINE 3]
"RTN","VPSRPC2",279,0)
 ;;2^.3316^E2-CITY
"RTN","VPSRPC2",280,0)
 ;;2^.3317^E2-STATE
"RTN","VPSRPC2",281,0)
 ;;2^.2204^E2-ZIP+4
"RTN","VPSRPC2",282,0)
 ;;2^.3319^E2-PHONE NUMBER
"RTN","VPSRPC2",283,0)
 ;;2^.331011^E2-WORK PHONE NUMBER
"RTN","VPSRPC2",284,0)
 ;;2^.3111^EMPLOYER NAME
"RTN","VPSRPC2",285,0)
 ;;2^.3119^EMPLOYER PHONE NUMBER
"RTN","VPSRPC2",286,0)
 ;;2^.31115^EMPLOYMENT STATUS
"RTN","VPSRPC2",287,0)
 ;;2^.31116^DATE OF RETIREMENT
"RTN","VPSRPC2",288,0)
 ;;2^.251^SPOUSE'S EMPLOYER NAME
"RTN","VPSRPC2",289,0)
 ;;2^.258^SPOUSE'S EMP PHONE NUMBER
"RTN","VPSRPC2",290,0)
 ;;2^.2515^SPOUSE'S EMPLOYMENT STATUS
"RTN","VPSRPC2",291,0)
 ;;2^.2516^SPOUSE'S RETIREMENT DATE
"RTN","VPSRPC2",292,0)
 ;;2.02^.01^RACE INFORMATION
"RTN","VPSRPC2",293,0)
 ;;2.06^.01^ETHNICITY INFORMATION
"RTN","VPSRPC2",294,0)
 ;;
"RTN","VPSRPC2",295,0)
 Q
"RTN","VPSRPC21")
0^18^B63643512^n/a
"RTN","VPSRPC21",1,0)
VPSRPC21  ;;DALOI/KML,WOIFO/BT - Update of Patient Demographics RPC (Continue from VPSRPC2) ;11/20/11 15:30
"RTN","VPSRPC21",2,0)
 ;;1.0;VA POINT OF SERVICE (KIOSKS);**2**;Oct 21, 2011;Build 41
"RTN","VPSRPC21",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPSRPC21",4,0)
 ;
"RTN","VPSRPC21",5,0)
 ; External Reference DBIA#
"RTN","VPSRPC21",6,0)
 ; ------------------------
"RTN","VPSRPC21",7,0)
 ; ICR# 3618 - Postal Code and County Code APIs (Supported)
"RTN","VPSRPC21",8,0)
 Q
"RTN","VPSRPC21",9,0)
 ;
"RTN","VPSRPC21",10,0)
ADDRVAL(PTIEN,REC,REQLST,ILST,VRES) ; validate for required fields for address sets
"RTN","VPSRPC21",11,0)
 ; INPUT - all input parameters except PTIEN passed in by reference
"RTN","VPSRPC21",12,0)
 ;   PTIEN  = DFN
"RTN","VPSRPC21",13,0)
 ;   REC    = incremental number assigned to each subscript built in the OUTPUT array
"RTN","VPSRPC21",14,0)
 ;   REQLST = array to be used when validating the required address sets
"RTN","VPSRPC21",15,0)
 ;   ILST   = data passed in by Vecna (VPSLST array)
"RTN","VPSRPC21",16,0)
 ; OUTPUT 
"RTN","VPSRPC21",17,0)
 ;   VRES   = the array to return the results of ADDRESS validation processing.  Exceptions (only) made available as RPC output for client
"RTN","VPSRPC21",18,0)
 ;
"RTN","VPSRPC21",19,0)
 N OK,ER
"RTN","VPSRPC21",20,0)
 ; validate country and zip code for permanent address
"RTN","VPSRPC21",21,0)
 S OK=$$PERMVAL(.REQLST,.ILST,.ER)
"RTN","VPSRPC21",22,0)
 I 'OK D ADDERR(.REC,.VRES,.ER) ;Add errors to the result array
"RTN","VPSRPC21",23,0)
 I 'OK D CLRPERM(.REQLST,.ILST) ; did not pass validation; clear permanet address fields
"RTN","VPSRPC21",24,0)
 ;
"RTN","VPSRPC21",25,0)
 ; validate foreign/temporary address
"RTN","VPSRPC21",26,0)
 S OK=$$TEMPVAL(PTIEN,.REQLST,.ILST,.ER)
"RTN","VPSRPC21",27,0)
 I 'OK D ADDERR(.REC,.VRES,.ER) ;Add errors to the result array
"RTN","VPSRPC21",28,0)
 I 'OK D CLRTEMP(.REQLST,.ILST) ; did not pass validation; clear permanet address fields
"RTN","VPSRPC21",29,0)
 Q
"RTN","VPSRPC21",30,0)
 ;
"RTN","VPSRPC21",31,0)
PERMVAL(REQLST,ILST,ER) ;validate country and zip code for permanent address
"RTN","VPSRPC21",32,0)
 ; INPUT - all input parameters passed in by reference
"RTN","VPSRPC21",33,0)
 ;   REQLST = array to be used when validating the required address sets
"RTN","VPSRPC21",34,0)
 ;   ILST   = data passed in by Vecna (VPSLST array)
"RTN","VPSRPC21",35,0)
 ; OUTPUT
"RTN","VPSRPC21",36,0)
 ;   ER     = array of Error Message or Empty (No error)
"RTN","VPSRPC21",37,0)
 ; RETURN
"RTN","VPSRPC21",38,0)
 ;    1     = success
"RTN","VPSRPC21",39,0)
 ;    0     = failed
"RTN","VPSRPC21",40,0)
 ;
"RTN","VPSRPC21",41,0)
 ; country must exist. The cross reference validation will happen during filing
"RTN","VPSRPC21",42,0)
 K ER
"RTN","VPSRPC21",43,0)
 ; check if Vecna sent permanent address
"RTN","VPSRPC21",44,0)
 N PERM S PERM=0
"RTN","VPSRPC21",45,0)
 N FLD F FLD=.111,.114,.115,.117,.1112,.1173 I $P(REQLST(FLD),U,3)]"" S PERM=1 Q  ;determine if vecna sent permanent address fields
"RTN","VPSRPC21",46,0)
 Q:'PERM 1 ; permanent address fields not sent, no error
"RTN","VPSRPC21",47,0)
 ;
"RTN","VPSRPC21",48,0)
 ; country must exist to update permanent address fields
"RTN","VPSRPC21",49,0)
 N COUNTRY S COUNTRY=$P(REQLST(.1173),U,3) ;Country sent by Vecna
"RTN","VPSRPC21",50,0)
 I COUNTRY="" S ER(1)="COUNTRY is needed for PERMANENT address fields.  Write to Patient record for the ADDRESS fields did not get performed"
"RTN","VPSRPC21",51,0)
 Q:$D(ER) 0
"RTN","VPSRPC21",52,0)
 N USAADDR S USAADDR=(COUNTRY="USA")!(COUNTRY="UNITED STATES")!(COUNTRY?1N.N)
"RTN","VPSRPC21",53,0)
 Q:'USAADDR 1 ; no zip code validation for non US address
"RTN","VPSRPC21",54,0)
 ;
"RTN","VPSRPC21",55,0)
 ; Validate Zip Code. Changing City, County or State must be accompanied by Zip Code
"RTN","VPSRPC21",56,0)
 N ZIP S ZIP=$P(REQLST(.1112),U,3) ;Zip Code sent by Vecna
"RTN","VPSRPC21",57,0)
 I ZIP="" D CLRCCS(.REQLST,.ILST) ;if zip code was not sent, clear city, county, state from processing. This is to guard someone for entering invalid City/County/State
"RTN","VPSRPC21",58,0)
 Q:ZIP="" 1 ; no city,county,state update, no error
"RTN","VPSRPC21",59,0)
 ;
"RTN","VPSRPC21",60,0)
 N XIP D POSTALB^XIPUTIL(ZIP,.XIP) ;IA #3618 (Supported)
"RTN","VPSRPC21",61,0)
 I 'XIP S ER(1)=XIP("ERROR")_".  Write to Patient record for the ADDRESS fields did not get performed" ;can't find zipcode
"RTN","VPSRPC21",62,0)
 Q:'XIP 0
"RTN","VPSRPC21",63,0)
 ;
"RTN","VPSRPC21",64,0)
 ; validate city,county,state,country for the zipcode
"RTN","VPSRPC21",65,0)
 N CITY S CITY=$P(REQLST(.114),U,3)
"RTN","VPSRPC21",66,0)
 N STATE S STATE=$P(REQLST(.115),U,3)
"RTN","VPSRPC21",67,0)
 N COUNTY S COUNTY=$P(REQLST(.117),U,3)
"RTN","VPSRPC21",68,0)
 N EFLG S EFLG=$$GETZIP(CITY,COUNTY,STATE,.XIP,.ZIPIDX) ;get the index of XIP 
"RTN","VPSRPC21",69,0)
 I EFLG=-1 S ER(1)="Invalid STATE for the ZIPCODE of PERMANENT address.  Write to Patient record for the ADDRESS fields did not get performed"
"RTN","VPSRPC21",70,0)
 I EFLG=-2 S ER(1)="Cannot find DEFAULT CITY for the ZIPCODE OF PERMANENT address.  Write to Patient record for the ADDRESS fields did not get performed"
"RTN","VPSRPC21",71,0)
 I EFLG=1 D UPDZIP(ZIPIDX,.XIP,.REQLST,.ILST) ; Change city, county, state, country to match VistA
"RTN","VPSRPC21",72,0)
 ;
"RTN","VPSRPC21",73,0)
 Q '$D(ER)
"RTN","VPSRPC21",74,0)
 ;
"RTN","VPSRPC21",75,0)
GETZIP(CITY,COUNTY,STATE,XIP,ZIPIDX) ;get the index of XIP of permanent address
"RTN","VPSRPC21",76,0)
 ; INPUT
"RTN","VPSRPC21",77,0)
 ;   CITY   = City sent by VecNa
"RTN","VPSRPC21",78,0)
 ;   COUNTY = County sent by VecNa
"RTN","VPSRPC21",79,0)
 ;   STATE  = State sent by VecNa
"RTN","VPSRPC21",80,0)
 ;   XIP    = VistA Zip Code information in array (multiple entries could exist for a zipcode)
"RTN","VPSRPC21",81,0)
 ; OUTPUT
"RTN","VPSRPC21",82,0)
 ;   ZIPIDX = The selected Index of XIP containing the ZIP CODE information
"RTN","VPSRPC21",83,0)
 ; RETURN
"RTN","VPSRPC21",84,0)
 ;    0     = City, State, County, Country have perfect match between Vecna and Vista
"RTN","VPSRPC21",85,0)
 ;    1     = City/County/state/country doesn't match, require update
"RTN","VPSRPC21",86,0)
 ;   -1     = State sent by Vecna doesn't match VistA based on the ZipCode
"RTN","VPSRPC21",87,0)
 ;   -2     = Can't find default city for the zipcode
"RTN","VPSRPC21",88,0)
 ;
"RTN","VPSRPC21",89,0)
 N RET S RET=-2 ; can't find default address
"RTN","VPSRPC21",90,0)
 S ZIPIDX=0
"RTN","VPSRPC21",91,0)
 ;
"RTN","VPSRPC21",92,0)
 ; find the city in the XIP array
"RTN","VPSRPC21",93,0)
 N IDX F IDX=1:1:XIP I $$UP^XLFSTR($P(XIP(IDX,"CITY"),"*"))=$$UP^XLFSTR(CITY) S ZIPIDX=IDX Q
"RTN","VPSRPC21",94,0)
 ;
"RTN","VPSRPC21",95,0)
 ; if city found, use the index of the XIP as the result
"RTN","VPSRPC21",96,0)
 I ZIPIDX D  ; check other address fields
"RTN","VPSRPC21",97,0)
 . I $P(XIP(ZIPIDX,"CITY"),"*")=CITY,XIP(ZIPIDX,"STATE")=STATE,XIP(ZIPIDX,"COUNTY")=COUNTY S RET=0 Q  ;perfect match
"RTN","VPSRPC21",98,0)
 . I STATE]"",$$UP^XLFSTR(XIP(ZIPIDX,"STATE"))'=$$UP^XLFSTR(STATE) S RET=-1 Q  ;error out, state must match
"RTN","VPSRPC21",99,0)
 . S RET=1 ;require update
"RTN","VPSRPC21",100,0)
 ;
"RTN","VPSRPC21",101,0)
 ; if city not found, use the default address
"RTN","VPSRPC21",102,0)
 I 'ZIPIDX D
"RTN","VPSRPC21",103,0)
 . F IDX=1:1:XIP I XIP(IDX,"CITY KEY")=XIP(IDX,"PREFERRED CITY KEY") S ZIPIDX=IDX,RET=1 Q  ;require update
"RTN","VPSRPC21",104,0)
 . I ZIPIDX,STATE]"",$$UP^XLFSTR(XIP(ZIPIDX,"STATE"))'=$$UP^XLFSTR(STATE) S RET=-1 Q  ;error out, state must match
"RTN","VPSRPC21",105,0)
 ;
"RTN","VPSRPC21",106,0)
 Q RET
"RTN","VPSRPC21",107,0)
 ;
"RTN","VPSRPC21",108,0)
UPDZIP(ZIPIDX,XIP,REQLST,ILST) ; Change city, county, state, country of permanent address to match VistA
"RTN","VPSRPC21",109,0)
 ; INPUT
"RTN","VPSRPC21",110,0)
 ;   ZIPIDX = The selected Index of XIP containing the ZIP CODE information
"RTN","VPSRPC21",111,0)
 ;   XIP    = VistA Zip Code information in array (multiple entries could exist for a zipcode)
"RTN","VPSRPC21",112,0)
 ; OUTPUT
"RTN","VPSRPC21",113,0)
 ;   REQLST = array to be used when validating the required address sets - will be updated based on VistA ZIP Code
"RTN","VPSRPC21",114,0)
 ;   ILST   = data passed in by Vecna (VPSLST array) - will be updated based on VistA ZIP Code
"RTN","VPSRPC21",115,0)
 ;
"RTN","VPSRPC21",116,0)
 S $P(REQLST(.114),U,3)=$P(XIP(ZIPIDX,"CITY"),"*")
"RTN","VPSRPC21",117,0)
 S $P(REQLST(.115),U,3)=XIP(ZIPIDX,"STATE")
"RTN","VPSRPC21",118,0)
 S $P(REQLST(.117),U,3)=XIP(ZIPIDX,"COUNTY")
"RTN","VPSRPC21",119,0)
 ;
"RTN","VPSRPC21",120,0)
 N FLD
"RTN","VPSRPC21",121,0)
 F FLD=.114,.115,.117 D
"RTN","VPSRPC21",122,0)
 . N RECNO S RECNO=$P(REQLST(FLD),U)
"RTN","VPSRPC21",123,0)
 . I 'RECNO D
"RTN","VPSRPC21",124,0)
 . . S RECNO=$O(ILST(""),-1)+1
"RTN","VPSRPC21",125,0)
 . . S $P(REQLST(FLD),U)=RECNO
"RTN","VPSRPC21",126,0)
 . S ILST(RECNO)=$P(REQLST(FLD),U,2,3)
"RTN","VPSRPC21",127,0)
 Q
"RTN","VPSRPC21",128,0)
 ;
"RTN","VPSRPC21",129,0)
CLRPERM(REQLST,ILST) ;clear permanent address
"RTN","VPSRPC21",130,0)
 ; INPUT - all input parameters passed in by reference
"RTN","VPSRPC21",131,0)
 ;   REQLST = array to be used when validating the required address sets
"RTN","VPSRPC21",132,0)
 ; OUTPUT 
"RTN","VPSRPC21",133,0)
 ;   ILST   = data passed in by Vecna (VPSLST array) to be cleared so no update will happen
"RTN","VPSRPC21",134,0)
 ;
"RTN","VPSRPC21",135,0)
 N FLD,RECNO
"RTN","VPSRPC21",136,0)
 F FLD=.111,.112,.113,.114,.115,.117,.121,.1171,.1172,.1173,.1112 S RECNO=$P(REQLST(FLD),U) I RECNO]"" K ILST(RECNO) ; remove from input array so they are not processed for filing into patient record
"RTN","VPSRPC21",137,0)
 Q
"RTN","VPSRPC21",138,0)
 ;
"RTN","VPSRPC21",139,0)
CLRCCS(REQLST,ILST) ;clear zipcode, city, state, county from processing
"RTN","VPSRPC21",140,0)
 ; INPUT - all input parameters passed in by reference
"RTN","VPSRPC21",141,0)
 ;   REQLST = array to be used when validating the required address sets
"RTN","VPSRPC21",142,0)
 ; OUTPUT 
"RTN","VPSRPC21",143,0)
 ;   ILST   = data passed in by Vecna (VPSLST array) to be cleared so no update will happen
"RTN","VPSRPC21",144,0)
 ;
"RTN","VPSRPC21",145,0)
 N FLD,RECNO
"RTN","VPSRPC21",146,0)
 F FLD=.1112,.114,.115,.117 S RECNO=$P(REQLST(FLD),U) I RECNO]"" K ILST(RECNO) ; remove from input array so they are not processed for filing into patient record
"RTN","VPSRPC21",147,0)
 Q
"RTN","VPSRPC21",148,0)
 ;
"RTN","VPSRPC21",149,0)
ADDERR(REC,VRES,ER) ;Add error to the result array
"RTN","VPSRPC21",150,0)
 ; INPUT - all input parameters passed in by reference
"RTN","VPSRPC21",151,0)
 ;   ER     = Error Message to be returned to vecna
"RTN","VPSRPC21",152,0)
 ;   REC    = incremental number assigned to each subscript built in the OUTPUT array
"RTN","VPSRPC21",153,0)
 ; OUTPUT 
"RTN","VPSRPC21",154,0)
 ;   VRES   = the array to return the results of ADDRESS validation processing.  Exceptions (only) made available as RPC output for client
"RTN","VPSRPC21",155,0)
 ;
"RTN","VPSRPC21",156,0)
 N IDX S IDX=""
"RTN","VPSRPC21",157,0)
 F  S IDX=$O(ER(IDX)) Q:IDX=""  S REC=REC+1,VRES(REC)="^^99^"_ER(IDX)
"RTN","VPSRPC21",158,0)
 Q
"RTN","VPSRPC21",159,0)
 ;
"RTN","VPSRPC21",160,0)
TEMPVAL(PTIEN,REQLST,ILIST,ER) ; validate temporary address
"RTN","VPSRPC21",161,0)
 ; INPUT - all input parameters except PTIEN passed in by reference
"RTN","VPSRPC21",162,0)
 ;   PTIEN  = DFN
"RTN","VPSRPC21",163,0)
 ;   REQLST = array to be used when validating data
"RTN","VPSRPC21",164,0)
 ;   ILIST  = data passed in by Vecna (VPSLST array)
"RTN","VPSRPC21",165,0)
 ; OUTPUT 
"RTN","VPSRPC21",166,0)
 ;   ER     = array of Error Message or Empty (No error)
"RTN","VPSRPC21",167,0)
 ; RETURN
"RTN","VPSRPC21",168,0)
 ;    1     = success
"RTN","VPSRPC21",169,0)
 ;    0     = failed
"RTN","VPSRPC21",170,0)
 ;
"RTN","VPSRPC21",171,0)
 K ER
"RTN","VPSRPC21",172,0)
 N TEMP S TEMP=0
"RTN","VPSRPC21",173,0)
 ; check if Vecna sent temp address
"RTN","VPSRPC21",174,0)
 N NUM F NUM=.1211,.1214,.1215,.1217,.1218,.12111,.12112,.1223 Q:TEMP  I $P(REQLST(NUM),U,3)]"" S TEMP=1  ;determine if any required temp address fields are sent
"RTN","VPSRPC21",175,0)
 Q:'TEMP 1 ; temporary address fields not sent
"RTN","VPSRPC21",176,0)
 ;
"RTN","VPSRPC21",177,0)
 ; validate country fields
"RTN","VPSRPC21",178,0)
 N COUNTRY S COUNTRY=$P(REQLST(.1223),U,3)
"RTN","VPSRPC21",179,0)
 I COUNTRY="" S ER(1)=$P(REQLST(.1223),U,2)_" is needed for TEMPORARY (USA and FOREIGN) address fields.  Write to Patient record not performed"
"RTN","VPSRPC21",180,0)
 Q:COUNTRY="" 0
"RTN","VPSRPC21",181,0)
 ;
"RTN","VPSRPC21",182,0)
 ; validate temporarty address 
"RTN","VPSRPC21",183,0)
 N USAADDR S USAADDR=(COUNTRY="USA")!(COUNTRY="UNITED STATES")!(COUNTRY?1N.N)
"RTN","VPSRPC21",184,0)
 I USAADDR D USVAL(.REQLST,.ER) ;validate US Address
"RTN","VPSRPC21",185,0)
 I 'USAADDR D NONUSVAL(.REQLST,.ER) ; validate foreign address
"RTN","VPSRPC21",186,0)
 Q:$D(ER) 0
"RTN","VPSRPC21",187,0)
 ;
"RTN","VPSRPC21",188,0)
 ; update TEMPORARY ADDRESS ACTIVE? field to yes when all required TEMPORARY address fields (USA or FOREIGN) are submitted.
"RTN","VPSRPC21",189,0)
 N VPSFDA S VPSFDA(2,PTIEN_",",.12105)="Y"
"RTN","VPSRPC21",190,0)
 D FILE^DIE("","VPSFDA","")
"RTN","VPSRPC21",191,0)
 Q 1
"RTN","VPSRPC21",192,0)
 ;
"RTN","VPSRPC21",193,0)
USVAL(REQLST,ER) ;validate US Address
"RTN","VPSRPC21",194,0)
 ; INPUT - all input parameters except PTIEN passed in by reference
"RTN","VPSRPC21",195,0)
 ;   REQLST = array to be used when validating data
"RTN","VPSRPC21",196,0)
 ; OUTPUT 
"RTN","VPSRPC21",197,0)
 ;   ER     = array of Error Message or Empty (No error)
"RTN","VPSRPC21",198,0)
 ;
"RTN","VPSRPC21",199,0)
 N IDX S IDX=0
"RTN","VPSRPC21",200,0)
 ;
"RTN","VPSRPC21",201,0)
 ; validate required fields
"RTN","VPSRPC21",202,0)
 N FLD
"RTN","VPSRPC21",203,0)
 F FLD=.1211,.1214,.1215,.1217,.1218,.12111,.12112 I $P(REQLST(FLD),U,3)="" D
"RTN","VPSRPC21",204,0)
 . S IDX=IDX+1
"RTN","VPSRPC21",205,0)
 . S ER(IDX)=$P(REQLST(FLD),U,2)_" is needed for TEMPORARY (USA) address fields.  Write to Patient record for TEMPORARY ADDRESS fields did not get performed"
"RTN","VPSRPC21",206,0)
 Q
"RTN","VPSRPC21",207,0)
 ;
"RTN","VPSRPC21",208,0)
NONUSVAL(REQLST,ER) ; validate foreign address
"RTN","VPSRPC21",209,0)
 ; INPUT - all input parameters except PTIEN passed in by reference
"RTN","VPSRPC21",210,0)
 ;   REQLST = array to be used when validating data
"RTN","VPSRPC21",211,0)
 ; OUTPUT 
"RTN","VPSRPC21",212,0)
 ;   ER     = array of Error Message or Empty (No error)
"RTN","VPSRPC21",213,0)
 ;
"RTN","VPSRPC21",214,0)
 N IDX S IDX=0
"RTN","VPSRPC21",215,0)
 ;
"RTN","VPSRPC21",216,0)
 ; validate required fields
"RTN","VPSRPC21",217,0)
 N FLD
"RTN","VPSRPC21",218,0)
 F FLD=.1211,.1214,.1217,.1218 I $P(REQLST(FLD),U,3)="" D
"RTN","VPSRPC21",219,0)
 . S IDX=IDX+1
"RTN","VPSRPC21",220,0)
 . S ER(IDX)=$P(REQLST(FLD),U,2)_" is needed for TEMPORARY (foreign) address fields.  Write to Patient record not performed"
"RTN","VPSRPC21",221,0)
 Q
"RTN","VPSRPC21",222,0)
 ;
"RTN","VPSRPC21",223,0)
CLRTEMP(REQLST,ILST) ;clear temporary address
"RTN","VPSRPC21",224,0)
 ; INPUT - all input parameters passed in by reference
"RTN","VPSRPC21",225,0)
 ;   REQLST = array to be used when validating the required address sets
"RTN","VPSRPC21",226,0)
 ; OUTPUT 
"RTN","VPSRPC21",227,0)
 ;   ILST   = data passed in by Vecna (VPSLST array) to be cleared so no update will happen
"RTN","VPSRPC21",228,0)
 ;
"RTN","VPSRPC21",229,0)
 N FLD,RECNO
"RTN","VPSRPC21",230,0)
 F FLD=.1211,.1212,.1213,.1214,.1215,.1217,.1218,.1219,.1221,.1222,.1223,.12111,.12112 S RECNO=$P(REQLST(FLD),U) I RECNO]"" K ILST(RECNO)  ; remove from input array so they are not processed for filing into patient record
"RTN","VPSRPC21",231,0)
 Q
"RTN","VPSRPC3")
0^15^B12419287^n/a
"RTN","VPSRPC3",1,0)
VPSRPC3 ;DALOI/KML - VPS Pre-registration RPC ;4/26/2012
"RTN","VPSRPC3",2,0)
 ;;1.0;VA POINT OF SERVICE (KIOSKS);**2**;Oct 21, 2011;Build 41
"RTN","VPSRPC3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPSRPC3",4,0)
 ;
"RTN","VPSRPC3",5,0)
 Q
"RTN","VPSRPC3",6,0)
 ; the procedures for this RPC were taken from the routine that supports the DGPRE PRE-REGISTER OPTION
"RTN","VPSRPC3",7,0)
 ; to update the various files when a Vetlink Kiosk Preregister event occurs
"RTN","VPSRPC3",8,0)
PREREG(RESULT,DFN,PRESTAT) ; Pre-Register a patient
"RTN","VPSRPC3",9,0)
 ; RPC=VPS PATIENT PRE-REGISTRATION
"RTN","VPSRPC3",10,0)
 ; input variables
"RTN","VPSRPC3",11,0)
 ; DFN - patient IEN, required
"RTN","VPSRPC3",12,0)
 ; PRESTAT - code for the call such as 'C' = 'CONTACTED' or
"RTN","VPSRPC3",13,0)
 ; 'X' = 'CHANGE INFORMATION', required
"RTN","VPSRPC3",14,0)
 ; output variable
"RTN","VPSRPC3",15,0)
 ; RESULT - variable that returns the result of the RPC, includes a
"RTN","VPSRPC3",16,0)
 ; a number (1 or 0) followed by a short message
"RTN","VPSRPC3",17,0)
 N VALID
"RTN","VPSRPC3",18,0)
 K RESULT
"RTN","VPSRPC3",19,0)
 ; check for required parameters coming in
"RTN","VPSRPC3",20,0)
 I $G(DFN)="" S RESULT="0,DFN not sent." Q
"RTN","VPSRPC3",21,0)
 I +DFN=0 S RESULT="0,invalid DFN." Q
"RTN","VPSRPC3",22,0)
 I '$D(^DPT(DFN,0)) S RESULT="0,Patient not found." Q
"RTN","VPSRPC3",23,0)
 ; validate code for call status
"RTN","VPSRPC3",24,0)
 I $G(PRESTAT)="" S RESULT="0,call STATUS code not sent." Q
"RTN","VPSRPC3",25,0)
 S VALID=$$CHKST(PRESTAT) I 'VALID S RESULT="0,Invalid code for call status." Q
"RTN","VPSRPC3",26,0)
 N PIEN,PDIV,PIDX,NEW,LOCK
"RTN","VPSRPC3",27,0)
 S (PIDX,LOCK)=0,NEW=1
"RTN","VPSRPC3",28,0)
 ; PREREGISTRATION Nightly BACKGROUND JOB (SCHEDULED TASK) adds new entries to 41.42.  
"RTN","VPSRPC3",29,0)
 ; VistA preregistration option allows processing to continue if there isn't a patient entry in 41.42.  
"RTN","VPSRPC3",30,0)
 I $D(^DGS(41.42,"B",DFN)) D  ; ICR 5817
"RTN","VPSRPC3",31,0)
 . S NEW=0
"RTN","VPSRPC3",32,0)
 . S PIDX=$O(^DGS(41.42,"B",DFN,PIDX))
"RTN","VPSRPC3",33,0)
 . S PDIV=$P($G(^DGS(41.42,PIDX,0)),U,2)
"RTN","VPSRPC3",34,0)
 . I PIDX]"" L +^DGS(41.42,PIDX):2 I $T S LOCK=1
"RTN","VPSRPC3",35,0)
 I 'LOCK&('NEW) S RESULT="0,Another user is editing this patient. Preregistration cannot be performed at this time." Q
"RTN","VPSRPC3",36,0)
 I $G(PDIV)']"" S PDIV=$$PRIM^VASITE  ; ICR#10112 - $$PRIM^VASITE
"RTN","VPSRPC3",37,0)
 D UPDLOG(DFN,PRESTAT,PDIV)
"RTN","VPSRPC3",38,0)
 ; update pre-registration audit log   
"RTN","VPSRPC3",39,0)
 ; need to include ICR #
"RTN","VPSRPC3",40,0)
 N TMSTMP S TMSTMP=$$NOW^XLFDT   ; ICR 10103
"RTN","VPSRPC3",41,0)
 ; add an entry to PRE-REGISTRATION AUDIT file
"RTN","VPSRPC3",42,0)
 ; ICR # 5797
"RTN","VPSRPC3",43,0)
 S DIC="^DGS(41.41,",DIC(0)="L",X=DFN
"RTN","VPSRPC3",44,0)
 S DIC("DR")="1///^S X=TMSTMP;2////^S X=DUZ"
"RTN","VPSRPC3",45,0)
 D FILE^DICN
"RTN","VPSRPC3",46,0)
 ; need to update the PRE-REGISTRATION CALL LIST file
"RTN","VPSRPC3",47,0)
 I 'NEW,PIDX D
"RTN","VPSRPC3",48,0)
 . K DA,DIE,DR
"RTN","VPSRPC3",49,0)
 . S DA=PIDX,DIE="^DGS(41.42,"
"RTN","VPSRPC3",50,0)
 . S DR="4///Y" S DR=DR_";3///^S X=TMSTMP"
"RTN","VPSRPC3",51,0)
 . D ^DIE
"RTN","VPSRPC3",52,0)
 . L -^DGS(41.42,PIDX)
"RTN","VPSRPC3",53,0)
 S RESULT="1,Pre-Registration completed."
"RTN","VPSRPC3",54,0)
 ;
"RTN","VPSRPC3",55,0)
 Q
"RTN","VPSRPC3",56,0)
UPDLOG(DFN,STATUS,DIVIEN) ;  Update PRE-REGISTRATION CALL File, #41.43
"RTN","VPSRPC3",57,0)
 ; ICR # 5798 - allows VPS package to add and edit an entry in the PRE-REGISTRATION CALL file
"RTN","VPSRPC3",58,0)
 ; Input:
"RTN","VPSRPC3",59,0)
 ;   DFN   - The IEN of the patient being called
"RTN","VPSRPC3",60,0)
 ;   STATUS  - Status of the call attempt
"RTN","VPSRPC3",61,0)
 ;   DIVIEN - Division IEN (used for sorting)
"RTN","VPSRPC3",62,0)
 ;
"RTN","VPSRPC3",63,0)
 N DIC,X,Y,DIE,DR,DA,DIK
"RTN","VPSRPC3",64,0)
 S DIC="^DGS(41.43,"
"RTN","VPSRPC3",65,0)
 S DIC(0)="L"
"RTN","VPSRPC3",66,0)
 S X=$$NOW^XLFDT
"RTN","VPSRPC3",67,0)
 D FILE^DICN
"RTN","VPSRPC3",68,0)
 Q:Y<0   ; VistA option notifies user when an entry cannot be added to 41.43, but continues with processing the preregistration session.
"RTN","VPSRPC3",69,0)
 S DA=+Y
"RTN","VPSRPC3",70,0)
 L +^DGS(41.43,+Y):2 I '$T S DIK="^DGS(41.43," D ^DIK K DIK Q  ; remove stub entry if entry cannot be locked
"RTN","VPSRPC3",71,0)
 S DIE="^DGS(41.43,"
"RTN","VPSRPC3",72,0)
 S DR="1////^S X=DFN;2////^S X=DUZ;3///^S X=STATUS;5////^S X=$S(+DIVIEN>0:DIVIEN,1:"""")"
"RTN","VPSRPC3",73,0)
 D ^DIE K DIE
"RTN","VPSRPC3",74,0)
 L -^DGS(41.43,DA)
"RTN","VPSRPC3",75,0)
 Q
"RTN","VPSRPC3",76,0)
 ;
"RTN","VPSRPC3",77,0)
CHKST(CODE) ;  determine if status code is valid
"RTN","VPSRPC3",78,0)
 ; input - 
"RTN","VPSRPC3",79,0)
 ; CODE = status of pre-registration call - this code is sent to the RPC from the Vetlink Kiosk
"RTN","VPSRPC3",80,0)
 ; output -
"RTN","VPSRPC3",81,0)
 ; FOUND = result of the validation which determines if the incoming kiosk code was matched against one of the valid VistA codes
"RTN","VPSRPC3",82,0)
 N LIST,VALUE,FOUND
"RTN","VPSRPC3",83,0)
 S VALUE="",FOUND=0
"RTN","VPSRPC3",84,0)
 D BLDCODES(.LIST)
"RTN","VPSRPC3",85,0)
 F  S VALUE=$O(LIST(VALUE)) Q:VALUE=""  Q:FOUND  I VALUE=CODE S FOUND=1
"RTN","VPSRPC3",86,0)
 Q FOUND
"RTN","VPSRPC3",87,0)
 ;
"RTN","VPSRPC3",88,0)
BLDCODES(ARRAY) ;build array of valid statuses that represent the outcome of the call to the patient
"RTN","VPSRPC3",89,0)
 ; valid codes can be located at the STATUS field of the PRE-REGISTRATION CALL LOG (#41.43,3).
"RTN","VPSRPC3",90,0)
 ;input/output - ARRAY passed in by reference
"RTN","VPSRPC3",91,0)
 N LN,LINE,STRING
"RTN","VPSRPC3",92,0)
 F LN=1:1 S LINE=$T(CODELST+LN),STRING=$P(LINE,";;",2) Q:STRING=""  S ARRAY($P(STRING,U))=""
"RTN","VPSRPC3",93,0)
 Q
"RTN","VPSRPC3",94,0)
 ;
"RTN","VPSRPC3",95,0)
CODELST ; list of codes
"RTN","VPSRPC3",96,0)
 ;;B^BUSY
"RTN","VPSRPC3",97,0)
 ;;C^CONNECTED
"RTN","VPSRPC3",98,0)
 ;;D^DEATH
"RTN","VPSRPC3",99,0)
 ;;K^CALL BACK
"RTN","VPSRPC3",100,0)
 ;;M^LEFT CALLBACK MESSAGE
"RTN","VPSRPC3",101,0)
 ;;N^NO ANSWER
"RTN","VPSRPC3",102,0)
 ;;P^NO PHONE
"RTN","VPSRPC3",103,0)
 ;;T^DON'T CALL
"RTN","VPSRPC3",104,0)
 ;;U^UNCOOPERATIVE
"RTN","VPSRPC3",105,0)
 ;;V^PREVIOUSLY UPDATED
"RTN","VPSRPC3",106,0)
 ;;W^WRONG NUMBER
"RTN","VPSRPC3",107,0)
 ;;X^CHANGE INFORMATION
"RTN","VPSRPC3",108,0)
 ;;
"RTN","VPSRPC4")
0^16^B10148978^n/a
"RTN","VPSRPC4",1,0)
VPSRPC4 ;DALOI/KML - VPS Check In RPC ;4/26/2012
"RTN","VPSRPC4",2,0)
 ;;1.0;VA POINT OF SERVICE (KIOSKS);**2**;Oct 21, 2011;Build 41
"RTN","VPSRPC4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPSRPC4",4,0)
 Q
"RTN","VPSRPC4",5,0)
 ;
"RTN","VPSRPC4",6,0)
CHK(VPSRES,VPSAPPT) ;
"RTN","VPSRPC4",7,0)
 ;VPS PATIENT CHECK-IN rpc - entry point
"RTN","VPSRPC4",8,0)
 ; patient can be checked-in for one to many appointments via the KIOSK
"RTN","VPSRPC4",9,0)
 ;VPSAPPTS - Input: string that represents the appt(s) to be checked in.  
"RTN","VPSRPC4",10,0)
 ;Since more than one appt can be checked-in, each appt consists of the DFN, CLINIC ien, and appt date/timestamp.  
"RTN","VPSRPC4",11,0)
 ;Each appt is delimited by ";" and the 3 pieces of data are separated by "-".   All 3 data elements in the appt 
"RTN","VPSRPC4",12,0)
 ;representation are required input.
"RTN","VPSRPC4",13,0)
 ; Syntax: 
"RTN","VPSRPC4",14,0)
 ;         DFN_"-"_clinic IEN_"-"_date/timestamp of scheduled appt_";"
"RTN","VPSRPC4",15,0)
 ;
"RTN","VPSRPC4",16,0)
 ; example of data string (represents 2 appts):
"RTN","VPSRPC4",17,0)
 ;         "308165-1218-3120420.1215;308165-4569-3120420.1030"
"RTN","VPSRPC4",18,0)
 ;
"RTN","VPSRPC4",19,0)
 ;VPSRES - Output:  single-dimensional array that represents the results for each appointment that was checked in.  
"RTN","VPSRPC4",20,0)
 ;Each data element in the array represents the result of an appt check-in transaction; and the data 
"RTN","VPSRPC4",21,0)
 ;in the 4-pieced string is  delimited by "-".
"RTN","VPSRPC4",22,0)
 ; return value = 1 if check-in successful or '99' if appointment was not checked in
"RTN","VPSRPC4",23,0)
 ;  Syntax: 
"RTN","VPSRPC4",24,0)
 ; DFN_"-"_clinicIEN_"-"_date/timestamp of appt_"-"_return value_";"
"RTN","VPSRPC4",25,0)
 ; example of data output (example represents the result of 2 checked in appts):
"RTN","VPSRPC4",26,0)
 ;                   VPSRES(0)="308165-1218-3120420.1215-1
"RTN","VPSRPC4",27,0)
 ;                   VPSRES(1)="308165-4569-3120420.1030-99"
"RTN","VPSRPC4",28,0)
 ; ICR 5792 call to FIND^SDAM2
"RTN","VPSRPC4",29,0)
 ; ICR 5838 call to HDLKILL, BEFORE, HANDLE, AFTER, EVT routine in SDAMEVT
"RTN","VPSRPC4",30,0)
 N VPSCIEN,VPSI,DFN,VPSDT,VPSCLIN,RESULT,VPSREC
"RTN","VPSRPC4",31,0)
 I '+$G(VPSAPPT) S VPSRES(0)="---99-appt record not sent" Q
"RTN","VPSRPC4",32,0)
 F VPSI=1:1 S VPSREC=$P(VPSAPPT,";",VPSI) Q:VPSREC']""  D
"RTN","VPSRPC4",33,0)
 . S DFN=$P(VPSREC,"-"),VPSCLIN=$P(VPSREC,"-",2),VPSDT=$P(VPSREC,"-",3)
"RTN","VPSRPC4",34,0)
 . I '+DFN S VPSRES(VPSI)=VPSREC_"-99-patient DFN not sent" Q
"RTN","VPSRPC4",35,0)
 . I '+VPSDT S VPSRES(VPSI)=VPSREC_"-99-date/timestamp not sent" Q
"RTN","VPSRPC4",36,0)
 . I '+VPSCLIN S VPSRES(VPSI)=VPSREC_"-99-clinic identifier not sent" Q
"RTN","VPSRPC4",37,0)
 . D DT^DILF("T",VPSDT,.VPSDT)
"RTN","VPSRPC4",38,0)
 . I $P(VPSDT,".")>DT!($P(VPSDT,".")<DT) S VPSRES(VPSI)=VPSREC_"-99-Only appointments scheduled for today's date are allowed to be checked-in" Q
"RTN","VPSRPC4",39,0)
 . S VPSCIEN=$$FIND^SDAM2(DFN,VPSDT,VPSCLIN)
"RTN","VPSRPC4",40,0)
 . I +VPSCIEN'>0 S VPSRES(VPSI)=VPSREC_"-99-Appt not found." Q
"RTN","VPSRPC4",41,0)
 . D HDLKILL^SDAMEVT  ;CLEAR PRE-EXISTING HANDLES
"RTN","VPSRPC4",42,0)
 . N SDATA,SDCIHDL S SDATA=VPSCIEN_U_DFN_U_VPSDT_U_VPSCLIN,SDCIHDL=$$HANDLE^SDAMEVT(1) ;CALL TO EVENT HANDLER
"RTN","VPSRPC4",43,0)
 . D BEFORE^SDAMEVT(.SDATA,DFN,VPSDT,VPSCLIN,VPSCIEN,SDCIHDL)  ;CAPTURE CURRENT APT DATA IN ^TMP("SDAMEVT",$J
"RTN","VPSRPC4",44,0)
 . S RESULT=$$CHECKIN(VPSCLIN,VPSDT,VPSCIEN)
"RTN","VPSRPC4",45,0)
 . D AFTER^SDAMEVT(.SDATA,DFN,VPSDT,VPSCLIN,VPSCIEN,SDCIHDL) ;CAPTURE CHECK-IN DATA IN ^TMP("SDAMEVT",$J
"RTN","VPSRPC4",46,0)
 . D EVT^SDAMEVT(.SDATA,4,1,SDCIHDL) ; 4 := ci evt ,  1:= computer monlogue   ;CALL EVT HANDLER
"RTN","VPSRPC4",47,0)
 . D HDLKILL^SDAMEVT ;CLEAR HANDLES
"RTN","VPSRPC4",48,0)
 . S VPSRES(VPSI)=VPSREC_"-"_RESULT
"RTN","VPSRPC4",49,0)
 Q
"RTN","VPSRPC4",50,0)
 ;
"RTN","VPSRPC4",51,0)
CHECKIN(CLIN,DTM,CIEN) ;update appropriate fields for check-in (HOSPITAL LOCATION file (#44)
"RTN","VPSRPC4",52,0)
 ;DIE call to actually check patient in
"RTN","VPSRPC4",53,0)
 ; ICR 5791 - update to 44.003,309
"RTN","VPSRPC4",54,0)
 ;Input:
"RTN","VPSRPC4",55,0)
 ; CLIN - clinic ien
"RTN","VPSRPC4",56,0)
 ; DTM - DATE/TIME of appt
"RTN","VPSRPC4",57,0)
 ; CIEN - entry to update with checkin time
"RTN","VPSRPC4",58,0)
 N VPSFDA,VERR,VPSRET
"RTN","VPSRPC4",59,0)
 N %,VPSNOW D NOW^%DTC S VPSNOW=%
"RTN","VPSRPC4",60,0)
 L +^SC(CLIN_",""S"","_DTM):3
"RTN","VPSRPC4",61,0)
 S VPSFDA(44.003,CIEN_","_DTM_","_CLIN_",",309)=VPSNOW  ; PATIENT multiple/APPOINTMENT multiple of HOSPITAL LOCATION file 
"RTN","VPSRPC4",62,0)
 D FILE^DIE("","VPSFDA","VERR")
"RTN","VPSRPC4",63,0)
 L -^SC(CLIN_",""S"","_DTM)
"RTN","VPSRPC4",64,0)
 I $D(VERR) S VPSRET="99-Appt could not be checked in"
"RTN","VPSRPC4",65,0)
 E  S VPSRET=1
"RTN","VPSRPC4",66,0)
 K VPSFDA,VERR
"RTN","VPSRPC4",67,0)
 Q VPSRET
"RTN","VPSRPC4",68,0)
 ;
"RTN","VPSRPC5")
0^17^B7561611^n/a
"RTN","VPSRPC5",1,0)
VPSRPC5 ;DALOI/KML - Utilities ;4/26/2012
"RTN","VPSRPC5",2,0)
 ;;1.0;VA POINT OF SERVICE (KIOSKS);**2**;Oct 21, 2011;Build 41
"RTN","VPSRPC5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPSRPC5",4,0)
 Q
"RTN","VPSRPC5",5,0)
 ;
"RTN","VPSRPC5",6,0)
GETSITES(RETURN,VPSSN) ;  CSW this is the new routine replacing the original
"RTN","VPSRPC5",7,0)
 ; Input:
"RTN","VPSRPC5",8,0)
 ; RETURN - passed in by reference; return value populated with the listof site ids visited by PATIENT (DFN)
"RTN","VPSRPC5",9,0)
 ; VPSSN - patient SSN
"RTN","VPSRPC5",10,0)
 ; Output:
"RTN","VPSRPC5",11,0)
 ; RETURN - array of site IDs obtained from the TREATING FACILITY LIST file (391.91).
"RTN","VPSRPC5",12,0)
 K RETURN,VPSDFN
"RTN","VPSRPC5",13,0)
 I '+$G(VPSSN) S RETURN(1)="99^PATIENT SSN not sent" Q
"RTN","VPSRPC5",14,0)
 D GETDFN(.VPSDFN,VPSSN)
"RTN","VPSRPC5",15,0)
 I $P(VPSDFN,U)=99 S RETURN=VPSDFN Q
"RTN","VPSRPC5",16,0)
 S VPSDFN=$P(VPSDFN,U,2)
"RTN","VPSRPC5",17,0)
 N VPSIEN,VPSCNT,VPSID,VPSNM
"RTN","VPSRPC5",18,0)
 D TFL^VAFCTFU1(.RETURN,VPSDFN)  ;IA2990 (supported)
"RTN","VPSRPC5",19,0)
 I $D(RETURN),$P(RETURN(1),"^")'>0 S RETURN(1)="99^Patient has not been treated at any other site" Q
"RTN","VPSRPC5",20,0)
 Q
"RTN","VPSRPC5",21,0)
 ;
"RTN","VPSRPC5",22,0)
GETDFN(RETURN,VPSSN) ;
"RTN","VPSRPC5",23,0)
 ;Input:
"RTN","VPSRPC5",24,0)
 ; RETURN - passed in by reference; return value populated with associated patient DFN
"RTN","VPSRPC5",25,0)
 ; VPSSN - patient social security number
"RTN","VPSRPC5",26,0)
 ; Output:
"RTN","VPSRPC5",27,0)
 ; RETURN - success - "1^_DFN
"RTN","VPSRPC5",28,0)
 ;          exception - "99^"_exception text
"RTN","VPSRPC5",29,0)
 ;
"RTN","VPSRPC5",30,0)
 ; External Reference IA#
"RTN","VPSRPC5",31,0)
 ; ------------------------
"RTN","VPSRPC5",32,0)
 ;#10035 - ^DPT( reference      (Supported)
"RTN","VPSRPC5",33,0)
 ;
"RTN","VPSRPC5",34,0)
 K RETURN
"RTN","VPSRPC5",35,0)
 N VPSDFN
"RTN","VPSRPC5",36,0)
 I $G(VPSSN)="" S RETURN="99^SSN NOT SENT." Q
"RTN","VPSRPC5",37,0)
 S VPSSN=$TR(VPSSN,"- ")
"RTN","VPSRPC5",38,0)
 I +$G(VPSSN)'>0 S RETURN="99^SSN SHOULD BE NUMERIC: "_VPSSN Q
"RTN","VPSRPC5",39,0)
 S VPSDFN=$O(^DPT("SSN",VPSSN,0))
"RTN","VPSRPC5",40,0)
 I +$G(VPSDFN)'>0 S RETURN="99^NO PATIENT FOUND WITH SSN: "_VPSSN Q
"RTN","VPSRPC5",41,0)
 S RETURN="1^"_VPSDFN
"RTN","VPSRPC5",42,0)
 Q
"RTN","VPSRPC5",43,0)
 ;
"RTN","VPSRPC5",44,0)
LAST5(LST,VPSID) ; Return a list of patients matching A9999 identifiers
"RTN","VPSRPC5",45,0)
 N I,IEN,XREF
"RTN","VPSRPC5",46,0)
 S (I,IEN)=0,XREF=$S($L(VPSID)=5:"BS5",1:"BS")
"RTN","VPSRPC5",47,0)
 F  S IEN=$O(^DPT(XREF,VPSID,IEN)) Q:'IEN  D
"RTN","VPSRPC5",48,0)
 . S I=I+1,LST(I)=IEN_U_$P(^DPT(IEN,0),U)_U_$$DOB^DPTLK1(IEN,2)_U_$$SSN^DPTLK1(IEN)  ; DG249,ICR5839
"RTN","VPSRPC5",49,0)
 Q
"RTN","VPSRPC5",50,0)
FULLSSN(LST,VPSID) ; Return a list of patients matching full SSN entered
"RTN","VPSRPC5",51,0)
 N I,IEN
"RTN","VPSRPC5",52,0)
 S (I,IEN)=0
"RTN","VPSRPC5",53,0)
 F  S IEN=$O(^DPT("SSN",VPSID,IEN)) Q:'IEN  D
"RTN","VPSRPC5",54,0)
 . S I=I+1,LST(I)=IEN_U_$P(^DPT(IEN,0),U)_U_$$DOB^DPTLK1(IEN,2)_U_$$SSN^DPTLK1(IEN)  ; DG249,ICR5839
"RTN","VPSRPC5",55,0)
 Q
"RTN","VPSRPC5",56,0)
 ;
"RTN","VPSRPC5",57,0)
LISTALL(Y,FROM,DIR) ; Return a bolus of patient names. From is either Name or IEN^Name.
"RTN","VPSRPC5",58,0)
 N I,IEN,CNT,FROMIEN,ORIDNAME S CNT=50,I=0,FROMIEN=0
"RTN","VPSRPC5",59,0)
 I $P(FROM,U,2)'="" S FROMIEN=$P(FROM,U,1),FROM=$O(^DPT("B",$P(FROM,U,2)),-DIR)
"RTN","VPSRPC5",60,0)
 F  S FROM=$O(^DPT("B",FROM),DIR) Q:FROM=""  D  Q:I=CNT
"RTN","VPSRPC5",61,0)
 . S IEN=FROMIEN,FROMIEN=0 F  S IEN=$O(^DPT("B",FROM,IEN)) Q:'IEN  D  Q:I=CNT
"RTN","VPSRPC5",62,0)
 . . S ORIDNAME=""
"RTN","VPSRPC5",63,0)
 . . S ORIDNAME=$G(^DPT(IEN,0)) ; Get zero node name.
"RTN","VPSRPC5",64,0)
 . . ; S X1=$G(^DPT(IEN,.1))_" "_$G(^DPT(IEN,.101))
"RTN","VPSRPC5",65,0)
 . . S I=I+1 S Y(I)=IEN_U_FROM_U_U_U_U_$P(ORIDNAME,U) ;_"^"_X ; _"^"_X1 ;" ("_X_")"
"RTN","VPSRPC5",66,0)
 Q
"VER")
8.0^22.0
"BLD",8153,6)
^2
**END**
**END**


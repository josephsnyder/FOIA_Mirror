Released XWB*1.1*53 SEQ #42
Extracted from mail message
**KIDS**:XWB*1.1*53^

**INSTALL NAME**
XWB*1.1*53
"BLD",1233,0)
XWB*1.1*53^RPC BROKER^0^3100208^y
"BLD",1233,1,0)
^^1^1^3090429^
"BLD",1233,1,1,0)
XWB*1.1*53.  See the patch description on Forum.
"BLD",1233,4,0)
^9.64PA^^
"BLD",1233,6.3)
4
"BLD",1233,"ABPKG")
n
"BLD",1233,"KRN",0)
^9.67PA^9002226^21
"BLD",1233,"KRN",.4,0)
.4
"BLD",1233,"KRN",.401,0)
.401
"BLD",1233,"KRN",.402,0)
.402
"BLD",1233,"KRN",.403,0)
.403
"BLD",1233,"KRN",.5,0)
.5
"BLD",1233,"KRN",.84,0)
.84
"BLD",1233,"KRN",3.6,0)
3.6
"BLD",1233,"KRN",3.8,0)
3.8
"BLD",1233,"KRN",9.2,0)
9.2
"BLD",1233,"KRN",9.8,0)
9.8
"BLD",1233,"KRN",9.8,"NM",0)
^9.68A^4^4
"BLD",1233,"KRN",9.8,"NM",1,0)
XWBSEC^^0^B5680874
"BLD",1233,"KRN",9.8,"NM",2,0)
XWBTCPM2^^0^B4246015
"BLD",1233,"KRN",9.8,"NM",3,0)
XWBTCPM^^0^B56306340
"BLD",1233,"KRN",9.8,"NM",4,0)
XWBTCPMT^^0^B11304181
"BLD",1233,"KRN",9.8,"NM","B","XWBSEC",1)

"BLD",1233,"KRN",9.8,"NM","B","XWBTCPM",3)

"BLD",1233,"KRN",9.8,"NM","B","XWBTCPM2",2)

"BLD",1233,"KRN",9.8,"NM","B","XWBTCPMT",4)

"BLD",1233,"KRN",19,0)
19
"BLD",1233,"KRN",19.1,0)
19.1
"BLD",1233,"KRN",101,0)
101
"BLD",1233,"KRN",409.61,0)
409.61
"BLD",1233,"KRN",771,0)
771
"BLD",1233,"KRN",779.2,0)
779.2
"BLD",1233,"KRN",870,0)
870
"BLD",1233,"KRN",8989.51,0)
8989.51
"BLD",1233,"KRN",8989.52,0)
8989.52
"BLD",1233,"KRN",8994,0)
8994
"BLD",1233,"KRN",9002226,0)
9002226
"BLD",1233,"KRN","B",.4,.4)

"BLD",1233,"KRN","B",.401,.401)

"BLD",1233,"KRN","B",.402,.402)

"BLD",1233,"KRN","B",.403,.403)

"BLD",1233,"KRN","B",.5,.5)

"BLD",1233,"KRN","B",.84,.84)

"BLD",1233,"KRN","B",3.6,3.6)

"BLD",1233,"KRN","B",3.8,3.8)

"BLD",1233,"KRN","B",9.2,9.2)

"BLD",1233,"KRN","B",9.8,9.8)

"BLD",1233,"KRN","B",19,19)

"BLD",1233,"KRN","B",19.1,19.1)

"BLD",1233,"KRN","B",101,101)

"BLD",1233,"KRN","B",409.61,409.61)

"BLD",1233,"KRN","B",771,771)

"BLD",1233,"KRN","B",779.2,779.2)

"BLD",1233,"KRN","B",870,870)

"BLD",1233,"KRN","B",8989.51,8989.51)

"BLD",1233,"KRN","B",8989.52,8989.52)

"BLD",1233,"KRN","B",8994,8994)

"BLD",1233,"KRN","B",9002226,9002226)

"BLD",1233,"QDEF")
^^^^YES^^^^NO^^NO
"BLD",1233,"QUES",0)
^9.62^^
"BLD",1233,"REQB",0)
^9.611^^
"MBREQ")
0
"PKG",8,-1)
1^1
"PKG",8,0)
RPC BROKER^XWB^Remote Procedure Call Broker^
"PKG",8,20,0)
^9.402P^^
"PKG",8,22,0)
^9.49I^1^1
"PKG",8,22,1,0)
1.1^2970918^2971120^7
"PKG",8,22,1,"PAH",1,0)
53^3100208^20
"PKG",8,22,1,"PAH",1,1,0)
^^1^1^3100208
"PKG",8,22,1,"PAH",1,1,1,0)
XWB*1.1*53.  See the patch description on Forum.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
4
"RTN","XWBSEC")
0^1^B5680874^B5461544
"RTN","XWBSEC",1,0)
XWBSEC ;SFISC/VYD - RPC BROKER ;02/03/10  11:37
"RTN","XWBSEC",2,0)
 ;;1.1;RPC BROKER;**3,6,10,35,53**;Mar 28, 1997;Build 4
"RTN","XWBSEC",3,0)
CHKPRMIT(XWBRP) ;checks to see if remote procedure is permited to run
"RTN","XWBSEC",4,0)
 ;Input:  XWBRP - Remote procedure to check
"RTN","XWBSEC",5,0)
 Q:$$KCHK^XUSRB("XUPROGMODE")
"RTN","XWBSEC",6,0)
 N ERR,XWBPRMIT,XWBALLOW
"RTN","XWBSEC",7,0)
 S U="^",XWBSEC="" ;Return XWBSEC="" if OK to run RPC
"RTN","XWBSEC",8,0)
 ;
"RTN","XWBSEC",9,0)
 ;In the beginning, when no DUZ is defined and no context exist, setup
"RTN","XWBSEC",10,0)
 ;default signon context
"RTN","XWBSEC",11,0)
 S:'$G(DUZ) DUZ=0,XQY0="XUS SIGNON"   ;set up default context
"RTN","XWBSEC",12,0)
 ;
"RTN","XWBSEC",13,0)
 ;These RPC's are allowed in any context, so we can just quit
"RTN","XWBSEC",14,0)
 I "^XWB IM HERE^XWB CREATE CONTEXT^XWB RPC LIST^XWB IS RPC AVAILABLE^XUS GET USER INFO^XUS GET TOKEN^XUS SET VISITOR^"[(U_XWBRP_U) Q  ;p53
"RTN","XWBSEC",15,0)
 ;VistAlink RPC's that are always allowed.
"RTN","XWBSEC",16,0)
 I "^XUS KAAJEE GET USER INFO^XUS KAAJEE LOGOUT^"[(U_XWBRP_U) Q
"RTN","XWBSEC",17,0)
 ;
"RTN","XWBSEC",18,0)
 ;If in Signon context, only allow XUS and XWB rpc's
"RTN","XWBSEC",19,0)
 I $G(XQY0)="XUS SIGNON","^XUS^XWB^"'[(U_$E(XWBRP,1,3)_U) S XWBSEC="Application context has not been created!" Q
"RTN","XWBSEC",20,0)
 ;XQCS allows all users access to the XUS SIGNON context.
"RTN","XWBSEC",21,0)
 ;Also to any context in the XUCOMMAND menu.
"RTN","XWBSEC",22,0)
 ;
"RTN","XWBSEC",23,0)
 I $G(XQY0)'="" D  ;1.1*6. XQY0="" after XUS SIGNON context deleted.
"RTN","XWBSEC",24,0)
 . S XWBALLOW=$$CHK^XQCS(DUZ,$P(XQY0,U),XWBRP)         ;do the check
"RTN","XWBSEC",25,0)
 . S:'XWBALLOW XWBSEC=XWBALLOW
"RTN","XWBSEC",26,0)
 E  S XWBSEC="Application context has not been created!"
"RTN","XWBSEC",27,0)
 Q
"RTN","XWBSEC",28,0)
 ;
"RTN","XWBSEC",29,0)
 ;
"RTN","XWBSEC",30,0)
CRCONTXT(RESULT,OPTION) ;creates context for the passed in option
"RTN","XWBSEC",31,0)
 K XQY0,XQY N XWB1,XABPGMOD,XWBPGMOD S RESULT=0
"RTN","XWBSEC",32,0)
 S OPTION=$$DECRYP^XUSRB1(OPTION) ;S:OPTION="" OPTION="\"
"RTN","XWBSEC",33,0)
 I OPTION="" S XQY=0,XQY0="",RESULT=1 Q  ;delete context if "" passed in.
"RTN","XWBSEC",34,0)
 S XWB1=$$OPTLK^XQCS(OPTION)
"RTN","XWBSEC",35,0)
 I XWB1="" S (XWBSEC,RESULT)="The context '"_OPTION_"' does not exist on server." Q  ;P10
"RTN","XWBSEC",36,0)
 S RESULT=$$CHK^XQCS(DUZ,XWB1)
"RTN","XWBSEC",37,0)
 ;Access or programmer
"RTN","XWBSEC",38,0)
 S XWBPGMOD=$$KCHK^XUSRB("XUPROGMODE")
"RTN","XWBSEC",39,0)
 I RESULT!XWBPGMOD S XQY0=OPTION,XQY=XWB1,RESULT=1
"RTN","XWBSEC",40,0)
 E  S XWBSEC=RESULT
"RTN","XWBSEC",41,0)
 Q
"RTN","XWBSEC",42,0)
 ;
"RTN","XWBSEC",43,0)
 ;
"RTN","XWBSEC",44,0)
STATE(%) ;Return a state value
"RTN","XWBSEC",45,0)
 Q:'$L($G(%)) $G(XWBSTATE)
"RTN","XWBSEC",46,0)
 Q $G(XWBSTATE(%))
"RTN","XWBSEC",47,0)
 ;
"RTN","XWBSEC",48,0)
 ;
"RTN","XWBSEC",49,0)
SET(%,VALUE) ;Set the state variable
"RTN","XWBSEC",50,0)
 I $G(%)="" S XWBSTATE=VALUE
"RTN","XWBSEC",51,0)
 S XWBSTATE(%)=VALUE
"RTN","XWBSEC",52,0)
 Q
"RTN","XWBSEC",53,0)
KILL(%) ;Kill state variable
"RTN","XWBSEC",54,0)
 I $L($G(%)) K XWBSTATE(%)
"RTN","XWBSEC",55,0)
 Q
"RTN","XWBTCPM")
0^3^B56306340^B55441602
"RTN","XWBTCPM",1,0)
XWBTCPM ;ISF/RWF - BROKER TCP/IP PROCESS HANDLER ;02/08/10  07:46
"RTN","XWBTCPM",2,0)
 ;;1.1;RPC BROKER;**35,43,49,53**;Mar 28, 1997;Build 4
"RTN","XWBTCPM",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified
"RTN","XWBTCPM",4,0)
 ;Based on: XWBTCPC & XWBTCPL, Modified by ISF/RWF
"RTN","XWBTCPM",5,0)
 ;Changed to be started by TCPIP service or %ZISTCPS
"RTN","XWBTCPM",6,0)
 ;
"RTN","XWBTCPM",7,0)
DSM ;DSM called from ucx, % passed in with device.
"RTN","XWBTCPM",8,0)
 D ESET
"RTN","XWBTCPM",9,0)
 ;Open the device
"RTN","XWBTCPM",10,0)
 S XWBTDEV=% X "O XWBTDEV:(TCPDEV):60" ;Special UCX/DSM open
"RTN","XWBTCPM",11,0)
 ;Go find the connection type
"RTN","XWBTCPM",12,0)
 U XWBTDEV
"RTN","XWBTCPM",13,0)
 G CONNTYPE
"RTN","XWBTCPM",14,0)
 ;
"RTN","XWBTCPM",15,0)
CACHEVMS ;Cache'/VMS tcpip entry point, called from XWBTCP_START.COM file
"RTN","XWBTCPM",16,0)
 D ESET
"RTN","XWBTCPM",17,0)
 S XWBTDEV=$S($ZV["VMS":"SYS$NET",1:$P) ;Support for both VMS/TCPIP and Linux/xinetd
"RTN","XWBTCPM",18,0)
 ; **Cache'/VMS specific code**
"RTN","XWBTCPM",19,0)
 O XWBTDEV::5
"RTN","XWBTCPM",20,0)
 X "U XWBTDEV:(::""-M"")" ;Packet mode like DSM
"RTN","XWBTCPM",21,0)
 G CONNTYPE
"RTN","XWBTCPM",22,0)
 ;
"RTN","XWBTCPM",23,0)
NT ;entry from ZISTCPS
"RTN","XWBTCPM",24,0)
 ;JOB LISTEN^%ZISTCPS("port","NT^XWBTCPM","stop code")
"RTN","XWBTCPM",25,0)
 D ESET
"RTN","XWBTCPM",26,0)
 S XWBTDEV=IO
"RTN","XWBTCPM",27,0)
 G CONNTYPE
"RTN","XWBTCPM",28,0)
 ;
"RTN","XWBTCPM",29,0)
GTMUCX(%) ;From ucx ZFOO
"RTN","XWBTCPM",30,0)
 ;If called from LISTEN^%ZISTCP(PORT,"GTM^XWBTCPM") S XWBTDEV=IO
"RTN","XWBTCPM",31,0)
 D ESET
"RTN","XWBTCPM",32,0)
 ;GTM specific code
"RTN","XWBTCPM",33,0)
 S @("$ZINTERRUPT=""I $$JOBEXAM^ZU($ZPOSITION)""")
"RTN","XWBTCPM",34,0)
 S XWBTDEV=% X "O %:(RECORDSIZE=512)"
"RTN","XWBTCPM",35,0)
 G CONNTYPE
"RTN","XWBTCPM",36,0)
 ;
"RTN","XWBTCPM",37,0)
GTMLNX ;From Linux xinetd script
"RTN","XWBTCPM",38,0)
 D ESET
"RTN","XWBTCPM",39,0)
 ;GTM specific code
"RTN","XWBTCPM",40,0)
 S @("$ZINTERRUPT=""I $$JOBEXAM^ZU($ZPOSITION)""")
"RTN","XWBTCPM",41,0)
 S XWBTDEV=$P X "U XWBTDEV:(nowrap:nodelimiter:ioerror=""TRAP"")"
"RTN","XWBTCPM",42,0)
 S %="",@("%=$ZTRNLNM(""REMOTE_HOST"")") S:$L(%) IO("GTM-IP")=%
"RTN","XWBTCPM",43,0)
 G CONNTYPE
"RTN","XWBTCPM",44,0)
 ;
"RTN","XWBTCPM",45,0)
ESET ;Set inital error trap
"RTN","XWBTCPM",46,0)
 S U="^",$ETRAP="D ^%ZTER H" ;Set up the error trap
"RTN","XWBTCPM",47,0)
 S X="",@("$ZT=X") ;Clear old trap
"RTN","XWBTCPM",48,0)
 Q
"RTN","XWBTCPM",49,0)
 ;Find the type of connection and jump to the processing routine.
"RTN","XWBTCPM",50,0)
CONNTYPE ;
"RTN","XWBTCPM",51,0)
 N XWBDEBUG,XWBAPVER,XWBCLMAN,XWBENVL,XWBLOG,XWBOS,XWBPTYPE
"RTN","XWBTCPM",52,0)
 N XWBTBUF,XWBTIP,XWBTSKT,XWBVER,XWBWRAP,XWBSHARE,XWBT
"RTN","XWBTCPM",53,0)
 N SOCK,TYPE
"RTN","XWBTCPM",54,0)
 D INIT
"RTN","XWBTCPM",55,0)
 S XWB=$$BREAD^XWBRW(5,XWBTIME)
"RTN","XWBTCPM",56,0)
 D LOG("MSG format is "_XWB_" type "_$S(XWB="[XWB]":"NEW",XWB="{XWB}":"OLD",XWB="<?xml":"M2M",XWB="~BSE~":"BSE",XWB="~EAC~":"EAC",XWB="~SVR~":"SVR",1:"Unk")) ; XWB*1.1*XX
"RTN","XWBTCPM",57,0)
 I XWB["[XWB]" G NEW
"RTN","XWBTCPM",58,0)
 I XWB["{XWB}" G OLD^XWBTCPM1
"RTN","XWBTCPM",59,0)
 I XWB["<?xml" G M2M
"RTN","XWBTCPM",60,0)
 I $L($T(OTH^XWBTCPM2)) D OTH^XWBTCPM2 ;See if a special code.
"RTN","XWBTCPM",61,0)
 I '$L($T(OTH^XWBTCPM2)) D LOG("Prefix not known: "_XWB) ; XWB*1.1*XX
"RTN","XWBTCPM",62,0)
 Q
"RTN","XWBTCPM",63,0)
 ;
"RTN","XWBTCPM",64,0)
NEWJOB() ;Check if OK to start a new job, Return 1 if OK, 0 if not OK.
"RTN","XWBTCPM",65,0)
 N X,Y,J,XWBVOL
"RTN","XWBTCPM",66,0)
 D GETENV^%ZOSV S XWBVOL=$P(Y,"^",2)
"RTN","XWBTCPM",67,0)
 S X=$O(^XTV(8989.3,1,4,"B",XWBVOL,0)),J=$S(X>0:^XTV(8989.3,1,4,X,0),1:"ROU^y^1")
"RTN","XWBTCPM",68,0)
 I $G(^%ZIS(14.5,"LOGON",XWBVOL)) Q 0 ;Check INHIBIT LOGONS?
"RTN","XWBTCPM",69,0)
 I $D(^%ZOSF("ACTJ")) X ^("ACTJ") I $P(J,U,3),($P(J,U,3)'>Y) Q 0
"RTN","XWBTCPM",70,0)
 Q 1
"RTN","XWBTCPM",71,0)
 ;
"RTN","XWBTCPM",72,0)
M2M ;M2M Broker
"RTN","XWBTCPM",73,0)
 S XWBRBUF=XWB_XWBRBUF,(IO,IO(0))=XWBTDEV G SPAWN^XWBVLL
"RTN","XWBTCPM",74,0)
 Q
"RTN","XWBTCPM",75,0)
 ;
"RTN","XWBTCPM",76,0)
NEW ;New broker
"RTN","XWBTCPM",77,0)
 S U="^",DUZ=0,DUZ(0)="",XWBVER=1.108
"RTN","XWBTCPM",78,0)
 D SETTIME(1) ;Setup for sign-on timeout
"RTN","XWBTCPM",79,0)
 U XWBTDEV D
"RTN","XWBTCPM",80,0)
 . N XWB,ERR,NATIP,I
"RTN","XWBTCPM",81,0)
 . S ERR=$$PRSP^XWBPRS
"RTN","XWBTCPM",82,0)
 . S ERR=$$PRSM^XWBPRS
"RTN","XWBTCPM",83,0)
 . S MSG=$G(XWB(4,"CMD")) ;Build connect msg.
"RTN","XWBTCPM",84,0)
 . S I="" F  S I=$O(XWB(5,"P",I)) Q:I=""  S MSG=MSG_U_XWB(5,"P",I)
"RTN","XWBTCPM",85,0)
 . ;Get the peer and save that IP.
"RTN","XWBTCPM",86,0)
 . S NATIP=$$GETPEER^%ZOSV S:'$L(NATIP) NATIP=$P(MSG,"^",2)
"RTN","XWBTCPM",87,0)
 . I NATIP'=$P(MSG,"^",2) S $P(MSG,"^",2)=NATIP
"RTN","XWBTCPM",88,0)
 . Q
"RTN","XWBTCPM",89,0)
 S X=$$NEWJOB() D:'X LOG("No New Connects")
"RTN","XWBTCPM",90,0)
 I ($P(MSG,U)'="TCPConnect")!('X) D QSND^XWBRW("reject"),LOG("reject: "_MSG) Q
"RTN","XWBTCPM",91,0)
 D QSND^XWBRW("accept"),LOG("accept") ;Ack
"RTN","XWBTCPM",92,0)
 S IO("IP")=$P(MSG,U,2),XWBTSKT=$P(MSG,U,3),XWBCLMAN=$P(MSG,U,4)
"RTN","XWBTCPM",93,0)
 S XWBTIP=$G(IO("IP"))
"RTN","XWBTCPM",94,0)
 ;start RUM for Broker Handler XWB*1.1*5
"RTN","XWBTCPM",95,0)
 D LOGRSRC^%ZOSV("$BROKER HANDLER$",2,1)
"RTN","XWBTCPM",96,0)
 ;GTM
"RTN","XWBTCPM",97,0)
 I $G(XWBT("PCNT")) D
"RTN","XWBTCPM",98,0)
 . S X=$NA(^XUTL("XUSYS",$J,1)) L +@X:0
"RTN","XWBTCPM",99,0)
 . D COUNT^XUSCNT(1),SETLOCK^XUSCNT(X)
"RTN","XWBTCPM",100,0)
 ;We don't use a callback
"RTN","XWBTCPM",101,0)
 K XWB,CON,LEN,MSG ;Clean up
"RTN","XWBTCPM",102,0)
 ;Attempt to share license, Must have TCP port open first.
"RTN","XWBTCPM",103,0)
 U XWBTDEV ;D SHARELIC^%ZOSV(1)
"RTN","XWBTCPM",104,0)
 ;setup null device "NULL"
"RTN","XWBTCPM",105,0)
 S %ZIS="0H",IOP="NULL" D ^%ZIS S XWBNULL=IO I POP S XWBERROR="No NULL device" D LOG(XWBERROR),EXIT Q
"RTN","XWBTCPM",106,0)
 D SAVDEV^%ZISUTL("XWBNULL")
"RTN","XWBTCPM",107,0)
 ;change process name
"RTN","XWBTCPM",108,0)
 D CHPRN("ip"_$P(XWBTIP,".",3,4)_":"_XWBTDEV)
"RTN","XWBTCPM",109,0)
 ;
"RTN","XWBTCPM",110,0)
RESTART ;The error trap returns to here
"RTN","XWBTCPM",111,0)
 N $ESTACK S $ETRAP="D ETRAP^XWBTCPM(0)"
"RTN","XWBTCPM",112,0)
 S DT=$$DT^XLFDT,DTIME=30
"RTN","XWBTCPM",113,0)
 U XWBTDEV D MAIN
"RTN","XWBTCPM",114,0)
 D LOG("Exit: "_XWBTBUF)
"RTN","XWBTCPM",115,0)
 ;Turn off the error trap for the exit
"RTN","XWBTCPM",116,0)
 S $ETRAP=""
"RTN","XWBTCPM",117,0)
 D EXIT ;Logout
"RTN","XWBTCPM",118,0)
 K XWBR,XWBARY
"RTN","XWBTCPM",119,0)
 ;stop RUM for handler XWB*1.1*5
"RTN","XWBTCPM",120,0)
 D LOGRSRC^%ZOSV("$BROKER HANDLER$",2,2)
"RTN","XWBTCPM",121,0)
 D USE^%ZISUTL("XWBNULL"),CLOSE^%ZISUTL("XWBNULL")
"RTN","XWBTCPM",122,0)
 ;Close in the calling script
"RTN","XWBTCPM",123,0)
 K SOCK,TYPE,XWBSND,XWBTYPE,XWBRBUF
"RTN","XWBTCPM",124,0)
 Q
"RTN","XWBTCPM",125,0)
 ;
"RTN","XWBTCPM",126,0)
MAIN ; -- main message processing loop. debug at MAIN+1
"RTN","XWBTCPM",127,0)
 F  D  Q:XWBTBUF="#BYE#"
"RTN","XWBTCPM",128,0)
 . ;Setup
"RTN","XWBTCPM",129,0)
 . S XWBAPVER=0,XWBTBUF="",XWBTCMD="",XWBRBUF=""
"RTN","XWBTCPM",130,0)
 . K XWBR,XWBARY,XWBPRT
"RTN","XWBTCPM",131,0)
 . ; -- read client request
"RTN","XWBTCPM",132,0)
 . S XR=$$BREAD^XWBRW(1,XWBTIME,1)
"RTN","XWBTCPM",133,0)
 . I '$L(XR) D LOG("Timeout: "_XWBTIME) S XWBTBUF="#BYE#" Q
"RTN","XWBTCPM",134,0)
 . S XR=XR_$$BREAD^XWBRW(4)
"RTN","XWBTCPM",135,0)
 . I XR="#BYE#" D  Q  ;Check for exit
"RTN","XWBTCPM",136,0)
 . . D QSND^XWBRW("#BYE#"),LOG("BYE CMD") S XWBTBUF="#BYE#"
"RTN","XWBTCPM",137,0)
 . . Q
"RTN","XWBTCPM",138,0)
 . S TYPE=(XR="[XWB]")  ;check HDR
"RTN","XWBTCPM",139,0)
 . I 'TYPE D LOG("Bad Header: "_XR) Q
"RTN","XWBTCPM",140,0)
 . D CALLP^XWBPRS(.XWBR,$G(XWBDEBUG)) ;Read the NEW Msg parameters and call RPC
"RTN","XWBTCPM",141,0)
 . IF XWBTCMD="#BYE#" D  Q
"RTN","XWBTCPM",142,0)
 . . D QSND^XWBRW("#BYE#"),LOG("BYE CMD") S XWBTBUF=XWBTCMD
"RTN","XWBTCPM",143,0)
 . . Q
"RTN","XWBTCPM",144,0)
 . U XWBTDEV
"RTN","XWBTCPM",145,0)
 . S XWBPTYPE=$S('$D(XWBPTYPE):1,XWBPTYPE<1:1,XWBPTYPE>6:1,1:XWBPTYPE)
"RTN","XWBTCPM",146,0)
 . ;I $G(XWBPRT) D RETURN^XWBPRS2 Q  ;New msg return
"RTN","XWBTCPM",147,0)
 . I '$G(XWBPRT) D SND^XWBRW ;Return data,flush buffer
"RTN","XWBTCPM",148,0)
 Q  ;End Of Main
"RTN","XWBTCPM",149,0)
 ;
"RTN","XWBTCPM",150,0)
 ;
"RTN","XWBTCPM",151,0)
ETRAP(EXIT) ; -- on trapped error, send error info to client
"RTN","XWBTCPM",152,0)
 N XWBERC,XWBERR
"RTN","XWBTCPM",153,0)
 ;Change trapping during trap.
"RTN","XWBTCPM",154,0)
 S $ETRAP="D ^%ZTER,ETRAP^XWBTCPM(1)"
"RTN","XWBTCPM",155,0)
 S XWBERC=$E($$EC^%ZOSV,1,200),XWBERR="M  ERROR="_XWBERC_$C(13,10)_"LAST REF="_$$LGR^%ZOSV
"RTN","XWBTCPM",156,0)
 I $EC["U411" S XWBERROR="U411",XWBSEC="",XWBERR="Data Transfer Error to Server"
"RTN","XWBTCPM",157,0)
 D ^%ZTER ;%ZTER clears $ZE and $ZCODE
"RTN","XWBTCPM",158,0)
 D LOG("In ETRAP: "_XWBERC) ;Log
"RTN","XWBTCPM",159,0)
 I (XWBERC["READ")!(XWBERC["WRITE")!(XWBERC["SYSTEM-F")!(XWBERC["IOEOF") D EXIT X "HALT "
"RTN","XWBTCPM",160,0)
 U XWBTDEV
"RTN","XWBTCPM",161,0)
 I $G(XWBT("PCNT")) L +^XUTL("XUSYS",$J,0):99
"RTN","XWBTCPM",162,0)
 E  L  ;Clear Locks
"RTN","XWBTCPM",163,0)
 ;
"RTN","XWBTCPM",164,0)
 D ESND^XWBRW($C(24)_XWBERR_$C(4))
"RTN","XWBTCPM",165,0)
 I EXIT D EXIT X "HALT "
"RTN","XWBTCPM",166,0)
 S $ETRAP="Q:($ESTACK&'$QUIT)  Q:$ESTACK -9 S $ECODE="""" D CLEANP^XWBTCPM G RESTART^XWBTCPM",$ECODE=",U99,"
"RTN","XWBTCPM",167,0)
 Q
"RTN","XWBTCPM",168,0)
 ;
"RTN","XWBTCPM",169,0)
CLEANP ;Clean up the partion
"RTN","XWBTCPM",170,0)
 N XWBTDEV,XWBNULL D KILL^XUSCLEAN
"RTN","XWBTCPM",171,0)
 Q
"RTN","XWBTCPM",172,0)
 ;
"RTN","XWBTCPM",173,0)
STYPE(X,WRAP) ;For backward compatability only
"RTN","XWBTCPM",174,0)
 I $D(WRAP) Q $$RTRNFMT^XWBLIB($G(X),WRAP)
"RTN","XWBTCPM",175,0)
 Q $$RTRNFMT^XWBLIB(X)
"RTN","XWBTCPM",176,0)
 ;
"RTN","XWBTCPM",177,0)
BREAD(L,T) ;read tcp buffer, L is length
"RTN","XWBTCPM",178,0)
 Q $$BREAD^XWBRW(L,$G(T))
"RTN","XWBTCPM",179,0)
 ;
"RTN","XWBTCPM",180,0)
CHPRN(N) ;change process name
"RTN","XWBTCPM",181,0)
 ;Change process name to N
"RTN","XWBTCPM",182,0)
 D SETNM^%ZOSV($E(N,1,15))
"RTN","XWBTCPM",183,0)
 Q
"RTN","XWBTCPM",184,0)
 ;
"RTN","XWBTCPM",185,0)
SETTIME(%) ;Set the Read timeout 0=RPC, 1=sign-on
"RTN","XWBTCPM",186,0)
 ; Increased timeout period (%=1) during signon from 90 to 180 for accessibility reasons
"RTN","XWBTCPM",187,0)
 S XWBTIME=$S($G(%):180,$G(XWBVER)>1.1:$$BAT^XUPARAM,1:36000),XWBTIME(1)=5 ; (*p35)
"RTN","XWBTCPM",188,0)
 Q
"RTN","XWBTCPM",189,0)
TIMEOUT ;Do this on MAIN  loop timeout
"RTN","XWBTCPM",190,0)
 I $G(DUZ)>0 D QSND^XWBRW("#BYE#") Q
"RTN","XWBTCPM",191,0)
 ;Sign-on timeout
"RTN","XWBTCPM",192,0)
 S XWBR(0)=0,XWBR(1)=1,XWBR(2)="",XWBR(3)="TIME-OUT",XWBPTYPE=2
"RTN","XWBTCPM",193,0)
 D SND^XWBRW
"RTN","XWBTCPM",194,0)
 Q
"RTN","XWBTCPM",195,0)
 ;
"RTN","XWBTCPM",196,0)
OS() ;Return the OS
"RTN","XWBTCPM",197,0)
 Q $S(^%ZOSF("OS")["OpenM":"OpenM",^%ZOSF("OS")["GT.M":"GT.M",^("OS")["DSM":"DSM",1:"UNK")
"RTN","XWBTCPM",198,0)
 ;
"RTN","XWBTCPM",199,0)
INIT ;Setup
"RTN","XWBTCPM",200,0)
 S U="^",XWBTIME=10,XWBOS=$$OS,XWBDEBUG=0,XWBRBUF=""
"RTN","XWBTCPM",201,0)
 S XWBDEBUG=$$GET^XPAR("SYS","XWBDEBUG")
"RTN","XWBTCPM",202,0)
 S XWBT("BF")=$S(XWBOS="GT.M":"#",1:"!")
"RTN","XWBTCPM",203,0)
 S XWBT("PCNT")=0 I XWBOS="GT.M",$L($T(^XUSCNT)) S XWBT("PCNT")=1
"RTN","XWBTCPM",204,0)
 D LOGSTART^XWBDLOG("XWBTCPM")
"RTN","XWBTCPM",205,0)
 Q
"RTN","XWBTCPM",206,0)
 ;
"RTN","XWBTCPM",207,0)
DEBUG ;Entry point for debug, Build a server to get the connect
"RTN","XWBTCPM",208,0)
 ;Cache sample;ZB SERV+1^XWBTCPM:"L+" ZB ETRAP+1^XWBTCPM:"B"
"RTN","XWBTCPM",209,0)
 W !,"Before running this entry point set your debugger to stop at"
"RTN","XWBTCPM",210,0)
 W !,"the place you want to debug. Some spots to use:"
"RTN","XWBTCPM",211,0)
 W !,"'SERV+1^XWBTCPM', 'MAIN+1^XWBTCPM' or 'CAPI+1^XWBPRS.'",!
"RTN","XWBTCPM",212,0)
 W !,"or location of your choice.",!
"RTN","XWBTCPM",213,0)
 W !,"IP Socket to Listen on: " R SOCK:300,! Q:'$T!(SOCK["^")
"RTN","XWBTCPM",214,0)
 ;Use %ZISTCP to do a single server
"RTN","XWBTCPM",215,0)
 D LISTEN^%ZISTCP(SOCK,"SERV^XWBTCPM")
"RTN","XWBTCPM",216,0)
 U $P W !,"Done"
"RTN","XWBTCPM",217,0)
 Q
"RTN","XWBTCPM",218,0)
SERV ;Callback from the server
"RTN","XWBTCPM",219,0)
 S XWBTDEV=IO,XWBTIME(1)=3600 D INIT
"RTN","XWBTCPM",220,0)
 S XWBDEBUG=1,MSG=$$BREAD^XWBRW(5,60) ;R MSG#5
"RTN","XWBTCPM",221,0)
 D NEW
"RTN","XWBTCPM",222,0)
 S IO("C")=1 ;Cause the Listenr to stop
"RTN","XWBTCPM",223,0)
 Q
"RTN","XWBTCPM",224,0)
 ;
"RTN","XWBTCPM",225,0)
EXIT ;Close out
"RTN","XWBTCPM",226,0)
 I $G(DUZ) D LOGOUT^XUSRB
"RTN","XWBTCPM",227,0)
 I $G(XWBT("PCNT")) D COUNT^XUSCNT(-1)
"RTN","XWBTCPM",228,0)
 Q
"RTN","XWBTCPM",229,0)
 ;
"RTN","XWBTCPM",230,0)
LOG(MSG) ;Record Debug Info
"RTN","XWBTCPM",231,0)
 D:$G(XWBDEBUG) LOG^XWBDLOG(MSG)
"RTN","XWBTCPM",232,0)
 Q
"RTN","XWBTCPM",233,0)
 ;
"RTN","XWBTCPM2")
0^2^B4246015^B3174797
"RTN","XWBTCPM2",1,0)
XWBTCPM2 ;ISF/RWF - BROKER Other Service ;12/16/09  07:58
"RTN","XWBTCPM2",2,0)
 ;;1.1;RPC BROKER;**43,45,53**;Mar 28, 1997;Build 4
"RTN","XWBTCPM2",3,0)
 Q
"RTN","XWBTCPM2",4,0)
OTH ;Check if some other special service.
"RTN","XWBTCPM2",5,0)
 ; ZEXCEPT: XWB - set prior to call from CONNTYPE^XWBTCPM
"RTN","XWBTCPM2",6,0)
 S $ETRAP="D ERR^XWBTCPM2"
"RTN","XWBTCPM2",7,0)
 I XWB="~EAC~" G EAC
"RTN","XWBTCPM2",8,0)
 I XWB="~BSE~" G BSE
"RTN","XWBTCPM2",9,0)
 I XWB="~SVR~" G SVR
"RTN","XWBTCPM2",10,0)
 D LOG("In 0TH^XWBTCPM2 - Prefix not known: "_XWB)
"RTN","XWBTCPM2",11,0)
 Q
"RTN","XWBTCPM2",12,0)
 ;
"RTN","XWBTCPM2",13,0)
SVR ;Handle
"RTN","XWBTCPM2",14,0)
 Q
"RTN","XWBTCPM2",15,0)
EAC ;Enterprise Access
"RTN","XWBTCPM2",16,0)
 Q
"RTN","XWBTCPM2",17,0)
 ;
"RTN","XWBTCPM2",18,0)
BSE ;Broker Security Enhansment
"RTN","XWBTCPM2",19,0)
 D LOG("BSE msg")
"RTN","XWBTCPM2",20,0)
 N L,HDL,RET,XWBSBUF
"RTN","XWBTCPM2",21,0)
 S XWBSBUF="",RET="",HDL=""
"RTN","XWBTCPM2",22,0)
 S L=$$BREAD^XWBRW(3) I L S HDL=$$BREAD^XWBRW(L)
"RTN","XWBTCPM2",23,0)
 I $E(HDL,1,3)="PUT" D
"RTN","XWBTCPM2",24,0)
 . D RPUT^XUSBSE1(.RET,HDL)
"RTN","XWBTCPM2",25,0)
 . Q
"RTN","XWBTCPM2",26,0)
 ;Check IT
"RTN","XWBTCPM2",27,0)
 I $E(HDL,1,3)'="PUT" D GETVISIT^XUSBSE1(.RET,HDL)
"RTN","XWBTCPM2",28,0)
 D WRITE(RET),WBF
"RTN","XWBTCPM2",29,0)
 Q
"RTN","XWBTCPM2",30,0)
 ;
"RTN","XWBTCPM2",31,0)
ERR ;Error Trap
"RTN","XWBTCPM2",32,0)
 D ^%ZTER
"RTN","XWBTCPM2",33,0)
 G H2^XUSCLEAN
"RTN","XWBTCPM2",34,0)
 ;
"RTN","XWBTCPM2",35,0)
LOG(%) ;Link to logger
"RTN","XWBTCPM2",36,0)
 Q:'$G(XWBDEBUG)
"RTN","XWBTCPM2",37,0)
 D LOG^XWBTCPM(%)
"RTN","XWBTCPM2",38,0)
 Q
"RTN","XWBTCPM2",39,0)
 ;
"RTN","XWBTCPM2",40,0)
WRITE(M,F) ;Write
"RTN","XWBTCPM2",41,0)
 N L S L="" I '$G(F) S L=$E(1000+$L(M),2,4)
"RTN","XWBTCPM2",42,0)
 D WRITE^XWBRW(L_M)
"RTN","XWBTCPM2",43,0)
 Q
"RTN","XWBTCPM2",44,0)
WBF ;Buffer Flush
"RTN","XWBTCPM2",45,0)
 D WBF^XWBRW
"RTN","XWBTCPM2",46,0)
 Q
"RTN","XWBTCPM2",47,0)
 ;
"RTN","XWBTCPM2",48,0)
OPEN(P1,P2) ;Open the device and set the variables
"RTN","XWBTCPM2",49,0)
 D CALL^%ZISTCP(P1,P2) Q:POP
"RTN","XWBTCPM2",50,0)
 S XWBTDEV=IO
"RTN","XWBTCPM2",51,0)
 Q
"RTN","XWBTCPM2",52,0)
 ;
"RTN","XWBTCPM2",53,0)
CALLBSE(SERVER,PORT,TOKEN,STN) ;Special Broker service
"RTN","XWBTCPM2",54,0)
 N XWBDEBUG,XWBOS,XWBRBUF,XWBSBUF,XWBT,XWBTIME,IO
"RTN","XWBTCPM2",55,0)
 N DEMOSTR,XWBTDEV,RET,X,POP
"RTN","XWBTCPM2",56,0)
 S IO(0)=$P
"RTN","XWBTCPM2",57,0)
 D INIT^XWBTCPM,LOG("CALLBSE")
"RTN","XWBTCPM2",58,0)
 D OPEN(SERVER,PORT)
"RTN","XWBTCPM2",59,0)
 ; if initial failure try to get web address
"RTN","XWBTCPM2",60,0)
 I POP,$G(STN)'="" S SERVER=$$WEBADDRS^XUSBSE1(STN) I SERVER'="" D OPEN(SERVER,PORT)
"RTN","XWBTCPM2",61,0)
 I POP Q "Didn't open connection."
"RTN","XWBTCPM2",62,0)
 S XWBSBUF="",XWBRBUF=""
"RTN","XWBTCPM2",63,0)
 U XWBTDEV
"RTN","XWBTCPM2",64,0)
 D WRITE("~BSE~",1),WRITE(TOKEN),WBF^XWBRW
"RTN","XWBTCPM2",65,0)
 S X=$$BREAD^XWBRW(3),RET="No Response" I X S RET=$$BREAD^XWBRW(X)
"RTN","XWBTCPM2",66,0)
 D CLOSE^%ZISTCP,LOG("FINISH")
"RTN","XWBTCPM2",67,0)
 Q RET
"RTN","XWBTCPMT")
0^4^B11304181^B11122547
"RTN","XWBTCPMT",1,0)
XWBTCPMT ;ISF/RWF - Routine to test a connection ;10/07/09  16:37
"RTN","XWBTCPMT",2,0)
 ;;1.1;RPC BROKER;**43,49,53**;Mar 28, 1997;Build 4
"RTN","XWBTCPMT",3,0)
CALL ;Interactive
"RTN","XWBTCPMT",4,0)
 N IP,PORT,STAT
"RTN","XWBTCPMT",5,0)
 D HOME^%ZIS
"RTN","XWBTCPMT",6,0)
 S U="^",DTIME=$$DTIME^XUP
"RTN","XWBTCPMT",7,0)
 W !,"Interactive Broker Test"
"RTN","XWBTCPMT",8,0)
 R !,"IP ADDRESS: ",IP:DTIME
"RTN","XWBTCPMT",9,0)
 I IP["^" Q
"RTN","XWBTCPMT",10,0)
 R !,"PORT: ",PORT:DTIME
"RTN","XWBTCPMT",11,0)
 I PORT["^" Q
"RTN","XWBTCPMT",12,0)
 S STAT=$$TEST(IP,PORT,1)
"RTN","XWBTCPMT",13,0)
 U $P
"RTN","XWBTCPMT",14,0)
 W !,$S(STAT>0:"Success, response: "_$P(STAT,U,2),1:"Failed: "_$P(STAT,U,2,9))
"RTN","XWBTCPMT",15,0)
 Q
"RTN","XWBTCPMT",16,0)
 ;
"RTN","XWBTCPMT",17,0)
TEST(IP,PORT,TALK) ;
"RTN","XWBTCPMT",18,0)
 N T1,T2,T3,T4,OS,RES,RES2,RES3
"RTN","XWBTCPMT",19,0)
 S OS=^%ZOSF("OS")
"RTN","XWBTCPMT",20,0)
 I IP'?1.3N1P1.3N1P1.3N1P1.3N S IP=$$ADDRESS^XLFNSLK(IP)
"RTN","XWBTCPMT",21,0)
 I IP'?1.3N1P1.3N1P1.3N1P1.3N Q "-1^BAD IP"
"RTN","XWBTCPMT",22,0)
 I OS["OpenM" X "S T1=$ZH"
"RTN","XWBTCPMT",23,0)
 D CALL^%ZISTCP(IP,PORT)
"RTN","XWBTCPMT",24,0)
 I OS["OpenM" X "S T2=$ZH"
"RTN","XWBTCPMT",25,0)
 I POP Q "-1^Failed to Connect"
"RTN","XWBTCPMT",26,0)
 U IO
"RTN","XWBTCPMT",27,0)
 N $ET S $ET="G ERR^XWBTCPMT"
"RTN","XWBTCPMT",28,0)
 ;TCPConnect
"RTN","XWBTCPMT",29,0)
 W "[XWB]10304"_$C(10)_"TCPConnect5001010.6.17.95f00010f0024ISF-FORTW.vha.med.va.govf"_$C(4),@IOF
"RTN","XWBTCPMT",30,0)
 R RES:10 I '$T S RES="-1^TIMEOUT" G EXIT
"RTN","XWBTCPMT",31,0)
 I OS["OpenM" X "S T3=$ZH"
"RTN","XWBTCPMT",32,0)
 W "[XWB]11302"_$C(1)_"0"_$C(16)_"XUS SIGNON SETUP54f"_$C(4),@IOF
"RTN","XWBTCPMT",33,0)
 R RES2:10
"RTN","XWBTCPMT",34,0)
 I OS["OpenM" X "S T4=$ZH"
"RTN","XWBTCPMT",35,0)
 W "[XWB]10304"_$C(5)_"#BYE#"_$C(4),@IOF
"RTN","XWBTCPMT",36,0)
 R RES3:3 I '$T S RES="-1^TIMEOUT after accept" G EXIT
"RTN","XWBTCPMT",37,0)
 S RES="1^"_RES_U_($G(T2)-$G(T1))_U_($G(T3)-$G(T2))_U_($G(T4)-$G(T3))
"RTN","XWBTCPMT",38,0)
EXIT ;Close and Exit
"RTN","XWBTCPMT",39,0)
 D CLOSE^%ZISTCP
"RTN","XWBTCPMT",40,0)
 Q RES
"RTN","XWBTCPMT",41,0)
 ;
"RTN","XWBTCPMT",42,0)
ERR ;
"RTN","XWBTCPMT",43,0)
 D CLOSE^%ZISTCP
"RTN","XWBTCPMT",44,0)
 U $P
"RTN","XWBTCPMT",45,0)
 Q "-1^"_$$EC^%ZOSV
"RTN","XWBTCPMT",46,0)
 ;
"RTN","XWBTCPMT",47,0)
CHECK ;Check server setup
"RTN","XWBTCPMT",48,0)
 N XPARSYS,XWBDEBUG,XWBOS,XWBT,XWNRBUF,XWBTIME,NEWJOB,XWBVER
"RTN","XWBTCPMT",49,0)
 W !,"This will check for some of the errors that can prevent the Broker"
"RTN","XWBTCPMT",50,0)
 W !,"from getting started.",!
"RTN","XWBTCPMT",51,0)
 D HOME^%ZIS
"RTN","XWBTCPMT",52,0)
 S XWBVER=1.108
"RTN","XWBTCPMT",53,0)
 D INIT^XWBTCPM
"RTN","XWBTCPMT",54,0)
 W !,"Debugging is set to ",$S(XWBDEBUG=1:"On",XWBDEBUG=2:"Verbose",XWBDEBUG=3:"Very Verbose",1:"Off")
"RTN","XWBTCPMT",55,0)
 D SETTIME^XWBTCPM(0)
"RTN","XWBTCPMT",56,0)
 W !,"Broker activity timeout is set to ",XWBTIME
"RTN","XWBTCPMT",57,0)
 S %ZIS="M",IOP="NULL" D ^%ZIS
"RTN","XWBTCPMT",58,0)
 I POP W !,"The NULL device is not setup correctly."
"RTN","XWBTCPMT",59,0)
 I 'POP D
"RTN","XWBTCPMT",60,0)
 . W !,"Checking can Write to null device"
"RTN","XWBTCPMT",61,0)
 . U IO W !,"TEST",!
"RTN","XWBTCPMT",62,0)
 . D ^%ZISC U IO W !,"The NULL device is OK."
"RTN","XWBTCPMT",63,0)
 I $T(SHARELIC^%ZOSV)="" W !,"The routine %ZOSV is missing the entry point 'SHARELIC'."
"RTN","XWBTCPMT",64,0)
 I $T(GETPEER^%ZOSV)="" W !,"The routine %ZOSV is missing the entry point 'GETPEER'."
"RTN","XWBTCPMT",65,0)
 I $G(XWBT("PCNT")),$T(COUNT^XUSCNT)="" W !,"The routine XUSCNT is missing on a GT.M system."
"RTN","XWBTCPMT",66,0)
 W !,"Checking if new JOB's can start."
"RTN","XWBTCPMT",67,0)
 S ^TMP("XWB",$J)=1 X "J HOLD^XWBTCPMT($J) H 1"
"RTN","XWBTCPMT",68,0)
 I $G(^TMP("XWB",$J))=1 W !,"Doesn't look like a new JOB could start!",!
"RTN","XWBTCPMT",69,0)
 S NEWJOB=$$NEWJOB^XWBTCPM()
"RTN","XWBTCPMT",70,0)
 W !,"New jobs are "_$S('NEWJOB:"not ",1:"")_"allowed."
"RTN","XWBTCPMT",71,0)
 W !,"Done with the checks.",!
"RTN","XWBTCPMT",72,0)
 K ^TMP("XWB",$J)
"RTN","XWBTCPMT",73,0)
 Q
"RTN","XWBTCPMT",74,0)
 ;
"RTN","XWBTCPMT",75,0)
HOLD(MJ) ;Show that a new job is allowed.
"RTN","XWBTCPMT",76,0)
 S ^TMP("XWB",MJ)=5
"RTN","XWBTCPMT",77,0)
 HANG 5
"RTN","XWBTCPMT",78,0)
 Q
"VER")
8.0^22.0
"BLD",1233,6)
^42
**END**
**END**

Released XWB*1.1*49 SEQ #40
Extracted from mail message
**KIDS**:XWB*1.1*49^

**INSTALL NAME**
XWB*1.1*49
"BLD",1078,0)
XWB*1.1*49^RPC BROKER^0^3080929^y^^
"BLD",1078,1,0)
^^2^2^3080929^^^
"BLD",1078,1,1,0)
Please refer to the Description in the FORUM Patch Module for details.
"BLD",1078,1,2,0)
XWB*1.1*49 Improve support for Linux.
"BLD",1078,4,0)
^9.64PA^^
"BLD",1078,6.3)
2
"BLD",1078,"KRN",0)
^9.67PA^8989.52^19
"BLD",1078,"KRN",.4,0)
.4
"BLD",1078,"KRN",.401,0)
.401
"BLD",1078,"KRN",.402,0)
.402
"BLD",1078,"KRN",.403,0)
.403
"BLD",1078,"KRN",.5,0)
.5
"BLD",1078,"KRN",.84,0)
.84
"BLD",1078,"KRN",3.6,0)
3.6
"BLD",1078,"KRN",3.8,0)
3.8
"BLD",1078,"KRN",9.2,0)
9.2
"BLD",1078,"KRN",9.8,0)
9.8
"BLD",1078,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",1078,"KRN",9.8,"NM",1,0)
XWBRW^^0^B9161692
"BLD",1078,"KRN",9.8,"NM",2,0)
XWBTCPM^^0^B55441602
"BLD",1078,"KRN",9.8,"NM",3,0)
XWBTCPMT^^0^B11122547
"BLD",1078,"KRN",9.8,"NM","B","XWBRW",1)

"BLD",1078,"KRN",9.8,"NM","B","XWBTCPM",2)

"BLD",1078,"KRN",9.8,"NM","B","XWBTCPMT",3)

"BLD",1078,"KRN",19,0)
19
"BLD",1078,"KRN",19.1,0)
19.1
"BLD",1078,"KRN",101,0)
101
"BLD",1078,"KRN",409.61,0)
409.61
"BLD",1078,"KRN",771,0)
771
"BLD",1078,"KRN",870,0)
870
"BLD",1078,"KRN",8989.51,0)
8989.51
"BLD",1078,"KRN",8989.52,0)
8989.52
"BLD",1078,"KRN",8994,0)
8994
"BLD",1078,"KRN","B",.4,.4)

"BLD",1078,"KRN","B",.401,.401)

"BLD",1078,"KRN","B",.402,.402)

"BLD",1078,"KRN","B",.403,.403)

"BLD",1078,"KRN","B",.5,.5)

"BLD",1078,"KRN","B",.84,.84)

"BLD",1078,"KRN","B",3.6,3.6)

"BLD",1078,"KRN","B",3.8,3.8)

"BLD",1078,"KRN","B",9.2,9.2)

"BLD",1078,"KRN","B",9.8,9.8)

"BLD",1078,"KRN","B",19,19)

"BLD",1078,"KRN","B",19.1,19.1)

"BLD",1078,"KRN","B",101,101)

"BLD",1078,"KRN","B",409.61,409.61)

"BLD",1078,"KRN","B",771,771)

"BLD",1078,"KRN","B",870,870)

"BLD",1078,"KRN","B",8989.51,8989.51)

"BLD",1078,"KRN","B",8989.52,8989.52)

"BLD",1078,"KRN","B",8994,8994)

"BLD",1078,"QUES",0)
^9.62^^
"BLD",1078,"REQB",0)
^9.611^2^2
"BLD",1078,"REQB",1,0)
XWB*1.1*35^2
"BLD",1078,"REQB",2,0)
XWB*1.1*43^2
"BLD",1078,"REQB","B","XWB*1.1*35",1)

"BLD",1078,"REQB","B","XWB*1.1*43",2)

"MBREQ")
0
"PKG",8,-1)
1^1
"PKG",8,0)
RPC BROKER^XWB^Remote Procedure Call Broker^
"PKG",8,20,0)
^9.402P^^
"PKG",8,22,0)
^9.49I^1^1
"PKG",8,22,1,0)
1.1^2970918^2971120^7
"PKG",8,22,1,"PAH",1,0)
49^3080929^2
"PKG",8,22,1,"PAH",1,1,0)
^^2^2^3080929
"PKG",8,22,1,"PAH",1,1,1,0)
Please refer to the Description in the FORUM Patch Module for details.
"PKG",8,22,1,"PAH",1,1,2,0)
XWB*1.1*49 Improve support for Linux.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","XWBRW")
0^1^B9161692^B8441815
"RTN","XWBRW",1,0)
XWBRW ;ISF/RWF - Read/Write for Broker TCP ;09/29/08  14:41
"RTN","XWBRW",2,0)
 ;;1.1;RPC BROKER;**35,49**;Mar 28, 1997;Build 2
"RTN","XWBRW",3,0)
 Q
"RTN","XWBRW",4,0)
 ;
"RTN","XWBRW",5,0)
 ;XWBRBUF is global
"RTN","XWBRW",6,0)
 ;SE is a flag to skip error for short read. From PRSB+41^XWBBRK
"RTN","XWBRW",7,0)
BREAD(L,TO,SE) ;read tcp buffer, L is length, TO is timeout
"RTN","XWBRW",8,0)
 N R,S,DONE,C,MODE
"RTN","XWBRW",9,0)
 I L'>0 Q ""
"RTN","XWBRW",10,0)
 I $L(XWBRBUF)'<L S R=$E(XWBRBUF,1,L),XWBRBUF=$E(XWBRBUF,L+1,999999) Q R
"RTN","XWBRW",11,0)
 S R="",DONE=0,L=+L,C=0
"RTN","XWBRW",12,0)
 S TO=$S($G(TO)>0:TO,$G(XWBTIME(1))>0:XWBTIME(1),1:60)/2+1,MODE=(XWBOS="GT.M")
"RTN","XWBRW",13,0)
 U XWBTDEV
"RTN","XWBRW",14,0)
 F  D  Q:DONE
"RTN","XWBRW",15,0)
 . S S=L-$L(R),R=R_$E(XWBRBUF,1,S),XWBRBUF=$E(XWBRBUF,S+1,999999)
"RTN","XWBRW",16,0)
 . I ($L(R)=L)!(R[$C(4))!(C>TO) S DONE=1 Q
"RTN","XWBRW",17,0)
 . I MODE R XWBRBUF#S:2 S:'$T C=C+1 ;p49
"RTN","XWBRW",18,0)
 . I 'MODE R XWBRBUF:2 S:'$T C=C+1 ;p49
"RTN","XWBRW",19,0)
 . S:$L(XWBRBUF) C=0 I $DEVICE S DONE=1 Q  ;p49
"RTN","XWBRW",20,0)
 . I $G(XWBDEBUG)>2,$L(XWBRBUF) D LOG^XWBDLOG("rd: "_$E(XWBRBUF,1,252))
"RTN","XWBRW",21,0)
 . Q
"RTN","XWBRW",22,0)
 I $L(R)<L,'$G(SE) S $ECODE=",U411," ;Throw Error, Did not read full length
"RTN","XWBRW",23,0)
 Q R
"RTN","XWBRW",24,0)
 ;
"RTN","XWBRW",25,0)
QSND(XWBR) ;Quick send
"RTN","XWBRW",26,0)
 S XWBPTYPE=1,XWBERROR="",XWBSEC="" D SND
"RTN","XWBRW",27,0)
 Q
"RTN","XWBRW",28,0)
 ;
"RTN","XWBRW",29,0)
ESND(XWBR) ;Send from ETRAP
"RTN","XWBRW",30,0)
 S XWBPTYPE=1 D SND
"RTN","XWBRW",31,0)
 Q
"RTN","XWBRW",32,0)
 ;
"RTN","XWBRW",33,0)
SND ; Send a responce
"RTN","XWBRW",34,0)
 N XWBSBUF S XWBSBUF=""
"RTN","XWBRW",35,0)
 U XWBTDEV
"RTN","XWBRW",36,0)
 ;
"RTN","XWBRW",37,0)
 D SNDERR ;Send any error info
"RTN","XWBRW",38,0)
 D SNDDATA ;Send the data
"RTN","XWBRW",39,0)
 ;D WRITE($C(4)) ;EOT
"RTN","XWBRW",40,0)
 D WRITE($C(4)),WBF
"RTN","XWBRW",41,0)
 Q
"RTN","XWBRW",42,0)
 ;
"RTN","XWBRW",43,0)
SNDDATA ;Send the data part
"RTN","XWBRW",44,0)
 N I,D
"RTN","XWBRW",45,0)
 ; -- single value
"RTN","XWBRW",46,0)
 I XWBPTYPE=1 D WRITE($G(XWBR)) Q
"RTN","XWBRW",47,0)
 ; -- table delimited by CR+LF
"RTN","XWBRW",48,0)
 I XWBPTYPE=2 D  Q
"RTN","XWBRW",49,0)
 . S I="" F  S I=$O(XWBR(I)) Q:I=""  D WRITE(XWBR(I)),WRITE($C(13,10))
"RTN","XWBRW",50,0)
 ; -- word processing
"RTN","XWBRW",51,0)
 I XWBPTYPE=3 D  Q
"RTN","XWBRW",52,0)
 . S I="" F  S I=$O(XWBR(I)) Q:I=""  D WRITE(XWBR(I)) D:XWBWRAP WRITE($C(13,10))
"RTN","XWBRW",53,0)
 ; -- global array
"RTN","XWBRW",54,0)
 I XWBPTYPE=4 D  Q
"RTN","XWBRW",55,0)
 . I $E($G(XWBR))'="^" Q
"RTN","XWBRW",56,0)
 . S I=$G(XWBR) Q:I=""  S T=$E(I,1,$L(I)-1)
"RTN","XWBRW",57,0)
 . ;Only send root node if non-null.
"RTN","XWBRW",58,0)
 . I $D(@I)>10 S D=@I I $L(D) D WRITE(D),WRITE($C(13,10)):XWBWRAP&(D'=$C(13,10))
"RTN","XWBRW",59,0)
 . F  S I=$Q(@I) Q:I=""!(I'[T)  S D=@I D WRITE(D),WRITE($C(13,10)):XWBWRAP&(D'=$C(13,10))
"RTN","XWBRW",60,0)
 . I $D(@XWBR) K @XWBR
"RTN","XWBRW",61,0)
 ; -- global instance
"RTN","XWBRW",62,0)
 I XWBPTYPE=5 D  Q
"RTN","XWBRW",63,0)
 . I $E($G(XWBR))'="^" Q
"RTN","XWBRW",64,0)
 . S XWBR=$G(@XWBR) D WRITE(XWBR) Q
"RTN","XWBRW",65,0)
 ; -- variable length records only good upto 255 char)
"RTN","XWBRW",66,0)
 I XWBPTYPE=6 D
"RTN","XWBRW",67,0)
 . S I="" F  S I=$O(XWBR(I)) Q:I=""  D WRITE($C($L(XWBR(I)))),WRITE(XWBR(I))
"RTN","XWBRW",68,0)
 Q
"RTN","XWBRW",69,0)
 ;
"RTN","XWBRW",70,0)
SNDERR ;send error information
"RTN","XWBRW",71,0)
 ;XWBSEC is the security packet, XWBERROR is application packet
"RTN","XWBRW",72,0)
 N X
"RTN","XWBRW",73,0)
 S $X=0 ;Start with zero
"RTN","XWBRW",74,0)
 S X=$E($G(XWBSEC),1,255)
"RTN","XWBRW",75,0)
 D WRITE($C($L(X))_X)
"RTN","XWBRW",76,0)
 S X=$E($G(XWBERROR),1,255)
"RTN","XWBRW",77,0)
 D WRITE($C($L(X))_X)
"RTN","XWBRW",78,0)
 S XWBERROR="",XWBSEC="" ;clears parameters
"RTN","XWBRW",79,0)
 Q
"RTN","XWBRW",80,0)
 ;
"RTN","XWBRW",81,0)
WRITE(STR) ;Write a data string
"RTN","XWBRW",82,0)
 ; send data for DSM (requires buffer flush (!) every 511 chars)
"RTN","XWBRW",83,0)
 ;IF XWBOS="DSM"!(XWBOS="UNIX")!(XWBOS="OpenM) next line
"RTN","XWBRW",84,0)
 N MAX S MAX=255 ;p49
"RTN","XWBRW",85,0)
 F  Q:'$L(STR)  D
"RTN","XWBRW",86,0)
 . I $L(XWBSBUF)+$L(STR)>MAX D WBF
"RTN","XWBRW",87,0)
 . S XWBSBUF=XWBSBUF_$E(STR,1,MAX),STR=$E(STR,MAX+1,99999) ;p49
"RTN","XWBRW",88,0)
 Q
"RTN","XWBRW",89,0)
WBF ;Write Buffer Flush
"RTN","XWBRW",90,0)
 Q:'$L(XWBSBUF)
"RTN","XWBRW",91,0)
 I $G(XWBDEBUG)>2,$L(XWBSBUF) D LOG^XWBDLOG("wrt ("_$L(XWBSBUF)_"): "_$E(XWBSBUF,1,247))
"RTN","XWBRW",92,0)
 W XWBSBUF,@XWBT("BF")
"RTN","XWBRW",93,0)
 S XWBSBUF=""
"RTN","XWBRW",94,0)
 Q
"RTN","XWBTCPM")
0^2^B55441602^B54122124
"RTN","XWBTCPM",1,0)
XWBTCPM ;ISF/RWF - BROKER TCP/IP PROCESS HANDLER ;4/1/08  14:43
"RTN","XWBTCPM",2,0)
 ;;1.1;RPC BROKER;**35,43,49**;Mar 28, 1997;Build 2
"RTN","XWBTCPM",3,0)
 ;Based on: XWBTCPC & XWBTCPL, Modified by ISF/RWF
"RTN","XWBTCPM",4,0)
 ;Changed to be started by UCX or %ZISTCPS
"RTN","XWBTCPM",5,0)
 ;
"RTN","XWBTCPM",6,0)
DSM ;DSM called from ucx, % passed in with device.
"RTN","XWBTCPM",7,0)
 D ESET
"RTN","XWBTCPM",8,0)
 ;Open the device
"RTN","XWBTCPM",9,0)
 S XWBTDEV=% X "O XWBTDEV:(TCPDEV):60" ;Special UCX/DSM open
"RTN","XWBTCPM",10,0)
 ;Go find the connection type
"RTN","XWBTCPM",11,0)
 U XWBTDEV
"RTN","XWBTCPM",12,0)
 G CONNTYPE
"RTN","XWBTCPM",13,0)
 ;
"RTN","XWBTCPM",14,0)
CACHEVMS ;Cache'/VMS tcpip entry point, called from XWBTCP_START.COM file
"RTN","XWBTCPM",15,0)
 D ESET
"RTN","XWBTCPM",16,0)
 S XWBTDEV=$S($ZV["VMS":"SYS$NET",1:$P) ;Support for both VMS/TCPIP and Linux/xinetd
"RTN","XWBTCPM",17,0)
 ; **Cache'/VMS specific code**
"RTN","XWBTCPM",18,0)
 O XWBTDEV::5
"RTN","XWBTCPM",19,0)
 X "U XWBTDEV:(::""-M"")" ;Packet mode like DSM
"RTN","XWBTCPM",20,0)
 G CONNTYPE
"RTN","XWBTCPM",21,0)
 ;
"RTN","XWBTCPM",22,0)
NT ;entry from ZISTCPS
"RTN","XWBTCPM",23,0)
 ;JOB LISTEN^%ZISTCPS("port","NT^XWBTCPM","stop code")
"RTN","XWBTCPM",24,0)
 D ESET
"RTN","XWBTCPM",25,0)
 S XWBTDEV=IO
"RTN","XWBTCPM",26,0)
 G CONNTYPE
"RTN","XWBTCPM",27,0)
 ;
"RTN","XWBTCPM",28,0)
GTMUCX(%) ;From ucx ZFOO
"RTN","XWBTCPM",29,0)
 ;If called from LISTEN^%ZISTCP(PORT,"GTM^XWBTCPM") S XWBTDEV=IO
"RTN","XWBTCPM",30,0)
 D ESET
"RTN","XWBTCPM",31,0)
 ;GTM specific code
"RTN","XWBTCPM",32,0)
 S @("$ZINTERRUPT=""I $$JOBEXAM^ZU($ZPOSITION)""")
"RTN","XWBTCPM",33,0)
 S XWBTDEV=% X "O %:(RECORDSIZE=512)"
"RTN","XWBTCPM",34,0)
 G CONNTYPE
"RTN","XWBTCPM",35,0)
 ;
"RTN","XWBTCPM",36,0)
GTMLNX ;From Linux xinetd script
"RTN","XWBTCPM",37,0)
 D ESET
"RTN","XWBTCPM",38,0)
 ;GTM specific code
"RTN","XWBTCPM",39,0)
 S @("$ZINTERRUPT=""I $$JOBEXAM^ZU($ZPOSITION)""")
"RTN","XWBTCPM",40,0)
 S XWBTDEV=$P X "U XWBTDEV:(nowrap:nodelimiter:ioerror=""TRAP"")"
"RTN","XWBTCPM",41,0)
 S %="",@("%=$ZTRNLNM(""REMOTE_HOST"")") S:$L(%) IO("GTM-IP")=%
"RTN","XWBTCPM",42,0)
 G CONNTYPE
"RTN","XWBTCPM",43,0)
 ;
"RTN","XWBTCPM",44,0)
ESET ;Set inital error trap
"RTN","XWBTCPM",45,0)
 S U="^",$ETRAP="D ^%ZTER H" ;Set up the error trap
"RTN","XWBTCPM",46,0)
 S X="",@("$ZT=X") ;Clear old trap
"RTN","XWBTCPM",47,0)
 Q
"RTN","XWBTCPM",48,0)
 ;Find the type of connection and jump to the processing routine.
"RTN","XWBTCPM",49,0)
CONNTYPE ;
"RTN","XWBTCPM",50,0)
 N XWBDEBUG,XWBAPVER,XWBCLMAN,XWBENVL,XWBLOG,XWBOS,XWBPTYPE
"RTN","XWBTCPM",51,0)
 N XWBTBUF,XWBTIP,XWBTSKT,XWBVER,XWBWRAP,XWBSHARE,XWBT
"RTN","XWBTCPM",52,0)
 N SOCK,TYPE
"RTN","XWBTCPM",53,0)
 D INIT
"RTN","XWBTCPM",54,0)
 S XWB=$$BREAD^XWBRW(5,XWBTIME)
"RTN","XWBTCPM",55,0)
 D LOG("MSG format is "_XWB_" type "_$S(XWB="[XWB]":"NEW",XWB="{XWB}":"OLD",XWB="<?xml":"M2M",1:"Unk"))
"RTN","XWBTCPM",56,0)
 I XWB["[XWB]" G NEW
"RTN","XWBTCPM",57,0)
 I XWB["{XWB}" G OLD^XWBTCPM1
"RTN","XWBTCPM",58,0)
 I XWB["<?xml" G M2M
"RTN","XWBTCPM",59,0)
 I $L($T(OTH^XWBTCPM2)) D OTH^XWBTCPM2 ;See if a special code.
"RTN","XWBTCPM",60,0)
 D LOG("Prefix not known: "_XWB)
"RTN","XWBTCPM",61,0)
 Q
"RTN","XWBTCPM",62,0)
 ;
"RTN","XWBTCPM",63,0)
NEWJOB() ;Check if OK to start a new job, Return 1 if OK, 0 if not OK.
"RTN","XWBTCPM",64,0)
 N X,Y,J,XWBVOL
"RTN","XWBTCPM",65,0)
 D GETENV^%ZOSV S XWBVOL=$P(Y,"^",2)
"RTN","XWBTCPM",66,0)
 S X=$O(^XTV(8989.3,1,4,"B",XWBVOL,0)),J=$S(X>0:^XTV(8989.3,1,4,X,0),1:"ROU^y^1")
"RTN","XWBTCPM",67,0)
 I $G(^%ZIS(14.5,"LOGON",XWBVOL)) Q 0 ;Check INHIBIT LOGONS?
"RTN","XWBTCPM",68,0)
 I $D(^%ZOSF("ACTJ")) X ^("ACTJ") I $P(J,U,3),($P(J,U,3)'>Y) Q 0
"RTN","XWBTCPM",69,0)
 Q 1
"RTN","XWBTCPM",70,0)
 ;
"RTN","XWBTCPM",71,0)
M2M ;M2M Broker
"RTN","XWBTCPM",72,0)
 S XWBRBUF=XWB_XWBRBUF,(IO,IO(0))=XWBTDEV G SPAWN^XWBVLL
"RTN","XWBTCPM",73,0)
 Q
"RTN","XWBTCPM",74,0)
 ;
"RTN","XWBTCPM",75,0)
NEW ;New broker
"RTN","XWBTCPM",76,0)
 S U="^",DUZ=0,DUZ(0)="",XWBVER=1.108
"RTN","XWBTCPM",77,0)
 D SETTIME(1) ;Setup for sign-on timeout
"RTN","XWBTCPM",78,0)
 U XWBTDEV D
"RTN","XWBTCPM",79,0)
 . N XWB,ERR,NATIP,I
"RTN","XWBTCPM",80,0)
 . S ERR=$$PRSP^XWBPRS
"RTN","XWBTCPM",81,0)
 . S ERR=$$PRSM^XWBPRS
"RTN","XWBTCPM",82,0)
 . S MSG=$G(XWB(4,"CMD")) ;Build connect msg.
"RTN","XWBTCPM",83,0)
 . S I="" F  S I=$O(XWB(5,"P",I)) Q:I=""  S MSG=MSG_U_XWB(5,"P",I)
"RTN","XWBTCPM",84,0)
 . ;Get the peer and save that IP.
"RTN","XWBTCPM",85,0)
 . S NATIP=$$GETPEER^%ZOSV S:'$L(NATIP) NATIP=$P(MSG,"^",2)
"RTN","XWBTCPM",86,0)
 . I NATIP'=$P(MSG,"^",2) S $P(MSG,"^",2)=NATIP
"RTN","XWBTCPM",87,0)
 . Q
"RTN","XWBTCPM",88,0)
 S X=$$NEWJOB() D:'X LOG("No New Connects")
"RTN","XWBTCPM",89,0)
 I ($P(MSG,U)'="TCPConnect")!('X) D QSND^XWBRW("reject"),LOG("reject: "_MSG) Q
"RTN","XWBTCPM",90,0)
 D QSND^XWBRW("accept"),LOG("accept") ;Ack
"RTN","XWBTCPM",91,0)
 S IO("IP")=$P(MSG,U,2),XWBTSKT=$P(MSG,U,3),XWBCLMAN=$P(MSG,U,4)
"RTN","XWBTCPM",92,0)
 S XWBTIP=$G(IO("IP"))
"RTN","XWBTCPM",93,0)
 ;start RUM for Broker Handler XWB*1.1*5
"RTN","XWBTCPM",94,0)
 D LOGRSRC^%ZOSV("$BROKER HANDLER$",2,1)
"RTN","XWBTCPM",95,0)
 ;GTM
"RTN","XWBTCPM",96,0)
 I $G(XWBT("PCNT")) D
"RTN","XWBTCPM",97,0)
 . S X=$NA(^XUTL("XUSYS",$J,1)) L +@X:0
"RTN","XWBTCPM",98,0)
 . D COUNT^XUSCNT(1),SETLOCK^XUSCNT(X)
"RTN","XWBTCPM",99,0)
 ;We don't use a callback
"RTN","XWBTCPM",100,0)
 K XWB,CON,LEN,MSG ;Clean up
"RTN","XWBTCPM",101,0)
 ;Attempt to share license, Must have TCP port open first.
"RTN","XWBTCPM",102,0)
 U XWBTDEV ;D SHARELIC^%ZOSV(1)
"RTN","XWBTCPM",103,0)
 ;setup null device "NULL"
"RTN","XWBTCPM",104,0)
 S %ZIS="0H",IOP="NULL" D ^%ZIS S XWBNULL=IO I POP S XWBERROR="No NULL device" D ^%ZTER,EXIT Q
"RTN","XWBTCPM",105,0)
 D SAVDEV^%ZISUTL("XWBNULL")
"RTN","XWBTCPM",106,0)
 ;change process name
"RTN","XWBTCPM",107,0)
 D CHPRN("ip"_$P(XWBTIP,".",3,4)_":"_XWBTDEV)
"RTN","XWBTCPM",108,0)
 ;
"RTN","XWBTCPM",109,0)
RESTART ;The error trap returns to here
"RTN","XWBTCPM",110,0)
 N $ESTACK S $ETRAP="D ETRAP^XWBTCPM"
"RTN","XWBTCPM",111,0)
 S DT=$$DT^XLFDT,DTIME=30
"RTN","XWBTCPM",112,0)
 U XWBTDEV D MAIN
"RTN","XWBTCPM",113,0)
 D LOG("Exit: "_XWBTBUF)
"RTN","XWBTCPM",114,0)
 ;Turn off the error trap for the exit
"RTN","XWBTCPM",115,0)
 S $ETRAP=""
"RTN","XWBTCPM",116,0)
 D EXIT ;Logout
"RTN","XWBTCPM",117,0)
 K XWBR,XWBARY
"RTN","XWBTCPM",118,0)
 ;stop RUM for handler XWB*1.1*5
"RTN","XWBTCPM",119,0)
 D LOGRSRC^%ZOSV("$BROKER HANDLER$",2,2)
"RTN","XWBTCPM",120,0)
 D USE^%ZISUTL("XWBNULL"),CLOSE^%ZISUTL("XWBNULL")
"RTN","XWBTCPM",121,0)
 ;Close in the calling script
"RTN","XWBTCPM",122,0)
 K SOCK,TYPE,XWBSND,XWBTYPE,XWBRBUF
"RTN","XWBTCPM",123,0)
 Q
"RTN","XWBTCPM",124,0)
 ;
"RTN","XWBTCPM",125,0)
MAIN ; -- main message processing loop. debug at MAIN+1
"RTN","XWBTCPM",126,0)
 F  D  Q:XWBTBUF="#BYE#"
"RTN","XWBTCPM",127,0)
 . ;Setup
"RTN","XWBTCPM",128,0)
 . S XWBAPVER=0,XWBTBUF="",XWBTCMD="",XWBRBUF=""
"RTN","XWBTCPM",129,0)
 . K XWBR,XWBARY,XWBPRT
"RTN","XWBTCPM",130,0)
 . ; -- read client request
"RTN","XWBTCPM",131,0)
 . S XR=$$BREAD^XWBRW(1,XWBTIME,1)
"RTN","XWBTCPM",132,0)
 . I '$L(XR) D LOG("Timeout: "_XWBTIME) S XWBTBUF="#BYE#" Q
"RTN","XWBTCPM",133,0)
 . S XR=XR_$$BREAD^XWBRW(4)
"RTN","XWBTCPM",134,0)
 . I XR="#BYE#" D  Q  ;Check for exit
"RTN","XWBTCPM",135,0)
 . . D QSND^XWBRW("#BYE#"),LOG("BYE CMD") S XWBTBUF="#BYE#"
"RTN","XWBTCPM",136,0)
 . . Q
"RTN","XWBTCPM",137,0)
 . S TYPE=(XR="[XWB]")  ;check HDR
"RTN","XWBTCPM",138,0)
 . I 'TYPE D LOG("Bad Header: "_XR) Q
"RTN","XWBTCPM",139,0)
 . D CALLP^XWBPRS(.XWBR,$G(XWBDEBUG)) ;Read the NEW Msg parameters and call RPC
"RTN","XWBTCPM",140,0)
 . IF XWBTCMD="#BYE#" D  Q
"RTN","XWBTCPM",141,0)
 . . D QSND^XWBRW("#BYE#"),LOG("BYE CMD") S XWBTBUF=XWBTCMD
"RTN","XWBTCPM",142,0)
 . . Q
"RTN","XWBTCPM",143,0)
 . U XWBTDEV
"RTN","XWBTCPM",144,0)
 . S XWBPTYPE=$S('$D(XWBPTYPE):1,XWBPTYPE<1:1,XWBPTYPE>6:1,1:XWBPTYPE)
"RTN","XWBTCPM",145,0)
 . ;I $G(XWBPRT) D RETURN^XWBPRS2 Q  ;New msg return
"RTN","XWBTCPM",146,0)
 . I '$G(XWBPRT) D SND^XWBRW ;Return data,flush buffer
"RTN","XWBTCPM",147,0)
 Q  ;End Of Main
"RTN","XWBTCPM",148,0)
 ;
"RTN","XWBTCPM",149,0)
 ;
"RTN","XWBTCPM",150,0)
ETRAP ; -- on trapped error, send error info to client
"RTN","XWBTCPM",151,0)
 N XWBERC,XWBERR
"RTN","XWBTCPM",152,0)
 ;Change trapping during trap.
"RTN","XWBTCPM",153,0)
 S $ETRAP="D ^%ZTER,EXIT^XWBTCPM HALT"
"RTN","XWBTCPM",154,0)
 S XWBERC=$E($$EC^%ZOSV,1,200),XWBERR="M  ERROR="_XWBERC_$C(13,10)_"LAST REF="_$$LGR^%ZOSV
"RTN","XWBTCPM",155,0)
 I $EC["U411" S XWBERROR="U411",XWBSEC="",XWBERR="Data Transfer Error to Server"
"RTN","XWBTCPM",156,0)
 D ^%ZTER ;%ZTER clears $ZE and $ZCODE
"RTN","XWBTCPM",157,0)
 D LOG("In ETRAP: "_XWBERC) ;Log
"RTN","XWBTCPM",158,0)
 I (XWBERC["READ")!(XWBERC["WRITE")!(XWBERC["SYSTEM-F")!(XWBERC["IOEOF") D EXIT HALT
"RTN","XWBTCPM",159,0)
 U XWBTDEV
"RTN","XWBTCPM",160,0)
 I $G(XWBT("PCNT")) L ^XUTL("XUSYS",$J,0)
"RTN","XWBTCPM",161,0)
 E  L  ;Clear Locks
"RTN","XWBTCPM",162,0)
 ;I XWBOS'="DSM" D
"RTN","XWBTCPM",163,0)
 S XWBPTYPE=1 ;So SNDERR won't check XWBR
"RTN","XWBTCPM",164,0)
 ;D SNDERR^XWBRW,WRITE^XWBRW($C(24)_XWBERR_$C(4))
"RTN","XWBTCPM",165,0)
 D ESND^XWBRW($C(24)_XWBERR_$C(4))
"RTN","XWBTCPM",166,0)
 S $ETRAP="Q:($ESTACK&'$QUIT)  Q:$ESTACK -9 S $ECODE="""" D CLEANP^XWBTCPM G RESTART^XWBTCPM",$ECODE=",U99,"
"RTN","XWBTCPM",167,0)
 Q
"RTN","XWBTCPM",168,0)
 ;
"RTN","XWBTCPM",169,0)
CLEANP ;Clean up the partion
"RTN","XWBTCPM",170,0)
 N XWBTDEV,XWBNULL D KILL^XUSCLEAN
"RTN","XWBTCPM",171,0)
 Q
"RTN","XWBTCPM",172,0)
 ;
"RTN","XWBTCPM",173,0)
STYPE(X,WRAP) ;For backward compatability only
"RTN","XWBTCPM",174,0)
 I $D(WRAP) Q $$RTRNFMT^XWBLIB($G(X),WRAP)
"RTN","XWBTCPM",175,0)
 Q $$RTRNFMT^XWBLIB(X)
"RTN","XWBTCPM",176,0)
 ;
"RTN","XWBTCPM",177,0)
BREAD(L,T) ;read tcp buffer, L is length
"RTN","XWBTCPM",178,0)
 Q $$BREAD^XWBRW(L,$G(T))
"RTN","XWBTCPM",179,0)
 ;
"RTN","XWBTCPM",180,0)
CHPRN(N) ;change process name
"RTN","XWBTCPM",181,0)
 ;Change process name to N
"RTN","XWBTCPM",182,0)
 D SETNM^%ZOSV($E(N,1,15))
"RTN","XWBTCPM",183,0)
 Q
"RTN","XWBTCPM",184,0)
 ;
"RTN","XWBTCPM",185,0)
SETTIME(%) ;Set the Read timeout 0=RPC, 1=sign-on
"RTN","XWBTCPM",186,0)
 S XWBTIME=$S($G(%):90,$G(XWBVER)>1.105:$$BAT^XUPARAM,1:36000),XWBTIME(1)=2
"RTN","XWBTCPM",187,0)
 I $G(%) S XWBTIME=$S($G(XWBVER)>1.1:90,1:36000)
"RTN","XWBTCPM",188,0)
 Q
"RTN","XWBTCPM",189,0)
TIMEOUT ;Do this on MAIN  loop timeout
"RTN","XWBTCPM",190,0)
 I $G(DUZ)>0 D QSND^XWBRW("#BYE#") Q
"RTN","XWBTCPM",191,0)
 ;Sign-on timeout
"RTN","XWBTCPM",192,0)
 S XWBR(0)=0,XWBR(1)=1,XWBR(2)="",XWBR(3)="TIME-OUT",XWBPTYPE=2
"RTN","XWBTCPM",193,0)
 D SND^XWBRW
"RTN","XWBTCPM",194,0)
 Q
"RTN","XWBTCPM",195,0)
 ;
"RTN","XWBTCPM",196,0)
OS() ;Return the OS
"RTN","XWBTCPM",197,0)
 Q $S(^%ZOSF("OS")["OpenM":"OpenM",^%ZOSF("OS")["GT.M":"GT.M",^("OS")["DSM":"DSM",1:"UNK")
"RTN","XWBTCPM",198,0)
 ;
"RTN","XWBTCPM",199,0)
INIT ;Setup
"RTN","XWBTCPM",200,0)
 S U="^",XWBTIME=10,XWBOS=$$OS,XWBDEBUG=0,XWBRBUF=""
"RTN","XWBTCPM",201,0)
 S XWBDEBUG=$$GET^XPAR("SYS","XWBDEBUG")
"RTN","XWBTCPM",202,0)
 S XWBT("BF")=$S(XWBOS="GT.M":"#",1:"!")
"RTN","XWBTCPM",203,0)
 S XWBT("PCNT")=0 I XWBOS="GT.M",$L($T(^XUSCNT)) S XWBT("PCNT")=1
"RTN","XWBTCPM",204,0)
 D LOGSTART^XWBDLOG("XWBTCPM")
"RTN","XWBTCPM",205,0)
 Q
"RTN","XWBTCPM",206,0)
 ;
"RTN","XWBTCPM",207,0)
DEBUG ;Entry point for debug, Build a server to get the connect
"RTN","XWBTCPM",208,0)
 ;Cache sample;ZB SERV+1^XWBTCPM:"L+" ZB ETRAP+1^XWBTCPM:"B"
"RTN","XWBTCPM",209,0)
 W !,"Before running this entry point set your debugger to stop at"
"RTN","XWBTCPM",210,0)
 W !,"the place you want to debug. Some spots to use:"
"RTN","XWBTCPM",211,0)
 W !,"'SERV+1^XWBTCPM', 'MAIN+1^XWBTCPM' or 'CAPI+1^XWBPRS.'",!
"RTN","XWBTCPM",212,0)
 W !,"or location of your choice.",!
"RTN","XWBTCPM",213,0)
 W !,"IP Socket to Listen on: " R SOCK:300,! Q:'$T!(SOCK["^")
"RTN","XWBTCPM",214,0)
 ;Use %ZISTCP to do a single server
"RTN","XWBTCPM",215,0)
 D LISTEN^%ZISTCP(SOCK,"SERV^XWBTCPM")
"RTN","XWBTCPM",216,0)
 U $P W !,"Done"
"RTN","XWBTCPM",217,0)
 Q
"RTN","XWBTCPM",218,0)
SERV ;Callback from the server
"RTN","XWBTCPM",219,0)
 S XWBTDEV=IO,XWBTIME(1)=3600 D INIT
"RTN","XWBTCPM",220,0)
 S XWBDEBUG=1,MSG=$$BREAD^XWBRW(5,60) ;R MSG#5
"RTN","XWBTCPM",221,0)
 D NEW
"RTN","XWBTCPM",222,0)
 S IO("C")=1 ;Cause the Listenr to stop
"RTN","XWBTCPM",223,0)
 Q
"RTN","XWBTCPM",224,0)
 ;
"RTN","XWBTCPM",225,0)
EXIT ;Close out
"RTN","XWBTCPM",226,0)
 I $G(DUZ) D LOGOUT^XUSRB
"RTN","XWBTCPM",227,0)
 I $G(XWBT("PCNT")) D COUNT^XUSCNT(-1)
"RTN","XWBTCPM",228,0)
 Q
"RTN","XWBTCPM",229,0)
 ;
"RTN","XWBTCPM",230,0)
LOG(MSG) ;Record Debug Info
"RTN","XWBTCPM",231,0)
 D:$G(XWBDEBUG) LOG^XWBDLOG(MSG)
"RTN","XWBTCPM",232,0)
 Q
"RTN","XWBTCPM",233,0)
 ;
"RTN","XWBTCPMT")
0^3^B11122547^B8829013
"RTN","XWBTCPMT",1,0)
XWBTCPMT ;ISF/RWF - Routine to test a connection ;9/29/08  16:13
"RTN","XWBTCPMT",2,0)
 ;;1.1;RPC BROKER;**43,49**;Mar 28, 1997;Build 2
"RTN","XWBTCPMT",3,0)
CALL ;Interactive
"RTN","XWBTCPMT",4,0)
 N IP,PORT,STAT
"RTN","XWBTCPMT",5,0)
 D HOME^%ZIS
"RTN","XWBTCPMT",6,0)
 S U="^",DTIME=$$DTIME^XUP
"RTN","XWBTCPMT",7,0)
 W !,"Interactive Broker Test"
"RTN","XWBTCPMT",8,0)
 R !,"IP ADDRESS: ",IP:DTIME
"RTN","XWBTCPMT",9,0)
 I IP["^" Q
"RTN","XWBTCPMT",10,0)
 R !,"PORT: ",PORT:DTIME
"RTN","XWBTCPMT",11,0)
 I PORT["^" Q
"RTN","XWBTCPMT",12,0)
 S STAT=$$TEST(IP,PORT,1)
"RTN","XWBTCPMT",13,0)
 U $P
"RTN","XWBTCPMT",14,0)
 W !,$S(STAT>0:"Success, response: "_$P(STAT,U,2),1:"Failed: "_$P(STAT,U,2,9))
"RTN","XWBTCPMT",15,0)
 Q
"RTN","XWBTCPMT",16,0)
 ;
"RTN","XWBTCPMT",17,0)
TEST(IP,PORT,TALK) ;
"RTN","XWBTCPMT",18,0)
 N T1,T2,T3,T4,OS,RES,RES2,RES3
"RTN","XWBTCPMT",19,0)
 S OS=^%ZOSF("OS")
"RTN","XWBTCPMT",20,0)
 I IP'?1.3N1P1.3N1P1.3N1P1.3N S IP=$$ADDRESS^XLFNSLK(IP)
"RTN","XWBTCPMT",21,0)
 I IP'?1.3N1P1.3N1P1.3N1P1.3N Q "-1^BAD IP"
"RTN","XWBTCPMT",22,0)
 I OS["OpenM" X "S T1=$ZH"
"RTN","XWBTCPMT",23,0)
 D CALL^%ZISTCP(IP,PORT)
"RTN","XWBTCPMT",24,0)
 I OS["OpenM" X "S T2=$ZH"
"RTN","XWBTCPMT",25,0)
 I POP Q "-1^Failed to Connect"
"RTN","XWBTCPMT",26,0)
 U IO
"RTN","XWBTCPMT",27,0)
 N $ET S $ET="G ERR^XWBTCPMT"
"RTN","XWBTCPMT",28,0)
 ;TCPConnect
"RTN","XWBTCPMT",29,0)
 W "[XWB]10304"_$C(10)_"TCPConnect5001010.6.17.95f00010f0024ISF-FORTW.vha.med.va.govf"_$C(4),@IOF
"RTN","XWBTCPMT",30,0)
 R RES:10 I '$T S RES="-1^TIMEOUT" G EXIT
"RTN","XWBTCPMT",31,0)
 I OS["OpenM" X "S T3=$ZH"
"RTN","XWBTCPMT",32,0)
 W "[XWB]11302"_$C(1)_"0"_$C(16)_"XUS SIGNON SETUP54f"_$C(4),@IOF
"RTN","XWBTCPMT",33,0)
 R RES2:10
"RTN","XWBTCPMT",34,0)
 I OS["OpenM" X "S T4=$ZH"
"RTN","XWBTCPMT",35,0)
 W "[XWB]10304"_$C(5)_"#BYE#"_$C(4),@IOF
"RTN","XWBTCPMT",36,0)
 R RES3:3 I '$T S RES="-1^TIMEOUT after accept" G EXIT
"RTN","XWBTCPMT",37,0)
 S RES="1^"_RES_U_($G(T2)-$G(T1))_U_($G(T3)-$G(T2))_U_($G(T4)-$G(T3))
"RTN","XWBTCPMT",38,0)
EXIT ;Close and Exit
"RTN","XWBTCPMT",39,0)
 D CLOSE^%ZISTCP
"RTN","XWBTCPMT",40,0)
 Q RES
"RTN","XWBTCPMT",41,0)
 ;
"RTN","XWBTCPMT",42,0)
ERR ;
"RTN","XWBTCPMT",43,0)
 D CLOSE^%ZISTCP
"RTN","XWBTCPMT",44,0)
 U $P
"RTN","XWBTCPMT",45,0)
 Q "-1^"_$$EC^%ZOSV
"RTN","XWBTCPMT",46,0)
 ;
"RTN","XWBTCPMT",47,0)
CHECK ;Check server setup
"RTN","XWBTCPMT",48,0)
 N XPARSYS,XWBDEBUG,XWBOS,XWBT,XWNRBUF,XWBTIME,NEWJOB
"RTN","XWBTCPMT",49,0)
 W !,"This will check for some of the errors that can prevent the Broker"
"RTN","XWBTCPMT",50,0)
 W !,"from getting started.",!
"RTN","XWBTCPMT",51,0)
 D HOME^%ZIS
"RTN","XWBTCPMT",52,0)
 D INIT^XWBTCPM
"RTN","XWBTCPMT",53,0)
 W !,"Debugging is set to ",$S(XWBDEBUG=1:"On",XWBDEBUG=2:"Verbose",XWBDEBUG=3:"Very Verbose",1:"Off")
"RTN","XWBTCPMT",54,0)
 D SETTIME^XWBTCPM(0)
"RTN","XWBTCPMT",55,0)
 W !,"Broker activity timeout is set to ",XWBTIME
"RTN","XWBTCPMT",56,0)
 S %ZIS="M",IOP="NULL" D ^%ZIS
"RTN","XWBTCPMT",57,0)
 I POP W !,"The NULL device is not setup correctly."
"RTN","XWBTCPMT",58,0)
 I 'POP D
"RTN","XWBTCPMT",59,0)
 . W !,"Checking can Write to null device"
"RTN","XWBTCPMT",60,0)
 . U IO W !,"TEST",!
"RTN","XWBTCPMT",61,0)
 . D ^%ZISC U IO W !,"The NULL device is OK."
"RTN","XWBTCPMT",62,0)
 I $T(SHARELIC^%ZOSV)="" W !,"The routine %ZOSV is missing the entry point 'SHARELIC'."
"RTN","XWBTCPMT",63,0)
 I $T(GETPEER^%ZOSV)="" W !,"The routine %ZOSV is missing the entry point 'GETPEER'."
"RTN","XWBTCPMT",64,0)
 I $G(XWBT("PCNT")),$T(COUNT^XUSCNT)="" W !,"The routine XUSCNT is missing on a GT.M system."
"RTN","XWBTCPMT",65,0)
 W !,"Checking if new JOB's can start."
"RTN","XWBTCPMT",66,0)
 S ^TMP("XWB",$J)=1 X "J HOLD^XWBTCPMT($J) H 1"
"RTN","XWBTCPMT",67,0)
 I $G(^TMP("XWB",$J))=1 W !,"Doesn't look like a new JOB could start!",!
"RTN","XWBTCPMT",68,0)
 S NEWJOB=$$NEWJOB^XWBTCPM()
"RTN","XWBTCPMT",69,0)
 W !,"New jobs are "_$S('NEWJOB:"not ",1:"")_"allowed."
"RTN","XWBTCPMT",70,0)
 W !,"Done with the checks.",!
"RTN","XWBTCPMT",71,0)
 K ^TMP("XWB",$J)
"RTN","XWBTCPMT",72,0)
 Q
"RTN","XWBTCPMT",73,0)
 ;
"RTN","XWBTCPMT",74,0)
HOLD(MJ) ;Show that a new job is allowed.
"RTN","XWBTCPMT",75,0)
 S ^TMP("XWB",MJ)=5
"RTN","XWBTCPMT",76,0)
 HANG 5
"RTN","XWBTCPMT",77,0)
 Q
"VER")
8.0^22.0
"BLD",1078,6)
^40
**END**
**END**

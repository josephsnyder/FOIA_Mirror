Released XWB*1.1*54 SEQ #41
Extracted from mail message
**KIDS**:XWB*1.1*54^

**INSTALL NAME**
XWB*1.1*54
"BLD",1223,0)
XWB*1.1*54^RPC BROKER^0^3090824^y
"BLD",1223,1,0)
^^2^2^3090323^
"BLD",1223,1,1,0)
Please refer to the Description in the FORUM Patch Module for details.
"BLD",1223,1,2,0)
XWB*1.1*54 Handle long parameters in RDV.
"BLD",1223,4,0)
^9.64PA^^
"BLD",1223,6.3)
5
"BLD",1223,"KRN",0)
^9.67PA^9002226^21
"BLD",1223,"KRN",.4,0)
.4
"BLD",1223,"KRN",.401,0)
.401
"BLD",1223,"KRN",.402,0)
.402
"BLD",1223,"KRN",.403,0)
.403
"BLD",1223,"KRN",.5,0)
.5
"BLD",1223,"KRN",.84,0)
.84
"BLD",1223,"KRN",3.6,0)
3.6
"BLD",1223,"KRN",3.8,0)
3.8
"BLD",1223,"KRN",9.2,0)
9.2
"BLD",1223,"KRN",9.8,0)
9.8
"BLD",1223,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",1223,"KRN",9.8,"NM",1,0)
XWB2HL7^^0^B59516384
"BLD",1223,"KRN",9.8,"NM",2,0)
XWB2HL7A^^0^B24063591
"BLD",1223,"KRN",9.8,"NM","B","XWB2HL7",1)

"BLD",1223,"KRN",9.8,"NM","B","XWB2HL7A",2)

"BLD",1223,"KRN",19,0)
19
"BLD",1223,"KRN",19.1,0)
19.1
"BLD",1223,"KRN",101,0)
101
"BLD",1223,"KRN",409.61,0)
409.61
"BLD",1223,"KRN",771,0)
771
"BLD",1223,"KRN",779.2,0)
779.2
"BLD",1223,"KRN",870,0)
870
"BLD",1223,"KRN",8989.51,0)
8989.51
"BLD",1223,"KRN",8989.52,0)
8989.52
"BLD",1223,"KRN",8994,0)
8994
"BLD",1223,"KRN",9002226,0)
9002226
"BLD",1223,"KRN","B",.4,.4)

"BLD",1223,"KRN","B",.401,.401)

"BLD",1223,"KRN","B",.402,.402)

"BLD",1223,"KRN","B",.403,.403)

"BLD",1223,"KRN","B",.5,.5)

"BLD",1223,"KRN","B",.84,.84)

"BLD",1223,"KRN","B",3.6,3.6)

"BLD",1223,"KRN","B",3.8,3.8)

"BLD",1223,"KRN","B",9.2,9.2)

"BLD",1223,"KRN","B",9.8,9.8)

"BLD",1223,"KRN","B",19,19)

"BLD",1223,"KRN","B",19.1,19.1)

"BLD",1223,"KRN","B",101,101)

"BLD",1223,"KRN","B",409.61,409.61)

"BLD",1223,"KRN","B",771,771)

"BLD",1223,"KRN","B",779.2,779.2)

"BLD",1223,"KRN","B",870,870)

"BLD",1223,"KRN","B",8989.51,8989.51)

"BLD",1223,"KRN","B",8989.52,8989.52)

"BLD",1223,"KRN","B",8994,8994)

"BLD",1223,"KRN","B",9002226,9002226)

"BLD",1223,"QUES",0)
^9.62^^
"BLD",1223,"REQB",0)
^9.611^1^1
"BLD",1223,"REQB",1,0)
XWB*1.1*39^0
"BLD",1223,"REQB","B","XWB*1.1*39",1)

"MBREQ")
0
"PKG",8,-1)
1^1
"PKG",8,0)
RPC BROKER^XWB^Remote Procedure Call Broker^
"PKG",8,20,0)
^9.402P^^
"PKG",8,22,0)
^9.49I^1^1
"PKG",8,22,1,0)
1.1^2970918^2971120^7
"PKG",8,22,1,"PAH",1,0)
54^3090824
"PKG",8,22,1,"PAH",1,1,0)
^^2^2^3090824
"PKG",8,22,1,"PAH",1,1,1,0)
Please refer to the Description in the FORUM Patch Module for details.
"PKG",8,22,1,"PAH",1,1,2,0)
XWB*1.1*54 Handle long parameters in RDV.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","XWB2HL7")
0^1^B59516384^B58790957
"RTN","XWB2HL7",1,0)
XWB2HL7 ;ISF/RWF - Remote RPC via HL7 ;08/24/09  14:32
"RTN","XWB2HL7",2,0)
 ;;1.1;RPC BROKER;**12,18,20,22,27,32,39,54**;Mar 28, 1997;Build 5
"RTN","XWB2HL7",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XWB2HL7",4,0)
 ;
"RTN","XWB2HL7",5,0)
 Q
"RTN","XWB2HL7",6,0)
 ;
"RTN","XWB2HL7",7,0)
 ; EN1^XLWB2HL7 is the entry point used by the Broker.
"RTN","XWB2HL7",8,0)
 ;
"RTN","XWB2HL7",9,0)
 ; Patch XWB*1.1*27 modified the EN1^XWB2HL7 call point.  However,
"RTN","XWB2HL7",10,0)
 ; the code associated with the original pre-modification version
"RTN","XWB2HL7",11,0)
 ; of the EN1 call point still exists in the XWB2HL7C routine.
"RTN","XWB2HL7",12,0)
 ; Please note that when the original EN1 code was moved to XWB2HL7C
"RTN","XWB2HL7",13,0)
 ; it was renamed OLDEN1.
"RTN","XWB2HL7",14,0)
 ;
"RTN","XWB2HL7",15,0)
EN1(RET,LOC,RPC,RPCVER,P1,P2,P3,P4,P5,P6,P7,P8,P9,P10) ; Call a remote RPC
"RTN","XWB2HL7",16,0)
 ; with 1-10 parameters.
"RTN","XWB2HL7",17,0)
 ; (This reworked EN1 emtry point replaces the original EN1 entry point,
"RTN","XWB2HL7",18,0)
 ; which was renamed OLDEN1.)
"RTN","XWB2HL7",19,0)
 ;
"RTN","XWB2HL7",20,0)
 N I,INX,N,PMAX,RPCIEN,X,XWBDVER,XWBESSO,XWBHDL,XWBHL7,XWBMSG
"RTN","XWB2HL7",21,0)
 N XWBPAR,XWBPCNT,XWBSEC,ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","XWB2HL7",22,0)
 ;
"RTN","XWB2HL7",23,0)
 D SETUP(1) I $G(RET(1))'="" QUIT  ;->
"RTN","XWB2HL7",24,0)
 ;
"RTN","XWB2HL7",25,0)
 ; Queue up request... (OLDEN1 used DIRECT call)
"RTN","XWB2HL7",26,0)
 S ZTSAVE("*")="",ZTRTN="DEQ^XWB2HL7C",ZTDTH=$H,ZTIO=""
"RTN","XWB2HL7",27,0)
 S ZTDESC="RPC Broker queued call from EN1~XWB2HL7"
"RTN","XWB2HL7",28,0)
 D ^%ZTLOAD
"RTN","XWB2HL7",29,0)
 ;
"RTN","XWB2HL7",30,0)
 ; What happened?
"RTN","XWB2HL7",31,0)
 I $G(ZTSK)'>0 S RET(0)="-1^Failed to task" QUIT  ;->
"RTN","XWB2HL7",32,0)
 S RET(0)=XWBHDL
"RTN","XWB2HL7",33,0)
 D SETNODE^XWBDRPC(XWBHDL,"TASK",ZTSK)
"RTN","XWB2HL7",34,0)
 ;
"RTN","XWB2HL7",35,0)
 Q
"RTN","XWB2HL7",36,0)
 ;
"RTN","XWB2HL7",37,0)
 ;This is the Direct HL7 call point
"RTN","XWB2HL7",38,0)
DIRECT(RET,LOC,RPC,RPCVER,P1,P2,P3,P4,P5,P6,P7,P8,P9,P10)  ;Call a remote RPC
"RTN","XWB2HL7",39,0)
 N X,I,INX,N,XWBHL7,XWBPAR,XWBPCNT,XWBDVER,XWBESSO,XWBHDL,PMAX
"RTN","XWB2HL7",40,0)
 N XWBMSG,XWBSEC,RPCIEN
"RTN","XWB2HL7",41,0)
 ;Protect caller from HL7
"RTN","XWB2HL7",42,0)
 N HLMTIEN,HLDOM,HLECH,HLFS,HLINSTN,HLNEXT,HLNODE,HLPARAM,HLQ,HLQUIT
"RTN","XWB2HL7",43,0)
 D SETUP(1) I $G(RET(1))'="" Q
"RTN","XWB2HL7",44,0)
 ;(procedurename, query tag, error return, destination, Parameter array)
"RTN","XWB2HL7",45,0)
 D DIRECT^XWB2HL7A("ZREMOTE RPC",XWBHDL,.XWBMSG,LOC,.XWBPAR)
"RTN","XWB2HL7",46,0)
 I $P(XWBMSG,U,2) S RET(0)="-1^"_$P(XWBMSG,"^",3) Q
"RTN","XWB2HL7",47,0)
 I 'HLMTIEN S RET(0)="-1^No Message returned" Q
"RTN","XWB2HL7",48,0)
 D RETURN,RTNDATA^XWBDRPC(.RET,XWBHDL)
"RTN","XWB2HL7",49,0)
 Q
"RTN","XWB2HL7",50,0)
 ;
"RTN","XWB2HL7",51,0)
SETUP(XWBDIR) ;Check/setup for HL7 call
"RTN","XWB2HL7",52,0)
 S RET="",(XWBPAR,RPCIEN)="",XWBPCNT=0,XWBDVER=1,RPCVER=$G(RPCVER),PMAX=10
"RTN","XWB2HL7",53,0)
 ;Check that user can access remote system with ESSO
"RTN","XWB2HL7",54,0)
 S XWBESSO=$$GET^XUESSO1 I +XWBESSO<0 S RET(0)="",RET(1)=XWBESSO Q
"RTN","XWB2HL7",55,0)
 ;Check that the link is setup.
"RTN","XWB2HL7",56,0)
 I 'XWBDIR,'$$STAT^HLCSLM S RET(0)="",RET(1)="-1^Link Manager not running" Q
"RTN","XWB2HL7",57,0)
 I '$$CHKLL^HLUTIL(LOC) S RET(0)="",RET(1)="-1^Link not setup" Q
"RTN","XWB2HL7",58,0)
 ;Find local RPC here
"RTN","XWB2HL7",59,0)
 S RPCIEN=$$RPCIEN^XWBLIB(RPC) I RPCIEN'>0 S RET(0)="",RET(1)="-1^No Local RPC" Q
"RTN","XWB2HL7",60,0)
 F I=1:1:PMAX Q:'$D(@("P"_I))  S XWBPCNT=I
"RTN","XWB2HL7",61,0)
 ;Get any security info.
"RTN","XWB2HL7",62,0)
 S XWBSEC=3.14
"RTN","XWB2HL7",63,0)
 ;Do parameter conversion
"RTN","XWB2HL7",64,0)
 ;F IX=1:1:XWBPCNT I $G(^XWB(8994,RPCIEN,2,IX,2))]"" S N="P"_IX,X=@N,@(N_"=^(2)")
"RTN","XWB2HL7",65,0)
 ;Build value to send
"RTN","XWB2HL7",66,0)
 K XWBPAR S INX=1
"RTN","XWB2HL7",67,0)
 F N="RPC","RPCVER","XWBPCNT","XWBESSO","XWBDVER","XWBSEC" D
"RTN","XWB2HL7",68,0)
 . S XWBPAR(INX)=$$V2S(N)_$$V2S(@N),INX=INX+1
"RTN","XWB2HL7",69,0)
 ;Load parameters into a string
"RTN","XWB2HL7",70,0)
 F I=1:1:PMAX S N="P"_I Q:'$D(@N)  S X=$$LD(N),XWBPAR(INX)=X,INX=INX+1
"RTN","XWB2HL7",71,0)
 ;Build a handle to link request with return.
"RTN","XWB2HL7",72,0)
 S XWBHDL=$$HANDLE^XWBDRPC(),XWBMSG="" D ADDHDL^XWBDRPC(XWBHDL)
"RTN","XWB2HL7",73,0)
 Q
"RTN","XWB2HL7",74,0)
 ;
"RTN","XWB2HL7",75,0)
LD(%V) ;Convert a var name into a transport string. Grabs from symbol table
"RTN","XWB2HL7",76,0)
 N %1,%2,%3,%4
"RTN","XWB2HL7",77,0)
 I $D(@%V)=1 Q $$V2S(%V)_$$V2S(@%V)
"RTN","XWB2HL7",78,0)
 S %1=$S($D(@%V)#2:$$V2S(N)_$$V2S(@N),1:"")
"RTN","XWB2HL7",79,0)
 F  S %V=$Q(@%V) Q:%V=""  S %3=$$V2S(%V),%4=$$V2S(@%V) S:$L(%1)+$L(%3)+$L(%4)>245 XWBPAR(INX)=%1,INX=INX+1,%1="" S %1=%1_%3_%4
"RTN","XWB2HL7",80,0)
 Q %1
"RTN","XWB2HL7",81,0)
V2S(V) ;Convert a value into L_value string
"RTN","XWB2HL7",82,0)
 Q $E(1000+$L(V),2,4)_V
"RTN","XWB2HL7",83,0)
 ;
"RTN","XWB2HL7",84,0)
S2V(S) ;Convert a string L_value into a value
"RTN","XWB2HL7",85,0)
 N D,L S L=+$E(S,1,3),D=""
"RTN","XWB2HL7",86,0)
 S:L D=$E(S,4,3+L) S S=$E(S,4+L,999)
"RTN","XWB2HL7",87,0)
 Q D
"RTN","XWB2HL7",88,0)
 ;
"RTN","XWB2HL7",89,0)
UD(%1) ;Unload strings into variables. Builds symbol table
"RTN","XWB2HL7",90,0)
 N %
"RTN","XWB2HL7",91,0)
 F  Q:%1=""  S %=$$S2V(.%1),@%=$$S2V(.%1)
"RTN","XWB2HL7",92,0)
 Q
"RTN","XWB2HL7",93,0)
 ;
"RTN","XWB2HL7",94,0)
 ;This is called by HL7 to process a RPC on the remote system.
"RTN","XWB2HL7",95,0)
 ;Call parameters
"RTN","XWB2HL7",96,0)
 ; 1. return the $NAME for the data
"RTN","XWB2HL7",97,0)
 ; 2. query tag
"RTN","XWB2HL7",98,0)
 ; 3. remote procedure name
"RTN","XWB2HL7",99,0)
 ; 4. parameter array
"RTN","XWB2HL7",100,0)
REMOTE(XWBY,XWBQT,XWBSPN,XWBPAR) ;Entry point on Remote system
"RTN","XWB2HL7",101,0)
 ;XWBY is the return data
"RTN","XWB2HL7",102,0)
 ;DUZ is NEWed to protect HL7
"RTN","XWB2HL7",103,0)
 N %,I,X,Y,ERR,RPC,P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,XWBPCNT,XWBDVER,XWBRPC
"RTN","XWB2HL7",104,0)
 N RPC,RPCVER,XWBESSO,DUZ,$ESTACK,$ETRAP
"RTN","XWB2HL7",105,0)
 N XWBA1,XWBA2,XWBA3,XWBA4,XWBA5,XWBA6,XWBA7,XWBA8,XWBA9,XWBA10
"RTN","XWB2HL7",106,0)
 ;Set local error trap
"RTN","XWB2HL7",107,0)
 S $ETRAP="D ETRAP^XWB2HL7"
"RTN","XWB2HL7",108,0)
 ;See that leftover data in XUTL won't cause problems with %ZIS & HOME
"RTN","XWB2HL7",109,0)
 K ^XUTL("XQ",$J,"IO")
"RTN","XWB2HL7",110,0)
 ;Expand parameters into values
"RTN","XWB2HL7",111,0)
 F I=1:1 Q:'$D(XWBPAR(I))  D UD(XWBPAR(I)_$G(XWBPAR(I,1))) ;p54
"RTN","XWB2HL7",112,0)
 I '$D(RPC) S XWBY(0)="-1^Bad Message" G REX ;Bad msg
"RTN","XWB2HL7",113,0)
 S XWBRPC=0,XWBRPC=$$RPCGET(RPC,.XWBRPC) I XWBRPC'>0 S XWBY(0)="-1^RPC name not found" G REX
"RTN","XWB2HL7",114,0)
 I '$$RPCAVAIL^XWBLIB(XWBRPC,"R",RPCVER) S XWBY(0)="-1^RPC Access Blocked/Wrong Version at Remote Site" G REX
"RTN","XWB2HL7",115,0)
 ;Check any security info.
"RTN","XWB2HL7",116,0)
 ;I $D(XWBSEC),XWBSEC'=3.14 S XWBY(0)="-1^Invalid security" G REX
"RTN","XWB2HL7",117,0)
 ;Check and Setup the user
"RTN","XWB2HL7",118,0)
 D  I $G(XWBY(0))<0 G REX
"RTN","XWB2HL7",119,0)
 . I XWBRPC("USER")=1 S DUZ=.5,DUZ(0)="" Q
"RTN","XWB2HL7",120,0)
 . I '$$PUT^XUESSO1(XWBESSO) S XWBY(0)="-1^Bad User"
"RTN","XWB2HL7",121,0)
 ;Enter in Sign-on log
"RTN","XWB2HL7",122,0)
 D GETENV^%ZOSV S XWBSTATE("SLOG")=$$SLOG^XUS1($P(Y,U,2),,"",$P(Y,U),$P(Y,U,3),$P(XWBESSO,U,3),$P(XWBESSO,U,5))
"RTN","XWB2HL7",123,0)
 ;Do parameter conversion
"RTN","XWB2HL7",124,0)
 ;F IX=1:1:XWBPCNT I $G(^XWB(8994,XWBRPC,2,IX,3))]"" S N="P"_IX,X=@N,@(N_"=^(3)")
"RTN","XWB2HL7",125,0)
 S PAR=$$PARAM
"RTN","XWB2HL7",126,0)
 ;Save HL7 device
"RTN","XWB2HL7",127,0)
 I $L($G(IO)) S IO(1,IO)="",IO(0)=IO D SAVDEV^%ZISUTL("HL7HOME")
"RTN","XWB2HL7",128,0)
 ;Result returned in XWBY
"RTN","XWB2HL7",129,0)
 D CAPI(XWBRPC("RTAG"),XWBRPC("RNAM"),PAR)
"RTN","XWB2HL7",130,0)
 ;Restore HL7 Device
"RTN","XWB2HL7",131,0)
 D USE^%ZISUTL("HL7HOME"),RMDEV^%ZISUTL("HL7HOME")
"RTN","XWB2HL7",132,0)
REX ;Exit from remote.
"RTN","XWB2HL7",133,0)
 ;What to do to data in XWBY for HL7 return.
"RTN","XWB2HL7",134,0)
 K ^TMP("XWBR",$J)
"RTN","XWB2HL7",135,0)
 I '$D(XWBY) S XWBY(0)="-1^Application failed to return any data"
"RTN","XWB2HL7",136,0)
 I $D(XWBY)>9 D
"RTN","XWB2HL7",137,0)
 . M ^TMP("XWBR",$J)=XWBY K XWBY S XWBY=$NA(^TMP("XWBR",$J))
"RTN","XWB2HL7",138,0)
 I $D(XWBY)=1,$E(XWBY)'="^" D
"RTN","XWB2HL7",139,0)
 . S ^TMP("XWBR",$J,0)=XWBY K XWBY S XWBY=$NA(^TMP("XWBR",$J))
"RTN","XWB2HL7",140,0)
 ;If XWBY is a $NA value just return it.
"RTN","XWB2HL7",141,0)
 I $D(XWBSTATE("SLOG")) D LOUT^XUSCLEAN(XWBSTATE("SLOG"))
"RTN","XWB2HL7",142,0)
 Q
"RTN","XWB2HL7",143,0)
 ;
"RTN","XWB2HL7",144,0)
CAPI(TAG,NAM,PAR) ;make API call
"RTN","XWB2HL7",145,0)
 ;DUZ was setup in Remote
"RTN","XWB2HL7",146,0)
 N HL,HLA,HLERR,HLL,HLMTIENS,IO,R,$ES,$ET ;p39
"RTN","XWB2HL7",147,0)
 S $ET="D CAPIER^XWB2HL7"
"RTN","XWB2HL7",148,0)
 S R=TAG_"^"_NAM_"(.XWBY"_$S(PAR="":")",1:","_PAR_")")
"RTN","XWB2HL7",149,0)
 ;Ready to call RPC?  Setup the Null device
"RTN","XWB2HL7",150,0)
 S IOP="NULL",%ZIS="H0N" D ^%ZIS
"RTN","XWB2HL7",151,0)
 D @R
"RTN","XWB2HL7",152,0)
 ;Close the NULL device
"RTN","XWB2HL7",153,0)
 S IO("C")=1 D ^%ZISC
"RTN","XWB2HL7",154,0)
 ;Return data is in XWBY.
"RTN","XWB2HL7",155,0)
 Q
"RTN","XWB2HL7",156,0)
 ;
"RTN","XWB2HL7",157,0)
CAPIER ;Handle a error in called RPC
"RTN","XWB2HL7",158,0)
 S XWBY(0)="-1^Remote Error: "_$E($$EC^%ZOSV,1,200) ;Grab the error first
"RTN","XWB2HL7",159,0)
 D ^%ZTER ;record
"RTN","XWB2HL7",160,0)
 S IO("C")=1 D ^%ZISC ;Close the NULL device
"RTN","XWB2HL7",161,0)
 D UNWIND^%ZTER ;Unwind stack and return to HL7
"RTN","XWB2HL7",162,0)
 Q
"RTN","XWB2HL7",163,0)
 ;
"RTN","XWB2HL7",164,0)
RETURN ;This tag is called by HL7 when the data returns from the remote system
"RTN","XWB2HL7",165,0)
 ;Need to get the MSG id that we added so we know where to place the
"RTN","XWB2HL7",166,0)
 ;results. Set in XWB RPC SERVER SEND protocol.
"RTN","XWB2HL7",167,0)
 N $ES,$ETRAP S $ETRAP="D ^%ZTER D UNWIND^%ZTER"
"RTN","XWB2HL7",168,0)
 N XWBHDL,XWB1,XWB2,I,J,X
"RTN","XWB2HL7",169,0)
 Q:'$D(HLNEXT)
"RTN","XWB2HL7",170,0)
 ;Now to find the MSA line
"RTN","XWB2HL7",171,0)
 F I=1:1 X HLNEXT Q:HLQUIT'>0  S X(I)=HLNODE Q:"MSA"=$E(HLNODE,1,3)
"RTN","XWB2HL7",172,0)
 I HLNODE'["MSA" Q  ;Something wrong
"RTN","XWB2HL7",173,0)
 I $P(HLNODE,U,2)'="AA" G REJECT
"RTN","XWB2HL7",174,0)
 ;Now to find the QAK line
"RTN","XWB2HL7",175,0)
 F I=I+1:1 X HLNEXT Q:HLQUIT'>0  S X(I)=HLNODE Q:"QAK"=$E(HLNODE,1,3)
"RTN","XWB2HL7",176,0)
 I HLNODE'["QAK" Q  ;Something wrong
"RTN","XWB2HL7",177,0)
 ;Get the handle
"RTN","XWB2HL7",178,0)
 S XWBHDL=$P(HLNODE,"^",2)
"RTN","XWB2HL7",179,0)
 Q:$$CHKHDL^XWBDRPC(XWBHDL)["-1"  ;XTMP missing
"RTN","XWB2HL7",180,0)
 ;Now to place the data
"RTN","XWB2HL7",181,0)
 F I=1:1 X HLNEXT Q:HLQUIT'>0  D:$E(HLNODE,1,3)="RDT"
"RTN","XWB2HL7",182,0)
 . S X=$E(HLNODE,5,999),J=0 F  S J=$O(HLNODE(J)) Q:'J  S X=X_HLNODE(J)
"RTN","XWB2HL7",183,0)
 . D PLACE(XWBHDL,X)
"RTN","XWB2HL7",184,0)
 . Q
"RTN","XWB2HL7",185,0)
 ;
"RTN","XWB2HL7",186,0)
 S X=$$HDLSTA^XWBDRPC(XWBHDL,"1^Done")
"RTN","XWB2HL7",187,0)
 Q
"RTN","XWB2HL7",188,0)
 ;
"RTN","XWB2HL7",189,0)
REJECT ;Handle some kind of reject on remote system
"RTN","XWB2HL7",190,0)
 N HDL,MID,MSG,X
"RTN","XWB2HL7",191,0)
 S HDL="XWBDRPC",MID=$P(HLNODE,U,3),MSG="-1^"_$P(HLNODE,U,4) ;Save reason
"RTN","XWB2HL7",192,0)
 F  S HDL=$O(^XTMP(HDL)),X="" Q:HDL'["XWBDRPC"  S X=$$GETNODE^XWBDRPC(HDL,"MSGID") Q:X=MID
"RTN","XWB2HL7",193,0)
 Q:X=""  ;Didn't find Handle
"RTN","XWB2HL7",194,0)
 S X=$$HDLSTA^XWBDRPC(HDL,MSG)
"RTN","XWB2HL7",195,0)
 Q
"RTN","XWB2HL7",196,0)
 ;
"RTN","XWB2HL7",197,0)
PLACE(HL,DATA) ;Called by HL7 to place each line of data.
"RTN","XWB2HL7",198,0)
 N IX
"RTN","XWB2HL7",199,0)
 S IX=+$G(^XTMP(HL,"CNT")),^XTMP(HL,"D",IX)=DATA,^XTMP(HL,"CNT")=IX+1 ;p32
"RTN","XWB2HL7",200,0)
 Q
"RTN","XWB2HL7",201,0)
 ;
"RTN","XWB2HL7",202,0)
RPCGET(N,R) ;Convert RPC name to IEN and parameters.
"RTN","XWB2HL7",203,0)
 N T,T0
"RTN","XWB2HL7",204,0)
 S T=$G(N) Q:T="" "-1^No RPC name"
"RTN","XWB2HL7",205,0)
 S T=$$RPCIEN^XWBLIB(T) Q:T'>0 "-1^Bad RPC name"
"RTN","XWB2HL7",206,0)
 Q:'$D(R) T
"RTN","XWB2HL7",207,0)
 S T0=$G(^XWB(8994,T,0)),R("IEN")=T,R("NAME")=$P(T0,"^")
"RTN","XWB2HL7",208,0)
 S R("RTAG")=$P(T0,"^",2),R("RNAM")=$P(T0,"^",3)
"RTN","XWB2HL7",209,0)
 S R("XWBPTYPE")=$P(T0,"^",4),R("XWBWRAP")=$P(T0,"^",8),R("USER")=$P(T0,"^",10)
"RTN","XWB2HL7",210,0)
 ;S XWBPCNT=0 F I=0:0 S I=$O(^XWB(8994,T,1,I)) Q:I'>0  S XWBPCNT=XWBPCNT+1
"RTN","XWB2HL7",211,0)
 Q T
"RTN","XWB2HL7",212,0)
PARAM() ;Build remote parameter list
"RTN","XWB2HL7",213,0)
 N I,%,X,A S X=""
"RTN","XWB2HL7",214,0)
 F I=1:1:XWBPCNT S %="P"_I,A="XWBA"_I Q:'$D(@%)  K @A D
"RTN","XWB2HL7",215,0)
 . I $D(@%)=1 S X=X_%_"," Q
"RTN","XWB2HL7",216,0)
 . S X=X_"."_A_"," M @A=@% Q
"RTN","XWB2HL7",217,0)
 Q $E(X,1,$L(X)-1)
"RTN","XWB2HL7",218,0)
 ;
"RTN","XWB2HL7",219,0)
 ;
"RTN","XWB2HL7",220,0)
RPCCHK(RET,HDL) ;RPC call to check a handle status
"RTN","XWB2HL7",221,0)
 N S,M,Z
"RTN","XWB2HL7",222,0)
 I $G(HDL)="" S RET(0)="-1^Bad Handle" Q
"RTN","XWB2HL7",223,0)
 S RET(0)=$$CHKHDL^XWBDRPC(HDL),S=$$GETNODE(HDL,"MSGID")
"RTN","XWB2HL7",224,0)
 I RET(0)'["Done",$L(S) D  S $P(RET(1),"^",3)=Z
"RTN","XWB2HL7",225,0)
 . S RET(1)=$$MSGSTAT^HLUTIL(S),M=+RET(1),Z=""
"RTN","XWB2HL7",226,0)
 . I M=1 S Z=$S($P(RET(1),"^",5)>1:"NOT first in queue",1:"First in queue")
"RTN","XWB2HL7",227,0)
 . I M=1.5 S Z="Opening connection"_$S($P(RET(1),"^",6):", open failed "_$P(RET(1),"^",6)_" times.",1:"")
"RTN","XWB2HL7",228,0)
 . I M=1.7 S Z="Sent, awaiting responce"
"RTN","XWB2HL7",229,0)
 . I M=2 S Z="Awaiting application ACK"
"RTN","XWB2HL7",230,0)
 Q
"RTN","XWB2HL7",231,0)
 ;
"RTN","XWB2HL7",232,0)
GETNODE(%1,%2) ;Pass to XWBDRPC
"RTN","XWB2HL7",233,0)
 Q $$GETNODE^XWBDRPC(%1,%2)
"RTN","XWB2HL7",234,0)
 ;
"RTN","XWB2HL7",235,0)
ETRAP ;Handle errors in the RPC at the remote site.
"RTN","XWB2HL7",236,0)
 K ^TMP("XWBR",$J),XWBY
"RTN","XWB2HL7",237,0)
 S ^TMP("XWBR",$J,0)="-1^Trapped Error at remote site.  "_$$EC^%ZOSV,XWBY=$NA(^TMP("XWBR",$J))
"RTN","XWB2HL7",238,0)
 S XWBY=$NA(^TMP("XWBR",$J)) ;Setup the return data.
"RTN","XWB2HL7",239,0)
 ;Record the error, and exit to caller
"RTN","XWB2HL7",240,0)
 D ^%ZTER,UNWIND^%ZTER
"RTN","XWB2HL7",241,0)
 Q
"RTN","XWB2HL7A")
0^2^B24063591^B23859514
"RTN","XWB2HL7A",1,0)
XWB2HL7A ;;ISF/AC - Remote RPCs via HL7. ;03/26/09  16:22
"RTN","XWB2HL7A",2,0)
 ;;1.1;RPC BROKER;**12,54**;Mar 28, 1997;Build 5
"RTN","XWB2HL7A",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XWB2HL7A",4,0)
RPCINFO ;RPC Information
"RTN","XWB2HL7A",5,0)
 ;Msg Type: SPQ - stored procedure request (event Q01)
"RTN","XWB2HL7A",6,0)
 ;--------------
"RTN","XWB2HL7A",7,0)
 ;MSH Message Header
"RTN","XWB2HL7A",8,0)
 ;SPR Store Procedure Request
"RTN","XWB2HL7A",9,0)
 ;    Query Tag^Query/Response Format Code^Stored Proc Name^Param List
"RTN","XWB2HL7A",10,0)
 ;[ RDF ] Table Row Definition
"RTN","XWB2HL7A",11,0)
 ;        # of Columns per Row^Column Description
"RTN","XWB2HL7A",12,0)
 ;[ DSC ] Continuation Pointer
"RTN","XWB2HL7A",13,0)
 ;--------------
"RTN","XWB2HL7A",14,0)
 ;Response Msg Type: TBR - tabular data response
"RTN","XWB2HL7A",15,0)
 ;--------------
"RTN","XWB2HL7A",16,0)
 ;MSH Message Header
"RTN","XWB2HL7A",17,0)
 ;MSA Message Acknowledgment
"RTN","XWB2HL7A",18,0)
 ;[ERR] Error
"RTN","XWB2HL7A",19,0)
 ;QAK Query Acknowledgment
"RTN","XWB2HL7A",20,0)
 ;RDF Table Row Definition
"RTN","XWB2HL7A",21,0)
 ;        # of Columns per Row^Column Description
"RTN","XWB2HL7A",22,0)
 ;{ RDT } Table Row Data
"RTN","XWB2HL7A",23,0)
 ;        Column Value
"RTN","XWB2HL7A",24,0)
 ;[ DSC ] Continuation Pointer
"RTN","XWB2HL7A",25,0)
 ;-------------
"RTN","XWB2HL7A",26,0)
DIRECT(XWB2SPN,XWB2HNDL,XWB2RET,XWB2DEST,XWB2PRAM,XWB2PARY) ;DIR RPC CALL
"RTN","XWB2HL7A",27,0)
 N XWB2DRCT
"RTN","XWB2HL7A",28,0)
 S XWB2DRCT=1
"RTN","XWB2HL7A",29,0)
 G D2
"RTN","XWB2HL7A",30,0)
 ;
"RTN","XWB2HL7A",31,0)
 ;-------------
"RTN","XWB2HL7A",32,0)
 ;This is where the RPC calls to send the RPC to the remote system
"RTN","XWB2HL7A",33,0)
 ;(procedurename, query tag, error return, destination, Parameter array)
"RTN","XWB2HL7A",34,0)
CALL(XWB2SPN,XWB2HNDL,XWB2RET,XWB2DEST,XWB2PRAM,XWB2PARY) ;RPC CALL
"RTN","XWB2HL7A",35,0)
 ;
"RTN","XWB2HL7A",36,0)
D2 N I,J,HL,HLA,HLL,XWB2LSTI,HLERR,XWB2EMAP,XWB2FLD,XWB2LPRM,XWB2MAP2,XWB2PARM,XWB2QTAG,XWB2SPRL,XWB2SPR,XWB2X,XWB2EID,XWB2MIEN,XWB2OVFL,XWB2RSLT,Y
"RTN","XWB2HL7A",37,0)
 S XWB2QTAG=$G(XWB2HNDL)
"RTN","XWB2HL7A",38,0)
 S XWB2SPN=$G(XWB2SPN)
"RTN","XWB2HL7A",39,0)
 S XWB2FLD="@SPR.4.2"
"RTN","XWB2HL7A",40,0)
 S (XWB2RET,XWB2PARM)=""
"RTN","XWB2HL7A",41,0)
 D BLDDIST($G(XWB2DEST))
"RTN","XWB2HL7A",42,0)
 I '$O(HLL("LINKS",0)) S $P(XWB2RET,"^",2,3)="-1^Station # not found" Q
"RTN","XWB2HL7A",43,0)
 S XWB2EID=+$$FIND1^DIC(101,,"MX","XWB RPC EVENT")
"RTN","XWB2HL7A",44,0)
 I 'XWB2EID S $P(XWB2RET,"^",2,3)="-1^RPC Broker Protocol not setup" Q
"RTN","XWB2HL7A",45,0)
 D INIT^HLFNC2(.XWB2EID,.HL)
"RTN","XWB2HL7A",46,0)
 I $O(HL(""))']"" S $P(XWB2RET,"^",2,3)="-1^RPC Broker Params not setup" Q
"RTN","XWB2HL7A",47,0)
 ;XWB2EMAP=encoding characters to map by order.
"RTN","XWB2HL7A",48,0)
 ;XWB2MAP2=escaped characters used for mapping encoding characters.
"RTN","XWB2HL7A",49,0)
 S Y=""
"RTN","XWB2HL7A",50,0)
 F I=3,0,1,2,4 S Y=Y_$S(I:$E(HL("ECH"),I),1:HL("FS"))
"RTN","XWB2HL7A",51,0)
 S XWB2EMAP=Y,XWB2MAP2="EFSRT"
"RTN","XWB2HL7A",52,0)
 F I=0:0 S I=$O(XWB2PRAM(I)) Q:I'>0!$P(XWB2RET,"^",2)  D
"RTN","XWB2HL7A",53,0)
 .I $L(XWB2PRAM(I))>255 S $P(XWB2RET,"^",2,3)="-1^RPC Parameter(s) exceed length of 255." Q
"RTN","XWB2HL7A",54,0)
 .S XWB2PRAM(I)=$$XLATE(XWB2PRAM(I),.XWB2OVFL)
"RTN","XWB2HL7A",55,0)
 .S J=0
"RTN","XWB2HL7A",56,0)
 .I $O(XWB2OVFL(0)) D  K XWB2OVFL
"RTN","XWB2HL7A",57,0)
 ..F K=1,2 I $D(XWB2OVFL(K)) D
"RTN","XWB2HL7A",58,0)
 ...S XWB2PRAM(I,(K/10))=XWB2OVFL(1)
"RTN","XWB2HL7A",59,0)
 ...S J=(K/10) K XWB2OVFL(K)
"RTN","XWB2HL7A",60,0)
 .F  S J=$O(XWB2PRAM(I,J)) Q:J'>0!$P(XWB2RET,"^",2)  D
"RTN","XWB2HL7A",61,0)
 ..I $L(XWB2PRAM(I))>255 S $P(XWB2RET,"^",2,3)="-1^RPC Parameter(s) exceed length of 255." Q
"RTN","XWB2HL7A",62,0)
 ..S XWB2PRAM(I,J)=$$XLATE(XWB2PRAM(I,J),.XWB2OVFL)
"RTN","XWB2HL7A",63,0)
 ..I $O(XWB2OVFL(0)) D  K XWB2OVFL
"RTN","XWB2HL7A",64,0)
 ...F K=1,2 I $D(XWB2OVFL(K)) D
"RTN","XWB2HL7A",65,0)
 ....S XWB2PRAM(I,J+(K/10))=XWB2OVFL(1)
"RTN","XWB2HL7A",66,0)
 ....S J=J+(K/10) K XWB2OVFL(K)
"RTN","XWB2HL7A",67,0)
 I $P(XWB2RET,"^",2) Q
"RTN","XWB2HL7A",68,0)
 D RPCSEND
"RTN","XWB2HL7A",69,0)
 M XWB2RET=XWB2RSLT ;Move the return info into return var.
"RTN","XWB2HL7A",70,0)
CALLXIT ;Cleanup before exit.
"RTN","XWB2HL7A",71,0)
 Q
"RTN","XWB2HL7A",72,0)
 ;
"RTN","XWB2HL7A",73,0)
RPCSEND ;
"RTN","XWB2HL7A",74,0)
 N I,J
"RTN","XWB2HL7A",75,0)
 S HLA("HLS",1)="SPR"_HL("FS")_XWB2QTAG_HL("FS")_"T"_HL("FS")_XWB2SPN_HL("FS")_XWB2FLD_$E(HL("ECH"))
"RTN","XWB2HL7A",76,0)
 S XWB2SPRL=$L(HLA("HLS",1)),XWB2SPR=$NA(HLA("HLS",1))
"RTN","XWB2HL7A",77,0)
 S I=$O(XWB2PRAM(0)) Q:I'>0  D
"RTN","XWB2HL7A",78,0)
 .S XWB2LSTI=I,XWB2X=XWB2PRAM(I)
"RTN","XWB2HL7A",79,0)
 .I (XWB2SPRL+$L(XWB2X))>255!$O(XWB2PRAM(I,0)) D NXTNODE
"RTN","XWB2HL7A",80,0)
 .S @XWB2SPR=@XWB2SPR_XWB2X,XWB2SPRL=$L(@XWB2SPR)
"RTN","XWB2HL7A",81,0)
 .F J=0:0 S J=$O(XWB2PRAM(I,J)) Q:J'>0  D
"RTN","XWB2HL7A",82,0)
 ..S XWB2X=XWB2PRAM(I,J)
"RTN","XWB2HL7A",83,0)
 ..D NXTNODE
"RTN","XWB2HL7A",84,0)
 ..S @XWB2SPR=@XWB2SPR_XWB2X,XWB2SPRL=$L(@XWB2SPR)
"RTN","XWB2HL7A",85,0)
 ..Q
"RTN","XWB2HL7A",86,0)
 F  S I=$O(XWB2PRAM(I)) Q:I'>0  D
"RTN","XWB2HL7A",87,0)
 .S XWB2X=XWB2PRAM(I)
"RTN","XWB2HL7A",88,0)
 .I (XWB2SPRL+$L(XWB2X)+1)>255!$O(XWB2PRAM(I,0)) D NXTNODE
"RTN","XWB2HL7A",89,0)
 .S @XWB2SPR=@XWB2SPR_$E(HL("ECH"),4)_XWB2X,XWB2SPRL=$L(@XWB2SPR)
"RTN","XWB2HL7A",90,0)
 .F J=0:0 S J=$O(XWB2PRAM(I,J)) Q:J'>0  D
"RTN","XWB2HL7A",91,0)
 ..S XWB2X=XWB2PRAM(I,J)
"RTN","XWB2HL7A",92,0)
 ..D NXTNODE
"RTN","XWB2HL7A",93,0)
 ..S @XWB2SPR=@XWB2SPR_XWB2X,XWB2SPRL=$L(@XWB2SPR)
"RTN","XWB2HL7A",94,0)
 ..Q
"RTN","XWB2HL7A",95,0)
 S HLA("HLS",2)="RDF"_HL("FS")_"1"_HL("FS")_"@DSP.3"_$E(HL("ECH"))_"TX"_$E(HL("ECH"))_"300"
"RTN","XWB2HL7A",96,0)
 I $D(XWB2DRCT) D DIRECT^HLMA(XWB2EID,"LM",1,.XWB2RSLT) Q
"RTN","XWB2HL7A",97,0)
 D GENERATE^HLMA(XWB2EID,"LM",1,.XWB2RSLT,.XWB2MIEN)
"RTN","XWB2HL7A",98,0)
 Q
"RTN","XWB2HL7A",99,0)
 ;
"RTN","XWB2HL7A",100,0)
NXTNODE ;Get next node
"RTN","XWB2HL7A",101,0)
 N XWB2QL,XWB2QS
"RTN","XWB2HL7A",102,0)
 S XWB2QL=$QL($NA(@XWB2SPR))
"RTN","XWB2HL7A",103,0)
 I XWB2QL=2 S XWB2SPR=$NA(@XWB2SPR@(1)),@XWB2SPR="" Q
"RTN","XWB2HL7A",104,0)
 I XWB2QL=3 D  Q
"RTN","XWB2HL7A",105,0)
 .S XWB2QS=+$QS($NA(@XWB2SPR),3)+1
"RTN","XWB2HL7A",106,0)
 .S XWB2SPR=$NA(@$NA(@XWB2SPR,2)@(XWB2QS)),@XWB2SPR=""
"RTN","XWB2HL7A",107,0)
 Q
"RTN","XWB2HL7A",108,0)
 ;
"RTN","XWB2HL7A",109,0)
 ;
"RTN","XWB2HL7A",110,0)
BLDDIST(X) ;Build distribution list -- HLL("LINKS") ARRAY.
"RTN","XWB2HL7A",111,0)
 N %,XWB2LIST
"RTN","XWB2HL7A",112,0)
 D LINK^HLUTIL3(X,.XWB2LIST,"I")
"RTN","XWB2HL7A",113,0)
 S %=+$O(XWB2LIST(0)) Q:'%
"RTN","XWB2HL7A",114,0)
 S HLL("LINKS",1)="XWB RPC SUBSCRIBER"_U_XWB2LIST(%)
"RTN","XWB2HL7A",115,0)
 Q
"RTN","XWB2HL7A",116,0)
XLATE(S,OF) ;TRANSLATE FS and Encoding characters to Formating codes.
"RTN","XWB2HL7A",117,0)
 ;Change ^ > \F\
"RTN","XWB2HL7A",118,0)
 N X,I,I1,I2,I3,FC,TC,N,Y,Y1,L,L1,L2
"RTN","XWB2HL7A",119,0)
 S OF(0)=S
"RTN","XWB2HL7A",120,0)
 F I1=1:1:5 S FC=$E(XWB2EMAP,I1),TC=$E(XWB2MAP2,I1) D
"RTN","XWB2HL7A",121,0)
 . S Y=""
"RTN","XWB2HL7A",122,0)
 . F I2=0,1,2 Q:'$D(OF(I2))  S S=OF(I2) D  S OF(I2)=S
"RTN","XWB2HL7A",123,0)
 . . S L1=1,L2=$F(S,FC) Q:'L2
"RTN","XWB2HL7A",124,0)
 . . F  S Y1=$E(S,L1,L2-2) D  S L1=L2,L2=$F(S,FC,L1) Q:'L2
"RTN","XWB2HL7A",125,0)
 . . . ;If next part wont fit, add it to the overflow node and exit
"RTN","XWB2HL7A",126,0)
 . . . I $L(Y)+$L(Y1)+3>250 S OF(I2+1)=$E(S,L1,$L(S))_$G(OF(I2+1)),OF(I2)=Y,S="" Q
"RTN","XWB2HL7A",127,0)
 . . . S Y=Y_Y1_$$ECODE(TC)
"RTN","XWB2HL7A",128,0)
 . . . Q
"RTN","XWB2HL7A",129,0)
 . . ;Add the rest of S to the output.
"RTN","XWB2HL7A",130,0)
 . . S N=$E(S,L1,$L(S)) I $L(Y)+$L(N)>250 S OF(I2+1)=N_$G(OF(I2+1)),N=""
"RTN","XWB2HL7A",131,0)
 . . S S=Y_N,Y=""
"RTN","XWB2HL7A",132,0)
 . . Q
"RTN","XWB2HL7A",133,0)
 . Q
"RTN","XWB2HL7A",134,0)
 S Y=OF(0) K OF(0)
"RTN","XWB2HL7A",135,0)
 Q Y
"RTN","XWB2HL7A",136,0)
 ;
"RTN","XWB2HL7A",137,0)
ECODE(%) ;
"RTN","XWB2HL7A",138,0)
 Q $E(HL("ECH"),3)_%_$E(HL("ECH"),3)
"RTN","XWB2HL7A",139,0)
 ;
"VER")
8.0^22.0
"BLD",1223,6)
^41
**END**
**END**

Released XT*7.3*116 SEQ #88
Extracted from mail message
**KIDS**:XT*7.3*116^

**INSTALL NAME**
XT*7.3*116
"BLD",1125,0)
XT*7.3*116^TOOLKIT^0^3080908^y
"BLD",1125,1,0)
^^2^2^3080908^
"BLD",1125,1,1,0)
Please refer to the Description in the FORUM Patch Module for details.
"BLD",1125,1,2,0)
XT*7.3*116  Update XML parser to handle long Attributes.
"BLD",1125,4,0)
^9.64PA^^
"BLD",1125,6.3)
1
"BLD",1125,"KRN",0)
^9.67PA^9002226^21
"BLD",1125,"KRN",.4,0)
.4
"BLD",1125,"KRN",.401,0)
.401
"BLD",1125,"KRN",.402,0)
.402
"BLD",1125,"KRN",.403,0)
.403
"BLD",1125,"KRN",.5,0)
.5
"BLD",1125,"KRN",.84,0)
.84
"BLD",1125,"KRN",3.6,0)
3.6
"BLD",1125,"KRN",3.8,0)
3.8
"BLD",1125,"KRN",9.2,0)
9.2
"BLD",1125,"KRN",9.8,0)
9.8
"BLD",1125,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",1125,"KRN",9.8,"NM",1,0)
MXMLPRSE^^0^B64969959
"BLD",1125,"KRN",9.8,"NM","B","MXMLPRSE",1)

"BLD",1125,"KRN",19,0)
19
"BLD",1125,"KRN",19.1,0)
19.1
"BLD",1125,"KRN",101,0)
101
"BLD",1125,"KRN",409.61,0)
409.61
"BLD",1125,"KRN",771,0)
771
"BLD",1125,"KRN",779.2,0)
779.2
"BLD",1125,"KRN",870,0)
870
"BLD",1125,"KRN",8989.51,0)
8989.51
"BLD",1125,"KRN",8989.52,0)
8989.52
"BLD",1125,"KRN",8994,0)
8994
"BLD",1125,"KRN",9002226,0)
9002226
"BLD",1125,"KRN","B",.4,.4)

"BLD",1125,"KRN","B",.401,.401)

"BLD",1125,"KRN","B",.402,.402)

"BLD",1125,"KRN","B",.403,.403)

"BLD",1125,"KRN","B",.5,.5)

"BLD",1125,"KRN","B",.84,.84)

"BLD",1125,"KRN","B",3.6,3.6)

"BLD",1125,"KRN","B",3.8,3.8)

"BLD",1125,"KRN","B",9.2,9.2)

"BLD",1125,"KRN","B",9.8,9.8)

"BLD",1125,"KRN","B",19,19)

"BLD",1125,"KRN","B",19.1,19.1)

"BLD",1125,"KRN","B",101,101)

"BLD",1125,"KRN","B",409.61,409.61)

"BLD",1125,"KRN","B",771,771)

"BLD",1125,"KRN","B",779.2,779.2)

"BLD",1125,"KRN","B",870,870)

"BLD",1125,"KRN","B",8989.51,8989.51)

"BLD",1125,"KRN","B",8989.52,8989.52)

"BLD",1125,"KRN","B",8994,8994)

"BLD",1125,"KRN","B",9002226,9002226)

"BLD",1125,"QUES",0)
^9.62^^
"MBREQ")
0
"PKG",6,-1)
1^1
"PKG",6,0)
TOOLKIT^XT^PROGRAMMERS OPTIONS, MULTI. TERM LOOKUP^
"PKG",6,20,0)
^9.402P^^0
"PKG",6,22,0)
^9.49I^1^1
"PKG",6,22,1,0)
7.3^3040428^2970513^2
"PKG",6,22,1,"PAH",1,0)
116^3080908
"PKG",6,22,1,"PAH",1,1,0)
^^2^2^3080908
"PKG",6,22,1,"PAH",1,1,1,0)
Please refer to the Description in the FORUM Patch Module for details.
"PKG",6,22,1,"PAH",1,1,2,0)
XT*7.3*116  Update XML parser to handle long Attributes.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","MXMLPRSE")
0^1^B64969959^B64689690
"RTN","MXMLPRSE",1,0)
MXMLPRSE ;SAIC/DKM - XML Parser ;09/08/08  11:50
"RTN","MXMLPRSE",2,0)
 ;;7.3;TOOLKIT;**58,67,89,116**;Apr 25, 1995;Build 1
"RTN","MXMLPRSE",3,0)
 ;=================================================================
"RTN","MXMLPRSE",4,0)
 ; Main entry point.
"RTN","MXMLPRSE",5,0)
 ; DOC = Closed reference to global array containing document
"RTN","MXMLPRSE",6,0)
 ; CBK = Local array containing entry points for callback interface
"RTN","MXMLPRSE",7,0)
 ; OPTION = Option flags; expected values are:
"RTN","MXMLPRSE",8,0)
 ;   D = Debug mode
"RTN","MXMLPRSE",9,0)
 ;   W = Do not report warnings
"RTN","MXMLPRSE",10,0)
 ;   V = Validate (checks only well-formedness by default)
"RTN","MXMLPRSE",11,0)
 ;   0,1 = Terminate on encountering error at specified level
"RTN","MXMLPRSE",12,0)
EN(DOC,CBK,OPTION) ;
"RTN","MXMLPRSE",13,0)
 N WS,ID,QT,EDC,DTD,LVL,CS,DOCSTK,LLEN,LPOS,CPOS,LCUR,ERR,XML,PFX,SFX,EOD,EOG,ST,PATH,OFX
"RTN","MXMLPRSE",14,0)
 S ID=$T(+0),WS=$C(9,10,13,32),QT="""",(DOCSTK,EOG,EOD,LVL,CS,ST,LPOS,LLEN,LCUR)=0,(CPOS,LVL(0,"N"))=1,OPTION=$G(OPTION),(XML,PFX,SFX)="",PATH=$$PATH(DOC)
"RTN","MXMLPRSE",15,0)
 K ^TMP(ID,$J)
"RTN","MXMLPRSE",16,0)
 I $L($T(TOUCH^XUSCLEAN)) D TOUCH^XUSCLEAN ;Set the keepalive node
"RTN","MXMLPRSE",17,0)
 D INIT^MXMLPRS1,EPOS,CBK("STARTDOCUMENT"),OPNDOC(DOC)
"RTN","MXMLPRSE",18,0)
 F  Q:EOD  D READ,EPOS,@ST^MXMLPRS0:'EOD
"RTN","MXMLPRSE",19,0)
 D UNRESLV^MXMLPRS1,ERROR(17):ST'=2,CBK("ENDDOCUMENT")
"RTN","MXMLPRSE",20,0)
 K ^TMP(ID,$J)
"RTN","MXMLPRSE",21,0)
 Q
"RTN","MXMLPRSE",22,0)
 ; Open a document
"RTN","MXMLPRSE",23,0)
 ; Saves state of current document on stack.
"RTN","MXMLPRSE",24,0)
 ; DOCREF=Closed reference to array containing document
"RTN","MXMLPRSE",25,0)
 ; PREFIX=Optional prefix to prepend to document
"RTN","MXMLPRSE",26,0)
 ; SUFFIX=Optional suffix to append to document
"RTN","MXMLPRSE",27,0)
OPNDOC(DOCREF,PREFIX,SUFFIX) ;
"RTN","MXMLPRSE",28,0)
 S:$E(DOCREF)'="^" DOCREF=$$EXTRNL(DOCREF)
"RTN","MXMLPRSE",29,0)
 Q:'$L(DOCREF)
"RTN","MXMLPRSE",30,0)
 D SAVRES(1)
"RTN","MXMLPRSE",31,0)
 S DOC=$NA(@DOCREF)
"RTN","MXMLPRSE",32,0)
 I '$D(^TMP(ID,$J,"DOC",DOC)) S ^(DOC)=""
"RTN","MXMLPRSE",33,0)
 E  D ERROR(43)
"RTN","MXMLPRSE",34,0)
 S (LPOS,LLEN,LCUR)=0,CPOS=1,(OFX,XML)="",PFX=$G(PREFIX),SFX=$G(SUFFIX)
"RTN","MXMLPRSE",35,0)
 S LCUR=DOC,DOC=$E(DOC,1,$L(DOC)-1) ;*rwf
"RTN","MXMLPRSE",36,0)
 Q
"RTN","MXMLPRSE",37,0)
 ; Close current document
"RTN","MXMLPRSE",38,0)
 ; Restores state of previous document from stack.
"RTN","MXMLPRSE",39,0)
CLSDOC K ^TMP(ID,$J,"DOC",DOC_")") ;*rwf
"RTN","MXMLPRSE",40,0)
 D SAVRES(0)
"RTN","MXMLPRSE",41,0)
 Q
"RTN","MXMLPRSE",42,0)
 ; Extract path from filespec
"RTN","MXMLPRSE",43,0)
PATH(DOC) ;
"RTN","MXMLPRSE",44,0)
 N X
"RTN","MXMLPRSE",45,0)
 Q:U[$E(DOC) ""
"RTN","MXMLPRSE",46,0)
 F X="\","/","]",":","" Q:DOC[X
"RTN","MXMLPRSE",47,0)
 Q $P(DOC,X,1,$L(DOC,X)-1)_X
"RTN","MXMLPRSE",48,0)
 ; Save or restore document state
"RTN","MXMLPRSE",49,0)
SAVRES(SAVE) ;
"RTN","MXMLPRSE",50,0)
 N X
"RTN","MXMLPRSE",51,0)
 S:'SAVE DOCSTK=DOCSTK-1,EOD=DOCSTK=0
"RTN","MXMLPRSE",52,0)
 I DOCSTK F X="LLEN","LPOS","CPOS","LCUR","XML","PFX","SFX","OFX","DOC" D
"RTN","MXMLPRSE",53,0)
 .I SAVE S DOCSTK(DOCSTK,X)=@X
"RTN","MXMLPRSE",54,0)
 .E  S @X=DOCSTK(DOCSTK,X)
"RTN","MXMLPRSE",55,0)
 I SAVE S DOCSTK=DOCSTK+1
"RTN","MXMLPRSE",56,0)
 E  K DOCSTK(DOCSTK)
"RTN","MXMLPRSE",57,0)
 Q
"RTN","MXMLPRSE",58,0)
 ; Retrieve text from document
"RTN","MXMLPRSE",59,0)
READ Q:((LLEN-CPOS)>50)!EOD  ;Quit if still have 50 char or EOD
"RTN","MXMLPRSE",60,0)
 I (CPOS'<LLEN)&EOG D CLSDOC S EOG=0 Q  ;At end of text in file
"RTN","MXMLPRSE",61,0)
 N TMP,X
"RTN","MXMLPRSE",62,0)
 D SHIFT Q:$L(XML)>50
"RTN","MXMLPRSE",63,0)
 I EOG!EOD Q  ;Quit at end of document
"RTN","MXMLPRSE",64,0)
 S LPOS=LPOS+1,LCUR=$Q(@LCUR) ;Get next node
"RTN","MXMLPRSE",65,0)
 I LCUR'[DOC S EOG=1 Q  ;At end of global
"RTN","MXMLPRSE",66,0)
 S TMP=@LCUR ;Get next data chunk
"RTN","MXMLPRSE",67,0)
 W:OPTION["D" !,$J(LPOS,3)_":",TMP,!
"RTN","MXMLPRSE",68,0)
 S OFX=OFX_TMP
"RTN","MXMLPRSE",69,0)
 D SHIFT
"RTN","MXMLPRSE",70,0)
 I LLEN<50 G READ
"RTN","MXMLPRSE",71,0)
 Q
"RTN","MXMLPRSE",72,0)
 ;Shift OFX to XML
"RTN","MXMLPRSE",73,0)
SHIFT ;
"RTN","MXMLPRSE",74,0)
 S XML=$E(XML,CPOS,9999),CPOS=1 ;Drop old
"RTN","MXMLPRSE",75,0)
 I $L(PFX) S OFX=XML_OFX,XML=PFX,PFX=""
"RTN","MXMLPRSE",76,0)
 I $L(OFX) S X=511-$L(XML),XML=XML_$E(OFX,1,X),OFX=$E(OFX,X+1,99999)
"RTN","MXMLPRSE",77,0)
 S LLEN=$L(XML)
"RTN","MXMLPRSE",78,0)
 Q
"RTN","MXMLPRSE",79,0)
 ; Parse name
"RTN","MXMLPRSE",80,0)
 ; ERN=Error to signal if invalid (optional)
"RTN","MXMLPRSE",81,0)
NAME(ERN) ;
"RTN","MXMLPRSE",82,0)
 N X
"RTN","MXMLPRSE",83,0)
 D EPOS
"RTN","MXMLPRSE",84,0)
 S X=$E(XML,CPOS)
"RTN","MXMLPRSE",85,0)
 I X'?1A,"_:"'[X D:$G(ERN) ERROR(ERN,X) Q ""
"RTN","MXMLPRSE",86,0)
 Q $$NAMETKN(.ERN)
"RTN","MXMLPRSE",87,0)
 ; Parse name token
"RTN","MXMLPRSE",88,0)
 ; ERN=Error to signal if invalid (optional)
"RTN","MXMLPRSE",89,0)
NAMETKN(ERN) ;
"RTN","MXMLPRSE",90,0)
 N X,Y
"RTN","MXMLPRSE",91,0)
 D EPOS
"RTN","MXMLPRSE",92,0)
 F X=CPOS:1:LLEN+1 S Y=$E(XML,X) I Y'?1AN,".-_:"'[Y Q
"RTN","MXMLPRSE",93,0)
 S Y=$E(XML,CPOS,X-1),CPOS=X
"RTN","MXMLPRSE",94,0)
 I '$L(Y),$G(ERN) D ERROR(ERN,Y)
"RTN","MXMLPRSE",95,0)
 Q Y
"RTN","MXMLPRSE",96,0)
 ; Parse quote-enclosed value
"RTN","MXMLPRSE",97,0)
 ; ERF=If set, signal error if not found
"RTN","MXMLPRSE",98,0)
 ; FLG=Special flag: 0=attribute literal, 1=general entity literal
"RTN","MXMLPRSE",99,0)
 ;     2=parameter entity literal
"RTN","MXMLPRSE",100,0)
 ; Returns value less quotes with normalized whitespace
"RTN","MXMLPRSE",101,0)
VALUE(ERF,FLG) ;
"RTN","MXMLPRSE",102,0)
 N DLM,CHR,RTN,EXC
"RTN","MXMLPRSE",103,0)
 D WS()
"RTN","MXMLPRSE",104,0)
 S DLM=$S($$NEXT(QT):QT,$$NEXT("'"):"'",1:""),RTN="",FLG=+$G(FLG),EXC=$S(FLG=2:"",1:"<")
"RTN","MXMLPRSE",105,0)
 I DLM="" D:$G(ERF) EPOS,ERROR(11) Q RTN
"RTN","MXMLPRSE",106,0)
 F  S CHR=$E(XML,CPOS) Q:DLM=CHR!(EXC[CHR)!EOD  D
"RTN","MXMLPRSE",107,0)
 .I $$NEXT("&#") S RTN=RTN_$$CHENTITY
"RTN","MXMLPRSE",108,0)
 .E  I 'FLG,$$NEXT("&") S RTN=RTN_$$ENTITY
"RTN","MXMLPRSE",109,0)
 .E  S RTN=RTN_CHR,CPOS=CPOS+1
"RTN","MXMLPRSE",110,0)
 .D:CPOS>LLEN READ
"RTN","MXMLPRSE",111,0)
 I DLM=CHR S CPOS=CPOS+1
"RTN","MXMLPRSE",112,0)
 E  D EPOS,ERROR($S('$L(CHR):12,EXC[CHR:13,1:12)) Q ""
"RTN","MXMLPRSE",113,0)
 Q $$NMLWS(RTN)
"RTN","MXMLPRSE",114,0)
 ; Normalize whitespace
"RTN","MXMLPRSE",115,0)
 ; Note: used as input transform for Entity Catalog, so can't depend
"RTN","MXMLPRSE",116,0)
 ; on any environment variables.
"RTN","MXMLPRSE",117,0)
 ; TXT=Text to normalize
"RTN","MXMLPRSE",118,0)
 ; Returns text stripped of leading and trailing whitespace and with
"RTN","MXMLPRSE",119,0)
 ; imbedded contiguous whitespace reduced to single space.
"RTN","MXMLPRSE",120,0)
NMLWS(TXT,FG) ;
"RTN","MXMLPRSE",121,0)
 N Z,CRLF
"RTN","MXMLPRSE",122,0)
 S CRLF=$C(13,10)
"RTN","MXMLPRSE",123,0)
 ;Normalize CRLF to one SP first
"RTN","MXMLPRSE",124,0)
 F  S Z=$F(TXT,CRLF) Q:'Z  S TXT=$P(TXT,CRLF,1)_" "_$P(TXT,CRLF,2,999)
"RTN","MXMLPRSE",125,0)
 S TXT=$TR(TXT,$C(9,10,13,32),"    ")
"RTN","MXMLPRSE",126,0)
 ;For CDATA or unk, this is where we should stop
"RTN","MXMLPRSE",127,0)
 Q:'$G(FG) TXT
"RTN","MXMLPRSE",128,0)
 F Z=1:1 Q:$E(TXT,Z)'=" "
"RTN","MXMLPRSE",129,0)
 S TXT=$E(TXT,Z,9999)
"RTN","MXMLPRSE",130,0)
 F Z=$L(TXT):-1 Q:$E(TXT,Z)'=" "
"RTN","MXMLPRSE",131,0)
 S TXT=$E(TXT,1,Z)
"RTN","MXMLPRSE",132,0)
 F Z=1:1:$L(TXT) D:$E(TXT,Z)=" "
"RTN","MXMLPRSE",133,0)
 .F  Q:$E(TXT,Z+1)'=" "  S $E(TXT,Z+1)=""
"RTN","MXMLPRSE",134,0)
 Q TXT
"RTN","MXMLPRSE",135,0)
 ; Process parameter entity if found
"RTN","MXMLPRSE",136,0)
DOPARAM F  D WS() Q:EOD!'$$NEXT("%")  I $$ENTITY(1)
"RTN","MXMLPRSE",137,0)
 Q
"RTN","MXMLPRSE",138,0)
 ; Resolve general/parameter/character entity
"RTN","MXMLPRSE",139,0)
 ; PARAM=1: parameter; PARAM=0: general or character (default)
"RTN","MXMLPRSE",140,0)
ENTITY(PARAM) ;
"RTN","MXMLPRSE",141,0)
 N NAME,APND
"RTN","MXMLPRSE",142,0)
 S PARAM=+$G(PARAM)
"RTN","MXMLPRSE",143,0)
 I 'PARAM,$$NEXT("#") Q $$CHENTITY
"RTN","MXMLPRSE",144,0)
 S NAME=$S(PARAM:"%",1:"")_$$NAME(2)
"RTN","MXMLPRSE",145,0)
 Q:'$$NEXT(";",3) ""
"RTN","MXMLPRSE",146,0)
 ;Handle the common ones inline
"RTN","MXMLPRSE",147,0)
 S APND=$S(NAME="amp":"&",NAME="lt":"<",NAME="gt":">",NAME="quot":$C(34),NAME="apos":"'",1:"")
"RTN","MXMLPRSE",148,0)
 Q:$L(APND) APND
"RTN","MXMLPRSE",149,0)
 I $D(^TMP(ID,$J,"UNP",NAME)) D ERROR(40,NAME) Q ""
"RTN","MXMLPRSE",150,0)
 I '$D(^TMP(ID,$J,"ENT",NAME)) D ERROR(14,NAME) Q ""
"RTN","MXMLPRSE",151,0)
 S APND=$S(PARAM:" ",1:"")
"RTN","MXMLPRSE",152,0)
 D OPNDOC(^TMP(ID,$J,"ENT",NAME),APND,APND)
"RTN","MXMLPRSE",153,0)
 Q ""
"RTN","MXMLPRSE",154,0)
 ; Parse character entity reference
"RTN","MXMLPRSE",155,0)
 ; Returns character equivalent
"RTN","MXMLPRSE",156,0)
CHENTITY() ;
"RTN","MXMLPRSE",157,0)
 N DIGIT,BASE,DIGITS,VAL
"RTN","MXMLPRSE",158,0)
 S BASE=$S($$NEXT("x"):16,1:10),DIGITS="0123456789"_$S(BASE=16:"ABCDEF",1:""),VAL=0
"RTN","MXMLPRSE",159,0)
 F CPOS=CPOS:1:LLEN+1 Q:$$NEXT(";")!EOD  D
"RTN","MXMLPRSE",160,0)
 .S DIGIT=$F(DIGITS,$$UP^XLFSTR($E(XML,CPOS)))-2,VAL=VAL*BASE+DIGIT
"RTN","MXMLPRSE",161,0)
 .D:DIGIT<0 ERROR(19)
"RTN","MXMLPRSE",162,0)
 I VAL<32,WS'[$C(VAL) D ERROR(19)
"RTN","MXMLPRSE",163,0)
 Q $C(VAL)
"RTN","MXMLPRSE",164,0)
 ; Set an entity value
"RTN","MXMLPRSE",165,0)
SETENT(NAME,VAL) ;
"RTN","MXMLPRSE",166,0)
 K ^TMP(ID,$J,"ENT",NAME)
"RTN","MXMLPRSE",167,0)
 S ^(NAME)=$NA(^(NAME)),^(NAME,1)=VAL
"RTN","MXMLPRSE",168,0)
 Q
"RTN","MXMLPRSE",169,0)
 ; Process all attributes
"RTN","MXMLPRSE",170,0)
ATTRIBS(ENAME,ATTR) ;
"RTN","MXMLPRSE",171,0)
 N TYP,MOD,DEF,ANAME
"RTN","MXMLPRSE",172,0)
 K ATTR
"RTN","MXMLPRSE",173,0)
 F  Q:'$$ATTRIB(ENAME,.ATTR)
"RTN","MXMLPRSE",174,0)
 I OPTION["V" D
"RTN","MXMLPRSE",175,0)
 .S ANAME="$"
"RTN","MXMLPRSE",176,0)
 .F  S ANAME=$O(^TMP(ID,$J,"ATT",ENAME,ANAME)) Q:'$L(ANAME)  D
"RTN","MXMLPRSE",177,0)
 ..S TYP=^(ANAME),MOD=$P(TYP,"^",2),DEF=$P(TYP,"^",3,9999),TYP=+TYP
"RTN","MXMLPRSE",178,0)
 ..I MOD=1!(MOD=3),'$D(ATTR(ANAME)) D ERROR(36,ANAME) Q
"RTN","MXMLPRSE",179,0)
 ..I MOD=3,ATTR(ANAME)'=DEF D ERROR(37,ATTR(ANAME)) Q
"RTN","MXMLPRSE",180,0)
 ..I MOD=2,'$D(ATTR(ANAME)) Q
"RTN","MXMLPRSE",181,0)
 ..S:'$D(ATTR(ANAME)) ATTR(ANAME)=DEF
"RTN","MXMLPRSE",182,0)
 Q
"RTN","MXMLPRSE",183,0)
 ; Parse attribute=value sequence
"RTN","MXMLPRSE",184,0)
 ; ENAME=Element name to which attribute belongs
"RTN","MXMLPRSE",185,0)
 ; ATTR=Local array (by reference) to receive attribute value.
"RTN","MXMLPRSE",186,0)
 ;      Format is ATTR("<attribute name>")="<attribute value>"
"RTN","MXMLPRSE",187,0)
 ; Returns 1 if successful, 0 if not.
"RTN","MXMLPRSE",188,0)
ATTRIB(ENAME,ATTR) ;
"RTN","MXMLPRSE",189,0)
 N ANAME
"RTN","MXMLPRSE",190,0)
 D READ,WS() ;p116
"RTN","MXMLPRSE",191,0)
 S ANAME=$$NAME
"RTN","MXMLPRSE",192,0)
 Q:ANAME="" 0
"RTN","MXMLPRSE",193,0)
 I $D(ATTR(ANAME)) D ERROR(4,ANAME) Q 0
"RTN","MXMLPRSE",194,0)
 D:'$D(^TMP(ID,$J,"ATT",ENAME,ANAME)) ERROR(29,ANAME)
"RTN","MXMLPRSE",195,0)
 D READ,WS() ;p116
"RTN","MXMLPRSE",196,0)
 Q:'$$NEXT("=",3) 0
"RTN","MXMLPRSE",197,0)
 D WS()
"RTN","MXMLPRSE",198,0)
 S ATTR(ANAME)=$$VALUE(1)
"RTN","MXMLPRSE",199,0)
 D CHKVAL^MXMLPRS1(ENAME,ANAME,ATTR(ANAME))
"RTN","MXMLPRSE",200,0)
 Q 1
"RTN","MXMLPRSE",201,0)
 ; Parse a processing instruction
"RTN","MXMLPRSE",202,0)
 ; Returns 1 if PI found, 0 if not.
"RTN","MXMLPRSE",203,0)
PI() N PNAME,ARGS,DONE
"RTN","MXMLPRSE",204,0)
 Q:'$$NEXT("<?") 0
"RTN","MXMLPRSE",205,0)
 S PNAME=$$NAME(2),ARGS=0
"RTN","MXMLPRSE",206,0)
 I $$UP^XLFSTR(PNAME)="XML" D ERROR(9) Q 0
"RTN","MXMLPRSE",207,0)
 D WS(1)
"RTN","MXMLPRSE",208,0)
 F  S DONE=$F(XML,"?>",CPOS) D  Q:DONE!EOD
"RTN","MXMLPRSE",209,0)
 .S ARGS=ARGS+1,ARGS(ARGS)=$E(XML,CPOS,$S(DONE:DONE-3,1:LLEN))
"RTN","MXMLPRSE",210,0)
 .S CPOS=$S(DONE:DONE,1:LLEN+1)
"RTN","MXMLPRSE",211,0)
 .D READ
"RTN","MXMLPRSE",212,0)
 I EOD D ERROR(7) Q 0
"RTN","MXMLPRSE",213,0)
 D CBK("PI",PNAME,.ARGS)
"RTN","MXMLPRSE",214,0)
 Q 1
"RTN","MXMLPRSE",215,0)
 ; Parse a comment
"RTN","MXMLPRSE",216,0)
 ; Returns 1 if comment found, 0 if not.
"RTN","MXMLPRSE",217,0)
COMMENT() Q $$PARSCT("<!--","--",">","COMMENT")
"RTN","MXMLPRSE",218,0)
 ; Parse a CDATA section
"RTN","MXMLPRSE",219,0)
 ; Returns 1 if found, 0 if not.
"RTN","MXMLPRSE",220,0)
CDATA() Q $$PARSCT("<![CDATA[","]]>","","CHARACTERS")
"RTN","MXMLPRSE",221,0)
 ; Parse a section (for CDATA and COMMENT)
"RTN","MXMLPRSE",222,0)
 ; BGN=Beginning delimiter
"RTN","MXMLPRSE",223,0)
 ; END=Ending delimiter
"RTN","MXMLPRSE",224,0)
 ; TRL=Trailing delimiter
"RTN","MXMLPRSE",225,0)
 ; TYP=Event type
"RTN","MXMLPRSE",226,0)
PARSCT(BGN,END,TRL,TYP) ;
"RTN","MXMLPRSE",227,0)
 N X
"RTN","MXMLPRSE",228,0)
 Q:'$$NEXT(BGN) 0
"RTN","MXMLPRSE",229,0)
 D EPOS
"RTN","MXMLPRSE",230,0)
 I 'LVL,TYP'="COMMENT" D ERROR(6) Q 0
"RTN","MXMLPRSE",231,0)
 F  S X=$F(XML,END,CPOS) D  Q:X!EOD
"RTN","MXMLPRSE",232,0)
 .D CBK(TYP,$E(XML,CPOS,$S(X:X-$L(END)-1,1:LLEN)))
"RTN","MXMLPRSE",233,0)
 .S CPOS=$S(X:X,1:LLEN+1)
"RTN","MXMLPRSE",234,0)
 .D READ,EPOS
"RTN","MXMLPRSE",235,0)
 I EOD D ERROR(7) Q 0
"RTN","MXMLPRSE",236,0)
 I $L(TRL),$$NEXT(TRL,3)
"RTN","MXMLPRSE",237,0)
 Q 1
"RTN","MXMLPRSE",238,0)
 ; Fetch an external entity from file or entity catalog
"RTN","MXMLPRSE",239,0)
 ; SYS=System identifier (i.e., a URL)
"RTN","MXMLPRSE",240,0)
 ; PUB=Public identifier (i.e., Entity Catalog ID) - optional
"RTN","MXMLPRSE",241,0)
 ; GBL=Optional global root to receive entity content
"RTN","MXMLPRSE",242,0)
 ; Returns global reference or null if error
"RTN","MXMLPRSE",243,0)
EXTRNL(SYS,PUB,GBL) ;
"RTN","MXMLPRSE",244,0)
 N X,Y
"RTN","MXMLPRSE",245,0)
 S PUB=$$NMLWS($G(PUB)),GBL=$G(GBL)
"RTN","MXMLPRSE",246,0)
 I '$L(GBL) D CBK("EXTERNAL",.SYS,.PUB,.GBL) Q:$L(GBL) GBL
"RTN","MXMLPRSE",247,0)
 I $L(PUB) D  Q:X $NA(^MXML(950,X,1))
"RTN","MXMLPRSE",248,0)
 .S Y=$E(PUB,1,30),X=0
"RTN","MXMLPRSE",249,0)
 .F  S X=$O(^MXML(950,"B",Y,X)) Q:'X  Q:$G(^MXML(950,X,0))=PUB
"RTN","MXMLPRSE",250,0)
 S:'$L(GBL) GBL=$$TMPGBL
"RTN","MXMLPRSE",251,0)
 S:$$PATH(SYS)="" SYS=PATH_SYS
"RTN","MXMLPRSE",252,0)
 S X=$S($$FTG^%ZISH(SYS,"",$NA(@GBL@(1)),$QL(GBL)+1):GBL,1:"")
"RTN","MXMLPRSE",253,0)
 D:'$L(X) ERROR(30,$S($L(SYS):SYS,1:PUB))
"RTN","MXMLPRSE",254,0)
 Q X
"RTN","MXMLPRSE",255,0)
 ; Return a unique scratch global reference
"RTN","MXMLPRSE",256,0)
TMPGBL() N SUB
"RTN","MXMLPRSE",257,0)
 S SUB=$O(^TMP(ID,$J,$C(1)),-1)+1,^(SUB)=""
"RTN","MXMLPRSE",258,0)
 Q $NA(^(SUB))
"RTN","MXMLPRSE",259,0)
 ; Returns a SYSTEM and/or PUBLIC id
"RTN","MXMLPRSE",260,0)
 ; SYS=Returned SYSTEM id
"RTN","MXMLPRSE",261,0)
 ; PUB=Returned PUBLIC id
"RTN","MXMLPRSE",262,0)
 ; FLG=If set, SYSTEM id is optional after PUBLIC id
"RTN","MXMLPRSE",263,0)
 ; Optional return value: 0=neither, 1=PUBLIC, 2=SYSTEM
"RTN","MXMLPRSE",264,0)
SYSPUB(SYS,PUB,FLG) ;
"RTN","MXMLPRSE",265,0)
 N RTN
"RTN","MXMLPRSE",266,0)
 I $$NEXT("PUBLIC") D
"RTN","MXMLPRSE",267,0)
 .D WS(1)
"RTN","MXMLPRSE",268,0)
 .S PUB=$$VALUE(1),SYS=$$VALUE('$G(FLG)),RTN=1
"RTN","MXMLPRSE",269,0)
 E  I $$NEXT("SYSTEM") D
"RTN","MXMLPRSE",270,0)
 .D WS(1)
"RTN","MXMLPRSE",271,0)
 .S PUB="",SYS=$$VALUE(1),RTN=2
"RTN","MXMLPRSE",272,0)
 E  S (SYS,PUB)="",RTN=0
"RTN","MXMLPRSE",273,0)
 Q:$Q RTN
"RTN","MXMLPRSE",274,0)
 Q
"RTN","MXMLPRSE",275,0)
 ; Save current document location for error reporting
"RTN","MXMLPRSE",276,0)
 ; See EPOS^MXMLPRS0
"RTN","MXMLPRSE",277,0)
EPOS S ERR("XML")=XML,ERR("POS")=CPOS,ERR("LIN")=LPOS
"RTN","MXMLPRSE",278,0)
 Q
"RTN","MXMLPRSE",279,0)
 ; Setup error information
"RTN","MXMLPRSE",280,0)
ERROR(ERN,ARG) ;
"RTN","MXMLPRSE",281,0)
 N DIHELP,DIMSG,DIERR,MSG
"RTN","MXMLPRSE",282,0)
 D BLD^DIALOG(9500000+ERN,"","","MSG","")
"RTN","MXMLPRSE",283,0)
 S ERR("NUM")=ERN
"RTN","MXMLPRSE",284,0)
 S ERR("SEV")=$S($G(DIHELP):0,$G(DIMSG):1,1:2)
"RTN","MXMLPRSE",285,0)
 S ERR("MSG")=$G(MSG(1))
"RTN","MXMLPRSE",286,0)
 S ERR("ARG")=$G(ARG)
"RTN","MXMLPRSE",287,0)
 I OPTION'["W"!ERR("SEV"),OPTION["V"!(ERR("SEV")'=1) D CBK("ERROR",.ERR)
"RTN","MXMLPRSE",288,0)
 S:ERR("SEV")=2!(OPTION[ERR("SEV")) EOD=-1                             ; Stop parsing on severe error
"RTN","MXMLPRSE",289,0)
 Q
"RTN","MXMLPRSE",290,0)
 ; Shortcuts to functions/procedures defined elsewhere
"RTN","MXMLPRSE",291,0)
WS(X) Q:$Q $$WS^MXMLPRS0(.X)
"RTN","MXMLPRSE",292,0)
 D WS^MXMLPRS0(.X) Q
"RTN","MXMLPRSE",293,0)
CBK(X,Y1,Y2,Y3,Y4) D CBK^MXMLPRS0(.X,.Y1,.Y2,.Y3,.Y4) Q
"RTN","MXMLPRSE",294,0)
NEXT(X,Y) Q $$NEXT^MXMLPRS0(.X,.Y)
"VER")
8.0^22.0
"BLD",1125,6)
^88
**END**
**END**

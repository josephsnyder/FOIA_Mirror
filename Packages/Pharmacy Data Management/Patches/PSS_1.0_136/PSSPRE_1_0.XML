<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="Cache for OpenVMS/ALPHA V7.x (Alpha) 5.0.21 (Build 6408)" ts="2009-03-10 20:02:59">
<Class name="gov.va.med.pre.ws.XMLHandler">
<TimeChanged>61388,53627.35697</TimeChanged>
<TimeCreated>60820,30706.160302</TimeCreated>
<ClassDefinitionError>0</ClassDefinitionError>

<UDLText name="T">
<Category>comment</Category>
<Position>body</Position>
<Content><![CDATA[
// BAY/AV-REENGINERING Sends XML Request to PEPS via HWSC, Returns

]]></Content>
</UDLText>

<UDLText name="T">
<Category>comment</Category>
<Position>body</Position>
<Content><![CDATA[
// handle to XML document

]]></Content>
</UDLText>

<UDLText name="T">
<Category>comment</Category>
<Position>body</Position>
<Content><![CDATA[
// 1.0;PHARMACY DATA MANAGEMENT;;09/20/2007

]]></Content>
</UDLText>

<UDLText name="T">
<Category>comment</Category>
<Position>body</Position>
<Content><![CDATA[
//

]]></Content>
</UDLText>

<UDLText name="T">
<Category>comment</Category>
<Position>body</Position>
<Content><![CDATA[
// @author  - Alex Vazquez, Timothy Sabat

]]></Content>
</UDLText>

<UDLText name="T">
<Category>comment</Category>
<Position>body</Position>
<Content><![CDATA[
// @date    - September 19, 2007

]]></Content>
</UDLText>

<UDLText name="T">
<Category>comment</Category>
<Position>body</Position>
<Content><![CDATA[
// @version - 1.0

]]></Content>
</UDLText>

<Method name="getHandleToXmlDoc">
<ClassMethod>1</ClassMethod>
<FormalSpec>XMLAsStream:%Stream,docHandle</FormalSpec>
<ReturnType>%Library.String</ReturnType>
<Implementation><![CDATA[
	NEW xmlGlobalAddress,rslt
	
	// The MXMLDOM api will read the xml in from this global
	SET xmlGlobalAddress = $NA(^TMP($JOB,"OUT XML"))
	
	XECUTE "KILL "_xmlGlobalAddress
	
	// store in global readable to MXMLDOM
	SET rslt = ##class(gov.va.med.pre.ws.XMLHandler).storeXMLInGlobal(XMLAsStream, xmlGlobalAddress)
	
	// store handle in parameter (passed by ref.)
	SET rslt = ##class(gov.va.med.pre.ws.XMLHandler).getHandle(.docHandle, xmlGlobalAddress)
    
    QUIT rslt

]]></Implementation>
</Method>

<Method name="storeXMLInGlobal">
<ClassMethod>1</ClassMethod>
<FormalSpec>XMLAsStream:%Stream,xmlGlobalAddress:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	NEW xmlFraction,xml,count,maxString

	SET xml = ""
	
	// Single String length limit for cache is 32767 as of 
	// version 5.0. Set max read in length to less than 
	// string length limit.
	SET maxString = 15000
	SET count = 0
	
	// Iterate through stream
	While (XMLAsStream.AtEnd = 0) {
		SET xmlFraction = XMLAsStream.Read(.maxString)
        SET xml = xml_xmlFraction
        
        // function will return xml portion left 
        // after parsing xml. 
        SET xml = ##class(gov.va.med.pre.ws.XMLHandler).parseAndStoreInGlobal(.count, xml, xmlGlobalAddress)
     
    }
    QUIT 1

]]></Implementation>
</Method>

<Method name="parseAndStoreInGlobal">
<Description>
Parses XML and stores in global. If trailing string is invalid 
trailing XML substring is returned to calling function.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>count,xml,xmlGlobalAddress</FormalSpec>
<Implementation><![CDATA[
 ;
 ;xml This xml string must be parsed into an array that is usable by
 ;    MXMLDOM API routines. 
 ;    I.E. "<ROOT><SUBROOT></SUBROOT></ROOT>" must be converted to 
 ;     		ARRAY(0)="<ROOT>"
 ;     		ARRAY(1)="<SUBROOT>"
 ;     		ARRAY(2)="</SUBROOT>"
 ;     		ARRAY(3)="</ROOT>"
 ; 
 NEW frontEnd,charIndex,exe,tmpGlobalAddress
 NEW remainingXML
 ;
 ; Piece the global address for XECUTE function
 SET tmpGlobalAddress = $PIECE(xmlGlobalAddress,")",1)
 SET remainingXML = xml
 ;
 FOR count=count:1 QUIT:remainingXML'[">"  DO
 . SET charIndex=$FIND(remainingXML,">")
 . SET frontEnd=$EXTRACT(remainingXML,1,charIndex-1)
 . SET remainingXML=$EXTRACT(remainingXML,charIndex,$LENGTH(remainingXML))
 . ;
 . ; Store valid xml fraction to global node
 . SET exe="SET "_tmpGlobalAddress_",count)=frontEnd"
 . XECUTE exe
        
 QUIT remainingXML

]]></Implementation>
</Method>

<Method name="getHandle">
<ClassMethod>1</ClassMethod>
<FormalSpec>docHandle,xmlGlobalAddress</FormalSpec>
<Implementation><![CDATA[
	; call the MXMLDOM entry point
 	SET docHandle=$$EN^MXMLDOM(xmlGlobalAddress,"W")
 
 	IF docHandle = 0 QUIT "0^Unable to get handle to XML document."
 	IF docHandle > 0 QUIT "1^Document handle returned succesfully."

]]></Implementation>
</Method>

<Method name="getHandleForTest">
<ClassMethod>1</ClassMethod>
<FormalSpec>docHandle,xmlGlobalAddress</FormalSpec>
<Implementation><![CDATA[
	; call the MXMLDOM entry point
 	SET docHandle=$$EN^MXMLDOM(xmlGlobalAddress,"W")
 	
 	IF docHandle = 0 QUIT "0^Unable to get handle to XML document."
 	IF docHandle > 0 QUIT "1^Document handle returned succesfully."

]]></Implementation>
</Method>
</Class>
<Checksum value="1853243971"/>
</Export>
